1
00:00:03,550 --> 00:00:10,600
so Michael Gail yeah more caffeine um he

2
00:00:09,400 --> 00:00:12,730
actually is gonna talk about himself

3
00:00:10,600 --> 00:00:16,170
which is probably better job that I

4
00:00:12,730 --> 00:00:16,170
would do right just for about 40 minutes

5
00:00:24,780 --> 00:00:27,580
alright thanks very much for coming

6
00:00:26,410 --> 00:00:30,430
today for the old Stax

7
00:00:27,580 --> 00:00:32,738
security talk a little world warning I

8
00:00:30,430 --> 00:00:35,800
get really nervous I talk really fast

9
00:00:32,738 --> 00:00:38,980
I get really excited I also talk really

10
00:00:35,800 --> 00:00:40,140
really fast so uh I will try and stay in

11
00:00:38,980 --> 00:00:42,730
the middle

12
00:00:40,140 --> 00:00:43,480
this morning when I get up this morning

13
00:00:42,730 --> 00:00:45,819
this is how I felt

14
00:00:43,480 --> 00:00:48,010
yeah worst idea ever hey do you want to

15
00:00:45,820 --> 00:00:50,320
give a talk I said sure and say you're

16
00:00:48,010 --> 00:00:53,290
like what was I thinking me like cold

17
00:00:50,320 --> 00:00:55,719
sick Who am I

18
00:00:53,290 --> 00:00:57,219
according to my LinkedIn page I enjoy

19
00:00:55,719 --> 00:00:59,880
writing software designing a structure

20
00:00:57,219 --> 00:01:03,700
helps other people excel at their jobs

21
00:00:59,880 --> 00:01:05,860
so I enjoy doing back-end in middle well

22
00:01:03,700 --> 00:01:08,530
work mostly with code or infrastructure

23
00:01:05,860 --> 00:01:09,999
I have strong passion for Python

24
00:01:08,530 --> 00:01:12,429
programming language so I try and do a

25
00:01:09,999 --> 00:01:15,490
lot of work in that space as well I've

26
00:01:12,429 --> 00:01:17,679
been at pace on since 2005 since then

27
00:01:15,490 --> 00:01:20,949
I've been in multiple roles I've been a

28
00:01:17,679 --> 00:01:25,719
Linux Network administers patches

29
00:01:20,950 --> 00:01:27,639
upgrade stuff like that I helped create

30
00:01:25,719 --> 00:01:31,568
their site reliability team which is

31
00:01:27,639 --> 00:01:33,098
like sree or equivalent as an initial

32
00:01:31,569 --> 00:01:35,590
member of that team was started out I

33
00:01:33,099 --> 00:01:36,969
tried to or attempted to manage that

34
00:01:35,590 --> 00:01:38,560
team for a while at which point I

35
00:01:36,969 --> 00:01:41,949
realized functional management was

36
00:01:38,560 --> 00:01:43,719
definitely not for me I helped bring a

37
00:01:41,950 --> 00:01:45,099
lot of first set pace on so I helped

38
00:01:43,719 --> 00:01:47,770
them bring in configuration management

39
00:01:45,099 --> 00:01:51,549
tools like cfengine puppet ansible

40
00:01:47,770 --> 00:01:53,770
things like that i moved us into patch

41
00:01:51,549 --> 00:01:58,539
proper package management for in-house

42
00:01:53,770 --> 00:02:00,579
apps that we built and Aang package

43
00:01:58,539 --> 00:02:02,709
management tools things like Red Hat

44
00:02:00,579 --> 00:02:05,229
spacewalk or satellite service stuff

45
00:02:02,709 --> 00:02:08,080
like that back in the day I then moved

46
00:02:05,229 --> 00:02:10,060
in the architecture space I my official

47
00:02:08,080 --> 00:02:12,850
title effort law was IT architect of

48
00:02:10,060 --> 00:02:14,080
infrastructure and communications that

49
00:02:12,850 --> 00:02:17,489
sounds

50
00:02:14,080 --> 00:02:21,090
I help a lot with our cloud adoption and

51
00:02:17,490 --> 00:02:24,670
moving our infrastructure as a service

52
00:02:21,090 --> 00:02:26,920
platform forward we draw it we brought

53
00:02:24,670 --> 00:02:29,500
in AWS originally to help out with our

54
00:02:26,920 --> 00:02:30,850
dev tests QA capacity because we didn't

55
00:02:29,500 --> 00:02:33,070
have a lot capacity and host to meet all

56
00:02:30,850 --> 00:02:34,329
the needs of our customers and then we

57
00:02:33,070 --> 00:02:37,720
eventually we were looking at using AWS

58
00:02:34,330 --> 00:02:40,600
for our dr space now we're using

59
00:02:37,720 --> 00:02:42,400
OpenStack to provide that infrastructure

60
00:02:40,600 --> 00:02:47,160
as a service layer to our customers

61
00:02:42,400 --> 00:02:49,300
giving them AWS like functionality

62
00:02:47,160 --> 00:02:51,760
standards flavor slide pretty much

63
00:02:49,300 --> 00:02:53,410
saying you can't blame pace on or the

64
00:02:51,760 --> 00:02:58,570
abstract foundation for all the stuff I

65
00:02:53,410 --> 00:02:59,500
made up and put any slides over you so

66
00:02:58,570 --> 00:03:02,530
what we're going to cover today so

67
00:02:59,500 --> 00:03:04,060
ideally a brief OpenStack will review

68
00:03:02,530 --> 00:03:04,660
because maybe not everyone is familiar

69
00:03:04,060 --> 00:03:07,290
with it

70
00:03:04,660 --> 00:03:09,900
the OpenStack security project

71
00:03:07,290 --> 00:03:15,060
introduction into network security and

72
00:03:09,900 --> 00:03:15,060
then a standard HTTP encryption setups

73
00:03:16,020 --> 00:03:20,320
sorry the other thing we'll probably

74
00:03:18,420 --> 00:03:21,780
want to talk about today is we're going

75
00:03:20,320 --> 00:03:24,880
to cover security from the

76
00:03:21,780 --> 00:03:26,500
responsibility of the provider so in the

77
00:03:24,880 --> 00:03:27,910
old stack space there's kind of IBC who

78
00:03:26,500 --> 00:03:29,830
is the customer responsibility and

79
00:03:27,910 --> 00:03:31,299
provider responsibility and it's

80
00:03:29,830 --> 00:03:36,040
important that you keep those two things

81
00:03:31,299 --> 00:03:37,600
separate especially in very large

82
00:03:36,040 --> 00:03:38,500
organizations mostly because different

83
00:03:37,600 --> 00:03:41,049
departments have different

84
00:03:38,500 --> 00:03:42,430
responsibilities and they will look

85
00:03:41,049 --> 00:03:44,680
after you for layers when you put them

86
00:03:42,430 --> 00:03:46,390
all in one group let's for example say

87
00:03:44,680 --> 00:03:48,370
you decided that your DevOps team would

88
00:03:46,390 --> 00:03:50,230
handle all the stock you end up creating

89
00:03:48,370 --> 00:03:52,630
that ball neck and then you end up

90
00:03:50,230 --> 00:03:55,000
building a solution that is very cloud

91
00:03:52,630 --> 00:03:56,980
specific dependent you don't end up with

92
00:03:55,000 --> 00:04:00,299
a cloud agnostic solution which is

93
00:03:56,980 --> 00:04:00,298
probably what you want in the long term

94
00:04:00,330 --> 00:04:05,290
so who here has open at running in a lab

95
00:04:02,709 --> 00:04:08,560
anybody anyone want to admit to that all

96
00:04:05,290 --> 00:04:10,989
right we've got one person to two people

97
00:04:08,560 --> 00:04:12,340
so let's go with that no one has over

98
00:04:10,989 --> 00:04:15,489
stack running in production it's

99
00:04:12,340 --> 00:04:18,970
probably a safe assessment who here has

100
00:04:15,489 --> 00:04:19,690
no idea what OpenStack is no one wants

101
00:04:18,970 --> 00:04:23,920
to admit

102
00:04:19,690 --> 00:04:25,450
I will go with one person all right so

103
00:04:23,920 --> 00:04:27,970
what is OpenStack here's the standard

104
00:04:25,450 --> 00:04:31,060
Wikipedia article slot stuff there

105
00:04:27,970 --> 00:04:33,250
I like describe what would stack as an

106
00:04:31,060 --> 00:04:36,250
umbrella framework that brings together

107
00:04:33,250 --> 00:04:38,850
multiple components it provides a nice

108
00:04:36,250 --> 00:04:41,470
infrastructure as a service platform and

109
00:04:38,850 --> 00:04:44,110
this last part I'll read off because

110
00:04:41,470 --> 00:04:45,760
well I don't wanna mess it up so it

111
00:04:44,110 --> 00:04:48,190
provides a flexible framework for an

112
00:04:45,760 --> 00:04:50,170
open cloud solution it is not a

113
00:04:48,190 --> 00:04:51,820
universal cloud solution which is

114
00:04:50,170 --> 00:04:53,050
probably a very important thing to

115
00:04:51,820 --> 00:04:54,400
consider lots of people look at

116
00:04:53,050 --> 00:04:56,470
overstock and they think hey this is

117
00:04:54,400 --> 00:04:59,770
great everything is free I'm gonna take

118
00:04:56,470 --> 00:05:00,970
this and deploy it yeah based on your

119
00:04:59,770 --> 00:05:02,770
business needs you may not be successful

120
00:05:00,970 --> 00:05:04,030
when you go down that road you have to

121
00:05:02,770 --> 00:05:05,440
make sure the open stack is really

122
00:05:04,030 --> 00:05:07,989
designed for what your business needs

123
00:05:05,440 --> 00:05:10,090
are so because it considers multiple

124
00:05:07,990 --> 00:05:12,160
software project it allows the consumer

125
00:05:10,090 --> 00:05:13,840
to implement the required features and

126
00:05:12,160 --> 00:05:15,520
functionalities that's needed by the

127
00:05:13,840 --> 00:05:18,340
business in a manner that best matches

128
00:05:15,520 --> 00:05:19,930
the underlying business needs so pretty

129
00:05:18,340 --> 00:05:21,849
much if you need a cloud-based

130
00:05:19,930 --> 00:05:23,470
technology or if you don't need a

131
00:05:21,850 --> 00:05:26,410
cloud-based technology you don't maybe

132
00:05:23,470 --> 00:05:27,610
go with stacks not right for you few

133
00:05:26,410 --> 00:05:29,710
years back there was actually a really

134
00:05:27,610 --> 00:05:32,110
good article from Google cloud engineer

135
00:05:29,710 --> 00:05:33,640
and their kind of rule of thumb was hey

136
00:05:32,110 --> 00:05:35,650
if you only have like 50 VMs or less

137
00:05:33,640 --> 00:05:37,270
deploying an entire cloud stack it's

138
00:05:35,650 --> 00:05:38,650
probably not the best move for you you

139
00:05:37,270 --> 00:05:40,419
know you can stick with VMware stick

140
00:05:38,650 --> 00:05:42,190
with kvn there's lots of alternatives

141
00:05:40,419 --> 00:05:44,500
out there you know if you need to do

142
00:05:42,190 --> 00:05:46,330
like you know 50 or maybe a hundred to

143
00:05:44,500 --> 00:05:47,410
two hundred there's other options out

144
00:05:46,330 --> 00:05:49,870
there once you start getting into like

145
00:05:47,410 --> 00:05:51,760
200 250 plus space for number of VMs

146
00:05:49,870 --> 00:05:53,800
then maybe it's time you start looking

147
00:05:51,760 --> 00:05:58,950
at infrastructure service platforms and

148
00:05:53,800 --> 00:06:02,320
implementing a cloud like solution so

149
00:05:58,950 --> 00:06:03,729
this infographic has been at most

150
00:06:02,320 --> 00:06:05,620
OpenStack conferences I have tended over

151
00:06:03,730 --> 00:06:08,140
the years it makes over staff look

152
00:06:05,620 --> 00:06:10,720
amazingly and simple you know on the

153
00:06:08,140 --> 00:06:12,610
Left we have a compute square box that

154
00:06:10,720 --> 00:06:14,230
looks awesome you've got some networking

155
00:06:12,610 --> 00:06:16,300
there in the middle that looks great and

156
00:06:14,230 --> 00:06:17,860
storage at the end that's that's pretty

157
00:06:16,300 --> 00:06:20,980
good and you have a dashboard allows you

158
00:06:17,860 --> 00:06:24,159
to manage this platform and security is

159
00:06:20,980 --> 00:06:26,599
probably in there somewhere

160
00:06:24,159 --> 00:06:28,340
here's a picture of a standard OpenStack

161
00:06:26,599 --> 00:06:30,830
dashboard so when you log into the

162
00:06:28,340 --> 00:06:33,198
dashboard I can see my capacity usage

163
00:06:30,830 --> 00:06:35,258
here you got number of instances I'm in

164
00:06:33,199 --> 00:06:38,509
yellow so I'm almost out we have 50 left

165
00:06:35,259 --> 00:06:40,639
Ram CPU floating IP addresses that type

166
00:06:38,509 --> 00:06:42,229
of information on the left hand side you

167
00:06:40,639 --> 00:06:45,050
can see here you can control instances

168
00:06:42,229 --> 00:06:47,060
you have volumes there's images access

169
00:06:45,050 --> 00:06:48,949
and security that's where when you're in

170
00:06:47,060 --> 00:06:50,180
your cloud space you can assign firewall

171
00:06:48,949 --> 00:06:51,949
rules and stuff like that to your

172
00:06:50,180 --> 00:06:53,900
instances and then there's the

173
00:06:51,949 --> 00:06:56,389
networking part there near the bottom

174
00:06:53,900 --> 00:07:00,948
for a software-defined network still

175
00:06:56,389 --> 00:07:03,520
looks pretty good then you have these

176
00:07:00,949 --> 00:07:06,050
six core services that are in OpenStack

177
00:07:03,520 --> 00:07:07,400
there's Nova Nova takes care of all your

178
00:07:06,050 --> 00:07:09,650
computer resources whether your

179
00:07:07,400 --> 00:07:13,400
underlying functionality is kvam you've

180
00:07:09,650 --> 00:07:14,840
attempted to use ESX hyper-v whatever

181
00:07:13,400 --> 00:07:16,219
that Nova is what looks after all of

182
00:07:14,840 --> 00:07:17,840
your compute infrastructure for you

183
00:07:16,219 --> 00:07:20,629
Neutron does all of your

184
00:07:17,840 --> 00:07:22,849
software-defined networking Swift is

185
00:07:20,629 --> 00:07:25,159
your object store best relation would be

186
00:07:22,849 --> 00:07:27,020
like Amazon's s3 you can store objects

187
00:07:25,159 --> 00:07:30,349
in there that's all available over a

188
00:07:27,020 --> 00:07:32,568
rest interface bottom here left we have

189
00:07:30,349 --> 00:07:35,509
cinder that's after your block storage

190
00:07:32,569 --> 00:07:38,120
so that could be anything from LVM at

191
00:07:35,509 --> 00:07:40,490
the back end to a net app to solve fire

192
00:07:38,120 --> 00:07:42,080
there's tons of pluggable options you

193
00:07:40,490 --> 00:07:44,210
can use in that space

194
00:07:42,080 --> 00:07:45,560
next is Keystone that takes care of your

195
00:07:44,210 --> 00:07:48,830
Identity Management

196
00:07:45,560 --> 00:07:50,509
so all of your users groups what roles

197
00:07:48,830 --> 00:07:52,400
they have what products they can access

198
00:07:50,509 --> 00:07:54,889
that type of information

199
00:07:52,400 --> 00:07:56,628
one thing that's catches some people

200
00:07:54,889 --> 00:07:59,150
off-guard there's so overstock is

201
00:07:56,629 --> 00:08:02,479
designed from a multi-tenant space from

202
00:07:59,150 --> 00:08:04,638
the ground up so the admin user when you

203
00:08:02,479 --> 00:08:07,520
log into your cloud has access to look

204
00:08:04,639 --> 00:08:09,500
at the infrastructure layer from a

205
00:08:07,520 --> 00:08:12,049
capacity point of view but it actually

206
00:08:09,500 --> 00:08:14,599
by default can't really go in to every

207
00:08:12,050 --> 00:08:15,650
project space and touch instances so

208
00:08:14,599 --> 00:08:16,969
some of you were thinking well great

209
00:08:15,650 --> 00:08:19,340
I'll just create an admin user you can

210
00:08:16,969 --> 00:08:21,349
log in you can touch all my all my

211
00:08:19,340 --> 00:08:22,758
tenants now if you're offering a public

212
00:08:21,349 --> 00:08:24,919
cloud that you probably want that effect

213
00:08:22,759 --> 00:08:25,940
if you're doing a private cloud inside

214
00:08:24,919 --> 00:08:27,529
your company

215
00:08:25,940 --> 00:08:29,090
it'll probably really frustrating for

216
00:08:27,529 --> 00:08:30,860
your DevOps or IT guys because they

217
00:08:29,090 --> 00:08:33,500
can't go into every single project and

218
00:08:30,860 --> 00:08:35,779
poke around and do things so something

219
00:08:33,500 --> 00:08:37,520
to keep in mind glance is your image a

220
00:08:35,779 --> 00:08:39,500
whole image service so

221
00:08:37,520 --> 00:08:42,978
inside your black environment you have

222
00:08:39,500 --> 00:08:45,380
multiple trusted images it's like your

223
00:08:42,979 --> 00:08:47,240
Amazon eyes so you have like me you have

224
00:08:45,380 --> 00:08:49,070
a red hot wine and maybe want to send to

225
00:08:47,240 --> 00:08:50,570
ass that type of stuff the glass Service

226
00:08:49,070 --> 00:08:54,860
is responsible providing all those

227
00:08:50,570 --> 00:08:57,230
images allowing you to boot from them so

228
00:08:54,860 --> 00:09:00,410
the six core ones are considered very

229
00:08:57,230 --> 00:09:01,550
mature inside the OpenStack space and

230
00:09:00,410 --> 00:09:03,199
they all have at least four plus years

231
00:09:01,550 --> 00:09:04,910
in age you can see they all have this

232
00:09:03,200 --> 00:09:07,190
nice little green circles if you go to

233
00:09:04,910 --> 00:09:09,760
that link you can get all the updates on

234
00:09:07,190 --> 00:09:13,850
all the different OpenStack projects

235
00:09:09,760 --> 00:09:17,630
yeah all they focus a quad uses optional

236
00:09:13,850 --> 00:09:20,000
services so this gets into like a little

237
00:09:17,630 --> 00:09:23,089
bit of crazy space so there's all these

238
00:09:20,000 --> 00:09:26,360
optional services it's currently 13 the

239
00:09:23,089 --> 00:09:28,670
angels range from one to four years most

240
00:09:26,360 --> 00:09:30,320
of them are not considered mature so as

241
00:09:28,670 --> 00:09:32,120
you can see the the green ones which is

242
00:09:30,320 --> 00:09:33,920
salamat err which is all your Emma tree

243
00:09:32,120 --> 00:09:36,260
and the other one should be horizon

244
00:09:33,920 --> 00:09:38,089
which is your dashboard also not a heat

245
00:09:36,260 --> 00:09:39,740
your orchestrations green one and

246
00:09:38,089 --> 00:09:41,270
horizon show the green one so those ones

247
00:09:39,740 --> 00:09:43,370
come pretty standard those are

248
00:09:41,270 --> 00:09:45,490
considered mature lots of people use

249
00:09:43,370 --> 00:09:49,100
them out there the rest of them their

250
00:09:45,490 --> 00:09:50,720
documentation support and deployment can

251
00:09:49,100 --> 00:09:52,160
kind of be all over the place it all

252
00:09:50,720 --> 00:09:54,500
depends on how much sure the product is

253
00:09:52,160 --> 00:09:56,920
so excluding those talked through there

254
00:09:54,500 --> 00:09:58,940
which are horizon slamming or heat I

255
00:09:56,920 --> 00:10:00,860
would stay away from the rest of them

256
00:09:58,940 --> 00:10:03,170
you usually don't come packaged with

257
00:10:00,860 --> 00:10:04,399
vendor tools and if you want to use them

258
00:10:03,170 --> 00:10:07,670
you normally have having to do all the

259
00:10:04,399 --> 00:10:09,380
support all the packaging deployment and

260
00:10:07,670 --> 00:10:11,180
all the implementation yourself which is

261
00:10:09,380 --> 00:10:13,010
depending on how big your devops group

262
00:10:11,180 --> 00:10:18,969
is or your IT group you probably don't

263
00:10:13,010 --> 00:10:21,709
want to take that on so here it is a

264
00:10:18,970 --> 00:10:23,390
potential logical architecture diagram

265
00:10:21,709 --> 00:10:25,729
of what your OpenStack environment could

266
00:10:23,390 --> 00:10:28,430
look like so we talked about those six

267
00:10:25,730 --> 00:10:30,110
core services in the beginning and they

268
00:10:28,430 --> 00:10:31,520
all kind of play into the space which is

269
00:10:30,110 --> 00:10:33,490
earlier when I laugh because I said

270
00:10:31,520 --> 00:10:37,100
security is probably in there somewhere

271
00:10:33,490 --> 00:10:39,680
so if we go from left to right here so

272
00:10:37,100 --> 00:10:42,790
yes the swift box is on the far left you

273
00:10:39,680 --> 00:10:45,469
have the glance API Nova's in the middle

274
00:10:42,790 --> 00:10:48,439
then cinder and then Neutron on the

275
00:10:45,470 --> 00:10:50,060
right now all the black lines on this

276
00:10:48,440 --> 00:10:50,990
diagram those black arrows they

277
00:10:50,060 --> 00:10:53,449
represent

278
00:10:50,990 --> 00:10:55,820
connections coming in from your public

279
00:10:53,450 --> 00:10:57,740
domain so if you had a public cloud this

280
00:10:55,820 --> 00:10:59,570
is everybody on the internet if you had

281
00:10:57,740 --> 00:11:00,770
an internal private cloud that's only

282
00:10:59,570 --> 00:11:02,720
for your company this would be everyone

283
00:11:00,770 --> 00:11:04,430
on your land all your customers internal

284
00:11:02,720 --> 00:11:06,860
inside the organization they're coming

285
00:11:04,430 --> 00:11:09,859
into your OpenStack space all the red

286
00:11:06,860 --> 00:11:12,740
connections are what is on your

287
00:11:09,860 --> 00:11:14,690
management or your control plane so

288
00:11:12,740 --> 00:11:17,120
inside the other security domain which

289
00:11:14,690 --> 00:11:20,570
is you manage the control plane that's

290
00:11:17,120 --> 00:11:21,890
all of your internal API interactions so

291
00:11:20,570 --> 00:11:23,810
the only thing that this diagram really

292
00:11:21,890 --> 00:11:26,120
doesn't show is that normally there is a

293
00:11:23,810 --> 00:11:27,949
load balancer handling all the incoming

294
00:11:26,120 --> 00:11:32,990
API requests because everything in here

295
00:11:27,950 --> 00:11:36,560
is obviously redundant so into the

296
00:11:32,990 --> 00:11:39,140
security part of it so if you go to

297
00:11:36,560 --> 00:11:41,030
security to org you can see there's two

298
00:11:39,140 --> 00:11:43,069
got things like recent security

299
00:11:41,030 --> 00:11:45,490
advisories the last one was on March 8th

300
00:11:43,070 --> 00:11:48,440
had to do with the Nova vulnerability

301
00:11:45,490 --> 00:11:50,300
you can look how to report issues and

302
00:11:48,440 --> 00:11:52,880
they also have security tool development

303
00:11:50,300 --> 00:11:55,219
there are currently two tools in

304
00:11:52,880 --> 00:12:00,730
development in the space one is called

305
00:11:55,220 --> 00:12:04,370
bandit it is a OpenStack security linter

306
00:12:00,730 --> 00:12:07,100
project written in Python says everyone

307
00:12:04,370 --> 00:12:09,500
here familiar wild winter does all right

308
00:12:07,100 --> 00:12:11,060
sweet so when you write software weather

309
00:12:09,500 --> 00:12:12,950
any language a lot of times we run a

310
00:12:11,060 --> 00:12:15,560
linter program against your source code

311
00:12:12,950 --> 00:12:17,840
so standard ones will look for you know

312
00:12:15,560 --> 00:12:19,579
potential buffer overflows on allocated

313
00:12:17,840 --> 00:12:21,320
variables stuff like that so they'll go

314
00:12:19,580 --> 00:12:23,060
in there look for potential errors what

315
00:12:21,320 --> 00:12:26,270
bandit does is a analyzes the code

316
00:12:23,060 --> 00:12:28,280
looking for security flaws or security

317
00:12:26,270 --> 00:12:29,329
errors that they have in the code the

318
00:12:28,280 --> 00:12:30,699
other project that are currently working

319
00:12:29,330 --> 00:12:32,810
on is called Ankur

320
00:12:30,700 --> 00:12:34,700
I'll read the definition of ankor

321
00:12:32,810 --> 00:12:37,640
because this is it's pretty new it's not

322
00:12:34,700 --> 00:12:40,010
out there yet and it is well it's kind

323
00:12:37,640 --> 00:12:43,040
of confusing so anchor is a lightweight

324
00:12:40,010 --> 00:12:44,360
open source public key infrastructure we

325
00:12:43,040 --> 00:12:46,550
uses automated provisioning for

326
00:12:44,360 --> 00:12:51,080
short-term certificates to enable

327
00:12:46,550 --> 00:12:52,069
cryptography trust and open services so

328
00:12:51,080 --> 00:12:54,530
instead of having to use username

329
00:12:52,070 --> 00:12:56,540
passwords everywhere it's trying to push

330
00:12:54,530 --> 00:12:58,430
out PKI to the services a lot of these

331
00:12:56,540 --> 00:13:01,069
certificates are only valid for I think

332
00:12:58,430 --> 00:13:02,459
it's 12 to 24 hours but that project is

333
00:13:01,070 --> 00:13:07,230
still very new and has not

334
00:13:02,460 --> 00:13:09,600
deploy jet here's the Wikipedia example

335
00:13:07,230 --> 00:13:10,710
of open sac security project pretty much

336
00:13:09,600 --> 00:13:11,850
what it says is there used to be two

337
00:13:10,710 --> 00:13:14,700
groups there used to be an overstock

338
00:13:11,850 --> 00:13:16,170
security group and the vulnerability

339
00:13:14,700 --> 00:13:17,670
management team and they were separate

340
00:13:16,170 --> 00:13:19,469
so what they did is just create the old

341
00:13:17,670 --> 00:13:24,870
stack secure project put those two

342
00:13:19,470 --> 00:13:26,280
groups together it's pretty infographic

343
00:13:24,870 --> 00:13:28,800
that kind of goes over what that group

344
00:13:26,280 --> 00:13:30,930
does now so on the top right and paint

345
00:13:28,800 --> 00:13:33,569
for some reason is the boner management

346
00:13:30,930 --> 00:13:34,859
team and then if you guys love the

347
00:13:33,570 --> 00:13:36,360
things cross the bottom so look after

348
00:13:34,860 --> 00:13:39,240
like developer guide and security notes

349
00:13:36,360 --> 00:13:40,650
security guidance threat analysis you

350
00:13:39,240 --> 00:13:42,960
have bandar anchored there that we just

351
00:13:40,650 --> 00:13:45,090
kind of went over two new ones that a

352
00:13:42,960 --> 00:13:46,830
believer in development but there's no

353
00:13:45,090 --> 00:13:49,170
project documentation for them yet is

354
00:13:46,830 --> 00:13:56,520
the auditing and tracking and the secure

355
00:13:49,170 --> 00:13:59,969
API testing so the vulnerability

356
00:13:56,520 --> 00:14:02,670
management team they take care of

357
00:13:59,970 --> 00:14:04,620
actually creating all the patches for

358
00:14:02,670 --> 00:14:08,400
fixing vulnerabilities in the over sack

359
00:14:04,620 --> 00:14:12,030
release but they only do that for the

360
00:14:08,400 --> 00:14:14,000
security supported projects which

361
00:14:12,030 --> 00:14:17,430
currently means it's only the core six

362
00:14:14,000 --> 00:14:18,900
plus heat trove and Sahara so if you're

363
00:14:17,430 --> 00:14:21,599
using one of those other thirteen

364
00:14:18,900 --> 00:14:23,720
supporter projects you're kind of on

365
00:14:21,600 --> 00:14:25,920
your own in regards to either

366
00:14:23,720 --> 00:14:27,540
discovering a skirt vulnerabilities or B

367
00:14:25,920 --> 00:14:30,660
if any are found having to fix them and

368
00:14:27,540 --> 00:14:32,520
patch them yourself so a lot of people

369
00:14:30,660 --> 00:14:35,130
end up sticking with the core six just

370
00:14:32,520 --> 00:14:39,090
for reasons like this the other thing is

371
00:14:35,130 --> 00:14:41,370
the only pick the only fix in patch the

372
00:14:39,090 --> 00:14:43,290
either current like the pack the current

373
00:14:41,370 --> 00:14:45,390
stable release or the previous release

374
00:14:43,290 --> 00:14:47,550
they don't go any further back and

375
00:14:45,390 --> 00:14:50,250
overstock releases twice a year normally

376
00:14:47,550 --> 00:14:52,680
every six months so depending on what

377
00:14:50,250 --> 00:14:54,900
your upgrade speed is and who you get

378
00:14:52,680 --> 00:14:57,270
your own stack product from you really

379
00:14:54,900 --> 00:15:00,949
have to figure out some way to manage

380
00:14:57,270 --> 00:15:00,949
that security lifecycle

381
00:15:02,390 --> 00:15:08,520
so on that topic here's the overstock

382
00:15:05,280 --> 00:15:12,569
releases so we have let me process

383
00:15:08,520 --> 00:15:15,420
Mitaka which we got released here in

384
00:15:12,570 --> 00:15:18,960
April Liberty was released in October

385
00:15:15,420 --> 00:15:23,130
2015 and Kela was released April 30th

386
00:15:18,960 --> 00:15:24,840
2015 so let's go with an example let's

387
00:15:23,130 --> 00:15:26,700
assume that your provider takes about

388
00:15:24,840 --> 00:15:28,140
three months to package and distribute

389
00:15:26,700 --> 00:15:29,640
their OpenStack product which is

390
00:15:28,140 --> 00:15:30,930
actually pretty fast for most providers

391
00:15:29,640 --> 00:15:32,819
point of view when you talk to them

392
00:15:30,930 --> 00:15:36,270
IBM's claimed the fame for their

393
00:15:32,820 --> 00:15:37,830
OpenStack product is three months so

394
00:15:36,270 --> 00:15:40,110
then let's assume that you have the

395
00:15:37,830 --> 00:15:42,060
ability to upgrade within a month your

396
00:15:40,110 --> 00:15:44,100
OpenStack environment which is probably

397
00:15:42,060 --> 00:15:46,109
pretty fast depending on what else your

398
00:15:44,100 --> 00:15:48,450
organization has on the go and how big

399
00:15:46,110 --> 00:15:50,580
your environment is so let's assume

400
00:15:48,450 --> 00:15:54,150
going with kilo that it was released in

401
00:15:50,580 --> 00:15:55,950
April 2015 the provider uses May June

402
00:15:54,150 --> 00:15:57,540
July and gives you a release in August

403
00:15:55,950 --> 00:16:01,920
so you install the release in August

404
00:15:57,540 --> 00:16:04,890
your great takes you rest of all rest

405
00:16:01,920 --> 00:16:08,760
upgrade you now have nine months until

406
00:16:04,890 --> 00:16:10,890
that version is end o L or vol from a

407
00:16:08,760 --> 00:16:12,930
security point of view meaning that

408
00:16:10,890 --> 00:16:15,600
hopefully your provider will come out

409
00:16:12,930 --> 00:16:17,989
with their next OpenStack release and

410
00:16:15,600 --> 00:16:20,040
you can upgrade quickly within that time

411
00:16:17,990 --> 00:16:21,810
the other thing is it's not all

412
00:16:20,040 --> 00:16:25,140
providers have the same upgrade

413
00:16:21,810 --> 00:16:26,489
lifecycle so first one example is

414
00:16:25,140 --> 00:16:28,830
there's a current OpenStack product on

415
00:16:26,490 --> 00:16:31,410
the market where they give you the kilo

416
00:16:28,830 --> 00:16:33,300
release they decided from a company

417
00:16:31,410 --> 00:16:36,209
perspective to skip over Liberty and

418
00:16:33,300 --> 00:16:39,180
that are gonna have their Mitaka release

419
00:16:36,210 --> 00:16:40,560
available sometime June or July which

420
00:16:39,180 --> 00:16:42,780
means well if you're not that customer

421
00:16:40,560 --> 00:16:44,959
ok well I have my kilo release I bought

422
00:16:42,780 --> 00:16:47,850
from you that I paid a lot of money for

423
00:16:44,960 --> 00:16:50,280
it's security is ended here in what we

424
00:16:47,850 --> 00:16:52,950
say April and then I have made you in

425
00:16:50,280 --> 00:16:55,620
July so if the company hits their target

426
00:16:52,950 --> 00:16:57,570
date great you're only three months

427
00:16:55,620 --> 00:16:58,800
without any security patches and

428
00:16:57,570 --> 00:17:00,120
assuming there's no zero day

429
00:16:58,800 --> 00:17:02,310
vulnerabilities that could be great or

430
00:17:00,120 --> 00:17:06,060
if the company misses their target maybe

431
00:17:02,310 --> 00:17:07,800
you're vulnerable for a lot longer so in

432
00:17:06,060 --> 00:17:09,300
picking up with stack products this it's

433
00:17:07,800 --> 00:17:11,438
very important to figure out what their

434
00:17:09,300 --> 00:17:17,168
upgrade release cycle and

435
00:17:11,439 --> 00:17:19,149
hache management cycle is downstream

436
00:17:17,169 --> 00:17:23,409
stakeholders this is everyone know what

437
00:17:19,148 --> 00:17:25,688
an embargo period is no we'll just I'll

438
00:17:23,409 --> 00:17:27,069
give a quick example so the voluntary

439
00:17:25,689 --> 00:17:29,370
embargo period inside the OpenStack

440
00:17:27,069 --> 00:17:31,990
space is three to five business days so

441
00:17:29,370 --> 00:17:34,809
let's assume that you have a project and

442
00:17:31,990 --> 00:17:36,429
you have down downstream Redistributor

443
00:17:34,809 --> 00:17:38,049
x' so if you're the open sack space you

444
00:17:36,429 --> 00:17:41,639
are the project your downstream dispute

445
00:17:38,049 --> 00:17:45,100
is people like canonical Red Hat VMware

446
00:17:41,639 --> 00:17:47,289
mer antis Rackspace those type players

447
00:17:45,100 --> 00:17:49,750
and you want to provide them with pre

448
00:17:47,289 --> 00:17:52,149
notification about the upcoming security

449
00:17:49,750 --> 00:17:54,250
fix using pre-release versions of your

450
00:17:52,149 --> 00:17:56,620
security advisory along with the source

451
00:17:54,250 --> 00:17:58,210
code and patches you've developed so

452
00:17:56,620 --> 00:18:00,668
this is called your embargo period so

453
00:17:58,210 --> 00:18:02,980
someone just found a vulnerability you

454
00:18:00,669 --> 00:18:04,090
think you have a fix ideally to come up

455
00:18:02,980 --> 00:18:05,379
with this in three to five days and

456
00:18:04,090 --> 00:18:06,759
you've contact your superiors to say hey

457
00:18:05,379 --> 00:18:09,189
look this is what we're playing to roll

458
00:18:06,759 --> 00:18:10,809
out here's the impact so you can get

459
00:18:09,190 --> 00:18:12,269
your patches and stuff ready so you can

460
00:18:10,809 --> 00:18:14,379
have your product push all those updates

461
00:18:12,269 --> 00:18:15,580
that's that's not a long time that's

462
00:18:14,379 --> 00:18:19,059
actually pretty aggressive three to five

463
00:18:15,580 --> 00:18:20,799
days now after three to five days period

464
00:18:19,059 --> 00:18:22,840
over is normally when they'll open up

465
00:18:20,799 --> 00:18:24,629
bug reports for the security

466
00:18:22,840 --> 00:18:27,039
vulnerabilities so a lot of them were

467
00:18:24,629 --> 00:18:27,689
hidden or out of the community space for

468
00:18:27,039 --> 00:18:30,039
that time

469
00:18:27,690 --> 00:18:32,350
so the volar management team can choose

470
00:18:30,039 --> 00:18:34,750
to open bug reports sooner they'll do

471
00:18:32,350 --> 00:18:37,209
this if the fix takes usually more than

472
00:18:34,750 --> 00:18:38,799
two weeks so if they're looking at this

473
00:18:37,210 --> 00:18:39,580
fix in a while either okay it's very

474
00:18:38,799 --> 00:18:41,230
complex

475
00:18:39,580 --> 00:18:43,389
and we require multiple stakeholders to

476
00:18:41,230 --> 00:18:44,799
make this fix or it's actually really

477
00:18:43,389 --> 00:18:46,330
large it's gonna take a time to get this

478
00:18:44,799 --> 00:18:47,230
fixed then they'll open the bag report

479
00:18:46,330 --> 00:18:49,418
and push that out to the community

480
00:18:47,230 --> 00:18:54,340
sooner giving people the ability to try

481
00:18:49,419 --> 00:18:56,860
and mitigate on that on their own so how

482
00:18:54,340 --> 00:18:58,629
do you get patches it's up to your open

483
00:18:56,860 --> 00:19:01,360
stack distribution to provide you with

484
00:18:58,629 --> 00:19:03,370
those updates I think I said you should

485
00:19:01,360 --> 00:19:04,809
review their workflow prior to using any

486
00:19:03,370 --> 00:19:06,399
of their products or purchasing

487
00:19:04,809 --> 00:19:14,710
OpenStack product it's really dependent

488
00:19:06,399 --> 00:19:16,479
on that so network security so inside

489
00:19:14,710 --> 00:19:18,460
the overstock space there are considered

490
00:19:16,480 --> 00:19:23,019
four security domains there's the public

491
00:19:18,460 --> 00:19:24,460
guest management data storage so these

492
00:19:23,019 --> 00:19:25,060
security beans are can be mapped

493
00:19:24,460 --> 00:19:27,190
independent

494
00:19:25,060 --> 00:19:30,100
or combine to represent the majority of

495
00:19:27,190 --> 00:19:32,230
the possible use cases around the trust

496
00:19:30,100 --> 00:19:34,929
areas in an old sack deployment for

497
00:19:32,230 --> 00:19:38,230
example depending on your deployment

498
00:19:34,930 --> 00:19:39,580
guidelines you may decide to merge in or

499
00:19:38,230 --> 00:19:41,770
combine the management and storage

500
00:19:39,580 --> 00:19:43,570
network or maybe you combine guests and

501
00:19:41,770 --> 00:19:47,470
data storage it kind of pens on what

502
00:19:43,570 --> 00:19:48,939
your overall technology sources are it

503
00:19:47,470 --> 00:19:55,000
also depends whether you're building a

504
00:19:48,940 --> 00:19:56,890
private public or hybrid cloud in the

505
00:19:55,000 --> 00:19:58,540
public domain so this to me it should

506
00:19:56,890 --> 00:20:01,180
obviously always be considered untrusted

507
00:19:58,540 --> 00:20:02,889
as it is your external users or people

508
00:20:01,180 --> 00:20:04,810
come at you on the internet you should

509
00:20:02,890 --> 00:20:08,440
normally never trust anything coming in

510
00:20:04,810 --> 00:20:11,050
on this space the guest domain

511
00:20:08,440 --> 00:20:12,100
this one is kind of up in the air so

512
00:20:11,050 --> 00:20:15,190
this is your instance to instance

513
00:20:12,100 --> 00:20:17,290
traffic so if you have ten compute nodes

514
00:20:15,190 --> 00:20:19,630
with a hundred a hundred instances on

515
00:20:17,290 --> 00:20:21,040
there this is the network domain where

516
00:20:19,630 --> 00:20:22,830
all these instance will talk to one

517
00:20:21,040 --> 00:20:25,090
another on inside their project space

518
00:20:22,830 --> 00:20:27,639
personally I would consider this domain

519
00:20:25,090 --> 00:20:29,110
to be untrusted and always untrusted now

520
00:20:27,640 --> 00:20:30,970
they talk here about well if you have

521
00:20:29,110 --> 00:20:32,979
control over images and if you have

522
00:20:30,970 --> 00:20:35,590
control over certain parts sure you can

523
00:20:32,980 --> 00:20:36,940
consider things trusted but I'm pretty

524
00:20:35,590 --> 00:20:38,260
sure like once you're over Sacrement up

525
00:20:36,940 --> 00:20:39,700
is we're up and running someone's going

526
00:20:38,260 --> 00:20:41,350
to come to you and they're gonna want to

527
00:20:39,700 --> 00:20:43,300
deploy what they classify is I want a

528
00:20:41,350 --> 00:20:44,980
DMZ project in my cloud space right

529
00:20:43,300 --> 00:20:47,889
that's easy couple clicks should be done

530
00:20:44,980 --> 00:20:49,690
or I get the oh we're doing a joint

531
00:20:47,890 --> 00:20:51,340
venture opportunity with other company

532
00:20:49,690 --> 00:20:54,820
Queen can we just make something in the

533
00:20:51,340 --> 00:20:56,679
cloud space it's secure Oh beta

534
00:20:54,820 --> 00:20:58,330
environments for our products we wanna

535
00:20:56,680 --> 00:21:01,450
do beta environment so our customers can

536
00:20:58,330 --> 00:21:03,220
come in accesses yeah my favorite one is

537
00:21:01,450 --> 00:21:06,220
hey can we make another QA environment

538
00:21:03,220 --> 00:21:08,710
making external to our customers yeah

539
00:21:06,220 --> 00:21:10,120
that sounds like a great idea so I think

540
00:21:08,710 --> 00:21:11,470
people come with you this request right

541
00:21:10,120 --> 00:21:13,270
you need to make sure you start off that

542
00:21:11,470 --> 00:21:15,220
okay down the road is this domain going

543
00:21:13,270 --> 00:21:16,330
to be trusted or not trusted I would

544
00:21:15,220 --> 00:21:19,150
first say obviously if it is an

545
00:21:16,330 --> 00:21:20,980
untrusted space next is your management

546
00:21:19,150 --> 00:21:24,040
domain so inside your old stack

547
00:21:20,980 --> 00:21:25,870
environment you have the extra on points

548
00:21:24,040 --> 00:21:28,840
you have all your internal API services

549
00:21:25,870 --> 00:21:30,699
on this is also AMQP which is your

550
00:21:28,840 --> 00:21:31,470
rabbitmq or something like that you have

551
00:21:30,700 --> 00:21:34,620
your

552
00:21:31,470 --> 00:21:36,809
and database this domain is normally

553
00:21:34,620 --> 00:21:39,299
considered a trusted place inside the

554
00:21:36,809 --> 00:21:40,889
OpenStack environment which means it all

555
00:21:39,299 --> 00:21:42,600
should be considered highly secure and

556
00:21:40,889 --> 00:21:44,699
highly monitored no one should have

557
00:21:42,600 --> 00:21:47,070
access to this even if you're doing a

558
00:21:44,700 --> 00:21:49,590
private cloud inside your company the

559
00:21:47,070 --> 00:21:51,120
subnet or the network physical network

560
00:21:49,590 --> 00:21:52,889
this is on should not be accessible to

561
00:21:51,120 --> 00:21:54,178
your end-users because what will

562
00:21:52,889 --> 00:21:56,519
probably happen is is that one of them

563
00:21:54,179 --> 00:21:58,440
will stumble across these API endpoints

564
00:21:56,519 --> 00:22:00,750
either by accident do a configuration

565
00:21:58,440 --> 00:22:02,250
issue or just exploring and they'll end

566
00:22:00,750 --> 00:22:03,990
up riding open to software through it

567
00:22:02,250 --> 00:22:05,009
and then eventually you'll find out that

568
00:22:03,990 --> 00:22:06,090
a lot of people using your management

569
00:22:05,009 --> 00:22:12,570
network when they should be using your

570
00:22:06,090 --> 00:22:16,620
public facing API x' gave domain this

571
00:22:12,570 --> 00:22:18,450
one is totally up in the air so it is

572
00:22:16,620 --> 00:22:20,549
where all of your storage traffic will

573
00:22:18,450 --> 00:22:22,139
go over but it is highly dependent on

574
00:22:20,549 --> 00:22:24,450
what technology you've picked under the

575
00:22:22,139 --> 00:22:26,100
hood for example if using a nice cozy

576
00:22:24,450 --> 00:22:29,610
network you probably want that separate

577
00:22:26,100 --> 00:22:31,949
if you have maybe have fabric switches

578
00:22:29,610 --> 00:22:33,330
maybe using a saw fire than that app it

579
00:22:31,950 --> 00:22:35,490
all really depends what your underlying

580
00:22:33,330 --> 00:22:38,399
technology is so this one is really up

581
00:22:35,490 --> 00:22:40,350
to your deployment decisions what

582
00:22:38,399 --> 00:22:42,658
technologies you've used under the hood

583
00:22:40,350 --> 00:22:48,059
for all of your block storage in your

584
00:22:42,659 --> 00:22:51,240
cinder deployment so back.this love the

585
00:22:48,059 --> 00:22:52,168
diagram so we look at this space now

586
00:22:51,240 --> 00:22:54,809
when you think about this you're like

587
00:22:52,169 --> 00:22:56,519
well alright so I have all my public

588
00:22:54,809 --> 00:22:57,809
stuff coming in on the Block on the on

589
00:22:56,519 --> 00:22:59,250
the black lines arrows into my

590
00:22:57,809 --> 00:23:02,370
environment making all this API calls

591
00:22:59,250 --> 00:23:04,409
that that should be separate that on the

592
00:23:02,370 --> 00:23:07,500
network somehow isolated I have all my

593
00:23:04,409 --> 00:23:09,360
internal API calls to all my load

594
00:23:07,500 --> 00:23:11,100
balancers all my controller services in

595
00:23:09,360 --> 00:23:13,320
the red that should be separate and

596
00:23:11,100 --> 00:23:15,559
protected and then I love all my

597
00:23:13,320 --> 00:23:17,639
instance traffic in there where all my

598
00:23:15,559 --> 00:23:19,590
VMs are talking to one another that

599
00:23:17,639 --> 00:23:23,428
should be separate and I haven't even

600
00:23:19,590 --> 00:23:25,259
discussed storage yet which begs the

601
00:23:23,429 --> 00:23:29,539
question of how many network interfaces

602
00:23:25,259 --> 00:23:29,539
should I put in my cloud boxes

603
00:23:30,180 --> 00:23:33,720
so to recap on the security domains on

604
00:23:32,040 --> 00:23:35,790
the outside you have that horizon HTTP

605
00:23:33,720 --> 00:23:38,160
interface with all the soap stack api's

606
00:23:35,790 --> 00:23:41,610
and on the management you have the same

607
00:23:38,160 --> 00:23:44,340
horizon interface OpenStack api's with

608
00:23:41,610 --> 00:23:47,219
the additional AMQP interface and the

609
00:23:44,340 --> 00:23:49,230
database interface and then when we talk

610
00:23:47,220 --> 00:23:52,080
about stack api's it is all of them

611
00:23:49,230 --> 00:23:54,510
keystone nova for compute cinder for

612
00:23:52,080 --> 00:23:57,120
storage image or glance for images

613
00:23:54,510 --> 00:23:59,730
neutron for networking and that also is

614
00:23:57,120 --> 00:24:03,439
any other supporting services you chose

615
00:23:59,730 --> 00:24:03,440
to install inside your cloud environment

616
00:24:03,650 --> 00:24:09,720
so if we look at this picture here right

617
00:24:06,780 --> 00:24:11,190
we have our our green and black lines

618
00:24:09,720 --> 00:24:13,860
have represented our public domain

619
00:24:11,190 --> 00:24:16,380
incoming in the blue in the middle is

620
00:24:13,860 --> 00:24:19,020
all of our gas traffic and all these

621
00:24:16,380 --> 00:24:20,640
instrument or instances will communicate

622
00:24:19,020 --> 00:24:23,700
with each other and the Neutron

623
00:24:20,640 --> 00:24:26,570
processes one thing to keep in mind here

624
00:24:23,700 --> 00:24:30,150
is that each project has their own

625
00:24:26,570 --> 00:24:32,399
software-defined network inside this

626
00:24:30,150 --> 00:24:35,070
lovely blue line here which could be

627
00:24:32,400 --> 00:24:36,930
VLAN it could be VX LAN or it could be

628
00:24:35,070 --> 00:24:40,439
GRE tunnels it really depends on what

629
00:24:36,930 --> 00:24:42,540
you're and how you've deployed it so you

630
00:24:40,440 --> 00:24:45,240
get you got malt well you have multiple

631
00:24:42,540 --> 00:24:46,920
overlays going on in that space and then

632
00:24:45,240 --> 00:24:49,230
at the top there your red line is your

633
00:24:46,920 --> 00:24:51,360
management network so based on this

634
00:24:49,230 --> 00:24:53,730
diagram if this was the layout you chose

635
00:24:51,360 --> 00:24:55,469
for your client wireman and assuming you

636
00:24:53,730 --> 00:24:57,180
have bonded interfaces because you want

637
00:24:55,470 --> 00:24:58,410
protecting its failure redundancy your

638
00:24:57,180 --> 00:25:00,810
compute nodes are looking at for

639
00:24:58,410 --> 00:25:03,540
interfaces your controller nodes are

640
00:25:00,810 --> 00:25:04,740
also looking at for interfaces and your

641
00:25:03,540 --> 00:25:08,700
network nodes are looking at 6

642
00:25:04,740 --> 00:25:10,260
interfaces and then we haven't even

643
00:25:08,700 --> 00:25:11,550
talked about storage all so if you're

644
00:25:10,260 --> 00:25:13,200
trying to plug in a nice because you

645
00:25:11,550 --> 00:25:14,909
network to something in here well you're

646
00:25:13,200 --> 00:25:21,450
gonna have to add interfaces for storage

647
00:25:14,910 --> 00:25:26,240
as well at this point if you still so

648
00:25:21,450 --> 00:25:26,240
here this here yeah

649
00:25:30,440 --> 00:25:41,090
physical servers all those are physical

650
00:25:34,560 --> 00:25:43,530
servers yeah I guess it gets to be a lot

651
00:25:41,090 --> 00:25:45,449
especially depending on your size and

652
00:25:43,530 --> 00:25:47,399
what your sometimes your network

653
00:25:45,450 --> 00:25:50,250
requirements are so for example in this

654
00:25:47,400 --> 00:25:52,140
picture your your network known as off

655
00:25:50,250 --> 00:25:53,820
to the side and it's different than your

656
00:25:52,140 --> 00:25:55,160
controller node depending on your

657
00:25:53,820 --> 00:25:57,330
product you can combine those together

658
00:25:55,160 --> 00:25:58,560
so for example let's see if three

659
00:25:57,330 --> 00:26:00,810
controller nodes well they can handle

660
00:25:58,560 --> 00:26:02,600
all the controller services but then you

661
00:26:00,810 --> 00:26:05,399
write into the issues is okay I have

662
00:26:02,600 --> 00:26:08,189
that's like twenty something controlling

663
00:26:05,400 --> 00:26:10,980
services and then what is happening

664
00:26:08,190 --> 00:26:13,050
inside your cloud environment let's for

665
00:26:10,980 --> 00:26:14,970
example if you're doing a lot of network

666
00:26:13,050 --> 00:26:16,620
bandwidth in and out of the cloud

667
00:26:14,970 --> 00:26:18,420
environment you might have to move your

668
00:26:16,620 --> 00:26:21,600
network nodes off to the side like

669
00:26:18,420 --> 00:26:23,070
isolated boxes depending on what kind of

670
00:26:21,600 --> 00:26:24,570
throughput you walked on there right cuz

671
00:26:23,070 --> 00:26:30,300
you may not want to share those

672
00:26:24,570 --> 00:26:32,250
resources with somebody else yeah so if

673
00:26:30,300 --> 00:26:33,450
you make an end up being a lot it can

674
00:26:32,250 --> 00:26:35,730
into being a lot of physical interfaces

675
00:26:33,450 --> 00:26:37,980
but it all depends on like are you going

676
00:26:35,730 --> 00:26:39,630
like really really cheap commodity and

677
00:26:37,980 --> 00:26:42,950
you're not going to bond any interfaces

678
00:26:39,630 --> 00:26:45,330
at all or you know are you comfortable

679
00:26:42,950 --> 00:26:50,280
combining some of those security domains

680
00:26:45,330 --> 00:26:52,230
together or not combining but let's see

681
00:26:50,280 --> 00:26:54,600
if one set up on interfaces you you can

682
00:26:52,230 --> 00:26:57,120
get away with running each of these

683
00:26:54,600 --> 00:26:58,860
security domains on their own VLAN under

684
00:26:57,120 --> 00:27:00,330
the hood so you know you have one set of

685
00:26:58,860 --> 00:27:03,679
interfaces you're still separating them

686
00:27:00,330 --> 00:27:03,679
at the VLAN layer underneath

687
00:27:08,070 --> 00:27:13,559
so here's an example of a compute node

688
00:27:10,879 --> 00:27:15,869
so this is from the Oba sack deployment

689
00:27:13,559 --> 00:27:18,119
guide but the only side project

690
00:27:15,869 --> 00:27:19,439
so inside the open at space there

691
00:27:18,119 --> 00:27:21,330
Rackspace

692
00:27:19,440 --> 00:27:25,379
I think it's probably what two years ago

693
00:27:21,330 --> 00:27:27,359
now release their deployment tools as

694
00:27:25,379 --> 00:27:29,820
like an open source product it's called

695
00:27:27,359 --> 00:27:31,499
Oh sad you can look it up it's a base

696
00:27:29,820 --> 00:27:33,658
uses an turbo under the hood for all of

697
00:27:31,499 --> 00:27:35,999
its deployment gear or I guess it's

698
00:27:33,659 --> 00:27:39,450
configuration management so this is from

699
00:27:35,999 --> 00:27:42,539
there diagram up so here they're compute

700
00:27:39,450 --> 00:27:45,149
node example has four interfaces bond

701
00:27:42,539 --> 00:27:46,710
one bond 0 the public access to your

702
00:27:45,149 --> 00:27:49,678
instances will come in on the blue links

703
00:27:46,710 --> 00:27:51,359
which by default the Rackspace tools use

704
00:27:49,679 --> 00:27:55,229
the X land for all their communication

705
00:27:51,359 --> 00:27:57,720
so will come in on their does everyone

706
00:27:55,229 --> 00:28:00,239
know what the X LAN is does that I'll

707
00:27:57,720 --> 00:28:01,769
give an update bx lam i'm so on the red

708
00:28:00,239 --> 00:28:03,149
side this is where your management

709
00:28:01,769 --> 00:28:04,710
stores try to come in so they've

710
00:28:03,149 --> 00:28:08,099
combined it on that they've separate out

711
00:28:04,710 --> 00:28:13,889
that physical interface and then yeah

712
00:28:08,099 --> 00:28:16,399
tan traffic's on the blue wine so inside

713
00:28:13,889 --> 00:28:18,508
the OpenStack space when you deploy

714
00:28:16,399 --> 00:28:20,399
networks with software fine networking

715
00:28:18,509 --> 00:28:22,590
you're kind of three options for and

716
00:28:20,399 --> 00:28:23,939
have four options you have the flat

717
00:28:22,590 --> 00:28:26,519
network which is mean you've just given

718
00:28:23,940 --> 00:28:28,049
the raw interface to to a tenant the

719
00:28:26,519 --> 00:28:31,080
problem with that is only one tenant can

720
00:28:28,049 --> 00:28:33,869
use that interface at a time the second

721
00:28:31,080 --> 00:28:35,728
option is VLANs so let's assume your if

722
00:28:33,869 --> 00:28:37,799
your organization is really good at VLAN

723
00:28:35,729 --> 00:28:40,289
management and you carve off a block of

724
00:28:37,799 --> 00:28:41,759
three VLANs you know somewhere made to a

725
00:28:40,289 --> 00:28:44,070
thousand to two thousand you put that

726
00:28:41,759 --> 00:28:45,899
you know second fig every time someone

727
00:28:44,070 --> 00:28:47,970
builds a network in there for a tenant

728
00:28:45,899 --> 00:28:50,998
overstock will pick one of those VLANs

729
00:28:47,970 --> 00:28:53,070
IDs that's free and we'll use that for

730
00:28:50,999 --> 00:28:56,220
all the networking functions inside that

731
00:28:53,070 --> 00:28:58,289
project or tenant that works out fairly

732
00:28:56,220 --> 00:29:00,019
well for small organizations the issue

733
00:28:58,289 --> 00:29:02,039
that I find people run into is either

734
00:29:00,019 --> 00:29:03,359
either building a cloud that's a lot

735
00:29:02,039 --> 00:29:05,879
larger than they anticipates that they

736
00:29:03,359 --> 00:29:09,299
end up running out of VLAN IDs or their

737
00:29:05,879 --> 00:29:11,309
organization was not set up to carve out

738
00:29:09,299 --> 00:29:12,599
blocks of e lands IDs like that and give

739
00:29:11,309 --> 00:29:14,549
it to an oversized space they've used

740
00:29:12,599 --> 00:29:16,200
VLANs you know through multiple offices

741
00:29:14,549 --> 00:29:18,090
maybe they've inherited companies over

742
00:29:16,200 --> 00:29:18,570
the years so they're VLAN ID range is

743
00:29:18,090 --> 00:29:22,439
really

744
00:29:18,570 --> 00:29:25,439
sequential you can choose GRE GRE was

745
00:29:22,440 --> 00:29:27,450
really good a store in the past inside

746
00:29:25,440 --> 00:29:29,669
the open stat space however that has its

747
00:29:27,450 --> 00:29:32,309
own limitations either overhead the way

748
00:29:29,669 --> 00:29:35,759
the encapsulation works that size stuff

749
00:29:32,309 --> 00:29:38,639
so the current favorite one depending

750
00:29:35,759 --> 00:29:41,009
what you're doing is V X LAN so if the X

751
00:29:38,639 --> 00:29:43,559
Lane gives you a layer to overlay on top

752
00:29:41,009 --> 00:29:45,330
of a layer 3 network so what that means

753
00:29:43,559 --> 00:29:47,070
is this most networks or layer 3 you

754
00:29:45,330 --> 00:29:48,449
have an IP address if you talk to people

755
00:29:47,070 --> 00:29:50,428
in your subnet and then you hit a router

756
00:29:48,450 --> 00:29:51,600
or gateway and then you get out on to

757
00:29:50,429 --> 00:29:54,120
the internet wherever you want

758
00:29:51,600 --> 00:29:56,850
what VX LAN does is it takes all of your

759
00:29:54,120 --> 00:29:59,459
tenant traffic and it gives you a layer

760
00:29:56,850 --> 00:30:01,559
2 over top of that so the V ends can

761
00:29:59,460 --> 00:30:03,360
communicate with each other the VMS can

762
00:30:01,559 --> 00:30:05,879
communicate with the router that has an

763
00:30:03,360 --> 00:30:08,129
interface on their subnet and if the X

764
00:30:05,879 --> 00:30:10,918
LAN will take their packets encapsulate

765
00:30:08,129 --> 00:30:13,168
it in UDP and send that to the correct

766
00:30:10,919 --> 00:30:15,419
point where it needs to go so that keeps

767
00:30:13,169 --> 00:30:16,889
it ice that's on the 10 aside and then

768
00:30:15,419 --> 00:30:20,129
when it hits your nutron router and goes

769
00:30:16,889 --> 00:30:21,658
to leave that space then it's hitting

770
00:30:20,129 --> 00:30:23,759
some more physical network that the

771
00:30:21,659 --> 00:30:25,909
provider of the OpenStack layer has set

772
00:30:23,759 --> 00:30:25,909
up

773
00:30:30,700 --> 00:30:35,570
everyone good on layer 2 hell layer 2

774
00:30:35,060 --> 00:30:40,340
works

775
00:30:35,570 --> 00:30:43,490
alright I'll cover that so back on those

776
00:30:40,340 --> 00:30:45,409
SATA tools so the diagram on the left is

777
00:30:43,490 --> 00:30:47,450
what a controller node looks like and

778
00:30:45,410 --> 00:30:49,070
the diagram on the right I just blew up

779
00:30:47,450 --> 00:30:53,840
that middle spot so hopefully it's

780
00:30:49,070 --> 00:30:56,629
easier to see yeah there's a lot going

781
00:30:53,840 --> 00:30:59,300
on in there so the old side tools that

782
00:30:56,630 --> 00:31:01,790
are from Rackspace what they do is they

783
00:30:59,300 --> 00:31:03,169
a white Hantz really good because they

784
00:31:01,790 --> 00:31:05,510
allow you to put your controller

785
00:31:03,170 --> 00:31:08,210
services wherever you want on any

786
00:31:05,510 --> 00:31:10,970
machine the the bad part is everything

787
00:31:08,210 --> 00:31:13,250
they do they do in a container so it's

788
00:31:10,970 --> 00:31:14,540
great because you know if you if you

789
00:31:13,250 --> 00:31:16,580
have an issue with a container or you

790
00:31:14,540 --> 00:31:18,470
want to try software update everything

791
00:31:16,580 --> 00:31:20,240
is isolated so like if you want to try

792
00:31:18,470 --> 00:31:21,470
out a new version at Keystone you don't

793
00:31:20,240 --> 00:31:23,060
have to worry about mocking any other

794
00:31:21,470 --> 00:31:24,560
controlling services so there's about 20

795
00:31:23,060 --> 00:31:26,240
of them on there so you can blow them

796
00:31:24,560 --> 00:31:27,500
away recreate them move them around

797
00:31:26,240 --> 00:31:29,630
that's awesome

798
00:31:27,500 --> 00:31:32,180
alright every instant container which

799
00:31:29,630 --> 00:31:35,810
gives you another layer of abstraction

800
00:31:32,180 --> 00:31:38,390
at the network layer so not only do you

801
00:31:35,810 --> 00:31:40,580
have to be able to handle the Neutron

802
00:31:38,390 --> 00:31:42,800
Linux bridging support the habits in

803
00:31:40,580 --> 00:31:44,929
that space with VX lan then you also

804
00:31:42,800 --> 00:31:46,820
have to get ten with how do my

805
00:31:44,930 --> 00:31:51,290
containers get access to all those raw

806
00:31:46,820 --> 00:31:53,030
interfaces underneath the hood yeah it's

807
00:31:51,290 --> 00:31:54,500
pretty good but same thing right all

808
00:31:53,030 --> 00:31:57,020
everything on the red that's where your

809
00:31:54,500 --> 00:31:59,180
management and storage domain traffic

810
00:31:57,020 --> 00:32:02,060
leaves everything blue on the right is

811
00:31:59,180 --> 00:32:06,590
all of your tenant traffic alright so

812
00:32:02,060 --> 00:32:08,929
for example if you had a tenant coming

813
00:32:06,590 --> 00:32:10,399
in and he needed to get DHCP and hit his

814
00:32:08,930 --> 00:32:14,420
router he would come in on the blue side

815
00:32:10,400 --> 00:32:15,730
or VX LAN and then it would get passed

816
00:32:14,420 --> 00:32:18,590
out to the other places

817
00:32:15,730 --> 00:32:19,820
now when you if you follow the old side

818
00:32:18,590 --> 00:32:22,490
tools when you do this you'll see here

819
00:32:19,820 --> 00:32:25,730
that they have a vr management be our

820
00:32:22,490 --> 00:32:28,550
storage be our land and a be our VX land

821
00:32:25,730 --> 00:32:31,520
interface and bridge so they also break

822
00:32:28,550 --> 00:32:32,899
everything up into Linux bridges which

823
00:32:31,520 --> 00:32:35,120
is great because then you can pass those

824
00:32:32,900 --> 00:32:38,150
Linux bridges up into the OpenStack

825
00:32:35,120 --> 00:32:39,350
services but you have to be comfortable

826
00:32:38,150 --> 00:32:41,620
with Linux bridges if you're going down

827
00:32:39,350 --> 00:32:41,620
this path

828
00:32:45,530 --> 00:32:49,490
one other thing to note so earlier we

829
00:32:47,990 --> 00:32:51,350
talked about the security domains we

830
00:32:49,490 --> 00:32:53,570
talked about the management domain and

831
00:32:51,350 --> 00:32:57,740
how that domain should be highly secure

832
00:32:53,570 --> 00:33:01,280
not accessible for anywhere else the

833
00:32:57,740 --> 00:33:04,790
Rackspace tools out of the box don't add

834
00:33:01,280 --> 00:33:06,800
any routes or default gateways inside

835
00:33:04,790 --> 00:33:09,010
the management stuff that they deploy so

836
00:33:06,800 --> 00:33:12,530
when you deploy the Rackspace services

837
00:33:09,010 --> 00:33:14,780
across your fleet of gear it works out

838
00:33:12,530 --> 00:33:15,800
really well except nothing can talk to

839
00:33:14,780 --> 00:33:17,389
the management network and the

840
00:33:15,800 --> 00:33:19,850
management network cannot talk anywhere

841
00:33:17,390 --> 00:33:22,010
else it's just something to keep in mind

842
00:33:19,850 --> 00:33:23,750
so I'm good sigh it's it's it's very

843
00:33:22,010 --> 00:33:24,680
secure on the bad side you can't get to

844
00:33:23,750 --> 00:33:26,480
it unless you're on that layer to

845
00:33:24,680 --> 00:33:31,070
network which depending on your

846
00:33:26,480 --> 00:33:33,380
organization could be annoying so

847
00:33:31,070 --> 00:33:35,629
network interface setup so here's an

848
00:33:33,380 --> 00:33:38,390
example of setting up a controller node

849
00:33:35,630 --> 00:33:41,630
so a left-hand side there we're just

850
00:33:38,390 --> 00:33:44,210
going to bring up a management VLAN sub

851
00:33:41,630 --> 00:33:46,640
interface on bond 0 and on the right

852
00:33:44,210 --> 00:33:48,620
side we will set up a management bridge

853
00:33:46,640 --> 00:33:51,250
ad that sub interface to it and then we

854
00:33:48,620 --> 00:33:54,020
can pass that off to all of our

855
00:33:51,250 --> 00:33:58,670
containers all of our new OpenStack

856
00:33:54,020 --> 00:34:00,790
controller services why you'd have to

857
00:33:58,670 --> 00:34:04,700
repeat this process for the BR storage

858
00:34:00,790 --> 00:34:09,739
be rvx LAN and the BR VLAN interfaces if

859
00:34:04,700 --> 00:34:12,740
you went down that path so here's a

860
00:34:09,739 --> 00:34:16,040
picture of the neutron agent so this one

861
00:34:12,739 --> 00:34:18,489
here has set up for both it will support

862
00:34:16,040 --> 00:34:18,489
VLAN

863
00:34:20,510 --> 00:34:25,070
on the left side that's showing you the

864
00:34:22,550 --> 00:34:26,659
path for VX lan packets coming in and

865
00:34:25,070 --> 00:34:29,179
leaving and on the right side showing

866
00:34:26,659 --> 00:34:30,940
the path for VLAN packets coming in and

867
00:34:29,179 --> 00:34:33,470
leaving

868
00:34:30,940 --> 00:34:37,040
so with that sub interface we created

869
00:34:33,469 --> 00:34:39,379
earlier you would attach it to the BR VX

870
00:34:37,040 --> 00:34:42,230
LAN interface or bridge on the left side

871
00:34:39,379 --> 00:34:44,569
and then these neutrons services then up

872
00:34:42,230 --> 00:34:47,629
creating a tap to this bridge and then

873
00:34:44,570 --> 00:34:49,879
pulling it into the VX LAN bridge inside

874
00:34:47,629 --> 00:34:51,918
there and then from there they'll have

875
00:34:49,879 --> 00:34:54,109
another top that goes to their namespace

876
00:34:51,918 --> 00:34:56,600
where they do all their networking

877
00:34:54,109 --> 00:34:59,960
activities so inside the when Neutron

878
00:34:56,600 --> 00:35:01,910
starts up all the software-defined

879
00:34:59,960 --> 00:35:03,920
networks all your tenants created a lot

880
00:35:01,910 --> 00:35:05,960
of times will help routers DCP agents

881
00:35:03,920 --> 00:35:08,119
all the type stuff all that is handled

882
00:35:05,960 --> 00:35:09,320
inside their own network namespace so

883
00:35:08,119 --> 00:35:16,940
they're all isolated from everything

884
00:35:09,320 --> 00:35:20,150
else SSL and TLS configuration so now

885
00:35:16,940 --> 00:35:22,609
that we have all of these controller

886
00:35:20,150 --> 00:35:25,310
services and API sup everywhere and

887
00:35:22,609 --> 00:35:27,109
assuming we have some kind of security

888
00:35:25,310 --> 00:35:29,720
domain separating the outside from the

889
00:35:27,109 --> 00:35:32,420
inside ones by default a lot of these

890
00:35:29,720 --> 00:35:34,730
services are just standard HTTP so it

891
00:35:32,420 --> 00:35:37,490
means usernames passwords config data

892
00:35:34,730 --> 00:35:42,680
tokens all stuff all type of stuff is

893
00:35:37,490 --> 00:35:45,439
sent across unencrypted here is the list

894
00:35:42,680 --> 00:35:47,000
of the endpoints that exist I would say

895
00:35:45,440 --> 00:35:48,650
on a standard old stack environment

896
00:35:47,000 --> 00:35:50,510
assuming you've added in no supporting

897
00:35:48,650 --> 00:35:56,710
services that you would have to somehow

898
00:35:50,510 --> 00:35:59,060
protect ideally behind SSL so the

899
00:35:56,710 --> 00:36:00,230
OpenStack security guard which is on

900
00:35:59,060 --> 00:36:01,430
that link that was on the first slide

901
00:36:00,230 --> 00:36:04,010
actually has some really good

902
00:36:01,430 --> 00:36:06,230
information on what type of SSL settings

903
00:36:04,010 --> 00:36:09,500
you should need algorithms Shubham plays

904
00:36:06,230 --> 00:36:11,210
how to lock down for example rapid mq or

905
00:36:09,500 --> 00:36:13,040
how to lock down access to the database

906
00:36:11,210 --> 00:36:15,770
I by the fault

907
00:36:13,040 --> 00:36:18,290
a lot of the database backends in

908
00:36:15,770 --> 00:36:19,430
OpenStack is my C Vogel era so let's go

909
00:36:18,290 --> 00:36:24,170
out documentation on how you can lock

910
00:36:19,430 --> 00:36:26,210
that down with SSL however there are

911
00:36:24,170 --> 00:36:29,900
some gotchas when trying to implement

912
00:36:26,210 --> 00:36:32,900
SSL TLS the first one is they actually

913
00:36:29,900 --> 00:36:36,230
recommend using an SSL or TLS proxy in

914
00:36:32,900 --> 00:36:38,900
front of the OpenStack services this

915
00:36:36,230 --> 00:36:40,820
diagram here the OpenStack API endpoint

916
00:36:38,900 --> 00:36:43,030
service whatever it is is configured to

917
00:36:40,820 --> 00:36:45,920
run on the loopback interface only and

918
00:36:43,030 --> 00:36:48,050
the estelle TLS proxy is actually in

919
00:36:45,920 --> 00:36:52,070
front handling all of your SSL TLS

920
00:36:48,050 --> 00:36:55,880
communication there's a few reasons for

921
00:36:52,070 --> 00:36:57,440
that one is that the there could be

922
00:36:55,880 --> 00:36:59,030
scaling or performance issues with

923
00:36:57,440 --> 00:37:01,220
handling SSL inside the OpenStack

924
00:36:59,030 --> 00:37:02,150
service so a bunch of them are written

925
00:37:01,220 --> 00:37:03,950
in Python

926
00:37:02,150 --> 00:37:07,010
depending on what libraries are used

927
00:37:03,950 --> 00:37:09,169
under the hood SSL encryption decryption

928
00:37:07,010 --> 00:37:11,030
is not always the fastest inside the

929
00:37:09,170 --> 00:37:12,890
Python space so it really depends on how

930
00:37:11,030 --> 00:37:13,850
big your cloud environment is and what

931
00:37:12,890 --> 00:37:16,100
you're doing with it whether or not

932
00:37:13,850 --> 00:37:18,049
that'll be a concern

933
00:37:16,100 --> 00:37:20,630
the other one is there there upfront

934
00:37:18,050 --> 00:37:23,480
about those API endpoints not being

935
00:37:20,630 --> 00:37:25,250
fully scrutinized yet or well tested in

936
00:37:23,480 --> 00:37:28,340
the wild where when you get things like

937
00:37:25,250 --> 00:37:30,050
H a proxy or other tools out there that

938
00:37:28,340 --> 00:37:31,820
offer a still until s they they've been

939
00:37:30,050 --> 00:37:34,780
around a lot longer and they've proven

940
00:37:31,820 --> 00:37:34,780
themselves in that space

941
00:37:37,950 --> 00:37:43,140
yeah you can you can if you use the

942
00:37:40,440 --> 00:37:45,950
Rackspace tools they give you an option

943
00:37:43,140 --> 00:37:47,910
to use H a proxy kind of out-of-the-box

944
00:37:45,950 --> 00:37:49,230
there's a bunch out there that can

945
00:37:47,910 --> 00:37:50,399
integrate with the thighs there's

946
00:37:49,230 --> 00:37:53,100
there's there's a bunch of different

947
00:37:50,400 --> 00:37:54,900
options out there and then it also

948
00:37:53,100 --> 00:37:57,600
depends on on your organization right

949
00:37:54,900 --> 00:38:01,950
like are you comfortable securing access

950
00:37:57,600 --> 00:38:04,170
to the API at the load balancer which is

951
00:38:01,950 --> 00:38:06,270
everyone coming in to you maybe you

952
00:38:04,170 --> 00:38:08,940
don't maybe for some reason don't need

953
00:38:06,270 --> 00:38:11,520
to secure your internal management API

954
00:38:08,940 --> 00:38:13,530
requests or or maybe just terminating

955
00:38:11,520 --> 00:38:14,759
all of them at the little bouncer it's

956
00:38:13,530 --> 00:38:16,680
great because it doesn't matter where

957
00:38:14,760 --> 00:38:18,090
your client is he's terminated however

958
00:38:16,680 --> 00:38:20,399
from the load balancer to the service

959
00:38:18,090 --> 00:38:22,440
that's unencrypted and that that could

960
00:38:20,400 --> 00:38:24,210
be okay but it's kind of on your

961
00:38:22,440 --> 00:38:25,680
business needs right but if you're

962
00:38:24,210 --> 00:38:28,980
trying to guarantee you some level of

963
00:38:25,680 --> 00:38:31,649
security then you probably want to have

964
00:38:28,980 --> 00:38:33,900
encryption the entire way one of the

965
00:38:31,650 --> 00:38:36,510
things you can do is that you can

966
00:38:33,900 --> 00:38:39,840
encrypt from the clients to your load

967
00:38:36,510 --> 00:38:41,520
balancer using SSL TLS and then you can

968
00:38:39,840 --> 00:38:42,990
easily turn on encryption inside

969
00:38:41,520 --> 00:38:45,570
Keystone which is your authentication

970
00:38:42,990 --> 00:38:46,830
service so you would encrypt all the

971
00:38:45,570 --> 00:38:48,150
usernames and passwords that go

972
00:38:46,830 --> 00:38:50,940
throughout the system that are set up

973
00:38:48,150 --> 00:38:53,250
everywhere however you would not encrypt

974
00:38:50,940 --> 00:38:55,470
further API calls where a token is

975
00:38:53,250 --> 00:38:55,950
passed around so the initial setup is

976
00:38:55,470 --> 00:38:57,330
great

977
00:38:55,950 --> 00:38:59,180
later on when they're making substance a

978
00:38:57,330 --> 00:39:01,680
P I calls that token is not encrypted

979
00:38:59,180 --> 00:39:03,569
see it's a trade off it kind of really

980
00:39:01,680 --> 00:39:09,270
depends on what you're going for that

981
00:39:03,570 --> 00:39:11,430
overstock environment so here's an

982
00:39:09,270 --> 00:39:12,930
example where you know using H a proxy

983
00:39:11,430 --> 00:39:16,169
to load balance those API services

984
00:39:12,930 --> 00:39:17,940
they're using it they have a CA signed

985
00:39:16,170 --> 00:39:19,560
certificate you know something that

986
00:39:17,940 --> 00:39:21,810
people trust that shows up in the

987
00:39:19,560 --> 00:39:24,000
browser and they're very happy with it

988
00:39:21,810 --> 00:39:25,830
and then again at the back end you'll

989
00:39:24,000 --> 00:39:27,330
maybe they're using a self-signed cert

990
00:39:25,830 --> 00:39:32,940
or something in your organization that's

991
00:39:27,330 --> 00:39:34,680
a little easier to manage so if you go

992
00:39:32,940 --> 00:39:36,390
to the site they have a very detailed

993
00:39:34,680 --> 00:39:39,330
security guide covering everything

994
00:39:36,390 --> 00:39:43,259
around network security to hardening

995
00:39:39,330 --> 00:39:45,720
nodes to using a bar selinux

996
00:39:43,260 --> 00:39:46,450
with KVM to help protect us instances

997
00:39:45,720 --> 00:39:48,129
there's

998
00:39:46,450 --> 00:39:50,919
there's tons of different stuff out

999
00:39:48,130 --> 00:39:53,260
there now

1000
00:39:50,920 --> 00:39:55,089
I do have an open stock environment up

1001
00:39:53,260 --> 00:39:57,339
and running that I can show you before

1002
00:39:55,089 --> 00:40:03,099
you run at a time does anyone have any

1003
00:39:57,339 --> 00:40:04,869
questions no does anyone want to take a

1004
00:40:03,099 --> 00:40:07,300
guess at how many different passwords

1005
00:40:04,869 --> 00:40:14,820
you could have to create inside an open

1006
00:40:07,300 --> 00:40:19,410
stack environment you're looking for

1007
00:40:14,820 --> 00:40:19,410
right now in my environment there's 54

1008
00:40:24,820 --> 00:40:32,330
No yeah we'll just wait for this there

1009
00:40:31,910 --> 00:40:43,600
we go

1010
00:40:32,330 --> 00:40:43,600
well oh I'm here in full-screen exid

1011
00:40:45,320 --> 00:40:51,230
there we go so I do most of my work

1012
00:40:49,580 --> 00:40:53,420
inside parallels because half the stuff

1013
00:40:51,230 --> 00:40:55,340
I do is on Ubuntu and well I like

1014
00:40:53,420 --> 00:40:58,310
keeping my NOC pristine so it continues

1015
00:40:55,340 --> 00:41:00,140
to work as is so inside this the end I

1016
00:40:58,310 --> 00:41:02,029
have a completely running a complete

1017
00:41:00,140 --> 00:41:06,129
running OpenStack environment that I'm

1018
00:41:02,030 --> 00:41:06,130
assuming will make me log in again

1019
00:41:16,750 --> 00:41:21,610
just to make sure twin believe me yes so

1020
00:41:20,050 --> 00:41:23,320
there are all the different passwords I

1021
00:41:21,610 --> 00:41:25,600
have for every service inside the space

1022
00:41:23,320 --> 00:41:26,770
they're all different I can't take

1023
00:41:25,600 --> 00:41:30,330
credit because they're all randomly

1024
00:41:26,770 --> 00:41:31,509
generated I use the host at or

1025
00:41:30,330 --> 00:41:33,700
Rackspace's

1026
00:41:31,510 --> 00:41:36,550
OpenStack ansible deployment tools to

1027
00:41:33,700 --> 00:41:40,390
build this VM because well it it allows

1028
00:41:36,550 --> 00:41:43,810
me to build everything on one VM it's

1029
00:41:40,390 --> 00:41:46,000
great for testing as you can see here's

1030
00:41:43,810 --> 00:41:49,060
all the containers that are running on

1031
00:41:46,000 --> 00:41:52,060
the system the Valera container is

1032
00:41:49,060 --> 00:41:53,920
deployed triplicate if you deploy this

1033
00:41:52,060 --> 00:41:55,570
against your fleet of nodes everything

1034
00:41:53,920 --> 00:41:58,930
is set up with a minimal of three

1035
00:41:55,570 --> 00:42:00,310
instances and it also takes care of a

1036
00:41:58,930 --> 00:42:04,690
little bouncer so let's we're still

1037
00:42:00,310 --> 00:42:15,790
pretty good so here's my old stack

1038
00:42:04,690 --> 00:42:19,300
project demo and all the instances bill

1039
00:42:15,790 --> 00:42:22,300
if we look at the network so this

1040
00:42:19,300 --> 00:42:26,080
network topology that exists inside here

1041
00:42:22,300 --> 00:42:28,900
is a VX LAN network as you can see I

1042
00:42:26,080 --> 00:42:30,970
have a private space rudder public is

1043
00:42:28,900 --> 00:42:32,860
the outside network that I will use to

1044
00:42:30,970 --> 00:42:35,109
connect to the internet or other places

1045
00:42:32,860 --> 00:42:36,550
and I have a DB network here that is

1046
00:42:35,110 --> 00:42:40,390
currently orphaned because I have not

1047
00:42:36,550 --> 00:42:42,040
had at any router interfaces on it now

1048
00:42:40,390 --> 00:42:44,500
from the security point of view if I

1049
00:42:42,040 --> 00:42:45,690
were to build any instances in here they

1050
00:42:44,500 --> 00:42:48,340
would get built on the private network

1051
00:42:45,690 --> 00:42:51,580
which uses VX LAN to terminate to all

1052
00:42:48,340 --> 00:42:53,260
the nodes and then because I have a

1053
00:42:51,580 --> 00:42:56,350
router here I can get to the internet

1054
00:42:53,260 --> 00:42:58,840
now one thing I did do that is a little

1055
00:42:56,350 --> 00:43:00,549
crazy there is a a really good talk on

1056
00:42:58,840 --> 00:43:03,880
once you have all the stack running

1057
00:43:00,550 --> 00:43:05,320
using all the stack and the software to

1058
00:43:03,880 --> 00:43:08,170
find out working inside there to

1059
00:43:05,320 --> 00:43:09,940
actually increase the security of your

1060
00:43:08,170 --> 00:43:11,050
current environment because right now

1061
00:43:09,940 --> 00:43:12,610
like you doesn't matter you moved like

1062
00:43:11,050 --> 00:43:16,530
VMware NSX that kind stuff

1063
00:43:12,610 --> 00:43:18,270
fencing projects or fencing

1064
00:43:16,530 --> 00:43:20,670
joint venture activities or other stuff

1065
00:43:18,270 --> 00:43:22,470
you do in organization is is hard today

1066
00:43:20,670 --> 00:43:23,700
right like because you figure got

1067
00:43:22,470 --> 00:43:24,930
firewall rules around the entire project

1068
00:43:23,700 --> 00:43:26,490
and how do they integrate with other

1069
00:43:24,930 --> 00:43:29,129
projects there's all the stuff you want

1070
00:43:26,490 --> 00:43:32,220
to put together so it's a really good

1071
00:43:29,130 --> 00:43:34,230
talk here so I was set up this down low

1072
00:43:32,220 --> 00:43:36,959
to kind of give it an overview of so if

1073
00:43:34,230 --> 00:43:38,820
you have an open Stax space and you can

1074
00:43:36,960 --> 00:43:40,859
build all of these networks on demand

1075
00:43:38,820 --> 00:43:42,420
well then you you know you don't have to

1076
00:43:40,859 --> 00:43:44,119
worry about provisioning or contacting

1077
00:43:42,420 --> 00:43:46,380
other departments or anything and then

1078
00:43:44,119 --> 00:43:48,900
every project and every instance has a

1079
00:43:46,380 --> 00:43:51,720
security group which is a firewall that

1080
00:43:48,900 --> 00:43:53,970
you can allow or remove things so what

1081
00:43:51,720 --> 00:43:56,490
I've done here is I've created inside my

1082
00:43:53,970 --> 00:43:58,230
space I created a web project and I gave

1083
00:43:56,490 --> 00:43:59,939
I can give developers access to the web

1084
00:43:58,230 --> 00:44:01,619
project so developers can come in and

1085
00:43:59,940 --> 00:44:03,200
they can build instances in the web

1086
00:44:01,619 --> 00:44:05,160
project and they that's all they can do

1087
00:44:03,200 --> 00:44:08,399
and they can attach it to the web

1088
00:44:05,160 --> 00:44:10,529
network I create a DB project so des

1089
00:44:08,400 --> 00:44:12,150
makes people who come in they can build

1090
00:44:10,530 --> 00:44:14,550
databases in the Danish project space

1091
00:44:12,150 --> 00:44:15,570
and access their database subnet that's

1092
00:44:14,550 --> 00:44:18,330
all they can do they can't do anything

1093
00:44:15,570 --> 00:44:20,730
else however I created an interconnect

1094
00:44:18,330 --> 00:44:23,640
project that me as the special admin

1095
00:44:20,730 --> 00:44:27,690
person I get access to inside here what

1096
00:44:23,640 --> 00:44:29,670
I did was is I took an interface from

1097
00:44:27,690 --> 00:44:31,109
the DB web can act which all the web

1098
00:44:29,670 --> 00:44:35,130
servers are on and added to my router

1099
00:44:31,109 --> 00:44:38,160
and now it has access to the daters

1100
00:44:35,130 --> 00:44:39,720
notes and then I gave another router

1101
00:44:38,160 --> 00:44:42,210
called gateway router access to the

1102
00:44:39,720 --> 00:44:45,180
Internet so now from this project I get

1103
00:44:42,210 --> 00:44:48,030
to control as developers are rolling out

1104
00:44:45,180 --> 00:44:49,589
all kinds of crazy applications which

1105
00:44:48,030 --> 00:44:52,200
networks actually get to talk to which

1106
00:44:49,589 --> 00:44:54,359
point so if you're trying to a really

1107
00:44:52,200 --> 00:44:56,339
good job at application segregation

1108
00:44:54,359 --> 00:44:58,020
inside your space this is one way that

1109
00:44:56,339 --> 00:44:59,490
you could go about it right I don't have

1110
00:44:58,020 --> 00:45:01,020
to be concerned now that every time a

1111
00:44:59,490 --> 00:45:02,939
developer wants to build a new web app

1112
00:45:01,020 --> 00:45:05,070
that they're picking the right subnet or

1113
00:45:02,940 --> 00:45:06,960
they're talking to the database on the

1114
00:45:05,070 --> 00:45:08,580
wrong port or they they open up too many

1115
00:45:06,960 --> 00:45:10,980
ports because when I have it locked down

1116
00:45:08,580 --> 00:45:13,319
by these security rules and we've kind

1117
00:45:10,980 --> 00:45:16,080
of we've kind of compartmentalize things

1118
00:45:13,320 --> 00:45:18,599
and everyone has their own duties in

1119
00:45:16,080 --> 00:45:20,400
their own compliance space so there's

1120
00:45:18,599 --> 00:45:22,109
another really good talk where there's

1121
00:45:20,400 --> 00:45:24,180
other off-the-shelf products you can buy

1122
00:45:22,109 --> 00:45:26,220
or there's ways you can add in Network

1123
00:45:24,180 --> 00:45:27,370
top devices in here for monitoring so

1124
00:45:26,220 --> 00:45:30,100
let's say you have a

1125
00:45:27,370 --> 00:45:32,170
an IDs or a fireEye or some other

1126
00:45:30,100 --> 00:45:33,460
network intrusion detection system you

1127
00:45:32,170 --> 00:45:35,530
can go in here and I like walk a wall

1128
00:45:33,460 --> 00:45:38,200
actually I think there's something wrong

1129
00:45:35,530 --> 00:45:40,000
with like this website net right if I

1130
00:45:38,200 --> 00:45:41,080
have multiple applications in my web

1131
00:45:40,000 --> 00:45:43,420
space and they're all in their own

1132
00:45:41,080 --> 00:45:44,710
network well great I can go in here I

1133
00:45:43,420 --> 00:45:46,690
can delete this interface off this

1134
00:45:44,710 --> 00:45:48,100
router and I can move that interface to

1135
00:45:46,690 --> 00:45:50,290
another router I can move that interface

1136
00:45:48,100 --> 00:45:52,210
to some kind of black hole zone if I

1137
00:45:50,290 --> 00:45:53,920
want I can move it to my forensic

1138
00:45:52,210 --> 00:45:57,280
network where all of a sudden everything

1139
00:45:53,920 --> 00:45:58,480
is either logged or there's more I mean

1140
00:45:57,280 --> 00:45:59,770
there's a sim in there that kind of

1141
00:45:58,480 --> 00:46:01,450
stuff so it kind of gives you control on

1142
00:45:59,770 --> 00:46:05,140
how to compartmentalize that stuff as

1143
00:46:01,450 --> 00:46:08,589
you move it around so that is that is

1144
00:46:05,140 --> 00:46:10,440
pretty cool does anyone else have any

1145
00:46:08,590 --> 00:46:14,760
questions

1146
00:46:10,440 --> 00:46:14,760
no all right

1147
00:46:28,349 --> 00:46:33,930
was some things you can mix so you can't

1148
00:46:31,710 --> 00:46:36,869
mix directly AWS with OpenStack

1149
00:46:33,930 --> 00:46:38,700
components since Rackspace has a vested

1150
00:46:36,869 --> 00:46:40,559
interest in OpenStack and obviously is a

1151
00:46:38,700 --> 00:46:41,700
day center seller they actually do quite

1152
00:46:40,559 --> 00:46:44,069
a bit of work of trying to make it so

1153
00:46:41,700 --> 00:46:47,189
you can grow into the cloud and expand

1154
00:46:44,069 --> 00:46:49,829
back OpenStack with the livery release

1155
00:46:47,190 --> 00:46:52,050
has multi domain support where you can

1156
00:46:49,829 --> 00:46:54,690
federated authentication services

1157
00:46:52,050 --> 00:46:55,920
between different ones and then inside

1158
00:46:54,690 --> 00:46:58,410
compute nodes like right now my

1159
00:46:55,920 --> 00:47:06,300
computer's running KVM you can add in

1160
00:46:58,410 --> 00:47:08,819
different compute node types so the only

1161
00:47:06,300 --> 00:47:13,730
caveat there is around when you try and

1162
00:47:08,819 --> 00:47:16,829
add in ESXi so vmware does have some

1163
00:47:13,730 --> 00:47:20,730
let's say constraints when you add in a

1164
00:47:16,829 --> 00:47:23,130
the ESXi so I believe they require they

1165
00:47:20,730 --> 00:47:24,420
think they're required to use vSphere

1166
00:47:23,130 --> 00:47:26,819
think you're acquiring enterprise

1167
00:47:24,420 --> 00:47:28,020
license or Enterprise Plus I could be

1168
00:47:26,819 --> 00:47:30,509
wrong but I think it also might require

1169
00:47:28,020 --> 00:47:31,859
to use V Sam but in theory you can

1170
00:47:30,510 --> 00:47:34,530
develop stack environment you can have

1171
00:47:31,859 --> 00:47:37,049
some k vm pools you can have a hyper-v

1172
00:47:34,530 --> 00:47:39,690
pool you could have an ESX I pull and

1173
00:47:37,049 --> 00:47:41,849
you can mix and match and then you can

1174
00:47:39,690 --> 00:47:44,309
create things like availability zones or

1175
00:47:41,849 --> 00:47:46,200
host aggregates where you can carve that

1176
00:47:44,309 --> 00:47:48,630
up so right now I have a default one

1177
00:47:46,200 --> 00:47:50,399
called Nova that's just my box is under

1178
00:47:48,630 --> 00:47:52,109
write but we could create an

1179
00:47:50,400 --> 00:47:55,079
availability zone or a host aggregate

1180
00:47:52,109 --> 00:47:56,520
that just matches the ESXi and then you

1181
00:47:55,079 --> 00:47:58,530
honor your image tag you can say hey you

1182
00:47:56,520 --> 00:48:00,839
know every time someone builds an

1183
00:47:58,530 --> 00:48:03,240
instance from my Windows image force it

1184
00:48:00,839 --> 00:48:04,950
into that Internet host aggregate so my

1185
00:48:03,240 --> 00:48:06,899
Windows images are always inside my East

1186
00:48:04,950 --> 00:48:09,118
that's because maybe you're using DRS or

1187
00:48:06,900 --> 00:48:10,680
something like that you can do the same

1188
00:48:09,119 --> 00:48:13,049
thing with image sizes you could say hey

1189
00:48:10,680 --> 00:48:14,730
I have a performance image so every time

1190
00:48:13,049 --> 00:48:18,030
someone picks the performance image the

1191
00:48:14,730 --> 00:48:20,520
performance flavor you could say hey I

1192
00:48:18,030 --> 00:48:22,109
want these type images because these are

1193
00:48:20,520 --> 00:48:22,890
all the ones that are in the default you

1194
00:48:22,109 --> 00:48:24,540
can say every time you think the

1195
00:48:22,890 --> 00:48:26,400
performance one forced that one to go to

1196
00:48:24,540 --> 00:48:29,040
my SSD node you know I have a fleet of

1197
00:48:26,400 --> 00:48:30,930
SSDs inside my space and you know these

1198
00:48:29,040 --> 00:48:32,700
cost more so people get charged more and

1199
00:48:30,930 --> 00:48:33,339
I want people to pick those I don't want

1200
00:48:32,700 --> 00:48:35,410
anyone to get

1201
00:48:33,339 --> 00:48:37,420
random so you can do stuff like that to

1202
00:48:35,410 --> 00:48:42,299
control where workflow where workloads

1203
00:48:37,420 --> 00:48:44,410
go inside your OpenStack space and then

1204
00:48:42,299 --> 00:48:45,819
one other thing is kinda neat is so

1205
00:48:44,410 --> 00:48:50,529
under networks all the networks that are

1206
00:48:45,819 --> 00:48:52,269
in there got built as a consumer of the

1207
00:48:50,529 --> 00:48:53,769
space so I logged in as my regular user

1208
00:48:52,269 --> 00:48:55,479
I went to my project space actually

1209
00:48:53,769 --> 00:48:56,709
build me this network you know and asked

1210
00:48:55,479 --> 00:49:00,249
me what's my subnet give me a name

1211
00:48:56,710 --> 00:49:01,900
that's kind of it underneath the hood it

1212
00:49:00,249 --> 00:49:04,839
gets built using the X LAN

1213
00:49:01,900 --> 00:49:09,039
if you come in as an admin and you build

1214
00:49:04,839 --> 00:49:10,558
a network you can pick maybe VLAN or or

1215
00:49:09,039 --> 00:49:13,869
VX LAN if you had a specific

1216
00:49:10,559 --> 00:49:17,380
segmentation IP but here let's assume

1217
00:49:13,869 --> 00:49:20,019
you built this huge cloud space inside

1218
00:49:17,380 --> 00:49:22,089
your corporate network and you want to

1219
00:49:20,019 --> 00:49:24,249
make it so my developers have one

1220
00:49:22,089 --> 00:49:26,019
project space that's actually tied to my

1221
00:49:24,249 --> 00:49:27,399
corporate land so they don't have to use

1222
00:49:26,019 --> 00:49:28,988
fluid and IPS and stuff you can create

1223
00:49:27,400 --> 00:49:31,119
like a developer network and you can

1224
00:49:28,989 --> 00:49:32,200
give it a specific VLAN ID so you know

1225
00:49:31,119 --> 00:49:34,420
if your developer builds something on

1226
00:49:32,200 --> 00:49:35,979
this network it can be shared out it can

1227
00:49:34,420 --> 00:49:39,479
be access from different places so you

1228
00:49:35,979 --> 00:49:39,479
can do stuff like that or use the hood

1229
00:49:57,650 --> 00:50:03,809
no no you can't so if you if you have

1230
00:50:00,930 --> 00:50:05,669
like AWS space and open sack space on

1231
00:50:03,809 --> 00:50:07,680
the network layer you could have a

1232
00:50:05,670 --> 00:50:10,289
routed boundary that connects those two

1233
00:50:07,680 --> 00:50:12,089
together for you underneath the hood but

1234
00:50:10,289 --> 00:50:14,849
the management tools are separate at

1235
00:50:12,089 --> 00:50:16,980
this point now if you took a step back

1236
00:50:14,849 --> 00:50:20,640
and use a different management tool like

1237
00:50:16,980 --> 00:50:22,559
ansible or puppet or chef or something

1238
00:50:20,640 --> 00:50:34,950
like that you can have like ansible

1239
00:50:22,559 --> 00:50:36,119
manage those two things we just got in

1240
00:50:34,950 --> 00:50:38,368
our room

1241
00:50:36,119 --> 00:50:40,079
thank you Michael this feels like the

1242
00:50:38,369 --> 00:50:43,579
last day of Def Con and you broke my

1243
00:50:40,079 --> 00:50:43,579
brain appreciate that

