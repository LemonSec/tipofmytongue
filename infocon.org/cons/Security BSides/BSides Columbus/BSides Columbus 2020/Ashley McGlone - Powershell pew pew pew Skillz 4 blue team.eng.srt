1
00:00:01,760 --> 00:00:08,000
good morning besides columbus

2
00:00:05,120 --> 00:00:09,200
uh welcome to the blue team session

3
00:00:08,000 --> 00:00:11,759
powershell

4
00:00:09,200 --> 00:00:14,160
pew pew pew skills for the blue team my

5
00:00:11,759 --> 00:00:15,440
name is ashley mcloone i'll be your tour

6
00:00:14,160 --> 00:00:17,600
guide today

7
00:00:15,440 --> 00:00:18,880
are you tired of the red team taking

8
00:00:17,600 --> 00:00:22,080
your lunch money

9
00:00:18,880 --> 00:00:25,439
with commodity power shell

10
00:00:22,080 --> 00:00:28,479
attacks that have been available for

11
00:00:25,439 --> 00:00:31,599
several years now quite common

12
00:00:28,480 --> 00:00:33,440
and i'm gonna show you some a way that

13
00:00:31,599 --> 00:00:35,760
you can turn on the black light so to

14
00:00:33,440 --> 00:00:38,399
speak you've watched these csi shows

15
00:00:35,760 --> 00:00:40,239
where they have uh the black light that

16
00:00:38,399 --> 00:00:40,879
shows you all the evidence well here we

17
00:00:40,239 --> 00:00:42,480
go

18
00:00:40,879 --> 00:00:44,000
we're gonna show you some evidence today

19
00:00:42,480 --> 00:00:46,480
with powershell a little bit about

20
00:00:44,000 --> 00:00:48,000
myself my name is ashley mcglone i live

21
00:00:46,480 --> 00:00:50,000
here in columbus

22
00:00:48,000 --> 00:00:53,600
and my resume includes companies like

23
00:00:50,000 --> 00:00:55,760
toyota and microsoft and now tanium

24
00:00:53,600 --> 00:00:58,719
and so that's where i've been now for

25
00:00:55,760 --> 00:01:03,280
about three years at tanium doing uh

26
00:00:58,719 --> 00:01:03,280
security at scale so let's dive right in

27
00:01:03,359 --> 00:01:06,799
so today we're going to talk about how

28
00:01:04,959 --> 00:01:09,439
do we get here with powershell

29
00:01:06,799 --> 00:01:11,760
malware and then we're going to look at

30
00:01:09,439 --> 00:01:13,839
the windows powershell policies

31
00:01:11,760 --> 00:01:15,119
and then i also want to talk about

32
00:01:13,840 --> 00:01:17,840
powershell core

33
00:01:15,119 --> 00:01:20,400
which is the cross-platform powershell

34
00:01:17,840 --> 00:01:22,720
how you can do the same policies there

35
00:01:20,400 --> 00:01:24,479
because uh powershell core has been out

36
00:01:22,720 --> 00:01:26,798
for several years now

37
00:01:24,479 --> 00:01:28,400
and started against the momentum and we

38
00:01:26,799 --> 00:01:30,240
don't want attackers

39
00:01:28,400 --> 00:01:31,439
bypassing your traditional windows

40
00:01:30,240 --> 00:01:33,679
powershell policies

41
00:01:31,439 --> 00:01:34,960
for core so i want to show you how to do

42
00:01:33,680 --> 00:01:37,200
that as well

43
00:01:34,960 --> 00:01:38,880
and then i'll share some free resources

44
00:01:37,200 --> 00:01:39,759
with you at the end as well as a demo in

45
00:01:38,880 --> 00:01:41,520
there

46
00:01:39,759 --> 00:01:43,840
so a brief history of powershell

47
00:01:41,520 --> 00:01:47,119
security how did we get here

48
00:01:43,840 --> 00:01:47,759
so 2003 powershell was announced as

49
00:01:47,119 --> 00:01:50,640
project

50
00:01:47,759 --> 00:01:51,920
monad at the pdc professional developers

51
00:01:50,640 --> 00:01:55,920
conference

52
00:01:51,920 --> 00:01:57,320
years ago 17 years ago wow so 2006

53
00:01:55,920 --> 00:02:00,640
powershell one was released

54
00:01:57,320 --> 00:02:02,639
2008 was the first security oriented

55
00:02:00,640 --> 00:02:04,079
blog post from the powershell team at

56
00:02:02,640 --> 00:02:05,840
microsoft

57
00:02:04,079 --> 00:02:07,839
and basically the point was that

58
00:02:05,840 --> 00:02:10,959
execution policy

59
00:02:07,840 --> 00:02:13,120
in powershell is not a security feature

60
00:02:10,959 --> 00:02:15,280
all right it's easy to bypass it's

61
00:02:13,120 --> 00:02:17,120
designed that way out of the box

62
00:02:15,280 --> 00:02:20,840
and you can check out that blog post for

63
00:02:17,120 --> 00:02:23,440
more info 2008 12 years ago all right

64
00:02:20,840 --> 00:02:25,520
2013 another blog post powershell

65
00:02:23,440 --> 00:02:26,400
security best practices coming out of

66
00:02:25,520 --> 00:02:29,599
redmond

67
00:02:26,400 --> 00:02:33,120
all right 2015. this was massive

68
00:02:29,599 --> 00:02:35,280
if you've not read this blog post yet

69
00:02:33,120 --> 00:02:36,720
you need to go find it powershell hearts

70
00:02:35,280 --> 00:02:38,640
the blue team

71
00:02:36,720 --> 00:02:40,400
this was written by lee holmes when

72
00:02:38,640 --> 00:02:44,000
windows 10 dropped

73
00:02:40,400 --> 00:02:47,040
and they put in a massive amount

74
00:02:44,000 --> 00:02:49,440
of logging and fingerprints

75
00:02:47,040 --> 00:02:51,120
so that you can track exactly what's

76
00:02:49,440 --> 00:02:53,599
happening in powershell

77
00:02:51,120 --> 00:02:54,720
this is huge there were some earlier

78
00:02:53,599 --> 00:02:57,839
attempts at this

79
00:02:54,720 --> 00:03:00,080
but this became de facto standard

80
00:02:57,840 --> 00:03:01,040
out of the box with windows 10 and

81
00:03:00,080 --> 00:03:03,680
available

82
00:03:01,040 --> 00:03:06,159
down level on older versions with a

83
00:03:03,680 --> 00:03:08,959
windows management framework install

84
00:03:06,159 --> 00:03:10,079
massive 40-50 page white paper i want

85
00:03:08,959 --> 00:03:11,519
you to go read that

86
00:03:10,080 --> 00:03:13,760
because that's a foundation for a lot of

87
00:03:11,519 --> 00:03:15,519
what we're going to do today

88
00:03:13,760 --> 00:03:18,560
and by the way if you've not seen lee

89
00:03:15,519 --> 00:03:19,920
holm's derby con talk from last year

90
00:03:18,560 --> 00:03:22,080
i would encourage you to check it out

91
00:03:19,920 --> 00:03:23,679
too because he tells the story of how we

92
00:03:22,080 --> 00:03:26,400
got to this point

93
00:03:23,680 --> 00:03:27,599
of uh wanting to make uh powershell a

94
00:03:26,400 --> 00:03:29,920
better world

95
00:03:27,599 --> 00:03:32,079
for everyone but that same year 2015

96
00:03:29,920 --> 00:03:34,000
powershell empire premiered at b-sides

97
00:03:32,080 --> 00:03:35,920
las vegas most likely this is in your

98
00:03:34,000 --> 00:03:38,720
daily toolkit

99
00:03:35,920 --> 00:03:40,480
powershell empire was a framework that

100
00:03:38,720 --> 00:03:42,720
would allow you as a plug-and-play

101
00:03:40,480 --> 00:03:43,280
framework that would allow you to extend

102
00:03:42,720 --> 00:03:46,319
it

103
00:03:43,280 --> 00:03:48,959
with additional toolkits and made it

104
00:03:46,319 --> 00:03:51,200
really easy and really turned powershell

105
00:03:48,959 --> 00:03:55,120
malware into a commodity

106
00:03:51,200 --> 00:03:56,640
and after that then we saw another blog

107
00:03:55,120 --> 00:03:58,720
post from the powershell team this was

108
00:03:56,640 --> 00:04:00,720
paul higginbotham and lee holmes

109
00:03:58,720 --> 00:04:02,000
talking about a comparison of shell and

110
00:04:00,720 --> 00:04:04,239
scripting languages

111
00:04:02,000 --> 00:04:06,560
proving that green bar across the middle

112
00:04:04,239 --> 00:04:09,519
that powershell is the most

113
00:04:06,560 --> 00:04:10,560
secure solution out there really when it

114
00:04:09,519 --> 00:04:14,080
comes to

115
00:04:10,560 --> 00:04:15,439
scripting languages and i'll talk about

116
00:04:14,080 --> 00:04:18,560
this a little bit later but in

117
00:04:15,439 --> 00:04:18,880
environments where uh leadership decides

118
00:04:18,560 --> 00:04:20,399
hey

119
00:04:18,880 --> 00:04:22,079
we need to turn off this powershell

120
00:04:20,399 --> 00:04:24,080
thing i heard it's bad and just shut it

121
00:04:22,079 --> 00:04:25,840
down across the entire environment

122
00:04:24,080 --> 00:04:28,000
what that's telling what really what

123
00:04:25,840 --> 00:04:31,440
that says is hey let's go

124
00:04:28,000 --> 00:04:33,840
use some other unsecure scripting or

125
00:04:31,440 --> 00:04:35,520
automation framework that we can't track

126
00:04:33,840 --> 00:04:37,359
so you don't want to do that you want to

127
00:04:35,520 --> 00:04:40,400
actually use powershell

128
00:04:37,360 --> 00:04:44,400
to your advantage in that way

129
00:04:40,400 --> 00:04:47,758
so and then 2017 uh matt graber

130
00:04:44,400 --> 00:04:48,799
a popular security researcher he says

131
00:04:47,759 --> 00:04:50,800
look

132
00:04:48,800 --> 00:04:52,560
because of this new logging it is so

133
00:04:50,800 --> 00:04:52,960
good i'm moving on to other language

134
00:04:52,560 --> 00:04:55,360
where

135
00:04:52,960 --> 00:04:57,359
they can't track me right and the

136
00:04:55,360 --> 00:04:59,120
industry kind of followed

137
00:04:57,360 --> 00:05:01,039
and the other point that he made there

138
00:04:59,120 --> 00:05:03,039
is look you can burn powershell with

139
00:05:01,039 --> 00:05:05,680
fire in your org but that doesn't

140
00:05:03,039 --> 00:05:06,400
bother me powershell is not the reason

141
00:05:05,680 --> 00:05:10,000
people get

142
00:05:06,400 --> 00:05:13,198
owned okay uh powershell is usually

143
00:05:10,000 --> 00:05:15,199
not the point of entry um maybe it's

144
00:05:13,199 --> 00:05:17,039
dropped in a phishing attack

145
00:05:15,199 --> 00:05:19,360
but it's not the point of entry

146
00:05:17,039 --> 00:05:21,759
typically and so that's what you need to

147
00:05:19,360 --> 00:05:24,880
keep in mind powershell itself is

148
00:05:21,759 --> 00:05:26,320
very secure but when people misuse it

149
00:05:24,880 --> 00:05:27,840
that's when it becomes

150
00:05:26,320 --> 00:05:29,360
a problem that's what we're going to

151
00:05:27,840 --> 00:05:33,198
talk about here

152
00:05:29,360 --> 00:05:35,199
so uh 2018 powershell core was released

153
00:05:33,199 --> 00:05:38,000
this is cross-platform windows mac and

154
00:05:35,199 --> 00:05:40,880
linux and it has

155
00:05:38,000 --> 00:05:42,080
the security policies built in that we

156
00:05:40,880 --> 00:05:45,360
used over

157
00:05:42,080 --> 00:05:47,039
on the windows side as well

158
00:05:45,360 --> 00:05:49,199
so those policies are still there we're

159
00:05:47,039 --> 00:05:51,919
going to walk through each of those

160
00:05:49,199 --> 00:05:53,360
last year the announcement came out by

161
00:05:51,919 --> 00:05:56,400
zawyer that powershell

162
00:05:53,360 --> 00:05:59,120
empire is officially dead and

163
00:05:56,400 --> 00:06:01,120
at the same time you saw a number of new

164
00:05:59,120 --> 00:06:04,160
tools emerge

165
00:06:01,120 --> 00:06:05,919
however there is another group that has

166
00:06:04,160 --> 00:06:07,840
obviously powershell empire is open

167
00:06:05,919 --> 00:06:10,719
source it's out on the web

168
00:06:07,840 --> 00:06:12,400
there's another group that's got a repo

169
00:06:10,720 --> 00:06:14,160
that they're continuing development on

170
00:06:12,400 --> 00:06:15,359
powershell empire but the original

171
00:06:14,160 --> 00:06:18,319
founders of it

172
00:06:15,360 --> 00:06:19,759
uh declared it dead but it's not dead

173
00:06:18,319 --> 00:06:21,520
because

174
00:06:19,759 --> 00:06:22,880
in the headlines every day of the week

175
00:06:21,520 --> 00:06:26,159
you can still read

176
00:06:22,880 --> 00:06:28,080
where powershell script is quite common

177
00:06:26,160 --> 00:06:29,520
in malware attacks today across the

178
00:06:28,080 --> 00:06:32,719
enterprise

179
00:06:29,520 --> 00:06:34,560
across the entire industry so

180
00:06:32,720 --> 00:06:36,080
because once it's out there it's out

181
00:06:34,560 --> 00:06:38,319
there and people are gonna lose

182
00:06:36,080 --> 00:06:40,240
the least path resistance and powershell

183
00:06:38,319 --> 00:06:42,560
malware is easy now

184
00:06:40,240 --> 00:06:43,520
to obtain and use with little training

185
00:06:42,560 --> 00:06:45,039
or effort

186
00:06:43,520 --> 00:06:47,280
so that's why we have to guard against

187
00:06:45,039 --> 00:06:48,800
it right also

188
00:06:47,280 --> 00:06:50,479
a lot of people are struggling just to

189
00:06:48,800 --> 00:06:51,759
identify malicious powershell and

190
00:06:50,479 --> 00:06:53,280
environment that's why i'm doing this

191
00:06:51,759 --> 00:06:54,479
session today i want you to know what

192
00:06:53,280 --> 00:06:57,758
tools you have at your

193
00:06:54,479 --> 00:06:59,599
disposal um this uh tweet by naked

194
00:06:57,759 --> 00:07:01,199
security said hey what if you could

195
00:06:59,599 --> 00:07:02,800
eliminate one file type on the network

196
00:07:01,199 --> 00:07:06,800
what would it be and

197
00:07:02,800 --> 00:07:08,479
the majority 34 said powershell ps1

198
00:07:06,800 --> 00:07:10,639
saying we need to eliminate that again

199
00:07:08,479 --> 00:07:12,880
that's the wrong mindset

200
00:07:10,639 --> 00:07:14,400
i want to teach you today how to monitor

201
00:07:12,880 --> 00:07:17,120
what's being done in powershell so you

202
00:07:14,400 --> 00:07:20,799
can use it to your advantage

203
00:07:17,120 --> 00:07:24,639
2020 this last january during the

204
00:07:20,800 --> 00:07:26,800
iran cyber attack concerns

205
00:07:24,639 --> 00:07:28,160
there was some guidance coming out of

206
00:07:26,800 --> 00:07:30,479
the u.s cert

207
00:07:28,160 --> 00:07:31,599
that was both helpful and not so helpful

208
00:07:30,479 --> 00:07:34,639
and one

209
00:07:31,599 --> 00:07:35,280
uh in this u.s cert bulletin on one side

210
00:07:34,639 --> 00:07:39,120
they said

211
00:07:35,280 --> 00:07:40,960
turn off bb script and power shell and

212
00:07:39,120 --> 00:07:43,039
turning off power shells really not the

213
00:07:40,960 --> 00:07:45,919
best thing you want to do like i said

214
00:07:43,039 --> 00:07:47,759
but then they did give you a list of

215
00:07:45,919 --> 00:07:49,520
recommendations for mitigation and

216
00:07:47,759 --> 00:07:52,160
detection that are all

217
00:07:49,520 --> 00:07:54,719
valid and lee holmes says look you know

218
00:07:52,160 --> 00:07:57,840
there's a lot better ways to do this

219
00:07:54,720 --> 00:07:59,120
powershell can be a great honeypot and

220
00:07:57,840 --> 00:08:01,198
so you don't want to

221
00:07:59,120 --> 00:08:03,440
turn it off entirely in the environment

222
00:08:01,199 --> 00:08:05,120
so even as recent as just this last

223
00:08:03,440 --> 00:08:06,479
january i know when i was investigating

224
00:08:05,120 --> 00:08:07,440
some of the methods used in these

225
00:08:06,479 --> 00:08:09,120
attacks

226
00:08:07,440 --> 00:08:10,639
they were literally just commodity

227
00:08:09,120 --> 00:08:13,440
powershell

228
00:08:10,639 --> 00:08:15,360
with a couple twists so it was really

229
00:08:13,440 --> 00:08:17,599
the emphasizing the reason why

230
00:08:15,360 --> 00:08:18,720
even though empire is dead we need to

231
00:08:17,599 --> 00:08:21,520
continue

232
00:08:18,720 --> 00:08:22,160
to uh investigate and monitor these

233
00:08:21,520 --> 00:08:25,120
techniques

234
00:08:22,160 --> 00:08:26,319
so uh as we get going here something you

235
00:08:25,120 --> 00:08:28,639
need to be aware of is there are

236
00:08:26,319 --> 00:08:31,759
different powershell editions now

237
00:08:28,639 --> 00:08:32,479
so there's windows powershell which is

238
00:08:31,759 --> 00:08:37,519
built in

239
00:08:32,479 --> 00:08:39,200
since windows 7 2008 r2 out of the box

240
00:08:37,519 --> 00:08:41,120
but you want to upgrade that if you've

241
00:08:39,200 --> 00:08:42,080
got old machines make sure you get them

242
00:08:41,120 --> 00:08:45,279
upgraded

243
00:08:42,080 --> 00:08:46,959
windows 10 ships with version 5.1 out of

244
00:08:45,279 --> 00:08:49,439
the box of windows

245
00:08:46,959 --> 00:08:50,959
powershell there okay being specific

246
00:08:49,440 --> 00:08:53,360
there for a reason

247
00:08:50,959 --> 00:08:54,000
that version of powershell was complete

248
00:08:53,360 --> 00:08:55,440
microsoft

249
00:08:54,000 --> 00:08:57,040
likes to say that means there's no new

250
00:08:55,440 --> 00:09:00,160
development going into it

251
00:08:57,040 --> 00:09:00,640
it's achieved a step stability level

252
00:09:00,160 --> 00:09:02,959
symbol

253
00:09:00,640 --> 00:09:04,240
similar to python 2.7 where there's not

254
00:09:02,959 --> 00:09:06,800
going to be

255
00:09:04,240 --> 00:09:08,560
a lot of develop any real development

256
00:09:06,800 --> 00:09:09,519
excel outside of bug fixes going into

257
00:09:08,560 --> 00:09:12,880
that

258
00:09:09,519 --> 00:09:16,560
and so powershell core then uh

259
00:09:12,880 --> 00:09:18,560
is started an open beta in 2016.

260
00:09:16,560 --> 00:09:19,599
but then it was released in 2018 now

261
00:09:18,560 --> 00:09:22,719
we're up to

262
00:09:19,600 --> 00:09:25,519
uh powershell core version 702

263
00:09:22,720 --> 00:09:27,920
as of this recording windows mac and

264
00:09:25,519 --> 00:09:28,560
linux you can see here in the screenshot

265
00:09:27,920 --> 00:09:30,959
you've got

266
00:09:28,560 --> 00:09:33,680
dollar ps version table will report to

267
00:09:30,959 --> 00:09:36,399
you the powershell edition

268
00:09:33,680 --> 00:09:37,599
and also the version and the platform

269
00:09:36,399 --> 00:09:38,880
that you're running on there are also

270
00:09:37,600 --> 00:09:42,240
some variables that will tell you

271
00:09:38,880 --> 00:09:42,560
am i running on linux mac os or windows

272
00:09:42,240 --> 00:09:45,839
here

273
00:09:42,560 --> 00:09:48,880
true or false so there's uh os awareness

274
00:09:45,839 --> 00:09:49,839
built into powershell core and when you

275
00:09:48,880 --> 00:09:53,040
install this oh

276
00:09:49,839 --> 00:09:55,760
that's also available on arm so i've run

277
00:09:53,040 --> 00:09:58,880
this on a raspberry pi as well

278
00:09:55,760 --> 00:10:01,920
back in 2016 when it launched so

279
00:09:58,880 --> 00:10:03,279
um pretty legit stuff you can actually

280
00:10:01,920 --> 00:10:05,439
do pwsh

281
00:10:03,279 --> 00:10:06,880
is your shell now you can run that on

282
00:10:05,440 --> 00:10:08,720
windows mac and linux i

283
00:10:06,880 --> 00:10:11,279
drive a mac every day for work and i use

284
00:10:08,720 --> 00:10:13,360
powershell

285
00:10:11,279 --> 00:10:14,320
quite frequently i wouldn't say every

286
00:10:13,360 --> 00:10:16,480
day but

287
00:10:14,320 --> 00:10:18,079
at least weekly i'm using powershell on

288
00:10:16,480 --> 00:10:21,519
my mac

289
00:10:18,079 --> 00:10:23,920
for you know processing json files and

290
00:10:21,519 --> 00:10:24,640
different things like that automating

291
00:10:23,920 --> 00:10:28,000
tasks

292
00:10:24,640 --> 00:10:30,160
so this is open source now powershell

293
00:10:28,000 --> 00:10:33,200
core you can go out to github powershell

294
00:10:30,160 --> 00:10:35,519
powershell and they also have a

295
00:10:33,200 --> 00:10:37,519
third third thursday of every month an

296
00:10:35,519 --> 00:10:39,200
open powershell community call go check

297
00:10:37,519 --> 00:10:40,399
it out you can actually get to interact

298
00:10:39,200 --> 00:10:42,959
directly with the

299
00:10:40,399 --> 00:10:44,800
product team at microsoft who's in

300
00:10:42,959 --> 00:10:45,680
charge of powershell i would encourage

301
00:10:44,800 --> 00:10:47,279
that

302
00:10:45,680 --> 00:10:50,000
so let's talk about how to do powershell

303
00:10:47,279 --> 00:10:53,519
security again so that's the background

304
00:10:50,000 --> 00:10:54,560
how we got here it's a new field we've

305
00:10:53,519 --> 00:10:57,519
got

306
00:10:54,560 --> 00:10:58,239
multiple types of powershell editions

307
00:10:57,519 --> 00:11:00,240
now

308
00:10:58,240 --> 00:11:02,240
not just windows anymore to be concerned

309
00:11:00,240 --> 00:11:04,079
with and one of the things

310
00:11:02,240 --> 00:11:05,360
about that that you need to be aware of

311
00:11:04,079 --> 00:11:07,279
is they can have what they call

312
00:11:05,360 --> 00:11:10,399
powershell upgrade attacks as well as

313
00:11:07,279 --> 00:11:13,040
downgrade attacks so powershell v2

314
00:11:10,399 --> 00:11:15,160
on windows 7 did not have the logging

315
00:11:13,040 --> 00:11:18,880
we're about to talk about

316
00:11:15,160 --> 00:11:21,519
pwsh the new powershell core edition

317
00:11:18,880 --> 00:11:22,640
most likely has slipped under the radar

318
00:11:21,519 --> 00:11:24,640
and doesn't have

319
00:11:22,640 --> 00:11:26,079
logging configured either so you want to

320
00:11:24,640 --> 00:11:27,600
make sure logging is configured

321
00:11:26,079 --> 00:11:29,680
everywhere that you've got powershell

322
00:11:27,600 --> 00:11:32,880
enabled so how do we do that

323
00:11:29,680 --> 00:11:34,719
so powershell hygiene strategy is going

324
00:11:32,880 --> 00:11:36,480
to include number one making sure

325
00:11:34,720 --> 00:11:38,800
all your older machines have at least

326
00:11:36,480 --> 00:11:40,720
powershell five one on them

327
00:11:38,800 --> 00:11:43,279
uh so that's your baseline for your

328
00:11:40,720 --> 00:11:44,160
older windows 7 2008 r2 servers all

329
00:11:43,279 --> 00:11:46,880
right

330
00:11:44,160 --> 00:11:48,880
even your 2012 2012 r2 get them all up

331
00:11:46,880 --> 00:11:51,360
the windows powershell 51

332
00:11:48,880 --> 00:11:52,079
and then there is an os feature for the

333
00:11:51,360 --> 00:11:54,240
v2

334
00:11:52,079 --> 00:11:55,359
engine you can disable that you don't

335
00:11:54,240 --> 00:11:56,720
need it

336
00:11:55,360 --> 00:11:58,800
and then what we're going to focus on

337
00:11:56,720 --> 00:12:00,079
primarily today is implementing and

338
00:11:58,800 --> 00:12:02,479
monitoring

339
00:12:00,079 --> 00:12:04,079
the logging and transcription which is

340
00:12:02,480 --> 00:12:06,160
turning on the black light so to speak

341
00:12:04,079 --> 00:12:10,160
so you can see what's happening

342
00:12:06,160 --> 00:12:11,040
but you also want to use remoting to

343
00:12:10,160 --> 00:12:13,920
your advantage

344
00:12:11,040 --> 00:12:14,560
enable that is that's uses all the

345
00:12:13,920 --> 00:12:17,199
windows

346
00:12:14,560 --> 00:12:18,160
permissions and protections but also

347
00:12:17,200 --> 00:12:20,560
don't forget that

348
00:12:18,160 --> 00:12:21,439
in your firewall rules and windows you

349
00:12:20,560 --> 00:12:25,119
can then

350
00:12:21,440 --> 00:12:28,079
allow one rm port 5985

351
00:12:25,120 --> 00:12:28,079
specifically

352
00:12:28,320 --> 00:12:33,440
requiring that to certain

353
00:12:31,519 --> 00:12:34,959
firewall destinations right certain ip

354
00:12:33,440 --> 00:12:37,360
ranges whatever so you can

355
00:12:34,959 --> 00:12:38,239
restrict remoting and there's even tools

356
00:12:37,360 --> 00:12:40,639
within

357
00:12:38,240 --> 00:12:41,440
powershell to as restrict promoting

358
00:12:40,639 --> 00:12:43,360
further

359
00:12:41,440 --> 00:12:44,480
and then actually get to the blocking

360
00:12:43,360 --> 00:12:46,480
phase

361
00:12:44,480 --> 00:12:48,320
uh you would use app locker device guard

362
00:12:46,480 --> 00:12:50,880
or out of the box ampsy

363
00:12:48,320 --> 00:12:52,720
and also be careful with amc because if

364
00:12:50,880 --> 00:12:53,920
you're using if you're not using windows

365
00:12:52,720 --> 00:12:56,959
defender

366
00:12:53,920 --> 00:12:59,439
not all windows av

367
00:12:56,959 --> 00:13:01,839
products will tie into amc that's the

368
00:12:59,440 --> 00:13:04,160
anti-malware scan interface

369
00:13:01,839 --> 00:13:05,760
it's working for you every day and yes

370
00:13:04,160 --> 00:13:07,360
there are bypasses for everything i'm

371
00:13:05,760 --> 00:13:10,000
going to talk about today

372
00:13:07,360 --> 00:13:12,240
but a layered defense is your best

373
00:13:10,000 --> 00:13:15,279
strategy

374
00:13:12,240 --> 00:13:16,959
so feature matrix basically

375
00:13:15,279 --> 00:13:18,480
what i wanted to mention here i've kind

376
00:13:16,959 --> 00:13:21,680
of covered most of this

377
00:13:18,480 --> 00:13:22,480
the main point here is that uh the

378
00:13:21,680 --> 00:13:24,638
windows

379
00:13:22,480 --> 00:13:25,680
uh logging and transcription i'm going

380
00:13:24,639 --> 00:13:28,480
to talk about today

381
00:13:25,680 --> 00:13:30,319
are built-in on windows 10 and above

382
00:13:28,480 --> 00:13:33,600
server 2016 and above

383
00:13:30,320 --> 00:13:36,320
and powershell core when you install it

384
00:13:33,600 --> 00:13:37,760
however you have to enable the logging

385
00:13:36,320 --> 00:13:39,199
there's an additional

386
00:13:37,760 --> 00:13:40,959
step that you have to take and that's

387
00:13:39,199 --> 00:13:43,839
what i'll make make sure you take away

388
00:13:40,959 --> 00:13:46,000
today so upgrade your stuff

389
00:13:43,839 --> 00:13:48,320
so real quick we're going to go through

390
00:13:46,000 --> 00:13:51,199
these in a demo in a second but module

391
00:13:48,320 --> 00:13:55,199
logging is also known as

392
00:13:51,199 --> 00:13:58,479
pipeline execution or execution logging

393
00:13:55,199 --> 00:14:01,359
and so you're going to see module

394
00:13:58,480 --> 00:14:02,800
commands in powershell the parameter

395
00:14:01,360 --> 00:14:05,920
binding that happens

396
00:14:02,800 --> 00:14:07,519
as they're executed in the logs script

397
00:14:05,920 --> 00:14:10,800
block logging you're going to see

398
00:14:07,519 --> 00:14:11,360
whole blocks of code as they're executed

399
00:14:10,800 --> 00:14:14,479
appear

400
00:14:11,360 --> 00:14:16,800
in the logs transcription is literally a

401
00:14:14,480 --> 00:14:17,760
text file output of what commands were

402
00:14:16,800 --> 00:14:21,359
run

403
00:14:17,760 --> 00:14:23,040
and what output was generated and that

404
00:14:21,360 --> 00:14:25,279
all all of these techniques that i'm

405
00:14:23,040 --> 00:14:27,599
explaining to you those first three

406
00:14:25,279 --> 00:14:29,279
all work on code that was interactively

407
00:14:27,600 --> 00:14:31,440
typed or run in memory

408
00:14:29,279 --> 00:14:34,240
from an administrative tool or a hacking

409
00:14:31,440 --> 00:14:36,000
tool anywhere that code executes it's

410
00:14:34,240 --> 00:14:38,240
going to be logged

411
00:14:36,000 --> 00:14:40,639
and then ps readline command history is

412
00:14:38,240 --> 00:14:42,480
uh ps readline is a module that comes

413
00:14:40,639 --> 00:14:44,480
out of the box with powershell

414
00:14:42,480 --> 00:14:46,639
and it basically gives windows folks a

415
00:14:44,480 --> 00:14:48,560
unix like command history experience

416
00:14:46,639 --> 00:14:51,600
that's persistent between sessions

417
00:14:48,560 --> 00:14:53,439
so you can look at that file to see what

418
00:14:51,600 --> 00:14:55,199
interactively type commands could have

419
00:14:53,440 --> 00:14:56,800
been malicious as well

420
00:14:55,199 --> 00:14:59,680
and then finally we've talked about

421
00:14:56,800 --> 00:15:02,000
anti-malware scan interface

422
00:14:59,680 --> 00:15:03,359
so i'm putting this chart in here for

423
00:15:02,000 --> 00:15:05,120
your reference i don't want to get into

424
00:15:03,360 --> 00:15:06,560
the details here too much and for the

425
00:15:05,120 --> 00:15:09,040
sake of time we're going to do this

426
00:15:06,560 --> 00:15:09,760
in the demo shortly but suffice it to

427
00:15:09,040 --> 00:15:13,760
say there are

428
00:15:09,760 --> 00:15:16,959
multiple windows event log log locations

429
00:15:13,760 --> 00:15:21,120
as well as syslog if you're doing uh

430
00:15:16,959 --> 00:15:23,760
powershell core on mac and linux

431
00:15:21,120 --> 00:15:25,040
and so there are paths here you can see

432
00:15:23,760 --> 00:15:26,880
where the policies defined for

433
00:15:25,040 --> 00:15:30,000
transcription in the registry

434
00:15:26,880 --> 00:15:32,320
which window windows logs you want to

435
00:15:30,000 --> 00:15:33,360
monitor and which event ids you want to

436
00:15:32,320 --> 00:15:36,160
look for

437
00:15:33,360 --> 00:15:37,600
to see where those things are popping in

438
00:15:36,160 --> 00:15:40,880
your environment

439
00:15:37,600 --> 00:15:43,680
so policies on windows using group

440
00:15:40,880 --> 00:15:46,079
policy you can set these policies

441
00:15:43,680 --> 00:15:46,800
under administrative templates for

442
00:15:46,079 --> 00:15:48,880
windows

443
00:15:46,800 --> 00:15:50,240
on both the user computer side obviously

444
00:15:48,880 --> 00:15:52,320
it only makes sense to set this on the

445
00:15:50,240 --> 00:15:55,759
computer side for all users

446
00:15:52,320 --> 00:15:57,920
in the group policy you go and set those

447
00:15:55,759 --> 00:15:59,519
and then you'll see there this is a

448
00:15:57,920 --> 00:16:00,800
little local version of group policy

449
00:15:59,519 --> 00:16:03,199
editor here

450
00:16:00,800 --> 00:16:05,040
but um sometimes active directory

451
00:16:03,199 --> 00:16:07,839
environments are complicated

452
00:16:05,040 --> 00:16:09,759
you've got non-domain machines and so if

453
00:16:07,839 --> 00:16:10,880
you want to automate this at scale you

454
00:16:09,759 --> 00:16:14,079
can simply just

455
00:16:10,880 --> 00:16:17,839
run a rich script that will drop

456
00:16:14,079 --> 00:16:19,758
the registry values into the policy path

457
00:16:17,839 --> 00:16:22,560
under hkey local machine software

458
00:16:19,759 --> 00:16:24,720
policies microsoft windows powershell

459
00:16:22,560 --> 00:16:26,959
and then these different module logging

460
00:16:24,720 --> 00:16:28,639
script block logging transcription

461
00:16:26,959 --> 00:16:30,319
so i've got some scripts that'll help

462
00:16:28,639 --> 00:16:33,600
you with that in a little bit here

463
00:16:30,320 --> 00:16:36,800
so group policy in the registry

464
00:16:33,600 --> 00:16:38,880
or through the gui tool

465
00:16:36,800 --> 00:16:40,959
powershell core now i want to be careful

466
00:16:38,880 --> 00:16:43,839
as i was looking at this in my lab

467
00:16:40,959 --> 00:16:45,599
over the last few months i noticed that

468
00:16:43,839 --> 00:16:46,639
when you install powershell core on

469
00:16:45,600 --> 00:16:49,519
windows

470
00:16:46,639 --> 00:16:51,440
this is not a thing on linux or mac but

471
00:16:49,519 --> 00:16:53,120
on windows specifically

472
00:16:51,440 --> 00:16:55,519
you have to make sure whether you're

473
00:16:53,120 --> 00:16:58,800
doing the gui install

474
00:16:55,519 --> 00:17:01,360
or the uh behind the scenes msi package

475
00:16:58,800 --> 00:17:03,599
command lines this is all documented

476
00:17:01,360 --> 00:17:05,199
in a link out of microsoft on how to

477
00:17:03,600 --> 00:17:06,880
install powershell

478
00:17:05,199 --> 00:17:09,360
but you want to be careful that you make

479
00:17:06,880 --> 00:17:12,240
sure you register the event log manifest

480
00:17:09,359 --> 00:17:14,159
when you look in the ps home directory

481
00:17:12,240 --> 00:17:16,559
you'll see a powershell core

482
00:17:14,160 --> 00:17:20,480
instrumentation dll

483
00:17:16,559 --> 00:17:22,240
and the install powershell remoting

484
00:17:20,480 --> 00:17:24,079
install ps core configuration

485
00:17:22,240 --> 00:17:24,799
definitions policy definitions and

486
00:17:24,079 --> 00:17:27,359
register

487
00:17:24,799 --> 00:17:29,200
manifest those scripts are called when

488
00:17:27,359 --> 00:17:31,439
you check these boxes over here in the

489
00:17:29,200 --> 00:17:34,400
install or supply these flags

490
00:17:31,440 --> 00:17:34,880
make sure if you're deploying powershell

491
00:17:34,400 --> 00:17:37,919
core

492
00:17:34,880 --> 00:17:39,840
in your enterprise that you enable that

493
00:17:37,919 --> 00:17:41,919
because that's going to give you the

494
00:17:39,840 --> 00:17:43,039
event log that we're going to look at in

495
00:17:41,919 --> 00:17:46,160
a minute for

496
00:17:43,039 --> 00:17:47,039
powershell core so what does that look

497
00:17:46,160 --> 00:17:51,039
like

498
00:17:47,039 --> 00:17:52,160
in policy then how do i set the policies

499
00:17:51,039 --> 00:17:54,879
for powershell core

500
00:17:52,160 --> 00:17:55,600
all right let's talk the windows first

501
00:17:54,880 --> 00:17:58,480
so

502
00:17:55,600 --> 00:18:00,159
in the ps home directory you'll see

503
00:17:58,480 --> 00:18:02,799
there are

504
00:18:00,160 --> 00:18:04,720
there's a script install ps core policy

505
00:18:02,799 --> 00:18:07,600
definition which has an admx

506
00:18:04,720 --> 00:18:08,480
group policy template that group policy

507
00:18:07,600 --> 00:18:11,918
template then will

508
00:18:08,480 --> 00:18:12,960
add now notice this is no longer windows

509
00:18:11,919 --> 00:18:15,039
powershell

510
00:18:12,960 --> 00:18:16,960
this is powershell core so they've

511
00:18:15,039 --> 00:18:19,600
dropped the windows name

512
00:18:16,960 --> 00:18:20,080
and so now you have a second location

513
00:18:19,600 --> 00:18:22,719
for

514
00:18:20,080 --> 00:18:24,559
policies in group policy management

515
00:18:22,720 --> 00:18:26,640
called powershell core

516
00:18:24,559 --> 00:18:29,360
with settings that you can apply that

517
00:18:26,640 --> 00:18:32,240
look identical with one exception

518
00:18:29,360 --> 00:18:33,120
if you already have the policy set for

519
00:18:32,240 --> 00:18:35,919
windows

520
00:18:33,120 --> 00:18:37,678
powershell you can simply check a box in

521
00:18:35,919 --> 00:18:39,440
each one of these to use the windows

522
00:18:37,679 --> 00:18:41,520
powershell policy setting

523
00:18:39,440 --> 00:18:42,960
so it would mirror whatever settings you

524
00:18:41,520 --> 00:18:46,240
had configured

525
00:18:42,960 --> 00:18:48,400
on the windows powershell policy side

526
00:18:46,240 --> 00:18:50,080
i know that might be confusing re-watch

527
00:18:48,400 --> 00:18:51,039
the video a couple times if it needs to

528
00:18:50,080 --> 00:18:53,520
sink in but

529
00:18:51,039 --> 00:18:55,520
there's now two places for policy

530
00:18:53,520 --> 00:18:56,320
configuration because it's no longer

531
00:18:55,520 --> 00:18:58,879
windows

532
00:18:56,320 --> 00:19:01,200
powershells powershell core got a

533
00:18:58,880 --> 00:19:03,520
separate place in the registry

534
00:19:01,200 --> 00:19:04,720
and a separate place in group policy so

535
00:19:03,520 --> 00:19:07,600
now under

536
00:19:04,720 --> 00:19:09,760
policies microsoft powershell core we'll

537
00:19:07,600 --> 00:19:11,520
see some of those same settings in the

538
00:19:09,760 --> 00:19:14,080
registry as well

539
00:19:11,520 --> 00:19:15,918
now if you're doing this on mac os or

540
00:19:14,080 --> 00:19:17,760
linux and you can even do it this way on

541
00:19:15,919 --> 00:19:20,240
windows powershell as well

542
00:19:17,760 --> 00:19:21,120
again in the ps home dollar ps home

543
00:19:20,240 --> 00:19:24,840
directory

544
00:19:21,120 --> 00:19:26,159
you look for json files and there's a

545
00:19:24,840 --> 00:19:28,240
powershell.config.json

546
00:19:26,160 --> 00:19:29,760
if the file is not there most likely you

547
00:19:28,240 --> 00:19:32,360
can create it

548
00:19:29,760 --> 00:19:34,480
and so then in that

549
00:19:32,360 --> 00:19:36,639
powershell.config.json file

550
00:19:34,480 --> 00:19:39,280
you can provide these settings which

551
00:19:36,640 --> 00:19:41,679
will be in the slide notes later for you

552
00:19:39,280 --> 00:19:43,280
and so this is json saying hey turn on

553
00:19:41,679 --> 00:19:46,320
script block logging

554
00:19:43,280 --> 00:19:48,160
turn on module logging for all modules

555
00:19:46,320 --> 00:19:50,480
turn on transcription and write it out

556
00:19:48,160 --> 00:19:51,600
to this var temp directory which is a

557
00:19:50,480 --> 00:19:53,600
persistent attempt

558
00:19:51,600 --> 00:19:55,039
right that's important there if you

559
00:19:53,600 --> 00:19:55,600
write it make sure you write it to the

560
00:19:55,039 --> 00:19:57,760
correct

561
00:19:55,600 --> 00:19:59,520
temp directory that will be persistent

562
00:19:57,760 --> 00:20:01,120
all right so you can turn on those

563
00:19:59,520 --> 00:20:03,760
policies on

564
00:20:01,120 --> 00:20:04,719
other powershell core as well now i

565
00:20:03,760 --> 00:20:06,720
tweeted this

566
00:20:04,720 --> 00:20:08,559
screenshot back in december as i was

567
00:20:06,720 --> 00:20:10,559
looking with the preview

568
00:20:08,559 --> 00:20:12,158
on powershell 7 but it basically kind of

569
00:20:10,559 --> 00:20:12,720
puts it all together on a windows

570
00:20:12,159 --> 00:20:15,280
machine

571
00:20:12,720 --> 00:20:16,240
using the json powershell config so

572
00:20:15,280 --> 00:20:18,399
under

573
00:20:16,240 --> 00:20:21,120
program files powershell now just slash

574
00:20:18,400 --> 00:20:23,520
7 no preview see your powershell config

575
00:20:21,120 --> 00:20:25,199
json file it's got these policy settings

576
00:20:23,520 --> 00:20:27,120
in the json

577
00:20:25,200 --> 00:20:29,679
you run your malicious powershell

578
00:20:27,120 --> 00:20:31,600
command here as an encoded command

579
00:20:29,679 --> 00:20:32,720
and what you see behind you is in the

580
00:20:31,600 --> 00:20:34,639
event log

581
00:20:32,720 --> 00:20:36,559
you can see the plain text of the

582
00:20:34,640 --> 00:20:37,120
command that was executed behind the

583
00:20:36,559 --> 00:20:40,158
scenes

584
00:20:37,120 --> 00:20:43,520
behind that encoded command

585
00:20:40,159 --> 00:20:46,720
as event 4103 or 4104

586
00:20:43,520 --> 00:20:49,440
then in the ps transcripts directory i

587
00:20:46,720 --> 00:20:50,240
open up the date stamped folder and in

588
00:20:49,440 --> 00:20:53,039
there i'll see

589
00:20:50,240 --> 00:20:54,640
files which will have a full transcript

590
00:20:53,039 --> 00:20:58,158
of the command

591
00:20:54,640 --> 00:21:02,000
the user it was run under the process id

592
00:20:58,159 --> 00:21:03,679
all that good juicy forensic data that

593
00:21:02,000 --> 00:21:06,080
you would need to investigate a

594
00:21:03,679 --> 00:21:06,880
powershell attack it's all there this is

595
00:21:06,080 --> 00:21:09,360
powershell

596
00:21:06,880 --> 00:21:11,679
core but the same thing applies to

597
00:21:09,360 --> 00:21:14,158
windows powershell

598
00:21:11,679 --> 00:21:15,440
same logs you're going to look for

599
00:21:14,159 --> 00:21:17,600
except the location

600
00:21:15,440 --> 00:21:18,960
and the registry is going or the event

601
00:21:17,600 --> 00:21:20,959
viewer is going to be slightly different

602
00:21:18,960 --> 00:21:23,919
we'll take a look at that

603
00:21:20,960 --> 00:21:26,159
so uh pro tip here when you're making

604
00:21:23,919 --> 00:21:30,000
changes to powershell policy

605
00:21:26,159 --> 00:21:32,400
you need to make sure that

606
00:21:30,000 --> 00:21:34,320
you log out of your powershell session

607
00:21:32,400 --> 00:21:37,280
and open a fresh one

608
00:21:34,320 --> 00:21:37,678
because uh powershell policy settings

609
00:21:37,280 --> 00:21:40,639
are

610
00:21:37,679 --> 00:21:42,640
cached in the powershell session when

611
00:21:40,640 --> 00:21:45,440
it's created in memory

612
00:21:42,640 --> 00:21:46,880
when it's instantiated so if you're

613
00:21:45,440 --> 00:21:48,320
changing powershell policy

614
00:21:46,880 --> 00:21:50,880
settings and you're not seeing the

615
00:21:48,320 --> 00:21:52,879
logging happen the way you expect it to

616
00:21:50,880 --> 00:21:54,960
it's probably because you need to exit

617
00:21:52,880 --> 00:21:57,679
that powershell session

618
00:21:54,960 --> 00:21:59,840
and then come back into it and then as

619
00:21:57,679 --> 00:22:00,960
you make changes you'll see that hit the

620
00:21:59,840 --> 00:22:03,678
logs

621
00:22:00,960 --> 00:22:05,440
so that's one important thing as you're

622
00:22:03,679 --> 00:22:06,720
working with this you need to be aware

623
00:22:05,440 --> 00:22:10,080
of so

624
00:22:06,720 --> 00:22:12,480
let's do some demos here so let's take a

625
00:22:10,080 --> 00:22:15,120
look here at windows powershell

626
00:22:12,480 --> 00:22:16,400
so here i am on a windows box i've got

627
00:22:15,120 --> 00:22:19,678
the

628
00:22:16,400 --> 00:22:21,520
windows powershell command

629
00:22:19,679 --> 00:22:23,200
environment and i've also got the

630
00:22:21,520 --> 00:22:26,400
powershell

631
00:22:23,200 --> 00:22:28,559
core that i'll spin up here so here in

632
00:22:26,400 --> 00:22:31,840
windows powershell

633
00:22:28,559 --> 00:22:35,918
i can type things like get process

634
00:22:31,840 --> 00:22:39,439
right id 0

635
00:22:35,919 --> 00:22:41,200
and there's our idle process all right

636
00:22:39,440 --> 00:22:43,440
run commands you know whatever you want

637
00:22:41,200 --> 00:22:46,880
to do and let's go

638
00:22:43,440 --> 00:22:50,400
grab a malicious uh powershell

639
00:22:46,880 --> 00:22:51,760
encoded command here and what we'll do

640
00:22:50,400 --> 00:22:54,000
is i'm going to drop this into the

641
00:22:51,760 --> 00:22:56,879
command prompt and i'm going to run

642
00:22:54,000 --> 00:22:59,360
it both as powershell which uses the

643
00:22:56,880 --> 00:23:02,640
powershell engine

644
00:22:59,360 --> 00:23:04,918
oh look it changed my font size

645
00:23:02,640 --> 00:23:06,640
and then i'm also going to run it with a

646
00:23:04,919 --> 00:23:10,000
pwsh

647
00:23:06,640 --> 00:23:13,280
which is the exact same um

648
00:23:10,000 --> 00:23:17,440
kind of syntax here

649
00:23:13,280 --> 00:23:20,879
as let's see get that in there

650
00:23:17,440 --> 00:23:23,440
all right so demo

651
00:23:20,880 --> 00:23:24,320
fail let's pull up a fresh command

652
00:23:23,440 --> 00:23:28,000
prompt here

653
00:23:24,320 --> 00:23:29,918
there we go and let's uh paste that guy

654
00:23:28,000 --> 00:23:33,280
in

655
00:23:29,919 --> 00:23:36,480
come on edit

656
00:23:33,280 --> 00:23:39,600
and paste oh well

657
00:23:36,480 --> 00:23:40,240
let's try this one last time here there

658
00:23:39,600 --> 00:23:43,600
it is

659
00:23:40,240 --> 00:23:45,120
there's my uh powershell core so what

660
00:23:43,600 --> 00:23:46,080
we've done is we've done an encoded

661
00:23:45,120 --> 00:23:48,799
command

662
00:23:46,080 --> 00:23:50,240
we cannot see if you're using command

663
00:23:48,799 --> 00:23:51,679
line logging all you would see is the

664
00:23:50,240 --> 00:23:53,679
encoded command you wouldn't know what

665
00:23:51,679 --> 00:23:55,840
was in there it's base64

666
00:23:53,679 --> 00:23:57,440
you decode the base64 but then it could

667
00:23:55,840 --> 00:23:58,799
still be obfuscated

668
00:23:57,440 --> 00:24:01,039
so this is going to show you what

669
00:23:58,799 --> 00:24:01,918
happens in memory all right so we've run

670
00:24:01,039 --> 00:24:07,360
it in both

671
00:24:01,919 --> 00:24:07,360
powershell core pwsh and in powershell

672
00:24:07,440 --> 00:24:11,679
so we've introduced some malicious code

673
00:24:09,679 --> 00:24:15,279
let's go take a look

674
00:24:11,679 --> 00:24:16,159
so you'll notice here in the registry we

675
00:24:15,279 --> 00:24:18,799
have the

676
00:24:16,159 --> 00:24:20,000
windows policy set for example

677
00:24:18,799 --> 00:24:24,879
transcription

678
00:24:20,000 --> 00:24:28,640
script block logging module logging

679
00:24:24,880 --> 00:24:30,960
and then up here under powershell core

680
00:24:28,640 --> 00:24:31,679
we have module logging script block

681
00:24:30,960 --> 00:24:34,960
logging

682
00:24:31,679 --> 00:24:35,679
and transcription turned on so those are

683
00:24:34,960 --> 00:24:39,440
turned on

684
00:24:35,679 --> 00:24:40,799
now we can go look and see where they

685
00:24:39,440 --> 00:24:43,760
occur but let's

686
00:24:40,799 --> 00:24:45,039
let's take a look also at a couple other

687
00:24:43,760 --> 00:24:49,520
freebies we get

688
00:24:45,039 --> 00:24:52,400
here so if i type invoke mimicats

689
00:24:49,520 --> 00:24:54,080
on a windows 10 box see this script

690
00:24:52,400 --> 00:24:56,159
contains malicious content has been

691
00:24:54,080 --> 00:24:57,918
blocked by your antivirus software

692
00:24:56,159 --> 00:25:00,080
i want to point out something if you

693
00:24:57,919 --> 00:25:02,400
don't see this message

694
00:25:00,080 --> 00:25:03,279
that has been blocked as malicious that

695
00:25:02,400 --> 00:25:05,840
means that

696
00:25:03,279 --> 00:25:08,400
anti-malware scan interface or ampsy is

697
00:25:05,840 --> 00:25:11,039
not enabled on your machine

698
00:25:08,400 --> 00:25:13,279
certain third-party av if you disable

699
00:25:11,039 --> 00:25:15,120
defender you're disabling ampsy

700
00:25:13,279 --> 00:25:18,000
and you're opening yourself up to this

701
00:25:15,120 --> 00:25:21,199
basic protection built into windows 10

702
00:25:18,000 --> 00:25:24,320
be sure that your av

703
00:25:21,200 --> 00:25:25,520
provider supports amsi for that reason

704
00:25:24,320 --> 00:25:28,799
alone

705
00:25:25,520 --> 00:25:31,279
so invoke me cats is there

706
00:25:28,799 --> 00:25:33,279
but it there's no command on that

707
00:25:31,279 --> 00:25:34,960
command has no module installed on the

708
00:25:33,279 --> 00:25:36,799
machine but just the name of that

709
00:25:34,960 --> 00:25:38,320
command is popular enough that it knows

710
00:25:36,799 --> 00:25:40,400
to block it

711
00:25:38,320 --> 00:25:43,600
i also want to show you a ps readline

712
00:25:40,400 --> 00:25:45,919
history so if i say get module

713
00:25:43,600 --> 00:25:48,240
see what we've got notice ps read line

714
00:25:45,919 --> 00:25:49,520
module is loaded in the background by

715
00:25:48,240 --> 00:25:52,640
default

716
00:25:49,520 --> 00:25:53,279
it includes some commands get ps read

717
00:25:52,640 --> 00:25:57,520
line

718
00:25:53,279 --> 00:25:58,240
option and we can see the options for ps

719
00:25:57,520 --> 00:26:01,360
redline

720
00:25:58,240 --> 00:26:04,240
which include how many

721
00:26:01,360 --> 00:26:05,600
history commands to remember and where

722
00:26:04,240 --> 00:26:07,520
am i going to stick this

723
00:26:05,600 --> 00:26:09,199
and the thing i like about this is it

724
00:26:07,520 --> 00:26:11,918
puts it in the user's

725
00:26:09,200 --> 00:26:14,640
app data path on windows it puts it in

726
00:26:11,919 --> 00:26:17,200
another location on mac and linux

727
00:26:14,640 --> 00:26:20,320
but here it's in my app data path so now

728
00:26:17,200 --> 00:26:23,039
i have a console history session

729
00:26:20,320 --> 00:26:24,080
of every interactively typed command in

730
00:26:23,039 --> 00:26:26,158
powershell now

731
00:26:24,080 --> 00:26:28,879
be aware it's easy to just unload the

732
00:26:26,159 --> 00:26:31,200
module when you start your session okay

733
00:26:28,880 --> 00:26:33,039
if you're malicious you may do that but

734
00:26:31,200 --> 00:26:34,799
most everyday users wouldn't know to do

735
00:26:33,039 --> 00:26:35,840
that so it's going to record anything

736
00:26:34,799 --> 00:26:39,520
that they do

737
00:26:35,840 --> 00:26:41,439
so what i can do then is i can say

738
00:26:39,520 --> 00:26:43,279
get content which is the powershell

739
00:26:41,440 --> 00:26:46,559
version of cat

740
00:26:43,279 --> 00:26:49,679
and i can tell it to use get ps read

741
00:26:46,559 --> 00:26:53,200
line option

742
00:26:49,679 --> 00:26:55,360
history say path

743
00:26:53,200 --> 00:26:57,200
so it pulls in the path it opens the

744
00:26:55,360 --> 00:26:58,959
file and shows me all the commands that

745
00:26:57,200 --> 00:27:00,960
were interactively typed

746
00:26:58,960 --> 00:27:03,279
on that machine there's the commands

747
00:27:00,960 --> 00:27:07,440
that we just typed a few minutes ago

748
00:27:03,279 --> 00:27:08,080
all right so that is the only problem

749
00:27:07,440 --> 00:27:10,480
with this

750
00:27:08,080 --> 00:27:12,320
file however is there's no date stamping

751
00:27:10,480 --> 00:27:14,720
on the commands that were run

752
00:27:12,320 --> 00:27:16,799
so it is a fingerprint location you can

753
00:27:14,720 --> 00:27:18,880
look for powershell activity

754
00:27:16,799 --> 00:27:20,080
just know there's no date stamping in

755
00:27:18,880 --> 00:27:22,720
there

756
00:27:20,080 --> 00:27:24,720
so that's running commands on the

757
00:27:22,720 --> 00:27:28,000
powershell side

758
00:27:24,720 --> 00:27:29,919
so then over here in

759
00:27:28,000 --> 00:27:31,440
core i can do the exact same thing we

760
00:27:29,919 --> 00:27:33,520
just did there

761
00:27:31,440 --> 00:27:34,480
now let's go take a look under ps

762
00:27:33,520 --> 00:27:37,918
transcripts

763
00:27:34,480 --> 00:27:40,960
here let's start with the ps transcript

764
00:27:37,919 --> 00:27:42,880
and today's date and

765
00:27:40,960 --> 00:27:45,679
notice here there's a number of

766
00:27:42,880 --> 00:27:47,360
transcript files

767
00:27:45,679 --> 00:27:49,679
let's pick one and see if we got the

768
00:27:47,360 --> 00:27:54,240
right thing there it is yep

769
00:27:49,679 --> 00:27:54,240
so if we go in here and we zoom in

770
00:27:55,120 --> 00:28:00,719
let's zoom in and let's take a look

771
00:27:58,320 --> 00:28:02,000
here's a powershell transcript file that

772
00:28:00,720 --> 00:28:05,200
shows me

773
00:28:02,000 --> 00:28:07,039
date time it was run the user context

774
00:28:05,200 --> 00:28:09,840
and if it's a remoting session it will

775
00:28:07,039 --> 00:28:13,279
tell me the user id it was run under

776
00:28:09,840 --> 00:28:15,678
tells me the windows computer name

777
00:28:13,279 --> 00:28:17,600
the in this case the host application is

778
00:28:15,679 --> 00:28:20,240
the encoded command

779
00:28:17,600 --> 00:28:21,039
it shows me the process id and all the

780
00:28:20,240 --> 00:28:24,159
addition

781
00:28:21,039 --> 00:28:25,919
the version all that shows me here's the

782
00:28:24,159 --> 00:28:28,640
actual

783
00:28:25,919 --> 00:28:30,640
invoke expression it's just just for

784
00:28:28,640 --> 00:28:33,039
demonstration purposes but this was

785
00:28:30,640 --> 00:28:36,240
further obfuscated in the code that it

786
00:28:33,039 --> 00:28:39,440
was actually in that encoded command

787
00:28:36,240 --> 00:28:41,679
so while you're looking at invoke

788
00:28:39,440 --> 00:28:45,679
expression here

789
00:28:41,679 --> 00:28:49,440
you'll note that

790
00:28:45,679 --> 00:28:52,000
in this case the invoke expression was

791
00:28:49,440 --> 00:28:53,840
the result of other obfuscated code and

792
00:28:52,000 --> 00:28:55,440
the output was just pew pew pew

793
00:28:53,840 --> 00:28:58,080
powershell pwned

794
00:28:55,440 --> 00:29:00,000
and then you see headers here for the

795
00:28:58,080 --> 00:29:02,240
time that that command ran so this is

796
00:29:00,000 --> 00:29:03,600
incredibly valuable for forensic

797
00:29:02,240 --> 00:29:05,760
information

798
00:29:03,600 --> 00:29:07,918
for investigation you'll see the exact

799
00:29:05,760 --> 00:29:10,559
same thing happen with powershell

800
00:29:07,919 --> 00:29:12,720
core it will put it into the transcript

801
00:29:10,559 --> 00:29:16,158
path that you specify

802
00:29:12,720 --> 00:29:19,360
i'm also then in windows event log

803
00:29:16,159 --> 00:29:21,200
what we want to look at is under the

804
00:29:19,360 --> 00:29:26,000
windows application logs

805
00:29:21,200 --> 00:29:29,120
powershell here you'll see 41.03 let's

806
00:29:26,000 --> 00:29:31,120
refresh this view and let's

807
00:29:29,120 --> 00:29:34,158
take a walk down through here these

808
00:29:31,120 --> 00:29:38,320
event logs until we find

809
00:29:34,159 --> 00:29:40,799
our powershell pew pew pew

810
00:29:38,320 --> 00:29:43,520
and we're looking for 4103 which is

811
00:29:40,799 --> 00:29:46,240
module logging at 4104 which is script

812
00:29:43,520 --> 00:29:48,799
block logging

813
00:29:46,240 --> 00:29:50,480
and because i'm kind of doing this demo

814
00:29:48,799 --> 00:29:52,399
on the fly

815
00:29:50,480 --> 00:29:54,720
i should probably go back and look for a

816
00:29:52,399 --> 00:29:56,320
time stamp maybe but anyway

817
00:29:54,720 --> 00:29:58,640
what you're seeing here is you can see

818
00:29:56,320 --> 00:30:00,399
each command as it's being run

819
00:29:58,640 --> 00:30:02,559
the parameters that are being bound to

820
00:30:00,399 --> 00:30:05,918
that command as it's executed

821
00:30:02,559 --> 00:30:08,879
for powershell parameters are okay

822
00:30:05,919 --> 00:30:11,520
keep going there's our invoke mimikat's

823
00:30:08,880 --> 00:30:16,080
output in the console

824
00:30:11,520 --> 00:30:18,158
i will keep going and we'll look for

825
00:30:16,080 --> 00:30:20,480
pew pew pew should be coming up there it

826
00:30:18,159 --> 00:30:23,279
is yeah 4103

827
00:30:20,480 --> 00:30:25,200
so here's the output of the command in

828
00:30:23,279 --> 00:30:26,880
the windows event log

829
00:30:25,200 --> 00:30:28,320
there's the same thing that we saw in

830
00:30:26,880 --> 00:30:30,720
the transcript earlier

831
00:30:28,320 --> 00:30:32,320
all the metadata about the session that

832
00:30:30,720 --> 00:30:33,360
makes it interesting for us that's in

833
00:30:32,320 --> 00:30:35,840
the 4103

834
00:30:33,360 --> 00:30:38,240
module logging we can also see that in

835
00:30:35,840 --> 00:30:40,158
4104 script block logging

836
00:30:38,240 --> 00:30:42,159
and again the benefit here is it doesn't

837
00:30:40,159 --> 00:30:45,120
matter how the code was executed you're

838
00:30:42,159 --> 00:30:47,279
going to see the output in the logs

839
00:30:45,120 --> 00:30:48,320
similarly if i scroll up to the

840
00:30:47,279 --> 00:30:52,000
powershell

841
00:30:48,320 --> 00:30:55,439
core log here

842
00:30:52,000 --> 00:30:57,519
so under my logs

843
00:30:55,440 --> 00:31:00,480
now i have powershell core on the left

844
00:30:57,519 --> 00:31:05,120
as well if you've installed pwsh

845
00:31:00,480 --> 00:31:09,120
same thing here i can look at 4103

846
00:31:05,120 --> 00:31:12,399
there it is pew pew pew same metadata

847
00:31:09,120 --> 00:31:14,239
so make sure that if powershell core is

848
00:31:12,399 --> 00:31:17,600
being used in your environment that you

849
00:31:14,240 --> 00:31:20,399
install it with that manifest

850
00:31:17,600 --> 00:31:21,678
switch to so this log gets turned on on

851
00:31:20,399 --> 00:31:23,918
windows

852
00:31:21,679 --> 00:31:25,840
and we'll see the same thing with 4104

853
00:31:23,919 --> 00:31:28,240
script block logging so there we have it

854
00:31:25,840 --> 00:31:32,879
on a windows machine

855
00:31:28,240 --> 00:31:36,240
now let's pivot over to the world uh

856
00:31:32,880 --> 00:31:39,360
cross platform with a centos box here

857
00:31:36,240 --> 00:31:41,519
so here dollar ps version table

858
00:31:39,360 --> 00:31:42,799
actually i don't have it my logo so i've

859
00:31:41,519 --> 00:31:46,000
got an ssh session

860
00:31:42,799 --> 00:31:47,760
to my centos box pwsh

861
00:31:46,000 --> 00:31:49,440
and now i've got powershell already

862
00:31:47,760 --> 00:31:51,279
installed there the installation

863
00:31:49,440 --> 00:31:52,960
directions are on the microsoft website

864
00:31:51,279 --> 00:31:54,399
or that github slash powershell

865
00:31:52,960 --> 00:31:56,720
powershell

866
00:31:54,399 --> 00:31:58,320
and so here i'm running uh powershell

867
00:31:56,720 --> 00:32:01,279
now on a centos box

868
00:31:58,320 --> 00:32:01,918
ps version table tells me this is the

869
00:32:01,279 --> 00:32:04,960
edition

870
00:32:01,919 --> 00:32:07,120
powershell core the version is

871
00:32:04,960 --> 00:32:08,000
702 the exact same version it was

872
00:32:07,120 --> 00:32:10,000
running on my

873
00:32:08,000 --> 00:32:12,240
windows box i also have it on my local

874
00:32:10,000 --> 00:32:15,440
mac here as well

875
00:32:12,240 --> 00:32:17,600
so uh here i am and

876
00:32:15,440 --> 00:32:18,720
uh what i want to do is change into the

877
00:32:17,600 --> 00:32:22,080
dollar ps

878
00:32:18,720 --> 00:32:24,000
home directory which is the dollar

879
00:32:22,080 --> 00:32:25,840
ps home sends me to the installation

880
00:32:24,000 --> 00:32:28,159
path for powershell

881
00:32:25,840 --> 00:32:29,678
and here watch this just for fun

882
00:32:28,159 --> 00:32:30,720
normally we would do an ls i'm going to

883
00:32:29,679 --> 00:32:32,320
do a dir

884
00:32:30,720 --> 00:32:35,200
on a linux machine just to mess with

885
00:32:32,320 --> 00:32:37,200
people star.json

886
00:32:35,200 --> 00:32:39,760
and here is a windows style directory

887
00:32:37,200 --> 00:32:42,640
listing on a unix box is hilarious

888
00:32:39,760 --> 00:32:45,279
anyway inside there for everybody else i

889
00:32:42,640 --> 00:32:50,320
can do ls json all right

890
00:32:45,279 --> 00:32:53,360
there it is so powershell.config.json

891
00:32:50,320 --> 00:32:53,360
cat that file

892
00:32:55,039 --> 00:32:58,240
json powershell.com.json you'll see here

893
00:32:56,960 --> 00:33:02,080
is our

894
00:32:58,240 --> 00:33:05,120
policy set on this box with script block

895
00:33:02,080 --> 00:33:06,080
logging we don't do the invocation

896
00:33:05,120 --> 00:33:08,639
option typically

897
00:33:06,080 --> 00:33:10,720
but we do enable script block logging

898
00:33:08,640 --> 00:33:13,519
when do enable module logging for

899
00:33:10,720 --> 00:33:14,559
all modules here and then enable

900
00:33:13,519 --> 00:33:17,519
transcripting

901
00:33:14,559 --> 00:33:17,918
to the var temp and you just pick your

902
00:33:17,519 --> 00:33:20,799
path

903
00:33:17,919 --> 00:33:23,360
ps transcripts is what i picked so

904
00:33:20,799 --> 00:33:25,679
transcription module logging also

905
00:33:23,360 --> 00:33:27,199
so so the transcription is going to come

906
00:33:25,679 --> 00:33:28,880
out in this path

907
00:33:27,200 --> 00:33:30,320
the module logging and script block

908
00:33:28,880 --> 00:33:32,960
logging are going to come out

909
00:33:30,320 --> 00:33:33,918
in syslog which we'll take a look at

910
00:33:32,960 --> 00:33:36,480
here

911
00:33:33,919 --> 00:33:37,360
so here again invoke mimikatz is not

912
00:33:36,480 --> 00:33:40,480
even a thing

913
00:33:37,360 --> 00:33:41,120
on unix platform there's not that much

914
00:33:40,480 --> 00:33:43,919
malware

915
00:33:41,120 --> 00:33:45,840
on powershell core but i expect it to be

916
00:33:43,919 --> 00:33:48,720
out any day

917
00:33:45,840 --> 00:33:49,279
so here we want to run some commands now

918
00:33:48,720 --> 00:33:52,559
get

919
00:33:49,279 --> 00:33:54,320
process id one

920
00:33:52,559 --> 00:33:55,600
so now i'm running just like i run get

921
00:33:54,320 --> 00:33:57,918
processes

922
00:33:55,600 --> 00:33:58,959
on windows machines i can now run it

923
00:33:57,919 --> 00:34:02,720
here

924
00:33:58,960 --> 00:34:06,000
and i'm going to exit my

925
00:34:02,720 --> 00:34:07,600
powershelf session and um

926
00:34:06,000 --> 00:34:09,918
haven't helped us it won't be that much

927
00:34:07,600 --> 00:34:13,118
longer before cross-platform

928
00:34:09,918 --> 00:34:15,918
malware will be doing things like this

929
00:34:13,119 --> 00:34:18,480
calling pwsh with the exact same encoded

930
00:34:15,918 --> 00:34:20,799
command i did on the windows machine

931
00:34:18,480 --> 00:34:22,560
and how i've got the malware here pew

932
00:34:20,800 --> 00:34:24,399
pew powershell pwned

933
00:34:22,560 --> 00:34:26,560
it's an encoded command it's obvious

934
00:34:24,399 --> 00:34:28,159
gated in the original code but now you

935
00:34:26,560 --> 00:34:32,159
can see what the output

936
00:34:28,159 --> 00:34:35,599
is so we want to go find that in

937
00:34:32,159 --> 00:34:39,200
the logs now so remember this

938
00:34:35,599 --> 00:34:44,480
var temp ps transcript so let's uh

939
00:34:39,199 --> 00:34:44,480
let's take that path and drop in there

940
00:34:45,599 --> 00:34:53,200
now we do a an ls because we're back to

941
00:34:49,119 --> 00:34:56,159
uh actually no no we're still in

942
00:34:53,199 --> 00:34:56,960
all right anyway we've got 2020 716 so

943
00:34:56,159 --> 00:35:00,560
let's see

944
00:34:56,960 --> 00:35:04,480
2020 and inside there

945
00:35:00,560 --> 00:35:07,359
i see a number of log

946
00:35:04,480 --> 00:35:08,079
files that have been written so i'm

947
00:35:07,359 --> 00:35:11,119
going to cat

948
00:35:08,079 --> 00:35:14,320
out power shell transcripts

949
00:35:11,119 --> 00:35:16,000
and toss and let's look for the most

950
00:35:14,320 --> 00:35:18,000
recent one starts with a y

951
00:35:16,000 --> 00:35:19,119
on the randomized name and here we'll

952
00:35:18,000 --> 00:35:22,560
see

953
00:35:19,119 --> 00:35:25,040
in a transcript on a centos box

954
00:35:22,560 --> 00:35:26,720
the same data we saw over on the windows

955
00:35:25,040 --> 00:35:31,119
side

956
00:35:26,720 --> 00:35:33,919
the start time username machine name

957
00:35:31,119 --> 00:35:36,160
the host was that encoded command

958
00:35:33,920 --> 00:35:38,400
process id

959
00:35:36,160 --> 00:35:39,359
and all that goodness here's the start

960
00:35:38,400 --> 00:35:41,440
time

961
00:35:39,359 --> 00:35:42,400
here's the command here's the output

962
00:35:41,440 --> 00:35:45,520
it's all good

963
00:35:42,400 --> 00:35:47,200
all right so that's transcription now uh

964
00:35:45,520 --> 00:35:49,599
for the windows folks you might think

965
00:35:47,200 --> 00:35:51,598
well there's no windows event log how do

966
00:35:49,599 --> 00:35:54,400
i see

967
00:35:51,599 --> 00:35:54,400
what happened

968
00:35:55,359 --> 00:36:00,880
so let's do this then for for the event

969
00:35:58,640 --> 00:36:03,200
logging so on windows we know 4103

970
00:36:00,880 --> 00:36:04,800
4104 and the windows powershell or

971
00:36:03,200 --> 00:36:06,480
powershell core log

972
00:36:04,800 --> 00:36:08,079
how do we find that over here so what

973
00:36:06,480 --> 00:36:12,320
i'm going to do

974
00:36:08,079 --> 00:36:16,400
is i'm going to run over and

975
00:36:12,320 --> 00:36:19,520
take a look at the

976
00:36:16,400 --> 00:36:21,920
syslog so i'll start up another

977
00:36:19,520 --> 00:36:24,400
session actually i'm going to do it

978
00:36:21,920 --> 00:36:24,400
right here

979
00:36:24,839 --> 00:36:27,839
pwd

980
00:36:28,640 --> 00:36:32,640
all right notice i'm not in powershell

981
00:36:30,480 --> 00:36:35,040
core right now it's not tab completing

982
00:36:32,640 --> 00:36:35,920
that's important because if i'm

983
00:36:35,040 --> 00:36:39,839
reviewing

984
00:36:35,920 --> 00:36:41,839
malware in a powershell session

985
00:36:39,839 --> 00:36:43,680
viewing those logs gets written back

986
00:36:41,839 --> 00:36:45,599
into the logs and it becomes kind of a

987
00:36:43,680 --> 00:36:48,879
ship in a bottle kind of thing

988
00:36:45,599 --> 00:36:50,960
uh a nested logging of logs

989
00:36:48,880 --> 00:36:52,480
which is not pretty so you want to exit

990
00:36:50,960 --> 00:36:53,680
out of powershell before you do that but

991
00:36:52,480 --> 00:36:54,720
what i'm going to do is i'm going to go

992
00:36:53,680 --> 00:36:57,440
to

993
00:36:54,720 --> 00:36:57,439
var log

994
00:36:57,839 --> 00:37:05,040
and i can do

995
00:37:01,280 --> 00:37:08,320
sudo grip for powershell

996
00:37:05,040 --> 00:37:11,040
in the messages file which is the

997
00:37:08,320 --> 00:37:12,480
syslog file put in my super secret

998
00:37:11,040 --> 00:37:16,000
password

999
00:37:12,480 --> 00:37:19,280
and now you can see here

1000
00:37:16,000 --> 00:37:21,119
in that i've got pipeline

1001
00:37:19,280 --> 00:37:22,320
details that's the module logging

1002
00:37:21,119 --> 00:37:25,920
feature

1003
00:37:22,320 --> 00:37:29,200
invoke expression and there's a

1004
00:37:25,920 --> 00:37:32,240
pew pew pew powershell pwned right there

1005
00:37:29,200 --> 00:37:34,839
all right and also comes out so that's

1006
00:37:32,240 --> 00:37:36,078
pipeline details you also see a script

1007
00:37:34,839 --> 00:37:39,759
block

1008
00:37:36,079 --> 00:37:41,280
uh same thing two styles of logging okay

1009
00:37:39,760 --> 00:37:42,720
two different options the different

1010
00:37:41,280 --> 00:37:44,240
policies that we've enabled and they're

1011
00:37:42,720 --> 00:37:45,439
slightly different in the output that

1012
00:37:44,240 --> 00:37:47,439
they generate but you can see the

1013
00:37:45,440 --> 00:37:49,200
commands that were executed there

1014
00:37:47,440 --> 00:37:50,720
so now for fun what we're is we're going

1015
00:37:49,200 --> 00:37:54,078
to entail this

1016
00:37:50,720 --> 00:37:55,359
pseudotail minus f messages

1017
00:37:54,079 --> 00:37:57,119
all right and so now i'm going to go

1018
00:37:55,359 --> 00:38:00,560
over here to another

1019
00:37:57,119 --> 00:38:01,440
ssh session on the same box and i'm

1020
00:38:00,560 --> 00:38:05,520
going to

1021
00:38:01,440 --> 00:38:08,560
run pwsh notice it just dropped

1022
00:38:05,520 --> 00:38:12,320
commands behind us in the syslog

1023
00:38:08,560 --> 00:38:16,640
and now let's do um

1024
00:38:12,320 --> 00:38:20,640
hello from pwsh

1025
00:38:16,640 --> 00:38:23,118
and now back behind us uh in the

1026
00:38:20,640 --> 00:38:25,359
log you'll notice prompt shows up a lot

1027
00:38:23,119 --> 00:38:27,760
but here it is right there in syslog

1028
00:38:25,359 --> 00:38:31,119
hello from pwsh

1029
00:38:27,760 --> 00:38:33,520
as a script block log

1030
00:38:31,119 --> 00:38:34,320
and then it's uh also there as a

1031
00:38:33,520 --> 00:38:37,759
pipeline

1032
00:38:34,320 --> 00:38:39,680
details all right so that's the two

1033
00:38:37,760 --> 00:38:41,920
styles of logging

1034
00:38:39,680 --> 00:38:43,598
so now you've got it and i did that on a

1035
00:38:41,920 --> 00:38:46,320
centos box it's the same

1036
00:38:43,599 --> 00:38:48,000
on mac except syslog is a little

1037
00:38:46,320 --> 00:38:49,520
different on mac but

1038
00:38:48,000 --> 00:38:52,880
you can still have your transcripts and

1039
00:38:49,520 --> 00:38:52,880
all that there too so

1040
00:38:53,599 --> 00:38:56,640
so that's cross platform powershow i

1041
00:38:56,160 --> 00:38:58,078
know

1042
00:38:56,640 --> 00:38:59,520
most of you are probably in windows

1043
00:38:58,079 --> 00:39:00,000
environments and that's your primary

1044
00:38:59,520 --> 00:39:01,680
concern

1045
00:39:00,000 --> 00:39:03,359
but i want you to be aware of the

1046
00:39:01,680 --> 00:39:05,359
concerns for

1047
00:39:03,359 --> 00:39:06,960
powershell core that's emerging that's

1048
00:39:05,359 --> 00:39:09,119
going to be your next

1049
00:39:06,960 --> 00:39:10,960
attack vector that the red team could be

1050
00:39:09,119 --> 00:39:12,640
using against you

1051
00:39:10,960 --> 00:39:14,880
so be careful out there a couple things

1052
00:39:12,640 --> 00:39:18,000
you need to know before you

1053
00:39:14,880 --> 00:39:21,520
implement powershell

1054
00:39:18,000 --> 00:39:24,640
logging at scale across your environment

1055
00:39:21,520 --> 00:39:26,800
so transcription specifically can cause

1056
00:39:24,640 --> 00:39:30,078
some issues

1057
00:39:26,800 --> 00:39:30,960
and this is not a i guess this is really

1058
00:39:30,079 --> 00:39:32,480
just a

1059
00:39:30,960 --> 00:39:34,240
core fundamental issue with the

1060
00:39:32,480 --> 00:39:36,160
operating system the way some of the

1061
00:39:34,240 --> 00:39:38,319
transcription works i've already

1062
00:39:36,160 --> 00:39:40,720
um had a meeting with the pm at

1063
00:39:38,320 --> 00:39:42,400
microsoft giving them this feedback

1064
00:39:40,720 --> 00:39:44,319
this is feedback that i've seen working

1065
00:39:42,400 --> 00:39:46,320
with customers is that

1066
00:39:44,320 --> 00:39:47,440
if you turn on powershell transcription

1067
00:39:46,320 --> 00:39:49,839
it will crash

1068
00:39:47,440 --> 00:39:51,200
citrix not cool if you have citrix in

1069
00:39:49,839 --> 00:39:52,960
your environment all right they learned

1070
00:39:51,200 --> 00:39:54,720
the hard way

1071
00:39:52,960 --> 00:39:57,119
active directory administrative center

1072
00:39:54,720 --> 00:39:57,520
is that little powershell-based version

1073
00:39:57,119 --> 00:39:59,920
of

1074
00:39:57,520 --> 00:40:01,839
active directory users and computers

1075
00:39:59,920 --> 00:40:03,680
it'll hang that as well

1076
00:40:01,839 --> 00:40:06,160
and if you're using scom some of the

1077
00:40:03,680 --> 00:40:08,560
management scripts in scom can fail

1078
00:40:06,160 --> 00:40:10,000
if you have transcription disabled and i

1079
00:40:08,560 --> 00:40:11,520
saw a note from microsoft

1080
00:40:10,000 --> 00:40:13,760
support that said they were going to

1081
00:40:11,520 --> 00:40:15,839
potentially automatically disable

1082
00:40:13,760 --> 00:40:17,680
powershell transcription out of the box

1083
00:40:15,839 --> 00:40:18,799
when you install scom so watch out for

1084
00:40:17,680 --> 00:40:21,520
that

1085
00:40:18,800 --> 00:40:23,839
be careful on that conflict if you use

1086
00:40:21,520 --> 00:40:26,240
microsoft's

1087
00:40:23,839 --> 00:40:28,000
also some older versions of i use vs

1088
00:40:26,240 --> 00:40:30,879
code every day on my mac

1089
00:40:28,000 --> 00:40:31,760
to do powershell note-taking and things

1090
00:40:30,880 --> 00:40:34,560
now there's a

1091
00:40:31,760 --> 00:40:36,480
script analyzer plug-in that happens

1092
00:40:34,560 --> 00:40:37,520
when you are editing powershell and vs

1093
00:40:36,480 --> 00:40:40,400
code

1094
00:40:37,520 --> 00:40:40,880
that plug-in using script analyzer was

1095
00:40:40,400 --> 00:40:44,720
backed

1096
00:40:40,880 --> 00:40:46,160
by uh powershell code in the source

1097
00:40:44,720 --> 00:40:47,759
which would then cause additional

1098
00:40:46,160 --> 00:40:51,118
logging

1099
00:40:47,760 --> 00:40:51,440
to just spam your logs i've talked with

1100
00:40:51,119 --> 00:40:53,680
the

1101
00:40:51,440 --> 00:40:55,200
powershell team on that last year they

1102
00:40:53,680 --> 00:40:56,960
said they're fixing that i

1103
00:40:55,200 --> 00:40:58,319
presume i haven't checked lately it's

1104
00:40:56,960 --> 00:41:00,480
probably fixed by now

1105
00:40:58,319 --> 00:41:02,880
but just be aware that if you leave vs

1106
00:41:00,480 --> 00:41:05,680
code open with powershell in it

1107
00:41:02,880 --> 00:41:07,440
it can trigger log writing all day long

1108
00:41:05,680 --> 00:41:11,040
even if you're not doing anything

1109
00:41:07,440 --> 00:41:12,400
in it um also i haven't talked about

1110
00:41:11,040 --> 00:41:13,279
hardening yet i'll get to that in a

1111
00:41:12,400 --> 00:41:15,200
second

1112
00:41:13,280 --> 00:41:17,359
but you want to harden your

1113
00:41:15,200 --> 00:41:20,560
transcription directory

1114
00:41:17,359 --> 00:41:22,720
if you do that on powershell for an

1115
00:41:20,560 --> 00:41:24,078
older version that does support

1116
00:41:22,720 --> 00:41:25,680
transcription

1117
00:41:24,079 --> 00:41:26,800
uh that's why i don't recommend the

1118
00:41:25,680 --> 00:41:28,640
older versions you should be on

1119
00:41:26,800 --> 00:41:30,800
powershell 51 but if you've got like a

1120
00:41:28,640 --> 00:41:32,000
2012 r2 box

1121
00:41:30,800 --> 00:41:34,160
that you've turned on powershell

1122
00:41:32,000 --> 00:41:37,119
transcription

1123
00:41:34,160 --> 00:41:38,960
and you open the powershell prompt it'll

1124
00:41:37,119 --> 00:41:42,240
it'll just crash it won't even

1125
00:41:38,960 --> 00:41:44,319
run so you can break it hardening means

1126
00:41:42,240 --> 00:41:45,520
setting that transcript directory so

1127
00:41:44,319 --> 00:41:48,400
only so

1128
00:41:45,520 --> 00:41:50,240
everyday users can only write into that

1129
00:41:48,400 --> 00:41:51,040
directory but they can't read from it

1130
00:41:50,240 --> 00:41:53,520
only

1131
00:41:51,040 --> 00:41:55,119
administrators and local system can read

1132
00:41:53,520 --> 00:41:58,000
transcripts out of there

1133
00:41:55,119 --> 00:41:58,640
reason being is you don't want everyday

1134
00:41:58,000 --> 00:42:01,119
users

1135
00:41:58,640 --> 00:42:02,400
on servers or workstations being able to

1136
00:42:01,119 --> 00:42:04,880
get into those

1137
00:42:02,400 --> 00:42:06,400
transcript files or those event logs for

1138
00:42:04,880 --> 00:42:08,240
that matter

1139
00:42:06,400 --> 00:42:10,800
because if they can then they could

1140
00:42:08,240 --> 00:42:12,560
potentially see

1141
00:42:10,800 --> 00:42:14,480
secret information that you would put in

1142
00:42:12,560 --> 00:42:16,560
your powershell scripts and run across

1143
00:42:14,480 --> 00:42:19,680
the enterprise now i know

1144
00:42:16,560 --> 00:42:23,680
nobody watching this video would ever

1145
00:42:19,680 --> 00:42:25,839
put passwords into a powershell script

1146
00:42:23,680 --> 00:42:28,078
however you might have other things that

1147
00:42:25,839 --> 00:42:30,319
are you know sql connection strings or

1148
00:42:28,079 --> 00:42:31,520
you know some other type of

1149
00:42:30,319 --> 00:42:33,200
privileged information that you don't

1150
00:42:31,520 --> 00:42:35,119
want people to see so make sure you

1151
00:42:33,200 --> 00:42:36,640
harden transcripts and event logs

1152
00:42:35,119 --> 00:42:38,319
and if you harden the event logs you

1153
00:42:36,640 --> 00:42:39,598
have to set it through the registry

1154
00:42:38,319 --> 00:42:41,440
i've got a script that'll help you with

1155
00:42:39,599 --> 00:42:43,040
that some

1156
00:42:41,440 --> 00:42:44,800
some editions of windows that might

1157
00:42:43,040 --> 00:42:46,480
require reboot before that hardening

1158
00:42:44,800 --> 00:42:48,720
would take place

1159
00:42:46,480 --> 00:42:51,280
now i'm also interested to know from you

1160
00:42:48,720 --> 00:42:53,598
what issues have you encountered

1161
00:42:51,280 --> 00:42:55,119
with powershell logging in the

1162
00:42:53,599 --> 00:42:57,119
enterprise

1163
00:42:55,119 --> 00:42:58,720
if you've got any of those catch my

1164
00:42:57,119 --> 00:43:00,880
contact information at the end of the

1165
00:42:58,720 --> 00:43:02,000
deck i really do want to hear from you

1166
00:43:00,880 --> 00:43:04,400
because i'm

1167
00:43:02,000 --> 00:43:05,359
trying to compile good guidance from

1168
00:43:04,400 --> 00:43:07,280
field

1169
00:43:05,359 --> 00:43:08,640
experience to help other customers as

1170
00:43:07,280 --> 00:43:11,599
well

1171
00:43:08,640 --> 00:43:13,680
so some free resources for you number

1172
00:43:11,599 --> 00:43:17,119
one i have created a

1173
00:43:13,680 --> 00:43:19,480
ps policy module out on github right now

1174
00:43:17,119 --> 00:43:22,240
it only works with windows

1175
00:43:19,480 --> 00:43:25,359
powershell51 it doesn't do powershell

1176
00:43:22,240 --> 00:43:27,598
core yet but what it does is instead of

1177
00:43:25,359 --> 00:43:30,000
because again group policy is unwieldy

1178
00:43:27,599 --> 00:43:33,119
in a lot of environments because it's so

1179
00:43:30,000 --> 00:43:35,440
um it's so long in the tooth and it's

1180
00:43:33,119 --> 00:43:36,319
been i usually most places it's not been

1181
00:43:35,440 --> 00:43:38,000
managed well

1182
00:43:36,319 --> 00:43:40,000
and you've got conflicts of policies

1183
00:43:38,000 --> 00:43:41,599
everywhere it's easier to go straight to

1184
00:43:40,000 --> 00:43:43,359
the registry to set these so i've

1185
00:43:41,599 --> 00:43:44,960
provided some scripts for you that will

1186
00:43:43,359 --> 00:43:47,200
set the policies

1187
00:43:44,960 --> 00:43:48,000
also will increase the event log size

1188
00:43:47,200 --> 00:43:50,160
because

1189
00:43:48,000 --> 00:43:51,040
the default event log size for

1190
00:43:50,160 --> 00:43:53,598
powershell

1191
00:43:51,040 --> 00:43:54,880
is 15 megs and that's not going to hold

1192
00:43:53,599 --> 00:43:57,760
very much of anything

1193
00:43:54,880 --> 00:43:59,680
especially once you turn this on so you

1194
00:43:57,760 --> 00:44:00,319
want to increase your event log size

1195
00:43:59,680 --> 00:44:02,240
i've seen

1196
00:44:00,319 --> 00:44:03,920
industry standard guidance that says you

1197
00:44:02,240 --> 00:44:06,000
know set it to a gig

1198
00:44:03,920 --> 00:44:08,319
so that you've got and then monitor

1199
00:44:06,000 --> 00:44:10,800
those logs to see

1200
00:44:08,319 --> 00:44:12,560
how many days of activity you're getting

1201
00:44:10,800 --> 00:44:15,760
in those logs and that's what this

1202
00:44:12,560 --> 00:44:17,680
ps model policy module is designed to do

1203
00:44:15,760 --> 00:44:19,760
it'll also give you the code you need to

1204
00:44:17,680 --> 00:44:21,359
harden both the transcripts and the

1205
00:44:19,760 --> 00:44:22,880
windows event logs

1206
00:44:21,359 --> 00:44:25,680
and then clean out those transcript

1207
00:44:22,880 --> 00:44:27,200
files if you start writing files to disk

1208
00:44:25,680 --> 00:44:29,520
and you never clean them that's going to

1209
00:44:27,200 --> 00:44:30,799
be a problem one day surprise you filled

1210
00:44:29,520 --> 00:44:32,800
the disk up so

1211
00:44:30,800 --> 00:44:34,480
you want to also schedule a task to

1212
00:44:32,800 --> 00:44:38,160
clean those transcript files

1213
00:44:34,480 --> 00:44:38,720
on your endpoints and then also you want

1214
00:44:38,160 --> 00:44:40,879
to

1215
00:44:38,720 --> 00:44:43,279
be able to search across all those

1216
00:44:40,880 --> 00:44:46,319
logging locations that we looked at

1217
00:44:43,280 --> 00:44:47,119
in the event of an uh investigation a

1218
00:44:46,319 --> 00:44:50,400
forensic

1219
00:44:47,119 --> 00:44:52,560
investigation so i have a script that

1220
00:44:50,400 --> 00:44:54,000
will do that however i put here foot gun

1221
00:44:52,560 --> 00:44:55,839
warning you can shoot yourself in the

1222
00:44:54,000 --> 00:44:59,119
foot this way because

1223
00:44:55,839 --> 00:45:01,759
if i'm typing in meme cats as my

1224
00:44:59,119 --> 00:45:03,440
search string and i'm searching that

1225
00:45:01,760 --> 00:45:06,319
from a powershell prompt

1226
00:45:03,440 --> 00:45:06,960
now i have introduced the word mimi cats

1227
00:45:06,319 --> 00:45:08,800
into

1228
00:45:06,960 --> 00:45:10,640
the very logs that i'm trying to search

1229
00:45:08,800 --> 00:45:13,280
for mimi cats you see that

1230
00:45:10,640 --> 00:45:15,040
ship in the bottle you know inception

1231
00:45:13,280 --> 00:45:16,720
kind of problem that we have there so be

1232
00:45:15,040 --> 00:45:18,319
careful with that

1233
00:45:16,720 --> 00:45:20,078
there's a command here to do it you

1234
00:45:18,319 --> 00:45:21,200
should do that obviously as you already

1235
00:45:20,079 --> 00:45:22,560
practice on a

1236
00:45:21,200 --> 00:45:23,839
machine that's dedicated to

1237
00:45:22,560 --> 00:45:25,440
investigation where you don't have to

1238
00:45:23,839 --> 00:45:26,319
worry about corrupting your own local

1239
00:45:25,440 --> 00:45:29,760
logs

1240
00:45:26,319 --> 00:45:31,839
so this is a work in progress

1241
00:45:29,760 --> 00:45:32,960
you can ping me if you run into issues

1242
00:45:31,839 --> 00:45:35,920
it's not really

1243
00:45:32,960 --> 00:45:37,839
released widely yet i haven't really set

1244
00:45:35,920 --> 00:45:39,680
a powershell gallery yet either

1245
00:45:37,839 --> 00:45:42,000
so i'm interested in your feedback give

1246
00:45:39,680 --> 00:45:43,598
this a try let me know if it's helpful

1247
00:45:42,000 --> 00:45:45,520
to you and your environment but what

1248
00:45:43,599 --> 00:45:46,720
it's designed to do is take care of some

1249
00:45:45,520 --> 00:45:48,880
of the cleanup

1250
00:45:46,720 --> 00:45:50,240
and nuances around these policies that

1251
00:45:48,880 --> 00:45:51,839
don't come out of the box with group

1252
00:45:50,240 --> 00:45:56,078
policy

1253
00:45:51,839 --> 00:45:56,880
also last year i spoke at the powershell

1254
00:45:56,079 --> 00:45:59,040
summit

1255
00:45:56,880 --> 00:46:01,920
2019 unfortunately it was canceled this

1256
00:45:59,040 --> 00:46:04,160
year but last year i did a hands-on lab

1257
00:46:01,920 --> 00:46:06,079
going through all of these policies on

1258
00:46:04,160 --> 00:46:08,560
windows and there's a lab on

1259
00:46:06,079 --> 00:46:09,599
linux as well and so there's a guide

1260
00:46:08,560 --> 00:46:12,560
here

1261
00:46:09,599 --> 00:46:14,880
on github you can go check out and walk

1262
00:46:12,560 --> 00:46:16,640
through building out your own vms and

1263
00:46:14,880 --> 00:46:18,640
build your own environment where you can

1264
00:46:16,640 --> 00:46:20,240
practice with powershell policies and i

1265
00:46:18,640 --> 00:46:23,118
walk you through step by step

1266
00:46:20,240 --> 00:46:24,560
in a very teaching method how to do a

1267
00:46:23,119 --> 00:46:26,560
lot of the use cases

1268
00:46:24,560 --> 00:46:28,560
that we went through very quickly today

1269
00:46:26,560 --> 00:46:29,359
it's a lot of extra tips packed in there

1270
00:46:28,560 --> 00:46:32,640
that you want to

1271
00:46:29,359 --> 00:46:33,119
check out also if you're curious how do

1272
00:46:32,640 --> 00:46:36,000
i get

1273
00:46:33,119 --> 00:46:36,640
powershell on my mac or linux box

1274
00:46:36,000 --> 00:46:38,839
there's

1275
00:46:36,640 --> 00:46:40,400
instructions there at the

1276
00:46:38,839 --> 00:46:43,440
docs.microsoft.com

1277
00:46:40,400 --> 00:46:45,599
also i'll provide a pdf of this deck for

1278
00:46:43,440 --> 00:46:48,920
you out on my github

1279
00:46:45,599 --> 00:46:50,079
and as always uh you can reach me

1280
00:46:48,920 --> 00:46:53,520
actually.mcglanatanium.com

1281
00:46:50,079 --> 00:46:55,520
or on twitter at go tpfe

1282
00:46:53,520 --> 00:46:57,280
and i work for microsoft my title was

1283
00:46:55,520 --> 00:46:59,359
premier field engineer

1284
00:46:57,280 --> 00:47:00,880
now i've left microsoft and i'm still i

1285
00:46:59,359 --> 00:47:03,520
can't change my twitter and

1286
00:47:00,880 --> 00:47:04,960
i'll lose a bunch of people so anyway uh

1287
00:47:03,520 --> 00:47:07,759
reach me at go tpfe

1288
00:47:04,960 --> 00:47:08,720
out there on twitter and this

1289
00:47:07,760 --> 00:47:11,760
presentation

1290
00:47:08,720 --> 00:47:14,240
is not a vendor commercial

1291
00:47:11,760 --> 00:47:16,720
it's designed for public education right

1292
00:47:14,240 --> 00:47:19,040
however that being said

1293
00:47:16,720 --> 00:47:21,200
there are some challenges with doing

1294
00:47:19,040 --> 00:47:24,480
this automation of setting these things

1295
00:47:21,200 --> 00:47:26,319
at scale and that's exactly what tanium

1296
00:47:24,480 --> 00:47:27,040
does really well so when i came to

1297
00:47:26,319 --> 00:47:29,119
tanium

1298
00:47:27,040 --> 00:47:31,119
i brought this knowledge of powershell

1299
00:47:29,119 --> 00:47:33,839
investigation and

1300
00:47:31,119 --> 00:47:36,240
policy management and i built it into

1301
00:47:33,839 --> 00:47:38,400
some content for tanium customers

1302
00:47:36,240 --> 00:47:40,399
so that you can set these policies at

1303
00:47:38,400 --> 00:47:41,680
scale see where they're set what the

1304
00:47:40,400 --> 00:47:44,240
settings are

1305
00:47:41,680 --> 00:47:45,440
very quickly within a few seconds and

1306
00:47:44,240 --> 00:47:47,200
then also

1307
00:47:45,440 --> 00:47:49,040
once you've got the settings turned on

1308
00:47:47,200 --> 00:47:50,640
how do i keep the transcripts clean

1309
00:47:49,040 --> 00:47:53,119
all that stuff the hardening is all

1310
00:47:50,640 --> 00:47:54,640
taken care of and some content i created

1311
00:47:53,119 --> 00:47:56,640
on the titanium platform

1312
00:47:54,640 --> 00:47:59,040
but then more importantly is how do i

1313
00:47:56,640 --> 00:48:01,279
look for mimi cats again for example how

1314
00:47:59,040 --> 00:48:04,079
do i find that then across

1315
00:48:01,280 --> 00:48:04,880
thousands of machines in the event logs

1316
00:48:04,079 --> 00:48:07,200
we can do that

1317
00:48:04,880 --> 00:48:09,599
very quickly with tanium as well so if

1318
00:48:07,200 --> 00:48:12,720
you'd like more information on that

1319
00:48:09,599 --> 00:48:15,839
you can reach out to me so

1320
00:48:12,720 --> 00:48:17,200
uh besides this has been fantastic

1321
00:48:15,839 --> 00:48:19,520
sharing the day with you i look forward

1322
00:48:17,200 --> 00:48:21,439
to the q a here in a few minutes

1323
00:48:19,520 --> 00:48:22,960
happy to answer any questions you might

1324
00:48:21,440 --> 00:48:26,160
have there

1325
00:48:22,960 --> 00:48:29,440
so in the words of mark

1326
00:48:26,160 --> 00:48:30,160
manassee one of our industry mentors on

1327
00:48:29,440 --> 00:48:33,920
the windows

1328
00:48:30,160 --> 00:48:36,399
side of things use your powers for good

1329
00:48:33,920 --> 00:48:38,240
and not for evil

1330
00:48:36,400 --> 00:48:40,480
so thank you for attending today's

1331
00:48:38,240 --> 00:48:49,839
session and i hope to see you

1332
00:48:40,480 --> 00:48:49,839
in the q a soon

1333
00:48:50,319 --> 00:48:52,400
you

