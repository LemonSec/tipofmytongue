1
00:00:05,200 --> 00:00:06,160
hello everyone

2
00:00:06,160 --> 00:00:08,800
um as nikhil said i'm carrie hooper you

3
00:00:08,800 --> 00:00:10,559
can call me hoop or carrie or whatever

4
00:00:10,559 --> 00:00:12,000
and i'm pleased to be here at vsat san

5
00:00:12,000 --> 00:00:12,960
antonio

6
00:00:12,960 --> 00:00:15,040
um big thanks to the conference

7
00:00:15,040 --> 00:00:16,400
organizers they've been working hard

8
00:00:16,400 --> 00:00:19,039
and uh you know a huge shout out is

9
00:00:19,039 --> 00:00:20,320
quite a bit of coordination

10
00:00:20,320 --> 00:00:23,519
too to set up i love b-sides and i love

11
00:00:23,519 --> 00:00:25,439
security conferences i love that we can

12
00:00:25,439 --> 00:00:26,960
teach each other things and at the same

13
00:00:26,960 --> 00:00:28,160
time learn things

14
00:00:28,160 --> 00:00:29,599
from different perspectives different

15
00:00:29,599 --> 00:00:31,679
people in different roles so please help

16
00:00:31,679 --> 00:00:32,479
me do that

17
00:00:32,479 --> 00:00:34,239
um i hope to teach you some things

18
00:00:34,239 --> 00:00:35,760
during course this presentation

19
00:00:35,760 --> 00:00:37,440
but let's engage in conversation in the

20
00:00:37,440 --> 00:00:39,360
breakout room uh let's chat about this

21
00:00:39,360 --> 00:00:41,040
stuff i would love to learn from you as

22
00:00:41,040 --> 00:00:41,920
well

23
00:00:41,920 --> 00:00:43,360
so let me give you some context real

24
00:00:43,360 --> 00:00:45,039
quick why this topic why

25
00:00:45,039 --> 00:00:48,559
http and desynchronization attacks well

26
00:00:48,559 --> 00:00:50,480
i first learned about this attack in

27
00:00:50,480 --> 00:00:51,600
2019

28
00:00:51,600 --> 00:00:54,160
in defcon 27 i saw james kettles talk

29
00:00:54,160 --> 00:00:54,640
about

30
00:00:54,640 --> 00:00:58,559
http desynchronization and it took me a

31
00:00:58,559 --> 00:01:00,239
while to wrap my head around it it was

32
00:01:00,239 --> 00:01:02,239
kind of a complicated concept and there

33
00:01:02,239 --> 00:01:03,920
were a few key details that i needed to

34
00:01:03,920 --> 00:01:05,438
understand about http

35
00:01:05,438 --> 00:01:07,920
in order to fully wrap my mind around it

36
00:01:07,920 --> 00:01:09,200
well later on i saw

37
00:01:09,200 --> 00:01:11,920
many people at work whether whether blue

38
00:01:11,920 --> 00:01:13,760
teamers or red teamers alike

39
00:01:13,760 --> 00:01:16,159
they didn't quite get what this was and

40
00:01:16,159 --> 00:01:17,280
how to exploit it

41
00:01:17,280 --> 00:01:19,280
so what i wanted to do here is create

42
00:01:19,280 --> 00:01:21,520
like a zero to hero presentation

43
00:01:21,520 --> 00:01:23,600
build up from the building blocks of the

44
00:01:23,600 --> 00:01:25,200
features of http

45
00:01:25,200 --> 00:01:27,360
introduce the desynchronization attack

46
00:01:27,360 --> 00:01:30,720
and they'll give a few demos at the end

47
00:01:30,720 --> 00:01:32,880
first off uh who am i as i said before

48
00:01:32,880 --> 00:01:34,799
i'm carrie hooper you can find me

49
00:01:34,799 --> 00:01:37,840
mac on twitter at no pants root dance

50
00:01:37,840 --> 00:01:40,079
and i'm a pen tester on a red team i

51
00:01:40,079 --> 00:01:40,880
love learning

52
00:01:40,880 --> 00:01:44,079
i love finding bugs i love golf i

53
00:01:44,079 --> 00:01:46,240
love finding bugs though it doesn't

54
00:01:46,240 --> 00:01:48,000
happen as often as it should

55
00:01:48,000 --> 00:01:49,759
and i hate i absolutely hate zoom

56
00:01:49,759 --> 00:01:51,680
meetings i'm one of the ones that tries

57
00:01:51,680 --> 00:01:52,479
to

58
00:01:52,479 --> 00:01:54,000
that wants to go back in the office

59
00:01:54,000 --> 00:01:55,520
can't wait

60
00:01:55,520 --> 00:01:58,079
i'm also a veteran of the the us army uh

61
00:01:58,079 --> 00:02:00,399
and combat veteran

62
00:02:00,399 --> 00:02:02,479
so overview what are we gonna what are

63
00:02:02,479 --> 00:02:04,240
we gonna learn uh by the end of this

64
00:02:04,240 --> 00:02:05,119
presentation

65
00:02:05,119 --> 00:02:07,119
you the audience should understand one

66
00:02:07,119 --> 00:02:10,399
the basics of the http protocol

67
00:02:10,399 --> 00:02:12,640
including a few of the key features of

68
00:02:12,640 --> 00:02:13,680
http

69
00:02:13,680 --> 00:02:16,000
chunked encoding or transfer and coding

70
00:02:16,000 --> 00:02:16,959
chunked

71
00:02:16,959 --> 00:02:19,680
and also http pipelining we'll discuss

72
00:02:19,680 --> 00:02:20,239
what is

73
00:02:20,239 --> 00:02:23,280
http request smuggling what is a

74
00:02:23,280 --> 00:02:25,200
desynchronization attack and what is the

75
00:02:25,200 --> 00:02:26,800
dsync between a

76
00:02:26,800 --> 00:02:29,040
front end and a back end look like and

77
00:02:29,040 --> 00:02:31,040
then last we'll have two demos

78
00:02:31,040 --> 00:02:33,120
now four total demos will be available

79
00:02:33,120 --> 00:02:35,120
to you i will post the link

80
00:02:35,120 --> 00:02:36,879
later on and you can download each of

81
00:02:36,879 --> 00:02:38,319
the demo in gif in gif

82
00:02:38,319 --> 00:02:40,480
format um that way it might be a little

83
00:02:40,480 --> 00:02:42,160
bit clearer rather than transmitting

84
00:02:42,160 --> 00:02:43,599
over crowdcast we might

85
00:02:43,599 --> 00:02:45,280
uh you might be able to get get a little

86
00:02:45,280 --> 00:02:46,879
bit more from it ask me questions about

87
00:02:46,879 --> 00:02:48,959
it later on

88
00:02:48,959 --> 00:02:51,360
so quickly let's talk about http and

89
00:02:51,360 --> 00:02:54,120
introduce it from the ground up

90
00:02:54,120 --> 00:02:57,120
http stands for hyper text

91
00:02:57,120 --> 00:02:59,599
transfer protocol the p stands for

92
00:02:59,599 --> 00:03:00,159
protocol

93
00:03:00,159 --> 00:03:01,760
right this is just a way of

94
00:03:01,760 --> 00:03:04,159
communication from generally a client

95
00:03:04,159 --> 00:03:05,920
to a server and that communication

96
00:03:05,920 --> 00:03:07,760
happens over tcp which means it's a

97
00:03:07,760 --> 00:03:09,440
stateful connection

98
00:03:09,440 --> 00:03:12,560
all http is engineered for is just is

99
00:03:12,560 --> 00:03:14,080
historically just a set

100
00:03:14,080 --> 00:03:16,560
to fetch resources in a human readable

101
00:03:16,560 --> 00:03:17,280
format

102
00:03:17,280 --> 00:03:18,800
and when i see human readable i don't

103
00:03:18,800 --> 00:03:20,159
mean that i mean that if you look at it

104
00:03:20,159 --> 00:03:22,000
in wireshark or you look at an http

105
00:03:22,000 --> 00:03:23,599
request in netcat or

106
00:03:23,599 --> 00:03:25,280
or whatever or through a transparent

107
00:03:25,280 --> 00:03:26,879
proxy such as burp suite

108
00:03:26,879 --> 00:03:29,519
or zap you can read the words and kind

109
00:03:29,519 --> 00:03:30,400
of understand

110
00:03:30,400 --> 00:03:33,519
what it's what it's saying generally

111
00:03:33,519 --> 00:03:36,159
http is going to consist of a request

112
00:03:36,159 --> 00:03:37,440
can i have this thing

113
00:03:37,440 --> 00:03:40,879
can i have mypage.html and a response

114
00:03:40,879 --> 00:03:44,080
which is html response and this is an

115
00:03:44,080 --> 00:03:46,640
example very very simple one

116
00:03:46,640 --> 00:03:48,400
in addition to html you might also get

117
00:03:48,400 --> 00:03:49,920
css or javascript and those are

118
00:03:49,920 --> 00:03:51,519
constructed by the browser

119
00:03:51,519 --> 00:03:53,840
to form a page of what you look at on

120
00:03:53,840 --> 00:03:55,840
the internet

121
00:03:55,840 --> 00:03:59,040
five major components of http the method

122
00:03:59,040 --> 00:04:01,280
uh the path the version and the headers

123
00:04:01,280 --> 00:04:02,159
now the method

124
00:04:02,159 --> 00:04:04,159
some of y'all might know this as like

125
00:04:04,159 --> 00:04:05,840
the e verbs

126
00:04:05,840 --> 00:04:09,280
or um the the you know the

127
00:04:09,280 --> 00:04:12,480
the the method such as get post options

128
00:04:12,480 --> 00:04:14,400
head there's a number of them i could go

129
00:04:14,400 --> 00:04:16,160
on alone actually probably not

130
00:04:16,160 --> 00:04:18,000
but let's not and then there's a path

131
00:04:18,000 --> 00:04:19,839
and the path it represents the resource

132
00:04:19,839 --> 00:04:20,639
that you want

133
00:04:20,639 --> 00:04:22,639
it slashes the root resource but this

134
00:04:22,639 --> 00:04:24,720
could be login.html

135
00:04:24,720 --> 00:04:27,280
admin.php etc and then also the version

136
00:04:27,280 --> 00:04:29,520
of the protocol that's self-explanatory

137
00:04:29,520 --> 00:04:32,080
now headers headers may appear in either

138
00:04:32,080 --> 00:04:34,080
requests or responses

139
00:04:34,080 --> 00:04:35,680
and there's many types of them but all

140
00:04:35,680 --> 00:04:37,040
you really need to understand is that

141
00:04:37,040 --> 00:04:38,320
headers are essentially

142
00:04:38,320 --> 00:04:40,800
metadata about the communication that

143
00:04:40,800 --> 00:04:42,720
would dictate which resource

144
00:04:42,720 --> 00:04:44,560
they shouldn't dictate as much what

145
00:04:44,560 --> 00:04:45,919
resources as you get

146
00:04:45,919 --> 00:04:48,800
but but how you should get them and then

147
00:04:48,800 --> 00:04:49,280
last

148
00:04:49,280 --> 00:04:52,240
there's the body of the http request and

149
00:04:52,240 --> 00:04:53,040
response

150
00:04:53,040 --> 00:04:57,440
we'll cover that one later version 0.9

151
00:04:57,440 --> 00:05:01,039
came out circa 1990 um and i say circa

152
00:05:01,039 --> 00:05:03,120
because this wasn't actually

153
00:05:03,120 --> 00:05:05,360
like formally documented in a way that

154
00:05:05,360 --> 00:05:06,479
everyone accepted

155
00:05:06,479 --> 00:05:08,160
there were different implementations of

156
00:05:08,160 --> 00:05:10,000
the protocols there's no headers there's

157
00:05:10,000 --> 00:05:10,400
only

158
00:05:10,400 --> 00:05:13,520
html and text now features were added by

159
00:05:13,520 --> 00:05:15,120
various organizations

160
00:05:15,120 --> 00:05:17,199
but there was extreme interoperability

161
00:05:17,199 --> 00:05:19,360
issues you know one network's requests

162
00:05:19,360 --> 00:05:20,960
were different than another network

163
00:05:20,960 --> 00:05:21,759
servers

164
00:05:21,759 --> 00:05:24,400
and it really didn't work and this this

165
00:05:24,400 --> 00:05:26,000
caused

166
00:05:26,000 --> 00:05:29,199
the need the necessity for version 1.0

167
00:05:29,199 --> 00:05:32,639
in 1996 rfc 1945 came out

168
00:05:32,639 --> 00:05:36,080
specifying this is http 1.0 the

169
00:05:36,080 --> 00:05:37,759
standardization

170
00:05:37,759 --> 00:05:40,160
for those of you that might not know rfc

171
00:05:40,160 --> 00:05:42,240
stands for request for comment

172
00:05:42,240 --> 00:05:44,240
and this is this can be thought of as a

173
00:05:44,240 --> 00:05:45,919
written standard or guideline for the

174
00:05:45,919 --> 00:05:46,800
protocol

175
00:05:46,800 --> 00:05:49,680
it dictates what should or shouldn't or

176
00:05:49,680 --> 00:05:51,600
must or must not be done

177
00:05:51,600 --> 00:05:55,039
when communicating via http

178
00:05:55,039 --> 00:05:57,440
now this the standard also implemented

179
00:05:57,440 --> 00:05:59,120
such features as versioning

180
00:05:59,120 --> 00:06:01,520
it mandated the version within the uh

181
00:06:01,520 --> 00:06:03,039
the initial get request

182
00:06:03,039 --> 00:06:06,240
it also uh specified how headers should

183
00:06:06,240 --> 00:06:06,960
work

184
00:06:06,960 --> 00:06:08,960
uh these headers might be in requests or

185
00:06:08,960 --> 00:06:10,880
responses and recall that headers are

186
00:06:10,880 --> 00:06:13,280
just metadata about the http

187
00:06:13,280 --> 00:06:15,840
communication and then last status codes

188
00:06:15,840 --> 00:06:18,560
this particular example has a 200 okay

189
00:06:18,560 --> 00:06:20,639
however some of you may under uh may

190
00:06:20,639 --> 00:06:23,360
know of like 404 not found or 403

191
00:06:23,360 --> 00:06:24,319
forbidden

192
00:06:24,319 --> 00:06:25,520
there's a number of different status

193
00:06:25,520 --> 00:06:29,039
codes that mean different things

194
00:06:29,039 --> 00:06:33,120
finally we have http 1.1

195
00:06:33,120 --> 00:06:35,840
this was an update to the 1.0 version

196
00:06:35,840 --> 00:06:36,479
and this was

197
00:06:36,479 --> 00:06:39,199
released in two rfcs between 1997 and

198
00:06:39,199 --> 00:06:40,400
1999

199
00:06:40,400 --> 00:06:42,319
and these specified such features such

200
00:06:42,319 --> 00:06:44,319
as having a host header

201
00:06:44,319 --> 00:06:46,880
which is used for virtual host routing

202
00:06:46,880 --> 00:06:48,319
there's content negotiation

203
00:06:48,319 --> 00:06:50,479
cache control connection reuse the

204
00:06:50,479 --> 00:06:51,599
ability to use

205
00:06:51,599 --> 00:06:54,720
um one tcp connection for multiple http

206
00:06:54,720 --> 00:06:55,680
requests

207
00:06:55,680 --> 00:06:57,919
and then what i would like to focus on

208
00:06:57,919 --> 00:06:58,960
is these two features

209
00:06:58,960 --> 00:07:02,639
http pipelining and chunked encoding

210
00:07:02,639 --> 00:07:04,240
and both of these features will be

211
00:07:04,240 --> 00:07:06,000
extremely important later on and these

212
00:07:06,000 --> 00:07:07,680
are features specifically

213
00:07:07,680 --> 00:07:11,599
of http 1.1 that

214
00:07:11,599 --> 00:07:14,479
when combined with certain architectures

215
00:07:14,479 --> 00:07:16,240
can cause a desynchronization

216
00:07:16,240 --> 00:07:18,319
and some of those desecrationizations

217
00:07:18,319 --> 00:07:21,199
may be exploited

218
00:07:21,199 --> 00:07:23,280
next i would be remiss if i did not talk

219
00:07:23,280 --> 00:07:24,720
about https

220
00:07:24,720 --> 00:07:28,000
http version 2 and hdd version 3. these

221
00:07:28,000 --> 00:07:29,120
exist

222
00:07:29,120 --> 00:07:31,440
they're not they're not exactly

223
00:07:31,440 --> 00:07:32,160
pertinent

224
00:07:32,160 --> 00:07:34,000
to this particular discussion but i'll

225
00:07:34,000 --> 00:07:35,759
cover them quickly

226
00:07:35,759 --> 00:07:39,599
https is just http wrapped in encryption

227
00:07:39,599 --> 00:07:42,160
recall that http is just a plain text

228
00:07:42,160 --> 00:07:44,240
protocol it's human readable protocol

229
00:07:44,240 --> 00:07:47,680
https is a session layer transport

230
00:07:47,680 --> 00:07:49,680
for that clear text that's why when you

231
00:07:49,680 --> 00:07:51,440
visit an https site

232
00:07:51,440 --> 00:07:53,360
through a transparent proxy such as verb

233
00:07:53,360 --> 00:07:55,520
suite you can you can see the text and

234
00:07:55,520 --> 00:07:56,879
it's not encrypted at all

235
00:07:56,879 --> 00:07:58,560
that's because it strips the session

236
00:07:58,560 --> 00:08:00,160
layer transform mechanism which may be

237
00:08:00,160 --> 00:08:01,360
ssl or

238
00:08:01,360 --> 00:08:04,400
tls it should be tls nowadays

239
00:08:04,400 --> 00:08:06,240
but those are both session transport

240
00:08:06,240 --> 00:08:08,000
mechanisms

241
00:08:08,000 --> 00:08:11,919
http 2 is also a thing it changes the it

242
00:08:11,919 --> 00:08:13,440
changes fundamentally the way it used to

243
00:08:13,440 --> 00:08:15,199
be is transported and it is not

244
00:08:15,199 --> 00:08:18,479
human readable but it's much faster

245
00:08:18,479 --> 00:08:20,479
uh it's fast because it supports data

246
00:08:20,479 --> 00:08:22,720
compression and header compression alike

247
00:08:22,720 --> 00:08:25,280
in addition it doesn't necessarily wait

248
00:08:25,280 --> 00:08:26,319
for the client

249
00:08:26,319 --> 00:08:29,280
to send all of the requests if if the

250
00:08:29,280 --> 00:08:31,039
client requests one thing the server may

251
00:08:31,039 --> 00:08:31,520
send

252
00:08:31,520 --> 00:08:34,479
many many different responses even even

253
00:08:34,479 --> 00:08:34,958
without

254
00:08:34,958 --> 00:08:37,760
without the corresponding requests this

255
00:08:37,760 --> 00:08:39,519
is out of scope for this presentation in

256
00:08:39,519 --> 00:08:40,000
addition

257
00:08:40,000 --> 00:08:43,279
to http 3 which in fact is not

258
00:08:43,279 --> 00:08:46,800
actually documented in a rfc um

259
00:08:46,800 --> 00:08:48,720
that is does not get out of draft status

260
00:08:48,720 --> 00:08:50,800
it's not yet finalized or published

261
00:08:50,800 --> 00:08:54,160
but http 3 is http over quick

262
00:08:54,160 --> 00:08:56,320
quick uh this was developed in google by

263
00:08:56,320 --> 00:08:57,200
20 in

264
00:08:57,200 --> 00:09:00,240
2012 however uh you can think of this as

265
00:09:00,240 --> 00:09:00,560
like

266
00:09:00,560 --> 00:09:04,000
tcp 2.0 it's a replacement for tcp

267
00:09:04,000 --> 00:09:06,640
ideally a more secure tcp and really

268
00:09:06,640 --> 00:09:07,279
cool but

269
00:09:07,279 --> 00:09:11,040
i'll scope this presentation i know

270
00:09:11,040 --> 00:09:13,279
there are a few things that we should

271
00:09:13,279 --> 00:09:14,080
discuss

272
00:09:14,080 --> 00:09:15,839
that we need to establish before getting

273
00:09:15,839 --> 00:09:19,040
into the such a complex topic such as

274
00:09:19,040 --> 00:09:21,600
http request muggling and one of those

275
00:09:21,600 --> 00:09:23,920
is http connections

276
00:09:23,920 --> 00:09:26,959
the most simple connection in an http

277
00:09:26,959 --> 00:09:27,680
request is

278
00:09:27,680 --> 00:09:29,839
a tcp handshake for those of you in

279
00:09:29,839 --> 00:09:31,279
computer science class may

280
00:09:31,279 --> 00:09:34,480
know may recall that it's uh sim

281
00:09:34,480 --> 00:09:36,959
synack hack and that establishes the tcp

282
00:09:36,959 --> 00:09:37,760
handshake

283
00:09:37,760 --> 00:09:39,680
well then there'll be an http request an

284
00:09:39,680 --> 00:09:40,800
http response

285
00:09:40,800 --> 00:09:43,680
and then then a tcp termination

286
00:09:43,680 --> 00:09:44,399
handshake

287
00:09:44,399 --> 00:09:47,200
so it's a one tcp connection per http

288
00:09:47,200 --> 00:09:48,399
request

289
00:09:48,399 --> 00:09:51,279
as you can imagine this is extremely

290
00:09:51,279 --> 00:09:52,399
this is extremely

291
00:09:52,399 --> 00:09:55,519
inefficient so http 1.1

292
00:09:55,519 --> 00:09:59,360
introduced tcp connection reuse

293
00:09:59,360 --> 00:10:01,360
and this is a much more efficient use of

294
00:10:01,360 --> 00:10:02,480
sockets where

295
00:10:02,480 --> 00:10:04,880
one tcp connection could hold many

296
00:10:04,880 --> 00:10:06,720
different requests and responses

297
00:10:06,720 --> 00:10:08,959
in succession now one thing that this

298
00:10:08,959 --> 00:10:10,800
also allows for is http

299
00:10:10,800 --> 00:10:13,440
pipelining which i'll show in one of the

300
00:10:13,440 --> 00:10:14,399
images

301
00:10:14,399 --> 00:10:16,800
in the next few slides so this is the

302
00:10:16,800 --> 00:10:18,880
the least efficient method of

303
00:10:18,880 --> 00:10:20,320
short-lived connections

304
00:10:20,320 --> 00:10:22,800
each of those blue and yellow bands on

305
00:10:22,800 --> 00:10:25,360
the screen are separate tcp established

306
00:10:25,360 --> 00:10:28,959
tcp uh finalized and so there's one

307
00:10:28,959 --> 00:10:32,079
http request per tcp connection now with

308
00:10:32,079 --> 00:10:33,839
persistent connections or connection

309
00:10:33,839 --> 00:10:34,800
reuse

310
00:10:34,800 --> 00:10:37,120
there's a connection established request

311
00:10:37,120 --> 00:10:38,720
response request response request

312
00:10:38,720 --> 00:10:39,600
response and then

313
00:10:39,600 --> 00:10:43,040
tcp connection terminated much more

314
00:10:43,040 --> 00:10:44,560
efficient however

315
00:10:44,560 --> 00:10:46,800
let's go one step further with http

316
00:10:46,800 --> 00:10:47,760
pipelining

317
00:10:47,760 --> 00:10:50,000
this makes use of the same tcp

318
00:10:50,000 --> 00:10:51,040
connection

319
00:10:51,040 --> 00:10:53,519
but the client doesn't wait for http

320
00:10:53,519 --> 00:10:55,760
responses it adds yet another layer of

321
00:10:55,760 --> 00:10:56,480
speed

322
00:10:56,480 --> 00:10:58,560
in this manner a client can go give me

323
00:10:58,560 --> 00:11:00,160
this and that and this

324
00:11:00,160 --> 00:11:02,160
and then the server can take its time

325
00:11:02,160 --> 00:11:03,680
parse through those requests

326
00:11:03,680 --> 00:11:05,440
figure out which resources it needs to

327
00:11:05,440 --> 00:11:07,279
return and then return them to the

328
00:11:07,279 --> 00:11:09,600
client

329
00:11:10,079 --> 00:11:11,760
all right the second thing we must

330
00:11:11,760 --> 00:11:14,240
discuss is http architecture and i'll

331
00:11:14,240 --> 00:11:16,079
briefly go over this but this is more

332
00:11:16,079 --> 00:11:16,480
for

333
00:11:16,480 --> 00:11:18,320
the those in the audience that may not

334
00:11:18,320 --> 00:11:20,320
be familiar with enterprise

335
00:11:20,320 --> 00:11:22,640
level architecture typically there's

336
00:11:22,640 --> 00:11:24,079
going to be more than just

337
00:11:24,079 --> 00:11:26,720
a browser and a web server however for

338
00:11:26,720 --> 00:11:28,560
the purpose of this presentation

339
00:11:28,560 --> 00:11:30,800
let's think of this in this kind of

340
00:11:30,800 --> 00:11:32,800
abstraction where there's a front end

341
00:11:32,800 --> 00:11:35,279
and a back end now on the left hand side

342
00:11:35,279 --> 00:11:36,880
of the diagram this is port switcher's

343
00:11:36,880 --> 00:11:38,079
diagram by the way

344
00:11:38,079 --> 00:11:40,160
uh there's there's clients these can be

345
00:11:40,160 --> 00:11:42,079
these can be users they can be clients

346
00:11:42,079 --> 00:11:42,399
but

347
00:11:42,399 --> 00:11:44,079
more importantly they're they're using

348
00:11:44,079 --> 00:11:46,000
browsers so these browsers make the

349
00:11:46,000 --> 00:11:47,760
request and it goes through some sort of

350
00:11:47,760 --> 00:11:50,560
front and web mechanism or mechanisms

351
00:11:50,560 --> 00:11:52,560
this might be firewall this might be a

352
00:11:52,560 --> 00:11:54,880
load balancer it could be a proxy or a

353
00:11:54,880 --> 00:11:56,240
web server

354
00:11:56,240 --> 00:11:58,000
and then it that front end brokers the

355
00:11:58,000 --> 00:11:59,760
connection to the back end

356
00:11:59,760 --> 00:12:01,360
usually a web server that actually

357
00:12:01,360 --> 00:12:03,120
provides the resources

358
00:12:03,120 --> 00:12:06,160
this kind of architecture has many uh

359
00:12:06,160 --> 00:12:09,360
as many pros and and helps with the

360
00:12:09,360 --> 00:12:10,880
availability

361
00:12:10,880 --> 00:12:12,560
of the platform overall it helps with

362
00:12:12,560 --> 00:12:14,160
the speed of the platform overall

363
00:12:14,160 --> 00:12:15,680
especially when it caches

364
00:12:15,680 --> 00:12:17,839
the front end might cache some resources

365
00:12:17,839 --> 00:12:18,959
or responses

366
00:12:18,959 --> 00:12:20,800
uh however we're going to think of the

367
00:12:20,800 --> 00:12:22,639
the abstraction in the front end

368
00:12:22,639 --> 00:12:24,000
and back end for the rest of this

369
00:12:24,000 --> 00:12:26,160
presentation

370
00:12:26,160 --> 00:12:30,399
last let's talk about transferring http

371
00:12:30,399 --> 00:12:32,720
messages this is the thing that i

372
00:12:32,720 --> 00:12:34,320
glanced over in the uh

373
00:12:34,320 --> 00:12:35,920
when i was describing the components of

374
00:12:35,920 --> 00:12:38,880
an http message was the http

375
00:12:38,880 --> 00:12:41,600
body now we talked about the first line

376
00:12:41,600 --> 00:12:43,200
we talked about headers which you have

377
00:12:43,200 --> 00:12:43,519
one

378
00:12:43,519 --> 00:12:45,440
or many or none and then finally you

379
00:12:45,440 --> 00:12:46,800
have the payload which is

380
00:12:46,800 --> 00:12:49,760
called the body now when when parsing

381
00:12:49,760 --> 00:12:50,880
these requests

382
00:12:50,880 --> 00:12:54,079
the server or http middleware

383
00:12:54,079 --> 00:12:56,079
they need to understand where a request

384
00:12:56,079 --> 00:12:58,560
begins and where a request ends

385
00:12:58,560 --> 00:13:01,200
well how they do that is in three main

386
00:13:01,200 --> 00:13:02,639
ways that i'm going to describe here and

387
00:13:02,639 --> 00:13:03,920
the main way

388
00:13:03,920 --> 00:13:07,040
that the most common way is by looking

389
00:13:07,040 --> 00:13:08,480
at content length

390
00:13:08,480 --> 00:13:10,800
so each of these lines in the http

391
00:13:10,800 --> 00:13:11,920
request shown

392
00:13:11,920 --> 00:13:15,200
are separated by not just a return

393
00:13:15,200 --> 00:13:18,000
but a carriage return line feed these

394
00:13:18,000 --> 00:13:19,680
are two separate bytes it's a carriage

395
00:13:19,680 --> 00:13:20,480
returning byte

396
00:13:20,480 --> 00:13:23,200
and a line feed button which is a hex d

397
00:13:23,200 --> 00:13:23,920
and hexa

398
00:13:23,920 --> 00:13:27,040
or colloquially you know slash r slash

399
00:13:27,040 --> 00:13:30,160
n so this is important to understand

400
00:13:30,160 --> 00:13:32,639
and then the uh the content length is

401
00:13:32,639 --> 00:13:33,360
the

402
00:13:33,360 --> 00:13:35,279
is is given in a header and that shows

403
00:13:35,279 --> 00:13:37,360
the number of bytes to expect so there's

404
00:13:37,360 --> 00:13:39,920
27 bytes in this particular example

405
00:13:39,920 --> 00:13:42,560
to expect after the 27th fight the

406
00:13:42,560 --> 00:13:43,040
message

407
00:13:43,040 --> 00:13:45,040
ends and there may be a new request

408
00:13:45,040 --> 00:13:46,839
right after if it's

409
00:13:46,839 --> 00:13:49,519
pipelined next

410
00:13:49,519 --> 00:13:51,839
multi-part form data those of you who

411
00:13:51,839 --> 00:13:53,360
have actually inspected

412
00:13:53,360 --> 00:13:55,440
traffic within a transparent proxy such

413
00:13:55,440 --> 00:13:56,560
as burp suite or even

414
00:13:56,560 --> 00:14:00,160
even looked at say a file upload

415
00:14:00,160 --> 00:14:02,959
capture and wire sharp you may recognize

416
00:14:02,959 --> 00:14:03,920
this one

417
00:14:03,920 --> 00:14:06,079
so each instead of each parameter

418
00:14:06,079 --> 00:14:08,079
delimited by an ampersand

419
00:14:08,079 --> 00:14:10,880
or having key value pairs in multi-part

420
00:14:10,880 --> 00:14:13,040
form data parameters are delimited by

421
00:14:13,040 --> 00:14:15,120
some sort of boundary and this boundary

422
00:14:15,120 --> 00:14:16,079
is defined

423
00:14:16,079 --> 00:14:18,959
in the content type header uh you can

424
00:14:18,959 --> 00:14:20,560
see the boundaries on the slides

425
00:14:20,560 --> 00:14:23,120
and then in the slide and it starts with

426
00:14:23,120 --> 00:14:24,160
the boundary

427
00:14:24,160 --> 00:14:25,279
there's another value and then a

428
00:14:25,279 --> 00:14:27,120
boundary and then to end it's the

429
00:14:27,120 --> 00:14:28,800
boundary with the dash dash

430
00:14:28,800 --> 00:14:30,720
this is just another way of transmitting

431
00:14:30,720 --> 00:14:32,639
data another way for the servers to

432
00:14:32,639 --> 00:14:34,079
interpret where a message

433
00:14:34,079 --> 00:14:37,120
ends and now last

434
00:14:37,120 --> 00:14:39,440
probably the least commonly known and

435
00:14:39,440 --> 00:14:40,240
this is what's

436
00:14:40,240 --> 00:14:42,000
what's tripped up a lot of blue teamers

437
00:14:42,000 --> 00:14:43,360
and pen testers alike

438
00:14:43,360 --> 00:14:47,040
and http message bodies have an encoding

439
00:14:47,040 --> 00:14:49,360
especially this was implemented in http

440
00:14:49,360 --> 00:14:50,320
1.1

441
00:14:50,320 --> 00:14:52,880
there's a transfer encoding chunk or it

442
00:14:52,880 --> 00:14:53,519
implements

443
00:14:53,519 --> 00:14:56,800
chunked encoding now this is used when

444
00:14:56,800 --> 00:14:59,760
a server or client both can both consent

445
00:14:59,760 --> 00:15:01,199
chunked encoding

446
00:15:01,199 --> 00:15:03,519
don't necessarily know how long the

447
00:15:03,519 --> 00:15:05,279
message is going to be so it's treated

448
00:15:05,279 --> 00:15:07,360
more like a stream

449
00:15:07,360 --> 00:15:08,720
we don't know how long the message is

450
00:15:08,720 --> 00:15:10,399
going to be in advance so we keep

451
00:15:10,399 --> 00:15:12,079
sending bytes keep sending bytes

452
00:15:12,079 --> 00:15:16,000
until you reach an end now each chunk

453
00:15:16,000 --> 00:15:18,000
is delimited by a carriage return line

454
00:15:18,000 --> 00:15:20,959
feed which is two bytes in hex

455
00:15:20,959 --> 00:15:22,880
and then we have the chunked data so

456
00:15:22,880 --> 00:15:24,160
look at the diagram

457
00:15:24,160 --> 00:15:26,399
the header which is again metadata about

458
00:15:26,399 --> 00:15:28,160
the request is transfer coding chunk

459
00:15:28,160 --> 00:15:29,600
that says we're doing chunked encoding

460
00:15:29,600 --> 00:15:30,959
in this request

461
00:15:30,959 --> 00:15:34,480
and now each line has the number of

462
00:15:34,480 --> 00:15:35,759
bytes to expect

463
00:15:35,759 --> 00:15:38,639
and then a payload in this example line

464
00:15:38,639 --> 00:15:39,759
5

465
00:15:39,759 --> 00:15:42,000
has seven there's seven bytes in mozilla

466
00:15:42,000 --> 00:15:43,759
line seven has nine and there's nine

467
00:15:43,759 --> 00:15:44,880
bytes in developers

468
00:15:44,880 --> 00:15:46,720
and this goes and so on and so on all

469
00:15:46,720 --> 00:15:48,480
the way until he reaches zero and the

470
00:15:48,480 --> 00:15:49,600
zero byte chunk

471
00:15:49,600 --> 00:15:52,639
ends the message zero is extremely

472
00:15:52,639 --> 00:15:53,759
important

473
00:15:53,759 --> 00:15:55,440
in chunkton coding and it's also

474
00:15:55,440 --> 00:15:57,519
extremely important to the key of how

475
00:15:57,519 --> 00:15:59,279
this attack works

476
00:15:59,279 --> 00:16:02,160
and again this can be in requests or

477
00:16:02,160 --> 00:16:04,000
responses

478
00:16:04,000 --> 00:16:06,160
all right now we've all been waiting for

479
00:16:06,160 --> 00:16:08,079
18 minutes in and now we're finally

480
00:16:08,079 --> 00:16:09,839
getting to http smuggling

481
00:16:09,839 --> 00:16:12,680
http splitting and and http

482
00:16:12,680 --> 00:16:14,079
desynchronization

483
00:16:14,079 --> 00:16:16,000
what are all of these how do they relate

484
00:16:16,000 --> 00:16:18,240
you may have read these terms in a blog

485
00:16:18,240 --> 00:16:20,240
uh you may have thought oh no that's too

486
00:16:20,240 --> 00:16:22,240
complicated or looked into it and have

487
00:16:22,240 --> 00:16:23,680
your eyes glaze over

488
00:16:23,680 --> 00:16:25,920
but but here we're going to examine what

489
00:16:25,920 --> 00:16:27,199
actually these attacks

490
00:16:27,199 --> 00:16:30,240
look like and in order to do that let's

491
00:16:30,240 --> 00:16:32,560
take a look at the history

492
00:16:32,560 --> 00:16:36,240
in 2005 was the first time http request

493
00:16:36,240 --> 00:16:38,240
smuggling was actually documented and

494
00:16:38,240 --> 00:16:38,959
published

495
00:16:38,959 --> 00:16:41,199
and this was published by watchfire

496
00:16:41,199 --> 00:16:42,800
which was a security company they

497
00:16:42,800 --> 00:16:44,720
published a white paper the link is

498
00:16:44,720 --> 00:16:47,360
uh is on the slide it's a short link but

499
00:16:47,360 --> 00:16:50,240
redirects to cgi security.com so they

500
00:16:50,240 --> 00:16:51,440
first

501
00:16:51,440 --> 00:16:53,360
released research in a white paper on

502
00:16:53,360 --> 00:16:54,480
how to smuggle

503
00:16:54,480 --> 00:16:58,000
an http request and they did so um

504
00:16:58,000 --> 00:16:59,920
with a with a certain setup that i'll

505
00:16:59,920 --> 00:17:01,199
i'll get into

506
00:17:01,199 --> 00:17:03,839
later but the impact was that they were

507
00:17:03,839 --> 00:17:05,520
able to deny surface to certain web

508
00:17:05,520 --> 00:17:06,959
pages and they were able to

509
00:17:06,959 --> 00:17:09,520
poison the webcast which was a super

510
00:17:09,520 --> 00:17:11,039
cool novel technique especially for

511
00:17:11,039 --> 00:17:12,079
2005.

512
00:17:12,079 --> 00:17:13,919
it kind of ended there those bugs were

513
00:17:13,919 --> 00:17:15,520
patched and then it went

514
00:17:15,520 --> 00:17:19,119
silent for 11 years 11 years later

515
00:17:19,119 --> 00:17:22,400
regelero and defcon 24 uh gave some gave

516
00:17:22,400 --> 00:17:23,599
his presentation

517
00:17:23,599 --> 00:17:26,480
uh about http request modeling smuggling

518
00:17:26,480 --> 00:17:29,120
wookies within the http protocol

519
00:17:29,120 --> 00:17:31,919
this was not a popular talk and it i

520
00:17:31,919 --> 00:17:32,799
don't think it got

521
00:17:32,799 --> 00:17:35,840
enough of the recognition that it

522
00:17:35,840 --> 00:17:36,720
deserved for

523
00:17:36,720 --> 00:17:38,960
for completely turning the http protocol

524
00:17:38,960 --> 00:17:40,160
on its head

525
00:17:40,160 --> 00:17:42,640
and he found vulnerabilities in gold

526
00:17:42,640 --> 00:17:44,400
playing varnish a number of other

527
00:17:44,400 --> 00:17:46,960
both middleware and web servers but the

528
00:17:46,960 --> 00:17:47,679
main thing that

529
00:17:47,679 --> 00:17:50,960
he was missing was a weaponization

530
00:17:50,960 --> 00:17:54,000
like reliable weaponization and reliable

531
00:17:54,000 --> 00:17:56,160
ability to detect this vulnerability

532
00:17:56,160 --> 00:17:57,919
from a blackhawks perspective

533
00:17:57,919 --> 00:18:00,880
he was infamously quoted as you will not

534
00:18:00,880 --> 00:18:01,360
earn

535
00:18:01,360 --> 00:18:04,799
bounties for http smuggling

536
00:18:04,799 --> 00:18:06,880
james kettle uh proved him wrong three

537
00:18:06,880 --> 00:18:09,679
years later uh he also goes by albino

538
00:18:09,679 --> 00:18:10,160
wax

539
00:18:10,160 --> 00:18:12,840
on twitter that's his handle he spoke at

540
00:18:12,840 --> 00:18:15,440
blackhat19.com 27 three years later

541
00:18:15,440 --> 00:18:17,280
and and the white papers attached here

542
00:18:17,280 --> 00:18:19,440
but though one of the novel

543
00:18:19,440 --> 00:18:22,240
uh achievements of james cattle was that

544
00:18:22,240 --> 00:18:23,280
he was able to

545
00:18:23,280 --> 00:18:26,240
code a custom tool uh a burp suite

546
00:18:26,240 --> 00:18:26,880
extension

547
00:18:26,880 --> 00:18:28,640
or a series of burp street extensions

548
00:18:28,640 --> 00:18:30,400
that could both weaponize this and

549
00:18:30,400 --> 00:18:32,240
reliably detect

550
00:18:32,240 --> 00:18:35,200
this uh issue this ability to smuggle

551
00:18:35,200 --> 00:18:36,480
hdb requests

552
00:18:36,480 --> 00:18:39,360
in and cause a desynchronization and he

553
00:18:39,360 --> 00:18:41,520
he earned the adk over 80k

554
00:18:41,520 --> 00:18:44,640
and bug bounties uh and and he

555
00:18:44,640 --> 00:18:47,120
presented he he released the tools

556
00:18:47,120 --> 00:18:48,080
necessary

557
00:18:48,080 --> 00:18:50,480
uh all open to the public no paid tools

558
00:18:50,480 --> 00:18:51,280
or anything

559
00:18:51,280 --> 00:18:53,280
and the fact that he received bounties i

560
00:18:53,280 --> 00:18:54,880
think was attractive to a lot of the

561
00:18:54,880 --> 00:18:56,559
audience

562
00:18:56,559 --> 00:18:58,960
now uh two years later this year that

563
00:18:58,960 --> 00:19:00,080
brings us to this year

564
00:19:00,080 --> 00:19:02,400
last month uh james cattle also

565
00:19:02,400 --> 00:19:03,600
published on twitter

566
00:19:03,600 --> 00:19:07,039
that he has identified some requests

567
00:19:07,039 --> 00:19:09,440
smuggling vulnerabilities in http 2

568
00:19:09,440 --> 00:19:10,400
itself

569
00:19:10,400 --> 00:19:12,880
which i i'm really excited for and in

570
00:19:12,880 --> 00:19:14,240
addition a meal learner

571
00:19:14,240 --> 00:19:16,000
also gave a presentation they kind of

572
00:19:16,000 --> 00:19:17,280
had simultaneous

573
00:19:17,280 --> 00:19:19,440
research going towards the same in the

574
00:19:19,440 --> 00:19:20,799
same direction

575
00:19:20,799 --> 00:19:22,400
i haven't done a whole lot of research

576
00:19:22,400 --> 00:19:24,960
in http 2 request smuggling so i don't

577
00:19:24,960 --> 00:19:26,320
intend to cover that over this

578
00:19:26,320 --> 00:19:27,360
presentation

579
00:19:27,360 --> 00:19:30,000
um but but just know that these exist

580
00:19:30,000 --> 00:19:30,720
but however

581
00:19:30,720 --> 00:19:33,679
however we won't go into them today all

582
00:19:33,679 --> 00:19:34,559
right

583
00:19:34,559 --> 00:19:36,640
the attack what would an attack look

584
00:19:36,640 --> 00:19:38,240
like when we're smuggling

585
00:19:38,240 --> 00:19:40,640
an http request this goes by the

586
00:19:40,640 --> 00:19:42,559
watchfire's example of

587
00:19:42,559 --> 00:19:44,880
a browser on the left side a web proxy

588
00:19:44,880 --> 00:19:45,600
in the center

589
00:19:45,600 --> 00:19:47,600
and then a web server on the on the

590
00:19:47,600 --> 00:19:48,960
right hand of the slide there

591
00:19:48,960 --> 00:19:50,559
so this is again the same sort of

592
00:19:50,559 --> 00:19:52,080
architecture that we've abstracted

593
00:19:52,080 --> 00:19:54,880
that we'd look at consider the following

594
00:19:54,880 --> 00:19:56,640
request and these all three

595
00:19:56,640 --> 00:19:59,600
of these colored texts are sent by the

596
00:19:59,600 --> 00:20:02,400
brow by by the same browser

597
00:20:02,400 --> 00:20:04,880
to the human eye remember http is human

598
00:20:04,880 --> 00:20:05,840
readable

599
00:20:05,840 --> 00:20:07,679
this looks like three separate requests

600
00:20:07,679 --> 00:20:09,919
there's a blue post request there's a

601
00:20:09,919 --> 00:20:10,720
purple

602
00:20:10,720 --> 00:20:13,520
get request to poison.html and then a

603
00:20:13,520 --> 00:20:15,840
red request down below

604
00:20:15,840 --> 00:20:19,280
however those those who

605
00:20:19,280 --> 00:20:21,760
who know a bit about the http protocol

606
00:20:21,760 --> 00:20:22,880
might have noticed something

607
00:20:22,880 --> 00:20:25,919
tricky about this request there's two

608
00:20:25,919 --> 00:20:28,240
content length headers within the blue

609
00:20:28,240 --> 00:20:29,280
within the blue

610
00:20:29,280 --> 00:20:31,520
request so what what's that all about

611
00:20:31,520 --> 00:20:32,400
well

612
00:20:32,400 --> 00:20:34,799
when these appliances are trying when

613
00:20:34,799 --> 00:20:36,720
these appliances are parsing all of this

614
00:20:36,720 --> 00:20:37,120
and

615
00:20:37,120 --> 00:20:38,880
these these requests are all sent one

616
00:20:38,880 --> 00:20:40,720
after another they have to determine

617
00:20:40,720 --> 00:20:41,760
where one begins

618
00:20:41,760 --> 00:20:43,600
and where the other one ends and part of

619
00:20:43,600 --> 00:20:45,280
how they do that as we talked about

620
00:20:45,280 --> 00:20:48,320
before is in content like letters and

621
00:20:48,320 --> 00:20:50,000
transfer encoding headers but this is

622
00:20:50,000 --> 00:20:50,559
just

623
00:20:50,559 --> 00:20:51,840
we're just dealing with content-like

624
00:20:51,840 --> 00:20:53,840
patterns

625
00:20:53,840 --> 00:20:55,760
what they found in their research was

626
00:20:55,760 --> 00:20:57,600
that the sun one

627
00:20:57,600 --> 00:21:00,640
web proxy was programmed in such a way

628
00:21:00,640 --> 00:21:03,120
that would take the very last content

629
00:21:03,120 --> 00:21:04,000
link header

630
00:21:04,000 --> 00:21:05,919
that was presented and it would go by

631
00:21:05,919 --> 00:21:07,679
that it would just throw out the

632
00:21:07,679 --> 00:21:11,360
the other one and so the web proxy saw

633
00:21:11,360 --> 00:21:14,320
from its perspective the blue request as

634
00:21:14,320 --> 00:21:15,520
as

635
00:21:15,520 --> 00:21:17,919
the blue request as an entire request

636
00:21:17,919 --> 00:21:19,600
with the purple in its

637
00:21:19,600 --> 00:21:22,960
post by it it counted 44 bytes

638
00:21:22,960 --> 00:21:25,039
after that first carriage return line

639
00:21:25,039 --> 00:21:26,400
feed and it happened in

640
00:21:26,400 --> 00:21:28,720
and the watch fire engineers happened to

641
00:21:28,720 --> 00:21:30,000
create the purple

642
00:21:30,000 --> 00:21:32,960
request which is exactly 44 bytes so

643
00:21:32,960 --> 00:21:34,480
it's going to see request number one

644
00:21:34,480 --> 00:21:36,880
as blue purple and then a request number

645
00:21:36,880 --> 00:21:38,640
two has an entirely separate

646
00:21:38,640 --> 00:21:42,159
http request however

647
00:21:42,159 --> 00:21:43,760
all right so yeah there's there's the uh

648
00:21:43,760 --> 00:21:45,360
diagram of a

649
00:21:45,360 --> 00:21:47,039
blue purple and then and then red and

650
00:21:47,039 --> 00:21:49,200
those are http requests going down

651
00:21:49,200 --> 00:21:52,720
the pipe however the same vendors

652
00:21:52,720 --> 00:21:55,760
web server interpreted it differently it

653
00:21:55,760 --> 00:21:57,679
interpreted the first header that was

654
00:21:57,679 --> 00:21:59,440
given and then throughout all the rest

655
00:21:59,440 --> 00:22:02,559
so the web server sees this as a content

656
00:22:02,559 --> 00:22:03,039
link

657
00:22:03,039 --> 00:22:06,240
zero request and then sees the

658
00:22:06,240 --> 00:22:08,080
purple and the red concatenates them

659
00:22:08,080 --> 00:22:10,080
together and because of the way they

660
00:22:10,080 --> 00:22:11,679
engineered these requests it was all

661
00:22:11,679 --> 00:22:12,000
seen

662
00:22:12,000 --> 00:22:14,720
as one single request and the trick that

663
00:22:14,720 --> 00:22:16,480
they did was they they created a bogus

664
00:22:16,480 --> 00:22:17,679
header bla

665
00:22:17,679 --> 00:22:20,480
you'll notice that on line 10 and then

666
00:22:20,480 --> 00:22:22,720
the first line of the red request was

667
00:22:22,720 --> 00:22:24,320
then as a header and it really didn't

668
00:22:24,320 --> 00:22:24,880
count

669
00:22:24,880 --> 00:22:26,960
then the rest of it was headers and it

670
00:22:26,960 --> 00:22:28,480
just saw this as one

671
00:22:28,480 --> 00:22:30,960
complete request so the back end web

672
00:22:30,960 --> 00:22:32,159
server sees this as a completely

673
00:22:32,159 --> 00:22:33,760
different thing it sees request number

674
00:22:33,760 --> 00:22:34,480
one is blue

675
00:22:34,480 --> 00:22:36,720
request number two as the purple and red

676
00:22:36,720 --> 00:22:38,559
sandwich together

677
00:22:38,559 --> 00:22:41,120
okay great what does this actually get

678
00:22:41,120 --> 00:22:42,720
us

679
00:22:42,720 --> 00:22:46,240
the web proxy sees a blue and a red and

680
00:22:46,240 --> 00:22:48,080
the web server sees a blue

681
00:22:48,080 --> 00:22:50,000
and a purple so this difference in

682
00:22:50,000 --> 00:22:51,120
behavior between

683
00:22:51,120 --> 00:22:53,880
the requests number two from getting a

684
00:22:53,880 --> 00:22:56,559
login.html and request number two

685
00:22:56,559 --> 00:22:59,360
from the server getting poison.html

686
00:22:59,360 --> 00:23:00,880
that's going to cause an issue when

687
00:23:00,880 --> 00:23:02,159
there's caching involved

688
00:23:02,159 --> 00:23:04,720
they found so the attacker requests

689
00:23:04,720 --> 00:23:06,159
sends this malicious request

690
00:23:06,159 --> 00:23:08,480
asks for login.html but the backend web

691
00:23:08,480 --> 00:23:10,200
server it doesn't see the request for

692
00:23:10,200 --> 00:23:11,360
login.html

693
00:23:11,360 --> 00:23:13,520
it sees a request for poisoning that

694
00:23:13,520 --> 00:23:16,000
html if this is a 404

695
00:23:16,000 --> 00:23:17,679
the web proxy is going to return not

696
00:23:17,679 --> 00:23:20,080
found it doesn't exist on the server

697
00:23:20,080 --> 00:23:22,480
however the response is cached next time

698
00:23:22,480 --> 00:23:24,240
when a victim goes to log in

699
00:23:24,240 --> 00:23:26,799
to that webpage they get a 404 not found

700
00:23:26,799 --> 00:23:28,320
because they they're they're getting the

701
00:23:28,320 --> 00:23:29,120
uh

702
00:23:29,120 --> 00:23:32,880
what's cached in the web proxy

703
00:23:32,880 --> 00:23:36,400
pretty cool right

704
00:23:36,400 --> 00:23:39,679
so what is the actual impact uh we see a

705
00:23:39,679 --> 00:23:40,720
denial of service

706
00:23:40,720 --> 00:23:42,559
so we're able to deny people logging

707
00:23:42,559 --> 00:23:44,960
into this website or deny service to any

708
00:23:44,960 --> 00:23:47,120
really any page that we can think of and

709
00:23:47,120 --> 00:23:48,159
then

710
00:23:48,159 --> 00:23:50,880
there's webcast poisoning uh which which

711
00:23:50,880 --> 00:23:53,200
we also saw was possible

712
00:23:53,200 --> 00:23:55,200
all right let's move on to uh james

713
00:23:55,200 --> 00:23:56,480
cattle's research because it's

714
00:23:56,480 --> 00:23:58,559
it's it's one of the coolest so james

715
00:23:58,559 --> 00:23:59,840
cattle took this

716
00:23:59,840 --> 00:24:02,320
uh five steps further and it's quite

717
00:24:02,320 --> 00:24:03,679
wonderful research that he did

718
00:24:03,679 --> 00:24:05,200
if you're interested i'd recommend

719
00:24:05,200 --> 00:24:06,960
reading the actual white paper that was

720
00:24:06,960 --> 00:24:09,360
submitted to black hat

721
00:24:09,360 --> 00:24:12,240
so again we're smuggling http in the

722
00:24:12,240 --> 00:24:13,120
same manner as

723
00:24:13,120 --> 00:24:16,559
watch fire except due to updates and how

724
00:24:16,559 --> 00:24:19,440
these http uh

725
00:24:19,440 --> 00:24:22,240
packets are are handled by the different

726
00:24:22,240 --> 00:24:22,960
middleware

727
00:24:22,960 --> 00:24:25,440
and and the front end in the backend uh

728
00:24:25,440 --> 00:24:27,919
it causes this desynchronization

729
00:24:27,919 --> 00:24:30,000
where one thinks that one request is

730
00:24:30,000 --> 00:24:31,840
being being sent and the other thinks

731
00:24:31,840 --> 00:24:33,760
that another request is being sent

732
00:24:33,760 --> 00:24:35,440
and they may be mismatched where one

733
00:24:35,440 --> 00:24:36,799
thinks there's two requests or one

734
00:24:36,799 --> 00:24:38,480
thinks there's three requests and sends

735
00:24:38,480 --> 00:24:39,520
the responses

736
00:24:39,520 --> 00:24:41,279
and it causes a de-synchronization and a

737
00:24:41,279 --> 00:24:43,279
lot of unexpected behavior

738
00:24:43,279 --> 00:24:44,880
let's go find out how that can be

739
00:24:44,880 --> 00:24:47,440
exploitable

740
00:24:47,440 --> 00:24:49,440
all right so again we're back to the

741
00:24:49,440 --> 00:24:50,960
abstraction of we have

742
00:24:50,960 --> 00:24:53,200
client browsers a front end and a back

743
00:24:53,200 --> 00:24:54,400
end

744
00:24:54,400 --> 00:24:56,559
those boxes are different web requests

745
00:24:56,559 --> 00:24:57,919
and they're all being shoved down the

746
00:24:57,919 --> 00:24:58,799
same pipe

747
00:24:58,799 --> 00:25:01,919
using http pipelining the front end is

748
00:25:01,919 --> 00:25:03,679
sending this in a way to the back end

749
00:25:03,679 --> 00:25:05,039
that's usually

750
00:25:05,039 --> 00:25:08,080
chunked in coding for efficiency but but

751
00:25:08,080 --> 00:25:09,520
not always

752
00:25:09,520 --> 00:25:11,840
so consider an attacker an attacker

753
00:25:11,840 --> 00:25:14,000
sends a malformed http request

754
00:25:14,000 --> 00:25:16,320
it gets shoved down the pipe victims

755
00:25:16,320 --> 00:25:17,919
send requests through the front end it

756
00:25:17,919 --> 00:25:19,360
gets shoved down the pipe to the back

757
00:25:19,360 --> 00:25:19,919
end

758
00:25:19,919 --> 00:25:21,919
and if the back end doesn't parse this

759
00:25:21,919 --> 00:25:23,600
exactly like the front end does

760
00:25:23,600 --> 00:25:26,799
is going to cause issues so

761
00:25:26,799 --> 00:25:30,000
the first example um again a repeat from

762
00:25:30,000 --> 00:25:31,360
the watch fire

763
00:25:31,360 --> 00:25:35,279
uh why is this called a dsync attack

764
00:25:35,279 --> 00:25:36,720
well what we're doing in this example is

765
00:25:36,720 --> 00:25:38,720
we're going to smuggle the x

766
00:25:38,720 --> 00:25:40,960
the x into the back end and that's going

767
00:25:40,960 --> 00:25:43,360
to cause a desynchronization

768
00:25:43,360 --> 00:25:46,240
this really isn't request smuggling but

769
00:25:46,240 --> 00:25:46,799
um

770
00:25:46,799 --> 00:25:50,880
this this poc is a way to detect it

771
00:25:50,880 --> 00:25:52,400
now you're not going to see this on on

772
00:25:52,400 --> 00:25:54,240
all implementations

773
00:25:54,240 --> 00:25:55,600
there's a lot of there's a lot of

774
00:25:55,600 --> 00:25:57,120
servers that have been patched for this

775
00:25:57,120 --> 00:25:58,080
but there's also

776
00:25:58,080 --> 00:26:00,159
a lot that are still vulnerable and i've

777
00:26:00,159 --> 00:26:01,919
seen this in a while

778
00:26:01,919 --> 00:26:04,799
so the front end um ends up processing

779
00:26:04,799 --> 00:26:06,720
the first content like header and sees

780
00:26:06,720 --> 00:26:08,480
this all as one request the blue and the

781
00:26:08,480 --> 00:26:10,000
orange all one request so the back

782
00:26:10,000 --> 00:26:12,960
end processes the second content length

783
00:26:12,960 --> 00:26:13,440
header

784
00:26:13,440 --> 00:26:15,760
it sees only the blue and where does the

785
00:26:15,760 --> 00:26:17,760
x go the x is in the cache

786
00:26:17,760 --> 00:26:20,720
and it's kind of in the limbo well with

787
00:26:20,720 --> 00:26:23,360
the very next request the green request

788
00:26:23,360 --> 00:26:24,799
this is going to get sandwiched up

789
00:26:24,799 --> 00:26:26,400
behind that x

790
00:26:26,400 --> 00:26:28,400
and x is going to get prepended to the

791
00:26:28,400 --> 00:26:30,320
victim request and the result

792
00:26:30,320 --> 00:26:33,200
is going to be a 400 bad request because

793
00:26:33,200 --> 00:26:33,919
exposed

794
00:26:33,919 --> 00:26:36,000
is not a valid verb it does not comply

795
00:26:36,000 --> 00:26:37,760
with the rfc you know straight to rfc

796
00:26:37,760 --> 00:26:38,559
jail

797
00:26:38,559 --> 00:26:40,799
speaking of rfc jail uh two content

798
00:26:40,799 --> 00:26:42,799
length headers is also disallowed

799
00:26:42,799 --> 00:26:45,200
however a lot of the applied http

800
00:26:45,200 --> 00:26:46,159
appliances

801
00:26:46,159 --> 00:26:48,400
are programmed in such a way that um

802
00:26:48,400 --> 00:26:49,440
allow

803
00:26:49,440 --> 00:26:51,440
are much more lenient with this behavior

804
00:26:51,440 --> 00:26:53,440
because they see their job as

805
00:26:53,440 --> 00:26:56,720
as you know do the job high availability

806
00:26:56,720 --> 00:26:57,600
system

807
00:26:57,600 --> 00:26:59,039
and you know get the information from

808
00:26:59,039 --> 00:27:01,440
place a to place b

809
00:27:01,440 --> 00:27:02,880
all right enough with the two content

810
00:27:02,880 --> 00:27:04,720
length headers what about transfer and

811
00:27:04,720 --> 00:27:06,400
coding what about chunked encoding how

812
00:27:06,400 --> 00:27:08,159
can this be exploited

813
00:27:08,159 --> 00:27:11,279
so james kettle deemed this the clte

814
00:27:11,279 --> 00:27:13,279
attack which is the content length

815
00:27:13,279 --> 00:27:14,799
transfer and coding attack where we're

816
00:27:14,799 --> 00:27:16,480
two of

817
00:27:16,480 --> 00:27:18,399
these headers remember they're meant to

818
00:27:18,399 --> 00:27:19,919
do the same thing they're meant to show

819
00:27:19,919 --> 00:27:21,919
a web server or web appliance where one

820
00:27:21,919 --> 00:27:22,640
begins

821
00:27:22,640 --> 00:27:25,039
and the one http request happens but if

822
00:27:25,039 --> 00:27:26,799
both are sent which ones are they going

823
00:27:26,799 --> 00:27:27,679
to choose

824
00:27:27,679 --> 00:27:30,240
well some appliances may only use the

825
00:27:30,240 --> 00:27:32,240
first one some may only use the last one

826
00:27:32,240 --> 00:27:34,080
some may not even be aware of chunked

827
00:27:34,080 --> 00:27:35,600
encoding some may

828
00:27:35,600 --> 00:27:38,000
be programmed to not use content length

829
00:27:38,000 --> 00:27:39,520
at all there's a number of different

830
00:27:39,520 --> 00:27:41,600
scenarios but it's really the difference

831
00:27:41,600 --> 00:27:43,279
between the two

832
00:27:43,279 --> 00:27:45,200
that can cause this desynchronization

833
00:27:45,200 --> 00:27:47,279
and cause an exploitable condition

834
00:27:47,279 --> 00:27:49,039
so in this example there's a constant

835
00:27:49,039 --> 00:27:51,279
length header transfer encoding header

836
00:27:51,279 --> 00:27:53,120
uh there's the zero remember that in

837
00:27:53,120 --> 00:27:54,480
chunk encoding the zero

838
00:27:54,480 --> 00:27:56,720
terminates the message however in this

839
00:27:56,720 --> 00:27:58,399
example the front end

840
00:27:58,399 --> 00:28:01,440
is uh it interprets this as one entire

841
00:28:01,440 --> 00:28:04,799
request it prioritizes this content link

842
00:28:04,799 --> 00:28:06,399
recall there's character turned line

843
00:28:06,399 --> 00:28:07,840
feeds in in between

844
00:28:07,840 --> 00:28:09,039
and now when the victim sends their

845
00:28:09,039 --> 00:28:11,120
responses is also going to result in an

846
00:28:11,120 --> 00:28:12,000
x post

847
00:28:12,000 --> 00:28:13,760
because the back end is transparent

848
00:28:13,760 --> 00:28:16,000
coding aware it's chunked encoding aware

849
00:28:16,000 --> 00:28:18,000
it's keeping the x in limbo what does it

850
00:28:18,000 --> 00:28:19,120
mean it doesn't know

851
00:28:19,120 --> 00:28:20,799
and then it's prepending that to the

852
00:28:20,799 --> 00:28:24,879
very next request causing an error

853
00:28:25,679 --> 00:28:27,840
all right now the converse of this

854
00:28:27,840 --> 00:28:30,399
attack the tecl where

855
00:28:30,399 --> 00:28:31,760
the the front end of the back end kind

856
00:28:31,760 --> 00:28:34,080
of reverse rolls

857
00:28:34,080 --> 00:28:36,480
in this example the attacker again sends

858
00:28:36,480 --> 00:28:38,320
two requests and it smuggles or actually

859
00:28:38,320 --> 00:28:39,440
smuggles a request

860
00:28:39,440 --> 00:28:42,000
in inside it smuggles the orange request

861
00:28:42,000 --> 00:28:42,880
a post

862
00:28:42,880 --> 00:28:45,440
to hopefully 404 now this is a poc that

863
00:28:45,440 --> 00:28:46,720
james cattle used

864
00:28:46,720 --> 00:28:49,200
because the hopefully 404 is probably

865
00:28:49,200 --> 00:28:51,039
going to return a 404

866
00:28:51,039 --> 00:28:52,799
not found because that page probably

867
00:28:52,799 --> 00:28:54,320
doesn't exist

868
00:28:54,320 --> 00:28:56,480
so much in the same manner as before

869
00:28:56,480 --> 00:28:58,000
let's count let's count these out

870
00:28:58,000 --> 00:29:00,559
we've got a content like that on form um

871
00:29:00,559 --> 00:29:02,399
but in this example the front

872
00:29:02,399 --> 00:29:05,120
end prioritizes transfer encoding and

873
00:29:05,120 --> 00:29:06,960
remember the transfer encoding does not

874
00:29:06,960 --> 00:29:08,640
end until it reaches a zero

875
00:29:08,640 --> 00:29:10,320
with carriage return line feed character

876
00:29:10,320 --> 00:29:12,000
from lining so this entire

877
00:29:12,000 --> 00:29:13,520
thing is sandwiched with one request

878
00:29:13,520 --> 00:29:15,120
through the front end and when it makes

879
00:29:15,120 --> 00:29:16,399
for the back end the back end doesn't

880
00:29:16,399 --> 00:29:17,919
know about chunk encoding

881
00:29:17,919 --> 00:29:20,000
it's just a simple old apache web server

882
00:29:20,000 --> 00:29:20,960
from 2010.

883
00:29:20,960 --> 00:29:22,080
well it's going to take a look at that

884
00:29:22,080 --> 00:29:24,480
content length of four and terminate

885
00:29:24,480 --> 00:29:26,880
right after the three f there and by the

886
00:29:26,880 --> 00:29:29,200
way the three f is the number of bytes

887
00:29:29,200 --> 00:29:30,080
and hex

888
00:29:30,080 --> 00:29:33,120
of the orange request so the back end

889
00:29:33,120 --> 00:29:34,159
terminates after

890
00:29:34,159 --> 00:29:36,559
the three f it counts the three the f

891
00:29:36,559 --> 00:29:38,159
the character turn and the live feed

892
00:29:38,159 --> 00:29:40,480
for total four bytes and then it

893
00:29:40,480 --> 00:29:41,919
prepends that orange

894
00:29:41,919 --> 00:29:44,320
request on to the beginning of any other

895
00:29:44,320 --> 00:29:45,279
victim request

896
00:29:45,279 --> 00:29:46,480
and what's going to happen when the

897
00:29:46,480 --> 00:29:48,720
victim gets the response regardless of

898
00:29:48,720 --> 00:29:50,399
whether they were going to log in php or

899
00:29:50,399 --> 00:29:52,000
admin.php or

900
00:29:52,000 --> 00:29:53,840
any kind of resource they're going to

901
00:29:53,840 --> 00:29:55,520
get back on 404

902
00:29:55,520 --> 00:29:57,600
they're going to get back the response

903
00:29:57,600 --> 00:29:59,039
to hopefully far forward

904
00:29:59,039 --> 00:30:01,279
and in this way the attacker can control

905
00:30:01,279 --> 00:30:02,720
a victim's request

906
00:30:02,720 --> 00:30:05,520
super cool stuff

907
00:30:06,559 --> 00:30:10,320
yep any request so uh these are the main

908
00:30:10,320 --> 00:30:12,159
variants of the attacks however

909
00:30:12,159 --> 00:30:13,760
james kettle came up with additional

910
00:30:13,760 --> 00:30:16,960
methods to cause that desynchronization

911
00:30:16,960 --> 00:30:19,120
many servers might reject the content

912
00:30:19,120 --> 00:30:20,399
length and transfer encoding

913
00:30:20,399 --> 00:30:21,440
traditionally

914
00:30:21,440 --> 00:30:24,240
however due to lacks parsing or handling

915
00:30:24,240 --> 00:30:25,600
of these headers

916
00:30:25,600 --> 00:30:27,520
he was able to cause a desynchronization

917
00:30:27,520 --> 00:30:29,200
each of these scenarios that you see on

918
00:30:29,200 --> 00:30:30,080
the screen

919
00:30:30,080 --> 00:30:33,360
uh he could add x before one of the one

920
00:30:33,360 --> 00:30:35,120
you know adding x adding extra spaces

921
00:30:35,120 --> 00:30:37,039
adding extra tabs or new lines

922
00:30:37,039 --> 00:30:38,799
or carriage returns all of these

923
00:30:38,799 --> 00:30:41,679
succeeded in some way or another across

924
00:30:41,679 --> 00:30:42,760
the internet and causing a

925
00:30:42,760 --> 00:30:44,399
desynchronization

926
00:30:44,399 --> 00:30:46,000
and some of these ended up being

927
00:30:46,000 --> 00:30:48,080
exploitable and the root cause for this

928
00:30:48,080 --> 00:30:48,960
is the system

929
00:30:48,960 --> 00:30:51,279
these systems hdb systems they have to

930
00:30:51,279 --> 00:30:52,799
be high availability they're not

931
00:30:52,799 --> 00:30:54,159
necessarily

932
00:30:54,159 --> 00:30:56,240
designed for security they're designed

933
00:30:56,240 --> 00:30:59,679
for performance and availability

934
00:30:59,679 --> 00:31:02,399
all right demo time this is the moment

935
00:31:02,399 --> 00:31:03,840
probably some of you have been

936
00:31:03,840 --> 00:31:06,240
waiting for uh feel free to take a note

937
00:31:06,240 --> 00:31:07,760
of the

938
00:31:07,760 --> 00:31:09,919
short link within the uh within the

939
00:31:09,919 --> 00:31:12,720
screen i will publish the demos later on

940
00:31:12,720 --> 00:31:14,799
uh you can see you can find these demos

941
00:31:14,799 --> 00:31:18,240
in gift format at www.hooperlabs.xyz

942
00:31:18,240 --> 00:31:20,799
demos.zip but let's let's talk through

943
00:31:20,799 --> 00:31:22,080
that demo first so

944
00:31:22,080 --> 00:31:23,919
consider this situation we have an

945
00:31:23,919 --> 00:31:25,440
attacker and a victim on the left-hand

946
00:31:25,440 --> 00:31:26,000
side

947
00:31:26,000 --> 00:31:27,519
still with our front end and back end

948
00:31:27,519 --> 00:31:29,279
abstraction but

949
00:31:29,279 --> 00:31:31,279
in this example the front end is

950
00:31:31,279 --> 00:31:32,880
disallowing

951
00:31:32,880 --> 00:31:36,880
users to access the admin resource

952
00:31:36,880 --> 00:31:38,799
so we're going to demonstrate a controls

953
00:31:38,799 --> 00:31:40,640
bypass so what will happen

954
00:31:40,640 --> 00:31:43,279
in the demo an attacker is going to

955
00:31:43,279 --> 00:31:43,840
smuggle

956
00:31:43,840 --> 00:31:45,840
two requests both the blue and the

957
00:31:45,840 --> 00:31:49,279
orange requests as one complete request

958
00:31:49,279 --> 00:31:51,679
this is going to be done by kind of

959
00:31:51,679 --> 00:31:53,519
encompassing that orange request

960
00:31:53,519 --> 00:31:55,279
inside of the content link where the

961
00:31:55,279 --> 00:31:58,159
front end isn't chunked and coding aware

962
00:31:58,159 --> 00:32:00,000
so friend is going to treat that all as

963
00:32:00,000 --> 00:32:02,960
a single request

964
00:32:04,320 --> 00:32:06,559
but the back end is chunked in coding

965
00:32:06,559 --> 00:32:08,320
where it happens to prioritize chunks

966
00:32:08,320 --> 00:32:09,120
and coding

967
00:32:09,120 --> 00:32:10,880
so when it sees that zero followed by a

968
00:32:10,880 --> 00:32:12,559
carriage return line feed care to turn

969
00:32:12,559 --> 00:32:12,960
line

970
00:32:12,960 --> 00:32:15,039
feed it's going to say okay that's the

971
00:32:15,039 --> 00:32:16,799
first request it's going to cache the

972
00:32:16,799 --> 00:32:18,559
orange and then prepend that to the very

973
00:32:18,559 --> 00:32:19,600
next request

974
00:32:19,600 --> 00:32:21,360
now if the attacker can be that very

975
00:32:21,360 --> 00:32:23,679
next request the the green

976
00:32:23,679 --> 00:32:26,240
victim request then the response that

977
00:32:26,240 --> 00:32:26,880
will be

978
00:32:26,880 --> 00:32:29,279
given to them will be the response to

979
00:32:29,279 --> 00:32:30,559
the admin server

980
00:32:30,559 --> 00:32:32,480
because the front end is the one that is

981
00:32:32,480 --> 00:32:34,000
controlling uh

982
00:32:34,000 --> 00:32:36,720
that is controlling this security to the

983
00:32:36,720 --> 00:32:38,480
admin page

984
00:32:38,480 --> 00:32:40,720
so again to review the front end is

985
00:32:40,720 --> 00:32:42,159
going to see two requests

986
00:32:42,159 --> 00:32:45,200
the blue and the green and the back end

987
00:32:45,200 --> 00:32:46,559
is going to see the blue

988
00:32:46,559 --> 00:32:48,640
and the orange and the green requests

989
00:32:48,640 --> 00:32:50,000
can be treated as as

990
00:32:50,000 --> 00:32:53,679
post data so in my opinion a really cool

991
00:32:53,679 --> 00:32:54,240
example

992
00:32:54,240 --> 00:32:56,240
but let's see this practically and exit

993
00:32:56,240 --> 00:32:59,760
out of the presentation momentarily

994
00:32:59,760 --> 00:33:04,158
and let's run the demo

995
00:33:04,320 --> 00:33:06,080
all right so the uh the front end

996
00:33:06,080 --> 00:33:07,679
doesn't support as i said before the

997
00:33:07,679 --> 00:33:08,799
front end doesn't support

998
00:33:08,799 --> 00:33:11,279
chunk and coding this is a blog this is

999
00:33:11,279 --> 00:33:12,159
a blog

1000
00:33:12,159 --> 00:33:14,240
actually created by the portsmouth team

1001
00:33:14,240 --> 00:33:15,919
this is the portsmouth web security

1002
00:33:15,919 --> 00:33:16,720
academy

1003
00:33:16,720 --> 00:33:18,399
and it's an awesome tool it's one of the

1004
00:33:18,399 --> 00:33:19,840
best tools i've seen for

1005
00:33:19,840 --> 00:33:21,440
for practicing your skills in this and i

1006
00:33:21,440 --> 00:33:24,640
would highly recommend making an account

1007
00:33:24,640 --> 00:33:27,039
so this is burp suite here on the on the

1008
00:33:27,039 --> 00:33:28,480
side of the screen there what i'm doing

1009
00:33:28,480 --> 00:33:30,640
is i'm just crafting a request right now

1010
00:33:30,640 --> 00:33:33,360
i sent traffic from the browser through

1011
00:33:33,360 --> 00:33:34,240
burp suite

1012
00:33:34,240 --> 00:33:36,720
and this is what an http request might

1013
00:33:36,720 --> 00:33:38,080
look like in real time

1014
00:33:38,080 --> 00:33:40,720
i'm using the repeater tool and crafting

1015
00:33:40,720 --> 00:33:42,320
my own post request

1016
00:33:42,320 --> 00:33:44,960
with a single zero in the payload and i

1017
00:33:44,960 --> 00:33:46,080
get a 200 okay

1018
00:33:46,080 --> 00:33:47,679
that's that's a good thing that means

1019
00:33:47,679 --> 00:33:50,000
it's working next let's go to the admin

1020
00:33:50,000 --> 00:33:51,440
portal so i go to admin

1021
00:33:51,440 --> 00:33:53,519
and it says path admin is blocked well

1022
00:33:53,519 --> 00:33:55,440
we happen to know that this security is

1023
00:33:55,440 --> 00:33:56,880
being

1024
00:33:56,880 --> 00:33:59,360
is being um enforced by the front end

1025
00:33:59,360 --> 00:34:01,519
it's being enforced by the proxy

1026
00:34:01,519 --> 00:34:05,279
so how can we smuggle something through

1027
00:34:05,279 --> 00:34:07,840
to bypass that front end control and

1028
00:34:07,840 --> 00:34:08,399
make that

1029
00:34:08,399 --> 00:34:10,079
request into the back end ultimately

1030
00:34:10,079 --> 00:34:11,839
revealing the admin panel

1031
00:34:11,839 --> 00:34:14,000
so i put both a content length and a

1032
00:34:14,000 --> 00:34:15,359
transfer encoding chunk

1033
00:34:15,359 --> 00:34:17,280
header we include the zero in there

1034
00:34:17,280 --> 00:34:18,560
because remember the zero is the

1035
00:34:18,560 --> 00:34:19,440
completion

1036
00:34:19,440 --> 00:34:21,599
of that chunked encoding and we're just

1037
00:34:21,599 --> 00:34:23,199
going to smuggle and exit

1038
00:34:23,199 --> 00:34:26,320
and see if that works so that's good

1039
00:34:26,320 --> 00:34:27,199
news

1040
00:34:27,199 --> 00:34:31,359
we got a 400 or 404 an error

1041
00:34:31,359 --> 00:34:32,960
and notice we're sending the request

1042
00:34:32,960 --> 00:34:34,960
over and over and over getting different

1043
00:34:34,960 --> 00:34:36,000
responses

1044
00:34:36,000 --> 00:34:38,119
this is one of the hallmarks of uh

1045
00:34:38,119 --> 00:34:39,280
desynchronization

1046
00:34:39,280 --> 00:34:41,359
when you can send the same requests and

1047
00:34:41,359 --> 00:34:43,199
you're doing some smuggling behavior

1048
00:34:43,199 --> 00:34:45,119
and you get different responses each

1049
00:34:45,119 --> 00:34:47,440
time there's clearly a desynchronization

1050
00:34:47,440 --> 00:34:48,560
between the front end

1051
00:34:48,560 --> 00:34:50,000
and the back end and that's when you

1052
00:34:50,000 --> 00:34:51,760
need to poke further that's when you

1053
00:34:51,760 --> 00:34:52,719
need to

1054
00:34:52,719 --> 00:34:54,159
try to find out if it's actually

1055
00:34:54,159 --> 00:34:56,079
exploitable so in this

1056
00:34:56,079 --> 00:34:57,440
case we're going to craft our own

1057
00:34:57,440 --> 00:34:59,839
request to the admin page

1058
00:34:59,839 --> 00:35:02,000
and smuggle that request inside of the

1059
00:35:02,000 --> 00:35:03,119
original request

1060
00:35:03,119 --> 00:35:04,560
through the front end it's going to make

1061
00:35:04,560 --> 00:35:06,480
its way to the back end which is chunked

1062
00:35:06,480 --> 00:35:07,520
and coding aware

1063
00:35:07,520 --> 00:35:11,200
and then that response to the admin page

1064
00:35:11,200 --> 00:35:12,800
is going to get pre-pended or that

1065
00:35:12,800 --> 00:35:14,160
response is going to be getting the very

1066
00:35:14,160 --> 00:35:15,760
next victim request

1067
00:35:15,760 --> 00:35:17,440
in this example the victim is going to

1068
00:35:17,440 --> 00:35:18,720
be the attacker and this will be a way

1069
00:35:18,720 --> 00:35:20,800
to bypass controls

1070
00:35:20,800 --> 00:35:22,720
but what i'm doing here is just using

1071
00:35:22,720 --> 00:35:25,440
printf and wc

1072
00:35:25,440 --> 00:35:27,280
within bash to calculate the amount of

1073
00:35:27,280 --> 00:35:29,440
bytes

1074
00:35:29,440 --> 00:35:32,640
and then i'll send that request

1075
00:35:33,839 --> 00:35:36,000
and so when i send it it worked however

1076
00:35:36,000 --> 00:35:37,520
it said the admin interface is only

1077
00:35:37,520 --> 00:35:38,880
available if logged in as an

1078
00:35:38,880 --> 00:35:41,520
administrator or requested as low cost

1079
00:35:41,520 --> 00:35:43,040
here's one of the cool features of

1080
00:35:43,040 --> 00:35:44,960
request smuggling is that you can put

1081
00:35:44,960 --> 00:35:46,640
whatever host header you want

1082
00:35:46,640 --> 00:35:48,160
in the smuggled request and that's what

1083
00:35:48,160 --> 00:35:49,680
we're going to do here we add localhost

1084
00:35:49,680 --> 00:35:50,240
in

1085
00:35:50,240 --> 00:35:52,560
and the web server is not going to have

1086
00:35:52,560 --> 00:35:53,760
any idea

1087
00:35:53,760 --> 00:35:55,920
of that this was a smuggled request it's

1088
00:35:55,920 --> 00:35:57,280
not going to have any idea that this

1089
00:35:57,280 --> 00:35:58,000
request did

1090
00:35:58,000 --> 00:36:00,880
not come from actual localhost so i

1091
00:36:00,880 --> 00:36:02,560
calculate the content length of the

1092
00:36:02,560 --> 00:36:03,440
payload again

1093
00:36:03,440 --> 00:36:04,560
and this will allow us to get through

1094
00:36:04,560 --> 00:36:06,480
the front end we send this request

1095
00:36:06,480 --> 00:36:08,720
causing the desynchronization

1096
00:36:08,720 --> 00:36:11,440
200 means the next request will will

1097
00:36:11,440 --> 00:36:13,599
have that result of that desync

1098
00:36:13,599 --> 00:36:15,119
and there we go we get to the admin

1099
00:36:15,119 --> 00:36:17,040
panel we have full

1100
00:36:17,040 --> 00:36:20,560
control apparently according to this uh

1101
00:36:20,560 --> 00:36:23,359
this exercise and so when you're looking

1102
00:36:23,359 --> 00:36:24,240
for this

1103
00:36:24,240 --> 00:36:25,920
crafted in such a way that both the

1104
00:36:25,920 --> 00:36:28,720
content length and transfer coding

1105
00:36:28,720 --> 00:36:30,720
are are given and what you're looking

1106
00:36:30,720 --> 00:36:32,000
for is

1107
00:36:32,000 --> 00:36:34,800
differences in how uh you're looking for

1108
00:36:34,800 --> 00:36:35,520
different

1109
00:36:35,520 --> 00:36:38,079
different responses for the same input

1110
00:36:38,079 --> 00:36:38,560
uh

1111
00:36:38,560 --> 00:36:42,160
nowhere else should you get different

1112
00:36:42,160 --> 00:36:44,160
status codes or different responses for

1113
00:36:44,160 --> 00:36:46,480
the same input for the same input

1114
00:36:46,480 --> 00:36:48,320
and and i think that's one of the really

1115
00:36:48,320 --> 00:36:49,839
cool um

1116
00:36:49,839 --> 00:36:52,720
features of this exploitation so we

1117
00:36:52,720 --> 00:36:54,640
bypass controls we took over the admin

1118
00:36:54,640 --> 00:36:55,119
panel

1119
00:36:55,119 --> 00:36:57,920
great let's go to demo number two uh

1120
00:36:57,920 --> 00:37:00,240
this is going to demonstrate a session

1121
00:37:00,240 --> 00:37:01,839
takeover so whereas before we were just

1122
00:37:01,839 --> 00:37:03,680
bypassing server-side controls

1123
00:37:03,680 --> 00:37:07,200
well this bug is so uh is so useful

1124
00:37:07,200 --> 00:37:09,119
that you could also exploit arbitrary

1125
00:37:09,119 --> 00:37:10,320
victims

1126
00:37:10,320 --> 00:37:11,599
because we're going to demonstrate a

1127
00:37:11,599 --> 00:37:13,680
session takeover what will happen

1128
00:37:13,680 --> 00:37:14,880
again with the foreign end of the

1129
00:37:14,880 --> 00:37:16,800
backhand abstraction we have the

1130
00:37:16,800 --> 00:37:20,480
uh a little evil guy in the top left

1131
00:37:20,480 --> 00:37:22,560
and in this example we have the same

1132
00:37:22,560 --> 00:37:24,000
architecture as before

1133
00:37:24,000 --> 00:37:27,119
however we have access to a forum

1134
00:37:27,119 --> 00:37:30,560
and that forum allows comments so again

1135
00:37:30,560 --> 00:37:32,800
we'll send both uh both the content

1136
00:37:32,800 --> 00:37:34,480
length and the transfer coding

1137
00:37:34,480 --> 00:37:36,560
and we're going to smuggle that orange

1138
00:37:36,560 --> 00:37:37,599
request in

1139
00:37:37,599 --> 00:37:40,000
within the content laying header again

1140
00:37:40,000 --> 00:37:40,960
the middleware

1141
00:37:40,960 --> 00:37:43,040
or the front end is not chunked in

1142
00:37:43,040 --> 00:37:44,320
coding aware it's only going to pay

1143
00:37:44,320 --> 00:37:45,839
attention to the content link

1144
00:37:45,839 --> 00:37:47,440
but the backend knows about chunk and

1145
00:37:47,440 --> 00:37:49,520
coding and it prioritizes that

1146
00:37:49,520 --> 00:37:50,960
so we're going to do that to cause a

1147
00:37:50,960 --> 00:37:53,040
desynchronization prepend the

1148
00:37:53,040 --> 00:37:55,839
orange request to the front of the

1149
00:37:55,839 --> 00:37:56,560
victim

1150
00:37:56,560 --> 00:37:58,240
request and it's going to cause the

1151
00:37:58,240 --> 00:37:59,680
victim to post their own

1152
00:37:59,680 --> 00:38:03,599
http request as a comment

1153
00:38:03,599 --> 00:38:05,440
the back end's going to take a look at

1154
00:38:05,440 --> 00:38:07,680
that chunk cut it off after the zero

1155
00:38:07,680 --> 00:38:10,400
and then the smuggled request is going

1156
00:38:10,400 --> 00:38:11,040
to post

1157
00:38:11,040 --> 00:38:12,320
everything as a comment and remember

1158
00:38:12,320 --> 00:38:14,079
this is including all the headers it's

1159
00:38:14,079 --> 00:38:15,599
including the verb it's including the

1160
00:38:15,599 --> 00:38:16,480
host header

1161
00:38:16,480 --> 00:38:18,079
it's including everything including the

1162
00:38:18,079 --> 00:38:19,920
session cookies and as

1163
00:38:19,920 --> 00:38:21,760
some of you probably know if you have

1164
00:38:21,760 --> 00:38:23,040
the session cookies

1165
00:38:23,040 --> 00:38:25,599
you can completely take over an account

1166
00:38:25,599 --> 00:38:28,960
so let's take a look at that demo

1167
00:38:29,200 --> 00:38:31,359
all right again we have a web security

1168
00:38:31,359 --> 00:38:33,680
academy on the right hand side and again

1169
00:38:33,680 --> 00:38:34,880
this is a blog this time

1170
00:38:34,880 --> 00:38:36,240
a little bit different of a web

1171
00:38:36,240 --> 00:38:38,560
application this front end does not

1172
00:38:38,560 --> 00:38:40,079
support chunked encoding

1173
00:38:40,079 --> 00:38:42,960
but the back end prioritizes chunks so

1174
00:38:42,960 --> 00:38:44,480
we're going to smuggle a request to the

1175
00:38:44,480 --> 00:38:45,119
back end

1176
00:38:45,119 --> 00:38:47,280
resulting in the victim posting a

1177
00:38:47,280 --> 00:38:49,599
comment

1178
00:38:49,599 --> 00:38:51,200
in order to do that first we routed

1179
00:38:51,200 --> 00:38:53,119
traffic through the http proxy and we're

1180
00:38:53,119 --> 00:38:54,560
filling out a common form to kind of see

1181
00:38:54,560 --> 00:38:55,359
what it looks like

1182
00:38:55,359 --> 00:38:57,359
burp will allow us to take a look at

1183
00:38:57,359 --> 00:39:00,320
that in plain text

1184
00:39:00,320 --> 00:39:02,240
so i pipe that to repeater i'm going to

1185
00:39:02,240 --> 00:39:03,760
change some of the tab names

1186
00:39:03,760 --> 00:39:05,680
generally i find this useful when

1187
00:39:05,680 --> 00:39:07,920
testing rename the tabs do your

1188
00:39:07,920 --> 00:39:09,599
diligence because when you come back a

1189
00:39:09,599 --> 00:39:11,280
week later or a month later to the same

1190
00:39:11,280 --> 00:39:12,400
project

1191
00:39:12,400 --> 00:39:14,000
it's going to be quite difficult to

1192
00:39:14,000 --> 00:39:15,440
understand where you left off

1193
00:39:15,440 --> 00:39:17,520
one thing i also like doing is deleting

1194
00:39:17,520 --> 00:39:18,640
any of the headers that

1195
00:39:18,640 --> 00:39:21,119
don't really make sense or or are just

1196
00:39:21,119 --> 00:39:23,599
extra this helps both for pocs

1197
00:39:23,599 --> 00:39:27,040
uh and it helps for my own sanity

1198
00:39:27,040 --> 00:39:29,760
so uh this is the exact same poc as last

1199
00:39:29,760 --> 00:39:30,720
time we have a zero

1200
00:39:30,720 --> 00:39:33,520
and an x and a single content length

1201
00:39:33,520 --> 00:39:34,720
which we're getting all two hundreds

1202
00:39:34,720 --> 00:39:35,680
that's expected

1203
00:39:35,680 --> 00:39:37,920
until we add in that transfer encoding

1204
00:39:37,920 --> 00:39:38,960
chunk

1205
00:39:38,960 --> 00:39:40,839
and now we're causing the

1206
00:39:40,839 --> 00:39:42,000
desynchronization

1207
00:39:42,000 --> 00:39:43,599
and we're getting different responses

1208
00:39:43,599 --> 00:39:45,040
for the same input

1209
00:39:45,040 --> 00:39:47,599
again this is how you detect it this is

1210
00:39:47,599 --> 00:39:49,280
how you detect

1211
00:39:49,280 --> 00:39:50,800
desynchronization vulnerabilities

1212
00:39:50,800 --> 00:39:53,200
manually

1213
00:39:53,520 --> 00:39:58,160
all right next um we actually want to

1214
00:39:58,160 --> 00:40:00,960
smuggle a the post of a comment in

1215
00:40:00,960 --> 00:40:02,320
inside of this uh

1216
00:40:02,320 --> 00:40:03,920
inside of the smuggle request i'm gonna

1217
00:40:03,920 --> 00:40:05,520
copy and paste this

1218
00:40:05,520 --> 00:40:07,119
into i'm gonna delete the extraneous

1219
00:40:07,119 --> 00:40:09,440
headers again uh just to make things

1220
00:40:09,440 --> 00:40:10,000
simpler

1221
00:40:10,000 --> 00:40:12,400
otherwise it's it's it's a big long

1222
00:40:12,400 --> 00:40:14,880
request

1223
00:40:15,119 --> 00:40:16,960
i'm sending my own cookie so the

1224
00:40:16,960 --> 00:40:18,240
attacker's cookie

1225
00:40:18,240 --> 00:40:21,200
and that'll authorize the victim to to

1226
00:40:21,200 --> 00:40:22,800
to make that post request

1227
00:40:22,800 --> 00:40:24,640
note that we also use the same csrf

1228
00:40:24,640 --> 00:40:26,800
because it's generally tied

1229
00:40:26,800 --> 00:40:29,200
to the user session we've had an

1230
00:40:29,200 --> 00:40:30,240
arbitrarily

1231
00:40:30,240 --> 00:40:33,280
uh large content length of 800 and

1232
00:40:33,280 --> 00:40:34,960
that'll be enough room for the

1233
00:40:34,960 --> 00:40:37,040
all of the victims header the first line

1234
00:40:37,040 --> 00:40:38,160
you know the method

1235
00:40:38,160 --> 00:40:40,560
the the path the version and all of this

1236
00:40:40,560 --> 00:40:41,760
is going to get put in the comment we

1237
00:40:41,760 --> 00:40:42,400
don't know how

1238
00:40:42,400 --> 00:40:46,079
long that's going to be and then finally

1239
00:40:46,079 --> 00:40:49,440
the comment equals hacked

1240
00:40:49,440 --> 00:40:52,240
and then a colon and then after after

1241
00:40:52,240 --> 00:40:53,839
that that will be the victim's center so

1242
00:40:53,839 --> 00:40:55,760
i'm going to send this a few times

1243
00:40:55,760 --> 00:40:57,839
and because because the

1244
00:40:57,839 --> 00:40:59,760
desynchronization is happening

1245
00:40:59,760 --> 00:41:02,960
i'll get delays the requests will be

1246
00:41:02,960 --> 00:41:03,280
well

1247
00:41:03,280 --> 00:41:06,640
formed because the smuggled request has

1248
00:41:06,640 --> 00:41:08,160
a content length of 800

1249
00:41:08,160 --> 00:41:10,480
and if the very next request doesn't fit

1250
00:41:10,480 --> 00:41:11,280
neatly

1251
00:41:11,280 --> 00:41:13,760
into that 800 byte payload uh what

1252
00:41:13,760 --> 00:41:14,800
happens is

1253
00:41:14,800 --> 00:41:17,520
it hangs and that's what we saw so so

1254
00:41:17,520 --> 00:41:19,200
because we're poisoning a victim's

1255
00:41:19,200 --> 00:41:20,480
request here

1256
00:41:20,480 --> 00:41:22,960
what we'll be looking for is two 200

1257
00:41:22,960 --> 00:41:24,319
statuses in a row

1258
00:41:24,319 --> 00:41:26,720
two 200 statuses in a row means we we

1259
00:41:26,720 --> 00:41:27,920
give the desynchronization

1260
00:41:27,920 --> 00:41:30,480
receive 200. now if on the very next

1261
00:41:30,480 --> 00:41:33,599
request the victim

1262
00:41:33,599 --> 00:41:35,760
is exported with that dsync we sent

1263
00:41:35,760 --> 00:41:37,119
another

1264
00:41:37,119 --> 00:41:38,960
another dsync request another smug

1265
00:41:38,960 --> 00:41:40,480
request and get another 200.

1266
00:41:40,480 --> 00:41:41,839
we successfully achieved that

1267
00:41:41,839 --> 00:41:43,680
desynchronization we did not

1268
00:41:43,680 --> 00:41:45,520
own ourselves and we ended up owning

1269
00:41:45,520 --> 00:41:47,280
this random user

1270
00:41:47,280 --> 00:41:50,720
so you can see in the in the demo

1271
00:41:50,720 --> 00:41:52,640
we received the users cookies all of

1272
00:41:52,640 --> 00:41:54,720
their cookies all of their headers

1273
00:41:54,720 --> 00:41:57,280
this did not come from my host it came

1274
00:41:57,280 --> 00:41:58,160
from

1275
00:41:58,160 --> 00:42:01,520
a bot so complete session takeover with

1276
00:42:01,520 --> 00:42:02,960
this bug

1277
00:42:02,960 --> 00:42:05,680
really cool stuff

1278
00:42:06,000 --> 00:42:09,440
let's talk about impact so um targets

1279
00:42:09,440 --> 00:42:11,760
you cannot target someone directly

1280
00:42:11,760 --> 00:42:13,200
unless they're the only other person in

1281
00:42:13,200 --> 00:42:15,359
the world that's using this web server

1282
00:42:15,359 --> 00:42:18,400
then maybe you can target uh

1283
00:42:18,400 --> 00:42:20,720
you can possibly target things that make

1284
00:42:20,720 --> 00:42:22,240
automated requests however

1285
00:42:22,240 --> 00:42:23,839
it's it's going to be difficult what

1286
00:42:23,839 --> 00:42:25,359
you're doing is you're causing this

1287
00:42:25,359 --> 00:42:26,720
desynchronization but you're not really

1288
00:42:26,720 --> 00:42:27,680
in control

1289
00:42:27,680 --> 00:42:30,960
of who this exports one of my

1290
00:42:30,960 --> 00:42:33,520
favorite impacts of this is a redirect

1291
00:42:33,520 --> 00:42:35,280
if you find an open redirect on a

1292
00:42:35,280 --> 00:42:36,240
website

1293
00:42:36,240 --> 00:42:38,800
um when combined with http request

1294
00:42:38,800 --> 00:42:39,599
smuggling

1295
00:42:39,599 --> 00:42:42,480
you can smuggle that open redirect that

1296
00:42:42,480 --> 00:42:44,480
redirect is prepended to the victim's

1297
00:42:44,480 --> 00:42:46,480
request and they get arbitrarily

1298
00:42:46,480 --> 00:42:47,839
redirected

1299
00:42:47,839 --> 00:42:50,000
which is super cool uh same thing with

1300
00:42:50,000 --> 00:42:51,280
cross-site scripting if you have

1301
00:42:51,280 --> 00:42:53,440
reflected crosstalk scripting or self

1302
00:42:53,440 --> 00:42:56,000
cross-site scripting you can then cause

1303
00:42:56,000 --> 00:42:57,839
the desynchronization

1304
00:42:57,839 --> 00:42:59,839
and get that smuggled request pre-pended

1305
00:42:59,839 --> 00:43:01,119
to a victim's request

1306
00:43:01,119 --> 00:43:03,200
and in that way you can access the

1307
00:43:03,200 --> 00:43:04,240
victim so

1308
00:43:04,240 --> 00:43:06,480
a lot of these smaller bugs suddenly

1309
00:43:06,480 --> 00:43:08,480
when combined with request muggle when

1310
00:43:08,480 --> 00:43:10,000
combined with this

1311
00:43:10,000 --> 00:43:12,240
exploitable desynchronization this can

1312
00:43:12,240 --> 00:43:14,480
severely increase the impact of these

1313
00:43:14,480 --> 00:43:16,000
bugs and that's one of the things about

1314
00:43:16,000 --> 00:43:16,240
it

1315
00:43:16,240 --> 00:43:19,440
i think are really cool this is

1316
00:43:19,440 --> 00:43:21,359
you're only at you're only restricted by

1317
00:43:21,359 --> 00:43:22,720
your own creativity

1318
00:43:22,720 --> 00:43:24,880
as an attacker you can cause denial of

1319
00:43:24,880 --> 00:43:26,400
service conditions at least for a

1320
00:43:26,400 --> 00:43:27,440
significant portion

1321
00:43:27,440 --> 00:43:30,319
of the user base but you can take over

1322
00:43:30,319 --> 00:43:32,400
accounts as we saw you can also reveal

1323
00:43:32,400 --> 00:43:34,960
hop by hop headers uh it wasn't it

1324
00:43:34,960 --> 00:43:36,800
wasn't completely obvious in that demo

1325
00:43:36,800 --> 00:43:38,880
however if the front end is stripping

1326
00:43:38,880 --> 00:43:40,000
off or putting on

1327
00:43:40,000 --> 00:43:42,079
certain headers that might be might

1328
00:43:42,079 --> 00:43:43,359
contain secrets

1329
00:43:43,359 --> 00:43:46,400
you can also expose those with the with

1330
00:43:46,400 --> 00:43:49,440
the same attack that we saw earlier uh

1331
00:43:49,440 --> 00:43:51,280
what tools would i use to exploit this

1332
00:43:51,280 --> 00:43:51,839
well

1333
00:43:51,839 --> 00:43:53,760
as you saw i was using i was doing it

1334
00:43:53,760 --> 00:43:55,440
manually with with burp suite you can do

1335
00:43:55,440 --> 00:43:56,400
it with both pro

1336
00:43:56,400 --> 00:43:58,960
or community uh but if community is free

1337
00:43:58,960 --> 00:43:59,520
by the way

1338
00:43:59,520 --> 00:44:02,160
and nearly uh every bit as good as the

1339
00:44:02,160 --> 00:44:03,119
pro version

1340
00:44:03,119 --> 00:44:05,040
i would highly recommend playing around

1341
00:44:05,040 --> 00:44:06,240
with that if you haven't

1342
00:44:06,240 --> 00:44:08,720
but james kettle released two separate

1343
00:44:08,720 --> 00:44:11,119
uh two separate extensions that are just

1344
00:44:11,119 --> 00:44:13,040
talking about one is the hd request

1345
00:44:13,040 --> 00:44:15,040
smuggler which serves to detect

1346
00:44:15,040 --> 00:44:18,000
uh desynchronization conditions and the

1347
00:44:18,000 --> 00:44:20,400
turbo intruder and turbo trigger was his

1348
00:44:20,400 --> 00:44:21,200
solution

1349
00:44:21,200 --> 00:44:24,880
to detecting this bug he was able to uh

1350
00:44:24,880 --> 00:44:28,000
code in coding turbo intruder

1351
00:44:28,000 --> 00:44:30,960
uh the ability to pipeline request in a

1352
00:44:30,960 --> 00:44:32,880
much faster fashion so that

1353
00:44:32,880 --> 00:44:35,839
he could be the next request to that

1354
00:44:35,839 --> 00:44:37,599
dsync so that he could detect

1355
00:44:37,599 --> 00:44:39,920
that desynchronization especially in

1356
00:44:39,920 --> 00:44:41,200
these servers that are getting a lot of

1357
00:44:41,200 --> 00:44:43,520
traffic

1358
00:44:43,680 --> 00:44:45,119
both of those are available in berkshire

1359
00:44:45,119 --> 00:44:47,200
community by the way

1360
00:44:47,200 --> 00:44:49,920
all right detection how the heck do we

1361
00:44:49,920 --> 00:44:50,640
detect this

1362
00:44:50,640 --> 00:44:54,160
well the the baseline is is inspect

1363
00:44:54,160 --> 00:44:56,319
requests for rfc compliance this is the

1364
00:44:56,319 --> 00:44:58,319
root cause of the issue

1365
00:44:58,319 --> 00:45:01,040
is that messages are sent messages are

1366
00:45:01,040 --> 00:45:03,200
sent in a non-rfc compliant way they

1367
00:45:03,200 --> 00:45:04,319
don't follow the rules

1368
00:45:04,319 --> 00:45:06,800
of the internet and then the web

1369
00:45:06,800 --> 00:45:08,560
appliances tend to try

1370
00:45:08,560 --> 00:45:10,880
and interpret them in certain ways and

1371
00:45:10,880 --> 00:45:12,000
it's the differences

1372
00:45:12,000 --> 00:45:13,599
in the way that they're interpreted that

1373
00:45:13,599 --> 00:45:15,680
are actually exploitable

1374
00:45:15,680 --> 00:45:17,040
you can also detect this with source

1375
00:45:17,040 --> 00:45:19,040
code analysis but this will be extremely

1376
00:45:19,040 --> 00:45:20,240
time intensive

1377
00:45:20,240 --> 00:45:22,079
it's going to be following the logic and

1378
00:45:22,079 --> 00:45:23,839
making sure that each

1379
00:45:23,839 --> 00:45:26,400
appliance parses in in the way that it

1380
00:45:26,400 --> 00:45:28,480
should in a way that's rfc compliant but

1381
00:45:28,480 --> 00:45:29,760
i don't see that

1382
00:45:29,760 --> 00:45:33,359
as as beneficial for many organizations

1383
00:45:33,359 --> 00:45:34,960
unless you're bug hunting you're looking

1384
00:45:34,960 --> 00:45:36,640
for specific vulnerability in a specific

1385
00:45:36,640 --> 00:45:38,480
appliance

1386
00:45:38,480 --> 00:45:40,400
however there are a number of mitigation

1387
00:45:40,400 --> 00:45:42,480
techniques number one i would recommend

1388
00:45:42,480 --> 00:45:45,119
using hdb2 for back-end connections

1389
00:45:45,119 --> 00:45:46,960
you can configure this with most web

1390
00:45:46,960 --> 00:45:48,240
appliances

1391
00:45:48,240 --> 00:45:50,480
though there have been desynchronization

1392
00:45:50,480 --> 00:45:52,800
or http request smuggling

1393
00:45:52,800 --> 00:45:56,880
vulnerabilities recently by cattle and

1394
00:45:56,880 --> 00:46:00,240
can amit um

1395
00:46:00,240 --> 00:46:01,760
they're they seem to be less severe and

1396
00:46:01,760 --> 00:46:04,400
they seem to have less impact

1397
00:46:04,400 --> 00:46:06,640
number two uh patch if you have an

1398
00:46:06,640 --> 00:46:08,240
appliance that is vulnerable to this

1399
00:46:08,240 --> 00:46:09,359
there's a good chance

1400
00:46:09,359 --> 00:46:11,200
that there's a cve for it that it's been

1401
00:46:11,200 --> 00:46:12,800
reported and that there's a patch

1402
00:46:12,800 --> 00:46:15,200
available so patch your appliances

1403
00:46:15,200 --> 00:46:17,520
next strictly enforce rfc and this is

1404
00:46:17,520 --> 00:46:19,599
much easier said than done

1405
00:46:19,599 --> 00:46:22,640
which is why i want to introduce an aws

1406
00:46:22,640 --> 00:46:25,119
http decent guardian and this is an open

1407
00:46:25,119 --> 00:46:27,119
source tool released by amazon

1408
00:46:27,119 --> 00:46:28,800
one of the one of the conferences

1409
00:46:28,800 --> 00:46:31,200
sponsors by the way uh that essentially

1410
00:46:31,200 --> 00:46:32,560
does that for you

1411
00:46:32,560 --> 00:46:35,520
uh when it boils down when it boils down

1412
00:46:35,520 --> 00:46:36,000
to it

1413
00:46:36,000 --> 00:46:38,240
it's taking a look at the rfc and then

1414
00:46:38,240 --> 00:46:39,119
throwing away

1415
00:46:39,119 --> 00:46:41,440
any packet you know straight to jail any

1416
00:46:41,440 --> 00:46:45,440
packet that does not comply with the rfc

1417
00:46:45,440 --> 00:46:47,920
so let's review this is a lot of

1418
00:46:47,920 --> 00:46:49,440
information but let's

1419
00:46:49,440 --> 00:46:52,480
let's review the main takeaways number

1420
00:46:52,480 --> 00:46:53,680
one

1421
00:46:53,680 --> 00:46:56,400
http 1.1 added a ton of features and

1422
00:46:56,400 --> 00:46:56,880
that was an

1423
00:46:56,880 --> 00:46:59,760
attempt to standardize the protocol but

1424
00:46:59,760 --> 00:47:01,520
the two main features that we were

1425
00:47:01,520 --> 00:47:02,960
interested in were choking

1426
00:47:02,960 --> 00:47:04,960
coding in within the transfer coding

1427
00:47:04,960 --> 00:47:06,560
chunked uh

1428
00:47:06,560 --> 00:47:08,880
header and then http pipeline which

1429
00:47:08,880 --> 00:47:11,680
allowed which allowed a much faster

1430
00:47:11,680 --> 00:47:13,920
transport of http with one tcp

1431
00:47:13,920 --> 00:47:14,880
connection

1432
00:47:14,880 --> 00:47:17,599
not waiting for response general as http

1433
00:47:17,599 --> 00:47:18,319
requests down

1434
00:47:18,319 --> 00:47:22,079
the pipeline next we learned about

1435
00:47:22,079 --> 00:47:24,319
smuggled requests so smuggler requests

1436
00:47:24,319 --> 00:47:26,160
uh or crafted requests

1437
00:47:26,160 --> 00:47:28,960
may cause desynchronization between web

1438
00:47:28,960 --> 00:47:29,920
components

1439
00:47:29,920 --> 00:47:31,920
and this desynchronization causes

1440
00:47:31,920 --> 00:47:33,119
unplanned behavior

1441
00:47:33,119 --> 00:47:36,839
and in many conditions this behavior is

1442
00:47:36,839 --> 00:47:38,160
exploitable

1443
00:47:38,160 --> 00:47:40,160
so some questions for you as we as we

1444
00:47:40,160 --> 00:47:41,920
close out uh where may

1445
00:47:41,920 --> 00:47:43,520
this behavior where else may this

1446
00:47:43,520 --> 00:47:45,760
behavior be found um maybe in different

1447
00:47:45,760 --> 00:47:46,720
protocols

1448
00:47:46,720 --> 00:47:48,640
could there be a desynchronization could

1449
00:47:48,640 --> 00:47:50,319
it be in different technologies maybe

1450
00:47:50,319 --> 00:47:52,240
not http but maybe maybe another

1451
00:47:52,240 --> 00:47:53,520
protocol or another technology

1452
00:47:53,520 --> 00:47:56,079
altogether maybe on the operating system

1453
00:47:56,079 --> 00:47:58,079
what about away from keyboard could this

1454
00:47:58,079 --> 00:48:00,240
could this kind of behavior be exploited

1455
00:48:00,240 --> 00:48:01,040
in real life

1456
00:48:01,040 --> 00:48:02,400
uh maybe on a social engineering

1457
00:48:02,400 --> 00:48:04,400
engagement uh and

1458
00:48:04,400 --> 00:48:06,640
and last can your organization currently

1459
00:48:06,640 --> 00:48:07,680
detect these

1460
00:48:07,680 --> 00:48:09,680
types of attacks uh maybe more

1461
00:48:09,680 --> 00:48:11,680
importantly are they even aware

1462
00:48:11,680 --> 00:48:13,760
of this these types of attacks because

1463
00:48:13,760 --> 00:48:15,040
you know the first

1464
00:48:15,040 --> 00:48:18,079
the first step is is knowledge in all of

1465
00:48:18,079 --> 00:48:18,559
this

1466
00:48:18,559 --> 00:48:20,400
and that's been my goal is to provide

1467
00:48:20,400 --> 00:48:22,079
awareness to all of you to give you a

1468
00:48:22,079 --> 00:48:24,000
little bit of a hands-on demonstration

1469
00:48:24,000 --> 00:48:25,359
on what it might look like as an

1470
00:48:25,359 --> 00:48:26,240
attacker

1471
00:48:26,240 --> 00:48:29,359
and and really share this cool bug that

1472
00:48:29,359 --> 00:48:33,520
was popular by james cattle in 2019

1473
00:48:33,520 --> 00:48:35,599
this concludes my presentation uh thank

1474
00:48:35,599 --> 00:48:36,559
you all for coming

1475
00:48:36,559 --> 00:48:38,480
uh thank you to the organizers i really

1476
00:48:38,480 --> 00:48:39,599
appreciate it

1477
00:48:39,599 --> 00:48:40,960
i will be posting links from the

1478
00:48:40,960 --> 00:48:43,119
presentation in the discord chat

1479
00:48:43,119 --> 00:48:46,319
in addition um i'll be available for

1480
00:48:46,319 --> 00:48:48,480
questions as well thank you all for

1481
00:48:48,480 --> 00:49:03,839
coming i really appreciate it

1482
00:49:18,190 --> 00:49:28,260
[Music]

1483
00:49:32,510 --> 00:49:37,689
[Music]

1484
00:49:46,050 --> 00:49:49,300
[Music]

1485
00:49:49,599 --> 00:49:51,680
you

