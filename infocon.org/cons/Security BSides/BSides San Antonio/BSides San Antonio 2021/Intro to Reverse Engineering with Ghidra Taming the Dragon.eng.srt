1
00:00:05,520 --> 00:00:06,160
hello

2
00:00:06,160 --> 00:00:09,360
um christopher davie um i'll be doing an

3
00:00:09,360 --> 00:00:11,200
intro to reverse engineering with uh

4
00:00:11,200 --> 00:00:14,000
deidre i like to call this talk

5
00:00:14,000 --> 00:00:16,720
taming the dragon um so first off a

6
00:00:16,720 --> 00:00:18,080
little bit about me

7
00:00:18,080 --> 00:00:21,439
i'm an avid ctf player i've played in my

8
00:00:21,439 --> 00:00:25,039
defcon finals

9
00:00:25,119 --> 00:00:27,760
qualified for other like very large ctf

10
00:00:27,760 --> 00:00:28,400
events

11
00:00:28,400 --> 00:00:32,399
with nasa rejects um went to utsa

12
00:00:32,399 --> 00:00:34,640
and enjoy doing crypto reverse

13
00:00:34,640 --> 00:00:36,320
engineering and like phone challenges

14
00:00:36,320 --> 00:00:38,719
for fun

15
00:00:38,719 --> 00:00:40,640
um so let's do a little bit into like

16
00:00:40,640 --> 00:00:42,480
what is reverse engineering

17
00:00:42,480 --> 00:00:45,920
um in this context i'm talking purely

18
00:00:45,920 --> 00:00:47,280
software reverse engineering

19
00:00:47,280 --> 00:00:49,760
there's another component where you do

20
00:00:49,760 --> 00:00:51,120
hardware reverse engineering that's

21
00:00:51,120 --> 00:00:52,480
outside the scope of what i'm going to

22
00:00:52,480 --> 00:00:53,840
talk about today

23
00:00:53,840 --> 00:00:56,000
but we'll talk about binary reverse

24
00:00:56,000 --> 00:00:57,039
engineering

25
00:00:57,039 --> 00:00:59,120
generally taking some compiled code from

26
00:00:59,120 --> 00:01:01,199
the machine code you lift it up to some

27
00:01:01,199 --> 00:01:03,120
form of an assembly language

28
00:01:03,120 --> 00:01:04,799
and then from there you can mess around

29
00:01:04,799 --> 00:01:06,640
with it and you have tools that allow

30
00:01:06,640 --> 00:01:07,280
you to go

31
00:01:07,280 --> 00:01:10,479
up to higher level languages

32
00:01:10,479 --> 00:01:12,159
so it can be useful for figuring out how

33
00:01:12,159 --> 00:01:13,920
things work from malware

34
00:01:13,920 --> 00:01:16,880
to ctfs i do it a lot for vulnerability

35
00:01:16,880 --> 00:01:18,960
research and reverse engineering

36
00:01:18,960 --> 00:01:21,920
um that's generally some of the things

37
00:01:21,920 --> 00:01:22,960
that you can use it for

38
00:01:22,960 --> 00:01:24,640
also just like figuring out how

39
00:01:24,640 --> 00:01:26,000
something works or

40
00:01:26,000 --> 00:01:31,840
trying to debug a component of something

41
00:01:33,680 --> 00:01:35,680
so in reverse engineering you generally

42
00:01:35,680 --> 00:01:37,360
have the two

43
00:01:37,360 --> 00:01:39,759
common mindsets you have static analysis

44
00:01:39,759 --> 00:01:41,520
and dynamic analysis

45
00:01:41,520 --> 00:01:43,439
um for the purpose of this talk we're

46
00:01:43,439 --> 00:01:44,960
primarily going to focus on static

47
00:01:44,960 --> 00:01:47,759
analysis with egypt

48
00:01:47,759 --> 00:01:49,280
and from there you're usually you're

49
00:01:49,280 --> 00:01:51,040
disassembling so you're taking that

50
00:01:51,040 --> 00:01:53,119
byte code that machine code you then

51
00:01:53,119 --> 00:01:55,439
lift it to assembly and then you have

52
00:01:55,439 --> 00:01:58,320
another step with fija and ida called

53
00:01:58,320 --> 00:02:00,240
the decompilation step which will take

54
00:02:00,240 --> 00:02:03,119
their assembly port it to some type of

55
00:02:03,119 --> 00:02:03,840
an il

56
00:02:03,840 --> 00:02:07,040
so with dijo you'd be going slay to p

57
00:02:07,040 --> 00:02:09,598
code and then from there go to like a c

58
00:02:09,598 --> 00:02:12,399
like syntax

59
00:02:15,360 --> 00:02:17,200
so the process of static analysis is

60
00:02:17,200 --> 00:02:19,280
examining code without executing the

61
00:02:19,280 --> 00:02:21,040
program

62
00:02:21,040 --> 00:02:22,800
and this provides an understanding of

63
00:02:22,800 --> 00:02:24,800
code structure and program flow

64
00:02:24,800 --> 00:02:27,599
but it is limited right so you're gonna

65
00:02:27,599 --> 00:02:29,680
lose a lot of contextual understanding

66
00:02:29,680 --> 00:02:32,560
from like relative jumps from

67
00:02:32,560 --> 00:02:34,720
uh registers that you're not able to

68
00:02:34,720 --> 00:02:37,280
probe without

69
00:02:37,280 --> 00:02:39,440
having a dynamic system you won't know

70
00:02:39,440 --> 00:02:41,599
which branching paths you go down unless

71
00:02:41,599 --> 00:02:43,200
you actually run it

72
00:02:43,200 --> 00:02:46,319
and so

73
00:02:46,319 --> 00:02:49,200
while static analysis can be limited it

74
00:02:49,200 --> 00:02:50,000
is still very

75
00:02:50,000 --> 00:02:52,239
useful and very necessary trait for the

76
00:02:52,239 --> 00:02:54,480
reverse engineering toolkit

77
00:02:54,480 --> 00:02:57,120
uh the damage analysis is usually you

78
00:02:57,120 --> 00:02:57,840
execute

79
00:02:57,840 --> 00:02:59,519
the binary through some form of

80
00:02:59,519 --> 00:03:01,440
restitution usually

81
00:03:01,440 --> 00:03:04,159
uh in the reverse engineering spectrum

82
00:03:04,159 --> 00:03:05,840
you have some type of debugger

83
00:03:05,840 --> 00:03:08,319
attached to it and i believe these go

84
00:03:08,319 --> 00:03:10,080
hand in hand with static analysis

85
00:03:10,080 --> 00:03:12,720
because you can utilize what you're

86
00:03:12,720 --> 00:03:14,319
learning from both ends

87
00:03:14,319 --> 00:03:17,280
to see which paths you want to go down

88
00:03:17,280 --> 00:03:18,480
in the dynamic slide

89
00:03:18,480 --> 00:03:21,120
or what values or what things you want

90
00:03:21,120 --> 00:03:21,760
to set

91
00:03:21,760 --> 00:03:24,720
when reversing and getting your

92
00:03:24,720 --> 00:03:26,319
understanding from the static analysis

93
00:03:26,319 --> 00:03:28,000
side

94
00:03:28,000 --> 00:03:31,040
oh this node is actually outdated

95
00:03:31,040 --> 00:03:34,959
they just recently in the beta

96
00:03:34,959 --> 00:03:38,480
for uh dj 10 added the debugger

97
00:03:38,480 --> 00:03:40,720
and i do have a slide talking about that

98
00:03:40,720 --> 00:03:42,080
um everybody's actually pretty

99
00:03:42,080 --> 00:03:42,799
interesting

100
00:03:42,799 --> 00:03:46,159
it reminds me of red sink which was

101
00:03:46,159 --> 00:03:48,239
a tool for ida that would allow you to

102
00:03:48,239 --> 00:03:49,840
like integrate with like

103
00:03:49,840 --> 00:03:53,120
uh wendy bug and some other things

104
00:03:53,120 --> 00:03:56,159
um the next thing that i'd like to talk

105
00:03:56,159 --> 00:03:58,560
about though is like a plan of attack so

106
00:03:58,560 --> 00:04:00,879
generally when you are reversing some

107
00:04:00,879 --> 00:04:02,080
type of binary

108
00:04:02,080 --> 00:04:04,720
you have to start somewhere so i know

109
00:04:04,720 --> 00:04:06,159
some people do a top-down

110
00:04:06,159 --> 00:04:08,319
approach so they'll start from the like

111
00:04:08,319 --> 00:04:10,239
program entry and work all the way down

112
00:04:10,239 --> 00:04:12,159
through it and try to like

113
00:04:12,159 --> 00:04:14,239
document up anything that they see or

114
00:04:14,239 --> 00:04:15,760
like fix anything up that they see while

115
00:04:15,760 --> 00:04:17,519
scrolling down through the

116
00:04:17,519 --> 00:04:20,000
uh assembly this can be very difficult

117
00:04:20,000 --> 00:04:20,959
for people

118
00:04:20,959 --> 00:04:23,600
new to iris engineering because you get

119
00:04:23,600 --> 00:04:25,280
lost in the weeds here

120
00:04:25,280 --> 00:04:29,440
and may not always be necessary

121
00:04:29,440 --> 00:04:31,440
depending on what type of version you're

122
00:04:31,440 --> 00:04:33,120
trying to do

123
00:04:33,120 --> 00:04:36,240
you can do it at a high level so

124
00:04:36,240 --> 00:04:37,840
looking at the different function

125
00:04:37,840 --> 00:04:39,759
entries and then go from there

126
00:04:39,759 --> 00:04:41,360
and skim the functions to identify

127
00:04:41,360 --> 00:04:42,960
common ones

128
00:04:42,960 --> 00:04:45,440
you can go from common system calls and

129
00:04:45,440 --> 00:04:46,800
function calls and then trace the

130
00:04:46,800 --> 00:04:49,280
program to find interesting things

131
00:04:49,280 --> 00:04:51,680
this is a very like common tactic used

132
00:04:51,680 --> 00:04:53,199
with like vulnerability research and

133
00:04:53,199 --> 00:04:54,160
that

134
00:04:54,160 --> 00:04:55,680
you want to spend as little time as

135
00:04:55,680 --> 00:04:57,680
possible reversing the entirety of the

136
00:04:57,680 --> 00:04:58,479
program

137
00:04:58,479 --> 00:05:02,320
you want to find where you have

138
00:05:02,320 --> 00:05:05,680
um input coming from the user or coming

139
00:05:05,680 --> 00:05:07,199
from

140
00:05:07,199 --> 00:05:08,960
over the socket or whatever controlled

141
00:05:08,960 --> 00:05:10,560
input that you may have

142
00:05:10,560 --> 00:05:12,560
in order to see what types of things you

143
00:05:12,560 --> 00:05:14,639
can um

144
00:05:14,639 --> 00:05:16,960
mess with and so on so that's very

145
00:05:16,960 --> 00:05:17,840
common for that

146
00:05:17,840 --> 00:05:21,280
and then guided usually um

147
00:05:21,280 --> 00:05:23,120
it's like if you have dynamic analysis

148
00:05:23,120 --> 00:05:25,919
so you can trace the execution flow from

149
00:05:25,919 --> 00:05:28,160
dynamic side and then use that to see

150
00:05:28,160 --> 00:05:30,479
the paths that you take

151
00:05:30,479 --> 00:05:32,000
and that one i think is probably the

152
00:05:32,000 --> 00:05:34,720
easiest for beginners to get a

153
00:05:34,720 --> 00:05:37,199
understanding of because you have

154
00:05:37,199 --> 00:05:38,800
something that's already ran through and

155
00:05:38,800 --> 00:05:40,880
executed the binary so you can kind of

156
00:05:40,880 --> 00:05:42,320
step through that trace and figure out

157
00:05:42,320 --> 00:05:44,960
what's going on there

158
00:05:44,960 --> 00:05:47,600
uh some common pitfalls in reverse

159
00:05:47,600 --> 00:05:48,320
engineering

160
00:05:48,320 --> 00:05:52,479
is going too deep into the rabbit hole

161
00:05:52,800 --> 00:05:56,080
you can have a

162
00:05:56,080 --> 00:05:59,280
ton of different like functions that do

163
00:05:59,280 --> 00:06:00,960
like very complex things but those

164
00:06:00,960 --> 00:06:03,520
complex things may not be

165
00:06:03,520 --> 00:06:05,360
what you're interested in this happens a

166
00:06:05,360 --> 00:06:07,360
lot in debugging where people

167
00:06:07,360 --> 00:06:10,000
will initially get lost in some of the

168
00:06:10,000 --> 00:06:12,240
life sys calls or

169
00:06:12,240 --> 00:06:14,479
so on start debugging code that's a

170
00:06:14,479 --> 00:06:16,000
little bit lower than what they actually

171
00:06:16,000 --> 00:06:18,840
want to be executing in

172
00:06:18,840 --> 00:06:22,000
um you should also get into a pitfall of

173
00:06:22,000 --> 00:06:23,280
reversing functions that aren't

174
00:06:23,280 --> 00:06:25,120
reachable this happens a lot in static

175
00:06:25,120 --> 00:06:26,000
analysis

176
00:06:26,000 --> 00:06:29,039
where um you don't know

177
00:06:29,039 --> 00:06:31,600
whether or not that code is going to be

178
00:06:31,600 --> 00:06:32,400
reachable

179
00:06:32,400 --> 00:06:35,520
for what you're doing it may be like

180
00:06:35,520 --> 00:06:38,639
a very um

181
00:06:38,639 --> 00:06:42,000
unused section that like only gets hit

182
00:06:42,000 --> 00:06:43,919
with like different startup parameters

183
00:06:43,919 --> 00:06:45,759
and so on so

184
00:06:45,759 --> 00:06:47,520
uh it can be hard to know what to

185
00:06:47,520 --> 00:06:49,120
reverse but you can also get stock

186
00:06:49,120 --> 00:06:50,479
reversing functions that

187
00:06:50,479 --> 00:06:53,919
um aren't very useful

188
00:06:53,919 --> 00:06:57,280
um running into decompile or like

189
00:06:57,280 --> 00:06:59,199
disassembly issues so

190
00:06:59,199 --> 00:07:00,400
that's something that can be very

191
00:07:00,400 --> 00:07:02,240
frustrating um

192
00:07:02,240 --> 00:07:05,120
and i run into that with dj like either

193
00:07:05,120 --> 00:07:05,599
the

194
00:07:05,599 --> 00:07:08,560
function is too large or the function

195
00:07:08,560 --> 00:07:09,039
has

196
00:07:09,039 --> 00:07:12,000
like very strange things that causes the

197
00:07:12,000 --> 00:07:14,080
decompilers to quit out

198
00:07:14,080 --> 00:07:15,680
and same thing where the disassembly

199
00:07:15,680 --> 00:07:18,000
kind of just doesn't track the

200
00:07:18,000 --> 00:07:20,160
uh function you have to fix it up in

201
00:07:20,160 --> 00:07:22,960
order for anything to actually

202
00:07:22,960 --> 00:07:25,039
be analyzed and then not saving your

203
00:07:25,039 --> 00:07:26,880
database is a common pitfall because

204
00:07:26,880 --> 00:07:27,759
i've had

205
00:07:27,759 --> 00:07:30,479
power outages i've had other things

206
00:07:30,479 --> 00:07:31,840
where

207
00:07:31,840 --> 00:07:33,599
not having to save your database can

208
00:07:33,599 --> 00:07:35,520
throw a lot of work and research time

209
00:07:35,520 --> 00:07:38,159
out the window

210
00:07:39,759 --> 00:07:42,240
so a simple overview of what a

211
00:07:42,240 --> 00:07:43,199
disassembler

212
00:07:43,199 --> 00:07:46,560
or like edger does is it'll convert

213
00:07:46,560 --> 00:07:49,680
machine code up to assembly recognize

214
00:07:49,680 --> 00:07:50,000
the

215
00:07:50,000 --> 00:07:52,879
start and end of functions recognize

216
00:07:52,879 --> 00:07:53,280
jump

217
00:07:53,280 --> 00:07:56,000
calls to functions uh it'll help you

218
00:07:56,000 --> 00:07:57,039
find strings

219
00:07:57,039 --> 00:08:00,080
and like data sections uh it'll remember

220
00:08:00,080 --> 00:08:02,080
like any user labels and comments so you

221
00:08:02,080 --> 00:08:04,560
can type in your own comments to

222
00:08:04,560 --> 00:08:08,000
start to make a

223
00:08:08,000 --> 00:08:10,560
like binary that you're versus more

224
00:08:10,560 --> 00:08:12,319
readable more understandable

225
00:08:12,319 --> 00:08:14,560
and generally has a graph of program

226
00:08:14,560 --> 00:08:16,160
flow

227
00:08:16,160 --> 00:08:17,360
all right so i've been talking about

228
00:08:17,360 --> 00:08:19,599
guitar a lot but what is deidra

229
00:08:19,599 --> 00:08:22,160
so it's a software reverse engineering

230
00:08:22,160 --> 00:08:22,639
tool

231
00:08:22,639 --> 00:08:25,520
with version management and decompilers

232
00:08:25,520 --> 00:08:25,840
and

233
00:08:25,840 --> 00:08:29,440
also now includes a debugger

234
00:08:29,440 --> 00:08:32,880
um it has a public repo on github with

235
00:08:32,880 --> 00:08:35,919
active contributions and maintainers

236
00:08:35,919 --> 00:08:38,640
and it is multi-platform so i'm using it

237
00:08:38,640 --> 00:08:39,360
today

238
00:08:39,360 --> 00:08:43,360
on osx but it's going to run on linux os

239
00:08:43,360 --> 00:08:45,519
x windows or any type of environment

240
00:08:45,519 --> 00:08:45,920
that

241
00:08:45,920 --> 00:08:50,959
has java 11 supported

242
00:08:52,560 --> 00:08:54,720
as to the supported architecture so this

243
00:08:54,720 --> 00:08:56,959
is a uh list from rob joyce uh

244
00:08:56,959 --> 00:08:59,760
rob was one of the like initial people

245
00:08:59,760 --> 00:09:02,080
who spearheaded um

246
00:09:02,080 --> 00:09:05,279
publicizing guitar and also um

247
00:09:05,279 --> 00:09:10,080
was the main face in promoting diedra

248
00:09:10,080 --> 00:09:13,040
but they have all sorts of different uh

249
00:09:13,040 --> 00:09:14,560
supported architectures

250
00:09:14,560 --> 00:09:16,160
and these supported architectures

251
00:09:16,160 --> 00:09:18,800
generally have an associated

252
00:09:18,800 --> 00:09:21,519
decompiler and this is very nice because

253
00:09:21,519 --> 00:09:23,200
for a lot of these architectures tools

254
00:09:23,200 --> 00:09:24,480
like ida

255
00:09:24,480 --> 00:09:27,600
um did not have a way to lift them

256
00:09:27,600 --> 00:09:30,880
without doing um

257
00:09:30,880 --> 00:09:34,640
either your own custom lifting of it or

258
00:09:34,640 --> 00:09:37,200
having a financial in some other way so

259
00:09:37,200 --> 00:09:38,000
there's definitely

260
00:09:38,000 --> 00:09:41,360
improved reverse engineering of earl

261
00:09:41,360 --> 00:09:43,519
and has made uh life a lot easier for

262
00:09:43,519 --> 00:09:45,200
people working in

263
00:09:45,200 --> 00:09:49,920
um some of these various architectures

264
00:09:49,920 --> 00:09:51,839
um

265
00:09:51,839 --> 00:09:53,839
yeah so to download pedra so there are

266
00:09:53,839 --> 00:09:55,279
two websites there's the

267
00:09:55,279 --> 00:09:59,760
uh nsa's um

268
00:09:59,760 --> 00:10:02,000
uh repo on github and then there's

269
00:10:02,000 --> 00:10:04,560
teacher sre.org

270
00:10:04,560 --> 00:10:06,640
right now you have the stable version

271
00:10:06,640 --> 00:10:09,200
which i believe is 9.2.4

272
00:10:09,200 --> 00:10:12,480
and then the beta version which is 10.00

273
00:10:12,480 --> 00:10:14,000
and the beta version is what i'm going

274
00:10:14,000 --> 00:10:17,279
to be doing for some of my

275
00:10:17,279 --> 00:10:20,320
uh demos at the end of the presentation

276
00:10:20,320 --> 00:10:21,920
uh so like the general like

277
00:10:21,920 --> 00:10:23,440
understanding of the layout you have

278
00:10:23,440 --> 00:10:26,320
um things broken down into different

279
00:10:26,320 --> 00:10:27,279
areas you have

280
00:10:27,279 --> 00:10:29,839
uh docs which have cheat sheets which

281
00:10:29,839 --> 00:10:30,839
have

282
00:10:30,839 --> 00:10:33,120
presentations to like get yourself or

283
00:10:33,120 --> 00:10:35,839
get you um

284
00:10:35,839 --> 00:10:38,000
acclimated to like some of the minutiae

285
00:10:38,000 --> 00:10:39,279
of

286
00:10:39,279 --> 00:10:42,399
deidra um but for running it you have

287
00:10:42,399 --> 00:10:44,160
user run and need to run.bat

288
00:10:44,160 --> 00:10:45,839
so dj run is going to be the linux

289
00:10:45,839 --> 00:10:47,760
utility or osx utility

290
00:10:47,760 --> 00:10:51,760
just script that um opens the

291
00:10:51,760 --> 00:10:54,160
java and then same thing with the bad

292
00:10:54,160 --> 00:10:57,600
script which will run on windows

293
00:10:57,600 --> 00:10:59,680
um the trainings are really interesting

294
00:10:59,680 --> 00:11:00,640
uh

295
00:11:00,640 --> 00:11:03,519
they have instructor notes to give your

296
00:11:03,519 --> 00:11:04,000
uh

297
00:11:04,000 --> 00:11:07,839
to like um be more familiar with the

298
00:11:07,839 --> 00:11:09,440
content that's going on in the

299
00:11:09,440 --> 00:11:10,800
presentation so they can be a really

300
00:11:10,800 --> 00:11:12,399
good learning

301
00:11:12,399 --> 00:11:15,600
environment um i looked through the beta

302
00:11:15,600 --> 00:11:17,440
today and i didn't see anything in the

303
00:11:17,440 --> 00:11:20,240
advanced or intermediate that had

304
00:11:20,240 --> 00:11:22,959
uh presentations or documentation there

305
00:11:22,959 --> 00:11:25,839
on the debugger so the divider is still

306
00:11:25,839 --> 00:11:27,600
reading some of the other documentation

307
00:11:27,600 --> 00:11:29,200
and kind of figuring it out on your own

308
00:11:29,200 --> 00:11:31,360
right now

309
00:11:31,360 --> 00:11:33,839
um some useful plugins that i think are

310
00:11:33,839 --> 00:11:34,800
pretty cool for

311
00:11:34,800 --> 00:11:37,040
youtube right now are dragon dance so

312
00:11:37,040 --> 00:11:39,360
it's like lighthouse for aedra

313
00:11:39,360 --> 00:11:42,959
lighthouse is a tool that would take

314
00:11:42,959 --> 00:11:43,360
like

315
00:11:43,360 --> 00:11:46,640
dynamic traces of the

316
00:11:46,640 --> 00:11:50,240
binary and then use that to visualize

317
00:11:50,240 --> 00:11:52,240
and manipulate the code coverage that

318
00:11:52,240 --> 00:11:54,000
you get when executing

319
00:11:54,000 --> 00:11:55,680
so it'll like highlight the different

320
00:11:55,680 --> 00:11:57,279
fields

321
00:11:57,279 --> 00:12:01,200
or basic blocks that you see to

322
00:12:01,200 --> 00:12:02,959
kind of get an understanding of where

323
00:12:02,959 --> 00:12:04,959
you've progressed in the binary at a

324
00:12:04,959 --> 00:12:06,160
dynamic side and

325
00:12:06,160 --> 00:12:09,200
replicate that over on the static side

326
00:12:09,200 --> 00:12:12,800
um this just has a uh it's a dj

327
00:12:12,800 --> 00:12:13,760
community page

328
00:12:13,760 --> 00:12:16,639
and it has a ton of plugins and cpu

329
00:12:16,639 --> 00:12:18,639
other like cpu extensions that may not

330
00:12:18,639 --> 00:12:19,760
be

331
00:12:19,760 --> 00:12:21,920
directly supported by deidra but

332
00:12:21,920 --> 00:12:23,040
community support

333
00:12:23,040 --> 00:12:25,519
have created so i think there are some

334
00:12:25,519 --> 00:12:26,639
for like

335
00:12:26,639 --> 00:12:29,360
the uh like game boy and so on that are

336
00:12:29,360 --> 00:12:30,560
up there

337
00:12:30,560 --> 00:12:33,839
and then there's uh daenerys which

338
00:12:33,839 --> 00:12:35,200
allows for execution

339
00:12:35,200 --> 00:12:37,839
of ida strips and uddra and also allows

340
00:12:37,839 --> 00:12:39,440
you to port your digit scripts over to

341
00:12:39,440 --> 00:12:41,440
ida which has been really nice

342
00:12:41,440 --> 00:12:44,320
uh one thing not listed here is that

343
00:12:44,320 --> 00:12:45,680
edra also has

344
00:12:45,680 --> 00:12:48,480
tools to convert your binary database

345
00:12:48,480 --> 00:12:52,000
from ida to dija and from dija to ida

346
00:12:52,000 --> 00:12:53,839
noting that you will lose some of the

347
00:12:53,839 --> 00:12:55,839
comments and markups that you

348
00:12:55,839 --> 00:12:58,560
have but some of the structure like if

349
00:12:58,560 --> 00:12:59,600
you have to

350
00:12:59,600 --> 00:13:02,959
manipulate the like program entry

351
00:13:02,959 --> 00:13:05,760
or if you have different like header

352
00:13:05,760 --> 00:13:07,680
sections that you have to

353
00:13:07,680 --> 00:13:09,200
mess with like if you're doing firmware

354
00:13:09,200 --> 00:13:10,720
those things will be saved and

355
00:13:10,720 --> 00:13:12,800
propagated into the other

356
00:13:12,800 --> 00:13:15,680
analysis tool

357
00:13:16,480 --> 00:13:19,279
so some useful features so themes and

358
00:13:19,279 --> 00:13:20,959
configurations

359
00:13:20,959 --> 00:13:23,279
um you can see here that i have like a

360
00:13:23,279 --> 00:13:24,639
little um

361
00:13:24,639 --> 00:13:27,519
dark mode light so it's using the metal

362
00:13:27,519 --> 00:13:29,519
theme and then inverts the colors to

363
00:13:29,519 --> 00:13:32,480
make it look like dark mode

364
00:13:32,480 --> 00:13:35,120
i was going to use this for some of my

365
00:13:35,120 --> 00:13:36,880
demos however

366
00:13:36,880 --> 00:13:38,399
i believe it makes it a little bit

367
00:13:38,399 --> 00:13:40,160
unreadable for

368
00:13:40,160 --> 00:13:42,000
like presentation wise so i'm going to

369
00:13:42,000 --> 00:13:44,480
probably just use the light mode theme

370
00:13:44,480 --> 00:13:46,639
um there's version tracking so version

371
00:13:46,639 --> 00:13:47,519
tracking in

372
00:13:47,519 --> 00:13:50,880
the uh giga server and that's probably

373
00:13:50,880 --> 00:13:52,720
one of the most powerful things

374
00:13:52,720 --> 00:13:55,839
with each apart from having

375
00:13:55,839 --> 00:13:58,320
um lifters and decompilers for

376
00:13:58,320 --> 00:14:01,360
architectures that other

377
00:14:01,360 --> 00:14:04,399
tools don't support is the um server

378
00:14:04,399 --> 00:14:05,760
collaboration

379
00:14:05,760 --> 00:14:08,000
so i believe for ioda like rpi sec

380
00:14:08,000 --> 00:14:10,639
should say um

381
00:14:10,639 --> 00:14:14,399
ctf team out of the school rpi

382
00:14:14,399 --> 00:14:18,160
up in new york they have their own

383
00:14:18,160 --> 00:14:20,639
develop system to do collaboration ida

384
00:14:20,639 --> 00:14:22,160
but they never released it and never

385
00:14:22,160 --> 00:14:23,600
publicized it

386
00:14:23,600 --> 00:14:26,639
um so barring that there's no like

387
00:14:26,639 --> 00:14:28,959
collaborative way to do reversing other

388
00:14:28,959 --> 00:14:30,240
than

389
00:14:30,240 --> 00:14:33,360
everybody just sharing their databases

390
00:14:33,360 --> 00:14:34,399
across with

391
00:14:34,399 --> 00:14:36,160
each other so it was really difficult to

392
00:14:36,160 --> 00:14:38,079
manage who did what

393
00:14:38,079 --> 00:14:41,839
and also transferring those changes was

394
00:14:41,839 --> 00:14:42,800
a bit tedious

395
00:14:42,800 --> 00:14:46,480
so dja come support it with a djs server

396
00:14:46,480 --> 00:14:48,000
which you can set up and then you can

397
00:14:48,000 --> 00:14:48,880
commit up

398
00:14:48,880 --> 00:14:52,560
your analysis changes to

399
00:14:52,560 --> 00:14:55,279
the server to allow other people to view

400
00:14:55,279 --> 00:14:57,360
that and also

401
00:14:57,360 --> 00:14:59,040
commit their own changes so it's very

402
00:14:59,040 --> 00:15:01,360
good as a teaching tool

403
00:15:01,360 --> 00:15:04,320
i think it is stellar to use in like the

404
00:15:04,320 --> 00:15:06,000
university

405
00:15:06,000 --> 00:15:08,800
sphere and is also very good for

406
00:15:08,800 --> 00:15:09,680
collaborative

407
00:15:09,680 --> 00:15:13,680
large reversing efforts on

408
00:15:13,680 --> 00:15:16,720
either like large uh binaries or things

409
00:15:16,720 --> 00:15:18,560
that are very complex that have multiple

410
00:15:18,560 --> 00:15:20,720
engineers working on them

411
00:15:20,720 --> 00:15:24,839
um it has binary diffing however

412
00:15:24,839 --> 00:15:28,720
um i still prefer bindif which bindif

413
00:15:28,720 --> 00:15:34,000
um i believe has some support for

414
00:15:34,000 --> 00:15:36,800
um deidre now but i know it has support

415
00:15:36,800 --> 00:15:38,480
for ida bindif is a

416
00:15:38,480 --> 00:15:41,600
utility that will diff

417
00:15:41,600 --> 00:15:43,920
two separate binaries if you have like a

418
00:15:43,920 --> 00:15:45,199
newer versions let's say

419
00:15:45,199 --> 00:15:47,120
windows team out with a patch for

420
00:15:47,120 --> 00:15:48,480
something you want to figure out what

421
00:15:48,480 --> 00:15:49,680
that patch has

422
00:15:49,680 --> 00:15:53,360
you can use the binary difference to

423
00:15:53,360 --> 00:15:55,519
you the difference between that um i

424
00:15:55,519 --> 00:15:57,279
haven't been the biggest fan of

425
00:15:57,279 --> 00:15:59,519
the guitra provided binary differing

426
00:15:59,519 --> 00:16:01,199
tool but it still is nice

427
00:16:01,199 --> 00:16:03,759
uh as a nice to have and modi is

428
00:16:03,759 --> 00:16:04,880
something that i'll show you

429
00:16:04,880 --> 00:16:08,399
in uh while doing the demo

430
00:16:08,399 --> 00:16:11,839
um so i kind of ranted a bit about um

431
00:16:11,839 --> 00:16:14,079
the server uh collaboration but it's

432
00:16:14,079 --> 00:16:16,880
actually like really easy to set up

433
00:16:16,880 --> 00:16:18,800
um you basically just need a centralized

434
00:16:18,800 --> 00:16:20,959
server and then it's running

435
00:16:20,959 --> 00:16:25,040
out of the same utilities that you run

436
00:16:25,040 --> 00:16:26,560
for like each of run

437
00:16:26,560 --> 00:16:28,639
so you just have a server component it

438
00:16:28,639 --> 00:16:29,839
runs

439
00:16:29,839 --> 00:16:33,040
that stuff just needs java setup

440
00:16:33,040 --> 00:16:35,519
and you can easily get the server

441
00:16:35,519 --> 00:16:36,720
running there

442
00:16:36,720 --> 00:16:38,959
and then have other people be able to

443
00:16:38,959 --> 00:16:40,560
access that

444
00:16:40,560 --> 00:16:43,360
um i thought about having a dj server

445
00:16:43,360 --> 00:16:44,800
that people could

446
00:16:44,800 --> 00:16:48,079
use and play with

447
00:16:48,079 --> 00:16:51,279
during the talk however um

448
00:16:51,279 --> 00:16:53,360
neutral has like authentication and

449
00:16:53,360 --> 00:16:54,320
there is an

450
00:16:54,320 --> 00:16:56,800
authenticated mode but i didn't

451
00:16:56,800 --> 00:16:58,800
necessarily want to do that because then

452
00:16:58,800 --> 00:17:00,959
people could like mess things up so i

453
00:17:00,959 --> 00:17:02,639
decided to miss that idea

454
00:17:02,639 --> 00:17:05,760
but um the server collaboration is very

455
00:17:05,760 --> 00:17:08,720
useful for lots of different things so

456
00:17:08,720 --> 00:17:10,400
you can track like commit changes

457
00:17:10,400 --> 00:17:13,280
kind of similar to like using github for

458
00:17:13,280 --> 00:17:14,160
changes to

459
00:17:14,160 --> 00:17:17,599
uh reversing engineering a binary

460
00:17:17,599 --> 00:17:19,439
you can review changes by others and you

461
00:17:19,439 --> 00:17:22,079
also see that version history and revert

462
00:17:22,079 --> 00:17:24,720
back to those changes and it's very

463
00:17:24,720 --> 00:17:27,199
useful for ctfs where you're

464
00:17:27,199 --> 00:17:30,640
um doing things very like quickly and

465
00:17:30,640 --> 00:17:32,240
need to share those uh

466
00:17:32,240 --> 00:17:34,160
binaries very quickly so you could have

467
00:17:34,160 --> 00:17:35,840
people like reversing different

468
00:17:35,840 --> 00:17:37,919
functions and then collaborate to see

469
00:17:37,919 --> 00:17:40,160
where they are on different things very

470
00:17:40,160 --> 00:17:42,160
useful for mentoring and

471
00:17:42,160 --> 00:17:44,240
group malware reversing efforts group of

472
00:17:44,240 --> 00:17:46,240
vulnerability researching efforts and so

473
00:17:46,240 --> 00:17:48,480
on

474
00:17:48,960 --> 00:17:51,280
um so when you first start off with uh

475
00:17:51,280 --> 00:17:52,320
deidra you're gonna

476
00:17:52,320 --> 00:17:54,400
have like um you know start it up and

477
00:17:54,400 --> 00:17:55,840
you'll get this type of view

478
00:17:55,840 --> 00:17:58,320
so you have like a tool chest and you

479
00:17:58,320 --> 00:18:00,000
don't have an active project so you need

480
00:18:00,000 --> 00:18:01,440
to create a new project

481
00:18:01,440 --> 00:18:04,880
um and with that new project

482
00:18:04,880 --> 00:18:07,360
so you create projects you can create a

483
00:18:07,360 --> 00:18:08,880
shared or unshared project

484
00:18:08,880 --> 00:18:11,120
shared projects are going to be pushed

485
00:18:11,120 --> 00:18:14,160
up to a server if you have a server

486
00:18:14,160 --> 00:18:17,360
um from there once you create

487
00:18:17,360 --> 00:18:20,799
a project my project is called test

488
00:18:20,799 --> 00:18:23,440
then you can then start to upload your

489
00:18:23,440 --> 00:18:25,280
binary so for this example

490
00:18:25,280 --> 00:18:29,200
i'm uploading or importing um

491
00:18:29,200 --> 00:18:32,799
my os x ls binary

492
00:18:32,799 --> 00:18:35,520
up into deidra to try to reverse

493
00:18:35,520 --> 00:18:36,880
engineer that

494
00:18:36,880 --> 00:18:39,600
once you have a binary that's imported

495
00:18:39,600 --> 00:18:42,320
you'll double check the binary

496
00:18:42,320 --> 00:18:46,480
it'll pop up with a a few different

497
00:18:46,480 --> 00:18:48,320
window panes but then it'll ask you

498
00:18:48,320 --> 00:18:50,400
saying hey this binary hasn't been

499
00:18:50,400 --> 00:18:52,559
analyzed would you like to analyze it

500
00:18:52,559 --> 00:18:54,080
and you'll have a bunch of different

501
00:18:54,080 --> 00:18:56,080
settings if you're just starting

502
00:18:56,080 --> 00:18:58,720
off with dedra i would say probably

503
00:18:58,720 --> 00:18:59,919
don't

504
00:18:59,919 --> 00:19:03,919
mess with the different um

505
00:19:03,919 --> 00:19:05,679
analyzers i would like look through them

506
00:19:05,679 --> 00:19:07,600
and like some of them might be useful

507
00:19:07,600 --> 00:19:08,559
for like the different

508
00:19:08,559 --> 00:19:11,280
niche things that you're working with um

509
00:19:11,280 --> 00:19:12,559
so for instance

510
00:19:12,559 --> 00:19:15,679
like i know there are some plugins

511
00:19:15,679 --> 00:19:17,840
for analysis for like game boy and so on

512
00:19:17,840 --> 00:19:19,200
so you might want to like use

513
00:19:19,200 --> 00:19:21,520
those strips but maybe run them as one

514
00:19:21,520 --> 00:19:22,480
offs rather than

515
00:19:22,480 --> 00:19:25,840
run it in like the batch mode of like

516
00:19:25,840 --> 00:19:29,360
running all these scripts at one time

517
00:19:29,520 --> 00:19:33,200
um tool options so uh with feature you

518
00:19:33,200 --> 00:19:34,080
can

519
00:19:34,080 --> 00:19:36,240
modify the tool to do a bunch of

520
00:19:36,240 --> 00:19:37,360
different things you can change the

521
00:19:37,360 --> 00:19:38,160
color scheme

522
00:19:38,160 --> 00:19:41,280
and you can also change um how different

523
00:19:41,280 --> 00:19:42,400
things like lay out

524
00:19:42,400 --> 00:19:45,520
on the tool so for instance

525
00:19:45,520 --> 00:19:49,679
uh one thing that i like to modify when

526
00:19:49,679 --> 00:19:52,720
i'm using guidra is

527
00:19:52,720 --> 00:19:54,960
usually eliminate unreachable code is

528
00:19:54,960 --> 00:19:57,360
checked

529
00:19:57,440 --> 00:19:59,280
as i do a lot of vulnerability research

530
00:19:59,280 --> 00:20:01,200
and it might be nice for

531
00:20:01,200 --> 00:20:04,400
once you have a bug to know what

532
00:20:04,400 --> 00:20:05,039
different

533
00:20:05,039 --> 00:20:07,520
chains or like um code that you can

534
00:20:07,520 --> 00:20:08,240
utilize

535
00:20:08,240 --> 00:20:11,280
to execute in other areas so

536
00:20:11,280 --> 00:20:13,360
um while i may think that it's

537
00:20:13,360 --> 00:20:15,120
unreachable you may be able to make it

538
00:20:15,120 --> 00:20:17,840
unreachable so i like to

539
00:20:17,840 --> 00:20:19,840
or you may be able to make it reachable

540
00:20:19,840 --> 00:20:21,280
so i like to

541
00:20:21,280 --> 00:20:23,840
uncheck that field um it adds a little

542
00:20:23,840 --> 00:20:25,600
bit more

543
00:20:25,600 --> 00:20:27,440
to what you're going to see with fija

544
00:20:27,440 --> 00:20:28,799
and this can

545
00:20:28,799 --> 00:20:30,559
sometimes lead you back into that rabbit

546
00:20:30,559 --> 00:20:32,640
hole of reversing things that aren't

547
00:20:32,640 --> 00:20:33,440
reachable

548
00:20:33,440 --> 00:20:36,720
but i generally would rather see it than

549
00:20:36,720 --> 00:20:37,520
not

550
00:20:37,520 --> 00:20:40,639
from my perspective

551
00:20:40,880 --> 00:20:42,559
you can also go through and modify your

552
00:20:42,559 --> 00:20:44,559
key bindings

553
00:20:44,559 --> 00:20:46,480
i like to fix up some of the key

554
00:20:46,480 --> 00:20:48,559
bindings to make them similar to ida

555
00:20:48,559 --> 00:20:50,159
just because that's what i'm

556
00:20:50,159 --> 00:20:52,080
more used to and accustomed to when

557
00:20:52,080 --> 00:20:53,919
doing reversing

558
00:20:53,919 --> 00:20:58,080
um and also just adding other

559
00:20:59,039 --> 00:21:01,120
like key bindings to make things make

560
00:21:01,120 --> 00:21:02,080
your life easier

561
00:21:02,080 --> 00:21:04,720
for different um tools that you have or

562
00:21:04,720 --> 00:21:06,080
like the different components and

563
00:21:06,080 --> 00:21:09,120
different views that you have in egypt

564
00:21:09,120 --> 00:21:12,400
uh another thing that i like to disable

565
00:21:12,400 --> 00:21:13,840
and this is really hard to read and why

566
00:21:13,840 --> 00:21:16,720
i decided not to do

567
00:21:16,720 --> 00:21:18,640
the dark mode from here but you can see

568
00:21:18,640 --> 00:21:20,720
like the check boxes really aren't

569
00:21:20,720 --> 00:21:21,760
usable

570
00:21:21,760 --> 00:21:25,440
but for the disassembly options

571
00:21:25,440 --> 00:21:28,640
i like to turn off

572
00:21:28,640 --> 00:21:30,799
markup inferred variable references and

573
00:21:30,799 --> 00:21:32,960
so what this is doing is saying

574
00:21:32,960 --> 00:21:35,440
if you have a variable that's named in

575
00:21:35,440 --> 00:21:37,600
the decompilation side

576
00:21:37,600 --> 00:21:40,880
so in the c side it tries to assign the

577
00:21:40,880 --> 00:21:44,799
registers over on the disassembly those

578
00:21:44,799 --> 00:21:45,679
same names

579
00:21:45,679 --> 00:21:48,080
and for my purposes that generally is

580
00:21:48,080 --> 00:21:49,760
more confusing than helpful

581
00:21:49,760 --> 00:21:51,200
i like to be able to see what registers

582
00:21:51,200 --> 00:21:53,840
are being used especially with

583
00:21:53,840 --> 00:21:56,480
the different parameters and like uh

584
00:21:56,480 --> 00:21:57,440
software function

585
00:21:57,440 --> 00:22:01,039
um like kali caller conventions

586
00:22:01,039 --> 00:22:04,480
so i prefer to like actually be able to

587
00:22:04,480 --> 00:22:04,799
see

588
00:22:04,799 --> 00:22:08,880
the um registers there

589
00:22:08,880 --> 00:22:10,799
and i'll show you an example of that in

590
00:22:10,799 --> 00:22:12,080
a second

591
00:22:12,080 --> 00:22:14,559
um there's also some common key bondings

592
00:22:14,559 --> 00:22:15,440
that you can look at

593
00:22:15,440 --> 00:22:17,200
and after i finish this talk i'm going

594
00:22:17,200 --> 00:22:20,159
to go through and upload my slides and

595
00:22:20,159 --> 00:22:22,159
some test binaries for people to mess

596
00:22:22,159 --> 00:22:25,200
with if they're interested

597
00:22:25,200 --> 00:22:26,799
but there's like several uh different

598
00:22:26,799 --> 00:22:29,520
common key findings there's actually

599
00:22:29,520 --> 00:22:33,280
um several gists out there of like

600
00:22:33,280 --> 00:22:37,120
applying um all of like ida's

601
00:22:37,120 --> 00:22:40,240
um tooling interface so

602
00:22:40,240 --> 00:22:42,559
like the key command t bindings for that

603
00:22:42,559 --> 00:22:44,640
over to dja to make your

604
00:22:44,640 --> 00:22:47,679
transition a little bit easier um now

605
00:22:47,679 --> 00:22:48,480
we're going to talk about some of the

606
00:22:48,480 --> 00:22:49,120
views

607
00:22:49,120 --> 00:22:52,400
so there's the graph view um it is my

608
00:22:52,400 --> 00:22:54,080
perspective that the graph

609
00:22:54,080 --> 00:22:58,240
view for djira is not my favorite

610
00:22:58,240 --> 00:23:01,440
um if i were to work on something only

611
00:23:01,440 --> 00:23:03,520
from a graph view perspective

612
00:23:03,520 --> 00:23:06,480
i believe ida is far superior in that

613
00:23:06,480 --> 00:23:07,679
and binary ninja

614
00:23:07,679 --> 00:23:10,799
as firearm superior and the view that

615
00:23:10,799 --> 00:23:13,039
you get for graph view

616
00:23:13,039 --> 00:23:14,559
i just feel like eucharist is a little

617
00:23:14,559 --> 00:23:17,280
bit funky

618
00:23:17,440 --> 00:23:20,240
but you know dj makes up for it and how

619
00:23:20,240 --> 00:23:20,559
its

620
00:23:20,559 --> 00:23:23,440
general workflow is intended to be used

621
00:23:23,440 --> 00:23:24,480
is more from the

622
00:23:24,480 --> 00:23:29,039
decompilation than from the graph view

623
00:23:29,039 --> 00:23:32,080
um but with the graph you can

624
00:23:32,080 --> 00:23:34,559
apply markup so you can apply coloring

625
00:23:34,559 --> 00:23:36,000
this is very useful when doing

626
00:23:36,000 --> 00:23:39,760
like traces so you can um

627
00:23:39,760 --> 00:23:42,320
uh colorify things in the graph to say

628
00:23:42,320 --> 00:23:43,440
hey we took

629
00:23:43,440 --> 00:23:47,039
this branch we went down this code path

630
00:23:47,039 --> 00:23:48,640
and so on so it can make your life a

631
00:23:48,640 --> 00:23:51,039
little bit easier um

632
00:23:51,039 --> 00:23:54,320
with where which functions you've either

633
00:23:54,320 --> 00:23:56,480
gone down dynamically or which functions

634
00:23:56,480 --> 00:23:57,679
you've

635
00:23:57,679 --> 00:23:59,200
reversed and or which portions of the

636
00:23:59,200 --> 00:24:01,039
luncheon you reverse and which portions

637
00:24:01,039 --> 00:24:04,080
you haven't

638
00:24:04,080 --> 00:24:06,480
um now the decompiler i'd say the

639
00:24:06,480 --> 00:24:08,559
decompiler is the like bread and butter

640
00:24:08,559 --> 00:24:10,559
and what most people end up using

641
00:24:10,559 --> 00:24:13,840
when using um hydra

642
00:24:13,840 --> 00:24:17,440
um i like to think of it as a cheap mode

643
00:24:17,440 --> 00:24:18,080
in a sense

644
00:24:18,080 --> 00:24:21,679
i'm very used to using um

645
00:24:21,679 --> 00:24:24,559
ida to go through the disassembly and

646
00:24:24,559 --> 00:24:26,240
having to read a lot of the

647
00:24:26,240 --> 00:24:29,120
assembly to understand things so having

648
00:24:29,120 --> 00:24:30,960
a decompiler is definitely nice

649
00:24:30,960 --> 00:24:35,120
and is definitely an aid

650
00:24:35,120 --> 00:24:38,000
in which you can comment up all these

651
00:24:38,000 --> 00:24:39,120
different variables

652
00:24:39,120 --> 00:24:41,840
add your own

653
00:24:43,279 --> 00:24:46,880
mnemonic names in order to

654
00:24:46,880 --> 00:24:48,640
make it more understandable and more

655
00:24:48,640 --> 00:24:50,720
readable for

656
00:24:50,720 --> 00:24:54,080
your reverse engineering needs

657
00:24:54,559 --> 00:24:56,480
there's an example of uh doing the

658
00:24:56,480 --> 00:24:57,600
markup so

659
00:24:57,600 --> 00:25:00,000
this is just a mim copy you have your

660
00:25:00,000 --> 00:25:01,440
dest your source

661
00:25:01,440 --> 00:25:06,720
and then the size so yeah

662
00:25:09,520 --> 00:25:12,720
you can also patch a binary so

663
00:25:12,720 --> 00:25:16,559
say that you have i don't know my

664
00:25:16,559 --> 00:25:20,080
um example this

665
00:25:20,080 --> 00:25:23,279
that applies to most people say that you

666
00:25:23,279 --> 00:25:24,960
uh like want to cheat in the video game

667
00:25:24,960 --> 00:25:26,640
or you want to like apply a patch to

668
00:25:26,640 --> 00:25:28,400
software because it's being annoying or

669
00:25:28,400 --> 00:25:29,200
something

670
00:25:29,200 --> 00:25:32,000
you can apply patches to like say not

671
00:25:32,000 --> 00:25:33,279
take a jump or

672
00:25:33,279 --> 00:25:35,919
so on so it does have the ability to

673
00:25:35,919 --> 00:25:37,200
patch a binary

674
00:25:37,200 --> 00:25:40,400
and type in the

675
00:25:40,400 --> 00:25:42,480
various instructions that you'd want to

676
00:25:42,480 --> 00:25:44,480
add there it'll fix it up and

677
00:25:44,480 --> 00:25:46,640
write that machine code for you but then

678
00:25:46,640 --> 00:25:48,000
you having to like

679
00:25:48,000 --> 00:25:51,840
manually like set it the binary

680
00:25:51,919 --> 00:25:54,080
uh now talk a little bit about p code so

681
00:25:54,080 --> 00:25:56,159
slay and p code are

682
00:25:56,159 --> 00:25:59,360
some of the intermediate views and

683
00:25:59,360 --> 00:26:02,559
intermediate languages that hedra

684
00:26:02,559 --> 00:26:05,840
uses taking the

685
00:26:05,840 --> 00:26:08,400
micropro the machine code popping it up

686
00:26:08,400 --> 00:26:10,480
to an assembly and then from there

687
00:26:10,480 --> 00:26:12,480
pop the name up to see so it'll go

688
00:26:12,480 --> 00:26:14,240
through these il

689
00:26:14,240 --> 00:26:16,960
or intermediate uh language or

690
00:26:16,960 --> 00:26:19,200
intermediate representation

691
00:26:19,200 --> 00:26:22,480
uh views before being pushed up to that

692
00:26:22,480 --> 00:26:25,279
c like syntax

693
00:26:25,279 --> 00:26:28,320
you can also go in uh

694
00:26:28,320 --> 00:26:29,919
i'll show it in a second but you can

695
00:26:29,919 --> 00:26:31,919
enable p code so that you can see

696
00:26:31,919 --> 00:26:36,320
what the p code is for the

697
00:26:36,880 --> 00:26:38,799
given function you're looking at and an

698
00:26:38,799 --> 00:26:40,559
understanding of the p code is very

699
00:26:40,559 --> 00:26:41,200
useful

700
00:26:41,200 --> 00:26:43,279
because you'll be using that a lot if

701
00:26:43,279 --> 00:26:45,039
you're doing any

702
00:26:45,039 --> 00:26:50,000
scripting or automation with uh draw

703
00:26:50,000 --> 00:26:53,360
um then you have the strip manager so

704
00:26:53,360 --> 00:26:55,760
um this is just like all the different

705
00:26:55,760 --> 00:26:57,840
strips that are already available

706
00:26:57,840 --> 00:26:59,840
but if you add in any of your own strips

707
00:26:59,840 --> 00:27:01,360
or what i like to do generally

708
00:27:01,360 --> 00:27:03,440
is go in and edit one of these strips

709
00:27:03,440 --> 00:27:04,480
that has

710
00:27:04,480 --> 00:27:06,400
some of what i need but not all of it

711
00:27:06,400 --> 00:27:08,880
i'll create a new one copy it off that

712
00:27:08,880 --> 00:27:10,000
and then

713
00:27:10,000 --> 00:27:13,200
uh edit that to do um what i'm looking

714
00:27:13,200 --> 00:27:15,120
to do

715
00:27:15,120 --> 00:27:17,600
but um these and it'd be nice to like go

716
00:27:17,600 --> 00:27:18,799
through here and see if there are any

717
00:27:18,799 --> 00:27:20,960
scripts that might be useful

718
00:27:20,960 --> 00:27:24,559
for the reversing case that you're using

719
00:27:24,559 --> 00:27:26,880
definitely more of a power user than a

720
00:27:26,880 --> 00:27:31,360
very basic user type functionality

721
00:27:31,520 --> 00:27:33,760
next is the data type editing structure

722
00:27:33,760 --> 00:27:35,200
so um

723
00:27:35,200 --> 00:27:36,640
i think this is probably one of the more

724
00:27:36,640 --> 00:27:38,640
like stronger use cases for

725
00:27:38,640 --> 00:27:40,240
ditra and applying it to the

726
00:27:40,240 --> 00:27:42,559
decompilation so you can have these like

727
00:27:42,559 --> 00:27:43,679
very large like c

728
00:27:43,679 --> 00:27:47,760
like structures that have tons of data

729
00:27:47,760 --> 00:27:49,520
in them and you can create those

730
00:27:49,520 --> 00:27:50,960
structures

731
00:27:50,960 --> 00:27:54,240
and edit those structures and dedra

732
00:27:54,240 --> 00:27:56,559
and then apply that to what you're

733
00:27:56,559 --> 00:27:59,678
seeing in the

734
00:27:59,919 --> 00:28:02,559
binary so that deidra recognizes that

735
00:28:02,559 --> 00:28:04,399
and is able to say ah yes this is this

736
00:28:04,399 --> 00:28:05,679
structure these are how they're

737
00:28:05,679 --> 00:28:07,440
referencing it and so on

738
00:28:07,440 --> 00:28:09,360
just to like pretty up the uh

739
00:28:09,360 --> 00:28:11,679
decompilation and make it look nicer

740
00:28:11,679 --> 00:28:15,520
but also to um you can apply this across

741
00:28:15,520 --> 00:28:18,640
all uh functions so that

742
00:28:18,640 --> 00:28:21,919
uh it tracks and traces uh to know like

743
00:28:21,919 --> 00:28:23,360
what this

744
00:28:23,360 --> 00:28:28,000
um type of the

745
00:28:28,000 --> 00:28:30,880
um thing might be um that's another

746
00:28:30,880 --> 00:28:32,480
thing just in the data type

747
00:28:32,480 --> 00:28:35,919
editing um you can if you know there are

748
00:28:35,919 --> 00:28:38,080
custom types for the structure so say

749
00:28:38,080 --> 00:28:39,200
it's some

750
00:28:39,200 --> 00:28:43,120
well-known um ieee standard

751
00:28:43,120 --> 00:28:45,120
and you're reversing that you see these

752
00:28:45,120 --> 00:28:47,039
structures that relate to those things

753
00:28:47,039 --> 00:28:48,720
you can start to apply those structures

754
00:28:48,720 --> 00:28:50,399
and those data types

755
00:28:50,399 --> 00:28:54,640
and then apply that across the binary in

756
00:28:54,640 --> 00:28:55,600
order to have a

757
00:28:55,600 --> 00:28:58,559
greater understanding of what's going on

758
00:28:58,559 --> 00:29:00,159
i think this is like a very powerful

759
00:29:00,159 --> 00:29:03,440
um side of what that makes like feature

760
00:29:03,440 --> 00:29:05,679
very useful

761
00:29:05,679 --> 00:29:07,039
and then we'll talk about the debugging

762
00:29:07,039 --> 00:29:10,080
side so deabody is still in beta

763
00:29:10,080 --> 00:29:12,720
i believe they're planning to release uh

764
00:29:12,720 --> 00:29:14,080
teacher 10

765
00:29:14,080 --> 00:29:16,480
sometime this month either like mid to

766
00:29:16,480 --> 00:29:17,760
late this month

767
00:29:17,760 --> 00:29:19,200
um so then i think you'll get more

768
00:29:19,200 --> 00:29:21,039
documentation and maybe have some

769
00:29:21,039 --> 00:29:22,799
presentation slides

770
00:29:22,799 --> 00:29:24,450
uh with an introduction to the

771
00:29:24,450 --> 00:29:26,240
[Music]

772
00:29:26,240 --> 00:29:28,080
debugger but the debugger is very

773
00:29:28,080 --> 00:29:30,000
similar in my opinion to

774
00:29:30,000 --> 00:29:31,520
like red sync so it allows you to

775
00:29:31,520 --> 00:29:33,039
integrate in with like

776
00:29:33,039 --> 00:29:35,200
windy bug or allows you to integrate in

777
00:29:35,200 --> 00:29:36,399
with gdb

778
00:29:36,399 --> 00:29:40,159
in order to have some type of debugging

779
00:29:40,159 --> 00:29:43,279
like native debugging capabilities

780
00:29:43,279 --> 00:29:47,120
with um the

781
00:29:47,120 --> 00:29:49,120
binary that you're using some of the

782
00:29:49,120 --> 00:29:50,960
interesting things though that they've

783
00:29:50,960 --> 00:29:52,000
added or

784
00:29:52,000 --> 00:29:54,960
um they added like time travel s

785
00:29:54,960 --> 00:29:55,760
debugging

786
00:29:55,760 --> 00:29:59,360
through emulation to say um

787
00:29:59,360 --> 00:30:02,320
i want to step back through what i was

788
00:30:02,320 --> 00:30:03,919
just executing

789
00:30:03,919 --> 00:30:06,240
um and it allows you to do that through

790
00:30:06,240 --> 00:30:08,480
keeping track and state of the

791
00:30:08,480 --> 00:30:12,320
registers noting that time travel

792
00:30:12,320 --> 00:30:13,440
debugging

793
00:30:13,440 --> 00:30:17,039
is not flawless so that is to say that

794
00:30:17,039 --> 00:30:18,960
there are some things that may be

795
00:30:18,960 --> 00:30:22,000
lost so like let's say that you

796
00:30:22,000 --> 00:30:25,440
are modifying files or you have mutexes

797
00:30:25,440 --> 00:30:27,679
or you have locks

798
00:30:27,679 --> 00:30:30,320
um it may change state when trying to go

799
00:30:30,320 --> 00:30:32,080
back through things

800
00:30:32,080 --> 00:30:35,760
um and so on if or those things may not

801
00:30:35,760 --> 00:30:36,559
like

802
00:30:36,559 --> 00:30:40,399
be properly set so um

803
00:30:40,399 --> 00:30:42,559
the timeless slide debugging isn't

804
00:30:42,559 --> 00:30:44,960
perfect but it is still very

805
00:30:44,960 --> 00:30:47,679
interesting and useful uh functionality

806
00:30:47,679 --> 00:30:48,960
and definitely something like really

807
00:30:48,960 --> 00:30:49,440
neat

808
00:30:49,440 --> 00:30:52,320
that i thought they added um also just

809
00:30:52,320 --> 00:30:53,440
like having the

810
00:30:53,440 --> 00:30:56,320
stack and like the ability to trace and

811
00:30:56,320 --> 00:30:56,880
like set

812
00:30:56,880 --> 00:30:59,120
watch points within deidre and then also

813
00:30:59,120 --> 00:31:00,640
have the

814
00:31:00,640 --> 00:31:04,240
um disassembly and also decompilation

815
00:31:04,240 --> 00:31:06,399
available it's like really neat and

816
00:31:06,399 --> 00:31:08,640
useful um

817
00:31:08,640 --> 00:31:11,919
i won't be showing a

818
00:31:11,919 --> 00:31:15,440
uh demo of the debugging side of things

819
00:31:15,440 --> 00:31:16,159
today

820
00:31:16,159 --> 00:31:19,200
but it is something that i plan to use

821
00:31:19,200 --> 00:31:19,679
more

822
00:31:19,679 --> 00:31:22,720
and work with more um they might

823
00:31:22,720 --> 00:31:26,320
somewhat reset and release um

824
00:31:26,320 --> 00:31:29,360
but yeah cool

825
00:31:29,360 --> 00:31:33,919
demo time so i have um

826
00:31:33,919 --> 00:31:37,120
dj already open um i'm gonna

827
00:31:37,120 --> 00:31:38,880
create a new project just to show you

828
00:31:38,880 --> 00:31:40,399
the workflow

829
00:31:40,399 --> 00:31:44,240
but um so you can create a non-shared

830
00:31:44,240 --> 00:31:46,159
project or a shared project

831
00:31:46,159 --> 00:31:48,480
so non-shared being local shared project

832
00:31:48,480 --> 00:31:50,320
meaning you're going to need to have a

833
00:31:50,320 --> 00:31:53,519
feature server running

834
00:31:53,519 --> 00:31:57,120
that you can connect in with um

835
00:31:57,120 --> 00:31:58,080
otherwise you're going to create a

836
00:31:58,080 --> 00:31:59,679
non-shared project so that's what we do

837
00:31:59,679 --> 00:32:01,840
here

838
00:32:05,519 --> 00:32:08,159
and finish

839
00:32:12,559 --> 00:32:14,720
all right so now we have a project right

840
00:32:14,720 --> 00:32:16,480
but we don't have any binaries added in

841
00:32:16,480 --> 00:32:17,440
here yet

842
00:32:17,440 --> 00:32:19,679
so there are two ways that you can add

843
00:32:19,679 --> 00:32:21,440
in binaries you can either

844
00:32:21,440 --> 00:32:24,480
add them in through getting i uh which

845
00:32:24,480 --> 00:32:25,760
is import

846
00:32:25,760 --> 00:32:28,799
you can also do file import file

847
00:32:28,799 --> 00:32:32,000
uh you can also like um go through and

848
00:32:32,000 --> 00:32:33,039
drag and

849
00:32:33,039 --> 00:32:38,159
drop so say i have a program over here

850
00:32:38,159 --> 00:32:42,559
i can drag it in and see what type of

851
00:32:42,559 --> 00:32:44,960
file it is so this particular file is

852
00:32:44,960 --> 00:32:45,679
the

853
00:32:45,679 --> 00:32:50,159
mips um video neon 32-bit

854
00:32:50,159 --> 00:32:53,440
binary and the form of an elf

855
00:32:53,440 --> 00:32:57,200
so we can go ahead and import that

856
00:32:57,200 --> 00:32:58,720
so what it's doing here just loading

857
00:32:58,720 --> 00:33:01,679
that binary into the

858
00:33:01,679 --> 00:33:03,120
system it's not doing any of the

859
00:33:03,120 --> 00:33:06,159
analysis just yet

860
00:33:06,159 --> 00:33:09,600
um and do

861
00:33:09,600 --> 00:33:12,320
similar things so once i get more

862
00:33:12,320 --> 00:33:14,799
processes

863
00:33:17,519 --> 00:33:18,559
and certain things are going to be a

864
00:33:18,559 --> 00:33:20,640
little bit slower than others so

865
00:33:20,640 --> 00:33:23,120
um for instance this is mips it's going

866
00:33:23,120 --> 00:33:24,880
to take a little bit longer

867
00:33:24,880 --> 00:33:28,960
than say your it's 86 or x64

868
00:33:28,960 --> 00:33:32,159
um and so on uh

869
00:33:32,159 --> 00:33:35,519
i found that like analyzing velvet or

870
00:33:35,519 --> 00:33:36,880
like any

871
00:33:36,880 --> 00:33:39,919
apks is like very

872
00:33:39,919 --> 00:33:42,559
time intensive so i'll show you how to

873
00:33:42,559 --> 00:33:43,840
import

874
00:33:43,840 --> 00:33:46,399
the uh apks but i won't go through

875
00:33:46,399 --> 00:33:48,320
actually analyzing them because it takes

876
00:33:48,320 --> 00:33:49,840
a very long time

877
00:33:49,840 --> 00:33:52,480
but here we can see um so i'll prompt

878
00:33:52,480 --> 00:33:54,080
you with uh do you want to analyze the

879
00:33:54,080 --> 00:33:55,919
binary we'll say yes

880
00:33:55,919 --> 00:33:57,519
and then we'll just go through with the

881
00:33:57,519 --> 00:33:59,519
general um things

882
00:33:59,519 --> 00:34:01,519
sorry i can't really tell if this is

883
00:34:01,519 --> 00:34:02,880
readable so

884
00:34:02,880 --> 00:34:05,039
if the speaker wants to pop up then i'm

885
00:34:05,039 --> 00:34:06,000
sorry if the

886
00:34:06,000 --> 00:34:08,239
other anyone wants to pop up and say

887
00:34:08,239 --> 00:34:09,679
it's not readable let me know

888
00:34:09,679 --> 00:34:12,159
um i'm used to doing this on like a

889
00:34:12,159 --> 00:34:15,040
large projector

890
00:34:19,119 --> 00:34:20,320
yeah so while it goes through the

891
00:34:20,320 --> 00:34:21,760
analysis they'll kind of talk through

892
00:34:21,760 --> 00:34:22,879
the different components

893
00:34:22,879 --> 00:34:25,839
so you have your program tree here um

894
00:34:25,839 --> 00:34:27,040
which talks about your different

895
00:34:27,040 --> 00:34:27,839
sections

896
00:34:27,839 --> 00:34:31,359
of the uh program so you have your like

897
00:34:31,359 --> 00:34:34,719
global offset table here your bss

898
00:34:34,719 --> 00:34:39,759
your s data should have your data your

899
00:34:40,239 --> 00:34:43,280
text section and so on um

900
00:34:43,280 --> 00:34:44,960
over here you have your symbol tree so

901
00:34:44,960 --> 00:34:46,560
this will talk about your imports

902
00:34:46,560 --> 00:34:49,839
so this will show all the different um

903
00:34:49,839 --> 00:34:51,918
imports that you have so whether they're

904
00:34:51,918 --> 00:34:54,000
windows for linux this is a linux miner

905
00:34:54,000 --> 00:34:55,119
it's an elf

906
00:34:55,119 --> 00:34:58,240
um so it's going to have like libsy.so

907
00:34:58,240 --> 00:35:01,680
and then it's doing some crypto here um

908
00:35:01,680 --> 00:35:04,079
and then it's a it has like standard c

909
00:35:04,079 --> 00:35:06,320
plus plus library as well

910
00:35:06,320 --> 00:35:08,640
um we can see what functions are

911
00:35:08,640 --> 00:35:10,240
exported so this would be useful if

912
00:35:10,240 --> 00:35:12,320
you're looking at like a dll or like a

913
00:35:12,320 --> 00:35:14,160
um

914
00:35:14,160 --> 00:35:16,640
some type of shared object um because

915
00:35:16,640 --> 00:35:17,839
then you have a lot of like

916
00:35:17,839 --> 00:35:20,400
uh program exports but um generally

917
00:35:20,400 --> 00:35:21,040
speaking

918
00:35:21,040 --> 00:35:24,400
for the types of binaries that you might

919
00:35:24,400 --> 00:35:25,839
be reverse engineering especially when

920
00:35:25,839 --> 00:35:27,040
you're a beginner you may not be looking

921
00:35:27,040 --> 00:35:29,520
at the shared objects or those dlls

922
00:35:29,520 --> 00:35:32,240
so you're going to be looking more at

923
00:35:32,240 --> 00:35:34,800
the functions tab

924
00:35:34,800 --> 00:35:38,000
one thing that's interesting

925
00:35:42,079 --> 00:35:46,720
is that um deidre will

926
00:35:47,040 --> 00:35:50,040
kind of take full uh like your

927
00:35:50,040 --> 00:35:51,920
[Music]

928
00:35:51,920 --> 00:35:54,160
functions and like apply them into files

929
00:35:54,160 --> 00:35:55,920
for things that are similar

930
00:35:55,920 --> 00:35:58,000
uh which i think is interesting but not

931
00:35:58,000 --> 00:35:59,760
always like nice

932
00:35:59,760 --> 00:36:02,000
um for some of the uh things that i want

933
00:36:02,000 --> 00:36:03,680
to like look at

934
00:36:03,680 --> 00:36:05,920
but um you can see these are all your

935
00:36:05,920 --> 00:36:07,680
like different sys calls or like

936
00:36:07,680 --> 00:36:09,440
function calls here

937
00:36:09,440 --> 00:36:11,280
um you can see these are all your like

938
00:36:11,280 --> 00:36:12,720
unnamed functions

939
00:36:12,720 --> 00:36:14,079
and then you can see some of the other

940
00:36:14,079 --> 00:36:18,000
different things um

941
00:36:19,040 --> 00:36:23,520
so generally you're gonna look for

942
00:36:25,680 --> 00:36:29,280
your main um if it's a stripped binary

943
00:36:29,280 --> 00:36:31,119
it might be underscore underscore let's

944
00:36:31,119 --> 00:36:31,599
see

945
00:36:31,599 --> 00:36:34,720
start name um or entry

946
00:36:34,720 --> 00:36:37,119
or so on so depending on like the type

947
00:36:37,119 --> 00:36:38,880
of binary you're going to have different

948
00:36:38,880 --> 00:36:40,640
like program entries but this one has a

949
00:36:40,640 --> 00:36:42,160
defined main

950
00:36:42,160 --> 00:36:45,359
um that we can look at and see like over

951
00:36:45,359 --> 00:36:46,000
here

952
00:36:46,000 --> 00:36:50,079
so this side we have the disassembly

953
00:36:50,079 --> 00:36:53,200
so you can see the different

954
00:36:53,280 --> 00:36:56,960
components and if you open this tab here

955
00:36:56,960 --> 00:36:59,200
so this shows all of the different

956
00:36:59,200 --> 00:37:02,400
sections um and right now

957
00:37:02,400 --> 00:37:05,680
you can see i have highlighted the

958
00:37:05,680 --> 00:37:09,520
operands um

959
00:37:09,520 --> 00:37:12,079
over here you can see the fights here

960
00:37:12,079 --> 00:37:12,800
you can see the

961
00:37:12,800 --> 00:37:16,240
mnemonic and then

962
00:37:16,560 --> 00:37:21,040
so on so if you wanted to like enable

963
00:37:21,040 --> 00:37:23,599
code you can enable that and see what

964
00:37:23,599 --> 00:37:24,079
the p

965
00:37:24,079 --> 00:37:26,160
code looks like for all of the different

966
00:37:26,160 --> 00:37:27,520
instructions

967
00:37:27,520 --> 00:37:31,520
over here but it does add a lot of bloat

968
00:37:31,760 --> 00:37:34,800
so we go ahead and disable that field

969
00:37:34,800 --> 00:37:37,200
and then we also want like post comment

970
00:37:37,200 --> 00:37:38,560
and eol comments

971
00:37:38,560 --> 00:37:41,440
um your comments like adding comments in

972
00:37:41,440 --> 00:37:42,000
here

973
00:37:42,000 --> 00:37:44,400
are very nice when you're reversing to

974
00:37:44,400 --> 00:37:45,200
say hey

975
00:37:45,200 --> 00:37:47,040
i figured out what this does or what

976
00:37:47,040 --> 00:37:50,320
this is doing and so on and then over

977
00:37:50,320 --> 00:37:52,160
here you can do the same thing so now

978
00:37:52,160 --> 00:37:52,640
you're

979
00:37:52,640 --> 00:37:55,920
um i'm going through the

980
00:37:55,920 --> 00:37:57,520
decompilations you can see there's the

981
00:37:57,520 --> 00:37:59,680
function call that has

982
00:37:59,680 --> 00:38:02,880
two parameters i can label one of the

983
00:38:02,880 --> 00:38:05,440
parameters to be a new name

984
00:38:05,440 --> 00:38:09,359
and it'll um replicate across here

985
00:38:09,359 --> 00:38:11,359
um another thing that i kind of wanted

986
00:38:11,359 --> 00:38:12,720
to show were the

987
00:38:12,720 --> 00:38:15,440
tool options so when you go into full

988
00:38:15,440 --> 00:38:16,800
options you have a ton of different

989
00:38:16,800 --> 00:38:17,520
options

990
00:38:17,520 --> 00:38:21,920
um i don't know how to say like

991
00:38:21,920 --> 00:38:23,760
go to here if you want to like do these

992
00:38:23,760 --> 00:38:25,680
things like it's so varied

993
00:38:25,680 --> 00:38:29,359
but if we go back to um this little view

994
00:38:29,359 --> 00:38:30,400
right here

995
00:38:30,400 --> 00:38:32,320
if you highlight like the different

996
00:38:32,320 --> 00:38:33,680
sections and see if this gets

997
00:38:33,680 --> 00:38:34,480
highlighted

998
00:38:34,480 --> 00:38:38,000
so like ah okay it's in the operands

999
00:38:38,000 --> 00:38:40,640
field that i want to like uh look at

1000
00:38:40,640 --> 00:38:43,359
something so

1001
00:38:43,680 --> 00:38:45,520
go to listing fields and that'll be all

1002
00:38:45,520 --> 00:38:47,040
of the uh

1003
00:38:47,040 --> 00:38:49,599
different fields for here and then you

1004
00:38:49,599 --> 00:38:51,040
can go to

1005
00:38:51,040 --> 00:38:54,079
operands field and this is the um

1006
00:38:54,079 --> 00:38:56,079
thing that i was mentioning turning off

1007
00:38:56,079 --> 00:38:58,160
before was the markup inferred variable

1008
00:38:58,160 --> 00:39:00,079
references

1009
00:39:00,079 --> 00:39:03,540
i prefer to see the um

1010
00:39:03,540 --> 00:39:05,920
[Music]

1011
00:39:05,920 --> 00:39:10,800
different like registers rather than the

1012
00:39:10,880 --> 00:39:13,599
pseudonames that deidra automatically

1013
00:39:13,599 --> 00:39:15,359
applies or that i may apply

1014
00:39:15,359 --> 00:39:18,960
when looking at the disassembly um

1015
00:39:18,960 --> 00:39:21,119
other things that are interesting so the

1016
00:39:21,119 --> 00:39:22,079
function called

1017
00:39:22,079 --> 00:39:25,839
uh graph so this our function fault tree

1018
00:39:25,839 --> 00:39:29,119
um just to see like what uh incoming

1019
00:39:29,119 --> 00:39:31,200
upcoming calls go to these can be nice

1020
00:39:31,200 --> 00:39:33,359
to see like track your way up

1021
00:39:33,359 --> 00:39:35,119
or track your way down for different

1022
00:39:35,119 --> 00:39:37,040
things um

1023
00:39:37,040 --> 00:39:38,800
this button right here is how you open

1024
00:39:38,800 --> 00:39:40,640
the script manager and so we can do all

1025
00:39:40,640 --> 00:39:42,480
the different scripts

1026
00:39:42,480 --> 00:39:46,240
uh and then window

1027
00:39:46,240 --> 00:39:50,560
if you want to see the function graph

1028
00:39:50,800 --> 00:39:54,079
yeah um and then here you can like

1029
00:39:54,079 --> 00:39:56,000
scroll around and so on

1030
00:39:56,000 --> 00:39:58,800
um i still think so i use i'm using a

1031
00:39:58,800 --> 00:39:59,839
laptop right now

1032
00:39:59,839 --> 00:40:03,280
using a touchpad um but for dedra i

1033
00:40:03,280 --> 00:40:06,319
still think that you need a

1034
00:40:06,640 --> 00:40:09,040
mouse in order to like use it uh

1035
00:40:09,040 --> 00:40:10,000
correctly

1036
00:40:10,000 --> 00:40:13,760
just by virtue of like if you want to

1037
00:40:13,760 --> 00:40:16,800
say highlight all uses of a variable and

1038
00:40:16,800 --> 00:40:17,150
the

1039
00:40:17,150 --> 00:40:18,400
[Music]

1040
00:40:18,400 --> 00:40:22,880
assembly or highlight all uses of a

1041
00:40:23,119 --> 00:40:26,160
register or something like that in

1042
00:40:26,160 --> 00:40:28,800
the assembly you have the middle plate

1043
00:40:28,800 --> 00:40:30,800
you can refine that and the keybindings

1044
00:40:30,800 --> 00:40:32,319
but i believe it

1045
00:40:32,319 --> 00:40:34,400
uh generally for their purposes is

1046
00:40:34,400 --> 00:40:36,079
assumed

1047
00:40:36,079 --> 00:40:39,920
that you have um

1048
00:40:39,920 --> 00:40:43,280
a mouse um so for this instance we're

1049
00:40:43,280 --> 00:40:44,000
not going to say

1050
00:40:44,000 --> 00:40:45,920
for your instances you may want to save

1051
00:40:45,920 --> 00:40:48,079
it

1052
00:40:49,200 --> 00:40:52,079
and then i'll show you also opening a uh

1053
00:40:52,079 --> 00:40:53,200
apk

1054
00:40:53,200 --> 00:40:56,480
so import we

1055
00:40:56,480 --> 00:40:59,760
have this little like

1056
00:40:59,760 --> 00:41:02,000
uh hello world apk it's literally the

1057
00:41:02,000 --> 00:41:03,200
simplest

1058
00:41:03,200 --> 00:41:05,440
apk that you want so you have different

1059
00:41:05,440 --> 00:41:07,599
ways that you can

1060
00:41:07,599 --> 00:41:09,200
open it you can open it as a single file

1061
00:41:09,200 --> 00:41:10,800
that's not going to work batched

1062
00:41:10,800 --> 00:41:12,400
not going to work either or it's a file

1063
00:41:12,400 --> 00:41:14,400
system so i like to open it as a file

1064
00:41:14,400 --> 00:41:15,520
system

1065
00:41:15,520 --> 00:41:18,400
and then you can browse it to see ah

1066
00:41:18,400 --> 00:41:19,119
here's the

1067
00:41:19,119 --> 00:41:22,880
uh dex that i want to analyze it so then

1068
00:41:22,880 --> 00:41:24,880
you can

1069
00:41:24,880 --> 00:41:27,920
open this and then import that dex then

1070
00:41:27,920 --> 00:41:29,520
you can import it as a single file

1071
00:41:29,520 --> 00:41:32,000
you see that it's a uh dalvik executable

1072
00:41:32,000 --> 00:41:35,839
so this is the java byte code

1073
00:41:37,040 --> 00:41:39,359
and then go through and import that i

1074
00:41:39,359 --> 00:41:40,960
would go through do it but it takes

1075
00:41:40,960 --> 00:41:45,599
a very long time to do those things so

1076
00:41:45,599 --> 00:41:48,480
um i'm running kind of light on time so

1077
00:41:48,480 --> 00:41:49,119
i'm gonna

1078
00:41:49,119 --> 00:41:51,119
put the demo now and kind of go into my

1079
00:41:51,119 --> 00:41:52,319
mean section

1080
00:41:52,319 --> 00:41:54,480
um for those of you who may have seen

1081
00:41:54,480 --> 00:41:56,079
one of my presentations before or know

1082
00:41:56,079 --> 00:41:56,720
me

1083
00:41:56,720 --> 00:41:59,040
i always have memes in my slides so

1084
00:41:59,040 --> 00:42:00,319
these are some of my favorite ones

1085
00:42:00,319 --> 00:42:01,920
related to

1086
00:42:01,920 --> 00:42:04,640
idra um basically when deidre was

1087
00:42:04,640 --> 00:42:05,280
released

1088
00:42:05,280 --> 00:42:06,640
there's a lot of like back and forth

1089
00:42:06,640 --> 00:42:08,319
between ida and future

1090
00:42:08,319 --> 00:42:11,920
like guidry cost somewhere in the range

1091
00:42:11,920 --> 00:42:12,960
of like three grand

1092
00:42:12,960 --> 00:42:14,800
so like 15 grand if you're looking for

1093
00:42:14,800 --> 00:42:16,800
like all versions and all different

1094
00:42:16,800 --> 00:42:18,640
types of things

1095
00:42:18,640 --> 00:42:23,200
um and so on so i just like to leave the

1096
00:42:23,200 --> 00:42:25,440
memes up for a bit uh this is probably

1097
00:42:25,440 --> 00:42:27,200
my favorite one from the baba group

1098
00:42:27,200 --> 00:42:29,839
of uh kind of making fun of ferdari

1099
00:42:29,839 --> 00:42:30,800
users uh

1100
00:42:30,800 --> 00:42:33,599
unfortunately

1101
00:42:34,000 --> 00:42:35,760
hello i'm philip wiley the founder of

1102
00:42:35,760 --> 00:42:37,440
the pawn school project

1103
00:42:37,440 --> 00:42:39,359
homeschool project was founded in june

1104
00:42:39,359 --> 00:42:40,560
2018

1105
00:42:40,560 --> 00:42:43,520
as a way to offer free education based

1106
00:42:43,520 --> 00:42:45,200
on penetration testing

1107
00:42:45,200 --> 00:42:59,839
and ethical

1108
00:43:36,480 --> 00:43:41,839
meetings back in 2018 uh

1109
00:43:42,400 --> 00:43:44,079
hello i'm philip wiley the founder of

1110
00:43:44,079 --> 00:43:45,839
the pawn school project

1111
00:43:45,839 --> 00:43:47,760
palm school project was founded in june

1112
00:43:47,760 --> 00:43:49,040
2018

1113
00:43:49,040 --> 00:43:51,920
as a way to offer free education based

1114
00:43:51,920 --> 00:43:53,599
on penetration testing

1115
00:43:53,599 --> 00:43:56,319
and ethical hacking to the public more

1116
00:43:56,319 --> 00:43:59,440
specifically the dallas fort worth area

1117
00:43:59,440 --> 00:44:01,280
this was created out of my passion to

1118
00:44:01,280 --> 00:44:02,800
educate others

1119
00:44:02,800 --> 00:44:05,440
when i was before i started teaching i

1120
00:44:05,440 --> 00:44:07,200
did a lot of mentoring which

1121
00:44:07,200 --> 00:44:10,560
kind of inspired me to go into teaching

1122
00:44:10,560 --> 00:44:11,920
and you know i was teaching ethical

1123
00:44:11,920 --> 00:44:14,160
hacking at dallas college and some of my

1124
00:44:14,160 --> 00:44:15,520
students towards the end of the semester

1125
00:44:15,520 --> 00:44:17,520
the first semester was asking

1126
00:44:17,520 --> 00:44:19,680
why where could they take more classes

1127
00:44:19,680 --> 00:44:20,880
because they're interested in taking it

1128
00:44:20,880 --> 00:44:21,280
but

1129
00:44:21,280 --> 00:44:23,680
most people had you know a small budget

1130
00:44:23,680 --> 00:44:25,359
for training so

1131
00:44:25,359 --> 00:44:27,520
my idea was to get together like on the

1132
00:44:27,520 --> 00:44:29,280
weekends and and do some

1133
00:44:29,280 --> 00:44:30,480
some little workshops some little

1134
00:44:30,480 --> 00:44:32,800
hands-on training to help them further

1135
00:44:32,800 --> 00:44:35,040
their education

1136
00:44:35,040 --> 00:44:36,880
so i've decided to go a step further and

1137
00:44:36,880 --> 00:44:38,640
started the pawn school project or palm

1138
00:44:38,640 --> 00:44:40,000
school for short

1139
00:44:40,000 --> 00:44:42,880
uh the home school project hosts two

1140
00:44:42,880 --> 00:44:44,079
meetings per month

1141
00:44:44,079 --> 00:44:45,920
they started out physical meetings back

1142
00:44:45,920 --> 00:44:47,520
in 2018

1143
00:44:47,520 --> 00:44:50,720
uh 2019 i started offering the dallas

1144
00:44:50,720 --> 00:44:52,319
meeting streamed so that way it opened

1145
00:44:52,319 --> 00:44:53,280
up to

1146
00:44:53,280 --> 00:44:55,040
people around the globe to be able to

1147
00:44:55,040 --> 00:44:57,920
consume this content and help them

1148
00:44:57,920 --> 00:44:59,680
and when the pandemic hit we end up

1149
00:44:59,680 --> 00:45:02,240
going virtual with both of the meetings

1150
00:45:02,240 --> 00:45:04,560
offering two meetings per month and we

1151
00:45:04,560 --> 00:45:05,680
expanded past

1152
00:45:05,680 --> 00:45:07,440
offensive security into defensive

1153
00:45:07,440 --> 00:45:10,160
security even we had talks on

1154
00:45:10,160 --> 00:45:13,359
uh becoming a cso as well as

1155
00:45:13,359 --> 00:45:17,280
talks on uh becoming a sock analyst

1156
00:45:17,280 --> 00:45:20,560
another thing unique to home school is

1157
00:45:20,560 --> 00:45:20,960
at least

1158
00:45:20,960 --> 00:45:23,440
far is the area that that i live in

1159
00:45:23,440 --> 00:45:24,800
where phone school was founded in the

1160
00:45:24,800 --> 00:45:26,160
dallas fort worth area

1161
00:45:26,160 --> 00:45:28,640
is this this meetup was more friendly to

1162
00:45:28,640 --> 00:45:30,480
new new people trying to get into the

1163
00:45:30,480 --> 00:45:31,440
industry

1164
00:45:31,440 --> 00:45:32,640
and we try to take more of an

1165
00:45:32,640 --> 00:45:34,960
educational approach so not only does

1166
00:45:34,960 --> 00:45:36,400
phone school stream

1167
00:45:36,400 --> 00:45:40,319
uh monthly meetings i also teach

1168
00:45:40,319 --> 00:45:41,920
pen testing and web app pen testing

1169
00:45:41,920 --> 00:45:43,680
workshops at different conferences for

1170
00:45:43,680 --> 00:45:45,040
different colleges

1171
00:45:45,040 --> 00:45:47,440
and for different uh cyber security

1172
00:45:47,440 --> 00:45:48,640
groups

1173
00:45:48,640 --> 00:45:50,160
so if you're interested in checking us

1174
00:45:50,160 --> 00:45:53,520
out go to pwnschool.com

1175
00:45:53,520 --> 00:45:55,440
and there's a link to our slack channel

1176
00:45:55,440 --> 00:45:57,359
as well as meetup for our scheduled

1177
00:45:57,359 --> 00:45:58,079
meetings

1178
00:45:58,079 --> 00:45:59,680
and i hope to see you at home school

1179
00:45:59,680 --> 00:46:02,640
meeting sometime soon

1180
00:46:02,780 --> 00:46:06,569
[Music]

1181
00:46:09,430 --> 00:46:12,489
[Music]

1182
00:46:12,839 --> 00:46:15,839
thanks

1183
00:46:30,220 --> 00:46:40,288
[Music]

1184
00:46:40,839 --> 00:46:43,839
do

1185
00:46:44,540 --> 00:46:49,730
[Music]

1186
00:46:58,080 --> 00:47:01,219
[Music]

1187
00:47:01,680 --> 00:47:03,759
you

