1
00:00:00,380 --> 00:00:03,959
for my next trick I'll make this 2011

2
00:00:03,959 --> 00:00:06,240
MacBook stay connected to the projector

3
00:00:06,240 --> 00:00:10,019
for the entire presentation uh

4
00:00:10,019 --> 00:00:12,840
welcome uh thank you for coming the the

5
00:00:12,840 --> 00:00:14,639
title of this discussion is log for

6
00:00:14,639 --> 00:00:17,880
Shell exploitation and Cloud range

7
00:00:17,880 --> 00:00:19,560
um you've probably read the description

8
00:00:19,560 --> 00:00:21,359
but we'll go over what this is going to

9
00:00:21,359 --> 00:00:22,859
be about

10
00:00:22,859 --> 00:00:26,599
um I'm going to talk about what is log4j

11
00:00:26,599 --> 00:00:30,000
what was log4 shell besides something

12
00:00:30,000 --> 00:00:32,940
that disrupted a lot of folks uh

13
00:00:32,940 --> 00:00:35,460
holidays I'm going to talk about who

14
00:00:35,460 --> 00:00:36,960
cares about it we'll do some

15
00:00:36,960 --> 00:00:40,739
demonstrations with exploitation uh and

16
00:00:40,739 --> 00:00:42,899
then I'll talk about how the range is

17
00:00:42,899 --> 00:00:45,420
built that helps demonstrate this

18
00:00:45,420 --> 00:00:47,640
exploitation what I hope is that you'll

19
00:00:47,640 --> 00:00:49,020
take away an understanding of what the

20
00:00:49,020 --> 00:00:51,899
log for Shell vulnerability is why it

21
00:00:51,899 --> 00:00:54,120
exists and that you'll understand this

22
00:00:54,120 --> 00:00:57,239
simple quick and cheap way to set up a

23
00:00:57,239 --> 00:01:01,500
test exploitation range in the cloud so

24
00:01:01,500 --> 00:01:04,019
that you might you know the next time a

25
00:01:04,019 --> 00:01:06,360
more relevant vulnerability comes out be

26
00:01:06,360 --> 00:01:09,060
in a good spot to test out exploits

27
00:01:09,060 --> 00:01:11,100
against it try out all the stuff you're

28
00:01:11,100 --> 00:01:13,560
seeing on infosec Twitter easily and

29
00:01:13,560 --> 00:01:14,580
quickly

30
00:01:14,580 --> 00:01:16,020
but first

31
00:01:16,020 --> 00:01:18,600
um why uh why should you care about what

32
00:01:18,600 --> 00:01:20,900
I'm saying uh

33
00:01:20,900 --> 00:01:23,640
hopefully you're interested in it but if

34
00:01:23,640 --> 00:01:27,000
not uh uh well just leave

35
00:01:27,000 --> 00:01:27,979
um

36
00:01:27,979 --> 00:01:30,720
well you're you all stayed I appreciate

37
00:01:30,720 --> 00:01:33,119
that my name is uh Carl sikandik again

38
00:01:33,119 --> 00:01:36,420
uh call sign Rosie I'm in the Air Force

39
00:01:36,420 --> 00:01:38,280
active duty so we have weird things like

40
00:01:38,280 --> 00:01:41,280
call signs just like in Top Gun you know

41
00:01:41,280 --> 00:01:45,119
there I was inverted uh I'm stationed

42
00:01:45,119 --> 00:01:46,619
here in town I've got a Bachelor's in

43
00:01:46,619 --> 00:01:48,360
double e a master's in computer science

44
00:01:48,360 --> 00:01:51,060
and I've got experience with cyber

45
00:01:51,060 --> 00:01:53,640
ranges I've used that term a little bit

46
00:01:53,640 --> 00:01:56,340
range what does that mean it's maybe a

47
00:01:56,340 --> 00:01:58,259
little bit more common in in the

48
00:01:58,259 --> 00:02:00,240
military but it's also not totally

49
00:02:00,240 --> 00:02:01,979
uncommon I was able to pull this this

50
00:02:01,979 --> 00:02:03,540
dictionary definition up it's a

51
00:02:03,540 --> 00:02:05,759
controlled interactive technology

52
00:02:05,759 --> 00:02:08,520
environment where up and coming cyber

53
00:02:08,520 --> 00:02:10,979
Security Professionals can learn how to

54
00:02:10,979 --> 00:02:13,739
detect and mitigate cyber attacks using

55
00:02:13,739 --> 00:02:15,900
the same kind of equipment they will

56
00:02:15,900 --> 00:02:18,840
have on the job so you can run a bunch

57
00:02:18,840 --> 00:02:21,599
of VMS in it you can test it out a lot

58
00:02:21,599 --> 00:02:23,160
of folks have known this as a home lab

59
00:02:23,160 --> 00:02:25,920
in the past typically that involves like

60
00:02:25,920 --> 00:02:27,900
buying a server off eBay setting it up

61
00:02:27,900 --> 00:02:30,360
in your basement my wife would kill me

62
00:02:30,360 --> 00:02:32,580
if the basement sounded like an aircraft

63
00:02:32,580 --> 00:02:34,860
every time she went down there and it's

64
00:02:34,860 --> 00:02:36,360
San Antonio so we don't have basements

65
00:02:36,360 --> 00:02:37,860
anyway

66
00:02:37,860 --> 00:02:39,720
um so I've I've been doing this kind of

67
00:02:39,720 --> 00:02:42,420
stuff on the cloud uh and and that

68
00:02:42,420 --> 00:02:44,519
terminology you know maybe you call this

69
00:02:44,519 --> 00:02:46,800
a cloud range or a Home range in the

70
00:02:46,800 --> 00:02:49,560
cloud a home lab in the cloud I'm just

71
00:02:49,560 --> 00:02:51,840
going to call it a range

72
00:02:51,840 --> 00:02:54,360
all right so again here's here's what

73
00:02:54,360 --> 00:02:57,780
we're gonna do uh first of all what is

74
00:02:57,780 --> 00:03:03,780
log for Shell uh in December 2021 this

75
00:03:03,780 --> 00:03:06,180
came out I think it was on a Friday and

76
00:03:06,180 --> 00:03:08,879
so folks had just left the office and

77
00:03:08,879 --> 00:03:11,580
they were probably driving home they I'm

78
00:03:11,580 --> 00:03:13,140
sure that they stopped they pulled over

79
00:03:13,140 --> 00:03:15,599
they looked at their news feed because

80
00:03:15,599 --> 00:03:18,300
their phone was exploding and they saw

81
00:03:18,300 --> 00:03:20,040
that this brand new vulnerability came

82
00:03:20,040 --> 00:03:21,780
out some people probably just turned

83
00:03:21,780 --> 00:03:23,280
right around and went back into the

84
00:03:23,280 --> 00:03:26,280
office and other people probably turned

85
00:03:26,280 --> 00:03:27,659
off their phone and pretended like they

86
00:03:27,659 --> 00:03:29,159
were in Bermuda

87
00:03:29,159 --> 00:03:32,040
uh but a little bit in more details log4

88
00:03:32,040 --> 00:03:33,780
shell is a remote code execution

89
00:03:33,780 --> 00:03:35,220
vulnerability

90
00:03:35,220 --> 00:03:37,920
in in any

91
00:03:37,920 --> 00:03:40,080
in any application logging using the

92
00:03:40,080 --> 00:03:44,780
right versions of uh log 4J to libraries

93
00:03:44,780 --> 00:03:47,519
specifically it's got to be logging user

94
00:03:47,519 --> 00:03:50,220
inputs so there's there are ways to use

95
00:03:50,220 --> 00:03:54,360
that log4j2 library that don't log user

96
00:03:54,360 --> 00:03:56,760
inputs and those would not have really

97
00:03:56,760 --> 00:03:58,739
been vulnerable to this you got to take

98
00:03:58,739 --> 00:04:01,159
that user input log it

99
00:04:01,159 --> 00:04:04,019
log4j2 is a very popular logging

100
00:04:04,019 --> 00:04:06,360
framework within Java it's in all kinds

101
00:04:06,360 --> 00:04:07,739
of different applications as we'll see

102
00:04:07,739 --> 00:04:10,680
in a second and and to drill down a

103
00:04:10,680 --> 00:04:12,360
little bit if you're not familiar with

104
00:04:12,360 --> 00:04:15,720
what remote code execution means it says

105
00:04:15,720 --> 00:04:17,459
just about the worst type of

106
00:04:17,459 --> 00:04:19,620
vulnerability you can get it means that

107
00:04:19,620 --> 00:04:22,979
the attacker can execute any any code

108
00:04:22,979 --> 00:04:25,380
that they want on your computer so some

109
00:04:25,380 --> 00:04:27,840
some common examples from today and

110
00:04:27,840 --> 00:04:30,780
yesterday are ransomware key loggers

111
00:04:30,780 --> 00:04:31,979
where they want to steal all your

112
00:04:31,979 --> 00:04:33,780
passwords or maybe they just want to

113
00:04:33,780 --> 00:04:35,759
generate a little bit of money on the

114
00:04:35,759 --> 00:04:38,639
side with a cryptocurrency minor but it

115
00:04:38,639 --> 00:04:40,680
can be literally anything the examples

116
00:04:40,680 --> 00:04:41,880
that we're going to do we're just going

117
00:04:41,880 --> 00:04:45,000
to get a shell running a command line

118
00:04:45,000 --> 00:04:47,100
prompt running on the attacked computer

119
00:04:47,100 --> 00:04:49,380
and we're going to send that command

120
00:04:49,380 --> 00:04:51,300
line prompt back to us as the attacker

121
00:04:51,300 --> 00:04:53,220
so we could take more actions but it can

122
00:04:53,220 --> 00:04:55,520
be literally anything you imagine

123
00:04:55,520 --> 00:04:58,680
you just write a little Java code and

124
00:04:58,680 --> 00:05:01,139
you're you're running

125
00:05:01,139 --> 00:05:03,960
the root cause of this again is that the

126
00:05:03,960 --> 00:05:07,560
programmers trusted user input

127
00:05:07,560 --> 00:05:09,900
um this this goes back to a feature

128
00:05:09,900 --> 00:05:11,400
we'll talk about the feature in just a

129
00:05:11,400 --> 00:05:15,900
second it's a feature in log 4J that is

130
00:05:15,900 --> 00:05:18,960
able to be misused looking in the manual

131
00:05:18,960 --> 00:05:21,180
around the time that this vulnerability

132
00:05:21,180 --> 00:05:24,120
came out there's even a little note when

133
00:05:24,120 --> 00:05:27,000
this feature was added to log4j that

134
00:05:27,000 --> 00:05:28,440
you've got it programmers have got to be

135
00:05:28,440 --> 00:05:29,820
careful when they use it to avoid

136
00:05:29,820 --> 00:05:33,479
logging uh to avoid logging user input

137
00:05:33,479 --> 00:05:35,940
blindly so that seems to have just been

138
00:05:35,940 --> 00:05:39,000
ignored in a lot of cases or

139
00:05:39,000 --> 00:05:40,860
um you know programmers they didn't read

140
00:05:40,860 --> 00:05:42,419
the manual

141
00:05:42,419 --> 00:05:44,880
surprise

142
00:05:44,880 --> 00:05:47,759
so what what is log4j let's step back

143
00:05:47,759 --> 00:05:49,380
and talk about what is this logging

144
00:05:49,380 --> 00:05:51,360
framework real quick so here we've got

145
00:05:51,360 --> 00:05:55,080
an example where a laptop is browsing to

146
00:05:55,080 --> 00:05:59,759
a website on a Java on a web server

147
00:05:59,759 --> 00:06:01,680
written in Java so it's doing a get

148
00:06:01,680 --> 00:06:04,020
request and we've got the web server

149
00:06:04,020 --> 00:06:06,020
logging a little bit of information

150
00:06:06,020 --> 00:06:08,960
using this log4j Library

151
00:06:08,960 --> 00:06:11,100
specifically here the web server is

152
00:06:11,100 --> 00:06:13,440
logging the user agent string if you

153
00:06:13,440 --> 00:06:15,240
don't know a user agent string tells us

154
00:06:15,240 --> 00:06:16,680
what kind of browser the person's

155
00:06:16,680 --> 00:06:18,600
running it can tell us if they're on a

156
00:06:18,600 --> 00:06:20,699
mobile device or on a desktop or laptop

157
00:06:20,699 --> 00:06:23,039
or something else

158
00:06:23,039 --> 00:06:24,539
um it can even tell us what operating

159
00:06:24,539 --> 00:06:27,360
system they're running so it's very

160
00:06:27,360 --> 00:06:29,819
common to pull in and log those user

161
00:06:29,819 --> 00:06:31,319
agent strings it tells you a lot about

162
00:06:31,319 --> 00:06:32,819
the people that are visiting your

163
00:06:32,819 --> 00:06:34,759
website

164
00:06:34,759 --> 00:06:36,840
in this case

165
00:06:36,840 --> 00:06:39,840
nothing bad is happening log 4J is just

166
00:06:39,840 --> 00:06:42,240
seeing that user agent passing along to

167
00:06:42,240 --> 00:06:44,419
disk and writing it out like a happy boy

168
00:06:44,419 --> 00:06:47,400
well let's say you're the programmer of

169
00:06:47,400 --> 00:06:48,780
that web server and you want to get a

170
00:06:48,780 --> 00:06:51,419
little bit more complicated you want to

171
00:06:51,419 --> 00:06:54,660
log in addition to that user agent the

172
00:06:54,660 --> 00:06:57,240
version of java that your web server is

173
00:06:57,240 --> 00:06:58,800
running in I don't know why you would

174
00:06:58,800 --> 00:07:01,259
want to do this but it is a feature of

175
00:07:01,259 --> 00:07:02,880
log 4J

176
00:07:02,880 --> 00:07:05,580
that you can and so all you got to do is

177
00:07:05,580 --> 00:07:07,740
the web server is take that user agent

178
00:07:07,740 --> 00:07:10,020
string append a little bit of text

179
00:07:10,020 --> 00:07:13,560
dollar sign open brace Java colon

180
00:07:13,560 --> 00:07:15,900
version close brace and then when you

181
00:07:15,900 --> 00:07:18,780
pass that to log4j and you're using the

182
00:07:18,780 --> 00:07:21,240
most common method of logging

183
00:07:21,240 --> 00:07:23,699
it's going to replace that dollar sign

184
00:07:23,699 --> 00:07:26,840
open brace close brace bit with open jdk

185
00:07:26,840 --> 00:07:30,419
11013 or whatever version of java the

186
00:07:30,419 --> 00:07:33,599
web server is running as

187
00:07:33,599 --> 00:07:35,940
maybe this is more useful in a non-web

188
00:07:35,940 --> 00:07:37,979
server example but this was a feature

189
00:07:37,979 --> 00:07:40,979
that was added to open jdk on purpose

190
00:07:40,979 --> 00:07:43,440
this text substitution feature

191
00:07:43,440 --> 00:07:46,380
it gets a little bit more uh powerful

192
00:07:46,380 --> 00:07:49,199
than just substituting in the version

193
00:07:49,199 --> 00:07:51,479
uh when you when you get to log for

194
00:07:51,479 --> 00:07:54,240
Shell this is a this is a great way of

195
00:07:54,240 --> 00:07:57,080
demonstrating that power

196
00:07:57,080 --> 00:08:00,539
log4j that that text substitution

197
00:08:00,539 --> 00:08:04,020
feature can be used to run code

198
00:08:04,020 --> 00:08:07,199
and if if the user was not allowed to

199
00:08:07,199 --> 00:08:09,660
submit the code that's running

200
00:08:09,660 --> 00:08:12,060
this might be a useful feature in some

201
00:08:12,060 --> 00:08:14,580
use case but unfortunately it's it's

202
00:08:14,580 --> 00:08:16,860
very commonly misused and thus we get

203
00:08:16,860 --> 00:08:18,960
log for shelf vulnerability so in this

204
00:08:18,960 --> 00:08:22,500
case here's here's a malicious user now

205
00:08:22,500 --> 00:08:25,680
on the laptop you and me are sitting on

206
00:08:25,680 --> 00:08:27,060
this laptop and we're going to give this

207
00:08:27,060 --> 00:08:29,879
web server a bad day uh We've replaced

208
00:08:29,879 --> 00:08:31,800
the user agent string we've replaced

209
00:08:31,800 --> 00:08:34,679
your typical user agent string with uh

210
00:08:34,679 --> 00:08:39,620
dollar sign open brace jndi colon ldap

211
00:08:39,620 --> 00:08:41,479
colon slash

212
00:08:41,479 --> 00:08:44,520
attacker server blah blah blah

213
00:08:44,520 --> 00:08:47,399
who who that in the in the back row can

214
00:08:47,399 --> 00:08:48,779
you guys see that

215
00:08:48,779 --> 00:08:51,420
awesome uh in a little bit the reason I

216
00:08:51,420 --> 00:08:52,920
ask is in a little bit we're going to do

217
00:08:52,920 --> 00:08:55,440
some demos on the keyboard

218
00:08:55,440 --> 00:08:56,760
um that's kind of the more interesting

219
00:08:56,760 --> 00:08:59,100
piece I think I made the text big enough

220
00:08:59,100 --> 00:09:00,839
that everyone can see but if not then

221
00:09:00,839 --> 00:09:03,240
please just scoot on forward

222
00:09:03,240 --> 00:09:05,519
So Okay so we've replaced your typical

223
00:09:05,519 --> 00:09:07,019
user agent string with this malicious

224
00:09:07,019 --> 00:09:09,600
one now the web server gets it it it

225
00:09:09,600 --> 00:09:12,180
tries to log that user agent still and

226
00:09:12,180 --> 00:09:15,660
when log4j gets that malicious user

227
00:09:15,660 --> 00:09:17,760
agent string the first thing it does is

228
00:09:17,760 --> 00:09:20,640
it says oh I need to uh I need to go out

229
00:09:20,640 --> 00:09:22,680
to a jndi server

230
00:09:22,680 --> 00:09:24,899
speak in this this little bit of ldap

231
00:09:24,899 --> 00:09:28,500
jndi protocol and I need to ask it where

232
00:09:28,500 --> 00:09:31,800
to get some code from so it makes a

233
00:09:31,800 --> 00:09:34,019
connection out to the attacker's server

234
00:09:34,019 --> 00:09:37,019
it calls out to that jndi ldap server

235
00:09:37,019 --> 00:09:39,779
and it asks hey where where is this

236
00:09:39,779 --> 00:09:41,399
little bit of code named in this case

237
00:09:41,399 --> 00:09:43,560
log 4J callback you can call it whatever

238
00:09:43,560 --> 00:09:44,640
you want

239
00:09:44,640 --> 00:09:47,580
and then the jndi ldap server responds

240
00:09:47,580 --> 00:09:50,040
hey here's a web server

241
00:09:50,040 --> 00:09:52,980
where you can go pick up this malicious

242
00:09:52,980 --> 00:09:55,680
code so that's what attacker colon 8080

243
00:09:55,680 --> 00:09:58,920
is it's it's that jndi ldap server which

244
00:09:58,920 --> 00:10:01,500
is a specific weird language responding

245
00:10:01,500 --> 00:10:03,000
hey here's a web server where you can

246
00:10:03,000 --> 00:10:05,339
download the code so then log 4J says

247
00:10:05,339 --> 00:10:07,140
all right now I got my web server I'm

248
00:10:07,140 --> 00:10:08,519
going to go there I'm going to download

249
00:10:08,519 --> 00:10:10,620
this malicious code it doesn't know it's

250
00:10:10,620 --> 00:10:11,820
malicious I'm going to download this

251
00:10:11,820 --> 00:10:14,160
code and I'm going to run it so it calls

252
00:10:14,160 --> 00:10:16,440
out to attack our web server which is

253
00:10:16,440 --> 00:10:18,680
attacker colon 8080 in this case

254
00:10:18,680 --> 00:10:20,940
attacker web server is going to oblige

255
00:10:20,940 --> 00:10:25,019
and give it back log4jcallback dot class

256
00:10:25,019 --> 00:10:28,080
and then log4js is going to run it and

257
00:10:28,080 --> 00:10:30,480
that's going to pop a pop a shell and

258
00:10:30,480 --> 00:10:32,820
return it to the attacker in the example

259
00:10:32,820 --> 00:10:35,000
case

260
00:10:35,519 --> 00:10:39,360
so multiple stages of this attack none

261
00:10:39,360 --> 00:10:42,000
of them are very complicated and tooling

262
00:10:42,000 --> 00:10:43,740
is already built to allow all of these

263
00:10:43,740 --> 00:10:46,440
to happen really easy

264
00:10:46,440 --> 00:10:49,440
so what is affected by this

265
00:10:49,440 --> 00:10:51,120
vulnerability

266
00:10:51,120 --> 00:10:56,399
uh sisa put out a great GitHub site kind

267
00:10:56,399 --> 00:10:59,760
of the next day so real real quick where

268
00:10:59,760 --> 00:11:02,700
they started taking user input on every

269
00:11:02,700 --> 00:11:04,500
server that companies and people

270
00:11:04,500 --> 00:11:06,180
reported was vulnerable to this

271
00:11:06,180 --> 00:11:09,600
Minecraft if you watched YouTube there

272
00:11:09,600 --> 00:11:11,459
were a lot of videos of people popping

273
00:11:11,459 --> 00:11:13,500
Minecraft servers because it included

274
00:11:13,500 --> 00:11:17,540
log4j logging and it was very vulnerable

275
00:11:17,540 --> 00:11:20,760
elasticsearch and log stash there there

276
00:11:20,760 --> 00:11:22,740
are a lot of caveats to that one about

277
00:11:22,740 --> 00:11:27,000
its vulnerability but uh that was widely

278
00:11:27,000 --> 00:11:30,000
seen as as directly vulnerable to this

279
00:11:30,000 --> 00:11:32,880
and it's those two are embedded in a ton

280
00:11:32,880 --> 00:11:35,040
of other products so then all those

281
00:11:35,040 --> 00:11:37,260
other products that embed elasticsearch

282
00:11:37,260 --> 00:11:40,800
and log stash for whatever reason uh

283
00:11:40,800 --> 00:11:43,500
were also seen as vulnerable a number of

284
00:11:43,500 --> 00:11:46,320
other tools solar and Jetty are the ones

285
00:11:46,320 --> 00:11:47,459
that we're going to be using in the

286
00:11:47,459 --> 00:11:49,860
demonstration so solar is is not a

287
00:11:49,860 --> 00:11:52,800
product I've used before or log4 shell

288
00:11:52,800 --> 00:11:56,579
it's an Apache search engine it looks

289
00:11:56,579 --> 00:11:58,200
like something that enterprises might

290
00:11:58,200 --> 00:12:00,420
use and Jetty is a web server by

291
00:12:00,420 --> 00:12:03,959
jetbrains and it's there's a little a

292
00:12:03,959 --> 00:12:08,339
few uh uh caveats to its vulnerability

293
00:12:08,339 --> 00:12:10,680
as well but it's it's just a neat web

294
00:12:10,680 --> 00:12:13,620
server ghidra the nsa's reverse

295
00:12:13,620 --> 00:12:15,839
engineering tool was also vulnerable to

296
00:12:15,839 --> 00:12:19,380
this a ton of VMware products uh the

297
00:12:19,380 --> 00:12:21,540
solarwinds folks had another bad

298
00:12:21,540 --> 00:12:24,420
Christmas although certainly less bad

299
00:12:24,420 --> 00:12:27,480
than the year prior and and just a ton

300
00:12:27,480 --> 00:12:30,060
of stuff is on that list it used to be a

301
00:12:30,060 --> 00:12:31,320
really massive list and now they've

302
00:12:31,320 --> 00:12:34,440
broken it out by a b by alphabet so it's

303
00:12:34,440 --> 00:12:35,940
easier to browse

304
00:12:35,940 --> 00:12:37,920
but you can go there and check out check

305
00:12:37,920 --> 00:12:39,480
out the full list see if anything you've

306
00:12:39,480 --> 00:12:41,940
got on there is vulnerable so

307
00:12:41,940 --> 00:12:43,740
really is all this stuff really

308
00:12:43,740 --> 00:12:46,260
vulnerable well if you're running a jdk

309
00:12:46,260 --> 00:12:49,339
version newer than October 2018

310
00:12:49,339 --> 00:12:52,560
there's an environment variable that

311
00:12:52,560 --> 00:12:55,440
that automatically makes this a lot more

312
00:12:55,440 --> 00:12:57,480
difficult to exploit it seemed like that

313
00:12:57,480 --> 00:13:01,440
was the recommended fix at first and

314
00:13:01,440 --> 00:13:03,779
then attackers played Cat and Mouse and

315
00:13:03,779 --> 00:13:05,880
they found some ways around that uh so

316
00:13:05,880 --> 00:13:08,220
then they recommend well set set this uh

317
00:13:08,220 --> 00:13:10,680
set this setting in the log 4J

318
00:13:10,680 --> 00:13:13,380
configuration log 4J is extremely

319
00:13:13,380 --> 00:13:15,420
configurable it's it's really nice in

320
00:13:15,420 --> 00:13:16,380
that way

321
00:13:16,380 --> 00:13:18,779
it seemed like that was a good fix for a

322
00:13:18,779 --> 00:13:20,579
little while but of course attackers

323
00:13:20,579 --> 00:13:23,279
seem to find ways around that as well

324
00:13:23,279 --> 00:13:25,980
and then elasticsearch the major caveat

325
00:13:25,980 --> 00:13:28,800
to elasticsearch is that for a few years

326
00:13:28,800 --> 00:13:31,339
now they've been building

327
00:13:31,339 --> 00:13:35,399
elasticsearch with a Java tool that

328
00:13:35,399 --> 00:13:36,540
um

329
00:13:36,540 --> 00:13:38,639
it's it's it adds a lot of automatic

330
00:13:38,639 --> 00:13:40,380
security features I'm not a Java

331
00:13:40,380 --> 00:13:42,959
programmer I'm sorry uh but but it's

332
00:13:42,959 --> 00:13:45,120
built in a way that disallows jndi

333
00:13:45,120 --> 00:13:47,700
execution and so I I've had a couple

334
00:13:47,700 --> 00:13:49,800
people tell me that elasticsearch is

335
00:13:49,800 --> 00:13:52,500
vulnerable certainly you can get those

336
00:13:52,500 --> 00:13:55,740
first stages of callbacks from it I

337
00:13:55,740 --> 00:13:57,959
haven't seen anybody actually get remote

338
00:13:57,959 --> 00:14:01,380
code execution on elasticsearch so feel

339
00:14:01,380 --> 00:14:03,480
free to if you've got a counter demo to

340
00:14:03,480 --> 00:14:04,860
that then please let me know I would

341
00:14:04,860 --> 00:14:06,120
love to see it

342
00:14:06,120 --> 00:14:08,579
uh and I I wouldn't I wouldn't bet on

343
00:14:08,579 --> 00:14:10,980
any of these as as solid protections

344
00:14:10,980 --> 00:14:13,440
just just update your stuff

345
00:14:13,440 --> 00:14:16,079
uh the the fixes are out now

346
00:14:16,079 --> 00:14:17,940
Okay so we've talked we've talked about

347
00:14:17,940 --> 00:14:20,459
log 4J we've talked about what log for

348
00:14:20,459 --> 00:14:22,380
Shell is we've talked about how it works

349
00:14:22,380 --> 00:14:24,839
but there's nothing better than trying

350
00:14:24,839 --> 00:14:28,079
it out for ourselves and so over the

351
00:14:28,079 --> 00:14:31,980
holidays I had a little time off and I

352
00:14:31,980 --> 00:14:35,100
spent the the evenings after my wife and

353
00:14:35,100 --> 00:14:37,440
daughter went to bed messing around with

354
00:14:37,440 --> 00:14:41,399
us uh and so if uh you know huge thanks

355
00:14:41,399 --> 00:14:44,579
to my wife for just ignoring all my BS

356
00:14:44,579 --> 00:14:47,639
around this this is just a a love a love

357
00:14:47,639 --> 00:14:50,220
thing uh in order to mess around with

358
00:14:50,220 --> 00:14:52,860
this vulnerability I set up a range that

359
00:14:52,860 --> 00:14:55,560
looks just like this on AWS so there's

360
00:14:55,560 --> 00:14:58,260
there's three computers three ec2

361
00:14:58,260 --> 00:15:02,100
instances that I stood up on on AWS Cali

362
00:15:02,100 --> 00:15:04,860
box is running Kali Linux solar is just

363
00:15:04,860 --> 00:15:06,899
running Debian and then I've installed

364
00:15:06,899 --> 00:15:08,880
solar and Jetty and I can install any

365
00:15:08,880 --> 00:15:11,880
other Docker any other service that's

366
00:15:11,880 --> 00:15:13,740
got a Docker container associated with

367
00:15:13,740 --> 00:15:17,279
it on that Debian box excuse me and we

368
00:15:17,279 --> 00:15:18,240
could go further we could install

369
00:15:18,240 --> 00:15:20,160
anything we want those are both

370
00:15:20,160 --> 00:15:22,320
connected uh they're they're on separate

371
00:15:22,320 --> 00:15:24,779
subnets but uh they're connected in the

372
00:15:24,779 --> 00:15:27,120
same virtual private Cloud on AWS so

373
00:15:27,120 --> 00:15:29,040
they can talk to each other easily

374
00:15:29,040 --> 00:15:31,800
through something similar to network

375
00:15:31,800 --> 00:15:33,000
routing

376
00:15:33,000 --> 00:15:35,040
the only way that either of those can

377
00:15:35,040 --> 00:15:36,839
talk to the internet or that the

378
00:15:36,839 --> 00:15:38,880
internet can talk to them is through

379
00:15:38,880 --> 00:15:41,100
that jump host there that's run in

380
00:15:41,100 --> 00:15:43,260
guacamole on it that's an Apache product

381
00:15:43,260 --> 00:15:46,320
that gives you a uh a remote desktop

382
00:15:46,320 --> 00:15:50,339
interface to uh VNC remote desktop so

383
00:15:50,339 --> 00:15:53,399
it's just a great front end uh and in

384
00:15:53,399 --> 00:15:54,839
this demonstration the first thing we're

385
00:15:54,839 --> 00:15:56,220
going to do we're going to connect to

386
00:15:56,220 --> 00:15:58,860
that guacamole server running on jump

387
00:15:58,860 --> 00:16:00,899
host and then we'll be able to

388
00:16:00,899 --> 00:16:03,000
demonstrate exploitation from the Cali

389
00:16:03,000 --> 00:16:07,019
box across to the solar host

390
00:16:07,019 --> 00:16:09,720
so let's let's do that that's the fun

391
00:16:09,720 --> 00:16:12,420
part now this is the part where I might

392
00:16:12,420 --> 00:16:14,940
screw up this connection

393
00:16:14,940 --> 00:16:17,880
but I'm going to try really hard not to

394
00:16:17,880 --> 00:16:21,660
so you can't see this but the the code

395
00:16:21,660 --> 00:16:23,940
for all this was provided on a on a

396
00:16:23,940 --> 00:16:27,420
GitHub uh on a GitHub repo you can

397
00:16:27,420 --> 00:16:29,699
download it there's instructions so you

398
00:16:29,699 --> 00:16:31,560
can easily set this up and run it

399
00:16:31,560 --> 00:16:33,240
yourself I wrote those instructions

400
00:16:33,240 --> 00:16:35,519
mostly as a reminder to me in a year

401
00:16:35,519 --> 00:16:37,800
when it's the holidays again and of

402
00:16:37,800 --> 00:16:39,720
course no new vulnerabilities were at

403
00:16:39,720 --> 00:16:41,100
will be out and I'll want to play with

404
00:16:41,100 --> 00:16:43,500
them and I'll forget how to do all this

405
00:16:43,500 --> 00:16:46,259
but it one of the things it requires is

406
00:16:46,259 --> 00:16:49,500
a domain name from free DNS afraid.org

407
00:16:49,500 --> 00:16:51,779
those guys are fantastic and so this one

408
00:16:51,779 --> 00:16:55,740
is like log4jrange.lee.mx

409
00:16:55,740 --> 00:16:59,220
and guacamole just presents a login uh

410
00:16:59,220 --> 00:17:00,720
and this gets set up automatically

411
00:17:00,720 --> 00:17:02,940
during provisioning and and

412
00:17:02,940 --> 00:17:04,980
configuration

413
00:17:04,980 --> 00:17:07,079
so I'll go ahead and log into this I

414
00:17:07,079 --> 00:17:09,720
actually set this up last night uh to

415
00:17:09,720 --> 00:17:11,880
hopefully appease the demo Gods we'll

416
00:17:11,880 --> 00:17:14,040
see how well that goes it seemed to

417
00:17:14,040 --> 00:17:15,780
still be working a little while ago

418
00:17:15,780 --> 00:17:17,839
after this part we'll go through

419
00:17:17,839 --> 00:17:20,160
redeployment so you can see that all

420
00:17:20,160 --> 00:17:22,859
work but on here we've got we've got

421
00:17:22,859 --> 00:17:25,559
access to the solar box and we've got

422
00:17:25,559 --> 00:17:28,380
access to the Cali box so again this is

423
00:17:28,380 --> 00:17:31,860
just a regular Debian uh Debian install

424
00:17:31,860 --> 00:17:34,039
with a couple containers running on it

425
00:17:34,039 --> 00:17:39,059
when I ran pseudo Docker PS I apologize

426
00:17:39,059 --> 00:17:41,340
this text is a little small but but it's

427
00:17:41,340 --> 00:17:42,900
running essentially two Docker

428
00:17:42,900 --> 00:17:45,299
containers a vulnerable Jetty server

429
00:17:45,299 --> 00:17:47,520
which I had to create a custom container

430
00:17:47,520 --> 00:17:49,620
for to make it to make it vulnerable

431
00:17:49,620 --> 00:17:52,260
because the default install parameters

432
00:17:52,260 --> 00:17:54,720
of jetty are not it is not vulnerable

433
00:17:54,720 --> 00:17:57,059
it's just some configuration options

434
00:17:57,059 --> 00:17:58,860
that make it vulnerable

435
00:17:58,860 --> 00:18:01,380
and then install solar this is the

436
00:18:01,380 --> 00:18:03,020
default solar

437
00:18:03,020 --> 00:18:05,460
Docker container that you can you can

438
00:18:05,460 --> 00:18:08,039
grab from Docker Hub solar is listening

439
00:18:08,039 --> 00:18:11,640
on Port 89 83 and Yeti's listening on

440
00:18:11,640 --> 00:18:13,200
Port 80.

441
00:18:13,200 --> 00:18:17,240
but we don't have to know that

442
00:18:18,360 --> 00:18:21,660
we can switch over to our

443
00:18:21,660 --> 00:18:24,679
tally box

444
00:18:27,900 --> 00:18:29,120
awesome

445
00:18:29,120 --> 00:18:32,760
and uh you know if if we were the

446
00:18:32,760 --> 00:18:37,140
attacker all we might know is

447
00:18:37,140 --> 00:18:40,620
oh right there all we might know is uh

448
00:18:40,620 --> 00:18:42,480
kind of the network layout of of our

449
00:18:42,480 --> 00:18:45,299
Target organization and of course we'd

450
00:18:45,299 --> 00:18:47,640
know our own IP address but we see our

451
00:18:47,640 --> 00:18:51,440
Target organization is uh

452
00:18:52,799 --> 00:18:55,799
in the 10 1866 range

453
00:18:55,799 --> 00:18:59,340
so we can hop on over to our tally box

454
00:18:59,340 --> 00:19:04,100
and we can do like an nmap that's n 10

455
00:19:04,100 --> 00:19:07,380
1866.star and

456
00:19:07,380 --> 00:19:09,539
we'll just do a kind of a ping sweep of

457
00:19:09,539 --> 00:19:11,039
that whole

458
00:19:11,039 --> 00:19:13,260
little little bit of uh of the network

459
00:19:13,260 --> 00:19:15,840
and see if there are any open boxes

460
00:19:15,840 --> 00:19:17,580
there and then we can scan there's only

461
00:19:17,580 --> 00:19:20,400
one only one box so we should get that

462
00:19:20,400 --> 00:19:21,720
one back and while we're doing that

463
00:19:21,720 --> 00:19:25,020
let's look at what our IP address is 10

464
00:19:25,020 --> 00:19:26,890
18 225

465
00:19:26,890 --> 00:19:29,120
[Music]

466
00:19:29,120 --> 00:19:32,239
thank you

467
00:19:39,480 --> 00:19:41,280
I'm going to go ahead and open a new tab

468
00:19:41,280 --> 00:19:42,960
once we get that back we're going to

469
00:19:42,960 --> 00:19:44,340
want to

470
00:19:44,340 --> 00:19:46,020
um

471
00:19:46,020 --> 00:19:48,720
port scan that box more clearly I think

472
00:19:48,720 --> 00:19:51,360
it's 163. I'm cheating a little bit

473
00:19:51,360 --> 00:19:53,520
because I again I tested this out last

474
00:19:53,520 --> 00:19:55,320
night to make sure it's good

475
00:19:55,320 --> 00:19:58,340
so we should get

476
00:19:59,880 --> 00:20:02,460
in another minute or so

477
00:20:02,460 --> 00:20:04,559
a little return here that says it's it's

478
00:20:04,559 --> 00:20:07,380
dot 163 that's vulnerable but if we do a

479
00:20:07,380 --> 00:20:09,960
port scan against dot 163 just for time

480
00:20:09,960 --> 00:20:13,080
we can see SSH HTTP that's going to be

481
00:20:13,080 --> 00:20:16,020
that Jetty web server uh and and some

482
00:20:16,020 --> 00:20:19,440
BNC and X11 ports are open if if this

483
00:20:19,440 --> 00:20:23,520
was a real server that uh VNC might be

484
00:20:23,520 --> 00:20:25,200
much more restricted than it is we might

485
00:20:25,200 --> 00:20:27,000
not be able to port scan it and X11

486
00:20:27,000 --> 00:20:29,880
would be would be off limits as well so

487
00:20:29,880 --> 00:20:31,740
so some changes you might want to make

488
00:20:31,740 --> 00:20:33,059
if you're looking for a little bit more

489
00:20:33,059 --> 00:20:35,539
realism

490
00:20:36,600 --> 00:20:38,400
but here we're looking for a basic

491
00:20:38,400 --> 00:20:40,620
ability to demonstrate

492
00:20:40,620 --> 00:20:42,720
uh sorry

493
00:20:42,720 --> 00:20:44,700
we're looking for a basic ability to

494
00:20:44,700 --> 00:20:46,440
demonstrate this vulnerability so if we

495
00:20:46,440 --> 00:20:48,480
just go to that if we just go to that IP

496
00:20:48,480 --> 00:20:49,919
address directly and we look at what's

497
00:20:49,919 --> 00:20:52,679
on Port 80 we see it's the jetty server

498
00:20:52,679 --> 00:20:55,020
and if we go to

499
00:20:55,020 --> 00:20:56,940
that solar port

500
00:20:56,940 --> 00:20:59,340
89.83

501
00:20:59,340 --> 00:21:01,799
we're going to see it's solar

502
00:21:01,799 --> 00:21:03,780
just as as we would expect from this

503
00:21:03,780 --> 00:21:06,539
Cali box so that solar Port didn't show

504
00:21:06,539 --> 00:21:10,879
up in in the nmap scan anybody know why

505
00:21:11,280 --> 00:21:12,960
yep it's not in the default range

506
00:21:12,960 --> 00:21:15,240
exactly 89.83 is not one of the default

507
00:21:15,240 --> 00:21:18,179
ports nmap is going to scan if you were

508
00:21:18,179 --> 00:21:20,100
an attacker looking for specifically

509
00:21:20,100 --> 00:21:22,080
solar boxes then of of course it would

510
00:21:22,080 --> 00:21:23,640
be in your in your Port scanning range

511
00:21:23,640 --> 00:21:27,419
and if and where we own the server so

512
00:21:27,419 --> 00:21:29,700
we've we've got an easier time

513
00:21:29,700 --> 00:21:32,159
you can see here nmap was able to find

514
00:21:32,159 --> 00:21:33,480
that one

515
00:21:33,480 --> 00:21:36,720
running box on the subnet

516
00:21:36,720 --> 00:21:39,600
all right so so we found our Target now

517
00:21:39,600 --> 00:21:42,659
from the attacker station uh now we need

518
00:21:42,659 --> 00:21:45,900
to set up those different servers that

519
00:21:45,900 --> 00:21:48,140
are going to

520
00:21:48,140 --> 00:21:51,960
that are going to uh to get us to

521
00:21:51,960 --> 00:21:53,640
exploitation

522
00:21:53,640 --> 00:21:56,760
and um just because

523
00:21:56,760 --> 00:21:59,100
of cheater

524
00:21:59,100 --> 00:22:02,400
I've put a bunch of the commands and

525
00:22:02,400 --> 00:22:06,080
everything that you need to do this

526
00:22:06,080 --> 00:22:09,120
right into the GitHub repo so we can

527
00:22:09,120 --> 00:22:11,880
just go there from the Cali box

528
00:22:11,880 --> 00:22:14,039
it's got some information on deploying

529
00:22:14,039 --> 00:22:16,620
the range setting it all up it's got all

530
00:22:16,620 --> 00:22:19,140
this information here

531
00:22:19,140 --> 00:22:22,580
zoom in a little bit here

532
00:22:26,760 --> 00:22:30,179
it's got the the URLs on the solar

533
00:22:30,179 --> 00:22:31,799
server that are going to get us

534
00:22:31,799 --> 00:22:35,940
execution it's got the URL or uh user

535
00:22:35,940 --> 00:22:38,220
agent string on the jetty box that's

536
00:22:38,220 --> 00:22:40,200
going to give us exploitation and it's

537
00:22:40,200 --> 00:22:41,760
kind of got a step-by-step walkthrough

538
00:22:41,760 --> 00:22:44,400
of how to do this so if you remember

539
00:22:44,400 --> 00:22:46,260
that first server that we need is that

540
00:22:46,260 --> 00:22:48,600
jndi ldap server

541
00:22:48,600 --> 00:22:50,640
well as part of provisioning and

542
00:22:50,640 --> 00:22:54,000
configuring this range I download some

543
00:22:54,000 --> 00:22:56,280
other dude's code to do this this

544
00:22:56,280 --> 00:22:58,740
Marshall set guy and and I found out

545
00:22:58,740 --> 00:23:01,380
about this by Googling around and

546
00:23:01,380 --> 00:23:03,539
finding an awesome Sans tutorial on this

547
00:23:03,539 --> 00:23:06,299
so thank you Sans thanks thank you

548
00:23:06,299 --> 00:23:08,159
Marshall set guy that that information

549
00:23:08,159 --> 00:23:11,039
is is located this and they do a little

550
00:23:11,039 --> 00:23:12,960
bit more of a deep dive especially the

551
00:23:12,960 --> 00:23:15,059
Marshall set guy does a good Deep dive

552
00:23:15,059 --> 00:23:16,620
into what this protocol is and how it

553
00:23:16,620 --> 00:23:18,539
works so

554
00:23:18,539 --> 00:23:21,120
just just to demonstrate exploitation

555
00:23:21,120 --> 00:23:23,400
though we need to CD into this martial

556
00:23:23,400 --> 00:23:25,799
SEC directory

557
00:23:25,799 --> 00:23:30,840
and then we need to run the Java server

558
00:23:30,840 --> 00:23:33,179
the the jndi server that's going to get

559
00:23:33,179 --> 00:23:35,360
us

560
00:23:36,480 --> 00:23:39,299
okay so as part of this command

561
00:23:39,299 --> 00:23:41,400
you can see it's just executing a jar

562
00:23:41,400 --> 00:23:44,159
but we've got to replace

563
00:23:44,159 --> 00:23:45,720
this

564
00:23:45,720 --> 00:23:46,919
um

565
00:23:46,919 --> 00:23:50,179
Cali box

566
00:23:50,179 --> 00:23:53,100
uh IP address with what our IP address

567
00:23:53,100 --> 00:23:55,860
oh which is 225.8

568
00:23:55,860 --> 00:23:59,000
I'm glad I checked

569
00:24:01,020 --> 00:24:04,159
and I screwed that up thank you

570
00:24:04,159 --> 00:24:06,600
1018-225.8 so what this is going to do

571
00:24:06,600 --> 00:24:07,919
start up this Marshall sex server it's

572
00:24:07,919 --> 00:24:09,000
going to tell it anybody that's

573
00:24:09,000 --> 00:24:12,600
connecting asking for that the address

574
00:24:12,600 --> 00:24:14,340
where it can download this malicious

575
00:24:14,340 --> 00:24:19,620
code uh give them 1018 255.8 colon 8080

576
00:24:19,620 --> 00:24:22,380
and tell them to download log 4J

577
00:24:22,380 --> 00:24:24,120
callback we can name it whatever we want

578
00:24:24,120 --> 00:24:25,620
but that's the name we're using for this

579
00:24:25,620 --> 00:24:27,059
demonstration

580
00:24:27,059 --> 00:24:30,120
okay so now it's listening on Port 1389

581
00:24:30,120 --> 00:24:33,059
on this Cali box now we've got to also

582
00:24:33,059 --> 00:24:35,100
stand up that web server so that we can

583
00:24:35,100 --> 00:24:37,380
serve our malicious code from from that

584
00:24:37,380 --> 00:24:39,720
location so I'm going to do that over

585
00:24:39,720 --> 00:24:42,980
here and

586
00:24:43,080 --> 00:24:46,200
just to demonstrate this is

587
00:24:46,200 --> 00:24:48,360
come on

588
00:24:48,360 --> 00:24:51,199
what's going on

589
00:24:52,380 --> 00:24:58,220
oh a little bad Network latency this

590
00:24:58,500 --> 00:25:00,900
normally moves a little bit faster so a

591
00:25:00,900 --> 00:25:04,159
little bad Network latency

592
00:25:04,320 --> 00:25:07,200
okay we're back to moving again okay so

593
00:25:07,200 --> 00:25:09,000
uh the the command to start up the

594
00:25:09,000 --> 00:25:11,640
python web server is right there

595
00:25:11,640 --> 00:25:13,799
you can just copy and paste it Cali's

596
00:25:13,799 --> 00:25:15,000
been

597
00:25:15,000 --> 00:25:17,039
updated a little bit since I wrote this

598
00:25:17,039 --> 00:25:20,100
so now you got to say python3 this is uh

599
00:25:20,100 --> 00:25:22,320
if you're not familiar basically the

600
00:25:22,320 --> 00:25:23,880
fastest way to start up a web server

601
00:25:23,880 --> 00:25:26,340
python3 has a thing that serves files

602
00:25:26,340 --> 00:25:28,799
out of your current directory uh just by

603
00:25:28,799 --> 00:25:31,260
doing this little command http.server as

604
00:25:31,260 --> 00:25:33,900
their module port 8080.

605
00:25:33,900 --> 00:25:36,000
okay so now we've got a web server now

606
00:25:36,000 --> 00:25:38,340
we've got to write our malicious code so

607
00:25:38,340 --> 00:25:41,039
I made this easy just copy and paste

608
00:25:41,039 --> 00:25:43,200
this malicious code

609
00:25:43,200 --> 00:25:46,799
into a file even easier than that though

610
00:25:46,799 --> 00:25:48,539
I've already

611
00:25:48,539 --> 00:25:50,700
when you set this range up the file is

612
00:25:50,700 --> 00:25:55,320
already present log4j callback.java

613
00:25:55,320 --> 00:25:57,120
and now normally you've got to come in

614
00:25:57,120 --> 00:26:00,179
here and replace this IP address with

615
00:26:00,179 --> 00:26:02,159
your current IP address since I tested

616
00:26:02,159 --> 00:26:04,380
this last night it's already replaced

617
00:26:04,380 --> 00:26:06,179
but

618
00:26:06,179 --> 00:26:07,799
um it's a little hard to see there so

619
00:26:07,799 --> 00:26:09,600
let me

620
00:26:09,600 --> 00:26:12,059
zoom in here let's talk about what this

621
00:26:12,059 --> 00:26:14,820
malicious code does real quick

622
00:26:14,820 --> 00:26:17,760
this is going to create a class log4j

623
00:26:17,760 --> 00:26:20,100
callback and it's it's got to be named

624
00:26:20,100 --> 00:26:21,600
the same thing as the file name because

625
00:26:21,600 --> 00:26:24,900
this is Java but all that class does is

626
00:26:24,900 --> 00:26:26,640
is run this little bit of code inside

627
00:26:26,640 --> 00:26:29,279
the static block when it gets started up

628
00:26:29,279 --> 00:26:32,640
and what that does is uh uses Java Lang

629
00:26:32,640 --> 00:26:35,299
runtime

630
00:26:35,419 --> 00:26:38,940
exec function to execute this command

631
00:26:38,940 --> 00:26:42,840
netcat is is this NC it's the Swiss army

632
00:26:42,840 --> 00:26:44,700
knife for TCP

633
00:26:44,700 --> 00:26:46,159
and it's gonna

634
00:26:46,159 --> 00:26:49,740
create a TCP connection back to our Cali

635
00:26:49,740 --> 00:26:52,620
box on Port 8081 and it's going to

636
00:26:52,620 --> 00:26:55,559
execute bash which is the command line

637
00:26:55,559 --> 00:26:58,860
on Linux and send any anything it gets

638
00:26:58,860 --> 00:27:00,240
from the command line back over that

639
00:27:00,240 --> 00:27:01,799
connection and anything it receives it's

640
00:27:01,799 --> 00:27:02,820
going to put it right in the command

641
00:27:02,820 --> 00:27:05,100
prompt so this is a very common way to

642
00:27:05,100 --> 00:27:07,559
shovel a shell back to yourself as the

643
00:27:07,559 --> 00:27:09,360
attacker and that's exactly what we're

644
00:27:09,360 --> 00:27:11,159
using here it's going to work

645
00:27:11,159 --> 00:27:13,020
so we've we've got it all written in our

646
00:27:13,020 --> 00:27:15,000
file

647
00:27:15,000 --> 00:27:19,400
we we have to compile it

648
00:27:20,460 --> 00:27:22,320
and that that code that's in there can

649
00:27:22,320 --> 00:27:24,840
be anything you imagine that's that's

650
00:27:24,840 --> 00:27:27,360
Java code it can be directly your key

651
00:27:27,360 --> 00:27:28,799
logger if you figure out a way to do

652
00:27:28,799 --> 00:27:31,620
that it can mine cryptocurrency whatever

653
00:27:31,620 --> 00:27:33,179
you want you can cram it in there

654
00:27:33,179 --> 00:27:35,700
compile it and and send it all right so

655
00:27:35,700 --> 00:27:39,539
now we've got our our callback here our

656
00:27:39,539 --> 00:27:42,179
uh malicious code the last server that

657
00:27:42,179 --> 00:27:45,120
we've got to run is the thing that

658
00:27:45,120 --> 00:27:47,340
receives that shell when it gets

659
00:27:47,340 --> 00:27:49,679
shoveled back to us and so here's a

660
00:27:49,679 --> 00:27:51,299
little command that's going to do that

661
00:27:51,299 --> 00:27:53,779
for us

662
00:27:55,559 --> 00:27:59,460
okay so in this window

663
00:27:59,460 --> 00:28:02,820
we've got our jndi server in this window

664
00:28:02,820 --> 00:28:04,740
we've got our web server that's going to

665
00:28:04,740 --> 00:28:06,360
send the malicious code in response to

666
00:28:06,360 --> 00:28:08,940
the jndi service redirect and in This

667
00:28:08,940 --> 00:28:10,200
Server we're going to receive our

668
00:28:10,200 --> 00:28:12,900
callback after our malicious code runs

669
00:28:12,900 --> 00:28:16,260
so I'm going to pop up one more

670
00:28:16,260 --> 00:28:18,659
tab unfortunately the screen space won't

671
00:28:18,659 --> 00:28:20,820
let me show them all at the same time or

672
00:28:20,820 --> 00:28:23,400
you wouldn't be able to see anything in

673
00:28:23,400 --> 00:28:26,159
order to make the actual

674
00:28:26,159 --> 00:28:29,100
call now we've got to embed that jndi

675
00:28:29,100 --> 00:28:31,500
ldap string in there

676
00:28:31,500 --> 00:28:34,559
uh into one of those malicious spots and

677
00:28:34,559 --> 00:28:36,779
again those were visible right up at the

678
00:28:36,779 --> 00:28:39,840
top so let's let's exploit this Jetty

679
00:28:39,840 --> 00:28:41,340
server first

680
00:28:41,340 --> 00:28:44,000
so

681
00:28:48,419 --> 00:28:50,900
sorry

682
00:28:52,559 --> 00:28:54,720
let's just copy paste that URL in here

683
00:28:54,720 --> 00:28:58,500
we've got to replace solar address with

684
00:28:58,500 --> 00:29:00,320
our Solar

685
00:29:00,320 --> 00:29:05,340
box1018 dot what was it 66.163

686
00:29:05,340 --> 00:29:09,260
let me just verify that real quick

687
00:29:14,100 --> 00:29:19,440
10 18 66 163 uh that that Jetty server

688
00:29:19,440 --> 00:29:21,720
is just at Port 80 so the default here

689
00:29:21,720 --> 00:29:23,820
is going to work and now we got to cram

690
00:29:23,820 --> 00:29:25,980
in this jndi ldap

691
00:29:25,980 --> 00:29:30,440
colon slash slash our attacker box

692
00:29:30,679 --> 00:29:33,240
1018225.8 I think

693
00:29:33,240 --> 00:29:35,159
and we've got a we've got to tell it

694
00:29:35,159 --> 00:29:36,840
which port to go to

695
00:29:36,840 --> 00:29:41,520
and the port is visible over here 1389

696
00:29:43,679 --> 00:29:47,820
colon 1389 slash and then I think it's

697
00:29:47,820 --> 00:29:51,299
just pound sign log 4J callback

698
00:29:51,299 --> 00:29:53,220
but uh

699
00:29:53,220 --> 00:29:54,960
I'm pretty forgetful so let me just

700
00:29:54,960 --> 00:29:57,679
verify

701
00:29:59,100 --> 00:30:01,500
right here no pound sign log 4J call

702
00:30:01,500 --> 00:30:03,600
back

703
00:30:03,600 --> 00:30:06,260
excellent

704
00:30:06,840 --> 00:30:09,659
so now if we use Curl to browse to that

705
00:30:09,659 --> 00:30:11,100
website

706
00:30:11,100 --> 00:30:15,620
this is this is almost going to work

707
00:30:16,500 --> 00:30:18,539
so we can see that curl returned the

708
00:30:18,539 --> 00:30:20,640
website

709
00:30:20,640 --> 00:30:23,220
but we can see that we never got an

710
00:30:23,220 --> 00:30:27,059
initial call out to our jndi ldap server

711
00:30:27,059 --> 00:30:29,640
and that's because uh you also have to

712
00:30:29,640 --> 00:30:32,460
escape these braces because this is the

713
00:30:32,460 --> 00:30:34,320
Linux command line

714
00:30:34,320 --> 00:30:36,600
so just put a backslash in front of your

715
00:30:36,600 --> 00:30:38,820
braces it's just a it's like a fascism

716
00:30:38,820 --> 00:30:42,260
let's try this again

717
00:30:42,480 --> 00:30:44,760
so here we now we can see a ton of stuff

718
00:30:44,760 --> 00:30:47,580
was received by our jndi ldap server

719
00:30:47,580 --> 00:30:50,340
log4j tried to execute this a bunch of

720
00:30:50,340 --> 00:30:52,580
times

721
00:30:53,159 --> 00:30:55,020
um we can see that our web server

722
00:30:55,020 --> 00:30:57,840
received the redirect request and it

723
00:30:57,840 --> 00:30:59,820
served up our class

724
00:30:59,820 --> 00:31:01,500
and we can see that we got a connection

725
00:31:01,500 --> 00:31:04,080
to our reverse shell home so let's look

726
00:31:04,080 --> 00:31:05,100
around

727
00:31:05,100 --> 00:31:07,740
we can see this looks like something who

728
00:31:07,740 --> 00:31:08,700
am I

729
00:31:08,700 --> 00:31:11,340
I'm a jetty user and so now you could do

730
00:31:11,340 --> 00:31:13,440
any kind of post exploitation activities

731
00:31:13,440 --> 00:31:16,020
you wanted to on this box the sky's your

732
00:31:16,020 --> 00:31:18,179
limit this is a Docker container so a

733
00:31:18,179 --> 00:31:19,440
lot of the tools that you might expect

734
00:31:19,440 --> 00:31:21,779
to find on just like a regular Linux

735
00:31:21,779 --> 00:31:23,700
server are not going to be present but

736
00:31:23,700 --> 00:31:27,539
this is this is an exploitation uh test

737
00:31:27,539 --> 00:31:29,580
range and so we don't really need to do

738
00:31:29,580 --> 00:31:32,220
the poised exploitation now you can use

739
00:31:32,220 --> 00:31:35,100
Metasploit to generate a Java

740
00:31:35,100 --> 00:31:37,980
interpreter and that'll work great as

741
00:31:37,980 --> 00:31:39,659
long as you kind of wrap it in a weird

742
00:31:39,659 --> 00:31:41,279
way I think I have instructions on there

743
00:31:41,279 --> 00:31:43,559
you can get a call back from interpreter

744
00:31:43,559 --> 00:31:46,260
to to Metasploit it's awesome and then

745
00:31:46,260 --> 00:31:47,760
you got your whole post exploitation

746
00:31:47,760 --> 00:31:49,620
toolkit everything that was that's part

747
00:31:49,620 --> 00:31:51,360
of Metasploit is is available to you

748
00:31:51,360 --> 00:31:52,620
then and

749
00:31:52,620 --> 00:31:54,000
of course whatever else you want to do

750
00:31:54,000 --> 00:31:55,440
you can also do

751
00:31:55,440 --> 00:31:58,700
Okay so

752
00:31:58,860 --> 00:32:01,760
so we we had success on the jetty box

753
00:32:01,760 --> 00:32:05,279
and let's try the solar box real quick

754
00:32:05,279 --> 00:32:07,500
uh the

755
00:32:07,500 --> 00:32:11,039
URL is almost the same

756
00:32:11,039 --> 00:32:15,120
we got to put in the jetty Port 8983

757
00:32:15,120 --> 00:32:17,279
and we got to put in I think it's solar

758
00:32:17,279 --> 00:32:21,059
slash cores slash is is one of them

759
00:32:21,059 --> 00:32:23,100
I found oh sorry I found a few different

760
00:32:23,100 --> 00:32:27,000
spots on the default solar install

761
00:32:27,000 --> 00:32:30,059
um that are vulnerable 8093 solar admin

762
00:32:30,059 --> 00:32:32,940
cores solar admin config solar admin

763
00:32:32,940 --> 00:32:34,559
collections

764
00:32:34,559 --> 00:32:36,600
so we'll do I think I typed that wrong

765
00:32:36,600 --> 00:32:38,039
solar

766
00:32:38,039 --> 00:32:40,020
admin

767
00:32:40,020 --> 00:32:41,039
of course

768
00:32:41,039 --> 00:32:42,899
awesome okay so we got we got something

769
00:32:42,899 --> 00:32:46,200
back let's see if we got our oh we

770
00:32:46,200 --> 00:32:49,620
didn't get a showback I must

771
00:32:49,620 --> 00:32:52,399
oh thank you

772
00:32:55,140 --> 00:32:58,140
ah that looks much more like what I'm

773
00:32:58,140 --> 00:33:01,140
used to okay so thank you so the the URL

774
00:33:01,140 --> 00:33:02,940
is correct on the GitHub site I just

775
00:33:02,940 --> 00:33:06,240
typed it wrong live no surprise let's

776
00:33:06,240 --> 00:33:07,860
see where we got our connection from you

777
00:33:07,860 --> 00:33:09,419
can see this looks like a solar

778
00:33:09,419 --> 00:33:10,980
something

779
00:33:10,980 --> 00:33:14,000
who am I

780
00:33:14,100 --> 00:33:16,980
solar so we're on that solar box now it

781
00:33:16,980 --> 00:33:20,820
gave us a call back easy peasy

782
00:33:20,820 --> 00:33:21,419
um

783
00:33:21,419 --> 00:33:24,140
all right so we've seen exploitation

784
00:33:24,140 --> 00:33:28,880
we've we've demonstrated this range

785
00:33:29,220 --> 00:33:31,200
the next thing that you're you're

786
00:33:31,200 --> 00:33:34,019
probably interested in is

787
00:33:34,019 --> 00:33:36,779
how how did this get deployed how can I

788
00:33:36,779 --> 00:33:39,960
run this on my own at home using my own

789
00:33:39,960 --> 00:33:42,360
AWS account or how can I set up

790
00:33:42,360 --> 00:33:44,940
something similar for tomorrow's

791
00:33:44,940 --> 00:33:46,980
vulnerabilities

792
00:33:46,980 --> 00:33:48,899
um there's three steps to the deployment

793
00:33:48,899 --> 00:33:51,960
first of all create some infrastructure

794
00:33:51,960 --> 00:33:55,080
within Amazon web services and we're

795
00:33:55,080 --> 00:33:56,460
going to use terraform to do that

796
00:33:56,460 --> 00:33:58,380
configure that infrastructure we're

797
00:33:58,380 --> 00:34:00,659
going to use ansible to do that and then

798
00:34:00,659 --> 00:34:02,880
start those vulnerable services so that

799
00:34:02,880 --> 00:34:05,039
you can go in there and exploit them and

800
00:34:05,039 --> 00:34:07,320
that happens automatically as a result

801
00:34:07,320 --> 00:34:09,179
of ansible

802
00:34:09,179 --> 00:34:12,480
I'm going to demonstrate this

803
00:34:12,480 --> 00:34:15,060
so I'm logged into

804
00:34:15,060 --> 00:34:17,639
My Home Server that I've used to deploy

805
00:34:17,639 --> 00:34:19,139
this and we'll talk about the the

806
00:34:19,139 --> 00:34:21,239
directory structure here in a minute but

807
00:34:21,239 --> 00:34:22,800
this is the exact same thing you'll

808
00:34:22,800 --> 00:34:26,339
you'll get from the uh the GitHub

809
00:34:26,339 --> 00:34:28,560
there's a terraform directory and an

810
00:34:28,560 --> 00:34:30,000
ansible directory those are the most

811
00:34:30,000 --> 00:34:31,679
critical things first we've got to

812
00:34:31,679 --> 00:34:33,659
deploy the infrastructure so we'll go

813
00:34:33,659 --> 00:34:35,520
into terraform now it's already deployed

814
00:34:35,520 --> 00:34:38,899
so let's destroy it terraform

815
00:34:38,899 --> 00:34:43,460
destroy I tried to type that wrong

816
00:34:43,859 --> 00:34:45,418
so terraform is going to do a little

817
00:34:45,418 --> 00:34:48,119
calculation it's gonna it's gonna

818
00:34:48,119 --> 00:34:49,859
consider what's deployed currently to

819
00:34:49,859 --> 00:34:52,500
AWS and what actually needs to be

820
00:34:52,500 --> 00:34:55,379
deployed and uh since we said destroy

821
00:34:55,379 --> 00:34:57,660
it's gonna it's gonna destroy it all now

822
00:34:57,660 --> 00:34:58,920
this is going to take a couple of

823
00:34:58,920 --> 00:35:03,060
minutes and then we'll we'll re-deploy

824
00:35:03,060 --> 00:35:05,760
it again and we'll run ansible

825
00:35:05,760 --> 00:35:09,359
um but while we do that

826
00:35:09,359 --> 00:35:13,098
let's go ahead and look at

827
00:35:15,119 --> 00:35:18,420
how this kind of works behind the scenes

828
00:35:18,420 --> 00:35:20,640
so let's see if well I'm going to do it

829
00:35:20,640 --> 00:35:23,598
over on the screen here sorry

830
00:35:28,560 --> 00:35:31,040
oh

831
00:35:33,119 --> 00:35:36,119
awesome

832
00:35:43,500 --> 00:35:45,960
so again uh the main directories in here

833
00:35:45,960 --> 00:35:48,960
are are ansible and terraform the readme

834
00:35:48,960 --> 00:35:50,640
and the terraform directory is going to

835
00:35:50,640 --> 00:35:52,079
tell you exactly what you've got to run

836
00:35:52,079 --> 00:35:55,020
you've got to create some SSH Keys just

837
00:35:55,020 --> 00:35:57,240
running these exact commands you run

838
00:35:57,240 --> 00:35:59,820
terraform in it and terraform apply and

839
00:35:59,820 --> 00:36:02,220
it's going to use the the dot TF files

840
00:36:02,220 --> 00:36:04,200
in this directory to configure your your

841
00:36:04,200 --> 00:36:07,740
range is anybody familiar with terraform

842
00:36:07,740 --> 00:36:10,320
yeah this could be like a whole you know

843
00:36:10,320 --> 00:36:13,859
a whole four hour five day talk on how

844
00:36:13,859 --> 00:36:15,960
terraform works but it's basically going

845
00:36:15,960 --> 00:36:18,000
to cram all these dot TF files together

846
00:36:18,000 --> 00:36:20,760
and do the best job of figuring out what

847
00:36:20,760 --> 00:36:22,859
that says you want your AWS

848
00:36:22,859 --> 00:36:24,780
infrastructure to look like it's going

849
00:36:24,780 --> 00:36:27,660
to start with main.tf because that's

850
00:36:27,660 --> 00:36:29,220
where the base of my configuration is

851
00:36:29,220 --> 00:36:30,420
written there's nothing special about

852
00:36:30,420 --> 00:36:33,960
main.tf uh inside that

853
00:36:33,960 --> 00:36:36,859
it's got

854
00:36:36,900 --> 00:36:40,140
some variables that describe hey we want

855
00:36:40,140 --> 00:36:42,300
to do this on AWS we want to do it

856
00:36:42,300 --> 00:36:45,420
within uses two I want to apply a tag to

857
00:36:45,420 --> 00:36:49,320
every resource that I set up uh here are

858
00:36:49,320 --> 00:36:53,339
the Debian and Cali images Amis that I

859
00:36:53,339 --> 00:36:56,460
want to install on on some EC ec2

860
00:36:56,460 --> 00:36:59,220
virtual machines and here are the type

861
00:36:59,220 --> 00:37:01,320
of machine that I want to deploy small

862
00:37:01,320 --> 00:37:03,720
medium and large all set up in variables

863
00:37:03,720 --> 00:37:06,480
so we can refer to them later it's also

864
00:37:06,480 --> 00:37:09,300
going to describe some basic subnetting

865
00:37:09,300 --> 00:37:11,940
that we can use in other files uh the

866
00:37:11,940 --> 00:37:14,820
the red box the Cali box the blue box

867
00:37:14,820 --> 00:37:18,300
that solar box and the administrator box

868
00:37:18,300 --> 00:37:20,960
that jump hosts are all described in

869
00:37:20,960 --> 00:37:24,119
separate.tf terraform files and as a

870
00:37:24,119 --> 00:37:25,920
result of this we want to we want to

871
00:37:25,920 --> 00:37:30,140
easily pass this configuration over to

872
00:37:30,140 --> 00:37:34,380
ansible so this ansible host TF file is

873
00:37:34,380 --> 00:37:36,540
automatically going to use a template to

874
00:37:36,540 --> 00:37:38,700
create an ansible host file and to drop

875
00:37:38,700 --> 00:37:40,740
it in the right spot where ansible needs

876
00:37:40,740 --> 00:37:42,720
it for configuration

877
00:37:42,720 --> 00:37:44,940
and then there's a secrets.tf template

878
00:37:44,940 --> 00:37:46,260
this is the other thing if you want to

879
00:37:46,260 --> 00:37:48,480
deploy this yourself you need to set up

880
00:37:48,480 --> 00:37:50,339
it's going to ask for hey what do you

881
00:37:50,339 --> 00:37:52,140
want the passwords to be you get to make

882
00:37:52,140 --> 00:37:54,060
them up what's what's your domain on

883
00:37:54,060 --> 00:37:56,339
afraid.org and and how do I update the

884
00:37:56,339 --> 00:37:58,980
IP address of that domain uh that that's

885
00:37:58,980 --> 00:38:00,119
the kind of stuff that you're going to

886
00:38:00,119 --> 00:38:02,880
have to put in your own secrets.tf I

887
00:38:02,880 --> 00:38:06,060
wouldn't want to deploy that on GitHub

888
00:38:06,060 --> 00:38:07,680
all right let's see how this is going so

889
00:38:07,680 --> 00:38:10,460
terraform has successfully

890
00:38:10,460 --> 00:38:14,220
destroyed so now let's try

891
00:38:14,220 --> 00:38:16,440
and terraform apply

892
00:38:16,440 --> 00:38:18,599
and right now I'm I'm going to have

893
00:38:18,599 --> 00:38:20,839
basically none of this stuff on my AWS

894
00:38:20,839 --> 00:38:23,339
infrastructure and terraform is going to

895
00:38:23,339 --> 00:38:25,380
go ahead and set all of it up based on

896
00:38:25,380 --> 00:38:27,540
this configuration it goes from me

897
00:38:27,540 --> 00:38:31,200
spending zero dollars to AWS to me

898
00:38:31,200 --> 00:38:33,720
spending about three dollars a day it's

899
00:38:33,720 --> 00:38:35,880
pretty cheap range fortunately

900
00:38:35,880 --> 00:38:37,560
and it's going to do that in just a

901
00:38:37,560 --> 00:38:38,760
couple of minutes here

902
00:38:38,760 --> 00:38:40,560
so after we do that terraform

903
00:38:40,560 --> 00:38:42,540
configuration we're going to need to

904
00:38:42,540 --> 00:38:44,820
change over to the ansible directory

905
00:38:44,820 --> 00:38:47,700
and if you're familiar with ansible at

906
00:38:47,700 --> 00:38:50,339
all we're just going to run a Playbook

907
00:38:50,339 --> 00:38:53,579
Playbook Dot yaml

908
00:38:53,579 --> 00:38:55,260
hopefully I'll have time to demonstrate

909
00:38:55,260 --> 00:38:58,260
this real quick but this has a

910
00:38:58,260 --> 00:39:00,660
configuration section for each of the

911
00:39:00,660 --> 00:39:02,160
different hosts the jump hosts the red

912
00:39:02,160 --> 00:39:04,079
host and the Bluehost and I can just

913
00:39:04,079 --> 00:39:06,420
tell it which roles I want each of those

914
00:39:06,420 --> 00:39:09,240
to inhabit I want my jump host to be

915
00:39:09,240 --> 00:39:12,060
running guacamole it needs Docker to do

916
00:39:12,060 --> 00:39:14,220
that so I also want it to be a Docker

917
00:39:14,220 --> 00:39:17,220
server I want my Kali box to have a

918
00:39:17,220 --> 00:39:19,500
desktop environment and to be running a

919
00:39:19,500 --> 00:39:21,480
VNC server and to automatically

920
00:39:21,480 --> 00:39:23,579
configure some of that jndi stuff that

921
00:39:23,579 --> 00:39:25,740
we talked about jndi server right there

922
00:39:25,740 --> 00:39:28,380
and I want my solar host to be running

923
00:39:28,380 --> 00:39:31,020
solar and Jetty I also have the ability

924
00:39:31,020 --> 00:39:33,720
to set up an elasticsearch host but I

925
00:39:33,720 --> 00:39:35,280
wasn't able to get execution there so

926
00:39:35,280 --> 00:39:36,900
it's less interesting

927
00:39:36,900 --> 00:39:40,140
now none of that is Magic either all of

928
00:39:40,140 --> 00:39:43,380
those roles corresponds correspond to a

929
00:39:43,380 --> 00:39:46,500
directory in the ansible roles directory

930
00:39:46,500 --> 00:39:49,440
and so this is the meat of the ansible

931
00:39:49,440 --> 00:39:50,940
configuration you can see there's

932
00:39:50,940 --> 00:39:54,119
there's directories that tell ansible

933
00:39:54,119 --> 00:39:55,380
how to set up each of those things

934
00:39:55,380 --> 00:39:59,220
guacamole solar jndi all that stuff and

935
00:39:59,220 --> 00:40:02,040
we could dive in on on how those work if

936
00:40:02,040 --> 00:40:04,619
you're interested it's all documented in

937
00:40:04,619 --> 00:40:07,200
code it's all going to work for you feel

938
00:40:07,200 --> 00:40:08,460
free to take a look

939
00:40:08,460 --> 00:40:11,460
let's see where uh terraform is so so

940
00:40:11,460 --> 00:40:13,320
terraform has now deployed the

941
00:40:13,320 --> 00:40:15,540
infrastructure you can see that the last

942
00:40:15,540 --> 00:40:17,040
thing it's doing is it's telling us the

943
00:40:17,040 --> 00:40:19,859
IP addresses in that environment but we

944
00:40:19,859 --> 00:40:21,780
don't we don't need to look at that

945
00:40:21,780 --> 00:40:24,599
uh because we can just CD dot dot slash

946
00:40:24,599 --> 00:40:26,099
ansible

947
00:40:26,099 --> 00:40:29,700
and we can run uh Playbook ansible

948
00:40:29,700 --> 00:40:32,520
Playbook playbook.yaml terraform has

949
00:40:32,520 --> 00:40:34,079
already created the host file for us

950
00:40:34,079 --> 00:40:35,880
we're good to go now this is going to

951
00:40:35,880 --> 00:40:37,980
take several minutes because installing

952
00:40:37,980 --> 00:40:39,900
a graphical user interface on Linux

953
00:40:39,900 --> 00:40:42,420
takes takes a little while but it's just

954
00:40:42,420 --> 00:40:43,680
going to chug through it's going to

955
00:40:43,680 --> 00:40:46,079
deploy everything and and it's worked

956
00:40:46,079 --> 00:40:48,540
three times in a row now it'll

957
00:40:48,540 --> 00:40:49,859
We're Not Gonna We're not gonna have

958
00:40:49,859 --> 00:40:52,079
time to to see it finish this time but

959
00:40:52,079 --> 00:40:53,640
uh

960
00:40:53,640 --> 00:40:56,299
it will

961
00:40:57,240 --> 00:41:00,300
Okay so we've we've talked about how

962
00:41:00,300 --> 00:41:02,940
to deploy we've demonstrated it a little

963
00:41:02,940 --> 00:41:05,400
bit the overall cost of this is Tiny

964
00:41:05,400 --> 00:41:08,220
it's just it's deploying exactly what it

965
00:41:08,220 --> 00:41:09,900
says here in the the cost is less than

966
00:41:09,900 --> 00:41:11,760
three dollars a day

967
00:41:11,760 --> 00:41:13,500
you don't need to run it for a full day

968
00:41:13,500 --> 00:41:14,760
though if you're going to play with it

969
00:41:14,760 --> 00:41:17,640
for four hours stand it up play with it

970
00:41:17,640 --> 00:41:19,619
and then terraform destroy when you're

971
00:41:19,619 --> 00:41:21,119
done

972
00:41:21,119 --> 00:41:24,119
um so the the cost is really tiny

973
00:41:24,119 --> 00:41:26,220
um this this allows you to stand up

974
00:41:26,220 --> 00:41:27,780
hundreds of servers if you want and play

975
00:41:27,780 --> 00:41:28,920
with them for a little while for real

976
00:41:28,920 --> 00:41:31,140
cheap or just three

977
00:41:31,140 --> 00:41:32,520
we've talked about how all those

978
00:41:32,520 --> 00:41:34,560
different components work I've got a

979
00:41:34,560 --> 00:41:36,000
link to the code back at the beginning

980
00:41:36,000 --> 00:41:38,520
of the slide some of the remaining tools

981
00:41:38,520 --> 00:41:41,040
are if this was a real range we might

982
00:41:41,040 --> 00:41:43,200
want to be able to observe those

983
00:41:43,200 --> 00:41:46,140
attacker actions in real time using

984
00:41:46,140 --> 00:41:48,180
security onion and so it would be great

985
00:41:48,180 --> 00:41:50,460
to automatically deploy security onion

986
00:41:50,460 --> 00:41:53,700
into this VPC and monitor those attacker

987
00:41:53,700 --> 00:41:55,140
actions and you could get a feel from

988
00:41:55,140 --> 00:41:57,420
both the red and a blue side that's not

989
00:41:57,420 --> 00:42:00,900
done in this yet uh maybe maybe to come

990
00:42:00,900 --> 00:42:03,540
it would be great to use actual Linux

991
00:42:03,540 --> 00:42:07,260
boxes or real routers deployed to AWS

992
00:42:07,260 --> 00:42:09,240
because right now the networking is just

993
00:42:09,240 --> 00:42:13,260
using aws's subnets and security groups

994
00:42:13,260 --> 00:42:15,420
and those are kind of just a simulation

995
00:42:15,420 --> 00:42:18,060
of of what we we might want to simulate

996
00:42:18,060 --> 00:42:19,619
in the real world what we might want to

997
00:42:19,619 --> 00:42:22,220
see in the real world

998
00:42:23,099 --> 00:42:25,020
um and and last up I want to save some

999
00:42:25,020 --> 00:42:27,480
time for for questions so I just wanted

1000
00:42:27,480 --> 00:42:29,780
to say thank you to all these groups

1001
00:42:29,780 --> 00:42:32,579
afraid.org an amazing DNS provider for

1002
00:42:32,579 --> 00:42:34,380
free so that made this really easy to

1003
00:42:34,380 --> 00:42:36,119
demonstrate let's encrypt obviously

1004
00:42:36,119 --> 00:42:38,099
thanks Sans for letting me steal your

1005
00:42:38,099 --> 00:42:41,520
stuff uh Jonas alfredson has got an

1006
00:42:41,520 --> 00:42:44,640
awesome nginx plus let's encrypt Docker

1007
00:42:44,640 --> 00:42:46,020
container that's made my life a lot

1008
00:42:46,020 --> 00:42:48,720
easier including this project uh and

1009
00:42:48,720 --> 00:42:50,520
thanks Apache software foundation not

1010
00:42:50,520 --> 00:42:54,060
only did you make log 4J which gave me

1011
00:42:54,060 --> 00:42:56,520
the impetus for this talk today you also

1012
00:42:56,520 --> 00:42:59,040
made guacamole which let me let me

1013
00:42:59,040 --> 00:43:01,079
experiment with it and thanks again to

1014
00:43:01,079 --> 00:43:03,359
my wife who lets me screw around with

1015
00:43:03,359 --> 00:43:06,680
this stuff instead of sleeping

1016
00:43:08,400 --> 00:43:12,859
all right uh any any questions

1017
00:43:14,900 --> 00:43:17,160
there we go we've got a few minutes for

1018
00:43:17,160 --> 00:43:18,359
Q a if you have anything just line up

1019
00:43:18,359 --> 00:43:19,200
right here in the middle I'll give you

1020
00:43:19,200 --> 00:43:21,540
the mic for that but thank you Carl so

1021
00:43:21,540 --> 00:43:24,619
far anybody got any questions

1022
00:43:26,280 --> 00:43:28,440
okay I think we're good then all right

1023
00:43:28,440 --> 00:43:29,800
thanks thank you everybody

1024
00:43:29,800 --> 00:43:33,199
[Applause]

1025
00:43:37,859 --> 00:43:40,040
just gonna

