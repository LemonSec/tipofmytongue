1
00:00:00,399 --> 00:00:03,760
this again is my talk uh weaponized xss

2
00:00:03,760 --> 00:00:08,000
moving beyond alert one so

3
00:00:08,000 --> 00:00:10,880
as uh they mentioned i'm ray doyle um

4
00:00:10,880 --> 00:00:13,360
you can find me on twitter at doilersec

5
00:00:13,360 --> 00:00:17,600
or my blog um www.doiler.net

6
00:00:17,600 --> 00:00:19,920
i work at i'm a staff adversarial

7
00:00:19,920 --> 00:00:21,359
engineer at avalara

8
00:00:21,359 --> 00:00:24,160
they're a tax company so tax compliance

9
00:00:24,160 --> 00:00:25,840
sales tax things like that

10
00:00:25,840 --> 00:00:28,400
um basically the team lead of a newly

11
00:00:28,400 --> 00:00:30,800
forming pen test and red team

12
00:00:30,800 --> 00:00:32,960
i'm competing in a ton of ctfs and ran a

13
00:00:32,960 --> 00:00:33,920
bunch

14
00:00:33,920 --> 00:00:36,399
been on two defcon black badge teams and

15
00:00:36,399 --> 00:00:37,680
one derby con

16
00:00:37,680 --> 00:00:39,760
um if you want to get into ctfs please

17
00:00:39,760 --> 00:00:41,120
feel free to reach out to me on discord

18
00:00:41,120 --> 00:00:41,840
or twitter

19
00:00:41,840 --> 00:00:44,239
i'd love to talk to you about them i

20
00:00:44,239 --> 00:00:46,160
also collect certs i've got a ton of

21
00:00:46,160 --> 00:00:47,120
them

22
00:00:47,120 --> 00:00:49,039
and i'm just trying to get into mobile

23
00:00:49,039 --> 00:00:50,719
gaming and content creation since

24
00:00:50,719 --> 00:00:52,160
quarantine has us

25
00:00:52,160 --> 00:00:55,760
all inside more than we'd like

26
00:00:56,079 --> 00:00:59,199
so a few caveats before i begin i'm

27
00:00:59,199 --> 00:00:59,840
definitely

28
00:00:59,840 --> 00:01:01,840
no expert in crosstalk scripting or

29
00:01:01,840 --> 00:01:03,440
javascript in general

30
00:01:03,440 --> 00:01:05,199
uh i'm a pen tester and a red teamer by

31
00:01:05,199 --> 00:01:07,760
trade so i am familiar with it but

32
00:01:07,760 --> 00:01:09,119
there are probably those of you out

33
00:01:09,119 --> 00:01:11,520
there who know more than me um

34
00:01:11,520 --> 00:01:13,840
but i'll do my best to try and teach you

35
00:01:13,840 --> 00:01:15,840
what i know and

36
00:01:15,840 --> 00:01:17,520
explain why crosstalk scripting is

37
00:01:17,520 --> 00:01:19,280
scarier than some people

38
00:01:19,280 --> 00:01:22,799
may realize in that same vein this is

39
00:01:22,799 --> 00:01:23,759
going to be a

40
00:01:23,759 --> 00:01:27,040
very example heavy presentation

41
00:01:27,040 --> 00:01:29,520
so the slides will be available

42
00:01:29,520 --> 00:01:30,799
eventually if not

43
00:01:30,799 --> 00:01:32,720
ping me on discord or twitter or

44
00:01:32,720 --> 00:01:34,640
anywhere and i'll get them to you sooner

45
00:01:34,640 --> 00:01:36,000
um there will be a lot of code there

46
00:01:36,000 --> 00:01:38,079
will be videos i'll get them to you as

47
00:01:38,079 --> 00:01:40,640
fast as possible if you want them

48
00:01:40,640 --> 00:01:42,640
i also don't participate in bug bounties

49
00:01:42,640 --> 00:01:44,399
but i do know that some of them will

50
00:01:44,399 --> 00:01:45,360
want you to

51
00:01:45,360 --> 00:01:48,399
sort of prove the severity to

52
00:01:48,399 --> 00:01:51,040
get that higher bounty get the get your

53
00:01:51,040 --> 00:01:52,640
um finding to count so

54
00:01:52,640 --> 00:01:54,320
some for those of you that do this

55
00:01:54,320 --> 00:01:56,399
should hopefully help with that

56
00:01:56,399 --> 00:01:58,240
um and yeah i'm not really going to

57
00:01:58,240 --> 00:02:00,320
cover cross-site scripting

58
00:02:00,320 --> 00:02:02,799
that much as a an introduction or

59
00:02:02,799 --> 00:02:04,560
protections i'll touch on them briefly

60
00:02:04,560 --> 00:02:04,960
but

61
00:02:04,960 --> 00:02:06,479
this is mostly like i said how to

62
00:02:06,479 --> 00:02:08,000
weaponize it

63
00:02:08,000 --> 00:02:11,120
how to go from that alert one pop-up

64
00:02:11,120 --> 00:02:13,920
to something that a real attacker might

65
00:02:13,920 --> 00:02:15,440
use

66
00:02:15,440 --> 00:02:17,760
so in that vein before we jump into it

67
00:02:17,760 --> 00:02:19,920
um respond on discord twitter raise your

68
00:02:19,920 --> 00:02:21,360
hand in your room

69
00:02:21,360 --> 00:02:23,520
who out there is familiar with prostate

70
00:02:23,520 --> 00:02:24,640
scripting

71
00:02:24,640 --> 00:02:27,840
and sort of has seen it knows what the

72
00:02:27,840 --> 00:02:30,560
vulnerability is

73
00:02:30,640 --> 00:02:32,400
so i can't really see from this distance

74
00:02:32,400 --> 00:02:34,400
but hopefully at least a few of you

75
00:02:34,400 --> 00:02:36,000
um so for those of you who are familiar

76
00:02:36,000 --> 00:02:37,599
with it hopefully i can give you

77
00:02:37,599 --> 00:02:39,440
a few more tricks to use either for your

78
00:02:39,440 --> 00:02:40,959
bug brownie huntings or maybe even a

79
00:02:40,959 --> 00:02:41,360
real

80
00:02:41,360 --> 00:02:44,239
engagement and for those of you who

81
00:02:44,239 --> 00:02:45,680
didn't raise your hand

82
00:02:45,680 --> 00:02:47,680
um especially for the developers the

83
00:02:47,680 --> 00:02:49,040
defenders things like that

84
00:02:49,040 --> 00:02:51,280
hopefully i can give you a better idea

85
00:02:51,280 --> 00:02:52,560
of why

86
00:02:52,560 --> 00:02:54,720
some pen testers or sites may say

87
00:02:54,720 --> 00:02:55,840
cross-site scripting is

88
00:02:55,840 --> 00:02:59,120
medium or even high severity

89
00:02:59,120 --> 00:03:01,920
so in that same vein during the talk if

90
00:03:01,920 --> 00:03:03,680
you want a live tweet during it

91
00:03:03,680 --> 00:03:06,640
please use the weaponized xss hashtag if

92
00:03:06,640 --> 00:03:07,840
you want to talk about my

93
00:03:07,840 --> 00:03:10,080
covid mullet if i make a mistake during

94
00:03:10,080 --> 00:03:11,599
the talk or if you just enjoy it please

95
00:03:11,599 --> 00:03:12,319
reach out to me

96
00:03:12,319 --> 00:03:15,440
i love having the interaction

97
00:03:15,519 --> 00:03:18,560
so a brief introduction to crosstalk

98
00:03:18,560 --> 00:03:19,360
scripting

99
00:03:19,360 --> 00:03:23,200
this is from owasp directly

100
00:03:24,159 --> 00:03:26,640
i'm not going to read all of it but at

101
00:03:26,640 --> 00:03:28,959
its core cross-site scripting is

102
00:03:28,959 --> 00:03:33,040
injecting javascript into an application

103
00:03:33,040 --> 00:03:35,680
in an unexpected manner that renders it

104
00:03:35,680 --> 00:03:36,080
on

105
00:03:36,080 --> 00:03:39,680
the client side so this will usually

106
00:03:39,680 --> 00:03:41,440
almost always be used for client-side

107
00:03:41,440 --> 00:03:43,920
attacks so an attacker is targeting a

108
00:03:43,920 --> 00:03:47,840
user of your web application

109
00:03:47,840 --> 00:03:50,080
so the most basic example of going

110
00:03:50,080 --> 00:03:51,360
beyond alert one

111
00:03:51,360 --> 00:03:54,879
alert two now while this is a

112
00:03:54,879 --> 00:03:56,480
tongue-in-cheek joke

113
00:03:56,480 --> 00:03:59,120
i do want to point out that a lot of our

114
00:03:59,120 --> 00:04:01,200
defenses against prostate scripting

115
00:04:01,200 --> 00:04:04,400
do come from sort of the the deny or the

116
00:04:04,400 --> 00:04:05,519
block

117
00:04:05,519 --> 00:04:08,239
list format so i've personally seen

118
00:04:08,239 --> 00:04:09,360
cases where

119
00:04:09,360 --> 00:04:12,159
i reported to a developer that you know

120
00:04:12,159 --> 00:04:14,720
my payload was alert one so they fixed

121
00:04:14,720 --> 00:04:17,918
it by blocking alert one

122
00:04:17,918 --> 00:04:21,040
well technically they fixed my finding

123
00:04:21,040 --> 00:04:23,120
but since they didn't quite understand

124
00:04:23,120 --> 00:04:24,479
the severity of

125
00:04:24,479 --> 00:04:26,880
what else i could do alert two would

126
00:04:26,880 --> 00:04:28,639
have still worked as well as all of

127
00:04:28,639 --> 00:04:31,840
these examples probably

128
00:04:32,000 --> 00:04:35,120
so the first example i want to show

129
00:04:35,120 --> 00:04:36,800
and sort of one that will encompass

130
00:04:36,800 --> 00:04:38,320
everything in this talk is loading

131
00:04:38,320 --> 00:04:40,840
external scripts

132
00:04:40,840 --> 00:04:43,680
if and actually on that quick note i

133
00:04:43,680 --> 00:04:44,960
don't i'm not really going to cover

134
00:04:44,960 --> 00:04:46,160
bypassing filters

135
00:04:46,160 --> 00:04:49,040
or things of that nature um all of these

136
00:04:49,040 --> 00:04:50,560
examples will assume that you can put

137
00:04:50,560 --> 00:04:51,919
whatever you want wherever you're

138
00:04:51,919 --> 00:04:53,600
loading this crosstalk scripting

139
00:04:53,600 --> 00:04:56,320
um wax allowed nylas things like that

140
00:04:56,320 --> 00:04:56,639
are

141
00:04:56,639 --> 00:04:58,479
good defenses and layering them is even

142
00:04:58,479 --> 00:05:00,720
better um i want to just show

143
00:05:00,720 --> 00:05:03,039
what you can do in a perfect world as an

144
00:05:03,039 --> 00:05:05,039
attacker

145
00:05:05,039 --> 00:05:08,160
so in that vein anywhere you that you

146
00:05:08,160 --> 00:05:10,000
can put inline javascript

147
00:05:10,000 --> 00:05:12,880
like that second bullet like alert one

148
00:05:12,880 --> 00:05:15,039
you can almost always load an external

149
00:05:15,039 --> 00:05:16,000
script

150
00:05:16,000 --> 00:05:18,039
so in this it's just loading

151
00:05:18,039 --> 00:05:20,320
through.evil.js

152
00:05:20,320 --> 00:05:22,240
as an attacker if possible it's usually

153
00:05:22,240 --> 00:05:24,080
better to go with an external script

154
00:05:24,080 --> 00:05:26,240
you don't have to worry about weird

155
00:05:26,240 --> 00:05:27,280
characters in your

156
00:05:27,280 --> 00:05:30,240
url if it's a reflect across a scripting

157
00:05:30,240 --> 00:05:30,960
attack

158
00:05:30,960 --> 00:05:32,960
you don't have to worry about length

159
00:05:32,960 --> 00:05:34,720
things like that

160
00:05:34,720 --> 00:05:36,639
so for all of these examples they're

161
00:05:36,639 --> 00:05:38,400
mostly interchangeable

162
00:05:38,400 --> 00:05:40,400
um some of them i will show an inline

163
00:05:40,400 --> 00:05:42,080
script some will be external

164
00:05:42,080 --> 00:05:44,160
but for the most part try to load an

165
00:05:44,160 --> 00:05:47,120
external script if possible

166
00:05:47,120 --> 00:05:50,479
so in that same vein

167
00:05:50,479 --> 00:05:53,440
uh the second example i want to cover is

168
00:05:53,440 --> 00:05:55,680
staging your crosstalk scripting

169
00:05:55,680 --> 00:05:57,600
so this payload will be great if you

170
00:05:57,600 --> 00:06:00,560
find yourself injecting into

171
00:06:00,560 --> 00:06:03,680
a existing script tag so for those of

172
00:06:03,680 --> 00:06:05,120
you who don't know if you're already

173
00:06:05,120 --> 00:06:06,720
inside of a script tag

174
00:06:06,720 --> 00:06:10,240
you can't set a source attribute

175
00:06:10,240 --> 00:06:13,199
so you're no longer allowed to load that

176
00:06:13,199 --> 00:06:14,800
external javascript i mentioned in the

177
00:06:14,800 --> 00:06:15,680
last slide

178
00:06:15,680 --> 00:06:17,039
so you have to just sort of build your

179
00:06:17,039 --> 00:06:19,120
javascript inline you could run into

180
00:06:19,120 --> 00:06:20,479
problems with

181
00:06:20,479 --> 00:06:22,240
weird um characters in the url things

182
00:06:22,240 --> 00:06:24,400
like that alternatively

183
00:06:24,400 --> 00:06:27,039
this is useful for if you find yourself

184
00:06:27,039 --> 00:06:29,280
injecting into an html event handler

185
00:06:29,280 --> 00:06:30,400
where also you're not going to be

186
00:06:30,400 --> 00:06:32,560
allowed to load an external javascript

187
00:06:32,560 --> 00:06:35,600
but you can use inline javascript so

188
00:06:35,600 --> 00:06:36,960
what this will do is it builds a

189
00:06:36,960 --> 00:06:38,240
function c

190
00:06:38,240 --> 00:06:40,000
which calls the function a that's

191
00:06:40,000 --> 00:06:42,080
defined in your external payload

192
00:06:42,080 --> 00:06:44,720
and then creates a new script tag inside

193
00:06:44,720 --> 00:06:45,919
of the dom

194
00:06:45,919 --> 00:06:48,560
sets the source now to your malicious

195
00:06:48,560 --> 00:06:50,080
payload which and this is just bitly

196
00:06:50,080 --> 00:06:51,039
example

197
00:06:51,039 --> 00:06:54,319
and then once the new variable you

198
00:06:54,319 --> 00:06:55,199
created is ready

199
00:06:55,199 --> 00:06:57,759
it appends it to the document we'll call

200
00:06:57,759 --> 00:06:58,639
your a function

201
00:06:58,639 --> 00:07:00,560
and now your external malicious payload

202
00:07:00,560 --> 00:07:03,840
can be executed

203
00:07:04,240 --> 00:07:06,479
so

204
00:07:08,080 --> 00:07:11,360
the most basic example of weaponized

205
00:07:11,360 --> 00:07:12,800
crosstalk scripting and the one that

206
00:07:12,800 --> 00:07:14,080
you'll see the most often

207
00:07:14,080 --> 00:07:17,440
is going to be cookie stealing so

208
00:07:17,440 --> 00:07:20,080
if you have a injection payload point

209
00:07:20,080 --> 00:07:22,240
and you put something like this

210
00:07:22,240 --> 00:07:24,479
it would add an image tag to the

211
00:07:24,479 --> 00:07:25,840
document

212
00:07:25,840 --> 00:07:29,199
with a you know grab.ping which does not

213
00:07:29,199 --> 00:07:30,160
have to exist

214
00:07:30,160 --> 00:07:33,440
on the attacker's site and it will set

215
00:07:33,440 --> 00:07:36,160
the url parameter of cookie to your

216
00:07:36,160 --> 00:07:38,240
current document.cookie

217
00:07:38,240 --> 00:07:40,319
now what that will do is if a user were

218
00:07:40,319 --> 00:07:41,599
to end up on a page that had this

219
00:07:41,599 --> 00:07:42,400
payload

220
00:07:42,400 --> 00:07:44,479
their personal cookie would be sent in a

221
00:07:44,479 --> 00:07:45,520
get request

222
00:07:45,520 --> 00:07:48,960
to the attacker's server now things like

223
00:07:48,960 --> 00:07:51,599
http only will protect against this

224
00:07:51,599 --> 00:07:53,440
things like that but if there are no

225
00:07:53,440 --> 00:07:54,720
defenses in place

226
00:07:54,720 --> 00:07:57,120
the attacker now has your current valid

227
00:07:57,120 --> 00:07:58,160
session cookie

228
00:07:58,160 --> 00:08:01,199
and can use that to basically hijack

229
00:08:01,199 --> 00:08:01,680
your

230
00:08:01,680 --> 00:08:03,520
session and log in as you without having

231
00:08:03,520 --> 00:08:06,400
to know your username or password

232
00:08:06,400 --> 00:08:08,160
this is going to be sort of the the

233
00:08:08,160 --> 00:08:10,080
easiest way you're going to be able to

234
00:08:10,080 --> 00:08:13,039
demonstrate severity or even use it in a

235
00:08:13,039 --> 00:08:14,960
a real attack scenario i've

236
00:08:14,960 --> 00:08:16,879
stolen cookies from users using

237
00:08:16,879 --> 00:08:18,720
cross-site scripting and been able to

238
00:08:18,720 --> 00:08:21,680
log in as them

239
00:08:22,639 --> 00:08:26,560
another fairly severe example that is

240
00:08:26,560 --> 00:08:28,639
relatively common is using it for

241
00:08:28,639 --> 00:08:31,520
full-on html injection

242
00:08:31,520 --> 00:08:34,559
so on the right side of the screen

243
00:08:34,559 --> 00:08:37,519
it looks like a standard drupal login

244
00:08:37,519 --> 00:08:38,958
page

245
00:08:38,958 --> 00:08:41,360
um and actually i couldn't get the

246
00:08:41,360 --> 00:08:42,880
presenter mode to show up but

247
00:08:42,880 --> 00:08:44,640
there are a lot of references and links

248
00:08:44,640 --> 00:08:46,000
to some of these

249
00:08:46,000 --> 00:08:48,000
um pictures and demos i'm going to show

250
00:08:48,000 --> 00:08:49,440
they will be provided with the slides if

251
00:08:49,440 --> 00:08:50,720
you want to go and read longer blog

252
00:08:50,720 --> 00:08:52,800
posts and things like that

253
00:08:52,800 --> 00:08:55,519
but so back to that the picture on the

254
00:08:55,519 --> 00:08:56,000
right

255
00:08:56,000 --> 00:08:59,519
looks like a standard drupal login page

256
00:08:59,519 --> 00:09:02,399
but it's actually a drupal post if you

257
00:09:02,399 --> 00:09:03,760
look at the url

258
00:09:03,760 --> 00:09:06,240
that someone used cross-site scripting

259
00:09:06,240 --> 00:09:08,000
to rewrite the entire html

260
00:09:08,000 --> 00:09:10,560
of the document to look like an access

261
00:09:10,560 --> 00:09:11,360
denied

262
00:09:11,360 --> 00:09:14,800
login page so a standard user may see

263
00:09:14,800 --> 00:09:15,839
this page

264
00:09:15,839 --> 00:09:17,920
see that they are not authorized attempt

265
00:09:17,920 --> 00:09:19,279
to log in with their username and

266
00:09:19,279 --> 00:09:20,640
password

267
00:09:20,640 --> 00:09:22,560
unbeknownst to them that username and

268
00:09:22,560 --> 00:09:24,560
password be first sent to the attacker

269
00:09:24,560 --> 00:09:25,680
controlled server

270
00:09:25,680 --> 00:09:27,120
and then they would be logged into the

271
00:09:27,120 --> 00:09:29,360
site that they're expecting

272
00:09:29,360 --> 00:09:30,959
so now the attacker has their username

273
00:09:30,959 --> 00:09:32,480
password and to the user it looks like

274
00:09:32,480 --> 00:09:35,519
everything was just fine

275
00:09:35,760 --> 00:09:38,480
so the example on the left is what the

276
00:09:38,480 --> 00:09:39,760
javascript might look like

277
00:09:39,760 --> 00:09:42,160
it would you can create a new div you

278
00:09:42,160 --> 00:09:44,240
can make it the full size of the screen

279
00:09:44,240 --> 00:09:46,080
and then you can add any html to that

280
00:09:46,080 --> 00:09:47,760
div and build

281
00:09:47,760 --> 00:09:49,519
a new login page so if you're attacking

282
00:09:49,519 --> 00:09:51,920
a bank um maybe you you know change

283
00:09:51,920 --> 00:09:54,240
their login page grab some credentials

284
00:09:54,240 --> 00:09:56,000
things like that alternatively you could

285
00:09:56,000 --> 00:09:57,839
just change the content of the website

286
00:09:57,839 --> 00:10:00,560
not necessarily to sort of steal things

287
00:10:00,560 --> 00:10:02,160
i'll have a few more examples later but

288
00:10:02,160 --> 00:10:04,000
i'm sure you can think of examples where

289
00:10:04,000 --> 00:10:06,560
if you were able to change the content

290
00:10:06,560 --> 00:10:08,640
of cnn.com and send it to someone else

291
00:10:08,640 --> 00:10:10,320
it could have

292
00:10:10,320 --> 00:10:13,040
huge effects

293
00:10:13,839 --> 00:10:16,800
so i decided to not go with any live

294
00:10:16,800 --> 00:10:18,640
demos because we're already using go to

295
00:10:18,640 --> 00:10:19,440
meeting

296
00:10:19,440 --> 00:10:22,000
i'm using hotel internet i don't want to

297
00:10:22,000 --> 00:10:24,240
risk the demo god's anger too much so

298
00:10:24,240 --> 00:10:26,560
i do have a few video demos i'll talk

299
00:10:26,560 --> 00:10:27,279
over

300
00:10:27,279 --> 00:10:29,760
and hopefully they'll give a lot of

301
00:10:29,760 --> 00:10:31,360
example of these attacks

302
00:10:31,360 --> 00:10:33,040
so the first one i want to cover is

303
00:10:33,040 --> 00:10:35,360
phishing using cross-site scripting

304
00:10:35,360 --> 00:10:39,200
so in this example we have a basic

305
00:10:39,200 --> 00:10:42,079
page that just returns our search query

306
00:10:42,079 --> 00:10:42,640
we may see

307
00:10:42,640 --> 00:10:44,800
a lot of applications so if we type the

308
00:10:44,800 --> 00:10:46,000
word test it says

309
00:10:46,000 --> 00:10:50,079
our queries test so if we attempt to

310
00:10:50,079 --> 00:10:51,680
check it for cross-site scripting if we

311
00:10:51,680 --> 00:10:53,519
met our crea query

312
00:10:53,519 --> 00:10:56,480
alert one it pops the alert and i

313
00:10:56,480 --> 00:10:57,519
apologize for this

314
00:10:57,519 --> 00:11:00,800
small font but we can zoom in this is

315
00:11:00,800 --> 00:11:03,680
the script that we want to build is an

316
00:11:03,680 --> 00:11:06,319
html

317
00:11:06,480 --> 00:11:10,160
block that builds a form

318
00:11:10,160 --> 00:11:13,680
with post that will post to

319
00:11:13,680 --> 00:11:17,360
our attacker controlled server with the

320
00:11:17,360 --> 00:11:20,240
username and the password and again

321
00:11:20,240 --> 00:11:21,680
these slides will be available

322
00:11:21,680 --> 00:11:23,519
and at the bottom it just sets a cookie

323
00:11:23,519 --> 00:11:26,399
that will only fire this awful box

324
00:11:26,399 --> 00:11:28,880
then on our attacker controlled server

325
00:11:28,880 --> 00:11:29,600
we take

326
00:11:29,600 --> 00:11:31,680
all of the post requests we receive with

327
00:11:31,680 --> 00:11:33,040
a username and password

328
00:11:33,040 --> 00:11:36,320
and put them inside of a credits.txt

329
00:11:36,320 --> 00:11:37,839
and then redirect the user back to the

330
00:11:37,839 --> 00:11:39,440
query page

331
00:11:39,440 --> 00:11:41,040
so what that will actually look like it

332
00:11:41,040 --> 00:11:43,839
is

333
00:11:47,200 --> 00:11:51,120
oh i apparently need to

334
00:11:51,120 --> 00:11:53,120
so this even this demo i angered the

335
00:11:53,120 --> 00:11:54,800
gods so i actually have to clear that

336
00:11:54,800 --> 00:11:56,000
cookie because it'll only fire

337
00:11:56,000 --> 00:11:58,959
off once but in the meantime basically

338
00:11:58,959 --> 00:12:00,320
the idea behind this attack

339
00:12:00,320 --> 00:12:03,120
is to show a user a pop-up that looks

340
00:12:03,120 --> 00:12:04,560
like their maybe their session has

341
00:12:04,560 --> 00:12:05,360
expired

342
00:12:05,360 --> 00:12:08,720
and they need to re-log in but in

343
00:12:08,720 --> 00:12:10,560
actuality it's just an attacker

344
00:12:10,560 --> 00:12:12,160
controlled script that makes it look

345
00:12:12,160 --> 00:12:12,959
like it

346
00:12:12,959 --> 00:12:14,720
so a user sees this an error has

347
00:12:14,720 --> 00:12:16,560
occurred please log in again

348
00:12:16,560 --> 00:12:18,240
um they don't know why they type in

349
00:12:18,240 --> 00:12:20,720
their username and password again

350
00:12:20,720 --> 00:12:23,279
um submit that just to get access back

351
00:12:23,279 --> 00:12:24,560
to their application

352
00:12:24,560 --> 00:12:25,680
they don't save their password and

353
00:12:25,680 --> 00:12:27,200
they're back to where there were their

354
00:12:27,200 --> 00:12:28,160
query was test

355
00:12:28,160 --> 00:12:31,279
everything seems fine

356
00:12:31,440 --> 00:12:33,279
but on our attacker controlled server we

357
00:12:33,279 --> 00:12:36,560
see a post to the login.php page

358
00:12:36,560 --> 00:12:37,760
and if we actually take a look at the

359
00:12:37,760 --> 00:12:40,240
credits.txt file we got their username

360
00:12:40,240 --> 00:12:41,200
of adwin

361
00:12:41,200 --> 00:12:42,800
and their password of super secret

362
00:12:42,800 --> 00:12:45,600
password one two three four five

363
00:12:45,600 --> 00:12:47,920
because to the user it looked like they

364
00:12:47,920 --> 00:12:49,040
just needed to relog into the

365
00:12:49,040 --> 00:12:50,079
application

366
00:12:50,079 --> 00:12:52,720
but it was actually the in the same vein

367
00:12:52,720 --> 00:12:54,639
of injecting malicious html

368
00:12:54,639 --> 00:12:56,399
into the page using that cross-site

369
00:12:56,399 --> 00:12:59,440
scripting vulnerability

370
00:13:04,839 --> 00:13:06,320
so

371
00:13:06,320 --> 00:13:09,519
in that same vein less useful for an

372
00:13:09,519 --> 00:13:10,560
attacker

373
00:13:10,560 --> 00:13:13,920
but more useful for people

374
00:13:13,920 --> 00:13:16,160
internet trolls people who are trying to

375
00:13:16,160 --> 00:13:17,040
you know

376
00:13:17,040 --> 00:13:19,680
activists things of that nature you can

377
00:13:19,680 --> 00:13:20,160
just

378
00:13:20,160 --> 00:13:22,639
deface a page entirely with your with a

379
00:13:22,639 --> 00:13:24,639
cross-site scripting attack

380
00:13:24,639 --> 00:13:27,279
so maybe you know i'm sure you've seen

381
00:13:27,279 --> 00:13:29,440
pages you know this has been owned by

382
00:13:29,440 --> 00:13:33,120
uh the cyber um crash override

383
00:13:33,120 --> 00:13:35,680
so what you can do in the same vein you

384
00:13:35,680 --> 00:13:36,240
learn your

385
00:13:36,240 --> 00:13:37,920
load your external javascript and it

386
00:13:37,920 --> 00:13:40,079
will change html the page to

387
00:13:40,079 --> 00:13:43,279
your message or whatnot a very common

388
00:13:43,279 --> 00:13:45,839
example of this is the stallone.js

389
00:13:45,839 --> 00:13:47,760
which has been on a lot of fairly famous

390
00:13:47,760 --> 00:13:49,279
websites um

391
00:13:49,279 --> 00:13:51,839
i've got the defacement code here again

392
00:13:51,839 --> 00:13:53,199
you can find it there'll be links to it

393
00:13:53,199 --> 00:13:54,240
in the slides

394
00:13:54,240 --> 00:13:56,560
but what it does is it sets a background

395
00:13:56,560 --> 00:13:57,440
image

396
00:13:57,440 --> 00:13:59,440
it adds some text that the page has been

397
00:13:59,440 --> 00:14:01,279
hacked um

398
00:14:01,279 --> 00:14:04,240
adds a little more text and nothing too

399
00:14:04,240 --> 00:14:05,360
major but basically

400
00:14:05,360 --> 00:14:07,279
it's very clear that some sort of

401
00:14:07,279 --> 00:14:08,639
malicious activity has occurred on the

402
00:14:08,639 --> 00:14:10,320
website

403
00:14:10,320 --> 00:14:13,839
well this has actually occurred um

404
00:14:13,839 --> 00:14:15,360
so the first history lesson i want to go

405
00:14:15,360 --> 00:14:17,519
over there's a book called

406
00:14:17,519 --> 00:14:19,839
xss attacks cross-site scripting

407
00:14:19,839 --> 00:14:22,000
exploits and defense

408
00:14:22,000 --> 00:14:25,440
so this book has a

409
00:14:25,440 --> 00:14:26,959
link on an example on the right side

410
00:14:26,959 --> 00:14:30,399
where maria sharapova's website

411
00:14:30,399 --> 00:14:32,160
scripting vulnerability in which someone

412
00:14:32,160 --> 00:14:34,240
loaded that previous stallone

413
00:14:34,240 --> 00:14:37,760
dot js file and

414
00:14:37,760 --> 00:14:39,839
it looks like the page looks like the

415
00:14:39,839 --> 00:14:41,040
image in the bottom right

416
00:14:41,040 --> 00:14:42,839
so that's the actual payload on

417
00:14:42,839 --> 00:14:45,120
mariassherifova.com

418
00:14:45,120 --> 00:14:47,320
well when this book was sold on

419
00:14:47,320 --> 00:14:48,720
amazon.com

420
00:14:48,720 --> 00:14:50,480
that same crosstalk scripting payload

421
00:14:50,480 --> 00:14:52,000
executed so

422
00:14:52,000 --> 00:14:53,279
it's a little harder to see but that

423
00:14:53,279 --> 00:14:55,680
image on the top right is an amazon.com

424
00:14:55,680 --> 00:14:57,279
url

425
00:14:57,279 --> 00:15:00,320
preview for that book in which that the

426
00:15:00,320 --> 00:15:02,800
facebook javascript payload executed

427
00:15:02,800 --> 00:15:04,480
and if you try to read the book on

428
00:15:04,480 --> 00:15:06,720
amazon.com all you would see is you got

429
00:15:06,720 --> 00:15:08,720
stallone

430
00:15:08,720 --> 00:15:11,120
in that same vein the web application

431
00:15:11,120 --> 00:15:12,320
hackers handbook

432
00:15:12,320 --> 00:15:14,399
also had a crosstalk scripting payload

433
00:15:14,399 --> 00:15:15,360
demonstrating

434
00:15:15,360 --> 00:15:17,760
grabbing session cookies also fired on

435
00:15:17,760 --> 00:15:19,440
amazon.com

436
00:15:19,440 --> 00:15:22,240
so imagine if instead of alert one

437
00:15:22,240 --> 00:15:24,000
people wanted to use malicious payloads

438
00:15:24,000 --> 00:15:24,959
on purpose

439
00:15:24,959 --> 00:15:26,560
they could have attacked every single

440
00:15:26,560 --> 00:15:30,800
user of amazon looking at these books

441
00:15:32,079 --> 00:15:34,239
so

442
00:15:35,279 --> 00:15:38,240
while not directly a cross-site

443
00:15:38,240 --> 00:15:41,600
scripting attack i did want to cover

444
00:15:41,600 --> 00:15:43,440
an attack in the same vein that can

445
00:15:43,440 --> 00:15:45,360
utilize some cross-site scripting

446
00:15:45,360 --> 00:15:46,240
elements

447
00:15:46,240 --> 00:15:47,839
um and there's a great presentation on

448
00:15:47,839 --> 00:15:49,920
this from black cat 12

449
00:15:49,920 --> 00:15:51,680
it's that man in the middle talk with

450
00:15:51,680 --> 00:15:53,600
that disgusting title

451
00:15:53,600 --> 00:15:56,800
but at the core of it is it performs a

452
00:15:56,800 --> 00:15:59,600
man-in-the-middle attack to inject html

453
00:15:59,600 --> 00:16:00,959
and javascript

454
00:16:00,959 --> 00:16:03,120
so this isn't necessarily always

455
00:16:03,120 --> 00:16:04,880
exploiting cross-site scripting attacks

456
00:16:04,880 --> 00:16:07,120
although you could utilize it with that

457
00:16:07,120 --> 00:16:11,120
but it's overwriting pages similar to

458
00:16:11,120 --> 00:16:12,720
what it looks like on the right so in

459
00:16:12,720 --> 00:16:14,639
this talk someone goes to

460
00:16:14,639 --> 00:16:17,519
facebook.com but is displayed a photo of

461
00:16:17,519 --> 00:16:18,240
the

462
00:16:18,240 --> 00:16:20,800
this guy with a yes or no button before

463
00:16:20,800 --> 00:16:22,000
they can get to the main

464
00:16:22,000 --> 00:16:25,680
page while man in the middle html

465
00:16:25,680 --> 00:16:27,279
injection isn't necessarily a cross-site

466
00:16:27,279 --> 00:16:28,000
scripting

467
00:16:28,000 --> 00:16:30,399
issue a lot of these attacks could be

468
00:16:30,399 --> 00:16:31,360
used

469
00:16:31,360 --> 00:16:32,880
in that same manner so i did want to

470
00:16:32,880 --> 00:16:36,560
touch on it briefly

471
00:16:36,560 --> 00:16:41,040
um and one more slide on that same idea

472
00:16:42,959 --> 00:16:46,000
if using man in the middle attacks or

473
00:16:46,000 --> 00:16:48,880
cross-site scripting html injection you

474
00:16:48,880 --> 00:16:49,120
are

475
00:16:49,120 --> 00:16:52,959
able to inject an image tag

476
00:16:52,959 --> 00:16:56,000
and the user is using internet explorer

477
00:16:56,000 --> 00:16:57,839
and i don't mean edge i mean internet

478
00:16:57,839 --> 00:16:59,120
explorer itself

479
00:16:59,120 --> 00:17:03,360
if you use the file uri handler

480
00:17:03,360 --> 00:17:06,720
it will send a request

481
00:17:06,720 --> 00:17:09,280
to the server try and grab this file but

482
00:17:09,280 --> 00:17:10,880
internet explorer

483
00:17:10,880 --> 00:17:13,599
sees this as a unc path so for those of

484
00:17:13,599 --> 00:17:14,640
you who are more familiar with

485
00:17:14,640 --> 00:17:17,280
penetration testing and things like that

486
00:17:17,280 --> 00:17:19,119
if the attacker server is listening for

487
00:17:19,119 --> 00:17:21,119
this it can send a response

488
00:17:21,119 --> 00:17:25,280
and actually grab the local users

489
00:17:25,280 --> 00:17:28,880
net ntlm hash from their system

490
00:17:28,880 --> 00:17:30,240
and then have access to at least their

491
00:17:30,240 --> 00:17:32,080
local system if not their

492
00:17:32,080 --> 00:17:35,280
entire network um it's a very scary

493
00:17:35,280 --> 00:17:36,160
attack that i

494
00:17:36,160 --> 00:17:37,760
covered more in depth in another talk as

495
00:17:37,760 --> 00:17:39,440
well as some blog posts

496
00:17:39,440 --> 00:17:42,000
but at the core of it just by by

497
00:17:42,000 --> 00:17:43,360
injecting html

498
00:17:43,360 --> 00:17:46,240
or via crosstalk scripting or a

499
00:17:46,240 --> 00:17:47,360
man-of-the-middle attack

500
00:17:47,360 --> 00:17:49,120
someone could get your username and

501
00:17:49,120 --> 00:17:50,799
password for your computer not just

502
00:17:50,799 --> 00:17:54,160
that specific web application

503
00:17:55,840 --> 00:17:58,880
so let's do another demo this one is

504
00:17:58,880 --> 00:17:59,360
actually

505
00:17:59,360 --> 00:18:02,000
stealing passwords so we're not going to

506
00:18:02,000 --> 00:18:03,679
trick a user into typing their username

507
00:18:03,679 --> 00:18:04,880
and password we're actually going to

508
00:18:04,880 --> 00:18:08,000
steal passwords that they already have

509
00:18:08,000 --> 00:18:10,720
so in this example we have a basic login

510
00:18:10,720 --> 00:18:11,360
page

511
00:18:11,360 --> 00:18:14,400
with my my beautiful css skills

512
00:18:14,400 --> 00:18:17,360
so on this login page at the very bottom

513
00:18:17,360 --> 00:18:18,799
it's a little harder to see but there's

514
00:18:18,799 --> 00:18:19,200
a

515
00:18:19,200 --> 00:18:20,799
text that says your current language is

516
00:18:20,799 --> 00:18:22,480
blank

517
00:18:22,480 --> 00:18:24,640
as it turns out so we can change our

518
00:18:24,640 --> 00:18:26,240
language this website supports multiple

519
00:18:26,240 --> 00:18:26,880
languages

520
00:18:26,880 --> 00:18:30,640
like en and sp um

521
00:18:30,640 --> 00:18:32,400
but it looks like it's reflecting this

522
00:18:32,400 --> 00:18:34,240
value straight to the page

523
00:18:34,240 --> 00:18:36,799
so if we try alert one as our language

524
00:18:36,799 --> 00:18:37,919
the pop-up occurs

525
00:18:37,919 --> 00:18:39,679
and we we know that this is vulnerable

526
00:18:39,679 --> 00:18:41,600
to cross-site scripting

527
00:18:41,600 --> 00:18:43,440
well we're not too worried about that

528
00:18:43,440 --> 00:18:44,799
right now we'll log into the web

529
00:18:44,799 --> 00:18:45,440
application

530
00:18:45,440 --> 00:18:48,559
as our admin user and i will type the

531
00:18:48,559 --> 00:18:50,799
password correctly

532
00:18:50,799 --> 00:18:52,720
so we're going to save our password it's

533
00:18:52,720 --> 00:18:54,240
a complicated password we don't want to

534
00:18:54,240 --> 00:18:55,360
worry about

535
00:18:55,360 --> 00:18:58,559
remembering it later so

536
00:18:58,559 --> 00:19:00,640
next time we go to our login page it

537
00:19:00,640 --> 00:19:02,240
automatically populates because we saved

538
00:19:02,240 --> 00:19:03,440
it in firefox

539
00:19:03,440 --> 00:19:07,360
awesome so what we can do

540
00:19:07,360 --> 00:19:10,799
as an attacker we could build a

541
00:19:10,799 --> 00:19:12,960
cross-site scripting payload that will

542
00:19:12,960 --> 00:19:14,160
build a second

543
00:19:14,160 --> 00:19:17,200
form with a username and a password

544
00:19:17,200 --> 00:19:18,000
field

545
00:19:18,000 --> 00:19:20,799
and it will populate those values using

546
00:19:20,799 --> 00:19:23,280
the existing username and password field

547
00:19:23,280 --> 00:19:26,160
so since firefox automatically populated

548
00:19:26,160 --> 00:19:28,799
those first two fields for us

549
00:19:28,799 --> 00:19:31,280
as an attacker we can grab those two

550
00:19:31,280 --> 00:19:33,360
populate our malicious form

551
00:19:33,360 --> 00:19:36,640
and then send it off to our sorry

552
00:19:36,640 --> 00:19:39,120
it can grab those two values from

553
00:19:39,120 --> 00:19:39,919
firefox

554
00:19:39,919 --> 00:19:41,840
populating those forms and then send

555
00:19:41,840 --> 00:19:43,120
them off in a get request

556
00:19:43,120 --> 00:19:46,480
to our attacker control server so as you

557
00:19:46,480 --> 00:19:46,799
see

558
00:19:46,799 --> 00:19:50,840
it grabs it sets the username equal to

559
00:19:50,840 --> 00:19:52,799
getdocument.getelementbyid

560
00:19:52,799 --> 00:19:55,679
the pass to getelementid password and

561
00:19:55,679 --> 00:19:56,000
then

562
00:19:56,000 --> 00:19:58,400
creates a new image which will just send

563
00:19:58,400 --> 00:19:59,360
a get request

564
00:19:59,360 --> 00:20:02,080
to that attacker controlled server it's

565
00:20:02,080 --> 00:20:04,159
an easy way to send that get request

566
00:20:04,159 --> 00:20:05,919
um whether or not the image exists does

567
00:20:05,919 --> 00:20:07,360
not matter

568
00:20:07,360 --> 00:20:10,400
so i convert that page i url encode that

569
00:20:10,400 --> 00:20:11,360
page

570
00:20:11,360 --> 00:20:12,960
that malicious payload to make my life

571
00:20:12,960 --> 00:20:15,120
easier um

572
00:20:15,120 --> 00:20:17,360
and then if we set the language to that

573
00:20:17,360 --> 00:20:19,280
malicious payload so

574
00:20:19,280 --> 00:20:21,440
maybe we send this to an admin user in

575
00:20:21,440 --> 00:20:23,039
an email

576
00:20:23,039 --> 00:20:24,799
it looks just fine but on our attacker

577
00:20:24,799 --> 00:20:26,799
controlled server we actually get

578
00:20:26,799 --> 00:20:30,000
a post request or a get request

579
00:20:30,000 --> 00:20:30,880
containing

580
00:20:30,880 --> 00:20:34,480
those stored admin and password values

581
00:20:34,480 --> 00:20:37,120
and if we scroll down on the page that

582
00:20:37,120 --> 00:20:38,159
they're at

583
00:20:38,159 --> 00:20:41,440
we'll see our newly created body tag

584
00:20:41,440 --> 00:20:42,080
which

585
00:20:42,080 --> 00:20:44,000
is technically not valid html but will

586
00:20:44,000 --> 00:20:45,840
work in a lot of browsers

587
00:20:45,840 --> 00:20:48,159
that calls that steel creds method for

588
00:20:48,159 --> 00:20:49,120
us

589
00:20:49,120 --> 00:20:52,959
and sends it off to our attacker

590
00:20:54,480 --> 00:20:56,960
and if we see we stored those passwords

591
00:20:56,960 --> 00:20:58,559
for the

592
00:20:58,559 --> 00:21:04,480
admin user for that localhost 8123 page

593
00:21:07,280 --> 00:21:10,559
so and again i know this is a lot of

594
00:21:10,559 --> 00:21:11,440
payloads

595
00:21:11,440 --> 00:21:16,240
i will share these payloads and slides

596
00:21:16,240 --> 00:21:18,640
but hopefully you can use at least one

597
00:21:18,640 --> 00:21:20,480
of these in a real life attack or just

598
00:21:20,480 --> 00:21:22,559
demonstrating the severity of

599
00:21:22,559 --> 00:21:26,000
this formidability so another one

600
00:21:26,000 --> 00:21:27,679
that i haven't seen that often

601
00:21:27,679 --> 00:21:30,000
personally um and i think i've only used

602
00:21:30,000 --> 00:21:32,559
in demonstrations is you can actually

603
00:21:32,559 --> 00:21:33,039
build

604
00:21:33,039 --> 00:21:36,320
a cross-site scripting key logger so

605
00:21:36,320 --> 00:21:38,240
imagine in that last example if instead

606
00:21:38,240 --> 00:21:40,559
of we if the admin hadn't saved his

607
00:21:40,559 --> 00:21:41,520
credentials

608
00:21:41,520 --> 00:21:43,039
what if we sent him a link to the login

609
00:21:43,039 --> 00:21:45,039
page containing a keylogger

610
00:21:45,039 --> 00:21:47,200
then when he typed in his username and

611
00:21:47,200 --> 00:21:48,080
his password

612
00:21:48,080 --> 00:21:49,600
it would be sent to our attacker

613
00:21:49,600 --> 00:21:51,600
controlled server

614
00:21:51,600 --> 00:21:55,520
so the very top image shows the

615
00:21:55,520 --> 00:21:57,760
malicious javascript that we would

616
00:21:57,760 --> 00:21:58,799
uncheck

617
00:21:58,799 --> 00:22:02,159
every time a key is pressed it grabs the

618
00:22:02,159 --> 00:22:02,960
event

619
00:22:02,960 --> 00:22:05,360
it grabs the character code for that key

620
00:22:05,360 --> 00:22:07,200
and it sends a new

621
00:22:07,200 --> 00:22:10,000
creates a new post request sending that

622
00:22:10,000 --> 00:22:11,360
key as a parameter

623
00:22:11,360 --> 00:22:13,960
to our attacker control server in

624
00:22:13,960 --> 00:22:16,559
keylog.php

625
00:22:16,559 --> 00:22:19,760
in the bottom left screenshot we see

626
00:22:19,760 --> 00:22:20,240
keylog

627
00:22:20,240 --> 00:22:24,080
php which just if it receives a post

628
00:22:24,080 --> 00:22:24,880
request

629
00:22:24,880 --> 00:22:27,280
containing the key parameter it will add

630
00:22:27,280 --> 00:22:29,120
that to a text file

631
00:22:29,120 --> 00:22:32,480
so every time someone hits a key

632
00:22:32,480 --> 00:22:34,240
on a page containing a malicious payload

633
00:22:34,240 --> 00:22:36,720
it will be sent to our attacker

634
00:22:36,720 --> 00:22:38,400
so it's a little harder to see in the

635
00:22:38,400 --> 00:22:39,840
bottom right but

636
00:22:39,840 --> 00:22:42,720
if we had a page that had a maybe a

637
00:22:42,720 --> 00:22:45,360
message board with a name and a message

638
00:22:45,360 --> 00:22:48,120
um every time they typed a character so

639
00:22:48,120 --> 00:22:49,679
p-e-n-t-e-s-t

640
00:22:49,679 --> 00:22:50,960
it would actually end up in that

641
00:22:50,960 --> 00:22:52,720
data.txt file

642
00:22:52,720 --> 00:22:55,840
on our attacker control server

643
00:22:55,840 --> 00:22:58,000
this is going to be the most useful on

644
00:22:58,000 --> 00:23:00,159
login pages where you can grab usernames

645
00:23:00,159 --> 00:23:01,360
and passwords

646
00:23:01,360 --> 00:23:03,360
but it could still be used on i mean a

647
00:23:03,360 --> 00:23:05,760
myriad of other pages imagine

648
00:23:05,760 --> 00:23:09,039
a firewall in which you found cross-site

649
00:23:09,039 --> 00:23:10,480
scripting

650
00:23:10,480 --> 00:23:11,919
while it'd be better to do a more

651
00:23:11,919 --> 00:23:13,760
malicious attack you could at least find

652
00:23:13,760 --> 00:23:14,880
out

653
00:23:14,880 --> 00:23:17,200
what settings they're configuring what

654
00:23:17,200 --> 00:23:18,880
ip addresses their internal network

655
00:23:18,880 --> 00:23:20,320
devices are using

656
00:23:20,320 --> 00:23:22,400
um and potentially see flaws things like

657
00:23:22,400 --> 00:23:23,919
that

658
00:23:23,919 --> 00:23:27,200
so it's a it's a stealthier version of

659
00:23:27,200 --> 00:23:28,640
some of the previous attacks but it

660
00:23:28,640 --> 00:23:30,000
still allows you to grab some fairly

661
00:23:30,000 --> 00:23:33,039
sensitive information

662
00:23:33,919 --> 00:23:37,840
so in that same vein if we don't want to

663
00:23:37,840 --> 00:23:40,559
grab the keys one by one it's still

664
00:23:40,559 --> 00:23:41,919
possible to grab

665
00:23:41,919 --> 00:23:45,440
other sensitive information so the

666
00:23:45,440 --> 00:23:49,120
javascript on the left is an example of

667
00:23:49,120 --> 00:23:51,679
grabbing all of the html of the current

668
00:23:51,679 --> 00:23:52,480
page

669
00:23:52,480 --> 00:23:54,159
and then sending it off to our attacker

670
00:23:54,159 --> 00:23:56,320
controlled server

671
00:23:56,320 --> 00:23:58,000
whereas the screenshot on the right is

672
00:23:58,000 --> 00:24:00,000
handling a post request containing an

673
00:24:00,000 --> 00:24:00,960
image

674
00:24:00,960 --> 00:24:02,400
um and there's actually a lot of

675
00:24:02,400 --> 00:24:04,000
references in the

676
00:24:04,000 --> 00:24:06,159
speaker notes part of this slide but

677
00:24:06,159 --> 00:24:08,000
there are existing tools that will

678
00:24:08,000 --> 00:24:08,720
convert

679
00:24:08,720 --> 00:24:12,159
an html page to a web canvas

680
00:24:12,159 --> 00:24:14,080
which you could then send as a ping

681
00:24:14,080 --> 00:24:16,240
image

682
00:24:16,240 --> 00:24:19,279
the biggest uses of these payloads are

683
00:24:19,279 --> 00:24:20,880
grabbing sensitive information from

684
00:24:20,880 --> 00:24:23,679
pages that you necessarily can't see

685
00:24:23,679 --> 00:24:26,000
so imagine a cross-site scripting

686
00:24:26,000 --> 00:24:27,200
vulnerability

687
00:24:27,200 --> 00:24:30,400
on a banking website

688
00:24:30,400 --> 00:24:32,400
while you may not be able to grab the

689
00:24:32,400 --> 00:24:33,919
login information

690
00:24:33,919 --> 00:24:35,760
if you were to send someone one of your

691
00:24:35,760 --> 00:24:37,520
payloads or if they were to run across

692
00:24:37,520 --> 00:24:38,880
one of your stored payloads

693
00:24:38,880 --> 00:24:40,720
you could potentially grab their account

694
00:24:40,720 --> 00:24:42,159
balances

695
00:24:42,159 --> 00:24:45,279
their account numbers um maybe their

696
00:24:45,279 --> 00:24:46,000
address and their

697
00:24:46,000 --> 00:24:48,799
name things like that or if you're

698
00:24:48,799 --> 00:24:50,559
attacking maybe a router

699
00:24:50,559 --> 00:24:52,720
maybe you can't log into the application

700
00:24:52,720 --> 00:24:54,320
but you can see the administrative

701
00:24:54,320 --> 00:24:55,279
console

702
00:24:55,279 --> 00:24:59,520
see what settings they're using what

703
00:24:59,520 --> 00:25:01,840
services are enabled or disabled things

704
00:25:01,840 --> 00:25:03,039
like that

705
00:25:03,039 --> 00:25:05,120
so this attack you want to use on really

706
00:25:05,120 --> 00:25:07,120
anywhere any application where there may

707
00:25:07,120 --> 00:25:08,720
be sensitive information that you want

708
00:25:08,720 --> 00:25:09,520
to get

709
00:25:09,520 --> 00:25:12,000
but you are unable or unwilling to sort

710
00:25:12,000 --> 00:25:13,919
of directly attack the login page

711
00:25:13,919 --> 00:25:15,120
directly attack

712
00:25:15,120 --> 00:25:18,719
cookies things like that

713
00:25:20,000 --> 00:25:23,039
so another cross-site scripting attack

714
00:25:23,039 --> 00:25:24,159
that i

715
00:25:24,159 --> 00:25:26,640
i have used personally and really enjoy

716
00:25:26,640 --> 00:25:30,640
is bypassing sea surf protections

717
00:25:30,640 --> 00:25:32,960
so a brief introduction sea surf is

718
00:25:32,960 --> 00:25:35,200
cross site request forgery

719
00:25:35,200 --> 00:25:38,159
basically it's sending a request from

720
00:25:38,159 --> 00:25:39,440
site a

721
00:25:39,440 --> 00:25:42,159
to site b to do something even though

722
00:25:42,159 --> 00:25:45,279
you necessarily shouldn't be allowed to

723
00:25:45,279 --> 00:25:47,360
the most common example would be if you

724
00:25:47,360 --> 00:25:49,840
were logged into amazon.com

725
00:25:49,840 --> 00:25:52,880
and there were no c surf protections

726
00:25:52,880 --> 00:25:55,360
i could send you to a malicious website

727
00:25:55,360 --> 00:25:56,080
that

728
00:25:56,080 --> 00:25:57,600
in the background would use your

729
00:25:57,600 --> 00:25:59,440
authenticated amazon session

730
00:25:59,440 --> 00:26:02,640
to purchase an item and ship it to me

731
00:26:02,640 --> 00:26:04,559
well there are plenty of defenses

732
00:26:04,559 --> 00:26:05,919
against cserv

733
00:26:05,919 --> 00:26:07,440
that sort of protect against this

734
00:26:07,440 --> 00:26:10,559
there's attributes in the html

735
00:26:10,559 --> 00:26:13,440
c-serve tokens things like that well for

736
00:26:13,440 --> 00:26:15,120
most of these cross-site scripting can

737
00:26:15,120 --> 00:26:16,559
actually defeat them

738
00:26:16,559 --> 00:26:19,360
so what you can do is with your first

739
00:26:19,360 --> 00:26:20,960
cross-site scripting

740
00:26:20,960 --> 00:26:23,120
sort of your first stage of your payload

741
00:26:23,120 --> 00:26:24,720
you can send a get request

742
00:26:24,720 --> 00:26:26,960
to that page you want to attack so in

743
00:26:26,960 --> 00:26:28,400
that previous example

744
00:26:28,400 --> 00:26:31,760
the amazon you know click once page

745
00:26:31,760 --> 00:26:34,799
grab the html from that page

746
00:26:34,799 --> 00:26:37,520
parse it out look for your c sort token

747
00:26:37,520 --> 00:26:38,799
parameter

748
00:26:38,799 --> 00:26:41,200
and then store it in a variable so that

749
00:26:41,200 --> 00:26:43,440
now the rest of your payload you can

750
00:26:43,440 --> 00:26:45,200
send that c-surf request

751
00:26:45,200 --> 00:26:46,880
having defeated all of the protections

752
00:26:46,880 --> 00:26:52,400
that they built into that application

753
00:26:52,400 --> 00:26:54,640
so

754
00:26:55,679 --> 00:26:58,799
this is actually a a demo that is

755
00:26:58,799 --> 00:27:00,799
based on an attack that i was able to

756
00:27:00,799 --> 00:27:02,240
perform during an engagement

757
00:27:02,240 --> 00:27:04,880
engagement i found a reflective

758
00:27:04,880 --> 00:27:06,080
crosstake scripting

759
00:27:06,080 --> 00:27:10,400
vulnerability on an unauthenticated page

760
00:27:10,400 --> 00:27:12,880
and they stored cross-site scripting

761
00:27:12,880 --> 00:27:15,200
vulnerability on an authenticated page

762
00:27:15,200 --> 00:27:18,559
that had sea surf protections so what i

763
00:27:18,559 --> 00:27:20,000
was able to do was

764
00:27:20,000 --> 00:27:22,799
utilize the pre-off reflected cross-site

765
00:27:22,799 --> 00:27:23,919
scripting

766
00:27:23,919 --> 00:27:26,960
payload to grab the authenticated

767
00:27:26,960 --> 00:27:29,039
c-serve token and make a post

768
00:27:29,039 --> 00:27:32,840
under the session of the

769
00:27:32,840 --> 00:27:35,840
target

770
00:27:36,240 --> 00:27:39,600
so again we have our

771
00:27:39,600 --> 00:27:42,640
very beautiful basic login page we also

772
00:27:42,640 --> 00:27:43,679
have that same

773
00:27:43,679 --> 00:27:47,200
search page we've seen before there's a

774
00:27:47,200 --> 00:27:49,120
comments section so a guest book things

775
00:27:49,120 --> 00:27:51,039
like that maybe an internet forum

776
00:27:51,039 --> 00:27:53,360
that requires authentication so we're

777
00:27:53,360 --> 00:27:54,720
not able to post to it

778
00:27:54,720 --> 00:27:58,720
as an unauthentic human attacker so

779
00:27:58,720 --> 00:28:02,240
we login as our admin user and we can

780
00:28:02,240 --> 00:28:02,640
see

781
00:28:02,640 --> 00:28:05,919
the section there are no comments at the

782
00:28:05,919 --> 00:28:06,480
time

783
00:28:06,480 --> 00:28:08,399
but it just shows your username or your

784
00:28:08,399 --> 00:28:10,799
name and your question or your comment

785
00:28:10,799 --> 00:28:14,000
in this guestbook or this forum

786
00:28:14,000 --> 00:28:17,440
so again we check our search query page

787
00:28:17,440 --> 00:28:20,559
it reflects tests so we will check it

788
00:28:20,559 --> 00:28:22,240
for cross-site scripting again

789
00:28:22,240 --> 00:28:24,640
we'll use alert one standard you know

790
00:28:24,640 --> 00:28:25,760
basic payload

791
00:28:25,760 --> 00:28:28,320
it does fire off so the unauthenticated

792
00:28:28,320 --> 00:28:30,159
search page is vulnerable to cross-site

793
00:28:30,159 --> 00:28:31,840
scripting

794
00:28:31,840 --> 00:28:34,480
so if we take a quick look at the

795
00:28:34,480 --> 00:28:35,600
comments page

796
00:28:35,600 --> 00:28:37,600
it does require a valid session it says

797
00:28:37,600 --> 00:28:39,679
you must be logged in

798
00:28:39,679 --> 00:28:42,000
so we know that and then if we scroll

799
00:28:42,000 --> 00:28:42,799
down

800
00:28:42,799 --> 00:28:46,960
it actually builds a shot 256 hash

801
00:28:46,960 --> 00:28:50,320
of our session id with the salt of

802
00:28:50,320 --> 00:28:51,200
secret

803
00:28:51,200 --> 00:28:53,840
and adds that as a c surf token to all

804
00:28:53,840 --> 00:28:54,320
of the

805
00:28:54,320 --> 00:28:57,679
post requests on that comment section

806
00:28:57,679 --> 00:29:01,200
so we would need a valid session

807
00:29:01,200 --> 00:29:03,279
we need to hash that and we need then

808
00:29:03,279 --> 00:29:04,799
we'll be able to post to that comments

809
00:29:04,799 --> 00:29:05,840
section

810
00:29:05,840 --> 00:29:07,840
so even if it was exposed to the

811
00:29:07,840 --> 00:29:08,880
internet we're not going to be able to

812
00:29:08,880 --> 00:29:10,399
make these post requests

813
00:29:10,399 --> 00:29:14,080
as you can see this is a pretty long um

814
00:29:14,080 --> 00:29:15,919
value we're not going to be able to

815
00:29:15,919 --> 00:29:17,440
guess it that easily

816
00:29:17,440 --> 00:29:19,279
but as an authenticated user we can just

817
00:29:19,279 --> 00:29:23,120
post tests and it works fine

818
00:29:23,279 --> 00:29:27,360
so what we can do is we can utilize

819
00:29:27,360 --> 00:29:30,080
that pre-authenticated cross-site

820
00:29:30,080 --> 00:29:31,679
scripting vulnerability

821
00:29:31,679 --> 00:29:34,480
on the search page to try and grab the

822
00:29:34,480 --> 00:29:35,919
sea surf token

823
00:29:35,919 --> 00:29:38,320
from the comments section and then use

824
00:29:38,320 --> 00:29:40,159
that to post our malicious

825
00:29:40,159 --> 00:29:42,640
stored cross-site scripting payload and

826
00:29:42,640 --> 00:29:44,960
then this payload would be

827
00:29:44,960 --> 00:29:47,039
executed on all users browsers instead

828
00:29:47,039 --> 00:29:49,200
of just the one we targeted

829
00:29:49,200 --> 00:29:51,679
so this payload reads the body of the

830
00:29:51,679 --> 00:29:53,120
document

831
00:29:53,120 --> 00:29:54,960
this is the same code from a previous

832
00:29:54,960 --> 00:29:56,640
slide it

833
00:29:56,640 --> 00:29:59,520
reads the document it parses the request

834
00:29:59,520 --> 00:30:00,399
type

835
00:30:00,399 --> 00:30:04,159
it looks for the element called c

836
00:30:04,159 --> 00:30:08,480
surf token inside of the response

837
00:30:08,480 --> 00:30:10,399
and then it returns that value to use

838
00:30:10,399 --> 00:30:13,199
later in the attack

839
00:30:14,320 --> 00:30:16,639
oops

840
00:30:17,760 --> 00:30:21,679
all right excellent sorry about that

841
00:30:21,679 --> 00:30:25,440
okay so then it will

842
00:30:25,440 --> 00:30:27,520
take it will send this initial request

843
00:30:27,520 --> 00:30:28,720
that we built

844
00:30:28,720 --> 00:30:33,520
send it to the target server and

845
00:30:33,520 --> 00:30:35,679
sorry it sends a get request to the

846
00:30:35,679 --> 00:30:37,520
comments section reads that response and

847
00:30:37,520 --> 00:30:38,640
then forces out

848
00:30:38,640 --> 00:30:41,919
that c serve token

849
00:30:41,919 --> 00:30:43,919
oh if i managed it okay i did not

850
00:30:43,919 --> 00:30:44,960
excellent

851
00:30:44,960 --> 00:30:48,399
so again this just creates that request

852
00:30:48,399 --> 00:30:51,840
i said grabs the token

853
00:30:58,320 --> 00:31:01,600
so once it sends that request

854
00:31:01,600 --> 00:31:05,039
reads the body and grabs that token

855
00:31:05,039 --> 00:31:07,120
it will then build a second request

856
00:31:07,120 --> 00:31:08,720
using this token

857
00:31:08,720 --> 00:31:11,799
to send to a post request to that

858
00:31:11,799 --> 00:31:14,080
commons.php page

859
00:31:14,080 --> 00:31:16,000
now remember that we are targeting a

860
00:31:16,000 --> 00:31:17,120
logged in user

861
00:31:17,120 --> 00:31:20,159
so if we were not authenticated an

862
00:31:20,159 --> 00:31:22,000
attacker would not be able to

863
00:31:22,000 --> 00:31:23,440
grab the c surf token because it would

864
00:31:23,440 --> 00:31:25,600
show that he must be authorized to

865
00:31:25,600 --> 00:31:28,960
comment message but

866
00:31:28,960 --> 00:31:30,399
since we're targeting the authenticated

867
00:31:30,399 --> 00:31:32,080
user we're able to

868
00:31:32,080 --> 00:31:35,440
send the cross site request

869
00:31:35,440 --> 00:31:40,240
as the admin in this case but any user

870
00:31:40,480 --> 00:31:44,240
so then if we look at the

871
00:31:44,399 --> 00:31:46,559
so then we have our if we use a payload

872
00:31:46,559 --> 00:31:49,039
in this case

873
00:31:49,279 --> 00:31:50,640
okay now i'm just going to load that

874
00:31:50,640 --> 00:31:52,720
external javascript file so

875
00:31:52,720 --> 00:31:55,039
this will load an external malicious

876
00:31:55,039 --> 00:31:56,799
payload like i showed in that first

877
00:31:56,799 --> 00:32:00,159
slide with that exploit user sees

878
00:32:00,159 --> 00:32:00,799
nothing

879
00:32:00,799 --> 00:32:02,960
but if we go back to the comments.php

880
00:32:02,960 --> 00:32:04,000
page

881
00:32:04,000 --> 00:32:05,919
there's now a stored cross-site

882
00:32:05,919 --> 00:32:07,279
scripting attack

883
00:32:07,279 --> 00:32:09,440
um which is right there it's from the

884
00:32:09,440 --> 00:32:11,120
user c-serve test

885
00:32:11,120 --> 00:32:13,279
um which we named our our malicious user

886
00:32:13,279 --> 00:32:14,480
in this case

887
00:32:14,480 --> 00:32:16,559
um and if we take a look at that c surf

888
00:32:16,559 --> 00:32:18,080
test user

889
00:32:18,080 --> 00:32:20,080
their message was indeed script alert

890
00:32:20,080 --> 00:32:22,080
one but it could have been any of these

891
00:32:22,080 --> 00:32:22,399
more

892
00:32:22,399 --> 00:32:24,960
malicious payloads um that i showed

893
00:32:24,960 --> 00:32:25,919
earlier

894
00:32:25,919 --> 00:32:27,519
so if we scroll back down on the

895
00:32:27,519 --> 00:32:29,120
exploit.js file

896
00:32:29,120 --> 00:32:31,120
if we take a look it builds a new

897
00:32:31,120 --> 00:32:32,240
message

898
00:32:32,240 --> 00:32:34,960
where the name is sea server token

899
00:32:34,960 --> 00:32:36,399
c-serve test

900
00:32:36,399 --> 00:32:38,559
the comment parameter is script alert

901
00:32:38,559 --> 00:32:39,440
one and

902
00:32:39,440 --> 00:32:41,360
the c-serve token is that token that we

903
00:32:41,360 --> 00:32:42,640
stole earlier

904
00:32:42,640 --> 00:32:45,360
it then sends this as a post request to

905
00:32:45,360 --> 00:32:47,279
the common.php page

906
00:32:47,279 --> 00:32:50,320
storing our malicious payload so now we

907
00:32:50,320 --> 00:32:51,360
managed to

908
00:32:51,360 --> 00:32:55,200
upgrade our moderately severe reflected

909
00:32:55,200 --> 00:32:56,559
cross-site scripting

910
00:32:56,559 --> 00:32:59,440
payload to a more severe stored

911
00:32:59,440 --> 00:33:00,960
cross-site scripting payload

912
00:33:00,960 --> 00:33:03,600
and we bypass sea surf protection in the

913
00:33:03,600 --> 00:33:06,080
process

914
00:33:08,399 --> 00:33:11,840
don't need that again so

915
00:33:15,600 --> 00:33:18,320
outside of these generic crossing

916
00:33:18,320 --> 00:33:20,559
scripting payloads

917
00:33:20,559 --> 00:33:24,000
the even higher value exploits

918
00:33:24,000 --> 00:33:26,640
are going to come from application

919
00:33:26,640 --> 00:33:29,360
specific

920
00:33:29,840 --> 00:33:32,960
so in this example it's a very basic

921
00:33:32,960 --> 00:33:34,000
example

922
00:33:34,000 --> 00:33:36,960
but it's the damn vulnerable web app

923
00:33:36,960 --> 00:33:38,320
guest book

924
00:33:38,320 --> 00:33:41,039
so what an attacker could do for this

925
00:33:41,039 --> 00:33:43,039
would be to create a new request

926
00:33:43,039 --> 00:33:45,600
and post to this guestbook with their

927
00:33:45,600 --> 00:33:48,399
cross-site scripting payload

928
00:33:48,399 --> 00:33:50,559
now this specific example isn't a huge

929
00:33:50,559 --> 00:33:51,679
deal but

930
00:33:51,679 --> 00:33:54,000
think of anything that you can do in a

931
00:33:54,000 --> 00:33:56,480
web application

932
00:33:56,480 --> 00:33:58,320
if that web application was vulnerable

933
00:33:58,320 --> 00:33:59,679
to cross-site scripting

934
00:33:59,679 --> 00:34:01,440
there's a good chance that an attacker

935
00:34:01,440 --> 00:34:03,600
could do those same things

936
00:34:03,600 --> 00:34:06,960
so if ec2 was vulnerable to cross-site

937
00:34:06,960 --> 00:34:08,639
scripting if your amazon web console is

938
00:34:08,639 --> 00:34:09,520
vulnerable

939
00:34:09,520 --> 00:34:11,679
an attacker could potentially spin up

940
00:34:11,679 --> 00:34:15,119
new ec2 instances for your user

941
00:34:15,119 --> 00:34:16,719
even if they can't access them they're

942
00:34:16,719 --> 00:34:18,839
costing you hundreds thousands of

943
00:34:18,839 --> 00:34:20,480
dollars

944
00:34:20,480 --> 00:34:22,560
if an attacker finds cross-site

945
00:34:22,560 --> 00:34:24,079
scripting in your router

946
00:34:24,079 --> 00:34:26,639
maybe they can use that to change your

947
00:34:26,639 --> 00:34:28,560
wireless password or

948
00:34:28,560 --> 00:34:30,719
change your administrative login things

949
00:34:30,719 --> 00:34:32,960
like that

950
00:34:32,960 --> 00:34:36,560
so here is a great

951
00:34:36,560 --> 00:34:40,399
github repository of a few fairly common

952
00:34:40,399 --> 00:34:42,320
weapons processed for company loads for

953
00:34:42,320 --> 00:34:44,159
specific applications

954
00:34:44,159 --> 00:34:46,800
so if you look on the right um the most

955
00:34:46,800 --> 00:34:48,079
common ones are actually

956
00:34:48,079 --> 00:34:51,520
cms systems um wordpress

957
00:34:51,520 --> 00:34:55,040
drupal things like that if you are

958
00:34:55,040 --> 00:34:57,440
familiar with these applications

959
00:34:57,440 --> 00:34:59,680
you may have seen that they have been

960
00:34:59,680 --> 00:35:01,200
vulnerable to cross-site scripting once

961
00:35:01,200 --> 00:35:02,720
or twice in the past

962
00:35:02,720 --> 00:35:05,040
if you're not these are fairly common

963
00:35:05,040 --> 00:35:07,200
applications that allow users to

964
00:35:07,200 --> 00:35:09,200
more quickly or more easily sort of

965
00:35:09,200 --> 00:35:11,280
build their websites out

966
00:35:11,280 --> 00:35:13,119
well if you were to find cross-site

967
00:35:13,119 --> 00:35:14,480
scripting on

968
00:35:14,480 --> 00:35:18,800
or say wordpress you could use that

969
00:35:18,800 --> 00:35:20,640
cross-site scripting vulnerability to do

970
00:35:20,640 --> 00:35:22,720
things like add a new administrative

971
00:35:22,720 --> 00:35:23,839
user

972
00:35:23,839 --> 00:35:26,880
post on behalf of existing users

973
00:35:26,880 --> 00:35:29,599
things like that so the trusted tech

974
00:35:29,599 --> 00:35:31,680
blog goes into a longer example of this

975
00:35:31,680 --> 00:35:32,560
post

976
00:35:32,560 --> 00:35:35,119
but if you look on the top right there's

977
00:35:35,119 --> 00:35:35,760
a

978
00:35:35,760 --> 00:35:38,880
stored there's a

979
00:35:38,880 --> 00:35:42,079
a post called success post with a stored

980
00:35:42,079 --> 00:35:44,640
cross-site scripting vulnerability that

981
00:35:44,640 --> 00:35:46,160
actually

982
00:35:46,160 --> 00:35:48,640
grabs a non-string which is required in

983
00:35:48,640 --> 00:35:50,320
wordpress to

984
00:35:50,320 --> 00:35:53,520
basically make any of the post requests

985
00:35:53,520 --> 00:35:55,760
you might make as a normal user

986
00:35:55,760 --> 00:35:58,720
grabs that sub string and then executes

987
00:35:58,720 --> 00:36:00,720
a payload for add user

988
00:36:00,720 --> 00:36:03,119
so it sends a post request to the user's

989
00:36:03,119 --> 00:36:04,400
add new page

990
00:36:04,400 --> 00:36:06,640
and adds a new malicious call a new

991
00:36:06,640 --> 00:36:08,160
malicious user called

992
00:36:08,160 --> 00:36:11,440
sneaky user so now an attacker can

993
00:36:11,440 --> 00:36:13,599
log into your wordpress application

994
00:36:13,599 --> 00:36:15,280
potentially as an admin

995
00:36:15,280 --> 00:36:18,079
and use that to change your settings

996
00:36:18,079 --> 00:36:18,560
makes

997
00:36:18,560 --> 00:36:22,560
make posts or whatnot additionally

998
00:36:22,560 --> 00:36:25,040
if they are able to use this to become

999
00:36:25,040 --> 00:36:27,200
an administrative user of your wordpress

1000
00:36:27,200 --> 00:36:29,200
application they could potentially then

1001
00:36:29,200 --> 00:36:30,720
use that to escalate to

1002
00:36:30,720 --> 00:36:34,000
a system level console on your

1003
00:36:34,000 --> 00:36:36,720
server by utilizing something like a php

1004
00:36:36,720 --> 00:36:39,280
web shell things like that

1005
00:36:39,280 --> 00:36:43,040
so what went from a moderate to severe

1006
00:36:43,040 --> 00:36:45,119
cross-site scripting vulnerability

1007
00:36:45,119 --> 00:36:46,079
resulted in

1008
00:36:46,079 --> 00:36:49,440
them having shell access to your server

1009
00:36:49,440 --> 00:36:51,359
and the second bullet is just a quick

1010
00:36:51,359 --> 00:36:52,720
example of how many vulnerabilities

1011
00:36:52,720 --> 00:36:54,079
wordpress has had

1012
00:36:54,079 --> 00:36:56,800
um i do like wordpress people knocking a

1013
00:36:56,800 --> 00:36:57,359
lot but

1014
00:36:57,359 --> 00:36:58,960
there have been plenty of products like

1015
00:36:58,960 --> 00:37:00,560
tripping vulnerabilities in the past

1016
00:37:00,560 --> 00:37:03,920
that could have caused plenty of people

1017
00:37:03,920 --> 00:37:05,839
to lose servers lose accounts things

1018
00:37:05,839 --> 00:37:09,839
like that

1019
00:37:12,640 --> 00:37:17,680
oh there we go yep okay so

1020
00:37:19,599 --> 00:37:21,839
i don't want to go to and depth but i

1021
00:37:21,839 --> 00:37:23,760
did want to touch on a to

1022
00:37:23,760 --> 00:37:26,960
a tool called beef so

1023
00:37:26,960 --> 00:37:31,440
beef is the um

1024
00:37:31,440 --> 00:37:33,119
now i'm forgetting what the second e

1025
00:37:33,119 --> 00:37:35,680
stands for um but it's the the browser

1026
00:37:35,680 --> 00:37:37,040
execution

1027
00:37:37,040 --> 00:37:40,000
framework and i i apologize i can't see

1028
00:37:40,000 --> 00:37:41,760
my speaker notes i don't use it as much

1029
00:37:41,760 --> 00:37:42,880
as other people

1030
00:37:42,880 --> 00:37:46,000
but at its core beef allows you

1031
00:37:46,000 --> 00:37:50,240
to load an external javascript file

1032
00:37:50,240 --> 00:37:53,200
that will turn your target's web browser

1033
00:37:53,200 --> 00:37:54,400
into

1034
00:37:54,400 --> 00:37:57,200
basically a full-fledged agent similar

1035
00:37:57,200 --> 00:37:57,599
to

1036
00:37:57,599 --> 00:37:59,520
maybe a metasploit agent things like

1037
00:37:59,520 --> 00:38:01,200
that you're able to

1038
00:38:01,200 --> 00:38:04,800
interact with the user browser in a

1039
00:38:04,800 --> 00:38:08,640
clean easy ui and grab a ton of stuff

1040
00:38:08,640 --> 00:38:11,359
you're able to grab local ip information

1041
00:38:11,359 --> 00:38:12,400
you're able to grab

1042
00:38:12,400 --> 00:38:15,440
browser information things like that

1043
00:38:15,440 --> 00:38:17,760
and remember all of this is just coming

1044
00:38:17,760 --> 00:38:19,599
from javascript within the user's

1045
00:38:19,599 --> 00:38:20,880
browser

1046
00:38:20,880 --> 00:38:22,800
obviously this is going to be fairly

1047
00:38:22,800 --> 00:38:24,960
heavy network and file

1048
00:38:24,960 --> 00:38:28,720
size wise but you're able to get all of

1049
00:38:28,720 --> 00:38:29,599
this information

1050
00:38:29,599 --> 00:38:31,599
and then potentially use this user for

1051
00:38:31,599 --> 00:38:33,200
further attacks

1052
00:38:33,200 --> 00:38:36,000
so these has options for port scanning

1053
00:38:36,000 --> 00:38:36,960
using your

1054
00:38:36,960 --> 00:38:39,920
hooked browser um the way that works is

1055
00:38:39,920 --> 00:38:40,560
your

1056
00:38:40,560 --> 00:38:42,480
targets browser would send a get request

1057
00:38:42,480 --> 00:38:44,079
to an internal ip

1058
00:38:44,079 --> 00:38:46,000
and a specific port and then would check

1059
00:38:46,000 --> 00:38:48,480
if it timed out or receive no response

1060
00:38:48,480 --> 00:38:52,320
things like that it also comes with

1061
00:38:52,320 --> 00:38:56,000
a ton i think it's up to almost 600 now

1062
00:38:56,000 --> 00:38:59,280
of metasploit payloads so if you are

1063
00:38:59,280 --> 00:39:00,079
able to hook

1064
00:39:00,079 --> 00:39:02,880
a target running an older or a

1065
00:39:02,880 --> 00:39:04,000
vulnerable

1066
00:39:04,000 --> 00:39:07,119
browser you could actually just use beef

1067
00:39:07,119 --> 00:39:10,160
to execute this malicious metasploit

1068
00:39:10,160 --> 00:39:11,920
payload within their browser

1069
00:39:11,920 --> 00:39:15,200
and then get a shell on your user system

1070
00:39:15,200 --> 00:39:16,880
which you could then use to attack that

1071
00:39:16,880 --> 00:39:19,200
user further pivot into their internal

1072
00:39:19,200 --> 00:39:19,920
network

1073
00:39:19,920 --> 00:39:23,839
things like that it's a a huge framework

1074
00:39:23,839 --> 00:39:25,680
um there have been plenty of talks on it

1075
00:39:25,680 --> 00:39:29,280
i provide a ton of resources but if you

1076
00:39:29,280 --> 00:39:31,280
are doing a real engagement or

1077
00:39:31,280 --> 00:39:32,960
specifically attacking users

1078
00:39:32,960 --> 00:39:34,800
you may want to look into using beef it

1079
00:39:34,800 --> 00:39:36,800
does make life a whole lot easier

1080
00:39:36,800 --> 00:39:38,240
you don't have to send multiple

1081
00:39:38,240 --> 00:39:39,839
cross-site scripting payloads

1082
00:39:39,839 --> 00:39:43,680
things like that so here's another just

1083
00:39:43,680 --> 00:39:45,119
quick example of

1084
00:39:45,119 --> 00:39:48,000
honestly just some of the beef payloads

1085
00:39:48,000 --> 00:39:48,880
so it will do

1086
00:39:48,880 --> 00:39:51,520
a lot of those examples i showed earlier

1087
00:39:51,520 --> 00:39:53,040
as far as stealing cookies

1088
00:39:53,040 --> 00:39:55,599
um stealing sensitive information your

1089
00:39:55,599 --> 00:39:57,040
basic alert pop-ups

1090
00:39:57,040 --> 00:40:00,079
phishing redirection all of that um

1091
00:40:00,079 --> 00:40:03,200
as well as some other fun stuff but yeah

1092
00:40:03,200 --> 00:40:05,040
it's a it's a huge framework

1093
00:40:05,040 --> 00:40:07,119
if you want to actually attack some

1094
00:40:07,119 --> 00:40:08,960
users this may be what you want to look

1095
00:40:08,960 --> 00:40:10,800
into but remember

1096
00:40:10,800 --> 00:40:13,359
all beef does is writes javascript and

1097
00:40:13,359 --> 00:40:14,560
html for you

1098
00:40:14,560 --> 00:40:17,680
anything that beef can do you can do

1099
00:40:17,680 --> 00:40:19,599
with inline cross-site scripting or

1100
00:40:19,599 --> 00:40:20,880
external javascript

1101
00:40:20,880 --> 00:40:25,839
using any of these previous examples

1102
00:40:26,079 --> 00:40:30,720
oops so

1103
00:40:33,680 --> 00:40:36,319
this is an entirely separate topic that

1104
00:40:36,319 --> 00:40:38,319
i do want to touch on

1105
00:40:38,319 --> 00:40:41,200
it's called blind prostate scripting

1106
00:40:41,200 --> 00:40:42,800
what this means at its core

1107
00:40:42,800 --> 00:40:44,560
is there's a cross-site scripting

1108
00:40:44,560 --> 00:40:46,480
vulnerability in an application

1109
00:40:46,480 --> 00:40:49,040
but you personally cannot see the

1110
00:40:49,040 --> 00:40:52,400
javascript execution so

1111
00:40:52,400 --> 00:40:55,680
imagine a a comment

1112
00:40:55,680 --> 00:40:59,680
or a help support form that you fill out

1113
00:40:59,680 --> 00:41:02,240
but the name field is vulnerable to a

1114
00:41:02,240 --> 00:41:04,240
cross-site scripting vulnerability

1115
00:41:04,240 --> 00:41:06,960
when you fill out this form you make you

1116
00:41:06,960 --> 00:41:08,640
put your malicious name

1117
00:41:08,640 --> 00:41:10,640
you put your comments section maybe you

1118
00:41:10,640 --> 00:41:11,680
upload a file

1119
00:41:11,680 --> 00:41:13,680
when you hit the submit button all you

1120
00:41:13,680 --> 00:41:15,760
see is thank you for submitting your

1121
00:41:15,760 --> 00:41:16,560
feedback

1122
00:41:16,560 --> 00:41:18,640
our customer support representative will

1123
00:41:18,640 --> 00:41:20,560
get back to you within 24 hours

1124
00:41:20,560 --> 00:41:23,599
and that's it as it turns out

1125
00:41:23,599 --> 00:41:26,480
on the back end when the help desk

1126
00:41:26,480 --> 00:41:28,480
technician goes to view your

1127
00:41:28,480 --> 00:41:31,200
ticket a the cross-site scripting

1128
00:41:31,200 --> 00:41:32,640
payload actually executes

1129
00:41:32,640 --> 00:41:34,960
within their browser maybe it's a

1130
00:41:34,960 --> 00:41:36,720
different administrative console

1131
00:41:36,720 --> 00:41:38,079
maybe it was vulnerable and you couldn't

1132
00:41:38,079 --> 00:41:39,839
see it um

1133
00:41:39,839 --> 00:41:42,240
but that's sort of an example of just

1134
00:41:42,240 --> 00:41:43,520
because you can't see the payload

1135
00:41:43,520 --> 00:41:44,240
execute

1136
00:41:44,240 --> 00:41:46,319
does not mean that the application is

1137
00:41:46,319 --> 00:41:48,319
not vulnerable

1138
00:41:48,319 --> 00:41:51,599
so the first three links here

1139
00:41:51,599 --> 00:41:54,480
sort of cover examples as well as a bit

1140
00:41:54,480 --> 00:41:55,520
more in depth what

1141
00:41:55,520 --> 00:41:57,920
line crosstalk scripting is but the

1142
00:41:57,920 --> 00:41:58,640
bottom two

1143
00:41:58,640 --> 00:42:00,880
are actually tools you can utilize to

1144
00:42:00,880 --> 00:42:02,079
find these

1145
00:42:02,079 --> 00:42:03,119
line cross-site scripting

1146
00:42:03,119 --> 00:42:05,760
vulnerabilities so

1147
00:42:05,760 --> 00:42:07,680
when the user executes your payload

1148
00:42:07,680 --> 00:42:08,800
these tools will

1149
00:42:08,800 --> 00:42:10,720
send back a request to your controlled

1150
00:42:10,720 --> 00:42:12,560
server saying you know

1151
00:42:12,560 --> 00:42:15,440
your line cross-site scripting payload 4

1152
00:42:15,440 --> 00:42:17,200
was executed by this user

1153
00:42:17,200 --> 00:42:19,040
on this date and potentially from this

1154
00:42:19,040 --> 00:42:22,560
application things like that

1155
00:42:22,560 --> 00:42:24,960
long process scripting is great for

1156
00:42:24,960 --> 00:42:26,720
attacking things that

1157
00:42:26,720 --> 00:42:28,960
you may not be able to get into so in

1158
00:42:28,960 --> 00:42:30,640
addition to you know like i said before

1159
00:42:30,640 --> 00:42:32,400
attacking the help desk

1160
00:42:32,400 --> 00:42:36,240
imagine if you were on some

1161
00:42:36,240 --> 00:42:37,839
unauthenticated web page or just

1162
00:42:37,839 --> 00:42:39,359
browsing and

1163
00:42:39,359 --> 00:42:42,400
a firewall in line at your company was

1164
00:42:42,400 --> 00:42:43,200
vulnerable

1165
00:42:43,200 --> 00:42:46,880
to cross-site scripting from the logs

1166
00:42:46,880 --> 00:42:48,880
so while you may not be seeing any

1167
00:42:48,880 --> 00:42:50,160
cross-site scripting

1168
00:42:50,160 --> 00:42:52,160
an administrator viewing their firewall

1169
00:42:52,160 --> 00:42:54,400
logs is now executing your malicious

1170
00:42:54,400 --> 00:42:55,280
javascript

1171
00:42:55,280 --> 00:42:58,240
payload you could use that to gain admin

1172
00:42:58,240 --> 00:42:59,359
access to the firewall

1173
00:42:59,359 --> 00:43:02,000
things like that a lot of times this

1174
00:43:02,000 --> 00:43:03,599
will be used to

1175
00:43:03,599 --> 00:43:05,599
either laterally or vertically escalate

1176
00:43:05,599 --> 00:43:06,640
privileges

1177
00:43:06,640 --> 00:43:08,800
because if you're not able to see this

1178
00:43:08,800 --> 00:43:10,079
your payloads

1179
00:43:10,079 --> 00:43:11,680
it usually there's usually a reason for

1180
00:43:11,680 --> 00:43:13,359
that either your payloads are

1181
00:43:13,359 --> 00:43:15,680
ending up at an administrator level a

1182
00:43:15,680 --> 00:43:16,720
different user

1183
00:43:16,720 --> 00:43:20,240
things like that um it is a

1184
00:43:20,240 --> 00:43:22,000
a very in-depth talk i highly recommend

1185
00:43:22,000 --> 00:43:23,920
you check out some of these examples

1186
00:43:23,920 --> 00:43:26,079
especially as a if you do bug bounty

1187
00:43:26,079 --> 00:43:26,960
hunting

1188
00:43:26,960 --> 00:43:30,560
um this is a a huge attack service that

1189
00:43:30,560 --> 00:43:31,599
you may be missing if you're not

1190
00:43:31,599 --> 00:43:34,319
checking for it

1191
00:43:34,640 --> 00:43:38,640
so after all of these different payloads

1192
00:43:38,640 --> 00:43:40,480
and stuff like this let's take a trip

1193
00:43:40,480 --> 00:43:42,960
down memory lane and take a look at some

1194
00:43:42,960 --> 00:43:45,200
real-life examples of weaponized

1195
00:43:45,200 --> 00:43:46,400
cross-site scripting

1196
00:43:46,400 --> 00:43:49,280
that cause some pretty bad or at least

1197
00:43:49,280 --> 00:43:52,160
interesting issues

1198
00:43:53,200 --> 00:43:56,240
so i can't give a cross-site scripting

1199
00:43:56,240 --> 00:43:58,800
talk without covering the sandy worm

1200
00:43:58,800 --> 00:44:00,640
so for those of you who are a little

1201
00:44:00,640 --> 00:44:02,480
older you may remember a website called

1202
00:44:02,480 --> 00:44:03,599
myspace

1203
00:44:03,599 --> 00:44:05,839
um there's a guy named tom he pretended

1204
00:44:05,839 --> 00:44:06,800
to be your friend

1205
00:44:06,800 --> 00:44:10,640
it's a great website as it turns out

1206
00:44:10,640 --> 00:44:13,599
myspace profiles were vulnerable to a

1207
00:44:13,599 --> 00:44:16,160
stored cross-state scripting attack

1208
00:44:16,160 --> 00:44:19,760
so a he was fairly young

1209
00:44:19,760 --> 00:44:22,640
i'm a young sammy campar who is now a

1210
00:44:22,640 --> 00:44:24,319
infrasec security researcher

1211
00:44:24,319 --> 00:44:27,119
blogger talker great guy i've spoken

1212
00:44:27,119 --> 00:44:29,119
with him plenty

1213
00:44:29,119 --> 00:44:31,280
actually found a this cross-site

1214
00:44:31,280 --> 00:44:33,280
scripting vulnerability

1215
00:44:33,280 --> 00:44:35,839
on his myspace profile and i didn't want

1216
00:44:35,839 --> 00:44:37,280
to show all of the code because

1217
00:44:37,280 --> 00:44:39,599
his actual payload is very interesting

1218
00:44:39,599 --> 00:44:41,760
technically and has a lot of bypasses

1219
00:44:41,760 --> 00:44:43,839
but it's pretty gross to look at and

1220
00:44:43,839 --> 00:44:45,520
what his payload did

1221
00:44:45,520 --> 00:44:48,560
was actually add to someone's profile

1222
00:44:48,560 --> 00:44:50,800
the text but most of all sammy is my

1223
00:44:50,800 --> 00:44:51,599
hero

1224
00:44:51,599 --> 00:44:53,119
and then added the payload to their

1225
00:44:53,119 --> 00:44:56,720
profile so if i visited sami's profile

1226
00:44:56,720 --> 00:44:59,119
my profile would say sammy's my hero and

1227
00:44:59,119 --> 00:45:00,560
then the payload would be on

1228
00:45:00,560 --> 00:45:03,359
my page and then if one of my friends

1229
00:45:03,359 --> 00:45:04,000
visited my

1230
00:45:04,000 --> 00:45:06,000
page sammy would be their hero it'd be

1231
00:45:06,000 --> 00:45:07,680
on their page

1232
00:45:07,680 --> 00:45:09,760
it ended up spreading to over a million

1233
00:45:09,760 --> 00:45:11,440
users on myspace

1234
00:45:11,440 --> 00:45:13,440
it is technically the fastest spreading

1235
00:45:13,440 --> 00:45:16,079
internet worm it brought down my space

1236
00:45:16,079 --> 00:45:18,240
and if i'm not mistaken some of fox's

1237
00:45:18,240 --> 00:45:19,839
servers as well

1238
00:45:19,839 --> 00:45:22,000
um and there are some more links it's a

1239
00:45:22,000 --> 00:45:23,920
really interesting vulnerability

1240
00:45:23,920 --> 00:45:26,240
that is one of the earliest examples of

1241
00:45:26,240 --> 00:45:27,920
a crosstalk scripting worm

1242
00:45:27,920 --> 00:45:32,079
so it was in the same sense of a a

1243
00:45:32,079 --> 00:45:34,720
application level or a system level worm

1244
00:45:34,720 --> 00:45:36,400
it was self-replicating it spread to

1245
00:45:36,400 --> 00:45:38,400
every profile for everyone who viewed it

1246
00:45:38,400 --> 00:45:41,599
and it was persistent um it's a really

1247
00:45:41,599 --> 00:45:42,960
interesting story and

1248
00:45:42,960 --> 00:45:44,240
it's part of the reason he ended up

1249
00:45:44,240 --> 00:45:46,800
getting uh arrested the first time

1250
00:45:46,800 --> 00:45:50,160
the only time i'm not sure

1251
00:45:50,480 --> 00:45:55,040
so a sort of less

1252
00:45:55,040 --> 00:45:56,880
severe but very interesting

1253
00:45:56,880 --> 00:45:58,079
vulnerability

1254
00:45:58,079 --> 00:46:00,720
was actually in the uber driver portal

1255
00:46:00,720 --> 00:46:02,000
and i want to share this one more so

1256
00:46:02,000 --> 00:46:03,920
because it's a wonderful write-up and

1257
00:46:03,920 --> 00:46:04,319
shows

1258
00:46:04,319 --> 00:46:06,720
that just because a cross-site scripting

1259
00:46:06,720 --> 00:46:08,720
vulnerability doesn't seem severe

1260
00:46:08,720 --> 00:46:10,480
doesn't mean that you can't make it more

1261
00:46:10,480 --> 00:46:11,839
severe

1262
00:46:11,839 --> 00:46:13,920
so the top-left left screenshot

1263
00:46:13,920 --> 00:46:15,760
demonstrates someone setting up their

1264
00:46:15,760 --> 00:46:16,960
uber profile

1265
00:46:16,960 --> 00:46:19,680
only they set their home address to be a

1266
00:46:19,680 --> 00:46:20,880
malicious

1267
00:46:20,880 --> 00:46:22,640
in this case it just alerts the domain

1268
00:46:22,640 --> 00:46:25,440
cross-site scripting payload

1269
00:46:25,440 --> 00:46:27,119
if you've ever driven for uber you know

1270
00:46:27,119 --> 00:46:28,720
that no one else

1271
00:46:28,720 --> 00:46:31,440
can see this information um and this was

1272
00:46:31,440 --> 00:46:32,319
not a blind

1273
00:46:32,319 --> 00:46:34,160
cross-site scripting it wasn't that uber

1274
00:46:34,160 --> 00:46:35,760
administrators could see this

1275
00:46:35,760 --> 00:46:37,599
you are the only one who was ever able

1276
00:46:37,599 --> 00:46:39,119
to see this address

1277
00:46:39,119 --> 00:46:41,520
so it doesn't seem like that big a deal

1278
00:46:41,520 --> 00:46:42,160
i can

1279
00:46:42,160 --> 00:46:45,440
maliciously attack myself kind of cool

1280
00:46:45,440 --> 00:46:46,000
but

1281
00:46:46,000 --> 00:46:48,800
not that useful what someone was

1282
00:46:48,800 --> 00:46:50,319
actually able to do

1283
00:46:50,319 --> 00:46:52,960
was they set their personal driver

1284
00:46:52,960 --> 00:46:53,839
profile

1285
00:46:53,839 --> 00:46:55,680
to a malicious cross-site scripting

1286
00:46:55,680 --> 00:46:57,040
payload

1287
00:46:57,040 --> 00:47:00,880
and then used a full attack gene

1288
00:47:00,880 --> 00:47:04,000
so they sent an attack an attack

1289
00:47:04,000 --> 00:47:07,040
chain to their target that

1290
00:47:07,040 --> 00:47:09,040
logged into the or well the target would

1291
00:47:09,040 --> 00:47:10,240
have already been lying to the uber

1292
00:47:10,240 --> 00:47:11,440
application

1293
00:47:11,440 --> 00:47:14,720
it created an iframe

1294
00:47:14,720 --> 00:47:17,760
still logged into uber it logged them

1295
00:47:17,760 --> 00:47:18,640
out of

1296
00:47:18,640 --> 00:47:21,599
their driver profile it logged into this

1297
00:47:21,599 --> 00:47:22,960
malicious profile

1298
00:47:22,960 --> 00:47:24,240
since the attacker knew the username and

1299
00:47:24,240 --> 00:47:26,319
password could allow them to log in

1300
00:47:26,319 --> 00:47:28,319
and it executed that malicious

1301
00:47:28,319 --> 00:47:29,359
javascript

1302
00:47:29,359 --> 00:47:32,160
and if since it was still on uber.com it

1303
00:47:32,160 --> 00:47:33,040
was able to

1304
00:47:33,040 --> 00:47:36,400
grab the domain and cookie information

1305
00:47:36,400 --> 00:47:40,640
from the target drivers

1306
00:47:40,640 --> 00:47:44,000
profile since it was the same site

1307
00:47:44,000 --> 00:47:46,640
and things like that um it's a great

1308
00:47:46,640 --> 00:47:48,000
read it's a very

1309
00:47:48,000 --> 00:47:50,000
in-depth cross-site scripting attack

1310
00:47:50,000 --> 00:47:51,920
chain that i really can't cover in a

1311
00:47:51,920 --> 00:47:53,119
minute or two here

1312
00:47:53,119 --> 00:47:55,839
but it's a it's a great example of why

1313
00:47:55,839 --> 00:47:56,559
just because

1314
00:47:56,559 --> 00:47:58,400
a cross-site scripting vulnerability

1315
00:47:58,400 --> 00:48:00,319
doesn't seem that bad

1316
00:48:00,319 --> 00:48:02,000
does not mean you should ignore it or

1317
00:48:02,000 --> 00:48:06,240
not fix it things like that

1318
00:48:06,240 --> 00:48:09,359
another really fun one was

1319
00:48:09,359 --> 00:48:12,319
barack obama's website was vulnerable to

1320
00:48:12,319 --> 00:48:14,000
cross-site scripting

1321
00:48:14,000 --> 00:48:17,200
um and a few security researchers found

1322
00:48:17,200 --> 00:48:18,960
it but it was inside of

1323
00:48:18,960 --> 00:48:21,760
the basically the volunteer and the

1324
00:48:21,760 --> 00:48:23,359
mailing list section

1325
00:48:23,359 --> 00:48:26,480
of the application and the server so if

1326
00:48:26,480 --> 00:48:26,800
you

1327
00:48:26,800 --> 00:48:29,280
take a look someone is trying to change

1328
00:48:29,280 --> 00:48:31,200
their email address for organizing for

1329
00:48:31,200 --> 00:48:34,640
america and my.barackobama.com is

1330
00:48:34,640 --> 00:48:36,800
actually popping an xss

1331
00:48:36,800 --> 00:48:40,400
payload window you can imagine

1332
00:48:40,400 --> 00:48:41,920
what sort of things you could do with

1333
00:48:41,920 --> 00:48:43,680
this if you had

1334
00:48:43,680 --> 00:48:46,880
html injection you could change barack

1335
00:48:46,880 --> 00:48:48,160
obama's website to be

1336
00:48:48,160 --> 00:48:51,200
in support of at the time i want to say

1337
00:48:51,200 --> 00:48:51,760
it was

1338
00:48:51,760 --> 00:48:53,520
against hillary clinton so you could

1339
00:48:53,520 --> 00:48:55,839
have changed four users you're targeting

1340
00:48:55,839 --> 00:48:57,599
if it's reflected or everyone if it's

1341
00:48:57,599 --> 00:48:59,680
stored his website to appear to be in

1342
00:48:59,680 --> 00:49:01,760
support of a different candidate

1343
00:49:01,760 --> 00:49:04,480
or to be in support of maybe values he

1344
00:49:04,480 --> 00:49:05,280
was against

1345
00:49:05,280 --> 00:49:07,839
things like that or just try and steal

1346
00:49:07,839 --> 00:49:09,280
and target information of people

1347
00:49:09,280 --> 00:49:12,000
visiting the website

1348
00:49:12,000 --> 00:49:13,440
and as it turns out i don't have a

1349
00:49:13,440 --> 00:49:15,200
second screenshot

1350
00:49:15,200 --> 00:49:18,319
this payload was actually both reflected

1351
00:49:18,319 --> 00:49:19,280
on the

1352
00:49:19,280 --> 00:49:22,000
email address page as well as being

1353
00:49:22,000 --> 00:49:23,839
stored on the backend so people were

1354
00:49:23,839 --> 00:49:25,280
receiving emails

1355
00:49:25,280 --> 00:49:27,520
with this malicious javascript or html

1356
00:49:27,520 --> 00:49:28,480
injection

1357
00:49:28,480 --> 00:49:31,040
so you could have actually used your

1358
00:49:31,040 --> 00:49:32,000
payload to send

1359
00:49:32,000 --> 00:49:34,640
emails containing you know modified

1360
00:49:34,640 --> 00:49:35,920
payloads things like that

1361
00:49:35,920 --> 00:49:40,000
or barack obama supporters at the time

1362
00:49:40,160 --> 00:49:43,599
a few more real world examples um

1363
00:49:43,599 --> 00:49:46,800
there are tons of great ones i highly

1364
00:49:46,800 --> 00:49:48,000
recommend that secondly

1365
00:49:48,000 --> 00:49:51,599
the stack exchange one um it covers

1366
00:49:51,599 --> 00:49:53,280
a ton that i would have loved to go over

1367
00:49:53,280 --> 00:49:55,200
during this but i didn't have time

1368
00:49:55,200 --> 00:49:57,359
um ebay ebay has been vulnerable to

1369
00:49:57,359 --> 00:49:59,280
crosstalk scripting attacks so

1370
00:49:59,280 --> 00:50:01,359
you could have you know attacked other

1371
00:50:01,359 --> 00:50:03,280
ebay users made them make bids on your

1372
00:50:03,280 --> 00:50:03,839
things

1373
00:50:03,839 --> 00:50:06,880
um made them accept offers on their

1374
00:50:06,880 --> 00:50:08,079
items things like that

1375
00:50:08,079 --> 00:50:11,359
so at its core

1376
00:50:11,359 --> 00:50:14,160
cross-site scripting is just interacting

1377
00:50:14,160 --> 00:50:15,680
with a client browser

1378
00:50:15,680 --> 00:50:18,240
and potentially a vulnerable application

1379
00:50:18,240 --> 00:50:21,839
the same way that a user could

1380
00:50:22,000 --> 00:50:25,119
so we've got nine minutes left

1381
00:50:25,119 --> 00:50:27,359
uh a few quick acknowledgements i really

1382
00:50:27,359 --> 00:50:28,160
want to thank

1383
00:50:28,160 --> 00:50:31,520
besides satx um letting me present about

1384
00:50:31,520 --> 00:50:33,520
a topic that i've really enjoyed

1385
00:50:33,520 --> 00:50:35,760
um and really for working with people i

1386
00:50:35,760 --> 00:50:37,760
mean it's weird having to do a go-to

1387
00:50:37,760 --> 00:50:38,880
meeting conference i'm sure everyone

1388
00:50:38,880 --> 00:50:40,400
misses seeing people but

1389
00:50:40,400 --> 00:50:42,000
it's awesome that they got this set up

1390
00:50:42,000 --> 00:50:43,760
it's awesome that we all get to at least

1391
00:50:43,760 --> 00:50:44,400
be together

1392
00:50:44,400 --> 00:50:47,440
virtually i want to thank my company

1393
00:50:47,440 --> 00:50:49,119
avalera i don't know if you've noticed

1394
00:50:49,119 --> 00:50:50,000
the theme but

1395
00:50:50,000 --> 00:50:51,680
slides are orange the shirt is orange

1396
00:50:51,680 --> 00:50:53,200
the logo is orange

1397
00:50:53,200 --> 00:50:55,359
i didn't pick the color but it's what we

1398
00:50:55,359 --> 00:50:56,559
worked with

1399
00:50:56,559 --> 00:50:58,400
um i did want to give a shout out to

1400
00:50:58,400 --> 00:50:59,680
eversec we are both

1401
00:50:59,680 --> 00:51:03,040
a ctf team and hosts of ctfs

1402
00:51:03,040 --> 00:51:04,720
um please reach out to me if you enjoy

1403
00:51:04,720 --> 00:51:06,319
ctfs or if you want to build challenges

1404
00:51:06,319 --> 00:51:06,960
for us

1405
00:51:06,960 --> 00:51:08,800
it's a lot of work and we love

1406
00:51:08,800 --> 00:51:10,319
procrastinating

1407
00:51:10,319 --> 00:51:11,920
um i do want to acknowledge my

1408
00:51:11,920 --> 00:51:14,240
girlfriend she made sure that i got this

1409
00:51:14,240 --> 00:51:14,960
talk

1410
00:51:14,960 --> 00:51:17,920
finished and clean and i actually

1411
00:51:17,920 --> 00:51:19,440
managed to finish up some of the slides

1412
00:51:19,440 --> 00:51:20,960
while she was driving

1413
00:51:20,960 --> 00:51:23,119
um so i definitely appreciate that and

1414
00:51:23,119 --> 00:51:24,720
you guys for being here

1415
00:51:24,720 --> 00:51:28,000
um if no one came to my presentation

1416
00:51:28,000 --> 00:51:30,880
i wouldn't have been able to give it um

1417
00:51:30,880 --> 00:51:31,760
and again

1418
00:51:31,760 --> 00:51:33,680
if you watch this talk live or in the

1419
00:51:33,680 --> 00:51:35,520
video feel free to reach out to me at

1420
00:51:35,520 --> 00:51:36,160
any point

1421
00:51:36,160 --> 00:51:39,200
on twitter or the b-sides discord about

1422
00:51:39,200 --> 00:51:41,760
crosstalk scripting ctfs infosec in

1423
00:51:41,760 --> 00:51:43,200
general

1424
00:51:43,200 --> 00:51:45,200
so remember if you're an attacker a

1425
00:51:45,200 --> 00:51:46,880
defender a builder or breaker

1426
00:51:46,880 --> 00:51:49,040
we're all in this together the reason to

1427
00:51:49,040 --> 00:51:50,880
demonstrate cross-site scripting

1428
00:51:50,880 --> 00:51:54,480
severity is to

1429
00:51:54,480 --> 00:51:58,800
ensure that people know why to fix it um

1430
00:51:58,800 --> 00:52:00,079
obviously if you're a malicious attacker

1431
00:52:00,079 --> 00:52:01,760
that's different but we're on this

1432
00:52:01,760 --> 00:52:02,400
together

1433
00:52:02,400 --> 00:52:04,160
we want to get this vulnerability fixed

1434
00:52:04,160 --> 00:52:05,359
we want to show why it's a bad

1435
00:52:05,359 --> 00:52:06,480
vulnerability

1436
00:52:06,480 --> 00:52:10,079
things like that so

1437
00:52:10,079 --> 00:52:12,880
i've got eight minutes left i will open

1438
00:52:12,880 --> 00:52:13,280
up

1439
00:52:13,280 --> 00:52:17,920
the coaching meeting for questions

1440
00:52:17,920 --> 00:52:19,520
if that's the easiest i'm also in

1441
00:52:19,520 --> 00:52:21,040
discord if you prefer to ask

1442
00:52:21,040 --> 00:52:24,240
there but that is all i have left

1443
00:52:24,240 --> 00:52:27,599
so yeah you want to use the go to

1444
00:52:27,599 --> 00:52:28,880
meeting or discord i've got a few

1445
00:52:28,880 --> 00:52:33,839
minutes to answer questions

1446
00:52:43,520 --> 00:52:45,440
sorry go ahead i was just gonna say i

1447
00:52:45,440 --> 00:52:47,280
don't see any questions cued within go

1448
00:52:47,280 --> 00:52:49,599
to webinar uh but there is of course the

1449
00:52:49,599 --> 00:52:50,880
the track four breakout

1450
00:52:50,880 --> 00:52:52,480
channel and the track four in the weeds

1451
00:52:52,480 --> 00:52:53,760
channel uh we're seeing some

1452
00:52:53,760 --> 00:52:54,640
acknowledgments

1453
00:52:54,640 --> 00:52:56,800
there uh thank you very much rael's a

1454
00:52:56,800 --> 00:52:58,559
great talk we really appreciate you

1455
00:52:58,559 --> 00:53:02,400
uh coming and presenting thanks yeah i'm

1456
00:53:02,400 --> 00:53:04,640
glad to present it was awesome being

1457
00:53:04,640 --> 00:53:06,319
able to present to you guys

1458
00:53:06,319 --> 00:53:08,880
um we do have a question here uh what

1459
00:53:08,880 --> 00:53:14,400
was the most difficult aspect of this

1460
00:53:14,400 --> 00:53:17,839
one of the one of the attendees

1461
00:53:19,599 --> 00:53:29,839
of crosstalk scripting or the talk or

1462
00:53:31,280 --> 00:53:35,280
of cross-site scripting okay yeah um

1463
00:53:35,280 --> 00:53:38,240
so the most honestly the the most

1464
00:53:38,240 --> 00:53:38,960
difficult

1465
00:53:38,960 --> 00:53:41,839
part of cross-site scripting is one that

1466
00:53:41,839 --> 00:53:42,640
i really didn't

1467
00:53:42,640 --> 00:53:45,280
cover and it's going to be bypassing the

1468
00:53:45,280 --> 00:53:47,440
defenses that you will run into

1469
00:53:47,440 --> 00:53:50,960
so um sometimes applications may be

1470
00:53:50,960 --> 00:53:55,359
encoding or mangling your inputs

1471
00:53:55,359 --> 00:53:58,559
sometimes they may be blocking some

1472
00:53:58,559 --> 00:54:00,400
specific characters like the less than

1473
00:54:00,400 --> 00:54:02,240
sign the greater than sign

1474
00:54:02,240 --> 00:54:05,760
sometimes they may be breaking them up

1475
00:54:05,760 --> 00:54:07,920
or putting them on different pages

1476
00:54:07,920 --> 00:54:10,160
the hardest part is actually getting

1477
00:54:10,160 --> 00:54:13,200
that alert one pop-up sometimes

1478
00:54:13,200 --> 00:54:15,280
once you get that and sort of have

1479
00:54:15,280 --> 00:54:16,400
figured out

1480
00:54:16,400 --> 00:54:17,839
what you can do to bypass the

1481
00:54:17,839 --> 00:54:20,800
application after that it's mostly

1482
00:54:20,800 --> 00:54:23,040
just being able to write the malicious

1483
00:54:23,040 --> 00:54:25,839
javascript and html that you want

1484
00:54:25,839 --> 00:54:27,200
which is actually fairly difficult for

1485
00:54:27,200 --> 00:54:28,960
me my javascript isn't great

1486
00:54:28,960 --> 00:54:32,800
and then being able to execute it

1487
00:54:36,799 --> 00:54:39,200
we have an additional question uh i'm

1488
00:54:39,200 --> 00:54:41,040
asked regularly to speak to the three

1489
00:54:41,040 --> 00:54:42,559
different types of cross-site scripting

1490
00:54:42,559 --> 00:54:44,799
for jobs i know how to abuse them

1491
00:54:44,799 --> 00:54:46,720
not as good as you of course but i find

1492
00:54:46,720 --> 00:54:48,960
it difficult to be able to speak to them

1493
00:54:48,960 --> 00:54:50,559
do you think it's critical to memorize

1494
00:54:50,559 --> 00:54:52,240
the different types and provide textbook

1495
00:54:52,240 --> 00:54:54,160
answers

1496
00:54:54,160 --> 00:54:58,640
so i think it's important to understand

1497
00:54:58,640 --> 00:55:02,319
the differences at the very least

1498
00:55:02,319 --> 00:55:04,960
between reflected and stored

1499
00:55:04,960 --> 00:55:06,480
and i can cover that answer right now

1500
00:55:06,480 --> 00:55:08,079
real quick we've got time so

1501
00:55:08,079 --> 00:55:09,839
for those of you who don't know there

1502
00:55:09,839 --> 00:55:11,280
are three main types of cross-site

1503
00:55:11,280 --> 00:55:12,000
scripting

1504
00:55:12,000 --> 00:55:14,160
there's reflected cross-site scripting

1505
00:55:14,160 --> 00:55:15,760
stored cross-site scripting

1506
00:55:15,760 --> 00:55:18,640
and dom-based cross-site scripting

1507
00:55:18,640 --> 00:55:20,240
reflected cross-site scripting

1508
00:55:20,240 --> 00:55:22,240
is a cross-site scripting attacker

1509
00:55:22,240 --> 00:55:23,280
payload that is

1510
00:55:23,280 --> 00:55:25,920
reflected in the user's browser so this

1511
00:55:25,920 --> 00:55:27,599
is going to be those examples i showed

1512
00:55:27,599 --> 00:55:28,240
where

1513
00:55:28,240 --> 00:55:32,160
maybe the search parameter of a

1514
00:55:32,160 --> 00:55:35,599
website shows the

1515
00:55:35,599 --> 00:55:37,839
value of what is in the url bar on the

1516
00:55:37,839 --> 00:55:40,880
page so it is in essence reflected

1517
00:55:40,880 --> 00:55:42,960
these are usually only going to be

1518
00:55:42,960 --> 00:55:44,079
executed

1519
00:55:44,079 --> 00:55:46,240
when you send a user a malicious link or

1520
00:55:46,240 --> 00:55:48,000
they they click on malicious link

1521
00:55:48,000 --> 00:55:50,400
things like that um you can't get them

1522
00:55:50,400 --> 00:55:52,400
to execute this payload just by visiting

1523
00:55:52,400 --> 00:55:56,000
any old web page so these are a little

1524
00:55:56,000 --> 00:55:58,000
less severe generally speaking

1525
00:55:58,000 --> 00:55:59,839
because they're usually targeted and

1526
00:55:59,839 --> 00:56:03,280
they don't exist on the server forever

1527
00:56:03,280 --> 00:56:05,359
this is contrary to a stored cross-site

1528
00:56:05,359 --> 00:56:06,640
scripting attack

1529
00:56:06,640 --> 00:56:08,400
so this is going to be that example with

1530
00:56:08,400 --> 00:56:10,559
the in the attack chain i showed that

1531
00:56:10,559 --> 00:56:12,000
guestbook page

1532
00:56:12,000 --> 00:56:15,839
so in a stored cross-site scripting

1533
00:56:15,839 --> 00:56:18,559
or vulnerability the malicious payload

1534
00:56:18,559 --> 00:56:18,880
is

1535
00:56:18,880 --> 00:56:21,920
stored on the server and any user that

1536
00:56:21,920 --> 00:56:23,599
ever visits that page

1537
00:56:23,599 --> 00:56:26,079
ends up executing that malicious payload

1538
00:56:26,079 --> 00:56:26,640
so

1539
00:56:26,640 --> 00:56:28,799
in a guestbook or a forum if you make a

1540
00:56:28,799 --> 00:56:30,240
post with your crosstalk scripting

1541
00:56:30,240 --> 00:56:31,040
payload

1542
00:56:31,040 --> 00:56:33,599
every user that ever visits that page

1543
00:56:33,599 --> 00:56:35,599
will execute that payload

1544
00:56:35,599 --> 00:56:36,960
this is going to make it a little more

1545
00:56:36,960 --> 00:56:39,200
severe because a you're targeting more

1546
00:56:39,200 --> 00:56:40,240
users

1547
00:56:40,240 --> 00:56:42,240
and b you don't have to worry about

1548
00:56:42,240 --> 00:56:44,160
sending malicious targeted emails

1549
00:56:44,160 --> 00:56:45,680
you just need people to use their web

1550
00:56:45,680 --> 00:56:48,720
application as normal

1551
00:56:48,720 --> 00:56:50,799
the final one is dom cross-site

1552
00:56:50,799 --> 00:56:51,839
scripting

1553
00:56:51,839 --> 00:56:53,520
it's a little different because it's

1554
00:56:53,520 --> 00:56:56,000
injecting javascript directly into

1555
00:56:56,000 --> 00:56:58,720
the document object model and that again

1556
00:56:58,720 --> 00:57:00,880
is a whole talk or blog post series

1557
00:57:00,880 --> 00:57:03,680
but at its core it's generally very

1558
00:57:03,680 --> 00:57:05,280
similar to reflected cross-site

1559
00:57:05,280 --> 00:57:06,319
scripting

1560
00:57:06,319 --> 00:57:09,440
except almost universally the

1561
00:57:09,440 --> 00:57:12,160
javascript payload ends up after the

1562
00:57:12,160 --> 00:57:12,880
hash mark

1563
00:57:12,880 --> 00:57:16,240
in a url so if you're familiar with how

1564
00:57:16,240 --> 00:57:16,960
browsers

1565
00:57:16,960 --> 00:57:18,799
and web servers and things like that

1566
00:57:18,799 --> 00:57:21,520
work anything after that hash mark

1567
00:57:21,520 --> 00:57:24,880
only ever touches the user's browser

1568
00:57:24,880 --> 00:57:28,000
so if you go to google.com this is my

1569
00:57:28,000 --> 00:57:29,599
super secret password

1570
00:57:29,599 --> 00:57:32,160
google will never see everything after

1571
00:57:32,160 --> 00:57:33,599
that hash mark

1572
00:57:33,599 --> 00:57:36,240
but there is a chance that your browser

1573
00:57:36,240 --> 00:57:37,599
will do something with

1574
00:57:37,599 --> 00:57:40,319
the things after that hash mark so if

1575
00:57:40,319 --> 00:57:41,040
there was a

1576
00:57:41,040 --> 00:57:43,280
dom-based javascript or a dom-based

1577
00:57:43,280 --> 00:57:45,920
cross-site scripting vulnerability

1578
00:57:45,920 --> 00:57:48,960
it could use that hash attack hashmark

1579
00:57:48,960 --> 00:57:50,720
and everything after it but google would

1580
00:57:50,720 --> 00:57:52,240
never see it in their logs

1581
00:57:52,240 --> 00:57:55,359
things like that so it's

1582
00:57:55,359 --> 00:57:56,799
ostensibly a reflective cross-site

1583
00:57:56,799 --> 00:57:58,240
scripting vulnerability as far as

1584
00:57:58,240 --> 00:57:59,280
execution

1585
00:57:59,280 --> 00:58:02,640
and severity but

1586
00:58:02,640 --> 00:58:04,960
the results won't be sent off to web

1587
00:58:04,960 --> 00:58:06,559
application firewalls

1588
00:58:06,559 --> 00:58:09,599
they won't be sent to server logs for

1589
00:58:09,599 --> 00:58:12,079
sort of remediation things like that

1590
00:58:12,079 --> 00:58:14,319
so while it does help to memorize the

1591
00:58:14,319 --> 00:58:17,280
textbook answers for an interview

1592
00:58:17,280 --> 00:58:18,640
the biggest takeaway i can give you is

1593
00:58:18,640 --> 00:58:21,200
to memorize why stored is worse

1594
00:58:21,200 --> 00:58:37,839
and how you can attack people with it

1595
00:58:55,440 --> 00:58:57,520
you

