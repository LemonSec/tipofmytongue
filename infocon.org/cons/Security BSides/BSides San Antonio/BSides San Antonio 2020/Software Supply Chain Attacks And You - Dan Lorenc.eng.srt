1
00:00:00,000 --> 00:00:03,120
we're getting started close enough uh

2
00:00:03,120 --> 00:00:05,920
craftsman dan lawrence um everybody

3
00:00:05,920 --> 00:00:07,359
should be able to see my screen

4
00:00:07,359 --> 00:00:11,040
and the webcam right now uh so we can

5
00:00:11,040 --> 00:00:12,960
i'm gonna get started uh we'll give

6
00:00:12,960 --> 00:00:14,480
people one more minute or so since it

7
00:00:14,480 --> 00:00:18,080
still says 359 here for me

8
00:00:18,640 --> 00:00:22,000
oh there we go all right four o'clock we

9
00:00:22,000 --> 00:00:23,359
can get started

10
00:00:23,359 --> 00:00:25,119
uh so thanks for listening to the last

11
00:00:25,119 --> 00:00:27,519
talk of the day my talk on open source

12
00:00:27,519 --> 00:00:31,039
supply chain so my name is dan lawrence

13
00:00:31,039 --> 00:00:33,680
i'm doing a session live stream team

14
00:00:33,680 --> 00:00:34,320
here in

15
00:00:34,320 --> 00:00:37,600
austin texas i'm a software engineering

16
00:00:37,600 --> 00:00:38,960
lead at google

17
00:00:38,960 --> 00:00:40,879
and i've been working in open source for

18
00:00:40,879 --> 00:00:42,239
a long time now

19
00:00:42,239 --> 00:00:44,320
i've been involved in the cloud and

20
00:00:44,320 --> 00:00:45,600
containers um

21
00:00:45,600 --> 00:00:47,760
open source space for a while but before

22
00:00:47,760 --> 00:00:50,079
that i've also been doing open source so

23
00:00:50,079 --> 00:00:52,000
a little close to about a decade now so

24
00:00:52,000 --> 00:00:53,520
open source security and open source

25
00:00:53,520 --> 00:00:55,840
supply chain security is a topic

26
00:00:55,840 --> 00:00:57,360
that's near and dear to my heart and it

27
00:00:57,360 --> 00:00:59,039
really keeps me up at night with some of

28
00:00:59,039 --> 00:01:00,399
these terrifying

29
00:01:00,399 --> 00:01:04,159
attacks uh so recently in open source

30
00:01:04,159 --> 00:01:05,760
i've been kind of working the techcon

31
00:01:05,760 --> 00:01:07,680
convenience delivery open source project

32
00:01:07,680 --> 00:01:09,040
to help start that and i'm still a

33
00:01:09,040 --> 00:01:10,640
maintainer in me today

34
00:01:10,640 --> 00:01:12,080
but i'm also working on a larger

35
00:01:12,080 --> 00:01:14,159
industry-wide effort to help secure the

36
00:01:14,159 --> 00:01:15,600
open source supply chain

37
00:01:15,600 --> 00:01:17,040
uh both of which i'll talk about in a

38
00:01:17,040 --> 00:01:18,400
little bit more detail later in the

39
00:01:18,400 --> 00:01:19,920
presentation

40
00:01:19,920 --> 00:01:21,759
um i don't know about everyone here this

41
00:01:21,759 --> 00:01:23,680
is one of my first virtual events um so

42
00:01:23,680 --> 00:01:25,119
i'm hoping to have a little bit of fun

43
00:01:25,119 --> 00:01:26,000
i'm trying to make it

44
00:01:26,000 --> 00:01:28,240
interactive um we're gonna be doing a

45
00:01:28,240 --> 00:01:29,360
couple of quizzes

46
00:01:29,360 --> 00:01:31,840
and polls later on where i get to ask

47
00:01:31,840 --> 00:01:33,040
you some questions and i want to see

48
00:01:33,040 --> 00:01:34,079
your answers um

49
00:01:34,079 --> 00:01:37,360
in chat in the discord so um there's

50
00:01:37,360 --> 00:01:39,439
everybody should see the discord channel

51
00:01:39,439 --> 00:01:41,360
track two in the clouds

52
00:01:41,360 --> 00:01:43,840
i'll just type there and once we get to

53
00:01:43,840 --> 00:01:44,560
that part

54
00:01:44,560 --> 00:01:46,799
i'm ready to type their answers and

55
00:01:46,799 --> 00:01:47,920
please try to

56
00:01:47,920 --> 00:01:49,680
keep this interactive and be honest this

57
00:01:49,680 --> 00:01:52,720
is the judgment for the

58
00:01:52,840 --> 00:01:55,200
talk

59
00:01:55,200 --> 00:01:58,880
okay all right let's jump in

60
00:01:58,880 --> 00:02:00,960
um so open source is under attack i'm

61
00:02:00,960 --> 00:02:02,719
going to start by covering the state of

62
00:02:02,719 --> 00:02:03,840
open source and

63
00:02:03,840 --> 00:02:06,399
supply chain security um unfortunately

64
00:02:06,399 --> 00:02:07,360
it's not good today

65
00:02:07,360 --> 00:02:09,679
you're under attack i'm going to cover

66
00:02:09,679 --> 00:02:11,440
uh how's under attack

67
00:02:11,440 --> 00:02:13,599
by who and i think you can protect

68
00:02:13,599 --> 00:02:14,959
yourself today

69
00:02:14,959 --> 00:02:16,160
and then at the end i'm going to talk

70
00:02:16,160 --> 00:02:17,520
about some of the larger efforts going

71
00:02:17,520 --> 00:02:19,200
on to help solve this as an industry and

72
00:02:19,200 --> 00:02:20,560
how you can get involved to help out if

73
00:02:20,560 --> 00:02:23,840
you're interested

74
00:02:24,160 --> 00:02:25,599
let's start with the problem with open

75
00:02:25,599 --> 00:02:27,520
source i don't want to batch open source

76
00:02:27,520 --> 00:02:29,040
open source is amazing

77
00:02:29,040 --> 00:02:30,800
most of my career using and building it

78
00:02:30,800 --> 00:02:32,239
i'm sure everyone else here interacts

79
00:02:32,239 --> 00:02:34,080
with every single day

80
00:02:34,080 --> 00:02:36,080
but we do need to face the facts having

81
00:02:36,080 --> 00:02:37,360
a problem with open source

82
00:02:37,360 --> 00:02:39,200
helps our security is not a solution and

83
00:02:39,200 --> 00:02:41,920
it's not how we're going to solve them

84
00:02:41,920 --> 00:02:43,360
i'm going to start off here with one of

85
00:02:43,360 --> 00:02:45,519
those terrifying and depressing problems

86
00:02:45,519 --> 00:02:46,319
today

87
00:02:46,319 --> 00:02:47,680
i mean if you're not terrified by the

88
00:02:47,680 --> 00:02:49,840
time this session is over

89
00:02:49,840 --> 00:02:51,760
hopefully you can re-watch the recording

90
00:02:51,760 --> 00:02:53,760
and to keep doing that until you

91
00:02:53,760 --> 00:02:57,040
get terrified all right let's start out

92
00:02:57,040 --> 00:02:57,680
here with

93
00:02:57,680 --> 00:03:00,400
the first quiz um i don't know if

94
00:03:00,400 --> 00:03:02,159
everybody here remembers what this is

95
00:03:02,159 --> 00:03:05,680
um but this was a usb flash drive

96
00:03:05,680 --> 00:03:08,560
um before dropbox google drive and cloud

97
00:03:08,560 --> 00:03:10,239
storage is how people actually use the

98
00:03:10,239 --> 00:03:12,640
transfer files between computers

99
00:03:12,640 --> 00:03:15,680
um so first question is hopefully people

100
00:03:15,680 --> 00:03:16,000
are

101
00:03:16,000 --> 00:03:19,840
listening within the discord

102
00:03:21,120 --> 00:03:23,760
if you found one of these on the street

103
00:03:23,760 --> 00:03:25,280
would you pick it up and plug it into

104
00:03:25,280 --> 00:03:32,319
your personal laptop

105
00:03:32,319 --> 00:03:37,440
i don't want to answer here zero no

106
00:03:40,319 --> 00:03:43,599
no on the usb all right good um okay

107
00:03:43,599 --> 00:03:45,360
so it sounds like a little bit of a

108
00:03:45,360 --> 00:03:47,120
silly question but let's

109
00:03:47,120 --> 00:03:49,040
go a little bit farther with this if you

110
00:03:49,040 --> 00:03:50,560
found one of these outside of your

111
00:03:50,560 --> 00:03:52,080
office

112
00:03:52,080 --> 00:03:54,319
would you pick this up and take it into

113
00:03:54,319 --> 00:04:00,720
your office and plug into a work

114
00:04:00,720 --> 00:04:03,920
you know um okay even less so

115
00:04:03,920 --> 00:04:06,000
okay start to see where this is going

116
00:04:06,000 --> 00:04:08,000
okay so let's pretend you work in

117
00:04:08,000 --> 00:04:10,080
a data center not even allowed in the

118
00:04:10,080 --> 00:04:11,760
door so let's pretend you work in a

119
00:04:11,760 --> 00:04:12,799
production data center

120
00:04:12,799 --> 00:04:14,000
throughout the server maintenance in

121
00:04:14,000 --> 00:04:15,360
that data center and you found one of

122
00:04:15,360 --> 00:04:16,880
these on the sidewalk outside there you

123
00:04:16,880 --> 00:04:18,560
could take it and plug it into your

124
00:04:18,560 --> 00:04:22,560
server running your databases

125
00:04:23,360 --> 00:04:24,960
hopefully people start to see where this

126
00:04:24,960 --> 00:04:26,880
is going and hopefully people have

127
00:04:26,880 --> 00:04:28,000
received some kind of training

128
00:04:28,000 --> 00:04:29,280
on this from their company and what to

129
00:04:29,280 --> 00:04:31,040
do so everybody doesn't get these

130
00:04:31,040 --> 00:04:32,960
answers on the fly

131
00:04:32,960 --> 00:04:36,080
um this sounds like a silly uh question

132
00:04:36,080 --> 00:04:36,560
but

133
00:04:36,560 --> 00:04:38,080
the reason this has been happening to

134
00:04:38,080 --> 00:04:40,080
everybody so strongly by our security

135
00:04:40,080 --> 00:04:40,880
teams and our

136
00:04:40,880 --> 00:04:42,400
training departments because this is a

137
00:04:42,400 --> 00:04:44,560
real type of attack um this has been

138
00:04:44,560 --> 00:04:47,840
used dozens and dozens of times

139
00:04:47,840 --> 00:04:50,400
even at the international level if

140
00:04:50,400 --> 00:04:52,720
anybody remembers the stuxnet worm

141
00:04:52,720 --> 00:04:55,280
used to disrupt uranium enrichment that

142
00:04:55,280 --> 00:04:56,960
attack was allegedly carried out by

143
00:04:56,960 --> 00:04:58,960
dropping thumb drives near facilities in

144
00:04:58,960 --> 00:04:59,440
iran

145
00:04:59,440 --> 00:05:02,800
to reach an air gap um i even had a

146
00:05:02,800 --> 00:05:04,639
little bit of a run into this once

147
00:05:04,639 --> 00:05:06,479
uh and learned how seriously my company

148
00:05:06,479 --> 00:05:08,639
takes this type of threat

149
00:05:08,639 --> 00:05:10,240
i was living in san francisco back in

150
00:05:10,240 --> 00:05:12,560
the time

151
00:05:12,720 --> 00:05:14,000
getting some people in chat saying they

152
00:05:14,000 --> 00:05:15,600
can't see the presentation can anyone

153
00:05:15,600 --> 00:05:17,759
see it

154
00:05:17,759 --> 00:05:21,039
okay so some people can

155
00:05:22,720 --> 00:05:25,840
alright um

156
00:05:26,160 --> 00:05:29,680
sounds like it's working for some people

157
00:05:30,800 --> 00:05:33,440
okay uh all right sounds like there have

158
00:05:33,440 --> 00:05:35,039
been some intermittent problems

159
00:05:35,039 --> 00:05:37,280
hopefully people can get that resolved

160
00:05:37,280 --> 00:05:39,039
um yeah so i was living in san francisco

161
00:05:39,039 --> 00:05:40,800
in 2013 and a friend of mine had just

162
00:05:40,800 --> 00:05:41,360
gotten

163
00:05:41,360 --> 00:05:44,000
a brand new drone uh we went to fly it

164
00:05:44,000 --> 00:05:45,280
near the bay bridge

165
00:05:45,280 --> 00:05:47,680
in barcelona in san francisco drone

166
00:05:47,680 --> 00:05:49,120
technology was a little bit new at the

167
00:05:49,120 --> 00:05:50,639
time he didn't really know how to fly it

168
00:05:50,639 --> 00:05:52,160
that well so you got a little bit out of

169
00:05:52,160 --> 00:05:53,280
control with the drone

170
00:05:53,280 --> 00:05:54,880
and ended up crashing into a building

171
00:05:54,880 --> 00:05:56,880
across the street and landed on a

172
00:05:56,880 --> 00:05:58,560
balcony of that building

173
00:05:58,560 --> 00:05:59,919
if anybody's kind of familiar with that

174
00:05:59,919 --> 00:06:01,919
area the google office where i worked is

175
00:06:01,919 --> 00:06:02,800
right there

176
00:06:02,800 --> 00:06:04,240
i started looking and realized that you

177
00:06:04,240 --> 00:06:06,400
can crash the drone into my office

178
00:06:06,400 --> 00:06:08,960
so i went in um got my badge and wanted

179
00:06:08,960 --> 00:06:10,240
to look for the drone

180
00:06:10,240 --> 00:06:12,000
but it turned out our security team had

181
00:06:12,000 --> 00:06:13,919
already confiscated the drone

182
00:06:13,919 --> 00:06:16,240
i explained what had happened and they

183
00:06:16,240 --> 00:06:17,600
agreed to give the drone back to my

184
00:06:17,600 --> 00:06:18,800
friend but they were still a little bit

185
00:06:18,800 --> 00:06:19,840
worried because using

186
00:06:19,840 --> 00:06:21,440
pictures or spy on the office so they

187
00:06:21,440 --> 00:06:23,120
wouldn't give it to uh they would get

188
00:06:23,120 --> 00:06:24,400
the drone back unless he showed them

189
00:06:24,400 --> 00:06:26,400
that he wasn't taking photos

190
00:06:26,400 --> 00:06:29,280
uh but and this is the part that really

191
00:06:29,280 --> 00:06:30,639
taught me how

192
00:06:30,639 --> 00:06:32,319
seriously people take attacks like this

193
00:06:32,319 --> 00:06:34,639
is that they wouldn't plug his sd card

194
00:06:34,639 --> 00:06:36,160
into their own computer

195
00:06:36,160 --> 00:06:37,520
that's not scary they were this i mean

196
00:06:37,520 --> 00:06:39,199
him go home and get his own laptop

197
00:06:39,199 --> 00:06:40,800
plug that in and show them the pictures

198
00:06:40,800 --> 00:06:42,720
on it that would have been a kind of

199
00:06:42,720 --> 00:06:44,479
crazy attack vector but

200
00:06:44,479 --> 00:06:46,319
don't plug anything you don't trust into

201
00:06:46,319 --> 00:06:47,520
your computer because the overall

202
00:06:47,520 --> 00:06:50,000
message no matter how you find it

203
00:06:50,000 --> 00:06:52,000
that's how scary this is it's scary it

204
00:06:52,000 --> 00:06:54,160
should be

205
00:06:54,160 --> 00:06:56,319
so what does any of this have to do with

206
00:06:56,319 --> 00:06:58,880
uh open source security what do drawings

207
00:06:58,880 --> 00:07:01,440
and usb drives and or any which would

208
00:07:01,440 --> 00:07:01,919
have been

209
00:07:01,919 --> 00:07:05,280
broken source today all right so time

210
00:07:05,280 --> 00:07:07,280
for the next quiz back to the chat

211
00:07:07,280 --> 00:07:08,880
um what did we learn and what can we

212
00:07:08,880 --> 00:07:11,440
take away from these other examples

213
00:07:11,440 --> 00:07:12,880
what is the difference between plugging

214
00:07:12,880 --> 00:07:14,720
in one of these usb flash drives

215
00:07:14,720 --> 00:07:17,039
am i tying on a sidewalk into your

216
00:07:17,039 --> 00:07:18,319
laptop

217
00:07:18,319 --> 00:07:20,960
and typing this command api install

218
00:07:20,960 --> 00:07:22,560
express

219
00:07:22,560 --> 00:07:24,880
so your npm is that network management

220
00:07:24,880 --> 00:07:27,840
what is the difference between these two

221
00:07:27,840 --> 00:07:31,840
people meant it to plug place answers

222
00:07:39,680 --> 00:07:43,919
see some people are thinking about it

223
00:07:43,919 --> 00:07:47,599
trust in the contents of the files

224
00:07:56,840 --> 00:07:59,440
nothing

225
00:07:59,440 --> 00:08:01,120
not as much as you hope but a little bit

226
00:08:01,120 --> 00:08:02,560
of social care okay

227
00:08:02,560 --> 00:08:04,720
um so here's my answer i think most

228
00:08:04,720 --> 00:08:06,479
people are on track a little bit

229
00:08:06,479 --> 00:08:10,080
um my answer is only one of them says

230
00:08:10,080 --> 00:08:12,240
production when you plug a flash drive

231
00:08:12,240 --> 00:08:14,080
into your laptop it's kind of limited to

232
00:08:14,080 --> 00:08:14,720
that laptop

233
00:08:14,720 --> 00:08:16,400
but if you're typing if you have install

234
00:08:16,400 --> 00:08:18,240
express and packaging add up into an app

235
00:08:18,240 --> 00:08:19,599
that gets deployed to production

236
00:08:19,599 --> 00:08:20,800
it's gonna eventually run with a whole

237
00:08:20,800 --> 00:08:23,280
much more privilege um people will stay

238
00:08:23,280 --> 00:08:24,080
on track though

239
00:08:24,080 --> 00:08:26,639
uh in general we rely on social proof

240
00:08:26,639 --> 00:08:28,000
and hopefully

241
00:08:28,000 --> 00:08:29,759
uh assuming other people have looked at

242
00:08:29,759 --> 00:08:31,599
those files and trust them a little bit

243
00:08:31,599 --> 00:08:34,000
and uh hopefully nothing bad happens

244
00:08:34,000 --> 00:08:35,679
when we take this code that we've never

245
00:08:35,679 --> 00:08:36,479
seen before

246
00:08:36,479 --> 00:08:38,799
and run it on our computers or worship

247
00:08:38,799 --> 00:08:40,880
data centers

248
00:08:40,880 --> 00:08:42,958
um i don't really want to make an npm

249
00:08:42,958 --> 00:08:44,800
here this is a problem with

250
00:08:44,800 --> 00:08:46,399
package manager pretty much in open

251
00:08:46,399 --> 00:08:48,800
source today so let's jump and do

252
00:08:48,800 --> 00:08:51,120
another bit of a demo with a couple more

253
00:08:51,120 --> 00:08:52,720
quizzes

254
00:08:52,720 --> 00:08:56,800
so now i will try to tab away from

255
00:08:56,800 --> 00:09:00,080
implementation and

256
00:09:00,080 --> 00:09:05,040
cool people should see my uh

257
00:09:05,440 --> 00:09:09,279
my id here so uh this is a demo of go

258
00:09:09,279 --> 00:09:10,959
programming which is what i use for most

259
00:09:10,959 --> 00:09:12,720
of my program today

260
00:09:12,720 --> 00:09:14,080
and it suffers from most of these same

261
00:09:14,080 --> 00:09:15,680
problems so i'm going to show an example

262
00:09:15,680 --> 00:09:16,800
here

263
00:09:16,800 --> 00:09:19,120
of how a supply chain attack might get

264
00:09:19,120 --> 00:09:22,560
carried out and how hard it is to find

265
00:09:22,560 --> 00:09:25,600
this is a little toy project it's called

266
00:09:25,600 --> 00:09:27,600
numbers and it tells you whether or not

267
00:09:27,600 --> 00:09:28,720
a number

268
00:09:28,720 --> 00:09:30,399
tells you whether a number is even or

269
00:09:30,399 --> 00:09:33,120
odd so you can see how this works here

270
00:09:33,120 --> 00:09:37,839
go over on main.gov

271
00:09:40,880 --> 00:09:43,200
and we can see the implementation um

272
00:09:43,200 --> 00:09:44,720
this takes the number

273
00:09:44,720 --> 00:09:47,680
as input and it uses this uh percent

274
00:09:47,680 --> 00:09:50,000
sign which is the modulo operator um

275
00:09:50,000 --> 00:09:53,279
to tell if it's even or uh um this might

276
00:09:53,279 --> 00:09:54,880
be a little bit unfamiliar to you

277
00:09:54,880 --> 00:09:58,560
um and my colleagues let me switch

278
00:09:58,560 --> 00:10:01,279
over here um here's the github repo

279
00:10:01,279 --> 00:10:02,959
decided that the module operator was

280
00:10:02,959 --> 00:10:04,079
just hard to maintain

281
00:10:04,079 --> 00:10:07,040
so i got this pull request um to switch

282
00:10:07,040 --> 00:10:08,720
from using that custom logic to using an

283
00:10:08,720 --> 00:10:10,160
open source library here

284
00:10:10,160 --> 00:10:12,240
okay this is what the pull request looks

285
00:10:12,240 --> 00:10:14,240
like coming into my package

286
00:10:14,240 --> 00:10:16,480
um some changes to our go module

287
00:10:16,480 --> 00:10:17,600
definitions

288
00:10:17,600 --> 00:10:19,920
um an import statement and then it

289
00:10:19,920 --> 00:10:21,279
switches over here

290
00:10:21,279 --> 00:10:24,160
cool so this package is called odd as a

291
00:10:24,160 --> 00:10:24,640
function

292
00:10:24,640 --> 00:10:27,440
uh tell us something is even around um

293
00:10:27,440 --> 00:10:28,560
if i wasn't being that

294
00:10:28,560 --> 00:10:30,880
um conscientious i might just merge this

295
00:10:30,880 --> 00:10:32,480
and yeah i recommend it

296
00:10:32,480 --> 00:10:33,920
but let's pretend i know about open

297
00:10:33,920 --> 00:10:35,360
source supply chain attacks and i want

298
00:10:35,360 --> 00:10:35,680
to

299
00:10:35,680 --> 00:10:39,200
take a look here and see

300
00:10:39,200 --> 00:10:40,959
what's in this code before i merge it

301
00:10:40,959 --> 00:10:42,560
i'm going to take this

302
00:10:42,560 --> 00:10:46,800
and open this up on github is odd

303
00:10:46,800 --> 00:10:48,480
so we can see all the source code here

304
00:10:48,480 --> 00:10:50,320
it's got some tests which is awesome

305
00:10:50,320 --> 00:10:53,839
um i didn't have tests before

306
00:10:53,839 --> 00:10:56,399
i'll check out the implementation here

307
00:10:56,399 --> 00:10:57,519
nothing

308
00:10:57,519 --> 00:10:59,839
uh too tricky just calling cannoli

309
00:10:59,839 --> 00:11:00,720
library

310
00:11:00,720 --> 00:11:04,160
is even um and now

311
00:11:04,160 --> 00:11:06,880
if i want to be extra extra careful we

312
00:11:06,880 --> 00:11:08,000
can even take a look at the

313
00:11:08,000 --> 00:11:13,200
xeno library also tests

314
00:11:13,360 --> 00:11:14,480
all right we're being way more careful

315
00:11:14,480 --> 00:11:17,120
than 99 source maintainers probably

316
00:11:17,120 --> 00:11:17,920
would be

317
00:11:17,920 --> 00:11:21,200
we still don't see any problems so let's

318
00:11:21,200 --> 00:11:23,839
uh take this one extra step so let's

319
00:11:23,839 --> 00:11:24,240
actually

320
00:11:24,240 --> 00:11:26,800
check out that branch and run it and see

321
00:11:26,800 --> 00:11:29,600
what happens

322
00:11:29,600 --> 00:11:31,920
and check how to use library now let's

323
00:11:31,920 --> 00:11:33,600
do the same thing

324
00:11:33,600 --> 00:11:36,720
go run go for

325
00:11:36,720 --> 00:11:39,360
oh um see here is princeton starting at

326
00:11:39,360 --> 00:11:40,959
crypto line

327
00:11:40,959 --> 00:11:42,880
so even though i looked at all that code

328
00:11:42,880 --> 00:11:45,200
somehow a crypto miner got bored

329
00:11:45,200 --> 00:11:47,040
how did that happen does anyone have any

330
00:11:47,040 --> 00:11:48,399
guesses in the chat

331
00:11:48,399 --> 00:11:51,519
before i show how this slipped in

332
00:11:51,519 --> 00:11:54,240
and then uh how you might help detect

333
00:11:54,240 --> 00:11:57,839
this and prevent it

334
00:12:01,200 --> 00:12:04,160
let's add crypto code and all those date

335
00:12:04,160 --> 00:12:05,680
units i looked through

336
00:12:05,680 --> 00:12:11,839
where did that come from

337
00:12:13,920 --> 00:12:16,639
overloading synonyms and code stranger

338
00:12:16,639 --> 00:12:20,639
urls imported as a dependency

339
00:12:20,880 --> 00:12:23,040
um i assume i will go to synonyms we're

340
00:12:23,040 --> 00:12:24,160
talking about one of those attacks or

341
00:12:24,160 --> 00:12:26,000
something uses unicode

342
00:12:26,000 --> 00:12:29,200
characters um that's another organelle

343
00:12:29,200 --> 00:12:30,160
that's not what i did

344
00:12:30,160 --> 00:12:32,560
here reported as a dependency

345
00:12:32,560 --> 00:12:33,279
technically

346
00:12:33,279 --> 00:12:39,760
the only two that got pulled in were

347
00:12:39,760 --> 00:12:41,920
it is because it was hidden in a

348
00:12:41,920 --> 00:12:43,440
different version of

349
00:12:43,440 --> 00:12:45,839
the independency so i can show how you

350
00:12:45,839 --> 00:12:47,200
might have caught this

351
00:12:47,200 --> 00:12:50,320
uh there are two main ways uh one

352
00:12:50,320 --> 00:12:52,480
is we just actually go back and look

353
00:12:52,480 --> 00:12:54,639
through here you can see that

354
00:12:54,639 --> 00:12:56,720
we're using this specific version of the

355
00:12:56,720 --> 00:12:58,160
is even library

356
00:12:58,160 --> 00:13:00,399
so when i did my spot check i only

357
00:13:00,399 --> 00:13:01,680
looked at the top

358
00:13:01,680 --> 00:13:04,839
but it was hidden so we can take that

359
00:13:04,839 --> 00:13:07,839
commit

360
00:13:08,720 --> 00:13:10,560
and you can see that that one added a

361
00:13:10,560 --> 00:13:12,560
file to do once you print online

362
00:13:12,560 --> 00:13:14,079
thankfully you left this lock statement

363
00:13:14,079 --> 00:13:17,839
in just if you were able to detect it

364
00:13:17,920 --> 00:13:19,839
it was then deleted right after that so

365
00:13:19,839 --> 00:13:21,120
if you just look through the current

366
00:13:21,120 --> 00:13:22,560
state of the video repository you might

367
00:13:22,560 --> 00:13:24,320
never see these things

368
00:13:24,320 --> 00:13:25,600
to figure out what's actually getting

369
00:13:25,600 --> 00:13:28,000
merged here um i generally recommend

370
00:13:28,000 --> 00:13:29,120
vendoring dependencies

371
00:13:29,120 --> 00:13:32,399
so you can do google vendor

372
00:13:32,399 --> 00:13:35,839
then instead of just the uh descriptors

373
00:13:35,839 --> 00:13:36,320
here or

374
00:13:36,320 --> 00:13:38,000
the urls that are the trackpad and

375
00:13:38,000 --> 00:13:40,560
follow um it actually pulls the code in

376
00:13:40,560 --> 00:13:43,120
it's going to get used so we can go

377
00:13:43,120 --> 00:13:45,279
through here and see

378
00:13:45,279 --> 00:13:48,320
the util file start crypto so that

379
00:13:48,320 --> 00:13:49,680
actually checks these dependencies in

380
00:13:49,680 --> 00:13:50,560
your repo

381
00:13:50,560 --> 00:13:53,359
so if we did that

382
00:13:56,170 --> 00:13:59,309
[Music]

383
00:14:00,839 --> 00:14:03,839
around

384
00:14:05,279 --> 00:14:07,199
and then if we go back to github we'll

385
00:14:07,199 --> 00:14:10,560
review our pull request

386
00:14:13,360 --> 00:14:14,959
even though github hides these gifts by

387
00:14:14,959 --> 00:14:17,120
default if we um they're at least now

388
00:14:17,120 --> 00:14:17,920
part of it

389
00:14:17,920 --> 00:14:19,440
so if we actually open up all these

390
00:14:19,440 --> 00:14:21,600
files we would see cryptoliner in here

391
00:14:21,600 --> 00:14:25,440
that would make it a lot easier to catch

392
00:14:26,000 --> 00:14:28,880
all right so i'll jump back to the

393
00:14:28,880 --> 00:14:31,839
presentation

394
00:14:43,279 --> 00:14:44,959
awesome uh so i just showed drill

395
00:14:44,959 --> 00:14:47,199
modules i've talked about npm as well

396
00:14:47,199 --> 00:14:49,199
this is a problem with every package

397
00:14:49,199 --> 00:14:51,040
like i said um gold modules

398
00:14:51,040 --> 00:14:52,639
aren't all bad they do have some cool

399
00:14:52,639 --> 00:14:54,399
security features um

400
00:14:54,399 --> 00:14:56,959
but they're not perfect uh code review

401
00:14:56,959 --> 00:14:58,480
only shows the dependency metadata

402
00:14:58,480 --> 00:15:00,000
unless you're using vendoring

403
00:15:00,000 --> 00:15:01,440
that makes it hard to detect these

404
00:15:01,440 --> 00:15:03,920
things um

405
00:15:03,920 --> 00:15:06,399
uh and they go to you want a module

406
00:15:06,399 --> 00:15:07,760
proxy to store code

407
00:15:07,760 --> 00:15:10,240
from an intermediate location we were

408
00:15:10,240 --> 00:15:12,880
able to find that in a github repository

409
00:15:12,880 --> 00:15:14,959
that was reserved um if i had deleted

410
00:15:14,959 --> 00:15:16,320
the commit and that repository would

411
00:15:16,320 --> 00:15:17,680
have been even harder to find by going

412
00:15:17,680 --> 00:15:18,560
through there

413
00:15:18,560 --> 00:15:19,920
look at the go module approximate

414
00:15:19,920 --> 00:15:23,040
directory restores things

415
00:15:23,040 --> 00:15:26,079
um and with go and new effect

416
00:15:26,079 --> 00:15:28,000
of an ecosystem number of dependencies

417
00:15:28,000 --> 00:15:29,680
is growing pretty rapidly

418
00:15:29,680 --> 00:15:31,519
um it's hard to take the time to review

419
00:15:31,519 --> 00:15:32,959
each line in a large project

420
00:15:32,959 --> 00:15:35,759
but it doesn't make it so you can skip

421
00:15:35,759 --> 00:15:38,079
you're still taking arbitrary code or

422
00:15:38,079 --> 00:15:39,440
basically picking up flash drives from

423
00:15:39,440 --> 00:15:41,440
the sidewalk and plugging them in every

424
00:15:41,440 --> 00:15:42,800
time you install a dependency that you

425
00:15:42,800 --> 00:15:45,439
didn't look at it

426
00:15:47,920 --> 00:15:50,560
um so to sum up this problem um we all

427
00:15:50,560 --> 00:15:51,279
understand

428
00:15:51,279 --> 00:15:54,800
that software and code review throughout

429
00:15:54,800 --> 00:15:56,160
the software development process is

430
00:15:56,160 --> 00:15:57,839
important because people will know to

431
00:15:57,839 --> 00:15:59,360
take that spirit they've been working on

432
00:15:59,360 --> 00:16:00,160
the team

433
00:16:00,160 --> 00:16:02,160
but we've somehow let open source slip

434
00:16:02,160 --> 00:16:03,440
through the cracks

435
00:16:03,440 --> 00:16:04,959
um in general we hope that through

436
00:16:04,959 --> 00:16:06,880
social trust i'm having many eyes on the

437
00:16:06,880 --> 00:16:08,320
problem that stuff like this will get

438
00:16:08,320 --> 00:16:10,240
caught before it affects us

439
00:16:10,240 --> 00:16:12,160
but that's not always true these attacks

440
00:16:12,160 --> 00:16:13,680
are becoming more and more common so the

441
00:16:13,680 --> 00:16:15,279
chances of getting caught by one is

442
00:16:15,279 --> 00:16:17,199
increasing over time

443
00:16:17,199 --> 00:16:18,959
basically when everybody is responsible

444
00:16:18,959 --> 00:16:20,560
for reviewing open source software

445
00:16:20,560 --> 00:16:22,560
in many cases no one is responsible and

446
00:16:22,560 --> 00:16:25,360
no one's actually doing it

447
00:16:25,360 --> 00:16:27,279
um i showed how to review the source

448
00:16:27,279 --> 00:16:29,759
code for go um and it's easier than a

449
00:16:29,759 --> 00:16:30,639
lot of options

450
00:16:30,639 --> 00:16:33,120
because dependencies and go modules are

451
00:16:33,120 --> 00:16:34,480
just a source code

452
00:16:34,480 --> 00:16:36,000
imagine what that might look like for a

453
00:16:36,000 --> 00:16:37,680
language that packages uh

454
00:16:37,680 --> 00:16:40,880
build artifacts like java or even iphone

455
00:16:40,880 --> 00:16:41,839
or some of the other interpreter

456
00:16:41,839 --> 00:16:43,600
language from the transformation step

457
00:16:43,600 --> 00:16:45,839
between the gear repository source code

458
00:16:45,839 --> 00:16:47,519
and the final thing you download

459
00:16:47,519 --> 00:16:49,040
installed

460
00:16:49,040 --> 00:16:52,079
let's take a look at python and what it

461
00:16:52,079 --> 00:16:53,759
takes to trace something like this back

462
00:16:53,759 --> 00:16:57,279
for a popular python module

463
00:16:59,040 --> 00:17:02,839
so i'm going to jump back to

464
00:17:02,839 --> 00:17:05,839
demo um

465
00:17:05,839 --> 00:17:08,000
we are going to start out with the

466
00:17:08,000 --> 00:17:09,359
requests library

467
00:17:09,359 --> 00:17:14,559
in python forgot the url

468
00:17:14,559 --> 00:17:18,240
if anybody has used python for

469
00:17:18,240 --> 00:17:20,160
a while um you're probably familiar with

470
00:17:20,160 --> 00:17:21,520
the requests library

471
00:17:21,520 --> 00:17:25,439
this is how most um

472
00:17:25,439 --> 00:17:27,199
http requests are made by this is one of

473
00:17:27,199 --> 00:17:28,799
the most popular libraries

474
00:17:28,799 --> 00:17:30,320
so if you go to the python package index

475
00:17:30,320 --> 00:17:32,559
and you type pip install requests

476
00:17:32,559 --> 00:17:35,760
this is roughly what you're going to get

477
00:17:35,760 --> 00:17:37,360
we can look through here this tells us

478
00:17:37,360 --> 00:17:39,360
that the source code for requests

479
00:17:39,360 --> 00:17:41,840
is here on github you can click over to

480
00:17:41,840 --> 00:17:44,080
that to see the source code

481
00:17:44,080 --> 00:17:45,919
but if we download this through pip

482
00:17:45,919 --> 00:17:47,360
we're not actually going to get it

483
00:17:47,360 --> 00:17:50,640
break in this file um how do we

484
00:17:50,640 --> 00:17:52,640
know that what's in this file came from

485
00:17:52,640 --> 00:17:54,080
this repository

486
00:17:54,080 --> 00:17:55,679
um well the short answer is that we

487
00:17:55,679 --> 00:17:57,120
really don't we're trusting the

488
00:17:57,120 --> 00:17:59,039
maintainers of this to faithfully

489
00:17:59,039 --> 00:18:01,679
upload uh the build artifact from this

490
00:18:01,679 --> 00:18:04,000
github repository over to python package

491
00:18:04,000 --> 00:18:05,039
index

492
00:18:05,039 --> 00:18:08,400
um requests is huge and popular

493
00:18:08,400 --> 00:18:09,840
so we'll get kind of a pretty good

494
00:18:09,840 --> 00:18:11,440
feature that's what's happening

495
00:18:11,440 --> 00:18:14,480
if we look inside file

496
00:18:14,480 --> 00:18:15,840
and you can see that they actually have

497
00:18:15,840 --> 00:18:18,080
a script here to publish

498
00:18:18,080 --> 00:18:21,039
a release it installs another dependency

499
00:18:21,039 --> 00:18:22,799
which if you kind of have an adversarial

500
00:18:22,799 --> 00:18:25,120
already had on

501
00:18:25,120 --> 00:18:26,559
you might get a little suspicious but

502
00:18:26,559 --> 00:18:29,039
it's not something called time

503
00:18:29,039 --> 00:18:31,039
of running some build commands you

504
00:18:31,039 --> 00:18:33,120
shouldn't want to upload that

505
00:18:33,120 --> 00:18:35,120
so if you were able to project some code

506
00:18:35,120 --> 00:18:36,720
into twine you actually have a chance to

507
00:18:36,720 --> 00:18:40,640
modify this code before it gets uploaded

508
00:18:41,360 --> 00:18:42,480
how do we know that this is what

509
00:18:42,480 --> 00:18:44,640
maintainers actually ran them we have no

510
00:18:44,640 --> 00:18:45,120
idea

511
00:18:45,120 --> 00:18:46,720
but since it's python we can still kind

512
00:18:46,720 --> 00:18:48,400
of do some basic verification

513
00:18:48,400 --> 00:18:50,640
thumb and download and keep varying so

514
00:18:50,640 --> 00:18:52,160
what would it look like to actually have

515
00:18:52,160 --> 00:18:53,679
to do something like that for python

516
00:18:53,679 --> 00:18:55,440
we've got a couple scripts here so i

517
00:18:55,440 --> 00:18:56,799
don't have to

518
00:18:56,799 --> 00:18:59,600
remember all this bash time as i go but

519
00:18:59,600 --> 00:19:00,880
we can download the source code from

520
00:19:00,880 --> 00:19:01,520
github

521
00:19:01,520 --> 00:19:04,000
um git clone and check out the specific

522
00:19:04,000 --> 00:19:05,360
version we've looked at

523
00:19:05,360 --> 00:19:07,360
open that up um and then we're also

524
00:19:07,360 --> 00:19:09,120
going to download the published wheel

525
00:19:09,120 --> 00:19:10,400
which is what a python artifact is

526
00:19:10,400 --> 00:19:11,120
called

527
00:19:11,120 --> 00:19:14,160
um and explore those and then we can

528
00:19:14,160 --> 00:19:17,039
combine both of these and gift the two

529
00:19:17,039 --> 00:19:17,919
directors

530
00:19:17,919 --> 00:19:20,080
so for this one if we do it hopefully we

531
00:19:20,080 --> 00:19:21,679
should see nothing

532
00:19:21,679 --> 00:19:26,000
too drastically different now

533
00:19:26,080 --> 00:19:28,480
download the source code um and then the

534
00:19:28,480 --> 00:19:30,320
disk started okay so there actually are

535
00:19:30,320 --> 00:19:32,160
uh some files that are only in the git

536
00:19:32,160 --> 00:19:34,400
repository facebook

537
00:19:34,400 --> 00:19:36,840
like kind of overplay it the document

538
00:19:36,840 --> 00:19:38,080
directory

539
00:19:38,080 --> 00:19:39,280
settings and stuff like that that you

540
00:19:39,280 --> 00:19:41,120
don't necessarily need

541
00:19:41,120 --> 00:19:44,880
um the main meat of this is the same

542
00:19:44,880 --> 00:19:47,679
overall request for entry um so it is

543
00:19:47,679 --> 00:19:48,240
possible

544
00:19:48,240 --> 00:19:50,000
to verify these kind of things in python

545
00:19:50,000 --> 00:19:52,000
and other interpret languages

546
00:19:52,000 --> 00:19:53,360
but now imagine what it would look like

547
00:19:53,360 --> 00:19:54,880
to actually do this every single time

548
00:19:54,880 --> 00:19:57,600
you install the package

549
00:19:57,600 --> 00:20:00,240
or for a language like java just get

550
00:20:00,240 --> 00:20:02,080
packaged up into jars which are a lot

551
00:20:02,080 --> 00:20:02,960
harder to

552
00:20:02,960 --> 00:20:05,840
compose and inspect how many people out

553
00:20:05,840 --> 00:20:06,240
there

554
00:20:06,240 --> 00:20:07,600
are actually doing this stuff for every

555
00:20:07,600 --> 00:20:10,000
packaging

556
00:20:10,000 --> 00:20:12,240
and this isn't even really a full demo i

557
00:20:12,240 --> 00:20:14,000
did this for the request package but if

558
00:20:14,000 --> 00:20:14,960
you actually type

559
00:20:14,960 --> 00:20:16,880
installed requests you're gonna get

560
00:20:16,880 --> 00:20:18,559
probably a dozen or so packages the

561
00:20:18,559 --> 00:20:20,400
request depends on

562
00:20:20,400 --> 00:20:22,640
so taking the time to follow all those

563
00:20:22,640 --> 00:20:24,559
packages back to their repositories

564
00:20:24,559 --> 00:20:26,320
the exact versions that they got

565
00:20:26,320 --> 00:20:28,480
downloaded from and comparing file by

566
00:20:28,480 --> 00:20:29,120
file

567
00:20:29,120 --> 00:20:30,240
isn't something that most people are

568
00:20:30,240 --> 00:20:31,120
going to take the time to do

569
00:20:31,120 --> 00:20:33,120
realistically you know each one of those

570
00:20:33,120 --> 00:20:34,640
is a potential attack vector

571
00:20:34,640 --> 00:20:37,600
into your application

572
00:20:39,280 --> 00:20:49,840
let's try to jump back here

573
00:20:53,840 --> 00:20:55,280
so these are all simple applications

574
00:20:55,280 --> 00:20:57,039
that just had a couple dependencies

575
00:20:57,039 --> 00:20:58,720
um even the request itself only has a

576
00:20:58,720 --> 00:21:00,559
couple dependencies

577
00:21:00,559 --> 00:21:02,720
to go from although one of the projects

578
00:21:02,720 --> 00:21:04,240
that i spent a lot of time working on

579
00:21:04,240 --> 00:21:06,400
most people um in the cloud of engineer

580
00:21:06,400 --> 00:21:07,760
space and colleague whoever uses

581
00:21:07,760 --> 00:21:08,720
kubernetes

582
00:21:08,720 --> 00:21:10,159
one of the most active projects on

583
00:21:10,159 --> 00:21:11,840
github this right here

584
00:21:11,840 --> 00:21:14,720
is terrifying monstrosity chart on the

585
00:21:14,720 --> 00:21:15,200
left

586
00:21:15,200 --> 00:21:16,960
snapshot of the dependency graph of the

587
00:21:16,960 --> 00:21:18,320
kubernetes project

588
00:21:18,320 --> 00:21:20,880
taken a few months ago uh kubernetes is

589
00:21:20,880 --> 00:21:21,919
built in the go

590
00:21:21,919 --> 00:21:23,520
like i showed before and it does make

591
00:21:23,520 --> 00:21:25,120
use of vendors it changes the

592
00:21:25,120 --> 00:21:26,880
dependencies get checked into

593
00:21:26,880 --> 00:21:30,640
the kubernetes source management system

594
00:21:30,640 --> 00:21:33,440
um you can see how very deep and nested

595
00:21:33,440 --> 00:21:34,480
all of this gets

596
00:21:34,480 --> 00:21:37,360
in a large project

597
00:21:37,919 --> 00:21:39,919
but even with the kubernetes i think

598
00:21:39,919 --> 00:21:41,360
each one of these dependencies has a

599
00:21:41,360 --> 00:21:42,799
whole bunch of other dependencies

600
00:21:42,799 --> 00:21:45,120
and it takes a lot of time to start to

601
00:21:45,120 --> 00:21:47,520
review these things

602
00:21:47,520 --> 00:21:48,720
some of these are coming from

603
00:21:48,720 --> 00:21:50,400
trustworthy sources and we don't need to

604
00:21:50,400 --> 00:21:51,440
take as close a look

605
00:21:51,440 --> 00:21:54,640
at stuff here from microsoft um this is

606
00:21:54,640 --> 00:21:56,799
just a snapshot of a couple things

607
00:21:56,799 --> 00:21:59,200
to finish

608
00:22:00,799 --> 00:22:02,159
but there's something from a trustworthy

609
00:22:02,159 --> 00:22:04,320
source like microsoft but then um a

610
00:22:04,320 --> 00:22:05,679
whole bunch of basically just smaller

611
00:22:05,679 --> 00:22:07,760
personal github repositories

612
00:22:07,760 --> 00:22:10,240
um that are now being imported by these

613
00:22:10,240 --> 00:22:12,640
treatment service attachments

614
00:22:12,640 --> 00:22:15,760
think about how long it would take if

615
00:22:15,760 --> 00:22:17,600
you just started working on

616
00:22:17,600 --> 00:22:20,159
one of these projects to get um admin or

617
00:22:20,159 --> 00:22:21,520
maintenance privileges

618
00:22:21,520 --> 00:22:22,960
on these repositories where you can put

619
00:22:22,960 --> 00:22:24,640
in any code you want

620
00:22:24,640 --> 00:22:26,240
and wait long enough for the update

621
00:22:26,240 --> 00:22:28,000
picked up and pulled into upstream

622
00:22:28,000 --> 00:22:29,120
dependencies

623
00:22:29,120 --> 00:22:31,280
um and making into larger larger

624
00:22:31,280 --> 00:22:33,039
products

625
00:22:33,039 --> 00:22:34,799
it's another small problem though um

626
00:22:34,799 --> 00:22:36,640
even if we do we say we trust a couple

627
00:22:36,640 --> 00:22:38,720
of these

628
00:22:38,720 --> 00:22:41,200
organizations or large projects uh we

629
00:22:41,200 --> 00:22:42,400
have no way to actually guarantee that

630
00:22:42,400 --> 00:22:43,679
this came from microsoft

631
00:22:43,679 --> 00:22:45,360
it could be making use of one of those

632
00:22:45,360 --> 00:22:47,120
you are also wanting our typo spawning

633
00:22:47,120 --> 00:22:47,840
things

634
00:22:47,840 --> 00:22:49,919
he's one of those opposed actually one

635
00:22:49,919 --> 00:22:51,440
of those unique characters that looks

636
00:22:51,440 --> 00:22:52,320
like one

637
00:22:52,320 --> 00:22:54,880
um there's no kind of public key or

638
00:22:54,880 --> 00:22:56,400
assigning infrastructure for us to know

639
00:22:56,400 --> 00:22:57,600
that these are coming from the people we

640
00:22:57,600 --> 00:22:59,840
think they are

641
00:22:59,840 --> 00:23:02,080
if you uh start to get excited and think

642
00:23:02,080 --> 00:23:03,440
about a red team

643
00:23:03,440 --> 00:23:05,520
scenario here if you just had a couple

644
00:23:05,520 --> 00:23:07,360
months how long would it take you to

645
00:23:07,360 --> 00:23:08,799
get maintenance privileges on something

646
00:23:08,799 --> 00:23:11,200
like this you can merge code and

647
00:23:11,200 --> 00:23:13,679
get malicious code into clusters all

648
00:23:13,679 --> 00:23:15,039
over the world

649
00:23:15,039 --> 00:23:17,200
this isn't really scalable today we're

650
00:23:17,200 --> 00:23:18,960
viewing and preventing these things

651
00:23:18,960 --> 00:23:21,760
new tools new practices and these new

652
00:23:21,760 --> 00:23:23,600
systems to help solve this in a scalable

653
00:23:23,600 --> 00:23:26,719
way across the industry

654
00:23:28,400 --> 00:23:29,919
i'm going to talk about a little bit of

655
00:23:29,919 --> 00:23:32,799
history and why now

656
00:23:32,799 --> 00:23:35,280
open source has been around for decades

657
00:23:35,280 --> 00:23:36,159
and decades

658
00:23:36,159 --> 00:23:38,000
and decades um so why are we only

659
00:23:38,000 --> 00:23:39,200
worrying about this today when people

660
00:23:39,200 --> 00:23:40,320
have been copying around

661
00:23:40,320 --> 00:23:43,440
and using it for so long um

662
00:23:43,440 --> 00:23:46,080
your um overall kind of history of this

663
00:23:46,080 --> 00:23:47,600
uh this attack has been known about

664
00:23:47,600 --> 00:23:48,080
since

665
00:23:48,080 --> 00:23:50,799
at least 1984 there was a paper

666
00:23:50,799 --> 00:23:52,720
published called reflections on trusting

667
00:23:52,720 --> 00:23:54,080
trust

668
00:23:54,080 --> 00:23:57,520
it shows turtles all the way down here

669
00:23:57,520 --> 00:23:59,200
even if you trust all the source code

670
00:23:59,200 --> 00:24:00,720
that's coming in you also have to trust

671
00:24:00,720 --> 00:24:02,400
all the tools involved

672
00:24:02,400 --> 00:24:04,240
i mean this paper showed an even scarier

673
00:24:04,240 --> 00:24:05,840
scenario where somebody

674
00:24:05,840 --> 00:24:09,200
uh they could modify it as a compiler um

675
00:24:09,200 --> 00:24:10,799
source code that could insert backdoors

676
00:24:10,799 --> 00:24:12,640
and everyday programs that that compiler

677
00:24:12,640 --> 00:24:13,679
built

678
00:24:13,679 --> 00:24:15,520
um and there's some really funny stuff

679
00:24:15,520 --> 00:24:17,279
there where they insert uh back doors

680
00:24:17,279 --> 00:24:18,799
into the disassemblers and everything

681
00:24:18,799 --> 00:24:19,279
too

682
00:24:19,279 --> 00:24:20,880
so even if you use the disassemblers to

683
00:24:20,880 --> 00:24:22,080
look for these back doors those

684
00:24:22,080 --> 00:24:23,679
disassemblers have been compromised

685
00:24:23,679 --> 00:24:26,400
they have no hyperloops so it's kind of

686
00:24:26,400 --> 00:24:27,600
troubles all the way down if you don't

687
00:24:27,600 --> 00:24:28,159
know how

688
00:24:28,159 --> 00:24:30,240
the tools you use were built or the

689
00:24:30,240 --> 00:24:32,480
tools that built those tools um

690
00:24:32,480 --> 00:24:36,320
it's kind of a nightmare scenario

691
00:24:36,320 --> 00:24:37,440
uh so people have known about these

692
00:24:37,440 --> 00:24:38,880
attacks forever they have started to

693
00:24:38,880 --> 00:24:40,080
accelerate though

694
00:24:40,080 --> 00:24:43,919
which is the working part um in 2006

695
00:24:43,919 --> 00:24:45,520
i got pretty worried and made a whole

696
00:24:45,520 --> 00:24:47,039
bunch of security improvements

697
00:24:47,039 --> 00:24:49,520
and a bunch of debian and red hat

698
00:24:49,520 --> 00:24:51,840
package repositories were poisoned

699
00:24:51,840 --> 00:24:53,360
people were able to insert malicious

700
00:24:53,360 --> 00:24:54,960
packages right into the places that

701
00:24:54,960 --> 00:24:56,480
everyone installs and their security

702
00:24:56,480 --> 00:24:58,480
tools and competitors from

703
00:24:58,480 --> 00:25:00,640
um 2010 there's a stuxnet where i might

704
00:25:00,640 --> 00:25:01,600
mention before

705
00:25:01,600 --> 00:25:06,960
to disrupt an international scale

706
00:25:06,960 --> 00:25:09,039
um some similar attacks have happened on

707
00:25:09,039 --> 00:25:10,480
criminal.org with one external

708
00:25:10,480 --> 00:25:11,120
development

709
00:25:11,120 --> 00:25:14,159
story and uh even

710
00:25:14,159 --> 00:25:16,720
uh in the new baggage management space

711
00:25:16,720 --> 00:25:17,600
um i

712
00:25:17,600 --> 00:25:19,840
like to call out the docker one two

713
00:25:19,840 --> 00:25:20,720
three three two

714
00:25:20,720 --> 00:25:23,919
one attack um it didn't have a huge

715
00:25:23,919 --> 00:25:24,640
impact

716
00:25:24,640 --> 00:25:26,000
but it is pretty scary when you think

717
00:25:26,000 --> 00:25:27,919
about what happened when docker was

718
00:25:27,919 --> 00:25:28,400
first

719
00:25:28,400 --> 00:25:30,640
gaining momentum and dr hoga was an open

720
00:25:30,640 --> 00:25:31,520
source

721
00:25:31,520 --> 00:25:34,400
uh repository for container it was a

722
00:25:34,400 --> 00:25:36,000
group of people um i don't think they

723
00:25:36,000 --> 00:25:37,440
were ever really

724
00:25:37,440 --> 00:25:38,640
started publishing a whole bunch of

725
00:25:38,640 --> 00:25:40,799
useful containers with

726
00:25:40,799 --> 00:25:44,080
my sql tomcat coming some crypto

727
00:25:44,080 --> 00:25:46,320
uh images were published on them they

728
00:25:46,320 --> 00:25:47,600
did a good job of maintaining them and

729
00:25:47,600 --> 00:25:49,039
keeping them up to date

730
00:25:49,039 --> 00:25:52,320
for years and people started using

731
00:25:52,320 --> 00:25:53,919
stuff in docker one two three three two

732
00:25:53,919 --> 00:25:55,440
one then eventually

733
00:25:55,440 --> 00:25:57,360
um they inserted put the lining into

734
00:25:57,360 --> 00:25:58,480
these

735
00:25:58,480 --> 00:26:01,120
container images slowly over time it

736
00:26:01,120 --> 00:26:02,880
shows that if you're patient

737
00:26:02,880 --> 00:26:04,799
and actually do useful work people will

738
00:26:04,799 --> 00:26:06,159
build on you and

739
00:26:06,159 --> 00:26:07,679
end up you the way open source is

740
00:26:07,679 --> 00:26:09,360
supposed to happen and then you can

741
00:26:09,360 --> 00:26:11,360
reach that trust by using that platform

742
00:26:11,360 --> 00:26:12,000
you've built

743
00:26:12,000 --> 00:26:15,360
to um inject ransomware or crypto mining

744
00:26:15,360 --> 00:26:18,640
or all sorts of terrible things

745
00:26:18,640 --> 00:26:20,400
there have been much others recently

746
00:26:20,400 --> 00:26:22,080
like the webmin attack

747
00:26:22,080 --> 00:26:23,919
that one was the build server compromise

748
00:26:23,919 --> 00:26:25,840
so the ci system was used to publish

749
00:26:25,840 --> 00:26:26,400
webmin

750
00:26:26,400 --> 00:26:28,960
a popular remote administration tool for

751
00:26:28,960 --> 00:26:30,159
servers was compromised

752
00:26:30,159 --> 00:26:32,240
so every release had some code injected

753
00:26:32,240 --> 00:26:34,159
into it to add a backdoor to a server

754
00:26:34,159 --> 00:26:35,919
administration tool

755
00:26:35,919 --> 00:26:38,240
and that was in a while for a while when

756
00:26:38,240 --> 00:26:39,279
you start thinking about you know

757
00:26:39,279 --> 00:26:41,520
resource supply chain um it's every

758
00:26:41,520 --> 00:26:42,480
piece of

759
00:26:42,480 --> 00:26:43,919
the way that this stuff gets delivered

760
00:26:43,919 --> 00:26:45,679
to you it's not just the source code

761
00:26:45,679 --> 00:26:47,120
it's also the build tools and both

762
00:26:47,120 --> 00:26:48,480
systems and every one of those

763
00:26:48,480 --> 00:26:50,799
is an attack factor it's really exciting

764
00:26:50,799 --> 00:26:52,720
if you've got a red team on

765
00:26:52,720 --> 00:26:56,480
uh really scary for anyone else

766
00:26:58,960 --> 00:27:01,279
um some more numbers here just to show

767
00:27:01,279 --> 00:27:02,559
the scale of this problem

768
00:27:02,559 --> 00:27:05,279
um in 2020 has been a year full of

769
00:27:05,279 --> 00:27:07,200
pretty bad news i might need to have

770
00:27:07,200 --> 00:27:09,200
a few solid fire here and scare people

771
00:27:09,200 --> 00:27:10,400
anymore but

772
00:27:10,400 --> 00:27:12,400
uh supply chain attacks this year aren't

773
00:27:12,400 --> 00:27:14,720
looking any better than everything else

774
00:27:14,720 --> 00:27:16,480
um there are 11 million developers

775
00:27:16,480 --> 00:27:18,240
running npm commands each month

776
00:27:18,240 --> 00:27:19,840
grabbing packages from the internet and

777
00:27:19,840 --> 00:27:21,279
installing it

778
00:27:21,279 --> 00:27:23,760
um there's been an 80 percent increase

779
00:27:23,760 --> 00:27:25,039
in supply chain attacks

780
00:27:25,039 --> 00:27:28,799
in 2019 2020 isn't over yet but

781
00:27:28,799 --> 00:27:32,000
seeing a similar increase so far

782
00:27:32,000 --> 00:27:33,360
pretty much everyone is using open

783
00:27:33,360 --> 00:27:34,960
source software whether or not you know

784
00:27:34,960 --> 00:27:35,520
you are

785
00:27:35,520 --> 00:27:39,279
um 97 of the company is using it in some

786
00:27:39,279 --> 00:27:40,559
form

787
00:27:40,559 --> 00:27:42,159
so pretty much everyone needs to be

788
00:27:42,159 --> 00:27:44,080
worried about this problem

789
00:27:44,080 --> 00:27:47,279
um and then there is the scale of code

790
00:27:47,279 --> 00:27:48,480
sharing with things like

791
00:27:48,480 --> 00:27:50,640
github and awesome package managers it

792
00:27:50,640 --> 00:27:51,600
comes

793
00:27:51,600 --> 00:27:54,880
more and more using other people's code

794
00:27:54,880 --> 00:27:57,520
the average node project has 86

795
00:27:57,520 --> 00:27:58,559
dependencies

796
00:27:58,559 --> 00:28:00,080
that's just across all github so it's

797
00:28:00,080 --> 00:28:01,679
small and large

798
00:28:01,679 --> 00:28:03,760
many products i've looked at have one or

799
00:28:03,760 --> 00:28:05,200
two orders of magnitude one

800
00:28:05,200 --> 00:28:07,919
that getting pulled in every time you

801
00:28:07,919 --> 00:28:09,520
add something you need to think about

802
00:28:09,520 --> 00:28:12,559
the different attack factors here

803
00:28:12,559 --> 00:28:16,480
opening up for people into your code

804
00:28:16,480 --> 00:28:18,720
by any interpretation here this is

805
00:28:18,720 --> 00:28:22,320
serious and getting even worse

806
00:28:22,880 --> 00:28:25,520
again why now why are people only doing

807
00:28:25,520 --> 00:28:27,520
this now and why is it rising

808
00:28:27,520 --> 00:28:31,360
well the cost per hack and

809
00:28:31,360 --> 00:28:34,000
the rest of software is increasing all

810
00:28:34,000 --> 00:28:35,279
of us are either trying to protect

811
00:28:35,279 --> 00:28:37,600
systems or doing our job we're closing

812
00:28:37,600 --> 00:28:40,159
all the other doors people stopped

813
00:28:40,159 --> 00:28:41,600
leaving servers just open to the

814
00:28:41,600 --> 00:28:44,159
internet we're all using https um

815
00:28:44,159 --> 00:28:46,080
most of the other common entry points

816
00:28:46,080 --> 00:28:47,279
are getting

817
00:28:47,279 --> 00:28:49,360
tougher so attackers will actually find

818
00:28:49,360 --> 00:28:52,240
the easiest way to

819
00:28:52,559 --> 00:28:54,559
the rise of open source at this point

820
00:28:54,559 --> 00:28:56,159
it's probably the easiest place to

821
00:28:56,159 --> 00:28:57,200
inject things

822
00:28:57,200 --> 00:29:00,000
um not everyone uses uh not all software

823
00:29:00,000 --> 00:29:01,039
is open source

824
00:29:01,039 --> 00:29:02,080
and you have to technically have to

825
00:29:02,080 --> 00:29:03,679
worry about these type of moves coming

826
00:29:03,679 --> 00:29:05,039
in from paid vendors

827
00:29:05,039 --> 00:29:06,640
but that's much harder than open source

828
00:29:06,640 --> 00:29:13,679
so that's the easiest attackers

829
00:29:13,679 --> 00:29:15,840
all right so now if the scary part is

830
00:29:15,840 --> 00:29:16,960
over um

831
00:29:16,960 --> 00:29:18,880
everyone can relax and start talking

832
00:29:18,880 --> 00:29:21,279
about some reassuring things hopefully

833
00:29:21,279 --> 00:29:23,840
um if you want to kind of jump out of

834
00:29:23,840 --> 00:29:26,240
this and start looking at every line of

835
00:29:26,240 --> 00:29:27,760
your dependency code in your application

836
00:29:27,760 --> 00:29:29,200
i completely understand you don't have

837
00:29:29,200 --> 00:29:30,720
to listen to the rest of this

838
00:29:30,720 --> 00:29:32,480
um hopefully this will be recorded and

839
00:29:32,480 --> 00:29:34,159
you can watch the rest later

840
00:29:34,159 --> 00:29:36,720
but now it comes the optimistic part um

841
00:29:36,720 --> 00:29:38,559
how you can protect yourself today and

842
00:29:38,559 --> 00:29:39,840
what we're doing to

843
00:29:39,840 --> 00:29:44,559
make this um harder at manage your level

844
00:29:45,360 --> 00:29:47,919
how to protect yourself um thankfully

845
00:29:47,919 --> 00:29:49,440
nothing here is

846
00:29:49,440 --> 00:29:51,520
too complicated um you just need to

847
00:29:51,520 --> 00:29:52,480
start protecting

848
00:29:52,480 --> 00:29:54,880
your supply chain first you need to lock

849
00:29:54,880 --> 00:29:56,799
down your own repositories

850
00:29:56,799 --> 00:29:58,320
some basic stuff like enabling and

851
00:29:58,320 --> 00:30:00,000
requiring two-factor authentication for

852
00:30:00,000 --> 00:30:02,000
every one of your contributors

853
00:30:02,000 --> 00:30:03,600
if someone you know an employee

854
00:30:03,600 --> 00:30:05,440
intercompany or another resource

855
00:30:05,440 --> 00:30:06,880
container that you trust

856
00:30:06,880 --> 00:30:08,720
on the city of code if they're not using

857
00:30:08,720 --> 00:30:10,000
two-factor authentication they could

858
00:30:10,000 --> 00:30:11,679
have been compromised

859
00:30:11,679 --> 00:30:13,600
so you need to start requiring everyone

860
00:30:13,600 --> 00:30:16,320
to adopt basic security standards

861
00:30:16,320 --> 00:30:17,840
require everything to go through code

862
00:30:17,840 --> 00:30:19,360
review and actually take the time

863
00:30:19,360 --> 00:30:20,640
to review the code that's coming in

864
00:30:20,640 --> 00:30:23,200
whether it's yours or not

865
00:30:23,200 --> 00:30:25,600
um this one is essentially this kind of

866
00:30:25,600 --> 00:30:26,240
painful

867
00:30:26,240 --> 00:30:28,720
reduce your dependencies uh dependencies

868
00:30:28,720 --> 00:30:29,440
are great and

869
00:30:29,440 --> 00:30:31,679
easy to get stuff done quickly but you

870
00:30:31,679 --> 00:30:33,679
need to think about every dependency as

871
00:30:33,679 --> 00:30:36,000
an attack evaluate if you really need

872
00:30:36,000 --> 00:30:36,960
your home

873
00:30:36,960 --> 00:30:38,960
using something great it's in hundreds

874
00:30:38,960 --> 00:30:40,399
of non-great

875
00:30:40,399 --> 00:30:42,480
uh second level dependencies that's a

876
00:30:42,480 --> 00:30:43,919
problem

877
00:30:43,919 --> 00:30:45,440
uh take that into account as you're

878
00:30:45,440 --> 00:30:48,399
evaluating what to build on

879
00:30:48,399 --> 00:30:51,520
then uh the even tougher part um it's

880
00:30:51,520 --> 00:30:52,240
not tough

881
00:30:52,240 --> 00:30:54,240
from a complexity perspective it's tough

882
00:30:54,240 --> 00:30:55,679
it isn't painful

883
00:30:55,679 --> 00:30:57,600
at times you need to audit your

884
00:30:57,600 --> 00:30:59,039
dependencies um

885
00:30:59,039 --> 00:31:00,720
track updates to them but you need to

886
00:31:00,720 --> 00:31:02,240
review these updates just like first

887
00:31:02,240 --> 00:31:03,440
party code

888
00:31:03,440 --> 00:31:07,120
you need to go through everything

889
00:31:07,440 --> 00:31:09,679
this isn't only about people inserting

890
00:31:09,679 --> 00:31:10,640
malicious code

891
00:31:10,640 --> 00:31:12,399
dependencies have bugs too sometimes

892
00:31:12,399 --> 00:31:14,240
those bugs need to vulnerabilities to

893
00:31:14,240 --> 00:31:14,960
get reported

894
00:31:14,960 --> 00:31:18,159
cdus if you're not checking uh your

895
00:31:18,159 --> 00:31:20,799
dependencies you have cbd databases um

896
00:31:20,799 --> 00:31:21,600
then you have

897
00:31:21,600 --> 00:31:22,880
a bunch of different supply chain

898
00:31:22,880 --> 00:31:25,120
problems

899
00:31:25,120 --> 00:31:28,000
then the final piece um making your cict

900
00:31:28,000 --> 00:31:28,640
pipeline

901
00:31:28,640 --> 00:31:31,200
observable so this is not so much about

902
00:31:31,200 --> 00:31:32,720
protection but it's about

903
00:31:32,720 --> 00:31:35,840
mitigation after the fact if you

904
00:31:35,840 --> 00:31:37,919
aren't vlogging every single version and

905
00:31:37,919 --> 00:31:39,120
every single bit shot

906
00:31:39,120 --> 00:31:41,600
and every commit and every digest of

907
00:31:41,600 --> 00:31:43,200
every artifact you're producing

908
00:31:43,200 --> 00:31:44,640
then if something like this does happen

909
00:31:44,640 --> 00:31:46,080
you're gonna have a much harder time

910
00:31:46,080 --> 00:31:47,840
figuring out how

911
00:31:47,840 --> 00:31:50,720
compromised you got um the stuff above

912
00:31:50,720 --> 00:31:52,159
this is about trying to prevent yourself

913
00:31:52,159 --> 00:31:53,279
from having a bad day

914
00:31:53,279 --> 00:31:55,760
this bottom one is about uh making that

915
00:31:55,760 --> 00:31:57,840
bad day not turn into a bad month if it

916
00:31:57,840 --> 00:31:59,519
does happen

917
00:31:59,519 --> 00:32:02,559
cicd system keeps all of these

918
00:32:02,559 --> 00:32:04,720
august and then you can track down what

919
00:32:04,720 --> 00:32:06,159
versions of your dependencies are in

920
00:32:06,159 --> 00:32:07,200
production

921
00:32:07,200 --> 00:32:14,080
and make it easier on yourself later

922
00:32:14,080 --> 00:32:16,480
all right so i'm talking about uh some

923
00:32:16,480 --> 00:32:18,320
stuff that's going on

924
00:32:18,320 --> 00:32:22,879
that'll make these attacks harder and um

925
00:32:26,159 --> 00:32:29,120
identity and software is a big one um

926
00:32:29,120 --> 00:32:29,840
today

927
00:32:29,840 --> 00:32:32,080
uh it's pretty common if you sign okay

928
00:32:32,080 --> 00:32:32,880
commits

929
00:32:32,880 --> 00:32:34,480
github you get a little badge like i

930
00:32:34,480 --> 00:32:35,840
showed here at the top right saying

931
00:32:35,840 --> 00:32:37,360
comment has been verified

932
00:32:37,360 --> 00:32:39,840
um which is great it looks like insecure

933
00:32:39,840 --> 00:32:41,360
but all that really says is this someone

934
00:32:41,360 --> 00:32:42,960
generated

935
00:32:42,960 --> 00:32:45,279
there and signed that it doesn't tell

936
00:32:45,279 --> 00:32:46,399
you who did that

937
00:32:46,399 --> 00:32:49,279
um just as someone did we need to get

938
00:32:49,279 --> 00:32:49,840
beyond

939
00:32:49,840 --> 00:32:52,559
just these signatures without another

940
00:32:52,559 --> 00:32:54,840
source of trust or

941
00:32:54,840 --> 00:32:58,240
pki key infrastructure um that verified

942
00:32:58,240 --> 00:33:01,360
badge doesn't really mean anything um

943
00:33:01,360 --> 00:33:03,360
for maintainers of open source projects

944
00:33:03,360 --> 00:33:04,960
we need ways for them to share their

945
00:33:04,960 --> 00:33:06,720
uh identity in the public keys that they

946
00:33:06,720 --> 00:33:08,559
need to be using um this will help

947
00:33:08,559 --> 00:33:10,159
prevent that tax where people screw for

948
00:33:10,159 --> 00:33:12,320
pretending

949
00:33:12,320 --> 00:33:13,519
but it will also make it easier for

950
00:33:13,519 --> 00:33:15,120
maintainers to know whether or not a

951
00:33:15,120 --> 00:33:16,640
contribution coming into an open search

952
00:33:16,640 --> 00:33:17,279
project

953
00:33:17,279 --> 00:33:18,640
it's going to be someone they trust or

954
00:33:18,640 --> 00:33:20,320
not uh since these people are

955
00:33:20,320 --> 00:33:20,960
overburdened

956
00:33:20,960 --> 00:33:24,640
and barely have time to review the code

957
00:33:35,919 --> 00:33:37,440
terribly hard today but there's a bunch

958
00:33:37,440 --> 00:33:39,840
of work going on in the open source

959
00:33:39,840 --> 00:33:41,760
git project itself to make it easier to

960
00:33:41,760 --> 00:33:43,279
sign commits

961
00:33:43,279 --> 00:33:45,760
today you have to use gpg which is kind

962
00:33:45,760 --> 00:33:47,600
of clunky to generate key pairs

963
00:33:47,600 --> 00:33:50,159
um but everybody already has says h can

964
00:33:50,159 --> 00:33:50,960
set up

965
00:33:50,960 --> 00:33:53,919
and push to github hopefully um and

966
00:33:53,919 --> 00:33:54,960
there's some work we have to make it

967
00:33:54,960 --> 00:33:56,399
possible to sign your new comments with

968
00:33:56,399 --> 00:33:58,080
these ssh students instead of having a

969
00:33:58,080 --> 00:34:01,519
manageable separate settings repairs

970
00:34:01,519 --> 00:34:04,720
um in two factors everywhere thankfully

971
00:34:04,720 --> 00:34:06,399
this is finally originally victory

972
00:34:06,399 --> 00:34:08,320
across the industry almost every service

973
00:34:08,320 --> 00:34:10,000
supports two-factor off

974
00:34:10,000 --> 00:34:12,879
um but it's hard to check to see if your

975
00:34:12,879 --> 00:34:14,399
contributors or other progress that

976
00:34:14,399 --> 00:34:15,040
you're using

977
00:34:15,040 --> 00:34:17,280
are using two-factor author you can

978
00:34:17,280 --> 00:34:19,119
acquire it on your own project

979
00:34:19,119 --> 00:34:20,560
but you can't tell if you're depending

980
00:34:20,560 --> 00:34:22,719
on something that does not require

981
00:34:22,719 --> 00:34:25,520
um if you're only independencies from

982
00:34:25,520 --> 00:34:26,719
people even if you trust them and

983
00:34:26,719 --> 00:34:28,399
they're not easy to factor off

984
00:34:28,399 --> 00:34:30,239
um then that's a problem you need to

985
00:34:30,239 --> 00:34:33,199
make this visible and kind of

986
00:34:33,199 --> 00:34:34,480
sharing the projects with people that

987
00:34:34,480 --> 00:34:35,918
aren't using two factors off into

988
00:34:35,918 --> 00:34:37,119
setting up this basic

989
00:34:37,119 --> 00:34:40,399
security protection and then like i

990
00:34:40,399 --> 00:34:41,040
talked about

991
00:34:41,040 --> 00:34:43,520
uh just a minute ago um better pki

992
00:34:43,520 --> 00:34:45,280
infrastructure so that all known people

993
00:34:45,280 --> 00:34:46,800
can share the public keys that they do

994
00:34:46,800 --> 00:34:47,599
their work

995
00:34:47,599 --> 00:34:49,679
so we can have more trust the work

996
00:34:49,679 --> 00:34:52,399
that's being signed with these kids

997
00:34:52,399 --> 00:34:53,760
moving beyond just that kind of

998
00:34:53,760 --> 00:34:55,359
important verified symbol that doesn't

999
00:34:55,359 --> 00:34:58,560
really give us much information

1000
00:34:59,760 --> 00:35:02,720
so i'll next step up from identity who

1001
00:35:02,720 --> 00:35:04,880
is typing things at their keyboard

1002
00:35:04,880 --> 00:35:06,640
we also have to start uh playing better

1003
00:35:06,640 --> 00:35:08,240
ways to trust the source code that we're

1004
00:35:08,240 --> 00:35:09,200
using

1005
00:35:09,200 --> 00:35:12,640
depending on if you take source code in

1006
00:35:12,640 --> 00:35:14,000
a binary form

1007
00:35:14,000 --> 00:35:16,000
you have very few tools to figure out

1008
00:35:16,000 --> 00:35:18,160
what code went into that binary what

1009
00:35:18,160 --> 00:35:19,760
tool is produced

1010
00:35:19,760 --> 00:35:21,280
there are some projects that have to

1011
00:35:21,280 --> 00:35:22,880
standardize a

1012
00:35:22,880 --> 00:35:27,040
software bill of materials s-bom is

1013
00:35:27,040 --> 00:35:28,640
that everything to search for their

1014
00:35:28,640 --> 00:35:30,880
software build materials

1015
00:35:30,880 --> 00:35:32,720
which will allow people to distribute

1016
00:35:32,720 --> 00:35:34,880
executables and binaries to describe

1017
00:35:34,880 --> 00:35:36,960
all the things that went into those

1018
00:35:36,960 --> 00:35:38,800
download random program

1019
00:35:38,800 --> 00:35:40,320
you can see exactly where it came from

1020
00:35:40,320 --> 00:35:42,480
in a trusted way

1021
00:35:42,480 --> 00:35:44,640
um this is coming from me uh hopefully

1022
00:35:44,640 --> 00:35:46,079
instrumented build systems that will

1023
00:35:46,079 --> 00:35:47,520
automatically generate these standard

1024
00:35:47,520 --> 00:35:50,480
formats once the api paper is

1025
00:35:50,480 --> 00:35:52,720
um and then tying that source grip back

1026
00:35:52,720 --> 00:35:54,480
uh once you can go from a binary to

1027
00:35:54,480 --> 00:35:55,520
source code

1028
00:35:55,520 --> 00:35:57,280
let's source code back to the identity

1029
00:35:57,280 --> 00:35:59,040
of the contributor that's the

1030
00:35:59,040 --> 00:36:00,880
federated strong identity programs we

1031
00:36:00,880 --> 00:36:03,040
talked about before

1032
00:36:03,040 --> 00:36:05,520
and then just looking at source code to

1033
00:36:05,520 --> 00:36:06,400
figure out if it

1034
00:36:06,400 --> 00:36:10,000
is secure we have security audits

1035
00:36:10,000 --> 00:36:11,599
many large open source projects have

1036
00:36:11,599 --> 00:36:13,280
done them uh but they're expensive

1037
00:36:13,280 --> 00:36:16,880
and hard they don't do them often enough

1038
00:36:16,880 --> 00:36:18,960
rather than get one audit every two or

1039
00:36:18,960 --> 00:36:19,920
three years

1040
00:36:19,920 --> 00:36:22,000
um we need to come up with ways as an

1041
00:36:22,000 --> 00:36:23,839
industry to contribute funding

1042
00:36:23,839 --> 00:36:25,119
um to these projects that we're all

1043
00:36:25,119 --> 00:36:27,119
depending on that aren't being uh

1044
00:36:27,119 --> 00:36:30,160
don't have enough intention to have a

1045
00:36:30,160 --> 00:36:32,160
refund auditing in a more scalable way

1046
00:36:32,160 --> 00:36:32,480
for

1047
00:36:32,480 --> 00:36:36,079
critical projects um once we have the

1048
00:36:36,079 --> 00:36:37,359
really good data showing

1049
00:36:37,359 --> 00:36:39,599
which are going in the contributors are

1050
00:36:39,599 --> 00:36:40,480
for projects

1051
00:36:40,480 --> 00:36:41,680
you need to start to do more advanced

1052
00:36:41,680 --> 00:36:44,480
techniques it sounds like a data problem

1053
00:36:44,480 --> 00:36:46,800
um because it is like an anomaly

1054
00:36:46,800 --> 00:36:47,680
detection

1055
00:36:47,680 --> 00:36:50,160
there have been a couple attacks where

1056
00:36:50,160 --> 00:36:51,200
uh somebody

1057
00:36:51,200 --> 00:36:52,880
just abandoned a package because they

1058
00:36:52,880 --> 00:36:54,400
got maybe with their job or personal

1059
00:36:54,400 --> 00:36:55,839
life and handed it over to

1060
00:36:55,839 --> 00:36:57,839
another group of containers that we're

1061
00:36:57,839 --> 00:36:59,520
willing to take home

1062
00:36:59,520 --> 00:37:01,119
if you were looking at the commitments

1063
00:37:01,119 --> 00:37:02,880
you might see a huge change in activity

1064
00:37:02,880 --> 00:37:03,520
there

1065
00:37:03,520 --> 00:37:05,119
to find that profit something we need to

1066
00:37:05,119 --> 00:37:08,320
take a closer look at

1067
00:37:08,320 --> 00:37:10,160
and then in addition to auditing we can

1068
00:37:10,160 --> 00:37:11,839
start to do things like crowdsource

1069
00:37:11,839 --> 00:37:12,800
reviews

1070
00:37:12,800 --> 00:37:14,400
so if you're on a project with hundreds

1071
00:37:14,400 --> 00:37:16,800
of thousands of lines of dependencies

1072
00:37:16,800 --> 00:37:18,480
at your company and you want to spend

1073
00:37:18,480 --> 00:37:19,839
the time reviewing those

1074
00:37:19,839 --> 00:37:22,000
hopefully uh crowdsource that so

1075
00:37:22,000 --> 00:37:23,359
everyone out there isn't reviewing the

1076
00:37:23,359 --> 00:37:23,920
same

1077
00:37:23,920 --> 00:37:27,040
set of lines of code can build up a

1078
00:37:27,040 --> 00:37:28,000
little bit of trust

1079
00:37:28,000 --> 00:37:30,160
with each other um and flag things that

1080
00:37:30,160 --> 00:37:31,520
we've all read to make sure that

1081
00:37:31,520 --> 00:37:33,760
many eyes on every line of open source

1082
00:37:33,760 --> 00:37:34,880
is actually true

1083
00:37:34,880 --> 00:37:38,640
if few more eyes on each one

1084
00:37:41,200 --> 00:37:43,760
after the source code course there is

1085
00:37:43,760 --> 00:37:45,359
the build process

1086
00:37:45,359 --> 00:37:47,680
we talked about the reflections on trust

1087
00:37:47,680 --> 00:37:49,520
and trust favor

1088
00:37:49,520 --> 00:37:52,160
and the demo i showed with the requests

1089
00:37:52,160 --> 00:37:53,440
library

1090
00:37:53,440 --> 00:37:56,160
we need to hit ci and build systems uh

1091
00:37:56,160 --> 00:37:58,000
to log your activity and make this

1092
00:37:58,000 --> 00:37:59,599
probably viewable so that everyone can

1093
00:37:59,599 --> 00:38:00,400
trust it

1094
00:38:00,400 --> 00:38:03,920
right and if we could actually just see

1095
00:38:03,920 --> 00:38:06,560
in a secure possible format exactly

1096
00:38:06,560 --> 00:38:07,920
which commands got running

1097
00:38:07,920 --> 00:38:09,680
to transform that requests give

1098
00:38:09,680 --> 00:38:11,680
repository to the published package in

1099
00:38:11,680 --> 00:38:12,480
python

1100
00:38:12,480 --> 00:38:14,400
so we don't necessarily have to audit it

1101
00:38:14,400 --> 00:38:15,680
every single time

1102
00:38:15,680 --> 00:38:17,440
we could just see the scripts that were

1103
00:38:17,440 --> 00:38:19,760
happening trust those scripts

1104
00:38:19,760 --> 00:38:22,800
and trust that the

1105
00:38:22,800 --> 00:38:26,400
cs system will be run correctly

1106
00:38:27,280 --> 00:38:29,520
the tool chain vulnerabilities can also

1107
00:38:29,520 --> 00:38:30,960
come in

1108
00:38:30,960 --> 00:38:32,800
the tool chain level once in a while

1109
00:38:32,800 --> 00:38:34,320
there's a bugs out there will come

1110
00:38:34,320 --> 00:38:36,160
higher than the results and

1111
00:38:36,160 --> 00:38:38,000
uh binaries built with it being subject

1112
00:38:38,000 --> 00:38:39,839
to the os attacks for example

1113
00:38:39,839 --> 00:38:41,680
um if you don't know the tool chain that

1114
00:38:41,680 --> 00:38:43,520
was used to build your own application

1115
00:38:43,520 --> 00:38:44,800
and you don't know if you're

1116
00:38:44,800 --> 00:38:47,200
subject to those kind of things again we

1117
00:38:47,200 --> 00:38:49,599
need ways to

1118
00:38:49,599 --> 00:38:52,160
securely log the exact versions of the

1119
00:38:52,160 --> 00:38:55,200
tool chains that were used

1120
00:38:56,800 --> 00:38:58,320
then the final piece the artifact

1121
00:38:58,320 --> 00:39:00,560
manager itself one of this matters if

1122
00:39:00,560 --> 00:39:02,240
somebody can just upload artifacts

1123
00:39:02,240 --> 00:39:04,240
directly to that or modify the artifacts

1124
00:39:04,240 --> 00:39:05,680
that have been

1125
00:39:05,680 --> 00:39:08,960
uploaded already um knowing

1126
00:39:08,960 --> 00:39:11,200
who the vet and offensive different

1127
00:39:11,200 --> 00:39:13,520
people from the maintainers i get

1128
00:39:13,520 --> 00:39:16,880
it's a great start here um

1129
00:39:16,880 --> 00:39:18,240
knowing whether or not updates are

1130
00:39:18,240 --> 00:39:19,920
available to thanks to fixed normal

1131
00:39:19,920 --> 00:39:21,760
abilities that's another huge

1132
00:39:21,760 --> 00:39:23,920
attack factor that people rarely

1133
00:39:23,920 --> 00:39:24,880
consider

1134
00:39:24,880 --> 00:39:27,920
if someone cds are out there in the wild

1135
00:39:27,920 --> 00:39:28,240
and

1136
00:39:28,240 --> 00:39:31,520
trick somebody into not updating because

1137
00:39:31,520 --> 00:39:34,000
you can point them at an out-of-date

1138
00:39:34,000 --> 00:39:35,680
package or something like that

1139
00:39:35,680 --> 00:39:37,359
you can keep them vulnerable and exploit

1140
00:39:37,359 --> 00:39:39,280
that later um there are actually some

1141
00:39:39,280 --> 00:39:40,560
protocols designed

1142
00:39:40,560 --> 00:39:43,680
to help uh flag stuff like this so if

1143
00:39:43,680 --> 00:39:45,119
you know updates are supposed to be

1144
00:39:45,119 --> 00:39:47,040
available and you're not receiving them

1145
00:39:47,040 --> 00:39:49,920
um that completed

1146
00:39:49,920 --> 00:39:51,440
and then tampering of course the source

1147
00:39:51,440 --> 00:39:52,960
signatures uh didn't come in any

1148
00:39:52,960 --> 00:39:54,320
commission everybody

1149
00:39:54,320 --> 00:39:57,280
has some experience with already um but

1150
00:39:57,280 --> 00:39:57,599
uh

1151
00:39:57,599 --> 00:40:00,400
organizations should be signing their

1152
00:40:00,400 --> 00:40:01,119
artifacts

1153
00:40:01,119 --> 00:40:02,880
unfortunately not every package manager

1154
00:40:02,880 --> 00:40:05,440
supports this

1155
00:40:08,000 --> 00:40:10,720
um there is improvement happening to

1156
00:40:10,720 --> 00:40:12,400
almost every one of these pieces

1157
00:40:12,400 --> 00:40:14,560
um especially package managers this is

1158
00:40:14,560 --> 00:40:16,079
kind of a time for a whole bunch of

1159
00:40:16,079 --> 00:40:17,280
improvements here

1160
00:40:17,280 --> 00:40:19,839
we talked about some cool stuff um well

1161
00:40:19,839 --> 00:40:21,280
some of the parts that make go modules

1162
00:40:21,280 --> 00:40:21,920
harder

1163
00:40:21,920 --> 00:40:23,599
to work with securely but they do have

1164
00:40:23,599 --> 00:40:25,040
some cool improvements

1165
00:40:25,040 --> 00:40:27,119
uh the versioning selection algorithm

1166
00:40:27,119 --> 00:40:29,040
info modules

1167
00:40:29,040 --> 00:40:30,800
is designed to help prevent you from

1168
00:40:30,800 --> 00:40:32,160
upgrading accidentally

1169
00:40:32,160 --> 00:40:36,240
of the only upgrade when you need to

1170
00:40:36,240 --> 00:40:38,000
and the goatee ones that hit module

1171
00:40:38,000 --> 00:40:39,359
proxy server

1172
00:40:39,359 --> 00:40:40,720
actually publishes all of these to a

1173
00:40:40,720 --> 00:40:42,400
transparency log

1174
00:40:42,400 --> 00:40:44,960
which is this type of system that lets

1175
00:40:44,960 --> 00:40:45,760
them

1176
00:40:45,760 --> 00:40:49,200
log the exact tags and versions of all

1177
00:40:49,200 --> 00:40:50,640
the go modules

1178
00:40:50,640 --> 00:40:53,599
to the source code so if you and i both

1179
00:40:53,599 --> 00:40:55,280
install the same original package

1180
00:40:55,280 --> 00:40:58,960
we could be uh be very sure that we did

1181
00:40:58,960 --> 00:41:01,520
the same source code

1182
00:41:01,520 --> 00:41:03,839
that's something that's just started

1183
00:41:03,839 --> 00:41:05,520
rolling out similar to the certificate

1184
00:41:05,520 --> 00:41:06,880
transparency program

1185
00:41:06,880 --> 00:41:09,760
it's used to secure the way that ssl

1186
00:41:09,760 --> 00:41:11,440
certificates get issued

1187
00:41:11,440 --> 00:41:14,079
but that type of support should be used

1188
00:41:14,079 --> 00:41:17,440
by pretty much every package manager

1189
00:41:17,440 --> 00:41:20,240
and then finally cbe reporting so this

1190
00:41:20,240 --> 00:41:21,440
is how we report things

1191
00:41:21,440 --> 00:41:24,880
that we do find uh this uh process

1192
00:41:24,880 --> 00:41:27,119
is still very manual and humans are

1193
00:41:27,119 --> 00:41:28,319
actually still numbered

1194
00:41:28,319 --> 00:41:29,839
like you have to email someone usually

1195
00:41:29,839 --> 00:41:32,079
or fill out a form to get a cpd number

1196
00:41:32,079 --> 00:41:33,839
which is great back when you were

1197
00:41:33,839 --> 00:41:35,760
talking about operating system packages

1198
00:41:35,760 --> 00:41:36,079
uh

1199
00:41:36,079 --> 00:41:38,800
if you have uh maybe a dozen or so

1200
00:41:38,800 --> 00:41:40,160
install on your computer

1201
00:41:40,160 --> 00:41:41,839
but language package managers where

1202
00:41:41,839 --> 00:41:43,200
there's um

1203
00:41:43,200 --> 00:41:45,200
hundreds of thousands of times being

1204
00:41:45,200 --> 00:41:46,880
uploaded each month uh it doesn't really

1205
00:41:46,880 --> 00:41:48,480
scale to that process

1206
00:41:48,480 --> 00:41:51,359
so it's going to improve the scalability

1207
00:41:51,359 --> 00:41:52,640
of cpu recording

1208
00:41:52,640 --> 00:41:55,280
so that it will scale to this open

1209
00:41:55,280 --> 00:41:56,880
source world where

1210
00:41:56,880 --> 00:41:58,319
there are way more packages than

1211
00:41:58,319 --> 00:42:03,200
anyone's ever dealt with before

1212
00:42:03,200 --> 00:42:05,520
some other cool stuff happening

1213
00:42:05,520 --> 00:42:07,359
programming language

1214
00:42:07,359 --> 00:42:10,160
improvements um a bunch of kind of the

1215
00:42:10,160 --> 00:42:11,440
research

1216
00:42:11,440 --> 00:42:14,000
level here it's not as far along but

1217
00:42:14,000 --> 00:42:15,599
making it possible to

1218
00:42:15,599 --> 00:42:17,440
apply permissions for the android app

1219
00:42:17,440 --> 00:42:20,000
store at a dependency level

1220
00:42:20,000 --> 00:42:22,800
within a larger program so if you want

1221
00:42:22,800 --> 00:42:23,200
to

1222
00:42:23,200 --> 00:42:24,560
install something you don't really trust

1223
00:42:24,560 --> 00:42:26,319
so much today you're giving

1224
00:42:26,319 --> 00:42:28,560
that the same permissions that the rest

1225
00:42:28,560 --> 00:42:30,000
of your program runs with

1226
00:42:30,000 --> 00:42:31,760
imagine if you can sandbox that

1227
00:42:31,760 --> 00:42:33,680
dependencies it's not allowed to access

1228
00:42:33,680 --> 00:42:35,119
the final system that's not allowed to

1229
00:42:35,119 --> 00:42:36,160
access the network

1230
00:42:36,160 --> 00:42:39,839
i'm sure i trust it to do some basic uh

1231
00:42:39,839 --> 00:42:42,480
computation

1232
00:42:43,119 --> 00:42:44,560
there's also just general hygiene

1233
00:42:44,560 --> 00:42:46,160
improvements the bulk stuff i talked

1234
00:42:46,160 --> 00:42:46,960
about before

1235
00:42:46,960 --> 00:42:48,640
turning out two-factor authentication

1236
00:42:48,640 --> 00:42:50,800
signing commits signing packages

1237
00:42:50,800 --> 00:42:52,079
all these things that everyone knows are

1238
00:42:52,079 --> 00:42:54,160
good um that aren't necessarily taking

1239
00:42:54,160 --> 00:42:55,280
the time to do

1240
00:42:55,280 --> 00:42:56,960
you do enforce that and that's a lot

1241
00:42:56,960 --> 00:42:59,359
easier and kind of

1242
00:42:59,359 --> 00:43:00,800
increase the adoption of stuff that

1243
00:43:00,800 --> 00:43:02,400
already exists

1244
00:43:02,400 --> 00:43:06,000
and i talked about cds

1245
00:43:06,800 --> 00:43:08,720
all right i'll end uh with a couple

1246
00:43:08,720 --> 00:43:12,240
links to how you can get involved

1247
00:43:12,240 --> 00:43:15,598
and then we can go to questions

1248
00:43:17,040 --> 00:43:20,319
um overall summary here

1249
00:43:20,319 --> 00:43:22,000
uh supply chain attacks are a serious

1250
00:43:22,000 --> 00:43:23,599
problem for opens for software and

1251
00:43:23,599 --> 00:43:24,560
software in general

1252
00:43:24,560 --> 00:43:26,880
i scared everybody a little bit that's a

1253
00:43:26,880 --> 00:43:28,000
lot of that

1254
00:43:28,000 --> 00:43:31,119
and this is a standards automation and

1255
00:43:31,119 --> 00:43:33,040
big data problem that we can all stall

1256
00:43:33,040 --> 00:43:34,480
together if you try

1257
00:43:34,480 --> 00:43:37,359
um there's kind of a link here for a

1258
00:43:37,359 --> 00:43:39,040
supply chain security project in the

1259
00:43:39,040 --> 00:43:40,400
techcom

1260
00:43:40,400 --> 00:43:42,000
cd open source project that i'm

1261
00:43:42,000 --> 00:43:43,359
currently working on or you can see some

1262
00:43:43,359 --> 00:43:44,720
information

1263
00:43:44,720 --> 00:43:46,319
and reach out and get involved if you

1264
00:43:46,319 --> 00:43:48,560
want to

1265
00:43:48,560 --> 00:43:50,960
i need some contact information for me

1266
00:43:50,960 --> 00:43:53,119
as well as you can follow up after

1267
00:43:53,119 --> 00:43:56,079
uh here is my account where you can find

1268
00:43:56,079 --> 00:43:57,760
that little crypto liner code both for

1269
00:43:57,760 --> 00:43:58,480
you

1270
00:43:58,480 --> 00:44:02,880
running um and then my twitter and

1271
00:44:03,200 --> 00:44:05,040
many languages that are standouts and

1272
00:44:05,040 --> 00:44:06,880
their supply chain support

1273
00:44:06,880 --> 00:44:10,720
um from a security perspective

1274
00:44:10,720 --> 00:44:14,720
um yeah i'd say um i think go is

1275
00:44:14,720 --> 00:44:15,440
probably

1276
00:44:15,440 --> 00:44:17,839
done the most with the transparency log

1277
00:44:17,839 --> 00:44:19,119
stuff that they've done

1278
00:44:19,119 --> 00:44:21,200
to make certain classes of attack

1279
00:44:21,200 --> 00:44:22,880
starter um i think one

1280
00:44:22,880 --> 00:44:24,560
each package of trainers in general are

1281
00:44:24,560 --> 00:44:26,160
all pretty far behind things like

1282
00:44:26,160 --> 00:44:27,040
operating system

1283
00:44:27,040 --> 00:44:28,960
package managers that have been met this

1284
00:44:28,960 --> 00:44:30,880
for a lot longer

1285
00:44:30,880 --> 00:44:33,839
but those kind of have the benefit of

1286
00:44:33,839 --> 00:44:34,960
usually being

1287
00:44:34,960 --> 00:44:37,200
set up and run where only a core team

1288
00:44:37,200 --> 00:44:39,520
has access to publish those packages

1289
00:44:39,520 --> 00:44:41,680
um and they don't have to deal with the

1290
00:44:41,680 --> 00:44:43,760
scale of thousands of people uploading

1291
00:44:43,760 --> 00:44:45,359
stuff constantly

1292
00:44:45,359 --> 00:44:49,440
i think um learning from light layers

1293
00:44:49,440 --> 00:44:51,280
learning from the operating system i

1294
00:44:51,280 --> 00:44:53,119
could commanders and integrated basic

1295
00:44:53,119 --> 00:44:54,560
stuff like

1296
00:44:54,560 --> 00:44:58,400
signatures and some of the tuf or the

1297
00:44:58,400 --> 00:44:58,880
update

1298
00:44:58,880 --> 00:45:01,680
framework has come up with uh on other

1299
00:45:01,680 --> 00:45:03,040
classes of attacks that need to be

1300
00:45:03,040 --> 00:45:04,960
prevented with those

1301
00:45:04,960 --> 00:45:07,760
uh update notification prevention

1302
00:45:07,760 --> 00:45:09,599
attacks i mentioned before

1303
00:45:09,599 --> 00:45:12,560
how helpful would virus total be on this

1304
00:45:12,560 --> 00:45:13,119
area

1305
00:45:13,119 --> 00:45:15,760
um to virus that our approach registers

1306
00:45:15,760 --> 00:45:16,720
not to be weak

1307
00:45:16,720 --> 00:45:18,480
yeah i think um i kind of classified

1308
00:45:18,480 --> 00:45:20,560
that as a dependency scanner

1309
00:45:20,560 --> 00:45:23,920
um they're pretty good at picking up um

1310
00:45:23,920 --> 00:45:26,079
known cves and their dependencies and

1311
00:45:26,079 --> 00:45:27,040
kind of banning you

1312
00:45:27,040 --> 00:45:31,200
to update or upgrade github

1313
00:45:31,200 --> 00:45:32,880
has some of that data in now or if

1314
00:45:32,880 --> 00:45:35,119
you're using certain languages it'll

1315
00:45:35,119 --> 00:45:36,960
notify you if there's a security update

1316
00:45:36,960 --> 00:45:38,800
you need to pick up but the challenge

1317
00:45:38,800 --> 00:45:40,400
there is how few of them

1318
00:45:40,400 --> 00:45:43,520
are actually reported uh and how long

1319
00:45:43,520 --> 00:45:47,280
to get them recorded and let's see these

1320
00:45:58,839 --> 00:46:01,839
file

1321
00:46:24,240 --> 00:46:26,319
you

