1
00:00:00,480 --> 00:00:03,919
reverse engineering ransomware protocols

2
00:00:03,919 --> 00:00:05,839
dharma now you're you're going to dance

3
00:00:05,839 --> 00:00:06,799
right

4
00:00:06,799 --> 00:00:10,800
okay okay anyway here we go

5
00:00:10,800 --> 00:00:12,080
cool

6
00:00:12,080 --> 00:00:14,880
so i'm going to start out quick intro

7
00:00:14,880 --> 00:00:16,880
who am i why does anyone care about what

8
00:00:16,880 --> 00:00:19,600
i'm saying right so i'm kyle nieman uh

9
00:00:19,600 --> 00:00:20,880
my email is up there if anybody's got

10
00:00:20,880 --> 00:00:22,240
any questions about anything feel free

11
00:00:22,240 --> 00:00:23,279
to reach out

12
00:00:23,279 --> 00:00:25,760
i'm product lead at cyber crucible local

13
00:00:25,760 --> 00:00:27,599
cyber security company but not going to

14
00:00:27,599 --> 00:00:29,119
talk about that too much

15
00:00:29,119 --> 00:00:30,800
i'm a little bit of a self-proclaimed

16
00:00:30,800 --> 00:00:32,800
ransomware expert one of those things

17
00:00:32,800 --> 00:00:34,399
where uh

18
00:00:34,399 --> 00:00:36,399
you know i start talking i call myself

19
00:00:36,399 --> 00:00:37,520
an expert someone else calls me an

20
00:00:37,520 --> 00:00:39,200
expert now uh

21
00:00:39,200 --> 00:00:41,280
that's what i am right so

22
00:00:41,280 --> 00:00:43,040
my background is a little bit of threat

23
00:00:43,040 --> 00:00:45,120
hunting malware analysis low-level

24
00:00:45,120 --> 00:00:46,719
kernel development back-end development

25
00:00:46,719 --> 00:00:47,840
things like that

26
00:00:47,840 --> 00:00:49,600
lots and lots of encryption kind of

27
00:00:49,600 --> 00:00:52,079
leads you right into ransomware right

28
00:00:52,079 --> 00:00:53,120
so

29
00:00:53,120 --> 00:00:56,000
a quick kind of intro to the talk is

30
00:00:56,000 --> 00:00:58,000
that it's very technical um it's a lot

31
00:00:58,000 --> 00:00:59,520
of like staring at hex editors type of

32
00:00:59,520 --> 00:01:01,840
thing uh i call it dynamic analysis as

33
00:01:01,840 --> 00:01:04,080
opposed to static analysis because for

34
00:01:04,080 --> 00:01:05,920
those familiar with the two terms static

35
00:01:05,920 --> 00:01:07,760
analysis refers to like

36
00:01:07,760 --> 00:01:09,680
uh using ghidra idapro something like

37
00:01:09,680 --> 00:01:11,040
that to look at like functions that are

38
00:01:11,040 --> 00:01:14,080
in executables this is not that

39
00:01:14,080 --> 00:01:16,080
this is looking at the protocol itself

40
00:01:16,080 --> 00:01:18,000
especially on disk right

41
00:01:18,000 --> 00:01:19,600
so it's going to be

42
00:01:19,600 --> 00:01:21,360
insight into dharma ransomware

43
00:01:21,360 --> 00:01:23,280
specifically

44
00:01:23,280 --> 00:01:24,560
and kind of the discovery a little bit

45
00:01:24,560 --> 00:01:26,479
of the story of like how you go from oh

46
00:01:26,479 --> 00:01:28,799
crap i was hit with this ransomware to

47
00:01:28,799 --> 00:01:30,240
understanding what happened on your

48
00:01:30,240 --> 00:01:31,439
disks right

49
00:01:31,439 --> 00:01:32,640
it's definitely not the secret to free

50
00:01:32,640 --> 00:01:33,759
description or anything like that

51
00:01:33,759 --> 00:01:35,200
obvious but i kind of got to say it

52
00:01:35,200 --> 00:01:36,479
because otherwise someone's going to say

53
00:01:36,479 --> 00:01:37,759
okay well you can save me millions of

54
00:01:37,759 --> 00:01:39,119
dollars right

55
00:01:39,119 --> 00:01:42,479
we'll see but you know probably not

56
00:01:42,479 --> 00:01:44,399
so uh you know in the why do you care of

57
00:01:44,399 --> 00:01:46,159
course is you can figure out how bad

58
00:01:46,159 --> 00:01:47,840
your situation is if you're involved

59
00:01:47,840 --> 00:01:49,520
with this ransomware you get a little

60
00:01:49,520 --> 00:01:51,360
bit of insight if the attacker is kind

61
00:01:51,360 --> 00:01:52,640
of manipulating you trying to get more

62
00:01:52,640 --> 00:01:54,079
money for no reason all that kind of

63
00:01:54,079 --> 00:01:55,680
thing you can figure out if you can even

64
00:01:55,680 --> 00:01:57,200
decrypt if it's even possible and how

65
00:01:57,200 --> 00:01:58,960
much it'll cost you all sorts of things

66
00:01:58,960 --> 00:02:01,119
like this so again it's going to be

67
00:02:01,119 --> 00:02:02,640
pretty technical but

68
00:02:02,640 --> 00:02:04,000
hopefully everyone can get a little bit

69
00:02:04,000 --> 00:02:05,360
of insight out of it

70
00:02:05,360 --> 00:02:06,479
so

71
00:02:06,479 --> 00:02:08,399
first question should be what is dharma

72
00:02:08,399 --> 00:02:10,800
uh it's a windows-based ransomware it's

73
00:02:10,800 --> 00:02:13,200
c plus though that doesn't matter at all

74
00:02:13,200 --> 00:02:14,640
it's exactly compiled which means that

75
00:02:14,640 --> 00:02:17,760
we can't just look at dlls um you know

76
00:02:17,760 --> 00:02:19,599
see what it's doing there's no like api

77
00:02:19,599 --> 00:02:21,040
monitoring because it's all built right

78
00:02:21,040 --> 00:02:23,599
in uh it's very strongly encryption

79
00:02:23,599 --> 00:02:25,040
encrypted it uses like the best

80
00:02:25,040 --> 00:02:26,319
encryption standards out of any

81
00:02:26,319 --> 00:02:28,080
ransomware you know many of them use

82
00:02:28,080 --> 00:02:29,440
good standards but it's up there with

83
00:02:29,440 --> 00:02:30,640
the best

84
00:02:30,640 --> 00:02:32,640
uh it's aes encrypted for all the files

85
00:02:32,640 --> 00:02:34,239
which is very fast of course and then

86
00:02:34,239 --> 00:02:35,680
rsa encrypted

87
00:02:35,680 --> 00:02:37,360
if you don't know what those are at all

88
00:02:37,360 --> 00:02:38,959
it might suck but i'm going to explain

89
00:02:38,959 --> 00:02:40,080
them quickly i don't want to spend too

90
00:02:40,080 --> 00:02:42,160
much time though um

91
00:02:42,160 --> 00:02:43,440
and the ransomware itself uses a

92
00:02:43,440 --> 00:02:46,400
two-step process so you scan your system

93
00:02:46,400 --> 00:02:47,760
you send the output to the attacker you

94
00:02:47,760 --> 00:02:48,800
pay the ransom and then they're going to

95
00:02:48,800 --> 00:02:50,400
send you back a decrypter

96
00:02:50,400 --> 00:02:51,440
if you're wondering why there's

97
00:02:51,440 --> 00:02:53,840
javascript on the right-hand side uh me

98
00:02:53,840 --> 00:02:56,319
too that was the first image result uh

99
00:02:56,319 --> 00:02:58,800
on google when i search for ransomware

100
00:02:58,800 --> 00:03:01,120
it kind of doesn't make any sense but

101
00:03:01,120 --> 00:03:02,480
you know that's part of the problem no

102
00:03:02,480 --> 00:03:03,599
one understands what's going on when

103
00:03:03,599 --> 00:03:05,200
they're searching for answers

104
00:03:05,200 --> 00:03:06,720
um so you know something more relevant

105
00:03:06,720 --> 00:03:08,800
might be like a ransom note for this

106
00:03:08,800 --> 00:03:10,800
ransomware you probably can't see it too

107
00:03:10,800 --> 00:03:11,920
well but it's

108
00:03:11,920 --> 00:03:13,120
you know it's just all your files are

109
00:03:13,120 --> 00:03:14,800
encrypted uh send bitcoin to this

110
00:03:14,800 --> 00:03:16,840
address type thing right

111
00:03:16,840 --> 00:03:20,480
so quick explanation of aes um this is

112
00:03:20,480 --> 00:03:22,400
it uses cbc which is a type of block

113
00:03:22,400 --> 00:03:25,040
chaining or block cipher so it just kind

114
00:03:25,040 --> 00:03:26,319
of goes through one to the next to the

115
00:03:26,319 --> 00:03:29,040
next and you keep looping in uh 128 bit

116
00:03:29,040 --> 00:03:30,319
blocks

117
00:03:30,319 --> 00:03:31,680
all you need to know if you don't care

118
00:03:31,680 --> 00:03:32,959
about the implementation of it is it's

119
00:03:32,959 --> 00:03:35,280
symmetric means that uh both ends have

120
00:03:35,280 --> 00:03:37,840
to use the same key it's a 256-bit key

121
00:03:37,840 --> 00:03:39,280
which is really secure

122
00:03:39,280 --> 00:03:41,519
it's very fast and all we need is like

123
00:03:41,519 --> 00:03:43,360
the key the padding the iv basic

124
00:03:43,360 --> 00:03:45,120
information

125
00:03:45,120 --> 00:03:46,879
rsa on the other hand

126
00:03:46,879 --> 00:03:48,640
asymmetric encryption

127
00:03:48,640 --> 00:03:50,319
the two parties involved have different

128
00:03:50,319 --> 00:03:52,480
keys private and public also super

129
00:03:52,480 --> 00:03:53,519
secure

130
00:03:53,519 --> 00:03:56,319
but much slower so if you ever see

131
00:03:56,319 --> 00:03:58,799
people say that ransomware uses rsa it

132
00:03:58,799 --> 00:04:00,239
probably does but it doesn't encrypt

133
00:04:00,239 --> 00:04:01,840
every file with rsa it's way too slow

134
00:04:01,840 --> 00:04:03,519
right it's going to use aes something

135
00:04:03,519 --> 00:04:06,480
fast uh maybe cha cha whatever and then

136
00:04:06,480 --> 00:04:08,480
come back and encrypt the keys for the

137
00:04:08,480 --> 00:04:09,840
first algorithm with the second

138
00:04:09,840 --> 00:04:11,840
algorithm right

139
00:04:11,840 --> 00:04:13,760
so getting into

140
00:04:13,760 --> 00:04:15,680
the really dry technical stuff a little

141
00:04:15,680 --> 00:04:16,478
bit

142
00:04:16,478 --> 00:04:18,320
a lot a bit actually what does it look

143
00:04:18,320 --> 00:04:20,720
like so i've opened here in a hex editor

144
00:04:20,720 --> 00:04:22,560
you can see this is an encrypted file it

145
00:04:22,560 --> 00:04:23,360
means

146
00:04:23,360 --> 00:04:24,960
absolutely nothing to anyone right

147
00:04:24,960 --> 00:04:27,199
you're looking at random data

148
00:04:27,199 --> 00:04:29,120
but if you can see and this is the

149
00:04:29,120 --> 00:04:30,800
beginning uh file on the left and the

150
00:04:30,800 --> 00:04:32,160
end of the file on the right you can see

151
00:04:32,160 --> 00:04:33,600
on the right hand side there's english

152
00:04:33,600 --> 00:04:35,120
readable words it's actually the file

153
00:04:35,120 --> 00:04:36,560
name right

154
00:04:36,560 --> 00:04:39,600
driver installation log.txt and this is

155
00:04:39,600 --> 00:04:41,919
everything here is real sample data it's

156
00:04:41,919 --> 00:04:43,280
you know been changed a little bit so

157
00:04:43,280 --> 00:04:45,040
that there's no sort of like concern

158
00:04:45,040 --> 00:04:46,639
about client data being leaked but it's

159
00:04:46,639 --> 00:04:49,919
a real ransomware sample real data

160
00:04:49,919 --> 00:04:51,040
so

161
00:04:51,040 --> 00:04:52,080
we can look at the file name and we can

162
00:04:52,080 --> 00:04:54,000
say great that's the file name who cares

163
00:04:54,000 --> 00:04:55,520
it doesn't get us anything what's after

164
00:04:55,520 --> 00:04:56,880
the file name because we have to start

165
00:04:56,880 --> 00:04:59,120
somewhere there's some zeros it's a

166
00:04:59,120 --> 00:05:00,560
delimiter right doesn't mean anything by

167
00:05:00,560 --> 00:05:02,560
itself either and then you can kind of

168
00:05:02,560 --> 00:05:04,160
keep looking and say

169
00:05:04,160 --> 00:05:05,039
uh

170
00:05:05,039 --> 00:05:07,120
you know let's compare two files do they

171
00:05:07,120 --> 00:05:08,400
do the same thing is the file name in

172
00:05:08,400 --> 00:05:10,800
the same place what what follows let's

173
00:05:10,800 --> 00:05:13,120
really compare and contrast

174
00:05:13,120 --> 00:05:14,400
so you know

175
00:05:14,400 --> 00:05:16,000
same thing open a separate file

176
00:05:16,000 --> 00:05:17,680
favicon.ico

177
00:05:17,680 --> 00:05:19,680
same thing file names there and we don't

178
00:05:19,680 --> 00:05:21,600
know anything else about it but we can

179
00:05:21,600 --> 00:05:22,320
see

180
00:05:22,320 --> 00:05:23,520
you know here's where the similarities

181
00:05:23,520 --> 00:05:25,680
start right they both got this kind of

182
00:05:25,680 --> 00:05:28,000
weird identifier after them also english

183
00:05:28,000 --> 00:05:30,080
readable might be coincidence who knows

184
00:05:30,080 --> 00:05:31,680
but it's there in both so we know

185
00:05:31,680 --> 00:05:32,880
there's at least a similarity it's not

186
00:05:32,880 --> 00:05:34,639
just complete randomization which is

187
00:05:34,639 --> 00:05:35,600
good because we're trying to find a

188
00:05:35,600 --> 00:05:37,120
solution

189
00:05:37,120 --> 00:05:38,560
if we keep looking

190
00:05:38,560 --> 00:05:39,520
um

191
00:05:39,520 --> 00:05:40,720
you know we'll notice that it's actually

192
00:05:40,720 --> 00:05:42,240
not just the english readable part it's

193
00:05:42,240 --> 00:05:45,039
actually this big string of bytes

194
00:05:45,039 --> 00:05:46,400
what they are and why they were

195
00:05:46,400 --> 00:05:48,000
generated by what algorithm not

196
00:05:48,000 --> 00:05:49,199
important right what's important is that

197
00:05:49,199 --> 00:05:50,560
they're the same in both they're serving

198
00:05:50,560 --> 00:05:52,400
as kind of like an identifier

199
00:05:52,400 --> 00:05:54,639
uh something here is telling us more

200
00:05:54,639 --> 00:05:55,600
about

201
00:05:55,600 --> 00:05:57,360
what's going on you know we can start to

202
00:05:57,360 --> 00:05:59,840
say okay if these parts are similar is

203
00:05:59,840 --> 00:06:01,520
are there other parts that are similar

204
00:06:01,520 --> 00:06:02,960
maybe you can start to get an inkling of

205
00:06:02,960 --> 00:06:04,800
like reusing keys something like that

206
00:06:04,800 --> 00:06:06,080
that's jumping a little forward but that

207
00:06:06,080 --> 00:06:06,960
might be what's running through your

208
00:06:06,960 --> 00:06:08,400
mind when you're trying to actually you

209
00:06:08,400 --> 00:06:09,759
know save your client here you're like

210
00:06:09,759 --> 00:06:11,440
oh maybe there's hope

211
00:06:11,440 --> 00:06:12,639
and then you know your hopes are dashed

212
00:06:12,639 --> 00:06:14,319
because immediately you notice that

213
00:06:14,319 --> 00:06:16,319
after that you know 20 bytes or whatever

214
00:06:16,319 --> 00:06:17,919
it was they completely different again

215
00:06:17,919 --> 00:06:19,440
and nothing's the same

216
00:06:19,440 --> 00:06:20,880
so

217
00:06:20,880 --> 00:06:21,840
you know the questions that you're

218
00:06:21,840 --> 00:06:23,680
asking here the whole point of looking

219
00:06:23,680 --> 00:06:25,680
at these files again is like how bad is

220
00:06:25,680 --> 00:06:27,280
the damage is it actually encrypted

221
00:06:27,280 --> 00:06:28,479
because sometimes you know you get hit

222
00:06:28,479 --> 00:06:29,840
with ransomware and it's not really

223
00:06:29,840 --> 00:06:32,080
encrypted it's like xored or zipped or

224
00:06:32,080 --> 00:06:33,600
something stupid or they change the file

225
00:06:33,600 --> 00:06:34,400
name

226
00:06:34,400 --> 00:06:35,759
in this case you know you're trying to

227
00:06:35,759 --> 00:06:37,039
figure out is it encrypted what kind of

228
00:06:37,039 --> 00:06:39,360
encryption all that kind of stuff

229
00:06:39,360 --> 00:06:41,280
and you know we've run out of things to

230
00:06:41,280 --> 00:06:42,639
look at here there's nothing more right

231
00:06:42,639 --> 00:06:43,919
it's all random data except for the file

232
00:06:43,919 --> 00:06:45,280
name so i mentioned a file scanner

233
00:06:45,280 --> 00:06:46,800
earlier

234
00:06:46,800 --> 00:06:48,319
with it being a two-step process the way

235
00:06:48,319 --> 00:06:50,800
this works is dharma infects my machine

236
00:06:50,800 --> 00:06:52,080
i can't open any of my files they're all

237
00:06:52,080 --> 00:06:54,800
encrypted the hacker has given me

238
00:06:54,800 --> 00:06:56,720
generously of course a file scanner and

239
00:06:56,720 --> 00:06:58,960
they say scan your pc

240
00:06:58,960 --> 00:07:00,880
paste me the output from scanning your

241
00:07:00,880 --> 00:07:02,560
pc and then

242
00:07:02,560 --> 00:07:03,840
you know pay the ransom and i'll give

243
00:07:03,840 --> 00:07:06,080
you the data back so now we're going to

244
00:07:06,080 --> 00:07:07,199
start looking at the file scanner

245
00:07:07,199 --> 00:07:08,960
because looking at the files by itself

246
00:07:08,960 --> 00:07:10,880
totally not useful

247
00:07:10,880 --> 00:07:13,120
again not stacked analysis here but so

248
00:07:13,120 --> 00:07:14,319
we're going to look at the outputs that

249
00:07:14,319 --> 00:07:16,880
click scan pc see what the output is

250
00:07:16,880 --> 00:07:19,199
and this is a sample output of file

251
00:07:19,199 --> 00:07:20,800
scanner

252
00:07:20,800 --> 00:07:21,680
again

253
00:07:21,680 --> 00:07:22,560
you know some of you are going to

254
00:07:22,560 --> 00:07:25,360
recognize this hopefully base64

255
00:07:25,360 --> 00:07:27,039
it's just encoded data

256
00:07:27,039 --> 00:07:29,280
so then we can actually just spit it

257
00:07:29,280 --> 00:07:32,160
into a base64 decoder cyberchef a tool

258
00:07:32,160 --> 00:07:33,919
if you're not familiar with i super

259
00:07:33,919 --> 00:07:36,160
recommend it um it can do tons of stuff

260
00:07:36,160 --> 00:07:37,599
and it's really useful as just like a

261
00:07:37,599 --> 00:07:40,400
notepad kind of thing to do encryption

262
00:07:40,400 --> 00:07:42,319
decoding manipulation of bytes all kinds

263
00:07:42,319 --> 00:07:44,639
of stuff you know in a web ui

264
00:07:44,639 --> 00:07:46,080
cyber chef's not the point though right

265
00:07:46,080 --> 00:07:48,160
so paste into base64 you can see i'm

266
00:07:48,160 --> 00:07:50,240
converting from base64 to hex and the

267
00:07:50,240 --> 00:07:51,520
output's on the bottom i'm just going to

268
00:07:51,520 --> 00:07:54,879
blow it up same output same exact thing

269
00:07:54,879 --> 00:07:57,199
so again more bytes right we don't we

270
00:07:57,199 --> 00:07:58,240
don't know what's going on what we're

271
00:07:58,240 --> 00:08:00,800
looking at um

272
00:08:00,800 --> 00:08:02,400
the important thing here though is that

273
00:08:02,400 --> 00:08:04,720
like we're we can start to look for some

274
00:08:04,720 --> 00:08:06,479
identifiers and some things that like

275
00:08:06,479 --> 00:08:09,199
you know you might recognize and to me

276
00:08:09,199 --> 00:08:10,720
the first thing that's obvious here is

277
00:08:10,720 --> 00:08:12,479
that these are kind of little endian

278
00:08:12,479 --> 00:08:14,479
integers and just give another brief

279
00:08:14,479 --> 00:08:15,840
explanation of what that means because

280
00:08:15,840 --> 00:08:16,800
some people are going to be different

281
00:08:16,800 --> 00:08:19,039
levels of technical uh little endian is

282
00:08:19,039 --> 00:08:20,479
kind of when the bytes are stored in

283
00:08:20,479 --> 00:08:22,639
reverse order so this first one zero two

284
00:08:22,639 --> 00:08:24,080
zero zero zero

285
00:08:24,080 --> 00:08:25,599
is actually just a two because you kind

286
00:08:25,599 --> 00:08:26,720
of read it in reverse and we know

287
00:08:26,720 --> 00:08:28,160
they're integers we suspect they're

288
00:08:28,160 --> 00:08:30,319
integers because it's 32 bits right it's

289
00:08:30,319 --> 00:08:31,360
four bytes

290
00:08:31,360 --> 00:08:32,640
um

291
00:08:32,640 --> 00:08:34,479
so what we're trying to do here is just

292
00:08:34,479 --> 00:08:35,919
gleam some sort of structure out of this

293
00:08:35,919 --> 00:08:38,080
data we know obviously if the attacker

294
00:08:38,080 --> 00:08:40,479
needs it it's not just random it's not

295
00:08:40,479 --> 00:08:42,320
just a key it's not you know whatever so

296
00:08:42,320 --> 00:08:43,839
we want to know what kind of information

297
00:08:43,839 --> 00:08:45,760
we're providing to them

298
00:08:45,760 --> 00:08:46,959
for one because how are they going to

299
00:08:46,959 --> 00:08:48,720
use it uh two how are they going to

300
00:08:48,720 --> 00:08:50,480
manipulate it and three can we get some

301
00:08:50,480 --> 00:08:52,160
extra value out of it or are we going to

302
00:08:52,160 --> 00:08:54,720
lose data you know like are we you talk

303
00:08:54,720 --> 00:08:56,160
about um

304
00:08:56,160 --> 00:08:57,760
you know getting hit twice with double

305
00:08:57,760 --> 00:08:59,600
extortion and things but are we you know

306
00:08:59,600 --> 00:09:01,120
making our situation even worse by

307
00:09:01,120 --> 00:09:02,399
sending them even more data we want to

308
00:09:02,399 --> 00:09:03,680
know what it is right

309
00:09:03,680 --> 00:09:05,600
so

310
00:09:05,600 --> 00:09:07,040
like i said we know it's four bytes it's

311
00:09:07,040 --> 00:09:09,200
little endian no idea what they are

312
00:09:09,200 --> 00:09:10,959
are they integers are they counters they

313
00:09:10,959 --> 00:09:12,320
look like they're kind of evenly spaced

314
00:09:12,320 --> 00:09:13,120
right

315
00:09:13,120 --> 00:09:14,160
um

316
00:09:14,160 --> 00:09:15,600
i mean the first one aside the second

317
00:09:15,600 --> 00:09:17,440
two the they're kind of evenly spaced

318
00:09:17,440 --> 00:09:19,360
same amount of data after them so if we

319
00:09:19,360 --> 00:09:21,200
just kind of split it apart same data

320
00:09:21,200 --> 00:09:22,720
just formatted now i put some new lines

321
00:09:22,720 --> 00:09:24,480
in there um

322
00:09:24,480 --> 00:09:26,480
you know you can kind of almost start to

323
00:09:26,480 --> 00:09:28,240
see patterns but it's still like what is

324
00:09:28,240 --> 00:09:29,680
going on i don't know what i'm looking

325
00:09:29,680 --> 00:09:30,480
at

326
00:09:30,480 --> 00:09:31,920
and if you just

327
00:09:31,920 --> 00:09:33,519
almost you know start to peel back the

328
00:09:33,519 --> 00:09:34,720
layers a little bit

329
00:09:34,720 --> 00:09:37,279
you can say okay the section in blue is

330
00:09:37,279 --> 00:09:38,640
the same size as the section below it

331
00:09:38,640 --> 00:09:40,880
they're both eight rows of 16 bytes

332
00:09:40,880 --> 00:09:42,399
that doesn't mean anything by itself but

333
00:09:42,399 --> 00:09:43,600
it's really useful to just start getting

334
00:09:43,600 --> 00:09:46,720
a count of your information uh each blob

335
00:09:46,720 --> 00:09:48,160
if you want to call the blue a blob has

336
00:09:48,160 --> 00:09:50,160
some integer in front of it uh

337
00:09:50,160 --> 00:09:51,680
prepending it in this case the green

338
00:09:51,680 --> 00:09:53,519
correlates to the blue

339
00:09:53,519 --> 00:09:55,519
we have no idea what the yellow is uh

340
00:09:55,519 --> 00:09:57,760
and the red is like two we you know it's

341
00:09:57,760 --> 00:09:58,800
who knows

342
00:09:58,800 --> 00:10:00,560
so if we keep you know kind of thinking

343
00:10:00,560 --> 00:10:01,760
through this we could say okay well the

344
00:10:01,760 --> 00:10:04,079
two probably chord uh correlates to the

345
00:10:04,079 --> 00:10:05,839
number of blobs right

346
00:10:05,839 --> 00:10:07,680
um you know and this is my thought

347
00:10:07,680 --> 00:10:09,519
process as i'm actually reverse

348
00:10:09,519 --> 00:10:10,959
engineering this because this is like i

349
00:10:10,959 --> 00:10:13,200
said like client data from an infection

350
00:10:13,200 --> 00:10:14,480
client data has been changed obviously

351
00:10:14,480 --> 00:10:16,399
but this was the real story so i'm like

352
00:10:16,399 --> 00:10:18,000
okay there's a two it's probably the

353
00:10:18,000 --> 00:10:20,640
number of blobs what's the yellow

354
00:10:20,640 --> 00:10:21,839
and you kind of have to have a little

355
00:10:21,839 --> 00:10:23,680
bit of knowledge here in

356
00:10:23,680 --> 00:10:25,440
uh protocol analysis of some sort

357
00:10:25,440 --> 00:10:27,519
network file doesn't matter encryption

358
00:10:27,519 --> 00:10:29,360
to but you you start to pick up on these

359
00:10:29,360 --> 00:10:32,160
patterns like okay if i'm sending data

360
00:10:32,160 --> 00:10:34,640
the the two pieces of data next to each

361
00:10:34,640 --> 00:10:35,760
other probably

362
00:10:35,760 --> 00:10:37,360
correlate to each other and there's

363
00:10:37,360 --> 00:10:38,480
probably like a checksum something

364
00:10:38,480 --> 00:10:39,760
involved right and it actually turns out

365
00:10:39,760 --> 00:10:41,519
that that's exactly what this yellow is

366
00:10:41,519 --> 00:10:44,320
it's a crc32 uh it's a cycle redundancy

367
00:10:44,320 --> 00:10:45,839
check it's very similar to a hash

368
00:10:45,839 --> 00:10:47,680
checksum something like that so what

369
00:10:47,680 --> 00:10:50,160
happens is if we paste the whole blob

370
00:10:50,160 --> 00:10:51,839
following the yellow portion into cyber

371
00:10:51,839 --> 00:10:54,480
chef and we say give us a crc32

372
00:10:54,480 --> 00:10:56,399
it gives us this output

373
00:10:56,399 --> 00:10:57,920
and because we're little endian which

374
00:10:57,920 --> 00:10:59,839
again means reverse right if we kind of

375
00:10:59,839 --> 00:11:01,839
swap the bytes so that the first is now

376
00:11:01,839 --> 00:11:03,680
last the second is now third blah blah

377
00:11:03,680 --> 00:11:05,120
blah you follow the yellow lines a

378
00:11:05,120 --> 00:11:06,640
little bit you can see it's it's the

379
00:11:06,640 --> 00:11:08,959
same output so that's that's your yup

380
00:11:08,959 --> 00:11:11,519
check that's a crc

381
00:11:11,519 --> 00:11:12,880
so you know you're kind of starting to

382
00:11:12,880 --> 00:11:15,120
understand things a little bit more

383
00:11:15,120 --> 00:11:17,920
and say okay well if the red is a a blob

384
00:11:17,920 --> 00:11:20,560
counter and the l is a crc then the data

385
00:11:20,560 --> 00:11:21,600
that follows the yellow must be

386
00:11:21,600 --> 00:11:22,720
important that's what the hacker

387
00:11:22,720 --> 00:11:24,480
actually needs and you can figure out

388
00:11:24,480 --> 00:11:26,959
that you know by speculation and then

389
00:11:26,959 --> 00:11:28,560
you can run some ransomware on some vms

390
00:11:28,560 --> 00:11:29,440
a little bit more and get some

391
00:11:29,440 --> 00:11:30,880
confirmation of this which is exactly

392
00:11:30,880 --> 00:11:32,720
what i did the green is actually the

393
00:11:32,720 --> 00:11:34,800
file counter per blob

394
00:11:34,800 --> 00:11:36,880
so the number of files that's affected

395
00:11:36,880 --> 00:11:39,040
by a blob is that green counter in this

396
00:11:39,040 --> 00:11:42,079
case it will be in hex 1 2b right and

397
00:11:42,079 --> 00:11:43,040
then

398
00:11:43,040 --> 00:11:45,360
the blobs pure speculation at this point

399
00:11:45,360 --> 00:11:48,000
but we can confirm it is rsa

400
00:11:48,000 --> 00:11:50,639
1024 keys which means that you know

401
00:11:50,639 --> 00:11:52,320
these are actually

402
00:11:52,320 --> 00:11:53,360
um

403
00:11:53,360 --> 00:11:55,040
this is the data we care about right and

404
00:11:55,040 --> 00:11:56,959
we can go back and you know confirm all

405
00:11:56,959 --> 00:11:57,920
this and that's what i'm going to walk

406
00:11:57,920 --> 00:11:58,800
through

407
00:11:58,800 --> 00:12:00,959
so we need to confirm it's rsa because

408
00:12:00,959 --> 00:12:02,560
it's just a wild guess i totally pulled

409
00:12:02,560 --> 00:12:04,240
that out of nowhere right what we can

410
00:12:04,240 --> 00:12:06,000
look at is on the left the same thing

411
00:12:06,000 --> 00:12:08,160
you're just looking at the blobs

412
00:12:08,160 --> 00:12:10,079
and on the right that initial driver

413
00:12:10,079 --> 00:12:12,800
installation file right so you can see

414
00:12:12,800 --> 00:12:14,320
the blue on the left matches the blue on

415
00:12:14,320 --> 00:12:15,760
the right there's a little bit of an

416
00:12:15,760 --> 00:12:17,360
offset there but they're identical right

417
00:12:17,360 --> 00:12:20,720
it's the same exact information

418
00:12:20,720 --> 00:12:22,000
now

419
00:12:22,000 --> 00:12:23,760
why do we know it's rsa besides it could

420
00:12:23,760 --> 00:12:25,040
be anything right it's just there's the

421
00:12:25,040 --> 00:12:27,360
same data who cares but it's the exact

422
00:12:27,360 --> 00:12:28,720
same blob

423
00:12:28,720 --> 00:12:31,040
and we can think just by you know

424
00:12:31,040 --> 00:12:32,720
wondering through how ransomware works

425
00:12:32,720 --> 00:12:34,560
that we know sometimes rsa keys get

426
00:12:34,560 --> 00:12:37,120
reused uh it's a unique aes key but what

427
00:12:37,120 --> 00:12:38,880
about the other stuff in the file right

428
00:12:38,880 --> 00:12:40,399
if we're calling this an rsa blob what

429
00:12:40,399 --> 00:12:42,079
is everything else

430
00:12:42,079 --> 00:12:44,079
well

431
00:12:44,079 --> 00:12:46,079
let me get to that but so

432
00:12:46,079 --> 00:12:47,440
i'm going a little bit out over here

433
00:12:47,440 --> 00:12:49,200
sorry about that jumping around but it's

434
00:12:49,200 --> 00:12:50,839
rsa so what do we know what do we care

435
00:12:50,839 --> 00:12:53,519
right it's our say that means there's no

436
00:12:53,519 --> 00:12:54,800
free decrypter that means this isn't

437
00:12:54,800 --> 00:12:56,480
zipping this isn't xoring this isn't

438
00:12:56,480 --> 00:12:58,240
like oh i can make a universal decrypter

439
00:12:58,240 --> 00:13:00,800
it means there's actual rsa keys at play

440
00:13:00,800 --> 00:13:02,800
and if one of you guys has like an rsa

441
00:13:02,800 --> 00:13:04,880
breaking decryption algorithm please

442
00:13:04,880 --> 00:13:06,320
tell me about it you can make a lot of

443
00:13:06,320 --> 00:13:08,240
money but um

444
00:13:08,240 --> 00:13:10,399
you know it's it's unbreakable it means

445
00:13:10,399 --> 00:13:12,000
this if the attackers are at least

446
00:13:12,000 --> 00:13:13,680
somewhat sophisticated right you're

447
00:13:13,680 --> 00:13:15,440
dealing with like real players here in a

448
00:13:15,440 --> 00:13:17,600
sense uh and do we have to pay the

449
00:13:17,600 --> 00:13:18,959
ransom is always the next question

450
00:13:18,959 --> 00:13:20,240
especially when you talk to the client

451
00:13:20,240 --> 00:13:21,600
you could tell them i i broke the

452
00:13:21,600 --> 00:13:23,200
encryption or that i know what they're

453
00:13:23,200 --> 00:13:25,200
using and i figured out the algorithm i

454
00:13:25,200 --> 00:13:26,720
spent 40 hours doing it and it's great

455
00:13:26,720 --> 00:13:27,680
and i know all this stuff now they're

456
00:13:27,680 --> 00:13:29,279
gonna say okay but did i save money

457
00:13:29,279 --> 00:13:30,160
right

458
00:13:30,160 --> 00:13:32,079
so the answer is like obviously yes you

459
00:13:32,079 --> 00:13:33,440
have to pay because it's rsa we can't

460
00:13:33,440 --> 00:13:34,560
break it

461
00:13:34,560 --> 00:13:36,000
but there's some information that we've

462
00:13:36,000 --> 00:13:38,079
gleaned and that we can use and that is

463
00:13:38,079 --> 00:13:39,839
actually super super useful if you're

464
00:13:39,839 --> 00:13:42,000
willing to pay the ransom which might

465
00:13:42,000 --> 00:13:43,360
you know you might have to let's assume

466
00:13:43,360 --> 00:13:44,399
you have to

467
00:13:44,399 --> 00:13:47,199
since we know each key has a

468
00:13:47,199 --> 00:13:47,440
uh counter

469
00:13:47,440 --> 00:13:49,199
we know that we need every key to

470
00:13:49,199 --> 00:13:51,519
decrypt right that's common sense you

471
00:13:51,519 --> 00:13:53,839
you can't unlock a lock without the key

472
00:13:53,839 --> 00:13:56,720
if picking it is out of the question um

473
00:13:56,720 --> 00:13:59,120
but do does the hacker need to know the

474
00:13:59,120 --> 00:14:00,240
counter

475
00:14:00,240 --> 00:14:01,360
there's no reason right it doesn't

476
00:14:01,360 --> 00:14:02,720
correlate to anything we could decrease

477
00:14:02,720 --> 00:14:04,480
the counter might save money if it's

478
00:14:04,480 --> 00:14:06,240
like a sliding pay scale

479
00:14:06,240 --> 00:14:08,240
um you know we could put one file

480
00:14:08,240 --> 00:14:09,760
instead of one million files affected

481
00:14:09,760 --> 00:14:11,279
they're probably way more liable to

482
00:14:11,279 --> 00:14:13,040
charge you money if it's a million files

483
00:14:13,040 --> 00:14:14,160
because they think they've hit a data

484
00:14:14,160 --> 00:14:15,760
center rather than like a personal hard

485
00:14:15,760 --> 00:14:17,199
drive right

486
00:14:17,199 --> 00:14:18,880
um

487
00:14:18,880 --> 00:14:20,240
so we know we need every key but we can

488
00:14:20,240 --> 00:14:21,279
probably change that and then there's

489
00:14:21,279 --> 00:14:23,279
this big question of like

490
00:14:23,279 --> 00:14:25,600
do we cheat do we manipulate the data

491
00:14:25,600 --> 00:14:27,120
what if we're wrong all this kind of

492
00:14:27,120 --> 00:14:28,880
stuff right so the what if you're wrong

493
00:14:28,880 --> 00:14:30,800
can be pretty easily alleviated by doing

494
00:14:30,800 --> 00:14:32,079
tons of tests here you can make sure

495
00:14:32,079 --> 00:14:33,279
it's the same output that you expect

496
00:14:33,279 --> 00:14:35,519
every time all that kind of stuff

497
00:14:35,519 --> 00:14:37,040
there's not really an ethical

498
00:14:37,040 --> 00:14:38,560
consideration here being that they're

499
00:14:38,560 --> 00:14:40,720
hackers and you got hit with ransomware

500
00:14:40,720 --> 00:14:44,079
it's you know who cares about them

501
00:14:44,079 --> 00:14:45,440
they're going to get paid less but you

502
00:14:45,440 --> 00:14:48,800
know they deserve it so the kind of you

503
00:14:48,800 --> 00:14:50,480
want to say yes decrease the files be

504
00:14:50,480 --> 00:14:51,519
careful but there's other things that

505
00:14:51,519 --> 00:14:53,279
can happen too

506
00:14:53,279 --> 00:14:55,040
and for one it's

507
00:14:55,040 --> 00:14:56,800
are you sure that you modifying the

508
00:14:56,800 --> 00:14:59,199
files is actually getting all the keys

509
00:14:59,199 --> 00:15:00,079
are you sure that you're not

510
00:15:00,079 --> 00:15:01,600
accidentally like changing something

511
00:15:01,600 --> 00:15:03,120
you've made sure that the file counts

512
00:15:03,120 --> 00:15:04,959
that are original line up because if you

513
00:15:04,959 --> 00:15:07,680
did have a data center affected and

514
00:15:07,680 --> 00:15:09,680
a million files are encrypted but you

515
00:15:09,680 --> 00:15:10,560
actually

516
00:15:10,560 --> 00:15:12,639
this counter only says 10 then you've

517
00:15:12,639 --> 00:15:13,680
you don't want to mess with that because

518
00:15:13,680 --> 00:15:14,880
you've screwed something up you know

519
00:15:14,880 --> 00:15:17,040
you're missing keys

520
00:15:17,040 --> 00:15:19,279
what about network storage other mounts

521
00:15:19,279 --> 00:15:21,279
there's all kinds of questions here

522
00:15:21,279 --> 00:15:24,079
is the attacker aware of storage

523
00:15:24,079 --> 00:15:25,440
are these keys lining up with your

524
00:15:25,440 --> 00:15:26,959
storage there's always considerations

525
00:15:26,959 --> 00:15:28,000
with ransomware whenever you're trying

526
00:15:28,000 --> 00:15:30,480
to do any kind of manual recovery of

527
00:15:30,480 --> 00:15:32,160
attached storage devices because

528
00:15:32,160 --> 00:15:33,759
sometimes the attackers do really crazy

529
00:15:33,759 --> 00:15:35,440
things and you're not expecting it and

530
00:15:35,440 --> 00:15:37,759
you end up with corrupt data

531
00:15:37,759 --> 00:15:38,959
if you miss the files you're going to

532
00:15:38,959 --> 00:15:41,360
have to pay again so consider like

533
00:15:41,360 --> 00:15:42,880
i just completely get rid of the section

534
00:15:42,880 --> 00:15:44,160
in blue because i deemed that i don't

535
00:15:44,160 --> 00:15:45,440
need it i looked at all the files that

536
00:15:45,440 --> 00:15:46,720
use it and

537
00:15:46,720 --> 00:15:48,399
i don't want to pay for multiple keys

538
00:15:48,399 --> 00:15:49,680
that i don't need so i just get rid of

539
00:15:49,680 --> 00:15:51,279
it and i send it to the attacker right

540
00:15:51,279 --> 00:15:53,040
if i missed it i can't email the

541
00:15:53,040 --> 00:15:55,759
attacker and say hey guy can you please

542
00:15:55,759 --> 00:15:58,480
give me my money back for those files

543
00:15:58,480 --> 00:15:59,440
you know you're going to have to pay

544
00:15:59,440 --> 00:16:00,959
again probably the same ransom probably

545
00:16:00,959 --> 00:16:02,399
more actually if they know that you are

546
00:16:02,399 --> 00:16:03,839
messing with things

547
00:16:03,839 --> 00:16:05,120
or they might just not want to deal with

548
00:16:05,120 --> 00:16:07,120
you if you know they start to smell law

549
00:16:07,120 --> 00:16:08,399
enforcement or something else or they

550
00:16:08,399 --> 00:16:11,120
think they do right

551
00:16:11,120 --> 00:16:12,959
missing files

552
00:16:12,959 --> 00:16:14,639
you know if you're missing keys you

553
00:16:14,639 --> 00:16:16,079
really need to reconsider this because

554
00:16:16,079 --> 00:16:18,320
just to reiterate it's really hard for

555
00:16:18,320 --> 00:16:20,320
you on the defense side to remap a

556
00:16:20,320 --> 00:16:21,839
destroyed network because you don't know

557
00:16:21,839 --> 00:16:23,120
what's been corrupted what's been

558
00:16:23,120 --> 00:16:25,040
affected it's really easy for the

559
00:16:25,040 --> 00:16:27,279
attacker to shotgun blast their malware

560
00:16:27,279 --> 00:16:29,199
out right they could hit as many servers

561
00:16:29,199 --> 00:16:30,560
as you want they could spread it from

562
00:16:30,560 --> 00:16:32,399
one machine ten machines and they're

563
00:16:32,399 --> 00:16:34,079
corrupting things along the way maybe

564
00:16:34,079 --> 00:16:35,839
maybe not but it's easy for them to

565
00:16:35,839 --> 00:16:37,279
corrupt it's hard for you to rebuild so

566
00:16:37,279 --> 00:16:38,639
you need to be really careful about

567
00:16:38,639 --> 00:16:39,920
these things

568
00:16:39,920 --> 00:16:40,959
and of course they're not forgiving

569
00:16:40,959 --> 00:16:42,079
again

570
00:16:42,079 --> 00:16:44,240
um so you know just as an exercise you

571
00:16:44,240 --> 00:16:47,360
can look at the file count and say

572
00:16:47,360 --> 00:16:49,199
does it seem right is it 11 000 files

573
00:16:49,199 --> 00:16:51,519
infected is it 2000 files affected uh

574
00:16:51,519 --> 00:16:54,320
what if it said f right f is 15. so

575
00:16:54,320 --> 00:16:56,160
that's just the things to think about

576
00:16:56,160 --> 00:16:57,440
so

577
00:16:57,440 --> 00:16:59,600
okay we've deemed what we can we paid

578
00:16:59,600 --> 00:17:01,199
now what right

579
00:17:01,199 --> 00:17:02,800
do you trust them probably not they're

580
00:17:02,800 --> 00:17:04,240
going to send you a decrypter next

581
00:17:04,240 --> 00:17:05,199
that's the next step right they're going

582
00:17:05,199 --> 00:17:06,799
to respond and say run this it'll

583
00:17:06,799 --> 00:17:09,119
decrypt your system you're good

584
00:17:09,119 --> 00:17:10,720
the problem with that is they already

585
00:17:10,720 --> 00:17:12,720
infected you with malware once so do you

586
00:17:12,720 --> 00:17:15,039
trust them not to do it again because uh

587
00:17:15,039 --> 00:17:16,400
you know i

588
00:17:16,400 --> 00:17:19,439
i wouldn't right um and i want to spend

589
00:17:19,439 --> 00:17:20,720
some time talking about this just

590
00:17:20,720 --> 00:17:22,880
because it's can they reinfect you of

591
00:17:22,880 --> 00:17:23,839
course

592
00:17:23,839 --> 00:17:25,760
um what's the alternative if you don't

593
00:17:25,760 --> 00:17:26,880
want to run their software right the

594
00:17:26,880 --> 00:17:28,720
alternative is to build your own

595
00:17:28,720 --> 00:17:30,080
decrypter have someone build your

596
00:17:30,080 --> 00:17:34,080
decrypter you know whatever right um

597
00:17:34,080 --> 00:17:35,760
are they going to reinfect you who knows

598
00:17:35,760 --> 00:17:37,840
they might be ethical hackers in in the

599
00:17:37,840 --> 00:17:39,120
other sense of ethical right they're

600
00:17:39,120 --> 00:17:40,960
black hat but then they decide to be

601
00:17:40,960 --> 00:17:41,760
nice

602
00:17:41,760 --> 00:17:43,679
um

603
00:17:43,679 --> 00:17:45,760
you know and there's all kinds of really

604
00:17:45,760 --> 00:17:47,360
bad things that they could do like say

605
00:17:47,360 --> 00:17:49,360
for example i send my output of my

606
00:17:49,360 --> 00:17:51,200
scanner and it says okay

607
00:17:51,200 --> 00:17:54,640
um there's 20 keys 20 million files and

608
00:17:54,640 --> 00:17:56,080
i pay the ransom and the attacker sends

609
00:17:56,080 --> 00:17:57,360
me the decrypter for those 20 million

610
00:17:57,360 --> 00:18:00,160
files 20 keys but they lob off the

611
00:18:00,160 --> 00:18:02,160
bottom two keys because that's 18 out of

612
00:18:02,160 --> 00:18:04,240
the 20 million right if i haven't done

613
00:18:04,240 --> 00:18:05,840
this reverse engineering i'm not going

614
00:18:05,840 --> 00:18:07,280
to know that i'm going to have no idea

615
00:18:07,280 --> 00:18:08,720
all i know is i sent them data they sent

616
00:18:08,720 --> 00:18:10,320
me back data

617
00:18:10,320 --> 00:18:12,480
what's going on right um

618
00:18:12,480 --> 00:18:15,200
them lobbing off the files corrupts it

619
00:18:15,200 --> 00:18:16,640
means i can't get those

620
00:18:16,640 --> 00:18:18,960
those files back and they can just come

621
00:18:18,960 --> 00:18:20,559
back and say like oh you sent me corrupt

622
00:18:20,559 --> 00:18:22,160
data and now the ransom is an extra

623
00:18:22,160 --> 00:18:23,760
bitcoin or an extra 10 bitcoin or

624
00:18:23,760 --> 00:18:26,480
whatever right um

625
00:18:26,480 --> 00:18:28,559
so that's kind of you know

626
00:18:28,559 --> 00:18:30,480
you still have to interact with them but

627
00:18:30,480 --> 00:18:32,640
at least you can be wise to their you

628
00:18:32,640 --> 00:18:34,480
know antics if you know what's going on

629
00:18:34,480 --> 00:18:35,919
um and this is something we've seen with

630
00:18:35,919 --> 00:18:38,720
a couple of people clients um

631
00:18:38,720 --> 00:18:40,160
even not clients you know just sometimes

632
00:18:40,160 --> 00:18:41,440
you read about it online and blogs or

633
00:18:41,440 --> 00:18:43,360
whatever and people say well the ransom

634
00:18:43,360 --> 00:18:44,400
was

635
00:18:44,400 --> 00:18:45,919
0.1 bitcoin and then they came back and

636
00:18:45,919 --> 00:18:47,600
they said another 0.2 bitcoin and they

637
00:18:47,600 --> 00:18:49,360
said another 0.5 and eventually i paid

638
00:18:49,360 --> 00:18:50,640
three whole bitcoin because i just had

639
00:18:50,640 --> 00:18:52,400
to keep going and going and going

640
00:18:52,400 --> 00:18:53,360
um

641
00:18:53,360 --> 00:18:55,200
you know it happens right

642
00:18:55,200 --> 00:18:57,280
so enough of the the kind of

643
00:18:57,280 --> 00:18:58,720
you know back to the technical a little

644
00:18:58,720 --> 00:19:00,960
a little less of the preachy-ness right

645
00:19:00,960 --> 00:19:02,960
but okay the output of what the attacker

646
00:19:02,960 --> 00:19:04,240
sent me back

647
00:19:04,240 --> 00:19:06,000
what is it

648
00:19:06,000 --> 00:19:07,600
so

649
00:19:07,600 --> 00:19:09,280
it's more base64 this part looks

650
00:19:09,280 --> 00:19:11,840
familiar

651
00:19:12,160 --> 00:19:13,440
you know it looks actually really

652
00:19:13,440 --> 00:19:15,120
familiar if you

653
00:19:15,120 --> 00:19:16,320
look at it

654
00:19:16,320 --> 00:19:17,760
spread out the same way we did before we

655
00:19:17,760 --> 00:19:18,960
see there's a two at the top again

656
00:19:18,960 --> 00:19:20,880
because we sent two keys we got two back

657
00:19:20,880 --> 00:19:22,320
we can assume it's a crc in the same

658
00:19:22,320 --> 00:19:23,679
place and we can double check that and

659
00:19:23,679 --> 00:19:24,960
it is

660
00:19:24,960 --> 00:19:28,640
and then we know we can look at the

661
00:19:28,640 --> 00:19:30,320
the next blob that's not highlighted in

662
00:19:30,320 --> 00:19:31,919
blue this time but starts with the aaa

663
00:19:31,919 --> 00:19:34,320
at the top right after the yellow and it

664
00:19:34,320 --> 00:19:36,320
matches um

665
00:19:36,320 --> 00:19:38,480
the before and after right the before

666
00:19:38,480 --> 00:19:40,480
being what we sent to the hacker the

667
00:19:40,480 --> 00:19:41,919
after being what we got back it's the

668
00:19:41,919 --> 00:19:44,160
same exact data and you know this might

669
00:19:44,160 --> 00:19:46,080
cause you pause at first you might say

670
00:19:46,080 --> 00:19:47,039
okay

671
00:19:47,039 --> 00:19:48,400
why did they send me back the exact same

672
00:19:48,400 --> 00:19:50,799
data um did i get scammed

673
00:19:50,799 --> 00:19:52,799
which is always a consideration but no

674
00:19:52,799 --> 00:19:54,320
in this case you didn't get scammed this

675
00:19:54,320 --> 00:19:55,679
is what you wanted because what's

676
00:19:55,679 --> 00:19:58,080
happening is this is the rsa cipher text

677
00:19:58,080 --> 00:20:00,720
of the encryption key

678
00:20:00,720 --> 00:20:02,480
they need to know just as well as you do

679
00:20:02,480 --> 00:20:04,159
what key associates with what file and

680
00:20:04,159 --> 00:20:05,840
there could be millions right they could

681
00:20:05,840 --> 00:20:08,080
be and it is in this case one key per

682
00:20:08,080 --> 00:20:10,640
one file um they do it automatically

683
00:20:10,640 --> 00:20:12,400
randomly doesn't matter them there's no

684
00:20:12,400 --> 00:20:14,799
master key anything like that so

685
00:20:14,799 --> 00:20:17,360
they need to associate that ciphertext

686
00:20:17,360 --> 00:20:19,280
in the encrypted file with the new key

687
00:20:19,280 --> 00:20:20,480
they've given you back right so they're

688
00:20:20,480 --> 00:20:22,320
going to give you the same data this is

689
00:20:22,320 --> 00:20:23,840
what you want

690
00:20:23,840 --> 00:20:26,640
after that data you know after that same

691
00:20:26,640 --> 00:20:28,799
blob that we've already verified you can

692
00:20:28,799 --> 00:20:31,280
say okay well it's followed by 32 bytes

693
00:20:31,280 --> 00:20:32,400
um

694
00:20:32,400 --> 00:20:35,520
great right 32 bytes hooray but aes keys

695
00:20:35,520 --> 00:20:36,880
are 32 bytes

696
00:20:36,880 --> 00:20:38,640
you can make a pretty

697
00:20:38,640 --> 00:20:40,240
simple you know assumption here that

698
00:20:40,240 --> 00:20:42,240
these are aes keys

699
00:20:42,240 --> 00:20:44,480
i should say aes 256 keys are 32 bytes

700
00:20:44,480 --> 00:20:46,080
it's in the name but

701
00:20:46,080 --> 00:20:48,559
then you can say okay you know we have

702
00:20:48,559 --> 00:20:50,159
the key great now let's go back and look

703
00:20:50,159 --> 00:20:52,080
at the file again

704
00:20:52,080 --> 00:20:53,039
now

705
00:20:53,039 --> 00:20:55,840
we we know the files are using rsa to

706
00:20:55,840 --> 00:20:57,440
encrypt the aes keys and the files are

707
00:20:57,440 --> 00:20:58,720
encrypted and they have the file name in

708
00:20:58,720 --> 00:20:59,840
them that's great that's a ton of

709
00:20:59,840 --> 00:21:01,520
information we don't know anything else

710
00:21:01,520 --> 00:21:03,200
about it we don't know what all this

711
00:21:03,200 --> 00:21:04,480
extra data is

712
00:21:04,480 --> 00:21:06,000
we don't know where the file starts and

713
00:21:06,000 --> 00:21:07,440
where it stops you know in theory you'd

714
00:21:07,440 --> 00:21:09,280
say okay it starts at the start and it

715
00:21:09,280 --> 00:21:10,960
stops at the end but

716
00:21:10,960 --> 00:21:12,400
that's probably not true because there's

717
00:21:12,400 --> 00:21:13,919
at least some extra data in there right

718
00:21:13,919 --> 00:21:15,760
so it could get manipulated in all kinds

719
00:21:15,760 --> 00:21:17,760
of weird ways

720
00:21:17,760 --> 00:21:19,760
we know where the file name is we know

721
00:21:19,760 --> 00:21:20,799
kind of what i'm going to call the

722
00:21:20,799 --> 00:21:22,400
header of the footer

723
00:21:22,400 --> 00:21:25,360
weird name but it starts with that bv0y

724
00:21:25,360 --> 00:21:27,600
um it the footer just the end and it's

725
00:21:27,600 --> 00:21:29,120
the header because that's it's the start

726
00:21:29,120 --> 00:21:31,840
of the end right

727
00:21:31,840 --> 00:21:33,200
there's the header of the footer again

728
00:21:33,200 --> 00:21:34,880
just for clarity and then there's some

729
00:21:34,880 --> 00:21:36,480
weird counter and we're gonna i'm

730
00:21:36,480 --> 00:21:37,919
calling it 16 bytes because i don't know

731
00:21:37,919 --> 00:21:39,600
what it is it could be it could be

732
00:21:39,600 --> 00:21:42,559
whatever right um it's just 16 bytes in

733
00:21:42,559 --> 00:21:44,559
a row and the reason that i've kind of

734
00:21:44,559 --> 00:21:46,480
padded that 16 bytes off is because it

735
00:21:46,480 --> 00:21:48,159
stands it by itself when you start to

736
00:21:48,159 --> 00:21:49,600
compare it to the file name and the

737
00:21:49,600 --> 00:21:51,280
header of the footer and all this kind

738
00:21:51,280 --> 00:21:52,799
of weird stuff and then right after that

739
00:21:52,799 --> 00:21:55,440
16 bytes is where the rsa key existed

740
00:21:55,440 --> 00:21:57,280
so

741
00:21:57,280 --> 00:21:58,400
you're kind of saying okay i know where

742
00:21:58,400 --> 00:22:00,960
the rsa key is i know presumably where

743
00:22:00,960 --> 00:22:03,280
the end of the file is because i know

744
00:22:03,280 --> 00:22:04,559
uh the file name and it's probably

745
00:22:04,559 --> 00:22:06,080
before that and all this kind of stuff

746
00:22:06,080 --> 00:22:07,600
so

747
00:22:07,600 --> 00:22:08,720
this

748
00:22:08,720 --> 00:22:10,240
sum counter we don't know what it is

749
00:22:10,240 --> 00:22:12,799
it's another integer presumably right

750
00:22:12,799 --> 00:22:13,840
um

751
00:22:13,840 --> 00:22:15,200
i'm calling it a counter because it's

752
00:22:15,200 --> 00:22:17,840
very small normally if it's like some

753
00:22:17,840 --> 00:22:19,760
large integer that's random or crc

754
00:22:19,760 --> 00:22:20,640
something like that it's going to be

755
00:22:20,640 --> 00:22:23,200
large it's going to be you know

756
00:22:23,200 --> 00:22:25,280
have better entropy than 0. this one is

757
00:22:25,280 --> 00:22:27,200
just zero e

758
00:22:27,200 --> 00:22:30,000
it's 14 that's very small right so the

759
00:22:30,000 --> 00:22:31,600
the consideration is like what is this

760
00:22:31,600 --> 00:22:33,360
being used for

761
00:22:33,360 --> 00:22:34,799
what like what what's happening here

762
00:22:34,799 --> 00:22:36,640
right what is this counter

763
00:22:36,640 --> 00:22:40,159
and we can actually figure out

764
00:22:40,159 --> 00:22:41,760
that the first 16 bytes is the iv

765
00:22:41,760 --> 00:22:43,919
because we're assuming it's aes aes uses

766
00:22:43,919 --> 00:22:46,480
16 byte block ciphers and they have 16

767
00:22:46,480 --> 00:22:48,960
byte ivs and the counter is actually

768
00:22:48,960 --> 00:22:50,080
just padding

769
00:22:50,080 --> 00:22:51,120
because we know that we have to

770
00:22:51,120 --> 00:22:52,559
associate things back to the encryption

771
00:22:52,559 --> 00:22:54,159
algorithm because the goal for us and

772
00:22:54,159 --> 00:22:57,120
the attacker is to decrypt so we know

773
00:22:57,120 --> 00:22:58,000
that

774
00:22:58,000 --> 00:22:59,600
you know we need some number of padding

775
00:22:59,600 --> 00:23:01,760
bytes between 0 and 15 in this case

776
00:23:01,760 --> 00:23:04,080
happens to be 14 and we know the iv and

777
00:23:04,080 --> 00:23:06,840
we know the key so we can try to decrypt

778
00:23:06,840 --> 00:23:09,679
so there is a little bit still of uh

779
00:23:09,679 --> 00:23:12,320
extra speculation of like what is this

780
00:23:12,320 --> 00:23:14,159
you know what what is what about the end

781
00:23:14,159 --> 00:23:15,679
there's still four bytes on the end what

782
00:23:15,679 --> 00:23:17,039
is it important do i need to know about

783
00:23:17,039 --> 00:23:19,840
it am i gonna like destroy my system um

784
00:23:19,840 --> 00:23:22,559
it's like maybe still a counter but it's

785
00:23:22,559 --> 00:23:24,159
kind of simultaneously small and big

786
00:23:24,159 --> 00:23:26,480
right 58 hex

787
00:23:26,480 --> 00:23:28,240
that's not a small number it's also not

788
00:23:28,240 --> 00:23:29,919
like a four byte number so you're like

789
00:23:29,919 --> 00:23:31,760
what is going on here it's not padding

790
00:23:31,760 --> 00:23:32,960
it can't be a file counter because it

791
00:23:32,960 --> 00:23:34,000
doesn't match the one that we looked at

792
00:23:34,000 --> 00:23:36,320
previously is it important can i throw

793
00:23:36,320 --> 00:23:38,159
it away there's tons of considerations

794
00:23:38,159 --> 00:23:40,320
right it turns out that you know it kind

795
00:23:40,320 --> 00:23:43,360
of matters but not really um

796
00:23:43,360 --> 00:23:45,039
and we we can figure out what it is this

797
00:23:45,039 --> 00:23:46,720
is pretty grueling actually for me to

798
00:23:46,720 --> 00:23:48,400
figure out because i was like really

799
00:23:48,400 --> 00:23:49,600
concerned i'm gonna corrupt some data

800
00:23:49,600 --> 00:23:51,039
right so

801
00:23:51,039 --> 00:23:52,320
if we start to look at how big the

802
00:23:52,320 --> 00:23:54,400
footer is in general

803
00:23:54,400 --> 00:23:57,600
we know we have a 26 byte header

804
00:23:57,600 --> 00:24:01,039
16 byte iv 4 byte padding 2 128 rsa and

805
00:24:01,039 --> 00:24:02,080
then for

806
00:24:02,080 --> 00:24:03,520
weird bytes

807
00:24:03,520 --> 00:24:05,919
um and honestly this is just counting by

808
00:24:05,919 --> 00:24:08,240
hand there's no like special magic going

809
00:24:08,240 --> 00:24:09,679
on here

810
00:24:09,679 --> 00:24:13,360
and if we add all those up we get 178.

811
00:24:13,360 --> 00:24:16,000
uh great 178. what the hell

812
00:24:16,000 --> 00:24:18,159
before those you have the file name and

813
00:24:18,159 --> 00:24:20,320
a bunch of weird stuff right so if this

814
00:24:20,320 --> 00:24:22,000
is before those meaning you start at the

815
00:24:22,000 --> 00:24:24,240
end go backwards 178.

816
00:24:24,240 --> 00:24:25,039
well

817
00:24:25,039 --> 00:24:27,520
you know some more quick math 5 8 hex is

818
00:24:27,520 --> 00:24:32,240
88 178 plus 88 is 266. if we go back 266

819
00:24:32,240 --> 00:24:33,840
that's the start of all these weird

820
00:24:33,840 --> 00:24:35,440
zeros

821
00:24:35,440 --> 00:24:36,799
so we don't know what any of those zeros

822
00:24:36,799 --> 00:24:39,200
at the top are either but you know

823
00:24:39,200 --> 00:24:41,279
now we know okay that weird counter at

824
00:24:41,279 --> 00:24:43,360
the end leads us before all this other

825
00:24:43,360 --> 00:24:45,039
weird stuff so that's where the file

826
00:24:45,039 --> 00:24:48,480
ended um you know we can cut off all

827
00:24:48,480 --> 00:24:50,159
this crap

828
00:24:50,159 --> 00:24:51,919
and we can say you know

829
00:24:51,919 --> 00:24:53,840
the file is the rest of it from zero to

830
00:24:53,840 --> 00:24:56,080
down um so you might say okay are we

831
00:24:56,080 --> 00:24:57,360
done and there's a couple reasons that

832
00:24:57,360 --> 00:24:59,279
the answer is no

833
00:24:59,279 --> 00:25:00,720
um

834
00:25:00,720 --> 00:25:02,880
you know yes you've found you've solved

835
00:25:02,880 --> 00:25:04,240
this part of the protocol there's

836
00:25:04,240 --> 00:25:07,120
actually a lot more to it

837
00:25:07,120 --> 00:25:08,240
you still have to write the decryption

838
00:25:08,240 --> 00:25:09,679
though you

839
00:25:09,679 --> 00:25:11,360
have to really really really worry about

840
00:25:11,360 --> 00:25:12,159
writing that decryption because

841
00:25:12,159 --> 00:25:13,360
encryption is really hard to get right

842
00:25:13,360 --> 00:25:15,279
and what you have to consider is did the

843
00:25:15,279 --> 00:25:16,960
attacker get it right because if they

844
00:25:16,960 --> 00:25:18,799
messed up on their end and you do it

845
00:25:18,799 --> 00:25:20,159
correctly on your end that leads to

846
00:25:20,159 --> 00:25:21,200
corruption

847
00:25:21,200 --> 00:25:22,559
you almost need to mess up in the same

848
00:25:22,559 --> 00:25:24,159
way right you need you need to kind of

849
00:25:24,159 --> 00:25:25,760
replicate their encryption before you

850
00:25:25,760 --> 00:25:28,000
can decrypt it to be sure um you need to

851
00:25:28,000 --> 00:25:29,279
make sure that you catch any bugs or

852
00:25:29,279 --> 00:25:31,360
corruptions i've seen attackers that

853
00:25:31,360 --> 00:25:33,520
like accidentally delete data and it

854
00:25:33,520 --> 00:25:34,960
ends up kind of working out for them

855
00:25:34,960 --> 00:25:36,559
because they have some like weird off by

856
00:25:36,559 --> 00:25:39,279
one error and it like replicates

857
00:25:39,279 --> 00:25:41,039
it's crazy but like somehow they've

858
00:25:41,039 --> 00:25:42,480
ruined their encryption and it ends up

859
00:25:42,480 --> 00:25:44,480
with the right data anyway because they

860
00:25:44,480 --> 00:25:46,000
have the bug in both the encryption and

861
00:25:46,000 --> 00:25:47,520
decryption stage

862
00:25:47,520 --> 00:25:48,559
you probably are going to want to

863
00:25:48,559 --> 00:25:49,840
support contract if you're doing this

864
00:25:49,840 --> 00:25:51,279
with your client and that's obviously

865
00:25:51,279 --> 00:25:53,760
like way more businessy than technical

866
00:25:53,760 --> 00:25:55,360
but you're going to want something in

867
00:25:55,360 --> 00:25:57,120
the works there because you're gonna

868
00:25:57,120 --> 00:25:58,240
have to keep supporting this if you're

869
00:25:58,240 --> 00:25:59,520
doing manual decryption for them there's

870
00:25:59,520 --> 00:26:01,200
no way it's like a one-time engagement

871
00:26:01,200 --> 00:26:02,880
you go on and say okay here you go guys

872
00:26:02,880 --> 00:26:04,799
you're done uh i'll never speak to you

873
00:26:04,799 --> 00:26:05,840
again because everything's perfect

874
00:26:05,840 --> 00:26:09,200
that's not the world we live in right um

875
00:26:09,200 --> 00:26:10,559
you're also going to obviously want to

876
00:26:10,559 --> 00:26:13,039
fill them in as much as you can on the

877
00:26:13,039 --> 00:26:14,320
technical details they're probably not

878
00:26:14,320 --> 00:26:16,159
going to go for it but you need to tell

879
00:26:16,159 --> 00:26:16,960
them

880
00:26:16,960 --> 00:26:18,640
the next consideration is network shares

881
00:26:18,640 --> 00:26:19,760
but what i actually want to do real

882
00:26:19,760 --> 00:26:22,960
quick is show a couple more slides

883
00:26:22,960 --> 00:26:24,799
that i have disabled so just bear with

884
00:26:24,799 --> 00:26:26,400
me for one second i've disabled a whole

885
00:26:26,400 --> 00:26:27,600
ton because i didn't think i was going

886
00:26:27,600 --> 00:26:28,799
to get to them and i've been talking

887
00:26:28,799 --> 00:26:31,520
really fast

888
00:26:33,360 --> 00:26:36,639
skip slides okay

889
00:26:37,039 --> 00:26:38,400
cool so

890
00:26:38,400 --> 00:26:40,640
there's another problem

891
00:26:40,640 --> 00:26:41,919
you might say what we just figured

892
00:26:41,919 --> 00:26:44,720
everything out the problem is that

893
00:26:44,720 --> 00:26:46,640
there's actually not just one protocol

894
00:26:46,640 --> 00:26:49,919
with dharma um there's two and it's

895
00:26:49,919 --> 00:26:51,440
really different

896
00:26:51,440 --> 00:26:52,880
dharma actually

897
00:26:52,880 --> 00:26:54,559
treats bigger files way differently than

898
00:26:54,559 --> 00:26:56,159
smaller files

899
00:26:56,159 --> 00:26:57,919
smaller files or that's protocol that we

900
00:26:57,919 --> 00:26:58,799
just went over it's pretty

901
00:26:58,799 --> 00:27:01,279
straightforward it just says okay great

902
00:27:01,279 --> 00:27:03,200
encryption key find it decrypt it it's

903
00:27:03,200 --> 00:27:04,720
pretty straightforward

904
00:27:04,720 --> 00:27:07,279
anything that is 24 bit shipped at 16

905
00:27:07,279 --> 00:27:08,480
and that might seem like a really weird

906
00:27:08,480 --> 00:27:10,240
number i

907
00:27:10,240 --> 00:27:12,559
you know whatever um anything larger

908
00:27:12,559 --> 00:27:14,799
than that file size

909
00:27:14,799 --> 00:27:17,200
they encrypted completely differently

910
00:27:17,200 --> 00:27:18,960
so here's a sample file this is the

911
00:27:18,960 --> 00:27:20,960
beginning of it um you might notice it's

912
00:27:20,960 --> 00:27:22,080
all zeros

913
00:27:22,080 --> 00:27:23,600
that's not encryption

914
00:27:23,600 --> 00:27:26,000
uh it's zeros right that like how do you

915
00:27:26,000 --> 00:27:28,159
recover from data being deleted

916
00:27:28,159 --> 00:27:30,960
so your first thoughts are panic

917
00:27:30,960 --> 00:27:32,799
and besides that you think okay is this

918
00:27:32,799 --> 00:27:34,480
data corrupted because it's gone you

919
00:27:34,480 --> 00:27:36,880
can't like turn zeros into not zeros uh

920
00:27:36,880 --> 00:27:38,880
it's super low entropy obviously because

921
00:27:38,880 --> 00:27:40,320
there's nothing there

922
00:27:40,320 --> 00:27:42,399
so it's not aes encryption it's not

923
00:27:42,399 --> 00:27:44,000
compressed because compression wouldn't

924
00:27:44,000 --> 00:27:45,679
do this it wouldn't have this many zeros

925
00:27:45,679 --> 00:27:48,720
that's like the antithesis um what is it

926
00:27:48,720 --> 00:27:50,320
right

927
00:27:50,320 --> 00:27:52,480
well where you know the first question

928
00:27:52,480 --> 00:27:54,320
once you've calmed down because

929
00:27:54,320 --> 00:27:55,440
you're worried about your career being

930
00:27:55,440 --> 00:27:57,840
over uh when do the zeros end right how

931
00:27:57,840 --> 00:27:59,760
many zeros are there do we ever actually

932
00:27:59,760 --> 00:28:01,919
get real data and the answer is yes

933
00:28:01,919 --> 00:28:04,640
eventually at this like suspiciously

934
00:28:04,640 --> 00:28:07,520
round number of like hex four thousand

935
00:28:07,520 --> 00:28:10,000
uh or forty thousand we get

936
00:28:10,000 --> 00:28:12,240
you know data again which is great um

937
00:28:12,240 --> 00:28:13,840
the suspicious number is kind of weird

938
00:28:13,840 --> 00:28:14,960
because

939
00:28:14,960 --> 00:28:16,399
why would it just happen to be like a

940
00:28:16,399 --> 00:28:19,440
perfectly round number like that um

941
00:28:19,440 --> 00:28:21,360
and what's even weirder is you know this

942
00:28:21,360 --> 00:28:23,279
is still not encryption if we look at it

943
00:28:23,279 --> 00:28:24,640
it's a little bit hard to tell in this

944
00:28:24,640 --> 00:28:27,760
example because i think this is like

945
00:28:28,080 --> 00:28:30,159
some like microsoft office product that

946
00:28:30,159 --> 00:28:31,600
they do like compression inside of the

947
00:28:31,600 --> 00:28:35,120
file but it's it's low entropy

948
00:28:35,120 --> 00:28:36,640
and you're thinking okay was it plain

949
00:28:36,640 --> 00:28:38,559
text is it corrupt what's going on uh

950
00:28:38,559 --> 00:28:39,760
and the answer is that it's actually

951
00:28:39,760 --> 00:28:42,080
plain text uh i found this out just by

952
00:28:42,080 --> 00:28:43,360
scrolling through a bunch of files like

953
00:28:43,360 --> 00:28:44,720
this and eventually i found english

954
00:28:44,720 --> 00:28:46,399
words because it was like a word doc and

955
00:28:46,399 --> 00:28:47,440
you know you eventually get to the

956
00:28:47,440 --> 00:28:51,200
markup that's like the real part so

957
00:28:51,200 --> 00:28:52,880
if you keep scrolling through the file

958
00:28:52,880 --> 00:28:54,640
eventually the zeros come back and now

959
00:28:54,640 --> 00:28:55,840
you're back to panic because you're like

960
00:28:55,840 --> 00:28:57,679
oh god it's just corrupt the zero like

961
00:28:57,679 --> 00:28:58,960
for some reason the first part of it's

962
00:28:58,960 --> 00:29:00,799
gone then there's data and then there's

963
00:29:00,799 --> 00:29:04,640
not data you know um and then they stop

964
00:29:04,640 --> 00:29:06,159
and then they come back

965
00:29:06,159 --> 00:29:07,600
and you know there's just all these

966
00:29:07,600 --> 00:29:09,840
zeros so the question is

967
00:29:09,840 --> 00:29:10,960
what do we know about the zeros because

968
00:29:10,960 --> 00:29:12,559
we know they it they're everywhere

969
00:29:12,559 --> 00:29:14,159
there's like data in the file but it's

970
00:29:14,159 --> 00:29:16,480
also gone partially

971
00:29:16,480 --> 00:29:17,760
so the only things we know about them

972
00:29:17,760 --> 00:29:20,080
are their sizes uh they start at zero

973
00:29:20,080 --> 00:29:22,080
they go down to forty thousand then they

974
00:29:22,080 --> 00:29:24,559
start back up at you know eleven fb five

975
00:29:24,559 --> 00:29:26,399
five which i hope doesn't mean anything

976
00:29:26,399 --> 00:29:27,279
to anyone because it doesn't mean

977
00:29:27,279 --> 00:29:29,360
anything to me and it's a weird number

978
00:29:29,360 --> 00:29:30,960
uh and then the same thing three one f

979
00:29:30,960 --> 00:29:32,799
200 doesn't mean anything to anyone

980
00:29:32,799 --> 00:29:34,640
that's not like any range of numbers

981
00:29:34,640 --> 00:29:36,320
that anyone cares about

982
00:29:36,320 --> 00:29:37,520
um

983
00:29:37,520 --> 00:29:40,000
but if you you know do some subtraction

984
00:29:40,000 --> 00:29:41,279
and you realize that each range of

985
00:29:41,279 --> 00:29:43,919
number is actually hex 40 000

986
00:29:43,919 --> 00:29:45,279
size each

987
00:29:45,279 --> 00:29:46,320
that gives you a little bit of hope

988
00:29:46,320 --> 00:29:47,440
because that tells you that it's

989
00:29:47,440 --> 00:29:50,000
specifically made this way

990
00:29:50,000 --> 00:29:52,000
and you know there's just always the

991
00:29:52,000 --> 00:29:53,360
same number of them

992
00:29:53,360 --> 00:29:54,640
if you look at the very end of the file

993
00:29:54,640 --> 00:29:55,919
it's the same thing it's a ton of

994
00:29:55,919 --> 00:29:58,880
ciphertext once the zeros end

995
00:29:58,880 --> 00:30:00,559
there's it's encrypted it's not plain

996
00:30:00,559 --> 00:30:02,480
text in this case it's you know back to

997
00:30:02,480 --> 00:30:03,679
encryption

998
00:30:03,679 --> 00:30:05,520
so we have this weird situation where

999
00:30:05,520 --> 00:30:07,120
we're dealing with

1000
00:30:07,120 --> 00:30:08,399
data being deleted

1001
00:30:08,399 --> 00:30:10,159
data being encrypted and data just being

1002
00:30:10,159 --> 00:30:13,360
left alone all in the same file um

1003
00:30:13,360 --> 00:30:15,120
this sets alarm bells off for me at

1004
00:30:15,120 --> 00:30:16,240
least and probably a lot of people

1005
00:30:16,240 --> 00:30:17,279
because you're like what do i do in this

1006
00:30:17,279 --> 00:30:19,039
situation it's not a decrypt it's not

1007
00:30:19,039 --> 00:30:20,640
decompressed it's not a

1008
00:30:20,640 --> 00:30:22,399
it's not anything you don't like know

1009
00:30:22,399 --> 00:30:24,880
how to handle it right

1010
00:30:24,880 --> 00:30:27,039
so what do we know again just reviewing

1011
00:30:27,039 --> 00:30:28,880
uh there's a ton of ciphertext this is

1012
00:30:28,880 --> 00:30:30,640
nothing like the other protocol

1013
00:30:30,640 --> 00:30:32,320
but let's look at the footer of the file

1014
00:30:32,320 --> 00:30:33,840
again right let's let's go back to what

1015
00:30:33,840 --> 00:30:35,840
we know uh we know where the file name

1016
00:30:35,840 --> 00:30:37,360
was we know all that kind of identifier

1017
00:30:37,360 --> 00:30:39,039
stuff and we can say that this part kind

1018
00:30:39,039 --> 00:30:41,120
of looks the same it's still the same

1019
00:30:41,120 --> 00:30:42,480
you know i'm calling it again the header

1020
00:30:42,480 --> 00:30:44,480
of the footer but that part's the same

1021
00:30:44,480 --> 00:30:46,399
there's still a file name you can see it

1022
00:30:46,399 --> 00:30:48,080
kind of starts with png that's the end

1023
00:30:48,080 --> 00:30:49,279
of the file name

1024
00:30:49,279 --> 00:30:50,640
there's still an iv there's still

1025
00:30:50,640 --> 00:30:52,000
padding there's all this stuff but the

1026
00:30:52,000 --> 00:30:53,919
padding is zero bytes

1027
00:30:53,919 --> 00:30:55,120
and that's possible in encryption

1028
00:30:55,120 --> 00:30:56,480
sometimes it just happens that way but

1029
00:30:56,480 --> 00:30:59,120
it's pretty unlikely uh every file that

1030
00:30:59,120 --> 00:31:00,799
has this protocol was always zero bytes

1031
00:31:00,799 --> 00:31:02,720
that's the unlikely part

1032
00:31:02,720 --> 00:31:04,080
so that means that every single time

1033
00:31:04,080 --> 00:31:06,000
this happened there was never any need

1034
00:31:06,000 --> 00:31:07,279
for padding

1035
00:31:07,279 --> 00:31:08,799
which kind of leads you if you know

1036
00:31:08,799 --> 00:31:10,480
about like encryption and why padding

1037
00:31:10,480 --> 00:31:11,840
happens you'd say okay is it block

1038
00:31:11,840 --> 00:31:13,600
aligned right

1039
00:31:13,600 --> 00:31:15,360
so the answer to is it block aligned is

1040
00:31:15,360 --> 00:31:17,039
yes because there's no padding that's by

1041
00:31:17,039 --> 00:31:19,039
default you know the answer to that

1042
00:31:19,039 --> 00:31:22,559
but it just so happens that

1043
00:31:22,559 --> 00:31:24,120
that you know there's

1044
00:31:24,120 --> 00:31:27,360
c000 bytes and that that 40 000 hex

1045
00:31:27,360 --> 00:31:28,559
which is the number of zeros if you

1046
00:31:28,559 --> 00:31:30,640
times that by three because it's there's

1047
00:31:30,640 --> 00:31:31,840
three of them then you get the same

1048
00:31:31,840 --> 00:31:33,360
number

1049
00:31:33,360 --> 00:31:34,480
so this is

1050
00:31:34,480 --> 00:31:37,279
a little bit weird

1051
00:31:37,360 --> 00:31:38,480
and then you kind of start to piece it

1052
00:31:38,480 --> 00:31:39,679
together as you stare at the wall for

1053
00:31:39,679 --> 00:31:40,960
like six hours straight trying to figure

1054
00:31:40,960 --> 00:31:42,480
out what's going on

1055
00:31:42,480 --> 00:31:44,039
you have

1056
00:31:44,039 --> 00:31:47,600
c0000 whatever total uh bytes of zeros

1057
00:31:47,600 --> 00:31:49,039
and you have the same number of bytes of

1058
00:31:49,039 --> 00:31:51,519
ciphertext and you could say okay

1059
00:31:51,519 --> 00:31:52,799
the zeros must line up with the

1060
00:31:52,799 --> 00:31:54,320
ciphertext obviously they've just like

1061
00:31:54,320 --> 00:31:56,880
relocated it somehow so

1062
00:31:56,880 --> 00:31:58,640
the way this works the way that it ended

1063
00:31:58,640 --> 00:32:00,880
up working once you figure it all out is

1064
00:32:00,880 --> 00:32:04,000
that that 24 bit shift 16 to the left

1065
00:32:04,000 --> 00:32:05,159
that's

1066
00:32:05,159 --> 00:32:08,240
c000 as well same thing so any file

1067
00:32:08,240 --> 00:32:10,480
that's larger than that

1068
00:32:10,480 --> 00:32:12,000
takes this protocol up and when they

1069
00:32:12,000 --> 00:32:13,679
take this protocol up what they do is

1070
00:32:13,679 --> 00:32:15,519
take that many bytes

1071
00:32:15,519 --> 00:32:16,720
and they

1072
00:32:16,720 --> 00:32:18,799
just encrypt that many bytes so rather

1073
00:32:18,799 --> 00:32:20,240
than encrypt the whole file they only

1074
00:32:20,240 --> 00:32:21,519
encrypt you know whatever it might be

1075
00:32:21,519 --> 00:32:25,200
three megs i think uh or 1.5 i have it

1076
00:32:25,200 --> 00:32:27,440
no three because it's 1.5 times two

1077
00:32:27,440 --> 00:32:28,880
so

1078
00:32:28,880 --> 00:32:30,480
what about the rest of the file you can

1079
00:32:30,480 --> 00:32:32,240
say that it's plain text great we saw

1080
00:32:32,240 --> 00:32:34,640
that earlier but it's corrupt

1081
00:32:34,640 --> 00:32:36,559
so you know you're kind of asking

1082
00:32:36,559 --> 00:32:37,760
questions now like why did they switch

1083
00:32:37,760 --> 00:32:39,679
their protocol up in the first place at

1084
00:32:39,679 --> 00:32:40,720
all

1085
00:32:40,720 --> 00:32:41,679
if they were worried about people

1086
00:32:41,679 --> 00:32:43,360
realizing how the first protocol worked

1087
00:32:43,360 --> 00:32:44,480
they wouldn't use it they would have

1088
00:32:44,480 --> 00:32:45,600
done something else and it was still

1089
00:32:45,600 --> 00:32:47,039
pretty weird so you know they're not

1090
00:32:47,039 --> 00:32:48,559
probably worried about that

1091
00:32:48,559 --> 00:32:50,000
um so what's the reason that they just

1092
00:32:50,000 --> 00:32:51,919
like change things up in this obscure

1093
00:32:51,919 --> 00:32:52,720
way

1094
00:32:52,720 --> 00:32:53,840
and the answer is a little bit of

1095
00:32:53,840 --> 00:32:55,120
obfuscation they're just trying to

1096
00:32:55,120 --> 00:32:56,399
change it up make their own protocols

1097
00:32:56,399 --> 00:32:57,919
and do cool things but really it's it's

1098
00:32:57,919 --> 00:32:59,760
speed um

1099
00:32:59,760 --> 00:33:01,120
this isn't any sort of amateur hour

1100
00:33:01,120 --> 00:33:02,559
buffer overflow which might be the first

1101
00:33:02,559 --> 00:33:04,399
thing that some people you know jump to

1102
00:33:04,399 --> 00:33:05,840
is like oh whoops they accidentally

1103
00:33:05,840 --> 00:33:07,279
zeroed all their data

1104
00:33:07,279 --> 00:33:09,519
it's actually just that they

1105
00:33:09,519 --> 00:33:11,200
you know they wanted to be quick so if

1106
00:33:11,200 --> 00:33:12,880
they're encrypting a one megabyte file

1107
00:33:12,880 --> 00:33:14,799
that's very fast obviously one megabyte

1108
00:33:14,799 --> 00:33:16,720
is not a lot of data these days uh if

1109
00:33:16,720 --> 00:33:18,640
they're encrypting a two terabyte file

1110
00:33:18,640 --> 00:33:20,320
or even smaller than that say like a 20

1111
00:33:20,320 --> 00:33:22,080
gigabyte file five gigabyte file that

1112
00:33:22,080 --> 00:33:24,559
takes time and the more time they take

1113
00:33:24,559 --> 00:33:25,919
the less files they get to before you

1114
00:33:25,919 --> 00:33:27,200
notice

1115
00:33:27,200 --> 00:33:28,799
and you know your data center might go

1116
00:33:28,799 --> 00:33:30,240
down or something your sql server

1117
00:33:30,240 --> 00:33:32,000
because they're encrypting it you're

1118
00:33:32,000 --> 00:33:33,679
more liable to notice that you know and

1119
00:33:33,679 --> 00:33:34,720
you're immediately going to go check the

1120
00:33:34,720 --> 00:33:36,240
rest of everything out so really what

1121
00:33:36,240 --> 00:33:37,440
they're doing is speed they want to get

1122
00:33:37,440 --> 00:33:39,600
in and out encrypt everything on disk as

1123
00:33:39,600 --> 00:33:41,200
best as they can and what they're doing

1124
00:33:41,200 --> 00:33:43,519
is encrypting only part of the data

1125
00:33:43,519 --> 00:33:45,039
and then rearranging it so you'll never

1126
00:33:45,039 --> 00:33:46,640
notice it if you open this up in a hex

1127
00:33:46,640 --> 00:33:48,320
editor like i did you're going to notice

1128
00:33:48,320 --> 00:33:49,840
a bunch of zeros and you're going to say

1129
00:33:49,840 --> 00:33:52,559
oh the data's gone right the only reason

1130
00:33:52,559 --> 00:33:54,480
that we find this out is because first

1131
00:33:54,480 --> 00:33:56,240
we did the the easier protocol and the

1132
00:33:56,240 --> 00:33:58,559
smaller files and then you know we we

1133
00:33:58,559 --> 00:34:00,640
made it all the way here

1134
00:34:00,640 --> 00:34:02,880
so okay are we done

1135
00:34:02,880 --> 00:34:05,600
uh you know not quite still right

1136
00:34:05,600 --> 00:34:07,519
we kind of know

1137
00:34:07,519 --> 00:34:09,359
that the zeros represent encrypted data

1138
00:34:09,359 --> 00:34:11,280
and we know we have the encrypted data

1139
00:34:11,280 --> 00:34:13,359
and we know it uses aes but there's

1140
00:34:13,359 --> 00:34:15,520
still a lot of questions like

1141
00:34:15,520 --> 00:34:17,199
we don't know where the plain text

1142
00:34:17,199 --> 00:34:18,639
starts and stops

1143
00:34:18,639 --> 00:34:20,239
in this file we could say okay we found

1144
00:34:20,239 --> 00:34:21,599
the bytes that it starts and stops at

1145
00:34:21,599 --> 00:34:23,280
but it's not the same for every file

1146
00:34:23,280 --> 00:34:25,918
it's like almost randomized

1147
00:34:25,918 --> 00:34:28,000
um it seems to depend on the file size

1148
00:34:28,000 --> 00:34:29,440
like maybe

1149
00:34:29,440 --> 00:34:31,119
but they're not evenly spaced there's no

1150
00:34:31,119 --> 00:34:32,159
sort of

1151
00:34:32,159 --> 00:34:34,960
you know it's always 5000 bytes in or

1152
00:34:34,960 --> 00:34:36,239
anything like that it changes based on

1153
00:34:36,239 --> 00:34:37,918
the file size

1154
00:34:37,918 --> 00:34:39,599
and obviously the attacker has to know i

1155
00:34:39,599 --> 00:34:41,119
mean they're not just pulling data out

1156
00:34:41,119 --> 00:34:42,879
of thin air so there's an algorithm

1157
00:34:42,879 --> 00:34:44,800
involved and just saying there's an

1158
00:34:44,800 --> 00:34:46,159
algorithm doesn't tell you anything

1159
00:34:46,159 --> 00:34:48,719
because everything's an algorithm right

1160
00:34:48,719 --> 00:34:50,320
but there's obviously something to

1161
00:34:50,320 --> 00:34:52,879
figure out here's something to re

1162
00:34:52,879 --> 00:34:54,800
so it's it's kind of right in front of

1163
00:34:54,800 --> 00:34:57,680
our faces um in again a super obscure

1164
00:34:57,680 --> 00:35:00,079
way so if we look back at the ranges of

1165
00:35:00,079 --> 00:35:02,160
where the zeros were what's going on

1166
00:35:02,160 --> 00:35:03,520
there

1167
00:35:03,520 --> 00:35:05,119
we can try to figure things out we've

1168
00:35:05,119 --> 00:35:07,119
got the ranges back up

1169
00:35:07,119 --> 00:35:08,160
so

1170
00:35:08,160 --> 00:35:09,599
my of course my red square is a little

1171
00:35:09,599 --> 00:35:10,880
bit messed up

1172
00:35:10,880 --> 00:35:12,960
but if you look at the first red square

1173
00:35:12,960 --> 00:35:16,560
c 0 0 f 2 3 1 0 0.

1174
00:35:16,560 --> 00:35:18,079
you can see it's

1175
00:35:18,079 --> 00:35:19,119
you know

1176
00:35:19,119 --> 00:35:20,880
i don't want to skip ahead again it's

1177
00:35:20,880 --> 00:35:22,960
it's the same numbers as uh in the

1178
00:35:22,960 --> 00:35:25,520
bottom left right the the red boxes

1179
00:35:25,520 --> 00:35:27,599
the the guy the attacker has put the

1180
00:35:27,599 --> 00:35:29,520
data in the file saying where the

1181
00:35:29,520 --> 00:35:31,359
offsets are so

1182
00:35:31,359 --> 00:35:33,200
you know this gives another problem of

1183
00:35:33,200 --> 00:35:34,400
we have to be able to find the offsets

1184
00:35:34,400 --> 00:35:35,520
in the file but it's at least a little

1185
00:35:35,520 --> 00:35:36,960
closer we don't need to recreate the

1186
00:35:36,960 --> 00:35:38,400
entire algorithm and figure out any

1187
00:35:38,400 --> 00:35:41,680
weird randomizations or shifts or seeds

1188
00:35:41,680 --> 00:35:42,960
or anything that they used all we need

1189
00:35:42,960 --> 00:35:44,720
to know is it's stored in the file right

1190
00:35:44,720 --> 00:35:46,160
and of course it's stored in the file

1191
00:35:46,160 --> 00:35:49,440
because the attacker needs it as well

1192
00:35:49,440 --> 00:35:52,800
so again are we now are we done yes but

1193
00:35:52,800 --> 00:35:55,440
no right um and i kind of talked about

1194
00:35:55,440 --> 00:35:57,119
this stuff before the decryption has to

1195
00:35:57,119 --> 00:35:58,960
be written it's really hard this one is

1196
00:35:58,960 --> 00:36:01,520
even crazier because

1197
00:36:01,520 --> 00:36:05,520
uh you know there's all kinds of

1198
00:36:05,520 --> 00:36:07,280
you know problems like did i get the

1199
00:36:07,280 --> 00:36:09,520
index right um is my file size

1200
00:36:09,520 --> 00:36:11,200
calculation wrong is there another

1201
00:36:11,200 --> 00:36:13,280
protocol there's not thank god but like

1202
00:36:13,280 --> 00:36:15,200
you know there could have been so

1203
00:36:15,200 --> 00:36:16,560
there's all sorts of things you need to

1204
00:36:16,560 --> 00:36:17,440
worry about because you're going to

1205
00:36:17,440 --> 00:36:18,640
corrupt data

1206
00:36:18,640 --> 00:36:20,240
did the attacker corrupt data was the

1207
00:36:20,240 --> 00:36:22,160
file being written to while it was being

1208
00:36:22,160 --> 00:36:24,880
encrypted all this sorts of stuff right

1209
00:36:24,880 --> 00:36:27,760
so you know

1210
00:36:27,760 --> 00:36:29,200
there's all kinds of problems so the

1211
00:36:29,200 --> 00:36:30,640
last like

1212
00:36:30,640 --> 00:36:32,320
i talked about network shares before but

1213
00:36:32,320 --> 00:36:33,920
just to reiterate

1214
00:36:33,920 --> 00:36:35,839
remember the missing files and that this

1215
00:36:35,839 --> 00:36:38,800
is because uh if we consider the fact

1216
00:36:38,800 --> 00:36:40,400
that like there's missing keys

1217
00:36:40,400 --> 00:36:42,560
something's gone uh the sizes don't line

1218
00:36:42,560 --> 00:36:43,440
up

1219
00:36:43,440 --> 00:36:45,440
if you consider like your network you

1220
00:36:45,440 --> 00:36:46,800
probably have if you're a corporate

1221
00:36:46,800 --> 00:36:48,160
network tons of shares tons of mounts

1222
00:36:48,160 --> 00:36:49,200
tons of

1223
00:36:49,200 --> 00:36:51,760
i don't know you have azure cloud aws

1224
00:36:51,760 --> 00:36:53,119
local nas whatever you've got you've got

1225
00:36:53,119 --> 00:36:54,160
tons of stuff it's mounted in different

1226
00:36:54,160 --> 00:36:55,920
ways you might not even know

1227
00:36:55,920 --> 00:36:57,920
the hacker doesn't know or care either

1228
00:36:57,920 --> 00:36:59,440
and they might in fact servers one

1229
00:36:59,440 --> 00:37:00,640
through three they might affect just

1230
00:37:00,640 --> 00:37:02,240
server two they could do whatever and

1231
00:37:02,240 --> 00:37:03,599
that's gonna blast out encryption

1232
00:37:03,599 --> 00:37:05,280
everywhere how many workstations have

1233
00:37:05,280 --> 00:37:06,960
access all this kind of stuff so these

1234
00:37:06,960 --> 00:37:09,680
are really i mean less of the the

1235
00:37:09,680 --> 00:37:11,359
encryption kind of

1236
00:37:11,359 --> 00:37:12,720
questions you have to ask but more of

1237
00:37:12,720 --> 00:37:14,000
the just

1238
00:37:14,000 --> 00:37:15,680
normal use case questions like how much

1239
00:37:15,680 --> 00:37:18,400
of my data is encrypted so i've had

1240
00:37:18,400 --> 00:37:19,920
people

1241
00:37:19,920 --> 00:37:21,680
that i know i don't want to say clients

1242
00:37:21,680 --> 00:37:22,800
because they weren't but i've had people

1243
00:37:22,800 --> 00:37:24,000
that i know that have done this sort of

1244
00:37:24,000 --> 00:37:25,520
thing and said okay i found a decrypter

1245
00:37:25,520 --> 00:37:27,040
i want to run it but they don't back up

1246
00:37:27,040 --> 00:37:29,200
all the data first because it's like

1247
00:37:29,200 --> 00:37:31,280
20 terabytes or something more than that

1248
00:37:31,280 --> 00:37:32,720
and they run their decrypter that they

1249
00:37:32,720 --> 00:37:34,160
found or wrote or whatever and now their

1250
00:37:34,160 --> 00:37:35,599
servers are hosed they're completely

1251
00:37:35,599 --> 00:37:37,599
gone um

1252
00:37:37,599 --> 00:37:38,960
what are they gonna do right it's the

1253
00:37:38,960 --> 00:37:41,200
data's gone you can try to decrypt it

1254
00:37:41,200 --> 00:37:43,440
but it was corrupt so good luck

1255
00:37:43,440 --> 00:37:45,200
and it's it's just those kinds of

1256
00:37:45,200 --> 00:37:47,520
considerations that you have to

1257
00:37:47,520 --> 00:37:49,359
you know think about because what you

1258
00:37:49,359 --> 00:37:51,119
know what happens you go from a

1259
00:37:51,119 --> 00:37:53,359
ransomware attack that potentially

1260
00:37:53,359 --> 00:37:54,560
you could get double extorted you could

1261
00:37:54,560 --> 00:37:56,560
have tons of problems with but you could

1262
00:37:56,560 --> 00:37:58,560
pay money probably a large large sum of

1263
00:37:58,560 --> 00:38:00,720
money you could pay money and fix it or

1264
00:38:00,720 --> 00:38:02,079
you come in here with your hammer and

1265
00:38:02,079 --> 00:38:03,520
start smashing stuff and try to fix it

1266
00:38:03,520 --> 00:38:04,800
yourself and now you're at a state where

1267
00:38:04,800 --> 00:38:06,160
you can't even pay the money and you're

1268
00:38:06,160 --> 00:38:07,040
just

1269
00:38:07,040 --> 00:38:09,920
gone right so

1270
00:38:09,920 --> 00:38:11,599
that's pretty much

1271
00:38:11,599 --> 00:38:14,079
uh what i've got so i know i

1272
00:38:14,079 --> 00:38:17,280
actually went way faster than i expected

1273
00:38:17,280 --> 00:38:18,960
i talked really fast and about some

1274
00:38:18,960 --> 00:38:20,640
really dry stuff so if anybody's got any

1275
00:38:20,640 --> 00:38:22,000
questions please

1276
00:38:22,000 --> 00:38:24,160
good timing and i'll throw my email back

1277
00:38:24,160 --> 00:38:26,079
up also because

1278
00:38:26,079 --> 00:38:27,680
people generally want to talk shop about

1279
00:38:27,680 --> 00:38:28,800
things so

1280
00:38:28,800 --> 00:38:30,640
shoot me questions

1281
00:38:30,640 --> 00:38:32,240
please don't ask me to come to crypto

1282
00:38:32,240 --> 00:38:34,560
ransomware for free i probably can't

1283
00:38:34,560 --> 00:38:35,599
uh

1284
00:38:35,599 --> 00:38:37,280
that's it um does anybody have any

1285
00:38:37,280 --> 00:38:42,680
questions before i kind of meander off

1286
00:38:56,880 --> 00:38:58,800
yeah so i threw my email up here also

1287
00:38:58,800 --> 00:39:00,880
just if anybody wants it so it's mostly

1288
00:39:00,880 --> 00:39:01,920
experience

1289
00:39:01,920 --> 00:39:04,960
i did a lot of malware protocol analysis

1290
00:39:04,960 --> 00:39:06,560
in the network side before i did any

1291
00:39:06,560 --> 00:39:08,320
ransomware related stuff so

1292
00:39:08,320 --> 00:39:09,839
there's a lot of correlation of like

1293
00:39:09,839 --> 00:39:11,200
storing things for network traffic and

1294
00:39:11,200 --> 00:39:12,960
storing things for files because it

1295
00:39:12,960 --> 00:39:15,280
actually usually wraps back to like

1296
00:39:15,280 --> 00:39:17,760
c structs and a struct nc just being

1297
00:39:17,760 --> 00:39:20,480
mapped directly to memory or to disk so

1298
00:39:20,480 --> 00:39:23,280
it's mostly um manual at this point just

1299
00:39:23,280 --> 00:39:24,560
with experience

1300
00:39:24,560 --> 00:39:26,480
you could you know write some algorithms

1301
00:39:26,480 --> 00:39:28,000
and there's tons of tools that do things

1302
00:39:28,000 --> 00:39:29,680
it's really similar to like if you've

1303
00:39:29,680 --> 00:39:31,520
ever run strings on something it pulls

1304
00:39:31,520 --> 00:39:33,520
out like encoded data to look for

1305
00:39:33,520 --> 00:39:35,920
certain patterns like finding integers

1306
00:39:35,920 --> 00:39:39,200
for example if i can just

1307
00:39:39,200 --> 00:39:43,359
skip through a million slides now um

1308
00:39:43,359 --> 00:39:45,040
finding the integers like the two is

1309
00:39:45,040 --> 00:39:46,880
really obvious because it's for one it's

1310
00:39:46,880 --> 00:39:48,720
at the beginning uh but it also has

1311
00:39:48,720 --> 00:39:50,079
three zeros after it and if you know

1312
00:39:50,079 --> 00:39:51,280
you're dealing with little endian then

1313
00:39:51,280 --> 00:39:52,320
you know those are actually like the

1314
00:39:52,320 --> 00:39:55,119
upper bits of the integer bytes whatever

1315
00:39:55,119 --> 00:39:56,480
so you could write something like that

1316
00:39:56,480 --> 00:39:57,599
that's going to search for certain

1317
00:39:57,599 --> 00:39:59,920
padded data that pulls out integers and

1318
00:39:59,920 --> 00:40:02,160
then maybe says like okay this is

1319
00:40:02,160 --> 00:40:04,079
probably an int and this is the blob

1320
00:40:04,079 --> 00:40:05,520
that happened after it up until the next

1321
00:40:05,520 --> 00:40:06,720
in that kind of thing and that could

1322
00:40:06,720 --> 00:40:09,040
help expedite the process the problem is

1323
00:40:09,040 --> 00:40:10,560
that when you're dealing with ransomware

1324
00:40:10,560 --> 00:40:13,200
or malware executables um just because

1325
00:40:13,200 --> 00:40:15,359
they're the same type like these are two

1326
00:40:15,359 --> 00:40:17,200
windows ransomware executables they're

1327
00:40:17,200 --> 00:40:18,960
not necessarily going to do anything

1328
00:40:18,960 --> 00:40:20,240
related to each other except the

1329
00:40:20,240 --> 00:40:22,160
encryption so you can try to build tools

1330
00:40:22,160 --> 00:40:24,960
that do things automatically

1331
00:40:24,960 --> 00:40:26,319
in my experience with reverse

1332
00:40:26,319 --> 00:40:28,400
engineering specifically it's really

1333
00:40:28,400 --> 00:40:30,000
manual because it's hard to get a

1334
00:40:30,000 --> 00:40:32,480
perfect generalization just based on how

1335
00:40:32,480 --> 00:40:33,680
different

1336
00:40:33,680 --> 00:40:36,560
you know different binaries act

1337
00:40:36,560 --> 00:40:37,280
cool

1338
00:40:37,280 --> 00:40:38,640
um does that

1339
00:40:38,640 --> 00:40:40,160
answer i hope

1340
00:40:40,160 --> 00:40:42,880
great uh anybody else

1341
00:40:42,880 --> 00:40:44,960
see i can cheat i have the mic

1342
00:40:44,960 --> 00:40:46,640
um

1343
00:40:46,640 --> 00:40:48,000
would you

1344
00:40:48,000 --> 00:40:50,000
would you say that the bad actors are

1345
00:40:50,000 --> 00:40:53,040
adapting to the fact that we're getting

1346
00:40:53,040 --> 00:40:54,560
better at this

1347
00:40:54,560 --> 00:40:56,640
and if so

1348
00:40:56,640 --> 00:41:00,319
how well are they adapting i mean yeah

1349
00:41:00,319 --> 00:41:01,760
absolutely so

1350
00:41:01,760 --> 00:41:04,160
ransomware i mean just like any malware

1351
00:41:04,160 --> 00:41:06,000
in my experience there there used to be

1352
00:41:06,000 --> 00:41:07,599
a lot of really bad ransomware badly

1353
00:41:07,599 --> 00:41:10,480
written bad tradecraft um and as that

1354
00:41:10,480 --> 00:41:12,079
kind of got handled because people would

1355
00:41:12,079 --> 00:41:14,400
come up with you know uh one decrypter

1356
00:41:14,400 --> 00:41:16,160
one size fits all it decrypts everything

1357
00:41:16,160 --> 00:41:17,440
for everyone they would adapt to that by

1358
00:41:17,440 --> 00:41:19,520
saying okay now it's one key per file

1359
00:41:19,520 --> 00:41:21,440
and then they'd say okay well now

1360
00:41:21,440 --> 00:41:22,960
we're going to always scan your network

1361
00:41:22,960 --> 00:41:24,400
first before we launch our attack

1362
00:41:24,400 --> 00:41:25,839
because we want to get in there newer

1363
00:41:25,839 --> 00:41:27,359
ransomware is actually

1364
00:41:27,359 --> 00:41:30,400
newer ransomware families do things like

1365
00:41:30,400 --> 00:41:32,319
disable security products unload drivers

1366
00:41:32,319 --> 00:41:34,160
reboot your machine into safe mode i've

1367
00:41:34,160 --> 00:41:36,079
seen ones that

1368
00:41:36,079 --> 00:41:37,760
they actually bring their own virtual

1369
00:41:37,760 --> 00:41:39,520
machines and then they move your files

1370
00:41:39,520 --> 00:41:40,800
to the virtual machine and do the

1371
00:41:40,800 --> 00:41:42,880
encryption there and then move them back

1372
00:41:42,880 --> 00:41:44,560
so they're definitely adapting it's a

1373
00:41:44,560 --> 00:41:46,640
little bit of a cat mouse game

1374
00:41:46,640 --> 00:41:48,880
but um you know they're already using

1375
00:41:48,880 --> 00:41:49,920
like what's considered like

1376
00:41:49,920 --> 00:41:52,079
military-grade encryption which is just

1377
00:41:52,079 --> 00:41:54,319
using encryption properly and using like

1378
00:41:54,319 --> 00:41:56,400
open ssl for rsa or something instead of

1379
00:41:56,400 --> 00:41:57,680
doing it themselves so they're

1380
00:41:57,680 --> 00:41:59,440
definitely adapting uh it's kind of a

1381
00:41:59,440 --> 00:42:01,440
scary world out there but you know

1382
00:42:01,440 --> 00:42:02,400
people

1383
00:42:02,400 --> 00:42:03,920
the good side is adapting as well you

1384
00:42:03,920 --> 00:42:05,839
know antivirus and edr's and all sorts

1385
00:42:05,839 --> 00:42:07,119
of things are starting you're starting

1386
00:42:07,119 --> 00:42:09,520
to see a lot more ransomware um

1387
00:42:09,520 --> 00:42:11,680
protection specifically that's what i do

1388
00:42:11,680 --> 00:42:13,040
and i don't want it to turn into like a

1389
00:42:13,040 --> 00:42:15,040
sales pitch type of thing but uh i work

1390
00:42:15,040 --> 00:42:17,040
on a product that's like automatic

1391
00:42:17,040 --> 00:42:19,040
ransomware prevention um

1392
00:42:19,040 --> 00:42:20,800
you know detects the behavior stops it

1393
00:42:20,800 --> 00:42:22,400
that kind of that sort of thing so

1394
00:42:22,400 --> 00:42:23,599
definitely

1395
00:42:23,599 --> 00:42:25,520
definitely a lot of advancement on the

1396
00:42:25,520 --> 00:42:28,319
attacker's side though

1397
00:42:29,599 --> 00:42:32,000
anybody else i'm not seeing anything so

1398
00:42:32,000 --> 00:42:33,520
i'm just gonna

1399
00:42:33,520 --> 00:42:35,760
hop off the stage here but um thanks

1400
00:42:35,760 --> 00:42:37,440
everybody for listening and that's all i

1401
00:42:37,440 --> 00:42:40,440
got

1402
00:42:46,319 --> 00:42:48,400
you

