1
00:00:00,000 --> 00:00:01,839
hi everybody hi besides isn't it great

2
00:00:01,839 --> 00:00:04,160
to be back

3
00:00:04,160 --> 00:00:06,480
yeah awesome awesome thank you to

4
00:00:06,480 --> 00:00:08,800
everybody who puts on the besides talks

5
00:00:08,800 --> 00:00:10,559
i appreciate everybody who's involved in

6
00:00:10,559 --> 00:00:12,320
volunteers and sponsors like like andy

7
00:00:12,320 --> 00:00:15,599
said just everybody thank you um so

8
00:00:15,599 --> 00:00:17,039
uh you're here for malicious intent for

9
00:00:17,039 --> 00:00:19,760
the open source supply chain uh so thank

10
00:00:19,760 --> 00:00:21,840
you for joining me uh so a little bit

11
00:00:21,840 --> 00:00:24,160
about this presentation its goals are to

12
00:00:24,160 --> 00:00:26,240
help you uh understand the open source

13
00:00:26,240 --> 00:00:28,640
software supply chain threats uh and

14
00:00:28,640 --> 00:00:30,320
help your organization make it better

15
00:00:30,320 --> 00:00:32,479
risk-based decisions and recommendations

16
00:00:32,479 --> 00:00:34,239
for improving your support your supply

17
00:00:34,239 --> 00:00:36,800
chains and your devsecops processes uh

18
00:00:36,800 --> 00:00:38,480
so what we're going to do is go uh go

19
00:00:38,480 --> 00:00:39,920
through a little bit about me

20
00:00:39,920 --> 00:00:42,079
uh talk about why this presentation as

21
00:00:42,079 --> 00:00:44,559
this is a journey much like sid had a

22
00:00:44,559 --> 00:00:46,640
journey along with his presentation

23
00:00:46,640 --> 00:00:48,160
we'll go through some key concepts talk

24
00:00:48,160 --> 00:00:49,760
about open source

25
00:00:49,760 --> 00:00:51,760
uh we're going to talk through two

26
00:00:51,760 --> 00:00:53,840
primarily two different types of supply

27
00:00:53,840 --> 00:00:55,840
chain attacks third party and first

28
00:00:55,840 --> 00:00:57,840
party i'm going to talk through some

29
00:00:57,840 --> 00:01:00,800
some concepts some example attacks

30
00:01:00,800 --> 00:01:03,199
uh and some guidance and recommendations

31
00:01:03,199 --> 00:01:05,040
and some really cool tooling i found

32
00:01:05,040 --> 00:01:07,119
along the way uh through both of those

33
00:01:07,119 --> 00:01:09,520
and we'll wrap up with some conclusions

34
00:01:09,520 --> 00:01:11,680
so just a little bit about me

35
00:01:11,680 --> 00:01:13,520
you know i'm just a an excited cyber

36
00:01:13,520 --> 00:01:15,040
security professional trying to help the

37
00:01:15,040 --> 00:01:16,960
rest of the industry learn

38
00:01:16,960 --> 00:01:17,920
uh

39
00:01:17,920 --> 00:01:19,759
what learned what i learned

40
00:01:19,759 --> 00:01:21,360
so several years ago i discovered

41
00:01:21,360 --> 00:01:23,280
there's a whole new world of cyber

42
00:01:23,280 --> 00:01:27,119
security within the uh the challenges

43
00:01:27,119 --> 00:01:28,560
uh security challenges within the

44
00:01:28,560 --> 00:01:31,280
software development community um so i

45
00:01:31,280 --> 00:01:33,520
really wanted to learn more about this

46
00:01:33,520 --> 00:01:36,159
and so as i was preparing for this talk

47
00:01:36,159 --> 00:01:38,640
you know i i found several really

48
00:01:38,640 --> 00:01:40,320
interesting things that got me excited

49
00:01:40,320 --> 00:01:42,479
along the way

50
00:01:42,479 --> 00:01:44,399
like metric frameworks maturity

51
00:01:44,399 --> 00:01:46,479
frameworks compliance frameworks tooling

52
00:01:46,479 --> 00:01:48,159
and i do include that a lot of these

53
00:01:48,159 --> 00:01:50,399
things into my presentation

54
00:01:50,399 --> 00:01:52,880
so i tried to make this presentation as

55
00:01:52,880 --> 00:01:55,439
interesting as both technical and uh

56
00:01:55,439 --> 00:01:56,560
leadership

57
00:01:56,560 --> 00:01:57,840
um

58
00:01:57,840 --> 00:02:00,560
so i may and also i may go super fast

59
00:02:00,560 --> 00:02:01,920
through the material

60
00:02:01,920 --> 00:02:03,520
but just a reminder this will be posted

61
00:02:03,520 --> 00:02:06,320
on youtube and the slides will i'll give

62
00:02:06,320 --> 00:02:07,600
you a link to the slides at the end of

63
00:02:07,600 --> 00:02:09,840
the deck

64
00:02:10,239 --> 00:02:12,400
so very quickly about me i am these

65
00:02:12,400 --> 00:02:13,920
things in this order i'm a christian

66
00:02:13,920 --> 00:02:15,840
husband father and a manager of a cyber

67
00:02:15,840 --> 00:02:17,840
security team at the for the national

68
00:02:17,840 --> 00:02:19,840
technology energy lab our national

69
00:02:19,840 --> 00:02:21,360
energy technology lab is a support

70
00:02:21,360 --> 00:02:24,319
contractor under maximus detain i got

71
00:02:24,319 --> 00:02:27,360
lots of experience very much like sid

72
00:02:27,360 --> 00:02:29,120
you know just many different industries

73
00:02:29,120 --> 00:02:30,720
and cyber security

74
00:02:30,720 --> 00:02:33,360
i got a bunch of certifications as well

75
00:02:33,360 --> 00:02:35,440
but do note that i am not a programmer

76
00:02:35,440 --> 00:02:36,959
or developer

77
00:02:36,959 --> 00:02:39,360
i do know how to program i use open

78
00:02:39,360 --> 00:02:41,840
source software like much of you do

79
00:02:41,840 --> 00:02:43,519
but i i am not in software management

80
00:02:43,519 --> 00:02:45,760
for in development for a living

81
00:02:45,760 --> 00:02:47,920
but this presentation is my perspective

82
00:02:47,920 --> 00:02:49,840
as a cyber security professional to you

83
00:02:49,840 --> 00:02:51,040
who are cyber social security

84
00:02:51,040 --> 00:02:53,519
professionals

85
00:02:54,400 --> 00:02:57,120
all right why so

86
00:02:57,120 --> 00:02:59,280
so i help organizations to improve and

87
00:02:59,280 --> 00:03:01,599
mature cyber security it's my job so

88
00:03:01,599 --> 00:03:03,360
i've heard of many people having

89
00:03:03,360 --> 00:03:05,040
experience with the solarwinds

90
00:03:05,040 --> 00:03:07,040
investigations and incidents

91
00:03:07,040 --> 00:03:08,000
and

92
00:03:08,000 --> 00:03:09,840
it certainly was an eye-opener for a lot

93
00:03:09,840 --> 00:03:12,239
of many and many in the industry

94
00:03:12,239 --> 00:03:14,319
so i also work for an organization

95
00:03:14,319 --> 00:03:16,080
that's heavily relies heavily on open

96
00:03:16,080 --> 00:03:17,440
source software

97
00:03:17,440 --> 00:03:20,080
so and i expect every one of you in the

98
00:03:20,080 --> 00:03:21,120
room

99
00:03:21,120 --> 00:03:23,519
uh has has all downloaded and utilized

100
00:03:23,519 --> 00:03:26,239
open source software and binaries so i

101
00:03:26,239 --> 00:03:28,720
had a question i had i wanted answers to

102
00:03:28,720 --> 00:03:31,120
a lot of questions

103
00:03:31,120 --> 00:03:33,760
so what i did is i did a ton of research

104
00:03:33,760 --> 00:03:35,599
i read a lot of articles

105
00:03:35,599 --> 00:03:38,720
i read um i read blog posts i listened

106
00:03:38,720 --> 00:03:40,799
to podcasts and most recently i attended

107
00:03:40,799 --> 00:03:43,040
the 2021's north american supply chain

108
00:03:43,040 --> 00:03:44,319
security con

109
00:03:44,319 --> 00:03:46,480
just a few days ago

110
00:03:46,480 --> 00:03:47,440
um

111
00:03:47,440 --> 00:03:49,840
finally i want to be um i want to

112
00:03:49,840 --> 00:03:52,319
enlarge others to encourage you to speak

113
00:03:52,319 --> 00:03:54,640
publicly um so i want to be example to

114
00:03:54,640 --> 00:03:58,159
others that it's okay to to pick okay

115
00:03:58,159 --> 00:04:00,720
and very possible to pick a topic you're

116
00:04:00,720 --> 00:04:02,480
not familiar with learn in a short

117
00:04:02,480 --> 00:04:03,760
amount of time

118
00:04:03,760 --> 00:04:06,000
and present what you learned what better

119
00:04:06,000 --> 00:04:07,519
way is there to learn than to force

120
00:04:07,519 --> 00:04:11,040
yourself to to teach others

121
00:04:11,040 --> 00:04:13,680
so i didn't get uh i did not get the

122
00:04:13,680 --> 00:04:15,840
answers to all these questions but i got

123
00:04:15,840 --> 00:04:18,320
pretty close

124
00:04:18,320 --> 00:04:22,000
so let's go through some key concepts

125
00:04:22,479 --> 00:04:23,840
um

126
00:04:23,840 --> 00:04:25,440
you may have heard of linus's law it's

127
00:04:25,440 --> 00:04:26,880
the assertion that given all eyeballs

128
00:04:26,880 --> 00:04:28,720
all bugs are shallow

129
00:04:28,720 --> 00:04:30,880
and that's the the um

130
00:04:30,880 --> 00:04:33,199
you know a lot of eyes help make good

131
00:04:33,199 --> 00:04:35,919
code quality and good projects um it's

132
00:04:35,919 --> 00:04:37,680
also i'd also like to think in the cyber

133
00:04:37,680 --> 00:04:40,000
security world it's kind of a

134
00:04:40,000 --> 00:04:42,800
separation of duties control

135
00:04:42,800 --> 00:04:44,880
this uh um

136
00:04:44,880 --> 00:04:47,520
so and this also helps rely make our

137
00:04:47,520 --> 00:04:49,919
this all this concept also helps make

138
00:04:49,919 --> 00:04:52,000
secure code

139
00:04:52,000 --> 00:04:54,840
uh and and and and good quality code

140
00:04:54,840 --> 00:04:56,880
security um

141
00:04:56,880 --> 00:04:59,040
obviously code reuse and refund code

142
00:04:59,040 --> 00:05:00,400
functioning reuse is an obvious goal

143
00:05:00,400 --> 00:05:02,240
we'll talk you know that's just a key

144
00:05:02,240 --> 00:05:04,080
concept in open source and software

145
00:05:04,080 --> 00:05:05,520
develop in general

146
00:05:05,520 --> 00:05:07,039
and then there's an article

147
00:05:07,039 --> 00:05:09,840
uh about 35 years ago by ken thompson

148
00:05:09,840 --> 00:05:12,160
called reflections on trusting trust

149
00:05:12,160 --> 00:05:13,600
basically it was an article that

150
00:05:13,600 --> 00:05:14,720
referenced

151
00:05:14,720 --> 00:05:16,720
one of the first software supply chain

152
00:05:16,720 --> 00:05:19,120
proof of concepts where he wrote some c

153
00:05:19,120 --> 00:05:21,759
code to up to attack

154
00:05:21,759 --> 00:05:22,960
i guess

155
00:05:22,960 --> 00:05:26,240
the compiler of c to do malicious things

156
00:05:26,240 --> 00:05:27,600
we're going to get back to the the

157
00:05:27,600 --> 00:05:29,520
concept of

158
00:05:29,520 --> 00:05:33,520
having a build process being attacked

159
00:05:35,680 --> 00:05:39,199
so a single software supply chain

160
00:05:39,199 --> 00:05:41,840
this covers so what is a software supply

161
00:05:41,840 --> 00:05:43,360
chain it covers from the keystrokes of

162
00:05:43,360 --> 00:05:45,520
the developer developing the code

163
00:05:45,520 --> 00:05:47,759
to the source code management solution

164
00:05:47,759 --> 00:05:49,680
like github

165
00:05:49,680 --> 00:05:51,440
to the continuous integration continuous

166
00:05:51,440 --> 00:05:52,960
development uh

167
00:05:52,960 --> 00:05:54,320
processes

168
00:05:54,320 --> 00:05:57,280
um and uh importing the dependencies

169
00:05:57,280 --> 00:05:59,280
where where a piece of software would

170
00:05:59,280 --> 00:06:01,199
import dependencies uh like sid was

171
00:06:01,199 --> 00:06:03,120
mentioning with ubuntu

172
00:06:03,120 --> 00:06:04,639
and packaged just all the way to the

173
00:06:04,639 --> 00:06:07,600
distribution points of doubt having uh

174
00:06:07,600 --> 00:06:09,280
being provided to the end user

175
00:06:09,280 --> 00:06:11,759
distribution and open source uh

176
00:06:11,759 --> 00:06:14,560
as sid did mention apt yum uh in the

177
00:06:14,560 --> 00:06:17,680
open commercial world it is uh like the

178
00:06:17,680 --> 00:06:22,400
apple plays and google stores um so uh a

179
00:06:22,400 --> 00:06:24,240
attack against the supply chain is any

180
00:06:24,240 --> 00:06:25,919
unauthorized google defines it through

181
00:06:25,919 --> 00:06:27,280
pretty simple on any authorized

182
00:06:27,280 --> 00:06:30,000
modification to within that process and

183
00:06:30,000 --> 00:06:31,680
we're going to go through many different

184
00:06:31,680 --> 00:06:35,280
attacks through this process

185
00:06:35,280 --> 00:06:37,440
like i mentioned there's two general uh

186
00:06:37,440 --> 00:06:38,880
software

187
00:06:38,880 --> 00:06:41,199
supply chain attack types first party

188
00:06:41,199 --> 00:06:44,000
and third party

189
00:06:45,360 --> 00:06:47,199
but first let's you know talk about open

190
00:06:47,199 --> 00:06:49,599
source it is the scope of open source

191
00:06:49,599 --> 00:06:51,599
it's huge and just this isn't good just

192
00:06:51,599 --> 00:06:53,919
to review some of these statistics 98 of

193
00:06:53,919 --> 00:06:55,520
code bases contain open source

194
00:06:55,520 --> 00:06:59,120
components and roughly about of 90 of uh

195
00:06:59,120 --> 00:07:01,599
enterprise software is comprised of open

196
00:07:01,599 --> 00:07:04,560
source code so the the community is huge

197
00:07:04,560 --> 00:07:06,479
and it's growing it's almost growing

198
00:07:06,479 --> 00:07:08,160
exponentially

199
00:07:08,160 --> 00:07:09,599
so that was something that was like it

200
00:07:09,599 --> 00:07:10,720
was something that really kind of

201
00:07:10,720 --> 00:07:12,880
surprised me as i was doing some some of

202
00:07:12,880 --> 00:07:15,520
my research um interesting fact too that

203
00:07:15,520 --> 00:07:17,759
the windows operating system is built on

204
00:07:17,759 --> 00:07:20,240
a huge a large quantities of open source

205
00:07:20,240 --> 00:07:22,479
code

206
00:07:23,280 --> 00:07:25,599
so what i wanted to start the talk uh i

207
00:07:25,599 --> 00:07:27,280
want to talk about third party software

208
00:07:27,280 --> 00:07:28,960
supply chain attacks basically it's

209
00:07:28,960 --> 00:07:31,280
somebody else's software supply it is

210
00:07:31,280 --> 00:07:35,119
what sid was referring to as upstream

211
00:07:37,039 --> 00:07:39,199
um and we're going to talk so with when

212
00:07:39,199 --> 00:07:41,599
you talk about third party uh other

213
00:07:41,599 --> 00:07:43,199
people's code you're talking primarily

214
00:07:43,199 --> 00:07:45,280
about the dependencies a modern

215
00:07:45,280 --> 00:07:46,960
application

216
00:07:46,960 --> 00:07:49,840
contains roughly 128 open source

217
00:07:49,840 --> 00:07:51,759
dependencies so

218
00:07:51,759 --> 00:07:54,720
this this you can see how just

219
00:07:54,720 --> 00:07:56,879
a lot of different all the complexities

220
00:07:56,879 --> 00:07:58,240
within the supply chain specifically

221
00:07:58,240 --> 00:08:00,400
around uh dependencies there's lots of

222
00:08:00,400 --> 00:08:03,120
challenges there

223
00:08:03,280 --> 00:08:04,800
this is what's known as a dependency

224
00:08:04,800 --> 00:08:07,599
graph very very very simplified so you

225
00:08:07,599 --> 00:08:09,599
can help understand if you have a

226
00:08:09,599 --> 00:08:12,960
compromised open source project

227
00:08:12,960 --> 00:08:14,560
well downstream

228
00:08:14,560 --> 00:08:16,879
uh downstream projects or even your

229
00:08:16,879 --> 00:08:18,800
commercial soft commercial off the shelf

230
00:08:18,800 --> 00:08:21,759
project can be affected

231
00:08:21,759 --> 00:08:25,120
very similar to uh

232
00:08:25,120 --> 00:08:27,919
inclusions between other open source

233
00:08:27,919 --> 00:08:31,199
projects that make their way down into

234
00:08:31,199 --> 00:08:33,440
your final open source project this

235
00:08:33,440 --> 00:08:35,760
concept can be applied to both malicious

236
00:08:35,760 --> 00:08:38,880
code functionality and injection of

237
00:08:38,880 --> 00:08:40,399
injection of code and the

238
00:08:40,399 --> 00:08:44,880
vulnerabilities as as citizens mentioned

239
00:08:47,440 --> 00:08:50,160
i want to go through an example attack

240
00:08:50,160 --> 00:08:51,120
this is an

241
00:08:51,120 --> 00:08:53,600
attack that happened maybe two years ago

242
00:08:53,600 --> 00:08:55,600
with the event stream open source

243
00:08:55,600 --> 00:08:58,720
solution uh basically uh event stream

244
00:08:58,720 --> 00:09:00,080
was a

245
00:09:00,080 --> 00:09:03,680
dependency a bitcoin wallet called copay

246
00:09:03,680 --> 00:09:04,959
so

247
00:09:04,959 --> 00:09:06,959
what happened was the attacker

248
00:09:06,959 --> 00:09:08,080
made some really meaningful

249
00:09:08,080 --> 00:09:09,519
contributions to the event stream

250
00:09:09,519 --> 00:09:11,040
project

251
00:09:11,040 --> 00:09:12,320
was able to

252
00:09:12,320 --> 00:09:14,880
the owner of the project granted that

253
00:09:14,880 --> 00:09:16,080
attacker

254
00:09:16,080 --> 00:09:19,279
permissions to take over the the package

255
00:09:19,279 --> 00:09:22,000
and malicious code was injected by that

256
00:09:22,000 --> 00:09:24,640
attacker and

257
00:09:24,640 --> 00:09:26,480
so the real key point here is

258
00:09:26,480 --> 00:09:30,480
uh you know at the uh upstream uh

259
00:09:30,480 --> 00:09:32,880
open source project could affect many

260
00:09:32,880 --> 00:09:35,040
different downstream and target

261
00:09:35,040 --> 00:09:37,440
downstream uh

262
00:09:37,440 --> 00:09:40,399
applications and projects at the time

263
00:09:40,399 --> 00:09:42,959
event stream was used uh by roughly it

264
00:09:42,959 --> 00:09:46,720
was used by roughly about 1 600 packages

265
00:09:46,720 --> 00:09:48,720
this event stream

266
00:09:48,720 --> 00:09:51,440
project uh averaged roughly around 1.5

267
00:09:51,440 --> 00:09:54,320
million downloads a week at that time

268
00:09:54,320 --> 00:09:56,160
uh the good news with this attack uh

269
00:09:56,160 --> 00:09:59,519
that there was really no known um

270
00:09:59,519 --> 00:10:02,800
uh impact to uh the bitcoin users of the

271
00:10:02,800 --> 00:10:04,480
of the of the application

272
00:10:04,480 --> 00:10:06,160
uh so that's from bitcoin in their

273
00:10:06,160 --> 00:10:09,439
statement or bitpay in their statement

274
00:10:10,240 --> 00:10:11,839
so this graphic demonstrates a big

275
00:10:11,839 --> 00:10:13,680
problem for open source software you

276
00:10:13,680 --> 00:10:16,480
know developers work on popular cl pop

277
00:10:16,480 --> 00:10:18,399
what is popular and and people stop

278
00:10:18,399 --> 00:10:20,480
working on old code

279
00:10:20,480 --> 00:10:21,839
um

280
00:10:21,839 --> 00:10:23,440
you know what happens is it typically

281
00:10:23,440 --> 00:10:25,120
happens is developers typically starts

282
00:10:25,120 --> 00:10:27,920
with a personal account the project gets

283
00:10:27,920 --> 00:10:29,360
big

284
00:10:29,360 --> 00:10:31,360
and then it gets old and then the

285
00:10:31,360 --> 00:10:33,760
projects can can expire this is a big

286
00:10:33,760 --> 00:10:35,600
problem that one random person in

287
00:10:35,600 --> 00:10:38,320
nebraska can often get hit by a bus or

288
00:10:38,320 --> 00:10:40,079
is hired with an organization that pays

289
00:10:40,079 --> 00:10:41,839
huge amount of money and forces that

290
00:10:41,839 --> 00:10:43,440
developer to stop working on the open

291
00:10:43,440 --> 00:10:45,040
source project

292
00:10:45,040 --> 00:10:46,720
this problem may have contributed to why

293
00:10:46,720 --> 00:10:48,320
the event stream project owner may have

294
00:10:48,320 --> 00:10:50,880
granted permission to that

295
00:10:50,880 --> 00:10:52,720
that attacker would possibly seemingly

296
00:10:52,720 --> 00:10:56,560
see uh maybe little vetting

297
00:10:58,959 --> 00:11:01,120
so purposeful zero-day vulnerability

298
00:11:01,120 --> 00:11:03,839
injection so sid was talking about maybe

299
00:11:03,839 --> 00:11:05,839
in vulnerabilities that were not

300
00:11:05,839 --> 00:11:07,200
necessarily

301
00:11:07,200 --> 00:11:08,800
uh

302
00:11:08,800 --> 00:11:11,920
purposeful but attackers the 2021 state

303
00:11:11,920 --> 00:11:13,680
of the software supply chain report by

304
00:11:13,680 --> 00:11:15,279
sonotype

305
00:11:15,279 --> 00:11:17,360
states that the attackers are starting

306
00:11:17,360 --> 00:11:18,079
to

307
00:11:18,079 --> 00:11:19,760
more and more inject zero-day

308
00:11:19,760 --> 00:11:22,079
vulnerabilities into open source

309
00:11:22,079 --> 00:11:23,600
projects that feed the global supply

310
00:11:23,600 --> 00:11:24,480
chain

311
00:11:24,480 --> 00:11:26,839
so this is a very scary thing

312
00:11:26,839 --> 00:11:30,560
um you know you you you all remember

313
00:11:30,560 --> 00:11:32,480
heartbeating struts i mean that was a

314
00:11:32,480 --> 00:11:34,240
vulnerability that affected thousands

315
00:11:34,240 --> 00:11:35,760
and thousands of organizations and it

316
00:11:35,760 --> 00:11:37,200
was a big cleanup

317
00:11:37,200 --> 00:11:38,880
now i have no evidence that either of

318
00:11:38,880 --> 00:11:40,240
heartbleed or struts or vulnerabilities

319
00:11:40,240 --> 00:11:42,640
were maliciously injected i'm not saying

320
00:11:42,640 --> 00:11:43,440
that

321
00:11:43,440 --> 00:11:45,200
but they are great examples how a single

322
00:11:45,200 --> 00:11:46,959
vulnerability can affect

323
00:11:46,959 --> 00:11:48,880
thousands of downstream

324
00:11:48,880 --> 00:11:52,320
applications that depend on it

325
00:11:53,279 --> 00:11:55,760
however with the statement from the the

326
00:11:55,760 --> 00:11:58,800
report uh

327
00:11:58,800 --> 00:12:01,519
i've in my research i've really found no

328
00:12:01,519 --> 00:12:04,079
good examples of a purposeful zero-day

329
00:12:04,079 --> 00:12:06,240
vulnerability injection attack

330
00:12:06,240 --> 00:12:08,000
so if anybody knows of a good one please

331
00:12:08,000 --> 00:12:09,680
just see me afterwards i'd be interested

332
00:12:09,680 --> 00:12:10,639
to hear

333
00:12:10,639 --> 00:12:13,519
that example

334
00:12:16,480 --> 00:12:18,560
all right another attack within the

335
00:12:18,560 --> 00:12:20,720
dependencies is the dependency namespace

336
00:12:20,720 --> 00:12:22,639
confusion attack

337
00:12:22,639 --> 00:12:25,279
basically within uh this exploits devops

338
00:12:25,279 --> 00:12:26,160
tools

339
00:12:26,160 --> 00:12:27,519
um

340
00:12:27,519 --> 00:12:29,519
and their their default configuration

341
00:12:29,519 --> 00:12:30,800
and how they

342
00:12:30,800 --> 00:12:31,680
uh

343
00:12:31,680 --> 00:12:34,959
automatically update their dependencies

344
00:12:34,959 --> 00:12:36,800
um if a tool is configured to

345
00:12:36,800 --> 00:12:38,079
automatically update dependencies

346
00:12:38,079 --> 00:12:39,519
whether they're looking for the name

347
00:12:39,519 --> 00:12:41,519
typically the name of the of the

348
00:12:41,519 --> 00:12:43,920
dependency or the the package and a

349
00:12:43,920 --> 00:12:46,320
version number so if they see a dot

350
00:12:46,320 --> 00:12:49,040
z.1 update they're gonna go grab that

351
00:12:49,040 --> 00:12:51,360
from an internal repository what this

352
00:12:51,360 --> 00:12:54,079
attack is does is it takes

353
00:12:54,079 --> 00:12:55,440
um

354
00:12:55,440 --> 00:12:57,600
some some

355
00:12:57,600 --> 00:12:59,040
code tools are

356
00:12:59,040 --> 00:13:01,519
oh sorry the attacker

357
00:13:01,519 --> 00:13:03,680
posts a public version

358
00:13:03,680 --> 00:13:06,079
of this very similar named inversion or

359
00:13:06,079 --> 00:13:08,079
a dot one version of the repository that

360
00:13:08,079 --> 00:13:09,440
is malicious

361
00:13:09,440 --> 00:13:11,279
but the attacker needs to know some of

362
00:13:11,279 --> 00:13:14,480
that inside information to do that so

363
00:13:14,480 --> 00:13:15,760
um

364
00:13:15,760 --> 00:13:17,680
basically the one thing you need to do

365
00:13:17,680 --> 00:13:19,839
and look out for this type of attack is

366
00:13:19,839 --> 00:13:21,200
to configure your devops tools to

367
00:13:21,200 --> 00:13:23,440
appropriately prioritize where they get

368
00:13:23,440 --> 00:13:24,959
their packages from

369
00:13:24,959 --> 00:13:26,399
so make sure they're configured for your

370
00:13:26,399 --> 00:13:28,160
internal trusted repositories rather

371
00:13:28,160 --> 00:13:30,320
your your potentially public

372
00:13:30,320 --> 00:13:31,920
repositories

373
00:13:31,920 --> 00:13:33,760
or have some other controls to check

374
00:13:33,760 --> 00:13:36,560
prior to download

375
00:13:38,240 --> 00:13:39,920
all right so i talked about a lot of

376
00:13:39,920 --> 00:13:42,240
problems what do we do i want to go

377
00:13:42,240 --> 00:13:44,240
through uh

378
00:13:44,240 --> 00:13:45,760
something called what i call dependency

379
00:13:45,760 --> 00:13:47,199
management health with developers and

380
00:13:47,199 --> 00:13:49,600
warning for cyber security professionals

381
00:13:49,600 --> 00:13:51,199
go through some tooling and some really

382
00:13:51,199 --> 00:13:51,920
cool

383
00:13:51,920 --> 00:13:55,519
just really cool processes and tools

384
00:13:56,079 --> 00:13:57,199
the good news is a lot of these

385
00:13:57,199 --> 00:13:58,800
processes and

386
00:13:58,800 --> 00:14:00,320
and the things that i'm going to be

387
00:14:00,320 --> 00:14:01,839
going through are measurable and are

388
00:14:01,839 --> 00:14:03,600
helping development teams working toward

389
00:14:03,600 --> 00:14:06,240
automation

390
00:14:06,480 --> 00:14:08,399
so first a warning

391
00:14:08,399 --> 00:14:10,560
dependency management help

392
00:14:10,560 --> 00:14:12,880
so project developers as sid was

393
00:14:12,880 --> 00:14:15,600
mentioned they struggle with managing

394
00:14:15,600 --> 00:14:18,079
dependencies it's a royal pain

395
00:14:18,079 --> 00:14:19,680
it's a it's

396
00:14:19,680 --> 00:14:22,079
it's it's a balance between innovation

397
00:14:22,079 --> 00:14:24,320
and getting the the project done

398
00:14:24,320 --> 00:14:26,399
and maintenance of your code

399
00:14:26,399 --> 00:14:27,760
they struggle with this and i just want

400
00:14:27,760 --> 00:14:29,040
to make sure we're all aware of that

401
00:14:29,040 --> 00:14:30,720
struggle however risk-based

402
00:14:30,720 --> 00:14:32,720
quantification and decision automation

403
00:14:32,720 --> 00:14:34,560
capabilities are improving

404
00:14:34,560 --> 00:14:36,160
they're getting a lot lot better but

405
00:14:36,160 --> 00:14:38,399
they may not be there yet

406
00:14:38,399 --> 00:14:40,639
um just some pro tips for some rec uh

407
00:14:40,639 --> 00:14:43,920
some for working with developer tools or

408
00:14:43,920 --> 00:14:45,360
development teams

409
00:14:45,360 --> 00:14:46,720
just be patient

410
00:14:46,720 --> 00:14:49,199
don't force when don't force your tools

411
00:14:49,199 --> 00:14:51,680
or processes let them come up with their

412
00:14:51,680 --> 00:14:54,160
solutions and seek win-win solutions

413
00:14:54,160 --> 00:14:55,199
meaning

414
00:14:55,199 --> 00:14:56,880
when you're looking at solutions don't

415
00:14:56,880 --> 00:14:59,279
look at just security as the

416
00:14:59,279 --> 00:15:02,079
um as the primary goal help them mature

417
00:15:02,079 --> 00:15:03,839
their code mature their and make their

418
00:15:03,839 --> 00:15:05,600
processes more efficient at the same

419
00:15:05,600 --> 00:15:06,720
time

420
00:15:06,720 --> 00:15:08,880
that's a whole other talk we can go to

421
00:15:08,880 --> 00:15:13,079
uh but just quick tips

422
00:15:13,839 --> 00:15:15,839
the uh the sauna type report i mentioned

423
00:15:15,839 --> 00:15:18,079
earlier has some pretty good

424
00:15:18,079 --> 00:15:20,079
guidance for developers and there's some

425
00:15:20,079 --> 00:15:23,360
eight rules when when to update uh your

426
00:15:23,360 --> 00:15:25,760
dependencies we talked about sid talked

427
00:15:25,760 --> 00:15:27,120
about updating the most latest and

428
00:15:27,120 --> 00:15:29,279
greatest dependencies this report was

429
00:15:29,279 --> 00:15:32,240
suggesting that we do not or there's

430
00:15:32,240 --> 00:15:34,720
concerns with updating uh the latest and

431
00:15:34,720 --> 00:15:36,320
greatest you may not want to do that so

432
00:15:36,320 --> 00:15:38,480
there's some uh one of the the key

433
00:15:38,480 --> 00:15:41,279
takeaways of this report is to

434
00:15:41,279 --> 00:15:43,360
consider how you can make the best

435
00:15:43,360 --> 00:15:47,120
decisions for updating your dependencies

436
00:15:49,120 --> 00:15:51,360
so there's a lot of tooling out there

437
00:15:51,360 --> 00:15:52,959
github has a

438
00:15:52,959 --> 00:15:55,120
the github has dependencies and a

439
00:15:55,120 --> 00:15:57,440
dependency graph uh in your in the

440
00:15:57,440 --> 00:15:59,680
project you list all your your your

441
00:15:59,680 --> 00:16:01,360
dependencies

442
00:16:01,360 --> 00:16:03,120
uh there is some alerting functionality

443
00:16:03,120 --> 00:16:04,720
that's that's possible from like the

444
00:16:04,720 --> 00:16:05,839
beta bot

445
00:16:05,839 --> 00:16:07,920
and o wasp dependency track is also

446
00:16:07,920 --> 00:16:10,880
another tool to help be alerted of

447
00:16:10,880 --> 00:16:15,279
uh of of issues within your dependencies

448
00:16:17,519 --> 00:16:20,560
uh owasp dependency track that primarily

449
00:16:20,560 --> 00:16:22,320
uses s-bomb which i'll get into a little

450
00:16:22,320 --> 00:16:24,320
bit

451
00:16:24,320 --> 00:16:27,680
this is an example of a dependency graph

452
00:16:27,680 --> 00:16:29,519
just showing

453
00:16:29,519 --> 00:16:33,279
just very how complex it could be

454
00:16:34,959 --> 00:16:36,320
and this is a really interesting

455
00:16:36,320 --> 00:16:38,560
solution from the open source security

456
00:16:38,560 --> 00:16:41,519
foundation uh it's a that foundation has

457
00:16:41,519 --> 00:16:43,680
a lot of different really awesome

458
00:16:43,680 --> 00:16:45,600
interesting projects i reference a few

459
00:16:45,600 --> 00:16:48,560
of them in this slide deck

460
00:16:48,560 --> 00:16:50,320
but what this there's a project called

461
00:16:50,320 --> 00:16:51,920
scorecard

462
00:16:51,920 --> 00:16:54,160
that allows you to input your git

463
00:16:54,160 --> 00:16:57,040
repository and the output is a

464
00:16:57,040 --> 00:16:59,040
weight-based scoring metrics across 16

465
00:16:59,040 --> 00:17:00,320
different tests

466
00:17:00,320 --> 00:17:02,480
um it helps to identify whether your

467
00:17:02,480 --> 00:17:04,720
dependencies are safe or not

468
00:17:04,720 --> 00:17:06,400
why is this why is this really

469
00:17:06,400 --> 00:17:07,919
interesting well it could help you make

470
00:17:07,919 --> 00:17:10,240
automated risk-based decisions perhaps

471
00:17:10,240 --> 00:17:12,079
your organization or you can define a

472
00:17:12,079 --> 00:17:14,799
minimum open ssf scoring criteria for

473
00:17:14,799 --> 00:17:17,959
your dependencies

474
00:17:20,000 --> 00:17:23,439
here are the 16 checks

475
00:17:23,439 --> 00:17:27,039
it covers a lot of different uh areas of

476
00:17:27,039 --> 00:17:29,839
of the package

477
00:17:31,679 --> 00:17:32,400
so

478
00:17:32,400 --> 00:17:34,080
software build materials is very

479
00:17:34,080 --> 00:17:36,880
important with this with this problem

480
00:17:36,880 --> 00:17:37,679
um

481
00:17:37,679 --> 00:17:39,760
what is the soft build software build

482
00:17:39,760 --> 00:17:41,440
materials well i'm going to just call it

483
00:17:41,440 --> 00:17:42,720
s-bomb

484
00:17:42,720 --> 00:17:44,960
well it it it really helps with

485
00:17:44,960 --> 00:17:47,520
identifying with with automation and

486
00:17:47,520 --> 00:17:49,039
identifying the trust of a software

487
00:17:49,039 --> 00:17:50,160
package

488
00:17:50,160 --> 00:17:52,480
it increa it includes ingredients of

489
00:17:52,480 --> 00:17:54,240
your package such as source code

490
00:17:54,240 --> 00:17:56,080
summaries

491
00:17:56,080 --> 00:17:57,840
application builds container images

492
00:17:57,840 --> 00:18:00,400
running containers checksums hashes

493
00:18:00,400 --> 00:18:03,120
it's again it's the whole complete

494
00:18:03,120 --> 00:18:05,039
inventory it's very very very good

495
00:18:05,039 --> 00:18:06,720
metadata

496
00:18:06,720 --> 00:18:08,320
of a project

497
00:18:08,320 --> 00:18:11,440
a major project will have an s bomb

498
00:18:11,440 --> 00:18:12,960
the best product the s bombs are

499
00:18:12,960 --> 00:18:14,240
developed at build time because that's

500
00:18:14,240 --> 00:18:17,440
where a lot of information is gathered

501
00:18:17,440 --> 00:18:19,200
and it also includes the dependencies

502
00:18:19,200 --> 00:18:20,559
listed in the dependency graph i

503
00:18:20,559 --> 00:18:22,480
referenced earlier

504
00:18:22,480 --> 00:18:24,799
this data can be very useful for other

505
00:18:24,799 --> 00:18:26,400
for security functions

506
00:18:26,400 --> 00:18:29,039
uh in asset management functions uh

507
00:18:29,039 --> 00:18:31,120
along the lines for patch management

508
00:18:31,120 --> 00:18:32,559
having getting good threat intelligence

509
00:18:32,559 --> 00:18:34,960
of what's uh listed in the software

510
00:18:34,960 --> 00:18:36,240
uh vulnerability management

511
00:18:36,240 --> 00:18:38,320
understanding the dependencies and the

512
00:18:38,320 --> 00:18:39,919
the chains there

513
00:18:39,919 --> 00:18:41,280
and disclosure and it's also used for

514
00:18:41,280 --> 00:18:43,520
disclosure processes uh because there's

515
00:18:43,520 --> 00:18:44,880
information that lets you know okay well

516
00:18:44,880 --> 00:18:46,960
if a certain uh

517
00:18:46,960 --> 00:18:49,679
dependency you can you can let other

518
00:18:49,679 --> 00:18:52,400
downstream uh see repository instant

519
00:18:52,400 --> 00:18:54,840
response teams can let downstream

520
00:18:54,840 --> 00:18:56,559
um

521
00:18:56,559 --> 00:18:58,400
package owners to let them know

522
00:18:58,400 --> 00:18:59,360
what's

523
00:18:59,360 --> 00:19:01,280
some problems within their their

524
00:19:01,280 --> 00:19:03,280
downstream packages

525
00:19:03,280 --> 00:19:05,120
there's lots of great tools that make

526
00:19:05,120 --> 00:19:06,480
the out there that make this easy

527
00:19:06,480 --> 00:19:08,400
there's get bomb and sift

528
00:19:08,400 --> 00:19:11,200
and spdx is a standard um

529
00:19:11,200 --> 00:19:13,039
uh another standard that's out there is

530
00:19:13,039 --> 00:19:17,280
o wasp cyclone dx uh that's a that's a

531
00:19:17,280 --> 00:19:19,760
another tool it's been also popular as

532
00:19:19,760 --> 00:19:20,960
well

533
00:19:20,960 --> 00:19:23,600
um the you're you're to see you know

534
00:19:23,600 --> 00:19:26,480
recently the the u.s government has um

535
00:19:26,480 --> 00:19:28,400
increased the awareness of the software

536
00:19:28,400 --> 00:19:31,440
supply chain attacks um and s-bomb is a

537
00:19:31,440 --> 00:19:35,440
a very a frequently referenced um

538
00:19:35,440 --> 00:19:39,840
solution to a lot of these problems

539
00:19:40,480 --> 00:19:42,880
okay first party software supply chain

540
00:19:42,880 --> 00:19:46,400
attacks basically this is your projects

541
00:19:46,400 --> 00:19:48,480
your your organization

542
00:19:48,480 --> 00:19:51,600
in its software supply chain

543
00:19:51,600 --> 00:19:53,120
this relates to many

544
00:19:53,120 --> 00:19:55,760
attacks that the devsec ops controls and

545
00:19:55,760 --> 00:19:57,440
tooling prevent

546
00:19:57,440 --> 00:19:59,600
solarwinds is a prime example of a first

547
00:19:59,600 --> 00:20:02,000
party supply chain attack the malicious

548
00:20:02,000 --> 00:20:04,159
code was injected

549
00:20:04,159 --> 00:20:07,679
into the orion software at solarwinds

550
00:20:07,679 --> 00:20:09,760
through a highly targeted part of the ci

551
00:20:09,760 --> 00:20:12,320
cd build process that's how originally

552
00:20:12,320 --> 00:20:14,000
the malicious code got into the

553
00:20:14,000 --> 00:20:16,559
solarwinds project

554
00:20:16,559 --> 00:20:18,880
that's an example of first-party

555
00:20:18,880 --> 00:20:20,880
supply chain attack

556
00:20:20,880 --> 00:20:23,280
so um here are some points i got these

557
00:20:23,280 --> 00:20:25,360
uh some great graphics off of the from

558
00:20:25,360 --> 00:20:28,559
the salsa team um and i i give credit to

559
00:20:28,559 --> 00:20:30,640
them for the for a lot of the the the

560
00:20:30,640 --> 00:20:32,480
graphics in here they explain it much

561
00:20:32,480 --> 00:20:34,559
better than i can explain it

562
00:20:34,559 --> 00:20:36,400
but all the way to the left we want

563
00:20:36,400 --> 00:20:37,760
running through the software supply

564
00:20:37,760 --> 00:20:40,080
chain submitting bad code yep you can

565
00:20:40,080 --> 00:20:42,000
have a bad actor like the event stream

566
00:20:42,000 --> 00:20:46,080
actor just writing bad code

567
00:20:46,320 --> 00:20:48,799
software uh you could compromise the the

568
00:20:48,799 --> 00:20:51,440
github page example or your github or

569
00:20:51,440 --> 00:20:53,280
your your software control management

570
00:20:53,280 --> 00:20:56,000
solution and as you can also attack

571
00:20:56,000 --> 00:20:58,720
between the software management solution

572
00:20:58,720 --> 00:21:00,240
to your continuous

573
00:21:00,240 --> 00:21:02,720
integration and continued development

574
00:21:02,720 --> 00:21:04,799
build processes

575
00:21:04,799 --> 00:21:06,559
you could also compromise that build

576
00:21:06,559 --> 00:21:08,559
platform

577
00:21:08,559 --> 00:21:10,799
and as i mentioned before you can

578
00:21:10,799 --> 00:21:15,280
inherit or include bad dependencies

579
00:21:15,280 --> 00:21:17,440
as the software is built it's it's

580
00:21:17,440 --> 00:21:18,880
typically handed off to a package

581
00:21:18,880 --> 00:21:20,640
distribution

582
00:21:20,640 --> 00:21:22,480
and you can also attack the package

583
00:21:22,480 --> 00:21:24,880
distribution point

584
00:21:24,880 --> 00:21:26,640
finally you could get the user to use a

585
00:21:26,640 --> 00:21:29,360
bad package

586
00:21:29,440 --> 00:21:32,880
and as i mentioned in the um the the

587
00:21:32,880 --> 00:21:34,960
article before with the uh reflections

588
00:21:34,960 --> 00:21:38,320
on trusting trust uh attacking

589
00:21:38,320 --> 00:21:41,120
the tooling of developers is becoming

590
00:21:41,120 --> 00:21:43,520
more and more frequent

591
00:21:43,520 --> 00:21:45,280
to inject malicious code or malicious

592
00:21:45,280 --> 00:21:47,440
functionality within the software supply

593
00:21:47,440 --> 00:21:49,679
chain

594
00:21:52,000 --> 00:21:54,960
here's an example attack from kovkov

595
00:21:54,960 --> 00:21:56,960
codecov was is within the software

596
00:21:56,960 --> 00:21:59,280
supply chain it's a developer tool

597
00:21:59,280 --> 00:22:01,200
and what it does is it tests your

598
00:22:01,200 --> 00:22:04,240
application and uh see it checks how

599
00:22:04,240 --> 00:22:05,840
much your applications tested as part of

600
00:22:05,840 --> 00:22:08,080
that ci pipeline

601
00:22:08,080 --> 00:22:09,679
uh what an attacker did using some

602
00:22:09,679 --> 00:22:12,080
stolen credentials from i think a

603
00:22:12,080 --> 00:22:13,200
mistake

604
00:22:13,200 --> 00:22:15,280
from the container

605
00:22:15,280 --> 00:22:17,440
the attacker was able to modify a bash

606
00:22:17,440 --> 00:22:19,200
uploader script within the codecov

607
00:22:19,200 --> 00:22:20,880
solution

608
00:22:20,880 --> 00:22:22,960
that then the solution was distributed

609
00:22:22,960 --> 00:22:25,919
to a lot of developers

610
00:22:25,919 --> 00:22:28,320
large organizations as this reference

611
00:22:28,320 --> 00:22:30,240
there earlier this year

612
00:22:30,240 --> 00:22:32,080
and so

613
00:22:32,080 --> 00:22:33,360
um

614
00:22:33,360 --> 00:22:35,280
there was roughly around you know kodkov

615
00:22:35,280 --> 00:22:38,080
had roughly around 23 000 customers and

616
00:22:38,080 --> 00:22:39,039
users

617
00:22:39,039 --> 00:22:40,880
and anybody using this compromise

618
00:22:40,880 --> 00:22:42,720
version of kodkov

619
00:22:42,720 --> 00:22:44,000
would have been com would have been

620
00:22:44,000 --> 00:22:46,640
compromised

621
00:22:46,640 --> 00:22:49,520
what happened was the attacker

622
00:22:49,520 --> 00:22:51,840
the the impact of the attack was

623
00:22:51,840 --> 00:22:53,520
secrets are uploaded to the attacker's

624
00:22:53,520 --> 00:22:55,919
remote server

625
00:22:55,919 --> 00:22:57,280
one of the things that was interesting

626
00:22:57,280 --> 00:22:58,640
with this attack and could have maybe

627
00:22:58,640 --> 00:22:59,919
could have helped

628
00:22:59,919 --> 00:23:02,720
uh was a concept here actually no a key

629
00:23:02,720 --> 00:23:04,480
concept here that that did help when

630
00:23:04,480 --> 00:23:05,840
this attack

631
00:23:05,840 --> 00:23:08,000
was a

632
00:23:08,000 --> 00:23:11,120
a code signature was identified

633
00:23:11,120 --> 00:23:13,600
to identify a hash mishmash

634
00:23:13,600 --> 00:23:16,480
a hash mismatch

635
00:23:16,480 --> 00:23:18,559
this is how the malicious code was

636
00:23:18,559 --> 00:23:20,960
identified so signing your your

637
00:23:20,960 --> 00:23:23,360
artifacts throughout the process is a

638
00:23:23,360 --> 00:23:26,320
very very good thing to do to help

639
00:23:26,320 --> 00:23:27,679
identify

640
00:23:27,679 --> 00:23:29,919
malicious intention within the supply

641
00:23:29,919 --> 00:23:32,159
chain

642
00:23:33,360 --> 00:23:34,880
okay more problems

643
00:23:34,880 --> 00:23:37,520
i want to talk about a tool called salsa

644
00:23:37,520 --> 00:23:40,159
talk about some repository controls and

645
00:23:40,159 --> 00:23:43,760
another tool called source rank

646
00:23:45,039 --> 00:23:47,600
so salsa supply chain levels for

647
00:23:47,600 --> 00:23:50,799
software artifacts

648
00:23:50,799 --> 00:23:52,000
what this is it's an end-to-end

649
00:23:52,000 --> 00:23:53,600
framework to ensure the integrity of the

650
00:23:53,600 --> 00:23:56,080
software you are using

651
00:23:56,080 --> 00:23:58,799
uh or or including

652
00:23:58,799 --> 00:24:00,320
is secure

653
00:24:00,320 --> 00:24:03,679
it primarily focuses on the attacks with

654
00:24:03,679 --> 00:24:05,600
between b through g

655
00:24:05,600 --> 00:24:07,360
and making sure that that process is

656
00:24:07,360 --> 00:24:09,679
very mature and solid

657
00:24:09,679 --> 00:24:11,840
it's got four assurance levels four

658
00:24:11,840 --> 00:24:14,559
being the most assured uh the most

659
00:24:14,559 --> 00:24:16,159
most controls

660
00:24:16,159 --> 00:24:18,000
it is a compliance framework and another

661
00:24:18,000 --> 00:24:19,120
another way to put it's a compliance

662
00:24:19,120 --> 00:24:20,159
framework and there's a bunch of

663
00:24:20,159 --> 00:24:21,679
controls there's roughly around 30

664
00:24:21,679 --> 00:24:22,799
controls

665
00:24:22,799 --> 00:24:23,840
um

666
00:24:23,840 --> 00:24:26,000
checks to make sure that that will get

667
00:24:26,000 --> 00:24:28,480
you these four different levels one i

668
00:24:28,480 --> 00:24:29,679
think is you just have a few different

669
00:24:29,679 --> 00:24:31,760
controls and four you have all like 30

670
00:24:31,760 --> 00:24:33,679
controls and there's there's levels in

671
00:24:33,679 --> 00:24:36,080
between

672
00:24:37,360 --> 00:24:39,120
this really helps

673
00:24:39,120 --> 00:24:40,320
empower

674
00:24:40,320 --> 00:24:42,080
our software development teams to

675
00:24:42,080 --> 00:24:43,600
automatically check the integrity of

676
00:24:43,600 --> 00:24:45,279
software artifacts

677
00:24:45,279 --> 00:24:47,279
when they choose to include into their

678
00:24:47,279 --> 00:24:49,039
projects this is

679
00:24:49,039 --> 00:24:50,320
developed in direct response to these

680
00:24:50,320 --> 00:24:52,880
known supply and chain attacks

681
00:24:52,880 --> 00:24:54,480
it also includes

682
00:24:54,480 --> 00:24:56,400
s-bomb validation

683
00:24:56,400 --> 00:24:58,840
code sign scoring

684
00:24:58,840 --> 00:25:01,520
controls uh another thing to note uh

685
00:25:01,520 --> 00:25:03,440
that use effective use of salsa could

686
00:25:03,440 --> 00:25:05,440
have prevented the kodkov and the

687
00:25:05,440 --> 00:25:06,799
solarwinds attacks or at least could

688
00:25:06,799 --> 00:25:09,440
have detected it

689
00:25:09,440 --> 00:25:11,039
another interesting fact is google has

690
00:25:11,039 --> 00:25:14,159
been using salsa since 2013 well their

691
00:25:14,159 --> 00:25:15,840
internal version of

692
00:25:15,840 --> 00:25:18,159
of salsa since 2013 and they require it

693
00:25:18,159 --> 00:25:20,640
for all their production workloads there

694
00:25:20,640 --> 00:25:23,360
are some alternatives some similar

695
00:25:23,360 --> 00:25:25,440
alternative models out there

696
00:25:25,440 --> 00:25:27,679
there's the oh wasp

697
00:25:27,679 --> 00:25:31,120
component verification standard scvs it

698
00:25:31,120 --> 00:25:33,360
also has very similar

699
00:25:33,360 --> 00:25:35,919
assurance levels one two and three

700
00:25:35,919 --> 00:25:37,840
there's a microsoft supply chain

701
00:25:37,840 --> 00:25:40,480
integrity model or scim for short and

702
00:25:40,480 --> 00:25:42,080
there's also cloud native computing

703
00:25:42,080 --> 00:25:44,880
foundation cncf's

704
00:25:44,880 --> 00:25:47,200
soft software supply chain best

705
00:25:47,200 --> 00:25:50,400
practices all very similar models

706
00:25:50,400 --> 00:25:52,000
so let's see how

707
00:25:52,000 --> 00:25:54,000
salsa can be applied or a solution like

708
00:25:54,000 --> 00:25:55,600
salsa can be applied

709
00:25:55,600 --> 00:25:57,360
if we have a compromise

710
00:25:57,360 --> 00:26:00,640
open source project that's salsa

711
00:26:00,640 --> 00:26:02,720
assured at salsa level one

712
00:26:02,720 --> 00:26:04,960
and by the way salsa each open source

713
00:26:04,960 --> 00:26:06,720
project will be scored

714
00:26:06,720 --> 00:26:10,000
provided an assurance level

715
00:26:10,000 --> 00:26:12,400
so individually

716
00:26:12,400 --> 00:26:14,320
so salsa level one if i don't if there's

717
00:26:14,320 --> 00:26:15,039
uh

718
00:26:15,039 --> 00:26:16,799
the the two middle

719
00:26:16,799 --> 00:26:19,200
the two middle uh open source software

720
00:26:19,200 --> 00:26:20,240
uh

721
00:26:20,240 --> 00:26:22,080
projects there their higher level

722
00:26:22,080 --> 00:26:24,000
software assurance levels they may not

723
00:26:24,000 --> 00:26:25,840
want to accept salsa level one

724
00:26:25,840 --> 00:26:27,600
inclusions into their projects so it's

725
00:26:27,600 --> 00:26:29,440
going to be stopped right there

726
00:26:29,440 --> 00:26:31,919
um so how so one of the the things that

727
00:26:31,919 --> 00:26:34,320
the the salsa team wants to see and help

728
00:26:34,320 --> 00:26:38,080
once wants to do is help other or other

729
00:26:38,080 --> 00:26:41,919
projects to all get salsa uh assured

730
00:26:41,919 --> 00:26:43,679
and uh so that's gonna be very difficult

731
00:26:43,679 --> 00:26:45,919
to to gain adoption um i don't know

732
00:26:45,919 --> 00:26:47,120
necessarily sure how they're gonna go

733
00:26:47,120 --> 00:26:48,640
about doing it but they do say that they

734
00:26:48,640 --> 00:26:50,799
might they are you know suggesting third

735
00:26:50,799 --> 00:26:53,440
party assessors to assess your project

736
00:26:53,440 --> 00:26:55,279
and then you know give you a give your

737
00:26:55,279 --> 00:26:58,000
assurance level

738
00:26:58,880 --> 00:27:02,559
okay i want to focus more on to the uh

739
00:27:02,559 --> 00:27:05,760
the developers and submitting bad code

740
00:27:05,760 --> 00:27:07,520
this is more along the lines of

741
00:27:07,520 --> 00:27:09,200
malicious develop a malicious code

742
00:27:09,200 --> 00:27:11,200
injection you know people actually

743
00:27:11,200 --> 00:27:14,640
inserting malicious code

744
00:27:16,080 --> 00:27:18,480
there are some tools like

745
00:27:18,480 --> 00:27:20,760
package analysis that help detect

746
00:27:20,760 --> 00:27:22,320
behavior-based

747
00:27:22,320 --> 00:27:25,200
uh maliciousness

748
00:27:25,200 --> 00:27:28,000
using your behaviors heuristics

749
00:27:28,000 --> 00:27:30,480
uh to help identify malicious soft

750
00:27:30,480 --> 00:27:32,480
malicious code in their software there

751
00:27:32,480 --> 00:27:34,720
are some tools for the software

752
00:27:34,720 --> 00:27:37,039
composition analysis tools which can

753
00:27:37,039 --> 00:27:39,520
help detect malicious code detection uh

754
00:27:39,520 --> 00:27:41,600
however in in my opinion you know with

755
00:27:41,600 --> 00:27:43,600
the the research that i did in the

756
00:27:43,600 --> 00:27:45,520
attacks that i've reviewed tooling

757
00:27:45,520 --> 00:27:47,840
cannot effectively detect malicious

758
00:27:47,840 --> 00:27:50,399
function injection um yes security

759
00:27:50,399 --> 00:27:53,039
industry is very good at detecting um

760
00:27:53,039 --> 00:27:55,120
things like remote access tools

761
00:27:55,120 --> 00:27:56,559
um

762
00:27:56,559 --> 00:27:58,799
viruses and and those types of things

763
00:27:58,799 --> 00:28:00,159
that are that are known but we're here

764
00:28:00,159 --> 00:28:03,440
we're talking about developing

765
00:28:03,440 --> 00:28:05,520
you know code uh so

766
00:28:05,520 --> 00:28:06,880
that

767
00:28:06,880 --> 00:28:10,480
is very very difficult to do

768
00:28:10,559 --> 00:28:12,799
so what do we what are what are some

769
00:28:12,799 --> 00:28:15,600
what are the code repositories doing to

770
00:28:15,600 --> 00:28:16,880
help

771
00:28:16,880 --> 00:28:19,200
with this problem

772
00:28:19,200 --> 00:28:21,039
uh well obviously there's linus law and

773
00:28:21,039 --> 00:28:22,960
code reviews have multiple eyes looking

774
00:28:22,960 --> 00:28:25,279
at code looking for malicious functions

775
00:28:25,279 --> 00:28:27,520
malicious testing that's that's kind of

776
00:28:27,520 --> 00:28:30,000
very obvious malware scanning yeah you

777
00:28:30,000 --> 00:28:32,240
know it's it's it works i mean it's it's

778
00:28:32,240 --> 00:28:35,360
it's got a purpose any it's not the best

779
00:28:35,360 --> 00:28:37,120
but what i was really

780
00:28:37,120 --> 00:28:39,600
in my research i was really proud to see

781
00:28:39,600 --> 00:28:40,640
and excited to see that most

782
00:28:40,640 --> 00:28:43,200
repositories have really good ir teams

783
00:28:43,200 --> 00:28:46,159
github's response team pipes python

784
00:28:46,159 --> 00:28:47,679
instant response team they all have

785
00:28:47,679 --> 00:28:50,080
processes to respond to quickly respond

786
00:28:50,080 --> 00:28:53,039
to once identified and notified

787
00:28:53,039 --> 00:28:54,399
to malicious

788
00:28:54,399 --> 00:28:56,480
malicious code

789
00:28:56,480 --> 00:28:58,559
so they have quick take down processes

790
00:28:58,559 --> 00:29:01,360
and quick uh advisory process and

791
00:29:01,360 --> 00:29:04,000
alerting processes to let downstream

792
00:29:04,000 --> 00:29:07,039
projects know of the malicious code

793
00:29:07,039 --> 00:29:08,960
github for example

794
00:29:08,960 --> 00:29:10,720
they list their malicious code

795
00:29:10,720 --> 00:29:12,880
notifications as vulnerabilities

796
00:29:12,880 --> 00:29:14,080
so you can actually search them as

797
00:29:14,080 --> 00:29:15,919
yourself by looking at the advisory

798
00:29:15,919 --> 00:29:17,679
database and searching for the terms

799
00:29:17,679 --> 00:29:19,200
malicious package

800
00:29:19,200 --> 00:29:21,200
and you'll see you know a lot of

801
00:29:21,200 --> 00:29:23,520
different interesting malicious code

802
00:29:23,520 --> 00:29:26,520
injections

803
00:29:29,919 --> 00:29:31,840
okay on the other scale

804
00:29:31,840 --> 00:29:34,399
other end of the software supply chain

805
00:29:34,399 --> 00:29:36,720
i want to talk about uh packages and

806
00:29:36,720 --> 00:29:38,720
repositories and attacks on them again

807
00:29:38,720 --> 00:29:42,080
these are the the the youngs the apts

808
00:29:42,080 --> 00:29:42,799
and

809
00:29:42,799 --> 00:29:45,520
the the solutions that distribute your

810
00:29:45,520 --> 00:29:48,000
software

811
00:29:49,760 --> 00:29:51,520
an attack that's becoming popular is

812
00:29:51,520 --> 00:29:53,200
called typo squatting

813
00:29:53,200 --> 00:29:55,919
you all have all meant gone to a website

814
00:29:55,919 --> 00:29:58,000
and typed the wrong website and saw a

815
00:29:58,000 --> 00:30:00,320
page you wish you never saw

816
00:30:00,320 --> 00:30:02,080
it's like that but with with with

817
00:30:02,080 --> 00:30:03,919
dependencies you you type the wrong

818
00:30:03,919 --> 00:30:07,440
dependency or profit package or project

819
00:30:07,440 --> 00:30:08,399
and you got

820
00:30:08,399 --> 00:30:11,279
maybe code it actually works

821
00:30:11,279 --> 00:30:12,480
um

822
00:30:12,480 --> 00:30:14,720
but it actually has laced with malicious

823
00:30:14,720 --> 00:30:16,880
code or malicious functionality

824
00:30:16,880 --> 00:30:19,360
it's a bigger bigger and problem that's

825
00:30:19,360 --> 00:30:22,240
that's happening lately a lot of uh code

826
00:30:22,240 --> 00:30:25,279
repository tools are are looking and

827
00:30:25,279 --> 00:30:27,360
watching for these types of things

828
00:30:27,360 --> 00:30:28,640
but it's still possible and very

829
00:30:28,640 --> 00:30:31,360
possible to happen

830
00:30:32,240 --> 00:30:35,120
so package scoring

831
00:30:35,120 --> 00:30:37,600
when you want to use a package there's a

832
00:30:37,600 --> 00:30:39,919
there's a solution called libraries.io

833
00:30:39,919 --> 00:30:41,200
source rank

834
00:30:41,200 --> 00:30:43,200
and what it does is it helps collect

835
00:30:43,200 --> 00:30:45,760
it's another uh scoring framework that

836
00:30:45,760 --> 00:30:48,480
looks at scoring metrics uh for for

837
00:30:48,480 --> 00:30:49,600
quality

838
00:30:49,600 --> 00:30:51,440
and the input for this tool is our

839
00:30:51,440 --> 00:30:53,039
package managers

840
00:30:53,039 --> 00:30:55,840
uh oh packages from package managers it

841
00:30:55,840 --> 00:30:57,279
looks at things like the project the

842
00:30:57,279 --> 00:30:59,679
version and its dependencies

843
00:30:59,679 --> 00:31:02,159
um your input there is your package and

844
00:31:02,159 --> 00:31:04,640
output is like i mentioned uh

845
00:31:04,640 --> 00:31:06,080
scoring metrics

846
00:31:06,080 --> 00:31:07,840
uh that that could be very useful for

847
00:31:07,840 --> 00:31:09,120
automation

848
00:31:09,120 --> 00:31:12,959
and and risk-based decision making

849
00:31:14,399 --> 00:31:16,159
so stepping back

850
00:31:16,159 --> 00:31:17,360
at a higher level this is for you

851
00:31:17,360 --> 00:31:20,000
managers and risk quantifiers out there

852
00:31:20,000 --> 00:31:22,640
to wrap up the presentation

853
00:31:22,640 --> 00:31:23,760
um

854
00:31:23,760 --> 00:31:25,360
quantifying

855
00:31:25,360 --> 00:31:26,960
probability is going to be different for

856
00:31:26,960 --> 00:31:30,000
each organization and project

857
00:31:30,000 --> 00:31:31,919
it really depends on what your

858
00:31:31,919 --> 00:31:33,600
organization does

859
00:31:33,600 --> 00:31:35,840
uh to really understand the the the

860
00:31:35,840 --> 00:31:37,679
potent the probability for this for

861
00:31:37,679 --> 00:31:39,519
attacks with the with to your

862
00:31:39,519 --> 00:31:41,760
application your project or your

863
00:31:41,760 --> 00:31:43,279
organization

864
00:31:43,279 --> 00:31:45,039
um if you're in government critical

865
00:31:45,039 --> 00:31:47,600
infrastructure financial crypto they

866
00:31:47,600 --> 00:31:51,039
seem to be very high targets

867
00:31:51,039 --> 00:31:53,440
if your organization or project serves

868
00:31:53,440 --> 00:31:55,760
code that that references a nation state

869
00:31:55,760 --> 00:31:57,440
critical infrastructure

870
00:31:57,440 --> 00:31:59,360
industrial control systems high value

871
00:31:59,360 --> 00:32:00,480
asset

872
00:32:00,480 --> 00:32:02,559
then your probability is is increased i

873
00:32:02,559 --> 00:32:05,039
would suggest um

874
00:32:05,039 --> 00:32:07,760
the good news is uh i i guess the good

875
00:32:07,760 --> 00:32:09,120
news is

876
00:32:09,120 --> 00:32:11,679
it does take a high amount of expertise

877
00:32:11,679 --> 00:32:15,600
and sophistication to pull off a really

878
00:32:15,600 --> 00:32:18,480
a good attack i think i feel like

879
00:32:18,480 --> 00:32:20,159
there's a lot of

880
00:32:20,159 --> 00:32:21,919
while there are a lot of publicly

881
00:32:21,919 --> 00:32:24,240
recorded software supply chains attacks

882
00:32:24,240 --> 00:32:25,919
out there there's probably

883
00:32:25,919 --> 00:32:29,360
a lot more that happen um that's not

884
00:32:29,360 --> 00:32:31,120
publicly posted

885
00:32:31,120 --> 00:32:32,720
and again it's just more of the

886
00:32:32,720 --> 00:32:34,240
nation-state

887
00:32:34,240 --> 00:32:35,279
uh

888
00:32:35,279 --> 00:32:39,039
you know actors doing their things

889
00:32:39,039 --> 00:32:40,960
so impact obviously could be very high

890
00:32:40,960 --> 00:32:42,880
uh cyber warfare especially espionage

891
00:32:42,880 --> 00:32:45,039
disruption distraction within is is also

892
00:32:45,039 --> 00:32:46,880
very possible so

893
00:32:46,880 --> 00:32:48,480
the the amount of tax you know there's

894
00:32:48,480 --> 00:32:51,360
there's about 900 a year roughly oh and

895
00:32:51,360 --> 00:32:53,679
it's it's still it's it is increasing

896
00:32:53,679 --> 00:32:55,600
uh as reference from the the sonotype

897
00:32:55,600 --> 00:32:57,840
report

898
00:33:00,559 --> 00:33:02,240
this is a a

899
00:33:02,240 --> 00:33:04,000
reference

900
00:33:04,000 --> 00:33:05,360
it's a good reference to look at it

901
00:33:05,360 --> 00:33:07,279
gives you some more numbers uh actually

902
00:33:07,279 --> 00:33:08,640
talks through this whole this whole

903
00:33:08,640 --> 00:33:11,120
project the whole problem of open source

904
00:33:11,120 --> 00:33:13,440
software supply chains uh and attacking

905
00:33:13,440 --> 00:33:15,120
them this is it's it's a year or two old

906
00:33:15,120 --> 00:33:16,799
but it's a very good report again has a

907
00:33:16,799 --> 00:33:18,799
lot of different statistics and numbers

908
00:33:18,799 --> 00:33:20,080
and presented in a really good way i

909
00:33:20,080 --> 00:33:21,200
just wanted a reference i thought was

910
00:33:21,200 --> 00:33:24,440
very helpful

911
00:33:24,880 --> 00:33:28,159
all right so what can we do well uh we

912
00:33:28,159 --> 00:33:30,320
continue to analyze our applications and

913
00:33:30,320 --> 00:33:32,159
our organizations for their risk and

914
00:33:32,159 --> 00:33:33,760
identifying controls where they might be

915
00:33:33,760 --> 00:33:36,399
most important

916
00:33:36,399 --> 00:33:38,399
i would also consider

917
00:33:38,399 --> 00:33:39,679
uh

918
00:33:39,679 --> 00:33:42,000
you know within your supply chains

919
00:33:42,000 --> 00:33:45,200
and your ci cds is to utilize s-bomb and

920
00:33:45,200 --> 00:33:47,360
sign everything those two things are

921
00:33:47,360 --> 00:33:50,640
just a very quick easy and quick wins

922
00:33:50,640 --> 00:33:52,960
for your supply chain

923
00:33:52,960 --> 00:33:55,200
uh csps have a lot of tooling and

924
00:33:55,200 --> 00:33:57,200
processes obviously to make devsecops

925
00:33:57,200 --> 00:33:58,960
easier

926
00:33:58,960 --> 00:34:00,799
continue maturing your software

927
00:34:00,799 --> 00:34:03,120
inventories cis

928
00:34:03,120 --> 00:34:04,080
top

929
00:34:04,080 --> 00:34:06,000
top 20 or number two is your software

930
00:34:06,000 --> 00:34:07,360
asset management

931
00:34:07,360 --> 00:34:10,000
top control number two so that

932
00:34:10,000 --> 00:34:13,280
uh is really a very important

933
00:34:13,280 --> 00:34:15,599
uh consider the dependency in package

934
00:34:15,599 --> 00:34:17,760
management scoring utilities and develop

935
00:34:17,760 --> 00:34:19,760
minimum acceptable scoring criteria

936
00:34:19,760 --> 00:34:23,679
based on organization risk tolerance

937
00:34:24,879 --> 00:34:26,399
okay so i mentioned that i went through

938
00:34:26,399 --> 00:34:28,719
a journey a learning journey

939
00:34:28,719 --> 00:34:30,960
and i learned a lot did i get the answer

940
00:34:30,960 --> 00:34:34,079
to my my initial question yeah kind of

941
00:34:34,079 --> 00:34:35,918
can we trust open source code and

942
00:34:35,918 --> 00:34:37,520
binaries not to include malicious

943
00:34:37,520 --> 00:34:38,480
functions

944
00:34:38,480 --> 00:34:40,639
my answer is well kinda it really

945
00:34:40,639 --> 00:34:42,879
depends on what you do

946
00:34:42,879 --> 00:34:44,000
you know as i mentioned the previous

947
00:34:44,000 --> 00:34:45,040
slide

948
00:34:45,040 --> 00:34:47,918
you can be an attack a target certainly

949
00:34:47,918 --> 00:34:50,480
financial is going to be a continued

950
00:34:50,480 --> 00:34:53,040
theme within the the motives of of cyber

951
00:34:53,040 --> 00:34:54,320
attackers

952
00:34:54,320 --> 00:34:55,520
um

953
00:34:55,520 --> 00:34:57,760
the i did learn also the open source

954
00:34:57,760 --> 00:34:59,599
it's it's just huge and it's getting

955
00:34:59,599 --> 00:35:00,880
older i learned that there's a lot of

956
00:35:00,880 --> 00:35:03,040
challenges with the open source

957
00:35:03,040 --> 00:35:04,560
community

958
00:35:04,560 --> 00:35:07,359
and and it's with getting older comes

959
00:35:07,359 --> 00:35:10,720
comes potential security issues

960
00:35:10,720 --> 00:35:12,640
the need for

961
00:35:12,640 --> 00:35:15,359
visibility scoring to support automated

962
00:35:15,359 --> 00:35:18,160
dependency management decisions is is is

963
00:35:18,160 --> 00:35:20,720
is getting better it's increasing

964
00:35:20,720 --> 00:35:22,800
but our tooling is getting better

965
00:35:22,800 --> 00:35:25,760
but i can i encourage you to um

966
00:35:25,760 --> 00:35:28,000
contribute to these tools uh because

967
00:35:28,000 --> 00:35:30,400
it's it's it's really going to help

968
00:35:30,400 --> 00:35:32,240
us to continue to as an industry can

969
00:35:32,240 --> 00:35:35,359
develop really good secure code

970
00:35:35,359 --> 00:35:37,599
i i've learned about sbom and how easy

971
00:35:37,599 --> 00:35:38,720
and important that is i mentioned

972
00:35:38,720 --> 00:35:40,880
earlier

973
00:35:40,880 --> 00:35:43,920
in projects that are uh included in many

974
00:35:43,920 --> 00:35:47,520
other downstream projects are very very

975
00:35:47,520 --> 00:35:50,079
important and the ones that aren't being

976
00:35:50,079 --> 00:35:52,320
maintained or ones that are expired are

977
00:35:52,320 --> 00:35:53,680
really really concerning and i know

978
00:35:53,680 --> 00:35:55,839
there's a lot of work

979
00:35:55,839 --> 00:35:56,880
happening

980
00:35:56,880 --> 00:35:58,480
with several different groups to help

981
00:35:58,480 --> 00:36:00,079
address that problem within the open

982
00:36:00,079 --> 00:36:02,240
source community including government

983
00:36:02,240 --> 00:36:04,720
assistance

984
00:36:06,079 --> 00:36:08,720
financial gain as i mentioned is a a

985
00:36:08,720 --> 00:36:10,480
primary motive

986
00:36:10,480 --> 00:36:12,240
and seem to be the top software supply

987
00:36:12,240 --> 00:36:14,720
chain attack motive um vulnerabilities

988
00:36:14,720 --> 00:36:16,720
as sid mentioned uh i didn't want to

989
00:36:16,720 --> 00:36:18,240
talk about vulnerabilities because

990
00:36:18,240 --> 00:36:19,760
there's a lot of different talks about

991
00:36:19,760 --> 00:36:21,119
vulnerabilities within the open source

992
00:36:21,119 --> 00:36:22,880
supply chain but they're still very

993
00:36:22,880 --> 00:36:24,000
important because they can be

994
00:36:24,000 --> 00:36:26,480
maliciously injected

995
00:36:26,480 --> 00:36:28,160
and but they're still also and it can be

996
00:36:28,160 --> 00:36:31,759
purposely not corrected as well

997
00:36:31,839 --> 00:36:33,680
the integrity of coding the development

998
00:36:33,680 --> 00:36:36,079
tooling itself is very very important

999
00:36:36,079 --> 00:36:36,960
those

1000
00:36:36,960 --> 00:36:38,800
supply chains those tools the developer

1001
00:36:38,800 --> 00:36:40,720
tools are being attacked

1002
00:36:40,720 --> 00:36:43,680
and then exploited within our software

1003
00:36:43,680 --> 00:36:45,200
processes

1004
00:36:45,200 --> 00:36:47,760
our development processes

1005
00:36:47,760 --> 00:36:49,440
i did i was very like i mentioned very

1006
00:36:49,440 --> 00:36:51,119
happy to see that open source code

1007
00:36:51,119 --> 00:36:52,640
repositories have really good controls

1008
00:36:52,640 --> 00:36:54,320
to identify malicious intent and respond

1009
00:36:54,320 --> 00:36:55,760
to malicious intent and malicious

1010
00:36:55,760 --> 00:36:57,760
injections

1011
00:36:57,760 --> 00:36:59,280
i also learned that developing a

1012
00:36:59,280 --> 00:37:01,440
presentation is a great way to learn and

1013
00:37:01,440 --> 00:37:05,280
help the community at the same time

1014
00:37:06,000 --> 00:37:08,880
all right so thank you i that is my talk

1015
00:37:08,880 --> 00:37:11,040
this is uh i have a lot of resources

1016
00:37:11,040 --> 00:37:12,400
here that you can you can download if

1017
00:37:12,400 --> 00:37:13,520
you want to take a picture go ahead take

1018
00:37:13,520 --> 00:37:16,320
a picture now uh of the url

1019
00:37:16,320 --> 00:37:17,839
and um

1020
00:37:17,839 --> 00:37:19,680
but i do have a special i do want to say

1021
00:37:19,680 --> 00:37:21,520
thank you to a few that listed at the

1022
00:37:21,520 --> 00:37:23,200
bottom there rick yoakum james stingler

1023
00:37:23,200 --> 00:37:24,960
mike frankie peter genesis and matt kerr

1024
00:37:24,960 --> 00:37:26,560
for helping with presentation thank you

1025
00:37:26,560 --> 00:37:30,640
guys much appreciate it guys are awesome

1026
00:37:30,640 --> 00:37:33,520
questions thank you thank you questions

1027
00:37:33,520 --> 00:37:36,160
comments thoughts

1028
00:37:36,160 --> 00:37:39,118
serum love you too

1029
00:37:45,119 --> 00:37:49,560
software control management solution

1030
00:38:02,839 --> 00:38:04,480
yeah

1031
00:38:04,480 --> 00:38:06,480
so so the question several to make sure

1032
00:38:06,480 --> 00:38:08,480
i get that right

1033
00:38:08,480 --> 00:38:10,079
where where is the challenge within the

1034
00:38:10,079 --> 00:38:12,160
software development life cycle is it is

1035
00:38:12,160 --> 00:38:13,680
it more on like the github in the

1036
00:38:13,680 --> 00:38:15,760
software control management solutions is

1037
00:38:15,760 --> 00:38:18,880
it in our ci cd um

1038
00:38:18,880 --> 00:38:20,560
or is it in the package

1039
00:38:20,560 --> 00:38:22,400
distributions well i can tell you that

1040
00:38:22,400 --> 00:38:24,400
the package distributions are you know

1041
00:38:24,400 --> 00:38:26,400
there's there's attacks that come and go

1042
00:38:26,400 --> 00:38:28,880
typo squatting namespace confusion those

1043
00:38:28,880 --> 00:38:30,960
are attacks that they're the rise and i

1044
00:38:30,960 --> 00:38:32,720
think us as an industry will correct

1045
00:38:32,720 --> 00:38:33,440
them

1046
00:38:33,440 --> 00:38:36,240
as long as with software with the the

1047
00:38:36,240 --> 00:38:38,560
software control management solutions

1048
00:38:38,560 --> 00:38:39,920
like github

1049
00:38:39,920 --> 00:38:40,880
um

1050
00:38:40,880 --> 00:38:42,560
the attacks that i've seen at least with

1051
00:38:42,560 --> 00:38:44,000
my research

1052
00:38:44,000 --> 00:38:46,960
fairly even throughout the attack cycle

1053
00:38:46,960 --> 00:38:48,480
they're attacking all different points

1054
00:38:48,480 --> 00:38:49,839
what i've provided is just more just

1055
00:38:49,839 --> 00:38:52,079
like a high level architecture view of

1056
00:38:52,079 --> 00:38:54,800
the attack threat the attack types but i

1057
00:38:54,800 --> 00:38:57,599
i can't say that you know one specific

1058
00:38:57,599 --> 00:38:58,640
part

1059
00:38:58,640 --> 00:39:00,720
of the of the cycles being attacked more

1060
00:39:00,720 --> 00:39:02,079
than the others because a lot of the

1061
00:39:02,079 --> 00:39:04,240
data and the research i found i read is

1062
00:39:04,240 --> 00:39:06,240
kind of across the board

1063
00:39:06,240 --> 00:39:07,920
good question does that answer your

1064
00:39:07,920 --> 00:39:10,880
question okay

1065
00:39:13,680 --> 00:39:16,720
all right everybody thank you very much

1066
00:39:16,720 --> 00:39:21,879
thank you again ryan great job

