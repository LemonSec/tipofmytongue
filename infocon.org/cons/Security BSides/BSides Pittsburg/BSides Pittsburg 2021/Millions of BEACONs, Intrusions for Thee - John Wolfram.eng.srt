1
00:00:00,320 --> 00:00:02,480
all right let's get started without

2
00:00:02,480 --> 00:00:04,080
further ado

3
00:00:04,080 --> 00:00:08,880
millions of beacons intrusions for thee

4
00:00:08,880 --> 00:00:10,719
awesome thank you everybody my name is

5
00:00:10,719 --> 00:00:12,559
john wolfram and today i'm going to be

6
00:00:12,559 --> 00:00:14,000
talking about millions of beacons

7
00:00:14,000 --> 00:00:17,600
intrusions for thee so a little who am i

8
00:00:17,600 --> 00:00:19,840
um so my name as i said was john is john

9
00:00:19,840 --> 00:00:22,000
wolfram i'm a senior threat analyst on

10
00:00:22,000 --> 00:00:24,800
advanced practices at mandiant so our

11
00:00:24,800 --> 00:00:26,960
mission statement is to norm know more

12
00:00:26,960 --> 00:00:28,960
about our adversaries than anyone and

13
00:00:28,960 --> 00:00:30,320
make this knowledge actionable for

14
00:00:30,320 --> 00:00:32,479
mandia so what that really comes down to

15
00:00:32,479 --> 00:00:34,160
is my team is situated a pretty

16
00:00:34,160 --> 00:00:36,800
interesting place where we're supporting

17
00:00:36,800 --> 00:00:39,520
our responders as they are

18
00:00:39,520 --> 00:00:40,960
looking and investigating some of the

19
00:00:40,960 --> 00:00:44,160
most impactful intrusions out there so

20
00:00:44,160 --> 00:00:45,920
our agenda for today we're going to be

21
00:00:45,920 --> 00:00:47,440
talking about beacon versus cobalt

22
00:00:47,440 --> 00:00:49,280
strike we're going to discuss the

23
00:00:49,280 --> 00:00:51,120
differences between the two are they the

24
00:00:51,120 --> 00:00:53,280
same how are they different and then

25
00:00:53,280 --> 00:00:54,399
we're going to go into the who and the

26
00:00:54,399 --> 00:00:57,280
why so what actors are using beacon and

27
00:00:57,280 --> 00:00:58,719
why would they do so why would they use

28
00:00:58,719 --> 00:01:01,440
this tool out of like the massive sea of

29
00:01:01,440 --> 00:01:03,199
them and then we're going to pivot from

30
00:01:03,199 --> 00:01:04,400
there and we're going to go into finding

31
00:01:04,400 --> 00:01:06,400
evil and we're going to look on

32
00:01:06,400 --> 00:01:08,159
and talk about a couple different ways

33
00:01:08,159 --> 00:01:09,760
you can look to identify beacon within

34
00:01:09,760 --> 00:01:11,439
your network and then potentially take

35
00:01:11,439 --> 00:01:14,880
that hunt and move to the wild

36
00:01:17,520 --> 00:01:19,360
so cobalt strike versus beacon what is

37
00:01:19,360 --> 00:01:20,960
the difference between the two well it

38
00:01:20,960 --> 00:01:22,720
kind of comes down to this cobalt strike

39
00:01:22,720 --> 00:01:24,560
is a commercially available adversary

40
00:01:24,560 --> 00:01:26,880
emulation framework

41
00:01:26,880 --> 00:01:27,840
it's

42
00:01:27,840 --> 00:01:30,079
it was developed by initially by raphael

43
00:01:30,079 --> 00:01:31,360
mudge it's currently owned by help

44
00:01:31,360 --> 00:01:33,200
systems and it's really composed of two

45
00:01:33,200 --> 00:01:35,040
different parts you have the team server

46
00:01:35,040 --> 00:01:36,880
which is like the brains for command and

47
00:01:36,880 --> 00:01:38,560
control and then you have the client and

48
00:01:38,560 --> 00:01:40,960
the client is what operators will use to

49
00:01:40,960 --> 00:01:42,560
control implants

50
00:01:42,560 --> 00:01:44,000
when they're going through engagements

51
00:01:44,000 --> 00:01:46,079
or if they're

52
00:01:46,079 --> 00:01:47,520
bad guys if they're operating within a

53
00:01:47,520 --> 00:01:49,680
network and then you have beacon and

54
00:01:49,680 --> 00:01:51,840
beacon is the default backdoor payload

55
00:01:51,840 --> 00:01:54,240
used by cobalt strike so while they're

56
00:01:54,240 --> 00:01:55,920
related they're not synonymous

57
00:01:55,920 --> 00:01:57,520
synonymous they're not the same thing

58
00:01:57,520 --> 00:01:59,759
they're different and a lot of this is

59
00:01:59,759 --> 00:02:01,840
going to be kind of talking through

60
00:02:01,840 --> 00:02:03,759
what makes this tool and this framework

61
00:02:03,759 --> 00:02:06,960
so attractive for adversaries

62
00:02:06,960 --> 00:02:08,399
so when we talk about the different

63
00:02:08,399 --> 00:02:10,318
stages of beacon we can look at it in

64
00:02:10,318 --> 00:02:11,920
two different ways we can talk about

65
00:02:11,920 --> 00:02:14,000
beacon as a stager and as a stable

66
00:02:14,000 --> 00:02:16,319
stageless payload so a stager is a small

67
00:02:16,319 --> 00:02:18,239
shell code payload that when it's

68
00:02:18,239 --> 00:02:20,000
executed on an endpoint it'll perform a

69
00:02:20,000 --> 00:02:22,160
few checks and then query out to a c2

70
00:02:22,160 --> 00:02:24,319
and pull down a full implant and when we

71
00:02:24,319 --> 00:02:26,080
have a stageless backdoor or a stageless

72
00:02:26,080 --> 00:02:27,840
beacon that is the fully featured

73
00:02:27,840 --> 00:02:29,599
backdoor that is everything that you

74
00:02:29,599 --> 00:02:32,080
need to use for cobalt strike in package

75
00:02:32,080 --> 00:02:34,400
in one it's typically loaded into memory

76
00:02:34,400 --> 00:02:36,480
through a couple different ways

77
00:02:36,480 --> 00:02:38,319
it can be loaded into memory through a

78
00:02:38,319 --> 00:02:39,599
staged beacon like we talked about

79
00:02:39,599 --> 00:02:40,480
before

80
00:02:40,480 --> 00:02:41,680
it can be

81
00:02:41,680 --> 00:02:43,120
loaded into memory through a default

82
00:02:43,120 --> 00:02:45,360
loader or you can use a separate loader

83
00:02:45,360 --> 00:02:47,120
malware family

84
00:02:47,120 --> 00:02:49,440
and one little note here loader families

85
00:02:49,440 --> 00:02:50,879
while they're super prevalent they're

86
00:02:50,879 --> 00:02:52,480
not vegan they're different and they're

87
00:02:52,480 --> 00:02:54,720
used by actors to get beacon into memory

88
00:02:54,720 --> 00:02:56,640
but you can use loaders to get almost

89
00:02:56,640 --> 00:02:58,720
anything in the memory and then loaders

90
00:02:58,720 --> 00:03:00,879
can load both staged and stageable

91
00:03:00,879 --> 00:03:02,879
speaking payloads so what does that mean

92
00:03:02,879 --> 00:03:04,800
well they're pretty agnostic and as far

93
00:03:04,800 --> 00:03:06,879
as shell code goes they can load either

94
00:03:06,879 --> 00:03:09,280
and then or different payloads and then

95
00:03:09,280 --> 00:03:11,519
once stageless payload payloads are

96
00:03:11,519 --> 00:03:13,280
loaded into memory what do they do they

97
00:03:13,280 --> 00:03:15,440
check back for c2 to kind of

98
00:03:15,440 --> 00:03:19,519
look for commands and start operating

99
00:03:19,519 --> 00:03:20,560
and then when we talk about the

100
00:03:20,560 --> 00:03:22,560
different listeners and this is

101
00:03:22,560 --> 00:03:24,239
important when we talk about how beacon

102
00:03:24,239 --> 00:03:26,720
communicates outbound so listeners are

103
00:03:26,720 --> 00:03:28,720
what the beacon payload uses to

104
00:03:28,720 --> 00:03:31,120
communicate to their c2 and when we look

105
00:03:31,120 --> 00:03:33,760
here we have a couple different types of

106
00:03:33,760 --> 00:03:36,159
listeners that are available so raw tcp

107
00:03:36,159 --> 00:03:38,560
and smb are what's called bind listeners

108
00:03:38,560 --> 00:03:39,840
and if you're familiar with reverse

109
00:03:39,840 --> 00:03:42,000
shells and bind shells that's what these

110
00:03:42,000 --> 00:03:43,840
are they wait for commands to be sent to

111
00:03:43,840 --> 00:03:45,840
them they're primarily used when you're

112
00:03:45,840 --> 00:03:47,920
chaining different implants together so

113
00:03:47,920 --> 00:03:49,920
if you're in an internal environment or

114
00:03:49,920 --> 00:03:51,120
an operator is in an internal

115
00:03:51,120 --> 00:03:52,799
environment when you want to talk to

116
00:03:52,799 --> 00:03:53,920
your different implants on different

117
00:03:53,920 --> 00:03:55,360
hosts you're probably not going to want

118
00:03:55,360 --> 00:03:58,000
to talk to on http between all of them

119
00:03:58,000 --> 00:03:59,040
so you're going to use something like

120
00:03:59,040 --> 00:04:01,680
smb or raw tcp to communicate between

121
00:04:01,680 --> 00:04:02,480
them

122
00:04:02,480 --> 00:04:05,040
so then moving on to different types of

123
00:04:05,040 --> 00:04:06,560
protocols that are mainly used for

124
00:04:06,560 --> 00:04:08,000
communicating outbound first one we have

125
00:04:08,000 --> 00:04:10,640
is dns pretty self-explanatory uses dns

126
00:04:10,640 --> 00:04:12,400
for outbound communication and then we

127
00:04:12,400 --> 00:04:15,040
have http and https and this is

128
00:04:15,040 --> 00:04:16,560
definitely the most common as far as

129
00:04:16,560 --> 00:04:18,639
listeners go um

130
00:04:18,639 --> 00:04:20,798
it's packaged with a default cert you

131
00:04:20,798 --> 00:04:22,400
can use your own but there is a default

132
00:04:22,400 --> 00:04:24,000
cert we'll get into that later when we

133
00:04:24,000 --> 00:04:26,080
talk about hunting for beacon because it

134
00:04:26,080 --> 00:04:28,320
is pretty significable and then this is

135
00:04:28,320 --> 00:04:30,240
probably also the most heavily custom

136
00:04:30,240 --> 00:04:32,160
customizable listener that we can look

137
00:04:32,160 --> 00:04:33,840
at because there's something called

138
00:04:33,840 --> 00:04:35,759
malleable c2 which we'll talk about in a

139
00:04:35,759 --> 00:04:37,759
little bit here but it basically allows

140
00:04:37,759 --> 00:04:40,080
you to change almost everything

141
00:04:40,080 --> 00:04:42,400
that comprises how your

142
00:04:42,400 --> 00:04:44,960
payload will communicate outbound

143
00:04:44,960 --> 00:04:46,800
and then when we look up how you set up

144
00:04:46,800 --> 00:04:48,160
your infrastructure there's a couple

145
00:04:48,160 --> 00:04:49,360
different ways that you can set up your

146
00:04:49,360 --> 00:04:50,720
infrastructure you can do what's called

147
00:04:50,720 --> 00:04:52,479
a direct connection and that is where

148
00:04:52,479 --> 00:04:54,160
you literally just send a request

149
00:04:54,160 --> 00:04:56,000
directly to a team server nothing too

150
00:04:56,000 --> 00:04:58,160
crazy there just a direct connection you

151
00:04:58,160 --> 00:04:59,680
can use something like domain fronting

152
00:04:59,680 --> 00:05:02,639
where you use a cdn to send your you so

153
00:05:02,639 --> 00:05:04,960
basically the way the cdn works for

154
00:05:04,960 --> 00:05:07,039
domain fronting the request gets sent to

155
00:05:07,039 --> 00:05:10,000
the cdn the cdn redirects that request

156
00:05:10,000 --> 00:05:12,400
to your team server and efc2 and then

157
00:05:12,400 --> 00:05:14,320
there's domain masquerading and domain

158
00:05:14,320 --> 00:05:16,479
masquerading is where you want to

159
00:05:16,479 --> 00:05:18,320
emulate a specific service so in this

160
00:05:18,320 --> 00:05:21,120
case what we see here is an http request

161
00:05:21,120 --> 00:05:22,960
where it's trying to look like jquery

162
00:05:22,960 --> 00:05:24,720
this is a pretty common malleable c2

163
00:05:24,720 --> 00:05:26,080
profile used by a lot of different

164
00:05:26,080 --> 00:05:27,840
actors but what they're doing is it's

165
00:05:27,840 --> 00:05:29,680
still a direct connection but what

166
00:05:29,680 --> 00:05:32,080
they're trying to do is look like a

167
00:05:32,080 --> 00:05:34,320
non-threatening service so if you're an

168
00:05:34,320 --> 00:05:36,000
average like if you're a defender and

169
00:05:36,000 --> 00:05:37,759
you see jquery going outbound probably

170
00:05:37,759 --> 00:05:39,360
not too crazy but if you see something

171
00:05:39,360 --> 00:05:42,479
like run dll doing outbound with jquery

172
00:05:42,479 --> 00:05:43,840
probably want to look at that

173
00:05:43,840 --> 00:05:45,120
and then so

174
00:05:45,120 --> 00:05:47,520
kind of pivoting from that request

175
00:05:47,520 --> 00:05:49,280
that's just one of the many things that

176
00:05:49,280 --> 00:05:51,199
you can configure when we're talking

177
00:05:51,199 --> 00:05:54,160
about malleable c2 c2 and so on the next

178
00:05:54,160 --> 00:05:56,160
slide what we're going to see here is

179
00:05:56,160 --> 00:05:58,240
this is kind of what comprises malleable

180
00:05:58,240 --> 00:06:00,479
c2 and when we talk about it

181
00:06:00,479 --> 00:06:01,919
it's pretty much broken into two

182
00:06:01,919 --> 00:06:03,520
different parts in my head at least you

183
00:06:03,520 --> 00:06:05,600
have the you have the c2 profile and

184
00:06:05,600 --> 00:06:07,919
then you have the pe profile the c2

185
00:06:07,919 --> 00:06:09,520
profile controls almost everything that

186
00:06:09,520 --> 00:06:11,520
you can possibly imagine for your c2

187
00:06:11,520 --> 00:06:14,240
traffic you can see get post

188
00:06:14,240 --> 00:06:17,440
behavior uris even your user agent sleep

189
00:06:17,440 --> 00:06:18,880
time everything like that and then you

190
00:06:18,880 --> 00:06:21,360
have your pe profile and this is how you

191
00:06:21,360 --> 00:06:23,520
can customize the in-memory

192
00:06:23,520 --> 00:06:26,319
characteristics of your payload and also

193
00:06:26,319 --> 00:06:28,479
how your payload will operate when

194
00:06:28,479 --> 00:06:30,000
you're going through post-exploitation

195
00:06:30,000 --> 00:06:32,240
activity so one thing to note is like

196
00:06:32,240 --> 00:06:34,639
for process injection

197
00:06:34,639 --> 00:06:36,240
beacon makes heavy use of process

198
00:06:36,240 --> 00:06:38,160
injection for a lot of the post

199
00:06:38,160 --> 00:06:40,479
exploitation capabilities it uses so you

200
00:06:40,479 --> 00:06:41,840
can configure

201
00:06:41,840 --> 00:06:43,199
what

202
00:06:43,199 --> 00:06:45,280
process you want to spin up to do your

203
00:06:45,280 --> 00:06:47,039
post exploitation activity you can even

204
00:06:47,039 --> 00:06:49,120
configure your rich header hash which

205
00:06:49,120 --> 00:06:50,639
from my perspective on my team that's

206
00:06:50,639 --> 00:06:52,319
something that we can use to try and

207
00:06:52,319 --> 00:06:54,160
identify

208
00:06:54,160 --> 00:06:56,160
maybe related samples based on the rich

209
00:06:56,160 --> 00:06:57,440
header hash

210
00:06:57,440 --> 00:06:58,880
you can configure like i said the spawn

211
00:06:58,880 --> 00:07:00,800
process compile time and even how you

212
00:07:00,800 --> 00:07:02,240
allocate memory whether you want to use

213
00:07:02,240 --> 00:07:04,560
virtual alec or ntmap

214
00:07:04,560 --> 00:07:05,919
and what we see on the right here are

215
00:07:05,919 --> 00:07:08,080
two different examples of malleable c2

216
00:07:08,080 --> 00:07:09,680
profiles that were used by the conti

217
00:07:09,680 --> 00:07:11,520
affiliates so shout out to the whatever

218
00:07:11,520 --> 00:07:14,639
affiliate dropped these on i think xss

219
00:07:14,639 --> 00:07:16,000
because it gave us a really great

220
00:07:16,000 --> 00:07:18,720
insight into how these actors are using

221
00:07:18,720 --> 00:07:20,560
what's out there to operate in real

222
00:07:20,560 --> 00:07:22,560
world real world intrusions and so

223
00:07:22,560 --> 00:07:24,400
blowing this one up we can see the

224
00:07:24,400 --> 00:07:26,240
malibu c2 profile that these actors were

225
00:07:26,240 --> 00:07:28,000
using you can see everything from the

226
00:07:28,000 --> 00:07:29,680
user agent string that they set the

227
00:07:29,680 --> 00:07:31,199
jitter for those and even some of those

228
00:07:31,199 --> 00:07:34,160
get requests and then blowing up the pe

229
00:07:34,160 --> 00:07:36,400
profile this is another way that we can

230
00:07:36,400 --> 00:07:38,160
see all the things that they were able

231
00:07:38,160 --> 00:07:39,680
to configure so you can see their spawn

232
00:07:39,680 --> 00:07:41,520
to process that they configured their

233
00:07:41,520 --> 00:07:44,000
rich header hash even their compile time

234
00:07:44,000 --> 00:07:46,080
and all this comes down to

235
00:07:46,080 --> 00:07:47,520
what really makes

236
00:07:47,520 --> 00:07:50,479
beacon attractive for adversaries is how

237
00:07:50,479 --> 00:07:52,560
much you can configure you can really

238
00:07:52,560 --> 00:07:54,560
take almost anything about your payload

239
00:07:54,560 --> 00:07:56,560
and configure in a way that you want and

240
00:07:56,560 --> 00:07:59,120
there's innumerable c2 profiles out

241
00:07:59,120 --> 00:08:00,800
there that can easily help you do this

242
00:08:00,800 --> 00:08:02,479
with all you have to do is a git clone

243
00:08:02,479 --> 00:08:04,800
so not super crazy

244
00:08:04,800 --> 00:08:06,479
but what this really does is it changes

245
00:08:06,479 --> 00:08:08,560
the characteristics of how your

246
00:08:08,560 --> 00:08:10,080
payload's going to operate it doesn't

247
00:08:10,080 --> 00:08:12,319
really change how you yourself are going

248
00:08:12,319 --> 00:08:15,120
to operate really at the end of the day

249
00:08:15,120 --> 00:08:16,479
and that's where aggressor scripts come

250
00:08:16,479 --> 00:08:18,400
in to me i like to think of aggressor

251
00:08:18,400 --> 00:08:20,240
scripts as kind of like sore for

252
00:08:20,240 --> 00:08:22,240
operators what they do is they allow you

253
00:08:22,240 --> 00:08:24,319
to automate workflows they're not really

254
00:08:24,319 --> 00:08:26,400
adding new capability by

255
00:08:26,400 --> 00:08:29,759
maybe bringing in like a new

256
00:08:29,759 --> 00:08:31,680
function that cobalt strike didn't have

257
00:08:31,680 --> 00:08:33,519
have before what you're really doing is

258
00:08:33,519 --> 00:08:35,839
automating actor workflows they're

259
00:08:35,839 --> 00:08:37,839
loaded into the couple strike clients so

260
00:08:37,839 --> 00:08:39,760
not on the actual like host side they're

261
00:08:39,760 --> 00:08:42,000
loaded in the client and what they

262
00:08:42,000 --> 00:08:44,880
really do is allow you to perform a lot

263
00:08:44,880 --> 00:08:46,720
of different checks by taking the human

264
00:08:46,720 --> 00:08:48,560
element out and then when we talk about

265
00:08:48,560 --> 00:08:50,480
detection opportunities for aggressor

266
00:08:50,480 --> 00:08:52,720
scripts it's pretty hard because most

267
00:08:52,720 --> 00:08:55,200
often times we're not going to have

268
00:08:55,200 --> 00:08:56,959
eyes into where these adversaries are

269
00:08:56,959 --> 00:08:58,480
operating out of and if you do that's

270
00:08:58,480 --> 00:09:00,800
pretty awesome but what we can do is

271
00:09:00,800 --> 00:09:02,720
look for trends if we know that a

272
00:09:02,720 --> 00:09:04,320
particular actor when they get on an end

273
00:09:04,320 --> 00:09:06,320
point is going to run like the same five

274
00:09:06,320 --> 00:09:08,480
commands uh the second they get access

275
00:09:08,480 --> 00:09:10,080
that potentially could be a workbook and

276
00:09:10,080 --> 00:09:11,839
something that we could potentially use

277
00:09:11,839 --> 00:09:13,920
as a single point for if we're trying to

278
00:09:13,920 --> 00:09:15,839
identify these actors operating

279
00:09:15,839 --> 00:09:17,920
and what we see here again from our

280
00:09:17,920 --> 00:09:20,640
conti affiliates uh this is a big like i

281
00:09:20,640 --> 00:09:21,920
know you can't really read it right now

282
00:09:21,920 --> 00:09:24,560
but it's a big readme from their leaks

283
00:09:24,560 --> 00:09:26,320
that shows a bunch of the different

284
00:09:26,320 --> 00:09:28,800
malleable not malleable sorry aggressor

285
00:09:28,800 --> 00:09:30,399
scripts that they're using and now most

286
00:09:30,399 --> 00:09:31,839
of these they didn't develop themselves

287
00:09:31,839 --> 00:09:32,800
and actually i'm not sure if they

288
00:09:32,800 --> 00:09:34,800
developed any of them but they're able

289
00:09:34,800 --> 00:09:35,760
to use them because they're out in the

290
00:09:35,760 --> 00:09:37,839
open and what they do is they give these

291
00:09:37,839 --> 00:09:40,000
actors a way to automate a lot of their

292
00:09:40,000 --> 00:09:41,360
workflows because these are things that

293
00:09:41,360 --> 00:09:43,279
they need to use to operate fast and

294
00:09:43,279 --> 00:09:45,040
that's what they want to do and it kind

295
00:09:45,040 --> 00:09:46,880
of takes the human element out of it and

296
00:09:46,880 --> 00:09:48,560
blowing this up you can see an example

297
00:09:48,560 --> 00:09:50,560
one right here what this is is an

298
00:09:50,560 --> 00:09:52,560
aggressor script to basically do an av

299
00:09:52,560 --> 00:09:53,519
check

300
00:09:53,519 --> 00:09:54,959
this was one of the aggressor scripts

301
00:09:54,959 --> 00:09:57,519
part of the leak and it's pretty simple

302
00:09:57,519 --> 00:09:58,959
it takes a lot of the human element out

303
00:09:58,959 --> 00:10:01,120
of it when you talk about

304
00:10:01,120 --> 00:10:03,040
things that could potentially tip off

305
00:10:03,040 --> 00:10:05,519
defenders like typos are one uh errors

306
00:10:05,519 --> 00:10:08,000
are one so in this case you know you

307
00:10:08,000 --> 00:10:09,440
take a lot of that guesswork out you

308
00:10:09,440 --> 00:10:10,880
take a lot of the human element out and

309
00:10:10,880 --> 00:10:12,320
it's literally just click a button and

310
00:10:12,320 --> 00:10:13,839
you get all the avs that are on an

311
00:10:13,839 --> 00:10:15,839
endpoint pretty awesome especially if

312
00:10:15,839 --> 00:10:17,360
you want to be operating fast in an

313
00:10:17,360 --> 00:10:20,320
environment to try and like reduce that

314
00:10:20,320 --> 00:10:21,760
time to ransom so you can potentially

315
00:10:21,760 --> 00:10:22,880
get a bigger payout if you are a

316
00:10:22,880 --> 00:10:25,040
ransomware operator

317
00:10:25,040 --> 00:10:27,200
but again these aren't really adding new

318
00:10:27,200 --> 00:10:28,959
functions they're allowing you to

319
00:10:28,959 --> 00:10:31,519
automate functions but you're basically

320
00:10:31,519 --> 00:10:33,040
working within the constrains of cobalt

321
00:10:33,040 --> 00:10:35,920
strike at this point so if you wanted to

322
00:10:35,920 --> 00:10:38,079
extend the capabilities of cobalt strike

323
00:10:38,079 --> 00:10:40,079
or beacon what you'd want to use is

324
00:10:40,079 --> 00:10:41,680
beacon object files and beacon object

325
00:10:41,680 --> 00:10:43,519
files are pretty awesome because they

326
00:10:43,519 --> 00:10:44,240
are

327
00:10:44,240 --> 00:10:46,480
compiled c programs that are loaded into

328
00:10:46,480 --> 00:10:48,959
memory on the actual beacon session so

329
00:10:48,959 --> 00:10:50,560
as opposed to the client with aggressive

330
00:10:50,560 --> 00:10:53,120
scripts these are actually loaded into

331
00:10:53,120 --> 00:10:54,880
the actual beacon payload that's running

332
00:10:54,880 --> 00:10:56,720
in memory on an endpoint so from a

333
00:10:56,720 --> 00:10:58,560
detection perspective that's really

334
00:10:58,560 --> 00:10:59,760
really hard to detect because there's

335
00:10:59,760 --> 00:11:01,680
not any process injection or creation

336
00:11:01,680 --> 00:11:02,880
where you're injecting into that it's

337
00:11:02,880 --> 00:11:04,560
literally just loading it into memory

338
00:11:04,560 --> 00:11:05,600
and if you're not running memory

339
00:11:05,600 --> 00:11:07,600
forensics you don't get lucky with like

340
00:11:07,600 --> 00:11:09,519
a mem dump it's going to be pretty hard

341
00:11:09,519 --> 00:11:10,640
to detect

342
00:11:10,640 --> 00:11:12,959
and then what we really bring to the

343
00:11:12,959 --> 00:11:14,720
table with beacon object files is the

344
00:11:14,720 --> 00:11:16,959
ability to extend post exploitation

345
00:11:16,959 --> 00:11:20,240
activity or capability so again there's

346
00:11:20,240 --> 00:11:23,200
enumerable beacon object files out there

347
00:11:23,200 --> 00:11:24,640
there's

348
00:11:24,640 --> 00:11:26,399
there there's beacon object files for

349
00:11:26,399 --> 00:11:28,480
almost anything you can do who am i you

350
00:11:28,480 --> 00:11:29,920
almost anything you can possibly think

351
00:11:29,920 --> 00:11:31,120
of you can do

352
00:11:31,120 --> 00:11:32,399
you can do with it

353
00:11:32,399 --> 00:11:34,240
and they can also be combined with

354
00:11:34,240 --> 00:11:36,000
aggressive scripts and so what you're

355
00:11:36,000 --> 00:11:37,600
seeing on the right here is an example

356
00:11:37,600 --> 00:11:39,440
of an aggressor script that's going to

357
00:11:39,440 --> 00:11:41,440
load and run a beacon object file this

358
00:11:41,440 --> 00:11:43,360
was created by rafael mudge the creator

359
00:11:43,360 --> 00:11:45,680
of cobalt strike it's on his github but

360
00:11:45,680 --> 00:11:47,360
this was again used by the kanti

361
00:11:47,360 --> 00:11:49,200
affiliates we saw in the readme for one

362
00:11:49,200 --> 00:11:50,320
of the different

363
00:11:50,320 --> 00:11:51,600
beacon object files that they like to

364
00:11:51,600 --> 00:11:54,639
use this was one and so blowing this up

365
00:11:54,639 --> 00:11:56,399
what we can see here is

366
00:11:56,399 --> 00:11:58,480
it's not super complex

367
00:11:58,480 --> 00:11:59,440
again you're taking a lot of the

368
00:11:59,440 --> 00:12:01,200
guesswork out and all you really need to

369
00:12:01,200 --> 00:12:03,760
do is identify the architecture uh

370
00:12:03,760 --> 00:12:05,440
that's running on the endpoint load in

371
00:12:05,440 --> 00:12:07,440
the correct beacon object file

372
00:12:07,440 --> 00:12:08,959
uh compile it with your arguments and

373
00:12:08,959 --> 00:12:11,040
then you're off to the races and again

374
00:12:11,040 --> 00:12:12,639
this takes a lot of the guesswork out

375
00:12:12,639 --> 00:12:14,639
and you're at the same time extending

376
00:12:14,639 --> 00:12:16,959
the capabilities of beacons so this is

377
00:12:16,959 --> 00:12:18,320
pretty awesome if you want to operate

378
00:12:18,320 --> 00:12:20,720
fast add new capabilities

379
00:12:20,720 --> 00:12:22,800
and it makes defense a lot harder

380
00:12:22,800 --> 00:12:24,399
because we're not seeing this

381
00:12:24,399 --> 00:12:26,800
necessarily as a process injection and

382
00:12:26,800 --> 00:12:28,399
that's something to note because like we

383
00:12:28,399 --> 00:12:30,079
looked at the spawn twos

384
00:12:30,079 --> 00:12:32,399
spawn twos are primarily used by a

385
00:12:32,399 --> 00:12:33,760
capability called fork and run where

386
00:12:33,760 --> 00:12:35,760
they spin up a process inject into it

387
00:12:35,760 --> 00:12:37,279
and get the results back that's not what

388
00:12:37,279 --> 00:12:39,040
this is doing you're literally just

389
00:12:39,040 --> 00:12:40,800
injecting or not injecting you're

390
00:12:40,800 --> 00:12:42,880
loading a new capability into memory

391
00:12:42,880 --> 00:12:45,120
running it and you're good to go

392
00:12:45,120 --> 00:12:46,480
and so all these are some of the

393
00:12:46,480 --> 00:12:49,360
different features of cobalt strike that

394
00:12:49,360 --> 00:12:51,360
make it pretty attractive to adversaries

395
00:12:51,360 --> 00:12:52,800
and that kind of leads into our next

396
00:12:52,800 --> 00:12:55,200
point of why beacon well it pretty much

397
00:12:55,200 --> 00:12:57,040
comes down to this it's customizable as

398
00:12:57,040 --> 00:12:58,880
you saw with the malleable c2 profiles

399
00:12:58,880 --> 00:13:00,720
you can almost change anything it's

400
00:13:00,720 --> 00:13:02,800
extremely easy to use i was able to take

401
00:13:02,800 --> 00:13:05,120
a class on cobalt strike and beacon and

402
00:13:05,120 --> 00:13:06,639
your you can pretty much pick it up in a

403
00:13:06,639 --> 00:13:08,160
couple hours you can get pretty

404
00:13:08,160 --> 00:13:10,240
comfortable with it

405
00:13:10,240 --> 00:13:11,519
and it's

406
00:13:11,519 --> 00:13:14,399
primarily gui based really easy to use

407
00:13:14,399 --> 00:13:15,600
you'll see a little bit more of like

408
00:13:15,600 --> 00:13:17,120
some of what the commands look like if

409
00:13:17,120 --> 00:13:18,959
you're actually operating under it it's

410
00:13:18,959 --> 00:13:21,279
under active development too and when we

411
00:13:21,279 --> 00:13:22,480
talk about active development that

412
00:13:22,480 --> 00:13:24,399
doesn't mean just by help systems

413
00:13:24,399 --> 00:13:26,399
there's a large amount of open source

414
00:13:26,399 --> 00:13:28,079
projects that are adding new capability

415
00:13:28,079 --> 00:13:30,320
all the time to cobalt strike and beacon

416
00:13:30,320 --> 00:13:32,560
and so if you're if you're an actor

417
00:13:32,560 --> 00:13:34,320
that's free capability that you didn't

418
00:13:34,320 --> 00:13:36,240
have to develop yourself and that comes

419
00:13:36,240 --> 00:13:38,000
down to it's cheaper than custom

420
00:13:38,000 --> 00:13:41,199
development if you develop a capability

421
00:13:41,199 --> 00:13:43,040
say it's a new malware family or new

422
00:13:43,040 --> 00:13:44,800
backdoor it gets burned by a threat

423
00:13:44,800 --> 00:13:46,959
intelligence company or

424
00:13:46,959 --> 00:13:49,519
a a government what do you do well you

425
00:13:49,519 --> 00:13:51,279
lose capability because while it's still

426
00:13:51,279 --> 00:13:52,560
going to operate well in some

427
00:13:52,560 --> 00:13:54,399
environments it's going to be signature

428
00:13:54,399 --> 00:13:55,760
you're going to potentially have the

429
00:13:55,760 --> 00:13:57,600
opportunity to get discovered and you're

430
00:13:57,600 --> 00:14:00,320
going to eventually lose

431
00:14:00,320 --> 00:14:01,519
whatever you're trying to gain whether

432
00:14:01,519 --> 00:14:03,760
that's espionage or money

433
00:14:03,760 --> 00:14:06,000
and crack beacon which

434
00:14:06,000 --> 00:14:08,160
uh is what a lot of adversaries use is

435
00:14:08,160 --> 00:14:10,639
basically free um so as far as like when

436
00:14:10,639 --> 00:14:12,240
you look at that you're getting a lot of

437
00:14:12,240 --> 00:14:15,519
capability for almost nothing and you

438
00:14:15,519 --> 00:14:17,279
don't really have to do any development

439
00:14:17,279 --> 00:14:19,120
yourself and when we talk about

440
00:14:19,120 --> 00:14:21,199
attribution

441
00:14:21,199 --> 00:14:23,920
attribution is hard but when we use

442
00:14:23,920 --> 00:14:25,920
something like cobalt strike if you're

443
00:14:25,920 --> 00:14:27,839
an operator if you're an adversary

444
00:14:27,839 --> 00:14:29,440
you're going to muddy the waters a lot

445
00:14:29,440 --> 00:14:31,519
because it's not a point that we can use

446
00:14:31,519 --> 00:14:34,320
as like a threat intelligence analysts

447
00:14:34,320 --> 00:14:36,480
to say hey we know that this adversary

448
00:14:36,480 --> 00:14:38,639
uses this specific backdoor this kind of

449
00:14:38,639 --> 00:14:40,000
points to them there's a lot of

450
00:14:40,000 --> 00:14:42,240
different adversaries across a lot of

451
00:14:42,240 --> 00:14:45,519
different like um how do i say this like

452
00:14:45,519 --> 00:14:46,880
capability there's like some

453
00:14:46,880 --> 00:14:48,959
sophisticated actors that use it like

454
00:14:48,959 --> 00:14:50,880
the solarwinds actors all the way down

455
00:14:50,880 --> 00:14:53,360
to people that are you know

456
00:14:53,360 --> 00:14:55,360
not super sophisticated spinning it up

457
00:14:55,360 --> 00:14:58,800
to use ransomware so it's really just a

458
00:14:58,800 --> 00:15:00,880
pretty broad platform that a lot of

459
00:15:00,880 --> 00:15:02,959
different adversaries can use and when

460
00:15:02,959 --> 00:15:05,680
we go to the who's who in the zoo we see

461
00:15:05,680 --> 00:15:07,199
when we're looking at it from our

462
00:15:07,199 --> 00:15:10,320
perspective at mandiant we have five atp

463
00:15:10,320 --> 00:15:13,040
apts six fin groups of financial crime

464
00:15:13,040 --> 00:15:15,600
actors and 594 unks that we have

465
00:15:15,600 --> 00:15:17,279
attributed to using beacon and when we

466
00:15:17,279 --> 00:15:19,519
talk about unks when we spin up a new

467
00:15:19,519 --> 00:15:21,760
cluster of threat activity at mandiant

468
00:15:21,760 --> 00:15:24,320
or when we identify like a new potential

469
00:15:24,320 --> 00:15:26,639
adversary operating we cluster them

470
00:15:26,639 --> 00:15:29,040
unless we have like hard attribution in

471
00:15:29,040 --> 00:15:30,639
what's called an unk so it's a

472
00:15:30,639 --> 00:15:32,800
uncategorized cluster of threat activity

473
00:15:32,800 --> 00:15:34,800
now that's important to look at in the

474
00:15:34,800 --> 00:15:36,160
sense that

475
00:15:36,160 --> 00:15:38,720
when we when we view an unk there we may

476
00:15:38,720 --> 00:15:40,720
have suspicions on who it could be and

477
00:15:40,720 --> 00:15:43,920
so when we talk about suspected apts out

478
00:15:43,920 --> 00:15:46,480
of that 594 ounce we have 23 that we've

479
00:15:46,480 --> 00:15:48,240
observed used beacon and then when we go

480
00:15:48,240 --> 00:15:50,720
to fin crime we have 22 unks that we

481
00:15:50,720 --> 00:15:52,480
suspect to be fin groups and what this

482
00:15:52,480 --> 00:15:54,480
comes down to is you see a lot of

483
00:15:54,480 --> 00:15:56,880
diverse adversaries using beacon and of

484
00:15:56,880 --> 00:15:59,440
the like some op 2500 that we are

485
00:15:59,440 --> 00:16:02,160
actively tracking um you see almost a

486
00:16:02,160 --> 00:16:04,160
third using beacon and that's a crazy

487
00:16:04,160 --> 00:16:05,759
big number when you talk about the

488
00:16:05,759 --> 00:16:07,360
diverse set that these actors are

489
00:16:07,360 --> 00:16:08,399
operating in

490
00:16:08,399 --> 00:16:10,480
and what we're going to look at next is

491
00:16:10,480 --> 00:16:12,000
a couple profiles of some of the

492
00:16:12,000 --> 00:16:13,199
different actors that are probably the

493
00:16:13,199 --> 00:16:15,199
most prolific at using beacon

494
00:16:15,199 --> 00:16:17,680
and the first is fin 12 this is a newly

495
00:16:17,680 --> 00:16:20,000
graduated actor from our team

496
00:16:20,000 --> 00:16:23,360
they were previously known as 1878 1878

497
00:16:23,360 --> 00:16:25,519
but now they're fin 12 they moved on to

498
00:16:25,519 --> 00:16:27,920
the big leagues so they are one of the

499
00:16:27,920 --> 00:16:30,639
most prolific operators of beacon

500
00:16:30,639 --> 00:16:32,720
out there bar none in crime

501
00:16:32,720 --> 00:16:33,600
so

502
00:16:33,600 --> 00:16:35,199
when we talk about how they're operating

503
00:16:35,199 --> 00:16:37,040
they're extremely aggressive and they're

504
00:16:37,040 --> 00:16:39,199
very very efficient they really look to

505
00:16:39,199 --> 00:16:41,199
lower that time to ransom to as low as

506
00:16:41,199 --> 00:16:42,800
they possibly can

507
00:16:42,800 --> 00:16:44,959
and when we look at how they operate

508
00:16:44,959 --> 00:16:46,480
they're relying on other actors for

509
00:16:46,480 --> 00:16:47,920
initial access

510
00:16:47,920 --> 00:16:49,279
it's pretty diverse but a lot of the

511
00:16:49,279 --> 00:16:51,839
time it's trick bot but they pri almost

512
00:16:51,839 --> 00:16:53,199
primarily use beacon for post

513
00:16:53,199 --> 00:16:55,199
exploitation activity and when we look

514
00:16:55,199 --> 00:16:57,040
at how they're getting beacon into

515
00:16:57,040 --> 00:16:58,560
endpoints they're using a lot of

516
00:16:58,560 --> 00:17:00,320
different in-memory loaders and we

517
00:17:00,320 --> 00:17:02,480
talked about loaders earlier but some of

518
00:17:02,480 --> 00:17:03,759
the examples that they were using were

519
00:17:03,759 --> 00:17:06,000
malt shake ice candle white dagger and

520
00:17:06,000 --> 00:17:08,079
weird loop and then when we look at how

521
00:17:08,079 --> 00:17:10,000
they're operating in terms of their like

522
00:17:10,000 --> 00:17:12,400
c2 profiles they've been we've observed

523
00:17:12,400 --> 00:17:14,000
them use a bunch but some of them are

524
00:17:14,000 --> 00:17:16,720
amazon c2 concealer and jquery and c2

525
00:17:16,720 --> 00:17:18,480
concealer is probably

526
00:17:18,480 --> 00:17:20,959
if i'm not mistaken the the most common

527
00:17:20,959 --> 00:17:22,959
one that they've been observed using and

528
00:17:22,959 --> 00:17:24,720
then they like to use let's encrypt ssl

529
00:17:24,720 --> 00:17:25,839
certs because they're not going to use

530
00:17:25,839 --> 00:17:28,960
the default serve so that's one profile

531
00:17:28,960 --> 00:17:31,039
on the crime side and now switching

532
00:17:31,039 --> 00:17:33,039
gears we're going to look at apt-41

533
00:17:33,039 --> 00:17:35,679
another prolific operator of beacon

534
00:17:35,679 --> 00:17:38,480
now what's interesting about apt-41 is

535
00:17:38,480 --> 00:17:39,840
they're a chinese threat group that

536
00:17:39,840 --> 00:17:42,080
we've observed carry out state sponsored

537
00:17:42,080 --> 00:17:44,240
espionage operations in parallel with

538
00:17:44,240 --> 00:17:47,600
financial crime operations so we had a i

539
00:17:47,600 --> 00:17:48,799
think a blog that was called double

540
00:17:48,799 --> 00:17:50,720
dragon it just kind of goes into like

541
00:17:50,720 --> 00:17:52,320
show that this actor is pretty diverse

542
00:17:52,320 --> 00:17:53,919
they're doing a lot of different things

543
00:17:53,919 --> 00:17:55,919
but they are still state sponsored and

544
00:17:55,919 --> 00:17:58,320
again we've seen them use a wide range

545
00:17:58,320 --> 00:18:00,720
of in-memory beacon loaders so some of

546
00:18:00,720 --> 00:18:03,280
the notable ones are blue blue spine mop

547
00:18:03,280 --> 00:18:05,520
sled and dustpan we've observed them

548
00:18:05,520 --> 00:18:08,320
using custom cha-cha 2.0 encryption and

549
00:18:08,320 --> 00:18:10,640
then for their like c2 they like to use

550
00:18:10,640 --> 00:18:13,360
cloudflare cdn workers

551
00:18:13,360 --> 00:18:15,760
and then as far as malleable c2 profiles

552
00:18:15,760 --> 00:18:18,240
again they use a wide range but jquery

553
00:18:18,240 --> 00:18:20,640
gmail google drive are the heavy hitters

554
00:18:20,640 --> 00:18:22,240
with cobalt strike probably being the

555
00:18:22,240 --> 00:18:24,320
most common for them and one thing are

556
00:18:24,320 --> 00:18:26,000
not copper strikes sorry c2 concealer

557
00:18:26,000 --> 00:18:27,679
and one thing i will note for c2

558
00:18:27,679 --> 00:18:29,039
concealer

559
00:18:29,039 --> 00:18:31,919
the way that it builds profiles is it's

560
00:18:31,919 --> 00:18:33,840
automated in a sense but what's

561
00:18:33,840 --> 00:18:36,000
interesting is a lot of the user agents

562
00:18:36,000 --> 00:18:38,720
that it uses are mobile phones so you

563
00:18:38,720 --> 00:18:40,720
need to know your environment but if you

564
00:18:40,720 --> 00:18:42,720
see a bunch of hosts that aren't mobile

565
00:18:42,720 --> 00:18:44,400
phones connecting out as mobile phones

566
00:18:44,400 --> 00:18:45,760
that's potentially something to look at

567
00:18:45,760 --> 00:18:48,320
and it's just another point to to

568
00:18:48,320 --> 00:18:50,559
potentially identify some badness in

569
00:18:50,559 --> 00:18:52,160
your environment and now that we've

570
00:18:52,160 --> 00:18:54,160
talked about some of the actor profiles

571
00:18:54,160 --> 00:18:55,520
we've looked at some of the different

572
00:18:55,520 --> 00:18:56,880
ways that

573
00:18:56,880 --> 00:18:58,880
why some of the reasons why actors would

574
00:18:58,880 --> 00:19:01,200
want to use beacon in the first place

575
00:19:01,200 --> 00:19:02,640
but we've also talked about a bunch

576
00:19:02,640 --> 00:19:04,640
about loaders at this point and loaders

577
00:19:04,640 --> 00:19:06,080
are really important because they're

578
00:19:06,080 --> 00:19:08,240
almost as significant in terms of like

579
00:19:08,240 --> 00:19:09,520
you're at

580
00:19:09,520 --> 00:19:11,120
as far as detection goes because no

581
00:19:11,120 --> 00:19:12,480
matter what they're going to be doing

582
00:19:12,480 --> 00:19:14,880
like badness and we're going to get a

583
00:19:14,880 --> 00:19:17,679
quick vibe check so this was a loader so

584
00:19:17,679 --> 00:19:19,600
vibe check is a nim based in memory

585
00:19:19,600 --> 00:19:20,880
loader

586
00:19:20,880 --> 00:19:23,600
that was used by 2602 during what we

587
00:19:23,600 --> 00:19:26,320
call fake updates campaigns

588
00:19:26,320 --> 00:19:28,559
what's interesting about this is nim as

589
00:19:28,559 --> 00:19:30,799
far as like loaders go pretty rare so it

590
00:19:30,799 --> 00:19:32,160
was really interesting to see and what

591
00:19:32,160 --> 00:19:34,320
this is is a yar roll that i created

592
00:19:34,320 --> 00:19:36,400
just to detect these

593
00:19:36,400 --> 00:19:39,280
this loader it uses syscalls to

594
00:19:39,280 --> 00:19:41,120
basically do a lot of the process

595
00:19:41,120 --> 00:19:43,760
injection so what you see here the first

596
00:19:43,760 --> 00:19:46,240
two strings are pretty much specific to

597
00:19:46,240 --> 00:19:49,280
that that project and then the the next

598
00:19:49,280 --> 00:19:51,840
four are basically a variation

599
00:19:51,840 --> 00:19:52,960
that um

600
00:19:52,960 --> 00:19:54,799
kind of like lead to believing that this

601
00:19:54,799 --> 00:19:56,160
is going to be something bad because

602
00:19:56,160 --> 00:19:58,400
it's either is getting a process id it's

603
00:19:58,400 --> 00:20:00,799
a spending process it's using osproc

604
00:20:00,799 --> 00:20:02,960
which is for nemesis calls or it's using

605
00:20:02,960 --> 00:20:04,400
virtual alec so all these kind of lead

606
00:20:04,400 --> 00:20:05,520
us the conclusion that you know this is

607
00:20:05,520 --> 00:20:07,120
probably doing something bad

608
00:20:07,120 --> 00:20:08,640
when you combine it with those first two

609
00:20:08,640 --> 00:20:10,799
strings it gets even better fidelity and

610
00:20:10,799 --> 00:20:14,159
then when we look at this as far as like

611
00:20:14,159 --> 00:20:15,840
the potential for expansion here this

612
00:20:15,840 --> 00:20:17,840
was based off of github so this github

613
00:20:17,840 --> 00:20:19,520
i'll probably if you if you want to know

614
00:20:19,520 --> 00:20:21,120
what it is just hit me up

615
00:20:21,120 --> 00:20:23,120
i'll link it that's not a problem but

616
00:20:23,120 --> 00:20:25,120
it's a part of a wider range of

617
00:20:25,120 --> 00:20:28,320
offensive nim um

618
00:20:28,799 --> 00:20:30,400
solutions on this github this was just

619
00:20:30,400 --> 00:20:32,320
one that we observed i'm sure that

620
00:20:32,320 --> 00:20:33,760
others are being used but this was just

621
00:20:33,760 --> 00:20:35,120
one that we saw that we thought was

622
00:20:35,120 --> 00:20:36,720
interesting and i wanted to share a rule

623
00:20:36,720 --> 00:20:38,000
for you guys

624
00:20:38,000 --> 00:20:39,039
you all

625
00:20:39,039 --> 00:20:40,240
and now that we've talked about some of

626
00:20:40,240 --> 00:20:41,760
the reasons why actors would want to use

627
00:20:41,760 --> 00:20:42,960
beacon we've talked about some of the

628
00:20:42,960 --> 00:20:44,480
actors that have used it how are we

629
00:20:44,480 --> 00:20:46,559
going to detect it and it probably in to

630
00:20:46,559 --> 00:20:48,240
me when i first looked at like trying to

631
00:20:48,240 --> 00:20:49,760
detect beacon it was pretty daunting

632
00:20:49,760 --> 00:20:52,640
because it's such a wide uh it's such a

633
00:20:52,640 --> 00:20:54,480
wide threat scape as far as like what

634
00:20:54,480 --> 00:20:57,039
you can use with it so

635
00:20:57,039 --> 00:20:58,880
when i look at it from my perspective i

636
00:20:58,880 --> 00:21:00,320
look to try and narrow it down to some

637
00:21:00,320 --> 00:21:02,320
of the common detection opportunities so

638
00:21:02,320 --> 00:21:04,159
there are things that beacon does by

639
00:21:04,159 --> 00:21:07,200
default that are pretty significable

640
00:21:07,200 --> 00:21:09,280
and then a one quick note that ur rule

641
00:21:09,280 --> 00:21:10,480
all that i'll share at the end of this

642
00:21:10,480 --> 00:21:12,480
talk so so don't worry about taking

643
00:21:12,480 --> 00:21:13,520
pictures

644
00:21:13,520 --> 00:21:15,360
so the default name pipe is one there is

645
00:21:15,360 --> 00:21:17,200
a default name pipe that is used by

646
00:21:17,200 --> 00:21:19,840
beacon so that's one potential

647
00:21:19,840 --> 00:21:21,520
detection opportunity and then some of

648
00:21:21,520 --> 00:21:23,440
the ways that it operates when you look

649
00:21:23,440 --> 00:21:24,960
at it enough you can see okay this is

650
00:21:24,960 --> 00:21:27,039
probably beacon doing like get system or

651
00:21:27,039 --> 00:21:29,200
jump ps exec with powershell and what

652
00:21:29,200 --> 00:21:31,039
we're going to look at on the next slide

653
00:21:31,039 --> 00:21:33,280
is a detection opportunity so

654
00:21:33,280 --> 00:21:35,360
jump ps exec powershell is a way that

655
00:21:35,360 --> 00:21:36,880
beacon

656
00:21:36,880 --> 00:21:38,240
will laterally move within an

657
00:21:38,240 --> 00:21:40,080
environment using the windows service

658
00:21:40,080 --> 00:21:41,919
control manager

659
00:21:41,919 --> 00:21:43,440
what it does is it creates a service on

660
00:21:43,440 --> 00:21:45,360
a remote system

661
00:21:45,360 --> 00:21:47,200
runs a basic c4 encoded powershell

662
00:21:47,200 --> 00:21:49,200
stager and then

663
00:21:49,200 --> 00:21:50,960
gets a lateral movement and what you can

664
00:21:50,960 --> 00:21:52,720
see in the bottom left is an example of

665
00:21:52,720 --> 00:21:54,159
what that looks like when you actually

666
00:21:54,159 --> 00:21:56,080
run it you can see the command jump

667
00:21:56,080 --> 00:21:57,520
lists all the different options that you

668
00:21:57,520 --> 00:21:59,200
have available

669
00:21:59,200 --> 00:22:00,640
for lateral movement then we run the

670
00:22:00,640 --> 00:22:03,280
command and we get another target in our

671
00:22:03,280 --> 00:22:04,080
belt

672
00:22:04,080 --> 00:22:06,320
so when we look at detecting this

673
00:22:06,320 --> 00:22:08,080
the first thing we want to look for is

674
00:22:08,080 --> 00:22:11,280
an event id 745 for service creation so

675
00:22:11,280 --> 00:22:12,880
then from there we want to look for a

676
00:22:12,880 --> 00:22:15,360
couple different strings um we want to

677
00:22:15,360 --> 00:22:18,880
look for comspec powershell knob

678
00:22:18,880 --> 00:22:22,480
hidden and jbz and jbz is a base64

679
00:22:22,480 --> 00:22:24,559
string that when you decode is dollar

680
00:22:24,559 --> 00:22:28,559
sign s and that's part of the

681
00:22:28,559 --> 00:22:31,360
powershell stager for beacon

682
00:22:31,360 --> 00:22:32,880
and so this is also going to be on the

683
00:22:32,880 --> 00:22:34,159
github

684
00:22:34,159 --> 00:22:35,919
share with you guys and this is a sigma

685
00:22:35,919 --> 00:22:37,760
rule so what you can do with this is

686
00:22:37,760 --> 00:22:39,360
turn it into any type of detection you

687
00:22:39,360 --> 00:22:42,640
want whether that's a sim edr whatever

688
00:22:42,640 --> 00:22:44,159
whatever you have it's kind of like an

689
00:22:44,159 --> 00:22:46,080
open framework and i'm a really big fan

690
00:22:46,080 --> 00:22:48,320
of sigma and so moving into another

691
00:22:48,320 --> 00:22:49,520
detection opportunity we're going to

692
00:22:49,520 --> 00:22:51,919
talk about get system and git system is

693
00:22:51,919 --> 00:22:53,760
one of the common ways that you can use

694
00:22:53,760 --> 00:22:55,600
beacon to

695
00:22:55,600 --> 00:22:57,120
get privilege escalation on an endpoint

696
00:22:57,120 --> 00:22:58,880
it uses nameplace name pipe

697
00:22:58,880 --> 00:23:01,520
impersonation to get nt authority and

698
00:23:01,520 --> 00:23:03,039
what you can see here on the on the

699
00:23:03,039 --> 00:23:04,960
bottom left is another example of what

700
00:23:04,960 --> 00:23:06,880
that actually looks like when you run

701
00:23:06,880 --> 00:23:10,080
git system so we test the system to run

702
00:23:10,080 --> 00:23:11,840
git system it does the same pipe

703
00:23:11,840 --> 00:23:14,240
impersonation we run it who am i who are

704
00:23:14,240 --> 00:23:16,960
we we're uh nt system authority so

705
00:23:16,960 --> 00:23:19,200
awesome how do we detect that again a

706
00:23:19,200 --> 00:23:21,280
745 and then what we're going to want to

707
00:23:21,280 --> 00:23:25,200
look for is a cmd slash c a cmd a slash

708
00:23:25,200 --> 00:23:26,000
c

709
00:23:26,000 --> 00:23:28,400
a echo and then a pipe and when you

710
00:23:28,400 --> 00:23:30,480
actually see this run on a command line

711
00:23:30,480 --> 00:23:32,799
or in like your logs you're going to see

712
00:23:32,799 --> 00:23:35,360
a couple different um strings that are

713
00:23:35,360 --> 00:23:37,760
like being echoed into a specifically

714
00:23:37,760 --> 00:23:39,919
named name pipe those are all generated

715
00:23:39,919 --> 00:23:41,840
on the fly um

716
00:23:41,840 --> 00:23:42,720
if you

717
00:23:42,720 --> 00:23:44,320
you can use regex to identify them

718
00:23:44,320 --> 00:23:45,919
pretty easily if you have any questions

719
00:23:45,919 --> 00:23:47,360
on that hit me up after the talk i'm

720
00:23:47,360 --> 00:23:48,880
happy to work with you on that i didn't

721
00:23:48,880 --> 00:23:50,720
put them in here just because i honestly

722
00:23:50,720 --> 00:23:52,480
don't know how you use regex and sigma

723
00:23:52,480 --> 00:23:54,400
but

724
00:23:54,400 --> 00:23:56,240
i can talk with it after and so these

725
00:23:56,240 --> 00:23:57,760
are just two of the detection

726
00:23:57,760 --> 00:23:59,520
opportunities that you can use to

727
00:23:59,520 --> 00:24:01,200
potentially identify beacon within your

728
00:24:01,200 --> 00:24:03,200
environment now we talked about a lot of

729
00:24:03,200 --> 00:24:06,080
others like c2 concealer we talked about

730
00:24:06,080 --> 00:24:07,279
some of the different ways you can look

731
00:24:07,279 --> 00:24:10,000
at rich hash headers and there's an

732
00:24:10,000 --> 00:24:11,840
innumerable amount of detection

733
00:24:11,840 --> 00:24:13,120
opportunities but i wanted to highlight

734
00:24:13,120 --> 00:24:14,720
some of the pretty common ones that can

735
00:24:14,720 --> 00:24:17,120
get you started on this path and so

736
00:24:17,120 --> 00:24:18,880
if we did identify beacon what do we

737
00:24:18,880 --> 00:24:21,039
want to do well we want to investigate

738
00:24:21,039 --> 00:24:23,120
it so we want to investigate evil so if

739
00:24:23,120 --> 00:24:24,240
we identify it running in our

740
00:24:24,240 --> 00:24:26,240
environment or what we think is it we

741
00:24:26,240 --> 00:24:28,000
need to be able to parse the payload

742
00:24:28,000 --> 00:24:30,799
emulate it analyze how it's running or

743
00:24:30,799 --> 00:24:32,480
operating and then use those artifacts

744
00:24:32,480 --> 00:24:35,039
to hunt across our environment and so

745
00:24:35,039 --> 00:24:37,440
that's kind of at least in my head how i

746
00:24:37,440 --> 00:24:38,880
kind of work through

747
00:24:38,880 --> 00:24:41,120
identifying and investigating beacon in

748
00:24:41,120 --> 00:24:41,840
in

749
00:24:41,840 --> 00:24:44,000
in the real world so

750
00:24:44,000 --> 00:24:45,600
one of my favorite tools for doing that

751
00:24:45,600 --> 00:24:47,200
is cyber chef if you're not familiar

752
00:24:47,200 --> 00:24:49,600
with it it was made by i think the gchq

753
00:24:49,600 --> 00:24:51,120
um it's a pretty awesome framework

754
00:24:51,120 --> 00:24:52,480
allows you to do a lot of different

755
00:24:52,480 --> 00:24:54,640
manipulation on artifacts and then

756
00:24:54,640 --> 00:24:56,799
speakeasy is another tool that i'm a big

757
00:24:56,799 --> 00:24:58,559
fan of it was created by the reverse

758
00:24:58,559 --> 00:25:01,039
engineers at mandiant and it is an

759
00:25:01,039 --> 00:25:03,039
awesome emulator we'll go into that a

760
00:25:03,039 --> 00:25:05,120
little bit later though so starting off

761
00:25:05,120 --> 00:25:06,720
we're going to make the beacon and what

762
00:25:06,720 --> 00:25:09,600
we see here is it's probably hard to see

763
00:25:09,600 --> 00:25:12,000
but you can see like the comm spec jbz

764
00:25:12,000 --> 00:25:13,360
so this is that powershell stage where

765
00:25:13,360 --> 00:25:15,039
we were talking that powershell command

766
00:25:15,039 --> 00:25:17,760
being run and what we see here is that

767
00:25:17,760 --> 00:25:21,679
being run in a big block of basic c4 so

768
00:25:21,679 --> 00:25:23,039
using cyber chef we want to start

769
00:25:23,039 --> 00:25:24,320
decoding this

770
00:25:24,320 --> 00:25:26,880
and again so this recipe for cyber chef

771
00:25:26,880 --> 00:25:28,720
will be also on my github as a guest so

772
00:25:28,720 --> 00:25:30,720
if you want it feel free to go ahead and

773
00:25:30,720 --> 00:25:32,799
grab it it's pretty awesome

774
00:25:32,799 --> 00:25:34,559
and what you'll first do is do a from

775
00:25:34,559 --> 00:25:37,360
base64 we'll do a decode and then we'll

776
00:25:37,360 --> 00:25:39,919
run a regex to pull out any basic c4

777
00:25:39,919 --> 00:25:41,760
that we get as a result so we run that

778
00:25:41,760 --> 00:25:43,679
and we get back another big blob of

779
00:25:43,679 --> 00:25:46,240
base64 and if you looked at basic c4

780
00:25:46,240 --> 00:25:48,240
enough you

781
00:25:48,240 --> 00:25:51,120
notice pretty quickly that h4si is basic

782
00:25:51,120 --> 00:25:53,679
z4 encoded gzip so

783
00:25:53,679 --> 00:25:55,840
taking that knowledge and

784
00:25:55,840 --> 00:25:58,400
this recipe if you take it if you choose

785
00:25:58,400 --> 00:26:00,000
you can move on to the next step in

786
00:26:00,000 --> 00:26:01,279
making the beacon and what we're going

787
00:26:01,279 --> 00:26:03,600
to do is another from base64 but we're

788
00:26:03,600 --> 00:26:06,480
going to add on a

789
00:26:06,480 --> 00:26:08,640
g unzip and what we're going to see here

790
00:26:08,640 --> 00:26:10,880
is some code pop-up and this does look

791
00:26:10,880 --> 00:26:12,480
interesting and this is actually the

792
00:26:12,480 --> 00:26:13,679
stager that we were talking about

793
00:26:13,679 --> 00:26:15,679
earlier and i know it's really hard to

794
00:26:15,679 --> 00:26:18,240
read so let's make it a little easier

795
00:26:18,240 --> 00:26:20,960
and so this is what the full smb stager

796
00:26:20,960 --> 00:26:22,559
is going to look like

797
00:26:22,559 --> 00:26:24,480
so there's a lot here and there's a lot

798
00:26:24,480 --> 00:26:26,799
to focus on but really the primary point

799
00:26:26,799 --> 00:26:28,720
that we want to look at is right here so

800
00:26:28,720 --> 00:26:30,480
this little tidbit of code right here is

801
00:26:30,480 --> 00:26:31,840
really the nuts and bolts of what this

802
00:26:31,840 --> 00:26:34,320
is doing and when we talk about it that

803
00:26:34,320 --> 00:26:36,960
first big block of base64 is the actual

804
00:26:36,960 --> 00:26:38,159
shell code that this is going to be

805
00:26:38,159 --> 00:26:40,159
loading and executing in memory and then

806
00:26:40,159 --> 00:26:42,320
in that little for loop is the xor key

807
00:26:42,320 --> 00:26:43,840
and this is really important when we

808
00:26:43,840 --> 00:26:45,840
talk about getting to the next stage of

809
00:26:45,840 --> 00:26:47,919
actually emulating this we need to take

810
00:26:47,919 --> 00:26:50,240
these and use them to kind of get to the

811
00:26:50,240 --> 00:26:52,960
next step and so taking that we're going

812
00:26:52,960 --> 00:26:54,320
to take that

813
00:26:54,320 --> 00:26:55,919
we're going to run another regex we're

814
00:26:55,919 --> 00:26:57,919
going to do another from base64 and this

815
00:26:57,919 --> 00:26:59,679
time we're going to xor it with the xor

816
00:26:59,679 --> 00:27:01,679
key and again i know this is pretty hard

817
00:27:01,679 --> 00:27:04,799
to see but what this is

818
00:27:04,799 --> 00:27:07,760
is the raw output of the actual

819
00:27:07,760 --> 00:27:10,480
um shell code and what we see here in in

820
00:27:10,480 --> 00:27:12,640
red is a name pipe and that's the name

821
00:27:12,640 --> 00:27:14,559
pipe that this sample itself is using

822
00:27:14,559 --> 00:27:16,640
for communication and this sample it's

823
00:27:16,640 --> 00:27:17,919
not super secret i got it off of

824
00:27:17,919 --> 00:27:19,200
virustotal

825
00:27:19,200 --> 00:27:20,960
you can do that if you have a virustotal

826
00:27:20,960 --> 00:27:22,320
account or you can use something like

827
00:27:22,320 --> 00:27:25,360
mouseshare if you don't and just as a

828
00:27:25,360 --> 00:27:26,559
way to start like kind of getting

829
00:27:26,559 --> 00:27:28,799
through this yourself and this is really

830
00:27:28,799 --> 00:27:30,720
important because this is just shows one

831
00:27:30,720 --> 00:27:31,919
of the ways that we can identify

832
00:27:31,919 --> 00:27:34,080
artifacts but we're still not emulating

833
00:27:34,080 --> 00:27:36,159
we're just looking at strings here

834
00:27:36,159 --> 00:27:37,600
another thing you could do with this you

835
00:27:37,600 --> 00:27:40,159
could throw an md5 on it get this md5

836
00:27:40,159 --> 00:27:42,000
string for the shell code throw it in a

837
00:27:42,000 --> 00:27:44,000
virus or something like that see if it's

838
00:27:44,000 --> 00:27:46,240
already been analyzed by someone else

839
00:27:46,240 --> 00:27:48,480
but we want to bring home the beacon and

840
00:27:48,480 --> 00:27:50,080
we're going to use speakeasy for that so

841
00:27:50,080 --> 00:27:52,159
speakeasy as i talked about earlier was

842
00:27:52,159 --> 00:27:54,000
developed by the reverse engineers of

843
00:27:54,000 --> 00:27:56,080
mandia it is a portable emulator for

844
00:27:56,080 --> 00:27:58,480
both user mode and kernel mode malware

845
00:27:58,480 --> 00:28:01,200
it's really really good at identifying

846
00:28:01,200 --> 00:28:03,039
key artifacts and then you can even take

847
00:28:03,039 --> 00:28:04,880
it a step further when you run it and

848
00:28:04,880 --> 00:28:07,440
you can dump memory from a sample

849
00:28:07,440 --> 00:28:08,960
and then when we look at two examples

850
00:28:08,960 --> 00:28:11,520
here we see an http beacon shell code

851
00:28:11,520 --> 00:28:13,200
being executed against speakeasy and

852
00:28:13,200 --> 00:28:15,520
then an smb sample and when we look at

853
00:28:15,520 --> 00:28:16,640
this

854
00:28:16,640 --> 00:28:19,039
what we're seeing happening here is that

855
00:28:19,039 --> 00:28:21,440
the the shell code is going to open up

856
00:28:21,440 --> 00:28:22,960
is going to load when a net which is

857
00:28:22,960 --> 00:28:24,720
used for internet connections it's going

858
00:28:24,720 --> 00:28:26,720
to open a socket and create a connection

859
00:28:26,720 --> 00:28:29,600
outbound to a 192 address we can see the

860
00:28:29,600 --> 00:28:31,760
uri and we can even see the user agent

861
00:28:31,760 --> 00:28:33,919
string and when you're talking about

862
00:28:33,919 --> 00:28:35,840
identifying this stuff and trying to

863
00:28:35,840 --> 00:28:37,760
identify more

864
00:28:37,760 --> 00:28:39,279
evil in your environment this is just

865
00:28:39,279 --> 00:28:40,559
another way that you can quickly

866
00:28:40,559 --> 00:28:42,320
identify some of the key points to look

867
00:28:42,320 --> 00:28:44,559
for across your network and then we look

868
00:28:44,559 --> 00:28:46,640
at the smb beacon payload that we looked

869
00:28:46,640 --> 00:28:49,120
at before and this is just we see here

870
00:28:49,120 --> 00:28:50,720
it's running virtual alec it's creating

871
00:28:50,720 --> 00:28:52,000
the name pipe

872
00:28:52,000 --> 00:28:53,679
and from there we can start hunting

873
00:28:53,679 --> 00:28:55,600
again and all this is really important

874
00:28:55,600 --> 00:28:58,880
when you talk about being able to

875
00:28:58,880 --> 00:29:01,120
take like just one alert and expand that

876
00:29:01,120 --> 00:29:02,960
identify some artifacts and hunt across

877
00:29:02,960 --> 00:29:04,240
your environment

878
00:29:04,240 --> 00:29:06,240
but we can take this a step further and

879
00:29:06,240 --> 00:29:08,320
we can find evil across

880
00:29:08,320 --> 00:29:10,320
the the great wide world web and what we

881
00:29:10,320 --> 00:29:12,080
can do here is use the analytical points

882
00:29:12,080 --> 00:29:13,600
that we identified previously through

883
00:29:13,600 --> 00:29:15,279
our like investigation and we can

884
00:29:15,279 --> 00:29:17,679
identify some more ways that we can look

885
00:29:17,679 --> 00:29:19,279
and potentially identify this adversary

886
00:29:19,279 --> 00:29:20,880
operating in other places

887
00:29:20,880 --> 00:29:22,799
so one really great service that i like

888
00:29:22,799 --> 00:29:24,880
to do for this is called jarm it's like

889
00:29:24,880 --> 00:29:26,960
a tls fingerprint if you identify

890
00:29:26,960 --> 00:29:28,880
accurate infrastructure you get the tls

891
00:29:28,880 --> 00:29:30,399
charm for that you get the charm for

892
00:29:30,399 --> 00:29:33,520
that that's pretty great http headers

893
00:29:33,520 --> 00:29:35,200
are also another way that you can create

894
00:29:35,200 --> 00:29:38,240
a pivot point ssl certs

895
00:29:38,240 --> 00:29:39,919
that's something we'll talk about when

896
00:29:39,919 --> 00:29:41,200
you when you look at like the default

897
00:29:41,200 --> 00:29:42,559
cert if you throw that into something

898
00:29:42,559 --> 00:29:44,640
like census or showdan you're going to

899
00:29:44,640 --> 00:29:46,399
get a lot of hits if you see some of

900
00:29:46,399 --> 00:29:47,840
those running in your environment

901
00:29:47,840 --> 00:29:49,360
probably should look at that

902
00:29:49,360 --> 00:29:51,440
that is pretty well signatured though

903
00:29:51,440 --> 00:29:53,039
so the cobalt strike server id is

904
00:29:53,039 --> 00:29:55,279
another one when you

905
00:29:55,279 --> 00:29:56,799
get like a license for cobalt strike

906
00:29:56,799 --> 00:29:58,640
your server is going to have a server id

907
00:29:58,640 --> 00:29:59,440
now

908
00:29:59,440 --> 00:30:00,640
when you're running like something like

909
00:30:00,640 --> 00:30:02,720
cracked if you're an adversary that's

910
00:30:02,720 --> 00:30:04,960
not legit and that server id could be

911
00:30:04,960 --> 00:30:07,279
blacklisted so getting that could be a

912
00:30:07,279 --> 00:30:09,279
potential indicator that hey i'm dealing

913
00:30:09,279 --> 00:30:10,240
with something that's not like

914
00:30:10,240 --> 00:30:12,159
potentially a red team and then even the

915
00:30:12,159 --> 00:30:14,559
malleable c2 profile or the malleable pe

916
00:30:14,559 --> 00:30:16,159
profile are other pivot points that you

917
00:30:16,159 --> 00:30:18,159
can use in a lot of different data sets

918
00:30:18,159 --> 00:30:20,559
to identify more badness and when we

919
00:30:20,559 --> 00:30:22,960
look at how do we expand this out we

920
00:30:22,960 --> 00:30:25,200
take our simple we take our one beacon

921
00:30:25,200 --> 00:30:26,799
sample and we're able to use all these

922
00:30:26,799 --> 00:30:29,440
different pivots to identify more evil

923
00:30:29,440 --> 00:30:30,960
and so you can talk about the default

924
00:30:30,960 --> 00:30:32,640
cert in one potential way jarm hash we

925
00:30:32,640 --> 00:30:34,720
talked about that common import hashes

926
00:30:34,720 --> 00:30:36,559
is another way or using the name pipe

927
00:30:36,559 --> 00:30:38,240
that that beacon sample is using like

928
00:30:38,240 --> 00:30:39,840
that beacon sample that we saw earlier

929
00:30:39,840 --> 00:30:41,440
that was using a pretty specific name

930
00:30:41,440 --> 00:30:43,760
pipe and that doesn't look super common

931
00:30:43,760 --> 00:30:45,760
or if you identify the malleable c2

932
00:30:45,760 --> 00:30:46,720
profile

933
00:30:46,720 --> 00:30:48,000
and you have something like virustotal

934
00:30:48,000 --> 00:30:50,000
enterprise what you can do is look for

935
00:30:50,000 --> 00:30:52,159
files that are making like requests on

936
00:30:52,159 --> 00:30:54,880
that same uri and so this kind of just

937
00:30:54,880 --> 00:30:56,559
shows a lot of the different ways that

938
00:30:56,559 --> 00:30:59,679
you can take what you identify from

939
00:30:59,679 --> 00:31:01,679
investigations or hunts and you can

940
00:31:01,679 --> 00:31:03,919
expand that out and grow your data set

941
00:31:03,919 --> 00:31:05,919
to identify more beacon

942
00:31:05,919 --> 00:31:07,519
and so wrapping up i want to give a

943
00:31:07,519 --> 00:31:09,200
couple quick shout outs

944
00:31:09,200 --> 00:31:11,039
so one of my teammates alyssa she

945
00:31:11,039 --> 00:31:13,120
created one of the best

946
00:31:13,120 --> 00:31:15,279
guides i've ever seen for cobalt strike

947
00:31:15,279 --> 00:31:17,440
it's on the top there it's really great

948
00:31:17,440 --> 00:31:18,799
then i'd also like to give a shout out

949
00:31:18,799 --> 00:31:21,360
to two of my teammates van ta and aaron

950
00:31:21,360 --> 00:31:24,000
stevens for their work on spooky rookies

951
00:31:24,000 --> 00:31:26,159
so the fin 12 graduation and then

952
00:31:26,159 --> 00:31:28,080
there's a bunch of different

953
00:31:28,080 --> 00:31:31,440
references here there's one for a

954
00:31:31,440 --> 00:31:33,600
nmap nse script that you can use to pull

955
00:31:33,600 --> 00:31:36,080
beacon configs from servers just note do

956
00:31:36,080 --> 00:31:38,000
it over under trip or tor

957
00:31:38,000 --> 00:31:40,240
don't do that from your network and then

958
00:31:40,240 --> 00:31:42,399
at the very bottom you can see

959
00:31:42,399 --> 00:31:44,640
the link to the gist for the cyber chef

960
00:31:44,640 --> 00:31:46,320
recipe and then you can see the link to

961
00:31:46,320 --> 00:31:48,960
my github for signatures

962
00:31:48,960 --> 00:31:50,720
and i'm going to share the talk on my

963
00:31:50,720 --> 00:31:54,080
github it'll be the same same link

964
00:31:54,080 --> 00:31:56,159
and if you have any questions like about

965
00:31:56,159 --> 00:31:57,279
any of this stuff and you'd like to talk

966
00:31:57,279 --> 00:32:00,159
to me afterwards feel free but from here

967
00:32:00,159 --> 00:32:03,200
anyone have any questions

968
00:32:07,679 --> 00:32:11,320
nope thank you

969
00:32:15,519 --> 00:32:17,600
you

