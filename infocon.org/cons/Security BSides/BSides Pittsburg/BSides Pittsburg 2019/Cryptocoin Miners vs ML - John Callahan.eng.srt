1
00:00:04,450 --> 00:00:08,349
cool guys welcome mostly you look kind

2
00:00:08,349 --> 00:00:09,879
of sort of awake right now end of the

3
00:00:09,879 --> 00:00:13,809
day so welcome I talked ml versus crypto

4
00:00:13,809 --> 00:00:16,239
coin miners I'm gonna go on a little bit

5
00:00:16,239 --> 00:00:17,770
of a soapbox here in a minute about why

6
00:00:17,770 --> 00:00:19,300
machine learning is a dumb term and what

7
00:00:19,300 --> 00:00:21,220
I'm actually doing is just stats

8
00:00:21,220 --> 00:00:24,609
statistical analysis nothing special but

9
00:00:24,609 --> 00:00:25,630
a quick about me my name is John

10
00:00:25,630 --> 00:00:27,039
Callahan I'm a principal abside

11
00:00:27,039 --> 00:00:28,779
consultant at a boutique consulting firm

12
00:00:28,779 --> 00:00:31,210
based out of DC we do a lot of work with

13
00:00:31,210 --> 00:00:33,010
a lot of different people we work with a

14
00:00:33,010 --> 00:00:34,420
bunch of different at five's banks

15
00:00:34,420 --> 00:00:36,609
insurance industry that we're all over

16
00:00:36,609 --> 00:00:39,250
the map I personally like my

17
00:00:39,250 --> 00:00:40,840
bread-and-butter was AB SEK but I also

18
00:00:40,840 --> 00:00:42,309
laid our cloud practice I do a lot of

19
00:00:42,309 --> 00:00:43,750
container security with kubernetes and

20
00:00:43,750 --> 00:00:45,579
openshift and nomad and all that good

21
00:00:45,579 --> 00:00:48,730
stuff also a huge Python fan that's

22
00:00:48,730 --> 00:00:50,710
really my bread and butter is Python but

23
00:00:50,710 --> 00:00:52,239
I've recently transitioned to golang to

24
00:00:52,239 --> 00:00:54,250
is kind of like my alternative I need

25
00:00:54,250 --> 00:00:55,539
something to run fast and needs to run

26
00:00:55,539 --> 00:00:56,859
everywhere all right and go like if I

27
00:00:56,859 --> 00:00:58,329
need to write something quick right in a

28
00:00:58,329 --> 00:01:00,489
Python or if I'm doing any data science

29
00:01:00,489 --> 00:01:02,019
or any math or anything like that I'm

30
00:01:02,019 --> 00:01:05,830
doing Python I do really like math math

31
00:01:05,830 --> 00:01:08,290
is really cool I am terrible at it I

32
00:01:08,290 --> 00:01:10,240
like to call myself a mathematical skid

33
00:01:10,240 --> 00:01:12,460
because most of what I do is I just plug

34
00:01:12,460 --> 00:01:14,110
and chug through numpy and I let that

35
00:01:14,110 --> 00:01:15,700
handle all the heavy lifting for me I

36
00:01:15,700 --> 00:01:17,049
don't really know what I'm doing half

37
00:01:17,049 --> 00:01:20,110
the time I'm also a big metalhead if

38
00:01:20,110 --> 00:01:21,729
anyone out there likes metal wants to

39
00:01:21,729 --> 00:01:26,970
come talk to me afterwards yeah okay so

40
00:01:26,970 --> 00:01:29,530
machine learning is cool I think so

41
00:01:29,530 --> 00:01:31,210
there's gonna be a lot of graphs and

42
00:01:31,210 --> 00:01:32,799
stuff so to light things up beforehand

43
00:01:32,799 --> 00:01:34,170
we're gonna do a lot of memes so

44
00:01:34,170 --> 00:01:36,820
artificial intelligence is dumb and I

45
00:01:36,820 --> 00:01:38,530
mean this is a tech companies in a

46
00:01:38,530 --> 00:01:41,770
nutshell if statement is a machine

47
00:01:41,770 --> 00:01:44,380
learning pulling the hood off of a bit

48
00:01:44,380 --> 00:01:46,840
big if that's a letter artificial

49
00:01:46,840 --> 00:01:50,740
intelligence this is me on the left a

50
00:01:50,740 --> 00:01:52,060
real-life picture from a couple years

51
00:01:52,060 --> 00:01:54,789
ago of a data scientist that bastardized

52
00:01:54,789 --> 00:01:57,100
something or other I'm not a very good

53
00:01:57,100 --> 00:01:58,360
software engineer I'm not very good at

54
00:01:58,360 --> 00:02:00,399
math so I'm kind of a half-breed muggle

55
00:02:00,399 --> 00:02:04,299
of sorts or something like that this was

56
00:02:04,299 --> 00:02:06,880
my personal favorite because again I am

57
00:02:06,880 --> 00:02:08,288
terrified of math and not very good at

58
00:02:08,288 --> 00:02:13,450
it so yeah let's let's get into a little

59
00:02:13,450 --> 00:02:16,950
bit so

60
00:02:16,980 --> 00:02:20,190
as a quick intro so the whole idea of

61
00:02:20,190 --> 00:02:23,460
this talk is to kind of build a very

62
00:02:23,460 --> 00:02:26,400
niche ideas kind of solution in terms of

63
00:02:26,400 --> 00:02:28,920
finding crypto coin miners within an AWS

64
00:02:28,920 --> 00:02:30,900
architecture so within the last couple

65
00:02:30,900 --> 00:02:32,400
years I'm sure everyone here is well

66
00:02:32,400 --> 00:02:33,930
familiar with Bitcoin and all the other

67
00:02:33,930 --> 00:02:35,900
alternative coins that have come out

68
00:02:35,900 --> 00:02:37,800
well it provides a lot of different

69
00:02:37,800 --> 00:02:40,050
things it's what it's really done for

70
00:02:40,050 --> 00:02:41,760
the black cat communities it's allowed -

71
00:02:41,760 --> 00:02:43,350
it's giving you a very direct path from

72
00:02:43,350 --> 00:02:46,440
super compromise to cash payout I don't

73
00:02:46,440 --> 00:02:47,760
have to worry about trying to sell out

74
00:02:47,760 --> 00:02:49,230
your server to a botnet farm or

75
00:02:49,230 --> 00:02:51,480
something like that or doing ad click

76
00:02:51,480 --> 00:02:52,830
farming or anything like that

77
00:02:52,830 --> 00:02:55,020
I can compromise a server turn on a

78
00:02:55,020 --> 00:02:57,060
miner and then immediately start reaping

79
00:02:57,060 --> 00:02:59,130
profits off of it so it's become a huge

80
00:02:59,130 --> 00:03:00,630
attack vector or not an attack vector

81
00:03:00,630 --> 00:03:03,480
but a huge issue from servers that have

82
00:03:03,480 --> 00:03:04,740
become compromised that's what they have

83
00:03:04,740 --> 00:03:06,420
that's what happens to them and all the

84
00:03:06,420 --> 00:03:07,920
sudden their CPU gets throttled your RAM

85
00:03:07,920 --> 00:03:09,630
goes through the roof and and your

86
00:03:09,630 --> 00:03:13,950
server becomes underperforming so I I

87
00:03:13,950 --> 00:03:16,040
went and started looking specifically at

88
00:03:16,040 --> 00:03:18,930
Manero and varium which are very very

89
00:03:18,930 --> 00:03:20,580
much dead now it's a debt coin I started

90
00:03:20,580 --> 00:03:22,980
this research awhile ago specifically

91
00:03:22,980 --> 00:03:25,590
because their CPU my noble coins and

92
00:03:25,590 --> 00:03:27,239
again I'm working with in specifically

93
00:03:27,239 --> 00:03:29,730
in AWS architecture and the reason I

94
00:03:29,730 --> 00:03:32,040
focus on CPU specific coins is because

95
00:03:32,040 --> 00:03:34,080
preventing GPU mining is really easy

96
00:03:34,080 --> 00:03:36,660
just don't let GPU instances run in your

97
00:03:36,660 --> 00:03:38,520
architecture or in your environment like

98
00:03:38,520 --> 00:03:41,190
I can almost guarantee you like 99% of

99
00:03:41,190 --> 00:03:42,300
you out there have no legitimate reason

100
00:03:42,300 --> 00:03:44,340
have a GPU instance running just block

101
00:03:44,340 --> 00:03:45,840
it I mean just turn it use the I am

102
00:03:45,840 --> 00:03:47,430
policies and don't let it run you're

103
00:03:47,430 --> 00:03:48,810
done it's not a threat anymore

104
00:03:48,810 --> 00:03:50,670
so I really wanted to focus on CPU stuff

105
00:03:50,670 --> 00:03:53,190
what happens if your your m5d large gets

106
00:03:53,190 --> 00:03:54,720
compromised and starts running is a

107
00:03:54,720 --> 00:03:59,190
variant minor a minor a minor so that's

108
00:03:59,190 --> 00:04:00,360
one part of it why I wanted to look in

109
00:04:00,360 --> 00:04:02,340
this the other piece too is AWS uses

110
00:04:02,340 --> 00:04:06,030
what's called VPC flow logs I'll get

111
00:04:06,030 --> 00:04:07,260
into a little bit more of what flow logs

112
00:04:07,260 --> 00:04:09,300
actually are suffice to say they are

113
00:04:09,300 --> 00:04:11,670
packet captures to a degree of the the

114
00:04:11,670 --> 00:04:13,950
network traffic that's going in within a

115
00:04:13,950 --> 00:04:15,959
particular V PC if you're not familiar

116
00:04:15,959 --> 00:04:18,029
with AWS a V PC is just your veal and

117
00:04:18,029 --> 00:04:21,390
it's your virtual private virtual

118
00:04:21,390 --> 00:04:22,500
private something I can route the C

119
00:04:22,500 --> 00:04:24,450
stands for its reveal and see you

120
00:04:24,450 --> 00:04:26,970
segregate it into your subnets and

121
00:04:26,970 --> 00:04:29,009
whatnot

122
00:04:29,009 --> 00:04:32,159
so mining traffic is is also very

123
00:04:32,159 --> 00:04:35,159
pattern heavy pattern rich and which

124
00:04:35,159 --> 00:04:36,360
makes it an excellent candidate for

125
00:04:36,360 --> 00:04:38,460
using different techniques to try and

126
00:04:38,460 --> 00:04:40,710
flag it as opposed to flag it out from

127
00:04:40,710 --> 00:04:42,360
what would be considered normal traffic

128
00:04:42,360 --> 00:04:45,180
or not mining traffic so I wanted to

129
00:04:45,180 --> 00:04:46,770
look in and see if it's possible to

130
00:04:46,770 --> 00:04:49,530
build an IDs it's not really an IDs I'm

131
00:04:49,530 --> 00:04:52,069
just looking for one particular thing

132
00:04:52,069 --> 00:04:54,750
it's also worth noting that if you are

133
00:04:54,750 --> 00:04:56,099
familiar with AWS there's this thing

134
00:04:56,099 --> 00:04:56,849
called guard duty

135
00:04:56,849 --> 00:04:59,159
that will do supposedly do this for you

136
00:04:59,159 --> 00:05:00,780
it will check to see if you have any

137
00:05:00,780 --> 00:05:02,909
miners running on your network the only

138
00:05:02,909 --> 00:05:05,009
thing it's doing is checking domain

139
00:05:05,009 --> 00:05:07,409
lookups and checking against a known bad

140
00:05:07,409 --> 00:05:11,190
IP list that's it so the these all you

141
00:05:11,190 --> 00:05:12,509
have to do to get around that is just

142
00:05:12,509 --> 00:05:14,190
set up a mining pool on your own domain

143
00:05:14,190 --> 00:05:16,139
set up your own private mining pool that

144
00:05:16,139 --> 00:05:18,330
hasn't been flagged as a bad IP that's

145
00:05:18,330 --> 00:05:20,280
not using a publicly known domain name

146
00:05:20,280 --> 00:05:21,930
probably no mining domain name and

147
00:05:21,930 --> 00:05:23,520
you're done you just bypass guard duty

148
00:05:23,520 --> 00:05:25,440
that was easy as that so I want to build

149
00:05:25,440 --> 00:05:27,030
a more robust solution that was able

150
00:05:27,030 --> 00:05:28,440
that was built up off the traffic

151
00:05:28,440 --> 00:05:30,060
patterns itself I said it something just

152
00:05:30,060 --> 00:05:34,919
as a key value lookup so I was I said

153
00:05:34,919 --> 00:05:36,389
about and started collecting data

154
00:05:36,389 --> 00:05:38,310
because I mean when I'm doing any kind

155
00:05:38,310 --> 00:05:39,960
of like pattern recognition or machine

156
00:05:39,960 --> 00:05:41,789
learning type stuff you have to build

157
00:05:41,789 --> 00:05:43,650
your data set to begin with so I went

158
00:05:43,650 --> 00:05:46,469
and took 12 different crypto coin miners

159
00:05:46,469 --> 00:05:48,060
stood them up on a variety of different

160
00:05:48,060 --> 00:05:49,979
sea for large or sea for instances

161
00:05:49,979 --> 00:05:52,440
they're large through there like 4x

162
00:05:52,440 --> 00:05:54,000
large or whatever the largest one is one

163
00:05:54,000 --> 00:05:58,710
of each and set up Manero miner and let

164
00:05:58,710 --> 00:06:00,779
just let it rip for 24 hours and capture

165
00:06:00,779 --> 00:06:02,729
the BBC flow logs and just made a note

166
00:06:02,729 --> 00:06:05,789
of the private IP of each miner that I'm

167
00:06:05,789 --> 00:06:07,379
sorry the public IP of each miner within

168
00:06:07,379 --> 00:06:10,949
the the VPC I also got lucky enough I

169
00:06:10,949 --> 00:06:12,779
spent a couple weeks like going into

170
00:06:12,779 --> 00:06:14,190
every slack channel that I'm in begging

171
00:06:14,190 --> 00:06:16,770
everyone I knew who was within AWS is

172
00:06:16,770 --> 00:06:17,909
like can you please just send me your

173
00:06:17,909 --> 00:06:19,770
BBC flow logs I promise I'm not gonna do

174
00:06:19,770 --> 00:06:21,389
anything with it I know it's kind of

175
00:06:21,389 --> 00:06:23,810
sensitive but just give me your data

176
00:06:23,810 --> 00:06:25,889
finally someone was willing to give me a

177
00:06:25,889 --> 00:06:27,960
good chunk of their fee BC flow lies

178
00:06:27,960 --> 00:06:29,069
they just they just dumped the whole

179
00:06:29,069 --> 00:06:31,080
bucket to me which was really generous

180
00:06:31,080 --> 00:06:32,250
of them and pretty much enabled all this

181
00:06:32,250 --> 00:06:35,159
research it was about three weeks worth

182
00:06:35,159 --> 00:06:38,219
of traffic which turned out to be about

183
00:06:38,219 --> 00:06:41,700
a thousand different machines which 38

184
00:06:41,700 --> 00:06:43,470
and different eunuch unique connectivity

185
00:06:43,470 --> 00:06:46,730
streams across those three weeks

186
00:06:47,310 --> 00:06:50,010
so those three metrics at the bottom

187
00:06:50,010 --> 00:06:51,060
don't make any sense we'll get into that

188
00:06:51,060 --> 00:06:56,850
in a second so vbc flow logs what they

189
00:06:56,850 --> 00:06:59,640
are is they're aggregate five tuple P

190
00:06:59,640 --> 00:07:01,860
caps so your typical five tuple P caps

191
00:07:01,860 --> 00:07:03,810
is your source that's your source IP

192
00:07:03,810 --> 00:07:05,400
address your destination IP address your

193
00:07:05,400 --> 00:07:06,900
source port your destination port and

194
00:07:06,900 --> 00:07:10,500
the amount of data center or well rather

195
00:07:10,500 --> 00:07:13,860
the packet itself in this case what AWS

196
00:07:13,860 --> 00:07:15,930
does is it aggregates all the traffic

197
00:07:15,930 --> 00:07:17,730
that occurs over that unique connection

198
00:07:17,730 --> 00:07:20,400
between each source IP in port and

199
00:07:20,400 --> 00:07:22,410
destination IP port and then collects

200
00:07:22,410 --> 00:07:23,910
the amount of packets of that have been

201
00:07:23,910 --> 00:07:26,280
sent and the size of the packets that

202
00:07:26,280 --> 00:07:28,110
have been sent and over those 10-minute

203
00:07:28,110 --> 00:07:30,240
windows it dumps that aggregate into

204
00:07:30,240 --> 00:07:34,470
either cloud watch or an s3 bucket which

205
00:07:34,470 --> 00:07:36,180
is which again provides an interesting

206
00:07:36,180 --> 00:07:38,010
challenge because I don't have raw pcap

207
00:07:38,010 --> 00:07:40,380
data to work against this is a good

208
00:07:40,380 --> 00:07:41,490
thing because I know I can build my

209
00:07:41,490 --> 00:07:42,870
models using far less data instead of

210
00:07:42,870 --> 00:07:44,580
having to work off of hundreds of

211
00:07:44,580 --> 00:07:46,470
gigabytes worth of pcaps I can work off

212
00:07:46,470 --> 00:07:48,360
one or two gigabytes worth of VPC flow

213
00:07:48,360 --> 00:07:51,390
logs but also provides a unique

214
00:07:51,390 --> 00:07:52,890
challenge in that I have to go back and

215
00:07:52,890 --> 00:07:55,530
rebuild the TCP streams since you end up

216
00:07:55,530 --> 00:07:57,900
with two log entries for each TCP stream

217
00:07:57,900 --> 00:07:59,490
because you have TCPS or bi-directional

218
00:07:59,490 --> 00:08:03,420
you have one for each direction but the

219
00:08:03,420 --> 00:08:04,950
vbc flow log looks like this it's a

220
00:08:04,950 --> 00:08:08,070
simple space delimited single line entry

221
00:08:08,070 --> 00:08:11,610
broken down with the the second bottom

222
00:08:11,610 --> 00:08:12,780
line gives you what each fields

223
00:08:12,780 --> 00:08:15,240
definition is most of that is pretty

224
00:08:15,240 --> 00:08:17,160
irrelevant to us

225
00:08:17,160 --> 00:08:18,660
but the things that are important again

226
00:08:18,660 --> 00:08:21,060
are the IPS the port's the packets and

227
00:08:21,060 --> 00:08:24,960
the data the amount of data so the first

228
00:08:24,960 --> 00:08:27,180
thing we can do is just filter out

229
00:08:27,180 --> 00:08:29,040
anything that is reject on it so that

230
00:08:29,040 --> 00:08:31,440
second last field there that action is

231
00:08:31,440 --> 00:08:35,099
either reject or accept and that the

232
00:08:35,099 --> 00:08:38,520
reject entries happen when a particular

233
00:08:38,520 --> 00:08:43,080
when a network connection is tried to

234
00:08:43,080 --> 00:08:45,570
establish but it's blocked by either an

235
00:08:45,570 --> 00:08:47,670
apple or a security group so if I try to

236
00:08:47,670 --> 00:08:49,410
SSH into a box that doesn't have a

237
00:08:49,410 --> 00:08:51,480
public security group it'll generate a

238
00:08:51,480 --> 00:08:54,060
reject vbc flow log entry or if I try to

239
00:08:54,060 --> 00:08:54,920
get out of an

240
00:08:54,920 --> 00:08:57,769
and there's no there's an Apple that's

241
00:08:57,769 --> 00:08:59,750
brought blocking it it'll get filtered

242
00:08:59,750 --> 00:09:02,269
by reject so since I'm active looking

243
00:09:02,269 --> 00:09:04,160
for active mining traffic it's easiest

244
00:09:04,160 --> 00:09:06,019
or it's very easy just to filter all

245
00:09:06,019 --> 00:09:07,700
that out right away I don't care about

246
00:09:07,700 --> 00:09:09,380
blocked mining traffic right now

247
00:09:09,380 --> 00:09:11,000
specifically looking at actively mining

248
00:09:11,000 --> 00:09:15,350
traffic the other thing I can filter off

249
00:09:15,350 --> 00:09:16,940
right off the bat is the proto field the

250
00:09:16,940 --> 00:09:20,630
protocol field so that's the fifth the

251
00:09:20,630 --> 00:09:23,810
last one that that's six six and three

252
00:09:23,810 --> 00:09:25,570
that's six right there is the protocol

253
00:09:25,570 --> 00:09:29,120
six corresponds to TCP so I want to look

254
00:09:29,120 --> 00:09:30,829
for all the TCP entries so again I just

255
00:09:30,829 --> 00:09:33,139
dumped an ignore every entry that

256
00:09:33,139 --> 00:09:35,690
doesn't have a six for the protocol and

257
00:09:35,690 --> 00:09:37,490
right off the bat that that filters out

258
00:09:37,490 --> 00:09:38,990
a bunch of my traffic so that makes

259
00:09:38,990 --> 00:09:41,029
things very easy to just cut out a lot

260
00:09:41,029 --> 00:09:45,920
of the noise so originally I was going

261
00:09:45,920 --> 00:09:51,500
to organize by IP ports IPS imports as

262
00:09:51,500 --> 00:09:53,180
opposed to just IP addresses when

263
00:09:53,180 --> 00:09:55,970
rebuilding this the problem is is that

264
00:09:55,970 --> 00:09:57,529
due to the ephemeral ports on the client

265
00:09:57,529 --> 00:09:59,360
side of the connection can cause issues

266
00:09:59,360 --> 00:10:01,459
so over the course of a ten minute

267
00:10:01,459 --> 00:10:03,470
period a mining client might end up

268
00:10:03,470 --> 00:10:05,839
using three different ephemeral ports

269
00:10:05,839 --> 00:10:07,699
which can break the the

270
00:10:07,699 --> 00:10:09,110
pattern-recognition unless I'm able to

271
00:10:09,110 --> 00:10:11,959
rebuild and say okay I have is using

272
00:10:11,959 --> 00:10:13,399
this ephemeral port for three minutes

273
00:10:13,399 --> 00:10:14,959
and this ephemeral port performance and

274
00:10:14,959 --> 00:10:16,130
this third one for another three minutes

275
00:10:16,130 --> 00:10:18,260
which is a pain in the ass to aggregate

276
00:10:18,260 --> 00:10:19,970
and requires a lot of CPU processing Pat

277
00:10:19,970 --> 00:10:23,000
or a lot of processing power so instead

278
00:10:23,000 --> 00:10:24,589
I just aggregated things by unique IP

279
00:10:24,589 --> 00:10:26,209
addresses and just analyze things that

280
00:10:26,209 --> 00:10:31,190
way and then I also in order to to make

281
00:10:31,190 --> 00:10:33,110
sure I was treating the same thing as a

282
00:10:33,110 --> 00:10:35,120
source I went and checked to see for

283
00:10:35,120 --> 00:10:39,319
each IP address was it a an AWS owned IP

284
00:10:39,319 --> 00:10:40,910
address if it was I treated that as a

285
00:10:40,910 --> 00:10:42,920
source or if it was a private IP address

286
00:10:42,920 --> 00:10:46,579
within the AWS IP space or a private IP

287
00:10:46,579 --> 00:10:48,110
address in the private IP space I

288
00:10:48,110 --> 00:10:53,269
treated that as a source and from there

289
00:10:53,269 --> 00:10:55,160
I went and rebuild rebuilt everything

290
00:10:55,160 --> 00:10:58,399
and reallocated each BBC flow log entry

291
00:10:58,399 --> 00:11:00,139
so the last piece you have to do which I

292
00:11:00,139 --> 00:11:02,240
should have included on here is you also

293
00:11:02,240 --> 00:11:05,029
see there's a start and end field the

294
00:11:05,029 --> 00:11:07,519
third and fourth the last field you can

295
00:11:07,519 --> 00:11:08,810
use those to actually

296
00:11:08,810 --> 00:11:11,089
correlate which two entries belong to

297
00:11:11,089 --> 00:11:12,860
the same TCP stream at a given 10 minute

298
00:11:12,860 --> 00:11:15,649
interval so you take those going back

299
00:11:15,649 --> 00:11:17,029
together and now you have the total data

300
00:11:17,029 --> 00:11:19,040
sent across one TCP stream over ten

301
00:11:19,040 --> 00:11:22,189
minutes and then after all of that you

302
00:11:22,189 --> 00:11:24,769
actually have you actually have some

303
00:11:24,769 --> 00:11:26,509
working data to work with I can go back

304
00:11:26,509 --> 00:11:28,100
and say all right for the first 10

305
00:11:28,100 --> 00:11:30,589
minutes this box is online I sent it

306
00:11:30,589 --> 00:11:32,660
sent a hundred packets to this IP and

307
00:11:32,660 --> 00:11:34,879
receive 30 packets to this IP over the

308
00:11:34,879 --> 00:11:36,259
next 10 minutes it sent 40 packets

309
00:11:36,259 --> 00:11:39,620
received 20 and from there I started

310
00:11:39,620 --> 00:11:41,120
building out my data set so I started

311
00:11:41,120 --> 00:11:44,089
building out my models so there's really

312
00:11:44,089 --> 00:11:45,800
from all that information we have we

313
00:11:45,800 --> 00:11:47,209
have eight different features that we

314
00:11:47,209 --> 00:11:49,459
can extract the number of bytes that are

315
00:11:49,459 --> 00:11:51,050
sent the number of packets that are sent

316
00:11:51,050 --> 00:11:52,879
the number of unique source and

317
00:11:52,879 --> 00:11:54,889
destination ports which I didn't end up

318
00:11:54,889 --> 00:11:56,000
using for anything but it's there if I

319
00:11:56,000 --> 00:11:57,740
need it and then the actual length of

320
00:11:57,740 --> 00:12:02,839
the communication which again the length

321
00:12:02,839 --> 00:12:04,220
of communication I didn't really use for

322
00:12:04,220 --> 00:12:05,180
anything either

323
00:12:05,180 --> 00:12:07,670
I focused primarily on the number of

324
00:12:07,670 --> 00:12:12,319
bytes and packets that were sent and my

325
00:12:12,319 --> 00:12:14,540
general strategy was to just graph the

326
00:12:14,540 --> 00:12:16,699
data and eyeball patterns and just see

327
00:12:16,699 --> 00:12:18,470
like what stood out to me what what can

328
00:12:18,470 --> 00:12:21,889
i quantify and find turn into an

329
00:12:21,889 --> 00:12:23,779
algorithm or function and filter against

330
00:12:23,779 --> 00:12:27,319
everything else and then I would just as

331
00:12:27,319 --> 00:12:28,879
I would build these models I'd go back

332
00:12:28,879 --> 00:12:30,980
and run all my test data through it and

333
00:12:30,980 --> 00:12:33,500
see what got passed if I had if all my

334
00:12:33,500 --> 00:12:35,029
test data was coming back and saying oh

335
00:12:35,029 --> 00:12:36,379
this matches this model it's not a good

336
00:12:36,379 --> 00:12:38,059
model so I go back and look at something

337
00:12:38,059 --> 00:12:40,269
else

338
00:12:40,870 --> 00:12:43,100
so attempt zero was just a look at the

339
00:12:43,100 --> 00:12:45,620
number of unique destination ports the

340
00:12:45,620 --> 00:12:49,189
idea being that if a client was

341
00:12:49,189 --> 00:12:51,259
interacting or a compromised client was

342
00:12:51,259 --> 00:12:53,149
interacting with a mining client it was

343
00:12:53,149 --> 00:12:54,559
always going to interact with the same

344
00:12:54,559 --> 00:12:56,389
remote port such as five five five five

345
00:12:56,389 --> 00:12:58,309
six six six six whatever that the usual

346
00:12:58,309 --> 00:12:59,449
mining ports if you're familiar with

347
00:12:59,449 --> 00:13:04,250
that at all with you and as well as the

348
00:13:04,250 --> 00:13:05,269
fact that there'd be a lot of ephemeral

349
00:13:05,269 --> 00:13:09,259
source ports this didn't really work too

350
00:13:09,259 --> 00:13:12,439
well surprisingly it turned out that in

351
00:13:12,439 --> 00:13:15,050
my test data the destination IP address

352
00:13:15,050 --> 00:13:16,610
has still ended up with a lot of

353
00:13:16,610 --> 00:13:18,769
single-digit port numbers or not single

354
00:13:18,769 --> 00:13:20,089
data port numbers with a number of ports

355
00:13:20,089 --> 00:13:22,070
number of unique ports to use or one

356
00:13:22,070 --> 00:13:24,829
- so this didn't actually end up being a

357
00:13:24,829 --> 00:13:26,329
very good strategy so I just went back

358
00:13:26,329 --> 00:13:28,269
to the drawing board and try it again I

359
00:13:28,269 --> 00:13:30,740
actually had a lot of failures

360
00:13:30,740 --> 00:13:32,180
I don't include all of them here or

361
00:13:32,180 --> 00:13:37,550
maybe here all day so moving on I I went

362
00:13:37,550 --> 00:13:40,160
and tried to again graph my data and

363
00:13:40,160 --> 00:13:42,319
actually see what was going on with it

364
00:13:42,319 --> 00:13:43,730
is there any kind of clustering is there

365
00:13:43,730 --> 00:13:47,089
any kind of any discernible patterns

366
00:13:47,089 --> 00:13:50,470
that I can make out from the data itself

367
00:13:50,470 --> 00:13:55,339
so graphing them out this is a couple of

368
00:13:55,339 --> 00:13:57,019
them I think it's only like six of the

369
00:13:57,019 --> 00:13:58,459
actual mining clients that I sent out

370
00:13:58,459 --> 00:14:01,130
looped over through a gif on the x-axis

371
00:14:01,130 --> 00:14:02,750
you have the number of source bytes and

372
00:14:02,750 --> 00:14:04,040
then on the y-axis you have the number

373
00:14:04,040 --> 00:14:07,370
of source packets so just looking at

374
00:14:07,370 --> 00:14:09,139
this we can already tell there's some

375
00:14:09,139 --> 00:14:12,139
strong patterns going on here for one

376
00:14:12,139 --> 00:14:13,699
there's a strong linear correlation

377
00:14:13,699 --> 00:14:15,740
between all the data it follows a pretty

378
00:14:15,740 --> 00:14:17,930
straight straight line pattern right up

379
00:14:17,930 --> 00:14:19,610
the board on top of that there's also

380
00:14:19,610 --> 00:14:21,259
some striations that are being built in

381
00:14:21,259 --> 00:14:23,209
there these like clustered lines of

382
00:14:23,209 --> 00:14:25,850
points I think I can pause this yeah so

383
00:14:25,850 --> 00:14:26,720
you can see there's there's these

384
00:14:26,720 --> 00:14:28,459
striations that are coming up through

385
00:14:28,459 --> 00:14:29,990
the pattern through the data which is

386
00:14:29,990 --> 00:14:32,360
like that's a probably a pretty unique

387
00:14:32,360 --> 00:14:33,529
pattern you're not going to see that and

388
00:14:33,529 --> 00:14:35,959
just other randomly generated network

389
00:14:35,959 --> 00:14:37,040
traffic so it's probably gonna be a

390
00:14:37,040 --> 00:14:38,120
really good thing to work against

391
00:14:38,120 --> 00:14:40,160
however trying to quantify that's a

392
00:14:40,160 --> 00:14:42,110
little bit tricky and trying to quantify

393
00:14:42,110 --> 00:14:43,790
that and then build a model offer that

394
00:14:43,790 --> 00:14:46,880
runs quick is even harder so I set that

395
00:14:46,880 --> 00:14:50,180
aside for the time being if we look at

396
00:14:50,180 --> 00:14:52,399
the destination metrics again we see

397
00:14:52,399 --> 00:14:56,149
some correlation it's a lot looser the

398
00:14:56,149 --> 00:14:59,240
they're not hugging a straight line

399
00:14:59,240 --> 00:15:01,389
nearly as tightly as the other ones are

400
00:15:01,389 --> 00:15:04,459
but again you do get what looks to be

401
00:15:04,459 --> 00:15:06,620
kind of not a striation but like a

402
00:15:06,620 --> 00:15:08,779
honeycomb pattern so again we're seeing

403
00:15:08,779 --> 00:15:10,519
some sort of structure to this data

404
00:15:10,519 --> 00:15:12,319
which is a very good thing structure is

405
00:15:12,319 --> 00:15:13,519
what we want structure is what still

406
00:15:13,519 --> 00:15:17,389
lets us filter out noise and this is

407
00:15:17,389 --> 00:15:18,949
this is for the destination bytes and

408
00:15:18,949 --> 00:15:21,920
source our destination bites and packets

409
00:15:21,920 --> 00:15:25,250
rather and then if you go through and

410
00:15:25,250 --> 00:15:27,920
you map out the opposite of that so the

411
00:15:27,920 --> 00:15:29,120
number of source bytes versus the number

412
00:15:29,120 --> 00:15:30,949
of destination packets you don't really

413
00:15:30,949 --> 00:15:33,410
get much of anything again

414
00:15:33,410 --> 00:15:40,800
whoops you get the same kind of

415
00:15:40,800 --> 00:15:42,210
honeycomb pattern but not nearly as

416
00:15:42,210 --> 00:15:46,320
tightly but oh no this one is where you

417
00:15:46,320 --> 00:15:51,750
get it yeah so you get the same kind of

418
00:15:51,750 --> 00:15:53,760
striation / honeycomb pattern going on

419
00:15:53,760 --> 00:15:56,910
here as well but correlation is not

420
00:15:56,910 --> 00:15:59,520
there really at all you you're getting

421
00:15:59,520 --> 00:16:01,110
much more close closer to an oval than

422
00:16:01,110 --> 00:16:04,440
anything else and then the same goes for

423
00:16:04,440 --> 00:16:09,180
when you when you swap a new source

424
00:16:09,180 --> 00:16:14,220
packets versus destination packets so

425
00:16:14,220 --> 00:16:15,750
suffice to say we do have something to

426
00:16:15,750 --> 00:16:17,460
work off of we've got some strong

427
00:16:17,460 --> 00:16:19,860
clustering and some strong very clear

428
00:16:19,860 --> 00:16:22,080
linear aggression going on between all

429
00:16:22,080 --> 00:16:24,600
this data the strongest between being

430
00:16:24,600 --> 00:16:26,220
between the source back into the source

431
00:16:26,220 --> 00:16:28,770
bites but clearly not between all of

432
00:16:28,770 --> 00:16:30,900
them again we also have the striation

433
00:16:30,900 --> 00:16:34,620
pattern occurring weirdly I didn't point

434
00:16:34,620 --> 00:16:36,060
this out before there's also points at 0

435
00:16:36,060 --> 00:16:39,210
0 you might not be able to see this but

436
00:16:39,210 --> 00:16:41,820
down here in the corner there are points

437
00:16:41,820 --> 00:16:45,060
at 0 0 which is a little bizarre that

438
00:16:45,060 --> 00:16:46,440
what that's telling me is over a 10

439
00:16:46,440 --> 00:16:48,390
minute 10 minute period for whatever

440
00:16:48,390 --> 00:16:52,200
reason my client wasn't sending any

441
00:16:52,200 --> 00:16:54,150
packets or any data for 10 minutes

442
00:16:54,150 --> 00:16:56,970
straight it's likely that the pool went

443
00:16:56,970 --> 00:16:59,880
down for a period of time and it just

444
00:16:59,880 --> 00:17:02,520
and it's not actually zero but very very

445
00:17:02,520 --> 00:17:05,220
close to it I don't actually know I

446
00:17:05,220 --> 00:17:08,040
didn't monitor these miners at all I set

447
00:17:08,040 --> 00:17:09,780
him up and Senator alarm on my phone for

448
00:17:09,780 --> 00:17:11,099
24 hours to come back and turn it back

449
00:17:11,099 --> 00:17:14,010
off I didn't watch them at all you can

450
00:17:14,010 --> 00:17:15,900
also set up like backup mine or back up

451
00:17:15,900 --> 00:17:17,640
pools in your mining so if your pool

452
00:17:17,640 --> 00:17:18,900
does go down you switch to another one

453
00:17:18,900 --> 00:17:20,520
but I didn't explicitly didn't want to

454
00:17:20,520 --> 00:17:22,050
do that I wanted mine against the same

455
00:17:22,050 --> 00:17:23,550
target for a long period of time to get

456
00:17:23,550 --> 00:17:27,140
very clean data set to work against

457
00:17:27,140 --> 00:17:28,980
suffice to say I don't know why that

458
00:17:28,980 --> 00:17:30,000
happened and I haven't gone back to

459
00:17:30,000 --> 00:17:32,430
really investigate it at all does come

460
00:17:32,430 --> 00:17:34,220
back to bite me in the ass a little bit

461
00:17:34,220 --> 00:17:36,780
so building model first thing I did was

462
00:17:36,780 --> 00:17:41,340
focus on the clustering so we have some

463
00:17:41,340 --> 00:17:42,960
very some various against a very strong

464
00:17:42,960 --> 00:17:44,940
clustering going on on the source

465
00:17:44,940 --> 00:17:47,010
metrics I

466
00:17:47,010 --> 00:17:48,660
so what I decided to do was build a

467
00:17:48,660 --> 00:17:50,820
convex hull is anyone here actually

468
00:17:50,820 --> 00:17:52,200
involved with machine learning or data

469
00:17:52,200 --> 00:17:53,720
science at all

470
00:17:53,720 --> 00:17:56,820
two people cool so this is kind of

471
00:17:56,820 --> 00:17:59,070
similar to a one class SVM except I

472
00:17:59,070 --> 00:18:00,330
built this before I knew what a one

473
00:18:00,330 --> 00:18:02,940
class SVM was so I built a convex hull I

474
00:18:02,940 --> 00:18:05,760
should probably go back and fix that so

475
00:18:05,760 --> 00:18:09,690
essentially what I did was all right so

476
00:18:09,690 --> 00:18:10,830
well if you don't know what a convex

477
00:18:10,830 --> 00:18:12,450
hull is if you take a point cloud and

478
00:18:12,450 --> 00:18:15,120
you draw the hull around it you have a

479
00:18:15,120 --> 00:18:17,790
convex hull as opposed to the concave

480
00:18:17,790 --> 00:18:20,400
hull and again I didn't implement the

481
00:18:20,400 --> 00:18:22,740
math for this I called psych it dot

482
00:18:22,740 --> 00:18:24,510
convex hull and then pass my points in

483
00:18:24,510 --> 00:18:26,340
and I got a whole back because I'm

484
00:18:26,340 --> 00:18:30,180
really good at math like that so what I

485
00:18:30,180 --> 00:18:31,890
did is I took those points and I built a

486
00:18:31,890 --> 00:18:34,380
convex hull around it and I used that as

487
00:18:34,380 --> 00:18:37,020
my first model and I started taking my

488
00:18:37,020 --> 00:18:38,520
test data and was feeding it through

489
00:18:38,520 --> 00:18:40,800
this defined hull to see all right what

490
00:18:40,800 --> 00:18:42,360
kind of test data do I have that exists

491
00:18:42,360 --> 00:18:44,460
within this this hull that I've defined

492
00:18:44,460 --> 00:18:47,940
this polygon did the same thing for the

493
00:18:47,940 --> 00:18:53,160
destination metrics so I come back III

494
00:18:53,160 --> 00:18:55,830
didn't do 100% members so I prayed

495
00:18:55,830 --> 00:18:59,070
against membership rate so when I took a

496
00:18:59,070 --> 00:19:02,310
set of test data and pass it through

497
00:19:02,310 --> 00:19:03,900
here I check to see how many of the

498
00:19:03,900 --> 00:19:05,760
points relied with or how many of the

499
00:19:05,760 --> 00:19:07,260
points were within the convex hull

500
00:19:07,260 --> 00:19:09,600
itself and defined that as the

501
00:19:09,600 --> 00:19:12,030
membership rate I didn't want to do 100%

502
00:19:12,030 --> 00:19:14,250
membership rate and rip things out if

503
00:19:14,250 --> 00:19:15,360
they weren't a hundred percent because I

504
00:19:15,360 --> 00:19:16,530
didn't want to have it caused any false

505
00:19:16,530 --> 00:19:19,740
positives so I picked 98% completely

506
00:19:19,740 --> 00:19:21,090
arbitrarily just to see what would

507
00:19:21,090 --> 00:19:28,610
happen so with a 98% membership rate so

508
00:19:28,610 --> 00:19:31,410
yes I have a slide out of order here

509
00:19:31,410 --> 00:19:32,100
awesome

510
00:19:32,100 --> 00:19:36,630
well so what I'm actually doing isn't

511
00:19:36,630 --> 00:19:40,170
two dimensional convex hulls like these

512
00:19:40,170 --> 00:19:41,880
graphs indicate they're actually four

513
00:19:41,880 --> 00:19:42,840
dimensional I build a four dimensional

514
00:19:42,840 --> 00:19:45,660
convex hull which I can't graph because

515
00:19:45,660 --> 00:19:48,260
we live in a three-dimensional world so

516
00:19:48,260 --> 00:19:51,420
but because defining a convex hold of

517
00:19:51,420 --> 00:19:53,640
depends on Euclidean distances you can

518
00:19:53,640 --> 00:19:55,110
define a four dimensional convex hull

519
00:19:55,110 --> 00:19:57,150
which is exactly what I did with both

520
00:19:57,150 --> 00:19:57,810
the source and the destination

521
00:19:57,810 --> 00:19:59,960
destination metrics and then

522
00:19:59,960 --> 00:20:01,610
fed all the test data through that as

523
00:20:01,610 --> 00:20:03,560
opposed to running building two separate

524
00:20:03,560 --> 00:20:05,180
models and then running things through

525
00:20:05,180 --> 00:20:07,040
it twice I have one model and running it

526
00:20:07,040 --> 00:20:14,990
all through once this is this works in

527
00:20:14,990 --> 00:20:16,550
really low dimensions I'm only using

528
00:20:16,550 --> 00:20:18,110
four different dimensions so that makes

529
00:20:18,110 --> 00:20:20,000
things really easy to do if you ever

530
00:20:20,000 --> 00:20:21,860
tried this technique against like real

531
00:20:21,860 --> 00:20:23,780
data sets that like data scientists work

532
00:20:23,780 --> 00:20:25,040
with that have like thousands of

533
00:20:25,040 --> 00:20:27,950
dimensions this quickly falls apart due

534
00:20:27,950 --> 00:20:28,820
to though it's called the curse of

535
00:20:28,820 --> 00:20:31,730
dimensionality so if you're ever getting

536
00:20:31,730 --> 00:20:33,260
into this at all I would highly

537
00:20:33,260 --> 00:20:34,580
recommend looking that up and being

538
00:20:34,580 --> 00:20:36,260
aware of that anytime we're trying to

539
00:20:36,260 --> 00:20:39,560
build any of these models the curse of

540
00:20:39,560 --> 00:20:41,750
dimensionality basically states that as

541
00:20:41,750 --> 00:20:44,180
your dimensions linearly increase the

542
00:20:44,180 --> 00:20:45,710
amount of data you need to really

543
00:20:45,710 --> 00:20:47,360
represent that field increases

544
00:20:47,360 --> 00:20:50,450
exponentially so you need a lot if you

545
00:20:50,450 --> 00:20:52,520
have a hundred mentions you need a lot

546
00:20:52,520 --> 00:20:54,500
of data to properly represent the space

547
00:20:54,500 --> 00:20:57,830
within all hundred dimensions because

548
00:20:57,830 --> 00:20:59,000
I'm working in four I don't really need

549
00:20:59,000 --> 00:21:02,930
that much so it works out fine for me so

550
00:21:02,930 --> 00:21:06,100
running it through I end up with the

551
00:21:06,100 --> 00:21:09,530
some false positives I'm sorry this is a

552
00:21:09,530 --> 00:21:12,020
true negative so this is an example of a

553
00:21:12,020 --> 00:21:13,820
data set that got filtered out so this

554
00:21:13,820 --> 00:21:17,360
is a set of my test data that came back

555
00:21:17,360 --> 00:21:20,180
and it had under a 98% membership rate

556
00:21:20,180 --> 00:21:21,650
and I mean just looking at this you can

557
00:21:21,650 --> 00:21:24,230
just tell the the points are nothing

558
00:21:24,230 --> 00:21:25,700
like what we saw for the mining data

559
00:21:25,700 --> 00:21:27,650
itself this is clearly something very

560
00:21:27,650 --> 00:21:32,330
different and we came back and I

561
00:21:32,330 --> 00:21:35,570
filtered 38,000 streams down the 19 not

562
00:21:35,570 --> 00:21:37,550
nearly as good as I was hoping it'd be

563
00:21:37,550 --> 00:21:40,280
that's a 50% success rate that's I mean

564
00:21:40,280 --> 00:21:41,120
that's terrible

565
00:21:41,120 --> 00:21:42,680
I mean it's not bad for a first try but

566
00:21:42,680 --> 00:21:44,930
overall 50% is not good you can't do

567
00:21:44,930 --> 00:21:47,570
anything with that so I went through and

568
00:21:47,570 --> 00:21:49,220
started to look at what actually got

569
00:21:49,220 --> 00:21:50,390
through what kind of false positives I

570
00:21:50,390 --> 00:21:53,720
got this is a false positive as you can

571
00:21:53,720 --> 00:21:55,520
see this also looks nothing like the

572
00:21:55,520 --> 00:21:57,890
other data we had it's a single point

573
00:21:57,890 --> 00:21:59,960
that's sitting down by 0 0 but because

574
00:21:59,960 --> 00:22:04,210
it lies within the convex all it passed

575
00:22:04,210 --> 00:22:06,350
and it got flagged is mining traffic

576
00:22:06,350 --> 00:22:10,160
which is clearly a problem so going

577
00:22:10,160 --> 00:22:12,770
through my quick and dirty hacked fix

578
00:22:12,770 --> 00:22:13,680
for this was just

579
00:22:13,680 --> 00:22:15,570
to strip out all zeroes all points at

580
00:22:15,570 --> 00:22:18,030
zero zero or technically near zero zero

581
00:22:18,030 --> 00:22:19,860
I just went and I just ripped it out and

582
00:22:19,860 --> 00:22:24,030
then I rebuilt my convex hull so that

583
00:22:24,030 --> 00:22:25,650
same false positive they got through

584
00:22:25,650 --> 00:22:27,540
last time was trimmed out just by me

585
00:22:27,540 --> 00:22:29,220
redefining a convex hull that didn't

586
00:22:29,220 --> 00:22:30,510
that wasn't including all those points

587
00:22:30,510 --> 00:22:33,860
down by zero and that did the trick I

588
00:22:33,860 --> 00:22:37,010
mean that went through and that killed

589
00:22:37,010 --> 00:22:39,420
everything from the last nineteen

590
00:22:39,420 --> 00:22:42,030
thousand filled streams that had gotten

591
00:22:42,030 --> 00:22:42,390
through

592
00:22:42,390 --> 00:22:44,640
I got down to four not four thousand

593
00:22:44,640 --> 00:22:48,450
like literally four and all they are are

594
00:22:48,450 --> 00:22:50,370
just single points that are sitting

595
00:22:50,370 --> 00:22:52,260
inside the convex hull or not single

596
00:22:52,260 --> 00:22:53,610
points but they're actually stacked

597
00:22:53,610 --> 00:22:54,780
there there's like a couple hundred

598
00:22:54,780 --> 00:22:58,620
points probably from some protocol that

599
00:22:58,620 --> 00:23:00,750
calls out and calls back regularly every

600
00:23:00,750 --> 00:23:03,030
so often but the same data in the same

601
00:23:03,030 --> 00:23:03,660
response

602
00:23:03,660 --> 00:23:05,160
something like ntp or something like

603
00:23:05,160 --> 00:23:06,840
that

604
00:23:06,840 --> 00:23:09,600
so again this this looks nothing like

605
00:23:09,600 --> 00:23:11,190
our mining traffic so this is really

606
00:23:11,190 --> 00:23:14,070
easy to strip out but this first pass

607
00:23:14,070 --> 00:23:18,570
wasn't sufficient so from there I have a

608
00:23:18,570 --> 00:23:20,700
lot of options I kind of sat down and

609
00:23:20,700 --> 00:23:22,500
just kind of like brain dumped a lot of

610
00:23:22,500 --> 00:23:23,580
different things I could go off from

611
00:23:23,580 --> 00:23:25,890
there some different things you could do

612
00:23:25,890 --> 00:23:27,420
is like the size of the actual hull

613
00:23:27,420 --> 00:23:29,580
itself so if I was to go through and

614
00:23:29,580 --> 00:23:31,170
look at the site if I was to define the

615
00:23:31,170 --> 00:23:33,060
convex hull for those single points it

616
00:23:33,060 --> 00:23:34,650
would come back as being at or near zero

617
00:23:34,650 --> 00:23:36,630
that's obviously a very big difference

618
00:23:36,630 --> 00:23:38,160
from the size of the hole of the blue

619
00:23:38,160 --> 00:23:40,320
area so that right there would

620
00:23:40,320 --> 00:23:43,350
automatically filter those out you could

621
00:23:43,350 --> 00:23:45,060
also do the mean median nearest neighbor

622
00:23:45,060 --> 00:23:47,880
which is for every point you find the

623
00:23:47,880 --> 00:23:49,140
closest point to it and then your

624
00:23:49,140 --> 00:23:50,850
average those distances together that

625
00:23:50,850 --> 00:23:52,800
gives you your meet average you mean and

626
00:23:52,800 --> 00:23:55,350
your median those distances and those

627
00:23:55,350 --> 00:23:56,640
give you your nearest neighbor metrics

628
00:23:56,640 --> 00:23:58,860
that would obviously work very well as

629
00:23:58,860 --> 00:24:02,310
well spatial homogeneity which is

630
00:24:02,310 --> 00:24:04,650
basically just quantifying how evenly

631
00:24:04,650 --> 00:24:06,120
distributed the points are across a

632
00:24:06,120 --> 00:24:09,810
given area there are functions to do

633
00:24:09,810 --> 00:24:12,200
that the Ripley K&L functions but

634
00:24:12,200 --> 00:24:14,970
they're expensive and they're also not

635
00:24:14,970 --> 00:24:16,230
implemented in numpy which means I have

636
00:24:16,230 --> 00:24:17,460
to read it myself and I don't want to do

637
00:24:17,460 --> 00:24:20,700
that so an alternative idea I had was

638
00:24:20,700 --> 00:24:22,590
just a treat is to build a bunch of

639
00:24:22,590 --> 00:24:24,330
concentric circles off the centroid of

640
00:24:24,330 --> 00:24:26,920
the cluster so if I was to take

641
00:24:26,920 --> 00:24:28,340
[Music]

642
00:24:28,340 --> 00:24:30,450
so if I was to find the centroid of this

643
00:24:30,450 --> 00:24:34,230
probably somewhere around here and then

644
00:24:34,230 --> 00:24:36,420
basically build a set of concentric

645
00:24:36,420 --> 00:24:38,700
circles with its Center sitting at that

646
00:24:38,700 --> 00:24:41,640
center of this the center of this

647
00:24:41,640 --> 00:24:43,530
cluster of points and then find the

648
00:24:43,530 --> 00:24:45,330
number of points that are within each

649
00:24:45,330 --> 00:24:47,990
circle I basically get a hack together

650
00:24:47,990 --> 00:24:49,920
quantifiable metric of how evenly

651
00:24:49,920 --> 00:24:51,930
distribute the points are if the points

652
00:24:51,930 --> 00:24:53,940
are all very skewed to one side that

653
00:24:53,940 --> 00:24:55,200
you're gonna get end up with a line

654
00:24:55,200 --> 00:24:57,750
graph that's very very spiky versus very

655
00:24:57,750 --> 00:25:05,400
smooth again there's also the striation

656
00:25:05,400 --> 00:25:06,780
stuff I honestly don't know how I would

657
00:25:06,780 --> 00:25:08,100
quantify the striations there

658
00:25:08,100 --> 00:25:09,420
I've white bordered a couple of

659
00:25:09,420 --> 00:25:10,560
different solutions and all of them are

660
00:25:10,560 --> 00:25:13,920
pretty bad so I don't know how I'd even

661
00:25:13,920 --> 00:25:17,490
go about doing that time stamp analysis

662
00:25:17,490 --> 00:25:19,380
actually going back and looking at how

663
00:25:19,380 --> 00:25:21,240
the data changes over time instead of

664
00:25:21,240 --> 00:25:22,560
looking at aggregate packets so I'm

665
00:25:22,560 --> 00:25:24,690
looking at three weeks of data at a time

666
00:25:24,690 --> 00:25:28,140
or 24 hours of mining data at a time it

667
00:25:28,140 --> 00:25:29,700
would probably be better to look at the

668
00:25:29,700 --> 00:25:31,380
treat that data as it is as temporal

669
00:25:31,380 --> 00:25:32,850
data it's data that I'm receiving at

670
00:25:32,850 --> 00:25:34,260
10-minute intervals to start treating it

671
00:25:34,260 --> 00:25:36,480
as such watching how the data changes

672
00:25:36,480 --> 00:25:38,520
every 10 minutes as I get a new BBC flow

673
00:25:38,520 --> 00:25:42,240
log entry and in my bucket and then

674
00:25:42,240 --> 00:25:43,710
there's the usual linear regression

675
00:25:43,710 --> 00:25:46,740
stuff so actually performing a linear

676
00:25:46,740 --> 00:25:48,510
regression as opposed to just eyeballing

677
00:25:48,510 --> 00:25:50,100
and saying it there is a correlation

678
00:25:50,100 --> 00:25:55,230
there so I spent like an hour to today

679
00:25:55,230 --> 00:25:57,470
actually playing with playing with these

680
00:25:57,470 --> 00:26:02,100
and I went through and I did the how the

681
00:26:02,100 --> 00:26:03,930
convex hull changes over time this is

682
00:26:03,930 --> 00:26:05,280
kind of my attempt at the temporal

683
00:26:05,280 --> 00:26:08,610
analysis so the idea was to take every

684
00:26:08,610 --> 00:26:10,320
set of VPC flow log entries and every

685
00:26:10,320 --> 00:26:12,840
every time I got a new entry I'd

686
00:26:12,840 --> 00:26:14,940
recalculate the convex hull find the

687
00:26:14,940 --> 00:26:17,010
area of that and then charted so you can

688
00:26:17,010 --> 00:26:19,110
see over time the the area grows

689
00:26:19,110 --> 00:26:20,520
obviously because as you get more points

690
00:26:20,520 --> 00:26:22,770
or more likely to get points I create a

691
00:26:22,770 --> 00:26:25,500
new edge or new plane on your convex

692
00:26:25,500 --> 00:26:28,380
hull which creates a larger area the

693
00:26:28,380 --> 00:26:30,630
reason it flatlines for so long well

694
00:26:30,630 --> 00:26:31,920
actually I don't know why it flatlines

695
00:26:31,920 --> 00:26:35,400
for so long this has to do with the

696
00:26:35,400 --> 00:26:37,440
psychic tool I was using to actually

697
00:26:37,440 --> 00:26:38,820
find that the convex hull was throwing

698
00:26:38,820 --> 00:26:40,500
errors when I was using

699
00:26:40,500 --> 00:26:43,710
- few of points so I threw it in a

700
00:26:43,710 --> 00:26:45,270
try-catch and then I just passed the

701
00:26:45,270 --> 00:26:47,669
exception and then that was it I didn't

702
00:26:47,669 --> 00:26:48,870
actually investigate why that was

703
00:26:48,870 --> 00:26:51,960
happening but you can still see that

704
00:26:51,960 --> 00:26:53,340
over time that the area of the hole

705
00:26:53,340 --> 00:26:56,429
grows my guess is because the points I

706
00:26:56,429 --> 00:26:58,230
was selecting were too close together it

707
00:26:58,230 --> 00:27:01,140
couldn't accurately find because because

708
00:27:01,140 --> 00:27:02,789
they were too similar it couldn't do the

709
00:27:02,789 --> 00:27:04,320
proper floating-point calculations to

710
00:27:04,320 --> 00:27:06,630
figure out where the edges of that

711
00:27:06,630 --> 00:27:09,270
convex hull would be so once it had

712
00:27:09,270 --> 00:27:11,370
enough once it had enough points that

713
00:27:11,370 --> 00:27:13,950
were far enough spread out it was able

714
00:27:13,950 --> 00:27:15,780
to finally find a convex hull of

715
00:27:15,780 --> 00:27:18,330
sufficient area and then support and

716
00:27:18,330 --> 00:27:20,220
then going forward it could obviously

717
00:27:20,220 --> 00:27:22,590
keep finding it but as you can see this

718
00:27:22,590 --> 00:27:26,280
is they're not super similar I I haven't

719
00:27:26,280 --> 00:27:27,480
graphed it out as how that compares to

720
00:27:27,480 --> 00:27:31,320
other traffic but they follow a somewhat

721
00:27:31,320 --> 00:27:34,169
of a same pattern the big thing to note

722
00:27:34,169 --> 00:27:36,270
is that there's a lot of flat areas with

723
00:27:36,270 --> 00:27:39,780
large spikes so you're not seeing

724
00:27:39,780 --> 00:27:41,909
regular steps at any kind of intervals

725
00:27:41,909 --> 00:27:43,409
what you're seeing is a lot of smalls

726
00:27:43,409 --> 00:27:45,030
and then a big jump and then a lot of

727
00:27:45,030 --> 00:27:46,350
small and a lot and big jump and that's

728
00:27:46,350 --> 00:27:49,020
probably due to how the the cryptic horn

729
00:27:49,020 --> 00:27:50,970
miner is finding a share and submitting

730
00:27:50,970 --> 00:27:52,559
it to the pool because that's we're

731
00:27:52,559 --> 00:27:54,120
gonna require a lot more traffic and as

732
00:27:54,120 --> 00:27:55,500
that requires more traffic you're gonna

733
00:27:55,500 --> 00:27:57,780
end up with wider points outside your

734
00:27:57,780 --> 00:28:00,350
your metrics build a bigger hole and

735
00:28:00,350 --> 00:28:06,000
you're gonna get a larger area the other

736
00:28:06,000 --> 00:28:08,010
one I did was the the concentric circle

737
00:28:08,010 --> 00:28:09,900
once so basically I went through and

738
00:28:09,900 --> 00:28:13,530
found the centroid of each of each set

739
00:28:13,530 --> 00:28:15,510
of mining traffic and then calculated

740
00:28:15,510 --> 00:28:17,429
the number of points so on the the

741
00:28:17,429 --> 00:28:18,990
x-axis is the distance from the centroid

742
00:28:18,990 --> 00:28:20,730
and then the Y is the number of points

743
00:28:20,730 --> 00:28:23,220
so as the radius increases from the

744
00:28:23,220 --> 00:28:24,390
centroid you're obviously gonna have

745
00:28:24,390 --> 00:28:25,350
more and more points that are within

746
00:28:25,350 --> 00:28:27,750
that circle and again this fall is

747
00:28:27,750 --> 00:28:29,669
pretty much the same line and this this

748
00:28:29,669 --> 00:28:33,120
would probably be a good and cheap

749
00:28:33,120 --> 00:28:35,970
metric for determining spatial

750
00:28:35,970 --> 00:28:37,950
homogeneity like how distributed other

751
00:28:37,950 --> 00:28:39,150
points are they relatively evenly

752
00:28:39,150 --> 00:28:41,070
distributed like they would be when this

753
00:28:41,070 --> 00:28:43,590
graph where something we're much more

754
00:28:43,590 --> 00:28:45,480
dispersed you probably find something

755
00:28:45,480 --> 00:28:48,150
where you have a lot of sharp peaks and

756
00:28:48,150 --> 00:28:49,950
then plateaus as opposed to something

757
00:28:49,950 --> 00:28:51,780
with a nice smooth almost logarithmic

758
00:28:51,780 --> 00:28:54,500
looking curve

759
00:28:55,169 --> 00:28:56,669
so this is the - i tinkered around with

760
00:28:56,669 --> 00:28:59,820
today other things I would need to do is

761
00:28:59,820 --> 00:29:03,900
optimization I've been running this on

762
00:29:03,900 --> 00:29:07,679
my rinky-dink laptop my 2015 OS Xbox it

763
00:29:07,679 --> 00:29:09,840
gets through everything in like it'll

764
00:29:09,840 --> 00:29:13,140
run it'll build the model in about 60

765
00:29:13,140 --> 00:29:14,760
seconds 90 seconds and then I'll run

766
00:29:14,760 --> 00:29:17,280
through a gigabytes worth of V PC flow

767
00:29:17,280 --> 00:29:19,620
log data and like five minutes which

768
00:29:19,620 --> 00:29:21,929
obviously isn't isn't too bad for just a

769
00:29:21,929 --> 00:29:24,090
crappy laptop you could easily throw

770
00:29:24,090 --> 00:29:26,970
this on like an m5 large and get ten

771
00:29:26,970 --> 00:29:30,120
times the performance out of that it's

772
00:29:30,120 --> 00:29:33,210
also single threaded which isn't the end

773
00:29:33,210 --> 00:29:34,470
of the world okay since numpy is doing a

774
00:29:34,470 --> 00:29:37,230
lot of the heavy lifting numpy just is

775
00:29:37,230 --> 00:29:39,480
just a direct hook into L pack or la

776
00:29:39,480 --> 00:29:41,669
pack and blasts which are already multi

777
00:29:41,669 --> 00:29:43,530
threaded in multi core so that you're

778
00:29:43,530 --> 00:29:46,169
using most of your CPU to begin with but

779
00:29:46,169 --> 00:29:47,340
you could probably optimize it a little

780
00:29:47,340 --> 00:29:50,100
bit more i also seen you go back and

781
00:29:50,100 --> 00:29:51,539
actually benchmark how long these took I

782
00:29:51,539 --> 00:29:52,830
didn't actually I should have timed it

783
00:29:52,830 --> 00:29:53,880
while I was already in there doing it

784
00:29:53,880 --> 00:29:56,010
but I forgot to actually call that and

785
00:29:56,010 --> 00:29:57,150
see how long it's taking to actually

786
00:29:57,150 --> 00:29:58,860
generate this data as opposed to

787
00:29:58,860 --> 00:30:03,840
generating say the convex hull and then

788
00:30:03,840 --> 00:30:05,789
collect more data I mean I need a lot

789
00:30:05,789 --> 00:30:08,549
more data mining different coins would

790
00:30:08,549 --> 00:30:09,690
be interesting although I don't think

791
00:30:09,690 --> 00:30:10,409
that'll make much of a difference

792
00:30:10,409 --> 00:30:11,820
because it's all built on top of the

793
00:30:11,820 --> 00:30:14,580
stratum protocol different reward

794
00:30:14,580 --> 00:30:16,409
systems which is how pools like payout

795
00:30:16,409 --> 00:30:18,240
your share like you found a Charice min

796
00:30:18,240 --> 00:30:20,610
sharri you get X amount of Bitcoin or

797
00:30:20,610 --> 00:30:22,260
theory and whatever you're mining the

798
00:30:22,260 --> 00:30:23,340
way that's how much you get is

799
00:30:23,340 --> 00:30:24,570
determined there's a couple of different

800
00:30:24,570 --> 00:30:25,740
systems I don't think that I'll change

801
00:30:25,740 --> 00:30:27,720
anything but it's worth thinking around

802
00:30:27,720 --> 00:30:30,510
with the big one to look into is solo

803
00:30:30,510 --> 00:30:32,460
mining solo mining generates a very

804
00:30:32,460 --> 00:30:33,840
different-looking traffic I actually

805
00:30:33,840 --> 00:30:35,250
have some data I just haven't started

806
00:30:35,250 --> 00:30:37,320
working with it yet I've crafted it out

807
00:30:37,320 --> 00:30:39,630
in which you actually end up with is a

808
00:30:39,630 --> 00:30:41,669
thousand points pretty much all on top

809
00:30:41,669 --> 00:30:43,350
of each other you get very very very

810
00:30:43,350 --> 00:30:44,850
very tight clustering all around the

811
00:30:44,850 --> 00:30:47,370
same area not even like a linear

812
00:30:47,370 --> 00:30:48,870
regression line but around like the same

813
00:30:48,870 --> 00:30:50,580
very small area you get points stacked

814
00:30:50,580 --> 00:30:52,260
on top of each other which again should

815
00:30:52,260 --> 00:30:53,490
make things pretty easy to to

816
00:30:53,490 --> 00:30:57,049
fingerprint as well as rejected traffic

817
00:30:57,049 --> 00:30:59,220
rejected traffic again would probably be

818
00:30:59,220 --> 00:31:00,809
pretty easy to fingerprint because it's

819
00:31:00,809 --> 00:31:02,730
basically stratum calling out every ten

820
00:31:02,730 --> 00:31:05,370
seconds making an API rest call and

821
00:31:05,370 --> 00:31:06,960
saying hey are you alive no blah

822
00:31:06,960 --> 00:31:08,430
come back it'll sit for ten seconds

823
00:31:08,430 --> 00:31:09,360
we'll make another one it's just gonna

824
00:31:09,360 --> 00:31:10,980
repetitively do that so it's gonna have

825
00:31:10,980 --> 00:31:12,900
a very very structured and predictable

826
00:31:12,900 --> 00:31:16,130
pattern that'll be pretty easy to flag

827
00:31:16,130 --> 00:31:20,010
and then I need more test data to like

828
00:31:20,010 --> 00:31:22,350
actual VPC flow log data so if anyone

829
00:31:22,350 --> 00:31:24,360
wants to donate any feel free to come

830
00:31:24,360 --> 00:31:26,580
talk to me so I can get this ball around

831
00:31:26,580 --> 00:31:31,800
a little bit more you also if you guys

832
00:31:31,800 --> 00:31:33,360
are heavily involved at AWS and you're

833
00:31:33,360 --> 00:31:34,980
aware of reinforced that happened

834
00:31:34,980 --> 00:31:36,480
earlier this week at all you probably

835
00:31:36,480 --> 00:31:39,000
saw that we now have span ports as a

836
00:31:39,000 --> 00:31:40,740
service they're calling it traffic

837
00:31:40,740 --> 00:31:42,570
mirroring what you can basically do is

838
00:31:42,570 --> 00:31:45,300
take a source Ani and elastic its j'veux

839
00:31:45,300 --> 00:31:47,100
troll Nick you can take that and say I

840
00:31:47,100 --> 00:31:48,600
want to mirror this traffic is somewhere

841
00:31:48,600 --> 00:31:51,150
else and point it to another anti so you

842
00:31:51,150 --> 00:31:53,160
get like you can get true P caps off of

843
00:31:53,160 --> 00:31:54,750
that like you can run bro on top of that

844
00:31:54,750 --> 00:31:57,710
or Splunk or whatever is your doing

845
00:31:57,710 --> 00:32:00,540
whatever the the file beat version of

846
00:32:00,540 --> 00:32:03,990
that is so you can get like more

847
00:32:03,990 --> 00:32:05,640
traditional network monitoring tools

848
00:32:05,640 --> 00:32:08,160
hooked into AWS now as opposed to

849
00:32:08,160 --> 00:32:09,990
relying on a BBC flow logs which are

850
00:32:09,990 --> 00:32:11,970
unique for AWS requiring very special

851
00:32:11,970 --> 00:32:13,890
tooling the downside is it's pretty

852
00:32:13,890 --> 00:32:16,200
expensive I mean 11 dollars a month just

853
00:32:16,200 --> 00:32:18,840
for a single network interface you're

854
00:32:18,840 --> 00:32:19,890
gonna have to pretty if you want to make

855
00:32:19,890 --> 00:32:21,180
that economical you're either gonna have

856
00:32:21,180 --> 00:32:22,440
to be very specific about the things

857
00:32:22,440 --> 00:32:24,180
you're looking at or you're gonna have

858
00:32:24,180 --> 00:32:25,740
to set up you're going to react attack

859
00:32:25,740 --> 00:32:27,600
things so you end up with like you had

860
00:32:27,600 --> 00:32:29,850
used proxy servers to tunnel all your

861
00:32:29,850 --> 00:32:32,370
traffic out and even then you're still

862
00:32:32,370 --> 00:32:33,420
probably gonna miss things is what

863
00:32:33,420 --> 00:32:34,230
happens it's something behind the

864
00:32:34,230 --> 00:32:35,400
process it gets compromised you're not

865
00:32:35,400 --> 00:32:36,780
watching those logs and it's making

866
00:32:36,780 --> 00:32:37,650
requests that don't go through your

867
00:32:37,650 --> 00:32:40,410
proxies so it's it's nice that you have

868
00:32:40,410 --> 00:32:42,510
it but it's pricey and it's probably not

869
00:32:42,510 --> 00:32:43,950
going to end up replacing flow logs as

870
00:32:43,950 --> 00:32:45,660
the end-all-be-all network monitoring

871
00:32:45,660 --> 00:32:50,220
solution for AWS the other downside to

872
00:32:50,220 --> 00:32:52,250
span ports as a Services I'm calling it

873
00:32:52,250 --> 00:32:55,110
you get a lot more data which is a good

874
00:32:55,110 --> 00:32:56,280
thing you have a lot more data to work

875
00:32:56,280 --> 00:32:57,750
with you build far more accurate models

876
00:32:57,750 --> 00:33:00,180
but because you're generating you have

877
00:33:00,180 --> 00:33:02,310
every packet captured as opposed to just

878
00:33:02,310 --> 00:33:04,110
a single line entry representing 10

879
00:33:04,110 --> 00:33:07,110
minutes of network data you very very

880
00:33:07,110 --> 00:33:09,030
likely end up with terabytes of data

881
00:33:09,030 --> 00:33:12,180
versus gigabytes of data which means the

882
00:33:12,180 --> 00:33:14,010
models you build are going to need much

883
00:33:14,010 --> 00:33:15,660
more resources to process and actually

884
00:33:15,660 --> 00:33:17,280
churn through all that unless you have

885
00:33:17,280 --> 00:33:18,990
some very strong filtering mechanisms to

886
00:33:18,990 --> 00:33:20,950
start kicking stuff out

887
00:33:20,950 --> 00:33:25,660
so there's some pros and cons to it yeah

888
00:33:25,660 --> 00:33:27,100
for the for the tooling and stuff I just

889
00:33:27,100 --> 00:33:29,530
I built it all Python numpy and sapphire

890
00:33:29,530 --> 00:33:33,370
that are the two IOC you scikit-learn I

891
00:33:33,370 --> 00:33:34,930
think I used I used SK learn for

892
00:33:34,930 --> 00:33:37,150
something or other and matplotlib was

893
00:33:37,150 --> 00:33:40,480
for all the charts if if you're at all

894
00:33:40,480 --> 00:33:43,240
interested in like data science not even

895
00:33:43,240 --> 00:33:45,040
data not even data science if you're

896
00:33:45,040 --> 00:33:46,450
interested in like how math beats

897
00:33:46,450 --> 00:33:48,880
security or how like something like

898
00:33:48,880 --> 00:33:50,410
Netflix builds a recommendation engine I

899
00:33:50,410 --> 00:33:52,000
highly recommend this book algorithms

900
00:33:52,000 --> 00:33:54,280
are the intelligent web it's like 130

901
00:33:54,280 --> 00:33:56,710
pages long it's really short the only

902
00:33:56,710 --> 00:33:58,120
prerequisite knowledge is you have is

903
00:33:58,120 --> 00:33:59,950
Python do you know Python and did you

904
00:33:59,950 --> 00:34:02,380
graduate high school with and like take

905
00:34:02,380 --> 00:34:03,790
math in high school like they're really

906
00:34:03,790 --> 00:34:06,100
the prerequisites for it or pretty low I

907
00:34:06,100 --> 00:34:09,190
will say the Python syntax is more

908
00:34:09,190 --> 00:34:11,500
advanced they use a lot of the more

909
00:34:11,500 --> 00:34:13,900
advanced numpy features like all the ND

910
00:34:13,900 --> 00:34:15,639
array slicing is something that it

911
00:34:15,639 --> 00:34:17,050
wasn't very familiar with so I had to go

912
00:34:17,050 --> 00:34:18,760
and spend some time learning things on

913
00:34:18,760 --> 00:34:21,130
the back end but it's a very good intro

914
00:34:21,130 --> 00:34:23,168
to this kind of stuff if you're at all

915
00:34:23,168 --> 00:34:24,940
interested in it which I think every

916
00:34:24,940 --> 00:34:26,949
blue team operator should start digging

917
00:34:26,949 --> 00:34:28,600
into these things and start building

918
00:34:28,600 --> 00:34:31,090
their detection engines around these

919
00:34:31,090 --> 00:34:32,380
kind of principles as opposed to just

920
00:34:32,380 --> 00:34:37,149
rules simple rules rule checks and again

921
00:34:37,149 --> 00:34:37,899
if you're feeling generous

922
00:34:37,899 --> 00:34:39,969
I need vbc full log data so if you're

923
00:34:39,969 --> 00:34:41,980
feeling like donating I'm even happy to

924
00:34:41,980 --> 00:34:43,120
work with you and try to figure out a

925
00:34:43,120 --> 00:34:44,679
way to sanitize it like just doing a

926
00:34:44,679 --> 00:34:46,210
match replace on all the IP addresses

927
00:34:46,210 --> 00:34:48,460
and ports happy to do that I have a

928
00:34:48,460 --> 00:34:51,429
proof of concept for that already see

929
00:34:51,429 --> 00:34:53,679
how come talk to me if you are I also

930
00:34:53,679 --> 00:34:55,179
plan to release this at some point I

931
00:34:55,179 --> 00:34:56,830
have some sample code out right now my

932
00:34:56,830 --> 00:34:59,740
github but it's terrible to look at it

933
00:34:59,740 --> 00:35:02,140
it's really bad but I plan to make a

934
00:35:02,140 --> 00:35:03,040
soups and nuts

935
00:35:03,040 --> 00:35:04,870
release that basically you just point it

936
00:35:04,870 --> 00:35:06,580
and it has three bucket with vbc flow

937
00:35:06,580 --> 00:35:08,650
logs and it'll just you can just let it

938
00:35:08,650 --> 00:35:11,910
rip you can deploy it wherever you want

939
00:35:11,910 --> 00:35:14,320
and if you want to donate some vlog data

940
00:35:14,320 --> 00:35:15,730
I'm happy to give that give you early

941
00:35:15,730 --> 00:35:19,810
access to that yeah thanks for listening

942
00:35:19,810 --> 00:35:21,190
guys I know it's a short talk end of the

943
00:35:21,190 --> 00:35:22,390
day so I tried to keep it a little bit

944
00:35:22,390 --> 00:35:25,000
more brief see any questions any

945
00:35:25,000 --> 00:35:29,160
follow-ups or anything like that yeah

946
00:35:33,990 --> 00:35:44,620
huh yeah yeah yeah exactly exactly so

947
00:35:44,620 --> 00:35:45,700
the question is when I was looking into

948
00:35:45,700 --> 00:35:47,650
solo mining did I ever wear any of the

949
00:35:47,650 --> 00:35:49,450
solo miners actually find a block the

950
00:35:49,450 --> 00:35:51,610
answer is no they didn't and that is

951
00:35:51,610 --> 00:35:52,570
definitely something I should be doing

952
00:35:52,570 --> 00:35:54,520
to see what that traffic looks like for

953
00:35:54,520 --> 00:35:55,990
when a solo miner actually does find a

954
00:35:55,990 --> 00:35:58,420
block if you're not in the crypto coin

955
00:35:58,420 --> 00:35:59,770
mining if that's not your thing

956
00:35:59,770 --> 00:36:03,120
finding a block is extremely rare and

957
00:36:03,120 --> 00:36:05,350
quote-unquote difficult to do that's why

958
00:36:05,350 --> 00:36:06,880
people do pool mining so everybody pulls

959
00:36:06,880 --> 00:36:08,710
their resources and you all look for a

960
00:36:08,710 --> 00:36:10,240
block and that's what I was sorry about

961
00:36:10,240 --> 00:36:11,770
submitting it's a sexual successful

962
00:36:11,770 --> 00:36:13,570
share you found part of a block and your

963
00:36:13,570 --> 00:36:15,220
pool gets a payout and you get a share

964
00:36:15,220 --> 00:36:17,110
of that full payout to pay on how much

965
00:36:17,110 --> 00:36:19,300
work you did we're a solo mining it's

966
00:36:19,300 --> 00:36:20,980
all on you it's you're basically playing

967
00:36:20,980 --> 00:36:22,780
the lottery with far worse odds at that

968
00:36:22,780 --> 00:36:24,400
point far bigger payout but far worse

969
00:36:24,400 --> 00:36:32,970
odds but no I haven't anyone else

970
00:36:35,220 --> 00:36:38,050
cool thanks guys appreciate you coming

971
00:36:38,050 --> 00:36:39,630
out

972
00:36:39,630 --> 00:36:43,169
[Applause]

