1
00:00:04,280 --> 00:00:06,080
all righty thanks everybody for coming

2
00:00:06,080 --> 00:00:08,330
to our 11 o'clock talk

3
00:00:08,330 --> 00:00:09,920
so besides Pittsburgh just wants to take

4
00:00:09,920 --> 00:00:11,990
a moment to recognize our premier

5
00:00:11,990 --> 00:00:13,940
sponsor Terrace which and then our

6
00:00:13,940 --> 00:00:15,950
diamond sponsors security risk advisors

7
00:00:15,950 --> 00:00:18,290
and defy security thank you so much to

8
00:00:18,290 --> 00:00:20,060
all those organizations for helping to

9
00:00:20,060 --> 00:00:21,970
make besides Pittsburgh happen this year

10
00:00:21,970 --> 00:00:24,140
so I'm pleased to introduce our next

11
00:00:24,140 --> 00:00:25,520
speaker will doorman who will be

12
00:00:25,520 --> 00:00:27,890
presenting on a topic called death by

13
00:00:27,890 --> 00:00:30,140
thumbdrive file system buzzing with cert

14
00:00:30,140 --> 00:00:33,170
BFF so a little bit about will wills

15
00:00:33,170 --> 00:00:34,670
been a software vulnerability analyst

16
00:00:34,670 --> 00:00:36,710
with the cert Coordination Center since

17
00:00:36,710 --> 00:00:39,590
2004 as focus areas include web browser

18
00:00:39,590 --> 00:00:42,649
technologies ActiveX mobile applications

19
00:00:42,649 --> 00:00:45,110
and fuzzing Will's discovered thousands

20
00:00:45,110 --> 00:00:46,790
of vulnerabilities using a variety of

21
00:00:46,790 --> 00:00:48,829
tools and techniques so without further

22
00:00:48,829 --> 00:00:55,250
ado please welcome well thank you and

23
00:00:55,250 --> 00:00:59,329
get guys hear me okay all right good so

24
00:00:59,329 --> 00:01:02,859
the legal stuff required by our company

25
00:01:02,859 --> 00:01:06,050
a little bit of background information

26
00:01:06,050 --> 00:01:15,320
about how I ended up getting here if

27
00:01:15,320 --> 00:01:17,869
anybody has ever heard of a filing

28
00:01:17,869 --> 00:01:19,850
system called FreeNAS it's actually

29
00:01:19,850 --> 00:01:22,909
pretty slick you know I got a server in

30
00:01:22,909 --> 00:01:25,250
our server server room it's got 40 hard

31
00:01:25,250 --> 00:01:27,229
drives on it if you ever want an

32
00:01:27,229 --> 00:01:29,270
operating system to intelligently use a

33
00:01:29,270 --> 00:01:32,900
large amount of hard drives FreeNAS is

34
00:01:32,900 --> 00:01:35,119
great ZFS is great basically FreeNAS

35
00:01:35,119 --> 00:01:37,250
gets you that so a little background

36
00:01:37,250 --> 00:01:38,090
we've got a

37
00:01:38,090 --> 00:01:42,350
freenas server does anybody here ever

38
00:01:42,350 --> 00:01:46,369
heard of a program called Rufus yeah so

39
00:01:46,369 --> 00:01:48,020
right it's pretty popular and I think

40
00:01:48,020 --> 00:01:50,930
it's quite useful back in the day when

41
00:01:50,930 --> 00:01:51,950
you wanted to install an operating

42
00:01:51,950 --> 00:01:55,250
system on your system you know you burn

43
00:01:55,250 --> 00:01:56,930
it to an optical disk and you would put

44
00:01:56,930 --> 00:01:59,329
it in your optical media drive and you

45
00:01:59,329 --> 00:02:02,210
know go from there the problem is modern

46
00:02:02,210 --> 00:02:04,610
computers don't have optical disks so

47
00:02:04,610 --> 00:02:07,759
what Rufus is really slick at is you can

48
00:02:07,759 --> 00:02:09,739
just have an iso file that you

49
00:02:09,739 --> 00:02:13,310
downloaded and you can burn it to a

50
00:02:13,310 --> 00:02:14,599
thumb drive so assuming you have a

51
00:02:14,599 --> 00:02:16,370
computer you can boot from a thunder

52
00:02:16,370 --> 00:02:19,160
thumb drive or USB Drive

53
00:02:19,160 --> 00:02:22,010
it'll allow you to do that so at some

54
00:02:22,010 --> 00:02:23,540
point of time I needed to do like a

55
00:02:23,540 --> 00:02:26,209
clean install of FreeNAS so I had my

56
00:02:26,209 --> 00:02:29,330
free knives ISO and I have my virtual

57
00:02:29,330 --> 00:02:31,910
machine that has Rufus in it

58
00:02:31,910 --> 00:02:34,580
paranoid folks such as myself always do

59
00:02:34,580 --> 00:02:36,019
everything within a virtual machine

60
00:02:36,019 --> 00:02:39,560
because we don't trust anything so I'm

61
00:02:39,560 --> 00:02:41,390
basically you know writing the ISO to

62
00:02:41,390 --> 00:02:46,549
the to the USB drive wait that's not

63
00:02:46,549 --> 00:02:47,120
right

64
00:02:47,120 --> 00:02:50,870
and my initial thought was well I I

65
00:02:50,870 --> 00:02:53,360
guess maybe there's a hardware problem

66
00:02:53,360 --> 00:02:55,430
with my thumb drive so I go back and I

67
00:02:55,430 --> 00:03:00,440
you know rewrite the thing and I now

68
00:03:00,440 --> 00:03:05,590
have a thumb drive which will crash

69
00:03:05,590 --> 00:03:10,430
Windows 7 every time reproducible and

70
00:03:10,430 --> 00:03:13,190
this is not me trying to do anything

71
00:03:13,190 --> 00:03:15,260
clever I'm not trying to like mangle

72
00:03:15,260 --> 00:03:17,060
anything I'm not trying to be like super

73
00:03:17,060 --> 00:03:19,370
like hey I'm gonna trick windows into

74
00:03:19,370 --> 00:03:22,970
crashing no I have FreeNAS I want it to

75
00:03:22,970 --> 00:03:27,530
boot off of a thumb drive and we end up

76
00:03:27,530 --> 00:03:30,470
with this so I'm gonna I'm gonna give

77
00:03:30,470 --> 00:03:32,420
you give you guys a little little secret

78
00:03:32,420 --> 00:03:35,299
a secret to my success if you consider

79
00:03:35,299 --> 00:03:38,569
me successful vulnerability discovery is

80
00:03:38,569 --> 00:03:41,630
often considered to be like this magic

81
00:03:41,630 --> 00:03:44,030
sort of skillset that like only like

82
00:03:44,030 --> 00:03:46,940
crazy people that can do assembly in

83
00:03:46,940 --> 00:03:48,380
their head and everything like that

84
00:03:48,380 --> 00:03:53,239
now there's three steps how to discover

85
00:03:53,239 --> 00:03:55,959
vulnerabilities step one use systems

86
00:03:55,959 --> 00:04:00,889
think we got everybody covered here step

87
00:04:00,889 --> 00:04:05,090
number two notice anomalies so when I

88
00:04:05,090 --> 00:04:07,190
had my Windows System blue screen I

89
00:04:07,190 --> 00:04:09,920
thought huh that's not right it

90
00:04:09,920 --> 00:04:10,880
shouldn't do that

91
00:04:10,880 --> 00:04:16,010
I just wrote bits to a USB disk and then

92
00:04:16,010 --> 00:04:18,410
the final step is just investigate this

93
00:04:18,410 --> 00:04:20,358
and I will tell you I think that's the

94
00:04:20,358 --> 00:04:22,430
one thing that sets aside people that

95
00:04:22,430 --> 00:04:24,050
are vulnerability researchers or

96
00:04:24,050 --> 00:04:26,330
security researchers from people that

97
00:04:26,330 --> 00:04:28,610
are using the systems as tools is that

98
00:04:28,610 --> 00:04:32,160
when something odd happens I have this

99
00:04:32,160 --> 00:04:35,220
part of my brain that makes me wonder

100
00:04:35,220 --> 00:04:36,960
why did this happen

101
00:04:36,960 --> 00:04:39,270
this is basically it and I'll say you

102
00:04:39,270 --> 00:04:41,990
know like I'll get into a little bit of

103
00:04:41,990 --> 00:04:44,250
some of the fuzzing work that I've been

104
00:04:44,250 --> 00:04:46,440
doing but a lot of the cases a lot of

105
00:04:46,440 --> 00:04:48,390
the vulnerabilities that we've been able

106
00:04:48,390 --> 00:04:52,740
to discover is really just looking at

107
00:04:52,740 --> 00:04:55,200
systems and investigating things that

108
00:04:55,200 --> 00:04:58,010
don't behave as you expect them to be so

109
00:04:58,010 --> 00:05:00,090
just a little bit of background about

110
00:05:00,090 --> 00:05:02,940
the certain BFF

111
00:05:02,940 --> 00:05:05,670
it is a mutational fuzzer and the

112
00:05:05,670 --> 00:05:07,440
concept of a mutational fuzzer is

113
00:05:07,440 --> 00:05:10,350
basically you start out with a known

114
00:05:10,350 --> 00:05:13,050
good or known bad but basically you

115
00:05:13,050 --> 00:05:16,680
start out with a file let's say we have

116
00:05:16,680 --> 00:05:18,360
a word document and it goes into our

117
00:05:18,360 --> 00:05:20,220
mutation fuzzer and it shakes it up a

118
00:05:20,220 --> 00:05:21,390
little bit and you've got something that

119
00:05:21,390 --> 00:05:23,780
looks pretty close to a word document

120
00:05:23,780 --> 00:05:26,640
and then you get that right that's your

121
00:05:26,640 --> 00:05:29,100
end goal of fuzzing is you're looking

122
00:05:29,100 --> 00:05:34,650
for program crashes does anybody here

123
00:05:34,650 --> 00:05:38,460
have a BFF now yeah

124
00:05:38,460 --> 00:05:42,260
sorry it is not best friends forever

125
00:05:42,260 --> 00:05:45,210
it's the basic fuzzing framework and it

126
00:05:45,210 --> 00:05:48,600
was about ten years or so ago there were

127
00:05:48,600 --> 00:05:50,190
some tools that were out there like the

128
00:05:50,190 --> 00:05:52,080
the peach fuzz engrain work and you

129
00:05:52,080 --> 00:05:53,490
needed to have a lot of information

130
00:05:53,490 --> 00:05:55,590
about like the type of file that your

131
00:05:55,590 --> 00:05:57,120
fuzzing and the structure of it and you

132
00:05:57,120 --> 00:05:58,500
would have to write something that tells

133
00:05:58,500 --> 00:05:59,910
you how to Mike how am I going to fuzz

134
00:05:59,910 --> 00:06:02,640
this my goal was to write something

135
00:06:02,640 --> 00:06:05,670
that's easy to use it's maybe like 10

136
00:06:05,670 --> 00:06:08,360
years ago or so at this point eight and

137
00:06:08,360 --> 00:06:10,620
started out as like a very simple like

138
00:06:10,620 --> 00:06:13,530
perl wrapper around a utility called zuf

139
00:06:13,530 --> 00:06:15,360
which just kind of mangoes things runs a

140
00:06:15,360 --> 00:06:17,880
program and looks for signals it's since

141
00:06:17,880 --> 00:06:19,650
actually gotten a lot better

142
00:06:19,650 --> 00:06:24,090
bigger works on multiple platforms but

143
00:06:24,090 --> 00:06:25,860
the general idea of how it works is

144
00:06:25,860 --> 00:06:27,630
basically you start out with what we

145
00:06:27,630 --> 00:06:30,750
call a seed file in most cases it's a

146
00:06:30,750 --> 00:06:33,450
like a known good file so if I'm fuzzing

147
00:06:33,450 --> 00:06:35,580
a PDF reader

148
00:06:35,580 --> 00:06:39,660
I want a pile of PDF documents and what

149
00:06:39,660 --> 00:06:41,960
the fuzzer will do is it will mangle it

150
00:06:41,960 --> 00:06:44,190
in that you know sometimes we call it

151
00:06:44,190 --> 00:06:45,630
like bit flipping and stuff like that

152
00:06:45,630 --> 00:06:49,590
but it really is very it's naive but

153
00:06:49,590 --> 00:06:51,900
it's basically you take a bite take take

154
00:06:51,900 --> 00:06:53,970
some subset of bytes in a file flip them

155
00:06:53,970 --> 00:06:56,250
to some other random byte values and

156
00:06:56,250 --> 00:06:58,800
just see what happens

157
00:06:58,800 --> 00:07:00,750
you launch the target application and

158
00:07:00,750 --> 00:07:04,110
you look for crashes and out of anytime

159
00:07:04,110 --> 00:07:07,050
something crashes it's got some tools

160
00:07:07,050 --> 00:07:08,460
that come with it that kind of give you

161
00:07:08,460 --> 00:07:10,170
an idea of exploitability

162
00:07:10,170 --> 00:07:11,550
and you can get a little bit more

163
00:07:11,550 --> 00:07:14,340
information about what the crash is all

164
00:07:14,340 --> 00:07:16,710
about and you repeat it that's it it's

165
00:07:16,710 --> 00:07:18,780
it is it is not rocket science in any

166
00:07:18,780 --> 00:07:21,030
way but it is really vulnerable 'ti

167
00:07:21,030 --> 00:07:24,750
discovery through brute force one of the

168
00:07:24,750 --> 00:07:26,280
you know talking about servers in our

169
00:07:26,280 --> 00:07:27,870
server room like one of the things that

170
00:07:27,870 --> 00:07:29,610
we have are like systems that are set

171
00:07:29,610 --> 00:07:31,980
aside that just have a lot of CPU cores

172
00:07:31,980 --> 00:07:34,590
and I will set up a fuzzing campaign on

173
00:07:34,590 --> 00:07:36,660
as many VMs as I have cores and RAM

174
00:07:36,660 --> 00:07:37,890
available and then you just come back

175
00:07:37,890 --> 00:07:42,480
later you know I might come back if a

176
00:07:42,480 --> 00:07:44,370
target is really fruitful I might see

177
00:07:44,370 --> 00:07:46,800
something that comes up like within

178
00:07:46,800 --> 00:07:49,100
minutes I've seen stuff where it's like

179
00:07:49,100 --> 00:07:52,860
within the first 10 or so iterations of

180
00:07:52,860 --> 00:07:53,940
a fuzzing campaign and I've seen

181
00:07:53,940 --> 00:07:55,650
exploitable vulnerabilities and now

182
00:07:55,650 --> 00:07:57,390
that's a sign of like a really poorly

183
00:07:57,390 --> 00:08:02,070
written target app in some cases it it's

184
00:08:02,070 --> 00:08:04,170
a lot more robust so you can kind of get

185
00:08:04,170 --> 00:08:07,590
a sort of a smell as to the the quality

186
00:08:07,590 --> 00:08:11,010
of the software that you're working just

187
00:08:11,010 --> 00:08:15,000
based on how robust it is to file

188
00:08:15,000 --> 00:08:17,550
fuzzing and the idea with BFF is you

189
00:08:17,550 --> 00:08:18,960
know like I described before it's it's

190
00:08:18,960 --> 00:08:21,300
really just taking byte values and

191
00:08:21,300 --> 00:08:23,280
changing them to other values but it's

192
00:08:23,280 --> 00:08:25,410
actually it's got some feedback loops

193
00:08:25,410 --> 00:08:27,630
where it will look for techniques that

194
00:08:27,630 --> 00:08:29,520
cause crashes and it'll kind of steer

195
00:08:29,520 --> 00:08:32,130
itself in ways to like know how much do

196
00:08:32,130 --> 00:08:34,919
I mangle a file before I get something

197
00:08:34,919 --> 00:08:37,260
that's interesting so without getting

198
00:08:37,260 --> 00:08:38,700
too far into the technical stuff and

199
00:08:38,700 --> 00:08:40,140
hopefully this isn't gonna be too much

200
00:08:40,140 --> 00:08:43,860
of an eye test but this is an example

201
00:08:43,860 --> 00:08:47,910
output of our tool running on Linux it's

202
00:08:47,910 --> 00:08:50,160
fuzzing a library called Oracle outside

203
00:08:50,160 --> 00:08:53,160
in Oracle outside-in is a great target

204
00:08:53,160 --> 00:08:54,960
because it's the Swiss Army knife of

205
00:08:54,960 --> 00:08:56,910
something that decodes just about

206
00:08:56,910 --> 00:08:59,220
anything it has five hundred over five

207
00:08:59,220 --> 00:09:02,399
hundred different decoders in it it can

208
00:09:02,399 --> 00:09:04,279
basically give you like a thumbnail

209
00:09:04,279 --> 00:09:08,879
rendering of like a document a PDF a

210
00:09:08,879 --> 00:09:12,329
text file whatever you want it's used in

211
00:09:12,329 --> 00:09:13,860
a lot of products it's used in forensic

212
00:09:13,860 --> 00:09:15,930
software it's used by a little product

213
00:09:15,930 --> 00:09:20,009
called Microsoft Exchange it's it's it's

214
00:09:20,009 --> 00:09:22,279
it's kind of an important sort of tool

215
00:09:22,279 --> 00:09:24,540
but there's actually a tool that comes

216
00:09:24,540 --> 00:09:26,850
with BFF called drill results so if I

217
00:09:26,850 --> 00:09:28,350
just run this tool slash drill results

218
00:09:28,350 --> 00:09:30,120
script it'll give me a screen like this

219
00:09:30,120 --> 00:09:32,670
and it'll rank the crashes and if I ever

220
00:09:32,670 --> 00:09:34,470
see something that's like ranked as like

221
00:09:34,470 --> 00:09:36,480
a ten or a five that's like this is

222
00:09:36,480 --> 00:09:39,209
really cool so I look here I can see

223
00:09:39,209 --> 00:09:40,259
I've got a crash that has an

224
00:09:40,259 --> 00:09:43,019
exploitability rank of ten and I can

225
00:09:43,019 --> 00:09:44,550
look right it right below it and I can

226
00:09:44,550 --> 00:09:47,000
see I've got a return access violation

227
00:09:47,000 --> 00:09:51,180
accessing some 64 bit pattern but it

228
00:09:51,180 --> 00:09:53,399
also tells me that bike pattern exists

229
00:09:53,399 --> 00:09:56,689
in the file that I find interesting

230
00:09:56,689 --> 00:10:00,089
we're feeling lucky what if I go in my

231
00:10:00,089 --> 00:10:02,430
hex editor and I like look for that bite

232
00:10:02,430 --> 00:10:03,930
pattern and I change it to something

233
00:10:03,930 --> 00:10:08,269
like abcdefgh

234
00:10:08,720 --> 00:10:11,850
week and this is just a gue e debugger

235
00:10:11,850 --> 00:10:15,209
that comes with with our BFF virtual

236
00:10:15,209 --> 00:10:17,309
machine here but I can see we've

237
00:10:17,309 --> 00:10:22,079
actually got a return to a b c d e f g h

238
00:10:22,079 --> 00:10:24,329
and i can see that value in the stack so

239
00:10:24,329 --> 00:10:26,370
it's like here's a great example of a

240
00:10:26,370 --> 00:10:28,889
home run fuzzing output I've just

241
00:10:28,889 --> 00:10:31,019
started a fuzzing campaign

242
00:10:31,019 --> 00:10:33,629
I've waited enough time and then I come

243
00:10:33,629 --> 00:10:34,949
back and then basically this stuff

244
00:10:34,949 --> 00:10:37,920
trickles up to the top so that's the the

245
00:10:37,920 --> 00:10:41,779
basic gist of fuzzing

246
00:10:41,910 --> 00:10:44,819
so we've released b FF years ago and and

247
00:10:44,819 --> 00:10:46,350
i'd like to think that you know at the

248
00:10:46,350 --> 00:10:47,879
time that we released it there wasn't

249
00:10:47,879 --> 00:10:49,829
really a good easy-to-use fuzzer that

250
00:10:49,829 --> 00:10:52,559
you could just point at something and

251
00:10:52,559 --> 00:10:53,699
not have to know like what's the

252
00:10:53,699 --> 00:10:56,779
structure of a PDF or anything like that

253
00:10:56,779 --> 00:10:59,399
and so we ended up releasing the source

254
00:10:59,399 --> 00:11:03,240
code for b FF onto github and due to the

255
00:11:03,240 --> 00:11:05,610
magic of open source software we got a

256
00:11:05,610 --> 00:11:08,370
pull request which is cool because it's

257
00:11:08,370 --> 00:11:10,290
like here's a little toy project of mine

258
00:11:10,290 --> 00:11:12,560
that like I wrote years ago

259
00:11:12,560 --> 00:11:14,899
not only are people using it but some

260
00:11:14,899 --> 00:11:16,670
guys saw it and said you know what I

261
00:11:16,670 --> 00:11:20,050
would like it if you added two features

262
00:11:20,050 --> 00:11:23,329
one I would like for the ability to copy

263
00:11:23,329 --> 00:11:27,649
a file to a fixed location in - I would

264
00:11:27,649 --> 00:11:30,110
like to also this came in the same pull

265
00:11:30,110 --> 00:11:32,600
request I would like to be able to run a

266
00:11:32,600 --> 00:11:36,410
program for each iteration so a little

267
00:11:36,410 --> 00:11:38,149
bit of information about like why is it

268
00:11:38,149 --> 00:11:40,790
important to copy - why would anybody

269
00:11:40,790 --> 00:11:43,010
have the need to copy it to a fixed

270
00:11:43,010 --> 00:11:46,220
location certain targets that you fuzz

271
00:11:46,220 --> 00:11:49,160
it might only open a file from a fixed

272
00:11:49,160 --> 00:11:51,800
location right and so this is an example

273
00:11:51,800 --> 00:11:53,810
from a fuzzing campaign of like where

274
00:11:53,810 --> 00:11:55,790
the temporary file you know for every

275
00:11:55,790 --> 00:11:57,709
iteration it does it mangles the the

276
00:11:57,709 --> 00:11:59,390
file a bit it puts it in a directory and

277
00:11:59,390 --> 00:12:02,329
then it cleans it up when it's done now

278
00:12:02,329 --> 00:12:04,130
if I'm ever working with something that

279
00:12:04,130 --> 00:12:06,140
opens a file from a fixed location

280
00:12:06,140 --> 00:12:08,600
that's not going to help

281
00:12:08,600 --> 00:12:10,640
so with this pull request here there's a

282
00:12:10,640 --> 00:12:13,190
new configuration option called cup copy

283
00:12:13,190 --> 00:12:15,890
fuzz - and I can basically say ok for

284
00:12:15,890 --> 00:12:17,810
every iteration that the fuzzer does I

285
00:12:17,810 --> 00:12:22,630
will copy it to this specific location

286
00:12:23,199 --> 00:12:28,790
so if I modify my BFF mo file I can now

287
00:12:28,790 --> 00:12:30,829
save so for every iteration I will have

288
00:12:30,829 --> 00:12:34,160
a copy of my mangled file in a fixed

289
00:12:34,160 --> 00:12:36,140
location so that's that's kind of neat

290
00:12:36,140 --> 00:12:38,600
that'll get me I've fussed some targets

291
00:12:38,600 --> 00:12:41,120
that that did actually open files from a

292
00:12:41,120 --> 00:12:43,220
fixed location and this will help solve

293
00:12:43,220 --> 00:12:47,510
that problem the other part this post

294
00:12:47,510 --> 00:12:51,260
process first option is it's a new

295
00:12:51,260 --> 00:12:52,970
feature that allows you for every time

296
00:12:52,970 --> 00:12:56,540
after you've mangled a file you can run

297
00:12:56,540 --> 00:13:00,140
an arbitrary program so in this

298
00:13:00,140 --> 00:13:02,420
particular case it's just user local bin

299
00:13:02,420 --> 00:13:07,930
post process but the output of that is

300
00:13:07,930 --> 00:13:12,290
every time a file gets mangled BFF will

301
00:13:12,290 --> 00:13:15,199
run whatever I tell it to run it could

302
00:13:15,199 --> 00:13:16,550
be a binary it could be a shell script

303
00:13:16,550 --> 00:13:18,290
it could be a bass grip depending on

304
00:13:18,290 --> 00:13:22,760
what platform on I'm on so the magic of

305
00:13:22,760 --> 00:13:24,800
these two options is when you put them

306
00:13:24,800 --> 00:13:26,130
together

307
00:13:26,130 --> 00:13:32,440
so with those options together I can run

308
00:13:32,440 --> 00:13:35,740
a shell script to do whatever I want

309
00:13:35,740 --> 00:13:38,140
with that file that I just mutated so

310
00:13:38,140 --> 00:13:41,350
I'm basically relying on BFF to take

311
00:13:41,350 --> 00:13:43,270
care of the file manipulation and and

312
00:13:43,270 --> 00:13:45,910
basically you know it's relatively

313
00:13:45,910 --> 00:13:49,030
straightforward but it's the whatever

314
00:13:49,030 --> 00:13:51,850
you want part that is interesting and

315
00:13:51,850 --> 00:13:53,770
that's what got us to this particular

316
00:13:53,770 --> 00:13:58,720
state of doing file system fuzzy I

317
00:13:58,720 --> 00:14:00,820
fought for a bit here I was like you

318
00:14:00,820 --> 00:14:02,500
know so if I go back to me trying to

319
00:14:02,500 --> 00:14:05,920
create a Rufus bootable thumb drive I

320
00:14:05,920 --> 00:14:07,870
thought well okay here's the standard

321
00:14:07,870 --> 00:14:11,590
FreeNAS 11.2 iso it crashes Windows

322
00:14:11,590 --> 00:14:14,230
seven part of your brain that like

323
00:14:14,230 --> 00:14:17,260
wonders is well what if what if I

324
00:14:17,260 --> 00:14:20,170
intentionally tried to get Windows to

325
00:14:20,170 --> 00:14:23,040
crash can I do that

326
00:14:23,040 --> 00:14:25,720
and so that's where I got into fuzzing

327
00:14:25,720 --> 00:14:27,370
file systems with BFF

328
00:14:27,370 --> 00:14:29,590
normally with BFF you're just gonna fuzz

329
00:14:29,590 --> 00:14:31,540
a particular target application say

330
00:14:31,540 --> 00:14:33,900
Microsoft Word or something like that

331
00:14:33,900 --> 00:14:36,160
what I started to think about is now

332
00:14:36,160 --> 00:14:38,770
with these two enhancements with this

333
00:14:38,770 --> 00:14:40,690
pull request I can do whatever I want I

334
00:14:40,690 --> 00:14:43,570
can I can create a script called test

335
00:14:43,570 --> 00:14:48,610
disk so for example if I'm on like the

336
00:14:48,610 --> 00:14:50,140
Linux platform and you don't have to

337
00:14:50,140 --> 00:14:52,120
really like look at the specific details

338
00:14:52,120 --> 00:14:54,400
here but this is like a copy of what I

339
00:14:54,400 --> 00:14:56,350
was doing on the Linux platform here and

340
00:14:56,350 --> 00:14:58,330
one of the things that I noticed is like

341
00:14:58,330 --> 00:15:00,070
sometimes I'm working with virtual

342
00:15:00,070 --> 00:15:02,260
machines here sometimes when you boot a

343
00:15:02,260 --> 00:15:04,900
machine a Linux machine I noticed that

344
00:15:04,900 --> 00:15:07,350
like it's root disk sometimes it's SDA

345
00:15:07,350 --> 00:15:10,960
sometimes it was s DB depending on how

346
00:15:10,960 --> 00:15:12,820
the planets are in alignment and stuff

347
00:15:12,820 --> 00:15:15,460
like that so in my test this script here

348
00:15:15,460 --> 00:15:18,070
I just do a simple verification of like

349
00:15:18,070 --> 00:15:19,780
which one is my root disk so I know

350
00:15:19,780 --> 00:15:22,240
which one is my USB disk and here's

351
00:15:22,240 --> 00:15:24,730
where the actual like filesystem fuzzing

352
00:15:24,730 --> 00:15:28,540
comes into play so I've basically I have

353
00:15:28,540 --> 00:15:31,060
a disk image that I'm starting with you

354
00:15:31,060 --> 00:15:32,560
know you can just use DD to create a

355
00:15:32,560 --> 00:15:34,420
disk image it could be various file

356
00:15:34,420 --> 00:15:38,050
systems what I'm doing is I'm now taking

357
00:15:38,050 --> 00:15:39,000
this mangled

358
00:15:39,000 --> 00:15:41,910
I'll system binary and I'm dding it to

359
00:15:41,910 --> 00:15:46,620
my virtual disk and then block size 10

360
00:15:46,620 --> 00:15:48,750
Meg's just to make it like not super

361
00:15:48,750 --> 00:15:54,890
slow when you DD bits to a virtual disk

362
00:15:54,890 --> 00:15:57,480
Linux doesn't know necessarily if

363
00:15:57,480 --> 00:15:59,970
anything has changed about that this so

364
00:15:59,970 --> 00:16:01,440
if I'm fuzzing a filesystem and I

365
00:16:01,440 --> 00:16:03,090
flipped with some bits in the partition

366
00:16:03,090 --> 00:16:04,470
table it's now going to present itself

367
00:16:04,470 --> 00:16:07,350
differently to the computer so in my

368
00:16:07,350 --> 00:16:09,690
shell script here I just run a command

369
00:16:09,690 --> 00:16:11,730
called part probe which basically says

370
00:16:11,730 --> 00:16:15,300
hey Linux go read the partition table of

371
00:16:15,300 --> 00:16:18,480
this particular disk and then I'll mount

372
00:16:18,480 --> 00:16:20,700
it and then I'll run the find command

373
00:16:20,700 --> 00:16:22,980
which basically is just you know in some

374
00:16:22,980 --> 00:16:24,810
cases just mounting a filesystem might

375
00:16:24,810 --> 00:16:26,190
cause something to be bad but what I

376
00:16:26,190 --> 00:16:27,780
want to do here is incrementally do

377
00:16:27,780 --> 00:16:30,090
things that trigger a little bit more of

378
00:16:30,090 --> 00:16:32,220
what is an operating system doing with

379
00:16:32,220 --> 00:16:33,000
the filesystem

380
00:16:33,000 --> 00:16:35,100
so the first thing I do is I mount it

381
00:16:35,100 --> 00:16:36,570
the next thing I do is run the find

382
00:16:36,570 --> 00:16:38,190
command and all that's doing is that's

383
00:16:38,190 --> 00:16:40,230
walking like the filesystem table so

384
00:16:40,230 --> 00:16:41,880
it's kind of saying you know what files

385
00:16:41,880 --> 00:16:44,490
are on the system and then the last

386
00:16:44,490 --> 00:16:46,050
thing I do is I try creating a tarball

387
00:16:46,050 --> 00:16:49,020
of it so not only is it you know you've

388
00:16:49,020 --> 00:16:50,280
got three different stages here you've

389
00:16:50,280 --> 00:16:52,260
got the mounting of a filesystem you've

390
00:16:52,260 --> 00:16:55,560
got the walking of the filesystem tree

391
00:16:55,560 --> 00:16:57,390
and then you also have the reading of

392
00:16:57,390 --> 00:16:59,430
the bits that are supposedly in these

393
00:16:59,430 --> 00:17:01,589
files on the file system so by doing all

394
00:17:01,589 --> 00:17:04,800
of these together and then finally at

395
00:17:04,800 --> 00:17:06,540
the end I can unmount it just you know

396
00:17:06,540 --> 00:17:08,849
so you have a whole sequence of here

397
00:17:08,849 --> 00:17:11,040
I've got a malformed filesystem and I've

398
00:17:11,040 --> 00:17:13,380
got one script that is doing like the

399
00:17:13,380 --> 00:17:15,089
things that would happen like if you

400
00:17:15,089 --> 00:17:17,790
like plug a thumb drive in your computer

401
00:17:17,790 --> 00:17:22,859
so basically you run BFF and eventually

402
00:17:22,859 --> 00:17:24,510
you might end up with something like

403
00:17:24,510 --> 00:17:27,569
that in a lot of Linux systems you want

404
00:17:27,569 --> 00:17:30,210
to actually see that because like it

405
00:17:30,210 --> 00:17:31,800
kind of hides that stuff visually from

406
00:17:31,800 --> 00:17:33,750
you at the point that your kernel panics

407
00:17:33,750 --> 00:17:35,880
you're not necessarily in a video mode

408
00:17:35,880 --> 00:17:37,650
where it's going to like give you this

409
00:17:37,650 --> 00:17:39,000
information so I had to do a little

410
00:17:39,000 --> 00:17:40,800
tweaking to just get you to see it but

411
00:17:40,800 --> 00:17:43,200
you know eventually you got a fuzz or

412
00:17:43,200 --> 00:17:45,179
you eventually you've got like a kernel

413
00:17:45,179 --> 00:17:48,390
panic there windows I do something very

414
00:17:48,390 --> 00:17:50,550
similar any virtual machine I have

415
00:17:50,550 --> 00:17:52,530
that's windows like I like to be able to

416
00:17:52,530 --> 00:17:54,350
do stuff from the command prompt and

417
00:17:54,350 --> 00:17:59,250
like I want my new utility so cygwin it

418
00:17:59,250 --> 00:18:00,780
is what it is but like if you really

419
00:18:00,780 --> 00:18:03,420
need like you knew like utilities on a

420
00:18:03,420 --> 00:18:05,460
Windows system it's been how I achieve

421
00:18:05,460 --> 00:18:08,130
that but we basically do the same thing

422
00:18:08,130 --> 00:18:10,980
we're doing DD on Windows I'm running a

423
00:18:10,980 --> 00:18:15,179
command called disk part now think about

424
00:18:15,179 --> 00:18:16,830
the disk part command is it doesn't

425
00:18:16,830 --> 00:18:18,960
accept command-line parameters that tell

426
00:18:18,960 --> 00:18:21,000
you what you want it to do so if you

427
00:18:21,000 --> 00:18:22,679
were to look at that file called rescan

428
00:18:22,679 --> 00:18:24,780
text it just has the word rescan in it

429
00:18:24,780 --> 00:18:27,420
so think it's odd that you can give it a

430
00:18:27,420 --> 00:18:29,370
file parameter but you can't just tell

431
00:18:29,370 --> 00:18:31,679
it what you want it to do I open

432
00:18:31,679 --> 00:18:32,400
Explorer

433
00:18:32,400 --> 00:18:36,480
I run the find command I kill Explorer I

434
00:18:36,480 --> 00:18:38,640
think at this particular time I wasn't

435
00:18:38,640 --> 00:18:40,050
necessarily doing the tarring and

436
00:18:40,050 --> 00:18:41,340
everything like that but it's a similar

437
00:18:41,340 --> 00:18:42,690
sort of thing where it's like you have a

438
00:18:42,690 --> 00:18:45,000
mangled file system and now you open it

439
00:18:45,000 --> 00:18:46,590
with Windows Explorer and then

440
00:18:46,590 --> 00:18:51,420
eventually you get that so cool how

441
00:18:51,420 --> 00:18:56,460
about Mac OS some of us use Mac's we do

442
00:18:56,460 --> 00:18:57,870
a similar thing where I'm checking for

443
00:18:57,870 --> 00:19:01,440
the root disk max it's really just a

444
00:19:01,440 --> 00:19:03,030
different syntax for different operating

445
00:19:03,030 --> 00:19:04,410
systems but here I've got something

446
00:19:04,410 --> 00:19:07,080
called disk II till I do some unmount I

447
00:19:07,080 --> 00:19:11,820
DD force I think I have a maybe a typo

448
00:19:11,820 --> 00:19:13,440
in there that should be a mount mount or

449
00:19:13,440 --> 00:19:15,690
something like that but basically you do

450
00:19:15,690 --> 00:19:17,220
a sequence of commands you have a

451
00:19:17,220 --> 00:19:19,160
mangled filesystem and then eventually

452
00:19:19,160 --> 00:19:23,130
you get your prize the end here is like

453
00:19:23,130 --> 00:19:25,290
you know let's be able to potentially

454
00:19:25,290 --> 00:19:27,330
crash all these different operating

455
00:19:27,330 --> 00:19:29,190
systems

456
00:19:29,190 --> 00:19:33,720
now what do we do if we want you know so

457
00:19:33,720 --> 00:19:35,369
like when your computer crashes what do

458
00:19:35,369 --> 00:19:35,989
you do

459
00:19:35,989 --> 00:19:38,099
reboot it and you move on with your day

460
00:19:38,099 --> 00:19:40,320
as if nothing happened and you know hope

461
00:19:40,320 --> 00:19:41,929
that it doesn't happen again

462
00:19:41,929 --> 00:19:44,639
curious folks might wonder well what did

463
00:19:44,639 --> 00:19:48,059
I do to get there so I can either don't

464
00:19:48,059 --> 00:19:50,879
ever do that again or perhaps maybe I

465
00:19:50,879 --> 00:19:52,379
want to look at the crash to figure out

466
00:19:52,379 --> 00:19:53,909
is there anything I can do interesting

467
00:19:53,909 --> 00:19:57,570
with this so let's start with our friend

468
00:19:57,570 --> 00:20:02,849
Linux I you know like I had a little bit

469
00:20:02,849 --> 00:20:06,809
of trouble I'm not really great with

470
00:20:06,809 --> 00:20:08,970
computers I'm gonna admit that and I'll

471
00:20:08,970 --> 00:20:13,409
say that Linux Linux confuses me

472
00:20:13,409 --> 00:20:14,729
sometime

473
00:20:14,729 --> 00:20:16,769
so I basically have a Linux system and

474
00:20:16,769 --> 00:20:19,080
like the Linux operating system crashed

475
00:20:19,080 --> 00:20:21,090
and I was like well how do I attach a

476
00:20:21,090 --> 00:20:22,979
debugger to like the curtain the kernel

477
00:20:22,979 --> 00:20:24,570
right like if the kernel crashes that's

478
00:20:24,570 --> 00:20:27,629
the core of your operating system how do

479
00:20:27,629 --> 00:20:29,879
I go and analyze that and I found an

480
00:20:29,879 --> 00:20:32,700
interesting quote here it's a little bit

481
00:20:32,700 --> 00:20:34,320
wordy here but this is basically I

482
00:20:34,320 --> 00:20:36,570
happen to believe that not having a

483
00:20:36,570 --> 00:20:38,399
kernel debugger forces people to think

484
00:20:38,399 --> 00:20:40,289
about their problem on a different level

485
00:20:40,289 --> 00:20:43,470
than with the debugger I think that

486
00:20:43,470 --> 00:20:45,389
without a debugger you don't get into

487
00:20:45,389 --> 00:20:46,950
that mindset where you know how it

488
00:20:46,950 --> 00:20:48,299
behaves and then you fix it from there

489
00:20:48,299 --> 00:20:51,389
so if you don't have a debugger you you

490
00:20:51,389 --> 00:20:52,979
get to understand things on a different

491
00:20:52,979 --> 00:20:55,470
level but just you know that's cool

492
00:20:55,470 --> 00:20:59,849
that's a really interesting way to think

493
00:20:59,849 --> 00:21:02,099
about stuff it's kind of a justification

494
00:21:02,099 --> 00:21:03,690
for like why don't we have a kernel

495
00:21:03,690 --> 00:21:07,320
debugger and then he writes you know

496
00:21:07,320 --> 00:21:09,299
because I'm a bastard and proud of it

497
00:21:09,299 --> 00:21:13,039
who would write such a thing oh my gosh

498
00:21:13,039 --> 00:21:17,159
yeah so cool

499
00:21:17,159 --> 00:21:19,139
and this was in a thread where somebody

500
00:21:19,139 --> 00:21:20,759
is saying you know oh yeah you know I

501
00:21:20,759 --> 00:21:22,649
really want a curve the bugger and it's

502
00:21:22,649 --> 00:21:25,349
like I'm not a coder I can't write

503
00:21:25,349 --> 00:21:29,190
anything in C you know I have to Google

504
00:21:29,190 --> 00:21:31,710
how to do a hello world however I'm

505
00:21:31,710 --> 00:21:34,669
interested in investigating a crash

506
00:21:34,669 --> 00:21:36,869
mm-hmm maybe that didn't fit into

507
00:21:36,869 --> 00:21:39,929
lionesses idea of well the bugger is a

508
00:21:39,929 --> 00:21:41,669
crutch that nobody should ever use and

509
00:21:41,669 --> 00:21:43,110
you know people get really late

510
00:21:43,110 --> 00:21:44,570
see when they have these crutches

511
00:21:44,570 --> 00:21:46,830
there's a link for it if you guys want

512
00:21:46,830 --> 00:21:48,480
to anyway I think these slides will be

513
00:21:48,480 --> 00:21:51,690
available at some point well it turns

514
00:21:51,690 --> 00:21:57,270
out you can you can do crash debugging

515
00:21:57,270 --> 00:22:04,110
if you have like a serial port II it's

516
00:22:04,110 --> 00:22:09,390
slow and unreliable in like I I didn't

517
00:22:09,390 --> 00:22:11,160
have a lot of fun with it right but what

518
00:22:11,160 --> 00:22:14,190
you can do is sorry that print is so

519
00:22:14,190 --> 00:22:16,679
small but basically you set properties

520
00:22:16,679 --> 00:22:18,090
for you set your baud rate for your

521
00:22:18,090 --> 00:22:20,400
serial port you know there we go we're

522
00:22:20,400 --> 00:22:22,400
gonna really transfer data very quickly

523
00:22:22,400 --> 00:22:27,240
and then eventually I get this crash and

524
00:22:27,240 --> 00:22:29,700
I can see a back trace here what's kind

525
00:22:29,700 --> 00:22:31,350
of interesting in this particular case

526
00:22:31,350 --> 00:22:32,880
here is I've got the instruction pointer

527
00:22:32,880 --> 00:22:34,950
somewhere where it shouldn't be hmm

528
00:22:34,950 --> 00:22:36,690
these are these are like the sniff test

529
00:22:36,690 --> 00:22:38,400
of like something something's probably

530
00:22:38,400 --> 00:22:40,679
pretty cool here if your instruction

531
00:22:40,679 --> 00:22:42,870
pointers ever somewhere where it

532
00:22:42,870 --> 00:22:44,700
shouldn't be you know the program will

533
00:22:44,700 --> 00:22:46,380
crash or if it's the Linux kernel the

534
00:22:46,380 --> 00:22:48,380
whole Linux operating system will crash

535
00:22:48,380 --> 00:22:51,179
this is the sniff test that like lets

536
00:22:51,179 --> 00:22:52,320
you know that you're on the right track

537
00:22:52,320 --> 00:22:53,549
to something interesting

538
00:22:53,549 --> 00:22:57,480
it shouldn't it should never happen well

539
00:22:57,480 --> 00:22:59,520
after a little bit of digging you know

540
00:22:59,520 --> 00:23:01,260
so like I was doing the serial port

541
00:23:01,260 --> 00:23:04,470
stuff and it's a pain like I hate it you

542
00:23:04,470 --> 00:23:05,880
have to have two virtual machines and

543
00:23:05,880 --> 00:23:07,200
then the two machines can talk to each

544
00:23:07,200 --> 00:23:09,240
other over the serial port it's virtual

545
00:23:09,240 --> 00:23:10,950
serial port but it's still it's not very

546
00:23:10,950 --> 00:23:14,309
fun I ended up finding a package called

547
00:23:14,309 --> 00:23:17,940
Linux crash dump the serious stuff is

548
00:23:17,940 --> 00:23:20,100
too much work and so if you just use

549
00:23:20,100 --> 00:23:21,750
your favorite search engine you can

550
00:23:21,750 --> 00:23:23,640
search for something called Linux crash

551
00:23:23,640 --> 00:23:26,640
dump and the way that this works is kind

552
00:23:26,640 --> 00:23:30,630
of magic right well I use the term magic

553
00:23:30,630 --> 00:23:33,600
but it's kind of cool the point that

554
00:23:33,600 --> 00:23:35,309
something happens in your kernel where

555
00:23:35,309 --> 00:23:38,520
the kernel crashes the operating system

556
00:23:38,520 --> 00:23:43,320
cannot do anything else safely so that

557
00:23:43,320 --> 00:23:45,030
blue screen that you see on windows or

558
00:23:45,030 --> 00:23:47,460
that panic screen that you see on linux

559
00:23:47,460 --> 00:23:49,110
like that's actually done in

560
00:23:49,110 --> 00:23:52,020
self-defense because it knows if i were

561
00:23:52,020 --> 00:23:54,840
to continue going if i do anything else

562
00:23:54,840 --> 00:23:56,520
at this point in time I might trash your

563
00:23:56,520 --> 00:23:56,880
data

564
00:23:56,880 --> 00:23:59,100
and it's basically I'm gonna stop right

565
00:23:59,100 --> 00:24:03,300
here and I'm not gonna allow it to

566
00:24:03,300 --> 00:24:05,460
continue the cool thing about the Linux

567
00:24:05,460 --> 00:24:07,350
crash dump package is it is an

568
00:24:07,350 --> 00:24:10,800
additional kernel that is loaded into

569
00:24:10,800 --> 00:24:12,510
your memory so assuming you have enough

570
00:24:12,510 --> 00:24:18,870
memory what this will do is at the point

571
00:24:18,870 --> 00:24:21,450
that your kernel crashes it jettisons

572
00:24:21,450 --> 00:24:23,850
the old original kernel and it launches

573
00:24:23,850 --> 00:24:25,620
the new kernel it's already in memory so

574
00:24:25,620 --> 00:24:26,970
it doesn't have to read discs it doesn't

575
00:24:26,970 --> 00:24:28,200
have to do anything that requires

576
00:24:28,200 --> 00:24:30,510
drivers or anything so basically at the

577
00:24:30,510 --> 00:24:32,010
point that your kernel crashes it now

578
00:24:32,010 --> 00:24:34,710
starts a new kernel and now that new

579
00:24:34,710 --> 00:24:36,600
kernel can do pretty much whatever it

580
00:24:36,600 --> 00:24:41,730
wants I was working on Ubuntu 1804 one

581
00:24:41,730 --> 00:24:43,290
of the problems I notice is that it just

582
00:24:43,290 --> 00:24:45,840
doesn't work by default and it's got me

583
00:24:45,840 --> 00:24:48,420
wondering it's like don't people look at

584
00:24:48,420 --> 00:24:51,390
kernel crashes am I really like in some

585
00:24:51,390 --> 00:24:56,430
area that like is untouched before well

586
00:24:56,430 --> 00:24:58,800
it turns out like you can go ahead and

587
00:24:58,800 --> 00:25:00,780
edit your grub file and like by default

588
00:25:00,780 --> 00:25:03,450
so I'm installing the clinics crash dump

589
00:25:03,450 --> 00:25:05,010
package that comes with the abun to

590
00:25:05,010 --> 00:25:07,860
package manager just doesn't work you

591
00:25:07,860 --> 00:25:09,660
have to manually go ahead and say ok I

592
00:25:09,660 --> 00:25:11,610
want to set aside more memory for this

593
00:25:11,610 --> 00:25:13,200
separate kernel and then it'll work so

594
00:25:13,200 --> 00:25:16,680
got that the other cool thing about the

595
00:25:16,680 --> 00:25:20,490
Linux crash dump package is you can

596
00:25:20,490 --> 00:25:22,440
modify this file and you can tell it to

597
00:25:22,440 --> 00:25:26,900
like put its files on like an NFS server

598
00:25:26,900 --> 00:25:29,400
and so basically I just edit this this

599
00:25:29,400 --> 00:25:31,230
file and I just basically say ok well

600
00:25:31,230 --> 00:25:33,480
I'm gonna put the panic file on this NFS

601
00:25:33,480 --> 00:25:35,670
server but I also want the file system

602
00:25:35,670 --> 00:25:37,860
that caused that panic so I can

603
00:25:37,860 --> 00:25:39,570
associate it right so I just modify this

604
00:25:39,570 --> 00:25:43,170
file and I do a DD and now I have a disk

605
00:25:43,170 --> 00:25:45,720
image so here's like a little silly

606
00:25:45,720 --> 00:25:48,360
animation of like what happens when

607
00:25:48,360 --> 00:25:51,150
you're doing the fuzzing on the left

608
00:25:51,150 --> 00:25:53,040
side I've got some number of virtual

609
00:25:53,040 --> 00:25:55,010
machines that's only limited by the

610
00:25:55,010 --> 00:25:58,290
computer resources I have and it's

611
00:25:58,290 --> 00:26:00,900
placing files in an NFS share but what

612
00:26:00,900 --> 00:26:02,580
I've got is a script that's periodically

613
00:26:02,580 --> 00:26:04,440
looking for duplicates so this is kind

614
00:26:04,440 --> 00:26:06,810
of cool because I can start my fuzzing I

615
00:26:06,810 --> 00:26:08,910
can come back later and I have a pile of

616
00:26:08,910 --> 00:26:09,660
what is

617
00:26:09,660 --> 00:26:11,850
to be unique rashes I just come back

618
00:26:11,850 --> 00:26:13,830
later it's great if you can do that if

619
00:26:13,830 --> 00:26:15,300
you can set it up in a way that things

620
00:26:15,300 --> 00:26:16,790
are automated and you can come back

621
00:26:16,790 --> 00:26:20,820
that's pretty cool on Windows I actually

622
00:26:20,820 --> 00:26:22,650
used the utility which is also very cool

623
00:26:22,650 --> 00:26:25,590
called virtual Cady it works both with

624
00:26:25,590 --> 00:26:28,680
VirtualBox and VMware and basically when

625
00:26:28,680 --> 00:26:30,840
you modify your Windows system to load

626
00:26:30,840 --> 00:26:35,190
this driver as helper driver it will go

627
00:26:35,190 --> 00:26:39,120
ahead and it will spawn windbag and I

628
00:26:39,120 --> 00:26:41,070
can now for a running Windows system

629
00:26:41,070 --> 00:26:42,510
I've got a debugger attached to it so

630
00:26:42,510 --> 00:26:45,030
the moment that something bad happens I

631
00:26:45,030 --> 00:26:46,560
will see it and I can run bang

632
00:26:46,560 --> 00:26:48,300
exploitable I can do whatever I want in

633
00:26:48,300 --> 00:26:50,460
this virtual machine there's yeah and

634
00:26:50,460 --> 00:26:51,810
the virtual machine is doing the fuzzing

635
00:26:51,810 --> 00:26:53,910
and I can see well it's kind of an eye

636
00:26:53,910 --> 00:26:55,530
test here but I can see it's complaining

637
00:26:55,530 --> 00:26:59,280
about exFAT it says invalid boot sector

638
00:26:59,280 --> 00:27:01,800
checksum check sums are the enemies of

639
00:27:01,800 --> 00:27:04,320
fuzzing because flip a bit and your

640
00:27:04,320 --> 00:27:06,570
checksum is no longer valid so I might

641
00:27:06,570 --> 00:27:08,670
not have really actually exercised exFAT

642
00:27:08,670 --> 00:27:11,370
too much but why stop at one you know

643
00:27:11,370 --> 00:27:13,500
like the system I was running it on had

644
00:27:13,500 --> 00:27:15,900
like a number core so just do one for

645
00:27:15,900 --> 00:27:18,690
each one of them and then and eventually

646
00:27:18,690 --> 00:27:22,970
I can now in my debugger I can load this

647
00:27:22,970 --> 00:27:25,320
Microsoft bugger tool that tells me

648
00:27:25,320 --> 00:27:26,340
about exploitability

649
00:27:26,340 --> 00:27:28,380
and I can see I've now got a crash here

650
00:27:28,380 --> 00:27:29,970
and it says it's exploitable it's a

651
00:27:29,970 --> 00:27:31,890
right access violation in kernel memory

652
00:27:31,890 --> 00:27:35,400
the kernel can do whatever it wants if I

653
00:27:35,400 --> 00:27:36,930
have ever got a right access violation

654
00:27:36,930 --> 00:27:39,180
in kernel memory its potential that that

655
00:27:39,180 --> 00:27:40,850
might be something that could be

656
00:27:40,850 --> 00:27:45,080
leveraged to do something interesting

657
00:27:45,080 --> 00:27:48,000
let's go to our friend Mac OS well it

658
00:27:48,000 --> 00:27:50,370
turns out Mac OS has some guidance on

659
00:27:50,370 --> 00:27:51,690
how to set it up for kernel debugging

660
00:27:51,690 --> 00:27:54,360
which is relatively straightforward you

661
00:27:54,360 --> 00:27:55,710
basically install the Mac OS kernel

662
00:27:55,710 --> 00:27:58,140
debug kit that gives you a debug version

663
00:27:58,140 --> 00:28:00,120
of the Mac OS kernel and it also has

664
00:28:00,120 --> 00:28:02,190
like some symbol files and some other

665
00:28:02,190 --> 00:28:05,340
things like that and you basically you

666
00:28:05,340 --> 00:28:06,900
can do this thing to update the NVRAM

667
00:28:06,900 --> 00:28:09,410
and essentially in your virtual machine

668
00:28:09,410 --> 00:28:11,250
everything here is through virtual

669
00:28:11,250 --> 00:28:13,320
machines you know you can't I really

670
00:28:13,320 --> 00:28:14,640
wouldn't want to fuzz things on an

671
00:28:14,640 --> 00:28:17,190
actual live system but you boot the

672
00:28:17,190 --> 00:28:18,690
virtual machine and it basically says

673
00:28:18,690 --> 00:28:21,380
hey I want to use this kernel debugger

674
00:28:21,380 --> 00:28:23,430
the neat thing about the

675
00:28:23,430 --> 00:28:26,010
kernel debugging in Mac OS is I can

676
00:28:26,010 --> 00:28:29,340
connect to it with like TCP so I just

677
00:28:29,340 --> 00:28:32,040
give it an IP address and like I can now

678
00:28:32,040 --> 00:28:34,020
interactively so when it crashes

679
00:28:34,020 --> 00:28:37,260
encountered on the Mac OS I can run our

680
00:28:37,260 --> 00:28:41,280
friend ll DB our debugger I tell it KDP

681
00:28:41,280 --> 00:28:44,520
remote and then give it an IP address so

682
00:28:44,520 --> 00:28:47,880
at this point in time it now connects to

683
00:28:47,880 --> 00:28:50,100
that particular system and I can do a

684
00:28:50,100 --> 00:28:52,920
back trace and I could see information

685
00:28:52,920 --> 00:28:58,860
about my crash I could see right here

686
00:28:58,860 --> 00:29:03,150
that I've got panic trap to debugger so

687
00:29:03,150 --> 00:29:04,680
I've actually encountered a kernel panic

688
00:29:04,680 --> 00:29:07,170
in like the traditional sense in that

689
00:29:07,170 --> 00:29:10,680
like I've see a call to this panic trap

690
00:29:10,680 --> 00:29:12,330
to debugger

691
00:29:12,330 --> 00:29:13,980
I could see the source code that caused

692
00:29:13,980 --> 00:29:17,880
the panic I could see NTFS collate in

693
00:29:17,880 --> 00:29:23,400
NTFS version 94 line 102 then at the

694
00:29:23,400 --> 00:29:25,020
very end like it actually doesn't tell

695
00:29:25,020 --> 00:29:26,970
me where that code lives because when

696
00:29:26,970 --> 00:29:29,190
you install the Mac OS debugging kit you

697
00:29:29,190 --> 00:29:31,710
don't actually get the symbols for all

698
00:29:31,710 --> 00:29:33,810
of the drivers because it would be an

699
00:29:33,810 --> 00:29:35,340
enormous download so they give you the

700
00:29:35,340 --> 00:29:37,590
prime ones but I'll tell you that frame

701
00:29:37,590 --> 00:29:41,580
lives in the NTFS kernel module but you

702
00:29:41,580 --> 00:29:43,050
can kind of tell because of the the

703
00:29:43,050 --> 00:29:44,880
frame above it where it says it's in you

704
00:29:44,880 --> 00:29:46,350
know it basically is giving you the

705
00:29:46,350 --> 00:29:48,270
panic string that's not the actual code

706
00:29:48,270 --> 00:29:49,890
there but it's just telling you hey I've

707
00:29:49,890 --> 00:29:52,530
got a panic Wow

708
00:29:52,530 --> 00:29:55,850
I was thinking for a little bit wait

709
00:29:55,850 --> 00:30:02,160
panic why would there be a panic this is

710
00:30:02,160 --> 00:30:05,610
the code this is NTFS version 95 94 and

711
00:30:05,610 --> 00:30:09,660
I can see a line here where if this data

712
00:30:09,660 --> 00:30:11,760
length is less than the size of the file

713
00:30:11,760 --> 00:30:14,880
name attribute I call the function

714
00:30:14,880 --> 00:30:17,490
called panic this is not a surprise to

715
00:30:17,490 --> 00:30:19,920
anybody at Apple Bay nobody has thought

716
00:30:19,920 --> 00:30:21,630
well okay I did something wrong and I

717
00:30:21,630 --> 00:30:23,760
now have a crash they had basically said

718
00:30:23,760 --> 00:30:26,010
in the code that we have running in

719
00:30:26,010 --> 00:30:29,160
kernel and I'm doing a check and if this

720
00:30:29,160 --> 00:30:31,230
check fails I'm gonna panic the whole

721
00:30:31,230 --> 00:30:33,160
sister

722
00:30:33,160 --> 00:30:37,490
in the NTFS code now the reason that

723
00:30:37,490 --> 00:30:38,810
somebody would panic I'd mentioned

724
00:30:38,810 --> 00:30:40,910
before is you panic so that you don't

725
00:30:40,910 --> 00:30:44,620
cause further corruption in a system

726
00:30:44,620 --> 00:30:48,590
yeah you can see the panic here when

727
00:30:48,590 --> 00:30:50,180
something happens in the kernel space

728
00:30:50,180 --> 00:30:52,940
you don't want to trash your files it

729
00:30:52,940 --> 00:30:54,620
could be an access violation in the

730
00:30:54,620 --> 00:30:56,150
kernel it could be an explicit call to

731
00:30:56,150 --> 00:30:58,820
the panic but the thing that I was

732
00:30:58,820 --> 00:31:02,150
thinking is this is an NTFS code your

733
00:31:02,150 --> 00:31:05,290
Mac OS will never be running off of NTFS

734
00:31:05,290 --> 00:31:09,290
so why is it that if it ever encounters

735
00:31:09,290 --> 00:31:14,990
a corrupt NTFS filesystem it causes a

736
00:31:14,990 --> 00:31:18,560
panic so I kind of shrugged about that I

737
00:31:18,560 --> 00:31:20,300
was like well maybe just maybe don't

738
00:31:20,300 --> 00:31:20,930
panic

739
00:31:20,930 --> 00:31:23,150
I mean it's like I told Apple that I

740
00:31:23,150 --> 00:31:24,560
think they're there they're going to be

741
00:31:24,560 --> 00:31:26,180
fixing it I don't know if they're

742
00:31:26,180 --> 00:31:28,280
removing the panic from it or just

743
00:31:28,280 --> 00:31:31,610
fixing the bug I call it a bug because

744
00:31:31,610 --> 00:31:33,590
like you know you're using a computer

745
00:31:33,590 --> 00:31:35,690
system the operating system should never

746
00:31:35,690 --> 00:31:38,600
crash this isn't the Windows 95 days

747
00:31:38,600 --> 00:31:40,040
where you look at it funny and the whole

748
00:31:40,040 --> 00:31:41,600
thing blue screens because it's all in

749
00:31:41,600 --> 00:31:43,220
the same same memory space and

750
00:31:43,220 --> 00:31:46,040
everything so I started to think about

751
00:31:46,040 --> 00:31:51,820
attack vectors there's a YouTube video

752
00:31:51,820 --> 00:31:55,280
if if you probably use their search

753
00:31:55,280 --> 00:31:57,770
engine to find the death by thumb drive

754
00:31:57,770 --> 00:31:59,120
you'll find this and I basically go

755
00:31:59,120 --> 00:32:01,160
through and I demonstrate plugging it

756
00:32:01,160 --> 00:32:04,280
into an a Window System a Linux system a

757
00:32:04,280 --> 00:32:06,830
Mac system it's all the exact same thumb

758
00:32:06,830 --> 00:32:13,550
drive which if anybody is feeling lucky

759
00:32:13,550 --> 00:32:14,900
if they think they have a computer

760
00:32:14,900 --> 00:32:16,880
system that's not gonna autumn out file

761
00:32:16,880 --> 00:32:19,130
systems I will happily lend this to you

762
00:32:19,130 --> 00:32:21,080
for a couple seconds while I watch to

763
00:32:21,080 --> 00:32:22,370
see what happens but this is the very

764
00:32:22,370 --> 00:32:24,560
thumb drive that happened here but

765
00:32:24,560 --> 00:32:25,880
basically your three major operating

766
00:32:25,880 --> 00:32:27,200
systems and I think I threw in a free

767
00:32:27,200 --> 00:32:29,840
BSD just for the hell of it and they all

768
00:32:29,840 --> 00:32:33,410
crash almost all of them were in NTFS I

769
00:32:33,410 --> 00:32:35,000
think with Linux it ended up being like

770
00:32:35,000 --> 00:32:39,050
Reiser FS and JFS one of the things that

771
00:32:39,050 --> 00:32:40,490
you'll know that like with like a nun

772
00:32:40,490 --> 00:32:42,560
bun to system you get a lot of stuff by

773
00:32:42,560 --> 00:32:44,810
default if I look at the file systems

774
00:32:44,810 --> 00:32:46,330
that a bunch of supports modify

775
00:32:46,330 --> 00:32:49,059
it's got archaic stuff right then riser

776
00:32:49,059 --> 00:32:52,419
fest it's not under development you know

777
00:32:52,419 --> 00:32:54,340
the guy murdered his wife or something

778
00:32:54,340 --> 00:32:55,090
you know

779
00:32:55,090 --> 00:32:58,960
don't don't don't do that but it's still

780
00:32:58,960 --> 00:33:00,610
there like when you get your bunty

781
00:33:00,610 --> 00:33:02,590
system it has that code there and it's

782
00:33:02,590 --> 00:33:05,710
in kernel and waiting for whatever now I

783
00:33:05,710 --> 00:33:08,169
started to wonder okay well so if you

784
00:33:08,169 --> 00:33:09,730
have physical access to a computer you

785
00:33:09,730 --> 00:33:12,100
kind of win already right like we wrote

786
00:33:12,100 --> 00:33:14,590
a vulnerability note on it like years

787
00:33:14,590 --> 00:33:16,149
ago that basically said if you have

788
00:33:16,149 --> 00:33:18,279
physical access to a system that might

789
00:33:18,279 --> 00:33:20,260
violate some sort of protections that

790
00:33:20,260 --> 00:33:23,710
you have in place but I wanted to dig a

791
00:33:23,710 --> 00:33:24,940
little bit deeper what can you do

792
00:33:24,940 --> 00:33:26,799
without having physical access because

793
00:33:26,799 --> 00:33:29,169
you know if I'm touching your computer

794
00:33:29,169 --> 00:33:30,730
and I can cause it to crash all right

795
00:33:30,730 --> 00:33:32,320
that's cool but I could also just knock

796
00:33:32,320 --> 00:33:34,899
it off the counter and like yeah you're

797
00:33:34,899 --> 00:33:38,409
just causing vandalism so I started

798
00:33:38,409 --> 00:33:39,909
thinking about max well then it turns

799
00:33:39,909 --> 00:33:43,990
out all my disk images were dot DD files

800
00:33:43,990 --> 00:33:46,059
and like max don't do anything with dot

801
00:33:46,059 --> 00:33:48,789
DD files but if I rename that to dot dmg

802
00:33:48,789 --> 00:33:52,269
it just handles it in the same way as

803
00:33:52,269 --> 00:33:55,389
like it were a disk image so that's kind

804
00:33:55,389 --> 00:33:56,799
of cool so if I'm the attacker I'll

805
00:33:56,799 --> 00:34:01,720
rename my disk image to dmg one of the

806
00:34:01,720 --> 00:34:03,399
things I noticed is that Safari I think

807
00:34:03,399 --> 00:34:04,990
chrome even does this I hate that they

808
00:34:04,990 --> 00:34:06,850
do this you have to turn this off please

809
00:34:06,850 --> 00:34:08,980
if you're using a web browser that auto

810
00:34:08,980 --> 00:34:12,359
download stuff turn that feature off

811
00:34:12,359 --> 00:34:14,530
Apple decided at some point they're like

812
00:34:14,530 --> 00:34:15,879
you know what I'm going to open safe

813
00:34:15,879 --> 00:34:21,489
files after downloading this is a sorry

814
00:34:21,489 --> 00:34:23,199
that this checkbox in there is a little

815
00:34:23,199 --> 00:34:26,050
bit different because at some point in

816
00:34:26,050 --> 00:34:30,760
time safari did actually open dmg files

817
00:34:30,760 --> 00:34:32,530
automatically so if you're downloading a

818
00:34:32,530 --> 00:34:34,929
disk image it would mount that for you

819
00:34:34,929 --> 00:34:37,599
automatically and stuff happens luckily

820
00:34:37,599 --> 00:34:40,030
they've changed that behavior but they

821
00:34:40,030 --> 00:34:41,379
still download the file in the first

822
00:34:41,379 --> 00:34:45,609
place so all the user needs to do is I'm

823
00:34:45,609 --> 00:34:47,199
visiting the website all of a sudden I

824
00:34:47,199 --> 00:34:49,270
have a dmg in my downloads and what

825
00:34:49,270 --> 00:34:51,570
happens if I double click on it anybody

826
00:34:51,570 --> 00:34:55,810
anybody want to guess yeah so we just

827
00:34:55,810 --> 00:34:57,339
crashed the whole operating system as

828
00:34:57,339 --> 00:35:00,190
the result of double-clicking a file

829
00:35:00,190 --> 00:35:02,380
that just ended up on my system it

830
00:35:02,380 --> 00:35:04,000
shouldn't happen it makes me feel

831
00:35:04,000 --> 00:35:08,280
uncomfortable about how computers work

832
00:35:08,280 --> 00:35:10,720
how about Linux Linux is a little bit

833
00:35:10,720 --> 00:35:16,180
different I'm surprised that I'm going

834
00:35:16,180 --> 00:35:18,100
to say this but like Linux is actually a

835
00:35:18,100 --> 00:35:19,720
little bit safer with how it handles

836
00:35:19,720 --> 00:35:22,360
disk images in that I would need to

837
00:35:22,360 --> 00:35:24,280
after I download my disk image I would

838
00:35:24,280 --> 00:35:26,140
still have to say open with other

839
00:35:26,140 --> 00:35:29,110
application and then I manually choose

840
00:35:29,110 --> 00:35:31,390
disk image mounter I couldn't find a

841
00:35:31,390 --> 00:35:32,710
file extension that just actually

842
00:35:32,710 --> 00:35:34,650
mounted it as a filesystem

843
00:35:34,650 --> 00:35:36,760
but as soon as I click that and I hit

844
00:35:36,760 --> 00:35:40,030
select alright all my work is gone if I

845
00:35:40,030 --> 00:35:43,090
hope I saved my Word document than it

846
00:35:43,090 --> 00:35:47,500
was on let's go to the windows and of

847
00:35:47,500 --> 00:35:49,450
things it turns out there's a capability

848
00:35:49,450 --> 00:35:53,020
in RDP it is optional but there is

849
00:35:53,020 --> 00:35:55,270
something called remote FX which allows

850
00:35:55,270 --> 00:35:58,540
you to do USB device pass-through the

851
00:35:58,540 --> 00:36:00,040
cool thing about that is like I might

852
00:36:00,040 --> 00:36:02,070
have like a two-factor authentication

853
00:36:02,070 --> 00:36:04,690
singing jig and I don't have to worry

854
00:36:04,690 --> 00:36:07,180
about like that's my RDP client

855
00:36:07,180 --> 00:36:08,830
understanding that and is it going to do

856
00:36:08,830 --> 00:36:10,210
what it needs to do it's basically just

857
00:36:10,210 --> 00:36:13,540
saying hey I'm going to convey what's in

858
00:36:13,540 --> 00:36:16,300
my USB port and I'm gonna allow it to

859
00:36:16,300 --> 00:36:19,330
connect to that remote system the thing

860
00:36:19,330 --> 00:36:21,100
about this that's not really great is

861
00:36:21,100 --> 00:36:24,220
yeah it's optional and it's only for

862
00:36:24,220 --> 00:36:26,110
authenticated users so you're limiting

863
00:36:26,110 --> 00:36:28,060
your attacks to like it has to be an

864
00:36:28,060 --> 00:36:30,160
authenticated user and it has to be on a

865
00:36:30,160 --> 00:36:31,990
system where they've decided I want the

866
00:36:31,990 --> 00:36:35,440
ability to do usb pastor but you know I

867
00:36:35,440 --> 00:36:36,790
tried it you know set up a virtual

868
00:36:36,790 --> 00:36:38,620
machine did the USB pass-through and

869
00:36:38,620 --> 00:36:44,070
boom Windows 7 crashes stop in the NTFS

870
00:36:44,070 --> 00:36:46,240
but I started to dig a little bit deeper

871
00:36:46,240 --> 00:36:48,610
and it turns out if you have a disk

872
00:36:48,610 --> 00:36:52,180
image on Windows you can take that disk

873
00:36:52,180 --> 00:36:57,220
image and you can turn that into a VHD

874
00:36:57,220 --> 00:36:59,400
file and that's basically like a disk

875
00:36:59,400 --> 00:37:02,710
image format that is used with hyper-v

876
00:37:02,710 --> 00:37:04,720
which is like the default hypervisor

877
00:37:04,720 --> 00:37:06,460
that comes with Windows 10 and Windows 8

878
00:37:06,460 --> 00:37:09,010
and later and stuff like that the cool

879
00:37:09,010 --> 00:37:11,500
thing about this is like this tool it

880
00:37:11,500 --> 00:37:13,990
turns out a VHD is really just the same

881
00:37:13,990 --> 00:37:16,150
the DD disk image with like a little bit

882
00:37:16,150 --> 00:37:18,310
of metadata at the end appended onto it

883
00:37:18,310 --> 00:37:20,619
so really this VHD tool doesn't do

884
00:37:20,619 --> 00:37:23,020
anything super clever just like puts the

885
00:37:23,020 --> 00:37:25,480
stuff at the end that Windows is looking

886
00:37:25,480 --> 00:37:29,590
for so let's imagine on Windows we've

887
00:37:29,590 --> 00:37:31,840
downloaded this VHD file it's either

888
00:37:31,840 --> 00:37:36,750
emailed to us and we double-click it

889
00:37:36,750 --> 00:37:39,340
anybody see a theme here what happens

890
00:37:39,340 --> 00:37:41,080
after you double-click it it crashes

891
00:37:41,080 --> 00:37:43,240
your computer it doesn't prompt you it

892
00:37:43,240 --> 00:37:44,590
doesn't say hey would you like to open

893
00:37:44,590 --> 00:37:46,360
this file that you just downloaded from

894
00:37:46,360 --> 00:37:51,400
the internet you know so Inc I wish it

895
00:37:51,400 --> 00:37:54,130
didn't do that so I had a question here

896
00:37:54,130 --> 00:37:56,860
so like the the VHD stuff and VHDX is

897
00:37:56,860 --> 00:37:59,320
like a modern version of VHD i was

898
00:37:59,320 --> 00:38:01,360
wondering are there security products

899
00:38:01,360 --> 00:38:04,750
that scan with inside of VHD or VHDX

900
00:38:04,750 --> 00:38:07,330
files when do you have like an email

901
00:38:07,330 --> 00:38:09,460
server it's gonna scan zip files it

902
00:38:09,460 --> 00:38:11,680
might scan even more obscure like

903
00:38:11,680 --> 00:38:17,350
archive formats search you know does

904
00:38:17,350 --> 00:38:19,600
anybody here know if you have is it does

905
00:38:19,600 --> 00:38:22,480
anybody know of a product that scans VHD

906
00:38:22,480 --> 00:38:26,230
or VHDX files let's say theoretically

907
00:38:26,230 --> 00:38:29,320
there is one that exists what does that

908
00:38:29,320 --> 00:38:33,760
mean to us well whatever's doing the

909
00:38:33,760 --> 00:38:37,030
scanning if it's parsing VHDX files it's

910
00:38:37,030 --> 00:38:39,100
probably parsing the file system within

911
00:38:39,100 --> 00:38:41,920
that file maybe that scanner is going to

912
00:38:41,920 --> 00:38:45,730
crash well let's say what what if they

913
00:38:45,730 --> 00:38:48,430
don't scan VHD files which i think most

914
00:38:48,430 --> 00:38:52,480
of them do not you have to be aware that

915
00:38:52,480 --> 00:38:55,450
like here's a file format that you have

916
00:38:55,450 --> 00:38:58,510
zero visibility into when you're

917
00:38:58,510 --> 00:39:00,190
somebody emails you a zip file you've

918
00:39:00,190 --> 00:39:01,990
got all these tools that keep you safe

919
00:39:01,990 --> 00:39:05,850
you know they spent lots of money on it

920
00:39:05,850 --> 00:39:10,030
VHD is is kind of interesting here now

921
00:39:10,030 --> 00:39:11,290
there's another thing that i mentioned

922
00:39:11,290 --> 00:39:13,690
earlier about when you download a file

923
00:39:13,690 --> 00:39:16,930
from the internet Windows tags that file

924
00:39:16,930 --> 00:39:18,340
with something called the mark of the

925
00:39:18,340 --> 00:39:21,280
web and this is basically a piece of

926
00:39:21,280 --> 00:39:22,990
metadata that says hey this came from

927
00:39:22,990 --> 00:39:25,300
somewhere dangerous email internet web

928
00:39:25,300 --> 00:39:26,740
browser or something like that so here's

929
00:39:26,740 --> 00:39:28,960
Microsoft Word

930
00:39:28,960 --> 00:39:32,240
if I open up this Word document it says

931
00:39:32,240 --> 00:39:34,040
hey I've opened this in protected view

932
00:39:34,040 --> 00:39:37,040
it runs with flank low privileges like

933
00:39:37,040 --> 00:39:39,380
lower than even like a restricted user

934
00:39:39,380 --> 00:39:42,080
so basically it keeps me safe but how

935
00:39:42,080 --> 00:39:43,790
does it know that how does it know that

936
00:39:43,790 --> 00:39:45,500
they came from the Internet

937
00:39:45,500 --> 00:39:47,210
well it turns out if you open up a

938
00:39:47,210 --> 00:39:51,109
command prompt here I can do their /r

939
00:39:51,109 --> 00:39:53,450
and it'll tell me like this metadata you

940
00:39:53,450 --> 00:39:56,180
know this is an NTFS metadata sort of

941
00:39:56,180 --> 00:39:59,420
thing and I can actually see here here's

942
00:39:59,420 --> 00:40:01,640
his own identifier and if you want to

943
00:40:01,640 --> 00:40:02,960
this is kind of neat you can actually

944
00:40:02,960 --> 00:40:05,990
just run notepad and you can open that

945
00:40:05,990 --> 00:40:08,300
file and it tells you exactly like

946
00:40:08,300 --> 00:40:10,430
here's where this file came from zone ID

947
00:40:10,430 --> 00:40:12,109
3 means it came from the internet

948
00:40:12,109 --> 00:40:15,590
somewhere sketchy starting with Windows

949
00:40:15,590 --> 00:40:18,770
10 they actually put like the URL from

950
00:40:18,770 --> 00:40:20,990
which the file was downloaded so like

951
00:40:20,990 --> 00:40:22,970
it's kind of cool from like a forensics

952
00:40:22,970 --> 00:40:24,920
perspective and like if you have a bad

953
00:40:24,920 --> 00:40:27,170
file on your system you can tell where

954
00:40:27,170 --> 00:40:27,859
it came from

955
00:40:27,859 --> 00:40:30,500
so any download that you have and this

956
00:40:30,500 --> 00:40:33,230
is through email or anything like that

957
00:40:33,230 --> 00:40:34,970
well email have to figure out what like

958
00:40:34,970 --> 00:40:37,040
how it indicates that but if I download

959
00:40:37,040 --> 00:40:38,660
something with a web browser it tells me

960
00:40:38,660 --> 00:40:40,880
okay this came from attacker dot

961
00:40:40,880 --> 00:40:43,160
example.com so that's that's kind of

962
00:40:43,160 --> 00:40:52,550
neat now let's say I have this document

963
00:40:52,550 --> 00:40:55,910
that I downloaded from the internet and

964
00:40:55,910 --> 00:40:57,530
I get this button here and it says you

965
00:40:57,530 --> 00:40:59,180
know enable content this is just the

966
00:40:59,180 --> 00:41:00,560
proof of concept that I have and all

967
00:41:00,560 --> 00:41:03,500
right and runs Cal right very simple

968
00:41:03,500 --> 00:41:05,119
sort of stuff mark of the web protects

969
00:41:05,119 --> 00:41:06,950
you from that just by giving like one

970
00:41:06,950 --> 00:41:09,320
additional click that no user in the

971
00:41:09,320 --> 00:41:10,910
right mind would ever possibly click

972
00:41:10,910 --> 00:41:12,740
because they understand the consequences

973
00:41:12,740 --> 00:41:15,020
of clicking it right that's how it works

974
00:41:15,020 --> 00:41:17,900
I think well let's think about mark of

975
00:41:17,900 --> 00:41:20,810
the web and VHD so the mark of the web

976
00:41:20,810 --> 00:41:23,720
is actually applied to these VHDX files

977
00:41:23,720 --> 00:41:27,530
I showed in the prior slide it's there

978
00:41:27,530 --> 00:41:32,119
so the mark of the web is there so it's

979
00:41:32,119 --> 00:41:33,950
applied the problem is is that Windows

980
00:41:33,950 --> 00:41:36,980
doesn't treat a downloaded VHDX or VHD

981
00:41:36,980 --> 00:41:39,050
or VHDX file any differently than it

982
00:41:39,050 --> 00:41:41,390
otherwise would be

983
00:41:41,390 --> 00:41:43,520
and I get the impression that security

984
00:41:43,520 --> 00:41:46,570
devices don't really scan VHD files or

985
00:41:46,570 --> 00:41:49,010
VHDX files what can we conclude from

986
00:41:49,010 --> 00:41:52,400
that PhDs and VHD X's are pretty

987
00:41:52,400 --> 00:41:55,940
interesting from an attacker if I want

988
00:41:55,940 --> 00:41:58,340
to deploy if I want to deliver my

989
00:41:58,340 --> 00:42:00,320
malware to any organization I'm gonna

990
00:42:00,320 --> 00:42:02,810
put it in a VHD now you have to be

991
00:42:02,810 --> 00:42:05,690
running Windows 10 to be able to just

992
00:42:05,690 --> 00:42:07,910
double click on it Windows 7 can like

993
00:42:07,910 --> 00:42:09,920
you can manually bound it but it's like

994
00:42:09,920 --> 00:42:12,370
no end-users ever gonna fall for

995
00:42:12,370 --> 00:42:18,080
anything in a VHD or a VHDX file but if

996
00:42:18,080 --> 00:42:19,580
you're on a Windows 10 platform that's

997
00:42:19,580 --> 00:42:22,130
an excellent vehicle for bad stuff to

998
00:42:22,130 --> 00:42:28,490
come in so finally just to kind of wrap

999
00:42:28,490 --> 00:42:31,220
things up and I'll open it if anybody

1000
00:42:31,220 --> 00:42:32,960
has any questions or if anybody wants to

1001
00:42:32,960 --> 00:42:34,760
try out my thumb drive I will happily

1002
00:42:34,760 --> 00:42:37,610
learn it to you I promise that it will I

1003
00:42:37,610 --> 00:42:40,550
have not done anything to cause this

1004
00:42:40,550 --> 00:42:42,620
thumb drive to do anything permanent to

1005
00:42:42,620 --> 00:42:44,180
your computer like running malicious

1006
00:42:44,180 --> 00:42:48,920
code assuming you trust me so just a

1007
00:42:48,920 --> 00:42:52,100
little bit back to fussing with BFF in

1008
00:42:52,100 --> 00:42:53,960
like the standard way that you're

1009
00:42:53,960 --> 00:42:57,500
running BFF where I'm running a target

1010
00:42:57,500 --> 00:43:02,420
application it has a capability that I

1011
00:43:02,420 --> 00:43:04,760
like to think of it as atomic iterations

1012
00:43:04,760 --> 00:43:07,790
which is not like some awful prog rock

1013
00:43:07,790 --> 00:43:09,560
band name or something it's actually

1014
00:43:09,560 --> 00:43:12,170
what that means is every time I launch

1015
00:43:12,170 --> 00:43:15,740
my target application it either crashes

1016
00:43:15,740 --> 00:43:17,540
or it doesn't crashes and then it goes

1017
00:43:17,540 --> 00:43:20,330
away and then I start right over again

1018
00:43:20,330 --> 00:43:22,970
so every single iteration of a fuzzing

1019
00:43:22,970 --> 00:43:29,660
campaign exists in isolation BFF itself

1020
00:43:29,660 --> 00:43:31,940
will automatically deduplicate crashes

1021
00:43:31,940 --> 00:43:33,910
so if I'm fuzzing a target application

1022
00:43:33,910 --> 00:43:36,260
BFF will determine which ones are dupes

1023
00:43:36,260 --> 00:43:39,850
which which ones I've seen before

1024
00:43:40,390 --> 00:43:43,009
it will also do exploit ability

1025
00:43:43,009 --> 00:43:45,229
determination it does something called

1026
00:43:45,229 --> 00:43:47,930
crash minimization which is kind of neat

1027
00:43:47,930 --> 00:43:50,630
because like let's say I'm fuzzing a

1028
00:43:50,630 --> 00:43:52,609
Word document and I get something that

1029
00:43:52,609 --> 00:43:55,279
causes a crash if I happen to manipulate

1030
00:43:55,279 --> 00:43:57,319
a hundred bytes of that file it could be

1031
00:43:57,319 --> 00:43:58,969
that like there's only one byte that

1032
00:43:58,969 --> 00:44:00,229
caused the crash

1033
00:44:00,229 --> 00:44:02,719
so BFF will automatically determine

1034
00:44:02,719 --> 00:44:05,029
what's the minimum amount of file

1035
00:44:05,029 --> 00:44:07,190
manipulation that will cause that same

1036
00:44:07,190 --> 00:44:10,729
sort of crash string minimization is a

1037
00:44:10,729 --> 00:44:12,499
thing that helps exploit developers in

1038
00:44:12,499 --> 00:44:14,630
that let's say I start out with a word

1039
00:44:14,630 --> 00:44:17,359
document and it crashes if I do a string

1040
00:44:17,359 --> 00:44:19,039
minimization of that what that'll end up

1041
00:44:19,039 --> 00:44:21,140
doing is it'll replace as many bytes as

1042
00:44:21,140 --> 00:44:22,640
possible in that file with the

1043
00:44:22,640 --> 00:44:25,039
Metasploit string so basically it'll say

1044
00:44:25,039 --> 00:44:27,890
any bytes that don't affect the

1045
00:44:27,890 --> 00:44:30,170
program's ability to open the file and

1046
00:44:30,170 --> 00:44:32,029
then also crash in the exact same way

1047
00:44:32,029 --> 00:44:34,609
I'm just gonna replace it with like the

1048
00:44:34,609 --> 00:44:36,799
Metasploit string so as I'm looking at

1049
00:44:36,799 --> 00:44:39,890
that file I can say okay these are the

1050
00:44:39,890 --> 00:44:41,479
byte values I can change to whatever I

1051
00:44:41,479 --> 00:44:42,700
want

1052
00:44:42,700 --> 00:44:44,989
this stuff is all pretty cool and like

1053
00:44:44,989 --> 00:44:46,910
BFF has done this for years like it's a

1054
00:44:46,910 --> 00:44:50,269
free download it works on Windows Mac OS

1055
00:44:50,269 --> 00:44:52,849
in Linux so if you have any interest in

1056
00:44:52,849 --> 00:44:55,690
fuzzing I would recommend go try it out

1057
00:44:55,690 --> 00:44:58,999
it's found like I've used it to find a

1058
00:44:58,999 --> 00:45:01,849
lot of vulnerabilities more than I could

1059
00:45:01,849 --> 00:45:05,329
possibly count and it's found

1060
00:45:05,329 --> 00:45:06,559
vulnerabilities and things that matter

1061
00:45:06,559 --> 00:45:09,140
like back in the day like when we

1062
00:45:09,140 --> 00:45:10,819
developed this buzzer because like

1063
00:45:10,819 --> 00:45:13,700
software was like oh I will say that

1064
00:45:13,700 --> 00:45:15,529
when we developed it software is lower

1065
00:45:15,529 --> 00:45:17,019
quality than it is right now because

1066
00:45:17,019 --> 00:45:19,369
people have like your folks like

1067
00:45:19,369 --> 00:45:21,380
Microsoft have built in checks into the

1068
00:45:21,380 --> 00:45:23,119
compiler they do things automatically

1069
00:45:23,119 --> 00:45:25,759
they ensure that people don't do silly

1070
00:45:25,759 --> 00:45:28,660
things but we've been able to find

1071
00:45:28,660 --> 00:45:30,769
exploitable vulnerabilities in like

1072
00:45:30,769 --> 00:45:34,640
Adobe Reader adobe flash shockwave any

1073
00:45:34,640 --> 00:45:37,190
you know Microsoft Office we've been

1074
00:45:37,190 --> 00:45:42,400
pretty productive with it now

1075
00:45:43,110 --> 00:45:45,490
the problem is is you don't get those

1076
00:45:45,490 --> 00:45:46,930
benefits when you're doing anything

1077
00:45:46,930 --> 00:45:52,540
os-level when I have an operating system

1078
00:45:52,540 --> 00:45:53,860
that's running and I tell it to do

1079
00:45:53,860 --> 00:45:56,050
something and something goes weird in

1080
00:45:56,050 --> 00:45:57,580
Colonel land and it keeps doing that

1081
00:45:57,580 --> 00:45:59,320
over and over again that operating

1082
00:45:59,320 --> 00:46:01,210
system continues to run for the lifetime

1083
00:46:01,210 --> 00:46:03,460
of that fuzzing campaign so I might be

1084
00:46:03,460 --> 00:46:05,170
doing a fuzzing campaign and eventually

1085
00:46:05,170 --> 00:46:06,880
the operating system crashes and I'm

1086
00:46:06,880 --> 00:46:08,590
like okay cool it's that last thing that

1087
00:46:08,590 --> 00:46:11,920
it did that caused the crash mmm not

1088
00:46:11,920 --> 00:46:14,080
really because you have a operating

1089
00:46:14,080 --> 00:46:15,430
system that has been running for that

1090
00:46:15,430 --> 00:46:17,770
entire lifespan and it could be that one

1091
00:46:17,770 --> 00:46:19,540
of the iterations that I did flipped a

1092
00:46:19,540 --> 00:46:21,250
bit in kernel space and it didn't do

1093
00:46:21,250 --> 00:46:23,470
anything bad but then like later on when

1094
00:46:23,470 --> 00:46:25,120
it did like some heap cleanup or some

1095
00:46:25,120 --> 00:46:26,500
other stuff like that it caused it to

1096
00:46:26,500 --> 00:46:28,540
crash so you have cumulative effects you

1097
00:46:28,540 --> 00:46:31,110
have to do manual crash deduplication

1098
00:46:31,110 --> 00:46:33,400
which I kind of described a little bit

1099
00:46:33,400 --> 00:46:35,140
like in the case of Linux where it's

1100
00:46:35,140 --> 00:46:37,450
putting stuff on an NFS server I can

1101
00:46:37,450 --> 00:46:39,100
look at those back traces and see which

1102
00:46:39,100 --> 00:46:41,650
ones are duplicate the exploitability

1103
00:46:41,650 --> 00:46:44,020
determination yeah it's kind of like me

1104
00:46:44,020 --> 00:46:48,160
as a human being a Linux Linux Wow yeah

1105
00:46:48,160 --> 00:46:50,590
I think in all of the cases in order to

1106
00:46:50,590 --> 00:46:52,150
determine exploitability I kind of had

1107
00:46:52,150 --> 00:46:54,100
to sit down at the crashes and and they

1108
00:46:54,100 --> 00:46:55,780
are the unique crashes so it wasn't like

1109
00:46:55,780 --> 00:46:58,750
a ton of work but it was manual and then

1110
00:46:58,750 --> 00:47:00,250
the whole crash minimization and string

1111
00:47:00,250 --> 00:47:02,710
minimization stuff you can't do because

1112
00:47:02,710 --> 00:47:04,660
you're running BFF on an operating

1113
00:47:04,660 --> 00:47:05,920
system and if the operating system

1114
00:47:05,920 --> 00:47:08,380
crashes from underneath BFF like it's

1115
00:47:08,380 --> 00:47:10,980
not running anymore there is no more BFF

1116
00:47:10,980 --> 00:47:13,930
so on to the recommendations here's what

1117
00:47:13,930 --> 00:47:15,010
I tell you things that I think you

1118
00:47:15,010 --> 00:47:16,600
should do but I know are not really

1119
00:47:16,600 --> 00:47:21,580
practical it's what we do at cert for

1120
00:47:21,580 --> 00:47:24,040
the sole reason that later on what's

1121
00:47:24,040 --> 00:47:25,720
something bad happens I can go back and

1122
00:47:25,720 --> 00:47:27,460
say all right I told you so you didn't

1123
00:47:27,460 --> 00:47:31,810
listen to me and just think I did I just

1124
00:47:31,810 --> 00:47:33,730
want you to if anything just think about

1125
00:47:33,730 --> 00:47:35,410
this for a little bit and get this get

1126
00:47:35,410 --> 00:47:39,700
the right mindset here if unless you're

1127
00:47:39,700 --> 00:47:42,550
absolutely certain your operating system

1128
00:47:42,550 --> 00:47:45,460
doesn't Auto amount file systems don't

1129
00:47:45,460 --> 00:47:47,590
plug in an unknown device in your

1130
00:47:47,590 --> 00:47:51,370
computer ah it's great advice

1131
00:47:51,370 --> 00:47:53,710
it keeps you safe now everybody is

1132
00:47:53,710 --> 00:47:55,390
always in a situation where like you

1133
00:47:55,390 --> 00:47:56,360
need the let's say

1134
00:47:56,360 --> 00:47:57,710
in training and they pass around the

1135
00:47:57,710 --> 00:47:59,540
thumb drive that has like your stuff on

1136
00:47:59,540 --> 00:48:04,250
it kind of have to do it turns out Mac

1137
00:48:04,250 --> 00:48:06,530
OS a bun to Windows they all auto mount

1138
00:48:06,530 --> 00:48:07,790
drives so if you're using a popular

1139
00:48:07,790 --> 00:48:10,220
operating system it's it's Auto mounting

1140
00:48:10,220 --> 00:48:12,800
stuff when I was creating this this

1141
00:48:12,800 --> 00:48:14,360
crashing thumb drive I had to use like a

1142
00:48:14,360 --> 00:48:16,820
special Linux distro or Linux windowing

1143
00:48:16,820 --> 00:48:25,490
environment that doesn't automatically -

1144
00:48:25,490 --> 00:48:29,480
doesn't ottomans don't plug unknown

1145
00:48:29,480 --> 00:48:33,530
devices into your computer and the

1146
00:48:33,530 --> 00:48:36,110
reason is I've only looked at file

1147
00:48:36,110 --> 00:48:38,210
systems contained within USB

1148
00:48:38,210 --> 00:48:40,660
mass-storage

1149
00:48:42,430 --> 00:48:45,140
USB does a little bit potentially more

1150
00:48:45,140 --> 00:48:46,670
than that the other recommendation that

1151
00:48:46,670 --> 00:48:50,300
I have is if you're running an email if

1152
00:48:50,300 --> 00:48:52,490
you're running an enterprise and you see

1153
00:48:52,490 --> 00:48:55,790
a VHD or a VHDX file get emailed to you

1154
00:48:55,790 --> 00:48:57,020
block it

1155
00:48:57,020 --> 00:49:01,010
there is no reason ever for any of those

1156
00:49:01,010 --> 00:49:03,740
files to get emailed to you usually

1157
00:49:03,740 --> 00:49:05,570
they're very large because it's the

1158
00:49:05,570 --> 00:49:08,060
entire disk of like a server or an

1159
00:49:08,060 --> 00:49:11,000
operating system that would be an easy

1160
00:49:11,000 --> 00:49:12,260
thing to block and if you have like a

1161
00:49:12,260 --> 00:49:14,960
proxy or something like that maybe

1162
00:49:14,960 --> 00:49:16,820
somebody if they're working with hyper-v

1163
00:49:16,820 --> 00:49:18,170
and they have a specific reason to

1164
00:49:18,170 --> 00:49:22,250
download it maybe they'll need that the

1165
00:49:22,250 --> 00:49:23,420
other thing that I mentioned earlier is

1166
00:49:23,420 --> 00:49:24,980
that Remote effects stuff if you have

1167
00:49:24,980 --> 00:49:27,160
that turned on

1168
00:49:27,160 --> 00:49:30,130
I'm not saying to turn it off I'm saying

1169
00:49:30,130 --> 00:49:33,920
reassess your organization's need to

1170
00:49:33,920 --> 00:49:35,570
have remote effects you might need it

1171
00:49:35,570 --> 00:49:37,520
but just understand that by turning it

1172
00:49:37,520 --> 00:49:38,840
on you might increase your attack

1173
00:49:38,840 --> 00:49:42,200
surface and then finally just just to

1174
00:49:42,200 --> 00:49:43,640
kind of wrap things up I don't know if

1175
00:49:43,640 --> 00:49:44,900
you've ever been at a security

1176
00:49:44,900 --> 00:49:47,210
conference where you get a USB powered

1177
00:49:47,210 --> 00:49:53,240
thing anybody know what this does I

1178
00:49:53,240 --> 00:49:56,180
could probably even cut the cable of

1179
00:49:56,180 --> 00:49:58,520
that and I could see there's only a red

1180
00:49:58,520 --> 00:50:01,100
one and a black one it's power only

1181
00:50:01,100 --> 00:50:03,580
right

1182
00:50:04,920 --> 00:50:07,510
there's been some research where people

1183
00:50:07,510 --> 00:50:10,180
have been able to embed inside of the

1184
00:50:10,180 --> 00:50:14,680
USB connector like a microcontroller so

1185
00:50:14,680 --> 00:50:17,020
imagine you as a normal human being

1186
00:50:17,020 --> 00:50:18,940
you've received this at a security

1187
00:50:18,940 --> 00:50:20,770
conference or some other conference or

1188
00:50:20,770 --> 00:50:22,900
maybe found it in a parking lot and

1189
00:50:22,900 --> 00:50:29,410
you're like oh cool free lava lamp that

1190
00:50:29,410 --> 00:50:31,480
looks like get into your computer plug

1191
00:50:31,480 --> 00:50:33,850
it into your friend skip here or France

1192
00:50:33,850 --> 00:50:37,300
computer it's very difficult to know

1193
00:50:37,300 --> 00:50:39,760
without like necessarily like a scanning

1194
00:50:39,760 --> 00:50:41,950
electron microscope and the D kapor and

1195
00:50:41,950 --> 00:50:43,480
other sort of stuff you don't really

1196
00:50:43,480 --> 00:50:45,910
know what might happen when you plug

1197
00:50:45,910 --> 00:50:51,820
stuff in here's my contact info I think

1198
00:50:51,820 --> 00:50:55,390
we're about right on time so we at cert

1199
00:50:55,390 --> 00:50:56,770
we have a blog we occasionally talk

1200
00:50:56,770 --> 00:50:58,870
about some interesting things I've got a

1201
00:50:58,870 --> 00:51:00,820
Twitter account where I often talk about

1202
00:51:00,820 --> 00:51:03,480
not interesting things and sometimes

1203
00:51:03,480 --> 00:51:09,130
interesting stuff so da da does anybody

1204
00:51:09,130 --> 00:51:11,740
have any questions comments short

1205
00:51:11,740 --> 00:51:14,040
debates

1206
00:51:18,119 --> 00:51:21,569
ah yes so that was actually it's a very

1207
00:51:21,569 --> 00:51:24,749
good question in the question is it I

1208
00:51:24,749 --> 00:51:27,660
just did to generally summarize it is it

1209
00:51:27,660 --> 00:51:30,049
possible to do something oh sorry I

1210
00:51:30,049 --> 00:51:32,309
might have misinterpreted your question

1211
00:51:32,309 --> 00:51:34,289
so one thing would be you know like can

1212
00:51:34,289 --> 00:51:36,900
you put it on like an Android device or

1213
00:51:36,900 --> 00:51:38,430
maybe you plug your Android phone into

1214
00:51:38,430 --> 00:51:40,049
something yeah you can absolutely do

1215
00:51:40,049 --> 00:51:42,029
that you can you can have your Android

1216
00:51:42,029 --> 00:51:43,650
device do anything the other thing that

1217
00:51:43,650 --> 00:51:44,940
I looked at that I thought maybe you

1218
00:51:44,940 --> 00:51:47,099
asked was is there a file system that

1219
00:51:47,099 --> 00:51:49,410
Android operating system contains that I

1220
00:51:49,410 --> 00:51:51,990
could crash Android and it turns out

1221
00:51:51,990 --> 00:51:54,720
Android only has like two or three file

1222
00:51:54,720 --> 00:51:56,549
systems they don't have riser FS they

1223
00:51:56,549 --> 00:51:58,499
don't have JFS in there because nobody

1224
00:51:58,499 --> 00:52:00,720
wants it and like just as I've looked at

1225
00:52:00,720 --> 00:52:03,119
different Linux distributions this is a

1226
00:52:03,119 --> 00:52:04,529
difference that I noticed between for

1227
00:52:04,529 --> 00:52:07,200
example Red Hat Enterprise Linux it

1228
00:52:07,200 --> 00:52:10,680
comes with XFS and ext4 and that's it if

1229
00:52:10,680 --> 00:52:13,529
you want something else you know a few a

1230
00:52:13,529 --> 00:52:15,539
booth two on the other hand it's like

1231
00:52:15,539 --> 00:52:17,519
hey we got everything here's something

1232
00:52:17,519 --> 00:52:19,230
that was made like a long time ago but

1233
00:52:19,230 --> 00:52:23,880
it's turned on by default so any other

1234
00:52:23,880 --> 00:52:28,339
questions anything yes

1235
00:52:33,270 --> 00:52:35,190
all right you could go back to the

1236
00:52:35,190 --> 00:52:37,050
supply chain aspect of things and feel

1237
00:52:37,050 --> 00:52:39,000
like well here's the thing here's the

1238
00:52:39,000 --> 00:52:40,830
thing that I bought from Apple but like

1239
00:52:40,830 --> 00:52:42,360
who manufactured it for them and how do

1240
00:52:42,360 --> 00:52:43,710
I know it's like you know does it have

1241
00:52:43,710 --> 00:52:47,940
that seal of authenticity I'm very you

1242
00:52:47,940 --> 00:52:50,190
know I'm inherently paranoid based on

1243
00:52:50,190 --> 00:52:52,710
where I work but also with the things

1244
00:52:52,710 --> 00:52:55,800
that I've seen I'm I'm like I really you

1245
00:52:55,800 --> 00:52:57,750
know I do kind of follow that advice of

1246
00:52:57,750 --> 00:52:59,220
you know and I was thinking earlier here

1247
00:52:59,220 --> 00:53:00,510
I'm doing this presentation I'm like

1248
00:53:00,510 --> 00:53:01,619
what if they give me like one of those

1249
00:53:01,619 --> 00:53:03,869
clickers right I give you the the

1250
00:53:03,869 --> 00:53:06,360
clicker or I can like walk away from my

1251
00:53:06,360 --> 00:53:08,760
computer and I well that's a thumb drive

1252
00:53:08,760 --> 00:53:10,980
that's it sorry it's a USB device that

1253
00:53:10,980 --> 00:53:12,750
you've plugged into your computer so it

1254
00:53:12,750 --> 00:53:14,369
would be quite ironic if I had accepted

1255
00:53:14,369 --> 00:53:18,530
a clicker to do this presentation so

1256
00:53:18,530 --> 00:53:22,980
mechanically typing my keyboard thus the

1257
00:53:22,980 --> 00:53:25,830
life of anyone interested in security

1258
00:53:25,830 --> 00:53:28,560
you make the trade-offs I don't have a

1259
00:53:28,560 --> 00:53:30,390
good answer for that I don't know like

1260
00:53:30,390 --> 00:53:34,220
you know how do you know what to trust I

1261
00:53:34,400 --> 00:53:38,880
don't trust anything is that is that it

1262
00:53:38,880 --> 00:53:40,350
does that help you sleep at night I

1263
00:53:40,350 --> 00:53:45,990
don't know anybody else all right thank

1264
00:53:45,990 --> 00:53:48,049
you

1265
00:53:50,670 --> 00:53:55,230
oh wait I got one quickie if you want to

1266
00:53:55,230 --> 00:53:58,620
see something quick if my screen comes

1267
00:53:58,620 --> 00:54:02,250
up here as I was putting you know as I

1268
00:54:02,250 --> 00:54:03,960
was putting together my powerpoint

1269
00:54:03,960 --> 00:54:06,210
presentation here I encountered an odd

1270
00:54:06,210 --> 00:54:07,920
behavior and here's my like I don't

1271
00:54:07,920 --> 00:54:09,600
understand how computers work at all

1272
00:54:09,600 --> 00:54:13,200
right I know no clue so I've got this

1273
00:54:13,200 --> 00:54:15,930
title slide here right and like I just

1274
00:54:15,930 --> 00:54:17,490
found out that it's like a widescreen

1275
00:54:17,490 --> 00:54:19,350
format sort of thing so it's like I got

1276
00:54:19,350 --> 00:54:21,180
a like change it to a widescreen and

1277
00:54:21,180 --> 00:54:22,950
alike so I copy my slides over but this

1278
00:54:22,950 --> 00:54:25,290
this font was too big so I went to make

1279
00:54:25,290 --> 00:54:31,830
it smaller what let me let me replant it

1280
00:54:31,830 --> 00:54:34,970
again look at what text I selected and

1281
00:54:34,970 --> 00:54:39,690
when I select the smaller font size look

1282
00:54:39,690 --> 00:54:44,340
at what text gets smaller this is why I

1283
00:54:44,340 --> 00:54:48,300
have a job software is terrible software

1284
00:54:48,300 --> 00:54:50,970
terrible top terrible software is what

1285
00:54:50,970 --> 00:54:53,400
ensures that I get paid not for this

1286
00:54:53,400 --> 00:54:55,260
this is the thing that just annoys me

1287
00:54:55,260 --> 00:54:56,700
when I'm trying to put together a

1288
00:54:56,700 --> 00:54:59,040
presentation to give it a conference but

1289
00:54:59,040 --> 00:55:04,040
anyway software is awful don't use it

1290
00:55:04,880 --> 00:55:11,460
okay thank you thank you alrighty and

1291
00:55:11,460 --> 00:55:13,740
blacktrack will resume at 12:30 p.m. in

1292
00:55:13,740 --> 00:55:15,330
this room with lightning talks

1293
00:55:15,330 --> 00:55:18,529
have a good lunch

