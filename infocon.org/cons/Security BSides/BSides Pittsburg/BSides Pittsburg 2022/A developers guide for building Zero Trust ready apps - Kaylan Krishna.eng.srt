1
00:00:00,000 --> 00:00:01,760
afternoon everyone uh

2
00:00:01,760 --> 00:00:03,520
my name is kalyan krishna i'm a product

3
00:00:03,520 --> 00:00:05,359
manager with microsoft azure active

4
00:00:05,359 --> 00:00:08,080
directory or microsoft identity division

5
00:00:08,080 --> 00:00:09,280
i

6
00:00:09,280 --> 00:00:12,080
uh welcome to my talk

7
00:00:12,080 --> 00:00:14,559
i work very closely okay let me first

8
00:00:14,559 --> 00:00:15,920
fix this is because it's not really

9
00:00:15,920 --> 00:00:19,198
presenting the way i want to

10
00:00:20,720 --> 00:00:23,840
is it yep thank you

11
00:00:23,840 --> 00:00:25,599
thank you for coming to my talk

12
00:00:25,599 --> 00:00:27,599
i am going to talk to

13
00:00:27,599 --> 00:00:29,439
you about

14
00:00:29,439 --> 00:00:32,399
what zero trust means for developers

15
00:00:32,399 --> 00:00:34,239
and before i get started can i get like

16
00:00:34,239 --> 00:00:37,360
a quick uh idea of how many of you are

17
00:00:37,360 --> 00:00:40,480
like developers or work with developers

18
00:00:40,480 --> 00:00:42,160
can i see some hands okay so that's

19
00:00:42,160 --> 00:00:43,360
great and uh

20
00:00:43,360 --> 00:00:45,840
how many of you are into let's say

21
00:00:45,840 --> 00:00:48,480
application management like integration

22
00:00:48,480 --> 00:00:51,120
monitoring

23
00:00:51,360 --> 00:00:52,160
okay

24
00:00:52,160 --> 00:00:54,239
fair enough so those are like the two uh

25
00:00:54,239 --> 00:00:56,079
primary audience

26
00:00:56,079 --> 00:00:58,079
personas that we basically want to

27
00:00:58,079 --> 00:00:59,440
address with this

28
00:00:59,440 --> 00:01:02,000
and uh

29
00:01:02,239 --> 00:01:04,080
so let's get started so

30
00:01:04,080 --> 00:01:06,400
uh zero trust has been around for a few

31
00:01:06,400 --> 00:01:08,320
years it got a lot of traction over the

32
00:01:08,320 --> 00:01:10,720
last one year or so and microsoft is

33
00:01:10,720 --> 00:01:12,479
doing all it can to basically make sure

34
00:01:12,479 --> 00:01:14,560
that our products our educational

35
00:01:14,560 --> 00:01:16,320
material our documents our tools

36
00:01:16,320 --> 00:01:18,000
essentially help you

37
00:01:18,000 --> 00:01:20,479
those who are who are looking into it or

38
00:01:20,479 --> 00:01:22,240
basically rolling it out

39
00:01:22,240 --> 00:01:23,759
one of the things that we heard back

40
00:01:23,759 --> 00:01:26,560
from our customers was essentially that

41
00:01:26,560 --> 00:01:28,640
the developers did not really figure out

42
00:01:28,640 --> 00:01:30,079
where their role was whatever they're

43
00:01:30,079 --> 00:01:31,360
supposed to do

44
00:01:31,360 --> 00:01:33,520
and and then we decided to basically

45
00:01:33,520 --> 00:01:35,520
carve out a part of

46
00:01:35,520 --> 00:01:37,439
what microsoft's recommendation is for

47
00:01:37,439 --> 00:01:39,439
developers and i'm going to present some

48
00:01:39,439 --> 00:01:40,799
of it to here

49
00:01:40,799 --> 00:01:42,640
zero trust is a vast area we cannot do

50
00:01:42,640 --> 00:01:44,560
it in a single session but we will give

51
00:01:44,560 --> 00:01:46,240
you enough pointers so you can go and

52
00:01:46,240 --> 00:01:48,159
basically follow up and uh with the

53
00:01:48,159 --> 00:01:50,479
necessary uh

54
00:01:50,479 --> 00:01:53,600
idea of how to go about it so

55
00:01:53,600 --> 00:01:55,439
to start the session i'm basically gonna

56
00:01:55,439 --> 00:01:57,040
just start with a quick entry to zero

57
00:01:57,040 --> 00:01:58,960
trust i'm gonna assume that most of you

58
00:01:58,960 --> 00:02:01,439
are familiar uh it's again a topic in

59
00:02:01,439 --> 00:02:02,399
itself

60
00:02:02,399 --> 00:02:04,719
uh then we would cover touch the the

61
00:02:04,719 --> 00:02:06,640
important topic that basically started

62
00:02:06,640 --> 00:02:08,160
the conversations of the initiative in

63
00:02:08,160 --> 00:02:09,919
microsoft it's like how i does it

64
00:02:09,919 --> 00:02:11,920
actually matters for developers

65
00:02:11,920 --> 00:02:14,879
and then i will share a few nuggets of

66
00:02:14,879 --> 00:02:16,879
recommendations for developers on what

67
00:02:16,879 --> 00:02:18,400
they need to do what is their

68
00:02:18,400 --> 00:02:20,000
responsibility what are the things that

69
00:02:20,000 --> 00:02:21,760
their application should follow in a

70
00:02:21,760 --> 00:02:23,680
year to make sure that their zero trust

71
00:02:23,680 --> 00:02:24,720
ready app

72
00:02:24,720 --> 00:02:26,640
and we'll give you some pointers that as

73
00:02:26,640 --> 00:02:28,319
a developer as an idea admin as an

74
00:02:28,319 --> 00:02:30,160
application administrator you should be

75
00:02:30,160 --> 00:02:31,760
able to follow up to basically get our

76
00:02:31,760 --> 00:02:34,160
up-to-date guidance on

77
00:02:34,160 --> 00:02:36,720
on what how developers should

78
00:02:36,720 --> 00:02:38,800
indicate zero trust in their application

79
00:02:38,800 --> 00:02:42,080
so yep uh before even i touch up on uh

80
00:02:42,080 --> 00:02:44,400
zero trust and what it is uh this is the

81
00:02:44,400 --> 00:02:46,720
first question that we all get at least

82
00:02:46,720 --> 00:02:49,360
from where i i said is like hey we have

83
00:02:49,360 --> 00:02:51,120
been following the security development

84
00:02:51,120 --> 00:02:52,640
life cycle or

85
00:02:52,640 --> 00:02:54,720
a synonym of it in our organization for

86
00:02:54,720 --> 00:02:57,440
all these years so why why follow zero

87
00:02:57,440 --> 00:02:58,640
trust and

88
00:02:58,640 --> 00:03:01,680
the answer to that is that if you have

89
00:03:01,680 --> 00:03:02,480
been

90
00:03:02,480 --> 00:03:04,159
following those you have to understand

91
00:03:04,159 --> 00:03:05,680
first that zero trust is not a

92
00:03:05,680 --> 00:03:07,440
replacement for everything that you have

93
00:03:07,440 --> 00:03:09,840
been following today

94
00:03:09,840 --> 00:03:11,920
okay so if you have security

95
00:03:11,920 --> 00:03:13,760
fundamentals like threat modeling code

96
00:03:13,760 --> 00:03:14,879
reviews

97
00:03:14,879 --> 00:03:18,239
pen testing they stay there

98
00:03:18,239 --> 00:03:19,120
okay

99
00:03:19,120 --> 00:03:21,360
all we do have done under zero trust is

100
00:03:21,360 --> 00:03:23,519
that we have re-evaluated the security

101
00:03:23,519 --> 00:03:26,159
practices and basically aggregated them

102
00:03:26,159 --> 00:03:29,280
into a certain bucket

103
00:03:30,080 --> 00:03:31,599
and you will see that as i go through

104
00:03:31,599 --> 00:03:33,440
these and if you go through our entire

105
00:03:33,440 --> 00:03:35,680
documentation there isn't exactly a lot

106
00:03:35,680 --> 00:03:37,360
of new stuff it's essentially a

107
00:03:37,360 --> 00:03:39,599
reorganization of a lot of things that

108
00:03:39,599 --> 00:03:41,360
as a developers as practitioners you

109
00:03:41,360 --> 00:03:42,959
have been following but you have to

110
00:03:42,959 --> 00:03:44,959
basically pay more attention to because

111
00:03:44,959 --> 00:03:46,400
the the

112
00:03:46,400 --> 00:03:48,720
perimeter has shifted you are now using

113
00:03:48,720 --> 00:03:50,799
a cloud and lateral movement is actually

114
00:03:50,799 --> 00:03:52,959
something that we see a lot happening

115
00:03:52,959 --> 00:03:54,640
okay so

116
00:03:54,640 --> 00:03:56,959
the primary motivator for zero trust in

117
00:03:56,959 --> 00:03:58,640
general and that also applies for

118
00:03:58,640 --> 00:03:59,920
developers and it actually hits

119
00:03:59,920 --> 00:04:02,400
developers very hard is that the culture

120
00:04:02,400 --> 00:04:05,120
of implicit trust has to give away to

121
00:04:05,120 --> 00:04:07,519
explicit verification what does what do

122
00:04:07,519 --> 00:04:08,959
we even mean by that

123
00:04:08,959 --> 00:04:10,799
there was a time when a developer you

124
00:04:10,799 --> 00:04:12,319
would develop an app you would put it

125
00:04:12,319 --> 00:04:15,040
into your apps a company's network

126
00:04:15,040 --> 00:04:16,798
and maybe you integrated with windows

127
00:04:16,798 --> 00:04:18,560
integrated author maybe you had your own

128
00:04:18,560 --> 00:04:20,798
customized implementation and it was all

129
00:04:20,798 --> 00:04:22,479
good you really didn't worry about it

130
00:04:22,479 --> 00:04:24,560
that somebody would come in into your

131
00:04:24,560 --> 00:04:26,400
network you had firewalls you have all

132
00:04:26,400 --> 00:04:28,160
the security teams in place to make sure

133
00:04:28,160 --> 00:04:30,320
that things don't come from outside and

134
00:04:30,320 --> 00:04:31,520
things more or less worked and

135
00:04:31,520 --> 00:04:32,960
developers really didn't have to do a

136
00:04:32,960 --> 00:04:36,320
lot of these thinking themselves

137
00:04:36,320 --> 00:04:38,160
then cloud happened

138
00:04:38,160 --> 00:04:40,639
your applications now stay in azure and

139
00:04:40,639 --> 00:04:43,199
aws and gcps

140
00:04:43,199 --> 00:04:45,759
your app is what an attacker basically

141
00:04:45,759 --> 00:04:49,040
uses to start their compromise

142
00:04:49,040 --> 00:04:51,120
they'll move laterally so if your app is

143
00:04:51,120 --> 00:04:52,639
the weak point that's where the

144
00:04:52,639 --> 00:04:54,800
attackers will stop and that's where the

145
00:04:54,800 --> 00:04:56,080
developers are being now asked to

146
00:04:56,080 --> 00:04:58,160
essentially look into the zero trust

147
00:04:58,160 --> 00:05:00,080
model the zero trust practices a little

148
00:05:00,080 --> 00:05:02,080
bit more carefully you cannot just

149
00:05:02,080 --> 00:05:04,000
assume that you have developed your app

150
00:05:04,000 --> 00:05:05,360
you have done what your business wanted

151
00:05:05,360 --> 00:05:07,520
you to do and you have some basic center

152
00:05:07,520 --> 00:05:09,039
sense of authentication and

153
00:05:09,039 --> 00:05:12,719
authorization and it's all fine

154
00:05:13,440 --> 00:05:15,840
your basic sense of authentication on

155
00:05:15,840 --> 00:05:17,520
authorization is what an attacker would

156
00:05:17,520 --> 00:05:19,440
actually use to see if they can get into

157
00:05:19,440 --> 00:05:21,199
the network get into the cloud and

158
00:05:21,199 --> 00:05:23,600
basically start their attacks okay and

159
00:05:23,600 --> 00:05:25,120
this is why developers now have to

160
00:05:25,120 --> 00:05:26,960
basically start looking into zero test

161
00:05:26,960 --> 00:05:28,400
principle a little bit

162
00:05:28,400 --> 00:05:30,479
so what are these principles i'm gonna

163
00:05:30,479 --> 00:05:32,240
cover it again for you for those who are

164
00:05:32,240 --> 00:05:34,320
new so essentially zero trust is made up

165
00:05:34,320 --> 00:05:35,600
of three principles the very first

166
00:05:35,600 --> 00:05:38,160
principle is verify explicitly which

167
00:05:38,160 --> 00:05:40,400
essentially says that if something hap

168
00:05:40,400 --> 00:05:43,280
if something is accessing a resource

169
00:05:43,280 --> 00:05:45,840
a simpler way to explain if somebody is

170
00:05:45,840 --> 00:05:48,160
going to use an application

171
00:05:48,160 --> 00:05:50,800
before they can get to that application

172
00:05:50,800 --> 00:05:52,800
make sure that you authenticate

173
00:05:52,800 --> 00:05:54,960
authorized based on all

174
00:05:54,960 --> 00:05:57,120
data points user application device

175
00:05:57,120 --> 00:05:59,520
identity location device self-service

176
00:05:59,520 --> 00:06:00,960
and workload and classification and

177
00:06:00,960 --> 00:06:03,280
anomalies

178
00:06:03,280 --> 00:06:04,800
the good news is that it's not a

179
00:06:04,800 --> 00:06:07,039
developer's job but i'll explain later

180
00:06:07,039 --> 00:06:07,919
okay

181
00:06:07,919 --> 00:06:09,840
the second one is use least privilege

182
00:06:09,840 --> 00:06:10,880
access

183
00:06:10,880 --> 00:06:12,319
it has remained

184
00:06:12,319 --> 00:06:14,479
as a practice for a very long time it's

185
00:06:14,479 --> 00:06:16,479
essentially about hey if a user signs

186
00:06:16,479 --> 00:06:18,400
into their application do not just

187
00:06:18,400 --> 00:06:20,639
assume that every resource on the

188
00:06:20,639 --> 00:06:22,880
hosting server or every resource on the

189
00:06:22,880 --> 00:06:25,360
network or every every every access to

190
00:06:25,360 --> 00:06:27,680
the data should be just assumed as

191
00:06:27,680 --> 00:06:29,120
something that that

192
00:06:29,120 --> 00:06:31,520
that gets to every user account you have

193
00:06:31,520 --> 00:06:34,160
to think about hey if a user signs in if

194
00:06:34,160 --> 00:06:36,080
your user logs into an application if an

195
00:06:36,080 --> 00:06:38,080
application is making access to some

196
00:06:38,080 --> 00:06:40,080
data they are just getting what they

197
00:06:40,080 --> 00:06:42,560
need and nothing more than that

198
00:06:42,560 --> 00:06:44,240
if you don't have those practices in

199
00:06:44,240 --> 00:06:45,199
place

200
00:06:45,199 --> 00:06:48,319
you would be your your your application

201
00:06:48,319 --> 00:06:50,319
your your authentication's education

202
00:06:50,319 --> 00:06:52,479
session would be used to get uh a lot

203
00:06:52,479 --> 00:06:54,479
more done uh than than what you had

204
00:06:54,479 --> 00:06:56,960
assumed for example if your application

205
00:06:56,960 --> 00:06:59,120
all it needed to do was to read a lot of

206
00:06:59,120 --> 00:07:01,120
data but if you have those permissions

207
00:07:01,120 --> 00:07:03,280
that where they the application can

208
00:07:03,280 --> 00:07:05,680
unintentionally write data when your

209
00:07:05,680 --> 00:07:08,639
application is going to be breached or

210
00:07:08,639 --> 00:07:10,639
attacked that's the thing that you

211
00:07:10,639 --> 00:07:12,240
weren't prepared for but the attacker

212
00:07:12,240 --> 00:07:14,720
will make use of

213
00:07:14,720 --> 00:07:16,080
third is assume breach and this is

214
00:07:16,080 --> 00:07:17,280
something that comes as the biggest

215
00:07:17,280 --> 00:07:19,360
surprise

216
00:07:19,360 --> 00:07:21,440
as a developer what zero trust says

217
00:07:21,440 --> 00:07:22,639
actually

218
00:07:22,639 --> 00:07:24,240
it basically applies to every

219
00:07:24,240 --> 00:07:27,120
practitioner you can no longer work with

220
00:07:27,120 --> 00:07:28,960
an assumption

221
00:07:28,960 --> 00:07:33,120
that your application cannot be breached

222
00:07:33,919 --> 00:07:35,919
you have to prepare

223
00:07:35,919 --> 00:07:38,319
your application you have to deploy it

224
00:07:38,319 --> 00:07:39,919
you have to run it you have to monitor

225
00:07:39,919 --> 00:07:41,680
it in a way

226
00:07:41,680 --> 00:07:43,680
where you are able to

227
00:07:43,680 --> 00:07:45,759
recover your application get it back

228
00:07:45,759 --> 00:07:49,360
online after a breach has happened

229
00:07:49,360 --> 00:07:51,360
it's kind of counterintuitive but the

230
00:07:51,360 --> 00:07:52,960
problem is because we don't want the

231
00:07:52,960 --> 00:07:54,800
breach to happen but unfortunately it

232
00:07:54,800 --> 00:07:56,960
does happen the worst part is not that

233
00:07:56,960 --> 00:07:59,360
what happens after the attackers do the

234
00:07:59,360 --> 00:08:01,520
the worst part could be hey you are a

235
00:08:01,520 --> 00:08:03,520
consumer site with millions of users and

236
00:08:03,520 --> 00:08:04,639
you are down

237
00:08:04,639 --> 00:08:06,960
for hours maybe days

238
00:08:06,960 --> 00:08:08,479
maybe you cannot even recover because

239
00:08:08,479 --> 00:08:10,000
your data is now in the hands of a

240
00:08:10,000 --> 00:08:12,240
ransomware

241
00:08:12,240 --> 00:08:14,720
so you have to as a developer make sure

242
00:08:14,720 --> 00:08:17,120
that you have the necessary uh

243
00:08:17,120 --> 00:08:19,680
mechanisms in place to recover from a

244
00:08:19,680 --> 00:08:21,840
breach when it happens as a developer

245
00:08:21,840 --> 00:08:23,759
most of most probably you would not be

246
00:08:23,759 --> 00:08:24,960
really

247
00:08:24,960 --> 00:08:26,319
you know

248
00:08:26,319 --> 00:08:27,840
be aware of when a breach happens is

249
00:08:27,840 --> 00:08:30,800
more of a i.t security thing but when it

250
00:08:30,800 --> 00:08:32,719
happens if you have done some proactive

251
00:08:32,719 --> 00:08:33,839
steps it will really help them to

252
00:08:33,839 --> 00:08:35,760
recover your application make it online

253
00:08:35,760 --> 00:08:37,679
uh much quicker

254
00:08:37,679 --> 00:08:40,000
so that's your zero trust and as i said

255
00:08:40,000 --> 00:08:41,839
if you look at the verify explicitly

256
00:08:41,839 --> 00:08:44,480
part of the zero system most of the hard

257
00:08:44,480 --> 00:08:46,640
work is actually done by the identity

258
00:08:46,640 --> 00:08:48,240
providers if you're using azure active

259
00:08:48,240 --> 00:08:50,720
directory google or tapping

260
00:08:50,720 --> 00:08:53,200
they will do the most work of making

261
00:08:53,200 --> 00:08:56,000
sure that the anomalies the the device

262
00:08:56,000 --> 00:08:57,920
detection the device compliance and all

263
00:08:57,920 --> 00:09:00,640
these things are taken care of usually

264
00:09:00,640 --> 00:09:02,320
as a developer

265
00:09:02,320 --> 00:09:04,000
the first thing you should do is to make

266
00:09:04,000 --> 00:09:06,000
sure that you shift the authentication

267
00:09:06,000 --> 00:09:08,560
parameter from your application to an

268
00:09:08,560 --> 00:09:10,959
identity provider

269
00:09:10,959 --> 00:09:13,279
do you have your own login screen you

270
00:09:13,279 --> 00:09:14,560
are going to be attacked you are

271
00:09:14,560 --> 00:09:17,040
actually a very very uh nice looking

272
00:09:17,040 --> 00:09:19,360
target for an attacker the moment you

273
00:09:19,360 --> 00:09:21,120
move it to an azure active directories

274
00:09:21,120 --> 00:09:23,200
of the world your application does not

275
00:09:23,200 --> 00:09:24,959
play that big of a part

276
00:09:24,959 --> 00:09:26,720
because the attacker now has to attack a

277
00:09:26,720 --> 00:09:30,800
very robust authentication system

278
00:09:30,800 --> 00:09:32,480
so most of the

279
00:09:32,480 --> 00:09:34,240
things that you look here that we talk

280
00:09:34,240 --> 00:09:35,839
about especially in the verify

281
00:09:35,839 --> 00:09:37,920
explicitly part of it will be taken care

282
00:09:37,920 --> 00:09:41,120
by the identity providers i i as long as

283
00:09:41,120 --> 00:09:42,560
you are integrated with them you have

284
00:09:42,560 --> 00:09:45,120
done the first and the best part

285
00:09:45,120 --> 00:09:46,560
you have taken care of the best part

286
00:09:46,560 --> 00:09:48,160
already

287
00:09:48,160 --> 00:09:49,360
okay

288
00:09:49,360 --> 00:09:51,360
the next thing is uh it's essentially

289
00:09:51,360 --> 00:09:53,279
for my developers again we keep getting

290
00:09:53,279 --> 00:09:55,600
asking a little so why should you bother

291
00:09:55,600 --> 00:09:57,120
to get your zero type flap ready now

292
00:09:57,120 --> 00:09:58,480
that i've explained a lot but i'll give

293
00:09:58,480 --> 00:10:01,120
you some very unique examples uh sorry

294
00:10:01,120 --> 00:10:03,200
clear examples and the common examples

295
00:10:03,200 --> 00:10:05,200
of why we keep hearing about it and why

296
00:10:05,200 --> 00:10:06,959
you should bother about it so number one

297
00:10:06,959 --> 00:10:07,600
is

298
00:10:07,600 --> 00:10:10,399
the i.t is rolling out zero trust

299
00:10:10,399 --> 00:10:12,399
what do we mean by that because when the

300
00:10:12,399 --> 00:10:14,720
zero trust practices and guidelines

301
00:10:14,720 --> 00:10:16,560
started to get rolled out somewhere i

302
00:10:16,560 --> 00:10:19,200
say mid last year like in a big way it

303
00:10:19,200 --> 00:10:22,000
was for the it administrators

304
00:10:22,000 --> 00:10:25,519
even today like i would say 95 99 of the

305
00:10:25,519 --> 00:10:27,279
guidance and steps and work is for the

306
00:10:27,279 --> 00:10:29,680
i.t administrators to do

307
00:10:29,680 --> 00:10:31,519
when they roll out they cannot always

308
00:10:31,519 --> 00:10:33,519
succeed

309
00:10:33,519 --> 00:10:35,120
a lot of things you know setting up

310
00:10:35,120 --> 00:10:36,800
firewalls you don't need like developers

311
00:10:36,800 --> 00:10:38,480
there for the most part

312
00:10:38,480 --> 00:10:40,480
but there will be certain steps where if

313
00:10:40,480 --> 00:10:41,360
if

314
00:10:41,360 --> 00:10:43,600
the it admins cannot succeed in rolling

315
00:10:43,600 --> 00:10:45,200
out if the developers have not prepared

316
00:10:45,200 --> 00:10:47,920
the app for it for example

317
00:10:47,920 --> 00:10:50,480
if you are enforcing mfa or if you are

318
00:10:50,480 --> 00:10:52,240
using ip addresses to blo or block

319
00:10:52,240 --> 00:10:54,160
traffic from if you are enforcing user

320
00:10:54,160 --> 00:10:55,120
compliance

321
00:10:55,120 --> 00:10:57,760
they do not always require participation

322
00:10:57,760 --> 00:11:00,079
from developers but there are some steps

323
00:11:00,079 --> 00:11:01,920
and i'll cover those right in the next

324
00:11:01,920 --> 00:11:02,959
slide

325
00:11:02,959 --> 00:11:05,200
which will not work out

326
00:11:05,200 --> 00:11:07,360
unless the developer has put an effort

327
00:11:07,360 --> 00:11:08,720
in it

328
00:11:08,720 --> 00:11:11,600
the most common place where this happens

329
00:11:11,600 --> 00:11:14,480
is credential rotation

330
00:11:14,480 --> 00:11:16,000
you are using secrets you are using

331
00:11:16,000 --> 00:11:18,160
certificates breach happens

332
00:11:18,160 --> 00:11:19,839
something bad happens

333
00:11:19,839 --> 00:11:21,839
the iit administrators the security

334
00:11:21,839 --> 00:11:23,680
tools that your company has purchased

335
00:11:23,680 --> 00:11:25,600
and used they should be able to rotate

336
00:11:25,600 --> 00:11:27,920
those credentials mark them as inactive

337
00:11:27,920 --> 00:11:29,120
remove them

338
00:11:29,120 --> 00:11:31,200
without the app going down

339
00:11:31,200 --> 00:11:33,360
it actually is quite easily possible

340
00:11:33,360 --> 00:11:34,800
with a little bit of an effort from a

341
00:11:34,800 --> 00:11:36,720
developer a lot of developers don't even

342
00:11:36,720 --> 00:11:38,240
look at it

343
00:11:38,240 --> 00:11:39,760
you're like hey i have a secret in my

344
00:11:39,760 --> 00:11:42,000
config file i deployed and no you don't

345
00:11:42,000 --> 00:11:43,680
put a secret in a config file because

346
00:11:43,680 --> 00:11:45,360
that cannot be rotated it should be

347
00:11:45,360 --> 00:11:47,040
somewhere like an azure keyword or some

348
00:11:47,040 --> 00:11:49,120
other security system where it can be

349
00:11:49,120 --> 00:11:51,040
rotated easily by the it admins without

350
00:11:51,040 --> 00:11:54,560
your application getting affected

351
00:11:54,560 --> 00:11:55,839
next

352
00:11:55,839 --> 00:11:58,480
mfa

353
00:11:58,560 --> 00:12:00,000
so

354
00:12:00,000 --> 00:12:02,959
if if an identity provider again azure

355
00:12:02,959 --> 00:12:05,279
activity octa ping

356
00:12:05,279 --> 00:12:06,959
is throwing out an ffa challenge and

357
00:12:06,959 --> 00:12:08,720
they will do it not just because the

358
00:12:08,720 --> 00:12:10,720
application is integrated or the policy

359
00:12:10,720 --> 00:12:12,639
says that every authenticated session

360
00:12:12,639 --> 00:12:14,880
should be in mfa there is a lot lot of

361
00:12:14,880 --> 00:12:16,720
risk based mfa

362
00:12:16,720 --> 00:12:18,800
between the session i take this laptop i

363
00:12:18,800 --> 00:12:20,800
go to another network the next time i'm

364
00:12:20,800 --> 00:12:24,000
gonna i try to access the app azure id

365
00:12:24,000 --> 00:12:25,440
aquatic depending upon the policy he

366
00:12:25,440 --> 00:12:27,120
said no you need to do an mfa again

367
00:12:27,120 --> 00:12:29,839
because i the policy dictates so

368
00:12:29,839 --> 00:12:32,720
in these cases applications break

369
00:12:32,720 --> 00:12:34,320
because they get what what's called as a

370
00:12:34,320 --> 00:12:37,440
challenge from the idp they are they are

371
00:12:37,440 --> 00:12:40,720
coded to integrate for authentication

372
00:12:40,720 --> 00:12:42,079
which essentially means i'm going to

373
00:12:42,079 --> 00:12:44,720
send a user back to you you send me back

374
00:12:44,720 --> 00:12:46,720
some tokens

375
00:12:46,720 --> 00:12:48,959
when it happens the other way around

376
00:12:48,959 --> 00:12:51,200
when the azure id says nope i'm not

377
00:12:51,200 --> 00:12:52,399
going to send there is a special

378
00:12:52,399 --> 00:12:55,040
challenge that you need to do

379
00:12:55,040 --> 00:12:56,399
it's all

380
00:12:56,399 --> 00:12:58,560
uh rfcs and you know standardized but

381
00:12:58,560 --> 00:13:00,720
but this requires a little bit of coding

382
00:13:00,720 --> 00:13:02,959
effort from the developers as well

383
00:13:02,959 --> 00:13:04,639
the third one is a little bit of

384
00:13:04,639 --> 00:13:06,639
microsoft specific how how many of you

385
00:13:06,639 --> 00:13:10,160
are familiar with microsoft graph

386
00:13:10,399 --> 00:13:12,560
okay so microsoft graph essentially is

387
00:13:12,560 --> 00:13:14,000
the api

388
00:13:14,000 --> 00:13:15,120
behind

389
00:13:15,120 --> 00:13:17,600
which most of an organization data sets

390
00:13:17,600 --> 00:13:19,839
think about all your users all your

391
00:13:19,839 --> 00:13:22,240
security groups all your policies all

392
00:13:22,240 --> 00:13:25,360
your data sharepoint site teams channels

393
00:13:25,360 --> 00:13:28,880
one drive everything sits behind it

394
00:13:28,880 --> 00:13:30,480
now microsoft graph has a permission

395
00:13:30,480 --> 00:13:33,040
model i cannot cover it in this session

396
00:13:33,040 --> 00:13:35,120
but sometimes if you have let's say an

397
00:13:35,120 --> 00:13:37,680
application that reads uh data from

398
00:13:37,680 --> 00:13:39,360
microsoft graph and all it needs to do

399
00:13:39,360 --> 00:13:41,199
is to let's say read a bunch of security

400
00:13:41,199 --> 00:13:42,240
groups

401
00:13:42,240 --> 00:13:43,600
but let's say there is a permission

402
00:13:43,600 --> 00:13:45,920
called directory.readwrite.all

403
00:13:45,920 --> 00:13:47,600
if an application has that permission

404
00:13:47,600 --> 00:13:49,360
that basically can destroy an entire

405
00:13:49,360 --> 00:13:52,079
azure id tenant if they wanted to

406
00:13:52,079 --> 00:13:54,240
they can make any easily so if your

407
00:13:54,240 --> 00:13:56,639
application is is coded to ask for

408
00:13:56,639 --> 00:13:58,240
permission like directly or rewrite or

409
00:13:58,240 --> 00:14:00,160
all when all it needed was security

410
00:14:00,160 --> 00:14:02,000
groups dot read which is a much lower

411
00:14:02,000 --> 00:14:03,600
privilege permission

412
00:14:03,600 --> 00:14:04,800
then

413
00:14:04,800 --> 00:14:05,839
the

414
00:14:05,839 --> 00:14:08,639
application is going to be a good vector

415
00:14:08,639 --> 00:14:10,800
for attackers so in these cases there

416
00:14:10,800 --> 00:14:12,160
are tools now and there are iit

417
00:14:12,160 --> 00:14:14,160
administrators who are basically getting

418
00:14:14,160 --> 00:14:15,920
very careful about what permission and

419
00:14:15,920 --> 00:14:18,320
application request on the various apis

420
00:14:18,320 --> 00:14:20,079
behind which the organization's data

421
00:14:20,079 --> 00:14:22,800
sets and in those cases as a developer

422
00:14:22,800 --> 00:14:24,320
you should be looking at hey i'm not

423
00:14:24,320 --> 00:14:25,760
going to take the biggest permission out

424
00:14:25,760 --> 00:14:27,440
because developers have that mindset if

425
00:14:27,440 --> 00:14:30,399
i'm on a laptop i should be an admin

426
00:14:30,399 --> 00:14:31,680
and well you need to be an admin to

427
00:14:31,680 --> 00:14:34,079
develop i agree but in a production your

428
00:14:34,079 --> 00:14:35,440
application might not need to be an

429
00:14:35,440 --> 00:14:36,560
admin

430
00:14:36,560 --> 00:14:38,480
it just needs the exact set of

431
00:14:38,480 --> 00:14:40,240
permissions and the privileges to

432
00:14:40,240 --> 00:14:42,160
actually get its job done and that

433
00:14:42,160 --> 00:14:43,760
mindset had to be developed because a

434
00:14:43,760 --> 00:14:45,760
lot of developers don't get it very

435
00:14:45,760 --> 00:14:47,680
easily unless they run into this consent

436
00:14:47,680 --> 00:14:50,720
problem that we call it okay

437
00:14:50,720 --> 00:14:52,480
this is something that came out as a

438
00:14:52,480 --> 00:14:55,120
surprise but we saw that

439
00:14:55,120 --> 00:14:57,519
we basically rolled out

440
00:14:57,519 --> 00:14:59,760
deprecating the basic authentication

441
00:14:59,760 --> 00:15:01,199
it's one of the protocols that's like

442
00:15:01,199 --> 00:15:03,199
super popular out there

443
00:15:03,199 --> 00:15:05,040
but it's turned out to be mostly quite

444
00:15:05,040 --> 00:15:07,199
insecure and we started asking

445
00:15:07,199 --> 00:15:08,480
developers to move to something like

446
00:15:08,480 --> 00:15:11,519
saml and open id and oauth

447
00:15:11,519 --> 00:15:13,680
if if you want to switch off basic

448
00:15:13,680 --> 00:15:16,079
authentication across your organization

449
00:15:16,079 --> 00:15:17,680
your app developers have to at least

450
00:15:17,680 --> 00:15:20,320
stop using it first okay so these are

451
00:15:20,320 --> 00:15:22,399
good cases some cases on where as a

452
00:15:22,399 --> 00:15:24,399
developer you would start to look into

453
00:15:24,399 --> 00:15:26,480
why your app should be zero trust ready

454
00:15:26,480 --> 00:15:28,240
is because uh

455
00:15:28,240 --> 00:15:30,880
reasons like this and more would would

456
00:15:30,880 --> 00:15:32,480
affect you

457
00:15:32,480 --> 00:15:33,279
okay

458
00:15:33,279 --> 00:15:35,519
i'm just gonna stop here is does anybody

459
00:15:35,519 --> 00:15:37,600
have any any similar initiatives or as a

460
00:15:37,600 --> 00:15:39,600
developer you have run into some some of

461
00:15:39,600 --> 00:15:41,519
these things or anybody wants to talk

462
00:15:41,519 --> 00:15:43,519
about it

463
00:15:43,519 --> 00:15:46,920
it's all new

464
00:15:58,800 --> 00:16:02,758
we've configured ews

465
00:16:10,240 --> 00:16:13,240
is

466
00:16:31,519 --> 00:16:32,320
so

467
00:16:32,320 --> 00:16:35,120
just to repeat what the question here uh

468
00:16:35,120 --> 00:16:36,800
he has third-party applications and

469
00:16:36,800 --> 00:16:38,160
please correct feel free to correct me

470
00:16:38,160 --> 00:16:39,680
if i'm wrong third-party app which

471
00:16:39,680 --> 00:16:42,320
basically are using aws which is the

472
00:16:42,320 --> 00:16:44,800
exchange web service which uses basic

473
00:16:44,800 --> 00:16:47,279
auth and it's super popular as well and

474
00:16:47,279 --> 00:16:48,800
ews has been trying to actually

475
00:16:48,800 --> 00:16:50,320
deprecate basic auth for a very long

476
00:16:50,320 --> 00:16:52,320
time they want everybody to move to the

477
00:16:52,320 --> 00:16:54,720
microsoft graph and open id

478
00:16:54,720 --> 00:16:56,320
that's question number one question

479
00:16:56,320 --> 00:16:57,519
number two is you have all these

480
00:16:57,519 --> 00:16:59,120
applications that you have in your azure

481
00:16:59,120 --> 00:17:01,519
id tenant to be specific and they have a

482
00:17:01,519 --> 00:17:03,120
bunch of permissions with microsoft

483
00:17:03,120 --> 00:17:04,799
graph and you're looking for a

484
00:17:04,799 --> 00:17:07,439
permission view of what it is okay so

485
00:17:07,439 --> 00:17:09,439
i'll answer the first question is that

486
00:17:09,439 --> 00:17:11,280
it actually is time because about four

487
00:17:11,280 --> 00:17:13,359
days ago i actually did a session on

488
00:17:13,359 --> 00:17:16,000
twitch on how to move from ews basic

489
00:17:16,000 --> 00:17:17,599
auth to azure id

490
00:17:17,599 --> 00:17:19,679
sorry microsoft graph

491
00:17:19,679 --> 00:17:22,079
we i'll share the link if i can find but

492
00:17:22,079 --> 00:17:24,000
if you want to look into it we have a

493
00:17:24,000 --> 00:17:25,760
two part session one is how has an id

494
00:17:25,760 --> 00:17:27,839
admin you can find the applications and

495
00:17:27,839 --> 00:17:29,520
what you need to do and the second part

496
00:17:29,520 --> 00:17:31,520
is essentially how as a developer what

497
00:17:31,520 --> 00:17:33,120
do you exactly need to do

498
00:17:33,120 --> 00:17:35,200
to move from basic or ews to microsoft

499
00:17:35,200 --> 00:17:38,240
graph open id so both both are available

500
00:17:38,240 --> 00:17:40,080
the second one which is essentially hey

501
00:17:40,080 --> 00:17:42,880
can i have a view of permissions it is

502
00:17:42,880 --> 00:17:45,280
something we previewed about

503
00:17:45,280 --> 00:17:48,400
three to four weeks ago

504
00:17:48,400 --> 00:17:49,840
unfortunately you might not find because

505
00:17:49,840 --> 00:17:51,440
azure active directory got renamed to

506
00:17:51,440 --> 00:17:53,200
microsoft entra

507
00:17:53,200 --> 00:17:55,440
so if you look at microsoft if you

508
00:17:55,440 --> 00:17:57,520
do a web search of microsoft entrap

509
00:17:57,520 --> 00:17:59,440
permission management

510
00:17:59,440 --> 00:18:02,320
it has started to roll out some of those

511
00:18:02,320 --> 00:18:03,919
visible you know

512
00:18:03,919 --> 00:18:05,919
visibility on what exactly is the

513
00:18:05,919 --> 00:18:08,480
permission set today that's being used

514
00:18:08,480 --> 00:18:10,640
what you have asked for is actually one

515
00:18:10,640 --> 00:18:12,640
of the two top ask for my with microsoft

516
00:18:12,640 --> 00:18:14,480
graph today number one is that we don't

517
00:18:14,480 --> 00:18:15,440
have a

518
00:18:15,440 --> 00:18:17,679
any request logs for microsoft graph

519
00:18:17,679 --> 00:18:19,840
usage which is something that a lot of

520
00:18:19,840 --> 00:18:20,640
the

521
00:18:20,640 --> 00:18:21,919
i.t admins and developers find

522
00:18:21,919 --> 00:18:23,919
frustrating and the second one is hey

523
00:18:23,919 --> 00:18:25,360
there is no visibility of how many

524
00:18:25,360 --> 00:18:26,880
applications and which permissions they

525
00:18:26,880 --> 00:18:28,720
are and can we get so we have we are

526
00:18:28,720 --> 00:18:30,320
rolling out a few more things apart from

527
00:18:30,320 --> 00:18:33,039
permission management

528
00:18:33,039 --> 00:18:34,799
hopefully in future things will come to

529
00:18:34,799 --> 00:18:36,640
a point where we can tell you can

530
00:18:36,640 --> 00:18:39,039
generate a report which says that this

531
00:18:39,039 --> 00:18:40,640
application has these many permissions

532
00:18:40,640 --> 00:18:42,400
but never uses more than you know it has

533
00:18:42,400 --> 00:18:44,480
10 permissions but only uses two so you

534
00:18:44,480 --> 00:18:45,840
can go and ask the developers that i can

535
00:18:45,840 --> 00:18:47,679
i get rid of this other eight is because

536
00:18:47,679 --> 00:18:49,600
you're unnecessarily over permission so

537
00:18:49,600 --> 00:18:51,280
but but it's coming it's not there half

538
00:18:51,280 --> 00:18:53,120
it's basically started to roll out just

539
00:18:53,120 --> 00:18:56,120
just

540
00:19:05,120 --> 00:19:07,760
so that's exactly what we want to do is

541
00:19:07,760 --> 00:19:10,160
if a developer said hey i need these 10

542
00:19:10,160 --> 00:19:12,400
permissions or the app breaks

543
00:19:12,400 --> 00:19:14,480
there is very little an id admin can

544
00:19:14,480 --> 00:19:15,840
basically have are you going to

545
00:19:15,840 --> 00:19:17,679
specifically look at every line of code

546
00:19:17,679 --> 00:19:19,600
and every api call it's not really

547
00:19:19,600 --> 00:19:22,480
possible so what we are working on is a

548
00:19:22,480 --> 00:19:24,320
report that essentially says that this

549
00:19:24,320 --> 00:19:26,640
application over the last seven days or

550
00:19:26,640 --> 00:19:27,760
a month

551
00:19:27,760 --> 00:19:28,559
has

552
00:19:28,559 --> 00:19:31,120
only used these permissions so this is

553
00:19:31,120 --> 00:19:33,039
the least amount that they actually need

554
00:19:33,039 --> 00:19:34,880
of the consent that has been provided

555
00:19:34,880 --> 00:19:37,039
for the entire set so but it's gonna

556
00:19:37,039 --> 00:19:38,480
take some time it's something that we

557
00:19:38,480 --> 00:19:40,799
are really very actively working on uh

558
00:19:40,799 --> 00:19:42,880
and and uh we hope to make it available

559
00:19:42,880 --> 00:19:44,640
it's a very well known problem we know

560
00:19:44,640 --> 00:19:46,320
it we are working towards it but it

561
00:19:46,320 --> 00:19:48,240
basically requires going through a lot

562
00:19:48,240 --> 00:19:49,919
of data and that's where things get a

563
00:19:49,919 --> 00:19:51,200
little slowed down when we try to bring

564
00:19:51,200 --> 00:19:52,400
it to you

565
00:19:52,400 --> 00:19:53,919
thank you

566
00:19:53,919 --> 00:19:57,679
any other questions observations

567
00:19:57,679 --> 00:19:58,640
okay

568
00:19:58,640 --> 00:19:59,840
cool

569
00:19:59,840 --> 00:20:00,400
next

570
00:20:00,400 --> 00:20:01,679
[Music]

571
00:20:01,679 --> 00:20:03,760
so basically

572
00:20:03,760 --> 00:20:05,760
i had covered it like as an introduction

573
00:20:05,760 --> 00:20:06,640
so

574
00:20:06,640 --> 00:20:08,720
it goes beyond id policy you know it's

575
00:20:08,720 --> 00:20:10,480
earlier code security was mostly about

576
00:20:10,480 --> 00:20:13,280
hey i write my code i write it properly

577
00:20:13,280 --> 00:20:16,159
it's if you deploy it on cloud if

578
00:20:16,159 --> 00:20:18,400
now it's security your application can

579
00:20:18,400 --> 00:20:20,559
be the the attack vector that that

580
00:20:20,559 --> 00:20:22,559
attackers would use to basically make a

581
00:20:22,559 --> 00:20:24,880
lateral movement so it's not just about

582
00:20:24,880 --> 00:20:26,799
your code anymore you have to as a

583
00:20:26,799 --> 00:20:28,559
developer rise up and basically embrace

584
00:20:28,559 --> 00:20:30,559
a few more practices

585
00:20:30,559 --> 00:20:32,320
and

586
00:20:32,320 --> 00:20:34,960
this is why it has become a

587
00:20:34,960 --> 00:20:36,720
practice that we want developers to

588
00:20:36,720 --> 00:20:38,640
start looking into so how to make zero

589
00:20:38,640 --> 00:20:40,480
trust apparently now i cannot go through

590
00:20:40,480 --> 00:20:42,720
all of it uh

591
00:20:42,720 --> 00:20:44,799
it's a huge it's not a huge but it's a

592
00:20:44,799 --> 00:20:47,120
substantial amount of information uh the

593
00:20:47,120 --> 00:20:48,400
but the most

594
00:20:48,400 --> 00:20:49,760
before we start talking about the

595
00:20:49,760 --> 00:20:51,520
various practices i want to call this

596
00:20:51,520 --> 00:20:53,600
out is that even with developer space

597
00:20:53,600 --> 00:20:56,080
the implementation is evolving uh so i'm

598
00:20:56,080 --> 00:20:57,840
gonna share the links where we microsoft

599
00:20:57,840 --> 00:21:01,120
publishes the latest bids uh please make

600
00:21:01,120 --> 00:21:02,720
it a habit or you know to go through

601
00:21:02,720 --> 00:21:04,720
there every three months maybe and and

602
00:21:04,720 --> 00:21:06,000
to make sure that you are up to date

603
00:21:06,000 --> 00:21:07,360
with the latest guidance that we have

604
00:21:07,360 --> 00:21:09,120
out there so the very first is the zero

605
00:21:09,120 --> 00:21:10,640
trust guidance center so this is an

606
00:21:10,640 --> 00:21:12,320
overall guidance center

607
00:21:12,320 --> 00:21:13,919
for uh

608
00:21:13,919 --> 00:21:16,000
for all of the zero trust work that

609
00:21:16,000 --> 00:21:17,919
microsoft has out there there is a part

610
00:21:17,919 --> 00:21:20,480
that we have started to develop for uh

611
00:21:20,480 --> 00:21:22,320
sorry developer developers itself so

612
00:21:22,320 --> 00:21:24,320
that's that's the link to this uh it's a

613
00:21:24,320 --> 00:21:26,400
big long one but that's what it is

614
00:21:26,400 --> 00:21:28,960
uh we have an ebook

615
00:21:28,960 --> 00:21:30,400
that's available if you want like

616
00:21:30,400 --> 00:21:32,400
specific things things that i will cover

617
00:21:32,400 --> 00:21:34,799
in the next few minutes uh that you want

618
00:21:34,799 --> 00:21:36,000
to go through if you want to print it

619
00:21:36,000 --> 00:21:37,760
out and give it to your developers to

620
00:21:37,760 --> 00:21:39,600
follow through that that's available on

621
00:21:39,600 --> 00:21:40,960
the second link so it's more of a

622
00:21:40,960 --> 00:21:43,200
developer guide it's written exactly it

623
00:21:43,200 --> 00:21:45,200
only has things that a developer needs

624
00:21:45,200 --> 00:21:46,080
to do

625
00:21:46,080 --> 00:21:48,559
and and and and basically it's

626
00:21:48,559 --> 00:21:49,679
completely different if there is nothing

627
00:21:49,679 --> 00:21:51,280
that in that the right items this is

628
00:21:51,280 --> 00:21:53,600
actually was an ask is because as to

629
00:21:53,600 --> 00:21:55,520
repeat myself uh

630
00:21:55,520 --> 00:21:58,159
99 of the guidances for it admins and

631
00:21:58,159 --> 00:22:00,240
developers get confused so we made sure

632
00:22:00,240 --> 00:22:02,400
that it's taken out and just printed so

633
00:22:02,400 --> 00:22:04,000
that developers can basically just focus

634
00:22:04,000 --> 00:22:06,000
on those bits that matter to them and

635
00:22:06,000 --> 00:22:07,760
nothing more

636
00:22:07,760 --> 00:22:11,039
okay so again we will cover a few

637
00:22:11,039 --> 00:22:12,799
common and critical recommendation there

638
00:22:12,799 --> 00:22:14,640
is a little bit of microsoft specific

639
00:22:14,640 --> 00:22:16,880
features here but usually you would find

640
00:22:16,880 --> 00:22:18,320
it useful for the

641
00:22:18,320 --> 00:22:20,480
uh for the

642
00:22:20,480 --> 00:22:22,000
on essentially to understand what

643
00:22:22,000 --> 00:22:23,600
direction i am or what what actually i

644
00:22:23,600 --> 00:22:25,520
am trying to convey through the messages

645
00:22:25,520 --> 00:22:28,240
here so we will start with a general

646
00:22:28,240 --> 00:22:30,320
guidance for applications i will discuss

647
00:22:30,320 --> 00:22:32,000
one specific feature called continuous

648
00:22:32,000 --> 00:22:34,000
access evaluation uh that we have

649
00:22:34,000 --> 00:22:35,840
brought up and it actually to address a

650
00:22:35,840 --> 00:22:37,919
very the verify explicitly zero trust

651
00:22:37,919 --> 00:22:38,960
scenario

652
00:22:38,960 --> 00:22:42,080
some guidance for mobile applications uh

653
00:22:42,080 --> 00:22:44,000
what exactly is that that we are talking

654
00:22:44,000 --> 00:22:45,760
about about least privileges microsoft

655
00:22:45,760 --> 00:22:47,760
graph i'll just cover that out

656
00:22:47,760 --> 00:22:50,480
how do you adopt credential hygiene and

657
00:22:50,480 --> 00:22:52,720
why should as a developer

658
00:22:52,720 --> 00:22:54,400
you should be looking at your logging

659
00:22:54,400 --> 00:22:56,400
and telemetry it's a very common thing

660
00:22:56,400 --> 00:22:58,480
to do you know all applications have

661
00:22:58,480 --> 00:23:01,840
logging mechanisms but do you log enough

662
00:23:01,840 --> 00:23:03,520
for your it admins to essentially

663
00:23:03,520 --> 00:23:06,000
recover from a breach again the guide

664
00:23:06,000 --> 00:23:08,080
has more so let's talk about verify

665
00:23:08,080 --> 00:23:10,000
explicitly

666
00:23:10,000 --> 00:23:12,880
so verify explicitly again as i said

667
00:23:12,880 --> 00:23:14,960
most of the work would be done by an

668
00:23:14,960 --> 00:23:17,840
identity provider but as a developer

669
00:23:17,840 --> 00:23:19,840
make sure that you are using an identity

670
00:23:19,840 --> 00:23:20,880
provider

671
00:23:20,880 --> 00:23:22,960
do you have your own username password

672
00:23:22,960 --> 00:23:24,799
database do you have your own login

673
00:23:24,799 --> 00:23:26,559
screen

674
00:23:26,559 --> 00:23:28,480
you are an open candidate your

675
00:23:28,480 --> 00:23:30,000
application is an open candidate for

676
00:23:30,000 --> 00:23:32,559
attackers

677
00:23:33,919 --> 00:23:36,960
it's as simple as that we really have no

678
00:23:36,960 --> 00:23:38,080
other

679
00:23:38,080 --> 00:23:40,320
explanation here

680
00:23:40,320 --> 00:23:42,400
we don't have one of attackers today we

681
00:23:42,400 --> 00:23:44,720
have state actors we have departments

682
00:23:44,720 --> 00:23:46,559
run by countries

683
00:23:46,559 --> 00:23:48,480
and if you

684
00:23:48,480 --> 00:23:50,000
i mean again let's be honest as a

685
00:23:50,000 --> 00:23:51,520
developer there is only so much you can

686
00:23:51,520 --> 00:23:53,840
do if you are handling credentials

687
00:23:53,840 --> 00:23:55,919
yourself today

688
00:23:55,919 --> 00:23:58,799
okay so use a modern protocol these have

689
00:23:58,799 --> 00:24:00,720
a very amazing thing that most

690
00:24:00,720 --> 00:24:02,840
developers miss when you hear about

691
00:24:02,840 --> 00:24:05,679
it when your application is using open

692
00:24:05,679 --> 00:24:07,760
ido author saml

693
00:24:07,760 --> 00:24:11,440
your application never sees a credential

694
00:24:11,440 --> 00:24:14,080
it never gets to see the actual password

695
00:24:14,080 --> 00:24:17,360
that the end user typed

696
00:24:17,440 --> 00:24:19,360
the primary mechanism of the modern

697
00:24:19,360 --> 00:24:21,679
protocols is send the user to the

698
00:24:21,679 --> 00:24:24,320
identity provider authentication happens

699
00:24:24,320 --> 00:24:26,000
here your application gets a bunch of

700
00:24:26,000 --> 00:24:26,960
tokens

701
00:24:26,960 --> 00:24:30,240
you never see that the moment it happens

702
00:24:30,240 --> 00:24:32,640
the security parameter moves to the

703
00:24:32,640 --> 00:24:34,480
identity provider your application is no

704
00:24:34,480 --> 00:24:36,400
longer attractive for developers

705
00:24:36,400 --> 00:24:38,799
there is no variable in your code that

706
00:24:38,799 --> 00:24:42,320
is actually holding a credential

707
00:24:43,120 --> 00:24:45,360
it's not there and you start there the

708
00:24:45,360 --> 00:24:46,960
very first time so again

709
00:24:46,960 --> 00:24:48,880
uh look at this if you're not against

710
00:24:48,880 --> 00:24:50,640
the same problem as we were discussing

711
00:24:50,640 --> 00:24:52,720
basic or your application sees the

712
00:24:52,720 --> 00:24:53,840
credential

713
00:24:53,840 --> 00:24:56,720
and that's where the problem starts

714
00:24:56,720 --> 00:24:57,679
number

715
00:24:57,679 --> 00:24:59,440
two is if you are

716
00:24:59,440 --> 00:25:00,640
actually

717
00:25:00,640 --> 00:25:02,320
trying to build a policy to move

718
00:25:02,320 --> 00:25:05,360
applications to use a modern protocols

719
00:25:05,360 --> 00:25:06,880
so there is there is always a discussion

720
00:25:06,880 --> 00:25:08,159
about hey there is sometimes a

721
00:25:08,159 --> 00:25:10,080
discussion about whether to use open id

722
00:25:10,080 --> 00:25:12,559
connect oauth or saml we would recommend

723
00:25:12,559 --> 00:25:15,520
open id is because it actually continues

724
00:25:15,520 --> 00:25:18,080
to evolve even today there are additions

725
00:25:18,080 --> 00:25:19,600
being made to handle some of the

726
00:25:19,600 --> 00:25:21,600
contemporary scenarios that we have seen

727
00:25:21,600 --> 00:25:24,000
come up so if you have a choice please

728
00:25:24,000 --> 00:25:26,960
choose open id os over saml but again

729
00:25:26,960 --> 00:25:29,520
xaml is quite popular it will remain so

730
00:25:29,520 --> 00:25:31,600
but uh we as a microsoft the official

731
00:25:31,600 --> 00:25:33,120
recommendation is that you should stick

732
00:25:33,120 --> 00:25:36,640
to open ideo auth for to if you are

733
00:25:36,640 --> 00:25:39,279
looking into uh basically integrating

734
00:25:39,279 --> 00:25:43,080
with an identity provider

735
00:25:43,679 --> 00:25:45,360
we have amsoil libraries for those of

736
00:25:45,360 --> 00:25:47,120
you who are actually don't want to deal

737
00:25:47,120 --> 00:25:48,799
with protocols but want to get all the

738
00:25:48,799 --> 00:25:50,080
benefits

739
00:25:50,080 --> 00:25:51,679
these are open source libraries you can

740
00:25:51,679 --> 00:25:53,279
use it you have three lines of code that

741
00:25:53,279 --> 00:25:55,679
you have to write you'd have to learn

742
00:25:55,679 --> 00:25:57,200
literally nothing about open id and

743
00:25:57,200 --> 00:25:59,600
oauth it just works for you and you get

744
00:25:59,600 --> 00:26:01,360
you get into the secure space with like

745
00:26:01,360 --> 00:26:03,279
the least amount of or maybe like a

746
00:26:03,279 --> 00:26:04,320
couple of hours you know your

747
00:26:04,320 --> 00:26:06,080
application has completely moved from

748
00:26:06,080 --> 00:26:10,240
customers to the to the modern auth area

749
00:26:10,240 --> 00:26:12,799
okay this is a

750
00:26:12,799 --> 00:26:14,880
continuous access evaluation is a thing

751
00:26:14,880 --> 00:26:16,720
that we have started to develop we are

752
00:26:16,720 --> 00:26:19,039
working with the ietf and other groups

753
00:26:19,039 --> 00:26:20,640
to basically

754
00:26:20,640 --> 00:26:24,000
support it better a little better

755
00:26:24,000 --> 00:26:26,320
those of you who have worked with saml

756
00:26:26,320 --> 00:26:29,279
or open idea one of the problems with

757
00:26:29,279 --> 00:26:31,039
these protocols is that they rely on

758
00:26:31,039 --> 00:26:34,799
what we refer to as bearer tokens

759
00:26:34,960 --> 00:26:36,559
an identity provider will give your

760
00:26:36,559 --> 00:26:38,720
application a token which is valid for 1

761
00:26:38,720 --> 00:26:40,960
hours to 24 hours depending upon how you

762
00:26:40,960 --> 00:26:43,200
have set up your

763
00:26:43,200 --> 00:26:44,880
policies

764
00:26:44,880 --> 00:26:47,120
in the meantime if a user account is

765
00:26:47,120 --> 00:26:48,799
rebooked maybe they got attacked you

766
00:26:48,799 --> 00:26:50,400
have a third party tool that basically

767
00:26:50,400 --> 00:26:51,840
tells you that this is a compromised

768
00:26:51,840 --> 00:26:54,080
account or you want to delete an account

769
00:26:54,080 --> 00:26:55,840
if some employee has left if a password

770
00:26:55,840 --> 00:26:58,240
has changed user's location has changed

771
00:26:58,240 --> 00:27:00,080
and you have a policy that says this

772
00:27:00,080 --> 00:27:01,520
application should or this resource

773
00:27:01,520 --> 00:27:03,440
should not be accessed if the user is

774
00:27:03,440 --> 00:27:05,760
not in the company network or the user

775
00:27:05,760 --> 00:27:07,840
respond to be risky so what happens is

776
00:27:07,840 --> 00:27:09,760
in these cases the validity of token

777
00:27:09,760 --> 00:27:12,640
does not go away

778
00:27:12,799 --> 00:27:14,720
so what we have developed is called it's

779
00:27:14,720 --> 00:27:16,400
called continuous access evaluation

780
00:27:16,400 --> 00:27:18,559
again it cannot be covered in this this

781
00:27:18,559 --> 00:27:21,360
one session it essentially lets your

782
00:27:21,360 --> 00:27:23,760
applications if they have subscribed for

783
00:27:23,760 --> 00:27:26,720
it and event

784
00:27:26,720 --> 00:27:28,320
it tells your app it sends an

785
00:27:28,320 --> 00:27:30,960
application an even that hey

786
00:27:30,960 --> 00:27:34,799
you got a token for a b c d graph as

787
00:27:34,799 --> 00:27:37,600
your whatever

788
00:27:37,600 --> 00:27:39,679
and it was issued to a user who has

789
00:27:39,679 --> 00:27:42,240
found to be risky please throw that

790
00:27:42,240 --> 00:27:43,440
token out

791
00:27:43,440 --> 00:27:46,320
that's you it also sends the graph apis

792
00:27:46,320 --> 00:27:48,880
and assure that hey if this token shows

793
00:27:48,880 --> 00:27:51,679
up because this token is still valid

794
00:27:51,679 --> 00:27:53,120
but you would not

795
00:27:53,120 --> 00:27:56,480
respect it you will reject it

796
00:27:56,480 --> 00:27:58,559
so this is essentially

797
00:27:58,559 --> 00:28:00,559
it was pushed very hard on us

798
00:28:00,559 --> 00:28:02,799
especially from the banking sector who

799
00:28:02,799 --> 00:28:05,200
really want this to be done and we have

800
00:28:05,200 --> 00:28:07,679
sort of managed to get this rolled out

801
00:28:07,679 --> 00:28:09,600
in a good capacity it's not

802
00:28:09,600 --> 00:28:11,279
really where we want it to be but it's

803
00:28:11,279 --> 00:28:12,559
getting there

804
00:28:12,559 --> 00:28:14,720
so again it will require some work from

805
00:28:14,720 --> 00:28:16,640
the developers to use it is because hey

806
00:28:16,640 --> 00:28:18,000
you need to be

807
00:28:18,000 --> 00:28:20,000
able to understand it

808
00:28:20,000 --> 00:28:21,840
we wish that you know once you had used

809
00:28:21,840 --> 00:28:23,520
a library like a third party library

810
00:28:23,520 --> 00:28:25,679
which works with open id and you were

811
00:28:25,679 --> 00:28:26,960
good for it

812
00:28:26,960 --> 00:28:28,640
unfortunately things changed to a point

813
00:28:28,640 --> 00:28:29,919
where we have to ask you to make those

814
00:28:29,919 --> 00:28:31,679
code changes again

815
00:28:31,679 --> 00:28:32,720
okay

816
00:28:32,720 --> 00:28:34,240
there is a lot here if you want to look

817
00:28:34,240 --> 00:28:36,559
into a deeper dive of how this

818
00:28:36,559 --> 00:28:38,480
is being developed as part of the open

819
00:28:38,480 --> 00:28:41,039
id specification ca is microsoft

820
00:28:41,039 --> 00:28:42,880
implementation claims challenge is an

821
00:28:42,880 --> 00:28:45,120
open id specification that we are using

822
00:28:45,120 --> 00:28:46,480
if you want to read more there is

823
00:28:46,480 --> 00:28:48,399
another link there that you might uh

824
00:28:48,399 --> 00:28:49,840
find useful

825
00:28:49,840 --> 00:28:50,720
okay

826
00:28:50,720 --> 00:28:52,480
i'm going to skip this because i just

827
00:28:52,480 --> 00:28:55,039
explained it uh there is a demo that i

828
00:28:55,039 --> 00:28:57,120
have we have at this link if you want to

829
00:28:57,120 --> 00:28:59,200
look into it actually in action you can

830
00:28:59,200 --> 00:29:00,960
try this out uh

831
00:29:00,960 --> 00:29:02,240
yourself

832
00:29:02,240 --> 00:29:03,679
and there is a code sample that if you

833
00:29:03,679 --> 00:29:04,960
want to try it out there is another link

834
00:29:04,960 --> 00:29:07,919
that's available as well

835
00:29:08,559 --> 00:29:10,399
okay the next one is essentially a pure

836
00:29:10,399 --> 00:29:12,960
developer topic topic which is that hey

837
00:29:12,960 --> 00:29:14,880
if you get tokens

838
00:29:14,880 --> 00:29:17,120
you are actually supposed to use the

839
00:29:17,120 --> 00:29:19,120
claims in the tokens

840
00:29:19,120 --> 00:29:20,880
just because you got a token is great is

841
00:29:20,880 --> 00:29:24,320
because a mountain of security policies

842
00:29:24,320 --> 00:29:25,840
and what not got applied before that

843
00:29:25,840 --> 00:29:27,840
token was issued but even in your

844
00:29:27,840 --> 00:29:29,440
application let's say

845
00:29:29,440 --> 00:29:31,679
your application is one of the twenty

846
00:29:31,679 --> 00:29:33,279
two thousand that your large

847
00:29:33,279 --> 00:29:36,080
organization has in its tenant do you

848
00:29:36,080 --> 00:29:38,399
really want everything

849
00:29:38,399 --> 00:29:40,000
do you want if you let's see if you're

850
00:29:40,000 --> 00:29:42,000
an api do you really want all 22 000 of

851
00:29:42,000 --> 00:29:43,279
them to be able to call you or do you

852
00:29:43,279 --> 00:29:45,039
want to have some control over it or

853
00:29:45,039 --> 00:29:47,520
maybe if a user signed in logged in

854
00:29:47,520 --> 00:29:49,120
do you want let's say if you have you

855
00:29:49,120 --> 00:29:51,600
know you are walmart with 1 million 1.5

856
00:29:51,600 --> 00:29:53,760
million employees does every application

857
00:29:53,760 --> 00:29:55,679
gets to be used by all 1.5 million

858
00:29:55,679 --> 00:29:57,279
employees

859
00:29:57,279 --> 00:29:59,679
definitely not so the the idea is that

860
00:29:59,679 --> 00:30:01,200
while there will be some controls always

861
00:30:01,200 --> 00:30:02,960
available in the on the on the azure id

862
00:30:02,960 --> 00:30:04,559
tenant side of things for it as a

863
00:30:04,559 --> 00:30:06,000
developer you should also learn how to

864
00:30:06,000 --> 00:30:07,840
use some claims the claims that are

865
00:30:07,840 --> 00:30:09,360
provided it's actually for the

866
00:30:09,360 --> 00:30:11,520
developers they're literally sent for to

867
00:30:11,520 --> 00:30:13,760
developers so they would use it for

868
00:30:13,760 --> 00:30:15,440
making their authorization decisions and

869
00:30:15,440 --> 00:30:17,120
things like that so let's start with

870
00:30:17,120 --> 00:30:18,960
this

871
00:30:18,960 --> 00:30:20,640
if somebody sends a token especially if

872
00:30:20,640 --> 00:30:22,159
you're if you're using better tokens in

873
00:30:22,159 --> 00:30:24,720
an api you cannot just take any api

874
00:30:24,720 --> 00:30:27,039
azure id issues approximately 100

875
00:30:27,039 --> 00:30:30,080
billion tokens a day

876
00:30:30,080 --> 00:30:31,600
you have to make sure that it has a

877
00:30:31,600 --> 00:30:33,039
claim called audience which has an

878
00:30:33,039 --> 00:30:35,120
application id into it if it should be

879
00:30:35,120 --> 00:30:37,440
for your app now you should not just say

880
00:30:37,440 --> 00:30:39,440
i see a token it's signed by azure

881
00:30:39,440 --> 00:30:40,799
already know

882
00:30:40,799 --> 00:30:42,480
we sign a hundred billion tokens you

883
00:30:42,480 --> 00:30:43,840
have to make sure that it's for your app

884
00:30:43,840 --> 00:30:45,440
okay

885
00:30:45,440 --> 00:30:46,720
maybe you want to make sure that you

886
00:30:46,720 --> 00:30:48,320
only accept the tokens from that where

887
00:30:48,320 --> 00:30:49,440
you should in your tournament so that's

888
00:30:49,440 --> 00:30:51,760
your tenant id

889
00:30:51,760 --> 00:30:54,240
maybe you want to only get users a

890
00:30:54,240 --> 00:30:56,399
certain amount of features available in

891
00:30:56,399 --> 00:30:57,919
the app depending upon which security

892
00:30:57,919 --> 00:31:00,000
groups they are member of

893
00:31:00,000 --> 00:31:02,159
so that's there

894
00:31:02,159 --> 00:31:04,399
these are like names are especially

895
00:31:04,399 --> 00:31:05,919
uh this is actually a very good point

896
00:31:05,919 --> 00:31:07,840
that i have to explain so when you work

897
00:31:07,840 --> 00:31:10,960
with uh name oid sorry i want to cover

898
00:31:10,960 --> 00:31:13,200
this so it doesn't have it

899
00:31:13,200 --> 00:31:16,640
a name is not unique

900
00:31:16,640 --> 00:31:18,799
it sounds like something people

901
00:31:18,799 --> 00:31:20,640
understand but the only unique ad

902
00:31:20,640 --> 00:31:22,000
especially if you are working with azure

903
00:31:22,000 --> 00:31:23,760
youtube you have to basically look for

904
00:31:23,760 --> 00:31:26,880
what is the immutable identifier

905
00:31:26,880 --> 00:31:29,039
what we mean by that is for example my

906
00:31:29,039 --> 00:31:31,360
name is kalyan krishna if i leave and

907
00:31:31,360 --> 00:31:33,200
the next kalyan creation joins microsoft

908
00:31:33,200 --> 00:31:36,480
will give my email id my alias to that

909
00:31:36,480 --> 00:31:37,919
same person

910
00:31:37,919 --> 00:31:41,919
what they will not have is my object id

911
00:31:41,919 --> 00:31:43,760
so if you have data basically that that

912
00:31:43,760 --> 00:31:45,519
you store if you want to work with

913
00:31:45,519 --> 00:31:47,519
permissions you should not be working

914
00:31:47,519 --> 00:31:50,880
with names on user principle names

915
00:31:50,880 --> 00:31:53,519
learn about what an immutable id is and

916
00:31:53,519 --> 00:31:55,200
if you have scenarios where you have to

917
00:31:55,200 --> 00:31:56,480
keep you take care of those things you

918
00:31:56,480 --> 00:31:58,240
should look into those

919
00:31:58,240 --> 00:32:00,399
i use this uh immutable ids rather than

920
00:32:00,399 --> 00:32:02,320
the preferred usernames or things like

921
00:32:02,320 --> 00:32:03,200
that

922
00:32:03,200 --> 00:32:06,080
so yep uh this is this is one examples

923
00:32:06,080 --> 00:32:08,080
of how you can use various claims if

924
00:32:08,080 --> 00:32:09,440
your application needs to make those

925
00:32:09,440 --> 00:32:10,640
decisions

926
00:32:10,640 --> 00:32:12,799
uh if so that wasn't actually an id

927
00:32:12,799 --> 00:32:14,720
token for those of you on a computer

928
00:32:14,720 --> 00:32:16,159
this is essentially an application that

929
00:32:16,159 --> 00:32:18,000
has only authenticated a user it's not

930
00:32:18,000 --> 00:32:20,000
an access token or a bearer token

931
00:32:20,000 --> 00:32:21,919
this is an example of a

932
00:32:21,919 --> 00:32:23,840
let's talk about web apis web apis are

933
00:32:23,840 --> 00:32:24,960
just

934
00:32:24,960 --> 00:32:27,360
end points out on the internet

935
00:32:27,360 --> 00:32:28,880
and the only way they basically

936
00:32:28,880 --> 00:32:30,320
authenticate or authorize is because

937
00:32:30,320 --> 00:32:32,320
somebody sends them a token this is

938
00:32:32,320 --> 00:32:33,600
called a bearer token and an access

939
00:32:33,600 --> 00:32:35,918
token

940
00:32:37,760 --> 00:32:40,720
alarmingly a lot of guidance that we see

941
00:32:40,720 --> 00:32:43,279
out there about processing access tokens

942
00:32:43,279 --> 00:32:46,240
is about just read the token

943
00:32:46,240 --> 00:32:48,640
a token is supposed to be signed

944
00:32:48,640 --> 00:32:51,279
there is cryptography involved

945
00:32:51,279 --> 00:32:53,679
so faking a token is no big deal it's

946
00:32:53,679 --> 00:32:54,640
just a

947
00:32:54,640 --> 00:32:56,640
jot string you know a base 64 string

948
00:32:56,640 --> 00:32:58,480
with claims

949
00:32:58,480 --> 00:33:00,240
and a lot of attackers what they do is

950
00:33:00,240 --> 00:33:01,840
they will basically see what a valid

951
00:33:01,840 --> 00:33:04,399
token for a certain api looks like they

952
00:33:04,399 --> 00:33:05,919
will frame their own

953
00:33:05,919 --> 00:33:08,399
and just just send it across to see if

954
00:33:08,399 --> 00:33:11,840
that api actually validates tokens

955
00:33:11,840 --> 00:33:13,840
as a developer you would never write any

956
00:33:13,840 --> 00:33:15,760
code for it that's for sure that's like

957
00:33:15,760 --> 00:33:18,480
rolling your own crypto

958
00:33:18,480 --> 00:33:20,720
there are like hundreds of libraries out

959
00:33:20,720 --> 00:33:22,399
there which know how to do the token

960
00:33:22,399 --> 00:33:24,159
validation according to the established

961
00:33:24,159 --> 00:33:26,320
open id standards

962
00:33:26,320 --> 00:33:28,159
you should be validating tokens that's

963
00:33:28,159 --> 00:33:30,080
the number one thing that that basically

964
00:33:30,080 --> 00:33:31,679
tells you that it's actually a token

965
00:33:31,679 --> 00:33:33,840
signed by an identity provider that you

966
00:33:33,840 --> 00:33:36,158
trust

967
00:33:37,760 --> 00:33:40,320
before you use or even look into a claim

968
00:33:40,320 --> 00:33:43,120
into a token it should be validated

969
00:33:43,120 --> 00:33:44,880
that's number one

970
00:33:44,880 --> 00:33:48,080
look into it read about it

971
00:33:48,080 --> 00:33:50,320
and basically make sure it's happening

972
00:33:50,320 --> 00:33:51,519
in your app

973
00:33:51,519 --> 00:33:53,760
the next one is again a kind of a

974
00:33:53,760 --> 00:33:56,080
similar discussion that we had so this

975
00:33:56,080 --> 00:33:58,640
is a an access token issued by azure id

976
00:33:58,640 --> 00:34:00,480
again make sure that it was a token that

977
00:34:00,480 --> 00:34:03,440
your app actually wanted to work with

978
00:34:03,440 --> 00:34:05,279
uh it has things like the application

979
00:34:05,279 --> 00:34:07,279
that's calling your api

980
00:34:07,279 --> 00:34:09,679
do you want to reach restrictions sorry

981
00:34:09,679 --> 00:34:11,520
restrict your api to just four or five

982
00:34:11,520 --> 00:34:13,760
applications that's what you will use

983
00:34:13,760 --> 00:34:14,719
okay

984
00:34:14,719 --> 00:34:17,759
it has permissions

985
00:34:18,079 --> 00:34:20,079
if you are providing access to data

986
00:34:20,079 --> 00:34:21,520
using permissions

987
00:34:21,520 --> 00:34:23,679
are you using a scope claim or not do

988
00:34:23,679 --> 00:34:25,599
you are you aware of it

989
00:34:25,599 --> 00:34:27,599
okay and the last one is the signature

990
00:34:27,599 --> 00:34:28,800
and that's what i was referring to that

991
00:34:28,800 --> 00:34:30,800
you should use a standard sdk for things

992
00:34:30,800 --> 00:34:31,839
like this

993
00:34:31,839 --> 00:34:32,800
so

994
00:34:32,800 --> 00:34:34,480
i'm going to just stop here and because

995
00:34:34,480 --> 00:34:36,079
i know i threw out a lot of things does

996
00:34:36,079 --> 00:34:37,918
anybody have any questions you want to

997
00:34:37,918 --> 00:34:39,040
ask

998
00:34:39,040 --> 00:34:43,480
or i can move to the next topic yeah

999
00:34:55,119 --> 00:34:58,880
the answer is yes and no for today

1000
00:34:58,880 --> 00:35:01,119
what we do is

1001
00:35:01,119 --> 00:35:02,800
as i said an application developer has

1002
00:35:02,800 --> 00:35:04,240
to make some change and they have to

1003
00:35:04,240 --> 00:35:07,359
tell the idp that hey i am cae

1004
00:35:07,359 --> 00:35:09,440
enabled okay capable sorry

1005
00:35:09,440 --> 00:35:11,040
in those cases instead of one hour

1006
00:35:11,040 --> 00:35:13,760
tokens we send them 24 hour valid tokens

1007
00:35:13,760 --> 00:35:15,599
but that's the static value that should

1008
00:35:15,599 --> 00:35:16,480
be

1009
00:35:16,480 --> 00:35:19,200
in future

1010
00:35:19,760 --> 00:35:22,560
modifiable using a policy or two but the

1011
00:35:22,560 --> 00:35:24,160
idea generally is the same is like hey

1012
00:35:24,160 --> 00:35:25,200
can we

1013
00:35:25,200 --> 00:35:26,960
expand the time

1014
00:35:26,960 --> 00:35:29,680
because the application knows

1015
00:35:29,680 --> 00:35:31,839
how to react to any serious events it's

1016
00:35:31,839 --> 00:35:34,320
aware of those so maybe i don't have to

1017
00:35:34,320 --> 00:35:36,000
basically ask them to come to my

1018
00:35:36,000 --> 00:35:38,000
identity provider every five minutes to

1019
00:35:38,000 --> 00:35:39,920
ask if things are okay

1020
00:35:39,920 --> 00:35:43,880
does that answer your question sir

1021
00:35:55,520 --> 00:35:56,720
so the question was is microsoft

1022
00:35:56,720 --> 00:35:58,880
promoting security first mindset yes we

1023
00:35:58,880 --> 00:36:00,800
are and this is exactly why i'm here to

1024
00:36:00,800 --> 00:36:02,240
start with

1025
00:36:02,240 --> 00:36:03,599
okay

1026
00:36:03,599 --> 00:36:06,240
the the session and to be to be very

1027
00:36:06,240 --> 00:36:07,359
frank here is because the session is

1028
00:36:07,359 --> 00:36:10,160
essential as i said the problem uh that

1029
00:36:10,160 --> 00:36:12,240
we wanted to solve by making doing all

1030
00:36:12,240 --> 00:36:13,599
of this and me standing here and

1031
00:36:13,599 --> 00:36:15,599
delivering this is because the it

1032
00:36:15,599 --> 00:36:18,320
administrators got frustrated asking the

1033
00:36:18,320 --> 00:36:20,000
developers to do a set of things that

1034
00:36:20,000 --> 00:36:22,000
they were supposed to do because all of

1035
00:36:22,000 --> 00:36:24,079
these zero trust rollouts were getting

1036
00:36:24,079 --> 00:36:27,040
stuck at some place or the other

1037
00:36:27,040 --> 00:36:29,119
so this is basically

1038
00:36:29,119 --> 00:36:30,880
yes it's a guide for developers but it's

1039
00:36:30,880 --> 00:36:32,960
also a guide for it admins to basically

1040
00:36:32,960 --> 00:36:35,599
help developers with why should you care

1041
00:36:35,599 --> 00:36:37,760
you are the reasons what you need to do

1042
00:36:37,760 --> 00:36:38,839
here is a

1043
00:36:38,839 --> 00:36:41,359
guide and if you don't do it it's not

1044
00:36:41,359 --> 00:36:44,160
gonna work out

1045
00:36:45,839 --> 00:36:48,480
any more questions

1046
00:36:48,480 --> 00:36:50,079
okay i'll move ahead is because we're

1047
00:36:50,079 --> 00:36:51,280
kind of uh

1048
00:36:51,280 --> 00:36:53,200
so the if you are if your your

1049
00:36:53,200 --> 00:36:54,800
organization develops mobile

1050
00:36:54,800 --> 00:36:57,599
applications uh we suggest we use

1051
00:36:57,599 --> 00:36:59,040
brokers

1052
00:36:59,040 --> 00:37:00,560
people who are aware of brokers have you

1053
00:37:00,560 --> 00:37:02,000
used

1054
00:37:02,000 --> 00:37:03,520
authenticator

1055
00:37:03,520 --> 00:37:04,880
microsoft authenticator google

1056
00:37:04,880 --> 00:37:06,960
authenticator and such

1057
00:37:06,960 --> 00:37:09,200
yep your application should be using it

1058
00:37:09,200 --> 00:37:10,960
it's actually quite good in the mobile

1059
00:37:10,960 --> 00:37:12,960
space it's because your app developers

1060
00:37:12,960 --> 00:37:15,200
if they're using the broker applications

1061
00:37:15,200 --> 00:37:17,920
they really don't have to do a lot

1062
00:37:17,920 --> 00:37:20,160
the brokers are really good

1063
00:37:20,160 --> 00:37:22,079
they will take care of every policy

1064
00:37:22,079 --> 00:37:23,839
every security feature and everything

1065
00:37:23,839 --> 00:37:26,079
that is in between automatically so

1066
00:37:26,079 --> 00:37:28,480
that's number one that we basically say

1067
00:37:28,480 --> 00:37:29,839
again if you're using msr liability

1068
00:37:29,839 --> 00:37:31,920
there is some more uh those of you who

1069
00:37:31,920 --> 00:37:34,240
work with mam or you know application

1070
00:37:34,240 --> 00:37:36,160
policies things like you know if you

1071
00:37:36,160 --> 00:37:37,839
want the policies you want to set

1072
00:37:37,839 --> 00:37:39,440
policies like this application will not

1073
00:37:39,440 --> 00:37:42,320
allow any any any end user to copy

1074
00:37:42,320 --> 00:37:44,079
something from the app then you these

1075
00:37:44,079 --> 00:37:46,160
these in these places you use sdks like

1076
00:37:46,160 --> 00:37:48,160
in tune and others out there in those

1077
00:37:48,160 --> 00:37:50,320
cases again using a broker is is

1078
00:37:50,320 --> 00:37:52,160
required so

1079
00:37:52,160 --> 00:37:54,000
i'm going to move to the next one is

1080
00:37:54,000 --> 00:37:55,680
because we're kind of running out of

1081
00:37:55,680 --> 00:37:58,240
time so i'm going to touch up that this

1082
00:37:58,240 --> 00:37:59,920
topic here which is around least

1083
00:37:59,920 --> 00:38:01,440
privileged access i'm going to give you

1084
00:38:01,440 --> 00:38:04,079
an example of microsoft graph and how it

1085
00:38:04,079 --> 00:38:05,920
what really

1086
00:38:05,920 --> 00:38:08,480
is a developer's responsibility if they

1087
00:38:08,480 --> 00:38:09,359
are

1088
00:38:09,359 --> 00:38:10,960
designing an application let's let's

1089
00:38:10,960 --> 00:38:12,320
start with that okay

1090
00:38:12,320 --> 00:38:14,320
so

1091
00:38:14,320 --> 00:38:16,720
usually again uh

1092
00:38:16,720 --> 00:38:18,880
the example that i've taken is a web api

1093
00:38:18,880 --> 00:38:21,680
that publishes data

1094
00:38:21,680 --> 00:38:23,520
so if you have a lot of data that a web

1095
00:38:23,520 --> 00:38:24,960
api publishes for other client

1096
00:38:24,960 --> 00:38:29,200
applications to use try to use a

1097
00:38:29,200 --> 00:38:30,800
permission model for those of you are

1098
00:38:30,800 --> 00:38:32,480
not familiar so this is an example from

1099
00:38:32,480 --> 00:38:33,920
microsoft graph

1100
00:38:33,920 --> 00:38:36,240
where you have permissions broken down

1101
00:38:36,240 --> 00:38:38,720
which allows your application to just

1102
00:38:38,720 --> 00:38:41,440
get the amount of permission or amount

1103
00:38:41,440 --> 00:38:43,359
of access that it really needs and

1104
00:38:43,359 --> 00:38:45,760
nothing more

1105
00:38:45,760 --> 00:38:48,240
so it basically reduces the impact so

1106
00:38:48,240 --> 00:38:50,640
okay let me give you an example so this

1107
00:38:50,640 --> 00:38:53,359
is uh the app registration screen in

1108
00:38:53,359 --> 00:38:54,880
azure id for an app developer or a web

1109
00:38:54,880 --> 00:38:57,839
api developer by default if you the the

1110
00:38:57,839 --> 00:38:59,119
usual habit that we have seen is that

1111
00:38:59,119 --> 00:39:00,800
people will publish one permission

1112
00:39:00,800 --> 00:39:02,160
because they are using oauth and it

1113
00:39:02,160 --> 00:39:04,160
requires at least one permission to work

1114
00:39:04,160 --> 00:39:04,960
okay

1115
00:39:04,960 --> 00:39:07,200
but you are literally saying that hey if

1116
00:39:07,200 --> 00:39:08,880
i have one permission any client

1117
00:39:08,880 --> 00:39:10,320
application having this one permission

1118
00:39:10,320 --> 00:39:11,599
will access

1119
00:39:11,599 --> 00:39:13,920
all of my api the entire set of data

1120
00:39:13,920 --> 00:39:15,119
behind it

1121
00:39:15,119 --> 00:39:16,560
that's the bad practice that we

1122
00:39:16,560 --> 00:39:18,000
basically want to reduce so you

1123
00:39:18,000 --> 00:39:20,400
basically you should look into breaking

1124
00:39:20,400 --> 00:39:22,320
down permissions publish permissions

1125
00:39:22,320 --> 00:39:25,839
based on the data that you have

1126
00:39:27,280 --> 00:39:29,200
okay at least try to

1127
00:39:29,200 --> 00:39:31,440
have a read and a read write separate so

1128
00:39:31,440 --> 00:39:34,079
that applications just need to read data

1129
00:39:34,079 --> 00:39:36,160
basically remain in a much secure and uh

1130
00:39:36,160 --> 00:39:38,000
way to

1131
00:39:38,000 --> 00:39:40,480
place in the first place uh again then

1132
00:39:40,480 --> 00:39:42,000
i'll move to the last thing which is

1133
00:39:42,000 --> 00:39:43,520
about

1134
00:39:43,520 --> 00:39:45,200
what as a developer you need to care

1135
00:39:45,200 --> 00:39:46,720
about in uh

1136
00:39:46,720 --> 00:39:48,320
in the assumed breach side of things so

1137
00:39:48,320 --> 00:39:50,480
yes as we said the

1138
00:39:50,480 --> 00:39:51,839
breach is something that uh that

1139
00:39:51,839 --> 00:39:54,400
unfortunately does happen and it catches

1140
00:39:54,400 --> 00:39:56,079
developers by surprise and you have a

1141
00:39:56,079 --> 00:39:58,880
lot of problems recovering from it so as

1142
00:39:58,880 --> 00:40:00,880
a developer the number one thing that

1143
00:40:00,880 --> 00:40:02,160
you should look for is again supporting

1144
00:40:02,160 --> 00:40:04,319
credential hygiene make sure that you

1145
00:40:04,319 --> 00:40:06,160
use one of the mechanisms that allow

1146
00:40:06,160 --> 00:40:08,319
your applications credentials secrets

1147
00:40:08,319 --> 00:40:10,480
etc etc to rotate without your

1148
00:40:10,480 --> 00:40:12,240
application even going down

1149
00:40:12,240 --> 00:40:14,560
uh then this this becomes really useful

1150
00:40:14,560 --> 00:40:17,119
is because as the number of tools uh

1151
00:40:17,119 --> 00:40:18,960
that basically watch data watch watch

1152
00:40:18,960 --> 00:40:20,480
systems look for attacks and

1153
00:40:20,480 --> 00:40:22,640
vulnerabilities and do risk assessments

1154
00:40:22,640 --> 00:40:23,839
they're able to point out

1155
00:40:23,839 --> 00:40:25,200
vulnerabilities and issues you should be

1156
00:40:25,200 --> 00:40:27,359
able to quickly your application can

1157
00:40:27,359 --> 00:40:29,119
keep running while i t admins are the

1158
00:40:29,119 --> 00:40:31,680
tools rotate credentials uh use keyboard

1159
00:40:31,680 --> 00:40:33,040
and manage identities if you have not

1160
00:40:33,040 --> 00:40:35,119
seen that if you have ifr and azure if

1161
00:40:35,119 --> 00:40:37,119
you are on azure and you use azure then

1162
00:40:37,119 --> 00:40:38,480
these are two things that actually help

1163
00:40:38,480 --> 00:40:40,000
you keep credentials completely out of

1164
00:40:40,000 --> 00:40:42,000
code you don't need any credential

1165
00:40:42,000 --> 00:40:44,960
anywhere in your code at all so

1166
00:40:44,960 --> 00:40:46,240
there is a demo for those who are

1167
00:40:46,240 --> 00:40:48,480
interested uh it's recorded demo you can

1168
00:40:48,480 --> 00:40:50,880
go and uh have a look at how managed

1169
00:40:50,880 --> 00:40:52,960
identities actually help

1170
00:40:52,960 --> 00:40:55,760
and what developers can do about it

1171
00:40:55,760 --> 00:40:57,040
more here

1172
00:40:57,040 --> 00:40:59,440
the this is the very important bit that

1173
00:40:59,440 --> 00:41:02,640
we came in as a it actually came in as

1174
00:41:02,640 --> 00:41:04,640
quite late is that

1175
00:41:04,640 --> 00:41:06,319
if you remember you get tokens from

1176
00:41:06,319 --> 00:41:08,720
identity providers it has some very

1177
00:41:08,720 --> 00:41:11,040
useful claims

1178
00:41:11,040 --> 00:41:14,400
object ids upn t ids if you have logging

1179
00:41:14,400 --> 00:41:16,640
telemetry in your application please

1180
00:41:16,640 --> 00:41:18,800
consider logging them according to your

1181
00:41:18,800 --> 00:41:20,400
organizations

1182
00:41:20,400 --> 00:41:23,040
pii

1183
00:41:24,000 --> 00:41:25,839
guidance

1184
00:41:25,839 --> 00:41:27,359
the reason it's not going to be very

1185
00:41:27,359 --> 00:41:29,200
useful to you

1186
00:41:29,200 --> 00:41:30,960
what happens is a lot of these third

1187
00:41:30,960 --> 00:41:33,599
party tools that look into logs are

1188
00:41:33,599 --> 00:41:36,640
getting smart about these

1189
00:41:36,640 --> 00:41:38,000
when they're looking for lateral

1190
00:41:38,000 --> 00:41:39,760
movements if there are applications that

1191
00:41:39,760 --> 00:41:41,040
provide this you know microsoft

1192
00:41:41,040 --> 00:41:42,319
applications will provide this if you

1193
00:41:42,319 --> 00:41:44,160
know how to configure them they will

1194
00:41:44,160 --> 00:41:46,000
tell you how the attacker moved whether

1195
00:41:46,000 --> 00:41:47,440
they managed to get to this particular

1196
00:41:47,440 --> 00:41:49,119
app or not

1197
00:41:49,119 --> 00:41:51,599
okay so look into those

1198
00:41:51,599 --> 00:41:54,079
uh the third one is yeah as i've talked

1199
00:41:54,079 --> 00:41:55,599
about your applications you can support

1200
00:41:55,599 --> 00:41:57,440
cae if you want to

1201
00:41:57,440 --> 00:41:58,400
uh

1202
00:41:58,400 --> 00:42:01,440
the final set is that it's it's there

1203
00:42:01,440 --> 00:42:03,440
for liking even before i got into the it

1204
00:42:03,440 --> 00:42:04,880
business

1205
00:42:04,880 --> 00:42:07,280
please test your backups

1206
00:42:07,280 --> 00:42:09,520
don't just back up okay

1207
00:42:09,520 --> 00:42:11,440
when when a breach occurs

1208
00:42:11,440 --> 00:42:15,280
you would want to restore a backup then

1209
00:42:15,680 --> 00:42:18,480
if you have sensitive data basic

1210
00:42:18,480 --> 00:42:20,480
information encrypted make sure that

1211
00:42:20,480 --> 00:42:21,200
your

1212
00:42:21,200 --> 00:42:23,280
encryption keys and other keys that you

1213
00:42:23,280 --> 00:42:24,880
use in your application are different

1214
00:42:24,880 --> 00:42:26,560
ones

1215
00:42:26,560 --> 00:42:27,599
otherwise you don't want your

1216
00:42:27,599 --> 00:42:29,359
application and your data to be hacked

1217
00:42:29,359 --> 00:42:31,359
at the same time

1218
00:42:31,359 --> 00:42:33,599
this is again very useful for those who

1219
00:42:33,599 --> 00:42:36,240
have azure active directory tenants uh

1220
00:42:36,240 --> 00:42:38,160
we give out free azure ad tenants for

1221
00:42:38,160 --> 00:42:40,560
anybody who wants however you want you

1222
00:42:40,560 --> 00:42:42,640
don't have to develop in your production

1223
00:42:42,640 --> 00:42:45,599
tenant it will require you to do things

1224
00:42:45,599 --> 00:42:47,200
like consents and registered

1225
00:42:47,200 --> 00:42:49,200
applications and do all all kinds of

1226
00:42:49,200 --> 00:42:51,520
things it it's very difficult for it

1227
00:42:51,520 --> 00:42:54,079
administrators to accommodate that we

1228
00:42:54,079 --> 00:42:56,160
give you free fully loaded tenants with

1229
00:42:56,160 --> 00:42:58,240
all the licenses literally free you can

1230
00:42:58,240 --> 00:43:00,640
just search for an m365 developer

1231
00:43:00,640 --> 00:43:01,760
subscription

1232
00:43:01,760 --> 00:43:03,520
please get one or two of those or maybe

1233
00:43:03,520 --> 00:43:05,920
10 of those do your development there

1234
00:43:05,920 --> 00:43:07,760
once you are ready then come to your

1235
00:43:07,760 --> 00:43:09,760
production your business tenant to go

1236
00:43:09,760 --> 00:43:12,560
and actually deploy that app

1237
00:43:12,560 --> 00:43:15,520
don't test it here

1238
00:43:17,520 --> 00:43:19,680
okay these are the links that i have and

1239
00:43:19,680 --> 00:43:21,920
this is my final slide

1240
00:43:21,920 --> 00:43:25,400
any other questions

1241
00:43:34,240 --> 00:43:37,839
uh if you go to the

1242
00:43:37,839 --> 00:43:39,520
b site speedbox site and go to my

1243
00:43:39,520 --> 00:43:41,440
session it actually is available as a

1244
00:43:41,440 --> 00:43:43,839
download

1245
00:43:47,359 --> 00:43:48,160
okay

1246
00:43:48,160 --> 00:43:49,520
thank you for coming to this session i

1247
00:43:49,520 --> 00:43:53,480
hope you got oh sorry

1248
00:43:57,119 --> 00:44:01,560
i'm afraid i can't hear yourself

1249
00:44:12,880 --> 00:44:15,280
so the question is how is azure enabling

1250
00:44:15,280 --> 00:44:16,720
now azure is an umbrella of a lot of

1251
00:44:16,720 --> 00:44:17,839
services you have to understand there

1252
00:44:17,839 --> 00:44:20,079
are two aspects of it

1253
00:44:20,079 --> 00:44:22,079
are the services behind that run azure

1254
00:44:22,079 --> 00:44:24,160
are zero sustainably as microsoft users

1255
00:44:24,160 --> 00:44:25,280
first

1256
00:44:25,280 --> 00:44:27,440
but

1257
00:44:27,760 --> 00:44:30,000
while all the knobs and all the all the

1258
00:44:30,000 --> 00:44:32,160
all the controls are there in azure the

1259
00:44:32,160 --> 00:44:34,960
developers and i.t admins have to use it

1260
00:44:34,960 --> 00:44:37,119
if you are integrating and deploying an

1261
00:44:37,119 --> 00:44:38,800
app on azure today

1262
00:44:38,800 --> 00:44:40,720
if your developer chooses not to use

1263
00:44:40,720 --> 00:44:43,200
managed identity and as your key vault

1264
00:44:43,200 --> 00:44:44,880
you it will not be zero trust ready so

1265
00:44:44,880 --> 00:44:46,079
you have to understand that there are

1266
00:44:46,079 --> 00:44:48,079
two aspects of it and that's why we have

1267
00:44:48,079 --> 00:44:50,000
this it's like hey there are features

1268
00:44:50,000 --> 00:44:52,319
available but we cannot force you to use

1269
00:44:52,319 --> 00:44:53,200
something

1270
00:44:53,200 --> 00:44:55,599
developer by nature coding is a nature

1271
00:44:55,599 --> 00:44:56,720
where

1272
00:44:56,720 --> 00:44:58,720
people just write a lot of stuff and you

1273
00:44:58,720 --> 00:45:03,000
have to always keep updating things

1274
00:45:04,640 --> 00:45:06,640
so the one that we have is essentially

1275
00:45:06,640 --> 00:45:08,240
azure active directory so that's

1276
00:45:08,240 --> 00:45:10,160
literally our guide so

1277
00:45:10,160 --> 00:45:11,119
it's the

1278
00:45:11,119 --> 00:45:14,560
very first one for the developers yep

1279
00:45:14,560 --> 00:45:17,799
thank you

1280
00:45:24,000 --> 00:45:26,240
okay

1281
00:45:26,319 --> 00:45:28,480
okay thank you again uh it was really

1282
00:45:28,480 --> 00:45:29,680
nice

1283
00:45:29,680 --> 00:45:30,960
seeing this crowd

1284
00:45:30,960 --> 00:45:32,800
i hope you had a good takeaway

1285
00:45:32,800 --> 00:45:36,040
from this

