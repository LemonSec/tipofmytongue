1
00:00:00,410 --> 00:00:02,190
all right everybody we're going to get

2
00:00:02,190 --> 00:00:04,830
started with a 225 presentation go ahead

3
00:00:04,830 --> 00:00:07,410
and grab a seat my name is John Ceola if

4
00:00:07,410 --> 00:00:08,970
you guys haven't seen me earlier thanks

5
00:00:08,970 --> 00:00:10,230
for coming out this is really it's

6
00:00:10,230 --> 00:00:11,519
turning into a really great event so

7
00:00:11,519 --> 00:00:12,900
thanks everyone for making this such a

8
00:00:12,900 --> 00:00:14,969
great event I'm going to be introducing

9
00:00:14,969 --> 00:00:17,190
John Downey so John Downey is the

10
00:00:17,190 --> 00:00:19,320
security lead at braintree which I'll

11
00:00:19,320 --> 00:00:21,810
tell you a little bit about braintree

12
00:00:21,810 --> 00:00:23,789
helps businesses accept payments online

13
00:00:23,789 --> 00:00:26,189
in development tools with great

14
00:00:26,189 --> 00:00:28,199
development tools and first class first

15
00:00:28,199 --> 00:00:30,480
class support one interesting note about

16
00:00:30,480 --> 00:00:32,159
him is what he likes to do in his free

17
00:00:32,159 --> 00:00:33,600
time is contribute to open source

18
00:00:33,600 --> 00:00:35,520
projects and he helps high schoolers

19
00:00:35,520 --> 00:00:37,320
build robots so that's that's pretty

20
00:00:37,320 --> 00:00:38,520
cool and I'm really excited about this

21
00:00:38,520 --> 00:00:40,320
talk I hope you guys are too so I'm

22
00:00:40,320 --> 00:00:41,640
going to pass it over to John with this

23
00:00:41,640 --> 00:00:46,969
talk about crypto pitfalls thanks Sean

24
00:00:48,079 --> 00:00:51,000
all right so I want to take a second to

25
00:00:51,000 --> 00:00:54,149
kind of lay out why I've been giving it

26
00:00:54,149 --> 00:00:55,649
while I like giving this talk and kind

27
00:00:55,649 --> 00:00:58,260
of what the whole purpose is here um so

28
00:00:58,260 --> 00:01:00,660
I know you know you're at bsides so

29
00:01:00,660 --> 00:01:02,160
there you have an obvious by in our

30
00:01:02,160 --> 00:01:04,769
interest in security and what I've been

31
00:01:04,769 --> 00:01:07,799
finding as I go around is that I keep

32
00:01:07,799 --> 00:01:09,600
seeing developers and even security

33
00:01:09,600 --> 00:01:11,670
people in some instances make the same

34
00:01:11,670 --> 00:01:14,670
mistakes over and over with crypto both

35
00:01:14,670 --> 00:01:17,130
in the news and in the organizations

36
00:01:17,130 --> 00:01:19,799
that I've worked with and so this is

37
00:01:19,799 --> 00:01:21,439
really more of a cautionary tale I

38
00:01:21,439 --> 00:01:23,430
personally love hearing stories about

39
00:01:23,430 --> 00:01:25,860
failure because I think those are the

40
00:01:25,860 --> 00:01:27,299
most fascinating stories you can learn

41
00:01:27,299 --> 00:01:29,850
the most from them well I want is this

42
00:01:29,850 --> 00:01:31,680
talk to be grounded in real events these

43
00:01:31,680 --> 00:01:34,439
are all real examples I try to give in

44
00:01:34,439 --> 00:01:36,210
most cases of like how it actually

45
00:01:36,210 --> 00:01:38,579
failed and what what ended up happening

46
00:01:38,579 --> 00:01:42,030
when it did fail my goal here is for a

47
00:01:42,030 --> 00:01:43,920
lot of us you know hey we're security

48
00:01:43,920 --> 00:01:46,680
people but we may not be crypto security

49
00:01:46,680 --> 00:01:48,810
people and it's very easy to get in over

50
00:01:48,810 --> 00:01:50,790
your head so let you know knowing when

51
00:01:50,790 --> 00:01:52,110
you're in over your head and knowing

52
00:01:52,110 --> 00:01:53,729
when to get professional help is very

53
00:01:53,729 --> 00:01:55,770
important so with that I'll start the

54
00:01:55,770 --> 00:01:58,710
talk as John mentioned so I'm the

55
00:01:58,710 --> 00:02:01,500
security lead at braintree Braintree

56
00:02:01,500 --> 00:02:03,030
helps businesses accept payments online

57
00:02:03,030 --> 00:02:05,640
businesses like github and uber and

58
00:02:05,640 --> 00:02:08,550
Airbnb so as you can imagine do a lot

59
00:02:08,550 --> 00:02:10,190
with crypto a lot with security

60
00:02:10,190 --> 00:02:11,790
something you may not know about

61
00:02:11,790 --> 00:02:13,030
Braintree

62
00:02:13,030 --> 00:02:14,290
and a half years ago we were acquired by

63
00:02:14,290 --> 00:02:17,860
paypal so as part of paypal if you've

64
00:02:17,860 --> 00:02:20,170
ever worked with for a very large or a

65
00:02:20,170 --> 00:02:22,030
publicly traded company you'll recognize

66
00:02:22,030 --> 00:02:24,280
this statement these are my views not

67
00:02:24,280 --> 00:02:28,270
that of my company yeah alright moving

68
00:02:28,270 --> 00:02:30,610
on now that that's out of the way so I

69
00:02:30,610 --> 00:02:32,709
want to start with a general overview of

70
00:02:32,709 --> 00:02:34,300
like what is modern crypto what are we

71
00:02:34,300 --> 00:02:37,810
trying to get out of this ah so with in

72
00:02:37,810 --> 00:02:40,330
cryptography in the modern sense we want

73
00:02:40,330 --> 00:02:41,890
we could try to get three things out of

74
00:02:41,890 --> 00:02:45,489
it the first ones confidentiality so

75
00:02:45,489 --> 00:02:48,580
this is keeping something secret if I

76
00:02:48,580 --> 00:02:50,380
want to send something across the

77
00:02:50,380 --> 00:02:52,480
internet like my credit card number I

78
00:02:52,480 --> 00:02:54,459
want to make sure that it's remained

79
00:02:54,459 --> 00:02:57,160
secret between me and the person who's

80
00:02:57,160 --> 00:02:58,959
going to receive it that no one in the

81
00:02:58,959 --> 00:03:00,580
middle who intercepts it should be able

82
00:03:00,580 --> 00:03:03,580
to read it the next thing is

83
00:03:03,580 --> 00:03:06,370
authentication we also often call this

84
00:03:06,370 --> 00:03:08,680
integrity protection what that means is

85
00:03:08,680 --> 00:03:11,050
when I send a message no one in the

86
00:03:11,050 --> 00:03:12,340
middle should be able to modify it

87
00:03:12,340 --> 00:03:16,049
without that being detected in somewhere

88
00:03:16,049 --> 00:03:19,030
and then the last ones identification we

89
00:03:19,030 --> 00:03:20,920
often combine this with the previous one

90
00:03:20,920 --> 00:03:23,920
this is knowing who sent the message so

91
00:03:23,920 --> 00:03:25,690
you know when I go and buy something on

92
00:03:25,690 --> 00:03:27,850
amazon I want to know that I'm talking

93
00:03:27,850 --> 00:03:31,150
to Amazon so we often see this in the

94
00:03:31,150 --> 00:03:33,579
form of digital signatures and that will

95
00:03:33,579 --> 00:03:36,940
say you know John wrote you this message

96
00:03:36,940 --> 00:03:38,590
and it hasn't been modified since John

97
00:03:38,590 --> 00:03:43,329
wrote it modern cryptography is a

98
00:03:43,329 --> 00:03:46,150
rigorous science is based on largely on

99
00:03:46,150 --> 00:03:49,540
hard math problems so for example RSA is

100
00:03:49,540 --> 00:03:51,430
based on the problem that breaking down

101
00:03:51,430 --> 00:03:53,799
a very large number into its base primes

102
00:03:53,799 --> 00:03:56,170
is something that we know is incredibly

103
00:03:56,170 --> 00:03:58,480
hard you know that's the factoring

104
00:03:58,480 --> 00:04:00,010
problem and what we're doing is we're

105
00:04:00,010 --> 00:04:02,170
betting on no major advances in either

106
00:04:02,170 --> 00:04:05,170
math work or computing so we know that

107
00:04:05,170 --> 00:04:07,620
RSA is very hard on classical computers

108
00:04:07,620 --> 00:04:10,450
there's a whole subsection to be talked

109
00:04:10,450 --> 00:04:12,579
about for quantum computers which you

110
00:04:12,579 --> 00:04:14,019
can go read about online because it's

111
00:04:14,019 --> 00:04:18,370
very fascinating crypto like any science

112
00:04:18,370 --> 00:04:20,769
should be peer-reviewed so we often hear

113
00:04:20,769 --> 00:04:22,960
this in that the kind of the you know

114
00:04:22,960 --> 00:04:25,450
war cry of don't don't design your own

115
00:04:25,450 --> 00:04:26,520
crypto don't employ

116
00:04:26,520 --> 00:04:28,710
your own crypto and I think we've

117
00:04:28,710 --> 00:04:30,990
largely we've done a really good job in

118
00:04:30,990 --> 00:04:32,819
the crypto community and the security

119
00:04:32,819 --> 00:04:34,759
community of getting that point across

120
00:04:34,759 --> 00:04:37,349
generally you know you it's very rare

121
00:04:37,349 --> 00:04:38,759
you'll find someone who disagrees with

122
00:04:38,759 --> 00:04:41,490
that these days this also extends though

123
00:04:41,490 --> 00:04:43,860
to things like implementing your own

124
00:04:43,860 --> 00:04:45,539
crypto from like base primitives it's

125
00:04:45,539 --> 00:04:47,639
very easy to not realize that you're

126
00:04:47,639 --> 00:04:51,330
making mistakes ah another thing with

127
00:04:51,330 --> 00:04:53,460
peer review comes up is kir kos

128
00:04:53,460 --> 00:04:55,470
principle that is that I should be able

129
00:04:55,470 --> 00:04:57,810
to publish everything about my system

130
00:04:57,810 --> 00:05:00,150
and how the cryptography is used except

131
00:05:00,150 --> 00:05:03,389
for the keys it sure in Maine secure you

132
00:05:03,389 --> 00:05:04,530
know we often think about this as

133
00:05:04,530 --> 00:05:06,270
security through obscurity you shouldn't

134
00:05:06,270 --> 00:05:07,949
have to obscure the design of your

135
00:05:07,949 --> 00:05:12,810
system to keep it secure the

136
00:05:12,810 --> 00:05:14,970
cryptography itself is very strong the

137
00:05:14,970 --> 00:05:16,949
individual primitives I you know I

138
00:05:16,949 --> 00:05:18,930
wouldn't expect to see them break

139
00:05:18,930 --> 00:05:21,150
anytime soon I don't you know I don't

140
00:05:21,150 --> 00:05:22,860
expect to wake up tomorrow and have read

141
00:05:22,860 --> 00:05:26,190
the headline AES itself for RSA itself

142
00:05:26,190 --> 00:05:29,129
is totally broken I do expect however to

143
00:05:29,129 --> 00:05:32,190
wake up and be like the way TLS uses RSA

144
00:05:32,190 --> 00:05:34,650
and AES is totally broken in like some

145
00:05:34,650 --> 00:05:36,780
subtle way on these systems like that

146
00:05:36,780 --> 00:05:38,639
that that would make sense to me is

147
00:05:38,639 --> 00:05:40,409
because it's often the way we combine

148
00:05:40,409 --> 00:05:42,900
these systems it's the seams that end up

149
00:05:42,900 --> 00:05:44,759
getting attacked and that's really not

150
00:05:44,759 --> 00:05:46,830
any different from many other areas and

151
00:05:46,830 --> 00:05:48,900
security we go after the seams where the

152
00:05:48,900 --> 00:05:54,509
systems are often the weakest so I would

153
00:05:54,509 --> 00:05:55,770
like a chance to read this quote to you

154
00:05:55,770 --> 00:05:57,029
because I think it's really important it

155
00:05:57,029 --> 00:05:58,650
kind of sums up what I mean this is from

156
00:05:58,650 --> 00:06:00,750
the book cryptography engineering you've

157
00:06:00,750 --> 00:06:02,130
probably seen the door to a bank vault

158
00:06:02,130 --> 00:06:04,710
at least in the movies you know 10 inch

159
00:06:04,710 --> 00:06:06,900
thick hardened steel with huge bolts to

160
00:06:06,900 --> 00:06:08,759
lock it in place it certainly looks

161
00:06:08,759 --> 00:06:11,099
impressive we often find the digital

162
00:06:11,099 --> 00:06:12,539
equivalent of such a vault door

163
00:06:12,539 --> 00:06:14,789
installed in a tent the people standing

164
00:06:14,789 --> 00:06:17,279
around it are over how thick the door

165
00:06:17,279 --> 00:06:18,990
should be rather than spending their

166
00:06:18,990 --> 00:06:22,800
time looking at the tent so what you

167
00:06:22,800 --> 00:06:24,000
know what I kind of take from this and

168
00:06:24,000 --> 00:06:25,949
what this means is that you know you'll

169
00:06:25,949 --> 00:06:28,650
sometimes you're going to you'll find 22

170
00:06:28,650 --> 00:06:30,090
people will be in this argument of like

171
00:06:30,090 --> 00:06:32,940
it should be 128-bit key no it should be

172
00:06:32,940 --> 00:06:36,000
a 256-bit key and they're arguing about

173
00:06:36,000 --> 00:06:38,520
this aspect of a system but they're not

174
00:06:38,520 --> 00:06:40,210
you know ignoring the obvious like

175
00:06:40,210 --> 00:06:41,860
equal injection or other you know kind

176
00:06:41,860 --> 00:06:43,389
of attacks because it you know it can be

177
00:06:43,389 --> 00:06:46,330
fun to argue about those things but you

178
00:06:46,330 --> 00:06:47,800
have to make sure that you're not

179
00:06:47,800 --> 00:06:49,300
installing your bank vault door on our

180
00:06:49,300 --> 00:06:54,069
turns okay if you take nothing away from

181
00:06:54,069 --> 00:06:56,949
this whole thing this slide I think is

182
00:06:56,949 --> 00:07:00,630
the most important for practical advice

183
00:07:00,900 --> 00:07:03,729
everybody you know all these systems

184
00:07:03,729 --> 00:07:05,889
have make these mistakes but in general

185
00:07:05,889 --> 00:07:08,259
what you know you would recommend is hey

186
00:07:08,259 --> 00:07:09,340
if someone comes to you and you're like

187
00:07:09,340 --> 00:07:11,020
we need to protect data in transit so

188
00:07:11,020 --> 00:07:13,810
that's data going across a network use

189
00:07:13,810 --> 00:07:18,250
TLS we used to call it SSL or use SSH

190
00:07:18,250 --> 00:07:21,190
your ipsec VPN use some known technology

191
00:07:21,190 --> 00:07:23,860
don't go and yell but like ah let's go

192
00:07:23,860 --> 00:07:25,990
you know invent a new network transit

193
00:07:25,990 --> 00:07:29,680
technology for data at rest my general

194
00:07:29,680 --> 00:07:33,009
recommendation is used gpg if so data at

195
00:07:33,009 --> 00:07:34,509
rest means like data setting on disk

196
00:07:34,509 --> 00:07:36,639
data sitting on s3 or other cloud

197
00:07:36,639 --> 00:07:39,580
service provider if you can't fit that

198
00:07:39,580 --> 00:07:42,190
your model unto one of these to try to

199
00:07:42,190 --> 00:07:43,750
rework it until you can because it'll

200
00:07:43,750 --> 00:07:47,409
make your life a lot easier the next

201
00:07:47,409 --> 00:07:49,780
thing I want to mention is to avoid

202
00:07:49,780 --> 00:07:51,580
low-level libraries these are libraries

203
00:07:51,580 --> 00:07:54,159
like just open SSL pi crypto bouncy

204
00:07:54,159 --> 00:07:56,940
castle the reason is is I often describe

205
00:07:56,940 --> 00:07:59,740
these little libraries as if you're

206
00:07:59,740 --> 00:08:01,810
giving a group of developers a bucket

207
00:08:01,810 --> 00:08:03,580
full of razor blades and you're asking

208
00:08:03,580 --> 00:08:05,740
them to make us all and you know if

209
00:08:05,740 --> 00:08:07,479
you're someone is going to hurt

210
00:08:07,479 --> 00:08:09,550
themselves and it's not you know it's we

211
00:08:09,550 --> 00:08:12,370
can avoid it it shouldn't happen high

212
00:08:12,370 --> 00:08:14,380
level library is something like salt or

213
00:08:14,380 --> 00:08:16,599
lip sodium which has bindings to see

214
00:08:16,599 --> 00:08:19,150
Ruby and other things or something like

215
00:08:19,150 --> 00:08:23,440
keys are which is from google and Python

216
00:08:23,440 --> 00:08:25,419
Java I think they even now have C++

217
00:08:25,419 --> 00:08:28,330
these high-level libraries help help

218
00:08:28,330 --> 00:08:30,130
reduce the mistakes by taking away a lot

219
00:08:30,130 --> 00:08:31,509
of the seems you only to make as many

220
00:08:31,509 --> 00:08:34,328
choices and that's often actually a good

221
00:08:34,328 --> 00:08:37,270
thing you know choice isn't always great

222
00:08:37,270 --> 00:08:39,099
encrypt though so these help take away

223
00:08:39,099 --> 00:08:41,349
some of the choices are and protect you

224
00:08:41,349 --> 00:08:44,680
in a wand away so I did talk about pit I

225
00:08:44,680 --> 00:08:47,770
did promise pitfalls so let's talk about

226
00:08:47,770 --> 00:08:51,760
those the first place talk about is

227
00:08:51,760 --> 00:08:54,649
random number generators randomness is

228
00:08:54,649 --> 00:08:57,649
core part of any crypto system we use it

229
00:08:57,649 --> 00:08:59,660
for encryption keys and session tokens

230
00:08:59,660 --> 00:09:02,360
and password reset tokens so if we're

231
00:09:02,360 --> 00:09:04,819
not getting good random data oftentimes

232
00:09:04,819 --> 00:09:08,990
that could be a very big problem and so

233
00:09:08,990 --> 00:09:10,459
our first pitfall no scattering not

234
00:09:10,459 --> 00:09:12,199
using a cryptographically strong random

235
00:09:12,199 --> 00:09:14,990
number generator there's a paper

236
00:09:14,990 --> 00:09:17,449
published usenix a few years ago called

237
00:09:17,449 --> 00:09:19,309
I forgot your password randomness

238
00:09:19,309 --> 00:09:21,649
attacks against PHP applications and

239
00:09:21,649 --> 00:09:24,199
what they did is they were they surveyed

240
00:09:24,199 --> 00:09:26,300
in kind of dig dug into a PHP

241
00:09:26,300 --> 00:09:28,759
application that was using a not crypto

242
00:09:28,759 --> 00:09:30,259
strong rain in our dinner they were just

243
00:09:30,259 --> 00:09:32,470
using the built in racine twister

244
00:09:32,470 --> 00:09:35,029
generator and they were using it to

245
00:09:35,029 --> 00:09:37,639
generate password reset tokens and so

246
00:09:37,639 --> 00:09:38,869
with a little bit investigation in

247
00:09:38,869 --> 00:09:41,329
digging they were able to analyze the

248
00:09:41,329 --> 00:09:43,459
system such that they could they could

249
00:09:43,459 --> 00:09:46,220
predict correctly the password reset

250
00:09:46,220 --> 00:09:47,569
token that was going to be emailed to

251
00:09:47,569 --> 00:09:50,089
the user without you know without

252
00:09:50,089 --> 00:09:51,740
getting it and therefore they could

253
00:09:51,740 --> 00:09:56,269
reset the users password and so this is

254
00:09:56,269 --> 00:09:58,790
a kind of an example related to that the

255
00:09:58,790 --> 00:10:01,579
data on the left is from PHP some

256
00:10:01,579 --> 00:10:03,439
ancient version running on windows so

257
00:10:03,439 --> 00:10:05,059
it's kind of hamstrung it to its worst

258
00:10:05,059 --> 00:10:07,329
case and then the data on the right is

259
00:10:07,329 --> 00:10:10,040
from an actual random number generator

260
00:10:10,040 --> 00:10:12,589
those you know correctly strong and what

261
00:10:12,589 --> 00:10:14,870
if you're at the right angle which I am

262
00:10:14,870 --> 00:10:17,509
not so I hope you are what you see is

263
00:10:17,509 --> 00:10:19,129
the data in left has a kind of a period

264
00:10:19,129 --> 00:10:21,199
it has a little bit of waves and that is

265
00:10:21,199 --> 00:10:23,179
the exact opposite of what you want in

266
00:10:23,179 --> 00:10:25,040
your random number generator you don't

267
00:10:25,040 --> 00:10:30,740
want any kind of pattern at all so the

268
00:10:30,740 --> 00:10:32,389
next one using a broken random number

269
00:10:32,389 --> 00:10:34,850
generator since we're in the security

270
00:10:34,850 --> 00:10:36,829
community we probably all hopefully

271
00:10:36,829 --> 00:10:40,490
remember the Debian the Debbie issue a

272
00:10:40,490 --> 00:10:42,319
few years ago if that predates your

273
00:10:42,319 --> 00:10:44,240
entry into the industry I'll talk about

274
00:10:44,240 --> 00:10:46,999
a little bit here what happened was this

275
00:10:46,999 --> 00:10:48,949
line of code was commented out of

276
00:10:48,949 --> 00:10:52,999
openssl only in debian ah so open SSL

277
00:10:52,999 --> 00:10:55,730
upstream didn't commented out but Debian

278
00:10:55,730 --> 00:10:58,549
is the base system for a lot of Linux's

279
00:10:58,549 --> 00:11:00,829
these days so this was copied it

280
00:11:00,829 --> 00:11:02,389
subsequently into a bun too and a few

281
00:11:02,389 --> 00:11:06,860
others as commented out in 2006 but it

282
00:11:06,860 --> 00:11:08,240
was not discovered until two thousand

283
00:11:08,240 --> 00:11:08,529
eight

284
00:11:08,529 --> 00:11:11,329
and for two years the random number

285
00:11:11,329 --> 00:11:13,790
generator and face I'd openssl was

286
00:11:13,790 --> 00:11:16,519
broken on the on debian and this had a

287
00:11:16,519 --> 00:11:19,519
lot of issues so all the ssl keys and

288
00:11:19,519 --> 00:11:21,769
the ssh keys were broken for those two

289
00:11:21,769 --> 00:11:22,850
years and they had to be completely

290
00:11:22,850 --> 00:11:24,920
thrown away and regenerated and what

291
00:11:24,920 --> 00:11:26,630
this kind of goes to shows bad crypto

292
00:11:26,630 --> 00:11:29,389
looks a lot like good crypto and it's

293
00:11:29,389 --> 00:11:32,329
very easy to get fooled bear so the

294
00:11:32,329 --> 00:11:35,060
commit message for this the committee

295
00:11:35,060 --> 00:11:36,980
was don't add uninitialized data to the

296
00:11:36,980 --> 00:11:38,660
random number generator this stops bal

297
00:11:38,660 --> 00:11:40,160
grain from giving error messages and

298
00:11:40,160 --> 00:11:42,260
unrelated code so if you're not familiar

299
00:11:42,260 --> 00:11:45,589
Val grind is a utility to help analyze

300
00:11:45,589 --> 00:11:48,050
memory you like memory leaks and memory

301
00:11:48,050 --> 00:11:49,730
usage and C programs they were

302
00:11:49,730 --> 00:11:51,589
essentially doing this to stop like a

303
00:11:51,589 --> 00:11:55,490
warning of in Bal grind ah and the the

304
00:11:55,490 --> 00:11:56,750
sad thing is they ran this by the

305
00:11:56,750 --> 00:11:58,850
openssl mailing list and no one yelled

306
00:11:58,850 --> 00:12:01,990
like oh my gosh stop it don't do that I

307
00:12:01,990 --> 00:12:04,160
went back and did some research here is

308
00:12:04,160 --> 00:12:07,730
that line today so it's that this is one

309
00:12:07,730 --> 00:12:09,320
way to stop people from commenting it

310
00:12:09,320 --> 00:12:11,540
out there's giant warnings all around

311
00:12:11,540 --> 00:12:13,519
that doom will rain down if you do if

312
00:12:13,519 --> 00:12:16,730
you touch it but debian was not the only

313
00:12:16,730 --> 00:12:18,740
system to have issues with random number

314
00:12:18,740 --> 00:12:21,260
generator there was one on android a few

315
00:12:21,260 --> 00:12:23,660
years ago where people they found out

316
00:12:23,660 --> 00:12:25,670
that because their bitcoin was we were

317
00:12:25,670 --> 00:12:27,860
being stolen people were using bitcoin

318
00:12:27,860 --> 00:12:30,170
applications in digital wallets on

319
00:12:30,170 --> 00:12:32,269
android devices and what what was

320
00:12:32,269 --> 00:12:33,740
discovered is the android was shipping

321
00:12:33,740 --> 00:12:35,600
with a broken random number generator in

322
00:12:35,600 --> 00:12:39,110
its core OS and this took quite a bit of

323
00:12:39,110 --> 00:12:42,800
undertaking for google to fix another

324
00:12:42,800 --> 00:12:45,350
one this was from very late last year

325
00:12:45,350 --> 00:12:49,399
juniper it was discovered had a dual ec

326
00:12:49,399 --> 00:12:51,410
which is a random number generator with

327
00:12:51,410 --> 00:12:56,750
a questionable provenance that had been

328
00:12:56,750 --> 00:12:58,639
inserted in there and there were

329
00:12:58,639 --> 00:13:00,709
constants in there that no one could

330
00:13:00,709 --> 00:13:03,139
really explain where they came from and

331
00:13:03,139 --> 00:13:05,180
so that raised a lot of questions for

332
00:13:05,180 --> 00:13:08,000
juniper as to why they stopped using a

333
00:13:08,000 --> 00:13:09,649
good random number generator and started

334
00:13:09,649 --> 00:13:13,069
using this dual EC especially because

335
00:13:13,069 --> 00:13:15,410
we've known since 2007 that dual EC is

336
00:13:15,410 --> 00:13:18,260
not exactly fast and it also has a

337
00:13:18,260 --> 00:13:19,640
possibility that it could be easily

338
00:13:19,640 --> 00:13:21,600
backdoored this

339
00:13:21,600 --> 00:13:24,420
presentations / from 2007 at a crypto

340
00:13:24,420 --> 00:13:28,230
conference and this is one from last

341
00:13:28,230 --> 00:13:30,480
year if you're following freebsd current

342
00:13:30,480 --> 00:13:32,610
they were updating the random number

343
00:13:32,610 --> 00:13:35,430
generator in freebsd to follow a

344
00:13:35,430 --> 00:13:38,009
stronger model and they accidentally

345
00:13:38,009 --> 00:13:40,920
broke it for four months fortunately

346
00:13:40,920 --> 00:13:42,149
this never made it into a release

347
00:13:42,149 --> 00:13:44,250
version but if you were running on

348
00:13:44,250 --> 00:13:45,600
current for four months your random

349
00:13:45,600 --> 00:13:46,769
number generator and your operating

350
00:13:46,769 --> 00:13:52,110
system was broken and then lastly in

351
00:13:52,110 --> 00:13:54,000
this category I want to talk about not

352
00:13:54,000 --> 00:13:56,790
using random data when it's required so

353
00:13:56,790 --> 00:13:59,279
in the ps3 they were using this

354
00:13:59,279 --> 00:14:01,769
algorithm called ecdsa which is the

355
00:14:01,769 --> 00:14:03,240
elliptic curve digital signature

356
00:14:03,240 --> 00:14:05,459
algorithm you don't need to know the the

357
00:14:05,459 --> 00:14:07,050
details of it but you do need to know

358
00:14:07,050 --> 00:14:09,769
that I love to curve DSA much like DSA

359
00:14:09,769 --> 00:14:13,410
requires a parameter that has to be

360
00:14:13,410 --> 00:14:15,420
uniformly random for every single

361
00:14:15,420 --> 00:14:18,600
signature so you know you would expect

362
00:14:18,600 --> 00:14:20,790
Oh all sources from a crypto strong

363
00:14:20,790 --> 00:14:22,829
random number generator but I believe in

364
00:14:22,829 --> 00:14:25,110
this case sony was had a constant they

365
00:14:25,110 --> 00:14:27,029
had hard-coded and the in the signing

366
00:14:27,029 --> 00:14:29,970
code and this allowed the through some

367
00:14:29,970 --> 00:14:32,279
really fun math the attackers to recover

368
00:14:32,279 --> 00:14:34,319
Sony's signing key so they were able to

369
00:14:34,319 --> 00:14:36,480
sign arbitrary images to put onto the

370
00:14:36,480 --> 00:14:39,149
ps3 I think in this case they used it to

371
00:14:39,149 --> 00:14:44,339
load homebrew software so general

372
00:14:44,339 --> 00:14:45,630
recommendations out of this a user

373
00:14:45,630 --> 00:14:47,370
crypto stronger in a nerd generator if

374
00:14:47,370 --> 00:14:50,490
you're on unix our unix-like system read

375
00:14:50,490 --> 00:14:52,410
from deb you random there is some

376
00:14:52,410 --> 00:14:54,839
controversy about this that's kind of

377
00:14:54,839 --> 00:14:57,300
slowly going away if you aren't familiar

378
00:14:57,300 --> 00:14:59,399
with it I wouldn't worry about getting

379
00:14:59,399 --> 00:15:00,689
familiar with it if you are familiar

380
00:15:00,689 --> 00:15:02,550
with it we can talk to me at the after

381
00:15:02,550 --> 00:15:05,759
party if you want to argue ah windows

382
00:15:05,759 --> 00:15:08,639
there's random number generator net and

383
00:15:08,639 --> 00:15:11,009
there's Krypton random for those who are

384
00:15:11,009 --> 00:15:14,819
on a windows out of the house next up

385
00:15:14,819 --> 00:15:16,980
hash function so hash functions these

386
00:15:16,980 --> 00:15:18,930
are often called fingerprints or they're

387
00:15:18,930 --> 00:15:21,420
kind of one way the reason we think of

388
00:15:21,420 --> 00:15:23,639
them as fingerprints is just like

389
00:15:23,639 --> 00:15:25,259
ideally no two people have the same

390
00:15:25,259 --> 00:15:27,600
fingerprint no two inputs to a hash

391
00:15:27,600 --> 00:15:29,430
function should yield the same output in

392
00:15:29,430 --> 00:15:31,470
an ideal world and they shouldn't be

393
00:15:31,470 --> 00:15:34,230
reversible meaning if I could just give

394
00:15:34,230 --> 00:15:35,250
you a fingerprint

395
00:15:35,250 --> 00:15:37,410
off of a glass or something without

396
00:15:37,410 --> 00:15:39,330
access to a fingerprint database you

397
00:15:39,330 --> 00:15:40,470
shouldn't be able to tell me who that

398
00:15:40,470 --> 00:15:46,170
belongs to and with with hash functions

399
00:15:46,170 --> 00:15:47,460
there are a couple of pitfalls the first

400
00:15:47,460 --> 00:15:50,610
one using weak and old algorithms so

401
00:15:50,610 --> 00:15:53,760
this was in 2008 Wow md5 considered

402
00:15:53,760 --> 00:15:56,070
harmful which was one of the first

403
00:15:56,070 --> 00:15:59,010
considered harmful the in this case they

404
00:15:59,010 --> 00:16:01,590
use a bunch of I believe his ps3 s to

405
00:16:01,590 --> 00:16:05,340
generate a hash collision in a against a

406
00:16:05,340 --> 00:16:06,960
certificate authority that was still

407
00:16:06,960 --> 00:16:09,780
issuing certificates with md5 so they

408
00:16:09,780 --> 00:16:12,450
were actually able to generate a custom

409
00:16:12,450 --> 00:16:14,730
certificate that have the same hash are

410
00:16:14,730 --> 00:16:17,490
you know the same digital signature as a

411
00:16:17,490 --> 00:16:19,470
legitimate one and they you know

412
00:16:19,470 --> 00:16:22,230
therefore got themselves a CA out of it

413
00:16:22,230 --> 00:16:25,050
so that this was this was the the death

414
00:16:25,050 --> 00:16:28,110
knell for md5 in the ca it's a system

415
00:16:28,110 --> 00:16:30,420
they had people basically told them hey

416
00:16:30,420 --> 00:16:31,710
you need to get rid of this stop doing

417
00:16:31,710 --> 00:16:34,170
this but they kind of waited until this

418
00:16:34,170 --> 00:16:35,580
happened before they're like oh yeah we

419
00:16:35,580 --> 00:16:39,960
really need to get rid of us this was

420
00:16:39,960 --> 00:16:42,810
the headline out of after flame so flame

421
00:16:42,810 --> 00:16:44,880
was one of those industrial systems

422
00:16:44,880 --> 00:16:47,310
malware that came out I think it was an

423
00:16:47,310 --> 00:16:50,130
Iranian centrifuge that I was discovered

424
00:16:50,130 --> 00:16:53,670
on and this the the kind of outcome of

425
00:16:53,670 --> 00:16:55,170
this was they discovered that there were

426
00:16:55,170 --> 00:16:57,210
previously unknown attacks against md5

427
00:16:57,210 --> 00:16:59,730
used in flame to get it by windows

428
00:16:59,730 --> 00:17:01,680
updates to like make it appear as if it

429
00:17:01,680 --> 00:17:05,099
was legitimate software and this kind of

430
00:17:05,099 --> 00:17:06,869
goes to show you it's like oh there must

431
00:17:06,869 --> 00:17:08,609
be some world-class intelligence agency

432
00:17:08,609 --> 00:17:09,780
that was involved in this because

433
00:17:09,780 --> 00:17:11,640
academia had no idea this attack was

434
00:17:11,640 --> 00:17:15,300
possible and this is a very recent one

435
00:17:15,300 --> 00:17:16,740
there are free start collisions in full

436
00:17:16,740 --> 00:17:19,800
sha-1 this is kind of helped shuffle the

437
00:17:19,800 --> 00:17:21,689
ca system away from shell 1 and

438
00:17:21,689 --> 00:17:23,430
certificates you know we've moved past

439
00:17:23,430 --> 00:17:26,010
md5 on the shell 1 hat and now we're

440
00:17:26,010 --> 00:17:29,610
moving past shot one on two shot 256 but

441
00:17:29,610 --> 00:17:31,440
the ca industry is still very slow on

442
00:17:31,440 --> 00:17:34,110
this for a lot of reasons but this paper

443
00:17:34,110 --> 00:17:35,070
is kind of helping move that

444
00:17:35,070 --> 00:17:38,910
conversation forward this one's just a

445
00:17:38,910 --> 00:17:41,010
fun one I like to talk about this is the

446
00:17:41,010 --> 00:17:42,960
logo for you a cyber command they

447
00:17:42,960 --> 00:17:44,850
apparently really like hash functions if

448
00:17:44,850 --> 00:17:46,230
you're close enough you can see on the

449
00:17:46,230 --> 00:17:48,750
inner ring there is some letters

450
00:17:48,750 --> 00:17:52,050
numbers I'll blow it up for you this and

451
00:17:52,050 --> 00:17:54,720
so it's like what what is this turns out

452
00:17:54,720 --> 00:17:57,990
this is a hash digest this is a mp5 some

453
00:17:57,990 --> 00:18:01,620
of their mission statement I don't know

454
00:18:01,620 --> 00:18:03,750
why this was many years after they

455
00:18:03,750 --> 00:18:06,590
probably should be using md5 but yeah so

456
00:18:06,590 --> 00:18:11,610
crypto as a design aesthetic to the next

457
00:18:11,610 --> 00:18:12,930
thing misunderstanding what a checksum

458
00:18:12,930 --> 00:18:16,440
is so this is a directory that you could

459
00:18:16,440 --> 00:18:17,760
have pulled off like an ftp server

460
00:18:17,760 --> 00:18:19,950
whatever and this is all fine and good

461
00:18:19,950 --> 00:18:21,960
but what the misunderstanding is

462
00:18:21,960 --> 00:18:23,550
sometimes is here is that folks will

463
00:18:23,550 --> 00:18:25,830
download the sha-1 sums or shot through

464
00:18:25,830 --> 00:18:28,020
26 x file and they'll compare it against

465
00:18:28,020 --> 00:18:30,000
the downloaded file in the go ah this

466
00:18:30,000 --> 00:18:32,070
file you know hasn't contained any

467
00:18:32,070 --> 00:18:34,260
modifications what it really is showing

468
00:18:34,260 --> 00:18:36,120
is that you dink it didn't get corrupted

469
00:18:36,120 --> 00:18:38,550
during the download is any attacker who

470
00:18:38,550 --> 00:18:40,830
could replace one of these files it just

471
00:18:40,830 --> 00:18:42,660
as easily replace the checksums file

472
00:18:42,660 --> 00:18:44,820
because there's no additional like qpg

473
00:18:44,820 --> 00:18:47,490
signature on or something so that that's

474
00:18:47,490 --> 00:18:49,200
just something occasionally I'll see

475
00:18:49,200 --> 00:18:51,180
folks kind of still make that leap a

476
00:18:51,180 --> 00:18:55,260
mistaken way then the last one let's

477
00:18:55,260 --> 00:18:56,580
talk about here is length extension

478
00:18:56,580 --> 00:18:59,460
attacks but before we can do that I have

479
00:18:59,460 --> 00:19:00,900
to talk about what they're what they're

480
00:19:00,900 --> 00:19:02,520
actually going for here which is

481
00:19:02,520 --> 00:19:03,420
something called a message

482
00:19:03,420 --> 00:19:06,150
authentication code so a message

483
00:19:06,150 --> 00:19:08,250
authentication code is kind of a class

484
00:19:08,250 --> 00:19:10,830
of functions in cryptography that takes

485
00:19:10,830 --> 00:19:13,860
a key or a shared secret in a value and

486
00:19:13,860 --> 00:19:16,140
returns something we call a tag or an

487
00:19:16,140 --> 00:19:17,910
authenticator that represents the

488
00:19:17,910 --> 00:19:21,000
integrity and ideally what this shows is

489
00:19:21,000 --> 00:19:24,320
that if I send a message across the wire

490
00:19:24,320 --> 00:19:26,640
anyone in the middle who doesn't have

491
00:19:26,640 --> 00:19:29,250
this key and they modify the message

492
00:19:29,250 --> 00:19:31,800
this the outcome of this tag will will

493
00:19:31,800 --> 00:19:33,660
kind of show if they've modified it

494
00:19:33,660 --> 00:19:34,980
because the tag will be different and

495
00:19:34,980 --> 00:19:37,050
only two people who shared the key can

496
00:19:37,050 --> 00:19:38,790
kind of validate the tag appropriately

497
00:19:38,790 --> 00:19:43,410
and create new ones so this is great and

498
00:19:43,410 --> 00:19:45,630
a naive approach would be to create it

499
00:19:45,630 --> 00:19:48,720
just like this so we'll take the key and

500
00:19:48,720 --> 00:19:50,520
will concatenate it with the value and

501
00:19:50,520 --> 00:19:53,550
we'll run it through sha-256 so the the

502
00:19:53,550 --> 00:19:56,790
problem here is that sha256 like almost

503
00:19:56,790 --> 00:19:59,220
all the hash functions we use besides

504
00:19:59,220 --> 00:20:01,330
some of the newer ones have a

505
00:20:01,330 --> 00:20:02,950
construction where they're vulnerable to

506
00:20:02,950 --> 00:20:04,390
something called length extension attack

507
00:20:04,390 --> 00:20:06,460
this is just having the basis of how

508
00:20:06,460 --> 00:20:10,240
they're designed so here's the example

509
00:20:10,240 --> 00:20:13,240
in code I take my secret in my value and

510
00:20:13,240 --> 00:20:15,700
I concatenate it and that's my signature

511
00:20:15,700 --> 00:20:17,980
and what this allows an attacker to do

512
00:20:17,980 --> 00:20:19,780
is without knowing the secret and

513
00:20:19,780 --> 00:20:22,180
without knowing beauty all right without

514
00:20:22,180 --> 00:20:23,650
really even knowing the initial value

515
00:20:23,650 --> 00:20:26,590
they can put arbitrary additional data

516
00:20:26,590 --> 00:20:28,660
at the end if they can get you to kind

517
00:20:28,660 --> 00:20:30,760
of do the thing so this you know here

518
00:20:30,760 --> 00:20:32,560
it's like by ten units at one dollar and

519
00:20:32,560 --> 00:20:34,690
as like actually make that zero you can

520
00:20:34,690 --> 00:20:36,700
like change the semantic meaning of the

521
00:20:36,700 --> 00:20:39,310
value you're trying to hash and this is

522
00:20:39,310 --> 00:20:42,400
once again without knowing the secret so

523
00:20:42,400 --> 00:20:43,450
it should have been done here is they

524
00:20:43,450 --> 00:20:44,860
should have used a function like each

525
00:20:44,860 --> 00:20:48,310
Mac or another secure Mac function and

526
00:20:48,310 --> 00:20:49,660
that actually prevents this type of

527
00:20:49,660 --> 00:20:52,090
attack there are newer hash functions

528
00:20:52,090 --> 00:20:54,040
like the Shah 3 competition that

529
00:20:54,040 --> 00:20:56,170
explicitly in their design criteria said

530
00:20:56,170 --> 00:20:57,700
that you had to defend against this that

531
00:20:57,700 --> 00:20:58,930
you couldn't allow this type of attack

532
00:20:58,930 --> 00:21:01,810
into your hash function just because

533
00:21:01,810 --> 00:21:03,640
they know that down the road someone's

534
00:21:03,640 --> 00:21:05,230
going to once again forget this and try

535
00:21:05,230 --> 00:21:08,290
to design a system like that so this

536
00:21:08,290 --> 00:21:10,330
isn't like a you know like oh that's

537
00:21:10,330 --> 00:21:12,640
cool this is a practical attack I was

538
00:21:12,640 --> 00:21:15,670
used on flickers API a couple years ago

539
00:21:15,670 --> 00:21:18,850
and today remedi this this is from this

540
00:21:18,850 --> 00:21:21,520
year though visa released a new payments

541
00:21:21,520 --> 00:21:23,800
API and in it they they were doing the

542
00:21:23,800 --> 00:21:25,720
exact same thing he concatenated with

543
00:21:25,720 --> 00:21:29,380
data and so the in their documentation

544
00:21:29,380 --> 00:21:31,020
that I just released service

545
00:21:31,020 --> 00:21:33,550
unfortunately they have now since fixed

546
00:21:33,550 --> 00:21:35,110
this but that kind of goes to show you

547
00:21:35,110 --> 00:21:37,630
that like we are doomed to repeat a lot

548
00:21:37,630 --> 00:21:38,770
of these same mistakes if we're not

549
00:21:38,770 --> 00:21:44,050
vigilant about them so you shot 256 if

550
00:21:44,050 --> 00:21:46,690
you need a hash function or checksum use

551
00:21:46,690 --> 00:21:48,580
H Mac version of that if you want if you

552
00:21:48,580 --> 00:21:50,310
want an H mat or a Mac or a signature

553
00:21:50,310 --> 00:21:54,040
stop using md5 it's very difficult but

554
00:21:54,040 --> 00:21:54,970
you should really start to move away

555
00:21:54,970 --> 00:21:57,610
from it and don't use shall one in new

556
00:21:57,610 --> 00:22:00,850
projects ah but that's not a like hey we

557
00:22:00,850 --> 00:22:01,990
need to run out and change shell one

558
00:22:01,990 --> 00:22:04,120
today unless your your projects using it

559
00:22:04,120 --> 00:22:06,400
for collision resistance then you should

560
00:22:06,400 --> 00:22:07,570
probably move a little bit faster

561
00:22:07,570 --> 00:22:09,430
because these things take a really long

562
00:22:09,430 --> 00:22:13,330
time to migrate away from all right so

563
00:22:13,330 --> 00:22:14,680
no Krypto pitfalls hall

564
00:22:14,680 --> 00:22:16,360
is complete without talking about

565
00:22:16,360 --> 00:22:19,210
password storage briefly I want to talk

566
00:22:19,210 --> 00:22:21,550
about hey we've had a lot of breaches so

567
00:22:21,550 --> 00:22:23,470
this was the original linkedin but it

568
00:22:23,470 --> 00:22:25,960
turned out it wasn't 8 million is 117

569
00:22:25,960 --> 00:22:30,400
billion and then last.fm yahoo dropbox

570
00:22:30,400 --> 00:22:36,670
ebay slack and myspace so and there

571
00:22:36,670 --> 00:22:38,110
there are unconfirmed reports about

572
00:22:38,110 --> 00:22:39,730
twitter as well but i want to put those

573
00:22:39,730 --> 00:22:42,220
in here since they weren't confirmed so

574
00:22:42,220 --> 00:22:44,500
we as an industry we know that these

575
00:22:44,500 --> 00:22:47,250
password databases are getting out and

576
00:22:47,250 --> 00:22:50,170
fortunately most of them don't do this

577
00:22:50,170 --> 00:22:53,200
some of them did do this so a naive way

578
00:22:53,200 --> 00:22:56,050
to store password is or I guess the most

579
00:22:56,050 --> 00:22:57,520
naive way is to just store the password

580
00:22:57,520 --> 00:23:00,580
which some systems still do and you know

581
00:23:00,580 --> 00:23:03,070
just the plain password but theyíve

582
00:23:03,070 --> 00:23:05,260
approaches to do the shot one of the

583
00:23:05,260 --> 00:23:09,040
password this does have a positive it's

584
00:23:09,040 --> 00:23:10,540
a one-way value it can be used for

585
00:23:10,540 --> 00:23:14,110
verification but you know that's really

586
00:23:14,110 --> 00:23:17,530
it's only benefit so then you know the

587
00:23:17,530 --> 00:23:19,930
the architect will say ah we should salt

588
00:23:19,930 --> 00:23:22,510
our passwords and so they'll do a salt

589
00:23:22,510 --> 00:23:25,180
of the you know sha-1 salt plus password

590
00:23:25,180 --> 00:23:26,860
and so now we're catching up to like

591
00:23:26,860 --> 00:23:29,650
where unix was and like the late 70s

592
00:23:29,650 --> 00:23:34,120
early 80s with this system and so this

593
00:23:34,120 --> 00:23:35,410
this also has another benefit is

594
00:23:35,410 --> 00:23:37,330
randomized it can largely defeat these

595
00:23:37,330 --> 00:23:39,760
pre computed tables the rainbow tables

596
00:23:39,760 --> 00:23:42,220
and it forces attackers to focus on one

597
00:23:42,220 --> 00:23:44,980
password the problem is these hash

598
00:23:44,980 --> 00:23:46,630
functions are incredibly fast because

599
00:23:46,630 --> 00:23:47,920
that's their design they're meant to be

600
00:23:47,920 --> 00:23:49,840
fast because you want your TLS

601
00:23:49,840 --> 00:23:52,810
connection to be fast so what we

602
00:23:52,810 --> 00:23:53,950
actually want one is they can be

603
00:23:53,950 --> 00:23:56,830
adaptively slowed down and so those are

604
00:23:56,830 --> 00:23:58,690
called adaptive hashing functions there

605
00:23:58,690 --> 00:24:00,790
are a bunch of them out there I honestly

606
00:24:00,790 --> 00:24:02,500
don't care which one you use as long as

607
00:24:02,500 --> 00:24:03,640
you're using one of them and you

608
00:24:03,640 --> 00:24:06,640
correctly to knit it's as slow as it

609
00:24:06,640 --> 00:24:10,300
needs to be so bcrypt s crypt argon to

610
00:24:10,300 --> 00:24:13,330
PB kdf argon tues like the new hotness

611
00:24:13,330 --> 00:24:15,220
on the street because it won the

612
00:24:15,220 --> 00:24:18,700
password hashing competition so my

613
00:24:18,700 --> 00:24:19,810
recommendations delegate your

614
00:24:19,810 --> 00:24:22,450
authentication if possible facebook

615
00:24:22,450 --> 00:24:24,250
twitter google github they'll allow you

616
00:24:24,250 --> 00:24:27,120
to delegate off indication to them and

617
00:24:27,120 --> 00:24:29,490
if if I if I want to comment on your

618
00:24:29,490 --> 00:24:30,990
blog I don't think I need to give you a

619
00:24:30,990 --> 00:24:32,460
username and password to comment on the

620
00:24:32,460 --> 00:24:33,900
blog you should delegate your

621
00:24:33,900 --> 00:24:35,490
authentication there's no reason for you

622
00:24:35,490 --> 00:24:39,510
to have passwords and then otherwise if

623
00:24:39,510 --> 00:24:40,980
you have a system where delegation

624
00:24:40,980 --> 00:24:43,020
doesn't really make sense store one way

625
00:24:43,020 --> 00:24:46,309
verifiers using one of those algorithms

626
00:24:46,309 --> 00:24:48,450
so I know some of you out there are

627
00:24:48,450 --> 00:24:51,150
thinking well I know we have a system

628
00:24:51,150 --> 00:24:54,990
that uses sha-1 with assault what are we

629
00:24:54,990 --> 00:24:58,500
going to do you know and uh you know

630
00:24:58,500 --> 00:25:00,809
it's just inevitable like we wrote code

631
00:25:00,809 --> 00:25:03,870
before 2010 like those that code stores

632
00:25:03,870 --> 00:25:06,030
in production there are still systems

633
00:25:06,030 --> 00:25:09,420
out there like that so it's okay you can

634
00:25:09,420 --> 00:25:13,679
fix it I promise so my recommended way

635
00:25:13,679 --> 00:25:18,300
to fix it I'll present it generally what

636
00:25:18,300 --> 00:25:19,830
people do here is you know so say you

637
00:25:19,830 --> 00:25:21,870
have a password hash function that's

638
00:25:21,870 --> 00:25:23,790
just the salt I concatenated or the

639
00:25:23,790 --> 00:25:28,950
password like sha-1 so the then naive

640
00:25:28,950 --> 00:25:30,840
and kind of common approaches wait for

641
00:25:30,840 --> 00:25:32,790
the user to log in and then we'll like

642
00:25:32,790 --> 00:25:34,559
silently update their hash on the patent

643
00:25:34,559 --> 00:25:36,330
the background for them and that's great

644
00:25:36,330 --> 00:25:37,650
but have you ever looked at the

645
00:25:37,650 --> 00:25:39,540
statistics about how many years is

646
00:25:39,540 --> 00:25:41,550
actually log in and when was last time

647
00:25:41,550 --> 00:25:43,530
they logged in and what you'll find is

648
00:25:43,530 --> 00:25:46,350
there's an incredibly long tail in most

649
00:25:46,350 --> 00:25:47,970
systems i've seen is I would be

650
00:25:47,970 --> 00:25:49,260
surprised that more than fifty percent

651
00:25:49,260 --> 00:25:52,160
have logged in in the last month or so

652
00:25:52,160 --> 00:25:56,250
so don't wait my recommendation is if

653
00:25:56,250 --> 00:25:59,250
you have a reasonable system that wasn't

654
00:25:59,250 --> 00:26:01,470
as incredibly bad as something like des

655
00:26:01,470 --> 00:26:03,750
crypt which if you don't remember des

656
00:26:03,750 --> 00:26:05,100
script cuts passwords off at eight

657
00:26:05,100 --> 00:26:07,740
characters so just wrap bcrypt around

658
00:26:07,740 --> 00:26:09,450
the existing system and then your system

659
00:26:09,450 --> 00:26:11,730
becomes bcrypt of sha-1 and upgrade all

660
00:26:11,730 --> 00:26:15,840
your passwords in place done because

661
00:26:15,840 --> 00:26:17,580
users who don't log into your system

662
00:26:17,580 --> 00:26:20,670
deserve password security as well ah so

663
00:26:20,670 --> 00:26:24,059
password hash column is now bcrypt sha-1

664
00:26:24,059 --> 00:26:27,090
of salta password and islam you know

665
00:26:27,090 --> 00:26:29,130
this is generally reasonably fine if you

666
00:26:29,130 --> 00:26:30,780
want to migrate them to just be crypt as

667
00:26:30,780 --> 00:26:32,910
they long and that's fine at least your

668
00:26:32,910 --> 00:26:34,860
users who don't login will be in a

669
00:26:34,860 --> 00:26:38,160
better position next let's talk about

670
00:26:38,160 --> 00:26:41,070
some safer pitfalls

671
00:26:41,070 --> 00:26:43,380
once again old week algorithms kind of

672
00:26:43,380 --> 00:26:46,830
rears its ugly head so this is a paper

673
00:26:46,830 --> 00:26:49,769
from a while ago this I think this

674
00:26:49,769 --> 00:26:51,509
research was sponsored by the eff back

675
00:26:51,509 --> 00:26:53,820
in the early are like the late mid to

676
00:26:53,820 --> 00:26:55,679
late 90s breaking ciphers with

677
00:26:55,679 --> 00:26:58,679
Copacabana this was one of the first

678
00:26:58,679 --> 00:27:01,380
like hey can we use FPGAs and like

679
00:27:01,380 --> 00:27:03,539
custom built hardware to brake systems

680
00:27:03,539 --> 00:27:05,669
so this Brooke does the you know

681
00:27:05,669 --> 00:27:08,429
original does not Triple DES and the

682
00:27:08,429 --> 00:27:09,809
numbers in this are fascinating because

683
00:27:09,809 --> 00:27:11,549
you could do it for far cheaper today on

684
00:27:11,549 --> 00:27:15,659
amazon next one so we've known for a

685
00:27:15,659 --> 00:27:17,700
very long time the rc4 was not a great

686
00:27:17,700 --> 00:27:19,799
cipher their weaknesses in the key

687
00:27:19,799 --> 00:27:21,330
scheduling there are biases in the

688
00:27:21,330 --> 00:27:24,269
output and yet we still it's still like

689
00:27:24,269 --> 00:27:26,730
a very well you know have very widely

690
00:27:26,730 --> 00:27:29,549
used safer on the internet so then

691
00:27:29,549 --> 00:27:31,110
there's there's a vulnerability in a

692
00:27:31,110 --> 00:27:33,409
movement called rc4 no more I need

693
00:27:33,409 --> 00:27:36,539
systems to move away from our c4 because

694
00:27:36,539 --> 00:27:40,730
it still is available and tell us today

695
00:27:40,730 --> 00:27:43,950
so if you have a block cipher using ECB

696
00:27:43,950 --> 00:27:46,980
or electronic code book mode you kind of

697
00:27:46,980 --> 00:27:48,509
talk about this one will do need to do a

698
00:27:48,509 --> 00:27:51,000
refresher on what is AES and what our

699
00:27:51,000 --> 00:27:53,850
block ciphers so a block ciphers are a

700
00:27:53,850 --> 00:27:56,519
pair of functions they take a key and

701
00:27:56,519 --> 00:27:58,289
then they take either the plain text in

702
00:27:58,289 --> 00:27:59,970
the cipher text and they give you either

703
00:27:59,970 --> 00:28:01,559
the plain text of the cipher text is the

704
00:28:01,559 --> 00:28:06,240
output with me so far I hope but the

705
00:28:06,240 --> 00:28:08,070
plain text or the input and the output

706
00:28:08,070 --> 00:28:10,889
are 128 bit values I don't know about

707
00:28:10,889 --> 00:28:13,200
you but most of my most of my data is

708
00:28:13,200 --> 00:28:16,379
more than 16 bytes so what do I do the

709
00:28:16,379 --> 00:28:17,909
what people generally will come up with

710
00:28:17,909 --> 00:28:20,279
this will just loop over it 16 bytes at

711
00:28:20,279 --> 00:28:24,509
a time and will encrypt it that way so

712
00:28:24,509 --> 00:28:26,850
this is a formalized mode is known as

713
00:28:26,850 --> 00:28:30,629
electronic code book and it's as many

714
00:28:30,629 --> 00:28:32,399
problems but one of the main problems

715
00:28:32,399 --> 00:28:35,100
that is basically easy to talk about an

716
00:28:35,100 --> 00:28:37,860
easy to show is it allows patterns to

717
00:28:37,860 --> 00:28:41,399
show through your output and so if your

718
00:28:41,399 --> 00:28:43,320
input has any kind of structure you'll

719
00:28:43,320 --> 00:28:44,730
see that structure come through in the

720
00:28:44,730 --> 00:28:47,940
output so this is the braintree logo and

721
00:28:47,940 --> 00:28:50,309
this is the braintree logo encrypted in

722
00:28:50,309 --> 00:28:54,390
ECB mode with aes and some random key

723
00:28:54,390 --> 00:28:57,330
so you may have seen this with the linen

724
00:28:57,330 --> 00:28:59,310
tux the linux penguin that's the same

725
00:28:59,310 --> 00:29:01,860
idea what we actually want is the thing

726
00:29:01,860 --> 00:29:03,930
at the bottom we want you know it can be

727
00:29:03,930 --> 00:29:06,200
looked completely different than noise

728
00:29:06,200 --> 00:29:08,850
and only with the crack key can you kind

729
00:29:08,850 --> 00:29:11,760
of see what the true meaning was like I

730
00:29:11,760 --> 00:29:13,200
said there are many many other issues

731
00:29:13,200 --> 00:29:15,480
with ECB mode but this is the one where

732
00:29:15,480 --> 00:29:17,280
it's like people can kind of when you

733
00:29:17,280 --> 00:29:19,560
visualize and can see it a lot of folks

734
00:29:19,560 --> 00:29:23,190
will get it not using authenticated

735
00:29:23,190 --> 00:29:27,330
encryption so this one so we've known

736
00:29:27,330 --> 00:29:28,980
for a very long time since you're a

737
00:29:28,980 --> 00:29:31,170
2002 botany pointed out things hold

738
00:29:31,170 --> 00:29:33,960
padding Oracle attacks this paperwork

739
00:29:33,960 --> 00:29:35,970
came out in 2010 these were the folks

740
00:29:35,970 --> 00:29:39,660
who did the beast attack on TLS where

741
00:29:39,660 --> 00:29:41,550
they actually made this practical and

742
00:29:41,550 --> 00:29:44,280
then later on folks redid it with a

743
00:29:44,280 --> 00:29:46,730
different part and they made poodle so

744
00:29:46,730 --> 00:29:48,660
practical attacks that have come out of

745
00:29:48,660 --> 00:29:52,350
this this paper another one lucky 13

746
00:29:52,350 --> 00:29:54,240
which was another attack against TLS

747
00:29:54,240 --> 00:29:57,270
this is where tiny code wasn't constant

748
00:29:57,270 --> 00:30:00,660
time so it leaked information and then

749
00:30:00,660 --> 00:30:03,330
lastly this one's very recent apple had

750
00:30:03,330 --> 00:30:05,340
an issue in I messages where they

751
00:30:05,340 --> 00:30:06,840
weren't using authenticated encryption

752
00:30:06,840 --> 00:30:09,720
and we kind of know these days now that

753
00:30:09,720 --> 00:30:11,160
remember the beginning we talked about

754
00:30:11,160 --> 00:30:13,770
confidentiality and integrity we know

755
00:30:13,770 --> 00:30:16,200
that if you don't provide integrity you

756
00:30:16,200 --> 00:30:18,060
can't guarantee confidentiality so

757
00:30:18,060 --> 00:30:20,070
assistant has to have both that's what

758
00:30:20,070 --> 00:30:24,570
we mean by authenticated encryption so

759
00:30:24,570 --> 00:30:26,250
this was the paper that came out of it

760
00:30:26,250 --> 00:30:28,740
out of John Hopkins dancing on the lip

761
00:30:28,740 --> 00:30:30,840
of the volcano chosen cipher tax against

762
00:30:30,840 --> 00:30:34,470
Apple I message and you know largely I

763
00:30:34,470 --> 00:30:37,020
don't blame the developers you know like

764
00:30:37,020 --> 00:30:38,190
we've kind of security professionals

765
00:30:38,190 --> 00:30:40,410
we've given them this world of hurt that

766
00:30:40,410 --> 00:30:42,180
they live in like this is the

767
00:30:42,180 --> 00:30:44,880
documentation for pike ripped the PI

768
00:30:44,880 --> 00:30:46,350
crypto light are the pedophile crypto

769
00:30:46,350 --> 00:30:47,940
library and like look at all these

770
00:30:47,940 --> 00:30:50,160
options we've given them look like all

771
00:30:50,160 --> 00:30:51,420
these things they have to choose and

772
00:30:51,420 --> 00:30:54,360
then you can't see it but uh in this

773
00:30:54,360 --> 00:30:57,120
example at the top they're using cfd

774
00:30:57,120 --> 00:31:00,120
mode which nobody uses like why is the

775
00:31:00,120 --> 00:31:02,220
example in the documentation using an

776
00:31:02,220 --> 00:31:03,690
encryption mode that a is an

777
00:31:03,690 --> 00:31:05,840
authenticated encryption and be

778
00:31:05,840 --> 00:31:08,299
join uses in practical systems if we're

779
00:31:08,299 --> 00:31:09,679
kind of really just setting folks up for

780
00:31:09,679 --> 00:31:14,059
failure so my recommendations prefer the

781
00:31:14,059 --> 00:31:16,490
box secret box constructions from sodium

782
00:31:16,490 --> 00:31:19,940
and salts stop using des like really if

783
00:31:19,940 --> 00:31:22,070
you have a system that uses des you

784
00:31:22,070 --> 00:31:23,870
really should out as soon as my tox done

785
00:31:23,870 --> 00:31:25,850
wait as soon as I toxin you should

786
00:31:25,850 --> 00:31:27,140
probably go to your office and be like

787
00:31:27,140 --> 00:31:28,700
what's our plan for migrating away from

788
00:31:28,700 --> 00:31:31,700
this very soon like this week stop

789
00:31:31,700 --> 00:31:33,919
building your own on top of AES if you

790
00:31:33,919 --> 00:31:36,080
can stop encrypting without protecting

791
00:31:36,080 --> 00:31:39,230
the integrity so here's my site for

792
00:31:39,230 --> 00:31:43,010
anybody who's in a regulated industry so

793
00:31:43,010 --> 00:31:45,500
what if you have to use AES what if your

794
00:31:45,500 --> 00:31:47,990
auditor comes to you and says hey you

795
00:31:47,990 --> 00:31:49,520
didn't say a es when you're talking

796
00:31:49,520 --> 00:31:51,340
about your in your encryption scheme

797
00:31:51,340 --> 00:31:53,720
what's this thing you're talking about

798
00:31:53,720 --> 00:31:56,870
you didn't say the words AES don't use

799
00:31:56,870 --> 00:31:58,940
ECB mode be sure you're using

800
00:31:58,940 --> 00:32:01,250
authenticated encryption so GCM is kind

801
00:32:01,250 --> 00:32:03,649
of a go-to or authenticated encryption

802
00:32:03,649 --> 00:32:05,419
with AES well there are other

803
00:32:05,419 --> 00:32:08,480
alternatives though verify the tag or

804
00:32:08,480 --> 00:32:10,220
the Mac before you decrypt something

805
00:32:10,220 --> 00:32:12,380
with GCM a lot of good libraries will do

806
00:32:12,380 --> 00:32:16,070
this for you and then it's still easy to

807
00:32:16,070 --> 00:32:19,418
mess up in a critical way unfortunately

808
00:32:20,260 --> 00:32:23,799
talk about some TLS or SSL so hopefully

809
00:32:23,799 --> 00:32:26,809
most people will have known that we used

810
00:32:26,809 --> 00:32:28,429
to call it s SL band it's been

811
00:32:28,429 --> 00:32:30,320
superseded by something called TLS and

812
00:32:30,320 --> 00:32:33,740
the ssl itself is no longer in practical

813
00:32:33,740 --> 00:32:36,320
use at least since poodle while systems

814
00:32:36,320 --> 00:32:37,880
may still have it enabled that you

815
00:32:37,880 --> 00:32:40,490
shouldn't everything should be using TLS

816
00:32:40,490 --> 00:32:44,990
now so the first thing not verifying the

817
00:32:44,990 --> 00:32:46,970
certificate chain are the host name so

818
00:32:46,970 --> 00:32:49,190
this is a pretty big one there's a paper

819
00:32:49,190 --> 00:32:50,600
a few years ago called the most

820
00:32:50,600 --> 00:32:52,610
dangerous code in the world validating

821
00:32:52,610 --> 00:32:54,320
ssl certificates and non browser

822
00:32:54,320 --> 00:32:56,570
software and what these researchers did

823
00:32:56,570 --> 00:32:58,549
is they kind of did the survey of all

824
00:32:58,549 --> 00:32:59,990
these mobile apps and things like that

825
00:32:59,990 --> 00:33:04,100
to say hey were they doing TLS and SSL

826
00:33:04,100 --> 00:33:06,590
verification correctly and boy did they

827
00:33:06,590 --> 00:33:09,230
find out no so outside of browsers most

828
00:33:09,230 --> 00:33:12,289
systems work during a very good job and

829
00:33:12,289 --> 00:33:14,780
so what is involved in verifying that so

830
00:33:14,780 --> 00:33:16,280
the if you're not familiar with the

831
00:33:16,280 --> 00:33:17,990
certificate chain it's kind of this

832
00:33:17,990 --> 00:33:19,370
thing at the bot

833
00:33:19,370 --> 00:33:20,930
the top that I've highlighted here and

834
00:33:20,930 --> 00:33:23,600
that's where it you know it says hey I

835
00:33:23,600 --> 00:33:25,309
have this certificate for dub dub dub

836
00:33:25,309 --> 00:33:27,290
Braintree payments it's trusted by this

837
00:33:27,290 --> 00:33:28,970
other certificate which is trusted by

838
00:33:28,970 --> 00:33:30,740
this of the certificate that we have

839
00:33:30,740 --> 00:33:32,090
installed in our operating system

840
00:33:32,090 --> 00:33:35,390
already the other problem is the

841
00:33:35,390 --> 00:33:39,230
hostname verification is a it's not

842
00:33:39,230 --> 00:33:41,930
built in to openssl so a lot of lot of

843
00:33:41,930 --> 00:33:43,340
applications aren't doing it because

844
00:33:43,340 --> 00:33:44,990
they thought openness the seller just

845
00:33:44,990 --> 00:33:47,480
doing it for them and that's checking

846
00:33:47,480 --> 00:33:48,950
that you got their certificate for who

847
00:33:48,950 --> 00:33:50,960
you intended for so the first ones

848
00:33:50,960 --> 00:33:53,540
checking that the math is correct so the

849
00:33:53,540 --> 00:33:55,220
certificate chain math is correct the

850
00:33:55,220 --> 00:33:56,690
second one is just checking that the

851
00:33:56,690 --> 00:33:59,059
string of the domain name is the one you

852
00:33:59,059 --> 00:34:00,830
intended to connect to if you don't do

853
00:34:00,830 --> 00:34:03,020
the second one I could just go get a

854
00:34:03,020 --> 00:34:04,340
free certificate from let's encrypt

855
00:34:04,340 --> 00:34:06,020
present it to you and you're going to

856
00:34:06,020 --> 00:34:07,340
think that it's valid because you're not

857
00:34:07,340 --> 00:34:10,340
checking that the subject of it is who

858
00:34:10,340 --> 00:34:12,010
you're actually intending to connect to

859
00:34:12,010 --> 00:34:14,600
so what does that look like it looks

860
00:34:14,600 --> 00:34:16,909
like passing dash K to curl which I

861
00:34:16,909 --> 00:34:18,679
honestly have seen in a vendor

862
00:34:18,679 --> 00:34:20,719
documentation they like just passed a sh

863
00:34:20,719 --> 00:34:25,340
k it means like secure or this is some

864
00:34:25,340 --> 00:34:28,820
PHP code because I'm picking on them so

865
00:34:28,820 --> 00:34:31,699
if you use curl verify here is like hey

866
00:34:31,699 --> 00:34:34,159
I want to know who I'm talking to and

867
00:34:34,159 --> 00:34:35,719
then verify host is like I want to make

868
00:34:35,719 --> 00:34:37,760
sure that they say who they I they are

869
00:34:37,760 --> 00:34:39,199
who they say they are you have to have

870
00:34:39,199 --> 00:34:41,659
both in some instances one or more set

871
00:34:41,659 --> 00:34:43,190
to zero so it's not actually doing the

872
00:34:43,190 --> 00:34:46,940
verification this configured server

873
00:34:46,940 --> 00:34:50,899
settings so this is the report from ssl

874
00:34:50,899 --> 00:34:53,480
labs the identity of the domain has been

875
00:34:53,480 --> 00:34:55,340
blocked out because i didn't want to

876
00:34:55,340 --> 00:34:56,929
embarrass him too bad but he has to say

877
00:34:56,929 --> 00:34:58,940
this was a government oriented website

878
00:34:58,940 --> 00:35:02,300
in the EU and they got an F and there's

879
00:35:02,300 --> 00:35:03,920
a litany of issues with it like using

880
00:35:03,920 --> 00:35:05,660
week diffie-hellman untrusted

881
00:35:05,660 --> 00:35:09,260
certificate like a bunch of stuff ah if

882
00:35:09,260 --> 00:35:12,140
you haven't already used ssl labs to run

883
00:35:12,140 --> 00:35:14,180
it against your servers it's an

884
00:35:14,180 --> 00:35:16,760
incredible tool it will give you a very

885
00:35:16,760 --> 00:35:18,530
very good overview of like what you're

886
00:35:18,530 --> 00:35:19,790
doing well what you're not doing well

887
00:35:19,790 --> 00:35:21,590
and then linked to how you can improve

888
00:35:21,590 --> 00:35:24,860
it if you're totally lost for where to

889
00:35:24,860 --> 00:35:27,350
start Mozilla has released a tool on

890
00:35:27,350 --> 00:35:29,290
github called the TLS server settings

891
00:35:29,290 --> 00:35:31,550
where you basically like I'm using

892
00:35:31,550 --> 00:35:34,580
next I'm using openssl here in it just

893
00:35:34,580 --> 00:35:36,860
like spits out configuration for you to

894
00:35:36,860 --> 00:35:40,400
copy onto your server and then the last

895
00:35:40,400 --> 00:35:42,650
one using a broken library so we all

896
00:35:42,650 --> 00:35:45,470
remember heartbleed i'm sure a system

897
00:35:45,470 --> 00:35:47,000
after this talk is still going to be

898
00:35:47,000 --> 00:35:48,650
compromised because no one patch for

899
00:35:48,650 --> 00:35:51,980
heart braid go to was another one OS X

900
00:35:51,980 --> 00:35:54,830
and iOS share some crypto code and that

901
00:35:54,830 --> 00:35:56,630
cryptic code wasn't validating part of

902
00:35:56,630 --> 00:35:58,930
the TLS handshake correctly so you could

903
00:35:58,930 --> 00:36:01,370
intercept and modified traffic bound for

904
00:36:01,370 --> 00:36:05,000
those devices so ensure you're

905
00:36:05,000 --> 00:36:06,560
validating your connections like go and

906
00:36:06,560 --> 00:36:08,720
actually check and like double check

907
00:36:08,720 --> 00:36:11,570
lean on a framework and library check

908
00:36:11,570 --> 00:36:12,740
that it does the right thing though

909
00:36:12,740 --> 00:36:14,900
because sometimes they don't and no one

910
00:36:14,900 --> 00:36:17,510
told them set up automated tests to

911
00:36:17,510 --> 00:36:19,280
validate this setting so go to like bad

912
00:36:19,280 --> 00:36:22,400
SSL calm and see the examples of all the

913
00:36:22,400 --> 00:36:24,590
bad forms of SSL and TLS that they have

914
00:36:24,590 --> 00:36:28,220
in there lastly I want to talk about

915
00:36:28,220 --> 00:36:31,670
trust a quick poll how many people have

916
00:36:31,670 --> 00:36:33,140
seen this prompt before you know what

917
00:36:33,140 --> 00:36:35,780
this says all right now keep your hand

918
00:36:35,780 --> 00:36:37,550
up if you validated that that

919
00:36:37,550 --> 00:36:39,910
fingerprint before you typed in yes

920
00:36:39,910 --> 00:36:41,750
there are honest folks in the audience

921
00:36:41,750 --> 00:36:46,250
thank you so what this is is srs sh has

922
00:36:46,250 --> 00:36:49,370
a trust model called tofu trust on first

923
00:36:49,370 --> 00:36:52,130
use what this means is that ssh is kind

924
00:36:52,130 --> 00:36:56,330
of like hey we're buddies you you tell

925
00:36:56,330 --> 00:36:58,010
me if this is cool and then i will

926
00:36:58,010 --> 00:36:59,450
mathematically check that it's the same

927
00:36:59,450 --> 00:37:03,920
always after that hopefully you know i'm

928
00:37:03,920 --> 00:37:05,450
sure people have seen this hopefully you

929
00:37:05,450 --> 00:37:07,070
didn't just go blow away the entire

930
00:37:07,070 --> 00:37:08,630
known hosts file that's generally the

931
00:37:08,630 --> 00:37:10,310
stack overflow response were like what

932
00:37:10,310 --> 00:37:12,950
to do with this this is saying hey

933
00:37:12,950 --> 00:37:14,630
remember that thing as promised you I

934
00:37:14,630 --> 00:37:17,240
would do I'm doing it the this

935
00:37:17,240 --> 00:37:19,480
mathematically doesn't check out anymore

936
00:37:19,480 --> 00:37:21,320
usually this means like someone

937
00:37:21,320 --> 00:37:23,060
reinstalled the operating system or

938
00:37:23,060 --> 00:37:27,050
something so this is a video of me

939
00:37:27,050 --> 00:37:28,990
scrolling through all the mozilla

940
00:37:28,990 --> 00:37:31,070
trusted certificates that ship in

941
00:37:31,070 --> 00:37:34,010
Firefox ah you're not meant to follow it

942
00:37:34,010 --> 00:37:36,890
because there's a lot of them so what I

943
00:37:36,890 --> 00:37:38,570
ask is like do you trust all these

944
00:37:38,570 --> 00:37:40,250
organizations do you trust their hiring

945
00:37:40,250 --> 00:37:42,860
termination practices their audit

946
00:37:42,860 --> 00:37:44,820
practices all these things

947
00:37:44,820 --> 00:37:47,250
I imagine you probably don't there are

948
00:37:47,250 --> 00:37:49,410
some organizations in here like the

949
00:37:49,410 --> 00:37:51,510
hongkong post office the department of

950
00:37:51,510 --> 00:37:55,950
homeland security visa so while some of

951
00:37:55,950 --> 00:37:57,300
them are some of them are trust worthy

952
00:37:57,300 --> 00:37:59,040
organizations I'm sure and you have to

953
00:37:59,040 --> 00:38:01,080
trust somebody it's always good to like

954
00:38:01,080 --> 00:38:02,700
take a step back and think about who do

955
00:38:02,700 --> 00:38:05,190
I trust who in this organization because

956
00:38:05,190 --> 00:38:08,220
my old list this list i believe is up to

957
00:38:08,220 --> 00:38:09,720
date with the old list included

958
00:38:09,720 --> 00:38:10,920
organizations that had been breached

959
00:38:10,920 --> 00:38:14,970
like digi noida and that brings me to

960
00:38:14,970 --> 00:38:17,490
the last topic of certificate pinning so

961
00:38:17,490 --> 00:38:19,080
certificate pinning is a way for you to

962
00:38:19,080 --> 00:38:21,510
kind of narrow down the trust for your

963
00:38:21,510 --> 00:38:24,330
application and that allows you to kind

964
00:38:24,330 --> 00:38:27,090
of choose my application you know we use

965
00:38:27,090 --> 00:38:28,470
trusted routes we're going to trust

966
00:38:28,470 --> 00:38:31,290
these few or you can even go further

967
00:38:31,290 --> 00:38:32,970
it's like I'm only going to trust this

968
00:38:32,970 --> 00:38:35,460
this key that i know we generated you

969
00:38:35,460 --> 00:38:38,460
know ourselves there there are multiple

970
00:38:38,460 --> 00:38:40,740
ways to do this though emerging way for

971
00:38:40,740 --> 00:38:43,110
web browsers is this public key penning

972
00:38:43,110 --> 00:38:45,930
proposal I recommend you go investigate

973
00:38:45,930 --> 00:38:47,940
this I find out if it's appropriate for

974
00:38:47,940 --> 00:38:50,730
application the thing about what

975
00:38:50,730 --> 00:38:52,890
organizations really trust investigate

976
00:38:52,890 --> 00:38:57,020
certificate pinning all right is it over

977
00:38:57,020 --> 00:39:00,900
it is over Stephen if you want to learn

978
00:39:00,900 --> 00:39:02,880
more I highly recommend the Stanford

979
00:39:02,880 --> 00:39:06,210
crypto class on Coursera they I don't

980
00:39:06,210 --> 00:39:07,830
believe there's a currently scheduled

981
00:39:07,830 --> 00:39:09,780
session a pop up from time to time

982
00:39:09,780 --> 00:39:12,000
there's also a part two to this class

983
00:39:12,000 --> 00:39:14,460
that I like to describe is the Bigfoot

984
00:39:14,460 --> 00:39:17,250
of Coursera classes everybody like keeps

985
00:39:17,250 --> 00:39:19,410
saying it's coming like I heard it was

986
00:39:19,410 --> 00:39:21,900
coming in the fall and then it never

987
00:39:21,900 --> 00:39:23,970
happens and then don't like one time

988
00:39:23,970 --> 00:39:25,680
they like sent out a course survey like

989
00:39:25,680 --> 00:39:27,240
a pre-course survey for it and then that

990
00:39:27,240 --> 00:39:30,210
one away it's kind of crazy I'm am

991
00:39:30,210 --> 00:39:31,440
looking forward to it though because it

992
00:39:31,440 --> 00:39:32,910
was incredibly good course from dan

993
00:39:32,910 --> 00:39:37,260
Vinay and then lastly the mono sano

994
00:39:37,260 --> 00:39:40,080
crypto challenges from Krypto pals it's

995
00:39:40,080 --> 00:39:41,760
used to be run out of email you they

996
00:39:41,760 --> 00:39:43,260
like email you the set and then you

997
00:39:43,260 --> 00:39:45,660
would email it back they get very over

998
00:39:45,660 --> 00:39:46,920
there with email so they set up a

999
00:39:46,920 --> 00:39:48,930
self-driven website so these are kind of

1000
00:39:48,930 --> 00:39:51,210
developer challenges where you actually

1001
00:39:51,210 --> 00:39:53,400
get to write code to break these crypto

1002
00:39:53,400 --> 00:39:56,550
algorithms it's really really cool that

1003
00:39:56,550 --> 00:39:58,650
is it I have four minutes for question

1004
00:39:58,650 --> 00:40:08,160
thank you all right so I have a quick

1005
00:40:08,160 --> 00:40:09,930
question yeah earlier in your slides you

1006
00:40:09,930 --> 00:40:11,490
gave some recommendations and you said

1007
00:40:11,490 --> 00:40:13,890
Shah too yes I was wondering why you

1008
00:40:13,890 --> 00:40:18,390
didn't say Shawn three so that's so the

1009
00:40:18,390 --> 00:40:21,270
i will answer two things as you said

1010
00:40:21,270 --> 00:40:24,120
something and I wanted to help people so

1011
00:40:24,120 --> 00:40:25,770
shot two applies to a family of

1012
00:40:25,770 --> 00:40:28,200
functions sha256 is one of that family

1013
00:40:28,200 --> 00:40:30,960
why I did not say shot three is because

1014
00:40:30,960 --> 00:40:33,470
it is not although it is standardized

1015
00:40:33,470 --> 00:40:36,900
there there are multiple reasons a you

1016
00:40:36,900 --> 00:40:38,010
don't find it implemented a lot of

1017
00:40:38,010 --> 00:40:39,630
systems yet so you don't find access to

1018
00:40:39,630 --> 00:40:42,000
it and like the libraries and then be

1019
00:40:42,000 --> 00:40:43,410
there were some like last-minute

1020
00:40:43,410 --> 00:40:45,840
shenanigans with it between it and NIST

1021
00:40:45,840 --> 00:40:48,540
and the other organizations that have

1022
00:40:48,540 --> 00:40:49,950
people kind of going like hey we had

1023
00:40:49,950 --> 00:40:51,390
this perfectly good algorithm why did

1024
00:40:51,390 --> 00:40:54,210
you mess with it the last second there

1025
00:40:54,210 --> 00:40:56,160
are other great hashing algorithms out

1026
00:40:56,160 --> 00:40:58,950
there Blake too and I feel like that

1027
00:40:58,950 --> 00:41:00,690
that we're finalists in the shop free

1028
00:41:00,690 --> 00:41:03,960
competition I personally until we have a

1029
00:41:03,960 --> 00:41:05,910
reason to switch shots of you six is

1030
00:41:05,910 --> 00:41:08,520
still a really good choice Joffrey does

1031
00:41:08,520 --> 00:41:10,380
have like the length extension thing is

1032
00:41:10,380 --> 00:41:12,000
fiction a few things like that but

1033
00:41:12,000 --> 00:41:13,920
honestly the systems are working we

1034
00:41:13,920 --> 00:41:16,410
don't have access to it unless we have

1035
00:41:16,410 --> 00:41:17,970
like native extensions or anything so

1036
00:41:17,970 --> 00:41:22,350
it's like not even surfaced yet they are

1037
00:41:22,350 --> 00:41:24,210
and so he said fungus functions are

1038
00:41:24,210 --> 00:41:25,590
awesome and that is true in there

1039
00:41:25,590 --> 00:41:27,950
there's a lot of future use of them but

1040
00:41:27,950 --> 00:41:30,600
we have to actually have practical like

1041
00:41:30,600 --> 00:41:33,380
applicability

1042
00:41:34,150 --> 00:41:36,730
and so you talked a lot about the silver

1043
00:41:36,730 --> 00:41:39,160
side can you say hopefully like from the

1044
00:41:39,160 --> 00:41:41,260
browser song or the website already

1045
00:41:41,260 --> 00:41:43,089
talked about a certificate pending your

1046
00:41:43,089 --> 00:41:49,270
trust but what yeah the question was I

1047
00:41:49,270 --> 00:41:51,069
talked a lot about the server side what

1048
00:41:51,069 --> 00:41:53,799
about the browser the client side so SSL

1049
00:41:53,799 --> 00:41:56,470
Labs has a client side test to that you

1050
00:41:56,470 --> 00:41:58,000
can either I think you can either Carl

1051
00:41:58,000 --> 00:42:00,069
it or you can like whatever your system

1052
00:42:00,069 --> 00:42:01,569
go fetch it and you can hit it with your

1053
00:42:01,569 --> 00:42:04,809
browser and it will tell you if it

1054
00:42:04,809 --> 00:42:06,099
thinks your browser is doing a good job

1055
00:42:06,099 --> 00:42:08,260
they're generally aren't too many knobs

1056
00:42:08,260 --> 00:42:10,390
and the browser's for you to choose at

1057
00:42:10,390 --> 00:42:12,309
least for the most part I think the best

1058
00:42:12,309 --> 00:42:14,859
advice is keep your browser's up-to-date

1059
00:42:14,859 --> 00:42:16,839
so Chrome Firefox both do an excellent

1060
00:42:16,839 --> 00:42:19,930
job of keeping up-to-date and chrome

1061
00:42:19,930 --> 00:42:21,940
even so much is like when they have

1062
00:42:21,940 --> 00:42:23,349
issues with certificate authorities

1063
00:42:23,349 --> 00:42:26,289
they'll push quackless out and like you

1064
00:42:26,289 --> 00:42:27,490
know that's their kind of their big

1065
00:42:27,490 --> 00:42:29,170
hammer for certificate authorities is

1066
00:42:29,170 --> 00:42:30,760
like will block you which totally cuts

1067
00:42:30,760 --> 00:42:32,890
off your commercial viability is that's

1068
00:42:32,890 --> 00:42:45,210
a major browser for various vision

1069
00:42:45,210 --> 00:42:47,570
request

1070
00:42:49,570 --> 00:42:51,850
condition

1071
00:42:51,850 --> 00:42:55,190
okay so the question was do I feel

1072
00:42:55,190 --> 00:42:56,870
transport layer security or TLS

1073
00:42:56,870 --> 00:42:58,460
efficient or do you need to layer

1074
00:42:58,460 --> 00:43:00,260
additional things on top of it you

1075
00:43:00,260 --> 00:43:03,740
mentioned sam'l and then XML encryption

1076
00:43:03,740 --> 00:43:06,770
in the payload so for that I have that

1077
00:43:06,770 --> 00:43:08,720
conversation with a lot with engineers

1078
00:43:08,720 --> 00:43:11,570
and my organization and I think in each

1079
00:43:11,570 --> 00:43:12,800
case it comes down to like what's your

1080
00:43:12,800 --> 00:43:15,440
threat model right is your threat model

1081
00:43:15,440 --> 00:43:18,560
someone will fat finger and unencrypted

1082
00:43:18,560 --> 00:43:20,810
data will get dumped out two logs or

1083
00:43:20,810 --> 00:43:22,760
splunk or something you know and then

1084
00:43:22,760 --> 00:43:24,110
you know then we at least have an

1085
00:43:24,110 --> 00:43:25,430
encrypted payload there and save an

1086
00:43:25,430 --> 00:43:29,390
unencrypted payload I think largely the

1087
00:43:29,390 --> 00:43:31,400
wrapping and encryption around an

1088
00:43:31,400 --> 00:43:33,800
encryption you that means at some point

1089
00:43:33,800 --> 00:43:35,240
you don't trust the person unwrapping

1090
00:43:35,240 --> 00:43:38,210
one of the encryptions so figure out why

1091
00:43:38,210 --> 00:43:40,220
you don't trust them and if you still

1092
00:43:40,220 --> 00:43:41,900
don't trust them that's fine like layer

1093
00:43:41,900 --> 00:43:43,640
the encryption but it's important to

1094
00:43:43,640 --> 00:43:44,750
think about it from a real threat

1095
00:43:44,750 --> 00:43:53,020
perspective who's your favorite RF or a

1096
00:43:53,290 --> 00:43:56,330
the question was who is my favorite rsrs

1097
00:43:56,330 --> 00:44:02,330
oh roo-roo besh Samir and Adelman I true

1098
00:44:02,330 --> 00:44:04,460
story I was at the Royal crypto

1099
00:44:04,460 --> 00:44:06,050
conference I hope no one ever watches

1100
00:44:06,050 --> 00:44:07,790
this on video I saw Ron Rivest fall

1101
00:44:07,790 --> 00:44:09,140
asleep in the front row the count of the

1102
00:44:09,140 --> 00:44:11,060
thing so he asked me my favorite he's

1103
00:44:11,060 --> 00:44:14,150
like I am so oh gee I can fall asleep in

1104
00:44:14,150 --> 00:44:14,990
the front row that script their

1105
00:44:14,990 --> 00:44:17,379
conference

1106
00:44:24,440 --> 00:44:32,370
blind faith on I'm sorry on Fido yeah so

1107
00:44:32,370 --> 00:44:33,690
the question is do I have any thoughts

1108
00:44:33,690 --> 00:44:38,220
on Fido so I i'm a big fan of fido

1109
00:44:38,220 --> 00:44:40,680
paypal my company is also a big

1110
00:44:40,680 --> 00:44:44,580
proponent of fight oh I'm like I was one

1111
00:44:44,580 --> 00:44:46,680
of the first people to buy the u 2f and

1112
00:44:46,680 --> 00:44:48,150
like start implementing it and actually

1113
00:44:48,150 --> 00:44:49,800
really sad because I was like I'm going

1114
00:44:49,800 --> 00:44:51,690
to do a ruby gem that does you to F I

1115
00:44:51,690 --> 00:44:54,090
started writing it I got very far but

1116
00:44:54,090 --> 00:44:55,680
then i got like distracted and then like

1117
00:44:55,680 --> 00:44:57,750
two days later someone pushed a empty

1118
00:44:57,750 --> 00:44:59,430
gym and claim the name and now it's just

1119
00:44:59,430 --> 00:45:00,630
like flip the table and i was like

1120
00:45:00,630 --> 00:45:03,420
nevermind hopefully they finish it but

1121
00:45:03,420 --> 00:45:04,830
yeah I'm of a kind of look into fight oh

1122
00:45:04,830 --> 00:45:06,720
the you to F and the uaf framework those

1123
00:45:06,720 --> 00:45:14,730
are cool right I don't see any more but

1124
00:45:14,730 --> 00:45:17,100
I'm also I've lied to my eyes so thank

1125
00:45:17,100 --> 00:45:19,220
you

