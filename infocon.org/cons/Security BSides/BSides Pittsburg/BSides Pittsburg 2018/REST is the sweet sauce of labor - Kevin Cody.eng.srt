1
00:00:01,639 --> 00:00:04,799
okay welcome to the gold room first talk

2
00:00:04,799 --> 00:00:06,690
is Kevin Cody we're gonna learn about

3
00:00:06,690 --> 00:00:09,000
rest is the sweet sauce of Labor and

4
00:00:09,000 --> 00:00:10,740
with it all farther adieu

5
00:00:10,740 --> 00:00:24,689
Gavin Cody morning everyone get cozy

6
00:00:24,689 --> 00:00:25,920
comfy you don't stay in the whole time

7
00:00:25,920 --> 00:00:27,960
there's some seats I'm sure people be

8
00:00:27,960 --> 00:00:29,699
funneling out halfway through so feel

9
00:00:29,699 --> 00:00:35,070
free to to fill in so yeah oh that's not

10
00:00:35,070 --> 00:00:39,270
the right thing all right we're gonna be

11
00:00:39,270 --> 00:00:40,920
starting real soon so everybody please

12
00:00:40,920 --> 00:00:42,680
get settled in thank you

13
00:00:42,680 --> 00:00:44,910
that's them for the next room I guess I

14
00:00:44,910 --> 00:00:52,739
don't know all right so yeah we're going

15
00:00:52,739 --> 00:00:55,260
to be talking about rest today my name's

16
00:00:55,260 --> 00:00:57,960
Kevin Cody if you don't know me I am

17
00:00:57,960 --> 00:01:00,780
from Pittsburgh so Jen's are at heart

18
00:01:00,780 --> 00:01:03,300
here a little bit north near the Grove

19
00:01:03,300 --> 00:01:05,459
City Newcastle area I'm a principal

20
00:01:05,459 --> 00:01:06,780
application security consultant with

21
00:01:06,780 --> 00:01:11,460
envision we're a boutique OPSEC firm I'm

22
00:01:11,460 --> 00:01:13,290
a bit of a vulnerability StumbleUpon or

23
00:01:13,290 --> 00:01:15,299
if you haven't worked with me in before

24
00:01:15,299 --> 00:01:17,070
you'll know that mainframe enthusiasts

25
00:01:17,070 --> 00:01:18,299
people who've been through my talks

26
00:01:18,299 --> 00:01:19,860
before no this is kind of how I start

27
00:01:19,860 --> 00:01:22,080
off so I'm gonna go a little bit further

28
00:01:22,080 --> 00:01:26,490
today yes there is more so I'm also the

29
00:01:26,490 --> 00:01:28,590
OWASP Pittsburgh chapter leader so if

30
00:01:28,590 --> 00:01:29,579
you're interested in the stuff we're

31
00:01:29,579 --> 00:01:30,960
gonna be talking about today please come

32
00:01:30,960 --> 00:01:33,150
out to the OWASP meetings there's gonna

33
00:01:33,150 --> 00:01:43,860
be one next week of July don't know what

34
00:01:43,860 --> 00:01:46,040
just happened

35
00:01:49,360 --> 00:01:52,450
there is alright July next Thursday

36
00:01:52,450 --> 00:01:55,770
things like July 28th or sorry June 28th

37
00:01:55,770 --> 00:01:58,600
we have a Pittsburgh meetup so I

38
00:01:58,600 --> 00:01:59,890
definitely take a look at their or the

39
00:01:59,890 --> 00:02:02,290
OWASP wiki I published them on there as

40
00:02:02,290 --> 00:02:02,710
well

41
00:02:02,710 --> 00:02:04,780
I also helped out with the three rivers

42
00:02:04,780 --> 00:02:06,880
information security symposium which is

43
00:02:06,880 --> 00:02:08,610
a group of a bunch of different

44
00:02:08,610 --> 00:02:11,830
Pittsburgh applicator or InfoSec groups

45
00:02:11,830 --> 00:02:14,410
we put on a security symposium that is

46
00:02:14,410 --> 00:02:16,330
set for October I'll be speaking of

47
00:02:16,330 --> 00:02:18,220
besides Cleveland tomorrow so any of you

48
00:02:18,220 --> 00:02:20,140
folks who are going from here today over

49
00:02:20,140 --> 00:02:22,870
there completely different subject etc

50
00:02:22,870 --> 00:02:26,110
and anyone who comes out to Steel City

51
00:02:26,110 --> 00:02:28,660
InfoSec I frequent there as well so

52
00:02:28,660 --> 00:02:30,400
that's a little bit about me but that's

53
00:02:30,400 --> 00:02:32,140
it no more talk about me let's talk

54
00:02:32,140 --> 00:02:35,680
about some fun stuff and get rolling so

55
00:02:35,680 --> 00:02:38,800
today we're gonna talk about monolithic

56
00:02:38,800 --> 00:02:40,570
versus micro services because I think

57
00:02:40,570 --> 00:02:42,850
that's a really good kind of intro into

58
00:02:42,850 --> 00:02:46,570
the rest 101 rest paradigm why we are so

59
00:02:46,570 --> 00:02:49,630
rest centric today then I'm gonna go

60
00:02:49,630 --> 00:02:52,420
into rest 101 so we'll go into that I'm

61
00:02:52,420 --> 00:02:54,360
gonna discuss some tooling around

62
00:02:54,360 --> 00:02:57,150
testing rest both from security and

63
00:02:57,150 --> 00:03:01,180
operations and and QA perspective going

64
00:03:01,180 --> 00:03:04,090
to security focuses and concerns and

65
00:03:04,090 --> 00:03:05,830
then I'll get into a little bit of a

66
00:03:05,830 --> 00:03:07,780
technical deep dive hopefully the demo

67
00:03:07,780 --> 00:03:10,209
gods are good to us in here and then

68
00:03:10,209 --> 00:03:13,470
proceed to some summaries and takeaways

69
00:03:13,470 --> 00:03:16,269
all right so to dive into this this is

70
00:03:16,269 --> 00:03:19,330
the gist this is an awesome graphic from

71
00:03:19,330 --> 00:03:21,670
vero Sanchez on Twitter this is

72
00:03:21,670 --> 00:03:24,070
describing monolithic services versus

73
00:03:24,070 --> 00:03:28,150
micro services right this is this is one

74
00:03:28,150 --> 00:03:30,510
of my favorite graphics on this but in

75
00:03:30,510 --> 00:03:33,850
reality so monolithic applications right

76
00:03:33,850 --> 00:03:35,799
how many folks in here work for an

77
00:03:35,799 --> 00:03:38,650
enterprise who you either develop on

78
00:03:38,650 --> 00:03:41,650
test security of do compliance on what

79
00:03:41,650 --> 00:03:43,320
you'd consider like a monolithic

80
00:03:43,320 --> 00:03:45,970
application traditional tried and true

81
00:03:45,970 --> 00:03:48,370
either fit client app or web app that

82
00:03:48,370 --> 00:03:51,070
uses one platform so like for people

83
00:03:51,070 --> 00:03:54,459
okay cool all right now what we see here

84
00:03:54,459 --> 00:03:58,569
are large code bases usually they're

85
00:03:58,569 --> 00:04:01,239
bloated they have a lot of carryover

86
00:04:01,239 --> 00:04:03,160
from from different years and developed

87
00:04:03,160 --> 00:04:06,670
and strategies etc they are a detriment

88
00:04:06,670 --> 00:04:09,850
to new features right so when you try to

89
00:04:09,850 --> 00:04:12,910
introduce new features for monolithic

90
00:04:12,910 --> 00:04:14,440
applications it's pretty tough because

91
00:04:14,440 --> 00:04:16,000
you have to consider all of this blow

92
00:04:16,000 --> 00:04:18,010
all of this years of history whatever

93
00:04:18,010 --> 00:04:21,399
platform you know net etc that you're

94
00:04:21,399 --> 00:04:23,890
used to or I'm sorry that the monolithic

95
00:04:23,890 --> 00:04:25,870
application is written on and it's kind

96
00:04:25,870 --> 00:04:28,150
of hard to to you know introduce some of

97
00:04:28,150 --> 00:04:31,240
those new features and therefore they

98
00:04:31,240 --> 00:04:33,040
are stagnant in the face of technology

99
00:04:33,040 --> 00:04:34,240
right we kind of just have to drag them

100
00:04:34,240 --> 00:04:37,480
along and keep going and from a security

101
00:04:37,480 --> 00:04:39,130
perspective they're difficult to assess

102
00:04:39,130 --> 00:04:41,530
right because there's just their old

103
00:04:41,530 --> 00:04:44,350
Matoo Thor using an old version of Java

104
00:04:44,350 --> 00:04:45,880
or whatever the cases are they're

105
00:04:45,880 --> 00:04:47,470
usually pretty difficult to assess

106
00:04:47,470 --> 00:04:48,930
because of everything else I just said

107
00:04:48,930 --> 00:04:52,440
so then we move on to micro services so

108
00:04:52,440 --> 00:04:54,760
micro services kind of work as this

109
00:04:54,760 --> 00:04:57,790
pieces of a larger puzzle and I'll break

110
00:04:57,790 --> 00:04:58,720
down in a moment

111
00:04:58,720 --> 00:05:01,060
give you an example of that but the cool

112
00:05:01,060 --> 00:05:02,320
thing about micro services are they're

113
00:05:02,320 --> 00:05:04,990
easier to distribute across different

114
00:05:04,990 --> 00:05:07,350
data centers or different cloud hosting

115
00:05:07,350 --> 00:05:10,960
environments etc you can migrate them

116
00:05:10,960 --> 00:05:12,910
they're easier to maintain they're more

117
00:05:12,910 --> 00:05:14,470
in line with the agile development

118
00:05:14,470 --> 00:05:16,690
process because micro services can be

119
00:05:16,690 --> 00:05:18,520
literally broken up into portions and

120
00:05:18,520 --> 00:05:19,990
you can work on those independently

121
00:05:19,990 --> 00:05:22,390
they're usually easier to document than

122
00:05:22,390 --> 00:05:24,100
a monolithic application because there's

123
00:05:24,100 --> 00:05:26,590
usually services that are alike query

124
00:05:26,590 --> 00:05:29,020
this or delete that etc so they're

125
00:05:29,020 --> 00:05:30,790
usually easier to document you don't

126
00:05:30,790 --> 00:05:33,220
have to really dig down into the code or

127
00:05:33,220 --> 00:05:35,020
pull someone out of retirement and say

128
00:05:35,020 --> 00:05:36,970
hey man what did this do again I don't

129
00:05:36,970 --> 00:05:40,780
know what this did or does but they're

130
00:05:40,780 --> 00:05:42,790
still kind of difficult to assess even

131
00:05:42,790 --> 00:05:45,070
micro services because of how modular

132
00:05:45,070 --> 00:05:46,450
they are and how everything kind of

133
00:05:46,450 --> 00:05:47,860
pieces together they're still difficult

134
00:05:47,860 --> 00:05:49,720
to assess but hopefully some of the

135
00:05:49,720 --> 00:05:51,490
stuff we'll go over today will help us

136
00:05:51,490 --> 00:05:53,920
get over that barrier

137
00:05:53,920 --> 00:05:56,920
so to recap we're kind of in the same

138
00:05:56,920 --> 00:05:58,120
place right they're both kind of

139
00:05:58,120 --> 00:06:00,550
difficult some seem good some seem bad

140
00:06:00,550 --> 00:06:02,350
but let me break down you know kind of

141
00:06:02,350 --> 00:06:04,800
what micro services look like today so

142
00:06:04,800 --> 00:06:07,000
to give you an example let's take a

143
00:06:07,000 --> 00:06:11,040
retail app right it has a shopping cart

144
00:06:11,040 --> 00:06:14,169
checkout and you can buy stuff right

145
00:06:14,169 --> 00:06:15,550
that's your traditional retail

146
00:06:15,550 --> 00:06:16,960
application web app

147
00:06:16,960 --> 00:06:21,340
on the Internet but you also want to

148
00:06:21,340 --> 00:06:22,720
introduce because the business really

149
00:06:22,720 --> 00:06:24,729
wants shipped to store so now you have

150
00:06:24,729 --> 00:06:26,650
to take inventory out of the warehouse

151
00:06:26,650 --> 00:06:28,690
and ship it to the store and the store

152
00:06:28,690 --> 00:06:30,340
people have to be ready to pick it up

153
00:06:30,340 --> 00:06:33,340
ready to distribute it etc customers

154
00:06:33,340 --> 00:06:35,560
also want store inventory so now it's

155
00:06:35,560 --> 00:06:37,210
backwards you have to query your

156
00:06:37,210 --> 00:06:39,699
internal store inventory know where

157
00:06:39,699 --> 00:06:41,770
things are at where people can go pick

158
00:06:41,770 --> 00:06:44,710
things up etc well now someone wants

159
00:06:44,710 --> 00:06:47,289
wishlist send and social and sharing and

160
00:06:47,289 --> 00:06:48,100
registry so that's a completely

161
00:06:48,100 --> 00:06:51,160
different thing than shopping cart

162
00:06:51,160 --> 00:06:52,840
checkout and buy stuff right now you're

163
00:06:52,840 --> 00:06:57,280
integrating with OAuth or your you have

164
00:06:57,280 --> 00:06:59,289
the ability to send out invites or

165
00:06:59,289 --> 00:07:00,789
sharing or you have to link the

166
00:07:00,789 --> 00:07:03,460
inventory from the in-store to online so

167
00:07:03,460 --> 00:07:06,160
people know when your friend goes and

168
00:07:06,160 --> 00:07:08,050
picks up the Babies R Us registry item

169
00:07:08,050 --> 00:07:10,150
that it's no longer on that registry

170
00:07:10,150 --> 00:07:12,190
right so things keep kind of growing

171
00:07:12,190 --> 00:07:14,169
here well now someone says ok well now

172
00:07:14,169 --> 00:07:17,160
we want Aude mented reality for our

173
00:07:17,160 --> 00:07:19,810
mirrors and store finders right have we

174
00:07:19,810 --> 00:07:21,010
have seen where you get out your phone

175
00:07:21,010 --> 00:07:22,840
and you can you know point it out and

176
00:07:22,840 --> 00:07:24,760
it'll say ok here's the GPS of the

177
00:07:24,760 --> 00:07:27,130
nearest store walk this way make a left

178
00:07:27,130 --> 00:07:29,710
you know go over here right oh and we

179
00:07:29,710 --> 00:07:31,060
want beacons in the store so we know

180
00:07:31,060 --> 00:07:33,070
where our customers are at what they're

181
00:07:33,070 --> 00:07:36,280
looking at etc etc that's a lot of stuff

182
00:07:36,280 --> 00:07:37,990
can you imagine trying to implement this

183
00:07:37,990 --> 00:07:40,360
stuff in a monolithic application that

184
00:07:40,360 --> 00:07:43,210
has you know that's written on Java 1/6

185
00:07:43,210 --> 00:07:47,440
or on dotnet you know - and you know

186
00:07:47,440 --> 00:07:48,820
you're trying to you know implement all

187
00:07:48,820 --> 00:07:52,000
this ad hoc ala cart things and they

188
00:07:52,000 --> 00:07:53,409
don't really talk well together they're

189
00:07:53,409 --> 00:07:56,229
not even from the same you know decade

190
00:07:56,229 --> 00:07:58,960
right we're talking about early 2000s or

191
00:07:58,960 --> 00:08:02,080
possibly even 99 98 and we're talking

192
00:08:02,080 --> 00:08:03,669
about technologies that have just been

193
00:08:03,669 --> 00:08:04,990
really coming into the fold in the last

194
00:08:04,990 --> 00:08:09,520
5 or less years so how do we deliver

195
00:08:09,520 --> 00:08:13,060
that content to a consumer in a way that

196
00:08:13,060 --> 00:08:16,260
a consumer can actually use it right so

197
00:08:16,260 --> 00:08:19,030
today's picture what today looks like is

198
00:08:19,030 --> 00:08:21,669
a bevy of different hosting options

199
00:08:21,669 --> 00:08:24,039
right we have on Prem cloud hybrid

200
00:08:24,039 --> 00:08:26,590
whatever today's soup du jour is right

201
00:08:26,590 --> 00:08:28,960
I'm sure I heard something HP has this

202
00:08:28,960 --> 00:08:29,409
thing where you

203
00:08:29,409 --> 00:08:31,629
by equipment you host in your data

204
00:08:31,629 --> 00:08:33,549
center then you pay the money to unlock

205
00:08:33,549 --> 00:08:37,859
the equipment the end of some cool thing

206
00:08:37,889 --> 00:08:40,659
so that's that's that's one piece of the

207
00:08:40,659 --> 00:08:41,500
puzzle then there's this whole

208
00:08:41,500 --> 00:08:43,389
service-oriented architecture which is

209
00:08:43,389 --> 00:08:45,550
another piece then we throw micro

210
00:08:45,550 --> 00:08:48,670
services on top of that we have to make

211
00:08:48,670 --> 00:08:50,319
sure everything's talking in a standard

212
00:08:50,319 --> 00:08:50,829
innit

213
00:08:50,829 --> 00:08:52,870
data interchange format which is

214
00:08:52,870 --> 00:08:54,040
interesting when we're talking about all

215
00:08:54,040 --> 00:08:57,000
these discrete pieces then we parse that

216
00:08:57,000 --> 00:09:00,550
on the client-side using something like

217
00:09:00,550 --> 00:09:02,740
a JavaScript framework or a single page

218
00:09:02,740 --> 00:09:04,629
application so that all of these

219
00:09:04,629 --> 00:09:06,310
different discrete services maybe ones

220
00:09:06,310 --> 00:09:08,199
written in Kotlin maybe ones written in

221
00:09:08,199 --> 00:09:12,790
Scala maybe a swift server-side or go

222
00:09:12,790 --> 00:09:15,100
right all of these things can dock talk

223
00:09:15,100 --> 00:09:17,139
in discreet ways be sent to the client

224
00:09:17,139 --> 00:09:19,689
the client just sees it as a JSON blob

225
00:09:19,689 --> 00:09:22,569
which is then parsed and delivered just

226
00:09:22,569 --> 00:09:24,220
like any other data stream and then you

227
00:09:24,220 --> 00:09:26,589
can deliver all these discrete things so

228
00:09:26,589 --> 00:09:30,939
we add it all together and we as an

229
00:09:30,939 --> 00:09:33,220
industry decided that services was

230
00:09:33,220 --> 00:09:35,290
weight the way to go right we we were

231
00:09:35,290 --> 00:09:38,439
gonna go with services so everyone's

232
00:09:38,439 --> 00:09:40,329
still with me that was a lot really fast

233
00:09:40,329 --> 00:09:42,430
but I wanted to get you up to speed as

234
00:09:42,430 --> 00:09:45,130
far as why restau is what it is today

235
00:09:45,130 --> 00:09:47,259
and I'm just gonna say it I'm not gonna

236
00:09:47,259 --> 00:09:48,819
talk about soap I'm not a big fan of

237
00:09:48,819 --> 00:09:51,610
soap soap is gnarly to work with XML

238
00:09:51,610 --> 00:09:53,709
format is is crazy the envelope yet that

239
00:09:53,709 --> 00:09:56,230
parsers etc this isn't a soap talk we're

240
00:09:56,230 --> 00:09:59,319
gonna talk about rest today so where

241
00:09:59,319 --> 00:10:03,870
does rest fit in so Roy Thomas felting

242
00:10:03,870 --> 00:10:06,850
created the rest architecture and

243
00:10:06,850 --> 00:10:09,189
paradigm back in 2000 it was actually

244
00:10:09,189 --> 00:10:11,709
his PhD dissertation and can I take an

245
00:10:11,709 --> 00:10:14,920
aside for a second Roy's personal web

246
00:10:14,920 --> 00:10:18,339
domain are you ready for this is Roy da

247
00:10:18,339 --> 00:10:21,850
Jie bills okay if that's not hilarious I

248
00:10:21,850 --> 00:10:23,439
don't know what was I was cracking up

249
00:10:23,439 --> 00:10:27,910
when I saw that he owns dot G bib and in

250
00:10:27,910 --> 00:10:32,970
subdomains Roy anyway maybe so he's a

251
00:10:32,970 --> 00:10:35,949
dissertation was architectural styles in

252
00:10:35,949 --> 00:10:37,899
the design of network based software

253
00:10:37,899 --> 00:10:41,589
architectures which is a mouthful but

254
00:10:41,589 --> 00:10:43,300
the whole idea about

255
00:10:43,300 --> 00:10:45,910
was this idea of representational state

256
00:10:45,910 --> 00:10:48,850
transfer or what we like to call rest

257
00:10:48,850 --> 00:10:51,910
and there was a few cornerstones to the

258
00:10:51,910 --> 00:10:54,040
rest paradigm one is that it was

259
00:10:54,040 --> 00:10:57,220
stateless the idea of stateless and

260
00:10:57,220 --> 00:10:58,660
we're gonna dive into Salus more in a

261
00:10:58,660 --> 00:10:59,140
moment

262
00:10:59,140 --> 00:11:02,589
the HTTP methods were strictly enforced

263
00:11:02,589 --> 00:11:06,029
so when we when we talk about methods

264
00:11:06,029 --> 00:11:08,470
again we'll dive into that more in a

265
00:11:08,470 --> 00:11:11,110
moment and standardized data elements

266
00:11:11,110 --> 00:11:12,910
for consistency purposes was huge so if

267
00:11:12,910 --> 00:11:16,209
you think about the 2000s this idea of

268
00:11:16,209 --> 00:11:19,720
web 100 or one one was still in its

269
00:11:19,720 --> 00:11:22,600
infancy and so we had like headers and

270
00:11:22,600 --> 00:11:25,240
and the whole idea behind rest or one of

271
00:11:25,240 --> 00:11:28,570
the biggest concerns that Roy had when

272
00:11:28,570 --> 00:11:30,430
he when he actually created the rest

273
00:11:30,430 --> 00:11:32,290
paradigm was that like the host header

274
00:11:32,290 --> 00:11:35,410
wasn't even a consistent thing back then

275
00:11:35,410 --> 00:11:37,420
he's like man rest would work awesome if

276
00:11:37,420 --> 00:11:39,310
we just sent the host with every request

277
00:11:39,310 --> 00:11:41,980
but that wasn't a common practice in

278
00:11:41,980 --> 00:11:44,709
2000 so that was one of the things that

279
00:11:44,709 --> 00:11:46,810
kind of held him back and and Roy

280
00:11:46,810 --> 00:11:48,490
actually helped design the standards for

281
00:11:48,490 --> 00:11:52,240
web 100 and web 1-1 and he helped with

282
00:11:52,240 --> 00:11:54,520
building Apache etc but we've come a

283
00:11:54,520 --> 00:11:58,060
long way but when we talk about data

284
00:11:58,060 --> 00:12:01,089
elements Roy was basically speaking to

285
00:12:01,089 --> 00:12:03,339
different things that we see is just

286
00:12:03,339 --> 00:12:06,339
normal HTTP traffic now right so who's

287
00:12:06,339 --> 00:12:08,860
talking about resources like where the

288
00:12:08,860 --> 00:12:12,160
intended target of our our communication

289
00:12:12,160 --> 00:12:14,410
is going then the resource identifier

290
00:12:14,410 --> 00:12:18,790
write the URL URI u RN etc the

291
00:12:18,790 --> 00:12:20,589
representation of the data that you were

292
00:12:20,589 --> 00:12:22,690
transmitting to and from right so we're

293
00:12:22,690 --> 00:12:25,839
talking about back then HTML documents

294
00:12:25,839 --> 00:12:28,810
JPEGs now this is stolen directly from

295
00:12:28,810 --> 00:12:30,430
his dissertation so some of these things

296
00:12:30,430 --> 00:12:33,360
may not match exactly from the from the

297
00:12:33,360 --> 00:12:35,589
terminology that we use today but this

298
00:12:35,589 --> 00:12:37,300
is the exact kind of things that he was

299
00:12:37,300 --> 00:12:38,860
worried about when he created the rest

300
00:12:38,860 --> 00:12:42,610
the rest of paradigm we talked about

301
00:12:42,610 --> 00:12:45,160
metadata right media type last modified

302
00:12:45,160 --> 00:12:47,380
time anyone familiar with HTTP headers

303
00:12:47,380 --> 00:12:49,149
this is the stuff that you see in those

304
00:12:49,149 --> 00:12:53,079
headers right metadata control data

305
00:12:53,079 --> 00:12:55,540
cache caching was big when rest was

306
00:12:55,540 --> 00:12:57,020
being thought up because of this

307
00:12:57,020 --> 00:13:00,560
statelessness and the ability to be able

308
00:13:00,560 --> 00:13:03,350
to transmit a large amount of data over

309
00:13:03,350 --> 00:13:05,209
internet that wasn't really fast and

310
00:13:05,209 --> 00:13:10,130
optimized as it is today so then as I

311
00:13:10,130 --> 00:13:13,670
mentioned we go into HTTP methods and HD

312
00:13:13,670 --> 00:13:18,230
restful api is enable you to develop web

313
00:13:18,230 --> 00:13:21,470
applications with all possible crud

314
00:13:21,470 --> 00:13:23,149
operations so crud if you're not

315
00:13:23,149 --> 00:13:26,540
familiar is create retrieve update and

316
00:13:26,540 --> 00:13:29,570
delete so if we map those two HTTP

317
00:13:29,570 --> 00:13:33,260
methods that comes out to be post an

318
00:13:33,260 --> 00:13:37,459
HTTP POST method is for creation a get

319
00:13:37,459 --> 00:13:41,209
method is for reading or querying a put

320
00:13:41,209 --> 00:13:44,390
method is to update a replace patch is

321
00:13:44,390 --> 00:13:47,300
to partially update or modify and delete

322
00:13:47,300 --> 00:13:48,740
it's to delete a record from a data

323
00:13:48,740 --> 00:13:52,660
store this seems pretty straightforward

324
00:13:52,660 --> 00:13:56,180
but I do have a question what is what

325
00:13:56,180 --> 00:13:58,130
are this what does this mapping mean to

326
00:13:58,130 --> 00:13:59,810
security folks in here what kind of

327
00:13:59,810 --> 00:14:01,579
problems could you see a rising from

328
00:14:01,579 --> 00:14:04,310
using these methods in this manner good

329
00:14:04,310 --> 00:14:06,459
sir

330
00:14:11,610 --> 00:14:16,200
okay so okay so just repeat if you

331
00:14:16,200 --> 00:14:20,430
didn't hear so Scott's answer was where

332
00:14:20,430 --> 00:14:23,160
data is being transmitted in the HTTP

333
00:14:23,160 --> 00:14:27,620
request specifically concerns with HTTP

334
00:14:27,620 --> 00:14:30,660
URI parameters or query parameters and

335
00:14:30,660 --> 00:14:32,120
that's exactly right

336
00:14:32,120 --> 00:14:35,670
so information leakage via URL per at

337
00:14:35,670 --> 00:14:37,680
query parameters is a real concern but

338
00:14:37,680 --> 00:14:39,990
remember if we're using rest as it was

339
00:14:39,990 --> 00:14:42,390
intended to be used if we're querying a

340
00:14:42,390 --> 00:14:44,640
back-end datastore we're supposed to be

341
00:14:44,640 --> 00:14:48,210
using the get method so if your look up

342
00:14:48,210 --> 00:14:51,990
is SSN you're now transmitting an SSN as

343
00:14:51,990 --> 00:14:55,350
a query parameter and every time I see

344
00:14:55,350 --> 00:14:59,520
that my absolute every time my reaction

345
00:14:59,520 --> 00:15:04,470
is what are those every time I see some

346
00:15:04,470 --> 00:15:06,300
crazy amount of data being transmitted

347
00:15:06,300 --> 00:15:09,960
in a query parameter right because think

348
00:15:09,960 --> 00:15:11,490
about query parameters right they're

349
00:15:11,490 --> 00:15:14,310
cached on the browser they're cached and

350
00:15:14,310 --> 00:15:16,770
proxies they're available in web app

351
00:15:16,770 --> 00:15:20,160
logs they're available in load balancer

352
00:15:20,160 --> 00:15:24,750
logs so this whole idea of using crud

353
00:15:24,750 --> 00:15:27,300
operations exactly how they're meant to

354
00:15:27,300 --> 00:15:31,560
be used is a little bit interesting but

355
00:15:31,560 --> 00:15:33,510
rest for ian's be like one love for

356
00:15:33,510 --> 00:15:35,370
verbs right you're supposed to use those

357
00:15:35,370 --> 00:15:37,470
things I got one good laughs thanks

358
00:15:37,470 --> 00:15:37,800
Kevin

359
00:15:37,800 --> 00:15:40,260
I was cracking up when I found this like

360
00:15:40,260 --> 00:15:42,960
who made this this is great

361
00:15:42,960 --> 00:15:46,920
yes so you know if you talk to someone

362
00:15:46,920 --> 00:15:48,630
about the rest standards and how rest

363
00:15:48,630 --> 00:15:51,300
should be utilized they will swear that

364
00:15:51,300 --> 00:15:53,670
you have to use those methods and only

365
00:15:53,670 --> 00:15:54,990
those methods and if you do anything

366
00:15:54,990 --> 00:15:56,520
else outside of those methods you are

367
00:15:56,520 --> 00:15:59,700
wrong but you'll get a pass from

368
00:15:59,700 --> 00:16:00,960
security guy because I think you're

369
00:16:00,960 --> 00:16:03,960
right so let's agree to disagree on that

370
00:16:03,960 --> 00:16:07,890
one we'll continue on the rest and it's

371
00:16:07,890 --> 00:16:09,240
gonna pick up a little bit I just want

372
00:16:09,240 --> 00:16:11,370
to take you on on a basically a tale of

373
00:16:11,370 --> 00:16:14,730
where rest came from it was really the

374
00:16:14,730 --> 00:16:16,980
reason it's so it's so widely used now

375
00:16:16,980 --> 00:16:18,420
is because of this whole micro-service

376
00:16:18,420 --> 00:16:19,500
architecture is why I want to introduce

377
00:16:19,500 --> 00:16:21,630
you to that taking on a history tour of

378
00:16:21,630 --> 00:16:23,930
rest and kind of the

379
00:16:23,930 --> 00:16:25,820
the spec came from and then we'll get

380
00:16:25,820 --> 00:16:27,920
into some fun technical deep dive so so

381
00:16:27,920 --> 00:16:29,840
hang with me if this is this is a little

382
00:16:29,840 --> 00:16:33,980
bit too high level but we talk about

383
00:16:33,980 --> 00:16:36,440
restful services remember one of the

384
00:16:36,440 --> 00:16:37,760
goals is to stateless lis pass

385
00:16:37,760 --> 00:16:41,090
information as data representations so

386
00:16:41,090 --> 00:16:43,670
in today's rest services what we usually

387
00:16:43,670 --> 00:16:47,090
see are key value pairs right so you see

388
00:16:47,090 --> 00:16:48,770
something like yeah mo people familiar

389
00:16:48,770 --> 00:16:52,270
with the ammo like for people again cool

390
00:16:52,270 --> 00:16:54,920
so he Hamels basically this again this

391
00:16:54,920 --> 00:16:55,970
key value pair so you have a

392
00:16:55,970 --> 00:16:57,980
presentation the name of the

393
00:16:57,980 --> 00:16:59,300
presentation is rest as a sweet sauce

394
00:16:59,300 --> 00:17:02,450
flavor the venue is besides Pittsburgh

395
00:17:02,450 --> 00:17:04,400
right pretty straightforward

396
00:17:04,400 --> 00:17:07,160
key value pair you can also send rest

397
00:17:07,160 --> 00:17:09,950
services with XML which is interesting

398
00:17:09,950 --> 00:17:11,240
again one of the reason I'm not a huge

399
00:17:11,240 --> 00:17:12,709
fan of soap is because the whole soap

400
00:17:12,709 --> 00:17:14,810
envelope and XML and parsing and all

401
00:17:14,810 --> 00:17:16,520
that fun stuff but you can actually have

402
00:17:16,520 --> 00:17:18,770
a restful service which is delivered via

403
00:17:18,770 --> 00:17:22,160
XML key value pairs so the key is time

404
00:17:22,160 --> 00:17:24,530
and the value is oh nine hundred which I

405
00:17:24,530 --> 00:17:26,420
think we're a little after nine hundred

406
00:17:26,420 --> 00:17:29,810
today will continue and then the biggest

407
00:17:29,810 --> 00:17:31,550
and best and and and how many people are

408
00:17:31,550 --> 00:17:34,970
familiar with JSON lots more JSON it's

409
00:17:34,970 --> 00:17:39,590
taking over is a JSON or Jason JSON

410
00:17:39,590 --> 00:17:41,990
thank you yeah it's all object notation

411
00:17:41,990 --> 00:17:46,310
it's on Jason so JSON it's it's similar

412
00:17:46,310 --> 00:17:49,640
key value pairs to Yambol but a little

413
00:17:49,640 --> 00:17:52,520
bit of the the consistency is a little

414
00:17:52,520 --> 00:17:55,430
bit different where you pass in the the

415
00:17:55,430 --> 00:18:01,130
value pair with each per am so we have

416
00:18:01,130 --> 00:18:04,790
this data right and it's sent in a

417
00:18:04,790 --> 00:18:07,930
request or response then what happens

418
00:18:07,930 --> 00:18:10,790
well it's received

419
00:18:10,790 --> 00:18:13,460
parsed and processed for further

420
00:18:13,460 --> 00:18:16,250
activities so what does that look like

421
00:18:16,250 --> 00:18:17,870
we think back to our architecture a

422
00:18:17,870 --> 00:18:20,900
thought process it might be client-side

423
00:18:20,900 --> 00:18:22,340
rendering right we talked about

424
00:18:22,340 --> 00:18:24,440
JavaScript frameworks they might take

425
00:18:24,440 --> 00:18:29,540
that data pull it in use client-side

426
00:18:29,540 --> 00:18:31,760
JavaScript parse it all up figure out

427
00:18:31,760 --> 00:18:34,670
how it maps to the the client and then

428
00:18:34,670 --> 00:18:37,280
display it in a way that the user has

429
00:18:37,280 --> 00:18:39,230
no idea how that information was

430
00:18:39,230 --> 00:18:41,600
transmitted but in reality it was via a

431
00:18:41,600 --> 00:18:45,320
RESTful API that was completely discrete

432
00:18:45,320 --> 00:18:48,410
from the you know so say they're

433
00:18:48,410 --> 00:18:49,760
checking the balance of their bank

434
00:18:49,760 --> 00:18:51,590
account it's a completely discrete web

435
00:18:51,590 --> 00:18:53,600
service from when they needed the login

436
00:18:53,600 --> 00:18:56,120
authentication or when they are gonna do

437
00:18:56,120 --> 00:18:58,070
a transfer right but at the end of the

438
00:18:58,070 --> 00:18:59,630
day it looks very seamless to the

439
00:18:59,630 --> 00:19:01,910
customer upfront because it's just data

440
00:19:01,910 --> 00:19:03,890
being represented and parsed on the

441
00:19:03,890 --> 00:19:06,200
client side there's also the inverse of

442
00:19:06,200 --> 00:19:10,430
that it might be sent from the client in

443
00:19:10,430 --> 00:19:13,340
a post get whatever received on the

444
00:19:13,340 --> 00:19:15,620
server and then maybe put in a data

445
00:19:15,620 --> 00:19:19,340
store somewhere or punch some way on the

446
00:19:19,340 --> 00:19:21,890
server side right so it can be used for

447
00:19:21,890 --> 00:19:23,360
both right the ADA representation could

448
00:19:23,360 --> 00:19:25,850
be used for both but there's also a

449
00:19:25,850 --> 00:19:27,890
third right you could have middleware

450
00:19:27,890 --> 00:19:29,390
right so this doesn't really touch the

451
00:19:29,390 --> 00:19:31,430
client at all you could be doing some

452
00:19:31,430 --> 00:19:33,530
type of normal interaction with a client

453
00:19:33,530 --> 00:19:36,620
app data is sent or just receive it

454
00:19:36,620 --> 00:19:39,170
server-side and then the server uses

455
00:19:39,170 --> 00:19:41,540
restful api so to talk amongst another

456
00:19:41,540 --> 00:19:44,270
server or maybe AWS or what have you so

457
00:19:44,270 --> 00:19:46,730
at the end of the day rest can be used

458
00:19:46,730 --> 00:19:48,260
in a variety of different ways and it's

459
00:19:48,260 --> 00:19:50,420
really just a transport method for data

460
00:19:50,420 --> 00:19:52,190
just think of it as a transport method

461
00:19:52,190 --> 00:19:56,170
for data so when we talk about

462
00:19:56,170 --> 00:19:59,000
restrictions or guidelines to be restful

463
00:19:59,000 --> 00:20:01,550
right other than people saying you got

464
00:20:01,550 --> 00:20:03,140
to follow the crud operations which

465
00:20:03,140 --> 00:20:04,280
again I'm gonna tell you you don't have

466
00:20:04,280 --> 00:20:06,230
to so that's your first rule that you

467
00:20:06,230 --> 00:20:07,910
can break there's the other thing

468
00:20:07,910 --> 00:20:09,140
there's the other thing about

469
00:20:09,140 --> 00:20:11,090
statelessness right they're gonna say

470
00:20:11,090 --> 00:20:14,300
you have to be stateless to be a rest

471
00:20:14,300 --> 00:20:16,730
service if you have restful services

472
00:20:16,730 --> 00:20:19,670
they had to be stateless well that's not

473
00:20:19,670 --> 00:20:21,440
really necessarily true reader we'll get

474
00:20:21,440 --> 00:20:23,060
to that in a second but one thing that

475
00:20:23,060 --> 00:20:25,220
is always tried-and-true is any rest

476
00:20:25,220 --> 00:20:27,860
services can be market as an API and you

477
00:20:27,860 --> 00:20:29,090
can sell it to customers that's a

478
00:20:29,090 --> 00:20:30,740
universal truth if you have a rest

479
00:20:30,740 --> 00:20:33,140
service market it as an API and sell it

480
00:20:33,140 --> 00:20:37,580
to your customers but I digress so when

481
00:20:37,580 --> 00:20:40,400
we talk about statelessness let's dig

482
00:20:40,400 --> 00:20:42,530
into that a little bit further so the

483
00:20:42,530 --> 00:20:47,750
HTTP protocol is stateless so when we

484
00:20:47,750 --> 00:20:50,720
talk about rest being a

485
00:20:50,720 --> 00:20:53,000
you know higher up in the the the model

486
00:20:53,000 --> 00:20:54,679
it's a little bit interesting that we're

487
00:20:54,679 --> 00:20:59,990
layering a stateless service on top of a

488
00:20:59,990 --> 00:21:02,390
stateless protocol right where does the

489
00:21:02,390 --> 00:21:04,220
state come into play here or should it

490
00:21:04,220 --> 00:21:06,919
not well if we don't have state things

491
00:21:06,919 --> 00:21:08,600
kind of tend to break on how our users

492
00:21:08,600 --> 00:21:11,780
use the web and in today's standards and

493
00:21:11,780 --> 00:21:14,240
what I mean by that is people basically

494
00:21:14,240 --> 00:21:16,090
have created these sidesteps around

495
00:21:16,090 --> 00:21:20,419
stateful experiences so you have things

496
00:21:20,419 --> 00:21:24,620
like client side sessions client side

497
00:21:24,620 --> 00:21:26,870
storage which basically give you pseudo

498
00:21:26,870 --> 00:21:29,440
stateless experiences but what about

499
00:21:29,440 --> 00:21:31,669
authorization headers right

500
00:21:31,669 --> 00:21:34,250
Oh auth tokens bearer off etc that's

501
00:21:34,250 --> 00:21:36,080
still a state if you're passing that

502
00:21:36,080 --> 00:21:37,760
information you're still mapping that on

503
00:21:37,760 --> 00:21:39,890
the backend for authentication and

504
00:21:39,890 --> 00:21:41,840
authorization so you can call it

505
00:21:41,840 --> 00:21:42,919
stateless but at the end of the day

506
00:21:42,919 --> 00:21:46,010
that's still stateful in some manner and

507
00:21:46,010 --> 00:21:49,039
if we don't how do we were on the same

508
00:21:49,039 --> 00:21:50,570
lines how do we revoke in the

509
00:21:50,570 --> 00:21:52,100
circumstance of compromise so if you are

510
00:21:52,100 --> 00:21:55,760
using a state a client-side session what

511
00:21:55,760 --> 00:21:59,059
happens if someone steals the users

512
00:21:59,059 --> 00:22:01,309
client-side session or compromises the

513
00:22:01,309 --> 00:22:05,150
server storage of the identifiers and

514
00:22:05,150 --> 00:22:06,950
then the other thing is can our users

515
00:22:06,950 --> 00:22:09,799
log out right if you you client-side

516
00:22:09,799 --> 00:22:12,710
sessions do you know what the most the

517
00:22:12,710 --> 00:22:15,020
biggest way that our applications are

518
00:22:15,020 --> 00:22:16,789
implementing log out with client-side

519
00:22:16,789 --> 00:22:22,370
sessions throw it out they just delete

520
00:22:22,370 --> 00:22:24,559
the cookie or the header or the jot or

521
00:22:24,559 --> 00:22:25,760
whatever the case is they just delete it

522
00:22:25,760 --> 00:22:27,950
that's not logout it's just deletion

523
00:22:27,950 --> 00:22:29,929
what happens if there's a network error

524
00:22:29,929 --> 00:22:32,480
or what happens if someone thinks

525
00:22:32,480 --> 00:22:34,190
they're logged out but someone had

526
00:22:34,190 --> 00:22:35,600
already grabbed that token via

527
00:22:35,600 --> 00:22:40,059
man-in-the-middle or local exploit and

528
00:22:40,059 --> 00:22:42,140
now the user thinks they're logged out

529
00:22:42,140 --> 00:22:43,400
but someone still has a valid session

530
00:22:43,400 --> 00:22:45,440
right this is this is like inverse I can

531
00:22:45,440 --> 00:22:48,909
see you but you can't see me I like

532
00:22:50,960 --> 00:22:56,070
and and if you say a JWT or George JSON

533
00:22:56,070 --> 00:22:58,710
web token is the answer to this I don't

534
00:22:58,710 --> 00:23:00,570
want to hear it don't we're not gonna

535
00:23:00,570 --> 00:23:02,010
have this discussion I'm not a fan of

536
00:23:02,010 --> 00:23:04,710
JWT as an answer to statelessness with

537
00:23:04,710 --> 00:23:06,480
rest services so we're just gonna go

538
00:23:06,480 --> 00:23:10,170
over that right now all right so again

539
00:23:10,170 --> 00:23:12,630
I've spit a lot at you so far I talked

540
00:23:12,630 --> 00:23:14,370
to you about monolithic versus micro

541
00:23:14,370 --> 00:23:16,950
services and why restau is so prevalent

542
00:23:16,950 --> 00:23:19,560
in our environments today and how

543
00:23:19,560 --> 00:23:21,090
they've kind of risen up then I talked

544
00:23:21,090 --> 00:23:23,370
took you on a history lesson of where

545
00:23:23,370 --> 00:23:25,230
rest came from and how it's being used

546
00:23:25,230 --> 00:23:28,200
and misused today in our environments so

547
00:23:28,200 --> 00:23:30,690
let's discuss security tooling and how

548
00:23:30,690 --> 00:23:32,940
we can test rest services or ascertain

549
00:23:32,940 --> 00:23:35,100
and document and understand how rest

550
00:23:35,100 --> 00:23:38,790
services work but first everyone still

551
00:23:38,790 --> 00:23:40,740
with me I'm talking really fast right

552
00:23:40,740 --> 00:23:47,850
now we're good all right so tooling how

553
00:23:47,850 --> 00:23:52,130
many people have heard of swagger good

554
00:23:52,130 --> 00:23:57,870
postman a little more insomnia one

555
00:23:57,870 --> 00:23:58,680
person

556
00:23:58,680 --> 00:24:02,400
how about link finder awesome one person

557
00:24:02,400 --> 00:24:05,430
as well cool another security centric

558
00:24:05,430 --> 00:24:08,850
tool and we're gonna go into so swagger

559
00:24:08,850 --> 00:24:11,340
Swagger's tagline is design build

560
00:24:11,340 --> 00:24:14,610
document test and standardize who here

561
00:24:14,610 --> 00:24:17,520
thinks design build test and standardize

562
00:24:17,520 --> 00:24:19,620
sounds good thing I want to see

563
00:24:19,620 --> 00:24:24,420
everyone's hands good all right so my

564
00:24:24,420 --> 00:24:27,720
perspective on swagger it's great as a

565
00:24:27,720 --> 00:24:29,220
testing harness because it has a built

566
00:24:29,220 --> 00:24:33,330
in web UI to invoke rest services our

567
00:24:33,330 --> 00:24:37,200
API is in general and the reason why I

568
00:24:37,200 --> 00:24:39,360
say I like the web UI thing is because

569
00:24:39,360 --> 00:24:44,220
from a web hacker or attacker or web

570
00:24:44,220 --> 00:24:46,470
security guy I like things that are in

571
00:24:46,470 --> 00:24:47,730
the browser because I'm already used to

572
00:24:47,730 --> 00:24:48,930
working with things in the browser so

573
00:24:48,930 --> 00:24:51,050
it's not an extra tool if it's not a

574
00:24:51,050 --> 00:24:53,580
installable thick client electron client

575
00:24:53,580 --> 00:24:55,500
etc things seem to work a little bit

576
00:24:55,500 --> 00:24:57,570
better for me so so I dig that I dig

577
00:24:57,570 --> 00:24:59,840
that it's built right into the web

578
00:24:59,840 --> 00:25:01,620
basically you deploy

579
00:25:01,620 --> 00:25:03,690
on your app server and it'll do some

580
00:25:03,690 --> 00:25:05,549
self documenting and stuff so yeah you

581
00:25:05,549 --> 00:25:07,110
can use it on AWS you can use them on

582
00:25:07,110 --> 00:25:09,919
Azure you can use it on Prem internal

583
00:25:09,919 --> 00:25:12,120
completely you know firewalled off from

584
00:25:12,120 --> 00:25:13,940
your external which is which is cool

585
00:25:13,940 --> 00:25:17,010
document documenting api is the rest

586
00:25:17,010 --> 00:25:18,929
services growth is a good thing I think

587
00:25:18,929 --> 00:25:20,159
everyone can agree on that

588
00:25:20,159 --> 00:25:22,289
and swagger will help you do that with

589
00:25:22,289 --> 00:25:24,840
some self documenting features but there

590
00:25:24,840 --> 00:25:26,850
are some quirks with swagger first of

591
00:25:26,850 --> 00:25:28,409
all it's owned and operated by smart

592
00:25:28,409 --> 00:25:30,870
bear and if anyone's ever used who's you

593
00:25:30,870 --> 00:25:34,200
soap UI in here it's hope you II's e to

594
00:25:34,200 --> 00:25:37,200
work with no it's not and you'll see a

595
00:25:37,200 --> 00:25:38,429
little bit of that come through swagger

596
00:25:38,429 --> 00:25:40,950
is awesome that's not non sane but

597
00:25:40,950 --> 00:25:42,980
you'll see a little bit of the soap UI

598
00:25:42,980 --> 00:25:46,080
contextual menus and and and kind of

599
00:25:46,080 --> 00:25:48,149
thought process in the swagger UI

600
00:25:48,149 --> 00:25:50,220
because it's it's brought to you by the

601
00:25:50,220 --> 00:25:54,179
same folks so if we zoom in a little bit

602
00:25:54,179 --> 00:25:56,909
here this is what swagger looks like and

603
00:25:56,909 --> 00:25:57,960
we're probably gonna be a little

604
00:25:57,960 --> 00:26:00,120
pixelated I'm sorry oh yeah you can't

605
00:26:00,120 --> 00:26:03,840
see anything let me read you what the

606
00:26:03,840 --> 00:26:19,950
colors are so the green is a post the

607
00:26:19,950 --> 00:26:23,490
oranges a put the blue is a gifts and

608
00:26:23,490 --> 00:26:24,870
I'll go to the next slide which

609
00:26:24,870 --> 00:26:26,429
unfortunately don't like you're gonna be

610
00:26:26,429 --> 00:26:30,870
able to see but basically how you

611
00:26:30,870 --> 00:26:32,309
interact with you can drill down into

612
00:26:32,309 --> 00:26:34,529
that API endpoint and you actually see

613
00:26:34,529 --> 00:26:36,419
the JSON of what the endpoint is

614
00:26:36,419 --> 00:26:38,700
expecting there right there on your

615
00:26:38,700 --> 00:26:40,740
screen and there's some self documenting

616
00:26:40,740 --> 00:26:44,100
features right so you can say like this

617
00:26:44,100 --> 00:26:46,710
one is pet store swagger Daioh which is

618
00:26:46,710 --> 00:26:48,270
a demo that you can actually go out and

619
00:26:48,270 --> 00:26:50,010
use if you're interested in seeing

620
00:26:50,010 --> 00:26:52,919
swagger and use but this one is for

621
00:26:52,919 --> 00:26:55,529
adding a pet to the backend data store

622
00:26:55,529 --> 00:26:57,690
so it's a post request and the post

623
00:26:57,690 --> 00:27:00,450
request is expecting this data array

624
00:27:00,450 --> 00:27:03,779
which is in in JSON representation so

625
00:27:03,779 --> 00:27:07,080
you as an auditor or a pen tester or a

626
00:27:07,080 --> 00:27:09,090
developer or someone getting just used

627
00:27:09,090 --> 00:27:11,220
to the ropes can go out to the swagger

628
00:27:11,220 --> 00:27:14,039
UI and see exactly what the backend API

629
00:27:14,039 --> 00:27:15,309
is expect

630
00:27:15,309 --> 00:27:17,370
because it's documented in the the

631
00:27:17,370 --> 00:27:21,179
swagger UI so swagger is pretty cool

632
00:27:21,179 --> 00:27:23,769
there's also a postman which some of you

633
00:27:23,769 --> 00:27:25,779
were more familiar with postman post

634
00:27:25,779 --> 00:27:28,179
man's tagline is post me ins tools

635
00:27:28,179 --> 00:27:30,850
support every stage of the API lifecycle

636
00:27:30,850 --> 00:27:32,919
we have a lot of buzzwords there I think

637
00:27:32,919 --> 00:27:34,450
I think we're on the right track right

638
00:27:34,450 --> 00:27:36,220
so what can you do with postman

639
00:27:36,220 --> 00:27:38,049
they have collections which is very

640
00:27:38,049 --> 00:27:42,509
similar to your swagger documentation

641
00:27:42,509 --> 00:27:45,509
can invoke calls document calls etc

642
00:27:45,509 --> 00:27:49,570
there's workspaces so workspaces is and

643
00:27:49,570 --> 00:27:51,159
this is their term I didn't come up with

644
00:27:51,159 --> 00:27:52,809
is that I wanna hear groans workspaces

645
00:27:52,809 --> 00:27:57,129
is an a de anyone want to guess a de

646
00:27:57,129 --> 00:28:04,509
what's the same for say louder sorry API

647
00:28:04,509 --> 00:28:06,789
development environment IDs weren't

648
00:28:06,789 --> 00:28:09,940
enough guys we're on a DES now right so

649
00:28:09,940 --> 00:28:11,710
yeah it's an integrated workspace where

650
00:28:11,710 --> 00:28:13,269
you can actually deploy code directly

651
00:28:13,269 --> 00:28:16,450
from your postman interface of course

652
00:28:16,450 --> 00:28:18,820
there's a hooks and and-and-and docker

653
00:28:18,820 --> 00:28:20,470
and and whatever buzzword you want to

654
00:28:20,470 --> 00:28:22,840
use right in that will make it easier to

655
00:28:22,840 --> 00:28:24,039
deploy but that is I mean that's a

656
00:28:24,039 --> 00:28:24,970
pretty cool thing but could they just

657
00:28:24,970 --> 00:28:27,940
call it an IDE and stop there and

658
00:28:27,940 --> 00:28:29,710
there's also tooling buildings you can

659
00:28:29,710 --> 00:28:31,899
do like load tests unit tests

660
00:28:31,899 --> 00:28:34,990
integration tests some security testing

661
00:28:34,990 --> 00:28:38,190
which will maybe dive into a little bit

662
00:28:38,190 --> 00:28:42,419
so my POV on postman you're interested

663
00:28:42,419 --> 00:28:46,090
postman is a thick client in the form of

664
00:28:46,090 --> 00:28:47,710
electron app who here is familiar with

665
00:28:47,710 --> 00:28:51,460
electron applications so like for people

666
00:28:51,460 --> 00:28:55,139
again I must like the number four so

667
00:28:55,139 --> 00:28:57,909
electron apps are basically built on the

668
00:28:57,909 --> 00:29:00,340
chromium engine who here uses Chrome

669
00:29:00,340 --> 00:29:04,059
browser a lot of people what's one of

670
00:29:04,059 --> 00:29:06,369
the biggest drawbacks to using chrome

671
00:29:06,369 --> 00:29:09,610
versus some of the other browsers so you

672
00:29:09,610 --> 00:29:11,619
get great security renders really

673
00:29:11,619 --> 00:29:14,110
quickly they have a good v8 to

674
00:29:14,110 --> 00:29:15,730
JavaScript engine what's like the one

675
00:29:15,730 --> 00:29:18,539
drawback of using chrome over the others

676
00:29:18,539 --> 00:29:23,230
memory memory so the problem with

677
00:29:23,230 --> 00:29:26,259
electron is it also uses a lot of memory

678
00:29:26,259 --> 00:29:28,470
so when you

679
00:29:28,470 --> 00:29:34,740
using say chrome and slack and postman

680
00:29:34,740 --> 00:29:39,600
and Reich and whatever other electron

681
00:29:39,600 --> 00:29:42,300
apps by by Graham right this thing only

682
00:29:42,300 --> 00:29:44,730
can do 16 gigs of RAM and I'm pegged

683
00:29:44,730 --> 00:29:46,830
already just using like four tools so

684
00:29:46,830 --> 00:29:48,540
it's interesting they're all there is a

685
00:29:48,540 --> 00:29:50,040
browser plugin but I think that's

686
00:29:50,040 --> 00:29:51,810
deprecated I don't think they're gonna

687
00:29:51,810 --> 00:29:53,640
continue development from the postman

688
00:29:53,640 --> 00:29:56,280
and on on the browser plugin so that's

689
00:29:56,280 --> 00:29:58,470
it's not deployed on the server it's a

690
00:29:58,470 --> 00:29:59,940
local client that you use so that's

691
00:29:59,940 --> 00:30:01,790
maybe a drawback

692
00:30:01,790 --> 00:30:03,590
[Music]

693
00:30:03,590 --> 00:30:06,990
so collections again our documentation

694
00:30:06,990 --> 00:30:09,000
built with with harnesses very similar

695
00:30:09,000 --> 00:30:11,490
to the to the swagger UI perspective and

696
00:30:11,490 --> 00:30:13,710
again documentation is good I don't care

697
00:30:13,710 --> 00:30:15,480
who you are if you're a developer if

698
00:30:15,480 --> 00:30:17,340
you're a security person if you're a C

699
00:30:17,340 --> 00:30:20,430
so if you're a CEO if someone comes to

700
00:30:20,430 --> 00:30:21,780
you and say hey look I've documented

701
00:30:21,780 --> 00:30:23,790
this thing to death it's really good I'm

702
00:30:23,790 --> 00:30:25,320
going to applaud that person right

703
00:30:25,320 --> 00:30:27,420
documentation is awesome so having build

704
00:30:27,420 --> 00:30:30,780
and documentation is is great but the

705
00:30:30,780 --> 00:30:32,340
one thing that's interesting with

706
00:30:32,340 --> 00:30:35,730
postman is there's tons of options tons

707
00:30:35,730 --> 00:30:37,710
of configurations which makes the

708
00:30:37,710 --> 00:30:39,090
learning curve a little bit higher as

709
00:30:39,090 --> 00:30:41,520
well as it can be a little bit tricky to

710
00:30:41,520 --> 00:30:44,460
proxy if you've never proxied traffic

711
00:30:44,460 --> 00:30:47,280
from an electron app before or I'm sorry

712
00:30:47,280 --> 00:30:49,560
from postman directly before it takes a

713
00:30:49,560 --> 00:30:51,300
little bit of intuition to get set up

714
00:30:51,300 --> 00:30:53,190
and reading the docs and adding this and

715
00:30:53,190 --> 00:30:54,720
changing environmental variables here

716
00:30:54,720 --> 00:30:58,380
etc etc so sometimes it's easier just to

717
00:30:58,380 --> 00:31:00,810
proxy the whole damn thing just feed the

718
00:31:00,810 --> 00:31:05,820
post me an app a command line line flag

719
00:31:05,820 --> 00:31:08,190
when you enter into postman and you can

720
00:31:08,190 --> 00:31:10,710
just proxy the whole app again goodbye

721
00:31:10,710 --> 00:31:12,480
Ram right it's the electron app so

722
00:31:12,480 --> 00:31:16,770
that's my two cents on postman you're

723
00:31:16,770 --> 00:31:19,160
not gonna be home this is like abstract

724
00:31:19,160 --> 00:31:21,210
representation of what postman looks

725
00:31:21,210 --> 00:31:25,470
like but the idea here is you have your

726
00:31:25,470 --> 00:31:27,180
operations on on the left there write

727
00:31:27,180 --> 00:31:30,090
your API documentation in the middle

728
00:31:30,090 --> 00:31:32,940
here you have the actual request so

729
00:31:32,940 --> 00:31:36,030
where my mouse is here you have the HTTP

730
00:31:36,030 --> 00:31:39,570
verb get and then here is the URI path

731
00:31:39,570 --> 00:31:41,880
and then down here is the actual bar

732
00:31:41,880 --> 00:31:44,220
body of the JSON method or the JSON

733
00:31:44,220 --> 00:31:46,620
representation that you're sending etc

734
00:31:46,620 --> 00:31:48,300
if you're interested in trying out

735
00:31:48,300 --> 00:31:50,520
postman either in a security context or

736
00:31:50,520 --> 00:31:53,220
maybe a business context etc just go to

737
00:31:53,220 --> 00:31:56,130
get postman com download the client and

738
00:31:56,130 --> 00:32:01,440
it has built in demo endpoints that you

739
00:32:01,440 --> 00:32:03,750
can play with and start to understand an

740
00:32:03,750 --> 00:32:04,890
ass chain just don't hack those

741
00:32:04,890 --> 00:32:07,560
endpoints the same with the the pet

742
00:32:07,560 --> 00:32:08,340
store

743
00:32:08,340 --> 00:32:10,200
swagger thing like I don't own those I'm

744
00:32:10,200 --> 00:32:11,520
not giving you permission to hack them

745
00:32:11,520 --> 00:32:16,140
so just my word of caution so the next

746
00:32:16,140 --> 00:32:20,970
one is insomnia so insomnia is tag line

747
00:32:20,970 --> 00:32:24,140
debug api's like a human not a robot

748
00:32:24,140 --> 00:32:26,610
well I'm not a robot so this is already

749
00:32:26,610 --> 00:32:29,640
sound sounded kind of good in all

750
00:32:29,640 --> 00:32:31,530
honesty similar feature set the postman

751
00:32:31,530 --> 00:32:33,510
collections it just doesn't have the ad

752
00:32:33,510 --> 00:32:36,930
II and tools built into it it's another

753
00:32:36,930 --> 00:32:39,810
thick client electron app but honestly

754
00:32:39,810 --> 00:32:42,210
it just feels lighter it's it's takes

755
00:32:42,210 --> 00:32:45,000
less resources it's open source so if

756
00:32:45,000 --> 00:32:46,560
you're one of those folks and you enjoy

757
00:32:46,560 --> 00:32:48,360
open source software like I do that's

758
00:32:48,360 --> 00:32:50,010
always a good thing

759
00:32:50,010 --> 00:32:52,890
that's the github link up there it has a

760
00:32:52,890 --> 00:32:54,720
slightly a counter intuitive interface

761
00:32:54,720 --> 00:32:57,960
compared to swagger UI and and a postman

762
00:32:57,960 --> 00:33:00,420
but how many of in here have used burp

763
00:33:00,420 --> 00:33:01,010
suite

764
00:33:01,010 --> 00:33:03,510
so about half awesome how many of you

765
00:33:03,510 --> 00:33:06,810
here use app a little bit less how many

766
00:33:06,810 --> 00:33:08,460
people can switch seamlessly between

767
00:33:08,460 --> 00:33:12,500
burp suite and zap nobody one I don't

768
00:33:12,500 --> 00:33:15,030
use them both all right me I'm like

769
00:33:15,030 --> 00:33:17,790
where do I set this said I don't know

770
00:33:17,790 --> 00:33:19,200
what I'm looking at is this even English

771
00:33:19,200 --> 00:33:21,330
right so I think it's just a tool thing

772
00:33:21,330 --> 00:33:23,430
once you get used to using insomnia you

773
00:33:23,430 --> 00:33:26,250
can probably transition between postman

774
00:33:26,250 --> 00:33:27,840
and swagger and insomnia pretty

775
00:33:27,840 --> 00:33:29,700
seamlessly but you having trouble ask

776
00:33:29,700 --> 00:33:31,110
this guy he just can switch you eyes

777
00:33:31,110 --> 00:33:36,480
like like King okay cool so those are

778
00:33:36,480 --> 00:33:40,020
all when you have API endpoints that are

779
00:33:40,020 --> 00:33:42,720
documented in a way that you can use an

780
00:33:42,720 --> 00:33:46,350
interface to then interact but what if

781
00:33:46,350 --> 00:33:50,040
you are testing an application or tasked

782
00:33:50,040 --> 00:33:52,860
with documenting an internal API that

783
00:33:52,860 --> 00:33:54,060
maybe you don't have

784
00:33:54,060 --> 00:33:55,770
source code for or maybe you don't have

785
00:33:55,770 --> 00:33:57,810
the chops to review source code to find

786
00:33:57,810 --> 00:34:01,470
the API influence or what if you're on a

787
00:34:01,470 --> 00:34:03,180
penetration test or you're doing bug

788
00:34:03,180 --> 00:34:05,430
bounties and you want to be able to find

789
00:34:05,430 --> 00:34:08,900
all the API endpoints of a certain app

790
00:34:08,900 --> 00:34:11,280
that's where link fire comes in I love

791
00:34:11,280 --> 00:34:12,770
this tool it's written in Python

792
00:34:12,770 --> 00:34:15,030
basically what it does is you feed it a

793
00:34:15,030 --> 00:34:17,699
JavaScript file or a burp State you can

794
00:34:17,699 --> 00:34:19,380
feed it a burp State and it will

795
00:34:19,380 --> 00:34:21,620
actually go out parse the JavaScript

796
00:34:21,620 --> 00:34:25,170
beautify it unmet cetera find all your

797
00:34:25,170 --> 00:34:27,540
API endpoints and then give you a nice

798
00:34:27,540 --> 00:34:30,000
output of all the API endpoints where

799
00:34:30,000 --> 00:34:32,040
then you can then go and invoke now it

800
00:34:32,040 --> 00:34:33,960
won't give you the actual JSON pretty

801
00:34:33,960 --> 00:34:37,380
print of what the endpoint is expecting

802
00:34:37,380 --> 00:34:39,929
but it's really good for this time for

803
00:34:39,929 --> 00:34:41,370
you may not have code but you want to

804
00:34:41,370 --> 00:34:45,540
find API endpoints to then test like I

805
00:34:45,540 --> 00:34:48,030
said as JJ JavaScript beautifier on

806
00:34:48,030 --> 00:34:50,340
minify you can do reg X's and search

807
00:34:50,340 --> 00:34:52,350
trains etc and I'm gonna show you a demo

808
00:34:52,350 --> 00:35:04,650
but okay so yeah that's actually not

809
00:35:04,650 --> 00:35:07,830
that okay so what I had here is the tool

810
00:35:07,830 --> 00:35:09,510
like I said it's written in Python link

811
00:35:09,510 --> 00:35:11,670
finder dot PI so Python link pandered

812
00:35:11,670 --> 00:35:16,620
link fine about pi - i is feeding in a

813
00:35:16,620 --> 00:35:18,510
javascript file in which i want to parse

814
00:35:18,510 --> 00:35:22,380
- oh is give me an output of an HTML

815
00:35:22,380 --> 00:35:24,300
format so what this tool is going to do

816
00:35:24,300 --> 00:35:25,800
it's gonna go out to a JavaScript

817
00:35:25,800 --> 00:35:29,130
endpoint find all the api's ARBs our

818
00:35:29,130 --> 00:35:30,780
javascript file find all the API

819
00:35:30,780 --> 00:35:33,180
endpoints try to parse them out and then

820
00:35:33,180 --> 00:35:34,920
give them them back to me in an HTML

821
00:35:34,920 --> 00:35:36,240
file that I can actually do something

822
00:35:36,240 --> 00:35:41,460
with so let's see this in action am i

823
00:35:41,460 --> 00:35:47,220
not connected okay well that's not gonna

824
00:35:47,220 --> 00:35:50,390
be good I have a backup

825
00:35:51,700 --> 00:35:55,810
I think I'm just not connected to Wi-Fi

826
00:35:55,810 --> 00:36:00,490
but so this is what the output looks

827
00:36:00,490 --> 00:36:00,940
like

828
00:36:00,940 --> 00:36:05,020
so anyone here heard of juice shop like

829
00:36:05,020 --> 00:36:06,339
three people so juice shop is a

830
00:36:06,339 --> 00:36:09,250
vulnerable web application by a wasp to

831
00:36:09,250 --> 00:36:11,920
have fun with this is my instance of

832
00:36:11,920 --> 00:36:13,240
juice shop don't hack I mean it is

833
00:36:13,240 --> 00:36:14,589
available out there but don't hack it

834
00:36:14,589 --> 00:36:18,280
because I could just nuke the instance I

835
00:36:18,280 --> 00:36:22,329
guess but anyway juice shop is written

836
00:36:22,329 --> 00:36:24,970
in client-side JavaScript and has its

837
00:36:24,970 --> 00:36:27,640
end point called juice shop min J yes

838
00:36:27,640 --> 00:36:28,990
and this is the whole interface is

839
00:36:28,990 --> 00:36:30,790
everything you interface with on the

840
00:36:30,790 --> 00:36:32,980
client side is defined in this

841
00:36:32,980 --> 00:36:35,770
javascript file because remember if you

842
00:36:35,770 --> 00:36:39,130
are using a web app to interface with an

843
00:36:39,130 --> 00:36:41,500
application you have to know where to

844
00:36:41,500 --> 00:36:44,260
send requests to right you can't just

845
00:36:44,260 --> 00:36:46,119
say like oh check my balance and the

846
00:36:46,119 --> 00:36:47,859
browser comes back to you like what's

847
00:36:47,859 --> 00:36:49,869
the end point for balance checking right

848
00:36:49,869 --> 00:36:51,130
I don't know I don't even know so it has

849
00:36:51,130 --> 00:36:53,020
to be defined somewhere if you're not

850
00:36:53,020 --> 00:36:54,820
using like a mobile app or a thick

851
00:36:54,820 --> 00:36:57,010
client app that comes with those things

852
00:36:57,010 --> 00:36:58,869
those registers already are predefined

853
00:36:58,869 --> 00:37:01,810
so web apps what they normally do is use

854
00:37:01,810 --> 00:37:03,609
something like JavaScript to represent

855
00:37:03,609 --> 00:37:05,440
this information it's parsed on the

856
00:37:05,440 --> 00:37:06,010
client-side

857
00:37:06,010 --> 00:37:07,329
and then all of a sudden the browser

858
00:37:07,329 --> 00:37:08,800
knows when I want to request a transfer

859
00:37:08,800 --> 00:37:10,900
this is the endpoint that I want to hit

860
00:37:10,900 --> 00:37:14,200
it with problem is it's usually minified

861
00:37:14,200 --> 00:37:16,180
and crazy and you can't find this so

862
00:37:16,180 --> 00:37:17,980
that's what tool does so if I go through

863
00:37:17,980 --> 00:37:20,880
here there's an API endpoint that is

864
00:37:20,880 --> 00:37:27,670
login or oo auth or baskets QR code etc

865
00:37:27,670 --> 00:37:30,790
right this took all that minified

866
00:37:30,790 --> 00:37:33,790
javascript made it nice parse it out

867
00:37:33,790 --> 00:37:35,230
gave me something that I can then go

868
00:37:35,230 --> 00:37:36,670
test with and now what it's the first

869
00:37:36,670 --> 00:37:37,869
thing I'm gonna do I'm gonna go to every

870
00:37:37,869 --> 00:37:39,460
one of those API endpoints and see if I

871
00:37:39,460 --> 00:37:39,990
can hit it

872
00:37:39,990 --> 00:37:42,849
unauthenticated or see what kind of data

873
00:37:42,849 --> 00:37:44,589
it spits back or maybe cause a stack

874
00:37:44,589 --> 00:37:45,849
trace error message and send it some

875
00:37:45,849 --> 00:37:48,460
some fuzz to info right so this is

876
00:37:48,460 --> 00:37:50,440
really cool if you are interested in

877
00:37:50,440 --> 00:37:52,390
testing api's but maybe don't have the

878
00:37:52,390 --> 00:37:54,010
backend code for something like postman

879
00:37:54,010 --> 00:37:58,140
or swagger or insomnia

880
00:38:00,349 --> 00:38:07,819
I can get my slides back here we go all

881
00:38:07,819 --> 00:38:13,519
right so when we talk about security

882
00:38:13,519 --> 00:38:15,259
concerns I talked about tooling and how

883
00:38:15,259 --> 00:38:16,460
we can start testing some of these

884
00:38:16,460 --> 00:38:18,140
invoking these methods using these

885
00:38:18,140 --> 00:38:20,690
handlers but what are actual concerns

886
00:38:20,690 --> 00:38:23,900
when we talk about rest well I hope this

887
00:38:23,900 --> 00:38:25,489
isn't a big whomp-whomp for everyone out

888
00:38:25,489 --> 00:38:28,099
there but the same web stuff that your

889
00:38:28,099 --> 00:38:31,579
use of testing much applies to rest the

890
00:38:31,579 --> 00:38:33,799
entire top ten but there are also some

891
00:38:33,799 --> 00:38:36,319
specifics right so like gray and black

892
00:38:36,319 --> 00:38:38,359
box already talked about link finder you

893
00:38:38,359 --> 00:38:41,089
can also use like API manuals user

894
00:38:41,089 --> 00:38:44,989
manuals OSINT google dorks etc to try to

895
00:38:44,989 --> 00:38:48,079
find rest API endpoints because again

896
00:38:48,079 --> 00:38:51,920
rest services aren't usually defined in

897
00:38:51,920 --> 00:38:54,019
one like HTML doc they're usually pull

898
00:38:54,019 --> 00:38:56,420
down in parsed separately so sometimes

899
00:38:56,420 --> 00:38:58,789
just finding the AAP API endpoints to

900
00:38:58,789 --> 00:39:00,589
hit is a challenge when you're testing

901
00:39:00,589 --> 00:39:03,499
rest in addition some tooling doesn't

902
00:39:03,499 --> 00:39:05,180
take advantage of pass style parameter

903
00:39:05,180 --> 00:39:07,640
manipulation as rest does they're

904
00:39:07,640 --> 00:39:09,979
basically used to looking at you know

905
00:39:09,979 --> 00:39:12,680
standard gets posts the path isn't

906
00:39:12,680 --> 00:39:15,680
changing much maybe add a one path

907
00:39:15,680 --> 00:39:17,630
parameter on and calling add a it's not

908
00:39:17,630 --> 00:39:19,329
actually going through the tree and

909
00:39:19,329 --> 00:39:22,779
going in and changing maybe user one

910
00:39:22,779 --> 00:39:26,450
slash account balance and it's not going

911
00:39:26,450 --> 00:39:28,549
back in the past and saying user to user

912
00:39:28,549 --> 00:39:31,249
three account balance etc so just

913
00:39:31,249 --> 00:39:32,749
something to keep keep an eye on as far

914
00:39:32,749 --> 00:39:35,059
as your tools if there are properly set

915
00:39:35,059 --> 00:39:37,849
for path size parameter manipulations

916
00:39:37,849 --> 00:39:40,519
and then also something big and rest is

917
00:39:40,519 --> 00:39:42,979
this idea of using signatures for anti

918
00:39:42,979 --> 00:39:45,890
tampering as signatures can be a bear so

919
00:39:45,890 --> 00:39:47,450
that's another thing that you might have

920
00:39:47,450 --> 00:39:49,849
to think of when you're doing security

921
00:39:49,849 --> 00:39:53,450
testing specifically the rest so real

922
00:39:53,450 --> 00:39:56,890
quick injection broken authentication

923
00:39:56,890 --> 00:40:00,049
sensitive data exposure XML entity

924
00:40:00,049 --> 00:40:02,210
injection remember rest bodies can be

925
00:40:02,210 --> 00:40:04,670
XML if you're parsing XML you're

926
00:40:04,670 --> 00:40:07,279
vulnerable to XML entity injection

927
00:40:07,279 --> 00:40:09,130
possibly depending on your configuration

928
00:40:09,130 --> 00:40:11,180
broken on access controls security

929
00:40:11,180 --> 00:40:13,910
msconfig cross-site scripting

930
00:40:13,910 --> 00:40:17,830
depending on your content type DC R

931
00:40:17,830 --> 00:40:20,870
using bonus with known vulnerabilities

932
00:40:20,870 --> 00:40:22,250
and insufficient logging and monitoring

933
00:40:22,250 --> 00:40:24,350
I know I just literally recited to you

934
00:40:24,350 --> 00:40:27,710
the 2017 o Oz top 10 list but the idea

935
00:40:27,710 --> 00:40:30,170
is all of those apply to rest services

936
00:40:30,170 --> 00:40:31,940
you're not getting out of anything

937
00:40:31,940 --> 00:40:33,530
there might be some some out-of-the-box

938
00:40:33,530 --> 00:40:34,880
configurations that make you less

939
00:40:34,880 --> 00:40:37,010
susceptible to some of these like maybe

940
00:40:37,010 --> 00:40:39,980
using text plane or content tough JSON

941
00:40:39,980 --> 00:40:42,950
might help you from cross-site scripting

942
00:40:42,950 --> 00:40:45,380
concerns but if you then take that data

943
00:40:45,380 --> 00:40:48,200
and drop it into HTML somewhere you

944
00:40:48,200 --> 00:40:49,400
still could have some cross site

945
00:40:49,400 --> 00:40:51,770
scripting concerns right so be cognizant

946
00:40:51,770 --> 00:40:53,180
of all the OAuth top 10 stuff when

947
00:40:53,180 --> 00:40:55,990
you're doing security testing for wrist

948
00:40:55,990 --> 00:40:59,560
I'm flying here everyone still with me

949
00:40:59,560 --> 00:41:02,810
maybe by me if you got caught up on

950
00:41:02,810 --> 00:41:04,940
something is an open bar I don't know

951
00:41:04,940 --> 00:41:07,400
open bar open bar so just go get me a

952
00:41:07,400 --> 00:41:08,870
drink bring it over and I'll I'll go

953
00:41:08,870 --> 00:41:13,220
back over some of this stuff how much

954
00:41:13,220 --> 00:41:18,770
time you have oh oh cool alright so you

955
00:41:18,770 --> 00:41:20,540
guys I don't if you'll be able to see it

956
00:41:20,540 --> 00:41:22,430
but I'd like to do a demo for you if you

957
00:41:22,430 --> 00:41:26,720
guys are cool with that cool so this is

958
00:41:26,720 --> 00:41:27,410
a wasp

959
00:41:27,410 --> 00:41:31,100
juice shop again I I kind of alluded to

960
00:41:31,100 --> 00:41:33,950
this so wasps juice shop is a JavaScript

961
00:41:33,950 --> 00:41:36,020
application that has back-end rest

962
00:41:36,020 --> 00:41:39,320
services it is purposely vulnerable but

963
00:41:39,320 --> 00:41:40,910
the cool thing about juice shop is it's

964
00:41:40,910 --> 00:41:42,860
really easy to deploy so if you want to

965
00:41:42,860 --> 00:41:45,230
like go out and spin up a local ants on

966
00:41:45,230 --> 00:41:47,000
docker there's already docker hub in

967
00:41:47,000 --> 00:41:49,730
images of juice shop if you deploy to

968
00:41:49,730 --> 00:41:52,280
Heroku you literally create an account

969
00:41:52,280 --> 00:41:54,800
in Heroku click the publish and you get

970
00:41:54,800 --> 00:41:56,360
an instance where you can just test it

971
00:41:56,360 --> 00:41:58,310
and Heroku is completely okay with this

972
00:41:58,310 --> 00:42:00,680
as long as you're not doing denial of

973
00:42:00,680 --> 00:42:02,840
service attacks or anything else that

974
00:42:02,840 --> 00:42:04,550
could cause damage to their underlying

975
00:42:04,550 --> 00:42:07,880
containers so if and this is another

976
00:42:07,880 --> 00:42:09,770
plug for a wasp Pittsburgh if you're

977
00:42:09,770 --> 00:42:11,390
interested in doing this a wasp

978
00:42:11,390 --> 00:42:14,090
Pittsburgh is having a web app hacking

979
00:42:14,090 --> 00:42:17,210
night next month it's June 18th I bullet

980
00:42:17,210 --> 00:42:19,250
or July 18th excuse me and we're

981
00:42:19,250 --> 00:42:21,480
actually gonna be hacking juice shop

982
00:42:21,480 --> 00:42:22,740
and having some funds if you're

983
00:42:22,740 --> 00:42:24,420
interested to come out and I'll show you

984
00:42:24,420 --> 00:42:26,150
how to how to do some of this stuff but

985
00:42:26,150 --> 00:42:28,260
anyway so this is an instance of Jew

986
00:42:28,260 --> 00:42:30,420
shop if I scroll down through here you

987
00:42:30,420 --> 00:42:32,130
can see like there's all kinds of fake

988
00:42:32,130 --> 00:42:34,530
products and all kinds of stuff you can

989
00:42:34,530 --> 00:42:36,660
click on it and get some information I

990
00:42:36,660 --> 00:42:38,250
think my internet dropped off so you're

991
00:42:38,250 --> 00:42:40,619
not seeing everything here let me see if

992
00:42:40,619 --> 00:42:46,070
I can commit the unplug for one second

993
00:42:51,890 --> 00:42:55,880
I'm not I'm not joining your shady my Fi

994
00:42:55,880 --> 00:42:58,140
he had it all set up like ready like

995
00:42:58,140 --> 00:43:01,530
here's my my fight no I appreciate just

996
00:43:01,530 --> 00:43:03,570
giving you a hard time no I have I

997
00:43:03,570 --> 00:43:06,359
actually had my hotspot on but one

998
00:43:06,359 --> 00:43:08,839
second

999
00:43:11,390 --> 00:43:12,710
you guys are all like I should have gone

1000
00:43:12,710 --> 00:43:15,079
to Brian's talk he didn't have problems

1001
00:43:15,079 --> 00:43:23,839
with Wi-Fi maybe I might be joined

1002
00:43:23,839 --> 00:43:27,578
you're my fight here in a second oh

1003
00:43:30,940 --> 00:43:37,640
paper minute I see like everyone else is

1004
00:43:37,640 --> 00:43:42,559
my face here except for my n phone there

1005
00:43:42,559 --> 00:43:45,880
it is okay

1006
00:43:55,120 --> 00:43:57,640
we back we're back alright let's test it

1007
00:43:57,640 --> 00:43:59,940
out real quick

1008
00:44:01,350 --> 00:44:03,380
we're not back

1009
00:44:03,380 --> 00:44:06,669
[Music]

1010
00:44:19,770 --> 00:44:22,700
let's try in

1011
00:44:27,520 --> 00:44:30,940
demo gods I can show you some stuff with

1012
00:44:30,940 --> 00:44:36,310
that all right well I'm not gonna take

1013
00:44:36,310 --> 00:44:38,110
your time so wow that's doing this I

1014
00:44:38,110 --> 00:44:41,140
already have burp I already parse the

1015
00:44:41,140 --> 00:44:41,680
end point

1016
00:44:41,680 --> 00:44:43,240
I know purpose is gonna be terrible when

1017
00:44:43,240 --> 00:44:45,160
I'm trying to present to you but this is

1018
00:44:45,160 --> 00:44:46,900
the directory structure of juice shop

1019
00:44:46,900 --> 00:44:49,540
and here are the rest API endpoints

1020
00:44:49,540 --> 00:44:52,330
surprise there under the rest directory

1021
00:44:52,330 --> 00:44:55,690
and then you can see admin product user

1022
00:44:55,690 --> 00:44:59,140
etc so if you kind of want an idea of

1023
00:44:59,140 --> 00:45:00,550
what kind of things I would start doing

1024
00:45:00,550 --> 00:45:03,100
with testing rest is I would take one of

1025
00:45:03,100 --> 00:45:05,740
these rest endpoints and send it to

1026
00:45:05,740 --> 00:45:09,880
repeat an open up repeater and oh this

1027
00:45:09,880 --> 00:45:12,390
is lovely

1028
00:45:12,520 --> 00:45:15,910
so you can see here that get rest admin

1029
00:45:15,910 --> 00:45:19,869
application version and this is my host

1030
00:45:19,869 --> 00:45:23,110
header right Cody juice shop and it's a

1031
00:45:23,110 --> 00:45:24,430
get request so there's no there's no

1032
00:45:24,430 --> 00:45:25,690
parameter so what happens is the fight

1033
00:45:25,690 --> 00:45:28,330
it's oh look I am connected okay so we

1034
00:45:28,330 --> 00:45:31,540
have a version 7.3 dot zero which is

1035
00:45:31,540 --> 00:45:33,430
interesting because this is an admin

1036
00:45:33,430 --> 00:45:34,330
endpoint and I'm completely

1037
00:45:34,330 --> 00:45:36,520
unauthenticated so maybe that's my first

1038
00:45:36,520 --> 00:45:38,830
concern right that someone's requesting

1039
00:45:38,830 --> 00:45:41,080
admin API endpoints from a completely

1040
00:45:41,080 --> 00:45:42,460
unauthenticated session and they're able

1041
00:45:42,460 --> 00:45:44,200
to get back version data that could be a

1042
00:45:44,200 --> 00:45:46,960
concern but basically that's what I

1043
00:45:46,960 --> 00:45:48,790
would start to do so I've parse the API

1044
00:45:48,790 --> 00:45:51,880
endpoints one cool thing is there's

1045
00:45:51,880 --> 00:45:54,520
actually a burp extension called swagger

1046
00:45:54,520 --> 00:45:58,060
parser so you can go into swagger parser

1047
00:45:58,060 --> 00:46:05,230
hit the file pull in your your JSON

1048
00:46:05,230 --> 00:46:07,930
swagger file open it up and it actually

1049
00:46:07,930 --> 00:46:09,730
parses the endpoints out of the swagger

1050
00:46:09,730 --> 00:46:12,070
file for you and then you can

1051
00:46:12,070 --> 00:46:13,690
right-click those and send Senate

1052
00:46:13,690 --> 00:46:15,850
repeater and now I can actually use my

1053
00:46:15,850 --> 00:46:17,890
proxy which I'm already used to using

1054
00:46:17,890 --> 00:46:21,100
right whole burp verses app and this and

1055
00:46:21,100 --> 00:46:24,070
that right I live eight hours a day five

1056
00:46:24,070 --> 00:46:25,780
days a week maybe six or seven days a

1057
00:46:25,780 --> 00:46:27,940
week in burp so I'm very familiar with

1058
00:46:27,940 --> 00:46:30,310
using burp so now I just took my swagger

1059
00:46:30,310 --> 00:46:33,760
doc and cool thing is postman you can

1060
00:46:33,760 --> 00:46:36,580
export a swagger doc so either way this

1061
00:46:36,580 --> 00:46:38,770
will work and I just imported into my

1062
00:46:38,770 --> 00:46:40,720
proxy and now I can actually send

1063
00:46:40,720 --> 00:46:41,170
request

1064
00:46:41,170 --> 00:46:43,900
directly from here and you can see here

1065
00:46:43,900 --> 00:46:46,089
Amazon saying that's a bad bad end point

1066
00:46:46,089 --> 00:46:47,980
cuz I didn't put in the params but yeah

1067
00:46:47,980 --> 00:46:49,390
it works it works pretty well it's

1068
00:46:49,390 --> 00:46:52,420
pretty cool but anyway so I would go

1069
00:46:52,420 --> 00:46:54,579
through my normal testing process right

1070
00:46:54,579 --> 00:46:56,589
I would go down that top 10 I'd look for

1071
00:46:56,589 --> 00:46:58,359
broken access controls I'd look for

1072
00:46:58,359 --> 00:47:01,480
caching issues I look for configuration

1073
00:47:01,480 --> 00:47:03,609
issues etc and I would just start going

1074
00:47:03,609 --> 00:47:05,200
down through my testing process once you

1075
00:47:05,200 --> 00:47:08,920
understand the basics of how rest works

1076
00:47:08,920 --> 00:47:12,220
why rest was created some of the

1077
00:47:12,220 --> 00:47:15,309
pitfalls of rest to be completely honest

1078
00:47:15,309 --> 00:47:17,680
the testing part is exactly the same as

1079
00:47:17,680 --> 00:47:19,329
you would normally do if you're a QA

1080
00:47:19,329 --> 00:47:21,609
tester you pretty much QA test it's

1081
00:47:21,609 --> 00:47:23,230
exactly the same just knowing how the

1082
00:47:23,230 --> 00:47:24,790
architecture is set up and how

1083
00:47:24,790 --> 00:47:26,410
parameters were passed and all that good

1084
00:47:26,410 --> 00:47:28,059
stuff now you have the knowledge to go

1085
00:47:28,059 --> 00:47:30,579
out and do your QA testing or if you're

1086
00:47:30,579 --> 00:47:32,799
a pen tester or a security person you go

1087
00:47:32,799 --> 00:47:34,750
through your same testing process you

1088
00:47:34,750 --> 00:47:35,980
just now know a little bit more about

1089
00:47:35,980 --> 00:47:38,230
why restau works the way it does how

1090
00:47:38,230 --> 00:47:39,339
things on the back end might be

1091
00:47:39,339 --> 00:47:40,960
architected and now you can attack

1092
00:47:40,960 --> 00:47:44,020
things a little bit differently so this

1093
00:47:44,020 --> 00:47:45,700
isn't the best setup to do a whole lot

1094
00:47:45,700 --> 00:47:47,079
of demos but hopefully that makes a

1095
00:47:47,079 --> 00:47:48,280
little bit sense and you got a little

1096
00:47:48,280 --> 00:47:49,930
bit of something out of out of the the

1097
00:47:49,930 --> 00:47:55,359
proxy stuff so just to wrap things up we

1098
00:47:55,359 --> 00:47:57,220
went over monolithic service versus

1099
00:47:57,220 --> 00:47:59,230
micro services why micro services are

1100
00:47:59,230 --> 00:48:01,770
making such a big headway and in our

1101
00:48:01,770 --> 00:48:03,940
enterprise's infrastructure today and

1102
00:48:03,940 --> 00:48:06,730
why restau is then so hot right now

1103
00:48:06,730 --> 00:48:08,710
right because rest is easy to implement

1104
00:48:08,710 --> 00:48:10,780
at the micro service level we went over

1105
00:48:10,780 --> 00:48:12,970
rest 101 a fun history of where rest

1106
00:48:12,970 --> 00:48:15,069
came from where it is now some things

1107
00:48:15,069 --> 00:48:17,790
that versus stateful and stateless and

1108
00:48:17,790 --> 00:48:21,040
the the crud method methods and all that

1109
00:48:21,040 --> 00:48:22,690
fun stuff talked about tooling with

1110
00:48:22,690 --> 00:48:24,400
swagger post me and saw me a link finder

1111
00:48:24,400 --> 00:48:26,410
burp extensions everyone's leaving

1112
00:48:26,410 --> 00:48:29,020
security concerns I'll open it up for

1113
00:48:29,020 --> 00:48:30,730
questions oh I'm sorry

1114
00:48:30,730 --> 00:48:34,210
follow-up about the web hacking night my

1115
00:48:34,210 --> 00:48:36,339
slides will be available both on my

1116
00:48:36,339 --> 00:48:38,049
personal blog as well as my company blog

1117
00:48:38,049 --> 00:48:40,780
and vision calm and stop by the lockpick

1118
00:48:40,780 --> 00:48:43,660
village later I bought an IOT thing that

1119
00:48:43,660 --> 00:48:44,920
we're gonna hack and it's gonna be some

1120
00:48:44,920 --> 00:48:46,930
fun so if you're interested in that stop

1121
00:48:46,930 --> 00:48:51,670
by there and n vis I um and

1122
00:48:51,670 --> 00:48:55,390
Visia men the ISI um that's my employer

1123
00:48:55,390 --> 00:48:57,430
but they didn't pay me to say that maybe

1124
00:48:57,430 --> 00:48:58,630
they didn't maybe they paid me to say

1125
00:48:58,630 --> 00:49:02,680
that thanks besides Pittsburgh

1126
00:49:02,680 --> 00:49:04,630
volunteers attendees vendors family and

1127
00:49:04,630 --> 00:49:06,760
you guys without you guys we wouldn't be

1128
00:49:06,760 --> 00:49:08,829
here I wouldn't be here or maybe I would

1129
00:49:08,829 --> 00:49:11,790
okay questions

1130
00:49:11,790 --> 00:49:18,359
[Applause]

1131
00:49:18,359 --> 00:49:23,499
any questions scared ask questions

1132
00:49:23,499 --> 00:49:27,429
alright I'll be around I have I have

1133
00:49:27,429 --> 00:49:29,049
three separate install discs like old

1134
00:49:29,049 --> 00:49:32,140
Windows 3.1 now so that's how you can

1135
00:49:32,140 --> 00:49:34,980
identify me yes question

1136
00:49:34,980 --> 00:49:38,099
[Music]

1137
00:49:40,140 --> 00:49:44,650
so a wasp in general open web

1138
00:49:44,650 --> 00:49:46,979
application security project is

1139
00:49:46,979 --> 00:49:52,209
completely dedicated to resources and

1140
00:49:52,209 --> 00:49:53,679
understanding web application security

1141
00:49:53,679 --> 00:49:55,239
mobile application security and it's

1142
00:49:55,239 --> 00:49:57,390
kind of evolved from there but

1143
00:49:57,390 --> 00:50:00,130
Pittsburgh chapter in general is just a

1144
00:50:00,130 --> 00:50:03,309
complete open meetup I don't require any

1145
00:50:03,309 --> 00:50:06,579
type of dues or membership or anything

1146
00:50:06,579 --> 00:50:09,669
like that there you can be a member to

1147
00:50:09,669 --> 00:50:11,679
the larger OS community and you'll fun

1148
00:50:11,679 --> 00:50:13,449
projects like to shop you'll fund

1149
00:50:13,449 --> 00:50:15,519
projects like the top ten but when it

1150
00:50:15,519 --> 00:50:17,919
comes to OAuth Pittsburgh just go out on

1151
00:50:17,919 --> 00:50:20,829
meetup.com or wass wiki and search for

1152
00:50:20,829 --> 00:50:23,229
Pittsburgh and come out to our events

1153
00:50:23,229 --> 00:50:24,549
you're more than welcome to participate

1154
00:50:24,549 --> 00:50:27,219
you're more than welcome to become my my

1155
00:50:27,219 --> 00:50:28,959
co-lead you're more than welcome to

1156
00:50:28,959 --> 00:50:31,689
present just hit me up there's also a

1157
00:50:31,689 --> 00:50:32,559
wasp

1158
00:50:32,559 --> 00:50:36,489
PGH on twitter so you know look for that

1159
00:50:36,489 --> 00:50:38,019
or I always post the events and stuff

1160
00:50:38,019 --> 00:50:40,679
like that so yeah completely open group

1161
00:50:40,679 --> 00:50:43,359
everyone's welcome and I'd love to have

1162
00:50:43,359 --> 00:50:45,069
more participation like I said meeting

1163
00:50:45,069 --> 00:50:49,239
next thursday and then july 18th is our

1164
00:50:49,239 --> 00:50:52,839
first web app hacking meetup so thank

1165
00:50:52,839 --> 00:50:53,859
you for the question awesome question

1166
00:50:53,859 --> 00:50:59,049
anyone else I talk too fast I'm sorry if

1167
00:50:59,049 --> 00:51:01,809
you see me grab me I'm happy to do demos

1168
00:51:01,809 --> 00:51:04,329
or answer any specific questions but you

1169
00:51:04,329 --> 00:51:07,739
guys are awesome seriously thank you all

1170
00:51:07,760 --> 00:51:13,120
[Applause]

