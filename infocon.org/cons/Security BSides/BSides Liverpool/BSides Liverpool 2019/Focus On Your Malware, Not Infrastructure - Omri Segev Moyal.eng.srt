1
00:00:02,699 --> 00:00:07,950
small opening remarks as well so good

2
00:00:05,430 --> 00:00:09,870
morning besides Liverpool this is the

3
00:00:07,950 --> 00:00:13,110
first visit Liverpool I'm really excited

4
00:00:09,870 --> 00:00:14,998
so first thing I want to have one less

5
00:00:13,110 --> 00:00:17,100
one more round of applause to all the

6
00:00:14,999 --> 00:00:18,990
organizers have really worked hard I've

7
00:00:17,100 --> 00:00:22,280
been in contact with them for like six

8
00:00:18,990 --> 00:00:22,279
months so good work everybody

9
00:00:25,210 --> 00:00:30,420
[Applause]

10
00:00:27,710 --> 00:00:33,030
this type of conferences and gatherings

11
00:00:30,420 --> 00:00:35,010
are a real game-changer being chosen to

12
00:00:33,030 --> 00:00:37,530
open the conference is great honor and

13
00:00:35,010 --> 00:00:40,379
responsibility everything is fresh and

14
00:00:37,530 --> 00:00:42,300
new but also fragile like seed just

15
00:00:40,380 --> 00:00:44,340
starting to grow instead of hacking

16
00:00:42,300 --> 00:00:46,379
wisdom and knowledge sharing how the

17
00:00:44,340 --> 00:00:48,180
event will go today will probably go for

18
00:00:46,380 --> 00:00:50,310
a long time creating a new tradition in

19
00:00:48,180 --> 00:00:52,980
Liverpool of course there are bigger

20
00:00:50,310 --> 00:00:55,260
events like blackhat info second DEFCON

21
00:00:52,980 --> 00:00:58,290
so why do we need besides by doing it

22
00:00:55,260 --> 00:01:00,030
besides in Liverpool beside conference

23
00:00:58,290 --> 00:01:02,760
makes the true difference between the

24
00:01:00,030 --> 00:01:06,750
InfoSec industry and the hacking

25
00:01:02,760 --> 00:01:08,340
community it's about command it's not

26
00:01:06,750 --> 00:01:10,140
about commercial businesses it's about

27
00:01:08,340 --> 00:01:13,110
sharing experience and knowledge and

28
00:01:10,140 --> 00:01:15,210
meeting other actors there is a slippery

29
00:01:13,110 --> 00:01:17,610
path between being an industry and being

30
00:01:15,210 --> 00:01:20,548
a community the difference is what you

31
00:01:17,610 --> 00:01:22,860
the audience the sponsors ask the

32
00:01:20,549 --> 00:01:23,220
speakers and the organizers will make of

33
00:01:22,860 --> 00:01:26,880
it

34
00:01:23,220 --> 00:01:29,190
so go gonna own f-fun laughs drink meet

35
00:01:26,880 --> 00:01:31,320
new people generate new ideas and

36
00:01:29,190 --> 00:01:36,000
project I'll be doing the same with you

37
00:01:31,320 --> 00:01:37,559
probably drinking so I'd get started the

38
00:01:36,000 --> 00:01:39,750
presentation I'm going to show today is

39
00:01:37,560 --> 00:01:43,080
called focus on your malware not

40
00:01:39,750 --> 00:01:45,180
infrastructure I did a little survey on

41
00:01:43,080 --> 00:01:47,490
Twitter amongst my friends researchers

42
00:01:45,180 --> 00:01:49,740
other members of the Security Research

43
00:01:47,490 --> 00:01:52,020
community and I asked them what is the

44
00:01:49,740 --> 00:01:53,699
thing the most challenging for them when

45
00:01:52,020 --> 00:01:56,670
they are developing and building their

46
00:01:53,700 --> 00:01:59,460
security researcher app by far if on

47
00:01:56,670 --> 00:02:01,380
also on the threads and in the survey

48
00:01:59,460 --> 00:02:03,809
itself it was time constraints

49
00:02:01,380 --> 00:02:05,880
everything takes time we don't have that

50
00:02:03,810 --> 00:02:07,710
time and we actually want to go home a

51
00:02:05,880 --> 00:02:10,649
bit early another one a.m. every night

52
00:02:07,710 --> 00:02:14,190
so this talk is about helping solving

53
00:02:10,649 --> 00:02:15,060
that time constraint basically the way

54
00:02:14,190 --> 00:02:16,800
it was there

55
00:02:15,060 --> 00:02:18,930
Genda is we're gonna first look at how

56
00:02:16,800 --> 00:02:21,840
we currently build some modern research

57
00:02:18,930 --> 00:02:24,239
apps we're going to look at introduction

58
00:02:21,840 --> 00:02:26,610
to server less what it is what it is not

59
00:02:24,239 --> 00:02:28,860
what is it good at and what is it bad at

60
00:02:26,610 --> 00:02:31,050
and some of the security considerations

61
00:02:28,860 --> 00:02:32,730
because we are a security conference we

62
00:02:31,050 --> 00:02:35,160
must look at that as well we're gonna

63
00:02:32,730 --> 00:02:37,018
look at some current projects some of

64
00:02:35,160 --> 00:02:38,790
the latest things are we going to look

65
00:02:37,019 --> 00:02:41,069
how they were developed and how we can

66
00:02:38,790 --> 00:02:43,200
use them to our to our advantage

67
00:02:41,069 --> 00:02:45,238
we're gonna have an end zone example

68
00:02:43,200 --> 00:02:47,399
slide by slide showing how we can build

69
00:02:45,239 --> 00:02:49,440
something that used to be really hard

70
00:02:47,400 --> 00:02:51,299
for every security research and now we

71
00:02:49,440 --> 00:02:54,329
can build a really fast and easy using

72
00:02:51,299 --> 00:02:56,580
server less and last hope for the demo

73
00:02:54,330 --> 00:02:58,830
got to go right we're gonna have a quick

74
00:02:56,580 --> 00:03:01,290
live demonstration are we going to build

75
00:02:58,830 --> 00:03:02,790
a live app using server let's hopefully

76
00:03:01,290 --> 00:03:03,329
the internet and everything is going to

77
00:03:02,790 --> 00:03:06,090
work

78
00:03:03,330 --> 00:03:07,830
alright so quick introduction to myself

79
00:03:06,090 --> 00:03:09,049
from we sang of morale I'm an

80
00:03:07,830 --> 00:03:12,510
intrapreneur

81
00:03:09,049 --> 00:03:14,640
researcher doing exploits apts also a

82
00:03:12,510 --> 00:03:16,470
community advocate and a big football

83
00:03:14,640 --> 00:03:18,660
fan of Maccabi Haifa you know I did

84
00:03:16,470 --> 00:03:24,299
Israel actually played against Liverpool

85
00:03:18,660 --> 00:03:27,329
once and won all right weird yeah all

86
00:03:24,299 --> 00:03:28,380
right so I'm doing a lot of research I'm

87
00:03:27,329 --> 00:03:32,579
also an intrapreneur

88
00:03:28,380 --> 00:03:34,319
and there are some ways that almost

89
00:03:32,579 --> 00:03:36,150
everybody that to goes to build a

90
00:03:34,319 --> 00:03:38,250
research app goes through so let's

91
00:03:36,150 --> 00:03:40,470
assume we have some kind of a PMC card I

92
00:03:38,250 --> 00:03:42,630
wanna run there's some POC that I want

93
00:03:40,470 --> 00:03:44,670
to deploy first thing I really need to

94
00:03:42,630 --> 00:03:46,260
start planning I need to plan for the

95
00:03:44,670 --> 00:03:48,510
magnitude what's the size how many

96
00:03:46,260 --> 00:03:50,489
mowers I'm going to scan how many drawer

97
00:03:48,510 --> 00:03:52,500
else I'm going to work with I'm going to

98
00:03:50,489 --> 00:03:54,030
I need to budget I need to understand

99
00:03:52,500 --> 00:03:55,889
what is going to be the volume of my

100
00:03:54,030 --> 00:03:57,989
work I'm going to understand the volume

101
00:03:55,889 --> 00:04:00,120
of the volume of the network all the

102
00:03:57,989 --> 00:04:02,970
benefit all of those and I need to stop

103
00:04:00,120 --> 00:04:04,859
back usually for some resources from the

104
00:04:02,970 --> 00:04:07,319
company or sponsors or anything like

105
00:04:04,859 --> 00:04:08,940
that so that takes a lot of time and

106
00:04:07,319 --> 00:04:10,888
it's something nobody really likes to do

107
00:04:08,940 --> 00:04:13,079
nobody likes to you know back for budget

108
00:04:10,889 --> 00:04:14,880
or works on those kind of things and

109
00:04:13,079 --> 00:04:16,739
let's say I got my budget I got

110
00:04:14,880 --> 00:04:18,298
everything sorted maybe I cut off some

111
00:04:16,738 --> 00:04:20,099
stuff and then I need to start building

112
00:04:18,298 --> 00:04:21,539
up the infrastructure let's say I want

113
00:04:20,100 --> 00:04:23,669
to analyze some era I want to build the

114
00:04:21,539 --> 00:04:25,620
sandbox so I need to allocate I don't

115
00:04:23,669 --> 00:04:27,419
know how many VMs I can I need to start

116
00:04:25,620 --> 00:04:29,130
build up the network to make it secure

117
00:04:27,419 --> 00:04:30,659
and private I need to

118
00:04:29,130 --> 00:04:33,569
a lot of time on that I didn't even

119
00:04:30,660 --> 00:04:36,000
start with my project and then I need to

120
00:04:33,569 --> 00:04:37,740
find a way to start deploy my code

121
00:04:36,000 --> 00:04:39,870
let's I'm using some continuous

122
00:04:37,740 --> 00:04:42,840
integration or geared up or simply on my

123
00:04:39,870 --> 00:04:44,910
machine but still only now I started to

124
00:04:42,840 --> 00:04:47,369
run my app and once I started to run my

125
00:04:44,910 --> 00:04:49,139
app then I need to start monitoring it

126
00:04:47,370 --> 00:04:50,639
because we work with research app

127
00:04:49,139 --> 00:04:53,310
usually researchers are not the best

128
00:04:50,639 --> 00:04:55,199
developers I know I'm not and they break

129
00:04:53,310 --> 00:04:57,240
when I start monitoring them I can't

130
00:04:55,199 --> 00:04:59,250
stress how many times I've worked

131
00:04:57,240 --> 00:05:01,889
through the entire day late into the

132
00:04:59,250 --> 00:05:04,349
hours of the night and then okay I

133
00:05:01,889 --> 00:05:05,970
father my absence my app is working went

134
00:05:04,349 --> 00:05:08,009
to sleep only to wake up that it broke

135
00:05:05,970 --> 00:05:10,050
the minute after so I have now research

136
00:05:08,009 --> 00:05:12,449
that I have nothing to work with and

137
00:05:10,050 --> 00:05:14,580
that's really really frustrating so I

138
00:05:12,449 --> 00:05:16,560
started looking said alright I'm wasting

139
00:05:14,580 --> 00:05:18,900
a lot of time I need to stop thinking of

140
00:05:16,560 --> 00:05:20,460
what I can do better and but before I

141
00:05:18,900 --> 00:05:23,698
can understand what I can do better I

142
00:05:20,460 --> 00:05:25,530
need to start understanding what are the

143
00:05:23,699 --> 00:05:28,139
main flaws of what I'm doing I can start

144
00:05:25,530 --> 00:05:31,739
matching them so the first thing of the

145
00:05:28,139 --> 00:05:33,509
I guess major flaws Ames Research app

146
00:05:31,740 --> 00:05:35,219
development is the fact that I

147
00:05:33,509 --> 00:05:37,530
understood it it's not scalable at all

148
00:05:35,219 --> 00:05:39,330
makes it really hard let's say I'm

149
00:05:37,530 --> 00:05:41,039
working with some malware strain that

150
00:05:39,330 --> 00:05:43,258
say Imhotep was is a good example

151
00:05:41,039 --> 00:05:45,330
Imhotep is pretty good at the way they

152
00:05:43,259 --> 00:05:47,280
distribute their attacks one time they

153
00:05:45,330 --> 00:05:48,840
distribute two or three malware two

154
00:05:47,280 --> 00:05:50,849
weeks after a million malware on the

155
00:05:48,840 --> 00:05:52,349
same day and then they going quiet for a

156
00:05:50,849 --> 00:05:54,300
month and then free mail and then two

157
00:05:52,349 --> 00:05:55,590
days later medium samples so it was

158
00:05:54,300 --> 00:05:57,750
really hard to get up the infrastructure

159
00:05:55,590 --> 00:06:01,349
to sustain all of those malware and

160
00:05:57,750 --> 00:06:02,759
analyze them and then just way there

161
00:06:01,349 --> 00:06:04,380
with the infrastructure just waiting for

162
00:06:02,759 --> 00:06:06,289
it to work so was something that was

163
00:06:04,380 --> 00:06:10,349
really really hard I needed to find a

164
00:06:06,289 --> 00:06:12,300
way to make my app scalable the next

165
00:06:10,349 --> 00:06:14,639
thing I discovered is that we were not

166
00:06:12,300 --> 00:06:16,740
agile at all which is not good I mean

167
00:06:14,639 --> 00:06:19,169
developers always focus on agile and

168
00:06:16,740 --> 00:06:21,330
security research not so much and

169
00:06:19,169 --> 00:06:23,008
basically let's give an example anyone

170
00:06:21,330 --> 00:06:25,469
here work with cuckoo sandbox for

171
00:06:23,009 --> 00:06:28,139
example Viper any one of those tools

172
00:06:25,469 --> 00:06:29,520
yeah I see some places so if you really

173
00:06:28,139 --> 00:06:31,860
want to get cuckoo in production it's a

174
00:06:29,520 --> 00:06:33,359
great app but it takes a lot of time you

175
00:06:31,860 --> 00:06:34,860
need like your team of DevOps and

176
00:06:33,360 --> 00:06:36,870
everybody to actually start working with

177
00:06:34,860 --> 00:06:39,000
it and then a set aside as soon

178
00:06:36,870 --> 00:06:41,190
something breaks because the app was

179
00:06:39,000 --> 00:06:44,700
worked as a full

180
00:06:41,190 --> 00:06:46,770
multi-purpose app it has a domain

181
00:06:44,700 --> 00:06:49,409
analysis document analyzers file

182
00:06:46,770 --> 00:06:50,969
analyzers working with VM databases then

183
00:06:49,410 --> 00:06:52,800
if something breaks the entire outbreaks

184
00:06:50,970 --> 00:06:55,650
and more than that if you want to do

185
00:06:52,800 --> 00:06:57,360
some code changes then you need to take

186
00:06:55,650 --> 00:06:59,340
down the everything take down almost all

187
00:06:57,360 --> 00:07:00,780
the servers deploy your code run it

188
00:06:59,340 --> 00:07:02,880
doesn't work for the first time so you

189
00:07:00,780 --> 00:07:04,500
need to redeploy takes almost a day to

190
00:07:02,880 --> 00:07:07,110
actually in production to get it to work

191
00:07:04,500 --> 00:07:09,600
and that also means that usually by

192
00:07:07,110 --> 00:07:12,240
coders you actually deploy your code so

193
00:07:09,600 --> 00:07:13,920
for research a quarter a few days that

194
00:07:12,240 --> 00:07:16,380
doesn't work is you need to work really

195
00:07:13,920 --> 00:07:18,480
fast so this is another example LS

196
00:07:16,380 --> 00:07:20,100
because all of those reasons it means

197
00:07:18,480 --> 00:07:21,420
that we are really slow on adoption if

198
00:07:20,100 --> 00:07:23,010
there's a new malware strain if there's

199
00:07:21,420 --> 00:07:24,960
a new exploit there's a new type of

200
00:07:23,010 --> 00:07:27,000
vulnerability takes us a long time to

201
00:07:24,960 --> 00:07:28,500
actually respond to it which is horrible

202
00:07:27,000 --> 00:07:31,620
in this day that people speaking about

203
00:07:28,500 --> 00:07:32,790
minutes now and not even hours etc so

204
00:07:31,620 --> 00:07:35,550
it's something we really need to focus

205
00:07:32,790 --> 00:07:37,440
on so I work with my colleagues work

206
00:07:35,550 --> 00:07:39,990
with friends work with the community did

207
00:07:37,440 --> 00:07:41,670
some fred did some analysis and i came

208
00:07:39,990 --> 00:07:44,400
across a few ideas how to make it better

209
00:07:41,670 --> 00:07:46,380
the first one was working with dr. Swann

210
00:07:44,400 --> 00:07:49,349
kubernetes orchestration anyone familiar

211
00:07:46,380 --> 00:07:51,390
with it cool so a people familiar with

212
00:07:49,350 --> 00:07:53,669
it it's good it's actually much better

213
00:07:51,390 --> 00:07:56,039
than what it used to be but let's take a

214
00:07:53,669 --> 00:07:58,049
quick example again to actually get a

215
00:07:56,040 --> 00:08:00,480
proper cuckoo running in kubernetes I

216
00:07:58,050 --> 00:08:02,460
need an instance for my database tool I

217
00:08:00,480 --> 00:08:03,990
need one for the web server I need one

218
00:08:02,460 --> 00:08:06,930
for the processing I need one for the e

219
00:08:03,990 --> 00:08:08,550
ok I need one it's hard I'm a researcher

220
00:08:06,930 --> 00:08:10,650
I'm not a dev up I don't want to spend

221
00:08:08,550 --> 00:08:12,210
all this time on running those apps so

222
00:08:10,650 --> 00:08:14,370
it was really really problematic for me

223
00:08:12,210 --> 00:08:15,900
it wasn't enough I was really tired of

224
00:08:14,370 --> 00:08:17,940
dealing with all the orchestration and

225
00:08:15,900 --> 00:08:19,380
servers and everything and then I came

226
00:08:17,940 --> 00:08:21,750
across a really cool idea which

227
00:08:19,380 --> 00:08:23,250
relatively new it's called server lists

228
00:08:21,750 --> 00:08:25,169
I know it's a funny world it's kind of

229
00:08:23,250 --> 00:08:28,470
annoying world but it's actually kind of

230
00:08:25,169 --> 00:08:30,330
what it is basically serving us it's the

231
00:08:28,470 --> 00:08:32,030
latest Brandes way for the cloud

232
00:08:30,330 --> 00:08:34,380
providers to make more money and

233
00:08:32,030 --> 00:08:36,299
basically it's what they do they are

234
00:08:34,380 --> 00:08:38,010
like a casino the house always wins but

235
00:08:36,299 --> 00:08:40,228
it's actually cool some of them do it

236
00:08:38,010 --> 00:08:42,900
right basically what it means they've

237
00:08:40,229 --> 00:08:45,570
went into such a good stage of

238
00:08:42,900 --> 00:08:48,810
optimization if someone rents some kind

239
00:08:45,570 --> 00:08:50,760
of a VPS or an instance of some kind of

240
00:08:48,810 --> 00:08:53,369
resources and doesn't user

241
00:08:50,760 --> 00:08:55,710
they are gonna use it in a third party

242
00:08:53,370 --> 00:08:57,840
kind of application in the server this

243
00:08:55,710 --> 00:08:59,850
way basically going to use the scraps of

244
00:08:57,840 --> 00:09:01,980
whatever cloud resources that are left

245
00:08:59,850 --> 00:09:04,830
in their huge domain the hot dogs off

246
00:09:01,980 --> 00:09:06,690
cloud but basically is so much of it

247
00:09:04,830 --> 00:09:09,330
left so they can actually provide you

248
00:09:06,690 --> 00:09:11,220
with an almost limitless resources for

249
00:09:09,330 --> 00:09:13,380
mostly short periods of time or

250
00:09:11,220 --> 00:09:16,380
different kind of tasks so it's actually

251
00:09:13,380 --> 00:09:19,890
pretty cool basically most of it is

252
00:09:16,380 --> 00:09:22,290
working on the concept of fast FAS

253
00:09:19,890 --> 00:09:24,240
function as a service pretty new concept

254
00:09:22,290 --> 00:09:26,640
the main one and we are going to focus

255
00:09:24,240 --> 00:09:29,220
on today is Amazon lambda there are also

256
00:09:26,640 --> 00:09:31,800
a Google Cloud functions IBM open ways

257
00:09:29,220 --> 00:09:35,370
and lately don't use it Microsoft Ezard

258
00:09:31,800 --> 00:09:37,439
sorry but anyway it's focused mostly for

259
00:09:35,370 --> 00:09:40,470
developers on the fact that you should

260
00:09:37,440 --> 00:09:43,590
focus on your code besides what the

261
00:09:40,470 --> 00:09:45,210
infrastructure basically work just on

262
00:09:43,590 --> 00:09:46,560
your code it'll actually work for but

263
00:09:45,210 --> 00:09:49,440
there are some limitations we'll go over

264
00:09:46,560 --> 00:09:52,910
them it also means that we're going to

265
00:09:49,440 --> 00:09:55,170
focus on remember that single purpose

266
00:09:52,910 --> 00:09:58,170
functions we are used if you're working

267
00:09:55,170 --> 00:09:59,849
with docker multi-purpose apps now we're

268
00:09:58,170 --> 00:10:01,949
going to change our mindset to single

269
00:09:59,850 --> 00:10:05,240
purpose functions and basically what it

270
00:10:01,950 --> 00:10:08,430
means there is some kind of an event

271
00:10:05,240 --> 00:10:11,040
event triggers API call reading toward

272
00:10:08,430 --> 00:10:12,569
an abiding to a database file activity

273
00:10:11,040 --> 00:10:14,430
something like that you will get an

274
00:10:12,570 --> 00:10:16,200
event you will process it in your

275
00:10:14,430 --> 00:10:17,640
function and then you can do whatever

276
00:10:16,200 --> 00:10:19,140
you want to be some kind of an output

277
00:10:17,640 --> 00:10:21,870
safe toy database trigger and other

278
00:10:19,140 --> 00:10:24,180
function things like that but you don't

279
00:10:21,870 --> 00:10:26,910
work on are we used to have one purpose

280
00:10:24,180 --> 00:10:28,530
functions for apps for everything it's

281
00:10:26,910 --> 00:10:29,219
also really good for bogging and

282
00:10:28,530 --> 00:10:31,530
everything like that

283
00:10:29,220 --> 00:10:33,060
laughs not lasting but another really

284
00:10:31,530 --> 00:10:35,790
important thing is you don't pay for

285
00:10:33,060 --> 00:10:37,979
ideal super important if you rent cloud

286
00:10:35,790 --> 00:10:40,920
service you rent ec2 you probably know

287
00:10:37,980 --> 00:10:42,900
that you're using most non-use 70% of

288
00:10:40,920 --> 00:10:44,370
what they are on for long term of what

289
00:10:42,900 --> 00:10:46,230
they use even if the use don't care and

290
00:10:44,370 --> 00:10:48,030
kubernetes actually pretty hard we've

291
00:10:46,230 --> 00:10:50,280
several as to basically only pay for

292
00:10:48,030 --> 00:10:52,290
exactly what you use you do pay a bit of

293
00:10:50,280 --> 00:10:54,540
amount but still usually on the long

294
00:10:52,290 --> 00:10:57,540
term it's much better and the last thing

295
00:10:54,540 --> 00:11:00,000
is that it's very very scalable let's go

296
00:10:57,540 --> 00:11:01,800
back to the Emotiv example i can analyze

297
00:11:00,000 --> 00:11:03,760
one male restraint if I do it studies

298
00:11:01,800 --> 00:11:05,920
statically for example and I cannot

299
00:11:03,760 --> 00:11:07,420
a million I don't need to wait for it I

300
00:11:05,920 --> 00:11:09,610
don't pay for the for the time I'm

301
00:11:07,420 --> 00:11:11,410
waiting I'm only paying for that exact

302
00:11:09,610 --> 00:11:13,480
time actually tested it it was really

303
00:11:11,410 --> 00:11:16,329
really good this is one of the reason

304
00:11:13,480 --> 00:11:17,890
I'm actually focus on Amazon here now it

305
00:11:16,330 --> 00:11:20,440
might be only one actually seeing this

306
00:11:17,890 --> 00:11:22,060
is the ALF live video game here

307
00:11:20,440 --> 00:11:25,360
I couldn't stop play it once I start

308
00:11:22,060 --> 00:11:27,219
seeing it so kind of cool anyhow I'm not

309
00:11:25,360 --> 00:11:28,270
trying to fool anybody here I mean

310
00:11:27,220 --> 00:11:30,280
there's some brilliant people here

311
00:11:28,270 --> 00:11:33,010
probably smarter than me the computer

312
00:11:30,280 --> 00:11:35,170
scientist you need servers but for our

313
00:11:33,010 --> 00:11:38,020
purpose for our point of view for this

314
00:11:35,170 --> 00:11:39,969
specific task for presentation for

315
00:11:38,020 --> 00:11:41,829
developing our apps we don't care about

316
00:11:39,970 --> 00:11:43,420
them now this is a security conference

317
00:11:41,830 --> 00:11:45,400
actually in don't you go ahead and try

318
00:11:43,420 --> 00:11:46,959
breakout of the lambda find

319
00:11:45,400 --> 00:11:48,970
vulnerabilities you can make good money

320
00:11:46,960 --> 00:11:51,880
if you find one from Amazon for example

321
00:11:48,970 --> 00:11:54,610
on the above bounty but leave it for now

322
00:11:51,880 --> 00:11:58,000
focus on just the way we develop our

323
00:11:54,610 --> 00:11:59,710
apps so it's not perfect though it's

324
00:11:58,000 --> 00:12:01,390
pretty new and there's some really cool

325
00:11:59,710 --> 00:12:03,610
limitations remember we're using the

326
00:12:01,390 --> 00:12:06,090
scraps of whatever the cloud provider

327
00:12:03,610 --> 00:12:08,530
gives us so first thing there's a very

328
00:12:06,090 --> 00:12:10,090
pretty steep learning curve and I'm

329
00:12:08,530 --> 00:12:13,569
trying to break some of those barriers

330
00:12:10,090 --> 00:12:15,670
today we are not owning the app we are

331
00:12:13,570 --> 00:12:18,310
basically running it somewhere in the

332
00:12:15,670 --> 00:12:19,839
magical realm of the cloud so first

333
00:12:18,310 --> 00:12:22,780
thing is that it's really hard to debug

334
00:12:19,840 --> 00:12:24,640
I mean it's not hot it's different for

335
00:12:22,780 --> 00:12:26,740
example there's not much break points or

336
00:12:24,640 --> 00:12:29,460
traces or hooks the way we used to debug

337
00:12:26,740 --> 00:12:31,510
our apps today you need to work a lot of

338
00:12:29,460 --> 00:12:32,980
exceptions and login exceptions and

339
00:12:31,510 --> 00:12:35,319
things like that so did something really

340
00:12:32,980 --> 00:12:37,000
important to understand and other thing

341
00:12:35,320 --> 00:12:39,190
is there are some technical limitations

342
00:12:37,000 --> 00:12:41,890
for example when lambda just started you

343
00:12:39,190 --> 00:12:43,390
had a limit of storage of 500 megabytes

344
00:12:41,890 --> 00:12:44,890
now that's pretty small now it's 2

345
00:12:43,390 --> 00:12:46,420
gigabytes but let's say you're dealing

346
00:12:44,890 --> 00:12:48,430
with some video app that needs to

347
00:12:46,420 --> 00:12:50,680
process or generates more than to the

348
00:12:48,430 --> 00:12:53,140
gigabytes of storage then public service

349
00:12:50,680 --> 00:12:55,180
yet is not for you there's also a limit

350
00:12:53,140 --> 00:12:57,250
remember we're using the scraps so we're

351
00:12:55,180 --> 00:12:59,680
using some kind of a server that is

352
00:12:57,250 --> 00:13:01,690
currently not fully optimized so the

353
00:12:59,680 --> 00:13:02,800
bane cloud providers have limited mostly

354
00:13:01,690 --> 00:13:04,840
to 15 minutes

355
00:13:02,800 --> 00:13:07,329
you can't run a single function more

356
00:13:04,840 --> 00:13:08,740
than 15 minutes usually when I work with

357
00:13:07,330 --> 00:13:10,660
people who start working with it one

358
00:13:08,740 --> 00:13:13,060
myself if you get to something that runs

359
00:13:10,660 --> 00:13:15,760
more than 15 minutes either you didn't

360
00:13:13,060 --> 00:13:17,500
properly optimize your code or if you

361
00:13:15,760 --> 00:13:18,760
really need to with some like really

362
00:13:17,500 --> 00:13:20,410
jika machine learning algorithm

363
00:13:18,760 --> 00:13:22,090
something like that you probably want to

364
00:13:20,410 --> 00:13:24,219
use dog hairs or something else but it's

365
00:13:22,090 --> 00:13:25,900
an imitation worth knowing and the last

366
00:13:24,220 --> 00:13:28,120
thing is the concept of warm and cold

367
00:13:25,900 --> 00:13:30,250
boot this is something really important

368
00:13:28,120 --> 00:13:31,900
what basically happens in the background

369
00:13:30,250 --> 00:13:34,090
for example Amazon they have their own

370
00:13:31,900 --> 00:13:36,180
containers and you're creating a package

371
00:13:34,090 --> 00:13:38,890
your code you deploy it into their

372
00:13:36,180 --> 00:13:41,890
sphere and then it's waiting for a

373
00:13:38,890 --> 00:13:43,720
trigger whenever the triggers start they

374
00:13:41,890 --> 00:13:45,520
will shift your container to that

375
00:13:43,720 --> 00:13:47,650
location that wasn't really used and

376
00:13:45,520 --> 00:13:51,040
will execute so you have three steps

377
00:13:47,650 --> 00:13:53,319
here the good look at the container is

378
00:13:51,040 --> 00:13:54,670
starting to deploy and then usually

379
00:13:53,320 --> 00:13:56,410
functions have been some kind of

380
00:13:54,670 --> 00:13:57,819
initialization code let's say we are

381
00:13:56,410 --> 00:13:59,050
doing AV scanning I want to get the

382
00:13:57,820 --> 00:14:01,240
latest signatures so I'm going to

383
00:13:59,050 --> 00:14:03,040
download them that takes a few second as

384
00:14:01,240 --> 00:14:04,690
well and only then the first step we're

385
00:14:03,040 --> 00:14:06,849
actually running your main function of

386
00:14:04,690 --> 00:14:09,160
whatever you want it to do so that takes

387
00:14:06,850 --> 00:14:10,480
a bit of time usually a few seconds but

388
00:14:09,160 --> 00:14:12,730
is something cool because of the

389
00:14:10,480 --> 00:14:14,470
optimization they're not going to deploy

390
00:14:12,730 --> 00:14:16,840
that package all the time so they have

391
00:14:14,470 --> 00:14:19,300
there is a few time there's a short time

392
00:14:16,840 --> 00:14:21,700
span if you execute your function again

393
00:14:19,300 --> 00:14:23,229
it means it's a warm boot now and you're

394
00:14:21,700 --> 00:14:25,060
going to execute a function right away

395
00:14:23,230 --> 00:14:26,230
so you can actually even abuse that and

396
00:14:25,060 --> 00:14:27,579
if you want to keep your functions

397
00:14:26,230 --> 00:14:29,710
running all the time so it's nothing

398
00:14:27,580 --> 00:14:31,150
really important to understand but if

399
00:14:29,710 --> 00:14:33,070
you look at it it also means that

400
00:14:31,150 --> 00:14:35,170
Cerberus is not suitable for everything

401
00:14:33,070 --> 00:14:38,050
let's say you deal with some police

402
00:14:35,170 --> 00:14:40,300
alerting or web activity tsunami alerts

403
00:14:38,050 --> 00:14:41,979
and a few seconds actually really counts

404
00:14:40,300 --> 00:14:43,810
so you might don't want to use that as

405
00:14:41,980 --> 00:14:45,820
well but most especially for research

406
00:14:43,810 --> 00:14:49,300
apps it's well more than enough for this

407
00:14:45,820 --> 00:14:51,240
few seconds now it out it almost sounds

408
00:14:49,300 --> 00:14:53,890
like Hansel and Gretel stories I'm a

409
00:14:51,240 --> 00:14:56,530
Candyland but remember we're researchers

410
00:14:53,890 --> 00:14:58,120
we work in a very hostile environment so

411
00:14:56,530 --> 00:15:00,760
we dealing with exploits malware a

412
00:14:58,120 --> 00:15:02,140
nation-state for God's sake and we don't

413
00:15:00,760 --> 00:15:03,850
want to mess with them too much we must

414
00:15:02,140 --> 00:15:06,400
understand some of the security

415
00:15:03,850 --> 00:15:08,860
considerations before jumping in so the

416
00:15:06,400 --> 00:15:11,560
first thing is and I see it all the time

417
00:15:08,860 --> 00:15:13,300
people work really fast when they start

418
00:15:11,560 --> 00:15:15,489
working with server less and they forget

419
00:15:13,300 --> 00:15:16,959
about securing their code and remember

420
00:15:15,490 --> 00:15:18,700
you don't need to patch we don't need to

421
00:15:16,960 --> 00:15:20,320
do updates we don't need to secure the

422
00:15:18,700 --> 00:15:21,550
infrastructure by our code if it's damn

423
00:15:20,320 --> 00:15:24,550
vulnerable it's they're vulnerable

424
00:15:21,550 --> 00:15:27,160
and things like event data injection are

425
00:15:24,550 --> 00:15:28,810
so common our sees some people even

426
00:15:27,160 --> 00:15:30,880
connect the servers to a database you

427
00:15:28,810 --> 00:15:32,709
get SQL injection and stuff like that

428
00:15:30,880 --> 00:15:35,230
remember they always stopped and all the

429
00:15:32,709 --> 00:15:37,239
apps AK principles work with them work

430
00:15:35,230 --> 00:15:39,100
with them really hard don't keep your

431
00:15:37,240 --> 00:15:41,230
security development lifecycle if you do

432
00:15:39,100 --> 00:15:42,699
it in production then X is an insecure

433
00:15:41,230 --> 00:15:45,430
storage remember you've got some

434
00:15:42,699 --> 00:15:47,199
containers floating in that magical Ram

435
00:15:45,430 --> 00:15:50,109
and if you have some things like

436
00:15:47,199 --> 00:15:54,849
password API keys any secret social ID

437
00:15:50,110 --> 00:15:57,040
numbers saved physics and the storage

438
00:15:54,850 --> 00:15:58,779
not encrypted then it means that if it

439
00:15:57,040 --> 00:16:00,519
gets compromised somehow your code gets

440
00:15:58,779 --> 00:16:02,350
and if someone worked with GD P or

441
00:16:00,519 --> 00:16:03,790
anything like that sometimes you can

442
00:16:02,350 --> 00:16:05,740
even know where your code is actually in

443
00:16:03,790 --> 00:16:08,319
so there's some services to work around

444
00:16:05,740 --> 00:16:10,089
it Amazon if their secrets means you get

445
00:16:08,319 --> 00:16:12,250
an API call based on permission for

446
00:16:10,089 --> 00:16:13,899
their lambda and then you get your code

447
00:16:12,250 --> 00:16:15,399
you run it in memory and you could

448
00:16:13,899 --> 00:16:16,029
destroy it right away so remember that

449
00:16:15,399 --> 00:16:17,980
as well

450
00:16:16,029 --> 00:16:19,509
after that we have permissions remember

451
00:16:17,980 --> 00:16:21,850
people are used to work with multi

452
00:16:19,509 --> 00:16:23,949
purpose apps so they first starting to

453
00:16:21,850 --> 00:16:25,569
work with single purpose function what

454
00:16:23,949 --> 00:16:27,040
they actually do is making many many

455
00:16:25,569 --> 00:16:28,839
many many many many functions giving

456
00:16:27,040 --> 00:16:29,620
them many many many permissions and then

457
00:16:28,839 --> 00:16:31,180
they get compromise compromise

458
00:16:29,620 --> 00:16:32,889
compromise and all their infrastructure

459
00:16:31,180 --> 00:16:34,300
get compromised so it's something that

460
00:16:32,889 --> 00:16:36,779
you really need to understand work on

461
00:16:34,300 --> 00:16:39,959
single purpose functions and the least

462
00:16:36,779 --> 00:16:42,130
privileged access that you can also

463
00:16:39,959 --> 00:16:45,130
budget exhaustion really really new

464
00:16:42,130 --> 00:16:47,740
concept if we get these us today apps

465
00:16:45,130 --> 00:16:49,029
usually what it means that our services

466
00:16:47,740 --> 00:16:50,529
are going to be down maybe we're going

467
00:16:49,029 --> 00:16:51,759
to lose some for ways to juice it

468
00:16:50,529 --> 00:16:54,009
doesn't really mean much but for

469
00:16:51,759 --> 00:16:57,370
production means that we are going to

470
00:16:54,009 --> 00:16:59,230
lose money on not operating it doesn't

471
00:16:57,370 --> 00:17:01,810
mean we're actually going to pay more

472
00:16:59,230 --> 00:17:03,430
money based on the usage so for example

473
00:17:01,810 --> 00:17:05,530
with emote ed they actually attacked our

474
00:17:03,430 --> 00:17:07,599
services and they were trying to make us

475
00:17:05,530 --> 00:17:09,339
use more bandwidth remember it's

476
00:17:07,599 --> 00:17:11,020
scalable the cloud providers doesn't

477
00:17:09,339 --> 00:17:12,730
know it's an attack and we just provide

478
00:17:11,020 --> 00:17:14,559
more and more resources to you so can

479
00:17:12,730 --> 00:17:16,809
actually sometimes it's errors that your

480
00:17:14,559 --> 00:17:18,789
program is ready so remember to monitor

481
00:17:16,809 --> 00:17:21,250
and set up bad budgets according to what

482
00:17:18,789 --> 00:17:23,379
you can actually afford also verbose

483
00:17:21,250 --> 00:17:25,449
exceptions people get hooked to how

484
00:17:23,380 --> 00:17:27,339
rapid they can actually develop code but

485
00:17:25,449 --> 00:17:28,870
when you develop rapid call people leave

486
00:17:27,339 --> 00:17:30,730
a lot of exceptions a lot of various

487
00:17:28,870 --> 00:17:32,439
exceptions and sometimes I've seen

488
00:17:30,730 --> 00:17:34,450
passwords being returned to the users

489
00:17:32,440 --> 00:17:36,370
because they really wanted to debug so

490
00:17:34,450 --> 00:17:38,710
remember not doing that as well and last

491
00:17:36,370 --> 00:17:40,750
thing we are heavily relying on logging

492
00:17:38,710 --> 00:17:42,730
from the application side from the

493
00:17:40,750 --> 00:17:44,600
infrastructure side for example if it's

494
00:17:42,730 --> 00:17:48,080
a web application it's the end

495
00:17:44,600 --> 00:17:50,809
NIC's if it's other ones then we're

496
00:17:48,080 --> 00:17:52,399
relying on those logs with functions

497
00:17:50,809 --> 00:17:56,990
those kind of functions there is no logs

498
00:17:52,400 --> 00:17:59,750
in the in the infrastructure you need to

499
00:17:56,990 --> 00:18:02,059
write the logs yourself we record every

500
00:17:59,750 --> 00:18:06,620
activity record every exception most of

501
00:18:02,059 --> 00:18:08,418
them have sub building tools as well so

502
00:18:06,620 --> 00:18:10,370
I really wanted to find an out of War

503
00:18:08,419 --> 00:18:12,230
quote but I couldn't find one and you

504
00:18:10,370 --> 00:18:14,299
know it's the key note so you must have

505
00:18:12,230 --> 00:18:16,460
one and you guys are left with that but

506
00:18:14,299 --> 00:18:19,940
anyhow let's look at some more practical

507
00:18:16,460 --> 00:18:22,159
examples binary led by Airbnb Airbnb are

508
00:18:19,940 --> 00:18:23,780
heavily relying on Amazon and I spoke to

509
00:18:22,159 --> 00:18:25,070
the security is security engineering

510
00:18:23,780 --> 00:18:27,320
because I really wanted to understand

511
00:18:25,070 --> 00:18:31,039
why they used it so basically they

512
00:18:27,320 --> 00:18:32,860
created a way to get alerts on every

513
00:18:31,039 --> 00:18:35,270
malicious file getting upload to Airbnb

514
00:18:32,860 --> 00:18:37,939
why they decided to use service is

515
00:18:35,270 --> 00:18:39,620
actually pretty unique because the

516
00:18:37,940 --> 00:18:41,929
engineering team didn't have approval to

517
00:18:39,620 --> 00:18:43,879
stop uploading files what does it mean

518
00:18:41,929 --> 00:18:46,730
when you upload a file to Airbnb it's a

519
00:18:43,880 --> 00:18:48,710
problem profile picture new user or new

520
00:18:46,730 --> 00:18:50,419
listing some kind of a house listing so

521
00:18:48,710 --> 00:18:52,340
it means if they stop it for one minute

522
00:18:50,419 --> 00:18:53,990
they're going to lose a lot of money so

523
00:18:52,340 --> 00:18:57,139
what they did actually created a way to

524
00:18:53,990 --> 00:18:59,450
trigger parallel to the actual logic of

525
00:18:57,140 --> 00:19:01,010
their apps and whenever someone using as

526
00:18:59,450 --> 00:19:03,650
free bucket is the storage unit for

527
00:19:01,010 --> 00:19:05,690
Amazon someone upload the file the app

528
00:19:03,650 --> 00:19:08,419
for a baby is uploading some kind of a

529
00:19:05,690 --> 00:19:11,210
file it will go to a lambda trigger as

530
00:19:08,419 --> 00:19:14,539
an event that the main lab there is a

531
00:19:11,210 --> 00:19:16,789
dispatcher it basically will connect to

532
00:19:14,539 --> 00:19:19,158
many many other lambdas Diarra analyzes

533
00:19:16,789 --> 00:19:21,830
mostly clamby fees and whenever it finds

534
00:19:19,159 --> 00:19:23,720
a malicious it will stream and alert so

535
00:19:21,830 --> 00:19:25,520
basically going back to the Airbnb up

536
00:19:23,720 --> 00:19:27,500
and probably deleting the file or

537
00:19:25,520 --> 00:19:29,870
marking against malicious what's so cool

538
00:19:27,500 --> 00:19:32,210
about it first they can do whatever they

539
00:19:29,870 --> 00:19:34,100
want with the app it doesn't affect the

540
00:19:32,210 --> 00:19:35,570
main business logic app so they can do

541
00:19:34,100 --> 00:19:37,850
changes worried they can play with it

542
00:19:35,570 --> 00:19:39,470
another thing is that they can add as

543
00:19:37,850 --> 00:19:41,570
many analyzer as they want or if a

544
00:19:39,470 --> 00:19:43,460
simple analyze is not going to work the

545
00:19:41,570 --> 00:19:45,020
other analyzers will work so they can

546
00:19:43,460 --> 00:19:47,000
play with it as much as they want it can

547
00:19:45,020 --> 00:19:48,559
be experimental the only thing they are

548
00:19:47,000 --> 00:19:50,600
really taken in consideration is the

549
00:19:48,559 --> 00:19:52,820
dispatcher so whenever you actually add

550
00:19:50,600 --> 00:19:54,559
a function or an analyze they'll work

551
00:19:52,820 --> 00:19:56,418
with it and last thing they really care

552
00:19:54,559 --> 00:19:57,879
about not doing false positive and stuff

553
00:19:56,419 --> 00:19:59,799
but really cool

554
00:19:57,880 --> 00:20:04,059
project it's completely open-source so

555
00:19:59,799 --> 00:20:06,129
ever look at it alright another project

556
00:20:04,059 --> 00:20:08,678
called Mouse can bot quick disclosure

557
00:20:06,130 --> 00:20:11,830
this is something I built so uh take it

558
00:20:08,679 --> 00:20:13,570
as you wish but basically it's also open

559
00:20:11,830 --> 00:20:16,059
source you can try it out on telegram

560
00:20:13,570 --> 00:20:17,889
it's a bot that helps people scan

561
00:20:16,059 --> 00:20:19,780
malware work with malware work with some

562
00:20:17,890 --> 00:20:22,059
analysis from your mobile phone the

563
00:20:19,780 --> 00:20:23,379
reason I created it was I'm traveling a

564
00:20:22,059 --> 00:20:25,090
lot I mean a lot of conferences I

565
00:20:23,380 --> 00:20:26,860
usually don't have my laptop with me and

566
00:20:25,090 --> 00:20:28,418
I have a really stupid iPhone that I

567
00:20:26,860 --> 00:20:30,580
can't do anything with other than

568
00:20:28,419 --> 00:20:32,409
messaging so I actually created that bot

569
00:20:30,580 --> 00:20:34,330
and basically what it is you are

570
00:20:32,409 --> 00:20:38,289
uploading a file you can play with it

571
00:20:34,330 --> 00:20:39,610
you can submit URLs and stuff but

572
00:20:38,289 --> 00:20:41,740
something really cool is that I

573
00:20:39,610 --> 00:20:43,600
completely build it over server less so

574
00:20:41,740 --> 00:20:46,150
I don't need to ssh to anything or work

575
00:20:43,600 --> 00:20:48,070
with anything in case they something

576
00:20:46,150 --> 00:20:50,590
breaks so basically the way it's

577
00:20:48,070 --> 00:20:52,270
designed now there is not just telegram

578
00:20:50,590 --> 00:20:54,850
this facebook coming up slack and web

579
00:20:52,270 --> 00:20:56,530
and basically I have one single API

580
00:20:54,850 --> 00:20:59,770
getaway by Amazon it's like their

581
00:20:56,530 --> 00:21:01,899
version of web get where engineers also

582
00:20:59,770 --> 00:21:03,908
service and every command that you've

583
00:21:01,900 --> 00:21:05,830
seen like virustotal scanning feels like

584
00:21:03,909 --> 00:21:08,020
that will be traced back to us a

585
00:21:05,830 --> 00:21:09,129
corresponding lambda so for example some

586
00:21:08,020 --> 00:21:11,470
file getting scanned

587
00:21:09,130 --> 00:21:12,370
I'm scanning it and then I'm replaying

588
00:21:11,470 --> 00:21:14,350
it was scanned

589
00:21:12,370 --> 00:21:15,668
I'm also triggering actual scan in the

590
00:21:14,350 --> 00:21:18,100
background so you can actually report

591
00:21:15,669 --> 00:21:21,610
back to it etc so pretty cool again open

592
00:21:18,100 --> 00:21:25,000
source have a look at it if you want now

593
00:21:21,610 --> 00:21:29,889
I wanted to take something anyone build

594
00:21:25,000 --> 00:21:30,880
a malware sinkhole before here cool one

595
00:21:29,890 --> 00:21:34,480
that's good

596
00:21:30,880 --> 00:21:37,690
and basically a malware sinkhole is

597
00:21:34,480 --> 00:21:40,059
where US researchers fare analyzers

598
00:21:37,690 --> 00:21:42,010
taking hostage or taking in control a

599
00:21:40,059 --> 00:21:45,220
domain s command and control center

600
00:21:42,010 --> 00:21:46,600
owned by attackers we usually register

601
00:21:45,220 --> 00:21:48,669
the domain either by the help of law

602
00:21:46,600 --> 00:21:50,918
enforcement or we find a way to register

603
00:21:48,669 --> 00:21:52,990
before them or it was not registered and

604
00:21:50,919 --> 00:21:55,480
then we suppress all the traffic of the

605
00:21:52,990 --> 00:21:57,520
malware to us what's really problematic

606
00:21:55,480 --> 00:21:59,950
with it usually we have no idea the

607
00:21:57,520 --> 00:22:01,840
magnitude of the attack we can simulate

608
00:21:59,950 --> 00:22:04,510
maybe but usually we don't really know

609
00:22:01,840 --> 00:22:06,629
and that makes it really returning also

610
00:22:04,510 --> 00:22:09,730
because we did this is something that

611
00:22:06,630 --> 00:22:10,680
extremely upset attackers every time I

612
00:22:09,730 --> 00:22:12,540
did that I was

613
00:22:10,680 --> 00:22:13,770
their attack if they know who you are so

614
00:22:12,540 --> 00:22:15,360
you really need to insecure

615
00:22:13,770 --> 00:22:17,520
infrastructure you need to set it up

616
00:22:15,360 --> 00:22:18,360
differently and it's not like your

617
00:22:17,520 --> 00:22:21,510
normal apps

618
00:22:18,360 --> 00:22:23,280
so basically 7s can actually solve that

619
00:22:21,510 --> 00:22:25,980
really fast and it takes months to get a

620
00:22:23,280 --> 00:22:28,050
single up and running so first thing I

621
00:22:25,980 --> 00:22:29,460
wanted to do is finally think about

622
00:22:28,050 --> 00:22:32,220
malware I don't know if it's a real

623
00:22:29,460 --> 00:22:34,080
world but basically and no matter where

624
00:22:32,220 --> 00:22:36,450
I can sink now I'm we didn't have a full

625
00:22:34,080 --> 00:22:38,370
database of malware for this specific

626
00:22:36,450 --> 00:22:40,380
demonstration and I didn't randomly just

627
00:22:38,370 --> 00:22:43,610
found one so actually when it looked a

628
00:22:40,380 --> 00:22:43,610
bit and this is something you can use

629
00:22:44,930 --> 00:22:49,080
anyway it's a good talk I can show it

630
00:22:47,010 --> 00:22:52,050
later but it's a Google Doc you can look

631
00:22:49,080 --> 00:22:53,939
for an X domain a tag in virustotal

632
00:22:52,050 --> 00:22:55,980
and it basically a member was running

633
00:22:53,940 --> 00:22:57,720
and the IP was not resolved you couldn't

634
00:22:55,980 --> 00:22:59,760
find an IP so it may be a good candidate

635
00:22:57,720 --> 00:23:02,040
I looked up and I found a couple of

636
00:22:59,760 --> 00:23:04,200
samples this one specifically is an old

637
00:23:02,040 --> 00:23:06,840
smear campaign some of you might be

638
00:23:04,200 --> 00:23:08,750
familiar with it and when I check with

639
00:23:06,840 --> 00:23:11,760
malcolm else can board i can see it

640
00:23:08,750 --> 00:23:13,680
registered I went to a cloud sandbox a

641
00:23:11,760 --> 00:23:16,020
near on run it and I see that it's still

642
00:23:13,680 --> 00:23:18,240
valid and then I actually checked the

643
00:23:16,020 --> 00:23:19,470
IPS ovary or other sinkholes so it's

644
00:23:18,240 --> 00:23:21,390
kind of cool actually okay I have a good

645
00:23:19,470 --> 00:23:22,890
candidate registered it and went to

646
00:23:21,390 --> 00:23:25,530
Amazon again I love it sorry

647
00:23:22,890 --> 00:23:27,390
and what I did is I took route Amazon

648
00:23:25,530 --> 00:23:31,080
route 53 it's the Amazon name server

649
00:23:27,390 --> 00:23:33,390
again a service for domain name every

650
00:23:31,080 --> 00:23:35,669
direction etc and but it has very cool

651
00:23:33,390 --> 00:23:37,890
unique feature instead of redirecting to

652
00:23:35,670 --> 00:23:41,250
an IP or another domain you can redirect

653
00:23:37,890 --> 00:23:44,070
ons free bucket to serve web files

654
00:23:41,250 --> 00:23:45,570
static web funds and basically I can

655
00:23:44,070 --> 00:23:48,770
also have so I already have some kind of

656
00:23:45,570 --> 00:23:51,360
a website that's redirecting all of the

657
00:23:48,770 --> 00:23:53,190
queries and then you can actually save

658
00:23:51,360 --> 00:23:54,870
all the excess logs so I have another

659
00:23:53,190 --> 00:23:56,790
bucket to save the excess logs and

660
00:23:54,870 --> 00:23:58,830
create a really quick lambda with a

661
00:23:56,790 --> 00:24:00,690
combination to elasticsearch now all of

662
00:23:58,830 --> 00:24:02,490
that is just a simple next next next you

663
00:24:00,690 --> 00:24:05,280
don't even need to be a program program

664
00:24:02,490 --> 00:24:07,410
how much and I'm copying every log to

665
00:24:05,280 --> 00:24:09,149
the elastic self service so basically

666
00:24:07,410 --> 00:24:11,160
what happens we redirect the traffic to

667
00:24:09,150 --> 00:24:13,410
us we already seeing some logs from the

668
00:24:11,160 --> 00:24:15,300
malware and in less than an hour I

669
00:24:13,410 --> 00:24:17,370
already have like a show of graph this

670
00:24:15,300 --> 00:24:19,379
is like a time to rapid show of graph of

671
00:24:17,370 --> 00:24:20,939
all the eath maps of all the IPS or

672
00:24:19,380 --> 00:24:22,080
around the world that are basically

673
00:24:20,940 --> 00:24:23,870
attacking us

674
00:24:22,080 --> 00:24:26,750
so it's

675
00:24:23,870 --> 00:24:29,419
schon took me I think I calculate with

676
00:24:26,750 --> 00:24:32,420
brakes maybe an hour and a half to get a

677
00:24:29,420 --> 00:24:34,970
malware to analyze it just to create a

678
00:24:32,420 --> 00:24:36,800
full server less sinkhole and actually

679
00:24:34,970 --> 00:24:38,660
already have results so I can actually

680
00:24:36,800 --> 00:24:40,520
for example the IP here in Israel was

681
00:24:38,660 --> 00:24:42,080
belong to a bank and I've send it like

682
00:24:40,520 --> 00:24:43,580
after two hours and told em hey guys you

683
00:24:42,080 --> 00:24:45,949
got an infection

684
00:24:43,580 --> 00:24:47,809
the main one in United Kingdom you guys

685
00:24:45,950 --> 00:24:50,660
are not actually infected this is 14 at

686
00:24:47,809 --> 00:24:53,840
sandbox so the analyzing that malware a

687
00:24:50,660 --> 00:24:56,980
lot so just a couple examples alright so

688
00:24:53,840 --> 00:24:56,980
let's do a quick demo

689
00:25:10,630 --> 00:25:16,090
hopefully I said my prayers to the demo

690
00:25:12,860 --> 00:25:18,289
God and everything is working fine

691
00:25:16,090 --> 00:25:21,490
alright so basically what you're seeing

692
00:25:18,289 --> 00:25:25,309
here it's called cloud 9 is a cloud

693
00:25:21,490 --> 00:25:27,500
browser only IDE by Amazon basically you

694
00:25:25,309 --> 00:25:29,240
can have your own environment set up and

695
00:25:27,500 --> 00:25:31,159
just use your browser whatever computer

696
00:25:29,240 --> 00:25:32,840
you use and you can write your code now

697
00:25:31,159 --> 00:25:34,820
it's not the best idea like if you work

698
00:25:32,840 --> 00:25:36,439
with Python PI H I might be better but

699
00:25:34,820 --> 00:25:39,529
it has a really good integrations with

700
00:25:36,440 --> 00:25:41,269
all the cloud Amazon service functions

701
00:25:39,529 --> 00:25:42,850
so what I'm going to do here basically

702
00:25:41,269 --> 00:25:46,100
we're going to build a really quick

703
00:25:42,850 --> 00:25:48,649
domain analyzer API send some kind of a

704
00:25:46,100 --> 00:25:50,120
queries and get results back so what I'm

705
00:25:48,649 --> 00:25:53,539
going to do first I'm going to create a

706
00:25:50,120 --> 00:25:55,969
folder for our app and because I'm

707
00:25:53,539 --> 00:25:57,740
working with Python 3.6 for this example

708
00:25:55,970 --> 00:25:59,539
I'm going to create a virtual

709
00:25:57,740 --> 00:26:01,429
environment always work with virtual

710
00:25:59,539 --> 00:26:02,658
environments if you don't start do it

711
00:26:01,429 --> 00:26:11,750
now because it's gonna save you a lot of

712
00:26:02,659 --> 00:26:13,549
problems all right

713
00:26:11,750 --> 00:26:15,529
I'm inside my virtual environment and

714
00:26:13,549 --> 00:26:17,899
now I'm going to store a framework

715
00:26:15,529 --> 00:26:20,090
called Charlie's Challis is basically a

716
00:26:17,899 --> 00:26:22,158
really getting started framework in

717
00:26:20,090 --> 00:26:24,620
Python they do a lot of the backend for

718
00:26:22,159 --> 00:26:26,149
service for you to get started I don't

719
00:26:24,620 --> 00:26:27,889
usually recommend it for production

720
00:26:26,149 --> 00:26:30,168
we'll see why in a few minutes

721
00:26:27,889 --> 00:26:31,699
but it's cool to get started good to get

722
00:26:30,169 --> 00:26:33,080
understanding what you can do with it

723
00:26:31,700 --> 00:26:35,450
and play with it a bit that the

724
00:26:33,080 --> 00:26:37,699
commutation is actually pretty well so

725
00:26:35,450 --> 00:26:43,149
now I'm going to do it stylist charlie

726
00:26:37,700 --> 00:26:46,539
sorry an internet stopped working new

727
00:26:43,149 --> 00:26:51,340
project and let's call it domain

728
00:26:46,539 --> 00:26:55,190
analyzer kinda loser that's good

729
00:26:51,340 --> 00:26:58,309
actually like the name alright so I'm

730
00:26:55,190 --> 00:27:00,500
going to see the Intuit and a loser and

731
00:26:58,309 --> 00:27:03,049
if we look at it we're basically let's

732
00:27:00,500 --> 00:27:05,120
do an LS we actually have app dot py

733
00:27:03,049 --> 00:27:09,970
that's our main app and requirements

734
00:27:05,120 --> 00:27:12,918
we're actually going to ignore the the

735
00:27:09,970 --> 00:27:14,600
requirements but for lamda it's really

736
00:27:12,919 --> 00:27:16,370
important if you're using any kind of

737
00:27:14,600 --> 00:27:18,350
third-party prick with a lot coming

738
00:27:16,370 --> 00:27:20,000
built-in with lambda you need to bring

739
00:27:18,350 --> 00:27:21,709
the actual binary source elf really

740
00:27:20,000 --> 00:27:23,149
really important but for this demo we

741
00:27:21,710 --> 00:27:25,399
are going to skip that because it

742
00:27:23,149 --> 00:27:27,830
takes a bit of time so basically what we

743
00:27:25,399 --> 00:27:29,869
have here is a simple app we import the

744
00:27:27,830 --> 00:27:33,649
main charli's framework we got some

745
00:27:29,869 --> 00:27:35,449
domain analyzer app and we have the

746
00:27:33,649 --> 00:27:39,258
route router is really important

747
00:27:35,450 --> 00:27:42,619
basically telling the API gateway this

748
00:27:39,259 --> 00:27:45,999
route direct it to this function the DEF

749
00:27:42,619 --> 00:27:50,209
here so we have hello whoa let's call it

750
00:27:45,999 --> 00:27:53,299
besides Liverpool all right now we're

751
00:27:50,210 --> 00:27:55,669
going to do is simple child is deployed

752
00:27:53,299 --> 00:27:57,859
and what choice is doing now it's

753
00:27:55,669 --> 00:28:00,440
setting up an I am rule with only the

754
00:27:57,859 --> 00:28:02,299
permissions you need kind of and

755
00:28:00,440 --> 00:28:03,919
creating a new function coordinate

756
00:28:02,299 --> 00:28:06,408
domain on a looser

757
00:28:03,919 --> 00:28:09,469
and then basically deploying the code to

758
00:28:06,409 --> 00:28:11,509
it once it's deployed allocating API

759
00:28:09,469 --> 00:28:13,460
gateway that is every time the eye

760
00:28:11,509 --> 00:28:14,869
packet will get triggered the lambda

761
00:28:13,460 --> 00:28:16,820
gets triggered with the input you ever

762
00:28:14,869 --> 00:28:21,199
actually sent to it so what we have here

763
00:28:16,820 --> 00:28:23,389
is an API URL click on it and hey we

764
00:28:21,200 --> 00:28:26,690
have a little bit site Liverpool pretty

765
00:28:23,389 --> 00:28:28,279
simple right now but remember all of you

766
00:28:26,690 --> 00:28:30,019
can go to this link right now it's going

767
00:28:28,279 --> 00:28:31,700
to work almost everybody in the world

768
00:28:30,019 --> 00:28:33,169
can go to this link right now it will

769
00:28:31,700 --> 00:28:35,509
work it will stay there and you can only

770
00:28:33,169 --> 00:28:38,869
go will only pay for those type of words

771
00:28:35,509 --> 00:28:40,940
there's actually radical now what I'm

772
00:28:38,869 --> 00:28:42,738
going to do is I'm going to just copy a

773
00:28:40,940 --> 00:28:45,320
bit to save some time and we're gonna go

774
00:28:42,739 --> 00:28:49,669
through this code so first thing I do is

775
00:28:45,320 --> 00:28:51,769
I copy a couple of imports if anyone

776
00:28:49,669 --> 00:28:54,559
worked with Python before then socket

777
00:28:51,769 --> 00:28:57,919
pretty standard don't use it library

778
00:28:54,559 --> 00:29:00,830
that does Network some bad requests and

779
00:28:57,919 --> 00:29:02,599
a Python request anyone work with Python

780
00:29:00,830 --> 00:29:05,109
on web then it's a library really really

781
00:29:02,599 --> 00:29:08,239
want to use to work with web pages etc

782
00:29:05,109 --> 00:29:10,158
api's alright so we have that and now

783
00:29:08,239 --> 00:29:12,950
what I'm going to do a copy a few simple

784
00:29:10,159 --> 00:29:16,629
definitions that are going to be the

785
00:29:12,950 --> 00:29:18,739
main code base for our API today

786
00:29:16,629 --> 00:29:21,168
everybody can see well the code and

787
00:29:18,739 --> 00:29:23,359
everything cool so basically what we

788
00:29:21,169 --> 00:29:25,039
have here for example we're going to do

789
00:29:23,359 --> 00:29:26,928
nslookup we're gonna give it a domain

790
00:29:25,039 --> 00:29:29,629
and we're gonna get an IP n return so

791
00:29:26,929 --> 00:29:35,180
something like that and let's look up

792
00:29:29,629 --> 00:29:37,679
and let's do besides Liverpool

793
00:29:35,180 --> 00:29:40,140
all right so we have besides Liverpool

794
00:29:37,680 --> 00:29:41,880
and look at it this is the parameter

795
00:29:40,140 --> 00:29:44,700
we're actually taking so we take in

796
00:29:41,880 --> 00:29:46,890
straight any parameter giving in the URL

797
00:29:44,700 --> 00:29:50,640
and we're actually very badly giving it

798
00:29:46,890 --> 00:29:51,930
back to the socket ghettos by name don't

799
00:29:50,640 --> 00:29:53,610
do that there's actually some

800
00:29:51,930 --> 00:29:55,140
vulnerabilities in here but it's just a

801
00:29:53,610 --> 00:29:56,580
really simple example and we're

802
00:29:55,140 --> 00:29:58,980
returning it back to the user with the

803
00:29:56,580 --> 00:30:00,540
domain they gave and the actual IP all

804
00:29:58,980 --> 00:30:02,730
right another thing we're going to do is

805
00:30:00,540 --> 00:30:04,740
last year I did a talk about malicious

806
00:30:02,730 --> 00:30:06,990
script or miners and we've created a

807
00:30:04,740 --> 00:30:09,300
feed and an API this is actually a some

808
00:30:06,990 --> 00:30:11,280
of the way Mel's cambot is also using it

809
00:30:09,300 --> 00:30:13,139
in the background and basically an API

810
00:30:11,280 --> 00:30:16,230
you can query a fee that's on get up

811
00:30:13,140 --> 00:30:18,780
that's at least most of the crypto minor

812
00:30:16,230 --> 00:30:21,600
domains and returns some kind of a

813
00:30:18,780 --> 00:30:24,120
message if it seemed in those feed or

814
00:30:21,600 --> 00:30:25,889
not and the last thing I'm pretty lazy

815
00:30:24,120 --> 00:30:28,110
you probably know this by now so I don't

816
00:30:25,890 --> 00:30:30,510
like to analyze a domain with just the

817
00:30:28,110 --> 00:30:31,860
IP and then the domain the crypto miners

818
00:30:30,510 --> 00:30:34,500
and everything so I created a kind of a

819
00:30:31,860 --> 00:30:41,639
mix of everything that I called analyze

820
00:30:34,500 --> 00:30:45,390
make sense cool now we're going to do we

821
00:30:41,640 --> 00:30:46,800
say Dino's and now I'm going to do again

822
00:30:45,390 --> 00:30:49,410
Charlie's deploy so it's pretty cool you

823
00:30:46,800 --> 00:30:51,270
can see how fast we can deploy apps

824
00:30:49,410 --> 00:30:53,940
really really fast doing minor changes

825
00:30:51,270 --> 00:30:56,790
of the code so what we have here is a

826
00:30:53,940 --> 00:30:59,070
nice look up besides Liverpool and you

827
00:30:56,790 --> 00:31:01,889
see we already have some kind of reply

828
00:30:59,070 --> 00:31:04,399
about the besides Liverpool hopefully

829
00:31:01,890 --> 00:31:07,650
you are not in the current blocker list

830
00:31:04,400 --> 00:31:09,780
that's gonna look bad if you do no nice

831
00:31:07,650 --> 00:31:13,250
and the last thing basically

832
00:31:09,780 --> 00:31:15,899
let's do analyze and we got the answer

833
00:31:13,250 --> 00:31:17,610
so again we can make it more beautiful

834
00:31:15,900 --> 00:31:18,600
or anything but remember this is

835
00:31:17,610 --> 00:31:20,729
something you can actually use really

836
00:31:18,600 --> 00:31:21,899
really fast the cool thing about API get

837
00:31:20,730 --> 00:31:23,820
where lambda there's some building

838
00:31:21,900 --> 00:31:25,650
protections you can actually generate

839
00:31:23,820 --> 00:31:26,879
quotas so if someone you want to give

840
00:31:25,650 --> 00:31:28,860
you a friend only hundred queries a day

841
00:31:26,880 --> 00:31:32,220
stuff like that they will do it for you

842
00:31:28,860 --> 00:31:34,080
as well and again multi-national a lot

843
00:31:32,220 --> 00:31:36,960
of places everything can use it very

844
00:31:34,080 --> 00:31:38,699
very scalable alright so last thing

845
00:31:36,960 --> 00:31:39,420
because I don't want it to be overly

846
00:31:38,700 --> 00:31:45,320
abused

847
00:31:39,420 --> 00:31:45,320
charli's delete all right

848
00:31:46,530 --> 00:31:51,870
all right so just finishing up quick

849
00:31:49,440 --> 00:31:53,460
recap we went through some of the things

850
00:31:51,870 --> 00:31:54,629
at least for myself I found really

851
00:31:53,460 --> 00:31:56,490
really challenging when I was building

852
00:31:54,630 --> 00:31:59,070
my research up and I was working with

853
00:31:56,490 --> 00:32:00,750
other teams with other companies we went

854
00:31:59,070 --> 00:32:02,280
through many several s some

855
00:32:00,750 --> 00:32:04,260
introductions things did they do better

856
00:32:02,280 --> 00:32:06,660
at some security considerations common

857
00:32:04,260 --> 00:32:09,960
vulnerabilities etc we went through some

858
00:32:06,660 --> 00:32:13,200
usage of like binary alert mel's cambot

859
00:32:09,960 --> 00:32:15,630
we did a step by step how to build a

860
00:32:13,200 --> 00:32:16,920
sinkhole hopefully that was a bit of

861
00:32:15,630 --> 00:32:18,930
insight if that you can build your own

862
00:32:16,920 --> 00:32:21,060
apps with it as well and let's do we did

863
00:32:18,930 --> 00:32:24,000
a quick demo using Charlie's how we can

864
00:32:21,060 --> 00:32:25,070
deploy a domain analyzer app so uh thank

865
00:32:24,000 --> 00:32:28,119
you

866
00:32:25,070 --> 00:32:28,119
[Applause]

