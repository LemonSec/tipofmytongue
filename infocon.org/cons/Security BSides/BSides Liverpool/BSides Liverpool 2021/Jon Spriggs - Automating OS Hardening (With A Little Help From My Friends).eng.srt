1
00:00:05,120 --> 00:00:07,200
hi i'm john spriggs and i'm giving a

2
00:00:07,200 --> 00:00:09,120
talk today called automating os

3
00:00:09,120 --> 00:00:10,800
hardening with little help from my

4
00:00:10,800 --> 00:00:15,960
friends cis benchmarks and ansible

5
00:00:16,480 --> 00:00:18,880
so as is fairly customary in talks like

6
00:00:18,880 --> 00:00:21,119
this i should introduce myself i'm john

7
00:00:21,119 --> 00:00:22,160
spriggs

8
00:00:22,160 --> 00:00:24,080
sometimes called john the nice guy i'm

9
00:00:24,080 --> 00:00:25,760
an automation and orchestration

10
00:00:25,760 --> 00:00:29,039
specialist uh focusing mostly on cloud

11
00:00:29,039 --> 00:00:31,039
security i'm also a distinguished

12
00:00:31,039 --> 00:00:33,120
engineer of the company who employs me

13
00:00:33,120 --> 00:00:34,719
well actually that was

14
00:00:34,719 --> 00:00:37,280
last week

15
00:00:37,520 --> 00:00:40,000
as of this week or next monday rather

16
00:00:40,000 --> 00:00:42,000
i'll be a technical account manager for

17
00:00:42,000 --> 00:00:44,239
a very very large company don't know

18
00:00:44,239 --> 00:00:46,640
what that all entails here but anyway i

19
00:00:46,640 --> 00:00:49,120
also podcast blog do twitch and youtube

20
00:00:49,120 --> 00:00:51,199
streams and well stuff like what we're

21
00:00:51,199 --> 00:00:52,399
about to go through

22
00:00:52,399 --> 00:00:54,399
just a little bit less polished and i

23
00:00:54,399 --> 00:00:56,079
like to talk my wife said i should just

24
00:00:56,079 --> 00:00:58,160
leave it there but well i should follow

25
00:00:58,160 --> 00:00:59,920
that up by saying i like to talk at

26
00:00:59,920 --> 00:01:01,680
conferences so this is exactly the sort

27
00:01:01,680 --> 00:01:04,640
of stuff that i like to talk about

28
00:01:05,119 --> 00:01:06,960
and what am i going to be talking about

29
00:01:06,960 --> 00:01:09,520
well this is a talk for the blue teamers

30
00:01:09,520 --> 00:01:11,280
out there i'm talking about hardening

31
00:01:11,280 --> 00:01:13,119
your operating systems and server

32
00:01:13,119 --> 00:01:15,280
applications with a framework called the

33
00:01:15,280 --> 00:01:17,759
cis benchmark i'm also talking about

34
00:01:17,759 --> 00:01:20,080
automation tool called ansible

35
00:01:20,080 --> 00:01:21,759
now this may already be in use in many

36
00:01:21,759 --> 00:01:23,759
of your organizations or if not

37
00:01:23,759 --> 00:01:25,360
answerable then something similar the

38
00:01:25,360 --> 00:01:26,880
main alternatives that i know about are

39
00:01:26,880 --> 00:01:29,920
puppet chef and salt but i really know

40
00:01:29,920 --> 00:01:30,960
ansible so that's what i'm going to be

41
00:01:30,960 --> 00:01:33,520
talking about

42
00:01:33,520 --> 00:01:35,840
so let's get on with this show here is a

43
00:01:35,840 --> 00:01:37,759
mildly tweaked version of the cis

44
00:01:37,759 --> 00:01:39,920
benchmark website this lists all of the

45
00:01:39,920 --> 00:01:41,759
benchmarks they offer covering operating

46
00:01:41,759 --> 00:01:45,200
systems like amazon linux debian ubuntu

47
00:01:45,200 --> 00:01:48,640
red hat enterprise linux and windows

48
00:01:48,640 --> 00:01:50,799
they also cover browsers virtualization

49
00:01:50,799 --> 00:01:52,560
platforms office applications and even

50
00:01:52,560 --> 00:01:55,360
server services like apache httpd the

51
00:01:55,360 --> 00:01:58,159
bind dns service free radius ios

52
00:01:58,159 --> 00:02:00,479
sharepoint mysql i did remove the list

53
00:02:00,479 --> 00:02:02,719
of mobile operating systems whilst i was

54
00:02:02,719 --> 00:02:04,880
shuffling the list around and by mistake

55
00:02:04,880 --> 00:02:06,479
i forgot to add it back in but it is

56
00:02:06,479 --> 00:02:08,720
supposed to be there too now this page

57
00:02:08,720 --> 00:02:10,000
is the one that you get to from

58
00:02:10,000 --> 00:02:12,000
whichever benchmark you click on from

59
00:02:12,000 --> 00:02:13,680
the main site so if you go and search

60
00:02:13,680 --> 00:02:16,239
for anything in the cion um

61
00:02:16,239 --> 00:02:18,000
benchmark site you get to this page

62
00:02:18,000 --> 00:02:19,040
eventually

63
00:02:19,040 --> 00:02:20,959
they email you a url which takes you to

64
00:02:20,959 --> 00:02:22,319
another list which gives you the actual

65
00:02:22,319 --> 00:02:24,080
download they don't really care which

66
00:02:24,080 --> 00:02:25,760
benchmark you're actually clicking on

67
00:02:25,760 --> 00:02:29,040
just that your email address is valid

68
00:02:29,040 --> 00:02:31,840
uh because it's an email address i'm not

69
00:02:31,840 --> 00:02:33,280
really sure whether you get put on a

70
00:02:33,280 --> 00:02:34,959
spam list at that point because the

71
00:02:34,959 --> 00:02:36,480
company that i

72
00:02:36,480 --> 00:02:38,160
used to work for had actually signed up

73
00:02:38,160 --> 00:02:39,680
for a corporate corporate membership at

74
00:02:39,680 --> 00:02:42,160
this site so i get to go in a different

75
00:02:42,160 --> 00:02:44,560
way but i don't recall getting any extra

76
00:02:44,560 --> 00:02:46,080
spam when i signed up for it with my

77
00:02:46,080 --> 00:02:47,840
personal address so

78
00:02:47,840 --> 00:02:51,360
your mileage may vary i don't know

79
00:02:51,360 --> 00:02:53,599
um

80
00:02:56,879 --> 00:02:58,640
sorry just got lost there for a second

81
00:02:58,640 --> 00:03:00,239
it's also worth mentioning the terms and

82
00:03:00,239 --> 00:03:01,840
conditions here as well you're not

83
00:03:01,840 --> 00:03:03,519
allowed to use this as a commercial

84
00:03:03,519 --> 00:03:05,440
offering so you can use it to having

85
00:03:05,440 --> 00:03:07,519
your own servers but you best not offer

86
00:03:07,519 --> 00:03:09,920
a cis hardening service if you want to

87
00:03:09,920 --> 00:03:11,599
go with the free account i think even

88
00:03:11,599 --> 00:03:13,280
the paid corporate service prevents that

89
00:03:13,280 --> 00:03:14,879
too so just check what you're planning

90
00:03:14,879 --> 00:03:16,319
to do with those benchmarks before you

91
00:03:16,319 --> 00:03:18,400
use them okay that's all the legal

92
00:03:18,400 --> 00:03:20,159
disclaimers out of the way let's take a

93
00:03:20,159 --> 00:03:23,679
look at the ubuntu benchmark

94
00:03:24,879 --> 00:03:26,560
well actually it's just the table of

95
00:03:26,560 --> 00:03:28,959
contents for right now you see

96
00:03:28,959 --> 00:03:31,200
each of those numbered points there

97
00:03:31,200 --> 00:03:32,519
uh

98
00:03:32,519 --> 00:03:34,879
1.1.1.1.1.1 and so on and so forth

99
00:03:34,879 --> 00:03:36,480
these are checks to perform now on my

100
00:03:36,480 --> 00:03:38,159
screen i can see file system

101
00:03:38,159 --> 00:03:39,760
configuration which can covers

102
00:03:39,760 --> 00:03:41,519
preventing certain certain kernel

103
00:03:41,519 --> 00:03:43,920
modules being loaded setting volume

104
00:03:43,920 --> 00:03:46,319
amount configuration values next is

105
00:03:46,319 --> 00:03:48,000
software updates file system integrity

106
00:03:48,000 --> 00:03:50,080
checking and so on just on this one page

107
00:03:50,080 --> 00:03:52,400
of the table of contents there's over 40

108
00:03:52,400 --> 00:03:56,080
checks so let's look at the next page

109
00:03:56,080 --> 00:03:57,360
oh look

110
00:03:57,360 --> 00:03:59,680
more checks setting up access control

111
00:03:59,680 --> 00:04:01,519
banners disabling gui logins removing

112
00:04:01,519 --> 00:04:03,120
server services network protocols you

113
00:04:03,120 --> 00:04:05,680
see this is blanket guidance turn off

114
00:04:05,680 --> 00:04:07,840
what you're not using on the box justify

115
00:04:07,840 --> 00:04:10,799
what you are it's just like a check test

116
00:04:10,799 --> 00:04:11,840
hmm

117
00:04:11,840 --> 00:04:15,120
strange that anyway next page more

118
00:04:15,120 --> 00:04:17,199
content more networking stuff enable a

119
00:04:17,199 --> 00:04:19,120
firewall configure it turn on order d

120
00:04:19,120 --> 00:04:20,478
use it

121
00:04:20,478 --> 00:04:23,199
then you get more auditly more logging

122
00:04:23,199 --> 00:04:25,759
authentication sudo ssh

123
00:04:25,759 --> 00:04:26,880
pam

124
00:04:26,880 --> 00:04:30,080
users permissions etc

125
00:04:30,080 --> 00:04:31,280
goodness this is just the table of

126
00:04:31,280 --> 00:04:32,720
contents

127
00:04:32,720 --> 00:04:34,720
well here we are last page all in all

128
00:04:34,720 --> 00:04:37,120
over 250 checks in here spanning 11

129
00:04:37,120 --> 00:04:39,280
pages just of content and nearly 500

130
00:04:39,280 --> 00:04:41,280
pages of actual content so should we

131
00:04:41,280 --> 00:04:44,479
have a look at one of the actual checks

132
00:04:44,479 --> 00:04:47,520
so this is um a simple check i've

133
00:04:47,520 --> 00:04:49,360
checked skipped past the check whether a

134
00:04:49,360 --> 00:04:51,520
kernel is loaded module my kernel module

135
00:04:51,520 --> 00:04:53,280
loaded checks and gone straight for the

136
00:04:53,280 --> 00:04:54,560
installer package for faster to

137
00:04:54,560 --> 00:04:55,600
integrate

138
00:04:55,600 --> 00:04:57,520
file system integrity checking

139
00:04:57,520 --> 00:04:59,440
basically you've got six sections here

140
00:04:59,440 --> 00:05:01,039
what sort of profile machine this will

141
00:05:01,039 --> 00:05:04,000
check relevant to which cya cis

142
00:05:04,000 --> 00:05:06,800
controls does it support

143
00:05:06,800 --> 00:05:07,840
um

144
00:05:07,840 --> 00:05:10,160
why would you want to run this check how

145
00:05:10,160 --> 00:05:12,560
do you run this check

146
00:05:12,560 --> 00:05:14,720
and then how to remediate a failure of

147
00:05:14,720 --> 00:05:17,199
that check this one also lists a few

148
00:05:17,199 --> 00:05:18,880
other bits and pieces like the details

149
00:05:18,880 --> 00:05:20,320
about the problems you might run into

150
00:05:20,320 --> 00:05:23,199
when you're using this

151
00:05:23,360 --> 00:05:25,039
so this is looking for a particular

152
00:05:25,039 --> 00:05:27,600
software package in this case eight and

153
00:05:27,600 --> 00:05:29,440
it's telling you how to install it and

154
00:05:29,440 --> 00:05:31,199
then how to perform basic configuration

155
00:05:31,199 --> 00:05:33,199
on it even without automation side of

156
00:05:33,199 --> 00:05:35,039
things these are actually really useful

157
00:05:35,039 --> 00:05:36,880
documents so

158
00:05:36,880 --> 00:05:38,880
what's next

159
00:05:38,880 --> 00:05:40,400
well let's look at ansible now i thought

160
00:05:40,400 --> 00:05:41,600
you might have had a bit too much text

161
00:05:41,600 --> 00:05:44,000
on the previous few pages so i drew a

162
00:05:44,000 --> 00:05:45,680
pretty diagram well

163
00:05:45,680 --> 00:05:48,160
say pretty ansible is an open source

164
00:05:48,160 --> 00:05:49,680
project from red hat you can run the

165
00:05:49,680 --> 00:05:52,080
command line tool on any unix like shell

166
00:05:52,080 --> 00:05:54,639
including linux and osx doesn't natively

167
00:05:54,639 --> 00:05:55,919
run on windows but if you're running

168
00:05:55,919 --> 00:05:58,479
windows subsystem for linux wsl it'll

169
00:05:58,479 --> 00:06:02,000
run quite nicely albeit slowly on there

170
00:06:02,000 --> 00:06:03,680
if your environment doesn't use wsl or

171
00:06:03,680 --> 00:06:05,919
let you run it in a bastion host you can

172
00:06:05,919 --> 00:06:08,000
install the ansible automation platform

173
00:06:08,000 --> 00:06:09,840
which is a charged product from red hat

174
00:06:09,840 --> 00:06:11,520
or their open source upstream project

175
00:06:11,520 --> 00:06:14,080
awx awx is basically an unbranded

176
00:06:14,080 --> 00:06:15,680
version of the ansible automation

177
00:06:15,680 --> 00:06:17,919
platform and in theory runs on any

178
00:06:17,919 --> 00:06:20,080
system that runs docker personally i've

179
00:06:20,080 --> 00:06:22,319
only tried awx on ubuntu and ansible

180
00:06:22,319 --> 00:06:24,479
automation platform on braille

181
00:06:24,479 --> 00:06:26,800
awx and the anti-ansible automation

182
00:06:26,800 --> 00:06:28,400
platform have engines that run the same

183
00:06:28,400 --> 00:06:30,160
playbooks that the command line tool and

184
00:06:30,160 --> 00:06:32,240
civil runs so from this point i'll refer

185
00:06:32,240 --> 00:06:33,759
to everything as though we're just the

186
00:06:33,759 --> 00:06:35,759
command line version

187
00:06:35,759 --> 00:06:38,400
which is good otherwise you'd have even

188
00:06:38,400 --> 00:06:39,759
more pointless screenshots in the

189
00:06:39,759 --> 00:06:41,680
forthcoming pages

190
00:06:41,680 --> 00:06:44,000
so answer will use an inventory file or

191
00:06:44,000 --> 00:06:45,680
an inventory script to determine which

192
00:06:45,680 --> 00:06:47,759
hosts it needs to talk to it also reads

193
00:06:47,759 --> 00:06:50,000
a yaml file which details what plays

194
00:06:50,000 --> 00:06:51,919
it's going to execute and a play is a

195
00:06:51,919 --> 00:06:54,240
combination of a host selection and a

196
00:06:54,240 --> 00:06:55,520
collection of tasks which will be

197
00:06:55,520 --> 00:06:56,800
performed sequentially across all those

198
00:06:56,800 --> 00:06:59,759
hosts each task is executed against one

199
00:06:59,759 --> 00:07:01,919
of the following a server connected over

200
00:07:01,919 --> 00:07:03,680
ssh or winrm

201
00:07:03,680 --> 00:07:07,759
a network device over https or ssh

202
00:07:07,759 --> 00:07:11,680
and a cloud or sas api over https so

203
00:07:11,680 --> 00:07:14,880
what might that look like

204
00:07:15,520 --> 00:07:17,520
so here's a simple representation of

205
00:07:17,520 --> 00:07:19,120
that previous slide

206
00:07:19,120 --> 00:07:21,280
so on our unix like shell

207
00:07:21,280 --> 00:07:23,440
we execute the command and simple

208
00:07:23,440 --> 00:07:25,840
playbook telling it which playbook to

209
00:07:25,840 --> 00:07:26,720
read

210
00:07:26,720 --> 00:07:30,840
and which inventory file to read

211
00:07:31,120 --> 00:07:32,160
then

212
00:07:32,160 --> 00:07:34,080
here's our playbook the playbook has a

213
00:07:34,080 --> 00:07:36,319
sim a single in this case play which is

214
00:07:36,319 --> 00:07:37,520
named

215
00:07:37,520 --> 00:07:39,360
confirm comment

216
00:07:39,360 --> 00:07:42,319
that lists which hostile target

217
00:07:42,319 --> 00:07:44,240
and the tasks it wants to be performed

218
00:07:44,240 --> 00:07:45,919
now in this case the first task is going

219
00:07:45,919 --> 00:07:47,440
to be a connection check using the

220
00:07:47,440 --> 00:07:50,240
module ping that's not the icmp or udp

221
00:07:50,240 --> 00:07:52,639
ping but more like the ilc ping pong

222
00:07:52,639 --> 00:07:54,240
challenge response

223
00:07:54,240 --> 00:07:55,199
um

224
00:07:55,199 --> 00:07:57,520
it's named confirm we can connect and

225
00:07:57,520 --> 00:07:59,120
registers the response in the comms

226
00:07:59,120 --> 00:08:01,280
check variable

227
00:08:01,280 --> 00:08:02,800
next we output our response using the

228
00:08:02,800 --> 00:08:04,639
debug module which we pass in our

229
00:08:04,639 --> 00:08:06,400
argument of the variable columnscheck

230
00:08:06,400 --> 00:08:07,919
that we previously defined we also say

231
00:08:07,919 --> 00:08:10,160
we only want this command to run if the

232
00:08:10,160 --> 00:08:12,800
previous command didn't fail

233
00:08:12,800 --> 00:08:14,800
so that's our playbook done in our entry

234
00:08:14,800 --> 00:08:16,479
file we first list the localhost now if

235
00:08:16,479 --> 00:08:18,639
we run ansible without any inventory you

236
00:08:18,639 --> 00:08:20,639
get the localhost added automatically

237
00:08:20,639 --> 00:08:22,879
but as soon as you add an inventory file

238
00:08:22,879 --> 00:08:24,560
you need to manually specify the

239
00:08:24,560 --> 00:08:26,400
localhost and here we can see that the

240
00:08:26,400 --> 00:08:27,840
localhost variable has a variable

241
00:08:27,840 --> 00:08:29,280
assigned against it from the outset the

242
00:08:29,280 --> 00:08:31,199
ansible connection equals local

243
00:08:31,199 --> 00:08:33,519
so by default ansible talks ssh anytime

244
00:08:33,519 --> 00:08:35,279
we're not using ssh we need to tell

245
00:08:35,279 --> 00:08:36,880
ansible that we'll see another example

246
00:08:36,880 --> 00:08:39,120
of that in a bit

247
00:08:39,120 --> 00:08:41,360
so next we jump down to the group linux

248
00:08:41,360 --> 00:08:43,599
all linux servers

249
00:08:43,599 --> 00:08:45,279
now again we've included the local host

250
00:08:45,279 --> 00:08:46,880
in this group as it's actually running

251
00:08:46,880 --> 00:08:48,720
wsl so therefore it's kind of a linux

252
00:08:48,720 --> 00:08:49,680
environment

253
00:08:49,680 --> 00:08:51,360
i've also added a web load balancer and

254
00:08:51,360 --> 00:08:52,480
because that doesn't resolve to a

255
00:08:52,480 --> 00:08:54,320
specific host in either the dns server

256
00:08:54,320 --> 00:08:56,480
nor in our ssh config file

257
00:08:56,480 --> 00:08:58,160
i've specified the real hostname it will

258
00:08:58,160 --> 00:09:00,000
connect to so this means you can give a

259
00:09:00,000 --> 00:09:02,080
long complex host name a short alias or

260
00:09:02,080 --> 00:09:03,760
it can give a meaningless host name or

261
00:09:03,760 --> 00:09:05,600
ip address descriptive names for your

262
00:09:05,600 --> 00:09:08,000
logging purposes

263
00:09:08,000 --> 00:09:10,240
lastly in this block i've added a dns

264
00:09:10,240 --> 00:09:12,080
resolvable range of three back end

265
00:09:12,080 --> 00:09:14,240
servers now naturally

266
00:09:14,240 --> 00:09:16,399
those won't actually resolve

267
00:09:16,399 --> 00:09:18,959
well you'll see that in a bit

268
00:09:18,959 --> 00:09:21,120
um i've also added some windows servers

269
00:09:21,120 --> 00:09:23,120
even though they're not referenced in

270
00:09:23,120 --> 00:09:25,200
the playbook because well

271
00:09:25,200 --> 00:09:26,320
maybe there's another playbook which

272
00:09:26,320 --> 00:09:28,800
targets windows servers or perhaps we

273
00:09:28,800 --> 00:09:30,320
didn't get to those tasks yet when we

274
00:09:30,320 --> 00:09:33,040
were writing the playbook either way

275
00:09:33,040 --> 00:09:36,320
we have two ip addressed note hosts 81

276
00:09:36,320 --> 00:09:37,519
and 82

277
00:09:37,519 --> 00:09:38,800
and like with the load balancer they

278
00:09:38,800 --> 00:09:42,240
don't have dns names instead they have

279
00:09:42,240 --> 00:09:44,720
an ip address

280
00:09:44,720 --> 00:09:47,519
we also have seven dns resolvable rds

281
00:09:47,519 --> 00:09:50,080
servers excellent we're not going to

282
00:09:50,080 --> 00:09:51,440
connect to those but you'll see what

283
00:09:51,440 --> 00:09:53,680
happens anyway these windows servers all

284
00:09:53,680 --> 00:09:55,440
have some common connection variables

285
00:09:55,440 --> 00:09:59,040
like they use with rm for example

286
00:09:59,040 --> 00:10:01,040
they have a common service council

287
00:10:01,040 --> 00:10:03,200
against them and if i were being

288
00:10:03,200 --> 00:10:05,600
completely and entirely insecure i'd

289
00:10:05,600 --> 00:10:07,519
dump a plain text password

290
00:10:07,519 --> 00:10:09,600
for this service account into the

291
00:10:09,600 --> 00:10:12,000
inventory but i'm not completely foolish

292
00:10:12,000 --> 00:10:13,920
no instead i've stored that password in

293
00:10:13,920 --> 00:10:15,920
an encrypted file in the group vars

294
00:10:15,920 --> 00:10:17,839
directory for this group of servers now

295
00:10:17,839 --> 00:10:19,279
ansible has its own name for this

296
00:10:19,279 --> 00:10:21,519
encryption system called volt it uses

297
00:10:21,519 --> 00:10:23,360
standard encryption primitives offhand i

298
00:10:23,360 --> 00:10:24,480
don't know what they were but i think

299
00:10:24,480 --> 00:10:26,240
it's aes256 something like that so it's

300
00:10:26,240 --> 00:10:28,079
not completely unreasonable and actually

301
00:10:28,079 --> 00:10:29,680
this is one of the few serious benefits

302
00:10:29,680 --> 00:10:32,240
of ansible tower and awx which is the

303
00:10:32,240 --> 00:10:34,800
awx or ansible tower can segregate the

304
00:10:34,800 --> 00:10:36,959
action of storing access credentials

305
00:10:36,959 --> 00:10:38,560
away from users who are actually

306
00:10:38,560 --> 00:10:40,720
executing the ansible playbooks so

307
00:10:40,720 --> 00:10:43,200
they're still in one central location

308
00:10:43,200 --> 00:10:44,839
and you can harden protect that host

309
00:10:44,839 --> 00:10:47,360
accordingly but they're not completely

310
00:10:47,360 --> 00:10:49,279
accessible to everyone anyway let's move

311
00:10:49,279 --> 00:10:51,519
on so the last thing we have in this

312
00:10:51,519 --> 00:10:53,279
inventory is a final group called all

313
00:10:53,279 --> 00:10:55,040
servers which has two child groups

314
00:10:55,040 --> 00:10:56,959
associated to it all linux and all

315
00:10:56,959 --> 00:10:58,640
windows servers so in theory we could

316
00:10:58,640 --> 00:11:00,640
target both platforms with a standard

317
00:11:00,640 --> 00:11:02,320
set of configuration steps we don't do

318
00:11:02,320 --> 00:11:03,279
that here

319
00:11:03,279 --> 00:11:04,640
but you can see how you might extend

320
00:11:04,640 --> 00:11:06,399
this out to other things as well so what

321
00:11:06,399 --> 00:11:07,920
does this actually look like when it

322
00:11:07,920 --> 00:11:10,319
runs

323
00:11:11,519 --> 00:11:14,880
skipped too far

324
00:11:14,880 --> 00:11:18,560
so let's run this video

325
00:11:18,560 --> 00:11:20,880
and it's stored off elsewhere so uh

326
00:11:20,880 --> 00:11:22,160
sorry about that it's not gonna look

327
00:11:22,160 --> 00:11:24,959
very pretty for a second

328
00:11:24,959 --> 00:11:28,439
let's run this

329
00:11:28,800 --> 00:11:31,279
so that's playbook minus i inventory

330
00:11:31,279 --> 00:11:32,800
playbook

331
00:11:32,800 --> 00:11:34,959
you see it's confirming the comms

332
00:11:34,959 --> 00:11:36,880
running the play confirming comes and it

333
00:11:36,880 --> 00:11:38,000
does the first thing it does it runs

334
00:11:38,000 --> 00:11:39,839
this gathering facts task now you see

335
00:11:39,839 --> 00:11:41,120
there it's failed to connect to some

336
00:11:41,120 --> 00:11:42,560
hosts because it couldn't resolve the

337
00:11:42,560 --> 00:11:44,320
host names

338
00:11:44,320 --> 00:11:46,959
after that it ran the test it then

339
00:11:46,959 --> 00:11:49,279
output the debug results we asked it to

340
00:11:49,279 --> 00:11:51,120
and then you get this recap at the end

341
00:11:51,120 --> 00:11:52,480
where you see here

342
00:11:52,480 --> 00:11:54,720
the fact that localhost ran okay it was

343
00:11:54,720 --> 00:11:57,200
able to run three tasks um

344
00:11:57,200 --> 00:11:58,880
the three back end servers were

345
00:11:58,880 --> 00:12:00,560
unreachable unreachable because it

346
00:12:00,560 --> 00:12:02,320
couldn't resolve the dns names and then

347
00:12:02,320 --> 00:12:04,240
the load balancer it connected too fine

348
00:12:04,240 --> 00:12:05,680
so that's good

349
00:12:05,680 --> 00:12:08,079
so let's uh let's close that screen and

350
00:12:08,079 --> 00:12:09,279
come back to

351
00:12:09,279 --> 00:12:11,839
our select

352
00:12:15,040 --> 00:12:19,360
so how does how else can we use ansible

353
00:12:19,360 --> 00:12:22,240
so that previous slide and in fact all

354
00:12:22,240 --> 00:12:23,440
the rest of these slides as well

355
00:12:23,440 --> 00:12:24,720
actually don't do

356
00:12:24,720 --> 00:12:26,880
really any templating but this is quite

357
00:12:26,880 --> 00:12:29,040
a large part of why i like ants we see

358
00:12:29,040 --> 00:12:30,560
almost anywhere you see a defined

359
00:12:30,560 --> 00:12:32,800
variable in an ansible playbook or a

360
00:12:32,800 --> 00:12:35,120
config file it can be templated and by

361
00:12:35,120 --> 00:12:36,959
that i mean ansible will on demand

362
00:12:36,959 --> 00:12:38,800
render that templated string to build a

363
00:12:38,800 --> 00:12:40,079
new value

364
00:12:40,079 --> 00:12:42,240
like in the yaml file here at the top we

365
00:12:42,240 --> 00:12:43,680
provide a default value when something's

366
00:12:43,680 --> 00:12:45,760
missing so some var might be defined

367
00:12:45,760 --> 00:12:47,360
somewhere else and if it's not there we

368
00:12:47,360 --> 00:12:50,240
use a default value you can run if else

369
00:12:50,240 --> 00:12:51,920
if

370
00:12:51,920 --> 00:12:54,959
else end if script and you can even do

371
00:12:54,959 --> 00:12:58,240
ternary you know if value is true then

372
00:12:58,240 --> 00:13:00,880
return true and so if value is x then

373
00:13:00,880 --> 00:13:03,760
return y and if it's not x then returns

374
00:13:03,760 --> 00:13:05,440
it

375
00:13:05,440 --> 00:13:07,120
you can also create template files as

376
00:13:07,120 --> 00:13:09,760
well so like in the bottom block there

377
00:13:09,760 --> 00:13:13,040
you can see a for loop there um stepping

378
00:13:13,040 --> 00:13:16,000
over items uh to build up a

379
00:13:16,000 --> 00:13:18,720
more complicated um

380
00:13:18,720 --> 00:13:20,720
more complicated configuration file or

381
00:13:20,720 --> 00:13:23,040
documentation file

382
00:13:23,040 --> 00:13:26,079
you can also see that there's um you can

383
00:13:26,079 --> 00:13:29,279
use these strings in tasks

384
00:13:29,279 --> 00:13:31,040
um

385
00:13:31,040 --> 00:13:33,279
so let's put ansible and the cis

386
00:13:33,279 --> 00:13:36,160
benchmark together

387
00:13:36,160 --> 00:13:38,480
so here we have our setup

388
00:13:38,480 --> 00:13:40,639
importing a role which currently has two

389
00:13:40,639 --> 00:13:41,839
files in it

390
00:13:41,839 --> 00:13:44,079
the defaults file which stores some

391
00:13:44,079 --> 00:13:46,000
overrideable values and the task which

392
00:13:46,000 --> 00:13:47,680
will be executed as part of that role

393
00:13:47,680 --> 00:13:49,279
now i'm not going to go too far into

394
00:13:49,279 --> 00:13:50,720
what this role does right now but

395
00:13:50,720 --> 00:13:52,560
basically it does the remediation steps

396
00:13:52,560 --> 00:13:54,720
we documented in the benchmark

397
00:13:54,720 --> 00:13:57,519
but only if that overrideable value

398
00:13:57,519 --> 00:14:01,279
down here execute cis harden os one one

399
00:14:01,279 --> 00:14:04,800
one one is true

400
00:14:08,800 --> 00:14:10,800
now when we put that role

401
00:14:10,800 --> 00:14:13,519
into your playbook

402
00:14:13,519 --> 00:14:15,839
it becomes a reusable block of code

403
00:14:15,839 --> 00:14:18,480
anywhere that you want to use it

404
00:14:18,480 --> 00:14:20,240
this screen shows two roles as part of a

405
00:14:20,240 --> 00:14:22,000
test playbook embedded into the

406
00:14:22,000 --> 00:14:24,639
environment using a github module packed

407
00:14:24,639 --> 00:14:25,839
now you can see where you might put

408
00:14:25,839 --> 00:14:28,000
those files to testings you can also

409
00:14:28,000 --> 00:14:29,279
store this role elsewhere in your

410
00:14:29,279 --> 00:14:31,120
environment and ask your developers to

411
00:14:31,120 --> 00:14:32,959
edit their requirements there's loads of

412
00:14:32,959 --> 00:14:34,560
documentation about this on the ansible

413
00:14:34,560 --> 00:14:35,760
website

414
00:14:35,760 --> 00:14:37,360
now if your team is already using

415
00:14:37,360 --> 00:14:39,199
ansible then perhaps they'll contribute

416
00:14:39,199 --> 00:14:40,800
fixes tweaks improvements to your

417
00:14:40,800 --> 00:14:44,639
playbook you never know

418
00:14:44,639 --> 00:14:46,399
now if you're interested how a role gets

419
00:14:46,399 --> 00:14:48,560
put together this slide shows you what

420
00:14:48,560 --> 00:14:50,560
files go where feel free to screen grab

421
00:14:50,560 --> 00:14:53,040
this or take a picture or even as this

422
00:14:53,040 --> 00:14:54,639
is going up as a video you may want to

423
00:14:54,639 --> 00:14:56,560
play it all back and you know catch a

424
00:14:56,560 --> 00:14:58,399
specific part of it

425
00:14:58,399 --> 00:15:00,399
even better if you want to get involved

426
00:15:00,399 --> 00:15:02,079
in the project that i'm writing

427
00:15:02,079 --> 00:15:04,480
to write these 240 checks for ubuntu and

428
00:15:04,480 --> 00:15:07,120
later some of the other cis benchmark

429
00:15:07,120 --> 00:15:08,720
checks

430
00:15:08,720 --> 00:15:11,279
then click on the qr code that's there

431
00:15:11,279 --> 00:15:14,000
if not visit back come back to

432
00:15:14,000 --> 00:15:16,560
to look at the the url that's in the

433
00:15:16,560 --> 00:15:18,480
top of all of these slides click through

434
00:15:18,480 --> 00:15:19,680
to that link at the bottom there to the

435
00:15:19,680 --> 00:15:22,479
github repo

436
00:15:23,040 --> 00:15:24,480
on the other side there you'll see that

437
00:15:24,480 --> 00:15:26,320
i've already written some of those tests

438
00:15:26,320 --> 00:15:27,680
in fact i've written the first eight of

439
00:15:27,680 --> 00:15:28,959
them so

440
00:15:28,959 --> 00:15:30,320
that's good

441
00:15:30,320 --> 00:15:33,040
anyway thank you very much for listening

442
00:15:33,040 --> 00:15:35,199
to my presentation i wish you lots of

443
00:15:35,199 --> 00:15:37,519
luck getting yourself started on using

444
00:15:37,519 --> 00:15:40,959
ansible or the cis benchmarks or even

445
00:15:40,959 --> 00:15:42,240
better

446
00:15:42,240 --> 00:15:44,480
maybe use both

447
00:15:44,480 --> 00:15:45,759
and if you want to talk to me about any

448
00:15:45,759 --> 00:15:47,759
of this lot then please feel free to

449
00:15:47,759 --> 00:15:51,959
give me a shout thanks very much

