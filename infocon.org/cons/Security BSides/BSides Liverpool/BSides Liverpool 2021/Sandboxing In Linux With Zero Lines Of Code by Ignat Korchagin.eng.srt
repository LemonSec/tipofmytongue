1
00:00:03,040 --> 00:00:05,680
hi uh thanks for coming back do you hear

2
00:00:05,680 --> 00:00:08,080
me well

3
00:00:08,160 --> 00:00:10,559
louder

4
00:00:11,200 --> 00:00:13,040
hi my name is ignat and today we're

5
00:00:13,040 --> 00:00:15,040
going to talk about sandboxing in linux

6
00:00:15,040 --> 00:00:17,759
with no code

7
00:00:18,000 --> 00:00:20,160
that's a little bit about myself i work

8
00:00:20,160 --> 00:00:23,119
on linux things at welfare i'm very

9
00:00:23,119 --> 00:00:25,119
passionate about security and crypto and

10
00:00:25,119 --> 00:00:28,000
i enjoy low level programming

11
00:00:28,000 --> 00:00:30,720
kernel code bootloaders and other scary

12
00:00:30,720 --> 00:00:31,679
stuff

13
00:00:31,679 --> 00:00:33,680
but today we're going to talk about

14
00:00:33,680 --> 00:00:37,520
uh sandboxing segbot sandboxing with a

15
00:00:37,520 --> 00:00:40,719
technology called systeccomp in linux

16
00:00:40,719 --> 00:00:45,040
but to understand seccomp we first

17
00:00:46,079 --> 00:00:48,399
so what are system calls

18
00:00:48,399 --> 00:00:51,039
nowadays we don't write applications of

19
00:00:51,039 --> 00:00:53,199
real hardware we usually use some kind

20
00:00:53,199 --> 00:00:55,920
of operating system and our which is

21
00:00:55,920 --> 00:00:58,160
like a middleman man

22
00:00:58,160 --> 00:01:00,480
like application and the hardware and

23
00:01:00,480 --> 00:01:01,760
applications

24
00:01:01,760 --> 00:01:04,400
interact with the kernel

25
00:01:04,400 --> 00:01:07,200
using some kind of api so these apis are

26
00:01:07,200 --> 00:01:09,840
called system

27
00:01:10,240 --> 00:01:12,560
applications read then write data to

28
00:01:12,560 --> 00:01:14,960
this send data over network using always

29
00:01:14,960 --> 00:01:17,919
using some system

30
00:01:18,479 --> 00:01:20,159
square right

31
00:01:20,159 --> 00:01:21,840
so a system

32
00:01:21,840 --> 00:01:23,680
system call is a well-defined interface

33
00:01:23,680 --> 00:01:25,840
between the application and the kernel

34
00:01:25,840 --> 00:01:27,600
and it provides some low-level

35
00:01:27,600 --> 00:01:28,960
abstractions and services to

36
00:01:28,960 --> 00:01:32,720
applications file networking time etc

37
00:01:32,720 --> 00:01:34,640
and it

38
00:01:34,640 --> 00:01:36,479
also the kernel enforces different

39
00:01:36,479 --> 00:01:38,159
access control policies to different

40
00:01:38,159 --> 00:01:40,640
resources from applications as well as

41
00:01:40,640 --> 00:01:44,000
just some resource management

42
00:01:44,320 --> 00:01:46,399
so what is second now second is the

43
00:01:46,399 --> 00:01:48,560
linux technology and it's just another

44
00:01:48,560 --> 00:01:50,159
system called linux

45
00:01:50,159 --> 00:01:52,079
but it is special in a way because it's

46
00:01:52,079 --> 00:01:54,880
provide a way for an application to

47
00:01:54,880 --> 00:01:58,000
notify the kernel of its intention or

48
00:01:58,000 --> 00:02:00,399
other system call which it intends to

49
00:02:00,399 --> 00:02:03,119
use for this normal function

50
00:02:03,119 --> 00:02:04,880
and then like it's like a contract

51
00:02:04,880 --> 00:02:06,960
between an application and the kernel

52
00:02:06,960 --> 00:02:08,560
and then the kernel enforces this

53
00:02:08,560 --> 00:02:10,318
contract

54
00:02:10,318 --> 00:02:13,520
provided by the application

55
00:02:13,520 --> 00:02:15,680
yeah so basically second is not a

56
00:02:15,680 --> 00:02:18,160
sandbox itself as linux developers like

57
00:02:18,160 --> 00:02:23,200
to say cycle is a tool to create symbols

58
00:02:23,200 --> 00:02:24,400
so yeah

59
00:02:24,400 --> 00:02:26,959
the second you can just the application

60
00:02:26,959 --> 00:02:29,200
can infer its intended usage to the

61
00:02:29,200 --> 00:02:30,879
kernel and

62
00:02:30,879 --> 00:02:33,920
kernel then take actions

63
00:02:33,920 --> 00:02:37,599
when this contract is published

64
00:02:37,599 --> 00:02:40,239
for example this application may say

65
00:02:40,239 --> 00:02:42,720
that it will only use this scale like it

66
00:02:42,720 --> 00:02:45,200
will store like files locally but it

67
00:02:45,200 --> 00:02:46,319
will never

68
00:02:46,319 --> 00:02:48,800
basically send any data over the network

69
00:02:48,800 --> 00:02:51,040
and then the linux can enforce that

70
00:02:51,040 --> 00:02:53,440
policy for that application

71
00:02:53,440 --> 00:02:56,160
so basically why it's useful uh let's

72
00:02:56,160 --> 00:02:58,159
see an example imagine you're a

73
00:02:58,159 --> 00:03:00,640
developer and you're writing a simple

74
00:03:00,640 --> 00:03:02,640
like clock application so what a clock

75
00:03:02,640 --> 00:03:04,800
application mean from the product

76
00:03:04,800 --> 00:03:06,080
um

77
00:03:06,080 --> 00:03:07,280
so probably

78
00:03:07,280 --> 00:03:10,080
it only needs to know time right so

79
00:03:10,080 --> 00:03:12,080
basically in your second policy you can

80
00:03:12,080 --> 00:03:14,000
tell the kernel hey in the clock

81
00:03:14,000 --> 00:03:16,159
application i will only use the system

82
00:03:16,159 --> 00:03:18,959
called get time of day

83
00:03:18,959 --> 00:03:20,480
and when your application functions

84
00:03:20,480 --> 00:03:22,879
normally at some point you need no time

85
00:03:22,879 --> 00:03:25,360
it requests time from the kernel it's

86
00:03:25,360 --> 00:03:27,599
part of your contract it's part of your

87
00:03:27,599 --> 00:03:29,760
promise to the kernel the kernel will

88
00:03:29,760 --> 00:03:30,640
allow

89
00:03:30,640 --> 00:03:33,040
but imagine you wrote your application

90
00:03:33,040 --> 00:03:34,799
in the low-level

91
00:03:34,799 --> 00:03:37,120
language which is very unsafe and

92
00:03:37,120 --> 00:03:39,200
somebody got like exploited your

93
00:03:39,200 --> 00:03:41,920
application involved arbitrary code

94
00:03:41,920 --> 00:03:43,760
what the attacker can try to do they try

95
00:03:43,760 --> 00:03:45,360
to steal data

96
00:03:45,360 --> 00:03:48,720
from your uh from your computer and for

97
00:03:48,720 --> 00:03:50,799
example then they try to send this data

98
00:03:50,799 --> 00:03:53,040
over the network to themselves

99
00:03:53,040 --> 00:03:54,640
and they will divert your plot

100
00:03:54,640 --> 00:03:56,239
application to use the send system

101
00:03:56,239 --> 00:03:58,080
called that but that is not part of your

102
00:03:58,080 --> 00:04:00,640
original contract right so the kernel

103
00:04:00,640 --> 00:04:02,560
immediately will kill the application

104
00:04:02,560 --> 00:04:04,720
and then prevent the data

105
00:04:04,720 --> 00:04:07,360
so yeah this is like a simple an example

106
00:04:07,360 --> 00:04:08,480
of just some

107
00:04:08,480 --> 00:04:11,040
simple symbols

108
00:04:11,040 --> 00:04:12,840
policy

109
00:04:12,840 --> 00:04:15,439
with however there are some challenges

110
00:04:15,439 --> 00:04:17,279
for how do we use second in the

111
00:04:17,279 --> 00:04:19,918
application

112
00:04:20,238 --> 00:04:21,680
so

113
00:04:21,680 --> 00:04:25,280
anyone doesn't know a unix rename comma

114
00:04:25,280 --> 00:04:27,280
where you type your name and you get

115
00:04:27,280 --> 00:04:30,400
like your type the operating system

116
00:04:30,400 --> 00:04:32,479
so in this example we will

117
00:04:32,479 --> 00:04:36,880
write a simple you name like application

118
00:04:36,880 --> 00:04:38,080
which will use

119
00:04:38,080 --> 00:04:40,240
uh you name system code there is also a

120
00:04:40,240 --> 00:04:43,120
system call called

121
00:04:44,560 --> 00:04:46,240
yeah well this is the full application

122
00:04:46,240 --> 00:04:48,960
source code the important parts here is

123
00:04:48,960 --> 00:04:51,440
just we ask the kernel to provide some

124
00:04:51,440 --> 00:04:52,880
information and we prove that

125
00:04:52,880 --> 00:04:55,120
information to the user so

126
00:04:55,120 --> 00:04:57,280
let's see how it works you can just

127
00:04:57,280 --> 00:04:59,520
profile this application execute it and

128
00:04:59,520 --> 00:05:01,039
it will tell you that your operating

129
00:05:01,039 --> 00:05:03,840
system is left

130
00:05:03,840 --> 00:05:06,000
so let's try to sandbox

131
00:05:06,000 --> 00:05:08,240
this application and we'll just modify

132
00:05:08,240 --> 00:05:09,520
it at

133
00:05:09,520 --> 00:05:11,600
modified by adding another function

134
00:05:11,600 --> 00:05:13,120
called sandbox

135
00:05:13,120 --> 00:05:15,120
and we will implement this function in

136
00:05:15,120 --> 00:05:17,520
this way now

137
00:05:17,520 --> 00:05:19,440
i know it looks scary

138
00:05:19,440 --> 00:05:22,160
but the gist here is we define our

139
00:05:22,160 --> 00:05:24,800
second policy in this assembly-like

140
00:05:24,800 --> 00:05:26,000
language

141
00:05:26,000 --> 00:05:28,000
and then basically

142
00:05:28,000 --> 00:05:30,320
the gist of the like for the

143
00:05:30,320 --> 00:05:32,720
purposes of this exercise we will define

144
00:05:32,720 --> 00:05:34,800
at that point so we know

145
00:05:34,800 --> 00:05:36,560
our application

146
00:05:36,560 --> 00:05:39,039
needs a

147
00:05:45,919 --> 00:05:48,560
right so in this case we basically all

148
00:05:48,560 --> 00:05:50,960
this program it allows every system call

149
00:05:50,960 --> 00:05:54,160
for the application except the dna

150
00:05:54,160 --> 00:05:56,800
and what we tell them the policy instead

151
00:05:56,800 --> 00:05:58,880
of just filling the application we'll

152
00:05:58,880 --> 00:06:00,960
talk if the application tries to use

153
00:06:00,960 --> 00:06:03,520
your name system call return on error

154
00:06:03,520 --> 00:06:04,400
code

155
00:06:04,400 --> 00:06:06,400
and we will use the funky error called

156
00:06:06,400 --> 00:06:09,120
e-net down like network is down like why

157
00:06:09,120 --> 00:06:12,560
would we need network force

158
00:06:14,639 --> 00:06:16,319
yeah and then we just

159
00:06:16,319 --> 00:06:18,800
provide this policy

160
00:06:18,800 --> 00:06:21,680
so let's try to execute it now

161
00:06:21,680 --> 00:06:24,880
and yeah if we execute it we see that

162
00:06:24,880 --> 00:06:27,280
the application exit was error and the

163
00:06:27,280 --> 00:06:30,400
error code is networked

164
00:06:31,039 --> 00:06:33,520
so we are now hitting this error pass

165
00:06:33,520 --> 00:06:35,680
here and we definitely know we're

166
00:06:35,680 --> 00:06:37,919
hitting it because of our second policy

167
00:06:37,919 --> 00:06:41,520
because under normal uh scenario like

168
00:06:41,520 --> 00:06:45,530
you nation memory from that down system

169
00:06:45,530 --> 00:06:46,880
[Music]

170
00:06:46,880 --> 00:06:48,639
but as we just see like the problem with

171
00:06:48,639 --> 00:06:50,720
satcom tools like this low-level

172
00:06:50,720 --> 00:06:52,800
assembly language it's very hard to

173
00:06:52,800 --> 00:06:56,479
write hard to manage hard to update and

174
00:06:56,479 --> 00:06:59,360
like we see it was the code was huge for

175
00:06:59,360 --> 00:07:01,199
a simple application imagine building

176
00:07:01,199 --> 00:07:04,240
world applications

177
00:07:05,280 --> 00:07:07,120
and we also need to be aware of

178
00:07:07,120 --> 00:07:09,280
different low level details we need to

179
00:07:09,280 --> 00:07:11,919
know there is system called numbers

180
00:07:11,919 --> 00:07:15,719
architecture because

181
00:07:17,440 --> 00:07:19,680
so that's why like the community came up

182
00:07:19,680 --> 00:07:21,919
with a simplified library called leafset

183
00:07:21,919 --> 00:07:24,479
call we can rewrite our sandboxing

184
00:07:24,479 --> 00:07:27,199
function with the library now we see

185
00:07:27,199 --> 00:07:29,440
that the code is much smaller

186
00:07:29,440 --> 00:07:31,680
and simpler and there are like three

187
00:07:31,680 --> 00:07:33,919
important pieces here we define our

188
00:07:33,919 --> 00:07:37,520
default policy we allow all system calls

189
00:07:37,520 --> 00:07:40,479
then we explicitly add a rule saying

190
00:07:40,479 --> 00:07:41,599
like if

191
00:07:41,599 --> 00:07:44,400
you try to use your name system call

192
00:07:44,400 --> 00:07:46,400
this case in this case we'll change the

193
00:07:46,400 --> 00:07:49,599
policy to be more strict and tell the

194
00:07:49,599 --> 00:07:52,080
kernel just to kill the application

195
00:07:52,080 --> 00:07:52,879
yeah

196
00:07:52,879 --> 00:07:55,759
and yeah and then we'll learn the policy

197
00:07:55,759 --> 00:07:59,199
so let's see how it works and when we

198
00:07:59,199 --> 00:08:00,800
compile this application you need to

199
00:08:00,800 --> 00:08:01,919
remember

200
00:08:01,919 --> 00:08:03,759
that we also need to link to the library

201
00:08:03,759 --> 00:08:06,240
because we now use the library

202
00:08:06,240 --> 00:08:09,039
and create this application we'll see

203
00:08:09,039 --> 00:08:11,919
this like message from from the shell

204
00:08:11,919 --> 00:08:12,800
that

205
00:08:12,800 --> 00:08:14,060
the application was killed

206
00:08:14,060 --> 00:08:17,230
[Music]

207
00:08:19,440 --> 00:08:23,919
but again there is a problem right so

208
00:08:23,919 --> 00:08:26,800
in all these scenarios i have to

209
00:08:26,800 --> 00:08:29,919
explicitly modify our application to add

210
00:08:29,919 --> 00:08:31,440
sandboxes

211
00:08:31,440 --> 00:08:33,679
right

212
00:08:33,760 --> 00:08:34,640
so

213
00:08:34,640 --> 00:08:35,919
how do you think like how many

214
00:08:35,919 --> 00:08:38,159
developers start a project with this

215
00:08:38,159 --> 00:08:40,958
mindset so like

216
00:08:40,958 --> 00:08:43,120
most likely i will of course i will

217
00:08:43,120 --> 00:08:45,120
write bugs and vulnerabilities so the

218
00:08:45,120 --> 00:08:47,120
first thing i should do

219
00:08:47,120 --> 00:08:49,440
in my application is like provide like

220
00:08:49,440 --> 00:08:51,519
proper sun bosses

221
00:08:51,519 --> 00:08:53,760
right

222
00:08:59,839 --> 00:09:02,320
and security is always like somewhere in

223
00:09:02,320 --> 00:09:04,640
there

224
00:09:04,959 --> 00:09:06,640
and yeah and this is the problem the

225
00:09:06,640 --> 00:09:08,640
second that second applies the rules

226
00:09:08,640 --> 00:09:11,120
policy only to the current process so it

227
00:09:11,120 --> 00:09:13,040
is expected

228
00:09:13,040 --> 00:09:14,560
that application

229
00:09:14,560 --> 00:09:16,560
developers will add support for

230
00:09:16,560 --> 00:09:18,800
sandboxing to their application

231
00:09:18,800 --> 00:09:20,959
but on the other hand we have

232
00:09:20,959 --> 00:09:23,200
system in assay who operate code in

233
00:09:23,200 --> 00:09:26,080
production and they want applications to

234
00:09:26,080 --> 00:09:28,160
descend but they don't have any control

235
00:09:28,160 --> 00:09:29,279
over this

236
00:09:29,279 --> 00:09:31,839
right and also like in big environments

237
00:09:31,839 --> 00:09:34,080
you probably use some

238
00:09:34,080 --> 00:09:36,399
third party proprietor applications

239
00:09:36,399 --> 00:09:38,240
which you don't even have access to the

240
00:09:38,240 --> 00:09:40,240
software but you would like to unbox it

241
00:09:40,240 --> 00:09:41,839
somehow

242
00:09:41,839 --> 00:09:44,160
so there is a gap right so one side we

243
00:09:44,160 --> 00:09:46,880
have application developers you can send

244
00:09:46,880 --> 00:09:49,279
their code but don't have the incentive

245
00:09:49,279 --> 00:09:51,519
and on the other hand we have like

246
00:09:51,519 --> 00:09:53,920
operators system and slv security

247
00:09:53,920 --> 00:09:56,000
professionals who want to assemble but

248
00:09:56,000 --> 00:09:57,839
don't have that

249
00:09:57,839 --> 00:10:00,240
this is where no code second

250
00:10:00,240 --> 00:10:02,959
comes to mind so how can you add second

251
00:10:02,959 --> 00:10:04,480
support to an application without

252
00:10:04,480 --> 00:10:06,320
touching it

253
00:10:06,320 --> 00:10:08,240
and this is like

254
00:10:08,240 --> 00:10:10,320
system b our favorite

255
00:10:10,320 --> 00:10:12,800
process manager i'll try to

256
00:10:12,800 --> 00:10:13,839
do that

257
00:10:13,839 --> 00:10:14,720
so

258
00:10:14,720 --> 00:10:17,120
if you run your

259
00:10:17,120 --> 00:10:17,680
you application through

260
00:10:17,680 --> 00:10:20,160
this system called filter directive in

261
00:10:20,160 --> 00:10:21,680
your unit files

262
00:10:21,680 --> 00:10:24,240
and uh basically you can provide an

263
00:10:24,240 --> 00:10:26,240
allow list or a deny list of system

264
00:10:26,240 --> 00:10:27,279
calls

265
00:10:27,279 --> 00:10:29,519
this service or application should be

266
00:10:29,519 --> 00:10:32,480
using so you basically can convey

267
00:10:32,480 --> 00:10:34,320
the second policy to the terminal for

268
00:10:34,320 --> 00:10:38,399
the application management system

269
00:10:39,120 --> 00:10:40,640
there

270
00:10:40,640 --> 00:10:42,560
so let's try that let's

271
00:10:42,560 --> 00:10:43,920
basically

272
00:10:43,920 --> 00:10:46,480
recompile our original non-sandbox

273
00:10:46,480 --> 00:10:48,480
version of our toy tool

274
00:10:48,480 --> 00:10:50,720
and we run we can run it with systemd

275
00:10:50,720 --> 00:10:52,959
right

276
00:10:53,360 --> 00:10:55,360
we see that it runs fine we see the

277
00:10:55,360 --> 00:10:58,160
expected output and we see the exit

278
00:10:58,160 --> 00:11:00,800
successful

279
00:11:00,959 --> 00:11:04,000
now we can actually set a sandbox of the

280
00:11:04,000 --> 00:11:05,120
system b

281
00:11:05,120 --> 00:11:07,920
so we'll add this directly and like

282
00:11:07,920 --> 00:11:09,839
prohibit this application

283
00:11:09,839 --> 00:11:12,560
to use the unique system call

284
00:11:12,560 --> 00:11:14,720
and we'll see that it will be killed by

285
00:11:14,720 --> 00:11:16,240
the system right

286
00:11:16,240 --> 00:11:18,959
with the signal

287
00:11:20,480 --> 00:11:23,200
we can also like emulate the policy uh

288
00:11:23,200 --> 00:11:26,320
of returning custom error codes so there

289
00:11:26,320 --> 00:11:29,440
is another directive

290
00:11:40,839 --> 00:11:42,640
arrow

291
00:11:42,640 --> 00:11:46,240
however there is a small print with this

292
00:11:46,240 --> 00:11:48,399
the system via pro

293
00:11:48,399 --> 00:11:51,760
if you dig into the documentation

294
00:11:51,760 --> 00:11:55,440
some system calls are always allowed

295
00:11:55,440 --> 00:11:57,600
and this is because the way how systemd

296
00:11:57,600 --> 00:11:59,760
works it always needs to allow the

297
00:11:59,760 --> 00:12:01,120
system

298
00:12:01,120 --> 00:12:04,800
properly and one of the scary parts

299
00:12:04,800 --> 00:12:07,600
here is the exact resistance which is

300
00:12:07,600 --> 00:12:09,519
always allowed even if you put it into

301
00:12:09,519 --> 00:12:11,360
the denial

302
00:12:11,360 --> 00:12:14,000
so why is it bad right let's go back to

303
00:12:14,000 --> 00:12:16,079
our clock application

304
00:12:16,079 --> 00:12:19,440
when an attacker basically exploits our

305
00:12:19,440 --> 00:12:21,600
application against arbitrary code

306
00:12:21,600 --> 00:12:25,040
execution what is the first

307
00:12:32,750 --> 00:12:34,959
[Music]

308
00:12:34,959 --> 00:12:37,279
so if your application doesn't mean that

309
00:12:37,279 --> 00:12:40,000
systems calling its policy it's

310
00:12:40,000 --> 00:12:42,800
very good to prohibit it

311
00:12:42,800 --> 00:12:45,440
that's why we designed

312
00:12:45,440 --> 00:12:47,839
our own sandboxing tool so it's a

313
00:12:47,839 --> 00:12:50,399
toolkit to inject custom second policy

314
00:12:50,399 --> 00:12:53,520
rules into almost any process

315
00:12:53,520 --> 00:12:55,440
[Music]

316
00:12:55,440 --> 00:12:57,680
it kind of like works on top of the

317
00:12:57,680 --> 00:12:59,279
approach

318
00:12:59,279 --> 00:13:01,360
of system d but takes it one step

319
00:13:01,360 --> 00:13:03,200
further

320
00:13:03,200 --> 00:13:05,839
you can blow up any systems also and the

321
00:13:05,839 --> 00:13:07,440
toolkit actually consists of two

322
00:13:07,440 --> 00:13:08,560
components

323
00:13:08,560 --> 00:13:10,560
sharing library for dynamically linked

324
00:13:10,560 --> 00:13:13,119
applications

325
00:13:14,399 --> 00:13:17,839
and you can block any system calls

326
00:13:17,839 --> 00:13:20,079
and it works in any binary in any

327
00:13:20,079 --> 00:13:21,920
programming language

328
00:13:21,920 --> 00:13:25,599
even proprietary environment

329
00:13:25,760 --> 00:13:28,399
and it's open

330
00:13:28,959 --> 00:13:30,480
and you may say hey

331
00:13:30,480 --> 00:13:33,120
shared library you said it's low code

332
00:13:33,120 --> 00:13:35,440
like why don't we have to have a shared

333
00:13:35,440 --> 00:13:36,880
library so

334
00:13:36,880 --> 00:13:38,880
it's a shared library but it's special

335
00:13:38,880 --> 00:13:41,360
in a way that you don't have to program

336
00:13:41,360 --> 00:13:43,760
against you just need to use it

337
00:13:43,760 --> 00:13:46,160
in your process so

338
00:13:46,160 --> 00:13:48,480
again we will come back to our original

339
00:13:48,480 --> 00:13:49,279
uh

340
00:13:49,279 --> 00:13:51,440
you name like simple tool

341
00:13:51,440 --> 00:13:53,760
and with

342
00:13:53,760 --> 00:13:56,480
with our toolkit we can actually just

343
00:13:56,480 --> 00:13:59,519
uh provide custom cycle policy provided

344
00:13:59,519 --> 00:14:02,880
in a denial list with

345
00:14:06,790 --> 00:14:08,959
[Applause]

346
00:14:08,959 --> 00:14:10,720
and we will immediately see that the

347
00:14:10,720 --> 00:14:12,430
applications

348
00:14:12,430 --> 00:14:14,780
[Applause]

349
00:14:14,780 --> 00:14:19,089
[Music]

350
00:14:20,079 --> 00:14:22,480
yeah so two things here we just reload

351
00:14:22,480 --> 00:14:24,480
the library for the two people source

352
00:14:24,480 --> 00:14:26,320
code notification and we provide our

353
00:14:26,320 --> 00:14:30,959
desired component environment

354
00:14:30,959 --> 00:14:34,000
and nobody likes a weak reward because

355
00:14:34,000 --> 00:14:36,320
it doesn't always work in all cases for

356
00:14:36,320 --> 00:14:40,160
example what if you just want to

357
00:14:40,240 --> 00:14:44,560
hatch the application once and for all

358
00:14:56,320 --> 00:14:58,240
again we don't need to modify the source

359
00:14:58,240 --> 00:15:00,480
code we are actually compiling this

360
00:15:00,480 --> 00:15:02,639
direct and then all we need to do is

361
00:15:02,639 --> 00:15:04,639
just to provide the second policy into

362
00:15:04,639 --> 00:15:06,320
the environment variable

363
00:15:06,320 --> 00:15:09,120
and yeah

364
00:15:09,360 --> 00:15:12,240
what about stack

365
00:15:24,959 --> 00:15:26,880
toolkit is a launcher for starting to

366
00:15:26,880 --> 00:15:28,880
rebuild application

367
00:15:28,880 --> 00:15:30,399
instead of just launching the

368
00:15:30,399 --> 00:15:32,880
applications directly we just launched

369
00:15:32,880 --> 00:15:35,279
it through our launcher here and again

370
00:15:35,279 --> 00:15:37,360
with the same environment variable we

371
00:15:37,360 --> 00:15:39,839
can provide this customer policy to any

372
00:15:39,839 --> 00:15:42,320
application

373
00:15:42,320 --> 00:15:44,320
so yeah cloud for example

374
00:15:44,320 --> 00:15:48,800
configuration by environment variables

375
00:15:49,759 --> 00:15:51,759
the preferred ways to use an allow list

376
00:15:51,759 --> 00:15:55,040
everything is denied except

377
00:16:01,279 --> 00:16:03,519
and also there is another feature called

378
00:16:03,519 --> 00:16:05,839
default action which you can

379
00:16:05,839 --> 00:16:08,720
switch from basically just

380
00:16:08,720 --> 00:16:10,480
very strict action for the kernel to

381
00:16:10,480 --> 00:16:12,480
kill your application if you finalize

382
00:16:12,480 --> 00:16:14,880
the second policy to just load the

383
00:16:14,880 --> 00:16:16,880
action which is very useful for

384
00:16:16,880 --> 00:16:18,399
proprietary requirements we don't know

385
00:16:18,399 --> 00:16:21,440
which system called users so you can run

386
00:16:21,440 --> 00:16:23,360
the binary with the logging and actually

387
00:16:23,360 --> 00:16:25,279
see what it what it needs for

388
00:16:25,279 --> 00:16:28,079
normalization

389
00:16:28,079 --> 00:16:30,079
yeah and the sandbox tool contains a few

390
00:16:30,079 --> 00:16:32,480
components there is a lip sandbox

391
00:16:32,480 --> 00:16:36,160
library for dynamically applications

392
00:16:36,160 --> 00:16:38,079
and you need to provide this library to

393
00:16:38,079 --> 00:16:40,079
process address space or patch the alpha

394
00:16:40,079 --> 00:16:42,240
finally directly and there is a sandbox

395
00:16:42,240 --> 00:16:43,519
supply to

396
00:16:43,519 --> 00:16:46,240
a launcher which can be used also

397
00:16:46,240 --> 00:16:47,680
statically in design economic

398
00:16:47,680 --> 00:16:49,120
applications

399
00:16:49,120 --> 00:16:51,519
and you just need to run

400
00:16:51,519 --> 00:16:54,240
run your objectives through the launch

401
00:16:54,240 --> 00:16:56,720
but at this point you may ask also

402
00:16:56,720 --> 00:16:58,480
why do we need like if the launcher

403
00:16:58,480 --> 00:16:59,920
works for dynamically linked

404
00:16:59,920 --> 00:17:01,839
applications statically

405
00:17:01,839 --> 00:17:03,839
application why do we need the rewarding

406
00:17:03,839 --> 00:17:06,720
library why we can't always use like the

407
00:17:06,720 --> 00:17:09,359
launcher for any kind of product

408
00:17:09,359 --> 00:17:11,039
and to understand that

409
00:17:11,039 --> 00:17:12,720
basically the difference

410
00:17:12,720 --> 00:17:13,760
let's

411
00:17:13,760 --> 00:17:16,400
from like one thousand people

412
00:17:16,400 --> 00:17:19,839
review any code startup of the operating

413
00:17:19,839 --> 00:17:22,400
system so when you launch an executable

414
00:17:22,400 --> 00:17:24,640
usually there is some kind of a one-time

415
00:17:24,640 --> 00:17:25,599
unique

416
00:17:25,599 --> 00:17:28,480
say like every language every framework

417
00:17:28,480 --> 00:17:30,559
has some kind of a runtime in each stage

418
00:17:30,559 --> 00:17:33,039
including

419
00:17:40,240 --> 00:17:42,320
this is where your main function starts

420
00:17:42,320 --> 00:17:43,840
correctly right

421
00:17:43,840 --> 00:17:46,320
so one time next stage is visible to the

422
00:17:46,320 --> 00:17:48,240
developer it's like added by the

423
00:17:48,240 --> 00:17:50,880
compiler

424
00:17:51,520 --> 00:17:54,160
application

425
00:17:55,280 --> 00:17:57,200
yeah and in terms of sandboxing if you

426
00:17:57,200 --> 00:17:59,039
use the launcher

427
00:17:59,039 --> 00:18:01,520
the second course will be enforced

428
00:18:01,520 --> 00:18:04,320
before the run timing stage and if you

429
00:18:04,320 --> 00:18:06,960
use the uh preloaded libraries the

430
00:18:06,960 --> 00:18:09,120
central policy will be enforced after

431
00:18:09,120 --> 00:18:11,200
that happens

432
00:18:11,200 --> 00:18:14,240
what is runtime

433
00:18:14,240 --> 00:18:17,120
basically a lot of system calls which

434
00:18:17,120 --> 00:18:18,720
are never used afterwards in the

435
00:18:18,720 --> 00:18:20,880
application so there is like memories

436
00:18:20,880 --> 00:18:23,679
attack and maps and protects etc and

437
00:18:23,679 --> 00:18:25,760
your main code might not need them in

438
00:18:25,760 --> 00:18:27,600
the future so it would be nice to

439
00:18:27,600 --> 00:18:30,400
actually block them when your service

440
00:18:30,400 --> 00:18:33,679
operates and production

441
00:18:34,400 --> 00:18:36,880
and basically applying the second policy

442
00:18:36,880 --> 00:18:38,799
a little bit later allows you to have a

443
00:18:38,799 --> 00:18:40,400
tighter

444
00:18:40,400 --> 00:18:43,200
second policy data

445
00:18:43,200 --> 00:18:45,840
so yeah in this case we only need to

446
00:18:45,840 --> 00:18:48,160
allow system calls uh from the main

447
00:18:48,160 --> 00:18:50,559
logic and in this case we'll

448
00:18:50,559 --> 00:18:52,400
also need to allow system calls for the

449
00:18:52,400 --> 00:18:54,720
long time

450
00:18:54,720 --> 00:18:57,600
so again let's see an example of

451
00:18:57,600 --> 00:19:00,400
our application so now let's try

452
00:19:00,400 --> 00:19:02,320
instead of a denialist approach we

453
00:19:02,320 --> 00:19:04,160
switch to allow

454
00:19:04,160 --> 00:19:06,720
what is the minimum number of syscalls

455
00:19:06,720 --> 00:19:08,160
we need to allow

456
00:19:08,160 --> 00:19:11,440
for our applications to run successfully

457
00:19:11,440 --> 00:19:14,080
and in this case like if we use the

458
00:19:14,080 --> 00:19:16,799
dynamic library approach we only need to

459
00:19:16,799 --> 00:19:18,559
allow four system calls for the

460
00:19:18,559 --> 00:19:21,679
application to function

461
00:19:21,679 --> 00:19:24,160
if we switch to the launcher mode the

462
00:19:24,160 --> 00:19:27,200
same application requires us to allow

463
00:19:27,200 --> 00:19:30,080
13 system calls to function

464
00:19:30,080 --> 00:19:31,120
so it's

465
00:19:31,120 --> 00:19:33,280
four versus circuit

466
00:19:33,280 --> 00:19:34,640
if you have a dynamically linked

467
00:19:34,640 --> 00:19:35,679
interface

468
00:19:35,679 --> 00:19:37,919
with a dynamic library you can have a

469
00:19:37,919 --> 00:19:39,919
much tighter policy

470
00:19:39,919 --> 00:19:43,360
for your application indeed

471
00:19:43,360 --> 00:19:45,919
yeah i think that's it basically i feel

472
00:19:45,919 --> 00:19:48,160
some useful links if you didn't

473
00:19:48,160 --> 00:19:51,160
understand

474
00:20:00,280 --> 00:20:03,309
[Music]

475
00:20:03,919 --> 00:20:06,919
um

476
00:20:07,039 --> 00:20:08,430
yeah thank you very much

477
00:20:08,430 --> 00:20:11,630
[Music]

478
00:20:11,919 --> 00:20:14,919
questions

479
00:20:24,640 --> 00:20:25,840
questions

480
00:20:25,840 --> 00:20:27,600
yes please um

481
00:20:27,600 --> 00:20:30,480
don't say the ability to require exist

482
00:20:30,480 --> 00:20:32,720
so what i was thinking was that if you

483
00:20:32,720 --> 00:20:34,400
write our own software sure we'll know

484
00:20:34,400 --> 00:20:36,480
what's his clustering most of the time

485
00:20:36,480 --> 00:20:38,880
it will be

486
00:20:38,880 --> 00:20:40,559
especially third-party stuff but we

487
00:20:40,559 --> 00:20:42,240
don't know what it does

488
00:20:42,240 --> 00:20:44,080
being able to just trace all the assist

489
00:20:44,080 --> 00:20:46,720
calls by using weld parting and saying

490
00:20:46,720 --> 00:20:48,880
this

491
00:20:56,000 --> 00:20:58,240
yeah

492
00:20:58,640 --> 00:21:03,000
let me find this slide

493
00:21:04,159 --> 00:21:04,960
yeah

494
00:21:04,960 --> 00:21:07,039
this is what this default action is

495
00:21:07,039 --> 00:21:09,760
about yeah so if you want to run in this

496
00:21:09,760 --> 00:21:11,760
like discovery mode

497
00:21:11,760 --> 00:21:14,880
so what we need to do is you can

498
00:21:14,880 --> 00:21:16,559
you create a

499
00:21:16,559 --> 00:21:19,039
allow list with no system calls so you

500
00:21:19,039 --> 00:21:20,559
deny everything

501
00:21:20,559 --> 00:21:22,960
but you also switch this default action

502
00:21:22,960 --> 00:21:24,720
to log and then you can

503
00:21:24,720 --> 00:21:26,799
monitor the system log or if you use

504
00:21:26,799 --> 00:21:28,799
audi it will be

505
00:21:28,799 --> 00:21:31,360
in the audit logs that an application

506
00:21:31,360 --> 00:21:33,280
violated the second policy and which

507
00:21:33,280 --> 00:21:35,600
system called it then you can pass this

508
00:21:35,600 --> 00:21:38,240
load and actually identify which system

509
00:21:38,240 --> 00:21:40,480
call is being used by

510
00:21:40,480 --> 00:21:43,720
this proprietary

511
00:21:47,990 --> 00:21:53,999
[Music]

512
00:22:07,790 --> 00:22:21,629
[Music]

513
00:22:21,919 --> 00:22:23,600
yeah so

514
00:22:23,600 --> 00:22:25,039
containers

515
00:22:25,039 --> 00:22:28,080
also use staccomp as well so like many

516
00:22:28,080 --> 00:22:31,440
container systems like docker kubernetes

517
00:22:31,440 --> 00:22:33,440
they have some kind of a default save

518
00:22:33,440 --> 00:22:36,400
system called policy it's quite wide but

519
00:22:36,400 --> 00:22:38,320
you can actually for most of them you

520
00:22:38,320 --> 00:22:41,600
can specify your own custom cycle balls

521
00:22:41,600 --> 00:22:43,840
and you can like shrink it down

522
00:22:43,840 --> 00:22:46,640
still the fact that basically but in

523
00:22:46,640 --> 00:22:49,039
this case it's the same as with runtime

524
00:22:49,039 --> 00:22:52,080
in each stage right so

525
00:22:52,080 --> 00:22:54,480
what i'm trying to say is

526
00:22:54,480 --> 00:22:55,200
when

527
00:22:55,200 --> 00:22:57,760
now people don't build very slimmed down

528
00:22:57,760 --> 00:23:00,080
containers with only one binary they're

529
00:23:00,080 --> 00:23:02,400
still kind of fat you have some basic

530
00:23:02,400 --> 00:23:05,200
file systems and stuff so you have this

531
00:23:05,200 --> 00:23:07,840
fancy runtime lead stage right so i

532
00:23:07,840 --> 00:23:09,760
think the best approach is to have

533
00:23:09,760 --> 00:23:11,440
actually both

534
00:23:11,440 --> 00:23:13,840
because second policies in the kernel

535
00:23:13,840 --> 00:23:16,640
they are stacked so you can sandbox

536
00:23:16,640 --> 00:23:19,039
yourself but then you can like shrink it

537
00:23:19,039 --> 00:23:21,280
down later if you need to so for example

538
00:23:21,280 --> 00:23:23,600
when you your container application

539
00:23:23,600 --> 00:23:26,400
starts you have a wider second policy

540
00:23:26,400 --> 00:23:28,960
defining the container runtime for your

541
00:23:28,960 --> 00:23:30,880
application to actually allow it to

542
00:23:30,880 --> 00:23:32,400
start

543
00:23:32,400 --> 00:23:34,640
go through all the batch commands and

544
00:23:34,640 --> 00:23:35,679
print

545
00:23:35,679 --> 00:23:37,679
you need to actually start the service

546
00:23:37,679 --> 00:23:40,400
and then once your main code is started

547
00:23:40,400 --> 00:23:42,640
you can use this tool to further like

548
00:23:42,640 --> 00:23:44,880
narrow that like

549
00:23:44,880 --> 00:23:46,799
the attack surface by narrowing down the

550
00:23:46,799 --> 00:23:50,200
allow system

551
00:23:57,679 --> 00:24:00,679
so

