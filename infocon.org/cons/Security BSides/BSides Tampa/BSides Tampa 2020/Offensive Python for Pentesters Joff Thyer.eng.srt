1
00:00:00,170 --> 00:00:10,559
it heads up everybody up here this guy's

2
00:00:02,850 --> 00:00:14,969
gonna intro us good morning everyone and

3
00:00:10,559 --> 00:00:17,850
welcome to b-sides 2020 in Tampa today's

4
00:00:14,969 --> 00:00:19,830
presentation will be offensive Python

5
00:00:17,850 --> 00:00:24,480
for pen testers and the presenters for

6
00:00:19,830 --> 00:00:29,429
today's presentation will be Jeff Jeff

7
00:00:24,480 --> 00:00:31,940
apologize Dyer and Mike belch no further

8
00:00:29,429 --> 00:00:33,960
ado jaw and mine

9
00:00:31,940 --> 00:00:34,800
let's see that was easy you got first

10
00:00:33,960 --> 00:00:36,930
mark sweet

11
00:00:34,800 --> 00:00:39,328
okay cool so we're going to talk about

12
00:00:36,930 --> 00:00:42,480
just how to use Python in kind of an

13
00:00:39,329 --> 00:00:46,590
offensive mode and so as we kind of step

14
00:00:42,480 --> 00:00:48,800
through this why things not working it's

15
00:00:46,590 --> 00:00:48,800
not working

16
00:00:51,160 --> 00:00:57,769
no no no we're gonna get this to work

17
00:00:53,450 --> 00:01:01,100
all right stand by everybody okay cool

18
00:00:57,770 --> 00:01:03,920
so I'm Mike felch I do bone research

19
00:01:01,100 --> 00:01:06,710
exploit development stuff reverse

20
00:01:03,920 --> 00:01:10,009
engineering but I just do it more in the

21
00:01:06,710 --> 00:01:11,690
offensive side and so I kind of been

22
00:01:10,009 --> 00:01:13,850
with Black Hills for a while now for a

23
00:01:11,690 --> 00:01:16,670
couple years kind of in the red teaming

24
00:01:13,850 --> 00:01:19,429
and pen testing space with Jeff and a

25
00:01:16,670 --> 00:01:22,340
bunch of other other people here and so

26
00:01:19,430 --> 00:01:25,220
I got my start in about 1999 1998 area

27
00:01:22,340 --> 00:01:26,600
kind of from this thing that was like

28
00:01:25,220 --> 00:01:27,679
The Lost underground like we don't even

29
00:01:26,600 --> 00:01:29,030
talk about anymore nobody even knows

30
00:01:27,679 --> 00:01:31,670
about it anymore

31
00:01:29,030 --> 00:01:33,440
but it was kind of like real Fringe kind

32
00:01:31,670 --> 00:01:35,300
of underground Internet stuff before

33
00:01:33,440 --> 00:01:36,890
there were like YouTube right so like

34
00:01:35,300 --> 00:01:38,300
frack and some of the designs so it's

35
00:01:36,890 --> 00:01:39,679
kind of working from I don't really have

36
00:01:38,300 --> 00:01:41,840
much to talk about

37
00:01:39,679 --> 00:01:43,070
we bought myself really okay so this

38
00:01:41,840 --> 00:01:46,850
quick interest now it's my turn

39
00:01:43,070 --> 00:01:49,190
I'm Jeff I do security research and dev

40
00:01:46,850 --> 00:01:52,640
work mostly malware dev work these days

41
00:01:49,190 --> 00:01:54,380
for Black Hills also do the security

42
00:01:52,640 --> 00:01:57,740
weekly thing on Thursday nights anybody

43
00:01:54,380 --> 00:01:59,720
a fan area alright hey let's hear for

44
00:01:57,740 --> 00:02:02,020
b-sides by the way you ready besides

45
00:01:59,720 --> 00:02:02,020
yeah

46
00:02:02,049 --> 00:02:08,090
alright so also I'm a certified sans

47
00:02:04,640 --> 00:02:09,470
instructor for SEC 573 which is what do

48
00:02:08,090 --> 00:02:10,850
we call it automating information

49
00:02:09,470 --> 00:02:12,530
security with Python it used to be

50
00:02:10,850 --> 00:02:14,600
called Python for pen testers that was

51
00:02:12,530 --> 00:02:16,970
so much easier alright so we're gonna

52
00:02:14,600 --> 00:02:18,200
talk about Python stuff in an offensive

53
00:02:16,970 --> 00:02:21,170
sense and I'm gonna turn it over to Mike

54
00:02:18,200 --> 00:02:22,399
to start off the show and then in the

55
00:02:21,170 --> 00:02:23,630
middle Mike's gonna kick it back to me

56
00:02:22,400 --> 00:02:25,070
and then I'll kick it back to Mike and

57
00:02:23,630 --> 00:02:26,030
and then hopefully we can get through

58
00:02:25,070 --> 00:02:27,260
all these slides because it's quite a

59
00:02:26,030 --> 00:02:30,850
number of them it's over to you Mike

60
00:02:27,260 --> 00:02:33,578
yeah and it's not again okay cool so

61
00:02:30,850 --> 00:02:35,630
what we're gonna be talking about is

62
00:02:33,579 --> 00:02:36,769
we're gonna start with the tacking cloud

63
00:02:35,630 --> 00:02:38,030
right so we're gonna look at it from the

64
00:02:36,769 --> 00:02:40,370
perspective of looking at cloud

65
00:02:38,030 --> 00:02:42,019
providers some of the big ones mainly

66
00:02:40,370 --> 00:02:43,430
we're just going to be focusing on AWS

67
00:02:42,019 --> 00:02:46,820
we're gonna look at Google a little bit

68
00:02:43,430 --> 00:02:49,910
we'll look at Azure and we'll move from

69
00:02:46,820 --> 00:02:52,070
kind of the the cloud aspect into the

70
00:02:49,910 --> 00:02:54,170
malware side of it we'll look at some of

71
00:02:52,070 --> 00:02:56,150
the evasion and injection techniques

72
00:02:54,170 --> 00:02:58,369
that Java really focuses on it really

73
00:02:56,150 --> 00:03:00,500
equips us at Black Hills on a daily

74
00:02:58,370 --> 00:03:02,120
basis with and then on the execution

75
00:03:00,500 --> 00:03:03,440
side of the malware and we're doing this

76
00:03:02,120 --> 00:03:05,900
from Python this is

77
00:03:03,440 --> 00:03:08,120
like an overlooked area for a lot of a

78
00:03:05,900 --> 00:03:09,590
lot of what we do and then we're going

79
00:03:08,120 --> 00:03:10,850
to talk about some ways to weaponize it

80
00:03:09,590 --> 00:03:12,650
we'll look at some of the libraries and

81
00:03:10,850 --> 00:03:15,380
how they could be leveraged in order to

82
00:03:12,650 --> 00:03:16,940
to kind of do it within your engagements

83
00:03:15,380 --> 00:03:18,680
right so a lot of times we see a lot of

84
00:03:16,940 --> 00:03:20,570
frameworks that are out there we see a

85
00:03:18,680 --> 00:03:22,370
lot of tools that are really built but a

86
00:03:20,570 --> 00:03:24,049
lot of times pythons really really good

87
00:03:22,370 --> 00:03:25,550
for when you're on an engagement you

88
00:03:24,050 --> 00:03:27,040
don't really have a go-to tool or you

89
00:03:25,550 --> 00:03:29,990
need to get some sort of code execution

90
00:03:27,040 --> 00:03:31,519
kind of within an existing environment

91
00:03:29,990 --> 00:03:32,840
maybe you have like a shell somewhere a

92
00:03:31,520 --> 00:03:33,920
web show and you just you're trying to

93
00:03:32,840 --> 00:03:36,290
get something going which you can't

94
00:03:33,920 --> 00:03:37,940
really load a tool so we're trying to

95
00:03:36,290 --> 00:03:39,950
get away from relying on tools and kind

96
00:03:37,940 --> 00:03:41,600
of building our own tools on the fly as

97
00:03:39,950 --> 00:03:42,769
we need to and then we'll look at some

98
00:03:41,600 --> 00:03:45,200
of the tooling and frameworks out there

99
00:03:42,770 --> 00:03:47,210
and then at the end we kind of we've

100
00:03:45,200 --> 00:03:51,320
opened up a repo and just kind of

101
00:03:47,210 --> 00:03:58,580
provided a bunch of stuff so with that

102
00:03:51,320 --> 00:04:00,410
we'll talk about tacking cloud so so a

103
00:03:58,580 --> 00:04:02,720
brief overview real quick we're gonna

104
00:04:00,410 --> 00:04:04,670
look at infrastructure and services so a

105
00:04:02,720 --> 00:04:05,960
lot of times what we hear is well we

106
00:04:04,670 --> 00:04:07,730
don't have we don't use cloud right

107
00:04:05,960 --> 00:04:08,690
we're not a cloud provider so we're on

108
00:04:07,730 --> 00:04:10,310
an engagement we're talking to a

109
00:04:08,690 --> 00:04:12,230
customer and a lot of times they're just

110
00:04:10,310 --> 00:04:14,630
saying hey we don't even use the cloud

111
00:04:12,230 --> 00:04:16,969
we just that's it but the reality is

112
00:04:14,630 --> 00:04:18,918
because they're using office 365 for

113
00:04:16,970 --> 00:04:20,150
instance they have Azure and they don't

114
00:04:18,918 --> 00:04:22,310
even know that they have Azure but they

115
00:04:20,149 --> 00:04:23,659
do and so that's kind of what we're

116
00:04:22,310 --> 00:04:26,780
going or they'll say well we just use

117
00:04:23,660 --> 00:04:28,640
like Google Gmail Enterprise for our

118
00:04:26,780 --> 00:04:29,989
company email but they forget that they

119
00:04:28,640 --> 00:04:31,159
have Google Drive and all these other

120
00:04:29,990 --> 00:04:33,470
services for the collaboration

121
00:04:31,160 --> 00:04:34,760
frameworks so a lot of times when we're

122
00:04:33,470 --> 00:04:36,380
approaching these organizations they're

123
00:04:34,760 --> 00:04:38,450
looking for in an engagement they're

124
00:04:36,380 --> 00:04:39,380
hiring us as a red team and and they're

125
00:04:38,450 --> 00:04:40,969
saying hey we want you to come

126
00:04:39,380 --> 00:04:43,700
compromise our environment go after our

127
00:04:40,970 --> 00:04:45,050
data but the reality is a lot of times

128
00:04:43,700 --> 00:04:46,580
what we've been seeing is we don't even

129
00:04:45,050 --> 00:04:47,960
have to go internal to the internal

130
00:04:46,580 --> 00:04:49,340
network anymore we can actually just

131
00:04:47,960 --> 00:04:51,680
compromise the cloud infrastructure

132
00:04:49,340 --> 00:04:53,960
without ever having to get shell and da

133
00:04:51,680 --> 00:04:55,400
on the internal network and we just do

134
00:04:53,960 --> 00:04:58,130
that externally and then it's kind of

135
00:04:55,400 --> 00:05:00,140
game over and so we're kind of exposing

136
00:04:58,130 --> 00:05:01,280
new attack services on a regular basis

137
00:05:00,140 --> 00:05:03,620
to the customers so they're not even

138
00:05:01,280 --> 00:05:05,659
really familiar with what they have and

139
00:05:03,620 --> 00:05:08,419
so thinking about infrastructure as like

140
00:05:05,660 --> 00:05:10,580
AWS services as your as your resources

141
00:05:08,419 --> 00:05:13,280
and then think of like the services

142
00:05:10,580 --> 00:05:16,640
aspect of it as like office 365 and G

143
00:05:13,280 --> 00:05:17,900
suite and so with that a lot of times

144
00:05:16,640 --> 00:05:20,120
too

145
00:05:17,900 --> 00:05:21,560
the pen testers that are going into the

146
00:05:20,120 --> 00:05:23,450
engagements are overlooking cloud as

147
00:05:21,560 --> 00:05:24,920
well right it's like we go in and where

148
00:05:23,450 --> 00:05:26,150
we have a one-track mind we've been

149
00:05:24,920 --> 00:05:28,340
doing it the same way for twenty years

150
00:05:26,150 --> 00:05:29,900
and so we're gonna throw some mal doc at

151
00:05:28,340 --> 00:05:31,340
them we're gonna get you know of macro

152
00:05:29,900 --> 00:05:32,810
execution we're gonna drop a shell on

153
00:05:31,340 --> 00:05:34,760
there we're gonna pivot you know the

154
00:05:32,810 --> 00:05:35,810
internal network to da and then it's

155
00:05:34,760 --> 00:05:37,670
just going to be you know we'll find

156
00:05:35,810 --> 00:05:39,080
where we need to go to get the gems but

157
00:05:37,670 --> 00:05:40,400
the reality is a lot of pen testers are

158
00:05:39,080 --> 00:05:42,409
actually looking over it as well I mean

159
00:05:40,400 --> 00:05:44,179
op me as that's how I came across this

160
00:05:42,410 --> 00:05:45,920
was on an engagement where I

161
00:05:44,180 --> 00:05:47,300
accidentally had I had credentials but I

162
00:05:45,920 --> 00:05:48,980
I just said well wonder about this as

163
00:05:47,300 --> 00:05:50,510
your portal thing and then it just

164
00:05:48,980 --> 00:05:52,760
opened up a whole new world for me and

165
00:05:50,510 --> 00:05:53,810
so that's kind of what we're doing and

166
00:05:52,760 --> 00:05:56,060
then the other thing that's really cool

167
00:05:53,810 --> 00:05:57,950
about this too is that these cloud

168
00:05:56,060 --> 00:05:59,540
providers are actually exposing their

169
00:05:57,950 --> 00:06:02,180
service their service infrastructure

170
00:05:59,540 --> 00:06:03,590
using web api's and they provide SDKs

171
00:06:02,180 --> 00:06:05,840
and so what we'll just kind of look at

172
00:06:03,590 --> 00:06:07,760
some of the SDKs and how they are

173
00:06:05,840 --> 00:06:09,260
integrating into it and then we have a

174
00:06:07,760 --> 00:06:11,180
bunch of really cool code code samples

175
00:06:09,260 --> 00:06:12,409
but I'm just gonna kind of show you just

176
00:06:11,180 --> 00:06:14,390
a little bit how easy it is but before

177
00:06:12,410 --> 00:06:17,030
we get there I wanted to talk really

178
00:06:14,390 --> 00:06:19,490
briefly about OAuth like a standard auth

179
00:06:17,030 --> 00:06:23,090
flow this is really in particular for

180
00:06:19,490 --> 00:06:24,320
Google and Microsoft Azure so the thing

181
00:06:23,090 --> 00:06:26,510
is you're going to be creating an app

182
00:06:24,320 --> 00:06:28,790
and the app is they're going to be

183
00:06:26,510 --> 00:06:29,870
considered the client here now in order

184
00:06:28,790 --> 00:06:31,700
for that client to be able to

185
00:06:29,870 --> 00:06:34,190
communicate with Microsoft or with

186
00:06:31,700 --> 00:06:36,169
Google it has to have authorization so

187
00:06:34,190 --> 00:06:38,360
when you're creating this application in

188
00:06:36,169 --> 00:06:40,580
their their cloud infrastructure you

189
00:06:38,360 --> 00:06:42,230
have to get like an API key or token key

190
00:06:40,580 --> 00:06:43,550
that they give you so this is reason why

191
00:06:42,230 --> 00:06:44,780
I put a diagram up here is because it

192
00:06:43,550 --> 00:06:46,970
gets a little confusing whenever you're

193
00:06:44,780 --> 00:06:50,530
starting to go down this road so the

194
00:06:46,970 --> 00:06:52,460
user here is going to end up being the

195
00:06:50,530 --> 00:06:53,809
credentials that you've compromised so

196
00:06:52,460 --> 00:06:55,489
you've you know password sprayed you

197
00:06:53,810 --> 00:06:57,290
were able to lend some credentials to

198
00:06:55,490 --> 00:06:59,990
this company's organization and so we're

199
00:06:57,290 --> 00:07:01,580
gonna use that companies that target

200
00:06:59,990 --> 00:07:02,780
that we found those credentials for and

201
00:07:01,580 --> 00:07:05,539
we're just going to create an

202
00:07:02,780 --> 00:07:08,479
application we're going to authorize it

203
00:07:05,540 --> 00:07:10,010
with Google or Microsoft and now any

204
00:07:08,480 --> 00:07:11,960
requests that we make to the resource

205
00:07:10,010 --> 00:07:13,909
server at these organizations that these

206
00:07:11,960 --> 00:07:17,030
cloud providers we're just going to

207
00:07:13,910 --> 00:07:19,310
authorize the application on behalf of

208
00:07:17,030 --> 00:07:21,469
the user you can where I'm going so the

209
00:07:19,310 --> 00:07:23,510
idea here is we need to create a client

210
00:07:21,470 --> 00:07:24,800
we need to authorize so be able to

211
00:07:23,510 --> 00:07:26,599
authorize right because if they wanted

212
00:07:24,800 --> 00:07:28,370
to stop that that client from being able

213
00:07:26,600 --> 00:07:30,650
to validate those credentials or use the

214
00:07:28,370 --> 00:07:32,479
resources they can nuke it there

215
00:07:30,650 --> 00:07:34,758
and then we need to access the token on

216
00:07:32,479 --> 00:07:36,409
behalf of the user and then we just we

217
00:07:34,759 --> 00:07:38,240
just we just authenticate for them and

218
00:07:36,410 --> 00:07:41,870
then it's kind of up in the air for what

219
00:07:38,240 --> 00:07:44,750
we can do from there right so with AWS

220
00:07:41,870 --> 00:07:47,840
in particular there's this there's a

221
00:07:44,750 --> 00:07:50,919
library called moto3 now moto3 is the

222
00:07:47,840 --> 00:07:52,880
AWS sdk for python it's super powerful

223
00:07:50,919 --> 00:07:54,979
it gives you the ability to create

224
00:07:52,880 --> 00:07:57,020
service clients kind of for every single

225
00:07:54,979 --> 00:08:00,258
resource now motive supports right now

226
00:07:57,020 --> 00:08:01,609
up to 219 AWS resources a lot of people

227
00:08:00,259 --> 00:08:03,500
are using them for DevOps or on the

228
00:08:01,610 --> 00:08:05,060
engineering side so we're just basically

229
00:08:03,500 --> 00:08:07,820
using that same library and Butler

230
00:08:05,060 --> 00:08:09,610
weaponizing and so the idea here is the

231
00:08:07,820 --> 00:08:13,820
service clients introduce a low-level

232
00:08:09,610 --> 00:08:16,039
AWS access so AWS creates like a it's an

233
00:08:13,820 --> 00:08:18,260
API that they expose and they built this

234
00:08:16,039 --> 00:08:20,150
client that kind of wraps the API calls

235
00:08:18,260 --> 00:08:20,990
for you so you just use it in your code

236
00:08:20,150 --> 00:08:22,940
you don't have to worry about building

237
00:08:20,990 --> 00:08:25,430
like a web client or any of those things

238
00:08:22,940 --> 00:08:26,570
it also maps one-to-one to the AWS

239
00:08:25,430 --> 00:08:30,080
services so if you're wanting to

240
00:08:26,570 --> 00:08:33,169
interact with you know AWS ec2 or

241
00:08:30,080 --> 00:08:35,029
anything like any database you have full

242
00:08:33,169 --> 00:08:36,439
access over that and then the other

243
00:08:35,029 --> 00:08:38,240
thing too is I think all the operations

244
00:08:36,440 --> 00:08:39,469
are supported mostly I want to say all

245
00:08:38,240 --> 00:08:41,959
but I'm pretty sure most of them are

246
00:08:39,469 --> 00:08:43,969
supported so you could create resources

247
00:08:41,958 --> 00:08:45,589
if you have the authorization to create

248
00:08:43,969 --> 00:08:46,940
them you have the ability to delete them

249
00:08:45,589 --> 00:08:49,100
you have the ability to change them and

250
00:08:46,940 --> 00:08:50,420
get data describe data so you could say

251
00:08:49,100 --> 00:08:52,610
if they're running all these virtual

252
00:08:50,420 --> 00:08:54,110
machines in ec2 and you wanted to get a

253
00:08:52,610 --> 00:08:55,339
full list of them all and let's just say

254
00:08:54,110 --> 00:08:56,900
that the credentials that you had were

255
00:08:55,339 --> 00:08:57,980
able to do that you can you can actually

256
00:08:56,900 --> 00:08:59,360
leverage it

257
00:08:57,980 --> 00:09:01,220
the other thing is really cool about it

258
00:08:59,360 --> 00:09:02,660
is you can enumerate absolutely pretty

259
00:09:01,220 --> 00:09:04,970
much everything every resource that they

260
00:09:02,660 --> 00:09:06,589
have so this is where you'll see it in

261
00:09:04,970 --> 00:09:08,540
the news a lot on the tech news and all

262
00:09:06,589 --> 00:09:11,200
these tools that come out for like s3

263
00:09:08,540 --> 00:09:14,120
buckets this is exactly what it's doing

264
00:09:11,200 --> 00:09:16,970
and so with AWS it's a little bit

265
00:09:14,120 --> 00:09:19,130
different than the Google and and the

266
00:09:16,970 --> 00:09:21,470
Microsoft side because you're using

267
00:09:19,130 --> 00:09:22,610
access keys and secret access keys so

268
00:09:21,470 --> 00:09:24,650
instead of having to go through that

269
00:09:22,610 --> 00:09:26,510
whole authentication flow what you can

270
00:09:24,650 --> 00:09:27,680
do is you can obtain access keys and

271
00:09:26,510 --> 00:09:28,700
secret access keys in a number of

272
00:09:27,680 --> 00:09:29,870
different ways there's a lots of

273
00:09:28,700 --> 00:09:31,730
different vulnerability classes that

274
00:09:29,870 --> 00:09:33,470
give you that ability some of them are

275
00:09:31,730 --> 00:09:35,570
like using a server side request forgery

276
00:09:33,470 --> 00:09:37,910
so if you can find a way to leverage an

277
00:09:35,570 --> 00:09:39,829
internal web lookup or remote file

278
00:09:37,910 --> 00:09:41,240
include or a local file include where

279
00:09:39,829 --> 00:09:43,339
you can read files off the little system

280
00:09:41,240 --> 00:09:44,279
like with an XML exploit or something

281
00:09:43,339 --> 00:09:46,709
you could you can

282
00:09:44,279 --> 00:09:48,329
we read the the keys sometimes from

283
00:09:46,709 --> 00:09:49,229
environment variables or from files that

284
00:09:48,329 --> 00:09:51,540
are kind of sitting within the

285
00:09:49,230 --> 00:09:53,100
application another really big one this

286
00:09:51,540 --> 00:09:54,509
is probably my go-to on every red team

287
00:09:53,100 --> 00:09:56,220
like if I get caught if I get creds I'm

288
00:09:54,509 --> 00:09:58,259
looking for the github repo I'm looking

289
00:09:56,220 --> 00:10:00,300
for the gitlab repo subversion I'm

290
00:09:58,259 --> 00:10:02,009
looking for some code repo because nine

291
00:10:00,300 --> 00:10:04,079
times out of ten somebody checked in an

292
00:10:02,009 --> 00:10:05,730
access key or secret access key even if

293
00:10:04,079 --> 00:10:06,870
they revoked the commits and try to

294
00:10:05,730 --> 00:10:08,160
reverse it out you go to the commit

295
00:10:06,870 --> 00:10:10,740
history you can still see the

296
00:10:08,160 --> 00:10:12,269
credentials kind of checked in and so or

297
00:10:10,740 --> 00:10:13,769
they're just other hard coding them in

298
00:10:12,269 --> 00:10:15,629
apps I mean how many times have I like

299
00:10:13,769 --> 00:10:17,100
reverse engineered Android application

300
00:10:15,629 --> 00:10:18,930
and found that developers like

301
00:10:17,100 --> 00:10:20,069
hard-coded access keys and secret access

302
00:10:18,930 --> 00:10:22,620
keys or mine

303
00:10:20,069 --> 00:10:25,339
before they leave them on the production

304
00:10:22,620 --> 00:10:28,499
web server and facing the Internet yes

305
00:10:25,339 --> 00:10:29,790
and so and because that there's a lot of

306
00:10:28,499 --> 00:10:31,290
times where these services are actually

307
00:10:29,790 --> 00:10:33,719
misconfigured where you don't even need

308
00:10:31,290 --> 00:10:35,099
access keys and secret access keys for

309
00:10:33,720 --> 00:10:37,319
the organization you can just go create

310
00:10:35,100 --> 00:10:39,600
your own on your own AWS but because

311
00:10:37,319 --> 00:10:42,449
when they created the s3 bucket or the

312
00:10:39,600 --> 00:10:43,920
EBS volume for storage they they made it

313
00:10:42,449 --> 00:10:45,839
the group hall or the policy that was

314
00:10:43,920 --> 00:10:47,040
attached to it wide open which is the

315
00:10:45,839 --> 00:10:48,329
reason why you see all these big data

316
00:10:47,040 --> 00:10:50,790
breaches that are happening this isn't

317
00:10:48,329 --> 00:10:52,739
just AWS and az3 this is really any I

318
00:10:50,790 --> 00:10:54,389
mean this is Microsoft blob storage this

319
00:10:52,740 --> 00:10:56,129
is I mean there's just there are a

320
00:10:54,389 --> 00:10:59,040
number of storage problems kind of

321
00:10:56,129 --> 00:11:00,809
across the board and so just thinking

322
00:10:59,040 --> 00:11:02,490
about that for a second you got s3 right

323
00:11:00,809 --> 00:11:04,459
this is the file storage you got EBS

324
00:11:02,490 --> 00:11:07,470
volumes it's so like they're mounting

325
00:11:04,459 --> 00:11:09,089
EBS volume and having a full file system

326
00:11:07,470 --> 00:11:10,589
on there and and you have alt like the

327
00:11:09,089 --> 00:11:12,660
keys of the kingdom so you could

328
00:11:10,589 --> 00:11:13,889
transfer EBS volumes from one customer

329
00:11:12,660 --> 00:11:15,750
to another customer so you can have

330
00:11:13,889 --> 00:11:17,189
yours you could export it to your

331
00:11:15,750 --> 00:11:19,319
account and you've just basically X

332
00:11:17,189 --> 00:11:20,790
build their entire volume and then

333
00:11:19,319 --> 00:11:22,410
Amazon will be really nice and remount

334
00:11:20,790 --> 00:11:24,599
it in your environment for you as long

335
00:11:22,410 --> 00:11:27,360
as it's within the same region and so

336
00:11:24,600 --> 00:11:28,649
you have ec2 so you have your compute so

337
00:11:27,360 --> 00:11:30,449
all their servers that are running in

338
00:11:28,649 --> 00:11:32,579
there there's some cool stuff that you

339
00:11:30,449 --> 00:11:34,679
can get from some of the metadata

340
00:11:32,579 --> 00:11:36,199
associated with that you get qz0 these

341
00:11:34,679 --> 00:11:38,399
are always overlooked for some reason

342
00:11:36,199 --> 00:11:41,339
lambda so if you wanted some code

343
00:11:38,399 --> 00:11:43,589
execution within their AWS instance you

344
00:11:41,339 --> 00:11:46,110
could kind of do it that way but it kind

345
00:11:43,589 --> 00:11:48,629
of goes on and on so just looking at a

346
00:11:46,110 --> 00:11:50,429
brief example here this is just this is

347
00:11:48,629 --> 00:11:52,410
twenty three lines of code without the

348
00:11:50,429 --> 00:11:55,079
spaces but I just slapped together

349
00:11:52,410 --> 00:11:57,750
really quick using moto3 and if you look

350
00:11:55,079 --> 00:11:59,729
at line 11 I'm pulling in the s

351
00:11:57,750 --> 00:12:01,920
three and then what I'm doing is I'm

352
00:11:59,730 --> 00:12:04,620
basically just enumerate all the s3

353
00:12:01,920 --> 00:12:05,819
buckets imma numerating all the files in

354
00:12:04,620 --> 00:12:07,680
the buckets and then I'm saying hey does

355
00:12:05,820 --> 00:12:09,090
this file match whatever I passed into

356
00:12:07,680 --> 00:12:11,520
my query so if I wanted to pass it like

357
00:12:09,090 --> 00:12:13,320
the word password I could search all of

358
00:12:11,520 --> 00:12:14,939
their s3 buckets all their files in

359
00:12:13,320 --> 00:12:17,220
their s3 buckets for the files that I

360
00:12:14,940 --> 00:12:18,770
care about and all I had to do is have

361
00:12:17,220 --> 00:12:21,630
an access key and a secret access key

362
00:12:18,770 --> 00:12:22,710
and in this case it didn't even have to

363
00:12:21,630 --> 00:12:24,600
be within their environment it could

364
00:12:22,710 --> 00:12:27,720
have been mine if their environment was

365
00:12:24,600 --> 00:12:28,980
misconfigured and so sometimes you have

366
00:12:27,720 --> 00:12:31,770
read-only but sometimes you have

367
00:12:28,980 --> 00:12:33,420
readwrite if the group policy on that on

368
00:12:31,770 --> 00:12:35,400
that buckets messed up you could write

369
00:12:33,420 --> 00:12:37,380
to it so now imagine planting backdoors

370
00:12:35,400 --> 00:12:38,970
and it being loaded there's just a

371
00:12:37,380 --> 00:12:41,730
number of things besides the data that

372
00:12:38,970 --> 00:12:43,980
you could actually do kind of with it

373
00:12:41,730 --> 00:12:46,020
and so the other really cool thing with

374
00:12:43,980 --> 00:12:48,300
AWS is there's this thing called secret

375
00:12:46,020 --> 00:12:49,350
manager the secrets manager manages

376
00:12:48,300 --> 00:12:51,780
exactly what you would think write

377
00:12:49,350 --> 00:12:54,270
passwords SSH keys you can actually

378
00:12:51,780 --> 00:12:55,589
plant binary files in there and this is

379
00:12:54,270 --> 00:12:57,270
a very trivial

380
00:12:55,590 --> 00:12:59,570
it's another enumeration it's only 32

381
00:12:57,270 --> 00:13:02,430
lines but this just really demonstrates

382
00:12:59,570 --> 00:13:04,380
the ability to be able to enumerate the

383
00:13:02,430 --> 00:13:05,819
secrets manager check to see if it's a

384
00:13:04,380 --> 00:13:07,620
string and if it's a string just dump

385
00:13:05,820 --> 00:13:10,110
that key value pair out that's all it

386
00:13:07,620 --> 00:13:11,670
really is is a key value pair now Amazon

387
00:13:10,110 --> 00:13:13,170
happens to rotate the encryption for you

388
00:13:11,670 --> 00:13:15,150
on a regular basis but if your access

389
00:13:13,170 --> 00:13:17,069
key and secret access key that you found

390
00:13:15,150 --> 00:13:18,420
has access to it then you're able to

391
00:13:17,070 --> 00:13:21,990
read those secrets kind of out of there

392
00:13:18,420 --> 00:13:23,550
and and be good or binaries as well so I

393
00:13:21,990 --> 00:13:24,810
had some ideas about planting binaries

394
00:13:23,550 --> 00:13:27,959
in there and maybe reading it from the

395
00:13:24,810 --> 00:13:31,260
inside for like just kind of planting

396
00:13:27,960 --> 00:13:32,520
but so Google Google's a little bit

397
00:13:31,260 --> 00:13:34,439
different you'll notice here if

398
00:13:32,520 --> 00:13:36,900
anybody's a developer on the Google side

399
00:13:34,440 --> 00:13:38,520
is I'm mentioning the oauth2 client I

400
00:13:36,900 --> 00:13:40,230
think they're deprecating it but I love

401
00:13:38,520 --> 00:13:42,449
this one this is the one that but what I

402
00:13:40,230 --> 00:13:45,450
use this all the time and all of our

403
00:13:42,450 --> 00:13:47,490
talks all of our engagements were facing

404
00:13:45,450 --> 00:13:50,040
a Google customer we do a lot of really

405
00:13:47,490 --> 00:13:52,560
cool stuff with Google using this client

406
00:13:50,040 --> 00:13:55,140
and so you register the app with Google

407
00:13:52,560 --> 00:13:56,699
and then it gives you this token JSON

408
00:13:55,140 --> 00:13:59,339
file that you could save to your local

409
00:13:56,700 --> 00:14:01,980
your local machine and now whenever I

410
00:13:59,339 --> 00:14:03,630
run my tools what happens is it reads in

411
00:14:01,980 --> 00:14:05,370
that token it checks the authorization

412
00:14:03,630 --> 00:14:07,140
it does have authorization and then it

413
00:14:05,370 --> 00:14:08,580
says hey I want you to authenticate and

414
00:14:07,140 --> 00:14:10,710
what happens is it pops open the browser

415
00:14:08,580 --> 00:14:12,360
and you just log in to the users account

416
00:14:10,710 --> 00:14:13,650
and it granted the application

417
00:14:12,360 --> 00:14:15,900
permission to whatever the permission

418
00:14:13,650 --> 00:14:18,240
rolls that they had and I'll talk on the

419
00:14:15,900 --> 00:14:19,920
rolls on the next screen but and then

420
00:14:18,240 --> 00:14:21,780
from there you can search files and

421
00:14:19,920 --> 00:14:24,030
g-drive you could you could pilfer their

422
00:14:21,780 --> 00:14:27,150
email defer VPN passwords and their

423
00:14:24,030 --> 00:14:29,699
email Google Groups we found credentials

424
00:14:27,150 --> 00:14:32,310
in Google Groups accidentally you can

425
00:14:29,700 --> 00:14:33,780
add backdoors to their account and and

426
00:14:32,310 --> 00:14:35,130
this covers pretty much all of the G

427
00:14:33,780 --> 00:14:36,959
suite right so you have the Gmail the G

428
00:14:35,130 --> 00:14:38,970
Drive the calendar the whole nine yards

429
00:14:36,960 --> 00:14:40,440
so that Python setup right there will

430
00:14:38,970 --> 00:14:42,840
kind of get you started with the SDK

431
00:14:40,440 --> 00:14:43,920
there are some other SDKs for Google as

432
00:14:42,840 --> 00:14:46,230
they've been moving into all these

433
00:14:43,920 --> 00:14:48,270
services they've kind of split it from

434
00:14:46,230 --> 00:14:50,070
the compute versus like the the G suite

435
00:14:48,270 --> 00:14:52,050
so there's different libraries you can

436
00:14:50,070 --> 00:14:56,370
do there but there's a lot of them and

437
00:14:52,050 --> 00:14:58,709
so the attack surface is huge there this

438
00:14:56,370 --> 00:15:01,050
is just like a full full-blown backdoor

439
00:14:58,710 --> 00:15:02,910
so it's 24 lines it's really not that

440
00:15:01,050 --> 00:15:03,810
much code and it will release the slide

441
00:15:02,910 --> 00:15:05,370
that give me enough to really worry

442
00:15:03,810 --> 00:15:07,650
about reading it but just to kind of

443
00:15:05,370 --> 00:15:09,510
show you the only thing I really want to

444
00:15:07,650 --> 00:15:10,949
point out here is the Scopes so on this

445
00:15:09,510 --> 00:15:12,900
application the scope of what this

446
00:15:10,950 --> 00:15:16,130
application is asking for requests on

447
00:15:12,900 --> 00:15:20,280
are the Google Calendar the Google email

448
00:15:16,130 --> 00:15:22,260
the drive files the groups and then if

449
00:15:20,280 --> 00:15:24,030
they are a Google admin I want to have

450
00:15:22,260 --> 00:15:25,710
full access over the entire Google admin

451
00:15:24,030 --> 00:15:27,360
SDK on the back end right cuz I want to

452
00:15:25,710 --> 00:15:29,330
be able to create users reset passwords

453
00:15:27,360 --> 00:15:31,740
do whatever I want to do so if I fished

454
00:15:29,330 --> 00:15:33,300
you know a Google customer or my

455
00:15:31,740 --> 00:15:35,640
password sprayed at Google customer that

456
00:15:33,300 --> 00:15:37,740
was a Google admin you have full king

457
00:15:35,640 --> 00:15:40,170
you have basically domain admin on the

458
00:15:37,740 --> 00:15:41,550
external on their Google side and so

459
00:15:40,170 --> 00:15:42,750
this is fairly straightforward this just

460
00:15:41,550 --> 00:15:45,510
basically creates a full access

461
00:15:42,750 --> 00:15:47,430
application and then my file here the

462
00:15:45,510 --> 00:15:49,650
saved creds JSON is gonna have the

463
00:15:47,430 --> 00:15:51,390
authorization tokens that I need going

464
00:15:49,650 --> 00:15:53,910
forward so if they do reset the password

465
00:15:51,390 --> 00:15:55,740
which is great and you know they they

466
00:15:53,910 --> 00:15:57,360
they triage the account they get us out

467
00:15:55,740 --> 00:15:58,890
of the account we lost creds right we're

468
00:15:57,360 --> 00:16:00,240
done right nope because we had the

469
00:15:58,890 --> 00:16:01,949
backdoor if they didn't triage this

470
00:16:00,240 --> 00:16:03,360
right and they didn't clear the app

471
00:16:01,950 --> 00:16:04,740
backdoor which you could by the way you

472
00:16:03,360 --> 00:16:05,820
can name the application whatever you

473
00:16:04,740 --> 00:16:07,500
want so if you wanted to call it the

474
00:16:05,820 --> 00:16:08,460
customers name you're gonna they're just

475
00:16:07,500 --> 00:16:09,900
gonna think it's their own app they're

476
00:16:08,460 --> 00:16:10,830
not even gonna think anything of it so

477
00:16:09,900 --> 00:16:13,410
they usually leave these in the

478
00:16:10,830 --> 00:16:14,490
background and so there's some really

479
00:16:13,410 --> 00:16:17,689
cool stuff with there this is just you

480
00:16:14,490 --> 00:16:20,760
know persisting in a Google account and

481
00:16:17,690 --> 00:16:22,380
so as your is really cool too so pimp

482
00:16:20,760 --> 00:16:23,670
install as your it'll actually go

483
00:16:22,380 --> 00:16:25,189
through all of their other lot

484
00:16:23,670 --> 00:16:28,530
Aries and installed their full package

485
00:16:25,190 --> 00:16:30,810
it's the same thing so if you did it's

486
00:16:28,530 --> 00:16:33,660
easier to kind of do it through the AWS

487
00:16:30,810 --> 00:16:36,959
or the azure CLI so you just install the

488
00:16:33,660 --> 00:16:38,699
CLI and you can run a zc l AZ login or

489
00:16:36,960 --> 00:16:40,080
whatever and it'll pop up in your

490
00:16:38,700 --> 00:16:41,370
browser and do the same thing right so

491
00:16:40,080 --> 00:16:42,900
if you ever logged into a Microsoft

492
00:16:41,370 --> 00:16:44,520
online account that's what it's doing

493
00:16:42,900 --> 00:16:46,380
it's basically asking for you to log in

494
00:16:44,520 --> 00:16:48,090
and then it's granting the privileges in

495
00:16:46,380 --> 00:16:50,430
order to go whatever application that's

496
00:16:48,090 --> 00:16:52,530
being federated through the azure ad

497
00:16:50,430 --> 00:16:53,849
that's there and so it's the same exact

498
00:16:52,530 --> 00:16:55,650
thing it pops open the web session it

499
00:16:53,850 --> 00:16:57,420
grabs the authorization it stores it and

500
00:16:55,650 --> 00:17:01,079
then it just lets you do everything the

501
00:16:57,420 --> 00:17:03,599
same way now as your has a bunch of API

502
00:17:01,080 --> 00:17:05,430
so like graph api's and it's it's super

503
00:17:03,600 --> 00:17:07,110
mess like I tried to understand it one

504
00:17:05,430 --> 00:17:07,740
day actually all their stuff I have such

505
00:17:07,109 --> 00:17:10,409
a hard time really understanding

506
00:17:07,740 --> 00:17:14,160
anything with the Microsoft because they

507
00:17:10,410 --> 00:17:15,810
progressively bring new functionality to

508
00:17:14,160 --> 00:17:17,400
the equation but then they changed the

509
00:17:15,810 --> 00:17:19,109
names and they change the versions and

510
00:17:17,400 --> 00:17:21,450
you can kind of get lost they change the

511
00:17:19,109 --> 00:17:23,969
way they do authorization and so in this

512
00:17:21,450 --> 00:17:25,319
case I'm basically just a numerating

513
00:17:23,970 --> 00:17:27,089
like resources and you could you could

514
00:17:25,319 --> 00:17:28,200
breaks it breaks services into the

515
00:17:27,089 --> 00:17:29,699
smaller libraries so if you don't want

516
00:17:28,200 --> 00:17:31,440
to install the full-blown as your

517
00:17:29,700 --> 00:17:33,960
package you could just install Azure

518
00:17:31,440 --> 00:17:35,940
blob would to get access to the blobs or

519
00:17:33,960 --> 00:17:37,590
whatever you want but it's the same

520
00:17:35,940 --> 00:17:40,410
thing with AWS you have your azure ad

521
00:17:37,590 --> 00:17:41,820
which is really different but you have

522
00:17:40,410 --> 00:17:42,960
storage you have your key vault which is

523
00:17:41,820 --> 00:17:45,929
the same thing is like the secrets

524
00:17:42,960 --> 00:17:47,220
manager in some respect you have virtual

525
00:17:45,930 --> 00:17:49,140
machines with virtual machines you can

526
00:17:47,220 --> 00:17:51,270
run PowerShell scripts remotely on the

527
00:17:49,140 --> 00:17:53,040
virtual machine and so you could kind of

528
00:17:51,270 --> 00:17:56,580
get code execution remotely through

529
00:17:53,040 --> 00:17:59,730
PowerShell the azure ad is a separate

530
00:17:56,580 --> 00:18:00,659
really a big problem so a lot of times

531
00:17:59,730 --> 00:18:02,160
because what they're doing is they're

532
00:18:00,660 --> 00:18:03,870
sinking their on-prem Active Directory

533
00:18:02,160 --> 00:18:05,850
with their Azure cloud Active Directory

534
00:18:03,870 --> 00:18:07,139
and when they do that what's happening

535
00:18:05,850 --> 00:18:08,550
is you have all of their users all of

536
00:18:07,140 --> 00:18:10,260
their groups all of their memberships

537
00:18:08,550 --> 00:18:12,570
all of their devices and you have

538
00:18:10,260 --> 00:18:15,000
full-blown it any user can do it so

539
00:18:12,570 --> 00:18:16,260
that's kind of what we do so this is

540
00:18:15,000 --> 00:18:18,810
what it looks like when you pop up so I

541
00:18:16,260 --> 00:18:20,520
just did a Python cloud as your ad pi

542
00:18:18,810 --> 00:18:24,149
it's just like a little Python script

543
00:18:20,520 --> 00:18:26,160
that numerate stuff and but it prompts

544
00:18:24,150 --> 00:18:28,410
open it says in this case I'm using it

545
00:18:26,160 --> 00:18:30,210
where it's prompting a code you log in

546
00:18:28,410 --> 00:18:31,980
you put the code there this goes no

547
00:18:30,210 --> 00:18:35,730
longer good I was gonna redact it but I

548
00:18:31,980 --> 00:18:37,440
was like screw it and so you put the

549
00:18:35,730 --> 00:18:39,570
code in and then it grants you

550
00:18:37,440 --> 00:18:40,559
that you've signed in and it stores it

551
00:18:39,570 --> 00:18:44,220
and now you're good to go

552
00:18:40,559 --> 00:18:46,049
and so from there this is just

553
00:18:44,220 --> 00:18:47,549
enumerated users groups devices

554
00:18:46,049 --> 00:18:48,929
memberships SPS you can do all of it

555
00:18:47,549 --> 00:18:51,600
it's not doing that in this much mana

556
00:18:48,929 --> 00:18:52,679
code this is just doing the users but so

557
00:18:51,600 --> 00:18:54,059
think about that for a second if you're

558
00:18:52,679 --> 00:18:55,740
pastoring spraying and you get one

559
00:18:54,059 --> 00:18:57,450
account that you've successfully passed

560
00:18:55,740 --> 00:19:00,120
or sprayed on a company that's using as

561
00:18:57,450 --> 00:19:02,009
your ad and you use that one credential

562
00:19:00,120 --> 00:19:03,209
you could grab all of the group's all of

563
00:19:02,009 --> 00:19:04,620
the memberships and everything so now

564
00:19:03,210 --> 00:19:06,899
you know well I know their domain admins

565
00:19:04,620 --> 00:19:08,518
or these people here all the users and I

566
00:19:06,899 --> 00:19:10,799
could do a full spray a password spray

567
00:19:08,519 --> 00:19:12,960
or a password attack but it also gives

568
00:19:10,799 --> 00:19:13,830
you new attack surfaces too because one

569
00:19:12,960 --> 00:19:15,600
thing that I don't have up here is

570
00:19:13,830 --> 00:19:17,668
applications so if you think about as

571
00:19:15,600 --> 00:19:19,379
your ad it's authorizing applications

572
00:19:17,669 --> 00:19:21,870
that are external to the network to use

573
00:19:19,379 --> 00:19:23,158
the credentials for single sign-on and

574
00:19:21,870 --> 00:19:24,600
the federated services or whatever it is

575
00:19:23,159 --> 00:19:26,549
that they're trying to approve for

576
00:19:24,600 --> 00:19:27,809
authorization so a lot of times those

577
00:19:26,549 --> 00:19:29,100
applications that are approved you can

578
00:19:27,809 --> 00:19:30,840
pull those application list and find

579
00:19:29,100 --> 00:19:33,299
completely new attack surfaces for in

580
00:19:30,840 --> 00:19:35,908
like internal applications or

581
00:19:33,299 --> 00:19:36,658
third-party services and so SP ends are

582
00:19:35,909 --> 00:19:39,230
a little bit different if you're

583
00:19:36,659 --> 00:19:43,200
familiar with on-prem Active Directory

584
00:19:39,230 --> 00:19:44,779
SPNs but for the most part that's it and

585
00:19:43,200 --> 00:19:48,360
this is gonna be a little freebie so

586
00:19:44,779 --> 00:19:51,419
this is um not Python but if you do

587
00:19:48,360 --> 00:19:52,860
successfully compromised a credential

588
00:19:51,419 --> 00:19:55,289
for somebody that's using like office

589
00:19:52,860 --> 00:19:57,629
365 or somebody that has a jerk all you

590
00:19:55,289 --> 00:20:00,870
have to do is pivot over here to to the

591
00:19:57,629 --> 00:20:02,399
portal as your comm log in as that user

592
00:20:00,870 --> 00:20:04,229
and you can pretty much see everything

593
00:20:02,399 --> 00:20:06,029
in a nice user interface the really cool

594
00:20:04,230 --> 00:20:09,539
part about this is they can disable your

595
00:20:06,029 --> 00:20:11,850
access on the interface but the command

596
00:20:09,539 --> 00:20:14,879
line access they can't do unless they

597
00:20:11,850 --> 00:20:16,259
turn on conditional rules so they think

598
00:20:14,879 --> 00:20:17,490
well I just I flip the switch in the

599
00:20:16,259 --> 00:20:20,610
portal so they don't have access but you

600
00:20:17,490 --> 00:20:23,549
can still access it through CLI so and

601
00:20:20,610 --> 00:20:26,299
so that's kind of on the clout side I

602
00:20:23,549 --> 00:20:26,299
just did

603
00:20:27,619 --> 00:20:35,970
we lost it broke the cloud there you go

604
00:20:34,049 --> 00:20:39,330
so now we'll talk about writing malware

605
00:20:35,970 --> 00:20:41,789
here you won this year

606
00:20:39,330 --> 00:20:44,399
so now we'll let Jeff take over all

607
00:20:41,789 --> 00:20:46,679
right so Mike what a great series of

608
00:20:44,399 --> 00:20:49,018
slides and by the way just so you're

609
00:20:46,679 --> 00:20:52,739
aware we're going to publish the deck

610
00:20:49,019 --> 00:20:54,779
and we also publishing a giant repo of

611
00:20:52,739 --> 00:20:57,389
proof of concept scripts that you guys

612
00:20:54,779 --> 00:20:58,799
can use so don't don't try to like read

613
00:20:57,389 --> 00:21:00,809
every line of code or think you have to

614
00:20:58,799 --> 00:21:09,109
actually take pictures here you'd be

615
00:21:00,809 --> 00:21:12,239
fine all right all right all right so

616
00:21:09,109 --> 00:21:14,879
I'm gonna have to switch it all right so

617
00:21:12,239 --> 00:21:18,539
my quick agenda is going to be this

618
00:21:14,879 --> 00:21:21,029
right writing some Python malware we can

619
00:21:18,539 --> 00:21:24,929
talk a little bit about evasion evading

620
00:21:21,029 --> 00:21:26,399
MC you are probably well aware that that

621
00:21:24,929 --> 00:21:29,039
can sometimes be an issue especially

622
00:21:26,399 --> 00:21:31,559
with PowerShell scripts we're going to

623
00:21:29,039 --> 00:21:34,529
talk about some custom shell code

624
00:21:31,559 --> 00:21:36,539
injection techniques and then just

625
00:21:34,529 --> 00:21:39,210
briefly mention creating an executable

626
00:21:36,539 --> 00:21:40,859
with Python and my favorite thing of

627
00:21:39,210 --> 00:21:45,419
course is the custom shell code

628
00:21:40,859 --> 00:21:48,168
injection stuff so first of all power

629
00:21:45,419 --> 00:21:50,999
power shell detection with with MC is

630
00:21:48,169 --> 00:21:52,950
well suboptimal and can be irritating

631
00:21:50,999 --> 00:21:54,840
right I mean I bet you anybody's pen

632
00:21:52,950 --> 00:21:56,999
testing you've run into it like you

633
00:21:54,840 --> 00:21:58,619
bring on you bring down a Power View

634
00:21:56,999 --> 00:22:01,889
from somewhere or you bring down your

635
00:21:58,619 --> 00:22:05,220
power up tools whatever and you you know

636
00:22:01,889 --> 00:22:07,649
use IEX and your powershell and amp c

637
00:22:05,220 --> 00:22:10,350
goes hey you can't do that stop all

638
00:22:07,649 --> 00:22:12,809
right so how do we get around that now

639
00:22:10,350 --> 00:22:14,340
many of you are probably aware of Daniel

640
00:22:12,809 --> 00:22:17,129
Bohannon's work right he's got invoke

641
00:22:14,340 --> 00:22:19,709
obfuscation it's awesome I mean it's an

642
00:22:17,129 --> 00:22:23,158
amazing piece of work and you can

643
00:22:19,710 --> 00:22:27,989
certainly go that far if you want to off

644
00:22:23,159 --> 00:22:30,090
you skate PowerShell but honestly MC is

645
00:22:27,989 --> 00:22:33,600
actually not as sophisticated as you

646
00:22:30,090 --> 00:22:37,320
think all right in fact you'd be

647
00:22:33,600 --> 00:22:39,350
surprised that a simple script which

648
00:22:37,320 --> 00:22:41,360
I've developed here called power strip

649
00:22:39,350 --> 00:22:46,549
like the name I'm not good at marketing

650
00:22:41,360 --> 00:22:48,469
but we call a power strip okay which all

651
00:22:46,549 --> 00:22:50,840
it did the first iteration of the script

652
00:22:48,470 --> 00:22:56,770
all it did was destroyed every comment

653
00:22:50,840 --> 00:22:59,059
in the PowerShell script and it works

654
00:22:56,770 --> 00:23:01,580
for just about all the samples that I

655
00:22:59,059 --> 00:23:07,190
pulled down onto a desktop like no MC

656
00:23:01,580 --> 00:23:07,610
like really not kidding right there we

657
00:23:07,190 --> 00:23:10,250
go

658
00:23:07,610 --> 00:23:12,260
right so you know just this the the

659
00:23:10,250 --> 00:23:15,020
classic web cradle that I tend to use a

660
00:23:12,260 --> 00:23:18,530
lot is just the base64 encoded

661
00:23:15,020 --> 00:23:20,809
PowerShell script crank up a simple HTTP

662
00:23:18,530 --> 00:23:24,530
server in Python not even encrypting and

663
00:23:20,809 --> 00:23:27,110
then just use the net system net dot web

664
00:23:24,530 --> 00:23:29,480
client just to bring down that base64

665
00:23:27,110 --> 00:23:30,799
decode it use ie X we don't touch disk

666
00:23:29,480 --> 00:23:33,200
we don't put anything on the disk it's

667
00:23:30,799 --> 00:23:34,789
in memory we're ready to execute but

668
00:23:33,200 --> 00:23:38,030
AMSA you'll still get you right this is

669
00:23:34,789 --> 00:23:40,100
a standard powershell power view sorry

670
00:23:38,030 --> 00:23:41,720
and when we brought that down you can

671
00:23:40,100 --> 00:23:43,510
see down the bottom here it says no I'm

672
00:23:41,720 --> 00:23:46,150
sorry this script contains malicious

673
00:23:43,510 --> 00:23:49,549
content and has been blocked by your

674
00:23:46,150 --> 00:23:51,380
antivirus software so you know you cry a

675
00:23:49,549 --> 00:23:52,940
little bit and then you go home and you

676
00:23:51,380 --> 00:23:54,530
stop pen testing right now you don't

677
00:23:52,940 --> 00:23:56,630
really do that all you do is strip the

678
00:23:54,530 --> 00:23:59,418
comments and so this is power power

679
00:23:56,630 --> 00:24:02,210
strip at work all it does is you give it

680
00:23:59,419 --> 00:24:04,760
a file name it creates a file by the

681
00:24:02,210 --> 00:24:07,580
same name and it push puts - stripped on

682
00:24:04,760 --> 00:24:09,740
the end and then you can base 64 encoded

683
00:24:07,580 --> 00:24:10,879
again if you want to although I was

684
00:24:09,740 --> 00:24:12,770
actually testing a customer the other

685
00:24:10,880 --> 00:24:14,299
day that didn't even need me to basic

686
00:24:12,770 --> 00:24:17,210
Steve or encoded I was just pulling it

687
00:24:14,299 --> 00:24:21,559
over HTTP in plain text directly into

688
00:24:17,210 --> 00:24:24,799
the power show that was crazy all right

689
00:24:21,559 --> 00:24:27,379
and it worked right so here we have me

690
00:24:24,799 --> 00:24:30,080
creating the cradle' again downloading

691
00:24:27,380 --> 00:24:32,030
it base64 decoding it and you can see I

692
00:24:30,080 --> 00:24:33,830
got the help on find Amane share which

693
00:24:32,030 --> 00:24:36,559
is part of the power sploit Power View

694
00:24:33,830 --> 00:24:39,320
script and I'm off to the races right

695
00:24:36,559 --> 00:24:43,340
all I did was took out the comments all

696
00:24:39,320 --> 00:24:44,840
right but maybe maybe you need a little

697
00:24:43,340 --> 00:24:48,168
bit more power and if you need a little

698
00:24:44,840 --> 00:24:50,928
bit more power I added one extra feature

699
00:24:48,169 --> 00:24:53,360
which i think is kind of cute I call it

700
00:24:50,929 --> 00:24:55,010
stutter all right apologies to

701
00:24:53,360 --> 00:24:58,159
anybody has a speech impediment I call

702
00:24:55,010 --> 00:25:00,740
it stutter with the - s and what stutter

703
00:24:58,160 --> 00:25:02,809
does is it takes every applet in the

704
00:25:00,740 --> 00:25:04,850
script that it can detect and it just

705
00:25:02,809 --> 00:25:07,520
adds an extra letter to the beginning so

706
00:25:04,850 --> 00:25:13,580
invoke becomes I invoke and get becomes

707
00:25:07,520 --> 00:25:15,559
g-get write really simple concept and so

708
00:25:13,580 --> 00:25:17,270
it analyzes it and puts it out I mean

709
00:25:15,559 --> 00:25:19,070
sorry it processes it puts it out to the

710
00:25:17,270 --> 00:25:22,370
file we downloaded again and this time

711
00:25:19,070 --> 00:25:24,409
notice how it's the find domain share

712
00:25:22,370 --> 00:25:26,479
instead of just fine to main share and

713
00:25:24,410 --> 00:25:27,980
again you're off to the races so the

714
00:25:26,480 --> 00:25:30,320
combination of stuttering and just

715
00:25:27,980 --> 00:25:33,010
stripping comments has been sufficient

716
00:25:30,320 --> 00:25:34,870
for me to evader emcee every single time

717
00:25:33,010 --> 00:25:37,640
and it's really not that sophisticated

718
00:25:34,870 --> 00:25:43,639
right simple script that one's in the

719
00:25:37,640 --> 00:25:45,280
repo for your enjoyment okay whoops all

720
00:25:43,640 --> 00:25:49,669
right let's talk about malware briefly

721
00:25:45,280 --> 00:25:51,168
now python natively has access to the c

722
00:25:49,669 --> 00:25:54,110
types module on the Windows operating

723
00:25:51,169 --> 00:25:56,179
system okay and if you have access to

724
00:25:54,110 --> 00:26:00,530
the C types module you can actually

725
00:25:56,179 --> 00:26:02,150
setup kernel32 calls into that DLL to do

726
00:26:00,530 --> 00:26:04,280
some interesting things in the memory of

727
00:26:02,150 --> 00:26:07,460
the machine all right thank you can

728
00:26:04,280 --> 00:26:10,370
leverage it to run any shell code so

729
00:26:07,460 --> 00:26:12,500
pick your weapon of choice whether it's

730
00:26:10,370 --> 00:26:14,719
MSF venom whether it's Cobalt strike or

731
00:26:12,500 --> 00:26:17,750
your own custom shell code if you're

732
00:26:14,720 --> 00:26:20,179
really feeling fancy write and generate

733
00:26:17,750 --> 00:26:22,309
out your raw shell code and then usually

734
00:26:20,179 --> 00:26:24,620
what I do is just base 64 encode it and

735
00:26:22,309 --> 00:26:27,500
slap it into the Python script that I'm

736
00:26:24,620 --> 00:26:29,360
about to use right now as I mentioned

737
00:26:27,500 --> 00:26:31,640
here there is a huge number of different

738
00:26:29,360 --> 00:26:32,750
process injection techniques and this is

739
00:26:31,640 --> 00:26:34,970
not going to be a lesson on all those

740
00:26:32,750 --> 00:26:37,700
because we just don't have time there's

741
00:26:34,970 --> 00:26:39,799
also a lot of really bad code examples

742
00:26:37,700 --> 00:26:42,950
floating around the internet especially

743
00:26:39,799 --> 00:26:45,049
in the Python case in fact Mike and I

744
00:26:42,950 --> 00:26:47,600
were searching for it and we could not

745
00:26:45,049 --> 00:26:50,240
find a decent Python example so I

746
00:26:47,600 --> 00:26:52,040
believe that this is the first series of

747
00:26:50,240 --> 00:26:55,790
process injection Python examples that

748
00:26:52,040 --> 00:26:57,350
exist in any decent authored state

749
00:26:55,790 --> 00:27:00,379
anyway try that again

750
00:26:57,350 --> 00:27:03,649
come on alright so show code injection

751
00:27:00,380 --> 00:27:05,660
there's three fundamental steps to get

752
00:27:03,650 --> 00:27:07,070
your shell code into memory and it does

753
00:27:05,660 --> 00:27:08,179
it varies a little bit

754
00:27:07,070 --> 00:27:10,309
depending on whether you're doing local

755
00:27:08,179 --> 00:27:12,080
process or remote process injection but

756
00:27:10,309 --> 00:27:13,730
it comes down to this allocate the

757
00:27:12,080 --> 00:27:16,250
memory copy the shellcode to the

758
00:27:13,730 --> 00:27:18,529
allocated memory and create a running

759
00:27:16,250 --> 00:27:21,710
thread of code somehow whether it's a

760
00:27:18,529 --> 00:27:23,809
remote process or a local process we

761
00:27:21,710 --> 00:27:25,100
will not talk about reflexive DLL

762
00:27:23,809 --> 00:27:27,740
injection because that's kind of an

763
00:27:25,100 --> 00:27:28,820
ancient technique and you just don't

764
00:27:27,740 --> 00:27:30,880
need to do it anymore

765
00:27:28,820 --> 00:27:33,168
okay we're not going to talk about

766
00:27:30,880 --> 00:27:34,970
process hollowing either this is

767
00:27:33,169 --> 00:27:41,509
basically thread techniques that I'm

768
00:27:34,970 --> 00:27:42,710
going to present here in Python that's

769
00:27:41,509 --> 00:27:45,649
below better here

770
00:27:42,710 --> 00:27:47,330
all right first step memory allocation

771
00:27:45,649 --> 00:27:49,399
we have a limited number of kernel calls

772
00:27:47,330 --> 00:27:51,379
we can use for memory allocation there's

773
00:27:49,399 --> 00:27:53,239
virtual Alec which allows us to allocate

774
00:27:51,379 --> 00:27:55,399
memory in the same process there's

775
00:27:53,240 --> 00:27:57,799
virtual Alec e^x which allows us to

776
00:27:55,399 --> 00:27:59,870
allocate memory in a remote process and

777
00:27:57,799 --> 00:28:01,429
then the third one is kind of an

778
00:27:59,870 --> 00:28:04,158
interesting twist on that and you can

779
00:28:01,429 --> 00:28:06,110
use the heap to create a new heap for

780
00:28:04,159 --> 00:28:07,730
yourself and then copy your shellcode

781
00:28:06,110 --> 00:28:09,799
onto the new heap within the same

782
00:28:07,730 --> 00:28:12,470
process now I really wish there was a

783
00:28:09,799 --> 00:28:18,620
heap create e^x that would be awesome

784
00:28:12,470 --> 00:28:20,570
right but there isn't unfortunately when

785
00:28:18,620 --> 00:28:21,799
we come to copying the shellcode we

786
00:28:20,570 --> 00:28:24,139
pretty much have a couple of different

787
00:28:21,799 --> 00:28:26,269
choices we can use ITL move mem for

788
00:28:24,139 --> 00:28:28,879
local in process we can use write

789
00:28:26,269 --> 00:28:31,220
process memory for remote process

790
00:28:28,879 --> 00:28:32,360
injection okay now one of the things I

791
00:28:31,220 --> 00:28:34,580
discovered when I was putting together

792
00:28:32,360 --> 00:28:38,000
these code samples from code that does

793
00:28:34,580 --> 00:28:41,029
not exist was that the C types module in

794
00:28:38,000 --> 00:28:43,610
Python 3 is broken bummer

795
00:28:41,029 --> 00:28:45,710
how is it broken it does not allow you

796
00:28:43,610 --> 00:28:47,959
to copy shellcode into memory if the

797
00:28:45,710 --> 00:28:49,610
shell code has null characters in it now

798
00:28:47,960 --> 00:28:51,379
I know what you're all thinking you're

799
00:28:49,610 --> 00:28:55,219
going oh I've got the encoders right I

800
00:28:51,379 --> 00:28:58,610
can just use the encoders well yes and

801
00:28:55,220 --> 00:29:00,679
no I suggest you don't use the encoders

802
00:28:58,610 --> 00:29:02,928
because there is a particular flag on

803
00:29:00,679 --> 00:29:05,210
the virtual Alec that you can use to

804
00:29:02,929 --> 00:29:07,399
make a segment of memory read execute

805
00:29:05,210 --> 00:29:09,379
only instead of read write execute and

806
00:29:07,399 --> 00:29:12,500
it actually ducks under the wire a

807
00:29:09,379 --> 00:29:14,539
little bit it's a little more download

808
00:29:12,500 --> 00:29:16,309
perhaps is the way to say it right and

809
00:29:14,539 --> 00:29:18,019
so if you would actually use the

810
00:29:16,309 --> 00:29:20,460
encoders the problem with the encoders

811
00:29:18,019 --> 00:29:22,200
like in Metasploit for example

812
00:29:20,460 --> 00:29:24,510
that shell code has to have the ability

813
00:29:22,200 --> 00:29:26,610
to write back to the same memory segment

814
00:29:24,510 --> 00:29:28,970
and so we would have to leave that

815
00:29:26,610 --> 00:29:31,979
memory segment as read write execute and

816
00:29:28,970 --> 00:29:33,330
I don't like doing that so I don't

817
00:29:31,980 --> 00:29:37,710
encode my shell code does that make it

818
00:29:33,330 --> 00:29:39,720
sense alright that doesn't mean I can't

819
00:29:37,710 --> 00:29:42,090
do something like X or the shell code

820
00:29:39,720 --> 00:29:43,380
though right in the script I just don't

821
00:29:42,090 --> 00:29:46,320
encode it when I actually stick it into

822
00:29:43,380 --> 00:29:48,450
memory for starting the thread we have

823
00:29:46,320 --> 00:29:50,790
three basic possibilities we can create

824
00:29:48,450 --> 00:29:52,350
thread in the local process only we can

825
00:29:50,790 --> 00:29:55,320
create remote thread in the remote

826
00:29:52,350 --> 00:29:57,120
process and then push some interesting

827
00:29:55,320 --> 00:29:59,490
variants in the last couple of years we

828
00:29:57,120 --> 00:30:01,830
can use a synchronous procedure call to

829
00:29:59,490 --> 00:30:03,630
actually queue up the code into a remote

830
00:30:01,830 --> 00:30:06,540
process and if that code actually

831
00:30:03,630 --> 00:30:08,700
processes H asynchronous procedures it

832
00:30:06,540 --> 00:30:11,129
can it can actually fire off that thread

833
00:30:08,700 --> 00:30:13,500
of code right by processing procedure

834
00:30:11,130 --> 00:30:15,660
call this last one is really really cool

835
00:30:13,500 --> 00:30:18,330
I'm not giving you a code segment on the

836
00:30:15,660 --> 00:30:20,490
last one sorry I didn't have time okay

837
00:30:18,330 --> 00:30:21,960
but I will give you some code segments

838
00:30:20,490 --> 00:30:24,030
on create thread and Cray remote thread

839
00:30:21,960 --> 00:30:25,440
alright one of the things I just want to

840
00:30:24,030 --> 00:30:25,860
tell a brief story I know we haven't got

841
00:30:25,440 --> 00:30:29,070
much time

842
00:30:25,860 --> 00:30:30,659
but queue user ABC is so cool that's

843
00:30:29,070 --> 00:30:32,159
something you can achieve and this is a

844
00:30:30,660 --> 00:30:34,140
challenge for you guys to actually think

845
00:30:32,160 --> 00:30:37,320
about is you could actually find a

846
00:30:34,140 --> 00:30:40,110
process and queue user a PC to every

847
00:30:37,320 --> 00:30:41,850
thread that process owns and if it's

848
00:30:40,110 --> 00:30:45,060
shell code that gives you a C to channel

849
00:30:41,850 --> 00:30:46,350
guess what you end up with usually we

850
00:30:45,060 --> 00:30:48,360
you'll end up with multiple C two

851
00:30:46,350 --> 00:30:53,909
channels it's kind of cool cuz it'll

852
00:30:48,360 --> 00:30:55,590
fire it off in multiple threads now one

853
00:30:53,910 --> 00:30:57,240
of the challenges with Python is you

854
00:30:55,590 --> 00:30:59,959
have to match up the argument types in

855
00:30:57,240 --> 00:31:02,580
the kernel32.dll because if you don't

856
00:30:59,960 --> 00:31:04,980
Python C types makes the assumption that

857
00:31:02,580 --> 00:31:05,250
every argument going into the q user q

858
00:31:04,980 --> 00:31:07,230
user

859
00:31:05,250 --> 00:31:09,510
sorry every argument going into the

860
00:31:07,230 --> 00:31:12,180
kernel 32 call is going to be MFC

861
00:31:09,510 --> 00:31:14,700
integer type and that's suboptimal we

862
00:31:12,180 --> 00:31:16,980
don't want it always to be an integer

863
00:31:14,700 --> 00:31:20,370
type so we actually have to create some

864
00:31:16,980 --> 00:31:22,460
initialization code to actually set up

865
00:31:20,370 --> 00:31:26,100
the argument types for each kernel call

866
00:31:22,460 --> 00:31:28,680
based on the MSDN definition of that

867
00:31:26,100 --> 00:31:31,949
actual kernel function so we go out to

868
00:31:28,680 --> 00:31:33,240
MSDN we look for create thread we find

869
00:31:31,950 --> 00:31:34,140
out that the arguments are going to be

870
00:31:33,240 --> 00:31:37,710
LP void

871
00:31:34,140 --> 00:31:39,540
Buhl maybe short maybe D would help

872
00:31:37,710 --> 00:31:41,100
avoid again right and we set up our

873
00:31:39,540 --> 00:31:43,409
argument types and we can also set up

874
00:31:41,100 --> 00:31:45,750
the return type so maybe it's a handle

875
00:31:43,410 --> 00:31:48,540
maybe it's a void pointer again maybe

876
00:31:45,750 --> 00:31:49,890
it's a rule etc all right so we have to

877
00:31:48,540 --> 00:31:51,799
actually go through this step and this

878
00:31:49,890 --> 00:31:54,690
is tricky if you don't get this right

879
00:31:51,799 --> 00:31:57,299
your Python shell code injection is not

880
00:31:54,690 --> 00:32:03,780
going to work trust me I learned the

881
00:31:57,299 --> 00:32:05,940
hard way and here's an example of

882
00:32:03,780 --> 00:32:08,340
injecting code into the same process it

883
00:32:05,940 --> 00:32:10,530
really is this short once you have to

884
00:32:08,340 --> 00:32:13,129
find the argument types so what we have

885
00:32:10,530 --> 00:32:15,629
on the screen is me using virtual Alec

886
00:32:13,130 --> 00:32:17,340
using the mem commit and the page

887
00:32:15,630 --> 00:32:19,080
read/write/execute notice I made a

888
00:32:17,340 --> 00:32:21,899
comment on that earlier right I'm

889
00:32:19,080 --> 00:32:23,909
allocating memory in this case in the

890
00:32:21,900 --> 00:32:26,610
Python interpreter that's running this

891
00:32:23,910 --> 00:32:28,890
script then once I've allocated that

892
00:32:26,610 --> 00:32:31,830
memory I'm using ITL move mem to

893
00:32:28,890 --> 00:32:34,260
actually move the memory move sorry the

894
00:32:31,830 --> 00:32:36,659
shellcode whatever the shellcode is into

895
00:32:34,260 --> 00:32:39,840
that memory pointer then notice how I

896
00:32:36,660 --> 00:32:43,470
used virtual protect to reproject the

897
00:32:39,840 --> 00:32:45,178
memory segment as read executes and this

898
00:32:43,470 --> 00:32:47,850
is my way of ducking under the wire a

899
00:32:45,179 --> 00:32:50,580
little bit because read execute is less

900
00:32:47,850 --> 00:32:52,678
obvious than read write execute in terms

901
00:32:50,580 --> 00:32:53,939
of the kernel calls that your process is

902
00:32:52,679 --> 00:32:56,760
going to make okay

903
00:32:53,940 --> 00:32:59,220
now this way does this apply anybody

904
00:32:56,760 --> 00:33:01,860
running like Sentinel one or silence

905
00:32:59,220 --> 00:33:03,540
right this is the type of product that

906
00:33:01,860 --> 00:33:05,969
may be able to detect that you've got to

907
00:33:03,540 --> 00:33:07,530
read write execute so we want to duck

908
00:33:05,970 --> 00:33:10,830
under the wire we want to retag it as

909
00:33:07,530 --> 00:33:12,780
quickly as we can then we're going to

910
00:33:10,830 --> 00:33:14,280
use create thread in the same process it

911
00:33:12,780 --> 00:33:15,600
would spin up that Shoko thread and

912
00:33:14,280 --> 00:33:17,610
you're off to the races

913
00:33:15,600 --> 00:33:19,230
you've just simply created another

914
00:33:17,610 --> 00:33:22,758
thread in the Python process and your

915
00:33:19,230 --> 00:33:24,720
shell codes executed all right

916
00:33:22,759 --> 00:33:25,789
if you don't believe me I'm gonna do a

917
00:33:24,720 --> 00:33:30,029
demo in just a minute

918
00:33:25,789 --> 00:33:31,529
what about remote process injection well

919
00:33:30,029 --> 00:33:33,000
the first thing about remote process

920
00:33:31,529 --> 00:33:34,500
injection is you have to find a process

921
00:33:33,000 --> 00:33:38,490
that you want to host your code in

922
00:33:34,500 --> 00:33:40,500
Python has a module called PS util which

923
00:33:38,490 --> 00:33:42,870
is actually fairly handy for looking for

924
00:33:40,500 --> 00:33:45,240
processes on a Windows system so if we

925
00:33:42,870 --> 00:33:47,340
import PS you tell we can write

926
00:33:45,240 --> 00:33:49,200
ourselves a little function that

927
00:33:47,340 --> 00:33:52,110
actually goes out and searches for

928
00:33:49,200 --> 00:33:55,470
interesting candidates to inject shell

929
00:33:52,110 --> 00:33:57,240
code into well one of my favorites is

930
00:33:55,470 --> 00:33:58,980
something that you guys all know about

931
00:33:57,240 --> 00:34:02,539
it's our favourite process called

932
00:33:58,980 --> 00:34:07,500
service hosted XE y because svchost.exe

933
00:34:02,539 --> 00:34:09,000
is something that always is initiating

934
00:34:07,500 --> 00:34:11,550
network connection so if there's a C 2

935
00:34:09,000 --> 00:34:14,219
channel coming out of an SVC host XE

936
00:34:11,550 --> 00:34:15,510
process your defenders are probably not

937
00:34:14,219 --> 00:34:18,959
gonna be able to find it I like which

938
00:34:15,510 --> 00:34:21,659
one is it all right they don't know so

939
00:34:18,960 --> 00:34:23,429
we can create this little Python routine

940
00:34:21,659 --> 00:34:25,290
and all this is doing is listing all the

941
00:34:23,429 --> 00:34:27,450
processes and then it's going through

942
00:34:25,290 --> 00:34:29,369
this candidate list and looking to see

943
00:34:27,449 --> 00:34:32,040
if the current user name owns the

944
00:34:29,369 --> 00:34:34,349
process and the process is named service

945
00:34:32,040 --> 00:34:35,969
hosted XE it adds it up to the candidate

946
00:34:34,349 --> 00:34:38,369
list and then I actually pick a random

947
00:34:35,969 --> 00:34:39,928
bid from the candidate list after I

948
00:34:38,369 --> 00:34:41,790
finished looping now that's a little

949
00:34:39,929 --> 00:34:43,889
extra little bit of office keishon

950
00:34:41,790 --> 00:34:45,989
because what I need to do there is not

951
00:34:43,889 --> 00:34:47,940
just pick the very first service host on

952
00:34:45,989 --> 00:34:49,439
XE because well that's going to be a

953
00:34:47,940 --> 00:34:51,720
little obvious I should pick one at

954
00:34:49,440 --> 00:34:55,560
random right so I'm doing a little bit

955
00:34:51,719 --> 00:34:58,480
of a random choice here I keep doing

956
00:34:55,560 --> 00:35:01,340
that I got a change of slide

957
00:34:58,480 --> 00:35:03,440
for remote processes injection steps I

958
00:35:01,340 --> 00:35:04,850
couldn't put the code on the screen but

959
00:35:03,440 --> 00:35:06,800
this is one way to do it we're going to

960
00:35:04,850 --> 00:35:09,380
use open process once we locate the

961
00:35:06,800 --> 00:35:11,390
process to grab the process handle we're

962
00:35:09,380 --> 00:35:13,130
going to use virtuality X to allocate

963
00:35:11,390 --> 00:35:14,720
the memory for the shell code we're

964
00:35:13,130 --> 00:35:17,000
going to use write process memory to

965
00:35:14,720 --> 00:35:18,620
write that shell code into into memory

966
00:35:17,000 --> 00:35:21,230
and then again we're going to come back

967
00:35:18,620 --> 00:35:23,960
with virtual protectee X to retag the

968
00:35:21,230 --> 00:35:25,970
memory back to read execute only okay

969
00:35:23,960 --> 00:35:28,520
then we're going to create the remote

970
00:35:25,970 --> 00:35:30,080
thread and after that frankly we can

971
00:35:28,520 --> 00:35:32,450
free up the memory and close the handle

972
00:35:30,080 --> 00:35:35,930
and that process will happily now host

973
00:35:32,450 --> 00:35:41,330
your shell code and awesome right you're

974
00:35:35,930 --> 00:35:43,940
running now let's let me do a quick demo

975
00:35:41,330 --> 00:35:46,819
before I cover this slide I want you to

976
00:35:43,940 --> 00:35:49,340
understand that this thing actually

977
00:35:46,820 --> 00:35:51,980
works so here we have have a innocent

978
00:35:49,340 --> 00:35:54,170
victim windows box ie the box that I

979
00:35:51,980 --> 00:35:56,150
pick on with myself all the time all

980
00:35:54,170 --> 00:35:59,450
right and we're gonna run my little demo

981
00:35:56,150 --> 00:36:03,680
script called PI injector dot py now my

982
00:35:59,450 --> 00:36:04,879
Dania demo script is something that is

983
00:36:03,680 --> 00:36:06,859
programmed in with three different

984
00:36:04,880 --> 00:36:09,380
techniques for a shell code injection

985
00:36:06,860 --> 00:36:10,840
technique number one is to use virtual

986
00:36:09,380 --> 00:36:13,490
Alec in the same Python process

987
00:36:10,840 --> 00:36:16,190
technique number two is to use heap Alec

988
00:36:13,490 --> 00:36:18,350
and then sorry heap create and then heap

989
00:36:16,190 --> 00:36:20,150
Alec to create the shell code in the

990
00:36:18,350 --> 00:36:23,420
heap and technique number three is to

991
00:36:20,150 --> 00:36:26,150
find a process that user owns and use

992
00:36:23,420 --> 00:36:29,030
create remote thread to stick the shell

993
00:36:26,150 --> 00:36:31,550
code into that remote process now I have

994
00:36:29,030 --> 00:36:34,280
a little bit of some reason it wants me

995
00:36:31,550 --> 00:36:36,090
to change my settings there okay so

996
00:36:34,280 --> 00:36:39,870
let's try it now

997
00:36:36,090 --> 00:36:41,940
you know how live demos go really well

998
00:36:39,870 --> 00:36:44,190
most of the time right no the shellcode

999
00:36:41,940 --> 00:36:48,590
that I've got here is actually shellcode

1000
00:36:44,190 --> 00:36:51,660
that injects a calculator command into

1001
00:36:48,590 --> 00:36:53,580
into the cmd.exe it just pops a

1002
00:36:51,660 --> 00:36:56,879
calculator right it's it's emesis Venom

1003
00:36:53,580 --> 00:36:59,520
straight up windows / exec CMD equals

1004
00:36:56,880 --> 00:37:03,630
Calcutta XE in the 64-bit case it's

1005
00:36:59,520 --> 00:37:05,790
windows / x64 slash exec CMD equals C it

1006
00:37:03,630 --> 00:37:07,530
caltech C so this script is actually

1007
00:37:05,790 --> 00:37:09,450
capable of doing architecture detection

1008
00:37:07,530 --> 00:37:10,920
as well and that's actually important

1009
00:37:09,450 --> 00:37:13,620
because especially when you're finding

1010
00:37:10,920 --> 00:37:15,150
remote process you need the ability to

1011
00:37:13,620 --> 00:37:16,410
find a process that matches the

1012
00:37:15,150 --> 00:37:19,230
architecture of the shell code that

1013
00:37:16,410 --> 00:37:20,339
you're going to run all right now who

1014
00:37:19,230 --> 00:37:22,310
doesn't need a calculator

1015
00:37:20,340 --> 00:37:27,750
ready option one virtual alloc

1016
00:37:22,310 --> 00:37:31,529
calculator whoo all right option two he

1017
00:37:27,750 --> 00:37:33,630
palak calculator woohoo hey I'm winning

1018
00:37:31,530 --> 00:37:36,240
on two out of three now let's see if the

1019
00:37:33,630 --> 00:37:40,050
remote process injection will actually

1020
00:37:36,240 --> 00:37:42,000
work all right close my calculator I

1021
00:37:40,050 --> 00:37:43,410
really wanted to do the Q user a PC

1022
00:37:42,000 --> 00:37:45,990
version that injects into multiple

1023
00:37:43,410 --> 00:37:47,879
threads but I didn't have time option

1024
00:37:45,990 --> 00:37:51,080
three find a process that user owns and

1025
00:37:47,880 --> 00:37:53,760
use create remote threat calculator

1026
00:37:51,080 --> 00:37:56,819
woohoo all right and the process it

1027
00:37:53,760 --> 00:37:59,460
found service host XE open the process

1028
00:37:56,820 --> 00:38:01,410
handle allocated the memory wrote 276

1029
00:37:59,460 --> 00:38:04,920
bytes of shell code in there and started

1030
00:38:01,410 --> 00:38:07,799
a calculator that code is available to

1031
00:38:04,920 --> 00:38:13,140
you in the repo alright so you have some

1032
00:38:07,800 --> 00:38:14,610
process injection code and I think it's

1033
00:38:13,140 --> 00:38:20,520
like the first example of process

1034
00:38:14,610 --> 00:38:22,440
injection code that really exists now

1035
00:38:20,520 --> 00:38:24,090
the next thing you gotta ask me is you

1036
00:38:22,440 --> 00:38:25,530
know customers don't have a Python

1037
00:38:24,090 --> 00:38:27,840
interpreter happily sitting on their

1038
00:38:25,530 --> 00:38:29,610
endpoint all right I mean what are you

1039
00:38:27,840 --> 00:38:32,310
gonna do you gonna call up the customer

1040
00:38:29,610 --> 00:38:34,830
excuse me I'm about to run a phishing

1041
00:38:32,310 --> 00:38:36,720
campaign and we've got our Python script

1042
00:38:34,830 --> 00:38:38,490
here and do you mind actually using a

1043
00:38:36,720 --> 00:38:40,319
GPO to push our Python out around the

1044
00:38:38,490 --> 00:38:44,910
environment and the customers gonna go

1045
00:38:40,320 --> 00:38:47,670
No okay so phishing campaign dead what

1046
00:38:44,910 --> 00:38:49,410
about installing subsystem what about

1047
00:38:47,670 --> 00:38:50,400
installing a Linux subsystem that is a

1048
00:38:49,410 --> 00:38:51,899
possibility

1049
00:38:50,400 --> 00:38:55,109
good for what I didn't think about that

1050
00:38:51,900 --> 00:38:57,359
one option you have five minutes is PI

1051
00:38:55,109 --> 00:38:59,460
installer PI install is not bad PI

1052
00:38:57,359 --> 00:39:01,348
installer goes out it grabs the Python

1053
00:38:59,460 --> 00:39:03,329
interpreter it analyzes the script it

1054
00:39:01,349 --> 00:39:05,819
looks for all the dependencies that that

1055
00:39:03,329 --> 00:39:08,579
script has it wraps them all up into one

1056
00:39:05,819 --> 00:39:10,619
self extracting executable and then you

1057
00:39:08,579 --> 00:39:12,980
can drop that executable on the

1058
00:39:10,619 --> 00:39:14,910
customers environment and run it

1059
00:39:12,980 --> 00:39:16,529
presumably they don't have a quite

1060
00:39:14,910 --> 00:39:18,230
listening Oh bummer

1061
00:39:16,529 --> 00:39:20,940
what if they have that right listening

1062
00:39:18,230 --> 00:39:22,920
well you can get into the world of

1063
00:39:20,940 --> 00:39:24,990
ironpython we don't have time to

1064
00:39:22,920 --> 00:39:27,119
actually talk about that today but

1065
00:39:24,990 --> 00:39:29,669
ultimately if you can deliver payloads

1066
00:39:27,119 --> 00:39:31,049
that are DLL assemblies you're always

1067
00:39:29,670 --> 00:39:33,059
going to do better because then you can

1068
00:39:31,049 --> 00:39:34,829
use tools like msbuild install you to

1069
00:39:33,059 --> 00:39:38,250
all those kind of things to live off the

1070
00:39:34,829 --> 00:39:42,630
land and load your DLL assembly directly

1071
00:39:38,250 --> 00:39:44,190
in those tools all right I'm gonna throw

1072
00:39:42,630 --> 00:39:46,880
it back to Mike and we're almost out of

1073
00:39:44,190 --> 00:39:46,880
time go Mikey

1074
00:39:47,270 --> 00:39:50,309
all right cool so we'll just look at

1075
00:39:49,109 --> 00:39:52,740
some libraries real quick we only got a

1076
00:39:50,309 --> 00:39:54,180
couple minutes left so these are these

1077
00:39:52,740 --> 00:39:56,729
are pretty cool libraries and we use

1078
00:39:54,180 --> 00:39:57,960
them on a regular basis some of them the

1079
00:39:56,730 --> 00:40:00,029
first one is the socket it's the

1080
00:39:57,960 --> 00:40:02,490
standard comes with Python you can build

1081
00:40:00,029 --> 00:40:05,609
it for C 2 out of it you could do dns

1082
00:40:02,490 --> 00:40:08,520
stuff port scanning there's an nmap

1083
00:40:05,609 --> 00:40:11,369
wrapper called Python lib map I like it

1084
00:40:08,520 --> 00:40:12,900
but you can also just do live port

1085
00:40:11,369 --> 00:40:14,130
discovery but you know trying to make a

1086
00:40:12,900 --> 00:40:16,589
socket connection to the port on the

1087
00:40:14,130 --> 00:40:18,150
host and be fine there if you're looking

1088
00:40:16,589 --> 00:40:19,788
to do any packet manipulation stuff so

1089
00:40:18,150 --> 00:40:21,569
wanting to deal with actual packets

1090
00:40:19,789 --> 00:40:23,490
escapee is great you can construct

1091
00:40:21,569 --> 00:40:26,579
packets you could expect packets there's

1092
00:40:23,490 --> 00:40:27,990
all kinds of stuff and then there's pcap

1093
00:40:26,579 --> 00:40:29,549
interaction so you should probably see

1094
00:40:27,990 --> 00:40:30,868
them a lot of CTF so if you do the CTF

1095
00:40:29,549 --> 00:40:32,339
like they'll give you a pcap file and

1096
00:40:30,869 --> 00:40:34,950
you're trying to figure out something to

1097
00:40:32,339 --> 00:40:36,779
do with it so p copy is a good one

1098
00:40:34,950 --> 00:40:39,058
live post discovery is pink 3 is just a

1099
00:40:36,779 --> 00:40:42,000
ping er it's kind of cool Network

1100
00:40:39,059 --> 00:40:42,839
protocols in packets like the best of

1101
00:40:42,000 --> 00:40:44,549
the best I'm going to use it for

1102
00:40:42,839 --> 00:40:47,400
everything from I can't even get into it

1103
00:40:44,549 --> 00:40:48,809
there's every protocol Samba and then

1104
00:40:47,400 --> 00:40:49,920
for any exploit development so if you're

1105
00:40:48,809 --> 00:40:51,359
trying to run shell code like on a

1106
00:40:49,920 --> 00:40:53,609
remote thread or trying to do some sort

1107
00:40:51,359 --> 00:40:55,980
of fuzzing on a remote system phone

1108
00:40:53,609 --> 00:40:56,848
tools is really great for that so on

1109
00:40:55,980 --> 00:40:59,339
Windows

1110
00:40:56,849 --> 00:41:00,960
there's the PI win32 so if you're

1111
00:40:59,339 --> 00:41:03,180
wanting to interact with the win32 api

1112
00:41:00,960 --> 00:41:04,200
that's a great great library to be able

1113
00:41:03,180 --> 00:41:06,480
to do that too

1114
00:41:04,200 --> 00:41:08,009
he mentioned c-types already for the DLL

1115
00:41:06,480 --> 00:41:09,930
or the shared library stuff that you're

1116
00:41:08,010 --> 00:41:12,569
trying to do if you're wanting to pivot

1117
00:41:09,930 --> 00:41:14,640
on networks and one run code remotely

1118
00:41:12,569 --> 00:41:17,040
there's a number of pivots you can do

1119
00:41:14,640 --> 00:41:18,990
WMI that you can do win RM all the

1120
00:41:17,040 --> 00:41:20,579
powershell remoting stuff there's a good

1121
00:41:18,990 --> 00:41:21,868
libraries that give you the ability to

1122
00:41:20,579 --> 00:41:23,970
kind of integrate that into your shell

1123
00:41:21,869 --> 00:41:25,530
script or into your Python script in

1124
00:41:23,970 --> 00:41:29,189
order to kind of actually execute code

1125
00:41:25,530 --> 00:41:30,630
on remote machines and so web and cloud

1126
00:41:29,190 --> 00:41:31,859
they're shown in obviously there's a

1127
00:41:30,630 --> 00:41:34,109
showdown library that you can kind of

1128
00:41:31,859 --> 00:41:36,240
integrate it right into your app web

1129
00:41:34,109 --> 00:41:38,460
request request is great I'm gonna skip

1130
00:41:36,240 --> 00:41:40,348
most of this because I'm attacking the

1131
00:41:38,460 --> 00:41:43,140
new single page apps right the hipster

1132
00:41:40,349 --> 00:41:45,119
frameworks that like request iam is

1133
00:41:43,140 --> 00:41:46,890
amazing right I mean you get all these

1134
00:41:45,119 --> 00:41:48,480
JavaScript apps these single page apps

1135
00:41:46,890 --> 00:41:51,180
that run JavaScript and generate

1136
00:41:48,480 --> 00:41:52,680
sessions and you it stinks because you

1137
00:41:51,180 --> 00:41:54,990
use a request library but it's not

1138
00:41:52,680 --> 00:41:57,328
triggering the JavaScript requests to um

1139
00:41:54,990 --> 00:41:58,529
actually wraps selenium and requests and

1140
00:41:57,329 --> 00:41:59,940
so it gives you the ability to kind of

1141
00:41:58,530 --> 00:42:01,260
do that and then interact with it grab

1142
00:41:59,940 --> 00:42:03,119
the session data and then transfer it to

1143
00:42:01,260 --> 00:42:04,280
your request library to make like API

1144
00:42:03,119 --> 00:42:07,170
calls or whatever you want to do

1145
00:42:04,280 --> 00:42:08,760
cracking JSON web tokens JWT is

1146
00:42:07,170 --> 00:42:09,930
phenomenal it gives you the ability to

1147
00:42:08,760 --> 00:42:12,510
construct them you can kind of brute

1148
00:42:09,930 --> 00:42:13,890
force passwords from that direction and

1149
00:42:12,510 --> 00:42:16,230
then there's another these are all just

1150
00:42:13,890 --> 00:42:17,430
whatever but what I wanted to show is uh

1151
00:42:16,230 --> 00:42:19,530
there's a lot of frameworks that are

1152
00:42:17,430 --> 00:42:21,029
already out there so I'm not gonna go

1153
00:42:19,530 --> 00:42:22,410
through the exhaustive list but there's

1154
00:42:21,030 --> 00:42:23,309
a lot of Python frameworks that are

1155
00:42:22,410 --> 00:42:24,960
already used that you're probably

1156
00:42:23,309 --> 00:42:26,369
already using the tools for you can

1157
00:42:24,960 --> 00:42:27,930
build new plugins you could extend it

1158
00:42:26,369 --> 00:42:29,220
you could fix bugs you can make pull

1159
00:42:27,930 --> 00:42:31,589
requests you could do all kinds of cool

1160
00:42:29,220 --> 00:42:32,430
stuff getting started with that way you

1161
00:42:31,589 --> 00:42:35,130
don't they'll kind of do it all from

1162
00:42:32,430 --> 00:42:37,049
scratch but this is what we kind of put

1163
00:42:35,130 --> 00:42:40,020
together for you too and this is um live

1164
00:42:37,049 --> 00:42:42,960
I pushed it live at like 2:00 a.m. but

1165
00:42:40,020 --> 00:42:44,790
the Python pen testing repo here we put

1166
00:42:42,960 --> 00:42:45,920
a bunch of scripts in there that kind of

1167
00:42:44,790 --> 00:42:48,839
do stuff already

1168
00:42:45,920 --> 00:42:50,730
everything from metadata pulling from

1169
00:42:48,839 --> 00:42:52,589
Doc's that John put together to his

1170
00:42:50,730 --> 00:42:55,799
power strip program to the PI inject one

1171
00:42:52,589 --> 00:42:58,650
that he demoed there's a win RM that's

1172
00:42:55,799 --> 00:43:01,650
running remote code on a machine using

1173
00:42:58,650 --> 00:43:03,180
win RM the there's the AWS the one that

1174
00:43:01,650 --> 00:43:05,640
I showed for the s3 buckets and the

1175
00:43:03,180 --> 00:43:07,290
secrets are up there the cracking

1176
00:43:05,640 --> 00:43:10,618
there's a crack JWT that shows you how

1177
00:43:07,290 --> 00:43:12,058
to crack JWT tokens and then just a

1178
00:43:10,619 --> 00:43:13,230
whole bunch of other cool stuff we kind

1179
00:43:12,059 --> 00:43:14,880
of made it all available we just do it

1180
00:43:13,230 --> 00:43:15,990
out there under MIT so you can kind of

1181
00:43:14,880 --> 00:43:17,369
do it whatever you want you want to

1182
00:43:15,990 --> 00:43:18,089
integrate it into a product and create a

1183
00:43:17,369 --> 00:43:19,650
start-up and

1184
00:43:18,090 --> 00:43:21,480
go to Silicon Valley and talk to angel

1185
00:43:19,650 --> 00:43:24,750
investors and make a lot of money just

1186
00:43:21,480 --> 00:43:26,520
do it at school but that's it that's

1187
00:43:24,750 --> 00:43:27,990
pretty much it so that's our information

1188
00:43:26,520 --> 00:43:30,870
there if you want to find us on Twitter

1189
00:43:27,990 --> 00:43:32,910
I'm at you stay ready and then Java Java

1190
00:43:30,870 --> 00:43:34,830
at underscore earth ire

1191
00:43:32,910 --> 00:43:36,299
there's our site and then there's the

1192
00:43:34,830 --> 00:43:38,310
Python goodies so I think we're out of

1193
00:43:36,300 --> 00:43:39,510
time for questions but if you want to

1194
00:43:38,310 --> 00:43:41,370
have any questions just meet us out

1195
00:43:39,510 --> 00:43:44,489
there and we'll be good

1196
00:43:41,370 --> 00:43:44,489
[Applause]

