1
00:00:00,540 --> 00:00:11,980
everybody be seated good morning and

2
00:00:08,138 --> 00:00:14,709
welcome to b-sides 2020 in Tampa today's

3
00:00:11,980 --> 00:00:19,029
presentation will be on HTTP covert

4
00:00:14,710 --> 00:00:20,920
channel using only HTML and CSS the

5
00:00:19,029 --> 00:00:30,300
presenters for today's presentation is

6
00:00:20,920 --> 00:00:32,320
will and Tom no further ado all right

7
00:00:30,300 --> 00:00:36,309
hello everyone

8
00:00:32,320 --> 00:00:39,579
so again we're doing a presentation over

9
00:00:36,309 --> 00:00:47,468
channel that we developed and again I'm

10
00:00:39,579 --> 00:00:50,649
Thomas will so we'll move into all right

11
00:00:47,469 --> 00:00:53,199
yeah so more about us I received my

12
00:00:50,649 --> 00:00:57,250
bachelor's in 2019 on cyber cyber

13
00:00:53,199 --> 00:00:59,589
security and then I also have done three

14
00:00:57,250 --> 00:01:01,930
internships at Latos for doing

15
00:00:59,590 --> 00:01:03,489
software-defined networking and then

16
00:01:01,930 --> 00:01:05,920
beyond that I'm right now currently

17
00:01:03,489 --> 00:01:10,360
working on my master's with a focus in

18
00:01:05,920 --> 00:01:12,970
malware research and I'm William York

19
00:01:10,360 --> 00:01:15,729
I'm finishing a master's degree up in

20
00:01:12,970 --> 00:01:18,100
Rochester New York I have worked for

21
00:01:15,729 --> 00:01:19,990
tours with the Department of Defense and

22
00:01:18,100 --> 00:01:26,889
I'm gonna be working with them full-time

23
00:01:19,990 --> 00:01:28,539
starting this May and then just so you

24
00:01:26,890 --> 00:01:30,490
know kind of the person that helped us

25
00:01:28,540 --> 00:01:33,450
throughout building this actual project

26
00:01:30,490 --> 00:01:36,339
was our mentor his name's Daryl Johnson

27
00:01:33,450 --> 00:01:38,500
and that's a long list of credits that

28
00:01:36,340 --> 00:01:41,619
we don't particularly want to read

29
00:01:38,500 --> 00:01:44,530
happen entirely but he's done a lot of

30
00:01:41,619 --> 00:01:48,140
conferences a lot of research and yeah

31
00:01:44,530 --> 00:01:51,030
he was a main portion of this project

32
00:01:48,140 --> 00:01:52,860
all right so moving on to what we

33
00:01:51,030 --> 00:01:55,259
actually are going presenting so we'll

34
00:01:52,860 --> 00:01:58,229
talk about what are covert channels and

35
00:01:55,259 --> 00:02:00,420
what is the point of them and then we'll

36
00:01:58,229 --> 00:02:03,210
also talk about our covert channel and

37
00:02:00,420 --> 00:02:05,070
our implementation so with that we'll

38
00:02:03,210 --> 00:02:07,740
have like the hex grid that we implement

39
00:02:05,070 --> 00:02:10,500
our webpage that we developed is just a

40
00:02:07,740 --> 00:02:13,140
proof of concept and then we also have

41
00:02:10,500 --> 00:02:15,030
our sender receiver files or scripts

42
00:02:13,140 --> 00:02:17,700
that we wrote to be able to actually run

43
00:02:15,030 --> 00:02:22,140
the covert Channel and then we'll show

44
00:02:17,700 --> 00:02:23,609
small demonstration video and then with

45
00:02:22,140 --> 00:02:26,488
that we'll talk about what makes our

46
00:02:23,610 --> 00:02:28,950
over channel unique Oh end performance

47
00:02:26,489 --> 00:02:31,530
in that you're see we float this up so

48
00:02:28,950 --> 00:02:33,018
you say in the order but other than that

49
00:02:31,530 --> 00:02:35,640
we have our problems encountered

50
00:02:33,019 --> 00:02:37,230
throughout developing this and then just

51
00:02:35,640 --> 00:02:39,179
future work that we plan to do beyond

52
00:02:37,230 --> 00:02:45,480
what we currently have and then we'll

53
00:02:39,180 --> 00:02:48,680
just recap it so who knows what a covert

54
00:02:45,480 --> 00:02:52,500
channel is in the rheumatic curiosity

55
00:02:48,680 --> 00:02:54,299
okay if you know where people do for

56
00:02:52,500 --> 00:02:57,239
some of you that don't know what it is a

57
00:02:54,299 --> 00:02:59,910
cobra channel is a way of sending

58
00:02:57,239 --> 00:03:02,760
information in a secretive way so that

59
00:02:59,910 --> 00:03:05,220
no one knows that's being sent and a lot

60
00:03:02,760 --> 00:03:06,959
of ideas it allows you to send for

61
00:03:05,220 --> 00:03:08,700
example classified information to

62
00:03:06,959 --> 00:03:11,820
someone maybe shouldn't be able to

63
00:03:08,700 --> 00:03:14,450
receive that information so there are

64
00:03:11,820 --> 00:03:17,760
three main kinds of covert channels

65
00:03:14,450 --> 00:03:21,720
there are timing based covert channel

66
00:03:17,760 --> 00:03:23,489
this focuses on the modulation of

67
00:03:21,720 --> 00:03:26,340
something for example there's covert

68
00:03:23,489 --> 00:03:30,420
channels that use the modulation of CPU

69
00:03:26,340 --> 00:03:33,570
frequencies or that modulate the total

70
00:03:30,420 --> 00:03:36,149
Ambridge in a certain device in order to

71
00:03:33,570 --> 00:03:38,370
manipulate it then we also have a

72
00:03:36,150 --> 00:03:40,079
storage covert channel which is what

73
00:03:38,370 --> 00:03:41,790
most people probably think of over the

74
00:03:40,079 --> 00:03:44,310
spies do but the secret notes under the

75
00:03:41,790 --> 00:03:45,929
park bench may be high to file so

76
00:03:44,310 --> 00:03:49,280
somewhere deep within Windows

77
00:03:45,930 --> 00:03:52,680
infrastructure you know looking forward

78
00:03:49,280 --> 00:03:54,720
and then we have big behavioral Cobra

79
00:03:52,680 --> 00:03:57,600
channels which are more so minutest

80
00:03:54,720 --> 00:04:00,060
coming up there's a few papers on it but

81
00:03:57,600 --> 00:04:01,190
it's like focusing on for example beef

82
00:04:00,060 --> 00:04:04,850
of Legends

83
00:04:01,190 --> 00:04:07,100
we sang on character attributes or what

84
00:04:04,850 --> 00:04:09,769
all items you drop that can actually be

85
00:04:07,100 --> 00:04:12,049
interpreted into a covert channel maybe

86
00:04:09,770 --> 00:04:14,420
certain characteristics characteristic

87
00:04:12,050 --> 00:04:16,970
of a character that symbolizes an A or

88
00:04:14,420 --> 00:04:20,620
dropping this weapon some places of B

89
00:04:16,970 --> 00:04:22,580
things of that nature that can be used

90
00:04:20,620 --> 00:04:24,520
and now there's three main

91
00:04:22,580 --> 00:04:27,710
characteristics of a covert channel

92
00:04:24,520 --> 00:04:29,270
stealthiness obviously you wanna you

93
00:04:27,710 --> 00:04:30,770
don't want anyone you don't wanna know

94
00:04:29,270 --> 00:04:32,960
who the sender is you don't want people

95
00:04:30,770 --> 00:04:34,820
to know who the receiver is and you

96
00:04:32,960 --> 00:04:36,409
don't want to know that there's a

97
00:04:34,820 --> 00:04:39,320
message being sent to all our be able to

98
00:04:36,410 --> 00:04:41,060
see that message to trance it there's

99
00:04:39,320 --> 00:04:42,560
the bandwidth so you want to have an

100
00:04:41,060 --> 00:04:45,650
appropriate number of bandwidth so you

101
00:04:42,560 --> 00:04:47,840
can send longer messages the faster that

102
00:04:45,650 --> 00:04:49,250
you can send messages the better because

103
00:04:47,840 --> 00:04:52,369
that means it's less time for it to be

104
00:04:49,250 --> 00:04:55,280
caught or seed files and then we also

105
00:04:52,370 --> 00:04:56,510
have indistinguishability which is you

106
00:04:55,280 --> 00:04:58,460
don't want it to look different from

107
00:04:56,510 --> 00:05:00,680
anything else that's been around if you

108
00:04:58,460 --> 00:05:02,780
have a piece of code or have something

109
00:05:00,680 --> 00:05:04,670
running you don't want to stick out like

110
00:05:02,780 --> 00:05:07,010
a sore thumb because I love obviously

111
00:05:04,670 --> 00:05:10,419
draw attention to anyone that may be

112
00:05:07,010 --> 00:05:10,419
looking into the sister

113
00:05:13,419 --> 00:05:19,250
so our covert channel the way our covert

114
00:05:16,100 --> 00:05:22,070
channel work is through HTTP get

115
00:05:19,250 --> 00:05:24,650
requests to convey message between a

116
00:05:22,070 --> 00:05:27,140
sender and a receiver so we gave it like

117
00:05:24,650 --> 00:05:28,549
this we have someone that's in a

118
00:05:27,140 --> 00:05:30,950
classified workspace and they want to

119
00:05:28,550 --> 00:05:34,580
get information out into a more

120
00:05:30,950 --> 00:05:37,909
unclassified area the idea of what we

121
00:05:34,580 --> 00:05:39,200
have is there'd be a website website

122
00:05:37,910 --> 00:05:42,410
that can be reached from both the inside

123
00:05:39,200 --> 00:05:45,050
and the outside the idea is that they'd

124
00:05:42,410 --> 00:05:47,390
be able to use to get requests or convey

125
00:05:45,050 --> 00:05:49,730
that message to the outside of the

126
00:05:47,390 --> 00:05:53,510
classified area to send classified

127
00:05:49,730 --> 00:05:55,940
information and our specific channel is

128
00:05:53,510 --> 00:05:58,010
broken down for parts there's the hex

129
00:05:55,940 --> 00:06:01,550
grid that is on the web page the web

130
00:05:58,010 --> 00:06:04,719
page itself the sender script and then

131
00:06:01,550 --> 00:06:04,720
there is the reading screens

132
00:06:06,050 --> 00:06:10,800
so let's the hex grid we use now this

133
00:06:08,970 --> 00:06:13,020
second hex grid has been loaded in the

134
00:06:10,800 --> 00:06:14,850
top-left corner of the webpage but it

135
00:06:13,020 --> 00:06:17,820
can be put anywhere inside the webpage

136
00:06:14,850 --> 00:06:20,660
itself so over on each one of the boxes

137
00:06:17,820 --> 00:06:23,190
there's an on mouse-over air box event

138
00:06:20,660 --> 00:06:24,720
which little request to get an image

139
00:06:23,190 --> 00:06:27,240
it'll something every quest looking for

140
00:06:24,720 --> 00:06:28,860
a certain image now each one of these

141
00:06:27,240 --> 00:06:30,300
boxes has that unique get requests

142
00:06:28,860 --> 00:06:33,720
associated with it so it can be

143
00:06:30,300 --> 00:06:38,099
distinguished by the reader so you know

144
00:06:33,720 --> 00:06:39,630
what character is being sent and so we

145
00:06:38,099 --> 00:06:42,210
have a counter that also goes during

146
00:06:39,630 --> 00:06:45,000
this that appends a number to the end of

147
00:06:42,210 --> 00:06:47,549
the get request itself why is this

148
00:06:45,000 --> 00:06:50,310
because if you don't do that it's

149
00:06:47,550 --> 00:06:51,900
looking something that same get request

150
00:06:50,310 --> 00:06:53,520
with the same name over and over again

151
00:06:51,900 --> 00:06:55,349
eventually it's gonna get catch the

152
00:06:53,520 --> 00:06:56,219
webpage they'll stop sending get request

153
00:06:55,349 --> 00:06:58,530
looking for it

154
00:06:56,220 --> 00:07:00,389
so to avoid this we make it so every get

155
00:06:58,530 --> 00:07:02,070
request is slightly different by that

156
00:07:00,389 --> 00:07:05,880
count at the end of it so can't get

157
00:07:02,070 --> 00:07:07,949
sketched into why the web page if you

158
00:07:05,880 --> 00:07:11,580
see the way we formatted our request was

159
00:07:07,949 --> 00:07:14,159
we had a see the hex value where Team B

160
00:07:11,580 --> 00:07:16,260
represented on here all by question mark

161
00:07:14,159 --> 00:07:18,389
plus that count value and if we look at

162
00:07:16,260 --> 00:07:20,550
that last line right there that's what a

163
00:07:18,389 --> 00:07:23,159
look like taking away you know all the

164
00:07:20,550 --> 00:07:26,039
other stuff it's it's a get request with

165
00:07:23,159 --> 00:07:29,479
a C D question mark and then the

166
00:07:26,039 --> 00:07:29,479
appended on to account value

167
00:07:30,510 --> 00:07:34,990
so this is the webpage that we used

168
00:07:32,890 --> 00:07:36,219
normally you won't be able to actually

169
00:07:34,990 --> 00:07:38,890
see the grid this is just for

170
00:07:36,220 --> 00:07:41,650
demonstration purposes so the idea is

171
00:07:38,890 --> 00:07:43,780
the mouse is gonna actually go over into

172
00:07:41,650 --> 00:07:45,489
that grid over there and depending on

173
00:07:43,780 --> 00:07:49,359
how it moves it'll send hex characters

174
00:07:45,490 --> 00:07:51,940
over to the receiving side of it which

175
00:07:49,360 --> 00:07:53,500
will allow them to interpret those get

176
00:07:51,940 --> 00:07:55,750
requests and actually form messages and

177
00:07:53,500 --> 00:07:57,760
what the reader will actually do is

178
00:07:55,750 --> 00:07:59,590
we're getting all these get requests in

179
00:07:57,760 --> 00:08:01,810
it knows how to break apart all the

180
00:07:59,590 --> 00:08:04,390
incoming traffic and then make the

181
00:08:01,810 --> 00:08:05,620
message for the youth themselves but it

182
00:08:04,390 --> 00:08:07,419
should be noted that this could also be

183
00:08:05,620 --> 00:08:09,460
done manually probably looking through

184
00:08:07,420 --> 00:08:12,520
all the get requests in order and then

185
00:08:09,460 --> 00:08:14,049
picking out the letters but as you when

186
00:08:12,520 --> 00:08:16,690
you'll see the script itself you'll see

187
00:08:14,050 --> 00:08:22,840
that it's a very simple script and makes

188
00:08:16,690 --> 00:08:26,080
life a lot easier so what's actually in

189
00:08:22,840 --> 00:08:28,780
this page that shows that what

190
00:08:26,080 --> 00:08:31,270
everything that's going on so at the top

191
00:08:28,780 --> 00:08:33,069
we see there's a JavaScript function now

192
00:08:31,270 --> 00:08:35,728
you might be thinking you said HTML CSS

193
00:08:33,070 --> 00:08:39,039
why where's the top script over here

194
00:08:35,729 --> 00:08:40,599
well well in terms of that we meant that

195
00:08:39,039 --> 00:08:44,380
the actual messages that are being sent

196
00:08:40,599 --> 00:08:48,040
is used through HTTP and main aspects

197
00:08:44,380 --> 00:08:49,750
are CSS HTML well so we tested it the

198
00:08:48,040 --> 00:08:51,040
reason why we created this want to make

199
00:08:49,750 --> 00:08:53,470
sure that certain blockers like

200
00:08:51,040 --> 00:08:55,599
JavaScript blockers or tracking

201
00:08:53,470 --> 00:08:57,700
protection sometimes block chap

202
00:08:55,600 --> 00:08:59,080
JavaScript functions so we wanted to

203
00:08:57,700 --> 00:09:02,560
make sure that that wouldn't happen in

204
00:08:59,080 --> 00:09:04,870
this case so we tested this JavaScript

205
00:09:02,560 --> 00:09:05,859
function using different web browsers

206
00:09:04,870 --> 00:09:07,900
and used some different tracking

207
00:09:05,860 --> 00:09:10,060
protection in JavaScript protection and

208
00:09:07,900 --> 00:09:12,220
through our testing we were not able to

209
00:09:10,060 --> 00:09:13,750
find any that block or caused any

210
00:09:12,220 --> 00:09:15,640
interference with this simple cap

211
00:09:13,750 --> 00:09:18,940
counter strings

212
00:09:15,640 --> 00:09:21,880
and if we look down here we actually

213
00:09:18,940 --> 00:09:24,250
have to dip so oh there's a it's a three

214
00:09:21,880 --> 00:09:25,480
by three box that each box are

215
00:09:24,250 --> 00:09:28,390
presenting another one of the next

216
00:09:25,480 --> 00:09:30,760
characters so each one of them I will

217
00:09:28,390 --> 00:09:33,459
send certain parameters over to the

218
00:09:30,760 --> 00:09:36,339
script up here I'll change time which

219
00:09:33,459 --> 00:09:38,229
team time is just adding the counters to

220
00:09:36,339 --> 00:09:39,959
end a new counter to end of each request

221
00:09:38,230 --> 00:09:42,970
make sure it does get catch the webpage

222
00:09:39,959 --> 00:09:44,380
so you can see me here we have C 0 0

223
00:09:42,970 --> 00:09:46,450
which is here on the grid

224
00:09:44,380 --> 00:09:49,839
there we go 1 and it keeps going down

225
00:09:46,450 --> 00:09:50,800
until we're at 3 3 and this border advic

226
00:09:49,839 --> 00:09:52,420
here at the end of it

227
00:09:50,800 --> 00:09:54,250
obviously gets taken off to the actions

228
00:09:52,420 --> 00:09:56,410
webpage you'll see that in demonstration

229
00:09:54,250 --> 00:09:58,899
but that's just there so you guys can

230
00:09:56,410 --> 00:10:04,180
see the vigil representative of the grid

231
00:09:58,899 --> 00:10:06,250
and in a previous slide okay so this is

232
00:10:04,180 --> 00:10:08,829
the actual sender program that we use to

233
00:10:06,250 --> 00:10:12,610
actually convey the messages from text

234
00:10:08,829 --> 00:10:14,949
to mouse movement itself so basically we

235
00:10:12,610 --> 00:10:18,550
have a Python script that all it really

236
00:10:14,950 --> 00:10:22,180
is doing is converting what we have in a

237
00:10:18,550 --> 00:10:24,099
text file to hex characters and so and

238
00:10:22,180 --> 00:10:25,689
then all that is actually going to do is

239
00:10:24,100 --> 00:10:28,300
create a temp file and just dump all

240
00:10:25,690 --> 00:10:29,769
that and then invoke our bash script

241
00:10:28,300 --> 00:10:32,349
which is actually what's actually

242
00:10:29,769 --> 00:10:36,370
controlling the mouse itself we use a

243
00:10:32,350 --> 00:10:38,680
GUI testing interface or testing utility

244
00:10:36,370 --> 00:10:40,360
called x2 tool which essentially what

245
00:10:38,680 --> 00:10:41,859
it's doing is it's taking the mouse and

246
00:10:40,360 --> 00:10:43,480
it's just jumping it to a location

247
00:10:41,860 --> 00:10:46,089
there's no drag there's nothing in

248
00:10:43,480 --> 00:10:47,769
between so essentially we're hitting it

249
00:10:46,089 --> 00:10:50,680
exactly where we want to hit for each

250
00:10:47,769 --> 00:10:52,690
movement that we make with the mouse and

251
00:10:50,680 --> 00:10:56,260
that's just out of course based on every

252
00:10:52,690 --> 00:10:59,980
hex character so it's a 0 it'll move to

253
00:10:56,260 --> 00:11:03,490
the 0 location and then beyond that we

254
00:10:59,980 --> 00:11:05,140
also have you have to do two mouse

255
00:11:03,490 --> 00:11:07,329
movements for a hex character and that's

256
00:11:05,140 --> 00:11:09,189
more explain what we'll explain more on

257
00:11:07,329 --> 00:11:13,660
why in the actual problems encountered

258
00:11:09,190 --> 00:11:16,630
slide but you have to do two and without

259
00:11:13,660 --> 00:11:18,189
we are basically moving to a letter and

260
00:11:16,630 --> 00:11:21,000
then moving off the grid to make sure

261
00:11:18,190 --> 00:11:21,000
that we don't hit anything

262
00:11:22,170 --> 00:11:27,279
okay so this is also our receiver side

263
00:11:25,660 --> 00:11:31,630
which is going to read all the get

264
00:11:27,279 --> 00:11:34,630
requests that we have we use the pie

265
00:11:31,630 --> 00:11:37,060
chart library which is pretty shirts

266
00:11:34,630 --> 00:11:40,330
wrapper fruity shark and it's

267
00:11:37,060 --> 00:11:42,609
continuously sniffing for packets we

268
00:11:40,330 --> 00:11:44,920
start our messages with three hyphens

269
00:11:42,610 --> 00:11:47,709
there's no particular reason other than

270
00:11:44,920 --> 00:11:50,620
just to tell the reader that we are

271
00:11:47,709 --> 00:11:53,739
starting a message and then it ends with

272
00:11:50,620 --> 00:11:55,959
a - that's just essentially so that we

273
00:11:53,740 --> 00:11:58,330
know that a message is coming from

274
00:11:55,959 --> 00:12:01,599
wherever this get requests coming from

275
00:11:58,330 --> 00:12:04,330
and that we are about to start actually

276
00:12:01,600 --> 00:12:06,459
sending them and then the other thing is

277
00:12:04,330 --> 00:12:08,980
that we're checking per correct format

278
00:12:06,459 --> 00:12:10,660
within our get requests so we can't miss

279
00:12:08,980 --> 00:12:14,380
read something if it doesn't start with

280
00:12:10,660 --> 00:12:16,000
the /c the hex value and the question

281
00:12:14,380 --> 00:12:18,070
mark and of course we're not going to

282
00:12:16,000 --> 00:12:22,560
read that and misinterpret some other

283
00:12:18,070 --> 00:12:25,600
person's information and then after that

284
00:12:22,560 --> 00:12:29,500
yes it's not the correct format that it

285
00:12:25,600 --> 00:12:32,600
will be so

286
00:12:29,500 --> 00:12:32,600
[Music]

287
00:12:39,820 --> 00:12:46,030
okay so oh yeah some OBS I was lazy to

288
00:12:43,240 --> 00:12:47,830
not turn the video so um left we have

289
00:12:46,030 --> 00:12:49,420
our web page and the right you can see

290
00:12:47,830 --> 00:12:52,270
we're sending a message it says hello

291
00:12:49,420 --> 00:12:59,860
this is my secret message because I have

292
00:12:52,270 --> 00:13:01,569
this send secret messages Wow so that so

293
00:12:59,860 --> 00:13:03,880
bottom we're actually going to invoke

294
00:13:01,570 --> 00:13:08,350
the reader and we're just setting a just

295
00:13:03,880 --> 00:13:09,640
as a way to actually test this and so

296
00:13:08,350 --> 00:13:13,000
here we're actually going to send the

297
00:13:09,640 --> 00:13:15,130
message itself so you can see the mouse

298
00:13:13,000 --> 00:13:18,210
in the corner of the actual Cobra

299
00:13:15,130 --> 00:13:20,500
channel and it just moving pretty fast

300
00:13:18,210 --> 00:13:22,360
but on the bottom right you can see

301
00:13:20,500 --> 00:13:25,560
we're interpreting every single get

302
00:13:22,360 --> 00:13:25,560
requests that we are sending

303
00:13:33,800 --> 00:13:39,889
so it's almost done you'll see it output

304
00:13:37,579 --> 00:13:42,618
the ending sequence and yes that's

305
00:13:39,889 --> 00:13:45,160
actually how the covert channel works in

306
00:13:42,619 --> 00:13:45,160
its entirety

307
00:13:49,740 --> 00:13:54,910
all right so next we'll talk about like

308
00:13:51,910 --> 00:13:56,589
performance and accuracy measurements in

309
00:13:54,910 --> 00:13:58,569
terms of the browsers that we tried on

310
00:13:56,589 --> 00:14:03,160
this of course you know Firefox Chrome

311
00:13:58,569 --> 00:14:04,810
and then other browsers that you know

312
00:14:03,160 --> 00:14:07,870
they all pretty much work there's no

313
00:14:04,810 --> 00:14:09,489
difference in functionality passes

314
00:14:07,870 --> 00:14:11,740
transmission that we could actually get

315
00:14:09,490 --> 00:14:16,630
was thirteen point five bytes per second

316
00:14:11,740 --> 00:14:18,730
which is fast but the way we actually

317
00:14:16,630 --> 00:14:21,279
operate our mouse control is that we

318
00:14:18,730 --> 00:14:22,990
have to throttle it a lot and that's

319
00:14:21,279 --> 00:14:25,120
just strictly because of the fact that

320
00:14:22,990 --> 00:14:26,709
we can't have a machine we need a

321
00:14:25,120 --> 00:14:28,180
machine that can keep up with the mouse

322
00:14:26,709 --> 00:14:30,099
movements and the way that the browser

323
00:14:28,180 --> 00:14:31,420
is interpreting each mouse movement so

324
00:14:30,100 --> 00:14:34,269
if we don't throttle it then we actually

325
00:14:31,420 --> 00:14:37,029
end up missing letters and not sending

326
00:14:34,269 --> 00:14:38,440
get requests that we need to send but

327
00:14:37,029 --> 00:14:43,589
aside from that we were able to achieve

328
00:14:38,440 --> 00:14:48,550
around 1,800 to 2,200 lines which is

329
00:14:43,589 --> 00:14:50,500
15,000 words per or at least at most

330
00:14:48,550 --> 00:14:53,290
that we can actually transmit and that's

331
00:14:50,500 --> 00:15:00,819
something we tested with war and peace

332
00:14:53,290 --> 00:15:02,740
on so so yeah what makes our covert

333
00:15:00,819 --> 00:15:06,160
channel unique well the first thing is

334
00:15:02,740 --> 00:15:08,259
that there aren't many behavioral or HTT

335
00:15:06,160 --> 00:15:10,360
behavioral covert channels that really

336
00:15:08,259 --> 00:15:12,579
even exist which was actually really

337
00:15:10,360 --> 00:15:14,620
surprising and I think it's just due to

338
00:15:12,579 --> 00:15:17,439
the fact that that research field in

339
00:15:14,620 --> 00:15:20,949
general is just not as big as you would

340
00:15:17,439 --> 00:15:22,509
expect but it's slowly growing as people

341
00:15:20,949 --> 00:15:24,699
look into more of the ways that they can

342
00:15:22,509 --> 00:15:29,649
actually communicate over covert

343
00:15:24,699 --> 00:15:31,149
channels other than that yeah again we

344
00:15:29,649 --> 00:15:33,490
can bypass a lot of the tracking

345
00:15:31,149 --> 00:15:34,959
mechanisms that would inhibit us from

346
00:15:33,490 --> 00:15:39,970
actually being able to relay that

347
00:15:34,959 --> 00:15:41,859
message through HTML and CSS it's simple

348
00:15:39,970 --> 00:15:43,899
to implement like really easy you

349
00:15:41,860 --> 00:15:46,029
honestly if you're the receiver you just

350
00:15:43,899 --> 00:15:47,829
spin up a web or the web server itself

351
00:15:46,029 --> 00:15:50,860
and then you just spin up the actual

352
00:15:47,829 --> 00:15:52,449
reader the sender all he has to do is

353
00:15:50,860 --> 00:15:55,509
actually just open up the web page and

354
00:15:52,449 --> 00:15:57,189
then invoke the actual mouse control and

355
00:15:55,509 --> 00:15:59,370
then other than that it's pretty well

356
00:15:57,189 --> 00:16:01,920
hidden for the most part the the

357
00:15:59,370 --> 00:16:03,389
downside is that if somebody were

358
00:16:01,920 --> 00:16:06,000
actually inspect the webpage you would

359
00:16:03,389 --> 00:16:08,940
see a lot of these hover over portions

360
00:16:06,000 --> 00:16:14,130
in the actual HTML and we'll explain

361
00:16:08,940 --> 00:16:16,079
more on that actually in the problem the

362
00:16:14,130 --> 00:16:18,240
fun part all the problems that were

363
00:16:16,079 --> 00:16:20,819
encountered so originally the idea of

364
00:16:18,240 --> 00:16:22,740
using a script to mess around and send

365
00:16:20,820 --> 00:16:24,660
that it obviously has the downside of

366
00:16:22,740 --> 00:16:26,519
you need a script to do that our

367
00:16:24,660 --> 00:16:28,079
original thought was we wanted to have

368
00:16:26,519 --> 00:16:31,800
it so the user can manually move their

369
00:16:28,079 --> 00:16:33,260
mouse and do the message that way so off

370
00:16:31,800 --> 00:16:35,819
you see right here this was our

371
00:16:33,260 --> 00:16:37,709
implementation for the manual movement

372
00:16:35,820 --> 00:16:40,110
this would be spread out across the

373
00:16:37,709 --> 00:16:42,089
webpage and it worked with resizing and

374
00:16:40,110 --> 00:16:43,649
everything the idea is you know user be

375
00:16:42,089 --> 00:16:45,360
able to go through start the starting

376
00:16:43,649 --> 00:16:48,060
sequence and send their message through

377
00:16:45,360 --> 00:16:50,070
that way mind you would take a long time

378
00:16:48,060 --> 00:16:52,888
but it'd be possible to send the message

379
00:16:50,070 --> 00:16:56,040
maybe brief messages but the issue that

380
00:16:52,889 --> 00:16:59,070
we had was humans are inconsistent with

381
00:16:56,040 --> 00:17:01,560
how fast they moved their Mouse so if he

382
00:16:59,070 --> 00:17:03,720
the musers in the box too long it's

383
00:17:01,560 --> 00:17:07,349
gonna double send that message two times

384
00:17:03,720 --> 00:17:08,790
in a row and if they set it so it's a

385
00:17:07,349 --> 00:17:10,918
slow movement like you have to wait two

386
00:17:08,790 --> 00:17:12,649
seconds or a second afterwards then

387
00:17:10,919 --> 00:17:15,750
there's an issue if he's going between

388
00:17:12,650 --> 00:17:17,100
five and seven and you know that's not

389
00:17:15,750 --> 00:17:18,750
going to take a second to get over there

390
00:17:17,099 --> 00:17:20,909
or something or if he has to repeat this

391
00:17:18,750 --> 00:17:23,970
character two times and he has to go out

392
00:17:20,910 --> 00:17:25,650
one second then come back in we messed

393
00:17:23,970 --> 00:17:27,569
around at the times we couldn't find a

394
00:17:25,650 --> 00:17:29,880
way to get the manual movement to work

395
00:17:27,569 --> 00:17:30,840
that's something that we definitely want

396
00:17:29,880 --> 00:17:32,250
to get work in the future

397
00:17:30,840 --> 00:17:33,899
we want to lower the amount of scripts

398
00:17:32,250 --> 00:17:36,510
and things you need to do to actually

399
00:17:33,900 --> 00:17:39,179
perform this covert channel and an issue

400
00:17:36,510 --> 00:17:40,879
we also had was the first character was

401
00:17:39,179 --> 00:17:42,809
being in the word in the sequence we

402
00:17:40,880 --> 00:17:44,970
spent a lot of time trying to figure out

403
00:17:42,809 --> 00:17:47,428
why is this happening why are we always

404
00:17:44,970 --> 00:17:49,350
losing our first packet after hours and

405
00:17:47,429 --> 00:17:50,700
hours of work we just figured we

406
00:17:49,350 --> 00:17:53,639
eventually figured out that it's

407
00:17:50,700 --> 00:17:56,669
actually a fall Fault in pie shark

408
00:17:53,640 --> 00:17:58,110
itself so pie shark has an option called

409
00:17:56,669 --> 00:18:00,809
only summaries where you can set that

410
00:17:58,110 --> 00:18:03,059
the true or false and if you set it to

411
00:18:00,809 --> 00:18:05,040
true what it'll do is it'll shorten down

412
00:18:03,059 --> 00:18:06,720
it'll get rid of all the other packet

413
00:18:05,040 --> 00:18:09,240
junk it'll just saying the meat it'll

414
00:18:06,720 --> 00:18:11,640
just send you the main core of what this

415
00:18:09,240 --> 00:18:13,409
packets about so in our case if just

416
00:18:11,640 --> 00:18:15,250
show the get request and then the thing

417
00:18:13,409 --> 00:18:17,650
we want which makes our lives

418
00:18:15,250 --> 00:18:19,660
you not to go looking through all the

419
00:18:17,650 --> 00:18:21,820
codes trying to find what we want the

420
00:18:19,660 --> 00:18:23,860
problem is that for some reason when

421
00:18:21,820 --> 00:18:25,899
only some reason set to true it always

422
00:18:23,860 --> 00:18:27,610
ignores the first packet this is

423
00:18:25,900 --> 00:18:30,280
actually a common problem that we

424
00:18:27,610 --> 00:18:33,399
eventually found with pie shark and it's

425
00:18:30,280 --> 00:18:34,960
so far there is no there's no discussion

426
00:18:33,400 --> 00:18:36,700
on having it fixed at all

427
00:18:34,960 --> 00:18:38,620
so in order to fixed it you have to set

428
00:18:36,700 --> 00:18:40,030
it to false and then you know you have

429
00:18:38,620 --> 00:18:42,370
to go sifting through that whole packet

430
00:18:40,030 --> 00:18:43,930
the fine to get requests but yeah

431
00:18:42,370 --> 00:18:44,889
there's a bit annoying that was its bit

432
00:18:43,930 --> 00:18:46,450
annoying because we were trying to

433
00:18:44,890 --> 00:18:48,220
figure out what's going on why are we

434
00:18:46,450 --> 00:18:49,570
using first packet you know you first

435
00:18:48,220 --> 00:18:51,280
think it's your own code you never think

436
00:18:49,570 --> 00:18:53,770
it's the library are using or anything

437
00:18:51,280 --> 00:18:56,860
like that but luckily we're able to find

438
00:18:53,770 --> 00:18:59,590
that eventually and speed of the mouse

439
00:18:56,860 --> 00:19:00,909
so the mouse copies can move a lot

440
00:18:59,590 --> 00:19:03,129
faster than a human can

441
00:19:00,910 --> 00:19:04,750
but the problem is as tom was mentioned

442
00:19:03,130 --> 00:19:07,570
before there's a certain point where the

443
00:19:04,750 --> 00:19:10,000
mouse moves too fast where we miss

444
00:19:07,570 --> 00:19:11,889
packets or start missing requests and

445
00:19:10,000 --> 00:19:13,930
especially when I'm working and heck's

446
00:19:11,890 --> 00:19:16,780
missing just one hex value screws

447
00:19:13,930 --> 00:19:18,580
everything up and obviously that ruins

448
00:19:16,780 --> 00:19:20,320
the rest of the message and there's no

449
00:19:18,580 --> 00:19:23,379
way to really recover from that other

450
00:19:20,320 --> 00:19:25,689
than go and other than restarting the

451
00:19:23,380 --> 00:19:27,820
whole thing so we had to find the sweet

452
00:19:25,690 --> 00:19:29,980
spot okay when is it fast enough where

453
00:19:27,820 --> 00:19:34,330
we can guarantee its accuracy for a long

454
00:19:29,980 --> 00:19:36,010
enough period of time and when repeating

455
00:19:34,330 --> 00:19:38,199
a character we also ran into the issue

456
00:19:36,010 --> 00:19:40,570
of if we wanted to repeat the same

457
00:19:38,200 --> 00:19:41,320
character we had them figure out a way

458
00:19:40,570 --> 00:19:43,090
okay

459
00:19:41,320 --> 00:19:45,399
we can't just move it inside the box

460
00:19:43,090 --> 00:19:48,060
again because it won't try reef fetching

461
00:19:45,400 --> 00:19:50,590
a get request if the mouse is still in

462
00:19:48,060 --> 00:19:53,050
27 two times we have the mouse in here

463
00:19:50,590 --> 00:19:54,699
and it just stays here and stays in

464
00:19:53,050 --> 00:19:57,190
place it's not going to send at two

465
00:19:54,700 --> 00:19:58,720
times like it has to so what we had to

466
00:19:57,190 --> 00:20:01,420
do is he actually had it so the mouse

467
00:19:58,720 --> 00:20:03,190
has to come outside of the grid so the

468
00:20:01,420 --> 00:20:04,750
grid you guys saw beforehand the mouse

469
00:20:03,190 --> 00:20:06,820
goes completely out of the grid we can

470
00:20:04,750 --> 00:20:08,050
goes back into the grid and the way we

471
00:20:06,820 --> 00:20:09,909
have is essentially the mouse is

472
00:20:08,050 --> 00:20:12,100
teleporting so it's not dragging through

473
00:20:09,910 --> 00:20:13,930
all this and by doing that it makes it

474
00:20:12,100 --> 00:20:15,459
so we can actually go and repeat the

475
00:20:13,930 --> 00:20:17,500
same character over and over and over

476
00:20:15,460 --> 00:20:23,410
again and not have to worry about work

477
00:20:17,500 --> 00:20:25,870
worried about packet getting missed so

478
00:20:23,410 --> 00:20:27,520
future work as we mentioned one of the

479
00:20:25,870 --> 00:20:28,199
things too long for future work is we

480
00:20:27,520 --> 00:20:30,090
wanted to

481
00:20:28,200 --> 00:20:33,059
have a manual grid implemented make this

482
00:20:30,090 --> 00:20:35,730
easy to do and not require the script

483
00:20:33,059 --> 00:20:38,519
actually do it although we did a lot of

484
00:20:35,730 --> 00:20:40,529
work to shorten the amount of space it

485
00:20:38,519 --> 00:20:42,149
takes in a webpage it's still if you

486
00:20:40,529 --> 00:20:45,299
inspect the webpage you'll be able to

487
00:20:42,149 --> 00:20:48,209
see a total of 16 div elements and then

488
00:20:45,299 --> 00:20:50,279
that one JavaScript which you know some

489
00:20:48,210 --> 00:20:52,919
people might to a trained eye would look

490
00:20:50,279 --> 00:20:53,909
suspicious although we don't know how

491
00:20:52,919 --> 00:20:55,889
well they may actually see what's going

492
00:20:53,909 --> 00:20:58,440
on but we still would like to shrink

493
00:20:55,889 --> 00:21:00,449
that down to a point where it's barely

494
00:20:58,440 --> 00:21:03,690
noticeable on the webpage even when you

495
00:21:00,450 --> 00:21:04,559
inspect it and the other thing weird

496
00:21:03,690 --> 00:21:06,120
something you're just getting rid of the

497
00:21:04,559 --> 00:21:08,549
grid altogether just something get

498
00:21:06,120 --> 00:21:11,158
requests tuned from the receiver in the

499
00:21:08,549 --> 00:21:13,379
sender so get rid of the mask over the

500
00:21:11,159 --> 00:21:17,159
grid which would allow us to both send

501
00:21:13,380 --> 00:21:20,940
our messages faster as well as do it and

502
00:21:17,159 --> 00:21:23,370
we believe more accurately as well and

503
00:21:20,940 --> 00:21:26,480
the big thing is to add some form of air

504
00:21:23,370 --> 00:21:29,969
checking so right now we can go to about

505
00:21:26,480 --> 00:21:32,010
20,000 words we can send which isn't

506
00:21:29,970 --> 00:21:33,450
shabby and for covert messages I don't

507
00:21:32,010 --> 00:21:35,389
think you'd have a purpose where you're

508
00:21:33,450 --> 00:21:37,740
gonna send a message that's 20,000 words

509
00:21:35,389 --> 00:21:40,500
but still the reason why it actually

510
00:21:37,740 --> 00:21:42,870
breaks is because round that point is

511
00:21:40,500 --> 00:21:45,600
when one hex character starts get mixed

512
00:21:42,870 --> 00:21:46,678
or something gets nicked missed and all

513
00:21:45,600 --> 00:21:48,658
of a sudden you know you miss one

514
00:21:46,679 --> 00:21:50,100
everything else is screwed up so it

515
00:21:48,659 --> 00:21:51,990
still worked after that point it's just

516
00:21:50,100 --> 00:21:55,709
that the chances of it missing a

517
00:21:51,990 --> 00:21:58,500
character increases greatly as well so

518
00:21:55,710 --> 00:21:59,970
we want to add some for error checking

519
00:21:58,500 --> 00:22:01,889
to make sure we're receiving all the

520
00:21:59,970 --> 00:22:04,019
packets in the correct order so we can

521
00:22:01,889 --> 00:22:09,719
extend how many words that actually can

522
00:22:04,019 --> 00:22:11,399
be sent from this then just to recap of

523
00:22:09,720 --> 00:22:14,250
the covert channel in general we use

524
00:22:11,399 --> 00:22:17,639
HTTP GET request to send messages to and

525
00:22:14,250 --> 00:22:19,440
from the receiver it can bypass tracking

526
00:22:17,639 --> 00:22:21,809
protection that's enabled because it's

527
00:22:19,440 --> 00:22:24,360
just get requests and as we tested the

528
00:22:21,809 --> 00:22:26,700
JavaScript does not get detected by any

529
00:22:24,360 --> 00:22:29,129
JavaScript blockers or by any tracking

530
00:22:26,700 --> 00:22:31,559
protection mechanisms we have a

531
00:22:29,130 --> 00:22:35,039
transmission rate of 13.5 bytes per

532
00:22:31,559 --> 00:22:36,658
second and the most important thing is

533
00:22:35,039 --> 00:22:38,610
it's not noticeable to the average user

534
00:22:36,659 --> 00:22:41,639
so you're on that web page there's no

535
00:22:38,610 --> 00:22:42,120
way knowing it's there by to the average

536
00:22:41,639 --> 00:22:43,350
user

537
00:22:42,120 --> 00:22:45,510
to the right person you know moving the

538
00:22:43,350 --> 00:22:46,830
master has no issue but this webpage can

539
00:22:45,510 --> 00:22:48,960
be hosted and we don't have to worry

540
00:22:46,830 --> 00:22:50,939
about someone seeing that there's a

541
00:22:48,960 --> 00:22:52,559
covert channel going on in that area

542
00:22:50,940 --> 00:22:54,059
because they wouldn't be able to know

543
00:22:52,559 --> 00:22:58,379
unless as they inspect the webpage

544
00:22:54,059 --> 00:23:00,480
itself and in total as we mentioned

545
00:22:58,380 --> 00:23:02,309
previously we can get between fifteen to

546
00:23:00,480 --> 00:23:04,470
eighteen thousand words per session and

547
00:23:02,309 --> 00:23:08,610
it can be restarted every time after

548
00:23:04,470 --> 00:23:10,529
that session and one thing to close

549
00:23:08,610 --> 00:23:12,750
things off with covert channels is a new

550
00:23:10,529 --> 00:23:14,700
field that's coming around and the

551
00:23:12,750 --> 00:23:16,559
importance of it is to prevent the leak

552
00:23:14,700 --> 00:23:18,240
of information especially in this time

553
00:23:16,559 --> 00:23:19,350
in current social climate we can see

554
00:23:18,240 --> 00:23:21,809
there's been a lot of leaked information

555
00:23:19,350 --> 00:23:22,949
happening and actually through those

556
00:23:21,809 --> 00:23:24,658
some of those leaks have been through

557
00:23:22,950 --> 00:23:26,220
things like covert channels to get that

558
00:23:24,659 --> 00:23:28,380
class probably made information out

559
00:23:26,220 --> 00:23:30,000
there so what this field is important to

560
00:23:28,380 --> 00:23:31,919
find how Coover channels can be

561
00:23:30,000 --> 00:23:34,440
developed and what the flaws are in the

562
00:23:31,919 --> 00:23:41,070
systems and so we can counteract them

563
00:23:34,440 --> 00:23:46,279
and better protect our security and then

564
00:23:41,070 --> 00:23:46,279
just questions yes

565
00:23:53,970 --> 00:23:58,930
not that we can see so far we tried in

566
00:23:56,440 --> 00:24:00,670
two different situations where latency

567
00:23:58,930 --> 00:24:02,620
was a bit higher or lower you tried

568
00:24:00,670 --> 00:24:04,510
different networks we did not see any

569
00:24:02,620 --> 00:24:06,340
issue with that now it doesn't matter

570
00:24:04,510 --> 00:24:07,840
when the pack well it matters when the

571
00:24:06,340 --> 00:24:13,030
pack comes in but doesn't matter if it's

572
00:24:07,840 --> 00:24:14,139
the later yeah a lot of like the sorry I

573
00:24:13,030 --> 00:24:16,420
didn't mean interrupt I was just gonna

574
00:24:14,140 --> 00:24:18,309
add on like a lot of the errors that we

575
00:24:16,420 --> 00:24:20,320
actually do have or actually based on

576
00:24:18,309 --> 00:24:22,360
the system itself because as soon as

577
00:24:20,320 --> 00:24:24,520
there's some small lag in the actual

578
00:24:22,360 --> 00:24:27,159
system then the mouse doesn't actually

579
00:24:24,520 --> 00:24:29,290
move and convey a letter in general but

580
00:24:27,160 --> 00:24:31,809
we've never had network latency issues

581
00:24:29,290 --> 00:24:33,490
by any means if that were to occur then

582
00:24:31,809 --> 00:24:35,590
we would again have to add some sort of

583
00:24:33,490 --> 00:24:36,910
error checking checksum just making sure

584
00:24:35,590 --> 00:24:38,740
that we're getting them in order and

585
00:24:36,910 --> 00:24:41,670
we're getting the full message as it was

586
00:24:38,740 --> 00:24:41,670
supposed to be so

587
00:25:19,370 --> 00:25:24,479
so yeah right like I I have ran it

588
00:25:23,160 --> 00:25:25,830
between two different computers that

589
00:25:24,480 --> 00:25:27,090
were virtualized and that never actually

590
00:25:25,830 --> 00:25:28,980
occurred

591
00:25:27,090 --> 00:25:32,129
like no issues there at least for the

592
00:25:28,980 --> 00:25:34,530
most part um but again like we've only

593
00:25:32,130 --> 00:25:36,630
tested in ideal situations like where

594
00:25:34,530 --> 00:25:39,330
we're literally hosting and sending

595
00:25:36,630 --> 00:25:41,160
everything on the same machine or it's

596
00:25:39,330 --> 00:25:43,800
between two virtual machines but there's

597
00:25:41,160 --> 00:25:47,580
no like real big networking going on in

598
00:25:43,800 --> 00:25:48,720
between no yeah exactly so yeah one of

599
00:25:47,580 --> 00:25:50,520
the bigger things that we would like to

600
00:25:48,720 --> 00:25:52,740
also test in the future is being able to

601
00:25:50,520 --> 00:25:54,690
publicly host this and send messages and

602
00:25:52,740 --> 00:25:56,220
just see what that actually does so

603
00:25:54,690 --> 00:26:20,730
that's something that we will do

604
00:25:56,220 --> 00:26:22,230
eventually so yeah right right yeah I I

605
00:26:20,730 --> 00:26:24,690
mean yeah there's there's a lot of

606
00:26:22,230 --> 00:26:26,760
possibility we were constantly kind of

607
00:26:24,690 --> 00:26:27,930
just trying to develop the actual cover

608
00:26:26,760 --> 00:26:29,490
channel itself and then we ended up

609
00:26:27,930 --> 00:26:31,290
running into a bunch of like issues with

610
00:26:29,490 --> 00:26:33,210
message integrity and stuff like that so

611
00:26:31,290 --> 00:26:36,050
yeah that's another possibility that we

612
00:26:33,210 --> 00:26:36,050
could do with the response

613
00:27:00,380 --> 00:27:03,380
yeah

614
00:27:18,900 --> 00:27:23,070
with encryption I I think it would

615
00:27:21,330 --> 00:27:24,750
obviously that's another thing we're

616
00:27:23,070 --> 00:27:26,370
still trying to figure out - and we

617
00:27:24,750 --> 00:27:27,720
would like to be able to just have some

618
00:27:26,370 --> 00:27:28,889
kind of encoding or encryption to be

619
00:27:27,720 --> 00:27:30,750
able to do that and I don't think it

620
00:27:28,890 --> 00:27:40,640
would cause latency by any means at

621
00:27:30,750 --> 00:27:40,640
least um yeah yeah yeah anything else

622
00:27:41,150 --> 00:27:45,190
okay cool

623
00:27:43,080 --> 00:27:48,329
thank you for letting speak

624
00:27:45,190 --> 00:27:48,329
[Applause]

