1
00:00:00,000 --> 00:00:06,080
so far are ready today but show here in
Sioux has actually worked with doctor at

2
00:00:06,080 --> 00:00:07,319
all

3
00:00:07,319 --> 00:00:13,530
also that's more than average I will
tell you that much in fact I found out

4
00:00:13,530 --> 00:00:16,800
that somebody that actually reviewed
this is like what the hell is doctor so

5
00:00:16,800 --> 00:00:24,550
that that's basically where I was six
months ago so container chaos is coming

6
00:00:24,550 --> 00:00:31,179
to the final chapter in an ongoing
vulnerability management system and

7
00:00:31,179 --> 00:00:35,519
integration between his security team in
a deadlock steam for a client of mine

8
00:00:35,520 --> 00:00:43,180
and Cincinnati area who was kind of
struggling to grasp the premise of

9
00:00:43,180 --> 00:00:49,309
containerization as a security team so
we were brought in specially in an

10
00:00:49,309 --> 00:00:55,468
infrastructure solution and got involved
in this project as well so what are we

11
00:00:55,469 --> 00:01:01,340
talking about today's more of a program
for integrating a security team in a

12
00:01:01,340 --> 00:01:06,030
DevOps team then it is actually dealing
with you know auditing containers and

13
00:01:06,030 --> 00:01:10,510
stuff like that we're gonna talk about
those two high-level principles but not

14
00:01:10,510 --> 00:01:13,840
really get into a lot of the
nitty-gritty details about you know

15
00:01:13,840 --> 00:01:18,040
running the tools and stuff like that so
that is my that's why disclaimer at the

16
00:01:18,040 --> 00:01:25,420
beginning I am a solution architect for
mexican men in the technology field

17
00:01:25,420 --> 00:01:34,020
since 2004 been working in security by
accident since 2005 my first job was

18
00:01:34,020 --> 00:01:38,820
working for state organization and they
said hey we've got we've got about a

19
00:01:38,820 --> 00:01:44,979
million 56 K lines running a library
system we want to play somebody p.m. so

20
00:01:44,979 --> 00:01:51,420
I got to got to deploy a lot of
fireworks for a couple of years worked

21
00:01:51,420 --> 00:01:55,500
at them for a while then moved to
Cincinnati about ten years ago

22
00:01:56,270 --> 00:01:59,750
like i said im Security Solution
Architect for NextGen I handle all of

23
00:01:59,750 --> 00:02:05,729
the security for 800 + clients and run
our security programs internally brought

24
00:02:05,729 --> 00:02:08,919
up a couple security programs internally
such as a fishing program

25
00:02:08,919 --> 00:02:12,670
for our clients multi-tenancy improper
stuff like that

26
00:02:14,500 --> 00:02:19,160
various certifications and nobody here
cares about whatsoever even I don't care

27
00:02:19,160 --> 00:02:23,239
about the governor is anybody who
follows me on Twitter will know and I am

28
00:02:23,239 --> 00:02:26,770
very much over caffeinated I wish had
been driving these two guys you're nuts

29
00:02:26,770 --> 00:02:33,500
for the entire entirety this trip but I
will go for the coffee and switch to the

30
00:02:33,500 --> 00:02:40,430
heart set after that so this might move
out fast so what is doctor writes of

31
00:02:40,430 --> 00:02:45,620
four people that aren't familiar with
doctor this is the best image ever seen

32
00:02:45,620 --> 00:02:50,610
to explain doctor and I practices for a
long time so this is the ship shipping

33
00:02:50,610 --> 00:02:53,610
ship shipping shipping ships

34
00:02:55,010 --> 00:03:02,660
basically what doctor does is it's it's
a Linux platform for hosting linux

35
00:03:02,660 --> 00:03:07,170
product works for most are you can run
some winter stuff inside it but it

36
00:03:07,170 --> 00:03:11,649
really started off as a shared
environment that you could containerized

37
00:03:11,650 --> 00:03:16,130
applications are top or so instead of
installing a complete OS to run your

38
00:03:16,130 --> 00:03:19,519
applications are you can install just
the prerequisites that you would need

39
00:03:19,519 --> 00:03:24,280
from the base image so just that don't
change from the base image is really all

40
00:03:24,280 --> 00:03:29,299
you need to install and dr. container it
gives it a lot of portability right so

41
00:03:29,299 --> 00:03:34,060
you know basically at the base level
we've got the big sinking ship that

42
00:03:34,060 --> 00:03:39,959
ships all the shipping ships and that
would be the doctor the doctor host in

43
00:03:39,959 --> 00:03:43,370
all ships that are kinda stacked on top
of it would be the containers and what

44
00:03:43,370 --> 00:03:47,840
you can do is move those containers from
one ChIP ChIP ChIP chip to other ship

45
00:03:47,840 --> 00:03:52,870
shipping chips got that right to I
didn't write one last time so it gives

46
00:03:52,870 --> 00:03:58,160
you a lot of portability a lot of a lot
of reliability and independence between

47
00:03:58,160 --> 00:04:03,970
the containers to not have to not have
to run prerequisites that you might not

48
00:04:03,970 --> 00:04:08,040
want to run so you can reduce your tax
services you can reduce a lot of

49
00:04:08,040 --> 00:04:11,989
complexity and you can reduce a lot of
utilization

50
00:04:11,990 --> 00:04:19,570
a resource perspective I've seen a cut
of about 30% on doctor containers over

51
00:04:19,570 --> 00:04:24,170
traditional hosting applications beyond
because I'm not running a basal it's

52
00:04:24,170 --> 00:04:28,690
almost like a thin provisioning type
scenario and storage pop or I don't have

53
00:04:28,690 --> 00:04:32,719
to run all those extra services and I
don't necessarily need just a run of the

54
00:04:32,720 --> 00:04:37,460
year so it's a very very efficient in
the fact that it it runs applications

55
00:04:37,460 --> 00:04:43,950
without having to have the extra hours
more about dr. doctor is a tool that can

56
00:04:43,950 --> 00:04:47,520
packaging applications tendencies the
virtual container that's the thing I

57
00:04:47,520 --> 00:04:51,219
really wanted to read off on that quote
the rest of you guys can read it if you

58
00:04:51,220 --> 00:04:56,460
want to slide you can ask me for later
but doctors at containerized application

59
00:04:56,460 --> 00:05:03,340
hosting platform so containerization is
the key the key thing there I can take a

60
00:05:03,340 --> 00:05:09,890
container filled it in pretend that ship
that same container to a test

61
00:05:09,890 --> 00:05:15,169
environment in ship that container off
the problem right so you have disparate

62
00:05:15,170 --> 00:05:24,010
networks disparate sets of resources but
I don't have to migrate or I don't have

63
00:05:24,010 --> 00:05:28,240
to redeploy applications every time I
move from one stage in the top software

64
00:05:28,240 --> 00:05:32,890
development lifecycle to the other
rights of this for security teams

65
00:05:32,890 --> 00:05:38,770
computer challenging his away that we've
been doing processes with where we have

66
00:05:38,770 --> 00:05:42,150
our checkpoints hirata times has to do
with what we're deploying applications

67
00:05:42,150 --> 00:05:49,299
right now what this this does this
breaks a lot of those processes hand for

68
00:05:49,300 --> 00:05:52,180
security teams understand what this is

69
00:05:52,180 --> 00:05:58,100
helps us to kind of get a grasp around a
better program it does allow containers

70
00:05:58,100 --> 00:06:02,030
to be deployed and destroyed with
incredible speed and agility that is a

71
00:06:02,030 --> 00:06:07,859
big another thing that guys want to run
as fast as possible ship code get it out

72
00:06:07,860 --> 00:06:11,040
get it working right buttock security
guys wanna do

73
00:06:11,040 --> 00:06:16,610
whoa whoa step back I got a test this I
gotta make sure you don't have any

74
00:06:16,610 --> 00:06:20,970
vulnerabilities or don't know about to
do all these different processes these

75
00:06:20,970 --> 00:06:23,540
to these two models don't really work
together very well

76
00:06:23,540 --> 00:06:31,010
all so doctor has broken a lot of a
process as the history doctor it was

77
00:06:31,010 --> 00:06:35,060
released as an open source proper in
March 2013 came from hosting provider

78
00:06:35,060 --> 00:06:38,160
and I wanted a containerized a lot of
what they were doing

79
00:06:38,160 --> 00:06:42,020
ended up becoming its own product and
now its own company it's got

80
00:06:42,020 --> 00:06:46,820
contributors like Red Hat IBM Google
Cisco and what they're trying to do it

81
00:06:46,820 --> 00:06:51,030
was just really cool and standardizing
container technology across multiple

82
00:06:51,030 --> 00:06:54,659
different operating systems they want to
be operating system independent so they

83
00:06:54,660 --> 00:06:59,520
want to say you can ship this container
any different operating system and this

84
00:06:59,520 --> 00:07:02,940
container will be self-sufficient
wherever you put it that is the end goal

85
00:07:02,940 --> 00:07:12,760
it's it's it's a lofty goal but that is
the end goal so what isn't doctor doctor

86
00:07:12,760 --> 00:07:17,610
is not a virtualization technology right
a lot of us want to think of doctor is

87
00:07:17,610 --> 00:07:22,640
OK I can say containers equal via
containers don't you will be as

88
00:07:22,640 --> 00:07:26,610
containers equal containers so that's a
that's a core principle that we're gonna

89
00:07:26,610 --> 00:07:32,670
have to get across here is that there is
not there is not a Dr mentalities that

90
00:07:32,670 --> 00:07:34,860
you can apply to a doctor

91
00:07:34,860 --> 00:07:40,270
container that you could do it it's not
built to be inherently secure right

92
00:07:40,270 --> 00:07:45,530
doctors not a security product it
doesn't have the types of segmentation

93
00:07:45,530 --> 00:07:50,239
that you have between a host in a
virtual machine which it shares a lot of

94
00:07:50,240 --> 00:07:57,490
the same processes on the host machine
that are run in separate namespaces but

95
00:07:57,490 --> 00:08:01,940
are still running outside of the actual
container where is a VMware run

96
00:08:01,940 --> 00:08:06,820
everything inside this is actually
running things inside the container and

97
00:08:06,820 --> 00:08:11,460
outside the container so it's not built
me here at least secure there have been

98
00:08:11,460 --> 00:08:16,000
issues proof of concepts around
privilege escalation breaking out of the

99
00:08:16,000 --> 00:08:21,560
jails and doctor and it's one of those
things where you have to be ready for

100
00:08:21,560 --> 00:08:25,790
doctor will talk about how to evaluate
whether you're ready for it it's not a

101
00:08:25,790 --> 00:08:31,180
virtual sandbox it does behave similarly
to on each doctor instance has its own

102
00:08:31,180 --> 00:08:32,900
network stack has all kinds of it

103
00:08:32,900 --> 00:08:38,350
safeguards to prevent one single
instance from passing the entire network

104
00:08:38,350 --> 00:08:43,820
but it's not a virtual sandbox and we
have to think about this as a shared

105
00:08:43,820 --> 00:08:48,910
platform between the host and the
container where is the hostesses guests

106
00:08:48,910 --> 00:08:54,020
in VMware be different and it's not a
panacea for application hosting we can't

107
00:08:54,020 --> 00:09:00,770
just say hey doctor everything shifted
are right there's yet the strategic we

108
00:09:00,770 --> 00:09:03,890
decide what applications are ready for
it

109
00:09:03,890 --> 00:09:08,000
what workloads are ready for it and look
at what you're gonna try to run in the

110
00:09:08,000 --> 00:09:12,940
doctor instances really good at web
applications are not good for databases

111
00:09:12,940 --> 00:09:18,580
what you want to look at is am I gonna
be shipping this right now I can be

112
00:09:18,580 --> 00:09:22,680
making a lot of changes with a limited
amount of time that these instances are

113
00:09:22,680 --> 00:09:27,530
going to be alive if that's that's a yes
then the doctor is probably a good

114
00:09:27,530 --> 00:09:32,910
solution for you there's a lot more that
goes into selecting a plot for just that

115
00:09:32,910 --> 00:09:42,329
though how does dr. work so until point
nine Dr use liver alexei systemd taxes

116
00:09:42,330 --> 00:09:47,560
system resources as a point zero point
nine lived container has taken over

117
00:09:47,560 --> 00:09:52,589
almost all of those roles so now the
doctor instance the doctor container

118
00:09:52,590 --> 00:09:57,110
pretty much uses the virtualization
features of KTM that are built into the

119
00:09:57,110 --> 00:10:02,790
Linux kernel in a does that through the
lid container library so this is this is

120
00:10:02,790 --> 00:10:07,810
a shift that can happen a couple years
ago that's given a lot more access to

121
00:10:07,810 --> 00:10:14,500
two types of performance monitoring
improvements that we get out of the KVM

122
00:10:14,500 --> 00:10:19,070
but it still does not you use those same
libraries but it does not behaving the

123
00:10:19,070 --> 00:10:24,270
way the KTM would behave so how does dr.
work as well

124
00:10:24,270 --> 00:10:28,150
a container can span multiple house so
you can share a container across

125
00:10:28,150 --> 00:10:32,610
multiple hosts which can't really do it
via limits can be placed our resources

126
00:10:32,610 --> 00:10:36,970
on a per container basis which basically
means I can say just gets this much CPU

127
00:10:36,970 --> 00:10:43,000
this much RAM this much network I can I
can limit the containers but I can't

128
00:10:43,000 --> 00:10:44,200
really segment

129
00:10:44,200 --> 00:10:48,780
and as much as we can with each
container does have network network

130
00:10:48,780 --> 00:10:52,579
network interfaces I say Karen but it
does has its own tcp/ip stack from the

131
00:10:52,580 --> 00:10:57,880
ground up basically virtual network
adapter in the namespaces feature gives

132
00:10:57,880 --> 00:11:01,300
a lot of that isolation between
different containers right because

133
00:11:01,300 --> 00:11:04,300
everything all the system processes for
the container running

134
00:11:04,880 --> 00:11:12,189
namespaces and now user names faces as a
110 which came out last night before

135
00:11:12,190 --> 00:11:18,570
last we got a lot better controls of
running root root stuff in the container

136
00:11:18,570 --> 00:11:22,630
not as rude outside the container and
that's a new thing that came out just to

137
00:11:22,630 --> 00:11:24,550
just about a month ago

138
00:11:24,550 --> 00:11:29,339
each version application runs I don't
know how this line actually ended up

139
00:11:29,340 --> 00:11:36,600
back in there so if everybody's
permission and that are here there's

140
00:11:36,600 --> 00:11:40,640
kernel level controls in place names
faces containers only have the

141
00:11:40,640 --> 00:11:43,850
dependencies and control groups of the
part that I want to get to hear the

142
00:11:43,850 --> 00:11:48,860
control groups are what allows you to
access to control how much a specific

143
00:11:48,860 --> 00:11:54,520
container in use right to control groups
are set up to give you that almost p.m.

144
00:11:54,520 --> 00:12:01,569
like capability of assigning resources
and it also prevents that utilizing all

145
00:12:01,570 --> 00:12:09,220
the RAM on a host and tossing caress the
rest of the closer so those are almost

146
00:12:09,220 --> 00:12:15,380
controls they do like I said segment to
a certain extent but I keep reiterating

147
00:12:15,380 --> 00:12:19,220
the fact that these are sure resources
because it's really important to know

148
00:12:19,220 --> 00:12:26,710
that if you week from one container into
the host the rest of the rest of the

149
00:12:26,710 --> 00:12:31,810
house has no right to keep going back to
that because this is a very very kid

150
00:12:31,810 --> 00:12:35,859
critical thing when you're selecting
what applications to run in doctor and

151
00:12:35,860 --> 00:12:39,810
what the maturity level is and how much
the security how much we secure coding

152
00:12:39,810 --> 00:12:43,060
practices have been used to develop the
application that you're about to ship

153
00:12:43,860 --> 00:12:48,579
user names faces is the one thing that's
big

154
00:12:48,579 --> 00:12:56,519
big change it was experimentally
released in 1994 Dora or say door yet

155
00:12:56,519 --> 00:13:04,489
nor released general public and one-dot
10 February 2016 this is a big big patch

156
00:13:04,489 --> 00:13:11,499
what this means is that we can map a
route grid in a container to a non-root

157
00:13:11,499 --> 00:13:17,749
wait outside the container it what that
means is that before one-dot 10 if you

158
00:13:17,749 --> 00:13:23,239
had root privileges for a process in the
container that process also had root

159
00:13:23,239 --> 00:13:28,089
privileges outside the container which
was a huge security gap for

160
00:13:28,809 --> 00:13:36,439
for applications that might be prone to
potential leakage to things like

161
00:13:36,439 --> 00:13:41,679
cross-site scripting we had a lot of a
lot of nervousness around the one-dot 9

162
00:13:41,679 --> 00:13:46,559
released because they lack the user
names faces it was way behind it was

163
00:13:46,559 --> 00:13:50,339
supposed to ship two years before it
finally did but it isn't general public

164
00:13:50,339 --> 00:13:55,179
now it has been tested for a couple
months and the cut the card that I had

165
00:13:55,179 --> 00:13:59,199
that using it is actually quite happy
with with the performance we were

166
00:13:59,199 --> 00:14:02,199
worried about the permits hit

167
00:14:02,790 --> 00:14:08,410
running these privileges outside the
container but it's been pretty good I

168
00:14:08,410 --> 00:14:13,649
guess that just means route inside does
not mean outside anymore and that was a

169
00:14:13,649 --> 00:14:20,529
big change for us to share her
architecture again is not designed with

170
00:14:20,529 --> 00:14:27,549
security in mind the second when I got
their root user in the container is now

171
00:14:27,549 --> 00:14:31,350
also drew on the host right that's
changed over time but it's important to

172
00:14:31,350 --> 00:14:34,879
know that if you're looking at from a
security perspective if you're looking

173
00:14:34,879 --> 00:14:38,879
at a Dr Foster and it hasn't been
patched is how many of us have gone in

174
00:14:38,879 --> 00:14:45,600
and so I see no software deployed yeah
okay me too I go in and I still see I

175
00:14:45,600 --> 00:14:48,600
still see novell stuff on a regular
basis so

176
00:14:49,640 --> 00:14:56,250
I'm really aging myself there may be one
on this line is that more than 30% of

177
00:14:56,250 --> 00:15:01,450
the containers in the doctor hub contain
serious security vulnerabilities and

178
00:15:01,450 --> 00:15:06,070
this was the thing that really put put a
big kink

179
00:15:06,740 --> 00:15:11,680
way we were looking at using doctor so
doctor containers you can pull from a

180
00:15:11,680 --> 00:15:20,880
doctor container right you can pull
these so most likely get and when one of

181
00:15:20,880 --> 00:15:23,850
their research firms that have listened
to the end here that it would call out

182
00:15:23,850 --> 00:15:27,460
my name Rihanna vulnerability scanner
simple Boehner buddhist can be

183
00:15:27,460 --> 00:15:31,900
downloaded the container funded up ran a
simple vulnerability scan thirty percent

184
00:15:31,900 --> 00:15:35,930
of them contain serious security
vulnerabilities right we're talking

185
00:15:35,930 --> 00:15:41,150
things like Hartley shellshock stuff
that's been patch for a long time in a

186
00:15:41,150 --> 00:15:45,110
lot of those were actually marked as the
latest version as well so this is

187
00:15:45,110 --> 00:15:49,230
something that a lot of DevOps teams are
struggling with because they figure they

188
00:15:49,230 --> 00:15:53,990
assume that these containers are going
to be patched right in assuming they're

189
00:15:53,990 --> 00:16:00,260
going to be patches become problematic
for a lot of different companies the

190
00:16:00,260 --> 00:16:04,290
other problem that I've seen as a
potential because of the how rapidly

191
00:16:04,290 --> 00:16:11,280
deploy containers right how fast these
processes new for things to get miss you

192
00:16:11,280 --> 00:16:18,079
might have three containers running but
you forgot about and I can tell you that

193
00:16:18,080 --> 00:16:21,580
this last week has been spent dealing
with a customer who had an application

194
00:16:21,580 --> 00:16:23,740
running they didn't need any more

195
00:16:23,740 --> 00:16:31,200
forgot about it it got popped and caused
them a significant network outage so 10

196
00:16:31,200 --> 00:16:35,050
things you can easily have happened in
doctor if you don't have mature security

197
00:16:35,050 --> 00:16:38,939
processes and you don't have major
development processes you can end up

198
00:16:38,940 --> 00:16:42,190
with multiple versions of these
applications running with their own

199
00:16:42,190 --> 00:16:43,400
staff

200
00:16:43,400 --> 00:16:47,900
connected but you forgot about this is
one of the things you have to

201
00:16:47,900 --> 00:16:51,280
communicate well and you have to be
auditing on a regular basis in order to

202
00:16:51,280 --> 00:16:55,689
be able to use this technology so when I
spread that more than 30% thing I looked

203
00:16:55,690 --> 00:16:56,110
at it

204
00:16:56,110 --> 00:17:02,880
the steps cuz I'm a nerd I like stats so
I looked at all the images 36%

205
00:17:03,959 --> 00:17:11,480
high-priority vulnerabilities all the
images of the doctor container right if

206
00:17:11,480 --> 00:17:15,490
you look at the ones that were tagged
latest 23% still had security

207
00:17:15,490 --> 00:17:20,040
vulnerabilities that ranked above a
sentence EDSS score right out of the box

208
00:17:20,040 --> 00:17:27,349
so I know what I see a seven or an eight
or nine harassing some towns I get a

209
00:17:27,349 --> 00:17:31,370
little nervous I want those cash right
away we're deploying code to these

210
00:17:31,370 --> 00:17:35,639
without a lot of times giving it a
second thought is we're just gonna be

211
00:17:35,640 --> 00:17:41,490
there long around right that's kind of
what it looked like to me when I read

212
00:17:41,490 --> 00:17:48,120
that report and my client freaked out
because we looked at we looked a little

213
00:17:48,120 --> 00:17:52,649
bit more deeply and her running some of
the containers that were discovered to

214
00:17:52,650 --> 00:17:56,450
have serious vulnerabilities and the
next Nexus can turn up to look at these

215
00:17:56,450 --> 00:17:58,280
five new host

216
00:17:58,280 --> 00:18:01,340
have CBS of 8.9

217
00:18:02,549 --> 00:18:13,330
Matt Hartley right so yeah really what I
when I read into that again I i talked

218
00:18:13,330 --> 00:18:17,330
about kind of the diverging paths and
work this is where I'm gonna slow down a

219
00:18:17,330 --> 00:18:20,980
little bit and talk more about the
program that we bill for dealing with

220
00:18:20,980 --> 00:18:25,380
doctor said it talking about doctors
specifically it was security was to do

221
00:18:25,380 --> 00:18:33,169
is be that checkpoint right stop
security right so good at saying stop

222
00:18:33,169 --> 00:18:37,730
let me review this I'll get back to you
when it when I ready what democrats want

223
00:18:37,730 --> 00:18:43,840
to do is really a network drive so what
picture popped up my Twitter feed about

224
00:18:43,840 --> 00:18:48,959
two weeks ago that was perfect for for
this talk and product is a guy that job

225
00:18:48,960 --> 00:18:54,570
at one for me but we have different
different methodologies right doesn't

226
00:18:54,570 --> 00:18:58,418
talk about curing feeding for developers
and I i know someone who's become

227
00:18:58,419 --> 00:19:03,360
because I was sitting next to one of you
and talks about how

228
00:19:03,980 --> 00:19:09,940
security folks we don't really work with
that folks very well and what I thought

229
00:19:09,940 --> 00:19:13,740
about that a little bit more I thought
well I wonder what tools we could put

230
00:19:13,740 --> 00:19:19,880
into place to improve that relationship
right to say I understand you're running

231
00:19:19,880 --> 00:19:27,130
on its life cycle and I am working in a
reactionary right I react to situations

232
00:19:27,130 --> 00:19:32,160
I can be proactive but largely are
reacting to new vulnerabilities on a

233
00:19:32,160 --> 00:19:37,530
regular basis are reacting to new code
that you're putting into place my

234
00:19:37,530 --> 00:19:42,860
proactive measures are usually at the
edge cops and controls for stuff that

235
00:19:42,860 --> 00:19:47,750
you have you have business processes
that need to be running securely though

236
00:19:47,750 --> 00:19:54,000
they just want to ship right they want
to say I've got this I built it it works

237
00:19:54,000 --> 00:19:59,710
she way says it works I wanted I wanted
out there right so how do we manage

238
00:19:59,710 --> 00:20:11,380
those two different goals right 95% of
conflict is in communication so what we

239
00:20:11,380 --> 00:20:14,480
what we don't do and what Jason
explained earlier that we don't do

240
00:20:14,480 --> 00:20:19,760
really well as communicate with those
deaths to say hey this is why we do this

241
00:20:19,760 --> 00:20:24,820
stuff securely and this is why we need
this time due to run things but doctor

242
00:20:24,820 --> 00:20:30,129
in the way that it ships is a lot more
friendly to security teams because we

243
00:20:30,130 --> 00:20:34,820
can build in checkpoints and because
we're taking containers through the

244
00:20:34,820 --> 00:20:40,990
whole lifecycle I can check the
containers less frequently than I was

245
00:20:40,990 --> 00:20:44,610
before his I'm not deploying to three
separate GM's

246
00:20:44,610 --> 00:20:49,580
don't have the hardware three separate
GM's I don't have to do vulnerability

247
00:20:49,580 --> 00:20:54,580
management on three separate video that
we're continuing to deal with here it it

248
00:20:54,580 --> 00:20:59,960
just my resources a little bit more
effectively than than the traditional

249
00:20:59,960 --> 00:21:01,430
method of shipping

250
00:21:01,430 --> 00:21:08,120
shipping code so I came up with a
security process for a quiet that had

251
00:21:08,120 --> 00:21:14,510
four phases the first one was discover
second one was analyzed third one was

252
00:21:14,510 --> 00:21:19,060
deployed in the fourth one was on it
regularly because we all like to check

253
00:21:19,060 --> 00:21:24,050
right we all wait to make sure that
we're keeping on top of things and that

254
00:21:24,050 --> 00:21:31,129
we're watching regularly to see what's
happening in these containers and that's

255
00:21:31,130 --> 00:21:35,720
that the maintenance trays but really to
get them to the maintenance phase we had

256
00:21:35,720 --> 00:21:39,550
to have this process to decide whether
we wanted even get move over closer to

257
00:21:39,550 --> 00:21:46,129
doctor so the discovery phase was really
about deciding whether or not we were

258
00:21:46,130 --> 00:21:52,470
ready for doctor as an organization and
as an organization we looked at things

259
00:21:52,470 --> 00:21:59,520
like what am I did all of the processes
they are they mature do I headed over to

260
00:21:59,520 --> 00:22:05,980
code and a secure manner do I have
developers that have robust fallback

261
00:22:05,980 --> 00:22:07,470
options

262
00:22:07,470 --> 00:22:14,440
ok do I have a good effective
communication system between depo you a

263
00:22:14,440 --> 00:22:20,500
production security because with the
with how rapid Dr instances are created

264
00:22:20,500 --> 00:22:25,580
and destroyed we have to communicate
really well in order for us to keep

265
00:22:25,580 --> 00:22:30,480
these instances running and insecure
matter and we got also decide whether

266
00:22:30,480 --> 00:22:37,050
the after ready for doctor because again
doctor doesn't run away VMI's run do we

267
00:22:37,050 --> 00:22:42,149
ship through defined processes right if
I but if I'm building is my development

268
00:22:42,150 --> 00:22:48,520
lifecycle actually mature right I've
seen a lot of people say oh ok I get it

269
00:22:48,520 --> 00:22:51,830
but you know what select your Sprint

270
00:22:52,650 --> 00:23:01,870
parents look at what what do you do on a
daily basis to show me that the maturity

271
00:23:01,870 --> 00:23:04,959
is there to to maintain

272
00:23:04,960 --> 00:23:09,740
create maintain and destroy these
containers in a reliable basis

273
00:23:10,289 --> 00:23:15,279
k reliability is the key thing here in
getting the devs to understand that we

274
00:23:15,279 --> 00:23:19,870
can't have multiple versions running we
can't have we can't have certain things

275
00:23:19,870 --> 00:23:24,959
that are going to enable us to say ok
we're gonna run with this tool if when

276
00:23:24,960 --> 00:23:25,590
you're ready

277
00:23:25,590 --> 00:23:32,428
okay and then you have to look at the
apps yet to look at is there a potential

278
00:23:32,429 --> 00:23:39,649
for privilege escalation are there in my
good it rolling out apps without any

279
00:23:39,649 --> 00:23:44,928
relics right because we're not shipping
for not installing a new version are

280
00:23:44,929 --> 00:23:47,600
patching aversion up to my new code

281
00:23:47,600 --> 00:23:53,090
shipping a brand new container right so
realistically you know from a production

282
00:23:53,090 --> 00:23:59,289
environment esta production to test the
QA to production shouldn't have that

283
00:23:59,289 --> 00:24:04,890
right but there are seen certain
instances where databases because you

284
00:24:04,890 --> 00:24:08,870
know PCI and other things to allow you
to use live data interesting face right

285
00:24:08,870 --> 00:24:13,000
so databases are much different in
production and they might be in QA

286
00:24:13,789 --> 00:24:18,840
the tables are the same store processes
and procedures of the same but when you

287
00:24:18,840 --> 00:24:23,500
get into a big data set can behave a lot
differently than what you're testing my

288
00:24:23,500 --> 00:24:29,039
behavior so if you don't have really
good test environments you're probably

289
00:24:29,039 --> 00:24:33,230
not ready for dr. right you're you're
gonna need to have a much more defined

290
00:24:33,230 --> 00:24:36,950
process to eliminate any of those relics
that you might have when you ship code

291
00:24:36,950 --> 00:24:44,510
from Taylor from BMW when you move to a
containerized technology also look at

292
00:24:44,510 --> 00:24:50,559
which cracked also look at what we
reside in the doctor instance right do I

293
00:24:50,559 --> 00:24:54,980
have secure jails and place I can't tell
you how many times I come in and ask the

294
00:24:54,980 --> 00:24:59,890
client alright so do you have SSH access
enabled to the server

295
00:24:59,890 --> 00:25:03,360
yeah I got people that have to do near
batch processes into the server to be

296
00:25:03,360 --> 00:25:11,010
processed once a night alright so little
bit further and the failed band

297
00:25:11,010 --> 00:25:17,450
Damon isn't running anymore you don't
have any jails in place on this you know

298
00:25:17,450 --> 00:25:21,360
if somebody dogs in three or four times
they're not they're not fail to be in no

299
00:25:21,360 --> 00:25:25,870
ok hey look I just browse through
different containers are four different

300
00:25:25,870 --> 00:25:31,050
clients to be SSH is your jails are
secure just move laterally across

301
00:25:31,050 --> 00:25:36,770
clients so look at actually how well not
only the application itself is running

302
00:25:36,770 --> 00:25:42,520
but what's behind it what what what net
power seized you have on the firewall

303
00:25:42,520 --> 00:25:46,639
pointing to the application you have now
in order to enable people to do business

304
00:25:46,640 --> 00:25:49,880
the way that they've been doing business
not necessarily the way you want to do

305
00:25:49,880 --> 00:25:55,400
business right because we see these you
know we do are compensating controls and

306
00:25:55,400 --> 00:25:59,470
security developers do a lot of the same
stuff well I can't do this now so I'm

307
00:25:59,470 --> 00:26:06,470
just gonna spin up an SFTP server people
can browse and a partial right right but

308
00:26:06,470 --> 00:26:11,590
it happens and that kind of thing is not
not friendly to this type of technology

309
00:26:11,590 --> 00:26:19,980
in that respect I would not put anything
any application or server that requires

310
00:26:19,980 --> 00:26:24,560
a type of SSH access your FTP access or
anything like that wouldn't put it in a

311
00:26:24,560 --> 00:26:28,730
container maybe a little bit more now
that the that the user name spaces are

312
00:26:28,730 --> 00:26:33,800
involved but not necessarily not
necessarily comfortable with the

313
00:26:33,800 --> 00:26:38,919
potential for my root password political
eat and to allow that type of that type

314
00:26:38,920 --> 00:26:44,410
of lateral movement between the between
the goods so can a 110 we might be able

315
00:26:44,410 --> 00:26:48,370
to be a little bit more would be more
lenient on that type of functionality

316
00:26:48,370 --> 00:26:53,820
but still don't necessarily trust and
honor Sentosa hardened trusted

317
00:26:53,820 --> 00:26:59,939
technology and the other thing to know
is willing existing container for an

318
00:26:59,940 --> 00:27:05,790
existing audited container satisfy the
requirements so when we start this

319
00:27:05,790 --> 00:27:10,350
process of actually securing dr. right

320
00:27:10,350 --> 00:27:14,980
what we're doing is we're going to
preach AK anybody have a TSA PreCheck

321
00:27:14,980 --> 00:27:23,830
thing now so you can fly faster awesome
yeah I see it big shake yeah I agree we

322
00:27:23,830 --> 00:27:28,449
can do almost PreCheck method for
containers right where if my developer

323
00:27:28,450 --> 00:27:33,230
wants using container I can say hey
these different containers in the doctor

324
00:27:33,230 --> 00:27:38,470
hub I bought it it I'm comfortable with
and you can use these containers until

325
00:27:38,470 --> 00:27:44,520
May 31st right and I'm cool with you
using these containers until that

326
00:27:44,520 --> 00:27:50,400
alright and I we ought it all the
containers or any of the new containers

327
00:27:50,400 --> 00:27:56,299
to make sure that I am free checking
those for use by the doubts right so if

328
00:27:56,299 --> 00:28:00,990
I have to build a new container to do
what you need to do that's going to slow

329
00:28:00,990 --> 00:28:06,530
this process down in this workload might
not be ready ok so this is the kind of

330
00:28:06,530 --> 00:28:14,230
the analyzed phase deciding whether or
not we now move a workload into Dr we've

331
00:28:14,230 --> 00:28:18,380
gotten to the point where we agree that
doctors right fit for the company right

332
00:28:18,380 --> 00:28:22,059
we agree that our processes are richer
and off in order to be able to utilize

333
00:28:22,059 --> 00:28:25,190
this type of technology now we're
actually looking at the applications and

334
00:28:25,190 --> 00:28:30,250
saying right which ones are you should
start using this methodology and and

335
00:28:30,250 --> 00:28:35,010
this is giving us kind of a baseline
these are the absurd I'm gonna move

336
00:28:35,010 --> 00:28:39,379
first because I do not necessarily
comfortable with having to build custom

337
00:28:39,380 --> 00:28:42,860
containers overtime with the way that
we're shipping these applications the

338
00:28:42,860 --> 00:28:46,949
fallback is going to be if I need to
build all just grab one and it may not

339
00:28:46,950 --> 00:28:52,140
be in the list we want to make sure that
we have controls in place that say if it

340
00:28:52,140 --> 00:28:57,770
isn't in the list it doesn't happen
right and if you need a custom container

341
00:28:57,770 --> 00:29:01,490
bill securities gonna have to check it
out for some that's gonna set you back a

342
00:29:01,490 --> 00:29:05,890
certain amount of time probably a week a
lot of us are busy maybe more than a

343
00:29:05,890 --> 00:29:12,270
week ago I couldn't get the win a Wii so
that's the analyzed phase but what we do

344
00:29:12,270 --> 00:29:21,210
to kind of prepare a a location for dr.
we dance its general standards right

345
00:29:21,210 --> 00:29:25,700
what are my acceptable containers from
the marketplace what are my standard owe

346
00:29:25,700 --> 00:29:31,480
us bills for the actual hosts right am I
gonna standardize on a single platform

347
00:29:31,480 --> 00:29:37,620
which we standardize on a single proper
will make everybody's life easier and

348
00:29:37,620 --> 00:29:42,090
what versions I am I gonna write that
one versions of the dependencies and I

349
00:29:42,090 --> 00:29:46,309
gotta run and I put OpenSSL in here and
I was going to put more but I then

350
00:29:46,309 --> 00:29:53,320
decided that OpenSSL was one of the ones
I just been getting beat bad right and

351
00:29:53,320 --> 00:29:57,418
wanted to highlight that one and what
version of I gonna standardize our cross

352
00:29:57,419 --> 00:30:02,640
all my poppers right what version am I
going to give that PreCheck to in order

353
00:30:02,640 --> 00:30:07,020
to make sure that I'm comfortable with
the way that thinks it right now and

354
00:30:07,020 --> 00:30:11,360
then we also have to we can just set
standards and then say that's the

355
00:30:11,360 --> 00:30:16,049
standard right we have to have automated
processes are not automated we have to

356
00:30:16,049 --> 00:30:21,200
have time processes to reevaluate what
we preach checked to make sure that

357
00:30:21,200 --> 00:30:25,860
we're still in a no-good state before we
actually go history utilizing this in a

358
00:30:25,860 --> 00:30:32,330
much more much more widespread matter so
I like to use a tool like Linus to audit

359
00:30:32,330 --> 00:30:41,340
my my bills I can take linus and I can
make that I guess arite whatever the

360
00:30:41,340 --> 00:30:47,600
best practice analysis shows me on the
lioness the witness report is the way I

361
00:30:47,600 --> 00:30:51,840
want these these boxes hardened before
they go out so I can check those on a

362
00:30:51,840 --> 00:30:56,178
regular basis to make sure that they are
maintaining what I've put forward as a

363
00:30:56,179 --> 00:30:59,580
as a baseline privilege Aranas has
different definitions that you can used

364
00:30:59,580 --> 00:31:04,510
really powerful tool it's also got a
container plugin so I can get my

365
00:31:04,510 --> 00:31:08,340
containers as well to make sure that
they're they're up to my best practices

366
00:31:08,340 --> 00:31:14,340
right so this is a really fantastic tool
that helps us a lot with dealing with

367
00:31:14,340 --> 00:31:21,899
things like things like version changes
things like secure configurations of

368
00:31:21,899 --> 00:31:26,479
different protocols they don't check for
us to sell stuff is really really

369
00:31:26,480 --> 00:31:29,480
helpful I used it a lot when I was
working in the banking industry

370
00:31:30,279 --> 00:31:34,009
and a lot of a lot of hosted
applications internally hosted

371
00:31:34,009 --> 00:31:40,539
applications on a variety of Linux
platforms so I i friend Michael actually

372
00:31:40,539 --> 00:31:45,080
runs a company that does that he's a
really really good guy and has done a

373
00:31:45,080 --> 00:31:50,739
lot in the doctor space recently to help
us get a handle on things so if you

374
00:31:50,739 --> 00:31:56,409
don't follow him or check out his sister
if I blog on a regular basis I recommend

375
00:31:56,409 --> 00:32:03,049
him hire a highly he's a fantastic guy
and very smart very smart Linux so now

376
00:32:03,049 --> 00:32:10,749
I'm gonna meet scanner right but how old
they planted it ok I'm checking my I got

377
00:32:10,749 --> 00:32:15,029
this automated process and I meant to
say process I got this automated process

378
00:32:15,029 --> 00:32:20,719
that says check in regularly but you
know I got a tool and we're using it

379
00:32:20,719 --> 00:32:26,969
right if you look at that if anybody is
an aviation art like I am you see that

380
00:32:26,969 --> 00:32:30,379
that's really not gonna do much of
anything right

381
00:32:30,379 --> 00:32:36,309
scientists are correctly they stopped
and checked right and I just really like

382
00:32:36,309 --> 00:32:41,070
that picture wanna get in the Saitek
kidding but we've got this automated

383
00:32:41,070 --> 00:32:45,629
system now check my my containers I got
a scanner checking my containers like

384
00:32:45,629 --> 00:32:49,408
Linus but if I don't know what my
configuration standards are and I'm not

385
00:32:49,409 --> 00:32:52,409
actually checking them on a regular
basis

386
00:32:53,149 --> 00:32:59,779
runaway are you pretty fast the other
thing from an audit perspective and I

387
00:32:59,779 --> 00:33:04,759
know one person in here is a problem
we've approached me for this morning but

388
00:33:04,759 --> 00:33:10,259
we need to make sure that we're auditing
containers on a regular basis and this

389
00:33:10,259 --> 00:33:15,759
was the linchpin to this entire this
entire thing right we've got to the

390
00:33:15,759 --> 00:33:17,580
point where we're now shipping code

391
00:33:17,580 --> 00:33:21,270
in this light is gonna take me a long
time even though there's always five

392
00:33:21,270 --> 00:33:30,930
lines on it but we've got our shipping
code right where do we now work where do

393
00:33:30,930 --> 00:33:35,850
we know who her car way into the process
into the life cycle right where do I

394
00:33:35,850 --> 00:33:39,790
insert ourselves into the deadly
development life cycle to work with

395
00:33:39,790 --> 00:33:42,190
those guys right now work against them

396
00:33:42,190 --> 00:33:48,050
don't make it adversarial say hey I
understand you're in this cycle I need

397
00:33:48,050 --> 00:33:52,020
this amount of time in your cycle k
shareware to a building those

398
00:33:52,020 --> 00:33:57,060
checkpoints to enable them to do their
job but yet enable me to be able to

399
00:33:57,060 --> 00:34:03,370
effectively manage the security right so
we actually can integrate ourselves into

400
00:34:03,370 --> 00:34:10,029
the software development lifecycle cause
we're now not necessarily in a security

401
00:34:10,030 --> 00:34:11,050
mode

402
00:34:11,050 --> 00:34:15,050
consultant vote for working with them
they were inserting ourselves into the

403
00:34:15,050 --> 00:34:19,510
process and this is what bill talked
about so eloquently to explain that you

404
00:34:19,510 --> 00:34:24,870
know they work on schedules we work in
reactionary I can build my checkpoints

405
00:34:24,870 --> 00:34:29,819
with doctor because I have two controls
and placed run when I built a container

406
00:34:29,820 --> 00:34:34,250
initially to be able to say all right
you can go to QA but you can go to QA

407
00:34:34,250 --> 00:34:41,060
through us and dr. allows us the
functionality it's a ship it to me so

408
00:34:41,060 --> 00:34:48,130
you put in I gave you a doctor instance
here is one I gave you a container that

409
00:34:48,130 --> 00:34:53,280
I PreCheck this this container is good
to be used for this amount of time here

410
00:34:53,280 --> 00:34:57,610
and you'll ship new coat on top of that
before I before this container needs to

411
00:34:57,610 --> 00:35:02,530
be destroyed they did they develop their
software push it out to that before it

412
00:35:02,530 --> 00:35:07,280
goes to key way I can run by automated
vulnerability scanner against it again

413
00:35:07,280 --> 00:35:10,540
to make sure that nothing has changed in
the time that they worked on their debt

414
00:35:10,540 --> 00:35:17,020
cycle chewed time that it got to a stage
and I can actually staged at a movie

415
00:35:17,020 --> 00:35:19,700
right off to QA in a relatively short
mariner

416
00:35:19,700 --> 00:35:23,520
right so it's like a checkpoint we get
that check point but we scheduled a

417
00:35:23,520 --> 00:35:28,720
checkpoint now as opposed to just hit
the boxes all the time and say hey by

418
00:35:28,720 --> 00:35:29,569
the way

419
00:35:29,570 --> 00:35:35,820
OpenSSL no good anymore you need to
redevelop everything in order to use a

420
00:35:35,820 --> 00:35:41,010
cell right for inserting ourselves in
the strategic places in order to you

421
00:35:41,010 --> 00:35:44,589
to prevent that stuff from becoming
running around with her hair on fire

422
00:35:45,440 --> 00:35:51,440
we have to look at this as we are
inserting ourselves into the process as

423
00:35:51,440 --> 00:35:58,380
opposed to as opposed to just hitting
them constantly with requests right we

424
00:35:58,380 --> 00:36:02,970
have to work with their set up against
them in order to make sure that

425
00:36:02,970 --> 00:36:07,770
everybody's happy and doctor gives us
the ability to ship things in a manner

426
00:36:07,770 --> 00:36:12,579
that I have a lot less attack surface to
manage because if I have one application

427
00:36:12,579 --> 00:36:18,040
really have three containers that are
dealing with those three containers can

428
00:36:18,040 --> 00:36:23,040
be created and destroyed is needed so
this gives us the ability to integrate

429
00:36:23,040 --> 00:36:28,569
better but we do have to do things like
broadening them before they shoulda

430
00:36:28,569 --> 00:36:32,609
production in dogging them on a schedule
but I know all of us here or

431
00:36:32,609 --> 00:36:37,140
vulnerability scanning on a regular
basis right yeah at least you can

432
00:36:37,140 --> 00:36:43,759
protect what you don't know right that's
that's a big deal but are we doing it on

433
00:36:43,760 --> 00:36:49,410
a regular basis thats automated that's
going to say hey I understand your

434
00:36:49,410 --> 00:36:53,839
process this is my process let's make
them work together in this is it this is

435
00:36:53,839 --> 00:36:58,220
an opportunity for us to do that but we
also have to do active attacker paint us

436
00:36:58,220 --> 00:37:03,279
to make sure that there is not anything
in my app application that is going to

437
00:37:03,280 --> 00:37:08,150
let my doctor post it note really don't
like it when that happens we'll bring

438
00:37:08,150 --> 00:37:14,710
any of us really do but we have to be
because we are losing a lot of the

439
00:37:14,710 --> 00:37:18,060
security functionality that were custom
to you need to be doing

440
00:37:18,060 --> 00:37:25,009
more interesting and doing better pen
testing then put a vulnerability scanner

441
00:37:25,010 --> 00:37:29,100
like necessary right I had no service in
here

442
00:37:29,950 --> 00:37:34,850
twist lock has come out with a product
for dr. over the past couple months

443
00:37:35,490 --> 00:37:41,930
year that does a lot of this for us now
really good stuff I've spoken with their

444
00:37:41,930 --> 00:37:46,560
chief strategy officer several times
I've evaluate it thoroughly evaluated

445
00:37:46,560 --> 00:37:52,120
with my client my client is going to buy
into that technology on a pretty wide

446
00:37:52,120 --> 00:37:59,130
scale basis and they do things like
vulnerability scanning runtime defense

447
00:37:59,130 --> 00:38:03,320
compliance and access control with your
things that street traditionally

448
00:38:03,840 --> 00:38:10,620
teams struggled with top teams kind of
struggle with you know they'll share how

449
00:38:10,620 --> 00:38:14,779
many of us have a policy that says you
shall shall not share credentials

450
00:38:14,780 --> 00:38:23,400
alright how many of us share credentials
welcome I got to be so many this guy in

451
00:38:23,400 --> 00:38:31,190
the admin admin account out there I saw
it happens right indemnity insurance hey

452
00:38:31,190 --> 00:38:36,560
just here's a repast word on the
container you know we're not going to

453
00:38:36,560 --> 00:38:40,110
set up all these accounts right where Im
going to set up accounts for shipping

454
00:38:40,110 --> 00:38:45,110
code because it just takes too much time
use the repairs were right so disliked

455
00:38:45,110 --> 00:38:46,110
makes it easy

456
00:38:46,110 --> 00:38:52,050
does availability scanning for us and
gives what I really like about it you

457
00:38:52,050 --> 00:38:55,780
know and I don't mean this is an ad for
them because i dont have any affiliation

458
00:38:55,780 --> 00:39:00,600
whatsoever I just really think that is
interesting technology because it gives

459
00:39:00,600 --> 00:39:06,100
the devs visibility into the
vulnerability scanner itself right and

460
00:39:06,100 --> 00:39:10,759
what did anybody tell me what does
actually really want in a security

461
00:39:10,760 --> 00:39:12,440
process

462
00:39:12,440 --> 00:39:22,589
spicy food and beer yes expensive fancy
flower a beer I used to think that was

463
00:39:22,589 --> 00:39:30,759
exactly the case what what what I found
out though and I talk to the dead staff

464
00:39:30,760 --> 00:39:34,420
there I bought a lot of spicy beer or
spicy spicy food and beer

465
00:39:34,420 --> 00:39:37,790
some of the beer was but some of the
beer and chili peppers in it I drink one

466
00:39:37,790 --> 00:39:42,779
of a while how do you guys drink the
stuff what they really wanted was to be

467
00:39:42,780 --> 00:39:47,390
educated right they don't wanna
continually get owned by the security

468
00:39:47,390 --> 00:39:54,650
team right and a lot of her wake you
know I'm trying to make my job trying to

469
00:39:54,650 --> 00:39:59,099
do my job here chip code I've got these
business case against these use cases

470
00:39:59,099 --> 00:40:04,740
stacking up I got it I got a scheduled
to get out and you guys should listen to

471
00:40:04,740 --> 00:40:09,509
me like he care but you know we usually
get over it

472
00:40:09,510 --> 00:40:13,359
do better but when they really wanted
was to be educated like how can I do

473
00:40:13,359 --> 00:40:16,740
better so that you guys have less stuff
to come to me and say he fix this right

474
00:40:16,740 --> 00:40:21,118
they want to be educated it was giving
access into the vulnerability scanner

475
00:40:21,119 --> 00:40:27,450
gives you the ability to look at these
things and not just get a report from

476
00:40:27,450 --> 00:40:30,299
the security team showing how much he
saw

477
00:40:30,300 --> 00:40:36,119
hey what it gives them is the ability to
look at it if I do this how does that

478
00:40:36,119 --> 00:40:39,470
impact the vulnerability scan and they
can do it on a much more consistent

479
00:40:39,470 --> 00:40:43,720
basis and I've actually seen them buying
into polar body scanning and actually

480
00:40:43,720 --> 00:40:48,669
take it seriously when they can be
involved in their actual to write so

481
00:40:48,670 --> 00:40:55,170
that's something that we can integrate
this kind of technology into a dev team

482
00:40:55,170 --> 00:41:01,869
is king is critical that skin right if
people don't buy and they're not going

483
00:41:01,869 --> 00:41:06,460
to make a change and if they do by and
they feel like they're participative in

484
00:41:06,460 --> 00:41:10,490
the process they're going to be much
more receptive to what the security guys

485
00:41:10,490 --> 00:41:13,848
comin say and if they're solving
problems that we're gonna bring them

486
00:41:13,849 --> 00:41:14,700
anyways

487
00:41:14,700 --> 00:41:20,210
before we have to bring them to our jobs
easier right because they're working to

488
00:41:20,210 --> 00:41:22,820
the bone bruise care say well I can just
I can catch this

489
00:41:22,820 --> 00:41:29,230
so I can fix this and they fix it and I
never have to talk to or I can focus on

490
00:41:29,230 --> 00:41:33,220
the you know 387 tickets I got say hey
the fire was broken

491
00:41:34,270 --> 00:41:41,090
probably caused by broken and honesty is
a security team I do like using linus

492
00:41:41,090 --> 00:41:47,000
and that's that's because I so we've got
the development team that we've got the

493
00:41:47,000 --> 00:41:52,710
operations team and we got a security
team and I'm sitting here and security

494
00:41:52,710 --> 00:41:58,170
world saying you know hey I i checked
all these checked all of these

495
00:41:58,170 --> 00:42:02,400
configurations there are broken so that
the operations team the network team

496
00:42:02,400 --> 00:42:05,880
they don't want to be bothered that
stuff either as security guys were

497
00:42:05,880 --> 00:42:10,800
saying you know you need to fix all
these service now right so they asked me

498
00:42:10,800 --> 00:42:16,180
how do I make how do I get these servers
better before I put him in and have the

499
00:42:16,180 --> 00:42:20,299
security guys look at him so I only have
three things to fix before you guys come

500
00:42:20,300 --> 00:42:25,220
out come back at me you know you know
they were getting day no reports and

501
00:42:25,220 --> 00:42:32,259
stuff for shipping bad search for said
well try Linus Pauling Linus try it out

502
00:42:32,260 --> 00:42:38,740
it'll give you a baseline configuration
that is solid for the hosts that we're

503
00:42:38,740 --> 00:42:42,220
going to be shipping co 2 we are going
to be happy with the way that these are

504
00:42:42,220 --> 00:42:47,959
these hosts are configured primarily
happy with the way he's had a certain

505
00:42:47,960 --> 00:42:52,730
figure if you run a to like this before
you tell me that it's ready if you say

506
00:42:52,730 --> 00:42:57,070
hey I built anew if i dont a new
instance it's ready for you

507
00:42:57,070 --> 00:43:01,310
great I'm gonna check it but this is
going to allow you to be participative

508
00:43:01,310 --> 00:43:05,779
in the process of getting that box hard
and before I have to look at it so when

509
00:43:05,780 --> 00:43:09,080
I come back to you with three things
that need to be fixed asset of 30 things

510
00:43:09,080 --> 00:43:13,940
that need to be fixed it's also it's
gonna be consistent in its you're going

511
00:43:13,940 --> 00:43:17,480
to be part of the process so you're
going to understand why I'm doing these

512
00:43:17,480 --> 00:43:23,270
things on a regular basis right
everybody kinda cool with that good

513
00:43:23,770 --> 00:43:29,900
I do have some references here we're way
ahead of schedule as I am over

514
00:43:29,900 --> 00:43:36,530
caffeinated so the Red Hat log what's
next for continued containers using

515
00:43:36,530 --> 00:43:42,070
namespaces explains a rock of what that
username spaces feature does and it

516
00:43:42,070 --> 00:43:46,570
doesn't in a much more technical manner
than than I did because you know I don't

517
00:43:46,570 --> 00:43:53,950
have sixty pages to talk to you about
the second one the analyzing Dr home is

518
00:43:53,950 --> 00:43:58,609
the source for that that study that was
done if anybody wants these I got my

519
00:43:58,610 --> 00:44:05,530
contact info I think the next slide PPT
slides the Banyan ops one is the

520
00:44:05,530 --> 00:44:11,350
analyzing doctor hope that is a great
study that if you're doing it isn't as a

521
00:44:11,350 --> 00:44:15,830
security team and say we're not ready
for doctor after today right you can

522
00:44:15,830 --> 00:44:20,380
take it to know and say hey look there
is a significant problem in the doctor

523
00:44:20,380 --> 00:44:25,810
hub with vulnerabilities and if we're
gonna adopt the store we gotta be

524
00:44:25,810 --> 00:44:28,750
proactive towards this type of situation

525
00:44:28,750 --> 00:44:34,230
okay and then the last one the doctors
shipping container for Linux code that's

526
00:44:34,230 --> 00:44:40,040
kind of basically a how-to how-to doctor
I really like that article I read it

527
00:44:40,040 --> 00:44:44,690
several times over and over to make sure
that I wasn't wasn't misunderstanding

528
00:44:44,690 --> 00:44:48,790
some of the processes that were equation
really really like that once I like to

529
00:44:48,790 --> 00:44:49,880
put it up there

530
00:44:49,880 --> 00:44:58,140
the other thing that i have here is the
system if I / linus that is Michael

531
00:44:58,140 --> 00:45:04,160
Boland site he is adopted he has kind of
gotten into the Dr auditing

532
00:45:04,160 --> 00:45:11,109
functionality its open-source he's a
really good guy check it out his blog is

533
00:45:11,110 --> 00:45:14,170
also fantastic if you want to learn
about Linux hardening or doctor

534
00:45:14,170 --> 00:45:19,780
hardening twist lock is the company that
I talked about that is not open source

535
00:45:19,780 --> 00:45:24,310
but it's very very cool and it's a very
easy tool to integrate your security

536
00:45:24,310 --> 00:45:29,799
team which are dead ops team and get
some better results and then the

537
00:45:29,800 --> 00:45:32,800
carriage inning for developers build
some stock

538
00:45:33,740 --> 00:45:40,830
the rebound last year that was a great
talk about how to cut a deal with those

539
00:45:40,830 --> 00:45:41,590
guys

540
00:45:41,590 --> 00:45:48,970
the spicy food in and expensive weird
beer that's kind of the Justin it but

541
00:45:48,970 --> 00:45:55,069
this really gives us a a real good
understanding of what developers Walker

542
00:45:55,070 --> 00:46:00,840
us right so this talk I respond out of
watching him become less you're thinking

543
00:46:00,840 --> 00:46:05,860
he we sought sometimes you're really
good at making things here but we're not

544
00:46:05,860 --> 00:46:10,730
necessarily good at talking to people
about why we're securing things I can't

545
00:46:10,730 --> 00:46:14,640
tell you the number of times I've gone
into a meeting and I i hurt why we do it

546
00:46:14,640 --> 00:46:19,970
but the only answer I get is because
security right and how many I'm guilty

547
00:46:19,970 --> 00:46:24,029
of saying it when I was younger we don't
want to explain things you just say well

548
00:46:24,030 --> 00:46:31,369
its security dude do it right so this
will help you explain and educate your

549
00:46:31,369 --> 00:46:39,510
your team I am at Link State on Twitter
there's also a safe for work I hesitate

550
00:46:39,510 --> 00:46:46,090
to call it safe for work but a lot less
my random musings Chris on security at

551
00:46:46,090 --> 00:46:51,020
10 10 probably pushing talks out to some
of the work that I've been doing the

552
00:46:51,020 --> 00:46:55,859
other one is the best way to get hold me
or you can email me cJH at nextag.com

553
00:46:55,859 --> 00:47:04,400
and I usually get back to emails within
a week or show so few days last part

554
00:47:04,400 --> 00:47:27,340
questions yeah so good

555
00:47:29,050 --> 00:47:48,910
yeah yeah that's that's just haven't
really looked into yeah I know doctor

556
00:47:48,910 --> 00:47:53,290
has most of their offices out in
california all right now but yeah i i i

557
00:47:53,290 --> 00:47:56,590
really like I really like what I see
none of them I just haven't evaluated

558
00:47:56,590 --> 00:48:00,940
anything else yet as this project is
tailing off in this is the last time

559
00:48:00,940 --> 00:48:04,460
I'll probably be giving us talk it's
probably not going to make it in there

560
00:48:04,460 --> 00:48:06,050
but I will look into that

561
00:48:06,050 --> 00:48:28,370
yeah that's not that's not confusing
thing about it is is that that with a

562
00:48:28,370 --> 00:48:34,100
lot of code coming out of get home no
people pouring stuff down there

563
00:48:34,100 --> 00:48:39,870
utilizing its kind of become ingrained
in the DevOps title to use repositories

564
00:48:39,870 --> 00:48:46,440
like that to use public repos so because
if hat that mentality again we don't

565
00:48:46,440 --> 00:48:53,220
want to say you know we don't want to
break their processes in order to to

566
00:48:53,220 --> 00:48:58,299
integrate security and it's not
difficult but we would break a process

567
00:48:58,300 --> 00:49:03,890
for them in the fact that we want to
just integrate so you know what I love

568
00:49:03,890 --> 00:49:08,529
the way that we ran it is hate tell me
what which ones you want to use it

569
00:49:08,530 --> 00:49:12,300
realistically there's a meat or three
right tell me which ones you want to use

570
00:49:12,300 --> 00:49:16,670
and I'll say okay her know if you are
using new one again will the pre-ordered

571
00:49:16,670 --> 00:49:19,670
a container satisfy requirements

572
00:49:20,849 --> 00:49:30,519
yeah yeah sure to pick from so that they
can say I i say you're good with this

573
00:49:30,519 --> 00:49:36,238
one until this date right so if they
were in four weeks prints or two weeks

574
00:49:36,239 --> 00:49:40,299
grants I can predict that i'm gonna need
to pre checking container for six weeks

575
00:49:40,299 --> 00:49:45,489
so are two weeks and two weeks and dad
two weeks and test issue and to you know

576
00:49:45,489 --> 00:49:50,289
two weeks and product next year old
center for weeks however it might maybe

577
00:49:50,289 --> 00:49:54,479
I can predict how long I need to say
this is good for now there's going to be

578
00:49:54,479 --> 00:50:00,419
situations where something like brutal
drops right and we're gonna have to say

579
00:50:00,420 --> 00:50:04,759
hey remember how I told you this process
and I'm gonna integrate with your

580
00:50:04,759 --> 00:50:05,930
process

581
00:50:05,930 --> 00:50:10,200
yeah well this is really bad so we're
gonna have to ship something new or ran

582
00:50:10,200 --> 00:50:14,569
out the patch on the fly here because
we've got a problem and I'm going to

583
00:50:14,569 --> 00:50:18,609
focus really hard and trying to
compensating control in that room in

584
00:50:18,609 --> 00:50:22,328
that case where I'm outside of the
doctor containers in order to make sure

585
00:50:22,329 --> 00:50:27,460
that I'm getting some kind of security
put onto that that vulnerability so you

586
00:50:27,460 --> 00:50:32,940
know and DSL vulnerabilities yes I sell
off loading underwater blast was really

587
00:50:32,940 --> 00:50:38,739
hopeful is like a passion for the most
part i'm ok nur right until I ship new

588
00:50:38,739 --> 00:50:55,910
code that's built on a new version I got
that two-week stopgap control so you

589
00:50:55,910 --> 00:50:59,788
know we had really good reception or
miss the damn ops team felt involved

590
00:50:59,789 --> 00:51:03,529
they're really feeling a lot more calm
now that we've we've integrated some

591
00:51:03,529 --> 00:51:07,319
twist lock functionality we haven't gone
we haven't had them start using the

592
00:51:07,319 --> 00:51:10,200
entire stack yet we just want to give
our ability scanning for trying to

593
00:51:10,200 --> 00:51:14,549
trying to get body right so we thought
if I double in the process of bone

594
00:51:14,549 --> 00:51:15,779
scanning

595
00:51:15,779 --> 00:51:20,450
there in a start asking me about the
other functionalities right so it's been

596
00:51:20,450 --> 00:51:23,879
really good it they've actually been
catching stuff I've been catching

597
00:51:23,880 --> 00:51:29,219
they've been catching stuff in there
that we get we get in the Nexus report

598
00:51:29,219 --> 00:51:30,720
the next morning we say

599
00:51:30,720 --> 00:51:38,879
hey can you purchase and I gotta last
night so that's pretty cool right from

600
00:51:38,880 --> 00:51:44,130
my perspective you know that container
is still in doubt right they're patching

601
00:51:44,130 --> 00:51:52,490
in containers you know I can't tell you
the last time I saw patched in death

602
00:51:52,490 --> 00:52:07,509
before so anybody else questions the
process is very very similar to catching

603
00:52:07,510 --> 00:52:10,630
a Linux server not respect really it's

604
00:52:11,359 --> 00:52:18,819
get whatever you would be running in
your version of your favorite Linux you

605
00:52:18,820 --> 00:52:22,690
can build you can build on top of it
made a difference in the frozen state I

606
00:52:22,690 --> 00:52:27,630
sometimes I wish they would permit
control perspective from hey this is

607
00:52:27,630 --> 00:52:31,480
what I said it's ok I get the year two
versions beyond that there could be

608
00:52:31,480 --> 00:52:36,050
potential vulnerabilities two versions
beyond what I said was ok we don't see

609
00:52:36,050 --> 00:52:39,910
vulnerabilities exposed new ones exposed
in new products

610
00:52:39,910 --> 00:52:43,299
lot but there's a potential there for
somebody to miss configure something in

611
00:52:43,300 --> 00:52:47,830
a new version right so they're not a
frozen state I wish sometimes they were

612
00:52:47,830 --> 00:52:51,240
but from the perspective of being able
to patch on the fly

613
00:52:51,240 --> 00:53:07,259
that's what it's really helpful so
anybody else get a lot of that stuff was

614
00:53:07,260 --> 00:53:13,150
integrated into QA process I will you
know because the containers can be

615
00:53:13,150 --> 00:53:19,230
closed pretty easily I've recommended
that if I can get compensated control of

616
00:53:19,230 --> 00:53:23,980
place that i dont patcher production
container just right out right out of

617
00:53:23,980 --> 00:53:29,300
the gate all showered gonna production
container ship it back to them ship it

618
00:53:29,300 --> 00:53:32,700
to its security environment Patchett
send you a real quick to terrify

619
00:53:32,700 --> 00:53:36,069
functionality and shipped back out as
well that's why I really liked it with

620
00:53:36,070 --> 00:53:41,200
these kind of containers focus our focus
on compensating controls and how I can

621
00:53:41,200 --> 00:53:45,669
better mitigate the vulnerability center
might have any prerequisites and I have

622
00:53:45,670 --> 00:53:53,359
running for the software that I have
running and I can offload a lot of that

623
00:53:53,359 --> 00:53:58,480
outside of the containers so that's
that's part of a part of my analyzed

624
00:53:58,480 --> 00:54:03,800
phases you know if if I have certain
things like FCPS or something like that

625
00:54:03,800 --> 00:54:10,430
or if I had a specific software packages
just as a really just as a really run

626
00:54:10,430 --> 00:54:13,710
our newest the newest versions probably
don't want to put a doctor to begin with

627
00:54:13,710 --> 00:54:18,190
because I'm gonna catch a lot of
functionality testing so yeah we see a

628
00:54:18,190 --> 00:54:23,210
lot of breaking story it is what it is
we still see patches breaking so ashamed

629
00:54:23,210 --> 00:54:56,790
that preacher president I didn't I saw a
writer were quote with the darker

630
00:54:56,790 --> 00:55:01,240
container in a motor boating scanning
and doctor right so once I PreCheck

631
00:55:01,240 --> 00:55:05,098
containers I I was able to step back and
not have to protect things in the

632
00:55:05,099 --> 00:55:08,880
beginning because I said ok you're good
with these until the state now we knew

633
00:55:08,880 --> 00:55:13,390
that 3 check at this date or a roll out
another I'll tell you to go to this

634
00:55:13,390 --> 00:55:18,520
newer version right so that for me I
can't step away from having to build a

635
00:55:18,520 --> 00:55:23,250
new 300 out right so I'm letting them
handle that process that's now not

636
00:55:23,250 --> 00:55:29,880
automated but I don't have to touch a
container in soccer club once for me to

637
00:55:29,880 --> 00:55:33,660
be comfortable with it right I only had
to touch it once so they could use it

638
00:55:33,660 --> 00:55:38,348
fifty sorry I want to touch your watch
list are automated but it's worth fishin

639
00:55:38,349 --> 00:55:43,630
developer ability scanning has been
automated checking those checking

640
00:55:43,630 --> 00:55:44,800
everything on the network

641
00:55:44,800 --> 00:55:47,800
an automated fashion and in a certain
time frame

642
00:55:48,310 --> 00:55:53,529
shipping is obviously not automated
because I need to have that two key

643
00:55:53,530 --> 00:55:58,380
system chip code right to people need to
say i'm ok to ship this report ship it

644
00:55:58,380 --> 00:56:07,930
so not a lot of animation but a lot more
a lot more efficiency I guess in the

645
00:56:07,930 --> 00:56:10,149
process and that you know

646
00:56:10,150 --> 00:56:14,360
labeling something to be a little bit
more outdoor enabling them to work in a

647
00:56:14,360 --> 00:56:22,080
way that doesn't work yet still getting
our security requirements in place to

648
00:56:22,080 --> 00:56:42,350
make sure we didn't know what we had is
that they can grab him out of the hub

649
00:56:42,350 --> 00:56:46,430
it's almost like a git repository for
containers what they did is they said

650
00:56:46,430 --> 00:56:53,259
minute a name but a container name that
they wanted me to use it as a as an idea

651
00:56:53,260 --> 00:56:57,460
number one uses this meets all
requirements can you check it out for me

652
00:56:57,460 --> 00:57:04,370
they said we we we pop it into a test
environment run an ASP vulnerability

653
00:57:04,370 --> 00:57:05,370
scan against it

654
00:57:05,370 --> 00:57:08,450
make sure it's ok make sure it meets our
requirements

655
00:57:08,450 --> 00:57:13,399
you know that we're meeting our
established baseline score versions are

656
00:57:13,400 --> 00:57:18,120
prerequisites and everything else that
we say yay or nay they are right this

657
00:57:18,120 --> 00:57:21,220
one is now protect your allowed to use
this for this amount of time

658
00:57:21,220 --> 00:57:27,540
grab it as much as you want I do that
that dr. hub but this one is ok so it

659
00:57:27,540 --> 00:57:31,480
integrates into the way that they want
to work in a way that we can feel

660
00:57:31,480 --> 00:57:34,480
comfortable with it

661
00:57:38,340 --> 00:57:46,170
typically what we can use there will be
something that hundreds of containers

662
00:57:47,080 --> 00:57:52,040
typically will find one that's ok I
honestly we had one kick back to help

663
00:57:52,040 --> 00:58:00,850
dad wants to Hartley still right out of
the box I got pop right oh ok well you

664
00:58:00,850 --> 00:58:05,620
know that that was just a little bit
smaller container I can usually keep

665
00:58:05,620 --> 00:58:09,240
rechecked I was just trying to save you
know fifty mega disk space and went

666
00:58:09,240 --> 00:58:14,939
fifteen minute we got a 48 terabytes and
you wanna say 50 mega disk space so you

667
00:58:14,940 --> 00:58:17,590
know it was it was one of those funny
things like you would like to use this

668
00:58:17,590 --> 00:58:23,730
but there was a really really good
business case for anyways what

669
00:58:23,730 --> 00:58:27,600
rechecking public work rechecking public
images because that's how you know a lot

670
00:58:27,600 --> 00:58:30,890
of the stuff at the desert grabbing
grabbing coach will get home they're

671
00:58:30,890 --> 00:58:34,830
grabbing little code snippets right
there they're used to searching for

672
00:58:34,830 --> 00:58:38,460
things that are pre-built for them so
they can short-cut having built

673
00:58:38,460 --> 00:58:42,510
everything custom right and that's what
we're trying to enable from a security

674
00:58:42,510 --> 00:58:47,600
perspective is we're gonna say hey I
love that let me help you figure out

675
00:58:47,600 --> 00:58:52,259
which ones are to anybody else

676
00:59:23,740 --> 01:00:35,988
pulled down and yeah yeah yeah yeah
absolutely no its not your codes broke

677
01:00:35,989 --> 01:00:40,759
no its firewall no I let me look because
I I made that comment earlier about how

678
01:00:40,759 --> 01:00:43,970
do I i spent so much time trying to
prove it wasn't the firewall and I

679
01:00:43,970 --> 01:00:48,140
completely missed the fact that it was
the firewall it was I had misconfigured

680
01:00:48,140 --> 01:00:52,239
and empower see it's entirely possible
however I looked nobody had been on the

681
01:00:52,239 --> 01:00:57,920
firewall for weeks I've seen some times
where I D S updates can cause some

682
01:00:57,920 --> 01:01:01,829
wackiness but all of a sudden I got the
same call for five to play somewhere in

683
01:01:01,829 --> 01:01:06,589
the same problem in prime locations and
it turned out that they had grabbed a

684
01:01:06,589 --> 01:01:07,940
package it's pretty

685
01:01:07,940 --> 01:01:15,840
pretty common so it was it was
surprising to the Debs when I came back

686
01:01:15,840 --> 01:01:22,450
and said 30 percent of those images in
the doctor have our abilities serious or

687
01:01:22,450 --> 01:01:31,779
abilities like CBS s as if senator above
really like here i mean it's not it's

688
01:01:31,780 --> 01:01:35,570
not a secure platform will begin with
and that was like oh well you know we

689
01:01:35,570 --> 01:01:42,370
have and it brought up the be the same
discussion and we came to a conclusion

690
01:01:42,370 --> 01:01:47,250
that we can do a pre check we will be
much more successful in the long run in

691
01:01:47,250 --> 01:01:51,080
integrating so that's that is very much
we're not that discussion came from

692
01:01:51,080 --> 01:01:56,960
anybody else think we're out of time
they they just came into disowning for

693
01:01:56,960 --> 01:01:57,460
air power

