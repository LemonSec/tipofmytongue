1
00:00:00,000 --> 00:00:03,760
appreciate that but i wanna talk is put
a sock in it

2
00:00:03,760 --> 00:00:08,670
understanding attacking Android sockets
so my name is Jake the letter I'm a

3
00:00:08,670 --> 00:00:12,320
senior consultant mandy and I work out
of its San Francisco office previously

4
00:00:12,320 --> 00:00:18,020
worked in the New York office mostly
focus on red team activities like Chris

5
00:00:18,020 --> 00:00:21,560
and Avenue spoke earlier but also
focused a lot of my time my mobile

6
00:00:21,560 --> 00:00:27,689
research I for some reason I like mobile
security it's a little bit cut off

7
00:00:27,689 --> 00:00:30,820
that's a problem and I can explain
things

8
00:00:30,820 --> 00:00:35,950
Genda for the talk today I'm gonna start
to talk about sockets anybody here done

9
00:00:35,950 --> 00:00:40,610
socket programming in any sort of
language people this is not going to be

10
00:00:40,610 --> 00:00:44,030
talk talk about soccer programming
language will have some basic

11
00:00:44,030 --> 00:00:47,960
information but you can take entire
classes on soccer programming what I

12
00:00:47,960 --> 00:00:50,610
want to show you where they are with
their use for give you some of the

13
00:00:50,610 --> 00:00:53,600
basics and you can do the rest the
research this is a great resources

14
00:00:53,600 --> 00:00:58,460
online that are probably better than
what I have here next on talk about ITC

15
00:00:58,460 --> 00:01:02,850
inter-process communication on Android
how sockets kind of fit into that

16
00:01:02,850 --> 00:01:07,250
picture with these two out of the way
these are mostly technical sections will

17
00:01:07,250 --> 00:01:11,580
talk about how you can actually attack
sockets on the Android operating system

18
00:01:11,580 --> 00:01:16,939
and there should be plenty of time for
questions at the end if anybody has so

19
00:01:16,939 --> 00:01:19,908
let's start by answering what is

20
00:01:19,909 --> 00:01:24,380
sites are everywhere every connection in
a community socket there's a lot of

21
00:01:24,380 --> 00:01:30,570
connections that happened locally their
sockets everywhere at a very basic level

22
00:01:30,570 --> 00:01:35,949
a soccer as a way to perform ITC like I
said this is both across the network are

23
00:01:35,950 --> 00:01:38,950
just locally between processes between
sections of a computer

24
00:01:40,920 --> 00:01:47,600
why do we care though many reasons why
we should care one sockets are used

25
00:01:47,600 --> 00:01:51,289
extensively by the Android operating
system not so much by applications by

26
00:01:51,290 --> 00:01:57,000
the operating system itself to do
critical operations if anyone see me

27
00:01:57,000 --> 00:02:01,330
talk in the past I really like to pick
on the IOM's things are Samsung LG

28
00:02:01,330 --> 00:02:05,350
whatever these guys just don't seem to
do things correctly and this is the

29
00:02:05,350 --> 00:02:09,470
reason why phones are rude at all times
because of the IM's every once in a

30
00:02:09,470 --> 00:02:13,910
while will be a really cool Google bug
and like stage fright it's also but a

31
00:02:13,910 --> 00:02:17,620
lot of times these phones are routed
because of the IOM's so I'll be picking

32
00:02:17,620 --> 00:02:24,190
on them I have just a few examples here
that are related to soccer type other

33
00:02:24,190 --> 00:02:27,500
ones that I unfortunately can't put on
here because they're done on various

34
00:02:27,500 --> 00:02:30,989
assessments that I've done their work
and I don't lose my job I can talk a

35
00:02:30,989 --> 00:02:34,700
little bit about then what we found some
high-level things now the first one I

36
00:02:34,700 --> 00:02:40,130
have a list here is from 2011 ok it's a
little bit old but in 2011 devolved to

37
00:02:40,130 --> 00:02:45,700
process the volume came in on Android
listen to her call after network sockets

38
00:02:45,700 --> 00:02:48,690
already talked about these and a lot
more detail but was listening for

39
00:02:48,690 --> 00:02:52,200
connections and basically it was a way
for the kernel to tell a user space

40
00:02:52,200 --> 00:02:56,548
processes running as root that I Drive
had been plugged in September 2nd St

41
00:02:56,549 --> 00:02:57,739
card in your phone

42
00:02:57,739 --> 00:03:00,920
the kernel tells all the drivers
amounted here's where it should mount it

43
00:03:00,920 --> 00:03:05,608
was fortunately voted invalidate the
colonel was talking to it on the socket

44
00:03:05,609 --> 00:03:09,470
and anyone to talk to the faulty process
which meant that you could simulate this

45
00:03:09,470 --> 00:03:14,120
and basically mountain arbitrary drive
as whatever perimeter she'd like Android

46
00:03:14,120 --> 00:03:18,930
phone that was called ginger break up
the numbers weak sauce came out a couple

47
00:03:18,930 --> 00:03:23,720
of years ago this was a UNIX Pesach
again we'll talk about the use that was

48
00:03:23,720 --> 00:03:29,840
able to root variety of HTC phones this
was a socket listening that performed

49
00:03:29,840 --> 00:03:34,780
also the kernel it was a ridiculous
component IDC I did that basically

50
00:03:34,780 --> 00:03:38,380
allows you to copy files as the colonel
I have no idea why you'd want to do that

51
00:03:38,380 --> 00:03:40,690
it did a whole bunch of other things as
well

52
00:03:40,690 --> 00:03:45,450
another example of why sockets him too
bad the list goes on and on the photo

53
00:03:45,450 --> 00:03:51,440
broader sake was also used in crafting
an LG devices through them the init run

54
00:03:51,440 --> 00:03:56,010
it I think was on samsung and like I
said the list goes on and on

55
00:03:56,010 --> 00:03:59,510
there's a really great presentation
called practical and exploitation if you

56
00:03:59,510 --> 00:04:03,870
just google that strength you know get a
presentation that goes through a lot of

57
00:04:03,870 --> 00:04:08,520
these in more detail some of the things
I've done personally that are not listed

58
00:04:08,520 --> 00:04:13,100
on here in my experience I've used
socket several times through my own

59
00:04:13,100 --> 00:04:17,709
devices this is either using
surprisingly TCP sockets listening on

60
00:04:17,709 --> 00:04:22,150
android devices as well as UNIX sockets
and I have some examples of high level

61
00:04:22,150 --> 00:04:28,330
that I can share a taxi so it's ok so we
wanted to use a socket we could use a

62
00:04:28,330 --> 00:04:30,849
variety of different programming
languages I'm not gonna talk about the

63
00:04:30,850 --> 00:04:33,870
models free choice but they're there and
you can do it from pretty much anywhere

64
00:04:33,870 --> 00:04:37,910
you'd like it doesn't matter what
language you're using its always gonna

65
00:04:37,910 --> 00:04:42,490
lead to a system call 02 system calls
are we care about their included in this

66
00:04:42,490 --> 00:04:46,340
particular library you actually cared
and let's talk about a few of them in a

67
00:04:46,340 --> 00:04:49,679
little bit of detail will talk about the
server-side first we'll talk with a

68
00:04:49,680 --> 00:04:53,270
client and how to communicate data I'm
not gonna put up examples appear with

69
00:04:53,270 --> 00:04:58,680
the argument systems gonna talk a little
bit about what their use for your server

70
00:04:58,680 --> 00:05:02,230
and you want to listen on a socket but
first call you need to make is the

71
00:05:02,230 --> 00:05:07,440
socket to some call this is gonna return
file descriptor is on Linux everything

72
00:05:07,440 --> 00:05:12,419
as a file right internal files with her
but it takes three key arguments on the

73
00:05:12,419 --> 00:05:15,419
reason I have these losses are very
important in determining what type of

74
00:05:15,419 --> 00:05:20,039
site here and use the domain the type
and the protocol and talk about each of

75
00:05:20,040 --> 00:05:23,080
those in the next few slight so much
talk about now

76
00:05:23,080 --> 00:05:27,370
next once you trade your file descriptor
gonna buying this file descriptor to

77
00:05:27,370 --> 00:05:31,240
something and something really depends
on what type and family of Psychiatry

78
00:05:31,240 --> 00:05:35,610
using for example if you using a high
net soccer you're gonna buy it to a port

79
00:05:35,610 --> 00:05:39,830
IP address but if using a Unix socket
not gonna buy into that unifying to

80
00:05:39,830 --> 00:05:41,630
filename

81
00:05:41,630 --> 00:05:46,790
finding something to a file object next
gonna listen for connections should I

82
00:05:46,790 --> 00:05:50,990
tell the operating system that you want
you accept connect up type listen to

83
00:05:50,990 --> 00:05:55,030
connections on this particular file
descriptor by calling the listener

84
00:05:55,030 --> 00:06:00,010
function finally on service i'd you
gonna call the except system call and

85
00:06:00,010 --> 00:06:03,400
this is a blocking system call which
will halt execution until someone

86
00:06:03,400 --> 00:06:07,700
actually connects to you from here you
can return your own client file

87
00:06:07,700 --> 00:06:13,169
descriptor which can then be used to
exchange data on the client side it

88
00:06:13,169 --> 00:06:16,630
looks very similar to start but doesn't
follow through

89
00:06:16,630 --> 00:06:20,310
like the server side would start off by
calling socket providing the same types

90
00:06:20,310 --> 00:06:26,110
of arguments again the domain type and
protocol also bind call which I said

91
00:06:26,110 --> 00:06:31,800
match the file descriptor to something
and then this case we call connect and

92
00:06:31,800 --> 00:06:34,780
in some instances you don't actually
have to call conecto

93
00:06:34,780 --> 00:06:38,909
examples that but where is good then
telling it that I'm this file descriptor

94
00:06:38,910 --> 00:06:42,630
I want to actually reach out and connect
to the other file descriptor which could

95
00:06:42,630 --> 00:06:49,510
be across the network on the same system
somewhere else to actually send data

96
00:06:49,510 --> 00:06:51,870
between them there's a variety of
different system calls he's here

97
00:06:51,870 --> 00:06:55,849
depending on that the family and the
protocol that you can use what's kind of

98
00:06:55,849 --> 00:06:59,450
interesting is what I find this
interesting that you can actually called

99
00:06:59,450 --> 00:07:03,719
read and write on sockets because
everything is a file you can read and

100
00:07:03,720 --> 00:07:07,160
write files on Linux you can also call
reading right on socket objects

101
00:07:07,160 --> 00:07:11,190
I don't know why you would you probably
use something like sand or send message

102
00:07:11,190 --> 00:07:17,120
which actually handles more than
capitulation better for you so it's like

103
00:07:17,120 --> 00:07:20,640
what the domains this is the first
argument to the soccer call and tell us

104
00:07:20,640 --> 00:07:25,450
basically the call to John Rowe of
sockets you want to use have three

105
00:07:25,450 --> 00:07:28,400
listed here there's a whole bunch of
them maintained by the kernel in this

106
00:07:28,400 --> 00:07:32,250
file if you for some reason like running
kernel source but there's a whole bunch

107
00:07:32,250 --> 00:07:36,510
more that you could use these are the
three I guess you could count for by

108
00:07:36,510 --> 00:07:44,370
calling fine at 613 that I see the most
frequently on android devices were gonna

109
00:07:44,370 --> 00:07:48,790
go through them in a couple slides types
this is the second field in that first

110
00:07:48,790 --> 00:07:52,350
soccer call and if it were gonna call
the domain the John wrote this is kind

111
00:07:52,350 --> 00:07:56,860
of like the subgenre or the
characteristics of that particular genre

112
00:07:56,860 --> 00:08:02,030
began maintained by the kernel and some
file that nobody cares about but there

113
00:08:02,030 --> 00:08:05,859
there these are interchangeable with
depending on what domain you want to use

114
00:08:05,860 --> 00:08:11,110
socks stream this is basically
equivalent to TCP this is reliable

115
00:08:11,110 --> 00:08:16,640
connection this is a sequential 73 order
for you but doesn't it doesn't really

116
00:08:16,640 --> 00:08:21,840
mean TCP it's just a way to describe the
connection will subside diagram which is

117
00:08:21,840 --> 00:08:24,299
basically UDP we don't have any of that

118
00:08:24,300 --> 00:08:30,040
up ordering a connection stuff that we
have for extreme and then there's plenty

119
00:08:30,040 --> 00:08:34,599
more I'm not gonna talk too much about
set packet but it's kinda similar to

120
00:08:34,599 --> 00:08:39,190
stream but has fixed lengths and our
soccer all which you're kind of on your

121
00:08:39,190 --> 00:08:43,530
own doesn't like any header information
for you if you've ever used to like and

122
00:08:43,530 --> 00:08:47,079
map the public can use raw sockets
they're very quick you can write your

123
00:08:47,080 --> 00:08:50,090
own headers you can build things much
faster and see that if you actually used

124
00:08:50,090 --> 00:08:52,370
the stream and

125
00:08:52,370 --> 00:09:00,390
again I guess there's plenty more that
I'm glossing over ok so I had this

126
00:09:00,390 --> 00:09:05,319
little example here in Python hopefully
guys can sit in the back I'm gonna walk

127
00:09:05,320 --> 00:09:10,250
through some very basic samples for
using clients in Python it's very easy

128
00:09:10,250 --> 00:09:14,900
it's maybe six or seven lines in see
it's probably thirty to forty and I

129
00:09:14,900 --> 00:09:19,850
couldn't sit on the site so I thought it
is so if I know an affine at six when

130
00:09:19,850 --> 00:09:24,279
somebody says create a socket on this
web server I can almost bet 99% time

131
00:09:24,279 --> 00:09:27,420
they're talking about these sockets this
is what we see most frequently on the

132
00:09:27,420 --> 00:09:31,579
Internet these are designed to traverse
networks so there's a whole bunch of

133
00:09:31,580 --> 00:09:34,570
capabilities built into the protocols
actually allow you to move packets

134
00:09:34,570 --> 00:09:40,520
across the network key takeaways here
are the types that accepts and also

135
00:09:40,520 --> 00:09:47,029
defined arguments so in this case find
is gonna look for an IP address already

136
00:09:47,029 --> 00:09:50,689
kind of mentioned that but we want to
find something here fortunately in

137
00:09:50,690 --> 00:09:54,230
Python there is no binding just combined
with Kinect here I'm giving an IP

138
00:09:54,230 --> 00:09:58,350
address and port and then I'm using that
senate function to send a message to it

139
00:09:58,350 --> 00:10:14,260
in this case the types that we most
frequent question like that it is a

140
00:10:14,260 --> 00:10:22,010
place on earth and sea as well so some
of the types of your gonna see most

141
00:10:22,010 --> 00:10:26,529
frequently here are so extreme as well
as sake Graham this is best left alone

142
00:10:26,529 --> 00:10:33,839
to TCP and UDP for F units they never
work with UNIX sockets ok we got in

143
00:10:33,839 --> 00:10:34,260
front

144
00:10:34,260 --> 00:10:39,750
UNIX sockets also shorten as you yes
these are but we'll see commonly between

145
00:10:39,750 --> 00:10:44,320
processes on a Linux system if I had one
process that when you talk to another

146
00:10:44,320 --> 00:10:48,020
one is a variety of ways you could do it
though domain sockets are just one of

147
00:10:48,020 --> 00:10:53,100
them there's no networking capabilities
built into UNIX sockets so you wouldn't

148
00:10:53,100 --> 00:10:56,070
use it to go across the network which
means that these sockets are much more

149
00:10:56,070 --> 00:10:59,070
lightweight than the inet counterparts

150
00:11:00,019 --> 00:11:03,720
in this case the bind call will talk
about actually accept filename of the

151
00:11:03,720 --> 00:11:08,970
socket type or in abstract and I'll talk
about those are second abstract names

152
00:11:08,970 --> 00:11:10,069
are always going to start with

153
00:11:10,069 --> 00:11:13,729
annulled by so keep that in mind when
you get your seeing some programming you

154
00:11:13,730 --> 00:11:19,170
see that weird you know this little guy
here that's an abstract Unix socket the

155
00:11:19,170 --> 00:11:24,209
tapes here a similar to also going to
see socks stream sake Graham and you can

156
00:11:24,209 --> 00:11:30,549
you say that package if you like as well
alright just two quick examples here

157
00:11:30,549 --> 00:11:34,959
very similar forces once cut off Alabama
side but they're pretty much the same

158
00:11:34,959 --> 00:11:38,609
thing known as I had a few nicks and
socks dream when I am I getting my

159
00:11:38,610 --> 00:11:43,449
socket this one over here I'm actually
giving it a file so death socket silly

160
00:11:43,449 --> 00:11:48,549
and this one I just have that nobody and
then a string so they're both valid if

161
00:11:48,549 --> 00:11:56,470
these sockets existed and this is how
you could send messages to them right

162
00:11:56,470 --> 00:12:00,819
the last one is the eighth netlink
socket talk about so network sockets are

163
00:12:00,819 --> 00:12:03,899
probably most complicated of these I
have up here

164
00:12:03,899 --> 00:12:09,079
their historically used to do networking
between the kernel and user space but it

165
00:12:09,079 --> 00:12:12,819
doesn't have to be that way you can use
it you could add your own family and

166
00:12:12,819 --> 00:12:16,910
create our own protocol around and use
that on a device for assessment general

167
00:12:18,470 --> 00:12:22,740
primarily like I said used to talk from
the kernel to some place in user space

168
00:12:22,740 --> 00:12:26,600
this is that faulty vulnerability of
hiking on Android where a user space

169
00:12:26,600 --> 00:12:30,610
processes needed to hear messages from
the colonel and that's how he was able

170
00:12:30,610 --> 00:12:34,759
to push those messages through using
network sockets the bind call here

171
00:12:34,759 --> 00:12:40,790
except the process I T and the net when
group so the net when group is sort of

172
00:12:40,790 --> 00:12:46,980
kinda like the type of netlink socket
you want to use this case I added my own

173
00:12:46,980 --> 00:12:50,990
but other times you'll see like netlink
underscore firewall network underscore

174
00:12:50,990 --> 00:12:56,209
route now underscores something this
these are all maintained in that colonel

175
00:12:56,209 --> 00:13:02,868
file here this examples really can't
ride because with knowing sockets you

176
00:13:02,869 --> 00:13:06,309
get to build your own header and you
have to file the specifications that

177
00:13:06,309 --> 00:13:09,319
particular family here our group so

178
00:13:09,939 --> 00:13:13,079
this one i think im kinda reconstructed
in Python for you but you probably have

179
00:13:13,079 --> 00:13:16,529
to do a little more research on your own
text me figure out how to use this

180
00:13:16,529 --> 00:13:22,039
particular site ok now we know what
sockets are we can kind of talk about

181
00:13:22,039 --> 00:13:31,409
how we can start looking at these on
android devices so and rate is a hilltop

182
00:13:31,409 --> 00:13:36,139
Linux so we can use all of the IPC
mechanisms are provided by Linux we can

183
00:13:36,139 --> 00:13:39,939
use pipes we can use my articles we can
you system call shared memory all those

184
00:13:39,939 --> 00:13:45,659
things still apply on internet sites and
I see a lot of sockets used on Android

185
00:13:45,659 --> 00:13:48,339
those are obviously very important as
well

186
00:13:48,339 --> 00:13:53,039
Android does have shared memory that's
compassion on Android but I do see a lot

187
00:13:53,039 --> 00:13:58,220
of socket set using some kind of
focusing on that if you're running an

188
00:13:58,220 --> 00:14:01,329
application on Android you're probably
not going to use any of those in Sac

189
00:14:01,329 --> 00:14:05,519
you're probably going to use the binder
class in conjunction with intense to

190
00:14:05,519 --> 00:14:10,709
send messages that way it's so much
easier to use in job as well as she and

191
00:14:10,709 --> 00:14:15,159
I would say nine members anytime any
place tour is going to use that

192
00:14:15,159 --> 00:14:21,099
framework it doesn't have to be though
especially a lot of applications I come

193
00:14:21,099 --> 00:14:26,199
on android devices that are designed to
be background processes but part of the

194
00:14:26,199 --> 00:14:35,039
OS those ones might be using the socket
set inscribing so let's I 199

195
00:14:35,039 --> 00:14:40,129
applications other use cases of
describing so far aft UNIX sockets as I

196
00:14:40,129 --> 00:14:42,509
mentioned these have been used
historically to prove many devices

197
00:14:42,509 --> 00:14:49,659
they're mostly for application to native
Damon communications so needed diamonds

198
00:14:49,659 --> 00:14:52,119
are usually see programs running on
Android

199
00:14:52,119 --> 00:14:56,220
others quite a few of them if you look
in the death of socket directory those

200
00:14:56,220 --> 00:15:00,619
are all the UNIX sockets that probably
native diamonds but they could be

201
00:15:00,619 --> 00:15:09,349
mounted anywhere really any socket file
could be your UNIX your native dance was

202
00:15:09,349 --> 00:15:13,999
the one that I know particularly that's
kind of interesting is the net D Damon

203
00:15:13,999 --> 00:15:18,299
this is a day that handles during
routing updates for your device that

204
00:15:18,299 --> 00:15:22,639
wasn't on death socket net D and its
restricted on who can access it by the

205
00:15:22,639 --> 00:15:25,809
Linux file permission so you can just
connect that sort something crazy

206
00:15:25,809 --> 00:15:30,209
messages but there's been a bunch of
vulnerabilities on as part of a hundred

207
00:15:30,209 --> 00:15:33,649
we could do command injection suffer
through that since it is basically

208
00:15:33,649 --> 00:15:39,779
executing writing comments were you for
F netlink sockets is almost like I said

209
00:15:39,779 --> 00:15:40,970
from native Damon's

210
00:15:40,970 --> 00:15:45,269
to the kernel usually don't see an
Android application using network

211
00:15:45,269 --> 00:15:49,100
sockets but I guess there's no reason
why you couldn't have a native component

212
00:15:49,100 --> 00:15:52,629
of a job application to actually
communicate with the girl if you have

213
00:15:52,629 --> 00:15:59,720
trouble just 2 I'm like I said the
example is that all the process for the

214
00:15:59,720 --> 00:16:04,419
last one I said is the a finite sockets
and to be fair I don't really know why

215
00:16:04,419 --> 00:16:08,329
you'd want to use these it doesn't
really make much sense to me as to why

216
00:16:08,329 --> 00:16:13,848
you'd want to have a TCP or UDP socket
listening on your phone I can't imagine

217
00:16:13,849 --> 00:16:17,909
why but it still happens and I'll talk
about a few examples of a little bit but

218
00:16:17,909 --> 00:16:20,499
I just don't think there's really a
reason for using these I think

219
00:16:20,499 --> 00:16:40,009
developers should be shunned for using
those right why so you would write web

220
00:16:40,009 --> 00:16:49,139
server on your phone then is not gonna
dangers though what if you're looking to

221
00:16:49,139 --> 00:16:54,209
coffee shop that running I guess that's
the point why I could see like that

222
00:16:54,209 --> 00:17:02,909
example but you could also use that
right reasons but I just don't think

223
00:17:02,909 --> 00:17:06,079
it's a good practice unless you're doing
some other sort of security on top of it

224
00:17:06,079 --> 00:17:10,519
but they like I said it still happens
and it so happens we can properly

225
00:17:11,740 --> 00:17:17,339
so what if you want to start looking for
sockets so if you're on a Linux system

226
00:17:17,339 --> 00:17:22,780
or in our case and write these sockets
are going to be sound and maintained in

227
00:17:22,780 --> 00:17:26,290
the proc net directory another source
file with things and then you can

228
00:17:26,290 --> 00:17:29,899
actually cat and it will give you
information about the sockets that are

229
00:17:29,900 --> 00:17:35,900
connected or listening or whatever state
there in with you cut that file probably

230
00:17:35,900 --> 00:17:39,000
not gonna have a format that's really
good for you to look at is an example of

231
00:17:39,000 --> 00:17:43,270
cattle I think the TCP file just that
the headings don't line up they're not

232
00:17:43,270 --> 00:17:47,650
actually what they look like here it's
just kind of frustrating format so the

233
00:17:47,650 --> 00:17:51,920
next a binary is what uses what the
operation is actually part these out and

234
00:17:51,920 --> 00:17:57,460
makes it much easier for you to
understand but on Android because it's

235
00:17:57,460 --> 00:18:01,410
not meant to be like an administrative
system the netlink of the next a binder

236
00:18:01,410 --> 00:18:05,679
that you have a pretty stripped-down
part of the toolbox binary which is a

237
00:18:05,679 --> 00:18:08,990
stripped down version of busybox which
is already stripped down so you really

238
00:18:08,990 --> 00:18:12,390
don't get the control that you really
want when it comes to parts of these

239
00:18:12,390 --> 00:18:16,410
files so we have a couple options one
you can compile your own debts that he

240
00:18:16,410 --> 00:18:20,230
wanted to but they need to make it work
for whatever device you want to do so

241
00:18:20,230 --> 00:18:25,200
it's gonna kind of thing stopping you
the better option that I think you

242
00:18:25,200 --> 00:18:29,059
should do is to upload the busybox
binary so again this is stripped down a

243
00:18:29,059 --> 00:18:32,860
little bit but it definitely has more
capabilities than the one that's on in

244
00:18:32,860 --> 00:18:38,040
rebuttal all these are already compiled
from busybox like that you can do it w

245
00:18:38,040 --> 00:18:41,540
get one of those pushchair phone and
then you can run let's not get all those

246
00:18:41,540 --> 00:18:50,990
nice formatting here for us here so the
flags that busybox finery supports the

247
00:18:50,990 --> 00:18:53,530
ones I think are most important pretty
here I'm not gonna go through each of

248
00:18:53,530 --> 00:18:57,559
them the ones I think are the most
important are listening ones extra and

249
00:18:57,559 --> 00:19:01,220
the process IDs can come in really handy
when you try to determine who is

250
00:19:01,220 --> 00:19:06,920
actually listening on the sockets
toughest in the back but this is an

251
00:19:06,920 --> 00:19:12,120
example for looking for Afghan assets so
an example command is using the PL eat

252
00:19:12,120 --> 00:19:18,189
ele ta new arguments is gonna print all
listening TCP and UDP sockets on YouTube

253
00:19:18,190 --> 00:19:23,309
this particular example here these are
both relating to that entered dividing

254
00:19:23,309 --> 00:19:28,178
ridge and redefining marriage so in the
last one is just me listening on this

255
00:19:28,179 --> 00:19:32,429
point on port 9999 depending on your
privileges you may or may not see the

256
00:19:32,429 --> 00:19:36,889
PID or the process name when I ran this
one it was on a rooted device that these

257
00:19:36,889 --> 00:19:40,479
are here but if you're using on this
trailer vice you're probably not going

258
00:19:40,480 --> 00:19:47,450
to see those which sucks we'll talk
about how to get around this similar

259
00:19:47,450 --> 00:19:50,700
command here instead of using the teen
you flags being used acts for Unix oh

260
00:19:50,700 --> 00:19:56,700
hell yes you still print the UNIX
sockets the format here the things I

261
00:19:56,700 --> 00:20:01,750
want to make known are if you have a
abstract sockets I mentioned that I want

262
00:20:01,750 --> 00:20:04,919
to know about the beginning it's gonna
have a sign of the beginning here so

263
00:20:04,919 --> 00:20:09,029
there's an application called com Jake
and I think its local soccer were

264
00:20:09,029 --> 00:20:14,879
truncated has a unicycle silly Unix and
we have the psycho which is the core

265
00:20:14,879 --> 00:20:19,080
processor and Android listening on Dev
sockets I got so if you had the

266
00:20:19,080 --> 00:20:22,678
privileges you could connect that socket
and that's how Android spawns new

267
00:20:22,679 --> 00:20:27,539
processes and running applications
totally different take the form of their

268
00:20:27,539 --> 00:20:29,419
ballot with what's going on here

269
00:20:29,419 --> 00:20:36,070
network sockets kind of sad sad panda
hear you then that's a dozen parties

270
00:20:36,070 --> 00:20:39,840
alfre see if the parts that file
yourself the format is kind of

271
00:20:39,840 --> 00:20:43,509
documented there's some things you can
look for online otherwise your gonna be

272
00:20:43,509 --> 00:20:48,340
digging through the kernel source in
various parts of it to determine what

273
00:20:48,340 --> 00:20:54,539
these flights because the the the seals
and there are very helpful but you can

274
00:20:54,539 --> 00:20:57,009
get the information you need to
determine who's listening by actually

275
00:20:57,009 --> 00:20:58,210
part in that pile up

276
00:20:58,210 --> 00:21:01,180
ok

277
00:21:01,180 --> 00:21:05,390
to find the sockets now how do we
connect to the sockets and I provided a

278
00:21:05,390 --> 00:21:08,480
bunch of different message here that you
can use some of them are better for

279
00:21:08,480 --> 00:21:13,010
different types of sockets the first
method is we can use adb forwarding so

280
00:21:13,010 --> 00:21:17,629
as I kind of mention or hinted at ATP's
the Android debug bridge which allows

281
00:21:17,630 --> 00:21:21,410
you to connect your phone with physical
access so if you're doing developing or

282
00:21:21,410 --> 00:21:24,380
whatever and you want to catch your
phone you can use the Android debug

283
00:21:24,380 --> 00:21:28,530
bridge one really cool feature allows
you can actually forward connections

284
00:21:28,530 --> 00:21:31,590
from your local system to the device
which is kind of us talking about the

285
00:21:31,590 --> 00:21:35,870
gentleman front you could forward
connections from my computer to my USB

286
00:21:35,870 --> 00:21:41,060
can I use this because if I want to
write a client for some soccer tonight

287
00:21:41,060 --> 00:21:44,990
fine I don't want to have to use on the
phone and I'll explain why I'd rather

288
00:21:44,990 --> 00:21:48,420
write locally in place on or something
really easy that I could write it and

289
00:21:48,420 --> 00:21:53,320
then just forwarded to the phone that
supports TCP and both types of Unix

290
00:21:53,320 --> 00:21:57,240
socket so yay for that it doesn't
support networking fortunately so all

291
00:21:57,240 --> 00:22:01,300
the different options there you can use
whatever you want to this is that tone

292
00:22:01,300 --> 00:22:12,540
example here so couple slides ago there
was this guy 999999 so I just connected

293
00:22:12,540 --> 00:22:17,200
to that using Telnet and the telnet
server cool but it could be anything

294
00:22:17,200 --> 00:22:21,330
that could return command prompt or
something it's now we're able to connect

295
00:22:21,330 --> 00:22:25,199
to that soccer but notice I'm giving it
my local IP address the host and the

296
00:22:25,200 --> 00:22:30,460
poor and I set up the forwarding there
that's the quickest I think to do this

297
00:22:30,460 --> 00:22:34,470
you can set before really easy and
connect the second method is to compile

298
00:22:34,470 --> 00:22:39,760
and applets ok whenever you're so kind I
suck at its kinda like nuts that I was

299
00:22:39,760 --> 00:22:44,629
outside netcat so it provides the
ability to connect the sockets and even

300
00:22:44,630 --> 00:22:49,350
listen on sockets it's really flexible
it does TCP UDP Unix and a bunch of

301
00:22:49,350 --> 00:22:53,850
other things if you want to use it it's
already precompiled here but it's not

302
00:22:53,850 --> 00:22:57,939
mine so you're on your own if you wanna
know that I've used it so I mean a

303
00:22:57,940 --> 00:23:01,430
compromise are are not so

304
00:23:01,430 --> 00:23:04,830
that's your second option this is maybe
a little bit slower than last one but it

305
00:23:04,830 --> 00:23:09,639
works the same as it did and just the
third one is to create a job application

306
00:23:09,640 --> 00:23:14,470
these classes do exist for you to use
you can use the local socket and local

307
00:23:14,470 --> 00:23:18,020
socket address classes if you want to
deal with UNIX sockets which is what

308
00:23:18,020 --> 00:23:21,230
this images here this is me just
connecting to that silly Unix socket

309
00:23:21,230 --> 00:23:22,430
sending a message

310
00:23:22,430 --> 00:23:27,320
pretty straightforward there is the
native Damon connector class that's not

311
00:23:27,320 --> 00:23:31,340
public doesn't mean you can't use it it
just means that you need to know how to

312
00:23:31,340 --> 00:23:35,010
use it all in import some classes into
the idea so it actually will stop

313
00:23:35,010 --> 00:23:39,940
yelling at you and that's this over here
so you see this year an object with a

314
00:23:39,940 --> 00:23:46,050
call back the name of your UNIX sockets
and other information here that would be

315
00:23:46,050 --> 00:23:49,230
if you wanted to use the native damning
connector

316
00:23:50,330 --> 00:23:54,899
if you want to just use inet sockets
across the network use a socket class

317
00:23:54,900 --> 00:23:59,640
one thing to note here again there's no
nobody here which is a little confusing

318
00:23:59,640 --> 00:24:04,020
that is going to be an abstract Unix
socket there's a flag used to say if you

319
00:24:04,020 --> 00:24:08,090
want to actually be a file in that
constructor to get a look at the

320
00:24:08,090 --> 00:24:11,770
documentation extremism that right in
this right here this is not abstract

321
00:24:11,770 --> 00:24:14,930
this is actually a file and it will
automatically point you to this

322
00:24:14,930 --> 00:24:19,070
directory so when you try to use that
needed them incorrectly on that D it's

323
00:24:19,070 --> 00:24:26,909
going to open up dead socket net and
again no support for networks here the

324
00:24:26,910 --> 00:24:31,080
last option is going to be the slowest
there's no example here but you can

325
00:24:31,080 --> 00:24:35,639
always write a C or C++ program there's
a bunch of advantages here works on

326
00:24:35,640 --> 00:24:40,430
every socket as long as you have the
right cross compiler you can break your

327
00:24:40,430 --> 00:24:46,090
tool upload it it supports the other
ones did in this is going to be when it

328
00:24:46,090 --> 00:24:48,929
comes time to actually write your
exploit or proof of concept actually

329
00:24:48,930 --> 00:24:53,090
connected the sockets sometimes the
Python and Java are gonna cut off what

330
00:24:53,090 --> 00:24:57,040
you need to do especially when you're
done that way but yeah you have the

331
00:24:57,040 --> 00:25:00,040
right kind of that kind of outside the
scope of this

332
00:25:01,770 --> 00:25:04,460
to find sockets we know about the
different types of sockets and we know

333
00:25:04,460 --> 00:25:08,250
how to connect science now we can
actually start looking at some of the

334
00:25:08,250 --> 00:25:12,830
ways we can attack these different
circuits so real quick undergoing to

335
00:25:12,830 --> 00:25:15,689
plug some tools I created here I'm not
gonna spend too much time talking about

336
00:25:15,690 --> 00:25:21,000
these but I will reference them in here
if anyone's interested in some of this

337
00:25:21,000 --> 00:25:25,250
work and likes testing their devices I
recommend checking out my device testing

338
00:25:25,250 --> 00:25:29,620
framework it's in two different proposed
here the framework itself and then all

339
00:25:29,620 --> 00:25:33,790
the content is not a vulnerability
scanner is more of a call on exploration

340
00:25:33,790 --> 00:25:37,879
framework and autumn it's a lot of cool
tasks like collecting data processing it

341
00:25:37,880 --> 00:25:41,930
will process all applications with
database inquiry which is really useful

342
00:25:41,930 --> 00:25:46,400
for understanding what's on your phone
and also has models that help you

343
00:25:46,400 --> 00:25:50,680
understand potential security risks for
example when prisons are used improperly

344
00:25:50,680 --> 00:25:54,740
or missing commissions and stuff like
that again if there is any questions

345
00:25:54,740 --> 00:26:00,570
about that afterwards to see me after I
can help you out so we have the tools to

346
00:26:00,570 --> 00:26:05,860
enable who is listening so there's three
basic areas where we're gonna find

347
00:26:05,860 --> 00:26:06,840
people listening

348
00:26:06,840 --> 00:26:09,830
the first as job applications and I said
that they're probably not going to be

349
00:26:09,830 --> 00:26:12,340
using sockets but you'd be surprised

350
00:26:12,340 --> 00:26:16,149
sockets can be used and for example the
gentleman the front city running a web

351
00:26:16,150 --> 00:26:20,440
server is nothing stopping you from
doing that has its advantages and

352
00:26:20,440 --> 00:26:24,480
disadvantages but they could be done so
we're going to see most likely inet

353
00:26:24,480 --> 00:26:28,630
sockets as well as UNIX sockets the UNIX
sockets we're probably going to see for

354
00:26:28,630 --> 00:26:32,430
applications that are probably part of
the operating system and less so than

355
00:26:32,430 --> 00:26:33,320
absolute

356
00:26:33,320 --> 00:26:39,439
Play Store with native miners I'm gonna
call them Damon's here you can see all

357
00:26:39,440 --> 00:26:43,590
three of them to be honest I've seen all
three of them use each one has its own

358
00:26:43,590 --> 00:26:47,159
vulnerabilities that are associated with
it so we had the most work to do there

359
00:26:47,160 --> 00:26:53,000
finally the kernel try less likely to
see I never unix time most likely gonna

360
00:26:53,000 --> 00:26:54,160
see

361
00:26:54,160 --> 00:26:59,070
sockets there so that like I said it's
the most difficult one of my opinion to

362
00:26:59,070 --> 00:27:03,520
deal with the hardest test so that's all
over the city

363
00:27:04,200 --> 00:27:11,299
so and they have not linked site and I
need example this green side here shows

364
00:27:11,299 --> 00:27:16,600
me running on a test the device I was
testing it doesn't always happen but

365
00:27:16,600 --> 00:27:21,590
look at the sky here 1668 I wasn't sure
what that was this is a real screenshot

366
00:27:21,590 --> 00:27:26,090
from some testing out stealing whenever
I see anything in this list I kinda

367
00:27:26,090 --> 00:27:30,120
market up in my god this needs more
research because again I'm not sure why

368
00:27:30,120 --> 00:27:34,658
you'd want to do this this is a stock of
ice Nowak said I prayed bought from the

369
00:27:34,659 --> 00:27:36,220
store

370
00:27:36,220 --> 00:27:41,710
plugged and this thing is just listening
here so I look into this so determining

371
00:27:41,710 --> 00:27:45,580
who is listening can clear a little bit
of a challenge if we don't have room if

372
00:27:45,580 --> 00:27:49,110
we have route that PID field is going to
be populated for us and we can see

373
00:27:49,110 --> 00:27:52,740
exactly who it is a binary and
application we can reverse it figure out

374
00:27:52,740 --> 00:27:55,850
what's going on it's not that we gotta
kind of dig around and figure it out

375
00:27:55,850 --> 00:27:59,740
because at the end of the day when we're
connecting with socket the port number

376
00:27:59,740 --> 00:28:04,450
is this going to be a number so i cant
like looks like number 1668 I guess you

377
00:28:04,450 --> 00:28:08,799
could but it's not the best way to do it
so as other things we could do if we're

378
00:28:08,799 --> 00:28:14,289
looking in applications in job
applications we can look for uses of the

379
00:28:14,289 --> 00:28:19,360
server socket class so you could i
acquire all the applications of their

380
00:28:19,360 --> 00:28:23,649
phone unpack them all using something
like bach Somalia AP k tool and then you

381
00:28:23,649 --> 00:28:27,018
could grab across all the code for any
instances of the sock the server socket

382
00:28:27,019 --> 00:28:31,340
class or you can use some two miles from
my testing framework called excerpt

383
00:28:31,340 --> 00:28:36,049
which does essentially that I can search
for the string job a dash net debt

384
00:28:36,049 --> 00:28:39,668
service socket and see that I had two
hits here at their names advocated and

385
00:28:39,669 --> 00:28:43,490
then I can look into those applications
to see exactly where that in that class

386
00:28:43,490 --> 00:28:49,159
is being used now from here it's a
simple reversing technique were looking

387
00:28:49,159 --> 00:28:52,019
through in figuring out there some sort
of protocol with the formats accepting

388
00:28:52,019 --> 00:28:53,809
etcetera

389
00:28:53,809 --> 00:28:59,299
if we have a binary or native name in
the process is a little more tricky can

390
00:28:59,299 --> 00:29:03,100
just grab for that string because it
might just be calling the socket

391
00:29:03,100 --> 00:29:07,949
function but we can use that to our
advantage if we go back to that

392
00:29:07,950 --> 00:29:12,230
screenshot I have right but the sockets
definitely listening on our phone one

393
00:29:12,230 --> 00:29:15,840
way you could do this as you can do
first half process less thing to me all

394
00:29:15,840 --> 00:29:20,470
the processing on a device then call the
binaries off the phone this this regex

395
00:29:20,470 --> 00:29:25,700
here could be used to do something very
similar to that and then for all those

396
00:29:25,700 --> 00:29:28,720
binaries that are both on the phone and
running

397
00:29:28,720 --> 00:29:32,950
look for the dynamic simple socket
buying listen except so you can use the

398
00:29:32,950 --> 00:29:38,990
before it can dump symbols and how much
more about various look for those four

399
00:29:38,990 --> 00:29:42,779
symbols actually existing and that
should be a good indication that this

400
00:29:42,779 --> 00:29:49,000
binary is using sockets now there's
shortfalls here should be obvious gated

401
00:29:49,000 --> 00:29:52,240
could be encrypted yeah you're kind of
on your own for that case but this is a

402
00:29:52,240 --> 00:29:57,120
quick way that we can determine which
binaries have the capabilities to create

403
00:29:57,120 --> 00:30:01,928
a service from there we have to reverse
the binary again outside the scope of

404
00:30:01,929 --> 00:30:08,340
this talk but you could do something
like either pro or two so here's my

405
00:30:08,340 --> 00:30:12,439
quick little script that I wrote for
this it's a one-liner but it's actually

406
00:30:12,440 --> 00:30:16,289
four lines but really all doing is what
I just described there and you can see

407
00:30:16,289 --> 00:30:20,940
these guys are all running but they also
have those for libraries are the torque

408
00:30:20,940 --> 00:30:26,120
symbols and this one down here is kinda
weird store in 10 translate dot X I

409
00:30:26,120 --> 00:30:30,649
thought that was kind of strange the
other ones I see a lot on phone so dhcpd

410
00:30:30,649 --> 00:30:35,268
ok you know g-sensor calibrate ok that
sound like things you see a phone but

411
00:30:35,269 --> 00:30:40,690
this last one to me it's just so with
that in mind the next thing that I would

412
00:30:40,690 --> 00:30:44,409
do since I have no idea who's listening
I'd probably try to talk to them and see

413
00:30:44,409 --> 00:30:45,360
what happens

414
00:30:45,360 --> 00:30:49,240
one thing you should always do is you
should always look at the Android logs

415
00:30:49,240 --> 00:30:54,879
so you can use the adb logcat command to
show you what's being prince logs and

416
00:30:54,879 --> 00:30:58,500
developers are so nice about putting
things in the logs that help us

417
00:30:58,500 --> 00:31:02,230
understand what's happening these are
you there because they're afraid to be

418
00:31:02,230 --> 00:31:03,710
removed or they're there

419
00:31:03,710 --> 00:31:09,409
for reasons I wanted them to be there
but it's really useful to do this in

420
00:31:09,409 --> 00:31:14,909
this particular example you can see here
we found the socket 1669 then I set up

421
00:31:14,909 --> 00:31:20,970
my forty rules and I'm using netcat to
send a string asdf to that port

422
00:31:21,500 --> 00:31:25,700
kills my session immediately but then in
the logs we see this error message from

423
00:31:25,700 --> 00:31:32,870
US tour in 10 translate it says error
only support get asdfasdf ok cool so now

424
00:31:32,870 --> 00:31:37,020
I know it's this process and I i cheated
here a little bit more creative with

425
00:31:37,020 --> 00:31:41,000
your grabbing but now we know that it
definitely this process we definitely

426
00:31:41,000 --> 00:31:45,230
want to reverse that binary and want to
see what's going on here just spoiler

427
00:31:45,230 --> 00:31:48,649
alert this binary would basically accept
commands and execute them as root so

428
00:31:48,649 --> 00:31:52,739
using this socket on this particular
device you could effectively root the

429
00:31:52,740 --> 00:31:59,159
phone which i think is pretty fun what's
really interesting about this was the

430
00:31:59,159 --> 00:32:03,480
developers I don't know what they were
thinking they used this binary which is

431
00:32:03,480 --> 00:32:08,309
running as root to execute a command to
launch like the not the Play Store but

432
00:32:08,309 --> 00:32:11,889
their own version of the Play Store but
I have no idea why you'd want to do it

433
00:32:11,890 --> 00:32:14,820
this way because you already can do that
using intense they were using the

434
00:32:14,820 --> 00:32:18,500
command-line to generate intend to send
it and it's just to me it's kind of

435
00:32:18,500 --> 00:32:25,039
interesting anyway you could use in this
case I like it to actually this

436
00:32:25,039 --> 00:32:31,899
particular so ok how about an and Unix
example so these are really really easy

437
00:32:31,899 --> 00:32:37,320
to search for it because we have a
string so abstract ones even easier than

438
00:32:37,320 --> 00:32:41,928
file-based ones have a little more noise
but abstract ones are really cool easy

439
00:32:41,929 --> 00:32:47,740
to search for here's me just running
nets that again with wrapping for just

440
00:32:47,740 --> 00:32:51,809
the abstract ones and here's a whole
bunch of here this is my sharp phone

441
00:32:51,809 --> 00:32:58,408
which they were made phones yeah maybe a
couple people they make phone 781 in the

442
00:32:58,409 --> 00:33:02,640
us- and I bought it to see what's going
on so what i do to this point is asked

443
00:33:02,640 --> 00:33:06,110
myself which one of these are part of
the OEM package which ones are actually

444
00:33:06,110 --> 00:33:07,909
part of the Android Open Source

445
00:33:07,910 --> 00:33:11,790
I've done this enough to realize that
all of these guys here are actually

446
00:33:11,790 --> 00:33:17,920
added by sharp so each one of these is
something I want to look into one of

447
00:33:17,920 --> 00:33:23,390
these up here which one of them I was
was used to be able to basically mine

448
00:33:23,390 --> 00:33:28,410
the location of a device by connecting
to it issuing a special come in with

449
00:33:28,410 --> 00:33:32,010
sharp then takes pretty quickly because
there is no permissions at all you just

450
00:33:32,010 --> 00:33:35,980
open a socket here in that requested to
locations throughout every every second

451
00:33:35,980 --> 00:33:42,850
or whatever you can follow you around
but in our case it's definitely not the

452
00:33:42,850 --> 00:33:48,040
factory setting service for 1 which also
to me it's kind of interesting that if

453
00:33:48,040 --> 00:33:53,820
anyone wants to look into this kind of
exciting but this one because we had

454
00:33:53,820 --> 00:33:57,310
that strength we can again do that crap
methanol talk about we can grab across

455
00:33:57,310 --> 00:34:02,260
all applications for factory setting
service as strength in this case there's

456
00:34:02,260 --> 00:34:06,190
only one example and it's not an
application at a framework that JP

457
00:34:06,190 --> 00:34:10,659
Dakota sharp out and ride out factory
settings and then we can go up again and

458
00:34:10,659 --> 00:34:14,819
figure out in this exact file here that
that's drinkers and if you open up that

459
00:34:14,820 --> 00:34:18,800
IPC . somali file its all the commands
that are supported by that

460
00:34:18,800 --> 00:34:24,470
so now we can start testing that if
you're doing the diviners you can do the

461
00:34:24,469 --> 00:34:29,418
same script I mentioned before the
slides available for you want to try but

462
00:34:29,418 --> 00:34:34,560
just in this case it has those four
functions Osaka finalists and accept it

463
00:34:34,560 --> 00:34:38,090
also has the strength factory setting
service to be honest you could probably

464
00:34:38,090 --> 00:34:41,880
just grab for factory setting service
across every binary it's probably gonna

465
00:34:41,880 --> 00:34:48,080
be a few hit a very common Sri ok so if
you want to connect to these again you

466
00:34:48,080 --> 00:34:51,960
could use any of those four methods the
one that shows he's here is using so cat

467
00:34:51,960 --> 00:34:55,909
on the phone you could use some
different funding techniques here to see

468
00:34:55,909 --> 00:35:00,970
what happens in this case I'm doing is
sending a bunch of A's hacker here but

469
00:35:00,970 --> 00:35:07,770
we see the lines is factory setting
service received action 9797 asking for

470
00:35:07,770 --> 00:35:11,100
that for one of those early so we know
that the first by is something to do

471
00:35:11,100 --> 00:35:15,430
with some sort of come in and then it's
like yeah that's unknown command some

472
00:35:15,430 --> 00:35:20,220
light running but what kinda cool as if
you look at this IPCC file that has all

473
00:35:20,220 --> 00:35:21,279
the accepted

474
00:35:21,280 --> 00:35:25,020
and then there's some of them are like
clear settings and do this in order

475
00:35:25,020 --> 00:35:28,710
there was no permissions anywhere here
this is just a socket listening so we

476
00:35:28,710 --> 00:35:32,270
can connect you and send these commands
and it's called factory setting service

477
00:35:32,270 --> 00:35:41,640
so I don't know ok so that links I don't
have any really cool exploits are things

478
00:35:41,640 --> 00:35:45,759
that I found for these sites have some
slides to give you some information as I

479
00:35:45,760 --> 00:35:48,300
mentioned earlier these are definitely
the most difficult to trace and

480
00:35:48,300 --> 00:35:52,980
replicate you probably could have a
whole presentation on network sockets

481
00:35:52,980 --> 00:35:57,150
really good information on the internet
lookup networks I get PDF Thurs

482
00:35:57,720 --> 00:36:02,819
my Red Hat that's pretty solid by
parsing out that link file the proper

483
00:36:02,820 --> 00:36:04,160
net directory

484
00:36:04,160 --> 00:36:07,839
the two piece of information that we can
attain the netlink group and also the

485
00:36:07,840 --> 00:36:12,110
the PID so here's a little script here
at my framework that does just that

486
00:36:12,110 --> 00:36:16,870
since that's that doesn't do it for me
again asked myself which ones are part

487
00:36:16,870 --> 00:36:21,170
of the AOSP and which ones are only an
added there's two years actually several

488
00:36:21,170 --> 00:36:26,410
more there's one appear like cool apps
that magazine not sure I saw something

489
00:36:26,410 --> 00:36:31,810
on it looks like it but it is also this
binary added a whole body and scum

490
00:36:31,810 --> 00:36:38,640
Samsung Android MTP applications Galaxy
Note 3 so these are someone's I'm I

491
00:36:38,640 --> 00:36:41,799
wanna look at first because they've been
added and they may be edited correctly

492
00:36:41,800 --> 00:36:47,180
the first up will you have to do is you
were able to get the group from before

493
00:36:47,180 --> 00:36:50,609
but you have to determine what that
group actually needs to that phone

494
00:36:50,610 --> 00:36:53,570
because these are maintained by the
kernel different phones have different

495
00:36:53,570 --> 00:36:57,370
kernels and these groups relatively
staying the same but they don't have to

496
00:36:57,370 --> 00:37:03,339
stay the same so if you look at the
kernel source for my note 3 group 94

497
00:37:03,340 --> 00:37:07,690
audit D lo and behold it was kinda hard
to see group nine corresponds to

498
00:37:07,690 --> 00:37:14,600
underscore audit so we would now have to
look up the audit protocol determine how

499
00:37:14,600 --> 00:37:21,860
that's used and it may be possible to
send messages to whoever this process

500
00:37:21,860 --> 00:37:25,810
ideas here I'm not sure that could cause
them to crash or do something I don't

501
00:37:25,810 --> 00:37:28,759
know but that's an area we can look at
the same thing is true for this

502
00:37:28,760 --> 00:37:31,770
application here like what is group 15
and how they use

503
00:37:32,320 --> 00:37:38,530
15 you event message so I think you
could that was the one that was used by

504
00:37:38,530 --> 00:37:43,190
Valdi so I don't know if there's
actually a specific reason to use you

505
00:37:43,190 --> 00:37:47,250
have entered into sending events to
userspace hope it's something to look

506
00:37:47,250 --> 00:37:47,990
into

507
00:37:47,990 --> 00:37:54,220
to see if there's a problem there if you
want to look for areas in the kernel

508
00:37:54,220 --> 00:37:58,500
where network sockets are created you
can do some quick wraps which obviously

509
00:37:58,500 --> 00:38:02,230
not the most effective way for the
function netlink underscore colonel

510
00:38:02,230 --> 00:38:05,000
underscore create this is where you're
going to see in the Colonels actually

511
00:38:05,000 --> 00:38:10,500
generate network sockets this is from
the BlackBerry proved a Blackberry and

512
00:38:10,500 --> 00:38:14,780
Android phones really bad ass phone so
this is the kernel source of the

513
00:38:14,780 --> 00:38:20,440
electorate prove which is a Qualcomm
based phone so we see this function I'm

514
00:38:20,440 --> 00:38:27,030
sorry this is some sort of Qualcomm
driver that has been added we see the

515
00:38:27,030 --> 00:38:31,270
yelling colonel craig calls for a family
that I'm not familiar with netlink

516
00:38:31,270 --> 00:38:34,790
underscore QSC you calm and there's been
a whole bunch of vulnerabilities that

517
00:38:34,790 --> 00:38:38,090
have come out on this particular
protocol family this is something you

518
00:38:38,090 --> 00:38:41,050
have to actually look into again like I
said to see if there's any

519
00:38:41,050 --> 00:38:44,690
vulnerabilities here but you could kind
of trace through what happens outside of

520
00:38:44,690 --> 00:38:47,740
the senate function here in the kernel
and see you know how is it actually

521
00:38:47,740 --> 00:38:52,229
grabbing the data what's it doing with
it how can we have used this question

522
00:38:52,230 --> 00:39:02,000
the last little side here is in
userspace foretelling sockets you're not

523
00:39:02,000 --> 00:39:07,990
going to be using the Kinect or solicit
or accept so just looking for binaries

524
00:39:07,990 --> 00:39:12,419
with socket and bind or even just socket
but not listen except might be a way for

525
00:39:12,420 --> 00:39:17,200
you determine the network sockets here
what's also interesting as you can use

526
00:39:17,200 --> 00:39:22,460
that file here the PROFINET netlink
which is going to have the PID so from

527
00:39:22,460 --> 00:39:26,760
here you can try to PSN figure out the
actual process and to be honest you can

528
00:39:26,760 --> 00:39:29,760
just look here so system than 50

529
00:39:31,550 --> 00:39:37,620
this is a screenshot illustrating that
from the multi agency a setting up the

530
00:39:37,620 --> 00:39:44,859
ladder here calling socket socket
options then combined and then directly

531
00:39:44,860 --> 00:39:49,090
below here it's like sending messages
received message and that's where the

532
00:39:49,090 --> 00:39:53,480
vulnerability was where it basically
just ran this routine and then wait for

533
00:39:53,480 --> 00:40:01,630
connections and then did something based
on that so that's all the examples I

534
00:40:01,630 --> 00:40:05,480
have for each of the three socket so I
have a quick little conclusions here for

535
00:40:05,480 --> 00:40:09,870
you guys if you take away anything from
this talk it's part of these things that

536
00:40:09,870 --> 00:40:15,109
I don't have any cool 80 days are going
but sockets are definitely an important

537
00:40:15,110 --> 00:40:19,600
component of Android platform security
if you're going to look at

538
00:40:19,600 --> 00:40:24,299
sockets on Android I would focus most of
my effort on these particular sockets

539
00:40:25,100 --> 00:40:29,529
I showed you guys the tools you can use
to find the sockets as well as interact

540
00:40:29,530 --> 00:40:34,630
with them depending on what type of
socket it is I didn't talk too much

541
00:40:34,630 --> 00:40:37,440
about how to fight these things they
could have full talks on how to fun

542
00:40:37,440 --> 00:40:41,380
things but those are some of the things
you would do from there if you have a

543
00:40:41,380 --> 00:40:44,400
rooted phone it actually makes this
whole process a lot easier you can use

544
00:40:44,400 --> 00:40:48,300
the buggers tracers like that but a lot
of stuff can be done without a rooted

545
00:40:48,300 --> 00:40:52,160
phone all these phones I will these
screenshots were taken from non rooted

546
00:40:52,160 --> 00:40:57,149
phones except couple that I used the
emulator but like the no I had the

547
00:40:57,150 --> 00:41:01,430
BlackBerry proved my sharp phone a bunch
of others those are all not rude it when

548
00:41:01,430 --> 00:41:04,960
I do the testing so you can do all this
for the phone in your pocket right now

549
00:41:04,960 --> 00:41:10,190
in a lot of times these unprotected
sockets they don't do any protections

550
00:41:10,190 --> 00:41:14,670
outside of just having a socket there
now for Unix ones you could do a little

551
00:41:14,670 --> 00:41:19,260
more fine-tuning and you can actually
change the file permissions on the sock

552
00:41:19,260 --> 00:41:25,350
itself since it is has an entry also on
newer phones they're running Sen Droid

553
00:41:25,350 --> 00:41:29,120
which has made a lot of this a lot
harder I purposely didn't talk too much

554
00:41:29,120 --> 00:41:32,640
about that but it just makes it much
more difficult to do some things like

555
00:41:32,640 --> 00:41:38,330
this we were able to root a phone a
couple months ago by basically we found

556
00:41:38,330 --> 00:41:42,040
a socket we knew it was bad we knew it
had code execution but the SELinux

557
00:41:42,040 --> 00:41:42,820
policy

558
00:41:42,820 --> 00:41:46,600
and foreign policy did not let us
directly communicate with it so we had

559
00:41:46,600 --> 00:41:49,950
to explain something else and force that
to communicate with which ultimately led

560
00:41:49,950 --> 00:41:55,379
to a phone so I just wanna sit at CNN is
made as much more difficult but it's

561
00:41:55,380 --> 00:42:01,810
still possible and it's still a problem
so that I can ask the guys if you have

562
00:42:01,810 --> 00:42:28,190
any questions or comments so I have
sharp found it looks like a child's toy

563
00:42:28,190 --> 00:42:33,910
no I mean I've I've played with a ton of
different phones from you know the

564
00:42:33,910 --> 00:42:40,759
newest galaxies to LG HTC Blackberry I
don't really care about the song because

565
00:42:40,760 --> 00:42:44,130
it was the only one I knew about that I
hadn't played for I had no idea which

566
00:42:44,130 --> 00:42:48,070
are both doing so I bought mostly to
hack on it and that's actually worked

567
00:42:48,070 --> 00:42:51,830
out for me because everything I found a
reported so as far as I know this phone

568
00:42:51,830 --> 00:42:56,900
is secure and XDA Developers has not
been able to root this phone yet so that

569
00:42:56,900 --> 00:43:00,780
makes me feel a little bit but I would
also recommend just the next series that

570
00:43:00,780 --> 00:43:04,850
I think some of the best phones out
there and they routinely get security

571
00:43:04,850 --> 00:43:09,710
updates so between the Nexus and my
second pic would be the prince that

572
00:43:09,710 --> 00:43:18,500
Blackberry phones phones really cool so
any other questions but looks like we

573
00:43:18,500 --> 00:43:21,730
got to finish up a little bit earlier
guys thanks for coming in with sockets

