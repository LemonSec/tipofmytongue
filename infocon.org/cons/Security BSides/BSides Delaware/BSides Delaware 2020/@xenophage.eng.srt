1
00:00:00,980 --> 00:00:04,910
[Music]

2
00:00:05,040 --> 00:00:08,720
good morning besides

3
00:00:06,160 --> 00:00:09,440
uh before i get started with the talk i

4
00:00:08,720 --> 00:00:12,000
just wanted to

5
00:00:09,440 --> 00:00:13,518
uh send out a a quick thank you to

6
00:00:12,000 --> 00:00:14,080
everybody who's who's helped put this

7
00:00:13,519 --> 00:00:16,720
together

8
00:00:14,080 --> 00:00:18,000
um 2020 has been a bit of a tough year

9
00:00:16,720 --> 00:00:20,720
uh for everybody

10
00:00:18,000 --> 00:00:22,320
and getting all this together was uh a

11
00:00:20,720 --> 00:00:25,840
major effort so

12
00:00:22,320 --> 00:00:26,960
uh janice and josh uh it's been amazing

13
00:00:25,840 --> 00:00:28,640
being part of the team

14
00:00:26,960 --> 00:00:30,320
um and looking forward to doing it in

15
00:00:28,640 --> 00:00:32,320
the future and

16
00:00:30,320 --> 00:00:34,559
for the rest of the team um you guys are

17
00:00:32,320 --> 00:00:36,399
are absolutely the best and

18
00:00:34,559 --> 00:00:37,760
uh you know can't be doing this without

19
00:00:36,399 --> 00:00:41,280
you

20
00:00:37,760 --> 00:00:42,160
okay so on to the talk um so

21
00:00:41,280 --> 00:00:44,960
we're gonna talk a little bit about

22
00:00:42,160 --> 00:00:46,959
containers um so this is more of a

23
00:00:44,960 --> 00:00:48,000
kind of a 101 on containers we're not

24
00:00:46,960 --> 00:00:49,840
going to go too too deep

25
00:00:48,000 --> 00:00:51,600
um but hopefully by the end of this

26
00:00:49,840 --> 00:00:54,719
you'll understand what containers are

27
00:00:51,600 --> 00:00:57,600
and how they all work uh this is the

28
00:00:54,719 --> 00:00:58,000
obligatory me slide you can read i'm not

29
00:00:57,600 --> 00:00:59,359
going to go

30
00:00:58,000 --> 00:01:01,840
through all this but if you want to

31
00:00:59,359 --> 00:01:05,280
contact me there's my info

32
00:01:01,840 --> 00:01:08,560
so what is containerization um

33
00:01:05,280 --> 00:01:11,760
so back uh sort of dawn of computers

34
00:01:08,560 --> 00:01:12,640
in the beginning etc you know your basic

35
00:01:11,760 --> 00:01:14,560
computer was

36
00:01:12,640 --> 00:01:16,320
uh some infrastructure put an operating

37
00:01:14,560 --> 00:01:19,520
system on it and then you ran apps

38
00:01:16,320 --> 00:01:21,039
and apps can see each other um you know

39
00:01:19,520 --> 00:01:23,039
you can get onto the machine you can run

40
00:01:21,040 --> 00:01:24,640
multiple apps next to each other and you

41
00:01:23,040 --> 00:01:27,680
know right at the beginning

42
00:01:24,640 --> 00:01:29,920
uh you know part of

43
00:01:27,680 --> 00:01:31,280
the fun of of breaking into things and

44
00:01:29,920 --> 00:01:32,799
and sort of

45
00:01:31,280 --> 00:01:34,320
going down the security path was being

46
00:01:32,799 --> 00:01:36,159
able to jump from app to app

47
00:01:34,320 --> 00:01:38,839
and and interfere with other apps

48
00:01:36,159 --> 00:01:41,280
reading memory changing things on disk

49
00:01:38,840 --> 00:01:43,439
etc

50
00:01:41,280 --> 00:01:44,399
one of the problems with normal

51
00:01:43,439 --> 00:01:46,320
computing like that

52
00:01:44,399 --> 00:01:47,520
is that we have these super powerful

53
00:01:46,320 --> 00:01:49,600
machines

54
00:01:47,520 --> 00:01:51,520
that can do all this stuff and we put an

55
00:01:49,600 --> 00:01:53,199
app on it and we realize

56
00:01:51,520 --> 00:01:54,479
oh wait we want to secure this and we

57
00:01:53,200 --> 00:01:55,200
don't want other things to use this so

58
00:01:54,479 --> 00:01:58,240
now we have this

59
00:01:55,200 --> 00:02:00,479
super super expensive

60
00:01:58,240 --> 00:02:01,439
super powerful machine running this

61
00:02:00,479 --> 00:02:04,079
small little app

62
00:02:01,439 --> 00:02:05,520
that doesn't really utilize much of the

63
00:02:04,079 --> 00:02:07,600
power of the machine

64
00:02:05,520 --> 00:02:08,560
so we started looking into things uh and

65
00:02:07,600 --> 00:02:10,878
on how to use

66
00:02:08,560 --> 00:02:12,000
how to better use the resources we had

67
00:02:10,878 --> 00:02:14,319
and they came up with

68
00:02:12,000 --> 00:02:15,280
virtualization so the the center of this

69
00:02:14,319 --> 00:02:17,839
slide here

70
00:02:15,280 --> 00:02:18,319
is sort of a look at what virtualization

71
00:02:17,840 --> 00:02:20,239
is

72
00:02:18,319 --> 00:02:21,359
so instead of your host operating system

73
00:02:20,239 --> 00:02:22,879
you have instead

74
00:02:21,360 --> 00:02:24,720
something called a hypervisor and what a

75
00:02:22,879 --> 00:02:27,200
hypervisor does is

76
00:02:24,720 --> 00:02:29,200
uh it creates a virtual environment um

77
00:02:27,200 --> 00:02:31,679
kind of emulates the cpu

78
00:02:29,200 --> 00:02:33,280
um you know memory is still there uh

79
00:02:31,680 --> 00:02:36,000
devices are still there but

80
00:02:33,280 --> 00:02:36,720
what the what you see inside of a

81
00:02:36,000 --> 00:02:40,000
virtual

82
00:02:36,720 --> 00:02:42,400
machine isn't necessarily

83
00:02:40,000 --> 00:02:43,360
what the actual hardware is for that

84
00:02:42,400 --> 00:02:46,080
machine

85
00:02:43,360 --> 00:02:47,760
um so inside of a virtual machine you

86
00:02:46,080 --> 00:02:49,440
can install the full guest os

87
00:02:47,760 --> 00:02:51,040
um you know whether it's windows or

88
00:02:49,440 --> 00:02:52,560
linux or whatever

89
00:02:51,040 --> 00:02:54,160
and then you get your your application

90
00:02:52,560 --> 00:02:55,680
on top of that so now we have the

91
00:02:54,160 --> 00:02:57,680
ability to

92
00:02:55,680 --> 00:02:59,920
build these virtual machines that we can

93
00:02:57,680 --> 00:03:01,200
run multiple on the same hardware

94
00:02:59,920 --> 00:03:03,040
and they're all sort of isolated away

95
00:03:01,200 --> 00:03:04,399
from each other and that's great and

96
00:03:03,040 --> 00:03:08,239
wonderful um

97
00:03:04,400 --> 00:03:11,040
but now we run into an issue where

98
00:03:08,239 --> 00:03:11,440
um you know these these guest os is it's

99
00:03:11,040 --> 00:03:13,679
it's

100
00:03:11,440 --> 00:03:16,000
the whole operating system every time so

101
00:03:13,680 --> 00:03:17,680
it's all you know several gigs of

102
00:03:16,000 --> 00:03:19,280
linux or windows or you know whatever

103
00:03:17,680 --> 00:03:20,959
you're running um

104
00:03:19,280 --> 00:03:22,560
and these images that you're creating

105
00:03:20,959 --> 00:03:25,519
for the virtual machines are

106
00:03:22,560 --> 00:03:27,040
pretty large um and and they're not the

107
00:03:25,519 --> 00:03:29,200
most portable things in the world now

108
00:03:27,040 --> 00:03:30,400
companies like vmware have done you know

109
00:03:29,200 --> 00:03:32,879
a lot of work to

110
00:03:30,400 --> 00:03:34,480
to make these uh be able to transport

111
00:03:32,879 --> 00:03:37,120
these between machines but

112
00:03:34,480 --> 00:03:38,560
a lot of that system depends on super

113
00:03:37,120 --> 00:03:40,239
high-speed connections

114
00:03:38,560 --> 00:03:42,959
between the machines so that they can

115
00:03:40,239 --> 00:03:45,440
transmit all that data back and forth

116
00:03:42,959 --> 00:03:47,200
so over the years um and and this

117
00:03:45,440 --> 00:03:48,480
technology isn't exactly new but over

118
00:03:47,200 --> 00:03:52,879
the years we've had a lot of

119
00:03:48,480 --> 00:03:54,959
of uh different advances in sections of

120
00:03:52,879 --> 00:03:57,040
uh operating systems with being able to

121
00:03:54,959 --> 00:04:00,560
isolate processes or memory

122
00:03:57,040 --> 00:04:02,640
etc and in the past couple of years

123
00:04:00,560 --> 00:04:04,879
um they've sort of put all this together

124
00:04:02,640 --> 00:04:08,319
and come up with this

125
00:04:04,879 --> 00:04:09,679
uh this basic like premises of of

126
00:04:08,319 --> 00:04:11,679
containerization

127
00:04:09,680 --> 00:04:12,799
uh and what a container is well we'll

128
00:04:11,680 --> 00:04:14,319
talk about a container a minute but what

129
00:04:12,799 --> 00:04:18,400
containerization is

130
00:04:14,319 --> 00:04:22,000
is similar to what a virtual machine is

131
00:04:18,399 --> 00:04:25,440
um but also trying to keep the

132
00:04:22,000 --> 00:04:28,639
the speed and the uh the the

133
00:04:25,440 --> 00:04:30,080
the small footprint of a you know a base

134
00:04:28,639 --> 00:04:31,919
system you know running things on bare

135
00:04:30,080 --> 00:04:33,120
metal so in a container

136
00:04:31,919 --> 00:04:34,240
you still have that host operating

137
00:04:33,120 --> 00:04:34,960
system like you do with a regular

138
00:04:34,240 --> 00:04:36,479
machine

139
00:04:34,960 --> 00:04:38,000
you have a thin layer on top of it

140
00:04:36,479 --> 00:04:40,400
called the container engine

141
00:04:38,000 --> 00:04:42,000
and then you have these these objects

142
00:04:40,400 --> 00:04:43,679
that are the containers themselves and

143
00:04:42,000 --> 00:04:46,160
the the container itself

144
00:04:43,680 --> 00:04:47,280
has everything it needs in it to run um

145
00:04:46,160 --> 00:04:49,759
but instead of putting a

146
00:04:47,280 --> 00:04:51,359
full operating system inside of there uh

147
00:04:49,759 --> 00:04:52,800
you're only putting in exactly what you

148
00:04:51,360 --> 00:04:55,199
need

149
00:04:52,800 --> 00:04:56,160
so let's look at what a container is by

150
00:04:55,199 --> 00:04:58,320
itself

151
00:04:56,160 --> 00:04:59,280
um so and we'll go through each of these

152
00:04:58,320 --> 00:05:01,440
and identify

153
00:04:59,280 --> 00:05:02,799
you know sort of what all these

154
00:05:01,440 --> 00:05:05,759
different terms mean

155
00:05:02,800 --> 00:05:07,199
um but at its base a container is a

156
00:05:05,759 --> 00:05:10,960
layered binary image

157
00:05:07,199 --> 00:05:13,280
it's just a blob object of data

158
00:05:10,960 --> 00:05:15,198
containers are isolated they're kind of

159
00:05:13,280 --> 00:05:16,719
sandboxed away from other containers and

160
00:05:15,199 --> 00:05:18,960
from the host

161
00:05:16,720 --> 00:05:20,240
there's exceptions to this sometimes you

162
00:05:18,960 --> 00:05:21,599
want the container to be able to talk to

163
00:05:20,240 --> 00:05:22,800
the host sometimes you want containers

164
00:05:21,600 --> 00:05:24,639
to be able to talk to each other and

165
00:05:22,800 --> 00:05:27,120
there's different techniques for that

166
00:05:24,639 --> 00:05:28,000
containers are portable and by portable

167
00:05:27,120 --> 00:05:31,039
we mean

168
00:05:28,000 --> 00:05:32,720
uh being able to move uh to transmit

169
00:05:31,039 --> 00:05:34,719
them to multiple machines

170
00:05:32,720 --> 00:05:36,800
um you know across the same os you know

171
00:05:34,720 --> 00:05:39,680
but being able to move them

172
00:05:36,800 --> 00:05:40,240
at a moment's notice um so one of the

173
00:05:39,680 --> 00:05:42,240
one of the

174
00:05:40,240 --> 00:05:44,160
big things about containerization and

175
00:05:42,240 --> 00:05:46,720
running things like kubernetes and

176
00:05:44,160 --> 00:05:49,759
docker and all these different uh

177
00:05:46,720 --> 00:05:50,960
orchestrators is you can run it

178
00:05:49,759 --> 00:05:52,479
across a whole bunch of different

179
00:05:50,960 --> 00:05:54,080
machines and if one goes down it just

180
00:05:52,479 --> 00:05:55,919
pops up somewhere else

181
00:05:54,080 --> 00:05:58,000
uh you can do this with virtual machines

182
00:05:55,919 --> 00:06:00,080
as well um but it's there's a lot more

183
00:05:58,000 --> 00:06:02,240
heavy lifting there and a lot more

184
00:06:00,080 --> 00:06:04,000
resources needed to do that uh

185
00:06:02,240 --> 00:06:07,360
containers across platform

186
00:06:04,000 --> 00:06:09,360
sort of um and by cross-platform i mean

187
00:06:07,360 --> 00:06:11,199
you can take a lin a container that is

188
00:06:09,360 --> 00:06:13,120
uh built for linux

189
00:06:11,199 --> 00:06:15,440
and you can run it on a windows box or

190
00:06:13,120 --> 00:06:17,919
or a mac

191
00:06:15,440 --> 00:06:18,960
there's uh definite exceptions here

192
00:06:17,919 --> 00:06:22,159
there's

193
00:06:18,960 --> 00:06:22,960
bits and problems etc uh and containers

194
00:06:22,160 --> 00:06:24,800
are secure

195
00:06:22,960 --> 00:06:26,560
um and you know it wouldn't be a

196
00:06:24,800 --> 00:06:28,000
security conference if

197
00:06:26,560 --> 00:06:30,160
we didn't say that that's not entirely

198
00:06:28,000 --> 00:06:30,160
true

199
00:06:30,240 --> 00:06:35,360
so layers um

200
00:06:33,520 --> 00:06:37,680
when i say containers are built in

201
00:06:35,360 --> 00:06:40,880
layers a layer is basically

202
00:06:37,680 --> 00:06:43,440
a uh a thin slice of uh

203
00:06:40,880 --> 00:06:44,400
an image um so we start with a base

204
00:06:43,440 --> 00:06:46,960
image at the bottom

205
00:06:44,400 --> 00:06:48,638
which is you know kind of a complete

206
00:06:46,960 --> 00:06:50,318
running container

207
00:06:48,639 --> 00:06:52,479
and then the layers that lay that are on

208
00:06:50,319 --> 00:06:54,639
top of it are differences between

209
00:06:52,479 --> 00:06:55,680
the layer before it and the current

210
00:06:54,639 --> 00:06:59,199
layer so

211
00:06:55,680 --> 00:07:01,680
your base image may be something like uh

212
00:06:59,199 --> 00:07:02,560
alpine which is a common distribution

213
00:07:01,680 --> 00:07:05,599
that's used for

214
00:07:02,560 --> 00:07:08,479
for containers and layer one might be

215
00:07:05,599 --> 00:07:11,440
installing ssh and layer two might be

216
00:07:08,479 --> 00:07:13,758
putting a config file in for ssh

217
00:07:11,440 --> 00:07:14,960
and layers can include things like

218
00:07:13,759 --> 00:07:18,240
metadata labels

219
00:07:14,960 --> 00:07:21,359
and descriptions etc

220
00:07:18,240 --> 00:07:23,280
layers are chained together so

221
00:07:21,360 --> 00:07:24,960
each layer depends on the layer before

222
00:07:23,280 --> 00:07:26,400
it and the whole thing

223
00:07:24,960 --> 00:07:28,239
is put together using what's called a

224
00:07:26,400 --> 00:07:31,280
union file system so

225
00:07:28,240 --> 00:07:34,080
all the layers um uh

226
00:07:31,280 --> 00:07:35,280
the specifics of this are a bit

227
00:07:34,080 --> 00:07:36,880
technical but basically it kind of

228
00:07:35,280 --> 00:07:39,679
smashes all the layers together

229
00:07:36,880 --> 00:07:40,159
uh flattens them and it looks to the end

230
00:07:39,680 --> 00:07:43,120
user

231
00:07:40,160 --> 00:07:46,160
like you're on a single system with your

232
00:07:43,120 --> 00:07:47,759
normal mount points and

233
00:07:46,160 --> 00:07:49,840
binaries and libraries and everything

234
00:07:47,759 --> 00:07:51,120
else in actuality you're sort of jumping

235
00:07:49,840 --> 00:07:54,878
between layers

236
00:07:51,120 --> 00:07:58,720
on disk uh layers are cached

237
00:07:54,879 --> 00:08:01,199
meaning that when you update

238
00:07:58,720 --> 00:08:03,280
a container you may have the first five

239
00:08:01,199 --> 00:08:06,000
or six layers of that container already

240
00:08:03,280 --> 00:08:06,960
uh and the only thing that's changed is

241
00:08:06,000 --> 00:08:08,160
is the last couple

242
00:08:06,960 --> 00:08:09,758
so you're only going to download those

243
00:08:08,160 --> 00:08:11,039
last couple layers the first layers just

244
00:08:09,759 --> 00:08:13,440
stay in place

245
00:08:11,039 --> 00:08:14,800
and those first layers may be used for

246
00:08:13,440 --> 00:08:16,800
you know a dozen different containers

247
00:08:14,800 --> 00:08:18,240
across your system so one of the

248
00:08:16,800 --> 00:08:20,080
one of the optimizations that you can

249
00:08:18,240 --> 00:08:21,039
make when you're running a container

250
00:08:20,080 --> 00:08:22,719
system

251
00:08:21,039 --> 00:08:24,318
is you know all the containers that you

252
00:08:22,720 --> 00:08:26,479
build and you use

253
00:08:24,319 --> 00:08:27,759
try to use the same base image try to

254
00:08:26,479 --> 00:08:29,359
use you know make sure that the first

255
00:08:27,759 --> 00:08:30,960
couple of layers which are usually the

256
00:08:29,360 --> 00:08:32,159
thickest layers you know they're usually

257
00:08:30,960 --> 00:08:32,559
the biggest because they have the the

258
00:08:32,159 --> 00:08:34,718
most

259
00:08:32,559 --> 00:08:36,478
the you know the the operating system or

260
00:08:34,719 --> 00:08:37,360
the the bits of the operating system you

261
00:08:36,479 --> 00:08:39,440
need are there

262
00:08:37,360 --> 00:08:40,560
um but if you have all of your if you

263
00:08:39,440 --> 00:08:42,320
layer it the right way

264
00:08:40,559 --> 00:08:43,838
you have all of your common components

265
00:08:42,320 --> 00:08:45,519
at the bottom

266
00:08:43,839 --> 00:08:46,959
you don't ever really have to update

267
00:08:45,519 --> 00:08:48,880
that long term

268
00:08:46,959 --> 00:08:50,640
you know you update it for security

269
00:08:48,880 --> 00:08:52,320
obviously but you know every time you

270
00:08:50,640 --> 00:08:53,600
update your application

271
00:08:52,320 --> 00:08:55,360
you don't necessarily have to update

272
00:08:53,600 --> 00:08:57,200
those those base layers

273
00:08:55,360 --> 00:08:58,880
um and of course you won't download the

274
00:08:57,200 --> 00:09:01,600
same layer twice so

275
00:08:58,880 --> 00:09:03,040
if we look at a traditional vm and

276
00:09:01,600 --> 00:09:04,240
they've done deduping and some other

277
00:09:03,040 --> 00:09:06,719
stuff with this but

278
00:09:04,240 --> 00:09:07,760
traditionally when you have a vm every

279
00:09:06,720 --> 00:09:10,959
single vm

280
00:09:07,760 --> 00:09:12,959
it's the whole big huge blop you know so

281
00:09:10,959 --> 00:09:16,000
if you have a 50 gig vm

282
00:09:12,959 --> 00:09:17,119
you've got 10 of them you know even if

283
00:09:16,000 --> 00:09:18,480
there's slightly

284
00:09:17,120 --> 00:09:20,560
only very slight differences between

285
00:09:18,480 --> 00:09:22,240
them you know you're using up 500 gigs

286
00:09:20,560 --> 00:09:24,479
of data just for that

287
00:09:22,240 --> 00:09:25,760
if you have you know and containers are

288
00:09:24,480 --> 00:09:27,680
much smaller but if you have

289
00:09:25,760 --> 00:09:29,600
you know 50 different containers and

290
00:09:27,680 --> 00:09:33,439
they're all using the same base layers

291
00:09:29,600 --> 00:09:36,800
you may only have you know a total of

292
00:09:33,440 --> 00:09:38,240
you know 10 or 15 gig of data um and

293
00:09:36,800 --> 00:09:39,279
doing the same thing that all those vms

294
00:09:38,240 --> 00:09:41,920
are

295
00:09:39,279 --> 00:09:42,560
um layers are immutable and this is sort

296
00:09:41,920 --> 00:09:45,680
of a

297
00:09:42,560 --> 00:09:47,359
weird um uh

298
00:09:45,680 --> 00:09:48,800
a weird thing to say because once you

299
00:09:47,360 --> 00:09:49,920
get once you start running a container

300
00:09:48,800 --> 00:09:51,199
you'll see that

301
00:09:49,920 --> 00:09:53,040
you can change things when you're inside

302
00:09:51,200 --> 00:09:55,040
the container you can you can

303
00:09:53,040 --> 00:09:56,399
erase things and you can create new

304
00:09:55,040 --> 00:09:59,279
things

305
00:09:56,399 --> 00:10:00,880
what's happening there is the only layer

306
00:09:59,279 --> 00:10:02,880
that you're changing is that very last

307
00:10:00,880 --> 00:10:06,480
layer that writeable container

308
00:10:02,880 --> 00:10:08,160
so if you delete that container

309
00:10:06,480 --> 00:10:10,000
just shut down the instance of it and

310
00:10:08,160 --> 00:10:10,640
remove it from running and restart it

311
00:10:10,000 --> 00:10:12,399
again

312
00:10:10,640 --> 00:10:14,160
you'll have the original container with

313
00:10:12,399 --> 00:10:15,760
all the stuff in there that you deleted

314
00:10:14,160 --> 00:10:18,000
it also means that any data that you

315
00:10:15,760 --> 00:10:21,040
saved inside of the container is now

316
00:10:18,000 --> 00:10:23,760
gone and we'll talk about that as well

317
00:10:21,040 --> 00:10:25,040
um and that's kind of what the layers

318
00:10:23,760 --> 00:10:25,920
look like so we'll take a quick look at

319
00:10:25,040 --> 00:10:28,240
an example

320
00:10:25,920 --> 00:10:29,920
um on the left hand side we have what's

321
00:10:28,240 --> 00:10:32,000
uh commonly called a dockerfile

322
00:10:29,920 --> 00:10:33,279
um docker was one of the first uh

323
00:10:32,000 --> 00:10:35,760
container systems

324
00:10:33,279 --> 00:10:37,600
or first commercial container systems um

325
00:10:35,760 --> 00:10:39,519
and so a lot of the terminology

326
00:10:37,600 --> 00:10:40,640
has sort of included the word docker in

327
00:10:39,519 --> 00:10:42,640
it um

328
00:10:40,640 --> 00:10:44,399
i don't know if they've come up with a

329
00:10:42,640 --> 00:10:46,399
better naming at this point but this is

330
00:10:44,399 --> 00:10:49,360
this is what a container file looks like

331
00:10:46,399 --> 00:10:50,959
um so you've got uh the very first line

332
00:10:49,360 --> 00:10:53,440
tells you what my base image is

333
00:10:50,959 --> 00:10:54,479
so in this example we're saying we're

334
00:10:53,440 --> 00:10:57,200
taking the

335
00:10:54,480 --> 00:10:58,320
alpine image which is just our sort of

336
00:10:57,200 --> 00:10:59,839
our os layer

337
00:10:58,320 --> 00:11:01,680
uh we're taking the latest version of

338
00:10:59,839 --> 00:11:02,399
that so that's the the tag is on the end

339
00:11:01,680 --> 00:11:03,839
of that

340
00:11:02,399 --> 00:11:05,680
and then we're going through and we're

341
00:11:03,839 --> 00:11:08,640
modifying that base image

342
00:11:05,680 --> 00:11:09,599
to be whatever we want to we want to run

343
00:11:08,640 --> 00:11:13,120
so the first

344
00:11:09,600 --> 00:11:14,800
four or so lines are arguments um

345
00:11:13,120 --> 00:11:16,959
there's a maintainer tag so this is just

346
00:11:14,800 --> 00:11:19,599
metadata that's inside the system

347
00:11:16,959 --> 00:11:20,800
uh and then we get to a run line so that

348
00:11:19,600 --> 00:11:23,279
run line

349
00:11:20,800 --> 00:11:25,199
and to be clear the the arg line the

350
00:11:23,279 --> 00:11:25,760
maintainer and label lines also create

351
00:11:25,200 --> 00:11:28,320
layers

352
00:11:25,760 --> 00:11:29,040
but they're they're zero byte layers so

353
00:11:28,320 --> 00:11:30,800
that's just a

354
00:11:29,040 --> 00:11:32,880
metadata change so there's really

355
00:11:30,800 --> 00:11:36,240
nothing there to to show in the

356
00:11:32,880 --> 00:11:38,240
in the image the first real change

357
00:11:36,240 --> 00:11:39,279
change layer that you see is that that

358
00:11:38,240 --> 00:11:42,000
run line

359
00:11:39,279 --> 00:11:42,720
um apk is the package management tool

360
00:11:42,000 --> 00:11:45,920
that you use

361
00:11:42,720 --> 00:11:46,720
in alpine and all we're doing here is

362
00:11:45,920 --> 00:11:50,479
adding

363
00:11:46,720 --> 00:11:52,639
two packages open ssh and shadow

364
00:11:50,480 --> 00:11:54,079
so we sort of chained together a couple

365
00:11:52,639 --> 00:11:55,600
things this is one of the tricks that

366
00:11:54,079 --> 00:11:58,239
you can use with

367
00:11:55,600 --> 00:11:59,519
containers to to sort of keep the number

368
00:11:58,240 --> 00:12:02,639
of layers down

369
00:11:59,519 --> 00:12:05,040
is to chain things together um

370
00:12:02,639 --> 00:12:06,079
in in you know it's just a bash command

371
00:12:05,040 --> 00:12:07,360
um so we're

372
00:12:06,079 --> 00:12:10,399
installing the operating system

373
00:12:07,360 --> 00:12:12,000
installing open sh and shadow uh we're

374
00:12:10,399 --> 00:12:13,279
creating a directory and we're removing

375
00:12:12,000 --> 00:12:16,800
the default keys

376
00:12:13,279 --> 00:12:18,560
uh then we copy our config in uh we copy

377
00:12:16,800 --> 00:12:19,120
what's called an entry point so entry

378
00:12:18,560 --> 00:12:21,839
point

379
00:12:19,120 --> 00:12:23,279
uh is commonly uh it's the common name

380
00:12:21,839 --> 00:12:26,240
that's used for

381
00:12:23,279 --> 00:12:27,200
the script that runs when the container

382
00:12:26,240 --> 00:12:29,360
starts

383
00:12:27,200 --> 00:12:31,440
so we copy in the entry point uh we're

384
00:12:29,360 --> 00:12:32,880
exposing port 22. again that's a

385
00:12:31,440 --> 00:12:34,639
that's kind of a metadata thing so i'm

386
00:12:32,880 --> 00:12:37,839
not really showing it an

387
00:12:34,639 --> 00:12:38,160
entry point which is the tells it what

388
00:12:37,839 --> 00:12:39,839
uh

389
00:12:38,160 --> 00:12:41,279
script to run or what command to run

390
00:12:39,839 --> 00:12:43,360
when the container starts

391
00:12:41,279 --> 00:12:45,839
uh is also in there um again that's

392
00:12:43,360 --> 00:12:48,480
another metadata command so now we have

393
00:12:45,839 --> 00:12:48,959
um you know what looks like a five layer

394
00:12:48,480 --> 00:12:51,600
container

395
00:12:48,959 --> 00:12:52,479
in actuality it's uh what about ten

396
00:12:51,600 --> 00:12:55,600
layers

397
00:12:52,480 --> 00:12:58,320
um all of that together is is a uh

398
00:12:55,600 --> 00:13:00,800
is the container and what you can do is

399
00:12:58,320 --> 00:13:02,720
look at the history of a container

400
00:13:00,800 --> 00:13:05,040
which is what we see here and you kind

401
00:13:02,720 --> 00:13:07,920
of read this in reverse so the very

402
00:13:05,040 --> 00:13:09,279
um the very bottom of this is that first

403
00:13:07,920 --> 00:13:11,279
layer that we have

404
00:13:09,279 --> 00:13:12,800
so it doesn't say you won't see it in

405
00:13:11,279 --> 00:13:15,279
there that it says alpine

406
00:13:12,800 --> 00:13:17,680
latest it's actually showing you the uh

407
00:13:15,279 --> 00:13:19,360
the sha-256 hash of the layer

408
00:13:17,680 --> 00:13:21,279
and it goes through and shows you all of

409
00:13:19,360 --> 00:13:22,880
the different

410
00:13:21,279 --> 00:13:24,800
layers that it's created you can see the

411
00:13:22,880 --> 00:13:25,680
zero byte layers and then you can see

412
00:13:24,800 --> 00:13:28,000
the difference

413
00:13:25,680 --> 00:13:29,199
in size for the layers that we're adding

414
00:13:28,000 --> 00:13:31,519
in

415
00:13:29,200 --> 00:13:32,880
and if you look at this i mean this is

416
00:13:31,519 --> 00:13:36,000
about a

417
00:13:32,880 --> 00:13:38,240
about a 20 meg image total for an ssh

418
00:13:36,000 --> 00:13:42,480
server

419
00:13:38,240 --> 00:13:44,800
so tags images have tags um

420
00:13:42,480 --> 00:13:45,680
tags are are used to identify you know

421
00:13:44,800 --> 00:13:47,120
kind of

422
00:13:45,680 --> 00:13:48,719
figure out the difference between one

423
00:13:47,120 --> 00:13:49,600
container and another uh it's a lot

424
00:13:48,720 --> 00:13:52,720
easier than written

425
00:13:49,600 --> 00:13:54,480
in remembering those big long 256 uh uh

426
00:13:52,720 --> 00:13:57,760
shot to 56 hashes

427
00:13:54,480 --> 00:14:01,120
uh tags are unique per image

428
00:13:57,760 --> 00:14:04,319
so any any given image say alpine

429
00:14:01,120 --> 00:14:08,160
or centos or ubuntu you can only have

430
00:14:04,320 --> 00:14:11,199
one tag with the that unique name in it

431
00:14:08,160 --> 00:14:12,719
right but you can move tags so this is

432
00:14:11,199 --> 00:14:13,920
where the the sort of the latest

433
00:14:12,720 --> 00:14:16,000
standard comes in

434
00:14:13,920 --> 00:14:17,199
so as an example we'll take a look at

435
00:14:16,000 --> 00:14:20,560
this is alpine

436
00:14:17,199 --> 00:14:23,680
um i just grabbed uh the latest

437
00:14:20,560 --> 00:14:27,279
existing image of alpine um and that

438
00:14:23,680 --> 00:14:28,479
image has four tags in it um it has the

439
00:14:27,279 --> 00:14:30,639
the latest tag which is the one that

440
00:14:28,480 --> 00:14:33,040
we're going to end up moving uh it has

441
00:14:30,639 --> 00:14:34,800
three because it's alpine version three

442
00:14:33,040 --> 00:14:36,959
uh 3.12 which is

443
00:14:34,800 --> 00:14:38,240
uh the first patch level and 3.12.1

444
00:14:36,959 --> 00:14:40,800
which is the the

445
00:14:38,240 --> 00:14:43,600
second patch level so what they're doing

446
00:14:40,800 --> 00:14:46,000
is using multiple tags to identify

447
00:14:43,600 --> 00:14:46,800
you know the identify the image so that

448
00:14:46,000 --> 00:14:48,560
you can get

449
00:14:46,800 --> 00:14:50,800
whatever you're after so if you are

450
00:14:48,560 --> 00:14:51,680
after a very very specific version of

451
00:14:50,800 --> 00:14:53,680
alpine

452
00:14:51,680 --> 00:14:55,120
you can say alpine and give it the tag

453
00:14:53,680 --> 00:14:56,800
3.12.1

454
00:14:55,120 --> 00:14:58,959
if all you're interested in is making

455
00:14:56,800 --> 00:15:00,399
sure that you have alpine three

456
00:14:58,959 --> 00:15:01,439
and you don't you don't want four when

457
00:15:00,399 --> 00:15:03,120
it comes out but you want to stay on

458
00:15:01,440 --> 00:15:03,839
alpine three you could do alpine colon

459
00:15:03,120 --> 00:15:05,040
three

460
00:15:03,839 --> 00:15:07,680
and you'll you'll get whatever the

461
00:15:05,040 --> 00:15:09,599
latest alpine three image is

462
00:15:07,680 --> 00:15:10,719
and of course if you want the absolute

463
00:15:09,600 --> 00:15:13,360
latest version

464
00:15:10,720 --> 00:15:14,160
you choose the latest tag and when that

465
00:15:13,360 --> 00:15:17,279
when they put

466
00:15:14,160 --> 00:15:17,839
a new version out they they go in and

467
00:15:17,279 --> 00:15:20,560
they say

468
00:15:17,839 --> 00:15:21,519
the latest version has this tag it moves

469
00:15:20,560 --> 00:15:23,040
that tag

470
00:15:21,519 --> 00:15:24,639
and then you end up with uh the

471
00:15:23,040 --> 00:15:27,199
containers that you see on the bottom

472
00:15:24,639 --> 00:15:28,639
so the original latest container which

473
00:15:27,199 --> 00:15:30,959
is that alpine three container

474
00:15:28,639 --> 00:15:32,000
still has the tags of three three twelve

475
00:15:30,959 --> 00:15:33,758
and three twelve one

476
00:15:32,000 --> 00:15:35,279
but the latest tag is moved over to the

477
00:15:33,759 --> 00:15:36,480
other container so now when you do a

478
00:15:35,279 --> 00:15:39,199
docker pull or

479
00:15:36,480 --> 00:15:39,600
a pod man pull or you know any of the

480
00:15:39,199 --> 00:15:42,399
other

481
00:15:39,600 --> 00:15:43,759
systems you're going to pull the

482
00:15:42,399 --> 00:15:46,160
container

483
00:15:43,759 --> 00:15:47,240
uh with the latest tag on it which in

484
00:15:46,160 --> 00:15:49,519
this case is that

485
00:15:47,240 --> 00:15:50,959
alpine4 container which doesn't actually

486
00:15:49,519 --> 00:15:54,320
exist yet but

487
00:15:50,959 --> 00:15:55,920
as an example but where where are these

488
00:15:54,320 --> 00:15:57,519
stored like where we're talking about

489
00:15:55,920 --> 00:16:01,439
pulling containers where

490
00:15:57,519 --> 00:16:02,880
where where are they so

491
00:16:01,440 --> 00:16:04,720
containers are stored in what's called

492
00:16:02,880 --> 00:16:06,320
the container registry um

493
00:16:04,720 --> 00:16:08,079
when you build a container on your

494
00:16:06,320 --> 00:16:10,639
machine

495
00:16:08,079 --> 00:16:11,839
with build a again build a docker docker

496
00:16:10,639 --> 00:16:12,959
builds you know all the different

497
00:16:11,839 --> 00:16:15,759
building commands

498
00:16:12,959 --> 00:16:17,439
uh the containers are built locally uh

499
00:16:15,759 --> 00:16:20,720
it stores them on disk

500
00:16:17,440 --> 00:16:24,320
in uh there's a file system um

501
00:16:20,720 --> 00:16:24,720
var lib docker is the common one and in

502
00:16:24,320 --> 00:16:27,279
there

503
00:16:24,720 --> 00:16:28,720
is all of the all the different layers

504
00:16:27,279 --> 00:16:31,519
for each container

505
00:16:28,720 --> 00:16:32,639
there's also as part of docker and i'm

506
00:16:31,519 --> 00:16:34,320
not sure

507
00:16:32,639 --> 00:16:36,240
how some of the other systems do it but

508
00:16:34,320 --> 00:16:38,240
there's a registry

509
00:16:36,240 --> 00:16:39,440
that it sets up a local registry it's

510
00:16:38,240 --> 00:16:42,320
only available locally

511
00:16:39,440 --> 00:16:43,199
you can't get to it remotely by default

512
00:16:42,320 --> 00:16:45,120
so

513
00:16:43,199 --> 00:16:46,880
it kind of works the same way as a

514
00:16:45,120 --> 00:16:50,079
remote registry does you'll see the

515
00:16:46,880 --> 00:16:51,759
a listing of the the containers the

516
00:16:50,079 --> 00:16:55,680
container names the tags they have

517
00:16:51,759 --> 00:16:58,240
the sha sums the sizes all that stuff

518
00:16:55,680 --> 00:16:59,758
but that doesn't do anybody else good we

519
00:16:58,240 --> 00:17:00,399
want to be able to share containers with

520
00:16:59,759 --> 00:17:02,880
other people

521
00:17:00,399 --> 00:17:04,160
or have them in some central place for

522
00:17:02,880 --> 00:17:05,679
all of our servers to be able to get to

523
00:17:04,160 --> 00:17:06,720
so you can push containers to a remote

524
00:17:05,679 --> 00:17:08,559
registry

525
00:17:06,720 --> 00:17:10,079
remote registries can be authenticated

526
00:17:08,559 --> 00:17:11,199
um you know there's there's definitely

527
00:17:10,079 --> 00:17:13,918
some security in there

528
00:17:11,199 --> 00:17:15,120
uh it could be better internal

529
00:17:13,919 --> 00:17:17,600
registries are usually

530
00:17:15,119 --> 00:17:19,520
quite protected because uh some

531
00:17:17,599 --> 00:17:22,559
containers that are built have

532
00:17:19,520 --> 00:17:24,959
secrets in them or uh have uh specific

533
00:17:22,559 --> 00:17:26,639
configurations for the network you're on

534
00:17:24,959 --> 00:17:27,919
not the best practice in the world but

535
00:17:26,640 --> 00:17:28,799
that's how a lot of people are building

536
00:17:27,919 --> 00:17:31,200
them

537
00:17:28,799 --> 00:17:32,080
uh so the registry itself stores the

538
00:17:31,200 --> 00:17:34,320
layers

539
00:17:32,080 --> 00:17:37,199
so you've got the actual uh the actual

540
00:17:34,320 --> 00:17:39,120
files that represent each of the layers

541
00:17:37,200 --> 00:17:40,960
which is just a basically a binary

542
00:17:39,120 --> 00:17:43,520
directory and some binary files

543
00:17:40,960 --> 00:17:44,240
it also has a manifest which is a json

544
00:17:43,520 --> 00:17:46,480
file

545
00:17:44,240 --> 00:17:47,679
and that json file lists all the layers

546
00:17:46,480 --> 00:17:50,080
of your container

547
00:17:47,679 --> 00:17:51,360
the the hashes for those different

548
00:17:50,080 --> 00:17:53,039
layers so that it can

549
00:17:51,360 --> 00:17:54,799
authenticate or can verify that it has

550
00:17:53,039 --> 00:17:57,280
the correct layers uh

551
00:17:54,799 --> 00:18:00,480
the tags for that container as well as a

552
00:17:57,280 --> 00:18:03,039
bunch of other info

553
00:18:00,480 --> 00:18:04,080
okay so now we have a container and now

554
00:18:03,039 --> 00:18:06,000
we want to talk about

555
00:18:04,080 --> 00:18:08,000
um the next step here which is sort of

556
00:18:06,000 --> 00:18:12,320
the isolation of the container

557
00:18:08,000 --> 00:18:15,120
so isolation uh consists of

558
00:18:12,320 --> 00:18:16,960
two basic features of uh and we're gonna

559
00:18:15,120 --> 00:18:18,959
talk on the linux side of things windows

560
00:18:16,960 --> 00:18:20,000
does something similar and mac is its

561
00:18:18,960 --> 00:18:24,160
own beast

562
00:18:20,000 --> 00:18:27,600
um so isolation uses namespaces

563
00:18:24,160 --> 00:18:28,799
and it uses c groups namespaces um which

564
00:18:27,600 --> 00:18:32,000
we'll talk about in a minute

565
00:18:28,799 --> 00:18:33,760
are are uh kind of the the first layer

566
00:18:32,000 --> 00:18:35,360
um and it's it's very similar to what

567
00:18:33,760 --> 00:18:37,600
you have in development um you're

568
00:18:35,360 --> 00:18:39,120
you're giving a specific namespace of

569
00:18:37,600 --> 00:18:40,879
something to

570
00:18:39,120 --> 00:18:42,399
the object that's running uh and we can

571
00:18:40,880 --> 00:18:44,720
do this across network interfaces

572
00:18:42,400 --> 00:18:46,880
mounts uh inter-process communications

573
00:18:44,720 --> 00:18:50,160
so talking between processes

574
00:18:46,880 --> 00:18:52,080
uh uts which is an old uh if

575
00:18:50,160 --> 00:18:54,080
it stands for but it's it's a sort of an

576
00:18:52,080 --> 00:18:56,639
old original unix thing

577
00:18:54,080 --> 00:18:57,600
uh where that's the the host name and

578
00:18:56,640 --> 00:19:00,320
the now defunct

579
00:18:57,600 --> 00:19:02,320
uh nist domain uh as well as the user

580
00:19:00,320 --> 00:19:05,600
and the process ids

581
00:19:02,320 --> 00:19:07,520
so what is a namespace very simply

582
00:19:05,600 --> 00:19:08,719
namespace is mapping from one object to

583
00:19:07,520 --> 00:19:11,760
another um

584
00:19:08,720 --> 00:19:14,960
so what i've shown here is uh

585
00:19:11,760 --> 00:19:16,640
a a the user pid namespace

586
00:19:14,960 --> 00:19:19,120
um so what we're doing is if you look on

587
00:19:16,640 --> 00:19:20,559
the left this is inside of the container

588
00:19:19,120 --> 00:19:22,080
so if we look at all the processes that

589
00:19:20,559 --> 00:19:24,399
are running inside the container

590
00:19:22,080 --> 00:19:25,199
there's a whole whopping five of them uh

591
00:19:24,400 --> 00:19:26,799
and if you

592
00:19:25,200 --> 00:19:27,840
familiar with linux systems you'll

593
00:19:26,799 --> 00:19:28,799
you'll notice that there's a whole bunch

594
00:19:27,840 --> 00:19:31,600
of things missing like

595
00:19:28,799 --> 00:19:32,240
where's init or systemd or or you know

596
00:19:31,600 --> 00:19:33,840
any of the

597
00:19:32,240 --> 00:19:35,039
the kernel threads or or any of the

598
00:19:33,840 --> 00:19:36,559
normal stuff that you see in a linux

599
00:19:35,039 --> 00:19:39,120
system and the answer is that

600
00:19:36,559 --> 00:19:40,080
it doesn't need those it's not part of

601
00:19:39,120 --> 00:19:41,600
the container

602
00:19:40,080 --> 00:19:43,120
because the container isn't running the

603
00:19:41,600 --> 00:19:45,520
host system

604
00:19:43,120 --> 00:19:46,399
so it masks it away so the only thing

605
00:19:45,520 --> 00:19:48,879
that you're seeing

606
00:19:46,400 --> 00:19:49,679
are those those five processes and

607
00:19:48,880 --> 00:19:52,400
you'll notice the

608
00:19:49,679 --> 00:19:54,160
the pids are pretty low um you know as a

609
00:19:52,400 --> 00:19:56,240
linux system you need pid one

610
00:19:54,160 --> 00:19:58,080
um that's your your main process and in

611
00:19:56,240 --> 00:20:01,360
a container if you kill pig one

612
00:19:58,080 --> 00:20:02,320
the container dies um so you start out

613
00:20:01,360 --> 00:20:04,639
with pid one

614
00:20:02,320 --> 00:20:06,320
um you've got all the other other uh

615
00:20:04,640 --> 00:20:08,640
process ids in there

616
00:20:06,320 --> 00:20:10,480
and inside of the container it looks

617
00:20:08,640 --> 00:20:12,159
like this little small part of the world

618
00:20:10,480 --> 00:20:14,559
if you get onto the linux the

619
00:20:12,159 --> 00:20:16,400
linux host system itself and look you'll

620
00:20:14,559 --> 00:20:18,480
see all sorts of stuff going on

621
00:20:16,400 --> 00:20:20,960
now i've cut this down quite a bit but

622
00:20:18,480 --> 00:20:22,720
you'll see the top couple of pids are

623
00:20:20,960 --> 00:20:24,400
normal things you see inside of a linux

624
00:20:22,720 --> 00:20:26,400
system you get systemd

625
00:20:24,400 --> 00:20:28,080
you've got some some uh some kernel

626
00:20:26,400 --> 00:20:30,640
threads some irq

627
00:20:28,080 --> 00:20:32,000
dam uh stuff going on and if we look

628
00:20:30,640 --> 00:20:34,159
down further

629
00:20:32,000 --> 00:20:35,520
uh we start seeing this is specifically

630
00:20:34,159 --> 00:20:36,159
docker but you start seeing some of the

631
00:20:35,520 --> 00:20:39,918
docker

632
00:20:36,159 --> 00:20:42,640
uh binaries that are running um that are

633
00:20:39,919 --> 00:20:45,360
the run c is the actual um container

634
00:20:42,640 --> 00:20:47,280
runtime that runs the container so that

635
00:20:45,360 --> 00:20:48,959
acts as like your bootstrap and your

636
00:20:47,280 --> 00:20:52,639
your your your uh

637
00:20:48,960 --> 00:20:56,000
root image and

638
00:20:52,640 --> 00:20:57,600
the uh further down from that you'll see

639
00:20:56,000 --> 00:21:00,320
those apache threads

640
00:20:57,600 --> 00:21:01,199
and if you notice the pids on those are

641
00:21:00,320 --> 00:21:02,960
much higher

642
00:21:01,200 --> 00:21:04,320
so what's happening in the background is

643
00:21:02,960 --> 00:21:06,320
it is mapping

644
00:21:04,320 --> 00:21:07,760
those pids back and forth so inside of

645
00:21:06,320 --> 00:21:10,080
the container

646
00:21:07,760 --> 00:21:10,879
you see pid 1 and outside of the

647
00:21:10,080 --> 00:21:15,439
container

648
00:21:10,880 --> 00:21:18,559
you see pid 4054

649
00:21:15,440 --> 00:21:20,720
which is the that that root

650
00:21:18,559 --> 00:21:22,080
uh apache process that's running inside

651
00:21:20,720 --> 00:21:24,080
the container

652
00:21:22,080 --> 00:21:25,918
now there's some bad stuff going on here

653
00:21:24,080 --> 00:21:26,320
as well uh we're running things as root

654
00:21:25,919 --> 00:21:29,760
which

655
00:21:26,320 --> 00:21:32,158
is not what we want to do unfortunately

656
00:21:29,760 --> 00:21:34,000
a lot of default containers uh stuff

657
00:21:32,159 --> 00:21:37,280
that's out there that's been built

658
00:21:34,000 --> 00:21:38,880
all uses uh root for for everything

659
00:21:37,280 --> 00:21:41,039
you can actually go into the container

660
00:21:38,880 --> 00:21:42,960
and tell it to use different users

661
00:21:41,039 --> 00:21:44,080
and map them to different things if you

662
00:21:42,960 --> 00:21:46,960
look uh user

663
00:21:44,080 --> 00:21:47,439
33 which is the one underneath uh root

664
00:21:46,960 --> 00:21:49,520
uh

665
00:21:47,440 --> 00:21:50,799
on the host system is actually mapped to

666
00:21:49,520 --> 00:21:53,600
uh dub dub dub data

667
00:21:50,799 --> 00:21:55,520
inside of the container um so so it does

668
00:21:53,600 --> 00:21:57,360
it does user mappings as well

669
00:21:55,520 --> 00:21:59,360
so this is what the namespaces do so

670
00:21:57,360 --> 00:22:00,639
you've got the view inside and the view

671
00:21:59,360 --> 00:22:03,120
outside this happens for

672
00:22:00,640 --> 00:22:05,280
network interfaces this happens for

673
00:22:03,120 --> 00:22:07,439
various different

674
00:22:05,280 --> 00:22:10,158
resources that you have between the two

675
00:22:07,440 --> 00:22:13,280
between the the host and the container

676
00:22:10,159 --> 00:22:16,640
the second part of isolation is c groups

677
00:22:13,280 --> 00:22:18,720
um secrets is a is is easy to understand

678
00:22:16,640 --> 00:22:19,760
a little bit harder to sort of put into

679
00:22:18,720 --> 00:22:21,840
practice um

680
00:22:19,760 --> 00:22:22,960
it's kind of like black magic um but

681
00:22:21,840 --> 00:22:25,120
it's pretty neat

682
00:22:22,960 --> 00:22:26,400
uh so c groups allows you to limit the

683
00:22:25,120 --> 00:22:30,080
cpu and the memory

684
00:22:26,400 --> 00:22:32,240
for any given group of processes

685
00:22:30,080 --> 00:22:33,360
by default inside of a container system

686
00:22:32,240 --> 00:22:34,400
you pretty much have access to

687
00:22:33,360 --> 00:22:35,840
everything

688
00:22:34,400 --> 00:22:38,240
but one of the nice things is like you

689
00:22:35,840 --> 00:22:40,080
can go into a container and you can say

690
00:22:38,240 --> 00:22:41,520
you know running a uh say an nginx

691
00:22:40,080 --> 00:22:43,840
container uh

692
00:22:41,520 --> 00:22:45,280
we we don't need that much memory and we

693
00:22:43,840 --> 00:22:46,399
certainly don't need that much cpu so

694
00:22:45,280 --> 00:22:49,600
we're gonna give it

695
00:22:46,400 --> 00:22:50,960
you know uh a tenth of the cpu uh we'll

696
00:22:49,600 --> 00:22:53,520
reserve away for it

697
00:22:50,960 --> 00:22:54,480
uh and we'll give it a max of you know a

698
00:22:53,520 --> 00:22:58,000
gig of memory

699
00:22:54,480 --> 00:23:00,480
um and this allows us to

700
00:22:58,000 --> 00:23:01,360
uh run multiple containers on the system

701
00:23:00,480 --> 00:23:03,360
and not have

702
00:23:01,360 --> 00:23:05,520
any single container sort of overpower

703
00:23:03,360 --> 00:23:06,879
the system and and take away resources

704
00:23:05,520 --> 00:23:10,080
from everything else

705
00:23:06,880 --> 00:23:11,600
um it's it's it's all built in

706
00:23:10,080 --> 00:23:14,000
all behind the scenes in all the

707
00:23:11,600 --> 00:23:15,840
different container runtimes um

708
00:23:14,000 --> 00:23:16,720
so when you use something like docker

709
00:23:15,840 --> 00:23:18,158
you don't have to know all the

710
00:23:16,720 --> 00:23:20,080
blackmagic commands to set up

711
00:23:18,159 --> 00:23:23,840
namespaces and c groups it's all a

712
00:23:20,080 --> 00:23:23,840
single command it does it for you

713
00:23:24,640 --> 00:23:28,880
containers are portable uh we already

714
00:23:27,200 --> 00:23:31,440
talked about building the container

715
00:23:28,880 --> 00:23:32,960
uh putting in a repository um and then

716
00:23:31,440 --> 00:23:34,000
you know putting it into a remote

717
00:23:32,960 --> 00:23:36,799
repository

718
00:23:34,000 --> 00:23:37,760
um so the idea is that you can build a

719
00:23:36,799 --> 00:23:39,440
container once

720
00:23:37,760 --> 00:23:41,520
and you can deploy it multiple times so

721
00:23:39,440 --> 00:23:42,559
we've got uh this container that we

722
00:23:41,520 --> 00:23:45,440
built that's our

723
00:23:42,559 --> 00:23:45,918
say our nginx proxy uh and we've got you

724
00:23:45,440 --> 00:23:48,000
know

725
00:23:45,919 --> 00:23:49,279
five boxes or five vms or you know

726
00:23:48,000 --> 00:23:52,640
whatever we're using

727
00:23:49,279 --> 00:23:54,159
that are our front-end docker systems or

728
00:23:52,640 --> 00:23:57,600
our front-end container systems

729
00:23:54,159 --> 00:23:59,360
that we want to run uh a proxy on

730
00:23:57,600 --> 00:24:00,559
uh and the nice part about proxies for

731
00:23:59,360 --> 00:24:02,158
the most part the nice part about

732
00:24:00,559 --> 00:24:03,918
proxies is that they're stateless

733
00:24:02,159 --> 00:24:05,840
so we can run the same container across

734
00:24:03,919 --> 00:24:07,279
all of them there's no real store other

735
00:24:05,840 --> 00:24:08,240
than logs there's no real storage we

736
00:24:07,279 --> 00:24:10,559
have to worry about

737
00:24:08,240 --> 00:24:11,360
so we can take that container build it

738
00:24:10,559 --> 00:24:14,080
once

739
00:24:11,360 --> 00:24:15,678
run it on all of them when we know that

740
00:24:14,080 --> 00:24:17,199
every single system is running the exact

741
00:24:15,679 --> 00:24:20,159
same container

742
00:24:17,200 --> 00:24:21,039
so we've got a pristine environment all

743
00:24:20,159 --> 00:24:22,720
the you know

744
00:24:21,039 --> 00:24:24,559
we can still modify the configurations

745
00:24:22,720 --> 00:24:25,840
but all across all those machines

746
00:24:24,559 --> 00:24:27,760
everything is running exactly the same

747
00:24:25,840 --> 00:24:29,760
so if we've tested that container

748
00:24:27,760 --> 00:24:31,520
in whatever environment we're in we know

749
00:24:29,760 --> 00:24:34,158
wherever we run that container

750
00:24:31,520 --> 00:24:34,720
it should run the exact same way uh you

751
00:24:34,159 --> 00:24:37,039
can do

752
00:24:34,720 --> 00:24:38,400
things like replicas so docker with

753
00:24:37,039 --> 00:24:41,440
docker swarm

754
00:24:38,400 --> 00:24:43,760
kubernetes nomad

755
00:24:41,440 --> 00:24:46,400
uh and some of the others have the

756
00:24:43,760 --> 00:24:48,879
ability to like their they're clustered

757
00:24:46,400 --> 00:24:49,679
container systems so you can go and

758
00:24:48,880 --> 00:24:52,480
deploy

759
00:24:49,679 --> 00:24:53,760
a container once uh and say hey run this

760
00:24:52,480 --> 00:24:55,200
nginx container

761
00:24:53,760 --> 00:24:57,039
uh we want to make sure that there's

762
00:24:55,200 --> 00:24:58,960
five replicas running at all times

763
00:24:57,039 --> 00:25:01,279
and it will spin up five copies of that

764
00:24:58,960 --> 00:25:03,520
container

765
00:25:01,279 --> 00:25:04,720
so all of them are running across there

766
00:25:03,520 --> 00:25:07,039
across the system

767
00:25:04,720 --> 00:25:07,840
if there is a failure of some sort uh

768
00:25:07,039 --> 00:25:09,440
whether

769
00:25:07,840 --> 00:25:11,600
something inside the container fails and

770
00:25:09,440 --> 00:25:13,039
the container crashes uh or the entire

771
00:25:11,600 --> 00:25:14,799
system fails

772
00:25:13,039 --> 00:25:17,919
and it depends on the orchestrator but

773
00:25:14,799 --> 00:25:20,639
the the system will automatically

774
00:25:17,919 --> 00:25:22,640
restart a new copy of that container up

775
00:25:20,640 --> 00:25:25,840
to the number of replicas that you have

776
00:25:22,640 --> 00:25:27,200
you have uh given it um some systems are

777
00:25:25,840 --> 00:25:28,158
a little bit more advanced and will spin

778
00:25:27,200 --> 00:25:32,000
up replicas based

779
00:25:28,159 --> 00:25:32,960
on cpu and memory usage but in general

780
00:25:32,000 --> 00:25:34,480
it's you know here's

781
00:25:32,960 --> 00:25:35,760
i want to run three of these please keep

782
00:25:34,480 --> 00:25:36,880
three of these running and the system

783
00:25:35,760 --> 00:25:38,240
will always make sure that there's three

784
00:25:36,880 --> 00:25:40,720
of them are up

785
00:25:38,240 --> 00:25:42,559
um the other nice part uh about

786
00:25:40,720 --> 00:25:44,320
containers um

787
00:25:42,559 --> 00:25:45,760
especially considering portability is

788
00:25:44,320 --> 00:25:47,678
that the

789
00:25:45,760 --> 00:25:49,600
containers are great for difficult to

790
00:25:47,679 --> 00:25:52,799
install and configure applications

791
00:25:49,600 --> 00:25:53,760
um so let's take something like uh a lot

792
00:25:52,799 --> 00:25:56,400
of the tools that are in

793
00:25:53,760 --> 00:25:58,000
say kali um you know getting those up

794
00:25:56,400 --> 00:25:59,600
and running

795
00:25:58,000 --> 00:26:02,000
in the exact manner that you want

796
00:25:59,600 --> 00:26:04,480
sometimes takes a ton of effort

797
00:26:02,000 --> 00:26:06,480
if you do that inside of a container you

798
00:26:04,480 --> 00:26:08,640
can spin that container up

799
00:26:06,480 --> 00:26:09,520
on whatever system you're on you have

800
00:26:08,640 --> 00:26:10,880
that container

801
00:26:09,520 --> 00:26:12,960
say in a remote registry that you have

802
00:26:10,880 --> 00:26:13,919
access to you can pull it down and no

803
00:26:12,960 --> 00:26:15,200
matter where you are

804
00:26:13,919 --> 00:26:17,200
what machine you're on as long as you

805
00:26:15,200 --> 00:26:20,400
have a container uh

806
00:26:17,200 --> 00:26:20,720
uh run time on that system you can pull

807
00:26:20,400 --> 00:26:23,200
that

808
00:26:20,720 --> 00:26:24,720
that kali container down um or whatever

809
00:26:23,200 --> 00:26:26,720
tool you've created

810
00:26:24,720 --> 00:26:28,080
and run that tool without having to

811
00:26:26,720 --> 00:26:31,039
worry about

812
00:26:28,080 --> 00:26:32,158
conflicting libraries uh worrying about

813
00:26:31,039 --> 00:26:37,279
um

814
00:26:32,159 --> 00:26:40,240
you know uh configuring a different

815
00:26:37,279 --> 00:26:40,960
compilers or or you know libraries that

816
00:26:40,240 --> 00:26:42,960
are missing

817
00:26:40,960 --> 00:26:44,480
or sort of you know dirtying up the

818
00:26:42,960 --> 00:26:47,120
system that you're on

819
00:26:44,480 --> 00:26:48,400
and each time that you run it because

820
00:26:47,120 --> 00:26:50,719
they're immutable

821
00:26:48,400 --> 00:26:52,559
you go right back to what your your

822
00:26:50,720 --> 00:26:55,600
initial start state was

823
00:26:52,559 --> 00:26:56,399
um which is wonderful um so if you go

824
00:26:55,600 --> 00:26:58,959
through and do

825
00:26:56,400 --> 00:26:59,679
an entire pen test um you know when

826
00:26:58,960 --> 00:27:02,000
you're done

827
00:26:59,679 --> 00:27:03,440
you can wipe the slate clean and you

828
00:27:02,000 --> 00:27:04,559
know you can have a very simple little

829
00:27:03,440 --> 00:27:06,000
script that does that

830
00:27:04,559 --> 00:27:07,918
start starts the whole thing over again

831
00:27:06,000 --> 00:27:11,039
and off you go

832
00:27:07,919 --> 00:27:13,279
there are some gotchas with portability

833
00:27:11,039 --> 00:27:14,960
we've talked about we talked about state

834
00:27:13,279 --> 00:27:16,880
a little bit before

835
00:27:14,960 --> 00:27:18,399
basically what this means is that any

836
00:27:16,880 --> 00:27:21,039
data that you are creating

837
00:27:18,399 --> 00:27:23,840
inside of the container is only created

838
00:27:21,039 --> 00:27:23,840
on that thin

839
00:27:24,159 --> 00:27:28,720
writable container layer inside of the

840
00:27:27,279 --> 00:27:30,960
container now you can mount

841
00:27:28,720 --> 00:27:32,320
in external directories so if you have

842
00:27:30,960 --> 00:27:35,200
like a local directory

843
00:27:32,320 --> 00:27:36,720
you can keep that data locally on that

844
00:27:35,200 --> 00:27:38,640
machine but again

845
00:27:36,720 --> 00:27:39,600
it's locally on that machine so if

846
00:27:38,640 --> 00:27:41,039
you're dealing with a clustered

847
00:27:39,600 --> 00:27:43,039
environment

848
00:27:41,039 --> 00:27:44,640
and you store something locally in a

849
00:27:43,039 --> 00:27:45,919
local share and the container moves

850
00:27:44,640 --> 00:27:46,960
somewhere else and that local share

851
00:27:45,919 --> 00:27:48,320
isn't there anymore

852
00:27:46,960 --> 00:27:51,200
that data is not available to the

853
00:27:48,320 --> 00:27:52,158
container there's shared uh file systems

854
00:27:51,200 --> 00:27:53,440
that you can use there's a bunch of

855
00:27:52,159 --> 00:27:55,279
different ways around that but

856
00:27:53,440 --> 00:27:56,399
you know that's one of the one of the

857
00:27:55,279 --> 00:27:58,080
things you have to deal with when you're

858
00:27:56,399 --> 00:28:01,120
when you're building containers

859
00:27:58,080 --> 00:28:02,080
um likewise uh any state that you have

860
00:28:01,120 --> 00:28:04,239
in memory uh

861
00:28:02,080 --> 00:28:05,439
is only there for that container um so

862
00:28:04,240 --> 00:28:06,960
that's not shared across

863
00:28:05,440 --> 00:28:08,480
again you get into things like using

864
00:28:06,960 --> 00:28:10,640
memcache d or

865
00:28:08,480 --> 00:28:12,240
or you know other other uh shared memory

866
00:28:10,640 --> 00:28:14,640
systems um

867
00:28:12,240 --> 00:28:15,520
but you have to build your application

868
00:28:14,640 --> 00:28:20,399
uh

869
00:28:15,520 --> 00:28:22,158
to to use that um generally speaking

870
00:28:20,399 --> 00:28:24,719
if you're in a big container environment

871
00:28:22,159 --> 00:28:27,279
lots of clusters etc

872
00:28:24,720 --> 00:28:28,960
your developers are are looking to

873
00:28:27,279 --> 00:28:30,240
develop those containers to be as

874
00:28:28,960 --> 00:28:31,840
stateless as possible

875
00:28:30,240 --> 00:28:33,440
i'm still using databases on the back

876
00:28:31,840 --> 00:28:34,080
end and you know things like memcache

877
00:28:33,440 --> 00:28:35,919
etc

878
00:28:34,080 --> 00:28:37,360
but you want your state away from the

879
00:28:35,919 --> 00:28:39,440
container where you can spin that

880
00:28:37,360 --> 00:28:41,360
container up on any one of the machines

881
00:28:39,440 --> 00:28:43,760
and it can get to the various different

882
00:28:41,360 --> 00:28:44,158
things it needs to keep to keep running

883
00:28:43,760 --> 00:28:45,520
um

884
00:28:44,159 --> 00:28:47,440
occasionally there's also environmental

885
00:28:45,520 --> 00:28:49,679
differences um hardware access

886
00:28:47,440 --> 00:28:50,640
and resources obviously if you've built

887
00:28:49,679 --> 00:28:52,399
a container that uses

888
00:28:50,640 --> 00:28:53,679
a lot of resources and you put on a low

889
00:28:52,399 --> 00:28:54,479
resource machine you're going to have

890
00:28:53,679 --> 00:28:57,279
issues

891
00:28:54,480 --> 00:28:58,080
that sort of exists with vms and normal

892
00:28:57,279 --> 00:29:01,200
normal applications

893
00:28:58,080 --> 00:29:03,120
anyway uh hardware access

894
00:29:01,200 --> 00:29:04,799
uh is a little bit it's it's not quite

895
00:29:03,120 --> 00:29:06,559
as bad um depends on

896
00:29:04,799 --> 00:29:08,720
the what you've built in the container

897
00:29:06,559 --> 00:29:11,918
so if you've built a container that

898
00:29:08,720 --> 00:29:12,799
is uh for say you know well we could use

899
00:29:11,919 --> 00:29:14,080
kali again

900
00:29:12,799 --> 00:29:16,960
if you built a container that needs

901
00:29:14,080 --> 00:29:17,520
access to say some specific type of

902
00:29:16,960 --> 00:29:20,960
device

903
00:29:17,520 --> 00:29:24,559
for rf or uh you know some type

904
00:29:20,960 --> 00:29:25,600
of network device that you're expecting

905
00:29:24,559 --> 00:29:28,080
certain

906
00:29:25,600 --> 00:29:29,678
access on if that's not on that machine

907
00:29:28,080 --> 00:29:32,879
obviously that's not going to work

908
00:29:29,679 --> 00:29:36,399
again the same thing exists

909
00:29:32,880 --> 00:29:38,720
in vms and on bare metal

910
00:29:36,399 --> 00:29:41,360
uh we'll take a quick side journey into

911
00:29:38,720 --> 00:29:44,159
deployment here for a moment

912
00:29:41,360 --> 00:29:45,360
containers are portable we said that one

913
00:29:44,159 --> 00:29:47,679
of the nice parts

914
00:29:45,360 --> 00:29:48,879
about deploying containers when you're

915
00:29:47,679 --> 00:29:52,159
in a clustered

916
00:29:48,880 --> 00:29:52,880
environment is you can kind of deploy

917
00:29:52,159 --> 00:29:54,640
live

918
00:29:52,880 --> 00:29:56,320
so if you've got a container out there

919
00:29:54,640 --> 00:29:59,600
that's got five replicas

920
00:29:56,320 --> 00:30:01,039
and you say fire up that new version

921
00:29:59,600 --> 00:30:02,639
there's a bunch of different options

922
00:30:01,039 --> 00:30:04,000
that you can set for this but by default

923
00:30:02,640 --> 00:30:05,440
most of the systems do a round robin

924
00:30:04,000 --> 00:30:06,559
deployment meaning that they go to the

925
00:30:05,440 --> 00:30:09,039
first container

926
00:30:06,559 --> 00:30:10,559
they'll drop that container down they'll

927
00:30:09,039 --> 00:30:12,399
pull the new image

928
00:30:10,559 --> 00:30:14,799
and that doesn't happen necessarily in

929
00:30:12,399 --> 00:30:16,719
that order sometimes uh

930
00:30:14,799 --> 00:30:18,720
depending on the orchestrator you're

931
00:30:16,720 --> 00:30:21,440
using it will pull the image first

932
00:30:18,720 --> 00:30:22,000
and then tear down the container just to

933
00:30:21,440 --> 00:30:24,080
speed things

934
00:30:22,000 --> 00:30:25,440
up some containers aren't smart or some

935
00:30:24,080 --> 00:30:26,080
orchestrators aren't smart enough to do

936
00:30:25,440 --> 00:30:27,679
that

937
00:30:26,080 --> 00:30:29,360
um but it'll it'll pull that old

938
00:30:27,679 --> 00:30:31,279
container down it'll fire up the new

939
00:30:29,360 --> 00:30:33,360
container with the new image

940
00:30:31,279 --> 00:30:34,799
and as long as it comes back healthy

941
00:30:33,360 --> 00:30:35,918
it'll move on to the next one

942
00:30:34,799 --> 00:30:37,840
so you get kind of a round robin

943
00:30:35,919 --> 00:30:41,279
deployment uh if

944
00:30:37,840 --> 00:30:42,240
you if it fails um there's fallbacks

945
00:30:41,279 --> 00:30:44,320
that you can set up

946
00:30:42,240 --> 00:30:45,679
uh so that you know hey this container

947
00:30:44,320 --> 00:30:47,279
failed three times jump back to the

948
00:30:45,679 --> 00:30:48,559
previous one

949
00:30:47,279 --> 00:30:50,480
and if you do have a successful

950
00:30:48,559 --> 00:30:50,960
deployment you cros deploy across the

951
00:30:50,480 --> 00:30:54,960
entire

952
00:30:50,960 --> 00:30:56,799
you know cluster and

953
00:30:54,960 --> 00:30:58,559
for whatever reason there's a problem

954
00:30:56,799 --> 00:30:58,960
with the new container you've identified

955
00:30:58,559 --> 00:31:00,559
it

956
00:30:58,960 --> 00:31:02,240
and it's not something you can fix

957
00:31:00,559 --> 00:31:03,360
quickly you can drop back to the

958
00:31:02,240 --> 00:31:05,360
previous version

959
00:31:03,360 --> 00:31:06,799
which by the way is still there and

960
00:31:05,360 --> 00:31:10,000
should be a very rapid spin

961
00:31:06,799 --> 00:31:13,600
spin up again um assuming again

962
00:31:10,000 --> 00:31:14,640
any state that's recorded in databases

963
00:31:13,600 --> 00:31:18,719
etc isn't

964
00:31:14,640 --> 00:31:19,679
going to screw that up containers are

965
00:31:18,720 --> 00:31:22,000
cross-platform

966
00:31:19,679 --> 00:31:24,240
sort of here's where we start getting

967
00:31:22,000 --> 00:31:27,519
into a little bit of the uh the more

968
00:31:24,240 --> 00:31:29,440
uh uh gotcha areas uh

969
00:31:27,519 --> 00:31:31,760
in general linux containers are pretty

970
00:31:29,440 --> 00:31:32,399
portable uh pretty pretty cross platform

971
00:31:31,760 --> 00:31:34,720
across

972
00:31:32,399 --> 00:31:36,080
mac linux windows they work across as

973
00:31:34,720 --> 00:31:39,600
long as you have

974
00:31:36,080 --> 00:31:42,320
uh the proper um processor family

975
00:31:39,600 --> 00:31:42,639
in the machine uh meaning if you are on

976
00:31:42,320 --> 00:31:46,879
a

977
00:31:42,640 --> 00:31:48,559
um on an x86 system or an amd64 system

978
00:31:46,880 --> 00:31:49,919
and the container is built for that as

979
00:31:48,559 --> 00:31:51,200
long as you're on that family or

980
00:31:49,919 --> 00:31:54,320
processor you're good

981
00:31:51,200 --> 00:31:54,320
you can't take a uh

982
00:31:54,640 --> 00:32:00,640
an arm built container and run it on an

983
00:31:56,880 --> 00:32:02,559
intel box and vice versa um

984
00:32:00,640 --> 00:32:04,559
so linux containers pretty much across

985
00:32:02,559 --> 00:32:06,480
the board no no big deal

986
00:32:04,559 --> 00:32:08,559
windows containers are a completely

987
00:32:06,480 --> 00:32:10,000
different beast windows containers can

988
00:32:08,559 --> 00:32:13,120
only run on windows

989
00:32:10,000 --> 00:32:14,399
i have not seen any anyone getting them

990
00:32:13,120 --> 00:32:16,799
anyone with the ability to get them to

991
00:32:14,399 --> 00:32:17,279
run anywhere else this is a lot to do

992
00:32:16,799 --> 00:32:19,840
with

993
00:32:17,279 --> 00:32:22,480
the kernel that runs in windows and it's

994
00:32:19,840 --> 00:32:25,199
kind of only in windows

995
00:32:22,480 --> 00:32:26,799
the other gotcha with windows is that if

996
00:32:25,200 --> 00:32:27,440
the different base image that you're

997
00:32:26,799 --> 00:32:29,120
using

998
00:32:27,440 --> 00:32:30,799
so that that base layer image that

999
00:32:29,120 --> 00:32:34,320
you're using

1000
00:32:30,799 --> 00:32:37,600
only runs natively

1001
00:32:34,320 --> 00:32:40,639
on the same version of what of the host

1002
00:32:37,600 --> 00:32:43,760
os so if you built a

1003
00:32:40,640 --> 00:32:45,120
a windows 2016 windows server 2016

1004
00:32:43,760 --> 00:32:46,640
container

1005
00:32:45,120 --> 00:32:48,479
uh the only place that that's going to

1006
00:32:46,640 --> 00:32:51,279
run natively is on windows

1007
00:32:48,480 --> 00:32:53,120
server 2016 and that's what's called uh

1008
00:32:51,279 --> 00:32:53,840
process isolation so very similar to

1009
00:32:53,120 --> 00:32:55,439
linux

1010
00:32:53,840 --> 00:32:56,480
where it's using i don't know what

1011
00:32:55,440 --> 00:32:57,760
exactly what they're using behind the

1012
00:32:56,480 --> 00:32:59,679
scenes and windows but it's very similar

1013
00:32:57,760 --> 00:33:03,200
to c groups and name spaces uh

1014
00:32:59,679 --> 00:33:04,320
in linux if however you have a 2016

1015
00:33:03,200 --> 00:33:06,559
image that you've built and you try to

1016
00:33:04,320 --> 00:33:08,240
run it on a windows 2019 host

1017
00:33:06,559 --> 00:33:09,678
you have to put the system into what's

1018
00:33:08,240 --> 00:33:11,360
called a hyper-v

1019
00:33:09,679 --> 00:33:13,200
isolation which is exactly what it

1020
00:33:11,360 --> 00:33:16,559
sounds like this is a virtual

1021
00:33:13,200 --> 00:33:20,000
a hypervisor it's virtualization

1022
00:33:16,559 --> 00:33:22,559
it it runs a shim of some sort of

1023
00:33:20,000 --> 00:33:25,919
windows 2016 so that it can run that

1024
00:33:22,559 --> 00:33:26,240
2016 container um i haven't done a lot

1025
00:33:25,919 --> 00:33:29,919
of

1026
00:33:26,240 --> 00:33:30,399
testing with this but you do need to

1027
00:33:29,919 --> 00:33:33,840
have

1028
00:33:30,399 --> 00:33:34,639
a uh the hardware that you're running on

1029
00:33:33,840 --> 00:33:38,399
has to have

1030
00:33:34,640 --> 00:33:40,000
hyper-v extensions in it uh and if

1031
00:33:38,399 --> 00:33:42,639
you're running in a uh

1032
00:33:40,000 --> 00:33:43,679
virtual environment say azure uh there's

1033
00:33:42,640 --> 00:33:45,440
a uh

1034
00:33:43,679 --> 00:33:47,039
when you spin up a vm there there's a

1035
00:33:45,440 --> 00:33:47,840
mechanism there's a option that you can

1036
00:33:47,039 --> 00:33:50,640
choose to have

1037
00:33:47,840 --> 00:33:52,720
uh hyper-v stacking i think it's called

1038
00:33:50,640 --> 00:33:54,480
uh where the vm has those hyper-v

1039
00:33:52,720 --> 00:33:56,559
extensions on top of the hyper-v

1040
00:33:54,480 --> 00:33:58,559
extensions or whatever virtualization

1041
00:33:56,559 --> 00:34:02,158
extensions they have in the hardware

1042
00:33:58,559 --> 00:34:04,000
so you can run old windows containers

1043
00:34:02,159 --> 00:34:06,240
2016 can run on 2019

1044
00:34:04,000 --> 00:34:07,279
but you cannot run new containers on old

1045
00:34:06,240 --> 00:34:09,918
versions so a

1046
00:34:07,279 --> 00:34:11,359
windows 2019 container cannot and will

1047
00:34:09,918 --> 00:34:12,799
not ever be able to run on a windows

1048
00:34:11,359 --> 00:34:16,078
2016 host

1049
00:34:12,800 --> 00:34:19,119
um so there's the gotcha it's it is for

1050
00:34:16,079 --> 00:34:22,079
every uh every major version

1051
00:34:19,119 --> 00:34:23,280
of windows that they're putting out i

1052
00:34:22,079 --> 00:34:24,879
think there's

1053
00:34:23,280 --> 00:34:27,040
if i remember correctly from the matrix

1054
00:34:24,879 --> 00:34:29,279
there's like six or seven

1055
00:34:27,040 --> 00:34:30,800
different versions they have right now

1056
00:34:29,280 --> 00:34:33,359
microsoft has a

1057
00:34:30,800 --> 00:34:36,159
big table that they show you which one

1058
00:34:33,359 --> 00:34:38,399
works on which in which isolation

1059
00:34:36,159 --> 00:34:39,679
uh then there's mac os containers uh it

1060
00:34:38,399 --> 00:34:42,078
is possible

1061
00:34:39,679 --> 00:34:43,918
uh the the instance that i've seen of

1062
00:34:42,079 --> 00:34:46,960
this is nothing more than

1063
00:34:43,918 --> 00:34:50,399
a kvm uh virtual

1064
00:34:46,960 --> 00:34:53,918
uh machine inside of a container uh

1065
00:34:50,399 --> 00:34:56,719
running on a host uh yeah you can do it

1066
00:34:53,918 --> 00:34:58,160
um it's not really supported anywhere i

1067
00:34:56,719 --> 00:34:59,520
don't know what the limitations are and

1068
00:34:58,160 --> 00:35:02,000
i really don't know anybody who's doing

1069
00:34:59,520 --> 00:35:06,560
anything like this in production um

1070
00:35:02,000 --> 00:35:08,880
uh i do actually have a a kvm um

1071
00:35:06,560 --> 00:35:10,640
container that i've built for one of the

1072
00:35:08,880 --> 00:35:13,599
apps that i have that i haven't yet

1073
00:35:10,640 --> 00:35:14,160
yet to be able to uh containerize and it

1074
00:35:13,599 --> 00:35:17,440
works

1075
00:35:14,160 --> 00:35:18,879
um it's got a whole list of of

1076
00:35:17,440 --> 00:35:21,680
issues and gotchas that you have to deal

1077
00:35:18,880 --> 00:35:23,359
with but you can run a virtual machine

1078
00:35:21,680 --> 00:35:26,640
inside of a container

1079
00:35:23,359 --> 00:35:29,200
which i found pretty interesting

1080
00:35:26,640 --> 00:35:30,000
all right security for containers uh i

1081
00:35:29,200 --> 00:35:32,879
mean this is a

1082
00:35:30,000 --> 00:35:33,920
security conference right so security

1083
00:35:32,880 --> 00:35:37,520
inside of containers

1084
00:35:33,920 --> 00:35:39,040
uh on a on a linux system um

1085
00:35:37,520 --> 00:35:41,040
and i don't i don't know a whole lot

1086
00:35:39,040 --> 00:35:41,759
about how it's done on a windows system

1087
00:35:41,040 --> 00:35:43,440
um

1088
00:35:41,760 --> 00:35:45,599
but on a linux system is exactly what

1089
00:35:43,440 --> 00:35:47,520
you think it is uh it's all the basic

1090
00:35:45,599 --> 00:35:47,920
features of any linux system that you

1091
00:35:47,520 --> 00:35:50,880
have

1092
00:35:47,920 --> 00:35:51,599
essay linux plays a a big part in

1093
00:35:50,880 --> 00:35:53,359
containers

1094
00:35:51,599 --> 00:35:55,359
um if you have it turned on if you have

1095
00:35:53,359 --> 00:35:56,640
it turned off then please turn it back

1096
00:35:55,359 --> 00:35:59,839
on you need that

1097
00:35:56,640 --> 00:36:02,078
uh so sc linux is sort of uh uh

1098
00:35:59,839 --> 00:36:04,078
as with most things is layered on top um

1099
00:36:02,079 --> 00:36:05,760
it's not explicitly required and it does

1100
00:36:04,079 --> 00:36:06,400
exactly what you think it does um so

1101
00:36:05,760 --> 00:36:09,200
your

1102
00:36:06,400 --> 00:36:10,000
container images have uh certain labels

1103
00:36:09,200 --> 00:36:12,319
applied to them

1104
00:36:10,000 --> 00:36:14,079
and in theory if you're trying to access

1105
00:36:12,320 --> 00:36:17,359
something that's not within the label

1106
00:36:14,079 --> 00:36:18,800
you get denied um other things that you

1107
00:36:17,359 --> 00:36:21,920
can do for security aren't

1108
00:36:18,800 --> 00:36:22,880
uh aren't always thought of as uh

1109
00:36:21,920 --> 00:36:26,560
security

1110
00:36:22,880 --> 00:36:29,200
when you start um but a lot of the

1111
00:36:26,560 --> 00:36:30,160
low-level security stuff that um is

1112
00:36:29,200 --> 00:36:33,200
recommended

1113
00:36:30,160 --> 00:36:35,520
are things like on your dmz servers uh

1114
00:36:33,200 --> 00:36:38,560
let's not install things like gcc

1115
00:36:35,520 --> 00:36:40,320
or nmap or netcat or

1116
00:36:38,560 --> 00:36:42,000
well anything that we can get away with

1117
00:36:40,320 --> 00:36:44,240
minimize the hell out of that

1118
00:36:42,000 --> 00:36:46,320
operating system so that the bare

1119
00:36:44,240 --> 00:36:49,680
minimum of tools are there

1120
00:36:46,320 --> 00:36:52,160
now as assisted man as and as most

1121
00:36:49,680 --> 00:36:52,799
administrators know that's great in

1122
00:36:52,160 --> 00:36:54,879
theory

1123
00:36:52,800 --> 00:36:56,800
uh but when the server's broke and i

1124
00:36:54,880 --> 00:36:58,079
need to be on it fixing things uh those

1125
00:36:56,800 --> 00:37:00,640
tools come in really handy

1126
00:36:58,079 --> 00:37:02,880
please give them back containers makes

1127
00:37:00,640 --> 00:37:04,640
this a little bit easier where

1128
00:37:02,880 --> 00:37:06,320
inside of the container you can minimize

1129
00:37:04,640 --> 00:37:08,879
the hell out of this container

1130
00:37:06,320 --> 00:37:11,040
you can bring it all the way down to not

1131
00:37:08,880 --> 00:37:11,760
even having a shell in it if you wanted

1132
00:37:11,040 --> 00:37:13,599
to

1133
00:37:11,760 --> 00:37:14,800
um there are containers that you can

1134
00:37:13,599 --> 00:37:17,520
build uh

1135
00:37:14,800 --> 00:37:18,800
which is simply a go binary um there's

1136
00:37:17,520 --> 00:37:22,160
there's no os

1137
00:37:18,800 --> 00:37:23,839
layer re i mean there is an os layer but

1138
00:37:22,160 --> 00:37:25,040
when you're building it it's the only

1139
00:37:23,839 --> 00:37:25,839
thing you're putting there is the go

1140
00:37:25,040 --> 00:37:27,200
library

1141
00:37:25,839 --> 00:37:29,359
so if you were to try to get a shell

1142
00:37:27,200 --> 00:37:31,520
inside of it like it's just not there

1143
00:37:29,359 --> 00:37:33,359
um so you can strip these things down to

1144
00:37:31,520 --> 00:37:36,160
bare minimums and the nice part

1145
00:37:33,359 --> 00:37:37,839
um what i find really really useful is

1146
00:37:36,160 --> 00:37:38,960
inside of a container we go back to the

1147
00:37:37,839 --> 00:37:40,320
immutability

1148
00:37:38,960 --> 00:37:42,720
uh hey i'm having a problem with this

1149
00:37:40,320 --> 00:37:44,000
container uh you know i

1150
00:37:42,720 --> 00:37:46,720
get on the console and get into the

1151
00:37:44,000 --> 00:37:48,160
container or um

1152
00:37:46,720 --> 00:37:49,680
yeah that's it the only way to get in

1153
00:37:48,160 --> 00:37:50,640
there please don't put ssh inside your

1154
00:37:49,680 --> 00:37:52,879
containers

1155
00:37:50,640 --> 00:37:54,160
uh if you get into the container and you

1156
00:37:52,880 --> 00:37:55,359
go well you know i can't really see

1157
00:37:54,160 --> 00:37:58,640
what's going on um

1158
00:37:55,359 --> 00:38:00,319
i really need hmm i need uh i need

1159
00:37:58,640 --> 00:38:02,319
netcat and i need nmap

1160
00:38:00,320 --> 00:38:03,359
and a tcp dump would be really great you

1161
00:38:02,320 --> 00:38:04,880
know okay great

1162
00:38:03,359 --> 00:38:07,359
uh you know run the commands to install

1163
00:38:04,880 --> 00:38:08,880
those okay they're installed use them

1164
00:38:07,359 --> 00:38:11,119
all done with that okay we figured out

1165
00:38:08,880 --> 00:38:13,839
what the problem is great

1166
00:38:11,119 --> 00:38:14,880
kill the container restart it poof all

1167
00:38:13,839 --> 00:38:16,880
those tools are gone

1168
00:38:14,880 --> 00:38:19,119
and by the way if you're running you

1169
00:38:16,880 --> 00:38:20,079
know 10 15 instances of the same

1170
00:38:19,119 --> 00:38:21,520
container

1171
00:38:20,079 --> 00:38:23,440
only that one container that you're

1172
00:38:21,520 --> 00:38:25,440
working inside of gets those tools

1173
00:38:23,440 --> 00:38:26,480
for the period of time until you restart

1174
00:38:25,440 --> 00:38:29,200
that container

1175
00:38:26,480 --> 00:38:30,640
so now you know your footprint your your

1176
00:38:29,200 --> 00:38:32,240
threat landscape or your

1177
00:38:30,640 --> 00:38:34,799
you know the the attack vectors that

1178
00:38:32,240 --> 00:38:36,078
they have are greatly minimized because

1179
00:38:34,800 --> 00:38:37,920
all the stuff that you would normally go

1180
00:38:36,079 --> 00:38:40,240
after isn't there

1181
00:38:37,920 --> 00:38:41,760
um another thing that really helps on

1182
00:38:40,240 --> 00:38:42,479
the security side is container network

1183
00:38:41,760 --> 00:38:44,720
isolation

1184
00:38:42,480 --> 00:38:45,680
um so we always talk about segmenting

1185
00:38:44,720 --> 00:38:47,759
networks um

1186
00:38:45,680 --> 00:38:50,078
and we've gone through you know back in

1187
00:38:47,760 --> 00:38:51,280
the day when networks were all physical

1188
00:38:50,079 --> 00:38:52,000
you would physically segment the

1189
00:38:51,280 --> 00:38:53,839
networks

1190
00:38:52,000 --> 00:38:55,359
then we got to virtual machines and

1191
00:38:53,839 --> 00:38:57,839
virtual environments and now we're

1192
00:38:55,359 --> 00:38:58,839
virtually segmenting networks with

1193
00:38:57,839 --> 00:39:02,560
containers

1194
00:38:58,839 --> 00:39:03,359
um all of the to my knowledge all of the

1195
00:39:02,560 --> 00:39:06,400
container

1196
00:39:03,359 --> 00:39:07,359
uh major orchestrators and the container

1197
00:39:06,400 --> 00:39:10,240
runtimes

1198
00:39:07,359 --> 00:39:12,160
have it's not quite a virtual network

1199
00:39:10,240 --> 00:39:14,160
except it is a virtual network

1200
00:39:12,160 --> 00:39:15,440
where on the system itself you can go

1201
00:39:14,160 --> 00:39:17,920
through and create

1202
00:39:15,440 --> 00:39:18,640
different sub networks so you can you

1203
00:39:17,920 --> 00:39:20,240
can

1204
00:39:18,640 --> 00:39:22,160
subnet the entire system and you can

1205
00:39:20,240 --> 00:39:23,520
have the the

1206
00:39:22,160 --> 00:39:24,799
i mean don't do this because you want

1207
00:39:23,520 --> 00:39:26,400
different machines for this but you

1208
00:39:24,800 --> 00:39:27,920
could have a dmz network and you could

1209
00:39:26,400 --> 00:39:28,560
have a database network and you could

1210
00:39:27,920 --> 00:39:30,960
have a

1211
00:39:28,560 --> 00:39:32,560
you know a back-end network and they're

1212
00:39:30,960 --> 00:39:34,160
all isolated away from each other on the

1213
00:39:32,560 --> 00:39:34,560
network on the network itself and you

1214
00:39:34,160 --> 00:39:35,920
can

1215
00:39:34,560 --> 00:39:38,560
depending on which orchestrator you have

1216
00:39:35,920 --> 00:39:41,040
you can actually put in uh

1217
00:39:38,560 --> 00:39:42,640
different tools that will put in

1218
00:39:41,040 --> 00:39:44,560
firewalls or

1219
00:39:42,640 --> 00:39:46,400
you know different policy sets that you

1220
00:39:44,560 --> 00:39:47,359
can use to control what what traffic is

1221
00:39:46,400 --> 00:39:49,200
going where

1222
00:39:47,359 --> 00:39:51,200
um so you can actually net isolate the

1223
00:39:49,200 --> 00:39:52,640
networks apart uh so even if somebody

1224
00:39:51,200 --> 00:39:53,759
were to break into the container

1225
00:39:52,640 --> 00:39:55,839
and they go oh great i'm in the

1226
00:39:53,760 --> 00:39:57,359
container let me see what's here there's

1227
00:39:55,839 --> 00:39:58,799
nothing for them to look at because they

1228
00:39:57,359 --> 00:40:00,799
you know they're in a network that

1229
00:39:58,800 --> 00:40:02,640
doesn't have anything else in it

1230
00:40:00,800 --> 00:40:03,920
um and we talked about immutability a

1231
00:40:02,640 --> 00:40:07,359
dozen times now

1232
00:40:03,920 --> 00:40:08,960
um one uh i talked to uh

1233
00:40:07,359 --> 00:40:13,520
a guy who had been doing containers for

1234
00:40:08,960 --> 00:40:16,079
a while ran a big edge mesh

1235
00:40:13,520 --> 00:40:16,880
network like a kind of like a cdn type

1236
00:40:16,079 --> 00:40:19,760
setup

1237
00:40:16,880 --> 00:40:20,720
and one of the one of the things that he

1238
00:40:19,760 --> 00:40:21,920
created

1239
00:40:20,720 --> 00:40:24,078
or that they did was what they called

1240
00:40:21,920 --> 00:40:27,440
the clean slate protocol

1241
00:40:24,079 --> 00:40:30,160
and they had a standing uh

1242
00:40:27,440 --> 00:40:31,440
effectively a cron job that at you know

1243
00:40:30,160 --> 00:40:33,920
midnight every night

1244
00:40:31,440 --> 00:40:35,040
it would completely destroy the entire

1245
00:40:33,920 --> 00:40:38,160
container environment

1246
00:40:35,040 --> 00:40:40,560
you know in in steps it would

1247
00:40:38,160 --> 00:40:41,839
pull down all of the containers delete

1248
00:40:40,560 --> 00:40:44,078
everything that was there

1249
00:40:41,839 --> 00:40:45,520
and rebuild the entire system you know

1250
00:40:44,079 --> 00:40:48,079
redeploy everything

1251
00:40:45,520 --> 00:40:49,440
um you know and it took it probably took

1252
00:40:48,079 --> 00:40:50,960
a couple minutes per

1253
00:40:49,440 --> 00:40:52,960
per region or per environment they were

1254
00:40:50,960 --> 00:40:55,920
doing but

1255
00:40:52,960 --> 00:40:58,000
the theory was that even if somebody

1256
00:40:55,920 --> 00:40:59,839
gained a foothold in the network

1257
00:40:58,000 --> 00:41:02,560
in their container network during the

1258
00:40:59,839 --> 00:41:04,880
day the act of

1259
00:41:02,560 --> 00:41:06,000
cleaning the slate kicked them out and

1260
00:41:04,880 --> 00:41:07,200
they would have to go through all the

1261
00:41:06,000 --> 00:41:08,160
steps that they did to get back into the

1262
00:41:07,200 --> 00:41:09,919
system again

1263
00:41:08,160 --> 00:41:11,279
um it made sure that everything was

1264
00:41:09,920 --> 00:41:12,880
clean there's benefits for

1265
00:41:11,280 --> 00:41:14,960
security there's benefits for making

1266
00:41:12,880 --> 00:41:16,240
sure that your apps are not running for

1267
00:41:14,960 --> 00:41:18,079
long periods of time

1268
00:41:16,240 --> 00:41:19,680
i know we all used to jump up and down

1269
00:41:18,079 --> 00:41:21,599
when our linux boxes had you know

1270
00:41:19,680 --> 00:41:22,799
massive run times but you know we want

1271
00:41:21,599 --> 00:41:25,280
to make sure that these

1272
00:41:22,800 --> 00:41:27,040
these containers are are up and running

1273
00:41:25,280 --> 00:41:28,880
and in pristine condition so

1274
00:41:27,040 --> 00:41:30,880
if you can nuke them and restart them

1275
00:41:28,880 --> 00:41:31,440
and and have a more stable system that

1276
00:41:30,880 --> 00:41:34,480
way

1277
00:41:31,440 --> 00:41:35,280
go for it so how do we make all of this

1278
00:41:34,480 --> 00:41:37,920
work together

1279
00:41:35,280 --> 00:41:39,359
um you know it's easy on your local

1280
00:41:37,920 --> 00:41:40,480
machine to spin up a handful of

1281
00:41:39,359 --> 00:41:42,160
containers to do

1282
00:41:40,480 --> 00:41:44,319
whatever you know i want to run a web

1283
00:41:42,160 --> 00:41:44,640
server i'm a developer and i want to run

1284
00:41:44,319 --> 00:41:46,400
this

1285
00:41:44,640 --> 00:41:48,960
this container of this thing that i

1286
00:41:46,400 --> 00:41:51,760
wrote just to try it locally

1287
00:41:48,960 --> 00:41:52,960
but when you're talking at scale when

1288
00:41:51,760 --> 00:41:55,599
you're talking about

1289
00:41:52,960 --> 00:41:56,960
you know a dozen servers or 100 servers

1290
00:41:55,599 --> 00:41:58,240
or a thousand servers

1291
00:41:56,960 --> 00:42:00,800
we're talking about cattle we're not

1292
00:41:58,240 --> 00:42:02,000
talking about pets anymore and you know

1293
00:42:00,800 --> 00:42:04,000
we don't know the names of our cattle

1294
00:42:02,000 --> 00:42:04,560
they're just numbers um so how do we

1295
00:42:04,000 --> 00:42:06,800
manage

1296
00:42:04,560 --> 00:42:08,400
all of this madness uh and that's

1297
00:42:06,800 --> 00:42:11,280
through a bunch of tools called

1298
00:42:08,400 --> 00:42:11,920
uh orchestration tools um so i've got uh

1299
00:42:11,280 --> 00:42:14,800
kind of the

1300
00:42:11,920 --> 00:42:15,680
big ones here um so docker swarm is sort

1301
00:42:14,800 --> 00:42:18,079
of the original

1302
00:42:15,680 --> 00:42:18,720
you know docker is kind of the original

1303
00:42:18,079 --> 00:42:21,040
uh

1304
00:42:18,720 --> 00:42:22,879
commercial one docker swarm is their

1305
00:42:21,040 --> 00:42:24,319
clustered version it is it's very very

1306
00:42:22,880 --> 00:42:25,440
simple to get up and running it's very

1307
00:42:24,319 --> 00:42:28,880
simple to use

1308
00:42:25,440 --> 00:42:30,240
um it works fairly well uh it's all but

1309
00:42:28,880 --> 00:42:32,079
deprecated at this point

1310
00:42:30,240 --> 00:42:33,680
um it doesn't have all the bells and

1311
00:42:32,079 --> 00:42:36,960
whistles of the newer stuff

1312
00:42:33,680 --> 00:42:38,960
um and you know uh hasn't really been a

1313
00:42:36,960 --> 00:42:41,599
whole ton of movement on it in the past

1314
00:42:38,960 --> 00:42:42,880
uh year and a half two years so you know

1315
00:42:41,599 --> 00:42:44,800
it's kind of with docker

1316
00:42:42,880 --> 00:42:46,000
the company being split apart the way it

1317
00:42:44,800 --> 00:42:49,280
has it's

1318
00:42:46,000 --> 00:42:50,800
kind of going away uh the other uh

1319
00:42:49,280 --> 00:42:52,160
the other big one that everybody sees

1320
00:42:50,800 --> 00:42:53,280
that everybody jumps up and down about

1321
00:42:52,160 --> 00:42:56,000
is kubernetes

1322
00:42:53,280 --> 00:42:57,200
uh kubernetes came out of google it's an

1323
00:42:56,000 --> 00:42:59,599
open source product

1324
00:42:57,200 --> 00:43:02,078
it is based on google's internal

1325
00:42:59,599 --> 00:43:04,720
orchestration system that they call borg

1326
00:43:02,079 --> 00:43:06,400
kubernetes is a monster it is

1327
00:43:04,720 --> 00:43:10,000
complicated it is

1328
00:43:06,400 --> 00:43:12,960
uh arguably resource heavy

1329
00:43:10,000 --> 00:43:13,839
um it is it is not something that your

1330
00:43:12,960 --> 00:43:16,240
average person

1331
00:43:13,839 --> 00:43:17,680
spins up in their basement for fun um

1332
00:43:16,240 --> 00:43:20,959
now there are those people

1333
00:43:17,680 --> 00:43:22,240
um they exist uh but kubernetes is is a

1334
00:43:20,960 --> 00:43:25,520
full-time job this is

1335
00:43:22,240 --> 00:43:28,078
this is not for the faint of heart uh

1336
00:43:25,520 --> 00:43:28,640
there's another one a little bit lesser

1337
00:43:28,079 --> 00:43:30,800
known

1338
00:43:28,640 --> 00:43:31,759
uh from a company called hashicorp it's

1339
00:43:30,800 --> 00:43:34,640
called nomad

1340
00:43:31,760 --> 00:43:35,599
so hashicorp is kind of famous for their

1341
00:43:34,640 --> 00:43:38,640
vault product

1342
00:43:35,599 --> 00:43:39,599
which is a secret storage product they

1343
00:43:38,640 --> 00:43:42,640
also have

1344
00:43:39,599 --> 00:43:44,960
something called console which is a a

1345
00:43:42,640 --> 00:43:46,799
service discovery system um and it also

1346
00:43:44,960 --> 00:43:48,400
do some service mesh stuff

1347
00:43:46,800 --> 00:43:50,079
uh and they have a bunch of other stuff

1348
00:43:48,400 --> 00:43:53,839
that's been coming out lately nomad

1349
00:43:50,079 --> 00:43:54,720
is um a fairly lightweight orchestration

1350
00:43:53,839 --> 00:43:57,599
system

1351
00:43:54,720 --> 00:43:59,200
that has an enormous scale they argue

1352
00:43:57,599 --> 00:44:00,640
they can scale better than kubernetes

1353
00:43:59,200 --> 00:44:02,640
i haven't seen that in practice but

1354
00:44:00,640 --> 00:44:05,359
there are some big places that use it

1355
00:44:02,640 --> 00:44:07,200
and nomad is is pretty simple it's a

1356
00:44:05,359 --> 00:44:08,880
single binary you put on the system

1357
00:44:07,200 --> 00:44:11,118
and it just does it does the

1358
00:44:08,880 --> 00:44:13,760
orchestration uh it runs

1359
00:44:11,119 --> 00:44:14,400
using the the same raft protocols that

1360
00:44:13,760 --> 00:44:17,440
console

1361
00:44:14,400 --> 00:44:18,560
and vault and all the other use um and

1362
00:44:17,440 --> 00:44:21,599
it is cross-platform

1363
00:44:18,560 --> 00:44:24,480
it runs on uh windows linux and mac

1364
00:44:21,599 --> 00:44:25,280
um so you can do uh and because of that

1365
00:44:24,480 --> 00:44:26,960
it runs

1366
00:44:25,280 --> 00:44:28,560
you know it's identical commands to run

1367
00:44:26,960 --> 00:44:30,319
across all the systems

1368
00:44:28,560 --> 00:44:31,680
so you can run entire clusters with this

1369
00:44:30,319 --> 00:44:34,480
and

1370
00:44:31,680 --> 00:44:35,839
it is if i understand i'm still learning

1371
00:44:34,480 --> 00:44:36,800
a little bit about nomad but if i

1372
00:44:35,839 --> 00:44:40,160
understand correctly

1373
00:44:36,800 --> 00:44:42,160
uh it is relatively easy to set this up

1374
00:44:40,160 --> 00:44:45,520
to run across regions

1375
00:44:42,160 --> 00:44:47,520
as well as across cloud providers

1376
00:44:45,520 --> 00:44:48,960
there's there you know the local areas

1377
00:44:47,520 --> 00:44:51,759
need like 10

1378
00:44:48,960 --> 00:44:52,160
milliseconds or something of time uh

1379
00:44:51,760 --> 00:44:55,839
where

1380
00:44:52,160 --> 00:44:56,160
where it uh uh up latency rather between

1381
00:44:55,839 --> 00:44:58,400
the

1382
00:44:56,160 --> 00:44:59,440
the master so they can do things but

1383
00:44:58,400 --> 00:45:01,520
there's

1384
00:44:59,440 --> 00:45:03,599
there's ways to put it into modes that

1385
00:45:01,520 --> 00:45:06,960
allow longer stuff

1386
00:45:03,599 --> 00:45:10,160
uh and the last one is marathon um

1387
00:45:06,960 --> 00:45:11,440
marathon was sort of a i believe it was

1388
00:45:10,160 --> 00:45:14,560
out before kubernetes

1389
00:45:11,440 --> 00:45:16,560
uh it was intended to be the big

1390
00:45:14,560 --> 00:45:18,000
you know we're gonna crush docker and

1391
00:45:16,560 --> 00:45:20,560
and this is what you're going to run big

1392
00:45:18,000 --> 00:45:22,240
systems on it's based on the apache

1393
00:45:20,560 --> 00:45:24,160
misos project

1394
00:45:22,240 --> 00:45:25,359
and while i love apache it seems like

1395
00:45:24,160 --> 00:45:26,078
all of their products that they come out

1396
00:45:25,359 --> 00:45:29,359
with are

1397
00:45:26,079 --> 00:45:30,640
incredibly complex um

1398
00:45:29,359 --> 00:45:32,720
i don't know how much marathon is out

1399
00:45:30,640 --> 00:45:33,359
there anymore uh it hasn't been updated

1400
00:45:32,720 --> 00:45:36,160
in a while

1401
00:45:33,359 --> 00:45:36,880
um it's been over a year at this point

1402
00:45:36,160 --> 00:45:39,920
um

1403
00:45:36,880 --> 00:45:42,240
and i'm not sure how much it's used uh

1404
00:45:39,920 --> 00:45:43,119
five years ago it was the big thing you

1405
00:45:42,240 --> 00:45:45,279
know it was

1406
00:45:43,119 --> 00:45:48,079
it was gonna win the world over and then

1407
00:45:45,280 --> 00:45:50,560
kubernetes came in and kind of you know

1408
00:45:48,079 --> 00:45:51,839
stole his lunch so um so those are the

1409
00:45:50,560 --> 00:45:54,240
big orchestration tools

1410
00:45:51,839 --> 00:45:55,599
there's a ton to go into on all of them

1411
00:45:54,240 --> 00:45:57,598
but that gets you kind of started in

1412
00:45:55,599 --> 00:46:00,400
which direction to look at

1413
00:45:57,599 --> 00:46:02,000
so to summarize containerization so

1414
00:46:00,400 --> 00:46:03,280
we're looking at small footprints

1415
00:46:02,000 --> 00:46:05,119
which is great because they're they're

1416
00:46:03,280 --> 00:46:06,319
small they're easy to manage move them

1417
00:46:05,119 --> 00:46:09,680
around all you want

1418
00:46:06,319 --> 00:46:11,200
uh rapid deployment um you know once the

1419
00:46:09,680 --> 00:46:13,279
once you get the first container out

1420
00:46:11,200 --> 00:46:14,720
there and you get that that sort of base

1421
00:46:13,280 --> 00:46:17,119
layer image

1422
00:46:14,720 --> 00:46:18,319
updating those is is really quick as

1423
00:46:17,119 --> 00:46:18,880
long as you're not changing those base

1424
00:46:18,319 --> 00:46:21,520
layers

1425
00:46:18,880 --> 00:46:22,960
updating them is really rapid and even

1426
00:46:21,520 --> 00:46:24,079
if you are changing the base layers

1427
00:46:22,960 --> 00:46:26,400
again

1428
00:46:24,079 --> 00:46:28,400
containers have small footprints um

1429
00:46:26,400 --> 00:46:31,040
please stop deploying full

1430
00:46:28,400 --> 00:46:31,760
ubuntu os containers that are gig in

1431
00:46:31,040 --> 00:46:34,160
size

1432
00:46:31,760 --> 00:46:35,680
you don't need that um you can get an

1433
00:46:34,160 --> 00:46:38,720
ubuntu container down to

1434
00:46:35,680 --> 00:46:40,078
you know a couple tens of megs uh or use

1435
00:46:38,720 --> 00:46:42,560
something like alpine that's

1436
00:46:40,079 --> 00:46:43,520
literally three megs and has everything

1437
00:46:42,560 --> 00:46:46,880
you need

1438
00:46:43,520 --> 00:46:48,480
uh pristine environments um you know

1439
00:46:46,880 --> 00:46:51,040
test it continue build a container you

1440
00:46:48,480 --> 00:46:52,640
can test it uh the one the really nice

1441
00:46:51,040 --> 00:46:56,720
thing that i love about containers

1442
00:46:52,640 --> 00:46:58,560
is um you know back back when you know

1443
00:46:56,720 --> 00:47:00,399
with developers and developing and

1444
00:46:58,560 --> 00:47:01,279
deploying things it would be that you

1445
00:47:00,400 --> 00:47:04,640
build

1446
00:47:01,280 --> 00:47:07,119
your uh you build your application you

1447
00:47:04,640 --> 00:47:08,400
deploy it to development and you test it

1448
00:47:07,119 --> 00:47:09,200
and it works and it's great and it's

1449
00:47:08,400 --> 00:47:10,640
wonderful

1450
00:47:09,200 --> 00:47:12,319
and then you take that same application

1451
00:47:10,640 --> 00:47:14,640
you deploy it to qa

1452
00:47:12,319 --> 00:47:16,400
and suddenly it's not working so great

1453
00:47:14,640 --> 00:47:19,359
because something in qa

1454
00:47:16,400 --> 00:47:22,000
on the os is a little bit different or

1455
00:47:19,359 --> 00:47:25,598
there's a config kind of out of place

1456
00:47:22,000 --> 00:47:27,359
you still can have that with containers

1457
00:47:25,599 --> 00:47:29,920
but it's much much less because the

1458
00:47:27,359 --> 00:47:31,598
container that you tested in dev

1459
00:47:29,920 --> 00:47:33,200
is exactly the same container that

1460
00:47:31,599 --> 00:47:34,800
you're running in qa

1461
00:47:33,200 --> 00:47:36,240
and the exactly the same container that

1462
00:47:34,800 --> 00:47:37,680
you're going to push to production

1463
00:47:36,240 --> 00:47:39,759
and the only difference that you should

1464
00:47:37,680 --> 00:47:40,480
have between all those environments are

1465
00:47:39,760 --> 00:47:43,839
things like

1466
00:47:40,480 --> 00:47:46,880
passwords uh uh

1467
00:47:43,839 --> 00:47:50,000
addresses to uh external resources like

1468
00:47:46,880 --> 00:47:50,559
uh databases and configurations that's

1469
00:47:50,000 --> 00:47:51,839
it

1470
00:47:50,559 --> 00:47:53,839
there's really no other difference you

1471
00:47:51,839 --> 00:47:57,520
should have the exact same binary

1472
00:47:53,839 --> 00:48:00,160
runs in all of them and once you test it

1473
00:47:57,520 --> 00:48:01,520
it should test clean everywhere else so

1474
00:48:00,160 --> 00:48:03,839
rapid deployments

1475
00:48:01,520 --> 00:48:05,599
with a pristine environment make things

1476
00:48:03,839 --> 00:48:08,480
much smoother to deploy

1477
00:48:05,599 --> 00:48:09,359
uh containers are immutable if you screw

1478
00:48:08,480 --> 00:48:10,400
up you know get in there

1479
00:48:09,359 --> 00:48:12,319
mess around with it screw up the

1480
00:48:10,400 --> 00:48:13,040
container kill it and restart it poof

1481
00:48:12,319 --> 00:48:15,599
your back to start

1482
00:48:13,040 --> 00:48:16,240
it's it's wonderful they are relatively

1483
00:48:15,599 --> 00:48:19,520
secure

1484
00:48:16,240 --> 00:48:20,240
um you know containers are new uh

1485
00:48:19,520 --> 00:48:22,880
kubernetes

1486
00:48:20,240 --> 00:48:24,000
is still new uh there's going to be like

1487
00:48:22,880 --> 00:48:26,480
any new thing

1488
00:48:24,000 --> 00:48:27,119
uh there's gonna be a lot of of exploits

1489
00:48:26,480 --> 00:48:29,040
found

1490
00:48:27,119 --> 00:48:30,559
um just like there was with virtual

1491
00:48:29,040 --> 00:48:32,720
machines just like they're they're

1492
00:48:30,559 --> 00:48:34,079
they're it you know continues to be with

1493
00:48:32,720 --> 00:48:37,118
with uh

1494
00:48:34,079 --> 00:48:38,880
bare metal systems but

1495
00:48:37,119 --> 00:48:40,240
they're secure they're designed to be

1496
00:48:38,880 --> 00:48:41,839
secure and

1497
00:48:40,240 --> 00:48:44,558
while you can break out of them and

1498
00:48:41,839 --> 00:48:45,920
there are ways around systems if you

1499
00:48:44,559 --> 00:48:47,680
build it the right way

1500
00:48:45,920 --> 00:48:50,000
and you put you know your base level

1501
00:48:47,680 --> 00:48:52,399
security in place on your hosts and

1502
00:48:50,000 --> 00:48:53,680
and in your containers you you're kind

1503
00:48:52,400 --> 00:48:55,599
of ahead of the crowd

1504
00:48:53,680 --> 00:48:56,720
uh they're portable um we've talked

1505
00:48:55,599 --> 00:48:59,839
about that to death and

1506
00:48:56,720 --> 00:49:02,959
and ci cd friendly um you know building

1507
00:48:59,839 --> 00:49:04,720
building a a continuous integration

1508
00:49:02,960 --> 00:49:07,760
continuous deployment workflow

1509
00:49:04,720 --> 00:49:09,680
for a container is brilliantly simple

1510
00:49:07,760 --> 00:49:11,119
because the once you move it to that

1511
00:49:09,680 --> 00:49:12,558
first environment moving it to the other

1512
00:49:11,119 --> 00:49:15,680
environments is exactly the same

1513
00:49:12,559 --> 00:49:16,880
so whereas it would take you know dozens

1514
00:49:15,680 --> 00:49:20,160
of commands to get

1515
00:49:16,880 --> 00:49:22,000
things into the dev environment and then

1516
00:49:20,160 --> 00:49:23,680
all sorts of changes to those commands

1517
00:49:22,000 --> 00:49:25,119
to get into the qa environment

1518
00:49:23,680 --> 00:49:27,118
you know these days i'm finding that i

1519
00:49:25,119 --> 00:49:27,680
can do deployment to each environment

1520
00:49:27,119 --> 00:49:29,280
using

1521
00:49:27,680 --> 00:49:30,480
a single command and it works exactly

1522
00:49:29,280 --> 00:49:32,400
the same the only thing i'm doing is

1523
00:49:30,480 --> 00:49:41,920
changing the destination

1524
00:49:32,400 --> 00:49:41,920
for that that container it's great

