1
00:00:00,980 --> 00:00:04,910
[Music]

2
00:00:05,200 --> 00:00:08,960
all right

3
00:00:06,560 --> 00:00:10,719
we are here and we are going to be doing

4
00:00:08,960 --> 00:00:12,960
scary and pen testing the great

5
00:00:10,719 --> 00:00:15,678
spaghetti monster as i like to call it

6
00:00:12,960 --> 00:00:16,480
or kubernetes there's all my contact

7
00:00:15,679 --> 00:00:19,520
info

8
00:00:16,480 --> 00:00:20,000
um thanks first to the besides delaware

9
00:00:19,520 --> 00:00:22,880
team

10
00:00:20,000 --> 00:00:23,279
for putting this all together so quickly

11
00:00:22,880 --> 00:00:25,359
um

12
00:00:23,279 --> 00:00:27,599
don't know how they did it but it seems

13
00:00:25,359 --> 00:00:30,880
to be going quite well

14
00:00:27,599 --> 00:00:33,920
um let's get started um

15
00:00:30,880 --> 00:00:34,879
just a quick who am i i actually run um

16
00:00:33,920 --> 00:00:36,559
besides

17
00:00:34,880 --> 00:00:37,680
chicago we didn't do it this year

18
00:00:36,559 --> 00:00:38,959
because it would have been the 10th

19
00:00:37,680 --> 00:00:39,680
anniversary and it would have been kind

20
00:00:38,960 --> 00:00:41,920
of

21
00:00:39,680 --> 00:00:42,960
sucky trying to do the 10th anniversary

22
00:00:41,920 --> 00:00:46,320
virtually

23
00:00:42,960 --> 00:00:49,440
there's other info about me i'm based

24
00:00:46,320 --> 00:00:50,559
in beautiful kirkland as you can see if

25
00:00:49,440 --> 00:00:52,640
you're looking out there is the

26
00:00:50,559 --> 00:00:55,680
beautiful pacific northwest

27
00:00:52,640 --> 00:00:59,359
you will typically find me sipping

28
00:00:55,680 --> 00:01:01,359
grand mayan extra nejos or casa noble

29
00:00:59,359 --> 00:01:03,120
i don't have any today i'm stuck with a

30
00:01:01,359 --> 00:01:06,640
red bull but hey

31
00:01:03,120 --> 00:01:10,240
um we will we will get going i love

32
00:01:06,640 --> 00:01:12,240
um dancing flamingos as well as honey

33
00:01:10,240 --> 00:01:14,240
pots and refrigerators and i must

34
00:01:12,240 --> 00:01:16,880
introduce you to sasha

35
00:01:14,240 --> 00:01:17,439
the dancing flamingo because she helps

36
00:01:16,880 --> 00:01:19,920
me with

37
00:01:17,439 --> 00:01:20,559
all my troubles oh got her head spinning

38
00:01:19,920 --> 00:01:23,680
around

39
00:01:20,560 --> 00:01:26,080
so that is sasha you have now met the

40
00:01:23,680 --> 00:01:28,960
dancing flamingo that i always

41
00:01:26,080 --> 00:01:29,840
talk about also i love to cook and the

42
00:01:28,960 --> 00:01:32,640
only reason i

43
00:01:29,840 --> 00:01:33,439
i put that up there um yesterday i got

44
00:01:32,640 --> 00:01:35,759
bored

45
00:01:33,439 --> 00:01:36,559
and i put this spice rack up in my

46
00:01:35,759 --> 00:01:38,960
kitchen

47
00:01:36,560 --> 00:01:40,320
so i thought i'd share a picture of it

48
00:01:38,960 --> 00:01:43,520
hey you should all

49
00:01:40,320 --> 00:01:45,520
be laughing now hopefully you are

50
00:01:43,520 --> 00:01:46,560
let's get started with some real stuff

51
00:01:45,520 --> 00:01:49,119
first of all

52
00:01:46,560 --> 00:01:50,960
here's my typical disclaimer everyone

53
00:01:49,119 --> 00:01:52,880
has these but the views and opinions

54
00:01:50,960 --> 00:01:57,039
here are going to be mine

55
00:01:52,880 --> 00:01:59,039
no past or present employers

56
00:01:57,040 --> 00:02:00,240
and that's the important part and

57
00:01:59,040 --> 00:02:04,399
anything i show you

58
00:02:00,240 --> 00:02:06,560
if you decide to utilize it in ways

59
00:02:04,399 --> 00:02:07,920
outside of my control well that's up to

60
00:02:06,560 --> 00:02:09,598
you

61
00:02:07,920 --> 00:02:11,280
those of you with an overwhelming fear

62
00:02:09,598 --> 00:02:11,840
of the unknown will be happy to learn

63
00:02:11,280 --> 00:02:14,080
that there

64
00:02:11,840 --> 00:02:16,480
is no hidden message if you read this

65
00:02:14,080 --> 00:02:19,120
disclaimer backwards

66
00:02:16,480 --> 00:02:20,840
all right now to some seriousness why

67
00:02:19,120 --> 00:02:23,760
are we not

68
00:02:20,840 --> 00:02:26,480
here well i'm not going to solve

69
00:02:23,760 --> 00:02:28,560
all your kubernetes security woes can't

70
00:02:26,480 --> 00:02:31,280
do it it's not going to happen today

71
00:02:28,560 --> 00:02:33,519
we'll solve some of them maybe so let's

72
00:02:31,280 --> 00:02:36,480
see how that's going to happen

73
00:02:33,519 --> 00:02:36,800
um neither will the person i don't know

74
00:02:36,480 --> 00:02:38,720
about

75
00:02:36,800 --> 00:02:40,640
sitting next to you but neither will the

76
00:02:38,720 --> 00:02:41,599
person next to you whether it's on video

77
00:02:40,640 --> 00:02:45,518
there's someone there

78
00:02:41,599 --> 00:02:49,119
who knows why because it's kind of

79
00:02:45,519 --> 00:02:51,440
of complex but something to remember

80
00:02:49,120 --> 00:02:52,400
common sense went out the window decades

81
00:02:51,440 --> 00:02:56,239
ago

82
00:02:52,400 --> 00:02:59,840
keep that in mind why are we here

83
00:02:56,239 --> 00:03:03,040
well kubernetes is still new

84
00:02:59,840 --> 00:03:03,360
for the most part is are everybody using

85
00:03:03,040 --> 00:03:06,879
it

86
00:03:03,360 --> 00:03:09,599
no are a lot of people moving to it

87
00:03:06,879 --> 00:03:10,239
yes it's very fun it's it's kind of

88
00:03:09,599 --> 00:03:13,280
crazy

89
00:03:10,239 --> 00:03:15,360
and fun oh did i say fun twice

90
00:03:13,280 --> 00:03:16,879
i might have you can't see it and i

91
00:03:15,360 --> 00:03:17,760
can't pick it up because the cables

92
00:03:16,879 --> 00:03:20,079
aren't long enough

93
00:03:17,760 --> 00:03:21,120
i have a cooper put kubernetes cluster

94
00:03:20,080 --> 00:03:23,200
right behind me

95
00:03:21,120 --> 00:03:24,879
in my little raspberry pi's i've got

96
00:03:23,200 --> 00:03:26,399
four of them stacked we'll talk about

97
00:03:24,879 --> 00:03:29,679
that in a little bit

98
00:03:26,400 --> 00:03:30,000
containers are not new but the problem

99
00:03:29,680 --> 00:03:33,040
is

100
00:03:30,000 --> 00:03:37,360
people seem to have forgotten

101
00:03:33,040 --> 00:03:40,079
that containers are still very important

102
00:03:37,360 --> 00:03:42,159
security is for everyone not just system

103
00:03:40,080 --> 00:03:44,159
administrators and security

104
00:03:42,159 --> 00:03:45,200
engineers and so on so we're going to

105
00:03:44,159 --> 00:03:48,959
talk about that

106
00:03:45,200 --> 00:03:49,599
detail and common sense is required so

107
00:03:48,959 --> 00:03:53,519
please

108
00:03:49,599 --> 00:03:55,920
disregard the previous slide

109
00:03:53,519 --> 00:03:57,280
all right first of all it helps

110
00:03:55,920 --> 00:03:59,040
understand what is a breach

111
00:03:57,280 --> 00:04:01,760
why because i'm going to talk about this

112
00:03:59,040 --> 00:04:04,319
as we look at the security of kubernetes

113
00:04:01,760 --> 00:04:05,040
most breaches are not zero-day they're

114
00:04:04,319 --> 00:04:08,319
not

115
00:04:05,040 --> 00:04:09,840
fancy you don't read about breaches that

116
00:04:08,319 --> 00:04:11,760
are caused by

117
00:04:09,840 --> 00:04:13,840
somebody getting in doing something

118
00:04:11,760 --> 00:04:14,640
fancy and all of this it's typically a

119
00:04:13,840 --> 00:04:17,358
screw-up

120
00:04:14,640 --> 00:04:18,880
most breeches um are not coming from

121
00:04:17,358 --> 00:04:21,599
vulnerability scanners

122
00:04:18,880 --> 00:04:22,320
what do they come from configuration

123
00:04:21,600 --> 00:04:25,360
issues

124
00:04:22,320 --> 00:04:27,560
typically someone i i've seen this

125
00:04:25,360 --> 00:04:29,120
numerous times where people put

126
00:04:27,560 --> 00:04:31,680
credentials

127
00:04:29,120 --> 00:04:32,880
into configuration files and then put

128
00:04:31,680 --> 00:04:35,120
them out on github

129
00:04:32,880 --> 00:04:36,240
and then they use that to store their

130
00:04:35,120 --> 00:04:38,000
configurations

131
00:04:36,240 --> 00:04:40,080
they launch it and they wonder why

132
00:04:38,000 --> 00:04:43,600
whatever they launched got broken into

133
00:04:40,080 --> 00:04:46,560
because the credentials were compromised

134
00:04:43,600 --> 00:04:46,960
also well compromised credentials which

135
00:04:46,560 --> 00:04:50,320
come

136
00:04:46,960 --> 00:04:53,198
out of the configuration issues

137
00:04:50,320 --> 00:04:53,759
and finally trailing in a third place

138
00:04:53,199 --> 00:04:56,720
are

139
00:04:53,759 --> 00:04:57,919
over privileged users or over-privileged

140
00:04:56,720 --> 00:05:00,960
accounts

141
00:04:57,919 --> 00:05:02,560
um tokens etc we're going to talk about

142
00:05:00,960 --> 00:05:05,198
that how it affects

143
00:05:02,560 --> 00:05:07,199
kubernetes why because kubernetes has

144
00:05:05,199 --> 00:05:09,280
all three of these things that we have

145
00:05:07,199 --> 00:05:13,039
to worry about

146
00:05:09,280 --> 00:05:14,400
now um think about some of the breaches

147
00:05:13,039 --> 00:05:17,599
that have occurred

148
00:05:14,400 --> 00:05:19,679
capital one if if you don't know of all

149
00:05:17,600 --> 00:05:21,759
the details go take a look at it but

150
00:05:19,680 --> 00:05:24,160
honestly it started

151
00:05:21,759 --> 00:05:26,240
with compromise credentials gaining

152
00:05:24,160 --> 00:05:28,560
access to an s3 bucket which had

153
00:05:26,240 --> 00:05:29,280
more information in it which then dumped

154
00:05:28,560 --> 00:05:32,880
it out

155
00:05:29,280 --> 00:05:35,919
and it just went on and on equifax was

156
00:05:32,880 --> 00:05:38,320
broken into via a vulnerability

157
00:05:35,919 --> 00:05:39,840
um which should have been patched but

158
00:05:38,320 --> 00:05:40,960
one of the big problems was they

159
00:05:39,840 --> 00:05:44,159
couldn't detect

160
00:05:40,960 --> 00:05:46,719
once they got in lateral movement um

161
00:05:44,160 --> 00:05:47,600
tesla resources are constantly being

162
00:05:46,720 --> 00:05:49,759
hacked

163
00:05:47,600 --> 00:05:51,199
um i've worked in environments where we

164
00:05:49,759 --> 00:05:53,440
had internal threats

165
00:05:51,199 --> 00:05:55,840
launching all sorts of things the point

166
00:05:53,440 --> 00:05:57,759
is people are forgetting about the

167
00:05:55,840 --> 00:06:00,159
security of the container

168
00:05:57,759 --> 00:06:01,759
and the security of kubernetes that's

169
00:06:00,160 --> 00:06:03,360
what we're going to talk about here

170
00:06:01,759 --> 00:06:05,280
so let's go into containers we're going

171
00:06:03,360 --> 00:06:08,479
to have a quick review

172
00:06:05,280 --> 00:06:10,239
containers are not secured by the fire

173
00:06:08,479 --> 00:06:11,680
everyone wants to say oh it's a

174
00:06:10,240 --> 00:06:14,319
container it's

175
00:06:11,680 --> 00:06:15,520
it that that thing that is a container

176
00:06:14,319 --> 00:06:17,680
is secure

177
00:06:15,520 --> 00:06:18,799
it must be because it's you know wrapped

178
00:06:17,680 --> 00:06:21,520
in i don't know

179
00:06:18,800 --> 00:06:23,120
steel or something but it's not it's a

180
00:06:21,520 --> 00:06:25,919
grouping of stuff

181
00:06:23,120 --> 00:06:27,919
and that stuff are resources resources

182
00:06:25,919 --> 00:06:31,120
are grouped into what we call

183
00:06:27,919 --> 00:06:33,198
namespaces when you look at a namespace

184
00:06:31,120 --> 00:06:34,639
it's going to create it's going to

185
00:06:33,199 --> 00:06:37,840
contain

186
00:06:34,639 --> 00:06:42,240
processes networks users

187
00:06:37,840 --> 00:06:43,599
ports ipc points anything within a

188
00:06:42,240 --> 00:06:47,280
namespace

189
00:06:43,600 --> 00:06:50,240
can be exploited cpus

190
00:06:47,280 --> 00:06:51,039
memory so on think about all of these

191
00:06:50,240 --> 00:06:53,360
things

192
00:06:51,039 --> 00:06:55,520
we're going to use a construct known as

193
00:06:53,360 --> 00:06:57,919
a c group or a control group

194
00:06:55,520 --> 00:06:59,840
and we're going to use those to limit

195
00:06:57,919 --> 00:07:03,120
the resources

196
00:06:59,840 --> 00:07:06,560
i've had numerous times where i've done

197
00:07:03,120 --> 00:07:09,199
a security review for an

198
00:07:06,560 --> 00:07:10,960
application at one of my companies or at

199
00:07:09,199 --> 00:07:14,639
a company that i've worked at

200
00:07:10,960 --> 00:07:17,680
and i would get into the application

201
00:07:14,639 --> 00:07:20,560
and then elevate privilege why because

202
00:07:17,680 --> 00:07:22,560
well they didn't quite do the securities

203
00:07:20,560 --> 00:07:24,080
uh security correctly when i elevate

204
00:07:22,560 --> 00:07:27,039
privilege i'm able to take over the

205
00:07:24,080 --> 00:07:30,240
container and because they didn't have

206
00:07:27,039 --> 00:07:33,440
namespace controls or c group controls

207
00:07:30,240 --> 00:07:36,319
of cpu and memory i took over the entire

208
00:07:33,440 --> 00:07:37,680
node that the container was running on

209
00:07:36,319 --> 00:07:40,240
that node could be

210
00:07:37,680 --> 00:07:41,199
very very large and yet you can take

211
00:07:40,240 --> 00:07:44,639
over the entire

212
00:07:41,199 --> 00:07:46,960
system this well

213
00:07:44,639 --> 00:07:48,000
kind of an image is worth a thousand

214
00:07:46,960 --> 00:07:50,799
words here when you

215
00:07:48,000 --> 00:07:52,800
look at a container think of it this way

216
00:07:50,800 --> 00:07:56,560
think of a container as a file

217
00:07:52,800 --> 00:07:57,440
system snapshot who decides what that

218
00:07:56,560 --> 00:08:00,479
snapshot

219
00:07:57,440 --> 00:08:03,360
is going to contain well you do um

220
00:08:00,479 --> 00:08:03,680
or the the developer might it's going to

221
00:08:03,360 --> 00:08:07,360
be

222
00:08:03,680 --> 00:08:10,879
stripped down you don't need the entire

223
00:08:07,360 --> 00:08:12,879
ubuntu image inside a container

224
00:08:10,879 --> 00:08:14,319
with everything in it i've seen people

225
00:08:12,879 --> 00:08:16,720
create a container

226
00:08:14,319 --> 00:08:17,440
that actually has nmap and netcat

227
00:08:16,720 --> 00:08:19,680
installed

228
00:08:17,440 --> 00:08:21,199
in the container because that was the

229
00:08:19,680 --> 00:08:23,039
image they built it on

230
00:08:21,199 --> 00:08:25,759
and i just kind of scratched my head and

231
00:08:23,039 --> 00:08:29,520
went why are you doing this

232
00:08:25,759 --> 00:08:31,599
also are containers really isolated

233
00:08:29,520 --> 00:08:32,958
well maybe not and we're going to see

234
00:08:31,599 --> 00:08:36,399
that in just a minute

235
00:08:32,958 --> 00:08:38,159
but when you look at the overall picture

236
00:08:36,399 --> 00:08:40,000
here you see your applications there's

237
00:08:38,159 --> 00:08:43,519
your name spaces in your c

238
00:08:40,000 --> 00:08:46,160
groups possibly to rooted maybe not

239
00:08:43,519 --> 00:08:47,279
depending on how they they set it up you

240
00:08:46,160 --> 00:08:50,399
have a docker

241
00:08:47,279 --> 00:08:51,360
registry a docker registry is where the

242
00:08:50,399 --> 00:08:53,839
container

243
00:08:51,360 --> 00:08:56,640
or the image is going to come from

244
00:08:53,839 --> 00:08:57,680
please don't load your images directly

245
00:08:56,640 --> 00:09:00,080
from the internet

246
00:08:57,680 --> 00:09:01,439
you should have your own lockdown and

247
00:09:00,080 --> 00:09:04,480
secure

248
00:09:01,440 --> 00:09:06,399
docker registry for all of your images

249
00:09:04,480 --> 00:09:09,600
and in fact these images should be

250
00:09:06,399 --> 00:09:12,080
hardened using cis benchmarks

251
00:09:09,600 --> 00:09:13,360
something we'll talk about in a second

252
00:09:12,080 --> 00:09:15,920
there is a host os

253
00:09:13,360 --> 00:09:17,920
and there is hardware the important part

254
00:09:15,920 --> 00:09:21,599
to remember here

255
00:09:17,920 --> 00:09:24,000
is this isn't like virtualization this

256
00:09:21,600 --> 00:09:26,399
isn't like running on a hypervisor

257
00:09:24,000 --> 00:09:29,519
meaning which is more secure well let's

258
00:09:26,399 --> 00:09:30,399
actually talk about we'll talk about

259
00:09:29,519 --> 00:09:32,320
just a second

260
00:09:30,399 --> 00:09:35,040
um i forgot about my best practices

261
00:09:32,320 --> 00:09:36,560
slide so

262
00:09:35,040 --> 00:09:39,120
these are the tips you want to think

263
00:09:36,560 --> 00:09:40,800
about um for working with containers i

264
00:09:39,120 --> 00:09:43,360
already mentioned your base

265
00:09:40,800 --> 00:09:44,000
image your base image should be stripped

266
00:09:43,360 --> 00:09:47,040
down

267
00:09:44,000 --> 00:09:48,959
it should be hardened using cis

268
00:09:47,040 --> 00:09:51,599
um benchmarks if you don't want what

269
00:09:48,959 --> 00:09:51,920
they are cissecurity.org you can go

270
00:09:51,600 --> 00:09:54,320
there

271
00:09:51,920 --> 00:09:56,640
check it out get a membership for your

272
00:09:54,320 --> 00:09:58,640
company if you don't already have one

273
00:09:56,640 --> 00:10:00,080
it's going to be it's going to help you

274
00:09:58,640 --> 00:10:02,800
in a lot of ways

275
00:10:00,080 --> 00:10:03,680
okay don't run your containers as root

276
00:10:02,800 --> 00:10:06,719
it's still

277
00:10:03,680 --> 00:10:09,920
tends to be happening by people

278
00:10:06,720 --> 00:10:12,720
also we need visibility we need

279
00:10:09,920 --> 00:10:15,680
monitoring within the containers going

280
00:10:12,720 --> 00:10:18,959
to talk about that in just a second

281
00:10:15,680 --> 00:10:22,239
think about the domino effect what do i

282
00:10:18,959 --> 00:10:24,880
mean by that if one container falls

283
00:10:22,240 --> 00:10:25,600
i guarantee you the rest of them are

284
00:10:24,880 --> 00:10:29,680
going to

285
00:10:25,600 --> 00:10:32,880
fall within a workspace

286
00:10:29,680 --> 00:10:36,000
okay we also don't want to allow

287
00:10:32,880 --> 00:10:38,399
new privileges it's very easy to set

288
00:10:36,000 --> 00:10:39,440
no elevated privileges or elevated

289
00:10:38,399 --> 00:10:42,480
privileges

290
00:10:39,440 --> 00:10:44,720
set to be false so if an account

291
00:10:42,480 --> 00:10:46,000
is compromised it won't be able to

292
00:10:44,720 --> 00:10:49,440
elevate privileges

293
00:10:46,000 --> 00:10:51,680
this is important secrets management

294
00:10:49,440 --> 00:10:52,480
as i mentioned earlier please don't put

295
00:10:51,680 --> 00:10:56,079
credentials

296
00:10:52,480 --> 00:10:56,480
in the configuration files yesterday i

297
00:10:56,079 --> 00:10:59,040
was

298
00:10:56,480 --> 00:11:00,079
i was going through some old files that

299
00:10:59,040 --> 00:11:03,360
i had

300
00:11:00,079 --> 00:11:06,640
from some previous work i had done

301
00:11:03,360 --> 00:11:07,760
at another environment and i found all

302
00:11:06,640 --> 00:11:10,880
these examples

303
00:11:07,760 --> 00:11:12,160
of programs and in those these were not

304
00:11:10,880 --> 00:11:14,399
things i had done

305
00:11:12,160 --> 00:11:17,199
and in those programs and the

306
00:11:14,399 --> 00:11:20,160
configurations these were yaml files

307
00:11:17,200 --> 00:11:20,959
um there were all the credentials i had

308
00:11:20,160 --> 00:11:23,760
aws

309
00:11:20,959 --> 00:11:24,959
tokens private tokens i had keys i had

310
00:11:23,760 --> 00:11:27,120
all sorts of things

311
00:11:24,959 --> 00:11:28,719
and the worst part is even those these

312
00:11:27,120 --> 00:11:32,320
were three years old

313
00:11:28,720 --> 00:11:35,360
they were still valid i tested a couple

314
00:11:32,320 --> 00:11:37,920
um i didn't notify the people um

315
00:11:35,360 --> 00:11:38,959
because well i believe in in that but

316
00:11:37,920 --> 00:11:42,160
honestly

317
00:11:38,959 --> 00:11:42,719
um it's still happening i can't say it

318
00:11:42,160 --> 00:11:46,000
enough

319
00:11:42,720 --> 00:11:49,920
and stop allowing ssh when you build a

320
00:11:46,000 --> 00:11:51,279
kubernetes environment you have a master

321
00:11:49,920 --> 00:11:54,880
node and then you're going to have

322
00:11:51,279 --> 00:11:57,200
worker nodes do not allow ssh

323
00:11:54,880 --> 00:11:58,880
into those worker nodes i still see

324
00:11:57,200 --> 00:12:02,320
people allowing that

325
00:11:58,880 --> 00:12:03,200
you get in via ssh you're underneath the

326
00:12:02,320 --> 00:12:06,720
radar

327
00:12:03,200 --> 00:12:09,839
of kubernetes kubernetes can't see you

328
00:12:06,720 --> 00:12:12,959
if that's happening so keep that in mind

329
00:12:09,839 --> 00:12:14,160
all right name space limits i can't say

330
00:12:12,959 --> 00:12:17,439
it enough

331
00:12:14,160 --> 00:12:20,480
look it up look up see sealant or

332
00:12:17,440 --> 00:12:21,440
the c groups because you really want to

333
00:12:20,480 --> 00:12:25,120
get into

334
00:12:21,440 --> 00:12:28,480
locking things down when you do it

335
00:12:25,120 --> 00:12:29,120
um here's here's an actual um very

336
00:12:28,480 --> 00:12:32,800
useful

337
00:12:29,120 --> 00:12:34,639
tool it's called docker slim docker slim

338
00:12:32,800 --> 00:12:37,359
will take your image let's say your

339
00:12:34,639 --> 00:12:38,880
your application runs under ubuntu so

340
00:12:37,360 --> 00:12:41,600
you're building an application you've

341
00:12:38,880 --> 00:12:43,519
got your docker registry is configured

342
00:12:41,600 --> 00:12:45,040
you you have it somewhat locked down but

343
00:12:43,519 --> 00:12:48,800
when you go to launch the

344
00:12:45,040 --> 00:12:51,279
image it's still let's say 300 megabytes

345
00:12:48,800 --> 00:12:52,240
run it through docker slim and what you

346
00:12:51,279 --> 00:12:54,720
end up with

347
00:12:52,240 --> 00:12:55,279
is a is a base container image that

348
00:12:54,720 --> 00:12:58,639
might be

349
00:12:55,279 --> 00:13:00,720
30 meg and will have kind of some

350
00:12:58,639 --> 00:13:02,880
security best practices

351
00:13:00,720 --> 00:13:04,079
locked into it by the way i will make my

352
00:13:02,880 --> 00:13:06,720
slides available

353
00:13:04,079 --> 00:13:07,680
after the talk so you don't have to

354
00:13:06,720 --> 00:13:10,880
memorize

355
00:13:07,680 --> 00:13:12,800
um all these links that that will be in

356
00:13:10,880 --> 00:13:17,600
the talks coming up

357
00:13:12,800 --> 00:13:19,599
um also apply se linux and or app armor

358
00:13:17,600 --> 00:13:21,760
this should go without saying it's not

359
00:13:19,600 --> 00:13:22,959
difficult you turn it on

360
00:13:21,760 --> 00:13:25,200
there are some things you have to

361
00:13:22,959 --> 00:13:27,040
configure docker slim helps you with

362
00:13:25,200 --> 00:13:29,360
that but so will things like

363
00:13:27,040 --> 00:13:30,639
a few of the other tools we're about to

364
00:13:29,360 --> 00:13:34,160
talk about kubota

365
00:13:30,639 --> 00:13:36,240
could bench and so on and remember

366
00:13:34,160 --> 00:13:38,160
think about it this way when you're

367
00:13:36,240 --> 00:13:40,720
thinking about containers and

368
00:13:38,160 --> 00:13:42,240
kubernetes think about it as an

369
00:13:40,720 --> 00:13:46,240
infrastructure

370
00:13:42,240 --> 00:13:49,680
remember your old the old end times

371
00:13:46,240 --> 00:13:50,320
if you will of working with a large you

372
00:13:49,680 --> 00:13:53,599
know

373
00:13:50,320 --> 00:13:55,440
um server metal that we're we're putting

374
00:13:53,600 --> 00:13:56,240
an operating system on and we put

375
00:13:55,440 --> 00:13:58,480
another

376
00:13:56,240 --> 00:13:59,440
application on another operating system

377
00:13:58,480 --> 00:14:02,000
but we lock

378
00:13:59,440 --> 00:14:02,880
down the network we lock down the

379
00:14:02,000 --> 00:14:05,839
infrastructure

380
00:14:02,880 --> 00:14:06,800
each one of the systems and monitoring

381
00:14:05,839 --> 00:14:09,279
and so on

382
00:14:06,800 --> 00:14:10,240
think about these best practices that

383
00:14:09,279 --> 00:14:13,920
you used

384
00:14:10,240 --> 00:14:17,839
then and put them into practice

385
00:14:13,920 --> 00:14:20,479
in both your containers and kubernetes

386
00:14:17,839 --> 00:14:21,680
so i mentioned i would talk about the

387
00:14:20,480 --> 00:14:24,160
difference between

388
00:14:21,680 --> 00:14:26,399
a vm versus a container so here's

389
00:14:24,160 --> 00:14:27,040
another picture worth a thousand words

390
00:14:26,399 --> 00:14:30,480
here

391
00:14:27,040 --> 00:14:32,639
we see an old environment where we have

392
00:14:30,480 --> 00:14:34,480
the hardware the operating system and

393
00:14:32,639 --> 00:14:37,040
then we have applications running on top

394
00:14:34,480 --> 00:14:40,240
of it everybody's used to that

395
00:14:37,040 --> 00:14:42,480
then we we go into the virtual system

396
00:14:40,240 --> 00:14:44,959
hardware operating system we have a

397
00:14:42,480 --> 00:14:48,240
hypervisor but that hypervisor

398
00:14:44,959 --> 00:14:49,599
is virtualizing hardware that's the

399
00:14:48,240 --> 00:14:51,839
thing you want to think about

400
00:14:49,600 --> 00:14:52,720
so we end up with virtual machines

401
00:14:51,839 --> 00:14:56,480
they're very

402
00:14:52,720 --> 00:14:59,680
isolated from the other virtual machines

403
00:14:56,480 --> 00:15:00,720
why because the hypervisor has split up

404
00:14:59,680 --> 00:15:03,920
the hardware

405
00:15:00,720 --> 00:15:07,519
and in a way it's taking care of those

406
00:15:03,920 --> 00:15:09,199
c group limits and various other control

407
00:15:07,519 --> 00:15:12,399
mechanisms that are in there

408
00:15:09,199 --> 00:15:14,240
but when we get to containers we have

409
00:15:12,399 --> 00:15:16,959
the hardware the operating system there

410
00:15:14,240 --> 00:15:20,320
is a container runtime library

411
00:15:16,959 --> 00:15:21,518
but then we run these containers within

412
00:15:20,320 --> 00:15:24,639
the infrastructure

413
00:15:21,519 --> 00:15:27,120
of that environment it's more

414
00:15:24,639 --> 00:15:29,120
software virtualization and if it's

415
00:15:27,120 --> 00:15:32,399
software virtualization

416
00:15:29,120 --> 00:15:35,519
yes you can screw it up you can screw up

417
00:15:32,399 --> 00:15:38,560
a hypervisor environment too

418
00:15:35,519 --> 00:15:42,079
but it's much easier to

419
00:15:38,560 --> 00:15:44,000
screw up the security of a container

420
00:15:42,079 --> 00:15:45,439
um when you're when you're working in a

421
00:15:44,000 --> 00:15:49,040
software environment

422
00:15:45,440 --> 00:15:51,600
i do love kubernetes but it's also

423
00:15:49,040 --> 00:15:52,399
always being updated is this a great

424
00:15:51,600 --> 00:15:54,399
defense

425
00:15:52,399 --> 00:15:56,480
well you know first we inundate them

426
00:15:54,399 --> 00:15:59,040
with quarterly kubernetes releases

427
00:15:56,480 --> 00:16:00,160
i just got an update this morning of a

428
00:15:59,040 --> 00:16:03,040
kubernetes

429
00:16:00,160 --> 00:16:05,199
a new kubernetes release and there'll be

430
00:16:03,040 --> 00:16:08,079
another one coming in about two weeks

431
00:16:05,199 --> 00:16:10,800
who knows but that's why you need to

432
00:16:08,079 --> 00:16:12,638
keep your environment very flexible

433
00:16:10,800 --> 00:16:14,719
because you need to be able to roll your

434
00:16:12,639 --> 00:16:15,600
upgrades in we'll show that in just a

435
00:16:14,720 --> 00:16:19,040
second

436
00:16:15,600 --> 00:16:21,360
so here's kubernetes 101. um i can't do

437
00:16:19,040 --> 00:16:22,399
all of it because this is only a 45 50

438
00:16:21,360 --> 00:16:26,480
minute session

439
00:16:22,399 --> 00:16:29,199
so here we go we have a master node

440
00:16:26,480 --> 00:16:30,240
that node pretty much manages everything

441
00:16:29,199 --> 00:16:32,880
in the environment

442
00:16:30,240 --> 00:16:34,079
it's going to deploy your pods out on

443
00:16:32,880 --> 00:16:37,360
the other nodes

444
00:16:34,079 --> 00:16:39,120
it deploys pods within worker nodes now

445
00:16:37,360 --> 00:16:42,399
here's something important

446
00:16:39,120 --> 00:16:44,720
an important concept a pod is a unit of

447
00:16:42,399 --> 00:16:47,759
deployment and addressability

448
00:16:44,720 --> 00:16:48,959
in other words think of a pod which can

449
00:16:47,759 --> 00:16:52,240
have more than one

450
00:16:48,959 --> 00:16:56,040
container but think of a pod as a system

451
00:16:52,240 --> 00:16:59,440
that vm if you will put individual

452
00:16:56,040 --> 00:17:02,399
applications within the pods something

453
00:16:59,440 --> 00:17:04,720
that can run within that pod

454
00:17:02,399 --> 00:17:05,760
within the environment and be kind of

455
00:17:04,720 --> 00:17:08,799
locked down

456
00:17:05,760 --> 00:17:09,119
think of it like a subnet or a vlan you

457
00:17:08,799 --> 00:17:11,520
know

458
00:17:09,119 --> 00:17:12,639
you want to be able to group the

459
00:17:11,520 --> 00:17:16,480
applications

460
00:17:12,640 --> 00:17:18,319
in your pods um with security in mind

461
00:17:16,480 --> 00:17:20,319
and this is something that people forget

462
00:17:18,319 --> 00:17:21,438
about they just kind of start deploying

463
00:17:20,319 --> 00:17:23,599
containers

464
00:17:21,439 --> 00:17:24,480
and they all go into the same default

465
00:17:23,599 --> 00:17:26,319
pod

466
00:17:24,480 --> 00:17:27,520
and suddenly one container is

467
00:17:26,319 --> 00:17:30,480
compromised and

468
00:17:27,520 --> 00:17:31,200
everything gets compromised so keep that

469
00:17:30,480 --> 00:17:35,280
in mind

470
00:17:31,200 --> 00:17:38,000
i i almost want to star pods because

471
00:17:35,280 --> 00:17:38,960
these are so important when it comes to

472
00:17:38,000 --> 00:17:40,799
planning

473
00:17:38,960 --> 00:17:42,000
how you're going to lay out your

474
00:17:40,799 --> 00:17:44,480
environment

475
00:17:42,000 --> 00:17:46,000
services are there a service is is a

476
00:17:44,480 --> 00:17:48,000
type of proxy

477
00:17:46,000 --> 00:17:50,480
in a way it allows for connections and

478
00:17:48,000 --> 00:17:51,360
requests to go within the kubernetes

479
00:17:50,480 --> 00:17:54,080
cluster

480
00:17:51,360 --> 00:17:54,879
and then we we kind of have our main

481
00:17:54,080 --> 00:17:58,480
components

482
00:17:54,880 --> 00:18:01,600
as we see here we have an api server

483
00:17:58,480 --> 00:18:04,000
number one thing we want to protect

484
00:18:01,600 --> 00:18:04,799
the next thing we want to protect is the

485
00:18:04,000 --> 00:18:06,400
xcd

486
00:18:04,799 --> 00:18:08,240
environment we'll talk about that in a

487
00:18:06,400 --> 00:18:10,160
second and then we have these things

488
00:18:08,240 --> 00:18:11,280
called cubelets and we'll get to that in

489
00:18:10,160 --> 00:18:13,679
just a minute

490
00:18:11,280 --> 00:18:15,240
but there are two concepts that we want

491
00:18:13,679 --> 00:18:18,240
to think about that

492
00:18:15,240 --> 00:18:20,640
infrastructure basic security

493
00:18:18,240 --> 00:18:22,320
requirements where we firewall things

494
00:18:20,640 --> 00:18:26,320
where we isolate them

495
00:18:22,320 --> 00:18:28,879
if the fcd database

496
00:18:26,320 --> 00:18:30,799
is the configuration of my entire

497
00:18:28,880 --> 00:18:34,400
kubernetes cluster

498
00:18:30,799 --> 00:18:36,240
doesn't it make sense to lock that down

499
00:18:34,400 --> 00:18:38,320
and make sure it's not exposed to the

500
00:18:36,240 --> 00:18:41,840
internet it's not exposed to

501
00:18:38,320 --> 00:18:42,399
internal um threats and very very locked

502
00:18:41,840 --> 00:18:45,360
down

503
00:18:42,400 --> 00:18:46,640
yes it does so let's look at again

504
00:18:45,360 --> 00:18:48,639
another picture

505
00:18:46,640 --> 00:18:50,640
here's the kubernetes architecture and a

506
00:18:48,640 --> 00:18:52,720
picture here is our api

507
00:18:50,640 --> 00:18:54,799
server so we can lock that down that's

508
00:18:52,720 --> 00:18:58,480
within our master node

509
00:18:54,799 --> 00:19:00,879
we have the xcd database if you will

510
00:18:58,480 --> 00:19:02,160
that can also be isolated with

511
00:19:00,880 --> 00:19:05,280
firewalling

512
00:19:02,160 --> 00:19:06,320
ip tables firewall d whatever you happen

513
00:19:05,280 --> 00:19:08,240
to be using

514
00:19:06,320 --> 00:19:09,439
and then these worker nodes which

515
00:19:08,240 --> 00:19:12,480
contain

516
00:19:09,440 --> 00:19:13,039
the kubelets and here are our pods and

517
00:19:12,480 --> 00:19:17,200
remember

518
00:19:13,039 --> 00:19:20,320
pods control or sorry contain

519
00:19:17,200 --> 00:19:24,960
multiple containers based on how you lay

520
00:19:20,320 --> 00:19:27,840
things out the only thing that should be

521
00:19:24,960 --> 00:19:29,919
deployed or exposed to the internet are

522
00:19:27,840 --> 00:19:32,959
the kube proxies the coup

523
00:19:29,919 --> 00:19:34,799
proxies are what are going to expose

524
00:19:32,960 --> 00:19:37,679
your application

525
00:19:34,799 --> 00:19:39,280
everything else should be firewalled off

526
00:19:37,679 --> 00:19:42,320
extremely locked down

527
00:19:39,280 --> 00:19:46,879
and monitored for security

528
00:19:42,320 --> 00:19:48,639
access okay remember kubernetes is not

529
00:19:46,880 --> 00:19:51,280
perfect

530
00:19:48,640 --> 00:19:52,160
there have been breach not breaches

531
00:19:51,280 --> 00:19:54,160
there have been

532
00:19:52,160 --> 00:19:56,000
um incidents yes there have been some

533
00:19:54,160 --> 00:19:56,640
breaches and i want to talk about all of

534
00:19:56,000 --> 00:19:58,799
those

535
00:19:56,640 --> 00:20:00,320
i give you some links to go and read

536
00:19:58,799 --> 00:20:03,440
them on your own

537
00:20:00,320 --> 00:20:05,600
the point here is it's still an

538
00:20:03,440 --> 00:20:07,120
application environment that is designed

539
00:20:05,600 --> 00:20:10,080
by humans

540
00:20:07,120 --> 00:20:11,039
we make mistakes oh well it's something

541
00:20:10,080 --> 00:20:14,320
to move on

542
00:20:11,039 --> 00:20:19,200
and just keep making sure you get better

543
00:20:14,320 --> 00:20:20,960
okay so um common sense is going to win

544
00:20:19,200 --> 00:20:23,760
we're going to threat model

545
00:20:20,960 --> 00:20:24,960
our kubernetes cluster and our

546
00:20:23,760 --> 00:20:28,640
environment

547
00:20:24,960 --> 00:20:31,840
first of all tls encryption

548
00:20:28,640 --> 00:20:33,679
should be everywhere if we run

549
00:20:31,840 --> 00:20:35,520
and i didn't have time to put it in here

550
00:20:33,679 --> 00:20:38,159
but i'm going to mention it

551
00:20:35,520 --> 00:20:39,360
if we run something like a service mesh

552
00:20:38,159 --> 00:20:42,720
like istio

553
00:20:39,360 --> 00:20:43,360
or any of the other half a dozen service

554
00:20:42,720 --> 00:20:46,400
mesh

555
00:20:43,360 --> 00:20:50,719
applications out there they will make

556
00:20:46,400 --> 00:20:53,760
sure that tls is everywhere

557
00:20:50,720 --> 00:20:57,280
a service mesh think of it as a

558
00:20:53,760 --> 00:21:01,600
proxy that runs in

559
00:20:57,280 --> 00:21:05,360
kind of alongside the individual pieces

560
00:21:01,600 --> 00:21:06,559
of kubernetes so when it it makes the

561
00:21:05,360 --> 00:21:09,199
connections

562
00:21:06,559 --> 00:21:09,840
it's doing all of the tls handling it

563
00:21:09,200 --> 00:21:13,039
makes sure

564
00:21:09,840 --> 00:21:15,280
that there are access controls involved

565
00:21:13,039 --> 00:21:17,120
and so on i don't have time to go into

566
00:21:15,280 --> 00:21:19,840
that that would be an entire

567
00:21:17,120 --> 00:21:22,559
couple of hours or at least an hour of a

568
00:21:19,840 --> 00:21:25,199
session just on service mesh technology

569
00:21:22,559 --> 00:21:26,480
but look into istio and start there and

570
00:21:25,200 --> 00:21:29,520
start understanding

571
00:21:26,480 --> 00:21:32,559
how the service mesh works

572
00:21:29,520 --> 00:21:34,480
we want to harden the infrastructure um

573
00:21:32,559 --> 00:21:36,158
so many times i've seen kubernetes

574
00:21:34,480 --> 00:21:39,440
deployed out on

575
00:21:36,159 --> 00:21:41,760
either a centos red hat

576
00:21:39,440 --> 00:21:43,280
ubuntu something like that and they

577
00:21:41,760 --> 00:21:44,879
forget the basics

578
00:21:43,280 --> 00:21:46,960
they don't bother to harden the

579
00:21:44,880 --> 00:21:49,679
infrastructure of the operating system

580
00:21:46,960 --> 00:21:52,240
that the thing is running on so people

581
00:21:49,679 --> 00:21:55,520
log into default root accounts because

582
00:21:52,240 --> 00:21:57,919
it still has tor as the password

583
00:21:55,520 --> 00:21:59,200
you know think about common hardening of

584
00:21:57,919 --> 00:22:02,559
the infrastructure

585
00:21:59,200 --> 00:22:04,720
we need to enable our back i would love

586
00:22:02,559 --> 00:22:06,240
to do an entire one hour session on

587
00:22:04,720 --> 00:22:09,039
nothing but our back

588
00:22:06,240 --> 00:22:10,080
our back with least privilege we want to

589
00:22:09,039 --> 00:22:12,799
disable

590
00:22:10,080 --> 00:22:13,600
abac our back is exactly what everyone

591
00:22:12,799 --> 00:22:16,879
knows it is

592
00:22:13,600 --> 00:22:20,080
role based access controls abac is

593
00:22:16,880 --> 00:22:21,760
based on assets it's like asset based

594
00:22:20,080 --> 00:22:24,879
access controls and it

595
00:22:21,760 --> 00:22:25,520
it it can be more secure sometimes but

596
00:22:24,880 --> 00:22:28,880
it is a

597
00:22:25,520 --> 00:22:30,080
nightmare to to try to maintain it's a

598
00:22:28,880 --> 00:22:33,120
maintenance

599
00:22:30,080 --> 00:22:33,918
um craziness that that i personally

600
00:22:33,120 --> 00:22:35,678
think

601
00:22:33,919 --> 00:22:37,600
makes things insecure because you have

602
00:22:35,679 --> 00:22:40,640
to spend too much time with it

603
00:22:37,600 --> 00:22:41,918
also we need to monitor all of our logs

604
00:22:40,640 --> 00:22:45,480
i give you an example

605
00:22:41,919 --> 00:22:48,720
of a tool i love it's called waza

606
00:22:45,480 --> 00:22:50,960
w-a-z-h check it out but there's a blog

607
00:22:48,720 --> 00:22:53,679
out there that they wrote about auditing

608
00:22:50,960 --> 00:22:55,440
kubernetes with wizard

609
00:22:53,679 --> 00:22:56,960
take a look at that read through it you

610
00:22:55,440 --> 00:22:59,760
can actually implement this

611
00:22:56,960 --> 00:23:00,720
in maybe 20 minutes in a test kubernetes

612
00:22:59,760 --> 00:23:02,400
environment

613
00:23:00,720 --> 00:23:04,320
and you're off and running okay it might

614
00:23:02,400 --> 00:23:05,440
take you 30 minutes but they give you

615
00:23:04,320 --> 00:23:08,480
all the commands

616
00:23:05,440 --> 00:23:11,200
inside of that particular blog

617
00:23:08,480 --> 00:23:11,760
we have coup control get roll binding

618
00:23:11,200 --> 00:23:14,720
and we do

619
00:23:11,760 --> 00:23:15,840
all the name spaces every time we deploy

620
00:23:14,720 --> 00:23:17,840
a new cluster we

621
00:23:15,840 --> 00:23:18,879
want to make sure that everything is

622
00:23:17,840 --> 00:23:20,959
locked down

623
00:23:18,880 --> 00:23:22,320
all the rolls are set our back is

624
00:23:20,960 --> 00:23:25,360
configured properly

625
00:23:22,320 --> 00:23:28,799
and we check all the name spaces

626
00:23:25,360 --> 00:23:29,918
we use a third party for auth in other

627
00:23:28,799 --> 00:23:32,799
words i love

628
00:23:29,919 --> 00:23:33,280
vault um hashicorp's fault is a great

629
00:23:32,799 --> 00:23:35,679
tool

630
00:23:33,280 --> 00:23:37,600
there are others but it's my favorite

631
00:23:35,679 --> 00:23:39,360
take a look at it

632
00:23:37,600 --> 00:23:40,639
and then i've already mentioned it

633
00:23:39,360 --> 00:23:43,600
several times

634
00:23:40,640 --> 00:23:45,679
separate and firewall your xcd cluster

635
00:23:43,600 --> 00:23:46,719
that is the guts of the configuration of

636
00:23:45,679 --> 00:23:48,799
this system

637
00:23:46,720 --> 00:23:50,080
if that gets compromised they take over

638
00:23:48,799 --> 00:23:52,720
the entire system

639
00:23:50,080 --> 00:23:54,158
if they compromise the api server well

640
00:23:52,720 --> 00:23:55,760
they're going to take over the system as

641
00:23:54,159 --> 00:23:59,440
well or the cluster

642
00:23:55,760 --> 00:24:01,120
but to me etcd is usually

643
00:23:59,440 --> 00:24:02,640
the one that gets exposed and that's

644
00:24:01,120 --> 00:24:06,239
where we have problems

645
00:24:02,640 --> 00:24:08,640
use se linux as i mentioned or app armor

646
00:24:06,240 --> 00:24:10,640
one of those it's very easy to configure

647
00:24:08,640 --> 00:24:14,400
there are some simple defaults

648
00:24:10,640 --> 00:24:17,440
now let's look at risk

649
00:24:14,400 --> 00:24:20,640
checking um coupe control

650
00:24:17,440 --> 00:24:23,279
get secrets that's going to look for any

651
00:24:20,640 --> 00:24:24,320
secrets within the namespaces that you

652
00:24:23,279 --> 00:24:27,120
have out there

653
00:24:24,320 --> 00:24:27,760
well there's a nifty little tool called

654
00:24:27,120 --> 00:24:30,080
cooper

655
00:24:27,760 --> 00:24:30,799
called kubernetes our back audit that

656
00:24:30,080 --> 00:24:33,918
was done by

657
00:24:30,799 --> 00:24:37,039
cyberark it will actually go out

658
00:24:33,919 --> 00:24:37,600
and double check all of your our back

659
00:24:37,039 --> 00:24:39,919
rules

660
00:24:37,600 --> 00:24:41,199
making sure that you don't have anything

661
00:24:39,919 --> 00:24:44,640
exposed

662
00:24:41,200 --> 00:24:47,120
or too much privilege for particular

663
00:24:44,640 --> 00:24:48,400
service accounts or anything like that

664
00:24:47,120 --> 00:24:51,840
there's another one

665
00:24:48,400 --> 00:24:52,720
called kuby skin okay kubiscan is a

666
00:24:51,840 --> 00:24:55,600
great tool

667
00:24:52,720 --> 00:24:56,080
that will also go through and take a

668
00:24:55,600 --> 00:24:58,799
look at

669
00:24:56,080 --> 00:24:59,760
all of your rbac settings so take a look

670
00:24:58,799 --> 00:25:03,120
at those

671
00:24:59,760 --> 00:25:06,158
if you're using github or git lab um

672
00:25:03,120 --> 00:25:07,918
oops go backward if you're using either

673
00:25:06,159 --> 00:25:10,400
github or get lab

674
00:25:07,919 --> 00:25:12,559
something that is incredibly important

675
00:25:10,400 --> 00:25:14,720
i've worked with developers where they

676
00:25:12,559 --> 00:25:17,039
constantly expose

677
00:25:14,720 --> 00:25:18,159
code and configuration files that have

678
00:25:17,039 --> 00:25:21,279
security

679
00:25:18,159 --> 00:25:24,080
keys in those files you should have

680
00:25:21,279 --> 00:25:25,360
something set up so you're monitoring

681
00:25:24,080 --> 00:25:29,120
your repos

682
00:25:25,360 --> 00:25:30,879
for exposed aws keys gcp keys you have

683
00:25:29,120 --> 00:25:33,360
whatever cloud environment you're

684
00:25:30,880 --> 00:25:34,880
running in or even a private environment

685
00:25:33,360 --> 00:25:36,799
make sure your keys aren't getting

686
00:25:34,880 --> 00:25:40,240
exposed make sure your

687
00:25:36,799 --> 00:25:42,320
images are locked down

688
00:25:40,240 --> 00:25:43,480
don't forget there are libraries

689
00:25:42,320 --> 00:25:47,120
involved the

690
00:25:43,480 --> 00:25:49,279
applications themselves um

691
00:25:47,120 --> 00:25:50,399
you still have developers that create an

692
00:25:49,279 --> 00:25:52,720
application it may

693
00:25:50,400 --> 00:25:54,320
it it may be that it's going to run in a

694
00:25:52,720 --> 00:25:57,200
container

695
00:25:54,320 --> 00:25:58,080
but if they still forget about doing

696
00:25:57,200 --> 00:26:01,600
security

697
00:25:58,080 --> 00:26:02,960
for that application in other words the

698
00:26:01,600 --> 00:26:05,360
application is

699
00:26:02,960 --> 00:26:07,039
vulnerable to a sql injection or

700
00:26:05,360 --> 00:26:07,520
cross-site scripting or something like

701
00:26:07,039 --> 00:26:10,799
that

702
00:26:07,520 --> 00:26:14,480
you still have a security problem so

703
00:26:10,799 --> 00:26:16,559
keep those applications secure also

704
00:26:14,480 --> 00:26:17,600
when you're creating your pods and when

705
00:26:16,559 --> 00:26:21,039
you're setting those

706
00:26:17,600 --> 00:26:23,439
up think about what

707
00:26:21,039 --> 00:26:24,480
what does it make sense to group

708
00:26:23,440 --> 00:26:27,760
together

709
00:26:24,480 --> 00:26:28,480
into a pod which containers need to talk

710
00:26:27,760 --> 00:26:30,158
to

711
00:26:28,480 --> 00:26:31,520
other containers and which ones do i

712
00:26:30,159 --> 00:26:35,120
want to isolate

713
00:26:31,520 --> 00:26:37,840
do i maybe want to have a database pod

714
00:26:35,120 --> 00:26:38,399
and then have some security within

715
00:26:37,840 --> 00:26:40,799
another

716
00:26:38,400 --> 00:26:41,840
pod that has the apple actual

717
00:26:40,799 --> 00:26:44,639
applications

718
00:26:41,840 --> 00:26:47,199
that then talk to that pod via something

719
00:26:44,640 --> 00:26:50,320
like issio or a service mesh

720
00:26:47,200 --> 00:26:52,880
um also remember showdown

721
00:26:50,320 --> 00:26:54,080
if you've never played with showdown

722
00:26:52,880 --> 00:26:57,679
this is a tool

723
00:26:54,080 --> 00:26:58,799
that can help you to expose kubernetes

724
00:26:57,679 --> 00:27:02,880
clusters things like

725
00:26:58,799 --> 00:27:05,520
api servers and cd clusters and so on

726
00:27:02,880 --> 00:27:07,120
by doing searches within showdown i'm

727
00:27:05,520 --> 00:27:08,559
not going to give you all the commands

728
00:27:07,120 --> 00:27:10,959
here there are too many

729
00:27:08,559 --> 00:27:12,799
but you can actually go do some googling

730
00:27:10,960 --> 00:27:13,200
and you'll find searches for how can i

731
00:27:12,799 --> 00:27:16,559
find

732
00:27:13,200 --> 00:27:17,120
api server endpoints what is this useful

733
00:27:16,559 --> 00:27:19,840
for

734
00:27:17,120 --> 00:27:20,719
to verify whether your own kubernetes

735
00:27:19,840 --> 00:27:24,000
clusters

736
00:27:20,720 --> 00:27:25,679
are actually exposed you want to double

737
00:27:24,000 --> 00:27:28,640
check that

738
00:27:25,679 --> 00:27:30,480
now let's talk about the configurations

739
00:27:28,640 --> 00:27:32,480
remember i said this at the beginning

740
00:27:30,480 --> 00:27:35,600
most breaches come from config

741
00:27:32,480 --> 00:27:38,960
issues we want to harden

742
00:27:35,600 --> 00:27:41,279
our environment well i i mentioned cis

743
00:27:38,960 --> 00:27:44,000
center for internet security earlier

744
00:27:41,279 --> 00:27:47,039
here are the links to go and download

745
00:27:44,000 --> 00:27:50,720
the docker benchmarks and the kubernetes

746
00:27:47,039 --> 00:27:53,679
benchmarks these are common sense steps

747
00:27:50,720 --> 00:27:56,320
that you take to harden your containers

748
00:27:53,679 --> 00:27:58,640
and harden your kubernetes clusters

749
00:27:56,320 --> 00:27:59,918
the whole point is you get the idea but

750
00:27:58,640 --> 00:28:02,960
how do we test

751
00:27:59,919 --> 00:28:05,360
that how do we actually do an audit

752
00:28:02,960 --> 00:28:06,640
how do we put in some automation so

753
00:28:05,360 --> 00:28:09,678
we're not

754
00:28:06,640 --> 00:28:13,120
doing it all by hand well many of us

755
00:28:09,679 --> 00:28:13,600
use things like jenkins well there's a

756
00:28:13,120 --> 00:28:16,639
great

757
00:28:13,600 --> 00:28:20,000
tool called anchor

758
00:28:16,640 --> 00:28:22,919
it it actually goes out and will scan

759
00:28:20,000 --> 00:28:25,039
your container looking for common

760
00:28:22,919 --> 00:28:28,080
vulnerabilities remember i said the

761
00:28:25,039 --> 00:28:31,279
application itself should be

762
00:28:28,080 --> 00:28:32,000
checked for common sql injection and and

763
00:28:31,279 --> 00:28:34,000
so on

764
00:28:32,000 --> 00:28:35,679
well this is a great tool that will

765
00:28:34,000 --> 00:28:38,399
actually go through and do it

766
00:28:35,679 --> 00:28:39,840
and it's a plug-in for jenkins put this

767
00:28:38,399 --> 00:28:42,080
in place in the beginning

768
00:28:39,840 --> 00:28:43,199
they come along build a new application

769
00:28:42,080 --> 00:28:46,559
it runs through

770
00:28:43,200 --> 00:28:47,360
anchor goes uh sql injection uh buffer

771
00:28:46,559 --> 00:28:50,399
overflow

772
00:28:47,360 --> 00:28:53,439
um remote code executions

773
00:28:50,399 --> 00:28:55,918
something like that and it kicks it back

774
00:28:53,440 --> 00:28:57,440
out and says nope not gonna build it not

775
00:28:55,919 --> 00:28:59,679
gonna let you through

776
00:28:57,440 --> 00:29:00,720
so these are things that we can build

777
00:28:59,679 --> 00:29:03,360
automation

778
00:29:00,720 --> 00:29:04,240
into here are some other tools i'm going

779
00:29:03,360 --> 00:29:06,719
to show you

780
00:29:04,240 --> 00:29:08,399
i don't have time to show all of them in

781
00:29:06,720 --> 00:29:10,080
detail but it's going to give you an

782
00:29:08,399 --> 00:29:13,439
idea of what you can start

783
00:29:10,080 --> 00:29:16,240
working with cube bench is an excellent

784
00:29:13,440 --> 00:29:19,279
tool from aqua security

785
00:29:16,240 --> 00:29:20,399
this runs against the cis benchmarks and

786
00:29:19,279 --> 00:29:22,480
it spits out

787
00:29:20,399 --> 00:29:23,439
here's what you did wrong here's what

788
00:29:22,480 --> 00:29:26,399
you need to fix

789
00:29:23,440 --> 00:29:27,360
run it against the master and or all of

790
00:29:26,399 --> 00:29:30,239
your nodes it

791
00:29:27,360 --> 00:29:31,279
should be run against everything i've

792
00:29:30,240 --> 00:29:34,399
seen people where they

793
00:29:31,279 --> 00:29:36,880
only run it against the master node

794
00:29:34,399 --> 00:29:37,918
incorrect you need to run it against all

795
00:29:36,880 --> 00:29:39,520
the nodes

796
00:29:37,919 --> 00:29:41,279
and there's instructions on how to do

797
00:29:39,520 --> 00:29:44,000
that who bought it

798
00:29:41,279 --> 00:29:45,039
gives you a little bit more granularity

799
00:29:44,000 --> 00:29:47,279
um

800
00:29:45,039 --> 00:29:48,399
coup bench is good for presenting to

801
00:29:47,279 --> 00:29:50,799
teams saying hey

802
00:29:48,399 --> 00:29:51,678
you know here's a quick run it shows you

803
00:29:50,799 --> 00:29:54,480
how uh

804
00:29:51,679 --> 00:29:55,279
whether cis benchmarks are followed and

805
00:29:54,480 --> 00:29:58,399
so on

806
00:29:55,279 --> 00:30:02,159
running coupe audit is great for

807
00:29:58,399 --> 00:30:05,039
your devops team or your devsecops team

808
00:30:02,159 --> 00:30:05,840
in order to fix the things that are

809
00:30:05,039 --> 00:30:09,440
within it

810
00:30:05,840 --> 00:30:12,399
here's an example of what kubota

811
00:30:09,440 --> 00:30:12,960
shows you there's a lot of information

812
00:30:12,399 --> 00:30:15,600
here but

813
00:30:12,960 --> 00:30:17,600
notice like the second one allow

814
00:30:15,600 --> 00:30:21,039
privilege escalation

815
00:30:17,600 --> 00:30:24,719
is not set what that means is

816
00:30:21,039 --> 00:30:26,720
by default privilege escalation

817
00:30:24,720 --> 00:30:27,840
is going to be allowed within that

818
00:30:26,720 --> 00:30:30,640
container

819
00:30:27,840 --> 00:30:32,559
we don't want that there's read only

820
00:30:30,640 --> 00:30:35,279
root file system is not

821
00:30:32,559 --> 00:30:37,600
set which means the root file system is

822
00:30:35,279 --> 00:30:40,960
writable so someone gets in

823
00:30:37,600 --> 00:30:44,559
oops there's a lot of these

824
00:30:40,960 --> 00:30:46,000
app armor is missing setcomp which is a

825
00:30:44,559 --> 00:30:48,158
security profile

826
00:30:46,000 --> 00:30:51,440
is not said there's a lot of the allow

827
00:30:48,159 --> 00:30:54,880
privileges why because there's multiple

828
00:30:51,440 --> 00:30:57,200
service accounts being used run is not

829
00:30:54,880 --> 00:31:00,880
root oh my god

830
00:30:57,200 --> 00:31:02,559
this allows someone to misconfigure

831
00:31:00,880 --> 00:31:03,519
something and accidentally launch a

832
00:31:02,559 --> 00:31:06,000
container

833
00:31:03,519 --> 00:31:07,679
run as root we don't want to do that you

834
00:31:06,000 --> 00:31:10,960
get the idea

835
00:31:07,679 --> 00:31:11,600
this is a very simple run it shows it's

836
00:31:10,960 --> 00:31:14,720
either an

837
00:31:11,600 --> 00:31:15,519
absolute error or it's a warning you

838
00:31:14,720 --> 00:31:18,000
know there are

839
00:31:15,519 --> 00:31:20,080
issues that we have to take care of this

840
00:31:18,000 --> 00:31:23,039
is how easy it is to work

841
00:31:20,080 --> 00:31:25,519
with kubernetes and containers if you

842
00:31:23,039 --> 00:31:28,320
deploy the tools correctly

843
00:31:25,519 --> 00:31:29,120
it can save you a lot of time here's a

844
00:31:28,320 --> 00:31:32,879
lot more

845
00:31:29,120 --> 00:31:34,360
tools okay claire is great it's a static

846
00:31:32,880 --> 00:31:37,200
analysis for the

847
00:31:34,360 --> 00:31:40,639
applications within the containers

848
00:31:37,200 --> 00:31:43,440
clar will actually integrate claire

849
00:31:40,640 --> 00:31:44,720
into your docker registry so when it

850
00:31:43,440 --> 00:31:47,279
pulls out

851
00:31:44,720 --> 00:31:48,799
an image from the registry that you've

852
00:31:47,279 --> 00:31:52,240
created you can

853
00:31:48,799 --> 00:31:55,679
set it up with with plugins and links

854
00:31:52,240 --> 00:31:57,279
so it actually as the build goes it

855
00:31:55,679 --> 00:31:59,039
looks at the application and the

856
00:31:57,279 --> 00:32:02,080
configuration and says ah

857
00:31:59,039 --> 00:32:05,760
there's a problem or no there isn't

858
00:32:02,080 --> 00:32:09,199
falco is absolutely one of my favorite

859
00:32:05,760 --> 00:32:12,240
um images or applications um

860
00:32:09,200 --> 00:32:15,360
it does behavioral monitoring

861
00:32:12,240 --> 00:32:16,559
it looks for weird things um in other

862
00:32:15,360 --> 00:32:19,439
words

863
00:32:16,559 --> 00:32:21,279
suddenly you see a command being run

864
00:32:19,440 --> 00:32:24,559
inside of a container that says

865
00:32:21,279 --> 00:32:24,799
cat etsy and cat with a c i'm cat with a

866
00:32:24,559 --> 00:32:29,279
k

867
00:32:24,799 --> 00:32:32,399
so never mind but cat of etsy password

868
00:32:29,279 --> 00:32:34,799
um why would that be run in a container

869
00:32:32,399 --> 00:32:36,959
well falco would go whoa somebody's

870
00:32:34,799 --> 00:32:38,158
doing something they shouldn't be

871
00:32:36,960 --> 00:32:40,559
looking into this

872
00:32:38,159 --> 00:32:41,200
in other words it figures out what is

873
00:32:40,559 --> 00:32:44,000
normal

874
00:32:41,200 --> 00:32:44,960
and what is abnormal take a look at this

875
00:32:44,000 --> 00:32:47,200
tool

876
00:32:44,960 --> 00:32:48,960
cube hunter if you're going to do any

877
00:32:47,200 --> 00:32:51,840
kind of pen testing

878
00:32:48,960 --> 00:32:53,200
of a kubernetes environment you need to

879
00:32:51,840 --> 00:32:56,240
use cube hunter

880
00:32:53,200 --> 00:32:59,360
this is a red team tool it's

881
00:32:56,240 --> 00:33:01,919
it's you can run it free on certain

882
00:32:59,360 --> 00:33:03,600
um kubernetes clusters within your

883
00:33:01,919 --> 00:33:04,880
company but you only get to run it on a

884
00:33:03,600 --> 00:33:06,879
couple

885
00:33:04,880 --> 00:33:09,279
it is worth the money if you want to pay

886
00:33:06,880 --> 00:33:12,399
for it but it is a great tool

887
00:33:09,279 --> 00:33:13,360
so take a look at that one now let's

888
00:33:12,399 --> 00:33:16,719
talk about

889
00:33:13,360 --> 00:33:20,799
threat vectors um these are an

890
00:33:16,720 --> 00:33:24,320
are an example of a whole bunch of ports

891
00:33:20,799 --> 00:33:25,279
that run within kubernetes most of them

892
00:33:24,320 --> 00:33:28,399
are what you

893
00:33:25,279 --> 00:33:30,880
you already know about you see things

894
00:33:28,399 --> 00:33:33,600
like 443

895
00:33:30,880 --> 00:33:36,159
even 8080 is something we've seen a lot

896
00:33:33,600 --> 00:33:36,480
why because it's typically a proxy port

897
00:33:36,159 --> 00:33:39,840
but

898
00:33:36,480 --> 00:33:40,559
here it's the cuvee api server here it's

899
00:33:39,840 --> 00:33:43,840
the

900
00:33:40,559 --> 00:33:46,399
um api server but actually um

901
00:33:43,840 --> 00:33:48,240
hopefully encrypted you know so these

902
00:33:46,399 --> 00:33:51,360
are a lot of ports

903
00:33:48,240 --> 00:33:54,960
666 for xcd

904
00:33:51,360 --> 00:33:56,399
i mean this is a good way if you want to

905
00:33:54,960 --> 00:34:00,080
run maybe some nmap

906
00:33:56,399 --> 00:34:02,559
scans or do some some checking

907
00:34:00,080 --> 00:34:05,360
and make sure these ports are not all

908
00:34:02,559 --> 00:34:08,239
exposed to the internet

909
00:34:05,360 --> 00:34:10,399
within your your kubernetes cluster it's

910
00:34:08,239 --> 00:34:13,839
always a good place to start

911
00:34:10,399 --> 00:34:16,480
and to make sure that encryption is

912
00:34:13,839 --> 00:34:17,520
running on everything so i are a hacker

913
00:34:16,480 --> 00:34:19,520
see me hack

914
00:34:17,520 --> 00:34:21,119
here's what i'm going to do if somebody

915
00:34:19,520 --> 00:34:23,918
says please

916
00:34:21,119 --> 00:34:25,599
pen test our our containers within our

917
00:34:23,918 --> 00:34:27,520
kubernetes environment

918
00:34:25,599 --> 00:34:29,440
first thing i'm going to do check the

919
00:34:27,520 --> 00:34:32,800
access of the api server

920
00:34:29,440 --> 00:34:34,560
can i get to it can i somehow

921
00:34:32,800 --> 00:34:36,560
and here's something that people don't

922
00:34:34,560 --> 00:34:40,480
think about

923
00:34:36,560 --> 00:34:44,399
you lock down the api server internally

924
00:34:40,480 --> 00:34:46,320
you have a an exposed old-fashioned web

925
00:34:44,399 --> 00:34:49,199
server sitting on the outside

926
00:34:46,320 --> 00:34:50,159
sitting on some old version of either

927
00:34:49,199 --> 00:34:53,439
ubuntu or

928
00:34:50,159 --> 00:34:54,399
centos or whatever somebody breaks into

929
00:34:53,440 --> 00:34:56,800
that server

930
00:34:54,399 --> 00:34:57,920
which gets them on the inside of your

931
00:34:56,800 --> 00:35:00,560
environment

932
00:34:57,920 --> 00:35:01,280
now they find a way to attack your api

933
00:35:00,560 --> 00:35:04,160
server

934
00:35:01,280 --> 00:35:05,200
because it's exposed internally so keep

935
00:35:04,160 --> 00:35:07,279
in mind

936
00:35:05,200 --> 00:35:09,598
that that api server needs to be

937
00:35:07,280 --> 00:35:13,280
protected from insider threats

938
00:35:09,599 --> 00:35:14,800
as well as external same thing for fcd

939
00:35:13,280 --> 00:35:16,480
i'm going to be looking for any kind of

940
00:35:14,800 --> 00:35:19,200
access to xcd

941
00:35:16,480 --> 00:35:21,040
i'm looking for the kubelet ports these

942
00:35:19,200 --> 00:35:24,240
should be set to read only

943
00:35:21,040 --> 00:35:25,759
and the kubota will find that i

944
00:35:24,240 --> 00:35:27,759
want to look for container

945
00:35:25,760 --> 00:35:30,800
vulnerabilities why

946
00:35:27,760 --> 00:35:34,160
because people put applications

947
00:35:30,800 --> 00:35:37,440
into containers that are vulnerable to

948
00:35:34,160 --> 00:35:39,839
common attacks and if i can get

949
00:35:37,440 --> 00:35:41,280
into that container via a vulnerable

950
00:35:39,839 --> 00:35:44,078
application

951
00:35:41,280 --> 00:35:45,680
then i'm looking for sensitive files and

952
00:35:44,079 --> 00:35:48,079
all of these other things

953
00:35:45,680 --> 00:35:49,359
this is why falco needs to be running

954
00:35:48,079 --> 00:35:51,839
within your environment

955
00:35:49,359 --> 00:35:53,040
because it detects if somebody gets

956
00:35:51,839 --> 00:35:55,759
inside and starts

957
00:35:53,040 --> 00:35:56,320
running individual commands don't forget

958
00:35:55,760 --> 00:36:00,079
about

959
00:35:56,320 --> 00:36:02,800
kernel exploits in other words i get in

960
00:36:00,079 --> 00:36:04,079
and i elevate privilege somehow well

961
00:36:02,800 --> 00:36:06,880
that's why

962
00:36:04,079 --> 00:36:08,800
the cubotic was calling out that the

963
00:36:06,880 --> 00:36:11,920
privilege escalation

964
00:36:08,800 --> 00:36:12,800
was not set meaning it was false by

965
00:36:11,920 --> 00:36:16,000
default

966
00:36:12,800 --> 00:36:18,720
and therefore once i get in if there is

967
00:36:16,000 --> 00:36:21,520
some sort of kernel exploit or any other

968
00:36:18,720 --> 00:36:22,078
vulnerability that allows me to escalate

969
00:36:21,520 --> 00:36:25,119
privilege

970
00:36:22,079 --> 00:36:26,640
i can take over the entire pod possibly

971
00:36:25,119 --> 00:36:29,920
the entire node

972
00:36:26,640 --> 00:36:30,640
and remember your apps always check

973
00:36:29,920 --> 00:36:33,920
those

974
00:36:30,640 --> 00:36:36,799
developers make mistakes we wouldn't

975
00:36:33,920 --> 00:36:38,240
still be finding sql injection attacks

976
00:36:36,800 --> 00:36:41,760
all over the internet

977
00:36:38,240 --> 00:36:43,759
if this wasn't happening so here is your

978
00:36:41,760 --> 00:36:47,520
final threat model

979
00:36:43,760 --> 00:36:51,040
think of your entire cicd pipeline

980
00:36:47,520 --> 00:36:54,560
you have you have a workload

981
00:36:51,040 --> 00:36:57,520
that workload is what we call the pod

982
00:36:54,560 --> 00:36:58,960
think of your workload security group

983
00:36:57,520 --> 00:37:02,240
your pods

984
00:36:58,960 --> 00:37:03,599
into a secure environment that makes

985
00:37:02,240 --> 00:37:06,640
sense and reduces

986
00:37:03,599 --> 00:37:08,720
threat okay

987
00:37:06,640 --> 00:37:11,598
think of your container security

988
00:37:08,720 --> 00:37:15,520
obviously that's going to be critical

989
00:37:11,599 --> 00:37:17,839
file storage security in most most cases

990
00:37:15,520 --> 00:37:19,440
the storage that you're using within a

991
00:37:17,839 --> 00:37:21,200
kubernetes cluster

992
00:37:19,440 --> 00:37:24,960
is ephemeral it's it's going to

993
00:37:21,200 --> 00:37:27,839
disappear when the container goes away

994
00:37:24,960 --> 00:37:29,839
therefore you have developers or the

995
00:37:27,839 --> 00:37:33,680
devops people that are setting up

996
00:37:29,839 --> 00:37:34,720
permanent file storage so containers can

997
00:37:33,680 --> 00:37:36,799
store data

998
00:37:34,720 --> 00:37:38,720
and when they start up again in another

999
00:37:36,800 --> 00:37:40,480
pod perhaps

1000
00:37:38,720 --> 00:37:42,480
they gain access to the data and they

1001
00:37:40,480 --> 00:37:45,839
continue where they left off

1002
00:37:42,480 --> 00:37:48,320
the problem is people make mistakes

1003
00:37:45,839 --> 00:37:48,880
and that permanent file storage is

1004
00:37:48,320 --> 00:37:51,520
actually

1005
00:37:48,880 --> 00:37:53,440
exposed and therefore the data from the

1006
00:37:51,520 --> 00:37:55,839
application is exposed

1007
00:37:53,440 --> 00:37:56,880
think of your network security both

1008
00:37:55,839 --> 00:38:00,160
external

1009
00:37:56,880 --> 00:38:01,760
and internal internal threats are just

1010
00:38:00,160 --> 00:38:04,879
as much of a problem

1011
00:38:01,760 --> 00:38:06,640
in fact maybe more so because if the bad

1012
00:38:04,880 --> 00:38:10,560
actors get in

1013
00:38:06,640 --> 00:38:15,200
in another unsecured server way

1014
00:38:10,560 --> 00:38:17,279
then they now become an internal threat

1015
00:38:15,200 --> 00:38:18,480
i always like to use equifax as an

1016
00:38:17,280 --> 00:38:20,320
example why

1017
00:38:18,480 --> 00:38:22,160
they got in from the outside they

1018
00:38:20,320 --> 00:38:23,920
compromised some credentials

1019
00:38:22,160 --> 00:38:25,920
then they just started moving all over

1020
00:38:23,920 --> 00:38:28,400
the place and still they until they got

1021
00:38:25,920 --> 00:38:32,000
all the data they wanted and nobody

1022
00:38:28,400 --> 00:38:35,280
detected the compromise credentials

1023
00:38:32,000 --> 00:38:36,240
problems um application security i've

1024
00:38:35,280 --> 00:38:39,119
said it enough

1025
00:38:36,240 --> 00:38:40,640
make sure your applications are indeed

1026
00:38:39,119 --> 00:38:43,599
secure

1027
00:38:40,640 --> 00:38:44,000
so remember most breaches are not zero

1028
00:38:43,599 --> 00:38:46,640
day

1029
00:38:44,000 --> 00:38:47,040
they're not fancy and they don't you

1030
00:38:46,640 --> 00:38:49,118
don't

1031
00:38:47,040 --> 00:38:50,800
find them typically by vulnerability

1032
00:38:49,119 --> 00:38:53,200
scanners the breaches are going to come

1033
00:38:50,800 --> 00:38:56,800
from mistakes that humans make

1034
00:38:53,200 --> 00:39:00,240
in configuration issues um i'll

1035
00:38:56,800 --> 00:39:02,400
give you one example of this again i

1036
00:39:00,240 --> 00:39:03,520
i had an engineer in a previous company

1037
00:39:02,400 --> 00:39:05,920
where um

1038
00:39:03,520 --> 00:39:07,280
they made a simple mistake they wanted

1039
00:39:05,920 --> 00:39:09,760
to share their

1040
00:39:07,280 --> 00:39:10,320
a project with all of the people in the

1041
00:39:09,760 --> 00:39:12,000
group

1042
00:39:10,320 --> 00:39:13,680
so they could work on it more readily

1043
00:39:12,000 --> 00:39:15,359
and they thought i'll put it in a github

1044
00:39:13,680 --> 00:39:17,680
repo

1045
00:39:15,359 --> 00:39:19,598
they created the repo and then he

1046
00:39:17,680 --> 00:39:23,359
uploaded a folder

1047
00:39:19,599 --> 00:39:24,800
off of his unix system the problem is he

1048
00:39:23,359 --> 00:39:26,880
forgot to check

1049
00:39:24,800 --> 00:39:28,160
that in that folder there were a lot of

1050
00:39:26,880 --> 00:39:31,200
dot files

1051
00:39:28,160 --> 00:39:34,799
and there was a dot gcp file

1052
00:39:31,200 --> 00:39:37,919
that contained google cloud platform

1053
00:39:34,800 --> 00:39:41,599
credentials within the file

1054
00:39:37,920 --> 00:39:44,720
it got uploaded to github github

1055
00:39:41,599 --> 00:39:47,359
within five minutes

1056
00:39:44,720 --> 00:39:48,399
of that credential being uploaded to

1057
00:39:47,359 --> 00:39:51,920
github

1058
00:39:48,400 --> 00:39:55,280
the robots found it and

1059
00:39:51,920 --> 00:39:59,280
immediately saw 49

1060
00:39:55,280 --> 00:40:02,320
instances spun up under gcp

1061
00:39:59,280 --> 00:40:05,520
doing bitcoin mining in

1062
00:40:02,320 --> 00:40:08,000
five minutes that's how long it took

1063
00:40:05,520 --> 00:40:10,000
and that was because one they didn't set

1064
00:40:08,000 --> 00:40:12,960
the github repo to private for

1065
00:40:10,000 --> 00:40:13,839
just the team and two he made the

1066
00:40:12,960 --> 00:40:16,000
mistake of

1067
00:40:13,839 --> 00:40:16,960
oh i'll just upload my folder well

1068
00:40:16,000 --> 00:40:19,520
what's in

1069
00:40:16,960 --> 00:40:21,599
the folder all these hidden files that

1070
00:40:19,520 --> 00:40:24,000
you forgot about that were still

1071
00:40:21,599 --> 00:40:25,839
there things that are common

1072
00:40:24,000 --> 00:40:27,680
configuration issues

1073
00:40:25,839 --> 00:40:29,359
compromise credentials can't say it

1074
00:40:27,680 --> 00:40:32,000
enough but

1075
00:40:29,359 --> 00:40:33,359
over privileged accounts especially

1076
00:40:32,000 --> 00:40:35,520
service accounts

1077
00:40:33,359 --> 00:40:36,799
still become an issue and that's why we

1078
00:40:35,520 --> 00:40:40,240
need to make sure

1079
00:40:36,800 --> 00:40:41,440
that you can't elevate privilege inside

1080
00:40:40,240 --> 00:40:44,240
of containers

1081
00:40:41,440 --> 00:40:45,440
so make sure you use the tools to audit

1082
00:40:44,240 --> 00:40:48,479
the containers

1083
00:40:45,440 --> 00:40:51,760
as well as auditing kubernetes

1084
00:40:48,480 --> 00:40:54,319
itself that's how we secure kubernetes

1085
00:40:51,760 --> 00:40:54,880
that's how we maintain the the security

1086
00:40:54,319 --> 00:40:56,960
of it

1087
00:40:54,880 --> 00:40:58,880
and that's how we maintain the security

1088
00:40:56,960 --> 00:41:03,359
of the containers

1089
00:40:58,880 --> 00:41:03,359
which are all part of everything

1090
00:41:03,520 --> 00:41:08,240
so here are your key takeaways common

1091
00:41:06,720 --> 00:41:11,359
sense for the win

1092
00:41:08,240 --> 00:41:12,720
remember basic security stop

1093
00:41:11,359 --> 00:41:16,640
overthinking it

1094
00:41:12,720 --> 00:41:20,240
and stop being fancy the basics of

1095
00:41:16,640 --> 00:41:23,200
security are what we still need to go

1096
00:41:20,240 --> 00:41:25,598
back to you know locking things down

1097
00:41:23,200 --> 00:41:26,240
with firewalling with access controls

1098
00:41:25,599 --> 00:41:28,560
with

1099
00:41:26,240 --> 00:41:29,598
make sure our back rules are set

1100
00:41:28,560 --> 00:41:32,880
appropriately

1101
00:41:29,599 --> 00:41:33,760
the basics are going to be what get us

1102
00:41:32,880 --> 00:41:36,800
through

1103
00:41:33,760 --> 00:41:39,760
the fancy crap just

1104
00:41:36,800 --> 00:41:41,760
uh i hate it i'm sorry but i absolutely

1105
00:41:39,760 --> 00:41:42,400
hate all the fancy tools that are out

1106
00:41:41,760 --> 00:41:44,640
there

1107
00:41:42,400 --> 00:41:46,960
because get me back to the basics and

1108
00:41:44,640 --> 00:41:50,000
that's when i get a secure environment

1109
00:41:46,960 --> 00:41:52,319
if i follow cis benchmarks

1110
00:41:50,000 --> 00:41:54,160
it it is going to give you one of the

1111
00:41:52,319 --> 00:41:55,440
most secure environments whether it's

1112
00:41:54,160 --> 00:41:58,160
the container

1113
00:41:55,440 --> 00:41:58,880
the kubernetes cluster the operating

1114
00:41:58,160 --> 00:42:01,118
system

1115
00:41:58,880 --> 00:42:02,880
whatever it happens to be follow those

1116
00:42:01,119 --> 00:42:06,480
settings you're going to have a secure

1117
00:42:02,880 --> 00:42:08,240
environment don't forget there are cis

1118
00:42:06,480 --> 00:42:10,319
benchmarks for our back

1119
00:42:08,240 --> 00:42:11,919
for the infrastructure for the pods for

1120
00:42:10,319 --> 00:42:15,040
the containers for the network

1121
00:42:11,920 --> 00:42:17,200
for everything we need to secure that

1122
00:42:15,040 --> 00:42:19,359
environment that's what we're looking to

1123
00:42:17,200 --> 00:42:19,359
do

1124
00:42:19,440 --> 00:42:25,200
threat model your environment

1125
00:42:22,560 --> 00:42:25,920
when you think about threat modeling you

1126
00:42:25,200 --> 00:42:29,359
take your

1127
00:42:25,920 --> 00:42:33,599
assets you take the access

1128
00:42:29,359 --> 00:42:36,880
methods and you take the potential

1129
00:42:33,599 --> 00:42:39,760
attackers and then you look at how

1130
00:42:36,880 --> 00:42:41,680
all of that combines so don't forget

1131
00:42:39,760 --> 00:42:44,640
threat modeling

1132
00:42:41,680 --> 00:42:44,960
it doesn't have to be rocket science if

1133
00:42:44,640 --> 00:42:48,078
you

1134
00:42:44,960 --> 00:42:49,920
think about it using common sense

1135
00:42:48,079 --> 00:42:52,319
you can probably threat model your

1136
00:42:49,920 --> 00:42:54,480
environment don't forget your access

1137
00:42:52,319 --> 00:42:56,240
controls did i mention our back i think

1138
00:42:54,480 --> 00:42:59,119
i've said that a few times

1139
00:42:56,240 --> 00:43:01,439
i'm going to say it one more time um

1140
00:42:59,119 --> 00:43:04,800
don't forget to patch your environment

1141
00:43:01,440 --> 00:43:06,000
um i i still find kubernetes clusters

1142
00:43:04,800 --> 00:43:10,400
that are deployed on

1143
00:43:06,000 --> 00:43:13,760
ubuntu 14 um end of life hello

1144
00:43:10,400 --> 00:43:16,800
ubuntu about to the end of life let's

1145
00:43:13,760 --> 00:43:19,520
let's make sure we patch things and or

1146
00:43:16,800 --> 00:43:20,480
upgrade in an environment so we're not

1147
00:43:19,520 --> 00:43:24,160
running

1148
00:43:20,480 --> 00:43:25,200
on old software logging auditing

1149
00:43:24,160 --> 00:43:28,078
monitoring

1150
00:43:25,200 --> 00:43:29,200
you can't just deploy this stuff and

1151
00:43:28,079 --> 00:43:31,920
leave it

1152
00:43:29,200 --> 00:43:33,118
to to not being able to watch it

1153
00:43:31,920 --> 00:43:35,839
remember the tool i

1154
00:43:33,119 --> 00:43:37,760
mentioned which is waza take a look at

1155
00:43:35,839 --> 00:43:40,960
it it's open source

1156
00:43:37,760 --> 00:43:43,440
um i think it's one of the best for

1157
00:43:40,960 --> 00:43:44,400
really getting down to the nitty-gritty

1158
00:43:43,440 --> 00:43:47,280
of monitoring

1159
00:43:44,400 --> 00:43:48,560
every possible thing you can and weaving

1160
00:43:47,280 --> 00:43:50,400
out all the noise

1161
00:43:48,560 --> 00:43:52,640
um that's what we have to do because if

1162
00:43:50,400 --> 00:43:55,839
you don't weed out the noise

1163
00:43:52,640 --> 00:43:58,560
then you're wasting your time trying to

1164
00:43:55,839 --> 00:43:59,599
work on the environment so there we go

1165
00:43:58,560 --> 00:44:03,440
in a nutshell

1166
00:43:59,599 --> 00:44:07,280
in 45 minutes exactly

1167
00:44:03,440 --> 00:44:10,400
um that is how you're going to

1168
00:44:07,280 --> 00:44:11,200
start to secure your kubernetes

1169
00:44:10,400 --> 00:44:14,240
environment

1170
00:44:11,200 --> 00:44:15,279
and i hope that you all remember that

1171
00:44:14,240 --> 00:44:18,399
containers

1172
00:44:15,280 --> 00:44:20,560
are critical stop overthinking and

1173
00:44:18,400 --> 00:44:22,960
securing just kubernetes

1174
00:44:20,560 --> 00:44:23,680
you need to secure the containers as

1175
00:44:22,960 --> 00:44:26,240
well

1176
00:44:23,680 --> 00:44:28,879
do the two together build in a nice

1177
00:44:26,240 --> 00:44:32,319
service mesh to make sure everything is

1178
00:44:28,880 --> 00:44:33,040
running encryption around it and you're

1179
00:44:32,319 --> 00:44:36,160
going to

1180
00:44:33,040 --> 00:44:36,560
sleep much better i thank you all very

1181
00:44:36,160 --> 00:44:39,359
much

1182
00:44:36,560 --> 00:44:40,400
there's my contact info i will post

1183
00:44:39,359 --> 00:44:43,359
these slides

1184
00:44:40,400 --> 00:44:44,480
um sometime today watch my twitter

1185
00:44:43,359 --> 00:44:46,960
account for

1186
00:44:44,480 --> 00:44:48,160
for my github my github is the same it's

1187
00:44:46,960 --> 00:44:50,560
rainbow cat

1188
00:44:48,160 --> 00:44:51,920
um but yeah i'll post this new one

1189
00:44:50,560 --> 00:44:52,400
because i made some changes to it

1190
00:44:51,920 --> 00:44:55,680
there's an

1191
00:44:52,400 --> 00:45:05,760
old one out there right now um so

1192
00:44:55,680 --> 00:45:05,759
watch my twitter and that's it

