1
00:00:05,899 --> 00:01:13,619
cool

2
00:00:07,910 --> 00:01:16,020
<font color="#CCCCCC">give another</font><font color="#E5E5E5"> minute to cool</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I get</font>

3
00:01:13,619 --> 00:01:18,420
<font color="#E5E5E5">started I'm Dave</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a talk about</font><font color="#CCCCCC"> a</font>

4
00:01:16,020 --> 00:01:19,770
reverse engineering tool that I made<font color="#E5E5E5"> if</font>

5
00:01:18,420 --> 00:01:20,159
your eyes have<font color="#CCCCCC"> already started to glaze</font>

6
00:01:19,770 --> 00:01:22,979
over

7
00:01:20,159 --> 00:01:23,460
you can leave I<font color="#E5E5E5"> won't be mad rooms</font><font color="#CCCCCC"> not</font>

8
00:01:22,979 --> 00:01:27,270
empty

9
00:01:23,460 --> 00:01:30,329
good sign so a little<font color="#CCCCCC"> bit about myself</font>

10
00:01:27,270 --> 00:01:31,979
<font color="#CCCCCC">my name</font><font color="#E5E5E5"> is Dave Cook fuh by day I am a</font>

11
00:01:30,329 --> 00:01:34,259
corporate security engineer<font color="#E5E5E5"> in a big</font>

12
00:01:31,979 --> 00:01:35,659
<font color="#E5E5E5">company</font><font color="#CCCCCC"> I know</font><font color="#E5E5E5"> I'll get the token</font>

13
00:01:34,259 --> 00:01:38,009
disclaimer out<font color="#E5E5E5"> of the way right now</font>

14
00:01:35,659 --> 00:01:39,060
<font color="#E5E5E5">everything in this talk</font><font color="#CCCCCC"> is released on</font>

15
00:01:38,009 --> 00:01:41,520
<font color="#E5E5E5">my own behalf</font>

16
00:01:39,060 --> 00:01:45,409
I'm here like representing myself<font color="#E5E5E5"> not my</font>

17
00:01:41,520 --> 00:01:47,939
employer<font color="#CCCCCC"> so by day I do corporate</font>

18
00:01:45,409 --> 00:01:50,189
security and by night<font color="#CCCCCC"> I am a reverse</font>

19
00:01:47,939 --> 00:01:52,639
engineer<font color="#E5E5E5"> I've been working on a game</font>

20
00:01:50,189 --> 00:01:54,600
hacking project for<font color="#E5E5E5"> about two</font><font color="#CCCCCC"> years now</font>

21
00:01:52,640 --> 00:01:57,509
<font color="#E5E5E5">I've got nothing better to do</font><font color="#CCCCCC"> with my</font>

22
00:01:54,600 --> 00:02:00,089
time<font color="#E5E5E5"> it's fine</font><font color="#CCCCCC"> I'm graduated from the</font>

23
00:01:57,509 --> 00:02:01,770
CSEC program last<font color="#CCCCCC"> year and I</font><font color="#E5E5E5"> currently</font>

24
00:02:00,090 --> 00:02:04,860
live in<font color="#E5E5E5"> the San</font><font color="#CCCCCC"> Francisco Bay Area I</font>

25
00:02:01,770 --> 00:02:08,859
have a blog at cook for that<font color="#E5E5E5"> CEO and I'm</font>

26
00:02:04,860 --> 00:02:13,299
also on<font color="#CCCCCC"> twitter at cook</font><font color="#E5E5E5"> pho underscore</font>

27
00:02:08,860 --> 00:02:15,159
so let's talk binary analysis<font color="#E5E5E5"> how many</font>

28
00:02:13,299 --> 00:02:18,099
people have heard<font color="#E5E5E5"> of item</font><font color="#CCCCCC"> before or have</font>

29
00:02:15,159 --> 00:02:20,590
used it few hands<font color="#E5E5E5"> all right how many</font>

30
00:02:18,099 --> 00:02:22,230
<font color="#E5E5E5">people have paid for like the full</font>

31
00:02:20,590 --> 00:02:25,720
version<font color="#CCCCCC"> of</font><font color="#E5E5E5"> item before</font>

32
00:02:22,230 --> 00:02:29,828
no hands awesome that is my problem

33
00:02:25,720 --> 00:02:31,299
<font color="#E5E5E5">Ida Pro is very very expensive</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> full</font>

34
00:02:29,829 --> 00:02:32,799
<font color="#E5E5E5">fledge license with all the bells</font><font color="#CCCCCC"> and</font>

35
00:02:31,299 --> 00:02:35,730
<font color="#CCCCCC">whistles will</font><font color="#E5E5E5"> typically run like</font>

36
00:02:32,799 --> 00:02:37,810
multiple thousands<font color="#E5E5E5"> of dollars which for</font>

37
00:02:35,730 --> 00:02:40,929
<font color="#E5E5E5">hobbyists and people who do this kind</font><font color="#CCCCCC"> of</font>

38
00:02:37,810 --> 00:02:43,000
stuff for fun<font color="#CCCCCC"> is very</font><font color="#E5E5E5"> very hard to</font>

39
00:02:40,930 --> 00:02:45,159
justify like to your significant other

40
00:02:43,000 --> 00:02:46,870
or to yourself<font color="#E5E5E5"> even when you're spending</font>

41
00:02:45,159 --> 00:02:51,099
<font color="#CCCCCC">the amount of money you</font><font color="#E5E5E5"> get like a used</font>

42
00:02:46,870 --> 00:02:53,290
<font color="#E5E5E5">car for on a piece of software typically</font>

43
00:02:51,099 --> 00:02:54,790
<font color="#E5E5E5">like very hard to justify</font><font color="#CCCCCC"> on the other</font>

44
00:02:53,290 --> 00:02:56,439
hand of that<font color="#E5E5E5"> there are professional</font>

45
00:02:54,790 --> 00:02:58,239
reverse engineers and people<font color="#CCCCCC"> who do this</font>

46
00:02:56,439 --> 00:03:01,540
for<font color="#CCCCCC"> a living</font><font color="#E5E5E5"> or people who are like</font>

47
00:02:58,239 --> 00:03:03,909
extreme reversing enthusiasts who like

48
00:03:01,540 --> 00:03:05,019
for them when this is maybe<font color="#E5E5E5"> like</font><font color="#CCCCCC"> 5% of</font>

49
00:03:03,909 --> 00:03:06,429
the profit that<font color="#E5E5E5"> they're</font><font color="#CCCCCC"> making or</font>

50
00:03:05,019 --> 00:03:08,409
whatever like<font color="#E5E5E5"> they're making a lot of</font>

51
00:03:06,430 --> 00:03:09,970
<font color="#E5E5E5">money from reversing then it's more</font>

52
00:03:08,409 --> 00:03:12,040
justifiable<font color="#CCCCCC"> or if you have a corporate</font>

53
00:03:09,970 --> 00:03:13,930
like a<font color="#E5E5E5"> big company that's gonna shell</font>

54
00:03:12,040 --> 00:03:15,220
out you know<font color="#CCCCCC"> five grand</font>

55
00:03:13,930 --> 00:03:16,659
I'd like the drop<font color="#CCCCCC"> of a hat then yeah</font>

56
00:03:15,220 --> 00:03:19,510
this<font color="#E5E5E5"> really isn't like that big of</font><font color="#CCCCCC"> an</font>

57
00:03:16,659 --> 00:03:21,519
expense but<font color="#CCCCCC"> for</font><font color="#E5E5E5"> hobbyists it's it's a</font>

58
00:03:19,510 --> 00:03:23,129
big deal to<font color="#E5E5E5"> spend that kind</font><font color="#CCCCCC"> of money on</font>

59
00:03:21,519 --> 00:03:26,799
<font color="#E5E5E5">tools to pursue your hobby</font>

60
00:03:23,129 --> 00:03:28,448
so<font color="#CCCCCC"> that's sort</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> been the</font><font color="#E5E5E5"> problem for</font>

61
00:03:26,799 --> 00:03:30,040
<font color="#CCCCCC">the</font><font color="#E5E5E5"> past couple years Ida is very</font>

62
00:03:28,449 --> 00:03:31,479
<font color="#E5E5E5">expensive but it's like the best in</font>

63
00:03:30,040 --> 00:03:33,489
class<font color="#E5E5E5"> it's really really good at what it</font>

64
00:03:31,479 --> 00:03:36,010
<font color="#E5E5E5">does and it is like the gold standard</font>

65
00:03:33,489 --> 00:03:37,359
reverse engineering<font color="#E5E5E5"> as of recently there</font>

66
00:03:36,010 --> 00:03:39,399
have been<font color="#E5E5E5"> several other products</font><font color="#CCCCCC"> that</font>

67
00:03:37,359 --> 00:03:41,169
<font color="#E5E5E5">have begun to challenge that so we have</font>

68
00:03:39,400 --> 00:03:43,959
tools<font color="#E5E5E5"> like radar we</font><font color="#CCCCCC"> have tools like</font>

69
00:03:41,169 --> 00:03:45,639
<font color="#E5E5E5">hopper</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> in my case binary ninja where</font>

70
00:03:43,959 --> 00:03:48,459
<font color="#E5E5E5">they're</font><font color="#CCCCCC"> these open-source are very very</font>

71
00:03:45,639 --> 00:03:50,139
cheap<font color="#E5E5E5"> comparatively like a hundred</font>

72
00:03:48,459 --> 00:03:52,659
<font color="#E5E5E5">dollar license versus like a</font><font color="#CCCCCC"> five grand</font>

73
00:03:50,139 --> 00:03:56,139
license for reverse<font color="#CCCCCC"> engineering tools</font>

74
00:03:52,659 --> 00:03:58,448
and for<font color="#E5E5E5"> me I've been supporting binary</font>

75
00:03:56,139 --> 00:04:01,299
ninja<font color="#E5E5E5"> I think since it came out</font><font color="#CCCCCC"> of the</font>

76
00:03:58,449 --> 00:04:02,949
beta<font color="#E5E5E5"> and I've been following along but</font>

77
00:04:01,299 --> 00:04:05,470
I've always<font color="#CCCCCC"> had to resort back to Ida</font>

78
00:04:02,949 --> 00:04:07,180
<font color="#E5E5E5">until binary</font><font color="#CCCCCC"> n and just started adding</font>

79
00:04:05,470 --> 00:04:09,099
better<font color="#E5E5E5"> Windows support so they have like</font>

80
00:04:07,180 --> 00:04:11,709
a<font color="#CCCCCC"> PD B loader now so it works better</font>

81
00:04:09,099 --> 00:04:13,238
with debugging<font color="#E5E5E5"> symbols there's just a</font>

82
00:04:11,709 --> 00:04:14,590
lot of gradual improvements<font color="#E5E5E5"> and it's</font>

83
00:04:13,239 --> 00:04:17,289
really really<font color="#CCCCCC"> become like a very</font>

84
00:04:14,590 --> 00:04:20,950
powerful tool now<font color="#CCCCCC"> in the grand scheme of</font>

85
00:04:17,289 --> 00:04:21,940
<font color="#E5E5E5">reverse</font><font color="#CCCCCC"> engineering tools in my case</font><font color="#E5E5E5"> so</font>

86
00:04:20,950 --> 00:04:24,370
binary<font color="#E5E5E5"> ninja is</font><font color="#CCCCCC"> in</font>

87
00:04:21,940 --> 00:04:26,800
apparently a static<font color="#E5E5E5"> analysis tool and in</font>

88
00:04:24,370 --> 00:04:28,690
my case trying to convert from<font color="#E5E5E5"> Ida over</font>

89
00:04:26,800 --> 00:04:30,810
to binary<font color="#E5E5E5"> ninja the one thing that I</font>

90
00:04:28,690 --> 00:04:33,130
missed was<font color="#CCCCCC"> the ability to</font><font color="#E5E5E5"> switch between</font>

91
00:04:30,810 --> 00:04:36,220
<font color="#E5E5E5">static analysis like looking at your</font>

92
00:04:33,130 --> 00:04:37,930
disassembler and just jumping<font color="#CCCCCC"> it like</font>

93
00:04:36,220 --> 00:04:39,700
the job<font color="#E5E5E5"> of a head into a debugger</font><font color="#CCCCCC"> and</font>

94
00:04:37,930 --> 00:04:40,720
being able to have<font color="#CCCCCC"> dynamic analysis so</font>

95
00:04:39,700 --> 00:04:43,000
you<font color="#E5E5E5"> can see like the state of your</font>

96
00:04:40,720 --> 00:04:46,210
registers you can see like the state of

97
00:04:43,000 --> 00:04:48,460
memory you know the<font color="#E5E5E5"> table calls all that</font>

98
00:04:46,210 --> 00:04:50,169
stuff like all that dynamic<font color="#E5E5E5"> goodness is</font>

99
00:04:48,460 --> 00:04:52,030
wrapped into<font color="#E5E5E5"> the product where with</font>

100
00:04:50,170 --> 00:04:53,320
binary ninja you'd have to run<font color="#CCCCCC"> a</font>

101
00:04:52,030 --> 00:04:55,900
separate<font color="#CCCCCC"> program for that you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font>

102
00:04:53,320 --> 00:04:57,849
run<font color="#E5E5E5"> your debugger which gets very tiring</font>

103
00:04:55,900 --> 00:05:00,190
and there's a lot<font color="#E5E5E5"> of manual like back</font>

104
00:04:57,850 --> 00:05:02,710
and<font color="#E5E5E5"> forth and I wanted to just integrate</font>

105
00:05:00,190 --> 00:05:04,390
the two solutions together<font color="#E5E5E5"> and just fuse</font>

106
00:05:02,710 --> 00:05:08,770
them<font color="#CCCCCC"> onto one</font><font color="#E5E5E5"> product sort of like Ida</font>

107
00:05:04,390 --> 00:05:10,930
<font color="#E5E5E5">did so</font><font color="#CCCCCC"> I set out to create that with a</font>

108
00:05:08,770 --> 00:05:11,890
binary ninja plugin<font color="#E5E5E5"> and I came up with</font>

109
00:05:10,930 --> 00:05:14,080
bin-debug

110
00:05:11,890 --> 00:05:16,870
which is a combination<font color="#CCCCCC"> of binary ninja</font>

111
00:05:14,080 --> 00:05:19,539
and wind<font color="#E5E5E5"> a bug</font><font color="#CCCCCC"> feed debugger</font><font color="#E5E5E5"> so</font>

112
00:05:16,870 --> 00:05:23,230
basically the<font color="#E5E5E5"> plug-in will take window</font>

113
00:05:19,540 --> 00:05:24,970
bug and use a<font color="#CCCCCC"> PI pi KD it's called it</font>

114
00:05:23,230 --> 00:05:28,150
like a<font color="#E5E5E5"> Python wrapper around the window</font>

115
00:05:24,970 --> 00:05:29,950
bug<font color="#E5E5E5"> API in order to combine the two and</font>

116
00:05:28,150 --> 00:05:31,599
<font color="#CCCCCC">you</font><font color="#E5E5E5"> get both your stack analysis through</font>

117
00:05:29,950 --> 00:05:34,900
binary ninja and your dynamic analysis

118
00:05:31,600 --> 00:05:36,370
<font color="#CCCCCC">through your debugger so we</font><font color="#E5E5E5"> sort of</font>

119
00:05:34,900 --> 00:05:38,109
supplement like the static information

120
00:05:36,370 --> 00:05:39,760
<font color="#E5E5E5">that binge is really good at with the</font>

121
00:05:38,110 --> 00:05:41,919
dynamic<font color="#E5E5E5"> information live debugger and</font>

122
00:05:39,760 --> 00:05:43,840
there's also a bunch of controls and

123
00:05:41,919 --> 00:05:47,320
gooey stuff built<font color="#E5E5E5"> into binary ninja they</font>

124
00:05:43,840 --> 00:05:50,080
just have this one<font color="#E5E5E5"> like UI one product</font>

125
00:05:47,320 --> 00:05:51,760
again sort of like Ida does so<font color="#E5E5E5"> this</font>

126
00:05:50,080 --> 00:05:54,340
inherently is not really like a novel

127
00:05:51,760 --> 00:05:56,890
idea this has<font color="#E5E5E5"> been done before</font><font color="#CCCCCC"> the two</font>

128
00:05:54,340 --> 00:05:58,960
prime<font color="#CCCCCC"> examples here are tool called</font>

129
00:05:56,890 --> 00:06:02,289
binge<font color="#CCCCCC"> a Tron buy snare</font><font color="#E5E5E5"> which is</font>

130
00:05:58,960 --> 00:06:03,760
<font color="#E5E5E5">basically a same</font><font color="#CCCCCC"> thing except</font><font color="#E5E5E5"> with the</font>

131
00:06:02,290 --> 00:06:05,890
different debugging platform called

132
00:06:03,760 --> 00:06:08,169
<font color="#E5E5E5">Voltron which is a wrapper around a</font>

133
00:06:05,890 --> 00:06:11,950
<font color="#E5E5E5">number of other debuggers window bug</font>

134
00:06:08,169 --> 00:06:14,950
included and<font color="#E5E5E5"> there's a more in the UI</font>

135
00:06:11,950 --> 00:06:17,560
side there's a project<font color="#E5E5E5"> by an NCC group</font>

136
00:06:14,950 --> 00:06:19,210
intern named<font color="#CCCCCC"> Erik an infant who made</font>

137
00:06:17,560 --> 00:06:21,610
this tool called<font color="#E5E5E5"> bench of dynamics which</font>

138
00:06:19,210 --> 00:06:24,370
<font color="#CCCCCC">is basically a really</font><font color="#E5E5E5"> cool</font><font color="#CCCCCC"> GUI thing but</font>

139
00:06:21,610 --> 00:06:26,140
again<font color="#CCCCCC"> like a solves the dynamic analysis</font>

140
00:06:24,370 --> 00:06:29,830
problem with<font color="#E5E5E5"> Benja but then also has</font>

141
00:06:26,140 --> 00:06:31,240
like a nice nice fancy UI<font color="#E5E5E5"> it's more</font>

142
00:06:29,830 --> 00:06:32,979
oriented<font color="#CCCCCC"> towards people who are</font><font color="#E5E5E5"> new to</font>

143
00:06:31,240 --> 00:06:33,490
<font color="#E5E5E5">reverse engineering and just gives more</font>

144
00:06:32,979 --> 00:06:36,169
<font color="#E5E5E5">of</font>

145
00:06:33,490 --> 00:06:37,400
<font color="#E5E5E5">GUI like easy-to-use feel rather than</font>

146
00:06:36,170 --> 00:06:39,440
your ancient like window bug

147
00:06:37,400 --> 00:06:40,940
<font color="#E5E5E5">command-line stuff</font>

148
00:06:39,440 --> 00:06:43,040
the problem being is<font color="#CCCCCC"> that with both</font>

149
00:06:40,940 --> 00:06:45,800
these<font color="#CCCCCC"> solutions the windows support is</font>

150
00:06:43,040 --> 00:06:47,030
either not there or is lacking<font color="#CCCCCC"> like in</font>

151
00:06:45,800 --> 00:06:48,440
my<font color="#CCCCCC"> case there are a lot of Hoops to jump</font>

152
00:06:47,030 --> 00:06:49,640
through to<font color="#CCCCCC"> get up and</font><font color="#E5E5E5"> running on Windows</font>

153
00:06:48,440 --> 00:06:51,500
and<font color="#E5E5E5"> I wanted to create something that</font>

154
00:06:49,640 --> 00:06:54,860
<font color="#E5E5E5">was just easier to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> out of the</font>

155
00:06:51,500 --> 00:06:57,410
box and just<font color="#CCCCCC"> like show</font><font color="#E5E5E5"> windows some of</font>

156
00:06:54,860 --> 00:06:58,760
pretty much<font color="#E5E5E5"> so for me in my case when I</font>

157
00:06:57,410 --> 00:07:00,740
was<font color="#CCCCCC"> reverse-engineering</font><font color="#E5E5E5"> video games</font>

158
00:06:58,760 --> 00:07:02,780
that's really like a<font color="#E5E5E5"> Windows thing I'm</font>

159
00:07:00,740 --> 00:07:05,570
<font color="#CCCCCC">reverse engineering Pease more than any</font>

160
00:07:02,780 --> 00:07:06,349
other type<font color="#CCCCCC"> of binary</font><font color="#E5E5E5"> so I wanted to</font>

161
00:07:05,570 --> 00:07:12,010
<font color="#E5E5E5">create something</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> was good for</font>

162
00:07:06,350 --> 00:07:14,510
<font color="#CCCCCC">Windows so for the the</font><font color="#E5E5E5"> plug-in itself</font>

163
00:07:12,010 --> 00:07:15,950
<font color="#E5E5E5">most of the primary features are just</font>

164
00:07:14,510 --> 00:07:18,650
things that integrate with in binary

165
00:07:15,950 --> 00:07:20,719
<font color="#E5E5E5">ninjas GUI so like for example we can</font>

166
00:07:18,650 --> 00:07:23,060
launch and control the debugger directly

167
00:07:20,720 --> 00:07:25,040
from Benja so we get these buttons on

168
00:07:23,060 --> 00:07:28,070
<font color="#CCCCCC">top with that have</font><font color="#E5E5E5"> your typical debugger</font>

169
00:07:25,040 --> 00:07:32,390
controls like<font color="#CCCCCC"> start/stop set a</font>

170
00:07:28,070 --> 00:07:36,790
breakpoint<font color="#E5E5E5"> you know step over step in</font>

171
00:07:32,390 --> 00:07:39,110
step out and<font color="#E5E5E5"> then we can also sync the</font>

172
00:07:36,790 --> 00:07:40,700
debugger information like the

173
00:07:39,110 --> 00:07:43,790
instruction pointer directly to the

174
00:07:40,700 --> 00:07:45,260
<font color="#CCCCCC">binary ninja disassembly graph so for</font>

175
00:07:43,790 --> 00:07:47,420
anyone who's familiar with<font color="#E5E5E5"> Ida or with</font>

176
00:07:45,260 --> 00:07:49,400
binary ninja you get like a nice graph

177
00:07:47,420 --> 00:07:51,080
of all<font color="#CCCCCC"> the basic blocks of the program</font>

178
00:07:49,400 --> 00:07:54,020
and like all the<font color="#E5E5E5"> different functions</font><font color="#CCCCCC"> and</font>

179
00:07:51,080 --> 00:07:55,490
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> they're all very like graphed</font>

180
00:07:54,020 --> 00:07:57,979
out you know it's pretty graph of where

181
00:07:55,490 --> 00:08:01,760
<font color="#E5E5E5">your your control flow of your program</font>

182
00:07:57,980 --> 00:08:03,860
goes<font color="#CCCCCC"> but with your</font><font color="#E5E5E5"> disassemble or your</font>

183
00:08:01,760 --> 00:08:05,690
debugger<font color="#CCCCCC"> with window bug</font><font color="#E5E5E5"> you just</font><font color="#CCCCCC"> get</font>

184
00:08:03,860 --> 00:08:07,130
<font color="#E5E5E5">like a plain text output</font><font color="#CCCCCC"> of a bunch</font><font color="#E5E5E5"> of</font>

185
00:08:05,690 --> 00:08:08,810
<font color="#E5E5E5">instructions</font><font color="#CCCCCC"> it's kind of hard to see</font>

186
00:08:07,130 --> 00:08:10,820
where<font color="#E5E5E5"> the program flow is going to go so</font>

187
00:08:08,810 --> 00:08:12,650
<font color="#E5E5E5">I want to combine that</font><font color="#CCCCCC"> into bin</font><font color="#E5E5E5"> just so</font>

188
00:08:10,820 --> 00:08:14,930
that you can<font color="#E5E5E5"> have a nice pretty graph</font>

189
00:08:12,650 --> 00:08:19,159
and then also get the dynamic view from

190
00:08:14,930 --> 00:08:20,420
your debugger<font color="#CCCCCC"> again like you can set</font>

191
00:08:19,160 --> 00:08:21,980
breakpoints and<font color="#E5E5E5"> you can move your</font>

192
00:08:20,420 --> 00:08:24,890
instruction<font color="#E5E5E5"> pointer directly using</font><font color="#CCCCCC"> the</font>

193
00:08:21,980 --> 00:08:26,570
disassembly graph so like you can just

194
00:08:24,890 --> 00:08:29,030
<font color="#E5E5E5">right-click on an instruction and set a</font>

195
00:08:26,570 --> 00:08:30,650
breakpoint there<font color="#E5E5E5"> you can run the</font><font color="#CCCCCC"> program</font>

196
00:08:29,030 --> 00:08:32,329
up to<font color="#E5E5E5"> that certain instruction or you</font>

197
00:08:30,650 --> 00:08:34,478
can just have<font color="#E5E5E5"> the instruction reporter</font>

198
00:08:32,330 --> 00:08:37,099
jump all<font color="#CCCCCC"> the way down to that point and</font>

199
00:08:34,479 --> 00:08:39,650
not<font color="#E5E5E5"> ask you all the codes that's like a</font>

200
00:08:37,099 --> 00:08:42,800
classic technique<font color="#E5E5E5"> for</font><font color="#CCCCCC"> getting around</font>

201
00:08:39,650 --> 00:08:44,569
<font color="#CCCCCC">like software protections like your</font><font color="#E5E5E5"> no</font>

202
00:08:42,799 --> 00:08:46,040
answer key code<font color="#E5E5E5"> you just jump</font><font color="#CCCCCC"> over the</font>

203
00:08:44,570 --> 00:08:46,430
function where it asks for the serial

204
00:08:46,040 --> 00:08:48,430
<font color="#E5E5E5">and</font>

205
00:08:46,430 --> 00:09:00,410
runs the rest of the program<font color="#E5E5E5"> is normal</font>

206
00:08:48,430 --> 00:09:03,170
<font color="#E5E5E5">crushing over there I</font><font color="#CCCCCC"> think it does all</font>

207
00:09:00,410 --> 00:09:04,430
the threads currently<font color="#E5E5E5"> um that's an</font>

208
00:09:03,170 --> 00:09:06,800
<font color="#E5E5E5">interesting question</font><font color="#CCCCCC"> I don't know if</font>

209
00:09:04,430 --> 00:09:11,000
there's actually<font color="#E5E5E5"> support for that at the</font>

210
00:09:06,800 --> 00:09:13,459
window bug level even but yeah at least

211
00:09:11,000 --> 00:09:19,790
<font color="#E5E5E5">in</font><font color="#CCCCCC"> for for my case yeah it's</font><font color="#E5E5E5"> just all</font>

212
00:09:13,460 --> 00:09:23,120
threads<font color="#CCCCCC"> so another</font><font color="#E5E5E5"> solution</font><font color="#CCCCCC"> or another</font>

213
00:09:19,790 --> 00:09:24,349
feature<font color="#E5E5E5"> here is the the branch decision</font>

214
00:09:23,120 --> 00:09:26,840
highlighting so if you were to reach

215
00:09:24,350 --> 00:09:28,220
like<font color="#E5E5E5"> a jump</font><font color="#CCCCCC"> instruction when you're</font>

216
00:09:26,840 --> 00:09:30,080
looking<font color="#E5E5E5"> at just the stack analysis you</font>

217
00:09:28,220 --> 00:09:31,220
<font color="#E5E5E5">don't have the alive like the register</font>

218
00:09:30,080 --> 00:09:33,440
view you're not able<font color="#E5E5E5"> to see what's going</font>

219
00:09:31,220 --> 00:09:35,090
<font color="#E5E5E5">on</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> just be this jump here</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you</font>

220
00:09:33,440 --> 00:09:36,980
wouldn't know whether you would<font color="#E5E5E5"> take the</font>

221
00:09:35,090 --> 00:09:41,450
jump or whether you'd continue executing

222
00:09:36,980 --> 00:09:43,250
down<font color="#CCCCCC"> so what we're able to</font><font color="#E5E5E5"> do with with</font>

223
00:09:41,450 --> 00:09:45,110
bin-debug just take the register views

224
00:09:43,250 --> 00:09:47,120
send that over to binary ninja and then

225
00:09:45,110 --> 00:09:48,770
like graphically highlight like we're

226
00:09:47,120 --> 00:09:50,810
not going to<font color="#CCCCCC"> take</font><font color="#E5E5E5"> this jump instruction</font>

227
00:09:48,770 --> 00:09:52,250
we're going to<font color="#E5E5E5"> highlight green where our</font>

228
00:09:50,810 --> 00:09:53,719
<font color="#E5E5E5">program is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> go so we're going to</font>

229
00:09:52,250 --> 00:09:55,520
go<font color="#E5E5E5"> into this first basic</font><font color="#CCCCCC"> block here</font>

230
00:09:53,720 --> 00:09:58,450
instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> taking the jump to the second</font>

231
00:09:55,520 --> 00:10:02,560
and it highlights<font color="#CCCCCC"> that in terms of like</font>

232
00:09:58,450 --> 00:10:05,380
where the instruction board is<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> go</font>

233
00:10:02,560 --> 00:10:08,959
<font color="#CCCCCC">so I got a nice little demo here</font><font color="#E5E5E5"> also</font>

234
00:10:05,380 --> 00:10:12,170
<font color="#E5E5E5">recorded on case fall in my face here</font>

235
00:10:08,960 --> 00:10:17,140
but so we<font color="#E5E5E5"> have binary ninja up this is</font>

236
00:10:12,170 --> 00:10:19,280
the scroll<font color="#E5E5E5"> down so this</font><font color="#CCCCCC"> is like the</font>

237
00:10:17,140 --> 00:10:20,449
graph of our program<font color="#CCCCCC"> these are like a</font>

238
00:10:19,280 --> 00:10:24,650
different basic blocks that'll be

239
00:10:20,450 --> 00:10:28,370
executed if we wanted<font color="#CCCCCC"> to start our</font>

240
00:10:24,650 --> 00:10:30,110
debugging<font color="#E5E5E5"> for this example program you</font>

241
00:10:28,370 --> 00:10:31,910
can right-click<font color="#E5E5E5"> on an initialize toolbar</font>

242
00:10:30,110 --> 00:10:35,140
so that's the little control toolbar

243
00:10:31,910 --> 00:10:38,780
that<font color="#CCCCCC"> I was talking about earlier you can</font>

244
00:10:35,140 --> 00:10:40,460
set the<font color="#E5E5E5"> process arguments if you have</font>

245
00:10:38,780 --> 00:10:42,290
any special<font color="#CCCCCC"> argument to want to pass to</font>

246
00:10:40,460 --> 00:10:45,500
<font color="#CCCCCC">the program when it runs so like for</font>

247
00:10:42,290 --> 00:10:47,599
example<font color="#E5E5E5"> for this for this game you need</font>

248
00:10:45,500 --> 00:10:50,480
<font color="#E5E5E5">to do ran from launcher</font><font color="#CCCCCC"> in order</font><font color="#E5E5E5"> for the</font>

249
00:10:47,600 --> 00:10:53,060
game to execute<font color="#E5E5E5"> and then you can just</font>

250
00:10:50,480 --> 00:10:57,650
take go up here<font color="#E5E5E5"> and it'll spin open the</font>

251
00:10:53,060 --> 00:10:59,810
debugger<font color="#E5E5E5"> and will start executing the</font>

252
00:10:57,650 --> 00:11:00,259
program<font color="#CCCCCC"> so right now it's loading all</font>

253
00:10:59,810 --> 00:11:01,628
<font color="#CCCCCC">the</font><font color="#E5E5E5"> break</font>

254
00:11:00,259 --> 00:11:07,089
that we<font color="#CCCCCC"> saved</font><font color="#E5E5E5"> from the last session</font>

255
00:11:01,629 --> 00:11:07,089
<font color="#E5E5E5">which takes a little bit we can open our</font>

256
00:11:07,600 --> 00:11:14,899
memory view and a view<font color="#CCCCCC"> of the registers</font>

257
00:11:12,529 --> 00:11:18,350
here<font color="#CCCCCC"> so we keep</font><font color="#E5E5E5"> those open to the side</font>

258
00:11:14,899 --> 00:11:20,149
I tried integrating this<font color="#CCCCCC"> into binary</font>

259
00:11:18,350 --> 00:11:22,579
ninja itself<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it was a lot easier</font>

260
00:11:20,149 --> 00:11:24,859
<font color="#E5E5E5">just</font><font color="#CCCCCC"> to let window bug do it because</font>

261
00:11:22,579 --> 00:11:26,599
<font color="#CCCCCC">basically you have to send a whole bunch</font>

262
00:11:24,859 --> 00:11:28,220
of memory over its binary ninja<font color="#E5E5E5"> and it</font>

263
00:11:26,600 --> 00:11:29,569
was just a big hassle so it's just

264
00:11:28,220 --> 00:11:31,970
<font color="#E5E5E5">easier to sort of keep it out to the</font>

265
00:11:29,569 --> 00:11:34,608
side but keep<font color="#CCCCCC"> that information separate</font>

266
00:11:31,970 --> 00:11:39,229
from Benja itself but once this is

267
00:11:34,609 --> 00:11:48,799
loaded we can<font color="#CCCCCC"> go over to our example</font>

268
00:11:39,229 --> 00:11:57,139
function over here bring this up and we

269
00:11:48,799 --> 00:11:59,720
can set a<font color="#E5E5E5"> breakpoint over here cool so</font>

270
00:11:57,139 --> 00:12:01,189
the<font color="#E5E5E5"> breakpoints set and if we go</font><font color="#CCCCCC"> over to</font>

271
00:11:59,720 --> 00:12:02,600
our debugger we can see these<font color="#CCCCCC"> these</font>

272
00:12:01,189 --> 00:12:05,480
commands<font color="#E5E5E5"> that are being back and forth</font>

273
00:12:02,600 --> 00:12:07,369
sent back and forth<font color="#E5E5E5"> so so far we have</font>

274
00:12:05,480 --> 00:12:09,649
<font color="#CCCCCC">synced</font><font color="#E5E5E5"> the debugger information to</font>

275
00:12:07,369 --> 00:12:12,499
binary ninja<font color="#E5E5E5"> and we set a breakpoint at</font>

276
00:12:09,649 --> 00:12:15,529
the certain address<font color="#E5E5E5"> which correlates to</font>

277
00:12:12,499 --> 00:12:19,459
<font color="#E5E5E5">this function over here</font><font color="#CCCCCC"> and now we can</font>

278
00:12:15,529 --> 00:12:22,100
just<font color="#E5E5E5"> execute</font><font color="#CCCCCC"> the program and it's going</font>

279
00:12:19,459 --> 00:12:24,108
<font color="#E5E5E5">to run until we hit this this first</font>

280
00:12:22,100 --> 00:12:26,059
place<font color="#E5E5E5"> where I set the breakpoint up here</font>

281
00:12:24,109 --> 00:12:28,730
so the yellow<font color="#E5E5E5"> over</font><font color="#CCCCCC"> here is our current</font>

282
00:12:26,059 --> 00:12:32,809
instruction pointer<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> can just go</font>

283
00:12:28,730 --> 00:12:35,839
and step through<font color="#CCCCCC"> our program is normal</font>

284
00:12:32,809 --> 00:12:37,850
here<font color="#E5E5E5"> so one of the cool things that I</font>

285
00:12:35,839 --> 00:12:40,339
built<font color="#E5E5E5"> into sort of automate a lot of the</font>

286
00:12:37,850 --> 00:12:43,220
manual analysis with<font color="#E5E5E5"> reverse engineering</font>

287
00:12:40,339 --> 00:12:45,350
is<font color="#E5E5E5"> as anyone familiar with</font><font color="#CCCCCC"> the tables</font>

288
00:12:43,220 --> 00:12:49,129
<font color="#CCCCCC">before</font><font color="#E5E5E5"> I worked with the tables in</font>

289
00:12:45,350 --> 00:12:52,009
<font color="#E5E5E5">reversing basically it is it's basically</font>

290
00:12:49,129 --> 00:12:55,970
<font color="#E5E5E5">a way that</font><font color="#CCCCCC"> C++ handles polymorphism</font><font color="#E5E5E5"> and</font>

291
00:12:52,009 --> 00:12:58,100
from<font color="#E5E5E5"> the static analysis standpoint it's</font>

292
00:12:55,970 --> 00:13:00,499
<font color="#E5E5E5">really troubling because like you'd see</font>

293
00:12:58,100 --> 00:13:02,239
<font color="#CCCCCC">like for</font><font color="#E5E5E5"> example here you</font><font color="#CCCCCC"> just see like</font>

294
00:13:00,499 --> 00:13:04,519
<font color="#E5E5E5">register values and then down at the</font>

295
00:13:02,239 --> 00:13:06,019
<font color="#E5E5E5">bottom</font><font color="#CCCCCC"> here it goes call</font><font color="#E5E5E5"> EDX and you</font>

296
00:13:04,519 --> 00:13:08,839
don't know what EDX is you don't know

297
00:13:06,019 --> 00:13:10,459
what function is being called<font color="#E5E5E5"> until</font>

298
00:13:08,839 --> 00:13:10,910
you're<font color="#CCCCCC"> actually executing that program</font>

299
00:13:10,459 --> 00:13:12,530
in<font color="#E5E5E5"> your</font>

300
00:13:10,910 --> 00:13:16,370
you can<font color="#CCCCCC"> actually tell what</font><font color="#E5E5E5"> it's going to</font>

301
00:13:12,530 --> 00:13:18,380
<font color="#E5E5E5">do and my way of solving this previously</font>

302
00:13:16,370 --> 00:13:20,120
was you just have to run<font color="#CCCCCC"> the program in</font>

303
00:13:18,380 --> 00:13:22,610
a debugger<font color="#E5E5E5"> go back over to</font><font color="#CCCCCC"> your</font>

304
00:13:20,120 --> 00:13:24,080
disassembler and then<font color="#E5E5E5"> comment like when</font>

305
00:13:22,610 --> 00:13:26,000
<font color="#E5E5E5">I ran this this was the function that</font>

306
00:13:24,080 --> 00:13:27,410
was actually<font color="#E5E5E5"> being called so what I</font>

307
00:13:26,000 --> 00:13:30,620
wanted to do with the debugger here was

308
00:13:27,410 --> 00:13:32,480
to actually<font color="#CCCCCC"> have it like automatically</font>

309
00:13:30,620 --> 00:13:34,700
annotate which functions were being

310
00:13:32,480 --> 00:13:36,200
called<font color="#E5E5E5"> which which functions are being</font>

311
00:13:34,700 --> 00:13:39,170
<font color="#E5E5E5">records from the</font><font color="#CCCCCC"> beat tables so like as</font>

312
00:13:36,200 --> 00:13:40,970
I execute through this this function

313
00:13:39,170 --> 00:13:44,120
<font color="#E5E5E5">here it's going to go through and</font>

314
00:13:40,970 --> 00:13:45,770
annotate like call<font color="#E5E5E5"> EDX like this is what</font>

315
00:13:44,120 --> 00:13:50,530
was actually<font color="#E5E5E5"> called was this game</font><font color="#CCCCCC"> client</font>

316
00:13:45,770 --> 00:13:53,060
<font color="#CCCCCC">States</font><font color="#E5E5E5"> program here our function</font><font color="#CCCCCC"> here so</font>

317
00:13:50,530 --> 00:13:54,740
<font color="#E5E5E5">again like just automatically executing</font>

318
00:13:53,060 --> 00:13:56,270
through<font color="#E5E5E5"> stepping through each of the</font>

319
00:13:54,740 --> 00:13:57,800
instructions<font color="#E5E5E5"> here we get like a much</font>

320
00:13:56,270 --> 00:13:59,420
better idea<font color="#CCCCCC"> of what's actually</font><font color="#E5E5E5"> going on</font>

321
00:13:57,800 --> 00:14:01,089
in<font color="#CCCCCC"> the program</font><font color="#E5E5E5"> when we go and look at</font><font color="#CCCCCC"> it</font>

322
00:13:59,420 --> 00:14:03,380
again<font color="#E5E5E5"> from a static analysis standpoint</font>

323
00:14:01,090 --> 00:14:05,390
so we can<font color="#E5E5E5"> just like save our analysis</font>

324
00:14:03,380 --> 00:14:06,860
<font color="#E5E5E5">file here and in binary ninja and open</font>

325
00:14:05,390 --> 00:14:09,890
it<font color="#E5E5E5"> back up and see which functions were</font>

326
00:14:06,860 --> 00:14:11,480
executed so we can continue stepping

327
00:14:09,890 --> 00:14:13,250
<font color="#CCCCCC">through here and</font><font color="#E5E5E5"> we get to our first</font>

328
00:14:11,480 --> 00:14:15,380
branch instruction and we see that we're

329
00:14:13,250 --> 00:14:19,010
going<font color="#CCCCCC"> to execute</font><font color="#E5E5E5"> here we're not going to</font>

330
00:14:15,380 --> 00:14:22,670
<font color="#CCCCCC">take this jump so we keep going</font><font color="#E5E5E5"> and it</font>

331
00:14:19,010 --> 00:14:28,010
keeps<font color="#E5E5E5"> annotating and we're gonna call</font>

332
00:14:22,670 --> 00:14:29,719
another<font color="#CCCCCC"> vtable</font><font color="#E5E5E5"> function so let's say we</font>

333
00:14:28,010 --> 00:14:32,630
want to<font color="#E5E5E5"> just get out of</font><font color="#CCCCCC"> this function</font>

334
00:14:29,720 --> 00:14:35,330
entirely<font color="#E5E5E5"> we can just do run the cursor</font>

335
00:14:32,630 --> 00:14:37,820
down<font color="#CCCCCC"> here</font><font color="#E5E5E5"> and say we want</font><font color="#CCCCCC"> to execute</font><font color="#E5E5E5"> up</font>

336
00:14:35,330 --> 00:14:39,740
to this point and then our debugger<font color="#E5E5E5"> is</font>

337
00:14:37,820 --> 00:14:41,090
just going<font color="#CCCCCC"> to go execute all the</font>

338
00:14:39,740 --> 00:14:43,550
<font color="#E5E5E5">instructions that hits this push</font>

339
00:14:41,090 --> 00:14:45,310
instruction and then we can step the

340
00:14:43,550 --> 00:14:49,729
rest of the way<font color="#E5E5E5"> out of the function and</font>

341
00:14:45,310 --> 00:14:52,910
our<font color="#CCCCCC"> games</font><font color="#E5E5E5"> gonna spin up so just like a</font>

342
00:14:49,730 --> 00:14:54,500
quick brief little demo again like<font color="#E5E5E5"> this</font>

343
00:14:52,910 --> 00:14:55,910
is more of like<font color="#CCCCCC"> a hacky</font><font color="#E5E5E5"> script at this</font>

344
00:14:54,500 --> 00:14:58,310
point there's really<font color="#E5E5E5"> not much to it but</font>

345
00:14:55,910 --> 00:15:00,170
<font color="#E5E5E5">it's kind of like</font><font color="#CCCCCC"> it just something</font>

346
00:14:58,310 --> 00:15:02,000
<font color="#CCCCCC">simple</font><font color="#E5E5E5"> that made my life a hell</font><font color="#CCCCCC"> of a lot</font>

347
00:15:00,170 --> 00:15:03,650
<font color="#CCCCCC">easier and</font><font color="#E5E5E5"> really took a lot of that</font>

348
00:15:02,000 --> 00:15:05,540
static analysis time that goes in the

349
00:15:03,650 --> 00:15:13,100
reverse engineering<font color="#CCCCCC"> and just automated a</font>

350
00:15:05,540 --> 00:15:15,319
lot of it so a<font color="#E5E5E5"> couple lessons learned</font><font color="#CCCCCC"> I</font>

351
00:15:13,100 --> 00:15:17,270
spent a lot<font color="#CCCCCC"> of time trying</font><font color="#E5E5E5"> to deal</font><font color="#CCCCCC"> with</font>

352
00:15:15,320 --> 00:15:19,220
<font color="#E5E5E5">pairs in</font><font color="#CCCCCC"> pi KD which is one of</font><font color="#E5E5E5"> the</font>

353
00:15:17,270 --> 00:15:22,040
underlying<font color="#E5E5E5"> technologies that I used in</font>

354
00:15:19,220 --> 00:15:23,170
order to<font color="#E5E5E5"> implement the debugger API and</font>

355
00:15:22,040 --> 00:15:26,139
<font color="#E5E5E5">Python</font>

356
00:15:23,170 --> 00:15:28,329
like a lot of<font color="#CCCCCC"> the time that I spent</font>

357
00:15:26,139 --> 00:15:31,089
trying to solve<font color="#CCCCCC"> these errors was just in</font>

358
00:15:28,329 --> 00:15:33,099
the end fixed by<font color="#E5E5E5"> just like catching them</font>

359
00:15:31,089 --> 00:15:36,759
and just<font color="#E5E5E5"> ignoring them which is kind</font><font color="#CCCCCC"> of</font>

360
00:15:33,100 --> 00:15:39,669
<font color="#E5E5E5">like a really bad</font><font color="#CCCCCC"> software design</font>

361
00:15:36,759 --> 00:15:41,049
decision but like I found that<font color="#CCCCCC"> pi K T is</font>

362
00:15:39,669 --> 00:15:43,600
very very finicky<font color="#E5E5E5"> and like it doesn't</font>

363
00:15:41,049 --> 00:15:45,459
<font color="#CCCCCC">really like</font><font color="#E5E5E5"> the errors that</font><font color="#CCCCCC"> the throws</font>

364
00:15:43,600 --> 00:15:47,439
are<font color="#CCCCCC"> just arbitrary for no real reason</font>

365
00:15:45,459 --> 00:15:48,819
and they're not<font color="#E5E5E5"> very</font><font color="#CCCCCC"> descriptive so like</font>

366
00:15:47,439 --> 00:15:51,040
the best way to handle<font color="#E5E5E5"> that it was just</font>

367
00:15:48,819 --> 00:15:53,919
to catch it and ignore<font color="#E5E5E5"> it and everything</font>

368
00:15:51,040 --> 00:15:55,899
keeps running as planned<font color="#E5E5E5"> which again</font>

369
00:15:53,919 --> 00:15:57,369
<font color="#E5E5E5">like I don't really wasn't really too</font>

370
00:15:55,899 --> 00:16:01,629
sure but<font color="#E5E5E5"> that was like the best solution</font>

371
00:15:57,369 --> 00:16:03,609
that<font color="#CCCCCC"> I found</font><font color="#E5E5E5"> determining the type of an</font>

372
00:16:01,629 --> 00:16:05,799
object<font color="#CCCCCC"> in memory using the v-- tables is</font>

373
00:16:03,609 --> 00:16:07,689
not a<font color="#E5E5E5"> hundred</font><font color="#CCCCCC"> percent reliable in</font><font color="#E5E5E5"> the</font>

374
00:16:05,799 --> 00:16:11,199
cases of like multiple<font color="#E5E5E5"> inheritance when</font>

375
00:16:07,689 --> 00:16:13,988
you have like a class that would inherit

376
00:16:11,199 --> 00:16:15,819
from<font color="#E5E5E5"> two other classes basically the</font>

377
00:16:13,989 --> 00:16:18,489
<font color="#CCCCCC">feed</font><font color="#E5E5E5"> table layout in memory would just</font>

378
00:16:15,819 --> 00:16:20,979
have the<font color="#CCCCCC"> V table of one of those two</font>

379
00:16:18,489 --> 00:16:22,749
classes<font color="#E5E5E5"> and at the top of the object</font><font color="#CCCCCC"> so</font>

380
00:16:20,980 --> 00:16:24,279
basically the<font color="#CCCCCC"> way that</font><font color="#E5E5E5"> I used to</font>

381
00:16:22,749 --> 00:16:25,449
determine the object type was not<font color="#CCCCCC"> a</font>

382
00:16:24,279 --> 00:16:27,749
<font color="#CCCCCC">hundred percent reliable</font><font color="#E5E5E5"> and I was</font>

383
00:16:25,449 --> 00:16:29,769
really<font color="#E5E5E5"> confused when</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> hit a case of</font>

384
00:16:27,749 --> 00:16:31,929
<font color="#E5E5E5">multiple inheritance like why things</font>

385
00:16:29,769 --> 00:16:36,209
were matching up<font color="#E5E5E5"> basically it's</font><font color="#CCCCCC"> a it's</font>

386
00:16:31,929 --> 00:16:38,350
an inexact science<font color="#CCCCCC"> in the end like</font>

387
00:16:36,209 --> 00:16:40,748
trying to do all this<font color="#E5E5E5"> stuff on</font><font color="#CCCCCC"> Windows</font>

388
00:16:38,350 --> 00:16:42,639
when<font color="#CCCCCC"> I previously</font><font color="#E5E5E5"> worked in like Linux</font>

389
00:16:40,749 --> 00:16:44,619
and UNIX environment was very very

390
00:16:42,639 --> 00:16:46,049
strange just because<font color="#E5E5E5"> Windows has its own</font>

391
00:16:44,619 --> 00:16:48,999
very<font color="#E5E5E5"> weird way</font><font color="#CCCCCC"> of doing things</font>

392
00:16:46,049 --> 00:16:51,459
<font color="#E5E5E5">specifically in terms of like the named</font>

393
00:16:48,999 --> 00:16:53,110
pipes<font color="#E5E5E5"> and which is how I use to</font>

394
00:16:51,459 --> 00:16:56,079
<font color="#CCCCCC">communicate between</font><font color="#E5E5E5"> binary ninja and</font>

395
00:16:53,110 --> 00:16:58,209
window bug and just the the<font color="#CCCCCC"> general like</font>

396
00:16:56,079 --> 00:17:01,508
<font color="#CCCCCC">windows api and the</font><font color="#E5E5E5"> communist and stuff</font>

397
00:16:58,209 --> 00:17:05,740
like that<font color="#E5E5E5"> it's very strange</font><font color="#CCCCCC"> having come</font>

398
00:17:01,509 --> 00:17:07,120
from<font color="#E5E5E5"> like a linux background and like in</font>

399
00:17:05,740 --> 00:17:09,220
<font color="#E5E5E5">hindsight</font><font color="#CCCCCC"> i spent all</font><font color="#E5E5E5"> this time making</font>

400
00:17:07,119 --> 00:17:10,299
<font color="#E5E5E5">this tool when like looking</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't</font>

401
00:17:09,220 --> 00:17:12,610
<font color="#CCCCCC">know</font><font color="#E5E5E5"> I thought this would just be like a</font>

402
00:17:10,299 --> 00:17:14,408
quick weekend project and like six

403
00:17:12,609 --> 00:17:16,208
<font color="#E5E5E5">months later I'm finally</font><font color="#CCCCCC"> like releasing</font>

404
00:17:14,409 --> 00:17:18,610
the tool<font color="#E5E5E5"> it would have been easier just</font>

405
00:17:16,209 --> 00:17:20,319
<font color="#CCCCCC">to like improve</font><font color="#E5E5E5"> Windows support on</font>

406
00:17:18,609 --> 00:17:21,609
existing solutions rather than<font color="#E5E5E5"> try</font><font color="#CCCCCC"> and</font>

407
00:17:20,319 --> 00:17:24,908
do<font color="#CCCCCC"> everything my</font><font color="#E5E5E5"> way</font>

408
00:17:21,609 --> 00:17:27,099
sorry Elvis but yeah I would<font color="#CCCCCC"> have</font><font color="#E5E5E5"> saved</font>

409
00:17:24,909 --> 00:17:28,720
a lot of time<font color="#E5E5E5"> prior</font><font color="#CCCCCC"> to just I've tried</font>

410
00:17:27,099 --> 00:17:31,570
<font color="#E5E5E5">to improve existing solutions instead</font><font color="#CCCCCC"> of</font>

411
00:17:28,720 --> 00:17:33,010
<font color="#CCCCCC">making my own I think but</font><font color="#E5E5E5"> now that I</font>

412
00:17:31,570 --> 00:17:34,330
made<font color="#E5E5E5"> this thing and I kind of like it</font>

413
00:17:33,010 --> 00:17:36,158
<font color="#E5E5E5">I'm just going to keep</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> down the</font>

414
00:17:34,330 --> 00:17:40,158
road

415
00:17:36,159 --> 00:17:42,860
yeah so<font color="#E5E5E5"> the all the code is up on github</font>

416
00:17:40,159 --> 00:17:45,890
at this point<font color="#E5E5E5"> I just released the - hola</font>

417
00:17:42,860 --> 00:17:49,699
love like 24 hours<font color="#CCCCCC"> ago so it's</font><font color="#E5E5E5"> probably</font>

418
00:17:45,890 --> 00:17:51,710
very bug-ridden and very<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean it's</font>

419
00:17:49,700 --> 00:17:53,299
<font color="#E5E5E5">extremely a key</font><font color="#CCCCCC"> so like please go and</font>

420
00:17:51,710 --> 00:17:56,270
find<font color="#E5E5E5"> issues in this and let me</font><font color="#CCCCCC"> know so I</font>

421
00:17:53,299 --> 00:18:00,590
<font color="#CCCCCC">can pick some blood on yeah</font><font color="#E5E5E5"> that's all I</font>

422
00:17:56,270 --> 00:18:08,960
have<font color="#CCCCCC"> for</font><font color="#E5E5E5"> you guys any questions yeah</font>

423
00:18:00,590 --> 00:18:12,168
<font color="#E5E5E5">John then I'm not</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> if I think you're</font>

424
00:18:08,960 --> 00:18:15,740
talking about<font color="#E5E5E5"> the demo version</font><font color="#CCCCCC"> I think I</font>

425
00:18:12,169 --> 00:18:19,070
think you can<font color="#E5E5E5"> I know the licenses are</font>

426
00:18:15,740 --> 00:18:22,250
still very cheap compared<font color="#CCCCCC"> to like a like</font>

427
00:18:19,070 --> 00:18:25,428
an<font color="#CCCCCC"> idle license its I think there's like</font>

428
00:18:22,250 --> 00:18:28,760
a $99 intro license like a student

429
00:18:25,429 --> 00:18:30,230
<font color="#E5E5E5">license or like a hobbyist license and I</font>

430
00:18:28,760 --> 00:18:31,669
know there's tons of giveaways all the

431
00:18:30,230 --> 00:18:33,110
time at like conferences and stuff<font color="#E5E5E5"> but</font>

432
00:18:31,669 --> 00:18:35,770
yeah for the for the free<font color="#E5E5E5"> version I'm</font>

433
00:18:33,110 --> 00:18:35,770
not sure about<font color="#E5E5E5"> that</font>

434
00:18:36,159 --> 00:18:47,929
any other questions yeah um<font color="#CCCCCC"> you could so</font>

435
00:18:45,350 --> 00:18:51,168
the<font color="#CCCCCC"> pie Cady step is</font><font color="#E5E5E5"> basically a wrapper</font>

436
00:18:47,929 --> 00:18:54,049
<font color="#CCCCCC">on</font><font color="#E5E5E5"> the C++ debugger engine that comes</font>

437
00:18:51,169 --> 00:18:56,179
with like the<font color="#E5E5E5"> Windows SDK</font><font color="#CCCCCC"> so it's</font>

438
00:18:54,049 --> 00:18:58,908
basically just<font color="#E5E5E5"> like an easier way to</font>

439
00:18:56,179 --> 00:19:00,649
call<font color="#E5E5E5"> those functions</font><font color="#CCCCCC"> like if I wanted to</font>

440
00:18:58,909 --> 00:19:02,230
I could<font color="#CCCCCC"> have made everything</font><font color="#E5E5E5"> in like C++</font>

441
00:19:00,649 --> 00:19:04,489
which would have<font color="#E5E5E5"> been like a little</font><font color="#CCCCCC"> bit</font>

442
00:19:02,230 --> 00:19:07,039
harder<font color="#CCCCCC"> it just would have</font><font color="#E5E5E5"> been like</font><font color="#CCCCCC"> more</font>

443
00:19:04,490 --> 00:19:09,049
development effort<font color="#E5E5E5"> basically so like</font>

444
00:19:07,039 --> 00:19:10,700
yeah we could just<font color="#E5E5E5"> call like the windows</font>

445
00:19:09,049 --> 00:19:12,020
API<font color="#E5E5E5"> directly and just</font><font color="#CCCCCC"> like interface</font>

446
00:19:10,700 --> 00:19:13,730
with it that way<font color="#E5E5E5"> but it's kind of easier</font>

447
00:19:12,020 --> 00:19:14,899
just to have like the Python<font color="#CCCCCC"> wrap around</font>

448
00:19:13,730 --> 00:19:17,059
at<font color="#E5E5E5"> least I thought</font><font color="#CCCCCC"> it would be easier</font>

449
00:19:14,899 --> 00:19:20,678
until it started freaking<font color="#E5E5E5"> out on me</font>

450
00:19:17,059 --> 00:19:23,210
<font color="#CCCCCC">every every command that tried to</font><font color="#E5E5E5"> run</font>

451
00:19:20,679 --> 00:19:24,799
yeah like there's there<font color="#CCCCCC"> are other</font>

452
00:19:23,210 --> 00:19:40,010
solutions<font color="#E5E5E5"> there but they're they're more</font>

453
00:19:24,799 --> 00:19:42,420
<font color="#CCCCCC">difficult to use cool</font><font color="#E5E5E5"> yeah I don't have</font>

454
00:19:40,010 --> 00:19:45,720
<font color="#E5E5E5">any demos prepared</font><font color="#CCCCCC"> uh-huh</font>

455
00:19:42,420 --> 00:19:50,280
oh cool<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> throw something together</font>

456
00:19:45,720 --> 00:19:52,290
huh<font color="#CCCCCC"> now like I guess like the</font><font color="#E5E5E5"> I can I</font>

457
00:19:50,280 --> 00:19:55,139
can point<font color="#E5E5E5"> to some good resources there's</font>

458
00:19:52,290 --> 00:19:59,280
a book by Nick<font color="#CCCCCC"> Cano</font><font color="#E5E5E5"> who talks about</font><font color="#CCCCCC"> a</font>

459
00:19:55,140 --> 00:20:04,080
lot of<font color="#E5E5E5"> like a whole bunch of very like</font>

460
00:19:59,280 --> 00:20:05,639
applicable game hacking like techniques

461
00:20:04,080 --> 00:20:07,860
<font color="#E5E5E5">trends like all the background</font>

462
00:20:05,640 --> 00:20:09,570
information<font color="#E5E5E5"> that I skipped over what I</font>

463
00:20:07,860 --> 00:20:11,969
was talking about all<font color="#CCCCCC"> this stuff I would</font>

464
00:20:09,570 --> 00:20:15,149
totally recommend that book there's lots

465
00:20:11,970 --> 00:20:17,160
of like live<font color="#E5E5E5"> overflow is a really good</font>

466
00:20:15,150 --> 00:20:20,970
like livestreamer that goes over a bunch

467
00:20:17,160 --> 00:20:22,710
<font color="#CCCCCC">of this</font><font color="#E5E5E5"> stuff yeah I don't really have</font>

468
00:20:20,970 --> 00:20:24,750
anything<font color="#CCCCCC"> on hand</font><font color="#E5E5E5"> that I can show but on</font>

469
00:20:22,710 --> 00:20:27,420
this is<font color="#E5E5E5"> like this tool is made for game</font>

470
00:20:24,750 --> 00:20:29,040
acting so there's definitely<font color="#CCCCCC"> like it's</font>

471
00:20:27,420 --> 00:20:33,720
applicable to<font color="#CCCCCC"> that but I don't have</font>

472
00:20:29,040 --> 00:20:36,129
<font color="#E5E5E5">anything</font><font color="#CCCCCC"> that I can give</font><font color="#E5E5E5"> off hand cool</font>

473
00:20:33,720 --> 00:20:42,319
<font color="#CCCCCC">leg ties</font>

474
00:20:36,130 --> 00:20:42,319
[Applause]

