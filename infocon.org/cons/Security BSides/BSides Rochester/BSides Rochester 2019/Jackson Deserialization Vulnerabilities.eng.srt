1
00:00:00,350 --> 00:00:06,810
<font color="#CCCCCC">she's got three minutes left I think</font><font color="#E5E5E5"> so</font>

2
00:00:02,700 --> 00:00:08,068
but people come<font color="#E5E5E5"> in and everything I've</font>

3
00:00:06,810 --> 00:00:11,120
learned<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> InfoSec community</font>

4
00:00:08,069 --> 00:00:11,120
they're not a proper<font color="#E5E5E5"> Bunch</font>

5
00:02:34,069 --> 00:02:39,920
yeah start<font color="#E5E5E5"> okay think we're gonna go</font>

6
00:02:36,890 --> 00:02:41,719
<font color="#E5E5E5">ahead and get going I guess we just have</font>

7
00:02:39,920 --> 00:02:48,349
<font color="#E5E5E5">the stationary</font><font color="#CCCCCC"> mic</font><font color="#E5E5E5"> great so I've got a</font>

8
00:02:41,719 --> 00:02:50,720
stay here or project<font color="#CCCCCC"> so there's a guy</font>

9
00:02:48,349 --> 00:02:52,730
right there and I on the back<font color="#E5E5E5"> row can</font>

10
00:02:50,720 --> 00:02:54,769
<font color="#CCCCCC">you raise your hand</font><font color="#E5E5E5"> yeah okay good</font>

11
00:02:52,730 --> 00:02:56,200
<font color="#E5E5E5">that's just a sound check</font><font color="#CCCCCC"> you know if</font>

12
00:02:54,769 --> 00:02:58,189
you can hear me probably<font color="#CCCCCC"> anyone</font><font color="#E5E5E5"> can</font>

13
00:02:56,200 --> 00:02:59,720
because you're furthest away not<font color="#E5E5E5"> because</font>

14
00:02:58,189 --> 00:03:04,040
you're old and your hearings become

15
00:02:59,720 --> 00:03:06,379
enfeebled or anything<font color="#CCCCCC"> okay so I'm gonna</font>

16
00:03:04,040 --> 00:03:09,170
talk<font color="#CCCCCC"> to you</font><font color="#E5E5E5"> today about Jackson</font>

17
00:03:06,379 --> 00:03:10,548
deserialization vulnerabilities again my

18
00:03:09,170 --> 00:03:13,578
name's Robert<font color="#CCCCCC"> Secord I'm a technical</font>

19
00:03:10,549 --> 00:03:15,439
director<font color="#CCCCCC"> NCC group</font><font color="#E5E5E5"> so mostly what I do</font>

20
00:03:13,579 --> 00:03:19,579
for<font color="#CCCCCC"> living is develop and deliver</font>

21
00:03:15,439 --> 00:03:22,909
training<font color="#E5E5E5"> secure coding courses in Java C</font>

22
00:03:19,579 --> 00:03:26,389
C++ and<font color="#CCCCCC"> C</font><font color="#E5E5E5"> sharp so this is actually some</font>

23
00:03:22,909 --> 00:03:28,879
material I did some research on last

24
00:03:26,389 --> 00:03:33,470
year and<font color="#CCCCCC"> then sort</font><font color="#E5E5E5"> of incorporated</font><font color="#CCCCCC"> this</font>

25
00:03:28,879 --> 00:03:35,510
into some of our<font color="#CCCCCC"> Java training so when</font>

26
00:03:33,470 --> 00:03:37,430
I'm<font color="#E5E5E5"> not doing training development I'm</font>

27
00:03:35,510 --> 00:03:38,840
doing some you know secure coding

28
00:03:37,430 --> 00:03:41,720
research and a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of this stuff kind of</font>

29
00:03:38,840 --> 00:03:46,370
folds in<font color="#E5E5E5"> I'm actually a member of the C</font>

30
00:03:41,720 --> 00:03:48,169
Standards Committee so I'm more you know

31
00:03:46,370 --> 00:03:50,989
you know kind<font color="#CCCCCC"> of funny story but I was</font>

32
00:03:48,169 --> 00:03:54,319
on<font color="#E5E5E5"> the C Standards Committee for the</font>

33
00:03:50,989 --> 00:03:55,940
entire<font color="#CCCCCC"> c11 project so if you ever</font>

34
00:03:54,319 --> 00:03:57,168
wondered who was<font color="#E5E5E5"> responsible for that</font>

35
00:03:55,940 --> 00:04:00,159
<font color="#E5E5E5">garbage</font>

36
00:03:57,169 --> 00:04:06,829
you could probably blame me or throw

37
00:04:00,159 --> 00:04:10,310
hopefully soft objects<font color="#CCCCCC"> yeah nothing yeah</font>

38
00:04:06,829 --> 00:04:12,349
nothing that would leave a dent<font color="#CCCCCC"> and I</font>

39
00:04:10,310 --> 00:04:15,139
also do some<font color="#E5E5E5"> consulting typically I'll</font>

40
00:04:12,349 --> 00:04:18,079
do a lot<font color="#CCCCCC"> of you know source source code</font>

41
00:04:15,139 --> 00:04:23,690
analysis for customers you know<font color="#E5E5E5"> source</font>

42
00:04:18,079 --> 00:04:25,490
<font color="#E5E5E5">code II did security testing so and I</font>

43
00:04:23,690 --> 00:04:28,270
<font color="#E5E5E5">think we take questions</font><font color="#CCCCCC"> as we go longer</font>

44
00:04:25,490 --> 00:04:30,409
<font color="#CCCCCC">do</font><font color="#E5E5E5"> you have a way to wait to the end</font>

45
00:04:28,270 --> 00:04:32,870
yeah so if you<font color="#CCCCCC"> have a question just go</font>

46
00:04:30,409 --> 00:04:34,580
ahead<font color="#E5E5E5"> and ask</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> I hopefully</font>

47
00:04:32,870 --> 00:04:37,370
<font color="#CCCCCC">I'd kind of</font><font color="#E5E5E5"> design this talk to fit the</font>

48
00:04:34,580 --> 00:04:42,020
available<font color="#E5E5E5"> time so you know shouldn't run</font>

49
00:04:37,370 --> 00:04:45,680
over<font color="#CCCCCC"> so Jackson so</font><font color="#E5E5E5"> Jackson's basically a</font>

50
00:04:42,020 --> 00:04:47,780
JSON for<font color="#E5E5E5"> Java</font><font color="#CCCCCC"> so it supports the data</font>

51
00:04:45,680 --> 00:04:49,910
<font color="#E5E5E5">binding capability that</font>

52
00:04:47,780 --> 00:04:52,359
supports data binding and<font color="#E5E5E5"> object</font>

53
00:04:49,910 --> 00:04:56,420
serialization<font color="#E5E5E5"> basically allows you to</font>

54
00:04:52,360 --> 00:04:58,880
serialize Java objects into<font color="#CCCCCC"> JSON strings</font>

55
00:04:56,420 --> 00:05:01,040
and then deserialize<font color="#CCCCCC"> JSON strings back</font>

56
00:04:58,880 --> 00:05:04,670
into<font color="#E5E5E5"> Java objects you know sort of a</font>

57
00:05:01,040 --> 00:05:07,280
converter between JSON and<font color="#E5E5E5"> in Java</font>

58
00:05:04,670 --> 00:05:10,210
objects and it's it's quite<font color="#CCCCCC"> popular it's</font>

59
00:05:07,280 --> 00:05:13,429
the most popular<font color="#CCCCCC"> package for doing this</font>

60
00:05:10,210 --> 00:05:15,200
<font color="#CCCCCC">so this is again</font><font color="#E5E5E5"> part</font><font color="#CCCCCC"> of a I have</font>

61
00:05:13,430 --> 00:05:17,390
actually an entire day on<font color="#E5E5E5"> Java</font>

62
00:05:15,200 --> 00:05:20,210
serialization so this is part<font color="#E5E5E5"> of that</font>

63
00:05:17,390 --> 00:05:22,340
<font color="#E5E5E5">material and when I put together entire</font>

64
00:05:20,210 --> 00:05:24,770
day on<font color="#E5E5E5"> that and I was finished I thought</font>

65
00:05:22,340 --> 00:05:25,880
you know maybe I screwed<font color="#E5E5E5"> up here and I'm</font>

66
00:05:24,770 --> 00:05:27,169
not<font color="#CCCCCC"> sure anyone's gonna</font><font color="#E5E5E5"> want to listen</font>

67
00:05:25,880 --> 00:05:30,710
<font color="#E5E5E5">to this for</font><font color="#CCCCCC"> entire</font><font color="#E5E5E5"> day</font><font color="#CCCCCC"> but actually</font>

68
00:05:27,170 --> 00:05:34,580
<font color="#E5E5E5">turned into a kind of a popular</font><font color="#CCCCCC"> module</font>

69
00:05:30,710 --> 00:05:37,520
of the course<font color="#CCCCCC"> so the way Jackson</font>

70
00:05:34,580 --> 00:05:39,469
<font color="#CCCCCC">deserialization works is that you define</font>

71
00:05:37,520 --> 00:05:41,780
or identify a Java class correspond to

72
00:05:39,470 --> 00:05:43,430
the JSON<font color="#E5E5E5"> so that's already taking</font><font color="#CCCCCC"> the</font>

73
00:05:41,780 --> 00:05:45,979
<font color="#E5E5E5">perspective</font><font color="#CCCCCC"> that you're starting with</font><font color="#E5E5E5"> D</font>

74
00:05:43,430 --> 00:05:48,320
serialization<font color="#E5E5E5"> of course you know another</font>

75
00:05:45,980 --> 00:05:50,720
<font color="#E5E5E5">typical scenario is to have a Java</font>

76
00:05:48,320 --> 00:05:52,430
<font color="#E5E5E5">object which you serialize and then you</font>

77
00:05:50,720 --> 00:05:54,290
would<font color="#E5E5E5"> then just deserialize that object</font>

78
00:05:52,430 --> 00:05:56,210
back to this you know<font color="#CCCCCC"> that string back</font>

79
00:05:54,290 --> 00:05:58,670
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the same object</font><font color="#CCCCCC"> but if you're</font>

80
00:05:56,210 --> 00:06:01,010
starting<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> JSON</font><font color="#CCCCCC"> you would define</font>

81
00:05:58,670 --> 00:06:04,190
or identify a<font color="#E5E5E5"> Java class for that JSON</font>

82
00:06:01,010 --> 00:06:07,460
and<font color="#E5E5E5"> then you create an</font><font color="#CCCCCC"> instance of</font><font color="#E5E5E5"> this</font>

83
00:06:04,190 --> 00:06:09,770
Jaxson class called object mapper<font color="#E5E5E5"> and an</font>

84
00:06:07,460 --> 00:06:12,739
<font color="#E5E5E5">object mapper is actually a bit simpler</font>

85
00:06:09,770 --> 00:06:14,390
than<font color="#E5E5E5"> Java serialization object mapper</font>

86
00:06:12,740 --> 00:06:17,120
does<font color="#CCCCCC"> serialization and deserialization</font>

87
00:06:14,390 --> 00:06:18,710
for you and you basically<font color="#E5E5E5"> just create</font>

88
00:06:17,120 --> 00:06:21,470
one<font color="#E5E5E5"> instance of this thing and keep it</font>

89
00:06:18,710 --> 00:06:23,239
around<font color="#E5E5E5"> the</font><font color="#CCCCCC"> entire time</font><font color="#E5E5E5"> so I'll get</font>

90
00:06:21,470 --> 00:06:26,050
mapper has a read value method so you

91
00:06:23,240 --> 00:06:30,230
<font color="#E5E5E5">could call revalue and that will then</font>

92
00:06:26,050 --> 00:06:33,440
<font color="#E5E5E5">read in a JSON object from a file input</font>

93
00:06:30,230 --> 00:06:35,660
stream string or byte array and again

94
00:06:33,440 --> 00:06:37,760
it's a thread safe service class that

95
00:06:35,660 --> 00:06:39,140
you<font color="#E5E5E5"> can instantiate once and just</font><font color="#CCCCCC"> keep</font>

96
00:06:37,760 --> 00:06:40,849
it around<font color="#E5E5E5"> for</font><font color="#CCCCCC"> your whole application and</font>

97
00:06:39,140 --> 00:06:43,550
really you want<font color="#E5E5E5"> to do that because the</font>

98
00:06:40,850 --> 00:06:47,690
<font color="#E5E5E5">startup time for this object is is</font>

99
00:06:43,550 --> 00:06:49,730
pretty<font color="#E5E5E5"> expensive so object mapper again</font>

100
00:06:47,690 --> 00:06:53,900
converts between<font color="#E5E5E5"> the Java objects and</font>

101
00:06:49,730 --> 00:06:56,030
the corresponding<font color="#CCCCCC"> JSON strings it has</font>

102
00:06:53,900 --> 00:06:59,960
functionality<font color="#E5E5E5"> read and write JSON to and</font>

103
00:06:56,030 --> 00:07:00,489
from<font color="#E5E5E5"> plain old Java objects so it</font><font color="#CCCCCC"> uses</font>

104
00:06:59,960 --> 00:07:03,159
<font color="#E5E5E5">the JC</font>

105
00:07:00,490 --> 00:07:06,610
parser<font color="#CCCCCC"> JSON generator for reading and</font>

106
00:07:03,160 --> 00:07:07,870
writing JSON<font color="#E5E5E5"> and it's a highly</font>

107
00:07:06,610 --> 00:07:10,870
customizable to work with different

108
00:07:07,870 --> 00:07:13,110
<font color="#E5E5E5">styles</font><font color="#CCCCCC"> of JSON content</font><font color="#E5E5E5"> and to support</font>

109
00:07:10,870 --> 00:07:15,280
<font color="#E5E5E5">more advanced concepts such as</font>

110
00:07:13,110 --> 00:07:19,599
<font color="#E5E5E5">polymorphism and object identity</font><font color="#CCCCCC"> and</font>

111
00:07:15,280 --> 00:07:21,159
I'll say<font color="#E5E5E5"> something quickly</font><font color="#CCCCCC"> about this so</font>

112
00:07:19,599 --> 00:07:23,530
as a member<font color="#CCCCCC"> of the C Standards Committee</font>

113
00:07:21,160 --> 00:07:25,900
we have<font color="#CCCCCC"> a principle which is</font>

114
00:07:23,530 --> 00:07:29,409
conservation<font color="#E5E5E5"> mechanism right and so the</font>

115
00:07:25,900 --> 00:07:29,979
ideas<font color="#CCCCCC"> try to only provide</font><font color="#E5E5E5"> one way to do</font>

116
00:07:29,410 --> 00:07:31,300
<font color="#E5E5E5">things right</font>

117
00:07:29,979 --> 00:07:33,180
don't try to provide three or four or

118
00:07:31,300 --> 00:07:36,210
five<font color="#E5E5E5"> different ways to do the</font><font color="#CCCCCC"> same thing</font>

119
00:07:33,180 --> 00:07:39,520
<font color="#CCCCCC">and that is not a</font><font color="#E5E5E5"> principle which was</font>

120
00:07:36,210 --> 00:07:41,530
greatly entertained by the authors of

121
00:07:39,520 --> 00:07:44,139
the Jackson package right so they they

122
00:07:41,530 --> 00:07:45,849
sort of<font color="#CCCCCC"> had the opposite view of</font><font color="#E5E5E5"> let's</font>

123
00:07:44,139 --> 00:07:49,470
provide all<font color="#CCCCCC"> sorts of different</font><font color="#E5E5E5"> kind of</font>

124
00:07:45,849 --> 00:07:51,699
ways to do things and<font color="#CCCCCC"> sort of this way</font>

125
00:07:49,470 --> 00:07:54,190
<font color="#CCCCCC">programmers can decide you know what</font>

126
00:07:51,699 --> 00:07:56,380
<font color="#E5E5E5">style they like or you know which flavor</font>

127
00:07:54,190 --> 00:07:58,180
which interface and you know so there's

128
00:07:56,380 --> 00:08:00,370
just<font color="#E5E5E5"> a lot of ways to do things and and</font>

129
00:07:58,180 --> 00:08:01,599
what's the reason<font color="#CCCCCC"> the see committee</font>

130
00:08:00,370 --> 00:08:06,130
<font color="#E5E5E5">doesn't do that and I would recommend</font>

131
00:08:01,599 --> 00:08:09,400
<font color="#E5E5E5">against it is</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> you create all</font>

132
00:08:06,130 --> 00:08:11,590
sorts of combinatorics right so so you

133
00:08:09,400 --> 00:08:13,929
<font color="#E5E5E5">have to start</font><font color="#CCCCCC"> wandering things like what</font>

134
00:08:11,590 --> 00:08:15,698
happens if I use<font color="#E5E5E5"> you know this approach</font>

135
00:08:13,930 --> 00:08:17,020
<font color="#E5E5E5">to do this part of the process</font><font color="#CCCCCC"> and then</font>

136
00:08:15,699 --> 00:08:17,919
<font color="#CCCCCC">a different approach to do</font><font color="#E5E5E5"> this other</font>

137
00:08:17,020 --> 00:08:19,659
part of<font color="#E5E5E5"> the process</font>

138
00:08:17,919 --> 00:08:22,180
you know what if I combine things<font color="#E5E5E5"> in</font>

139
00:08:19,659 --> 00:08:23,919
different<font color="#CCCCCC"> ways and</font><font color="#E5E5E5"> you have to test all</font>

140
00:08:22,180 --> 00:08:26,469
of<font color="#E5E5E5"> those things for what sort</font><font color="#CCCCCC"> of odd</font>

141
00:08:23,919 --> 00:08:29,469
behavior might come out<font color="#E5E5E5"> of that</font><font color="#CCCCCC"> but</font>

142
00:08:26,469 --> 00:08:36,370
<font color="#E5E5E5">basically it's a there's a lot of</font>

143
00:08:29,469 --> 00:08:40,630
<font color="#E5E5E5">complexity to this API and no one really</font>

144
00:08:36,370 --> 00:08:42,490
<font color="#E5E5E5">knows how it works so you</font><font color="#CCCCCC"> know and and</font>

145
00:08:40,630 --> 00:08:44,470
the way it evolved was the guy writing

146
00:08:42,490 --> 00:08:45,640
it<font color="#E5E5E5"> didn't know how it worked</font><font color="#CCCCCC"> right so he</font>

147
00:08:44,470 --> 00:08:47,170
would write it<font color="#E5E5E5"> and would say oh</font><font color="#CCCCCC"> that's</font>

148
00:08:45,640 --> 00:08:49,209
<font color="#E5E5E5">not quite right let me tweak it and uh</font>

149
00:08:47,170 --> 00:08:50,890
that's<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little better let me tweak it</font>

150
00:08:49,209 --> 00:08:56,260
some more right<font color="#CCCCCC"> so it</font><font color="#E5E5E5"> was a it</font><font color="#CCCCCC"> was sort</font>

151
00:08:50,890 --> 00:08:58,630
of<font color="#E5E5E5"> a process of discovery</font><font color="#CCCCCC"> so just to</font>

152
00:08:56,260 --> 00:09:00,010
look at some<font color="#E5E5E5"> code</font><font color="#CCCCCC"> if you want to</font>

153
00:08:58,630 --> 00:09:03,550
<font color="#E5E5E5">construct objects again</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> create</font>

154
00:09:00,010 --> 00:09:05,680
instances of<font color="#E5E5E5"> this object mapper</font><font color="#CCCCCC"> and then</font>

155
00:09:03,550 --> 00:09:07,630
we're creating a<font color="#E5E5E5"> new object that's just</font>

156
00:09:05,680 --> 00:09:09,939
a<font color="#CCCCCC"> random object</font><font color="#E5E5E5"> a year ago to serialize</font>

157
00:09:07,630 --> 00:09:12,400
and deserialize<font color="#CCCCCC"> in this case we're going</font>

158
00:09:09,940 --> 00:09:13,480
to serialize<font color="#CCCCCC"> it to a</font><font color="#E5E5E5"> file</font><font color="#CCCCCC"> called</font>

159
00:09:12,400 --> 00:09:17,050
serialization<font color="#CCCCCC"> data'</font>

160
00:09:13,480 --> 00:09:18,400
JSON<font color="#CCCCCC"> and to serialize it</font><font color="#E5E5E5"> it's really</font>

161
00:09:17,050 --> 00:09:20,800
<font color="#E5E5E5">just as simple as calling</font><font color="#CCCCCC"> the right</font>

162
00:09:18,400 --> 00:09:23,730
value method on this<font color="#CCCCCC"> mapper object and</font>

163
00:09:20,800 --> 00:09:27,670
giving it the<font color="#CCCCCC"> name you know the file</font>

164
00:09:23,730 --> 00:09:30,460
<font color="#E5E5E5">identifier and the you know value of the</font>

165
00:09:27,670 --> 00:09:33,010
<font color="#CCCCCC">object that</font><font color="#E5E5E5"> you want to serialize and</font>

166
00:09:30,460 --> 00:09:35,920
then to deserialize it you just<font color="#E5E5E5"> called</font>

167
00:09:33,010 --> 00:09:38,500
read value<font color="#CCCCCC"> and you just get specify the</font>

168
00:09:35,920 --> 00:09:41,050
file identifier and the name of<font color="#CCCCCC"> the</font>

169
00:09:38,500 --> 00:09:43,540
class<font color="#CCCCCC"> that you're deserializing to</font><font color="#E5E5E5"> and</font>

170
00:09:41,050 --> 00:09:45,370
of<font color="#E5E5E5"> course you can use this in to</font>

171
00:09:43,540 --> 00:09:47,410
serialize any type of object<font color="#CCCCCC"> so it just</font>

172
00:09:45,370 --> 00:09:49,930
returns<font color="#E5E5E5"> an object</font><font color="#CCCCCC"> write generic object</font>

173
00:09:47,410 --> 00:09:52,270
and then you<font color="#E5E5E5"> cast it or</font><font color="#CCCCCC"> assign it to</font>

174
00:09:49,930 --> 00:09:57,729
<font color="#E5E5E5">whatever type</font><font color="#CCCCCC"> of object you're actually</font>

175
00:09:52,270 --> 00:10:00,360
creating so again I mentioned<font color="#E5E5E5"> you know</font>

176
00:09:57,730 --> 00:10:03,580
<font color="#CCCCCC">so so think</font><font color="#E5E5E5"> about the process of</font>

177
00:10:00,360 --> 00:10:06,400
deserializing a<font color="#E5E5E5"> JSON string</font><font color="#CCCCCC"> you've got</font>

178
00:10:03,580 --> 00:10:08,410
you know<font color="#CCCCCC"> collection of you know objects</font>

179
00:10:06,400 --> 00:10:10,720
and each object<font color="#CCCCCC"> has a set</font><font color="#E5E5E5"> of properties</font>

180
00:10:08,410 --> 00:10:12,010
and so when<font color="#E5E5E5"> you create</font><font color="#CCCCCC"> a class</font><font color="#E5E5E5"> you're</font>

181
00:10:10,720 --> 00:10:14,260
gonna have a class<font color="#E5E5E5"> with a bunch of</font>

182
00:10:12,010 --> 00:10:16,510
corresponding fields and so what what

183
00:10:14,260 --> 00:10:19,390
the<font color="#E5E5E5"> JSON deserialization process has to</font>

184
00:10:16,510 --> 00:10:23,200
do is it<font color="#CCCCCC"> has to take each each property</font>

185
00:10:19,390 --> 00:10:26,470
<font color="#E5E5E5">it finds in the JSON and basically call</font>

186
00:10:23,200 --> 00:10:28,360
a setter method<font color="#E5E5E5"> in the class well first</font>

187
00:10:26,470 --> 00:10:30,720
of all it has<font color="#CCCCCC"> to</font><font color="#E5E5E5"> figure out what class</font>

188
00:10:28,360 --> 00:10:33,070
it<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> call constructor for that class</font>

189
00:10:30,720 --> 00:10:35,350
<font color="#CCCCCC">then it has to take each property</font><font color="#E5E5E5"> call a</font>

190
00:10:33,070 --> 00:10:38,650
setter method<font color="#CCCCCC"> in order to</font><font color="#E5E5E5"> take the data</font>

191
00:10:35,350 --> 00:10:41,770
<font color="#E5E5E5">from the JSON object and set it in the</font>

192
00:10:38,650 --> 00:10:43,750
in the object so there's a lot<font color="#E5E5E5"> of code</font>

193
00:10:41,770 --> 00:10:46,660
that's executing as the part<font color="#E5E5E5"> of the</font>

194
00:10:43,750 --> 00:10:49,900
process<font color="#E5E5E5"> of deserializing one of these</font>

195
00:10:46,660 --> 00:10:52,750
<font color="#E5E5E5">JSON strings</font><font color="#CCCCCC"> and again the process</font><font color="#E5E5E5"> of</font>

196
00:10:49,900 --> 00:10:55,689
doing<font color="#E5E5E5"> this is non-trivial</font><font color="#CCCCCC"> and it's</font>

197
00:10:52,750 --> 00:10:57,610
constantly evolving<font color="#E5E5E5"> and you know what</font>

198
00:10:55,690 --> 00:10:59,980
the the<font color="#CCCCCC"> author</font><font color="#E5E5E5"> of this package is trying</font>

199
00:10:57,610 --> 00:11:02,410
to do is make<font color="#CCCCCC"> it</font><font color="#E5E5E5"> you know as the least</font>

200
00:10:59,980 --> 00:11:04,090
surprising interface as possible<font color="#E5E5E5"> so</font>

201
00:11:02,410 --> 00:11:07,060
they're trying to<font color="#E5E5E5"> create this so it</font>

202
00:11:04,090 --> 00:11:08,940
seems intuitive<font color="#CCCCCC"> but you know</font><font color="#E5E5E5"> it's</font>

203
00:11:07,060 --> 00:11:13,420
intuitive at one<font color="#E5E5E5"> level is sort of</font>

204
00:11:08,940 --> 00:11:15,520
complex at a more detailed<font color="#CCCCCC"> level so the</font>

205
00:11:13,420 --> 00:11:17,199
simplest<font color="#E5E5E5"> way to make a field in your</font>

206
00:11:15,520 --> 00:11:19,780
<font color="#E5E5E5">class both serializable and</font><font color="#CCCCCC"> d</font>

207
00:11:17,200 --> 00:11:21,190
serializable is just to make<font color="#CCCCCC"> it public</font>

208
00:11:19,780 --> 00:11:23,829
if you don't want to<font color="#E5E5E5"> make it public</font>

209
00:11:21,190 --> 00:11:26,040
because<font color="#E5E5E5"> generally</font><font color="#CCCCCC"> speaking that's bad</font>

210
00:11:23,830 --> 00:11:28,620
software<font color="#E5E5E5"> during practice</font>

211
00:11:26,040 --> 00:11:30,660
you can have getters<font color="#E5E5E5"> so</font><font color="#CCCCCC"> non-public</font>

212
00:11:28,620 --> 00:11:33,300
getters will make<font color="#E5E5E5"> non-public</font><font color="#CCCCCC"> fields</font>

213
00:11:30,660 --> 00:11:35,969
serializable<font color="#CCCCCC"> and that that</font><font color="#E5E5E5"> makes certain</font>

214
00:11:33,300 --> 00:11:38,819
amount of sense<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> also makes</font>

215
00:11:35,970 --> 00:11:41,000
private fields<font color="#CCCCCC"> DC realizable because</font>

216
00:11:38,820 --> 00:11:46,080
once you<font color="#E5E5E5"> have it getter for it it's now</font>

217
00:11:41,000 --> 00:11:48,450
<font color="#E5E5E5">considered a property by Jackson</font><font color="#CCCCCC"> because</font>

218
00:11:46,080 --> 00:11:51,390
it has a because it has a getter<font color="#CCCCCC"> and so</font>

219
00:11:48,450 --> 00:11:53,820
it now become<font color="#CCCCCC"> D serializable and setters</font>

220
00:11:51,390 --> 00:11:58,140
will also mark<font color="#E5E5E5"> non-public fields as</font><font color="#CCCCCC"> d</font>

221
00:11:53,820 --> 00:12:00,660
serializable<font color="#E5E5E5"> so there's there's some</font>

222
00:11:58,140 --> 00:12:03,689
automatic<font color="#CCCCCC"> so public getters and setters</font>

223
00:12:00,660 --> 00:12:06,750
<font color="#E5E5E5">are detected</font><font color="#CCCCCC"> again regardless of</font>

224
00:12:03,690 --> 00:12:08,190
accessibility<font color="#CCCCCC"> and there's a certain</font>

225
00:12:06,750 --> 00:12:11,280
<font color="#CCCCCC">amount of automatic detection that</font>

226
00:12:08,190 --> 00:12:13,500
<font color="#E5E5E5">Jackson does for the class and of course</font>

227
00:12:11,280 --> 00:12:14,449
you know the the secret sauce and<font color="#CCCCCC"> all</font>

228
00:12:13,500 --> 00:12:17,250
these<font color="#E5E5E5"> serialization deserialization</font>

229
00:12:14,450 --> 00:12:19,560
mechanisms is reflection<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> it's</font>

230
00:12:17,250 --> 00:12:21,690
<font color="#E5E5E5">kind of a</font><font color="#CCCCCC"> secret sauce behind</font><font color="#E5E5E5"> java right</font>

231
00:12:19,560 --> 00:12:23,459
they the way they<font color="#CCCCCC"> get</font><font color="#E5E5E5"> away is not</font>

232
00:12:21,690 --> 00:12:26,840
introducing new keywords and<font color="#E5E5E5"> things like</font>

233
00:12:23,460 --> 00:12:29,520
<font color="#E5E5E5">this</font><font color="#CCCCCC"> as they they</font><font color="#E5E5E5"> write reflection</font>

234
00:12:26,840 --> 00:12:31,260
<font color="#E5E5E5">routines that will look for methods</font><font color="#CCCCCC"> with</font>

235
00:12:29,520 --> 00:12:37,010
certain signatures<font color="#CCCCCC"> and then give those</font>

236
00:12:31,260 --> 00:12:39,630
methods you know special properties<font color="#CCCCCC"> so</font>

237
00:12:37,010 --> 00:12:42,290
so<font color="#E5E5E5"> non-public fields can be</font><font color="#CCCCCC"> accessed by</font>

238
00:12:39,630 --> 00:12:44,910
non private getters<font color="#E5E5E5"> so just any getter</font>

239
00:12:42,290 --> 00:12:46,469
<font color="#E5E5E5">property with a matching name and also</font>

240
00:12:44,910 --> 00:12:49,439
<font color="#E5E5E5">single argument constructors</font>

241
00:12:46,470 --> 00:12:52,860
automatically<font color="#CCCCCC"> detect it if they use one</font>

242
00:12:49,440 --> 00:12:55,410
of<font color="#E5E5E5"> these sort of I don't know how to</font>

243
00:12:52,860 --> 00:12:59,520
describe these types basic type string

244
00:12:55,410 --> 00:13:01,980
boolean integer and long<font color="#E5E5E5"> and also a</font>

245
00:12:59,520 --> 00:13:05,120
static single value arguments of value

246
00:13:01,980 --> 00:13:07,680
of methods are<font color="#E5E5E5"> automatically detected</font><font color="#CCCCCC"> so</font>

247
00:13:05,120 --> 00:13:09,240
if you don't want to rely on the<font color="#E5E5E5"> magic</font>

248
00:13:07,680 --> 00:13:12,420
of automatic detection and some of that

249
00:13:09,240 --> 00:13:13,710
stuff<font color="#CCCCCC"> is sort of legacy mechanisms have</font>

250
00:13:12,420 --> 00:13:17,520
just been around for a while<font color="#E5E5E5"> and</font>

251
00:13:13,710 --> 00:13:20,250
wouldn't be<font color="#E5E5E5"> included</font><font color="#CCCCCC"> today</font><font color="#E5E5E5"> if you know</font>

252
00:13:17,520 --> 00:13:23,819
they were starting over from<font color="#CCCCCC"> scratch</font><font color="#E5E5E5"> so</font>

253
00:13:20,250 --> 00:13:25,350
you can also explicitly<font color="#E5E5E5"> provide</font>

254
00:13:23,820 --> 00:13:28,380
annotations and those who<font color="#E5E5E5"> take</font>

255
00:13:25,350 --> 00:13:30,600
precedence over<font color="#E5E5E5"> automatically detected</font>

256
00:13:28,380 --> 00:13:32,370
properties<font color="#E5E5E5"> so you can use a JSON</font>

257
00:13:30,600 --> 00:13:35,100
property which will<font color="#E5E5E5"> indicate that a</font>

258
00:13:32,370 --> 00:13:36,990
property<font color="#E5E5E5"> is to be included JSON any</font>

259
00:13:35,100 --> 00:13:38,710
setter<font color="#E5E5E5"> will take a two argument method</font>

260
00:13:36,990 --> 00:13:40,600
and use it<font color="#E5E5E5"> for</font>

261
00:13:38,710 --> 00:13:42,070
<font color="#CCCCCC">see realizing</font><font color="#E5E5E5"> just sort of arbitrary</font>

262
00:13:40,600 --> 00:13:44,280
properties for which there are<font color="#CCCCCC"> no</font>

263
00:13:42,070 --> 00:13:47,530
matching getters and setters available

264
00:13:44,280 --> 00:13:50,260
<font color="#CCCCCC">and JSON</font><font color="#E5E5E5"> creator can be used to indicate</font>

265
00:13:47,530 --> 00:13:52,329
<font color="#E5E5E5">that a method is a constructor for that</font>

266
00:13:50,260 --> 00:13:54,189
<font color="#CCCCCC">object again</font><font color="#E5E5E5"> Jackson's gonna</font><font color="#CCCCCC"> have to</font>

267
00:13:52,330 --> 00:13:57,910
call a<font color="#CCCCCC"> constructor of</font><font color="#E5E5E5"> some kind in</font><font color="#CCCCCC"> order</font>

268
00:13:54,190 --> 00:13:59,500
to create<font color="#E5E5E5"> that</font><font color="#CCCCCC"> object or it might be</font>

269
00:13:57,910 --> 00:14:02,680
<font color="#CCCCCC">that you have</font><font color="#E5E5E5"> a static factory method</font>

270
00:13:59,500 --> 00:14:06,190
<font color="#E5E5E5">which is you know</font><font color="#CCCCCC"> not a constructor but</font>

271
00:14:02,680 --> 00:14:09,099
used in that<font color="#E5E5E5"> pattern to instantiate</font>

272
00:14:06,190 --> 00:14:11,470
objects so<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can use JSON</font><font color="#CCCCCC"> creator to</font>

273
00:14:09,100 --> 00:14:14,200
you indicate that static factory method

274
00:14:11,470 --> 00:14:15,820
is the correct mechanism<font color="#E5E5E5"> you used to you</font>

275
00:14:14,200 --> 00:14:19,500
know instantiate new instances of that

276
00:14:15,820 --> 00:14:22,210
object<font color="#E5E5E5"> and JSON setters and all</font>

277
00:14:19,500 --> 00:14:25,870
alternative<font color="#E5E5E5"> JSON property for marking</font>

278
00:14:22,210 --> 00:14:29,640
methods as setters<font color="#CCCCCC"> so I mentioned</font>

279
00:14:25,870 --> 00:14:32,620
polymorphic type handling<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> a</font>

280
00:14:29,640 --> 00:14:38,530
probably<font color="#E5E5E5"> the fanciest phrase I use in</font>

281
00:14:32,620 --> 00:14:41,620
the talk<font color="#E5E5E5"> but basically this supports two</font>

282
00:14:38,530 --> 00:14:44,110
things it supports<font color="#CCCCCC"> job inheritance and</font>

283
00:14:41,620 --> 00:14:46,360
it<font color="#E5E5E5"> supports</font><font color="#CCCCCC"> knock non concrete type</font>

284
00:14:44,110 --> 00:14:49,870
<font color="#E5E5E5">senses after classes</font><font color="#CCCCCC"> interfaces and</font><font color="#E5E5E5"> so</font>

285
00:14:46,360 --> 00:14:52,300
<font color="#CCCCCC">without polymorphic type handling the</font><font color="#E5E5E5"> D</font>

286
00:14:49,870 --> 00:14:55,300
<font color="#E5E5E5">serialization mechanism wouldn't be able</font>

287
00:14:52,300 --> 00:14:58,260
<font color="#E5E5E5">to differentiate between two subclasses</font>

288
00:14:55,300 --> 00:15:00,189
<font color="#CCCCCC">of a superclass</font><font color="#E5E5E5"> and so it would wind up</font>

289
00:14:58,260 --> 00:15:03,460
instantiating an object of the

290
00:15:00,190 --> 00:15:05,830
superclass which means that you know if

291
00:15:03,460 --> 00:15:07,960
<font color="#CCCCCC">I take if I take some objects and I</font>

292
00:15:05,830 --> 00:15:09,310
serialize them and<font color="#CCCCCC"> ID serialize them I</font>

293
00:15:07,960 --> 00:15:12,130
could wind up<font color="#E5E5E5"> with something different</font>

294
00:15:09,310 --> 00:15:13,540
<font color="#CCCCCC">right</font><font color="#E5E5E5"> and that's not really a property</font>

295
00:15:12,130 --> 00:15:15,400
<font color="#E5E5E5">you want from your serialization</font>

296
00:15:13,540 --> 00:15:18,280
deserialization you want to you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font>

297
00:15:15,400 --> 00:15:20,110
go full full circle end up with what you

298
00:15:18,280 --> 00:15:23,020
<font color="#E5E5E5">started out with</font>

299
00:15:20,110 --> 00:15:25,750
and so basically polymorphic type

300
00:15:23,020 --> 00:15:28,750
handling is required in order<font color="#E5E5E5"> to</font>

301
00:15:25,750 --> 00:15:31,870
correctly deserialize<font color="#CCCCCC"> the object chain</font>

302
00:15:28,750 --> 00:15:33,730
so people tend to enable this<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> so</font>

303
00:15:31,870 --> 00:15:36,100
<font color="#E5E5E5">basically you have this turned off your</font>

304
00:15:33,730 --> 00:15:37,980
DC relation fails you turn this on<font color="#CCCCCC"> the</font>

305
00:15:36,100 --> 00:15:42,520
<font color="#CCCCCC">serialization</font><font color="#E5E5E5"> works everything's great</font>

306
00:15:37,980 --> 00:15:44,410
<font color="#CCCCCC">the problem is</font><font color="#E5E5E5"> that so polymorphic type</font>

307
00:15:42,520 --> 00:15:47,260
<font color="#E5E5E5">handling cars embedding type information</font>

308
00:15:44,410 --> 00:15:50,170
<font color="#E5E5E5">into the json representations so that</font>

309
00:15:47,260 --> 00:15:51,899
those objects can<font color="#CCCCCC"> be correctly restored</font>

310
00:15:50,170 --> 00:15:54,099
and again<font color="#E5E5E5"> because Jackson likes to do</font>

311
00:15:51,899 --> 00:15:55,540
<font color="#E5E5E5">everything for everyone there's several</font>

312
00:15:54,100 --> 00:15:57,279
different<font color="#CCCCCC"> mechanisms they use for</font>

313
00:15:55,540 --> 00:15:59,889
embedding the type information<font color="#E5E5E5"> into the</font>

314
00:15:57,279 --> 00:16:04,180
object and and it doesn't<font color="#E5E5E5"> doesn't really</font>

315
00:15:59,889 --> 00:16:08,350
matter to this to<font color="#CCCCCC"> this</font><font color="#E5E5E5"> lecture about</font>

316
00:16:04,180 --> 00:16:12,430
<font color="#E5E5E5">this talk what mechanism you use but</font>

317
00:16:08,350 --> 00:16:15,579
<font color="#E5E5E5">basically this has to be enabled to sort</font>

318
00:16:12,430 --> 00:16:18,010
of allow<font color="#E5E5E5"> the correct</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> serialization</font><font color="#CCCCCC"> and</font>

319
00:16:15,579 --> 00:16:21,069
the<font color="#CCCCCC"> enabling</font><font color="#E5E5E5"> of this feature which is</font>

320
00:16:18,010 --> 00:16:24,699
what then makes your your<font color="#E5E5E5"> JSON</font>

321
00:16:21,070 --> 00:16:26,860
vulnerable to exploits<font color="#CCCCCC"> and and so</font><font color="#E5E5E5"> you</font>

322
00:16:24,699 --> 00:16:29,550
know you'll hear people<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to you well</font>

323
00:16:26,860 --> 00:16:32,800
you'll hear people<font color="#E5E5E5"> say that by default</font>

324
00:16:29,550 --> 00:16:34,959
<font color="#CCCCCC">Jackson is secure</font><font color="#E5E5E5"> and that's correct</font>

325
00:16:32,800 --> 00:16:38,529
<font color="#E5E5E5">without enabling this feature you can't</font>

326
00:16:34,959 --> 00:16:39,880
accomplish<font color="#E5E5E5"> these exploits but everyone</font>

327
00:16:38,529 --> 00:16:41,920
enables<font color="#CCCCCC"> this feature because it's</font>

328
00:16:39,880 --> 00:16:45,339
necessary to<font color="#E5E5E5"> do sort of correct</font><font color="#CCCCCC"> D</font>

329
00:16:41,920 --> 00:16:47,349
<font color="#CCCCCC">serialization of</font><font color="#E5E5E5"> Java objects</font><font color="#CCCCCC"> so you</font>

330
00:16:45,339 --> 00:16:49,750
<font color="#CCCCCC">know the your reassurance that it's</font>

331
00:16:47,350 --> 00:16:52,829
secure by<font color="#CCCCCC"> default is very misleading</font>

332
00:16:49,750 --> 00:16:55,750
it's actually more problematic<font color="#CCCCCC"> than</font><font color="#E5E5E5"> that</font>

333
00:16:52,829 --> 00:16:57,459
<font color="#CCCCCC">so again</font><font color="#E5E5E5"> Jackson being Jackson</font><font color="#CCCCCC"> it</font>

334
00:16:55,750 --> 00:17:01,810
supports<font color="#E5E5E5"> multiple mechanisms for</font>

335
00:16:57,459 --> 00:17:04,480
providing type information<font color="#CCCCCC"> the easiest</font>

336
00:17:01,810 --> 00:17:05,740
way to do it is be in<font color="#E5E5E5"> that object mapper</font>

337
00:17:04,480 --> 00:17:09,250
class that we looked at you can just

338
00:17:05,740 --> 00:17:12,099
<font color="#CCCCCC">call</font><font color="#E5E5E5"> enabled default typing you can</font><font color="#CCCCCC"> also</font>

339
00:17:09,250 --> 00:17:14,140
build a custom type resolver builder I

340
00:17:12,099 --> 00:17:15,639
don't talk about<font color="#CCCCCC"> that one much I don't</font>

341
00:17:14,140 --> 00:17:18,160
<font color="#E5E5E5">think I've</font><font color="#CCCCCC"> ever seen</font><font color="#E5E5E5"> anyone do that</font><font color="#CCCCCC"> I</font>

342
00:17:15,640 --> 00:17:20,949
<font color="#E5E5E5">think that's basically a mechanism you</font>

343
00:17:18,160 --> 00:17:23,470
use if you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to sort of rewrite the</font>

344
00:17:20,949 --> 00:17:26,439
entire<font color="#E5E5E5"> way you</font><font color="#CCCCCC"> you handled the process</font>

345
00:17:23,470 --> 00:17:29,200
so it's not<font color="#E5E5E5"> that frequently used and the</font>

346
00:17:26,439 --> 00:17:30,790
other option<font color="#CCCCCC"> is locally using JSON</font><font color="#E5E5E5"> type</font>

347
00:17:29,200 --> 00:17:34,540
info annotations another set of

348
00:17:30,790 --> 00:17:37,299
annotations<font color="#E5E5E5"> so the simplest and also of</font>

349
00:17:34,540 --> 00:17:41,590
<font color="#CCCCCC">course the least secure is</font><font color="#E5E5E5"> to use the</font>

350
00:17:37,299 --> 00:17:44,049
default<font color="#E5E5E5"> typing so you have your object</font>

351
00:17:41,590 --> 00:17:46,149
mapper object<font color="#E5E5E5"> again that supports</font>

352
00:17:44,049 --> 00:17:47,980
serialization deserialization<font color="#CCCCCC"> and you</font>

353
00:17:46,150 --> 00:17:50,110
can just call mapper and<font color="#CCCCCC"> able default</font>

354
00:17:47,980 --> 00:17:52,510
typing and boom you're done<font color="#E5E5E5"> right so</font>

355
00:17:50,110 --> 00:17:54,580
it's<font color="#E5E5E5"> the easiest thing to do but it's</font>

356
00:17:52,510 --> 00:17:55,980
it's also what<font color="#CCCCCC"> makes your system</font>

357
00:17:54,580 --> 00:17:59,889
<font color="#E5E5E5">completely insecure</font>

358
00:17:55,980 --> 00:18:03,250
<font color="#CCCCCC">and so you know the author of this</font>

359
00:17:59,890 --> 00:18:05,830
package as well<font color="#CCCCCC"> as</font>

360
00:18:03,250 --> 00:18:08,320
as me<font color="#E5E5E5"> both both suspect this</font><font color="#CCCCCC"> is done a</font>

361
00:18:05,830 --> 00:18:10,629
lot right because what happens is you

362
00:18:08,320 --> 00:18:14,289
<font color="#CCCCCC">know UDC realize you get some error</font>

363
00:18:10,630 --> 00:18:16,659
<font color="#CCCCCC">messages you you do Google</font><font color="#E5E5E5"> you wind up</font>

364
00:18:14,289 --> 00:18:18,400
in<font color="#E5E5E5"> a</font><font color="#CCCCCC"> stock overflow</font><font color="#E5E5E5"> right and then</font>

365
00:18:16,659 --> 00:18:20,730
there's a little Stack Overflow article

366
00:18:18,400 --> 00:18:24,010
says<font color="#E5E5E5"> Oh get rid of that problem by</font>

367
00:18:20,730 --> 00:18:27,690
calling and able default typing you type

368
00:18:24,010 --> 00:18:30,970
<font color="#CCCCCC">that in your problems go away</font><font color="#E5E5E5"> you know</font>

369
00:18:27,690 --> 00:18:34,090
<font color="#CCCCCC">then you do wqx make some mark ship</font>

370
00:18:30,970 --> 00:18:40,090
<font color="#E5E5E5">right same one old guy knows I'm talking</font>

371
00:18:34,090 --> 00:18:42,699
about<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and so there's also some</font>

372
00:18:40,090 --> 00:18:45,459
arguments you can use to limit<font color="#E5E5E5"> the</font>

373
00:18:42,700 --> 00:18:48,400
effects of this<font color="#E5E5E5"> for example just to</font>

374
00:18:45,460 --> 00:18:51,460
<font color="#CCCCCC">apply to non non final objects which you</font>

375
00:18:48,400 --> 00:18:55,539
<font color="#E5E5E5">know is really</font><font color="#CCCCCC"> all you need it for but</font>

376
00:18:51,460 --> 00:18:57,059
<font color="#E5E5E5">doesn't limit to limiting the call and</font>

377
00:18:55,539 --> 00:19:00,280
<font color="#CCCCCC">that way</font><font color="#E5E5E5"> doesn't eliminate the</font>

378
00:18:57,059 --> 00:19:02,110
<font color="#E5E5E5">vulnerabilities here so for things to be</font>

379
00:19:00,280 --> 00:19:05,320
exploitable<font color="#CCCCCC"> step one is</font><font color="#E5E5E5"> the</font>

380
00:19:02,110 --> 00:19:06,939
<font color="#CCCCCC">serialization of untrusted JSON data and</font>

381
00:19:05,320 --> 00:19:09,520
whenever I talk about<font color="#E5E5E5"> any mitigation for</font>

382
00:19:06,940 --> 00:19:11,049
any of this<font color="#E5E5E5"> stuff you know</font><font color="#CCCCCC"> all the</font>

383
00:19:09,520 --> 00:19:14,470
security people<font color="#CCCCCC"> in my company</font><font color="#E5E5E5"> always say</font>

384
00:19:11,049 --> 00:19:16,418
you know tell them never<font color="#E5E5E5"> DC relays</font>

385
00:19:14,470 --> 00:19:18,010
untrusted data so that's<font color="#E5E5E5"> there's a rule</font>

386
00:19:16,419 --> 00:19:21,340
number one<font color="#E5E5E5"> just don't DC</font><font color="#CCCCCC"> aryl is</font>

387
00:19:18,010 --> 00:19:24,100
untrusted data<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you know every time I</font>

388
00:19:21,340 --> 00:19:26,949
say that<font color="#CCCCCC"> to an</font><font color="#E5E5E5"> audience they say but but</font>

389
00:19:24,100 --> 00:19:31,899
we have<font color="#CCCCCC"> to that's our whole architecture</font>

390
00:19:26,950 --> 00:19:36,070
you<font color="#E5E5E5"> know so so people do seem to need to</font>

391
00:19:31,900 --> 00:19:39,130
do this and so that's you<font color="#CCCCCC"> know there are</font>

392
00:19:36,070 --> 00:19:43,270
ways<font color="#CCCCCC"> to try to secure</font><font color="#E5E5E5"> this right but of</font>

393
00:19:39,130 --> 00:19:46,270
course<font color="#CCCCCC"> step one is you know I</font><font color="#E5E5E5"> mean</font>

394
00:19:43,270 --> 00:19:47,980
basically<font color="#E5E5E5"> there's a certain</font><font color="#CCCCCC"> amount</font><font color="#E5E5E5"> of</font>

395
00:19:46,270 --> 00:19:49,960
risk<font color="#E5E5E5"> taking a gun holding your head</font>

396
00:19:47,980 --> 00:19:51,789
<font color="#E5E5E5">pulling the trigger</font><font color="#CCCCCC"> right but if you</font>

397
00:19:49,960 --> 00:19:53,950
absolutely<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to do that okay we can</font>

398
00:19:51,789 --> 00:19:57,370
talk about<font color="#E5E5E5"> ways to try to reduce the</font>

399
00:19:53,950 --> 00:20:01,419
risk this<font color="#E5E5E5"> is going from there okay so</font>

400
00:19:57,370 --> 00:20:05,049
don't DC relies on trusted data<font color="#CCCCCC"> so the</font>

401
00:20:01,419 --> 00:20:06,520
<font color="#E5E5E5">specific gadget class that's using the</font>

402
00:20:05,049 --> 00:20:08,590
exploit<font color="#E5E5E5"> has to accessible from</font><font color="#CCCCCC"> the</font>

403
00:20:06,520 --> 00:20:11,350
<font color="#E5E5E5">vulnerable</font><font color="#CCCCCC"> JBM and i didn't talk</font><font color="#E5E5E5"> about a</font>

404
00:20:08,590 --> 00:20:15,280
lot<font color="#CCCCCC"> about gadget classes but but the</font><font color="#E5E5E5"> the</font>

405
00:20:11,350 --> 00:20:16,480
basic exploit here is that you are

406
00:20:15,280 --> 00:20:19,360
expecting

407
00:20:16,480 --> 00:20:21,610
a certain object<font color="#CCCCCC"> a certain class to</font>

408
00:20:19,360 --> 00:20:24,280
deserialize<font color="#CCCCCC"> but what happens is the the</font>

409
00:20:21,610 --> 00:20:27,850
<font color="#E5E5E5">attacker supplies you with a bunch of</font>

410
00:20:24,280 --> 00:20:29,110
other<font color="#E5E5E5"> objects right and so you</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> to DC</font>

411
00:20:27,850 --> 00:20:31,419
<font color="#E5E5E5">you realize</font><font color="#CCCCCC"> that you call your</font><font color="#E5E5E5"> read</font>

412
00:20:29,110 --> 00:20:33,820
value method and until that<font color="#CCCCCC"> read value</font>

413
00:20:31,420 --> 00:20:36,130
method returns<font color="#CCCCCC"> you don't know what sort</font>

414
00:20:33,820 --> 00:20:37,899
<font color="#E5E5E5">of objects are being DC realized so</font>

415
00:20:36,130 --> 00:20:41,740
basically the<font color="#CCCCCC"> attacker supplies a bunch</font>

416
00:20:37,900 --> 00:20:44,650
<font color="#E5E5E5">of objects with a bunch of JSON objects</font>

417
00:20:41,740 --> 00:20:47,950
with a bunch<font color="#E5E5E5"> of properties right and so</font>

418
00:20:44,650 --> 00:20:50,620
as those objects<font color="#E5E5E5"> of DC</font><font color="#CCCCCC"> realized it's</font>

419
00:20:47,950 --> 00:20:52,780
going to<font color="#CCCCCC"> execute code in your JVM and</font>

420
00:20:50,620 --> 00:20:54,010
<font color="#E5E5E5">it's gonna execute that code with value</font>

421
00:20:52,780 --> 00:20:57,550
supplied by the attacker

422
00:20:54,010 --> 00:21:00,550
so basically<font color="#E5E5E5"> DC realizing untrusted data</font>

423
00:20:57,550 --> 00:21:03,820
is equivalent to<font color="#E5E5E5"> having</font><font color="#CCCCCC"> the attacker</font>

424
00:21:00,550 --> 00:21:07,060
tell you what code they want you to run

425
00:21:03,820 --> 00:21:08,379
with<font color="#E5E5E5"> what specific data values and so it</font>

426
00:21:07,060 --> 00:21:12,159
turns out there are<font color="#CCCCCC"> some very</font>

427
00:21:08,380 --> 00:21:15,400
interesting classes<font color="#CCCCCC"> which you know can</font>

428
00:21:12,160 --> 00:21:17,980
do some fun things<font color="#CCCCCC"> some some classes you</font>

429
00:21:15,400 --> 00:21:19,390
know for example<font color="#CCCCCC"> you can pack it with</font>

430
00:21:17,980 --> 00:21:22,590
arbitrary<font color="#E5E5E5"> byte code that gets executed</font>

431
00:21:19,390 --> 00:21:24,730
when<font color="#CCCCCC"> there</font><font color="#E5E5E5"> DC realized great that's</font>

432
00:21:22,590 --> 00:21:27,939
obviously<font color="#CCCCCC"> problematic but there's a</font>

433
00:21:24,730 --> 00:21:31,330
variety of other<font color="#E5E5E5"> guys as well and so the</font>

434
00:21:27,940 --> 00:21:32,890
gadgets<font color="#CCCCCC"> you know the code that there</font><font color="#E5E5E5"> be</font>

435
00:21:31,330 --> 00:21:35,199
<font color="#E5E5E5">that they're asking you to execute is</font>

436
00:21:32,890 --> 00:21:37,390
they're not providing it has to be

437
00:21:35,200 --> 00:21:38,650
present<font color="#CCCCCC"> in your JVM</font><font color="#E5E5E5"> but you don't</font>

438
00:21:37,390 --> 00:21:40,180
actually<font color="#E5E5E5"> have to be using that</font>

439
00:21:38,650 --> 00:21:42,940
functionality<font color="#E5E5E5"> it just has to be in</font><font color="#CCCCCC"> a</font>

440
00:21:40,180 --> 00:21:45,760
class which is loadable<font color="#E5E5E5"> by your JVM</font>

441
00:21:42,940 --> 00:21:49,390
<font color="#E5E5E5">right so any any class</font><font color="#CCCCCC"> in any library</font>

442
00:21:45,760 --> 00:21:53,020
<font color="#E5E5E5">that's in the you know the class path</font>

443
00:21:49,390 --> 00:21:54,970
for your JVM<font color="#E5E5E5"> that can be you know loaded</font>

444
00:21:53,020 --> 00:21:58,090
<font color="#CCCCCC">by the boot class loader and execute it</font>

445
00:21:54,970 --> 00:22:00,100
can be part<font color="#E5E5E5"> of this exploit so for</font>

446
00:21:58,090 --> 00:22:01,570
<font color="#E5E5E5">example you know if you just happen to</font>

447
00:22:00,100 --> 00:22:05,639
have old library sitting around in your

448
00:22:01,570 --> 00:22:10,000
<font color="#E5E5E5">class path</font><font color="#CCCCCC"> that becomes a risk</font><font color="#E5E5E5"> because</font>

449
00:22:05,640 --> 00:22:14,080
the attacker could instantiate<font color="#E5E5E5"> you know</font>

450
00:22:10,000 --> 00:22:16,060
<font color="#E5E5E5">objects for those classes so third thing</font>

451
00:22:14,080 --> 00:22:20,129
again is that you have to have a

452
00:22:16,060 --> 00:22:22,840
polymorphic type handling enabled and

453
00:22:20,130 --> 00:22:24,760
the<font color="#CCCCCC"> one thing you know one things it's</font>

454
00:22:22,840 --> 00:22:26,919
better about<font color="#E5E5E5"> Jackson and</font><font color="#CCCCCC"> say just Java</font>

455
00:22:24,760 --> 00:22:28,960
serialization is that you can specify

456
00:22:26,920 --> 00:22:31,960
the root class<font color="#CCCCCC"> to</font><font color="#E5E5E5"> which you</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> see</font>

457
00:22:28,960 --> 00:22:34,110
realize and the<font color="#E5E5E5"> root class is specific</font>

458
00:22:31,960 --> 00:22:37,059
enough<font color="#E5E5E5"> it's going to prevent you from</font>

459
00:22:34,110 --> 00:22:41,260
<font color="#CCCCCC">deserializing</font><font color="#E5E5E5"> a wide array</font><font color="#CCCCCC"> of objects</font>

460
00:22:37,059 --> 00:22:44,649
<font color="#CCCCCC">but it is very</font><font color="#E5E5E5"> very common to have a</font>

461
00:22:41,260 --> 00:22:46,539
type of java.lang<font color="#E5E5E5"> object as your root</font>

462
00:22:44,649 --> 00:22:48,039
type which<font color="#E5E5E5"> means again</font><font color="#CCCCCC"> that you can</font>

463
00:22:46,539 --> 00:22:51,279
deserialize anything because<font color="#E5E5E5"> everything</font>

464
00:22:48,039 --> 00:22:53,260
in<font color="#E5E5E5"> Java is an object</font><font color="#CCCCCC"> so including the</font>

465
00:22:51,279 --> 00:22:56,440
complete you know set of gadgets that

466
00:22:53,260 --> 00:22:58,840
<font color="#E5E5E5">are</font><font color="#CCCCCC"> available and the reason you know</font>

467
00:22:56,440 --> 00:23:00,820
one<font color="#E5E5E5"> reason that's common is a lot of</font>

468
00:22:58,840 --> 00:23:03,250
times<font color="#E5E5E5"> people will write a method</font><font color="#CCCCCC"> right</font>

469
00:23:00,820 --> 00:23:04,840
<font color="#E5E5E5">to handle their deserialization and</font>

470
00:23:03,250 --> 00:23:07,450
they'll generalize that method to<font color="#E5E5E5"> work</font>

471
00:23:04,840 --> 00:23:09,580
for<font color="#E5E5E5"> you know all the times they</font>

472
00:23:07,450 --> 00:23:10,990
deserialize within their system and so

473
00:23:09,580 --> 00:23:12,789
for that<font color="#CCCCCC"> method to work</font><font color="#E5E5E5"> with everything</font>

474
00:23:10,990 --> 00:23:15,580
<font color="#CCCCCC">it has to deserialize to an object type</font>

475
00:23:12,789 --> 00:23:18,610
<font color="#CCCCCC">right</font><font color="#E5E5E5"> otherwise</font><font color="#CCCCCC"> I guess it could</font><font color="#E5E5E5"> be</font>

476
00:23:15,580 --> 00:23:20,710
passed as an argument<font color="#E5E5E5"> but it is quite</font>

477
00:23:18,610 --> 00:23:21,939
<font color="#E5E5E5">common for people to do this the other</font>

478
00:23:20,710 --> 00:23:24,010
<font color="#E5E5E5">thing that would work is that you could</font>

479
00:23:21,940 --> 00:23:27,010
<font color="#E5E5E5">use a permissive tag interface so for</font>

480
00:23:24,010 --> 00:23:29,950
example anything<font color="#E5E5E5"> which implements</font>

481
00:23:27,010 --> 00:23:32,100
serializable or comparable<font color="#CCCCCC"> and if you</font>

482
00:23:29,950 --> 00:23:34,480
were to use an interface<font color="#E5E5E5"> like that it's</font>

483
00:23:32,100 --> 00:23:35,889
broad enough<font color="#CCCCCC"> that there's gonna be a</font>

484
00:23:34,480 --> 00:23:39,760
wide<font color="#E5E5E5"> selection and gadgets that</font><font color="#CCCCCC"> an</font>

485
00:23:35,890 --> 00:23:44,860
attacker could<font color="#E5E5E5"> then to serialize</font><font color="#CCCCCC"> and</font>

486
00:23:39,760 --> 00:23:47,350
then finally so<font color="#E5E5E5"> Jackson's mitigation for</font>

487
00:23:44,860 --> 00:23:53,949
these<font color="#E5E5E5"> attacks is</font><font color="#CCCCCC"> to try</font><font color="#E5E5E5"> to apply a deny</font>

488
00:23:47,350 --> 00:23:55,779
list or blacklist<font color="#CCCCCC"> and so if you you know</font>

489
00:23:53,950 --> 00:23:58,090
<font color="#E5E5E5">if you have a recent</font><font color="#CCCCCC"> version of Jackson</font>

490
00:23:55,779 --> 00:23:59,649
and<font color="#E5E5E5"> the particular gadget you're trying</font>

491
00:23:58,090 --> 00:24:03,730
to serialize<font color="#E5E5E5"> has been blacklisted that</font>

492
00:23:59,649 --> 00:24:06,610
won't succeed<font color="#CCCCCC"> but denied list or</font>

493
00:24:03,730 --> 00:24:09,130
<font color="#CCCCCC">blacklist are really not particularly</font>

494
00:24:06,610 --> 00:24:11,229
effective solution and we'll talk<font color="#E5E5E5"> more</font>

495
00:24:09,130 --> 00:24:14,440
about<font color="#E5E5E5"> that okay so</font><font color="#CCCCCC"> I have a</font>

496
00:24:11,230 --> 00:24:18,490
demonstration<font color="#CCCCCC"> and I have two versions of</font>

497
00:24:14,440 --> 00:24:23,289
<font color="#E5E5E5">this</font><font color="#CCCCCC"> I might just do one because</font><font color="#E5E5E5"> it's</font>

498
00:24:18,490 --> 00:24:26,169
just<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> two ways but one uses a</font>

499
00:24:23,289 --> 00:24:29,320
vulnerable version of<font color="#CCCCCC"> Zeeland that's</font>

500
00:24:26,169 --> 00:24:33,159
built into the JRE<font color="#CCCCCC"> that exploit only</font>

501
00:24:29,320 --> 00:24:35,408
works with Java 8<font color="#E5E5E5"> 4 or 5 and earlier</font>

502
00:24:33,159 --> 00:24:37,360
versions<font color="#CCCCCC"> and the reason</font><font color="#E5E5E5"> I saying that</font>

503
00:24:35,409 --> 00:24:39,250
out loud<font color="#E5E5E5"> is because when I do the demo I</font>

504
00:24:37,360 --> 00:24:42,280
always forget to<font color="#E5E5E5"> set the</font><font color="#CCCCCC"> version so it</font>

505
00:24:39,250 --> 00:24:44,350
fails the<font color="#CCCCCC"> first time</font><font color="#E5E5E5"> and then you'll say</font>

506
00:24:42,280 --> 00:24:48,250
you forgot<font color="#CCCCCC"> to set that all right and</font>

507
00:24:44,350 --> 00:24:50,980
I'll fix it<font color="#E5E5E5"> and it also works with</font><font color="#CCCCCC"> the</font>

508
00:24:48,250 --> 00:24:52,720
current<font color="#CCCCCC"> version of the Apaches</font><font color="#E5E5E5"> Elan</font>

509
00:24:50,980 --> 00:24:54,610
<font color="#CCCCCC">right which is a separate library that</font>

510
00:24:52,720 --> 00:24:56,050
has to be installed<font color="#CCCCCC"> but you know</font>

511
00:24:54,610 --> 00:24:58,030
attacking gadgets that<font color="#E5E5E5"> are part of the</font>

512
00:24:56,050 --> 00:25:00,760
Jerry are great because they<font color="#E5E5E5"> absolutely</font>

513
00:24:58,030 --> 00:25:03,040
have to<font color="#E5E5E5"> be there</font><font color="#CCCCCC"> let me go ahead</font><font color="#E5E5E5"> and</font>

514
00:25:00,760 --> 00:25:05,440
<font color="#E5E5E5">show this and I called this Jackson cage</font>

515
00:25:03,040 --> 00:25:07,000
<font color="#E5E5E5">because it was a brief Springsteen song</font>

516
00:25:05,440 --> 00:25:10,090
that no one seems to<font color="#E5E5E5"> remember anymore</font>

517
00:25:07,000 --> 00:25:16,410
<font color="#E5E5E5">anybody remember dude Jackson nobody you</font>

518
00:25:10,090 --> 00:25:23,320
do somebody<font color="#E5E5E5"> one person Wow</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> let's</font>

519
00:25:16,410 --> 00:25:28,660
see if I can demo this<font color="#CCCCCC"> usually what I do</font>

520
00:25:23,320 --> 00:25:31,720
<font color="#E5E5E5">is I I set</font><font color="#CCCCCC"> up a bunch of</font><font color="#E5E5E5"> breakpoints</font><font color="#CCCCCC"> and</font>

521
00:25:28,660 --> 00:25:36,210
stuff<font color="#E5E5E5"> at</font><font color="#CCCCCC"> strategic places because old</font>

522
00:25:31,720 --> 00:25:36,210
enough now that<font color="#E5E5E5"> I can't what's that</font>

523
00:25:41,370 --> 00:25:50,610
that's<font color="#E5E5E5"> the only way to do this</font><font color="#CCCCCC"> might not</font>

524
00:25:46,690 --> 00:25:55,810
<font color="#E5E5E5">be part of the recording yeah okay I'll</font>

525
00:25:50,610 --> 00:26:02,080
<font color="#CCCCCC">try</font><font color="#E5E5E5"> to be</font><font color="#CCCCCC"> very descriptive</font><font color="#E5E5E5"> so yeah so so</font>

526
00:25:55,810 --> 00:26:05,260
here see what we're<font color="#CCCCCC"> doing okay so</font><font color="#E5E5E5"> down</font>

527
00:26:02,080 --> 00:26:07,060
here<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see we're using JDK</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> 804 T</font>

528
00:26:05,260 --> 00:26:09,520
so<font color="#E5E5E5"> that's a vulnerable version the JDK</font>

529
00:26:07,060 --> 00:26:12,750
so we've got<font color="#CCCCCC"> passed a step where I mess</font>

530
00:26:09,520 --> 00:26:12,750
up already<font color="#CCCCCC"> so that's good</font>

531
00:26:14,010 --> 00:26:21,879
<font color="#E5E5E5">okay so here we're setting</font><font color="#CCCCCC"> a property</font>

532
00:26:17,710 --> 00:26:24,640
<font color="#E5E5E5">and this is just for whether or not I</font>

533
00:26:21,880 --> 00:26:27,640
want to<font color="#E5E5E5"> use the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> version of Zeeland</font>

534
00:26:24,640 --> 00:26:30,010
is built<font color="#CCCCCC"> into dairy or use the library</font>

535
00:26:27,640 --> 00:26:31,570
<font color="#CCCCCC">version</font><font color="#E5E5E5"> and my interface</font><font color="#CCCCCC"> he</font><font color="#E5E5E5"> are so good</font>

536
00:26:30,010 --> 00:26:34,150
that<font color="#CCCCCC"> I can never</font><font color="#E5E5E5"> remember what upstream</font>

537
00:26:31,570 --> 00:26:36,850
means<font color="#E5E5E5"> if it means</font><font color="#CCCCCC"> library version</font>

538
00:26:34,150 --> 00:26:38,560
I think<font color="#CCCCCC"> upstream means</font><font color="#E5E5E5"> a library version</font>

539
00:26:36,850 --> 00:26:41,860
so<font color="#E5E5E5"> this will test the built in dairy</font>

540
00:26:38,560 --> 00:26:45,820
version and so we're going to<font color="#E5E5E5"> create</font>

541
00:26:41,860 --> 00:26:48,719
this remote command execution payload so

542
00:26:45,820 --> 00:26:48,720
I'm going to<font color="#E5E5E5"> step into that</font>

543
00:26:49,950 --> 00:26:58,080
and our<font color="#CCCCCC"> pail is gonna be calculator cuz</font>

544
00:26:54,300 --> 00:26:59,970
that's mandatory<font color="#E5E5E5"> I gave a talk</font><font color="#CCCCCC"> in Boston</font>

545
00:26:58,080 --> 00:27:02,220
a<font color="#CCCCCC"> couple years ago</font><font color="#E5E5E5"> and at the end of the</font>

546
00:26:59,970 --> 00:27:04,830
talk the guy says<font color="#E5E5E5"> well one of the people</font>

547
00:27:02,220 --> 00:27:06,660
<font color="#E5E5E5">asked a question they said</font><font color="#CCCCCC"> okay so you</font>

548
00:27:04,830 --> 00:27:10,220
can execute a calculator<font color="#E5E5E5"> but what's the</font>

549
00:27:06,660 --> 00:27:12,450
risk<font color="#E5E5E5"> to me</font><font color="#CCCCCC"> and my systems and I'm like</font>

550
00:27:10,220 --> 00:27:15,840
<font color="#E5E5E5">people can run arbitral</font><font color="#CCCCCC"> coding your</font>

551
00:27:12,450 --> 00:27:17,970
systems and<font color="#E5E5E5"> like hmm so how's that a</font>

552
00:27:15,840 --> 00:27:19,679
vulnerability<font color="#E5E5E5"> and and at some point I</font>

553
00:27:17,970 --> 00:27:21,360
just<font color="#E5E5E5"> started stammering and I had to get</font>

554
00:27:19,680 --> 00:27:23,760
like<font color="#E5E5E5"> help from the audience</font><font color="#CCCCCC"> to explain</font>

555
00:27:21,360 --> 00:27:25,830
to him why<font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't want random people</font>

556
00:27:23,760 --> 00:27:28,290
in<font color="#E5E5E5"> the world running executables on your</font>

557
00:27:25,830 --> 00:27:33,240
system but you know get that right

558
00:27:28,290 --> 00:27:36,480
that's<font color="#E5E5E5"> not not good</font><font color="#CCCCCC"> so we're gonna you</font>

559
00:27:33,240 --> 00:27:42,300
<font color="#CCCCCC">know pop up the calculator and let me</font>

560
00:27:36,480 --> 00:27:49,230
continue so we're gonna use this temples

561
00:27:42,300 --> 00:27:52,889
<font color="#CCCCCC">in plet let me step into</font><font color="#E5E5E5"> this and</font><font color="#CCCCCC"> you</font>

562
00:27:49,230 --> 00:27:56,040
can see here<font color="#E5E5E5"> that we're going</font><font color="#CCCCCC"> to based</font>

563
00:27:52,890 --> 00:27:58,620
on the property setting<font color="#CCCCCC"> we might either</font>

564
00:27:56,040 --> 00:28:00,960
use the Apache version or the<font color="#E5E5E5"> built in</font>

565
00:27:58,620 --> 00:28:05,399
version again I<font color="#CCCCCC"> think what we're doing</font>

566
00:28:00,960 --> 00:28:08,010
here is we're<font color="#CCCCCC"> using the built in JRE</font>

567
00:28:05,400 --> 00:28:10,560
verse of this let me step<font color="#CCCCCC"> into this</font>

568
00:28:08,010 --> 00:28:13,700
further<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we're gonna</font><font color="#E5E5E5"> create this</font>

569
00:28:10,560 --> 00:28:19,139
temple in plaits<font color="#E5E5E5"> so we're going to</font>

570
00:28:13,700 --> 00:28:21,690
create basically these gadget objects so

571
00:28:19,140 --> 00:28:25,590
this is going to involve something<font color="#E5E5E5"> known</font>

572
00:28:21,690 --> 00:28:29,010
as a translate<font color="#CCCCCC"> which has this</font>

573
00:28:25,590 --> 00:28:34,949
interesting<font color="#CCCCCC"> property of basically it's</font>

574
00:28:29,010 --> 00:28:38,010
an existing<font color="#E5E5E5"> class</font><font color="#CCCCCC"> that lets you compile</font>

575
00:28:34,950 --> 00:28:40,170
Java<font color="#E5E5E5"> into byte codes and install it as a</font>

576
00:28:38,010 --> 00:28:42,000
property in that class and that property

577
00:28:40,170 --> 00:28:45,050
<font color="#E5E5E5">will get invoked</font><font color="#CCCCCC"> during the Jackson T</font>

578
00:28:42,000 --> 00:28:45,050
serialization property

579
00:28:45,350 --> 00:28:55,070
so let<font color="#E5E5E5"> me continue</font><font color="#CCCCCC"> oh so here we're just</font>

580
00:28:52,070 --> 00:28:58,700
<font color="#CCCCCC">creating the</font><font color="#E5E5E5"> JSON</font><font color="#CCCCCC"> so one</font><font color="#E5E5E5"> thing that</font>

581
00:28:55,070 --> 00:29:01,939
<font color="#CCCCCC">makes JSON attacks a little bit harder</font>

582
00:28:58,700 --> 00:29:04,130
<font color="#E5E5E5">than Java tax is</font><font color="#CCCCCC"> that for Java</font><font color="#E5E5E5"> D</font>

583
00:29:01,940 --> 00:29:06,889
<font color="#E5E5E5">serialization vulnerabilities</font><font color="#CCCCCC"> you can</font>

584
00:29:04,130 --> 00:29:10,250
just serialize your object<font color="#E5E5E5"> and then when</font>

585
00:29:06,889 --> 00:29:12,139
you DC realize it<font color="#E5E5E5"> it will it will</font>

586
00:29:10,250 --> 00:29:14,299
execute the exploit but that doesn't

587
00:29:12,139 --> 00:29:17,779
<font color="#E5E5E5">work with Jackson because when you when</font>

588
00:29:14,299 --> 00:29:20,720
you serialize the<font color="#E5E5E5"> jackson object it</font>

589
00:29:17,779 --> 00:29:22,309
actually<font color="#E5E5E5"> runs the exploit so that's sort</font>

590
00:29:20,720 --> 00:29:24,379
of<font color="#E5E5E5"> the attacker sort of self owning</font>

591
00:29:22,309 --> 00:29:27,710
<font color="#CCCCCC">themselves</font><font color="#E5E5E5"> right so what you have</font><font color="#CCCCCC"> to do</font>

592
00:29:24,379 --> 00:29:29,509
is you have to<font color="#E5E5E5"> handcraft the strings</font><font color="#CCCCCC"> you</font>

593
00:29:27,710 --> 00:29:31,960
have<font color="#CCCCCC"> to do the serialization process</font>

594
00:29:29,509 --> 00:29:34,730
<font color="#E5E5E5">manually to avoid triggering the exploit</font>

595
00:29:31,960 --> 00:29:35,840
during the serialization<font color="#E5E5E5"> process so</font>

596
00:29:34,730 --> 00:29:41,029
that's<font color="#E5E5E5"> what we just did</font><font color="#CCCCCC"> with those</font>

597
00:29:35,840 --> 00:29:44,029
string routines<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> and so here is the</font>

598
00:29:41,029 --> 00:29:46,850
line see this<font color="#E5E5E5"> make class initializer</font>

599
00:29:44,029 --> 00:29:49,309
insert after<font color="#E5E5E5"> you can see that we're</font>

600
00:29:46,850 --> 00:29:51,559
we're giving it some source code<font color="#CCCCCC"> some</font>

601
00:29:49,309 --> 00:29:54,918
Java source code<font color="#E5E5E5"> and the Java source</font>

602
00:29:51,559 --> 00:29:58,580
<font color="#CCCCCC">code does the simplest</font><font color="#E5E5E5"> thing imaginable</font>

603
00:29:54,919 --> 00:30:00,769
<font color="#CCCCCC">it just invokes</font><font color="#E5E5E5"> runtime get runtime exec</font>

604
00:29:58,580 --> 00:30:03,110
<font color="#E5E5E5">to execute the contents</font><font color="#CCCCCC"> of a string and</font>

605
00:30:00,769 --> 00:30:05,779
<font color="#E5E5E5">so</font><font color="#CCCCCC"> the string we're passing here is the</font>

606
00:30:03,110 --> 00:30:07,490
the<font color="#E5E5E5"> cow exe we passed as an argument</font><font color="#CCCCCC"> you</font>

607
00:30:05,779 --> 00:30:10,100
can of course<font color="#E5E5E5"> pass a string with an</font>

608
00:30:07,490 --> 00:30:12,740
arbitrary<font color="#CCCCCC"> number of arguments to</font><font color="#E5E5E5"> it if</font>

609
00:30:10,100 --> 00:30:19,158
you need<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit more sophisticated</font>

610
00:30:12,740 --> 00:30:22,879
<font color="#CCCCCC">you know</font><font color="#E5E5E5"> exploit string and now next</font>

611
00:30:19,159 --> 00:30:25,700
we're going to<font color="#E5E5E5"> you</font><font color="#CCCCCC"> we're going to</font>

612
00:30:22,879 --> 00:30:28,178
<font color="#E5E5E5">convert</font><font color="#CCCCCC"> that to bytecode and inject it</font>

613
00:30:25,700 --> 00:30:31,700
into the object and<font color="#E5E5E5"> then we do some</font>

614
00:30:28,179 --> 00:30:35,509
reflective setting of<font color="#E5E5E5"> these fields and</font>

615
00:30:31,700 --> 00:30:37,460
we return this<font color="#E5E5E5"> this</font><font color="#CCCCCC"> object</font><font color="#E5E5E5"> that we've</font>

616
00:30:35,509 --> 00:30:40,370
created the<font color="#CCCCCC"> serialized object was sort</font>

617
00:30:37,460 --> 00:30:43,320
of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> built-in surprise for when</font><font color="#E5E5E5"> you</font>

618
00:30:40,370 --> 00:30:47,429
deserialize it<font color="#E5E5E5"> okay</font>

619
00:30:43,320 --> 00:30:49,590
so here against the<font color="#CCCCCC"> RCE payload we're</font>

620
00:30:47,430 --> 00:30:51,690
going to do some more sort<font color="#E5E5E5"> of</font>

621
00:30:49,590 --> 00:30:54,149
configurations we're gonna write the

622
00:30:51,690 --> 00:30:55,620
string to this translate<font color="#E5E5E5"> byte codes then</font>

623
00:30:54,150 --> 00:30:57,930
we put it in output properties and

624
00:30:55,620 --> 00:31:00,870
output properties<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the specific</font>

625
00:30:57,930 --> 00:31:04,380
property that gets invoked<font color="#E5E5E5"> when we</font>

626
00:31:00,870 --> 00:31:07,979
<font color="#E5E5E5">deserialize this object</font><font color="#CCCCCC"> and I just</font>

627
00:31:04,380 --> 00:31:09,390
<font color="#CCCCCC">pushed</font><font color="#E5E5E5"> down on the the button and</font>

628
00:31:07,980 --> 00:31:11,960
forwarded a bunch<font color="#E5E5E5"> of things I think</font>

629
00:31:09,390 --> 00:31:11,960
<font color="#E5E5E5">that's okay</font>

630
00:31:12,240 --> 00:31:17,340
<font color="#E5E5E5">and so I'll make this one point maybe</font>

631
00:31:15,660 --> 00:31:20,270
it'll<font color="#E5E5E5"> come up again when</font><font color="#CCCCCC"> i DC realize</font>

632
00:31:17,340 --> 00:31:24,870
but the the<font color="#E5E5E5"> the property were actually</font>

633
00:31:20,270 --> 00:31:27,060
<font color="#E5E5E5">that's gonna get in run is in a is in a</font>

634
00:31:24,870 --> 00:31:28,739
getter method and to me<font color="#CCCCCC"> that was</font>

635
00:31:27,060 --> 00:31:31,200
surprising in itself<font color="#E5E5E5"> right because</font>

636
00:31:28,740 --> 00:31:33,180
during the serialization process<font color="#E5E5E5"> you're</font>

637
00:31:31,200 --> 00:31:34,980
<font color="#E5E5E5">reading in the</font><font color="#CCCCCC"> JSON object and the</font>

638
00:31:33,180 --> 00:31:36,570
properties<font color="#E5E5E5"> and you're taking the data</font>

639
00:31:34,980 --> 00:31:39,600
<font color="#E5E5E5">from the property and you</font><font color="#CCCCCC"> should be</font>

640
00:31:36,570 --> 00:31:42,120
<font color="#E5E5E5">calling a setter right in order to put</font>

641
00:31:39,600 --> 00:31:45,240
<font color="#E5E5E5">that</font><font color="#CCCCCC"> information from the JSON property</font>

642
00:31:42,120 --> 00:31:48,090
into the object field<font color="#CCCCCC"> but it turns out</font>

643
00:31:45,240 --> 00:31:50,730
<font color="#E5E5E5">that this process is on</font><font color="#CCCCCC"> an you know</font>

644
00:31:48,090 --> 00:31:52,730
unintuitive<font color="#CCCCCC"> and so there are a bunch</font><font color="#E5E5E5"> of</font>

645
00:31:50,730 --> 00:31:55,020
getters and<font color="#E5E5E5"> things what are called also</font>

646
00:31:52,730 --> 00:31:57,840
frequently just because Jackson's trying

647
00:31:55,020 --> 00:31:59,850
to figure out<font color="#E5E5E5"> the structure of</font><font color="#CCCCCC"> your</font>

648
00:31:57,840 --> 00:32:01,770
object so a lot of<font color="#E5E5E5"> objects have</font><font color="#CCCCCC"> some</font>

649
00:31:59,850 --> 00:32:05,429
references<font color="#E5E5E5"> to</font><font color="#CCCCCC"> other objects</font><font color="#E5E5E5"> that need to</font>

650
00:32:01,770 --> 00:32:07,170
instantiate<font color="#E5E5E5"> it and so Jackson will call</font>

651
00:32:05,430 --> 00:32:09,810
these getter methods and<font color="#E5E5E5"> that's actually</font>

652
00:32:07,170 --> 00:32:11,910
you know<font color="#E5E5E5"> again here a surprise and and</font>

653
00:32:09,810 --> 00:32:19,100
and we all know<font color="#E5E5E5"> that you know security</font>

654
00:32:11,910 --> 00:32:19,100
<font color="#E5E5E5">and surprises are problematic so here's</font>

655
00:32:20,660 --> 00:32:24,270
you see if I can make<font color="#CCCCCC"> sure we</font><font color="#E5E5E5"> can see</font>

656
00:32:23,040 --> 00:32:28,280
this

657
00:32:24,270 --> 00:32:31,320
<font color="#E5E5E5">okay so here's the the JSON string and</font>

658
00:32:28,280 --> 00:32:33,870
it's kind of hard<font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> because</font>

659
00:32:31,320 --> 00:32:35,820
it's just encoded byte codes<font color="#E5E5E5"> right so</font>

660
00:32:33,870 --> 00:32:39,739
you've<font color="#E5E5E5"> got a weird-looking a string here</font>

661
00:32:35,820 --> 00:32:43,860
but you can see this output properties

662
00:32:39,740 --> 00:32:46,530
<font color="#E5E5E5">getter</font><font color="#CCCCCC"> which is</font><font color="#E5E5E5"> going to be invoked as</font>

663
00:32:43,860 --> 00:32:47,790
part<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> deserialization</font><font color="#E5E5E5"> process so</font>

664
00:32:46,530 --> 00:32:51,300
here's the<font color="#E5E5E5"> deserialization</font>

665
00:32:47,790 --> 00:32:53,280
<font color="#E5E5E5">in the next step so let me try to step</font>

666
00:32:51,300 --> 00:32:55,080
into<font color="#E5E5E5"> this and see if we can get</font><font color="#CCCCCC"> anything</font>

667
00:32:53,280 --> 00:32:56,580
interesting out<font color="#CCCCCC"> of that so we're</font><font color="#E5E5E5"> gonna</font>

668
00:32:55,080 --> 00:32:57,899
<font color="#E5E5E5">create a new object mapper that's the</font>

669
00:32:56,580 --> 00:33:02,820
<font color="#CCCCCC">object that does all the serialization</font>

670
00:32:57,900 --> 00:33:04,170
<font color="#CCCCCC">deserialization next we do the</font><font color="#E5E5E5"> C and you</font>

671
00:33:02,820 --> 00:33:06,330
see how slow that<font color="#E5E5E5"> is this way you want</font>

672
00:33:04,170 --> 00:33:07,740
<font color="#E5E5E5">to create one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these and then</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

673
00:33:06,330 --> 00:33:12,059
see this next<font color="#E5E5E5"> step we do the very</font>

674
00:33:07,740 --> 00:33:16,320
<font color="#CCCCCC">dangerous thing</font><font color="#E5E5E5"> that enables polymorphic</font>

675
00:33:12,059 --> 00:33:18,899
type handling and<font color="#E5E5E5"> also allows</font><font color="#CCCCCC"> for these</font>

676
00:33:16,320 --> 00:33:21,689
<font color="#E5E5E5">exploits to succeed and now we're</font><font color="#CCCCCC"> gonna</font>

677
00:33:18,900 --> 00:33:24,630
<font color="#E5E5E5">call read value and then we on this</font>

678
00:33:21,690 --> 00:33:26,400
revalued line<font color="#E5E5E5"> we do the one the one</font>

679
00:33:24,630 --> 00:33:27,750
final<font color="#E5E5E5"> thing that's</font><font color="#CCCCCC"> necessary for</font><font color="#E5E5E5"> this</font>

680
00:33:26,400 --> 00:33:30,390
exploit to work which<font color="#E5E5E5"> is that we</font>

681
00:33:27,750 --> 00:33:32,780
<font color="#E5E5E5">deserialize to a very general class such</font>

682
00:33:30,390 --> 00:33:37,140
<font color="#E5E5E5">as object which will allow</font><font color="#CCCCCC"> us to</font>

683
00:33:32,780 --> 00:33:40,200
deserialize that<font color="#E5E5E5"> that day</font><font color="#CCCCCC"> lawn</font>

684
00:33:37,140 --> 00:33:43,260
gadget that we just created<font color="#CCCCCC"> so that's</font>

685
00:33:40,200 --> 00:33:45,840
all the all the problems that we<font color="#E5E5E5"> need to</font>

686
00:33:43,260 --> 00:33:52,920
make this exploit succeed<font color="#E5E5E5"> let me step</font>

687
00:33:45,840 --> 00:33:54,540
into<font color="#E5E5E5"> this again maybe I'll just hit</font>

688
00:33:52,920 --> 00:33:57,960
continue<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> I've gotten some</font><font color="#E5E5E5"> great</font>

689
00:33:54,540 --> 00:34:01,530
points<font color="#E5E5E5"> okay so we're about to call a</font>

690
00:33:57,960 --> 00:34:02,730
getter method<font color="#E5E5E5"> and again you probably</font>

691
00:34:01,530 --> 00:34:04,020
<font color="#E5E5E5">wouldn't have thought</font><font color="#CCCCCC"> that at the</font>

692
00:34:02,730 --> 00:34:05,429
beginning of<font color="#E5E5E5"> this talk</font><font color="#CCCCCC"> that you would</font>

693
00:34:04,020 --> 00:34:06,960
<font color="#E5E5E5">call a getter method during the</font>

694
00:34:05,429 --> 00:34:12,090
serialization that came as a surprise to

695
00:34:06,960 --> 00:34:14,010
<font color="#CCCCCC">me as</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> let me</font><font color="#E5E5E5"> see if I can step into</font>

696
00:34:12,090 --> 00:34:17,700
<font color="#CCCCCC">that I've got a feeling this next step</font>

697
00:34:14,010 --> 00:34:19,350
<font color="#E5E5E5">is gonna trigger the yeah so so calling</font>

698
00:34:17,699 --> 00:34:22,319
that getter method triggers the exploit

699
00:34:19,350 --> 00:34:24,830
<font color="#CCCCCC">we deserialize the calculator this</font><font color="#E5E5E5"> works</font>

700
00:34:22,320 --> 00:34:24,830
<font color="#E5E5E5">just fine</font>

701
00:34:25,020 --> 00:34:33,300
and that's most of<font color="#CCCCCC"> the demo you see if I</font>

702
00:34:29,969 --> 00:34:36,689
can just wrap<font color="#E5E5E5"> up here and get out these</font>

703
00:34:33,300 --> 00:34:38,960
will I believe throw an<font color="#CCCCCC"> exception</font><font color="#E5E5E5"> which</font>

704
00:34:36,690 --> 00:34:38,960
<font color="#CCCCCC">is</font>

705
00:34:39,320 --> 00:34:43,470
unfortunate from the attacker

706
00:34:40,889 --> 00:34:45,779
perspective<font color="#E5E5E5"> with the Javed</font>

707
00:34:43,469 --> 00:34:47,310
<font color="#CCCCCC">deserialization you can you can</font>

708
00:34:45,780 --> 00:34:49,679
deserialize the vulnerability without

709
00:34:47,310 --> 00:34:52,049
getting any sort<font color="#CCCCCC"> of exception</font><font color="#E5E5E5"> but</font>

710
00:34:49,679 --> 00:34:58,560
there'll be<font color="#E5E5E5"> some indication that this</font>

711
00:34:52,050 --> 00:35:00,660
attack has occurred and yeah<font color="#CCCCCC"> so you'll</font>

712
00:34:58,560 --> 00:35:02,250
see an exception there so that's the<font color="#E5E5E5"> end</font>

713
00:35:00,660 --> 00:35:06,569
<font color="#CCCCCC">of</font><font color="#E5E5E5"> that demo</font><font color="#CCCCCC"> any questions on the demo</font>

714
00:35:02,250 --> 00:35:09,690
<font color="#E5E5E5">before I put that away kind</font><font color="#CCCCCC"> of a quiet</font>

715
00:35:06,570 --> 00:35:12,690
<font color="#CCCCCC">bunch I mean people are paying attention</font>

716
00:35:09,690 --> 00:35:22,530
<font color="#CCCCCC">they</font><font color="#E5E5E5"> do see nods at the right time</font><font color="#CCCCCC"> and</font>

717
00:35:12,690 --> 00:35:24,510
<font color="#E5E5E5">all</font><font color="#CCCCCC"> that okay and</font><font color="#E5E5E5"> I'm gonna skip the</font>

718
00:35:22,530 --> 00:35:26,790
part where<font color="#E5E5E5"> I show</font><font color="#CCCCCC"> that with the external</font>

719
00:35:24,510 --> 00:35:29,370
library version<font color="#E5E5E5"> but again the current</font>

720
00:35:26,790 --> 00:35:32,340
version of the<font color="#CCCCCC"> Apache library is still</font>

721
00:35:29,370 --> 00:35:33,779
<font color="#CCCCCC">vulnerable today</font><font color="#E5E5E5"> as far as I know</font><font color="#CCCCCC"> so all</font>

722
00:35:32,340 --> 00:35:36,000
you need again is that thing to be

723
00:35:33,780 --> 00:35:37,710
sitting on<font color="#E5E5E5"> your path you don't need to</font>

724
00:35:36,000 --> 00:35:41,250
<font color="#CCCCCC">even use it</font><font color="#E5E5E5"> right so that's just a good</font>

725
00:35:37,710 --> 00:35:42,750
<font color="#E5E5E5">reason in general to clean up your your</font>

726
00:35:41,250 --> 00:35:44,510
directories<font color="#E5E5E5"> and make sure you don't have</font>

727
00:35:42,750 --> 00:35:48,450
old files sitting around<font color="#E5E5E5"> that you're not</font>

728
00:35:44,510 --> 00:35:50,580
not using for<font color="#E5E5E5"> any reason so again the</font>

729
00:35:48,450 --> 00:35:54,299
primary mitigation for this is<font color="#E5E5E5"> just</font>

730
00:35:50,580 --> 00:35:56,670
never deserialize untrusted data<font color="#CCCCCC"> I mean</font>

731
00:35:54,300 --> 00:35:58,260
all and there's a lot of<font color="#E5E5E5"> you know I'm</font>

732
00:35:56,670 --> 00:35:59,390
talking<font color="#CCCCCC"> about Jackson I've talked a</font>

733
00:35:58,260 --> 00:36:02,730
little bit<font color="#E5E5E5"> about Java</font><font color="#CCCCCC"> deserialization</font>

734
00:35:59,390 --> 00:36:03,770
<font color="#CCCCCC">there's you know all</font><font color="#E5E5E5"> sorts of</font>

735
00:36:02,730 --> 00:36:06,260
<font color="#CCCCCC">deserialization</font>

736
00:36:03,770 --> 00:36:09,780
libraries out there<font color="#E5E5E5"> for c-sharp and</font>

737
00:36:06,260 --> 00:36:12,120
other languages and<font color="#CCCCCC"> they all</font><font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> much</font>

738
00:36:09,780 --> 00:36:16,320
have<font color="#E5E5E5"> this problem you know and the basic</font>

739
00:36:12,120 --> 00:36:19,770
problem<font color="#CCCCCC"> here</font><font color="#E5E5E5"> is that you're</font><font color="#CCCCCC"> allowing an</font>

740
00:36:16,320 --> 00:36:21,930
attacker to<font color="#E5E5E5"> specify code that they that</font>

741
00:36:19,770 --> 00:36:24,030
they want you know you<font color="#CCCCCC"> to execute for</font>

742
00:36:21,930 --> 00:36:26,370
<font color="#E5E5E5">them with data value supplied by the</font>

743
00:36:24,030 --> 00:36:29,480
attacker<font color="#E5E5E5"> so basically the the problem of</font>

744
00:36:26,370 --> 00:36:32,460
DC realization is<font color="#E5E5E5"> is the problem of</font>

745
00:36:29,480 --> 00:36:34,140
executing attacker supply code in<font color="#E5E5E5"> your</font>

746
00:36:32,460 --> 00:36:36,260
system<font color="#E5E5E5"> and that's probably the toughest</font>

747
00:36:34,140 --> 00:36:39,750
problem is security to solve so

748
00:36:36,260 --> 00:36:43,950
deserialization is a very problematic

749
00:36:39,750 --> 00:36:46,020
class of vulnerabilities in general<font color="#E5E5E5"> so</font>

750
00:36:43,950 --> 00:36:47,810
<font color="#CCCCCC">Jasin has a black list of known gadget</font>

751
00:36:46,020 --> 00:36:50,809
types that is not particularly effective

752
00:36:47,810 --> 00:36:52,730
<font color="#CCCCCC">have a good demo that a second</font>

753
00:36:50,809 --> 00:36:54,670
another mitigation strategies to

754
00:36:52,730 --> 00:36:57,499
eliminate polymorphic type handling

755
00:36:54,670 --> 00:36:59,089
<font color="#CCCCCC">using the names of the classes so</font><font color="#E5E5E5"> you</font>

756
00:36:57,499 --> 00:37:00,439
can actually<font color="#E5E5E5"> use other things besides</font>

757
00:36:59,089 --> 00:37:03,740
<font color="#E5E5E5">the names of the</font><font color="#CCCCCC"> classes and if you</font>

758
00:37:00,440 --> 00:37:05,779
don't use the names<font color="#CCCCCC"> then that sort of</font>

759
00:37:03,740 --> 00:37:08,359
<font color="#E5E5E5">breaks the generic</font><font color="#CCCCCC"> mechanism that an</font>

760
00:37:05,779 --> 00:37:10,490
attacker would use and then again you

761
00:37:08,359 --> 00:37:12,109
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> specify</font><font color="#CCCCCC"> the specific</font><font color="#E5E5E5"> type</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

762
00:37:10,490 --> 00:37:14,180
expected<font color="#CCCCCC"> route</font><font color="#E5E5E5"> object and not something</font>

763
00:37:12,109 --> 00:37:17,960
<font color="#CCCCCC">very general like object class</font><font color="#E5E5E5"> or</font>

764
00:37:14,180 --> 00:37:21,859
permissive<font color="#E5E5E5"> tag interface okay so here's</font>

765
00:37:17,960 --> 00:37:24,349
the Jackson<font color="#E5E5E5"> blacklist</font><font color="#CCCCCC"> so there's a</font><font color="#E5E5E5"> list</font>

766
00:37:21,859 --> 00:37:25,490
of known gadgets<font color="#CCCCCC"> right</font><font color="#E5E5E5"> and and the first</font>

767
00:37:24,349 --> 00:37:27,710
thing I<font color="#CCCCCC"> can</font><font color="#E5E5E5"> tell you about this list of</font>

768
00:37:25,490 --> 00:37:31,069
gadgets is<font color="#CCCCCC"> is I've seen bigger lists of</font>

769
00:37:27,710 --> 00:37:32,930
gadgets<font color="#CCCCCC"> right so to me that means</font><font color="#E5E5E5"> that</font>

770
00:37:31,069 --> 00:37:34,759
<font color="#E5E5E5">that list is not exhaustive</font><font color="#CCCCCC"> right</font>

771
00:37:32,930 --> 00:37:38,720
there's other known gadgets that<font color="#E5E5E5"> that</font>

772
00:37:34,759 --> 00:37:42,950
haven't<font color="#E5E5E5"> been included here</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> second</font>

773
00:37:38,720 --> 00:37:46,519
problem with gadgets<font color="#CCCCCC"> can sort of</font><font color="#E5E5E5"> be</font>

774
00:37:42,950 --> 00:37:48,950
shown<font color="#CCCCCC"> on this chart great</font><font color="#E5E5E5"> so I better</font>

775
00:37:46,519 --> 00:37:51,200
stay here<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going to lose the</font><font color="#CCCCCC"> mic so</font>

776
00:37:48,950 --> 00:37:53,779
at the bottom<font color="#E5E5E5"> there the number</font><font color="#CCCCCC"> five</font>

777
00:37:51,200 --> 00:37:56,989
<font color="#CCCCCC">that's the original vulnerability</font><font color="#E5E5E5"> that</font>

778
00:37:53,779 --> 00:38:00,289
reported this and so the fix was to add

779
00:37:56,989 --> 00:38:03,200
this blacklist<font color="#CCCCCC"> and so the the one</font><font color="#E5E5E5"> number</font>

780
00:38:00,289 --> 00:38:06,289
<font color="#CCCCCC">four second from the bottom basically</font>

781
00:38:03,200 --> 00:38:08,269
<font color="#CCCCCC">says</font><font color="#E5E5E5"> oh here's a gadget that you missed</font>

782
00:38:06,289 --> 00:38:10,190
<font color="#E5E5E5">I'm putting on the</font><font color="#CCCCCC"> blacklist so that was</font>

783
00:38:08,269 --> 00:38:11,720
then add<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and the number</font><font color="#E5E5E5"> three says</font>

784
00:38:10,190 --> 00:38:13,549
here's another<font color="#E5E5E5"> gadget that you forgot to</font>

785
00:38:11,720 --> 00:38:15,049
<font color="#E5E5E5">put a blacklist</font><font color="#CCCCCC"> and number two says</font>

786
00:38:13,549 --> 00:38:17,930
here's another gadget<font color="#CCCCCC"> you forgot to put</font>

787
00:38:15,049 --> 00:38:19,700
in a blacklist and<font color="#E5E5E5"> number one does the</font>

788
00:38:17,930 --> 00:38:22,700
<font color="#CCCCCC">same</font><font color="#E5E5E5"> thing right and that's the inherit</font>

789
00:38:19,700 --> 00:38:25,430
problem with these<font color="#E5E5E5"> black lists you know</font>

790
00:38:22,700 --> 00:38:27,890
<font color="#E5E5E5">black lists can succeed when you have an</font>

791
00:38:25,430 --> 00:38:29,808
<font color="#CCCCCC">innumerable set of things to</font><font color="#E5E5E5"> defend</font>

792
00:38:27,890 --> 00:38:32,230
against right and the<font color="#E5E5E5"> problem here is</font>

793
00:38:29,809 --> 00:38:34,430
<font color="#CCCCCC">that this there's no enumerable set of</font>

794
00:38:32,230 --> 00:38:37,220
vulnerable gadgets there's basically an

795
00:38:34,430 --> 00:38:38,839
<font color="#CCCCCC">infinite number</font><font color="#E5E5E5"> of them</font><font color="#CCCCCC"> and you know</font>

796
00:38:37,220 --> 00:38:42,019
they're<font color="#CCCCCC"> only including the ones I</font><font color="#E5E5E5"> know</font>

797
00:38:38,839 --> 00:38:44,839
now on<font color="#E5E5E5"> the other hand if you are the</font>

798
00:38:42,019 --> 00:38:46,848
Jackson library person this is<font color="#CCCCCC"> the best</font>

799
00:38:44,839 --> 00:38:49,819
you can do<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so so a</font><font color="#E5E5E5"> better solution</font>

800
00:38:46,849 --> 00:38:51,829
obvious to white<font color="#E5E5E5"> list but as a library</font>

801
00:38:49,819 --> 00:38:54,019
writer you<font color="#CCCCCC"> don't know what sort</font><font color="#E5E5E5"> of</font>

802
00:38:51,829 --> 00:38:55,789
objects your users are<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

803
00:38:54,019 --> 00:38:58,288
deserialize so the best<font color="#E5E5E5"> you can do as a</font>

804
00:38:55,789 --> 00:39:02,729
library writers to<font color="#E5E5E5"> create one of these</font>

805
00:38:58,289 --> 00:39:06,329
<font color="#E5E5E5">Nilus</font><font color="#CCCCCC"> so type information</font><font color="#E5E5E5"> can also be</font>

806
00:39:02,729 --> 00:39:09,029
<font color="#CCCCCC">provided using jackson polymorphic type</font>

807
00:39:06,329 --> 00:39:11,249
handling annotations<font color="#E5E5E5"> so instead of just</font>

808
00:39:09,029 --> 00:39:12,989
<font color="#E5E5E5">turning it on</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> everything</font><font color="#CCCCCC"> which isn't</font>

809
00:39:11,249 --> 00:39:15,238
going<font color="#E5E5E5"> to enable this type of tax</font><font color="#CCCCCC"> you</font>

810
00:39:12,989 --> 00:39:19,439
just turn<font color="#E5E5E5"> it on for the things that need</font>

811
00:39:15,239 --> 00:39:21,630
it so<font color="#E5E5E5"> JSON type info indicates details</font>

812
00:39:19,439 --> 00:39:24,808
of what type of<font color="#E5E5E5"> information is clued in</font>

813
00:39:21,630 --> 00:39:28,679
serialization JSON<font color="#E5E5E5"> subtypes indicate</font>

814
00:39:24,809 --> 00:39:30,719
subtypes of<font color="#CCCCCC"> annotated type and Jason</font>

815
00:39:28,679 --> 00:39:33,089
<font color="#E5E5E5">type name to find a logical tightening</font>

816
00:39:30,719 --> 00:39:35,309
and<font color="#E5E5E5"> so the logical type name that you</font>

817
00:39:33,089 --> 00:39:38,729
defined<font color="#CCCCCC"> can be used instead</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> class</font>

818
00:39:35,309 --> 00:39:45,169
name and that's again a<font color="#E5E5E5"> mechanism</font><font color="#CCCCCC"> to</font>

819
00:39:38,729 --> 00:39:48,229
prevent<font color="#E5E5E5"> DC realization and so so there's</font>

820
00:39:45,169 --> 00:39:50,879
you<font color="#CCCCCC"> know there's sort of four</font>

821
00:39:48,229 --> 00:39:54,538
prerequisites for<font color="#E5E5E5"> DC</font><font color="#CCCCCC"> relation attack to</font>

822
00:39:50,880 --> 00:39:56,630
work<font color="#E5E5E5"> right and so the mitigations</font><font color="#CCCCCC"> and</font>

823
00:39:54,539 --> 00:40:00,779
<font color="#CCCCCC">i've gone through</font><font color="#E5E5E5"> these already or to</font>

824
00:39:56,630 --> 00:40:03,900
eliminate<font color="#E5E5E5"> take those away right break</font>

825
00:40:00,779 --> 00:40:05,999
those preconditions<font color="#E5E5E5"> and theoretically if</font>

826
00:40:03,900 --> 00:40:09,150
you eliminate<font color="#E5E5E5"> any one</font><font color="#CCCCCC"> of them it will</font>

827
00:40:05,999 --> 00:40:11,158
<font color="#CCCCCC">prevent deserialization attacks but</font><font color="#E5E5E5"> i'm</font>

828
00:40:09,150 --> 00:40:13,709
a little<font color="#CCCCCC"> more paranoid than</font><font color="#E5E5E5"> that so so</font>

829
00:40:11,159 --> 00:40:16,019
<font color="#E5E5E5">i'd recommend strongly you</font><font color="#CCCCCC"> know apply</font>

830
00:40:13,709 --> 00:40:17,939
all the mitigations<font color="#CCCCCC"> because you never</font>

831
00:40:16,019 --> 00:40:20,669
<font color="#E5E5E5">know down the road when someone might</font>

832
00:40:17,939 --> 00:40:22,019
<font color="#E5E5E5">find</font><font color="#CCCCCC"> a bypass</font><font color="#E5E5E5"> for one of the mitigations</font>

833
00:40:20,669 --> 00:40:25,019
you thought we're gonna prevent<font color="#CCCCCC"> it</font><font color="#E5E5E5"> so</font>

834
00:40:22,019 --> 00:40:26,939
<font color="#E5E5E5">theoretically</font><font color="#CCCCCC"> just having one should do</font>

835
00:40:25,019 --> 00:40:29,279
but<font color="#CCCCCC"> i recommend using</font><font color="#E5E5E5"> them all and so</font>

836
00:40:26,939 --> 00:40:31,949
again one of the mitigations is don't

837
00:40:29,279 --> 00:40:34,739
use the class name by default<font color="#E5E5E5"> use JSON</font>

838
00:40:31,949 --> 00:40:36,329
type name to<font color="#E5E5E5"> indicate a specific logical</font>

839
00:40:34,739 --> 00:40:39,539
name for that<font color="#CCCCCC"> object</font><font color="#E5E5E5"> that you know and</font>

840
00:40:36,329 --> 00:40:42,209
the attacker doesn't know uh<font color="#E5E5E5"> so I'm</font>

841
00:40:39,539 --> 00:40:44,969
gonna<font color="#E5E5E5"> show another quick demo and this</font>

842
00:40:42,209 --> 00:40:49,019
<font color="#E5E5E5">demo is is not next point this is just</font><font color="#CCCCCC"> a</font>

843
00:40:44,969 --> 00:40:51,059
kind of a demo<font color="#CCCCCC"> of using</font><font color="#E5E5E5"> polymorphic type</font>

844
00:40:49,019 --> 00:40:53,419
annotations in order to secure your

845
00:40:51,059 --> 00:40:53,419
system

846
00:40:56,970 --> 00:41:13,870
and<font color="#E5E5E5"> Wow the resolution if this is so so</font>

847
00:41:05,290 --> 00:41:19,140
bad so I'm gonna<font color="#E5E5E5"> demonstrate this using</font>

848
00:41:13,870 --> 00:41:19,140
Java<font color="#E5E5E5"> leaven because</font><font color="#CCCCCC"> I worked on this</font>

849
00:41:20,010 --> 00:41:24,850
last night<font color="#CCCCCC"> in my</font><font color="#E5E5E5"> hotel room and got it</font>

850
00:41:22,630 --> 00:41:26,320
working<font color="#CCCCCC"> and I'm that stupid</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I think</font>

851
00:41:24,850 --> 00:41:27,220
something I just<font color="#CCCCCC"> got working</font><font color="#E5E5E5"> last night</font>

852
00:41:26,320 --> 00:41:37,450
it's<font color="#E5E5E5"> gonna work</font>

853
00:41:27,220 --> 00:41:39,850
when I show it<font color="#E5E5E5"> today</font><font color="#CCCCCC"> okay so and</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

854
00:41:37,450 --> 00:41:41,350
not this is<font color="#CCCCCC"> not</font><font color="#E5E5E5"> exciting you know no</font>

855
00:41:39,850 --> 00:41:43,450
calculators gonna pop<font color="#CCCCCC"> up this is</font><font color="#E5E5E5"> just</font>

856
00:41:41,350 --> 00:41:48,370
trying<font color="#E5E5E5"> to show you how</font><font color="#CCCCCC"> to do this</font><font color="#E5E5E5"> and as</font>

857
00:41:43,450 --> 00:41:50,980
secure manner<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we have we create a zoo</font>

858
00:41:48,370 --> 00:41:53,020
object<font color="#E5E5E5"> we create some animals to put in</font>

859
00:41:50,980 --> 00:41:55,960
our zoo<font color="#E5E5E5"> with create a list of</font><font color="#CCCCCC"> the</font>

860
00:41:53,020 --> 00:41:58,470
<font color="#E5E5E5">animals in the zoo and then we add each</font>

861
00:41:55,960 --> 00:42:01,780
of<font color="#CCCCCC"> these</font><font color="#E5E5E5"> animals</font><font color="#CCCCCC"> then we go ahead</font><font color="#E5E5E5"> and</font>

862
00:41:58,470 --> 00:42:04,180
see realize that<font color="#E5E5E5"> deserialize that and if</font>

863
00:42:01,780 --> 00:42:05,590
<font color="#CCCCCC">i ran it it it should work but it's just</font>

864
00:42:04,180 --> 00:42:07,649
<font color="#E5E5E5">gonna say hey</font><font color="#CCCCCC"> we've serialize and</font>

865
00:42:05,590 --> 00:42:07,650
deserialize

866
00:42:08,580 --> 00:42:13,750
<font color="#E5E5E5">let me skip the zoo and go right to</font><font color="#CCCCCC"> the</font>

867
00:42:11,230 --> 00:42:16,480
animal class<font color="#E5E5E5"> so the animal</font><font color="#CCCCCC"> class is</font>

868
00:42:13,750 --> 00:42:18,430
where we add the<font color="#E5E5E5"> typing information</font><font color="#CCCCCC"> and</font>

869
00:42:16,480 --> 00:42:21,910
again<font color="#E5E5E5"> this whole polymorphic type thing</font>

870
00:42:18,430 --> 00:42:23,140
is because without<font color="#E5E5E5"> it the</font>

871
00:42:21,910 --> 00:42:24,609
deserialization isn't gonna be a

872
00:42:23,140 --> 00:42:25,900
<font color="#E5E5E5">recognized subtypes it's just gonna have</font>

873
00:42:24,610 --> 00:42:28,600
<font color="#CCCCCC">to stay and</font><font color="#E5E5E5"> she ate a bunch of animals</font>

874
00:42:25,900 --> 00:42:31,600
it's not gonna be of instantiate lions

875
00:42:28,600 --> 00:42:34,000
and<font color="#E5E5E5"> there's just</font><font color="#CCCCCC"> a pig's but you're</font>

876
00:42:31,600 --> 00:42:41,770
<font color="#CCCCCC">gonna have pigs and zoos because you</font>

877
00:42:34,000 --> 00:42:44,830
have and so here we<font color="#E5E5E5"> have a</font><font color="#CCCCCC"> json type</font>

878
00:42:41,770 --> 00:42:47,800
info annotation<font color="#CCCCCC"> one of the things we do</font>

879
00:42:44,830 --> 00:42:49,270
is we<font color="#E5E5E5"> say</font><font color="#CCCCCC"> by default</font><font color="#E5E5E5"> is gonna use the</font>

880
00:42:47,800 --> 00:42:51,700
class name<font color="#CCCCCC"> we don't want to use the</font>

881
00:42:49,270 --> 00:42:52,570
default<font color="#E5E5E5"> we want to specify a name so</font>

882
00:42:51,700 --> 00:42:57,490
we're gonna say we're<font color="#E5E5E5"> gonna identify</font>

883
00:42:52,570 --> 00:42:59,740
this object by name<font color="#CCCCCC"> and so for the</font>

884
00:42:57,490 --> 00:43:03,160
subtypes here and this is in the animal

885
00:42:59,740 --> 00:43:06,009
<font color="#E5E5E5">class we have to say that lion is going</font>

886
00:43:03,160 --> 00:43:06,810
<font color="#E5E5E5">to be a subclass of animal and also</font>

887
00:43:06,010 --> 00:43:08,700
elephant

888
00:43:06,810 --> 00:43:10,380
is<font color="#E5E5E5"> gonna be a</font><font color="#CCCCCC"> subclass of animal and</font><font color="#E5E5E5"> we</font>

889
00:43:08,700 --> 00:43:15,450
specified the<font color="#E5E5E5"> names for each of those</font>

890
00:43:10,380 --> 00:43:17,869
objects<font color="#CCCCCC"> and then we go ahead</font><font color="#E5E5E5"> and in the</font>

891
00:43:15,450 --> 00:43:21,810
superclass the animal class<font color="#E5E5E5"> we specify</font>

892
00:43:17,869 --> 00:43:24,630
which<font color="#E5E5E5"> of the fields in this class are</font>

893
00:43:21,810 --> 00:43:28,650
going to be properties of the object<font color="#E5E5E5"> so</font>

894
00:43:24,630 --> 00:43:30,690
<font color="#CCCCCC">that's basically all you need to do I</font>

895
00:43:28,650 --> 00:43:34,980
could pop up<font color="#E5E5E5"> also one of</font><font color="#CCCCCC"> these</font>

896
00:43:30,690 --> 00:43:38,310
subclasses<font color="#CCCCCC"> let's look at lion</font><font color="#E5E5E5"> and lion I</font>

897
00:43:34,980 --> 00:43:40,530
don't believe has really much<font color="#CCCCCC"> in the way</font>

898
00:43:38,310 --> 00:43:43,230
<font color="#CCCCCC">of annotations okay so you'll see some</font>

899
00:43:40,530 --> 00:43:46,830
<font color="#E5E5E5">annotations here but these annotations</font>

900
00:43:43,230 --> 00:43:48,780
are just to<font color="#E5E5E5"> identify additional fields</font>

901
00:43:46,830 --> 00:43:50,670
in this subclass of properties<font color="#CCCCCC"> of this</font>

902
00:43:48,780 --> 00:43:53,280
object<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are gonna be serialize and</font>

903
00:43:50,670 --> 00:43:58,590
deserialize and things like<font color="#E5E5E5"> JSON creator</font>

904
00:43:53,280 --> 00:44:01,910
so one of<font color="#E5E5E5"> the flaws with this anyone</font>

905
00:43:58,590 --> 00:44:01,910
here see what the flaws with this

906
00:44:02,210 --> 00:44:06,930
because<font color="#E5E5E5"> I assume you're mostly security</font>

907
00:44:05,160 --> 00:44:11,098
people<font color="#E5E5E5"> and</font><font color="#CCCCCC"> not some how many people here</font>

908
00:44:06,930 --> 00:44:18,770
developers<font color="#CCCCCC"> okay so you guys should be a</font>

909
00:44:11,099 --> 00:44:21,420
bespoke<font color="#CCCCCC"> the flaw here okay so there's</font>

910
00:44:18,770 --> 00:44:25,770
really this implementation violates

911
00:44:21,420 --> 00:44:28,109
basic<font color="#CCCCCC"> object-oriented programming</font>

912
00:44:25,770 --> 00:44:30,660
principles<font color="#E5E5E5"> in that when you write a</font>

913
00:44:28,109 --> 00:44:34,049
superclass<font color="#CCCCCC"> the idea is that</font><font color="#E5E5E5"> you don't</font>

914
00:44:30,660 --> 00:44:35,580
know how<font color="#E5E5E5"> that's going to use so users of</font>

915
00:44:34,050 --> 00:44:37,080
<font color="#CCCCCC">your superclass you're going to subclass</font>

916
00:44:35,580 --> 00:44:39,210
<font color="#CCCCCC">that</font><font color="#E5E5E5"> for different classes</font><font color="#CCCCCC"> of animals</font>

917
00:44:37,080 --> 00:44:41,730
you don't<font color="#CCCCCC"> know a priori all the animals</font>

918
00:44:39,210 --> 00:44:44,310
<font color="#CCCCCC">that your</font><font color="#E5E5E5"> zoo is gonna have but to use</font>

919
00:44:41,730 --> 00:44:46,710
<font color="#E5E5E5">this mechanism</font><font color="#CCCCCC"> you actually have to put</font>

920
00:44:44,310 --> 00:44:48,869
into<font color="#CCCCCC"> the super type the names of all the</font>

921
00:44:46,710 --> 00:44:51,869
<font color="#CCCCCC">subtypes that you're going to</font><font color="#E5E5E5"> create so</font>

922
00:44:48,869 --> 00:44:53,700
that<font color="#E5E5E5"> sort of pre limits this as to how</font>

923
00:44:51,869 --> 00:44:55,859
extensible it is so it<font color="#E5E5E5"> means you can</font>

924
00:44:53,700 --> 00:44:57,930
only sort of use this yourself<font color="#E5E5E5"> you can't</font>

925
00:44:55,859 --> 00:45:01,200
package<font color="#E5E5E5"> this in a</font><font color="#CCCCCC"> library</font><font color="#E5E5E5"> and have</font>

926
00:44:57,930 --> 00:45:02,940
someone else subclasses because they're

927
00:45:01,200 --> 00:45:07,049
not<font color="#E5E5E5"> gonna have the source code</font><font color="#CCCCCC"> to modify</font>

928
00:45:02,940 --> 00:45:10,170
the the<font color="#E5E5E5"> library</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> so it is it's not</font>

929
00:45:07,050 --> 00:45:13,800
you know there's a violation of a basic

930
00:45:10,170 --> 00:45:15,240
principle<font color="#CCCCCC"> here but you know</font><font color="#E5E5E5"> you sort of</font>

931
00:45:13,800 --> 00:45:17,910
need to<font color="#CCCCCC"> do something</font><font color="#E5E5E5"> like this and want</font>

932
00:45:15,240 --> 00:45:20,100
to<font color="#E5E5E5"> make it secure so</font><font color="#CCCCCC"> the author of the</font>

933
00:45:17,910 --> 00:45:23,069
<font color="#CCCCCC">kids told me they also have a dynamic</font>

934
00:45:20,100 --> 00:45:25,470
methods that you can<font color="#E5E5E5"> use to supply the</font>

935
00:45:23,070 --> 00:45:27,960
type information<font color="#E5E5E5"> so instead of doing</font><font color="#CCCCCC"> it</font>

936
00:45:25,470 --> 00:45:30,419
using annotations<font color="#CCCCCC"> you can do it by</font>

937
00:45:27,960 --> 00:45:35,430
invoking methods at runtime<font color="#E5E5E5"> and that</font>

938
00:45:30,420 --> 00:45:39,060
ought<font color="#E5E5E5"> to support</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know the general</font>

939
00:45:35,430 --> 00:45:40,649
inheritance if you need to do that<font color="#CCCCCC"> but</font>

940
00:45:39,060 --> 00:45:44,600
again<font color="#CCCCCC"> it's all it's</font><font color="#E5E5E5"> all a little bit</font>

941
00:45:40,650 --> 00:45:47,190
half-ass it's not it's<font color="#CCCCCC"> not</font><font color="#E5E5E5"> you know</font>

942
00:45:44,600 --> 00:45:53,130
really well architected the security

943
00:45:47,190 --> 00:45:55,320
solution here<font color="#E5E5E5"> so I'm just about</font><font color="#CCCCCC"> done I</font>

944
00:45:53,130 --> 00:45:56,760
think<font color="#CCCCCC"> I've got a summary slide</font><font color="#E5E5E5"> and then</font>

945
00:45:55,320 --> 00:46:03,480
we've got<font color="#CCCCCC"> a few minutes left if there</font>

946
00:45:56,760 --> 00:46:06,810
are any<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> so so that the author</font>

947
00:46:03,480 --> 00:46:09,570
of the Jackson package<font color="#CCCCCC"> I can't remember</font>

948
00:46:06,810 --> 00:46:13,560
<font color="#E5E5E5">his name I</font><font color="#CCCCCC"> think he's got some</font><font color="#E5E5E5"> cow cow</font>

949
00:46:09,570 --> 00:46:14,850
something<font color="#E5E5E5"> in his his alias</font><font color="#CCCCCC"> which is</font>

950
00:46:13,560 --> 00:46:19,410
<font color="#E5E5E5">funny because I said in the news lately</font>

951
00:46:14,850 --> 00:46:26,250
<font color="#CCCCCC">too with new mrs. cow</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> he</font><font color="#E5E5E5"> read</font>

952
00:46:19,410 --> 00:46:28,140
the news<font color="#CCCCCC"> so anyway he was a pretty nice</font>

953
00:46:26,250 --> 00:46:30,570
guy and because he<font color="#E5E5E5"> was a nice</font><font color="#CCCCCC"> guy</font><font color="#E5E5E5"> I used</font>

954
00:46:28,140 --> 00:46:32,670
<font color="#CCCCCC">this line that says poorly written Java</font>

955
00:46:30,570 --> 00:46:35,070
code<font color="#CCCCCC"> that</font><font color="#E5E5E5"> dis seer lies the JSON strung</font>

956
00:46:32,670 --> 00:46:37,770
strings from untrusted<font color="#E5E5E5"> sources can be</font>

957
00:46:35,070 --> 00:46:39,210
vulnerable to a range of exploits<font color="#E5E5E5"> so</font>

958
00:46:37,770 --> 00:46:42,090
what I've<font color="#E5E5E5"> done with that line is I</font><font color="#CCCCCC"> blame</font>

959
00:46:39,210 --> 00:46:44,610
<font color="#E5E5E5">the user of his packets instead of</font>

960
00:46:42,090 --> 00:46:47,160
blaming him for writing<font color="#E5E5E5"> a package which</font>

961
00:46:44,610 --> 00:46:49,110
was<font color="#CCCCCC"> easily misused to create</font>

962
00:46:47,160 --> 00:46:51,149
vulnerabilities<font color="#CCCCCC"> and this is this sort of</font>

963
00:46:49,110 --> 00:46:53,250
<font color="#CCCCCC">language is familiar to me from</font><font color="#E5E5E5"> my years</font>

964
00:46:51,150 --> 00:46:54,920
on the<font color="#CCCCCC"> C Standards Committee where you</font>

965
00:46:53,250 --> 00:46:57,450
know they<font color="#E5E5E5"> never did</font><font color="#CCCCCC"> anything wrong</font>

966
00:46:54,920 --> 00:46:59,610
<font color="#CCCCCC">people just calling you know get us</font>

967
00:46:57,450 --> 00:47:05,700
<font color="#CCCCCC">incorrectly it's basically their</font>

968
00:46:59,610 --> 00:47:08,010
position so so<font color="#E5E5E5"> again this can be used to</font>

969
00:47:05,700 --> 00:47:13,140
<font color="#E5E5E5">do remote command execution which we</font>

970
00:47:08,010 --> 00:47:16,020
<font color="#E5E5E5">demonstrated I've never seen a paper on</font>

971
00:47:13,140 --> 00:47:18,509
using this for denial of service attack

972
00:47:16,020 --> 00:47:20,130
<font color="#CCCCCC">I haven't demonstrated it both the</font>

973
00:47:18,510 --> 00:47:22,110
author<font color="#E5E5E5"> of this package</font><font color="#CCCCCC"> and myself</font><font color="#E5E5E5"> think</font>

974
00:47:20,130 --> 00:47:25,320
this is trivially done it just<font color="#E5E5E5"> takes a</font>

975
00:47:22,110 --> 00:47:26,670
little<font color="#E5E5E5"> bit of work because you have</font><font color="#CCCCCC"> to</font>

976
00:47:25,320 --> 00:47:29,910
hand code the strings

977
00:47:26,670 --> 00:47:31,860
we<font color="#E5E5E5"> can't just deserialize the attack and</font>

978
00:47:29,910 --> 00:47:34,589
you know it's easier to try things<font color="#CCCCCC"> out</font>

979
00:47:31,860 --> 00:47:36,840
with<font color="#E5E5E5"> Java</font><font color="#CCCCCC"> deserialization</font><font color="#E5E5E5"> next place and</font>

980
00:47:34,590 --> 00:47:38,640
<font color="#E5E5E5">it is with these Jackson ones these take</font>

981
00:47:36,840 --> 00:47:42,720
a<font color="#E5E5E5"> little bit</font><font color="#CCCCCC"> more work</font><font color="#E5E5E5"> so one day when</font>

982
00:47:38,640 --> 00:47:46,950
I'm bored I<font color="#CCCCCC"> guess I'll try to create</font><font color="#E5E5E5"> a</font>

983
00:47:42,720 --> 00:47:49,890
sample<font color="#CCCCCC"> Pok</font><font color="#E5E5E5"> for that</font><font color="#CCCCCC"> and then you know</font>

984
00:47:46,950 --> 00:47:52,680
<font color="#CCCCCC">very broadly the</font><font color="#E5E5E5"> serialization</font>

985
00:47:49,890 --> 00:47:54,720
vulnerabilities can<font color="#CCCCCC"> really exploit any</font>

986
00:47:52,680 --> 00:47:56,970
<font color="#E5E5E5">functionality in any of the classes that</font>

987
00:47:54,720 --> 00:47:58,649
are deserializing so sometimes it's<font color="#CCCCCC"> very</font>

988
00:47:56,970 --> 00:48:00,779
trivial things sometimes<font color="#E5E5E5"> you just have</font><font color="#CCCCCC"> a</font>

989
00:47:58,650 --> 00:48:03,330
<font color="#E5E5E5">you know</font><font color="#CCCCCC"> a setter getter method which</font>

990
00:48:00,780 --> 00:48:06,570
deletes<font color="#E5E5E5"> a file right and so what the</font>

991
00:48:03,330 --> 00:48:09,120
attacker would do we use that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> series</font>

992
00:48:06,570 --> 00:48:11,640
<font color="#E5E5E5">ation method to delete an arbitrary file</font>

993
00:48:09,120 --> 00:48:13,980
on your<font color="#CCCCCC"> filesystem right so so</font><font color="#E5E5E5"> those</font>

994
00:48:11,640 --> 00:48:15,720
basically<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is why you can't</font>

995
00:48:13,980 --> 00:48:19,290
enumerate all the<font color="#E5E5E5"> dangerous classes</font>

996
00:48:15,720 --> 00:48:21,390
right any functionality<font color="#E5E5E5"> that's executed</font>

997
00:48:19,290 --> 00:48:26,640
as part of deserializing any class might

998
00:48:21,390 --> 00:48:28,470
be part of an exploit<font color="#CCCCCC"> and so again these</font>

999
00:48:26,640 --> 00:48:34,470
attacks are<font color="#CCCCCC"> possible when the</font><font color="#E5E5E5"> Java class</font>

1000
00:48:28,470 --> 00:48:37,140
<font color="#CCCCCC">name is used and the resulting</font><font color="#E5E5E5"> object is</font>

1001
00:48:34,470 --> 00:48:40,259
deserialized to a very general class

1002
00:48:37,140 --> 00:48:42,810
such as object or serializable or

1003
00:48:40,260 --> 00:48:45,060
something like this so<font color="#E5E5E5"> that's all I have</font>

1004
00:48:42,810 --> 00:48:47,040
I<font color="#E5E5E5"> could take questions this is me</font><font color="#CCCCCC"> this</font>

1005
00:48:45,060 --> 00:48:51,270
how you get<font color="#E5E5E5"> in touch with me</font><font color="#CCCCCC"> I answer</font>

1006
00:48:47,040 --> 00:48:53,070
email<font color="#CCCCCC"> 7:24 you can email me at</font><font color="#E5E5E5"> 3:00 in</font>

1007
00:48:51,270 --> 00:48:55,790
the morning on a Tuesday<font color="#CCCCCC"> night</font><font color="#E5E5E5"> and I'll</font>

1008
00:48:53,070 --> 00:49:03,350
answer<font color="#E5E5E5"> it within</font><font color="#CCCCCC"> 5</font><font color="#E5E5E5"> minutes because I</font>

1009
00:48:55,790 --> 00:49:03,350
don't know why<font color="#CCCCCC"> ok any questions</font>

1010
00:49:17,800 --> 00:49:23,450
yeah I mean<font color="#E5E5E5"> that old you know yeah</font>

1011
00:49:22,040 --> 00:49:24,730
<font color="#CCCCCC">pretty much</font><font color="#E5E5E5"> work anywhere</font><font color="#CCCCCC"> I mean the</font>

1012
00:49:23,450 --> 00:49:27,770
only<font color="#E5E5E5"> part of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> clutch</font>

1013
00:49:24,730 --> 00:49:33,310
platform-specific is the name of<font color="#CCCCCC"> the</font>

1014
00:49:27,770 --> 00:49:33,310
command<font color="#E5E5E5"> to</font><font color="#CCCCCC"> execute right</font><font color="#E5E5E5"> I mean we</font><font color="#CCCCCC"> do</font>

1015
00:50:26,230 --> 00:50:29,340
[Music]

1016
00:52:56,280 --> 00:53:03,099
[Applause]

