1
00:00:00,000 --> 00:00:03,449
for coming<font color="#CCCCCC"> to my talk I really</font>

2
00:00:02,190 --> 00:00:05,910
appreciate<font color="#E5E5E5"> it I</font><font color="#CCCCCC"> really didn't think</font><font color="#E5E5E5"> this</font>

3
00:00:03,449 --> 00:00:08,160
many people<font color="#E5E5E5"> would come but</font><font color="#CCCCCC"> uh I'm</font><font color="#E5E5E5"> really</font>

4
00:00:05,910 --> 00:00:11,070
happy to see<font color="#E5E5E5"> you all here anyways my</font>

5
00:00:08,160 --> 00:00:12,719
<font color="#CCCCCC">name</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> jack or halt oh and I'm gonna</font>

6
00:00:11,070 --> 00:00:18,270
talk to<font color="#E5E5E5"> you</font><font color="#CCCCCC"> guys about how to</font><font color="#E5E5E5"> get goofy</font>

7
00:00:12,719 --> 00:00:20,640
<font color="#E5E5E5">with Linux kernel functions so alario a</font>

8
00:00:18,270 --> 00:00:23,670
<font color="#E5E5E5">little bit about me</font><font color="#CCCCCC"> I've been</font><font color="#E5E5E5"> doing</font>

9
00:00:20,640 --> 00:00:26,430
<font color="#CCCCCC">rootkit stuff for</font><font color="#E5E5E5"> about two years</font><font color="#CCCCCC"> I mean</font>

10
00:00:23,670 --> 00:00:29,310
my third year<font color="#CCCCCC"> here at RIT and I do blue</font>

11
00:00:26,430 --> 00:00:33,690
<font color="#CCCCCC">team red team</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> black team for</font><font color="#E5E5E5"> RIT</font>

12
00:00:29,310 --> 00:00:36,149
<font color="#E5E5E5">CCDC and rich SEC two of my co</font>

13
00:00:33,690 --> 00:00:36,599
developers are<font color="#E5E5E5"> Nicolas O'Brien in the</font>

14
00:00:36,149 --> 00:00:39,000
back

15
00:00:36,600 --> 00:00:40,950
Thank<font color="#CCCCCC"> You Nick</font><font color="#E5E5E5"> and rain who can't be</font>

16
00:00:39,000 --> 00:00:44,930
here<font color="#E5E5E5"> today and recently they're</font>

17
00:00:40,950 --> 00:00:49,590
graduating anyways what is<font color="#CCCCCC"> a rootkit</font>

18
00:00:44,930 --> 00:00:52,199
real basic it hides things<font color="#E5E5E5"> and allows</font>

19
00:00:49,590 --> 00:00:53,190
you to<font color="#CCCCCC"> maintain persistence with an</font>

20
00:00:52,199 --> 00:00:55,739
avoid detection

21
00:00:53,190 --> 00:00:57,660
it's kind of<font color="#E5E5E5"> the basic what a rootkit is</font>

22
00:00:55,739 --> 00:00:59,399
<font color="#E5E5E5">originally some of them were just</font><font color="#CCCCCC"> like</font>

23
00:00:57,660 --> 00:01:03,300
kits<font color="#E5E5E5"> of shims</font>

24
00:00:59,399 --> 00:01:05,909
so you see<font color="#E5E5E5"> IMLS at netstat etc to hide</font>

25
00:01:03,300 --> 00:01:07,399
your connection hide your files whatever

26
00:01:05,909 --> 00:01:13,439
<font color="#CCCCCC">you're trying</font><font color="#E5E5E5"> to hide</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> writing a</font>

27
00:01:07,400 --> 00:01:18,750
shim for<font color="#CCCCCC"> that binary and then why write</font>

28
00:01:13,439 --> 00:01:20,669
a rootkit<font color="#E5E5E5"> obviously you know persistence</font>

29
00:01:18,750 --> 00:01:22,799
but red teaming we want to not<font color="#E5E5E5"> get</font>

30
00:01:20,670 --> 00:01:25,740
<font color="#E5E5E5">kicked out of their box</font><font color="#CCCCCC"> a lot of the red</font>

31
00:01:22,799 --> 00:01:27,750
teaming we do is around like the

32
00:01:25,740 --> 00:01:31,020
competitions we host like<font color="#CCCCCC"> IR sec and</font>

33
00:01:27,750 --> 00:01:32,640
<font color="#E5E5E5">also for our</font><font color="#CCCCCC"> CCDC</font><font color="#E5E5E5"> team we</font><font color="#CCCCCC"> Red Team</font><font color="#E5E5E5"> them</font>

34
00:01:31,020 --> 00:01:34,649
so that they<font color="#E5E5E5"> can get practice so that</font>

35
00:01:32,640 --> 00:01:37,049
when they go to<font color="#CCCCCC"> Northeast and forest is</font>

36
00:01:34,650 --> 00:01:37,680
red teaming<font color="#E5E5E5"> them they know somewhat what</font>

37
00:01:37,049 --> 00:01:40,229
to expect

38
00:01:37,680 --> 00:01:44,100
<font color="#E5E5E5">so this project is born out of that and</font>

39
00:01:40,229 --> 00:01:46,579
trying<font color="#E5E5E5"> to help them get prepared</font><font color="#CCCCCC"> it's a</font>

40
00:01:44,100 --> 00:01:52,320
little over engineered for<font color="#E5E5E5"> that but</font>

41
00:01:46,579 --> 00:01:54,658
we'll talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> that so first</font><font color="#E5E5E5"> off how</font>

42
00:01:52,320 --> 00:02:01,369
<font color="#CCCCCC">many of you know how</font><font color="#E5E5E5"> Linux system calls</font>

43
00:01:54,659 --> 00:02:01,369
work like a rough understanding<font color="#E5E5E5"> okay so</font>

44
00:02:01,640 --> 00:02:07,619
what happens when<font color="#E5E5E5"> you're writing a</font>

45
00:02:03,960 --> 00:02:09,478
<font color="#E5E5E5">printf function is you have your printf</font>

46
00:02:07,619 --> 00:02:14,120
<font color="#E5E5E5">you know library call you call that and</font>

47
00:02:09,479 --> 00:02:14,120
printf is<font color="#E5E5E5"> going to make a system call</font>

48
00:02:14,310 --> 00:02:19,890
right to<font color="#E5E5E5"> stand it out</font><font color="#CCCCCC"> and so what it's</font>

49
00:02:16,380 --> 00:02:21,540
doing<font color="#E5E5E5"> is it starts</font><font color="#CCCCCC"> an interrupt and it</font>

50
00:02:19,890 --> 00:02:23,309
<font color="#E5E5E5">specifies some values</font><font color="#CCCCCC"> and the registers</font>

51
00:02:21,540 --> 00:02:26,609
the<font color="#CCCCCC"> interrupts gets past</font><font color="#E5E5E5"> an interrupt</font>

52
00:02:23,310 --> 00:02:28,380
<font color="#CCCCCC">handler which is up</font><font color="#E5E5E5"> in the kernel and it</font>

53
00:02:26,610 --> 00:02:30,810
<font color="#E5E5E5">says okay this</font><font color="#CCCCCC"> is an interrupt for a</font>

54
00:02:28,380 --> 00:02:32,819
system call I'm gonna pass<font color="#E5E5E5"> this along to</font>

55
00:02:30,810 --> 00:02:34,440
<font color="#E5E5E5">the system</font><font color="#CCCCCC"> call table</font><font color="#E5E5E5"> which then</font>

56
00:02:32,819 --> 00:02:36,569
evaluates it and says this<font color="#CCCCCC"> is this</font>

57
00:02:34,440 --> 00:02:39,150
system call this<font color="#E5E5E5"> is that system call so</font>

58
00:02:36,569 --> 00:02:42,569
if I want<font color="#E5E5E5"> to do right it's gonna pass it</font>

59
00:02:39,150 --> 00:02:44,130
along and say oh here is<font color="#CCCCCC"> the source the</font>

60
00:02:42,569 --> 00:02:47,100
data<font color="#E5E5E5"> I'm gonna print here's the output</font>

61
00:02:44,130 --> 00:02:51,239
<font color="#E5E5E5">so we're doing standard out that's that</font>

62
00:02:47,100 --> 00:02:53,160
file handle etc and after<font color="#CCCCCC"> that it does</font>

63
00:02:51,239 --> 00:02:57,750
the stuff and returns<font color="#E5E5E5"> back to user space</font>

64
00:02:53,160 --> 00:02:59,609
all from<font color="#CCCCCC"> that one</font><font color="#E5E5E5"> interrupt and so what</font>

65
00:02:57,750 --> 00:03:02,670
we do when<font color="#E5E5E5"> we are</font><font color="#CCCCCC"> writing a rootkit is</font>

66
00:02:59,610 --> 00:03:05,099
we're catching the interaction with<font color="#CCCCCC"> the</font>

67
00:03:02,670 --> 00:03:08,579
<font color="#CCCCCC">system call table so traditionally what</font>

68
00:03:05,099 --> 00:03:10,798
happens is the rootkit<font color="#E5E5E5"> overwrites</font><font color="#CCCCCC"> the</font>

69
00:03:08,580 --> 00:03:14,069
system call table<font color="#E5E5E5"> it's changing the</font>

70
00:03:10,799 --> 00:03:16,230
<font color="#CCCCCC">actual address</font><font color="#E5E5E5"> value so we go find right</font>

71
00:03:14,069 --> 00:03:19,470
<font color="#E5E5E5">we overwrite it and we have a point to</font>

72
00:03:16,230 --> 00:03:22,170
our code in the kernel<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> usually</font>

73
00:03:19,470 --> 00:03:25,170
some kind of a kernel module<font color="#CCCCCC"> so after</font>

74
00:03:22,170 --> 00:03:26,518
that<font color="#CCCCCC"> you hijack code execution you can</font>

75
00:03:25,170 --> 00:03:29,040
do whatever you want and then you<font color="#CCCCCC"> can</font>

76
00:03:26,519 --> 00:03:33,120
return data based on saving<font color="#E5E5E5"> that</font>

77
00:03:29,040 --> 00:03:35,850
original value<font color="#CCCCCC"> and this allows us to</font><font color="#E5E5E5"> do</font>

78
00:03:33,120 --> 00:03:38,220
things<font color="#E5E5E5"> like hide files so when they do a</font>

79
00:03:35,850 --> 00:03:40,590
get dense call you hook get dense and

80
00:03:38,220 --> 00:03:45,930
you hide the file if they're<font color="#CCCCCC"> doing that</font>

81
00:03:40,590 --> 00:03:48,480
stat<font color="#E5E5E5"> you hide</font><font color="#CCCCCC"> list processes etc ideally</font>

82
00:03:45,930 --> 00:03:49,799
what we'd like<font color="#E5E5E5"> to move toward so that's</font>

83
00:03:48,480 --> 00:03:53,340
a lot of the stinger capabilities and

84
00:03:49,799 --> 00:03:55,590
goof kit can do a lot of that<font color="#CCCCCC"> we'd</font>

85
00:03:53,340 --> 00:03:58,769
ideally like to<font color="#E5E5E5"> do look a port sharing</font>

86
00:03:55,590 --> 00:04:00,120
<font color="#E5E5E5">which is</font><font color="#CCCCCC"> where even if a service is</font>

87
00:03:58,769 --> 00:04:02,190
<font color="#CCCCCC">already</font><font color="#E5E5E5"> running on a port you</font><font color="#CCCCCC"> also</font>

88
00:04:00,120 --> 00:04:04,350
<font color="#E5E5E5">listen on the port as the kernel that</font>

89
00:04:02,190 --> 00:04:06,209
way for like scored services during<font color="#E5E5E5"> red</font>

90
00:04:04,350 --> 00:04:08,100
teaming competitions<font color="#CCCCCC"> we can have a back</font>

91
00:04:06,209 --> 00:04:11,579
<font color="#CCCCCC">door on any scored service that they</font>

92
00:04:08,100 --> 00:04:19,320
<font color="#E5E5E5">have</font><font color="#CCCCCC"> which kind of</font><font color="#E5E5E5"> sucks</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> your blue</font>

93
00:04:11,579 --> 00:04:22,079
team<font color="#E5E5E5"> oh oh well yeah so let's get into</font>

94
00:04:19,320 --> 00:04:24,719
it<font color="#E5E5E5"> what's actually happening</font><font color="#CCCCCC"> so again</font>

95
00:04:22,079 --> 00:04:27,060
get dance file hiding what we do is we

96
00:04:24,720 --> 00:04:28,170
have our magic string will say like RIT

97
00:04:27,060 --> 00:04:30,210
<font color="#CCCCCC">red team</font>

98
00:04:28,170 --> 00:04:31,680
and any<font color="#E5E5E5"> file that starts with RIT red</font>

99
00:04:30,210 --> 00:04:33,150
team is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be removed from the get</font>

100
00:04:31,680 --> 00:04:35,460
dense entry<font color="#E5E5E5"> so we're actually making a</font>

101
00:04:33,150 --> 00:04:38,179
call<font color="#CCCCCC"> to get dents first getting</font><font color="#E5E5E5"> the</font>

102
00:04:35,460 --> 00:04:40,919
<font color="#CCCCCC">actual directory entries and then we</font>

103
00:04:38,180 --> 00:04:43,650
look through it<font color="#CCCCCC"> and say oh this one</font>

104
00:04:40,920 --> 00:04:45,240
starts with<font color="#E5E5E5"> RIT red team remove it so</font>

105
00:04:43,650 --> 00:04:46,469
anything<font color="#CCCCCC"> that has RIT red team in it is</font>

106
00:04:45,240 --> 00:04:48,720
gonna<font color="#CCCCCC"> get</font><font color="#E5E5E5"> removed</font>

107
00:04:46,470 --> 00:04:49,950
same thing with proc basically the only

108
00:04:48,720 --> 00:04:55,020
<font color="#E5E5E5">difference is we're checking for the</font>

109
00:04:49,950 --> 00:04:56,610
process ID<font color="#E5E5E5"> to hide processes and we just</font>

110
00:04:55,020 --> 00:04:58,169
verify<font color="#E5E5E5"> that we're in</font><font color="#CCCCCC"> slash procs</font><font color="#E5E5E5"> we're</font>

111
00:04:56,610 --> 00:05:01,020
not<font color="#E5E5E5"> hiding random files with the same</font>

112
00:04:58,170 --> 00:05:02,490
number<font color="#E5E5E5"> like if you</font><font color="#CCCCCC"> hid process 1337 you</font>

113
00:05:01,020 --> 00:05:04,440
don't want to hide<font color="#CCCCCC"> all files that start</font>

114
00:05:02,490 --> 00:05:10,470
with 1337 you really<font color="#E5E5E5"> just want to hide</font>

115
00:05:04,440 --> 00:05:14,160
that<font color="#CCCCCC"> one and so let's talk</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> goo kit</font>

116
00:05:10,470 --> 00:05:16,380
so like I<font color="#CCCCCC"> said the standard group kits</font>

117
00:05:14,160 --> 00:05:17,850
are overriding<font color="#CCCCCC"> the system call table and</font>

118
00:05:16,380 --> 00:05:20,969
they're<font color="#E5E5E5"> changing where the pointers are</font>

119
00:05:17,850 --> 00:05:22,160
this is kind of<font color="#E5E5E5"> easy to detect all you</font>

120
00:05:20,970 --> 00:05:24,870
have to do is load the kernel module

121
00:05:22,160 --> 00:05:26,730
enumerate the system calls<font color="#E5E5E5"> keep a list</font>

122
00:05:24,870 --> 00:05:28,920
and keep checking<font color="#E5E5E5"> and if the system</font>

123
00:05:26,730 --> 00:05:30,270
<font color="#CCCCCC">called pointer ever changes someone's</font>

124
00:05:28,920 --> 00:05:33,870
<font color="#E5E5E5">done</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> and you know that's bad</font>

125
00:05:30,270 --> 00:05:35,340
<font color="#E5E5E5">so what we're doing</font><font color="#CCCCCC"> instead of that is</font>

126
00:05:33,870 --> 00:05:37,050
instead of<font color="#E5E5E5"> overriding the actual</font>

127
00:05:35,340 --> 00:05:38,640
pointers we follow the pointer to the

128
00:05:37,050 --> 00:05:40,050
<font color="#CCCCCC">function and we overwrite the actual</font>

129
00:05:38,640 --> 00:05:42,960
function

130
00:05:40,050 --> 00:05:44,640
<font color="#E5E5E5">so there's actually</font><font color="#CCCCCC"> inline assembly that</font>

131
00:05:42,960 --> 00:05:47,070
we're injecting<font color="#E5E5E5"> into</font><font color="#CCCCCC"> each system call</font>

132
00:05:44,640 --> 00:05:49,440
that<font color="#CCCCCC"> we hook which hijacks control-flow</font>

133
00:05:47,070 --> 00:05:54,090
and we save the<font color="#CCCCCC"> original code</font><font color="#E5E5E5"> so we can</font>

134
00:05:49,440 --> 00:05:57,090
jump back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> the benefits so this is</font>

135
00:05:54,090 --> 00:06:00,210
called<font color="#CCCCCC"> inline hooking the benefit of</font>

136
00:05:57,090 --> 00:06:02,190
this is<font color="#CCCCCC"> that it's harder to detect and</font>

137
00:06:00,210 --> 00:06:04,289
then we couple<font color="#E5E5E5"> it with trampolining so</font>

138
00:06:02,190 --> 00:06:06,600
that instead of like sometimes you want

139
00:06:04,290 --> 00:06:08,450
<font color="#E5E5E5">to pause your</font><font color="#CCCCCC"> rootkit and to do that</font>

140
00:06:06,600 --> 00:06:11,340
<font color="#E5E5E5">traditionally what you've done is you've</font>

141
00:06:08,450 --> 00:06:13,020
undone whatever rights you did to

142
00:06:11,340 --> 00:06:14,760
initiate the rootkit

143
00:06:13,020 --> 00:06:18,060
<font color="#E5E5E5">so if you are overriding the system</font><font color="#CCCCCC"> call</font>

144
00:06:14,760 --> 00:06:19,260
table<font color="#E5E5E5"> you've wrote back your pointers or</font>

145
00:06:18,060 --> 00:06:20,790
if you were<font color="#E5E5E5"> doing in line hooking you</font>

146
00:06:19,260 --> 00:06:25,760
would rewrite the actual functions

147
00:06:20,790 --> 00:06:29,960
<font color="#E5E5E5">instead of doing that we're</font><font color="#CCCCCC"> doing</font>

148
00:06:25,760 --> 00:06:34,770
<font color="#CCCCCC">trampolining so we copy out the old code</font>

149
00:06:29,960 --> 00:06:38,070
we inject our hook our malicious

150
00:06:34,770 --> 00:06:40,289
function<font color="#E5E5E5"> if it needs</font><font color="#CCCCCC"> to call the ogee</font>

151
00:06:38,070 --> 00:06:41,620
code will call the copied out part and

152
00:06:40,290 --> 00:06:46,210
then jump to after<font color="#E5E5E5"> our hook</font>

153
00:06:41,620 --> 00:06:48,090
and then<font color="#E5E5E5"> just resumed execution</font><font color="#CCCCCC"> if we</font>

154
00:06:46,210 --> 00:06:50,560
want<font color="#CCCCCC"> to pause it all we do is we remove</font>

155
00:06:48,090 --> 00:06:52,150
we skip over<font color="#E5E5E5"> our malicious section and</font>

156
00:06:50,560 --> 00:06:57,010
<font color="#CCCCCC">just let it</font><font color="#E5E5E5"> keep</font><font color="#CCCCCC"> going because we've</font>

157
00:06:52,150 --> 00:06:59,109
already saved the<font color="#E5E5E5"> og code the benefit of</font>

158
00:06:57,010 --> 00:07:02,560
<font color="#E5E5E5">doing these two things</font><font color="#CCCCCC"> is targeted</font>

159
00:06:59,110 --> 00:07:04,150
<font color="#CCCCCC">attack and it</font><font color="#E5E5E5"> is much less disk IO</font>

160
00:07:02,560 --> 00:07:05,560
<font color="#CCCCCC">whenever you</font><font color="#E5E5E5"> need to pause it which</font>

161
00:07:04,150 --> 00:07:08,950
prevents an extremely nice race

162
00:07:05,560 --> 00:07:11,710
condition from happening<font color="#E5E5E5"> but which if it</font>

163
00:07:08,950 --> 00:07:14,770
does happen<font color="#E5E5E5"> knocks their</font><font color="#CCCCCC"> box offline</font>

164
00:07:11,710 --> 00:07:15,909
which isn't really<font color="#E5E5E5"> fun for anyone as a</font>

165
00:07:14,770 --> 00:07:17,380
<font color="#E5E5E5">red team you're</font><font color="#CCCCCC"> a part of</font><font color="#E5E5E5"> the learning</font>

166
00:07:15,910 --> 00:07:18,730
<font color="#CCCCCC">experience you're not there to be a</font>

167
00:07:17,380 --> 00:07:20,890
bully<font color="#E5E5E5"> you're there to help them learn</font>

168
00:07:18,730 --> 00:07:23,230
<font color="#CCCCCC">and it's extremely extremely extremely</font>

169
00:07:20,890 --> 00:07:26,020
disappointing<font color="#E5E5E5"> when your box just stock</font>

170
00:07:23,230 --> 00:07:28,060
starts stopping every time you try<font color="#CCCCCC"> and</font>

171
00:07:26,020 --> 00:07:29,409
do<font color="#E5E5E5"> something and you're not going to</font>

172
00:07:28,060 --> 00:07:32,620
learn<font color="#CCCCCC"> a whole lot</font><font color="#E5E5E5"> from that you're just</font>

173
00:07:29,410 --> 00:07:34,210
<font color="#E5E5E5">gonna get sad and probably leave so</font>

174
00:07:32,620 --> 00:07:40,300
we're trying<font color="#CCCCCC"> really hard to</font><font color="#E5E5E5"> avoid that</font>

175
00:07:34,210 --> 00:07:42,580
<font color="#E5E5E5">which is why we're</font><font color="#CCCCCC"> doing that so are you</font>

176
00:07:40,300 --> 00:07:45,850
guys tracking did I lose<font color="#E5E5E5"> anyone about</font>

177
00:07:42,580 --> 00:07:47,440
what's happening if I lost you it's okay

178
00:07:45,850 --> 00:07:48,790
we're about to have<font color="#E5E5E5"> some pictures which</font>

179
00:07:47,440 --> 00:07:51,969
I think will<font color="#E5E5E5"> help describe this a little</font>

180
00:07:48,790 --> 00:07:54,100
bit better so here's a standard

181
00:07:51,970 --> 00:07:58,180
implementation you have the<font color="#E5E5E5"> system</font><font color="#CCCCCC"> call</font>

182
00:07:54,100 --> 00:07:59,100
table and it<font color="#E5E5E5"> hijacks the pointer to our</font>

183
00:07:58,180 --> 00:08:02,410
evil right

184
00:07:59,100 --> 00:08:04,210
once<font color="#CCCCCC"> they're after they call right we</font>

185
00:08:02,410 --> 00:08:10,180
get execution because<font color="#CCCCCC"> the pointer is</font>

186
00:08:04,210 --> 00:08:12,849
overwriting it now here's what<font color="#CCCCCC"> goof kit</font>

187
00:08:10,180 --> 00:08:15,490
does instead<font color="#E5E5E5"> of hijacking the pointer we</font>

188
00:08:12,850 --> 00:08:18,070
leave it<font color="#E5E5E5"> alone and instead we inject our</font>

189
00:08:15,490 --> 00:08:20,950
malicious jump right<font color="#E5E5E5"> there</font><font color="#CCCCCC"> in the red</font>

190
00:08:18,070 --> 00:08:22,870
box<font color="#E5E5E5"> and that'll jump to the kernel</font>

191
00:08:20,950 --> 00:08:25,300
module<font color="#E5E5E5"> that we've</font><font color="#CCCCCC"> loaded we do some</font>

192
00:08:22,870 --> 00:08:27,550
execution bits<font color="#E5E5E5"> if we need to call the</font>

193
00:08:25,300 --> 00:08:29,610
<font color="#CCCCCC">original code we jump to the trampoline</font>

194
00:08:27,550 --> 00:08:32,620
<font color="#CCCCCC">which is the original code we saved and</font>

195
00:08:29,610 --> 00:08:34,480
then at the<font color="#CCCCCC"> end of that</font><font color="#E5E5E5"> we return into</font>

196
00:08:32,620 --> 00:08:36,429
evil function and then jump back to<font color="#E5E5E5"> the</font>

197
00:08:34,480 --> 00:08:40,080
<font color="#E5E5E5">original code which is why it's a</font>

198
00:08:36,429 --> 00:08:40,079
trampoline<font color="#CCCCCC"> you bounced around a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> so</font>

199
00:08:41,789 --> 00:08:48,910
<font color="#CCCCCC">there are a</font><font color="#E5E5E5"> few things in place that you</font>

200
00:08:44,500 --> 00:08:50,110
have<font color="#E5E5E5"> to overcome in order to actually do</font>

201
00:08:48,910 --> 00:08:52,300
a rootkit<font color="#CCCCCC"> and the first one is you have</font>

202
00:08:50,110 --> 00:08:55,270
<font color="#CCCCCC">to</font><font color="#E5E5E5"> find the system</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> table every</font>

203
00:08:52,300 --> 00:08:56,979
kernel after<font color="#E5E5E5"> your</font><font color="#CCCCCC"> two has</font>

204
00:08:55,270 --> 00:08:59,970
stopped exporting the actual and

205
00:08:56,980 --> 00:09:02,470
external table<font color="#E5E5E5"> the system call table</font>

206
00:08:59,970 --> 00:09:04,720
<font color="#E5E5E5">they used to just have it exported so</font>

207
00:09:02,470 --> 00:09:09,779
you could just<font color="#CCCCCC"> call like system call</font>

208
00:09:04,720 --> 00:09:11,920
table entry<font color="#CCCCCC"> to or entry</font><font color="#E5E5E5"> 3 and get right</font>

209
00:09:09,779 --> 00:09:14,170
but<font color="#E5E5E5"> people are abusing it and writing</font>

210
00:09:11,920 --> 00:09:16,329
<font color="#E5E5E5">rootkits for it</font><font color="#CCCCCC"> so they</font><font color="#E5E5E5"> stopped</font><font color="#CCCCCC"> doing</font>

211
00:09:14,170 --> 00:09:18,490
<font color="#E5E5E5">that</font><font color="#CCCCCC"> they didn't do a</font><font color="#E5E5E5"> very good job</font>

212
00:09:16,330 --> 00:09:20,200
<font color="#CCCCCC">protecting it though kernel space</font><font color="#E5E5E5"> is</font>

213
00:09:18,490 --> 00:09:23,589
<font color="#E5E5E5">pretty limited</font><font color="#CCCCCC"> so if you want to find it</font>

214
00:09:20,200 --> 00:09:27,730
<font color="#CCCCCC">you just have</font><font color="#E5E5E5"> to search all the kernel</font>

215
00:09:23,589 --> 00:09:29,860
memory<font color="#E5E5E5"> you take a known value like sis</font>

216
00:09:27,730 --> 00:09:32,520
close and you search<font color="#CCCCCC"> for</font><font color="#E5E5E5"> it in the</font>

217
00:09:29,860 --> 00:09:35,380
kernel table once you find it you<font color="#CCCCCC"> know</font>

218
00:09:32,520 --> 00:09:37,449
this<font color="#E5E5E5"> one's sis close I'll back up</font><font color="#CCCCCC"> 3</font>

219
00:09:35,380 --> 00:09:39,070
entries<font color="#E5E5E5"> and also started my system call</font>

220
00:09:37,450 --> 00:09:40,990
table and so that's what we're<font color="#E5E5E5"> doing</font>

221
00:09:39,070 --> 00:09:42,790
<font color="#CCCCCC">right here this</font><font color="#E5E5E5"> is what a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> root</font>

222
00:09:40,990 --> 00:09:45,430
<font color="#E5E5E5">kits do there's other ways to</font><font color="#CCCCCC"> do it</font><font color="#E5E5E5"> but</font>

223
00:09:42,790 --> 00:09:51,069
<font color="#E5E5E5">this is by and far</font><font color="#CCCCCC"> the simplest and most</font>

224
00:09:45,430 --> 00:09:52,420
common<font color="#CCCCCC"> way to do it so now that we've</font>

225
00:09:51,070 --> 00:09:54,339
<font color="#E5E5E5">actually found our system call table</font>

226
00:09:52,420 --> 00:09:59,770
<font color="#E5E5E5">we're going to do an actual hook for it</font>

227
00:09:54,339 --> 00:10:02,680
so here's our malicious jump and here's

228
00:09:59,770 --> 00:10:06,089
our<font color="#E5E5E5"> og code back here we copy out the og</font>

229
00:10:02,680 --> 00:10:09,370
code copy over are malicious jump and

230
00:10:06,089 --> 00:10:12,070
then we build a trampoline<font color="#E5E5E5"> from the og</font>

231
00:10:09,370 --> 00:10:17,040
code and a template<font color="#CCCCCC"> of our jump so that</font>

232
00:10:12,070 --> 00:10:19,480
<font color="#CCCCCC">we can so we hook the function initially</font>

233
00:10:17,040 --> 00:10:22,029
we jump to our malicious code which is

234
00:10:19,480 --> 00:10:23,920
out there when<font color="#CCCCCC"> we want to call the</font>

235
00:10:22,029 --> 00:10:26,350
<font color="#E5E5E5">original function we just</font><font color="#CCCCCC"> have to call</font>

236
00:10:23,920 --> 00:10:29,579
the<font color="#E5E5E5"> function pointer for the trampoline</font>

237
00:10:26,350 --> 00:10:31,810
which will execute jump back to<font color="#CCCCCC"> the</font>

238
00:10:29,579 --> 00:10:40,359
original system<font color="#E5E5E5"> call and complete</font>

239
00:10:31,810 --> 00:10:44,109
<font color="#CCCCCC">execution there yep so this is the in</font>

240
00:10:40,360 --> 00:10:46,510
line hooking<font color="#CCCCCC"> and trampolining</font><font color="#E5E5E5"> there are</font>

241
00:10:44,110 --> 00:10:50,130
some protections<font color="#CCCCCC"> like</font><font color="#E5E5E5"> the CR</font><font color="#CCCCCC"> zero bit</font>

242
00:10:46,510 --> 00:10:54,010
which prevents writing to the kernel

243
00:10:50,130 --> 00:10:57,100
which<font color="#E5E5E5"> is really great the bypass for it</font>

244
00:10:54,010 --> 00:10:59,380
is to turn it off all<font color="#E5E5E5"> you have to do is</font>

245
00:10:57,100 --> 00:11:01,750
you<font color="#E5E5E5"> write to the</font><font color="#CCCCCC"> sixteenth fit in the CR</font>

246
00:10:59,380 --> 00:11:06,850
zero register<font color="#CCCCCC"> sided toin you say allow</font>

247
00:11:01,750 --> 00:11:07,779
execution<font color="#E5E5E5"> to disable it you</font><font color="#CCCCCC"> undo it so</font>

248
00:11:06,850 --> 00:11:09,100
that's all<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> doing when we're</font>

249
00:11:07,779 --> 00:11:14,320
writing to<font color="#CCCCCC"> the actual</font>

250
00:11:09,100 --> 00:11:16,510
colonel<font color="#E5E5E5"> and after that this is</font><font color="#CCCCCC"> what our</font>

251
00:11:14,320 --> 00:11:22,390
code looks like<font color="#E5E5E5"> after that runs so we</font>

252
00:11:16,510 --> 00:11:23,500
have our initial hook again<font color="#E5E5E5"> jump back so</font>

253
00:11:22,390 --> 00:11:25,120
once<font color="#E5E5E5"> you poach something there's kind of</font>

254
00:11:23,500 --> 00:11:27,820
two<font color="#E5E5E5"> things you'll do you're either going</font>

255
00:11:25,120 --> 00:11:31,000
to do<font color="#CCCCCC"> before you call the original</font>

256
00:11:27,820 --> 00:11:33,190
<font color="#E5E5E5">function or after you can just never</font>

257
00:11:31,000 --> 00:11:35,470
call the original<font color="#E5E5E5"> function</font><font color="#CCCCCC"> - but that's</font>

258
00:11:33,190 --> 00:11:37,780
super<font color="#CCCCCC"> suspicious</font><font color="#E5E5E5"> but that would</font><font color="#CCCCCC"> be a way</font>

259
00:11:35,470 --> 00:11:39,640
to break<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> so like one</font><font color="#E5E5E5"> thing you</font>

260
00:11:37,780 --> 00:11:41,920
might do if you're<font color="#E5E5E5"> doing like</font><font color="#CCCCCC"> a octal</font>

261
00:11:39,640 --> 00:11:44,140
stuff<font color="#E5E5E5"> you really</font><font color="#CCCCCC"> need something to work</font>

262
00:11:41,920 --> 00:11:45,670
you can<font color="#E5E5E5"> just hard code</font><font color="#CCCCCC"> I octal values</font>

263
00:11:44,140 --> 00:11:50,140
<font color="#E5E5E5">and usually if you</font><font color="#CCCCCC"> just return zero</font>

264
00:11:45,670 --> 00:11:51,729
<font color="#E5E5E5">something will work it when you get into</font>

265
00:11:50,140 --> 00:11:55,050
<font color="#E5E5E5">more complicated</font><font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> it stops working</font>

266
00:11:51,730 --> 00:11:57,310
as well<font color="#CCCCCC"> but zero is</font><font color="#E5E5E5"> a good return value</font>

267
00:11:55,050 --> 00:11:58,599
<font color="#E5E5E5">but for this I did it you name so this</font>

268
00:11:57,310 --> 00:12:01,689
<font color="#CCCCCC">was the</font><font color="#E5E5E5"> first one</font><font color="#CCCCCC"> I wrote just</font><font color="#E5E5E5"> cuz it</font>

269
00:11:58,600 --> 00:12:04,240
was super simple<font color="#CCCCCC"> all we're doing here is</font>

270
00:12:01,690 --> 00:12:07,390
we<font color="#CCCCCC"> are running the original function we</font>

271
00:12:04,240 --> 00:12:09,490
get the file<font color="#CCCCCC"> struck</font><font color="#E5E5E5"> the struck UTS name</font>

272
00:12:07,390 --> 00:12:11,530
from running the original code right

273
00:12:09,490 --> 00:12:16,260
<font color="#CCCCCC">here which</font><font color="#E5E5E5"> is our this</font><font color="#CCCCCC"> is our function</font>

274
00:12:11,530 --> 00:12:19,410
<font color="#E5E5E5">pointer we run it here it creates this</font>

275
00:12:16,260 --> 00:12:22,660
<font color="#E5E5E5">buff and then we modify the system</font>

276
00:12:19,410 --> 00:12:25,270
variable so that we change it from<font color="#CCCCCC"> Linux</font>

277
00:12:22,660 --> 00:12:26,530
to a class so if you're<font color="#E5E5E5"> running Linux</font>

278
00:12:25,270 --> 00:12:32,640
<font color="#E5E5E5">and you see</font><font color="#CCCCCC"> macca</font><font color="#E5E5E5"> less when</font><font color="#CCCCCC"> you're on</font>

279
00:12:26,530 --> 00:12:37,870
you name probably<font color="#CCCCCC"> something</font><font color="#E5E5E5"> wrong and</font>

280
00:12:32,640 --> 00:12:38,949
then the other side is we do who the

281
00:12:37,870 --> 00:12:40,320
malicious stuff before<font color="#CCCCCC"> we call the</font>

282
00:12:38,950 --> 00:12:44,020
<font color="#CCCCCC">original function so</font><font color="#E5E5E5"> like with kill</font>

283
00:12:40,320 --> 00:12:46,750
sorry<font color="#E5E5E5"> with yeah so with our kill signal</font>

284
00:12:44,020 --> 00:12:49,180
<font color="#E5E5E5">handler</font><font color="#CCCCCC"> this is how we tell it which</font>

285
00:12:46,750 --> 00:12:55,540
<font color="#E5E5E5">processes to hide and whether to reveal</font>

286
00:12:49,180 --> 00:12:58,180
itself or<font color="#E5E5E5"> not what we do here is we read</font>

287
00:12:55,540 --> 00:13:00,579
the input<font color="#E5E5E5"> so we check the process ID and</font>

288
00:12:58,180 --> 00:13:02,770
which signal is being sent and then we

289
00:13:00,580 --> 00:13:04,930
see<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> this is one of</font><font color="#E5E5E5"> our control</font>

290
00:13:02,770 --> 00:13:07,750
signals<font color="#CCCCCC"> we're gonna</font><font color="#E5E5E5"> handle it in a</font>

291
00:13:04,930 --> 00:13:10,839
special<font color="#CCCCCC"> way if it's the</font><font color="#E5E5E5"> process hide</font>

292
00:13:07,750 --> 00:13:12,790
<font color="#E5E5E5">it'll find the process modify it and</font>

293
00:13:10,840 --> 00:13:16,810
then it'll go back<font color="#CCCCCC"> to normal kill</font>

294
00:13:12,790 --> 00:13:19,209
execution<font color="#CCCCCC"> if it's not one of our special</font>

295
00:13:16,810 --> 00:13:22,260
signals then we<font color="#E5E5E5"> just let it go</font><font color="#CCCCCC"> and</font>

296
00:13:19,210 --> 00:13:22,260
nobody<font color="#E5E5E5"> notices</font>

297
00:13:22,440 --> 00:13:27,810
so like<font color="#E5E5E5"> I talked about</font><font color="#CCCCCC"> there's some</font>

298
00:13:24,660 --> 00:13:30,689
protections involved<font color="#E5E5E5"> the system call</font>

299
00:13:27,810 --> 00:13:32,339
table not being exported<font color="#E5E5E5"> right here this</font>

300
00:13:30,690 --> 00:13:35,490
<font color="#E5E5E5">is</font><font color="#CCCCCC"> how we</font><font color="#E5E5E5"> get around that by brute</font>

301
00:13:32,339 --> 00:13:39,060
<font color="#E5E5E5">forcing there is do you all know what</font><font color="#CCCCCC"> a</font>

302
00:13:35,490 --> 00:13:42,110
SLR<font color="#E5E5E5"> is so the</font><font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> has its own version</font>

303
00:13:39,060 --> 00:13:43,920
called<font color="#CCCCCC"> kaa SLR she took me by surprise</font>

304
00:13:42,110 --> 00:13:46,740
<font color="#E5E5E5">because</font><font color="#CCCCCC"> I was trying to</font><font color="#E5E5E5"> load it into</font>

305
00:13:43,920 --> 00:13:47,969
<font color="#CCCCCC">like a</font><font color="#E5E5E5"> bunch of 1804 and everything was</font>

306
00:13:46,740 --> 00:13:49,680
<font color="#E5E5E5">just</font><font color="#CCCCCC"> being</font><font color="#E5E5E5"> scattered everywhere and I</font>

307
00:13:47,970 --> 00:13:51,540
didn't know what was<font color="#E5E5E5"> happening</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> started</font>

308
00:13:49,680 --> 00:13:54,920
<font color="#E5E5E5">googling I found out about KS law</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I</font>

309
00:13:51,540 --> 00:13:58,740
was like oh well yeah<font color="#E5E5E5"> that checks out</font>

310
00:13:54,920 --> 00:13:59,639
<font color="#CCCCCC">but again</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> not too hard to set</font>

311
00:13:58,740 --> 00:14:02,430
<font color="#CCCCCC">turn-off</font>

312
00:13:59,639 --> 00:14:05,389
all you have to<font color="#E5E5E5"> do is set</font><font color="#CCCCCC"> the no ka SLR</font>

313
00:14:02,430 --> 00:14:07,979
flag on boot and then reboot the system

314
00:14:05,389 --> 00:14:10,589
<font color="#CCCCCC">not great for like advanced persistent</font>

315
00:14:07,980 --> 00:14:14,939
threat actors<font color="#E5E5E5"> but for a college</font>

316
00:14:10,589 --> 00:14:16,620
competition that's fine<font color="#CCCCCC"> module sig in</font>

317
00:14:14,939 --> 00:14:18,899
force<font color="#E5E5E5"> so this is probably the best way</font>

318
00:14:16,620 --> 00:14:21,389
to prevent<font color="#E5E5E5"> rootkits</font><font color="#CCCCCC"> is just to turn on</font>

319
00:14:18,899 --> 00:14:25,259
signing enforcement<font color="#CCCCCC"> SuperDuper hard to</font>

320
00:14:21,389 --> 00:14:27,120
fake a signed<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> as a sign kernel</font>

321
00:14:25,259 --> 00:14:30,779
module<font color="#CCCCCC"> it's not really</font><font color="#E5E5E5"> like something</font>

322
00:14:27,120 --> 00:14:33,800
you see happen that's<font color="#E5E5E5"> what this does is</font>

323
00:14:30,779 --> 00:14:37,860
it's<font color="#CCCCCC"> just enforcing</font><font color="#E5E5E5"> signed enforcement</font>

324
00:14:33,800 --> 00:14:39,630
it is<font color="#E5E5E5"> turning on signing enforcement so</font>

325
00:14:37,860 --> 00:14:42,470
your kernel module needs<font color="#E5E5E5"> to be signed</font>

326
00:14:39,630 --> 00:14:44,699
before it can get<font color="#E5E5E5"> loaded into the car</font>

327
00:14:42,470 --> 00:14:46,079
there's a few<font color="#E5E5E5"> ways</font><font color="#CCCCCC"> to prevent blue</font>

328
00:14:44,699 --> 00:14:47,849
<font color="#E5E5E5">team's from doing this one of the ways</font>

329
00:14:46,079 --> 00:14:49,589
<font color="#E5E5E5">we do it is we just don't let them write</font>

330
00:14:47,850 --> 00:14:52,620
to the file<font color="#E5E5E5"> that would allow them</font><font color="#CCCCCC"> to do</font>

331
00:14:49,589 --> 00:14:54,180
this it's<font color="#E5E5E5"> super obvious because they'll</font>

332
00:14:52,620 --> 00:14:55,800
say like<font color="#E5E5E5"> permission denied permission</font>

333
00:14:54,180 --> 00:14:57,089
denied permission denied and you're like

334
00:14:55,800 --> 00:14:59,479
I'm<font color="#CCCCCC"> running his route there's no</font><font color="#E5E5E5"> I see</font>

335
00:14:57,089 --> 00:15:01,470
Linux permission denied

336
00:14:59,480 --> 00:15:05,480
but they still can't do<font color="#E5E5E5"> anything about</font>

337
00:15:01,470 --> 00:15:09,240
it<font color="#E5E5E5"> because what are they</font><font color="#CCCCCC"> going to do</font><font color="#E5E5E5"> and</font>

338
00:15:05,480 --> 00:15:13,550
then yep here's our<font color="#CCCCCC"> CIO</font><font color="#E5E5E5"> zero bit right</font>

339
00:15:09,240 --> 00:15:17,370
here<font color="#E5E5E5"> here you can see us disabling the</font>

340
00:15:13,550 --> 00:15:22,680
<font color="#CCCCCC">write protection</font><font color="#E5E5E5"> and that's the little</font>

341
00:15:17,370 --> 00:15:24,199
Wikipedia article talking<font color="#CCCCCC"> about it so</font>

342
00:15:22,680 --> 00:15:26,849
recap<font color="#E5E5E5"> this is a super</font><font color="#CCCCCC"> duper</font>

343
00:15:24,199 --> 00:15:30,870
<font color="#E5E5E5">over-engineered solution to getting</font>

344
00:15:26,850 --> 00:15:34,139
persistence on college students boxes we

345
00:15:30,870 --> 00:15:36,750
didn't have to do this<font color="#CCCCCC"> there's really no</font>

346
00:15:34,139 --> 00:15:39,270
reason<font color="#E5E5E5"> we should have done it this</font><font color="#CCCCCC"> way</font>

347
00:15:36,750 --> 00:15:42,350
<font color="#CCCCCC">I thought it was cool and so I did it</font>

348
00:15:39,270 --> 00:15:44,250
<font color="#E5E5E5">and that's</font><font color="#CCCCCC"> about it</font>

349
00:15:42,350 --> 00:15:46,020
there's a really<font color="#CCCCCC"> cool problem</font><font color="#E5E5E5"> to solve</font>

350
00:15:44,250 --> 00:15:48,870
<font color="#CCCCCC">we did some like inline</font><font color="#E5E5E5"> assembly</font>

351
00:15:46,020 --> 00:15:50,730
disassembly in the kernel to figure out

352
00:15:48,870 --> 00:15:53,970
where<font color="#CCCCCC"> all</font><font color="#E5E5E5"> the instructions need</font><font color="#CCCCCC"> to line</font>

353
00:15:50,730 --> 00:15:57,060
up<font color="#CCCCCC"> and all the trampolining it's a</font><font color="#E5E5E5"> super</font>

354
00:15:53,970 --> 00:15:59,370
<font color="#E5E5E5">fun project</font><font color="#CCCCCC"> again not super applicable</font>

355
00:15:57,060 --> 00:16:01,050
<font color="#E5E5E5">or super</font><font color="#CCCCCC"> reasonable solution for college</font>

356
00:15:59,370 --> 00:16:04,850
students<font color="#E5E5E5"> but it was fun</font><font color="#CCCCCC"> to solve</font><font color="#E5E5E5"> these</font>

357
00:16:01,050 --> 00:16:08,209
problems<font color="#E5E5E5"> yeah</font>

358
00:16:04,850 --> 00:16:11,510
<font color="#E5E5E5">then</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> have questions</font><font color="#CCCCCC"> or comments</font>

359
00:16:08,210 --> 00:16:11,510
<font color="#E5E5E5">sure what's up</font>

360
00:16:13,670 --> 00:16:29,219
<font color="#CCCCCC">DDS oh I don't know what that is</font><font color="#E5E5E5"> oh</font><font color="#CCCCCC"> are</font>

361
00:16:28,410 --> 00:16:33,150
you talking<font color="#E5E5E5"> about like it'll do you</font>

362
00:16:29,220 --> 00:16:40,230
preload<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I don't</font>

363
00:16:33,150 --> 00:16:41,370
oh no<font color="#E5E5E5"> probably not</font>

364
00:16:40,230 --> 00:16:49,279
because I didn't know what<font color="#E5E5E5"> that is</font>

365
00:16:41,370 --> 00:16:54,110
<font color="#CCCCCC">that's really cool I haven't</font><font color="#E5E5E5"> tried</font><font color="#CCCCCC"> it'd</font>

366
00:16:49,279 --> 00:16:57,000
<font color="#E5E5E5">be interesting</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> try out</font><font color="#CCCCCC"> I don't know I</font>

367
00:16:54,110 --> 00:16:59,130
don't<font color="#CCCCCC"> know enough about fuse to tell you</font>

368
00:16:57,000 --> 00:17:00,360
whether it should or<font color="#E5E5E5"> should not have</font><font color="#CCCCCC"> a</font>

369
00:16:59,130 --> 00:17:22,589
<font color="#E5E5E5">problem</font><font color="#CCCCCC"> but it'd be</font><font color="#E5E5E5"> an interesting thing</font>

370
00:17:00,360 --> 00:17:27,319
to<font color="#E5E5E5"> try out are you saying statically</font>

371
00:17:22,589 --> 00:17:27,319
compiled to not allow<font color="#CCCCCC"> boot Flags</font><font color="#E5E5E5"> or I</font>

372
00:17:34,040 --> 00:17:41,970
have not<font color="#E5E5E5"> so actually the way</font><font color="#CCCCCC"> to get</font>

373
00:17:38,370 --> 00:17:44,060
around<font color="#E5E5E5"> unsigned kernel modules that</font>

374
00:17:41,970 --> 00:17:47,220
prevent you from<font color="#E5E5E5"> writing is to boot into</font>

375
00:17:44,060 --> 00:17:49,050
your<font color="#CCCCCC"> BIOS</font><font color="#E5E5E5"> or to boot to grub and then</font>

376
00:17:47,220 --> 00:17:49,380
modify<font color="#CCCCCC"> it there and</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> just have</font><font color="#E5E5E5"> to do</font>

377
00:17:49,050 --> 00:17:52,290
that

378
00:17:49,380 --> 00:17:53,610
every time you reboot<font color="#CCCCCC"> because you can't</font>

379
00:17:52,290 --> 00:17:56,370
<font color="#CCCCCC">actually modify it while the system's</font>

380
00:17:53,610 --> 00:17:58,050
<font color="#CCCCCC">running so</font><font color="#E5E5E5"> you have to boot in</font><font color="#CCCCCC"> - you</font>

381
00:17:56,370 --> 00:18:02,760
could live boot and modify this file

382
00:17:58,050 --> 00:18:09,960
there or do it<font color="#E5E5E5"> in the grub config anyone</font>

383
00:18:02,760 --> 00:18:11,850
<font color="#E5E5E5">else have questions so yep so this is</font>

384
00:18:09,960 --> 00:18:13,710
for the Linux kernel specifically it

385
00:18:11,850 --> 00:18:17,550
targets<font color="#CCCCCC"> oh sorry</font>

386
00:18:13,710 --> 00:18:20,820
yep<font color="#E5E5E5"> so Jake asked what kinds of kernels</font>

387
00:18:17,550 --> 00:18:23,370
does this<font color="#E5E5E5"> specifically target</font><font color="#CCCCCC"> we're</font>

388
00:18:20,820 --> 00:18:27,899
targeting the Lynx kernel<font color="#E5E5E5"> it's been</font>

389
00:18:23,370 --> 00:18:30,540
tested<font color="#CCCCCC"> on some versions of four and some</font>

390
00:18:27,900 --> 00:18:32,040
<font color="#E5E5E5">versions of three</font><font color="#CCCCCC"> it's on the github if</font>

391
00:18:30,540 --> 00:18:35,399
you want to check<font color="#E5E5E5"> out exactly which</font>

392
00:18:32,040 --> 00:18:37,710
versions are supported but that's my

393
00:18:35,400 --> 00:18:39,620
project<font color="#CCCCCC"> right now is one figuring out</font>

394
00:18:37,710 --> 00:18:41,940
which versions are supported and then to

395
00:18:39,620 --> 00:18:53,030
adding<font color="#CCCCCC"> more support</font><font color="#E5E5E5"> because there's a</font>

396
00:18:41,940 --> 00:18:53,030
few<font color="#E5E5E5"> things that still break</font><font color="#CCCCCC"> anyone okay</font>

397
00:18:53,840 --> 00:18:57,959
<font color="#CCCCCC">so this one</font><font color="#E5E5E5"> I've been working on and off</font>

398
00:18:56,370 --> 00:19:00,629
for about a year

399
00:18:57,960 --> 00:19:03,570
I'm kind of<font color="#E5E5E5"> excited</font><font color="#CCCCCC"> to be somewhat done</font>

400
00:19:00,630 --> 00:19:11,370
with it<font color="#CCCCCC"> I have a lot of</font><font color="#E5E5E5"> projects I want</font>

401
00:19:03,570 --> 00:19:12,810
to move on to now yeah yeah so should

402
00:19:11,370 --> 00:19:15,270
competitors expect to see this an

403
00:19:12,810 --> 00:19:25,280
upcoming event<font color="#CCCCCC"> yeah if I'm ready teaming</font>

404
00:19:15,270 --> 00:19:25,280
you<font color="#E5E5E5"> it might come up yep</font>

405
00:19:28,170 --> 00:19:31,880
where do I see<font color="#CCCCCC"> root kits and stuff where</font>

406
00:19:43,100 --> 00:19:47,790
okay so the<font color="#CCCCCC"> question was where are root</font>

407
00:19:46,080 --> 00:19:51,030
kits going<font color="#CCCCCC"> in the future</font><font color="#E5E5E5"> how do I think</font>

408
00:19:47,790 --> 00:19:52,350
<font color="#E5E5E5">they're going to</font><font color="#CCCCCC"> change</font><font color="#E5E5E5"> where I want to</font>

409
00:19:51,030 --> 00:19:54,090
<font color="#E5E5E5">take this is I want to move it away from</font>

410
00:19:52,350 --> 00:19:57,060
<font color="#CCCCCC">a lot of</font><font color="#E5E5E5"> the detection mechanisms that</font>

411
00:19:54,090 --> 00:19:59,100
currently<font color="#E5E5E5"> work</font><font color="#CCCCCC"> so usually the way you</font>

412
00:19:57,060 --> 00:20:00,780
detect a rootkit<font color="#CCCCCC"> is through process</font>

413
00:19:59,100 --> 00:20:02,520
hiding so if they're<font color="#E5E5E5"> hiding a process or</font>

414
00:20:00,780 --> 00:20:05,639
the kernel module you<font color="#CCCCCC"> can detect</font><font color="#E5E5E5"> that</font>

415
00:20:02,520 --> 00:20:07,830
because when you hide a process you're

416
00:20:05,640 --> 00:20:09,860
usually<font color="#CCCCCC"> hiding it from get dense and so</font>

417
00:20:07,830 --> 00:20:13,320
you<font color="#E5E5E5"> just have to</font><font color="#CCCCCC"> iterate through</font><font color="#E5E5E5"> and</font>

418
00:20:09,860 --> 00:20:15,270
check<font color="#CCCCCC"> for known files in each process</font><font color="#E5E5E5"> in</font>

419
00:20:13,320 --> 00:20:16,560
the<font color="#E5E5E5"> process ID space is relatively small</font>

420
00:20:15,270 --> 00:20:19,590
<font color="#E5E5E5">so it's easy</font><font color="#CCCCCC"> for a tool</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> brute force</font>

421
00:20:16,560 --> 00:20:21,570
that and if get dense doesn't show

422
00:20:19,590 --> 00:20:23,909
something but the tool detects something

423
00:20:21,570 --> 00:20:27,810
<font color="#E5E5E5">by</font><font color="#CCCCCC"> doing like F stat on</font><font color="#E5E5E5"> slash proc</font>

424
00:20:23,910 --> 00:20:29,490
process ID slash like file descriptor

425
00:20:27,810 --> 00:20:33,000
slash<font color="#E5E5E5"> one and it's checking if that</font>

426
00:20:29,490 --> 00:20:34,860
exists<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it should exist you'll</font>

427
00:20:33,000 --> 00:20:37,770
<font color="#E5E5E5">run into a lot of problems</font><font color="#CCCCCC"> where they'll</font>

428
00:20:34,860 --> 00:20:38,729
<font color="#CCCCCC">just see</font><font color="#E5E5E5"> oh yep Compton's hidden this is</font>

429
00:20:37,770 --> 00:20:41,580
bad

430
00:20:38,730 --> 00:20:43,620
<font color="#E5E5E5">also volatility supports has a tool</font>

431
00:20:41,580 --> 00:20:46,530
where you<font color="#CCCCCC"> can load in a volatility</font>

432
00:20:43,620 --> 00:20:48,479
<font color="#CCCCCC">kernel module and just see like who's</font>

433
00:20:46,530 --> 00:20:49,800
hiding<font color="#E5E5E5"> from the kernel module list</font>

434
00:20:48,480 --> 00:20:51,840
<font color="#CCCCCC">because the way you hide yourself from</font>

435
00:20:49,800 --> 00:20:55,080
<font color="#CCCCCC">the list</font><font color="#E5E5E5"> of kernel modules is you unlink</font>

436
00:20:51,840 --> 00:20:56,340
yourself from a linked<font color="#CCCCCC"> list and so they</font>

437
00:20:55,080 --> 00:21:01,129
<font color="#CCCCCC">just iterate through and they check for</font>

438
00:20:56,340 --> 00:21:08,418
<font color="#CCCCCC">gaps all right cool thank you all</font>

439
00:21:01,130 --> 00:21:08,419
[Applause]

