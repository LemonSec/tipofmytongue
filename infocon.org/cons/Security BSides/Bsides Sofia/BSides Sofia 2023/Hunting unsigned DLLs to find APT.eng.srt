1
00:00:02,159 --> 00:00:05,159
foreign

2
00:00:10,340 --> 00:00:13,019
thank you for joining the session I'm

3
00:00:13,019 --> 00:00:15,780
very excited to be here by the way any

4
00:00:15,780 --> 00:00:19,380
threat hunters in the audience

5
00:00:19,380 --> 00:00:21,840
okay so by the end of this session all

6
00:00:21,840 --> 00:00:24,859
of you will be

7
00:00:25,199 --> 00:00:27,060
okay so

8
00:00:27,060 --> 00:00:30,060
um before starting to talk about some

9
00:00:30,060 --> 00:00:32,098
cyber stuff

10
00:00:32,098 --> 00:00:35,460
um by the way spoiler to our topic you

11
00:00:35,460 --> 00:00:37,860
can see here behind we're going to talk

12
00:00:37,860 --> 00:00:41,640
about some very easy way to find a very

13
00:00:41,640 --> 00:00:43,800
sophisticated threat actors

14
00:00:43,800 --> 00:00:46,800
but before going to talk about cyber

15
00:00:46,800 --> 00:00:49,440
stuff I will introduce myself

16
00:00:49,440 --> 00:00:52,140
so I couldn't think about more expected

17
00:00:52,140 --> 00:00:55,199
heading other than who am I so this is

18
00:00:55,199 --> 00:00:57,899
what we've got my name is Daniela chalev

19
00:00:57,899 --> 00:00:59,760
I'm a threat hunter in Palo Alto

20
00:00:59,760 --> 00:01:03,059
networks I'm 24 years old and I came

21
00:01:03,059 --> 00:01:04,860
here from Israel

22
00:01:04,860 --> 00:01:07,979
I have been in the security industry for

23
00:01:07,979 --> 00:01:11,100
about six years started my way in the

24
00:01:11,100 --> 00:01:13,200
military service I was a security

25
00:01:13,200 --> 00:01:16,200
researcher in the Israeli Navy and then

26
00:01:16,200 --> 00:01:18,240
I came to Palo Alto

27
00:01:18,240 --> 00:01:22,680
addicted to avocado and to my dog Camila

28
00:01:22,680 --> 00:01:26,340
and in my daily job I do hunting across

29
00:01:26,340 --> 00:01:28,920
customers environments looking for known

30
00:01:28,920 --> 00:01:32,280
malware patterns doing research about

31
00:01:32,280 --> 00:01:35,040
apt groups and their evolvement over the

32
00:01:35,040 --> 00:01:37,860
years and if we find something malicious

33
00:01:37,860 --> 00:01:42,299
we do a deep dive investigation this can

34
00:01:42,299 --> 00:01:45,000
be resulted in some blog posts or some

35
00:01:45,000 --> 00:01:47,340
tweets on Twitter

36
00:01:47,340 --> 00:01:51,060
and today we're going to talk about some

37
00:01:51,060 --> 00:01:54,180
really cool research that we did over

38
00:01:54,180 --> 00:01:55,640
the past year

39
00:01:55,640 --> 00:01:59,759
so I'm sure that once all of you set in

40
00:01:59,759 --> 00:02:02,579
your home in a nice evening drinking

41
00:02:02,579 --> 00:02:05,520
wine and thinking how can I catch a

42
00:02:05,520 --> 00:02:08,220
threat actor well who didn't

43
00:02:08,220 --> 00:02:12,780
I did so I came to give you um some tips

44
00:02:12,780 --> 00:02:14,040
so

45
00:02:14,040 --> 00:02:16,140
um we decided to conduct the research

46
00:02:16,140 --> 00:02:18,379
based on various attacks that we

47
00:02:18,379 --> 00:02:21,540
investigated over the past year where we

48
00:02:21,540 --> 00:02:24,239
found one thing that was mostly used by

49
00:02:24,239 --> 00:02:26,760
attackers and this is the loading of a

50
00:02:26,760 --> 00:02:28,140
dll

51
00:02:28,140 --> 00:02:31,620
so um while dll files are being used in

52
00:02:31,620 --> 00:02:34,680
a legitimate way all the times as a

53
00:02:34,680 --> 00:02:36,420
threat Hunter we are looking for

54
00:02:36,420 --> 00:02:40,379
something in a big data something that

55
00:02:40,379 --> 00:02:42,300
security products won't necessarily

56
00:02:42,300 --> 00:02:45,239
detect so we base our research on

57
00:02:45,239 --> 00:02:47,040
loading of a dll

58
00:02:47,040 --> 00:02:50,220
and why an attacker would rather to use

59
00:02:50,220 --> 00:02:55,080
a dll than just execute a binary I guess

60
00:02:55,080 --> 00:02:57,060
that you know the answer but I will give

61
00:02:57,060 --> 00:02:58,800
a brief about this

62
00:02:58,800 --> 00:03:01,920
so a dll is a piece of code that is

63
00:03:01,920 --> 00:03:04,160
being loaded into another application

64
00:03:04,160 --> 00:03:07,500
which makes it more evasive and harder

65
00:03:07,500 --> 00:03:08,760
to detect

66
00:03:08,760 --> 00:03:11,340
as all malicious activity that is being

67
00:03:11,340 --> 00:03:13,440
performed by the dll is being initiated

68
00:03:13,440 --> 00:03:16,680
by the host process

69
00:03:16,680 --> 00:03:21,180
so um attackers usually use um two one

70
00:03:21,180 --> 00:03:22,920
of two main methods to load their

71
00:03:22,920 --> 00:03:26,099
malicious dll the first one will be dll

72
00:03:26,099 --> 00:03:29,099
hijacking and the second one is lol

73
00:03:29,099 --> 00:03:30,060
beans

74
00:03:30,060 --> 00:03:33,480
so what is dll hijacking this is a

75
00:03:33,480 --> 00:03:36,180
method to manipulate the dll search

76
00:03:36,180 --> 00:03:38,700
order of an application and to make it

77
00:03:38,700 --> 00:03:41,519
to load our malicious dll instead of a

78
00:03:41,519 --> 00:03:43,080
legitimate one

79
00:03:43,080 --> 00:03:45,780
what is a dll search Order each

80
00:03:45,780 --> 00:03:48,780
application when it loads dll it has a

81
00:03:48,780 --> 00:03:50,879
specific order where it's going to look

82
00:03:50,879 --> 00:03:54,959
for the dll names in it if it can't find

83
00:03:54,959 --> 00:03:57,000
it in the first directory it will move

84
00:03:57,000 --> 00:03:59,159
forward to the next one if it can find

85
00:03:59,159 --> 00:04:01,260
it there it will move forward to the

86
00:04:01,260 --> 00:04:02,879
next one and Etc

87
00:04:02,879 --> 00:04:06,120
so attackers can manipulate the search

88
00:04:06,120 --> 00:04:08,159
order even

89
00:04:08,159 --> 00:04:09,860
um in the first

90
00:04:09,860 --> 00:04:12,720
directory which is the same directory

91
00:04:12,720 --> 00:04:14,519
that the application is being

92
00:04:14,519 --> 00:04:16,560
um executed from

93
00:04:16,560 --> 00:04:19,320
so all the attacker needs to do is just

94
00:04:19,320 --> 00:04:22,139
to rename its malicious dll with the

95
00:04:22,139 --> 00:04:24,720
name of a known and benign dll that is

96
00:04:24,720 --> 00:04:26,699
usually being loaded by an application

97
00:04:26,699 --> 00:04:29,280
and this is happening because some

98
00:04:29,280 --> 00:04:32,280
applications will just load a dll by its

99
00:04:32,280 --> 00:04:34,979
name and it won't do additional checks

100
00:04:34,979 --> 00:04:37,620
so let's give an example how we can do

101
00:04:37,620 --> 00:04:40,139
it as an attacker if there's a known

102
00:04:40,139 --> 00:04:42,860
application that is called

103
00:04:42,860 --> 00:04:45,900
besides.exe It's supposed to load a dll

104
00:04:45,900 --> 00:04:48,780
that is called daniella.dll as an

105
00:04:48,780 --> 00:04:51,020
attacker I will call my malicious dll

106
00:04:51,020 --> 00:04:53,580
daniella.dll and I will place it

107
00:04:53,580 --> 00:04:56,699
together with besides.x in the same

108
00:04:56,699 --> 00:04:57,780
folder

109
00:04:57,780 --> 00:05:00,740
and it will be just loaded by

110
00:05:00,740 --> 00:05:02,880
besides.exe when it's going to be

111
00:05:02,880 --> 00:05:04,560
executed

112
00:05:04,560 --> 00:05:07,680
so the next method that we are basing

113
00:05:07,680 --> 00:05:10,860
our research on is the using usage of

114
00:05:10,860 --> 00:05:13,740
low beams low beams legitimate utilities

115
00:05:13,740 --> 00:05:16,620
of Windows in those examples we are

116
00:05:16,620 --> 00:05:19,320
going to talk about run dll 32 and Regis

117
00:05:19,320 --> 00:05:22,620
vr32 they're being used all the time

118
00:05:22,620 --> 00:05:24,979
those are known

119
00:05:24,979 --> 00:05:28,500
applications to load dlls all we need to

120
00:05:28,500 --> 00:05:31,160
do is just execute for example run dll

121
00:05:31,160 --> 00:05:34,860
specify the dll path and if we want some

122
00:05:34,860 --> 00:05:36,840
function that will be our entry point

123
00:05:36,840 --> 00:05:39,240
and the dll will be just loaded into the

124
00:05:39,240 --> 00:05:42,240
memory of the Run dll process

125
00:05:42,240 --> 00:05:44,720
so our next

126
00:05:44,720 --> 00:05:47,880
point of the research is that we

127
00:05:47,880 --> 00:05:50,160
assuming that most case in most cases

128
00:05:50,160 --> 00:05:53,699
the dll won't be won't have a digital

129
00:05:53,699 --> 00:05:56,100
signature of course that digital

130
00:05:56,100 --> 00:05:58,680
signature won't inherently

131
00:05:58,680 --> 00:05:59,220
um

132
00:05:59,220 --> 00:06:01,620
point on something that is malicious or

133
00:06:01,620 --> 00:06:04,259
not but this is just a nice lead for

134
00:06:04,259 --> 00:06:06,960
investigation in most cases that we

135
00:06:06,960 --> 00:06:09,180
observed you will see um in the next

136
00:06:09,180 --> 00:06:12,060
slides all dlls that we found were were

137
00:06:12,060 --> 00:06:15,000
not digitally signed and in the cases

138
00:06:15,000 --> 00:06:17,100
where attackers try to manipulate the

139
00:06:17,100 --> 00:06:19,020
digital signature most of security

140
00:06:19,020 --> 00:06:22,440
vendors can detect this so just in order

141
00:06:22,440 --> 00:06:26,100
to reduce Some Noise we were going to

142
00:06:26,100 --> 00:06:29,160
look on unsigned dlls and filter out the

143
00:06:29,160 --> 00:06:30,720
signed ones

144
00:06:30,720 --> 00:06:34,440
so the last point that we are going to

145
00:06:34,440 --> 00:06:36,960
base on is the path that the dll is

146
00:06:36,960 --> 00:06:38,460
loaded from

147
00:06:38,460 --> 00:06:41,520
usually legitimate applications are

148
00:06:41,520 --> 00:06:44,220
located in known folders such as C

149
00:06:44,220 --> 00:06:47,220
program data folder and see Windows

150
00:06:47,220 --> 00:06:50,639
system 32 for example but those folders

151
00:06:50,639 --> 00:06:53,280
require administrative privileges in

152
00:06:53,280 --> 00:06:57,180
order to write files into them so as an

153
00:06:57,180 --> 00:07:00,840
attacker attacker is not always

154
00:07:00,840 --> 00:07:04,500
um an admin on the host so usually they

155
00:07:04,500 --> 00:07:06,240
will have to use some alternative way

156
00:07:06,240 --> 00:07:08,880
and we found that the most common paths

157
00:07:08,880 --> 00:07:11,340
that attackers choose to write their

158
00:07:11,340 --> 00:07:14,759
payloads into are the C program data

159
00:07:14,759 --> 00:07:17,819
folder and subfolders of the C user's

160
00:07:17,819 --> 00:07:19,680
folder

161
00:07:19,680 --> 00:07:22,680
so as you can imagine if we're going to

162
00:07:22,680 --> 00:07:26,340
look for all those points we will find a

163
00:07:26,340 --> 00:07:29,580
lot of results and we still have to dig

164
00:07:29,580 --> 00:07:31,620
into those results and understand what

165
00:07:31,620 --> 00:07:34,680
seems to be suspicious enough that we'll

166
00:07:34,680 --> 00:07:36,720
have to investigate it

167
00:07:36,720 --> 00:07:38,940
so in this stage

168
00:07:38,940 --> 00:07:40,919
um we were focusing on the frequency of

169
00:07:40,919 --> 00:07:44,580
executions and on some suspicious file

170
00:07:44,580 --> 00:07:48,000
paths suspicious expert functions and

171
00:07:48,000 --> 00:07:49,380
dll names

172
00:07:49,380 --> 00:07:53,580
and indeed we were able to find multiple

173
00:07:53,580 --> 00:07:56,280
malwares that were loaded unsigned dlls

174
00:07:56,280 --> 00:08:00,000
from unprivileged paths you can see here

175
00:08:00,000 --> 00:08:01,919
um I don't know if you see the names I

176
00:08:01,919 --> 00:08:03,720
can okay so

177
00:08:03,720 --> 00:08:06,360
um it varies from a cyber crime malware

178
00:08:06,360 --> 00:08:09,720
such as info Steelers such as imotet

179
00:08:09,720 --> 00:08:11,039
um icedid

180
00:08:11,039 --> 00:08:14,039
a lot of banking Trojans and even

181
00:08:14,039 --> 00:08:16,020
um a sophisticated threat actors such as

182
00:08:16,020 --> 00:08:19,199
Mustang Panda apt group and the Lazarus

183
00:08:19,199 --> 00:08:21,180
group that we are going to talk about

184
00:08:21,180 --> 00:08:22,680
now

185
00:08:22,680 --> 00:08:24,120
so

186
00:08:24,120 --> 00:08:27,199
um I decided to give three examples of

187
00:08:27,199 --> 00:08:30,360
the previous slide we're going to talk

188
00:08:30,360 --> 00:08:33,000
about two apt groups that we were able

189
00:08:33,000 --> 00:08:35,880
to catch using um this logic and one new

190
00:08:35,880 --> 00:08:39,958
malware that is uh being recently spread

191
00:08:39,958 --> 00:08:42,839
so um let's start talking about the um

192
00:08:42,839 --> 00:08:44,279
Lazarus group

193
00:08:44,279 --> 00:08:47,420
okay so Lazarus group one of the

194
00:08:47,420 --> 00:08:49,440
malwares that we were able to catch

195
00:08:49,440 --> 00:08:52,380
using this logic is in North Korean

196
00:08:52,380 --> 00:08:54,000
threat actor

197
00:08:54,000 --> 00:08:58,500
it um is responsible for major attacks

198
00:08:58,500 --> 00:09:01,019
over the years for example the Sony

199
00:09:01,019 --> 00:09:04,800
bridge in 2014 or the Bangladeshi Bank

200
00:09:04,800 --> 00:09:08,760
attack in 2016 and in this case in the

201
00:09:08,760 --> 00:09:11,580
scenario that we found it was targeting

202
00:09:11,580 --> 00:09:14,880
um the chemical sector companies the

203
00:09:14,880 --> 00:09:17,339
victim that we found was a gas company

204
00:09:17,339 --> 00:09:19,740
and Lazarus group are known for their

205
00:09:19,740 --> 00:09:22,740
usage of very sophisticated payloads

206
00:09:22,740 --> 00:09:25,080
they keep changing the payload for each

207
00:09:25,080 --> 00:09:27,480
victim and in this case we're going to

208
00:09:27,480 --> 00:09:30,360
talk about a supply chain attack and the

209
00:09:30,360 --> 00:09:33,420
usage of a lot of payloads and a lot of

210
00:09:33,420 --> 00:09:35,580
low beams

211
00:09:35,580 --> 00:09:38,760
so let's speak about the dll hijacking

212
00:09:38,760 --> 00:09:41,420
activity that we were able to find

213
00:09:41,420 --> 00:09:44,660
we found an unsigned dll that is called

214
00:09:44,660 --> 00:09:48,540
mi.dll it was loaded by a signed binary

215
00:09:48,540 --> 00:09:52,200
which is called WSM Provost I hope that

216
00:09:52,200 --> 00:09:55,339
I'm pronouncing it correctly

217
00:09:55,339 --> 00:09:57,899
wsmprovhost.exim which is the winner and

218
00:09:57,899 --> 00:10:01,620
process both the dll and the binary were

219
00:10:01,620 --> 00:10:04,440
located in the subfolder of C program

220
00:10:04,440 --> 00:10:07,080
data folder which is not the correct

221
00:10:07,080 --> 00:10:09,959
location of the winner process the

222
00:10:09,959 --> 00:10:11,339
attacker didn't have the right

223
00:10:11,339 --> 00:10:14,580
privileges to write the malicious dll so

224
00:10:14,580 --> 00:10:16,680
he just copied the benign application

225
00:10:16,680 --> 00:10:19,380
and the malicious dll to the C program

226
00:10:19,380 --> 00:10:23,339
data folder so while the dll was loaded

227
00:10:23,339 --> 00:10:25,440
it executed a lot of reconnaissance

228
00:10:25,440 --> 00:10:28,019
commands and additional payloads you can

229
00:10:28,019 --> 00:10:31,260
see it in the screenshot behind you can

230
00:10:31,260 --> 00:10:34,500
see the the small circles but there are

231
00:10:34,500 --> 00:10:37,800
just some reconnaissance commands

232
00:10:37,800 --> 00:10:38,880
okay

233
00:10:38,880 --> 00:10:41,640
so um we try to understand how this dll

234
00:10:41,640 --> 00:10:44,820
got into the disk in the first place and

235
00:10:44,820 --> 00:10:46,980
we found the supply supply chain attack

236
00:10:46,980 --> 00:10:49,560
that was originated in the installation

237
00:10:49,560 --> 00:10:52,380
of some old version of a software that

238
00:10:52,380 --> 00:10:55,440
is called initech basically the attack

239
00:10:55,440 --> 00:10:58,440
was delivered via a phishing email the

240
00:10:58,440 --> 00:11:01,620
victim received some fake job offer when

241
00:11:01,620 --> 00:11:04,980
it clicked on it some dll was injected

242
00:11:04,980 --> 00:11:08,040
into the initech software and dropped

243
00:11:08,040 --> 00:11:10,519
additional malware you can see here

244
00:11:10,519 --> 00:11:13,620
another execution chain of multi-stage

245
00:11:13,620 --> 00:11:16,620
malware that eventually also dropped our

246
00:11:16,620 --> 00:11:20,220
malicious mi.dll

247
00:11:21,060 --> 00:11:22,440
so

248
00:11:22,440 --> 00:11:24,959
um let's talk a bit about the mi.dll

249
00:11:24,959 --> 00:11:26,300
payload

250
00:11:26,300 --> 00:11:29,579
we found that the malicious dll that the

251
00:11:29,579 --> 00:11:32,519
unsigned dll was a compiled version of

252
00:11:32,519 --> 00:11:34,079
an open source tool that is called

253
00:11:34,079 --> 00:11:37,200
bugtrap the backdrop project is

254
00:11:37,200 --> 00:11:39,240
available on GitHub and the attacker

255
00:11:39,240 --> 00:11:41,459
managed to change one of the expert

256
00:11:41,459 --> 00:11:43,560
functions of

257
00:11:43,560 --> 00:11:47,100
of the code he implanted their malicious

258
00:11:47,100 --> 00:11:48,839
code that was responsible for

259
00:11:48,839 --> 00:11:51,959
information stealing and for C2

260
00:11:51,959 --> 00:11:54,120
connections as you can see in the

261
00:11:54,120 --> 00:11:56,459
screenshot from Ida because without any

262
00:11:56,459 --> 00:11:58,200
either screenshot it's not a cyber

263
00:11:58,200 --> 00:11:59,820
presentation

264
00:11:59,820 --> 00:12:02,100
um you can see here I don't know if you

265
00:12:02,100 --> 00:12:03,300
see her but

266
00:12:03,300 --> 00:12:05,700
um they're in the gray color you see a

267
00:12:05,700 --> 00:12:07,820
lot of the C2 domains that eventually

268
00:12:07,820 --> 00:12:12,260
additional malware were retrieved from

269
00:12:12,260 --> 00:12:15,360
so um oh and another thing I forgot to

270
00:12:15,360 --> 00:12:18,660
mention is that this dll wasn't

271
00:12:18,660 --> 00:12:21,120
recognized as malicious on any security

272
00:12:21,120 --> 00:12:23,760
vendor it seems to be legitimate except

273
00:12:23,760 --> 00:12:26,459
from the fact that it has an invalid

274
00:12:26,459 --> 00:12:29,220
digital signature

275
00:12:29,220 --> 00:12:30,360
so

276
00:12:30,360 --> 00:12:32,760
um our next case is the raspberry Robin

277
00:12:32,760 --> 00:12:34,920
malware anyone familiar maybe with this

278
00:12:34,920 --> 00:12:37,079
name

279
00:12:37,079 --> 00:12:39,360
okay cool nice

280
00:12:39,360 --> 00:12:39,959
um

281
00:12:39,959 --> 00:12:42,959
so raspberry Robin was published quite

282
00:12:42,959 --> 00:12:46,200
recently although it was discovered in

283
00:12:46,200 --> 00:12:49,980
December 2021 it took six months to

284
00:12:49,980 --> 00:12:52,220
publish the first blog post about this

285
00:12:52,220 --> 00:12:55,560
because the dll that was found there was

286
00:12:55,560 --> 00:12:58,019
very very obfuscated it was very hard to

287
00:12:58,019 --> 00:13:01,440
do a reverse engineering on this payload

288
00:13:01,440 --> 00:13:03,839
so unlike the Lazarus group the

289
00:13:03,839 --> 00:13:07,019
raspberry Robin malware is uh Evol is

290
00:13:07,019 --> 00:13:10,260
being spread really really fast it seems

291
00:13:10,260 --> 00:13:11,940
to not Target some specific sector

292
00:13:11,940 --> 00:13:13,920
because we observed a lot of victims

293
00:13:13,920 --> 00:13:14,880
there

294
00:13:14,880 --> 00:13:16,260
um it showed up in the top of our

295
00:13:16,260 --> 00:13:18,660
results as it was the most common

296
00:13:18,660 --> 00:13:21,300
malware that we were able to catch using

297
00:13:21,300 --> 00:13:22,940
our logic

298
00:13:22,940 --> 00:13:25,860
and let's go on some key points of the

299
00:13:25,860 --> 00:13:28,320
malware the first one is its infection

300
00:13:28,320 --> 00:13:31,920
Vector which is USB drive USB drive

301
00:13:31,920 --> 00:13:34,800
being connected to an infected host it

302
00:13:34,800 --> 00:13:37,740
contains a malicious lnk file a shortcut

303
00:13:37,740 --> 00:13:41,459
file that when clicked it executes an

304
00:13:41,459 --> 00:13:44,339
MSI exec command that eventually

305
00:13:44,339 --> 00:13:47,100
retrieves a malicious dll from a C2

306
00:13:47,100 --> 00:13:48,300
server

307
00:13:48,300 --> 00:13:51,720
the malicious dll the payload is unique

308
00:13:51,720 --> 00:13:53,700
per each victim which makes it more

309
00:13:53,700 --> 00:13:56,399
harder to attribute this uh those

310
00:13:56,399 --> 00:13:58,860
payloads to raspberry rubbing as there

311
00:13:58,860 --> 00:14:01,260
will no be um two dlls with the same

312
00:14:01,260 --> 00:14:02,339
hash

313
00:14:02,339 --> 00:14:05,459
the next thing is the sophisticated C2

314
00:14:05,459 --> 00:14:08,160
infrastructure each time a dll is being

315
00:14:08,160 --> 00:14:11,339
downloaded from a C2 server it is going

316
00:14:11,339 --> 00:14:13,500
offline which means that I can't

317
00:14:13,500 --> 00:14:16,260
download the same payload twice

318
00:14:16,260 --> 00:14:18,540
and the last thing is the sophisticated

319
00:14:18,540 --> 00:14:21,660
payload itself as I mentioned it's as I

320
00:14:21,660 --> 00:14:24,240
mentioned it's really really obfuscated

321
00:14:24,240 --> 00:14:26,459
um it has a lot of layers of backing in

322
00:14:26,459 --> 00:14:27,420
it

323
00:14:27,420 --> 00:14:29,579
and the most interesting thing is that

324
00:14:29,579 --> 00:14:32,459
it makes researchers to think that this

325
00:14:32,459 --> 00:14:34,320
is just an adword when it's being

326
00:14:34,320 --> 00:14:36,779
executed on a virtual machine when

327
00:14:36,779 --> 00:14:38,940
there's a real payload that is staying

328
00:14:38,940 --> 00:14:41,639
packed and obfuscated

329
00:14:41,639 --> 00:14:45,839
while doing analysis on it

330
00:14:45,839 --> 00:14:46,980
so

331
00:14:46,980 --> 00:14:48,899
um speaking of our research how can we

332
00:14:48,899 --> 00:14:49,800
detect

333
00:14:49,800 --> 00:14:52,620
um loading of run the loading of the

334
00:14:52,620 --> 00:14:55,260
raspberry rubbing payload so raspberry

335
00:14:55,260 --> 00:14:57,420
Robin is being loaded using low beams

336
00:14:57,420 --> 00:15:00,060
sometimes it will be run dll sometimes

337
00:15:00,060 --> 00:15:03,779
it will be Regis VR it varies between

338
00:15:03,779 --> 00:15:06,420
different attacks and as you can see in

339
00:15:06,420 --> 00:15:07,920
the bolded command

340
00:15:07,920 --> 00:15:10,560
um it is being loaded from a

341
00:15:10,560 --> 00:15:13,019
non-privileged path from C program data

342
00:15:13,019 --> 00:15:16,440
folder we observed also cases where it

343
00:15:16,440 --> 00:15:18,540
was loaded from some subfolders of C

344
00:15:18,540 --> 00:15:20,459
users folders

345
00:15:20,459 --> 00:15:24,000
and you can see a very obfuscated and

346
00:15:24,000 --> 00:15:26,339
weird name that already seems to be

347
00:15:26,339 --> 00:15:28,920
suspicious and requires some

348
00:15:28,920 --> 00:15:30,540
investigation

349
00:15:30,540 --> 00:15:33,480
and when being loaded it performs a

350
00:15:33,480 --> 00:15:36,500
process hollowing it injects itself into

351
00:15:36,500 --> 00:15:40,620
legitimate process such as notepad or

352
00:15:40,620 --> 00:15:43,620
dll host and then it initiates network

353
00:15:43,620 --> 00:15:46,579
connections to tour nodes it creates

354
00:15:46,579 --> 00:15:49,800
persistence by registry keys by schedule

355
00:15:49,800 --> 00:15:51,959
task and those are things that by the

356
00:15:51,959 --> 00:15:54,839
way security products can detect but we

357
00:15:54,839 --> 00:15:57,180
can detect the loading of the dll even

358
00:15:57,180 --> 00:15:59,519
by the command line before it does some

359
00:15:59,519 --> 00:16:01,620
bad things

360
00:16:01,620 --> 00:16:05,040
so sorry wanted to give additional point

361
00:16:05,040 --> 00:16:07,980
about raspberry Robin except from the

362
00:16:07,980 --> 00:16:10,500
fact that it's very very obfuscated and

363
00:16:10,500 --> 00:16:12,779
the cool thing with the tricking

364
00:16:12,779 --> 00:16:15,180
security researchers into thinking that

365
00:16:15,180 --> 00:16:18,180
is an adverb the main motivation behind

366
00:16:18,180 --> 00:16:21,540
this malware is still unclear although

367
00:16:21,540 --> 00:16:24,180
some vendors tend to attribute this

368
00:16:24,180 --> 00:16:27,060
malware to the Russian evil Corp group

369
00:16:27,060 --> 00:16:30,120
but this is still unclear I think that

370
00:16:30,120 --> 00:16:34,139
we will hear about it more soon

371
00:16:34,139 --> 00:16:37,199
so our last case I know that you're all

372
00:16:37,199 --> 00:16:39,420
hungry to go to lunch so it's like the

373
00:16:39,420 --> 00:16:42,600
last uh last example we're going to talk

374
00:16:42,600 --> 00:16:46,259
about Mustang Panda Chinese dread actor

375
00:16:46,259 --> 00:16:51,120
it started operating since 2017 and it

376
00:16:51,120 --> 00:16:53,699
targets multiple organizations in the US

377
00:16:53,699 --> 00:16:56,759
and um in Asia in our case we are

378
00:16:56,759 --> 00:16:58,800
talking about a victim from Singapore

379
00:16:58,800 --> 00:17:01,980
and Muslim Panda are known for the usage

380
00:17:01,980 --> 00:17:05,459
of plaguex rat mostly and poison ivy

381
00:17:05,459 --> 00:17:09,240
they use a lot of dll hijacking as we

382
00:17:09,240 --> 00:17:11,939
will see now I think that the the

383
00:17:11,939 --> 00:17:13,919
screenshots are a bit small but I will

384
00:17:13,919 --> 00:17:15,919
just describe what you can see here

385
00:17:15,919 --> 00:17:19,260
basically we found unsigned dll again

386
00:17:19,260 --> 00:17:23,099
which is called wscdll it was loaded by

387
00:17:23,099 --> 00:17:25,980
the legitimate Avast software

388
00:17:25,980 --> 00:17:29,040
again from an unprivileged path it was

389
00:17:29,040 --> 00:17:32,700
from the C program data folder and

390
00:17:32,700 --> 00:17:34,860
um as in the Lazarus case the attacker

391
00:17:34,860 --> 00:17:37,140
didn't have the right privileges

392
00:17:37,140 --> 00:17:39,840
um so they wrote it to some

393
00:17:39,840 --> 00:17:43,740
weird path in C program data folder one

394
00:17:43,740 --> 00:17:46,080
thing worth mentioning about the Muslim

395
00:17:46,080 --> 00:17:49,020
Panda apt group is that they're using

396
00:17:49,020 --> 00:17:51,780
multiple benign applications for the dll

397
00:17:51,780 --> 00:17:54,840
hijacking activities we observed also

398
00:17:54,840 --> 00:17:56,580
additional cases

399
00:17:56,580 --> 00:17:59,880
um that there was dll hijacking to

400
00:17:59,880 --> 00:18:03,120
um Avira software to Adobe to ESET as

401
00:18:03,120 --> 00:18:05,460
well so um the attacker really likes

402
00:18:05,460 --> 00:18:09,360
antivirus products such as all of us

403
00:18:09,360 --> 00:18:10,080
um

404
00:18:10,080 --> 00:18:12,059
so let's talk a bit about the plug

405
00:18:12,059 --> 00:18:16,080
threat uh known rat being used a lot by

406
00:18:16,080 --> 00:18:18,960
Chinese threat actors has various

407
00:18:18,960 --> 00:18:21,299
capabilities such as information

408
00:18:21,299 --> 00:18:24,919
stealing key logging files modifications

409
00:18:24,919 --> 00:18:27,660
but the interesting thing here is that

410
00:18:27,660 --> 00:18:30,720
the loaded dll is just a loader the

411
00:18:30,720 --> 00:18:33,660
actual payload is stored in an encrypted

412
00:18:33,660 --> 00:18:38,100
way in a file with a DOT extension

413
00:18:38,100 --> 00:18:40,559
it you can see like the file paths there

414
00:18:40,559 --> 00:18:43,760
I don't know if it's clear enough but

415
00:18:43,760 --> 00:18:46,380
the main point here is that when

416
00:18:46,380 --> 00:18:48,900
investigating plug executivity or

417
00:18:48,900 --> 00:18:50,760
Mustang Panda activity we should expect

418
00:18:50,760 --> 00:18:53,220
to see the creation of three files not

419
00:18:53,220 --> 00:18:54,360
to

420
00:18:54,360 --> 00:18:57,179
um of a B9 application of a loader dll

421
00:18:57,179 --> 00:19:01,320
and of an encrypted payload sometimes it

422
00:19:01,320 --> 00:19:05,100
will be in forms of other file

423
00:19:05,100 --> 00:19:07,260
extensions not only that file so it can

424
00:19:07,260 --> 00:19:10,080
vary in different cases

425
00:19:10,080 --> 00:19:13,140
and to sum up the activity of Mustang

426
00:19:13,140 --> 00:19:16,080
panda in this case we observed after the

427
00:19:16,080 --> 00:19:17,520
loading of the dll

428
00:19:17,520 --> 00:19:21,419
um registry persistence in run Keys it

429
00:19:21,419 --> 00:19:25,080
was spreaded by USB devices we observed

430
00:19:25,080 --> 00:19:28,080
a lot of infected hosts here and uh

431
00:19:28,080 --> 00:19:30,539
finally we observed files exfiltrations

432
00:19:30,539 --> 00:19:34,260
multiple documents were delivered to C2

433
00:19:34,260 --> 00:19:36,780
servers in Hong Kong and when being

434
00:19:36,780 --> 00:19:39,780
copied they were renamed with a base64

435
00:19:39,780 --> 00:19:42,000
encoded name

436
00:19:42,000 --> 00:19:46,260
so finished with the examples let's talk

437
00:19:46,260 --> 00:19:48,960
a bit about how you can catch a threat

438
00:19:48,960 --> 00:19:52,919
actor using our really simple logic

439
00:19:52,919 --> 00:19:54,120
so

440
00:19:54,120 --> 00:19:56,520
um if getting back to unprivileged paths

441
00:19:56,520 --> 00:19:58,200
we were talking about this the entire

442
00:19:58,200 --> 00:19:59,940
session so

443
00:19:59,940 --> 00:20:02,940
um not too much to elaborate here just

444
00:20:02,940 --> 00:20:05,880
really um recommended to look at the

445
00:20:05,880 --> 00:20:07,799
path that the dll or the file is being

446
00:20:07,799 --> 00:20:10,140
loaded from of course it doesn't

447
00:20:10,140 --> 00:20:13,200
indicate on something malicious but it

448
00:20:13,200 --> 00:20:16,500
is a good lead for investigation

449
00:20:16,500 --> 00:20:18,600
the next thing that we didn't have a

450
00:20:18,600 --> 00:20:21,900
chance to talk about is a file entropy I

451
00:20:21,900 --> 00:20:23,880
will explain for those um who are not

452
00:20:23,880 --> 00:20:26,400
familiar with this term file entropy is

453
00:20:26,400 --> 00:20:28,799
a way to measure the randomness of the

454
00:20:28,799 --> 00:20:31,740
data in a file so when a file is being

455
00:20:31,740 --> 00:20:34,200
packed for example the randomness is

456
00:20:34,200 --> 00:20:37,559
becomes becomes smaller so um the

457
00:20:37,559 --> 00:20:40,440
entropy of the file becomes bigger so if

458
00:20:40,440 --> 00:20:42,960
we see a large entropy of a file this is

459
00:20:42,960 --> 00:20:45,419
some something that we can calculate

460
00:20:45,419 --> 00:20:48,299
um we may assume that it might be packed

461
00:20:48,299 --> 00:20:51,000
not all cases will be malicious of

462
00:20:51,000 --> 00:20:53,160
course because for example archived

463
00:20:53,160 --> 00:20:56,179
files also have a large entropy

464
00:20:56,179 --> 00:20:59,340
and fun fact sometimes software

465
00:20:59,340 --> 00:21:02,840
developers like to run Packers on their

466
00:21:02,840 --> 00:21:05,880
on their binaries so no one can do

467
00:21:05,880 --> 00:21:07,980
reverse engineering for that and to see

468
00:21:07,980 --> 00:21:11,039
the source code so um large entropy

469
00:21:11,039 --> 00:21:14,400
suspicious but not inherently malicious

470
00:21:14,400 --> 00:21:17,100
and the last thing that I think is the

471
00:21:17,100 --> 00:21:19,620
most important one is the frequency of

472
00:21:19,620 --> 00:21:23,220
executions as a good Hunter we should

473
00:21:23,220 --> 00:21:26,220
know our Baseline of the environment we

474
00:21:26,220 --> 00:21:28,080
should know what is usually being

475
00:21:28,080 --> 00:21:31,799
executed in an environment and once we

476
00:21:31,799 --> 00:21:33,960
know what's so common in our environment

477
00:21:33,960 --> 00:21:36,360
and what's the regular executions it

478
00:21:36,360 --> 00:21:38,880
will be way easier for us to find the

479
00:21:38,880 --> 00:21:41,039
suspicious ones

480
00:21:41,039 --> 00:21:44,159
um and to find new malware such as in

481
00:21:44,159 --> 00:21:45,360
those cases

482
00:21:45,360 --> 00:21:48,080
thank you very much

483
00:21:48,080 --> 00:21:52,260
[Applause]

484
00:21:52,260 --> 00:21:55,260
foreign

