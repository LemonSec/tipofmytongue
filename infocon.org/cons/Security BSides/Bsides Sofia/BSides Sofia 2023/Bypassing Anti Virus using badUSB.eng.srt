1
00:00:02,159 --> 00:00:05,159
foreign

2
00:00:09,380 --> 00:00:12,840
and welcome to to this presentation uh

3
00:00:12,840 --> 00:00:15,839
now we are going to to speak about uh

4
00:00:15,839 --> 00:00:19,440
bypassing antiviruses using bad dsb

5
00:00:19,440 --> 00:00:22,619
uh this presentation will be mostly

6
00:00:22,619 --> 00:00:26,220
Technical and we will tackle the the

7
00:00:26,220 --> 00:00:28,260
Windows Defender

8
00:00:28,260 --> 00:00:32,220
um and basically I know that this was a

9
00:00:32,220 --> 00:00:36,660
very very very long day for everyone so

10
00:00:36,660 --> 00:00:40,320
I'll try to not bore you some

11
00:00:40,320 --> 00:00:44,219
um some very technical topics so two

12
00:00:44,219 --> 00:00:47,340
words about myself I'm a penetration

13
00:00:47,340 --> 00:00:49,500
tester founder of a cyber security

14
00:00:49,500 --> 00:00:53,280
company part of the S certified ethical

15
00:00:53,280 --> 00:00:56,879
hacker committee and I'm also a speaker

16
00:00:56,879 --> 00:00:59,280
and trainer for multiple organizations

17
00:00:59,280 --> 00:01:03,000
all over the world and in time I also

18
00:01:03,000 --> 00:01:06,180
speak to some conferences like those and

19
00:01:06,180 --> 00:01:09,920
write some articles on me

20
00:01:10,280 --> 00:01:14,880
and the agenda for today would be how we

21
00:01:14,880 --> 00:01:18,000
can buy the MCI which is the the

22
00:01:18,000 --> 00:01:22,080
protocol used for one second which is

23
00:01:22,080 --> 00:01:25,380
the protocol used for Windows Defender

24
00:01:25,380 --> 00:01:28,500
um to to check this to check the

25
00:01:28,500 --> 00:01:32,220
malicious files that we try to run uh

26
00:01:32,220 --> 00:01:35,100
next we'll check how can we bypass this

27
00:01:35,100 --> 00:01:38,220
policy in order to to run those scripts

28
00:01:38,220 --> 00:01:42,659
uh to to build the payload runner in

29
00:01:42,659 --> 00:01:45,299
which through which we will insert our

30
00:01:45,299 --> 00:01:48,180
payload directly into the memory and how

31
00:01:48,180 --> 00:01:51,240
can we put everything together on a

32
00:01:51,240 --> 00:01:54,600
little bit USB and demo also included

33
00:01:54,600 --> 00:01:57,960
running on a Windows Defender up-to-date

34
00:01:57,960 --> 00:01:59,720
version

35
00:01:59,720 --> 00:02:03,000
and the scenario is the following

36
00:02:03,000 --> 00:02:07,500
uh Bob uh went in the parking lot he

37
00:02:07,500 --> 00:02:12,239
found on USB next to uh to his car

38
00:02:12,239 --> 00:02:16,080
took that USB to his computer introduced

39
00:02:16,080 --> 00:02:19,940
it he was just curious

40
00:02:19,980 --> 00:02:23,459
and now an attacker is connected to top

41
00:02:23,459 --> 00:02:24,420
computer

42
00:02:24,420 --> 00:02:27,300
uh how would that be possible because

43
00:02:27,300 --> 00:02:31,280
Bob had and is having antivirus running

44
00:02:31,280 --> 00:02:34,860
more specifically Windows Defender

45
00:02:34,860 --> 00:02:38,400
um and Bob is a privilege user within

46
00:02:38,400 --> 00:02:41,700
the the organization so how that

47
00:02:41,700 --> 00:02:45,180
happened uh and before moving forward I

48
00:02:45,180 --> 00:02:48,540
want to to ask you how many of you I

49
00:02:48,540 --> 00:02:52,140
still rely on Windows Defender

50
00:02:52,140 --> 00:02:54,920
hands up

51
00:02:55,920 --> 00:02:59,160
okay okay how many of you do you think

52
00:02:59,160 --> 00:03:02,239
it's it's a good choice

53
00:03:03,540 --> 00:03:04,739
okay

54
00:03:04,739 --> 00:03:08,760
that's fine uh expected as expected so

55
00:03:08,760 --> 00:03:11,940
uh also we have a policy in place for

56
00:03:11,940 --> 00:03:15,360
our organization that disallows USBS to

57
00:03:15,360 --> 00:03:18,680
be into into

58
00:03:19,319 --> 00:03:22,440
um computers more specifically removable

59
00:03:22,440 --> 00:03:25,280
media storage

60
00:03:25,980 --> 00:03:28,860
what happened we'll see during this this

61
00:03:28,860 --> 00:03:31,099
presentation

62
00:03:31,099 --> 00:03:35,159
uh the the sequence of attacks that has

63
00:03:35,159 --> 00:03:37,200
been performed on the on the Bob

64
00:03:37,200 --> 00:03:39,959
computer are the following firstly

65
00:03:39,959 --> 00:03:43,440
attacker evaded armsy in order to run

66
00:03:43,440 --> 00:03:47,159
the the script uh then execution policy

67
00:03:47,159 --> 00:03:48,480
bypass

68
00:03:48,480 --> 00:03:51,120
payload Runner is being inserted

69
00:03:51,120 --> 00:03:53,819
directly into the memory so we have a

70
00:03:53,819 --> 00:03:57,000
files uh payload there and post

71
00:03:57,000 --> 00:04:00,060
exploitation he migrated to to another

72
00:04:00,060 --> 00:04:04,260
legit process in order to not be caught

73
00:04:04,260 --> 00:04:07,319
firstly we will go into details

74
00:04:07,319 --> 00:04:11,298
regarding MC bypass methods

75
00:04:12,680 --> 00:04:16,199
uh this this technology works as a man

76
00:04:16,199 --> 00:04:19,380
in the middle uh interface between our

77
00:04:19,380 --> 00:04:23,040
antivirus and the Powershell script or

78
00:04:23,040 --> 00:04:25,680
other scripts that we are running on our

79
00:04:25,680 --> 00:04:30,080
computers and if we find a way to

80
00:04:30,080 --> 00:04:34,080
disable it of course with low privileged

81
00:04:34,080 --> 00:04:36,900
accounts if we find a way to disable it

82
00:04:36,900 --> 00:04:39,660
we can run any malicious scripts that we

83
00:04:39,660 --> 00:04:43,500
we want on the on the computers uh and

84
00:04:43,500 --> 00:04:47,100
it is usually used with third-party

85
00:04:47,100 --> 00:04:50,460
antiviruses in order to provide a

86
00:04:50,460 --> 00:04:53,400
scanning interface between the scripts

87
00:04:53,400 --> 00:04:57,780
and the engine and technically speaking

88
00:04:57,780 --> 00:05:01,259
uh it uses the armscan buffer function

89
00:05:01,259 --> 00:05:05,160
from the library amc.dll so if we find a

90
00:05:05,160 --> 00:05:07,919
way to manipulate the returning results

91
00:05:07,919 --> 00:05:11,880
of this function we may find a way to to

92
00:05:11,880 --> 00:05:16,380
totally disable or to tamper with it in

93
00:05:16,380 --> 00:05:19,680
order to return a result that every time

94
00:05:19,680 --> 00:05:23,160
it scans for a file it will return that

95
00:05:23,160 --> 00:05:26,160
file is legit that file is valid and is

96
00:05:26,160 --> 00:05:29,220
not flagged as malicious how can we do

97
00:05:29,220 --> 00:05:31,380
that

98
00:05:31,380 --> 00:05:35,240
firstly we will do a Powershell script

99
00:05:35,240 --> 00:05:39,360
and we will Define multiple API

100
00:05:39,360 --> 00:05:41,820
functions within the the Powershell

101
00:05:41,820 --> 00:05:46,259
script uh why we need this sequence here

102
00:05:46,259 --> 00:05:51,120
is that because uh Powershell does not

103
00:05:51,120 --> 00:05:54,660
know uh c-sharp and what we are doing

104
00:05:54,660 --> 00:05:59,400
here is basically uh c-sharp so we are

105
00:05:59,400 --> 00:06:02,820
defining those functions in C sharp and

106
00:06:02,820 --> 00:06:05,759
then translating them to to Powershell

107
00:06:05,759 --> 00:06:08,580
using the add type method

108
00:06:08,580 --> 00:06:13,259
and then we we load the amc.dll library

109
00:06:13,259 --> 00:06:16,979
in memory in order to to manipulate with

110
00:06:16,979 --> 00:06:19,560
the functions within it as you can see

111
00:06:19,560 --> 00:06:23,340
we Define get proc address loader

112
00:06:23,340 --> 00:06:26,100
library and virtual protect

113
00:06:26,100 --> 00:06:29,759
those functions will use to manipulate

114
00:06:29,759 --> 00:06:33,419
the MC scan buffer function and the

115
00:06:33,419 --> 00:06:35,520
first one that we are using here to load

116
00:06:35,520 --> 00:06:39,300
the library uh is actually the download

117
00:06:39,300 --> 00:06:42,419
Library functions uh Windows API

118
00:06:42,419 --> 00:06:44,280
function

119
00:06:44,280 --> 00:06:47,580
next we have the amc.dll we need to

120
00:06:47,580 --> 00:06:51,300
extract the function from dmc.dll we

121
00:06:51,300 --> 00:06:55,259
will uh use the get proc art or get proc

122
00:06:55,259 --> 00:06:58,380
address a function in order to to

123
00:06:58,380 --> 00:07:01,340
retrieve the ampsy scan buffer method

124
00:07:01,340 --> 00:07:05,400
and then we need to make it writable we

125
00:07:05,400 --> 00:07:07,620
need to make it writable in order to

126
00:07:07,620 --> 00:07:11,400
tamper with the return address of the of

127
00:07:11,400 --> 00:07:13,979
the function for that case we'll use

128
00:07:13,979 --> 00:07:17,039
Virtual protect in order to to change

129
00:07:17,039 --> 00:07:20,580
the permissions to uh to allow us to

130
00:07:20,580 --> 00:07:23,160
tamper with the with the function

131
00:07:23,160 --> 00:07:26,819
and after that we need to create the

132
00:07:26,819 --> 00:07:30,360
value that will be replaced every time

133
00:07:30,360 --> 00:07:32,940
the function is being called against a

134
00:07:32,940 --> 00:07:35,880
file or against the script this value

135
00:07:35,880 --> 00:07:45,060
here uh is 0 x 8 0 0 7 0 0 5 7 it

136
00:07:45,060 --> 00:07:47,759
doesn't make any sense for now but we'll

137
00:07:47,759 --> 00:07:52,199
see why it's uh it's a very important

138
00:07:52,199 --> 00:07:53,940
return value

139
00:07:53,940 --> 00:07:57,060
during the next slide next

140
00:07:57,060 --> 00:08:00,840
using Marshall copy we are doing a

141
00:08:00,840 --> 00:08:05,340
replacement of the of the result

142
00:08:05,340 --> 00:08:09,360
and why this value should be should be

143
00:08:09,360 --> 00:08:13,020
replaced for the ampscan buffer result

144
00:08:13,020 --> 00:08:15,180
Let's Take a Look Over the official

145
00:08:15,180 --> 00:08:17,880
documentation for amsyscan buffer

146
00:08:17,880 --> 00:08:22,440
function and we can see that it takes uh

147
00:08:22,440 --> 00:08:26,580
an ampsi result as the output if this

148
00:08:26,580 --> 00:08:30,180
output uh succeeds if the function

149
00:08:30,180 --> 00:08:33,659
itself succeeds scanning the file it

150
00:08:33,659 --> 00:08:36,779
will return as underscore okay if the

151
00:08:36,779 --> 00:08:40,080
function does not succeed it will return

152
00:08:40,080 --> 00:08:44,279
on age result error code

153
00:08:44,279 --> 00:08:47,760
why is the why is this a problem in

154
00:08:47,760 --> 00:08:49,260
Windows

155
00:08:49,260 --> 00:08:51,899
the problem is that

156
00:08:51,899 --> 00:08:55,800
by default if we think securely if the

157
00:08:55,800 --> 00:08:59,640
arms is gone buffer function would crash

158
00:08:59,640 --> 00:09:02,220
would return an error

159
00:09:02,220 --> 00:09:05,760
the file should not permit it to run

160
00:09:05,760 --> 00:09:09,300
but by default in Windows the file is

161
00:09:09,300 --> 00:09:12,060
being run when the armscan buffer

162
00:09:12,060 --> 00:09:15,000
function return an error code

163
00:09:15,000 --> 00:09:20,339
so we'll make the the function to return

164
00:09:20,339 --> 00:09:24,420
an error code our error code is this one

165
00:09:24,420 --> 00:09:26,880
eight zero zero seven zero zero five

166
00:09:26,880 --> 00:09:28,860
seven we'll see also the documentation

167
00:09:28,860 --> 00:09:30,420
for this code

168
00:09:30,420 --> 00:09:33,839
so that's that's also flow within

169
00:09:33,839 --> 00:09:36,240
windows by itself

170
00:09:36,240 --> 00:09:38,760
and

171
00:09:38,760 --> 00:09:43,080
the value of the of the error code it

172
00:09:43,080 --> 00:09:45,540
says that one or more arguments are

173
00:09:45,540 --> 00:09:48,899
invalid we can take any error code that

174
00:09:48,899 --> 00:09:52,019
we we want but this one is pretty pretty

175
00:09:52,019 --> 00:09:56,580
effective so there is the uh the age

176
00:09:56,580 --> 00:09:59,519
result documentation on on Microsoft

177
00:09:59,519 --> 00:10:03,060
official page we can take any value uh

178
00:10:03,060 --> 00:10:06,560
this one seemed to to work without any

179
00:10:06,560 --> 00:10:11,339
uh additional manual interventions so

180
00:10:11,339 --> 00:10:14,220
if we make the function sorry if we made

181
00:10:14,220 --> 00:10:17,600
the function return this this error code

182
00:10:17,600 --> 00:10:21,660
uh we may have the file running we may

183
00:10:21,660 --> 00:10:26,420
have bypassed the the antivirus

184
00:10:26,820 --> 00:10:31,260
and this is our final uh arms bypass

185
00:10:31,260 --> 00:10:32,459
payload

186
00:10:32,459 --> 00:10:34,680
let me ask you something what do you

187
00:10:34,680 --> 00:10:38,839
think it is missing here

188
00:10:41,519 --> 00:10:45,120
this one is being being caught by most

189
00:10:45,120 --> 00:10:47,760
of the antiviral Solutions

190
00:10:47,760 --> 00:10:51,480
so we need to do an extra step

191
00:10:51,480 --> 00:10:53,519
for it oh

192
00:10:53,519 --> 00:10:56,100
okay

193
00:10:56,100 --> 00:10:58,920
we'll apply authentication we can apply

194
00:10:58,920 --> 00:11:01,680
this obfuscation using

195
00:11:01,680 --> 00:11:05,399
um using the invoke obfuscation built

196
00:11:05,399 --> 00:11:08,160
from from Powershell it can be found

197
00:11:08,160 --> 00:11:11,040
also on on GitHub it's a it's a function

198
00:11:11,040 --> 00:11:14,399
that applies layers of obfuscation over

199
00:11:14,399 --> 00:11:17,940
our Powershell scripts and this is the

200
00:11:17,940 --> 00:11:20,399
first part of our exploit the arms

201
00:11:20,399 --> 00:11:25,940
bypass we successfully bypassed the

202
00:11:25,980 --> 00:11:28,920
um the main in the middle between our

203
00:11:28,920 --> 00:11:31,320
antiviral and the scripts that we are

204
00:11:31,320 --> 00:11:33,500
running

205
00:11:33,720 --> 00:11:36,959
next execution policy bypass what is

206
00:11:36,959 --> 00:11:39,860
this execution policy bypass by default

207
00:11:39,860 --> 00:11:43,740
Windows does not permit users low

208
00:11:43,740 --> 00:11:46,380
privileged users to run Powershell

209
00:11:46,380 --> 00:11:49,860
scripts that are unsigned by an official

210
00:11:49,860 --> 00:11:53,160
provider such as Microsoft

211
00:11:53,160 --> 00:11:56,220
but unfortunately

212
00:11:56,220 --> 00:11:59,720
windows allow us as low privileged user

213
00:11:59,720 --> 00:12:05,040
to disable the execution policy for our

214
00:12:05,040 --> 00:12:06,240
user

215
00:12:06,240 --> 00:12:09,959
so attackers may just disable the

216
00:12:09,959 --> 00:12:12,600
execution policy using this one line

217
00:12:12,600 --> 00:12:13,860
command

218
00:12:13,860 --> 00:12:16,740
for the user that they are targeting we

219
00:12:16,740 --> 00:12:19,800
cannot disable it for the for the

220
00:12:19,800 --> 00:12:22,079
machine itself but we can disable it for

221
00:12:22,079 --> 00:12:24,540
the user that we are running the the

222
00:12:24,540 --> 00:12:27,839
script within that context of which in

223
00:12:27,839 --> 00:12:30,660
our case is Bob so the attacker uh

224
00:12:30,660 --> 00:12:36,079
disabled the execution policy or for Bob

225
00:12:37,079 --> 00:12:41,040
and the third step within our uh within

226
00:12:41,040 --> 00:12:43,380
a payload development would be the

227
00:12:43,380 --> 00:12:46,500
runner what is this Runner uh the runner

228
00:12:46,500 --> 00:12:51,800
allows us to insert the uh

229
00:12:51,800 --> 00:12:53,940
shellcode.payload directly into the

230
00:12:53,940 --> 00:12:57,120
memory without having any additional

231
00:12:57,120 --> 00:12:59,279
files

232
00:12:59,279 --> 00:13:03,980
is firstly we will Define a lookup func

233
00:13:03,980 --> 00:13:07,440
in order to search for assembly

234
00:13:07,440 --> 00:13:11,459
references later within our payload uh

235
00:13:11,459 --> 00:13:13,740
we don't have enough time but this this

236
00:13:13,740 --> 00:13:16,980
function as a summary these functions uh

237
00:13:16,980 --> 00:13:20,940
check the the system check the system

238
00:13:20,940 --> 00:13:23,760
for any assembly references that will

239
00:13:23,760 --> 00:13:26,880
take later into into our payload and use

240
00:13:26,880 --> 00:13:28,680
them

241
00:13:28,680 --> 00:13:32,639
get delegate type this function should

242
00:13:32,639 --> 00:13:34,800
be should be defined within Powershell

243
00:13:34,800 --> 00:13:39,000
because Powershell does not know some

244
00:13:39,000 --> 00:13:42,120
argument types that are used commonly in

245
00:13:42,120 --> 00:13:45,839
C sharp for example pointer partial does

246
00:13:45,839 --> 00:13:48,300
not know about the C sharp pointer so we

247
00:13:48,300 --> 00:13:51,240
need the function that defines all those

248
00:13:51,240 --> 00:13:54,079
types

249
00:13:54,360 --> 00:13:57,959
then we have the actual payload Runner

250
00:13:57,959 --> 00:14:01,620
which injects our final shell code to

251
00:14:01,620 --> 00:14:04,079
the into the memory

252
00:14:04,079 --> 00:14:08,579
we take a unwritable memory we allocate

253
00:14:08,579 --> 00:14:11,360
it within within the machine

254
00:14:11,360 --> 00:14:15,480
using uh using virtual lock that we just

255
00:14:15,480 --> 00:14:17,639
defined previously

256
00:14:17,639 --> 00:14:20,459
then we generate the payload for example

257
00:14:20,459 --> 00:14:24,300
using msv Venom a simple metal printer

258
00:14:24,300 --> 00:14:28,980
payload that is that is caught by by any

259
00:14:28,980 --> 00:14:30,320
antivirus

260
00:14:30,320 --> 00:14:35,339
today like it's very very basic

261
00:14:35,339 --> 00:14:38,639
and then inject that using Marshall copy

262
00:14:38,639 --> 00:14:41,399
into our previously allocated memory

263
00:14:41,399 --> 00:14:42,560
space

264
00:14:42,560 --> 00:14:48,000
and we can we can invoke it later and

265
00:14:48,000 --> 00:14:50,519
here we are using the get delegate type

266
00:14:50,519 --> 00:14:52,800
to

267
00:14:52,800 --> 00:14:53,399
um

268
00:14:53,399 --> 00:14:56,880
to provide Arguments for the invoke

269
00:14:56,880 --> 00:15:00,180
function argument types that are not

270
00:15:00,180 --> 00:15:04,199
known Powershell but they are they are

271
00:15:04,199 --> 00:15:09,560
defined in C sharp like uh pointers and

272
00:15:09,560 --> 00:15:13,920
integers so we we take that and we

273
00:15:13,920 --> 00:15:16,980
provide them as Arguments for our invoke

274
00:15:16,980 --> 00:15:18,720
function

275
00:15:18,720 --> 00:15:23,040
and now uh we should put everything on

276
00:15:23,040 --> 00:15:25,920
on a small device and let me bring the

277
00:15:25,920 --> 00:15:29,599
the small device real quick

278
00:15:30,720 --> 00:15:32,899
foreign

279
00:15:37,500 --> 00:15:40,079
so we have this small device right here

280
00:15:40,079 --> 00:15:44,040
which looks like the normal USB like

281
00:15:44,040 --> 00:15:48,480
real normal USB and we can put

282
00:15:48,480 --> 00:15:50,940
everything that we've seen previously on

283
00:15:50,940 --> 00:15:53,360
this device

284
00:15:53,519 --> 00:15:54,620
so

285
00:15:54,620 --> 00:15:58,860
firstly you remember that the the

286
00:15:58,860 --> 00:16:01,980
payload was successfully run but the

287
00:16:01,980 --> 00:16:05,339
organization had policies to restrict

288
00:16:05,339 --> 00:16:09,120
removable media storage so why why did

289
00:16:09,120 --> 00:16:10,260
it

290
00:16:10,260 --> 00:16:13,079
actually this is not a removable media

291
00:16:13,079 --> 00:16:13,940
storage

292
00:16:13,940 --> 00:16:18,000
it's a simulation of a mouse and a

293
00:16:18,000 --> 00:16:21,300
keyboard here we have an Arduino

294
00:16:21,300 --> 00:16:25,740
Arduino board within the USB that takes

295
00:16:25,740 --> 00:16:28,760
the keyboard.hash and mouse.hash

296
00:16:28,760 --> 00:16:33,120
functions to libraries sorry those

297
00:16:33,120 --> 00:16:35,160
libraries and takes the functions from

298
00:16:35,160 --> 00:16:37,139
those to simulate

299
00:16:37,139 --> 00:16:41,220
choice of insert some keystrokes or to

300
00:16:41,220 --> 00:16:44,279
move the mouse of the compromised of the

301
00:16:44,279 --> 00:16:47,040
compromised user

302
00:16:47,040 --> 00:16:49,860
how can we how can you we develop

303
00:16:49,860 --> 00:16:51,420
Scripts

304
00:16:51,420 --> 00:16:54,300
actually we have two options we can use

305
00:16:54,300 --> 00:16:56,880
the digi spark scripts which are Arduino

306
00:16:56,880 --> 00:17:00,300
uh screen and they are they are scripted

307
00:17:00,300 --> 00:17:03,959
in C plus plus or we can docky script

308
00:17:03,959 --> 00:17:07,919
those documents are mainly used for

309
00:17:07,919 --> 00:17:10,679
rubber ducky payloads which are similar

310
00:17:10,679 --> 00:17:14,640
to to those bad USBS but they are more

311
00:17:14,640 --> 00:17:17,280
expensive than a bad USB because a bad

312
00:17:17,280 --> 00:17:21,480
USB can be bought for like one dollar or

313
00:17:21,480 --> 00:17:24,480
maximum two dollars while rubber duckies

314
00:17:24,480 --> 00:17:27,959
can be bought for 20 30 depending on

315
00:17:27,959 --> 00:17:30,419
where you are located in the world so

316
00:17:30,419 --> 00:17:35,280
those are much uh much cheaper but they

317
00:17:35,280 --> 00:17:37,500
came from China so you need to

318
00:17:37,500 --> 00:17:40,620
investigate a little bit for before with

319
00:17:40,620 --> 00:17:43,320
them for example mine had the command

320
00:17:43,320 --> 00:17:46,860
and control reverse callback to

321
00:17:46,860 --> 00:17:50,100
the addresses so I had to test it within

322
00:17:50,100 --> 00:17:53,100
a local sandbox

323
00:17:53,100 --> 00:17:56,580
and uh going back to our discussion

324
00:17:56,580 --> 00:17:59,340
we'll use the the docky script we'll

325
00:17:59,340 --> 00:18:01,980
code our final payload in docky script

326
00:18:01,980 --> 00:18:06,679
and we'll transform it to digispark

327
00:18:06,679 --> 00:18:10,919
and using this uh dakuino which is an

328
00:18:10,919 --> 00:18:13,500
open source project can be found uh

329
00:18:13,500 --> 00:18:16,740
through GitHub and you just insert the

330
00:18:16,740 --> 00:18:19,919
docky script and then it will compile

331
00:18:19,919 --> 00:18:23,360
into Arduino code

332
00:18:23,580 --> 00:18:27,960
bed USB uh and darkest

333
00:18:27,960 --> 00:18:31,020
what is the the Syntax for developing

334
00:18:31,020 --> 00:18:34,460
payloads using uh docky Scripts

335
00:18:34,460 --> 00:18:39,120
if the the string variable which what we

336
00:18:39,120 --> 00:18:42,720
type after the string will be typed by

337
00:18:42,720 --> 00:18:46,860
our USB we have also delays we have the

338
00:18:46,860 --> 00:18:50,039
the repeat Loop which allows us to uh to

339
00:18:50,039 --> 00:18:53,520
run the last command multiple times we

340
00:18:53,520 --> 00:18:57,360
we must insert our special keys that we

341
00:18:57,360 --> 00:19:00,480
see on the keyboard like enter tab shift

342
00:19:00,480 --> 00:19:02,880
control as they are typed on our

343
00:19:02,880 --> 00:19:06,480
keyboard we insert them into into our

344
00:19:06,480 --> 00:19:09,299
payload without the string without the

345
00:19:09,299 --> 00:19:12,720
string variable and the Windows key will

346
00:19:12,720 --> 00:19:14,100
be

347
00:19:14,100 --> 00:19:14,700
um

348
00:19:14,700 --> 00:19:19,520
must be inserted as a guy

349
00:19:19,520 --> 00:19:22,980
command and in order to

350
00:19:22,980 --> 00:19:25,200
to temper with the with the mouse

351
00:19:25,200 --> 00:19:28,500
locations will use Mouse underscore move

352
00:19:28,500 --> 00:19:31,799
uh and the coordinates of the of the

353
00:19:31,799 --> 00:19:36,360
mouse and L mouse or air mouse and M

354
00:19:36,360 --> 00:19:39,660
Mouse are corresponding to the mouse

355
00:19:39,660 --> 00:19:42,320
buttons

356
00:19:42,480 --> 00:19:45,299
and some tips regarding post

357
00:19:45,299 --> 00:19:47,520
exploitation that we can do after this

358
00:19:47,520 --> 00:19:49,760
attack succeeds

359
00:19:49,760 --> 00:19:53,520
we can migrate our reverse shell to to

360
00:19:53,520 --> 00:19:57,419
process such explorer.x or explorer.tex

361
00:19:57,419 --> 00:20:01,200
because it's a very very common uh

362
00:20:01,200 --> 00:20:04,460
process and it is usually

363
00:20:04,460 --> 00:20:08,700
left running uh non-stop on the on the

364
00:20:08,700 --> 00:20:09,960
target computer

365
00:20:09,960 --> 00:20:13,559
and Metasploit can help us using the the

366
00:20:13,559 --> 00:20:15,960
migrate command

367
00:20:15,960 --> 00:20:18,480
and let's let's move forward with the

368
00:20:18,480 --> 00:20:20,640
demo just one second to prepare

369
00:20:20,640 --> 00:20:23,059
everything

370
00:20:32,400 --> 00:20:36,000
okay so uh to explain you a bit we have

371
00:20:36,000 --> 00:20:38,940
here a command and control endpoint that

372
00:20:38,940 --> 00:20:43,440
will be that we'll use for uh our as our

373
00:20:43,440 --> 00:20:46,500
listener and we have the the compromise

374
00:20:46,500 --> 00:20:49,980
machine which is uh local Windows 10

375
00:20:49,980 --> 00:20:53,100
machine with a real-time protection on

376
00:20:53,100 --> 00:20:55,799
from Windows Defender

377
00:20:55,799 --> 00:21:00,299
and firstly we'll use the uh Metasploit

378
00:21:00,299 --> 00:21:02,400
framework to

379
00:21:02,400 --> 00:21:04,860
to start a listener in the upcoming

380
00:21:04,860 --> 00:21:08,460
seconds and we'll insert the debate USB

381
00:21:08,460 --> 00:21:12,120
to see how how it works with the Windows

382
00:21:12,120 --> 00:21:15,320
Defender up and running

383
00:21:16,380 --> 00:21:18,559
foreign

384
00:22:02,159 --> 00:22:05,159
USB

385
00:22:10,500 --> 00:22:13,620
and we wait for it to to load but it has

386
00:22:13,620 --> 00:22:17,418
been inserted I'm not doing anything

387
00:22:26,159 --> 00:22:28,740
this is a proof of concept that's uh it

388
00:22:28,740 --> 00:22:33,320
is slow just to show you the the payload

389
00:22:39,780 --> 00:22:43,639
and we are waiting a bit

390
00:22:51,720 --> 00:22:54,179
and there we got a shot a metal platter

391
00:22:54,179 --> 00:22:57,299
report shell Windows Defender fully

392
00:22:57,299 --> 00:23:00,120
fully running

393
00:23:00,120 --> 00:23:02,940
and that's that's basically the the

394
00:23:02,940 --> 00:23:05,460
purpose of this exploitation

395
00:23:05,460 --> 00:23:08,400
uh what we can do next we can migrate to

396
00:23:08,400 --> 00:23:10,740
another process in order to not be

397
00:23:10,740 --> 00:23:14,280
caught or just uh insert another another

398
00:23:14,280 --> 00:23:15,840
payload

399
00:23:15,840 --> 00:23:21,000
so and as you can see it's it's also a

400
00:23:21,000 --> 00:23:23,640
metal printer so it should be it should

401
00:23:23,640 --> 00:23:26,100
be caught by by most of the antivirus

402
00:23:26,100 --> 00:23:29,400
Solutions but the the

403
00:23:29,400 --> 00:23:31,620
payload was successfully running we

404
00:23:31,620 --> 00:23:36,120
disabled uh the OMSI and here here we

405
00:23:36,120 --> 00:23:39,240
are and you can drop those uh bad USPS

406
00:23:39,240 --> 00:23:42,240
like in the parking lots or at the mall

407
00:23:42,240 --> 00:23:45,900
at a very crowded uh station and things

408
00:23:45,900 --> 00:23:47,280
of the nature

409
00:23:47,280 --> 00:23:49,860
and you know what's the the dangerous

410
00:23:49,860 --> 00:23:53,940
part about it that uh I have researched

411
00:23:53,940 --> 00:23:56,640
and it's working

412
00:23:56,640 --> 00:24:01,760
it is working with office macros also

413
00:24:01,820 --> 00:24:04,679
and like when I say working it's

414
00:24:04,679 --> 00:24:07,320
actually working with most of the

415
00:24:07,320 --> 00:24:09,120
antivirus Solutions

416
00:24:09,120 --> 00:24:12,120
and one second to switch to the

417
00:24:12,120 --> 00:24:14,658
presentation

418
00:24:20,100 --> 00:24:23,460
okay so what is the prevention for those

419
00:24:23,460 --> 00:24:26,400
attacks firstly Microsoft should update

420
00:24:26,400 --> 00:24:29,400
their solution or the antivirus products

421
00:24:29,400 --> 00:24:33,419
should update their Solutions uh but for

422
00:24:33,419 --> 00:24:35,820
us as administrators or security

423
00:24:35,820 --> 00:24:39,179
Engineers we should disable Powershell

424
00:24:39,179 --> 00:24:42,360
for end users we should have access

425
00:24:42,360 --> 00:24:47,159
control lists on Mac based specific uh

426
00:24:47,159 --> 00:24:50,900
White listing for the for the USB ports

427
00:24:50,900 --> 00:24:54,299
and we should move our we should shift

428
00:24:54,299 --> 00:24:57,440
our perspective from from running

429
00:24:57,440 --> 00:25:00,360
antiviruses for our endpoints to a more

430
00:25:00,360 --> 00:25:02,700
advanced solution like an endpoint

431
00:25:02,700 --> 00:25:06,539
protection or ADR xdr and things of the

432
00:25:06,539 --> 00:25:09,600
nature and security awareness training

433
00:25:09,600 --> 00:25:13,100
for for the end users

434
00:25:13,200 --> 00:25:17,520
some research and statistics about this

435
00:25:17,520 --> 00:25:20,100
exploitation because we cannot name it

436
00:25:20,100 --> 00:25:22,320
really a vulnerability

437
00:25:22,320 --> 00:25:25,760
we can call it an exploitation thing

438
00:25:25,760 --> 00:25:29,720
was reported to Microsoft they said that

439
00:25:29,720 --> 00:25:33,620
it's basically not a not an issue

440
00:25:33,620 --> 00:25:36,360
because it requires a lot of user

441
00:25:36,360 --> 00:25:37,500
interaction

442
00:25:37,500 --> 00:25:40,380
like what user interaction do do you

443
00:25:40,380 --> 00:25:41,900
expect like

444
00:25:41,900 --> 00:25:46,919
there was a USB on the uh on the floor

445
00:25:46,919 --> 00:25:50,460
and the user picked it up and then there

446
00:25:50,460 --> 00:25:52,679
was a reverse shell like two user

447
00:25:52,679 --> 00:25:55,020
interactions pick the USB or insert the

448
00:25:55,020 --> 00:25:57,480
USB you don't want to pick up the USB

449
00:25:57,480 --> 00:26:00,179
good just deliver it directly to the

450
00:26:00,179 --> 00:26:02,400
user then you have one user interaction

451
00:26:02,400 --> 00:26:07,799
needed uh the the payload was tested on

452
00:26:07,799 --> 00:26:12,500
20 antivirus vendors uh seven on of them

453
00:26:12,500 --> 00:26:15,600
allowed us to to spawn a reversal matter

454
00:26:15,600 --> 00:26:19,020
Predator reversion then to load mimikets

455
00:26:19,020 --> 00:26:22,679
directly into the into the memory uh

456
00:26:22,679 --> 00:26:23,820
nine

457
00:26:23,820 --> 00:26:26,700
sorry nine of them allowed Us only for a

458
00:26:26,700 --> 00:26:29,640
normal reversal but that's good also so

459
00:26:29,640 --> 00:26:31,559
that's good uh

460
00:26:31,559 --> 00:26:35,520
and four of them blocked the entire

461
00:26:35,520 --> 00:26:38,880
attempt of exploitation the the attempt

462
00:26:38,880 --> 00:26:41,940
was caught during the MC bypass through

463
00:26:41,940 --> 00:26:45,120
Behavior Analysis

464
00:26:45,120 --> 00:26:48,439
and thank you very much

