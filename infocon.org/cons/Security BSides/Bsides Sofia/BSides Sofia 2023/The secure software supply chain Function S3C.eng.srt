1
00:00:02,159 --> 00:00:05,159
foreign

2
00:00:08,400 --> 00:00:11,400
er

3
00:00:11,880 --> 00:00:12,780
um

4
00:00:12,780 --> 00:00:15,719
I started my career started out as a

5
00:00:15,719 --> 00:00:17,880
support engineer then I became a

6
00:00:17,880 --> 00:00:18,960
consultant

7
00:00:18,960 --> 00:00:22,740
and now I'm this devsecops creature I'm

8
00:00:22,740 --> 00:00:24,900
saying that because there's a cops

9
00:00:24,900 --> 00:00:28,859
actually has a lot of different it's an

10
00:00:28,859 --> 00:00:29,599
inter

11
00:00:29,599 --> 00:00:32,640
interdisciplinarist field which has a

12
00:00:32,640 --> 00:00:35,340
lot of roles in itself such as

13
00:00:35,340 --> 00:00:39,480
engineering but also architecture a bit

14
00:00:39,480 --> 00:00:41,579
of operations development as the name

15
00:00:41,579 --> 00:00:43,340
implies

16
00:00:43,340 --> 00:00:47,340
and yeah I finished the implementing

17
00:00:47,340 --> 00:00:51,360
this cops Linux course which was great

18
00:00:51,360 --> 00:00:54,300
but the the funny thing is that it's so

19
00:00:54,300 --> 00:00:58,199
this this field of security is so

20
00:00:58,199 --> 00:01:02,399
Dynamic that even it contained some

21
00:01:02,399 --> 00:01:05,339
stuff that were already obsolete

22
00:01:05,339 --> 00:01:09,060
uh I know bash python I have experience

23
00:01:09,060 --> 00:01:12,420
so going through writing an application

24
00:01:12,420 --> 00:01:14,880
going through the change change

25
00:01:14,880 --> 00:01:19,439
management process at IBM and Publishing

26
00:01:19,439 --> 00:01:22,259
it to production environment and

27
00:01:22,259 --> 00:01:24,659
um yeah that's how I know a little bit

28
00:01:24,659 --> 00:01:27,420
about the from the developer side of

29
00:01:27,420 --> 00:01:28,740
things

30
00:01:28,740 --> 00:01:29,640
um

31
00:01:29,640 --> 00:01:32,580
I have varied experience in maybe a

32
00:01:32,580 --> 00:01:34,159
unique blend of different

33
00:01:34,159 --> 00:01:39,180
organizations uh private uh government

34
00:01:39,180 --> 00:01:42,000
non-government and

35
00:01:42,000 --> 00:01:45,180
really there only I would say two types

36
00:01:45,180 --> 00:01:47,400
of organizations so there are executors

37
00:01:47,400 --> 00:01:49,220
and there are

38
00:01:49,220 --> 00:01:52,259
innovators the difference being in the

39
00:01:52,259 --> 00:01:53,399
culture

40
00:01:53,399 --> 00:01:55,259
um

41
00:01:55,259 --> 00:01:58,860
but we're going to mention that a little

42
00:01:58,860 --> 00:02:01,460
bit later in during the presentation

43
00:02:01,460 --> 00:02:04,380
something about me I have a wife and a

44
00:02:04,380 --> 00:02:07,500
daughter who are in this Hall with us

45
00:02:07,500 --> 00:02:10,340
uh

46
00:02:11,720 --> 00:02:14,520
for the record

47
00:02:14,520 --> 00:02:17,099
um okay so the topics you can read them

48
00:02:17,099 --> 00:02:19,739
faster than I can say them but basically

49
00:02:19,739 --> 00:02:21,660
we are going to start off really slow

50
00:02:21,660 --> 00:02:24,000
and really basic but then we're going to

51
00:02:24,000 --> 00:02:27,560
advance uh very fast and deep dive into

52
00:02:27,560 --> 00:02:30,720
this whole area

53
00:02:30,720 --> 00:02:32,099
um

54
00:02:32,099 --> 00:02:34,200
so a bit of context

55
00:02:34,200 --> 00:02:35,040
um

56
00:02:35,040 --> 00:02:37,140
please raise your hand if you think that

57
00:02:37,140 --> 00:02:40,160
an application is a product

58
00:02:41,700 --> 00:02:44,940
here we have one two okay if you if you

59
00:02:44,940 --> 00:02:47,700
think yeah if you think if it's a

60
00:02:47,700 --> 00:02:49,940
service

61
00:02:52,620 --> 00:02:56,400
someone thinks that it could be both

62
00:02:56,400 --> 00:03:00,000
yeah okay okay that's great yeah so an

63
00:03:00,000 --> 00:03:02,160
application can be many things it can

64
00:03:02,160 --> 00:03:04,200
even uh so it

65
00:03:04,200 --> 00:03:06,239
um and when we say a product it can even

66
00:03:06,239 --> 00:03:09,019
be a physical product uh but that's

67
00:03:09,019 --> 00:03:12,300
getting uh very complicated because then

68
00:03:12,300 --> 00:03:15,239
we need to consider some safety uh

69
00:03:15,239 --> 00:03:16,860
issues

70
00:03:16,860 --> 00:03:18,659
ETC so we're not going to go there we're

71
00:03:18,659 --> 00:03:20,580
just going to focus on the software for

72
00:03:20,580 --> 00:03:23,159
this presentation but I would like to

73
00:03:23,159 --> 00:03:26,879
start actually to go back one step and

74
00:03:26,879 --> 00:03:29,099
start from the very beginning and that's

75
00:03:29,099 --> 00:03:32,599
actually an application is an agreement

76
00:03:32,599 --> 00:03:35,580
because an application does not usually

77
00:03:35,580 --> 00:03:37,680
exist in a vacuum we are sure the

78
00:03:37,680 --> 00:03:40,680
Creator can use their own application

79
00:03:40,680 --> 00:03:42,599
never share them but

80
00:03:42,599 --> 00:03:44,760
um this is not what we're speaking about

81
00:03:44,760 --> 00:03:47,519
we're speaking about even if I use an

82
00:03:47,519 --> 00:03:48,700
application which is

83
00:03:48,700 --> 00:03:49,379
[Music]

84
00:03:49,379 --> 00:03:51,000
um

85
00:03:51,000 --> 00:03:54,000
which is open source if it's free there

86
00:03:54,000 --> 00:03:55,640
is still this

87
00:03:55,640 --> 00:03:58,319
license which is provided as this

88
00:03:58,319 --> 00:04:01,620
without warranty of any kind so it's an

89
00:04:01,620 --> 00:04:03,659
agreement always

90
00:04:03,659 --> 00:04:06,900
uh but yeah we're going to go for uh

91
00:04:06,900 --> 00:04:08,580
we're going to examine the open source

92
00:04:08,580 --> 00:04:10,620
applications a bit later in this in this

93
00:04:10,620 --> 00:04:11,700
talk

94
00:04:11,700 --> 00:04:13,260
um

95
00:04:13,260 --> 00:04:15,360
on the other side there's the commercial

96
00:04:15,360 --> 00:04:18,358
uh applications which have different

97
00:04:18,358 --> 00:04:20,639
business models and we need to be aware

98
00:04:20,639 --> 00:04:23,880
of those uh because uh like if if we're

99
00:04:23,880 --> 00:04:26,040
tasked with protecting them

100
00:04:26,040 --> 00:04:30,419
um so yeah uh traditionally in uh

101
00:04:30,419 --> 00:04:33,479
transact one-time transaction uh now

102
00:04:33,479 --> 00:04:35,820
it's the more modern approaches pay as

103
00:04:35,820 --> 00:04:39,120
you use it or as we also know it as as a

104
00:04:39,120 --> 00:04:41,600
service and then there is a subscription

105
00:04:41,600 --> 00:04:45,360
but really maybe what most people would

106
00:04:45,360 --> 00:04:48,180
expect from a presentation about this is

107
00:04:48,180 --> 00:04:49,860
the technical side of things an

108
00:04:49,860 --> 00:04:52,220
application is an interface

109
00:04:52,220 --> 00:04:56,580
it's a bridge between the two sides the

110
00:04:56,580 --> 00:04:58,800
producer and the consumer

111
00:04:58,800 --> 00:05:00,060
um

112
00:05:00,060 --> 00:05:04,919
so what does securing applications mean

113
00:05:04,919 --> 00:05:08,340
um basically if if I'm

114
00:05:08,340 --> 00:05:10,740
predict so if I work at the security

115
00:05:10,740 --> 00:05:14,520
operations center then I would protect

116
00:05:14,520 --> 00:05:16,320
the organization I would protect the

117
00:05:16,320 --> 00:05:20,160
assets uh the servers the workstations

118
00:05:20,160 --> 00:05:22,199
the bring your own devices the mobile

119
00:05:22,199 --> 00:05:24,380
phones is all that

120
00:05:24,380 --> 00:05:29,160
if I'm a consultant I would protect the

121
00:05:29,160 --> 00:05:32,479
the customers of my organization uh

122
00:05:32,479 --> 00:05:34,740
obviously I I could protect the

123
00:05:34,740 --> 00:05:37,860
organization itself as well but I'm not

124
00:05:37,860 --> 00:05:39,720
expected to do it and I'm not getting

125
00:05:39,720 --> 00:05:43,259
paid that I'm uh like I'm protecting the

126
00:05:43,259 --> 00:05:46,080
customers but if I if I am protecting an

127
00:05:46,080 --> 00:05:48,300
application I'm actually protecting both

128
00:05:48,300 --> 00:05:52,800
sides because remember it's a bridge so

129
00:05:52,800 --> 00:05:54,979
there's no other way to do it

130
00:05:54,979 --> 00:05:58,139
so how are applications built

131
00:05:58,139 --> 00:06:00,720
um well we could imagine some technical

132
00:06:00,720 --> 00:06:03,300
genius that created their own operating

133
00:06:03,300 --> 00:06:05,759
system their own language programming

134
00:06:05,759 --> 00:06:08,160
language that is and they write some

135
00:06:08,160 --> 00:06:10,500
complex

136
00:06:10,500 --> 00:06:14,220
complex applications but the issue with

137
00:06:14,220 --> 00:06:16,979
people is that we do not scale so we

138
00:06:16,979 --> 00:06:18,600
need to work together to produce

139
00:06:18,600 --> 00:06:22,319
something uh really massive and at large

140
00:06:22,319 --> 00:06:26,639
scale and reliable so we share we share

141
00:06:26,639 --> 00:06:31,319
a lot of the code that we that we a lot

142
00:06:31,319 --> 00:06:33,199
of the logic that we

143
00:06:33,199 --> 00:06:36,319
found by trial and error

144
00:06:36,319 --> 00:06:39,539
and there are a lot of teams like front

145
00:06:39,539 --> 00:06:42,840
and back and QA Etc that are all working

146
00:06:42,840 --> 00:06:44,940
together towards this

147
00:06:44,940 --> 00:06:46,259
um

148
00:06:46,259 --> 00:06:49,620
so yeah and obviously there is the

149
00:06:49,620 --> 00:06:51,780
economy side of things where

150
00:06:51,780 --> 00:06:52,740
um

151
00:06:52,740 --> 00:06:55,440
we are

152
00:06:55,440 --> 00:06:57,120
um yeah obviously

153
00:06:57,120 --> 00:06:59,400
the the organization which we are

154
00:06:59,400 --> 00:07:01,440
predicting cannot operate for a long

155
00:07:01,440 --> 00:07:03,720
time without any Revenue so there are

156
00:07:03,720 --> 00:07:06,000
usually some deadlines not everyone is

157
00:07:06,000 --> 00:07:08,520
Blizzard where they say well it's going

158
00:07:08,520 --> 00:07:12,300
to be done when it's ready most most of

159
00:07:12,300 --> 00:07:14,759
the organizations have some sort of uh

160
00:07:14,759 --> 00:07:19,319
deadline so yeah we we share uh the

161
00:07:19,319 --> 00:07:21,900
logic that we found uh because because

162
00:07:21,900 --> 00:07:24,840
of the economy but also because

163
00:07:24,840 --> 00:07:28,199
um obviously for the reliability The

164
00:07:28,199 --> 00:07:31,919
Proven results and hopefully for a

165
00:07:31,919 --> 00:07:33,740
security

166
00:07:33,740 --> 00:07:37,560
so why why supply chain has an attack

167
00:07:37,560 --> 00:07:40,020
Vector well because

168
00:07:40,020 --> 00:07:42,840
um you could Target one organization and

169
00:07:42,840 --> 00:07:46,440
impact uh a lot more even you could

170
00:07:46,440 --> 00:07:48,780
impact like it's a bit chaotic because

171
00:07:48,780 --> 00:07:51,360
you never know who you end up impacting

172
00:07:51,360 --> 00:07:54,419
because it it do not you cannot possibly

173
00:07:54,419 --> 00:07:58,139
know all the clients uh victim supplier

174
00:07:58,139 --> 00:07:59,819
could have

175
00:07:59,819 --> 00:08:01,259
um

176
00:08:01,259 --> 00:08:05,340
so sonotype the the software and

177
00:08:05,340 --> 00:08:08,280
security vendor actually came up with

178
00:08:08,280 --> 00:08:11,099
two three phases of the supply chain

179
00:08:11,099 --> 00:08:14,400
attacks the first one is they call the

180
00:08:14,400 --> 00:08:18,300
zero day which is basically to find some

181
00:08:18,300 --> 00:08:21,120
unknown vulnerability which uh even the

182
00:08:21,120 --> 00:08:24,060
the supplier this is not aware of and

183
00:08:24,060 --> 00:08:25,979
there's good reason for that actually in

184
00:08:25,979 --> 00:08:28,520
the black market that

185
00:08:28,520 --> 00:08:31,440
these types of vulnerabilities can be

186
00:08:31,440 --> 00:08:34,679
traded for a huge uh prices like

187
00:08:34,679 --> 00:08:37,679
thousands maybe thousands of dollars or

188
00:08:37,679 --> 00:08:40,500
tens of thousands of dollars or whatever

189
00:08:40,500 --> 00:08:41,360
um

190
00:08:41,360 --> 00:08:45,300
and we all know love for sure uh we all

191
00:08:45,300 --> 00:08:48,300
experience that and

192
00:08:48,300 --> 00:08:51,660
the the sad news is that even one year

193
00:08:51,660 --> 00:08:54,720
or more later uh some some people are

194
00:08:54,720 --> 00:08:57,300
still downloading the vulnerable uh

195
00:08:57,300 --> 00:08:59,339
versions of it

196
00:08:59,339 --> 00:09:01,920
um so we have according to sonotype we

197
00:09:01,920 --> 00:09:03,540
have the second phase which is the

198
00:09:03,540 --> 00:09:05,640
actual supply chain

199
00:09:05,640 --> 00:09:08,040
um so

200
00:09:08,040 --> 00:09:10,920
um malicious actors quickly realized

201
00:09:10,920 --> 00:09:13,560
that well there are some very popular

202
00:09:13,560 --> 00:09:16,980
packages so if we actually compromise

203
00:09:16,980 --> 00:09:20,459
one of them we can reach millions of

204
00:09:20,459 --> 00:09:22,800
developers and thousands of

205
00:09:22,800 --> 00:09:25,380
organizations so

206
00:09:25,380 --> 00:09:26,519
um

207
00:09:26,519 --> 00:09:28,980
yeah that's pretty bad sounds pretty bad

208
00:09:28,980 --> 00:09:31,620
then there's this third phase which is

209
00:09:31,620 --> 00:09:33,660
the corporate developer and

210
00:09:33,660 --> 00:09:36,480
um these phases are actually they I

211
00:09:36,480 --> 00:09:38,160
don't think any of them has finished

212
00:09:38,160 --> 00:09:39,860
they're just like

213
00:09:39,860 --> 00:09:43,680
they can some type uh describe them in

214
00:09:43,680 --> 00:09:45,360
this way and then there's the corporate

215
00:09:45,360 --> 00:09:48,420
developer which who

216
00:09:48,420 --> 00:09:50,940
so in this case there are dependency

217
00:09:50,940 --> 00:09:53,519
confusion attacks which saw an explosion

218
00:09:53,519 --> 00:09:58,019
of uh hundreds of so each year they grow

219
00:09:58,019 --> 00:10:00,360
exponentially

220
00:10:00,360 --> 00:10:02,220
so how can we protect the applications

221
00:10:02,220 --> 00:10:03,440
then

222
00:10:03,440 --> 00:10:06,019
there are different

223
00:10:06,019 --> 00:10:10,680
approaches to this question one is often

224
00:10:10,680 --> 00:10:13,260
centered on the devops like you just

225
00:10:13,260 --> 00:10:15,360
inject different security measures into

226
00:10:15,360 --> 00:10:18,140
the infinity infinite

227
00:10:18,140 --> 00:10:20,540
infinite Loop

228
00:10:20,540 --> 00:10:23,760
there is the secure software development

229
00:10:23,760 --> 00:10:25,560
lifecycle which is more of a management

230
00:10:25,560 --> 00:10:28,320
approach to this and it really focuses

231
00:10:28,320 --> 00:10:31,279
on the whole application life cycle

232
00:10:31,279 --> 00:10:34,140
we have also the salsa it's pronounced

233
00:10:34,140 --> 00:10:36,959
also even though the acronym is not

234
00:10:36,959 --> 00:10:40,500
really reflecting the the whole frame

235
00:10:40,500 --> 00:10:42,180
the name of the framework but it's

236
00:10:42,180 --> 00:10:44,760
separate on the build

237
00:10:44,760 --> 00:10:45,839
um

238
00:10:45,839 --> 00:10:48,959
so the levels of for artifacts is a

239
00:10:48,959 --> 00:10:51,600
great great framework and if you go to

240
00:10:51,600 --> 00:10:53,459
their website they have very good

241
00:10:53,459 --> 00:10:56,459
explanations and great examples

242
00:10:56,459 --> 00:10:58,740
um but the issue there is one issue

243
00:10:58,740 --> 00:10:59,519
though

244
00:10:59,519 --> 00:11:02,640
um and that is that the using compromise

245
00:11:02,640 --> 00:11:05,820
dependencies is mentioned only in the

246
00:11:05,820 --> 00:11:09,420
fifth step so in their point of view the

247
00:11:09,420 --> 00:11:13,740
source like source code is only the code

248
00:11:13,740 --> 00:11:19,140
that the we our developers write and

249
00:11:19,380 --> 00:11:23,399
there that's too late and that's that's

250
00:11:23,399 --> 00:11:24,899
the wrong way to think about it and it's

251
00:11:24,899 --> 00:11:27,060
too late as the fifth step

252
00:11:27,060 --> 00:11:30,600
um as uh for for two reasons uh one of

253
00:11:30,600 --> 00:11:32,160
them is that

254
00:11:32,160 --> 00:11:34,019
um if you're a developer you would it

255
00:11:34,019 --> 00:11:35,880
would be pretty obvious to you because

256
00:11:35,880 --> 00:11:38,459
uh you're writing your code uh so you're

257
00:11:38,459 --> 00:11:42,360
building upon some uh shared library and

258
00:11:42,360 --> 00:11:43,320
uh

259
00:11:43,320 --> 00:11:46,019
then you put so you spend some hours

260
00:11:46,019 --> 00:11:49,260
doing the logic and then you push it and

261
00:11:49,260 --> 00:11:51,300
because that's where usually the

262
00:11:51,300 --> 00:11:54,240
scanning takes place it's at the source

263
00:11:54,240 --> 00:11:57,839
uh control versioning system

264
00:11:57,839 --> 00:12:00,360
um so it's only then that you realize

265
00:12:00,360 --> 00:12:03,060
that well there's some issue with this

266
00:12:03,060 --> 00:12:05,399
Library so now you have to go back and

267
00:12:05,399 --> 00:12:08,279
rework uh it may be that you need to

268
00:12:08,279 --> 00:12:12,720
change the the dependency and well

269
00:12:12,720 --> 00:12:15,120
there's the risk that the newer version

270
00:12:15,120 --> 00:12:17,459
is not backwards compatible with the

271
00:12:17,459 --> 00:12:18,899
previous one

272
00:12:18,899 --> 00:12:22,500
um that you were using etc etc it's so

273
00:12:22,500 --> 00:12:25,380
but maybe the not so obvious uh problem

274
00:12:25,380 --> 00:12:28,140
with this is that um

275
00:12:28,140 --> 00:12:31,560
it you could be violating a license

276
00:12:31,560 --> 00:12:33,600
without even realizing it because you

277
00:12:33,600 --> 00:12:36,060
never checked and this would result in

278
00:12:36,060 --> 00:12:39,180
the revocation of this lessons so

279
00:12:39,180 --> 00:12:40,620
um you know a whole organization could

280
00:12:40,620 --> 00:12:43,320
spend a lot of resources on developing

281
00:12:43,320 --> 00:12:47,279
their product and in the end uh they

282
00:12:47,279 --> 00:12:50,220
cannot they need to re-architect it and

283
00:12:50,220 --> 00:12:53,579
rework it because they relied on some uh

284
00:12:53,579 --> 00:12:55,920
like in this case it was nutanix it

285
00:12:55,920 --> 00:12:58,440
relied on Min IO probably in this case

286
00:12:58,440 --> 00:13:00,600
they they knew that they were breaching

287
00:13:00,600 --> 00:13:03,540
it but still it's a it's a powerful

288
00:13:03,540 --> 00:13:06,540
example of uh the need the risk of

289
00:13:06,540 --> 00:13:09,439
licenses

290
00:13:09,480 --> 00:13:12,300
um all this brings us to

291
00:13:12,300 --> 00:13:14,420
um

292
00:13:14,579 --> 00:13:18,600
to trying to figure out okay so I'm

293
00:13:18,600 --> 00:13:22,860
devsecops engineer or yeah practitioner

294
00:13:22,860 --> 00:13:25,980
um so what do I need to do like how how

295
00:13:25,980 --> 00:13:29,040
can I explain these things uh in uh in a

296
00:13:29,040 --> 00:13:31,260
better way in a more understandable way

297
00:13:31,260 --> 00:13:33,380
because actually yeah

298
00:13:33,380 --> 00:13:35,700
you have the devops Centric one the

299
00:13:35,700 --> 00:13:38,279
management Centric one and the more like

300
00:13:38,279 --> 00:13:40,800
technical focused one like from the

301
00:13:40,800 --> 00:13:44,040
approaches so we have so this is what I

302
00:13:44,040 --> 00:13:47,339
came up with it's um actually very

303
00:13:47,339 --> 00:13:49,800
simple and that's the whole point behind

304
00:13:49,800 --> 00:13:52,560
it it's a function so every developer is

305
00:13:52,560 --> 00:13:54,899
aware of what the function is and this

306
00:13:54,899 --> 00:13:56,160
is actually the easiest way to explain

307
00:13:56,160 --> 00:13:59,100
uh what devsecops is

308
00:13:59,100 --> 00:14:01,260
um so you have the input you have the

309
00:14:01,260 --> 00:14:02,700
research and development and you have

310
00:14:02,700 --> 00:14:06,120
the output and this is not necessarily a

311
00:14:06,120 --> 00:14:08,940
technical uh way like model mental model

312
00:14:08,940 --> 00:14:12,120
to see things because you can because in

313
00:14:12,120 --> 00:14:15,200
the input we have also the customer

314
00:14:15,200 --> 00:14:17,459
requirements or the product management

315
00:14:17,459 --> 00:14:20,600
requirements and we also have the

316
00:14:20,600 --> 00:14:24,300
reference architecture so it's really

317
00:14:24,300 --> 00:14:28,380
it's I'm trying to to make it more

318
00:14:28,380 --> 00:14:31,980
realistic the other stuff we're probably

319
00:14:31,980 --> 00:14:34,860
aware of it of most of it

320
00:14:34,860 --> 00:14:35,760
um

321
00:14:35,760 --> 00:14:37,860
so this is the

322
00:14:37,860 --> 00:14:40,800
so this is my idea and in the next

323
00:14:40,800 --> 00:14:44,459
slides I'm going to share a bit of

324
00:14:44,459 --> 00:14:47,279
experience with actually implementing

325
00:14:47,279 --> 00:14:48,959
this

326
00:14:48,959 --> 00:14:51,779
so we have the input okay uh licenses

327
00:14:51,779 --> 00:14:54,420
again so we need to understand what the

328
00:14:54,420 --> 00:14:56,699
licenses there are what types of them

329
00:14:56,699 --> 00:14:59,040
some some are more permissive which is

330
00:14:59,040 --> 00:15:02,399
great especially uh Linux foundation and

331
00:15:02,399 --> 00:15:04,260
Cloud native Computing Foundation

332
00:15:04,260 --> 00:15:07,579
licenses which are usually Apache too as

333
00:15:07,579 --> 00:15:11,699
the graphic shows but increasingly

334
00:15:11,699 --> 00:15:14,040
businesses are using a dual model of

335
00:15:14,040 --> 00:15:15,959
license sync which means that they have

336
00:15:15,959 --> 00:15:19,860
an open source offer which is sort of to

337
00:15:19,860 --> 00:15:23,399
hook you up and to but also to like just

338
00:15:23,399 --> 00:15:27,779
rank in um developing together and they

339
00:15:27,779 --> 00:15:30,420
have a paid version which is managed for

340
00:15:30,420 --> 00:15:32,760
those users who are maybe don't have the

341
00:15:32,760 --> 00:15:34,980
time or resources to to deal with the

342
00:15:34,980 --> 00:15:36,260
free version

343
00:15:36,260 --> 00:15:39,839
and GitHub has a pretty good

344
00:15:39,839 --> 00:15:42,360
assistant with that with the permissions

345
00:15:42,360 --> 00:15:44,579
limitations and conditions

346
00:15:44,579 --> 00:15:47,100
um interestingly a lot of people are

347
00:15:47,100 --> 00:15:50,480
using Docker desktop but many uh but

348
00:15:50,480 --> 00:15:53,579
maybe not so many remember that they

349
00:15:53,579 --> 00:15:55,740
actually changed their licenses so even

350
00:15:55,740 --> 00:15:58,740
though Docker engine is free to use and

351
00:15:58,740 --> 00:16:02,240
it can be like used in the build server

352
00:16:02,240 --> 00:16:04,680
at the actual Docker desktop with the

353
00:16:04,680 --> 00:16:07,740
graphq user interface is not free and so

354
00:16:07,740 --> 00:16:09,420
yeah this is something that we should be

355
00:16:09,420 --> 00:16:10,560
aware of

356
00:16:10,560 --> 00:16:14,100
uh okay so we chose the software that we

357
00:16:14,100 --> 00:16:16,139
want to use and actually

358
00:16:16,139 --> 00:16:19,079
um this is very important to have great

359
00:16:19,079 --> 00:16:20,579
communication with your developers

360
00:16:20,579 --> 00:16:21,839
because

361
00:16:21,839 --> 00:16:25,380
um if they somehow let you notify you

362
00:16:25,380 --> 00:16:28,079
about the software that they're planning

363
00:16:28,079 --> 00:16:30,120
to use then you can check it in advance

364
00:16:30,120 --> 00:16:33,480
and save them a lot of save them some of

365
00:16:33,480 --> 00:16:34,500
the risk

366
00:16:34,500 --> 00:16:37,320
so we chose our software and then we

367
00:16:37,320 --> 00:16:38,100
start

368
00:16:38,100 --> 00:16:38,759
um

369
00:16:38,759 --> 00:16:41,279
and then we are then then we downloaded

370
00:16:41,279 --> 00:16:42,199
it

371
00:16:42,199 --> 00:16:45,839
and we verified the hash of the like the

372
00:16:45,839 --> 00:16:48,839
checksum of the file for the Integrity

373
00:16:48,839 --> 00:16:50,279
but

374
00:16:50,279 --> 00:16:53,220
um that only tells us that the software

375
00:16:53,220 --> 00:16:54,000
is

376
00:16:54,000 --> 00:16:57,899
um the the one that the Creator

377
00:16:57,899 --> 00:16:59,639
um was

378
00:16:59,639 --> 00:17:02,940
um like we we have some assurance that

379
00:17:02,940 --> 00:17:05,699
this is a software that we want but it

380
00:17:05,699 --> 00:17:07,980
doesn't tell us much about much much

381
00:17:07,980 --> 00:17:11,819
else so a great example with the in

382
00:17:11,819 --> 00:17:13,679
during log per share is that actually

383
00:17:13,679 --> 00:17:17,640
the the login library was borrowed in

384
00:17:17,640 --> 00:17:21,240
almost 800 other projects and uh and

385
00:17:21,240 --> 00:17:24,720
seen in over 90 000 individual

386
00:17:24,720 --> 00:17:27,740
components so in order to understand

387
00:17:27,740 --> 00:17:28,559
[Music]

388
00:17:28,559 --> 00:17:29,160
um

389
00:17:29,160 --> 00:17:31,679
like what we are what we have what we

390
00:17:31,679 --> 00:17:34,620
are protecting we really need something

391
00:17:34,620 --> 00:17:37,320
different like not just the checksum

392
00:17:37,320 --> 00:17:39,059
um

393
00:17:39,059 --> 00:17:42,360
and this is yeah uh so that's why we

394
00:17:42,360 --> 00:17:43,799
have the software bill of materials

395
00:17:43,799 --> 00:17:48,000
actually uh it the practice of software

396
00:17:48,000 --> 00:17:50,160
composition analysis was uh something

397
00:17:50,160 --> 00:17:52,980
that existed for years but only after

398
00:17:52,980 --> 00:17:57,360
only uh because of uh look for Shell

399
00:17:57,360 --> 00:17:59,039
um a lot of people started paying

400
00:17:59,039 --> 00:18:01,559
attention including regulators and so

401
00:18:01,559 --> 00:18:04,020
they came up with this name

402
00:18:04,020 --> 00:18:05,640
um

403
00:18:05,640 --> 00:18:08,280
so there are three types three main

404
00:18:08,280 --> 00:18:11,460
times to to create a software materials

405
00:18:11,460 --> 00:18:15,419
one is to just scan the static Source uh

406
00:18:15,419 --> 00:18:18,059
using a tool such as Swift which is very

407
00:18:18,059 --> 00:18:19,380
famous

408
00:18:19,380 --> 00:18:21,900
um but that wouldn't really that

409
00:18:21,900 --> 00:18:24,299
wouldn't necessarily tell you which

410
00:18:24,299 --> 00:18:25,679
um

411
00:18:25,679 --> 00:18:28,740
which libraries are actually used during

412
00:18:28,740 --> 00:18:31,320
runtime so that so there's also this

413
00:18:31,320 --> 00:18:33,600
great tool called j-bomb by contrast

414
00:18:33,600 --> 00:18:35,039
security

415
00:18:35,039 --> 00:18:37,320
um that can do just that but it's only

416
00:18:37,320 --> 00:18:40,320
for Java but probably they're going to

417
00:18:40,320 --> 00:18:43,440
be more such tools in the future

418
00:18:43,440 --> 00:18:46,500
okay so we have uh so we have the

419
00:18:46,500 --> 00:18:49,760
software so we know what is inside the

420
00:18:49,760 --> 00:18:54,059
the dependency that we rely on uh but

421
00:18:54,059 --> 00:18:55,740
what do we do with this

422
00:18:55,740 --> 00:18:57,360
um well fortunately there's a great open

423
00:18:57,360 --> 00:19:00,179
source project called the OAS so open

424
00:19:00,179 --> 00:19:02,280
web application security Foundation

425
00:19:02,280 --> 00:19:07,440
dependency track uh which is acts as a

426
00:19:07,440 --> 00:19:10,260
central repository of uh such abuse of

427
00:19:10,260 --> 00:19:15,960
materials uh it's awesome it it does it

428
00:19:15,960 --> 00:19:18,900
so it is it has a different logic to it

429
00:19:18,900 --> 00:19:22,380
you don't scan the uh the view of

430
00:19:22,380 --> 00:19:24,539
materials during the build time for

431
00:19:24,539 --> 00:19:27,600
vulnerabilities and fail the build if

432
00:19:27,600 --> 00:19:29,700
there are if critical vulnerabilities

433
00:19:29,700 --> 00:19:33,660
are found uh usually but actually what

434
00:19:33,660 --> 00:19:36,360
it does is that it checks it continues

435
00:19:36,360 --> 00:19:39,600
and it continuously connects to the

436
00:19:39,600 --> 00:19:44,460
usual vulnerability databases to find

437
00:19:44,460 --> 00:19:47,160
um to match

438
00:19:47,160 --> 00:19:49,080
the non-vulnerabilities to the used

439
00:19:49,080 --> 00:19:52,880
components so you get up-to-date

440
00:19:52,880 --> 00:19:55,620
information about it

441
00:19:55,620 --> 00:19:57,600
uh the bad thing about is that it does

442
00:19:57,600 --> 00:20:00,120
not export reports out of the box and

443
00:20:00,120 --> 00:20:01,500
you cannot filter based on

444
00:20:01,500 --> 00:20:03,299
vulnerabilities in the UI which is

445
00:20:03,299 --> 00:20:05,640
something that is strange that's missing

446
00:20:05,640 --> 00:20:08,940
but hey it's uh open free

447
00:20:08,940 --> 00:20:09,840
um

448
00:20:09,840 --> 00:20:13,740
so we have created the inventory we have

449
00:20:13,740 --> 00:20:16,200
scanned it for like for

450
00:20:16,200 --> 00:20:19,200
non-vulnerabilities now it's time to

451
00:20:19,200 --> 00:20:21,000
Aggregate and prioritize the

452
00:20:21,000 --> 00:20:24,900
vulnerabilities and not always the it's

453
00:20:24,900 --> 00:20:27,419
the developers or the security Personnel

454
00:20:27,419 --> 00:20:30,260
who make that decision

455
00:20:30,260 --> 00:20:34,200
and finally we remediate them but if you

456
00:20:34,200 --> 00:20:36,419
consider the number of applications that

457
00:20:36,419 --> 00:20:38,220
we are using the number of depend

458
00:20:38,220 --> 00:20:39,900
multiply that by the number of

459
00:20:39,900 --> 00:20:42,299
dependencies there are and multiply that

460
00:20:42,299 --> 00:20:45,240
by the regular updates that each of

461
00:20:45,240 --> 00:20:48,000
those dependencies has it's just too

462
00:20:48,000 --> 00:20:50,700
much so we need to use some automated

463
00:20:50,700 --> 00:20:55,559
solution such as those which are visible

464
00:20:55,559 --> 00:20:57,900
so the consumption framework

465
00:20:57,900 --> 00:20:58,919
um

466
00:20:58,919 --> 00:21:00,679
is the great

467
00:21:00,679 --> 00:21:03,120
maturity roadmap that was originally

468
00:21:03,120 --> 00:21:06,120
developed by Microsoft and it was

469
00:21:06,120 --> 00:21:09,720
donated to the opens software security

470
00:21:09,720 --> 00:21:13,559
Foundation uh some of the the first two

471
00:21:13,559 --> 00:21:15,960
levels we already mentioned

472
00:21:15,960 --> 00:21:17,220
um

473
00:21:17,220 --> 00:21:21,240
but what's uh also great about this is

474
00:21:21,240 --> 00:21:24,960
that we really begin to think about how

475
00:21:24,960 --> 00:21:25,679
um

476
00:21:25,679 --> 00:21:28,799
as I mentioned so application or shared

477
00:21:28,799 --> 00:21:31,919
logic shared code is some sort of a

478
00:21:31,919 --> 00:21:33,539
bridge or an interface between

479
00:21:33,539 --> 00:21:36,659
organizations so if we are using some

480
00:21:36,659 --> 00:21:40,020
external application then we really need

481
00:21:40,020 --> 00:21:43,620
to think about we're having a sort of a

482
00:21:43,620 --> 00:21:46,260
database of the relationships with the

483
00:21:46,260 --> 00:21:47,640
different businesses who the contact

484
00:21:47,640 --> 00:21:50,220
person is for that business uh in so

485
00:21:50,220 --> 00:21:53,340
that in case something happens we know

486
00:21:53,340 --> 00:21:55,919
who to contact quickly

487
00:21:55,919 --> 00:22:00,559
um and then the the next two levels are

488
00:22:00,559 --> 00:22:03,780
like very Advanced and probably if you

489
00:22:03,780 --> 00:22:06,659
go there you have a very good reason and

490
00:22:06,659 --> 00:22:08,820
you understand what you're doing but

491
00:22:08,820 --> 00:22:11,340
yeah we're not going to go there

492
00:22:11,340 --> 00:22:15,419
um the openness of open source security

493
00:22:15,419 --> 00:22:17,700
Foundation also has a very good project

494
00:22:17,700 --> 00:22:20,580
called scorecard that has different

495
00:22:20,580 --> 00:22:24,679
criteria for weather a project whether

496
00:22:24,679 --> 00:22:27,900
application a public application is

497
00:22:27,900 --> 00:22:31,620
look how secure it is actually and it's

498
00:22:31,620 --> 00:22:33,000
funny because these are the same

499
00:22:33,000 --> 00:22:36,780
criteria that that people are going to

500
00:22:36,780 --> 00:22:39,960
judge our work as well so you can see

501
00:22:39,960 --> 00:22:41,400
the cycle

502
00:22:41,400 --> 00:22:43,380
um there

503
00:22:43,380 --> 00:22:46,860
uh so we go to so that was the input

504
00:22:46,860 --> 00:22:48,059
um

505
00:22:48,059 --> 00:22:50,640
and we have the research and development

506
00:22:50,640 --> 00:22:53,520
we begin with the risk assessment this

507
00:22:53,520 --> 00:22:55,460
is sort of a

508
00:22:55,460 --> 00:23:00,240
behavior tree so you go from left to top

509
00:23:00,240 --> 00:23:05,159
to to right and back again so we can try

510
00:23:05,159 --> 00:23:09,179
to So based on the vulnerability that we

511
00:23:09,179 --> 00:23:11,580
found we may decide to fix it if that's

512
00:23:11,580 --> 00:23:13,260
not possible we try to mitigate if

513
00:23:13,260 --> 00:23:16,320
that's not possible can we accept it

514
00:23:16,320 --> 00:23:19,860
um or maybe put some uh if if we cannot

515
00:23:19,860 --> 00:23:22,679
accept it then the only thing that we

516
00:23:22,679 --> 00:23:24,360
could do is to transfer the

517
00:23:24,360 --> 00:23:28,620
responsibility to insurers

518
00:23:29,340 --> 00:23:31,459
um

519
00:23:32,280 --> 00:23:35,940
so we have also so

520
00:23:35,940 --> 00:23:38,880
to have a proper inventory of what we

521
00:23:38,880 --> 00:23:41,880
have what we are protecting we need to

522
00:23:41,880 --> 00:23:43,799
have reproducible bills it's very

523
00:23:43,799 --> 00:23:48,480
important because uh because uh a

524
00:23:48,480 --> 00:23:51,240
checksum well not there was will not

525
00:23:51,240 --> 00:23:54,690
help as much if we do not

526
00:23:54,690 --> 00:23:54,900
[Music]

527
00:23:54,900 --> 00:23:55,860
um

528
00:23:55,860 --> 00:23:58,860
are not certain that of what we are

529
00:23:58,860 --> 00:24:00,360
building so

530
00:24:00,360 --> 00:24:03,120
um for example if you compile an

531
00:24:03,120 --> 00:24:04,679
application

532
00:24:04,679 --> 00:24:05,780
um

533
00:24:05,780 --> 00:24:08,940
just a moment after you compiled it then

534
00:24:08,940 --> 00:24:10,380
you would the checksum would be

535
00:24:10,380 --> 00:24:12,780
different because of the timestamps so

536
00:24:12,780 --> 00:24:14,460
this is the first thing that we do is

537
00:24:14,460 --> 00:24:18,780
that we just make it uh zero or in Linux

538
00:24:18,780 --> 00:24:21,840
Epoch time that would be 1970 because

539
00:24:21,840 --> 00:24:24,539
for historical reasons

540
00:24:24,539 --> 00:24:27,840
um and and the second thing is that we

541
00:24:27,840 --> 00:24:31,200
need to download specific versions of

542
00:24:31,200 --> 00:24:33,900
the of the software that we are using so

543
00:24:33,900 --> 00:24:38,039
it's not a good practice to just uh just

544
00:24:38,039 --> 00:24:40,740
not put anything or just put the latest

545
00:24:40,740 --> 00:24:43,140
version of this software we need to

546
00:24:43,140 --> 00:24:45,120
specify the exact version and this is

547
00:24:45,120 --> 00:24:47,720
also good for reliability

548
00:24:47,720 --> 00:24:50,580
then we use open source EA we love open

549
00:24:50,580 --> 00:24:51,600
source

550
00:24:51,600 --> 00:24:54,960
uh there is actually last week

551
00:24:54,960 --> 00:24:57,360
um a new project was announced which is

552
00:24:57,360 --> 00:25:00,000
called chain loop which is great if you

553
00:25:00,000 --> 00:25:03,299
have if you are responsible for multiple

554
00:25:03,299 --> 00:25:05,520
different build Source control

555
00:25:05,520 --> 00:25:08,039
versioning systems and build servers

556
00:25:08,039 --> 00:25:11,039
because it works with all of them and it

557
00:25:11,039 --> 00:25:14,159
makes the work allegedly I cannot say

558
00:25:14,159 --> 00:25:15,559
because it's

559
00:25:15,559 --> 00:25:18,720
very early in development but that's the

560
00:25:18,720 --> 00:25:20,880
whole point is that it makes working

561
00:25:20,880 --> 00:25:23,720
between the developers and the

562
00:25:23,720 --> 00:25:26,779
security so the application security

563
00:25:26,779 --> 00:25:29,820
Personnel easier

564
00:25:29,820 --> 00:25:32,460
and it also integrates with dependency

565
00:25:32,460 --> 00:25:34,919
track which is great

566
00:25:34,919 --> 00:25:35,580
um

567
00:25:35,580 --> 00:25:39,299
feedback loops so it's it's not enough

568
00:25:39,299 --> 00:25:42,179
to just use some kind of Technology it's

569
00:25:42,179 --> 00:25:46,500
very communication is very important and

570
00:25:46,500 --> 00:25:49,440
so we need to to somehow

571
00:25:49,440 --> 00:25:51,720
um integrate the technology and the

572
00:25:51,720 --> 00:25:55,260
processes and the communication uh so

573
00:25:55,260 --> 00:25:57,679
that there is a

574
00:25:57,679 --> 00:26:00,059
self-generating and self-sustaining

575
00:26:00,059 --> 00:26:01,620
Loops

576
00:26:01,620 --> 00:26:04,860
um so uh for for developers that would

577
00:26:04,860 --> 00:26:07,740
be self-service static analysis Dynamic

578
00:26:07,740 --> 00:26:10,140
analysis part of the build process

579
00:26:10,140 --> 00:26:13,380
um and then together maybe we review the

580
00:26:13,380 --> 00:26:17,120
statistics together with the product

581
00:26:17,120 --> 00:26:20,580
owners managers whatever we end up

582
00:26:20,580 --> 00:26:23,059
developer team leads we prioritize

583
00:26:23,059 --> 00:26:25,080
that's for

584
00:26:25,080 --> 00:26:26,600
first party

585
00:26:26,600 --> 00:26:29,400
proprietary code not for the open source

586
00:26:29,400 --> 00:26:32,520
and then we proceed with the mitigation

587
00:26:32,520 --> 00:26:38,279
and uh as the as time progresses and we

588
00:26:38,279 --> 00:26:39,659
um

589
00:26:39,659 --> 00:26:42,360
and people get into the habit of doing

590
00:26:42,360 --> 00:26:47,820
this it's becoming self uh sustaining

591
00:26:47,820 --> 00:26:49,260
so

592
00:26:49,260 --> 00:26:50,880
during the research and development

593
00:26:50,880 --> 00:26:54,140
there is quality assurance but why not

594
00:26:54,140 --> 00:26:57,360
it's easy to actually work together with

595
00:26:57,360 --> 00:27:02,580
qas to uh to build the to integrate the

596
00:27:02,580 --> 00:27:05,880
security Assurance inside so here is an

597
00:27:05,880 --> 00:27:09,720
example of Postman uh which is a very

598
00:27:09,720 --> 00:27:11,790
famous for API

599
00:27:11,790 --> 00:27:14,039
[Music]

600
00:27:14,039 --> 00:27:17,460
um and this is the GitHub issue that is

601
00:27:17,460 --> 00:27:20,580
still open even though it's from 2021 uh

602
00:27:20,580 --> 00:27:23,400
about integrating it with open web

603
00:27:23,400 --> 00:27:26,760
applications uh security Foundation uh

604
00:27:26,760 --> 00:27:30,779
zet attack proxy and we love open source

605
00:27:30,779 --> 00:27:33,539
because not only because it's free but

606
00:27:33,539 --> 00:27:35,580
because there is a great collaboration

607
00:27:35,580 --> 00:27:38,460
between people and a lot of knowledge

608
00:27:38,460 --> 00:27:41,760
and experience being shared so this is a

609
00:27:41,760 --> 00:27:42,960
great example

610
00:27:42,960 --> 00:27:48,720
Okay so uh so if we're to Del um So

611
00:27:48,720 --> 00:27:52,020
within the research and development so

612
00:27:52,020 --> 00:27:55,020
maybe someone's thinking okay if I've

613
00:27:55,020 --> 00:27:58,140
I've shifted left I've done all that

614
00:27:58,140 --> 00:28:00,179
they can I've uh scanning for

615
00:28:00,179 --> 00:28:01,620
vulnerabilities misconfigurations

616
00:28:01,620 --> 00:28:03,900
compliance violations

617
00:28:03,900 --> 00:28:08,039
um so I have prevented threats well not

618
00:28:08,039 --> 00:28:11,520
exactly so in this case organizational

619
00:28:11,520 --> 00:28:12,840
security

620
00:28:12,840 --> 00:28:13,679
um

621
00:28:13,679 --> 00:28:16,620
is wiser let's say it has more

622
00:28:16,620 --> 00:28:18,059
experience so we can borrow from there

623
00:28:18,059 --> 00:28:22,740
from the cyber security framework so

624
00:28:22,740 --> 00:28:24,900
um yeah we need to also detect and

625
00:28:24,900 --> 00:28:27,779
respond to threats it's not enough to to

626
00:28:27,779 --> 00:28:30,059
try to block everything because it's

627
00:28:30,059 --> 00:28:32,880
probably not possible as well

628
00:28:32,880 --> 00:28:36,120
really this is a very complicated uh

629
00:28:36,120 --> 00:28:38,760
because there are just so many pieces of

630
00:28:38,760 --> 00:28:40,380
this and they're all interacting with

631
00:28:40,380 --> 00:28:41,940
each other

632
00:28:41,940 --> 00:28:45,120
um but just to give an example with uh

633
00:28:45,120 --> 00:28:48,960
so on the left column you can see the

634
00:28:48,960 --> 00:28:50,820
code container cluster and computer

635
00:28:50,820 --> 00:28:53,760
Cloud which is the four C's as they are

636
00:28:53,760 --> 00:28:58,140
known uh this is a

637
00:28:58,140 --> 00:29:01,320
and on the right side it's uh it's let's

638
00:29:01,320 --> 00:29:03,539
say my interpretation of what the

639
00:29:03,539 --> 00:29:05,940
different aspects of each of those is

640
00:29:05,940 --> 00:29:07,740
and so they're they're the same but

641
00:29:07,740 --> 00:29:10,100
they're just applies to each one of them

642
00:29:10,100 --> 00:29:13,500
so for storage for example uh obviously

643
00:29:13,500 --> 00:29:16,140
the the programming the program itself

644
00:29:16,140 --> 00:29:20,100
uh stores its data on the random access

645
00:29:20,100 --> 00:29:24,240
memory and maybe even in the in data in

646
00:29:24,240 --> 00:29:25,760
memory database

647
00:29:25,760 --> 00:29:28,980
the containers are storing in uh

648
00:29:28,980 --> 00:29:31,279
environmental variables

649
00:29:31,279 --> 00:29:35,159
as well as volume mounts the cluster is

650
00:29:35,159 --> 00:29:39,600
storing data on the in config Maps

651
00:29:39,600 --> 00:29:42,600
secrets and

652
00:29:42,600 --> 00:29:43,940
um

653
00:29:43,940 --> 00:29:47,399
volume claims persistent volume claims

654
00:29:47,399 --> 00:29:49,620
and then the compute obviously has the

655
00:29:49,620 --> 00:29:52,980
databases and the storage drives

656
00:29:52,980 --> 00:29:53,880
um

657
00:29:53,880 --> 00:29:57,240
so this is like just on the one level

658
00:29:57,240 --> 00:29:59,039
and there are many levels and they're

659
00:29:59,039 --> 00:30:01,380
all interacting with each other so uh

660
00:30:01,380 --> 00:30:02,520
this is

661
00:30:02,520 --> 00:30:05,940
very broad topic but just wanted to give

662
00:30:05,940 --> 00:30:09,059
an example so we have so this is

663
00:30:09,059 --> 00:30:12,539
actually from Red Hat they donated their

664
00:30:12,539 --> 00:30:15,059
incident so product so their product

665
00:30:15,059 --> 00:30:18,480
security team donated their process to

666
00:30:18,480 --> 00:30:23,039
the first organization is called

667
00:30:23,039 --> 00:30:25,799
um and it's great I recommend everyone

668
00:30:25,799 --> 00:30:29,460
to check it and just include it here

669
00:30:29,460 --> 00:30:30,360
um

670
00:30:30,360 --> 00:30:33,980
so there's also a lot of innovation

671
00:30:33,980 --> 00:30:38,299
Happening Here with uh sandboxed

672
00:30:38,299 --> 00:30:39,860
containers

673
00:30:39,860 --> 00:30:43,559
or container runtimes and actually if

674
00:30:43,559 --> 00:30:46,880
you if you have a really sensitive

675
00:30:46,880 --> 00:30:49,559
component of your application such as a

676
00:30:49,559 --> 00:30:52,039
database you can

677
00:30:52,039 --> 00:30:55,440
just for the note where the database is

678
00:30:55,440 --> 00:30:58,380
you can select the different runtime

679
00:30:58,380 --> 00:31:02,220
environment and just for that note and

680
00:31:02,220 --> 00:31:05,059
kubernetes is going to take care of that

681
00:31:05,059 --> 00:31:08,340
so we traditionally there is the

682
00:31:08,340 --> 00:31:11,890
intrusion detection prevention systems

683
00:31:11,890 --> 00:31:13,740
[Music]

684
00:31:13,740 --> 00:31:16,140
there is the web application firewalls

685
00:31:16,140 --> 00:31:21,120
of which again you can see I recommend

686
00:31:21,120 --> 00:31:23,399
the cloud native Computing Foundation

687
00:31:23,399 --> 00:31:26,480
project called query fence

688
00:31:26,480 --> 00:31:29,460
and then and then like

689
00:31:29,460 --> 00:31:31,919
um the more modern approach where this

690
00:31:31,919 --> 00:31:34,460
is all going it's a runtime application

691
00:31:34,460 --> 00:31:36,200
self-protection

692
00:31:36,200 --> 00:31:38,960
which is great

693
00:31:38,960 --> 00:31:41,340
unfortunately there is no open source

694
00:31:41,340 --> 00:31:43,320
project for that there used to be some

695
00:31:43,320 --> 00:31:45,840
years ago I think five but it got

696
00:31:45,840 --> 00:31:49,080
abandoned so uh interestingly enough

697
00:31:49,080 --> 00:31:51,059
maybe some of you went to the workshop

698
00:31:51,059 --> 00:31:54,779
for contrast security assess which which

699
00:31:54,779 --> 00:31:57,899
has that included

700
00:31:57,899 --> 00:32:01,020
so the future is confidential so-called

701
00:32:01,020 --> 00:32:03,740
confidential Computing we have the

702
00:32:03,740 --> 00:32:07,140
homomorphic encryption which is uh which

703
00:32:07,140 --> 00:32:10,679
is basically magic because you could uh

704
00:32:10,679 --> 00:32:13,799
never have to decipher

705
00:32:13,799 --> 00:32:17,039
um data like it can always stay uh in

706
00:32:17,039 --> 00:32:19,799
ciphertext encrypted and you can still

707
00:32:19,799 --> 00:32:22,799
compute with it which is yeah uh crazy

708
00:32:22,799 --> 00:32:24,840
stuff and then there is the trusted

709
00:32:24,840 --> 00:32:26,460
execution environments which are

710
00:32:26,460 --> 00:32:29,100
basically part of the central processing

711
00:32:29,100 --> 00:32:32,760
units units which are safe they they

712
00:32:32,760 --> 00:32:35,840
cannot be breached so this would really

713
00:32:35,840 --> 00:32:39,299
make our work easier and protect our

714
00:32:39,299 --> 00:32:42,200
customers a lot

715
00:32:42,240 --> 00:32:45,000
um so what are the takeaways

716
00:32:45,000 --> 00:32:48,360
um as I hope this illustrates it's um

717
00:32:48,360 --> 00:32:51,360
and many in the industry are now are now

718
00:32:51,360 --> 00:32:53,700
saying that shifting lift is not enough

719
00:32:53,700 --> 00:32:56,940
because we cannot block every thread

720
00:32:56,940 --> 00:32:58,760
sooner or later

721
00:32:58,760 --> 00:33:03,120
the practice matures such as uh just

722
00:33:03,120 --> 00:33:06,059
like security so Enterprise or

723
00:33:06,059 --> 00:33:08,520
information security matured so we need

724
00:33:08,520 --> 00:33:09,380
to

725
00:33:09,380 --> 00:33:12,779
shift smart or whatever like we we need

726
00:33:12,779 --> 00:33:15,310
to to cover the entire process

727
00:33:15,310 --> 00:33:17,659
[Music]

728
00:33:17,659 --> 00:33:21,659
and uh yeah that's it

729
00:33:21,659 --> 00:33:24,380
any questions

730
00:33:28,500 --> 00:33:30,840
okay thank you very much

731
00:33:30,840 --> 00:33:33,840
foreign

