1
00:00:02,480 --> 00:00:08,189
okay here we are five o'clock last

2
00:00:05,910 --> 00:00:10,139
session before the closing ceremonies

3
00:00:08,189 --> 00:00:12,210
and of course a reminder we'll have a

4
00:00:10,139 --> 00:00:15,509
networking event at John Harvard's

5
00:00:12,210 --> 00:00:16,800
pretty much walk through Harvard down a

6
00:00:15,509 --> 00:00:18,720
couple blocks takes about five minutes

7
00:00:16,800 --> 00:00:21,210
walks down there so hopefully you all

8
00:00:18,720 --> 00:00:22,740
can join us there so for our last

9
00:00:21,210 --> 00:00:25,890
presentation I'd like to introduce

10
00:00:22,740 --> 00:00:28,229
Murali I'm he's a computer science PhD

11
00:00:25,890 --> 00:00:30,240
candidate at Northeastern and his

12
00:00:28,230 --> 00:00:32,460
research focus was on cyber security and

13
00:00:30,240 --> 00:00:34,230
privacy very apropos for today

14
00:00:32,460 --> 00:00:37,320
he's been covered in venues such as MIT

15
00:00:34,230 --> 00:00:39,419
Technology Review our steps fret posts

16
00:00:37,320 --> 00:00:41,100
etc and he's talked at number of

17
00:00:39,420 --> 00:00:43,290
different conferences and keys including

18
00:00:41,100 --> 00:00:45,539
DEFCON crypto village and Virus Bulletin

19
00:00:43,290 --> 00:00:52,350
so without further ado let's give it up

20
00:00:45,539 --> 00:00:54,059
for EM Raleigh first of all thank you

21
00:00:52,350 --> 00:00:55,620
everyone for coming and I'm sorry for

22
00:00:54,059 --> 00:00:59,218
being the last lucky thing you on the

23
00:00:55,620 --> 00:01:00,718
drinking session further ado today we're

24
00:00:59,219 --> 00:01:03,290
going to talk about cryptography and

25
00:01:00,719 --> 00:01:05,400
especially modern cryptography so

26
00:01:03,290 --> 00:01:07,350
cryptography is really nothing new it

27
00:01:05,400 --> 00:01:09,540
has been happening for a long time even

28
00:01:07,350 --> 00:01:13,199
in ancient times the use of you use the

29
00:01:09,540 --> 00:01:15,780
Caesar cipher or just write the secret

30
00:01:13,200 --> 00:01:17,820
message on someone's head and then wait

31
00:01:15,780 --> 00:01:19,350
for her to grow and then again shave

32
00:01:17,820 --> 00:01:20,520
their head and read the message but

33
00:01:19,350 --> 00:01:22,530
today we're going to talk about the

34
00:01:20,520 --> 00:01:25,020
modern aspect of cryptography where you

35
00:01:22,530 --> 00:01:27,990
have your digital communication

36
00:01:25,020 --> 00:01:30,509
communication and you use basic the

37
00:01:27,990 --> 00:01:33,509
mathematical properties to secure your

38
00:01:30,509 --> 00:01:36,840
data not the physical properties as I

39
00:01:33,509 --> 00:01:39,540
said is very ubiquitous ample it it is

40
00:01:36,840 --> 00:01:41,700
in your mobile phone when you write your

41
00:01:39,540 --> 00:01:44,040
data you store your photos or even when

42
00:01:41,700 --> 00:01:47,159
you make a court call for example using

43
00:01:44,040 --> 00:01:49,680
GSM 2g or even 3G calls all your

44
00:01:47,159 --> 00:01:51,680
communications are encrypted and if you

45
00:01:49,680 --> 00:01:54,680
have support for cryptography in every

46
00:01:51,680 --> 00:01:58,170
respectable program language these days

47
00:01:54,680 --> 00:01:59,399
even further right now the cryptography

48
00:01:58,170 --> 00:02:01,950
for example a ES and sha of

49
00:01:59,399 --> 00:02:03,180
functionalities are part of CPUs so this

50
00:02:01,950 --> 00:02:05,280
means they are part of your hardware

51
00:02:03,180 --> 00:02:06,869
there is no suffering implementation of

52
00:02:05,280 --> 00:02:08,970
cryptography anymore they're being

53
00:02:06,869 --> 00:02:10,709
embedded in your chips right now even

54
00:02:08,970 --> 00:02:12,390
the CPU that you have on your laptop

55
00:02:10,709 --> 00:02:14,790
your computer email your mobile

56
00:02:12,390 --> 00:02:16,589
and it's really not hard to do

57
00:02:14,790 --> 00:02:19,079
cryptography the right way at least the

58
00:02:16,590 --> 00:02:21,170
programming but you see a lot of people

59
00:02:19,080 --> 00:02:23,520
making mistakes the big ones for example

60
00:02:21,170 --> 00:02:25,519
Debian had a problem in the random

61
00:02:23,520 --> 00:02:28,530
number generator which made the secrets

62
00:02:25,520 --> 00:02:30,660
vulnerable companies like LinkedIn and

63
00:02:28,530 --> 00:02:32,850
Adobe and Ashley Madison they store the

64
00:02:30,660 --> 00:02:35,070
password in the wrong way that made a

65
00:02:32,850 --> 00:02:37,380
lot of people who are vulnerable and put

66
00:02:35,070 --> 00:02:39,570
them at risk and other companies such as

67
00:02:37,380 --> 00:02:42,750
snapchat were using a wrong kind of

68
00:02:39,570 --> 00:02:45,030
cryptography only using one bit wrong

69
00:02:42,750 --> 00:02:48,020
letter instead of CBC for example use

70
00:02:45,030 --> 00:02:51,810
they use the EBC and made their secrets

71
00:02:48,020 --> 00:02:54,060
at risk and even experts such as the

72
00:02:51,810 --> 00:02:56,750
Wi-Fi alliances they when they were

73
00:02:54,060 --> 00:02:58,800
designing the web standard for Wi-Fi

74
00:02:56,750 --> 00:03:00,870
communications they also made a mistake

75
00:02:58,800 --> 00:03:02,640
so it's not only the amateurs even the

76
00:03:00,870 --> 00:03:10,560
professionals and experts can make

77
00:03:02,640 --> 00:03:13,250
mistake can make them mistake okay now

78
00:03:10,560 --> 00:03:13,250
it makes more sense

79
00:03:14,360 --> 00:03:21,420
yep and the cryptography we have two

80
00:03:19,320 --> 00:03:23,400
kinds of cryptography at the high level

81
00:03:21,420 --> 00:03:25,530
one is called symmetric cryptography or

82
00:03:23,400 --> 00:03:27,570
shared key cryptography and the other

83
00:03:25,530 --> 00:03:30,150
ones public key cryptography or

84
00:03:27,570 --> 00:03:33,510
asymmetrical cryptography if you want to

85
00:03:30,150 --> 00:03:35,640
thinker and as in the like in your world

86
00:03:33,510 --> 00:03:37,950
and not in computers but in real life if

87
00:03:35,640 --> 00:03:40,200
you want to give access to your house

88
00:03:37,950 --> 00:03:42,030
your friend so you create the same key

89
00:03:40,200 --> 00:03:43,500
and you send it to your friends then

90
00:03:42,030 --> 00:03:46,230
they would have access to your house

91
00:03:43,500 --> 00:03:48,090
this would be the Tomato symmetric or

92
00:03:46,230 --> 00:03:50,220
the shared key cryptography but the

93
00:03:48,090 --> 00:03:52,950
public key cryptography is as if you

94
00:03:50,220 --> 00:03:55,170
create many locks and you have only one

95
00:03:52,950 --> 00:03:57,298
key for that lock and you only hold that

96
00:03:55,170 --> 00:03:58,950
lock and if your friends want to send

97
00:03:57,299 --> 00:04:01,830
you something secret they can use those

98
00:03:58,950 --> 00:04:04,048
physical locks put the secret in the box

99
00:04:01,830 --> 00:04:06,590
lock it send it back to you and you only

100
00:04:04,049 --> 00:04:09,690
you are the only one who has the key to

101
00:04:06,590 --> 00:04:11,430
unlock the box which would be as if

102
00:04:09,690 --> 00:04:14,910
you're doing the decryption in digital

103
00:04:11,430 --> 00:04:18,120
world so that would be a analogy for the

104
00:04:14,910 --> 00:04:20,789
real-world cases as you can see here for

105
00:04:18,120 --> 00:04:22,710
the secretive absorption or symmetric

106
00:04:20,789 --> 00:04:24,870
you share the same thing and in public

107
00:04:22,710 --> 00:04:25,710
you just use two different keys that are

108
00:04:24,870 --> 00:04:27,509
attached

109
00:04:25,710 --> 00:04:31,049
which are and binds to each other but

110
00:04:27,509 --> 00:04:33,180
they are different and the differences

111
00:04:31,050 --> 00:04:36,449
between them as we mentioned see

112
00:04:33,180 --> 00:04:39,419
symmetric in a encryption for example

113
00:04:36,449 --> 00:04:41,550
your AES is up to thousand times faster

114
00:04:39,419 --> 00:04:43,680
even at the software implementation yet

115
00:04:41,550 --> 00:04:46,860
alone then you have it embedded in your

116
00:04:43,680 --> 00:04:49,080
CP or your hardware but one of the

117
00:04:46,860 --> 00:04:50,910
downsides of symmetric encryption is you

118
00:04:49,080 --> 00:04:53,068
need to share a secret for example if

119
00:04:50,910 --> 00:04:54,690
you want to give your friend the key to

120
00:04:53,069 --> 00:04:57,900
your house you have to have a way of

121
00:04:54,690 --> 00:05:00,360
transmitting this secret or this

122
00:04:57,900 --> 00:05:02,159
valuable information or physical thing

123
00:05:00,360 --> 00:05:04,080
that you have so if you can trust the

124
00:05:02,160 --> 00:05:07,050
post office to send the key why not just

125
00:05:04,080 --> 00:05:09,508
send a secret to a public medium that's

126
00:05:07,050 --> 00:05:11,699
why the symmetric encryption has

127
00:05:09,509 --> 00:05:15,060
problems how to share that secret

128
00:05:11,699 --> 00:05:17,759
information that's why in real world we

129
00:05:15,060 --> 00:05:19,860
have a combination of the public key and

130
00:05:17,759 --> 00:05:22,740
the scenic route key encryption you

131
00:05:19,860 --> 00:05:24,630
usually encrypt the key to your secret

132
00:05:22,740 --> 00:05:27,509
to your symmetric encryption with that

133
00:05:24,630 --> 00:05:29,460
public key you share it with the river

134
00:05:27,509 --> 00:05:32,009
you share it with the others and then

135
00:05:29,460 --> 00:05:34,590
you use the private key to decrypt that

136
00:05:32,009 --> 00:05:37,169
key and use the key of the symmetric

137
00:05:34,590 --> 00:05:38,609
encryption to do the decryption we

138
00:05:37,169 --> 00:05:40,139
looked at some diagrams to make more

139
00:05:38,610 --> 00:05:42,120
sense of it but that's why a real-world

140
00:05:40,139 --> 00:05:46,199
situation you usually combine the two

141
00:05:42,120 --> 00:05:47,940
together the most famous symmetric

142
00:05:46,199 --> 00:05:50,310
encryption algorithms nowadays is AES

143
00:05:47,940 --> 00:05:53,639
which stands for an advanced encryption

144
00:05:50,310 --> 00:05:55,650
standard it's also known as rainbow

145
00:05:53,639 --> 00:05:57,750
which is combination of the last name of

146
00:05:55,650 --> 00:06:00,780
to belch and cryptographers who actually

147
00:05:57,750 --> 00:06:02,699
introduced or designed this algorithm it

148
00:06:00,780 --> 00:06:05,549
was part of the nist competition to

149
00:06:02,699 --> 00:06:08,580
design the next generation of crypto

150
00:06:05,550 --> 00:06:10,500
standard this is the National Institute

151
00:06:08,580 --> 00:06:13,758
of Standards and Technology and are in

152
00:06:10,500 --> 00:06:16,680
charge of standardizing different things

153
00:06:13,759 --> 00:06:18,539
such as cryptography and they have some

154
00:06:16,680 --> 00:06:20,729
requirements that it should be fast both

155
00:06:18,539 --> 00:06:22,770
in software and hardware and it should

156
00:06:20,729 --> 00:06:26,340
support block size of 128 and different

157
00:06:22,770 --> 00:06:28,440
key sizes can anyone name what was the

158
00:06:26,340 --> 00:06:29,310
previous standard before AES for

159
00:06:28,440 --> 00:06:33,180
encryption

160
00:06:29,310 --> 00:06:35,219
yes des so for example des was fast in

161
00:06:33,180 --> 00:06:37,860
hardware what extremely slow in software

162
00:06:35,219 --> 00:06:39,210
for AES they wanted to be fast in both

163
00:06:37,860 --> 00:06:42,110
software and for

164
00:06:39,210 --> 00:06:43,859
and it was designed by these two

165
00:06:42,110 --> 00:06:45,300
cryptographers that I'm not going to

166
00:06:43,860 --> 00:06:49,110
butcher their names which was because I

167
00:06:45,300 --> 00:06:51,990
can not pronounce it right and they

168
00:06:49,110 --> 00:06:54,060
publish the design in 98 and with any

169
00:06:51,990 --> 00:06:55,880
standardisation it takes long time so it

170
00:06:54,060 --> 00:06:59,090
took them about three years to actually

171
00:06:55,880 --> 00:07:02,790
standardize this encryption it was

172
00:06:59,090 --> 00:07:05,310
published in 2001 the other candidates

173
00:07:02,790 --> 00:07:06,750
were Mars rt6 their pen to fish which

174
00:07:05,310 --> 00:07:11,790
you still have them today but they are

175
00:07:06,750 --> 00:07:16,950
not as popular as as widely used so I've

176
00:07:11,790 --> 00:07:19,230
said this cryptography mechanisms such

177
00:07:16,950 --> 00:07:22,170
as AES they work on blocks which means

178
00:07:19,230 --> 00:07:23,610
you get a chunk of data you do your

179
00:07:22,170 --> 00:07:27,420
algorithm on it and you get an output

180
00:07:23,610 --> 00:07:30,330
but the charcoal blocks like the limit

181
00:07:27,420 --> 00:07:32,870
is very limited 128 bits if you have a

182
00:07:30,330 --> 00:07:35,820
longer message you need to find a way to

183
00:07:32,870 --> 00:07:38,220
increase these blocks separately and

184
00:07:35,820 --> 00:07:39,930
somehow mix them together so that's why

185
00:07:38,220 --> 00:07:42,000
we call the mods of operation for a

186
00:07:39,930 --> 00:07:43,590
block cipher and there are many

187
00:07:42,000 --> 00:07:45,180
different kind of them but these three

188
00:07:43,590 --> 00:07:47,039
are the most well known the ECB is

189
00:07:45,180 --> 00:07:48,840
completely broken if you never use it so

190
00:07:47,040 --> 00:07:50,370
for example if you do a cold activity of

191
00:07:48,840 --> 00:07:52,799
your program you just search for

192
00:07:50,370 --> 00:07:54,750
keywords ECB if you find it somewhere

193
00:07:52,800 --> 00:07:56,570
there is something definitely wrong with

194
00:07:54,750 --> 00:07:59,490
your code so you have to do something

195
00:07:56,570 --> 00:08:01,110
CBC is secure in terms of just the mode

196
00:07:59,490 --> 00:08:03,360
of operation but it has its own

197
00:08:01,110 --> 00:08:05,340
shortcomings the same as CTR that's what

198
00:08:03,360 --> 00:08:07,560
you have to make there are more secure

199
00:08:05,340 --> 00:08:10,109
than EVC there is no way to make ECB

200
00:08:07,560 --> 00:08:14,070
secure but CVC and CTR door based make

201
00:08:10,110 --> 00:08:16,710
them secure so this is the ECB pattern

202
00:08:14,070 --> 00:08:19,730
can anyone like spot what can be a

203
00:08:16,710 --> 00:08:19,729
problem with easily

204
00:08:27,410 --> 00:08:35,880
so that's somehow correct it what to put

205
00:08:34,049 --> 00:08:38,400
it accurately for example if you have

206
00:08:35,880 --> 00:08:41,700
the same plain text it will produce the

207
00:08:38,400 --> 00:08:46,350
same ciphertext so it kind of reviews

208
00:08:41,700 --> 00:08:48,450
the pattern in your file or the order

209
00:08:46,350 --> 00:08:50,190
secret that you're encrypting because it

210
00:08:48,450 --> 00:08:52,490
is some message of something is being

211
00:08:50,190 --> 00:08:54,450
repeated in your message even the

212
00:08:52,490 --> 00:08:56,370
encryption is going to be the same in

213
00:08:54,450 --> 00:08:58,190
your ciphertext so that's something that

214
00:08:56,370 --> 00:09:00,240
we don't want to reveal a pattern

215
00:08:58,190 --> 00:09:02,400
because it would be used as a side

216
00:09:00,240 --> 00:09:05,700
channel you want something that kind of

217
00:09:02,400 --> 00:09:07,980
gets rid of this so if you use a look at

218
00:09:05,700 --> 00:09:11,190
the CBC whenever you encrypt something

219
00:09:07,980 --> 00:09:13,200
you just use that encrypted value and

220
00:09:11,190 --> 00:09:16,080
pass it to the next block and you XOR

221
00:09:13,200 --> 00:09:18,360
them together so even if the two block 1

222
00:09:16,080 --> 00:09:19,980
and block 2 are the same the encryption

223
00:09:18,360 --> 00:09:22,350
of block 1 and block 2 is going to be

224
00:09:19,980 --> 00:09:24,810
different and to make sure if you're

225
00:09:22,350 --> 00:09:26,310
using the same message multiple times

226
00:09:24,810 --> 00:09:28,199
with the same key we introduced this

227
00:09:26,310 --> 00:09:30,540
notion of IV or initialisation vector

228
00:09:28,200 --> 00:09:32,220
which is a random value to make sure

229
00:09:30,540 --> 00:09:34,290
even if you are increasing the same

230
00:09:32,220 --> 00:09:35,480
message with the same key each time

231
00:09:34,290 --> 00:09:37,949
you're going to get a different

232
00:09:35,480 --> 00:09:44,070
ciphertext because of that IV that's

233
00:09:37,950 --> 00:09:45,990
being X or in your value the CTR uses

234
00:09:44,070 --> 00:09:47,790
the same notion of IV but they call it

235
00:09:45,990 --> 00:09:50,010
the counter and announcement so you have

236
00:09:47,790 --> 00:09:51,990
a counter that each block what one block

237
00:09:50,010 --> 00:09:54,840
to block free block n that is the

238
00:09:51,990 --> 00:09:57,660
counter of the block and the nonce U is

239
00:09:54,840 --> 00:09:58,800
being acted as lucky IV or the random

240
00:09:57,660 --> 00:10:02,189
value that you're using

241
00:09:58,800 --> 00:10:06,000
can anyone spot a benefit of CTR over

242
00:10:02,190 --> 00:10:08,310
CBC specially in speed exactly

243
00:10:06,000 --> 00:10:10,860
so here for example if you look at CBC

244
00:10:08,310 --> 00:10:12,510
if you do not include block one you

245
00:10:10,860 --> 00:10:14,460
wouldn't be able to include blocks to or

246
00:10:12,510 --> 00:10:16,800
blocks free you everything need to be in

247
00:10:14,460 --> 00:10:19,260
serial C which means it can be slow

248
00:10:16,800 --> 00:10:20,819
maybe twenty years ago it was okay

249
00:10:19,260 --> 00:10:22,860
because we didn't have that much of luck

250
00:10:20,820 --> 00:10:26,150
multi-core CPUs multiple processing

251
00:10:22,860 --> 00:10:29,000
programming nowadays CTR would be more

252
00:10:26,150 --> 00:10:31,770
better and one of the other advantages

253
00:10:29,000 --> 00:10:34,840
CTRs and support n is anything such as

254
00:10:31,770 --> 00:10:37,360
PRP or butt

255
00:10:34,840 --> 00:10:38,830
CBC News on these prf this is more

256
00:10:37,360 --> 00:10:43,720
advanced oh it's not important but most

257
00:10:38,830 --> 00:10:45,880
important is their parallelization so to

258
00:10:43,720 --> 00:10:48,310
put it in pictures if your original

259
00:10:45,880 --> 00:10:50,470
pictures with a linked Linux penguin if

260
00:10:48,310 --> 00:10:52,810
you encrypt it using something does this

261
00:10:50,470 --> 00:10:55,420
ECB so here we just get the values of

262
00:10:52,810 --> 00:10:57,699
the PNG format and then include those

263
00:10:55,420 --> 00:10:59,410
values you see you can see the pattern

264
00:10:57,700 --> 00:11:01,450
you won't see the actual image but you

265
00:10:59,410 --> 00:11:02,860
can see what was the pattern and here

266
00:11:01,450 --> 00:11:04,060
you can select it this is good enough

267
00:11:02,860 --> 00:11:05,950
for you to know what was being

268
00:11:04,060 --> 00:11:08,109
transmitted but in CBC everything just

269
00:11:05,950 --> 00:11:11,250
looks like a garbage you want to be able

270
00:11:08,110 --> 00:11:14,110
to distinguish anything so and that's

271
00:11:11,250 --> 00:11:16,650
there snakes like intro of the symmetric

272
00:11:14,110 --> 00:11:19,240
encryption as we said we also need a

273
00:11:16,650 --> 00:11:21,340
public use cryptography or asymmetric

274
00:11:19,240 --> 00:11:23,380
the most famous one is RSA which is the

275
00:11:21,340 --> 00:11:26,140
combination of the letters of the first

276
00:11:23,380 --> 00:11:27,880
three people who have first letter of

277
00:11:26,140 --> 00:11:30,790
the last name of the people who created

278
00:11:27,880 --> 00:11:34,030
it the Ron Rivest Adi Shamir and learn

279
00:11:30,790 --> 00:11:36,069
or other men both of them very famous in

280
00:11:34,030 --> 00:11:38,680
crypto community and Ron Lewis is

281
00:11:36,070 --> 00:11:41,110
actually a professor just in MIT if you

282
00:11:38,680 --> 00:11:43,270
want to go visiting and they publish

283
00:11:41,110 --> 00:11:44,830
their standard exactly forty years ago

284
00:11:43,270 --> 00:11:48,790
so it's now being 40 years that we have

285
00:11:44,830 --> 00:11:50,800
this group so and for spatter 92102

286
00:11:48,790 --> 00:11:53,890
thousand and now the pattern is in the

287
00:11:50,800 --> 00:11:57,040
public so this is the public crypts of

288
00:11:53,890 --> 00:11:58,960
ibrutinib and the mathematical idea

289
00:11:57,040 --> 00:12:02,199
behind it is the hardness of factoring

290
00:11:58,960 --> 00:12:04,090
prime as a composite number so what are

291
00:12:02,200 --> 00:12:05,620
the prime numbers prime numbers are the

292
00:12:04,090 --> 00:12:07,990
numbers that are only divisible by

293
00:12:05,620 --> 00:12:09,730
themselves and one for example 5 is a

294
00:12:07,990 --> 00:12:12,130
prime number because you can always go

295
00:12:09,730 --> 00:12:13,510
in 5 and 1 but something like 6 is a

296
00:12:12,130 --> 00:12:15,730
composite number because it's a

297
00:12:13,510 --> 00:12:19,900
multiplication or a result of 2 times 3

298
00:12:15,730 --> 00:12:22,900
and factoring some number like 6 2 2 & 3

299
00:12:19,900 --> 00:12:24,040
is very hard in large numbers when I'm

300
00:12:22,900 --> 00:12:28,150
talking to like three four hundred

301
00:12:24,040 --> 00:12:31,230
digits of number nor two LEDs so this

302
00:12:28,150 --> 00:12:34,000
would be a overview of the textbook RSA

303
00:12:31,230 --> 00:12:35,860
the details are not that important but P

304
00:12:34,000 --> 00:12:38,200
and Q are the two numbers or the two

305
00:12:35,860 --> 00:12:39,580
prime numbers that you generate and the

306
00:12:38,200 --> 00:12:42,550
size of them is something like three

307
00:12:39,580 --> 00:12:44,920
hundred digits or larger and when you do

308
00:12:42,550 --> 00:12:47,740
the multiplication you get that N which

309
00:12:44,920 --> 00:12:48,699
you would be using for your private and

310
00:12:47,740 --> 00:12:51,010
public key and

311
00:12:48,700 --> 00:12:52,900
that is something that's hard to factor

312
00:12:51,010 --> 00:12:55,780
so when you get n it's really hard to

313
00:12:52,900 --> 00:12:57,430
find out P and Q but that's the open

314
00:12:55,780 --> 00:12:59,800
problem that's what we believe to be a

315
00:12:57,430 --> 00:13:01,989
hard problem but no one has a proof that

316
00:12:59,800 --> 00:13:04,589
you cannot do it within the like the

317
00:13:01,990 --> 00:13:07,150
p-type as part of the complexity classes

318
00:13:04,590 --> 00:13:08,980
it believed to be secure so to give you

319
00:13:07,150 --> 00:13:11,260
an example for example you take two

320
00:13:08,980 --> 00:13:12,880
primes again here is just an example you

321
00:13:11,260 --> 00:13:14,830
should never use these numbers which

322
00:13:12,880 --> 00:13:17,350
should be three hundred digit I repeat

323
00:13:14,830 --> 00:13:19,270
that one more time five and eleven your

324
00:13:17,350 --> 00:13:21,730
end would be the combination fifty-five

325
00:13:19,270 --> 00:13:24,610
your fry-up and would be four times ten

326
00:13:21,730 --> 00:13:26,860
forty and if you choose your public key

327
00:13:24,610 --> 00:13:28,900
is usually either three or two to rot 60

328
00:13:26,860 --> 00:13:30,550
minus one because the way that the

329
00:13:28,900 --> 00:13:32,350
binary representation has some

330
00:13:30,550 --> 00:13:35,589
properties which makes the encryption

331
00:13:32,350 --> 00:13:37,270
much faster that they're all one the

332
00:13:35,590 --> 00:13:39,070
public is known you can just use some

333
00:13:37,270 --> 00:13:41,590
value like three and you calculate the

334
00:13:39,070 --> 00:13:43,630
private key or D based on your e in this

335
00:13:41,590 --> 00:13:46,780
case it would be 27 because the

336
00:13:43,630 --> 00:13:51,520
multiplication of 2 would be 81 and 81

337
00:13:46,780 --> 00:13:54,699
module four D is one eight 40 times 2 is

338
00:13:51,520 --> 00:13:57,850
80 and 81 is only one number larger than

339
00:13:54,700 --> 00:14:02,800
8 so it's 1 because E and D should be 1

340
00:13:57,850 --> 00:14:05,440
mod product and for example your message

341
00:14:02,800 --> 00:14:07,569
is a 2 and if you have a text message

342
00:14:05,440 --> 00:14:09,520
you can just represent as ascii code so

343
00:14:07,570 --> 00:14:11,290
that's why everything if you consider

344
00:14:09,520 --> 00:14:13,569
everything as a number we can just

345
00:14:11,290 --> 00:14:16,120
include numbers here and for example for

346
00:14:13,570 --> 00:14:19,480
character you can just convert it to

347
00:14:16,120 --> 00:14:23,260
ascii code and include that number so

348
00:14:19,480 --> 00:14:25,980
you just use your ear or the public key

349
00:14:23,260 --> 00:14:28,300
to exponent to the N and you get your

350
00:14:25,980 --> 00:14:32,110
ciphertext and again if you use your D

351
00:14:28,300 --> 00:14:36,040
eight times 27 would produce V 4 for the

352
00:14:32,110 --> 00:14:39,040
same message for you or your message but

353
00:14:36,040 --> 00:14:40,810
one of the problems it's a RSA that

354
00:14:39,040 --> 00:14:44,170
takes RSA or the example that we showed

355
00:14:40,810 --> 00:14:45,729
it's not secure can anyone spot again

356
00:14:44,170 --> 00:14:48,569
what could be the problem is something

357
00:14:45,730 --> 00:14:48,570
like the ECB

358
00:14:50,060 --> 00:14:56,329
so insecurity or cryptically the Inc CPA

359
00:14:53,000 --> 00:14:58,460
secure which means if your message 1 and

360
00:14:56,330 --> 00:14:59,900
message 2 are equal your encryption of

361
00:14:58,460 --> 00:15:00,620
message 1 our message 2 would be equal

362
00:14:59,900 --> 00:15:03,199
as well

363
00:15:00,620 --> 00:15:05,510
because here if you're just raising one

364
00:15:03,200 --> 00:15:07,520
number to power it's always going to be

365
00:15:05,510 --> 00:15:09,380
the same so 2 to the power 3 is always 8

366
00:15:07,520 --> 00:15:11,180
not no matter how many times you do it

367
00:15:09,380 --> 00:15:13,220
and this is again something that we

368
00:15:11,180 --> 00:15:15,260
don't like we want to some level of

369
00:15:13,220 --> 00:15:16,400
randomness if you include 2 one time and

370
00:15:15,260 --> 00:15:18,710
the other times you want to get

371
00:15:16,400 --> 00:15:21,410
different psychotic that's why we use

372
00:15:18,710 --> 00:15:24,920
for real-world cryptography problems

373
00:15:21,410 --> 00:15:26,959
uses OAP mechanism it's again something

374
00:15:24,920 --> 00:15:31,160
like the mode of operation if I use for

375
00:15:26,960 --> 00:15:34,160
your AES it's how you use your your base

376
00:15:31,160 --> 00:15:37,310
or primitive crypto and here you just

377
00:15:34,160 --> 00:15:39,680
add that or a random value and those G

378
00:15:37,310 --> 00:15:41,479
and H are rendered to hash functions for

379
00:15:39,680 --> 00:15:44,709
example sha-1 or something like that and

380
00:15:41,480 --> 00:15:47,720
you XOR those values and you get a value

381
00:15:44,710 --> 00:15:50,660
the R or the randomness is an important

382
00:15:47,720 --> 00:15:52,190
part here that from two same messages

383
00:15:50,660 --> 00:15:54,800
you can get two different psychotics

384
00:15:52,190 --> 00:15:56,540
that's the reason we're using door and

385
00:15:54,800 --> 00:15:59,780
that would be a conclusion of our

386
00:15:56,540 --> 00:16:02,449
asymmetric cryptography so unhide

387
00:15:59,780 --> 00:16:06,490
functions anyone can give an example

388
00:16:02,450 --> 00:16:10,760
where do you see hi hi function we use

389
00:16:06,490 --> 00:16:12,410
okay exactly digital signatures or even

390
00:16:10,760 --> 00:16:14,270
something very simpler whenever you want

391
00:16:12,410 --> 00:16:17,089
to fight download the file if you notice

392
00:16:14,270 --> 00:16:18,560
they usually give you a md5 sha-1 or

393
00:16:17,090 --> 00:16:19,970
short we take some of the fight to make

394
00:16:18,560 --> 00:16:22,489
sure the thing that you download it has

395
00:16:19,970 --> 00:16:25,370
nothing corrupted the property of hash

396
00:16:22,490 --> 00:16:27,770
functions you get a very long input

397
00:16:25,370 --> 00:16:30,620
message and you produce a short or

398
00:16:27,770 --> 00:16:32,750
constant size output for example your

399
00:16:30,620 --> 00:16:35,660
file is 1 gigabyte you're out you still

400
00:16:32,750 --> 00:16:37,580
1 can be 1/2 and 80s we want to exist be

401
00:16:35,660 --> 00:16:40,069
60 bits you don't want you want this

402
00:16:37,580 --> 00:16:43,010
constant small value and you wanted to

403
00:16:40,070 --> 00:16:45,770
have three properties one of them is it

404
00:16:43,010 --> 00:16:47,900
would be hard to produce the number or

405
00:16:45,770 --> 00:16:50,810
the value that created this hash for

406
00:16:47,900 --> 00:16:53,990
example if I know this hash of 2 is XYZ

407
00:16:50,810 --> 00:16:56,030
I want it to be very hard from XYZ you

408
00:16:53,990 --> 00:16:58,810
would be able what was the actual thing

409
00:16:56,030 --> 00:17:01,880
that hash to so that's called the

410
00:16:58,810 --> 00:17:04,220
preimage property the second preimage

411
00:17:01,880 --> 00:17:07,579
is if you have

412
00:17:04,220 --> 00:17:10,190
message m and another one M Prime you

413
00:17:07,579 --> 00:17:12,079
want it to be very hard to find another

414
00:17:10,190 --> 00:17:13,790
message that has hashes to the same

415
00:17:12,079 --> 00:17:16,550
value one this hashes to be different

416
00:17:13,790 --> 00:17:18,530
and the third value is to it would be

417
00:17:16,550 --> 00:17:21,050
hard to find any two messages that will

418
00:17:18,530 --> 00:17:24,740
produce the same hash for example if you

419
00:17:21,050 --> 00:17:27,849
produce one for hash of any file it

420
00:17:24,740 --> 00:17:31,340
would still very constant size small and

421
00:17:27,849 --> 00:17:33,469
fast but it doesn't have any of these

422
00:17:31,340 --> 00:17:36,439
properties because it's obviously the

423
00:17:33,470 --> 00:17:37,610
same values and all messages will

424
00:17:36,440 --> 00:17:42,140
produce the same thing you have

425
00:17:37,610 --> 00:17:44,510
collision there are famous examples of

426
00:17:42,140 --> 00:17:47,090
hash functions right now - - and high

427
00:17:44,510 --> 00:17:49,370
street shall one used to be good but

428
00:17:47,090 --> 00:17:50,990
trying to phase out but as of now it's

429
00:17:49,370 --> 00:17:53,330
broken or as they call it shattered

430
00:17:50,990 --> 00:17:56,000
because the Google team team could find

431
00:17:53,330 --> 00:17:57,230
a collision of sha-1 value that's why we

432
00:17:56,000 --> 00:17:57,770
don't it's not we going to use it

433
00:17:57,230 --> 00:18:01,880
anymore

434
00:17:57,770 --> 00:18:04,490
it's now in practice also broken and if

435
00:18:01,880 --> 00:18:05,930
you go to the shattered data of website

436
00:18:04,490 --> 00:18:09,230
you can read more on how they produce

437
00:18:05,930 --> 00:18:11,420
these cohesion values and to just give

438
00:18:09,230 --> 00:18:13,070
you an tabular conclusion of hashing

439
00:18:11,420 --> 00:18:15,950
function to give you some very basic

440
00:18:13,070 --> 00:18:18,500
example how easy it is to actually use

441
00:18:15,950 --> 00:18:20,690
cryptography in program languages this

442
00:18:18,500 --> 00:18:22,160
is an example in Python the first two

443
00:18:20,690 --> 00:18:24,860
are the inputs for example if you

444
00:18:22,160 --> 00:18:28,250
familiar with C Java this would be like

445
00:18:24,860 --> 00:18:29,870
your include or your import of Java you

446
00:18:28,250 --> 00:18:31,790
just define the libraries that you are

447
00:18:29,870 --> 00:18:35,149
using inside your program you just

448
00:18:31,790 --> 00:18:36,800
define object hash object and you say

449
00:18:35,150 --> 00:18:38,840
what kind of hashing you want to use

450
00:18:36,800 --> 00:18:42,050
here before now we are using short -

451
00:18:38,840 --> 00:18:44,179
that produces 256 bit digest for you and

452
00:18:42,050 --> 00:18:46,190
you say the value that you want to

453
00:18:44,180 --> 00:18:49,040
create a hash for example here besides

454
00:18:46,190 --> 00:18:52,220
bus and 2017 will produce that hash for

455
00:18:49,040 --> 00:18:54,620
you and this value is at least base64

456
00:18:52,220 --> 00:18:56,780
encoding of the bytes values which means

457
00:18:54,620 --> 00:18:59,050
you only get 64 values here but that's

458
00:18:56,780 --> 00:19:02,660
why they always look so random looking

459
00:18:59,050 --> 00:19:05,090
when you haven't like proper text like

460
00:19:02,660 --> 00:19:06,680
this I Boston you just random value

461
00:19:05,090 --> 00:19:10,070
there so that would be to produce our

462
00:19:06,680 --> 00:19:13,250
hash - in the program language for AES

463
00:19:10,070 --> 00:19:15,350
is again the same T to get random values

464
00:19:13,250 --> 00:19:17,179
we use the U random

465
00:19:15,350 --> 00:19:19,580
Linux platform you can just use the

466
00:19:17,179 --> 00:19:21,440
Python it's supporting different program

467
00:19:19,580 --> 00:19:23,270
different environments but just a

468
00:19:21,440 --> 00:19:26,210
curated random value one of the

469
00:19:23,270 --> 00:19:27,770
securities use the U random or inside

470
00:19:26,210 --> 00:19:30,559
your limited with the devil you Randall

471
00:19:27,770 --> 00:19:33,289
and you get a random byte array of

472
00:19:30,559 --> 00:19:35,418
sixteenth and you use as IV and a is

473
00:19:33,289 --> 00:19:38,299
because if you remember we said in CBC

474
00:19:35,419 --> 00:19:41,990
mode we need to use IV for providing

475
00:19:38,299 --> 00:19:44,150
what the randomness right so that's why

476
00:19:41,990 --> 00:19:46,669
you get your IV and your key and you

477
00:19:44,150 --> 00:19:49,190
pass this cipher message that you need

478
00:19:46,669 --> 00:19:51,110
and if you remember we said a AES works

479
00:19:49,190 --> 00:19:53,210
on blocks of size here you don't need to

480
00:19:51,110 --> 00:19:56,870
pad your message because the length of

481
00:19:53,210 --> 00:20:01,010
b-side 2017 is actually 16 and 16 is

482
00:19:56,870 --> 00:20:03,469
128-bit this is by chance if it was

483
00:20:01,010 --> 00:20:05,090
shorter or longer you had pad to pad

484
00:20:03,470 --> 00:20:06,980
your message and make it a multiple of

485
00:20:05,090 --> 00:20:08,449
16 bytes then you would be able to

486
00:20:06,980 --> 00:20:11,419
encrypt it otherwise you get an error

487
00:20:08,450 --> 00:20:13,190
for example in CBC mode and the

488
00:20:11,419 --> 00:20:16,100
Decrypter is exactly the same thing you

489
00:20:13,190 --> 00:20:18,080
just define your functions and you pass

490
00:20:16,100 --> 00:20:23,928
with your ciphertext and IV and you get

491
00:20:18,080 --> 00:20:27,850
the decryption for RSA again the key

492
00:20:23,929 --> 00:20:32,150
size 248 this is the to 48 bits for that

493
00:20:27,850 --> 00:20:33,740
private key that is that p and q the

494
00:20:32,150 --> 00:20:37,190
prime numbers that we are talking about

495
00:20:33,740 --> 00:20:39,440
they would be about 500 digits of number

496
00:20:37,190 --> 00:20:41,840
for example 100 is the three digit

497
00:20:39,440 --> 00:20:46,640
number so 500 digits would the digit

498
00:20:41,840 --> 00:20:48,649
number is a large large number and as we

499
00:20:46,640 --> 00:20:51,500
said for public exponent or e you can

500
00:20:48,650 --> 00:20:54,409
use values like 3 or to the power of 16

501
00:20:51,500 --> 00:20:56,150
plus 1 because of the property that they

502
00:20:54,409 --> 00:20:59,090
have in binary format they provide some

503
00:20:56,150 --> 00:21:01,490
fast modification and some fast

504
00:20:59,090 --> 00:21:03,230
explanation functionality that's why

505
00:21:01,490 --> 00:21:06,200
these are you can usually use these

506
00:21:03,230 --> 00:21:09,500
fixed values and from the private key

507
00:21:06,200 --> 00:21:12,080
you can calculate your public key but

508
00:21:09,500 --> 00:21:14,240
from the public key is not possible to

509
00:21:12,080 --> 00:21:15,980
get the private key and that's the whole

510
00:21:14,240 --> 00:21:19,400
property from the public you won't be

511
00:21:15,980 --> 00:21:22,490
able to calculate the privacy and for

512
00:21:19,400 --> 00:21:25,309
encryption if you notice this is the Oh

513
00:21:22,490 --> 00:21:26,059
a P we are talking about when you want

514
00:21:25,309 --> 00:21:28,540
to creep

515
00:21:26,059 --> 00:21:30,790
create your RSA you want to say what

516
00:21:28,540 --> 00:21:33,190
kind of RSA you want to using or the

517
00:21:30,790 --> 00:21:34,930
standard or the protocol of the RSA you

518
00:21:33,190 --> 00:21:39,370
want to use it you want to use the OAP

519
00:21:34,930 --> 00:21:43,030
to produce that in CPA security property

520
00:21:39,370 --> 00:21:44,860
and those gnf function that we are

521
00:21:43,030 --> 00:21:49,030
talking about here we are saying that

522
00:21:44,860 --> 00:21:51,850
use sha-1 for that functions GNH and

523
00:21:49,030 --> 00:21:53,950
then you just pass that hashing

524
00:21:51,850 --> 00:21:55,540
algorithm and you include the message

525
00:21:53,950 --> 00:21:57,130
for decryption it's the same property

526
00:21:55,540 --> 00:22:01,420
but you only using the private key

527
00:21:57,130 --> 00:22:05,080
instead of your public key so the final

528
00:22:01,420 --> 00:22:08,050
takeaways for this talk is don't invent

529
00:22:05,080 --> 00:22:10,480
your crypto algorithms for almost every

530
00:22:08,050 --> 00:22:13,240
functionality that you need dark crypto

531
00:22:10,480 --> 00:22:15,070
front of libraries and algorithms that

532
00:22:13,240 --> 00:22:17,560
have been developed by cryptographers

533
00:22:15,070 --> 00:22:20,290
being tested for a long time and we are

534
00:22:17,560 --> 00:22:21,940
not we know they're secure also never

535
00:22:20,290 --> 00:22:25,240
implement your own crypto library

536
00:22:21,940 --> 00:22:27,490
because it might be look very easy to

537
00:22:25,240 --> 00:22:30,280
implement all these functionalities but

538
00:22:27,490 --> 00:22:32,410
you need to think about side-channel

539
00:22:30,280 --> 00:22:34,899
attacks for example one of these concept

540
00:22:32,410 --> 00:22:36,850
that time comparison if you want to make

541
00:22:34,900 --> 00:22:39,910
sure two values are not the same if you

542
00:22:36,850 --> 00:22:42,129
use the normal life normal comparison as

543
00:22:39,910 --> 00:22:44,830
soon as two things are not equal it was

544
00:22:42,130 --> 00:22:46,950
going to say false and return but in a

545
00:22:44,830 --> 00:22:49,720
constant time you go through the whole

546
00:22:46,950 --> 00:22:52,300
message and then if they are not equal

547
00:22:49,720 --> 00:22:53,890
you return back so base if they're just

548
00:22:52,300 --> 00:22:56,980
return unfair if two things are not

549
00:22:53,890 --> 00:22:58,930
equal at the first life and it returns

550
00:22:56,980 --> 00:23:01,000
it takes a shorter time that if they're

551
00:22:58,930 --> 00:23:03,370
not the same at the last bite

552
00:23:01,000 --> 00:23:05,140
so we by using this simple comparison

553
00:23:03,370 --> 00:23:07,360
side-channel attacks you can actually

554
00:23:05,140 --> 00:23:09,400
get a key or even the decryption of a

555
00:23:07,360 --> 00:23:11,139
message so that's why is to get the

556
00:23:09,400 --> 00:23:13,030
actual implementation of crypto library

557
00:23:11,140 --> 00:23:14,740
is very hard and even still people get

558
00:23:13,030 --> 00:23:16,629
it wrong even the expert for example

559
00:23:14,740 --> 00:23:18,340
openness or so from the time you see

560
00:23:16,630 --> 00:23:20,140
there are some voluntary T's because it

561
00:23:18,340 --> 00:23:22,060
is because they made a very simple

562
00:23:20,140 --> 00:23:24,250
mistake that they will realize that it

563
00:23:22,060 --> 00:23:26,080
has these consequences and there are

564
00:23:24,250 --> 00:23:27,430
experts who make this mistake so even

565
00:23:26,080 --> 00:23:29,010
the amateurs will make much more

566
00:23:27,430 --> 00:23:31,630
mistakes

567
00:23:29,010 --> 00:23:35,530
doing the crypto using the libraries is

568
00:23:31,630 --> 00:23:36,780
not that hard as we saw it's just simple

569
00:23:35,530 --> 00:23:40,270
statements in every programming language

570
00:23:36,780 --> 00:23:41,980
but we still see people get wrong it's

571
00:23:40,270 --> 00:23:44,260
because whenever you find it

572
00:23:41,980 --> 00:23:46,120
source most of them might be wrong or

573
00:23:44,260 --> 00:23:48,640
updated for example if you look at the

574
00:23:46,120 --> 00:23:51,250
internet on RSA a lot of people use

575
00:23:48,640 --> 00:23:53,620
these values the small single digits

576
00:23:51,250 --> 00:23:55,570
values of P and Q so if you don't know

577
00:23:53,620 --> 00:23:57,280
that these value should be hard to see

578
00:23:55,570 --> 00:23:58,030
this way this is the example it makes

579
00:23:57,280 --> 00:23:59,740
sense to me

580
00:23:58,030 --> 00:24:01,059
it encrypts the message you decrypt the

581
00:23:59,740 --> 00:24:02,620
message you should be good so you might

582
00:24:01,059 --> 00:24:05,290
be using that and they're having

583
00:24:02,620 --> 00:24:07,059
examples of using this wrong numbers

584
00:24:05,290 --> 00:24:08,830
inside real libraries for example you go

585
00:24:07,059 --> 00:24:11,350
to get out of something called salt and

586
00:24:08,830 --> 00:24:14,080
you look at their first evaluation you

587
00:24:11,350 --> 00:24:17,110
can see that they actually make made

588
00:24:14,080 --> 00:24:19,780
this mistake of importance in the crypto

589
00:24:17,110 --> 00:24:22,059
library and if you have a data in

590
00:24:19,780 --> 00:24:24,370
transit missing meaning going from point

591
00:24:22,059 --> 00:24:28,059
one to point D on the network you can

592
00:24:24,370 --> 00:24:30,729
simply just use the SSL protocol or and

593
00:24:28,059 --> 00:24:33,399
there is a function library for it to

594
00:24:30,730 --> 00:24:35,350
encrypt that transmit your data and if

595
00:24:33,400 --> 00:24:36,669
you want to have some data at risk for

596
00:24:35,350 --> 00:24:39,340
example it's going to include the file

597
00:24:36,669 --> 00:24:41,169
and store it on your computer you can

598
00:24:39,340 --> 00:24:43,809
use come something called the PGP

599
00:24:41,169 --> 00:24:45,700
protocol it's a combination of the

600
00:24:43,809 --> 00:24:48,120
public key private key and hashing

601
00:24:45,700 --> 00:24:51,220
functions to make sure whatever file you

602
00:24:48,120 --> 00:24:53,979
encrypting is secure is you can transfer

603
00:24:51,220 --> 00:24:55,870
it to other people and no one else can

604
00:24:53,980 --> 00:24:57,880
tweak something your message without you

605
00:24:55,870 --> 00:25:01,809
noticing so these are set of protocols

606
00:24:57,880 --> 00:25:04,179
that using all these three primitives of

607
00:25:01,809 --> 00:25:06,340
cryptography that we talked about you

608
00:25:04,179 --> 00:25:07,570
can use any of these two at these two

609
00:25:06,340 --> 00:25:09,490
and you don't even have to implement

610
00:25:07,570 --> 00:25:13,090
them there is already an implementation

611
00:25:09,490 --> 00:25:18,750
of all of them available and actually

612
00:25:13,090 --> 00:25:18,750
thank you store any questions yes

613
00:25:27,690 --> 00:25:40,420
yes perfect so to just to repeat the

614
00:25:36,400 --> 00:25:42,100
question the question self things or to

615
00:25:40,420 --> 00:25:44,950
consider when you want to generate

616
00:25:42,100 --> 00:25:47,919
random number so on Linux platforms

617
00:25:44,950 --> 00:25:50,200
there are two sources the entropy or

618
00:25:47,920 --> 00:25:52,690
randomness you have it's a dev slash

619
00:25:50,200 --> 00:25:54,700
random and you random but the problem is

620
00:25:52,690 --> 00:25:57,010
random is blocking it music there is not

621
00:25:54,700 --> 00:25:59,350
enough entropy inside your computer and

622
00:25:57,010 --> 00:26:01,030
if this entropy comes from the from the

623
00:25:59,350 --> 00:26:02,580
temperature of the computer the mouse

624
00:26:01,030 --> 00:26:05,950
clicks that you do all of these things

625
00:26:02,580 --> 00:26:07,389
run from the physical sources it

626
00:26:05,950 --> 00:26:09,700
produces a random number and if there is

627
00:26:07,390 --> 00:26:13,180
not enough it would block but you random

628
00:26:09,700 --> 00:26:15,400
a is not non blocking and for

629
00:26:13,180 --> 00:26:18,160
cryptographic mechanism is as secure and

630
00:26:15,400 --> 00:26:21,960
for example in the Python programming

631
00:26:18,160 --> 00:26:24,790
language we can use the OSU random and

632
00:26:21,960 --> 00:26:27,430
always use the cryptographic safe random

633
00:26:24,790 --> 00:26:29,320
number generators not the random random

634
00:26:27,430 --> 00:26:31,510
number and inks that you have encrypted

635
00:26:29,320 --> 00:26:33,669
in your normal libraries because you

636
00:26:31,510 --> 00:26:35,530
also have the random number in your

637
00:26:33,670 --> 00:26:37,240
libraries but the office have a constant

638
00:26:35,530 --> 00:26:39,850
seat always use this cryptographic

639
00:26:37,240 --> 00:26:42,490
secure and open if you use the operating

640
00:26:39,850 --> 00:26:45,060
system random number generator or

641
00:26:42,490 --> 00:26:45,060
usually safe

642
00:26:52,250 --> 00:26:59,120
so that point will be smaller it's not

643
00:26:56,250 --> 00:27:01,380
like some of the exact cryptographic

644
00:26:59,120 --> 00:27:04,289
properties in mathematical if you go to

645
00:27:01,380 --> 00:27:07,649
a cryptographic stackoverflow you can

646
00:27:04,289 --> 00:27:10,620
get the perfect example expert not me

647
00:27:07,649 --> 00:27:12,178
that they have there but the reason

648
00:27:10,620 --> 00:27:14,729
they're using these two constant numbers

649
00:27:12,179 --> 00:27:17,070
is because the both of them are all the

650
00:27:14,730 --> 00:27:19,169
values are 1 and that makes the

651
00:27:17,070 --> 00:27:21,840
exponential function functionality much

652
00:27:19,169 --> 00:27:34,230
faster when you want to do something to

653
00:27:21,840 --> 00:27:37,889
to external and sub to something yes yes

654
00:27:34,230 --> 00:27:40,070
so the ideas or death they have

655
00:27:37,889 --> 00:27:43,379
something called the privacy

656
00:27:40,070 --> 00:27:45,899
differential analysis attack that was

657
00:27:43,379 --> 00:27:49,408
first I think released by IBM but they

658
00:27:45,899 --> 00:27:51,899
had to hold on to it the history I'm not

659
00:27:49,409 --> 00:27:53,940
sure exactly what who know who first and

660
00:27:51,899 --> 00:27:57,840
then they realized but if I'm not

661
00:27:53,940 --> 00:27:59,759
mistaken some special research labs knew

662
00:27:57,840 --> 00:28:02,220
about this functionality before it was

663
00:27:59,759 --> 00:28:04,620
publicized and after it was publicized

664
00:28:02,220 --> 00:28:06,389
they realize it's not as secure anymore

665
00:28:04,620 --> 00:28:09,120
and the other things was the key size

666
00:28:06,389 --> 00:28:10,320
the key sizing ves is much smaller which

667
00:28:09,120 --> 00:28:12,209
makes it easier to brute force

668
00:28:10,320 --> 00:28:14,970
especially nowadays you be have the

669
00:28:12,210 --> 00:28:17,190
heart horror capability probably anyone

670
00:28:14,970 --> 00:28:24,450
with not even large amount of money you

671
00:28:17,190 --> 00:28:25,799
can buy these dead crackers that's what

672
00:28:24,450 --> 00:28:28,679
was one of the problem the other most

673
00:28:25,799 --> 00:28:30,929
was this differential analysis attack

674
00:28:28,679 --> 00:28:34,649
which reduces even these key states that

675
00:28:30,929 --> 00:28:36,090
you have to search for and that's why

676
00:28:34,649 --> 00:28:38,129
they have these Triple DES to make the

677
00:28:36,090 --> 00:28:40,139
key size larger but again because the

678
00:28:38,129 --> 00:28:43,580
budget was that differential analysis

679
00:28:40,139 --> 00:28:43,580
problem yes please

680
00:28:51,059 --> 00:28:55,960
and no even right now if you look at the

681
00:28:53,799 --> 00:28:59,519
for example some pita nsab suit or even

682
00:28:55,960 --> 00:29:03,099
at their new CN sa form they always

683
00:28:59,519 --> 00:29:04,989
recommend using some like just GCM at

684
00:29:03,099 --> 00:29:06,968
the base it uses the CTR

685
00:29:04,989 --> 00:29:08,200
but the things it's also authenticated

686
00:29:06,969 --> 00:29:10,389
which means you don't need to do the

687
00:29:08,200 --> 00:29:12,879
hash or H Mac the H Mac or something

688
00:29:10,389 --> 00:29:15,008
like for your fight but GCM is more

689
00:29:12,879 --> 00:29:18,189
involved and to introduce it here will

690
00:29:15,009 --> 00:29:19,839
make people more confused that's one of

691
00:29:18,190 --> 00:29:21,849
the problems also it has some signs

692
00:29:19,839 --> 00:29:26,710
limit but they recorded recorded bass

693
00:29:21,849 --> 00:29:28,739
definitely GCM and it's for Galois

694
00:29:26,710 --> 00:29:32,320
counter mode so they use this Galois

695
00:29:28,739 --> 00:29:35,080
field multiplication to generate these

696
00:29:32,320 --> 00:29:37,320
tags of whatever message you increase so

697
00:29:35,080 --> 00:29:41,499
you make sure that your fight hasn't the

698
00:29:37,320 --> 00:29:43,928
middle bit or tweet on the way of

699
00:29:41,499 --> 00:29:47,440
transient or whatever and it's also

700
00:29:43,929 --> 00:29:49,119
using this counter mode as a encryption

701
00:29:47,440 --> 00:29:51,509
mechanism and it's also pass but they

702
00:29:49,119 --> 00:29:55,418
also provides this authentication

703
00:29:51,509 --> 00:29:59,979
property under setup than the AE ad the

704
00:29:55,419 --> 00:30:05,330
authenticated encryption something any

705
00:29:59,979 --> 00:30:12,369
other questions thank you again a real

706
00:30:05,330 --> 00:30:12,369
[Applause]

