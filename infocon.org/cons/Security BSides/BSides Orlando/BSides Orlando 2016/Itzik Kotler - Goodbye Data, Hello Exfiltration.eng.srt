1
00:00:00,000 --> 00:00:06,839
hi everybody about to start<font color="#E5E5E5"> my</font>

2
00:00:04,200 --> 00:00:08,490
presentation thank you very much my name

3
00:00:06,839 --> 00:00:10,349
is Isaac<font color="#CCCCCC"> cochlear and I'm the CTO and</font>

4
00:00:08,490 --> 00:00:16,560
co-founder of save reach and today I'm

5
00:00:10,349 --> 00:00:19,560
going<font color="#CCCCCC"> to talk to</font><font color="#E5E5E5"> you about execration if</font>

6
00:00:16,560 --> 00:00:21,509
you look<font color="#E5E5E5"> on the past bricks in a few</font>

7
00:00:19,560 --> 00:00:24,960
couple of years you can see that<font color="#E5E5E5"> the</font>

8
00:00:21,510 --> 00:00:27,480
<font color="#CCCCCC">ultimate endgame for the attacker oh</font>

9
00:00:24,960 --> 00:00:31,740
yeah that's actually for the video not

10
00:00:27,480 --> 00:00:35,059
for the speaker's here so<font color="#E5E5E5"> I'll try to</font>

11
00:00:31,740 --> 00:00:38,339
speak louder you are to mix to make up

12
00:00:35,059 --> 00:00:40,530
<font color="#CCCCCC">for that if</font><font color="#E5E5E5"> you look on the past couple</font>

13
00:00:38,340 --> 00:00:43,230
of years and and the different breaches

14
00:00:40,530 --> 00:00:47,340
that happened basically<font color="#CCCCCC"> you see there is</font>

15
00:00:43,230 --> 00:00:49,739
to end games for the adversary they can

16
00:00:47,340 --> 00:00:52,320
<font color="#E5E5E5">either go in into your system sync your</font>

17
00:00:49,739 --> 00:00:54,989
computers and destroy something or they

18
00:00:52,320 --> 00:00:57,480
can<font color="#CCCCCC"> go in</font><font color="#E5E5E5"> and try to steal something now</font>

19
00:00:54,989 --> 00:00:59,968
these are two directives and obviously

20
00:00:57,480 --> 00:01:02,819
there's benefits so to speak for each

21
00:00:59,969 --> 00:01:06,150
one of these however the destructive

22
00:01:02,820 --> 00:01:08,850
path is much more point in time because

23
00:01:06,150 --> 00:01:11,659
once they'll do it they'll probably<font color="#CCCCCC"> blob</font>

24
00:01:08,850 --> 00:01:14,759
<font color="#CCCCCC">their cover while stealing information</font>

25
00:01:11,659 --> 00:01:16,770
on a long period of time is more

26
00:01:14,760 --> 00:01:18,900
profitable so you see<font color="#E5E5E5"> there's more</font><font color="#CCCCCC"> and</font>

27
00:01:16,770 --> 00:01:21,960
more breaches where the attackers is

28
00:01:18,900 --> 00:01:24,450
basically stealing and when I'm saying

29
00:01:21,960 --> 00:01:27,000
stealing a meaning assets assets can be

30
00:01:24,450 --> 00:01:29,670
<font color="#E5E5E5">different for a different company it can</font>

31
00:01:27,000 --> 00:01:31,710
be a credit card in one company it can

32
00:01:29,670 --> 00:01:33,960
be intellectual property at another or

33
00:01:31,710 --> 00:01:35,309
it can be a source code depends on<font color="#E5E5E5"> the</font>

34
00:01:33,960 --> 00:01:39,329
<font color="#E5E5E5">company and</font><font color="#CCCCCC"> the target there is a</font>

35
00:01:35,310 --> 00:01:40,740
different assets so in this topic today

36
00:01:39,329 --> 00:01:45,630
in this talk we're going to talk about

37
00:01:40,740 --> 00:01:47,970
how you can exaggerate these assets if

38
00:01:45,630 --> 00:01:50,460
we<font color="#E5E5E5"> already assume the word bridge</font>

39
00:01:47,970 --> 00:01:52,259
mindset and we know that<font color="#CCCCCC"> the company</font>

40
00:01:50,460 --> 00:01:54,630
that we're working<font color="#CCCCCC"> for or going to test</font>

41
00:01:52,259 --> 00:01:56,130
for is being breached then the right

42
00:01:54,630 --> 00:01:59,039
thing to go<font color="#CCCCCC"> ahead and do is basically</font>

43
00:01:56,130 --> 00:02:01,649
<font color="#E5E5E5">run a red team simulation of how such</font>

44
00:01:59,040 --> 00:02:04,320
its expectation can take place so

45
00:02:01,649 --> 00:02:06,299
basically on the red team engagements

46
00:02:04,320 --> 00:02:07,979
for those who<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> know what to red</font>

47
00:02:06,299 --> 00:02:10,110
team is i'll do a brief can I walk

48
00:02:07,979 --> 00:02:12,900
<font color="#CCCCCC">through about</font><font color="#E5E5E5"> the idea the</font><font color="#CCCCCC"> idea is</font><font color="#E5E5E5"> that</font>

49
00:02:10,110 --> 00:02:13,500
you're going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be going into</font><font color="#E5E5E5"> a company</font>

50
00:02:12,900 --> 00:02:15,960
<font color="#E5E5E5">or</font>

51
00:02:13,500 --> 00:02:17,430
organization and pretend to<font color="#CCCCCC"> be the</font>

52
00:02:15,960 --> 00:02:20,100
hacker you'll simulate what the hiker

53
00:02:17,430 --> 00:02:22,620
can cannot do within that company and

54
00:02:20,100 --> 00:02:23,880
you focus<font color="#CCCCCC"> on an objective and not</font>

55
00:02:22,620 --> 00:02:26,010
conversation<font color="#E5E5E5"> today is going to be</font><font color="#CCCCCC"> x</font>

56
00:02:23,880 --> 00:02:28,290
filtration so i'll be giving practical

57
00:02:26,010 --> 00:02:30,720
examples of how you can run<font color="#CCCCCC"> Red Team</font>

58
00:02:28,290 --> 00:02:34,109
engagements and basically<font color="#CCCCCC"> exaggerate</font>

59
00:02:30,720 --> 00:02:36,510
assets from a company in order to see if

60
00:02:34,110 --> 00:02:44,130
you can monitor that and be you can

61
00:02:36,510 --> 00:02:45,620
actually mitigate that so kind of scope

62
00:02:44,130 --> 00:02:49,140
up there are the rules of engagement

63
00:02:45,620 --> 00:02:51,900
here so let's<font color="#E5E5E5"> assume that we have a</font>

64
00:02:49,140 --> 00:02:54,390
company company X and then company has a

65
00:02:51,900 --> 00:02:56,250
database and in these<font color="#E5E5E5"> other beings their</font>

66
00:02:54,390 --> 00:02:58,049
assets<font color="#CCCCCC"> the company</font><font color="#E5E5E5"> afraid that the</font>

67
00:02:56,250 --> 00:03:00,300
hacker might try to go ahead<font color="#E5E5E5"> and steal</font>

68
00:02:58,050 --> 00:03:02,670
what we're going to do in this imaginary

69
00:03:00,300 --> 00:03:05,190
scenario is we're going to spin up<font color="#E5E5E5"> a</font>

70
00:03:02,670 --> 00:03:07,799
virtual machine in that database segment

71
00:03:05,190 --> 00:03:10,709
that machine is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be a</font><font color="#CCCCCC"> boom tube</font>

72
00:03:07,800 --> 00:03:12,510
just<font color="#CCCCCC"> a clear vanilla boon to it</font><font color="#E5E5E5"> can be</font>

73
00:03:10,709 --> 00:03:14,670
depending on the engagement different

74
00:03:12,510 --> 00:03:16,829
type of operation system but for<font color="#E5E5E5"> this</font>

75
00:03:14,670 --> 00:03:19,170
exercise that's what I've prepared to

76
00:03:16,830 --> 00:03:21,239
talk on we're going<font color="#E5E5E5"> to have a standard</font>

77
00:03:19,170 --> 00:03:23,100
account on that machine so again imagine

78
00:03:21,239 --> 00:03:25,110
this is another base machine it's

79
00:03:23,100 --> 00:03:27,329
<font color="#E5E5E5">running on a simple Ubuntu and we have a</font>

80
00:03:25,110 --> 00:03:29,489
user we somehow infiltrate the company

81
00:03:27,330 --> 00:03:31,470
and leather remove<font color="#E5E5E5"> yourself all to the</font>

82
00:03:29,489 --> 00:03:33,930
point where we have<font color="#E5E5E5"> an accountant that</font>

83
00:03:31,470 --> 00:03:36,060
<font color="#E5E5E5">machine we don't have any compilers</font>

84
00:03:33,930 --> 00:03:38,940
meaning that we can't compile any kind

85
00:03:36,060 --> 00:03:40,440
of backdoor or tool so you<font color="#E5E5E5"> guys we're</font>

86
00:03:38,940 --> 00:03:43,109
going to<font color="#E5E5E5"> kind of use</font><font color="#CCCCCC"> the lay of the land</font>

87
00:03:40,440 --> 00:03:45,239
<font color="#E5E5E5">approach and we also don't in</font>

88
00:03:43,110 --> 00:03:47,760
interpreters and<font color="#CCCCCC"> Oh Python or Ruby here</font>

89
00:03:45,239 --> 00:03:50,340
and it's a read-only file system

90
00:03:47,760 --> 00:03:53,100
essentially meaning that we cannot make

91
00:03:50,340 --> 00:03:55,709
any change in<font color="#CCCCCC"> the machine we have to use</font>

92
00:03:53,100 --> 00:03:57,329
anything that's already built in that to

93
00:03:55,709 --> 00:04:00,870
kind of use that to extricate the

94
00:03:57,329 --> 00:04:02,489
information back to our server can be in

95
00:04:00,870 --> 00:04:04,829
the clouds can be another machine in

96
00:04:02,489 --> 00:04:08,549
another segment anywhere but that

97
00:04:04,829 --> 00:04:10,140
particular machine the second thing that

98
00:04:08,549 --> 00:04:13,200
<font color="#E5E5E5">that will have to do in this engagement</font>

99
00:04:10,140 --> 00:04:15,149
in this exercise is to choose the<font color="#E5E5E5"> assets</font>

100
00:04:13,200 --> 00:04:17,519
that<font color="#CCCCCC"> are eventually going to try to exit</font>

101
00:04:15,150 --> 00:04:18,959
rate of course depending<font color="#CCCCCC"> on the</font>

102
00:04:17,519 --> 00:04:21,180
engagement and<font color="#CCCCCC"> the idea it can</font><font color="#E5E5E5"> be</font>

103
00:04:18,959 --> 00:04:23,310
different types of assets I'll start

104
00:04:21,180 --> 00:04:25,530
with<font color="#E5E5E5"> the credit</font><font color="#CCCCCC"> card just</font><font color="#E5E5E5"> as a generic</font>

105
00:04:23,310 --> 00:04:27,360
one and during the presentation will

106
00:04:25,530 --> 00:04:29,580
switch and see how we can<font color="#E5E5E5"> count</font>

107
00:04:27,360 --> 00:04:31,710
they're different assets and different

108
00:04:29,580 --> 00:04:35,758
ideas and challenges that might be

109
00:04:31,710 --> 00:04:37,948
<font color="#E5E5E5">accompanied with it so we'll start with</font>

110
00:04:35,759 --> 00:04:39,629
<font color="#CCCCCC">the network</font><font color="#E5E5E5"> excitation meaning that we</font>

111
00:04:37,949 --> 00:04:42,360
have a machine it's going to some sort

112
00:04:39,629 --> 00:04:44,460
of the network and this is how we going

113
00:04:42,360 --> 00:04:47,340
to<font color="#E5E5E5"> try to approach taking information</font>

114
00:04:44,460 --> 00:04:49,560
from it<font color="#E5E5E5"> disappear in one of the major</font>

115
00:04:47,340 --> 00:04:51,419
protocols has been used today and we're

116
00:04:49,560 --> 00:04:54,259
going<font color="#E5E5E5"> to start with a number of</font>

117
00:04:51,419 --> 00:04:58,979
<font color="#CCCCCC">techniques that will be leveraging PCP</font>

118
00:04:54,259 --> 00:05:01,590
as the underlying protocol so the first

119
00:04:58,979 --> 00:05:05,969
in a very basic<font color="#E5E5E5"> example will be to</font>

120
00:05:01,590 --> 00:05:09,090
leverage any HTTP browser or downloading

121
00:05:05,969 --> 00:05:12,270
utility that will be installed<font color="#CCCCCC"> on that</font>

122
00:05:09,090 --> 00:05:14,609
machine and surely enough we have<font color="#CCCCCC"> W get</font>

123
00:05:12,270 --> 00:05:17,460
which is<font color="#CCCCCC"> a free software that is bundled</font>

124
00:05:14,610 --> 00:05:20,310
with ubuntu and basically by setting up

125
00:05:17,460 --> 00:05:22,349
a server somewhere in again can be

126
00:05:20,310 --> 00:05:26,370
external to the network it can be within

127
00:05:22,349 --> 00:05:29,279
the<font color="#E5E5E5"> network what we can do from our red</font>

128
00:05:26,370 --> 00:05:31,800
team machine for our database<font color="#E5E5E5"> simulated</font>

129
00:05:29,279 --> 00:05:34,740
box we can then try to go ahead<font color="#E5E5E5"> and</font>

130
00:05:31,800 --> 00:05:37,110
browsing to our server and embedded the

131
00:05:34,740 --> 00:05:41,190
credit card here is<font color="#E5E5E5"> being marketed as a</font>

132
00:05:37,110 --> 00:05:43,139
dread in in the URL itself so basically

133
00:05:41,190 --> 00:05:47,039
what we're simulating is just the user

134
00:05:43,139 --> 00:05:49,469
trying to brow someplace and by chance

135
00:05:47,039 --> 00:05:52,500
or by accident also embedding the

136
00:05:49,469 --> 00:05:55,099
payload in it again it's a very simple

137
00:05:52,500 --> 00:05:58,169
<font color="#E5E5E5">method but yet it works like a charm</font>

138
00:05:55,099 --> 00:06:00,680
<font color="#E5E5E5">I'll do a quick demo of it to see</font><font color="#CCCCCC"> how it</font>

139
00:05:58,169 --> 00:06:00,680
looks<font color="#E5E5E5"> like</font>

140
00:06:12,190 --> 00:06:21,330
so again<font color="#E5E5E5"> from our oh actually it didn't</font>

141
00:06:16,540 --> 00:06:21,330
switch to the other screen interesting

142
00:06:22,590 --> 00:06:33,099
wait I'll try<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> okay now it looks</font>

143
00:06:29,350 --> 00:06:39,880
much better on to some resolution fixing

144
00:06:33,100 --> 00:06:42,370
over here so basically arm on the<font color="#E5E5E5"> right</font>

145
00:06:39,880 --> 00:06:45,760
side we<font color="#CCCCCC"> have we've utilized the W get</font>

146
00:06:42,370 --> 00:06:49,510
and we set up a<font color="#E5E5E5"> simple or I'm a very</font>

147
00:06:45,760 --> 00:06:52,000
basic not<font color="#E5E5E5"> even a web server just a</font>

148
00:06:49,510 --> 00:06:54,340
socket listening on port 80 and as you

149
00:06:52,000 --> 00:06:56,890
can see the result<font color="#CCCCCC"> II that me on the</font>

150
00:06:54,340 --> 00:06:59,710
server side I got the request and the

151
00:06:56,890 --> 00:07:02,260
test payload was actually transferred as

152
00:06:59,710 --> 00:07:04,900
part of it so again it's a very basic

153
00:07:02,260 --> 00:07:10,920
very simple technique and again<font color="#CCCCCC"> very</font>

154
00:07:04,900 --> 00:07:10,919
effective one<font color="#E5E5E5"> okay moving on</font>

155
00:07:14,320 --> 00:07:21,050
the next<font color="#E5E5E5"> example is also leveraging HTTP</font>

156
00:07:18,350 --> 00:07:22,670
and<font color="#CCCCCC"> W get but this</font><font color="#E5E5E5"> time we're becoming a</font>

157
00:07:21,050 --> 00:07:25,460
<font color="#E5E5E5">little bit more subtle in the way that</font>

158
00:07:22,670 --> 00:07:27,650
<font color="#E5E5E5">we're transferring the asset so the</font>

159
00:07:25,460 --> 00:07:30,859
previous example we've<font color="#CCCCCC"> used the URL to</font>

160
00:07:27,650 --> 00:07:32,510
kind<font color="#E5E5E5"> of pass our credit card in it now</font>

161
00:07:30,860 --> 00:07:35,450
we're actually leveraging one of the

162
00:07:32,510 --> 00:07:37,789
default options that<font color="#CCCCCC"> W get allow us to</font>

163
00:07:35,450 --> 00:07:40,849
do and it<font color="#E5E5E5"> is basically specifying our</font>

164
00:07:37,790 --> 00:07:42,200
own header to the HTTP requests so what

165
00:07:40,850 --> 00:07:44,210
we're going to do is we're going to

166
00:07:42,200 --> 00:07:47,120
abuse the cookie mechanisms and

167
00:07:44,210 --> 00:07:49,159
basically create a fake cookie and in

168
00:07:47,120 --> 00:07:51,830
<font color="#CCCCCC">that cookie</font><font color="#E5E5E5"> we're going to pass the</font>

169
00:07:49,160 --> 00:07:53,720
credit card the payload the interesting

170
00:07:51,830 --> 00:07:55,340
thing here<font color="#E5E5E5"> is because cookies has</font>

171
00:07:53,720 --> 00:07:58,430
different types of shapes sizes and

172
00:07:55,340 --> 00:08:00,380
lengths there is not there is<font color="#CCCCCC"> no easy</font>

173
00:07:58,430 --> 00:08:03,560
way<font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> determine whether</font><font color="#CCCCCC"> it's a</font>

174
00:08:00,380 --> 00:08:05,830
legitimate session ID or just a credit

175
00:08:03,560 --> 00:08:08,840
card or anything<font color="#E5E5E5"> else that might be</font>

176
00:08:05,830 --> 00:08:11,150
alphanumeric obviously cookie by itself

177
00:08:08,840 --> 00:08:14,750
is not<font color="#CCCCCC"> the issue here there is other</font>

178
00:08:11,150 --> 00:08:17,419
fields in HTTP such as the<font color="#E5E5E5"> user agent</font>

179
00:08:14,750 --> 00:08:19,970
the except in the<font color="#E5E5E5"> East non-match to name</font>

180
00:08:17,420 --> 00:08:22,169
a few that<font color="#E5E5E5"> we can play on these to</font>

181
00:08:19,970 --> 00:08:25,319
basically add our people

182
00:08:22,169 --> 00:08:27,539
<font color="#CCCCCC">turfing</font><font color="#E5E5E5"> to own website is the</font><font color="#CCCCCC"> result of</font>

183
00:08:25,319 --> 00:08:31,139
the company or in<font color="#CCCCCC"> a different segment</font>

184
00:08:27,539 --> 00:08:33,710
<font color="#CCCCCC">and by that we're passing the payload to</font>

185
00:08:31,139 --> 00:08:33,710
another server

186
00:08:37,610 --> 00:08:43,979
the next is a different example again

187
00:08:40,890 --> 00:08:46,649
different protocol what what we're doing

188
00:08:43,979 --> 00:08:49,860
right<font color="#CCCCCC"> here is basically leveraging</font>

189
00:08:46,649 --> 00:08:52,260
another built-in utility<font color="#CCCCCC"> telenet but in</font>

190
00:08:49,860 --> 00:08:54,300
a different way the<font color="#E5E5E5"> previous two</font>

191
00:08:52,260 --> 00:08:57,779
examples what we did was leveraging the

192
00:08:54,300 --> 00:09:00,839
HTTP to pass our payload now<font color="#E5E5E5"> actually</font>

193
00:08:57,779 --> 00:09:03,480
abusing a feature of<font color="#E5E5E5"> a protocol so pop</font>

194
00:09:00,839 --> 00:09:06,829
<font color="#E5E5E5">tree is a very simple protocol for</font>

195
00:09:03,480 --> 00:09:09,750
retrieving emails from from servers and

196
00:09:06,829 --> 00:09:12,089
what we're doing is leveraging the fact

197
00:09:09,750 --> 00:09:14,040
that a it's a text based protocol

198
00:09:12,089 --> 00:09:18,060
meaning that<font color="#E5E5E5"> we don't need to do any</font>

199
00:09:14,040 --> 00:09:23,969
binary encoding decoding and be a one of

200
00:09:18,060 --> 00:09:27,180
the person oh we can use the password

201
00:09:23,970 --> 00:09:30,329
<font color="#E5E5E5">field to basically push the payload in</font>

202
00:09:27,180 --> 00:09:33,449
it now who's to say<font color="#CCCCCC"> that my password can</font>

203
00:09:30,329 --> 00:09:35,550
be this string of the other again we're

204
00:09:33,450 --> 00:09:38,399
basically abusing the authentication

205
00:09:35,550 --> 00:09:41,609
mechanism of the protocol we're going<font color="#E5E5E5"> to</font>

206
00:09:38,399 --> 00:09:44,329
<font color="#E5E5E5">set up a pop3 machine in the cloud or</font>

207
00:09:41,610 --> 00:09:46,920
again another segment and we're going to

208
00:09:44,329 --> 00:09:48,839
connect to it or<font color="#CCCCCC"> it's just</font><font color="#E5E5E5"> attempt to</font>

209
00:09:46,920 --> 00:09:51,750
connect to it and during the

210
00:09:48,839 --> 00:09:55,640
authentication we're<font color="#E5E5E5"> going to pass the</font>

211
00:09:51,750 --> 00:09:55,640
payload as a password

212
00:09:57,720 --> 00:10:03,899
so quick recap of how it's working the

213
00:10:01,439 --> 00:10:07,410
<font color="#CCCCCC">telenet is a</font><font color="#E5E5E5"> built-in utility provided</font>

214
00:10:03,899 --> 00:10:09,149
in most<font color="#CCCCCC"> linux and even windows platforms</font>

215
00:10:07,410 --> 00:10:12,110
it<font color="#E5E5E5"> basically gives the ability to</font>

216
00:10:09,149 --> 00:10:14,819
connect to any host on any<font color="#CCCCCC"> tcp port</font>

217
00:10:12,110 --> 00:10:17,189
second of<font color="#E5E5E5"> all having a text based</font>

218
00:10:14,819 --> 00:10:19,829
protocol such as pop3 and the

219
00:10:17,189 --> 00:10:21,569
authentication is a process give us the

220
00:10:19,829 --> 00:10:24,930
ability to abuse the fact that we can

221
00:10:21,569 --> 00:10:27,420
write a<font color="#CCCCCC"> mini client in manually and at</font>

222
00:10:24,930 --> 00:10:31,529
the<font color="#CCCCCC"> same time abusing one of the phrases</font>

223
00:10:27,420 --> 00:10:35,219
to basically pass the payload in a way

224
00:10:31,529 --> 00:10:37,290
that won't be very easy to the defender

225
00:10:35,220 --> 00:10:40,550
<font color="#CCCCCC">to understand whether it's the real</font>

226
00:10:37,290 --> 00:10:42,930
content or not of course<font color="#E5E5E5"> it's not</font>

227
00:10:40,550 --> 00:10:47,689
<font color="#E5E5E5">specific to pop3 there's a bunch of</font>

228
00:10:42,930 --> 00:10:50,160
other protocols ftp can be one and

229
00:10:47,689 --> 00:10:53,099
<font color="#CCCCCC">executors ization can be another</font><font color="#E5E5E5"> one</font>

230
00:10:50,160 --> 00:10:55,819
that can<font color="#CCCCCC"> be abused to serve for the very</font>

231
00:10:53,100 --> 00:10:55,819
same purpose

232
00:11:02,730 --> 00:11:08,790
next we have a little<font color="#E5E5E5"> lower level</font>

233
00:11:06,819 --> 00:11:11,679
expectation again we're leveraging

234
00:11:08,790 --> 00:11:15,219
<font color="#CCCCCC">telenet here al and what we're basically</font>

235
00:11:11,679 --> 00:11:18,779
<font color="#E5E5E5">doing here is abusing not a protocol by</font>

236
00:11:15,220 --> 00:11:21,369
itself but<font color="#E5E5E5"> they could the TCP protocol</font>

237
00:11:18,779 --> 00:11:23,829
by the look of it it looks like<font color="#E5E5E5"> we're</font>

238
00:11:21,369 --> 00:11:25,629
doing<font color="#E5E5E5"> a bunch of connection attempts to</font>

239
00:11:23,829 --> 00:11:28,748
a computer<font color="#E5E5E5"> which doesn't actually</font>

240
00:11:25,629 --> 00:11:30,549
responds back and it may look like if

241
00:11:28,749 --> 00:11:32,379
there is an<font color="#E5E5E5"> error or</font><font color="#CCCCCC"> a problem</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> that</font>

242
00:11:30,549 --> 00:11:36,069
but actually<font color="#E5E5E5"> that's the whole point</font>

243
00:11:32,379 --> 00:11:40,119
we're<font color="#E5E5E5"> basically abusing the tcp port</font>

244
00:11:36,069 --> 00:11:42,519
parameter to try to split our asset to

245
00:11:40,119 --> 00:11:45,489
split<font color="#CCCCCC"> our credit cards into a group of</font>

246
00:11:42,519 --> 00:11:47,679
four digits and any attempt of this

247
00:11:45,489 --> 00:11:49,779
connection will receive on the other

248
00:11:47,679 --> 00:11:52,720
side obviously<font color="#CCCCCC"> there is no service</font>

249
00:11:49,779 --> 00:11:55,389
waiting<font color="#E5E5E5"> but the effect that</font><font color="#CCCCCC"> the scene</font>

250
00:11:52,720 --> 00:11:57,220
packet will travel all the way<font color="#CCCCCC"> to the</font>

251
00:11:55,389 --> 00:11:59,679
<font color="#CCCCCC">other side just to see if there's any</font>

252
00:11:57,220 --> 00:12:03,399
connection waiting will basically allow

253
00:11:59,679 --> 00:12:05,049
us the attacker to reassemble it back so

254
00:12:03,399 --> 00:12:07,299
it's a little bit more complicated on

255
00:12:05,049 --> 00:12:09,549
the receiver side to reassemble it

256
00:12:07,299 --> 00:12:11,319
requires a sniffer<font color="#E5E5E5"> and some very good</font>

257
00:12:09,549 --> 00:12:14,019
timing to understand which of the

258
00:12:11,319 --> 00:12:17,349
connections are actually coming<font color="#E5E5E5"> from our</font>

259
00:12:14,019 --> 00:12:20,739
<font color="#CCCCCC">reading</font><font color="#E5E5E5"> computer but the idea is that a</font>

260
00:12:17,350 --> 00:12:23,829
bunch of<font color="#CCCCCC"> telenet sequences can be then</font>

261
00:12:20,739 --> 00:12:26,049
used<font color="#E5E5E5"> to pass a payload and on the</font>

262
00:12:23,829 --> 00:12:28,029
network element is going to look<font color="#CCCCCC"> just as</font>

263
00:12:26,049 --> 00:12:30,730
an attempt to connect to a server<font color="#E5E5E5"> that</font>

264
00:12:28,029 --> 00:12:32,619
has my it has failed but on the overall

265
00:12:30,730 --> 00:12:38,069
picture it's passing the information

266
00:12:32,619 --> 00:12:38,069
using the destination port parameter

267
00:12:39,320 --> 00:12:44,660
so the<font color="#CCCCCC"> telenet again a built-in utility</font>

268
00:12:42,590 --> 00:12:46,700
that has been<font color="#E5E5E5"> provided within our</font>

269
00:12:44,660 --> 00:12:50,240
vanilla bun to deployment as well as

270
00:12:46,700 --> 00:12:53,240
other distribution the<font color="#CCCCCC"> TC destination</font>

271
00:12:50,240 --> 00:12:56,990
point which was a<font color="#CCCCCC"> parameter that's been</font>

272
00:12:53,240 --> 00:12:58,940
passed to the telnet application and by

273
00:12:56,990 --> 00:13:01,610
splitting the assets into group of four

274
00:12:58,940 --> 00:13:04,310
digits we're basically<font color="#E5E5E5"> ensuring us that</font>

275
00:13:01,610 --> 00:13:08,290
will always<font color="#CCCCCC"> be in range of what the</font>

276
00:13:04,310 --> 00:13:18,199
actual valid scale or range of the<font color="#CCCCCC"> tcp</font>

277
00:13:08,290 --> 00:13:21,650
destination port any quick questions on

278
00:13:18,200 --> 00:13:25,690
the<font color="#CCCCCC"> TCP HTTP methods</font><font color="#E5E5E5"> before moving on to</font>

279
00:13:21,650 --> 00:13:25,689
UDP yeah

280
00:13:31,370 --> 00:13:37,010
yes<font color="#CCCCCC"> of course of</font><font color="#E5E5E5"> course you can</font>

281
00:13:33,200 --> 00:13:41,390
monitoring these and the idea sorry well

282
00:13:37,010 --> 00:13:45,319
it depends on the HTTP one it would look

283
00:13:41,390 --> 00:13:47,779
like<font color="#E5E5E5"> you will see requests out going</font>

284
00:13:45,320 --> 00:13:50,720
into a server and the pale will be

285
00:13:47,779 --> 00:13:54,830
hearing the URL and over there in the

286
00:13:50,720 --> 00:13:57,290
cookie field on<font color="#CCCCCC"> the pop3 example you'll</font>

287
00:13:54,830 --> 00:13:59,480
see an attempt of an email client of

288
00:13:57,290 --> 00:14:03,410
sorts to authenticate but it will

289
00:13:59,480 --> 00:14:05,600
constantly fail and on the leather it

290
00:14:03,410 --> 00:14:08,000
will be a bunch of<font color="#CCCCCC"> scene packets being</font>

291
00:14:05,600 --> 00:14:11,330
sent to a server<font color="#E5E5E5"> or servers depends on</font>

292
00:14:08,000 --> 00:14:14,029
how<font color="#E5E5E5"> you set up</font><font color="#CCCCCC"> the receiving end and the</font>

293
00:14:11,330 --> 00:14:16,310
port will actually be the payload itself

294
00:14:14,029 --> 00:14:19,070
but it's<font color="#CCCCCC"> always going to be very it's</font>

295
00:14:16,310 --> 00:14:20,660
<font color="#E5E5E5">all going to be able to monitor the</font>

296
00:14:19,070 --> 00:14:24,700
network gay days whether you'll be<font color="#CCCCCC"> able</font>

297
00:14:20,660 --> 00:14:24,699
<font color="#CCCCCC">to pick it up and understand that</font>

298
00:14:27,550 --> 00:14:32,180
depending on the vendor product

299
00:14:29,630 --> 00:14:34,210
configuration some will some some will

300
00:14:32,180 --> 00:14:34,209
not

301
00:14:35,779 --> 00:14:49,850
okay let's move on to UDP so one of<font color="#E5E5E5"> the</font>

302
00:14:45,499 --> 00:14:52,819
major uses of UDP in a regular or more

303
00:14:49,850 --> 00:14:56,660
normal traffic patterns is basically DMS

304
00:14:52,819 --> 00:14:59,059
and<font color="#E5E5E5"> nslookup is a free utility again</font>

305
00:14:56,660 --> 00:15:00,649
bundled with our<font color="#E5E5E5"> boon to and can be</font>

306
00:14:59,059 --> 00:15:03,139
found a different<font color="#E5E5E5"> a bunch of other</font>

307
00:15:00,649 --> 00:15:05,329
different variety of platforms and

308
00:15:03,139 --> 00:15:08,689
basically one<font color="#CCCCCC"> of the easiest</font><font color="#E5E5E5"> thing that</font>

309
00:15:05,329 --> 00:15:11,930
we can do is to go ahead and<font color="#E5E5E5"> and use the</font>

310
00:15:08,689 --> 00:15:17,180
query use the domain itself as the

311
00:15:11,930 --> 00:15:19,910
payload and by the<font color="#CCCCCC"> dns the</font><font color="#E5E5E5"> guinness</font>

312
00:15:17,180 --> 00:15:22,758
client to address our own<font color="#E5E5E5"> dns server</font>

313
00:15:19,910 --> 00:15:24,920
will guarantee to actually receive the

314
00:15:22,759 --> 00:15:26,899
payload on the other side so the

315
00:15:24,920 --> 00:15:30,349
scenario here is that we use the

316
00:15:26,899 --> 00:15:32,839
attackers<font color="#CCCCCC"> will set</font><font color="#E5E5E5"> up some dns server</font>

317
00:15:30,350 --> 00:15:36,559
again can be<font color="#E5E5E5"> in a different network</font>

318
00:15:32,839 --> 00:15:39,829
segment or completely in<font color="#E5E5E5"> the cloud we</font>

319
00:15:36,559 --> 00:15:42,829
will<font color="#CCCCCC"> then from our own machine or red</font>

320
00:15:39,829 --> 00:15:44,839
<font color="#CCCCCC">machine will try to go ahead and look up</font>

321
00:15:42,829 --> 00:15:46,430
different domains in each of these

322
00:15:44,839 --> 00:15:48,379
domain will basically include the

323
00:15:46,430 --> 00:15:50,508
payload and by controlling the

324
00:15:48,379 --> 00:15:53,990
<font color="#E5E5E5">destination of the server it will</font>

325
00:15:50,509 --> 00:15:57,199
actually<font color="#CCCCCC"> arrive to our own server again</font>

326
00:15:53,990 --> 00:16:01,579
it's simple<font color="#E5E5E5"> its straightforward but</font>

327
00:15:57,199 --> 00:16:04,729
<font color="#E5E5E5">again works like a charm</font><font color="#CCCCCC"> i'm more</font>

328
00:16:01,579 --> 00:16:10,219
complicated or a more built up version

329
00:16:04,730 --> 00:16:13,730
of this is the real owning a real domain

330
00:16:10,220 --> 00:16:17,480
using the<font color="#CCCCCC"> sub domain option and using</font>

331
00:16:13,730 --> 00:16:19,879
the name server<font color="#E5E5E5"> i'll explain when Victor</font>

332
00:16:17,480 --> 00:16:22,459
domain when you buy a domain you get to

333
00:16:19,879 --> 00:16:25,610
decide<font color="#E5E5E5"> what's the name server what's the</font>

334
00:16:22,459 --> 00:16:27,349
<font color="#E5E5E5">DNS server that will basically serve is</font>

335
00:16:25,610 --> 00:16:30,199
the<font color="#E5E5E5"> authoritative answer for that</font>

336
00:16:27,350 --> 00:16:32,929
specific domain so you can go ahead and

337
00:16:30,199 --> 00:16:35,359
decide<font color="#CCCCCC"> usually most</font><font color="#E5E5E5"> of the companies</font>

338
00:16:32,929 --> 00:16:37,970
<font color="#E5E5E5">that sell these domains also provide</font>

339
00:16:35,360 --> 00:16:40,339
some sort<font color="#E5E5E5"> of our DNS services to</font>

340
00:16:37,970 --> 00:16:43,040
complement death but<font color="#E5E5E5"> you can go ahead</font>

341
00:16:40,339 --> 00:16:45,850
and then decide that you want to<font color="#E5E5E5"> host or</font>

342
00:16:43,040 --> 00:16:49,579
beat the domain server for your domain

343
00:16:45,850 --> 00:16:53,780
meaning<font color="#CCCCCC"> that even without control</font>

344
00:16:49,580 --> 00:16:57,020
the dns server at the time using any DNS

345
00:16:53,780 --> 00:16:59,959
server eventually it will populate all

346
00:16:57,020 --> 00:17:02,270
the way to your<font color="#CCCCCC"> DNS server because you</font>

347
00:16:59,960 --> 00:17:04,819
then again acting as the name server for

348
00:17:02,270 --> 00:17:07,700
that doom so for<font color="#CCCCCC"> instance I own the</font>

349
00:17:04,819 --> 00:17:10,639
domain<font color="#E5E5E5"> safe</font><font color="#CCCCCC"> breach calm and what I'm</font>

350
00:17:07,700 --> 00:17:14,600
actually doing here is um it looks like

351
00:17:10,640 --> 00:17:17,959
I'm querying a subdomain of the payload

352
00:17:14,599 --> 00:17:20,689
save<font color="#E5E5E5"> bridge calm because I am</font><font color="#CCCCCC"> the name</font>

353
00:17:17,959 --> 00:17:24,380
server of celbridge<font color="#CCCCCC"> calm basically what</font>

354
00:17:20,690 --> 00:17:26,990
happens is that that death query will

355
00:17:24,380 --> 00:17:29,600
travel using the default<font color="#E5E5E5"> Guinness server</font>

356
00:17:26,990 --> 00:17:33,020
on that computer it can<font color="#CCCCCC"> be that specific</font>

357
00:17:29,600 --> 00:17:35,360
computer or that company<font color="#CCCCCC"> for but</font>

358
00:17:33,020 --> 00:17:37,550
eventually because none of these will

359
00:17:35,360 --> 00:17:40,399
have the answer it will populate to my

360
00:17:37,550 --> 00:17:43,129
dns server and then I'll get the query

361
00:17:40,400 --> 00:17:46,690
and<font color="#E5E5E5"> I can log it so it's a bit more</font>

362
00:17:43,130 --> 00:17:52,970
complicated it costs<font color="#E5E5E5"> money obviously</font>

363
00:17:46,690 --> 00:17:55,580
it's<font color="#CCCCCC"> hard to people and it's very with</font>

364
00:17:52,970 --> 00:17:58,550
working very chaining and smoothing

365
00:17:55,580 --> 00:17:59,990
operation meaning that<font color="#E5E5E5"> even the number</font>

366
00:17:58,550 --> 00:18:02,090
of DNS servers<font color="#CCCCCC"> chained together</font>

367
00:17:59,990 --> 00:18:06,470
different another different levels all

368
00:18:02,090 --> 00:18:09,909
eventually<font color="#E5E5E5"> will get up to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> name</font>

369
00:18:06,470 --> 00:18:09,910
server domain

370
00:18:13,390 --> 00:18:20,480
there are other UDP applications that I

371
00:18:16,610 --> 00:18:22,219
want two examples but feel free I didn't

372
00:18:20,480 --> 00:18:24,920
explore them that you can use these

373
00:18:22,220 --> 00:18:27,740
again as a regular traffic coming out of

374
00:18:24,920 --> 00:18:31,250
the machine as a built-in utilities that

375
00:18:27,740 --> 00:18:34,130
you have on our vanilla<font color="#CCCCCC"> bhuntu machine</font>

376
00:18:31,250 --> 00:18:37,510
and basically creating the server side

377
00:18:34,130 --> 00:18:40,550
<font color="#E5E5E5">or faking a server side and using these</font>

378
00:18:37,510 --> 00:18:46,240
applications to go ahead<font color="#E5E5E5"> and exit rate</font>

379
00:18:40,550 --> 00:18:46,240
an asset from our own computer

380
00:18:48,240 --> 00:18:55,350
<font color="#E5E5E5">okay any questions on the UDP methods</font>

381
00:18:59,049 --> 00:19:10,129
okay so um we're now moving on<font color="#E5E5E5"> to</font>

382
00:19:04,580 --> 00:19:12,649
another protocol icmp and ICMP is very

383
00:19:10,130 --> 00:19:15,649
famous for the ping utility which people

384
00:19:12,649 --> 00:19:17,330
are you today to troubleshoot different

385
00:19:15,649 --> 00:19:21,168
network utility and different network

386
00:19:17,330 --> 00:19:23,840
problems and basically one of<font color="#E5E5E5"> maybe the</font>

387
00:19:21,169 --> 00:19:27,500
hidden features that thing includes is

388
00:19:23,840 --> 00:19:29,240
oh I have a paper here<font color="#E5E5E5"> now w get one of</font>

389
00:19:27,500 --> 00:19:32,389
the things that ping includes is big

390
00:19:29,240 --> 00:19:35,149
bility<font color="#E5E5E5"> to embedded a pattern within the</font>

391
00:19:32,389 --> 00:19:37,070
packet so usually<font color="#CCCCCC"> when</font><font color="#E5E5E5"> somebody thinks</font>

392
00:19:35,149 --> 00:19:39,678
the computer a payload is being passed

393
00:19:37,070 --> 00:19:42,080
but it's<font color="#CCCCCC"> usually the random or time</font>

394
00:19:39,679 --> 00:19:47,330
stamps but the<font color="#E5E5E5"> thing utility actually</font>

395
00:19:42,080 --> 00:19:51,500
allowing us to sorry to combine up to 16

396
00:19:47,330 --> 00:19:55,129
different bytes in each transaction so

397
00:19:51,500 --> 00:19:57,260
again we can set<font color="#CCCCCC"> up a server outside of</font>

398
00:19:55,130 --> 00:20:01,190
the network or outside<font color="#E5E5E5"> of the company</font>

399
00:19:57,260 --> 00:20:05,539
and creating a<font color="#E5E5E5"> series of pings where</font>

400
00:20:01,190 --> 00:20:09,320
each packet can contain a number a

401
00:20:05,539 --> 00:20:11,299
single bite from our assets or it can

402
00:20:09,320 --> 00:20:14,418
contain depending on the size<font color="#E5E5E5"> of the</font>

403
00:20:11,299 --> 00:20:17,690
complexity the entire assets itself in

404
00:20:14,419 --> 00:20:20,630
this example one request one big request

405
00:20:17,690 --> 00:20:26,139
was sufficient for<font color="#CCCCCC"> us to pass the entire</font>

406
00:20:20,630 --> 00:20:26,139
credit card<font color="#CCCCCC"> throw</font><font color="#E5E5E5"> in in one pink</font>

407
00:20:33,110 --> 00:20:41,280
okay up until<font color="#CCCCCC"> now we've</font><font color="#E5E5E5"> discussed a Kate</font>

408
00:20:37,170 --> 00:20:44,040
where our asset was a credit card<font color="#CCCCCC"> um and</font>

409
00:20:41,280 --> 00:20:47,070
<font color="#CCCCCC">that was easy because it</font><font color="#E5E5E5"> gave us to</font>

410
00:20:44,040 --> 00:20:49,909
benefit by being an alphanumeric string

411
00:20:47,070 --> 00:20:52,800
it was<font color="#E5E5E5"> very easy for us to fit it into</font>

412
00:20:49,910 --> 00:20:55,830
existing utilities we didn't<font color="#E5E5E5"> need any</font>

413
00:20:52,800 --> 00:20:57,990
need for encoding obviously sometimes

414
00:20:55,830 --> 00:21:00,990
for<font color="#CCCCCC"> the red team engagement the reading</font>

415
00:20:57,990 --> 00:21:03,930
simulation will be task or try to do

416
00:21:00,990 --> 00:21:07,170
something that<font color="#E5E5E5"> will require a bite l</font>

417
00:21:03,930 --> 00:21:09,060
like PDF and for<font color="#CCCCCC"> that we'll need a way</font>

418
00:21:07,170 --> 00:21:12,710
<font color="#CCCCCC">to encode it because not all the</font>

419
00:21:09,060 --> 00:21:15,840
protocols will be able<font color="#E5E5E5"> to pass it as is</font>

420
00:21:12,710 --> 00:21:18,840
another element was that our credit card

421
00:21:15,840 --> 00:21:21,659
was relatively short string again making

422
00:21:18,840 --> 00:21:23,790
this very easy for<font color="#E5E5E5"> us but in reality we</font>

423
00:21:21,660 --> 00:21:26,160
may face that our assets that have been

424
00:21:23,790 --> 00:21:29,580
trying<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> next rated are basically</font>

425
00:21:26,160 --> 00:21:33,780
large and for that we'll need to split

426
00:21:29,580 --> 00:21:36,830
it um so we're going to change a little

427
00:21:33,780 --> 00:21:40,710
bit the initial rules of engagement from

428
00:21:36,830 --> 00:21:42,449
I'd be able<font color="#E5E5E5"> to incorporate a</font><font color="#CCCCCC"> 20 do have</font>

429
00:21:40,710 --> 00:21:45,300
a<font color="#E5E5E5"> Python and there</font><font color="#CCCCCC"> it's Python in stone</font>

430
00:21:42,450 --> 00:21:48,120
or Ubuntu so it letters are no are no

431
00:21:45,300 --> 00:21:50,070
<font color="#E5E5E5">installation policy so we have Python</font>

432
00:21:48,120 --> 00:21:52,199
the system is still read only meaning

433
00:21:50,070 --> 00:21:55,530
that we can still not write files or

434
00:21:52,200 --> 00:21:58,490
save scripts let's see how far we can go

435
00:21:55,530 --> 00:22:00,990
with both encoding and splitting on

436
00:21:58,490 --> 00:22:07,490
using Python without writing any

437
00:22:00,990 --> 00:22:10,680
complicated<font color="#E5E5E5"> scripts on the way so um</font>

438
00:22:07,490 --> 00:22:14,040
what you see here is three different

439
00:22:10,680 --> 00:22:16,860
separates one liners will go to the

440
00:22:14,040 --> 00:22:19,350
first one the first one assumes that our

441
00:22:16,860 --> 00:22:21,510
asset called sick with dot PDF meaning

442
00:22:19,350 --> 00:22:24,439
it's just the file obviously<font color="#E5E5E5"> doesn't</font>

443
00:22:21,510 --> 00:22:27,960
have to be a PDF per se can be a movie

444
00:22:24,440 --> 00:22:29,820
anything of a<font color="#CCCCCC"> question and what Python</font>

445
00:22:27,960 --> 00:22:33,210
will do in this one liner is going to

446
00:22:29,820 --> 00:22:36,149
basically<font color="#E5E5E5"> read the entire file and coded</font>

447
00:22:33,210 --> 00:22:39,470
as an extra decimal string basically

448
00:22:36,150 --> 00:22:42,690
means<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> output will be completely</font>

449
00:22:39,470 --> 00:22:45,690
alphanumeric and then we can<font color="#E5E5E5"> go</font><font color="#CCCCCC"> ahead</font><font color="#E5E5E5"> in</font>

450
00:22:42,690 --> 00:22:49,380
<font color="#CCCCCC">better this or use these for the HTTP</font>

451
00:22:45,690 --> 00:22:52,170
example that we started with<font color="#E5E5E5"> DNS example</font>

452
00:22:49,380 --> 00:22:54,690
that we've seen<font color="#E5E5E5"> in UDP and even for the</font>

453
00:22:52,170 --> 00:22:59,460
icing the example that we<font color="#E5E5E5"> had up until</font>

454
00:22:54,690 --> 00:23:02,190
this<font color="#CCCCCC"> moment the second</font><font color="#E5E5E5"> example uses</font>

455
00:22:59,460 --> 00:23:05,340
base64 encoding again it assumed<font color="#E5E5E5"> there's</font>

456
00:23:02,190 --> 00:23:07,230
<font color="#E5E5E5">a file called secret dot PDF and what it</font>

457
00:23:05,340 --> 00:23:11,550
will do is<font color="#E5E5E5"> it will read the content and</font>

458
00:23:07,230 --> 00:23:14,190
encoding base64 in a short Bay 64 is an

459
00:23:11,550 --> 00:23:16,760
algorithm<font color="#CCCCCC"> that ensures that is created</font>

460
00:23:14,190 --> 00:23:19,380
<font color="#CCCCCC">to ensure</font><font color="#E5E5E5"> that the</font><font color="#CCCCCC"> output will be</font>

461
00:23:16,760 --> 00:23:22,230
alphanumeric string friendly so this is

462
00:23:19,380 --> 00:23:25,020
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> the way email attachments and</font>

463
00:23:22,230 --> 00:23:28,110
sylar being passed over text protocols

464
00:23:25,020 --> 00:23:30,930
so we're using this very own algorithm

465
00:23:28,110 --> 00:23:33,810
that works for legitimate uses for all

466
00:23:30,930 --> 00:23:36,540
news<font color="#CCCCCC"> to encode our binary assets and</font>

467
00:23:33,810 --> 00:23:40,919
making sure it's<font color="#E5E5E5"> going to be text</font>

468
00:23:36,540 --> 00:23:45,600
friendly and the third is an advancement

469
00:23:40,920 --> 00:23:47,880
on the on the base 64 so it's important

470
00:23:45,600 --> 00:23:49,709
to understand that<font color="#E5E5E5"> while we some of the</font>

471
00:23:47,880 --> 00:23:52,170
questions here were pointing toward

472
00:23:49,710 --> 00:23:56,040
products that may be able<font color="#E5E5E5"> to encounter</font>

473
00:23:52,170 --> 00:23:58,980
or detect these techniques both the X

474
00:23:56,040 --> 00:24:01,320
encoding and the base64 are reversible

475
00:23:58,980 --> 00:24:03,900
meaning<font color="#CCCCCC"> that it's very</font><font color="#E5E5E5"> easy for a</font>

476
00:24:01,320 --> 00:24:06,750
technology for a product to try to

477
00:24:03,900 --> 00:24:09,630
decode it and see if it's indeed an

478
00:24:06,750 --> 00:24:12,780
asset that shouldn't be passing along so

479
00:24:09,630 --> 00:24:15,600
one way again a built-in<font color="#E5E5E5"> weight you can</font>

480
00:24:12,780 --> 00:24:18,810
<font color="#E5E5E5">t try to encounter it is applying a very</font>

481
00:24:15,600 --> 00:24:20,699
simple I would typically encryption but

482
00:24:18,810 --> 00:24:23,940
a very simple cipher algorithm called

483
00:24:20,700 --> 00:24:27,450
<font color="#E5E5E5">what 13 which basically plays with the</font>

484
00:24:23,940 --> 00:24:29,460
letter<font color="#E5E5E5"> R in a manner that actually them</font>

485
00:24:27,450 --> 00:24:32,160
in a manner that won't make it very

486
00:24:29,460 --> 00:24:34,890
trivial for the<font color="#E5E5E5"> product to decode them</font>

487
00:24:32,160 --> 00:24:37,170
it will if the product<font color="#E5E5E5"> or specific</font>

488
00:24:34,890 --> 00:24:40,080
knowledge will point them to try to

489
00:24:37,170 --> 00:24:42,990
decode the road 13 but<font color="#E5E5E5"> again it won't</font>

490
00:24:40,080 --> 00:24:46,590
open on the regular basics t4 and it

491
00:24:42,990 --> 00:24:49,230
won't as a regular X decoding it will

492
00:24:46,590 --> 00:24:51,600
require another step and again it can

493
00:24:49,230 --> 00:24:53,550
allow us or challenge or start<font color="#CCCCCC"> allow us</font>

494
00:24:51,600 --> 00:24:56,449
to challenge<font color="#E5E5E5"> these different security</font>

495
00:24:53,550 --> 00:25:04,129
controllers in our quest

496
00:24:56,450 --> 00:25:07,220
exit rate our asset splitting so as I

497
00:25:04,130 --> 00:25:09,920
mentioned arm there's different types of

498
00:25:07,220 --> 00:25:12,500
payloads and they can<font color="#CCCCCC"> be large they can</font>

499
00:25:09,920 --> 00:25:14,510
be small if they're<font color="#E5E5E5"> small good then they</font>

500
00:25:12,500 --> 00:25:16,490
can fit<font color="#CCCCCC"> in different categories but</font>

501
00:25:14,510 --> 00:25:19,129
<font color="#E5E5E5">they're too large we're going to need</font><font color="#CCCCCC"> to</font>

502
00:25:16,490 --> 00:25:21,650
go<font color="#CCCCCC"> ahead</font><font color="#E5E5E5"> and split them into chunks and</font>

503
00:25:19,130 --> 00:25:24,500
these chunks we can operate<font color="#E5E5E5"> on them pass</font>

504
00:25:21,650 --> 00:25:27,110
them and reassemble them at their server

505
00:25:24,500 --> 00:25:31,190
side once all<font color="#E5E5E5"> the payload reach our</font>

506
00:25:27,110 --> 00:25:34,790
server again we have three<font color="#E5E5E5"> different</font>

507
00:25:31,190 --> 00:25:38,360
one-liner scripts the first arm is

508
00:25:34,790 --> 00:25:40,730
basically just set up the stage we're

509
00:25:38,360 --> 00:25:42,620
going<font color="#E5E5E5"> to use an X encoded payload so</font>

510
00:25:40,730 --> 00:25:45,340
again we're assuming that we have<font color="#E5E5E5"> an</font>

511
00:25:42,620 --> 00:25:47,959
asset that asset called Sigma dot PDF

512
00:25:45,340 --> 00:25:50,929
we're<font color="#E5E5E5"> going to open it read it all</font>

513
00:25:47,960 --> 00:25:53,360
content and cold it as an exodus<font color="#CCCCCC"> Mouse</font>

514
00:25:50,930 --> 00:25:56,240
ring the next thing that we're going<font color="#CCCCCC"> to</font>

515
00:25:53,360 --> 00:25:58,639
do is we're going to<font color="#E5E5E5"> split it and we're</font>

516
00:25:56,240 --> 00:26:01,880
going to<font color="#E5E5E5"> split to 16 bits which is a</font>

517
00:25:58,640 --> 00:26:05,090
relatively a very small chunk that

518
00:26:01,880 --> 00:26:08,930
should fit into anything between the<font color="#E5E5E5"> DNS</font>

519
00:26:05,090 --> 00:26:11,870
query into a pink payload and we're

520
00:26:08,930 --> 00:26:14,690
doing it basically by using a regular

521
00:26:11,870 --> 00:26:18,590
expression<font color="#CCCCCC"> a very simple one the taps</font>

522
00:26:14,690 --> 00:26:22,910
into a pair of each of the characters so

523
00:26:18,590 --> 00:26:27,230
if you can<font color="#CCCCCC"> imagine a leather like a will</font>

524
00:26:22,910 --> 00:26:29,230
be translated into<font color="#E5E5E5"> a 0 x 41 this regular</font>

525
00:26:27,230 --> 00:26:33,620
expression will then go ahead and

526
00:26:29,230 --> 00:26:37,310
capture<font color="#CCCCCC"> our each of these sequence of</font>

527
00:26:33,620 --> 00:26:40,459
pairs of letters and will giving us an

528
00:26:37,310 --> 00:26:43,700
array a list of those so we can<font color="#E5E5E5"> go ahead</font>

529
00:26:40,460 --> 00:26:45,430
and create action or save it and<font color="#CCCCCC"> then</font>

530
00:26:43,700 --> 00:26:48,560
create action for each of these

531
00:26:45,430 --> 00:26:51,350
individual payloads or not way to exit

532
00:26:48,560 --> 00:26:54,200
rating a much bigger assets obviously

533
00:26:51,350 --> 00:26:57,560
this can be changed<font color="#CCCCCC"> to create a</font>

534
00:26:54,200 --> 00:27:01,460
different different map 16 bits can be

535
00:26:57,560 --> 00:27:04,970
32 if we add two more dots 64 if<font color="#CCCCCC"> you add</font>

536
00:27:01,460 --> 00:27:08,060
more<font color="#CCCCCC"> and etc etc it was important to</font>

537
00:27:04,970 --> 00:27:10,370
understand that<font color="#E5E5E5"> these are the resolution</font>

538
00:27:08,060 --> 00:27:12,740
of going by bits and bytes here

539
00:27:10,370 --> 00:27:15,709
actually helps in creating these to be a

540
00:27:12,740 --> 00:27:18,080
generic way of splitting obviously if

541
00:27:15,710 --> 00:27:20,240
there is a specific<font color="#E5E5E5"> payload</font><font color="#CCCCCC"> that has</font>

542
00:27:18,080 --> 00:27:23,570
<font color="#CCCCCC">path brands or something that makes more</font>

543
00:27:20,240 --> 00:27:25,850
<font color="#CCCCCC">sense to split by it can</font><font color="#E5E5E5"> be a space a</font>

544
00:27:23,570 --> 00:27:28,429
semicolon anything that makes sense it

545
00:27:25,850 --> 00:27:31,100
can<font color="#E5E5E5"> also be used here to create a</font>

546
00:27:28,430 --> 00:27:33,950
different chunks but<font color="#E5E5E5"> obviously anything</font>

547
00:27:31,100 --> 00:27:36,500
can be divided by bits so this gives us

548
00:27:33,950 --> 00:27:40,550
an overview function to how to taken any

549
00:27:36,500 --> 00:27:43,550
assets and divide it and to emphasis the

550
00:27:40,550 --> 00:27:46,070
point of the delimiter again what we can

551
00:27:43,550 --> 00:27:48,740
see here that we<font color="#CCCCCC"> can take</font><font color="#E5E5E5"> our payload is</font>

552
00:27:46,070 --> 00:27:52,189
splitted by specific characters here I

553
00:27:48,740 --> 00:27:54,170
choose an abertura path man FF but<font color="#E5E5E5"> again</font>

554
00:27:52,190 --> 00:27:58,040
it can be any type of character<font color="#E5E5E5"> and type</font>

555
00:27:54,170 --> 00:27:59,480
of pill that makes sense and a split

556
00:27:58,040 --> 00:28:01,730
will give us a list of the different

557
00:27:59,480 --> 00:28:03,980
chunks and then we can<font color="#E5E5E5"> go ahead and</font>

558
00:28:01,730 --> 00:28:08,620
operate on these chunks individually and

559
00:28:03,980 --> 00:28:08,620
reassemble them back on the server side

560
00:28:10,210 --> 00:28:16,130
if you combine the example that<font color="#E5E5E5"> we saw</font>

561
00:28:14,000 --> 00:28:18,740
<font color="#CCCCCC">in the beginning</font><font color="#E5E5E5"> beam coding example and</font>

562
00:28:16,130 --> 00:28:21,740
the splitting we can<font color="#E5E5E5"> create a very</font>

563
00:28:18,740 --> 00:28:24,610
interesting play and what we're<font color="#CCCCCC"> seeing</font>

564
00:28:21,740 --> 00:28:28,130
here is again it's a very short script

565
00:28:24,610 --> 00:28:31,219
that basically takes an asset a payload

566
00:28:28,130 --> 00:28:35,210
and translating into a series of

567
00:28:31,220 --> 00:28:36,980
directories on an ftp server it's very

568
00:28:35,210 --> 00:28:40,190
trivial if you're looking for ways to

569
00:28:36,980 --> 00:28:42,350
<font color="#E5E5E5">exit information to use an ftp to upload</font>

570
00:28:40,190 --> 00:28:45,620
an<font color="#CCCCCC"> assets that's obviously the function</font>

571
00:28:42,350 --> 00:28:48,830
of the FTP<font color="#E5E5E5"> protocol however what</font><font color="#CCCCCC"> we can</font>

572
00:28:45,620 --> 00:28:51,620
do is basically create directories and

573
00:28:48,830 --> 00:28:54,020
these directories can then be a payload

574
00:28:51,620 --> 00:28:56,840
and the other side can then go ahead and

575
00:28:54,020 --> 00:29:00,650
<font color="#E5E5E5">reassemble all the directory names back</font>

576
00:28:56,840 --> 00:29:02,750
into a file so let the script and see

577
00:29:00,650 --> 00:29:05,750
what it does it assumes there's a

578
00:29:02,750 --> 00:29:08,809
specific ftp server again will be as<font color="#CCCCCC"> the</font>

579
00:29:05,750 --> 00:29:12,820
server side simulating that ftp server

580
00:29:08,809 --> 00:29:16,190
it then go ahead<font color="#E5E5E5"> and connect into these</font>

581
00:29:12,820 --> 00:29:19,310
into this ftp server next thing it will

582
00:29:16,190 --> 00:29:22,220
<font color="#CCCCCC">open the assets the secret dot PDF it</font>

583
00:29:19,310 --> 00:29:23,928
will read the entire content encoded as

584
00:29:22,220 --> 00:29:27,009
an EXA

585
00:29:23,929 --> 00:29:30,919
then what it will do is for a series of

586
00:29:27,009 --> 00:29:34,009
eight characters it will go ahead and

587
00:29:30,919 --> 00:29:36,710
capture these sequences and create a

588
00:29:34,009 --> 00:29:39,820
directory with a counter starting from

589
00:29:36,710 --> 00:29:43,789
zero so basically<font color="#E5E5E5"> imagine it will say</font>

590
00:29:39,820 --> 00:29:46,700
zero underscore and eight bytes and then

591
00:29:43,789 --> 00:29:50,259
we'll say one underscore another eight

592
00:29:46,700 --> 00:29:53,059
bytes of the asset it will go again

593
00:29:50,259 --> 00:29:55,369
depends on the the size of the assets

594
00:29:53,059 --> 00:29:57,440
divided by eight it can go in till it

595
00:29:55,369 --> 00:30:00,230
will finish and then the interesting

596
00:29:57,440 --> 00:30:02,690
stuff is then on the attacker side on

597
00:30:00,230 --> 00:30:05,570
the server<font color="#CCCCCC"> side we will can go ahead and</font>

598
00:30:02,690 --> 00:30:07,970
connect the very same ftp server list

599
00:30:05,570 --> 00:30:11,210
directories and by the<font color="#E5E5E5"> order</font><font color="#CCCCCC"> of the</font>

600
00:30:07,970 --> 00:30:13,730
counter from<font color="#E5E5E5"> zero till depending again</font>

601
00:30:11,210 --> 00:30:15,940
on the size will then able to see all

602
00:30:13,730 --> 00:30:18,860
the chunks all the sequence and

603
00:30:15,940 --> 00:30:21,649
combining them together<font color="#CCCCCC"> Caen cutting</font>

604
00:30:18,860 --> 00:30:24,619
them into one string and decode that

605
00:30:21,649 --> 00:30:27,168
string from<font color="#E5E5E5"> exo decimal will basically</font>

606
00:30:24,619 --> 00:30:32,869
give us that file in the binary form on

607
00:30:27,169 --> 00:30:37,029
our<font color="#E5E5E5"> side before moving on any questions</font>

608
00:30:32,869 --> 00:30:37,029
about these techniques or this example

609
00:30:40,340 --> 00:30:51,209
<font color="#E5E5E5">okay so in the up until now we've</font>

610
00:30:47,940 --> 00:30:53,100
<font color="#E5E5E5">discussed our expectation in</font><font color="#CCCCCC"> the</font>

611
00:30:51,210 --> 00:30:56,159
millions of a network we've leveraged

612
00:30:53,100 --> 00:30:58,230
different utilities deployed on our a

613
00:30:56,159 --> 00:31:00,929
<font color="#CCCCCC">bunting machine to go ahead</font><font color="#E5E5E5"> and try to</font>

614
00:30:58,230 --> 00:31:02,480
connect to a server or number of

615
00:31:00,929 --> 00:31:05,850
services depending on the configuration

616
00:31:02,480 --> 00:31:08,159
to pass them but excitation is not

617
00:31:05,850 --> 00:31:10,080
limited to network it can<font color="#E5E5E5"> also be a</font>

618
00:31:08,159 --> 00:31:13,049
<font color="#E5E5E5">physical issue and so we can go ahead</font>

619
00:31:10,080 --> 00:31:17,610
<font color="#CCCCCC">and explore a one interesting</font><font color="#E5E5E5"> Avenue to</font>

620
00:31:13,049 --> 00:31:19,500
do it again we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> change the rules</font>

621
00:31:17,610 --> 00:31:22,469
a little<font color="#E5E5E5"> bit here in order to</font>

622
00:31:19,500 --> 00:31:24,059
<font color="#E5E5E5">accommodate this example so first we</font>

623
00:31:22,470 --> 00:31:26,220
have to understand<font color="#E5E5E5"> that there are</font>

624
00:31:24,059 --> 00:31:29,519
obvious ways to take information from a

625
00:31:26,220 --> 00:31:32,220
computer and obviously using media's

626
00:31:29,519 --> 00:31:34,830
like City Rome or connecting a USB or

627
00:31:32,220 --> 00:31:36,929
thumb drive are all very normal ways to

628
00:31:34,830 --> 00:31:39,240
do it but<font color="#CCCCCC"> in the head it's also very</font>

629
00:31:36,929 --> 00:31:42,330
easy normal ways to prevent from doing

630
00:31:39,240 --> 00:31:45,029
so so getting these of the table we need

631
00:31:42,330 --> 00:31:47,370
to be creative here the second thing is

632
00:31:45,029 --> 00:31:49,919
that we'll need to actually use a<font color="#CCCCCC"> Python</font>

633
00:31:47,370 --> 00:31:52,620
script<font color="#E5E5E5"> it's a little bit bigger program</font>

634
00:31:49,919 --> 00:31:55,769
this time so we're going to bend over

635
00:31:52,620 --> 00:31:57,719
and basically remove the read-only file

636
00:31:55,769 --> 00:32:00,029
system again we're still having an

637
00:31:57,720 --> 00:32:02,970
ubuntu it's still having a built in

638
00:32:00,029 --> 00:32:04,860
<font color="#CCCCCC">Python interpreter in it just this</font><font color="#E5E5E5"> time</font>

639
00:32:02,970 --> 00:32:09,600
we'll need to go ahead and download<font color="#E5E5E5"> the</font>

640
00:32:04,860 --> 00:32:12,479
script so obvious in the presentation

641
00:32:09,600 --> 00:32:15,299
you<font color="#CCCCCC"> can go clone this get directory</font>

642
00:32:12,480 --> 00:32:19,010
download it I'll demo disc after you

643
00:32:15,299 --> 00:32:23,100
right now but the idea is<font color="#E5E5E5"> as follows</font>

644
00:32:19,010 --> 00:32:27,419
obviously we can modulate every single

645
00:32:23,100 --> 00:32:31,199
beat every single data into sound into a

646
00:32:27,419 --> 00:32:34,080
signal and then we can<font color="#CCCCCC"> use our sounds</font>

647
00:32:31,200 --> 00:32:35,940
our microphone output or speaker output

648
00:32:34,080 --> 00:32:39,360
to basically capture that information

649
00:32:35,940 --> 00:32:41,100
and once<font color="#E5E5E5"> we capture the information we</font>

650
00:32:39,360 --> 00:32:44,760
can then<font color="#CCCCCC"> go ahead and replay it in a</font>

651
00:32:41,100 --> 00:32:48,408
different computer record it and reverse

652
00:32:44,760 --> 00:32:52,649
<font color="#CCCCCC">the process into basically meets again</font>

653
00:32:48,409 --> 00:32:53,990
it's<font color="#CCCCCC"> actually a very old concept this is</font>

654
00:32:52,649 --> 00:32:56,659
basically<font color="#CCCCCC"> the way ma</font>

655
00:32:53,990 --> 00:32:59,900
modem is working we're just taking a

656
00:32:56,660 --> 00:33:02,860
very automatic or algorithm idea and

657
00:32:59,900 --> 00:33:13,690
dividing<font color="#E5E5E5"> it into a manual process so</font>

658
00:33:02,860 --> 00:33:13,689
let's see<font color="#CCCCCC"> how it looks like</font><font color="#E5E5E5"> okay</font>

659
00:33:28,990 --> 00:33:36,440
okay so we'll start by having a<font color="#E5E5E5"> message</font>

660
00:33:33,160 --> 00:33:40,490
okay<font color="#E5E5E5"> assuming this is the payload that</font>

661
00:33:36,440 --> 00:33:42,590
we're looking<font color="#E5E5E5"> to exit rate and the next</font>

662
00:33:40,490 --> 00:33:49,070
thing is we're<font color="#E5E5E5"> going to actually convert</font>

663
00:33:42,590 --> 00:33:51,230
it into a sound<font color="#CCCCCC"> and now this is</font>

664
00:33:49,070 --> 00:33:53,570
basically<font color="#E5E5E5"> something that I can play out</font>

665
00:33:51,230 --> 00:33:55,630
and I'll out there for my computer<font color="#E5E5E5"> right</font>

666
00:33:53,570 --> 00:33:55,629
now

667
00:35:19,800 --> 00:35:30,790
yeah so the process<font color="#CCCCCC"> that just took place</font>

668
00:35:28,570 --> 00:35:35,050
the<font color="#E5E5E5"> modulation of the information our</font>

669
00:35:30,790 --> 00:35:40,090
<font color="#E5E5E5">message into a sound can then be played</font>

670
00:35:35,050 --> 00:35:42,850
more quietly through the sound card into

671
00:35:40,090 --> 00:35:45,070
anything from an iPhone or an Android or

672
00:35:42,850 --> 00:35:47,620
basically any device it's able<font color="#CCCCCC"> to</font>

673
00:35:45,070 --> 00:35:50,410
capture<font color="#E5E5E5"> that sound and then we can</font><font color="#CCCCCC"> go</font>

674
00:35:47,620 --> 00:35:53,529
ahead<font color="#E5E5E5"> and replay to another computer and</font>

675
00:35:50,410 --> 00:35:57,399
then basically reversing<font color="#E5E5E5"> this process</font>

676
00:35:53,530 --> 00:35:58,990
and get back the<font color="#E5E5E5"> payload so as I</font>

677
00:35:57,400 --> 00:36:01,740
mentioned this is this is not<font color="#CCCCCC"> a new</font>

678
00:35:58,990 --> 00:36:05,080
concept at all and this is the way

679
00:36:01,740 --> 00:36:08,319
computer networks has been<font color="#CCCCCC"> operating for</font>

680
00:36:05,080 --> 00:36:11,049
years basically we're modulating the

681
00:36:08,320 --> 00:36:13,780
information and one side and we're going

682
00:36:11,050 --> 00:36:17,350
to demodulate it on the other side to

683
00:36:13,780 --> 00:36:20,190
bring it back if it needs to be notice

684
00:36:17,350 --> 00:36:22,509
here is that as opposed to network

685
00:36:20,190 --> 00:36:24,010
communication that is actually using

686
00:36:22,510 --> 00:36:26,740
<font color="#E5E5E5">these techniques or different layers</font>

687
00:36:24,010 --> 00:36:29,260
that is designed<font color="#E5E5E5"> to handle anything from</font>

688
00:36:26,740 --> 00:36:32,439
with the submissions to errors obviously

689
00:36:29,260 --> 00:36:34,870
are very small POC there is nothing<font color="#CCCCCC"> of</font>

690
00:36:32,440 --> 00:36:39,250
the sort so the information can easily

691
00:36:34,870 --> 00:36:41,290
be not 100% operated maybe up several

692
00:36:39,250 --> 00:36:44,760
copies needs to be made in order to

693
00:36:41,290 --> 00:36:47,650
ensure the integrity however it's doable

694
00:36:44,760 --> 00:36:49,630
usually for small payloads large

695
00:36:47,650 --> 00:36:54,790
payloads obviously the statistics is

696
00:36:49,630 --> 00:36:57,090
against us any 3.5 jack can be used by

697
00:36:54,790 --> 00:37:00,700
except to take the output and the input

698
00:36:57,090 --> 00:37:02,500
from any standard laptop or an<font color="#CCCCCC"> iPhone</font><font color="#E5E5E5"> so</font>

699
00:37:00,700 --> 00:37:05,049
there is<font color="#E5E5E5"> nothing special here no special</font>

700
00:37:02,500 --> 00:37:08,370
equipment that<font color="#E5E5E5"> you need to do or to</font><font color="#CCCCCC"> run</font>

701
00:37:05,050 --> 00:37:08,370
in order to make<font color="#E5E5E5"> it</font><font color="#CCCCCC"> work</font>

702
00:37:11,520 --> 00:37:19,890
that's it thank you

