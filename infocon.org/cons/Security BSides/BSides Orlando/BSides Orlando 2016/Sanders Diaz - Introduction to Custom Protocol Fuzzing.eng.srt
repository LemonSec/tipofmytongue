1
00:00:00,079 --> 00:00:04,798
good afternoon everyone<font color="#CCCCCC"> welcome to</font><font color="#E5E5E5"> my</font>

2
00:00:03,330 --> 00:00:06,480
talk<font color="#E5E5E5"> on custom protocol reverse</font>

3
00:00:04,799 --> 00:00:08,429
engineering and fuzzing my name is

4
00:00:06,480 --> 00:00:10,559
Sanders<font color="#E5E5E5"> Diaz</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> thank you for coming</font>

5
00:00:08,429 --> 00:00:15,330
out today<font color="#CCCCCC"> it's a Sunday I know that</font>

6
00:00:10,559 --> 00:00:17,880
<font color="#E5E5E5">people</font><font color="#CCCCCC"> but hopefully I can</font><font color="#E5E5E5"> make your</font>

7
00:00:15,330 --> 00:00:21,289
<font color="#E5E5E5">time worthwhile by giving you some that</font>

8
00:00:17,880 --> 00:00:26,189
might be useful<font color="#E5E5E5"> in in our careers a</font>

9
00:00:21,289 --> 00:00:27,330
little bit about me<font color="#E5E5E5"> I am</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> penetration</font>

10
00:00:26,189 --> 00:00:29,400
tester based in<font color="#CCCCCC"> the Central Florida</font>

11
00:00:27,330 --> 00:00:33,750
<font color="#CCCCCC">region</font><font color="#E5E5E5"> I work for a</font><font color="#CCCCCC"> government</font>

12
00:00:29,400 --> 00:00:35,519
contractor some of<font color="#E5E5E5"> my interests are I'm</font>

13
00:00:33,750 --> 00:00:39,140
a packet monkey I used to be a<font color="#E5E5E5"> sock</font>

14
00:00:35,520 --> 00:00:41,700
analyst for<font color="#E5E5E5"> listen since then I've been</font>

15
00:00:39,140 --> 00:00:44,370
very<font color="#E5E5E5"> interested in in analyzing and</font>

16
00:00:41,700 --> 00:00:46,920
dissecting packets<font color="#E5E5E5"> I have a full packet</font>

17
00:00:44,370 --> 00:00:50,459
capture box at home and I like to dabble

18
00:00:46,920 --> 00:00:52,579
when I can I'm a tinkerer so I have a

19
00:00:50,460 --> 00:00:55,500
few servers<font color="#E5E5E5"> at home I'll have a lab I</font>

20
00:00:52,579 --> 00:00:58,980
like to I mentioned the full packet

21
00:00:55,500 --> 00:01:01,710
capture<font color="#E5E5E5"> box but I like to take apart</font>

22
00:00:58,980 --> 00:01:03,930
things have a bit of<font color="#E5E5E5"> a graveyard of old</font>

23
00:01:01,710 --> 00:01:07,979
phones and things that<font color="#E5E5E5"> I play around</font>

24
00:01:03,930 --> 00:01:11,030
with<font color="#E5E5E5"> and a bit of a paranoid security</font><font color="#CCCCCC"> I</font>

25
00:01:07,979 --> 00:01:14,450
think many of<font color="#CCCCCC"> us</font><font color="#E5E5E5"> in the room can relate</font>

26
00:01:11,030 --> 00:01:17,189
<font color="#CCCCCC">we're the person that our friends</font>

27
00:01:14,450 --> 00:01:18,780
constantly hear from<font color="#E5E5E5"> about the things</font>

28
00:01:17,189 --> 00:01:20,758
that<font color="#E5E5E5"> they shouldn't post</font><font color="#CCCCCC"> online or the</font>

29
00:01:18,780 --> 00:01:23,580
things<font color="#E5E5E5"> that they shouldn't do with their</font>

30
00:01:20,759 --> 00:01:26,159
passwords or things like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> some of</font>

31
00:01:23,580 --> 00:01:29,189
the certs I have<font color="#E5E5E5"> I'm a</font><font color="#CCCCCC"> DCI</font><font color="#E5E5E5"> a eg</font><font color="#CCCCCC"> I</font>

32
00:01:26,159 --> 00:01:32,430
<font color="#CCCCCC">contrition</font><font color="#E5E5E5"> analyst I'm a G pen and I</font>

33
00:01:29,189 --> 00:01:34,529
have a the advanced penetration tester

34
00:01:32,430 --> 00:01:42,470
cert and I'm a senior<font color="#E5E5E5"> at the University</font>

35
00:01:34,530 --> 00:01:45,810
<font color="#E5E5E5">of Illinois</font><font color="#CCCCCC"> motivations behind this</font><font color="#E5E5E5"> talk</font>

36
00:01:42,470 --> 00:01:48,210
<font color="#CCCCCC">when I was</font><font color="#E5E5E5"> thinking about what</font><font color="#CCCCCC"> to what</font>

37
00:01:45,810 --> 00:01:51,299
<font color="#CCCCCC">to talk about I thought well</font><font color="#E5E5E5"> what a</font>

38
00:01:48,210 --> 00:01:54,780
<font color="#CCCCCC">great subject fuzzing is and he's</font>

39
00:01:51,299 --> 00:01:57,950
buzzing<font color="#E5E5E5"> a great way to find those</font>

40
00:01:54,780 --> 00:02:01,619
<font color="#E5E5E5">vulnerabilities in custom applications</font>

41
00:01:57,950 --> 00:02:03,899
<font color="#CCCCCC">but this can be met with a</font><font color="#E5E5E5"> road block</font>

42
00:02:01,619 --> 00:02:07,670
when you have a custom protocol<font color="#E5E5E5"> if your</font>

43
00:02:03,899 --> 00:02:09,019
<font color="#E5E5E5">application speaks a protocol</font>

44
00:02:07,670 --> 00:02:12,200
<font color="#CCCCCC">clothes that you do not have a</font>

45
00:02:09,019 --> 00:02:14,290
specification for then you can't you may

46
00:02:12,200 --> 00:02:17,390
not be able<font color="#CCCCCC"> to set up</font><font color="#E5E5E5"> your fuzz and</font>

47
00:02:14,290 --> 00:02:19,940
buzzing is all about<font color="#E5E5E5"> code coverage if</font>

48
00:02:17,390 --> 00:02:23,029
you cannot have<font color="#CCCCCC"> your fuzzer</font><font color="#E5E5E5"> speak</font>

49
00:02:19,940 --> 00:02:25,129
<font color="#CCCCCC">something that the application can</font><font color="#E5E5E5"> be</font>

50
00:02:23,030 --> 00:02:27,920
<font color="#E5E5E5">able to</font><font color="#CCCCCC"> pups and understand</font><font color="#E5E5E5"> then you</font>

51
00:02:25,129 --> 00:02:29,629
<font color="#CCCCCC">will not</font><font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to achieve the</font><font color="#E5E5E5"> kind of</font>

52
00:02:27,920 --> 00:02:33,798
code coverage<font color="#E5E5E5"> necessary to find new</font>

53
00:02:29,629 --> 00:02:35,420
vulnerabilities<font color="#CCCCCC"> so there's no way around</font>

54
00:02:33,799 --> 00:02:37,129
it you have to<font color="#E5E5E5"> figure</font><font color="#CCCCCC"> out what the</font>

55
00:02:35,420 --> 00:02:39,559
protocol is<font color="#CCCCCC"> that you are fuzzing</font><font color="#E5E5E5"> and how</font>

56
00:02:37,129 --> 00:02:42,440
is<font color="#E5E5E5"> it put together tools like Wireshark</font>

57
00:02:39,560 --> 00:02:46,370
and TCP dump can help<font color="#E5E5E5"> but not always</font>

58
00:02:42,440 --> 00:02:49,549
clear how<font color="#CCCCCC"> how why that is</font>

59
00:02:46,370 --> 00:02:51,380
so<font color="#CCCCCC"> looking</font><font color="#E5E5E5"> online and looking at</font>

60
00:02:49,549 --> 00:02:54,769
<font color="#CCCCCC">resources for reverse engineering</font>

61
00:02:51,380 --> 00:02:57,170
protocols it can be a black art to

62
00:02:54,769 --> 00:02:58,610
beginners<font color="#CCCCCC"> a bit of a black art to</font>

63
00:02:57,170 --> 00:03:02,540
beginners and that's because there's not

64
00:02:58,610 --> 00:03:04,579
<font color="#E5E5E5">a lot</font><font color="#CCCCCC"> of documentation available some</font><font color="#E5E5E5"> of</font>

65
00:03:02,540 --> 00:03:07,640
the some of<font color="#E5E5E5"> the documentation I found</font>

66
00:03:04,579 --> 00:03:11,000
out there<font color="#CCCCCC"> were through my</font><font color="#E5E5E5"> research shows</font>

67
00:03:07,640 --> 00:03:15,170
<font color="#CCCCCC">that I noticed that there's a</font><font color="#E5E5E5"> lot of</font>

68
00:03:11,000 --> 00:03:17,810
<font color="#CCCCCC">high-level</font><font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> not a lot of very</font>

69
00:03:15,170 --> 00:03:19,488
<font color="#E5E5E5">detailed</font><font color="#CCCCCC"> information about how to go</font>

70
00:03:17,810 --> 00:03:22,519
<font color="#CCCCCC">through</font><font color="#E5E5E5"> and analyze a</font><font color="#CCCCCC"> and</font>

71
00:03:19,489 --> 00:03:24,280
<font color="#E5E5E5">reverse-engineer of protocol and a lot</font>

72
00:03:22,519 --> 00:03:31,970
<font color="#CCCCCC">of the documentation</font><font color="#E5E5E5"> that was available</font>

73
00:03:24,280 --> 00:03:35,630
<font color="#CCCCCC">focused on being</font><font color="#E5E5E5"> able to it focused on</font>

74
00:03:31,970 --> 00:03:38,900
being<font color="#E5E5E5"> able to look at the</font><font color="#CCCCCC"> Munir that</font>

75
00:03:35,630 --> 00:03:40,430
binary<font color="#E5E5E5"> associated with the particular</font>

76
00:03:38,900 --> 00:03:42,530
target<font color="#E5E5E5"> application that you were you</font>

77
00:03:40,430 --> 00:03:44,810
<font color="#CCCCCC">were working</font><font color="#E5E5E5"> with what I want to focus</font>

78
00:03:42,530 --> 00:03:46,639
on<font color="#E5E5E5"> in this talk</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> looking at the</font>

79
00:03:44,810 --> 00:03:50,590
<font color="#E5E5E5">network</font><font color="#CCCCCC"> and using that as a starting</font>

80
00:03:46,639 --> 00:03:50,590
<font color="#CCCCCC">point for</font><font color="#E5E5E5"> your reverse engineering</font>

81
00:03:51,010 --> 00:03:57,709
so with that said what we these<font color="#CCCCCC"> are the</font>

82
00:03:56,390 --> 00:04:00,079
things that<font color="#E5E5E5"> we'll cover in this talk</font>

83
00:03:57,709 --> 00:04:02,420
<font color="#E5E5E5">we'll talk</font><font color="#CCCCCC"> about basic protocol designed</font>

84
00:04:00,080 --> 00:04:05,750
the attributes the structure the syntax

85
00:04:02,420 --> 00:04:08,859
based<font color="#E5E5E5"> on my research of common protocols</font>

86
00:04:05,750 --> 00:04:08,860
such as TCP IP

87
00:04:09,579 --> 00:04:14,030
<font color="#CCCCCC">I'll talk about some of the the</font><font color="#E5E5E5"> network</font>

88
00:04:12,950 --> 00:04:16,789
<font color="#CCCCCC">versus engineering tools that can help</font>

89
00:04:14,030 --> 00:04:19,910
<font color="#E5E5E5">us in</font><font color="#CCCCCC"> this endeavor TCP dump which is a</font>

90
00:04:16,790 --> 00:04:23,660
great set and<font color="#E5E5E5"> forget tool Wireshark</font><font color="#CCCCCC"> has</font>

91
00:04:19,910 --> 00:04:26,960
a very extensible dissector framework

92
00:04:23,660 --> 00:04:29,990
and<font color="#E5E5E5"> net</font><font color="#CCCCCC"> saab which</font><font color="#E5E5E5"> is a protocol reverse</font>

93
00:04:26,960 --> 00:04:33,349
engineering tool that allows us<font color="#CCCCCC"> to find</font>

94
00:04:29,990 --> 00:04:38,360
<font color="#CCCCCC">low-hanging fruit very quickly can</font><font color="#E5E5E5"> you</font>

95
00:04:33,350 --> 00:04:39,680
buddy hear me cool<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> then we'll</font>

96
00:04:38,360 --> 00:04:41,630
<font color="#E5E5E5">talk about the protocol reverse</font>

97
00:04:39,680 --> 00:04:44,720
engineering process<font color="#CCCCCC"> you know what it</font><font color="#E5E5E5"> is</font>

98
00:04:41,630 --> 00:04:46,400
<font color="#E5E5E5">that we will</font><font color="#CCCCCC"> be able once we've talked</font>

99
00:04:44,720 --> 00:04:49,330
about<font color="#E5E5E5"> all these things then we'll talk</font>

100
00:04:46,400 --> 00:04:49,330
<font color="#CCCCCC">about</font><font color="#E5E5E5"> how to get</font><font color="#CCCCCC"> started</font>

101
00:04:53,340 --> 00:04:58,840
some of the things<font color="#CCCCCC"> we won't</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font>

102
00:04:55,330 --> 00:05:00,729
in this talk<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is not a fuzzing talk</font>

103
00:04:58,840 --> 00:05:03,039
I know a lot of people were expecting<font color="#CCCCCC"> a</font>

104
00:05:00,729 --> 00:05:04,810
lot of<font color="#CCCCCC"> detail about</font><font color="#E5E5E5"> fuzzing but we won't</font>

105
00:05:03,039 --> 00:05:07,150
be<font color="#CCCCCC"> going into</font><font color="#E5E5E5"> a whole</font><font color="#CCCCCC"> lot there's a lot</font>

106
00:05:04,810 --> 00:05:09,159
of good resources<font color="#E5E5E5"> online and</font><font color="#CCCCCC"> in books</font>

107
00:05:07,150 --> 00:05:13,388
and in conferences that<font color="#CCCCCC"> you will be able</font>

108
00:05:09,159 --> 00:05:16,120
<font color="#E5E5E5">to use but what I aim to do with this</font>

109
00:05:13,389 --> 00:05:20,159
talk is be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> introduce protocol</font>

110
00:05:16,120 --> 00:05:24,099
reverse engineering<font color="#E5E5E5"> as a step to buzzing</font>

111
00:05:20,159 --> 00:05:26,650
we won't be talking<font color="#CCCCCC"> about reverse</font>

112
00:05:24,099 --> 00:05:27,669
engineering<font color="#CCCCCC"> the the</font><font color="#E5E5E5"> actual binaries just</font>

113
00:05:26,650 --> 00:05:30,068
get it with the<font color="#CCCCCC"> client or</font><font color="#E5E5E5"> server</font>

114
00:05:27,669 --> 00:05:33,340
software<font color="#E5E5E5"> again there's plenty of good</font>

115
00:05:30,069 --> 00:05:35,500
<font color="#CCCCCC">guides out there</font><font color="#E5E5E5"> for that and we won't</font>

116
00:05:33,340 --> 00:05:37,568
<font color="#E5E5E5">be</font><font color="#CCCCCC"> talking about reverse</font><font color="#E5E5E5"> engineering</font>

117
00:05:35,500 --> 00:05:39,819
<font color="#E5E5E5">encrypted protocols and we're</font><font color="#CCCCCC"> going to</font>

118
00:05:37,569 --> 00:05:41,229
stick above<font color="#E5E5E5"> the transport layer of the</font>

119
00:05:39,819 --> 00:05:45,779
OSI model meaning<font color="#CCCCCC"> that we're going</font><font color="#E5E5E5"> to be</font>

120
00:05:41,229 --> 00:05:48,818
focusing on TCP or UDP based protocols

121
00:05:45,779 --> 00:05:50,800
we first confront a a protocol<font color="#CCCCCC"> that's</font>

122
00:05:48,819 --> 00:05:55,379
new to us<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is kind of what we find</font>

123
00:05:50,800 --> 00:05:57,789
we<font color="#CCCCCC"> find this this undie bit of data</font>

124
00:05:55,379 --> 00:05:59,440
<font color="#CCCCCC">sometimes</font><font color="#E5E5E5"> there'll be some some some</font>

125
00:05:57,789 --> 00:06:02,199
<font color="#E5E5E5">text that we might be able</font><font color="#CCCCCC"> to discern</font>

126
00:05:59,440 --> 00:06:04,719
for<font color="#E5E5E5"> the most part our tools won't be</font>

127
00:06:02,199 --> 00:06:07,960
able<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> anything with it oh but the</font>

128
00:06:04,719 --> 00:06:09,520
aim of the<font color="#E5E5E5"> intrapreneur</font>

129
00:06:07,960 --> 00:06:13,210
reverse<font color="#E5E5E5"> engineering is to be able to</font>

130
00:06:09,520 --> 00:06:14,650
find patterns<font color="#E5E5E5"> and sometimes we're lucky</font>

131
00:06:13,210 --> 00:06:16,239
<font color="#E5E5E5">and we're able to find some text that we</font>

132
00:06:14,650 --> 00:06:17,650
can<font color="#E5E5E5"> interpret and be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> put</font>

133
00:06:16,240 --> 00:06:23,860
something<font color="#E5E5E5"> together</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is actually a</font>

134
00:06:17,650 --> 00:06:26,378
printer at home<font color="#E5E5E5"> that had some</font><font color="#CCCCCC"> kind of it</font>

135
00:06:23,860 --> 00:06:29,699
back and forth between my laptop<font color="#CCCCCC"> and and</font>

136
00:06:26,379 --> 00:06:33,849
the<font color="#E5E5E5"> and the printer seems to be managing</font>

137
00:06:29,699 --> 00:06:36,669
the the printer software as<font color="#E5E5E5"> you can see</font>

138
00:06:33,849 --> 00:06:38,020
there's some there's<font color="#CCCCCC"> some interesting</font>

139
00:06:36,669 --> 00:06:40,120
<font color="#E5E5E5">information</font><font color="#CCCCCC"> that could</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> defined but</font>

140
00:06:38,020 --> 00:06:42,490
what does that mean and<font color="#CCCCCC"> what I'd like to</font>

141
00:06:40,120 --> 00:06:44,259
talk<font color="#CCCCCC"> about is just</font><font color="#E5E5E5"> what are the piece</font>

142
00:06:42,490 --> 00:06:46,060
parts of the protocol structure the flow

143
00:06:44,259 --> 00:06:48,990
<font color="#E5E5E5">things like that that might help us</font>

144
00:06:46,060 --> 00:06:48,990
answer<font color="#E5E5E5"> those questions</font>

145
00:06:50,340 --> 00:06:55,479
so to begin<font color="#E5E5E5"> let's talk about protocol</font>

146
00:06:53,590 --> 00:06:57,429
structure and what that is is the

147
00:06:55,480 --> 00:07:01,330
control signaling<font color="#E5E5E5"> the metadata and</font>

148
00:06:57,430 --> 00:07:03,490
payload<font color="#E5E5E5"> that</font><font color="#CCCCCC"> our messages contain most</font>

149
00:07:01,330 --> 00:07:05,320
calls are organized in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> following way</font>

150
00:07:03,490 --> 00:07:07,380
they have a header<font color="#E5E5E5"> they have a body and</font>

151
00:07:05,320 --> 00:07:12,820
<font color="#E5E5E5">they have sometimes they have a trailer</font>

152
00:07:07,380 --> 00:07:15,580
<font color="#CCCCCC">ip's like this IP can have a</font><font color="#E5E5E5"> I'm sorry</font>

153
00:07:12,820 --> 00:07:17,920
it's a Ethernet it's like Lisa Ethernet

154
00:07:15,580 --> 00:07:24,000
can<font color="#CCCCCC"> hat it does</font><font color="#E5E5E5"> have a trailer that</font><font color="#CCCCCC"> is</font>

155
00:07:17,920 --> 00:07:24,000
used for cyclical redundancy check but

156
00:07:24,330 --> 00:07:28,830
protocols<font color="#CCCCCC"> come in two basic flavors</font><font color="#E5E5E5"> they</font>

157
00:07:27,150 --> 00:07:32,489
can either be<font color="#E5E5E5"> text-based</font><font color="#CCCCCC"> or they</font><font color="#E5E5E5"> can be</font>

158
00:07:28,830 --> 00:07:35,789
<font color="#E5E5E5">binary based and they are framed framing</font>

159
00:07:32,490 --> 00:07:37,740
is a protocol speak for how you organize

160
00:07:35,789 --> 00:07:39,180
and and structure the protocol what is

161
00:07:37,740 --> 00:07:41,449
the delimiting associated with it

162
00:07:39,180 --> 00:07:44,310
<font color="#E5E5E5">there's two types there is</font><font color="#CCCCCC"> a big</font>

163
00:07:41,449 --> 00:07:45,810
<font color="#E5E5E5">encounter</font><font color="#CCCCCC"> delimited and these can come</font>

164
00:07:44,310 --> 00:07:49,169
in three different<font color="#CCCCCC"> varieties three</font>

165
00:07:45,810 --> 00:07:52,070
different ways of applying that octet

166
00:07:49,169 --> 00:07:57,740
stuffing which means that

167
00:07:52,070 --> 00:08:00,409
<font color="#E5E5E5">a specific delimiter</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> a message the</font>

168
00:07:57,740 --> 00:08:02,660
client was receiving<font color="#E5E5E5"> this communication</font>

169
00:08:00,410 --> 00:08:04,940
is able to then<font color="#E5E5E5"> remove the extra</font>

170
00:08:02,660 --> 00:08:08,030
delimiter<font color="#E5E5E5"> and find out which is</font><font color="#CCCCCC"> the</font>

171
00:08:04,940 --> 00:08:10,610
<font color="#E5E5E5">actual end of of the field or or the</font>

172
00:08:08,030 --> 00:08:12,590
specific part<font color="#CCCCCC"> of the protocol you're</font>

173
00:08:10,610 --> 00:08:14,450
talking about<font color="#CCCCCC"> yep octet counting which</font>

174
00:08:12,590 --> 00:08:15,679
is essentially what<font color="#E5E5E5"> it sounds like</font><font color="#CCCCCC"> you</font>

175
00:08:14,450 --> 00:08:19,099
count the octet<font color="#CCCCCC"> and you put it in there</font>

176
00:08:15,680 --> 00:08:23,210
HTTP does<font color="#E5E5E5"> this you have connection</font>

177
00:08:19,100 --> 00:08:25,280
blasting which is applied<font color="#CCCCCC"> by FTP it sets</font>

178
00:08:23,210 --> 00:08:27,560
up a<font color="#CCCCCC"> new connection transmits the</font>

179
00:08:25,280 --> 00:08:29,900
particular portion of<font color="#E5E5E5"> the communication</font>

180
00:08:27,560 --> 00:08:30,050
<font color="#E5E5E5">that</font><font color="#CCCCCC"> needs to happen</font><font color="#E5E5E5"> and it tears</font><font color="#CCCCCC"> it</font>

181
00:08:29,900 --> 00:08:32,840
down

182
00:08:30,050 --> 00:08:34,430
that's your delimited another thing

183
00:08:32,840 --> 00:08:36,800
<font color="#E5E5E5">that's important to protocol structure</font>

184
00:08:34,429 --> 00:08:38,780
is ending<font color="#E5E5E5"> this the order</font><font color="#CCCCCC"> in which the</font>

185
00:08:36,799 --> 00:08:41,449
bytes are interpreted you can be you can

186
00:08:38,780 --> 00:08:43,848
<font color="#CCCCCC">have big</font><font color="#E5E5E5"> endian which is known as</font><font color="#CCCCCC"> the</font>

187
00:08:41,450 --> 00:08:49,210
network<font color="#E5E5E5"> byte order it is how the</font>

188
00:08:43,849 --> 00:08:49,210
<font color="#E5E5E5">internet processes most of its of its</font>

189
00:08:51,580 --> 00:08:58,100
just going to set this thank you all

190
00:08:57,800 --> 00:09:03,490
<font color="#E5E5E5">right</font>

191
00:08:58,100 --> 00:09:03,490
so it's how the<font color="#CCCCCC"> internet process most of</font>

192
00:09:05,290 --> 00:09:13,439
common<font color="#E5E5E5"> bite order went one yeah</font>

193
00:09:18,100 --> 00:09:24,319
so<font color="#CCCCCC"> we're about in dienes</font>

194
00:09:21,800 --> 00:09:28,099
<font color="#CCCCCC">big-endian and</font><font color="#E5E5E5"> there are a few</font><font color="#CCCCCC"> out there</font>

195
00:09:24,319 --> 00:09:30,019
that apply<font color="#CCCCCC"> little-endian some of the mix</font>

196
00:09:28,100 --> 00:09:32,059
then can be<font color="#E5E5E5"> applied to</font><font color="#CCCCCC"> different field</font>

197
00:09:30,019 --> 00:09:35,600
<font color="#E5E5E5">an example of little-endian protocols is</font>

198
00:09:32,059 --> 00:09:38,600
SMB<font color="#CCCCCC"> and then we have</font><font color="#E5E5E5"> different field</font>

199
00:09:35,600 --> 00:09:41,389
<font color="#CCCCCC">types</font><font color="#E5E5E5"> applied to headers you can have</font>

200
00:09:38,600 --> 00:09:44,179
fixed field protocols like TCP<font color="#E5E5E5"> that</font>

201
00:09:41,389 --> 00:09:46,670
variable<font color="#E5E5E5"> optional fields</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> actually</font>

202
00:09:44,179 --> 00:09:50,209
seems like it's<font color="#CCCCCC"> fixed field but it</font>

203
00:09:46,670 --> 00:09:52,670
actually has a counter the the<font color="#CCCCCC"> I</font><font color="#E5E5E5"> the IP</font>

204
00:09:50,209 --> 00:09:56,388
<font color="#E5E5E5">header length allows us to determine</font>

205
00:09:52,670 --> 00:09:59,748
what is the current size of our header

206
00:09:56,389 --> 00:10:01,610
and when<font color="#E5E5E5"> that counter goes up beyond a</font>

207
00:09:59,749 --> 00:10:04,970
certain level<font color="#E5E5E5"> we know that IP options</font>

208
00:10:01,610 --> 00:10:07,339
are present<font color="#CCCCCC"> the last</font><font color="#E5E5E5"> one we have here</font><font color="#CCCCCC"> is</font>

209
00:10:04,970 --> 00:10:09,139
the<font color="#E5E5E5"> limiter separate value pairs this is</font>

210
00:10:07,339 --> 00:10:13,790
how<font color="#CCCCCC"> text-based protocols to limit their</font>

211
00:10:09,139 --> 00:10:16,939
their fields<font color="#E5E5E5"> you have the name of a of a</font>

212
00:10:13,790 --> 00:10:18,709
field associated<font color="#E5E5E5"> with a delimiter and a</font>

213
00:10:16,939 --> 00:10:21,049
value followed by some kind of

214
00:10:18,709 --> 00:10:24,498
<font color="#CCCCCC">terminator in this case in HTTP</font><font color="#E5E5E5"> it's</font>

215
00:10:21,049 --> 00:10:27,079
crlf and then we have the protocol

216
00:10:24,499 --> 00:10:30,889
trailer I mentioned Ethernet<font color="#E5E5E5"> Ethernet</font>

217
00:10:27,079 --> 00:10:32,269
actually uses the protocol trailer as a

218
00:10:30,889 --> 00:10:35,059
<font color="#CCCCCC">pickle culbreth unless</font><font color="#E5E5E5"> you check</font>

219
00:10:32,269 --> 00:10:38,029
<font color="#E5E5E5">something that allows it to check itself</font>

220
00:10:35,059 --> 00:10:41,029
to see there<font color="#E5E5E5"> is an error</font><font color="#CCCCCC"> in the</font>

221
00:10:38,029 --> 00:10:43,759
transmission<font color="#CCCCCC"> the next thing we'll talk</font>

222
00:10:41,029 --> 00:10:45,759
about is protocol flow<font color="#E5E5E5"> that's the timing</font>

223
00:10:43,759 --> 00:10:48,829
the order directionality of the

224
00:10:45,759 --> 00:10:50,540
<font color="#CCCCCC">communication most</font><font color="#E5E5E5"> the most common</font>

225
00:10:48,829 --> 00:10:51,979
models are a<font color="#CCCCCC"> client-server which means</font>

226
00:10:50,540 --> 00:10:53,569
that a client connects<font color="#E5E5E5"> to a server and</font>

227
00:10:51,980 --> 00:10:55,939
expects services or you have

228
00:10:53,569 --> 00:10:59,649
<font color="#E5E5E5">pierre-pierre where both ends of the</font>

229
00:10:55,939 --> 00:11:02,089
conversation depend on each other<font color="#CCCCCC"> the</font>

230
00:10:59,649 --> 00:11:06,009
modes of<font color="#E5E5E5"> communication</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> connection</font>

231
00:11:02,089 --> 00:11:08,209
<font color="#E5E5E5">oriented in connection less TCP as a</font>

232
00:11:06,009 --> 00:11:09,619
connection-oriented protocol<font color="#E5E5E5"> has the</font>

233
00:11:08,209 --> 00:11:13,128
<font color="#CCCCCC">following</font><font color="#E5E5E5"> states listen</font><font color="#CCCCCC"> Connect</font><font color="#E5E5E5"> accept</font>

234
00:11:09,619 --> 00:11:15,470
receive and send<font color="#E5E5E5"> but UDP is typically a</font>

235
00:11:13,129 --> 00:11:17,269
connectionless protocol now there are

236
00:11:15,470 --> 00:11:21,619
protocols<font color="#E5E5E5"> built on top of</font><font color="#CCCCCC"> these and they</font>

237
00:11:17,269 --> 00:11:24,829
have<font color="#E5E5E5"> their own ability</font><font color="#CCCCCC"> to track</font>

238
00:11:21,619 --> 00:11:26,600
connection and track state<font color="#E5E5E5"> HTTP is</font>

239
00:11:24,829 --> 00:11:30,709
actually connectionless even though it

240
00:11:26,600 --> 00:11:32,899
is built on top of<font color="#E5E5E5"> HTTP we have flow</font>

241
00:11:30,709 --> 00:11:35,170
control which can be<font color="#E5E5E5"> feedback where the</font>

242
00:11:32,899 --> 00:11:41,620
client says yeah

243
00:11:35,170 --> 00:11:44,050
<font color="#E5E5E5">rate based which is used to determine</font>

244
00:11:41,620 --> 00:11:46,300
<font color="#E5E5E5">which applies formulas to how the</font>

245
00:11:44,050 --> 00:11:52,449
<font color="#CCCCCC">communications</font><font color="#E5E5E5"> coming through and how</font>

246
00:11:46,300 --> 00:11:54,810
how how the specific timing is happening

247
00:11:52,449 --> 00:11:57,430
to determine that there<font color="#E5E5E5"> is congestion</font>

248
00:11:54,810 --> 00:12:01,810
<font color="#E5E5E5">error correction you have automatic</font>

249
00:11:57,430 --> 00:12:06,189
repeat request<font color="#E5E5E5"> when when we we're having</font>

250
00:12:01,810 --> 00:12:07,540
a TCP conversation<font color="#E5E5E5"> the the client will</font>

251
00:12:06,190 --> 00:12:09,220
acknowledge<font color="#E5E5E5"> every single packet</font>

252
00:12:07,540 --> 00:12:11,680
everything<font color="#E5E5E5"> that does not get</font>

253
00:12:09,220 --> 00:12:13,600
acknowledged<font color="#CCCCCC"> yes we transmit it and then</font>

254
00:12:11,680 --> 00:12:15,459
we have<font color="#E5E5E5"> forward error correction</font><font color="#CCCCCC"> that's</font>

255
00:12:13,600 --> 00:12:17,690
<font color="#E5E5E5">where the server expects the client to</font>

256
00:12:15,459 --> 00:12:19,520
correct<font color="#E5E5E5"> the tone errors</font>

257
00:12:17,690 --> 00:12:22,430
session tracking<font color="#CCCCCC"> can be stateful of</font>

258
00:12:19,520 --> 00:12:24,680
stateless<font color="#E5E5E5"> HTTP again it is a stateless</font>

259
00:12:22,430 --> 00:12:28,310
protocol unless you add some other

260
00:12:24,680 --> 00:12:36,069
technologies<font color="#CCCCCC"> to it</font><font color="#E5E5E5"> typically there is no</font>

261
00:12:28,310 --> 00:12:40,719
state tracking<font color="#CCCCCC"> and</font><font color="#E5E5E5"> last thing we have</font>

262
00:12:36,070 --> 00:12:40,720
excuse me<font color="#E5E5E5"> we fix this now</font>

263
00:12:49,180 --> 00:12:56,859
yeah yeah I'm just<font color="#CCCCCC"> going to make sure</font>

264
00:12:54,020 --> 00:12:56,860
<font color="#E5E5E5">that it doesn't sleep</font>

265
00:12:59,699 --> 00:13:02,748
excuse me

266
00:13:07,050 --> 00:13:14,680
all right back<font color="#CCCCCC"> to her talk I hope</font><font color="#E5E5E5"> that</font>

267
00:13:10,090 --> 00:13:16,360
<font color="#E5E5E5">doesn't hurt us on time</font><font color="#CCCCCC"> while</font>

268
00:13:14,680 --> 00:13:18,459
researching for this<font color="#E5E5E5"> talk I was able to</font>

269
00:13:16,360 --> 00:13:20,530
go<font color="#CCCCCC"> through and</font><font color="#E5E5E5"> collect a list of the</font>

270
00:13:18,460 --> 00:13:22,840
most common<font color="#CCCCCC"> feel types</font>

271
00:13:20,530 --> 00:13:24,970
version was actually<font color="#E5E5E5"> very common and for</font>

272
00:13:22,840 --> 00:13:27,580
the protocol<font color="#E5E5E5"> reverse engineer that's</font><font color="#CCCCCC"> a</font>

273
00:13:24,970 --> 00:13:29,470
very useful<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> because once you</font><font color="#E5E5E5"> have</font>

274
00:13:27,580 --> 00:13:31,480
<font color="#E5E5E5">the</font><font color="#CCCCCC"> version listed</font><font color="#E5E5E5"> in your protocol</font>

275
00:13:29,470 --> 00:13:34,720
header<font color="#E5E5E5"> it really doesn't change right</font>

276
00:13:31,480 --> 00:13:37,000
for example the IP protocol<font color="#CCCCCC"> when you're</font>

277
00:13:34,720 --> 00:13:40,120
transmitting<font color="#E5E5E5"> your your protocol header</font>

278
00:13:37,000 --> 00:13:43,480
<font color="#E5E5E5">what comes first it's the version number</font>

279
00:13:40,120 --> 00:13:45,640
usually ipv4<font color="#E5E5E5"> is has a</font><font color="#CCCCCC"> four in front i PB</font>

280
00:13:43,480 --> 00:13:48,340
<font color="#E5E5E5">six has a six in front so that's a very</font>

281
00:13:45,640 --> 00:13:50,939
useful<font color="#CCCCCC"> way to be able</font><font color="#E5E5E5"> to track you know</font>

282
00:13:48,340 --> 00:13:53,110
<font color="#E5E5E5">what how your protocol is</font><font color="#CCCCCC"> delimited</font>

283
00:13:50,940 --> 00:13:58,150
header length<font color="#E5E5E5"> that's another very useful</font>

284
00:13:53,110 --> 00:13:59,590
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> the IP header length allows</font><font color="#E5E5E5"> us to</font>

285
00:13:58,150 --> 00:14:02,140
be able to determine how big the header

286
00:13:59,590 --> 00:14:04,870
is so as reverse engineers we can go

287
00:14:02,140 --> 00:14:07,569
through<font color="#E5E5E5"> and</font><font color="#CCCCCC"> recompute</font><font color="#E5E5E5"> header lengths and</font>

288
00:14:04,870 --> 00:14:10,450
<font color="#E5E5E5">try to match it according</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> what we</font>

289
00:14:07,570 --> 00:14:13,180
<font color="#E5E5E5">find in a header we have sequence values</font>

290
00:14:10,450 --> 00:14:15,940
and<font color="#E5E5E5"> these are unique values that track</font>

291
00:14:13,180 --> 00:14:17,589
<font color="#E5E5E5">every single</font><font color="#CCCCCC"> message</font><font color="#E5E5E5"> timestamps record</font>

292
00:14:15,940 --> 00:14:20,830
time values<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is useful for</font>

293
00:14:17,590 --> 00:14:23,440
encryption<font color="#CCCCCC"> and also flow control you</font>

294
00:14:20,830 --> 00:14:26,530
have timers<font color="#E5E5E5"> such as the TTL on the IP</font>

295
00:14:23,440 --> 00:14:29,860
header<font color="#E5E5E5"> and the TTL in the</font><font color="#CCCCCC"> DNS header</font>

296
00:14:26,530 --> 00:14:31,449
<font color="#E5E5E5">which allows us to</font><font color="#CCCCCC"> be able to track how</font>

297
00:14:29,860 --> 00:14:33,070
long<font color="#E5E5E5"> a message has been out there as</font>

298
00:14:31,450 --> 00:14:35,920
<font color="#E5E5E5">it's being</font><font color="#CCCCCC"> it's just moving through the</font>

299
00:14:33,070 --> 00:14:39,210
<font color="#E5E5E5">internet we have error correcting values</font>

300
00:14:35,920 --> 00:14:43,030
CRC's hashes etc<font color="#E5E5E5"> to be able to determine</font>

301
00:14:39,210 --> 00:14:46,060
how if an error is<font color="#E5E5E5"> present and then we</font>

302
00:14:43,030 --> 00:14:48,640
have flag fields such as<font color="#E5E5E5"> the TCP header</font>

303
00:14:46,060 --> 00:14:51,939
flag<font color="#CCCCCC"> which allows</font><font color="#E5E5E5"> us to share a wealth</font>

304
00:14:48,640 --> 00:14:56,920
of<font color="#E5E5E5"> information about the state or things</font>

305
00:14:51,940 --> 00:14:58,780
<font color="#E5E5E5">such as the the handshaking between</font>

306
00:14:56,920 --> 00:15:00,729
communications to be<font color="#E5E5E5"> able to set</font><font color="#CCCCCC"> up a</font>

307
00:14:58,780 --> 00:15:02,280
<font color="#E5E5E5">connection there's a lot of useful</font>

308
00:15:00,730 --> 00:15:05,740
<font color="#CCCCCC">things</font><font color="#E5E5E5"> that can</font><font color="#CCCCCC"> happen through</font><font color="#E5E5E5"> flags</font>

309
00:15:02,280 --> 00:15:09,130
then we have the standard<font color="#E5E5E5"> data types</font>

310
00:15:05,740 --> 00:15:10,120
<font color="#E5E5E5">strings integers bytes etc still going</font>

311
00:15:09,130 --> 00:15:13,960
on

312
00:15:10,120 --> 00:15:13,960
it's not<font color="#E5E5E5"> something anymore</font>

313
00:15:16,100 --> 00:15:19,410
<font color="#E5E5E5">okay I'm just gonna keep my finger on it</font>

314
00:15:18,270 --> 00:15:22,949
<font color="#E5E5E5">all right</font>

315
00:15:19,410 --> 00:15:26,010
<font color="#CCCCCC">moving on we have reporting and encoding</font>

316
00:15:22,950 --> 00:15:31,130
reporting<font color="#E5E5E5"> is the way that we transmit</font>

317
00:15:26,010 --> 00:15:35,490
<font color="#E5E5E5">how our protocol is is actually behaving</font>

318
00:15:31,130 --> 00:15:38,280
<font color="#E5E5E5">HTML reports status codes</font><font color="#CCCCCC"> 200 400 500</font>

319
00:15:35,490 --> 00:15:40,920
<font color="#E5E5E5">first server error status indicators are</font>

320
00:15:38,280 --> 00:15:43,350
present in protocols like pop3<font color="#E5E5E5"> actually</font>

321
00:15:40,920 --> 00:15:46,829
uses a plus or<font color="#E5E5E5"> minus we have</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> field</font>

322
00:15:43,350 --> 00:15:48,330
<font color="#E5E5E5">flags like in TCP where we can use the</font>

323
00:15:46,830 --> 00:15:50,010
flag combinations to determine what's

324
00:15:48,330 --> 00:15:52,500
<font color="#E5E5E5">going on in the communication and then</font>

325
00:15:50,010 --> 00:15:54,990
we have<font color="#CCCCCC"> area direct correct correcting</font>

326
00:15:52,500 --> 00:15:57,450
schemes such as parity bit checksum and

327
00:15:54,990 --> 00:15:59,070
we<font color="#E5E5E5"> already mentioned those but those are</font>

328
00:15:57,450 --> 00:16:03,300
<font color="#CCCCCC">used</font><font color="#E5E5E5"> to be able to detect errors in</font>

329
00:15:59,070 --> 00:16:06,240
<font color="#E5E5E5">coding</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> happen if encoding is</font>

330
00:16:03,300 --> 00:16:07,469
present it'll be ASCII Unicode<font color="#CCCCCC"> epic</font>

331
00:16:06,240 --> 00:16:09,840
there are a few others<font color="#CCCCCC"> out there</font><font color="#E5E5E5"> but</font>

332
00:16:07,470 --> 00:16:11,880
those<font color="#E5E5E5"> are the most common</font><font color="#CCCCCC"> and then we</font>

333
00:16:09,840 --> 00:16:14,460
can have compression<font color="#E5E5E5"> like on the HTTP</font>

334
00:16:11,880 --> 00:16:20,370
protocol<font color="#E5E5E5"> which can be gzip deflate or</font>

335
00:16:14,460 --> 00:16:22,170
compress with that concludes<font color="#CCCCCC"> the the the</font>

336
00:16:20,370 --> 00:16:24,570
theory portion<font color="#CCCCCC"> and we can talk about</font><font color="#E5E5E5"> the</font>

337
00:16:22,170 --> 00:16:26,579
tools and<font color="#CCCCCC"> how to use them</font><font color="#E5E5E5"> TCP dump is a</font>

338
00:16:24,570 --> 00:16:29,300
great tool to set and<font color="#CCCCCC"> forget to</font><font color="#E5E5E5"> actually</font>

339
00:16:26,580 --> 00:16:31,800
use<font color="#E5E5E5"> it on my full packet capture box it</font>

340
00:16:29,300 --> 00:16:34,199
some<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> most important things for</font>

341
00:16:31,800 --> 00:16:35,880
<font color="#CCCCCC">the reverse engineer that you want to</font>

342
00:16:34,200 --> 00:16:37,290
<font color="#E5E5E5">consider you want to be able to write to</font>

343
00:16:35,880 --> 00:16:38,820
<font color="#E5E5E5">a file you want to be able to read</font><font color="#CCCCCC"> from</font>

344
00:16:37,290 --> 00:16:41,910
a file<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to be able to</font>

345
00:16:38,820 --> 00:16:44,520
display<font color="#E5E5E5"> hex toggle verbosity levels and</font>

346
00:16:41,910 --> 00:16:47,060
be able<font color="#CCCCCC"> to specify</font><font color="#E5E5E5"> how many packets to</font>

347
00:16:44,520 --> 00:16:49,980
capture and what<font color="#E5E5E5"> the snap length is</font>

348
00:16:47,060 --> 00:16:54,859
Berkeley packet filters<font color="#E5E5E5"> they share a</font>

349
00:16:49,980 --> 00:16:57,150
<font color="#E5E5E5">wealth of of information they share</font>

350
00:16:54,860 --> 00:17:00,440
Berkeley packet filters are a great way

351
00:16:57,150 --> 00:17:02,939
to control how you're capturing data

352
00:17:00,440 --> 00:17:07,350
<font color="#E5E5E5">there are operators that allow</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to</font>

353
00:17:02,940 --> 00:17:10,589
specify<font color="#CCCCCC"> us specify</font><font color="#E5E5E5"> expressions that we</font>

354
00:17:07,349 --> 00:17:12,990
can<font color="#E5E5E5"> use to find the the kind of packets</font>

355
00:17:10,589 --> 00:17:16,379
<font color="#E5E5E5">that we like you have relational logical</font>

356
00:17:12,990 --> 00:17:18,180
operators there's also a<font color="#E5E5E5"> index reference</font>

357
00:17:16,380 --> 00:17:20,670
<font color="#E5E5E5">which allows us to</font><font color="#CCCCCC"> specify a protocol</font>

358
00:17:18,180 --> 00:17:21,930
<font color="#E5E5E5">and allows</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> specify an offset</font><font color="#E5E5E5"> an</font>

359
00:17:20,670 --> 00:17:27,260
offset<font color="#CCCCCC"> and the number of</font><font color="#E5E5E5"> bytes that</font>

360
00:17:21,930 --> 00:17:27,260
<font color="#E5E5E5">we're looking</font><font color="#CCCCCC"> for some useful examples</font>

361
00:17:27,470 --> 00:17:33,000
everybody knows<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the TCP</font><font color="#CCCCCC"> header is</font>

362
00:17:30,060 --> 00:17:35,550
20 bytes long<font color="#E5E5E5"> anything after the</font><font color="#CCCCCC"> C's</font><font color="#E5E5E5"> the</font>

363
00:17:33,000 --> 00:17:37,110
TCP header should be<font color="#E5E5E5"> our payload so for</font>

364
00:17:35,550 --> 00:17:40,110
the reverse engineer being<font color="#CCCCCC"> able to</font>

365
00:17:37,110 --> 00:17:42,449
specify<font color="#E5E5E5"> that that</font><font color="#CCCCCC"> we're looking</font><font color="#E5E5E5"> for the</font>

366
00:17:40,110 --> 00:17:44,939
end of<font color="#E5E5E5"> the TCP</font><font color="#CCCCCC"> header or in this or the</font>

367
00:17:42,450 --> 00:17:46,470
UDP<font color="#E5E5E5"> header</font><font color="#CCCCCC"> allows us to be able to go</font>

368
00:17:44,940 --> 00:17:49,020
<font color="#E5E5E5">into the to the protocol of our choosing</font>

369
00:17:46,470 --> 00:17:51,870
<font color="#E5E5E5">and look at things there being able to</font>

370
00:17:49,020 --> 00:17:55,639
specify<font color="#E5E5E5"> the protocol size by two of the</font>

371
00:17:51,870 --> 00:17:59,399
<font color="#E5E5E5">IP header that specifies the the actual</font>

372
00:17:55,640 --> 00:18:04,380
size of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> packet</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this case I'm</font>

373
00:17:59,400 --> 00:18:08,400
justified random value of 576 the next

374
00:18:04,380 --> 00:18:10,170
one there is TCP<font color="#E5E5E5"> again looking at in the</font>

375
00:18:08,400 --> 00:18:12,600
<font color="#CCCCCC">hood</font><font color="#E5E5E5"> in the header looking at four bytes</font>

376
00:18:10,170 --> 00:18:14,580
there actually it's just a hex sequence

377
00:18:12,600 --> 00:18:21,300
that<font color="#E5E5E5"> hex sequence is</font><font color="#CCCCCC"> actually a post</font>

378
00:18:14,580 --> 00:18:29,179
value<font color="#E5E5E5"> looking at HTTP packets working</font>

379
00:18:21,300 --> 00:18:29,180
with pcap files so these are very<font color="#CCCCCC"> useful</font>

380
00:18:30,890 --> 00:18:35,760
configurations for TCP<font color="#CCCCCC"> dump to be able</font>

381
00:18:32,850 --> 00:18:39,060
<font color="#CCCCCC">to</font><font color="#E5E5E5"> collect information you want to be</font>

382
00:18:35,760 --> 00:18:40,440
able<font color="#CCCCCC"> to collect unique instances of</font><font color="#E5E5E5"> your</font>

383
00:18:39,060 --> 00:18:44,610
<font color="#E5E5E5">protocol I mentioned how</font><font color="#CCCCCC"> you can look</font>

384
00:18:40,440 --> 00:18:49,050
above<font color="#E5E5E5"> byte 20 of the TCP header</font><font color="#CCCCCC"> and/or</font>

385
00:18:44,610 --> 00:18:51,300
looking above the<font color="#CCCCCC"> U and you can specify</font>

386
00:18:49,050 --> 00:18:54,389
<font color="#E5E5E5">bite patterns as I mentioned before with</font>

387
00:18:51,300 --> 00:18:57,810
with looking the<font color="#CCCCCC"> Athene's this of post</font>

388
00:18:54,390 --> 00:18:59,970
in the header<font color="#E5E5E5"> we can also divide packets</font>

389
00:18:57,810 --> 00:19:01,409
<font color="#CCCCCC">into multiple files so</font><font color="#E5E5E5"> that we can diff</font>

390
00:18:59,970 --> 00:19:04,710
them we can we can chop them<font color="#E5E5E5"> up</font>

391
00:19:01,410 --> 00:19:07,620
individually<font color="#CCCCCC"> you do that by specifying a</font>

392
00:19:04,710 --> 00:19:09,240
file and in TCP<font color="#E5E5E5"> dump to read and want to</font>

393
00:19:07,620 --> 00:19:11,610
write<font color="#E5E5E5"> and then you can also specify</font>

394
00:19:09,240 --> 00:19:13,670
either a<font color="#E5E5E5"> packet count or an actual byte</font>

395
00:19:11,610 --> 00:19:17,449
count

396
00:19:13,670 --> 00:19:21,440
<font color="#E5E5E5">you can manipulate pcaps using</font><font color="#CCCCCC"> xxe which</font>

397
00:19:17,450 --> 00:19:23,960
is a command<font color="#E5E5E5"> line based hex editor you</font>

398
00:19:21,440 --> 00:19:25,880
can<font color="#E5E5E5"> specify an offset</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> like you</font>

399
00:19:23,960 --> 00:19:28,970
could with the<font color="#CCCCCC"> Berkeley</font><font color="#E5E5E5"> packet filters</font>

400
00:19:25,880 --> 00:19:30,800
you specify the offset<font color="#CCCCCC"> you define the</font>

401
00:19:28,970 --> 00:19:32,840
length<font color="#CCCCCC"> how many bytes you want to go</font>

402
00:19:30,800 --> 00:19:41,060
<font color="#E5E5E5">into and you</font><font color="#CCCCCC"> of course you specify your</font>

403
00:19:32,840 --> 00:19:44,389
pickup<font color="#CCCCCC"> so use</font><font color="#E5E5E5"> xst to reconstruct the</font>

404
00:19:41,060 --> 00:19:47,450
actual hex representation of of the

405
00:19:44,390 --> 00:19:51,820
protocol<font color="#CCCCCC"> and</font><font color="#E5E5E5"> out an ASCII version of it</font>

406
00:19:47,450 --> 00:19:54,770
we can<font color="#CCCCCC"> use</font><font color="#E5E5E5"> it to specify out a to</font>

407
00:19:51,820 --> 00:19:59,120
reinterpret the hex<font color="#E5E5E5"> and then pass it</font><font color="#CCCCCC"> to</font>

408
00:19:54,770 --> 00:20:01,400
a tool such as<font color="#CCCCCC"> checksum</font><font color="#E5E5E5"> or a 64 to be</font>

409
00:19:59,120 --> 00:20:03,770
able<font color="#E5E5E5"> to figure out if if this is a</font>

410
00:20:01,400 --> 00:20:08,180
checksum<font color="#E5E5E5"> or if there</font><font color="#CCCCCC"> is a 64 encoding or</font>

411
00:20:03,770 --> 00:20:12,889
some other interesting<font color="#CCCCCC"> manipulation</font>

412
00:20:08,180 --> 00:20:14,420
going<font color="#E5E5E5"> on next</font><font color="#CCCCCC"> up is Wireshark</font><font color="#E5E5E5"> and pretty</font>

413
00:20:12,890 --> 00:20:17,180
sure everybody's had a chance<font color="#CCCCCC"> to look at</font>

414
00:20:14,420 --> 00:20:19,250
Wireshark at some point<font color="#CCCCCC"> the capture</font>

415
00:20:17,180 --> 00:20:23,060
filter is a<font color="#CCCCCC"> BPF base so everything that</font>

416
00:20:19,250 --> 00:20:24,680
we talked<font color="#E5E5E5"> about TCP dump it has display</font>

417
00:20:23,060 --> 00:20:28,100
filters which were actually<font color="#CCCCCC"> very useful</font>

418
00:20:24,680 --> 00:20:31,820
<font color="#E5E5E5">if you're using</font><font color="#CCCCCC"> P shark you can actually</font>

419
00:20:28,100 --> 00:20:34,550
extract<font color="#E5E5E5"> individual headers from your</font>

420
00:20:31,820 --> 00:20:36,770
packets<font color="#E5E5E5"> if you have a dissector built</font>

421
00:20:34,550 --> 00:20:38,480
for that<font color="#CCCCCC"> for</font><font color="#E5E5E5"> that protocol we'll talk</font>

422
00:20:36,770 --> 00:20:40,760
about<font color="#CCCCCC"> the sector's next built-in</font>

423
00:20:38,480 --> 00:20:43,700
analysis tools it allows you to<font color="#E5E5E5"> explore</font>

424
00:20:40,760 --> 00:20:47,180
PD<font color="#E5E5E5"> PD use meaning that you can you</font><font color="#CCCCCC"> can</font>

425
00:20:43,700 --> 00:20:50,360
<font color="#E5E5E5">take different parts of the protocol</font>

426
00:20:47,180 --> 00:20:53,180
such<font color="#E5E5E5"> as maybe the segment for that's</font>

427
00:20:50,360 --> 00:20:57,979
tcp-based or the whole packet you can

428
00:20:53,180 --> 00:20:59,900
<font color="#CCCCCC">Hort those using using a Wireshark it</font>

429
00:20:57,980 --> 00:21:02,660
has a lure interpreter<font color="#E5E5E5"> which can be used</font>

430
00:20:59,900 --> 00:21:06,170
<font color="#E5E5E5">for dissectors I don't personally</font><font color="#CCCCCC"> like</font>

431
00:21:02,660 --> 00:21:09,230
it I<font color="#E5E5E5"> actually like Lua on an nmap for</font>

432
00:21:06,170 --> 00:21:11,810
developing NSE so what I would<font color="#E5E5E5"> like to</font>

433
00:21:09,230 --> 00:21:14,750
show you<font color="#E5E5E5"> is the Wireshark generic</font>

434
00:21:11,810 --> 00:21:17,720
dissector and that is a<font color="#E5E5E5"> plugin for</font>

435
00:21:14,750 --> 00:21:20,060
Wireshark<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> at the LL or a library</font>

436
00:21:17,720 --> 00:21:24,410
file<font color="#E5E5E5"> load that allows you</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> specify</font>

437
00:21:20,060 --> 00:21:27,379
<font color="#CCCCCC">text-based dissectors authors</font><font color="#E5E5E5"> Oliver</font>

438
00:21:24,410 --> 00:21:31,190
<font color="#CCCCCC">Abilene and</font><font color="#E5E5E5"> you can find this tool at</font>

439
00:21:27,380 --> 00:21:33,260
freedom<font color="#E5E5E5"> fr so some of the features</font>

440
00:21:31,190 --> 00:21:34,910
allows you to specify all<font color="#E5E5E5"> the things</font>

441
00:21:33,260 --> 00:21:38,629
that<font color="#CCCCCC"> you typically would</font><font color="#E5E5E5"> and if I sector</font>

442
00:21:34,910 --> 00:21:41,030
floats<font color="#E5E5E5"> strings others</font><font color="#CCCCCC"> you can also</font>

443
00:21:38,630 --> 00:21:43,070
<font color="#E5E5E5">define bit fields but not</font><font color="#CCCCCC"> only can you</font>

444
00:21:41,030 --> 00:21:46,910
do<font color="#E5E5E5"> these things in a static</font><font color="#CCCCCC"> way you can</font>

445
00:21:43,070 --> 00:21:50,419
actually specify a bit of<font color="#CCCCCC"> a script to</font>

446
00:21:46,910 --> 00:21:55,250
manipulate the day it has<font color="#E5E5E5"> loop switches</font>

447
00:21:50,420 --> 00:21:59,480
functions enumerations<font color="#E5E5E5"> and arrays</font><font color="#CCCCCC"> double</font>

448
00:21:55,250 --> 00:22:04,310
limitation doesn't<font color="#E5E5E5"> detect cost it can be</font>

449
00:21:59,480 --> 00:22:05,900
a memory hog<font color="#CCCCCC"> if you're in 24</font><font color="#E5E5E5"> fields in</font>

450
00:22:04,310 --> 00:22:09,230
your<font color="#CCCCCC"> perk</font><font color="#E5E5E5"> although I</font><font color="#CCCCCC"> don't think</font><font color="#E5E5E5"> we'll</font>

451
00:22:05,900 --> 00:22:11,720
encounter that<font color="#CCCCCC"> and then it can</font><font color="#E5E5E5"> be</font>

452
00:22:09,230 --> 00:22:14,590
limited<font color="#CCCCCC"> to 20 protocols</font><font color="#E5E5E5"> again something</font>

453
00:22:11,720 --> 00:22:16,700
that I<font color="#E5E5E5"> think will encounter very often</font>

454
00:22:14,590 --> 00:22:19,250
this<font color="#E5E5E5"> is how you put together a</font><font color="#CCCCCC"> tie</font>

455
00:22:16,700 --> 00:22:22,610
sector the first thing you<font color="#E5E5E5"> have is a</font>

456
00:22:19,250 --> 00:22:25,790
file<font color="#CCCCCC"> called the protocol WS gene this</font>

457
00:22:22,610 --> 00:22:28,010
describes the<font color="#E5E5E5"> actual dissector starts</font>

458
00:22:25,790 --> 00:22:32,389
with a name you<font color="#CCCCCC"> can associate a specific</font>

459
00:22:28,010 --> 00:22:34,610
bill that you want to have tied to<font color="#CCCCCC"> the</font>

460
00:22:32,390 --> 00:22:38,660
<font color="#CCCCCC">sty sector so that every time this field</font>

461
00:22:34,610 --> 00:22:40,189
this<font color="#E5E5E5"> this field comes up the court yield</font>

462
00:22:38,660 --> 00:22:44,720
of your choice or something else that

463
00:22:40,190 --> 00:22:47,600
<font color="#E5E5E5">you've chosen the</font><font color="#CCCCCC"> wash-up knows - I know</font>

464
00:22:44,720 --> 00:22:50,630
<font color="#CCCCCC">my sector</font><font color="#E5E5E5"> you also have the actual</font>

465
00:22:47,600 --> 00:22:54,800
structure of the protocol<font color="#CCCCCC"> you can define</font>

466
00:22:50,630 --> 00:23:01,490
<font color="#CCCCCC">your ID the size which is very important</font>

467
00:22:54,800 --> 00:23:03,889
and specify or switch that governs<font color="#E5E5E5"> being</font>

468
00:23:01,490 --> 00:23:05,240
able<font color="#E5E5E5"> to piece apart the different</font>

469
00:23:03,890 --> 00:23:08,420
messages<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we would be looking at</font>

470
00:23:05,240 --> 00:23:12,800
then lastly there<font color="#E5E5E5"> is a link here</font><font color="#CCCCCC"> to the</font>

471
00:23:08,420 --> 00:23:14,909
<font color="#CCCCCC">actual field definitions</font><font color="#E5E5E5"> that is found</font>

472
00:23:12,800 --> 00:23:18,779
in file

473
00:23:14,909 --> 00:23:21,599
proto<font color="#E5E5E5"> dot F</font><font color="#CCCCCC"> desc we the field</font>

474
00:23:18,779 --> 00:23:23,549
descriptions food our header structure

475
00:23:21,599 --> 00:23:25,859
<font color="#E5E5E5">include the different messages</font><font color="#CCCCCC"> that we</font>

476
00:23:23,549 --> 00:23:27,269
would be looking<font color="#CCCCCC"> for and it also</font>

477
00:23:25,859 --> 00:23:30,178
includes a set like I mentioned that

478
00:23:27,269 --> 00:23:32,099
switch<font color="#E5E5E5"> that the dissector you order to</font>

479
00:23:30,179 --> 00:23:34,830
be able to<font color="#E5E5E5"> identify the different</font>

480
00:23:32,099 --> 00:23:37,229
messages<font color="#CCCCCC"> that we're looking for as it</font>

481
00:23:34,830 --> 00:23:39,869
encounters them<font color="#CCCCCC"> in this case we have</font>

482
00:23:37,229 --> 00:23:41,369
makes things easy so<font color="#CCCCCC"> that when we see</font>

483
00:23:39,869 --> 00:23:44,428
our message comes<font color="#E5E5E5"> up instead of seeing</font>

484
00:23:41,369 --> 00:23:48,840
that<font color="#CCCCCC"> marek</font><font color="#E5E5E5"> identifier</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> actually see a</font>

485
00:23:44,429 --> 00:23:51,029
name<font color="#CCCCCC"> the most</font><font color="#E5E5E5"> sick of headers has to</font>

486
00:23:48,840 --> 00:23:53,369
have it<font color="#E5E5E5"> at the very least order we</font>

487
00:23:51,029 --> 00:23:55,979
talked about<font color="#E5E5E5"> how protocols can be big</font>

488
00:23:53,369 --> 00:23:58,769
<font color="#CCCCCC">endian little endian next endian we can</font>

489
00:23:55,979 --> 00:24:01,470
have we need to<font color="#CCCCCC"> have a message ID and we</font>

490
00:23:58,769 --> 00:24:08,129
need to have a<font color="#E5E5E5"> an actual</font><font color="#CCCCCC"> size associated</font>

491
00:24:01,470 --> 00:24:10,679
<font color="#E5E5E5">with the header moving on we have where</font>

492
00:24:08,129 --> 00:24:12,629
we<font color="#E5E5E5"> specify our messages as we take apart</font>

493
00:24:10,679 --> 00:24:17,989
<font color="#CCCCCC">our protocols</font><font color="#E5E5E5"> we can have different</font>

494
00:24:12,629 --> 00:24:21,149
types<font color="#E5E5E5"> of</font><font color="#CCCCCC"> messages</font><font color="#E5E5E5"> that appear as as we</font>

495
00:24:17,989 --> 00:24:24,929
encounter<font color="#E5E5E5"> new protocol new new packets</font>

496
00:24:21,149 --> 00:24:27,629
and lastly we<font color="#E5E5E5"> have this main switch</font>

497
00:24:24,929 --> 00:24:30,299
which<font color="#CCCCCC"> can be tied to each of these</font>

498
00:24:27,629 --> 00:24:34,769
messages<font color="#CCCCCC"> so that</font><font color="#E5E5E5"> our dissector knows</font>

499
00:24:30,299 --> 00:24:38,158
what to do with with the<font color="#CCCCCC"> presence</font><font color="#E5E5E5"> of</font>

500
00:24:34,769 --> 00:24:41,070
that message<font color="#E5E5E5"> and display it on the</font><font color="#CCCCCC"> on</font>

501
00:24:38,159 --> 00:24:45,610
the dissection

502
00:24:41,070 --> 00:24:53,879
let's talk about scaping escapees a

503
00:24:45,610 --> 00:24:56,340
great tool for<font color="#E5E5E5"> interacting</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the</font>

504
00:24:53,880 --> 00:24:59,559
basic interactions<font color="#E5E5E5"> that we can have with</font>

505
00:24:56,340 --> 00:25:04,658
with our protocols include being able to

506
00:24:59,559 --> 00:25:08,490
list<font color="#E5E5E5"> what's inside of our packets</font><font color="#CCCCCC"> that's</font>

507
00:25:04,659 --> 00:25:11,710
a very important tenant that<font color="#E5E5E5"> we also</font>

508
00:25:08,490 --> 00:25:14,139
going<font color="#CCCCCC"> over we can also set up</font><font color="#E5E5E5"> basic</font>

509
00:25:11,710 --> 00:25:17,289
protocol<font color="#E5E5E5"> into interactions this is very</font>

510
00:25:14,139 --> 00:25:19,529
useful for<font color="#E5E5E5"> when</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> already</font>

511
00:25:17,289 --> 00:25:22,240
exhausted all your options in terms of

512
00:25:19,529 --> 00:25:23,379
what you've captured<font color="#E5E5E5"> you can interact</font>

513
00:25:22,240 --> 00:25:25,480
with<font color="#E5E5E5"> the protocol and get it to do</font>

514
00:25:23,379 --> 00:25:27,850
<font color="#E5E5E5">something that you didn't expect</font><font color="#CCCCCC"> you can</font>

515
00:25:25,480 --> 00:25:31,950
mess with with the different fields you

516
00:25:27,850 --> 00:25:34,600
<font color="#CCCCCC">can you can trigger an error</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

517
00:25:31,950 --> 00:25:40,440
manipulate the<font color="#CCCCCC"> data and hopefully find</font>

518
00:25:34,600 --> 00:25:40,439
it so it's a<font color="#E5E5E5"> very useful tool</font><font color="#CCCCCC"> for that</font>

519
00:25:40,799 --> 00:25:53,168
<font color="#CCCCCC">below you can</font><font color="#E5E5E5"> find out you can you can</font>

520
00:25:43,659 --> 00:25:55,509
set a<font color="#E5E5E5"> way you are specifying the the</font>

521
00:25:53,169 --> 00:25:59,070
message above which includes<font color="#E5E5E5"> and I had</font>

522
00:25:55,509 --> 00:26:01,990
her a TCP header and then your your

523
00:25:59,070 --> 00:26:03,668
application layer message<font color="#E5E5E5"> in this case I</font>

524
00:26:01,990 --> 00:26:07,570
just<font color="#CCCCCC"> put HelloWorld but you could</font><font color="#E5E5E5"> best</font>

525
00:26:03,669 --> 00:26:11,409
<font color="#E5E5E5">buy a byte stream you can ask any I</font><font color="#CCCCCC"> Eve</font>

526
00:26:07,570 --> 00:26:15,450
but if you were child interact with HTTP

527
00:26:11,409 --> 00:26:15,450
you would put a get request here<font color="#CCCCCC"> etc</font>

528
00:26:15,730 --> 00:26:23,500
we can also define custom protocols with

529
00:26:19,059 --> 00:26:27,129
JP<font color="#E5E5E5"> and we can fuzz it you can define a</font>

530
00:26:23,500 --> 00:26:29,590
prom<font color="#CCCCCC"> in a custom</font><font color="#E5E5E5"> protocol header by</font>

531
00:26:27,130 --> 00:26:36,909
creating a new class<font color="#CCCCCC"> that accepts a</font>

532
00:26:29,590 --> 00:26:38,860
packet as a as an instance variable<font color="#CCCCCC"> you</font>

533
00:26:36,909 --> 00:26:40,860
can specify the name for<font color="#CCCCCC"> that protocol</font>

534
00:26:38,860 --> 00:26:43,090
<font color="#E5E5E5">and then you can describe your field</font>

535
00:26:40,860 --> 00:26:46,439
Miller<font color="#E5E5E5"> to how we describe in the</font><font color="#CCCCCC"> dye</font>

536
00:26:43,090 --> 00:26:52,408
<font color="#CCCCCC">sector</font><font color="#E5E5E5"> you can describe the specific</font>

537
00:26:46,440 --> 00:26:55,720
field types<font color="#E5E5E5"> by their their their types</font>

538
00:26:52,409 --> 00:26:57,519
in this case we have a version<font color="#E5E5E5"> field</font>

539
00:26:55,720 --> 00:26:59,440
<font color="#E5E5E5">which simply tracks a version</font><font color="#CCCCCC"> I</font>

540
00:26:57,519 --> 00:27:01,440
mentioned that comes up very often<font color="#E5E5E5"> we</font>

541
00:26:59,440 --> 00:27:05,260
have<font color="#CCCCCC"> a length and we have a checksum and</font>

542
00:27:01,440 --> 00:27:07,240
this is how you would interact<font color="#E5E5E5"> with that</font>

543
00:27:05,260 --> 00:27:09,370
custom<font color="#E5E5E5"> protocol you've just defined you</font>

544
00:27:07,240 --> 00:27:13,860
set up your IP header your TCP header or

545
00:27:09,370 --> 00:27:13,860
your UDP header specify

546
00:27:14,360 --> 00:27:20,000
and you specify<font color="#CCCCCC"> you mints for</font><font color="#E5E5E5"> that</font>

547
00:27:15,950 --> 00:27:21,470
vertical the next thing new is<font color="#CCCCCC"> fuzz it</font>

548
00:27:20,000 --> 00:27:26,049
so once we've defined a custom protocol

549
00:27:21,470 --> 00:27:33,100
<font color="#CCCCCC">we can actually</font><font color="#E5E5E5"> tell a</font><font color="#CCCCCC"> TP dump</font>

550
00:27:26,049 --> 00:27:33,100
<font color="#E5E5E5">- but this book vertical header but</font>

551
00:27:33,399 --> 00:27:38,209
messy

552
00:27:36,150 --> 00:27:38,210
<font color="#E5E5E5">you</font>

553
00:27:38,360 --> 00:27:42,290
and then<font color="#E5E5E5"> being</font><font color="#CCCCCC"> escapee to fuzz</font><font color="#E5E5E5"> it would</font>

554
00:27:41,060 --> 00:27:48,790
actually<font color="#E5E5E5"> go through the fields</font><font color="#CCCCCC"> that</font>

555
00:27:42,290 --> 00:27:53,690
we've and<font color="#CCCCCC"> I different combinations of of</font>

556
00:27:48,790 --> 00:27:56,090
<font color="#E5E5E5">characters sizes and be able to go</font>

557
00:27:53,690 --> 00:27:58,730
<font color="#E5E5E5">through and and and try to cause a crash</font>

558
00:27:56,090 --> 00:28:01,760
but<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> also useful</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> people to</font>

559
00:27:58,730 --> 00:28:07,669
trigger<font color="#E5E5E5"> new</font>

560
00:28:01,760 --> 00:28:10,190
have a<font color="#E5E5E5"> type field that we may trigger</font>

561
00:28:07,669 --> 00:28:12,470
new messages before<font color="#E5E5E5"> but once KP gets</font>

562
00:28:10,190 --> 00:28:14,559
ahold of it<font color="#E5E5E5"> it's able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> produce new</font>

563
00:28:12,470 --> 00:28:16,970
messages because<font color="#E5E5E5"> it's now sending those</font>

564
00:28:14,559 --> 00:28:21,789
those packets to<font color="#CCCCCC"> the server</font><font color="#E5E5E5"> and the</font>

565
00:28:16,970 --> 00:28:26,299
server is reacting<font color="#CCCCCC"> some other</font><font color="#E5E5E5"> useful</font>

566
00:28:21,789 --> 00:28:28,629
tips<font color="#CCCCCC"> for EP</font><font color="#E5E5E5"> you can actually reap</font><font color="#CCCCCC"> X and</font>

567
00:28:26,299 --> 00:28:31,420
you<font color="#E5E5E5"> can use</font>

568
00:28:28,630 --> 00:28:36,350
<font color="#E5E5E5">load from the packets anybody did the</font>

569
00:28:31,420 --> 00:28:39,559
<font color="#CCCCCC">sands holiday hack challenge it if you</font>

570
00:28:36,350 --> 00:28:41,240
remember in that<font color="#E5E5E5"> challenge</font><font color="#CCCCCC"> Josh</font><font color="#E5E5E5"> right</font>

571
00:28:39,559 --> 00:28:45,020
kept mentioning that you could use scape

572
00:28:41,240 --> 00:28:47,480
<font color="#CCCCCC">II</font><font color="#E5E5E5"> it header this is a little bit</font>

573
00:28:45,020 --> 00:28:50,450
copying<font color="#E5E5E5"> from them from his influence in</font>

574
00:28:47,480 --> 00:28:53,750
<font color="#E5E5E5">that case we used escapee to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

575
00:28:50,450 --> 00:28:56,360
take apart<font color="#E5E5E5"> at the NS manipulated DNS</font>

576
00:28:53,750 --> 00:29:00,770
transaction<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do the same</font><font color="#CCCCCC"> here to</font>

577
00:28:56,360 --> 00:29:02,979
reverse<font color="#E5E5E5"> engineering protocols tools that</font>

578
00:29:00,770 --> 00:29:02,980
are useful

579
00:29:05,440 --> 00:29:12,639
<font color="#CCCCCC">a peep of the header</font><font color="#E5E5E5"> and send it up to</font>

580
00:29:08,940 --> 00:29:15,940
two<font color="#CCCCCC"> different tools these are tools that</font>

581
00:29:12,639 --> 00:29:17,709
<font color="#E5E5E5">you can use in order to analyze that</font>

582
00:29:15,940 --> 00:29:21,610
data that's<font color="#E5E5E5"> coming out checksum which</font>

583
00:29:17,710 --> 00:29:24,370
<font color="#CCCCCC">computer the CRC value we have</font><font color="#E5E5E5"> something</font>

584
00:29:21,610 --> 00:29:27,699
<font color="#CCCCCC">that character debt which allows us</font><font color="#E5E5E5"> to</font>

585
00:29:24,370 --> 00:29:29,469
<font color="#E5E5E5">identify character encodings before</font>

586
00:29:27,700 --> 00:29:31,990
sometimes<font color="#CCCCCC"> you have basic step or</font>

587
00:29:29,470 --> 00:29:34,929
encoding of of protocol fields actually

588
00:29:31,990 --> 00:29:37,470
<font color="#CCCCCC">I saw video once of someone who</font>

589
00:29:34,929 --> 00:29:39,730
mentioned there were double encoding

590
00:29:37,470 --> 00:29:42,000
<font color="#CCCCCC">double basically for encoding</font><font color="#E5E5E5"> of a</font>

591
00:29:39,730 --> 00:29:44,620
particular field<font color="#E5E5E5"> so it's a useful</font><font color="#CCCCCC"> tool</font>

592
00:29:42,000 --> 00:29:48,370
<font color="#CCCCCC">and grep I didn't</font><font color="#E5E5E5"> talk about</font><font color="#CCCCCC"> in grep but</font>

593
00:29:44,620 --> 00:29:55,539
it's actually a tool<font color="#CCCCCC"> it's like TCP but</font>

594
00:29:48,370 --> 00:29:58,418
you<font color="#CCCCCC"> check</font><font color="#E5E5E5"> X based protocols that's odd I</font>

595
00:29:55,539 --> 00:30:00,240
won't<font color="#E5E5E5"> go into actually won't go into</font>

596
00:29:58,419 --> 00:30:03,700
<font color="#CCCCCC">night off at all</font><font color="#E5E5E5"> I'll just mention it</font>

597
00:30:00,240 --> 00:30:09,190
<font color="#CCCCCC">Nets table is a tool that allows</font><font color="#E5E5E5"> you to</font>

598
00:30:03,700 --> 00:30:11,049
<font color="#CCCCCC">set up a</font><font color="#E5E5E5"> semi automatic reversing of</font>

599
00:30:09,190 --> 00:30:12,940
protocols and it can do all the<font color="#E5E5E5"> things</font>

600
00:30:11,049 --> 00:30:14,980
that<font color="#E5E5E5"> I talked about that we would be</font>

601
00:30:12,940 --> 00:30:17,320
doing manually<font color="#CCCCCC"> it is very good</font><font color="#E5E5E5"> because</font>

602
00:30:14,980 --> 00:30:21,490
<font color="#CCCCCC">it</font><font color="#E5E5E5"> allows</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to pick apart low-hanging</font>

603
00:30:17,320 --> 00:30:25,840
fruit<font color="#E5E5E5"> and be able</font><font color="#CCCCCC"> to go into</font><font color="#E5E5E5"> the areas</font>

604
00:30:21,490 --> 00:30:27,610
<font color="#CCCCCC">that might</font><font color="#E5E5E5"> be more interesting</font><font color="#CCCCCC"> it in</font>

605
00:30:25,840 --> 00:30:30,730
<font color="#E5E5E5">first protocol structure and flow it can</font>

606
00:30:27,610 --> 00:30:32,649
simulate<font color="#E5E5E5"> traffic to trigger client</font>

607
00:30:30,730 --> 00:30:36,490
server responses<font color="#E5E5E5"> and it is also</font>

608
00:30:32,649 --> 00:30:38,850
extensible through the Python net stop

609
00:30:36,490 --> 00:30:38,850
library

610
00:30:46,750 --> 00:30:52,750
and let's talk<font color="#E5E5E5"> about the reverse</font>

611
00:30:48,010 --> 00:30:54,580
engineering<font color="#CCCCCC"> process and based on all the</font>

612
00:30:52,750 --> 00:30:57,159
information<font color="#CCCCCC"> that we've talked about</font><font color="#E5E5E5"> we</font>

613
00:30:54,580 --> 00:30:58,960
have the protocol structure that and the

614
00:30:57,159 --> 00:31:00,700
protocol flows we have the tools that<font color="#E5E5E5"> we</font>

615
00:30:58,960 --> 00:31:02,260
can<font color="#CCCCCC"> use we can actually combine</font><font color="#E5E5E5"> all</font>

616
00:31:00,700 --> 00:31:05,350
these<font color="#CCCCCC"> things to do reverse engineering</font>

617
00:31:02,260 --> 00:31:06,610
<font color="#CCCCCC">and the first place we want</font><font color="#E5E5E5"> to start is</font>

618
00:31:05,350 --> 00:31:08,379
making sure<font color="#CCCCCC"> that we read everything</font>

619
00:31:06,610 --> 00:31:11,199
that's<font color="#CCCCCC"> available about</font><font color="#E5E5E5"> that protocol</font>

620
00:31:08,380 --> 00:31:13,240
<font color="#E5E5E5">that we want to reverse engineer if it's</font>

621
00:31:11,200 --> 00:31:15,520
an administrative protocol you can<font color="#CCCCCC"> be</font>

622
00:31:13,240 --> 00:31:17,620
sure<font color="#CCCCCC"> that it's going to have it's</font><font color="#E5E5E5"> going</font>

623
00:31:15,520 --> 00:31:19,150
to be a reliable<font color="#E5E5E5"> protocol it's probably</font>

624
00:31:17,620 --> 00:31:21,520
<font color="#E5E5E5">going to have some encryption</font><font color="#CCCCCC"> those are</font>

625
00:31:19,150 --> 00:31:24,159
<font color="#E5E5E5">things that that</font><font color="#CCCCCC"> are important</font><font color="#E5E5E5"> to to</font>

626
00:31:21,520 --> 00:31:26,620
note<font color="#CCCCCC"> so that when we do actually</font><font color="#E5E5E5"> reverse</font>

627
00:31:24,159 --> 00:31:29,200
engineer we can we can anticipate those

628
00:31:26,620 --> 00:31:31,209
things<font color="#E5E5E5"> capture as much data as</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> I</font>

629
00:31:29,200 --> 00:31:34,929
mentioned having<font color="#E5E5E5"> a full packet capture</font>

630
00:31:31,210 --> 00:31:37,330
box<font color="#CCCCCC"> you can just run one around</font><font color="#E5E5E5"> the</font>

631
00:31:34,929 --> 00:31:39,520
clock to see if if you capture unique

632
00:31:37,330 --> 00:31:41,949
instances<font color="#CCCCCC"> make sure you have different</font>

633
00:31:39,520 --> 00:31:43,299
instances<font color="#E5E5E5"> of TCP dump collecting new and</font>

634
00:31:41,950 --> 00:31:47,500
interesting<font color="#E5E5E5"> things that you haven't seen</font>

635
00:31:43,299 --> 00:31:49,929
before<font color="#CCCCCC"> identify the</font><font color="#E5E5E5"> protocol structure</font>

636
00:31:47,500 --> 00:31:52,360
<font color="#E5E5E5">we talked about how protocols are</font>

637
00:31:49,929 --> 00:31:55,000
structured in a particular way<font color="#CCCCCC"> you</font>

638
00:31:52,360 --> 00:31:58,539
should look for those those<font color="#E5E5E5"> that</font>

639
00:31:55,000 --> 00:32:01,360
<font color="#CCCCCC">Giveaways things like being able to</font>

640
00:31:58,539 --> 00:32:04,270
identify<font color="#E5E5E5"> the delimiters being able to</font>

641
00:32:01,360 --> 00:32:06,959
identify<font color="#E5E5E5"> endianness being able to</font>

642
00:32:04,270 --> 00:32:10,929
identify<font color="#E5E5E5"> encoding things like that</font><font color="#CCCCCC"> are</font>

643
00:32:06,960 --> 00:32:12,970
can be<font color="#CCCCCC"> easily found and and and</font><font color="#E5E5E5"> together</font>

644
00:32:10,929 --> 00:32:18,730
so that we can<font color="#CCCCCC"> have a overall view of</font>

645
00:32:12,970 --> 00:32:21,490
<font color="#E5E5E5">how our protocol works when when working</font>

646
00:32:18,730 --> 00:32:23,890
with text<font color="#CCCCCC"> based protocols</font><font color="#E5E5E5"> just grab all</font>

647
00:32:21,490 --> 00:32:24,970
the text you<font color="#E5E5E5"> can and try</font><font color="#CCCCCC"> to understand</font>

648
00:32:23,890 --> 00:32:28,990
how<font color="#CCCCCC"> it works</font>

649
00:32:24,970 --> 00:32:32,100
protocol designers we<font color="#E5E5E5"> re implemented at</font>

650
00:32:28,990 --> 00:32:38,760
are common among other implementations

651
00:32:32,100 --> 00:32:42,539
so in the case of<font color="#E5E5E5"> HTTP you have your</font>

652
00:32:38,760 --> 00:32:42,539
value<font color="#E5E5E5"> :</font>

653
00:32:45,770 --> 00:32:53,629
this is painful

654
00:32:48,590 --> 00:32:55,129
value :<font color="#E5E5E5"> value the little pairs</font><font color="#CCCCCC"> you may</font>

655
00:32:53,630 --> 00:32:56,419
want to look<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> if you have a</font>

656
00:32:55,130 --> 00:32:58,279
<font color="#CCCCCC">text-based</font><font color="#E5E5E5"> protocol there should some</font>

657
00:32:56,419 --> 00:33:03,230
kind of delimiter<font color="#CCCCCC"> that allows us to be</font>

658
00:32:58,279 --> 00:33:06,860
able<font color="#CCCCCC"> to identify</font><font color="#E5E5E5"> that what that header</font>

659
00:33:03,230 --> 00:33:09,549
is and what<font color="#E5E5E5"> that field is you should</font>

660
00:33:06,860 --> 00:33:13,129
<font color="#E5E5E5">look for protocol flow and attempt to</font>

661
00:33:09,549 --> 00:33:17,120
corrupt payloads<font color="#E5E5E5"> to see how the protocol</font>

662
00:33:13,130 --> 00:33:21,409
reacts is it reliable<font color="#CCCCCC"> how does he behave</font>

663
00:33:17,120 --> 00:33:22,969
when the the<font color="#E5E5E5"> be most um how does it</font>

664
00:33:21,409 --> 00:33:25,820
behave when when there's an<font color="#E5E5E5"> error</font>

665
00:33:22,970 --> 00:33:29,330
present<font color="#E5E5E5"> you can fuzz protocol headers as</font>

666
00:33:25,820 --> 00:33:33,020
I mentioned with<font color="#E5E5E5"> with escapee</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you</font>

667
00:33:29,330 --> 00:33:36,379
can also use to mention<font color="#E5E5E5"> which is Sully</font>

668
00:33:33,020 --> 00:33:38,690
<font color="#CCCCCC">and then lastly you</font><font color="#E5E5E5"> can create you</font>

669
00:33:36,380 --> 00:33:40,909
should<font color="#E5E5E5"> create a field diagram as you go</font>

670
00:33:38,690 --> 00:33:43,039
along<font color="#CCCCCC"> not only should you have a</font>

671
00:33:40,909 --> 00:33:44,809
dissector but you should create a field

672
00:33:43,039 --> 00:33:46,340
that a lot<font color="#CCCCCC"> you to reference in the</font>

673
00:33:44,809 --> 00:33:48,678
<font color="#CCCCCC">future</font><font color="#E5E5E5"> when you come back to this and</font>

674
00:33:46,340 --> 00:33:50,928
then<font color="#CCCCCC"> you should</font><font color="#E5E5E5"> also have a field</font>

675
00:33:48,679 --> 00:33:55,039
diagram<font color="#E5E5E5"> a flow diagram that shows how</font>

676
00:33:50,929 --> 00:34:01,090
the work as as you identify different

677
00:33:55,039 --> 00:34:03,850
behaviors<font color="#CCCCCC"> Sully</font><font color="#E5E5E5"> is a is a python-based</font>

678
00:34:01,090 --> 00:34:06,709
<font color="#E5E5E5">generation base</font><font color="#CCCCCC"> fuzzer</font>

679
00:34:03,850 --> 00:34:12,730
<font color="#E5E5E5">what that means is that you have to</font>

680
00:34:06,710 --> 00:34:14,330
<font color="#E5E5E5">define AIDS or call then Sully will</font><font color="#CCCCCC"> then</font>

681
00:34:12,730 --> 00:34:19,330
<font color="#CCCCCC">you need care</font>

682
00:34:14,330 --> 00:34:23,569
<font color="#CCCCCC">- manipulations that to</font><font color="#E5E5E5"> those different</font>

683
00:34:19,330 --> 00:34:26,210
fields<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you've defined</font><font color="#CCCCCC"> it's</font>

684
00:34:23,570 --> 00:34:28,760
which protocol<font color="#E5E5E5"> grammar so you can work</font>

685
00:34:26,210 --> 00:34:31,460
<font color="#E5E5E5">with binary</font><font color="#CCCCCC"> based protocols as well as</font>

686
00:34:28,760 --> 00:34:32,929
text based protocols<font color="#E5E5E5"> it's it has crash</font>

687
00:34:31,460 --> 00:34:35,389
detection so that once you're running

688
00:34:32,929 --> 00:34:37,879
your service you<font color="#E5E5E5"> can actually detect if</font>

689
00:34:35,389 --> 00:34:39,409
something's happened and and restart

690
00:34:37,879 --> 00:34:44,949
<font color="#E5E5E5">that service then it has testing</font>

691
00:34:39,409 --> 00:34:48,220
<font color="#E5E5E5">management</font><font color="#CCCCCC"> like show you how to actually</font>

692
00:34:44,949 --> 00:34:48,219
go<font color="#CCCCCC"> over</font>

693
00:34:50,409 --> 00:34:55,990
how to go over a a<font color="#CCCCCC"> sulli</font><font color="#E5E5E5"> grammar</font>

694
00:35:24,980 --> 00:35:30,980
okay I guess I can't all right<font color="#E5E5E5"> so let's</font>

695
00:35:29,270 --> 00:35:33,950
just<font color="#E5E5E5"> talk about how</font><font color="#CCCCCC"> to get started with</font>

696
00:35:30,980 --> 00:35:36,800
protocol<font color="#E5E5E5"> fuzzing protocol reverse</font>

697
00:35:33,950 --> 00:35:39,140
engineering<font color="#CCCCCC"> you want to build a lab you</font>

698
00:35:36,800 --> 00:35:42,320
<font color="#E5E5E5">want to be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> base where</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

699
00:35:39,140 --> 00:35:44,379
capture<font color="#CCCCCC"> data begin with</font><font color="#E5E5E5"> protocols that</font>

700
00:35:42,320 --> 00:35:47,740
<font color="#E5E5E5">you have to have well documents</font>

701
00:35:44,380 --> 00:35:51,820
<font color="#CCCCCC">well-documented specifications</font><font color="#E5E5E5"> you know</font>

702
00:35:47,740 --> 00:35:53,390
<font color="#E5E5E5">use those and and try to analyze</font>

703
00:35:51,820 --> 00:35:55,220
communications<font color="#E5E5E5"> for those protocols</font>

704
00:35:53,390 --> 00:35:57,920
<font color="#CCCCCC">without the specification and</font><font color="#E5E5E5"> try to</font>

705
00:35:55,220 --> 00:36:00,049
recreate the specification<font color="#E5E5E5"> manually</font>

706
00:35:57,920 --> 00:36:01,670
focus on<font color="#E5E5E5"> text based protocols because</font>

707
00:36:00,050 --> 00:36:03,230
they're a<font color="#CCCCCC"> little bit simpler</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> get</font>

708
00:36:01,670 --> 00:36:06,050
started with then you can<font color="#E5E5E5"> move on to</font>

709
00:36:03,230 --> 00:36:08,510
<font color="#E5E5E5">binary based protocols</font><font color="#CCCCCC"> once you're</font>

710
00:36:06,050 --> 00:36:11,480
familiar with the<font color="#CCCCCC"> process I get again</font>

711
00:36:08,510 --> 00:36:13,820
move on to binary<font color="#CCCCCC"> look for new targets</font>

712
00:36:11,480 --> 00:36:16,369
<font color="#E5E5E5">to reverse in your home or corporate</font>

713
00:36:13,820 --> 00:36:17,829
network if you<font color="#E5E5E5"> don't own the target</font>

714
00:36:16,369 --> 00:36:20,320
<font color="#E5E5E5">network device ask for permission and</font>

715
00:36:17,829 --> 00:36:24,950
then<font color="#E5E5E5"> aim at</font>

716
00:36:20,320 --> 00:36:29,510
malware<font color="#E5E5E5"> protocol</font><font color="#CCCCCC"> reverse which is very</font>

717
00:36:24,950 --> 00:36:33,379
hot very there's a lot of new instances

718
00:36:29,510 --> 00:36:35,920
<font color="#CCCCCC">approach with that said we can move on</font>

719
00:36:33,380 --> 00:36:35,920
to questions

720
00:36:53,700 --> 00:36:58,689
Wireshark<font color="#CCCCCC"> what is actually where</font><font color="#E5E5E5"> you</font>

721
00:36:57,580 --> 00:37:01,210
would<font color="#E5E5E5"> spend a lot</font><font color="#CCCCCC"> of your time business</font>

722
00:36:58,690 --> 00:37:03,910
a lot of the person earring is visual<font color="#CCCCCC"> so</font>

723
00:37:01,210 --> 00:37:07,750
<font color="#CCCCCC">what you want</font><font color="#E5E5E5"> to do is be able to load</font>

724
00:37:03,910 --> 00:37:12,879
up your Wireshark<font color="#CCCCCC"> and</font><font color="#E5E5E5"> look for</font><font color="#CCCCCC"> patterns</font>

725
00:37:07,750 --> 00:37:23,859
and try to create dissectors as you go

726
00:37:12,880 --> 00:37:26,470
<font color="#CCCCCC">along as you're discovering new things I</font>

727
00:37:23,859 --> 00:37:30,640
mentioned<font color="#E5E5E5"> that you there are resources</font>

728
00:37:26,470 --> 00:37:33,160
online that cover some details<font color="#CCCCCC"> about how</font>

729
00:37:30,640 --> 00:37:38,098
to do this or academic papers there<font color="#E5E5E5"> are</font>

730
00:37:33,160 --> 00:37:38,098
also I mentioned<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can use</font>

731
00:37:39,060 --> 00:37:48,490
predefined protocols protocols<font color="#E5E5E5"> protocol</font>

732
00:37:41,830 --> 00:37:52,720
specifications<font color="#CCCCCC"> to get your wet what do</font>

733
00:37:48,490 --> 00:37:55,060
you mean no I<font color="#E5E5E5"> mean you know you can you</font>

734
00:37:52,720 --> 00:37:58,109
<font color="#CCCCCC">can look</font><font color="#E5E5E5"> at a protocol sir on with an</font>

735
00:37:55,060 --> 00:38:00,400
RFC<font color="#E5E5E5"> just look at look at those protocols</font>

736
00:37:58,109 --> 00:38:02,890
<font color="#CCCCCC">you</font><font color="#E5E5E5"> have the protocol specific</font>

737
00:38:00,400 --> 00:38:04,390
specification as a guide to<font color="#CCCCCC"> help you as</font>

738
00:38:02,890 --> 00:38:06,400
you are<font color="#CCCCCC"> going along dissecting</font><font color="#E5E5E5"> these</font>

739
00:38:04,390 --> 00:38:11,950
things things<font color="#E5E5E5"> like the RTP protocol</font>

740
00:38:06,400 --> 00:38:13,810
which is<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> a binary based you</font><font color="#E5E5E5"> can</font>

741
00:38:11,950 --> 00:38:17,169
go and look<font color="#E5E5E5"> at the different fields and</font>

742
00:38:13,810 --> 00:38:19,859
as you go along<font color="#CCCCCC"> take</font><font color="#E5E5E5"> the part right</font>

743
00:38:17,170 --> 00:38:19,859
correct

744
00:38:34,349 --> 00:38:48,990
or<font color="#CCCCCC"> the</font><font color="#E5E5E5"> cryptic so you can use you can</font>

745
00:38:41,770 --> 00:38:48,990
<font color="#E5E5E5">use a tool like search you can</font>

746
00:38:49,320 --> 00:38:56,550
argue to analyse behaviors and and

747
00:38:53,120 --> 00:38:58,259
<font color="#CCCCCC">attract</font><font color="#E5E5E5"> how that communication is</font>

748
00:38:56,550 --> 00:39:01,170
happening<font color="#E5E5E5"> and then you can extend</font><font color="#CCCCCC"> Nets</font>

749
00:38:58,260 --> 00:39:06,290
out and<font color="#CCCCCC"> use</font><font color="#E5E5E5"> its Python library to</font>

750
00:39:01,170 --> 00:39:06,290
specify the routine<font color="#CCCCCC"> let happen</font>

751
00:39:19,970 --> 00:39:28,790
so yeah you can<font color="#CCCCCC"> you can if if it</font><font color="#E5E5E5"> is if</font>

752
00:39:24,110 --> 00:39:30,260
you can<font color="#E5E5E5"> have if you have a if it's a if</font>

753
00:39:28,790 --> 00:39:32,720
you're relying<font color="#E5E5E5"> on a protocol</font>

754
00:39:30,260 --> 00:39:34,430
specification that<font color="#E5E5E5"> excuse me</font><font color="#CCCCCC"> you're</font>

755
00:39:32,720 --> 00:39:36,620
relying on an encryption standard<font color="#E5E5E5"> that</font>

756
00:39:34,430 --> 00:39:38,750
there is a Python function for or a Lua

757
00:39:36,620 --> 00:39:42,830
function for you can<font color="#E5E5E5"> actually use</font><font color="#CCCCCC"> that</font>

758
00:39:38,750 --> 00:39:45,890
through the<font color="#CCCCCC"> Lua dissector library</font><font color="#E5E5E5"> so you</font>

759
00:39:42,830 --> 00:39:48,620
<font color="#E5E5E5">can create your your your dissector and</font>

760
00:39:45,890 --> 00:39:50,089
then specify or that the specific fields

761
00:39:48,620 --> 00:39:51,859
<font color="#E5E5E5">where the encryption happens you can</font>

762
00:39:50,090 --> 00:40:03,530
actually<font color="#E5E5E5"> specify how that decryption</font>

763
00:39:51,860 --> 00:40:05,330
happens and take it apart<font color="#CCCCCC"> that way so</font>

764
00:40:03,530 --> 00:40:07,640
<font color="#E5E5E5">yeah it's the same</font><font color="#CCCCCC"> thing I mean we're</font>

765
00:40:05,330 --> 00:40:09,350
trying<font color="#CCCCCC"> to achieve code coverage</font><font color="#E5E5E5"> the the</font>

766
00:40:07,640 --> 00:40:11,240
big limitation though with custom

767
00:40:09,350 --> 00:40:13,640
protocols is that if you do not know

768
00:40:11,240 --> 00:40:14,720
what the<font color="#E5E5E5"> protocol specification is you</font>

769
00:40:13,640 --> 00:40:17,180
can't<font color="#E5E5E5"> configure your father</font>

770
00:40:14,720 --> 00:40:19,399
so by reverse engineering<font color="#CCCCCC"> the protocol</font>

771
00:40:17,180 --> 00:40:21,740
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can figure out what that</font>

772
00:40:19,400 --> 00:40:22,970
specification might be and configure

773
00:40:21,740 --> 00:40:25,959
<font color="#CCCCCC">your fuzzers so that it can achieve</font>

774
00:40:22,970 --> 00:40:25,959
better<font color="#E5E5E5"> code coverage</font>

775
00:40:34,819 --> 00:40:40,729
so I did<font color="#CCCCCC"> one</font><font color="#E5E5E5"> with a few at home the the</font>

776
00:40:38,390 --> 00:40:45,529
<font color="#E5E5E5">printer communication protocol that I</font>

777
00:40:40,729 --> 00:40:47,269
mentioned<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> really just</font><font color="#CCCCCC"> to I the</font>

778
00:40:45,529 --> 00:40:50,329
the printer configuration protocol<font color="#CCCCCC"> it</font>

779
00:40:47,269 --> 00:40:53,019
<font color="#E5E5E5">just allows updates and changes to to</font>

780
00:40:50,329 --> 00:40:56,479
how the printer behaves<font color="#CCCCCC"> I was able to</font>

781
00:40:53,019 --> 00:41:00,678
<font color="#E5E5E5">analyze different communications going</font>

782
00:40:56,479 --> 00:41:02,629
<font color="#E5E5E5">back and forth I was able code updates</font>

783
00:41:00,679 --> 00:41:03,619
you<font color="#CCCCCC"> can actually</font><font color="#E5E5E5"> upload</font><font color="#CCCCCC"> a binary</font><font color="#E5E5E5"> things</font>

784
00:41:02,630 --> 00:41:05,719
like that

785
00:41:03,619 --> 00:41:08,059
so with<font color="#CCCCCC"> text-based protocols that's a</font>

786
00:41:05,719 --> 00:41:10,729
lot easier<font color="#E5E5E5"> the challenging ones are</font>

787
00:41:08,059 --> 00:41:13,819
usually binary<font color="#E5E5E5"> based protocols what I am</font>

788
00:41:10,729 --> 00:41:16,519
<font color="#E5E5E5">doing</font><font color="#CCCCCC"> to suspect myself up more is going</font>

789
00:41:13,819 --> 00:41:20,150
through like I said<font color="#E5E5E5"> going through RFC's</font>

790
00:41:16,519 --> 00:41:22,339
and and using that<font color="#CCCCCC"> to</font><font color="#E5E5E5"> as a guide to</font><font color="#CCCCCC"> take</font>

791
00:41:20,150 --> 00:41:25,459
apart<font color="#E5E5E5"> those protocols and then be</font><font color="#CCCCCC"> able</font>

792
00:41:22,339 --> 00:41:40,729
<font color="#E5E5E5">to infer on other binary</font><font color="#CCCCCC"> based protocols</font>

793
00:41:25,459 --> 00:41:42,879
that I do not know right<font color="#E5E5E5"> any other</font>

794
00:41:40,729 --> 00:41:42,879
<font color="#CCCCCC">questions</font>

795
00:41:42,960 --> 00:41:44,990
Oh

796
00:41:46,240 --> 00:41:49,799
<font color="#E5E5E5">hmm thank you for coming</font>

