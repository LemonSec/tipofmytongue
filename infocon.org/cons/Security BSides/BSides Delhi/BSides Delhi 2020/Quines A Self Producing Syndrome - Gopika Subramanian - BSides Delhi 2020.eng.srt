1
00:00:04,130 --> 00:00:07,388
[Music]

2
00:00:13,679 --> 00:00:18,400
yes very well thank you very well and

3
00:00:16,079 --> 00:00:20,000
uh where are you calling in from i'm

4
00:00:18,400 --> 00:00:22,959
from india here lastly

5
00:00:20,000 --> 00:00:23,920
kerala okay excellent excellent so

6
00:00:22,960 --> 00:00:26,480
you're talking about is it

7
00:00:23,920 --> 00:00:27,119
quines or queens coins yeah it's okay

8
00:00:26,480 --> 00:00:30,960
and it's

9
00:00:27,119 --> 00:00:30,960
sql injection right i know much

10
00:00:31,039 --> 00:00:34,559
there we go well i mean sql injection

11
00:00:32,880 --> 00:00:35,040
has been around for about 15 years right

12
00:00:34,559 --> 00:00:38,800
so

13
00:00:35,040 --> 00:00:39,600
yeah yeah it's in the os top 10 forever

14
00:00:38,800 --> 00:00:44,078
so

15
00:00:39,600 --> 00:00:46,239
um okay so um

16
00:00:44,079 --> 00:00:48,239
please uh get your presentation uh up

17
00:00:46,239 --> 00:00:49,599
and ready in the meantime can i just

18
00:00:48,239 --> 00:00:51,440
remind everybody

19
00:00:49,600 --> 00:00:52,719
the left uh sorry the left of their

20
00:00:51,440 --> 00:00:54,718
screen now that way

21
00:00:52,719 --> 00:00:55,840
the left of their screen i'm gonna

22
00:00:54,719 --> 00:00:59,199
rephrase that again

23
00:00:55,840 --> 00:01:01,520
the right of your screen is where the

24
00:00:59,199 --> 00:01:02,719
comments are and where you can place

25
00:01:01,520 --> 00:01:04,400
your questions

26
00:01:02,719 --> 00:01:06,080
if you have any questions you'd like to

27
00:01:04,400 --> 00:01:08,400
discuss later on

28
00:01:06,080 --> 00:01:10,080
uh please jump on to the slack channel

29
00:01:08,400 --> 00:01:12,880
where i hope you'll be able to

30
00:01:10,080 --> 00:01:14,158
um jump into the chat yeah sure yeah

31
00:01:12,880 --> 00:01:16,720
fantastic

32
00:01:14,159 --> 00:01:17,360
so is my screen being shared now yes it

33
00:01:16,720 --> 00:01:20,400
has

34
00:01:17,360 --> 00:01:21,759
uh yeah you are ready to go take it away

35
00:01:20,400 --> 00:01:25,280
uh don't forget

36
00:01:21,759 --> 00:01:27,040
okay so hello ron i hope everyone is

37
00:01:25,280 --> 00:01:29,360
sick and safe and secure

38
00:01:27,040 --> 00:01:31,600
uh i'm gonna and today i'll be doing a

39
00:01:29,360 --> 00:01:32,880
presentation on coins and quiet sql

40
00:01:31,600 --> 00:01:35,280
injections

41
00:01:32,880 --> 00:01:37,360
so i think the topic finds a

42
00:01:35,280 --> 00:01:37,680
self-producing syndrome itself is making

43
00:01:37,360 --> 00:01:39,920
it

44
00:01:37,680 --> 00:01:42,000
pretty self-explanatory but again let's

45
00:01:39,920 --> 00:01:44,240
see

46
00:01:42,000 --> 00:01:45,759
a little bit about myself i'm bachelor

47
00:01:44,240 --> 00:01:48,158
and technology student at

48
00:01:45,759 --> 00:01:50,720
amrita university amrita puri and i'm an

49
00:01:48,159 --> 00:01:53,600
avid ctf player of team bios which is

50
00:01:50,720 --> 00:01:55,439
the number one ctf team of india and

51
00:01:53,600 --> 00:01:56,079
also the member of team shakti which is

52
00:01:55,439 --> 00:01:59,199
one of the

53
00:01:56,079 --> 00:02:01,199
three women only ctf team in the world

54
00:01:59,200 --> 00:02:02,399
i focus on web exploitation and web

55
00:02:01,200 --> 00:02:04,960
security

56
00:02:02,399 --> 00:02:07,119
we are also the hosts of shakti city

57
00:02:04,960 --> 00:02:09,598
which is an upcoming ctf for women and

58
00:02:07,119 --> 00:02:12,879
various other cool ctfs

59
00:02:09,598 --> 00:02:15,040
okay so as i mentioned our

60
00:02:12,879 --> 00:02:18,239
team is ranked number one ctf team in

61
00:02:15,040 --> 00:02:19,040
india which started in 2008 by our

62
00:02:18,239 --> 00:02:22,160
mentor

63
00:02:19,040 --> 00:02:24,400
vipin pavitran sir we take upon

64
00:02:22,160 --> 00:02:26,720
security researches vulnerabilities and

65
00:02:24,400 --> 00:02:29,360
its mitigations and so

66
00:02:26,720 --> 00:02:29,920
we are the host of in ctf international

67
00:02:29,360 --> 00:02:32,800
which

68
00:02:29,920 --> 00:02:34,879
is pretty popular in ctf national which

69
00:02:32,800 --> 00:02:37,519
is like the national level ctf

70
00:02:34,879 --> 00:02:38,160
for college students then it's like the

71
00:02:37,519 --> 00:02:41,040
first

72
00:02:38,160 --> 00:02:41,680
one in india and institute of junior

73
00:02:41,040 --> 00:02:43,440
which is

74
00:02:41,680 --> 00:02:45,599
the national level city for school

75
00:02:43,440 --> 00:02:48,160
students

76
00:02:45,599 --> 00:02:49,119
okay a little bit about team shakti team

77
00:02:48,160 --> 00:02:51,720
shakti is a

78
00:02:49,120 --> 00:02:53,200
only ctf team we started our team in

79
00:02:51,720 --> 00:02:56,319
2018

80
00:02:53,200 --> 00:02:58,000
we conduct work workshops and see other

81
00:02:56,319 --> 00:02:59,839
programs to bring more women into this

82
00:02:58,000 --> 00:03:02,159
field of security

83
00:02:59,840 --> 00:03:03,440
yeah as i said we have an upcoming ctf

84
00:03:02,159 --> 00:03:06,879
exclusively for women

85
00:03:03,440 --> 00:03:08,879
cool set of challenges okay

86
00:03:06,879 --> 00:03:10,159
so let's look into the agenda of today's

87
00:03:08,879 --> 00:03:13,040
talk so

88
00:03:10,159 --> 00:03:14,959
starting off personally i feel like i

89
00:03:13,040 --> 00:03:16,640
prefer more examples and demonstrations

90
00:03:14,959 --> 00:03:19,280
than theories or definitions

91
00:03:16,640 --> 00:03:21,119
to understand the concept and i'm gonna

92
00:03:19,280 --> 00:03:22,480
make this beginner friendly as much as

93
00:03:21,120 --> 00:03:25,120
possible

94
00:03:22,480 --> 00:03:26,798
so i'll start from the basics and

95
00:03:25,120 --> 00:03:28,879
increase the level

96
00:03:26,799 --> 00:03:30,879
okay so i'll begin with a briefing on

97
00:03:28,879 --> 00:03:32,399
sql queries for those who are new to it

98
00:03:30,879 --> 00:03:34,879
i mean yeah

99
00:03:32,400 --> 00:03:35,920
i'll brush up on the syntax and how the

100
00:03:34,879 --> 00:03:38,480
queries are used

101
00:03:35,920 --> 00:03:40,238
to manipulate the database add delete

102
00:03:38,480 --> 00:03:43,119
change and so on

103
00:03:40,239 --> 00:03:44,080
um then i'll give a quick explanation on

104
00:03:43,120 --> 00:03:45,840
sql injection

105
00:03:44,080 --> 00:03:48,239
since without the basic concept it's

106
00:03:45,840 --> 00:03:50,400
going to be really difficult for me to

107
00:03:48,239 --> 00:03:52,080
explain what i intend to it just for my

108
00:03:50,400 --> 00:03:54,480
satisfaction

109
00:03:52,080 --> 00:03:55,120
i'll explain a bit on what sql injection

110
00:03:54,480 --> 00:03:58,079
is like

111
00:03:55,120 --> 00:03:59,040
how it happens why it happens when and

112
00:03:58,080 --> 00:04:00,879
so on

113
00:03:59,040 --> 00:04:02,079
and then what are the types of sql

114
00:04:00,879 --> 00:04:05,280
injections we

115
00:04:02,080 --> 00:04:07,840
will check a few examples for clarity

116
00:04:05,280 --> 00:04:09,920
then we look at a few prevention methods

117
00:04:07,840 --> 00:04:13,120
and also uh yeah the cool thing

118
00:04:09,920 --> 00:04:15,599
we can see like check a bit on the

119
00:04:13,120 --> 00:04:17,519
bypass of web application firewalls with

120
00:04:15,599 --> 00:04:19,680
sql injections

121
00:04:17,519 --> 00:04:21,440
okay so for those who already know this

122
00:04:19,680 --> 00:04:22,800
hold on patiently because i'll be taking

123
00:04:21,440 --> 00:04:25,520
a short sqli

124
00:04:22,800 --> 00:04:26,240
101 before getting into coins i want to

125
00:04:25,520 --> 00:04:27,919
make sure

126
00:04:26,240 --> 00:04:29,680
things are presented clearly to each and

127
00:04:27,919 --> 00:04:32,240
every audience

128
00:04:29,680 --> 00:04:34,000
okay so next we'll get into coins

129
00:04:32,240 --> 00:04:36,720
practically what how when why

130
00:04:34,000 --> 00:04:37,919
and that sort of stuff what is the whole

131
00:04:36,720 --> 00:04:40,720
purpose of coin like

132
00:04:37,919 --> 00:04:42,560
uh how it is interesting so it's like

133
00:04:40,720 --> 00:04:45,040
something about coin

134
00:04:42,560 --> 00:04:46,639
it's what friedman said it's like coins

135
00:04:45,040 --> 00:04:48,240
are practically something that popped

136
00:04:46,639 --> 00:04:50,639
out of biology

137
00:04:48,240 --> 00:04:51,440
the whole concept so unless and until

138
00:04:50,639 --> 00:04:53,840
you look at it

139
00:04:51,440 --> 00:04:56,080
in a curious perspective it's actually

140
00:04:53,840 --> 00:04:59,198
really really interesting and exciting

141
00:04:56,080 --> 00:05:01,440
but it can feel very useless if not

142
00:04:59,199 --> 00:05:04,240
understood properly

143
00:05:01,440 --> 00:05:05,039
okay i'm being brutally frank here in

144
00:05:04,240 --> 00:05:06,800
the beginning

145
00:05:05,039 --> 00:05:08,320
yeah in the beginning i was like what's

146
00:05:06,800 --> 00:05:09,680
going on here like what even is the

147
00:05:08,320 --> 00:05:12,960
point of it but

148
00:05:09,680 --> 00:05:15,840
yeah it's pretty fun okay so we will

149
00:05:12,960 --> 00:05:16,799
look into the uses and a few examples on

150
00:05:15,840 --> 00:05:19,599
how it works

151
00:05:16,800 --> 00:05:20,080
and then talk about injections like in

152
00:05:19,600 --> 00:05:22,080
coin

153
00:05:20,080 --> 00:05:24,000
called an endurance this is not a

154
00:05:22,080 --> 00:05:27,520
squinosphere injection but a method

155
00:05:24,000 --> 00:05:29,600
of injecting in coins finally we will

156
00:05:27,520 --> 00:05:32,159
talk about coin sql injections

157
00:05:29,600 --> 00:05:33,440
it's pretty neat and fun again what

158
00:05:32,160 --> 00:05:35,759
where how and all

159
00:05:33,440 --> 00:05:37,280
then a demonstration payload i'll break

160
00:05:35,759 --> 00:05:39,840
it down into small small pieces where

161
00:05:37,280 --> 00:05:42,638
they it's easier to digest

162
00:05:39,840 --> 00:05:44,880
okay we will yeah we'll also discuss on

163
00:05:42,639 --> 00:05:46,400
the impact severity of this attack how

164
00:05:44,880 --> 00:05:48,560
it can be mitigated because

165
00:05:46,400 --> 00:05:50,960
that's an important thing and check a

166
00:05:48,560 --> 00:05:53,919
demonstration of coin sql injection in

167
00:05:50,960 --> 00:05:55,758
a weak authentication check so the whole

168
00:05:53,919 --> 00:05:57,280
prevention part can be understood from

169
00:05:55,759 --> 00:05:59,039
the vulnerable check the vulnerable

170
00:05:57,280 --> 00:06:02,400
authentication check we're

171
00:05:59,039 --> 00:06:02,400
seeing in the demonstration itself

172
00:06:02,960 --> 00:06:08,479
okay so starting off sql is

173
00:06:06,240 --> 00:06:09,840
a domain specific language it's like

174
00:06:08,479 --> 00:06:11,599
used in programming

175
00:06:09,840 --> 00:06:13,359
and it's basically designed for managing

176
00:06:11,600 --> 00:06:15,520
data held in any sort of relational

177
00:06:13,360 --> 00:06:18,479
database management systems

178
00:06:15,520 --> 00:06:20,479
so let's just say we have a login system

179
00:06:18,479 --> 00:06:22,318
you type in your name and password and

180
00:06:20,479 --> 00:06:24,159
at the back end it fetches the details

181
00:06:22,319 --> 00:06:26,880
with respect to the data you

182
00:06:24,160 --> 00:06:28,319
like with the data sent and it sends

183
00:06:26,880 --> 00:06:30,240
back the response

184
00:06:28,319 --> 00:06:32,000
so the mechanism which selects the

185
00:06:30,240 --> 00:06:34,080
content where username equal to s

186
00:06:32,000 --> 00:06:35,600
and password is equal to y that's where

187
00:06:34,080 --> 00:06:38,880
sql comes into play

188
00:06:35,600 --> 00:06:40,160
right so we have the accessibility to

189
00:06:38,880 --> 00:06:42,639
manipulate data

190
00:06:40,160 --> 00:06:43,600
unlike our files which can be

191
00:06:42,639 --> 00:06:45,440
disorganized

192
00:06:43,600 --> 00:06:47,919
and you know less secure when compared

193
00:06:45,440 --> 00:06:49,039
to like when considering data handling

194
00:06:47,919 --> 00:06:51,680
right

195
00:06:49,039 --> 00:06:53,039
so some common relational database

196
00:06:51,680 --> 00:06:57,120
management systems that use

197
00:06:53,039 --> 00:07:00,560
sql are oracle microsoft sql servers

198
00:06:57,120 --> 00:07:04,400
access ingress etc although

199
00:07:00,560 --> 00:07:07,039
most databases like systems use sql

200
00:07:04,400 --> 00:07:08,560
most of them also have uh would say

201
00:07:07,039 --> 00:07:09,280
their own additional proprietor

202
00:07:08,560 --> 00:07:12,160
extensions

203
00:07:09,280 --> 00:07:12,960
that are not only used on their system

204
00:07:12,160 --> 00:07:16,080
like it's like

205
00:07:12,960 --> 00:07:17,440
exclusive to them it's not it's not

206
00:07:16,080 --> 00:07:19,599
common for everything

207
00:07:17,440 --> 00:07:21,120
however there are standard sql commands

208
00:07:19,599 --> 00:07:24,080
just select insert

209
00:07:21,120 --> 00:07:24,960
drop delete update create and all that

210
00:07:24,080 --> 00:07:27,520
can accomplish

211
00:07:24,960 --> 00:07:28,799
almost everything one needs to do in a

212
00:07:27,520 --> 00:07:30,960
database it's like

213
00:07:28,800 --> 00:07:33,520
you know manipulation complete it's all

214
00:07:30,960 --> 00:07:36,560
the manipulation needed

215
00:07:33,520 --> 00:07:39,120
okay so the basics basic

216
00:07:36,560 --> 00:07:40,240
you know the basic function of sql is to

217
00:07:39,120 --> 00:07:42,319
query data

218
00:07:40,240 --> 00:07:44,080
contained in a relational database as

219
00:07:42,319 --> 00:07:46,160
you see start

220
00:07:44,080 --> 00:07:48,080
and yeah on the contrary every

221
00:07:46,160 --> 00:07:50,720
functionality comes with the flow right

222
00:07:48,080 --> 00:07:51,520
so no method in this world would be 100

223
00:07:50,720 --> 00:07:54,720
efficient

224
00:07:51,520 --> 00:07:56,080
so there comes the attack to destroy sql

225
00:07:54,720 --> 00:07:58,879
functionality

226
00:07:56,080 --> 00:08:00,800
and to all the people who say sql is old

227
00:07:58,879 --> 00:08:03,680
school and not fun anymore it's hard how

228
00:08:00,800 --> 00:08:08,080
they miss the wide variety of the attack

229
00:08:03,680 --> 00:08:10,240
okay next slide okay so injections

230
00:08:08,080 --> 00:08:11,440
sql injection is a code injection

231
00:08:10,240 --> 00:08:14,080
technique yeah

232
00:08:11,440 --> 00:08:14,960
which is used to you know attack

233
00:08:14,080 --> 00:08:17,840
data-driven

234
00:08:14,960 --> 00:08:20,000
applications which is like very much

235
00:08:17,840 --> 00:08:20,638
malicious sql statements are inserted

236
00:08:20,000 --> 00:08:22,639
into

237
00:08:20,639 --> 00:08:24,000
entry field or where the input is taken

238
00:08:22,639 --> 00:08:27,919
for execution

239
00:08:24,000 --> 00:08:31,360
like yeah like the input fields so

240
00:08:27,919 --> 00:08:32,880
yeah like injection has made a like yeah

241
00:08:31,360 --> 00:08:34,399
like our host said injection has made a

242
00:08:32,880 --> 00:08:35,760
constant appearance in

243
00:08:34,399 --> 00:08:37,519
top 10 web application security

244
00:08:35,760 --> 00:08:40,640
vulnerabilities for over

245
00:08:37,519 --> 00:08:44,399
10 years sql injections like it

246
00:08:40,640 --> 00:08:46,480
allows an attacker to spoof identity or

247
00:08:44,399 --> 00:08:47,760
tamper with existing data cause

248
00:08:46,480 --> 00:08:50,320
repudiation issues

249
00:08:47,760 --> 00:08:51,040
that could be like voiding transactions

250
00:08:50,320 --> 00:08:54,240
or maybe

251
00:08:51,040 --> 00:08:55,920
changing balances allow disclosure of

252
00:08:54,240 --> 00:08:58,240
data

253
00:08:55,920 --> 00:09:00,640
in even many cases destroy data like

254
00:08:58,240 --> 00:09:03,200
make it completely unavailable

255
00:09:00,640 --> 00:09:04,640
and there are also cases where they can

256
00:09:03,200 --> 00:09:06,399
get a privilege escalation they could

257
00:09:04,640 --> 00:09:08,800
become like administrators of the whole

258
00:09:06,399 --> 00:09:11,839
database server

259
00:09:08,800 --> 00:09:14,560
okay so as i said sql injection must

260
00:09:11,839 --> 00:09:16,399
exploit a security vulnerability in an

261
00:09:14,560 --> 00:09:19,760
application software

262
00:09:16,399 --> 00:09:22,640
so for example when a user

263
00:09:19,760 --> 00:09:24,000
is either incorrectly filtered for

264
00:09:22,640 --> 00:09:27,040
string literal escapes

265
00:09:24,000 --> 00:09:29,839
characters which is embedded in sql

266
00:09:27,040 --> 00:09:30,800
or use input in you know which is not

267
00:09:29,839 --> 00:09:34,000
strongly typed

268
00:09:30,800 --> 00:09:36,079
or unexpectedly executed or like

269
00:09:34,000 --> 00:09:37,360
you know accidentally run or so it's

270
00:09:36,080 --> 00:09:39,680
most

271
00:09:37,360 --> 00:09:41,760
known as attack worked around websites

272
00:09:39,680 --> 00:09:44,079
but yeah it can be used in

273
00:09:41,760 --> 00:09:45,920
you know any any type of sql database

274
00:09:44,080 --> 00:09:50,560
too

275
00:09:45,920 --> 00:09:53,599
next slide yeah okay this is an example

276
00:09:50,560 --> 00:09:54,640
sql injections vary yeah definitely but

277
00:09:53,600 --> 00:09:56,800
mostly it

278
00:09:54,640 --> 00:09:58,480
it's like using the input and closing

279
00:09:56,800 --> 00:10:01,040
the query running in the back

280
00:09:58,480 --> 00:10:02,839
adding a few queries and removing off

281
00:10:01,040 --> 00:10:04,640
every bit of the rest of the query with

282
00:10:02,839 --> 00:10:08,480
commenters so here

283
00:10:04,640 --> 00:10:10,560
we have our inject in red this is like

284
00:10:08,480 --> 00:10:12,480
very basic injection where we inject

285
00:10:10,560 --> 00:10:14,239
malicious code in the input comment of

286
00:10:12,480 --> 00:10:18,399
the rest whatever comes in

287
00:10:14,240 --> 00:10:21,279
yeah for those of you are new to this

288
00:10:18,399 --> 00:10:21,279
i hope that's clear

289
00:10:22,000 --> 00:10:27,440
yeah let's go for a short demo

290
00:10:25,440 --> 00:10:28,800
so what's happening here is it's

291
00:10:27,440 --> 00:10:30,640
selecting

292
00:10:28,800 --> 00:10:32,160
uh the output where username and

293
00:10:30,640 --> 00:10:34,399
password provided

294
00:10:32,160 --> 00:10:37,439
with what is provided provided with what

295
00:10:34,399 --> 00:10:37,440
is there in the database

296
00:10:43,200 --> 00:10:46,640
okay so it's like normal authentication

297
00:10:45,760 --> 00:10:49,120
checks

298
00:10:46,640 --> 00:10:50,079
it if it finds the correct one it prints

299
00:10:49,120 --> 00:10:52,079
welcome

300
00:10:50,079 --> 00:10:53,519
else it prints valid so here i'm giving

301
00:10:52,079 --> 00:10:57,680
them valid ones and

302
00:10:53,519 --> 00:11:00,000
it's it prints welcome if i give an

303
00:10:57,680 --> 00:11:00,800
invalid password or username it gives

304
00:11:00,000 --> 00:11:03,600
invalid

305
00:11:00,800 --> 00:11:03,599
as easy as that

306
00:11:07,200 --> 00:11:10,880
okay so let's say we wanna login as

307
00:11:10,240 --> 00:11:13,200
admin

308
00:11:10,880 --> 00:11:14,800
to you know get his or her privileges

309
00:11:13,200 --> 00:11:15,760
and we don't know what the password for

310
00:11:14,800 --> 00:11:17,920
admin is

311
00:11:15,760 --> 00:11:19,279
what we do is inject a query which

312
00:11:17,920 --> 00:11:21,599
comments the rest

313
00:11:19,279 --> 00:11:22,320
of your rest of what is there on the

314
00:11:21,600 --> 00:11:24,959
back end

315
00:11:22,320 --> 00:11:26,560
rest of the select statements so finally

316
00:11:24,959 --> 00:11:28,719
it becomes select

317
00:11:26,560 --> 00:11:30,880
it just selects your username is equal

318
00:11:28,720 --> 00:11:32,800
to admin without asking the password

319
00:11:30,880 --> 00:11:35,920
simple as that that's like very basic

320
00:11:32,800 --> 00:11:35,920
form of sql injection

321
00:11:36,160 --> 00:11:39,760
yeah next getting into the types of sql

322
00:11:38,399 --> 00:11:41,680
injection

323
00:11:39,760 --> 00:11:43,040
they can be classified into three main

324
00:11:41,680 --> 00:11:45,599
categories uh

325
00:11:43,040 --> 00:11:47,439
in banned sql injections in feral sql

326
00:11:45,600 --> 00:11:50,480
injection or blind skill injections

327
00:11:47,440 --> 00:11:52,800
and out of band sql injections okay

328
00:11:50,480 --> 00:11:53,760
inbound sql injections is usually the

329
00:11:52,800 --> 00:11:56,800
most common and

330
00:11:53,760 --> 00:11:58,000
easy to exploit kind of sql injection

331
00:11:56,800 --> 00:12:00,399
attacks

332
00:11:58,000 --> 00:12:01,040
like in inband uh skills usually it

333
00:12:00,399 --> 00:12:04,320
occurs when

334
00:12:01,040 --> 00:12:06,399
an attacker you know is able to or say

335
00:12:04,320 --> 00:12:07,920
you see you know the same communication

336
00:12:06,399 --> 00:12:08,800
channel use the same communication

337
00:12:07,920 --> 00:12:11,040
channel to both

338
00:12:08,800 --> 00:12:12,319
launch the attack and also to gather

339
00:12:11,040 --> 00:12:14,880
results

340
00:12:12,320 --> 00:12:16,399
right so the two most common types of

341
00:12:14,880 --> 00:12:17,439
inband sql injection attacks are

342
00:12:16,399 --> 00:12:19,519
error-based

343
00:12:17,440 --> 00:12:20,480
sql injections and union-based skill

344
00:12:19,519 --> 00:12:23,440
injections

345
00:12:20,480 --> 00:12:25,200
error-based sql injections usually

346
00:12:23,440 --> 00:12:26,399
relies on the error messages thrown by

347
00:12:25,200 --> 00:12:28,160
the database servers

348
00:12:26,399 --> 00:12:30,079
so if you use mysql or something if

349
00:12:28,160 --> 00:12:32,240
there is an error it it pops

350
00:12:30,079 --> 00:12:33,120
like okay there is a syntax error so the

351
00:12:32,240 --> 00:12:36,560
errors are

352
00:12:33,120 --> 00:12:38,639
thrown back union base depends on

353
00:12:36,560 --> 00:12:40,479
the union sql operator which is like the

354
00:12:38,639 --> 00:12:41,600
combinational operator like it's pretty

355
00:12:40,480 --> 00:12:44,000
self-explanatory

356
00:12:41,600 --> 00:12:44,639
so it combines the results of two or

357
00:12:44,000 --> 00:12:47,760
more

358
00:12:44,639 --> 00:12:50,399
select statements right okay in

359
00:12:47,760 --> 00:12:52,639
blind sql injection it's practically a

360
00:12:50,399 --> 00:12:53,600
pretty long down right for an attacker

361
00:12:52,639 --> 00:12:56,000
to exploit

362
00:12:53,600 --> 00:12:58,079
the attacker would not be able to see

363
00:12:56,000 --> 00:12:59,760
the result of an attack in an inband

364
00:12:58,079 --> 00:13:02,079
which perhaps explains

365
00:12:59,760 --> 00:13:02,959
blind as in the attacker closely

366
00:13:02,079 --> 00:13:05,760
examines

367
00:13:02,959 --> 00:13:06,000
like indirect loss in behavior like when

368
00:13:05,760 --> 00:13:08,720
we

369
00:13:06,000 --> 00:13:10,000
try to get an error fix it try again

370
00:13:08,720 --> 00:13:12,639
sort of say you know try an error

371
00:13:10,000 --> 00:13:13,519
if trial and error stuff the injection

372
00:13:12,639 --> 00:13:16,399
doesn't

373
00:13:13,519 --> 00:13:17,680
you know reveal data from the database

374
00:13:16,399 --> 00:13:22,160
directly

375
00:13:17,680 --> 00:13:25,040
so clues can be like http responses

376
00:13:22,160 --> 00:13:25,920
blank web pages for certain user inputs

377
00:13:25,040 --> 00:13:28,000
and how long

378
00:13:25,920 --> 00:13:29,120
it takes you know for the database to

379
00:13:28,000 --> 00:13:31,839
respond to

380
00:13:29,120 --> 00:13:33,279
certain user inputs are those other

381
00:13:31,839 --> 00:13:35,440
things that can be you know close

382
00:13:33,279 --> 00:13:38,399
depending on the goals that occur

383
00:13:35,440 --> 00:13:39,279
and yeah the two types of blind sql

384
00:13:38,399 --> 00:13:41,760
injections are

385
00:13:39,279 --> 00:13:43,040
blue blind boolean based and blind time

386
00:13:41,760 --> 00:13:45,199
base

387
00:13:43,040 --> 00:13:46,880
yeah boolean based sql injections depend

388
00:13:45,199 --> 00:13:49,599
on whether the query

389
00:13:46,880 --> 00:13:51,360
returns true or false statements as the

390
00:13:49,600 --> 00:13:54,480
name suggests boolean

391
00:13:51,360 --> 00:13:56,399
yeah in time based the query you know to

392
00:13:54,480 --> 00:13:57,199
the database which forces the database

393
00:13:56,399 --> 00:14:00,160
to kindly

394
00:13:57,199 --> 00:14:01,279
wait for a specified amount of time and

395
00:14:00,160 --> 00:14:03,760
the response time

396
00:14:01,279 --> 00:14:05,040
explains true or false like let's say

397
00:14:03,760 --> 00:14:06,720
wait for five minutes

398
00:14:05,040 --> 00:14:08,399
five seconds if it waits for five

399
00:14:06,720 --> 00:14:11,519
seconds it's true

400
00:14:08,399 --> 00:14:12,079
something like that okay next yeah out

401
00:14:11,519 --> 00:14:14,399
of band

402
00:14:12,079 --> 00:14:15,519
out of band sql injection occurs when an

403
00:14:14,399 --> 00:14:18,079
attacker you know is

404
00:14:15,519 --> 00:14:19,839
unable to use the same channel as the

405
00:14:18,079 --> 00:14:20,959
law to launch the attack and gather

406
00:14:19,839 --> 00:14:24,000
results like it's the

407
00:14:20,959 --> 00:14:27,119
opposite of in-band this is pretty you

408
00:14:24,000 --> 00:14:27,120
know common one of the fan

409
00:14:27,760 --> 00:14:30,959
okay this is the fun part of sql

410
00:14:30,320 --> 00:14:33,839
injection

411
00:14:30,959 --> 00:14:35,518
yeah it's like when we get to break the

412
00:14:33,839 --> 00:14:37,839
exclusive rules like

413
00:14:35,519 --> 00:14:39,440
it's particularly given that don't do it

414
00:14:37,839 --> 00:14:43,120
and the first thing is like

415
00:14:39,440 --> 00:14:45,040
do it so of office of a web application

416
00:14:43,120 --> 00:14:45,920
firewall helps to protect the web

417
00:14:45,040 --> 00:14:48,560
application

418
00:14:45,920 --> 00:14:49,120
by filtering and monitoring http traffic

419
00:14:48,560 --> 00:14:51,839
between

420
00:14:49,120 --> 00:14:53,760
the publication and the internet it

421
00:14:51,839 --> 00:14:54,160
typically protects web applications from

422
00:14:53,760 --> 00:14:56,560
like

423
00:14:54,160 --> 00:14:57,680
crosstalk scripting cross site foreign

424
00:14:56,560 --> 00:14:59,920
file inclusion

425
00:14:57,680 --> 00:15:01,359
secure injections and other kind of cool

426
00:14:59,920 --> 00:15:03,599
attacks

427
00:15:01,360 --> 00:15:05,600
so as i was saying a wolf operates

428
00:15:03,600 --> 00:15:08,880
through a set of rules

429
00:15:05,600 --> 00:15:10,800
called policies these policies aims you

430
00:15:08,880 --> 00:15:13,199
know to protect against vulnerabilities

431
00:15:10,800 --> 00:15:16,319
in the application by filtering out

432
00:15:13,199 --> 00:15:18,880
just the malicious traffic right

433
00:15:16,320 --> 00:15:20,639
so in applications prone to sql

434
00:15:18,880 --> 00:15:21,839
injections they tend to create a web

435
00:15:20,639 --> 00:15:24,800
application firewall

436
00:15:21,839 --> 00:15:25,440
that sanitizer blacklist the common sql

437
00:15:24,800 --> 00:15:28,639
keywords

438
00:15:25,440 --> 00:15:31,040
in the input okay so uh

439
00:15:28,639 --> 00:15:32,079
sql injection worf is generally like

440
00:15:31,040 --> 00:15:34,639
yeah same as

441
00:15:32,079 --> 00:15:35,439
the policies it has it follows a bunch

442
00:15:34,639 --> 00:15:38,959
of rules

443
00:15:35,440 --> 00:15:41,279
to prevent speed injections so

444
00:15:38,959 --> 00:15:42,399
most common filters supplied by warps

445
00:15:41,279 --> 00:15:44,959
are by possibly

446
00:15:42,399 --> 00:15:47,839
it's easy to bypass let's discuss a bit

447
00:15:44,959 --> 00:15:47,839
in the common ones

448
00:15:48,399 --> 00:15:55,279
okay so union blacklist can be trashed

449
00:15:52,160 --> 00:15:57,279
by blind sequels so

450
00:15:55,279 --> 00:15:59,439
it actually uses the method of

451
00:15:57,279 --> 00:16:01,600
requesting a true or false statements

452
00:15:59,440 --> 00:16:02,880
as i said before uh as the responses

453
00:16:01,600 --> 00:16:06,079
from the database

454
00:16:02,880 --> 00:16:07,600
using and operator or or operators to

455
00:16:06,079 --> 00:16:09,758
brute force the data

456
00:16:07,600 --> 00:16:11,759
okay this can be used when the database

457
00:16:09,759 --> 00:16:14,880
does not give out any output

458
00:16:11,759 --> 00:16:15,440
right next is buffer overflow by fasting

459
00:16:14,880 --> 00:16:17,600
so

460
00:16:15,440 --> 00:16:18,560
while writing into the buffer with a

461
00:16:17,600 --> 00:16:20,959
huge value

462
00:16:18,560 --> 00:16:21,680
with huge values surpass the buffers

463
00:16:20,959 --> 00:16:23,439
boundary

464
00:16:21,680 --> 00:16:25,199
like overwriting the memory of an

465
00:16:23,440 --> 00:16:27,120
application because most of the valves

466
00:16:25,199 --> 00:16:28,719
right are mostly written and combined in

467
00:16:27,120 --> 00:16:31,759
c

468
00:16:28,720 --> 00:16:32,240
crlf is carriage return line feed okay

469
00:16:31,759 --> 00:16:34,160
these

470
00:16:32,240 --> 00:16:35,759
control characters can be used to

471
00:16:34,160 --> 00:16:37,680
subtract substitute

472
00:16:35,759 --> 00:16:39,600
for spaces for comments which are

473
00:16:37,680 --> 00:16:44,319
blacklisted

474
00:16:39,600 --> 00:16:47,360
hpp is http parameter pollution

475
00:16:44,320 --> 00:16:47,680
okay the parameters in the http request

476
00:16:47,360 --> 00:16:50,240
like

477
00:16:47,680 --> 00:16:52,239
is like maliciously you know malibu

478
00:16:50,240 --> 00:16:54,399
dated with maliciously

479
00:16:52,240 --> 00:16:56,079
you know unlimited different unintended

480
00:16:54,399 --> 00:16:57,600
malicious statements methods to

481
00:16:56,079 --> 00:16:59,519
or methods to achieve sensitive

482
00:16:57,600 --> 00:17:01,920
information uh

483
00:16:59,519 --> 00:17:04,000
it's like you know multiple parameters

484
00:17:01,920 --> 00:17:06,399
of the same name are interpreted

485
00:17:04,000 --> 00:17:07,679
differently in different languages of

486
00:17:06,400 --> 00:17:10,799
frameworks i said

487
00:17:07,679 --> 00:17:12,720
so to give an example php or apache

488
00:17:10,799 --> 00:17:14,879
it's like controls the last occurrence

489
00:17:12,720 --> 00:17:17,360
occurrence of the parameter

490
00:17:14,880 --> 00:17:19,520
so if we give user name equal to kim

491
00:17:17,359 --> 00:17:22,000
jong-un and username equal to pass

492
00:17:19,520 --> 00:17:24,319
admin it would consider the second one

493
00:17:22,000 --> 00:17:27,520
so we get the access of the admin

494
00:17:24,319 --> 00:17:30,320
and if the you know framework the

495
00:17:27,520 --> 00:17:32,639
server is jsp servlet or apache tomcat

496
00:17:30,320 --> 00:17:33,678
it contrasts the first occurrence so we

497
00:17:32,640 --> 00:17:37,120
swap it

498
00:17:33,679 --> 00:17:39,840
right to what our requirement is

499
00:17:37,120 --> 00:17:40,320
okay so character substitutes it's like

500
00:17:39,840 --> 00:17:43,120
we

501
00:17:40,320 --> 00:17:44,879
using characters like uh parallel

502
00:17:43,120 --> 00:17:46,479
question marks double quotes single

503
00:17:44,880 --> 00:17:49,200
quotes uh

504
00:17:46,480 --> 00:17:50,240
percentage like yeah ampersand and dot

505
00:17:49,200 --> 00:17:52,400
usually the wolf

506
00:17:50,240 --> 00:17:54,160
would consider these kind of special

507
00:17:52,400 --> 00:17:57,360
characters as spaces

508
00:17:54,160 --> 00:17:59,120
and completely ignore them okay so which

509
00:17:57,360 --> 00:18:01,360
is like which is like a

510
00:17:59,120 --> 00:18:02,719
help for us to bypass various keywords

511
00:18:01,360 --> 00:18:06,639
which are blacklisted links

512
00:18:02,720 --> 00:18:08,880
so be it space a lot hex in coding yeah

513
00:18:06,640 --> 00:18:10,720
when particular keywords are you know

514
00:18:08,880 --> 00:18:12,720
blacklisted we could substitute with the

515
00:18:10,720 --> 00:18:14,160
hex encoder value because after the url

516
00:18:12,720 --> 00:18:17,600
is passed it obviously decodes

517
00:18:14,160 --> 00:18:21,679
and turns the hex value to plain text

518
00:18:17,600 --> 00:18:24,879
right okay so unicode encoding

519
00:18:21,679 --> 00:18:27,840
yeah in this encoding standards like

520
00:18:24,880 --> 00:18:29,679
some of the characters can be you know

521
00:18:27,840 --> 00:18:32,000
used as the substitute for

522
00:18:29,679 --> 00:18:32,880
ascii character values if at all it's

523
00:18:32,000 --> 00:18:34,960
blocked

524
00:18:32,880 --> 00:18:37,600
and thus by we can bypass it and dump

525
00:18:34,960 --> 00:18:37,600
the database

526
00:18:39,679 --> 00:18:44,640
okay lexis base conversions

527
00:18:42,720 --> 00:18:46,320
by base conversion i think they are

528
00:18:44,640 --> 00:18:48,640
that's self-explanatory it's like by

529
00:18:46,320 --> 00:18:51,840
representing values that are blacklisted

530
00:18:48,640 --> 00:18:55,280
in different basis it's like yeah zero x

531
00:18:51,840 --> 00:18:58,320
base is bait base 16 and base

532
00:18:55,280 --> 00:18:59,678
8 values are differently printed but

533
00:18:58,320 --> 00:19:03,360
it's the same value

534
00:18:59,679 --> 00:19:05,200
right so yeah what we can do is

535
00:19:03,360 --> 00:19:06,799
represent values that are blacklisted in

536
00:19:05,200 --> 00:19:09,919
different basis would help

537
00:19:06,799 --> 00:19:09,918
bypass that filter

538
00:19:10,640 --> 00:19:14,960
yeah when we provide a url encoded null

539
00:19:14,000 --> 00:19:18,400
byte which is like

540
00:19:14,960 --> 00:19:19,440
percentage 0 0 before the string to be

541
00:19:18,400 --> 00:19:21,760
bypassed

542
00:19:19,440 --> 00:19:22,960
it will remove everything after the null

543
00:19:21,760 --> 00:19:26,640
byte so that

544
00:19:22,960 --> 00:19:29,679
can be used as you know maybe comments

545
00:19:26,640 --> 00:19:30,880
substitute and so next is ascii

546
00:19:29,679 --> 00:19:32,880
substitute

547
00:19:30,880 --> 00:19:35,280
it's similar to unicode substitute it's

548
00:19:32,880 --> 00:19:38,000
like these ascii characters can have

549
00:19:35,280 --> 00:19:39,280
you know multiple alternatives which has

550
00:19:38,000 --> 00:19:41,280
a different value but

551
00:19:39,280 --> 00:19:43,280
their functions would be similar and can

552
00:19:41,280 --> 00:19:47,039
be used to bypass

553
00:19:43,280 --> 00:19:50,000
any blacklist that's created right

554
00:19:47,039 --> 00:19:51,120
changing is okay this is this is not

555
00:19:50,000 --> 00:19:53,280
that common but

556
00:19:51,120 --> 00:19:54,320
yeah it's quite i mean i don't think

557
00:19:53,280 --> 00:19:57,440
servers are that's

558
00:19:54,320 --> 00:19:59,439
that them to you know keep let you know

559
00:19:57,440 --> 00:20:00,720
keep a walk that can bypass okay

560
00:19:59,440 --> 00:20:03,440
changing cases

561
00:20:00,720 --> 00:20:04,960
we can bypass with the changing case so

562
00:20:03,440 --> 00:20:07,280
the sql keywords are

563
00:20:04,960 --> 00:20:09,120
obviously case insensitive and hence

564
00:20:07,280 --> 00:20:09,520
when a waff blocks a particular case of

565
00:20:09,120 --> 00:20:12,879
string

566
00:20:09,520 --> 00:20:15,360
you can bypass it by giving varied cases

567
00:20:12,880 --> 00:20:17,120
right okay url encoding it's also

568
00:20:15,360 --> 00:20:19,520
similar to hex encoding

569
00:20:17,120 --> 00:20:21,039
by substituting hex values to all the

570
00:20:19,520 --> 00:20:24,960
blacklisted words and

571
00:20:21,039 --> 00:20:26,559
bypass it once the url gets decoded

572
00:20:24,960 --> 00:20:29,120
replace by bus i don't think this is

573
00:20:26,559 --> 00:20:31,600
very common but yeah the works

574
00:20:29,120 --> 00:20:32,879
that replace you know all occurrences of

575
00:20:31,600 --> 00:20:35,760
particular keywords

576
00:20:32,880 --> 00:20:37,280
with empty strings can be bypassed by

577
00:20:35,760 --> 00:20:37,760
giving a keyword in the middle of the

578
00:20:37,280 --> 00:20:39,918
same

579
00:20:37,760 --> 00:20:41,520
key keyword and hence getting the same

580
00:20:39,919 --> 00:20:43,200
keyword after the work replaces the

581
00:20:41,520 --> 00:20:45,280
keyword in between

582
00:20:43,200 --> 00:20:46,400
so practically these are just a few

583
00:20:45,280 --> 00:20:48,639
methods like

584
00:20:46,400 --> 00:20:50,880
the letter is just a huge wide ocean of

585
00:20:48,640 --> 00:20:54,960
exploits and methods

586
00:20:50,880 --> 00:20:55,360
next slide okay now the pretty mystical

587
00:20:54,960 --> 00:20:58,799
one

588
00:20:55,360 --> 00:21:01,678
in injections coin sql injections

589
00:20:58,799 --> 00:21:02,158
but before that what is coins okay let's

590
00:21:01,679 --> 00:21:04,240
get a

591
00:21:02,159 --> 00:21:06,320
good idea of coins before we move on to

592
00:21:04,240 --> 00:21:08,240
coin injections

593
00:21:06,320 --> 00:21:10,320
a coin is a computer program which

594
00:21:08,240 --> 00:21:13,039
prints its own listing

595
00:21:10,320 --> 00:21:14,799
okay the concept is actually as i told

596
00:21:13,039 --> 00:21:16,799
from buyers it's actually from

597
00:21:14,799 --> 00:21:18,400
cell multiplication concept in living

598
00:21:16,799 --> 00:21:21,280
beings as in

599
00:21:18,400 --> 00:21:22,960
in molecular biology dna replication is

600
00:21:21,280 --> 00:21:25,280
the biological process

601
00:21:22,960 --> 00:21:28,240
of you know producing identical replicas

602
00:21:25,280 --> 00:21:31,360
of dna from one original dna molecule

603
00:21:28,240 --> 00:21:33,360
we got that right okay as in how

604
00:21:31,360 --> 00:21:34,479
dna and other protein stuff is

605
00:21:33,360 --> 00:21:36,559
replicated

606
00:21:34,480 --> 00:21:37,520
as well as in the new cell okay so

607
00:21:36,559 --> 00:21:40,080
that's self

608
00:21:37,520 --> 00:21:40,960
uh replicating programs it's similar

609
00:21:40,080 --> 00:21:42,559
like that's what

610
00:21:40,960 --> 00:21:45,600
coin does that's the characteristics of

611
00:21:42,559 --> 00:21:46,639
coin this may sound either impossible

612
00:21:45,600 --> 00:21:49,280
trivial

613
00:21:46,640 --> 00:21:51,280
or trivial and stuff like that like

614
00:21:49,280 --> 00:21:54,000
what's printing its own listing

615
00:21:51,280 --> 00:21:54,799
okay what is the point of it like this

616
00:21:54,000 --> 00:21:57,440
means that

617
00:21:54,799 --> 00:21:58,000
when a program is run right it must

618
00:21:57,440 --> 00:22:00,080
print out

619
00:21:58,000 --> 00:22:01,600
precisely those instructions which

620
00:22:00,080 --> 00:22:04,720
programmer wrote as

621
00:22:01,600 --> 00:22:07,918
you know as a part of the program alone

622
00:22:04,720 --> 00:22:10,559
so okay let's just say we have a program

623
00:22:07,919 --> 00:22:12,480
print hello so the output is obviously

624
00:22:10,559 --> 00:22:14,960
gonna be hello right

625
00:22:12,480 --> 00:22:15,919
so for coins it's like if the program is

626
00:22:14,960 --> 00:22:18,640
print hello

627
00:22:15,919 --> 00:22:21,200
the output output will also be print

628
00:22:18,640 --> 00:22:23,840
hello rather than just hello

629
00:22:21,200 --> 00:22:25,120
okay the easiest way to do that of

630
00:22:23,840 --> 00:22:27,520
course is like

631
00:22:25,120 --> 00:22:28,959
go seek the source file on the disk open

632
00:22:27,520 --> 00:22:30,879
it print its content

633
00:22:28,960 --> 00:22:32,880
okay what's the use of it that may be

634
00:22:30,880 --> 00:22:34,960
that may be done but that's definitely

635
00:22:32,880 --> 00:22:36,960
not a program which is printing itself

636
00:22:34,960 --> 00:22:38,240
besides the program might not know where

637
00:22:36,960 --> 00:22:40,799
the source file is

638
00:22:38,240 --> 00:22:41,280
it may have access to the you know only

639
00:22:40,799 --> 00:22:43,840
the

640
00:22:41,280 --> 00:22:45,520
compiled data of programming languages

641
00:22:43,840 --> 00:22:47,039
may simply forbid that sort of

642
00:22:45,520 --> 00:22:49,679
operations

643
00:22:47,039 --> 00:22:50,400
right so coins are actually you know

644
00:22:49,679 --> 00:22:52,720
it's something

645
00:22:50,400 --> 00:22:54,159
that's possible in any during complete

646
00:22:52,720 --> 00:22:57,360
programming languages

647
00:22:54,159 --> 00:22:59,120
it's like a direct consequence of claims

648
00:22:57,360 --> 00:23:01,600
recursion theorem

649
00:22:59,120 --> 00:23:04,559
okay claims recursion theorem uh it's

650
00:23:01,600 --> 00:23:07,360
like a pair of fundamental results about

651
00:23:04,559 --> 00:23:08,639
application of computable functions it's

652
00:23:07,360 --> 00:23:11,918
like to their own

653
00:23:08,640 --> 00:23:14,080
descriptions so uh

654
00:23:11,919 --> 00:23:15,039
to their own descriptions and sense it's

655
00:23:14,080 --> 00:23:18,000
related to what

656
00:23:15,039 --> 00:23:20,400
say a fixed points determined by

657
00:23:18,000 --> 00:23:23,200
enumeration operators

658
00:23:20,400 --> 00:23:25,840
so which are like computable kind of you

659
00:23:23,200 --> 00:23:29,200
know a computable correlate

660
00:23:25,840 --> 00:23:31,439
okay and the comfort part of coin

661
00:23:29,200 --> 00:23:32,480
is that in all general purpose

662
00:23:31,440 --> 00:23:34,960
programming languages

663
00:23:32,480 --> 00:23:35,760
coins can be developed like mixing the

664
00:23:34,960 --> 00:23:38,400
programming

665
00:23:35,760 --> 00:23:39,120
programs and data and all for example

666
00:23:38,400 --> 00:23:42,400
escaping

667
00:23:39,120 --> 00:23:43,120
quotes inside strings of characters okay

668
00:23:42,400 --> 00:23:45,760
so

669
00:23:43,120 --> 00:23:47,039
there there is some difficulty like the

670
00:23:45,760 --> 00:23:48,480
difficulty of programming these

671
00:23:47,039 --> 00:23:50,799
languages

672
00:23:48,480 --> 00:23:52,080
and you know lengths can be reduced this

673
00:23:50,799 --> 00:23:53,760
these you know

674
00:23:52,080 --> 00:23:55,520
reducing the difficulty of programming

675
00:23:53,760 --> 00:23:58,480
these quant languages to get the

676
00:23:55,520 --> 00:23:59,679
particular fixed point and you know

677
00:23:58,480 --> 00:24:00,640
you're reducing the length because

678
00:23:59,679 --> 00:24:03,279
there's gonna be a

679
00:24:00,640 --> 00:24:05,039
you know multiple recursive copying of

680
00:24:03,279 --> 00:24:08,720
data and code

681
00:24:05,039 --> 00:24:09,360
in this so that can be reduced if the

682
00:24:08,720 --> 00:24:12,080
program

683
00:24:09,360 --> 00:24:12,399
so you know the program language that we

684
00:24:12,080 --> 00:24:15,279
use

685
00:24:12,400 --> 00:24:16,320
has features supporting structural

686
00:24:15,279 --> 00:24:19,120
reflection

687
00:24:16,320 --> 00:24:20,639
right that is like uh the ability of the

688
00:24:19,120 --> 00:24:23,678
language to provide

689
00:24:20,640 --> 00:24:25,200
complete refrigeration you know it's

690
00:24:23,679 --> 00:24:28,559
like complete verification when

691
00:24:25,200 --> 00:24:29,919
the program is run or executed okay so

692
00:24:28,559 --> 00:24:32,720
refrigeration

693
00:24:29,919 --> 00:24:34,080
means that you know the program is you

694
00:24:32,720 --> 00:24:38,640
know during the execution

695
00:24:34,080 --> 00:24:41,199
it can be encoded as data right

696
00:24:38,640 --> 00:24:42,080
in our cases what we're gonna use for

697
00:24:41,200 --> 00:24:43,760
now we're

698
00:24:42,080 --> 00:24:45,279
you know with our programming languages

699
00:24:43,760 --> 00:24:48,080
javascript skill

700
00:24:45,279 --> 00:24:51,360
or whichever we check with reflection

701
00:24:48,080 --> 00:24:54,799
features and not using them

702
00:24:51,360 --> 00:24:58,320
okay yeah next thing about coins

703
00:24:54,799 --> 00:25:01,039
coins take no inputs right and it prints

704
00:24:58,320 --> 00:25:02,879
its source code as output generally

705
00:25:01,039 --> 00:25:05,440
coins don't take any kind of input

706
00:25:02,880 --> 00:25:07,039
they are allowed to you know they are

707
00:25:05,440 --> 00:25:08,799
not allowed themselves they are not

708
00:25:07,039 --> 00:25:09,679
allowed to step out of itself which is

709
00:25:08,799 --> 00:25:12,639
like

710
00:25:09,679 --> 00:25:13,679
it can print its source code alone but

711
00:25:12,640 --> 00:25:16,080
there can't be

712
00:25:13,679 --> 00:25:18,000
anything any stuff like buffer overflow

713
00:25:16,080 --> 00:25:18,720
or getting out of the bond and print

714
00:25:18,000 --> 00:25:21,919
anything

715
00:25:18,720 --> 00:25:25,279
more than the source code

716
00:25:21,919 --> 00:25:27,760
very restricted okay

717
00:25:25,279 --> 00:25:29,200
yeah the interesting thing the advantage

718
00:25:27,760 --> 00:25:31,360
is obviously the interesting thing is

719
00:25:29,200 --> 00:25:33,279
that writing coin does not depend on

720
00:25:31,360 --> 00:25:34,719
any kind of stuff like being able to

721
00:25:33,279 --> 00:25:37,200
read the source file or

722
00:25:34,720 --> 00:25:38,320
able to represent you know codes in

723
00:25:37,200 --> 00:25:41,360
several different ways

724
00:25:38,320 --> 00:25:44,720
and that sort of stuff and it's like

725
00:25:41,360 --> 00:25:47,918
um let's just say we have a code it

726
00:25:44,720 --> 00:25:48,320
to printed store source okay we might be

727
00:25:47,919 --> 00:25:50,480
just

728
00:25:48,320 --> 00:25:52,000
having the binary to run and not the

729
00:25:50,480 --> 00:25:54,400
program right

730
00:25:52,000 --> 00:25:56,400
so we might not know where the store and

731
00:25:54,400 --> 00:25:58,480
all so for coins they don't depend on

732
00:25:56,400 --> 00:26:00,000
any of this it's like you run the

733
00:25:58,480 --> 00:26:02,240
program and you get the source printed

734
00:26:00,000 --> 00:26:05,520
no strings attached

735
00:26:02,240 --> 00:26:08,960
okay yeah

736
00:26:05,520 --> 00:26:12,158
so here we see different examples of and

737
00:26:08,960 --> 00:26:12,799
types of points so first is constructive

738
00:26:12,159 --> 00:26:15,919
coins

739
00:26:12,799 --> 00:26:19,279
in general the method you know

740
00:26:15,919 --> 00:26:21,440
is used to create a coin in any program

741
00:26:19,279 --> 00:26:22,480
from a language you know is to have

742
00:26:21,440 --> 00:26:24,960
within the program

743
00:26:22,480 --> 00:26:26,240
two pieces it's like code and data i

744
00:26:24,960 --> 00:26:29,360
think i've mentioned before

745
00:26:26,240 --> 00:26:30,480
code and data so code is used to do the

746
00:26:29,360 --> 00:26:33,678
actual printing

747
00:26:30,480 --> 00:26:36,159
okay it's like in print hello print

748
00:26:33,679 --> 00:26:36,799
print is the code part hello is the data

749
00:26:36,159 --> 00:26:39,200
part

750
00:26:36,799 --> 00:26:40,720
right so there are data that represents

751
00:26:39,200 --> 00:26:41,919
the textual form of the code it's

752
00:26:40,720 --> 00:26:45,200
usually inside

753
00:26:41,919 --> 00:26:48,000
codes okay okay

754
00:26:45,200 --> 00:26:49,039
so the code functions you know by using

755
00:26:48,000 --> 00:26:52,000
the data

756
00:26:49,039 --> 00:26:52,559
to print the code which makes use of the

757
00:26:52,000 --> 00:26:55,279
data

758
00:26:52,559 --> 00:26:56,639
in sense it's like it represents the

759
00:26:55,279 --> 00:26:59,360
textual form of the code

760
00:26:56,640 --> 00:27:00,559
but it also uses the data processed in a

761
00:26:59,360 --> 00:27:02,320
very simple way

762
00:27:00,559 --> 00:27:04,840
to print you know the textual

763
00:27:02,320 --> 00:27:08,158
representation of the data itself

764
00:27:04,840 --> 00:27:10,000
right so it's like

765
00:27:08,159 --> 00:27:12,000
you know summarizing it's like code

766
00:27:10,000 --> 00:27:12,640
prints the data and the data has the

767
00:27:12,000 --> 00:27:16,159
code

768
00:27:12,640 --> 00:27:19,279
which prints itself eventually again

769
00:27:16,159 --> 00:27:20,720
the same reference to cells where when

770
00:27:19,279 --> 00:27:23,520
it replicates the dna

771
00:27:20,720 --> 00:27:25,200
is in it also replicates as the data in

772
00:27:23,520 --> 00:27:27,440
the code too

773
00:27:25,200 --> 00:27:27,440
right

774
00:27:28,399 --> 00:27:34,320
okay next is oroboros in auroburs the

775
00:27:31,919 --> 00:27:36,240
coin concept can be extended you know to

776
00:27:34,320 --> 00:27:39,439
multiple levels of recursion

777
00:27:36,240 --> 00:27:40,159
originating aurora's programs or you can

778
00:27:39,440 --> 00:27:43,200
also call it

779
00:27:40,159 --> 00:27:43,840
coin relays these coin relays or roboros

780
00:27:43,200 --> 00:27:46,000
programs

781
00:27:43,840 --> 00:27:47,600
which produce a chain of you know

782
00:27:46,000 --> 00:27:48,960
continuous files in different

783
00:27:47,600 --> 00:27:51,039
programming languages

784
00:27:48,960 --> 00:27:52,000
eventually coming back to the original

785
00:27:51,039 --> 00:27:54,640
source code

786
00:27:52,000 --> 00:27:56,399
okay it does you know it does its

787
00:27:54,640 --> 00:27:56,960
recursion and pops back to getting the

788
00:27:56,399 --> 00:27:59,840
source

789
00:27:56,960 --> 00:28:01,520
getting to the source so the next is

790
00:27:59,840 --> 00:28:04,240
multi coins

791
00:28:01,520 --> 00:28:05,039
multi coins and auroboros coins is not

792
00:28:04,240 --> 00:28:06,399
the same thing

793
00:28:05,039 --> 00:28:08,559
there might be a confusion at some

794
00:28:06,399 --> 00:28:11,678
points but it's not the same thing

795
00:28:08,559 --> 00:28:12,320
like multi coins one run normally it's a

796
00:28:11,679 --> 00:28:14,640
coin

797
00:28:12,320 --> 00:28:15,760
but if you know if it is called with a

798
00:28:14,640 --> 00:28:17,840
particular command line

799
00:28:15,760 --> 00:28:19,600
argument it will print a different

800
00:28:17,840 --> 00:28:21,360
program completely different program

801
00:28:19,600 --> 00:28:23,279
let's say it's a relative program it's a

802
00:28:21,360 --> 00:28:24,399
relative program that's which is also a

803
00:28:23,279 --> 00:28:25,600
coin

804
00:28:24,399 --> 00:28:27,678
but then again in a different

805
00:28:25,600 --> 00:28:30,559
programming language okay so

806
00:28:27,679 --> 00:28:32,559
the second one prints its own listings

807
00:28:30,559 --> 00:28:35,440
when run normally

808
00:28:32,559 --> 00:28:36,639
right but when it's run with a different

809
00:28:35,440 --> 00:28:39,600
command line argument

810
00:28:36,640 --> 00:28:40,080
or let's say a fixed particular command

811
00:28:39,600 --> 00:28:42,559
line

812
00:28:40,080 --> 00:28:44,000
argument it prints listing of the

813
00:28:42,559 --> 00:28:47,200
original program that's the parent

814
00:28:44,000 --> 00:28:49,440
program the first relative okay

815
00:28:47,200 --> 00:28:50,960
so summarizing multi coin is a set of

816
00:28:49,440 --> 00:28:53,520
two pro two programs or

817
00:28:50,960 --> 00:28:55,440
maybe two made to be two or more which

818
00:28:53,520 --> 00:28:58,320
is able to print either

819
00:28:55,440 --> 00:29:00,559
of the two like it's it's a set of n

820
00:28:58,320 --> 00:29:02,799
different programs like not just two

821
00:29:00,559 --> 00:29:03,840
in n different languages each of which

822
00:29:02,799 --> 00:29:06,960
is able to print

823
00:29:03,840 --> 00:29:08,879
any of the n programs it can also be

824
00:29:06,960 --> 00:29:10,480
including itself the parent

825
00:29:08,880 --> 00:29:12,399
parent coin according to the command

826
00:29:10,480 --> 00:29:15,520
line argument which is passed

827
00:29:12,399 --> 00:29:18,479
okay so summarizing it's like

828
00:29:15,520 --> 00:29:18,799
multiple recursive probability of coins

829
00:29:18,480 --> 00:29:22,159
of

830
00:29:18,799 --> 00:29:24,080
number of languages right okay so

831
00:29:22,159 --> 00:29:27,360
another misunderstanding

832
00:29:24,080 --> 00:29:28,320
is polygon coins is a coin that can be

833
00:29:27,360 --> 00:29:31,360
read

834
00:29:28,320 --> 00:29:33,120
right and is up is also a coin in

835
00:29:31,360 --> 00:29:36,240
several different languages right

836
00:29:33,120 --> 00:29:38,559
so this might sound same as multi

837
00:29:36,240 --> 00:29:39,520
coins but no it's not multi coin it's

838
00:29:38,559 --> 00:29:42,158
it's you know

839
00:29:39,520 --> 00:29:42,559
if you think about it it's it pretty

840
00:29:42,159 --> 00:29:45,360
much

841
00:29:42,559 --> 00:29:47,039
fits in the definition of multi coins it

842
00:29:45,360 --> 00:29:49,678
can be a subset but it's

843
00:29:47,039 --> 00:29:50,640
completely not a multi coin okay so

844
00:29:49,679 --> 00:29:52,720
polygon coin

845
00:29:50,640 --> 00:29:53,760
could be thought of generalization of a

846
00:29:52,720 --> 00:29:55,679
multi coil

847
00:29:53,760 --> 00:29:57,600
it does the same thing but it doesn't

848
00:29:55,679 --> 00:29:59,760
need you know command line arguments

849
00:29:57,600 --> 00:30:01,760
and all you know of the programs that

850
00:29:59,760 --> 00:30:05,279
are identical or the

851
00:30:01,760 --> 00:30:07,919
child coin or something like that right

852
00:30:05,279 --> 00:30:10,320
so the next one is a radiation hardened

853
00:30:07,919 --> 00:30:13,360
i have no idea who's keeping these names

854
00:30:10,320 --> 00:30:14,720
radius and hard hardened or worse okay a

855
00:30:13,360 --> 00:30:17,199
radiation haran coin

856
00:30:14,720 --> 00:30:18,960
is like a coin that can be you know have

857
00:30:17,200 --> 00:30:21,440
a single character removed

858
00:30:18,960 --> 00:30:22,640
and it still produces the original

859
00:30:21,440 --> 00:30:25,600
program the original

860
00:30:22,640 --> 00:30:27,360
data that we inputted with no like

861
00:30:25,600 --> 00:30:29,279
literally no missing characters

862
00:30:27,360 --> 00:30:30,959
this seems like magic like how you just

863
00:30:29,279 --> 00:30:32,399
lost a part of your body and

864
00:30:30,960 --> 00:30:34,960
again you come up with this complete

865
00:30:32,399 --> 00:30:37,120
part of your body how does that happen

866
00:30:34,960 --> 00:30:39,039
but yeah it's that particular fixed

867
00:30:37,120 --> 00:30:40,239
point as i discussed in clean's

868
00:30:39,039 --> 00:30:42,000
recursion theorem

869
00:30:40,240 --> 00:30:43,840
it's that what makes you know still

870
00:30:42,000 --> 00:30:44,399
makes it a coin difficult to get there

871
00:30:43,840 --> 00:30:47,520
but yeah

872
00:30:44,399 --> 00:30:50,080
fun okay so

873
00:30:47,520 --> 00:30:51,600
eval points something you know some

874
00:30:50,080 --> 00:30:52,639
programming languages might have the

875
00:30:51,600 --> 00:30:56,480
ability to

876
00:30:52,640 --> 00:30:58,559
evaluate a string as a program not many

877
00:30:56,480 --> 00:31:00,399
but there are yeah a few that has that

878
00:30:58,559 --> 00:31:02,480
functionality running

879
00:31:00,399 --> 00:31:03,840
okay coins can take advantage of this

880
00:31:02,480 --> 00:31:05,840
feature val is

881
00:31:03,840 --> 00:31:08,080
actually one of the easiest way to you

882
00:31:05,840 --> 00:31:09,918
know write the coin since it reduces the

883
00:31:08,080 --> 00:31:12,000
need to continuously copy the code and

884
00:31:09,919 --> 00:31:14,320
paste it the copy the data part

885
00:31:12,000 --> 00:31:15,360
put it in the code copy the code bar and

886
00:31:14,320 --> 00:31:17,519
put in the data

887
00:31:15,360 --> 00:31:19,600
stuff like that so like before we had a

888
00:31:17,519 --> 00:31:21,840
loop of you know code running data

889
00:31:19,600 --> 00:31:24,080
and data having code and all as in the

890
00:31:21,840 --> 00:31:25,600
majority of the coins require two copies

891
00:31:24,080 --> 00:31:29,600
of code as i said

892
00:31:25,600 --> 00:31:32,158
one to be executed one as data right

893
00:31:29,600 --> 00:31:33,519
so this can end up in doubling the

894
00:31:32,159 --> 00:31:36,240
length of the source code

895
00:31:33,519 --> 00:31:36,640
making it harder to maintain obviously

896
00:31:36,240 --> 00:31:39,120
so

897
00:31:36,640 --> 00:31:40,640
trying to treat your code as data is

898
00:31:39,120 --> 00:31:43,120
often not possible right

899
00:31:40,640 --> 00:31:44,840
treating data score can be done in many

900
00:31:43,120 --> 00:31:47,840
languages using

901
00:31:44,840 --> 00:31:47,840
eval

902
00:31:48,159 --> 00:31:52,480
your coin basically consists of storing

903
00:31:50,480 --> 00:31:54,399
the main body of your coin

904
00:31:52,480 --> 00:31:55,519
in a variable then evaluating that

905
00:31:54,399 --> 00:31:57,840
variable that's pretty

906
00:31:55,519 --> 00:32:00,080
you know basic kind of coin basic

907
00:31:57,840 --> 00:32:03,199
instance easy quite a coin

908
00:32:00,080 --> 00:32:05,519
okay that's something that's more easier

909
00:32:03,200 --> 00:32:07,919
and i don't know why it's in you know in

910
00:32:05,519 --> 00:32:09,919
the classification it's cheat coins

911
00:32:07,919 --> 00:32:12,399
they seem self-explanatory as i

912
00:32:09,919 --> 00:32:15,120
mentioned on how

913
00:32:12,399 --> 00:32:18,158
you know coins don't need location or

914
00:32:15,120 --> 00:32:20,559
file or have the physical file

915
00:32:18,159 --> 00:32:21,679
files accessibility and auto reproduce

916
00:32:20,559 --> 00:32:24,480
the source

917
00:32:21,679 --> 00:32:26,159
so what is the point of not coding and

918
00:32:24,480 --> 00:32:27,679
directly you know getting the print of

919
00:32:26,159 --> 00:32:30,399
the source code but

920
00:32:27,679 --> 00:32:32,480
again you know those cheat points fit

921
00:32:30,399 --> 00:32:35,279
perfectly under the definition of coins

922
00:32:32,480 --> 00:32:37,120
it it's a program that's run and you

923
00:32:35,279 --> 00:32:40,399
know it prints the output so i'll just

924
00:32:37,120 --> 00:32:43,518
give it that acknowledgement to them

925
00:32:40,399 --> 00:32:46,320
okay so yeah two types

926
00:32:43,519 --> 00:32:48,080
so source code inspect it's like coins

927
00:32:46,320 --> 00:32:51,360
per definition cannot receive

928
00:32:48,080 --> 00:32:53,120
any form of input including reading file

929
00:32:51,360 --> 00:32:54,719
which means that a coin is considered to

930
00:32:53,120 --> 00:32:58,239
be cheating right it

931
00:32:54,720 --> 00:33:00,399
if it looks at its own source code

932
00:32:58,240 --> 00:33:01,440
in many functional you know functional

933
00:33:00,399 --> 00:33:04,320
languages

934
00:33:01,440 --> 00:33:05,679
like numbers are self-evaluating it's

935
00:33:04,320 --> 00:33:07,519
like

936
00:33:05,679 --> 00:33:09,840
when you print one it's like a one byte

937
00:33:07,519 --> 00:33:11,120
coin if you know the last line of the

938
00:33:09,840 --> 00:33:13,519
program is returning

939
00:33:11,120 --> 00:33:14,959
the returned value is displaced

940
00:33:13,519 --> 00:33:16,720
displayed on the screen therefore

941
00:33:14,960 --> 00:33:18,880
and it's like in such language

942
00:33:16,720 --> 00:33:20,000
programming is right containing a single

943
00:33:18,880 --> 00:33:22,880
digit result

944
00:33:20,000 --> 00:33:24,799
in a one byte coin since such score does

945
00:33:22,880 --> 00:33:26,880
not construct itself it's like

946
00:33:24,799 --> 00:33:27,918
it's like a proper tapes it doesn't

947
00:33:26,880 --> 00:33:30,320
construct itself

948
00:33:27,919 --> 00:33:33,120
this is often considered cheating so

949
00:33:30,320 --> 00:33:36,320
that's not a proper coin

950
00:33:33,120 --> 00:33:39,678
i'll try to give a few examples or demos

951
00:33:36,320 --> 00:33:42,720
if time permits is the end of the dock

952
00:33:39,679 --> 00:33:44,000
yeah okay so we will take an example of

953
00:33:42,720 --> 00:33:46,399
this python coin

954
00:33:44,000 --> 00:33:48,240
which prints itself okay so as i

955
00:33:46,399 --> 00:33:50,879
mentioned it has a code part

956
00:33:48,240 --> 00:33:51,519
and a data part here the data part is

957
00:33:50,880 --> 00:33:54,559
inside

958
00:33:51,519 --> 00:33:56,480
the codes okay

959
00:33:54,559 --> 00:33:58,639
so and the rest is the code part which

960
00:33:56,480 --> 00:34:03,760
runs the whole thing and gets the code

961
00:33:58,640 --> 00:34:05,760
replicated as it is all right

962
00:34:03,760 --> 00:34:07,440
let's just take a look at how this work

963
00:34:05,760 --> 00:34:09,440
i start with the skeleton

964
00:34:07,440 --> 00:34:11,599
and then add on explaining it to explain

965
00:34:09,440 --> 00:34:11,599
the

966
00:34:12,960 --> 00:34:18,000
oh okay

967
00:34:20,480 --> 00:34:26,159
okay so we give the variable

968
00:34:23,599 --> 00:34:28,320
no value printed nothing happens there

969
00:34:26,159 --> 00:34:28,320
right

970
00:34:29,760 --> 00:34:32,879
we give the variable the data part in

971
00:34:31,839 --> 00:34:35,440
string

972
00:34:32,879 --> 00:34:37,679
here we've given a variable with you

973
00:34:35,440 --> 00:34:38,399
know the first program we wrote to print

974
00:34:37,679 --> 00:34:40,320
that

975
00:34:38,399 --> 00:34:42,480
you know and we call it recursively the

976
00:34:40,320 --> 00:34:45,839
percent is r is to call it recursively

977
00:34:42,480 --> 00:34:48,639
again usually usually it prints the data

978
00:34:45,839 --> 00:34:49,440
now we have to you know print the print

979
00:34:48,639 --> 00:34:52,000
function

980
00:34:49,440 --> 00:34:54,159
that should come out as output right so

981
00:34:52,000 --> 00:34:57,040
we add that data

982
00:34:54,159 --> 00:34:58,240
next is like we have to print this as

983
00:34:57,040 --> 00:35:00,560
string

984
00:34:58,240 --> 00:35:02,160
i add yeah we've added percentage s

985
00:35:00,560 --> 00:35:04,560
along now that we have added a

986
00:35:02,160 --> 00:35:05,920
percentage s we have to have a

987
00:35:04,560 --> 00:35:08,078
you know something that to print

988
00:35:05,920 --> 00:35:09,599
percentages so that's where we use

989
00:35:08,079 --> 00:35:12,000
percentage percentages

990
00:35:09,599 --> 00:35:15,119
to print percentages and there we go we

991
00:35:12,000 --> 00:35:19,040
have a super easy coin program

992
00:35:15,119 --> 00:35:19,040
separate which prints itself right

993
00:35:21,040 --> 00:35:25,279
next slide okay so let's just say we

994
00:35:24,720 --> 00:35:28,399
have

995
00:35:25,280 --> 00:35:29,200
this is a fun thing it's not again what

996
00:35:28,400 --> 00:35:32,240
i said it's not

997
00:35:29,200 --> 00:35:33,118
sql queen sql injection but it's a type

998
00:35:32,240 --> 00:35:36,479
of

999
00:35:33,119 --> 00:35:38,800
attack it's a type of injection in coins

1000
00:35:36,480 --> 00:35:39,839
okay so let's just say we have we would

1001
00:35:38,800 --> 00:35:43,760
like to add

1002
00:35:39,839 --> 00:35:46,880
viral payloads to the coin but we

1003
00:35:43,760 --> 00:35:49,200
we do not want to harm its self uh you

1004
00:35:46,880 --> 00:35:52,560
know reproductive ability

1005
00:35:49,200 --> 00:35:53,598
right so to achieve this we can use

1006
00:35:52,560 --> 00:35:56,078
introns

1007
00:35:53,599 --> 00:35:57,040
which are like uh you know pieces of

1008
00:35:56,079 --> 00:36:00,320
coin data

1009
00:35:57,040 --> 00:36:00,880
that are not used to output the coin

1010
00:36:00,320 --> 00:36:03,440
code

1011
00:36:00,880 --> 00:36:04,240
but there are also you know copied when

1012
00:36:03,440 --> 00:36:06,160
the data is

1013
00:36:04,240 --> 00:36:08,479
returned the output it's like

1014
00:36:06,160 --> 00:36:10,720
non-essential coin

1015
00:36:08,480 --> 00:36:12,160
data but you know the portions of data

1016
00:36:10,720 --> 00:36:14,640
that are not used in

1017
00:36:12,160 --> 00:36:16,319
the dna to produce proteins it's like

1018
00:36:14,640 --> 00:36:19,359
you get 88 percentage

1019
00:36:16,320 --> 00:36:20,240
of your parents yeah dna but the rest is

1020
00:36:19,359 --> 00:36:21,359
like

1021
00:36:20,240 --> 00:36:24,078
i don't know what rest is i don't know

1022
00:36:21,359 --> 00:36:26,319
biology yeah it's like it's useless but

1023
00:36:24,079 --> 00:36:28,560
it gets copy copied

1024
00:36:26,320 --> 00:36:30,880
right you know it's not useless it could

1025
00:36:28,560 --> 00:36:34,160
go it's get it gets copied

1026
00:36:30,880 --> 00:36:35,200
so that's introns like it's copied but

1027
00:36:34,160 --> 00:36:38,799
it doesn't affect the

1028
00:36:35,200 --> 00:36:42,160
product productive ability of coins

1029
00:36:38,800 --> 00:36:43,760
okay so yeah as i said uh coins uh coins

1030
00:36:42,160 --> 00:36:45,680
in drones are reproduced along with the

1031
00:36:43,760 --> 00:36:47,760
coin but they're not necessary

1032
00:36:45,680 --> 00:36:49,359
to be you know to the self-reproducing

1033
00:36:47,760 --> 00:36:51,680
ability of the coin

1034
00:36:49,359 --> 00:36:52,720
yeah so therefore an intron can be you

1035
00:36:51,680 --> 00:36:55,359
know modified

1036
00:36:52,720 --> 00:36:57,279
without a reproductive penalty making

1037
00:36:55,359 --> 00:37:00,000
entrance the perfect place

1038
00:36:57,280 --> 00:37:01,760
to put sql injection attacks right and

1039
00:37:00,000 --> 00:37:03,680
yeah that it doesn't contribute directly

1040
00:37:01,760 --> 00:37:06,079
to the functionality of a coin as it and

1041
00:37:03,680 --> 00:37:08,799
it placed no part in replication but it

1042
00:37:06,079 --> 00:37:11,359
just gets copied

1043
00:37:08,800 --> 00:37:11,359
next slide

1044
00:37:12,160 --> 00:37:15,598
yeah let's see uh

1045
00:37:16,400 --> 00:37:21,200
okay so basic intron injecting somehow

1046
00:37:19,200 --> 00:37:23,680
it responds like

1047
00:37:21,200 --> 00:37:26,319
yeah now this is an input method which

1048
00:37:23,680 --> 00:37:27,040
takes input from users and injects it in

1049
00:37:26,320 --> 00:37:30,000
coins

1050
00:37:27,040 --> 00:37:33,440
right so like it prints the coin and

1051
00:37:30,000 --> 00:37:36,079
also prints the input user gives

1052
00:37:33,440 --> 00:37:37,839
okay so it's waiting so we have an intro

1053
00:37:36,079 --> 00:37:40,079
and it's waiting for an input

1054
00:37:37,839 --> 00:37:41,119
right because for us it's waiting for us

1055
00:37:40,079 --> 00:37:43,280
input something

1056
00:37:41,119 --> 00:37:44,400
because because of the input function it

1057
00:37:43,280 --> 00:37:46,880
was waiting for us

1058
00:37:44,400 --> 00:37:48,480
so when we don't keep anything it just

1059
00:37:46,880 --> 00:37:51,040
prints the whole coin as it is

1060
00:37:48,480 --> 00:37:52,880
no inject part it just does the

1061
00:37:51,040 --> 00:37:55,119
self-replication and inputs it

1062
00:37:52,880 --> 00:37:56,640
i mean uh produces the replication

1063
00:37:55,119 --> 00:37:59,520
replicated code

1064
00:37:56,640 --> 00:38:01,359
this is practically the main source code

1065
00:37:59,520 --> 00:38:02,000
so now that we give hello or something

1066
00:38:01,359 --> 00:38:04,400
right

1067
00:38:02,000 --> 00:38:05,440
what happens is it's printed along as i

1068
00:38:04,400 --> 00:38:08,240
told the data

1069
00:38:05,440 --> 00:38:09,680
is also printed along it's like just

1070
00:38:08,240 --> 00:38:12,000
that we've

1071
00:38:09,680 --> 00:38:14,319
what the same it is yeah it's printed

1072
00:38:12,000 --> 00:38:16,240
along with the coin here the function of

1073
00:38:14,320 --> 00:38:18,400
the coin is still doing fine

1074
00:38:16,240 --> 00:38:20,000
just that we've injected a few bits

1075
00:38:18,400 --> 00:38:21,680
which are practically useless in the

1076
00:38:20,000 --> 00:38:23,440
replication process the hello part is

1077
00:38:21,680 --> 00:38:25,919
practically useless in the replication

1078
00:38:23,440 --> 00:38:26,560
process without which it can replicate

1079
00:38:25,920 --> 00:38:28,320
also with

1080
00:38:26,560 --> 00:38:29,599
with if even if it's there it can

1081
00:38:28,320 --> 00:38:32,320
replicate also

1082
00:38:29,599 --> 00:38:34,640
but can be of great use in lots of grey

1083
00:38:32,320 --> 00:38:34,640
areas

1084
00:38:39,119 --> 00:38:43,119
okay so now coming to coin sql

1085
00:38:42,079 --> 00:38:45,119
injections

1086
00:38:43,119 --> 00:38:46,880
so basically we've checked on sql

1087
00:38:45,119 --> 00:38:50,640
injections and coins

1088
00:38:46,880 --> 00:38:52,800
right okay and you put them in a box

1089
00:38:50,640 --> 00:38:55,598
together and we get coin sql ejections

1090
00:38:52,800 --> 00:38:56,320
like if it's a select name from table

1091
00:38:55,599 --> 00:38:58,400
the output

1092
00:38:56,320 --> 00:38:59,599
is also select name from table so the

1093
00:38:58,400 --> 00:39:02,160
first thing will be like

1094
00:38:59,599 --> 00:39:03,040
where does this work or like how does

1095
00:39:02,160 --> 00:39:05,359
this

1096
00:39:03,040 --> 00:39:07,520
how is this going to be useful so i

1097
00:39:05,359 --> 00:39:10,000
missed out one cool thing about coins

1098
00:39:07,520 --> 00:39:10,880
coin school injection you know can all

1099
00:39:10,000 --> 00:39:13,280
be like

1100
00:39:10,880 --> 00:39:14,800
yes it's it has a very certain purpose

1101
00:39:13,280 --> 00:39:17,119
which is concerning

1102
00:39:14,800 --> 00:39:18,800
but what about what you know something

1103
00:39:17,119 --> 00:39:21,119
about coins is that

1104
00:39:18,800 --> 00:39:22,720
we have competitions as to who can build

1105
00:39:21,119 --> 00:39:24,640
the perfect kind of coin

1106
00:39:22,720 --> 00:39:25,759
or let's just say radius inherent coins

1107
00:39:24,640 --> 00:39:27,520
it's like

1108
00:39:25,760 --> 00:39:29,520
what to say who can construct a coin

1109
00:39:27,520 --> 00:39:31,280
without cheat coins by omitting two

1110
00:39:29,520 --> 00:39:32,480
characters three characters or n number

1111
00:39:31,280 --> 00:39:34,560
of characters that print the

1112
00:39:32,480 --> 00:39:36,000
parent coin and stuff but a sql

1113
00:39:34,560 --> 00:39:37,759
injection coins is more than

1114
00:39:36,000 --> 00:39:39,119
just you know fun programming and like

1115
00:39:37,760 --> 00:39:40,880
you know other kinds of physical

1116
00:39:39,119 --> 00:39:43,119
injections doesn't need any kind you

1117
00:39:40,880 --> 00:39:46,560
know any control on data

1118
00:39:43,119 --> 00:39:48,079
where it is or how it is put up on the

1119
00:39:46,560 --> 00:39:50,000
table the arrangement

1120
00:39:48,079 --> 00:39:51,760
or that sort of stuff so even if it's a

1121
00:39:50,000 --> 00:39:54,560
ghost table or like

1122
00:39:51,760 --> 00:39:55,119
even if the whole table is empty or

1123
00:39:54,560 --> 00:39:57,759
returns

1124
00:39:55,119 --> 00:39:58,960
null values for queries these coins

1125
00:39:57,760 --> 00:40:01,359
right

1126
00:39:58,960 --> 00:40:03,119
you know it can still work it's like

1127
00:40:01,359 --> 00:40:05,200
it's amazing it can still work so one

1128
00:40:03,119 --> 00:40:07,760
thing is like it's not very common

1129
00:40:05,200 --> 00:40:10,879
like you cannot see this injection

1130
00:40:07,760 --> 00:40:13,839
everywhere it's not a severe bug or so

1131
00:40:10,880 --> 00:40:15,760
and why does it work this way this can

1132
00:40:13,839 --> 00:40:18,319
you know without any dependence of that

1133
00:40:15,760 --> 00:40:19,839
actually can be understood from where it

1134
00:40:18,319 --> 00:40:22,240
works

1135
00:40:19,839 --> 00:40:23,680
okay so here we can see that the

1136
00:40:22,240 --> 00:40:26,160
resultant array of the query

1137
00:40:23,680 --> 00:40:27,919
is you know in the variable r and they

1138
00:40:26,160 --> 00:40:28,560
are checking if the resultant password

1139
00:40:27,920 --> 00:40:30,319
and the

1140
00:40:28,560 --> 00:40:32,160
password is same as the input we've

1141
00:40:30,319 --> 00:40:34,000
given right so which is like yeah the

1142
00:40:32,160 --> 00:40:36,399
right password to crack it

1143
00:40:34,000 --> 00:40:37,200
so basically what we have to give is

1144
00:40:36,400 --> 00:40:38,960
that sir

1145
00:40:37,200 --> 00:40:41,200
it should be something same as a

1146
00:40:38,960 --> 00:40:42,240
resultant of the output of the input we

1147
00:40:41,200 --> 00:40:45,598
give

1148
00:40:42,240 --> 00:40:47,759
right so simple as that input a coin

1149
00:40:45,599 --> 00:40:50,240
and check you know the check will be

1150
00:40:47,760 --> 00:40:52,000
satisfied since coin will produce itself

1151
00:40:50,240 --> 00:40:54,319
and the authentication is done but how

1152
00:40:52,000 --> 00:40:56,079
does this work in an empty table

1153
00:40:54,319 --> 00:40:57,759
of you know something which responds

1154
00:40:56,079 --> 00:41:00,160
null statements

1155
00:40:57,760 --> 00:41:00,800
practically oh am i running out of time

1156
00:41:00,160 --> 00:41:03,440
okay

1157
00:41:00,800 --> 00:41:04,319
practically this whole check only

1158
00:41:03,440 --> 00:41:06,400
depends on

1159
00:41:04,319 --> 00:41:07,440
if the input and results are you know

1160
00:41:06,400 --> 00:41:09,200
same and

1161
00:41:07,440 --> 00:41:11,280
the authentication is done okay no

1162
00:41:09,200 --> 00:41:12,240
matter what's in the table database or

1163
00:41:11,280 --> 00:41:14,319
date tables

1164
00:41:12,240 --> 00:41:16,000
where it is organized you know we don't

1165
00:41:14,319 --> 00:41:17,920
have to go to all that

1166
00:41:16,000 --> 00:41:20,400
get the you know get the database name

1167
00:41:17,920 --> 00:41:21,920
from schema table names column names row

1168
00:41:20,400 --> 00:41:24,880
names and thoughts are said no it's like

1169
00:41:21,920 --> 00:41:24,880
a direct win win

1170
00:41:25,359 --> 00:41:29,839
okay so coins are not you know only the

1171
00:41:28,400 --> 00:41:31,200
option here right obviously there's a

1172
00:41:29,839 --> 00:41:32,799
lot of possibilities

1173
00:41:31,200 --> 00:41:34,319
sql injection attacks that can be done

1174
00:41:32,800 --> 00:41:36,160
here like you can

1175
00:41:34,319 --> 00:41:37,680
actually find the password through blind

1176
00:41:36,160 --> 00:41:39,359
sql ejection it's like it's

1177
00:41:37,680 --> 00:41:42,078
as i told it's pretty difficult it's a

1178
00:41:39,359 --> 00:41:43,920
darn long ride for an attacker

1179
00:41:42,079 --> 00:41:45,680
you know let's just say it's attack of

1180
00:41:43,920 --> 00:41:47,680
the row does not actually exist in the

1181
00:41:45,680 --> 00:41:50,879
database or the password is a whole

1182
00:41:47,680 --> 00:41:52,879
hash or something right so with

1183
00:41:50,880 --> 00:41:53,920
two or four statements how long can we

1184
00:41:52,880 --> 00:41:57,599
sit it's like

1185
00:41:53,920 --> 00:42:00,720
uh you know tiring right

1186
00:41:57,599 --> 00:42:02,319
yeah next thing next possible attack

1187
00:42:00,720 --> 00:42:06,399
this could be like a union

1188
00:42:02,319 --> 00:42:09,359
injection right so this is yeah this

1189
00:42:06,400 --> 00:42:10,079
is not that tiring this is let's just

1190
00:42:09,359 --> 00:42:12,560
say you

1191
00:42:10,079 --> 00:42:13,520
see you have considering the info column

1192
00:42:12,560 --> 00:42:16,640
of the information

1193
00:42:13,520 --> 00:42:17,359
schema process it can't con you know it

1194
00:42:16,640 --> 00:42:20,720
contains

1195
00:42:17,359 --> 00:42:23,680
the currently executing queries right

1196
00:42:20,720 --> 00:42:26,000
so we can make use of that so mysql

1197
00:42:23,680 --> 00:42:27,919
process actually indicates

1198
00:42:26,000 --> 00:42:29,040
operations that are performed you know

1199
00:42:27,920 --> 00:42:30,640
performed currently

1200
00:42:29,040 --> 00:42:32,640
it's like by the set of threads

1201
00:42:30,640 --> 00:42:35,040
executing within the cell

1202
00:42:32,640 --> 00:42:37,200
so the info part of the process list

1203
00:42:35,040 --> 00:42:39,359
like that contains the statements

1204
00:42:37,200 --> 00:42:42,640
the you know the thread is executing

1205
00:42:39,359 --> 00:42:44,560
okay or null if no statement is executed

1206
00:42:42,640 --> 00:42:47,200
the statement might be the one sent to

1207
00:42:44,560 --> 00:42:49,839
the server or the innermost statement

1208
00:42:47,200 --> 00:42:51,919
okay so here we've used union select one

1209
00:42:49,839 --> 00:42:52,880
admin database from information schema

1210
00:42:51,920 --> 00:42:55,280
dot process list

1211
00:42:52,880 --> 00:42:56,720
so this invokes the process list and

1212
00:42:55,280 --> 00:42:59,280
obviously it would print

1213
00:42:56,720 --> 00:42:59,919
the same query executed as in the query

1214
00:42:59,280 --> 00:43:03,599
wave

1215
00:42:59,920 --> 00:43:06,079
given input right so here

1216
00:43:03,599 --> 00:43:06,960
we'll see how the process list works so

1217
00:43:06,079 --> 00:43:09,119
i'm running

1218
00:43:06,960 --> 00:43:10,319
the statement to show how the full

1219
00:43:09,119 --> 00:43:13,280
process list and

1220
00:43:10,319 --> 00:43:14,000
info you see in the process is printed

1221
00:43:13,280 --> 00:43:16,240
so i've

1222
00:43:14,000 --> 00:43:17,119
written show process list and it's given

1223
00:43:16,240 --> 00:43:19,680
okay

1224
00:43:17,119 --> 00:43:21,280
yeah here in the info it actually prints

1225
00:43:19,680 --> 00:43:24,000
show process list

1226
00:43:21,280 --> 00:43:24,319
so it's like the process that's executed

1227
00:43:24,000 --> 00:43:27,200
is

1228
00:43:24,319 --> 00:43:27,920
run i mean uh process that ex has been

1229
00:43:27,200 --> 00:43:31,359
run is

1230
00:43:27,920 --> 00:43:33,359
executed as the output okay

1231
00:43:31,359 --> 00:43:35,440
so we hop on to this demo and last

1232
00:43:33,359 --> 00:43:37,200
demonstration part

1233
00:43:35,440 --> 00:43:38,960
that's quite an sql injection that's one

1234
00:43:37,200 --> 00:43:41,200
of the easy thing on our

1235
00:43:38,960 --> 00:43:42,960
hands now so this might this look

1236
00:43:41,200 --> 00:43:44,560
disturbingly confusing right but

1237
00:43:42,960 --> 00:43:46,960
i'll break it down and make it look

1238
00:43:44,560 --> 00:43:48,240
easier so here we are just recursively

1239
00:43:46,960 --> 00:43:50,880
you know replacing

1240
00:43:48,240 --> 00:43:51,359
to put back to the same initial query

1241
00:43:50,880 --> 00:43:53,599
right

1242
00:43:51,359 --> 00:43:55,520
and the data part according to if we

1243
00:43:53,599 --> 00:43:58,319
need a single quote or double quote

1244
00:43:55,520 --> 00:43:59,759
so if we need a single quote we replace

1245
00:43:58,319 --> 00:44:00,160
you know replace double quotes to make

1246
00:43:59,760 --> 00:44:02,720
uh

1247
00:44:00,160 --> 00:44:04,960
turn back to single quotes just like

1248
00:44:02,720 --> 00:44:07,279
that so i'll show you the breakdown

1249
00:44:04,960 --> 00:44:08,000
so yeah here when we in this breakdown

1250
00:44:07,280 --> 00:44:10,240
when we pass

1251
00:44:08,000 --> 00:44:11,839
the innermost data part the replace

1252
00:44:10,240 --> 00:44:13,680
statement will do its work

1253
00:44:11,839 --> 00:44:15,599
and we see that double quotes are

1254
00:44:13,680 --> 00:44:17,759
converted to single quotes

1255
00:44:15,599 --> 00:44:19,839
in like the in the second inner replace

1256
00:44:17,760 --> 00:44:22,079
we replace character of 36

1257
00:44:19,839 --> 00:44:23,920
our of our last output but the new

1258
00:44:22,079 --> 00:44:24,400
statement and end up bouncing back to

1259
00:44:23,920 --> 00:44:26,000
our

1260
00:44:24,400 --> 00:44:28,079
input program that's like the source

1261
00:44:26,000 --> 00:44:32,079
program right

1262
00:44:28,079 --> 00:44:32,079
so i'll show up this query and the

1263
00:44:35,040 --> 00:44:39,759
this is basically our query run so we've

1264
00:44:38,000 --> 00:44:40,800
given the same input and gives the same

1265
00:44:39,760 --> 00:44:42,800
output

1266
00:44:40,800 --> 00:44:44,880
right so that's a coin we have the coin

1267
00:44:42,800 --> 00:44:47,040
with us so let's try this demo

1268
00:44:44,880 --> 00:44:48,880
so here in this check let's just try a

1269
00:44:47,040 --> 00:44:50,960
basic attack and see how the

1270
00:44:48,880 --> 00:44:53,119
server you know responds to it so we

1271
00:44:50,960 --> 00:44:54,560
close the codes and do a union select or

1272
00:44:53,119 --> 00:44:57,119
something

1273
00:44:54,560 --> 00:44:58,720
right okay i'll show the demonstration

1274
00:44:57,119 --> 00:45:01,040
directly

1275
00:44:58,720 --> 00:45:01,040
okay

1276
00:45:02,880 --> 00:45:06,319
yeah here we can see that we close the

1277
00:45:05,839 --> 00:45:08,240
codes

1278
00:45:06,319 --> 00:45:10,079
and do a union select one or something

1279
00:45:08,240 --> 00:45:12,078
it's it's like you know when we give it

1280
00:45:10,079 --> 00:45:12,960
us password so basically the initial

1281
00:45:12,079 --> 00:45:15,040
check on

1282
00:45:12,960 --> 00:45:16,000
what kind of sql can be spent injection

1283
00:45:15,040 --> 00:45:17,680
can be used

1284
00:45:16,000 --> 00:45:20,400
if we if at all you know we don't have

1285
00:45:17,680 --> 00:45:21,680
the source code or authentication

1286
00:45:20,400 --> 00:45:23,760
you don't know what the authentication

1287
00:45:21,680 --> 00:45:25,440
or it's a blackboard box testing

1288
00:45:23,760 --> 00:45:27,040
something like that but what's going on

1289
00:45:25,440 --> 00:45:29,839
is not known so basically

1290
00:45:27,040 --> 00:45:30,640
start off with something basic queries

1291
00:45:29,839 --> 00:45:33,279
to put out

1292
00:45:30,640 --> 00:45:34,319
you know errors or hints which can help

1293
00:45:33,280 --> 00:45:36,720
us you know fi

1294
00:45:34,319 --> 00:45:38,480
find what kind of injection can be done

1295
00:45:36,720 --> 00:45:41,040
error based or flying base

1296
00:45:38,480 --> 00:45:43,119
so yeah here we have the response as

1297
00:45:41,040 --> 00:45:45,040
password equals one

1298
00:45:43,119 --> 00:45:46,480
the one we gave in the query right so

1299
00:45:45,040 --> 00:45:48,640
basically we're gonna make

1300
00:45:46,480 --> 00:45:50,640
one equals to the inject query that we

1301
00:45:48,640 --> 00:45:53,759
provide obviously our new

1302
00:45:50,640 --> 00:45:54,400
favorite option coins here in the point

1303
00:45:53,760 --> 00:45:57,040
query

1304
00:45:54,400 --> 00:45:57,839
we add the in you know the input code

1305
00:45:57,040 --> 00:46:00,240
and put a code

1306
00:45:57,839 --> 00:46:01,520
combine the union and comment down the

1307
00:46:00,240 --> 00:46:03,759
comment of the rest

1308
00:46:01,520 --> 00:46:05,440
right so it's like we clear the

1309
00:46:03,760 --> 00:46:06,880
authentication check easily with this

1310
00:46:05,440 --> 00:46:14,880
coin

1311
00:46:06,880 --> 00:46:17,599
okay we can we have to encode it

1312
00:46:14,880 --> 00:46:18,480
yeah when we give it us the password

1313
00:46:17,599 --> 00:46:20,319
input

1314
00:46:18,480 --> 00:46:22,240
yeah it's it's the same what we gave as

1315
00:46:20,319 --> 00:46:24,000
input is output and we've cleared that

1316
00:46:22,240 --> 00:46:27,439
the authentication check is clear and

1317
00:46:24,000 --> 00:46:31,200
clear right so finally

1318
00:46:27,440 --> 00:46:34,400
yeah finally it's prevention it's like

1319
00:46:31,200 --> 00:46:35,919
our host said expedition has been there

1320
00:46:34,400 --> 00:46:38,960
it's it's still going on and

1321
00:46:35,920 --> 00:46:39,440
it's not gonna stop anytime soon so i'm

1322
00:46:38,960 --> 00:46:41,599
gonna be

1323
00:46:39,440 --> 00:46:42,960
talking about prevention and mitigation

1324
00:46:41,599 --> 00:46:43,680
for you know the disaster management

1325
00:46:42,960 --> 00:46:46,560
system

1326
00:46:43,680 --> 00:46:48,480
disaster management right so oneness

1327
00:46:46,560 --> 00:46:50,160
input validation the validation process

1328
00:46:48,480 --> 00:46:51,760
you know is aimed at verifying whether

1329
00:46:50,160 --> 00:46:54,879
or not the type of input

1330
00:46:51,760 --> 00:46:56,400
you know submitted is you know by the

1331
00:46:54,880 --> 00:46:57,839
user is allowed

1332
00:46:56,400 --> 00:47:00,079
right so input validation is like

1333
00:46:57,839 --> 00:47:02,400
sanitizing the inputs it makes sure

1334
00:47:00,079 --> 00:47:03,680
you know is it's the of the right type

1335
00:47:02,400 --> 00:47:07,119
right length format

1336
00:47:03,680 --> 00:47:07,598
etc escaping you user input right in

1337
00:47:07,119 --> 00:47:10,079
that

1338
00:47:07,599 --> 00:47:12,079
you know always use character escaping

1339
00:47:10,079 --> 00:47:14,000
functions for user supplier input

1340
00:47:12,079 --> 00:47:15,839
providing like you know each database

1341
00:47:14,000 --> 00:47:18,079
management system this can be done

1342
00:47:15,839 --> 00:47:20,319
you know to make sure dbms never

1343
00:47:18,079 --> 00:47:22,559
confuses it with sql statements provided

1344
00:47:20,319 --> 00:47:25,839
by the developer

1345
00:47:22,559 --> 00:47:27,680
okay so yeah next is like never

1346
00:47:25,839 --> 00:47:28,960
connect your application to the database

1347
00:47:27,680 --> 00:47:31,839
using an account with

1348
00:47:28,960 --> 00:47:33,760
root access this should be done only if

1349
00:47:31,839 --> 00:47:36,480
it's absolutely necessary

1350
00:47:33,760 --> 00:47:36,960
you know it you know if the attacker

1351
00:47:36,480 --> 00:47:39,040
gains

1352
00:47:36,960 --> 00:47:40,400
that you know against that accessibility

1353
00:47:39,040 --> 00:47:42,558
it's like the whole system

1354
00:47:40,400 --> 00:47:43,920
the whole integrity of the system is

1355
00:47:42,559 --> 00:47:46,960
ruined

1356
00:47:43,920 --> 00:47:48,559
right uh yeah and that that's

1357
00:47:46,960 --> 00:47:50,640
administrative privileges

1358
00:47:48,559 --> 00:47:52,960
okay next is parameterized queries which

1359
00:47:50,640 --> 00:47:53,839
are like means of pre-combining and sql

1360
00:47:52,960 --> 00:47:56,000
statement

1361
00:47:53,839 --> 00:47:57,359
so that you can you know then supply the

1362
00:47:56,000 --> 00:47:59,440
parameters in order to

1363
00:47:57,359 --> 00:48:00,480
for the statement to be executed okay

1364
00:47:59,440 --> 00:48:02,400
the user

1365
00:48:00,480 --> 00:48:03,760
input is automatically quoted and the

1366
00:48:02,400 --> 00:48:06,559
supplied input will not

1367
00:48:03,760 --> 00:48:08,160
cost you know that's what the same the

1368
00:48:06,559 --> 00:48:11,359
change of the intent

1369
00:48:08,160 --> 00:48:12,000
right so that's another prevention

1370
00:48:11,359 --> 00:48:14,480
method

1371
00:48:12,000 --> 00:48:15,119
that can be used and it's like stored

1372
00:48:14,480 --> 00:48:17,760
procedures

1373
00:48:15,119 --> 00:48:18,400
you know that requires the developer to

1374
00:48:17,760 --> 00:48:20,640
group

1375
00:48:18,400 --> 00:48:22,480
you know one or more sql statements into

1376
00:48:20,640 --> 00:48:25,680
a logical unit to create

1377
00:48:22,480 --> 00:48:27,839
an execution plan it's like so

1378
00:48:25,680 --> 00:48:29,839
whenever you know you need to execute a

1379
00:48:27,839 --> 00:48:31,279
query instead of writing it on over and

1380
00:48:29,839 --> 00:48:32,839
over again you just you can just call

1381
00:48:31,280 --> 00:48:35,599
the store produce

1382
00:48:32,839 --> 00:48:38,319
process right okay

1383
00:48:35,599 --> 00:48:39,200
so that's that we've ended this

1384
00:48:38,319 --> 00:48:46,720
discussion is

1385
00:48:39,200 --> 00:48:46,720
there any questions wow that's

