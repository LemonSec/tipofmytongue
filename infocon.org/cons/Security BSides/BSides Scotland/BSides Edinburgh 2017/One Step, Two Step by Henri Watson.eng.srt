1
00:00:02,660 --> 00:00:10,129
cool<font color="#CCCCCC"> all right so I was</font><font color="#E5E5E5"> sort of</font>

2
00:00:07,100 --> 00:00:13,099
mentioned I'm a second year student at

3
00:00:10,130 --> 00:00:14,690
Albert a this year I was helping out

4
00:00:13,099 --> 00:00:16,760
with the ethical hacking society as a

5
00:00:14,690 --> 00:00:19,189
secretary and I was<font color="#E5E5E5"> also one of the</font>

6
00:00:16,760 --> 00:00:21,619
organizers<font color="#CCCCCC"> for this year's security</font>

7
00:00:19,189 --> 00:00:24,230
conference this summer will be<font color="#E5E5E5"> joining</font>

8
00:00:21,619 --> 00:00:26,599
the wonderful folks at skyscanner as an

9
00:00:24,230 --> 00:00:29,420
intern and<font color="#E5E5E5"> I'm generally interested in</font>

10
00:00:26,599 --> 00:00:31,880
the idea of a user<font color="#CCCCCC"> experience versus</font>

11
00:00:29,420 --> 00:00:34,850
security embedded devices payment

12
00:00:31,880 --> 00:00:38,450
technologies and transportation so the

13
00:00:34,850 --> 00:00:40,309
<font color="#CCCCCC">reason why I i think everyone might find</font>

14
00:00:38,450 --> 00:00:42,559
this topic interesting is because most

15
00:00:40,309 --> 00:00:45,019
web apps implement some form of

16
00:00:42,559 --> 00:00:46,519
authentication system you know because

17
00:00:45,020 --> 00:00:49,579
it's important for websites to know who

18
00:00:46,520 --> 00:00:52,340
you are and login forms come in all

19
00:00:49,579 --> 00:00:54,320
sorts of<font color="#CCCCCC"> favors shapes and sizes so</font><font color="#E5E5E5"> you</font>

20
00:00:52,340 --> 00:00:56,660
might<font color="#E5E5E5"> have very simple like bootstrap</font>

21
00:00:54,320 --> 00:00:58,129
type plugin form may<font color="#E5E5E5"> have something a</font>

22
00:00:56,660 --> 00:00:59,898
bit more complicated you know with

23
00:00:58,129 --> 00:01:02,300
<font color="#E5E5E5">forgot password field with a sign in</font>

24
00:00:59,899 --> 00:01:04,040
field or you might have all sorts of

25
00:01:02,300 --> 00:01:05,330
different<font color="#E5E5E5"> options for how you can</font><font color="#CCCCCC"> log in</font>

26
00:01:04,040 --> 00:01:07,760
you know different kinds of usernames

27
00:01:05,330 --> 00:01:11,060
I'm you know<font color="#CCCCCC"> login with an email</font>

28
00:01:07,760 --> 00:01:14,690
whatever but not all login forms are

29
00:01:11,060 --> 00:01:17,470
equally secure you know so what do I

30
00:01:14,690 --> 00:01:19,640
mean<font color="#CCCCCC"> when I say the login form is secure</font>

31
00:01:17,470 --> 00:01:22,130
you know there's the obvious sort of

32
00:01:19,640 --> 00:01:25,610
definition of your login form is using

33
00:01:22,130 --> 00:01:28,039
HTTPS and definitely now this is

34
00:01:25,610 --> 00:01:29,840
something<font color="#CCCCCC"> that should be considered you</font>

35
00:01:28,040 --> 00:01:32,690
<font color="#CCCCCC">know bare minimum requirement as a</font>

36
00:01:29,840 --> 00:01:35,990
<font color="#E5E5E5">January a</font><font color="#CCCCCC"> chrome will surely not secure</font>

37
00:01:32,690 --> 00:01:38,179
warning if you go<font color="#E5E5E5"> to a</font><font color="#CCCCCC"> website that has</font>

38
00:01:35,990 --> 00:01:41,780
a password field that isn't<font color="#E5E5E5"> being served</font>

39
00:01:38,180 --> 00:01:43,550
over HTTPS and<font color="#CCCCCC"> firefox will even display</font>

40
00:01:41,780 --> 00:01:45,970
a little banner saying this connection

41
00:01:43,550 --> 00:01:49,009
is<font color="#E5E5E5"> not secure on the password field</font>

42
00:01:45,970 --> 00:01:51,800
which has led to a few people being

43
00:01:49,010 --> 00:01:53,510
angry but you know it's it's still

44
00:01:51,800 --> 00:01:55,850
something<font color="#E5E5E5"> that we're definitely not</font>

45
00:01:53,510 --> 00:01:59,860
going<font color="#E5E5E5"> to turn back on you know HTTPS is</font>

46
00:01:55,850 --> 00:02:03,559
something that's a necessity now in 2017

47
00:01:59,860 --> 00:02:06,230
but htps only secures the transport

48
00:02:03,560 --> 00:02:09,050
layer so it protects information while

49
00:02:06,230 --> 00:02:12,590
you're communicating with the server but

50
00:02:09,050 --> 00:02:15,430
it does not protect data at rest and as

51
00:02:12,590 --> 00:02:18,159
it turns out we're really bad at

52
00:02:15,430 --> 00:02:20,620
protecting data at rest services are

53
00:02:18,159 --> 00:02:23,078
breached you know almost every other<font color="#E5E5E5"> day</font>

54
00:02:20,620 --> 00:02:26,950
and their password dumps that are leaked

55
00:02:23,079 --> 00:02:29,500
you know all the time and further we're

56
00:02:26,950 --> 00:02:31,450
also really bad at making<font color="#E5E5E5"> sure that</font>

57
00:02:29,500 --> 00:02:33,849
information thats stolen from one

58
00:02:31,450 --> 00:02:36,129
service can't be reused on another

59
00:02:33,849 --> 00:02:39,339
service and here's an example of you

60
00:02:36,129 --> 00:02:41,260
<font color="#CCCCCC">know Mark Zuckerberg who had his</font>

61
00:02:39,340 --> 00:02:43,599
password for multiple social network

62
00:02:41,260 --> 00:02:47,858
stolen<font color="#E5E5E5"> because he used the same password</font>

63
00:02:43,599 --> 00:02:49,738
<font color="#CCCCCC">on multiple services and really this is</font>

64
00:02:47,859 --> 00:02:52,239
a problem<font color="#E5E5E5"> with static information</font>

65
00:02:49,739 --> 00:02:54,250
because<font color="#CCCCCC"> it can</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> stolen from one</font>

66
00:02:52,239 --> 00:02:56,250
service from one organization and they

67
00:02:54,250 --> 00:02:59,439
can then be reused across multiple

68
00:02:56,250 --> 00:03:01,480
organizations and this is why static

69
00:02:59,439 --> 00:03:05,260
information on an own is absolutely

70
00:03:01,480 --> 00:03:08,048
terrible for authentication so this<font color="#E5E5E5"> is</font>

71
00:03:05,260 --> 00:03:10,750
why a lot of web<font color="#CCCCCC"> services try to</font>

72
00:03:08,049 --> 00:03:14,200
implement two-factor authentication as<font color="#E5E5E5"> a</font>

73
00:03:10,750 --> 00:03:16,030
sort<font color="#E5E5E5"> of attempt to solve this problem so</font>

74
00:03:14,200 --> 00:03:17,858
two-factor authentication combined

75
00:03:16,030 --> 00:03:20,440
something that you know with something

76
00:03:17,859 --> 00:03:22,840
<font color="#CCCCCC">that you have essentially you keep the</font>

77
00:03:20,440 --> 00:03:26,349
password but you<font color="#E5E5E5"> also add a physical</font>

78
00:03:22,840 --> 00:03:28,239
layer to it now as<font color="#E5E5E5"> companies first</font>

79
00:03:26,349 --> 00:03:31,000
started implementing two-factor

80
00:03:28,239 --> 00:03:32,949
authentication some people miss that you

81
00:03:31,000 --> 00:03:36,879
<font color="#E5E5E5">know that static information is bad</font>

82
00:03:32,949 --> 00:03:40,599
slight so a lot of banks particularly in

83
00:03:36,879 --> 00:03:43,090
<font color="#E5E5E5">South America some in Spain implemented</font>

84
00:03:40,599 --> 00:03:44,768
these code cards<font color="#E5E5E5"> effectively they'd be</font>

85
00:03:43,090 --> 00:03:47,139
printed perhaps on the back<font color="#CCCCCC"> of your</font>

86
00:03:44,769 --> 00:03:49,000
debit card would be given to you when

87
00:03:47,139 --> 00:03:51,040
you signed up for<font color="#E5E5E5"> online banking and</font>

88
00:03:49,000 --> 00:03:53,530
whenever you logged in or you're trying

89
00:03:51,040 --> 00:03:55,439
<font color="#E5E5E5">to do some sort of sensitive action it</font>

90
00:03:53,530 --> 00:03:57,790
asks you to enter a code from the<font color="#E5E5E5"> grid</font>

91
00:03:55,439 --> 00:03:59,620
so you know this<font color="#E5E5E5"> is fine because a</font>

92
00:03:57,790 --> 00:04:02,530
different code is requested each time

93
00:03:59,620 --> 00:04:06,280
you do something so you can't just<font color="#E5E5E5"> look</font>

94
00:04:02,530 --> 00:04:08,680
at one request and you know reuse the

95
00:04:06,280 --> 00:04:11,500
same code again unless<font color="#E5E5E5"> you can capture</font>

96
00:04:08,680 --> 00:04:13,030
you know<font color="#E5E5E5"> 20 30 login attempts and</font><font color="#CCCCCC"> then</font>

97
00:04:11,500 --> 00:04:15,790
you've probably captured all the codes

98
00:04:13,030 --> 00:04:18,370
on the card but<font color="#CCCCCC"> you know still one code</font>

99
00:04:15,790 --> 00:04:22,210
doesn't reveal the remaining codes on

100
00:04:18,370 --> 00:04:24,700
the card but<font color="#CCCCCC"> you know man in the</font>

101
00:04:22,210 --> 00:04:26,500
middling the user is really hard

102
00:04:24,700 --> 00:04:28,539
you know usually require some sort of

103
00:04:26,500 --> 00:04:31,840
malware or you have that physical access

104
00:04:28,540 --> 00:04:33,670
to<font color="#E5E5E5"> users network so much easier to fish</font>

105
00:04:31,840 --> 00:04:36,270
a user<font color="#E5E5E5"> you know you can just tell the</font>

106
00:04:33,670 --> 00:04:38,560
user we need to reactivate your card

107
00:04:36,270 --> 00:04:40,870
otherwise you'll lose access to online

108
00:04:38,560 --> 00:04:43,390
banking and you can<font color="#E5E5E5"> just ask them for</font>

109
00:04:40,870 --> 00:04:46,270
<font color="#CCCCCC">all the codes on their card and this</font><font color="#E5E5E5"> is</font>

110
00:04:43,390 --> 00:04:50,380
<font color="#E5E5E5">straight up a very real phishing website</font>

111
00:04:46,270 --> 00:04:52,090
for a bank in Venezuela that hit several

112
00:04:50,380 --> 00:04:53,770
people who just went<font color="#CCCCCC"> okay you know I</font>

113
00:04:52,090 --> 00:04:57,760
have<font color="#CCCCCC"> to reactivate in the card let me</font>

114
00:04:53,770 --> 00:05:00,070
enter all of<font color="#CCCCCC"> the numbers so static data</font>

115
00:04:57,760 --> 00:05:01,870
in a physical format is still static

116
00:05:00,070 --> 00:05:03,550
data it's bad you know it's still

117
00:05:01,870 --> 00:05:04,690
something that<font color="#E5E5E5"> can be stolen in this</font>

118
00:05:03,550 --> 00:05:08,170
<font color="#E5E5E5">case it's not something that can be</font>

119
00:05:04,690 --> 00:05:09,760
reused<font color="#E5E5E5"> across multiple services but you</font>

120
00:05:08,170 --> 00:05:12,010
know still something where the user can

121
00:05:09,760 --> 00:05:14,110
be compromised and they won't

122
00:05:12,010 --> 00:05:16,330
<font color="#E5E5E5">necessarily know because you don't need</font>

123
00:05:14,110 --> 00:05:19,780
to physically steal the card in order to

124
00:05:16,330 --> 00:05:22,390
steal the codes from it<font color="#E5E5E5"> so okay how can</font>

125
00:05:19,780 --> 00:05:25,989
we then<font color="#E5E5E5"> quickly provide a user with a</font>

126
00:05:22,390 --> 00:05:27,190
<font color="#E5E5E5">one-time use code something that you</font>

127
00:05:25,990 --> 00:05:29,550
know you can generate on the fly

128
00:05:27,190 --> 00:05:33,910
something that can't be stolen<font color="#E5E5E5"> from them</font>

129
00:05:29,550 --> 00:05:37,420
so okay well I'm users have phone we can

130
00:05:33,910 --> 00:05:39,520
<font color="#CCCCCC">text them one time use codes and a lot</font>

131
00:05:37,420 --> 00:05:41,530
<font color="#CCCCCC">of services do this so here's an example</font>

132
00:05:39,520 --> 00:05:44,500
from paypal sending me a confirmation

133
00:05:41,530 --> 00:05:47,049
code because<font color="#CCCCCC"> I haven't</font><font color="#E5E5E5"> signed into my</font>

134
00:05:44,500 --> 00:05:51,090
paypal account on that computer before

135
00:05:47,050 --> 00:05:53,950
and the problem<font color="#CCCCCC"> with this is</font>

136
00:05:51,090 --> 00:05:56,979
authentication either by text messages

137
00:05:53,950 --> 00:05:59,530
or through phone calls does it prove

138
00:05:56,980 --> 00:06:02,560
<font color="#E5E5E5">that you have possession of that phone</font>

139
00:05:59,530 --> 00:06:05,409
rather<font color="#E5E5E5"> accrues possession of that phone</font>

140
00:06:02,560 --> 00:06:09,400
number<font color="#E5E5E5"> and unfortunately a lot of cell</font>

141
00:06:05,410 --> 00:06:12,100
phone carriers aren't taking reasonable

142
00:06:09,400 --> 00:06:14,400
measures to ensure<font color="#E5E5E5"> that your phone</font>

143
00:06:12,100 --> 00:06:17,410
number doesn't fall into the wrong hands

144
00:06:14,400 --> 00:06:21,580
so here's news article describing an

145
00:06:17,410 --> 00:06:23,890
activist who had someone go to his telco

146
00:06:21,580 --> 00:06:26,320
and pretend to<font color="#E5E5E5"> be him and have a sim</font>

147
00:06:23,890 --> 00:06:28,630
card reissued and at this point<font color="#E5E5E5"> you know</font>

148
00:06:26,320 --> 00:06:30,040
the person stole his phone<font color="#E5E5E5"> number was</font>

149
00:06:28,630 --> 00:06:32,950
able to break into his<font color="#E5E5E5"> Twitter account</font>

150
00:06:30,040 --> 00:06:35,500
and impersonate him additionally

151
00:06:32,950 --> 00:06:38,560
signaling system 7 which is<font color="#E5E5E5"> what's used</font>

152
00:06:35,500 --> 00:06:40,570
as sort<font color="#E5E5E5"> of base for all global tel aviv</font>

153
00:06:38,560 --> 00:06:42,669
<font color="#E5E5E5">patient's allows your phone number to be</font>

154
00:06:40,570 --> 00:06:44,919
hijacked without your carrier's

155
00:06:42,669 --> 00:06:47,799
cooperation essentially you can<font color="#E5E5E5"> pretend</font>

156
00:06:44,919 --> 00:06:50,229
to<font color="#E5E5E5"> be roaming as a user or signal to</font>

157
00:06:47,800 --> 00:06:52,150
other phone networks that you'd like<font color="#E5E5E5"> SMS</font>

158
00:06:50,230 --> 00:06:54,090
is to be reroute it to your network and

159
00:06:52,150 --> 00:06:56,679
you can take that over although that

160
00:06:54,090 --> 00:06:59,669
involves<font color="#E5E5E5"> you working for a telco and is</font>

161
00:06:56,680 --> 00:07:01,990
a bit more you know nation state level

162
00:06:59,669 --> 00:07:04,960
but these sorts of attacks you know do

163
00:07:01,990 --> 00:07:06,760
happen they happen signal signaling

164
00:07:04,960 --> 00:07:08,739
system 7 type specifically happened in

165
00:07:06,760 --> 00:07:12,180
Iran or the state was trying to take

166
00:07:08,740 --> 00:07:15,280
over some activists telegram accounts

167
00:07:12,180 --> 00:07:17,139
additionally SMS verification or<font color="#CCCCCC"> call</font>

168
00:07:15,280 --> 00:07:19,059
verification cause problems when the

169
00:07:17,139 --> 00:07:22,030
users roaming throughout with service

170
00:07:19,060 --> 00:07:24,100
areas so I had a<font color="#E5E5E5"> lot of issues trying to</font>

171
00:07:22,030 --> 00:07:25,359
access my paypal account well I'm

172
00:07:24,100 --> 00:07:27,880
visiting my family in the Dominican

173
00:07:25,360 --> 00:07:30,880
Republic<font color="#E5E5E5"> because I don't</font><font color="#CCCCCC"> want to roam</font>

174
00:07:27,880 --> 00:07:33,190
there it's very<font color="#CCCCCC"> expensive and you know I</font>

175
00:07:30,880 --> 00:07:36,669
can't receive<font color="#CCCCCC"> the SMS but I'd still like</font>

176
00:07:33,190 --> 00:07:40,960
<font color="#CCCCCC">to</font><font color="#E5E5E5"> prove you know who I am so okay can</font>

177
00:07:36,669 --> 00:07:43,030
we provide some sort of you know some

178
00:07:40,960 --> 00:07:45,640
some starting point when the user signs

179
00:07:43,030 --> 00:07:47,380
up from which they can generate codes

180
00:07:45,640 --> 00:07:50,830
independently without having to go

181
00:07:47,380 --> 00:07:54,580
online something<font color="#CCCCCC"> that can't easily be</font>

182
00:07:50,830 --> 00:07:57,130
cloned so<font color="#E5E5E5"> okay we could give the user</font>

183
00:07:54,580 --> 00:07:59,070
code generator and these things<font color="#E5E5E5"> have</font>

184
00:07:57,130 --> 00:08:04,030
been around you know for quite a while

185
00:07:59,070 --> 00:08:07,180
RSA keys are really common in banks some

186
00:08:04,030 --> 00:08:09,789
you know some people<font color="#CCCCCC"> or you know use</font>

187
00:08:07,180 --> 00:08:12,460
them internally within<font color="#E5E5E5"> organizations as</font>

188
00:08:09,789 --> 00:08:14,380
a form two factor authentication but the

189
00:08:12,460 --> 00:08:17,229
basic idea is that both the website and

190
00:08:14,380 --> 00:08:19,510
the device have a shared secret key and

191
00:08:17,229 --> 00:08:22,050
a lot<font color="#CCCCCC"> of these work on the totp protocol</font>

192
00:08:19,510 --> 00:08:24,520
and the<font color="#CCCCCC"> way that works is that you</font>

193
00:08:22,050 --> 00:08:28,030
compute the<font color="#CCCCCC"> h mac of the current time</font>

194
00:08:24,520 --> 00:08:29,889
using the shared secret key and as long

195
00:08:28,030 --> 00:08:32,679
as the key isn't intercepted during the

196
00:08:29,889 --> 00:08:36,580
initial setup the keycap be externally

197
00:08:32,679 --> 00:08:38,949
determined so if your bank how do you

198
00:08:36,580 --> 00:08:41,740
evolve that they programmed internally

199
00:08:38,950 --> 00:08:45,040
then you know that programming can't be

200
00:08:41,740 --> 00:08:46,510
externally intercepted the fobs can be

201
00:08:45,040 --> 00:08:47,740
expensive they can be really

202
00:08:46,510 --> 00:08:49,959
inconvenient you know they're kind<font color="#E5E5E5"> of</font>

203
00:08:47,740 --> 00:08:51,480
bulky you have to change<font color="#E5E5E5"> the batteries</font>

204
00:08:49,959 --> 00:08:54,880
out and I'm every

205
00:08:51,480 --> 00:08:57,339
<font color="#E5E5E5">so</font><font color="#CCCCCC"> instead a lot of companies use apps</font>

206
00:08:54,880 --> 00:08:59,950
that generate authentication codes for

207
00:08:57,339 --> 00:09:01,810
you<font color="#E5E5E5"> and so here a couple popular</font>

208
00:08:59,950 --> 00:09:04,360
examples is Google Authenticator steam

209
00:09:01,810 --> 00:09:06,489
guard and battle.net authenticator and

210
00:09:04,360 --> 00:09:09,490
you know it's a similar idea when you go

211
00:09:06,490 --> 00:09:11,800
to sign into service and you know your

212
00:09:09,490 --> 00:09:15,790
your<font color="#E5E5E5"> app gives you a code which</font><font color="#CCCCCC"> you then</font>

213
00:09:11,800 --> 00:09:18,189
enter<font color="#E5E5E5"> onto you know the your computer</font>

214
00:09:15,790 --> 00:09:20,370
and a lot<font color="#CCCCCC"> of these are based on the</font>

215
00:09:18,190 --> 00:09:23,920
time-based one-time password algorithm

216
00:09:20,370 --> 00:09:26,110
basically the app of the<font color="#CCCCCC"> fob</font><font color="#E5E5E5"> and the</font>

217
00:09:23,920 --> 00:09:28,120
service agree on five parameters you

218
00:09:26,110 --> 00:09:31,180
agree on the<font color="#E5E5E5"> secret key what the current</font>

219
00:09:28,120 --> 00:09:34,390
<font color="#E5E5E5">time is an interval a hash function the</font>

220
00:09:31,180 --> 00:09:36,609
token lines usually the interval is 30

221
00:09:34,390 --> 00:09:38,829
seconds usually your house function will

222
00:09:36,610 --> 00:09:42,850
be shall<font color="#CCCCCC"> 1 and usually your token length</font>

223
00:09:38,829 --> 00:09:45,579
is<font color="#E5E5E5"> about six characters so for example</font>

224
00:09:42,850 --> 00:09:49,959
<font color="#CCCCCC">let's say that this is our key and it's</font>

225
00:09:45,579 --> 00:09:53,109
<font color="#CCCCCC">currently you know</font><font color="#E5E5E5"> about 24 hours ago</font>

226
00:09:49,959 --> 00:09:54,459
<font color="#E5E5E5">yesterday and will use a 30-second</font>

227
00:09:53,110 --> 00:09:58,269
interval you know shall one and six

228
00:09:54,459 --> 00:09:59,979
digit tokens so<font color="#E5E5E5"> this totp starts off by</font>

229
00:09:58,269 --> 00:10:03,399
calculating how many seconds have gone

230
00:09:59,980 --> 00:10:07,060
by since<font color="#CCCCCC"> January first nineteen seventy</font>

231
00:10:03,399 --> 00:10:09,279
and<font color="#CCCCCC"> so you get this unix time stop you</font>

232
00:10:07,060 --> 00:10:12,099
divide that<font color="#E5E5E5"> time stamp by your interval</font>

233
00:10:09,279 --> 00:10:14,800
you get this other lovely number then

234
00:10:12,100 --> 00:10:17,680
you calculate the<font color="#E5E5E5"> H Mac of that that</font>

235
00:10:14,800 --> 00:10:20,709
number<font color="#E5E5E5"> with your secret key when you get</font>

236
00:10:17,680 --> 00:10:22,630
this long hash you take the four least

237
00:10:20,709 --> 00:10:25,029
significant bits from the hash so in

238
00:10:22,630 --> 00:10:27,339
this case this would be e and use it as

239
00:10:25,029 --> 00:10:30,760
an offset in the original half so you

240
00:10:27,339 --> 00:10:33,570
<font color="#E5E5E5">just count you know 14 characters up and</font>

241
00:10:30,760 --> 00:10:36,670
<font color="#E5E5E5">grab everything from 14 characters on</font>

242
00:10:33,570 --> 00:10:39,070
you convert that to binary then you take

243
00:10:36,670 --> 00:10:42,550
<font color="#CCCCCC">four bytes starting from the offset and</font>

244
00:10:39,070 --> 00:10:45,910
discard the<font color="#E5E5E5"> most significant bit so then</font>

245
00:10:42,550 --> 00:10:48,459
you get this number and the token is the

246
00:10:45,910 --> 00:10:51,370
lowest six digit and the necessary you

247
00:10:48,459 --> 00:10:53,229
pad that on zeros the code generated

248
00:10:51,370 --> 00:10:55,750
matches on both sides everything's great

249
00:10:53,230 --> 00:10:58,870
right so this<font color="#E5E5E5"> is also pretty simple math</font>

250
00:10:55,750 --> 00:11:00,640
they're a bunch of libraries to do<font color="#E5E5E5"> this</font>

251
00:10:58,870 --> 00:11:02,440
you know they're all sorts of websites

252
00:11:00,640 --> 00:11:04,870
<font color="#E5E5E5">that implement this you know that's</font>

253
00:11:02,440 --> 00:11:07,330
pretty common<font color="#E5E5E5"> for</font><font color="#CCCCCC"> TOTP to be you</font>

254
00:11:04,870 --> 00:11:10,870
<font color="#E5E5E5">for second factor authentication but</font>

255
00:11:07,330 --> 00:11:12,130
there's a problem<font color="#E5E5E5"> right because as I</font>

256
00:11:10,870 --> 00:11:14,260
mentioned<font color="#E5E5E5"> key fobs you know there's a</font>

257
00:11:12,130 --> 00:11:16,330
really inconvenient it's the same<font color="#CCCCCC"> thing</font>

258
00:11:14,260 --> 00:11:18,430
with the<font color="#E5E5E5"> software tokens you know you</font>

259
00:11:16,330 --> 00:11:20,970
may be using some sort of enterprise

260
00:11:18,430 --> 00:11:24,520
grade system you don't want to have to

261
00:11:20,970 --> 00:11:25,450
share these tokens around you know you

262
00:11:24,520 --> 00:11:27,640
<font color="#CCCCCC">don't want</font><font color="#E5E5E5"> to have to deal with</font>

263
00:11:25,450 --> 00:11:30,610
provisioning them it's a lot of<font color="#CCCCCC"> people</font>

264
00:11:27,640 --> 00:11:33,250
they simply<font color="#E5E5E5"> take a webcam and they point</font>

265
00:11:30,610 --> 00:11:36,040
it<font color="#CCCCCC"> all there you know all their tokens</font>

266
00:11:33,250 --> 00:11:37,870
and they you know they stream these on

267
00:11:36,040 --> 00:11:40,300
the internet so when you go to sign in

268
00:11:37,870 --> 00:11:42,339
to this you know secure service you pull

269
00:11:40,300 --> 00:11:44,650
up the webcam feed and you look for the

270
00:11:42,339 --> 00:11:46,779
fob that that you're<font color="#E5E5E5"> being asked</font><font color="#CCCCCC"> for and</font>

271
00:11:44,650 --> 00:11:49,480
you know you zoom in you read the code

272
00:11:46,779 --> 00:11:52,000
off it and then you type that in to your

273
00:11:49,480 --> 00:11:55,120
web service and that that's<font color="#E5E5E5"> kind of</font>

274
00:11:52,000 --> 00:11:56,950
terrible you really shouldn't be<font color="#CCCCCC"> doing</font>

275
00:11:55,120 --> 00:12:00,640
that because it gets rid<font color="#E5E5E5"> of this whole</font>

276
00:11:56,950 --> 00:12:04,029
<font color="#CCCCCC">idea of requiring that you have physical</font>

277
00:12:00,640 --> 00:12:06,490
access to the key fob you know<font color="#E5E5E5"> this</font><font color="#CCCCCC"> deer</font>

278
00:12:04,029 --> 00:12:09,360
there are all sorts of webcam feeds like

279
00:12:06,490 --> 00:12:12,760
this if you<font color="#E5E5E5"> just look around on showdown</font>

280
00:12:09,360 --> 00:12:15,400
so okay you can it you can<font color="#CCCCCC"> avoid this by</font>

281
00:12:12,760 --> 00:12:17,709
requiring user interaction right so if

282
00:12:15,400 --> 00:12:20,829
you have a fob or software token that

283
00:12:17,709 --> 00:12:22,119
requires<font color="#E5E5E5"> that you press the button you</font>

284
00:12:20,830 --> 00:12:26,470
know you use this account or something

285
00:12:22,120 --> 00:12:29,700
<font color="#CCCCCC">like that then then you avoid someone</font>

286
00:12:26,470 --> 00:12:34,420
being able to just point a webcam right

287
00:12:29,700 --> 00:12:36,370
so there's hecho TP which is exactly the

288
00:12:34,420 --> 00:12:38,829
<font color="#E5E5E5">same</font><font color="#CCCCCC"> as CEO TV it just uses a counter</font>

289
00:12:36,370 --> 00:12:40,660
instead of the current time and the

290
00:12:38,830 --> 00:12:42,339
problem<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that you know if you have the</font>

291
00:12:40,660 --> 00:12:43,839
toddler or someone that<font color="#E5E5E5"> just sort of</font>

292
00:12:42,339 --> 00:12:47,650
presses this button over and over and

293
00:12:43,839 --> 00:12:49,660
over<font color="#E5E5E5"> again then the state of the token</font>

294
00:12:47,650 --> 00:12:51,490
will be different<font color="#CCCCCC"> from the state on the</font>

295
00:12:49,660 --> 00:12:54,850
server you know that the counters will

296
00:12:51,490 --> 00:12:57,610
be way out of sync so you know there's

297
00:12:54,850 --> 00:13:00,720
there's sort of some practicality issues

298
00:12:57,610 --> 00:13:04,510
with having a counter based system and

299
00:13:00,720 --> 00:13:06,459
so instead you have some apps that take

300
00:13:04,510 --> 00:13:08,350
a sort of<font color="#E5E5E5"> different approach and they</font>

301
00:13:06,459 --> 00:13:10,869
ask the user to approve logins on their

302
00:13:08,350 --> 00:13:12,970
phone right so here's an<font color="#E5E5E5"> example of</font>

303
00:13:10,870 --> 00:13:15,339
<font color="#CCCCCC">Google's implementation on this you try</font>

304
00:13:12,970 --> 00:13:16,810
to sign into Google account and you get

305
00:13:15,339 --> 00:13:17,960
a little<font color="#E5E5E5"> prompt on your phone saying you</font>

306
00:13:16,810 --> 00:13:19,939
know hey

307
00:13:17,960 --> 00:13:23,780
<font color="#E5E5E5">or you this person</font><font color="#CCCCCC"> that's trying to</font><font color="#E5E5E5"> sign</font>

308
00:13:19,940 --> 00:13:27,040
in you know near<font color="#CCCCCC"> Edinburgh let me just</font>

309
00:13:23,780 --> 00:13:29,569
you tap yes or no and that's fine and

310
00:13:27,040 --> 00:13:34,310
the<font color="#E5E5E5"> problem with us those it's still</font>

311
00:13:29,570 --> 00:13:37,790
vulnerable to fishing right because if

312
00:13:34,310 --> 00:13:39,890
you have if you live in a major city

313
00:13:37,790 --> 00:13:42,199
like London or Adam bruh you know their

314
00:13:39,890 --> 00:13:44,270
data centers near you<font color="#CCCCCC"> you can very well</font>

315
00:13:42,200 --> 00:13:46,910
have a phishing website that tries to

316
00:13:44,270 --> 00:13:48,620
sign on to the service as the<font color="#CCCCCC"> same time</font>

317
00:13:46,910 --> 00:13:50,660
as you know<font color="#E5E5E5"> using the credentials that</font>

318
00:13:48,620 --> 00:13:51,830
you gave it and you you know when you

319
00:13:50,660 --> 00:13:54,650
<font color="#E5E5E5">get the notification you go yeah you</font>

320
00:13:51,830 --> 00:13:56,900
know I am trying<font color="#E5E5E5"> to sign</font><font color="#CCCCCC"> on to this</font>

321
00:13:54,650 --> 00:13:58,880
<font color="#E5E5E5">service you know unknowingly being fish</font>

322
00:13:56,900 --> 00:14:02,329
and<font color="#CCCCCC"> you know you happily say yes and</font>

323
00:13:58,880 --> 00:14:05,840
everything's fine probably until<font color="#E5E5E5"> you</font>

324
00:14:02,330 --> 00:14:09,590
know all your details yet stolen and UV

325
00:14:05,840 --> 00:14:11,510
keys the sort<font color="#E5E5E5"> of earlier one used an</font>

326
00:14:09,590 --> 00:14:13,940
internal counter to generate codes in

327
00:14:11,510 --> 00:14:16,400
similar fashion they<font color="#CCCCCC"> include</font><font color="#E5E5E5"> the actual</font>

328
00:14:13,940 --> 00:14:20,780
counter value in the generated code so

329
00:14:16,400 --> 00:14:23,150
you didn't have<font color="#E5E5E5"> the sync issues but at</font>

330
00:14:20,780 --> 00:14:25,189
the end of the day all<font color="#E5E5E5"> of</font><font color="#CCCCCC"> these methods</font>

331
00:14:23,150 --> 00:14:27,970
are still vulnerable to fishing you<font color="#E5E5E5"> know</font>

332
00:14:25,190 --> 00:14:32,510
just like<font color="#CCCCCC"> the code card with the token</font>

333
00:14:27,970 --> 00:14:35,860
you know with the UV key with with log

334
00:14:32,510 --> 00:14:40,040
and validation all of these methods are

335
00:14:35,860 --> 00:14:43,910
still vulnerable to you know real time

336
00:14:40,040 --> 00:14:45,860
fishing because the<font color="#E5E5E5"> problem is that your</font>

337
00:14:43,910 --> 00:14:49,760
code generator is working independently

338
00:14:45,860 --> 00:14:52,640
so it's unable to validate the websites

339
00:14:49,760 --> 00:14:54,650
identity you<font color="#E5E5E5"> know because it's not</font>

340
00:14:52,640 --> 00:14:56,689
connected to<font color="#E5E5E5"> your computer that has no</font>

341
00:14:54,650 --> 00:14:59,329
way of knowing that<font color="#E5E5E5"> you're actually</font>

342
00:14:56,690 --> 00:15:01,940
connected to the real domain name and

343
00:14:59,330 --> 00:15:06,950
<font color="#CCCCCC">that this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually the real website</font>

344
00:15:01,940 --> 00:15:09,500
that you won't speak with so as a sort

345
00:15:06,950 --> 00:15:14,180
of solution to this there are<font color="#CCCCCC"> challenge</font>

346
00:15:09,500 --> 00:15:17,090
response protocols that use what you're

347
00:15:14,180 --> 00:15:20,689
trying to do with the service as part of

348
00:15:17,090 --> 00:15:23,860
the authentication system so few UK

349
00:15:20,690 --> 00:15:27,530
thanks namely Barclays not less than RBS

350
00:15:23,860 --> 00:15:29,000
use the tip authentication program they

351
00:15:27,530 --> 00:15:30,290
use it to verify transfers to new

352
00:15:29,000 --> 00:15:31,399
recipients

353
00:15:30,290 --> 00:15:33,439
when you're doing something sensitive

354
00:15:31,399 --> 00:15:36,410
like changing<font color="#CCCCCC"> your address or signing up</font>

355
00:15:33,440 --> 00:15:40,310
some mobile banking and basically the

356
00:15:36,410 --> 00:15:42,769
idea is and you're given this handheld

357
00:15:40,310 --> 00:15:44,810
reader or you have it<font color="#E5E5E5"> built into your</font>

358
00:15:42,769 --> 00:15:47,089
mobile app and whenever you're doing

359
00:15:44,810 --> 00:15:50,209
<font color="#E5E5E5">something sensitive on the website</font>

360
00:15:47,089 --> 00:15:53,600
you're asked to confirm the changes that

361
00:15:50,209 --> 00:16:01,670
are being made independently on this

362
00:15:53,600 --> 00:16:04,610
handheld reader so<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example and if</font>

363
00:16:01,670 --> 00:16:07,639
I want<font color="#E5E5E5"> to make a new payment to someone</font>

364
00:16:04,610 --> 00:16:10,940
I have to go and type in the account

365
00:16:07,639 --> 00:16:14,029
<font color="#CCCCCC">number and the payment amount into this</font>

366
00:16:10,940 --> 00:16:16,430
token generator so as a result<font color="#E5E5E5"> even if</font>

367
00:16:14,029 --> 00:16:19,160
I'm being fished it doesn't matter

368
00:16:16,430 --> 00:16:21,349
because<font color="#E5E5E5"> I still have to independently</font>

369
00:16:19,160 --> 00:16:24,380
validate the account number in the

370
00:16:21,350 --> 00:16:26,540
payment<font color="#E5E5E5"> amount so unless I'm also being</font>

371
00:16:24,380 --> 00:16:29,329
tricked into typing in the wrong account

372
00:16:26,540 --> 00:16:36,620
number the wrong payment amount then I

373
00:16:29,329 --> 00:16:41,199
can't have my money stolen yeah seems

374
00:16:36,620 --> 00:16:46,760
there's an issue<font color="#E5E5E5"> of the video</font><font color="#CCCCCC"> ok great</font>

375
00:16:41,199 --> 00:16:48,290
we're back<font color="#CCCCCC"> alright so and because you</font>

376
00:16:46,760 --> 00:16:49,279
have to confirm the account number and

377
00:16:48,290 --> 00:16:50,810
the payment<font color="#E5E5E5"> amount that you're</font>

378
00:16:49,279 --> 00:16:54,649
transferring to on a independent

379
00:16:50,810 --> 00:16:56,569
<font color="#E5E5E5">mechanism you know even real time</font>

380
00:16:54,649 --> 00:16:58,459
fishing is sort of pointless here

381
00:16:56,569 --> 00:16:59,990
because if you know if you're being

382
00:16:58,459 --> 00:17:01,399
asked you know enter this completely

383
00:16:59,990 --> 00:17:04,040
different account number from the one

384
00:17:01,399 --> 00:17:06,349
that you just entered you'll probably be

385
00:17:04,040 --> 00:17:08,389
a bit<font color="#E5E5E5"> suspicious of what's going on</font>

386
00:17:06,349 --> 00:17:11,149
there and<font color="#E5E5E5"> the chap authentication</font>

387
00:17:08,390 --> 00:17:13,010
program basically piggybacks the chip

388
00:17:11,150 --> 00:17:15,530
and pin process to generate an eight

389
00:17:13,010 --> 00:17:18,770
digit code so you use a regular bank

390
00:17:15,530 --> 00:17:21,109
card and really<font color="#E5E5E5"> there there is a very</font>

391
00:17:18,770 --> 00:17:24,230
very small change the weight of that

392
00:17:21,109 --> 00:17:27,349
<font color="#CCCCCC">bank heart is set up basically this is a</font>

393
00:17:24,230 --> 00:17:29,900
look at a Barclays UK debit card and

394
00:17:27,349 --> 00:17:31,580
you've got three applications that old

395
00:17:29,900 --> 00:17:34,909
on the<font color="#E5E5E5"> debit card and there's this</font>

396
00:17:31,580 --> 00:17:36,710
additional you know Barclays application

397
00:17:34,909 --> 00:17:40,190
list at the bottom that's used for the

398
00:17:36,710 --> 00:17:42,710
<font color="#E5E5E5">online banking you know system and</font>

399
00:17:40,190 --> 00:17:43,700
basically<font color="#E5E5E5"> after verifying the</font><font color="#CCCCCC"> users pin</font>

400
00:17:42,710 --> 00:17:46,210
the authenticator

401
00:17:43,700 --> 00:17:48,679
just ask the car to sign a fake purchase

402
00:17:46,210 --> 00:17:51,440
so the authenticator pretends that you

403
00:17:48,679 --> 00:17:54,490
want to cost or something and instead<font color="#CCCCCC"> of</font>

404
00:17:51,440 --> 00:17:57,080
buying a coffee for you know to pound

405
00:17:54,490 --> 00:18:00,350
your you have all this additional

406
00:17:57,080 --> 00:18:02,120
transaction data that includes you know

407
00:18:00,350 --> 00:18:04,639
the account that you're transferring to

408
00:18:02,120 --> 00:18:06,709
or perhaps and that<font color="#CCCCCC"> you're changing your</font>

409
00:18:04,639 --> 00:18:11,389
address you know this information<font color="#E5E5E5"> that</font>

410
00:18:06,710 --> 00:18:14,860
you<font color="#E5E5E5"> want to validate so obviously</font>

411
00:18:11,389 --> 00:18:17,000
because your bank is able to validate

412
00:18:14,860 --> 00:18:19,610
transactions as coming from your card as

413
00:18:17,000 --> 00:18:22,039
genuine they're able to<font color="#E5E5E5"> take this faith</font>

414
00:18:19,610 --> 00:18:24,769
transaction and validate that it<font color="#E5E5E5"> was</font>

415
00:18:22,039 --> 00:18:28,460
signed you know by your<font color="#E5E5E5"> real debit card</font>

416
00:18:24,769 --> 00:18:30,260
just using the same mechanism and as<font color="#E5E5E5"> I</font>

417
00:18:28,460 --> 00:18:32,659
<font color="#CCCCCC">mentioned because the</font><font color="#E5E5E5"> user has to</font>

418
00:18:30,260 --> 00:18:34,399
independently confirm the amount and the

419
00:18:32,659 --> 00:18:36,950
account<font color="#CCCCCC"> number phishing attacks from</font>

420
00:18:34,399 --> 00:18:39,529
<font color="#CCCCCC">useless so this works really well for</font>

421
00:18:36,950 --> 00:18:42,889
banks you know massively cuts down

422
00:18:39,529 --> 00:18:45,860
phishing attacks this works fine even<font color="#E5E5E5"> if</font>

423
00:18:42,889 --> 00:18:47,620
the users pc as malware on it<font color="#E5E5E5"> again</font>

424
00:18:45,860 --> 00:18:50,750
<font color="#CCCCCC">because of</font><font color="#E5E5E5"> that independent verification</font>

425
00:18:47,620 --> 00:18:53,178
system but this is something that's

426
00:18:50,750 --> 00:18:56,659
highly specific to a financial

427
00:18:53,179 --> 00:18:58,519
<font color="#CCCCCC">institution you know if you're using</font>

428
00:18:56,659 --> 00:19:00,590
this to just generally<font color="#CCCCCC"> log in on</font>

429
00:18:58,519 --> 00:19:03,860
facebook you know it'd<font color="#CCCCCC"> be really</font>

430
00:19:00,590 --> 00:19:06,168
impractical to you know<font color="#CCCCCC"> i have an</font>

431
00:19:03,860 --> 00:19:07,610
independent device that you type in you

432
00:19:06,169 --> 00:19:09,830
know hey do you want to go to the cinema

433
00:19:07,610 --> 00:19:11,539
tonight and then you<font color="#E5E5E5"> get a code let you</font>

434
00:19:09,830 --> 00:19:13,279
have to enter<font color="#CCCCCC"> in today's messenger you</font>

435
00:19:11,539 --> 00:19:16,549
know is what it<font color="#CCCCCC"> work it would be</font>

436
00:19:13,279 --> 00:19:18,769
terrible user experience so you know

437
00:19:16,549 --> 00:19:24,620
sort<font color="#E5E5E5"> of think of a more generic version</font>

438
00:19:18,769 --> 00:19:29,029
of this<font color="#E5E5E5"> approach you know can we make a</font>

439
00:19:24,620 --> 00:19:31,789
signature where<font color="#E5E5E5"> we're tying that to the</font>

440
00:19:29,029 --> 00:19:35,139
domain name right because phishing

441
00:19:31,789 --> 00:19:38,179
attacks rely on the user noticing that

442
00:19:35,139 --> 00:19:40,850
the domain name you know that<font color="#CCCCCC"> that</font>

443
00:19:38,179 --> 00:19:43,700
they're on isn't the domain name<font color="#E5E5E5"> that</font>

444
00:19:40,850 --> 00:19:45,289
corresponds to the real website so as

445
00:19:43,700 --> 00:19:48,380
long as<font color="#E5E5E5"> you know the domain name matches</font>

446
00:19:45,289 --> 00:19:53,480
for amount<font color="#E5E5E5"> on the middle attack no we're</font>

447
00:19:48,380 --> 00:19:54,360
okay and so some organizations use smart

448
00:19:53,480 --> 00:19:56,130
cards

449
00:19:54,360 --> 00:19:59,310
with client authentication certificate

450
00:19:56,130 --> 00:20:01,890
to sort of get around this the US

451
00:19:59,310 --> 00:20:03,629
Department<font color="#CCCCCC"> of Defense is they probably</font>

452
00:20:01,890 --> 00:20:05,310
the world's largest adopter of<font color="#E5E5E5"> the</font>

453
00:20:03,630 --> 00:20:08,370
system they use it<font color="#CCCCCC"> for their webmail and</font>

454
00:20:05,310 --> 00:20:10,290
older web and professor Spain has<font color="#CCCCCC"> a</font>

455
00:20:08,370 --> 00:20:12,870
similar<font color="#E5E5E5"> nationalized system where you</font>

456
00:20:10,290 --> 00:20:16,080
can<font color="#CCCCCC"> sign into online banking using your</font>

457
00:20:12,870 --> 00:20:19,800
spanish national ID card and but the

458
00:20:16,080 --> 00:20:22,560
problem<font color="#CCCCCC"> is that there's a limited number</font>

459
00:20:19,800 --> 00:20:26,430
of identities that can be stored on this

460
00:20:22,560 --> 00:20:29,370
smart card so you<font color="#E5E5E5"> know this is fine if I</font>

461
00:20:26,430 --> 00:20:31,590
have a smart card issued to me you know

462
00:20:29,370 --> 00:20:33,060
by four you know as again using<font color="#CCCCCC"> the</font>

463
00:20:31,590 --> 00:20:36,149
example of the Department of<font color="#CCCCCC"> Defense and</font>

464
00:20:33,060 --> 00:20:38,669
<font color="#CCCCCC">I want</font><font color="#E5E5E5"> to sign on to the Department of</font>

465
00:20:36,150 --> 00:20:40,920
Defense's website<font color="#E5E5E5"> right so it's okay for</font>

466
00:20:38,670 --> 00:20:45,270
<font color="#E5E5E5">me to</font><font color="#CCCCCC"> have that one-to-one correlation</font>

467
00:20:40,920 --> 00:20:49,320
of my identity<font color="#CCCCCC"> um but you know I</font><font color="#E5E5E5"> don't</font>

468
00:20:45,270 --> 00:20:52,920
necessarily<font color="#E5E5E5"> want every website to have</font>

469
00:20:49,320 --> 00:20:56,129
this you know this single identifier of

470
00:20:52,920 --> 00:20:57,780
me that follows me around<font color="#E5E5E5"> right like if</font>

471
00:20:56,130 --> 00:21:00,840
<font color="#E5E5E5">I create an account on some random</font>

472
00:20:57,780 --> 00:21:03,420
person's blog I don't necessarily<font color="#E5E5E5"> want</font>

473
00:21:00,840 --> 00:21:04,980
them to know you know my national ID

474
00:21:03,420 --> 00:21:09,300
number I don't want them to know my full

475
00:21:04,980 --> 00:21:12,570
legal name so instead there's this new

476
00:21:09,300 --> 00:21:16,409
standard called<font color="#E5E5E5"> you to F and that Google</font>

477
00:21:12,570 --> 00:21:18,480
<font color="#CCCCCC">has been huge adopters on that tries to</font>

478
00:21:16,410 --> 00:21:21,000
be a modern version of these client

479
00:21:18,480 --> 00:21:22,680
authentication certificates and a lot of

480
00:21:21,000 --> 00:21:24,690
<font color="#E5E5E5">websites have started picking up on this</font>

481
00:21:22,680 --> 00:21:27,270
standard as I mentioned you know<font color="#E5E5E5"> Google</font>

482
00:21:24,690 --> 00:21:29,130
or huge adopters of it github<font color="#E5E5E5"> hug also</font>

483
00:21:27,270 --> 00:21:32,430
take it up fast Millie's at Facebook use

484
00:21:29,130 --> 00:21:36,210
it call box use it duo use it basically

485
00:21:32,430 --> 00:21:39,120
<font color="#E5E5E5">you have these little ESP keys you know</font>

486
00:21:36,210 --> 00:21:40,470
they're newer you be keys they work sort

487
00:21:39,120 --> 00:21:44,100
of in a similar way as the older you

488
00:21:40,470 --> 00:21:47,250
bikies work and but when<font color="#E5E5E5"> you go to sign</font>

489
00:21:44,100 --> 00:21:49,919
on to website you get in this little

490
00:21:47,250 --> 00:21:52,920
prompt that says you know<font color="#E5E5E5"> please insert</font>

491
00:21:49,920 --> 00:21:55,800
your token into your computer and you

492
00:21:52,920 --> 00:21:58,470
know push the button on and it waits for

493
00:21:55,800 --> 00:22:00,540
you know the token button to be pushed

494
00:21:58,470 --> 00:22:01,920
<font color="#E5E5E5">and then you know uses the information</font>

495
00:22:00,540 --> 00:22:05,370
that<font color="#E5E5E5"> I guess from the token to</font>

496
00:22:01,920 --> 00:22:07,050
authenticate you and basically in this

497
00:22:05,370 --> 00:22:07,959
case the web browser acts as<font color="#CCCCCC"> a</font><font color="#E5E5E5"> middleman</font>

498
00:22:07,050 --> 00:22:10,480
between

499
00:22:07,960 --> 00:22:12,400
token and the web servers right because

500
00:22:10,480 --> 00:22:15,430
the web browser is aware which domain

501
00:22:12,400 --> 00:22:17,440
you're going to its aware of a bunch of

502
00:22:15,430 --> 00:22:20,620
attributes regarding the connection so

503
00:22:17,440 --> 00:22:24,490
it can't be deceived like a human<font color="#E5E5E5"> I</font>

504
00:22:20,620 --> 00:22:26,679
would be deceived and you to<font color="#CCCCCC"> f helps</font>

505
00:22:24,490 --> 00:22:29,380
with the anonymity issue because unique

506
00:22:26,680 --> 00:22:33,510
private key is generated on<font color="#CCCCCC"> the device</font>

507
00:22:29,380 --> 00:22:36,130
for each account on each service so

508
00:22:33,510 --> 00:22:39,100
because the key is based on the domain

509
00:22:36,130 --> 00:22:43,180
name phishing attacks are impossible if

510
00:22:39,100 --> 00:22:46,030
i use my you to F key on facebook com it

511
00:22:43,180 --> 00:22:48,100
will generate you know one key but if<font color="#E5E5E5"> I</font>

512
00:22:46,030 --> 00:22:50,350
go<font color="#CCCCCC"> to fake facebook com it will generate</font>

513
00:22:48,100 --> 00:22:53,350
an entirely different p which is useless

514
00:22:50,350 --> 00:22:56,230
on<font color="#E5E5E5"> the real facebook com and here's a</font>

515
00:22:53,350 --> 00:22:58,030
sort<font color="#E5E5E5"> of you know complicated algorithm</font>

516
00:22:56,230 --> 00:23:00,250
of how that<font color="#E5E5E5"> works you've got all this</font>

517
00:22:58,030 --> 00:23:02,170
information coming in from the server

518
00:23:00,250 --> 00:23:04,300
which the browser pass along to the

519
00:23:02,170 --> 00:23:06,750
token token comes back to the signature

520
00:23:04,300 --> 00:23:08,680
<font color="#E5E5E5">and then the server verifies that but</font>

521
00:23:06,750 --> 00:23:12,010
let's sort of break this down into

522
00:23:08,680 --> 00:23:14,500
pieces basically you know the sort of

523
00:23:12,010 --> 00:23:16,330
core fundamental part<font color="#E5E5E5"> of why this is</font>

524
00:23:14,500 --> 00:23:19,060
secure is because the key generation

525
00:23:16,330 --> 00:23:22,090
process is fully handled by the token in

526
00:23:19,060 --> 00:23:24,490
hardware and can't be extracted there's

527
00:23:22,090 --> 00:23:27,639
no way for you to you know<font color="#E5E5E5"> if</font><font color="#CCCCCC"> i leave my</font>

528
00:23:24,490 --> 00:23:29,890
<font color="#E5E5E5">youtube token out on a table there's no</font>

529
00:23:27,640 --> 00:23:33,070
way for you to take<font color="#CCCCCC"> that and without</font>

530
00:23:29,890 --> 00:23:34,840
physically destroying the token using an

531
00:23:33,070 --> 00:23:37,740
electron<font color="#CCCCCC"> microscope you know spending a</font>

532
00:23:34,840 --> 00:23:41,199
lot of<font color="#CCCCCC"> money to</font><font color="#E5E5E5"> to look at the silicon</font>

533
00:23:37,740 --> 00:23:44,320
there's no way for you to easily you're

534
00:23:41,200 --> 00:23:47,530
really feasibly extract the private keys

535
00:23:44,320 --> 00:23:49,540
from the<font color="#E5E5E5"> toad so where is the user</font>

536
00:23:47,530 --> 00:23:52,030
registers their key with a service right

537
00:23:49,540 --> 00:23:54,159
so I good Facebook can I say<font color="#CCCCCC"> okay I want</font>

538
00:23:52,030 --> 00:23:56,639
to<font color="#E5E5E5"> protect my account I want to sign in</font>

539
00:23:54,160 --> 00:23:58,750
using YouTube after an hour and

540
00:23:56,640 --> 00:24:00,550
basically when you<font color="#E5E5E5"> do this the server</font>

541
00:23:58,750 --> 00:24:04,180
generate the challenge is that<font color="#CCCCCC"> this</font>

542
00:24:00,550 --> 00:24:07,180
random stream to make sure that the

543
00:24:04,180 --> 00:24:08,350
token that's being registered is a press

544
00:24:07,180 --> 00:24:10,090
registration<font color="#CCCCCC"> it's something that's</font>

545
00:24:08,350 --> 00:24:13,179
happening<font color="#CCCCCC"> right now we're</font><font color="#E5E5E5"> not stealing</font>

546
00:24:10,090 --> 00:24:15,129
someone else's token and so the server

547
00:24:13,180 --> 00:24:17,530
takes that challenge passes it along to

548
00:24:15,130 --> 00:24:19,900
browser the browser takes information

549
00:24:17,530 --> 00:24:21,940
about the current session and takes

550
00:24:19,900 --> 00:24:25,870
domain name it takes

551
00:24:21,940 --> 00:24:27,610
the<font color="#CCCCCC"> username on</font><font color="#E5E5E5"> your service and it</font>

552
00:24:25,870 --> 00:24:29,709
takes that challenge<font color="#E5E5E5"> and it passes it</font>

553
00:24:27,610 --> 00:24:31,000
along to the you to F token used to have

554
00:24:29,710 --> 00:24:32,649
token will start flashing and it will

555
00:24:31,000 --> 00:24:35,379
confirm you know do you want<font color="#CCCCCC"> to generate</font>

556
00:24:32,649 --> 00:24:38,408
<font color="#CCCCCC">a key for the service so</font><font color="#E5E5E5"> you push the</font>

557
00:24:35,379 --> 00:24:40,120
button<font color="#E5E5E5"> and it generates as the key</font><font color="#CCCCCC"> you</font>

558
00:24:38,409 --> 00:24:42,240
send it back of our age axis and back

559
00:24:40,120 --> 00:24:44,739
before and whatever<font color="#E5E5E5"> and the server</font>

560
00:24:42,240 --> 00:24:47,559
validates that it received you know new

561
00:24:44,740 --> 00:24:49,029
public key<font color="#E5E5E5"> and it validates that the</font>

562
00:24:47,559 --> 00:24:51,309
challenge that had previously generated

563
00:24:49,029 --> 00:24:54,429
you know this long random string was

564
00:24:51,309 --> 00:24:56,379
indeed signed with the public key that

565
00:24:54,429 --> 00:24:59,559
it received and if everything<font color="#E5E5E5"> checks out</font>

566
00:24:56,379 --> 00:25:02,500
and it can store that token identity now

567
00:24:59,559 --> 00:25:06,850
the service<font color="#E5E5E5"> has</font><font color="#CCCCCC"> a public key specific to</font>

568
00:25:02,500 --> 00:25:08,950
this user on this service on<font color="#CCCCCC"> 5 so this</font>

569
00:25:06,850 --> 00:25:11,678
<font color="#CCCCCC">is something you know again if unique to</font>

570
00:25:08,950 --> 00:25:13,720
the service if<font color="#CCCCCC"> I wanted to I can use the</font>

571
00:25:11,679 --> 00:25:16,179
same you to<font color="#CCCCCC"> F token across two accounts</font>

572
00:25:13,720 --> 00:25:18,669
on<font color="#CCCCCC"> Facebook and</font><font color="#E5E5E5"> it will get entirely</font>

573
00:25:16,179 --> 00:25:21,220
different public<font color="#E5E5E5"> keys you know because</font>

574
00:25:18,669 --> 00:25:25,659
again there's that<font color="#E5E5E5"> username field as</font>

575
00:25:21,220 --> 00:25:28,299
part of generating the identity you<font color="#E5E5E5"> know</font>

576
00:25:25,659 --> 00:25:30,730
server set<font color="#E5E5E5"> we're ready to use this token</font>

577
00:25:28,299 --> 00:25:32,740
for future authentication so in

578
00:25:30,730 --> 00:25:35,830
authenticating the user we ask for

579
00:25:32,740 --> 00:25:38,169
another signature but we give the token

580
00:25:35,830 --> 00:25:42,699
details about the identity<font color="#E5E5E5"> that have</font>

581
00:25:38,169 --> 00:25:44,769
previously generated so the server looks

582
00:25:42,700 --> 00:25:46,389
up the token identity it generates

583
00:25:44,769 --> 00:25:48,940
another challenge you notice this big

584
00:25:46,389 --> 00:25:52,209
random string and it calls his<font color="#CCCCCC"> sine</font>

585
00:25:48,940 --> 00:25:54,009
<font color="#E5E5E5">function instead so it passes that along</font>

586
00:25:52,210 --> 00:25:56,470
to the token you know the token

587
00:25:54,009 --> 00:25:58,570
generates the key passes it along back

588
00:25:56,470 --> 00:26:01,330
<font color="#CCCCCC">to the server</font><font color="#E5E5E5"> and the server validates</font>

589
00:25:58,570 --> 00:26:03,279
challenge and if the challenge that it

590
00:26:01,330 --> 00:26:04,840
passed along was signed by the same

591
00:26:03,279 --> 00:26:07,779
public key that it recorded during

592
00:26:04,840 --> 00:26:10,178
registration then<font color="#E5E5E5"> we know that</font><font color="#CCCCCC"> the user</font>

593
00:26:07,779 --> 00:26:13,720
<font color="#E5E5E5">is in possession of the private key that</font>

594
00:26:10,179 --> 00:26:15,190
they provided<font color="#CCCCCC"> at registration and we</font>

595
00:26:13,720 --> 00:26:19,659
know that everything is fought you know

596
00:26:15,190 --> 00:26:23,129
the mass checks out but<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> one sort</font>

597
00:26:19,659 --> 00:26:27,730
of nitpicky problem about this right

598
00:26:23,129 --> 00:26:30,070
this helps with fishing but it<font color="#E5E5E5"> doesn't</font>

599
00:26:27,730 --> 00:26:32,769
help for those nation-state attack

600
00:26:30,070 --> 00:26:34,899
scenarios where the adversary is able to

601
00:26:32,769 --> 00:26:41,650
present a valid certificate for

602
00:26:34,900 --> 00:26:44,200
<font color="#E5E5E5">me so if I'm Google right and I'm</font>

603
00:26:41,650 --> 00:26:47,410
someone who nation-states would like to

604
00:26:44,200 --> 00:26:50,080
attack you know say for example China

605
00:26:47,410 --> 00:26:52,270
China has a lot of certificate

606
00:26:50,080 --> 00:26:55,600
authorities that they can place

607
00:26:52,270 --> 00:26:58,270
political pressure on to create a valid

608
00:26:55,600 --> 00:27:01,360
certificate for google com that will

609
00:26:58,270 --> 00:27:04,389
validate in a browser so<font color="#E5E5E5"> you know you'll</font>

610
00:27:01,360 --> 00:27:06,010
<font color="#E5E5E5">be connecting to google com you'll get</font>

611
00:27:04,390 --> 00:27:08,110
<font color="#E5E5E5">you know the green bar ever saying</font>

612
00:27:06,010 --> 00:27:11,620
everything will seem fine from your

613
00:27:08,110 --> 00:27:15,370
<font color="#E5E5E5">perspective and the adversary can simply</font>

614
00:27:11,620 --> 00:27:18,580
proxy your connection all they need to

615
00:27:15,370 --> 00:27:21,219
do is pass along the challenge your

616
00:27:18,580 --> 00:27:23,290
browser signs it your browser comes back

617
00:27:21,220 --> 00:27:25,570
with the sign challenge they pass that

618
00:27:23,290 --> 00:27:28,510
along and now they<font color="#CCCCCC"> have a valid section</font>

619
00:27:25,570 --> 00:27:30,669
for you right because<font color="#CCCCCC"> as far as</font><font color="#E5E5E5"> the</font>

620
00:27:28,510 --> 00:27:32,379
browser knows you're talking with the

621
00:27:30,670 --> 00:27:35,200
real server you know you're talking<font color="#CCCCCC"> with</font>

622
00:27:32,380 --> 00:27:39,990
the browser the server has<font color="#CCCCCC"> a certificate</font>

623
00:27:35,200 --> 00:27:42,880
<font color="#CCCCCC">that it trusts so it seems fun but</font>

624
00:27:39,990 --> 00:27:47,560
further there's a proposed specification

625
00:27:42,880 --> 00:27:50,920
and to TLS which tries to add a

626
00:27:47,560 --> 00:27:54,669
self-signed client certificate to the

627
00:27:50,920 --> 00:27:58,930
TLS handshake so that this proxy step

628
00:27:54,670 --> 00:28:04,180
doesn't<font color="#E5E5E5"> work and you can pin you to</font><font color="#CCCCCC"> F</font>

629
00:27:58,930 --> 00:28:07,570
identities to a channel ID and here's a

630
00:28:04,180 --> 00:28:10,360
modified version of the you to<font color="#CCCCCC"> f</font><font color="#E5E5E5"> flow to</font>

631
00:28:07,570 --> 00:28:13,000
include this channel ID process

632
00:28:10,360 --> 00:28:16,959
essentially what happens is your browser

633
00:28:13,000 --> 00:28:20,560
creates a public/private key pair and it

634
00:28:16,960 --> 00:28:24,550
sends the public key of that pair along

635
00:28:20,560 --> 00:28:26,409
when it starts<font color="#E5E5E5"> at</font><font color="#CCCCCC"> els connection your</font>

636
00:28:24,550 --> 00:28:28,510
man in the middling server is<font color="#CCCCCC"> going to</font>

637
00:28:26,410 --> 00:28:31,330
have to create its own key paper right

638
00:28:28,510 --> 00:28:32,950
because it's not<font color="#CCCCCC"> able it doesn't have</font>

639
00:28:31,330 --> 00:28:35,620
knowledge<font color="#E5E5E5"> of the private key that</font><font color="#CCCCCC"> you</font>

640
00:28:32,950 --> 00:28:38,380
created and so it's<font color="#E5E5E5"> unable to sign</font>

641
00:28:35,620 --> 00:28:40,629
messages with that public it has to<font color="#E5E5E5"> make</font>

642
00:28:38,380 --> 00:28:43,060
its own so<font color="#E5E5E5"> you pass this information</font>

643
00:28:40,630 --> 00:28:44,770
along to the server the<font color="#CCCCCC"> server same as</font>

644
00:28:43,060 --> 00:28:46,200
before it looks at the token identity

645
00:28:44,770 --> 00:28:48,510
generates a child

646
00:28:46,200 --> 00:28:51,870
and the man in the<font color="#CCCCCC"> middle</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font>

647
00:28:48,510 --> 00:28:54,660
proxies that information over however as

648
00:28:51,870 --> 00:28:57,629
<font color="#E5E5E5">I mentioned</font><font color="#CCCCCC"> previously the browser has</font>

649
00:28:54,660 --> 00:29:03,420
information on the whole session<font color="#CCCCCC"> context</font>

650
00:28:57,630 --> 00:29:07,410
so it's aware of this session ID so it

651
00:29:03,420 --> 00:29:10,470
includes that ID with you know in<font color="#E5E5E5"> the</font>

652
00:29:07,410 --> 00:29:13,500
<font color="#E5E5E5">signature process so in addition to the</font>

653
00:29:10,470 --> 00:29:17,310
challenge you also have this unique ID

654
00:29:13,500 --> 00:29:20,370
DD valid only for this session included

655
00:29:17,310 --> 00:29:22,050
with the signature so the token you know

656
00:29:20,370 --> 00:29:24,750
receive that<font color="#CCCCCC"> signed</font><font color="#E5E5E5"> that you know same</font>

657
00:29:22,050 --> 00:29:28,919
as usual and when<font color="#E5E5E5"> the proxy passes that</font>

658
00:29:24,750 --> 00:29:30,870
along<font color="#E5E5E5"> the server you know looks at the</font>

659
00:29:28,920 --> 00:29:32,760
signature and it goes<font color="#CCCCCC"> okay you know this</font>

660
00:29:30,870 --> 00:29:37,409
matches the challenge<font color="#CCCCCC"> that I gave you</font>

661
00:29:32,760 --> 00:29:39,990
earlier but the<font color="#E5E5E5"> channel ID that in the</font>

662
00:29:37,410 --> 00:29:43,320
<font color="#E5E5E5">signature doesn't match the channel ID</font>

663
00:29:39,990 --> 00:29:46,740
for this connection so as a result the

664
00:29:43,320 --> 00:29:48,810
man in the middle attack is useless<font color="#E5E5E5"> so</font>

665
00:29:46,740 --> 00:29:51,960
you can own the entire you know<font color="#E5E5E5"> the</font>

666
00:29:48,810 --> 00:29:54,810
entire stack in between the user and the

667
00:29:51,960 --> 00:29:58,800
server and you to<font color="#CCCCCC"> F will still protect</font>

668
00:29:54,810 --> 00:30:00,740
you at this point the only way that you

669
00:29:58,800 --> 00:30:04,550
can break you to<font color="#E5E5E5"> F is if you have</font>

670
00:30:00,740 --> 00:30:08,640
malware on your machine that's actively

671
00:30:04,550 --> 00:30:10,290
compromising the signature process so

672
00:30:08,640 --> 00:30:12,030
that it doesn't have to do the channel

673
00:30:10,290 --> 00:30:17,159
ID<font color="#E5E5E5"> process or so that it passes it along</font>

674
00:30:12,030 --> 00:30:20,010
to the attacker so although the only

675
00:30:17,160 --> 00:30:21,720
issue is that<font color="#CCCCCC"> Hardware you to</font><font color="#E5E5E5"> F tokens</font>

676
00:30:20,010 --> 00:30:25,350
are really<font color="#CCCCCC"> difficult to use on</font>

677
00:30:21,720 --> 00:30:30,150
smartphones<font color="#E5E5E5"> I mean you could you know</font>

678
00:30:25,350 --> 00:30:32,490
take<font color="#CCCCCC"> a newer smartphone with us bc or</font>

679
00:30:30,150 --> 00:30:34,860
even<font color="#CCCCCC"> smartphone with mini with micro USB</font>

680
00:30:32,490 --> 00:30:37,350
and you know plugging you to esky into

681
00:30:34,860 --> 00:30:38,969
it but you<font color="#E5E5E5"> know the browser's don't</font>

682
00:30:37,350 --> 00:30:41,790
really support it and you know<font color="#E5E5E5"> sort of</font>

683
00:30:38,970 --> 00:30:45,180
awkward tava you know<font color="#E5E5E5"> tokens dangling</font>

684
00:30:41,790 --> 00:30:47,220
out<font color="#CCCCCC"> of your smartphone so there are</font>

685
00:30:45,180 --> 00:30:51,000
software implementations at the same

686
00:30:47,220 --> 00:30:54,270
thing<font color="#E5E5E5"> you know which you could use on a</font>

687
00:30:51,000 --> 00:30:56,440
smartphone<font color="#E5E5E5"> and when you generate a token</font>

688
00:30:54,270 --> 00:30:59,170
it includes in

689
00:30:56,440 --> 00:31:01,420
about the<font color="#CCCCCC"> u 2f device that generated the</font>

690
00:30:59,170 --> 00:31:03,990
token so you know if you're a bank you

691
00:31:01,420 --> 00:31:06,730
<font color="#E5E5E5">could say</font><font color="#CCCCCC"> no I only want Hardware tokens</font>

692
00:31:03,990 --> 00:31:09,570
if you're a blog you can say no<font color="#CCCCCC"> I'm okay</font>

693
00:31:06,730 --> 00:31:11,890
with software tokens so you know it is

694
00:31:09,570 --> 00:31:13,960
flexible enough to support you know<font color="#E5E5E5"> even</font>

695
00:31:11,890 --> 00:31:17,620
the most paranoid of use cases but also

696
00:31:13,960 --> 00:31:19,150
in a sort of more lenient use case but

697
00:31:17,620 --> 00:31:21,159
additionally after minute you to<font color="#E5E5E5"> F has</font>

698
00:31:19,150 --> 00:31:25,030
very little support outside google

699
00:31:21,160 --> 00:31:27,940
chrome there is a<font color="#CCCCCC"> firefox bug that's</font>

700
00:31:25,030 --> 00:31:30,520
<font color="#E5E5E5">open to add you Jeff support for google</font>

701
00:31:27,940 --> 00:31:33,490
chrome and<font color="#E5E5E5"> mozilla are hoping to</font><font color="#CCCCCC"> add you</font>

702
00:31:30,520 --> 00:31:36,460
to have<font color="#CCCCCC"> support to firefox by the end of</font>

703
00:31:33,490 --> 00:31:37,750
second quarter this year so overall<font color="#CCCCCC"> you</font>

704
00:31:36,460 --> 00:31:40,840
know this is<font color="#CCCCCC"> a pretty exciting</font>

705
00:31:37,750 --> 00:31:42,640
technology there's a<font color="#E5E5E5"> lot you know coming</font>

706
00:31:40,840 --> 00:31:44,919
into place with it and you know

707
00:31:42,640 --> 00:31:49,440
<font color="#E5E5E5">hopefully it'll help make the web a</font>

708
00:31:44,920 --> 00:31:49,440
little bit safer thank you very much

709
00:31:54,590 --> 00:32:04,730
I can recover and super<font color="#CCCCCC"> 10 minutes</font><font color="#E5E5E5"> per</font>

710
00:31:58,250 --> 00:32:06,650
<font color="#E5E5E5">question and can happen are okay they'll</font>

711
00:32:04,730 --> 00:32:10,370
be<font color="#CCCCCC"> a particularly technical yourself but</font>

712
00:32:06,650 --> 00:32:12,220
other member of the<font color="#E5E5E5"> public what would</font>

713
00:32:10,370 --> 00:32:15,260
you<font color="#E5E5E5"> like</font><font color="#CCCCCC"> me to you something right now</font>

714
00:32:12,220 --> 00:32:18,230
<font color="#E5E5E5">and so the question was would a member</font>

715
00:32:15,260 --> 00:32:21,620
of the<font color="#E5E5E5"> public be likely to use something</font>

716
00:32:18,230 --> 00:32:24,169
like this and<font color="#E5E5E5"> I</font><font color="#CCCCCC"> think so I</font><font color="#E5E5E5"> mean if you</font>

717
00:32:21,620 --> 00:32:26,989
sign up<font color="#CCCCCC"> for</font><font color="#E5E5E5"> online banking and you know</font>

718
00:32:24,169 --> 00:32:29,419
you get a token in the<font color="#E5E5E5"> post from your</font>

719
00:32:26,990 --> 00:32:31,970
bank and<font color="#CCCCCC"> they say you know when you sign</font>

720
00:32:29,419 --> 00:32:33,830
on to online banking you'll need to<font color="#E5E5E5"> plug</font>

721
00:32:31,970 --> 00:32:36,440
this in and push the button and it will

722
00:32:33,830 --> 00:32:38,270
validate your identity you know I can

723
00:32:36,440 --> 00:32:39,860
<font color="#E5E5E5">see it catching on it's not something</font>

724
00:32:38,270 --> 00:32:42,529
that's cumbersome to use and in fact it

725
00:32:39,860 --> 00:32:44,510
it's easier than the current solution of

726
00:32:42,529 --> 00:32:45,950
your<font color="#E5E5E5"> banks sending you you know an</font>

727
00:32:44,510 --> 00:32:48,080
authenticator device which<font color="#E5E5E5"> you have to</font>

728
00:32:45,950 --> 00:32:51,080
<font color="#E5E5E5">plug your debit card in to generate you</font>

729
00:32:48,080 --> 00:32:54,110
know code type that in so you know it

730
00:32:51,080 --> 00:32:56,090
could catch on and but it does have that

731
00:32:54,110 --> 00:32:57,889
that<font color="#E5E5E5"> sort of higher barrier to entry in</font>

732
00:32:56,090 --> 00:32:59,600
that you<font color="#CCCCCC"> know you need to buy although</font>

733
00:32:57,890 --> 00:33:01,490
inexpensive you know these took its

734
00:32:59,600 --> 00:33:03,370
tentacles around ten dollars but<font color="#E5E5E5"> you</font>

735
00:33:01,490 --> 00:33:08,059
<font color="#CCCCCC">still have to buy the hardware to use it</font>

736
00:33:03,370 --> 00:33:12,949
<font color="#CCCCCC">and how do you know anyone maybe how you</font>

737
00:33:08,059 --> 00:33:15,440
doing in<font color="#E5E5E5"> Ohio and the organization</font>

738
00:33:12,950 --> 00:33:18,740
behind the standard<font color="#CCCCCC"> Phaedo do have a</font>

739
00:33:15,440 --> 00:33:20,710
certification process for the tokens to

740
00:33:18,740 --> 00:33:24,320
make sure that they're adequately

741
00:33:20,710 --> 00:33:27,110
safeguarding the private keys but<font color="#E5E5E5"> you</font>

742
00:33:24,320 --> 00:33:30,559
<font color="#E5E5E5">can make your own there are completely</font>

743
00:33:27,110 --> 00:33:32,059
open source you to<font color="#CCCCCC"> F tokens or you can</font>

744
00:33:30,559 --> 00:33:35,059
buy the pieces you know solder them

745
00:33:32,059 --> 00:33:36,408
together you know so because it's an

746
00:33:35,059 --> 00:33:37,879
open standard you<font color="#CCCCCC"> know there</font><font color="#E5E5E5"> is that</font>

747
00:33:36,409 --> 00:33:40,580
sort of flexibility of building your own

748
00:33:37,880 --> 00:33:42,919
or using a commercial on but again<font color="#CCCCCC"> the</font>

749
00:33:40,580 --> 00:33:44,809
service provider can tell if you're

750
00:33:42,919 --> 00:33:46,789
using one that you made yourself or

751
00:33:44,809 --> 00:33:48,408
commercial one and decide whether<font color="#E5E5E5"> they</font>

752
00:33:46,789 --> 00:33:50,450
want<font color="#CCCCCC"> to trust out or whether they want</font>

753
00:33:48,409 --> 00:33:54,200
to use one<font color="#CCCCCC"> from a company that</font><font color="#E5E5E5"> they</font>

754
00:33:50,450 --> 00:33:57,890
trust I'm talking one more<font color="#E5E5E5"> little USB</font>

755
00:33:54,200 --> 00:34:00,110
<font color="#E5E5E5">Drive I most you have tokens are USB</font>

756
00:33:57,890 --> 00:34:02,179
devices and but as<font color="#E5E5E5"> I</font><font color="#CCCCCC"> mentioned you can</font>

757
00:34:00,110 --> 00:34:04,080
have software once and they're also nfcu

758
00:34:02,179 --> 00:34:06,480
to of tokens as well

759
00:34:04,080 --> 00:34:10,848
<font color="#E5E5E5">computer perspective he helped with</font>

760
00:34:06,480 --> 00:34:24,719
<font color="#CCCCCC">Anthony</font><font color="#E5E5E5"> VAP for a private vehicle</font>

761
00:34:10,849 --> 00:34:25,980
anymore so yeah so the question was is

762
00:34:24,719 --> 00:34:29,189
there any sort<font color="#E5E5E5"> of key management</font>

763
00:34:25,980 --> 00:34:31,619
involved with a u 2f token and there is

764
00:34:29,190 --> 00:34:35,040
it the token itself actually has no

765
00:34:31,619 --> 00:34:37,129
onboard storage what it does is<font color="#E5E5E5"> when you</font>

766
00:34:35,040 --> 00:34:39,960
go to create a signature it

767
00:34:37,129 --> 00:34:43,230
algorithmically recreates the same

768
00:34:39,960 --> 00:34:45,540
private key and based on<font color="#E5E5E5"> a you know a</font>

769
00:34:43,230 --> 00:34:48,780
starting private key that it has burnt

770
00:34:45,540 --> 00:34:52,139
into its memory so it's able<font color="#CCCCCC"> to create</font>

771
00:34:48,780 --> 00:34:54,839
unlimited identities as long as the

772
00:34:52,139 --> 00:34:57,119
service is able to<font color="#E5E5E5"> provide it with you</font>

773
00:34:54,839 --> 00:34:59,759
know<font color="#E5E5E5"> that's sort of</font><font color="#CCCCCC"> IED from which it</font>

774
00:34:57,119 --> 00:35:04,109
can then recreate the private key so

775
00:34:59,760 --> 00:35:06,060
there's<font color="#E5E5E5"> no way to reset a token but you</font>

776
00:35:04,109 --> 00:35:08,609
know you can just deregister the token

777
00:35:06,060 --> 00:35:14,580
and it will create a new<font color="#E5E5E5"> identity the</font>

778
00:35:08,609 --> 00:35:16,020
next time you register it so the

779
00:35:14,580 --> 00:35:18,990
<font color="#CCCCCC">question was what happens if you lose</font>

780
00:35:16,020 --> 00:35:25,589
the token it's useless without your

781
00:35:18,990 --> 00:35:29,700
password right so that would then depend

782
00:35:25,589 --> 00:35:31,500
on on the service in question right<font color="#E5E5E5"> so</font>

783
00:35:29,700 --> 00:35:34,200
if you lose if<font color="#E5E5E5"> you lose your token and</font>

784
00:35:31,500 --> 00:35:35,760
need<font color="#CCCCCC"> to get back in you</font><font color="#E5E5E5"> know they'll</font>

785
00:35:34,200 --> 00:35:36,839
need some sort of recovery method and

786
00:35:35,760 --> 00:35:39,089
that's where again it sort of gets

787
00:35:36,839 --> 00:35:41,190
sticky because there have<font color="#CCCCCC"> been a lot of</font>

788
00:35:39,089 --> 00:35:42,960
social engineering<font color="#E5E5E5"> cases where people</font>

789
00:35:41,190 --> 00:35:45,359
contact support and say you know I've

790
00:35:42,960 --> 00:35:48,810
lost my token can you get<font color="#E5E5E5"> me back into</font>

791
00:35:45,359 --> 00:35:51,000
my account so<font color="#E5E5E5"> you know then there is</font>

792
00:35:48,810 --> 00:35:53,640
that need for you know okay what what do

793
00:35:51,000 --> 00:35:57,060
<font color="#E5E5E5">you do for recovery I'm in my case I</font>

794
00:35:53,640 --> 00:35:59,190
have two tokens I have one that<font color="#E5E5E5"> I carry</font>

795
00:35:57,060 --> 00:36:02,759
on me and I have one I keep in a locked

796
00:35:59,190 --> 00:36:04,710
box at my<font color="#E5E5E5"> flat so if i lose the token</font>

797
00:36:02,760 --> 00:36:08,010
that I carry with me I can use the one

798
00:36:04,710 --> 00:36:09,869
in my plot to sign on to my account<font color="#E5E5E5"> do</font>

799
00:36:08,010 --> 00:36:10,860
<font color="#E5E5E5">you register the lost token and then add</font>

800
00:36:09,869 --> 00:36:27,420
you know new

801
00:36:10,860 --> 00:36:29,250
when I got one yeah if swirl and so the

802
00:36:27,420 --> 00:36:33,620
question was whether it was similar<font color="#CCCCCC"> to</font>

803
00:36:29,250 --> 00:36:36,000
Steve Gibson's you know solution to

804
00:36:33,620 --> 00:36:38,069
create you know identities based on the

805
00:36:36,000 --> 00:36:41,130
domain<font color="#E5E5E5"> name and I wasn't</font><font color="#CCCCCC"> aware</font><font color="#E5E5E5"> that he</font>

806
00:36:38,070 --> 00:36:43,470
was looking into that but I'll look into

807
00:36:41,130 --> 00:36:46,680
it you know when I<font color="#CCCCCC"> get the chance to I</font>

808
00:36:43,470 --> 00:36:48,089
don't<font color="#E5E5E5"> know if it's related as I</font>

809
00:36:46,680 --> 00:36:50,129
mentioned<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> it is a an open</font>

810
00:36:48,090 --> 00:36:51,600
standard something that's being done in

811
00:36:50,130 --> 00:36:54,570
the<font color="#E5E5E5"> public is something that anyone can</font>

812
00:36:51,600 --> 00:36:57,480
contribute<font color="#E5E5E5"> to see very well you know may</font>

813
00:36:54,570 --> 00:36:59,160
<font color="#E5E5E5">be involved in the process of working on</font>

814
00:36:57,480 --> 00:37:16,410
the specification but I'm not sure of

815
00:36:59,160 --> 00:37:18,710
<font color="#E5E5E5">the two projects are related good yep so</font>

816
00:37:16,410 --> 00:37:22,379
the question<font color="#CCCCCC"> was is there any way to</font>

817
00:37:18,710 --> 00:37:24,450
validate<font color="#E5E5E5"> that the token is being</font>

818
00:37:22,380 --> 00:37:26,820
faithful about its identity and not

819
00:37:24,450 --> 00:37:29,520
claiming to be you know commercial token

820
00:37:26,820 --> 00:37:32,850
<font color="#E5E5E5">on actually it's a</font><font color="#CCCCCC"> homeroom</font><font color="#E5E5E5"> basically</font>

821
00:37:29,520 --> 00:37:36,120
<font color="#CCCCCC">and what's happened is the manufacturer</font>

822
00:37:32,850 --> 00:37:39,569
embeds the private key in to the memory

823
00:37:36,120 --> 00:37:42,890
of the token that's you know 42 batch so

824
00:37:39,570 --> 00:37:45,900
say like every hundred thousand keys and

825
00:37:42,890 --> 00:37:48,330
when you<font color="#E5E5E5"> ask the token to validate its</font>

826
00:37:45,900 --> 00:37:51,240
it's like you know its manufacturer and

827
00:37:48,330 --> 00:37:53,940
the token signs the message using this

828
00:37:51,240 --> 00:37:56,220
private key so<font color="#E5E5E5"> you know you give it a</font>

829
00:37:53,940 --> 00:37:58,200
challenge and finds a challenge with the

830
00:37:56,220 --> 00:38:00,480
information about itself using this

831
00:37:58,200 --> 00:38:04,410
private key so you can't replay that

832
00:38:00,480 --> 00:38:07,410
information in theory if you extracted

833
00:38:04,410 --> 00:38:10,140
the private key from the token you could

834
00:38:07,410 --> 00:38:13,290
do that but<font color="#CCCCCC"> again these tokens are built</font>

835
00:38:10,140 --> 00:38:15,750
to be resilient against you know private

836
00:38:13,290 --> 00:38:18,090
key extraction attacks so it'd<font color="#CCCCCC"> be really</font>

837
00:38:15,750 --> 00:38:21,620
expensive and just generally you know

838
00:38:18,090 --> 00:38:21,620
counterproductive to try to do that

839
00:38:25,380 --> 00:38:33,209
ok

840
00:38:27,900 --> 00:38:33,209
[Applause]

