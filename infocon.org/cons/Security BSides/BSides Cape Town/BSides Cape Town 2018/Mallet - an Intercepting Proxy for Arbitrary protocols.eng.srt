1
00:00:05,200 --> 00:00:11,900
<font color="#E5E5E5">okay so your last couple</font><font color="#CCCCCC"> of minutes</font>

2
00:00:09,530 --> 00:00:14,059
<font color="#E5E5E5">maybe</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so what I'm going to be</font>

3
00:00:11,900 --> 00:00:16,390
showing you is<font color="#CCCCCC"> a tool that I've been</font>

4
00:00:14,060 --> 00:00:21,079
<font color="#CCCCCC">working on</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the last year or so that</font>

5
00:00:16,390 --> 00:00:25,180
<font color="#CCCCCC">is designed</font><font color="#E5E5E5"> to assist people</font><font color="#CCCCCC"> who</font><font color="#E5E5E5"> want to</font>

6
00:00:21,079 --> 00:00:33,710
understand how a<font color="#E5E5E5"> client is talking to</font>

7
00:00:25,180 --> 00:00:35,450
<font color="#E5E5E5">other systems on the</font><font color="#CCCCCC"> network so it's a</font>

8
00:00:33,710 --> 00:00:37,820
<font color="#E5E5E5">demonstration of</font><font color="#CCCCCC"> mallet</font><font color="#E5E5E5"> which is</font>

9
00:00:35,450 --> 00:00:40,519
<font color="#E5E5E5">ultimately actually</font><font color="#CCCCCC"> a framework for</font>

10
00:00:37,820 --> 00:00:46,510
creating<font color="#E5E5E5"> your own</font><font color="#CCCCCC"> proxy's hands up how</font>

11
00:00:40,519 --> 00:00:49,399
<font color="#CCCCCC">many</font><font color="#E5E5E5"> of you have used burp or zap or</font>

12
00:00:46,510 --> 00:00:52,269
<font color="#CCCCCC">Achilles anybody</font><font color="#E5E5E5"> going back years and</font>

13
00:00:49,399 --> 00:00:59,210
<font color="#CCCCCC">years</font><font color="#E5E5E5"> are nice thank</font><font color="#CCCCCC"> you and web scarab</font>

14
00:00:52,269 --> 00:01:00,800
<font color="#E5E5E5">one or two all right okay</font><font color="#CCCCCC"> bigotry Who am</font>

15
00:00:59,210 --> 00:01:03,440
<font color="#CCCCCC">I slide</font><font color="#E5E5E5"> I work for a company called</font>

16
00:01:00,800 --> 00:01:05,929
<font color="#CCCCCC">sense</font><font color="#E5E5E5"> post I'm a researcher</font><font color="#CCCCCC"> I've been</font>

17
00:01:03,440 --> 00:01:09,679
with<font color="#CCCCCC"> Saints pose for</font><font color="#E5E5E5"> eight</font><font color="#CCCCCC"> years since</font>

18
00:01:05,930 --> 00:01:11,210
<font color="#CCCCCC">Bose</font><font color="#E5E5E5"> was founded in 2001</font><font color="#CCCCCC"> so we've been</font>

19
00:01:09,680 --> 00:01:14,650
<font color="#E5E5E5">around for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> while I guess everybody</font>

20
00:01:11,210 --> 00:01:14,649
around here probably knows who we are

21
00:01:15,520 --> 00:01:22,130
<font color="#E5E5E5">yeah started in rule of</font><font color="#CCCCCC"> Spade room in</font>

22
00:01:19,360 --> 00:01:23,870
2001 and the 14th of February trust

23
00:01:22,130 --> 00:01:30,259
hackers not to have anything<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> on</font>

24
00:01:23,870 --> 00:01:32,360
Valentine's<font color="#E5E5E5"> Day</font><font color="#CCCCCC"> okay and if</font><font color="#E5E5E5"> you want to</font>

25
00:01:30,260 --> 00:01:36,310
get hold of me that's where you can get

26
00:01:32,360 --> 00:01:41,710
old me<font color="#E5E5E5"> okay so why do we care about</font>

27
00:01:36,310 --> 00:01:45,740
<font color="#E5E5E5">flows across a</font><font color="#CCCCCC"> network</font><font color="#E5E5E5"> the the essential</font>

28
00:01:41,710 --> 00:01:48,589
systems that are interesting communicate

29
00:01:45,740 --> 00:01:53,179
and those communications<font color="#CCCCCC"> happen</font><font color="#E5E5E5"> across a</font>

30
00:01:48,590 --> 00:01:55,820
network<font color="#E5E5E5"> of some description so a lot of</font>

31
00:01:53,180 --> 00:01:58,700
that communication<font color="#E5E5E5"> has been done using</font>

32
00:01:55,820 --> 00:02:00,139
HTTP and HTTPS<font color="#E5E5E5"> because it's as we like</font>

33
00:01:58,700 --> 00:02:05,030
<font color="#CCCCCC">to call it the universal firewall</font>

34
00:02:00,140 --> 00:02:08,449
traversal protocol<font color="#CCCCCC"> but there are a lot</font>

35
00:02:05,030 --> 00:02:12,710
of other protocols as<font color="#CCCCCC"> well that</font><font color="#E5E5E5"> that you</font>

36
00:02:08,449 --> 00:02:14,929
may encounter<font color="#CCCCCC"> so I think what's what's</font>

37
00:02:12,710 --> 00:02:16,880
<font color="#E5E5E5">been happening in the</font><font color="#CCCCCC"> past is that</font><font color="#E5E5E5"> when</font>

38
00:02:14,930 --> 00:02:18,530
people<font color="#E5E5E5"> have run into applications that</font>

39
00:02:16,880 --> 00:02:22,460
are using non HTTP

40
00:02:18,530 --> 00:02:27,110
or HTTP protocols<font color="#E5E5E5"> they run Wireshark and</font>

41
00:02:22,460 --> 00:02:29,690
<font color="#E5E5E5">the go</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> okay maybe it's SSL it's it's</font>

42
00:02:27,110 --> 00:02:31,430
fine<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know I'm gonna call it good I</font>

43
00:02:29,690 --> 00:02:33,710
don't really know what's<font color="#CCCCCC"> going</font><font color="#E5E5E5"> on here</font>

44
00:02:31,430 --> 00:02:37,370
<font color="#E5E5E5">because I</font><font color="#CCCCCC"> don't have tools to actually</font>

45
00:02:33,710 --> 00:02:38,870
<font color="#E5E5E5">do anything</font><font color="#CCCCCC"> with this data so the one</font>

46
00:02:37,370 --> 00:02:41,030
thing about Wireshark is that you can

47
00:02:38,870 --> 00:02:42,830
see what's going across the network<font color="#CCCCCC"> but</font>

48
00:02:41,030 --> 00:02:44,810
you can't tamper with it<font color="#E5E5E5"> and this is why</font>

49
00:02:42,830 --> 00:02:47,180
things<font color="#E5E5E5"> like the intercepting proxies</font>

50
00:02:44,810 --> 00:02:53,239
have been so powerful<font color="#CCCCCC"> for reviewing web</font>

51
00:02:47,180 --> 00:02:56,739
applications but in many<font color="#E5E5E5"> cases if you</font>

52
00:02:53,239 --> 00:02:58,730
can just get<font color="#E5E5E5"> into the stream of the</font>

53
00:02:56,739 --> 00:03:01,220
<font color="#CCCCCC">communications between</font><font color="#E5E5E5"> the clients and</font>

54
00:02:58,730 --> 00:03:03,799
the server you can tamper<font color="#E5E5E5"> with it in</font>

55
00:03:01,220 --> 00:03:07,459
many in many<font color="#E5E5E5"> cases in very similar ways</font>

56
00:03:03,800 --> 00:03:16,640
as<font color="#CCCCCC"> you would with an HTTP or a web</font>

57
00:03:07,459 --> 00:03:18,110
application<font color="#E5E5E5"> okay and the other thing I</font>

58
00:03:16,640 --> 00:03:21,619
just<font color="#E5E5E5"> wanted to mention there is</font><font color="#CCCCCC"> that in</font>

59
00:03:18,110 --> 00:03:24,860
<font color="#E5E5E5">many</font><font color="#CCCCCC"> cases when</font><font color="#E5E5E5"> you start looking at non</font>

60
00:03:21,620 --> 00:03:27,230
HTTP applications<font color="#CCCCCC"> it very often takes</font>

61
00:03:24,860 --> 00:03:31,519
you right back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the 90s where we saw</font>

62
00:03:27,230 --> 00:03:35,750
things<font color="#E5E5E5"> like shopping</font><font color="#CCCCCC"> item prices</font><font color="#E5E5E5"> in</font>

63
00:03:31,519 --> 00:03:36,890
hidden form fields<font color="#CCCCCC"> in shopping carts</font><font color="#E5E5E5"> and</font>

64
00:03:35,750 --> 00:03:39,650
that sort of thing that<font color="#E5E5E5"> you could just</font>

65
00:03:36,890 --> 00:03:43,399
tamper with set the<font color="#E5E5E5"> item to be one cent</font>

66
00:03:39,650 --> 00:03:46,370
<font color="#E5E5E5">and check out because you know nobody's</font>

67
00:03:43,400 --> 00:03:50,329
actually<font color="#E5E5E5"> looked at these</font><font color="#CCCCCC"> protocols</font><font color="#E5E5E5"> in</font>

68
00:03:46,370 --> 00:03:56,299
any detail<font color="#E5E5E5"> simply because tools haven't</font>

69
00:03:50,329 --> 00:03:58,959
really been available<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do that okay</font><font color="#E5E5E5"> so</font>

70
00:03:56,299 --> 00:04:01,880
I just<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> point out some of</font><font color="#CCCCCC"> the</font>

71
00:03:58,959 --> 00:04:04,400
<font color="#CCCCCC">important differences between</font><font color="#E5E5E5"> some of</font>

72
00:04:01,880 --> 00:04:07,100
<font color="#E5E5E5">the things that make HTTP a more easy</font>

73
00:04:04,400 --> 00:04:09,140
protocol to deal<font color="#CCCCCC"> with</font><font color="#E5E5E5"> and then contrast</font>

74
00:04:07,100 --> 00:04:11,829
that to<font color="#E5E5E5"> some of the the complications</font>

75
00:04:09,140 --> 00:04:16,519
that may come<font color="#CCCCCC"> up in in other protocols</font>

76
00:04:11,829 --> 00:04:19,370
so on the one<font color="#E5E5E5"> hand HTTP is a nice</font>

77
00:04:16,519 --> 00:04:21,320
orderly<font color="#E5E5E5"> request response based protocol</font>

78
00:04:19,370 --> 00:04:24,500
<font color="#E5E5E5">you send a request</font><font color="#CCCCCC"> you get a response</font>

79
00:04:21,320 --> 00:04:27,169
<font color="#CCCCCC">and</font><font color="#E5E5E5"> you're done it's stateless which</font>

80
00:04:24,500 --> 00:04:29,090
means that you can establish a TCP

81
00:04:27,169 --> 00:04:31,789
connection<font color="#CCCCCC"> send the request get your</font>

82
00:04:29,090 --> 00:04:32,429
response disconnect<font color="#E5E5E5"> and open a new</font>

83
00:04:31,789 --> 00:04:35,460
<font color="#CCCCCC">connection</font>

84
00:04:32,430 --> 00:04:38,240
and send the next<font color="#E5E5E5"> request</font><font color="#CCCCCC"> so you don't</font>

85
00:04:35,460 --> 00:04:41,820
<font color="#E5E5E5">actually maintain any significant</font><font color="#CCCCCC"> State</font>

86
00:04:38,240 --> 00:04:43,410
on a<font color="#E5E5E5"> particular</font><font color="#CCCCCC"> TCP connection other</font>

87
00:04:41,820 --> 00:04:44,909
<font color="#E5E5E5">than if you're doing into your lane but</font>

88
00:04:43,410 --> 00:04:47,130
that's not really important because you

89
00:04:44,910 --> 00:04:50,400
can just disconnect and reconnect<font color="#E5E5E5"> and</font>

90
00:04:47,130 --> 00:04:52,590
that's that's<font color="#E5E5E5"> real that can</font><font color="#CCCCCC"> be ignored</font>

91
00:04:50,400 --> 00:04:56,820
<font color="#E5E5E5">for the purposes of an intercepting</font>

92
00:04:52,590 --> 00:04:58,890
proxy contrast that to<font color="#E5E5E5"> something a</font>

93
00:04:56,820 --> 00:05:04,260
<font color="#E5E5E5">little bit less</font><font color="#CCCCCC"> orderly</font>

94
00:04:58,890 --> 00:05:06,000
for example<font color="#CCCCCC"> OpenSSH</font><font color="#E5E5E5"> who talks first when</font>

95
00:05:04,260 --> 00:05:12,900
you establish<font color="#E5E5E5"> connection to an</font><font color="#CCCCCC"> SSH</font>

96
00:05:06,000 --> 00:05:14,430
server<font color="#E5E5E5"> does anybody have an idea does</font>

97
00:05:12,900 --> 00:05:16,530
the client<font color="#E5E5E5"> talk first or does the server</font>

98
00:05:14,430 --> 00:05:20,300
talk first<font color="#CCCCCC"> do you get a banner</font><font color="#E5E5E5"> from the</font>

99
00:05:16,530 --> 00:05:24,450
server<font color="#E5E5E5"> or do you send your request in</font>

100
00:05:20,300 --> 00:05:26,340
fact they both talk<font color="#CCCCCC"> simultaneously the</font>

101
00:05:24,450 --> 00:05:28,409
client<font color="#E5E5E5"> doesn't wait for</font><font color="#CCCCCC"> a banner</font><font color="#E5E5E5"> it</font>

102
00:05:26,340 --> 00:05:31,169
starts<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> immediately that it</font>

103
00:05:28,410 --> 00:05:33,300
connects and the server<font color="#CCCCCC"> sends its banner</font>

104
00:05:31,170 --> 00:05:35,970
<font color="#E5E5E5">and waits for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> client to actually</font>

105
00:05:33,300 --> 00:05:37,800
<font color="#E5E5E5">send its own piece of information so</font>

106
00:05:35,970 --> 00:05:40,680
it's a simultaneous connection<font color="#E5E5E5"> or</font>

107
00:05:37,800 --> 00:05:44,010
simultaneous talking kind of protocol

108
00:05:40,680 --> 00:05:46,530
<font color="#CCCCCC">just to illustrate that other protocols</font>

109
00:05:44,010 --> 00:05:48,360
can<font color="#E5E5E5"> be</font><font color="#CCCCCC"> a lot more</font><font color="#E5E5E5"> messy than our nice</font>

110
00:05:46,530 --> 00:05:52,409
orderly HTTP that<font color="#CCCCCC"> we're all familiar</font>

111
00:05:48,360 --> 00:05:54,180
with other<font color="#E5E5E5"> things that we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> worry</font>

112
00:05:52,410 --> 00:05:56,790
<font color="#CCCCCC">about are</font><font color="#E5E5E5"> things like timeouts</font>

113
00:05:54,180 --> 00:06:00,420
how many of you have<font color="#CCCCCC"> intercepted a</font>

114
00:05:56,790 --> 00:06:02,550
request in burp<font color="#E5E5E5"> you know shut down your</font>

115
00:06:00,420 --> 00:06:04,320
laptop gone home for<font color="#E5E5E5"> the weekend</font><font color="#CCCCCC"> come</font>

116
00:06:02,550 --> 00:06:05,970
back on Monday<font color="#E5E5E5"> morning opened up your</font>

117
00:06:04,320 --> 00:06:09,240
<font color="#CCCCCC">blood</font><font color="#E5E5E5"> your laptop gone</font><font color="#CCCCCC"> uh-oh here's this</font>

118
00:06:05,970 --> 00:06:11,400
<font color="#E5E5E5">request that I had intercepted</font><font color="#CCCCCC"> send it</font>

119
00:06:09,240 --> 00:06:15,720
on or forward<font color="#E5E5E5"> the request</font><font color="#CCCCCC"> and you get a</font>

120
00:06:11,400 --> 00:06:18,900
<font color="#E5E5E5">response no issue so burp abstracts</font>

121
00:06:15,720 --> 00:06:22,350
things like timeouts and disconnections

122
00:06:18,900 --> 00:06:26,159
from the network<font color="#CCCCCC"> in a very convenient</font>

123
00:06:22,350 --> 00:06:28,440
<font color="#E5E5E5">way other protocols</font><font color="#CCCCCC"> may not be that</font>

124
00:06:26,160 --> 00:06:30,900
forgiving one thing in particular that

125
00:06:28,440 --> 00:06:33,240
<font color="#E5E5E5">you have to worry about is timeouts so</font>

126
00:06:30,900 --> 00:06:36,450
if you send a<font color="#CCCCCC"> request to</font><font color="#E5E5E5"> an HTTP server</font>

127
00:06:33,240 --> 00:06:38,540
<font color="#CCCCCC">in fact</font><font color="#E5E5E5"> and you start typing really</font>

128
00:06:36,450 --> 00:06:40,860
slowly<font color="#E5E5E5"> or</font><font color="#CCCCCC"> you just</font><font color="#E5E5E5"> open a TCP connection</font>

129
00:06:38,540 --> 00:06:43,500
<font color="#CCCCCC">after a few seconds that connections</font>

130
00:06:40,860 --> 00:06:46,570
<font color="#E5E5E5">going to disconnect</font><font color="#CCCCCC"> again and that's</font>

131
00:06:43,500 --> 00:06:48,669
because the server has<font color="#CCCCCC"> been</font>

132
00:06:46,570 --> 00:06:51,010
<font color="#CCCCCC">footed with some protection</font><font color="#E5E5E5"> against an</font>

133
00:06:48,669 --> 00:06:54,130
attack<font color="#E5E5E5"> called</font><font color="#CCCCCC"> slowloris</font><font color="#E5E5E5"> which is a way</font>

134
00:06:51,010 --> 00:06:57,150
of<font color="#E5E5E5"> denying service to an application you</font>

135
00:06:54,130 --> 00:06:59,440
open up lots of TCP connections and

136
00:06:57,150 --> 00:07:02,020
eventually you can exhaust all<font color="#CCCCCC"> the</font>

137
00:06:59,440 --> 00:07:03,700
resources<font color="#CCCCCC"> of</font><font color="#E5E5E5"> their of the HTTP server</font><font color="#CCCCCC"> so</font>

138
00:07:02,020 --> 00:07:05,859
if you don't send data it will

139
00:07:03,700 --> 00:07:08,469
disconnect<font color="#E5E5E5"> but you don't see any of this</font>

140
00:07:05,860 --> 00:07:11,350
in<font color="#CCCCCC"> burp</font><font color="#E5E5E5"> because you track their</font>

141
00:07:08,470 --> 00:07:14,950
connection and you<font color="#E5E5E5"> can hold</font><font color="#CCCCCC"> that as long</font>

142
00:07:11,350 --> 00:07:17,860
<font color="#CCCCCC">as you like</font><font color="#E5E5E5"> and then send it on and it's</font>

143
00:07:14,950 --> 00:07:20,229
just transparent<font color="#E5E5E5"> and this once again</font><font color="#CCCCCC"> is</font>

144
00:07:17,860 --> 00:07:22,120
because HTTP is nice and orderly<font color="#CCCCCC"> and you</font>

145
00:07:20,229 --> 00:07:25,479
can<font color="#E5E5E5"> disconnect and the requests are</font>

146
00:07:22,120 --> 00:07:27,100
stateless the<font color="#E5E5E5"> timeouts happens on the</font>

147
00:07:25,479 --> 00:07:29,710
server end but burp hasn't actually made

148
00:07:27,100 --> 00:07:32,260
<font color="#CCCCCC">a</font><font color="#E5E5E5"> connection to the server and told you</font>

149
00:07:29,710 --> 00:07:35,409
forward<font color="#E5E5E5"> that</font><font color="#CCCCCC"> request</font><font color="#E5E5E5"> and get the</font>

150
00:07:32,260 --> 00:07:37,330
response<font color="#E5E5E5"> back contrast that to a</font>

151
00:07:35,410 --> 00:07:40,290
stateless protocol where you have to

152
00:07:37,330 --> 00:07:43,900
maintain your<font color="#E5E5E5"> connection to the servers</font>

153
00:07:40,290 --> 00:07:45,280
continuously<font color="#E5E5E5"> and if you don't respond</font>

154
00:07:43,900 --> 00:07:47,530
fast enough the<font color="#CCCCCC"> server's</font><font color="#E5E5E5"> going to</font>

155
00:07:45,280 --> 00:07:49,229
disconnect<font color="#E5E5E5"> you so these things can</font><font color="#CCCCCC"> be a</font>

156
00:07:47,530 --> 00:07:52,960
lot<font color="#CCCCCC"> more difficult to deal with and</font>

157
00:07:49,229 --> 00:07:56,650
particularly in malat<font color="#CCCCCC"> i have no sort of</font>

158
00:07:52,960 --> 00:07:58,900
magic bullet<font color="#CCCCCC"> to address</font><font color="#E5E5E5"> timeouts unless</font>

159
00:07:56,650 --> 00:08:03,280
you can<font color="#E5E5E5"> find things</font><font color="#CCCCCC"> like a sort of a</font>

160
00:07:58,900 --> 00:08:04,929
keepalive message that you can<font color="#CCCCCC"> send but</font>

161
00:08:03,280 --> 00:08:07,299
one thing that<font color="#E5E5E5"> mailer does offer you is</font>

162
00:08:04,930 --> 00:08:09,130
the<font color="#CCCCCC"> ability to script the changes</font><font color="#E5E5E5"> that</font>

163
00:08:07,300 --> 00:08:16,620
you would<font color="#E5E5E5"> like to do so that it's not a</font>

164
00:08:09,130 --> 00:08:19,270
manual<font color="#E5E5E5"> process</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so really</font><font color="#CCCCCC"> just to show</font>

165
00:08:16,620 --> 00:08:21,930
<font color="#CCCCCC">that there is</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of complexity in</font>

166
00:08:19,270 --> 00:08:26,080
dealing with protocols<font color="#E5E5E5"> other than HTTP</font>

167
00:08:21,930 --> 00:08:29,260
have any anyone here had<font color="#CCCCCC"> to deal with a</font>

168
00:08:26,080 --> 00:08:33,039
protocol<font color="#CCCCCC"> work with an application that</font>

169
00:08:29,260 --> 00:08:35,819
was using<font color="#CCCCCC"> a non HTTP protocol can</font><font color="#E5E5E5"> you</font>

170
00:08:33,039 --> 00:08:39,640
give me an<font color="#E5E5E5"> idea</font><font color="#CCCCCC"> what the protocol</font><font color="#E5E5E5"> was</font>

171
00:08:35,820 --> 00:08:41,080
<font color="#E5E5E5">AMQP Queuing protocol</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> you're trying</font>

172
00:08:39,640 --> 00:08:46,300
to review the security<font color="#CCCCCC"> of</font><font color="#E5E5E5"> it so just see</font>

173
00:08:41,080 --> 00:08:49,870
how it worked<font color="#E5E5E5"> ok all right</font>

174
00:08:46,300 --> 00:08:52,630
sure so<font color="#E5E5E5"> I think for a lot of people they</font>

175
00:08:49,870 --> 00:08:54,490
the solution to dealing<font color="#E5E5E5"> with custom</font>

176
00:08:52,630 --> 00:08:57,250
protocols is to write<font color="#CCCCCC"> your own</font><font color="#E5E5E5"> testbed</font>

177
00:08:54,490 --> 00:08:59,120
you'll you know<font color="#CCCCCC"> hack it up</font><font color="#E5E5E5"> in whatever</font>

178
00:08:57,250 --> 00:09:01,790
<font color="#E5E5E5">language you're most comfortable with</font>

179
00:08:59,120 --> 00:09:03,410
it becomes a one soft solution<font color="#E5E5E5"> suited</font>

180
00:09:01,790 --> 00:09:05,480
for that<font color="#E5E5E5"> particular protocol and</font>

181
00:09:03,410 --> 00:09:09,290
probably that<font color="#E5E5E5"> like one particular</font>

182
00:09:05,480 --> 00:09:15,040
environment<font color="#CCCCCC"> and it doesn't become a more</font>

183
00:09:09,290 --> 00:09:15,040
general<font color="#CCCCCC"> solution to</font><font color="#E5E5E5"> the problem come on</font>

184
00:09:15,069 --> 00:09:23,990
forgot<font color="#CCCCCC"> to turn off my</font><font color="#E5E5E5"> screen</font><font color="#CCCCCC"> saver</font><font color="#E5E5E5"> okay</font>

185
00:09:20,600 --> 00:09:26,779
<font color="#E5E5E5">so a lot of solutions</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> it I've seen</font>

186
00:09:23,990 --> 00:09:30,050
<font color="#E5E5E5">have involved people using so cat you</font>

187
00:09:26,779 --> 00:09:31,699
script up something with so<font color="#CCCCCC"> cat running</font>

188
00:09:30,050 --> 00:09:34,459
as a server and you pipe that through a

189
00:09:31,699 --> 00:09:36,199
bit of<font color="#E5E5E5"> you know said or or or core</font>

190
00:09:34,459 --> 00:09:37,910
whatever you're going to<font color="#CCCCCC"> use to make</font>

191
00:09:36,199 --> 00:09:40,189
your manipulations and<font color="#E5E5E5"> then back into so</font>

192
00:09:37,910 --> 00:09:43,699
get to to make<font color="#E5E5E5"> its ongoing</font><font color="#CCCCCC"> connection</font>

193
00:09:40,189 --> 00:09:48,279
and again these<font color="#CCCCCC"> are very point solutions</font>

194
00:09:43,699 --> 00:09:50,809
that are mostly uncomfortable to use and

195
00:09:48,279 --> 00:09:53,509
so what I was trying<font color="#CCCCCC"> to do with mallet</font>

196
00:09:50,809 --> 00:09:56,709
was to provide<font color="#E5E5E5"> the infrastructure that</font>

197
00:09:53,509 --> 00:10:01,249
<font color="#E5E5E5">is</font><font color="#CCCCCC"> required for all intercepting proxies</font>

198
00:09:56,709 --> 00:10:06,939
and allow you<font color="#CCCCCC"> to focus purely on the the</font>

199
00:10:01,249 --> 00:10:09,620
protocol<font color="#E5E5E5"> itself so there is prior work</font><font color="#CCCCCC"> I</font>

200
00:10:06,939 --> 00:10:10,939
wrote<font color="#CCCCCC"> OS proxy this is obviously a</font>

201
00:10:09,620 --> 00:10:13,370
problem<font color="#E5E5E5"> that I've been thinking about</font>

202
00:10:10,939 --> 00:10:17,990
<font color="#CCCCCC">for a</font><font color="#E5E5E5"> long time I was proxy I started in</font>

203
00:10:13,370 --> 00:10:21,019
<font color="#E5E5E5">2007</font><font color="#CCCCCC"> but gave up</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> that fairly quickly</font>

204
00:10:17,990 --> 00:10:24,050
<font color="#CCCCCC">when I realized</font><font color="#E5E5E5"> that I was building</font><font color="#CCCCCC"> a</font>

205
00:10:21,019 --> 00:10:27,769
programming framework which doesn't make

206
00:10:24,050 --> 00:10:29,899
it easy for<font color="#E5E5E5"> a tester to actually just</font>

207
00:10:27,769 --> 00:10:32,120
get on with dealing<font color="#E5E5E5"> with the protocol</font>

208
00:10:29,899 --> 00:10:34,429
<font color="#E5E5E5">itself</font>

209
00:10:32,120 --> 00:10:37,790
Martin<font color="#E5E5E5"> Hollander wrote etiquette proxy</font>

210
00:10:34,429 --> 00:10:41,420
based on<font color="#CCCCCC"> Ross proxy didn't</font><font color="#E5E5E5"> get very much</font>

211
00:10:37,790 --> 00:10:43,248
<font color="#E5E5E5">traction again unfortunately</font><font color="#CCCCCC"> then</font>

212
00:10:41,420 --> 00:10:45,860
there's Mallory Mallory is<font color="#E5E5E5"> probably the</font>

213
00:10:43,249 --> 00:10:48,980
most famous<font color="#E5E5E5"> of the intercepting proxies</font>

214
00:10:45,860 --> 00:10:54,399
<font color="#CCCCCC">it was</font><font color="#E5E5E5"> released in 2010</font><font color="#CCCCCC"> and I think</font><font color="#E5E5E5"> it's</font>

215
00:10:48,980 --> 00:10:56,660
last update was in 2011<font color="#E5E5E5"> from that I'm</font>

216
00:10:54,399 --> 00:10:59,089
assuming<font color="#CCCCCC"> that it</font><font color="#E5E5E5"> wasn't particularly</font>

217
00:10:56,660 --> 00:11:00,769
popular<font color="#E5E5E5"> it didn't get very much</font><font color="#CCCCCC"> take-up</font>

218
00:10:59,089 --> 00:11:03,139
<font color="#E5E5E5">and I think one of the reasons for</font><font color="#CCCCCC"> that</font>

219
00:11:00,769 --> 00:11:06,259
is<font color="#CCCCCC"> the complexity how difficult it</font>

220
00:11:03,139 --> 00:11:09,439
actually<font color="#E5E5E5"> is to get started</font><font color="#CCCCCC"> with it</font><font color="#E5E5E5"> so</font>

221
00:11:06,259 --> 00:11:11,420
<font color="#E5E5E5">Mallory is shipped as a virtual</font><font color="#CCCCCC"> machine</font>

222
00:11:09,439 --> 00:11:12,420
<font color="#E5E5E5">which means that in order to get traffic</font>

223
00:11:11,420 --> 00:11:14,729
into Mallory

224
00:11:12,420 --> 00:11:18,569
<font color="#CCCCCC">you've got to deal</font><font color="#E5E5E5"> with iptables rules</font>

225
00:11:14,730 --> 00:11:22,820
and<font color="#E5E5E5"> routing configurations</font><font color="#CCCCCC"> and you know</font>

226
00:11:18,570 --> 00:11:25,050
it's<font color="#E5E5E5"> just a it's a lot</font><font color="#CCCCCC"> of overhead to</font>

227
00:11:22,820 --> 00:11:29,070
<font color="#E5E5E5">figure out whether you're actually going</font>

228
00:11:25,050 --> 00:11:31,050
to<font color="#E5E5E5"> be able to use a tool</font><font color="#CCCCCC"> or not I think</font>

229
00:11:29,070 --> 00:11:33,900
<font color="#CCCCCC">a lot of people go yeah I'm not</font><font color="#E5E5E5"> even</font>

230
00:11:31,050 --> 00:11:36,359
<font color="#E5E5E5">going to look at that now and there's a</font>

231
00:11:33,900 --> 00:11:41,280
bunch<font color="#E5E5E5"> of others</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> of these ones with</font>

232
00:11:36,360 --> 00:11:42,510
the<font color="#CCCCCC"> slashes in our github repos</font><font color="#E5E5E5"> so</font>

233
00:11:41,280 --> 00:11:43,530
probably<font color="#E5E5E5"> the most</font><font color="#CCCCCC"> famous of the</font>

234
00:11:42,510 --> 00:11:46,230
remaining<font color="#E5E5E5"> ones that I haven't talked</font>

235
00:11:43,530 --> 00:11:50,579
about<font color="#E5E5E5"> yet</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> beta cap so I think better</font>

236
00:11:46,230 --> 00:11:52,290
cap is really<font color="#E5E5E5"> good at very low level</font>

237
00:11:50,580 --> 00:11:54,590
<font color="#E5E5E5">protocol so there are poisoning and</font>

238
00:11:52,290 --> 00:11:57,449
those sorts of<font color="#E5E5E5"> things but in terms</font><font color="#CCCCCC"> of</font>

239
00:11:54,590 --> 00:11:59,700
intercepting arbitrary protocols<font color="#E5E5E5"> the</font>

240
00:11:57,450 --> 00:12:03,450
<font color="#E5E5E5">only support that beta cap actually has</font>

241
00:11:59,700 --> 00:12:05,100
is for HTTP and HTTPS so we kind of

242
00:12:03,450 --> 00:12:07,890
right back where we started we don't

243
00:12:05,100 --> 00:12:15,420
actually have<font color="#E5E5E5"> a solution for non HTTP</font>

244
00:12:07,890 --> 00:12:18,330
protocols<font color="#E5E5E5"> so to address the issues that</font>

245
00:12:15,420 --> 00:12:22,800
<font color="#E5E5E5">I saw I</font><font color="#CCCCCC"> wanted to make Mallett</font><font color="#E5E5E5"> as easy</font>

246
00:12:18,330 --> 00:12:25,250
as possible<font color="#E5E5E5"> to get started with</font><font color="#CCCCCC"> in</font>

247
00:12:22,800 --> 00:12:27,959
contrast to<font color="#E5E5E5"> the the confusion with</font>

248
00:12:25,250 --> 00:12:30,810
<font color="#CCCCCC">routines</font><font color="#E5E5E5"> and routing tables and IP</font>

249
00:12:27,960 --> 00:12:32,910
<font color="#CCCCCC">tables and so on</font><font color="#E5E5E5"> and then the other</font>

250
00:12:30,810 --> 00:12:35,489
thing that<font color="#E5E5E5"> I wanted</font><font color="#CCCCCC"> to do was avoid</font>

251
00:12:32,910 --> 00:12:37,920
reinventing the wheel and doing it badly

252
00:12:35,490 --> 00:12:40,380
<font color="#CCCCCC">and I think that's</font><font color="#E5E5E5"> another reason why</font>

253
00:12:37,920 --> 00:12:42,120
tools like<font color="#E5E5E5"> Malory didn't get any</font>

254
00:12:40,380 --> 00:12:45,300
traction is because they had very

255
00:12:42,120 --> 00:12:48,900
<font color="#E5E5E5">limited</font><font color="#CCCCCC"> protocol support so that if you</font>

256
00:12:45,300 --> 00:12:51,209
wanted to support something<font color="#CCCCCC"> that wasn't</font>

257
00:12:48,900 --> 00:12:54,090
<font color="#E5E5E5">on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> list of</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> that they</font><font color="#CCCCCC"> already</font>

258
00:12:51,210 --> 00:12:57,090
provided to<font color="#E5E5E5"> you you had a fair amount</font><font color="#CCCCCC"> of</font>

259
00:12:54,090 --> 00:13:00,860
<font color="#E5E5E5">work to do and it was using</font><font color="#CCCCCC"> a sort of</font>

260
00:12:57,090 --> 00:13:00,860
<font color="#E5E5E5">custom framework that they had developed</font>

261
00:13:02,750 --> 00:13:09,750
so as I mentioned one of<font color="#E5E5E5"> the problems</font>

262
00:13:05,850 --> 00:13:10,920
that I ran<font color="#E5E5E5"> into when I was writing OS</font>

263
00:13:09,750 --> 00:13:13,080
proxy is that I was<font color="#E5E5E5"> building a</font>

264
00:13:10,920 --> 00:13:15,810
programming framework that would<font color="#E5E5E5"> have</font>

265
00:13:13,080 --> 00:13:17,370
been very special<font color="#E5E5E5"> purpose</font><font color="#CCCCCC"> you know the</font>

266
00:13:15,810 --> 00:13:19,500
only<font color="#E5E5E5"> people who would have known how</font><font color="#CCCCCC"> to</font>

267
00:13:17,370 --> 00:13:21,180
use it would<font color="#E5E5E5"> have been you know</font><font color="#CCCCCC"> I would</font>

268
00:13:19,500 --> 00:13:23,700
have<font color="#E5E5E5"> had to support every single person</font>

269
00:13:21,180 --> 00:13:25,829
who comes<font color="#E5E5E5"> in trying to write their</font><font color="#CCCCCC"> own</font>

270
00:13:23,700 --> 00:13:28,410
<font color="#E5E5E5">protocol decoder</font>

271
00:13:25,830 --> 00:13:30,590
and then I ran into<font color="#E5E5E5"> Nettie and I was</font>

272
00:13:28,410 --> 00:13:33,150
inspired<font color="#E5E5E5"> because the way that it works</font>

273
00:13:30,590 --> 00:13:36,930
<font color="#CCCCCC">lines up very nicely with the way I</font>

274
00:13:33,150 --> 00:13:39,750
wanted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to to make this</font>

275
00:13:36,930 --> 00:13:41,270
available<font color="#E5E5E5"> to users so Nettie for those</font>

276
00:13:39,750 --> 00:13:44,010
of you who are<font color="#E5E5E5"> not familiar with</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is a</font>

277
00:13:41,270 --> 00:13:47,430
<font color="#E5E5E5">Java</font><font color="#CCCCCC"> network application</font><font color="#E5E5E5"> programming</font>

278
00:13:44,010 --> 00:13:49,319
framework designed<font color="#E5E5E5"> for buzzword</font>

279
00:13:47,430 --> 00:13:51,290
compliant<font color="#CCCCCC"> a rapid</font><font color="#E5E5E5"> development of</font>

280
00:13:49,320 --> 00:13:55,910
maintainable high performance protocol

281
00:13:51,290 --> 00:13:59,310
<font color="#CCCCCC">servers and clients so they do have HTTP</font>

282
00:13:55,910 --> 00:14:01,650
<font color="#CCCCCC">but</font><font color="#E5E5E5"> they've got a vast wealth of other</font>

283
00:13:59,310 --> 00:14:04,319
protocols that they also support<font color="#E5E5E5"> and</font>

284
00:14:01,650 --> 00:14:08,459
more importantly they have a large

285
00:14:04,320 --> 00:14:10,200
community<font color="#E5E5E5"> of developers who are creating</font>

286
00:14:08,460 --> 00:14:12,630
their<font color="#CCCCCC"> own protocol implementations</font><font color="#E5E5E5"> and</font>

287
00:14:10,200 --> 00:14:14,910
would be in a position to<font color="#E5E5E5"> assist anybody</font>

288
00:14:12,630 --> 00:14:17,760
who wants to<font color="#CCCCCC"> know how</font><font color="#E5E5E5"> to create their</font>

289
00:14:14,910 --> 00:14:22,829
own<font color="#E5E5E5"> protocol decoders and encoders using</font>

290
00:14:17,760 --> 00:14:26,160
the native framework<font color="#CCCCCC"> and just for for</font>

291
00:14:22,830 --> 00:14:28,770
illustration<font color="#CCCCCC"> the lead developer of natty</font>

292
00:14:26,160 --> 00:14:32,430
works for<font color="#E5E5E5"> Apple</font><font color="#CCCCCC"> my understanding is that</font>

293
00:14:28,770 --> 00:14:35,449
they ship<font color="#CCCCCC"> the natives used to ship in</font>

294
00:14:32,430 --> 00:14:38,310
order<font color="#E5E5E5"> of</font><font color="#CCCCCC"> four petabytes of data a day</font>

295
00:14:35,450 --> 00:14:41,220
<font color="#E5E5E5">using the native framework so it's very</font>

296
00:14:38,310 --> 00:14:43,469
high performance<font color="#CCCCCC"> and</font><font color="#E5E5E5"> they've thought</font>

297
00:14:41,220 --> 00:14:46,230
about<font color="#E5E5E5"> its architecture in a lot of</font>

298
00:14:43,470 --> 00:14:50,340
detail<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that actually makes</font><font color="#E5E5E5"> it really</font>

299
00:14:46,230 --> 00:14:52,800
really<font color="#E5E5E5"> nice for my purposes so this just</font>

300
00:14:50,340 --> 00:14:56,760
<font color="#E5E5E5">illustrates a sort of brief overview of</font>

301
00:14:52,800 --> 00:14:58,740
the native architecture at the<font color="#E5E5E5"> bottom</font>

302
00:14:56,760 --> 00:15:01,080
layer they've got their byte buffer

303
00:14:58,740 --> 00:15:05,790
which is<font color="#E5E5E5"> their abstraction of a byte</font>

304
00:15:01,080 --> 00:15:08,610
array<font color="#E5E5E5"> an extensible event model which</font>

305
00:15:05,790 --> 00:15:10,110
we're<font color="#E5E5E5"> going to be using</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> manage the</font>

306
00:15:08,610 --> 00:15:11,880
connections<font color="#E5E5E5"> and the messages going</font>

307
00:15:10,110 --> 00:15:14,040
backwards and<font color="#E5E5E5"> forwards</font><font color="#CCCCCC"> across</font><font color="#E5E5E5"> the</font>

308
00:15:11,880 --> 00:15:16,140
connections<font color="#E5E5E5"> and then a bunch of</font>

309
00:15:14,040 --> 00:15:21,660
different<font color="#CCCCCC"> protocols that they've got</font>

310
00:15:16,140 --> 00:15:24,620
implemented<font color="#E5E5E5"> okay so a core abstraction</font>

311
00:15:21,660 --> 00:15:27,510
for the native framework is their

312
00:15:24,620 --> 00:15:31,740
channel pipeline and the channel

313
00:15:27,510 --> 00:15:34,380
pipeline is basically a<font color="#CCCCCC"> holder for a</font>

314
00:15:31,740 --> 00:15:36,420
number<font color="#E5E5E5"> of channel handlers and the</font>

315
00:15:34,380 --> 00:15:39,040
channel handlers basically implement

316
00:15:36,420 --> 00:15:40,990
your protocols

317
00:15:39,040 --> 00:15:41,740
so you'll<font color="#E5E5E5"> have data</font><font color="#CCCCCC"> coming in from the</font>

318
00:15:40,990 --> 00:15:44,199
network

319
00:15:41,740 --> 00:15:46,990
<font color="#E5E5E5">that's a socket read level it hits the</font>

320
00:15:44,199 --> 00:15:48,969
first inbound<font color="#E5E5E5"> handler who might process</font>

321
00:15:46,990 --> 00:15:51,089
that data<font color="#E5E5E5"> in some way or update</font><font color="#CCCCCC"> two</font>

322
00:15:48,970 --> 00:15:53,259
<font color="#CCCCCC">states</font><font color="#E5E5E5"> or something along those</font><font color="#CCCCCC"> lines</font>

323
00:15:51,089 --> 00:15:55,120
<font color="#CCCCCC">forward information on to</font><font color="#E5E5E5"> the next</font>

324
00:15:53,259 --> 00:15:58,600
<font color="#CCCCCC">Handler</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so on and so forth</font>

325
00:15:55,120 --> 00:16:00,939
it may also choose<font color="#CCCCCC"> to write data out to</font>

326
00:15:58,600 --> 00:16:04,689
the networkers in response<font color="#E5E5E5"> so for</font>

327
00:16:00,939 --> 00:16:06,790
<font color="#E5E5E5">example this might be an SSL Handler so</font>

328
00:16:04,689 --> 00:16:10,300
it receives encrypted data and does that

329
00:16:06,790 --> 00:16:13,300
sort of handshaking with<font color="#E5E5E5"> the SSL server</font>

330
00:16:10,300 --> 00:16:16,839
and then<font color="#CCCCCC"> it forwards</font><font color="#E5E5E5"> clear text data on</font>

331
00:16:13,300 --> 00:16:18,300
up the channel<font color="#CCCCCC"> and</font><font color="#E5E5E5"> eventually it's going</font>

332
00:16:16,839 --> 00:16:20,379
<font color="#E5E5E5">to get to the top</font><font color="#CCCCCC"> of the channel</font>

333
00:16:18,300 --> 00:16:23,069
<font color="#CCCCCC">generally that would be an application</font>

334
00:16:20,379 --> 00:16:25,990
<font color="#E5E5E5">that is implementing your business logic</font>

335
00:16:23,069 --> 00:16:29,259
and<font color="#CCCCCC"> that's going</font><font color="#E5E5E5"> to then respond back</font>

336
00:16:25,990 --> 00:16:32,559
down the channel<font color="#CCCCCC"> layering on</font><font color="#E5E5E5"> the</font>

337
00:16:29,259 --> 00:16:36,100
different protocol<font color="#E5E5E5"> modifications as it</font>

338
00:16:32,559 --> 00:16:39,459
goes<font color="#E5E5E5"> so how do you turn this</font><font color="#CCCCCC"> into a</font>

339
00:16:36,100 --> 00:16:42,579
<font color="#E5E5E5">proxy very simple for our business logic</font>

340
00:16:39,459 --> 00:16:44,768
<font color="#CCCCCC">all we do is we implement a relay</font><font color="#E5E5E5"> so it</font>

341
00:16:42,579 --> 00:16:46,540
receives bytes coming in or messages

342
00:16:44,769 --> 00:16:49,990
coming<font color="#E5E5E5"> out the top</font><font color="#CCCCCC"> of the pipeline</font><font color="#E5E5E5"> and</font>

343
00:16:46,540 --> 00:16:52,480
copies them into the next<font color="#E5E5E5"> outgoing</font>

344
00:16:49,990 --> 00:16:54,370
pipeline and any<font color="#CCCCCC"> messages</font><font color="#E5E5E5"> coming up in</font>

345
00:16:52,480 --> 00:16:58,990
the other direction<font color="#CCCCCC"> get copied across</font>

346
00:16:54,370 --> 00:17:01,089
very simple but<font color="#E5E5E5"> very effective</font><font color="#CCCCCC"> and of</font>

347
00:16:58,990 --> 00:17:04,120
course<font color="#CCCCCC"> our relay then has the</font>

348
00:17:01,089 --> 00:17:06,010
opportunity<font color="#E5E5E5"> to</font><font color="#CCCCCC"> provide information</font><font color="#E5E5E5"> about</font>

349
00:17:04,119 --> 00:17:09,030
those<font color="#E5E5E5"> messages</font><font color="#CCCCCC"> and about the the data</font>

350
00:17:06,010 --> 00:17:11,349
going through<font color="#E5E5E5"> to a user interface that</font>

351
00:17:09,030 --> 00:17:19,329
that we can then<font color="#CCCCCC"> interact with</font><font color="#E5E5E5"> those</font>

352
00:17:11,349 --> 00:17:22,329
<font color="#E5E5E5">those messages so I've</font><font color="#CCCCCC"> mentioned one of</font>

353
00:17:19,329 --> 00:17:24,158
<font color="#E5E5E5">the problems with most of the the</font>

354
00:17:22,329 --> 00:17:28,359
intercepting proxies being that you have

355
00:17:24,159 --> 00:17:31,260
<font color="#E5E5E5">to deal with IP tables and routing</font>

356
00:17:28,359 --> 00:17:35,439
tables and so<font color="#E5E5E5"> on</font><font color="#CCCCCC"> I wanted to avoid that</font>

357
00:17:31,260 --> 00:17:37,360
using<font color="#E5E5E5"> you know it's something</font><font color="#CCCCCC"> that's a</font>

358
00:17:35,440 --> 00:17:39,850
lot easier<font color="#CCCCCC"> and more familiar for people</font>

359
00:17:37,360 --> 00:17:44,350
<font color="#CCCCCC">to</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> started with and that led me</font><font color="#E5E5E5"> to</font>

360
00:17:39,850 --> 00:17:47,590
<font color="#E5E5E5">the socks proxy</font><font color="#CCCCCC"> Sox protocol so the Sox</font>

361
00:17:44,350 --> 00:17:50,500
protocol is a fairly well supported<font color="#CCCCCC"> way</font>

362
00:17:47,590 --> 00:17:51,399
of<font color="#E5E5E5"> establishing TCP connections through</font>

363
00:17:50,500 --> 00:17:54,760
a<font color="#CCCCCC"> Bastion</font>

364
00:17:51,400 --> 00:17:56,350
<font color="#CCCCCC">host so a an upstream gateway but</font><font color="#E5E5E5"> of</font>

365
00:17:54,760 --> 00:17:58,240
course it<font color="#E5E5E5"> doesn't have to be very far</font>

366
00:17:56,350 --> 00:18:01,449
upstream it can also be<font color="#E5E5E5"> running on our</font>

367
00:17:58,240 --> 00:18:04,750
local<font color="#E5E5E5"> machine</font><font color="#CCCCCC"> and again</font><font color="#E5E5E5"> giving us that</font>

368
00:18:01,450 --> 00:18:11,260
<font color="#CCCCCC">ability to intercept</font><font color="#E5E5E5"> the data and and</font>

369
00:18:04,750 --> 00:18:13,750
interact with<font color="#E5E5E5"> it and so the simplest or</font>

370
00:18:11,260 --> 00:18:17,320
the sort of<font color="#E5E5E5"> this is the an example of</font>

371
00:18:13,750 --> 00:18:22,920
the standard pipeline that<font color="#CCCCCC"> Mallett will</font>

372
00:18:17,320 --> 00:18:25,960
start up with so at the top<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have a</font>

373
00:18:22,920 --> 00:18:26,350
listener<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> this case it's a Java</font><font color="#CCCCCC"> in</font>

374
00:18:25,960 --> 00:18:29,710
<font color="#CCCCCC">IO</font>

375
00:18:26,350 --> 00:18:31,590
server<font color="#E5E5E5"> Soccer Channel</font><font color="#CCCCCC"> and nature</font>

376
00:18:29,710 --> 00:18:35,680
supports a bunch<font color="#E5E5E5"> of different kinds of</font>

377
00:18:31,590 --> 00:18:40,840
transports<font color="#E5E5E5"> for example UDP</font><font color="#CCCCCC"> serial</font>

378
00:18:35,680 --> 00:18:43,990
connections<font color="#CCCCCC"> SCTP</font><font color="#E5E5E5"> and so on once the data</font>

379
00:18:40,840 --> 00:18:46,300
comes<font color="#E5E5E5"> in it will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> passed over to a Sox</font>

380
00:18:43,990 --> 00:18:48,760
initializer<font color="#CCCCCC"> and that's really just a</font>

381
00:18:46,300 --> 00:18:51,790
sort of a wrapper<font color="#E5E5E5"> for a few different</font>

382
00:18:48,760 --> 00:18:56,050
protocol handlers that<font color="#E5E5E5"> negotiates the</font>

383
00:18:51,790 --> 00:18:59,020
<font color="#E5E5E5">Sox protocol with the</font><font color="#CCCCCC"> caller and really</font>

384
00:18:56,050 --> 00:19:01,419
what<font color="#E5E5E5"> that's doing is its allowing</font><font color="#CCCCCC"> that</font>

385
00:18:59,020 --> 00:19:04,990
caller to say I would<font color="#E5E5E5"> like to connect to</font>

386
00:19:01,420 --> 00:19:07,030
<font color="#E5E5E5">this IP address on this port and</font><font color="#CCCCCC"> from</font>

387
00:19:04,990 --> 00:19:09,100
there we can<font color="#CCCCCC"> then pass</font><font color="#E5E5E5"> that on through</font>

388
00:19:07,030 --> 00:19:11,440
the pipeline<font color="#E5E5E5"> and make that outbound</font>

389
00:19:09,100 --> 00:19:13,629
connection to that to that<font color="#E5E5E5"> destination</font>

390
00:19:11,440 --> 00:19:15,400
<font color="#CCCCCC">and then once that's</font><font color="#E5E5E5"> done the</font><font color="#CCCCCC"> sox</font>

391
00:19:13,630 --> 00:19:21,010
initializer essentially just gets out<font color="#CCCCCC"> of</font>

392
00:19:15,400 --> 00:19:23,230
the way<font color="#CCCCCC"> the intercept handler is a like</font>

393
00:19:21,010 --> 00:19:24,970
<font color="#E5E5E5">it sounds it's a way</font><font color="#CCCCCC"> of intercepting</font><font color="#E5E5E5"> the</font>

394
00:19:23,230 --> 00:19:27,160
messages that are<font color="#CCCCCC"> going</font><font color="#E5E5E5"> through the</font>

395
00:19:24,970 --> 00:19:29,980
pipeline<font color="#E5E5E5"> and it presents those in the</font>

396
00:19:27,160 --> 00:19:31,750
user<font color="#E5E5E5"> interface the relay just does the</font>

397
00:19:29,980 --> 00:19:35,680
<font color="#E5E5E5">copying</font><font color="#CCCCCC"> across from one pipeline</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

398
00:19:31,750 --> 00:19:38,230
to another<font color="#CCCCCC"> and you can see the different</font>

399
00:19:35,680 --> 00:19:40,540
colors here the blue color indicates the

400
00:19:38,230 --> 00:19:43,000
server side of<font color="#E5E5E5"> the connection</font><font color="#CCCCCC"> and the</font>

401
00:19:40,540 --> 00:19:44,649
red color<font color="#CCCCCC"> indicates the the</font><font color="#E5E5E5"> client side</font>

402
00:19:43,000 --> 00:19:48,820
of<font color="#CCCCCC"> the connection</font><font color="#E5E5E5"> that's the outbound or</font>

403
00:19:44,650 --> 00:19:51,520
<font color="#CCCCCC">outgoing direction so you may</font><font color="#E5E5E5"> wonder why</font>

404
00:19:48,820 --> 00:19:56,139
they are<font color="#E5E5E5"> to intercept handlers the</font>

405
00:19:51,520 --> 00:19:59,170
reason is sometimes<font color="#CCCCCC"> for debugging</font>

406
00:19:56,140 --> 00:20:00,970
purposes<font color="#CCCCCC"> it's handy to see that the</font>

407
00:19:59,170 --> 00:20:02,860
messages that<font color="#CCCCCC"> you're writing</font><font color="#E5E5E5"> or that</font>

408
00:20:00,970 --> 00:20:04,710
you're receiving<font color="#E5E5E5"> are actually being</font>

409
00:20:02,860 --> 00:20:06,330
written out<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the server</font>

410
00:20:04,710 --> 00:20:08,399
and that the messages<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the server is</font>

411
00:20:06,330 --> 00:20:11,009
<font color="#CCCCCC">sending are actually being written back</font>

412
00:20:08,399 --> 00:20:14,699
<font color="#E5E5E5">out to the client</font><font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> handy to see</font>

413
00:20:11,009 --> 00:20:16,320
both<font color="#CCCCCC"> sides of the connections</font><font color="#E5E5E5"> so in a</font>

414
00:20:14,700 --> 00:20:23,639
way it<font color="#E5E5E5"> gives you the sort of</font><font color="#CCCCCC"> debugging</font>

415
00:20:16,320 --> 00:20:27,840
view of it which is quite<font color="#E5E5E5"> useful</font><font color="#CCCCCC"> so this</font>

416
00:20:23,639 --> 00:20:30,899
is the sort of simplified version<font color="#CCCCCC"> of a</font>

417
00:20:27,840 --> 00:20:33,600
native<font color="#CCCCCC"> channel handler</font><font color="#E5E5E5"> showing really</font>

418
00:20:30,899 --> 00:20:35,969
<font color="#E5E5E5">the methods that</font><font color="#CCCCCC"> you may want to</font>

419
00:20:33,600 --> 00:20:38,730
implement<font color="#CCCCCC"> in your own protocol handlers</font>

420
00:20:35,970 --> 00:20:42,659
<font color="#CCCCCC">or just in a sort of scripting fashion</font>

421
00:20:38,730 --> 00:20:44,999
if<font color="#CCCCCC"> you were looking to do that</font><font color="#E5E5E5"> so</font>

422
00:20:42,659 --> 00:20:46,950
channel<font color="#E5E5E5"> active you might override if you</font>

423
00:20:44,999 --> 00:20:50,850
wanted to set<font color="#CCCCCC"> up some initial action</font><font color="#E5E5E5"> on</font>

424
00:20:46,950 --> 00:20:53,490
a on your protocol handler being added

425
00:20:50,850 --> 00:20:55,439
to the<font color="#CCCCCC"> pipeline channel</font><font color="#E5E5E5"> Reed gets</font>

426
00:20:53,490 --> 00:20:58,710
invoked whenever<font color="#E5E5E5"> a message</font><font color="#CCCCCC"> comes in from</font>

427
00:20:55,440 --> 00:21:00,080
the<font color="#E5E5E5"> network and you've got the message</font>

428
00:20:58,710 --> 00:21:01,499
object<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> can interact with</font>

429
00:21:00,080 --> 00:21:04,918
<font color="#E5E5E5">channel right</font>

430
00:21:01,499 --> 00:21:06,779
similarly<font color="#E5E5E5"> you is called when a handler</font>

431
00:21:04,919 --> 00:21:08,340
is writing a message<font color="#CCCCCC"> back down that</font>

432
00:21:06,779 --> 00:21:10,440
pipeline<font color="#E5E5E5"> and again you've got</font><font color="#CCCCCC"> that</font>

433
00:21:08,340 --> 00:21:13,499
<font color="#E5E5E5">message object</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> can interact</font>

434
00:21:10,440 --> 00:21:15,899
<font color="#E5E5E5">with and then user event triggered can</font>

435
00:21:13,499 --> 00:21:18,470
sometimes be useful<font color="#E5E5E5"> for putting logging</font>

436
00:21:15,899 --> 00:21:21,768
messages<font color="#E5E5E5"> just into</font><font color="#CCCCCC"> that connection data</font>

437
00:21:18,470 --> 00:21:27,869
or just<font color="#CCCCCC"> letting you know</font><font color="#E5E5E5"> what's happened</font>

438
00:21:21,769 --> 00:21:29,970
<font color="#E5E5E5">so here is a very simple</font><font color="#CCCCCC"> Handler</font><font color="#E5E5E5"> or</font>

439
00:21:27,869 --> 00:21:31,799
scripting handler well it's a it's<font color="#CCCCCC"> a</font>

440
00:21:29,970 --> 00:21:34,440
handler it can be<font color="#CCCCCC"> implemented as a</font>

441
00:21:31,799 --> 00:21:36,749
script in this case it is<font color="#CCCCCC"> because it's</font>

442
00:21:34,440 --> 00:21:38,340
<font color="#E5E5E5">got the sort</font><font color="#CCCCCC"> of return</font><font color="#E5E5E5"> new channel</font>

443
00:21:36,749 --> 00:21:40,710
duplex<font color="#E5E5E5"> handler at the top which is just</font>

444
00:21:38,340 --> 00:21:43,350
sort of scripting mechanism<font color="#E5E5E5"> but what</font>

445
00:21:40,710 --> 00:21:47,039
it's doing<font color="#CCCCCC"> is it's looking</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> inbound</font>

446
00:21:43,350 --> 00:21:50,129
messages<font color="#E5E5E5"> checking to see if it's a text</font>

447
00:21:47,039 --> 00:21:52,169
WebSocket frame extracting the text of

448
00:21:50,129 --> 00:21:54,869
that<font color="#E5E5E5"> turning it into an uppercase</font>

449
00:21:52,169 --> 00:21:57,629
version<font color="#CCCCCC"> and putting a</font><font color="#E5E5E5"> new text WebSocket</font>

450
00:21:54,869 --> 00:22:01,199
<font color="#E5E5E5">a frame with the</font><font color="#CCCCCC"> uppercase</font><font color="#E5E5E5"> text back</font>

451
00:21:57,629 --> 00:22:04,469
into the pipeline<font color="#CCCCCC"> so not particularly</font>

452
00:22:01,200 --> 00:22:08,129
useful but it demonstrates<font color="#CCCCCC"> that</font><font color="#E5E5E5"> in a few</font>

453
00:22:04,470 --> 00:22:12,119
lines of code<font color="#CCCCCC"> you can make fairly your</font>

454
00:22:08,129 --> 00:22:13,619
advanced changes to two messages<font color="#CCCCCC"> that</font>

455
00:22:12,119 --> 00:22:15,389
are passing<font color="#CCCCCC"> through</font><font color="#E5E5E5"> the pipeline and you</font>

456
00:22:13,619 --> 00:22:19,730
<font color="#E5E5E5">can discriminate based on the type</font><font color="#CCCCCC"> of</font>

457
00:22:15,389 --> 00:22:19,729
<font color="#E5E5E5">message that</font><font color="#CCCCCC"> it is however</font><font color="#E5E5E5"> it's been</font>

458
00:22:20,610 --> 00:22:27,090
so I<font color="#CCCCCC"> think that's enough talking what</font>

459
00:22:23,830 --> 00:22:29,560
I'd like to<font color="#E5E5E5"> do is show a</font><font color="#CCCCCC"> demonstration</font>

460
00:22:27,090 --> 00:22:35,500
<font color="#CCCCCC">and</font><font color="#E5E5E5"> I didn't bring any children with me</font>

461
00:22:29,560 --> 00:22:36,879
so I can't sacrifice<font color="#E5E5E5"> them and fly</font><font color="#CCCCCC"> CFA</font>

462
00:22:35,500 --> 00:22:44,190
wouldn't let me<font color="#E5E5E5"> bring any chickens on</font>

463
00:22:36,880 --> 00:22:44,190
<font color="#E5E5E5">the wing</font><font color="#CCCCCC"> okay let's see</font>

464
00:22:56,100 --> 00:23:02,139
<font color="#CCCCCC">that is a very</font><font color="#E5E5E5"> strange thing</font><font color="#CCCCCC"> that VMware</font>

465
00:22:58,720 --> 00:23:13,710
does it doesn't lock your screen<font color="#E5E5E5"> if your</font>

466
00:23:02,140 --> 00:23:13,710
masters inside your VMware<font color="#E5E5E5"> very odd okay</font>

467
00:23:20,200 --> 00:23:23,499
if<font color="#E5E5E5"> I can set this up as</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> single monitor</font>

468
00:23:22,539 --> 00:23:27,059
<font color="#E5E5E5">because otherwise I'm going to be</font>

469
00:23:23,499 --> 00:23:27,059
breaking<font color="#E5E5E5"> my neck to see what's going on</font>

470
00:23:32,549 --> 00:23:35,299
<font color="#CCCCCC">aha</font>

471
00:23:40,020 --> 00:23:47,940
okay so mallet is packaged as a maven

472
00:23:45,180 --> 00:23:52,160
project<font color="#E5E5E5"> so if you clone the repo</font><font color="#CCCCCC"> simple</font>

473
00:23:47,940 --> 00:23:56,810
enough<font color="#CCCCCC"> just to run our maven oops</font>

474
00:23:52,160 --> 00:23:59,340
maven clean package and it'll<font color="#E5E5E5"> build it</font>

475
00:23:56,810 --> 00:24:03,659
<font color="#E5E5E5">relatively quickly after downloading a</font>

476
00:23:59,340 --> 00:24:10,590
few files you can then just run it as a

477
00:24:03,660 --> 00:24:14,250
jar and it will show you something<font color="#CCCCCC"> that</font>

478
00:24:10,590 --> 00:24:16,649
<font color="#CCCCCC">looks</font><font color="#E5E5E5"> like this so in the big white area</font>

479
00:24:14,250 --> 00:24:19,080
you've got<font color="#CCCCCC"> your standard</font><font color="#E5E5E5"> pipeline which</font>

480
00:24:16,650 --> 00:24:21,960
<font color="#CCCCCC">is that</font><font color="#E5E5E5"> Sox initializer and it will just</font>

481
00:24:19,080 --> 00:24:23,760
forward by<font color="#E5E5E5"> its across and you can start</font>

482
00:24:21,960 --> 00:24:26,760
seeing what their traffic<font color="#E5E5E5"> looks like and</font>

483
00:24:23,760 --> 00:24:29,340
this<font color="#CCCCCC"> is very analogous to looking at it</font>

484
00:24:26,760 --> 00:24:31,860
<font color="#E5E5E5">with Wireshark you can see the bytes</font>

485
00:24:29,340 --> 00:24:33,480
going across<font color="#CCCCCC"> but in this case now you</font>

486
00:24:31,860 --> 00:24:37,679
can actually start tampering with them

487
00:24:33,480 --> 00:24:40,050
as well<font color="#CCCCCC"> should you</font><font color="#E5E5E5"> choose to and as I</font>

488
00:24:37,680 --> 00:24:43,620
<font color="#E5E5E5">mentioned in order to get traffic to go</font>

489
00:24:40,050 --> 00:24:48,090
through<font color="#CCCCCC"> mallet you would need to sock</font>

490
00:24:43,620 --> 00:24:49,949
<font color="#CCCCCC">safai it</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> Sox</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the Sox</font>

491
00:24:48,090 --> 00:24:53,730
implementation is relatively simple<font color="#CCCCCC"> to</font>

492
00:24:49,950 --> 00:24:56,330
do<font color="#CCCCCC"> a lot of programs already have</font>

493
00:24:53,730 --> 00:24:59,130
<font color="#E5E5E5">built-in support for using a socks proxy</font>

494
00:24:56,330 --> 00:25:02,310
<font color="#CCCCCC">but</font><font color="#E5E5E5"> if they don't you can also use a</font>

495
00:24:59,130 --> 00:25:07,290
wrapper program like<font color="#E5E5E5"> Sox</font><font color="#CCCCCC"> afire proxy cap</font>

496
00:25:02,310 --> 00:25:12,000
<font color="#E5E5E5">T Sox</font><font color="#CCCCCC"> there are a bunch</font><font color="#E5E5E5"> of apps on</font>

497
00:25:07,290 --> 00:25:15,030
Windows<font color="#CCCCCC"> I think sorry</font><font color="#E5E5E5"> I mentioned proxy</font>

498
00:25:12,000 --> 00:25:16,740
cap is also<font color="#CCCCCC"> available on</font><font color="#E5E5E5"> Windows that</font>

499
00:25:15,030 --> 00:25:18,960
<font color="#E5E5E5">you can use to specify you know which</font>

500
00:25:16,740 --> 00:25:21,270
<font color="#E5E5E5">particular executable you want to</font>

501
00:25:18,960 --> 00:25:23,400
intercept<font color="#E5E5E5"> so that's a nice</font><font color="#CCCCCC"> way of</font>

502
00:25:21,270 --> 00:25:26,550
getting Windows traffic into<font color="#CCCCCC"> mallets as</font>

503
00:25:23,400 --> 00:25:29,670
<font color="#E5E5E5">well even if it doesn't have native Sox</font>

504
00:25:26,550 --> 00:25:32,909
support on the<font color="#CCCCCC"> left</font><font color="#E5E5E5"> hand side in the</font>

505
00:25:29,670 --> 00:25:35,640
green tabs you've got a bunch of sort of

506
00:25:32,910 --> 00:25:38,310
predefined protocol handlers<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are</font>

507
00:25:35,640 --> 00:25:40,320
fairly<font color="#E5E5E5"> common in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> basic</font><font color="#CCCCCC"> section</font>

508
00:25:38,310 --> 00:25:45,780
you've got sort of<font color="#CCCCCC"> mallet specific</font>

509
00:25:40,320 --> 00:25:50,010
things such as listeners<font color="#E5E5E5"> the intercept</font>

510
00:25:45,780 --> 00:25:51,840
handlers and the relays<font color="#CCCCCC"> and they're</font><font color="#E5E5E5"> your</font>

511
00:25:50,010 --> 00:25:52,830
sort<font color="#CCCCCC"> of Sox proxies</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> such like Sox</font>

512
00:25:51,840 --> 00:25:55,550
handlers

513
00:25:52,830 --> 00:25:58,230
on the protocols tab you've got some

514
00:25:55,550 --> 00:26:02,460
sort of<font color="#E5E5E5"> fairly simple things like SSL</font>

515
00:25:58,230 --> 00:26:08,010
servers<font color="#E5E5E5"> and SSL clients HTTP servers</font>

516
00:26:02,460 --> 00:26:10,950
HTTP clients<font color="#CCCCCC"> string decoders</font><font color="#E5E5E5"> JSON</font>

517
00:26:08,010 --> 00:26:12,930
decoders and<font color="#E5E5E5"> so forth</font><font color="#CCCCCC"> and these are just</font>

518
00:26:10,950 --> 00:26:15,240
<font color="#E5E5E5">a</font><font color="#CCCCCC"> variety of</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> protocols that</font>

519
00:26:12,930 --> 00:26:19,050
I've run<font color="#E5E5E5"> into and needed to support</font>

520
00:26:15,240 --> 00:26:22,710
directly<font color="#CCCCCC"> so I've added</font><font color="#E5E5E5"> a shortcut to</font>

521
00:26:19,050 --> 00:26:27,270
them but it's simple<font color="#CCCCCC"> enough to add your</font>

522
00:26:22,710 --> 00:26:30,870
<font color="#E5E5E5">own protocol support using the</font><font color="#CCCCCC"> default</font>

523
00:26:27,270 --> 00:26:37,290
<font color="#CCCCCC">handler if you just</font><font color="#E5E5E5"> drag that let's make</font>

524
00:26:30,870 --> 00:26:40,199
<font color="#CCCCCC">a little</font><font color="#E5E5E5"> bit bigger if you drag a</font>

525
00:26:37,290 --> 00:26:43,530
handler into the user interface<font color="#CCCCCC"> all it's</font>

526
00:26:40,200 --> 00:26:45,690
really<font color="#E5E5E5"> containing is the class name</font><font color="#CCCCCC"> of</font>

527
00:26:43,530 --> 00:26:49,230
<font color="#E5E5E5">the handler</font><font color="#CCCCCC"> so you can</font><font color="#E5E5E5"> change that to</font><font color="#CCCCCC"> a</font>

528
00:26:45,690 --> 00:26:52,110
<font color="#CCCCCC">different class</font><font color="#E5E5E5"> and you can specify any</font>

529
00:26:49,230 --> 00:26:55,560
parameters that are<font color="#E5E5E5"> required for that</font>

530
00:26:52,110 --> 00:26:59,600
<font color="#E5E5E5">particular instance</font><font color="#CCCCCC"> constructor</font>

531
00:26:55,560 --> 00:26:59,600
parameters for<font color="#CCCCCC"> that for that class name</font>

532
00:27:01,160 --> 00:27:09,600
<font color="#CCCCCC">okay so what I'm</font><font color="#E5E5E5"> going to demonstrate is</font>

533
00:27:05,790 --> 00:27:12,330
a simple<font color="#E5E5E5"> client-server application that</font>

534
00:27:09,600 --> 00:27:17,310
is packaged with<font color="#CCCCCC"> mallet just for</font>

535
00:27:12,330 --> 00:27:22,590
experimentation purposes<font color="#E5E5E5"> so it's a JSON</font>

536
00:27:17,310 --> 00:27:26,159
based protocol<font color="#E5E5E5"> that receives your first</font>

537
00:27:22,590 --> 00:27:28,500
name so name and date of birth<font color="#E5E5E5"> sends it</font>

538
00:27:26,160 --> 00:27:32,490
off to<font color="#CCCCCC"> a server and</font><font color="#E5E5E5"> gets a response back</font>

539
00:27:28,500 --> 00:27:35,430
with your age so if you go to<font color="#E5E5E5"> the</font>

540
00:27:32,490 --> 00:27:41,580
connections tab and select<font color="#E5E5E5"> the first</font>

541
00:27:35,430 --> 00:27:43,640
connection<font color="#CCCCCC"> it collects a list of all the</font>

542
00:27:41,580 --> 00:27:45,659
<font color="#E5E5E5">events that</font><font color="#CCCCCC"> have passed through</font>

543
00:27:43,640 --> 00:27:48,270
<font color="#E5E5E5">including</font><font color="#CCCCCC"> things like the connection</font>

544
00:27:45,660 --> 00:27:49,860
<font color="#CCCCCC">establishment and</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> on but the</font>

545
00:27:48,270 --> 00:27:52,040
important ones that<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be</font>

546
00:27:49,860 --> 00:27:55,530
interested<font color="#CCCCCC"> in are probably things like</font>

547
00:27:52,040 --> 00:27:57,930
user event triggered which is this this

548
00:27:55,530 --> 00:27:59,310
is reported by<font color="#CCCCCC"> the sock server so trying</font>

549
00:27:57,930 --> 00:28:01,650
<font color="#CCCCCC">to connect</font><font color="#E5E5E5"> to this particular address</font>

550
00:27:59,310 --> 00:28:04,800
<font color="#E5E5E5">and then things like the channel read</font>

551
00:28:01,650 --> 00:28:06,360
and write events so here we have a

552
00:28:04,800 --> 00:28:07,620
channel read

553
00:28:06,360 --> 00:28:12,449
you probably<font color="#E5E5E5"> can't see it too well but</font>

554
00:28:07,620 --> 00:28:14,879
<font color="#E5E5E5">there is an open curly brace</font><font color="#CCCCCC"> and if you</font>

555
00:28:12,450 --> 00:28:17,670
go<font color="#E5E5E5"> down this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the channel right on the</font>

556
00:28:14,880 --> 00:28:20,690
client side<font color="#E5E5E5"> again showing that open</font>

557
00:28:17,670 --> 00:28:26,130
<font color="#E5E5E5">curly brace going art and then</font><font color="#CCCCCC"> incoming</font>

558
00:28:20,690 --> 00:28:29,100
<font color="#CCCCCC">a line</font><font color="#E5E5E5"> of text birth year 1972</font><font color="#CCCCCC"> art</font><font color="#E5E5E5"> going</font>

559
00:28:26,130 --> 00:28:32,400
<font color="#E5E5E5">the same etcetera</font><font color="#CCCCCC"> etcetera so this is</font>

560
00:28:29,100 --> 00:28:35,219
<font color="#E5E5E5">the list of individual sort of chunks of</font>

561
00:28:32,400 --> 00:28:39,450
message<font color="#E5E5E5"> that we received on the network</font>

562
00:28:35,220 --> 00:28:42,840
<font color="#E5E5E5">now looking at it it looks again</font><font color="#CCCCCC"> like</font>

563
00:28:39,450 --> 00:28:44,940
this<font color="#E5E5E5"> is a JSON message</font><font color="#CCCCCC"> but it's not</font>

564
00:28:42,840 --> 00:28:47,699
particularly<font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> work with because</font>

565
00:28:44,940 --> 00:28:50,700
it's fragmented<font color="#CCCCCC"> in a number of</font><font color="#E5E5E5"> different</font>

566
00:28:47,700 --> 00:28:52,260
<font color="#E5E5E5">pieces</font><font color="#CCCCCC"> so before we can</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> start</font>

567
00:28:50,700 --> 00:28:55,440
<font color="#E5E5E5">working with us what we really want</font><font color="#CCCCCC"> to</font>

568
00:28:52,260 --> 00:28:58,950
<font color="#E5E5E5">try and do is defragment this message</font>

569
00:28:55,440 --> 00:29:02,670
<font color="#E5E5E5">and an easy way to do that</font><font color="#CCCCCC"> given that</font>

570
00:28:58,950 --> 00:29:05,970
<font color="#CCCCCC">this is a</font><font color="#E5E5E5"> JSON object is to match</font>

571
00:29:02,670 --> 00:29:07,500
opening and closing braces<font color="#E5E5E5"> so we can</font>

572
00:29:05,970 --> 00:29:09,090
just count up when we get<font color="#E5E5E5"> an opening</font>

573
00:29:07,500 --> 00:29:10,860
brace and count<font color="#E5E5E5"> down really when we get</font>

574
00:29:09,090 --> 00:29:13,379
a closing<font color="#E5E5E5"> brace and when we get back</font>

575
00:29:10,860 --> 00:29:19,620
<font color="#E5E5E5">down</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> zero we can pass on that</font>

576
00:29:13,380 --> 00:29:21,480
completed<font color="#E5E5E5"> message so let's</font><font color="#CCCCCC"> create a</font>

577
00:29:19,620 --> 00:29:26,520
graph<font color="#CCCCCC"> that does that or let's open a</font>

578
00:29:21,480 --> 00:29:27,990
graph<font color="#CCCCCC"> that does that and these</font><font color="#E5E5E5"> are all</font>

579
00:29:26,520 --> 00:29:30,150
<font color="#E5E5E5">in the examples so if</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to play</font>

580
00:29:27,990 --> 00:29:32,010
around<font color="#E5E5E5"> with this in your</font><font color="#CCCCCC"> own time the</font>

581
00:29:30,150 --> 00:29:39,470
client<font color="#E5E5E5"> and the server is in the mail</font>

582
00:29:32,010 --> 00:29:39,470
<font color="#CCCCCC">it's JA very simple</font><font color="#E5E5E5"> to play with</font>

583
00:29:42,090 --> 00:29:46,350
<font color="#E5E5E5">all right so let's go back to</font><font color="#CCCCCC"> the graph</font>

584
00:29:43,380 --> 00:29:49,500
editor and see what's changed<font color="#CCCCCC"> and really</font>

585
00:29:46,350 --> 00:29:52,199
<font color="#E5E5E5">all I've done is I've added this JSON</font>

586
00:29:49,500 --> 00:29:55,200
object decoder<font color="#CCCCCC"> now this isn't a piece</font><font color="#E5E5E5"> of</font>

587
00:29:52,200 --> 00:29:57,780
code that<font color="#E5E5E5"> I wrote myself this is native</font>

588
00:29:55,200 --> 00:29:59,460
native functionality<font color="#CCCCCC"> I didn't have to</font>

589
00:29:57,780 --> 00:30:04,770
think<font color="#CCCCCC"> about this</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> just went and looked</font>

590
00:29:59,460 --> 00:30:07,620
for<font color="#CCCCCC"> natty JSON protocol support this as</font>

591
00:30:04,770 --> 00:30:10,950
<font color="#CCCCCC">I'll show you is an natty handler that</font>

592
00:30:07,620 --> 00:30:14,489
is<font color="#E5E5E5"> existing</font><font color="#CCCCCC"> so I just dropped it onto</font>

593
00:30:10,950 --> 00:30:16,380
the the line in<font color="#CCCCCC"> between</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Sox</font>

594
00:30:14,490 --> 00:30:21,840
initializer<font color="#CCCCCC"> and my intercept Handler</font>

595
00:30:16,380 --> 00:30:27,120
let's go back to the client<font color="#CCCCCC"> and send</font>

596
00:30:21,840 --> 00:30:31,980
<font color="#E5E5E5">another message so we have a second</font>

597
00:30:27,120 --> 00:30:34,379
<font color="#E5E5E5">connection but instead of having a bunch</font>

598
00:30:31,980 --> 00:30:36,600
<font color="#E5E5E5">of different</font><font color="#CCCCCC"> messages read</font><font color="#E5E5E5"> there are a</font>

599
00:30:34,380 --> 00:30:38,850
bunch<font color="#E5E5E5"> of read events for each of those</font>

600
00:30:36,600 --> 00:30:42,899
things<font color="#E5E5E5"> but at the end of it we have a</font>

601
00:30:38,850 --> 00:30:45,600
<font color="#E5E5E5">single aggregated message showing our</font>

602
00:30:42,900 --> 00:30:48,390
entire JSON object so it's important<font color="#CCCCCC"> to</font>

603
00:30:45,600 --> 00:30:50,760
<font color="#CCCCCC">be able to to aggregate messages</font><font color="#E5E5E5"> into a</font>

604
00:30:48,390 --> 00:30:52,290
single<font color="#CCCCCC"> logical thing because you</font><font color="#E5E5E5"> don't</font>

605
00:30:50,760 --> 00:30:58,110
really<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to be working</font><font color="#E5E5E5"> with just an</font>

606
00:30:52,290 --> 00:31:02,070
open brace okay so this<font color="#E5E5E5"> is all very well</font>

607
00:30:58,110 --> 00:31:04,620
<font color="#E5E5E5">we've now managed to figure out where</font>

608
00:31:02,070 --> 00:31:06,210
our<font color="#E5E5E5"> message starts and ends but you</font>

609
00:31:04,620 --> 00:31:08,520
don't really<font color="#E5E5E5"> want to be fiddling with</font>

610
00:31:06,210 --> 00:31:11,280
bytes<font color="#E5E5E5"> when you're dealing with a</font>

611
00:31:08,520 --> 00:31:15,750
<font color="#E5E5E5">text-based protocol like JSON so let's</font>

612
00:31:11,280 --> 00:31:18,590
go back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> our graph editor</font><font color="#E5E5E5"> and open our</font>

613
00:31:15,750 --> 00:31:18,590
next<font color="#CCCCCC"> example</font>

614
00:31:22,160 --> 00:31:29,660
<font color="#E5E5E5">all right so what we've done here</font><font color="#CCCCCC"> is</font>

615
00:31:24,850 --> 00:31:32,149
<font color="#E5E5E5">added</font><font color="#CCCCCC"> a two new channel handlers</font><font color="#E5E5E5"> a</font>

616
00:31:29,660 --> 00:31:33,980
string decoder and<font color="#E5E5E5"> a string encoder and</font>

617
00:31:32,150 --> 00:31:35,720
what these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> going to do is they're</font>

618
00:31:33,980 --> 00:31:38,600
going<font color="#CCCCCC"> to take</font><font color="#E5E5E5"> bytes in and they're going</font>

619
00:31:35,720 --> 00:31:41,450
to emit a string object<font color="#CCCCCC"> a</font><font color="#E5E5E5"> Java string</font>

620
00:31:38,600 --> 00:31:42,860
object<font color="#CCCCCC"> and in the outbound direction</font>

621
00:31:41,450 --> 00:31:45,830
it's<font color="#E5E5E5"> going to take a string</font><font color="#CCCCCC"> coming in</font>

622
00:31:42,860 --> 00:31:49,850
and or a string going<font color="#E5E5E5"> archerd I say and</font>

623
00:31:45,830 --> 00:31:52,760
emit a sequence of<font color="#E5E5E5"> bytes</font><font color="#CCCCCC"> and we've</font>

624
00:31:49,850 --> 00:31:57,709
<font color="#E5E5E5">parameterize this by telling it to treat</font>

625
00:31:52,760 --> 00:32:01,970
them as utf-8 strings because<font color="#E5E5E5"> once</font><font color="#CCCCCC"> again</font>

626
00:31:57,710 --> 00:32:04,250
this is an<font color="#E5E5E5"> 80 handler</font><font color="#CCCCCC"> there's not my own</font>

627
00:32:01,970 --> 00:32:06,680
code this is built in native

628
00:32:04,250 --> 00:32:12,350
functionality<font color="#E5E5E5"> that supports a variety of</font>

629
00:32:06,680 --> 00:32:22,310
<font color="#E5E5E5">different character sets all right once</font>

630
00:32:12,350 --> 00:32:24,740
more so now we have a new connection<font color="#CCCCCC"> but</font>

631
00:32:22,310 --> 00:32:25,580
<font color="#E5E5E5">we can see that rather than a sequence</font>

632
00:32:24,740 --> 00:32:27,230
of bytes

633
00:32:25,580 --> 00:32:30,350
we've now translated it<font color="#CCCCCC"> into something</font>

634
00:32:27,230 --> 00:32:34,910
<font color="#E5E5E5">that's a bit</font><font color="#CCCCCC"> more useable so we've now</font>

635
00:32:30,350 --> 00:32:39,649
got a text<font color="#CCCCCC"> a string object that we</font><font color="#E5E5E5"> can</font>

636
00:32:34,910 --> 00:32:44,600
edit<font color="#CCCCCC"> and while we could have edited</font><font color="#E5E5E5"> it</font>

637
00:32:39,650 --> 00:32:46,520
as the bytes the the bite the bite

638
00:32:44,600 --> 00:32:48,110
viewer does allow you<font color="#E5E5E5"> to modify those</font>

639
00:32:46,520 --> 00:32:49,820
bytes as well if you intercept<font color="#CCCCCC"> the</font>

640
00:32:48,110 --> 00:32:53,689
messages<font color="#E5E5E5"> as I said it's not</font><font color="#CCCCCC"> that</font>

641
00:32:49,820 --> 00:32:55,700
friendly so at this point<font color="#E5E5E5"> I'm going to</font>

642
00:32:53,690 --> 00:33:00,200
demonstrate<font color="#E5E5E5"> that you can now intercept</font>

643
00:32:55,700 --> 00:33:09,650
these messages and and more and modify

644
00:33:00,200 --> 00:33:13,610
them<font color="#CCCCCC"> alright so</font><font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of an</font><font color="#E5E5E5"> immediate</font>

645
00:33:09,650 --> 00:33:16,790
response we now see<font color="#CCCCCC"> that we have a few</font>

646
00:33:13,610 --> 00:33:19,100
events<font color="#E5E5E5"> which have been caught and held</font>

647
00:33:16,790 --> 00:33:20,990
I'm gonna send the initial connect on

648
00:33:19,100 --> 00:33:23,060
and that starts doing its protocol

649
00:33:20,990 --> 00:33:27,460
handling and here is a<font color="#E5E5E5"> message which has</font>

650
00:33:23,060 --> 00:33:27,460
been sent by the client

651
00:33:27,970 --> 00:33:34,690
<font color="#CCCCCC">fubar bears</font>

652
00:33:30,190 --> 00:33:37,000
and I can now send that<font color="#E5E5E5"> on and I'm going</font>

653
00:33:34,690 --> 00:33:39,910
to turn<font color="#E5E5E5"> off interceptor because it does</font>

654
00:33:37,000 --> 00:33:44,290
generate<font color="#E5E5E5"> lots of different</font><font color="#CCCCCC"> messages but</font>

655
00:33:39,910 --> 00:33:50,050
you can see that the<font color="#CCCCCC"> message that was</font>

656
00:33:44,290 --> 00:33:52,210
sent out was<font color="#E5E5E5"> bears rather than</font><font color="#CCCCCC"> foo and</font>

657
00:33:50,050 --> 00:33:55,450
if I go<font color="#E5E5E5"> to my server instance it</font>

658
00:33:52,210 --> 00:34:06,370
received a lost name of bears instead of

659
00:33:55,450 --> 00:34:08,800
bar<font color="#E5E5E5"> okay sorry</font>

660
00:34:06,370 --> 00:34:10,480
they<font color="#CCCCCC"> whoever's parked on the</font><font color="#E5E5E5"> sports</font>

661
00:34:08,800 --> 00:34:22,810
field<font color="#E5E5E5"> that you need to move</font><font color="#CCCCCC"> your car</font>

662
00:34:10,480 --> 00:34:30,190
sorry<font color="#CCCCCC"> real quick lots of people</font><font color="#E5E5E5"> are</font>

663
00:34:22,810 --> 00:34:33,040
parked there it seems<font color="#CCCCCC"> ok alright</font><font color="#E5E5E5"> so the</font>

664
00:34:30,190 --> 00:34:35,770
<font color="#E5E5E5">the next</font><font color="#CCCCCC"> step using a string is all very</font>

665
00:34:33,040 --> 00:34:39,129
<font color="#E5E5E5">well</font><font color="#CCCCCC"> but maybe you would actually</font><font color="#E5E5E5"> rather</font>

666
00:34:35,770 --> 00:34:42,219
pause this into something<font color="#CCCCCC"> that is a bit</font>

667
00:34:39,129 --> 00:34:47,290
more<font color="#E5E5E5"> useful to</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> with something like</font>

668
00:34:42,219 --> 00:34:50,560
<font color="#CCCCCC">a structured JSON object so in this case</font>

669
00:34:47,290 --> 00:34:55,779
I've created a script handler which is

670
00:34:50,560 --> 00:35:00,610
going<font color="#E5E5E5"> to make use of the</font><font color="#CCCCCC"> jackson</font><font color="#E5E5E5"> library</font>

671
00:34:55,780 --> 00:35:04,150
<font color="#CCCCCC">jackson java</font><font color="#E5E5E5"> json api and basically what</font>

672
00:35:00,610 --> 00:35:07,200
I'm<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> is I'm</font><font color="#CCCCCC"> making</font><font color="#E5E5E5"> use of I'm</font>

673
00:35:04,150 --> 00:35:09,880
<font color="#E5E5E5">extending existing native functionality</font>

674
00:35:07,200 --> 00:35:13,450
<font color="#CCCCCC">and implementing an encode and decode</font>

675
00:35:09,880 --> 00:35:17,830
method my decode method is going<font color="#CCCCCC"> to take</font>

676
00:35:13,450 --> 00:35:23,560
in a byte buff and emit JSON node

677
00:35:17,830 --> 00:35:26,710
objects<font color="#CCCCCC"> and yep that's just a couple</font><font color="#E5E5E5"> of</font>

678
00:35:23,560 --> 00:35:28,870
lines<font color="#E5E5E5"> to do that and then similarly in</font>

679
00:35:26,710 --> 00:35:33,840
<font color="#E5E5E5">the end code I'm going</font><font color="#CCCCCC"> to take in</font>

680
00:35:28,870 --> 00:35:33,839
adjacent<font color="#CCCCCC"> node and emit it as bytes again</font>

681
00:35:40,319 --> 00:35:50,680
sending the message to<font color="#CCCCCC"> the server and</font>

682
00:35:46,710 --> 00:35:53,950
<font color="#E5E5E5">now you can see that instead of a string</font>

683
00:35:50,680 --> 00:35:55,960
we've now got a structured object<font color="#CCCCCC"> and</font>

684
00:35:53,950 --> 00:35:58,569
this<font color="#CCCCCC"> introduces another</font><font color="#E5E5E5"> feature of</font>

685
00:35:55,960 --> 00:36:01,510
<font color="#E5E5E5">mallet which is the</font><font color="#CCCCCC"> ability to</font><font color="#E5E5E5"> edit</font>

686
00:35:58,569 --> 00:36:03,640
arbitrary<font color="#CCCCCC"> Java objects</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> reflection</font>

687
00:36:01,510 --> 00:36:05,470
<font color="#E5E5E5">so a reflection just allows you to</font>

688
00:36:03,640 --> 00:36:08,440
interrogate<font color="#CCCCCC"> the properties of</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> object</font>

689
00:36:05,470 --> 00:36:11,859
and to view its fields<font color="#CCCCCC"> and to drill down</font>

690
00:36:08,440 --> 00:36:13,869
<font color="#E5E5E5">into</font><font color="#CCCCCC"> those so you don't have to create</font><font color="#E5E5E5"> a</font>

691
00:36:11,859 --> 00:36:16,598
special editor for every<font color="#E5E5E5"> kind of data</font>

692
00:36:13,869 --> 00:36:22,480
<font color="#E5E5E5">type although it can make your life a</font>

693
00:36:16,599 --> 00:36:24,369
little<font color="#E5E5E5"> bit easier</font><font color="#CCCCCC"> in some</font><font color="#E5E5E5"> cases</font><font color="#CCCCCC"> ok so</font>

694
00:36:22,480 --> 00:36:28,530
that's not intercepted so<font color="#E5E5E5"> I can tamper</font>

695
00:36:24,369 --> 00:36:28,530
with it<font color="#E5E5E5"> but let's run that again</font>

696
00:36:50,860 --> 00:37:04,130
so for<font color="#E5E5E5"> example if I change that</font><font color="#CCCCCC"> to 1962</font>

697
00:36:53,930 --> 00:37:09,410
<font color="#CCCCCC">I can send that on and it thinks I'm not</font>

698
00:37:04,130 --> 00:37:11,090
56 years old<font color="#E5E5E5"> okay so this is now</font><font color="#CCCCCC"> showing</font>

699
00:37:09,410 --> 00:37:13,700
that<font color="#E5E5E5"> you can interact with all sorts of</font>

700
00:37:11,090 --> 00:37:16,670
different<font color="#E5E5E5"> kinds</font><font color="#CCCCCC"> of objects mallet</font>

701
00:37:13,700 --> 00:37:18,980
doesn't actually care<font color="#CCCCCC"> what type of</font>

702
00:37:16,670 --> 00:37:21,680
<font color="#CCCCCC">objects</font><font color="#E5E5E5"> you passing across so long as it</font>

703
00:37:18,980 --> 00:37:23,840
knows in some way or you tell it how<font color="#E5E5E5"> to</font>

704
00:37:21,680 --> 00:37:26,950
convert<font color="#CCCCCC"> that object back to a stream of</font>

705
00:37:23,840 --> 00:37:29,210
bytes<font color="#CCCCCC"> and really this</font><font color="#E5E5E5"> is what</font>

706
00:37:26,950 --> 00:37:32,359
understanding a protocol comes down to

707
00:37:29,210 --> 00:37:35,000
you understand how<font color="#E5E5E5"> to make sense of a</font>

708
00:37:32,360 --> 00:37:38,270
sequence<font color="#E5E5E5"> of bytes turn it into something</font>

709
00:37:35,000 --> 00:37:42,640
usable<font color="#E5E5E5"> and then turn that back into a</font>

710
00:37:38,270 --> 00:37:42,640
<font color="#E5E5E5">sequence of bytes in</font><font color="#CCCCCC"> some way or other I</font>

711
00:37:43,119 --> 00:37:52,490
added them<font color="#E5E5E5"> it's been since I've</font><font color="#CCCCCC"> had my</font>

712
00:37:47,420 --> 00:37:54,560
<font color="#E5E5E5">twins okay</font><font color="#CCCCCC"> so the one thing</font><font color="#E5E5E5"> I like</font><font color="#CCCCCC"> to</font>

713
00:37:52,490 --> 00:37:58,549
<font color="#CCCCCC">point out now though is that there's</font>

714
00:37:54,560 --> 00:38:00,920
this checksum invalid message that

715
00:37:58,550 --> 00:38:02,869
<font color="#E5E5E5">that's coming up when I temper with a</font>

716
00:38:00,920 --> 00:38:07,210
message and<font color="#E5E5E5"> if</font><font color="#CCCCCC"> you look at the message</font>

717
00:38:02,869 --> 00:38:08,380
itself<font color="#E5E5E5"> there is the checksum field</font><font color="#CCCCCC"> and</font>

718
00:38:07,210 --> 00:38:10,730
[Applause]

719
00:38:08,380 --> 00:38:14,450
after doing a bit of<font color="#E5E5E5"> reverse</font><font color="#CCCCCC"> engineering</font>

720
00:38:10,730 --> 00:38:19,250
<font color="#CCCCCC">it looks like this is an md5</font><font color="#E5E5E5"> sum of the</font>

721
00:38:14,450 --> 00:38:21,399
first name surname<font color="#E5E5E5"> and yeah so that's</font>

722
00:38:19,250 --> 00:38:26,690
protocol understanding 101 eventually

723
00:38:21,400 --> 00:38:28,910
<font color="#E5E5E5">okay so in order to allow us</font><font color="#CCCCCC"> to make</font>

724
00:38:26,690 --> 00:38:31,460
modifications<font color="#E5E5E5"> and send them on</font><font color="#CCCCCC"> to the</font>

725
00:38:28,910 --> 00:38:33,618
server<font color="#CCCCCC"> without the server</font><font color="#E5E5E5"> realizing that</font>

726
00:38:31,460 --> 00:38:34,850
this message<font color="#CCCCCC"> is</font><font color="#E5E5E5"> now inconsistent we're</font>

727
00:38:33,619 --> 00:38:38,720
going to have to make sure<font color="#CCCCCC"> to update</font>

728
00:38:34,850 --> 00:38:40,910
<font color="#E5E5E5">this checksum field and it may be that</font>

729
00:38:38,720 --> 00:38:42,379
<font color="#E5E5E5">you're making some</font><font color="#CCCCCC"> changes to a</font>

730
00:38:40,910 --> 00:38:44,690
different type of object that doesn't

731
00:38:42,380 --> 00:38:46,130
<font color="#E5E5E5">have a checksum but it has other fields</font>

732
00:38:44,690 --> 00:38:48,020
<font color="#E5E5E5">that refer to the thing that you've</font>

733
00:38:46,130 --> 00:38:52,700
<font color="#E5E5E5">changed and they need to remain</font>

734
00:38:48,020 --> 00:38:57,220
consistent in some way so let's go<font color="#CCCCCC"> back</font>

735
00:38:52,700 --> 00:38:57,220
<font color="#CCCCCC">to our last graph</font>

736
00:39:01,290 --> 00:39:15,580
and I've added<font color="#CCCCCC"> another script</font><font color="#E5E5E5"> handler on</font>

737
00:39:08,530 --> 00:39:20,650
the outbound pipeline that will

738
00:39:15,580 --> 00:39:22,270
recalculate the checksum<font color="#E5E5E5"> for me so</font>

739
00:39:20,650 --> 00:39:25,090
instead of me having<font color="#CCCCCC"> to</font><font color="#E5E5E5"> go to my shell</font>

740
00:39:22,270 --> 00:39:28,509
and pass these things<font color="#E5E5E5"> through md5sum</font>

741
00:39:25,090 --> 00:39:31,500
<font color="#CCCCCC">I have a script which will do this</font><font color="#E5E5E5"> for</font>

742
00:39:28,510 --> 00:39:37,060
<font color="#E5E5E5">me automatically on every single message</font>

743
00:39:31,500 --> 00:39:39,790
so on a<font color="#CCCCCC"> write event if it is a</font><font color="#E5E5E5"> JSON</font>

744
00:39:37,060 --> 00:39:43,060
object<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> get the name surname and</font>

745
00:39:39,790 --> 00:39:46,240
<font color="#CCCCCC">here calculate the</font><font color="#E5E5E5"> md5 sum of that and</font>

746
00:39:43,060 --> 00:39:54,190
then it will update the node to put that

747
00:39:46,240 --> 00:40:00,149
md5 sum in the right place<font color="#CCCCCC"> so one last</font>

748
00:39:54,190 --> 00:40:00,150
time<font color="#CCCCCC"> I need to</font><font color="#E5E5E5"> intercept this</font>

749
00:40:37,430 --> 00:40:44,730
and it<font color="#E5E5E5"> returns an answer but more</font>

750
00:40:41,460 --> 00:40:46,080
importantly the server<font color="#E5E5E5"> doesn't care</font><font color="#CCCCCC"> but</font>

751
00:40:44,730 --> 00:40:50,130
can't tell<font color="#CCCCCC"> that I've been tampering with</font>

752
00:40:46,080 --> 00:40:52,590
<font color="#CCCCCC">it okay</font><font color="#E5E5E5"> so I hope you can see the</font>

753
00:40:50,130 --> 00:40:54,030
<font color="#E5E5E5">progression</font><font color="#CCCCCC"> from starting to understand</font>

754
00:40:52,590 --> 00:40:56,460
what the protocol<font color="#E5E5E5"> looks like what the</font>

755
00:40:54,030 --> 00:40:59,940
data that you're seeing<font color="#E5E5E5"> goes through</font>

756
00:40:56,460 --> 00:41:01,400
just<font color="#CCCCCC"> by its underline then we start</font>

757
00:40:59,940 --> 00:41:04,520
<font color="#E5E5E5">saying okay well it's</font><font color="#CCCCCC"> JSON so we</font>

758
00:41:01,400 --> 00:41:07,020
aggregate that into into a JSON<font color="#CCCCCC"> object</font>

759
00:41:04,520 --> 00:41:09,630
<font color="#CCCCCC">make it</font><font color="#E5E5E5"> something a bit more useful to</font>

760
00:41:07,020 --> 00:41:12,330
deal with<font color="#CCCCCC"> and now starting to automate</font>

761
00:41:09,630 --> 00:41:15,960
<font color="#E5E5E5">some of the changes that we might want</font>

762
00:41:12,330 --> 00:41:21,750
<font color="#CCCCCC">to</font><font color="#E5E5E5"> make to those objects and and how</font>

763
00:41:15,960 --> 00:41:24,150
<font color="#E5E5E5">relatively easy this is to do okay I've</font>

764
00:41:21,750 --> 00:41:28,910
got a few other demonstrations that<font color="#E5E5E5"> I'd</font>

765
00:41:24,150 --> 00:41:32,030
like<font color="#E5E5E5"> to show you to illustrate that</font>

766
00:41:28,910 --> 00:41:40,350
<font color="#CCCCCC">Mallett</font><font color="#E5E5E5"> can actually do some fairly</font>

767
00:41:32,030 --> 00:41:44,130
complex things so this<font color="#E5E5E5"> is illustrating</font>

768
00:41:40,350 --> 00:41:49,170
two sides of<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Mallett</font><font color="#E5E5E5"> so on the left</font>

769
00:41:44,130 --> 00:41:51,270
<font color="#CCCCCC">hand side there is an HTTP pipeline and</font>

770
00:41:49,170 --> 00:41:56,880
on the right hand<font color="#CCCCCC"> side there is a UDP</font>

771
00:41:51,270 --> 00:41:59,820
pipeline<font color="#CCCCCC"> what's going</font><font color="#E5E5E5"> on just</font><font color="#CCCCCC"> to work</font>

772
00:41:56,880 --> 00:42:03,690
sort of down the the graph<font color="#E5E5E5"> we get our</font>

773
00:41:59,820 --> 00:42:06,480
<font color="#CCCCCC">Sox connection coming</font><font color="#E5E5E5"> in it looks to see</font>

774
00:42:03,690 --> 00:42:10,140
whether it<font color="#CCCCCC"> is HTTP whether it is SSL or</font>

775
00:42:06,480 --> 00:42:12,090
not if it<font color="#E5E5E5"> is SSL it adds an SSL server</font>

776
00:42:10,140 --> 00:42:14,940
<font color="#E5E5E5">handler</font><font color="#CCCCCC"> Mallett will automatically</font>

777
00:42:12,090 --> 00:42:21,230
<font color="#E5E5E5">generate certificates for you</font><font color="#CCCCCC"> signed by</font>

778
00:42:14,940 --> 00:42:25,050
a<font color="#E5E5E5"> CA much like</font><font color="#CCCCCC"> Burke does and then</font>

779
00:42:21,230 --> 00:42:26,660
<font color="#E5E5E5">negotiate that connection for you any</font>

780
00:42:25,050 --> 00:42:29,040
<font color="#CCCCCC">bytes that</font><font color="#E5E5E5"> come through it'll make a</font>

781
00:42:26,660 --> 00:42:31,589
another<font color="#E5E5E5"> check to see if it looks</font><font color="#CCCCCC"> like an</font>

782
00:42:29,040 --> 00:42:34,860
HTTP request<font color="#E5E5E5"> so if the first few bites</font>

783
00:42:31,590 --> 00:42:37,650
look like a gate head post request and

784
00:42:34,860 --> 00:42:40,920
we'll go down<font color="#E5E5E5"> the HTTP branch</font><font color="#CCCCCC"> or else it</font>

785
00:42:37,650 --> 00:42:44,910
will<font color="#E5E5E5"> take the non HTTP branch</font><font color="#CCCCCC"> if it is</font>

786
00:42:40,920 --> 00:42:48,510
an HTTP<font color="#CCCCCC"> request</font><font color="#E5E5E5"> and you can see the same</font>

787
00:42:44,910 --> 00:42:49,560
sorts of<font color="#CCCCCC"> things happening</font><font color="#E5E5E5"> down this HTTP</font>

788
00:42:48,510 --> 00:42:53,310
branch for the<font color="#E5E5E5"> non</font>

789
00:42:49,560 --> 00:42:56,160
<font color="#CCCCCC">the sole option</font><font color="#E5E5E5"> as well</font><font color="#CCCCCC"> so for this HTTP</font>

790
00:42:53,310 --> 00:43:00,330
<font color="#E5E5E5">we'll use an HTTP server codec so it</font>

791
00:42:56,160 --> 00:43:04,379
reads in a get request for example<font color="#CCCCCC"> and</font>

792
00:43:00,330 --> 00:43:08,460
knows how to<font color="#E5E5E5"> encode an HTTP 200 response</font>

793
00:43:04,380 --> 00:43:10,610
back<font color="#E5E5E5"> into bytes because</font><font color="#CCCCCC"> Mallett</font><font color="#E5E5E5"> because</font>

794
00:43:08,460 --> 00:43:14,490
Nettie is designed for high performance

795
00:43:10,610 --> 00:43:16,800
<font color="#CCCCCC">it</font><font color="#E5E5E5"> actually deals in HTTP requests as</font>

796
00:43:14,490 --> 00:43:21,660
chunks<font color="#CCCCCC"> so you've got the</font><font color="#E5E5E5"> request header</font>

797
00:43:16,800 --> 00:43:22,890
and<font color="#E5E5E5"> then chunks of message content we</font>

798
00:43:21,660 --> 00:43:25,379
don't<font color="#E5E5E5"> really want</font><font color="#CCCCCC"> to deal with</font><font color="#E5E5E5"> chunks of</font>

799
00:43:22,890 --> 00:43:27,660
content<font color="#CCCCCC"> so we have an aggregator that</font>

800
00:43:25,380 --> 00:43:33,840
just pulls those content<font color="#E5E5E5"> chunks back</font>

801
00:43:27,660 --> 00:43:38,040
into a<font color="#E5E5E5"> single message</font><font color="#CCCCCC"> further down</font><font color="#E5E5E5"> we</font>

802
00:43:33,840 --> 00:43:41,820
<font color="#CCCCCC">have a special handler</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I wrote</font><font color="#E5E5E5"> to</font>

803
00:43:38,040 --> 00:43:44,400
handle the upgrade<font color="#E5E5E5"> process from an HTTP</font>

804
00:43:41,820 --> 00:43:46,890
request from an HTTP protocol to the

805
00:43:44,400 --> 00:43:49,230
WebSockets protocol<font color="#E5E5E5"> so WebSockets is a</font>

806
00:43:46,890 --> 00:43:51,440
protocol that<font color="#E5E5E5"> runs on</font><font color="#CCCCCC"> top of HTTP but</font>

807
00:43:49,230 --> 00:43:54,540
really in fact what's happening is<font color="#CCCCCC"> that</font>

808
00:43:51,440 --> 00:43:58,350
the<font color="#E5E5E5"> endpoints tell HTTP to get out of</font>

809
00:43:54,540 --> 00:44:02,160
the way and convert that<font color="#E5E5E5"> connection just</font>

810
00:43:58,350 --> 00:44:07,740
<font color="#E5E5E5">to a pure TCP connection</font><font color="#CCCCCC"> without the</font>

811
00:44:02,160 --> 00:44:09,089
overhead<font color="#E5E5E5"> of the HTTP messages</font><font color="#CCCCCC"> and so</font>

812
00:44:07,740 --> 00:44:11,490
that's what that WebSocket<font color="#E5E5E5"> upgrade</font>

813
00:44:09,090 --> 00:44:13,470
<font color="#CCCCCC">Handler is doing</font><font color="#E5E5E5"> it's listening for the</font>

814
00:44:11,490 --> 00:44:16,830
successful<font color="#CCCCCC"> upgrade message and then</font>

815
00:44:13,470 --> 00:44:21,049
removing<font color="#E5E5E5"> those HTTP handlers</font><font color="#CCCCCC"> and then I</font>

816
00:44:16,830 --> 00:44:26,009
have a script handler which will make

817
00:44:21,050 --> 00:44:28,620
WebSocket frames uppercase so just to do

818
00:44:26,010 --> 00:44:31,820
a couple<font color="#CCCCCC"> of quick demonstrations</font><font color="#E5E5E5"> because</font>

819
00:44:28,620 --> 00:44:31,819
I know I'm running<font color="#E5E5E5"> out of time</font>

820
00:44:33,290 --> 00:44:46,340
<font color="#CCCCCC">WS cat is a WebSockets client so I'm</font>

821
00:44:39,420 --> 00:44:46,340
running<font color="#E5E5E5"> that</font><font color="#CCCCCC"> network disconnected</font>

822
00:44:54,200 --> 00:45:01,169
disconnected<font color="#E5E5E5"> all right there we need to</font>

823
00:44:56,490 --> 00:45:05,370
<font color="#CCCCCC">akin problems so</font><font color="#E5E5E5"> right what I would</font>

824
00:45:01,170 --> 00:45:07,110
demonstrate there<font color="#CCCCCC"> is really that</font><font color="#E5E5E5"> if you</font>

825
00:45:05,370 --> 00:45:09,779
send that WebSocket message

826
00:45:07,110 --> 00:45:16,760
it gets<font color="#E5E5E5"> uppercase and the response comes</font>

827
00:45:09,780 --> 00:45:16,760
back<font color="#E5E5E5"> in uppercase there we go</font>

828
00:45:20,390 --> 00:45:24,089
normally if you run it<font color="#E5E5E5"> without going</font>

829
00:45:22,770 --> 00:45:28,170
<font color="#E5E5E5">through the proxy you just get back</font>

830
00:45:24,090 --> 00:45:34,010
<font color="#E5E5E5">exactly what you sent the other one I</font>

831
00:45:28,170 --> 00:45:37,260
wanted<font color="#E5E5E5"> to demonstrate was a UDP pipeline</font>

832
00:45:34,010 --> 00:45:41,640
so in this case down on the right<font color="#CCCCCC"> hand</font>

833
00:45:37,260 --> 00:45:44,310
side<font color="#E5E5E5"> we have a UDP listener that</font><font color="#CCCCCC"> is</font>

834
00:45:41,640 --> 00:45:46,920
<font color="#E5E5E5">establishing a DNS pipeline so it's</font>

835
00:45:44,310 --> 00:45:49,590
processing DNS data<font color="#CCCCCC"> gram DNS query</font>

836
00:45:46,920 --> 00:45:54,330
decoders bytes<font color="#E5E5E5"> get decoded come out as a</font>

837
00:45:49,590 --> 00:45:56,100
DNS message<font color="#CCCCCC"> intercepted</font><font color="#E5E5E5"> and then there's</font>

838
00:45:54,330 --> 00:45:58,740
a script handler that's really<font color="#E5E5E5"> just</font>

839
00:45:56,100 --> 00:46:03,230
going<font color="#E5E5E5"> to replace any queries for</font><font color="#CCCCCC"> google</font>

840
00:45:58,740 --> 00:46:03,229
<font color="#CCCCCC">comm with a query for sense post comm</font>

841
00:46:04,280 --> 00:46:11,910
now<font color="#E5E5E5"> for</font><font color="#CCCCCC"> dns</font><font color="#E5E5E5"> it's not quite so</font><font color="#CCCCCC"> easy Sox</font>

842
00:46:08,520 --> 00:46:15,390
does support UDP but it's not quite<font color="#CCCCCC"> as</font>

843
00:46:11,910 --> 00:46:18,149
<font color="#CCCCCC">simple as</font><font color="#E5E5E5"> just proxy changing it</font><font color="#CCCCCC"> so you</font>

844
00:46:15,390 --> 00:46:20,250
can see<font color="#E5E5E5"> I did a big redirecting</font><font color="#CCCCCC"> it</font>

845
00:46:18,150 --> 00:46:23,100
through port 105<font color="#E5E5E5"> 3 which is where my UDP</font>

846
00:46:20,250 --> 00:46:25,680
listener is for google.com<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I got</font>

847
00:46:23,100 --> 00:46:27,750
back<font color="#E5E5E5"> an answer of</font><font color="#CCCCCC"> saints post calm</font><font color="#E5E5E5"> in</font>

848
00:46:25,680 --> 00:46:29,910
order<font color="#E5E5E5"> to do so I had to write a little</font>

849
00:46:27,750 --> 00:46:33,180
<font color="#CCCCCC">bit</font><font color="#E5E5E5"> of a handler that</font><font color="#CCCCCC"> said if I see this</font>

850
00:46:29,910 --> 00:46:35,460
message<font color="#CCCCCC"> change the change</font><font color="#E5E5E5"> the text from</font>

851
00:46:33,180 --> 00:46:38,250
google.com<font color="#E5E5E5"> to sense most calm but I also</font>

852
00:46:35,460 --> 00:46:40,380
had<font color="#E5E5E5"> to modify the response to make sure</font>

853
00:46:38,250 --> 00:46:41,850
<font color="#E5E5E5">that it matched up because otherwise the</font>

854
00:46:40,380 --> 00:46:44,580
<font color="#E5E5E5">dig client would say hey I'm getting a</font>

855
00:46:41,850 --> 00:46:47,160
response<font color="#E5E5E5"> for</font><font color="#CCCCCC"> Saints Post while I</font><font color="#E5E5E5"> asked</font>

856
00:46:44,580 --> 00:46:48,960
for Google this<font color="#CCCCCC"> is an invalid answer so</font>

857
00:46:47,160 --> 00:46:52,529
<font color="#CCCCCC">mallet doesn't stop you</font><font color="#E5E5E5"> from having to</font>

858
00:46:48,960 --> 00:46:54,410
understand the protocol details<font color="#E5E5E5"> what it</font>

859
00:46:52,530 --> 00:46:57,960
does stop you from having<font color="#CCCCCC"> to do is</font>

860
00:46:54,410 --> 00:47:01,170
reimplemented a sand a lot<font color="#E5E5E5"> of the the</font>

861
00:46:57,960 --> 00:47:05,570
decoders and encoders<font color="#CCCCCC"> that convert</font>

862
00:47:01,170 --> 00:47:09,980
messages to bites and bites to messages

863
00:47:05,570 --> 00:47:21,170
<font color="#E5E5E5">think I'm out of time any questions one</font>

864
00:47:09,980 --> 00:47:22,970
one question so an encryption protocol

865
00:47:21,170 --> 00:47:26,660
would<font color="#E5E5E5"> be a way</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> starting to encrypt</font>

866
00:47:22,970 --> 00:47:29,089
<font color="#E5E5E5">this starting to prevent this much like</font>

867
00:47:26,660 --> 00:47:33,620
we see SSL is<font color="#E5E5E5"> intercepted</font><font color="#CCCCCC"> well using</font><font color="#E5E5E5"> a</font>

868
00:47:29,090 --> 00:47:35,330
burp<font color="#E5E5E5"> for HTTP</font><font color="#CCCCCC"> if I control the client</font><font color="#E5E5E5"> I</font>

869
00:47:33,620 --> 00:47:37,310
<font color="#E5E5E5">can tell it to accept my certificate</font>

870
00:47:35,330 --> 00:47:41,930
authority<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> sort of thing doesn't</font>

871
00:47:37,310 --> 00:47:44,950
necessarily solve the problem<font color="#CCCCCC"> how you</font>

872
00:47:41,930 --> 00:47:47,509
would prevent this is using robust check

873
00:47:44,950 --> 00:47:49,669
checks and validations on your on<font color="#E5E5E5"> your</font>

874
00:47:47,510 --> 00:47:53,980
server to make sure that your<font color="#E5E5E5"> client is</font>

875
00:47:49,670 --> 00:47:56,360
actually<font color="#E5E5E5"> sending you correct data and</font>

876
00:47:53,980 --> 00:47:57,530
the point of<font color="#CCCCCC"> Mallett is to allow you to</font>

877
00:47:56,360 --> 00:47:59,620
<font color="#E5E5E5">make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that those things are</font>

878
00:47:57,530 --> 00:47:59,620
happening

