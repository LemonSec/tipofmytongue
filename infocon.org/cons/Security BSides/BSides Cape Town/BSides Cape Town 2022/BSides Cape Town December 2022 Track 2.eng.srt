1
00:03:07,680 --> 00:03:09,860
foreign

2
00:03:31,739 --> 00:03:34,940
all right hello

3
00:03:39,959 --> 00:03:43,400
one two one two

4
00:03:45,120 --> 00:03:47,659
hello

5
00:03:49,739 --> 00:03:52,159
hello

6
00:04:07,500 --> 00:04:09,720
yeah I know I just

7
00:04:09,720 --> 00:04:10,980
uh

8
00:04:10,980 --> 00:04:12,480
I just I was getting in the way of my

9
00:04:12,480 --> 00:04:14,659
size

10
00:04:17,160 --> 00:04:19,940
yeah that'll be fine

11
00:04:41,520 --> 00:04:43,860
good good morning everybody

12
00:04:43,860 --> 00:04:46,500
um hello and welcome to my talk my name

13
00:04:46,500 --> 00:04:49,320
is Jason Spencer and my talk is called

14
00:04:49,320 --> 00:04:51,840
an iot War Story

15
00:04:51,840 --> 00:04:55,080
just quickly a little bit about me you

16
00:04:55,080 --> 00:04:57,300
can find me on Twitter at breaker of

17
00:04:57,300 --> 00:04:59,940
science I'm a security Analyst at Orange

18
00:04:59,940 --> 00:05:01,500
cyber defense where I've been for the

19
00:05:01,500 --> 00:05:04,199
last three years what I enjoy doing in

20
00:05:04,199 --> 00:05:06,960
my personal time is surfing golfing and

21
00:05:06,960 --> 00:05:08,340
uh

22
00:05:08,340 --> 00:05:10,259
he can't

23
00:05:10,259 --> 00:05:13,740
um so this talk will go through kind of

24
00:05:13,740 --> 00:05:16,199
the emotions of an assessment it's from

25
00:05:16,199 --> 00:05:18,960
scope fails to the learning I required

26
00:05:18,960 --> 00:05:21,479
to do an assessment how clients put

27
00:05:21,479 --> 00:05:24,539
things together I'll then focus on two

28
00:05:24,539 --> 00:05:27,900
different hacks I did and then driving a

29
00:05:27,900 --> 00:05:30,300
struggle bus up Sony pass trying to find

30
00:05:30,300 --> 00:05:32,699
a solution

31
00:05:32,699 --> 00:05:34,919
um the original title for this talk and

32
00:05:34,919 --> 00:05:36,960
maybe what I should have kept it at was

33
00:05:36,960 --> 00:05:40,979
amqps AWS API iot assessment or acronym

34
00:05:40,979 --> 00:05:43,860
soup and how to deal with it

35
00:05:43,860 --> 00:05:46,320
um I was on an assessment about a year

36
00:05:46,320 --> 00:05:48,720
ago and I read through the scope of work

37
00:05:48,720 --> 00:05:51,539
and I said something something's off it

38
00:05:51,539 --> 00:05:53,639
was an API assessment but it kept

39
00:05:53,639 --> 00:05:55,380
referencing Some Cloud components and I

40
00:05:55,380 --> 00:05:56,820
was like maybe

41
00:05:56,820 --> 00:05:59,100
but I don't know so go to my friend

42
00:05:59,100 --> 00:06:00,900
Simon who worked on the scope and I said

43
00:06:00,900 --> 00:06:02,400
hey dude what's what's up with it

44
00:06:02,400 --> 00:06:06,560
something something just seems off

45
00:06:06,600 --> 00:06:09,600
um so he says no no it's all good the

46
00:06:09,600 --> 00:06:11,820
cloud component just ignore that this is

47
00:06:11,820 --> 00:06:14,639
a Swagger assessment very basic you know

48
00:06:14,639 --> 00:06:16,020
got asked for the Swagger files in the

49
00:06:16,020 --> 00:06:18,360
kick off meeting and you'll be fine so

50
00:06:18,360 --> 00:06:20,759
you know feeling like this is a pretty

51
00:06:20,759 --> 00:06:24,539
standard assessment I decide super

52
00:06:24,539 --> 00:06:26,220
confident I'm gonna walk into this

53
00:06:26,220 --> 00:06:29,280
meeting with my notes everything I need

54
00:06:29,280 --> 00:06:31,620
I'm you know I'm confident I can tell

55
00:06:31,620 --> 00:06:34,080
this client what I need

56
00:06:34,080 --> 00:06:37,259
so big smiles in a meeting with a lot of

57
00:06:37,259 --> 00:06:38,940
people and I say hey guys can you give

58
00:06:38,940 --> 00:06:41,880
me the Swagger files

59
00:06:41,880 --> 00:06:44,639
genuinely that's fine started laughing

60
00:06:44,639 --> 00:06:45,960
at me

61
00:06:45,960 --> 00:06:47,699
um so I'm starting to feel a little less

62
00:06:47,699 --> 00:06:49,800
confident in this meeting but I'm still

63
00:06:49,800 --> 00:06:52,740
I still know what I'm doing so I say so

64
00:06:52,740 --> 00:06:54,900
then he just starts spouting at acronyms

65
00:06:54,900 --> 00:06:56,639
at me just throwing words all over the

66
00:06:56,639 --> 00:06:58,020
room like we're all just supposed to

67
00:06:58,020 --> 00:07:00,840
know what he's talking about AWS amqp

68
00:07:00,840 --> 00:07:03,300
iot and

69
00:07:03,300 --> 00:07:06,199
I was like what

70
00:07:06,240 --> 00:07:09,479
and then he had the audacity to stop

71
00:07:09,479 --> 00:07:11,940
look at me and say what do you know

72
00:07:11,940 --> 00:07:13,919
about amqp

73
00:07:13,919 --> 00:07:16,319
let me tell you honestly I had never

74
00:07:16,319 --> 00:07:18,080
heard this term in my life

75
00:07:18,080 --> 00:07:20,639
I kind of felt like a deer in the

76
00:07:20,639 --> 00:07:22,139
headlight the first thought I could

77
00:07:22,139 --> 00:07:24,360
possibly have is well you Simon

78
00:07:24,360 --> 00:07:27,080
you've

79
00:07:27,900 --> 00:07:30,900
you've got me in trouble

80
00:07:30,900 --> 00:07:33,000
um didn't really know what to do

81
00:07:33,000 --> 00:07:36,060
just sweating means

82
00:07:36,060 --> 00:07:40,259
um thinking you know like what well

83
00:07:40,259 --> 00:07:41,940
um

84
00:07:41,940 --> 00:07:43,919
fortunately one of the first things I

85
00:07:43,919 --> 00:07:45,960
learned when I joined scenespost was the

86
00:07:45,960 --> 00:07:47,580
best hackers are the ones who know how

87
00:07:47,580 --> 00:07:51,000
to Google well so whilst he was throwing

88
00:07:51,000 --> 00:07:52,860
acronyms around the room I thought to

89
00:07:52,860 --> 00:07:55,080
myself the best thing I can do right now

90
00:07:55,080 --> 00:07:56,819
is to Google the thing I know the least

91
00:07:56,819 --> 00:07:58,620
about you know right now I didn't even

92
00:07:58,620 --> 00:08:01,620
know if amqp was an acronym

93
00:08:01,620 --> 00:08:04,620
so fortunately I had done that I Googled

94
00:08:04,620 --> 00:08:07,680
and one of the first things that um

95
00:08:07,680 --> 00:08:09,240
came up on the Google search history

96
00:08:09,240 --> 00:08:11,880
Google search was differences between

97
00:08:11,880 --> 00:08:15,300
amqp as end mqtt and I figured you know

98
00:08:15,300 --> 00:08:16,560
if there's differences there's got to be

99
00:08:16,560 --> 00:08:18,479
similarities so I said to the client

100
00:08:18,479 --> 00:08:20,160
well I don't know much about it but I

101
00:08:20,160 --> 00:08:21,720
know mqtt and I know they're basically

102
00:08:21,720 --> 00:08:24,000
the same thing and it must have been

103
00:08:24,000 --> 00:08:27,080
true because he bought it

104
00:08:28,259 --> 00:08:29,220
um

105
00:08:29,220 --> 00:08:31,319
so it kind of did feel like a bit of a

106
00:08:31,319 --> 00:08:33,679
superhero moment or jumped over the car

107
00:08:33,679 --> 00:08:35,458
you know

108
00:08:35,458 --> 00:08:37,320
feeling pretty proud of myself I could

109
00:08:37,320 --> 00:08:39,659
go on and do this assessment you know

110
00:08:39,659 --> 00:08:42,419
sweat off the brow moment first thing I

111
00:08:42,419 --> 00:08:44,039
had to do was tell Simon that he was

112
00:08:44,039 --> 00:08:45,240
wrong he didn't know what he was doing

113
00:08:45,240 --> 00:08:48,839
he shouldn't be my my boss and he sucks

114
00:08:48,839 --> 00:08:50,820
but then after that I needed to figure

115
00:08:50,820 --> 00:08:52,920
out what to do so now we're going to

116
00:08:52,920 --> 00:08:54,360
talk a bit more about the boring stuff

117
00:08:54,360 --> 00:08:56,100
the learning that you needed to do in

118
00:08:56,100 --> 00:08:57,839
order to perform this assessment and

119
00:08:57,839 --> 00:09:00,060
then some hacks

120
00:09:00,060 --> 00:09:01,860
we did

121
00:09:01,860 --> 00:09:05,519
um before I jump into the learnings we I

122
00:09:05,519 --> 00:09:07,200
needed to have a look and understand you

123
00:09:07,200 --> 00:09:08,580
know what is this what is this

124
00:09:08,580 --> 00:09:09,839
architecture what are we actually

125
00:09:09,839 --> 00:09:11,279
tasting

126
00:09:11,279 --> 00:09:13,320
um before we get into the nitty-gritty

127
00:09:13,320 --> 00:09:15,180
of what is amqp

128
00:09:15,180 --> 00:09:17,640
so this is the client's architecture so

129
00:09:17,640 --> 00:09:21,060
a device or an iot device is speaking to

130
00:09:21,060 --> 00:09:23,519
a manager that manages that iot device

131
00:09:23,519 --> 00:09:26,940
with mqtt that manager speaks to a

132
00:09:26,940 --> 00:09:30,420
message queue with amqp consumer reads

133
00:09:30,420 --> 00:09:32,519
off that message queue with amqp and

134
00:09:32,519 --> 00:09:36,180
pushes data onto a global data Lake and

135
00:09:36,180 --> 00:09:39,120
then from behind all my numbers and then

136
00:09:39,120 --> 00:09:41,519
from there a customer portal uses an API

137
00:09:41,519 --> 00:09:44,220
query to query that data Lake for data

138
00:09:44,220 --> 00:09:46,320
relevant to them

139
00:09:46,320 --> 00:09:49,380
so as I said in my original bed this is

140
00:09:49,380 --> 00:09:54,540
an amqp AWS API iot assessment so the

141
00:09:54,540 --> 00:09:58,260
AWS is this rabbitmq endpoint lives

142
00:09:58,260 --> 00:10:00,180
that's the cloud component the rabbit mq

143
00:10:00,180 --> 00:10:03,300
endpoint is an a AWS the pi Gateway so

144
00:10:03,300 --> 00:10:05,940
we're testing not from the iot device to

145
00:10:05,940 --> 00:10:07,980
the manager we're not testing from the

146
00:10:07,980 --> 00:10:09,720
consumer to the data lake or from the

147
00:10:09,720 --> 00:10:11,100
customer portal to the data Lake it's

148
00:10:11,100 --> 00:10:15,540
simply from the manager to to the revlmq

149
00:10:15,540 --> 00:10:16,620
um

150
00:10:16,620 --> 00:10:20,760
API Gateway so I had to say that I

151
00:10:20,760 --> 00:10:22,620
assumed to the breach of that manager so

152
00:10:22,620 --> 00:10:24,120
that I had credentials in order to

153
00:10:24,120 --> 00:10:26,100
interact with that um

154
00:10:26,100 --> 00:10:27,300
service

155
00:10:27,300 --> 00:10:29,399
but just for interest sake let's have a

156
00:10:29,399 --> 00:10:31,560
look at the section here all right so

157
00:10:31,560 --> 00:10:34,080
one of my very smart colleagues George

158
00:10:34,080 --> 00:10:36,540
and later Rogan and William repeated it

159
00:10:36,540 --> 00:10:39,360
had to test this attack Vector here

160
00:10:39,360 --> 00:10:41,459
so unfortunately in a rather trivial

161
00:10:41,459 --> 00:10:44,000
start to the assessment for the client

162
00:10:44,000 --> 00:10:47,160
George was able to

163
00:10:47,160 --> 00:10:49,260
boot the machine in recovery mode add

164
00:10:49,260 --> 00:10:51,839
his own root user and as the Brits might

165
00:10:51,839 --> 00:10:55,560
say Bob's your uncle he had everything

166
00:10:55,560 --> 00:10:56,459
um

167
00:10:56,459 --> 00:10:58,740
so George has a bit of dumpster diving

168
00:10:58,740 --> 00:11:00,720
and one of the first things he aren't

169
00:11:00,720 --> 00:11:02,579
was configuration files lots of fun

170
00:11:02,579 --> 00:11:04,800
things in there but most importantly for

171
00:11:04,800 --> 00:11:07,760
me the rabbitmq credentials

172
00:11:07,760 --> 00:11:10,680
an important fact about this manager is

173
00:11:10,680 --> 00:11:13,019
it is delivered to the various customers

174
00:11:13,019 --> 00:11:15,360
so it lives on site at the

175
00:11:15,360 --> 00:11:17,579
different customers and isn't managed to

176
00:11:17,579 --> 00:11:20,760
controlled by the specific client we're

177
00:11:20,760 --> 00:11:22,680
testing which means it opens them up to

178
00:11:22,680 --> 00:11:24,720
local physical attacks which George's

179
00:11:24,720 --> 00:11:26,820
attack is implausible which makes my

180
00:11:26,820 --> 00:11:28,260
attack plausible because I was able to

181
00:11:28,260 --> 00:11:30,600
get the credentials

182
00:11:30,600 --> 00:11:31,980
so we're going to assume we're going to

183
00:11:31,980 --> 00:11:33,660
go from the manager from here on out so

184
00:11:33,660 --> 00:11:35,700
we can just erase this and just assume

185
00:11:35,700 --> 00:11:37,440
we have control of the manager and we're

186
00:11:37,440 --> 00:11:39,720
trying to push data to the

187
00:11:39,720 --> 00:11:41,220
portal

188
00:11:41,220 --> 00:11:43,800
so now as I said before we're going to

189
00:11:43,800 --> 00:11:45,800
discuss some basic stuff

190
00:11:45,800 --> 00:11:49,620
learnings just to understand what iot is

191
00:11:49,620 --> 00:11:52,200
you know for those who may not know it's

192
00:11:52,200 --> 00:11:53,579
just things connected to things it's

193
00:11:53,579 --> 00:11:55,980
quite simple it's sensors or Internet

194
00:11:55,980 --> 00:11:59,399
connected sensors that have

195
00:11:59,399 --> 00:12:01,800
itself or its environment and push that

196
00:12:01,800 --> 00:12:04,740
data to a hub or a Gateway that Hub or

197
00:12:04,740 --> 00:12:06,540
Gateway will either analyze the data

198
00:12:06,540 --> 00:12:09,120
there or it will push it further to get

199
00:12:09,120 --> 00:12:11,700
analyzed somewhere else in our

200
00:12:11,700 --> 00:12:14,459
we're pushing data to a Gateway which is

201
00:12:14,459 --> 00:12:16,500
then pushing data onto the cloud in

202
00:12:16,500 --> 00:12:17,880
order to get analyzed and then we'll

203
00:12:17,880 --> 00:12:20,940
push that data back to the iot device

204
00:12:20,940 --> 00:12:24,060
so one example of using

205
00:12:24,060 --> 00:12:26,700
icons that are using

206
00:12:26,700 --> 00:12:29,160
ways in order

207
00:12:29,160 --> 00:12:31,079
so they have

208
00:12:31,079 --> 00:12:32,220
cause

209
00:12:32,220 --> 00:12:33,899
see where there is traffic and push you

210
00:12:33,899 --> 00:12:35,760
down a Direction

211
00:12:35,760 --> 00:12:38,640
faster for you another example is

212
00:12:38,640 --> 00:12:41,100
wearing a smart watch now in my instance

213
00:12:41,100 --> 00:12:43,139
my SmartWatch is gathering data about

214
00:12:43,139 --> 00:12:46,200
its environment me me my heart rate my

215
00:12:46,200 --> 00:12:48,240
vot levels my sleep patterns it's

216
00:12:48,240 --> 00:12:50,399
pushing that data via Bluetooth to my

217
00:12:50,399 --> 00:12:53,040
Gateway my cell phone which is then

218
00:12:53,040 --> 00:12:54,600
being analyzed and pushing that data

219
00:12:54,600 --> 00:12:56,160
back to my watch

220
00:12:56,160 --> 00:12:58,980
so we use iot in our lives

221
00:12:58,980 --> 00:13:00,180
um

222
00:13:00,180 --> 00:13:02,839
to live

223
00:13:02,839 --> 00:13:05,760
smarter easier life you know we want

224
00:13:05,760 --> 00:13:09,300
everything to be kind of maintained or

225
00:13:09,300 --> 00:13:11,639
be in a state of homeostasis

226
00:13:11,639 --> 00:13:15,839
so for for businesses we want iot to

227
00:13:15,839 --> 00:13:17,639
help our customers experience to save us

228
00:13:17,639 --> 00:13:21,600
money to save us time in order for us to

229
00:13:21,600 --> 00:13:24,200
further

230
00:13:24,240 --> 00:13:26,760
sorry in order for us to make the lives

231
00:13:26,760 --> 00:13:29,399
of our customers easier because everyone

232
00:13:29,399 --> 00:13:32,220
else is doing it if your job if your

233
00:13:32,220 --> 00:13:34,980
business isn't making the life of the

234
00:13:34,980 --> 00:13:36,240
customer easier they'll go somewhere

235
00:13:36,240 --> 00:13:38,579
that's faster for them to get out of the

236
00:13:38,579 --> 00:13:39,540
shop

237
00:13:39,540 --> 00:13:42,899
on the flip side however it adds risk so

238
00:13:42,899 --> 00:13:45,060
increasing our attack surface every time

239
00:13:45,060 --> 00:13:47,040
we add something to the internet right

240
00:13:47,040 --> 00:13:49,560
our digital footprint expands so a Smart

241
00:13:49,560 --> 00:13:51,240
Lock which might add security because

242
00:13:51,240 --> 00:13:54,420
you can check remotely if I

243
00:13:54,420 --> 00:13:55,740
locked you know

244
00:13:55,740 --> 00:13:57,720
log in on my phone and have a little bit

245
00:13:57,720 --> 00:13:59,339
of extra usability because I unlock my

246
00:13:59,339 --> 00:14:01,680
door before I get home before I get to

247
00:14:01,680 --> 00:14:03,779
the door however should that be hacked

248
00:14:03,779 --> 00:14:06,300
of course that app opens up further risk

249
00:14:06,300 --> 00:14:08,399
for us right if that can be opened by

250
00:14:08,399 --> 00:14:09,839
anyone

251
00:14:09,839 --> 00:14:13,139
so most people who have iot in their

252
00:14:13,139 --> 00:14:14,639
lives probably have a little Raspberry

253
00:14:14,639 --> 00:14:17,720
Pi hosting some sort of Home assistant

254
00:14:17,720 --> 00:14:20,040
and they use it to just manage their

255
00:14:20,040 --> 00:14:22,019
home environment their life right you

256
00:14:22,019 --> 00:14:24,560
know on my own

257
00:14:27,300 --> 00:14:29,579
was talking to my boss about this and he

258
00:14:29,579 --> 00:14:31,740
was showing me his

259
00:14:31,740 --> 00:14:33,959
heart said how

260
00:14:33,959 --> 00:14:36,779
he said how when he's on his way home

261
00:14:36,779 --> 00:14:39,720
he logs onto the platform checks the

262
00:14:39,720 --> 00:14:43,320
temperature of his rooms and retro and

263
00:14:43,320 --> 00:14:45,480
correct that so that when he gets home

264
00:14:45,480 --> 00:14:48,079
he can

265
00:14:49,860 --> 00:14:52,260
now what if I could modify the

266
00:14:52,260 --> 00:14:54,959
temperature he is seeing

267
00:14:54,959 --> 00:14:56,519
um

268
00:14:56,519 --> 00:14:58,740
you know if if I could modify the

269
00:14:58,740 --> 00:15:00,420
temperature here seeing he might do the

270
00:15:00,420 --> 00:15:02,639
adverse of his intention he might make

271
00:15:02,639 --> 00:15:06,000
the the room hotter than it already was

272
00:15:06,000 --> 00:15:06,779
um

273
00:15:06,779 --> 00:15:08,579
now this wouldn't do anything serious

274
00:15:08,579 --> 00:15:11,160
other than really annoy my boss

275
00:15:11,160 --> 00:15:12,779
um but what if instead of was his room

276
00:15:12,779 --> 00:15:15,300
it was a fridge or a set of fridges in a

277
00:15:15,300 --> 00:15:18,060
warehouse and we could ruin the produce

278
00:15:18,060 --> 00:15:19,920
well that's that's the Crux of our

279
00:15:19,920 --> 00:15:21,480
attack you know I'm not attacking the

280
00:15:21,480 --> 00:15:25,040
iot device itself I'm not

281
00:15:25,560 --> 00:15:28,380
the data lake or the customer portal I'm

282
00:15:28,380 --> 00:15:30,420
trying to modify the data that's seen at

283
00:15:30,420 --> 00:15:32,699
that customer portal in order for the

284
00:15:32,699 --> 00:15:36,720
data that's being sent back to

285
00:15:36,720 --> 00:15:39,300
to negatively affect the iot devices on

286
00:15:39,300 --> 00:15:42,959
the way back now if we were scoped in

287
00:15:42,959 --> 00:15:44,880
order to test the iot device itself sure

288
00:15:44,880 --> 00:15:47,399
I could try and send illegitimate

289
00:15:47,399 --> 00:15:48,899
commands in order to make the

290
00:15:48,899 --> 00:15:50,459
temperature hotter itself on the device

291
00:15:50,459 --> 00:15:54,779
however I can if I can push data

292
00:15:54,779 --> 00:15:57,120
to the customer portal and get the the

293
00:15:57,120 --> 00:15:58,800
legitimate command from the customer

294
00:15:58,800 --> 00:16:02,160
portal to affect the room the device the

295
00:16:02,160 --> 00:16:04,019
iot device will have no way of verifying

296
00:16:04,019 --> 00:16:07,459
that it's incorrect and will just act

297
00:16:11,959 --> 00:16:14,279
so naturally the first thing that we

298
00:16:14,279 --> 00:16:16,620
might ask when you hear amqps AWS API

299
00:16:16,620 --> 00:16:19,920
iot assessment is what the hell is amqp

300
00:16:19,920 --> 00:16:22,500
so an advanced message queuing protocol

301
00:16:22,500 --> 00:16:24,899
system is quite simple it's actually

302
00:16:24,899 --> 00:16:27,180
just it's like a simple queue it's mqtt

303
00:16:27,180 --> 00:16:29,459
or anything else it's just a data comes

304
00:16:29,459 --> 00:16:31,260
in and it puts on a queue and it comes

305
00:16:31,260 --> 00:16:33,060
out the other end um

306
00:16:33,060 --> 00:16:35,459
amqp is an application layer protocol

307
00:16:35,459 --> 00:16:37,980
but it's also

308
00:16:37,980 --> 00:16:40,500
um it defines the network layer and the

309
00:16:40,500 --> 00:16:42,420
high level architecture of the broker so

310
00:16:42,420 --> 00:16:45,839
when I when you see rabbitmq that's just

311
00:16:45,839 --> 00:16:47,880
the specific implementation there is

312
00:16:47,880 --> 00:16:50,120
other

313
00:16:51,240 --> 00:16:54,300
amqp defines how that broker must work

314
00:16:54,300 --> 00:16:57,420
now you can also you can also Implement

315
00:16:57,420 --> 00:16:59,399
certain of your own rules but there are

316
00:16:59,399 --> 00:17:01,259
defaults that need to be implemented in

317
00:17:01,259 --> 00:17:04,519
order for A2 5

318
00:17:05,099 --> 00:17:06,900
um so to start this let's try and

319
00:17:06,900 --> 00:17:09,359
understand what exactly a queue is

320
00:17:09,359 --> 00:17:11,160
all right so cues are extremely simple

321
00:17:11,160 --> 00:17:12,660
in their design generally they're

322
00:17:12,660 --> 00:17:15,480
comprised of three parts a producer

323
00:17:15,480 --> 00:17:19,880
self and a consumer message queues work

324
00:17:19,880 --> 00:17:21,959
asynchronous communication method

325
00:17:21,959 --> 00:17:24,780
meaning that a producer does not need to

326
00:17:24,780 --> 00:17:27,720
wait for a consumer to absorb

327
00:17:27,720 --> 00:17:30,840
or deal with that data that's being sent

328
00:17:30,840 --> 00:17:32,280
in order for the producer to keep

329
00:17:32,280 --> 00:17:34,380
working

330
00:17:34,380 --> 00:17:37,140
sorry a nice example of that is when I

331
00:17:37,140 --> 00:17:39,780
send an email to Leon Leon is way too

332
00:17:39,780 --> 00:17:41,640
busy and too cool to talk to me so he

333
00:17:41,640 --> 00:17:43,280
never replies

334
00:17:43,280 --> 00:17:46,200
so I can keep doing my job I don't need

335
00:17:46,200 --> 00:17:49,220
to wait for him otherwise I

336
00:17:50,340 --> 00:17:52,799
cues Works synonymously in real life as

337
00:17:52,799 --> 00:17:54,840
they do in message queues and that's in

338
00:17:54,840 --> 00:17:57,059
a first and First Art manner which is

339
00:17:57,059 --> 00:17:58,740
first in the queue first out of the

340
00:17:58,740 --> 00:18:00,000
queue

341
00:18:00,000 --> 00:18:01,980
clients or the producers and the

342
00:18:01,980 --> 00:18:03,600
consumers whereas the server is the

343
00:18:03,600 --> 00:18:05,220
middleware so that's the broker that we

344
00:18:05,220 --> 00:18:06,780
were speaking about

345
00:18:06,780 --> 00:18:09,900
when I originally gave this talk to Leon

346
00:18:09,900 --> 00:18:12,000
he's unfortunately for him had to sit

347
00:18:12,000 --> 00:18:13,740
through it many times

348
00:18:13,740 --> 00:18:17,100
showed him how amqp works and even him

349
00:18:17,100 --> 00:18:18,900
who is much smarter than me said dude

350
00:18:18,900 --> 00:18:20,640
that was so complicated I have no idea

351
00:18:20,640 --> 00:18:21,840
what you're talking about

352
00:18:21,840 --> 00:18:23,760
so we're going to be using the analogy

353
00:18:23,760 --> 00:18:27,059
of me going to buy an apple

354
00:18:27,059 --> 00:18:29,520
in order to understand how this works

355
00:18:29,520 --> 00:18:31,500
now Woolworths I'm just using because

356
00:18:31,500 --> 00:18:33,740
their cues work synonymously with

357
00:18:33,740 --> 00:18:36,900
rabbitmq whereas if I went to pick and

358
00:18:36,900 --> 00:18:38,940
pay we separate into different tools

359
00:18:38,940 --> 00:18:41,240
this is

360
00:18:41,880 --> 00:18:44,220
so if I was to go shopping at Woolworths

361
00:18:44,220 --> 00:18:45,480
for an apple

362
00:18:45,480 --> 00:18:46,260
um

363
00:18:46,260 --> 00:18:48,660
I joined the queue with my Apple I stand

364
00:18:48,660 --> 00:18:50,640
behind this lady and when I get to the

365
00:18:50,640 --> 00:18:53,039
front I can buy I in this case am the

366
00:18:53,039 --> 00:18:57,559
producer the apple is my message and

367
00:18:58,919 --> 00:19:01,020
in this case after he's passed on the

368
00:19:01,020 --> 00:19:02,520
message he happens to pass that apple

369
00:19:02,520 --> 00:19:05,100
back to me but what the consumer does to

370
00:19:05,100 --> 00:19:06,840
deal with her message is not my business

371
00:19:06,840 --> 00:19:10,459
I just need to give it to him

372
00:19:11,520 --> 00:19:13,799
this is me getting to the front

373
00:19:13,799 --> 00:19:16,620
so

374
00:19:16,620 --> 00:19:19,860
sorry so again we're at Woolworths there

375
00:19:19,860 --> 00:19:22,679
is not just one queue there's many cues

376
00:19:22,679 --> 00:19:23,700
so now I'm going to go through the

377
00:19:23,700 --> 00:19:25,980
concept of how consumers work

378
00:19:25,980 --> 00:19:29,460
so multiple consumers can come to work

379
00:19:29,460 --> 00:19:31,440
every day so it Woolworths there's many

380
00:19:31,440 --> 00:19:34,980
consumers I am

381
00:19:34,980 --> 00:19:37,200
in dark yeah the fourth person with my

382
00:19:37,200 --> 00:19:39,900
Apple I will the first lady will go to

383
00:19:39,900 --> 00:19:41,700
the first person the second man goes to

384
00:19:41,700 --> 00:19:44,580
the second till the lady there the third

385
00:19:44,580 --> 00:19:46,980
person goes to the third till and so on

386
00:19:46,980 --> 00:19:49,080
uh sorry the first till again if two

387
00:19:49,080 --> 00:19:51,539
consumers came to work that day

388
00:19:51,539 --> 00:19:54,360
important facet of how rabbitmq and

389
00:19:54,360 --> 00:19:56,820
Woolworths work is once I go to till 1 I

390
00:19:56,820 --> 00:19:59,280
don't go and show my food till number

391
00:19:59,280 --> 00:20:01,500
two that is only

392
00:20:01,500 --> 00:20:04,740
um visible to the first tall person

393
00:20:04,740 --> 00:20:07,020
so if I am chosen by the first Hill

394
00:20:07,020 --> 00:20:09,120
person that is who will see my data and

395
00:20:09,120 --> 00:20:11,760
that is the same as with rabbitmq if I

396
00:20:11,760 --> 00:20:14,340
am the first person in the queue I'll go

397
00:20:14,340 --> 00:20:16,919
to the first person who subscribed to

398
00:20:16,919 --> 00:20:19,140
that queue that's the first consumer

399
00:20:19,140 --> 00:20:21,120
now the next question we might ask is

400
00:20:21,120 --> 00:20:24,960
who can consume now at Woolworths same

401
00:20:24,960 --> 00:20:27,660
as at um

402
00:20:27,660 --> 00:20:30,299
in rabbitmq we have the ability to find

403
00:20:30,299 --> 00:20:33,240
exactly who can do it so obviously

404
00:20:33,240 --> 00:20:34,980
somebody from Pick and Pay can't go and

405
00:20:34,980 --> 00:20:36,780
stand behind account in Woolworths and

406
00:20:36,780 --> 00:20:39,240
say Hey I want to serve you so you need

407
00:20:39,240 --> 00:20:43,200
to be authenticated to serve somebody

408
00:20:43,200 --> 00:20:46,380
scribe but the next thing is okay cool

409
00:20:46,380 --> 00:20:48,780
but can any Woolworths employee go from

410
00:20:48,780 --> 00:20:50,760
anywhere in the world well Woolworths

411
00:20:50,760 --> 00:20:52,620
can say anybody with a badge can go and

412
00:20:52,620 --> 00:20:53,940
stand behind accountant and help people

413
00:20:53,940 --> 00:20:56,340
well which also has the ability to say

414
00:20:56,340 --> 00:20:59,340
hey only people from this very specific

415
00:20:59,340 --> 00:21:02,280
Branch can go so in Rapid mq terms if I

416
00:21:02,280 --> 00:21:04,860
have a very specific IP address then I'm

417
00:21:04,860 --> 00:21:07,140
able to consume all for this network

418
00:21:07,140 --> 00:21:10,200
but what happens but

419
00:21:10,200 --> 00:21:12,900
Woolworths also can say okay cool but I

420
00:21:12,900 --> 00:21:14,400
don't just want anybody in this Branch

421
00:21:14,400 --> 00:21:16,919
to go I want people in this Branch who

422
00:21:16,919 --> 00:21:19,200
have a who have been hired as a counter

423
00:21:19,200 --> 00:21:22,320
worker so again in rabbit mq terms that

424
00:21:22,320 --> 00:21:25,380
would be somebody who can subscribe to a

425
00:21:25,380 --> 00:21:27,480
very specific virtual host which I'll

426
00:21:27,480 --> 00:21:30,299
speak about in a bit more detail now

427
00:21:30,299 --> 00:21:32,100
um so somebody from a very specific

428
00:21:32,100 --> 00:21:35,120
Branch so an IP

429
00:21:35,220 --> 00:21:37,740
in a specific virtual house so rabbitmq

430
00:21:37,740 --> 00:21:40,559
has the ability to say only certain

431
00:21:40,559 --> 00:21:42,240
people can consume or they can say

432
00:21:42,240 --> 00:21:45,679
anybody who's got credentials

433
00:21:46,440 --> 00:21:48,720
so again we're at Woolworths and now

434
00:21:48,720 --> 00:21:50,940
we're in the food section but there's

435
00:21:50,940 --> 00:21:52,679
actually two cues I lied to you earlier

436
00:21:52,679 --> 00:21:54,780
there's one cue that everyone can go to

437
00:21:54,780 --> 00:21:56,760
and there's a second queue where only

438
00:21:56,760 --> 00:21:59,340
people who have 10 items

439
00:21:59,340 --> 00:22:01,799
item now the second cue is what would be

440
00:22:01,799 --> 00:22:04,020
referred to as a routing algorithm right

441
00:22:04,020 --> 00:22:07,440
so do I have 10 items or less or not I.E

442
00:22:07,440 --> 00:22:09,840
am I just have Kia with my apple and if

443
00:22:09,840 --> 00:22:12,659
I am then I'll join the cube so in Rapid

444
00:22:12,659 --> 00:22:15,539
mq terms that would be an exchange of

445
00:22:15,539 --> 00:22:17,220
type

446
00:22:17,220 --> 00:22:19,740
direct or the default case for how it

447
00:22:19,740 --> 00:22:21,900
works right so the default way is if I

448
00:22:21,900 --> 00:22:23,820
match the routing algorithm I'm allowed

449
00:22:23,820 --> 00:22:27,539
to join that queue an exchange is

450
00:22:27,539 --> 00:22:31,220
what we use to buy

451
00:22:31,320 --> 00:22:33,840
messages onto queues so it it routes

452
00:22:33,840 --> 00:22:35,700
it's a routing algorithm to buy messages

453
00:22:35,700 --> 00:22:38,640
onto queues so do I match it or not in

454
00:22:38,640 --> 00:22:40,620
the default way built by the remedym

455
00:22:40,620 --> 00:22:43,100
cues

456
00:22:43,260 --> 00:22:46,919
framework is a direct queue now this

457
00:22:46,919 --> 00:22:48,840
reaching algorithm we either have 10 or

458
00:22:48,840 --> 00:22:50,880
we don't have 10 items so if I do have

459
00:22:50,880 --> 00:22:52,919
10 I join the queue if I don't I'm not

460
00:22:52,919 --> 00:22:54,299
allowed

461
00:22:54,299 --> 00:22:56,700
now naturally if I were to have more

462
00:22:56,700 --> 00:22:58,799
than 10 items they're going to say get

463
00:22:58,799 --> 00:23:00,840
away from here you've got two bags full

464
00:23:00,840 --> 00:23:03,900
of items and this line is only for

465
00:23:03,900 --> 00:23:06,059
only for people with less

466
00:23:06,059 --> 00:23:08,039
but what if you go shopping are

467
00:23:08,039 --> 00:23:11,100
equivalents on a Saturday now let's be

468
00:23:11,100 --> 00:23:14,220
honest it's it's a it's a show on a

469
00:23:14,220 --> 00:23:16,140
at lunchtime on a Saturday everyone's

470
00:23:16,140 --> 00:23:18,240
there buying their lunch their weekly

471
00:23:18,240 --> 00:23:20,640
groceries and you know

472
00:23:20,640 --> 00:23:22,799
so there's very few people who are

473
00:23:22,799 --> 00:23:24,720
actually there buying 10 items or less

474
00:23:24,720 --> 00:23:29,100
so if sorry

475
00:23:29,100 --> 00:23:31,559
if this was the case a Woolworths

476
00:23:31,559 --> 00:23:33,240
employee might say to you hey come with

477
00:23:33,240 --> 00:23:36,720
me let's join the shorter queue

478
00:23:36,720 --> 00:23:39,179
even though you have more than 10 items

479
00:23:39,179 --> 00:23:41,760
now in rabbit EMQ terms if I was on an

480
00:23:41,760 --> 00:23:44,220
exchange of type fan art that would mean

481
00:23:44,220 --> 00:23:46,020
that it doesn't actually matter if I if

482
00:23:46,020 --> 00:23:47,820
I have the

483
00:23:47,820 --> 00:23:49,799
have the same data there all I need to

484
00:23:49,799 --> 00:23:52,380
know is where the exchange lives I.E

485
00:23:52,380 --> 00:23:54,419
entered Woolworths that means I can go

486
00:23:54,419 --> 00:23:56,820
on any cue now it will just push me onto

487
00:23:56,820 --> 00:23:59,780
a queue because you're in

488
00:24:00,059 --> 00:24:03,960
now speaking of different cues

489
00:24:03,960 --> 00:24:05,400
I'm now going to go through the concept

490
00:24:05,400 --> 00:24:08,400
of virtual hosts all right so if we have

491
00:24:08,400 --> 00:24:10,260
a look at this diagram in Woolworths

492
00:24:10,260 --> 00:24:12,240
there's

493
00:24:12,240 --> 00:24:15,480
we've got a home section here donated by

494
00:24:15,480 --> 00:24:17,940
the Apothecary section

495
00:24:17,940 --> 00:24:19,919
we have a clothing section which is

496
00:24:19,919 --> 00:24:22,200
donated by the um the Sporting Goods

497
00:24:22,200 --> 00:24:24,780
section and we have a food section which

498
00:24:24,780 --> 00:24:26,820
I'm

499
00:24:26,820 --> 00:24:29,280
not those are the only images I can find

500
00:24:29,280 --> 00:24:31,559
uh so we have three different virtual

501
00:24:31,559 --> 00:24:34,020
hosts right so I can go and Shop in

502
00:24:34,020 --> 00:24:35,700
Woolworths anybody who walks into

503
00:24:35,700 --> 00:24:37,799
Woolworths is immediately authenticated

504
00:24:37,799 --> 00:24:39,840
right so let's just assume that you have

505
00:24:39,840 --> 00:24:43,939
credentials to speak to revenue

506
00:24:44,539 --> 00:24:48,059
so the next thing is if I was to go

507
00:24:48,059 --> 00:24:50,220
shopping in the food section well now I

508
00:24:50,220 --> 00:24:51,960
would be expected to pay for my goods in

509
00:24:51,960 --> 00:24:54,059
the feeding section because that is

510
00:24:54,059 --> 00:24:56,700
where I am now authorized

511
00:24:56,700 --> 00:24:59,100
purchase Goods right so I have been

512
00:24:59,100 --> 00:25:00,720
authenticated by walking in the shop but

513
00:25:00,720 --> 00:25:03,059
I'm I'm only authorized to pay for my

514
00:25:03,059 --> 00:25:04,559
goods in this section that I currently

515
00:25:04,559 --> 00:25:06,799
am

516
00:25:07,679 --> 00:25:09,960
um but wallet again has the ability to

517
00:25:09,960 --> 00:25:11,940
have a LAX ruling of this you know

518
00:25:11,940 --> 00:25:13,980
sometimes I've been at Woolworths I've

519
00:25:13,980 --> 00:25:15,360
filled up a trolley I've looked at the

520
00:25:15,360 --> 00:25:16,559
queue and I've said well the Homing

521
00:25:16,559 --> 00:25:20,360
section is dead empty I'm going to

522
00:25:21,240 --> 00:25:22,980
so if I took my close to the clothing

523
00:25:22,980 --> 00:25:25,860
section and pay for my goods there I

524
00:25:25,860 --> 00:25:30,120
have been authorized to to shop in a

525
00:25:30,120 --> 00:25:31,740
different virtual host

526
00:25:31,740 --> 00:25:35,520
what this means is in rabbitmq terms I

527
00:25:35,520 --> 00:25:38,520
can say only people who shop in food

528
00:25:38,520 --> 00:25:40,679
section have to pay in food section or I

529
00:25:40,679 --> 00:25:42,059
can say look as long as you're

530
00:25:42,059 --> 00:25:43,980
authenticated go and do whatever the

531
00:25:43,980 --> 00:25:47,240
hell you want I don't really care

532
00:25:47,340 --> 00:25:50,279
so a virtual host

533
00:25:50,279 --> 00:25:52,440
is kind of exactly what you would

534
00:25:52,440 --> 00:25:53,880
imagine it to be it's a namespace with

535
00:25:53,880 --> 00:25:55,980
its own exchanges with its own cues with

536
00:25:55,980 --> 00:25:58,860
its own bindings and everything else

537
00:25:58,860 --> 00:26:01,140
but how we authenticate to that is

538
00:26:01,140 --> 00:26:02,700
secondary to authenticating to the

539
00:26:02,700 --> 00:26:04,440
rabbitmq node itself so we first

540
00:26:04,440 --> 00:26:06,360
authenticate by walking into Woolworths

541
00:26:06,360 --> 00:26:08,400
and then we authorize ourselves by going

542
00:26:08,400 --> 00:26:11,640
to the queue we're allowed to go to

543
00:26:11,640 --> 00:26:13,980
go to so essentially this right this is

544
00:26:13,980 --> 00:26:16,140
a message broker all right so we've got

545
00:26:16,140 --> 00:26:18,840
a producer that can send into a virtual

546
00:26:18,840 --> 00:26:21,080
host

547
00:26:21,960 --> 00:26:24,179
sorry

548
00:26:24,179 --> 00:26:25,140
um

549
00:26:25,140 --> 00:26:28,620
into a producer that can send a message

550
00:26:28,620 --> 00:26:31,500
into an API a broker API endpoint the

551
00:26:31,500 --> 00:26:34,020
broker has one or more virtual hosts and

552
00:26:34,020 --> 00:26:35,820
each in each virtual host you have one

553
00:26:35,820 --> 00:26:39,240
or more exchanges which have a binding

554
00:26:39,240 --> 00:26:41,760
to one or more cues and that queue can

555
00:26:41,760 --> 00:26:44,940
be consumed by a subscribed consumer

556
00:26:44,940 --> 00:26:48,419
or one or more subscribe to Consumer

557
00:26:48,419 --> 00:26:50,640
consumer so before we go on to the hacks

558
00:26:50,640 --> 00:26:52,140
and stuff let's have a look at the

559
00:26:52,140 --> 00:26:54,000
client architecture again it's trying to

560
00:26:54,000 --> 00:26:58,220
understand exactly what is going on

561
00:27:01,200 --> 00:27:04,260
so as you can see here we have each

562
00:27:04,260 --> 00:27:07,380
manager belongs to a separate company so

563
00:27:07,380 --> 00:27:10,080
a manager belongs to a company it has

564
00:27:10,080 --> 00:27:12,960
one or more iot devices those iot

565
00:27:12,960 --> 00:27:15,840
devices send their device information

566
00:27:15,840 --> 00:27:19,799
a device ID to a message queue broker

567
00:27:19,799 --> 00:27:22,620
the consumer consumes all of that same

568
00:27:22,620 --> 00:27:24,659
sends that data into a global data Lake

569
00:27:24,659 --> 00:27:28,580
and then each customer portal will

570
00:27:28,580 --> 00:27:31,860
send an API query to the global data

571
00:27:31,860 --> 00:27:33,900
Lake and ask specifically for the data

572
00:27:33,900 --> 00:27:36,179
on um

573
00:27:36,179 --> 00:27:38,400
so some important things to recognize

574
00:27:38,400 --> 00:27:40,799
here is obviously they each have

575
00:27:40,799 --> 00:27:43,980
sequential device IDs this is not just

576
00:27:43,980 --> 00:27:46,740
within the organization

577
00:27:46,740 --> 00:27:49,799
this is cross-organization so divide

578
00:27:49,799 --> 00:27:51,720
the first company if I was a second

579
00:27:51,720 --> 00:27:53,580
company and loaded my

580
00:27:53,580 --> 00:27:56,340
ISX I'm device id2

581
00:27:56,340 --> 00:27:59,700
when we hit the rapidmq endpoint we have

582
00:27:59,700 --> 00:28:02,460
an exchange of type fan art now

583
00:28:02,460 --> 00:28:04,860
remember about that is it doesn't matter

584
00:28:04,860 --> 00:28:07,100
if I

585
00:28:07,260 --> 00:28:09,720
obviously going to get important

586
00:28:09,720 --> 00:28:13,279
so this is an example that I set up

587
00:28:13,279 --> 00:28:17,400
with a aimqp fan art type on the

588
00:28:17,400 --> 00:28:20,760
exchange with a routing algorithm of us

589
00:28:20,760 --> 00:28:24,000
dot hash and that's us Dot

590
00:28:24,000 --> 00:28:25,740
wildcard so it can be anything I just

591
00:28:25,740 --> 00:28:27,900
needed to know the US start or in this

592
00:28:27,900 --> 00:28:29,400
case because it's fan art I didn't need

593
00:28:29,400 --> 00:28:30,900
to know anything as you'll notice down

594
00:28:30,900 --> 00:28:32,820
here the routing algorithm I actually

595
00:28:32,820 --> 00:28:36,799
sent it in with is DN I don't know

596
00:28:37,799 --> 00:28:39,840
but I sent in D and I was still able to

597
00:28:39,840 --> 00:28:41,959
push

598
00:28:44,700 --> 00:28:46,740
foreign

599
00:28:46,740 --> 00:28:49,380
that is obviously then sent with mqtt

600
00:28:49,380 --> 00:28:51,539
onto a data Lake and then from there the

601
00:28:51,539 --> 00:28:54,379
API query works

602
00:28:54,539 --> 00:28:57,659
cool so why are we here all right so

603
00:28:57,659 --> 00:28:59,460
we've had to endure a pretty stressful

604
00:28:59,460 --> 00:29:01,140
kickoff meeting

605
00:29:01,140 --> 00:29:03,480
um next we had to take a step back learn

606
00:29:03,480 --> 00:29:05,460
figure out you know what

607
00:29:05,460 --> 00:29:06,480
went on

608
00:29:06,480 --> 00:29:08,940
everyone's a little bit confused

609
00:29:08,940 --> 00:29:09,840
um

610
00:29:09,840 --> 00:29:12,419
but I'm sure you're all thinking give me

611
00:29:12,419 --> 00:29:14,340
what I came here for this is cyber

612
00:29:14,340 --> 00:29:16,400
security and I want to see some hacking

613
00:29:16,400 --> 00:29:18,960
so next I'm going to go through two

614
00:29:18,960 --> 00:29:21,539
different attacks that we did an evil

615
00:29:21,539 --> 00:29:23,700
producer and an evil consumer and then

616
00:29:23,700 --> 00:29:27,440
I'll go through how we struggle to find

617
00:29:27,720 --> 00:29:30,659
so the evil producer now we are all

618
00:29:30,659 --> 00:29:32,580
sending into the same queue it's all

619
00:29:32,580 --> 00:29:34,200
going to the same data Lake and

620
00:29:34,200 --> 00:29:36,000
everyone's just querying from it so I'm

621
00:29:36,000 --> 00:29:37,260
sure all of you who are sitting there

622
00:29:37,260 --> 00:29:39,120
were thinking Jason this is obvious

623
00:29:39,120 --> 00:29:41,640
you're just going to send into your uh

624
00:29:41,640 --> 00:29:45,000
to the other device ID from your manager

625
00:29:45,000 --> 00:29:47,159
from your company that you own you're

626
00:29:47,159 --> 00:29:48,899
going to use those credentials send into

627
00:29:48,899 --> 00:29:52,039
the manager and

628
00:29:52,740 --> 00:29:54,840
it ruined because they're now pulling

629
00:29:54,840 --> 00:29:56,340
all of my data

630
00:29:56,340 --> 00:29:58,200
obviously I can produce tons and tons

631
00:29:58,200 --> 00:30:00,659
and tons of data so I will overshadow

632
00:30:00,659 --> 00:30:02,520
any of the data that's being sent by the

633
00:30:02,520 --> 00:30:04,679
actual device and

634
00:30:04,679 --> 00:30:06,960
in this case

635
00:30:06,960 --> 00:30:08,440
when I did this

636
00:30:08,440 --> 00:30:09,600
[Music]

637
00:30:09,600 --> 00:30:11,460
unfortunately for him had to sit through

638
00:30:11,460 --> 00:30:14,039
this many times on about the fourth or

639
00:30:14,039 --> 00:30:16,320
fifth time he looked at me and he said

640
00:30:16,320 --> 00:30:18,179
Jason how did you do that like how did

641
00:30:18,179 --> 00:30:19,860
you save traffic it I said what do you

642
00:30:19,860 --> 00:30:21,600
mean like I I wrote like a tiny little

643
00:30:21,600 --> 00:30:23,460
python script and Leon was quite angry

644
00:30:23,460 --> 00:30:25,200
with me he said how have you waited this

645
00:30:25,200 --> 00:30:27,000
long to tell me that you actually wrote

646
00:30:27,000 --> 00:30:29,279
something for this now I

647
00:30:29,279 --> 00:30:30,840
did wait that long but that was just

648
00:30:30,840 --> 00:30:32,399
because as you can it's nothing

649
00:30:32,399 --> 00:30:33,539
impressive

650
00:30:33,539 --> 00:30:35,520
but Leon said well you've got to put it

651
00:30:35,520 --> 00:30:38,399
on get for people to look at so it's on

652
00:30:38,399 --> 00:30:39,659
get now

653
00:30:39,659 --> 00:30:41,520
um and because it's on git I had to

654
00:30:41,520 --> 00:30:42,779
delete all of my other crappy

655
00:30:42,779 --> 00:30:45,960
repositories so nobody could see that

656
00:30:45,960 --> 00:30:48,179
um didn't need anybody looking at like

657
00:30:48,179 --> 00:30:50,520
Cuda programming it was dog show up

658
00:30:50,520 --> 00:30:51,779
there

659
00:30:51,779 --> 00:30:55,020
um anyways yeah so a couple things that

660
00:30:55,020 --> 00:30:57,059
you needed in order to interact with

661
00:30:57,059 --> 00:30:58,559
this endpoint so obviously I needed to

662
00:30:58,559 --> 00:31:00,779
create a connection with

663
00:31:00,779 --> 00:31:02,820
I need to create a channel connection

664
00:31:02,820 --> 00:31:05,580
so I needed to know where the host lived

665
00:31:05,580 --> 00:31:07,140
I could get that from the configuration

666
00:31:07,140 --> 00:31:09,960
file and then it was understanding what

667
00:31:09,960 --> 00:31:12,659
virtual hosts there were you know what

668
00:31:12,659 --> 00:31:14,760
other data I needed in order to connect

669
00:31:14,760 --> 00:31:17,220
to it now this was amqps so it was

670
00:31:17,220 --> 00:31:19,200
slightly trickier although all I needed

671
00:31:19,200 --> 00:31:21,299
to do was add context and say I didn't

672
00:31:21,299 --> 00:31:22,860
really care about any certificate you

673
00:31:22,860 --> 00:31:24,299
have so I didn't verify anything just

674
00:31:24,299 --> 00:31:26,480
saying

675
00:31:28,260 --> 00:31:29,880
just sent the information that I needed

676
00:31:29,880 --> 00:31:32,279
was the virtuos that was the tricky one

677
00:31:32,279 --> 00:31:34,799
to to find but because the client was

678
00:31:34,799 --> 00:31:37,799
very nice they gave super verbose

679
00:31:37,799 --> 00:31:39,480
credentials and I was able to actually

680
00:31:39,480 --> 00:31:42,179
interact with the management node

681
00:31:42,179 --> 00:31:44,399
so I could

682
00:31:44,399 --> 00:31:49,140
I could use a radnimq CTL tool that

683
00:31:49,140 --> 00:31:51,179
they've created in order to interact

684
00:31:51,179 --> 00:31:53,700
with the rabbitmq node and from there I

685
00:31:53,700 --> 00:31:55,980
could pull what cues were in use what

686
00:31:55,980 --> 00:31:58,380
exchanges were in use so I was able to

687
00:31:58,380 --> 00:32:01,860
get like the general information that I

688
00:32:01,860 --> 00:32:05,340
from interacting with the rabbit mqctl

689
00:32:05,340 --> 00:32:08,880
tool I then used a pica Library which is

690
00:32:08,880 --> 00:32:12,860
a python Library used in order

691
00:32:15,179 --> 00:32:17,580
published data you can consume data and

692
00:32:17,580 --> 00:32:20,460
you can actually start a server

693
00:32:20,460 --> 00:32:23,760
there so I created a connection and then

694
00:32:23,760 --> 00:32:27,179
it's a very simple tool um command where

695
00:32:27,179 --> 00:32:28,860
you just need to publish the data

696
00:32:28,860 --> 00:32:31,380
knowing a routing key again didn't need

697
00:32:31,380 --> 00:32:33,240
to know that so I just wrote anything

698
00:32:33,240 --> 00:32:36,000
there to the fan art

699
00:32:36,000 --> 00:32:37,919
exchange and then it was pushed on and

700
00:32:37,919 --> 00:32:39,299
then of course

701
00:32:39,299 --> 00:32:41,779
um the important thing being the body

702
00:32:41,779 --> 00:32:45,360
where I'm sending that this refrigerator

703
00:32:45,360 --> 00:32:47,880
is running at 69 degrees so hopefully

704
00:32:47,880 --> 00:32:51,380
they'll hopefully they'll fix that

705
00:32:53,039 --> 00:32:56,039
foreign

706
00:33:03,320 --> 00:33:06,779
okay so the next attack that uh we

707
00:33:06,779 --> 00:33:09,360
looked at was well as I spoke about with

708
00:33:09,360 --> 00:33:11,159
like Woolworths you know who how

709
00:33:11,159 --> 00:33:12,720
restrictive are you being when you say

710
00:33:12,720 --> 00:33:15,960
you can consume all right now in my case

711
00:33:15,960 --> 00:33:18,360
um not was the answer

712
00:33:18,360 --> 00:33:21,840
so I could create my own evil consumer

713
00:33:21,840 --> 00:33:23,640
um which would read traffic off of the

714
00:33:23,640 --> 00:33:25,620
the queue now as as you'll remember the

715
00:33:25,620 --> 00:33:27,000
first consumer is going to read the

716
00:33:27,000 --> 00:33:28,980
first message because they've created

717
00:33:28,980 --> 00:33:31,159
the

718
00:33:33,120 --> 00:33:35,039
I'm the second consumer so the first

719
00:33:35,039 --> 00:33:37,080
message comes in from a company and I

720
00:33:37,080 --> 00:33:39,299
can read the second message off now

721
00:33:39,299 --> 00:33:41,100
that's obviously important for a couple

722
00:33:41,100 --> 00:33:42,840
different facets the first being

723
00:33:42,840 --> 00:33:44,700
customer two never actually receives

724
00:33:44,700 --> 00:33:46,380
their data

725
00:33:46,380 --> 00:33:48,120
so they've like lost their availability

726
00:33:48,120 --> 00:33:51,179
and the second being that I have read

727
00:33:51,179 --> 00:33:53,960
sensitive information

728
00:33:54,960 --> 00:33:56,640
yeah so

729
00:33:56,640 --> 00:33:58,740
one important thing here is obviously

730
00:33:58,740 --> 00:34:01,380
they've now created a single consumer I

731
00:34:01,380 --> 00:34:02,760
can create hundreds

732
00:34:02,760 --> 00:34:04,799
hundreds so if I have 100 consumers they

733
00:34:04,799 --> 00:34:06,960
will read the first message and I will

734
00:34:06,960 --> 00:34:09,000
read message to

735
00:34:09,000 --> 00:34:11,899
and then they will read message

736
00:34:12,119 --> 00:34:13,800
because I have the ability to create as

737
00:34:13,800 --> 00:34:16,080
many as you want I can pretty much make

738
00:34:16,080 --> 00:34:18,780
what they legitimately see

739
00:34:18,780 --> 00:34:21,060
invalid or you know useless because

740
00:34:21,060 --> 00:34:22,619
it'll only receive that every hundreds

741
00:34:22,619 --> 00:34:24,679
Maybe

742
00:34:25,260 --> 00:34:27,899
so again the how

743
00:34:27,899 --> 00:34:28,679
um

744
00:34:28,679 --> 00:34:31,918
again very simple you just create a

745
00:34:31,918 --> 00:34:33,960
connection string and then I needed to

746
00:34:33,960 --> 00:34:36,960
create a loop in order to continuously

747
00:34:36,960 --> 00:34:38,580
consume so it didn't just kill off the

748
00:34:38,580 --> 00:34:40,020
after the first

749
00:34:40,020 --> 00:34:44,000
read and then it's just a basic

750
00:34:44,040 --> 00:34:46,859
to consume so I needed to identify in

751
00:34:46,859 --> 00:34:48,359
this case where the queue was not

752
00:34:48,359 --> 00:34:50,159
necessarily the exchange so I used

753
00:34:50,159 --> 00:34:53,219
rabbitmq to view

754
00:34:53,219 --> 00:34:57,259
from so I could read where they consumer

755
00:35:03,960 --> 00:35:05,760
so those are the attacks and now I want

756
00:35:05,760 --> 00:35:07,560
to have a look at

757
00:35:07,560 --> 00:35:10,380
potential Solutions and what

758
00:35:10,380 --> 00:35:12,000
struggles we went through to why they

759
00:35:12,000 --> 00:35:13,740
wouldn't so the first thing we thought

760
00:35:13,740 --> 00:35:15,960
was well you don't you don't have a

761
00:35:15,960 --> 00:35:18,420
virtual host well let's let's separate

762
00:35:18,420 --> 00:35:20,280
each client each company into their own

763
00:35:20,280 --> 00:35:21,480
host

764
00:35:21,480 --> 00:35:24,900
the data will go to different places

765
00:35:24,900 --> 00:35:26,700
you know I can't send to your virtual

766
00:35:26,700 --> 00:35:29,700
host and then you know it'll go

767
00:35:29,700 --> 00:35:33,119
up one thing I forgot to mention

768
00:35:33,119 --> 00:35:35,400
I'll tell you so he has a little story

769
00:35:35,400 --> 00:35:38,220
when a while back I took my friend out

770
00:35:38,220 --> 00:35:41,359
to a fancy restaurant

771
00:35:42,359 --> 00:35:45,480
they they only served one like you

772
00:35:45,480 --> 00:35:46,619
weren't allowed to pick your meal you

773
00:35:46,619 --> 00:35:48,599
have to eat what they were eating and it

774
00:35:48,599 --> 00:35:50,579
was like it was Squid Ink with like some

775
00:35:50,579 --> 00:35:52,680
puffed popcorn I didn't really

776
00:35:52,680 --> 00:35:56,099
understand it and I Can Only Imagine

777
00:35:56,099 --> 00:35:58,380
can only imagine that two ships came in

778
00:35:58,380 --> 00:36:00,960
that day and one was like I am making

779
00:36:00,960 --> 00:36:02,940
squid and goo and the other Chef was

780
00:36:02,940 --> 00:36:04,980
like I'm making popcorn so they were

781
00:36:04,980 --> 00:36:06,720
like well we're serving squid ink and

782
00:36:06,720 --> 00:36:08,160
popcorn

783
00:36:08,160 --> 00:36:09,180
um

784
00:36:09,180 --> 00:36:12,359
in when you have many cooks you know

785
00:36:12,359 --> 00:36:14,579
everyone's got their own opinion

786
00:36:14,579 --> 00:36:16,560
and everybody says this is the way I'm

787
00:36:16,560 --> 00:36:18,359
doing something so

788
00:36:18,359 --> 00:36:21,480
the person in this case who created the

789
00:36:21,480 --> 00:36:24,420
squid ink part said this is not going to

790
00:36:24,420 --> 00:36:26,579
work a virtual host will not work

791
00:36:26,579 --> 00:36:30,260
because I'm using mqt

792
00:36:30,540 --> 00:36:32,160
no virtual Hearts this is something we

793
00:36:32,160 --> 00:36:34,800
learned in the Google search differences

794
00:36:34,800 --> 00:36:36,540
between mq

795
00:36:36,540 --> 00:36:37,619
mq2q

796
00:36:37,619 --> 00:36:40,020
so they said there's no way that we can

797
00:36:40,020 --> 00:36:42,480
work with this because virtual hose

798
00:36:42,480 --> 00:36:44,880
won't work so I tried to assure them all

799
00:36:44,880 --> 00:36:47,700
rabbitmq uses at least the root virtual

800
00:36:47,700 --> 00:36:49,800
host so you are you just don't want to

801
00:36:49,800 --> 00:36:51,780
separate it more and they said no no we

802
00:36:51,780 --> 00:36:52,800
know what we're talking about and I've

803
00:36:52,800 --> 00:36:54,240
only done this for a week at this point

804
00:36:54,240 --> 00:36:55,260
so I'm like all right well you know

805
00:36:55,260 --> 00:36:56,940
which one

806
00:36:56,940 --> 00:36:58,859
um but technically this wouldn't have

807
00:36:58,859 --> 00:37:01,380
worked anyway and the reason for that is

808
00:37:01,380 --> 00:37:04,500
it actually doesn't matter if I say if I

809
00:37:04,500 --> 00:37:05,820
can't send into their virtual host

810
00:37:05,820 --> 00:37:07,440
because we're all going into the same

811
00:37:07,440 --> 00:37:08,579
data link

812
00:37:08,579 --> 00:37:10,980
so if I send my traffic with the

813
00:37:10,980 --> 00:37:13,200
incorrect device ID to my virtual Host

814
00:37:13,200 --> 00:37:15,119
this gets consumed by the global

815
00:37:15,119 --> 00:37:16,800
consumer and pushed to the global data

816
00:37:16,800 --> 00:37:19,800
Lake then customer one is still going to

817
00:37:19,800 --> 00:37:20,940
read or 4

818
00:37:20,940 --> 00:37:22,140
of information so it doesn't actually

819
00:37:22,140 --> 00:37:24,480
matter

820
00:37:24,480 --> 00:37:26,460
so the second thing we thought of was

821
00:37:26,460 --> 00:37:28,020
well let's not

822
00:37:28,020 --> 00:37:30,240
let's not say that the attack is

823
00:37:30,240 --> 00:37:31,680
impossible but let's like reduce the

824
00:37:31,680 --> 00:37:33,900
likelihood significantly so we'll we'll

825
00:37:33,900 --> 00:37:36,540
move it away from device IDs and we'll

826
00:37:36,540 --> 00:37:38,940
put really hard to guess Goods

827
00:37:38,940 --> 00:37:40,260
now

828
00:37:40,260 --> 00:37:42,180
the person who was in charge of the

829
00:37:42,180 --> 00:37:43,380
popcorn

830
00:37:43,380 --> 00:37:46,380
said to me well we've already agreed to

831
00:37:46,380 --> 00:37:48,560
device IDs and I am not going to touch

832
00:37:48,560 --> 00:37:51,240
Goods that's that's too much extra work

833
00:37:51,240 --> 00:37:54,839
sign up SLA nah that's not gonna it's

834
00:37:54,839 --> 00:37:57,000
not gonna Not Gonna Fly with us so I

835
00:37:57,000 --> 00:37:59,160
said all right cool but technically this

836
00:37:59,160 --> 00:38:01,260
wouldn't have worked anyway and the

837
00:38:01,260 --> 00:38:03,180
reason for that is because we have the

838
00:38:03,180 --> 00:38:05,339
evil consumer so I have created a

839
00:38:05,339 --> 00:38:08,660
consumer I can read awfully

840
00:38:09,540 --> 00:38:11,180
feel the sensitive of information

841
00:38:11,180 --> 00:38:13,800
regarding that good and then of course

842
00:38:13,800 --> 00:38:17,700
once I have see once I have the good or

843
00:38:17,700 --> 00:38:19,260
I have that sense of information I can

844
00:38:19,260 --> 00:38:21,359
then send traffic into the queue and the

845
00:38:21,359 --> 00:38:23,420
case

846
00:38:25,980 --> 00:38:28,200
so so what do we actually do like how do

847
00:38:28,200 --> 00:38:30,720
we how do we solve this so personally my

848
00:38:30,720 --> 00:38:31,920
first thought

849
00:38:31,920 --> 00:38:33,839
um you know I kind of still feel like is

850
00:38:33,839 --> 00:38:35,760
the problem is we have this global data

851
00:38:35,760 --> 00:38:37,560
Lake right we're just dumping everything

852
00:38:37,560 --> 00:38:39,480
into the same place and was that using

853
00:38:39,480 --> 00:38:43,520
the customer portal to like query it

854
00:38:43,619 --> 00:38:45,599
the custom floor has no way of verifying

855
00:38:45,599 --> 00:38:48,119
what data is valid and what data

856
00:38:48,119 --> 00:38:51,359
is it their sole job is hey is this give

857
00:38:51,359 --> 00:38:53,940
me everything for my device ID

858
00:38:53,940 --> 00:38:55,200
um

859
00:38:55,200 --> 00:38:57,480
but you know that's is that's not a

860
00:38:57,480 --> 00:38:59,040
solution we can't just say it answer the

861
00:38:59,040 --> 00:39:01,140
problem so what do we do we need to we

862
00:39:01,140 --> 00:39:03,780
need to actually try and help our client

863
00:39:03,780 --> 00:39:05,940
right so

864
00:39:05,940 --> 00:39:08,099
can't just say well put virtual hosts in

865
00:39:08,099 --> 00:39:09,420
because they can't do that we can't just

866
00:39:09,420 --> 00:39:11,280
say well do Goods because you know they

867
00:39:11,280 --> 00:39:12,540
can't do that so we need to come up with

868
00:39:12,540 --> 00:39:15,800
a solution where they can actually

869
00:39:17,460 --> 00:39:19,619
the final thing we thought of was all

870
00:39:19,619 --> 00:39:21,599
right well let's set the data that goes

871
00:39:21,599 --> 00:39:23,520
into the manager and we'll sign that

872
00:39:23,520 --> 00:39:25,280
data at the manager level

873
00:39:25,280 --> 00:39:28,619
the consumer can decode that message and

874
00:39:28,619 --> 00:39:30,359
then re

875
00:39:30,359 --> 00:39:32,160
manager has sent something with device

876
00:39:32,160 --> 00:39:36,800
id1 and they are sorry device id2

877
00:39:36,800 --> 00:39:39,420
then it will go into the data Lake if

878
00:39:39,420 --> 00:39:40,859
however they send something for device

879
00:39:40,859 --> 00:39:42,180
ID

880
00:39:42,180 --> 00:39:44,880
three they need to log that drop it and

881
00:39:44,880 --> 00:39:47,040
report and say hey why are you sending

882
00:39:47,040 --> 00:39:49,560
traffic in for the wrong device ID

883
00:39:49,560 --> 00:39:52,140
only valid messages should actually ever

884
00:39:52,140 --> 00:39:53,940
get to the data Lake

885
00:39:53,940 --> 00:39:56,400
the next thing we obviously recommended

886
00:39:56,400 --> 00:39:58,619
well not obviously is you know you

887
00:39:58,619 --> 00:40:00,660
shouldn't let everyone consume so they

888
00:40:00,660 --> 00:40:02,520
said no well we need to consume in order

889
00:40:02,520 --> 00:40:04,619
to

890
00:40:04,619 --> 00:40:06,599
traffic back from the

891
00:40:06,599 --> 00:40:09,000
cut advice we need to

892
00:40:09,000 --> 00:40:11,339
so the best way we could say do that is

893
00:40:11,339 --> 00:40:12,839
you can only consume off of a very

894
00:40:12,839 --> 00:40:14,880
specific virtual host so in this case

895
00:40:14,880 --> 00:40:16,800
you should have a virtual host at least

896
00:40:16,800 --> 00:40:18,420
one going forward and one going

897
00:40:18,420 --> 00:40:20,960
backwards and you

898
00:40:21,780 --> 00:40:24,560
so that this

899
00:40:27,720 --> 00:40:31,140
yeah so in conclusion you know

900
00:40:31,140 --> 00:40:32,700
at the beginning of this talk I said

901
00:40:32,700 --> 00:40:35,099
well I

902
00:40:35,099 --> 00:40:36,900
that is the way I felt in the beginning

903
00:40:36,900 --> 00:40:38,099
but

904
00:40:38,099 --> 00:40:40,980
had Simon read the scope properly he

905
00:40:40,980 --> 00:40:42,300
said he never would have actually put me

906
00:40:42,300 --> 00:40:43,740
on this assessment so I wouldn't have

907
00:40:43,740 --> 00:40:45,720
had the fun the learning opportunities

908
00:40:45,720 --> 00:40:49,140
that I did I did so instead of freaking

909
00:40:49,140 --> 00:40:51,359
out running around like a headless

910
00:40:51,359 --> 00:40:54,240
chicken and swearing in Simon a lot you

911
00:40:54,240 --> 00:40:56,040
know take a step back

912
00:40:56,040 --> 00:40:57,599
we'll figure it out and

913
00:40:57,599 --> 00:40:59,579
it's a lot more enjoyable than doing a

914
00:40:59,579 --> 00:41:01,940
normal web app

915
00:41:04,380 --> 00:41:07,800
yeah so we have iot in our lives to make

916
00:41:07,800 --> 00:41:09,839
ourselves easier you know make our

917
00:41:09,839 --> 00:41:11,820
environments

918
00:41:11,820 --> 00:41:15,660
and more more maintainable smarter but

919
00:41:15,660 --> 00:41:17,160
when you put things in correct together

920
00:41:17,160 --> 00:41:20,040
incorrectly it can be a bit of a mess

921
00:41:20,040 --> 00:41:22,920
and lastly you know third parties can

922
00:41:22,920 --> 00:41:25,020
distribute the workload

923
00:41:25,020 --> 00:41:27,839
when you have too many cooks in the

924
00:41:27,839 --> 00:41:30,599
kitchen you're bound to end up with some

925
00:41:30,599 --> 00:41:34,980
weird squid and goo and popcorn

926
00:41:34,980 --> 00:41:37,740
yeah uh lastly I just want to say some

927
00:41:37,740 --> 00:41:39,660
thanks to some of my colleagues who

928
00:41:39,660 --> 00:41:42,480
helped me both on the assessment

929
00:41:42,480 --> 00:41:43,200
um

930
00:41:43,200 --> 00:41:45,480
Simon for messing up the scope

931
00:41:45,480 --> 00:41:47,640
Leon for helping me with this talk

932
00:41:47,640 --> 00:41:49,859
um orange and then besides and you guys

933
00:41:49,859 --> 00:41:51,060
for

934
00:41:51,060 --> 00:41:52,800
throughout the thing

935
00:41:52,800 --> 00:41:55,079
um I I really hope you did enjoy some of

936
00:41:55,079 --> 00:41:58,640
it or all of it um

937
00:42:00,660 --> 00:42:02,700
yeah or message me on

938
00:42:02,700 --> 00:42:04,020
Twitter

939
00:42:04,020 --> 00:42:06,920
the breaker of science

940
00:43:32,040 --> 00:43:34,880
sorry I don't know

941
00:43:36,180 --> 00:43:38,160
drag me from

942
00:43:38,160 --> 00:43:39,960
essentially

943
00:43:39,960 --> 00:43:42,839
if we are you know seeing data that's

944
00:43:42,839 --> 00:43:45,599
out of sync should we not delete that at

945
00:43:45,599 --> 00:43:48,319
the customer portal

946
00:43:48,359 --> 00:43:51,780
you're on the way to the customer portal

947
00:43:51,780 --> 00:43:55,460
the fridge should only be running at 25

948
00:43:57,839 --> 00:43:59,700
. yeah you look at data trains if

949
00:43:59,700 --> 00:44:02,419
something's way over

950
00:44:11,700 --> 00:44:14,760
with invalid data

951
00:44:14,760 --> 00:44:16,560
hopeful that if you were to implement

952
00:44:16,560 --> 00:44:18,420
something like that as an attacker I

953
00:44:18,420 --> 00:44:21,260
would hope that I am

954
00:44:24,960 --> 00:44:26,819
but I do think that that's a very valid

955
00:44:26,819 --> 00:44:27,900
approach and something that you should

956
00:44:27,900 --> 00:44:30,319
add on

957
00:44:32,400 --> 00:44:35,220
something that you should analyze

958
00:44:35,220 --> 00:44:37,859
um is that data at at various points

959
00:44:37,859 --> 00:44:40,500
like at the consumer level if if we are

960
00:44:40,500 --> 00:44:42,540
seeing something invalid that's why you

961
00:44:42,540 --> 00:44:44,839
know we look

962
00:44:45,180 --> 00:44:47,720
at is coming

963
00:45:08,579 --> 00:45:10,740
yeah I think I think that's a very valid

964
00:45:10,740 --> 00:45:12,780
way of approaching it I just think that

965
00:45:12,780 --> 00:45:14,099
there's security and depth means you

966
00:45:14,099 --> 00:45:17,540
need to also account for the fact

967
00:45:53,220 --> 00:45:55,640
thank you

968
00:46:54,480 --> 00:46:57,140
all right folks we got a 15 minute break

969
00:46:57,140 --> 00:46:59,819
at quarter past three we're gonna have

970
00:46:59,819 --> 00:47:02,099
dial track one we're gonna have Nintendo

971
00:47:02,099 --> 00:47:05,700
Here track two there is also sorry guys

972
00:47:05,700 --> 00:47:08,280
there's also a workshop on osit

973
00:47:08,280 --> 00:47:10,920
happening right here in the registration

974
00:47:10,920 --> 00:47:13,220
area

975
00:47:15,480 --> 00:47:20,040
now we have the lunch as well yeah

976
00:59:04,859 --> 00:59:07,460
cool

977
00:59:13,319 --> 00:59:15,980
huh

978
00:59:25,799 --> 00:59:27,900
testing testing yeah that's good that's

979
00:59:27,900 --> 00:59:31,500
good yeah I think so

980
00:59:31,500 --> 00:59:33,599
morning everyone it is still morning

981
00:59:33,599 --> 00:59:34,559
yeah

982
00:59:34,559 --> 00:59:38,099
all right so uh names in tando I'm about

983
00:59:38,099 --> 00:59:39,720
to have a you know do a talk on cloud

984
00:59:39,720 --> 00:59:42,119
security securing a core banking system

985
00:59:42,119 --> 00:59:45,180
in AWS

986
00:59:45,180 --> 00:59:46,980
I don't know if I should kick it off or

987
00:59:46,980 --> 00:59:49,500
let people settle in or but I'm gonna

988
00:59:49,500 --> 00:59:52,140
start it off actually

989
00:59:52,140 --> 00:59:54,980
ball rolling

990
00:59:56,160 --> 00:59:59,760
all right so like any other talk the

991
00:59:59,760 --> 01:00:02,520
best place to start is just two

992
01:00:02,520 --> 01:00:04,920
give you a little bit about me

993
01:00:04,920 --> 01:00:07,260
and um yeah so

994
01:00:07,260 --> 01:00:10,079
comsite graduate who's uh

995
01:00:10,079 --> 01:00:12,359
pretty much just a family guy you know a

996
01:00:12,359 --> 01:00:14,099
wife and a kid actually I got married

997
01:00:14,099 --> 01:00:16,260
last week so yeah

998
01:00:16,260 --> 01:00:18,240
um

999
01:00:18,240 --> 01:00:21,979
I'm Shackled down now

1000
01:00:22,200 --> 01:00:24,960
um yeah chess enthusiasts I actually

1001
01:00:24,960 --> 01:00:26,880
participated in the world's first

1002
01:00:26,880 --> 01:00:28,859
chess.com World Championship

1003
01:00:28,859 --> 01:00:30,660
and I sucked

1004
01:00:30,660 --> 01:00:32,579
I I didn't make it past the open

1005
01:00:32,579 --> 01:00:34,380
qualifiers but I will try again next

1006
01:00:34,380 --> 01:00:36,000
year

1007
01:00:36,000 --> 01:00:37,020
um

1008
01:00:37,020 --> 01:00:38,760
before I move on from chess actually

1009
01:00:38,760 --> 01:00:40,980
this year was a good year for chance you

1010
01:00:40,980 --> 01:00:42,660
know as I said

1011
01:00:42,660 --> 01:00:46,079
chess.com open World Championships but

1012
01:00:46,079 --> 01:00:47,940
also

1013
01:00:47,940 --> 01:00:49,799
Magnus causing them the whole butt plug

1014
01:00:49,799 --> 01:00:51,059
thing

1015
01:00:51,059 --> 01:00:53,040
no you guys you guys know nothing about

1016
01:00:53,040 --> 01:00:54,960
it

1017
01:00:54,960 --> 01:00:56,700
yeah for anybody who doesn't know

1018
01:00:56,700 --> 01:01:00,740
anything about it just have a chuckle

1019
01:01:01,079 --> 01:01:04,020
yeah so I spend most of my days

1020
01:01:04,020 --> 01:01:05,940
um you know Jason the gentleman who did

1021
01:01:05,940 --> 01:01:08,160
the previous talk I think Mr Spencer

1022
01:01:08,160 --> 01:01:10,380
he spends most of his days breaking in I

1023
01:01:10,380 --> 01:01:12,839
spend most of my days keeping him up

1024
01:01:12,839 --> 01:01:14,720
um so I'm on the blue side of things

1025
01:01:14,720 --> 01:01:17,040
and yeah another interesting thing about

1026
01:01:17,040 --> 01:01:19,079
me I'm an open source evangelist so if

1027
01:01:19,079 --> 01:01:20,280
you give me

1028
01:01:20,280 --> 01:01:22,920
proprietary software side by side with

1029
01:01:22,920 --> 01:01:24,599
open source software I'll almost always

1030
01:01:24,599 --> 01:01:26,880
choose the open source

1031
01:01:26,880 --> 01:01:28,579
so yeah human me

1032
01:01:28,579 --> 01:01:31,140
I just want to get to know a little bit

1033
01:01:31,140 --> 01:01:33,960
about the crowd the audience please do

1034
01:01:33,960 --> 01:01:36,540
humor me and participate in this

1035
01:01:36,540 --> 01:01:41,040
um hands up if you regularly work inside

1036
01:01:41,040 --> 01:01:43,740
or work in AWS

1037
01:01:43,740 --> 01:01:45,299
okay keep your hands up don't take them

1038
01:01:45,299 --> 01:01:48,180
down hands up or keep your hands up and

1039
01:01:48,180 --> 01:01:50,520
take your hands down keep them up if you

1040
01:01:50,520 --> 01:01:52,799
use kubernetes regularly

1041
01:01:52,799 --> 01:01:56,280
nice keep your hands up still if you've

1042
01:01:56,280 --> 01:01:58,079
deployed a core banking system in

1043
01:01:58,079 --> 01:02:00,440
kubernetes

1044
01:02:00,839 --> 01:02:03,619
I like that

1045
01:02:04,319 --> 01:02:07,099
I like that

1046
01:02:07,920 --> 01:02:09,480
that's pretty cool it's actually quite

1047
01:02:09,480 --> 01:02:10,740
crazy

1048
01:02:10,740 --> 01:02:12,960
um were you at hexcom

1049
01:02:12,960 --> 01:02:16,319
not it's uh it's always one guy in the

1050
01:02:16,319 --> 01:02:18,599
audience but

1051
01:02:18,599 --> 01:02:20,040
questions

1052
01:02:20,040 --> 01:02:21,540
Okay so

1053
01:02:21,540 --> 01:02:23,280
about the talk

1054
01:02:23,280 --> 01:02:25,020
yeah we're we're going to be just

1055
01:02:25,020 --> 01:02:26,400
discussing you know like I said

1056
01:02:26,400 --> 01:02:27,540
initially

1057
01:02:27,540 --> 01:02:28,980
um the security of the cloud which I

1058
01:02:28,980 --> 01:02:31,619
think is a very important topic and uh

1059
01:02:31,619 --> 01:02:34,140
just to set the problem statement

1060
01:02:34,140 --> 01:02:38,040
I've got two slides that'll kind of show

1061
01:02:38,040 --> 01:02:40,140
how important this is and why we need to

1062
01:02:40,140 --> 01:02:42,540
take this seriously the first slide I'm

1063
01:02:42,540 --> 01:02:43,740
not going to go through all those points

1064
01:02:43,740 --> 01:02:45,900
you can read them for yourselves the

1065
01:02:45,900 --> 01:02:47,940
first slide just shows that 10 of the

1066
01:02:47,940 --> 01:02:50,640
world's I.T infrastructure has migrated

1067
01:02:50,640 --> 01:02:53,640
to the cloud now that's not such a big

1068
01:02:53,640 --> 01:02:55,440
number right

1069
01:02:55,440 --> 01:02:58,559
10 percent who cares you know

1070
01:02:58,559 --> 01:03:02,220
but juxtapose that with this next slide

1071
01:03:02,220 --> 01:03:04,260
which says Cloud security breaches have

1072
01:03:04,260 --> 01:03:06,180
surpassed on-prem breaches for the first

1073
01:03:06,180 --> 01:03:09,599
time research done by Verizon 2021 tail

1074
01:03:09,599 --> 01:03:13,319
end of 2021 how is it that 10 of the

1075
01:03:13,319 --> 01:03:15,540
world's infrastructure is being breached

1076
01:03:15,540 --> 01:03:18,660
more than the other 90

1077
01:03:18,660 --> 01:03:20,700
. that's a big those are two big facts

1078
01:03:20,700 --> 01:03:23,700
there so so for people like me you the

1079
01:03:23,700 --> 01:03:25,859
blue teamers even the red teams I'm not

1080
01:03:25,859 --> 01:03:27,299
gonna I'm not gonna take anything away

1081
01:03:27,299 --> 01:03:29,099
from the importance of what you do we

1082
01:03:29,099 --> 01:03:31,859
need to take this seriously you know

1083
01:03:31,859 --> 01:03:33,359
um because you don't want to be another

1084
01:03:33,359 --> 01:03:34,500
Facebook you don't want to be another

1085
01:03:34,500 --> 01:03:36,839
LinkedIn you know you hear it all the

1086
01:03:36,839 --> 01:03:38,400
time another one got hacked today blah

1087
01:03:38,400 --> 01:03:41,099
blah blah but it's up to us

1088
01:03:41,099 --> 01:03:43,079
keep that from happening and hence

1089
01:03:43,079 --> 01:03:45,299
topics like this just to spread their

1090
01:03:45,299 --> 01:03:47,040
awareness spread the knowledge

1091
01:03:47,040 --> 01:03:50,180
all right so that's that

1092
01:03:50,339 --> 01:03:51,960
let's jump into this

1093
01:03:51,960 --> 01:03:53,640
AWS

1094
01:03:53,640 --> 01:03:56,640
humble Origins I think way back when

1095
01:03:56,640 --> 01:03:59,400
started off as just a collection of you

1096
01:03:59,400 --> 01:04:01,680
know simple storage service which is

1097
01:04:01,680 --> 01:04:04,200
still currently it's Flagship ec2 the

1098
01:04:04,200 --> 01:04:06,420
compute service

1099
01:04:06,420 --> 01:04:08,819
um and that's still today

1100
01:04:08,819 --> 01:04:11,700
those two Services comprise most of what

1101
01:04:11,700 --> 01:04:14,339
we use AWS for

1102
01:04:14,339 --> 01:04:16,319
um but yeah I'm not going to talk too

1103
01:04:16,319 --> 01:04:19,020
much on AWS for now I want to Pivot away

1104
01:04:19,020 --> 01:04:22,260
and just kind of discuss

1105
01:04:22,260 --> 01:04:25,579
the core banking system for another

1106
01:04:26,220 --> 01:04:27,420
on the left

1107
01:04:27,420 --> 01:04:29,760
we have a gentleman that I you know I

1108
01:04:29,760 --> 01:04:31,619
look up to this guy

1109
01:04:31,619 --> 01:04:35,160
at Dr Mohammed yunus he is a Noble Peace

1110
01:04:35,160 --> 01:04:37,380
prizing holding gentleman highly

1111
01:04:37,380 --> 01:04:39,960
esteemed gentleman for those of you who

1112
01:04:39,960 --> 01:04:41,700
know in the audience he's also known as

1113
01:04:41,700 --> 01:04:43,920
the father of micro Finance or micro

1114
01:04:43,920 --> 01:04:45,960
credit

1115
01:04:45,960 --> 01:04:47,760
um so just to quickly Sprint through

1116
01:04:47,760 --> 01:04:50,220
like what he's done here and just the

1117
01:04:50,220 --> 01:04:52,500
origins of of finraxi and finnure Cloud

1118
01:04:52,500 --> 01:04:54,000
native

1119
01:04:54,000 --> 01:04:56,520
um the gentleman started a Grameen Bank

1120
01:04:56,520 --> 01:05:00,119
uh and then went on to start the Grameen

1121
01:05:00,119 --> 01:05:02,160
foundation in addition to other Grameen

1122
01:05:02,160 --> 01:05:05,940
you know subsidiaries green and and and

1123
01:05:05,940 --> 01:05:09,000
During the period of around 2004 and

1124
01:05:09,000 --> 01:05:13,559
2007 and before I before I go on what I

1125
01:05:13,559 --> 01:05:16,020
love about green bank and what speaks to

1126
01:05:16,020 --> 01:05:18,599
me on this slide is the fact that you

1127
01:05:18,599 --> 01:05:21,480
know look at the title it says bank for

1128
01:05:21,480 --> 01:05:24,059
the poor and that speaks to financial

1129
01:05:24,059 --> 01:05:25,799
inclusivity being on the African

1130
01:05:25,799 --> 01:05:27,839
continent that really touches a chord in

1131
01:05:27,839 --> 01:05:31,200
my heart you know so so the origins of

1132
01:05:31,200 --> 01:05:33,299
phenorexia and so to speak kind of seep

1133
01:05:33,299 --> 01:05:34,440
through

1134
01:05:34,440 --> 01:05:36,599
um you know uh the the code speaks to

1135
01:05:36,599 --> 01:05:38,640
this this motto this Vision this mission

1136
01:05:38,640 --> 01:05:41,058
statement

1137
01:05:42,059 --> 01:05:44,660
so yeah

1138
01:05:45,200 --> 01:05:49,619
2004 and 2007 there was like a burst in

1139
01:05:49,619 --> 01:05:51,780
in in commercial activity in the back it

1140
01:05:51,780 --> 01:05:53,400
grew quite substantially

1141
01:05:53,400 --> 01:05:55,140
and during that period they began

1142
01:05:55,140 --> 01:05:57,480
working on finnurex CN Under the

1143
01:05:57,480 --> 01:05:59,339
Umbrella of myfos x

1144
01:05:59,339 --> 01:06:02,940
that got handed Over The myfos X Project

1145
01:06:02,940 --> 01:06:05,040
got handed over to the green Foundation

1146
01:06:05,040 --> 01:06:07,319
under the myfos initiative

1147
01:06:07,319 --> 01:06:10,619
which then handed the project over under

1148
01:06:10,619 --> 01:06:14,640
the fineract uh incubator program in

1149
01:06:14,640 --> 01:06:18,540
2011 it then subsequently graduated as a

1150
01:06:18,540 --> 01:06:21,359
top level program in 2017. now that's a

1151
01:06:21,359 --> 01:06:24,119
major knot of approval from Apache just

1152
01:06:24,119 --> 01:06:26,819
charity of the software and and then

1153
01:06:26,819 --> 01:06:29,339
somewhere in the mix there finnurexcn

1154
01:06:29,339 --> 01:06:32,220
came out fineract mifos X is a monolith

1155
01:06:32,220 --> 01:06:33,780
then they broke that down into

1156
01:06:33,780 --> 01:06:36,180
microservices in order to make a cloud

1157
01:06:36,180 --> 01:06:38,039
radio and Cloud native

1158
01:06:38,039 --> 01:06:40,380
all right so let's speak a little bit

1159
01:06:40,380 --> 01:06:42,380
more about

1160
01:06:42,380 --> 01:06:44,940
these uh microservices the building

1161
01:06:44,940 --> 01:06:47,160
blocks of this core banking system

1162
01:06:47,160 --> 01:06:49,319
so if you have a look there what we have

1163
01:06:49,319 --> 01:06:51,660
is

1164
01:06:51,660 --> 01:06:55,680
a set of services at the bottom under uh

1165
01:06:55,680 --> 01:06:57,359
so you have you know member

1166
01:06:57,359 --> 01:06:59,640
Administration which and then you have

1167
01:06:59,640 --> 01:07:02,059
membership notifications verify ID

1168
01:07:02,059 --> 01:07:04,619
fineract services including Office

1169
01:07:04,619 --> 01:07:07,680
provisioner Accounting deposit uh and

1170
01:07:07,680 --> 01:07:09,480
and customer one of the more important

1171
01:07:09,480 --> 01:07:12,599
microservices in this diagram is the

1172
01:07:12,599 --> 01:07:15,059
identity microservice which is the

1173
01:07:15,059 --> 01:07:17,339
authentication server for finrax CN

1174
01:07:17,339 --> 01:07:19,140
which is underpinned by a system called

1175
01:07:19,140 --> 01:07:20,579
Anubis

1176
01:07:20,579 --> 01:07:22,980
but as you can see very simple diagram

1177
01:07:22,980 --> 01:07:25,260
coming in from the left from the front

1178
01:07:25,260 --> 01:07:27,720
end hitting the Gateway and then going

1179
01:07:27,720 --> 01:07:29,579
through to the microservices where

1180
01:07:29,579 --> 01:07:31,980
finally information is stored in the

1181
01:07:31,980 --> 01:07:34,400
data store

1182
01:07:34,859 --> 01:07:37,020
another picture describing the same

1183
01:07:37,020 --> 01:07:39,720
thing but differently we have all the

1184
01:07:39,720 --> 01:07:41,760
micro services

1185
01:07:41,760 --> 01:07:45,720
and and your nosql and SQL Cassandra and

1186
01:07:45,720 --> 01:07:48,119
postgres respectively storing all the

1187
01:07:48,119 --> 01:07:50,539
data

1188
01:07:50,940 --> 01:07:55,079
all right so just as an FYI to those who

1189
01:07:55,079 --> 01:07:57,119
actually want to go and check the

1190
01:07:57,119 --> 01:07:59,940
software out the software is quite I

1191
01:07:59,940 --> 01:08:02,339
wouldn't say limited but it it does what

1192
01:08:02,339 --> 01:08:04,440
it's supposed to do but if you have to

1193
01:08:04,440 --> 01:08:06,359
bring the software into your own context

1194
01:08:06,359 --> 01:08:08,579
you know you have to build upon it and

1195
01:08:08,579 --> 01:08:10,440
expand upon it and this is kind of a

1196
01:08:10,440 --> 01:08:13,440
slide that speaks to that where you had

1197
01:08:13,440 --> 01:08:16,080
additional micro services that worked in

1198
01:08:16,080 --> 01:08:18,479
tandem with that set of core banking

1199
01:08:18,479 --> 01:08:21,238
systems in order to expand upon for the

1200
01:08:21,238 --> 01:08:23,359
context in which that software runs

1201
01:08:23,359 --> 01:08:25,920
member Administration notifications and

1202
01:08:25,920 --> 01:08:27,899
verify ID for those of you who don't

1203
01:08:27,899 --> 01:08:30,238
know verify ID

1204
01:08:30,238 --> 01:08:32,520
it's a real-time interface into the

1205
01:08:32,520 --> 01:08:35,040
natural person's registry which is just

1206
01:08:35,040 --> 01:08:37,620
home Affairs allowing you to verify in

1207
01:08:37,620 --> 01:08:40,020
real time you know whether someone is

1208
01:08:40,020 --> 01:08:41,520
who they say they are and that's for the

1209
01:08:41,520 --> 01:08:43,560
you know kyc process for those of you

1210
01:08:43,560 --> 01:08:45,299
who are in banking

1211
01:08:45,299 --> 01:08:47,839
all right

1212
01:08:50,399 --> 01:08:52,140
Okay so

1213
01:08:52,140 --> 01:08:54,179
I don't want to belabor too much the

1214
01:08:54,179 --> 01:08:57,719
point on on finrax the end so we'll move

1215
01:08:57,719 --> 01:09:00,960
on from there and begin jumping into you

1216
01:09:00,960 --> 01:09:03,380
know more of the uh architectural level

1217
01:09:03,380 --> 01:09:06,960
discussion kind of dissecting

1218
01:09:06,960 --> 01:09:10,738
um the system in a greater context

1219
01:09:10,738 --> 01:09:11,339
um

1220
01:09:11,339 --> 01:09:14,219
no Cloud talk is complete without a

1221
01:09:14,219 --> 01:09:15,779
short description of the shared

1222
01:09:15,779 --> 01:09:18,238
responsibility model and the catchphrase

1223
01:09:18,238 --> 01:09:21,359
goes AWS or your cloud service provider

1224
01:09:21,359 --> 01:09:23,939
is responsible for security of the cloud

1225
01:09:23,939 --> 01:09:27,120
and we as analysts and Engineers are

1226
01:09:27,120 --> 01:09:29,120
responsible for security in the cloud

1227
01:09:29,120 --> 01:09:31,319
this this

1228
01:09:31,319 --> 01:09:33,719
you know concept comes in later on when

1229
01:09:33,719 --> 01:09:36,179
we're kind of unpacking the kubernetes

1230
01:09:36,179 --> 01:09:38,520
side of things as well but it permeates

1231
01:09:38,520 --> 01:09:40,259
almost every aspect of your interaction

1232
01:09:40,259 --> 01:09:42,979
with AWS

1233
01:09:44,698 --> 01:09:46,319
so over here

1234
01:09:46,319 --> 01:09:49,020
we have that in a more you know uh

1235
01:09:49,020 --> 01:09:51,359
tangible View at the bottom you've got

1236
01:09:51,359 --> 01:09:53,819
your you know AWS Services your regions

1237
01:09:53,819 --> 01:09:56,280
your azs your availability zones your

1238
01:09:56,280 --> 01:09:58,080
compute and Storage

1239
01:09:58,080 --> 01:10:01,199
you know S3 EBS Etc and your networking

1240
01:10:01,199 --> 01:10:02,940
vpcs

1241
01:10:02,940 --> 01:10:05,940
etc etc which allow whatever workflows

1242
01:10:05,940 --> 01:10:07,920
you're putting on AWS to achieve your

1243
01:10:07,920 --> 01:10:10,260
business objectives and then at the top

1244
01:10:10,260 --> 01:10:13,020
that's where we're responsible for

1245
01:10:13,020 --> 01:10:15,660
security and uh you know whether it's

1246
01:10:15,660 --> 01:10:17,760
secure encryption of data at risk

1247
01:10:17,760 --> 01:10:19,159
encryption of data in transit

1248
01:10:19,159 --> 01:10:22,199
configuration of those systems we play

1249
01:10:22,199 --> 01:10:23,820
at the top AWS plays at the bottom

1250
01:10:23,820 --> 01:10:27,300
another kind of diagram that shows this

1251
01:10:27,300 --> 01:10:29,219
but with a little bit more context

1252
01:10:29,219 --> 01:10:32,880
specific information is this one which

1253
01:10:32,880 --> 01:10:35,400
shows our core banking system I I don't

1254
01:10:35,400 --> 01:10:37,140
know if this is really legible for your

1255
01:10:37,140 --> 01:10:39,239
reading guys but I am apologize I

1256
01:10:39,239 --> 01:10:42,120
apologize I can't zoom in unfortunately

1257
01:10:42,120 --> 01:10:44,520
so we have the core banking system we've

1258
01:10:44,520 --> 01:10:46,380
got the member Administration couple of

1259
01:10:46,380 --> 01:10:48,780
you know the gravity Gateway et cetera

1260
01:10:48,780 --> 01:10:51,659
Etc everything above the foundational

1261
01:10:51,659 --> 01:10:54,900
Services is for us to configure and then

1262
01:10:54,900 --> 01:10:58,080
everything below is for AWS to to worry

1263
01:10:58,080 --> 01:10:59,580
about

1264
01:10:59,580 --> 01:11:02,280
all right now

1265
01:11:02,280 --> 01:11:04,860
this brings me to what I call the golden

1266
01:11:04,860 --> 01:11:07,739
thread I've just uh quickly had a brief

1267
01:11:07,739 --> 01:11:10,920
Sprint through the architectural aspects

1268
01:11:10,920 --> 01:11:12,600
of the system that we'll be kind of

1269
01:11:12,600 --> 01:11:13,860
discussing

1270
01:11:13,860 --> 01:11:16,860
um and now the golden thread of what I

1271
01:11:16,860 --> 01:11:20,040
call the security landscape in AWS you

1272
01:11:20,040 --> 01:11:22,800
see on the left you've got IAM you've

1273
01:11:22,800 --> 01:11:24,540
got single sign-on you know and then

1274
01:11:24,540 --> 01:11:26,940
you've got cloudwatch inspector etc etc

1275
01:11:26,940 --> 01:11:29,400
what we're going to be doing as we go

1276
01:11:29,400 --> 01:11:32,280
along is we're going to be ticking boxes

1277
01:11:32,280 --> 01:11:35,460
off on this landscape as we go through

1278
01:11:35,460 --> 01:11:37,560
each section and try hit as many boxes

1279
01:11:37,560 --> 01:11:40,380
as we can in order to ensure a secure

1280
01:11:40,380 --> 01:11:42,800
environment

1281
01:11:45,120 --> 01:11:48,360
again not very legible but I will zoom

1282
01:11:48,360 --> 01:11:51,000
in this time for you this is um you know

1283
01:11:51,000 --> 01:11:54,120
a I would say a very basic architectural

1284
01:11:54,120 --> 01:11:56,520
diagram you guys have seen far more

1285
01:11:56,520 --> 01:11:59,280
complex diagrams and uh but this just

1286
01:11:59,280 --> 01:12:02,520
serves a purpose just to emphasize what

1287
01:12:02,520 --> 01:12:04,860
I was speaking about in terms of the the

1288
01:12:04,860 --> 01:12:06,480
golden thread that I showed you just now

1289
01:12:06,480 --> 01:12:08,880
so you see traffic coming in from the

1290
01:12:08,880 --> 01:12:11,280
corporate offices via the VPN you also

1291
01:12:11,280 --> 01:12:12,960
see traffic coming in from the internet

1292
01:12:12,960 --> 01:12:16,440
into the environment most importantly I

1293
01:12:16,440 --> 01:12:18,120
want to bring your attention to the

1294
01:12:18,120 --> 01:12:21,060
first thing that the end user hits which

1295
01:12:21,060 --> 01:12:23,159
is a load balancer that's associated to

1296
01:12:23,159 --> 01:12:27,540
a ref and has a assert attached to it

1297
01:12:27,540 --> 01:12:31,560
for encryption of of traffic in transit

1298
01:12:31,560 --> 01:12:34,920
higher the AWS certificate manager

1299
01:12:34,920 --> 01:12:37,380
again very very basic public subnet

1300
01:12:37,380 --> 01:12:40,400
private subnet nothing complex but just

1301
01:12:40,400 --> 01:12:43,560
emphasizing a point here and if we go a

1302
01:12:43,560 --> 01:12:45,600
little bit further we see at the back

1303
01:12:45,600 --> 01:12:48,900
we've got our eks cluster with an auto

1304
01:12:48,900 --> 01:12:51,060
scaling group that you know spins up

1305
01:12:51,060 --> 01:12:53,460
nodes or spins them down accordingly and

1306
01:12:53,460 --> 01:12:54,960
then right at the bottom we've got our

1307
01:12:54,960 --> 01:12:58,320
CI CD pipeline that's uh you know got

1308
01:12:58,320 --> 01:13:00,960
Version Control and Jenkins

1309
01:13:00,960 --> 01:13:03,600
um you know speaking to each other

1310
01:13:03,600 --> 01:13:06,540
so now if you if you are paying

1311
01:13:06,540 --> 01:13:07,800
attention to the golden thread

1312
01:13:07,800 --> 01:13:10,440
previously we see we're already starting

1313
01:13:10,440 --> 01:13:13,320
to take a couple of boxes

1314
01:13:13,320 --> 01:13:15,900
we see the waft being ticked off we've

1315
01:13:15,900 --> 01:13:18,600
got a VPC being ticked off cert manager

1316
01:13:18,600 --> 01:13:22,260
VPN AWS Shield so already with you know

1317
01:13:22,260 --> 01:13:24,120
the security of your infrastructure

1318
01:13:24,120 --> 01:13:26,400
starts architecturally and that's the

1319
01:13:26,400 --> 01:13:28,860
that's the that's the idea here to say

1320
01:13:28,860 --> 01:13:31,980
let's design a secure infrastructure

1321
01:13:31,980 --> 01:13:33,719
before you even touch a line of code

1322
01:13:33,719 --> 01:13:35,880
before you even configure a single

1323
01:13:35,880 --> 01:13:39,000
service you know

1324
01:13:39,000 --> 01:13:41,179
foreign

1325
01:13:42,560 --> 01:13:44,340
so

1326
01:13:44,340 --> 01:13:46,920
this brings me to the section on

1327
01:13:46,920 --> 01:13:50,120
securing the stack

1328
01:13:52,140 --> 01:13:54,600
so in this section I'm actually going to

1329
01:13:54,600 --> 01:13:56,340
um there's a nice there's a nice way to

1330
01:13:56,340 --> 01:13:59,100
think about securing the cloud 4cs right

1331
01:13:59,100 --> 01:14:00,960
securing the cloud

1332
01:14:00,960 --> 01:14:02,699
no matter what cloud service provider

1333
01:14:02,699 --> 01:14:05,460
you're using which is the slide we just

1334
01:14:05,460 --> 01:14:08,760
came from so it's curing the cluster

1335
01:14:08,760 --> 01:14:10,679
securing the container that's from a

1336
01:14:10,679 --> 01:14:12,600
kubernetes perspective and then securing

1337
01:14:12,600 --> 01:14:15,420
the code the four C's so we're going to

1338
01:14:15,420 --> 01:14:16,880
start off with

1339
01:14:16,880 --> 01:14:20,340
securing the cloud the previous slide

1340
01:14:20,340 --> 01:14:22,199
and the next upcoming slide will speak

1341
01:14:22,199 --> 01:14:24,480
to that as well and let's just jump

1342
01:14:24,480 --> 01:14:26,100
straight into it

1343
01:14:26,100 --> 01:14:27,600
so

1344
01:14:27,600 --> 01:14:29,940
hands up for anybody who has ever worked

1345
01:14:29,940 --> 01:14:32,820
with the control tower or deploy The

1346
01:14:32,820 --> 01:14:36,719
Landing Zone nice nice all right so

1347
01:14:36,719 --> 01:14:38,280
um

1348
01:14:38,280 --> 01:14:42,239
just a way to explain this a control

1349
01:14:42,239 --> 01:14:44,940
tower is a way to provision a

1350
01:14:44,940 --> 01:14:48,719
multi-account environment right for AWS

1351
01:14:48,719 --> 01:14:52,199
now what that does for me the the best

1352
01:14:52,199 --> 01:14:54,300
way to think about it is you wouldn't

1353
01:14:54,300 --> 01:14:57,420
want to put you know an FTP server mail

1354
01:14:57,420 --> 01:15:00,179
server DNS server all in one box it

1355
01:15:00,179 --> 01:15:03,420
becomes too much of a risk in terms of

1356
01:15:03,420 --> 01:15:04,560
the number of services that you're

1357
01:15:04,560 --> 01:15:05,760
exposing on it

1358
01:15:05,760 --> 01:15:08,460
this is a similar concept you're trying

1359
01:15:08,460 --> 01:15:11,760
to split up multiple different aspects

1360
01:15:11,760 --> 01:15:13,620
of your environment into logically

1361
01:15:13,620 --> 01:15:15,300
separate areas logically separate

1362
01:15:15,300 --> 01:15:18,239
accounts so you know in security we've

1363
01:15:18,239 --> 01:15:20,280
got our core tenants right we've got the

1364
01:15:20,280 --> 01:15:22,260
principle of least privilege you've also

1365
01:15:22,260 --> 01:15:24,480
got the principle of need to know think

1366
01:15:24,480 --> 01:15:26,460
of this as the principle of separation

1367
01:15:26,460 --> 01:15:28,860
of concerns right so you don't want to

1368
01:15:28,860 --> 01:15:31,860
have one account being too high risk

1369
01:15:31,860 --> 01:15:33,420
that account being compromised in the

1370
01:15:33,420 --> 01:15:34,739
whole thing going down

1371
01:15:34,739 --> 01:15:37,260
so yeah let's let's jump into dissecting

1372
01:15:37,260 --> 01:15:40,380
exactly what this diagram shows

1373
01:15:40,380 --> 01:15:42,000
in the top

1374
01:15:42,000 --> 01:15:45,060
account the root account we have the

1375
01:15:45,060 --> 01:15:48,840
control tower and organizations

1376
01:15:48,840 --> 01:15:51,480
control tower is just your orchestration

1377
01:15:51,480 --> 01:15:55,380
for this multi-account Landing

1378
01:15:55,380 --> 01:15:58,199
Landing whereas the organizations allows

1379
01:15:58,199 --> 01:16:01,020
you to manage it's the UI the interface

1380
01:16:01,020 --> 01:16:02,880
for the administrator to manage this

1381
01:16:02,880 --> 01:16:07,100
multi-account Landing Zone

1382
01:16:07,199 --> 01:16:10,199
coming to how we authenticate into the

1383
01:16:10,199 --> 01:16:12,420
landing Zone we have

1384
01:16:12,420 --> 01:16:16,140
the directory service on AWS and then we

1385
01:16:16,140 --> 01:16:18,060
have single sign-on what I see most

1386
01:16:18,060 --> 01:16:20,280
companies do most companies that I've

1387
01:16:20,280 --> 01:16:21,540
interacted with

1388
01:16:21,540 --> 01:16:22,620
actually

1389
01:16:22,620 --> 01:16:24,900
because I mean that's the that's the AWS

1390
01:16:24,900 --> 01:16:26,940
NATO version of the service usually most

1391
01:16:26,940 --> 01:16:29,280
people come in with their 365 as your

1392
01:16:29,280 --> 01:16:31,860
active directory and replace that top

1393
01:16:31,860 --> 01:16:34,620
icon with the with the aad

1394
01:16:34,620 --> 01:16:37,980
and then after that the users inside

1395
01:16:37,980 --> 01:16:39,780
that active directory will then use

1396
01:16:39,780 --> 01:16:43,560
single sign-on on AWS to authenticate in

1397
01:16:43,560 --> 01:16:46,620
and then this is a very very important

1398
01:16:46,620 --> 01:16:48,719
section in terms of

1399
01:16:48,719 --> 01:16:50,699
the architecture that I'm showing you

1400
01:16:50,699 --> 01:16:51,480
here

1401
01:16:51,480 --> 01:16:53,760
if you look we have multiple

1402
01:16:53,760 --> 01:16:57,300
organizational units uh one for you know

1403
01:16:57,300 --> 01:17:00,540
each specific section note the asterisks

1404
01:17:00,540 --> 01:17:02,040
on the applications

1405
01:17:02,040 --> 01:17:04,620
OU which just basically means you know

1406
01:17:04,620 --> 01:17:08,699
multiple of those so multiplicity and

1407
01:17:08,699 --> 01:17:10,980
you'll have whether it's your uat mat

1408
01:17:10,980 --> 01:17:14,340
sit product etc etc as as many as as you

1409
01:17:14,340 --> 01:17:16,860
want from from a business perspective

1410
01:17:16,860 --> 01:17:19,980
but right at the end on the uh end there

1411
01:17:19,980 --> 01:17:22,860
you have the SCP the service control

1412
01:17:22,860 --> 01:17:25,739
policies and this is one of the key

1413
01:17:25,739 --> 01:17:30,960
aspects to securing a uh Landing Zone it

1414
01:17:30,960 --> 01:17:34,440
is an organizational level uh way of

1415
01:17:34,440 --> 01:17:37,199
saying what services can and cannot do

1416
01:17:37,199 --> 01:17:39,840
which services are allowed and which

1417
01:17:39,840 --> 01:17:41,699
aren't allowed and inside each service

1418
01:17:41,699 --> 01:17:44,219
what can be done and what cannot be done

1419
01:17:44,219 --> 01:17:48,199
paying attention to this is critical

1420
01:17:48,719 --> 01:17:51,300
all right so going into our application

1421
01:17:51,300 --> 01:17:53,880
accounts maybe that's Dev prod whatever

1422
01:17:53,880 --> 01:17:56,640
the case may be we again we see service

1423
01:17:56,640 --> 01:17:59,520
control policies except this time on a

1424
01:17:59,520 --> 01:18:02,040
per account basis but what we also see

1425
01:18:02,040 --> 01:18:04,739
is right at the bottom there IAM

1426
01:18:04,739 --> 01:18:06,960
policies so the combination of

1427
01:18:06,960 --> 01:18:10,620
organizational level scps account level

1428
01:18:10,620 --> 01:18:14,400
scps and IIM policies that's the try

1429
01:18:14,400 --> 01:18:17,219
factor that really is the the Beating

1430
01:18:17,219 --> 01:18:20,600
Heart of security in an LZ so to speak

1431
01:18:20,600 --> 01:18:23,340
controlling these three is Paramount to

1432
01:18:23,340 --> 01:18:24,840
ensuring that you've got a grip and a

1433
01:18:24,840 --> 01:18:26,880
lockdown on this LZ

1434
01:18:26,880 --> 01:18:29,219
all right so moving to the networking

1435
01:18:29,219 --> 01:18:32,340
account again just speaking to how we're

1436
01:18:32,340 --> 01:18:35,640
separating the concerns so that if one

1437
01:18:35,640 --> 01:18:38,340
of the vpcs is compromised not all of

1438
01:18:38,340 --> 01:18:40,440
them are compromised and that also means

1439
01:18:40,440 --> 01:18:43,140
not the entire infrastructure has been

1440
01:18:43,140 --> 01:18:45,239
taken down giving you time to respond

1441
01:18:45,239 --> 01:18:46,800
from an incidence response perspective

1442
01:18:46,800 --> 01:18:49,380
before the guy pivots and takes down

1443
01:18:49,380 --> 01:18:51,360
more of your system

1444
01:18:51,360 --> 01:18:55,260
so we see a couple of vpcs egress shared

1445
01:18:55,260 --> 01:18:58,739
VPC client VPN VPC it was a quite

1446
01:18:58,739 --> 01:19:01,920
self-explanatory the egress VPC allowing

1447
01:19:01,920 --> 01:19:03,960
people traffic are allowing systems

1448
01:19:03,960 --> 01:19:06,060
traffic out of the network the shared

1449
01:19:06,060 --> 01:19:08,699
VPC for all the OU's hence the asterisk

1450
01:19:08,699 --> 01:19:11,159
on it and then the client VPN VPC

1451
01:19:11,159 --> 01:19:14,520
allowing VPN clients to enter the

1452
01:19:14,520 --> 01:19:17,120
network

1453
01:19:17,640 --> 01:19:20,580
okay last but not least we've got the

1454
01:19:20,580 --> 01:19:22,199
audience account

1455
01:19:22,199 --> 01:19:23,820
the audit account is actually quite a

1456
01:19:23,820 --> 01:19:24,920
key account

1457
01:19:24,920 --> 01:19:28,380
because it contains you know all your

1458
01:19:28,380 --> 01:19:29,159
key

1459
01:19:29,159 --> 01:19:31,260
for the you know the things that you'll

1460
01:19:31,260 --> 01:19:33,860
be encrypting

1461
01:19:34,620 --> 01:19:37,920
for example you'll have an EBS volume

1462
01:19:37,920 --> 01:19:39,960
that requires encryption so you'll have

1463
01:19:39,960 --> 01:19:41,400
encryption at rest

1464
01:19:41,400 --> 01:19:43,620
and you will store the key to encrypt

1465
01:19:43,620 --> 01:19:46,500
and decrypt that volume inside your KMS

1466
01:19:46,500 --> 01:19:49,380
key store and that key store lives

1467
01:19:49,380 --> 01:19:51,120
inside the audit account making this an

1468
01:19:51,120 --> 01:19:53,340
extremely sensitive account I've seen

1469
01:19:53,340 --> 01:19:56,940
I've actually seen LZ deployments where

1470
01:19:56,940 --> 01:19:59,760
the KMS key store is taken out of the

1471
01:19:59,760 --> 01:20:01,199
audit account and put into an account

1472
01:20:01,199 --> 01:20:03,719
called the crypto account however you

1473
01:20:03,719 --> 01:20:05,580
know refined or granular you want to

1474
01:20:05,580 --> 01:20:08,219
make it is up to you but the key points

1475
01:20:08,219 --> 01:20:10,860
don't put the key store in other systems

1476
01:20:10,860 --> 01:20:14,400
where for example your VPC resources

1477
01:20:14,400 --> 01:20:15,480
will reside

1478
01:20:15,480 --> 01:20:17,219
so for those of you have been paying

1479
01:20:17,219 --> 01:20:18,600
attention

1480
01:20:18,600 --> 01:20:20,760
you'll notice

1481
01:20:20,760 --> 01:20:23,040
security Hub and guard Duty icons in

1482
01:20:23,040 --> 01:20:25,380
every single account and

1483
01:20:25,380 --> 01:20:26,520
um

1484
01:20:26,520 --> 01:20:28,320
if we go down inside the audit account

1485
01:20:28,320 --> 01:20:30,900
we'll have the central guard Duty and

1486
01:20:30,900 --> 01:20:32,880
the Central Security Hub account so

1487
01:20:32,880 --> 01:20:35,699
effectively you're having all those God

1488
01:20:35,699 --> 01:20:37,920
Duty which is threat intelligence

1489
01:20:37,920 --> 01:20:40,199
effectively and security Hub which is

1490
01:20:40,199 --> 01:20:42,480
compliance management coming into this

1491
01:20:42,480 --> 01:20:45,000
Central account for Auditors and

1492
01:20:45,000 --> 01:20:47,400
consultants and analysts to review and

1493
01:20:47,400 --> 01:20:50,699
act upon those upon that information

1494
01:20:50,699 --> 01:20:52,560
all right so

1495
01:20:52,560 --> 01:20:56,280
this is a I think quite a an important

1496
01:20:56,280 --> 01:20:59,159
structure if you haven't dealt with an

1497
01:20:59,159 --> 01:21:01,860
LZ before dig into it it's quite

1498
01:21:01,860 --> 01:21:03,360
important

1499
01:21:03,360 --> 01:21:06,659
um and yeah but let's move on

1500
01:21:06,659 --> 01:21:08,640
and as you can see the golden thread

1501
01:21:08,640 --> 01:21:11,219
we've ticked quite a lot of the boxes in

1502
01:21:11,219 --> 01:21:12,540
the identity and access management

1503
01:21:12,540 --> 01:21:14,580
column again I'm sorry for the

1504
01:21:14,580 --> 01:21:15,679
legibility

1505
01:21:15,679 --> 01:21:18,000
and at the end there you see control

1506
01:21:18,000 --> 01:21:20,460
tower being ticked and you've got KMS

1507
01:21:20,460 --> 01:21:23,760
and yeah and VPC flow logs also being

1508
01:21:23,760 --> 01:21:25,380
ticked there so a couple of more boxes

1509
01:21:25,380 --> 01:21:27,179
being ticked in our security service

1510
01:21:27,179 --> 01:21:30,480
landscape on AWS

1511
01:21:30,480 --> 01:21:33,179
and it's important when you're securing

1512
01:21:33,179 --> 01:21:35,460
an environment to bring especially one

1513
01:21:35,460 --> 01:21:37,679
in AWS to bring as many of the tools

1514
01:21:37,679 --> 01:21:38,940
that you have at your disposal to

1515
01:21:38,940 --> 01:21:42,780
perform against real threat actors

1516
01:21:42,780 --> 01:21:46,260
all right so this brings me to this

1517
01:21:46,260 --> 01:21:49,460
section of the talk which

1518
01:21:50,219 --> 01:21:53,159
um what I would call

1519
01:21:53,159 --> 01:21:56,520
the the core security offering that is

1520
01:21:56,520 --> 01:21:58,860
provided on AWS so you have a

1521
01:21:58,860 --> 01:22:01,380
combination of your guard Duty again

1522
01:22:01,380 --> 01:22:03,659
threat Intelligence coming in from you

1523
01:22:03,659 --> 01:22:06,719
know various logs VPC flow logs S3 API

1524
01:22:06,719 --> 01:22:09,719
logs etc etc and then you've also got

1525
01:22:09,719 --> 01:22:11,340
your security Hub which is your

1526
01:22:11,340 --> 01:22:13,380
compliance in this picture unfortunately

1527
01:22:13,380 --> 01:22:15,780
I forgot to include PCI that is one of

1528
01:22:15,780 --> 01:22:17,400
the compliance standards I'm sure many

1529
01:22:17,400 --> 01:22:19,320
of you actually deal with that regularly

1530
01:22:19,320 --> 01:22:21,600
but we've also got the AWS foundational

1531
01:22:21,600 --> 01:22:24,120
standard and the syscom clients all of

1532
01:22:24,120 --> 01:22:27,060
that coming in and hooked into some sort

1533
01:22:27,060 --> 01:22:29,340
of alert system that allows you to see

1534
01:22:29,340 --> 01:22:31,199
these alerts as they're generated as and

1535
01:22:31,199 --> 01:22:32,640
when they're generated

1536
01:22:32,640 --> 01:22:36,780
this is the you know again a very core

1537
01:22:36,780 --> 01:22:40,440
basic model for security on AWS so let's

1538
01:22:40,440 --> 01:22:42,719
expand upon it you have on your right a

1539
01:22:42,719 --> 01:22:44,280
couple of new services

1540
01:22:44,280 --> 01:22:47,340
you've got Macy which hunts down poppy

1541
01:22:47,340 --> 01:22:49,380
information

1542
01:22:49,380 --> 01:22:52,560
um you know it's it's so easy to to slip

1543
01:22:52,560 --> 01:22:56,760
and Miss uh you know a data store or a

1544
01:22:56,760 --> 01:22:58,560
repository of information that's got a

1545
01:22:58,560 --> 01:23:00,000
lot of client data and it's happened

1546
01:23:00,000 --> 01:23:02,340
I've seen it happen you want the

1547
01:23:02,340 --> 01:23:04,800
machines to help you out with that

1548
01:23:04,800 --> 01:23:05,340
um

1549
01:23:05,340 --> 01:23:07,739
then you've got your IAM access analyzer

1550
01:23:07,739 --> 01:23:10,440
you know how are the outdated keys that

1551
01:23:10,440 --> 01:23:12,480
need rotating are there any users that

1552
01:23:12,480 --> 01:23:13,560
need to be removed because they haven't

1553
01:23:13,560 --> 01:23:15,659
been accessed accessed in a long time

1554
01:23:15,659 --> 01:23:20,659
then you've got your SSM patch manager

1555
01:23:21,840 --> 01:23:25,679
now to be honest SSM is the systems

1556
01:23:25,679 --> 01:23:27,900
manager is an amazing tool

1557
01:23:27,900 --> 01:23:29,520
it's more than just a patch manager for

1558
01:23:29,520 --> 01:23:30,840
example

1559
01:23:30,840 --> 01:23:34,140
recently we had to configure a weft

1560
01:23:34,140 --> 01:23:37,980
right and uh and you know you've got a

1561
01:23:37,980 --> 01:23:39,600
couple of ec2 instances in a client

1562
01:23:39,600 --> 01:23:40,739
environment you don't really know what's

1563
01:23:40,739 --> 01:23:43,260
running on them so we deployed an SSM

1564
01:23:43,260 --> 01:23:45,719
agent onto these machines that kind of

1565
01:23:45,719 --> 01:23:47,640
scrubbed the system and told us what

1566
01:23:47,640 --> 01:23:50,580
software was installed you know node PHP

1567
01:23:50,580 --> 01:23:53,580
etc etc created an inventory of that and

1568
01:23:53,580 --> 01:23:55,260
then that allows us to then go back to

1569
01:23:55,260 --> 01:23:56,820
the weft and refine the rule sets

1570
01:23:56,820 --> 01:23:58,380
accordingly you don't want to just throw

1571
01:23:58,380 --> 01:23:59,940
all the rules on the web that really

1572
01:23:59,940 --> 01:24:01,560
don't make sense you know if it's a

1573
01:24:01,560 --> 01:24:02,880
Windows box you don't want to put Linus

1574
01:24:02,880 --> 01:24:05,820
rule sets you know so

1575
01:24:05,820 --> 01:24:09,239
so that's quite a neat feature of the of

1576
01:24:09,239 --> 01:24:12,420
the security manager and actually it

1577
01:24:12,420 --> 01:24:14,820
goes much deeper than that but patching

1578
01:24:14,820 --> 01:24:16,020
is one of the big things that you want

1579
01:24:16,020 --> 01:24:17,640
to use that for and then you've got

1580
01:24:17,640 --> 01:24:20,520
inspector which you know we used quite

1581
01:24:20,520 --> 01:24:23,100
recently to to scan for the log4 shell

1582
01:24:23,100 --> 01:24:26,460
vulnerability across all containers that

1583
01:24:26,460 --> 01:24:28,199
were that we're running in in multiple

1584
01:24:28,199 --> 01:24:29,640
environments

1585
01:24:29,640 --> 01:24:33,179
okay now as Security Consultants

1586
01:24:33,179 --> 01:24:36,000
Defenders attackers you know one thing

1587
01:24:36,000 --> 01:24:37,920
we don't want to be doing is adding to

1588
01:24:37,920 --> 01:24:39,659
the problem you know if you're going to

1589
01:24:39,659 --> 01:24:40,400
be

1590
01:24:40,400 --> 01:24:43,980
configuring a security architecture like

1591
01:24:43,980 --> 01:24:45,840
this you don't want to be the guy that

1592
01:24:45,840 --> 01:24:47,640
allows the guy the other the bad guys in

1593
01:24:47,640 --> 01:24:52,199
and um S3 really is one of the ways

1594
01:24:52,199 --> 01:24:54,480
which a lot of companies have found

1595
01:24:54,480 --> 01:24:56,280
their pants down because of

1596
01:24:56,280 --> 01:24:59,120
misconfigurations

1597
01:24:59,940 --> 01:25:03,600
all right now so you might be asking me

1598
01:25:03,600 --> 01:25:07,620
how does this architecture fit into the

1599
01:25:07,620 --> 01:25:09,600
previous architecture which I just shown

1600
01:25:09,600 --> 01:25:11,940
which is the landing zone right uh

1601
01:25:11,940 --> 01:25:15,840
notice I I emphasized the guard Duty

1602
01:25:15,840 --> 01:25:19,080
elements of each account and you're

1603
01:25:19,080 --> 01:25:21,239
seeing God Duty and and security happier

1604
01:25:21,239 --> 01:25:24,719
so indeed what you have is you've got

1605
01:25:24,719 --> 01:25:27,900
the main audit account feeding security

1606
01:25:27,900 --> 01:25:30,540
Hub information in from all the child

1607
01:25:30,540 --> 01:25:32,520
accounts and that is the architecture

1608
01:25:32,520 --> 01:25:34,920
that we'll be going for when securing

1609
01:25:34,920 --> 01:25:36,540
the environment

1610
01:25:36,540 --> 01:25:39,600
right so that brings me to the golden

1611
01:25:39,600 --> 01:25:42,060
thread yet again and notice now this

1612
01:25:42,060 --> 01:25:43,380
time

1613
01:25:43,380 --> 01:25:45,420
um how quite a lot of the boxes are now

1614
01:25:45,420 --> 01:25:48,780
finally ticked off unfortunately

1615
01:25:48,780 --> 01:25:50,760
um and Ivan I don't know if Ivan's here

1616
01:25:50,760 --> 01:25:53,820
but unfortunately this column here is

1617
01:25:53,820 --> 01:25:56,460
something where you know I I was at a I

1618
01:25:56,460 --> 01:26:01,340
was at the hex-con conference and Ivan

1619
01:26:01,679 --> 01:26:03,120
had mentioned

1620
01:26:03,120 --> 01:26:05,400
it's such an under supply of incidence

1621
01:26:05,400 --> 01:26:07,679
responders in South Africa you know and

1622
01:26:07,679 --> 01:26:09,480
I I'm proving that right now in

1623
01:26:09,480 --> 01:26:11,639
preparation of my talk I didn't even I

1624
01:26:11,639 --> 01:26:14,400
didn't even touch that that column there

1625
01:26:14,400 --> 01:26:16,860
um but for the most part it you know

1626
01:26:16,860 --> 01:26:18,540
you're seeing the light starting to

1627
01:26:18,540 --> 01:26:21,060
switch on across across the the server

1628
01:26:21,060 --> 01:26:24,060
the security service landscape

1629
01:26:24,060 --> 01:26:25,620
all right

1630
01:26:25,620 --> 01:26:28,760
that brings me to the end of

1631
01:26:28,760 --> 01:26:31,500
architecturally how you would go about

1632
01:26:31,500 --> 01:26:35,580
securing you know your your cloud and

1633
01:26:35,580 --> 01:26:37,739
in fact let's jump into

1634
01:26:37,739 --> 01:26:39,659
kubernetes environment where the code

1635
01:26:39,659 --> 01:26:42,138
will be running

1636
01:26:44,639 --> 01:26:46,980
so a couple of you guys already know

1637
01:26:46,980 --> 01:26:48,960
kubernetes are I kind of asked that

1638
01:26:48,960 --> 01:26:50,820
question at the beginning what you'll

1639
01:26:50,820 --> 01:26:52,440
notice if you're paying attention I will

1640
01:26:52,440 --> 01:26:53,820
come back to the snacks I'm getting

1641
01:26:53,820 --> 01:26:55,020
ahead of myself

1642
01:26:55,020 --> 01:26:57,659
so let's just start with a brief

1643
01:26:57,659 --> 01:27:01,380
overview of how kubernetes is put

1644
01:27:01,380 --> 01:27:03,900
together so you have your API server

1645
01:27:03,900 --> 01:27:05,580
which is one of the more critical

1646
01:27:05,580 --> 01:27:06,960
components in the in the in the

1647
01:27:06,960 --> 01:27:09,980
architecture that's what the Kube CTL

1648
01:27:09,980 --> 01:27:12,480
command line application interacts with

1649
01:27:12,480 --> 01:27:14,699
when an administrator kind of interacts

1650
01:27:14,699 --> 01:27:17,580
with the cluster right then you've got

1651
01:27:17,580 --> 01:27:20,040
your Cloud controller manager the icon

1652
01:27:20,040 --> 01:27:21,780
at the top there and then you've got

1653
01:27:21,780 --> 01:27:25,199
your hcd hcd being well before I go to

1654
01:27:25,199 --> 01:27:27,600
NCD Cloud controller manager being the

1655
01:27:27,600 --> 01:27:29,639
API to the you know cloud service

1656
01:27:29,639 --> 01:27:31,800
providers resources

1657
01:27:31,800 --> 01:27:34,020
and then you've got your SCD which is a

1658
01:27:34,020 --> 01:27:37,020
distributed High availability data store

1659
01:27:37,020 --> 01:27:40,020
which stores the state of the cluster

1660
01:27:40,020 --> 01:27:42,179
now

1661
01:27:42,179 --> 01:27:46,440
compromise of either the API server or

1662
01:27:46,440 --> 01:27:49,380
the SCD data store is akin to the root

1663
01:27:49,380 --> 01:27:50,699
on a Linux box

1664
01:27:50,699 --> 01:27:52,440
so that's that's what you want to

1665
01:27:52,440 --> 01:27:53,699
protect right at the beginning of the

1666
01:27:53,699 --> 01:27:56,059
offset

1667
01:28:02,340 --> 01:28:04,920
be thirsty

1668
01:28:04,920 --> 01:28:09,480
so all right so then we've got our nodes

1669
01:28:09,480 --> 01:28:12,179
recall in the previous uh architectural

1670
01:28:12,179 --> 01:28:14,340
diagram the simple diagram that we had

1671
01:28:14,340 --> 01:28:16,139
that auto scaling group it's actually

1672
01:28:16,139 --> 01:28:17,639
responsible for spinning up the nodes

1673
01:28:17,639 --> 01:28:20,639
which are just regular ec2 instances

1674
01:28:20,639 --> 01:28:22,500
um inside those nodes what you'll have

1675
01:28:22,500 --> 01:28:25,080
running is the kubelet

1676
01:28:25,080 --> 01:28:26,940
um and

1677
01:28:26,940 --> 01:28:28,920
the kublet via the container runtime

1678
01:28:28,920 --> 01:28:32,280
interface manages the pods inside your

1679
01:28:32,280 --> 01:28:33,719
nodes and then you've got the coupe

1680
01:28:33,719 --> 01:28:35,699
proxy which is the physical

1681
01:28:35,699 --> 01:28:38,239
implementation of a service in

1682
01:28:38,239 --> 01:28:41,159
kubernetes now for the eagle-eyed

1683
01:28:41,159 --> 01:28:45,120
audience member you'll notice there are

1684
01:28:45,120 --> 01:28:47,460
two elements missing here there's the

1685
01:28:47,460 --> 01:28:49,560
regular controller manager

1686
01:28:49,560 --> 01:28:51,600
controller manager I'm not going to get

1687
01:28:51,600 --> 01:28:55,080
into too much detail here but has it

1688
01:28:55,080 --> 01:28:56,580
manages controllers

1689
01:28:56,580 --> 01:28:58,800
one of them if you ever want to get into

1690
01:28:58,800 --> 01:29:01,020
kubernetes research one of them that

1691
01:29:01,020 --> 01:29:02,280
you'd really want to look at is the

1692
01:29:02,280 --> 01:29:06,060
admission controller it before a part is

1693
01:29:06,060 --> 01:29:09,179
scheduled it will then mutate and verify

1694
01:29:09,179 --> 01:29:11,219
certain elements of that pod or that

1695
01:29:11,219 --> 01:29:13,500
manifests before scheduling it on pod

1696
01:29:13,500 --> 01:29:15,480
and then you've got another thing that's

1697
01:29:15,480 --> 01:29:18,060
missing here is the scheduler

1698
01:29:18,060 --> 01:29:19,980
schedule it says okay cool

1699
01:29:19,980 --> 01:29:22,500
you've given me a part let me find a

1700
01:29:22,500 --> 01:29:25,320
note to run it on and then and then the

1701
01:29:25,320 --> 01:29:27,719
couplet will say okay I've got I've got

1702
01:29:27,719 --> 01:29:28,920
a pod now

1703
01:29:28,920 --> 01:29:30,659
let me find a container let me put the

1704
01:29:30,659 --> 01:29:33,000
container inside the pot so those two

1705
01:29:33,000 --> 01:29:34,920
systems the scheduler and the Kubler

1706
01:29:34,920 --> 01:29:36,900
work hand in hand to deploy the

1707
01:29:36,900 --> 01:29:38,880
workflows that you'll be that you'll be

1708
01:29:38,880 --> 01:29:42,300
using to uh to run your systems

1709
01:29:42,300 --> 01:29:43,679
all right

1710
01:29:43,679 --> 01:29:45,780
another view that I'd like to kind of

1711
01:29:45,780 --> 01:29:48,780
give you is the flow of network traffic

1712
01:29:48,780 --> 01:29:51,120
right so you've got your red line coming

1713
01:29:51,120 --> 01:29:53,760
from the admin to the API server very

1714
01:29:53,760 --> 01:29:56,340
very important to protect that

1715
01:29:56,340 --> 01:29:59,219
then you've got your end user coming in

1716
01:29:59,219 --> 01:30:00,780
through the services you know that'll be

1717
01:30:00,780 --> 01:30:03,179
an HTTP endpoint that they'll be

1718
01:30:03,179 --> 01:30:06,380
interacting with and then you've got

1719
01:30:06,380 --> 01:30:09,480
your container registry where the Pod

1720
01:30:09,480 --> 01:30:11,219
pulls its containers down from the

1721
01:30:11,219 --> 01:30:13,679
internet from uh assuming it's a it's a

1722
01:30:13,679 --> 01:30:17,040
it's a public container registry

1723
01:30:17,040 --> 01:30:19,260
all right now let's discuss

1724
01:30:19,260 --> 01:30:21,480
some of the attacker entry points I've

1725
01:30:21,480 --> 01:30:24,060
already mentioned that

1726
01:30:24,060 --> 01:30:24,960
um

1727
01:30:24,960 --> 01:30:28,500
you know the API server as well as the

1728
01:30:28,500 --> 01:30:31,679
hcd server are high value targets those

1729
01:30:31,679 --> 01:30:33,900
need protection at all costs then you'll

1730
01:30:33,900 --> 01:30:35,760
have your service I mean anything that

1731
01:30:35,760 --> 01:30:37,739
the end user can get to the hacker can

1732
01:30:37,739 --> 01:30:39,780
get to as well right

1733
01:30:39,780 --> 01:30:41,699
um and then you've got your node and

1734
01:30:41,699 --> 01:30:43,800
your Kubler over here there's there's

1735
01:30:43,800 --> 01:30:45,060
some actually really neat

1736
01:30:45,060 --> 01:30:48,239
vulnerabilities out there uh one being a

1737
01:30:48,239 --> 01:30:50,880
container Escape phone on the crio

1738
01:30:50,880 --> 01:30:54,120
runtime most runtimes today actually I

1739
01:30:54,120 --> 01:30:55,980
think the majority of of kubernetes

1740
01:30:55,980 --> 01:30:59,100
clusters run on Docker but um couple are

1741
01:30:59,100 --> 01:31:01,139
really neat crio vulnerabilities out

1742
01:31:01,139 --> 01:31:03,360
there for the round researchers and then

1743
01:31:03,360 --> 01:31:05,400
you've got your registry which stores

1744
01:31:05,400 --> 01:31:07,739
the images which will end up running as

1745
01:31:07,739 --> 01:31:08,880
containers

1746
01:31:08,880 --> 01:31:10,260
all right

1747
01:31:10,260 --> 01:31:11,460
so

1748
01:31:11,460 --> 01:31:15,060
let's begin just unpacking

1749
01:31:15,060 --> 01:31:17,340
um you know how each of these elements

1750
01:31:17,340 --> 01:31:19,139
can be protected to keep the you know

1751
01:31:19,139 --> 01:31:21,600
the the threat actor out

1752
01:31:21,600 --> 01:31:25,080
before I go any further

1753
01:31:25,080 --> 01:31:26,699
um for those of you who do work in the

1754
01:31:26,699 --> 01:31:29,719
environment you'll notice

1755
01:31:30,300 --> 01:31:32,159
that I've kind of cheated

1756
01:31:32,159 --> 01:31:36,000
I've added those two blocks there and if

1757
01:31:36,000 --> 01:31:38,280
you're on a AWS cluster you'll never

1758
01:31:38,280 --> 01:31:40,560
actually see the control plane

1759
01:31:40,560 --> 01:31:42,480
you won't see the master note it's

1760
01:31:42,480 --> 01:31:45,120
invisible to you that ties back to you

1761
01:31:45,120 --> 01:31:46,620
know the shared responsibility model

1762
01:31:46,620 --> 01:31:49,860
that's something AWS is in charge of uh

1763
01:31:49,860 --> 01:31:52,199
you know securing however that being

1764
01:31:52,199 --> 01:31:54,239
said there is a certain degree of

1765
01:31:54,239 --> 01:31:56,460
control that we do have at this point

1766
01:31:56,460 --> 01:31:58,679
here which is control over the API

1767
01:31:58,679 --> 01:31:59,820
server

1768
01:31:59,820 --> 01:32:02,460
so let's jump into that so what you have

1769
01:32:02,460 --> 01:32:04,020
is most of the time you want to have a

1770
01:32:04,020 --> 01:32:06,719
rollback system protecting that but in

1771
01:32:06,719 --> 01:32:09,179
this case AWS implements that rollback

1772
01:32:09,179 --> 01:32:11,639
system via IAM you don't have to worry

1773
01:32:11,639 --> 01:32:13,739
too much about that what you can worry

1774
01:32:13,739 --> 01:32:17,219
about is who has access to the API

1775
01:32:17,219 --> 01:32:18,960
server if you make that API server

1776
01:32:18,960 --> 01:32:21,139
public what you'd want to do is you know

1777
01:32:21,139 --> 01:32:23,940
whitelist certain trusted IP addresses

1778
01:32:23,940 --> 01:32:26,159
that can access that API server

1779
01:32:26,159 --> 01:32:29,340
preferred method the recommended method

1780
01:32:29,340 --> 01:32:32,460
is making your API server private and

1781
01:32:32,460 --> 01:32:36,000
then using perhaps a jump box or a

1782
01:32:36,000 --> 01:32:38,280
Transit gateway to connect to that to

1783
01:32:38,280 --> 01:32:40,800
that to that private API endpoint

1784
01:32:40,800 --> 01:32:43,440
again so I'm going to move on to the

1785
01:32:43,440 --> 01:32:45,659
next slide but as I move on to the next

1786
01:32:45,659 --> 01:32:49,020
slide you'll notice I've put an x on API

1787
01:32:49,020 --> 01:32:51,600
server I've also put an x on NCD

1788
01:32:51,600 --> 01:32:54,120
datastore you cannot control anything on

1789
01:32:54,120 --> 01:32:57,300
the hcd data store that's AWS so hence

1790
01:32:57,300 --> 01:33:01,699
that was just for information purposes

1791
01:33:02,040 --> 01:33:05,760
all right so

1792
01:33:07,739 --> 01:33:10,440
pod security policy

1793
01:33:10,440 --> 01:33:12,480
what you want to do is when you're

1794
01:33:12,480 --> 01:33:15,780
running a pot inside a node you want to

1795
01:33:15,780 --> 01:33:18,179
control what level of access that pod

1796
01:33:18,179 --> 01:33:20,580
has to the underlying host whether it's

1797
01:33:20,580 --> 01:33:23,520
got host ports access whether it's got

1798
01:33:23,520 --> 01:33:27,120
host network access etc etc that's done

1799
01:33:27,120 --> 01:33:30,120
via the you know pod security policy as

1800
01:33:30,120 --> 01:33:31,380
well as in combination with the network

1801
01:33:31,380 --> 01:33:33,179
policy I'm so sorry that this can't be

1802
01:33:33,179 --> 01:33:35,280
read properly but I hope I'm narrating

1803
01:33:35,280 --> 01:33:37,080
it properly for you guys

1804
01:33:37,080 --> 01:33:37,800
um

1805
01:33:37,800 --> 01:33:41,780
and one important thing to know about

1806
01:33:41,780 --> 01:33:44,460
the Pod security policy is that for

1807
01:33:44,460 --> 01:33:46,320
those who deal with this again regularly

1808
01:33:46,320 --> 01:33:49,860
this is deprecated as of version 1.21 of

1809
01:33:49,860 --> 01:33:51,360
kubernetes and I think it'll be

1810
01:33:51,360 --> 01:33:53,400
completely phased out end of life by

1811
01:33:53,400 --> 01:33:55,320
1.25

1812
01:33:55,320 --> 01:33:57,540
and then I'd like to pause for a second

1813
01:33:57,540 --> 01:34:00,719
and have a Shameless plug

1814
01:34:00,719 --> 01:34:02,100
um

1815
01:34:02,100 --> 01:34:04,280
and have a little bit of a questionnaire

1816
01:34:04,280 --> 01:34:07,739
to see who wants these uh you know

1817
01:34:07,739 --> 01:34:10,139
synthesis goodies I think there's a

1818
01:34:10,139 --> 01:34:13,080
couple of shirts in here key holders

1819
01:34:13,080 --> 01:34:15,960
socks chocolate cups for anybody who can

1820
01:34:15,960 --> 01:34:17,719
answer the next question for me which is

1821
01:34:17,719 --> 01:34:20,280
and I'll I'll give it to the person who

1822
01:34:20,280 --> 01:34:21,659
gives me the most correct answer I'm not

1823
01:34:21,659 --> 01:34:22,679
sure if everybody's going to get it

1824
01:34:22,679 --> 01:34:24,719
right but it is easy

1825
01:34:24,719 --> 01:34:27,659
um so we're moving away from the Pod

1826
01:34:27,659 --> 01:34:30,179
security policy to protecting the

1827
01:34:30,179 --> 01:34:32,100
registry anybody want to have a shot at

1828
01:34:32,100 --> 01:34:34,260
how you protect your register your hands

1829
01:34:34,260 --> 01:34:35,820
up you know

1830
01:34:35,820 --> 01:34:37,920
is there

1831
01:34:37,920 --> 01:34:41,280
nice okay that's actually

1832
01:34:41,280 --> 01:34:43,400
there you go

1833
01:34:43,400 --> 01:34:45,540
anybody else want to give it a shot I

1834
01:34:45,540 --> 01:34:46,679
mean there's a couple of things maybe we

1835
01:34:46,679 --> 01:34:48,300
split them up

1836
01:34:48,300 --> 01:34:49,679
nobody

1837
01:34:49,679 --> 01:34:52,199
the gift is yours man

1838
01:34:52,199 --> 01:34:56,520
so a notary server right signatures but

1839
01:34:56,520 --> 01:34:59,280
in addition to static code analyzers and

1840
01:34:59,280 --> 01:35:01,260
actually something very interesting a

1841
01:35:01,260 --> 01:35:02,820
friend of mine showed me earlier on this

1842
01:35:02,820 --> 01:35:05,280
week is chat GPT

1843
01:35:05,280 --> 01:35:08,820
uh in terms of secure code reviews or

1844
01:35:08,820 --> 01:35:10,560
static code reviews

1845
01:35:10,560 --> 01:35:13,320
um have a look at that but yeah so a

1846
01:35:13,320 --> 01:35:15,719
notary server you'd wanna you'd wanna

1847
01:35:15,719 --> 01:35:17,100
you know there's two options here that

1848
01:35:17,100 --> 01:35:19,139
you want to play with one you're gonna

1849
01:35:19,139 --> 01:35:21,420
go with a third-party hosted notary

1850
01:35:21,420 --> 01:35:24,120
server uh the problem with that is that

1851
01:35:24,120 --> 01:35:25,020
you're not going to have all the

1852
01:35:25,020 --> 01:35:26,520
signatures you know you're gonna you're

1853
01:35:26,520 --> 01:35:28,500
gonna you're gonna take what you get

1854
01:35:28,500 --> 01:35:31,380
other alternative is you know creating

1855
01:35:31,380 --> 01:35:32,699
your own

1856
01:35:32,699 --> 01:35:35,699
privately owned notary server which then

1857
01:35:35,699 --> 01:35:37,620
uh leaves you with the job of creating

1858
01:35:37,620 --> 01:35:39,780
those signatures yourself and then of

1859
01:35:39,780 --> 01:35:40,679
course

1860
01:35:40,679 --> 01:35:43,560
um you know open source or proprietary

1861
01:35:43,560 --> 01:35:46,620
scans of those images uh using a static

1862
01:35:46,620 --> 01:35:48,659
code analyzer

1863
01:35:48,659 --> 01:35:51,500
all right

1864
01:35:52,139 --> 01:35:55,199
okay protecting the service like I said

1865
01:35:55,199 --> 01:35:58,139
earlier on the same way an attacker can

1866
01:35:58,139 --> 01:36:00,719
get to the uh the back end is the same

1867
01:36:00,719 --> 01:36:02,100
way an end user can get to the back end

1868
01:36:02,100 --> 01:36:04,500
is the same way an attacker does and how

1869
01:36:04,500 --> 01:36:07,260
I've had success in the past is

1870
01:36:07,260 --> 01:36:10,020
converting the service to an Ingress of

1871
01:36:10,020 --> 01:36:13,620
type nginx and then enabling the mod

1872
01:36:13,620 --> 01:36:16,080
security rule sets with the old core

1873
01:36:16,080 --> 01:36:18,060
rule set on there so the mod security

1874
01:36:18,060 --> 01:36:21,239
plug-in excuse me with the OS core rule

1875
01:36:21,239 --> 01:36:23,340
set now you might ask yourself but

1876
01:36:23,340 --> 01:36:25,980
Nintendo let's just the duplication of

1877
01:36:25,980 --> 01:36:27,719
the weft that you showed me right at the

1878
01:36:27,719 --> 01:36:29,040
beginning

1879
01:36:29,040 --> 01:36:31,139
but if you look a little bit deeper and

1880
01:36:31,139 --> 01:36:32,699
for those who have played with nginx

1881
01:36:32,699 --> 01:36:35,159
it's it's you know you've got a lot of

1882
01:36:35,159 --> 01:36:37,139
control over some of the security HTTP

1883
01:36:37,139 --> 01:36:39,300
headers and that gives you control over

1884
01:36:39,300 --> 01:36:42,060
what the attacker can and cannot do so

1885
01:36:42,060 --> 01:36:44,760
that's a very very cool uh combination

1886
01:36:44,760 --> 01:36:46,679
there that you can use to protect the

1887
01:36:46,679 --> 01:36:49,860
service and then last but not least

1888
01:36:49,860 --> 01:36:54,719
you have the AWS resources that are

1889
01:36:54,719 --> 01:36:57,179
sitting on the cloud such as your EBS

1890
01:36:57,179 --> 01:36:59,219
block but block storage

1891
01:36:59,219 --> 01:37:01,500
what you want to do here is you want to

1892
01:37:01,500 --> 01:37:04,739
have an IAM policy attached to a service

1893
01:37:04,739 --> 01:37:08,219
account that you force the Pod to run

1894
01:37:08,219 --> 01:37:12,000
with so that pod cannot access what you

1895
01:37:12,000 --> 01:37:13,500
haven't given it access to even if it

1896
01:37:13,500 --> 01:37:15,179
gets compromised right

1897
01:37:15,179 --> 01:37:17,159
all right so so that's a that's a pretty

1898
01:37:17,159 --> 01:37:19,440
neat one to block that attack Vector as

1899
01:37:19,440 --> 01:37:20,760
well

1900
01:37:20,760 --> 01:37:24,179
I don't know how I'm doing for time

1901
01:37:24,179 --> 01:37:26,580
it's like I'm I'm good

1902
01:37:26,580 --> 01:37:27,960
so yeah

1903
01:37:27,960 --> 01:37:28,920
um

1904
01:37:28,920 --> 01:37:31,080
and that brings me to the end guys of

1905
01:37:31,080 --> 01:37:33,840
you know securing kubernetes which also

1906
01:37:33,840 --> 01:37:36,420
means it's the end of the stack

1907
01:37:36,420 --> 01:37:37,020
um

1908
01:37:37,020 --> 01:37:40,080
did say that there are four C's I'm not

1909
01:37:40,080 --> 01:37:42,179
a coder so I'm not gonna lie and stand

1910
01:37:42,179 --> 01:37:43,440
here and tell you about how to secure

1911
01:37:43,440 --> 01:37:44,699
the code

1912
01:37:44,699 --> 01:37:46,440
um you know I I'll tell you about how to

1913
01:37:46,440 --> 01:37:48,480
secure the infrastructure but I do know

1914
01:37:48,480 --> 01:37:50,580
that secure code reviews does get you a

1915
01:37:50,580 --> 01:37:52,620
long way again I'll name drop that uh

1916
01:37:52,620 --> 01:37:56,520
that thing again chat GPT check it out

1917
01:37:56,520 --> 01:37:59,159
um in terms of you know the feature of

1918
01:37:59,159 --> 01:38:02,159
secure code reviews but yeah that's the

1919
01:38:02,159 --> 01:38:05,639
uh that's the end of uh what I have to

1920
01:38:05,639 --> 01:38:06,600
show you

1921
01:38:06,600 --> 01:38:09,719
basically I think the the take home here

1922
01:38:09,719 --> 01:38:11,400
for me and I hope this is what you're

1923
01:38:11,400 --> 01:38:14,460
taking home is you know a multi-layered

1924
01:38:14,460 --> 01:38:16,560
approach to security which is the you

1925
01:38:16,560 --> 01:38:18,480
know which is the standard you start off

1926
01:38:18,480 --> 01:38:20,219
with securing the cloud the cluster the

1927
01:38:20,219 --> 01:38:21,480
container

1928
01:38:21,480 --> 01:38:23,940
um and at each level you wanna you wanna

1929
01:38:23,940 --> 01:38:26,040
observe certain core tenants of security

1930
01:38:26,040 --> 01:38:28,020
like the security uh the principle of

1931
01:38:28,020 --> 01:38:29,639
separation of concerns which we saw on

1932
01:38:29,639 --> 01:38:32,400
the LZ and uh this is the principle of

1933
01:38:32,400 --> 01:38:34,199
least privilege which we'll see when

1934
01:38:34,199 --> 01:38:36,840
we're associating a policy to a service

1935
01:38:36,840 --> 01:38:39,300
account but other than that

1936
01:38:39,300 --> 01:38:42,540
um that's all she wrote Guys

1937
01:38:42,540 --> 01:38:46,040
uh thank you for your time

1938
01:38:50,280 --> 01:38:54,259
do we have any questions

1939
01:38:56,520 --> 01:38:59,120
awesome

1940
01:38:59,239 --> 01:39:02,718
go for it sir

1941
01:39:19,500 --> 01:39:21,540
yeah so that's actually an interesting

1942
01:39:21,540 --> 01:39:23,940
question we've been working on 40s

1943
01:39:23,940 --> 01:39:26,219
um very recently uh for East West North

1944
01:39:26,219 --> 01:39:30,000
South traffic inspection on AWS so um

1945
01:39:30,000 --> 01:39:31,860
yeah it's something that I'm coming up

1946
01:39:31,860 --> 01:39:35,760
across in the real world and uh yeah you

1947
01:39:35,760 --> 01:39:37,500
point out a good point the fact that I

1948
01:39:37,500 --> 01:39:39,719
don't have it in my slides but it is

1949
01:39:39,719 --> 01:39:41,219
something that you'd want to look at but

1950
01:39:41,219 --> 01:39:43,500
uh yeah I think next time around with

1951
01:39:43,500 --> 01:39:45,420
version two of these slides I'll add it

1952
01:39:45,420 --> 01:39:47,719
in there thanks

1953
01:39:48,600 --> 01:39:51,300
100 percent

1954
01:39:51,300 --> 01:39:53,960
thank you

1955
01:40:01,380 --> 01:40:03,780
were you gonna ask something

1956
01:40:03,780 --> 01:40:06,259
yeah

1957
01:40:10,739 --> 01:40:13,199
so

1958
01:40:13,199 --> 01:40:15,719
actually

1959
01:40:15,719 --> 01:40:17,639
no because

1960
01:40:17,639 --> 01:40:21,300
we we found we found it difficult to get

1961
01:40:21,300 --> 01:40:23,100
God Duty into kubernetes so we ended up

1962
01:40:23,100 --> 01:40:25,560
using you know open um proprietary

1963
01:40:25,560 --> 01:40:27,840
software which I don't like to always uh

1964
01:40:27,840 --> 01:40:30,540
lean on we use Prisma specifically Swiss

1965
01:40:30,540 --> 01:40:33,239
lock kind of um to to gain to gain

1966
01:40:33,239 --> 01:40:37,040
insight into into the cluster

1967
01:40:50,520 --> 01:40:52,880
yeah yeah yeah yeah yeah

1968
01:40:52,880 --> 01:40:54,960
okay so there was a Trend Micro

1969
01:40:54,960 --> 01:40:56,520
conference that we just recently

1970
01:40:56,520 --> 01:40:59,760
attended with the team and um so

1971
01:40:59,760 --> 01:41:02,360
instance metadata service version 2

1972
01:41:02,360 --> 01:41:04,739
imdsv2 right

1973
01:41:04,739 --> 01:41:06,360
um there's a couple of server side

1974
01:41:06,360 --> 01:41:08,159
requests for jury attacks that can go on

1975
01:41:08,159 --> 01:41:11,699
it and um we got that feedback from God

1976
01:41:11,699 --> 01:41:14,699
Duty in the Island region so we're

1977
01:41:14,699 --> 01:41:16,320
sitting there trying to secure this

1978
01:41:16,320 --> 01:41:17,280
cluster

1979
01:41:17,280 --> 01:41:20,520
from this imds V2 attack and we're

1980
01:41:20,520 --> 01:41:23,040
noticing wait hold on if soft doesn't

1981
01:41:23,040 --> 01:41:25,980
scan for that finding so there was an

1982
01:41:25,980 --> 01:41:27,960
AWS representative at the Trend Micro

1983
01:41:27,960 --> 01:41:30,420
conference and I'm saying to him

1984
01:41:30,420 --> 01:41:32,460
so you're saying South African security

1985
01:41:32,460 --> 01:41:34,139
admins have to fight this fight with

1986
01:41:34,139 --> 01:41:35,880
their hands tied behind our base

1987
01:41:35,880 --> 01:41:39,000
and um and then he just left okay okay

1988
01:41:39,000 --> 01:41:41,280
I'll get back to you you know and and

1989
01:41:41,280 --> 01:41:42,719
but it was a valid question because

1990
01:41:42,719 --> 01:41:46,199
you're running scans in Ireland which

1991
01:41:46,199 --> 01:41:49,260
pick up this very bad vulnerability same

1992
01:41:49,260 --> 01:41:52,320
scans in Cape Town the Cape Town region

1993
01:41:52,320 --> 01:41:55,020
do not what does that mean for people

1994
01:41:55,020 --> 01:41:56,580
like us who have to protect information

1995
01:41:56,580 --> 01:41:58,199
that resides in South Africa because

1996
01:41:58,199 --> 01:42:00,900
government wants the information for our

1997
01:42:00,900 --> 01:42:04,139
citizens to stay here poppy right so

1998
01:42:04,139 --> 01:42:05,940
yeah so that's a that's a big one that's

1999
01:42:05,940 --> 01:42:07,320
a very very big one I don't know if I

2000
01:42:07,320 --> 01:42:09,179
answered your question or if I went on a

2001
01:42:09,179 --> 01:42:11,719
tangent there

2002
01:42:12,199 --> 01:42:15,559
okay cool

2003
01:42:16,800 --> 01:42:19,320
yeah now 100 that I've seen them I've

2004
01:42:19,320 --> 01:42:20,880
seen them in practice and I'm speaking

2005
01:42:20,880 --> 01:42:22,920
to AWS and I'm telling them you should

2006
01:42:22,920 --> 01:42:26,040
ask fix it you know and uh and yeah

2007
01:42:26,040 --> 01:42:28,679
they're trying they're trying I guess

2008
01:42:28,679 --> 01:42:31,100
cool

2009
01:42:36,540 --> 01:42:37,560
yeah

2010
01:42:37,560 --> 01:42:38,820
yeah

2011
01:42:38,820 --> 01:42:42,239
yeah not 100 100 I agree with you man I

2012
01:42:42,239 --> 01:42:45,919
agree with you any other questions

2013
01:43:00,300 --> 01:43:01,440
yeah

2014
01:43:01,440 --> 01:43:04,260
you say Falco okay cool is that a

2015
01:43:04,260 --> 01:43:07,639
service mesh type of uh

2016
01:43:10,980 --> 01:43:13,380
okay okay

2017
01:43:13,380 --> 01:43:15,800
cool

2018
01:43:16,260 --> 01:43:18,600
thanks I'll remember that Falco Falco

2019
01:43:18,600 --> 01:43:21,980
thanks I'll remember that man thanks

2020
01:43:41,820 --> 01:43:45,080
yeah yeah

2021
01:44:12,719 --> 01:44:15,360
yeah so

2022
01:44:15,360 --> 01:44:17,699
you know how I'm going to answer your

2023
01:44:17,699 --> 01:44:19,440
question is I've I spoke to a couple of

2024
01:44:19,440 --> 01:44:20,820
csos and I'm like

2025
01:44:20,820 --> 01:44:23,159
you know companies getting hacked csos

2026
01:44:23,159 --> 01:44:25,679
getting sacked it's a it's a shame you

2027
01:44:25,679 --> 01:44:27,060
know when a company gets hacked and then

2028
01:44:27,060 --> 01:44:29,159
the CSO gets sacked you know

2029
01:44:29,159 --> 01:44:31,920
um so the answer to to your question is

2030
01:44:31,920 --> 01:44:34,260
how far do you want to go you can look

2031
01:44:34,260 --> 01:44:35,580
at it from a commercial perspective

2032
01:44:35,580 --> 01:44:37,260
you're paying more for that peace of

2033
01:44:37,260 --> 01:44:39,540
mind and you're offloading that risk

2034
01:44:39,540 --> 01:44:41,159
that you know you're no longer

2035
01:44:41,159 --> 01:44:43,739
responsible for if it gets hacked that's

2036
01:44:43,739 --> 01:44:45,719
how I would look at it you know and um

2037
01:44:45,719 --> 01:44:48,000
but you you're paying premium for that

2038
01:44:48,000 --> 01:44:50,580
for that peace of mind you know because

2039
01:44:50,580 --> 01:44:52,679
now you're that Cesar who's spending

2040
01:44:52,679 --> 01:44:55,199
more money than you should be but you

2041
01:44:55,199 --> 01:44:56,699
know that if somebody gets into your

2042
01:44:56,699 --> 01:44:59,699
network you get to point the finger you

2043
01:44:59,699 --> 01:45:01,560
know so that's another way of looking at

2044
01:45:01,560 --> 01:45:03,920
it you know

2045
01:45:04,440 --> 01:45:06,980
foreign

2046
01:45:11,040 --> 01:45:12,300
yeah

2047
01:45:12,300 --> 01:45:14,300
yeah

2048
01:45:21,780 --> 01:45:22,920
um

2049
01:45:22,920 --> 01:45:26,280
so SSM is pretty cool now for that uh

2050
01:45:26,280 --> 01:45:28,020
you can you can kind of associate into

2051
01:45:28,020 --> 01:45:29,580
it using your browser without having to

2052
01:45:29,580 --> 01:45:31,320
expose it

2053
01:45:31,320 --> 01:45:33,060
um so you run the instance you put it

2054
01:45:33,060 --> 01:45:35,100
you put an agent on there an SSM agent

2055
01:45:35,100 --> 01:45:37,380
on there and you'll be able to interact

2056
01:45:37,380 --> 01:45:39,000
with the terminal via the browser

2057
01:45:39,000 --> 01:45:40,920
without having to you know set up keys

2058
01:45:40,920 --> 01:45:42,600
and things like that

2059
01:45:42,600 --> 01:45:44,219
um and using putty or whatever to

2060
01:45:44,219 --> 01:45:46,199
connect over the Internet uh you'll just

2061
01:45:46,199 --> 01:45:49,199
be you know HTTP your way into that

2062
01:45:49,199 --> 01:45:51,360
so yeah so that's that's kind of um

2063
01:45:51,360 --> 01:45:53,400
without revealing too much about how we

2064
01:45:53,400 --> 01:45:55,260
do what we do that's that's a good way

2065
01:45:55,260 --> 01:45:57,119
to do it but there are other ways to you

2066
01:45:57,119 --> 01:45:59,340
know skin that cat as well

2067
01:45:59,340 --> 01:46:01,260
I'm running out of water guys

2068
01:46:01,260 --> 01:46:03,860
better wrap up

2069
01:46:05,159 --> 01:46:07,879
any other questions

2070
01:46:10,260 --> 01:46:13,159
thank you so much

2071
01:46:35,639 --> 01:46:38,540
hello hello

2072
01:46:41,580 --> 01:46:44,040
there will be a small break uh lunch

2073
01:46:44,040 --> 01:46:47,060
until one o'clock

2074
01:46:48,900 --> 01:46:53,340
there's also a CTF Hector box CTF

2075
01:46:53,340 --> 01:46:55,020
happening at the moment if you guys go

2076
01:46:55,020 --> 01:46:56,520
to our website you'll get all the

2077
01:46:56,520 --> 01:46:59,060
details in there

2078
02:32:44,340 --> 02:32:46,819
sure

2079
02:40:33,899 --> 02:40:36,439
Gmail

2080
02:40:53,220 --> 02:40:55,140
cool thanks everyone for coming I think

2081
02:40:55,140 --> 02:40:58,039
we're just going to give it two

2082
02:41:14,640 --> 02:41:16,560
ready

2083
02:41:16,560 --> 02:41:17,880
cool

2084
02:41:17,880 --> 02:41:19,500
first I just want to say thanks to

2085
02:41:19,500 --> 02:41:22,160
everyone who came

2086
02:41:28,800 --> 02:41:31,080
so I'll be speaking on abusing AWS

2087
02:41:31,080 --> 02:41:33,500
permissions

2088
02:41:39,660 --> 02:41:43,080
so firstly who am I or if you're an AWS

2089
02:41:43,080 --> 02:41:45,780
Nerd Like Me AWS STS get quarter

2090
02:41:45,780 --> 02:41:47,700
identity

2091
02:41:47,700 --> 02:41:50,460
my name is Jason I work at gmail as a

2092
02:41:50,460 --> 02:41:53,160
cyber security engineer and I've been in

2093
02:41:53,160 --> 02:41:55,439
the industry from a decade which

2094
02:41:55,439 --> 02:41:58,080
is roughly five years which I'm

2095
02:41:58,080 --> 02:42:01,100
basically dog years in this

2096
02:42:02,880 --> 02:42:05,220
and I left my email address there in

2097
02:42:05,220 --> 02:42:08,179
case you want to contact me

2098
02:42:21,780 --> 02:42:24,420
quick agenda what we're going to do is

2099
02:42:24,420 --> 02:42:25,800
we're going to cover some basic access

2100
02:42:25,800 --> 02:42:27,780
principles within AWS I want everyone to

2101
02:42:27,780 --> 02:42:29,580
be up to speed with what everything

2102
02:42:29,580 --> 02:42:31,859
means before we jump into something a

2103
02:42:31,859 --> 02:42:33,720
little bit more fun

2104
02:42:33,720 --> 02:42:36,380
ever seen any

2105
02:42:42,660 --> 02:42:45,080
cover

2106
02:42:53,220 --> 02:42:56,340
cool so first things first

2107
02:42:56,340 --> 02:42:59,700
this is the flow diagram that displays

2108
02:42:59,700 --> 02:43:01,859
whether an action can be executed on a

2109
02:43:01,859 --> 02:43:03,960
recent release or not this is displayed

2110
02:43:03,960 --> 02:43:06,899
by this is given by AWS the source is at

2111
02:43:06,899 --> 02:43:09,800
the bottom and we just

2112
02:43:10,800 --> 02:43:13,680
first we look at what AWS does is there

2113
02:43:13,680 --> 02:43:16,280
low policies for

2114
02:43:17,819 --> 02:43:19,920
policies also

2115
02:43:19,920 --> 02:43:22,260
or status

2116
02:43:22,260 --> 02:43:24,479
other than that we started SCP

2117
02:43:24,479 --> 02:43:28,699
control policies which are organization

2118
02:43:34,140 --> 02:43:36,800
part I think

2119
02:43:40,140 --> 02:43:42,540
and these are things that we're gonna

2120
02:43:42,540 --> 02:43:44,040
connect

2121
02:43:44,040 --> 02:43:47,479
I just want to mention that

2122
02:43:49,620 --> 02:43:52,260
an explicit deny means that you state

2123
02:43:52,260 --> 02:43:54,540
the this resource cannot perform this

2124
02:43:54,540 --> 02:43:55,439
action

2125
02:43:55,439 --> 02:43:58,560
where an implicit deny means that

2126
02:43:58,560 --> 02:44:00,660
there's no allowed permissions

2127
02:44:00,660 --> 02:44:03,619
so now by default

2128
02:44:05,220 --> 02:44:06,720
as I said these are the two we're going

2129
02:44:06,720 --> 02:44:08,520
to focus on because I think most

2130
02:44:08,520 --> 02:44:12,080
companies focus on these two

2131
02:44:14,700 --> 02:44:16,380
so at a high level what is a policy

2132
02:44:16,380 --> 02:44:17,280
right

2133
02:44:17,280 --> 02:44:19,979
policy is a document that contains a

2134
02:44:19,979 --> 02:44:21,780
number of statements that determine

2135
02:44:21,780 --> 02:44:25,080
whether or not an action can be

2136
02:44:25,080 --> 02:44:26,580
a statement generally has an effect

2137
02:44:26,580 --> 02:44:29,399
action and a resource as well as

2138
02:44:29,399 --> 02:44:32,240
sometimes

2139
02:44:39,600 --> 02:44:41,640
you can also add wild cards to this

2140
02:44:41,640 --> 02:44:44,000
which is

2141
02:44:46,560 --> 02:44:47,939
so we're looking at resource-based

2142
02:44:47,939 --> 02:44:51,859
policies essentially if we go back to

2143
02:44:52,620 --> 02:44:54,899
you can see that resource-based policies

2144
02:44:54,899 --> 02:44:58,080
the the logic is looked at first before

2145
02:44:58,080 --> 02:45:00,479
identity-based policies so what I mean

2146
02:45:00,479 --> 02:45:02,899
by this

2147
02:45:03,060 --> 02:45:05,220
firstly the resource-based policies can

2148
02:45:05,220 --> 02:45:06,960
allow principles outside of the current

2149
02:45:06,960 --> 02:45:09,359
account to interact with

2150
02:45:09,359 --> 02:45:11,399
and a lot of companies Focus their

2151
02:45:11,399 --> 02:45:13,800
efforts on ensuring that their identity

2152
02:45:13,800 --> 02:45:16,460
based policies

2153
02:45:17,100 --> 02:45:18,479
but

2154
02:45:18,479 --> 02:45:21,120
if your resource-based policy if someone

2155
02:45:21,120 --> 02:45:22,800
creates a resource-based policy that

2156
02:45:22,800 --> 02:45:25,020
allows an action

2157
02:45:25,020 --> 02:45:27,920
is no identity part

2158
02:45:30,600 --> 02:45:32,819
well then all the safeguards you've put

2159
02:45:32,819 --> 02:45:35,040
in place around identity based policies

2160
02:45:35,040 --> 02:45:37,319
are essentially essentially as good as

2161
02:45:37,319 --> 02:45:39,619
this gate

2162
02:45:41,760 --> 02:45:43,380
and there's also some permission

2163
02:45:43,380 --> 02:45:45,720
permissive options available directly

2164
02:45:45,720 --> 02:45:47,340
from the console so if you're in the AWS

2165
02:45:47,340 --> 02:45:49,140
console

2166
02:45:49,140 --> 02:45:51,600
um there might be some very permissive

2167
02:45:51,600 --> 02:45:53,819
actions that can

2168
02:45:53,819 --> 02:45:56,899
take what I mean by this is we've

2169
02:46:00,000 --> 02:46:04,040
buckets I decided that we would look at

2170
02:46:05,880 --> 02:46:08,819
simple notifications it's

2171
02:46:08,819 --> 02:46:10,500
I'm definitely going to undersell the

2172
02:46:10,500 --> 02:46:12,540
service it's a really cool service but

2173
02:46:12,540 --> 02:46:14,040
essentially what it allows you to do is

2174
02:46:14,040 --> 02:46:17,340
send people send emails and sms's and

2175
02:46:17,340 --> 02:46:19,439
other notification types to different

2176
02:46:19,439 --> 02:46:22,620
Services as well as users

2177
02:46:22,620 --> 02:46:25,500
and when you're creating an SMS topic

2178
02:46:25,500 --> 02:46:27,840
from the console this is the access

2179
02:46:27,840 --> 02:46:29,640
policy options that

2180
02:46:29,640 --> 02:46:31,740
from the console

2181
02:46:31,740 --> 02:46:33,420
and what I find quite interesting is

2182
02:46:33,420 --> 02:46:35,340
that you given with the basic options

2183
02:46:35,340 --> 02:46:37,340
you're given some very limited

2184
02:46:37,340 --> 02:46:40,260
options to choose from only the topic

2185
02:46:40,260 --> 02:46:43,280
owner everyone and only

2186
02:46:44,399 --> 02:46:45,899
so if we look at the first one right

2187
02:46:45,899 --> 02:46:48,300
only the topic owner what exactly does

2188
02:46:48,300 --> 02:46:49,500
that mean

2189
02:46:49,500 --> 02:46:52,260
right and the only way to really see

2190
02:46:52,260 --> 02:46:54,420
what that means is to look at the policy

2191
02:46:54,420 --> 02:46:55,500
on the right

2192
02:46:55,500 --> 02:46:57,479
as you can see from this policy it has a

2193
02:46:57,479 --> 02:46:58,740
whole bunch of permissions publish

2194
02:46:58,740 --> 02:47:01,439
remove permissions set topic attributes

2195
02:47:01,439 --> 02:47:03,000
and so on

2196
02:47:03,000 --> 02:47:04,800
and on the resource and then it has a

2197
02:47:04,800 --> 02:47:05,460
condition

2198
02:47:05,460 --> 02:47:08,160
so any

2199
02:47:08,160 --> 02:47:10,260
within this account can perform those

2200
02:47:10,260 --> 02:47:11,460
actions by default and this is the

2201
02:47:11,460 --> 02:47:13,020
default

2202
02:47:13,020 --> 02:47:15,600
default so essentially this policy is

2203
02:47:15,600 --> 02:47:17,580
permissive by default

2204
02:47:17,580 --> 02:47:18,960
if you created this resource-based

2205
02:47:18,960 --> 02:47:20,460
policy regardless of what permissions

2206
02:47:20,460 --> 02:47:22,020
you have given

2207
02:47:22,020 --> 02:47:24,600
other use other IIM entities such as

2208
02:47:24,600 --> 02:47:27,300
users or roles

2209
02:47:27,300 --> 02:47:30,359
if there are no explicit denies then

2210
02:47:30,359 --> 02:47:31,380
they would be able to perform those

2211
02:47:31,380 --> 02:47:33,780
actions by default

2212
02:47:33,780 --> 02:47:36,540
now what I found more interesting is the

2213
02:47:36,540 --> 02:47:38,580
one that says everyone and the little

2214
02:47:38,580 --> 02:47:42,000
description says anybody can publish

2215
02:47:42,000 --> 02:47:43,740
so what does that actually mean what is

2216
02:47:43,740 --> 02:47:45,720
anybody in AWS

2217
02:47:45,720 --> 02:47:47,580
so if we look at the policy on the right

2218
02:47:47,580 --> 02:47:51,600
show it says principal AWS star

2219
02:47:51,600 --> 02:47:53,220
that means that's a wild card for

2220
02:47:53,220 --> 02:47:55,859
anything that means any AWS account

2221
02:47:55,859 --> 02:48:00,080
anyone who has any object Within

2222
02:48:00,240 --> 02:48:03,240
an or IM entity could perform that

2223
02:48:03,240 --> 02:48:06,080
publish attribute

2224
02:48:06,960 --> 02:48:08,640
so essentially what you're doing by

2225
02:48:08,640 --> 02:48:11,040
clicking that everyone is allowing

2226
02:48:11,040 --> 02:48:13,140
anyone in the world to publish to your

2227
02:48:13,140 --> 02:48:14,220
topic

2228
02:48:14,220 --> 02:48:15,840
and if you click to everyone for the

2229
02:48:15,840 --> 02:48:18,920
Subscribe action then you can

2230
02:48:24,960 --> 02:48:26,399
send some quick look at identity based

2231
02:48:26,399 --> 02:48:27,660
policies these are policies that are

2232
02:48:27,660 --> 02:48:30,060
attached to users groups and roles users

2233
02:48:30,060 --> 02:48:34,080
are intended to be real live users so so

2234
02:48:34,080 --> 02:48:36,920
human people

2235
02:48:37,920 --> 02:48:40,680
roles and and roles are essentially the

2236
02:48:40,680 --> 02:48:44,479
service the service board users that can

2237
02:48:45,479 --> 02:48:47,760
can attach multiple documents to

2238
02:48:47,760 --> 02:48:48,960
any of these

2239
02:48:48,960 --> 02:48:51,420
some actions that are

2240
02:48:51,420 --> 02:48:52,920
allow that entity

2241
02:48:52,920 --> 02:48:55,319
or permissions or give someone else more

2242
02:48:55,319 --> 02:48:56,700
permissions either in conjunction with

2243
02:48:56,700 --> 02:49:00,380
other actions or just by themselves

2244
02:49:04,680 --> 02:49:07,800
there's just a quick video

2245
02:49:07,800 --> 02:49:10,200
so just a demo on what we've just spoken

2246
02:49:10,200 --> 02:49:11,939
about I'm going to show you that I've

2247
02:49:11,939 --> 02:49:13,439
created a user

2248
02:49:13,439 --> 02:49:14,819
named Jason

2249
02:49:14,819 --> 02:49:16,140
it's me

2250
02:49:16,140 --> 02:49:19,580
no group so no inherited permissions

2251
02:49:20,939 --> 02:49:22,380
either they actually have no permissions

2252
02:49:22,380 --> 02:49:24,479
they've been given absolutely no

2253
02:49:24,479 --> 02:49:25,560
permissions

2254
02:49:25,560 --> 02:49:27,420
so because they've been given no

2255
02:49:27,420 --> 02:49:31,140
permissions it's in implicit deny

2256
02:49:31,140 --> 02:49:33,680
so let's look at the

2257
02:49:33,780 --> 02:49:35,220
end if we look at the topic I created

2258
02:49:35,220 --> 02:49:37,020
this topic using the default basically

2259
02:49:37,020 --> 02:49:38,280
just giving it a name and clicking next

2260
02:49:38,280 --> 02:49:40,520
next

2261
02:49:41,220 --> 02:49:42,660
policy document

2262
02:49:42,660 --> 02:49:45,960
or the access policy

2263
02:49:45,960 --> 02:49:48,899
we stated any AWS account can interact

2264
02:49:48,899 --> 02:49:50,040
with this

2265
02:49:50,040 --> 02:49:53,660
perform any of these actions and

2266
02:49:54,240 --> 02:49:57,240
IM entity comes from that account

2267
02:49:57,240 --> 02:49:58,859
which it does right it just doesn't have

2268
02:49:58,859 --> 02:50:01,939
any permissions given to

2269
02:50:02,340 --> 02:50:05,540
so now we can just see here

2270
02:50:06,240 --> 02:50:08,640
and I'm logged in as that user and I'm

2271
02:50:08,640 --> 02:50:11,160
going to create an additional

2272
02:50:11,160 --> 02:50:12,359
um we saw that there was only one user

2273
02:50:12,359 --> 02:50:13,380
I'm going to create an additional

2274
02:50:13,380 --> 02:50:14,760
subscription

2275
02:50:14,760 --> 02:50:17,720
and we run it because

2276
02:50:18,660 --> 02:50:20,760
we go back

2277
02:50:20,760 --> 02:50:24,020
in testing three which is the one

2278
02:50:26,460 --> 02:50:29,599
we can see that testing three was

2279
02:50:30,060 --> 02:50:32,580
and that's because if we look at

2280
02:50:32,580 --> 02:50:35,220
the stock this flowchart here

2281
02:50:35,220 --> 02:50:37,140
we can see that resource-based policies

2282
02:50:37,140 --> 02:50:39,240
are evaluated before identity based

2283
02:50:39,240 --> 02:50:40,140
policies

2284
02:50:40,140 --> 02:50:42,540
essentially meaning that the permissions

2285
02:50:42,540 --> 02:50:47,000
given to that user unless they've Fallen

2286
02:50:47,819 --> 02:50:50,160
explicit deny

2287
02:50:50,160 --> 02:50:53,180
don't actually matter

2288
02:50:55,439 --> 02:50:57,840
and that's what I meant by this gate uh

2289
02:50:57,840 --> 02:50:59,819
Focus all your effort on identity based

2290
02:50:59,819 --> 02:51:02,040
policies it's not very effective against

2291
02:51:02,040 --> 02:51:04,020
resources that have resource-based

2292
02:51:04,020 --> 02:51:06,380
policies

2293
02:51:13,319 --> 02:51:15,359
so now how can we apply all techniques

2294
02:51:15,359 --> 02:51:18,600
or old mindsets to these new Cloud

2295
02:51:18,600 --> 02:51:20,460
problems

2296
02:51:20,460 --> 02:51:22,800
so we've all heard of Bloodhound I think

2297
02:51:22,800 --> 02:51:23,760
there's no one in this room who hasn't

2298
02:51:23,760 --> 02:51:25,800
heard of that hunt which allows you to

2299
02:51:25,800 --> 02:51:27,479
see uh different

2300
02:51:27,479 --> 02:51:29,460
how things can interact with each other

2301
02:51:29,460 --> 02:51:31,620
different resources is a similar tool

2302
02:51:31,620 --> 02:51:33,720
for AWS that was written by Craig

2303
02:51:33,720 --> 02:51:36,060
which is very cool and it allows very

2304
02:51:36,060 --> 02:51:38,399
similar things but because of how many

2305
02:51:38,399 --> 02:51:39,720
permissions and how many different

2306
02:51:39,720 --> 02:51:41,760
resources there are and resources are

2307
02:51:41,760 --> 02:51:44,280
added literally all the time we need to

2308
02:51:44,280 --> 02:51:46,560
apply our hacking mindsets when looking

2309
02:51:46,560 --> 02:51:48,479
at stuff like this so I'm going to show

2310
02:51:48,479 --> 02:51:49,979
you the demo that I'm going to show you

2311
02:51:49,979 --> 02:51:52,620
is a path that these tools actually did

2312
02:51:52,620 --> 02:51:55,100
not pick up

2313
02:51:57,240 --> 02:51:58,680
and now we're going to jump into the fun

2314
02:51:58,680 --> 02:52:00,920
stuff

2315
02:52:01,439 --> 02:52:03,300
so what I've done is I thought I'll take

2316
02:52:03,300 --> 02:52:05,520
the Capital One hack as an entry point

2317
02:52:05,520 --> 02:52:07,140
to everyone I think is familiar with

2318
02:52:07,140 --> 02:52:08,399
that

2319
02:52:08,399 --> 02:52:09,840
um we've been testing a web app and we

2320
02:52:09,840 --> 02:52:10,620
see

2321
02:52:10,620 --> 02:52:14,220
we seeks a call to this web service and

2322
02:52:14,220 --> 02:52:16,319
it sends in that parameter so what we do

2323
02:52:16,319 --> 02:52:18,120
is we change that

2324
02:52:18,120 --> 02:52:21,060
URL parameter to google.com or any other

2325
02:52:21,060 --> 02:52:24,120
website and we realize that it returns

2326
02:52:24,120 --> 02:52:25,560
that data to us

2327
02:52:25,560 --> 02:52:27,600
familiar with web application

2328
02:52:27,600 --> 02:52:29,939
security you'll know that this is a

2329
02:52:29,939 --> 02:52:32,819
server side request forgery ssrf and we

2330
02:52:32,819 --> 02:52:36,000
can essentially have the networking

2331
02:52:36,000 --> 02:52:38,040
capability of the server we can make the

2332
02:52:38,040 --> 02:52:40,740
server perform HTTP requests on our

2333
02:52:40,740 --> 02:52:43,220
behalf

2334
02:52:43,260 --> 02:52:46,080
cool so the first thing I would do is

2335
02:52:46,080 --> 02:52:50,399
first understand is that an ec2 instance

2336
02:52:50,399 --> 02:52:52,439
performing NS lookup to see if there's a

2337
02:52:52,439 --> 02:52:54,300
DNS name attached to it

2338
02:52:54,300 --> 02:52:57,300
and we see that it is an ec2 instance

2339
02:52:57,300 --> 02:53:01,200
if you're in the AWS environment or

2340
02:53:01,200 --> 02:53:03,540
you're very familiar with AWS topics

2341
02:53:03,540 --> 02:53:05,520
your spidey sensors will be absolutely

2342
02:53:05,520 --> 02:53:07,920
tingling at this point thinking is there

2343
02:53:07,920 --> 02:53:10,500
a role attached

2344
02:53:10,500 --> 02:53:12,479
because you have ssrf you have the

2345
02:53:12,479 --> 02:53:14,899
ability to query the metadata service

2346
02:53:14,899 --> 02:53:16,560
and you might be able to give

2347
02:53:16,560 --> 02:53:19,220
credentials

2348
02:53:19,380 --> 02:53:21,479
so let's jump into a little bit of a

2349
02:53:21,479 --> 02:53:23,778
demo

2350
02:53:26,100 --> 02:53:27,540
first things first I'm just going to run

2351
02:53:27,540 --> 02:53:29,960
my

2352
02:53:30,960 --> 02:53:34,460
srf vulnerable web app

2353
02:53:36,000 --> 02:53:38,899
to save time

2354
02:53:43,439 --> 02:53:47,279
and essentially the metadata service

2355
02:53:47,279 --> 02:53:49,620
allows us to query information about the

2356
02:53:49,620 --> 02:53:51,840
ec2 instance and at a fundamental level

2357
02:53:51,840 --> 02:53:54,359
we are allowed to actually obtain the

2358
02:53:54,359 --> 02:53:56,819
AWS credentials for that role so it

2359
02:53:56,819 --> 02:53:58,319
works the same as a user account right

2360
02:53:58,319 --> 02:54:03,199
it has an access key and a secret key

2361
02:54:03,420 --> 02:54:06,439
so if we run this

2362
02:54:07,200 --> 02:54:08,580
basically what I'm doing here is I'm

2363
02:54:08,580 --> 02:54:10,560
querying the meta service to find out if

2364
02:54:10,560 --> 02:54:12,660
there is a role attached and it came

2365
02:54:12,660 --> 02:54:15,540
back with yes there's a

2366
02:54:15,540 --> 02:54:18,740
there's a oh sorry about that

2367
02:54:28,260 --> 02:54:30,120
so I query the metadata service to find

2368
02:54:30,120 --> 02:54:31,680
out if there's any IEM security

2369
02:54:31,680 --> 02:54:34,260
credentials attached to this or a role

2370
02:54:34,260 --> 02:54:36,359
and there is a role it's called ec2

2371
02:54:36,359 --> 02:54:38,279
Lander role

2372
02:54:38,279 --> 02:54:40,620
so now we can do is actually obtain the

2373
02:54:40,620 --> 02:54:43,140
credentials for that role by just using

2374
02:54:43,140 --> 02:54:45,779
the same endpoint the AWS metadata

2375
02:54:45,779 --> 02:54:48,560
service endpoint

2376
02:54:51,000 --> 02:54:53,760
and now we see that we have the access

2377
02:54:53,760 --> 02:54:56,520
key and the secret and the secret key as

2378
02:54:56,520 --> 02:54:57,840
well as a token

2379
02:54:57,840 --> 02:55:02,000
so if we do an AWS sorry

2380
02:55:03,660 --> 02:55:06,779
sorry so what I'm doing is configuring

2381
02:55:06,779 --> 02:55:09,899
my local AWS instance let's give it a my

2382
02:55:09,899 --> 02:55:13,580
local AWS CLI

2383
02:55:16,560 --> 02:55:18,840
uh as with live demos looks like it's

2384
02:55:18,840 --> 02:55:21,319
already broken

2385
02:55:28,439 --> 02:55:32,100
okay cool well let's just start again

2386
02:55:32,100 --> 02:55:33,300
looks like it's taking a bit of time

2387
02:55:33,300 --> 02:55:35,040
internet slow

2388
02:55:35,040 --> 02:55:37,520
cool

2389
02:56:17,100 --> 02:56:18,240
so this is the file where your

2390
02:56:18,240 --> 02:56:19,319
credentials are stored when you

2391
02:56:19,319 --> 02:56:22,340
configure the AWS service

2392
02:56:22,740 --> 02:56:25,520
decision took

2393
02:56:27,779 --> 02:56:28,979
and kill the whole line but I can't

2394
02:56:28,979 --> 02:56:31,979
remember what the variable name is

2395
02:56:31,979 --> 02:56:33,300
but essentially what I want to show you

2396
02:56:33,300 --> 02:56:34,439
is that

2397
02:56:34,439 --> 02:56:38,660
it's not you're not required

2398
02:57:08,220 --> 02:57:09,960
okay but anyways what I'm trying to get

2399
02:57:09,960 --> 02:57:12,720
to with this is we can see

2400
02:57:12,720 --> 02:57:16,319
we have ec2 Lambda roll on this instance

2401
02:57:16,319 --> 02:57:18,300
ID what I'm trying to get with this is

2402
02:57:18,300 --> 02:57:20,460
those credentials don't have to be used

2403
02:57:20,460 --> 02:57:23,340
on the specific ec2 instance that the

2404
02:57:23,340 --> 02:57:24,600
role is attached to you can actually use

2405
02:57:24,600 --> 02:57:26,580
those credentials wherever you want they

2406
02:57:26,580 --> 02:57:31,680
work just like normal access tokens

2407
02:57:41,460 --> 02:57:43,740
cool now you have compromised AWS

2408
02:57:43,740 --> 02:57:45,600
credentials now what what are you going

2409
02:57:45,600 --> 02:57:47,880
to do with it right if you're doing a

2410
02:57:47,880 --> 02:57:49,080
pen test your goal is to find all

2411
02:57:49,080 --> 02:57:50,520
avenues of attack right

2412
02:57:50,520 --> 02:57:52,319
but if you're doing something nefarious

2413
02:57:52,319 --> 02:57:55,859
or a red team what what is your goal and

2414
02:57:55,859 --> 02:57:58,740
generally the da equivalent is all

2415
02:57:58,740 --> 02:58:01,080
actions over all resources which

2416
02:58:01,080 --> 02:58:02,160
essentially allows you to perform

2417
02:58:02,160 --> 02:58:04,439
whatever you want on whatever you want

2418
02:58:04,439 --> 02:58:07,279
assuming

2419
02:58:08,939 --> 02:58:12,180
that there are no scps in place or

2420
02:58:12,180 --> 02:58:13,979
resource-based policies stopping you

2421
02:58:13,979 --> 02:58:16,938
from doing what you want to do

2422
02:58:22,080 --> 02:58:23,220
so the first thing we're going to run

2423
02:58:23,220 --> 02:58:25,460
here

2424
02:58:27,359 --> 02:58:28,920
is we're going to use our newly found

2425
02:58:28,920 --> 02:58:31,520
credentials

2426
02:58:34,080 --> 02:58:35,819
to find out if we have what what

2427
02:58:35,819 --> 02:58:39,019
policies we have attached to them

2428
02:58:40,920 --> 02:58:44,600
for this we're just going to use the CLI

2429
02:58:52,439 --> 02:58:55,140
and we have three policies and already I

2430
02:58:55,140 --> 02:58:57,300
can see one that is awesome if we look

2431
02:58:57,300 --> 02:58:59,819
at these policies over here it would

2432
02:58:59,819 --> 02:59:02,819
have the AWS account ID if it was

2433
02:59:02,819 --> 02:59:04,740
created within that account if it says

2434
02:59:04,740 --> 02:59:06,359
AWS there's a managed policy which

2435
02:59:06,359 --> 02:59:08,460
essentially means AWS manage that policy

2436
02:59:08,460 --> 02:59:11,340
and it's available to any account so you

2437
02:59:11,340 --> 02:59:12,779
can use your own account to see what

2438
02:59:12,779 --> 02:59:14,640
permissions you have without doing

2439
02:59:14,640 --> 02:59:18,300
anything weird and if we look at

2440
02:59:18,300 --> 02:59:21,180
one of the interesting policies

2441
02:59:21,180 --> 02:59:23,939
AWS Lambda full access this is also an

2442
02:59:23,939 --> 02:59:27,080
AWS managed policy

2443
02:59:31,380 --> 02:59:32,520
I'm just going to have a quick look at

2444
02:59:32,520 --> 02:59:35,760
it and look at the permissions so the

2445
02:59:35,760 --> 02:59:37,140
Assumption there is really that you'll

2446
02:59:37,140 --> 02:59:39,899
have all permissions over

2447
02:59:39,899 --> 02:59:41,220
Lambda

2448
02:59:41,220 --> 02:59:43,380
but we're not one

2449
02:59:43,380 --> 02:59:45,920
once a roll

2450
02:59:54,180 --> 02:59:55,439
so what's interesting here is if you

2451
02:59:55,439 --> 02:59:57,240
look at the description it says grants

2452
02:59:57,240 --> 03:00:00,479
full access to AWS Lambda service AWS

2453
03:00:00,479 --> 03:00:02,580
Lambda console features and other

2454
03:00:02,580 --> 03:00:05,040
related services

2455
03:00:05,040 --> 03:00:06,420
we're not going to look at all of the

2456
03:00:06,420 --> 03:00:07,620
statements we can already see that we

2457
03:00:07,620 --> 03:00:08,760
can do anything on Lambda which

2458
03:00:08,760 --> 03:00:10,020
essentially means we can create a Lambda

2459
03:00:10,020 --> 03:00:12,240
that we want execute whatever code we we

2460
03:00:12,240 --> 03:00:13,740
want if you're not familiar with Lambda

2461
03:00:13,740 --> 03:00:15,840
essentially it's something that allows

2462
03:00:15,840 --> 03:00:17,580
you to run code without thinking of the

2463
03:00:17,580 --> 03:00:20,479
underlying infrastructure

2464
03:00:22,080 --> 03:00:23,700
and then this is the statement that's

2465
03:00:23,700 --> 03:00:26,220
also quite interesting so what we can do

2466
03:00:26,220 --> 03:00:28,319
is we're allowed to pass a role

2467
03:00:28,319 --> 03:00:31,080
essentially attach a role to an AWS

2468
03:00:31,080 --> 03:00:35,340
instance sorry an AWS Lambda function

2469
03:00:35,340 --> 03:00:36,899
what's quite cool about that is if there

2470
03:00:36,899 --> 03:00:38,880
is an existing role with different

2471
03:00:38,880 --> 03:00:41,340
permissions to what we already have

2472
03:00:41,340 --> 03:00:44,640
we automatically gain those permissions

2473
03:00:44,640 --> 03:00:46,859
because we can execute code with that

2474
03:00:46,859 --> 03:00:48,479
and that's

2475
03:00:48,479 --> 03:00:51,240
exactly what we're going to do

2476
03:00:51,240 --> 03:00:53,640
so just to show you that we're still

2477
03:00:53,640 --> 03:00:55,620
that user even in this console in this

2478
03:00:55,620 --> 03:00:58,100
terminal

2479
03:01:09,779 --> 03:01:11,460
cool we are

2480
03:01:11,460 --> 03:01:13,200
and I'm going to create the Lambda

2481
03:01:13,200 --> 03:01:14,819
function

2482
03:01:14,819 --> 03:01:18,240
a pass a role that we previously found

2483
03:01:18,240 --> 03:01:19,740
through that

2484
03:01:19,740 --> 03:01:22,640
that one is not to go

2485
03:01:24,600 --> 03:01:28,340
if we look at the roles

2486
03:01:32,160 --> 03:01:35,479
if we list all the roles in the account

2487
03:01:36,420 --> 03:01:38,399
essentially what we're looking for is

2488
03:01:38,399 --> 03:01:41,340
one that allows the principle so the

2489
03:01:41,340 --> 03:01:43,700
service to be

2490
03:01:43,700 --> 03:01:45,899
lambda.amazon.aws which corresponds with

2491
03:01:45,899 --> 03:01:48,060
the policy that we had so we can only

2492
03:01:48,060 --> 03:01:52,080
pass policies for that service

2493
03:01:52,080 --> 03:01:53,479
um

2494
03:01:53,479 --> 03:01:55,439
towards the end but essentially you

2495
03:01:55,439 --> 03:01:57,540
would look at these

2496
03:01:57,540 --> 03:01:59,220
closely

2497
03:01:59,220 --> 03:02:01,800
this Vault roll

2498
03:02:01,800 --> 03:02:04,020
what I see that is quite interesting is

2499
03:02:04,020 --> 03:02:05,520
SSM Lam

2500
03:02:05,520 --> 03:02:07,140
B manager

2501
03:02:07,140 --> 03:02:09,300
SSM stands out to me because that's the

2502
03:02:09,300 --> 03:02:11,700
service manager within AWS which is

2503
03:02:11,700 --> 03:02:13,260
essentially something that allows you to

2504
03:02:13,260 --> 03:02:15,479
control all ec2 instances that are in

2505
03:02:15,479 --> 03:02:17,040
the SSM Fleet

2506
03:02:17,040 --> 03:02:20,100
we can run code push software

2507
03:02:20,100 --> 03:02:22,439
control those ec2 instances

2508
03:02:22,439 --> 03:02:24,359
so that's quite an interesting one to me

2509
03:02:24,359 --> 03:02:25,620
and if we look at the permissions

2510
03:02:25,620 --> 03:02:28,859
attached to that policy

2511
03:02:28,859 --> 03:02:32,420
to sorry to that role

2512
03:02:35,040 --> 03:02:37,319
we can see another AWS managed policy

2513
03:02:37,319 --> 03:02:38,399
and I know this policy pretty well

2514
03:02:38,399 --> 03:02:41,279
essentially what it is is it allows all

2515
03:02:41,279 --> 03:02:44,040
permissions to be performed

2516
03:02:44,040 --> 03:02:45,180
um

2517
03:02:45,180 --> 03:02:47,580
all SSM actions

2518
03:02:47,580 --> 03:02:49,560
which it will allow us to push code to

2519
03:02:49,560 --> 03:02:51,779
instances in the fleet allow us to view

2520
03:02:51,779 --> 03:02:54,359
the fleet allows to view instances

2521
03:02:54,359 --> 03:02:56,520
within that Fleet so let's have a look

2522
03:02:56,520 --> 03:02:58,880
at that

2523
03:02:59,819 --> 03:03:02,539
ssms

2524
03:03:10,859 --> 03:03:13,260
so we have two instances

2525
03:03:13,260 --> 03:03:15,240
within this Fleet right we have the web

2526
03:03:15,240 --> 03:03:17,040
server that's the if we looked at the

2527
03:03:17,040 --> 03:03:20,640
account ID versus the

2528
03:03:20,640 --> 03:03:23,040
uh we went back up we would see versus

2529
03:03:23,040 --> 03:03:25,319
a role that is assumed that has that at

2530
03:03:25,319 --> 03:03:27,479
the end we would see that we compromise

2531
03:03:27,479 --> 03:03:29,399
the web server we also see this admin

2532
03:03:29,399 --> 03:03:30,479
host

2533
03:03:30,479 --> 03:03:32,580
is quite interesting so what I would do

2534
03:03:32,580 --> 03:03:34,260
is I'd go look at ec2

2535
03:03:34,260 --> 03:03:36,060
and see exactly what this admin host is

2536
03:03:36,060 --> 03:03:37,680
because essentially we have full control

2537
03:03:37,680 --> 03:03:40,760
over that admin host

2538
03:03:47,640 --> 03:03:49,500
so this is the easiest way to look at it

2539
03:03:49,500 --> 03:03:51,479
if we see the admin host actually has a

2540
03:03:51,479 --> 03:03:52,920
role attached to it

2541
03:03:52,920 --> 03:03:57,439
and this role is an ec2 admin

2542
03:03:57,540 --> 03:03:59,340
so now what we want to do is we want to

2543
03:03:59,340 --> 03:04:02,100
create a Lambda function that allows us

2544
03:04:02,100 --> 03:04:06,140
to compromise this ec2 admin account

2545
03:04:11,340 --> 03:04:13,800
because that ec2 admin account has all

2546
03:04:13,800 --> 03:04:15,899
actions

2547
03:04:15,899 --> 03:04:18,060
over all over

2548
03:04:18,060 --> 03:04:20,819
so our initial entry point through ssrf

2549
03:04:20,819 --> 03:04:23,520
allowed us to compromise a web server

2550
03:04:23,520 --> 03:04:25,620
which had a role attached to it that

2551
03:04:25,620 --> 03:04:27,899
could create an AWS Lambda function

2552
03:04:27,899 --> 03:04:30,000
which work had the ability to pass a

2553
03:04:30,000 --> 03:04:33,140
role to any function that we

2554
03:04:33,180 --> 03:04:37,020
and that role allowed for full control

2555
03:04:37,020 --> 03:04:39,479
over the systems manager which allows us

2556
03:04:39,479 --> 03:04:41,939
to run a command on an ec2 instance that

2557
03:04:41,939 --> 03:04:43,859
has a role with all actions over all

2558
03:04:43,859 --> 03:04:45,000
resources

2559
03:04:45,000 --> 03:04:48,359
it's a little bit of a mouthful but

2560
03:04:48,359 --> 03:04:50,779
let's picture

2561
03:04:52,080 --> 03:04:53,220
so now we're going to do is actually

2562
03:04:53,220 --> 03:04:55,080
create this Lambda function and I'm

2563
03:04:55,080 --> 03:04:56,640
going to focus on the console because I

2564
03:04:56,640 --> 03:04:58,380
think it's a much better visual

2565
03:04:58,380 --> 03:05:00,300
representation than kind of just looking

2566
03:05:00,300 --> 03:05:01,500
at live

2567
03:05:01,500 --> 03:05:04,340
code on the screen

2568
03:05:13,560 --> 03:05:16,800
so we looked at how ec2 instances obtain

2569
03:05:16,800 --> 03:05:18,479
their credentials using the metadata

2570
03:05:18,479 --> 03:05:19,319
service

2571
03:05:19,319 --> 03:05:20,819
let's have a look at how Lambda

2572
03:05:20,819 --> 03:05:22,020
functions do it so Lambda function is

2573
03:05:22,020 --> 03:05:23,880
doing a bit of a different way they do

2574
03:05:23,880 --> 03:05:25,979
it by using

2575
03:05:25,979 --> 03:05:28,620
environment variables

2576
03:05:28,620 --> 03:05:31,620
the first line of code we have there

2577
03:05:31,620 --> 03:05:33,120
is just to print out the environment

2578
03:05:33,120 --> 03:05:35,600
variables

2579
03:05:58,800 --> 03:05:59,939
so if we look at the environment

2580
03:05:59,939 --> 03:06:01,620
variables just like with the metadata

2581
03:06:01,620 --> 03:06:03,600
service we can see that there's the

2582
03:06:03,600 --> 03:06:05,279
session token and if you look through

2583
03:06:05,279 --> 03:06:07,500
the rest you'll find all the rest of the

2584
03:06:07,500 --> 03:06:08,939
credentials so that's how it works it's

2585
03:06:08,939 --> 03:06:11,420
not it's

2586
03:06:17,279 --> 03:06:18,779
now what we're going to do is actually

2587
03:06:18,779 --> 03:06:21,660
add to this Lambda function

2588
03:06:21,660 --> 03:06:26,060
the ability to run a command on the ec2

2589
03:06:31,740 --> 03:06:34,319
this command will query the metadata

2590
03:06:34,319 --> 03:06:36,720
service on that instance and return the

2591
03:06:36,720 --> 03:06:40,460
credentials for the role attached to it

2592
03:06:40,740 --> 03:06:42,600
so essentially we have the ability to

2593
03:06:42,600 --> 03:06:46,319
also view the SSM commands that have

2594
03:06:46,319 --> 03:06:47,700
been run the history

2595
03:06:47,700 --> 03:06:51,020
find the output production

2596
03:06:52,680 --> 03:06:56,300
and like all demos it broke

2597
03:07:05,399 --> 03:07:07,819
cool

2598
03:07:22,560 --> 03:07:25,160
up in the tree

2599
03:07:38,220 --> 03:07:40,640
okay

2600
03:07:53,040 --> 03:07:56,779
cool see that it did succeed

2601
03:07:59,880 --> 03:08:01,620
look at the outputs

2602
03:08:01,620 --> 03:08:03,660
we have the access key and the secret

2603
03:08:03,660 --> 03:08:05,880
key which essentially means we can use

2604
03:08:05,880 --> 03:08:09,120
these credentials outside of AWS in our

2605
03:08:09,120 --> 03:08:14,040
own in our own local CLI and perform any

2606
03:08:14,040 --> 03:08:18,620
action over any resource we are

2607
03:08:23,819 --> 03:08:26,880
so I just want to go through

2608
03:08:26,880 --> 03:08:29,340
something quickly

2609
03:08:29,340 --> 03:08:30,840
when I was performing this presentation

2610
03:08:30,840 --> 03:08:32,520
to a couple of my mates

2611
03:08:32,520 --> 03:08:35,279
they asked me this question

2612
03:08:35,279 --> 03:08:37,260
and I actually kind of forgot

2613
03:08:37,260 --> 03:08:39,660
they said yes you can

2614
03:08:39,660 --> 03:08:42,479
policy is here by default but someone

2615
03:08:42,479 --> 03:08:44,580
needs to be able to guess they are in to

2616
03:08:44,580 --> 03:08:46,979
do that right which is essentially your

2617
03:08:46,979 --> 03:08:49,140
account number and the topic name that's

2618
03:08:49,140 --> 03:08:50,640
something we call security through

2619
03:08:50,640 --> 03:08:51,899
obscurity

2620
03:08:51,899 --> 03:08:53,580
and to put to give you a physical

2621
03:08:53,580 --> 03:08:54,840
example

2622
03:08:54,840 --> 03:08:55,680
um

2623
03:08:55,680 --> 03:08:59,279
it's essentially if you had a house on a

2624
03:08:59,279 --> 03:09:01,920
relatively busy street and you kept your

2625
03:09:01,920 --> 03:09:04,080
keys in the pot outside you told all

2626
03:09:04,080 --> 03:09:05,340
your friends and family

2627
03:09:05,340 --> 03:09:07,340
um

2628
03:09:08,399 --> 03:09:10,920
if that's good enough for you

2629
03:09:10,920 --> 03:09:13,200
um sure good luck but that's definitely

2630
03:09:13,200 --> 03:09:15,300
not good enough for most people who

2631
03:09:15,300 --> 03:09:18,380
love security

2632
03:09:20,520 --> 03:09:23,340
cool so now we're

2633
03:09:23,340 --> 03:09:25,680
we've got all of the Power well not

2634
03:09:25,680 --> 03:09:28,140
quite there's only two gems there it's

2635
03:09:28,140 --> 03:09:31,699
only within this account

2636
03:09:31,979 --> 03:09:34,319
we have full admin over over everything

2637
03:09:34,319 --> 03:09:36,740
essentially

2638
03:09:38,220 --> 03:09:41,040
so what could we do to actually stop

2639
03:09:41,040 --> 03:09:42,300
this from happening

2640
03:09:42,300 --> 03:09:43,500
three main things I could think of

2641
03:09:43,500 --> 03:09:46,020
really is prevent detect and remediate

2642
03:09:46,020 --> 03:09:48,120
and we hear stuff like this a lot these

2643
03:09:48,120 --> 03:09:49,500
very high level

2644
03:09:49,500 --> 03:09:52,920
prevent this to take this thing

2645
03:09:52,920 --> 03:09:54,720
how do we do that

2646
03:09:54,720 --> 03:09:56,220
and it really does depend on the

2647
03:09:56,220 --> 03:09:57,420
organization whether you're going to put

2648
03:09:57,420 --> 03:09:59,340
acps in place to stop certain certain

2649
03:09:59,340 --> 03:10:01,859
creational resources or only allow like

2650
03:10:01,859 --> 03:10:03,840
a white list of if your company only

2651
03:10:03,840 --> 03:10:06,600
creates ec2 instances instant

2652
03:10:06,600 --> 03:10:09,439
instant that don't

2653
03:10:09,500 --> 03:10:12,779
whatever the case may be

2654
03:10:12,779 --> 03:10:17,580
but the example I work at a Dev house so

2655
03:10:17,580 --> 03:10:19,620
um if you do too you'll be somewhat

2656
03:10:19,620 --> 03:10:21,319
familiar with this if you use Jenkins

2657
03:10:21,319 --> 03:10:24,359
and what we do is we have two things two

2658
03:10:24,359 --> 03:10:25,260
things really

2659
03:10:25,260 --> 03:10:27,420
one we have custom modules so we try and

2660
03:10:27,420 --> 03:10:28,979
Abstract the security away from the

2661
03:10:28,979 --> 03:10:30,479
Developers

2662
03:10:30,479 --> 03:10:32,700
the module for instance would be like

2663
03:10:32,700 --> 03:10:33,479
for

2664
03:10:33,479 --> 03:10:36,779
um S3 buckets if all S3 buckets are not

2665
03:10:36,779 --> 03:10:38,640
allowed to be public in the module it

2666
03:10:38,640 --> 03:10:39,779
won't even give you the option right

2667
03:10:39,779 --> 03:10:41,399
you'll just create a bucket and in the

2668
03:10:41,399 --> 03:10:43,200
background it'll ensure that it's not

2669
03:10:43,200 --> 03:10:44,819
public it's encrypted whatever other

2670
03:10:44,819 --> 03:10:46,979
compliance policies you have so we have

2671
03:10:46,979 --> 03:10:49,020
a compliance step that also checks to

2672
03:10:49,020 --> 03:10:51,300
ensure that that's in place in the

2673
03:10:51,300 --> 03:10:53,279
pipeline we want these things to fail at

2674
03:10:53,279 --> 03:10:55,319
the pr stage because it fails that they

2675
03:10:55,319 --> 03:10:56,520
apply we're going to have an account

2676
03:10:56,520 --> 03:11:00,319
with half created resources

2677
03:11:01,740 --> 03:11:04,500
detect and remediate so we don't know

2678
03:11:04,500 --> 03:11:06,300
what we don't know right and we have a

2679
03:11:06,300 --> 03:11:09,060
community that we can rely on AWS has

2680
03:11:09,060 --> 03:11:10,380
something called security Hub which

2681
03:11:10,380 --> 03:11:13,439
tries to detect most configurations not

2682
03:11:13,439 --> 03:11:14,880
specific to what we spoke about today

2683
03:11:14,880 --> 03:11:18,960
but definitely other misconfigurations

2684
03:11:18,960 --> 03:11:21,180
that's a great tool to use there are

2685
03:11:21,180 --> 03:11:23,220
other open open source tools out there

2686
03:11:23,220 --> 03:11:25,500
such as Prowler and Scout Suite those

2687
03:11:25,500 --> 03:11:26,580
are things you should definitely be

2688
03:11:26,580 --> 03:11:30,140
making use of on a regular basis

2689
03:11:30,479 --> 03:11:32,640
and then remediate do you have a process

2690
03:11:32,640 --> 03:11:34,979
to remediate these things what what is

2691
03:11:34,979 --> 03:11:36,899
it and what are the timelines are you

2692
03:11:36,899 --> 03:11:38,160
sticking to those timelines do you have

2693
03:11:38,160 --> 03:11:39,899
a security posture

2694
03:11:39,899 --> 03:11:40,680
um

2695
03:11:40,680 --> 03:11:42,540
where you review these things these are

2696
03:11:42,540 --> 03:11:45,080
things that definitely

2697
03:11:51,240 --> 03:11:53,100
and yeah just saying conclusion what I

2698
03:11:53,100 --> 03:11:54,800
wanted to add to this is

2699
03:11:54,800 --> 03:11:57,840
the tools are very good but also we need

2700
03:11:57,840 --> 03:12:00,420
to apply our hacking mindsets to some of

2701
03:12:00,420 --> 03:12:01,920
these things like this path we found

2702
03:12:01,920 --> 03:12:04,380
here was not a path that a tool found

2703
03:12:04,380 --> 03:12:06,060
but it's something that we could we

2704
03:12:06,060 --> 03:12:07,319
could see because we understand the

2705
03:12:07,319 --> 03:12:10,080
Technologies right we understand that in

2706
03:12:10,080 --> 03:12:11,580
ec2 instance

2707
03:12:11,580 --> 03:12:13,979
with an ssrf vulnerability with would

2708
03:12:13,979 --> 03:12:15,240
allow you to

2709
03:12:15,240 --> 03:12:18,479
grab the role we understand that being

2710
03:12:18,479 --> 03:12:20,220
able to create a Lambda function

2711
03:12:20,220 --> 03:12:22,800
and attach any policy that is or any

2712
03:12:22,800 --> 03:12:24,420
role that already exists would allow you

2713
03:12:24,420 --> 03:12:25,260
to

2714
03:12:25,260 --> 03:12:26,760
essentially abuse that role's

2715
03:12:26,760 --> 03:12:28,439
permissions so these are things that we

2716
03:12:28,439 --> 03:12:31,260
need to think about when

2717
03:12:31,260 --> 03:12:35,100
when doing assessments or creating these

2718
03:12:35,100 --> 03:12:37,220
things

2719
03:12:50,580 --> 03:12:52,080
scared to ask this but are there any

2720
03:12:52,080 --> 03:12:54,380
questions

2721
03:12:57,479 --> 03:13:00,140
yes sir

2722
03:13:24,840 --> 03:13:27,660
sure that that for SNS specifically or

2723
03:13:27,660 --> 03:13:30,500
for other resources

2724
03:13:31,080 --> 03:13:33,359
yeah so essentially anyone with

2725
03:13:33,359 --> 03:13:35,580
permissions to view they are in will be

2726
03:13:35,580 --> 03:13:36,899
able to find it

2727
03:13:36,899 --> 03:13:40,020
um so just to to uh jump onto what the

2728
03:13:40,020 --> 03:13:42,300
question was the question was those Arns

2729
03:13:42,300 --> 03:13:43,800
in the SNS topic is that something that

2730
03:13:43,800 --> 03:13:45,240
people would be able to find

2731
03:13:45,240 --> 03:13:47,040
right and just like the example of the

2732
03:13:47,040 --> 03:13:48,840
physical security where all your friends

2733
03:13:48,840 --> 03:13:50,220
and family know where the key is

2734
03:13:50,220 --> 03:13:52,740
everyone who has view of only access or

2735
03:13:52,740 --> 03:13:54,660
read-only access or any permissions to

2736
03:13:54,660 --> 03:13:56,880
view that within your account which will

2737
03:13:56,880 --> 03:13:58,920
probably be your entire Dev team

2738
03:13:58,920 --> 03:14:01,620
would know what they are in is and if

2739
03:14:01,620 --> 03:14:03,779
you're using that Arn in other systems

2740
03:14:03,779 --> 03:14:06,180
that are not AWS related they would be

2741
03:14:06,180 --> 03:14:08,160
there too so

2742
03:14:08,160 --> 03:14:10,920
pretty dangerous to to rely just on that

2743
03:14:10,920 --> 03:14:14,580
also the Arn is your account number and

2744
03:14:14,580 --> 03:14:16,859
the topic name

2745
03:14:16,859 --> 03:14:18,600
it's not something that

2746
03:14:18,600 --> 03:14:21,680
people may not be able to get

2747
03:14:24,420 --> 03:14:26,160
any other question

2748
03:14:26,160 --> 03:14:28,640
yes sir

2749
03:14:46,439 --> 03:14:49,140
sure so the question there is how do we

2750
03:14:49,140 --> 03:14:51,420
maintain the compliance policies within

2751
03:14:51,420 --> 03:14:53,160
our Pipelines

2752
03:14:53,160 --> 03:14:54,420
so

2753
03:14:54,420 --> 03:14:56,120
we have a security team that does that

2754
03:14:56,120 --> 03:14:58,260
we're constantly looking at new things

2755
03:14:58,260 --> 03:15:01,560
we also utilize other open source

2756
03:15:01,560 --> 03:15:03,420
Frameworks or research that's being

2757
03:15:03,420 --> 03:15:05,340
published so like security Hub is a

2758
03:15:05,340 --> 03:15:07,439
major driver for us

2759
03:15:07,439 --> 03:15:08,520
um

2760
03:15:08,520 --> 03:15:10,080
yeah so that's how we find that

2761
03:15:10,080 --> 03:15:12,479
compliance and again those compliance

2762
03:15:12,479 --> 03:15:15,000
steps fail at the pr stage right so that

2763
03:15:15,000 --> 03:15:17,060
PR can't be merged

2764
03:15:17,060 --> 03:15:19,439
so the developer will see that it's

2765
03:15:19,439 --> 03:15:21,060
broken and why

2766
03:15:21,060 --> 03:15:24,740
as soon as they try and push that code

2767
03:15:26,460 --> 03:15:29,899
any other questions yes sir

2768
03:15:38,220 --> 03:15:40,800
correct

2769
03:15:40,800 --> 03:15:43,220
yes

2770
03:15:44,399 --> 03:15:45,840
okay we'll have a statement than a

2771
03:15:45,840 --> 03:15:48,540
question so the metadata service there's

2772
03:15:48,540 --> 03:15:51,359
two versions uh

2773
03:15:51,359 --> 03:15:53,700
opening version one is still the default

2774
03:15:53,700 --> 03:15:55,319
so if you create an ec2 instance through

2775
03:15:55,319 --> 03:15:58,080
the console AWS console it'll be created

2776
03:15:58,080 --> 03:16:00,660
with version one

2777
03:16:00,660 --> 03:16:02,580
and it'll be vulnerable to if you have

2778
03:16:02,580 --> 03:16:04,920
an ssra vulnerability you'll be able to

2779
03:16:04,920 --> 03:16:07,279
call that

2780
03:16:13,560 --> 03:16:16,680
that's a very good question I like it

2781
03:16:16,680 --> 03:16:18,060
when you when you say permission

2782
03:16:18,060 --> 03:16:19,260
boundaries

2783
03:16:19,260 --> 03:16:21,960
are you talking about sorry we've got to

2784
03:16:21,960 --> 03:16:23,700
go back quite a few slides

2785
03:16:23,700 --> 03:16:26,700
I am permission boundaries over here

2786
03:16:26,700 --> 03:16:29,580
so look how far along the line that is

2787
03:16:29,580 --> 03:16:32,420
right that's after

2788
03:16:32,420 --> 03:16:34,319
resource-based policies and it's after

2789
03:16:34,319 --> 03:16:37,519
identity based policies

2790
03:16:42,479 --> 03:16:45,600
sure and uh what about resource-based

2791
03:16:45,600 --> 03:16:47,899
policies

2792
03:16:47,939 --> 03:16:50,760
and ACP so I think we try and focus as

2793
03:16:50,760 --> 03:16:53,939
far to the left as possible

2794
03:16:53,939 --> 03:16:55,620
but but yeah that's not something that

2795
03:16:55,620 --> 03:16:58,399
we've actually explored

2796
03:17:01,800 --> 03:17:03,120
uh really does depend on the

2797
03:17:03,120 --> 03:17:05,040
organization I've said before I think

2798
03:17:05,040 --> 03:17:06,600
scps is a very good one if you have a

2799
03:17:06,600 --> 03:17:08,520
lot of accounts and you want to enforce

2800
03:17:08,520 --> 03:17:09,960
certain things on all of your accounts

2801
03:17:09,960 --> 03:17:12,060
but it really does depend on the

2802
03:17:12,060 --> 03:17:14,300
organization

2803
03:17:15,060 --> 03:17:16,800
the question there was just the first

2804
03:17:16,800 --> 03:17:19,260
one was have we considered permission

2805
03:17:19,260 --> 03:17:21,120
boundaries and the second one was are

2806
03:17:21,120 --> 03:17:22,560
there any other guard rails that you've

2807
03:17:22,560 --> 03:17:25,100
thought of putting in place

2808
03:17:28,439 --> 03:17:30,359
any other questions

2809
03:17:30,359 --> 03:17:32,899
yes sir

2810
03:17:41,600 --> 03:17:45,240
the question is is the the tools within

2811
03:17:45,240 --> 03:17:48,180
AWS the the permissions within AWS not

2812
03:17:48,180 --> 03:17:50,880
good enough or not um

2813
03:17:50,880 --> 03:17:53,520
was that or that we need to use other

2814
03:17:53,520 --> 03:17:56,399
tools I don't think so I think that AWS

2815
03:17:56,399 --> 03:17:58,080
allows you to do whatever you want with

2816
03:17:58,080 --> 03:18:00,240
whatever you want within the account how

2817
03:18:00,240 --> 03:18:02,399
you you misconfiguring it is is really

2818
03:18:02,399 --> 03:18:03,899
on you

2819
03:18:03,899 --> 03:18:05,340
um but yeah there are tools out there

2820
03:18:05,340 --> 03:18:08,100
that help you identify these things and

2821
03:18:08,100 --> 03:18:10,200
guard rails in place just to

2822
03:18:10,200 --> 03:18:12,600
help you stay within those

2823
03:18:12,600 --> 03:18:14,819
um yeah there are some really good Cool

2824
03:18:14,819 --> 03:18:17,420
Tools out there

2825
03:18:23,100 --> 03:18:24,960
cool well you have my email address so

2826
03:18:24,960 --> 03:18:28,399
you can always uh email me

2827
03:18:28,620 --> 03:18:31,700
thanks everyone for coming

2828
03:18:40,740 --> 03:18:42,180
all right folks are going to do a break

2829
03:18:42,180 --> 03:18:46,040
uh next talk 150.

2830
03:30:40,800 --> 03:30:44,479
are you gonna hold the microwave

2831
03:30:46,920 --> 03:30:50,420
speed this far away from

2832
03:31:20,880 --> 03:31:24,920
my cheat notes are coming through there

2833
03:31:25,260 --> 03:31:28,380
how's it okay there we go hey

2834
03:31:28,380 --> 03:31:30,840
I think so I've got one there we go

2835
03:31:30,840 --> 03:31:33,439
sound good

2836
03:31:58,080 --> 03:32:00,080
okay

2837
03:32:12,300 --> 03:32:15,000
all right hello everybody

2838
03:32:15,000 --> 03:32:17,520
thank you for joining me for the pre-t

2839
03:32:17,520 --> 03:32:19,080
shift

2840
03:32:19,080 --> 03:32:21,060
I'm going to do my very best to keep you

2841
03:32:21,060 --> 03:32:23,040
all awake

2842
03:32:23,040 --> 03:32:26,520
but I offer absolutely no guarantees

2843
03:32:26,520 --> 03:32:28,739
so before we kick off

2844
03:32:28,739 --> 03:32:31,140
the perfunctory who am I

2845
03:32:31,140 --> 03:32:33,420
my name is Robert Lynn

2846
03:32:33,420 --> 03:32:36,239
I work for Mobius binary I live in Cape

2847
03:32:36,239 --> 03:32:37,500
Town

2848
03:32:37,500 --> 03:32:40,680
like random facts retro video games and

2849
03:32:40,680 --> 03:32:42,899
beating the system

2850
03:32:42,899 --> 03:32:45,000
and I know I've got a cue from my

2851
03:32:45,000 --> 03:32:46,920
director just to mention Mobius binary

2852
03:32:46,920 --> 03:32:50,040
is hiring if anybody is interested

2853
03:32:50,040 --> 03:32:52,800
so I am actually a returning speaker

2854
03:32:52,800 --> 03:32:57,000
I spoke at a B size in 2016 on a wildly

2855
03:32:57,000 --> 03:32:59,279
unrelated topic

2856
03:32:59,279 --> 03:33:02,040
so yeah coming back here it is still at

2857
03:33:02,040 --> 03:33:03,779
absolutely as nerve-wracking being up

2858
03:33:03,779 --> 03:33:05,100
here

2859
03:33:05,100 --> 03:33:07,620
and I'm still filmed filled with an

2860
03:33:07,620 --> 03:33:09,540
overwhelming sense of imposter syndrome

2861
03:33:09,540 --> 03:33:11,939
so here we go

2862
03:33:11,939 --> 03:33:14,819
but from 2016 until now I still have my

2863
03:33:14,819 --> 03:33:16,800
beard so in a never-changing world it

2864
03:33:16,800 --> 03:33:19,080
has remained constant

2865
03:33:19,080 --> 03:33:21,319
so this feels like a sort of dating

2866
03:33:21,319 --> 03:33:23,279
website you know where I'm telling you

2867
03:33:23,279 --> 03:33:26,279
all about myself like I like um

2868
03:33:26,279 --> 03:33:28,140
video games and long walks on the beach

2869
03:33:28,140 --> 03:33:30,420
and pina coladas and all of that

2870
03:33:30,420 --> 03:33:32,580
so once we're talking about confessions

2871
03:33:32,580 --> 03:33:34,260
you've heard some of my personal

2872
03:33:34,260 --> 03:33:35,819
confessions

2873
03:33:35,819 --> 03:33:37,739
confessions and caveats let's talk about

2874
03:33:37,739 --> 03:33:40,260
some regarding this presentation

2875
03:33:40,260 --> 03:33:41,399
so

2876
03:33:41,399 --> 03:33:43,800
first up the data in this presentation

2877
03:33:43,800 --> 03:33:46,560
was part of academic research so please

2878
03:33:46,560 --> 03:33:48,300
don't hold that against me

2879
03:33:48,300 --> 03:33:50,819
if anything putting me for it

2880
03:33:50,819 --> 03:33:52,859
the presentation is not going to be all

2881
03:33:52,859 --> 03:33:55,560
the research thankfully for you and for

2882
03:33:55,560 --> 03:33:57,840
me there will be Snippets of it

2883
03:33:57,840 --> 03:34:00,720
although as the heading is

2884
03:34:00,720 --> 03:34:03,060
got to do with crypto I am not a crypto

2885
03:34:03,060 --> 03:34:04,680
Enthusiast actually

2886
03:34:04,680 --> 03:34:07,500
and the idea for this talk like all good

2887
03:34:07,500 --> 03:34:09,600
or and bad ideas came out over a couple

2888
03:34:09,600 --> 03:34:11,939
of years is this possible can we get an

2889
03:34:11,939 --> 03:34:14,819
idea about the world of crypto jacking

2890
03:34:14,819 --> 03:34:16,859
it's going to sound a little academic-y

2891
03:34:16,859 --> 03:34:19,200
because it is but I'm going to do my

2892
03:34:19,200 --> 03:34:21,899
best to not make it sound that much and

2893
03:34:21,899 --> 03:34:24,060
while I will share the results

2894
03:34:24,060 --> 03:34:26,040
it's really more about the process

2895
03:34:26,040 --> 03:34:28,140
and and with that process hopefully I

2896
03:34:28,140 --> 03:34:29,640
can help somebody else with a similar

2897
03:34:29,640 --> 03:34:31,439
project or a similar idea or something

2898
03:34:31,439 --> 03:34:33,979
like that

2899
03:34:34,140 --> 03:34:36,779
so the state unfortunately is not the

2900
03:34:36,779 --> 03:34:39,660
current state as of the 22 as of 2022 it

2901
03:34:39,660 --> 03:34:41,279
is a little bit older

2902
03:34:41,279 --> 03:34:43,500
and we can thank covert to that because

2903
03:34:43,500 --> 03:34:44,880
I would have really liked to present

2904
03:34:44,880 --> 03:34:46,800
this back at the time that I actually

2905
03:34:46,800 --> 03:34:48,779
did the research

2906
03:34:48,779 --> 03:34:50,939
but it is entirely repeatable so if

2907
03:34:50,939 --> 03:34:53,340
anybody else wants to please go ahead

2908
03:34:53,340 --> 03:34:55,140
and it's not an in-depth talk about

2909
03:34:55,140 --> 03:34:58,439
crypto not at all if anything it's an

2910
03:34:58,439 --> 03:35:00,420
inch deep and a mile wide and not the

2911
03:35:00,420 --> 03:35:02,779
other way around

2912
03:35:03,239 --> 03:35:04,979
so when we're talking about the

2913
03:35:04,979 --> 03:35:07,020
prevalence of crypto Mining and crypto

2914
03:35:07,020 --> 03:35:08,520
jacking what exactly are we talking

2915
03:35:08,520 --> 03:35:11,160
about and in the context of this talk

2916
03:35:11,160 --> 03:35:13,979
it is a monetization process in which

2917
03:35:13,979 --> 03:35:16,220
the visitor of a website Computer

2918
03:35:16,220 --> 03:35:19,020
computational Resources are used to mine

2919
03:35:19,020 --> 03:35:20,520
cryptocurrencies

2920
03:35:20,520 --> 03:35:22,859
for the owner of the website or somebody

2921
03:35:22,859 --> 03:35:23,760
else

2922
03:35:23,760 --> 03:35:26,220
so it is an attack it can be an attack

2923
03:35:26,220 --> 03:35:28,200
but it can also be legitimate and so

2924
03:35:28,200 --> 03:35:30,979
therefore a process

2925
03:35:31,380 --> 03:35:32,880
so with anything like this there's

2926
03:35:32,880 --> 03:35:34,500
always a couple of ethical questions and

2927
03:35:34,500 --> 03:35:36,899
first up how did the scripter mining

2928
03:35:36,899 --> 03:35:39,479
stuff get onto the website so there's a

2929
03:35:39,479 --> 03:35:41,160
couple ways it could have got there that

2930
03:35:41,160 --> 03:35:42,420
somebody could have breached the site

2931
03:35:42,420 --> 03:35:44,160
and embedded it in the code

2932
03:35:44,160 --> 03:35:45,899
the webmaster himself could have put it

2933
03:35:45,899 --> 03:35:46,680
there

2934
03:35:46,680 --> 03:35:49,620
without any consent or the webmaster

2935
03:35:49,620 --> 03:35:51,479
could have put it there and asked for

2936
03:35:51,479 --> 03:35:53,819
consent do you mind me mining crypto

2937
03:35:53,819 --> 03:35:56,880
while you visit my site

2938
03:35:56,880 --> 03:35:58,680
so consent is a is a tricky one

2939
03:35:58,680 --> 03:36:00,660
especially in this regard because it's

2940
03:36:00,660 --> 03:36:02,160
really difficult to ascertain whether or

2941
03:36:02,160 --> 03:36:04,080
not the end user even knows what they're

2942
03:36:04,080 --> 03:36:05,939
consenting to

2943
03:36:05,939 --> 03:36:07,500
in the case of it being one of those

2944
03:36:07,500 --> 03:36:10,260
sites where the webmaster openly

2945
03:36:10,260 --> 03:36:11,819
he puts it there and tells you that he's

2946
03:36:11,819 --> 03:36:14,279
doing it and asks you to consent

2947
03:36:14,279 --> 03:36:15,960
so a couple of Studies have been done

2948
03:36:15,960 --> 03:36:17,939
around it bleeping computer did one

2949
03:36:17,939 --> 03:36:19,500
where they revealed an enormous

2950
03:36:19,500 --> 03:36:21,420
percentage of users actually didn't mind

2951
03:36:21,420 --> 03:36:23,220
their their resources being used to mine

2952
03:36:23,220 --> 03:36:24,420
a bit of cryptocurrency in the

2953
03:36:24,420 --> 03:36:26,399
background as long as those pesky ads

2954
03:36:26,399 --> 03:36:27,960
aren't being displayed

2955
03:36:27,960 --> 03:36:29,939
but once again do they really know what

2956
03:36:29,939 --> 03:36:31,800
they're consenting to

2957
03:36:31,800 --> 03:36:33,720
The Pirate Bay torrent search engine

2958
03:36:33,720 --> 03:36:35,460
which I'm sure nobody here has ever used

2959
03:36:35,460 --> 03:36:37,260
they were caught out using some crypto

2960
03:36:37,260 --> 03:36:39,359
mining stuff and quite a while back

2961
03:36:39,359 --> 03:36:40,920
without even amending their privacy

2962
03:36:40,920 --> 03:36:43,560
policy and after that was released they

2963
03:36:43,560 --> 03:36:45,779
put a little cheeky caveat on the side

2964
03:36:45,779 --> 03:36:48,000
saying well do you want ads to display

2965
03:36:48,000 --> 03:36:50,760
or can we do mind a little CPU Cycles

2966
03:36:50,760 --> 03:36:54,000
being used for you know for us to mine

2967
03:36:54,000 --> 03:36:56,160
so the ethical questions are there if

2968
03:36:56,160 --> 03:36:57,300
anybody really wants to talk about them

2969
03:36:57,300 --> 03:37:00,060
we can chat about them a little later

2970
03:37:00,060 --> 03:37:02,700
but back to the actual talk what are we

2971
03:37:02,700 --> 03:37:05,279
talking about and so it really is how

2972
03:37:05,279 --> 03:37:07,140
prevalent browser-based crypto mining is

2973
03:37:07,140 --> 03:37:08,520
on the internet

2974
03:37:08,520 --> 03:37:11,279
which mining variants are preferred

2975
03:37:11,279 --> 03:37:13,020
for crypto jacking which internet

2976
03:37:13,020 --> 03:37:15,120
service providers which countries

2977
03:37:15,120 --> 03:37:16,319
they're in

2978
03:37:16,319 --> 03:37:18,720
which currencies are used and most

2979
03:37:18,720 --> 03:37:20,700
importantly the process as to how I got

2980
03:37:20,700 --> 03:37:22,920
to all of the above

2981
03:37:22,920 --> 03:37:25,739
and of course it fit into the b-sides

2982
03:37:25,739 --> 03:37:30,020
2022 Mantra it's all done from home

2983
03:37:30,420 --> 03:37:34,380
so the result which hopefully is a data

2984
03:37:34,380 --> 03:37:36,120
set containing varied and hopefully

2985
03:37:36,120 --> 03:37:38,520
accurate and relevant crypto Mining and

2986
03:37:38,520 --> 03:37:40,080
crypto jacking data

2987
03:37:40,080 --> 03:37:42,060
a repeatable process that anybody else

2988
03:37:42,060 --> 03:37:44,220
can facilitate and continue enriching

2989
03:37:44,220 --> 03:37:45,479
such a data set

2990
03:37:45,479 --> 03:37:47,460
and a data set that can be used for a

2991
03:37:47,460 --> 03:37:50,239
visual representation

2992
03:37:54,120 --> 03:37:56,399
so some of the technologies that were

2993
03:37:56,399 --> 03:37:57,960
used and when I was making the slide I

2994
03:37:57,960 --> 03:37:59,399
was like damn I'm sure I use so many

2995
03:37:59,399 --> 03:38:01,739
more but actually pretty simple pretty

2996
03:38:01,739 --> 03:38:03,840
pretty basic stuff and we've got bash

2997
03:38:03,840 --> 03:38:05,939
we've got python we've got python pandas

2998
03:38:05,939 --> 03:38:10,500
library multigo Jupiter notebooks neo4j

2999
03:38:10,500 --> 03:38:13,380
virus total and the last icon is the max

3000
03:38:13,380 --> 03:38:16,080
mined geolocation database used in math

3001
03:38:16,080 --> 03:38:19,700
IP addresses to your locations

3002
03:38:31,739 --> 03:38:33,960
so when we talk about they in the

3003
03:38:33,960 --> 03:38:35,340
context of this talk

3004
03:38:35,340 --> 03:38:37,800
what are they talking about what are

3005
03:38:37,800 --> 03:38:39,200
what are they that we're talking about

3006
03:38:39,200 --> 03:38:42,239
they really is browser-based crypto

3007
03:38:42,239 --> 03:38:45,420
mining scripts and we can go really deep

3008
03:38:45,420 --> 03:38:47,580
talking about these

3009
03:38:47,580 --> 03:38:50,220
crypto mining scripts and there's a lot

3010
03:38:50,220 --> 03:38:51,960
of depth to it that's not the intention

3011
03:38:51,960 --> 03:38:54,239
of this talk it really in a simplified

3012
03:38:54,239 --> 03:38:57,180
version It's mining code embedded into a

3013
03:38:57,180 --> 03:38:59,160
website source code that makes of the

3014
03:38:59,160 --> 03:39:01,680
makes use of the visited CPU during that

3015
03:39:01,680 --> 03:39:03,859
visit

3016
03:39:06,180 --> 03:39:08,460
so now that we know

3017
03:39:08,460 --> 03:39:10,859
what we're looking for kind of I mean

3018
03:39:10,859 --> 03:39:14,160
the embedded mining code in websites

3019
03:39:14,160 --> 03:39:16,500
how do we find all these different

3020
03:39:16,500 --> 03:39:18,779
variants and all these different

3021
03:39:18,779 --> 03:39:20,760
crypto mining scripts how do we know

3022
03:39:20,760 --> 03:39:23,580
what we're even looking for and the last

3023
03:39:23,580 --> 03:39:25,500
thing I wanted to do was go on a large

3024
03:39:25,500 --> 03:39:27,479
study and try and find every single one

3025
03:39:27,479 --> 03:39:29,220
of these scripts out there I think it

3026
03:39:29,220 --> 03:39:30,600
would take me forever

3027
03:39:30,600 --> 03:39:33,540
so luckily I came across a really really

3028
03:39:33,540 --> 03:39:35,880
useful list called the the no coin ad

3029
03:39:35,880 --> 03:39:37,260
block list

3030
03:39:37,260 --> 03:39:40,020
if anybody's heard of it very useful and

3031
03:39:40,020 --> 03:39:41,640
it's commonly used in a lot of these

3032
03:39:41,640 --> 03:39:44,819
plugins extensions browser plugins even

3033
03:39:44,819 --> 03:39:46,500
for phone devices and what these do

3034
03:39:46,500 --> 03:39:47,880
these plugins

3035
03:39:47,880 --> 03:39:50,520
you you install them and when you visit

3036
03:39:50,520 --> 03:39:52,080
a site that has any of the embedded

3037
03:39:52,080 --> 03:39:54,180
crypto mining scripts it will pop up and

3038
03:39:54,180 --> 03:39:56,100
say hey this site has a script it's

3039
03:39:56,100 --> 03:39:57,960
going to mine cryptocurrency of your

3040
03:39:57,960 --> 03:40:00,359
browser while you visited and these

3041
03:40:00,359 --> 03:40:02,520
these extensions are powered by this

3042
03:40:02,520 --> 03:40:04,439
wonderful little text file

3043
03:40:04,439 --> 03:40:06,840
known as the nocoin list the bottom of

3044
03:40:06,840 --> 03:40:08,819
the site you can just have a look at it

3045
03:40:08,819 --> 03:40:11,040
and for reference sake

3046
03:40:11,040 --> 03:40:12,720
that's what it looks like I know that's

3047
03:40:12,720 --> 03:40:14,939
that's really difficult to see but it is

3048
03:40:14,939 --> 03:40:17,160
a text file just with lists and lists of

3049
03:40:17,160 --> 03:40:19,319
different mining variants

3050
03:40:19,319 --> 03:40:21,600
and yeah these text files

3051
03:40:21,600 --> 03:40:23,880
plug into the into the extensions and

3052
03:40:23,880 --> 03:40:25,080
they warn you if you're hitting a site

3053
03:40:25,080 --> 03:40:27,540
to them so fantastic now I've got a list

3054
03:40:27,540 --> 03:40:29,880
of these of these variants

3055
03:40:29,880 --> 03:40:32,279
these mining variants I know what I'm

3056
03:40:32,279 --> 03:40:33,720
looking for

3057
03:40:33,720 --> 03:40:36,840
but here I get hit with the real big

3058
03:40:36,840 --> 03:40:39,140
problem

3059
03:40:39,479 --> 03:40:41,939
that was the easy part how on Earth am I

3060
03:40:41,939 --> 03:40:44,880
going to find them in the world of the

3061
03:40:44,880 --> 03:40:45,779
internet

3062
03:40:45,779 --> 03:40:47,640
and and this part started really

3063
03:40:47,640 --> 03:40:49,140
bothering me I thought oh god what have

3064
03:40:49,140 --> 03:40:51,180
I done so

3065
03:40:51,180 --> 03:40:53,580
my options and I started

3066
03:40:53,580 --> 03:40:55,560
searching around and checking out for

3067
03:40:55,560 --> 03:40:58,080
some vendors very sign and PIR they will

3068
03:40:58,080 --> 03:41:01,460
give you DNS Zone files for DOT

3069
03:41:01,460 --> 03:41:03,960
com.net.org domains you do have to fill

3070
03:41:03,960 --> 03:41:06,000
out a couple of forms to prove that it's

3071
03:41:06,000 --> 03:41:07,800
for academic research

3072
03:41:07,800 --> 03:41:09,479
so that was the option that I was going

3073
03:41:09,479 --> 03:41:11,460
to go with then I'm thinking okay I've

3074
03:41:11,460 --> 03:41:14,460
got to now crawl all these websites

3075
03:41:14,460 --> 03:41:16,739
download all the HTML

3076
03:41:16,739 --> 03:41:19,020
I mean the landing page is at a minimum

3077
03:41:19,020 --> 03:41:21,600
and then match all the source code with

3078
03:41:21,600 --> 03:41:23,220
my entries

3079
03:41:23,220 --> 03:41:26,580
in the nocoin list and I mean that that

3080
03:41:26,580 --> 03:41:28,680
that's horrible that's horrible so

3081
03:41:28,680 --> 03:41:30,960
thinking about this oh my god what have

3082
03:41:30,960 --> 03:41:32,700
I done I've got I've got a crawlia a

3083
03:41:32,700 --> 03:41:36,120
total of 128 million domains

3084
03:41:36,120 --> 03:41:37,680
um I mean the bandwidth required to do

3085
03:41:37,680 --> 03:41:40,200
that I couldn't even start figuring out

3086
03:41:40,200 --> 03:41:42,120
the storage space

3087
03:41:42,120 --> 03:41:43,920
the actual computing power to sift

3088
03:41:43,920 --> 03:41:46,020
through all of this and at the time that

3089
03:41:46,020 --> 03:41:47,819
I did the research that no coin list had

3090
03:41:47,819 --> 03:41:50,460
587 variants that I was looking for so

3091
03:41:50,460 --> 03:41:53,520
I'm now looking for 587 variants in 128

3092
03:41:53,520 --> 03:41:56,819
million pages of source code how am I

3093
03:41:56,819 --> 03:41:58,920
going to do all of this

3094
03:41:58,920 --> 03:42:00,479
how am I going to pay for all of this

3095
03:42:00,479 --> 03:42:03,600
and most importantly I'm just freaking

3096
03:42:03,600 --> 03:42:06,000
lazy man I don't really want to do this

3097
03:42:06,000 --> 03:42:08,640
so poking around

3098
03:42:08,640 --> 03:42:11,640
came across an amazing resource I don't

3099
03:42:11,640 --> 03:42:13,080
know how many of you have used it but

3100
03:42:13,080 --> 03:42:15,540
yeah it really saved my life called

3101
03:42:15,540 --> 03:42:18,479
public www.com

3102
03:42:18,479 --> 03:42:20,100
and that's me in the middle there

3103
03:42:20,100 --> 03:42:21,660
thinking I'm going to be stuck with

3104
03:42:21,660 --> 03:42:23,700
manually crawling the site and then I

3105
03:42:23,700 --> 03:42:26,279
see public WWE coming along and I'm

3106
03:42:26,279 --> 03:42:28,760
happy and most importantly this was

3107
03:42:28,760 --> 03:42:31,319
supervisor approved from a research

3108
03:42:31,319 --> 03:42:33,180
perspective so I was given the go-ahead

3109
03:42:33,180 --> 03:42:36,720
to use it which which really made my day

3110
03:42:36,720 --> 03:42:39,899
so having a look at the site itself

3111
03:42:39,899 --> 03:42:42,120
just to give some context it has the

3112
03:42:42,120 --> 03:42:44,880
source code index for 504 million

3113
03:42:44,880 --> 03:42:48,060
websites which I mean even kills what I

3114
03:42:48,060 --> 03:42:49,140
would have been able to do in terms of

3115
03:42:49,140 --> 03:42:51,479
128 million and it's got some other

3116
03:42:51,479 --> 03:42:52,739
really interesting things that you can

3117
03:42:52,739 --> 03:42:54,600
you can use it for you can search for

3118
03:42:54,600 --> 03:42:56,939
specific Technologies in source code

3119
03:42:56,939 --> 03:43:00,479
sites with similar analytics ID names

3120
03:43:00,479 --> 03:43:03,239
WordPress themes references to code or

3121
03:43:03,239 --> 03:43:05,760
comments even sites that mention your

3122
03:43:05,760 --> 03:43:06,720
name

3123
03:43:06,720 --> 03:43:09,300
and no I do not work for them I have no

3124
03:43:09,300 --> 03:43:11,880
affiliate deals none of that just really

3125
03:43:11,880 --> 03:43:14,539
really useful

3126
03:43:14,939 --> 03:43:17,220
so before we get too stuck in and too

3127
03:43:17,220 --> 03:43:18,899
involved in the whole process just a

3128
03:43:18,899 --> 03:43:20,580
quick note on coin height because it

3129
03:43:20,580 --> 03:43:23,279
comes up quite a lot in coin hive

3130
03:43:23,279 --> 03:43:25,620
really was the crypto Miner the crypto

3131
03:43:25,620 --> 03:43:27,300
jacket in this case's best friend

3132
03:43:27,300 --> 03:43:29,100
because they provided these amazing

3133
03:43:29,100 --> 03:43:31,560
services for you to embed your mining

3134
03:43:31,560 --> 03:43:34,080
scripts into sites you own or sites you

3135
03:43:34,080 --> 03:43:34,979
don't

3136
03:43:34,979 --> 03:43:38,040
and as people visit and their resources

3137
03:43:38,040 --> 03:43:40,560
get used you get paid and literally

3138
03:43:40,560 --> 03:43:42,420
their slogan was monetize your business

3139
03:43:42,420 --> 03:43:44,399
with your user's CPU power so there was

3140
03:43:44,399 --> 03:43:47,460
there was no hiding it

3141
03:43:47,460 --> 03:43:49,739
and also before we get too stuck in

3142
03:43:49,739 --> 03:43:53,040
Monero and and coin Hive just like

3143
03:43:53,040 --> 03:43:55,020
perfect marriage

3144
03:43:55,020 --> 03:43:57,960
the coin I was built for Monero which is

3145
03:43:57,960 --> 03:43:59,760
really the most useful at least one of

3146
03:43:59,760 --> 03:44:01,140
the most useful

3147
03:44:01,140 --> 03:44:03,060
currencies for browser-based mining

3148
03:44:03,060 --> 03:44:05,279
being Asic resistant and enabling CPUs

3149
03:44:05,279 --> 03:44:07,680
it was perfect for it so we could once

3150
03:44:07,680 --> 03:44:09,359
again we can go really deep on this

3151
03:44:09,359 --> 03:44:10,200
topic

3152
03:44:10,200 --> 03:44:11,819
not what I'd like to do at least at

3153
03:44:11,819 --> 03:44:13,140
least not right now

3154
03:44:13,140 --> 03:44:13,859
um

3155
03:44:13,859 --> 03:44:15,540
but yeah so the two of them perfect

3156
03:44:15,540 --> 03:44:18,260
perfect match

3157
03:44:18,899 --> 03:44:21,000
so the way coin I would work is you'd

3158
03:44:21,000 --> 03:44:24,120
sign up get a nice token include that in

3159
03:44:24,120 --> 03:44:25,920
the API calls when a user comes to your

3160
03:44:25,920 --> 03:44:28,080
site that script is loaded connects to

3161
03:44:28,080 --> 03:44:29,399
coinhive

3162
03:44:29,399 --> 03:44:32,100
authorizes the user's token to receive

3163
03:44:32,100 --> 03:44:34,140
input for hashing once a valid hash is

3164
03:44:34,140 --> 03:44:36,000
found gets committed to the coin I've

3165
03:44:36,000 --> 03:44:39,000
pull and then eventually they pay you 70

3166
03:44:39,000 --> 03:44:42,180
of that reward in Pocket 30 sort of like

3167
03:44:42,180 --> 03:44:44,279
the poker table at a casino

3168
03:44:44,279 --> 03:44:45,840
I also had a couple other interesting

3169
03:44:45,840 --> 03:44:48,779
Services capture service which was

3170
03:44:48,779 --> 03:44:50,520
quickly shut out and the short link

3171
03:44:50,520 --> 03:44:52,380
service all of these with delays on

3172
03:44:52,380 --> 03:44:54,420
pages so that mining can take place in

3173
03:44:54,420 --> 03:44:56,779
the background

3174
03:44:57,660 --> 03:44:59,460
but back to the actual research so

3175
03:44:59,460 --> 03:45:01,859
kicking off I've got I've got this

3176
03:45:01,859 --> 03:45:03,720
access now I've paid for this access to

3177
03:45:03,720 --> 03:45:05,819
public ww API access which is about

3178
03:45:05,819 --> 03:45:09,899
fifty dollars and I've got my list of

3179
03:45:09,899 --> 03:45:12,060
from nocoin of the variants

3180
03:45:12,060 --> 03:45:13,439
that's literally how I'm starting off

3181
03:45:13,439 --> 03:45:15,060
I've got nothing but a list of no coin

3182
03:45:15,060 --> 03:45:17,040
variants and this access and by just

3183
03:45:17,040 --> 03:45:19,380
running my for Loop

3184
03:45:19,380 --> 03:45:21,840
of every single my folder basically

3185
03:45:21,840 --> 03:45:23,700
simply just takes every single entry in

3186
03:45:23,700 --> 03:45:26,460
the nocoin list queries it and what I

3187
03:45:26,460 --> 03:45:28,979
get back is a CSV file of each of those

3188
03:45:28,979 --> 03:45:31,020
domains I'm sorry each of those variants

3189
03:45:31,020 --> 03:45:33,359
So in theory there could have been 587

3190
03:45:33,359 --> 03:45:34,560
that's how many entries there were in

3191
03:45:34,560 --> 03:45:35,880
the nokoi list

3192
03:45:35,880 --> 03:45:38,399
and this is an example of one

3193
03:45:38,399 --> 03:45:40,200
so it gives you all the sites that have

3194
03:45:40,200 --> 03:45:42,000
that source code in it and it gives you

3195
03:45:42,000 --> 03:45:43,920
a little rank as well after the comma

3196
03:45:43,920 --> 03:45:47,000
like an Alexa rank

3197
03:45:48,479 --> 03:45:50,100
so this is where I start plugging

3198
03:45:50,100 --> 03:45:51,779
everything into Jupiter and python

3199
03:45:51,779 --> 03:45:52,739
pandas

3200
03:45:52,739 --> 03:45:55,500
and from that initial kickoff

3201
03:45:55,500 --> 03:45:59,220
I found 27 981 instances of crypto

3202
03:45:59,220 --> 03:46:01,500
mining scripts from that list

3203
03:46:01,500 --> 03:46:05,880
and of them there were two 25 204 unique

3204
03:46:05,880 --> 03:46:08,279
sites hosting these Scripts

3205
03:46:08,279 --> 03:46:12,319
of that 587 files entries in the file

3206
03:46:12,319 --> 03:46:16,319
305 unique scripts were noted so 285 I

3207
03:46:16,319 --> 03:46:18,239
didn't even come across at all

3208
03:46:18,239 --> 03:46:20,880
and the top 10 which I refer to quite a

3209
03:46:20,880 --> 03:46:22,920
lot as the top tens here really

3210
03:46:22,920 --> 03:46:25,439
accounted for 76 so

3211
03:46:25,439 --> 03:46:27,239
a small amount of them really being the

3212
03:46:27,239 --> 03:46:30,060
bulk of it and if I compare the problems

3213
03:46:30,060 --> 03:46:32,279
I had when I was worrying about how I'm

3214
03:46:32,279 --> 03:46:33,540
going to do this and what am I going to

3215
03:46:33,540 --> 03:46:36,540
use and crawling and downloading I mean

3216
03:46:36,540 --> 03:46:38,819
this took 20 hours over five days and

3217
03:46:38,819 --> 03:46:41,640
resulted 10 Meg of raw data so it was an

3218
03:46:41,640 --> 03:46:44,358
absolute pleasure

3219
03:46:44,580 --> 03:46:46,380
so taking a look at some of these sites

3220
03:46:46,380 --> 03:46:47,819
that had crypto mining I thought let's

3221
03:46:47,819 --> 03:46:49,800
match them up and see if there's any

3222
03:46:49,800 --> 03:46:51,720
decent Alexa rankings any any popular

3223
03:46:51,720 --> 03:46:54,060
sites that we might know that have

3224
03:46:54,060 --> 03:46:56,520
crypto mining scripts in them that we

3225
03:46:56,520 --> 03:46:57,840
didn't even realize

3226
03:46:57,840 --> 03:47:00,960
not so much but the Wiz products and the

3227
03:47:00,960 --> 03:47:03,479
Wiz marketing.com bizarrely enough were

3228
03:47:03,479 --> 03:47:05,880
pretty high ranked on Alexa

3229
03:47:05,880 --> 03:47:07,500
um I mean top thousand is is very

3230
03:47:07,500 --> 03:47:09,660
impressive and and they were hosting

3231
03:47:09,660 --> 03:47:11,279
some some crypto mining scripts there

3232
03:47:11,279 --> 03:47:12,899
I've noticed I had a quick look through

3233
03:47:12,899 --> 03:47:14,100
these again

3234
03:47:14,100 --> 03:47:16,200
it's been a couple it's been a while and

3235
03:47:16,200 --> 03:47:18,660
farm easy.in number seven is still it's

3236
03:47:18,660 --> 03:47:22,039
still running and still doing its thing

3237
03:47:22,500 --> 03:47:25,739
so the most prevalent miners

3238
03:47:25,739 --> 03:47:27,899
no surprise we did speak about was was

3239
03:47:27,899 --> 03:47:31,260
coin Hive and auth mine and the two of

3240
03:47:31,260 --> 03:47:34,260
them together make up 38 of

3241
03:47:34,260 --> 03:47:37,439
the entire population of the miners and

3242
03:47:37,439 --> 03:47:41,160
almost mine is run by coin Hive as well

3243
03:47:41,160 --> 03:47:42,899
or at least was and that's the the

3244
03:47:42,899 --> 03:47:44,819
consensual version so if you want to run

3245
03:47:44,819 --> 03:47:46,800
the site and you want users to consent

3246
03:47:46,800 --> 03:47:49,260
to having their resources used for

3247
03:47:49,260 --> 03:47:50,840
mining you can sign up for auth mind

3248
03:47:50,840 --> 03:47:53,580
authmind interestingly neither of them

3249
03:47:53,580 --> 03:47:54,899
exist anymore

3250
03:47:54,899 --> 03:47:57,120
and in fact as I was finishing up this

3251
03:47:57,120 --> 03:47:59,340
research they didn't exist either the

3252
03:47:59,340 --> 03:48:01,739
head closed down so 38 of the market

3253
03:48:01,739 --> 03:48:03,660
when you no longer exist is pretty good

3254
03:48:03,660 --> 03:48:04,979
going

3255
03:48:04,979 --> 03:48:06,840
um previous research showed them having

3256
03:48:06,840 --> 03:48:08,819
about 75 to 80 percent of the market

3257
03:48:08,819 --> 03:48:11,279
tied down so they were definitely the

3258
03:48:11,279 --> 03:48:13,020
the ones to go to if you were looking

3259
03:48:13,020 --> 03:48:15,899
for your your end-to-end crypto mining

3260
03:48:15,899 --> 03:48:19,160
solution browser-based

3261
03:48:20,819 --> 03:48:23,700
so taking the 25 000 unique URLs that I

3262
03:48:23,700 --> 03:48:25,020
had I thought now it's time to have a

3263
03:48:25,020 --> 03:48:27,060
look at the IP addresses see what I can

3264
03:48:27,060 --> 03:48:29,340
see what I can dig out of that

3265
03:48:29,340 --> 03:48:32,460
so DNS resolution was my my obvious

3266
03:48:32,460 --> 03:48:34,739
choice and mass DNS is what I use for

3267
03:48:34,739 --> 03:48:37,920
that of that list of unique URLs about

3268
03:48:37,920 --> 03:48:40,560
15 were unresolvable totally

3269
03:48:40,560 --> 03:48:43,520
over three thousand so left me with 21

3270
03:48:43,520 --> 03:48:46,260
984 IP address is valid

3271
03:48:46,260 --> 03:48:49,640
and that I can now have a look at

3272
03:48:53,399 --> 03:48:55,739
so I plugged those into the the max mind

3273
03:48:55,739 --> 03:48:58,680
the geolight database

3274
03:48:58,680 --> 03:49:02,700
and I basically did a simple count of

3275
03:49:02,700 --> 03:49:04,260
the number of occurrences of each of

3276
03:49:04,260 --> 03:49:06,180
those Geographic locations

3277
03:49:06,180 --> 03:49:08,760
and with that I was able to find servers

3278
03:49:08,760 --> 03:49:11,340
the number of servers 91 different

3279
03:49:11,340 --> 03:49:13,979
countries hosting crypto mining servers

3280
03:49:13,979 --> 03:49:16,739
South Africa had 106 IP addresses

3281
03:49:16,739 --> 03:49:18,359
hosting crypto mining

3282
03:49:18,359 --> 03:49:21,120
variants which rank 25th out of the 91

3283
03:49:21,120 --> 03:49:23,340
and just 12 of the countries were noted

3284
03:49:23,340 --> 03:49:26,600
as just having one IP address

3285
03:49:32,760 --> 03:49:35,279
so the actual geolocation itself

3286
03:49:35,279 --> 03:49:37,859
having a look through the count in the

3287
03:49:37,859 --> 03:49:41,100
top 10 the USA Top in that list with 42

3288
03:49:41,100 --> 03:49:43,380
percent followed by interestingly Iran

3289
03:49:43,380 --> 03:49:45,060
Germany Russia some of the usual

3290
03:49:45,060 --> 03:49:47,340
suspects there those are the guys are

3291
03:49:47,340 --> 03:49:49,380
the most servers hosting crypto mining

3292
03:49:49,380 --> 03:49:50,460
variants

3293
03:49:50,460 --> 03:49:52,319
so at this point it's worth just having

3294
03:49:52,319 --> 03:49:53,880
a little checkpoint

3295
03:49:53,880 --> 03:49:55,200
as to

3296
03:49:55,200 --> 03:49:57,300
the data set I've got

3297
03:49:57,300 --> 03:49:59,580
so I've got domains

3298
03:49:59,580 --> 03:50:01,560
what the miners found on those domains

3299
03:50:01,560 --> 03:50:03,960
I've got the IP addresses

3300
03:50:03,960 --> 03:50:05,939
and I've got the geo location and that's

3301
03:50:05,939 --> 03:50:07,500
the data set that I have at this point

3302
03:50:07,500 --> 03:50:08,640
in time

3303
03:50:08,640 --> 03:50:12,479
so my goal now is to take this data set

3304
03:50:12,479 --> 03:50:14,520
and enrich it a little bit more and pull

3305
03:50:14,520 --> 03:50:16,200
some more data out of it see what I can

3306
03:50:16,200 --> 03:50:19,279
find see where that goes

3307
03:50:22,200 --> 03:50:24,180
so the first thing I did was integrated

3308
03:50:24,180 --> 03:50:26,580
with virustotal

3309
03:50:26,580 --> 03:50:28,620
and just like some of the other services

3310
03:50:28,620 --> 03:50:30,479
virus turtle is a really interesting and

3311
03:50:30,479 --> 03:50:32,700
useful API service for academic research

3312
03:50:32,700 --> 03:50:34,140
so if you can prove that you're doing

3313
03:50:34,140 --> 03:50:36,120
this for academic research they'll give

3314
03:50:36,120 --> 03:50:38,220
you free access to their API

3315
03:50:38,220 --> 03:50:40,739
and with that API you can do some some

3316
03:50:40,739 --> 03:50:42,779
interesting stuff you can get domain

3317
03:50:42,779 --> 03:50:44,520
categorizations

3318
03:50:44,520 --> 03:50:45,899
can check whether or not it actually

3319
03:50:45,899 --> 03:50:48,479
exists in the virus total database

3320
03:50:48,479 --> 03:50:50,340
determine if there's any known malware

3321
03:50:50,340 --> 03:50:52,380
samples associated with it and you can

3322
03:50:52,380 --> 03:50:55,699
get some DNS and who is information

3323
03:50:58,500 --> 03:51:00,840
so once again just a simple for Loop

3324
03:51:00,840 --> 03:51:03,660
going through all my domains and hitting

3325
03:51:03,660 --> 03:51:05,939
the virus total endpoint

3326
03:51:05,939 --> 03:51:09,180
gives me examples like the following so

3327
03:51:09,180 --> 03:51:10,739
once again I got a bit of a problem now

3328
03:51:10,739 --> 03:51:12,420
whereas before

3329
03:51:12,420 --> 03:51:15,120
doing my initial loop I had CSV files

3330
03:51:15,120 --> 03:51:17,819
loads of them 587.

3331
03:51:17,819 --> 03:51:20,640
I thought it was a lot now I've got 20

3332
03:51:20,640 --> 03:51:23,160
000 nested Json files one for each

3333
03:51:23,160 --> 03:51:24,180
domain

3334
03:51:24,180 --> 03:51:25,439
and the fact that I'm working with

3335
03:51:25,439 --> 03:51:27,479
python pandas data frames and I'm pretty

3336
03:51:27,479 --> 03:51:29,279
much CSV Centric

3337
03:51:29,279 --> 03:51:31,920
makes things a little tricky how am I

3338
03:51:31,920 --> 03:51:33,420
going to get this back in how am I going

3339
03:51:33,420 --> 03:51:35,460
to add this to my data set

3340
03:51:35,460 --> 03:51:37,080
and so with enough messing around with

3341
03:51:37,080 --> 03:51:39,120
bash and enough grip and awk and TR I

3342
03:51:39,120 --> 03:51:40,979
was able to chunk it all together

3343
03:51:40,979 --> 03:51:44,100
and put it back into a workable CSV file

3344
03:51:44,100 --> 03:51:47,840
and import it back into my data frame

3345
03:51:47,939 --> 03:51:50,460
so that's just an example of what that

3346
03:51:50,460 --> 03:51:52,200
data frame now looks like the enriched

3347
03:51:52,200 --> 03:51:53,760
data frame

3348
03:51:53,760 --> 03:51:55,920
you can see I've got the bitdefender

3349
03:51:55,920 --> 03:51:57,720
category which is one of the domain

3350
03:51:57,720 --> 03:51:59,460
categorizations I've got the domain

3351
03:51:59,460 --> 03:52:02,700
which is really the URL or at least the

3352
03:52:02,700 --> 03:52:04,680
the first part of the URL that the force

3353
03:52:04,680 --> 03:52:07,200
the force Point categorization the URL

3354
03:52:07,200 --> 03:52:10,439
the rank the miner found the IP address

3355
03:52:10,439 --> 03:52:13,260
and the geolocated country

3356
03:52:13,260 --> 03:52:15,420
so already a bit more of an enriched

3357
03:52:15,420 --> 03:52:18,260
data set to work with

3358
03:52:19,560 --> 03:52:21,359
so looking at some of the actual domain

3359
03:52:21,359 --> 03:52:24,239
categorizations I know this is really

3360
03:52:24,239 --> 03:52:27,660
difficult to see but the main one for

3361
03:52:27,660 --> 03:52:29,580
Force point which surprisingly is

3362
03:52:29,580 --> 03:52:32,040
potentially unwanted software so

3363
03:52:32,040 --> 03:52:34,620
no surprises there but other than that

3364
03:52:34,620 --> 03:52:36,660
we've got business and economy newly

3365
03:52:36,660 --> 03:52:38,460
registered sites information technology

3366
03:52:38,460 --> 03:52:41,160
and actually compromised websites which

3367
03:52:41,160 --> 03:52:42,359
is this one here

3368
03:52:42,359 --> 03:52:44,220
which did pique my interest because

3369
03:52:44,220 --> 03:52:46,319
that's most likely well sites that have

3370
03:52:46,319 --> 03:52:48,180
not put it there on purpose sites that

3371
03:52:48,180 --> 03:52:49,680
have been hacked and have that have had

3372
03:52:49,680 --> 03:52:53,239
mining variants embedded anywhere

3373
03:52:54,960 --> 03:52:57,840
but Defender categorizations were

3374
03:52:57,840 --> 03:53:00,779
a little bit sparser not nearly as much

3375
03:53:00,779 --> 03:53:02,640
data

3376
03:53:02,640 --> 03:53:04,739
but similar type of of categories

3377
03:53:04,739 --> 03:53:07,020
business parked blogs computers and

3378
03:53:07,020 --> 03:53:08,760
software porn

3379
03:53:08,760 --> 03:53:11,040
and a couple others with not as many

3380
03:53:11,040 --> 03:53:12,600
categorizations

3381
03:53:12,600 --> 03:53:14,760
so because these two were

3382
03:53:14,760 --> 03:53:17,640
so vastly different in terms of data set

3383
03:53:17,640 --> 03:53:20,939
sizes I just looked at percentages

3384
03:53:20,939 --> 03:53:23,100
and with that I could see that across

3385
03:53:23,100 --> 03:53:24,600
both there were definitely similarities

3386
03:53:24,600 --> 03:53:26,580
where a Bit Defender and force Point

3387
03:53:26,580 --> 03:53:29,460
both at about 16 to 18 percent

3388
03:53:29,460 --> 03:53:31,140
and computer software and information

3389
03:53:31,140 --> 03:53:34,020
technology between six and nine

3390
03:53:34,020 --> 03:53:36,239
sex travel news and media similar

3391
03:53:36,239 --> 03:53:37,560
percentages of those domain

3392
03:53:37,560 --> 03:53:39,300
categorizations so we start getting an

3393
03:53:39,300 --> 03:53:41,939
idea of what type of sites are actually

3394
03:53:41,939 --> 03:53:45,380
hosting these mining variants

3395
03:53:52,920 --> 03:53:56,340
so firstly I apologize for the

3396
03:53:56,340 --> 03:53:58,140
the horrible annotation

3397
03:53:58,140 --> 03:54:00,000
but I am fiercely loyal to Microsoft

3398
03:54:00,000 --> 03:54:01,080
Paint

3399
03:54:01,080 --> 03:54:02,640
and I

3400
03:54:02,640 --> 03:54:04,500
really yeah that's the one I use and so

3401
03:54:04,500 --> 03:54:05,880
these are the top 10 endpoints

3402
03:54:05,880 --> 03:54:08,939
essentially the top 10 IP addresses that

3403
03:54:08,939 --> 03:54:11,160
have domains with crypto mining embedded

3404
03:54:11,160 --> 03:54:12,479
on them

3405
03:54:12,479 --> 03:54:14,340
so that first IP

3406
03:54:14,340 --> 03:54:16,500
I mean has an enormous chunk has you

3407
03:54:16,500 --> 03:54:19,260
know over 2 700 domains hosting crypto

3408
03:54:19,260 --> 03:54:22,380
mining on it on one single IP address

3409
03:54:22,380 --> 03:54:24,000
and the reason I've circled them and the

3410
03:54:24,000 --> 03:54:26,399
reason I've used different colors

3411
03:54:26,399 --> 03:54:29,220
the red I'm going to show visually from

3412
03:54:29,220 --> 03:54:30,779
an IP address perspective and the green

3413
03:54:30,779 --> 03:54:32,100
I'm going to show from a data

3414
03:54:32,100 --> 03:54:34,439
categorization perspective

3415
03:54:34,439 --> 03:54:38,660
and with this I'm going to use neo4j

3416
03:54:42,720 --> 03:54:44,580
so first up this is what this is with

3417
03:54:44,580 --> 03:54:47,160
the neo4j prep these are the nodes so

3418
03:54:47,160 --> 03:54:50,399
taking that that python data frame

3419
03:54:50,399 --> 03:54:52,560
I was able to turn each single entry

3420
03:54:52,560 --> 03:54:55,500
into a different node into a neo4j node

3421
03:54:55,500 --> 03:54:57,840
and then write the queries in order to

3422
03:54:57,840 --> 03:55:00,239
visually show me what it looks like

3423
03:55:00,239 --> 03:55:02,399
so what we'll see next is basically the

3424
03:55:02,399 --> 03:55:03,960
world according to me if you could

3425
03:55:03,960 --> 03:55:06,720
visualize what crypto mining or at least

3426
03:55:06,720 --> 03:55:10,278
crypto jacking campaigns look like

3427
03:55:12,359 --> 03:55:15,540
so this is the first example on that

3428
03:55:15,540 --> 03:55:17,340
list case number one

3429
03:55:17,340 --> 03:55:20,399
this was the IP address that had over 2

3430
03:55:20,399 --> 03:55:22,140
000 domains on it

3431
03:55:22,140 --> 03:55:25,680
so the red dots are the actual domains

3432
03:55:25,680 --> 03:55:27,720
the green being the mining variant and

3433
03:55:27,720 --> 03:55:30,359
the blue being the IP address

3434
03:55:30,359 --> 03:55:32,699
and so from a visual perspective this is

3435
03:55:32,699 --> 03:55:35,040
what that server looks like and how it's

3436
03:55:35,040 --> 03:55:37,680
mining the little blocks are the areas

3437
03:55:37,680 --> 03:55:39,120
that I'll zoom in on

3438
03:55:39,120 --> 03:55:40,859
just to give a bit of context so you can

3439
03:55:40,859 --> 03:55:42,840
see what we're actually talking about

3440
03:55:42,840 --> 03:55:45,180
that being the IP address and that being

3441
03:55:45,180 --> 03:55:48,600
the over 2000 domains hosted on it and

3442
03:55:48,600 --> 03:55:51,979
interestingly these are all Iranian

3443
03:55:52,140 --> 03:55:54,420
and the other side of the coin showing

3444
03:55:54,420 --> 03:55:56,160
the mining variant

3445
03:55:56,160 --> 03:56:00,260
in this case it was fisacral.com

3446
03:56:00,479 --> 03:56:02,699
so continuing to visualize and to to

3447
03:56:02,699 --> 03:56:04,560
show the world what I think if crypto

3448
03:56:04,560 --> 03:56:06,660
mining looks like from my my patent

3449
03:56:06,660 --> 03:56:08,520
perspective I took a look at one of the

3450
03:56:08,520 --> 03:56:10,319
other IP addresses

3451
03:56:10,319 --> 03:56:12,840
and this one had an interesting strategy

3452
03:56:12,840 --> 03:56:14,939
so it was a single IP address of course

3453
03:56:14,939 --> 03:56:18,120
with 238 domains split perfectly across

3454
03:56:18,120 --> 03:56:19,979
two mining variants

3455
03:56:19,979 --> 03:56:21,840
and just to zoom in and give that

3456
03:56:21,840 --> 03:56:24,000
context we see the IP address all the

3457
03:56:24,000 --> 03:56:25,560
domains and all the domains with that

3458
03:56:25,560 --> 03:56:29,239
specific variant on it

3459
03:56:33,540 --> 03:56:35,460
another pretty picture of it all and

3460
03:56:35,460 --> 03:56:37,439
this one actually being an endpoint

3461
03:56:37,439 --> 03:56:39,300
that's a Google CDN

3462
03:56:39,300 --> 03:56:41,100
so

3463
03:56:41,100 --> 03:56:43,319
it's an expected output in terms of all

3464
03:56:43,319 --> 03:56:45,420
the different domains and all the vastly

3465
03:56:45,420 --> 03:56:47,520
different variants used across these

3466
03:56:47,520 --> 03:56:49,380
domains so as opposed to it being a

3467
03:56:49,380 --> 03:56:51,540
single IP address it's actually a Google

3468
03:56:51,540 --> 03:56:52,680
endpoint

3469
03:56:52,680 --> 03:56:54,120
and here you can see all those domains

3470
03:56:54,120 --> 03:56:55,620
and all those different variants tied to

3471
03:56:55,620 --> 03:56:57,800
it

3472
03:56:58,439 --> 03:57:02,720
a closer screenshot giving that context

3473
03:57:07,680 --> 03:57:10,020
so instead of actually showing you know

3474
03:57:10,020 --> 03:57:11,640
more patterns of IP addresses and

3475
03:57:11,640 --> 03:57:13,380
hosting

3476
03:57:13,380 --> 03:57:15,720
from an IP perspective this is it from a

3477
03:57:15,720 --> 03:57:17,399
domain categorization perspective and

3478
03:57:17,399 --> 03:57:18,479
this one I found particularly

3479
03:57:18,479 --> 03:57:20,520
interesting so this is a single IP

3480
03:57:20,520 --> 03:57:23,160
address with 116 domains on it hosting

3481
03:57:23,160 --> 03:57:24,359
crypto mining

3482
03:57:24,359 --> 03:57:26,819
but all the variants on this being auth

3483
03:57:26,819 --> 03:57:29,399
mind which is the consensual one

3484
03:57:29,399 --> 03:57:31,199
so whoever's running the server and

3485
03:57:31,199 --> 03:57:33,779
running these sites is doing it

3486
03:57:33,779 --> 03:57:35,819
ethically as possible as everybody would

3487
03:57:35,819 --> 03:57:38,340
have to consent to it and that makes

3488
03:57:38,340 --> 03:57:39,899
sense if you look at that domain

3489
03:57:39,899 --> 03:57:41,279
categorization at least in the top

3490
03:57:41,279 --> 03:57:42,239
picture

3491
03:57:42,239 --> 03:57:44,220
it's all around shopping and so these

3492
03:57:44,220 --> 03:57:46,199
sites are less transient less dodgy been

3493
03:57:46,199 --> 03:57:47,819
around a lot longer and have been

3494
03:57:47,819 --> 03:57:49,380
categorized valid

3495
03:57:49,380 --> 03:57:51,779
and so it makes a lot more sense having

3496
03:57:51,779 --> 03:57:53,460
a look at these patterns

3497
03:57:53,460 --> 03:57:55,439
on the other side

3498
03:57:55,439 --> 03:57:57,840
a domain categorization example of a

3499
03:57:57,840 --> 03:57:59,580
site that's certainly not running

3500
03:57:59,580 --> 03:58:01,920
anything consensual shows you what that

3501
03:58:01,920 --> 03:58:03,600
pattern would look like we've got 92

3502
03:58:03,600 --> 03:58:05,640
different domains

3503
03:58:05,640 --> 03:58:06,899
and all sorts of different

3504
03:58:06,899 --> 03:58:08,640
categorizations and different variants

3505
03:58:08,640 --> 03:58:11,279
within them

3506
03:58:11,279 --> 03:58:13,199
and yeah definitely not uncommon due to

3507
03:58:13,199 --> 03:58:15,540
the transient nature of these domains

3508
03:58:15,540 --> 03:58:17,460
most of them being uncategorized and the

3509
03:58:17,460 --> 03:58:19,380
ones being categorized being categorized

3510
03:58:19,380 --> 03:58:22,620
as potentially unwanted software and

3511
03:58:22,620 --> 03:58:25,620
pornography

3512
03:58:28,739 --> 03:58:30,660
next I thought I'm going to plug this

3513
03:58:30,660 --> 03:58:33,120
into multigo and have a look at these IP

3514
03:58:33,120 --> 03:58:34,380
addresses themselves and see what

3515
03:58:34,380 --> 03:58:36,060
they've been up to

3516
03:58:36,060 --> 03:58:37,680
so we know they're running crypto mining

3517
03:58:37,680 --> 03:58:40,140
variants but what other dodginess has

3518
03:58:40,140 --> 03:58:41,460
been going on

3519
03:58:41,460 --> 03:58:44,939
and so using that the virus total API

3520
03:58:44,939 --> 03:58:47,580
key I can get two types of data back

3521
03:58:47,580 --> 03:58:49,859
detected communicating samples so

3522
03:58:49,859 --> 03:58:51,540
samples that have communicated with IP

3523
03:58:51,540 --> 03:58:55,520
address or actually downloaded samples

3524
03:58:55,560 --> 03:58:56,939
plug it in

3525
03:58:56,939 --> 03:58:58,560
gives me some interesting stuff and so

3526
03:58:58,560 --> 03:59:00,120
this IP address in particular is a

3527
03:59:00,120 --> 03:59:01,620
particularly naughty one

3528
03:59:01,620 --> 03:59:03,660
it was number six on that list of the

3529
03:59:03,660 --> 03:59:04,620
top ten

3530
03:59:04,620 --> 03:59:08,160
and it hosted 111 domains with crypto

3531
03:59:08,160 --> 03:59:10,199
mining but it actually had about 12

3532
03:59:10,199 --> 03:59:12,899
different hashes detected to it so

3533
03:59:12,899 --> 03:59:14,580
whoever was running the server was was

3534
03:59:14,580 --> 03:59:16,260
up to a lot more

3535
03:59:16,260 --> 03:59:18,120
than just hosting crypto mining they had

3536
03:59:18,120 --> 03:59:20,220
all sorts of other malicious campaigns

3537
03:59:20,220 --> 03:59:21,359
going on there

3538
03:59:21,359 --> 03:59:23,100
and I thought this is probably an area

3539
03:59:23,100 --> 03:59:24,779
where there's potential for more

3540
03:59:24,779 --> 03:59:26,699
research seeing what's going on with

3541
03:59:26,699 --> 03:59:28,800
these IP addresses and the ones that are

3542
03:59:28,800 --> 03:59:32,358
diversifying their campaigns

3543
03:59:34,140 --> 03:59:35,699
so the last area I'm going to talk about

3544
03:59:35,699 --> 03:59:38,340
is the particular coin itself

3545
03:59:38,340 --> 03:59:40,620
a particular area to dig into

3546
03:59:40,620 --> 03:59:43,920
and that being jse coin

3547
03:59:43,920 --> 03:59:47,040
so JC coin was third highest on the list

3548
03:59:47,040 --> 03:59:49,439
of most common variants

3549
03:59:49,439 --> 03:59:51,180
and this one required a little bit more

3550
03:59:51,180 --> 03:59:53,279
effort outside of my data frame so I

3551
03:59:53,279 --> 03:59:55,680
just created a new data frame just with

3552
03:59:55,680 --> 03:59:58,020
the JSC coin mining variant

3553
03:59:58,020 --> 04:00:01,439
and pulled HTML from all of those URLs

3554
04:00:01,439 --> 04:00:05,720
there were 1 700 of them

3555
04:00:06,000 --> 04:00:09,660
and the way that the way the JSC coin

3556
04:00:09,660 --> 04:00:11,160
minor loads

3557
04:00:11,160 --> 04:00:13,920
it actually has the users account number

3558
04:00:13,920 --> 04:00:16,500
in it so you can start tracking the user

3559
04:00:16,500 --> 04:00:18,359
themself so we can see the bottom four

3560
04:00:18,359 --> 04:00:21,000
all have the same account number being

3561
04:00:21,000 --> 04:00:23,399
one one two one seven three and so this

3562
04:00:23,399 --> 04:00:25,920
gives me some insight into

3563
04:00:25,920 --> 04:00:27,840
the campaigns running

3564
04:00:27,840 --> 04:00:29,819
not so much the user himself but I can

3565
04:00:29,819 --> 04:00:32,880
see how many different sites they have

3566
04:00:32,880 --> 04:00:34,859
working for them and whether or not

3567
04:00:34,859 --> 04:00:38,479
there's actually any value to it

3568
04:00:38,640 --> 04:00:40,199
so we're going to have a look at one one

3569
04:00:40,199 --> 04:00:42,000
two one seven three as an account holder

3570
04:00:42,000 --> 04:00:43,500
and see if this is actually profitable

3571
04:00:43,500 --> 04:00:45,779
as well as a couple others

3572
04:00:45,779 --> 04:00:48,420
it turns out one one two one seven three

3573
04:00:48,420 --> 04:00:50,880
had eight domains

3574
04:00:50,880 --> 04:00:55,859
working for him whereas 15838 had 228

3575
04:00:55,859 --> 04:00:58,140
different domains with his user code so

3576
04:00:58,140 --> 04:01:00,600
this guy's got a lot of domains

3577
04:01:00,600 --> 04:01:03,180
running you know running sites

3578
04:01:03,180 --> 04:01:05,819
code embedded and I got wondering is he

3579
04:01:05,819 --> 04:01:07,620
making any money of this or he or she is

3580
04:01:07,620 --> 04:01:10,140
is as profitable

3581
04:01:10,140 --> 04:01:13,500
and quite interestingly JSC Cohen who's

3582
04:01:13,500 --> 04:01:16,800
also since closed down

3583
04:01:16,800 --> 04:01:19,560
offer a developer API key that lets you

3584
04:01:19,560 --> 04:01:20,819
query balances

3585
04:01:20,819 --> 04:01:24,720
so having a look at 15838

3586
04:01:24,720 --> 04:01:25,380
um

3587
04:01:25,380 --> 04:01:27,479
well before I even get to his balances I

3588
04:01:27,479 --> 04:01:28,800
took a look at every single one of those

3589
04:01:28,800 --> 04:01:31,140
domains and every single one of the

3590
04:01:31,140 --> 04:01:32,160
domains

3591
04:01:32,160 --> 04:01:35,040
was this landing page with that domain

3592
04:01:35,040 --> 04:01:36,300
for sale

3593
04:01:36,300 --> 04:01:39,660
an embedded Bitcoin exchange link

3594
04:01:39,660 --> 04:01:42,180
an advertising Banner and the mining

3595
04:01:42,180 --> 04:01:43,680
script embedded so whoever's running

3596
04:01:43,680 --> 04:01:45,180
this was really trying to diversify

3597
04:01:45,180 --> 04:01:49,080
there Revenue not very pretty not very

3598
04:01:49,080 --> 04:01:51,000
good looking

3599
04:01:51,000 --> 04:01:53,939
and that really

3600
04:01:53,939 --> 04:01:55,520
proved it in these balances because

3601
04:01:55,520 --> 04:01:59,819
15838 had a USD balance of 55 cents

3602
04:01:59,819 --> 04:02:02,460
regardless of those 228 sites with the

3603
04:02:02,460 --> 04:02:04,859
with the mining script embedded maybe he

3604
04:02:04,859 --> 04:02:07,020
or she is withdrawing those funds I'm

3605
04:02:07,020 --> 04:02:09,420
not too sure the other one we saw the

3606
04:02:09,420 --> 04:02:11,340
one one two one seven three

3607
04:02:11,340 --> 04:02:14,220
had a negative balance so definitely not

3608
04:02:14,220 --> 04:02:15,960
not making a whole lot of cash doing

3609
04:02:15,960 --> 04:02:18,198
this

3610
04:02:19,739 --> 04:02:21,120
so I thought what I would do then is

3611
04:02:21,120 --> 04:02:23,460
have a look and see

3612
04:02:23,460 --> 04:02:25,439
actually who is out of the out of the

3613
04:02:25,439 --> 04:02:27,960
user accounts that I do have access to

3614
04:02:27,960 --> 04:02:30,359
who does have some money in the bank and

3615
04:02:30,359 --> 04:02:32,640
one of the instances

3616
04:02:32,640 --> 04:02:35,100
about being account number 9250 had two

3617
04:02:35,100 --> 04:02:37,380
and a half thousand dollars in his in

3618
04:02:37,380 --> 04:02:39,180
his JSC balance which really got me

3619
04:02:39,180 --> 04:02:41,160
wondering what what site is this guy or

3620
04:02:41,160 --> 04:02:42,479
girl running

3621
04:02:42,479 --> 04:02:45,000
and it turns out it was the re the brand

3622
04:02:45,000 --> 04:02:47,760
money can't buy

3623
04:02:47,760 --> 04:02:49,800
um that no longer exists and it was

3624
04:02:49,800 --> 04:02:53,340
ranked yeah over 300 million 30 million

3625
04:02:53,340 --> 04:02:55,140
sorry in Alexa so not a very popular

3626
04:02:55,140 --> 04:02:57,359
site but somehow that balance was pretty

3627
04:02:57,359 --> 04:02:58,680
high

3628
04:02:58,680 --> 04:03:01,020
so the conclusion to draw from this is

3629
04:03:01,020 --> 04:03:02,819
who knows where the rest of those funds

3630
04:03:02,819 --> 04:03:04,080
are coming from because it's very

3631
04:03:04,080 --> 04:03:07,819
unlikely that it was from crypto mining

3632
04:03:08,880 --> 04:03:10,319
so with that

3633
04:03:10,319 --> 04:03:13,020
I will send everybody off to T with a

3634
04:03:13,020 --> 04:03:14,699
couple of wild well a couple of

3635
04:03:14,699 --> 04:03:16,859
conclusions and next steps so the world

3636
04:03:16,859 --> 04:03:18,899
of crypto jacking is is wild it's

3637
04:03:18,899 --> 04:03:20,160
decentralized there are so many

3638
04:03:20,160 --> 04:03:21,540
different variants and so many different

3639
04:03:21,540 --> 04:03:23,640
miners out there that there's really a

3640
04:03:23,640 --> 04:03:25,080
lot of space to explore and research

3641
04:03:25,080 --> 04:03:26,640
more

3642
04:03:26,640 --> 04:03:28,199
yeah yeah

3643
04:03:28,199 --> 04:03:30,779
especially since coin I've and JSC coin

3644
04:03:30,779 --> 04:03:32,760
are gone there's there's a lot of place

3645
04:03:32,760 --> 04:03:34,560
to rerun this and see how what the

3646
04:03:34,560 --> 04:03:36,000
ecosystem looks like now and who's

3647
04:03:36,000 --> 04:03:38,040
taking up that space

3648
04:03:38,040 --> 04:03:39,540
um there's also areas to look at in

3649
04:03:39,540 --> 04:03:41,160
terms of crypto mining on phones mobile

3650
04:03:41,160 --> 04:03:42,359
phones

3651
04:03:42,359 --> 04:03:44,160
as well as the into the profitability

3652
04:03:44,160 --> 04:03:46,439
you saw at least JSC coin didn't seem to

3653
04:03:46,439 --> 04:03:47,279
be

3654
04:03:47,279 --> 04:03:48,660
as well as

3655
04:03:48,660 --> 04:03:50,640
deeper trails around those individual IP

3656
04:03:50,640 --> 04:03:52,020
addresses what they're up to what

3657
04:03:52,020 --> 04:03:53,160
they're hosting and are they

3658
04:03:53,160 --> 04:03:55,620
diversifying with other malware as well

3659
04:03:55,620 --> 04:03:58,560
as into any specific variants

3660
04:03:58,560 --> 04:04:02,960
and so any questions comments or insults

3661
04:04:12,720 --> 04:04:15,420
I could see it from the source code

3662
04:04:15,420 --> 04:04:17,279
so I could pull all the different URLs

3663
04:04:17,279 --> 04:04:20,720
Associated to each user account

3664
04:04:21,840 --> 04:04:23,460
yeah

3665
04:04:23,460 --> 04:04:27,438
but now yeah they've closed down too so

3666
04:04:28,800 --> 04:04:31,460
that's that

3667
04:04:35,160 --> 04:04:37,699
yeah

3668
04:04:38,100 --> 04:04:40,100
yeah

3669
04:04:44,160 --> 04:04:46,880
well

3670
04:04:47,160 --> 04:04:48,779
so what's really important to me was

3671
04:04:48,779 --> 04:04:51,239
really the data analysis of it was being

3672
04:04:51,239 --> 04:04:53,939
able to have the problem and to how am I

3673
04:04:53,939 --> 04:04:55,680
going to figure this out and how am I

3674
04:04:55,680 --> 04:04:57,420
going to crawl the internet for a

3675
04:04:57,420 --> 04:04:59,279
specific concept a specific term without

3676
04:04:59,279 --> 04:05:01,560
using Google and take that and put it

3677
04:05:01,560 --> 04:05:03,960
into a data frame manipulate data so

3678
04:05:03,960 --> 04:05:05,279
believe it or not these are the

3679
04:05:05,279 --> 04:05:07,800
highlights from my research

3680
04:05:07,800 --> 04:05:09,300
I could have gone into a lot of more

3681
04:05:09,300 --> 04:05:11,399
other areas that I didn't include that

3682
04:05:11,399 --> 04:05:12,840
would have knocked everybody out so yeah

3683
04:05:12,840 --> 04:05:16,640
these were the highlights from that yes

3684
04:05:25,620 --> 04:05:27,120
no

3685
04:05:27,120 --> 04:05:29,939
not from my not from the limitations of

3686
04:05:29,939 --> 04:05:32,340
my research so there are lots of things

3687
04:05:32,340 --> 04:05:34,199
I left out I couldn't cover I couldn't

3688
04:05:34,199 --> 04:05:35,040
cover

3689
04:05:35,040 --> 04:05:36,540
um assembly

3690
04:05:36,540 --> 04:05:38,040
I couldn't cover

3691
04:05:38,040 --> 04:05:40,199
obfuscation this was really the bare

3692
04:05:40,199 --> 04:05:42,300
minimum and from here it's a point to

3693
04:05:42,300 --> 04:05:45,438
potentially research more

3694
04:05:52,319 --> 04:05:53,580
through University through University

3695
04:05:53,580 --> 04:05:56,420
through academic

3696
04:06:02,040 --> 04:06:03,720
um

3697
04:06:03,720 --> 04:06:07,620
no not really unfortunately

3698
04:06:07,620 --> 04:06:10,340
fortunately not

3699
04:06:19,260 --> 04:06:21,300
so I mean that's really decentralized

3700
04:06:21,300 --> 04:06:23,399
and that's on an ISP level

3701
04:06:23,399 --> 04:06:25,080
and I don't think anybody I don't think

3702
04:06:25,080 --> 04:06:26,640
anybody's actively hunting and looking

3703
04:06:26,640 --> 04:06:28,800
for them it's really sort of up to the

3704
04:06:28,800 --> 04:06:30,779
individual to get those browser

3705
04:06:30,779 --> 04:06:33,180
extensions and those lists to protect

3706
04:06:33,180 --> 04:06:36,000
yourself but from for what I covered it

3707
04:06:36,000 --> 04:06:38,100
and what I found nobody's nobody's

3708
04:06:38,100 --> 04:06:41,180
really looking at that level

3709
04:06:41,580 --> 04:06:44,000
yes

3710
04:06:47,880 --> 04:06:50,479
yep

3711
04:06:57,239 --> 04:07:00,198
exactly yeah

3712
04:07:03,960 --> 04:07:06,359
then you miss it so the no coin updates

3713
04:07:06,359 --> 04:07:08,640
periodically in fact even daily I think

3714
04:07:08,640 --> 04:07:10,920
that list so this is definitely point in

3715
04:07:10,920 --> 04:07:11,939
time

3716
04:07:11,939 --> 04:07:13,859
and it is that game of cat and mouse

3717
04:07:13,859 --> 04:07:16,140
signature based what you find today you

3718
04:07:16,140 --> 04:07:18,800
won't find tomorrow

3719
04:07:30,540 --> 04:07:32,699
yeah well you wouldn't really be aware

3720
04:07:32,699 --> 04:07:34,319
of it

3721
04:07:34,319 --> 04:07:35,699
unless you are running some sort of

3722
04:07:35,699 --> 04:07:37,920
detectors a blocker

3723
04:07:37,920 --> 04:07:39,300
that's why a lot of these sites here are

3724
04:07:39,300 --> 04:07:42,000
out there the Alexa rank sort of even

3725
04:07:42,000 --> 04:07:43,920
though Alexa's gone to a lot of these

3726
04:07:43,920 --> 04:07:46,620
Technologies are done

3727
04:07:46,620 --> 04:07:48,479
was the area I was looking are these

3728
04:07:48,479 --> 04:07:49,800
popular are these sites that we know of

3729
04:07:49,800 --> 04:07:52,140
well that I know and the answer was

3730
04:07:52,140 --> 04:07:55,519
really no besides the Pirate Bay

3731
04:08:11,040 --> 04:08:13,859
so it was from what I found it was

3732
04:08:13,859 --> 04:08:15,600
webmasters

3733
04:08:15,600 --> 04:08:17,580
who had signed up to the consensual

3734
04:08:17,580 --> 04:08:18,960
service

3735
04:08:18,960 --> 04:08:20,760
the consensual

3736
04:08:20,760 --> 04:08:22,920
variant

3737
04:08:22,920 --> 04:08:24,600
so no one seemed to be offering

3738
04:08:24,600 --> 04:08:26,640
consensual services with an unconsensual

3739
04:08:26,640 --> 04:08:29,640
variant

3740
04:08:30,180 --> 04:08:32,640
so some coin Ivan Monero being by far

3741
04:08:32,640 --> 04:08:34,560
the most prevalent gives you the option

3742
04:08:34,560 --> 04:08:37,199
go coin Hive and do it unconsensual

3743
04:08:37,199 --> 04:08:39,660
we'll go auth mine same currency same

3744
04:08:39,660 --> 04:08:41,580
rate but doing it ethically and

3745
04:08:41,580 --> 04:08:44,060
consensual

3746
04:08:52,620 --> 04:08:55,380
um I don't only the JSC one that I

3747
04:08:55,380 --> 04:08:58,439
looked at in that one said user that had

3748
04:08:58,439 --> 04:09:00,840
one banner and one

3749
04:09:00,840 --> 04:09:02,580
one embedded script for every single

3750
04:09:02,580 --> 04:09:03,660
endpoint but other than that

3751
04:09:03,660 --> 04:09:05,880
unfortunately not believe it or not yeah

3752
04:09:05,880 --> 04:09:08,520
I mean this research took me in

3753
04:09:08,520 --> 04:09:10,199
the ballpark of

3754
04:09:10,199 --> 04:09:11,640
nine months to

3755
04:09:11,640 --> 04:09:14,160
to cover it all so lots of areas to to

3756
04:09:14,160 --> 04:09:16,439
go deeper if if anyone is interested and

3757
04:09:16,439 --> 04:09:18,479
and if anybody wants all the commands

3758
04:09:18,479 --> 04:09:22,199
all the the pandas the Jupiter notebooks

3759
04:09:22,199 --> 04:09:23,520
the

3760
04:09:23,520 --> 04:09:25,979
the other neo4j queries everything is is

3761
04:09:25,979 --> 04:09:29,720
open and free I'll share that happily

3762
04:09:35,580 --> 04:09:39,140
all right thank you

3763
04:31:44,399 --> 04:31:46,939
oops

3764
04:32:07,439 --> 04:32:09,979
followers

3765
04:32:11,819 --> 04:32:14,420
sure

3766
04:32:26,340 --> 04:32:28,800
sweet cool can you guys hear me

3767
04:32:28,800 --> 04:32:30,420
I

3768
04:32:30,420 --> 04:32:33,300
cool thanks for coming to my talk

3769
04:32:33,300 --> 04:32:35,819
So today we're going to speak about a

3770
04:32:35,819 --> 04:32:37,920
special bug that affects a lot of smart

3771
04:32:37,920 --> 04:32:41,040
contacts and there was over one billion

3772
04:32:41,040 --> 04:32:44,220
dollars at risk during its peak and this

3773
04:32:44,220 --> 04:32:46,500
bug was also awarded the world's largest

3774
04:32:46,500 --> 04:32:50,159
bug Bounty ever paid ever so let's get

3775
04:32:50,159 --> 04:32:51,720
into it

3776
04:32:51,720 --> 04:32:52,979
so

3777
04:32:52,979 --> 04:32:56,399
just a bit about myself I'm ashikamin

3778
04:32:56,399 --> 04:32:58,199
I recently became independent a few

3779
04:32:58,199 --> 04:33:00,779
months ago but before that I was working

3780
04:33:00,779 --> 04:33:02,520
at Isidro for two years that's where I

3781
04:33:02,520 --> 04:33:05,278
learned about smart contracts and I

3782
04:33:05,278 --> 04:33:06,900
think some of the isider guys are around

3783
04:33:06,900 --> 04:33:08,458
so if they are you should definitely

3784
04:33:08,458 --> 04:33:10,080
listen to them they're super duper

3785
04:33:10,080 --> 04:33:11,641
talented and produce like the most

3786
04:33:11,641 --> 04:33:15,719
amazing work so shout out to isiro

3787
04:33:15,719 --> 04:33:18,240
um in my spare time I like to play ctfs

3788
04:33:18,240 --> 04:33:21,000
and I play Under the team name tested

3789
04:33:21,000 --> 04:33:24,299
Stick Sandwich the team is just me I'm

3790
04:33:24,299 --> 04:33:25,740
the whole team

3791
04:33:25,740 --> 04:33:27,599
um but I don't play for points so I just

3792
04:33:27,599 --> 04:33:29,879
do it for learning just for fun and when

3793
04:33:29,879 --> 04:33:32,938
I do have anything like noteworthy I

3794
04:33:32,938 --> 04:33:35,099
will write about it on my blog so

3795
04:33:35,099 --> 04:33:38,039
at ashik.za you can see all of my CTF

3796
04:33:38,039 --> 04:33:40,561
blog posts and there's also just social

3797
04:33:40,561 --> 04:33:42,061
media handles if you guys ever want to

3798
04:33:42,061 --> 04:33:44,699
get in touch so Twitter is probably the

3799
04:33:44,699 --> 04:33:45,900
best

3800
04:33:45,900 --> 04:33:47,641
um I don't really like this code this

3801
04:33:47,641 --> 04:33:48,840
code is

3802
04:33:48,840 --> 04:33:50,759
full of spam so I'll probably miss your

3803
04:33:50,759 --> 04:33:54,079
message but Twitter is pretty good

3804
04:33:54,240 --> 04:33:56,160
beyond that I also post about my

3805
04:33:56,160 --> 04:33:57,660
research so a lot of my research is

3806
04:33:57,660 --> 04:34:00,000
about bug bonus so during my time at

3807
04:34:00,000 --> 04:34:03,719
isilo I focused on bug disclosures and I

3808
04:34:03,719 --> 04:34:05,278
kind of posted all of the different bugs

3809
04:34:05,278 --> 04:34:07,859
that I've disclosed over time so today

3810
04:34:07,859 --> 04:34:09,840
we'll be speaking about one of the bugs

3811
04:34:09,840 --> 04:34:13,759
I disclosed and escalated as well so

3812
04:34:13,980 --> 04:34:15,778
the bug is about booking smart contracts

3813
04:34:15,778 --> 04:34:18,061
and in particular speaking proxy

3814
04:34:18,061 --> 04:34:20,938
contracts but to get to it I'm kind of

3815
04:34:20,938 --> 04:34:22,199
going to build up all the requirements

3816
04:34:22,199 --> 04:34:23,820
that we need to talk about a bit right

3817
04:34:23,820 --> 04:34:25,799
so I'm going to intro smart contracts

3818
04:34:25,799 --> 04:34:27,419
into the requirements that we need for

3819
04:34:27,419 --> 04:34:29,699
the bug speak about the exploit speak

3820
04:34:29,699 --> 04:34:31,500
about the impact and then talk about

3821
04:34:31,500 --> 04:34:33,419
escalation and then later then we can

3822
04:34:33,419 --> 04:34:36,539
talk about impact and any of the

3823
04:34:36,539 --> 04:34:38,580
remediation

3824
04:34:38,580 --> 04:34:41,400
cool so what are smart contracts right

3825
04:34:41,400 --> 04:34:43,859
so IBM says smart contracts or programs

3826
04:34:43,859 --> 04:34:45,419
on the blockchain and they run with

3827
04:34:45,419 --> 04:34:47,219
three determined conditions are made but

3828
04:34:47,219 --> 04:34:48,719
I mean you can Google it and you'll find

3829
04:34:48,719 --> 04:34:51,000
10 000 definitions but basically there

3830
04:34:51,000 --> 04:34:53,219
are blockchain programs right but what

3831
04:34:53,219 --> 04:34:54,900
does that mean so

3832
04:34:54,900 --> 04:34:56,759
usually people talk about smart

3833
04:34:56,759 --> 04:34:58,400
contracts as

3834
04:34:58,400 --> 04:35:00,778
analogous to vending machines

3835
04:35:00,778 --> 04:35:02,520
so

3836
04:35:02,520 --> 04:35:04,500
the reason they use this analogy right

3837
04:35:04,500 --> 04:35:05,879
because vending machines don't have this

3838
04:35:05,879 --> 04:35:08,400
idea of a con right so on their own

3839
04:35:08,400 --> 04:35:10,259
vending machines don't do anything so

3840
04:35:10,259 --> 04:35:12,900
until someone comes up and puts some

3841
04:35:12,900 --> 04:35:15,240
money in selects an item then this is

3842
04:35:15,240 --> 04:35:17,099
some kind of output but so smart

3843
04:35:17,099 --> 04:35:18,958
contracts sort of Behaving the same way

3844
04:35:18,958 --> 04:35:21,660
there's no notion of con job so they

3845
04:35:21,660 --> 04:35:24,061
won't act on themselves right there has

3846
04:35:24,061 --> 04:35:26,099
to be some entity interacting with a

3847
04:35:26,099 --> 04:35:29,278
contract before something happens so

3848
04:35:29,278 --> 04:35:30,840
there's usually some kind of external

3849
04:35:30,840 --> 04:35:32,641
either human being or even just a script

3850
04:35:32,641 --> 04:35:35,060
that's running

3851
04:35:35,160 --> 04:35:37,980
more importantly a smart content has two

3852
04:35:37,980 --> 04:35:39,299
very important things and that's just

3853
04:35:39,299 --> 04:35:42,359
code and state so the code is compiled

3854
04:35:42,359 --> 04:35:44,938
by code but we can write it in any

3855
04:35:44,938 --> 04:35:47,580
language so solidity Viper and there's a

3856
04:35:47,580 --> 04:35:48,958
couple of old ones too

3857
04:35:48,958 --> 04:35:50,641
but the state

3858
04:35:50,641 --> 04:35:52,080
yeah so the state is the other part of

3859
04:35:52,080 --> 04:35:53,340
it and the state is basically the

3860
04:35:53,340 --> 04:35:55,141
storage of the contract and that's just

3861
04:35:55,141 --> 04:35:56,520
holding all the states variables so

3862
04:35:56,520 --> 04:35:58,141
anything important related to like

3863
04:35:58,141 --> 04:36:02,278
metadata or anything else right

3864
04:36:02,278 --> 04:36:04,320
cool so because smart contracts live on

3865
04:36:04,320 --> 04:36:05,641
a blockchain and not just on a server

3866
04:36:05,641 --> 04:36:07,320
somewhere it inherits a lot of

3867
04:36:07,320 --> 04:36:08,938
properties but the main three ones for

3868
04:36:08,938 --> 04:36:11,580
today are irreversible transactions so

3869
04:36:11,580 --> 04:36:13,141
when you interact with any smart

3870
04:36:13,141 --> 04:36:14,641
contract or anything on the blockchain

3871
04:36:14,641 --> 04:36:16,199
there's no way to reverse the

3872
04:36:16,199 --> 04:36:17,820
transaction so

3873
04:36:17,820 --> 04:36:19,618
once it's done it's finalized right so

3874
04:36:19,618 --> 04:36:21,180
if you are an expert at blockchain you

3875
04:36:21,180 --> 04:36:23,099
will argue with me and say

3876
04:36:23,099 --> 04:36:24,500
it's not true because you can

3877
04:36:24,500 --> 04:36:26,879
technically Fork the chain and pay

3878
04:36:26,879 --> 04:36:28,438
someone pay all the miners to get it

3879
04:36:28,438 --> 04:36:29,699
right

3880
04:36:29,699 --> 04:36:31,859
but like for today's purpose it's not

3881
04:36:31,859 --> 04:36:33,240
really true right so we can just call it

3882
04:36:33,240 --> 04:36:34,618
irreversible

3883
04:36:34,618 --> 04:36:37,141
and then the next property uh is atomic

3884
04:36:37,141 --> 04:36:38,938
transactions and this just means that

3885
04:36:38,938 --> 04:36:41,641
transactions happen as ease so it either

3886
04:36:41,641 --> 04:36:44,039
happens altogether or none at all right

3887
04:36:44,039 --> 04:36:46,618
and this is very important so if your

3888
04:36:46,618 --> 04:36:48,419
code hits a revert at some point later

3889
04:36:48,419 --> 04:36:50,580
in the stack the entire thing goes

3890
04:36:50,580 --> 04:36:52,680
divides back basically and there's no

3891
04:36:52,680 --> 04:36:54,840
State changes committed so that just

3892
04:36:54,840 --> 04:36:57,240
means that everything happens at once or

3893
04:36:57,240 --> 04:36:58,561
none at all

3894
04:36:58,561 --> 04:37:00,840
and then the last property is immutable

3895
04:37:00,840 --> 04:37:01,980
code

3896
04:37:01,980 --> 04:37:03,299
and

3897
04:37:03,299 --> 04:37:04,799
this is the most important month for

3898
04:37:04,799 --> 04:37:05,699
today

3899
04:37:05,699 --> 04:37:07,618
so immutable code just means that once

3900
04:37:07,618 --> 04:37:09,539
you've deployed your bytecode there's no

3901
04:37:09,539 --> 04:37:11,099
way to change it right it's there

3902
04:37:11,099 --> 04:37:12,719
forever and

3903
04:37:12,719 --> 04:37:14,699
it's just never going to change you

3904
04:37:14,699 --> 04:37:16,199
could hard code some parameters to pause

3905
04:37:16,199 --> 04:37:18,118
your contracts but there's no way to do

3906
04:37:18,118 --> 04:37:19,561
anything else

3907
04:37:19,561 --> 04:37:21,778
uh there is

3908
04:37:21,778 --> 04:37:24,359
a special Edge case of immutability and

3909
04:37:24,359 --> 04:37:27,000
that's called self-destruct so there is

3910
04:37:27,000 --> 04:37:29,520
an instruction on the blockchain that

3911
04:37:29,520 --> 04:37:31,141
you can use specifically for ethereum in

3912
04:37:31,141 --> 04:37:33,660
ethereum style chains where you could

3913
04:37:33,660 --> 04:37:35,580
wipe out all of the state and wipe out

3914
04:37:35,580 --> 04:37:37,438
all of the code so in that sense it's

3915
04:37:37,438 --> 04:37:39,599
not super immutable because it's either

3916
04:37:39,599 --> 04:37:42,000
on or off right but you couldn't edit

3917
04:37:42,000 --> 04:37:44,299
the code

3918
04:37:45,480 --> 04:37:47,580
so I mean if you're a Dev which I think

3919
04:37:47,580 --> 04:37:50,458
some of you guys are you might be

3920
04:37:50,458 --> 04:37:52,379
now who wants to write immutable code

3921
04:37:52,379 --> 04:37:55,141
that's like really scary right so this

3922
04:37:55,141 --> 04:37:57,000
has been an issue I mean I try to get

3923
04:37:57,000 --> 04:37:58,500
this graph where

3924
04:37:58,500 --> 04:38:00,118
I'm trying to show that there's been

3925
04:38:00,118 --> 04:38:02,099
three billion dollars worth of damage

3926
04:38:02,099 --> 04:38:03,660
that's already been taking place because

3927
04:38:03,660 --> 04:38:05,458
of immutable code

3928
04:38:05,458 --> 04:38:07,438
but I couldn't get an exact estimate

3929
04:38:07,438 --> 04:38:09,000
because there's also things like private

3930
04:38:09,000 --> 04:38:12,118
key compromises and insider trading so

3931
04:38:12,118 --> 04:38:14,938
it might be higher but the point is that

3932
04:38:14,938 --> 04:38:16,320
it's a high number

3933
04:38:16,320 --> 04:38:18,919
in the billions

3934
04:38:19,320 --> 04:38:21,061
so there's a very real need for

3935
04:38:21,061 --> 04:38:22,141
upgradability

3936
04:38:22,141 --> 04:38:24,660
but unfortunately this is a double-edged

3937
04:38:24,660 --> 04:38:26,641
sword because upgradability comes with

3938
04:38:26,641 --> 04:38:28,799
its own issues that cost even more money

3939
04:38:28,799 --> 04:38:30,539
to be lost

3940
04:38:30,539 --> 04:38:31,980
so

3941
04:38:31,980 --> 04:38:34,199
to talk about upgradability and how it

3942
04:38:34,199 --> 04:38:36,180
works we have to first talk about how

3943
04:38:36,180 --> 04:38:37,680
smart contracts communicate with each

3944
04:38:37,680 --> 04:38:40,020
other at all right and the first way is

3945
04:38:40,020 --> 04:38:41,520
a DOT call

3946
04:38:41,520 --> 04:38:43,618
so that call works in the same way you

3947
04:38:43,618 --> 04:38:45,359
might think a normal computer computer

3948
04:38:45,359 --> 04:38:48,599
program works and that's just by one

3949
04:38:48,599 --> 04:38:50,219
contract calling another one and the

3950
04:38:50,219 --> 04:38:51,359
state changes

3951
04:38:51,359 --> 04:38:53,340
committed to the call to the contract

3952
04:38:53,340 --> 04:38:54,660
that we called

3953
04:38:54,660 --> 04:38:55,618
like

3954
04:38:55,618 --> 04:38:57,778
uh pretty straightforward so as an

3955
04:38:57,778 --> 04:38:59,278
example in the slide

3956
04:38:59,278 --> 04:39:01,141
if you had a call transfer the token

3957
04:39:01,141 --> 04:39:04,141
balance on contract B state would be

3958
04:39:04,141 --> 04:39:05,879
updated

3959
04:39:05,879 --> 04:39:09,359
the next goal is delegate call and

3960
04:39:09,359 --> 04:39:11,580
this is basically what's called a code

3961
04:39:11,580 --> 04:39:13,859
copy right so instead of the state

3962
04:39:13,859 --> 04:39:15,719
changes competing on the initial

3963
04:39:15,719 --> 04:39:17,699
contract so the Target contract is

3964
04:39:17,699 --> 04:39:19,259
converted on the initial contact line

3965
04:39:19,259 --> 04:39:20,938
and

3966
04:39:20,938 --> 04:39:23,039
what this means is the code at Contract

3967
04:39:23,039 --> 04:39:25,080
B is copied and those State changes

3968
04:39:25,080 --> 04:39:27,000
applied to contract a

3969
04:39:27,000 --> 04:39:28,799
so you can just think of delegate call

3970
04:39:28,799 --> 04:39:31,579
as copy

3971
04:39:31,799 --> 04:39:34,561
and this two things we can use together

3972
04:39:34,561 --> 04:39:36,500
and form some kind of mini architecture

3973
04:39:36,500 --> 04:39:38,940
and this will be enough to have an

3974
04:39:38,940 --> 04:39:41,520
upgradable pattern right so

3975
04:39:41,520 --> 04:39:43,920
what we do is we separate the bytecode

3976
04:39:43,920 --> 04:39:45,660
from the state by using two separate

3977
04:39:45,660 --> 04:39:47,280
contracts with respect to one or the

3978
04:39:47,280 --> 04:39:48,540
other

3979
04:39:48,540 --> 04:39:50,040
so

3980
04:39:50,040 --> 04:39:51,900
we call the proxy contract the one that

3981
04:39:51,900 --> 04:39:53,520
holds the state and the logic contract

3982
04:39:53,520 --> 04:39:55,260
the ones below the bytecode

3983
04:39:55,260 --> 04:39:57,780
so if at some point we find some buggy

3984
04:39:57,780 --> 04:39:59,640
issue in the logic contract we can

3985
04:39:59,640 --> 04:40:01,798
upgrade the logic contract by simply

3986
04:40:01,798 --> 04:40:03,958
pointing to a New Logic contract at the

3987
04:40:03,958 --> 04:40:05,400
bottom of the slide this is like a tiny

3988
04:40:05,400 --> 04:40:07,700
diagram

3989
04:40:08,458 --> 04:40:10,020
cool so those are two ingredients that

3990
04:40:10,020 --> 04:40:11,700
we have we have upgradability and we

3991
04:40:11,700 --> 04:40:12,718
have

3992
04:40:12,718 --> 04:40:14,760
self-destruct but the last ingredient

3993
04:40:14,760 --> 04:40:17,400
that we need for our bug is just to talk

3994
04:40:17,400 --> 04:40:20,218
about initialization so when you deploy

3995
04:40:20,218 --> 04:40:21,840
a smart contract there's a Constructor

3996
04:40:21,840 --> 04:40:24,360
that runs which is the normal function

3997
04:40:24,360 --> 04:40:26,218
that you consider in a normal computer

3998
04:40:26,218 --> 04:40:27,900
programming

3999
04:40:27,900 --> 04:40:30,240
but in this case

4000
04:40:30,240 --> 04:40:32,040
because State and the logic are separate

4001
04:40:32,040 --> 04:40:34,798
we need to initialize the proxy

4002
04:40:34,798 --> 04:40:36,420
contracts separately so we need to

4003
04:40:36,420 --> 04:40:38,820
assimilate a Constructor to get the

4004
04:40:38,820 --> 04:40:40,860
state across

4005
04:40:40,860 --> 04:40:42,900
so the way that works we just hard code

4006
04:40:42,900 --> 04:40:44,580
a special function and make sure it only

4007
04:40:44,580 --> 04:40:46,320
runs once

4008
04:40:46,320 --> 04:40:47,878
and usually just like a normal

4009
04:40:47,878 --> 04:40:49,920
Constructor there's access control that

4010
04:40:49,920 --> 04:40:50,820
happens

4011
04:40:50,820 --> 04:40:52,920
that gets provided to different users

4012
04:40:52,920 --> 04:40:56,640
when the initialization takes place

4013
04:40:56,640 --> 04:40:59,100
cool so

4014
04:40:59,100 --> 04:41:01,740
this is the first iteration of the bug

4015
04:41:01,740 --> 04:41:04,140
and before we talk about the diagram and

4016
04:41:04,140 --> 04:41:06,420
have X actual exploit works we need to

4017
04:41:06,420 --> 04:41:09,000
just talk about the assumptions that we

4018
04:41:09,000 --> 04:41:11,160
need to make so in this case we need to

4019
04:41:11,160 --> 04:41:13,740
assume that our logic contract has some

4020
04:41:13,740 --> 04:41:15,120
kind of delegate call

4021
04:41:15,120 --> 04:41:16,920
right so just taking on that assumption

4022
04:41:16,920 --> 04:41:19,620
there's an exploit that we can do

4023
04:41:19,620 --> 04:41:21,660
so one is that we check if the logic

4024
04:41:21,660 --> 04:41:23,400
contract has been initialized because if

4025
04:41:23,400 --> 04:41:24,600
you remember

4026
04:41:24,600 --> 04:41:26,580
the state of the logic contract is not

4027
04:41:26,580 --> 04:41:29,160
important in our architecture at all

4028
04:41:29,160 --> 04:41:30,958
so we can additionalize the logic

4029
04:41:30,958 --> 04:41:33,180
contract get any of the access consoles

4030
04:41:33,180 --> 04:41:35,040
needed if it's been initialized

4031
04:41:35,040 --> 04:41:37,200
and then we can deploy our own contracts

4032
04:41:37,200 --> 04:41:38,580
because it's permissionless anyone's

4033
04:41:38,580 --> 04:41:40,740
allowed to deploy contracts and in this

4034
04:41:40,740 --> 04:41:42,540
context we can include a self-destruct

4035
04:41:42,540 --> 04:41:44,520
instruction

4036
04:41:44,520 --> 04:41:46,200
so what we could do is using this

4037
04:41:46,200 --> 04:41:48,540
delegate call that we assumed we could

4038
04:41:48,540 --> 04:41:51,060
upgrade the logic contract and destroy

4039
04:41:51,060 --> 04:41:51,958
it

4040
04:41:51,958 --> 04:41:54,060
right so what does that look like

4041
04:41:54,060 --> 04:41:56,700
so once the delegate calls performed our

4042
04:41:56,700 --> 04:41:59,100
bytecode ethology contract is wiped the

4043
04:41:59,100 --> 04:42:01,260
logic state is wiped so this just means

4044
04:42:01,260 --> 04:42:03,540
that the proxy points to nothing right

4045
04:42:03,540 --> 04:42:05,520
and this is the first iteration of the

4046
04:42:05,520 --> 04:42:07,760
brick

4047
04:42:08,520 --> 04:42:09,718
but

4048
04:42:09,718 --> 04:42:11,820
this is just temporary so it's only the

4049
04:42:11,820 --> 04:42:14,520
first iteration and the Plexi

4050
04:42:14,520 --> 04:42:15,900
administrator could come in and say hey

4051
04:42:15,900 --> 04:42:18,120
I've seen the brick as kind of an issue

4052
04:42:18,120 --> 04:42:20,218
but no problem we've included

4053
04:42:20,218 --> 04:42:22,440
upgradability on purpose so we can just

4054
04:42:22,440 --> 04:42:24,480
go in and upgrade the proxy point to a

4055
04:42:24,480 --> 04:42:25,500
New Logic

4056
04:42:25,500 --> 04:42:28,218
sorted out

4057
04:42:28,740 --> 04:42:32,580
cool so let's just chat about impact

4058
04:42:32,580 --> 04:42:34,200
even though it's only a temporary brick

4059
04:42:34,200 --> 04:42:36,958
it's still pretty bad so the logic

4060
04:42:36,958 --> 04:42:39,298
contract is permanently destroyed right

4061
04:42:39,298 --> 04:42:41,218
once it is destroyed there's no way to

4062
04:42:41,218 --> 04:42:43,020
get it back because transactions are

4063
04:42:43,020 --> 04:42:46,040
irreversible as we

4064
04:42:46,200 --> 04:42:47,820
um the assets that are on the epoxy

4065
04:42:47,820 --> 04:42:49,440
itself so if you have I have a much

4066
04:42:49,440 --> 04:42:51,120
million dollars worth of tokens those

4067
04:42:51,120 --> 04:42:53,280
are not accessible at all while the

4068
04:42:53,280 --> 04:42:54,718
proxy is pretty so until an

4069
04:42:54,718 --> 04:42:56,520
administrator comes through and upgrades

4070
04:42:56,520 --> 04:42:58,920
the contract it's locked in

4071
04:42:58,920 --> 04:43:01,920
and this could also be made more severe

4072
04:43:01,920 --> 04:43:04,020
if there's a time lock right because we

4073
04:43:04,020 --> 04:43:05,520
have this sort of trust admins to not

4074
04:43:05,520 --> 04:43:09,120
just hot swap our logic at any time so

4075
04:43:09,120 --> 04:43:10,798
we sometimes there's a time lock

4076
04:43:10,798 --> 04:43:12,780
involved where you have to commit a code

4077
04:43:12,780 --> 04:43:15,060
for maybe seven days or 14 days and

4078
04:43:15,060 --> 04:43:17,040
people are allowed to check out what the

4079
04:43:17,040 --> 04:43:19,020
code is doing before it's applied so

4080
04:43:19,020 --> 04:43:20,638
your assets might be locked up for a

4081
04:43:20,638 --> 04:43:21,540
little while

4082
04:43:21,540 --> 04:43:25,080
and the next thing is epoxy knob so when

4083
04:43:25,080 --> 04:43:26,940
the proxy is damaged and just becoming a

4084
04:43:26,940 --> 04:43:29,458
brick there's no hard-coded diverts

4085
04:43:29,458 --> 04:43:32,160
right so the code just Maps through and

4086
04:43:32,160 --> 04:43:33,780
that just means that any calls to the

4087
04:43:33,780 --> 04:43:36,120
proxy itself after the brick means that

4088
04:43:36,120 --> 04:43:37,920
there's just nothing happening so if

4089
04:43:37,920 --> 04:43:40,200
access controls are relied on the proxy

4090
04:43:40,200 --> 04:43:42,360
then we just bypass those access

4091
04:43:42,360 --> 04:43:45,958
controls and this happened in rbv2

4092
04:43:45,958 --> 04:43:46,980
and then the last one is just

4093
04:43:46,980 --> 04:43:48,958
reputational damage which isn't like a

4094
04:43:48,958 --> 04:43:50,700
real big issue but I mean I wouldn't

4095
04:43:50,700 --> 04:43:52,740
trust my money with someone this code

4096
04:43:52,740 --> 04:43:55,080
got big fight

4097
04:43:55,080 --> 04:43:58,798
cool uh so let's talk about profit

4098
04:43:58,798 --> 04:44:01,260
the first profit mechanism is exploiting

4099
04:44:01,260 --> 04:44:04,440
the knob so in Ave V2 their contracts

4100
04:44:04,440 --> 04:44:07,020
are vulnerable to this exact bug and if

4101
04:44:07,020 --> 04:44:09,000
it was exploited it is possible to steal

4102
04:44:09,000 --> 04:44:10,560
a couple million dollars out of the

4103
04:44:10,560 --> 04:44:12,718
different contract because there was an

4104
04:44:12,718 --> 04:44:15,240
up through the access control

4105
04:44:15,240 --> 04:44:16,620
um

4106
04:44:16,620 --> 04:44:18,240
but it never happened though because

4107
04:44:18,240 --> 04:44:19,980
there was someone who disclosed

4108
04:44:19,980 --> 04:44:21,540
responsibly there was actually no

4109
04:44:21,540 --> 04:44:23,520
exploit so we'll go

4110
04:44:23,520 --> 04:44:26,878
the next way is shorting the lock token

4111
04:44:26,878 --> 04:44:28,740
so if your contract has a bunch of

4112
04:44:28,740 --> 04:44:31,320
native tokens ftt token or any other

4113
04:44:31,320 --> 04:44:33,240
token you could show it the token

4114
04:44:33,240 --> 04:44:35,878
beforehand exploit the contract and then

4115
04:44:35,878 --> 04:44:37,560
of course panic and you'll make a lot of

4116
04:44:37,560 --> 04:44:39,000
money this also has never happened

4117
04:44:39,000 --> 04:44:41,458
before but it is some way to make money

4118
04:44:41,458 --> 04:44:43,440
and then the best case is responsible

4119
04:44:43,440 --> 04:44:45,180
disclosure which is sort of what happens

4120
04:44:45,180 --> 04:44:47,580
in each case with this bug right so for

4121
04:44:47,580 --> 04:44:50,400
rbv2 in the example uh the Whitehead got

4122
04:44:50,400 --> 04:44:52,200
paid twenty five thousand dollars for

4123
04:44:52,200 --> 04:44:54,540
disclosing which is not bad

4124
04:44:54,540 --> 04:44:55,560
um

4125
04:44:55,560 --> 04:44:58,260
it's a sort of on par with critical bugs

4126
04:44:58,260 --> 04:45:00,840
of web 2 right

4127
04:45:00,840 --> 04:45:03,180
cool so we already spoke about the admin

4128
04:45:03,180 --> 04:45:05,760
upgrading to a fresh logic contract but

4129
04:45:05,760 --> 04:45:07,860
if you're a bug bunny hunter

4130
04:45:07,860 --> 04:45:09,780
you could think cool what are some of

4131
04:45:09,780 --> 04:45:11,160
the things you could do to fix the bug

4132
04:45:11,160 --> 04:45:13,980
if you find it and one way is to just

4133
04:45:13,980 --> 04:45:15,958
initialize the contact directly without

4134
04:45:15,958 --> 04:45:18,780
using your malicious contact

4135
04:45:18,780 --> 04:45:20,400
right so that just means we're going to

4136
04:45:20,400 --> 04:45:22,620
pick the contract as is but not in a

4137
04:45:22,620 --> 04:45:23,940
malicious way

4138
04:45:23,940 --> 04:45:25,798
and then petrifying the logic contract

4139
04:45:25,798 --> 04:45:27,480
so that just means as you deploy the

4140
04:45:27,480 --> 04:45:29,760
contract The Constructor automatically

4141
04:45:29,760 --> 04:45:31,980
initializes the logic so that no one

4142
04:45:31,980 --> 04:45:35,060
else can reinitialize it

4143
04:45:36,900 --> 04:45:40,440
Okay so we've done good we made twenty

4144
04:45:40,440 --> 04:45:42,298
five thousand dollars we prevented a

4145
04:45:42,298 --> 04:45:44,520
couple million from being stolen uh the

4146
04:45:44,520 --> 04:45:45,900
admin is a bit annoyed but they've

4147
04:45:45,900 --> 04:45:48,540
upgraded the code their code but we can

4148
04:45:48,540 --> 04:45:49,980
do a little bit better

4149
04:45:49,980 --> 04:45:51,420
so when I say a little bit better

4150
04:45:51,420 --> 04:45:54,060
there's a special branch of proxies

4151
04:45:54,060 --> 04:45:55,878
where we can escalate the temporary

4152
04:45:55,878 --> 04:45:59,000
permanent one

4153
04:46:00,060 --> 04:46:02,878
and that's the uups proxy so how does it

4154
04:46:02,878 --> 04:46:03,718
work

4155
04:46:03,718 --> 04:46:05,700
it's very similar to our original epoxy

4156
04:46:05,700 --> 04:46:07,620
but with a couple differences and the

4157
04:46:07,620 --> 04:46:10,260
main idea behind is to highly optimize

4158
04:46:10,260 --> 04:46:12,600
the proxy itself and what that means is

4159
04:46:12,600 --> 04:46:15,360
that the upgrade mechanism is moved from

4160
04:46:15,360 --> 04:46:17,458
the proxy to the logic

4161
04:46:17,458 --> 04:46:19,920
so this just also means that the proxy

4162
04:46:19,920 --> 04:46:22,260
itself has no right functions at all so

4163
04:46:22,260 --> 04:46:24,540
the only way to interact with the state

4164
04:46:24,540 --> 04:46:27,420
is to delegate delegate go into the

4165
04:46:27,420 --> 04:46:29,160
logic concept

4166
04:46:29,160 --> 04:46:31,020
and

4167
04:46:31,020 --> 04:46:32,820
everything else sort of works as is the

4168
04:46:32,820 --> 04:46:34,440
initialization provides access control

4169
04:46:34,440 --> 04:46:36,360
as usual

4170
04:46:36,360 --> 04:46:38,040
um and in the main point of the UPS

4171
04:46:38,040 --> 04:46:39,840
proxy is that the upgrade itself has

4172
04:46:39,840 --> 04:46:42,060
delicate which

4173
04:46:42,060 --> 04:46:43,378
so

4174
04:46:43,378 --> 04:46:45,060
this is what the upgrade mechanism looks

4175
04:46:45,060 --> 04:46:46,200
like

4176
04:46:46,200 --> 04:46:48,240
and only two main steps one is to check

4177
04:46:48,240 --> 04:46:50,040
that we have authorization to perform an

4178
04:46:50,040 --> 04:46:51,718
upgrade and the second one is to perform

4179
04:46:51,718 --> 04:46:53,760
the upgrade itself right so authorize

4180
04:46:53,760 --> 04:46:55,980
upgrade once initialized you get those

4181
04:46:55,980 --> 04:46:57,780
controls to do it

4182
04:46:57,780 --> 04:46:59,638
cool

4183
04:46:59,638 --> 04:47:01,500
looking at the upgrade mechanism we can

4184
04:47:01,500 --> 04:47:03,958
see this delicate goal right in this

4185
04:47:03,958 --> 04:47:06,480
delegate call is

4186
04:47:06,480 --> 04:47:09,360
allowed to run at any time provided is a

4187
04:47:09,360 --> 04:47:11,400
bit uh send some data in

4188
04:47:11,400 --> 04:47:12,958
and this just means that anyone that

4189
04:47:12,958 --> 04:47:14,820
upgrades can always perform a delegate

4190
04:47:14,820 --> 04:47:16,680
call right and if you remember this is

4191
04:47:16,680 --> 04:47:19,560
performed on the logic contract

4192
04:47:19,560 --> 04:47:22,680
cool so the actual exploit for permanent

4193
04:47:22,680 --> 04:47:24,718
trick performs in the exact same way as

4194
04:47:24,718 --> 04:47:27,000
the previous one where if it's not

4195
04:47:27,000 --> 04:47:29,040
initialized okay initialize it with her

4196
04:47:29,040 --> 04:47:31,020
own malicious contract and call a

4197
04:47:31,020 --> 04:47:32,040
self-destruct

4198
04:47:32,040 --> 04:47:34,260
so everything looks the same but the

4199
04:47:34,260 --> 04:47:37,440
differences are in the way the actual

4200
04:47:37,440 --> 04:47:40,217
impact works

4201
04:47:40,560 --> 04:47:43,200
so part of the impact is that the proxy

4202
04:47:43,200 --> 04:47:45,180
now points to a logic that is

4203
04:47:45,180 --> 04:47:47,700
permanently destroyed and the proxy

4204
04:47:47,700 --> 04:47:49,680
permanently points to nothing which

4205
04:47:49,680 --> 04:47:52,860
means there's no strain changes again

4206
04:47:52,860 --> 04:47:54,900
so any of your assets are gone forever

4207
04:47:54,900 --> 04:47:57,138
right

4208
04:47:58,500 --> 04:48:02,400
and updated impact so

4209
04:48:02,400 --> 04:48:03,780
one of the main things that's different

4210
04:48:03,780 --> 04:48:05,878
is that the proxy itself points to

4211
04:48:05,878 --> 04:48:08,100
nothing permanently the similar impact

4212
04:48:08,100 --> 04:48:09,780
is that the logic contract is

4213
04:48:09,780 --> 04:48:11,160
permanently destroyed

4214
04:48:11,160 --> 04:48:13,378
and the third is that your assets are

4215
04:48:13,378 --> 04:48:15,180
locked forever so if you have a couple

4216
04:48:15,180 --> 04:48:17,700
hundred million let's go on forever

4217
04:48:17,700 --> 04:48:20,340
and then plug synapse are working in the

4218
04:48:20,340 --> 04:48:22,820
same way too

4219
04:48:24,060 --> 04:48:27,240
cool uh so

4220
04:48:27,240 --> 04:48:29,940
when I was working at iocyto I disclosed

4221
04:48:29,940 --> 04:48:33,000
this bug to five companies two of these

4222
04:48:33,000 --> 04:48:35,100
are not mine but two of them were also

4223
04:48:35,100 --> 04:48:36,360
undisclosed so I just thought something

4224
04:48:36,360 --> 04:48:38,700
with other pictures on the top right

4225
04:48:38,700 --> 04:48:41,340
hand side is from ddub and at the bottom

4226
04:48:41,340 --> 04:48:43,378
is John Taylor

4227
04:48:43,378 --> 04:48:46,798
and just on these five contacts alone

4228
04:48:46,798 --> 04:48:49,500
we managed to save over 15 million

4229
04:48:49,500 --> 04:48:51,900
dollars from being hacked right and at

4230
04:48:51,900 --> 04:48:52,860
the time

4231
04:48:52,860 --> 04:48:55,680
uh I thought cool this is probably a bit

4232
04:48:55,680 --> 04:48:57,298
more of a widespread issue so I spoke to

4233
04:48:57,298 --> 04:49:00,480
Kyle it was my boss at the time and we

4234
04:49:00,480 --> 04:49:01,980
decided to escalate this issue a bit

4235
04:49:01,980 --> 04:49:03,240
further

4236
04:49:03,240 --> 04:49:05,280
and we hosted a meeting with open

4237
04:49:05,280 --> 04:49:07,320
Zeppelin which is the author of the uebs

4238
04:49:07,320 --> 04:49:10,218
proxy and when I spoke to them

4239
04:49:10,218 --> 04:49:13,200
we just told them hey you know look we

4240
04:49:13,200 --> 04:49:14,878
found these five contracts it might be

4241
04:49:14,878 --> 04:49:16,980
an issue

4242
04:49:16,980 --> 04:49:19,080
they said yeah actually someone came to

4243
04:49:19,080 --> 04:49:20,580
us a couple days earlier they found the

4244
04:49:20,580 --> 04:49:22,200
same issue and we've started the

4245
04:49:22,200 --> 04:49:24,840
remediation process and

4246
04:49:24,840 --> 04:49:27,540
that process was demonstrating every

4247
04:49:27,540 --> 04:49:30,180
single blockchain and they found 150

4248
04:49:30,180 --> 04:49:32,700
other contracts that were vulnerable

4249
04:49:32,700 --> 04:49:35,820
uh so luckily they found it right

4250
04:49:35,820 --> 04:49:37,378
but

4251
04:49:37,378 --> 04:49:40,080
what did they do they detected all of

4252
04:49:40,080 --> 04:49:42,060
their contracts across different chains

4253
04:49:42,060 --> 04:49:44,280
they updated the source code to include

4254
04:49:44,280 --> 04:49:48,000
a 55 logic so that all of it is fixed in

4255
04:49:48,000 --> 04:49:51,060
the future and they've monitored their

4256
04:49:51,060 --> 04:49:53,400
solution so basically every time there's

4257
04:49:53,400 --> 04:49:54,600
a new deployment

4258
04:49:54,600 --> 04:49:56,700
they will check whether or not they're

4259
04:49:56,700 --> 04:49:57,840
vulnerable and just fix the

4260
04:49:57,840 --> 04:50:00,540
vulnerability as inside so favor

4261
04:50:00,540 --> 04:50:02,400
so

4262
04:50:02,400 --> 04:50:04,980
you might be thinking will be done like

4263
04:50:04,980 --> 04:50:06,780
everything so that there's just no more

4264
04:50:06,780 --> 04:50:07,740
bugs

4265
04:50:07,740 --> 04:50:09,298
they've detected everything on every

4266
04:50:09,298 --> 04:50:10,680
chain

4267
04:50:10,680 --> 04:50:12,298
source code is updated they've

4268
04:50:12,298 --> 04:50:14,638
monitoring for new uh vulnerable

4269
04:50:14,638 --> 04:50:17,760
contracts surely there's nothing else

4270
04:50:17,760 --> 04:50:19,740
and except it was just one more bug

4271
04:50:19,740 --> 04:50:21,540
right there was one more and that

4272
04:50:21,540 --> 04:50:23,040
affected wormhole

4273
04:50:23,040 --> 04:50:24,540
so

4274
04:50:24,540 --> 04:50:27,000
Wormhole was vulnerable to this exact

4275
04:50:27,000 --> 04:50:29,218
bug in a slightly nuanced way

4276
04:50:29,218 --> 04:50:31,798
we're an anonymous Whitehead found

4277
04:50:31,798 --> 04:50:34,440
700 million dollars at risk and just for

4278
04:50:34,440 --> 04:50:36,298
the disclosure alone they got paid

4279
04:50:36,298 --> 04:50:38,400
10 million dollars

4280
04:50:38,400 --> 04:50:40,740
I wasn't the white that they got the 10

4281
04:50:40,740 --> 04:50:43,080
million if it wasn't me I wouldn't give

4282
04:50:43,080 --> 04:50:45,298
this talk I would be on the beach

4283
04:50:45,298 --> 04:50:47,040
somewhere or something

4284
04:50:47,040 --> 04:50:47,878
um

4285
04:50:47,878 --> 04:50:49,860
but yeah cool

4286
04:50:49,860 --> 04:50:51,900
cool so that's it for me the last couple

4287
04:50:51,900 --> 04:50:54,420
takeaways is just that part of the

4288
04:50:54,420 --> 04:50:56,400
reason this bug slipped through everyone

4289
04:50:56,400 --> 04:50:58,560
was that it wasn't a code level bug so

4290
04:50:58,560 --> 04:51:00,298
all the top auditing firms trailer bits

4291
04:51:00,298 --> 04:51:02,580
open Zeppelin everyone missed this bike

4292
04:51:02,580 --> 04:51:04,560
because it is a state dependent bug

4293
04:51:04,560 --> 04:51:06,600
right and what this means is if you're

4294
04:51:06,600 --> 04:51:08,040
on the sort of looking one way and no

4295
04:51:08,040 --> 04:51:10,138
one is looking the other way so if

4296
04:51:10,138 --> 04:51:12,718
anyone's interested you should 100 start

4297
04:51:12,718 --> 04:51:14,400
learning how smart contracts work and

4298
04:51:14,400 --> 04:51:15,600
I'm sure you could find some of your own

4299
04:51:15,600 --> 04:51:16,620
bugs

4300
04:51:16,620 --> 04:51:20,840
cool I hope you enjoyed the talk

4301
04:51:27,480 --> 04:51:31,040
I'm happy to take any questions too

4302
04:51:40,798 --> 04:51:42,900
100 so there's a bunch of different

4303
04:51:42,900 --> 04:51:45,120
online materials

4304
04:51:45,120 --> 04:51:45,840
um

4305
04:51:45,840 --> 04:51:47,700
I can send you a list personally but

4306
04:51:47,700 --> 04:51:49,440
I've mainly focused on trading from the

4307
04:51:49,440 --> 04:51:50,940
security side so there's some more games

4308
04:51:50,940 --> 04:51:52,798
where you can learn about solidity and

4309
04:51:52,798 --> 04:51:54,480
you can learn about how vulnerabilities

4310
04:51:54,480 --> 04:51:57,958
work on Solarity and plenty of ctfs for

4311
04:51:57,958 --> 04:51:59,700
sure cdfs can definitely upscale and

4312
04:51:59,700 --> 04:52:02,540
find these bugs for yourself

4313
04:52:53,820 --> 04:52:55,620
yeah

4314
04:52:55,620 --> 04:52:57,780
so the question was is there any way we

4315
04:52:57,780 --> 04:52:59,458
could find these bugs automatically and

4316
04:52:59,458 --> 04:53:03,600
always remediate them as is yeah

4317
04:53:03,600 --> 04:53:05,940
um so not right now not that I know of

4318
04:53:05,940 --> 04:53:08,340
any um the idea is mostly Grassroots so

4319
04:53:08,340 --> 04:53:10,080
as bugs are discovered they usually come

4320
04:53:10,080 --> 04:53:12,600
up with blog posts and talk about how

4321
04:53:12,600 --> 04:53:14,340
the bug was discovered how to remediate

4322
04:53:14,340 --> 04:53:16,400
it what to do next

4323
04:53:16,400 --> 04:53:18,600
and unfortunately

4324
04:53:18,600 --> 04:53:20,760
most people don't like to disclose their

4325
04:53:20,760 --> 04:53:22,260
bugs too right I've worked with people

4326
04:53:22,260 --> 04:53:24,480
and they've asked me very

4327
04:53:24,480 --> 04:53:26,700
you did not publish a certain bug that

4328
04:53:26,700 --> 04:53:28,860
I'm sure affected another contact so

4329
04:53:28,860 --> 04:53:30,480
there's no real easy way unfortunately

4330
04:53:30,480 --> 04:53:33,600
but hopefully like with incentivizing

4331
04:53:33,600 --> 04:53:35,040
like 10 million dollars worth of bugs

4332
04:53:35,040 --> 04:53:37,020
I'm sure it'll come out

4333
04:53:37,020 --> 04:53:39,980
not at the stage

4334
04:53:58,200 --> 04:54:00,360
yeah I mean I think the nice thing about

4335
04:54:00,360 --> 04:54:02,340
bhagbanes is that you can just drop most

4336
04:54:02,340 --> 04:54:04,020
of your assumptions about any kind of

4337
04:54:04,020 --> 04:54:05,820
library or any contact lens if you think

4338
04:54:05,820 --> 04:54:08,760
this one thing is secure it's it might

4339
04:54:08,760 --> 04:54:10,980
not be right I mean Wormhole had 700

4340
04:54:10,980 --> 04:54:13,080
million and looking at Walmart on its

4341
04:54:13,080 --> 04:54:15,240
own I might think cool 700 million is

4342
04:54:15,240 --> 04:54:16,920
quite a lot of money I'm sure it's safe

4343
04:54:16,920 --> 04:54:19,920
but they got like three times for 300

4344
04:54:19,920 --> 04:54:22,620
million in a different case so

4345
04:54:22,620 --> 04:54:23,820
um you could start anywhere you want

4346
04:54:23,820 --> 04:54:25,080
really and I think the main thing is

4347
04:54:25,080 --> 04:54:26,520
just to do some upskilling in the

4348
04:54:26,520 --> 04:54:28,798
beginning for genetics and once you're

4349
04:54:28,798 --> 04:54:30,600
comfortable with that and

4350
04:54:30,600 --> 04:54:33,199
whatever you feel

4351
04:55:00,298 --> 04:55:02,100
comfortable do you mind explaining zero

4352
04:55:02,100 --> 04:55:04,340
trust

4353
04:55:25,980 --> 04:55:28,700
that's true

4354
04:55:30,958 --> 04:55:33,360
yeah absolutely I mean the main thing is

4355
04:55:33,360 --> 04:55:35,040
that different functions have different

4356
04:55:35,040 --> 04:55:36,420
access levels right different access

4357
04:55:36,420 --> 04:55:37,980
controls you don't want anyone being

4358
04:55:37,980 --> 04:55:41,239
able to upgrade the contact or

4359
04:55:41,340 --> 04:55:43,080
um so you can definitely bake in Access

4360
04:55:43,080 --> 04:55:45,480
Control for certain addresses for

4361
04:55:45,480 --> 04:55:47,040
certain accounts

4362
04:55:47,040 --> 04:55:48,780
um but not everyone does this and that's

4363
04:55:48,780 --> 04:55:50,458
why they get hacked and that's why this

4364
04:55:50,458 --> 04:55:53,580
three billion dollar is gone but uh yeah

4365
04:55:53,580 --> 04:55:55,798
I mean the code is quite genetic so it's

4366
04:55:55,798 --> 04:55:57,840
quite granular in the sense that you can

4367
04:55:57,840 --> 04:55:59,820
hard code any kind of Access Control

4368
04:55:59,820 --> 04:56:01,378
that you want and prevent certain

4369
04:56:01,378 --> 04:56:03,900
messages and prevent certain calls or

4370
04:56:03,900 --> 04:56:05,340
delegate calls or any kind of message

4371
04:56:05,340 --> 04:56:06,660
you want but you'd have to hard code

4372
04:56:06,660 --> 04:56:10,638
that in depending on your needs

4373
04:56:15,360 --> 04:56:18,500
cool thanks guys

