1
00:00:02,590 --> 00:00:07,990
time will start welcome everybody thank

2
00:00:05,620 --> 00:00:11,769
you for coming along to my talk this is

3
00:00:07,990 --> 00:00:16,090
e by packet filter EBP F for security

4
00:00:11,769 --> 00:00:19,690
monitoring as it could otherwise be

5
00:00:16,090 --> 00:00:21,070
called EBP eff all that your wildest

6
00:00:19,690 --> 00:00:23,890
dreams will come true

7
00:00:21,070 --> 00:00:25,360
terms and conditions apply and which

8
00:00:23,890 --> 00:00:28,630
sort of reflects the way that I feel

9
00:00:25,360 --> 00:00:30,430
about EBP F at the moment and but we'll

10
00:00:28,630 --> 00:00:32,519
get into some of the good stuff that we

11
00:00:30,430 --> 00:00:37,059
can deal with it in a second

12
00:00:32,520 --> 00:00:40,359
cool so a little bit about me first of

13
00:00:37,059 --> 00:00:42,760
all I am John McAfee wearing a week

14
00:00:40,359 --> 00:00:45,670
trying to escape on the boat somewhere

15
00:00:42,760 --> 00:00:47,620
and somebody had presides last night

16
00:00:45,670 --> 00:00:52,569
rather and charitably said since I've

17
00:00:47,620 --> 00:00:55,690
cut my hair a bit shorter my name is

18
00:00:52,569 --> 00:00:59,739
James Ogden otherwise sometimes known as

19
00:00:55,690 --> 00:01:02,159
Linux Thor you find me here on job and

20
00:00:59,739 --> 00:01:05,229
on Twitter as well

21
00:01:02,159 --> 00:01:08,829
don't tend to be super super high volume

22
00:01:05,229 --> 00:01:10,990
on either platform and occasionally put

23
00:01:08,829 --> 00:01:16,779
things on there that I find maybe mildly

24
00:01:10,990 --> 00:01:20,919
interesting in my day job I'm a tech

25
00:01:16,780 --> 00:01:23,860
lead for security engineering sly

26
00:01:20,920 --> 00:01:27,549
betting and gaming so in security

27
00:01:23,860 --> 00:01:29,680
engineering we look after all the kind

28
00:01:27,549 --> 00:01:33,000
of security filling that protects the

29
00:01:29,680 --> 00:01:36,759
platform so things like idf's

30
00:01:33,000 --> 00:01:39,009
multi-factor authentication session

31
00:01:36,759 --> 00:01:42,969
recording a lot of different security

32
00:01:39,009 --> 00:01:47,140
tools and a big part of what we do is to

33
00:01:42,969 --> 00:01:50,109
feed data into our sim tool so our

34
00:01:47,140 --> 00:01:52,179
security operations guys can monitor

35
00:01:50,109 --> 00:01:54,788
that they can have a look at graphs and

36
00:01:52,179 --> 00:01:57,640
alerts and so forth so I'm very

37
00:01:54,789 --> 00:02:00,670
interested in ways that we can either

38
00:01:57,640 --> 00:02:02,979
get more data and data that might not

39
00:02:00,670 --> 00:02:06,219
have been available before or ways that

40
00:02:02,979 --> 00:02:08,410
we can get the same data but much more

41
00:02:06,219 --> 00:02:13,049
easily and without having to jump

42
00:02:08,410 --> 00:02:15,470
through perhaps so many hoops so we'll

43
00:02:13,050 --> 00:02:17,810
move on to the

44
00:02:15,470 --> 00:02:22,070
the technology that we'll be talking

45
00:02:17,810 --> 00:02:27,760
about which is EBP F who is said of EBP

46
00:02:22,070 --> 00:02:30,290
F school and who is used he BPF before a

47
00:02:27,760 --> 00:02:35,269
couple of people who visit somebody else

48
00:02:30,290 --> 00:02:38,269
over there as well and who has heard of

49
00:02:35,270 --> 00:02:39,980
it maybe is interested or has never

50
00:02:38,270 --> 00:02:43,100
heard of it and this may be interested

51
00:02:39,980 --> 00:02:46,369
would that be sort of the rest of you is

52
00:02:43,100 --> 00:02:51,290
there anybody who is not at all from a

53
00:02:46,370 --> 00:02:55,880
Linux background okay cool so hopefully

54
00:02:51,290 --> 00:02:57,620
it's going to going to address what most

55
00:02:55,880 --> 00:02:59,540
people might want to get out of the talk

56
00:02:57,620 --> 00:03:00,710
the people that have used it before I'm

57
00:02:59,540 --> 00:03:03,410
not sure that's going to be anything

58
00:03:00,710 --> 00:03:04,550
super new but I can kind of show you one

59
00:03:03,410 --> 00:03:08,690
or two things that I've been playing

60
00:03:04,550 --> 00:03:10,720
with with it so in terms of what I can

61
00:03:08,690 --> 00:03:13,609
hope for you to get out of the talk

62
00:03:10,720 --> 00:03:16,460
we're going to kind of cover what it is

63
00:03:13,610 --> 00:03:19,520
who might use it what are the

64
00:03:16,460 --> 00:03:22,850
limitations some of the limitations and

65
00:03:19,520 --> 00:03:25,760
then we'll have some demos at the end to

66
00:03:22,850 --> 00:03:27,410
actually show you it in use this isn't a

67
00:03:25,760 --> 00:03:29,209
running order as such

68
00:03:27,410 --> 00:03:31,250
but hopefully by the end you might kind

69
00:03:29,209 --> 00:03:32,840
of get a feel for this and then decide

70
00:03:31,250 --> 00:03:35,000
if it's something that you want to take

71
00:03:32,840 --> 00:03:37,340
away and maybe have a bit more of a play

72
00:03:35,000 --> 00:03:39,200
with so I'll show you one or two ways

73
00:03:37,340 --> 00:03:43,690
that you can get started with it really

74
00:03:39,200 --> 00:03:46,339
quickly so ebps

75
00:03:43,690 --> 00:03:54,500
the next thing sorry I've got a bit of a

76
00:03:46,340 --> 00:03:57,530
smoker it's a salinity thing it's built

77
00:03:54,500 --> 00:04:01,130
into the Linux kernel you do need

78
00:03:57,530 --> 00:04:03,080
perhaps a bit of a newer Linux kernel

79
00:04:01,130 --> 00:04:06,440
you're probably going to get the best

80
00:04:03,080 --> 00:04:09,380
results from having the newest kernel

81
00:04:06,440 --> 00:04:13,040
that you can find I think is a fair way

82
00:04:09,380 --> 00:04:17,060
to put it so if you have something like

83
00:04:13,040 --> 00:04:19,849
maybe a 4.15 and which I believe comes

84
00:04:17,060 --> 00:04:21,918
with with the bun to long zone support

85
00:04:19,850 --> 00:04:25,880
that would be great and they have

86
00:04:21,918 --> 00:04:28,549
packages in repositories for working

87
00:04:25,880 --> 00:04:31,219
with beef ef4 come on so that

88
00:04:28,550 --> 00:04:35,660
and the second if you have a slightly

89
00:04:31,220 --> 00:04:38,030
older kernel maybe back to maybe four

90
00:04:35,660 --> 00:04:40,159
three ashore so you probably more or

91
00:04:38,030 --> 00:04:43,039
less okay but you might find one or two

92
00:04:40,159 --> 00:04:44,389
things are not there yet so if you want

93
00:04:43,039 --> 00:04:46,909
to have a play with this you probably

94
00:04:44,389 --> 00:04:50,270
want to have the kind of newest kernel

95
00:04:46,909 --> 00:04:55,060
that you can get your hands on so a

96
00:04:50,270 --> 00:04:58,639
little bit about what it is it's a

97
00:04:55,060 --> 00:05:02,599
tracing framework essentially built into

98
00:04:58,639 --> 00:05:05,240
the kernel so you can write programs

99
00:05:02,599 --> 00:05:07,520
which are compiled into a bytecode and

100
00:05:05,240 --> 00:05:09,620
then load it into a virtual machine and

101
00:05:07,520 --> 00:05:12,620
you can do I think of some interesting

102
00:05:09,620 --> 00:05:16,940
things with those so we have a quote

103
00:05:12,620 --> 00:05:18,979
here from Ingo Molnar who's one of the

104
00:05:16,940 --> 00:05:23,930
Linux kernel developers as you might

105
00:05:18,979 --> 00:05:26,870
know so when e BPF kind of first came

106
00:05:23,930 --> 00:05:29,349
around or EBP F in conjunction with K

107
00:05:26,870 --> 00:05:31,669
probes which we'll come onto as well

108
00:05:29,349 --> 00:05:34,669
this was a quote and I think this kind

109
00:05:31,669 --> 00:05:38,299
of sums up quite well what it is and

110
00:05:34,669 --> 00:05:40,580
what it does also somebody else gets to

111
00:05:38,300 --> 00:05:45,949
say this bit which I would be a little

112
00:05:40,580 --> 00:05:47,630
bit perhaps hesitant to say so we'll let

113
00:05:45,949 --> 00:05:49,610
somebody else say that part and then we

114
00:05:47,630 --> 00:05:51,409
can just put it up there and it's not me

115
00:05:49,610 --> 00:05:53,330
that actually has to say can never crash

116
00:05:51,409 --> 00:05:57,080
never interfere with the kernel

117
00:05:53,330 --> 00:05:59,419
negatively but it's less likely to cause

118
00:05:57,080 --> 00:06:01,758
a problem that other things that we

119
00:05:59,419 --> 00:06:05,599
might have used in the past or similar

120
00:06:01,759 --> 00:06:08,659
jobs such as loading in custom kernel

121
00:06:05,599 --> 00:06:12,039
modules that might be hawking things in

122
00:06:08,659 --> 00:06:16,400
various ways and so it's much safer and

123
00:06:12,039 --> 00:06:20,240
we'll go over some of what I think use

124
00:06:16,400 --> 00:06:22,130
cases for EBP F so this is just my own

125
00:06:20,240 --> 00:06:25,069
opinion you might have different ideas

126
00:06:22,130 --> 00:06:28,009
for what you can do with it but I

127
00:06:25,069 --> 00:06:30,770
imagine that it could be useful for blue

128
00:06:28,009 --> 00:06:33,889
teamers so this is a term that's become

129
00:06:30,770 --> 00:06:36,349
a little bit and a little bit overloaded

130
00:06:33,889 --> 00:06:39,680
perhaps a little bit meaningless with

131
00:06:36,349 --> 00:06:41,899
time but I'm talking about kind of the

132
00:06:39,680 --> 00:06:42,289
good guys the people are deploying tools

133
00:06:41,899 --> 00:06:44,119
in

134
00:06:42,289 --> 00:06:47,539
the network and the monitoring for

135
00:06:44,119 --> 00:06:50,930
threats maybe it's as part of an

136
00:06:47,539 --> 00:06:53,389
exercise of some sort a Red Team Blue

137
00:06:50,930 --> 00:06:58,479
team exercise or it's just your kind of

138
00:06:53,389 --> 00:07:03,439
general day-to-day they'd say role of

139
00:06:58,479 --> 00:07:06,830
blue team of that and then perhaps a

140
00:07:03,439 --> 00:07:08,539
kind of a subset of blue teamers or

141
00:07:06,830 --> 00:07:11,448
maybe a slightly different discipline

142
00:07:08,539 --> 00:07:13,669
our security operations folks as I

143
00:07:11,449 --> 00:07:15,499
mentioned before so these are the people

144
00:07:13,669 --> 00:07:18,198
that sit in maybe your security

145
00:07:15,499 --> 00:07:20,149
operations center sitting in front of

146
00:07:18,199 --> 00:07:21,800
all these interesting graphs and alerts

147
00:07:20,149 --> 00:07:23,930
and things like that that have been

148
00:07:21,800 --> 00:07:25,879
produced for them and then maybe they're

149
00:07:23,930 --> 00:07:29,180
taking some action for you maybe they're

150
00:07:25,879 --> 00:07:32,209
performing some kind of blocking but as

151
00:07:29,180 --> 00:07:35,839
with many things in security they need

152
00:07:32,209 --> 00:07:38,409
data security as as a very wise person

153
00:07:35,839 --> 00:07:41,709
once said his name has escaped me now

154
00:07:38,409 --> 00:07:44,089
but security is kind of a data-driven

155
00:07:41,709 --> 00:07:46,580
problem so the more the more data you

156
00:07:44,089 --> 00:07:49,789
have perhaps the better your posture is

157
00:07:46,580 --> 00:07:52,789
if it's the right kind of data another

158
00:07:49,789 --> 00:07:57,649
use case that we can imagine for EBP eff

159
00:07:52,789 --> 00:08:00,589
is testers so anybody here is poking a

160
00:07:57,649 --> 00:08:02,479
system that performing some kind of test

161
00:08:00,589 --> 00:08:04,430
and they'd like to get a bit of extra

162
00:08:02,479 --> 00:08:05,149
information out of that about what's

163
00:08:04,430 --> 00:08:07,789
going on

164
00:08:05,149 --> 00:08:10,550
so EBP F can be really good in that case

165
00:08:07,789 --> 00:08:13,009
as well and slightly related to the

166
00:08:10,550 --> 00:08:15,619
testers we have hackers and the

167
00:08:13,009 --> 00:08:17,809
old-school sense and the old hacker

168
00:08:15,619 --> 00:08:20,419
versus cracker thing

169
00:08:17,809 --> 00:08:23,449
don't worry few too young to know that

170
00:08:20,419 --> 00:08:25,729
or it's passed you by it was a holy war

171
00:08:23,449 --> 00:08:28,939
that was fought many years ago and

172
00:08:25,729 --> 00:08:33,708
wasn't very interesting to anyone okay

173
00:08:28,939 --> 00:08:36,889
so a little bit of history of BPF so

174
00:08:33,708 --> 00:08:38,448
we're talking about EBP eff and but

175
00:08:36,889 --> 00:08:43,099
first of all we have to kind of know

176
00:08:38,448 --> 00:08:45,769
what BP F is so BP f is Berkeley packet

177
00:08:43,099 --> 00:08:50,600
filter old old Berkeley packet filter

178
00:08:45,769 --> 00:08:52,250
from like 1992 or there abouts I won't

179
00:08:50,600 --> 00:08:54,390
ask for a show of hands of anybody who

180
00:08:52,250 --> 00:08:56,070
wasn't even born and

181
00:08:54,390 --> 00:08:59,400
I've got my suspicions about one or two

182
00:08:56,070 --> 00:09:03,390
people I can see in the room but it was

183
00:08:59,400 --> 00:09:05,880
originally used for one or two different

184
00:09:03,390 --> 00:09:12,360
use cases so this has become known now

185
00:09:05,880 --> 00:09:14,970
with EB bf as C BPF or classic BPF in

186
00:09:12,360 --> 00:09:19,560
the past was always just Berkeley packet

187
00:09:14,970 --> 00:09:23,490
filter so what we have with classic BPF

188
00:09:19,560 --> 00:09:25,890
is a very simple virtual machine just

189
00:09:23,490 --> 00:09:28,860
has a couple of registers has a little

190
00:09:25,890 --> 00:09:31,500
bit of scratch space there and then we

191
00:09:28,860 --> 00:09:34,770
can load up some byte code to form

192
00:09:31,500 --> 00:09:37,950
different kinds of operations and that

193
00:09:34,770 --> 00:09:41,280
piece of documentation there on the

194
00:09:37,950 --> 00:09:44,550
right is from one of the Linux kernel

195
00:09:41,280 --> 00:09:46,439
documentation files and I put it up now

196
00:09:44,550 --> 00:09:48,540
because it's such a short thing but it

197
00:09:46,440 --> 00:09:52,610
kind of summarizes almost entirely what

198
00:09:48,540 --> 00:09:56,189
the architecture is of the classic BPF

199
00:09:52,610 --> 00:09:58,230
virtual machine it's super simple in

200
00:09:56,190 --> 00:10:01,140
evolutionary terms you know what kind of

201
00:09:58,230 --> 00:10:02,730
we've got up we're staggering around but

202
00:10:01,140 --> 00:10:05,370
we haven't yet worked out loud to pick

203
00:10:02,730 --> 00:10:07,500
up a rock and mush days over the head so

204
00:10:05,370 --> 00:10:10,320
we we can still do some interesting

205
00:10:07,500 --> 00:10:14,330
things here so I'm guessing maybe most

206
00:10:10,320 --> 00:10:18,110
of you have used TCP dump in the past

207
00:10:14,330 --> 00:10:22,320
sing-sing notes in the room so that uses

208
00:10:18,110 --> 00:10:27,089
Burton packet filter BPF so you can pass

209
00:10:22,320 --> 00:10:29,250
the minus D flag on your TCP dump for

210
00:10:27,089 --> 00:10:36,030
commands and then it will print you out

211
00:10:29,250 --> 00:10:41,270
a dump of the BPF code that so fill it

212
00:10:36,030 --> 00:10:45,810
there for a couple of different tcpdump

213
00:10:41,270 --> 00:10:48,780
expressions so we have port 80 and port

214
00:10:45,810 --> 00:10:54,390
81 so you can see there I think on line

215
00:10:48,780 --> 00:10:56,970
7 and 1750 on one has become 51 on the

216
00:10:54,390 --> 00:10:59,780
other so you can can kind of get maybe a

217
00:10:56,970 --> 00:11:05,160
small feel for what's going on there so

218
00:10:59,780 --> 00:11:07,810
moving on to EBP F what is EBP f eb bf

219
00:11:05,160 --> 00:11:11,649
is exciting vp f

220
00:11:07,810 --> 00:11:14,768
it's not it's extended vpf and what we

221
00:11:11,649 --> 00:11:17,019
have here is another virtual machine but

222
00:11:14,769 --> 00:11:20,589
it's a little bit more advanced this

223
00:11:17,019 --> 00:11:23,949
time so we have ten registers we have a

224
00:11:20,589 --> 00:11:26,559
stack is a small stack 512 bytes and

225
00:11:23,949 --> 00:11:28,809
then we have this concept of maps and

226
00:11:26,559 --> 00:11:32,050
maps and something that we could load

227
00:11:28,809 --> 00:11:37,029
data into we can share that with user

228
00:11:32,050 --> 00:11:38,949
space but don't get too excited yet

229
00:11:37,029 --> 00:11:41,589
we're only a little bit further along in

230
00:11:38,949 --> 00:11:43,748
the evolution we've picked up a rock

231
00:11:41,589 --> 00:11:45,160
we've sharpened it or bashing each other

232
00:11:43,749 --> 00:11:49,389
over the head so we're doing interesting

233
00:11:45,160 --> 00:11:51,040
things and but it's not yet super super

234
00:11:49,389 --> 00:11:55,059
advanced but we can do some very

235
00:11:51,040 --> 00:11:59,199
interesting things so EB PF is something

236
00:11:55,059 --> 00:12:01,350
that applies in a number of places the

237
00:11:59,199 --> 00:12:02,920
ones that I'm going to be talking about

238
00:12:01,350 --> 00:12:07,420
Cape ropes

239
00:12:02,920 --> 00:12:11,170
what Cape ropes are incapable by the way

240
00:12:07,420 --> 00:12:14,979
are older than eb PF you could use k

241
00:12:11,170 --> 00:12:19,300
probes in the past but you had to load a

242
00:12:14,980 --> 00:12:22,959
module and then you had to inject your k

243
00:12:19,300 --> 00:12:27,849
pro that way and what we have is the

244
00:12:22,959 --> 00:12:32,559
ability to be called whenever a function

245
00:12:27,850 --> 00:12:34,870
in the kernel is called so we attach a

246
00:12:32,559 --> 00:12:38,500
k' probe to a particular kernel function

247
00:12:34,870 --> 00:12:40,870
that gets called were called first and

248
00:12:38,500 --> 00:12:44,529
then we can extract some information

249
00:12:40,870 --> 00:12:47,709
from that if that makes sense to

250
00:12:44,529 --> 00:12:51,579
everyone hopefully it does we also have

251
00:12:47,709 --> 00:12:54,489
you probes and new probes are like K

252
00:12:51,579 --> 00:12:58,388
probes that we can use these in user

253
00:12:54,490 --> 00:13:03,389
space so functions within user space

254
00:12:58,389 --> 00:13:06,160
applications we can attach our probe to

255
00:13:03,389 --> 00:13:09,759
and we can also do this with libraries

256
00:13:06,160 --> 00:13:13,420
as well so system-wide we can do

257
00:13:09,759 --> 00:13:16,720
something like Lipsy for example we can

258
00:13:13,420 --> 00:13:19,479
attach a probe to particular function in

259
00:13:16,720 --> 00:13:21,480
there and then whenever that gets cold

260
00:13:19,480 --> 00:13:25,830
you probe will

261
00:13:21,480 --> 00:13:29,340
will be called as well first and then as

262
00:13:25,830 --> 00:13:32,010
well as those two we have K rep Propst K

263
00:13:29,340 --> 00:13:35,460
reprobate cape ropes but they get

264
00:13:32,010 --> 00:13:38,130
attached at the end of a function so

265
00:13:35,460 --> 00:13:39,630
just at the end will be called and then

266
00:13:38,130 --> 00:13:41,600
we'll have the opportunity to have a

267
00:13:39,630 --> 00:13:44,939
look and see what the return value is

268
00:13:41,600 --> 00:13:48,390
which is very useful and we have the

269
00:13:44,940 --> 00:13:51,330
equivalent and user space as well so we

270
00:13:48,390 --> 00:13:54,720
have quite a bit of power there in terms

271
00:13:51,330 --> 00:13:58,250
of where we want to attach our probe and

272
00:13:54,720 --> 00:14:03,030
as it said before this is all be BPF

273
00:13:58,250 --> 00:14:05,370
bytecode running in a Sun box or a BM so

274
00:14:03,030 --> 00:14:09,510
there's a little danger that we're going

275
00:14:05,370 --> 00:14:12,420
to cause too much harm you can crush it

276
00:14:09,510 --> 00:14:17,250
but it takes a bit of work that's right

277
00:14:12,420 --> 00:14:20,819
very hard so how to use it how to get

278
00:14:17,250 --> 00:14:25,590
started with it you can potentially

279
00:14:20,820 --> 00:14:29,070
write your own EBP F by code in some way

280
00:14:25,590 --> 00:14:32,340
it'll be much much easier to use BC C

281
00:14:29,070 --> 00:14:37,500
which is the BPF compiler collection

282
00:14:32,340 --> 00:14:43,650
this makes it very easy to write EBP F

283
00:14:37,500 --> 00:14:47,280
code and C in Python I don't mean C or

284
00:14:43,650 --> 00:14:49,140
Python it's C and Python together so

285
00:14:47,280 --> 00:14:57,630
it's very often Python when a big lump

286
00:14:49,140 --> 00:14:59,640
of C in the middle of it yeah it gets

287
00:14:57,630 --> 00:15:03,150
kind of interesting so to look at a

288
00:14:59,640 --> 00:15:04,710
really simple example there what we've

289
00:15:03,150 --> 00:15:06,780
done here so we've got our kind of

290
00:15:04,710 --> 00:15:10,620
Python wrapper and then we have a little

291
00:15:06,780 --> 00:15:12,780
bit of C code in the middle so we're

292
00:15:10,620 --> 00:15:15,300
going to be doing a cape rope we're

293
00:15:12,780 --> 00:15:18,120
going to be attaching it to sis look

294
00:15:15,300 --> 00:15:19,560
there so that gets add a function that's

295
00:15:18,120 --> 00:15:23,970
called in the kernel for making

296
00:15:19,560 --> 00:15:29,339
directories and then we can see C just

297
00:15:23,970 --> 00:15:31,740
there we have the PT Rex which is

298
00:15:29,340 --> 00:15:34,560
otherwise sometimes known as the context

299
00:15:31,740 --> 00:15:35,250
so whenever our probe fires first

300
00:15:34,560 --> 00:15:38,130
argument

301
00:15:35,250 --> 00:15:39,720
we'll be given is a structure describing

302
00:15:38,130 --> 00:15:42,060
what the registers are looking like

303
00:15:39,720 --> 00:15:48,300
currently which may be useful some

304
00:15:42,060 --> 00:15:49,699
things and then also crazy okay that's

305
00:15:48,300 --> 00:15:53,069
better

306
00:15:49,700 --> 00:15:55,560
so then we'll also have the kind of

307
00:15:53,070 --> 00:15:59,240
signature of the function there as well

308
00:15:55,560 --> 00:16:03,839
so mukhda takes path name and a mode

309
00:15:59,240 --> 00:16:07,110
argument and then with our BPF trace

310
00:16:03,840 --> 00:16:10,200
print k there we'll be able to say what

311
00:16:07,110 --> 00:16:16,310
is being told and then we can exit from

312
00:16:10,200 --> 00:16:18,990
our probe we can return 0 there and then

313
00:16:16,310 --> 00:16:23,520
you can see underneath the result of

314
00:16:18,990 --> 00:16:25,040
running this so when we run this as Ruth

315
00:16:23,520 --> 00:16:29,280
you need to be roots will have

316
00:16:25,040 --> 00:16:32,130
discipline in order to use EBP F but

317
00:16:29,280 --> 00:16:36,270
when we run that whenever we make a

318
00:16:32,130 --> 00:16:39,500
directory system-wide our tape rope is

319
00:16:36,270 --> 00:16:42,720
called and then we can potentially even

320
00:16:39,500 --> 00:16:44,640
extract some information from there so

321
00:16:42,720 --> 00:16:47,280
we can take the argument there that is

322
00:16:44,640 --> 00:16:50,069
the path name and then we can perhaps

323
00:16:47,280 --> 00:16:54,689
print out so the thing that you can see

324
00:16:50,070 --> 00:16:57,089
there with the BPF trace print k is a

325
00:16:54,690 --> 00:17:03,150
kind of very quick and dirty way to get

326
00:16:57,089 --> 00:17:05,400
some output from your EBP F program this

327
00:17:03,150 --> 00:17:08,069
isn't really ideal this does allow you

328
00:17:05,400 --> 00:17:10,199
to do some kind of quick prototyping and

329
00:17:08,069 --> 00:17:15,149
that kind of thing but whenever you're

330
00:17:10,199 --> 00:17:17,939
using BPF trace print k you're using it

331
00:17:15,150 --> 00:17:22,470
appears under the cysts under slash this

332
00:17:17,939 --> 00:17:26,189
as a file there and then that's shared

333
00:17:22,470 --> 00:17:28,920
so every every thing that's using this

334
00:17:26,189 --> 00:17:33,150
across the system is all trying to share

335
00:17:28,920 --> 00:17:34,770
the same file essentially it is so you

336
00:17:33,150 --> 00:17:36,390
might find this that if you have two of

337
00:17:34,770 --> 00:17:39,210
them running together and they're both

338
00:17:36,390 --> 00:17:41,370
using the BPM trace print K you might

339
00:17:39,210 --> 00:17:44,929
not get the output that you expect where

340
00:17:41,370 --> 00:17:48,379
you expect it you may also find the

341
00:17:44,929 --> 00:17:51,230
if things terminate without it having

342
00:17:48,379 --> 00:17:52,789
read everything from there then the next

343
00:17:51,230 --> 00:17:55,519
time you fire something up

344
00:17:52,789 --> 00:17:58,029
you'll get essentially some output

345
00:17:55,519 --> 00:18:02,299
that's still way too from the last time

346
00:17:58,029 --> 00:18:03,769
which isn't great so the way that you're

347
00:18:02,299 --> 00:18:09,080
supposed to do it and it does add a

348
00:18:03,769 --> 00:18:11,720
little bit of complexity is to use so if

349
00:18:09,080 --> 00:18:15,199
you see there we have the structure that

350
00:18:11,720 --> 00:18:22,309
we find so what we're going to do this

351
00:18:15,200 --> 00:18:25,490
time is create one of these BPF per CPU

352
00:18:22,309 --> 00:18:27,529
arrays and then we can copy data into

353
00:18:25,490 --> 00:18:31,039
that and then we can share it with user

354
00:18:27,529 --> 00:18:34,039
space with the with the maps so has I

355
00:18:31,039 --> 00:18:34,639
did a little bit of complexity in the C

356
00:18:34,039 --> 00:18:36,919
code

357
00:18:34,639 --> 00:18:39,168
I've actually split it out into a

358
00:18:36,919 --> 00:18:42,409
separate file I'll I'll come on to the

359
00:18:39,169 --> 00:18:44,840
options for what to do that in a second

360
00:18:42,409 --> 00:18:46,100
but I think it is a bit cleaner to do it

361
00:18:44,840 --> 00:18:48,259
that way it's just a matter of

362
00:18:46,100 --> 00:18:51,199
preference unless you're doing some kind

363
00:18:48,259 --> 00:18:52,869
of a demo or teaching exercise it can be

364
00:18:51,200 --> 00:18:56,019
useful to have everything all together

365
00:18:52,869 --> 00:18:58,580
but I like to separate them out if I can

366
00:18:56,019 --> 00:19:00,110
but then also if we look on the Python

367
00:18:58,580 --> 00:19:02,928
side there's a little bit of extra

368
00:19:00,110 --> 00:19:06,049
complexity there as well as we've had to

369
00:19:02,929 --> 00:19:08,149
introduce Python C types which is a

370
00:19:06,049 --> 00:19:10,850
little bit clunky to work with in my

371
00:19:08,149 --> 00:19:13,850
opinion obviously it's just it just a

372
00:19:10,850 --> 00:19:15,860
matter of opinion the thing is there

373
00:19:13,850 --> 00:19:18,969
like when we have to cast it's kind of a

374
00:19:15,860 --> 00:19:23,029
bit more clunky than we'd hope it to be

375
00:19:18,970 --> 00:19:24,730
but then this allows us to run many of

376
00:19:23,029 --> 00:19:26,990
these programs without them ever

377
00:19:24,730 --> 00:19:29,059
interfering with each other so that's

378
00:19:26,990 --> 00:19:32,600
the reason for for a little bit of extra

379
00:19:29,059 --> 00:19:36,860
complexity there so as I mentioned you

380
00:19:32,600 --> 00:19:40,908
can load your C code from a separate

381
00:19:36,860 --> 00:19:45,168
file you can either do it in the top way

382
00:19:40,909 --> 00:19:46,879
there so we are loading that in and then

383
00:19:45,169 --> 00:19:48,679
we're getting it as a string we might

384
00:19:46,879 --> 00:19:51,289
want to do that because we may wish to

385
00:19:48,679 --> 00:19:55,519
rewrite it in some fashion we might want

386
00:19:51,289 --> 00:19:58,059
to insert some extra bits and pieces in

387
00:19:55,519 --> 00:20:00,369
there or if we're happy that our

388
00:19:58,059 --> 00:20:03,940
see code is all that it can be then we

389
00:20:00,369 --> 00:20:09,269
can just BPF with the source file there

390
00:20:03,940 --> 00:20:11,469
and load it in it works like magic

391
00:20:09,269 --> 00:20:15,639
not quite it doesn't quite work like

392
00:20:11,469 --> 00:20:18,849
magic it works by essentially patching

393
00:20:15,639 --> 00:20:20,738
the function and then jumping in C okay

394
00:20:18,849 --> 00:20:23,499
so there's nothing to magic there that's

395
00:20:20,739 --> 00:20:27,609
all that might be a little bit of an

396
00:20:23,499 --> 00:20:29,049
illusion to sign of check time of useful

397
00:20:27,609 --> 00:20:31,509
abilities that perhaps you could

398
00:20:29,049 --> 00:20:35,679
relative to if you're not careful about

399
00:20:31,509 --> 00:20:41,109
what you do so the next thing to mention

400
00:20:35,679 --> 00:20:44,919
is the EBP eff verify so as i said your

401
00:20:41,109 --> 00:20:47,499
code is loaded into at the end in source

402
00:20:44,919 --> 00:20:51,639
unbox and then it is subject to

403
00:20:47,499 --> 00:20:53,349
inspection by liam verifier and it can

404
00:20:51,639 --> 00:20:56,498
feel a little bit frustrating sometimes

405
00:20:53,349 --> 00:20:58,960
when you're trying to get something to

406
00:20:56,499 --> 00:21:03,789
work and some of the errors are not

407
00:20:58,960 --> 00:21:05,619
always easy to understand at first you

408
00:21:03,789 --> 00:21:08,469
can kind of get a feel for them over

409
00:21:05,619 --> 00:21:10,478
time there are strange things that can

410
00:21:08,469 --> 00:21:13,869
happen that I've seen as well where

411
00:21:10,479 --> 00:21:15,639
maybe the order of things can matter

412
00:21:13,869 --> 00:21:18,428
even if it looks like it shouldn't

413
00:21:15,639 --> 00:21:19,959
sometimes you can find that things

414
00:21:18,429 --> 00:21:22,779
aren't quite working the way that they

415
00:21:19,960 --> 00:21:27,039
should and by making what appear to be

416
00:21:22,779 --> 00:21:29,559
small fairly cosmetic changes often in

417
00:21:27,039 --> 00:21:34,509
the C code you can find that it's all of

418
00:21:29,559 --> 00:21:37,178
a sudden working which can be can be a

419
00:21:34,509 --> 00:21:39,820
little frustrating so if we if we have a

420
00:21:37,179 --> 00:21:43,419
look at this here so I've deliberately

421
00:21:39,820 --> 00:21:45,489
put some broken EVP eff code in here I

422
00:21:43,419 --> 00:21:50,320
think what I was trying to do was to

423
00:21:45,489 --> 00:21:52,509
copy more bytes into a stack-based

424
00:21:50,320 --> 00:21:54,939
buffer than was available so I was

425
00:21:52,509 --> 00:21:59,219
trying to overflow the buffer and the

426
00:21:54,940 --> 00:22:01,570
verifier has said no the error is

427
00:21:59,219 --> 00:22:04,210
reasonably okay there it's saying

428
00:22:01,570 --> 00:22:06,970
invalid stack type giving us an offset

429
00:22:04,210 --> 00:22:08,849
and it's saying the exercise 400 I think

430
00:22:06,970 --> 00:22:11,830
that's trying to copy 400 bytes and so

431
00:22:08,849 --> 00:22:14,110
you see 4 bytes there

432
00:22:11,830 --> 00:22:17,168
so that's that's kind of fairly helpful

433
00:22:14,110 --> 00:22:19,029
it does take a little bit of thinking

434
00:22:17,169 --> 00:22:19,750
about it at first to work out what it's

435
00:22:19,029 --> 00:22:21,370
telling you

436
00:22:19,750 --> 00:22:23,559
but then you can get other ones like

437
00:22:21,370 --> 00:22:26,620
this the back edge from instruction in

438
00:22:23,559 --> 00:22:29,440
33 to 23 so what I did here was

439
00:22:26,620 --> 00:22:32,649
deliberately introduce a loop from which

440
00:22:29,440 --> 00:22:35,590
I wasn't it exiting so that's another

441
00:22:32,649 --> 00:22:38,590
thing that it will check for so it does

442
00:22:35,590 --> 00:22:40,449
have a jump forward and jump back so you

443
00:22:38,590 --> 00:22:41,889
can you know a simple for loop or

444
00:22:40,450 --> 00:22:44,649
something is something that you can't

445
00:22:41,890 --> 00:22:47,950
have but if you get into a loop that you

446
00:22:44,649 --> 00:22:50,049
are getting out of it will say no so the

447
00:22:47,950 --> 00:22:53,380
way the verifier works is to kind of do

448
00:22:50,049 --> 00:22:55,990
your modeling of the code and work out

449
00:22:53,380 --> 00:22:59,049
where where it's going and whether any

450
00:22:55,990 --> 00:23:02,049
of the any of the operations will

451
00:22:59,049 --> 00:23:04,480
violate violate its own inbuilt set of

452
00:23:02,049 --> 00:23:06,970
rules so as other things as well like

453
00:23:04,480 --> 00:23:11,139
accessing memory that doesn't belong to

454
00:23:06,970 --> 00:23:13,710
you as well as the size of the program

455
00:23:11,139 --> 00:23:18,299
exceeds a certain number of instructions

456
00:23:13,710 --> 00:23:22,200
then also it will it will be a problem

457
00:23:18,299 --> 00:23:26,649
so back onto this thing of monitoring

458
00:23:22,200 --> 00:23:28,539
and monitoring very often is rightly or

459
00:23:26,649 --> 00:23:32,260
wrongly unfortunately a necessary evil

460
00:23:28,539 --> 00:23:33,970
that is driven from logs the logs are

461
00:23:32,260 --> 00:23:34,629
okay you can get some good stuff from

462
00:23:33,970 --> 00:23:37,539
logs

463
00:23:34,630 --> 00:23:40,299
but sometimes you end up having to read

464
00:23:37,539 --> 00:23:42,669
the data and chop it up and that kind of

465
00:23:40,299 --> 00:23:45,129
thing and of course logs will only have

466
00:23:42,669 --> 00:23:47,350
the data rate that the developer thought

467
00:23:45,130 --> 00:23:49,750
was useful and thought somebody might be

468
00:23:47,350 --> 00:23:54,070
interested in and another problem with

469
00:23:49,750 --> 00:23:57,159
logs is sometimes you have to turn on

470
00:23:54,070 --> 00:23:58,860
some sort of debug mode to get exactly

471
00:23:57,159 --> 00:24:01,149
the level of logging that you would want

472
00:23:58,860 --> 00:24:03,370
even though maybe you don't want the

473
00:24:01,149 --> 00:24:06,070
whole firehose of everything to do with

474
00:24:03,370 --> 00:24:08,739
the applications internal state you

475
00:24:06,070 --> 00:24:10,539
maybe want something related to a

476
00:24:08,740 --> 00:24:12,909
library it's calling or similar

477
00:24:10,539 --> 00:24:15,370
information so it might be that the logs

478
00:24:12,909 --> 00:24:17,799
just they don't have the information for

479
00:24:15,370 --> 00:24:19,809
you and even if they do have the

480
00:24:17,799 --> 00:24:22,270
information you do have to do this

481
00:24:19,809 --> 00:24:24,340
process of taking some logs from

482
00:24:22,270 --> 00:24:26,139
somewhere I've deliberately chosen the

483
00:24:24,340 --> 00:24:29,020
patch

484
00:24:26,140 --> 00:24:29,370
I think of mine he's doing a talk right

485
00:24:29,020 --> 00:24:32,970
now

486
00:24:29,370 --> 00:24:35,620
truck 1 glad he likes to say that

487
00:24:32,970 --> 00:24:38,470
security isn't always the project zero

488
00:24:35,620 --> 00:24:40,419
 and I think that's very true

489
00:24:38,470 --> 00:24:42,520
for some people is some browser

490
00:24:40,420 --> 00:24:46,030
exploitation and everything like that is

491
00:24:42,520 --> 00:24:48,879
wonderful but for a lot of people myself

492
00:24:46,030 --> 00:24:51,850
included security is probably just

493
00:24:48,880 --> 00:24:54,190
taking some logs or events or data from

494
00:24:51,850 --> 00:24:56,949
somewhere and then putting it somewhere

495
00:24:54,190 --> 00:24:59,830
else where people can use it so in this

496
00:24:56,950 --> 00:25:02,260
case we have Apache which is writing its

497
00:24:59,830 --> 00:25:04,720
logs to disk and then we imagine that we

498
00:25:02,260 --> 00:25:05,890
we're perhaps tailing them and then we

499
00:25:04,720 --> 00:25:07,800
have this thing in the middle which is

500
00:25:05,890 --> 00:25:10,270
represented by the meat-grinder

501
00:25:07,800 --> 00:25:11,590
and that's all the nasty stuff that you

502
00:25:10,270 --> 00:25:14,920
have to do with it that's how the

503
00:25:11,590 --> 00:25:17,110
sausage is made when you have regular

504
00:25:14,920 --> 00:25:18,580
expressions in there you know you have

505
00:25:17,110 --> 00:25:23,320
all kinds of different things to

506
00:25:18,580 --> 00:25:25,720
transform munge the data maybe you maybe

507
00:25:23,320 --> 00:25:27,610
use Lunken you know you don't quite have

508
00:25:25,720 --> 00:25:29,680
deep enough pockets to send all the data

509
00:25:27,610 --> 00:25:31,090
into it that you want so you have to

510
00:25:29,680 --> 00:25:33,940
start trying to filter stuff out that

511
00:25:31,090 --> 00:25:36,419
doesn't look interesting or put stuff in

512
00:25:33,940 --> 00:25:39,190
that that does appear to be interesting

513
00:25:36,420 --> 00:25:42,340
and eventually the aim is to get it to

514
00:25:39,190 --> 00:25:45,220
your security operations guys perhaps

515
00:25:42,340 --> 00:25:47,470
and so you can a security operations

516
00:25:45,220 --> 00:25:50,260
center and they may wish to look at

517
00:25:47,470 --> 00:25:52,840
graphs and that kind of thing or we may

518
00:25:50,260 --> 00:25:55,180
want to produce alerts from there few

519
00:25:52,840 --> 00:25:59,709
people and actually open these systems

520
00:25:55,180 --> 00:26:02,530
to take some action so wouldn't it be

521
00:25:59,710 --> 00:26:07,180
better if we could use the magic fist

522
00:26:02,530 --> 00:26:09,340
glove of EBP F to reach in there take

523
00:26:07,180 --> 00:26:11,260
what we want and give it directly or

524
00:26:09,340 --> 00:26:15,189
more or less directly via a little

525
00:26:11,260 --> 00:26:16,870
detail to the security operations people

526
00:26:15,190 --> 00:26:19,750
or however it is that might be

527
00:26:16,870 --> 00:26:23,500
interested in this data and then also

528
00:26:19,750 --> 00:26:27,100
produce the alerts so we want to extract

529
00:26:23,500 --> 00:26:29,500
the good stuff and profit easily without

530
00:26:27,100 --> 00:26:31,840
too much fuss without too much messing

531
00:26:29,500 --> 00:26:34,680
around with regular expressions and open

532
00:26:31,840 --> 00:26:38,780
if they just get the good stuff out and

533
00:26:34,680 --> 00:26:42,620
make money or something

534
00:26:38,780 --> 00:26:44,480
cool so I'll move on to a few demos so

535
00:26:42,620 --> 00:26:47,360
you can see this for yourself

536
00:26:44,480 --> 00:26:50,990
and hopefully gonna cover cover a little

537
00:26:47,360 --> 00:26:55,189
bit of what my workflow is and in doing

538
00:26:50,990 --> 00:26:55,790
this kind of stuff I find what might be

539
00:26:55,190 --> 00:27:00,820
interesting

540
00:26:55,790 --> 00:27:04,659
oh this is going to be right can I look

541
00:27:00,820 --> 00:27:04,659
okay this is gonna be really fun

542
00:27:05,150 --> 00:27:09,250
[Laughter]

543
00:27:17,530 --> 00:27:24,440
all right I'm gonna blow this upside fun

544
00:27:22,030 --> 00:27:26,810
I'm not got quite the screen mirroring

545
00:27:24,440 --> 00:27:29,090
what I want so I'm gonna have to kind of

546
00:27:26,810 --> 00:27:31,399
lean around the corner to see what I'm

547
00:27:29,090 --> 00:27:34,399
doing so hopefully that's the worst

548
00:27:31,400 --> 00:27:39,500
thing that happens at the demo that we

549
00:27:34,400 --> 00:27:42,560
shall see cool so when we want to shape

550
00:27:39,500 --> 00:27:47,390
the screenshots before I was talking

551
00:27:42,560 --> 00:27:48,980
about using this with the master is it

552
00:27:47,390 --> 00:27:52,720
poison at least well there we go

553
00:27:48,980 --> 00:27:57,980
I was talking about having a look for

554
00:27:52,720 --> 00:28:00,740
McDow calls and so they the easiest way

555
00:27:57,980 --> 00:28:03,890
that we can get started with this so

556
00:28:00,740 --> 00:28:06,680
i've installed on here bcc and i also

557
00:28:03,890 --> 00:28:09,470
have the tools the examples that come

558
00:28:06,680 --> 00:28:14,170
with out so I have a very very helpful

559
00:28:09,470 --> 00:28:18,100
tool installed here called trace or

560
00:28:14,170 --> 00:28:21,830
because it's called on here trace BP FCC

561
00:28:18,100 --> 00:28:25,340
yep so what we want to do first of all

562
00:28:21,830 --> 00:28:34,070
is just to a real simple cape rope and

563
00:28:25,340 --> 00:28:38,230
we're looking for our sis look that okay

564
00:28:34,070 --> 00:28:38,230
so that's running so by

565
00:28:41,550 --> 00:28:48,730
so we can see that that's being called

566
00:28:44,400 --> 00:28:50,200
cool sold there again okay that's that's

567
00:28:48,730 --> 00:28:52,000
from where the oh and I was practicing

568
00:28:50,200 --> 00:28:55,990
but not to worry and you can see that

569
00:28:52,000 --> 00:28:59,260
it's been called anyway so we might be

570
00:28:55,990 --> 00:29:02,170
interested to have a look and see what

571
00:28:59,260 --> 00:29:10,330
the argument is that we are calling it

572
00:29:02,170 --> 00:29:18,430
with so we can do this something like it

573
00:29:10,330 --> 00:29:21,490
yep so now I'm calling this again but

574
00:29:18,430 --> 00:29:24,010
now with the cape rope we're extracting

575
00:29:21,490 --> 00:29:27,370
the argument there so we can see what

576
00:29:24,010 --> 00:29:30,010
directory we're trying to make which is

577
00:29:27,370 --> 00:29:32,709
potentially useful and we can see this

578
00:29:30,010 --> 00:29:36,910
system light so any process now which is

579
00:29:32,710 --> 00:29:39,430
making a directory we can see that the

580
00:29:36,910 --> 00:29:43,330
other thing that we can do as well is to

581
00:29:39,430 --> 00:29:51,190
potentially stuck on and two of these

582
00:29:43,330 --> 00:30:09,480
together so we've done trace there so we

583
00:29:51,190 --> 00:30:09,480
can also do this that's just about that

584
00:30:10,950 --> 00:30:18,340
okay so what we've done there is to

585
00:30:14,020 --> 00:30:20,560
attach a kaypro to sis McDow so the

586
00:30:18,340 --> 00:30:24,100
thing within the kernel is responsible

587
00:30:20,560 --> 00:30:28,800
for them look they're Cisco and then

588
00:30:24,100 --> 00:30:32,620
also we've attached one to mcdr in Lipsy

589
00:30:28,800 --> 00:30:36,010
so any application dynamically linked

590
00:30:32,620 --> 00:30:39,189
which is calling mcdr there we'll pick

591
00:30:36,010 --> 00:30:41,830
that up so we you know we don't need to

592
00:30:39,190 --> 00:30:44,650
launch the programs in a special way

593
00:30:41,830 --> 00:30:47,050
running under soapy trace or something

594
00:30:44,650 --> 00:30:49,300
like that we just ask the kernel to tell

595
00:30:47,050 --> 00:30:53,500
us whenever anything is doing these

596
00:30:49,300 --> 00:30:55,299
operations and then our our code gets

597
00:30:53,500 --> 00:30:56,470
called there so

598
00:30:55,299 --> 00:30:59,379
this is kind of the way that I normally

599
00:30:56,470 --> 00:31:01,389
start off prototyping this kind of stuff

600
00:30:59,379 --> 00:31:02,949
I have an idea that I might be

601
00:31:01,389 --> 00:31:06,939
interested to have a look at something

602
00:31:02,950 --> 00:31:09,879
so then I'll use trace to kind of attach

603
00:31:06,940 --> 00:31:12,460
to a few different points and see is it

604
00:31:09,879 --> 00:31:14,980
firing what I expected - am i seeing the

605
00:31:12,460 --> 00:31:16,840
right kind of information without kind

606
00:31:14,980 --> 00:31:18,399
of going and reading any source code or

607
00:31:16,840 --> 00:31:19,178
anything yet that can come a bit later

608
00:31:18,399 --> 00:31:22,600
on

609
00:31:19,179 --> 00:31:24,100
to work out perhaps exactly what the the

610
00:31:22,600 --> 00:31:26,529
functions arguments are that it's

611
00:31:24,100 --> 00:31:28,840
expecting but that's just a really

612
00:31:26,529 --> 00:31:30,820
simple way to kind of go is this

613
00:31:28,840 --> 00:31:32,769
interesting or is this not interesting

614
00:31:30,820 --> 00:31:35,529
is this worth pursuing a little bit

615
00:31:32,769 --> 00:31:40,330
further so when I have something that

616
00:31:35,529 --> 00:31:46,320
maybe looks interesting like this yep so

617
00:31:40,330 --> 00:31:53,918
I can then progress to doing a bit of -

618
00:31:46,320 --> 00:31:56,950
no so that's the example that we saw

619
00:31:53,919 --> 00:31:59,619
before on the slide so that's a really

620
00:31:56,950 --> 00:32:07,869
simple version of it and then I've got

621
00:31:59,619 --> 00:32:10,299
also the example where with the with the

622
00:32:07,869 --> 00:32:13,928
string the argument from the path name

623
00:32:10,299 --> 00:32:15,970
and then if this is all kind of looking

624
00:32:13,929 --> 00:32:17,889
good and interesting like something

625
00:32:15,970 --> 00:32:21,570
that's worth pursuing a little bit

626
00:32:17,889 --> 00:32:26,219
further then I'll maybe woke up to

627
00:32:21,570 --> 00:32:37,269
something like the other example there

628
00:32:26,220 --> 00:32:39,850
so we've got our so that's our C code as

629
00:32:37,269 --> 00:32:42,460
we saw on the slide before just move

630
00:32:39,850 --> 00:32:45,189
that down a little but you will see that

631
00:32:42,460 --> 00:32:46,019
and then it has its corresponding bit

632
00:32:45,190 --> 00:32:50,049
soft

633
00:32:46,019 --> 00:32:52,179
- as well so by now that's maybe looking

634
00:32:50,049 --> 00:32:58,210
more of a kind of a useful thing that

635
00:32:52,179 --> 00:33:00,039
could be used for found myself about say

636
00:32:58,210 --> 00:33:03,730
use cases but then I realized if they do

637
00:33:00,039 --> 00:33:06,158
use far too many times they're cool so

638
00:33:03,730 --> 00:33:08,570
is that kind of clear for everybody do

639
00:33:06,159 --> 00:33:11,190
you understand any questions

640
00:33:08,570 --> 00:33:12,990
do shut out if you have any questions as

641
00:33:11,190 --> 00:33:15,300
we go along I hope there'll be some time

642
00:33:12,990 --> 00:33:16,950
at the end but just give me a wave if

643
00:33:15,300 --> 00:33:19,290
you have something and we can come to

644
00:33:16,950 --> 00:33:20,900
you right away and deal with it while

645
00:33:19,290 --> 00:33:24,149
it's fresh

646
00:33:20,900 --> 00:33:31,410
cool so have I still got my thing in

647
00:33:24,150 --> 00:33:33,210
focus not necessarily but it makes a

648
00:33:31,410 --> 00:33:38,220
good example just for the kind of the

649
00:33:33,210 --> 00:33:42,240
hello world example here and you yeah

650
00:33:38,220 --> 00:33:43,800
yeah yeah yeah I mean it's it's good to

651
00:33:42,240 --> 00:33:46,050
use something like mcdeere for an

652
00:33:43,800 --> 00:33:48,000
example because it won't be being cold

653
00:33:46,050 --> 00:33:50,970
all the time so sometimes people might

654
00:33:48,000 --> 00:33:53,550
use open or something like that but

655
00:33:50,970 --> 00:33:56,820
often a lot of stuff is is calling open

656
00:33:53,550 --> 00:33:59,280
so look there is maybe not the best real

657
00:33:56,820 --> 00:34:01,889
world type of example of what what a

658
00:33:59,280 --> 00:34:04,139
real attacker might do but it's a good

659
00:34:01,890 --> 00:34:08,929
maybe place to get started and have a

660
00:34:04,140 --> 00:34:12,899
look but the next the next example that

661
00:34:08,929 --> 00:34:14,940
we have here so what we're gonna through

662
00:34:12,899 --> 00:34:17,429
here just see if I got the right will

663
00:34:14,940 --> 00:34:21,418
note than that yep cool so we'll go back

664
00:34:17,429 --> 00:34:23,820
to our example of Apache actually web

665
00:34:21,418 --> 00:34:27,330
server so I've put a little bit of

666
00:34:23,820 --> 00:34:29,669
digging in the in the pain in the bottom

667
00:34:27,330 --> 00:34:32,340
right hand corner there and I found

668
00:34:29,668 --> 00:34:36,509
something that I think looks interesting

669
00:34:32,340 --> 00:34:40,320
this ap send a response so I am

670
00:34:36,510 --> 00:34:43,740
interested in requests to Apache that

671
00:34:40,320 --> 00:34:45,270
have ended up in an error so they're

672
00:34:43,739 --> 00:34:49,138
they're the ones that haven't completed

673
00:34:45,270 --> 00:34:52,230
normally so rather than taking my tail

674
00:34:49,139 --> 00:34:54,720
of the logs and you know the whole

675
00:34:52,230 --> 00:34:56,909
kitchen sink in there I'm going to take

676
00:34:54,719 --> 00:34:58,109
just the ones that are interesting to me

677
00:34:56,909 --> 00:35:02,130
the ones that didn't complete

678
00:34:58,109 --> 00:35:05,190
successfully so we have a piece and our

679
00:35:02,130 --> 00:35:08,130
response there which is what Hutchy uses

680
00:35:05,190 --> 00:35:12,300
when it's sending an arrow response as

681
00:35:08,130 --> 00:35:15,359
the name suggests so I'll see how we do

682
00:35:12,300 --> 00:35:17,930
at the time not see but cool so I can

683
00:35:15,359 --> 00:35:20,759
show you then what we have here with

684
00:35:17,930 --> 00:35:26,040
with a basic example

685
00:35:20,760 --> 00:35:27,570
it is unfortunately a little a little

686
00:35:26,040 --> 00:35:31,230
bigger than will fit on the screen at

687
00:35:27,570 --> 00:35:33,270
that size and what we've done here is we

688
00:35:31,230 --> 00:35:36,030
have a probe and it's a probe we're

689
00:35:33,270 --> 00:35:40,100
going to attach to a piece and error

690
00:35:36,030 --> 00:35:42,210
response so it's a you pro user space

691
00:35:40,100 --> 00:35:45,390
that's a little bit horrible that I've

692
00:35:42,210 --> 00:35:48,359
had to do the the ass-backwards thing is

693
00:35:45,390 --> 00:35:51,060
is a genuine member of the Apache HTTP

694
00:35:48,359 --> 00:35:52,710
request rec structure I didn't make that

695
00:35:51,060 --> 00:35:55,590
up but that is the thing that I found

696
00:35:52,710 --> 00:35:59,550
that so what I've done here so the

697
00:35:55,590 --> 00:36:01,170
script requests rec is quite long it's

698
00:35:59,550 --> 00:36:03,900
quite a long structure with a number of

699
00:36:01,170 --> 00:36:05,850
different things in there and then

700
00:36:03,900 --> 00:36:08,460
pointers to other structures and so on

701
00:36:05,850 --> 00:36:10,440
and so forth I was just particularly

702
00:36:08,460 --> 00:36:13,410
interested in this case and pulling out

703
00:36:10,440 --> 00:36:14,970
the request so I just needed the top

704
00:36:13,410 --> 00:36:17,129
part there so I've kind of cheated a

705
00:36:14,970 --> 00:36:20,669
little bit rather than have to include a

706
00:36:17,130 --> 00:36:23,330
lot of extra include files and that kind

707
00:36:20,670 --> 00:36:25,800
of thing I've just Anna quick-and-dirty

708
00:36:23,330 --> 00:36:27,779
definition of the structure there but

709
00:36:25,800 --> 00:36:30,690
just the top part of it if that makes

710
00:36:27,780 --> 00:36:33,000
sense some of those pointers there are

711
00:36:30,690 --> 00:36:34,609
not boy pointers as such they were

712
00:36:33,000 --> 00:36:37,200
pointers to other different Apache

713
00:36:34,609 --> 00:36:39,119
structures but we don't worry too much

714
00:36:37,200 --> 00:36:42,868
about them I'm just gonna take the

715
00:36:39,119 --> 00:36:49,590
request there so we go a little bit

716
00:36:42,869 --> 00:36:54,350
further down well so we are attaching a

717
00:36:49,590 --> 00:36:57,750
youth rope to Apache 2 and then it's

718
00:36:54,350 --> 00:37:00,180
attached to a piece and arrow response

719
00:36:57,750 --> 00:37:02,880
and the function that will be called is

720
00:37:00,180 --> 00:37:05,549
that one there I camera but I called it

721
00:37:02,880 --> 00:37:08,850
probe ap send a response so that's our

722
00:37:05,550 --> 00:37:15,840
bit of C code and then we open the perf

723
00:37:08,850 --> 00:37:19,650
buffer and then we are watching for data

724
00:37:15,840 --> 00:37:22,910
coming back from our probe so I'll show

725
00:37:19,650 --> 00:37:22,910
you what that looks like in a second

726
00:37:42,990 --> 00:38:00,520
cool so he's listening right so I'm

727
00:37:45,640 --> 00:38:02,319
gonna run my little bit of EPF code

728
00:38:00,520 --> 00:38:04,990
there so that should have attached as

729
00:38:02,320 --> 00:38:07,810
you broke to that particular function in

730
00:38:04,990 --> 00:38:10,779
Apache so I'm going to do this curl that

731
00:38:07,810 --> 00:38:13,599
I know will generate an error and then

732
00:38:10,780 --> 00:38:17,290
just extracted from there what the

733
00:38:13,599 --> 00:38:19,270
request was at a high level I could

734
00:38:17,290 --> 00:38:21,520
potentially pull out more more

735
00:38:19,270 --> 00:38:23,920
information there so IP address and that

736
00:38:21,520 --> 00:38:27,250
kind of thing but just to keep it simple

737
00:38:23,920 --> 00:38:30,910
just both the he requests out that so if

738
00:38:27,250 --> 00:38:34,900
we do something else so as a file that

739
00:38:30,910 --> 00:38:40,420
we know doesn't exist that's can we do

740
00:38:34,900 --> 00:38:43,599
so if we so a request that completes

741
00:38:40,420 --> 00:38:45,520
successfully doesn't fire our probe so

742
00:38:43,599 --> 00:38:48,240
we don't have to worry about them any

743
00:38:45,520 --> 00:38:50,530
requests which is ending in an error is

744
00:38:48,240 --> 00:38:52,319
looking much more interesting so we'll

745
00:38:50,530 --> 00:38:54,640
use our probes take a bit more

746
00:38:52,320 --> 00:38:56,560
information there I'm not saying that

747
00:38:54,640 --> 00:38:58,839
they should replace the locusts and that

748
00:38:56,560 --> 00:39:00,880
kind of thing they're useful too but it

749
00:38:58,839 --> 00:39:03,970
maybe take some of the demand off to get

750
00:39:00,880 --> 00:39:06,570
them there in and can it real time or

751
00:39:03,970 --> 00:39:10,629
real issue I'm we can maybe ship them

752
00:39:06,570 --> 00:39:13,359
ship them a little slower but then have

753
00:39:10,630 --> 00:39:15,670
this kind of information be be extracted

754
00:39:13,359 --> 00:39:18,660
quickly and used to drive things like

755
00:39:15,670 --> 00:39:21,280
dashboards and alerting in graphs for

756
00:39:18,660 --> 00:39:27,839
security operation in spokes and like

757
00:39:21,280 --> 00:39:32,530
anything so that so that is our our

758
00:39:27,839 --> 00:39:34,450
basic example I'm going to tempt fate

759
00:39:32,530 --> 00:39:36,520
by trying to do something a little bit

760
00:39:34,450 --> 00:39:38,950
more which is probably a really horrible

761
00:39:36,520 --> 00:39:42,550
idea but we'll see what happens so we've

762
00:39:38,950 --> 00:39:43,379
got this here so I've imported a library

763
00:39:42,550 --> 00:39:45,779
therefore

764
00:39:43,380 --> 00:39:49,470
elastic search no I don't I don't

765
00:39:45,779 --> 00:39:51,390
particularly have strong leaning towards

766
00:39:49,470 --> 00:39:53,390
where you would want to put the data and

767
00:39:51,390 --> 00:39:56,700
there's no particular affinity between

768
00:39:53,390 --> 00:39:58,319
EBP F and elasticsearch it just happens

769
00:39:56,700 --> 00:40:01,109
to be somewhere at the moment that I

770
00:39:58,319 --> 00:40:03,240
like to put data and because they they

771
00:40:01,109 --> 00:40:05,700
have something called Cabana that I'll

772
00:40:03,240 --> 00:40:08,450
show you in a second that you can get

773
00:40:05,700 --> 00:40:12,269
some interesting visualizations out of

774
00:40:08,450 --> 00:40:16,410
but it it does go to show it's quite

775
00:40:12,269 --> 00:40:23,598
quick so we've got our more or less same

776
00:40:16,410 --> 00:40:26,250
program from before but now we are

777
00:40:23,599 --> 00:40:27,990
taking the data I'm rather than just

778
00:40:26,250 --> 00:40:29,869
printing it we're putting it into a

779
00:40:27,990 --> 00:40:32,729
document and submitting it to

780
00:40:29,869 --> 00:40:36,690
elasticsearch and then this allows us to

781
00:40:32,730 --> 00:40:39,180
have visualizations dashboards that kind

782
00:40:36,690 --> 00:40:43,559
of thing also means that it's searchable

783
00:40:39,180 --> 00:40:46,890
and also we can we can do kind of time

784
00:40:43,559 --> 00:40:49,470
window based reporting there so we can

785
00:40:46,890 --> 00:40:52,348
say these are the top requests in the

786
00:40:49,470 --> 00:40:54,720
last 15 minutes and then maybe these

787
00:40:52,349 --> 00:40:56,460
these might look interesting so far rate

788
00:40:54,720 --> 00:40:57,990
of errors and suddenly shot up and

789
00:40:56,460 --> 00:41:00,029
there's a lot of these strange-looking

790
00:40:57,990 --> 00:41:02,819
requests then that could be something

791
00:41:00,029 --> 00:41:06,900
that we take action on so if you look

792
00:41:02,819 --> 00:41:08,788
there there isn't a lot to actually get

793
00:41:06,900 --> 00:41:10,440
that talking to a lasting search which

794
00:41:08,789 --> 00:41:12,750
is another reason that I like to use it

795
00:41:10,440 --> 00:41:14,549
for this kind of thing it is very very

796
00:41:12,750 --> 00:41:16,259
easy just to drop a couple of lines of

797
00:41:14,549 --> 00:41:19,799
code in there and then we can get that

798
00:41:16,259 --> 00:41:30,990
submitting so let's see if this one

799
00:41:19,799 --> 00:41:35,960
works okay looks promising so I'm just

800
00:41:30,990 --> 00:41:41,629
going to fire up my web browser overlay

801
00:41:35,960 --> 00:41:41,630
look over my mouth coincidence

802
00:41:46,890 --> 00:41:58,930
here we go so this could this could get

803
00:41:57,220 --> 00:42:01,029
a little bit interesting in terms of me

804
00:41:58,930 --> 00:42:03,328
being able to see this properly but I'm

805
00:42:01,029 --> 00:42:09,160
going to try and do my best for you

806
00:42:03,329 --> 00:42:13,109
cool so we have I know I'm not supposed

807
00:42:09,160 --> 00:42:16,269
to leave this spot just give me a second

808
00:42:13,109 --> 00:42:21,339
okay cool so that looks looks kind of

809
00:42:16,269 --> 00:42:37,509
about right so if we go back into a

810
00:42:21,339 --> 00:42:42,779
terminal so that's running now if I good

811
00:42:37,510 --> 00:42:42,779
couple of requests there can we see them

812
00:42:50,099 --> 00:42:54,180
absolutely no idea on almost

813
00:43:14,450 --> 00:43:20,308
okay I was going to show you the day

814
00:43:16,710 --> 00:43:23,250
check coming to there and it's a little

815
00:43:20,309 --> 00:43:27,240
bit awkward for me to do so so I'm just

816
00:43:23,250 --> 00:43:55,319
gonna skip over so hopefully something

817
00:43:27,240 --> 00:43:59,839
here I've been working cool so taking

818
00:43:55,319 --> 00:44:06,779
the data I'll just um refresh

819
00:43:59,839 --> 00:44:08,730
so that would date torence so I'm taking

820
00:44:06,779 --> 00:44:13,140
the data so there's a couple of lines of

821
00:44:08,730 --> 00:44:17,250
code I've sorry you want to say

822
00:44:13,140 --> 00:44:23,598
something yeah sorry I should be zooming

823
00:44:17,250 --> 00:44:23,599
in ready let's blow it up nice and big

824
00:44:23,809 --> 00:44:31,109
cool better it's better for me too

825
00:44:27,329 --> 00:44:34,500
thank you for that cool so what we've

826
00:44:31,109 --> 00:44:38,009
done here is to take the data that was

827
00:44:34,500 --> 00:44:40,010
being sent to elasticsearch and then

828
00:44:38,010 --> 00:44:43,109
we've used this thing called canvas

829
00:44:40,010 --> 00:44:46,289
which is part of Cabana another thing

830
00:44:43,109 --> 00:44:48,598
from elastic so the data that we've

831
00:44:46,289 --> 00:44:50,490
submitted there we can use it to draw

832
00:44:48,599 --> 00:44:53,460
kinda graphs and charts and like

833
00:44:50,490 --> 00:44:56,578
anything these are these are very simple

834
00:44:53,460 --> 00:44:58,920
to set up I was going to show over to

835
00:44:56,579 --> 00:45:01,710
that but as for narrowing isn't working

836
00:44:58,920 --> 00:45:03,630
the way that we'd wanted to probably

837
00:45:01,710 --> 00:45:05,460
just leave it at that for now but I'm

838
00:45:03,630 --> 00:45:07,890
just gonna fire off another request into

839
00:45:05,460 --> 00:45:18,529
that and then we can see that that gets

840
00:45:07,890 --> 00:45:18,529
picked up down this

841
00:45:38,720 --> 00:45:45,240
okay so if people have gone in there and

842
00:45:42,450 --> 00:45:49,290
then we can see that the dashboard is

843
00:45:45,240 --> 00:45:50,970
updated with with more requests we can

844
00:45:49,290 --> 00:45:54,630
see accounts of how many of them are

845
00:45:50,970 --> 00:45:56,129
unique requests that's not not the best

846
00:45:54,630 --> 00:45:58,050
formatting now that I've zoomed in I'm

847
00:45:56,130 --> 00:45:59,930
not by the way designer by any stretch

848
00:45:58,050 --> 00:46:02,610
of the imagination

849
00:45:59,930 --> 00:46:04,770
yeah I'm more from the old school where

850
00:46:02,610 --> 00:46:07,470
people wrote horrible Perl programs and

851
00:46:04,770 --> 00:46:08,940
drew nasty graphs which is what I've

852
00:46:07,470 --> 00:46:13,500
typed into here I think in my

853
00:46:08,940 --> 00:46:15,450
subconscious but hopefully that shows

854
00:46:13,500 --> 00:46:19,740
then that we can we can take this data

855
00:46:15,450 --> 00:46:22,310
which is from an e b PF program we can

856
00:46:19,740 --> 00:46:25,169
move that quickly back into python

857
00:46:22,310 --> 00:46:27,630
submit it off there to elasticsearch or

858
00:46:25,170 --> 00:46:29,850
somewhere else and actually start to do

859
00:46:27,630 --> 00:46:32,550
things with it draw graphs that kind of

860
00:46:29,850 --> 00:46:34,950
thing the kind of thing that you could

861
00:46:32,550 --> 00:46:39,930
put in front of somebody and maybe

862
00:46:34,950 --> 00:46:44,189
generate alerts from if you wanted to so

863
00:46:39,930 --> 00:46:46,020
one more demo and we can hopefully have

864
00:46:44,190 --> 00:46:50,310
some questions something we'd still

865
00:46:46,020 --> 00:46:51,800
locate the time so move on to another

866
00:46:50,310 --> 00:46:55,200
one

867
00:46:51,800 --> 00:46:58,110
cool so so the idea here I don't know if

868
00:46:55,200 --> 00:47:01,109
anybody caught Tom nom noms workshop

869
00:46:58,110 --> 00:47:03,030
this morning you're in that one cool so

870
00:47:01,110 --> 00:47:06,390
he mentioned in there that whenever you

871
00:47:03,030 --> 00:47:08,640
load a script on Linux it's actually the

872
00:47:06,390 --> 00:47:10,319
kernel that is responsible for for

873
00:47:08,640 --> 00:47:14,640
taking a look at that and deciding how

874
00:47:10,320 --> 00:47:18,090
to load it so for this Kay probe example

875
00:47:14,640 --> 00:47:21,900
what I've done is - I'll show you in a

876
00:47:18,090 --> 00:47:24,480
second is to attach a que probe to load

877
00:47:21,900 --> 00:47:27,750
script so that's the bit of magic in the

878
00:47:24,480 --> 00:47:30,330
kernel that kind of has a look at

879
00:47:27,750 --> 00:47:31,650
something decides whether it is a script

880
00:47:30,330 --> 00:47:33,750
or not

881
00:47:31,650 --> 00:47:37,470
and then goes ahead and sets up an

882
00:47:33,750 --> 00:47:38,790
environment and launches it so if we

883
00:47:37,470 --> 00:47:41,160
have a look at this one I didn't do

884
00:47:38,790 --> 00:47:44,790
there was a basic example for this but

885
00:47:41,160 --> 00:47:46,560
we're kind of going over the same ground

886
00:47:44,790 --> 00:47:49,009
again really so I've gone straight to

887
00:47:46,560 --> 00:47:51,210
the one that will submit this into

888
00:47:49,010 --> 00:47:53,490
elasticsearch I've got another one of

889
00:47:51,210 --> 00:47:56,130
those horrible looking dashboards for

890
00:47:53,490 --> 00:47:59,490
you in a second but there can be much

891
00:47:56,130 --> 00:48:01,010
nicer is the problem with me the problem

892
00:47:59,490 --> 00:48:04,950
isn't the tool I've seen some lovely

893
00:48:01,010 --> 00:48:08,790
dashboards and visualizations yes it's

894
00:48:04,950 --> 00:48:11,100
just not the way that I think so what

895
00:48:08,790 --> 00:48:15,900
we're going to do this time so we have

896
00:48:11,100 --> 00:48:20,190
our clay probe on load script so we're

897
00:48:15,900 --> 00:48:22,740
going to be passed a struct Linux in one

898
00:48:20,190 --> 00:48:24,480
of them things which is a structure

899
00:48:22,740 --> 00:48:30,600
described in the program that we're

900
00:48:24,480 --> 00:48:33,180
trying to load essentially so we attach

901
00:48:30,600 --> 00:48:34,950
that what we need to do we need to do a

902
00:48:33,180 --> 00:48:37,109
little bit of checking so one of the

903
00:48:34,950 --> 00:48:40,109
interesting things about when the kernel

904
00:48:37,110 --> 00:48:42,060
is doing its checks you would imagine

905
00:48:40,110 --> 00:48:44,250
that it already knows that this is

906
00:48:42,060 --> 00:48:47,250
something sensible and looks a bit like

907
00:48:44,250 --> 00:48:49,200
a script for it's looking at it and but

908
00:48:47,250 --> 00:48:51,720
very often you can find yourself past a

909
00:48:49,200 --> 00:48:53,310
regular elf file and all sorts so this

910
00:48:51,720 --> 00:48:55,859
is kind of the first place where it does

911
00:48:53,310 --> 00:48:58,560
the checking so I've married a check

912
00:48:55,860 --> 00:49:01,110
that is in that particular function

913
00:48:58,560 --> 00:49:03,090
which is just making sure that in fact

914
00:49:01,110 --> 00:49:05,250
in the in the proper check that's in the

915
00:49:03,090 --> 00:49:08,190
function it checks for for a hash gonna

916
00:49:05,250 --> 00:49:09,810
bang a shebang but I'm just checking for

917
00:49:08,190 --> 00:49:11,820
the hash because by that point

918
00:49:09,810 --> 00:49:14,190
somebody's trying to execute it it

919
00:49:11,820 --> 00:49:16,590
starts with a half probably interesting

920
00:49:14,190 --> 00:49:20,600
and so we'll take that and then we'll

921
00:49:16,590 --> 00:49:24,300
submit that over to elasticsearch so

922
00:49:20,600 --> 00:49:26,549
this isn't perhaps an absolutely

923
00:49:24,300 --> 00:49:28,290
realistic example but this is the kind

924
00:49:26,550 --> 00:49:31,620
of data that you might be interested in

925
00:49:28,290 --> 00:49:35,310
in your environment so are there new

926
00:49:31,620 --> 00:49:38,069
scripts that are showing up so we could

927
00:49:35,310 --> 00:49:40,170
in one elasticsearch submit data from

928
00:49:38,070 --> 00:49:42,690
multiple hosts and then we have

929
00:49:40,170 --> 00:49:45,420
searchable list of all the different

930
00:49:42,690 --> 00:49:47,250
scripts that were being run

931
00:49:45,420 --> 00:49:50,309
throughout the environment we could

932
00:49:47,250 --> 00:49:52,530
choose to do some kind of eg application

933
00:49:50,309 --> 00:49:55,799
now if we wanted to but what we're

934
00:49:52,530 --> 00:50:00,359
taking isn't super heavyweight so we're

935
00:49:55,799 --> 00:50:03,530
taking the page the inode number because

936
00:50:00,359 --> 00:50:07,259
one thing is when you execute a script

937
00:50:03,530 --> 00:50:10,170
you can maybe give a full path or you

938
00:50:07,260 --> 00:50:13,140
can just put slash and run it and with

939
00:50:10,170 --> 00:50:16,290
an ad within a directory so you will see

940
00:50:13,140 --> 00:50:18,240
that when your probe is called but the

941
00:50:16,290 --> 00:50:21,660
inode is something that tells us that

942
00:50:18,240 --> 00:50:24,689
this is definitely that copy of test

943
00:50:21,660 --> 00:50:26,190
felt SH or whatever it may be in some

944
00:50:24,690 --> 00:50:28,260
fashion there may be there may be better

945
00:50:26,190 --> 00:50:30,839
ways to do it but it gives us something

946
00:50:28,260 --> 00:50:33,089
that ties it back to and I note it isn't

947
00:50:30,839 --> 00:50:37,380
unfortunately super easy to go from and

948
00:50:33,089 --> 00:50:39,450
I know to what file it points up unless

949
00:50:37,380 --> 00:50:41,400
you have some kind of it a cache built

950
00:50:39,450 --> 00:50:45,960
up or maybe some sort of debug at first

951
00:50:41,400 --> 00:50:47,819
type of stuff but it is something there

952
00:50:45,960 --> 00:50:50,900
that we could get quite easily and

953
00:50:47,819 --> 00:50:54,990
quickly and then we can send that to

954
00:50:50,900 --> 00:50:57,390
send that to elasticsearch so the whole

955
00:50:54,990 --> 00:50:58,680
thing there so we're gonna pass in a

956
00:50:57,390 --> 00:51:00,180
host name because we're kind of

957
00:50:58,680 --> 00:51:02,609
imagining that we might want to send

958
00:51:00,180 --> 00:51:05,308
this data from multiple hosts and then

959
00:51:02,609 --> 00:51:07,799
if some gnu/linux malware comes out

960
00:51:05,309 --> 00:51:09,990
linux malware I don't if anybody knows

961
00:51:07,799 --> 00:51:14,250
but a lot of it isn't super

962
00:51:09,990 --> 00:51:16,169
sophisticated kernel module type stuff

963
00:51:14,250 --> 00:51:17,640
or anything fancy like that a lot of

964
00:51:16,170 --> 00:51:20,190
it's in the real world

965
00:51:17,640 --> 00:51:22,710
nasty Perl scripts and things that get

966
00:51:20,190 --> 00:51:25,349
dropped and call other Perl scripts and

967
00:51:22,710 --> 00:51:29,329
download who knows what so that you can

968
00:51:25,349 --> 00:51:31,740
become part of a a botnet of some sort

969
00:51:29,329 --> 00:51:36,680
so yeah that's that's kind of what it

970
00:51:31,740 --> 00:51:47,578
looks like here again just go ahead on

971
00:51:36,680 --> 00:51:50,270
this one if I'm in the right place every

972
00:51:47,579 --> 00:51:54,660
script which is being executed every

973
00:51:50,270 --> 00:51:56,280
thing that starts with a shebang so you

974
00:51:54,660 --> 00:51:58,730
know when you have like a bash script

975
00:51:56,280 --> 00:52:02,090
and it starts with the hash bang

976
00:51:58,730 --> 00:52:04,640
so underneath the hood the colonel will

977
00:52:02,090 --> 00:52:08,780
load that up so the structure that we

978
00:52:04,640 --> 00:52:12,410
get it has the first hundred and twenty

979
00:52:08,780 --> 00:52:13,970
eight bytes of the script if you're the

980
00:52:12,410 --> 00:52:16,700
few other bits and pieces they have a

981
00:52:13,970 --> 00:52:18,859
useful but yeah from that we can see the

982
00:52:16,700 --> 00:52:19,490
interpreter so we can see is it a perl

983
00:52:18,860 --> 00:52:22,690
script

984
00:52:19,490 --> 00:52:27,399
- script bash scripts or something

985
00:52:22,690 --> 00:52:27,400
altogether weird and wonderful yep

986
00:52:30,850 --> 00:52:34,490
absolutely yeah

987
00:52:32,840 --> 00:52:37,490
yeah you could build up a whitelist of

988
00:52:34,490 --> 00:52:40,310
no scripts and then if something new

989
00:52:37,490 --> 00:52:41,870
shows up in the environment on any one

990
00:52:40,310 --> 00:52:43,400
of your hosts if you're feeding them all

991
00:52:41,870 --> 00:52:45,710
into a lipstick which is just what I

992
00:52:43,400 --> 00:52:48,710
like to use other people use different

993
00:52:45,710 --> 00:52:51,350
things then yeah you have then a search

994
00:52:48,710 --> 00:52:53,570
engine in for unknown scripts in your

995
00:52:51,350 --> 00:52:55,819
environment which could be an instable

996
00:52:53,570 --> 00:53:12,830
thing and we've got it at very little

997
00:52:55,820 --> 00:53:16,370
cost in terms of lines of code just feed

998
00:53:12,830 --> 00:53:22,759
it some data I think if we go into here

999
00:53:16,370 --> 00:53:24,680
there should be a script to run so so

1000
00:53:22,760 --> 00:53:26,540
the other thing that I did there which

1001
00:53:24,680 --> 00:53:30,529
you don't have to do is just just the

1002
00:53:26,540 --> 00:53:34,310
thing that I did was to base64 encode it

1003
00:53:30,530 --> 00:53:40,610
and that can be a sort of a decent

1004
00:53:34,310 --> 00:53:42,380
format for for working with data in so

1005
00:53:40,610 --> 00:53:46,070
then we we just have a string in hand we

1006
00:53:42,380 --> 00:53:48,020
can see then differences quite quite

1007
00:53:46,070 --> 00:53:49,400
readily and so we can see perhaps the

1008
00:53:48,020 --> 00:53:50,930
parts that are the same on the parts

1009
00:53:49,400 --> 00:53:54,380
that are different if we're doing some

1010
00:53:50,930 --> 00:53:59,410
kind of comparison so if we take another

1011
00:53:54,380 --> 00:54:03,890
copy of that same script and call it

1012
00:53:59,410 --> 00:54:07,250
first one dot SH and then we're going to

1013
00:54:03,890 --> 00:54:10,930
run our message just so we have a little

1014
00:54:07,250 --> 00:54:12,810
bit more more data when we put back into

1015
00:54:10,930 --> 00:54:20,830
elastic

1016
00:54:12,810 --> 00:54:24,700
so if we go into a I'm not making this

1017
00:54:20,830 --> 00:54:27,310
up this is the longest trip to move my

1018
00:54:24,700 --> 00:54:39,100
mouse pointer across you see it that

1019
00:54:27,310 --> 00:54:41,950
there we go there we go also will will

1020
00:54:39,100 --> 00:54:43,330
fire up another visualization it is

1021
00:54:41,950 --> 00:54:45,368
another horrible one that looks a bit

1022
00:54:43,330 --> 00:54:49,000
like Gd graph or something out of the

1023
00:54:45,369 --> 00:54:50,680
90s but we can see here so I've got some

1024
00:54:49,000 --> 00:54:52,150
other data here I've left this running

1025
00:54:50,680 --> 00:54:55,299
in the background for a while in the

1026
00:54:52,150 --> 00:54:57,460
past and I can see other scripts which

1027
00:54:55,300 --> 00:54:59,770
are being invoked and as the gentleman

1028
00:54:57,460 --> 00:55:01,180
said I could filter those out I could

1029
00:54:59,770 --> 00:55:03,820
just say that they are known good and

1030
00:55:01,180 --> 00:55:06,359
then I would have a dashboard or some

1031
00:55:03,820 --> 00:55:13,090
alerts but only related to unknown

1032
00:55:06,360 --> 00:55:14,860
scripts if we can so it's having a

1033
00:55:13,090 --> 00:55:18,580
little bit of difficulty seeing this

1034
00:55:14,860 --> 00:55:23,170
before if we can get into here and just

1035
00:55:18,580 --> 00:55:29,920
choose this networks so we can see the

1036
00:55:23,170 --> 00:55:30,960
two there but if I if I expand time

1037
00:55:29,920 --> 00:55:34,119
range

1038
00:55:30,960 --> 00:55:35,920
let's check rotate the time I'm just

1039
00:55:34,119 --> 00:55:39,040
gonna have a few minutes for a couple of

1040
00:55:35,920 --> 00:55:40,140
minutes for questions at the end to say

1041
00:55:39,040 --> 00:55:44,890
the last seven days

1042
00:55:40,140 --> 00:55:48,040
so we have more data in there and if for

1043
00:55:44,890 --> 00:55:52,350
example I was interested in pythons

1044
00:55:48,040 --> 00:55:54,940
grapes driven your loan spell scripts

1045
00:55:52,350 --> 00:55:58,779
there we go so there's a Perl script

1046
00:55:54,940 --> 00:56:03,430
there so potentially we can have a look

1047
00:55:58,780 --> 00:56:06,400
and see is this no good you know how to

1048
00:56:03,430 --> 00:56:08,259
really have very categorize it so that

1049
00:56:06,400 --> 00:56:10,630
brings us to the end of the demo I think

1050
00:56:08,260 --> 00:56:12,430
we were kind of getting up towards time

1051
00:56:10,630 --> 00:56:15,930
we've got maybe three or four minutes

1052
00:56:12,430 --> 00:56:15,930
for questions if anybody hasn't it

1053
00:56:20,360 --> 00:56:23,770
[Music]

1054
00:56:21,510 --> 00:56:25,339
that's a very good question that isn't

1055
00:56:23,770 --> 00:56:27,529
something that I've looked in

1056
00:56:25,339 --> 00:56:30,319
too much the things that I've read

1057
00:56:27,529 --> 00:56:33,920
suggest that it's extremely lightweight

1058
00:56:30,319 --> 00:56:36,739
so when you have tape rope originally

1059
00:56:33,920 --> 00:56:39,410
and I think on in some cases still it

1060
00:56:36,739 --> 00:56:41,930
can be implemented with a breakpoints in

1061
00:56:39,410 --> 00:56:44,509
single stepping but now as far as I

1062
00:56:41,930 --> 00:56:47,960
understand it it uses a jumper kind of a

1063
00:56:44,509 --> 00:56:50,569
trampoline into your code so it's it's

1064
00:56:47,960 --> 00:56:52,249
super negligible in that sense whatever

1065
00:56:50,569 --> 00:56:57,859
you build on top of it might have a cost

1066
00:56:52,249 --> 00:57:00,288
though when it comes to taking the data

1067
00:56:57,859 --> 00:57:01,999
out in user space you do need to keep up

1068
00:57:00,289 --> 00:57:04,579
with it so it's kind of super high

1069
00:57:01,999 --> 00:57:06,828
frequency you may get to a point where

1070
00:57:04,579 --> 00:57:10,700
the thing that's consuming it isn't

1071
00:57:06,829 --> 00:57:13,309
catching up so you can ask to be have

1072
00:57:10,700 --> 00:57:15,259
something called there so you can take

1073
00:57:13,309 --> 00:57:17,180
action by default it will just print out

1074
00:57:15,259 --> 00:57:21,739
that you've exceeded a rate limit and

1075
00:57:17,180 --> 00:57:25,129
then discard those I guess maybe if you

1076
00:57:21,739 --> 00:57:26,690
do something very very high volume then

1077
00:57:25,130 --> 00:57:29,150
you probably do need to be concerned

1078
00:57:26,690 --> 00:57:32,420
with performance a lot of the stuff I've

1079
00:57:29,150 --> 00:57:34,400
been looking at is much lower volume so

1080
00:57:32,420 --> 00:57:36,890
I'm trying to put the probe in it just

1081
00:57:34,400 --> 00:57:38,869
the point where it's the data that I

1082
00:57:36,890 --> 00:57:40,609
want I don't want to take all the data

1083
00:57:38,869 --> 00:57:42,680
like we did with log lines and then

1084
00:57:40,609 --> 00:58:21,229
throw some of it away I just want to go

1085
00:57:42,680 --> 00:58:23,118
straight to the no but really I would

1086
00:58:21,229 --> 00:58:24,828
say not so if anybody didn't catch the

1087
00:58:23,119 --> 00:58:27,650
question and we're talking about whether

1088
00:58:24,829 --> 00:58:30,200
we need to kind of beef up the size of

1089
00:58:27,650 --> 00:58:32,630
the instances if we're running in AWS or

1090
00:58:30,200 --> 00:58:36,589
somewhere like that and we want to use

1091
00:58:32,630 --> 00:58:38,309
EBP F I don't think so so in the past

1092
00:58:36,589 --> 00:58:40,439
there was

1093
00:58:38,309 --> 00:58:43,199
tres and that kind of thing and that

1094
00:58:40,439 --> 00:58:47,459
would would be quite heavy weights but

1095
00:58:43,199 --> 00:58:49,859
with this we are touching essentially so

1096
00:58:47,459 --> 00:58:53,308
we're patching the function so that we

1097
00:58:49,859 --> 00:58:56,249
get cold so if we put it in the right

1098
00:58:53,309 --> 00:58:58,859
place so for example there with the with

1099
00:58:56,249 --> 00:59:00,718
the arrow is the Apache areas I'm just

1100
00:58:58,859 --> 00:59:02,910
knitting the ones that I'm interested in

1101
00:59:00,719 --> 00:59:04,499
there with the arrows I don't have to do

1102
00:59:02,910 --> 00:59:08,399
anything with every other request and

1103
00:59:04,499 --> 00:59:09,529
throw it away or anything it's just if

1104
00:59:08,400 --> 00:59:16,199
you get it right

1105
00:59:09,529 --> 00:59:18,239
quite surgical you know what I mean this

1106
00:59:16,199 --> 00:59:21,239
does work with containers there are

1107
00:59:18,239 --> 00:59:22,829
implications of this so in short this

1108
00:59:21,239 --> 00:59:23,579
works anywhere that you have cap

1109
00:59:22,829 --> 00:59:25,650
sysadmin

1110
00:59:23,579 --> 00:59:28,859
you may have caps to salmon in your

1111
00:59:25,650 --> 00:59:32,099
container this could maybe allow you to

1112
00:59:28,859 --> 00:59:37,259
look at things that are outside of their

1113
00:59:32,099 --> 00:59:40,650
might even allow you to anything really

1114
00:59:37,259 --> 00:59:42,599
yam and you so a container in my mind

1115
00:59:40,650 --> 00:59:44,910
rightly or wrongly is just a kind of a

1116
00:59:42,599 --> 00:59:46,729
glorified Sun box open I'm going to

1117
00:59:44,910 --> 00:59:49,709
upset anybody by saying your help

1118
00:59:46,729 --> 00:59:52,828
but there's the shared kernel underneath

1119
00:59:49,709 --> 00:59:56,549
so if we have caps this admin and we can

1120
00:59:52,829 --> 00:59:59,179
attach a que probe then we're looking at

1121
00:59:56,549 --> 01:00:03,059
the you kernel across all that contains

1122
00:59:59,179 --> 01:00:11,239
so yeah we can we can maybe see things

1123
01:00:03,059 --> 01:00:15,390
that we might not want to see it's very

1124
01:00:11,239 --> 01:00:22,400
powerful way of getting inside to really

1125
01:00:15,390 --> 01:00:25,199
targeting something like the internal

1126
01:00:22,400 --> 01:00:28,799
function things that's really fragile

1127
01:00:25,199 --> 01:00:30,569
any minute legs yes what you know you

1128
01:00:28,799 --> 01:00:35,670
can just put between releases and I'll

1129
01:00:30,569 --> 01:00:40,829
change visual all see is it's like we

1130
01:00:35,670 --> 01:00:43,979
are worried that change so I guess happy

1131
01:00:40,829 --> 01:00:53,269
everything that a lot and that would be

1132
01:00:43,979 --> 01:00:53,269
a good idea most of the on

1133
01:00:58,800 --> 01:01:03,640
quite possibly so the question if

1134
01:01:01,330 --> 01:01:06,759
anybody didn't catch it were asking

1135
01:01:03,640 --> 01:01:08,109
about these kind of api's in the kernel

1136
01:01:06,760 --> 01:01:11,140
and the fact that things may change

1137
01:01:08,110 --> 01:01:13,870
between different versions and so

1138
01:01:11,140 --> 01:01:17,529
functions may take different arguments

1139
01:01:13,870 --> 01:01:19,089
extra arguments that kind of thing one

1140
01:01:17,530 --> 01:01:20,920
of the things that I've seen suggested

1141
01:01:19,090 --> 01:01:23,380
in the past and it was somebody from

1142
01:01:20,920 --> 01:01:24,940
Netflix he suggested it it wasn't

1143
01:01:23,380 --> 01:01:26,410
Brendan Gregg it was one of his

1144
01:01:24,940 --> 01:01:28,420
colleagues if you don't have Brendan

1145
01:01:26,410 --> 01:01:31,180
Gregg he's got really really good stuff

1146
01:01:28,420 --> 01:01:32,680
online about eb PF much better than my

1147
01:01:31,180 --> 01:01:34,480
efforts so if you want to learn a bit

1148
01:01:32,680 --> 01:01:36,819
more definitely have a look at his stuff

1149
01:01:34,480 --> 01:01:39,520
but the suggestion was to use things

1150
01:01:36,820 --> 01:01:42,280
like the allison and spaces so the linux

1151
01:01:39,520 --> 01:01:45,490
security module which is maybe a bit

1152
01:01:42,280 --> 01:01:48,730
more stable you can pick things that

1153
01:01:45,490 --> 01:01:50,740
maybe aren't going to change by your own

1154
01:01:48,730 --> 01:01:52,930
kind of finger in the air does it look

1155
01:01:50,740 --> 01:01:53,500
like something that's been that way for

1156
01:01:52,930 --> 01:01:56,680
a while

1157
01:01:53,500 --> 01:01:58,810
and it is potentially tricky you may

1158
01:01:56,680 --> 01:02:01,450
need to rework things if something

1159
01:01:58,810 --> 01:02:03,490
changes between versions but hopefully

1160
01:02:01,450 --> 01:02:06,730
you can reason out somewhere to put the

1161
01:02:03,490 --> 01:02:14,950
probe that is fairly static fairly

1162
01:02:06,730 --> 01:02:17,050
unlikely to change yeah those things as

1163
01:02:14,950 --> 01:02:18,730
well yeah so I would say be cautious

1164
01:02:17,050 --> 01:02:20,500
that's definitely one of the terms and

1165
01:02:18,730 --> 01:02:23,320
conditions I'd say it does apply to this

1166
01:02:20,500 --> 01:02:26,200
you need to make sure they eat the probe

1167
01:02:23,320 --> 01:02:28,390
in the right place I'd say also maybe

1168
01:02:26,200 --> 01:02:30,250
don't try and put too much logic in the

1169
01:02:28,390 --> 01:02:32,080
probe maybe lift the day throughout

1170
01:02:30,250 --> 01:02:34,900
you're interested in and work with it

1171
01:02:32,080 --> 01:02:37,270
elsewhere I'm thinking that we're maybe

1172
01:02:34,900 --> 01:02:39,370
a couple of minutes over on time and so

1173
01:02:37,270 --> 01:02:41,320
I'll leave it at that but if people are

1174
01:02:39,370 --> 01:02:42,940
going on to the after party afterwards

1175
01:02:41,320 --> 01:02:45,190
so if you want to grab me outside you

1176
01:02:42,940 --> 01:02:48,330
can have a bit more of a chat about it

1177
01:02:45,190 --> 01:02:48,330
but thank you very much

1178
01:02:48,930 --> 01:02:50,990
you

