1
00:00:02,580 --> 00:00:08,340
get started<font color="#CCCCCC"> thank you for everyone who</font>

2
00:00:05,430 --> 00:00:11,250
came I'm very glad some people are still

3
00:00:08,340 --> 00:00:13,469
<font color="#E5E5E5">interested</font><font color="#CCCCCC"> in JavaScript</font><font color="#E5E5E5"> so I'm happy</font>

4
00:00:11,250 --> 00:00:14,940
<font color="#E5E5E5">you guys turned up so the talk is</font>

5
00:00:13,469 --> 00:00:16,948
<font color="#CCCCCC">basically a high-level</font><font color="#E5E5E5"> overview of</font>

6
00:00:14,940 --> 00:00:19,890
<font color="#CCCCCC">provoke performing</font><font color="#E5E5E5"> code review on</font>

7
00:00:16,949 --> 00:00:21,960
JavaScript applications there's going<font color="#E5E5E5"> to</font>

8
00:00:19,890 --> 00:00:27,180
<font color="#E5E5E5">be you know some things around</font><font color="#CCCCCC"> you know</font>

9
00:00:21,960 --> 00:00:29,940
an introduction to JavaScript so that's

10
00:00:27,180 --> 00:00:33,180
<font color="#E5E5E5">first about me okay so I'm seeing a</font>

11
00:00:29,940 --> 00:00:36,720
security consultant at synopsis<font color="#E5E5E5"> formerly</font>

12
00:00:33,180 --> 00:00:38,460
I was at<font color="#CCCCCC"> Seattle but</font><font color="#E5E5E5"> after we got</font>

13
00:00:36,720 --> 00:00:41,040
acquired<font color="#E5E5E5"> by synopsis so now work at</font>

14
00:00:38,460 --> 00:00:42,680
synopsis I've roughly have about<font color="#E5E5E5"> four</font>

15
00:00:41,040 --> 00:00:44,760
years experience<font color="#E5E5E5"> in the security space</font>

16
00:00:42,680 --> 00:00:48,090
primarily looking<font color="#E5E5E5"> at web application</font>

17
00:00:44,760 --> 00:00:49,440
security<font color="#CCCCCC"> I'm also a PhD candidate at</font><font color="#E5E5E5"> the</font>

18
00:00:48,090 --> 00:00:52,620
<font color="#CCCCCC">in spec at</font><font color="#E5E5E5"> university looking into</font>

19
00:00:49,440 --> 00:00:56,459
browser<font color="#CCCCCC"> security and prior decisional</font><font color="#E5E5E5"> I</font>

20
00:00:52,620 --> 00:00:59,160
was<font color="#CCCCCC"> did</font><font color="#E5E5E5"> a degree</font><font color="#CCCCCC"> in leads</font><font color="#E5E5E5"> during a did</font>

21
00:00:56,460 --> 00:01:00,989
my BSC<font color="#CCCCCC"> in ethical</font><font color="#E5E5E5"> hacking I also founded</font>

22
00:00:59,160 --> 00:01:05,188
the<font color="#E5E5E5"> ethical hacking</font><font color="#CCCCCC"> Society after</font><font color="#E5E5E5"> seeing</font>

23
00:01:00,989 --> 00:01:07,340
the success<font color="#CCCCCC"> of</font><font color="#E5E5E5"> allottees</font><font color="#CCCCCC"> Society</font><font color="#E5E5E5"> and I</font>

24
00:01:05,188 --> 00:01:11,038
did a bit of<font color="#CCCCCC"> software development</font><font color="#E5E5E5"> and</font>

25
00:01:07,340 --> 00:01:13,619
security consultancy as well so synopsis

26
00:01:11,039 --> 00:01:15,929
are<font color="#E5E5E5"> primarily came from hardware so the</font>

27
00:01:13,619 --> 00:01:18,109
whole<font color="#E5E5E5"> concept was silicon software and</font>

28
00:01:15,929 --> 00:01:20,130
so the software integrity group was

29
00:01:18,109 --> 00:01:21,719
introduced to<font color="#E5E5E5"> basically try and tackle</font>

30
00:01:20,130 --> 00:01:24,389
some<font color="#E5E5E5"> of the software</font><font color="#CCCCCC"> security problems</font>

31
00:01:21,719 --> 00:01:25,678
<font color="#E5E5E5">and the team consists of a wide</font><font color="#CCCCCC"> range of</font>

32
00:01:24,389 --> 00:01:27,569
<font color="#E5E5E5">different organizations that are</font><font color="#CCCCCC"> been</font>

33
00:01:25,679 --> 00:01:29,100
<font color="#CCCCCC">acquired</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> the time which is like</font>

34
00:01:27,569 --> 00:01:32,060
<font color="#CCCCCC">black duck which looks for</font><font color="#E5E5E5"> things like</font>

35
00:01:29,100 --> 00:01:34,380
privacy violations in third PI software

36
00:01:32,060 --> 00:01:35,729
Coverity<font color="#CCCCCC"> is basically a static</font><font color="#E5E5E5"> analysis</font>

37
00:01:34,380 --> 00:01:38,310
tool that<font color="#E5E5E5"> identifies security</font>

38
00:01:35,729 --> 00:01:39,779
vulnerabilities<font color="#CCCCCC"> code nomicon</font><font color="#E5E5E5"> is for</font>

39
00:01:38,310 --> 00:01:42,779
things<font color="#CCCCCC"> like fuzzing and looking at</font>

40
00:01:39,779 --> 00:01:45,810
protocols<font color="#CCCCCC"> digital was primarily</font><font color="#E5E5E5"> a</font>

41
00:01:42,779 --> 00:01:48,319
security consultancy and<font color="#CCCCCC"> coda scope was</font>

42
00:01:45,810 --> 00:01:53,579
our e-learning platform along<font color="#CCCCCC"> with and</font>

43
00:01:48,319 --> 00:01:56,759
some IDE integrations<font color="#CCCCCC"> for helping</font>

44
00:01:53,579 --> 00:01:57,689
<font color="#E5E5E5">developers write better code so today</font>

45
00:01:56,759 --> 00:01:59,909
<font color="#E5E5E5">I'm going to talk about the JavaScript</font>

46
00:01:57,689 --> 00:02:02,609
landscape<font color="#E5E5E5"> and talk about JavaScript</font>

47
00:01:59,909 --> 00:02:04,590
security issues I'll briefly go<font color="#CCCCCC"> over</font>

48
00:02:02,609 --> 00:02:06,419
static<font color="#E5E5E5"> code analysis and the review</font>

49
00:02:04,590 --> 00:02:08,039
methods and I'll also<font color="#E5E5E5"> talk about the</font>

50
00:02:06,419 --> 00:02:10,049
challenges that come when you're

51
00:02:08,038 --> 00:02:12,600
actually<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> JavaScript code analysis</font>

52
00:02:10,050 --> 00:02:15,240
I'll also talk about<font color="#CCCCCC"> some</font><font color="#E5E5E5"> tools and the</font>

53
00:02:12,600 --> 00:02:18,420
way to automate tools and

54
00:02:15,240 --> 00:02:22,160
customizing certain tools to be extended

55
00:02:18,420 --> 00:02:25,170
<font color="#CCCCCC">to use for things</font><font color="#E5E5E5"> like new frameworks so</font>

56
00:02:22,160 --> 00:02:26,820
the JavaScript landscape<font color="#CCCCCC"> I want to go</font>

57
00:02:25,170 --> 00:02:29,480
from the beginning<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we'll go to where</font>

58
00:02:26,820 --> 00:02:33,090
apparently<font color="#E5E5E5"> I am in the real world</font><font color="#CCCCCC"> so</font>

59
00:02:29,480 --> 00:02:38,459
before we get into<font color="#CCCCCC"> anything I'll kind of</font>

60
00:02:33,090 --> 00:02:40,800
<font color="#E5E5E5">just show you if anyone is still which</font>

61
00:02:38,460 --> 00:02:42,510
way does<font color="#E5E5E5"> this go you go this way yeah</font>

62
00:02:40,800 --> 00:02:45,450
so this<font color="#E5E5E5"> is what the web used to look</font>

63
00:02:42,510 --> 00:02:47,100
<font color="#CCCCCC">like I still sometimes come to this</font>

64
00:02:45,450 --> 00:02:49,049
website<font color="#CCCCCC"> because</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> love space jams so</font>

65
00:02:47,100 --> 00:02:51,359
that's<font color="#E5E5E5"> pretty good</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> yeah I mean the</font>

66
00:02:49,050 --> 00:02:53,610
web was basically just<font color="#E5E5E5"> a bunch of</font>

67
00:02:51,360 --> 00:02:57,990
marquees<font color="#CCCCCC"> and take</font><font color="#E5E5E5"> one tags and a bit of</font>

68
00:02:53,610 --> 00:03:00,090
<font color="#E5E5E5">stairs JPEGs</font><font color="#CCCCCC"> so in the early let's just</font>

69
00:02:57,990 --> 00:03:03,620
go back<font color="#CCCCCC"> to my slides</font><font color="#E5E5E5"> and in the early</font>

70
00:03:00,090 --> 00:03:05,670
days<font color="#E5E5E5"> there was this need for JavaScript</font>

71
00:03:03,620 --> 00:03:07,530
there was this whole concept<font color="#E5E5E5"> of</font>

72
00:03:05,670 --> 00:03:09,750
e-commerce platforms who actually<font color="#E5E5E5"> needed</font>

73
00:03:07,530 --> 00:03:11,700
<font color="#CCCCCC">to you know retain</font><font color="#E5E5E5"> state and have some</font>

74
00:03:09,750 --> 00:03:13,340
kind of presence of a user so they

75
00:03:11,700 --> 00:03:15,420
introduced things<font color="#CCCCCC"> like cookies but</font>

76
00:03:13,340 --> 00:03:18,140
<font color="#CCCCCC">javascript was introduced</font><font color="#E5E5E5"> into the</font>

77
00:03:15,420 --> 00:03:21,299
<font color="#E5E5E5">netscape navigator browser back in 1995</font>

78
00:03:18,140 --> 00:03:23,369
there was kind<font color="#E5E5E5"> of like a a war between</font>

79
00:03:21,300 --> 00:03:27,270
java applets but it was soon<font color="#E5E5E5"> swiftly</font>

80
00:03:23,370 --> 00:03:29,190
dead and<font color="#CCCCCC"> over the time</font><font color="#E5E5E5"> they kind</font><font color="#CCCCCC"> of</font>

81
00:03:27,270 --> 00:03:30,930
<font color="#CCCCCC">needed the</font><font color="#E5E5E5"> standardized</font><font color="#CCCCCC"> javascript so</font>

82
00:03:29,190 --> 00:03:33,240
there's this whole concept<font color="#E5E5E5"> of the echo</font>

83
00:03:30,930 --> 00:03:35,400
script<font color="#CCCCCC"> International Organization and</font>

84
00:03:33,240 --> 00:03:37,320
they create standards for web<font color="#CCCCCC"> stand</font><font color="#E5E5E5"> they</font>

85
00:03:35,400 --> 00:03:39,810
create kind<font color="#E5E5E5"> of standardization things</font>

86
00:03:37,320 --> 00:03:42,359
for web and<font color="#CCCCCC"> JavaScript conforms to that</font>

87
00:03:39,810 --> 00:03:45,450
<font color="#E5E5E5">standard you know many years ago the web</font>

88
00:03:42,360 --> 00:03:48,030
was predominantly server based<font color="#E5E5E5"> and if</font>

89
00:03:45,450 --> 00:03:50,250
you take a look at application built

90
00:03:48,030 --> 00:03:52,050
back<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the 2000 era you were mainly</font>

91
00:03:50,250 --> 00:03:53,880
looking<font color="#CCCCCC"> at a bit of HTML CSS</font><font color="#E5E5E5"> and</font>

92
00:03:52,050 --> 00:03:55,140
JavaScript on the client<font color="#CCCCCC"> and then</font>

93
00:03:53,880 --> 00:03:58,470
everything<font color="#E5E5E5"> was basically done on the</font>

94
00:03:55,140 --> 00:04:01,200
server so<font color="#CCCCCC"> you had</font><font color="#E5E5E5"> new net PHP oh sorry</font>

95
00:03:58,470 --> 00:04:03,090
PHP<font color="#E5E5E5"> and so on which was basically doing</font>

96
00:04:01,200 --> 00:04:06,869
everything<font color="#E5E5E5"> for</font><font color="#CCCCCC"> you and the client wasn't</font>

97
00:04:03,090 --> 00:04:08,490
<font color="#E5E5E5">really a thing so the old view was</font><font color="#CCCCCC"> that</font>

98
00:04:06,870 --> 00:04:09,750
you<font color="#CCCCCC"> just</font><font color="#E5E5E5"> had to protect the server and</font>

99
00:04:08,490 --> 00:04:11,670
of course we've seen<font color="#CCCCCC"> things like</font>

100
00:04:09,750 --> 00:04:13,170
<font color="#E5E5E5">cross-site scripting and so on where you</font>

101
00:04:11,670 --> 00:04:17,789
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> need to look at the</font><font color="#E5E5E5"> client-side</font>

102
00:04:13,170 --> 00:04:19,409
<font color="#CCCCCC">as well so I had a couple of arguments</font>

103
00:04:17,790 --> 00:04:22,460
with some of<font color="#CCCCCC"> my colleagues around</font><font color="#E5E5E5"> this</font>

104
00:04:19,410 --> 00:04:24,660
quote but on the 2016 developer survey

105
00:04:22,460 --> 00:04:26,159
<font color="#CCCCCC">JavaScript</font><font color="#E5E5E5"> was classed as the most</font>

106
00:04:24,660 --> 00:04:29,160
commonly used programming<font color="#E5E5E5"> language on</font>

107
00:04:26,160 --> 00:04:31,080
earth<font color="#CCCCCC"> so we've got developers who are</font><font color="#E5E5E5"> in</font>

108
00:04:29,160 --> 00:04:34,110
the full stack space<font color="#E5E5E5"> writing fluent and</font>

109
00:04:31,080 --> 00:04:37,650
<font color="#E5E5E5">come back</font><font color="#CCCCCC"> encodes are now all</font><font color="#E5E5E5"> utilizing</font>

110
00:04:34,110 --> 00:04:40,020
<font color="#E5E5E5">javascript in some way and in the 2017</font>

111
00:04:37,650 --> 00:04:41,159
survey it essentially mentions for the

112
00:04:40,020 --> 00:04:42,990
last<font color="#E5E5E5"> five years</font>

113
00:04:41,160 --> 00:04:46,080
javascript is still number one<font color="#CCCCCC"> in the</font>

114
00:04:42,990 --> 00:04:47,820
most popular and used language<font color="#E5E5E5"> I kind of</font>

115
00:04:46,080 --> 00:04:49,979
don't<font color="#E5E5E5"> want to make the joke but you know</font>

116
00:04:47,820 --> 00:04:52,040
if you get in<font color="#E5E5E5"> these summaries from Stack</font>

117
00:04:49,980 --> 00:04:54,000
Overflow it kind<font color="#E5E5E5"> of shows</font><font color="#CCCCCC"> how much</font>

118
00:04:52,040 --> 00:04:59,640
developers seem to have problems<font color="#CCCCCC"> when</font>

119
00:04:54,000 --> 00:05:02,550
<font color="#E5E5E5">they write in JavaScript</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> so when I</font>

120
00:04:59,640 --> 00:05:04,560
<font color="#E5E5E5">think about full stack</font><font color="#CCCCCC"> Java scripts you</font>

121
00:05:02,550 --> 00:05:06,330
can<font color="#E5E5E5"> kind of switch out the client</font><font color="#CCCCCC"> for</font>

122
00:05:04,560 --> 00:05:08,550
different kinds of<font color="#CCCCCC"> interpretations but</font>

123
00:05:06,330 --> 00:05:11,490
if anyone who knows me I'm a big

124
00:05:08,550 --> 00:05:12,900
angularjs fan so<font color="#E5E5E5"> a lot of the core a lot</font>

125
00:05:11,490 --> 00:05:16,010
of the presentation will kind of<font color="#E5E5E5"> fall</font>

126
00:05:12,900 --> 00:05:18,690
into that round<font color="#E5E5E5"> today but not you know</font>

127
00:05:16,010 --> 00:05:20,880
<font color="#E5E5E5">but full</font><font color="#CCCCCC"> stack is basically</font><font color="#E5E5E5"> you offer</font>

128
00:05:18,690 --> 00:05:23,640
like a low barrier of entry into writing

129
00:05:20,880 --> 00:05:25,530
<font color="#CCCCCC">client side and server side codes and</font>

130
00:05:23,640 --> 00:05:28,169
this<font color="#E5E5E5"> is because you know the client side</font>

131
00:05:25,530 --> 00:05:31,289
can be angularjs or reacts or<font color="#E5E5E5"> notes or</font>

132
00:05:28,170 --> 00:05:32,790
ember or backbone<font color="#CCCCCC"> j/s</font><font color="#E5E5E5"> and the server</font>

133
00:05:31,290 --> 00:05:36,210
could ultimately<font color="#E5E5E5"> be something like the</font>

134
00:05:32,790 --> 00:05:38,460
nodejs language with<font color="#CCCCCC"> express j/s</font><font color="#E5E5E5"> which</font>

135
00:05:36,210 --> 00:05:41,070
is<font color="#E5E5E5"> bolted</font><font color="#CCCCCC"> on as a framework</font><font color="#E5E5E5"> to use as a</font>

136
00:05:38,460 --> 00:05:43,919
server and even the<font color="#E5E5E5"> database is written</font>

137
00:05:41,070 --> 00:05:45,780
in<font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> so you know you've got</font>

138
00:05:43,920 --> 00:05:47,640
this<font color="#E5E5E5"> client-side code interacting with</font>

139
00:05:45,780 --> 00:05:49,260
JavaScript on the server which is

140
00:05:47,640 --> 00:05:53,419
interacting with<font color="#E5E5E5"> a JavaScript database</font>

141
00:05:49,260 --> 00:05:53,420
which is quite interesting<font color="#CCCCCC"> in</font><font color="#E5E5E5"> many ways</font>

142
00:05:53,510 --> 00:06:01,349
<font color="#E5E5E5">so that's I like to be reactive</font><font color="#CCCCCC"> nice to</font>

143
00:05:58,830 --> 00:06:03,359
react<font color="#E5E5E5"> joke right there and the web is</font>

144
00:06:01,350 --> 00:06:05,820
ultimately changing at like a very fast

145
00:06:03,360 --> 00:06:07,860
speed you<font color="#CCCCCC"> know developers are you know</font>

146
00:06:05,820 --> 00:06:10,830
writing various frameworks<font color="#E5E5E5"> to tackle</font>

147
00:06:07,860 --> 00:06:11,970
certain<font color="#E5E5E5"> problems and you know that when</font>

148
00:06:10,830 --> 00:06:13,200
<font color="#E5E5E5">they</font><font color="#CCCCCC"> are trying</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> those certain</font>

149
00:06:11,970 --> 00:06:15,450
problems they're introducing all these

150
00:06:13,200 --> 00:06:18,150
<font color="#E5E5E5">new wonderful weird features that people</font>

151
00:06:15,450 --> 00:06:20,930
<font color="#CCCCCC">utilize</font><font color="#E5E5E5"> and we don't really know if they</font>

152
00:06:18,150 --> 00:06:23,609
come<font color="#CCCCCC"> up</font><font color="#E5E5E5"> security issues or not so</font>

153
00:06:20,930 --> 00:06:25,260
<font color="#E5E5E5">frameworks like angular</font><font color="#CCCCCC"> JS</font><font color="#E5E5E5"> and react</font>

154
00:06:23,610 --> 00:06:28,050
<font color="#CCCCCC">they come with some quite secure</font>

155
00:06:25,260 --> 00:06:30,000
defaults by design<font color="#E5E5E5"> and but there's a</font>

156
00:06:28,050 --> 00:06:32,220
<font color="#CCCCCC">wonderful presentation while a blog post</font>

157
00:06:30,000 --> 00:06:34,140
by<font color="#CCCCCC"> gareth hayes from the ports wigger</font>

158
00:06:32,220 --> 00:06:35,850
who<font color="#CCCCCC"> basically talks about you know</font>

159
00:06:34,140 --> 00:06:38,729
abusing<font color="#E5E5E5"> javascript frameworks by</font>

160
00:06:35,850 --> 00:06:40,770
bypassing<font color="#CCCCCC"> XS mitigations and this is</font>

161
00:06:38,729 --> 00:06:42,810
when you trust frameworks for example in

162
00:06:40,770 --> 00:06:46,770
this instance it was<font color="#CCCCCC"> Marvel -</font><font color="#E5E5E5"> I owe</font>

163
00:06:42,810 --> 00:06:48,300
you had the ability<font color="#CCCCCC"> to bypass well</font>

164
00:06:46,770 --> 00:06:49,530
<font color="#CCCCCC">introduced cross-site scripting because</font>

165
00:06:48,300 --> 00:06:52,470
<font color="#CCCCCC">you were explicitly trusting this</font>

166
00:06:49,530 --> 00:06:54,239
<font color="#CCCCCC">framework</font><font color="#E5E5E5"> and from what I've seen</font><font color="#CCCCCC"> this</font>

167
00:06:52,470 --> 00:06:56,580
might not<font color="#CCCCCC"> be true for all organizations</font>

168
00:06:54,240 --> 00:06:59,190
and<font color="#E5E5E5"> our teams tend to transition into</font>

169
00:06:56,580 --> 00:07:00,750
different and prototypes at least<font color="#CCCCCC"> to</font>

170
00:06:59,190 --> 00:07:02,550
when they're building<font color="#E5E5E5"> applications every</font>

171
00:07:00,750 --> 00:07:05,010
couple of<font color="#E5E5E5"> years at least between the two</font>

172
00:07:02,550 --> 00:07:06,770
to<font color="#CCCCCC"> three year mark and from what I've</font>

173
00:07:05,010 --> 00:07:09,120
seen<font color="#CCCCCC"> and some people may disagree</font>

174
00:07:06,770 --> 00:07:11,669
<font color="#E5E5E5">automated security tools are</font><font color="#CCCCCC"> very slow</font>

175
00:07:09,120 --> 00:07:14,669
<font color="#CCCCCC">to adopt these frameworks</font><font color="#E5E5E5"> like for</font>

176
00:07:11,669 --> 00:07:16,680
<font color="#CCCCCC">example four or</font><font color="#E5E5E5"> five is a you know</font>

177
00:07:14,669 --> 00:07:19,770
<font color="#E5E5E5">automatic code scanning tool and only</font>

178
00:07:16,680 --> 00:07:25,110
recently<font color="#CCCCCC"> started to scan things like gem</font>

179
00:07:19,770 --> 00:07:29,450
<font color="#E5E5E5">angularjs so I'm going to talk about</font>

180
00:07:25,110 --> 00:07:29,450
<font color="#CCCCCC">some</font><font color="#E5E5E5"> JavaScript security issues now and</font>

181
00:07:30,560 --> 00:07:34,139
it's only three of them<font color="#E5E5E5"> and then we'll</font>

182
00:07:32,850 --> 00:07:37,440
jump<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> code and</font><font color="#E5E5E5"> code scanning</font>

183
00:07:34,139 --> 00:07:39,330
side of things<font color="#CCCCCC"> so I have a few personal</font>

184
00:07:37,440 --> 00:07:40,650
<font color="#E5E5E5">tips if anyone is kind of new to</font>

185
00:07:39,330 --> 00:07:41,909
JavaScript or they<font color="#CCCCCC"> haven't really</font>

186
00:07:40,650 --> 00:07:42,679
started<font color="#E5E5E5"> to look at frameworks and</font>

187
00:07:41,910 --> 00:07:45,030
libraries

188
00:07:42,680 --> 00:07:46,710
<font color="#E5E5E5">you don't have to be proficient in each</font>

189
00:07:45,030 --> 00:07:48,570
<font color="#CCCCCC">language you look at you know but if</font>

190
00:07:46,710 --> 00:07:49,950
your team are<font color="#E5E5E5"> specializing in a certain</font>

191
00:07:48,570 --> 00:07:53,159
framework you kind of want to learn all

192
00:07:49,950 --> 00:07:54,990
those idioms<font color="#E5E5E5"> understand how the</font>

193
00:07:53,160 --> 00:07:56,760
framework<font color="#E5E5E5"> works understanding all those</font>

194
00:07:54,990 --> 00:07:58,500
kind of intricate<font color="#E5E5E5"> paths can be allow you</font>

195
00:07:56,760 --> 00:08:00,810
to<font color="#E5E5E5"> actually read the code easier and</font>

196
00:07:58,500 --> 00:08:03,270
<font color="#E5E5E5">that</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> how I kind of pick it</font><font color="#CCCCCC"> up so</font>

197
00:08:00,810 --> 00:08:04,650
<font color="#E5E5E5">I normally build applications to kind of</font>

198
00:08:03,270 --> 00:08:07,070
understand the concept<font color="#E5E5E5"> of how the</font>

199
00:08:04,650 --> 00:08:09,330
logical<font color="#E5E5E5"> flow of the</font><font color="#CCCCCC"> application works</font>

200
00:08:07,070 --> 00:08:10,890
before you start<font color="#E5E5E5"> looking at the entire</font>

201
00:08:09,330 --> 00:08:13,349
landscape<font color="#CCCCCC"> of security</font><font color="#E5E5E5"> issues in a</font>

202
00:08:10,890 --> 00:08:14,849
framework<font color="#E5E5E5"> you should try and pick you</font>

203
00:08:13,350 --> 00:08:18,090
know one issue and learn it<font color="#E5E5E5"> well first</font>

204
00:08:14,850 --> 00:08:20,280
so understand<font color="#E5E5E5"> every kind of you know the</font>

205
00:08:18,090 --> 00:08:21,960
reason why it exists<font color="#E5E5E5"> why it's a problem</font>

206
00:08:20,280 --> 00:08:23,820
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> ultimately getting</font><font color="#E5E5E5"> down to the</font>

207
00:08:21,960 --> 00:08:26,250
bare groans bones on how to actually

208
00:08:23,820 --> 00:08:28,800
<font color="#E5E5E5">secure it and then it always keep</font>

209
00:08:26,250 --> 00:08:30,600
documentation<font color="#CCCCCC"> with this</font><font color="#E5E5E5"> these issues</font>

210
00:08:28,800 --> 00:08:32,459
that<font color="#CCCCCC"> you identify because they're</font><font color="#E5E5E5"> going</font>

211
00:08:30,600 --> 00:08:34,860
<font color="#E5E5E5">to be a good reference to one you can</font>

212
00:08:32,458 --> 00:08:37,109
show developers or to you can<font color="#E5E5E5"> just use</font>

213
00:08:34,860 --> 00:08:38,669
as a<font color="#E5E5E5"> reference to I understand the</font>

214
00:08:37,110 --> 00:08:42,120
security<font color="#CCCCCC"> issues that you saw in the</font><font color="#E5E5E5"> past</font>

215
00:08:38,669 --> 00:08:43,799
and use tools<font color="#E5E5E5"> but don't rely on them</font>

216
00:08:42,120 --> 00:08:45,589
because<font color="#E5E5E5"> there's many pitfalls with tools</font>

217
00:08:43,799 --> 00:08:49,260
it only can identify<font color="#CCCCCC"> things</font><font color="#E5E5E5"> that it</font>

218
00:08:45,589 --> 00:08:50,670
wrote<font color="#E5E5E5"> to find and you know there's lots</font>

219
00:08:49,260 --> 00:08:53,640
<font color="#E5E5E5">of limitations and they're very noisy</font>

220
00:08:50,670 --> 00:08:55,319
<font color="#CCCCCC">and sometimes using a trained eye can</font>

221
00:08:53,640 --> 00:08:57,210
<font color="#CCCCCC">actually be quite beneficial when</font>

222
00:08:55,320 --> 00:08:58,950
looking at<font color="#CCCCCC"> an</font><font color="#E5E5E5"> Java</font>

223
00:08:57,210 --> 00:09:03,270
or any<font color="#CCCCCC"> language or any framework in</font>

224
00:08:58,950 --> 00:09:07,380
general well<font color="#CCCCCC"> back light without so I'm</font>

225
00:09:03,270 --> 00:09:10,500
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to cover three things today so</font><font color="#E5E5E5"> the</font>

226
00:09:07,380 --> 00:09:11,970
dynamic<font color="#E5E5E5"> execution of JavaScript is</font>

227
00:09:10,500 --> 00:09:13,920
generally covered by things<font color="#E5E5E5"> that</font><font color="#CCCCCC"> will</font>

228
00:09:11,970 --> 00:09:16,860
make<font color="#CCCCCC"> code scanning</font><font color="#E5E5E5"> so I'm going to kind</font>

229
00:09:13,920 --> 00:09:18,810
<font color="#CCCCCC">of show</font><font color="#E5E5E5"> the way that we are in the world</font>

230
00:09:16,860 --> 00:09:21,180
now when it<font color="#E5E5E5"> comes to dynamic execution</font>

231
00:09:18,810 --> 00:09:22,949
<font color="#CCCCCC">of JavaScript</font><font color="#E5E5E5"> I'm also going to talk</font>

232
00:09:21,180 --> 00:09:25,829
<font color="#CCCCCC">about a</font><font color="#E5E5E5"> security issue that kind of</font>

233
00:09:22,950 --> 00:09:27,300
talks about cross<font color="#CCCCCC"> origin and this this</font>

234
00:09:25,830 --> 00:09:29,730
<font color="#E5E5E5">issue in particular is often</font>

235
00:09:27,300 --> 00:09:33,300
<font color="#E5E5E5">misunderstood by</font><font color="#CCCCCC"> developers and security</font>

236
00:09:29,730 --> 00:09:34,470
concerns<font color="#CCCCCC"> but from what I've seen</font><font color="#E5E5E5"> even</font>

237
00:09:33,300 --> 00:09:36,150
though the tools do<font color="#CCCCCC"> you</font><font color="#E5E5E5"> report the use</font>

238
00:09:34,470 --> 00:09:37,590
of<font color="#CCCCCC"> postmessage</font><font color="#E5E5E5"> doesn't necessarily mean</font>

239
00:09:36,150 --> 00:09:40,439
that<font color="#E5E5E5"> developers have fixed the problem</font>

240
00:09:37,590 --> 00:09:43,790
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then I'm briefly going to talk about</font>

241
00:09:40,440 --> 00:09:45,930
client-side<font color="#E5E5E5"> trust and this is what</font>

242
00:09:43,790 --> 00:09:48,410
automated tools<font color="#E5E5E5"> generally don't find</font>

243
00:09:45,930 --> 00:09:50,839
<font color="#E5E5E5">because when you think about</font><font color="#CCCCCC"> the client</font>

244
00:09:48,410 --> 00:09:52,500
ultimately there's things like

245
00:09:50,840 --> 00:09:54,630
authorization which are<font color="#E5E5E5"> done on the</font>

246
00:09:52,500 --> 00:09:56,010
server<font color="#E5E5E5"> but the tools don't know that</font>

247
00:09:54,630 --> 00:09:58,110
you're implementing these<font color="#CCCCCC"> things and</font>

248
00:09:56,010 --> 00:09:59,910
like they only can identify<font color="#E5E5E5"> actual</font>

249
00:09:58,110 --> 00:10:06,180
implementation books rather than you

250
00:09:59,910 --> 00:10:09,569
know design flaws so when we think about

251
00:10:06,180 --> 00:10:11,310
JavaScript execution<font color="#CCCCCC"> that</font><font color="#E5E5E5"> normally you</font>

252
00:10:09,570 --> 00:10:13,380
think<font color="#E5E5E5"> about cross-site scripting on the</font>

253
00:10:11,310 --> 00:10:15,180
browser<font color="#E5E5E5"> now of course with the</font>

254
00:10:13,380 --> 00:10:16,470
introduction to<font color="#CCCCCC"> no js' that changes</font>

255
00:10:15,180 --> 00:10:19,819
things which I'll talk about in<font color="#CCCCCC"> a minute</font>

256
00:10:16,470 --> 00:10:22,050
<font color="#CCCCCC">but</font><font color="#E5E5E5"> you know there's multiple</font><font color="#CCCCCC"> ways</font><font color="#E5E5E5"> to do</font>

257
00:10:19,820 --> 00:10:24,480
cross-site scripting and one of them is

258
00:10:22,050 --> 00:10:29,010
basically<font color="#E5E5E5"> when data falls</font><font color="#CCCCCC"> inside an</font>

259
00:10:24,480 --> 00:10:32,040
evaluation<font color="#E5E5E5"> or dynamic expression and you</font>

260
00:10:29,010 --> 00:10:33,630
know<font color="#E5E5E5"> eval in many ways an exit script</font>

261
00:10:32,040 --> 00:10:36,089
and<font color="#E5E5E5"> set timeout are quite beautiful</font><font color="#CCCCCC"> in</font>

262
00:10:33,630 --> 00:10:37,740
many ways because<font color="#E5E5E5"> these are generally</font>

263
00:10:36,090 --> 00:10:39,510
what are used to<font color="#CCCCCC"> bypass a lot</font><font color="#E5E5E5"> of filters</font>

264
00:10:37,740 --> 00:10:41,580
<font color="#CCCCCC">because you have things like you know</font>

265
00:10:39,510 --> 00:10:43,170
<font color="#E5E5E5">you can do string concatenation</font><font color="#CCCCCC"> without</font>

266
00:10:41,580 --> 00:10:46,140
you know including notifications so

267
00:10:43,170 --> 00:10:48,719
that's quite you know quite fantastic<font color="#E5E5E5"> in</font>

268
00:10:46,140 --> 00:10:49,350
many ways you<font color="#E5E5E5"> know the</font><font color="#CCCCCC"> XX script</font>

269
00:10:48,720 --> 00:10:51,690
function

270
00:10:49,350 --> 00:10:53,460
you know<font color="#E5E5E5"> runs on the window</font><font color="#CCCCCC"> object and</font>

271
00:10:51,690 --> 00:10:56,100
it also allows execution of JavaScript

272
00:10:53,460 --> 00:10:57,750
as well<font color="#E5E5E5"> so these are all things that are</font>

273
00:10:56,100 --> 00:10:59,190
<font color="#CCCCCC">generally used by developers and you</font>

274
00:10:57,750 --> 00:11:01,200
know you would use like<font color="#E5E5E5"> a set timeout to</font>

275
00:10:59,190 --> 00:11:02,970
wait for a second if<font color="#CCCCCC"> any sync call or a</font>

276
00:11:01,200 --> 00:11:07,770
synchronous call hasn't finished yet

277
00:11:02,970 --> 00:11:10,290
<font color="#E5E5E5">those kind of things so when we think</font>

278
00:11:07,770 --> 00:11:10,529
about dynamic execution<font color="#E5E5E5"> of JavaScript we</font>

279
00:11:10,290 --> 00:11:11,998
use

280
00:11:10,529 --> 00:11:14,610
just have the client-side code where you

281
00:11:11,999 --> 00:11:16,470
would call<font color="#CCCCCC"> alert document.domain</font><font color="#E5E5E5"> and it</font>

282
00:11:14,610 --> 00:11:18,480
would all be concatenated string

283
00:11:16,470 --> 00:11:20,939
concatenation into one basically query

284
00:11:18,480 --> 00:11:23,189
<font color="#E5E5E5">but when you take a look at the server</font>

285
00:11:20,939 --> 00:11:24,748
<font color="#E5E5E5">you know you know this is kind of where</font>

286
00:11:23,189 --> 00:11:26,730
<font color="#CCCCCC">the</font><font color="#E5E5E5"> worlds</font><font color="#CCCCCC"> collides and</font><font color="#E5E5E5"> we now have</font>

287
00:11:24,749 --> 00:11:32,339
actually remote code execution<font color="#E5E5E5"> for</font>

288
00:11:26,730 --> 00:11:35,009
dynamic execution of<font color="#CCCCCC"> JavaScript so I'm</font>

289
00:11:32,339 --> 00:11:38,730
going to<font color="#E5E5E5"> quickly show</font><font color="#CCCCCC"> you a demo of what</font>

290
00:11:35,009 --> 00:11:43,699
<font color="#CCCCCC">I'm trying to mean with this throw into</font>

291
00:11:38,730 --> 00:11:43,699
the<font color="#E5E5E5"> other screen if I camp ready go</font>

292
00:11:45,499 --> 00:11:51,930
there we go okay<font color="#E5E5E5"> so let's go back to</font><font color="#CCCCCC"> the</font>

293
00:11:48,899 --> 00:11:54,720
beginning<font color="#CCCCCC"> so first</font><font color="#E5E5E5"> I'll show the use of</font>

294
00:11:51,930 --> 00:11:56,459
an client-side execution so when you

295
00:11:54,720 --> 00:11:58,170
have like a<font color="#CCCCCC"> user name and you're</font>

296
00:11:56,459 --> 00:12:00,268
inserting<font color="#E5E5E5"> someone</font><font color="#CCCCCC"> else crypto</font><font color="#E5E5E5"> like one</font>

297
00:11:58,170 --> 00:12:01,889
and you're inserting a URL with our<font color="#CCCCCC"> eval</font>

298
00:12:00,269 --> 00:12:04,410
function<font color="#E5E5E5"> which</font><font color="#CCCCCC"> basically will do string</font>

299
00:12:01,889 --> 00:12:06,269
concatenation<font color="#E5E5E5"> and execute obviously when</font>

300
00:12:04,410 --> 00:12:09,120
<font color="#E5E5E5">you click</font><font color="#CCCCCC"> Submit</font><font color="#E5E5E5"> and if</font><font color="#CCCCCC"> datas</font><font color="#E5E5E5"> explicitly</font>

301
00:12:06,269 --> 00:12:10,529
trusted on a browser<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> will</font>

302
00:12:09,120 --> 00:12:12,209
actually<font color="#E5E5E5"> execute and it will I'd be</font>

303
00:12:10,529 --> 00:12:14,189
brought together and you execute<font color="#CCCCCC"> your</font>

304
00:12:12,209 --> 00:12:16,138
document<font color="#E5E5E5"> dot domain and it will</font>

305
00:12:14,189 --> 00:12:18,660
<font color="#CCCCCC">obviously alert</font><font color="#E5E5E5"> bookmarks calm in this</font>

306
00:12:16,139 --> 00:12:20,309
instance and<font color="#E5E5E5"> as you can</font><font color="#CCCCCC"> see like the</font>

307
00:12:18,660 --> 00:12:22,439
data here is explicitly trusted so if we

308
00:12:20,309 --> 00:12:24,809
refresh the browser<font color="#CCCCCC"> it's persisted and</font>

309
00:12:22,439 --> 00:12:27,120
<font color="#E5E5E5">it's an issue but then when you actually</font>

310
00:12:24,809 --> 00:12:28,290
take a look<font color="#E5E5E5"> at the server and imagine</font>

311
00:12:27,120 --> 00:12:31,319
you're<font color="#E5E5E5"> working with a node.js</font>

312
00:12:28,290 --> 00:12:33,779
application now<font color="#E5E5E5"> I'm gonna try</font><font color="#CCCCCC"> and pause</font>

313
00:12:31,319 --> 00:12:35,729
it for a second<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> have like a clear</font>

314
00:12:33,779 --> 00:12:38,279
temp function here<font color="#E5E5E5"> which basically is</font>

315
00:12:35,730 --> 00:12:41,129
taking<font color="#CCCCCC"> a request and a response this</font>

316
00:12:38,279 --> 00:12:43,709
<font color="#E5E5E5">then</font><font color="#CCCCCC"> takes the request body of EBL</font>

317
00:12:41,129 --> 00:12:45,509
ultimately<font color="#CCCCCC"> eBay</font><font color="#E5E5E5"> is assigned to</font><font color="#CCCCCC"> the user</font>

318
00:12:43,709 --> 00:12:47,459
input<font color="#E5E5E5"> and then it's injected into an</font>

319
00:12:45,509 --> 00:12:51,809
eval function and then that data<font color="#E5E5E5"> is then</font>

320
00:12:47,459 --> 00:12:54,449
<font color="#E5E5E5">returns so let's continue the example so</font>

321
00:12:51,809 --> 00:12:56,309
because of this<font color="#E5E5E5"> that</font><font color="#CCCCCC"> youth their user</font>

322
00:12:54,449 --> 00:12:57,990
input is going<font color="#E5E5E5"> to be explicitly trusted</font>

323
00:12:56,309 --> 00:12:59,699
and actually evaluated against<font color="#E5E5E5"> the</font>

324
00:12:57,990 --> 00:13:02,490
server the whole concept for this

325
00:12:59,699 --> 00:13:03,959
actually is<font color="#CCCCCC"> oh now I've paused it</font><font color="#E5E5E5"> down</font>

326
00:13:02,490 --> 00:13:05,790
at<font color="#E5E5E5"> the bomb all it's doing is reading</font>

327
00:13:03,959 --> 00:13:08,849
the file sync<font color="#CCCCCC"> and all it wants to</font><font color="#E5E5E5"> do is</font>

328
00:13:05,790 --> 00:13:10,980
<font color="#CCCCCC">we try</font><font color="#E5E5E5"> and retrieve like a log file so</font>

329
00:13:08,850 --> 00:13:12,480
if we intersect with burp<font color="#E5E5E5"> which means</font>

330
00:13:10,980 --> 00:13:16,249
<font color="#CCCCCC">obviously this is a dynamic application</font>

331
00:13:12,480 --> 00:13:18,750
and we're testing<font color="#CCCCCC"> it in that way and</font>

332
00:13:16,249 --> 00:13:20,189
then<font color="#CCCCCC"> we then go to clear the logs</font><font color="#E5E5E5"> all</font>

333
00:13:18,750 --> 00:13:22,439
this is<font color="#E5E5E5"> doing is calling</font><font color="#CCCCCC"> that function</font>

334
00:13:20,189 --> 00:13:24,180
which is meant<font color="#CCCCCC"> to pull the logs out and</font>

335
00:13:22,439 --> 00:13:27,810
as it<font color="#E5E5E5"> as you can see there</font>

336
00:13:24,180 --> 00:13:29,069
that but then<font color="#E5E5E5"> obviously if you take a</font>

337
00:13:27,810 --> 00:13:30,869
look<font color="#CCCCCC"> at what we talked about before</font>

338
00:13:29,070 --> 00:13:33,330
where you<font color="#E5E5E5"> can start</font><font color="#CCCCCC"> interact with the</font>

339
00:13:30,870 --> 00:13:34,620
server<font color="#CCCCCC"> due to</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> evaluation</font><font color="#E5E5E5"> what</font>

340
00:13:33,330 --> 00:13:36,690
you're actually<font color="#CCCCCC"> going to than going</font><font color="#E5E5E5"> get</font>

341
00:13:34,620 --> 00:13:39,089
is and basically<font color="#CCCCCC"> remote code execution</font>

342
00:13:36,690 --> 00:13:41,430
by you know for example<font color="#CCCCCC"> you call the</font>

343
00:13:39,089 --> 00:13:42,899
file system<font color="#E5E5E5"> so you know I want to read</font>

344
00:13:41,430 --> 00:13:44,699
the file sync and I want to make sure<font color="#E5E5E5"> it</font>

345
00:13:42,899 --> 00:13:46,800
returns to me which<font color="#E5E5E5"> is why we call file</font>

346
00:13:44,700 --> 00:13:48,690
sync and then we asked for<font color="#E5E5E5"> the EDC</font>

347
00:13:46,800 --> 00:13:51,060
passwords<font color="#E5E5E5"> what we're actually going to</font>

348
00:13:48,690 --> 00:13:52,470
<font color="#E5E5E5">get is you know code execution from the</font>

349
00:13:51,060 --> 00:13:58,500
browser<font color="#CCCCCC"> sorry from the</font><font color="#E5E5E5"> server to the</font>

350
00:13:52,470 --> 00:14:01,290
browser<font color="#E5E5E5"> whenever it's a very slow down</font>

351
00:13:58,500 --> 00:14:02,850
I'm sorry<font color="#E5E5E5"> so as you can</font><font color="#CCCCCC"> see you know now</font>

352
00:14:01,290 --> 00:14:08,310
we've returned that there are the other

353
00:14:02,850 --> 00:14:12,920
side of things<font color="#CCCCCC"> now let's close this off</font>

354
00:14:08,310 --> 00:14:15,420
so I can go back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> my oh yeah great so</font>

355
00:14:12,920 --> 00:14:17,130
as you can<font color="#CCCCCC"> see like world has definitely</font>

356
00:14:15,420 --> 00:14:19,620
<font color="#CCCCCC">changed from you know the early days of</font>

357
00:14:17,130 --> 00:14:21,330
1995 to now where we now<font color="#E5E5E5"> have you know</font>

358
00:14:19,620 --> 00:14:26,820
execution of JavaScript on the server

359
00:14:21,330 --> 00:14:30,029
<font color="#E5E5E5">and rather than the</font><font color="#CCCCCC"> client so websites</font>

360
00:14:26,820 --> 00:14:31,890
by default<font color="#E5E5E5"> are and basically have to</font>

361
00:14:30,029 --> 00:14:34,980
follow the same<font color="#CCCCCC"> origin policy and</font><font color="#E5E5E5"> this</font>

362
00:14:31,890 --> 00:14:36,930
<font color="#E5E5E5">prevents</font><font color="#CCCCCC"> attacker con talking to</font><font color="#E5E5E5"> Gmail</font>

363
00:14:34,980 --> 00:14:39,180
<font color="#E5E5E5">and retrieving the contents of</font><font color="#CCCCCC"> Gmail and</font>

364
00:14:36,930 --> 00:14:42,510
<font color="#CCCCCC">Facebook calm trying to ask for things</font>

365
00:14:39,180 --> 00:14:44,880
<font color="#E5E5E5">from Gmail now window dot post message</font>

366
00:14:42,510 --> 00:14:48,240
basically<font color="#E5E5E5"> enables you to send</font><font color="#CCCCCC"> messages</font>

367
00:14:44,880 --> 00:14:50,220
<font color="#CCCCCC">to inform different windows and there's</font>

368
00:14:48,240 --> 00:14:51,690
also<font color="#E5E5E5"> other</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> like you know JSON</font><font color="#CCCCCC"> P</font>

369
00:14:50,220 --> 00:14:53,310
which allows you to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> JavaScript</font>

370
00:14:51,690 --> 00:14:55,860
callbacks<font color="#E5E5E5"> and there was also things like</font>

371
00:14:53,310 --> 00:14:57,540
<font color="#CCCCCC">cos</font><font color="#E5E5E5"> that allow you to define what</font>

372
00:14:55,860 --> 00:14:59,760
websites can return the content<font color="#E5E5E5"> because</font>

373
00:14:57,540 --> 00:15:00,779
any<font color="#CCCCCC"> website can send a request</font><font color="#E5E5E5"> doesn't</font>

374
00:14:59,760 --> 00:15:03,480
<font color="#E5E5E5">necessarily mean they're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to get</font><font color="#CCCCCC"> a</font>

375
00:15:00,779 --> 00:15:06,720
<font color="#CCCCCC">response</font><font color="#E5E5E5"> and this could</font><font color="#CCCCCC"> happen in</font><font color="#E5E5E5"> two</font>

376
00:15:03,480 --> 00:15:09,170
instances<font color="#CCCCCC"> where a page spawns a</font><font color="#E5E5E5"> pop up</font>

377
00:15:06,720 --> 00:15:12,779
or you know an iframe of an embedded

378
00:15:09,170 --> 00:15:15,120
instance so if<font color="#CCCCCC"> you take</font><font color="#E5E5E5"> a look at this</font>

379
00:15:12,779 --> 00:15:17,070
this<font color="#CCCCCC"> example here we're correct</font><font color="#E5E5E5"> to send</font>

380
00:15:15,120 --> 00:15:18,750
a<font color="#E5E5E5"> message</font><font color="#CCCCCC"> just to a different</font><font color="#E5E5E5"> server you</font>

381
00:15:17,070 --> 00:15:20,399
create a window<font color="#E5E5E5"> or normally would have</font>

382
00:15:18,750 --> 00:15:22,050
that open window here then that<font color="#E5E5E5"> target</font>

383
00:15:20,399 --> 00:15:24,149
window<font color="#E5E5E5"> would send the post message and</font>

384
00:15:22,050 --> 00:15:26,399
you're<font color="#E5E5E5"> sending a message</font><font color="#CCCCCC"> to that</font><font color="#E5E5E5"> server</font>

385
00:15:24,149 --> 00:15:28,110
<font color="#E5E5E5">and this basically normally can define</font>

386
00:15:26,399 --> 00:15:30,930
the origin<font color="#CCCCCC"> but</font><font color="#E5E5E5"> at this instance we're</font>

387
00:15:28,110 --> 00:15:32,520
just ignoring<font color="#E5E5E5"> it then the other website</font>

388
00:15:30,930 --> 00:15:35,699
would set up an event<font color="#E5E5E5"> listener</font><font color="#CCCCCC"> with the</font>

389
00:15:32,520 --> 00:15:37,350
with the message attribute and then

390
00:15:35,700 --> 00:15:38,250
<font color="#E5E5E5">basically when this gets sent to the</font>

391
00:15:37,350 --> 00:15:40,290
<font color="#E5E5E5">other origin</font>

392
00:15:38,250 --> 00:15:42,120
it will then basically console<font color="#CCCCCC"> my dad</font>

393
00:15:40,290 --> 00:15:44,939
and data and the event data is send

394
00:15:42,120 --> 00:15:47,040
message now<font color="#E5E5E5"> the security vulnerability</font>

395
00:15:44,940 --> 00:15:49,010
here is that if you<font color="#CCCCCC"> do not validate</font><font color="#E5E5E5"> what</font>

396
00:15:47,040 --> 00:15:51,780
origins can talk to your<font color="#E5E5E5"> post message</font>

397
00:15:49,010 --> 00:15:53,939
actually<font color="#CCCCCC"> will allow you to</font><font color="#E5E5E5"> retrieve that</font>

398
00:15:51,780 --> 00:15:56,160
content<font color="#E5E5E5"> or potentially communicate with</font>

399
00:15:53,940 --> 00:15:58,680
it and from a different<font color="#E5E5E5"> origin or</font>

400
00:15:56,160 --> 00:16:00,449
attacker.com origin which allow you to

401
00:15:58,680 --> 00:16:02,719
execute<font color="#E5E5E5"> and steal things and I'm going</font>

402
00:16:00,450 --> 00:16:06,900
<font color="#E5E5E5">to show you how that</font><font color="#CCCCCC"> works</font><font color="#E5E5E5"> in a second</font>

403
00:16:02,720 --> 00:16:08,280
<font color="#E5E5E5">so this is an example from when we</font>

404
00:16:06,900 --> 00:16:10,410
reviewed a client-side code and they

405
00:16:08,280 --> 00:16:13,280
have a legacy<font color="#E5E5E5"> application and what they</font>

406
00:16:10,410 --> 00:16:16,709
wanted<font color="#E5E5E5"> to do was actually go away and</font>

407
00:16:13,280 --> 00:16:18,660
<font color="#E5E5E5">create</font><font color="#CCCCCC"> a client's angularjs client</font><font color="#E5E5E5"> site</font>

408
00:16:16,710 --> 00:16:20,370
and they wanted to<font color="#E5E5E5"> be able to share the</font>

409
00:16:18,660 --> 00:16:22,800
configuration of<font color="#E5E5E5"> that so they were using</font>

410
00:16:20,370 --> 00:16:24,420
<font color="#E5E5E5">a post message as an iframe to actually</font>

411
00:16:22,800 --> 00:16:26,550
<font color="#E5E5E5">then just retrieve that information so</font>

412
00:16:24,420 --> 00:16:28,199
they<font color="#CCCCCC"> can capture</font><font color="#E5E5E5"> their JSON web token</font>

413
00:16:26,550 --> 00:16:30,870
which allowed them to communicate

414
00:16:28,200 --> 00:16:33,600
obviously JSON web tokens is just what a

415
00:16:30,870 --> 00:16:36,830
lot of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> new applications tend to use</font>

416
00:16:33,600 --> 00:16:40,140
for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> therefore</font><font color="#E5E5E5"> being authenticated</font>

417
00:16:36,830 --> 00:16:42,540
<font color="#E5E5E5">so in this instance</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> says we</font><font color="#CCCCCC"> have a</font>

418
00:16:40,140 --> 00:16:45,420
<font color="#E5E5E5">get config and that's basically what</font>

419
00:16:42,540 --> 00:16:47,459
gets sent by the user and all it's doing

420
00:16:45,420 --> 00:16:49,319
the current release<font color="#E5E5E5"> see it from here but</font>

421
00:16:47,460 --> 00:16:51,930
<font color="#CCCCCC">basically we're checking</font><font color="#E5E5E5"> to see if that</font>

422
00:16:49,320 --> 00:16:54,060
key<font color="#CCCCCC"> is the configure I get sent and it's</font>

423
00:16:51,930 --> 00:16:56,099
going<font color="#E5E5E5"> to wrap this event data and then</font>

424
00:16:54,060 --> 00:16:58,680
create the post message to send<font color="#E5E5E5"> it back</font>

425
00:16:56,100 --> 00:17:00,900
so it has an<font color="#E5E5E5"> event listener waiting to</font>

426
00:16:58,680 --> 00:17:02,609
receive<font color="#E5E5E5"> the message and as long as this</font>

427
00:17:00,900 --> 00:17:04,260
matches<font color="#CCCCCC"> it's then going</font><font color="#E5E5E5"> to return this</font>

428
00:17:02,610 --> 00:17:07,589
information back<font color="#CCCCCC"> to the page as long as</font>

429
00:17:04,260 --> 00:17:10,109
an event list is set up so to<font color="#CCCCCC"> share this</font>

430
00:17:07,589 --> 00:17:12,149
in context<font color="#E5E5E5"> as an exploit all you're</font>

431
00:17:10,109 --> 00:17:13,829
going<font color="#E5E5E5"> to do is</font><font color="#CCCCCC"> basically set up an event</font>

432
00:17:12,150 --> 00:17:16,170
listener<font color="#CCCCCC"> to</font><font color="#E5E5E5"> receive the message back and</font>

433
00:17:13,829 --> 00:17:17,909
then<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> all I'm doing is alerting</font>

434
00:17:16,170 --> 00:17:20,670
that event data they get slim back to me

435
00:17:17,910 --> 00:17:22,320
but I'm creating<font color="#CCCCCC"> a set timeout with the</font>

436
00:17:20,670 --> 00:17:24,690
run function<font color="#E5E5E5"> of five milliseconds which</font>

437
00:17:22,319 --> 00:17:26,250
<font color="#CCCCCC">is</font><font color="#E5E5E5"> five seconds and</font><font color="#CCCCCC"> then I'm</font><font color="#E5E5E5"> calling</font>

438
00:17:24,690 --> 00:17:28,290
post message on the window I want<font color="#E5E5E5"> to</font>

439
00:17:26,250 --> 00:17:30,360
execute<font color="#CCCCCC"> and I'm</font><font color="#E5E5E5"> basically sending get</font>

440
00:17:28,290 --> 00:17:32,909
conflict<font color="#E5E5E5"> so what this is</font><font color="#CCCCCC"> going to do is</font>

441
00:17:30,360 --> 00:17:33,240
<font color="#E5E5E5">going to send a</font><font color="#CCCCCC"> request</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> horrible</font>

442
00:17:32,910 --> 00:17:35,610
server

443
00:17:33,240 --> 00:17:36,840
<font color="#E5E5E5">say give me</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> information</font><font color="#CCCCCC"> and the</font>

444
00:17:35,610 --> 00:17:39,570
<font color="#CCCCCC">answer is they're</font><font color="#E5E5E5"> going to responded</font>

445
00:17:36,840 --> 00:17:44,820
back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> so now I'm going to show you</font>

446
00:17:39,570 --> 00:17:48,500
<font color="#E5E5E5">another</font><font color="#CCCCCC"> demo of</font><font color="#E5E5E5"> this in action I'm</font>

447
00:17:44,820 --> 00:17:48,500
<font color="#E5E5E5">enjoying the app I really enjoy</font>

448
00:17:50,170 --> 00:17:55,510
thank you okay<font color="#CCCCCC"> so</font><font color="#E5E5E5"> now off we go back to</font>

449
00:17:54,370 --> 00:17:56,199
the beginning<font color="#CCCCCC"> again I'm going</font><font color="#E5E5E5"> to talk</font>

450
00:17:55,510 --> 00:17:57,940
<font color="#CCCCCC">through that again</font>

451
00:17:56,200 --> 00:18:00,820
<font color="#E5E5E5">so as you can see we've got an event</font>

452
00:17:57,940 --> 00:18:03,100
listener<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is basically you know</font>

453
00:18:00,820 --> 00:18:05,530
going<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> listening for</font><font color="#E5E5E5"> a response in</font>

454
00:18:03,100 --> 00:18:08,770
and as you can<font color="#E5E5E5"> see we've</font><font color="#CCCCCC"> got the up</font>

455
00:18:05,530 --> 00:18:11,139
<font color="#E5E5E5">configured get config so as long as</font><font color="#CCCCCC"> that</font>

456
00:18:08,770 --> 00:18:12,610
<font color="#E5E5E5">config is matching this</font><font color="#CCCCCC"> get</font>

457
00:18:11,140 --> 00:18:15,460
configuration<font color="#E5E5E5"> it's going to return this</font>

458
00:18:12,610 --> 00:18:17,260
data<font color="#E5E5E5"> so obviously we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> pass that</font>

459
00:18:15,460 --> 00:18:20,020
<font color="#E5E5E5">data as well to actually</font><font color="#CCCCCC"> read it</font><font color="#E5E5E5"> in the</font>

460
00:18:17,260 --> 00:18:22,180
correct format<font color="#E5E5E5"> so it takes the</font><font color="#CCCCCC"> event</font>

461
00:18:20,020 --> 00:18:24,250
data and then<font color="#E5E5E5"> it checks it to see if it</font>

462
00:18:22,180 --> 00:18:26,500
actually<font color="#CCCCCC"> matches and then it will wrap</font>

463
00:18:24,250 --> 00:18:27,370
it in this<font color="#E5E5E5"> event data and then return</font>

464
00:18:26,500 --> 00:18:29,920
the<font color="#E5E5E5"> data to us</font>

465
00:18:27,370 --> 00:18:35,080
so in a second<font color="#E5E5E5"> I'm about to show the</font>

466
00:18:29,920 --> 00:18:38,140
exploit and share the same steps so

467
00:18:35,080 --> 00:18:39,570
let's<font color="#CCCCCC"> say we've got</font><font color="#E5E5E5"> the set timeout and</font>

468
00:18:38,140 --> 00:18:41,770
it runs in five seconds

469
00:18:39,570 --> 00:18:44,470
and we're basically<font color="#E5E5E5"> calling the post</font>

470
00:18:41,770 --> 00:18:50,650
message of get config opening obviously

471
00:18:44,470 --> 00:18:52,090
sending it to the vulnerable window and

472
00:18:50,650 --> 00:18:53,440
<font color="#E5E5E5">again we're ignoring this because it</font>

473
00:18:52,090 --> 00:18:56,290
when it's a wild<font color="#E5E5E5"> card it's just ignored</font>

474
00:18:53,440 --> 00:18:58,210
<font color="#E5E5E5">but as you can see well now that when</font>

475
00:18:56,290 --> 00:18:59,680
I'll go back to<font color="#E5E5E5"> it but</font><font color="#CCCCCC"> basically the</font>

476
00:18:58,210 --> 00:19:01,360
<font color="#CCCCCC">reason why this comes back to</font><font color="#E5E5E5"> the user</font>

477
00:18:59,680 --> 00:19:03,430
is because they choose the target<font color="#E5E5E5"> origin</font>

478
00:19:01,360 --> 00:19:04,659
to come back so the event<font color="#E5E5E5"> origin so</font>

479
00:19:03,430 --> 00:19:06,460
<font color="#E5E5E5">whatever made the request</font>

480
00:19:04,660 --> 00:19:08,260
they chose the event origin to come back

481
00:19:06,460 --> 00:19:09,550
so as you can<font color="#E5E5E5"> see if we choose</font>

482
00:19:08,260 --> 00:19:11,590
<font color="#CCCCCC">attacker.com and send it</font><font color="#E5E5E5"> to the</font>

483
00:19:09,550 --> 00:19:13,629
vulnerable page that opens<font color="#CCCCCC"> the window</font>

484
00:19:11,590 --> 00:19:15,310
<font color="#E5E5E5">and if we go</font><font color="#CCCCCC"> back to that page it's</font>

485
00:19:13,630 --> 00:19:17,740
<font color="#E5E5E5">going to give us back to JSON web token</font>

486
00:19:15,310 --> 00:19:19,600
<font color="#CCCCCC">after five seconds so in the application</font>

487
00:19:17,740 --> 00:19:23,140
this actually gave the full JWT not just

488
00:19:19,600 --> 00:19:24,969
the string token<font color="#E5E5E5"> so the way</font><font color="#CCCCCC"> to fix this</font>

489
00:19:23,140 --> 00:19:27,970
<font color="#E5E5E5">would actually be to validate the</font>

490
00:19:24,970 --> 00:19:31,630
origins that you trust so you<font color="#CCCCCC"> would</font>

491
00:19:27,970 --> 00:19:33,340
<font color="#E5E5E5">first just include the event origin and</font>

492
00:19:31,630 --> 00:19:35,890
if it's coming from a<font color="#E5E5E5"> website</font><font color="#CCCCCC"> that we</font>

493
00:19:33,340 --> 00:19:37,750
trust then if it's<font color="#E5E5E5"> not coming</font><font color="#CCCCCC"> from a</font><font color="#E5E5E5"> web</font>

494
00:19:35,890 --> 00:19:39,760
<font color="#E5E5E5">site</font><font color="#CCCCCC"> that we're going to</font><font color="#E5E5E5"> just return and</font>

495
00:19:37,750 --> 00:19:41,920
if it is this origin then it's<font color="#E5E5E5"> gonna</font>

496
00:19:39,760 --> 00:19:44,680
execute<font color="#E5E5E5"> everything else so we try that</font>

497
00:19:41,920 --> 00:19:47,650
<font color="#CCCCCC">payload again</font><font color="#E5E5E5"> it's not going to work so</font>

498
00:19:44,680 --> 00:19:49,060
<font color="#E5E5E5">kimitaka</font><font color="#CCCCCC"> calm after five seconds</font>

499
00:19:47,650 --> 00:19:50,530
<font color="#E5E5E5">it won't execute</font><font color="#CCCCCC"> anymore because it's</font>

500
00:19:49,060 --> 00:19:54,399
being rejected<font color="#E5E5E5"> because it's not a valid</font>

501
00:19:50,530 --> 00:19:57,010
origin to talk to the application<font color="#E5E5E5"> so</font>

502
00:19:54,400 --> 00:19:59,200
then if we go to at example.com because

503
00:19:57,010 --> 00:20:01,120
it's validated<font color="#E5E5E5"> and the same thing</font>

504
00:19:59,200 --> 00:20:03,160
happens it<font color="#E5E5E5"> will return back</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> data</font>

505
00:20:01,120 --> 00:20:03,939
that we need<font color="#E5E5E5"> and this is obviously what</font>

506
00:20:03,160 --> 00:20:10,720
you want to try

507
00:20:03,940 --> 00:20:14,470
chief okay so yeah what I meant here is

508
00:20:10,720 --> 00:20:16,480
basically<font color="#E5E5E5"> go back</font><font color="#CCCCCC"> to here</font><font color="#E5E5E5"> so in the post</font>

509
00:20:14,470 --> 00:20:18,519
message we're returning<font color="#CCCCCC"> back to the</font>

510
00:20:16,480 --> 00:20:28,480
event we want to send it to so rather

511
00:20:18,519 --> 00:20:30,190
than having the wild card<font color="#E5E5E5"> so a common</font>

512
00:20:28,480 --> 00:20:32,620
you know<font color="#E5E5E5"> issue with web</font><font color="#CCCCCC"> applications is</font>

513
00:20:30,190 --> 00:20:34,090
<font color="#CCCCCC">client-side</font><font color="#E5E5E5"> trust and you know when</font>

514
00:20:32,620 --> 00:20:35,799
developers create applications they

515
00:20:34,090 --> 00:20:38,230
often think<font color="#CCCCCC"> that javascript is</font><font color="#E5E5E5"> running</font>

516
00:20:35,799 --> 00:20:40,960
<font color="#E5E5E5">on the client</font><font color="#CCCCCC"> and the client isn't</font><font color="#E5E5E5"> you</font>

517
00:20:38,230 --> 00:20:42,490
know knowing<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the interpretation</font><font color="#CCCCCC"> is</font>

518
00:20:40,960 --> 00:20:45,009
<font color="#CCCCCC">that actually attackers can't access</font>

519
00:20:42,490 --> 00:20:46,360
this<font color="#E5E5E5"> and you know there's a lot of wrong</font>

520
00:20:45,009 --> 00:20:48,009
assumptions that<font color="#CCCCCC"> you know based</font><font color="#E5E5E5"> on the</font>

521
00:20:46,360 --> 00:20:50,199
client is<font color="#E5E5E5"> not accessible and it went</font>

522
00:20:48,009 --> 00:20:51,960
data submitted by the client<font color="#E5E5E5"> you know</font>

523
00:20:50,200 --> 00:20:55,029
it's controlled<font color="#E5E5E5"> by the</font><font color="#CCCCCC"> server-side</font><font color="#E5E5E5"> but</font>

524
00:20:51,960 --> 00:20:56,590
in fact data that is<font color="#CCCCCC"> stored on the</font>

525
00:20:55,029 --> 00:20:57,909
client<font color="#E5E5E5"> is definitely accessible by</font>

526
00:20:56,590 --> 00:20:59,949
attackers if you think about<font color="#E5E5E5"> things</font><font color="#CCCCCC"> like</font>

527
00:20:57,909 --> 00:21:02,409
cross-site scripting<font color="#E5E5E5"> your</font><font color="#CCCCCC"> actions</font>

528
00:20:59,950 --> 00:21:04,120
performed on a client are fully can be

529
00:21:02,409 --> 00:21:06,759
fully controlled by attackers through

530
00:21:04,120 --> 00:21:08,649
things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> XML HTTP or creating like a</font>

531
00:21:06,759 --> 00:21:11,740
form to send<font color="#E5E5E5"> a</font><font color="#CCCCCC"> request via</font><font color="#E5E5E5"> the</font>

532
00:21:08,649 --> 00:21:14,678
<font color="#CCCCCC">application</font><font color="#E5E5E5"> and you know other things</font>

533
00:21:11,740 --> 00:21:18,159
<font color="#E5E5E5">like capturing like the local storage or</font>

534
00:21:14,679 --> 00:21:19,779
<font color="#CCCCCC">the copy and so on</font><font color="#E5E5E5"> and it's some</font>

535
00:21:18,159 --> 00:21:22,799
important<font color="#E5E5E5"> things to think about as well</font>

536
00:21:19,779 --> 00:21:25,179
<font color="#CCCCCC">as you know HTML</font><font color="#E5E5E5"> storage persists and</font>

537
00:21:22,799 --> 00:21:27,279
you shouldn't save<font color="#CCCCCC"> them from sensitive</font>

538
00:21:25,179 --> 00:21:31,179
information and things like and cached

539
00:21:27,279 --> 00:21:33,850
packages or form data or cookies and you

540
00:21:31,179 --> 00:21:36,179
also<font color="#E5E5E5"> should only use session storage</font>

541
00:21:33,850 --> 00:21:38,080
<font color="#E5E5E5">because when you close the browser it</font>

542
00:21:36,179 --> 00:21:39,700
<font color="#E5E5E5">basically clears everything out of the</font>

543
00:21:38,080 --> 00:21:42,129
<font color="#CCCCCC">session storage</font><font color="#E5E5E5"> and that doesn't happen</font>

544
00:21:39,700 --> 00:21:45,730
for<font color="#CCCCCC"> local storage and I've left a nice</font>

545
00:21:42,129 --> 00:21:50,500
<font color="#E5E5E5">little blog from someone that I like to</font>

546
00:21:45,730 --> 00:21:52,450
<font color="#CCCCCC">dig I'm loving it because</font><font color="#E5E5E5"> what actually</font>

547
00:21:50,500 --> 00:21:55,120
happened was there<font color="#E5E5E5"> was an angularjs</font>

548
00:21:52,450 --> 00:21:58,240
application<font color="#E5E5E5"> and they found a way to</font>

549
00:21:55,120 --> 00:22:00,549
basically<font color="#E5E5E5"> do client-side cross-site</font>

550
00:21:58,240 --> 00:22:03,279
scripting<font color="#E5E5E5"> and what</font><font color="#CCCCCC"> actually then</font>

551
00:22:00,549 --> 00:22:05,259
happened was they were<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> password</font>

552
00:22:03,279 --> 00:22:06,970
encryption on the<font color="#E5E5E5"> client and they were</font>

553
00:22:05,259 --> 00:22:09,789
able<font color="#CCCCCC"> to use cross-site scripting</font><font color="#E5E5E5"> to then</font>

554
00:22:06,970 --> 00:22:12,460
<font color="#E5E5E5">I know it was using the same key so</font>

555
00:22:09,789 --> 00:22:13,480
<font color="#E5E5E5">you're basically able to decrypt it</font><font color="#CCCCCC"> and</font>

556
00:22:12,460 --> 00:22:15,009
obviously<font color="#CCCCCC"> you shouldn't</font><font color="#E5E5E5"> be using the</font>

557
00:22:13,480 --> 00:22:16,299
encryption anyway and then you could

558
00:22:15,009 --> 00:22:17,860
then use the cross-site scripting to

559
00:22:16,299 --> 00:22:19,809
send the<font color="#CCCCCC"> password to you</font>

560
00:22:17,860 --> 00:22:24,668
so if anyone<font color="#E5E5E5"> wants to take a look at</font>

561
00:22:19,809 --> 00:22:26,080
that I would<font color="#E5E5E5"> highly</font><font color="#CCCCCC"> recommend it so and</font>

562
00:22:24,669 --> 00:22:28,169
then there's one<font color="#CCCCCC"> more thing so when you</font>

563
00:22:26,080 --> 00:22:31,029
start to look at and JavaScript

564
00:22:28,169 --> 00:22:33,610
client-side applications<font color="#CCCCCC"> like I like to</font>

565
00:22:31,029 --> 00:22:37,120
<font color="#CCCCCC">look at angularjs and there's two things</font>

566
00:22:33,610 --> 00:22:39,100
<font color="#CCCCCC">that</font><font color="#E5E5E5"> point out to me here when you see</font>

567
00:22:37,120 --> 00:22:40,840
like things that<font color="#CCCCCC"> ng show or</font><font color="#E5E5E5"> ng hides</font>

568
00:22:39,100 --> 00:22:43,658
<font color="#E5E5E5">these are client-side checks they're</font>

569
00:22:40,840 --> 00:22:46,029
basically JavaScript boolean<font color="#E5E5E5"> checks to</font>

570
00:22:43,659 --> 00:22:47,980
see how do I fulfilled this and have I

571
00:22:46,029 --> 00:22:49,990
fulfilled this and with angularjs

572
00:22:47,980 --> 00:22:52,299
there's also client-side routing so

573
00:22:49,990 --> 00:22:53,919
ultimately when you try and<font color="#CCCCCC"> go</font><font color="#E5E5E5"> to</font>

574
00:22:52,299 --> 00:22:56,139
forward slash users as someone who's

575
00:22:53,919 --> 00:22:58,179
logged in<font color="#E5E5E5"> if this isn't met that</font>

576
00:22:56,139 --> 00:22:59,408
<font color="#CCCCCC">JavaScript won't allow you but it's all</font>

577
00:22:58,179 --> 00:23:02,200
<font color="#E5E5E5">on the</font><font color="#CCCCCC"> client-side it can all be</font>

578
00:22:59,409 --> 00:23:04,360
tampered with<font color="#E5E5E5"> and there's a lot of push</font>

579
00:23:02,200 --> 00:23:06,130
<font color="#E5E5E5">from</font><font color="#CCCCCC"> the server</font><font color="#E5E5E5"> to the client and</font>

580
00:23:04,360 --> 00:23:08,039
ultimately what happens is a<font color="#E5E5E5"> lot of</font>

581
00:23:06,130 --> 00:23:10,899
people now don't<font color="#CCCCCC"> actually add those</font>

582
00:23:08,039 --> 00:23:12,669
server-side checks<font color="#E5E5E5"> and this is all they</font>

583
00:23:10,899 --> 00:23:16,000
tend<font color="#CCCCCC"> to use and it's I've done a lot of</font>

584
00:23:12,669 --> 00:23:18,190
<font color="#E5E5E5">code reviews and I would say they do it</font>

585
00:23:16,000 --> 00:23:20,289
right for<font color="#E5E5E5"> most instances but there have</font>

586
00:23:18,190 --> 00:23:21,850
<font color="#CCCCCC">been quite a few occasions where they've</font>

587
00:23:20,289 --> 00:23:23,139
only relied on the client<font color="#E5E5E5"> and you've</font>

588
00:23:21,850 --> 00:23:24,100
been able<font color="#E5E5E5"> to you know gain a higher</font>

589
00:23:23,139 --> 00:23:30,399
level of<font color="#CCCCCC"> privilege</font>

590
00:23:24,100 --> 00:23:32,860
due to this so now I want to talk

591
00:23:30,399 --> 00:23:35,739
<font color="#CCCCCC">quickly about static code analysis and</font>

592
00:23:32,860 --> 00:23:40,120
review<font color="#E5E5E5"> methods so let's talk</font><font color="#CCCCCC"> about the</font>

593
00:23:35,740 --> 00:23:42,610
concept of walking the tree so when we

594
00:23:40,120 --> 00:23:44,439
think about manual code review or doing

595
00:23:42,610 --> 00:23:46,149
code review in general<font color="#E5E5E5"> it's quite a</font>

596
00:23:44,440 --> 00:23:47,649
boring process there's sometimes

597
00:23:46,149 --> 00:23:49,418
<font color="#CCCCCC">millions and millions</font><font color="#E5E5E5"> of lines of code</font>

598
00:23:47,649 --> 00:23:51,370
to<font color="#E5E5E5"> look at maybe not in the JavaScript</font>

599
00:23:49,419 --> 00:23:55,570
sense<font color="#E5E5E5"> but definitely in legacy</font>

600
00:23:51,370 --> 00:23:57,549
applications<font color="#E5E5E5"> and the whole term of</font>

601
00:23:55,570 --> 00:24:01,059
static analysis is to<font color="#CCCCCC"> basically automate</font>

602
00:23:57,549 --> 00:24:03,220
the process<font color="#CCCCCC"> of using</font><font color="#E5E5E5"> code review so and</font>

603
00:24:01,059 --> 00:24:04,899
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> normally carried out in the</font>

604
00:24:03,220 --> 00:24:07,210
implementation<font color="#CCCCCC"> phase of the software</font>

605
00:24:04,899 --> 00:24:09,908
<font color="#CCCCCC">development life cycle and basically</font>

606
00:24:07,210 --> 00:24:11,710
this just<font color="#E5E5E5"> means the code level so if we</font>

607
00:24:09,909 --> 00:24:13,330
take a look<font color="#E5E5E5"> at this diagram when you're</font>

608
00:24:11,710 --> 00:24:15,580
building<font color="#E5E5E5"> an application you normally</font>

609
00:24:13,330 --> 00:24:18,010
<font color="#E5E5E5">have an</font><font color="#CCCCCC"> S</font><font color="#E5E5E5"> DLC and you normally</font><font color="#CCCCCC"> start</font>

610
00:24:15,580 --> 00:24:20,230
with requirements and use<font color="#E5E5E5"> cases and you</font>

611
00:24:18,010 --> 00:24:21,908
go into<font color="#CCCCCC"> architecture and design</font><font color="#E5E5E5"> and then</font>

612
00:24:20,230 --> 00:24:23,649
you're<font color="#E5E5E5"> go into test cases and autumn</font>

613
00:24:21,909 --> 00:24:25,120
<font color="#CCCCCC">utley then you get to your codes</font><font color="#E5E5E5"> when</font>

614
00:24:23,649 --> 00:24:27,100
<font color="#E5E5E5">the actual implementation phase happens</font>

615
00:24:25,120 --> 00:24:29,439
<font color="#E5E5E5">and this</font><font color="#CCCCCC"> is where normally</font><font color="#E5E5E5"> you would try</font>

616
00:24:27,100 --> 00:24:30,939
and<font color="#E5E5E5"> utilize tools or perform code audits</font>

617
00:24:29,440 --> 00:24:34,330
from from

618
00:24:30,940 --> 00:24:36,549
<font color="#E5E5E5">in external perspective and that's also</font>

619
00:24:34,330 --> 00:24:38,139
texture you know identify<font color="#E5E5E5"> security</font>

620
00:24:36,549 --> 00:24:40,658
vulnerabilities that were introduced due

621
00:24:38,139 --> 00:24:41,978
to coding errors and security

622
00:24:40,659 --> 00:24:44,229
vulnerabilities that were you<font color="#CCCCCC"> know</font>

623
00:24:41,979 --> 00:24:48,099
ultimately<font color="#E5E5E5"> introduced and maliciously in</font>

624
00:24:44,229 --> 00:24:49,359
the source codes now<font color="#E5E5E5"> I don't want to go</font>

625
00:24:48,099 --> 00:24:51,999
<font color="#E5E5E5">into too much detail</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> the</font>

626
00:24:49,359 --> 00:24:53,889
<font color="#E5E5E5">underlying process of generally how</font>

627
00:24:51,999 --> 00:24:56,529
things will come<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> path of</font>

628
00:24:53,889 --> 00:24:57,849
<font color="#E5E5E5">actually static in a static analysis but</font>

629
00:24:56,529 --> 00:25:00,369
and<font color="#E5E5E5"> this is more like from an</font>

630
00:24:57,849 --> 00:25:02,349
<font color="#CCCCCC">interpreter sense as well so normally</font>

631
00:25:00,369 --> 00:25:04,720
you<font color="#E5E5E5"> start with source codes and if you</font>

632
00:25:02,349 --> 00:25:07,299
just have source codes<font color="#CCCCCC"> it's just numbers</font>

633
00:25:04,720 --> 00:25:10,119
<font color="#E5E5E5">to a machine</font><font color="#CCCCCC"> so normally they go through</font>

634
00:25:07,299 --> 00:25:11,408
this<font color="#E5E5E5"> process of they build tokens and</font>

635
00:25:10,119 --> 00:25:14,978
these tokens<font color="#E5E5E5"> are basically just</font>

636
00:25:11,409 --> 00:25:18,159
<font color="#CCCCCC">breakdown points of each defect so like</font>

637
00:25:14,979 --> 00:25:19,989
var would be<font color="#CCCCCC"> var and when you go into</font>

638
00:25:18,159 --> 00:25:21,399
<font color="#E5E5E5">the token sense you also need</font><font color="#CCCCCC"> to take</font><font color="#E5E5E5"> in</font>

639
00:25:19,989 --> 00:25:23,739
<font color="#E5E5E5">a lot</font><font color="#CCCCCC"> of things into</font><font color="#E5E5E5"> consideration like</font>

640
00:25:21,399 --> 00:25:25,299
<font color="#E5E5E5">does whitespace matter because in</font>

641
00:25:23,739 --> 00:25:27,429
JavaScript<font color="#E5E5E5"> it doesn't but if you're</font>

642
00:25:25,299 --> 00:25:30,009
looking at<font color="#E5E5E5"> things like Python certain</font>

643
00:25:27,429 --> 00:25:32,049
matters<font color="#E5E5E5"> so there's whole concept of</font>

644
00:25:30,009 --> 00:25:33,580
lexical analysis is taking those Toto

645
00:25:32,049 --> 00:25:36,999
cones and<font color="#E5E5E5"> basically converting it into</font>

646
00:25:33,580 --> 00:25:39,939
more readable speech and then data is

647
00:25:36,999 --> 00:25:41,649
then passed and there's also things

648
00:25:39,940 --> 00:25:43,779
which are taken<font color="#E5E5E5"> in to consider</font>

649
00:25:41,649 --> 00:25:45,599
considered there as well which<font color="#CCCCCC"> is</font>

650
00:25:43,779 --> 00:25:47,859
basically are things like you know

651
00:25:45,599 --> 00:25:49,899
characters allowed in variable names or

652
00:25:47,859 --> 00:25:52,178
are<font color="#CCCCCC"> there reserved words or their</font>

653
00:25:49,899 --> 00:25:54,820
decimal literals or string literals and

654
00:25:52,179 --> 00:25:56,619
<font color="#E5E5E5">so on and then ultimately you</font><font color="#CCCCCC"> get to the</font>

655
00:25:54,820 --> 00:25:58,119
semantics of each language so each

656
00:25:56,619 --> 00:25:59,978
language<font color="#E5E5E5"> comes with its own unique</font>

657
00:25:58,119 --> 00:26:03,249
<font color="#E5E5E5">properties and those things need to be</font>

658
00:25:59,979 --> 00:26:04,929
<font color="#E5E5E5">taken into</font><font color="#CCCCCC"> consideration but</font><font color="#E5E5E5"> then what</font>

659
00:26:03,249 --> 00:26:06,909
we really<font color="#E5E5E5"> care about is ignore all of</font>

660
00:26:04,929 --> 00:26:09,249
<font color="#E5E5E5">that is basically the abstract syntax</font>

661
00:26:06,909 --> 00:26:11,889
<font color="#E5E5E5">tree so this</font><font color="#CCCCCC"> is generally</font><font color="#E5E5E5"> what code</font>

662
00:26:09,249 --> 00:26:13,989
review tools or linters or style things

663
00:26:11,889 --> 00:26:17,019
stuff like styles basically used to

664
00:26:13,989 --> 00:26:21,940
<font color="#CCCCCC">basically and walk and identify issues</font>

665
00:26:17,019 --> 00:26:25,389
<font color="#E5E5E5">in so I'll briefly show you a example of</font>

666
00:26:21,940 --> 00:26:37,620
this so if we go to the ast<font color="#CCCCCC"> Explorer</font><font color="#E5E5E5"> see</font>

667
00:26:25,389 --> 00:26:40,270
<font color="#E5E5E5">where opens so</font>

668
00:26:37,620 --> 00:26:42,010
so we take a look<font color="#E5E5E5"> at this and we</font><font color="#CCCCCC"> just</font>

669
00:26:40,270 --> 00:26:44,110
decide<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> want to use</font><font color="#CCCCCC"> JavaScript</font>

670
00:26:42,010 --> 00:26:46,660
with the let's just<font color="#CCCCCC"> say babel</font><font color="#E5E5E5"> err slim</font>

671
00:26:44,110 --> 00:26:50,620
parser when you take a look at code and

672
00:26:46,660 --> 00:26:51,990
you do bar<font color="#CCCCCC"> X you know equal by</font><font color="#E5E5E5"> x equals</font>

673
00:26:50,620 --> 00:26:54,159
foo this alternate means there's a

674
00:26:51,990 --> 00:26:57,370
variable<font color="#CCCCCC"> declaration with a call</font>

675
00:26:54,160 --> 00:26:58,480
expression<font color="#E5E5E5"> so</font><font color="#CCCCCC"> an ast is our specific to</font>

676
00:26:57,370 --> 00:27:00,550
each language<font color="#E5E5E5"> so this doesn't really</font>

677
00:26:58,480 --> 00:27:03,010
<font color="#E5E5E5">change unless like new things</font><font color="#CCCCCC"> come into</font>

678
00:27:00,550 --> 00:27:04,149
<font color="#E5E5E5">the framework so if we take a look at</font>

679
00:27:03,010 --> 00:27:07,720
this side as you can<font color="#E5E5E5"> see we've got our</font>

680
00:27:04,150 --> 00:27:09,490
variable declaration<font color="#E5E5E5"> now of X and then</font>

681
00:27:07,720 --> 00:27:10,750
<font color="#CCCCCC">ultimately</font><font color="#E5E5E5"> further on down the chain</font>

682
00:27:09,490 --> 00:27:12,220
there's a call<font color="#CCCCCC"> expression and</font><font color="#E5E5E5"> the call</font>

683
00:27:10,750 --> 00:27:15,970
expression<font color="#E5E5E5"> is just something that has a</font>

684
00:27:12,220 --> 00:27:17,980
<font color="#E5E5E5">curly brace or so on so when you start</font>

685
00:27:15,970 --> 00:27:19,810
to be<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> read these trees and walk</font>

686
00:27:17,980 --> 00:27:22,270
the tree in sense you can<font color="#CCCCCC"> actually start</font>

687
00:27:19,810 --> 00:27:28,210
<font color="#E5E5E5">to like</font><font color="#CCCCCC"> look for security issues or in a</font>

688
00:27:22,270 --> 00:27:30,190
<font color="#E5E5E5">sense code quality issues okay so I'm</font>

689
00:27:28,210 --> 00:27:32,920
<font color="#CCCCCC">gonna go in a bit more detail about you</font>

690
00:27:30,190 --> 00:27:34,870
know using<font color="#E5E5E5"> n ast to basically pass codes</font>

691
00:27:32,920 --> 00:27:36,010
in a little bit but I would<font color="#E5E5E5"> highly</font>

692
00:27:34,870 --> 00:27:37,750
recommend taking a<font color="#CCCCCC"> look at</font><font color="#E5E5E5"> these</font>

693
00:27:36,010 --> 00:27:40,120
<font color="#CCCCCC">resources</font><font color="#E5E5E5"> if you're interested in this</font>

694
00:27:37,750 --> 00:27:41,320
<font color="#CCCCCC">area</font><font color="#E5E5E5"> the first video is very good and it</font>

695
00:27:40,120 --> 00:27:43,270
<font color="#CCCCCC">basically talks</font><font color="#E5E5E5"> about how to build a</font>

696
00:27:41,320 --> 00:27:44,800
programming language<font color="#CCCCCC"> from scratch the</font>

697
00:27:43,270 --> 00:27:46,120
interpreter<font color="#E5E5E5"> book is very</font><font color="#CCCCCC"> good about the</font>

698
00:27:44,800 --> 00:27:48,669
<font color="#CCCCCC">way your</font><font color="#E5E5E5"> interpreter and language</font>

699
00:27:46,120 --> 00:27:50,949
obviously<font color="#CCCCCC"> the ast Explorer is very good</font>

700
00:27:48,670 --> 00:27:53,440
a sense of<font color="#CCCCCC"> understanding how an</font><font color="#E5E5E5"> ast is</font>

701
00:27:50,950 --> 00:27:56,020
and how you<font color="#E5E5E5"> can pass it or things you</font>

702
00:27:53,440 --> 00:27:57,850
might require<font color="#E5E5E5"> and then there's also this</font>

703
00:27:56,020 --> 00:28:03,720
resource which basically visualizes a

704
00:27:57,850 --> 00:28:05,620
STS and<font color="#E5E5E5"> gives you a representation so</font>

705
00:28:03,720 --> 00:28:07,510
there's a lot of<font color="#E5E5E5"> challenges when it</font>

706
00:28:05,620 --> 00:28:10,300
<font color="#CCCCCC">comes to JavaScript static analysis and</font>

707
00:28:07,510 --> 00:28:14,860
the first one which is always

708
00:28:10,300 --> 00:28:17,379
<font color="#E5E5E5">interesting is that everything in</font>

709
00:28:14,860 --> 00:28:19,990
<font color="#CCCCCC">JavaScript is an object</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you know</font>

710
00:28:17,380 --> 00:28:21,730
because<font color="#E5E5E5"> of this and it's a prototypical</font>

711
00:28:19,990 --> 00:28:22,870
language in basically<font color="#E5E5E5"> everything it's a</font>

712
00:28:21,730 --> 00:28:26,820
dynamic<font color="#E5E5E5"> language and everything</font>

713
00:28:22,870 --> 00:28:30,310
generally is processed at runtime<font color="#E5E5E5"> so</font>

714
00:28:26,820 --> 00:28:32,260
every<font color="#CCCCCC"> javascript object has a prototype</font>

715
00:28:30,310 --> 00:28:34,570
object<font color="#E5E5E5"> which can be overwritten so if</font>

716
00:28:32,260 --> 00:28:35,560
you're trying<font color="#CCCCCC"> to do static analysis</font><font color="#E5E5E5"> you</font>

717
00:28:34,570 --> 00:28:37,060
<font color="#E5E5E5">actually have to keep track</font><font color="#CCCCCC"> of these</font>

718
00:28:35,560 --> 00:28:39,070
changes so if we take a look<font color="#E5E5E5"> at this</font>

719
00:28:37,060 --> 00:28:40,240
<font color="#E5E5E5">example we</font><font color="#CCCCCC"> have a person and it</font>

720
00:28:39,070 --> 00:28:43,750
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> takes in the name and it</font>

721
00:28:40,240 --> 00:28:45,790
assigns<font color="#CCCCCC"> that name to a variable then</font><font color="#E5E5E5"> I</font>

722
00:28:43,750 --> 00:28:48,250
create a<font color="#CCCCCC"> new user really a new person</font>

723
00:28:45,790 --> 00:28:50,440
called Luis<font color="#E5E5E5"> and I call it person</font><font color="#CCCCCC"> 1 but</font>

724
00:28:48,250 --> 00:28:52,990
then overwrite the property

725
00:28:50,440 --> 00:28:54,909
of<font color="#CCCCCC"> two straight and now this two string</font>

726
00:28:52,990 --> 00:28:57,009
is basically just<font color="#CCCCCC"> returning</font><font color="#E5E5E5"> the name so</font>

727
00:28:54,909 --> 00:28:58,629
it's actually doing something different

728
00:28:57,009 --> 00:29:00,570
<font color="#CCCCCC">than</font><font color="#E5E5E5"> what it was intended to do</font><font color="#CCCCCC"> so it's</font>

729
00:28:58,629 --> 00:29:03,549
returned<font color="#E5E5E5"> the name rather than just</font>

730
00:29:00,570 --> 00:29:05,860
returning<font color="#E5E5E5"> while we</font><font color="#CCCCCC"> possibly would still</font>

731
00:29:03,549 --> 00:29:10,200
return<font color="#E5E5E5"> the</font><font color="#CCCCCC"> function but you</font><font color="#E5E5E5"> could</font>

732
00:29:05,860 --> 00:29:12,758
<font color="#E5E5E5">overwrite those properties then</font>

733
00:29:10,200 --> 00:29:16,240
variables<font color="#E5E5E5"> can</font><font color="#CCCCCC"> JavaScript could also</font>

734
00:29:12,759 --> 00:29:17,919
contain different<font color="#CCCCCC"> types so you know</font><font color="#E5E5E5"> most</font>

735
00:29:16,240 --> 00:29:19,570
languages<font color="#E5E5E5"> like Java or like sounds</font><font color="#CCCCCC"> two</font>

736
00:29:17,919 --> 00:29:21,639
more languages<font color="#E5E5E5"> you</font><font color="#CCCCCC"> normally define</font>

737
00:29:19,570 --> 00:29:23,559
things<font color="#E5E5E5"> like string or an int and so on</font>

738
00:29:21,639 --> 00:29:25,178
but everything<font color="#E5E5E5"> in JavaScript like a</font>

739
00:29:23,559 --> 00:29:27,399
variable<font color="#CCCCCC"> can be of types</font><font color="#E5E5E5"> for its string</font>

740
00:29:25,179 --> 00:29:30,129
or I'll type<font color="#CCCCCC"> thereof an integer or</font>

741
00:29:27,399 --> 00:29:31,899
numbers in this sense so what this is

742
00:29:30,129 --> 00:29:33,908
doing<font color="#CCCCCC"> is basically</font><font color="#E5E5E5"> one we're making</font><font color="#CCCCCC"> sure</font>

743
00:29:31,899 --> 00:29:35,529
something<font color="#E5E5E5"> is a billion to true and if</font>

744
00:29:33,909 --> 00:29:37,720
that<font color="#E5E5E5"> boolean is true then we reciting</font>

745
00:29:35,529 --> 00:29:39,639
this literal string to the variable else

746
00:29:37,720 --> 00:29:41,620
then you know we're signing the variable

747
00:29:39,639 --> 00:29:43,299
to 69<font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> probably the only time</font>

748
00:29:41,620 --> 00:29:49,570
<font color="#E5E5E5">I'll ever get like a joke</font><font color="#CCCCCC"> without any so</font>

749
00:29:43,299 --> 00:29:51,908
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> on so and more wonderful</font><font color="#CCCCCC"> things</font>

750
00:29:49,570 --> 00:29:54,610
<font color="#CCCCCC">about JavaScript is though as type</font>

751
00:29:51,909 --> 00:29:56,169
coercion<font color="#E5E5E5"> so normally when you're you</font>

752
00:29:54,610 --> 00:29:57,639
know<font color="#E5E5E5"> making sure something is up</font><font color="#CCCCCC"> of</font>

753
00:29:56,169 --> 00:29:59,679
<font color="#E5E5E5">something you are doing like a double</font>

754
00:29:57,639 --> 00:30:01,600
equals or a triple equals like an exact

755
00:29:59,679 --> 00:30:06,070
match or<font color="#E5E5E5"> and they have that concept of</font>

756
00:30:01,600 --> 00:30:08,259
loosely versus strictly typed<font color="#E5E5E5"> so what</font>

757
00:30:06,070 --> 00:30:11,649
basically<font color="#CCCCCC"> type coercion is is converting</font>

758
00:30:08,259 --> 00:30:13,059
an object to a different type and<font color="#E5E5E5"> it's</font>

759
00:30:11,649 --> 00:30:15,668
<font color="#E5E5E5">checking to see if the</font><font color="#CCCCCC"> value inside</font>

760
00:30:13,059 --> 00:30:17,289
<font color="#E5E5E5">matches so when we look at like force</font>

761
00:30:15,669 --> 00:30:18,909
<font color="#E5E5E5">equals</font><font color="#CCCCCC"> to double equals to</font><font color="#E5E5E5"> one</font>

762
00:30:17,289 --> 00:30:22,029
it's false<font color="#CCCCCC"> but</font><font color="#E5E5E5"> then if you</font><font color="#CCCCCC"> look at</font><font color="#E5E5E5"> false</font>

763
00:30:18,909 --> 00:30:24,009
double equals to<font color="#CCCCCC"> zero it's true which is</font>

764
00:30:22,029 --> 00:30:26,139
a bit<font color="#E5E5E5"> weird</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see now obviously if</font>

765
00:30:24,009 --> 00:30:27,639
you're doing<font color="#E5E5E5"> it like strictly it's then</font>

766
00:30:26,139 --> 00:30:29,500
actually only<font color="#E5E5E5"> like looking to see if</font>

767
00:30:27,639 --> 00:30:31,000
<font color="#E5E5E5">this would actually be false</font><font color="#CCCCCC"> so this is</font>

768
00:30:29,500 --> 00:30:32,950
also<font color="#E5E5E5"> something needs to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> taken into</font>

769
00:30:31,000 --> 00:30:35,169
<font color="#CCCCCC">consideration and there's actually now</font>

770
00:30:32,950 --> 00:30:37,659
with the introduction<font color="#CCCCCC"> of nodejs there's</font>

771
00:30:35,169 --> 00:30:40,450
been a lot of security<font color="#CCCCCC"> issues around</font>

772
00:30:37,659 --> 00:30:42,610
this<font color="#CCCCCC"> where about you might equal to null</font>

773
00:30:40,450 --> 00:30:43,990
in some consensus<font color="#E5E5E5"> because of type</font>

774
00:30:42,610 --> 00:30:45,639
coercion<font color="#CCCCCC"> yeah and</font><font color="#E5E5E5"> that there was an</font>

775
00:30:43,990 --> 00:30:48,190
issue with<font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of socket IO which is</font>

776
00:30:45,639 --> 00:30:50,428
<font color="#E5E5E5">like</font><font color="#CCCCCC"> due to</font><font color="#E5E5E5"> WebSockets and it was a</font>

777
00:30:48,190 --> 00:30:53,620
<font color="#E5E5E5">broken implementation of their</font>

778
00:30:50,429 --> 00:30:55,179
certificates for SSL so it was<font color="#CCCCCC"> just</font>

779
00:30:53,620 --> 00:30:56,709
allowing<font color="#CCCCCC"> anything because it was no one</font>

780
00:30:55,179 --> 00:30:59,789
is<font color="#E5E5E5"> that yep fine but it would have</font>

781
00:30:56,710 --> 00:30:59,789
didn't actually fixed with that

782
00:31:00,750 --> 00:31:04,269
<font color="#CCCCCC">javascript even has higher-order</font>

783
00:31:02,559 --> 00:31:06,489
<font color="#E5E5E5">functions so you need to kick</font>

784
00:31:04,269 --> 00:31:08,619
take this into<font color="#CCCCCC"> consideration</font><font color="#E5E5E5"> where one</font>

785
00:31:06,489 --> 00:31:11,049
function can call<font color="#E5E5E5"> it</font><font color="#CCCCCC"> never functions so</font>

786
00:31:08,619 --> 00:31:13,418
in this instance we<font color="#E5E5E5"> have basically a</font>

787
00:31:11,049 --> 00:31:15,099
person which takes the value<font color="#E5E5E5"> and the</font>

788
00:31:13,419 --> 00:31:17,019
value<font color="#E5E5E5"> is set to</font><font color="#CCCCCC"> value or you can call</font>

789
00:31:15,099 --> 00:31:18,458
<font color="#E5E5E5">the get and set function which calls and</font>

790
00:31:17,019 --> 00:31:20,109
never function which one<font color="#CCCCCC"> I'll just</font>

791
00:31:18,459 --> 00:31:22,029
<font color="#E5E5E5">return the value or one which will set</font>

792
00:31:20,109 --> 00:31:24,009
the<font color="#CCCCCC"> value so in this case you know</font>

793
00:31:22,029 --> 00:31:26,200
recreate two people one which is<font color="#E5E5E5"> Luis in</font>

794
00:31:24,009 --> 00:31:27,609
69 the second one<font color="#E5E5E5"> where you know getting</font>

795
00:31:26,200 --> 00:31:29,229
<font color="#E5E5E5">the first output</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> in the second</font>

796
00:31:27,609 --> 00:31:30,908
output<font color="#E5E5E5"> and then we're changing that</font>

797
00:31:29,229 --> 00:31:33,279
value<font color="#CCCCCC"> again to Jason and getting you</font>

798
00:31:30,909 --> 00:31:34,570
<font color="#E5E5E5">know the output again</font><font color="#CCCCCC"> for Jason</font><font color="#E5E5E5"> and</font>

799
00:31:33,279 --> 00:31:36,309
<font color="#E5E5E5">these are also things</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> when you're</font>

800
00:31:34,570 --> 00:31:39,718
<font color="#E5E5E5">looking at codes</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> can become</font><font color="#CCCCCC"> quite</font>

801
00:31:36,309 --> 00:31:42,729
complex<font color="#E5E5E5"> from a code analysis</font><font color="#CCCCCC"> perspective</font>

802
00:31:39,719 --> 00:31:46,599
and<font color="#E5E5E5"> JavaScript by default is quite</font>

803
00:31:42,729 --> 00:31:48,489
forgiving there's you know<font color="#E5E5E5"> basically you</font>

804
00:31:46,599 --> 00:31:51,099
<font color="#CCCCCC">can</font><font color="#E5E5E5"> have broken</font><font color="#CCCCCC"> codes you</font><font color="#E5E5E5"> can have</font><font color="#CCCCCC"> var</font>

805
00:31:48,489 --> 00:31:53,139
equals x and never<font color="#CCCCCC"> actually use it or</font>

806
00:31:51,099 --> 00:31:55,059
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> have x equals y as long as it's</font>

807
00:31:53,139 --> 00:31:58,718
not<font color="#E5E5E5"> a strict strict mode then it's</font>

808
00:31:55,059 --> 00:32:00,759
perfectly fine<font color="#CCCCCC"> so what actually</font>

809
00:31:58,719 --> 00:32:02,499
developers introduced was this concept

810
00:32:00,759 --> 00:32:04,809
<font color="#E5E5E5">of you know</font><font color="#CCCCCC"> strongly</font><font color="#E5E5E5"> typed</font><font color="#CCCCCC"> JavaScript</font>

811
00:32:02,499 --> 00:32:06,909
<font color="#E5E5E5">and you</font><font color="#CCCCCC"> know strongly typed JavaScript</font>

812
00:32:04,809 --> 00:32:09,519
equals<font color="#CCCCCC"> less books and it's true</font><font color="#E5E5E5"> so</font>

813
00:32:06,909 --> 00:32:11,709
rather than just having<font color="#E5E5E5"> something of a</font>

814
00:32:09,519 --> 00:32:14,200
type which<font color="#E5E5E5"> could be an integer or it</font>

815
00:32:11,709 --> 00:32:16,179
could be a string you<font color="#E5E5E5"> actually can</font>

816
00:32:14,200 --> 00:32:18,219
create interfaces<font color="#CCCCCC"> where you can</font><font color="#E5E5E5"> define</font>

817
00:32:16,179 --> 00:32:19,749
the name of string the age of number and

818
00:32:18,219 --> 00:32:21,519
if that person's<font color="#E5E5E5"> are life to a boolean</font>

819
00:32:19,749 --> 00:32:23,379
<font color="#E5E5E5">and then you can assign</font><font color="#CCCCCC"> that and set it</font>

820
00:32:21,519 --> 00:32:25,389
here<font color="#E5E5E5"> and if this was</font><font color="#CCCCCC"> actually trying</font><font color="#E5E5E5"> to</font>

821
00:32:23,379 --> 00:32:26,619
<font color="#E5E5E5">be an integer</font><font color="#CCCCCC"> it would complain and say</font>

822
00:32:25,389 --> 00:32:28,359
<font color="#CCCCCC">actually no that's wrong</font>

823
00:32:26,619 --> 00:32:32,908
and it<font color="#E5E5E5"> would complain and it stops a lot</font>

824
00:32:28,359 --> 00:32:36,519
<font color="#CCCCCC">of those issues</font><font color="#E5E5E5"> happening by default and</font>

825
00:32:32,909 --> 00:32:38,320
you know<font color="#CCCCCC"> JavaScript is universal in many</font>

826
00:32:36,519 --> 00:32:41,589
ways it's in Internet of Things it's on

827
00:32:38,320 --> 00:32:43,089
the server<font color="#E5E5E5"> it's on the browser and you</font>

828
00:32:41,589 --> 00:32:45,009
know a lot of people want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to</font>

829
00:32:43,089 --> 00:32:47,499
create you<font color="#E5E5E5"> know unique you know</font>

830
00:32:45,009 --> 00:32:49,570
solutions to problems and they kind of

831
00:32:47,499 --> 00:32:51,399
have to sometimes convert it into

832
00:32:49,570 --> 00:32:54,009
JavaScript for it to be adopted<font color="#E5E5E5"> and used</font>

833
00:32:51,399 --> 00:32:56,049
so there's<font color="#E5E5E5"> things like you know GWT for</font>

834
00:32:54,009 --> 00:32:58,329
<font color="#E5E5E5">Java the typescript sorry java to java</font>

835
00:32:56,049 --> 00:33:00,609
javascript<font color="#CCCCCC"> typescript which</font><font color="#E5E5E5"> is like type</font>

836
00:32:58,329 --> 00:33:02,769
least strongly<font color="#E5E5E5"> typed</font><font color="#CCCCCC"> javascript to</font>

837
00:33:00,609 --> 00:33:04,599
<font color="#CCCCCC">javascript there's also things like pi</font>

838
00:33:02,769 --> 00:33:06,639
scripts to price it into<font color="#CCCCCC"> javascript and</font>

839
00:33:04,599 --> 00:33:11,799
<font color="#CCCCCC">fun scripts F sharp to JavaScript and</font>

840
00:33:06,639 --> 00:33:13,478
<font color="#E5E5E5">there's more there's a lot more and what</font>

841
00:33:11,799 --> 00:33:15,789
we're trying<font color="#CCCCCC"> to starting to see is that</font>

842
00:33:13,479 --> 00:33:17,440
and there's quite low support<font color="#E5E5E5"> when it</font>

843
00:33:15,789 --> 00:33:18,820
comes to automated code<font color="#CCCCCC"> scanning tool</font>

844
00:33:17,440 --> 00:33:24,519
to<font color="#E5E5E5"> actually support these languages</font>

845
00:33:18,820 --> 00:33:25,928
because there's really no need<font color="#CCCCCC"> to sense</font>

846
00:33:24,519 --> 00:33:27,789
because you're<font color="#CCCCCC"> basically happen to</font>

847
00:33:25,929 --> 00:33:30,070
transpile that code to JavaScript for<font color="#E5E5E5"> it</font>

848
00:33:27,789 --> 00:33:33,669
to be interpreted<font color="#E5E5E5"> anyway in the browser</font>

849
00:33:30,070 --> 00:33:35,649
or on<font color="#E5E5E5"> the server so I in a real world</font>

850
00:33:33,669 --> 00:33:36,909
scenario<font color="#CCCCCC"> security issues can still be</font>

851
00:33:35,649 --> 00:33:38,590
found when you're writing<font color="#E5E5E5"> in these</font>

852
00:33:36,909 --> 00:33:40,539
<font color="#E5E5E5">languages but you</font><font color="#CCCCCC"> would have to</font><font color="#E5E5E5"> identify</font>

853
00:33:38,590 --> 00:33:42,399
<font color="#E5E5E5">it in</font><font color="#CCCCCC"> the JavaScript code</font><font color="#E5E5E5"> and then</font>

854
00:33:40,539 --> 00:33:46,990
basically map it back<font color="#CCCCCC"> to that</font><font color="#E5E5E5"> strongly</font>

855
00:33:42,399 --> 00:33:49,389
typed language and sorry<font color="#E5E5E5"> new features</font>

856
00:33:46,990 --> 00:33:51,220
such as es6 the eight seven seven<font color="#E5E5E5"> eight</font>

857
00:33:49,389 --> 00:33:52,899
you<font color="#E5E5E5"> know also require updates to the</font>

858
00:33:51,220 --> 00:33:56,500
static analysis process so<font color="#E5E5E5"> for things</font>

859
00:33:52,899 --> 00:33:57,639
like<font color="#E5E5E5"> arrow functions a previous tool</font>

860
00:33:56,500 --> 00:33:59,740
<font color="#CCCCCC">wouldn't have known that that might have</font>

861
00:33:57,639 --> 00:34:01,959
been<font color="#E5E5E5"> a</font><font color="#CCCCCC"> function just sees it as an arrow</font>

862
00:33:59,740 --> 00:34:07,450
<font color="#CCCCCC">so these things need to be</font><font color="#E5E5E5"> taken into</font>

863
00:34:01,960 --> 00:34:09,339
<font color="#E5E5E5">consideration</font><font color="#CCCCCC"> so now I'm going</font><font color="#E5E5E5"> to talk</font>

864
00:34:07,450 --> 00:34:11,980
<font color="#CCCCCC">about a concept of</font><font color="#E5E5E5"> dataflow analysis</font><font color="#CCCCCC"> so</font>

865
00:34:09,339 --> 00:34:14,259
it's following<font color="#E5E5E5"> the data through source</font>

866
00:34:11,980 --> 00:34:19,060
to sink and see if at any point where

867
00:34:14,260 --> 00:34:21,790
that<font color="#E5E5E5"> is tainted so hopefully everyone</font>

868
00:34:19,060 --> 00:34:23,770
will<font color="#E5E5E5"> be able to see my code and it's</font>

869
00:34:21,790 --> 00:34:32,290
going to<font color="#E5E5E5"> be interesting</font><font color="#CCCCCC"> to try</font><font color="#E5E5E5"> and do</font>

870
00:34:23,770 --> 00:34:34,449
this<font color="#E5E5E5"> and explain it from this side right</font>

871
00:34:32,290 --> 00:34:38,710
so<font color="#CCCCCC"> hopefully everyone can</font><font color="#E5E5E5"> see this but</font>

872
00:34:34,449 --> 00:34:40,239
we have a simple<font color="#E5E5E5"> nodejs application that</font>

873
00:34:38,710 --> 00:34:42,099
is basically<font color="#E5E5E5"> doing the very similar</font>

874
00:34:40,239 --> 00:34:45,459
thing that we saw in the example today

875
00:34:42,099 --> 00:34:47,260
and as you<font color="#CCCCCC"> can see we've got a basically</font>

876
00:34:45,460 --> 00:34:49,530
<font color="#E5E5E5">a gap function that takes in check logs</font>

877
00:34:47,260 --> 00:34:52,000
<font color="#E5E5E5">and we have the request and the response</font>

878
00:34:49,530 --> 00:34:53,619
so when you're doing<font color="#CCCCCC"> dataflow analysis</font>

879
00:34:52,000 --> 00:34:55,929
you<font color="#E5E5E5"> would want to look at</font><font color="#CCCCCC"> C like</font><font color="#E5E5E5"> okay</font>

880
00:34:53,619 --> 00:34:57,609
<font color="#E5E5E5">when data comes in is when</font><font color="#CCCCCC"> we copy</font><font color="#E5E5E5"> from</font>

881
00:34:55,929 --> 00:34:59,920
<font color="#E5E5E5">the request and we want to see if any</font>

882
00:34:57,609 --> 00:35:01,210
data<font color="#E5E5E5"> then this taken from user input for</font>

883
00:34:59,920 --> 00:35:04,359
<font color="#CCCCCC">example or a downstream and upstream</font>

884
00:35:01,210 --> 00:35:06,910
system<font color="#E5E5E5"> and then we want to see that okay</font>

885
00:35:04,359 --> 00:35:09,220
<font color="#CCCCCC">that</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> requests query of eval is</font>

886
00:35:06,910 --> 00:35:11,410
there the<font color="#CCCCCC"> sets of</font><font color="#E5E5E5"> user</font><font color="#CCCCCC"> input and then</font>

887
00:35:09,220 --> 00:35:13,149
that user input is<font color="#E5E5E5"> only valuated so as</font>

888
00:35:11,410 --> 00:35:15,640
you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see here this is</font><font color="#E5E5E5"> going from</font><font color="#CCCCCC"> a</font>

889
00:35:13,150 --> 00:35:17,109
source and<font color="#CCCCCC"> interest sink and ultimately</font>

890
00:35:15,640 --> 00:35:19,540
all this is<font color="#E5E5E5"> doing is exactly the same</font>

891
00:35:17,109 --> 00:35:24,040
<font color="#E5E5E5">concept as</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> but basically</font><font color="#CCCCCC"> calling</font>

892
00:35:19,540 --> 00:35:27,670
get logs<font color="#E5E5E5"> on the file</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> so if we see</font>

893
00:35:24,040 --> 00:35:31,079
this in<font color="#E5E5E5"> practice if I can get my browser</font>

894
00:35:27,670 --> 00:35:31,079
<font color="#E5E5E5">to pull over</font>

895
00:35:33,849 --> 00:35:39,010
yeah<font color="#E5E5E5"> so we have</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> limits all it's</font>

896
00:35:36,500 --> 00:35:41,569
doing is called chat logs<font color="#E5E5E5"> so and</font>

897
00:35:39,010 --> 00:35:43,819
<font color="#E5E5E5">obviously again because we know like the</font>

898
00:35:41,569 --> 00:35:47,270
source falls into a sink<font color="#CCCCCC"> what we can</font>

899
00:35:43,819 --> 00:35:49,700
<font color="#CCCCCC">actually do is basically do the same</font>

900
00:35:47,270 --> 00:35:52,009
<font color="#CCCCCC">thing we did</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> where now I'm trying</font>

901
00:35:49,700 --> 00:35:52,819
<font color="#E5E5E5">to find a secret value</font><font color="#CCCCCC"> of a</font><font color="#E5E5E5"> cert on my</font>

902
00:35:52,010 --> 00:35:59,059
application

903
00:35:52,819 --> 00:36:00,558
we're sorry<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean we're doing exactly</font>

904
00:35:59,059 --> 00:36:02,329
<font color="#CCCCCC">the same thing we're</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> trained a</font>

905
00:36:00,559 --> 00:36:04,160
variable called var in a file system

906
00:36:02,329 --> 00:36:06,700
require the file system then we're

907
00:36:04,160 --> 00:36:08,480
basically<font color="#E5E5E5"> creating</font><font color="#CCCCCC"> a path to that</font>

908
00:36:06,700 --> 00:36:12,788
attribute you want<font color="#CCCCCC"> to pull</font><font color="#E5E5E5"> off the</font>

909
00:36:08,480 --> 00:36:12,789
server<font color="#E5E5E5"> and then it's occurring it out</font>

910
00:36:13,450 --> 00:36:20,598
could have some<font color="#E5E5E5"> O'War if that's</font><font color="#CCCCCC"> okay</font>

911
00:36:16,750 --> 00:36:21,799
<font color="#E5E5E5">it's like I will see the actual secure</font>

912
00:36:20,599 --> 00:36:23,329
way<font color="#E5E5E5"> of doing things when you're</font>

913
00:36:21,799 --> 00:36:26,240
reviewing<font color="#E5E5E5"> codes is to</font><font color="#CCCCCC"> look at the</font>

914
00:36:23,329 --> 00:36:28,579
<font color="#CCCCCC">requests</font><font color="#E5E5E5"> in the response and basically</font>

915
00:36:26,240 --> 00:36:30,890
rather them directly in adding that

916
00:36:28,579 --> 00:36:31,760
information into<font color="#E5E5E5"> an eval function is to</font>

917
00:36:30,890 --> 00:36:34,700
basically<font color="#E5E5E5"> just call those</font><font color="#CCCCCC"> functions</font>

918
00:36:31,760 --> 00:36:36,650
<font color="#E5E5E5">directly so in this sense we're checking</font>

919
00:36:34,700 --> 00:36:38,270
that<font color="#E5E5E5"> user input matches something that</font>

920
00:36:36,650 --> 00:36:41,630
we want<font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> go away in access</font>

921
00:36:38,270 --> 00:36:46,970
and if it<font color="#E5E5E5"> doesn't match that then it</font>

922
00:36:41,630 --> 00:36:48,170
basically<font color="#E5E5E5"> says we have a problem</font><font color="#CCCCCC"> so now</font>

923
00:36:46,970 --> 00:36:52,430
I'm<font color="#E5E5E5"> going to show</font><font color="#CCCCCC"> you another</font><font color="#E5E5E5"> example</font>

924
00:36:48,170 --> 00:36:58,130
<font color="#E5E5E5">which means I stay here now this</font><font color="#CCCCCC"> is a</font>

925
00:36:52,430 --> 00:37:02,839
JavaScript<font color="#CCCCCC"> application yes and we have a</font>

926
00:36:58,130 --> 00:37:06,020
very similar concept<font color="#E5E5E5"> where JavaScript</font>

927
00:37:02,839 --> 00:37:07,849
<font color="#E5E5E5">has this idea of scopes and when scopes</font>

928
00:37:06,020 --> 00:37:11,509
are defined<font color="#E5E5E5"> they're things that</font><font color="#CCCCCC"> are</font>

929
00:37:07,849 --> 00:37:12,890
accessible<font color="#E5E5E5"> in the view so if we take a</font>

930
00:37:11,510 --> 00:37:15,819
look at<font color="#E5E5E5"> this application all it's really</font>

931
00:37:12,890 --> 00:37:18,230
doing is defining an<font color="#CCCCCC"> object of friends</font>

932
00:37:15,819 --> 00:37:22,069
<font color="#E5E5E5">deciding those names and phone numbers</font>

933
00:37:18,230 --> 00:37:25,069
to properties<font color="#E5E5E5"> and then in the client</font>

934
00:37:22,069 --> 00:37:26,990
we're<font color="#E5E5E5"> calling an NG repeat function of</font>

935
00:37:25,069 --> 00:37:29,599
<font color="#E5E5E5">those friends</font><font color="#CCCCCC"> and we're ordering by a</font>

936
00:37:26,990 --> 00:37:31,450
certain<font color="#E5E5E5"> power you now when you start to</font>

937
00:37:29,599 --> 00:37:34,279
look at these<font color="#E5E5E5"> frameworks and understand</font>

938
00:37:31,450 --> 00:37:36,259
<font color="#E5E5E5">areas</font><font color="#CCCCCC"> of concern like in this sense</font>

939
00:37:34,279 --> 00:37:38,779
<font color="#E5E5E5">whenever you see a pipe operator in an</font>

940
00:37:36,260 --> 00:37:41,809
NG repeat<font color="#E5E5E5"> you can see that the order</font><font color="#CCCCCC"> by</font>

941
00:37:38,779 --> 00:37:44,030
will actually be evaluating<font color="#E5E5E5"> those</font>

942
00:37:41,809 --> 00:37:46,220
expressions so if<font color="#E5E5E5"> user input from</font>

943
00:37:44,030 --> 00:37:48,350
this user input from an interested

944
00:37:46,220 --> 00:37:51,770
source<font color="#CCCCCC"> falls</font><font color="#E5E5E5"> into this order by function</font>

945
00:37:48,350 --> 00:37:53,270
here then it's a<font color="#E5E5E5"> problem so if we take a</font>

946
00:37:51,770 --> 00:37:55,040
look at what this<font color="#E5E5E5"> is actually doing</font><font color="#CCCCCC"> it's</font>

947
00:37:53,270 --> 00:37:57,560
assigning order by by default to be

948
00:37:55,040 --> 00:37:59,570
phone then it's calling if the window

949
00:37:57,560 --> 00:38:02,360
location<font color="#E5E5E5"> search exists which in this</font>

950
00:37:59,570 --> 00:38:03,860
case if you're<font color="#E5E5E5"> including a window it's</font>

951
00:38:02,360 --> 00:38:05,990
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> exist and then all it's doing</font>

952
00:38:03,860 --> 00:38:08,510
is splitting<font color="#E5E5E5"> the value and it's taking</font>

953
00:38:05,990 --> 00:38:10,609
the first attribute<font color="#E5E5E5"> well this</font><font color="#CCCCCC"> well the</font>

954
00:38:08,510 --> 00:38:13,310
second attribute<font color="#CCCCCC"> so it would be taking</font>

955
00:38:10,610 --> 00:38:14,570
<font color="#E5E5E5">whatever the value was and now is so</font><font color="#CCCCCC"> and</font>

956
00:38:13,310 --> 00:38:17,210
as<font color="#E5E5E5"> you can see</font><font color="#CCCCCC"> this is coming from user</font>

957
00:38:14,570 --> 00:38:19,250
input because the window<font color="#E5E5E5"> location and</font>

958
00:38:17,210 --> 00:38:20,690
we're splitting<font color="#E5E5E5"> it by a wet user input</font>

959
00:38:19,250 --> 00:38:22,340
<font color="#E5E5E5">it's not going to be assigned to the</font>

960
00:38:20,690 --> 00:38:24,380
order by<font color="#CCCCCC"> which then falls</font><font color="#E5E5E5"> into a source</font>

961
00:38:22,340 --> 00:38:27,260
of<font color="#E5E5E5"> taint when it falls into the order by</font>

962
00:38:24,380 --> 00:38:36,050
filter so if you<font color="#E5E5E5"> take a look at this in</font>

963
00:38:27,260 --> 00:38:38,360
practice<font color="#E5E5E5"> okay so you know first we could</font>

964
00:38:36,050 --> 00:38:39,890
order<font color="#E5E5E5"> by a name like phone</font><font color="#CCCCCC"> and what it</font>

965
00:38:38,360 --> 00:38:43,850
<font color="#CCCCCC">normally does so you can also you know</font>

966
00:38:39,890 --> 00:38:47,870
order by age<font color="#CCCCCC"> and we</font><font color="#E5E5E5"> can also order by no</font>

967
00:38:43,850 --> 00:38:54,319
number and<font color="#CCCCCC"> it's nice goods</font><font color="#E5E5E5"> but then you</font>

968
00:38:47,870 --> 00:38:56,480
know it comes a<font color="#E5E5E5"> problem if you then</font><font color="#CCCCCC"> use</font>

969
00:38:54,320 --> 00:38:59,810
a<font color="#E5E5E5"> JavaScript evaluation as a call in the</font>

970
00:38:56,480 --> 00:39:06,530
constructor of the function can<font color="#E5E5E5"> oh I did</font>

971
00:38:59,810 --> 00:39:08,630
it<font color="#E5E5E5"> on my other side we then call a</font>

972
00:39:06,530 --> 00:39:10,280
constructor<font color="#CCCCCC"> with function constructor</font>

973
00:39:08,630 --> 00:39:12,350
and then call alert<font color="#CCCCCC"> it's going to</font>

974
00:39:10,280 --> 00:39:13,730
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> be allowed to evaluate into</font>

975
00:39:12,350 --> 00:39:15,440
JavaScript so<font color="#CCCCCC"> that might seem a bit</font>

976
00:39:13,730 --> 00:39:17,300
<font color="#CCCCCC">confusing but all we're really doing is</font>

977
00:39:15,440 --> 00:39:21,080
following<font color="#E5E5E5"> source and sink into taint</font><font color="#CCCCCC"> and</font>

978
00:39:17,300 --> 00:39:23,060
then identifying the security issue<font color="#E5E5E5"> so</font>

979
00:39:21,080 --> 00:39:25,120
if<font color="#E5E5E5"> we go back</font><font color="#CCCCCC"> to the curb you</font><font color="#E5E5E5"> can take a</font>

980
00:39:23,060 --> 00:39:27,380
look<font color="#E5E5E5"> at a secure example of this and</font>

981
00:39:25,120 --> 00:39:29,240
it's doing the pursuing<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> the</font>

982
00:39:27,380 --> 00:39:30,860
exactly the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> thing taking source but</font>

983
00:39:29,240 --> 00:39:32,660
<font color="#CCCCCC">it's first validating that through</font>

984
00:39:30,860 --> 00:39:34,460
strict<font color="#E5E5E5"> input to make sure that it</font>

985
00:39:32,660 --> 00:39:36,470
matches the properties<font color="#CCCCCC"> of friends so</font>

986
00:39:34,460 --> 00:39:39,470
basically if the friends are not been

987
00:39:36,470 --> 00:39:41,359
defined and then it's<font color="#E5E5E5"> looking to see if</font>

988
00:39:39,470 --> 00:39:43,549
it has<font color="#E5E5E5"> the property</font><font color="#CCCCCC"> of the friends</font>

989
00:39:41,360 --> 00:39:48,380
inside order by so if it<font color="#E5E5E5"> doesn't match</font>

990
00:39:43,550 --> 00:39:50,210
<font color="#E5E5E5">age name or phone number</font><font color="#CCCCCC"> then ignore it</font>

991
00:39:48,380 --> 00:39:52,280
so if we try<font color="#CCCCCC"> to then execute the code</font>

992
00:39:50,210 --> 00:39:53,930
<font color="#CCCCCC">would match to work anymore so</font><font color="#E5E5E5"> you would</font>

993
00:39:52,280 --> 00:39:55,640
<font color="#CCCCCC">want to be able to try and traverse the</font>

994
00:39:53,930 --> 00:39:57,740
application in this<font color="#E5E5E5"> way to see if these</font>

995
00:39:55,640 --> 00:39:59,710
things<font color="#E5E5E5"> are actually a</font><font color="#CCCCCC"> problem</font>

996
00:39:57,740 --> 00:40:01,819
and I don't<font color="#E5E5E5"> know if there's any</font>

997
00:39:59,710 --> 00:40:03,320
commercial tool currently that's<font color="#CCCCCC"> finding</font>

998
00:40:01,820 --> 00:40:08,150
these kind of problems<font color="#CCCCCC"> that you know</font>

999
00:40:03,320 --> 00:40:10,280
fortified<font color="#E5E5E5"> enough supports now support</font>

1000
00:40:08,150 --> 00:40:11,990
angularjs but it depends how smart

1001
00:40:10,280 --> 00:40:19,030
overalls are which probably are very

1002
00:40:11,990 --> 00:40:21,319
<font color="#E5E5E5">smart so</font><font color="#CCCCCC"> there's also like a concept of</font>

1003
00:40:19,030 --> 00:40:22,310
there may be support<font color="#CCCCCC"> for it but it</font>

1004
00:40:21,320 --> 00:40:26,330
doesn't<font color="#CCCCCC"> necessarily mean they actually</font>

1005
00:40:22,310 --> 00:40:28,640
<font color="#E5E5E5">have security rules so and maybe it</font>

1006
00:40:26,330 --> 00:40:31,819
<font color="#CCCCCC">maybe it's code quality</font><font color="#E5E5E5"> maybe it's in</font>

1007
00:40:28,640 --> 00:40:36,259
the sense of security<font color="#E5E5E5"> as well but maybe</font>

1008
00:40:31,820 --> 00:40:38,270
less of<font color="#E5E5E5"> a concern</font><font color="#CCCCCC"> so I do have a small</font>

1009
00:40:36,260 --> 00:40:41,930
disclaimer<font color="#CCCCCC"> I do work</font><font color="#E5E5E5"> for one of these</font>

1010
00:40:38,270 --> 00:40:43,460
<font color="#E5E5E5">companies but I'm going</font><font color="#CCCCCC"> to ignore them</font>

1011
00:40:41,930 --> 00:40:47,419
from the list<font color="#E5E5E5"> because I want you to</font>

1012
00:40:43,460 --> 00:40:50,119
<font color="#E5E5E5">choose what works for you so you've got</font>

1013
00:40:47,420 --> 00:40:52,130
some commercial products<font color="#E5E5E5"> that basically</font>

1014
00:40:50,119 --> 00:40:53,690
do perform<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> ace analysis so it</font>

1015
00:40:52,130 --> 00:40:56,690
will go from source to sink and try<font color="#E5E5E5"> and</font>

1016
00:40:53,690 --> 00:40:59,270
see if any data is painted<font color="#E5E5E5"> and there's a</font>

1017
00:40:56,690 --> 00:41:00,770
wide range<font color="#E5E5E5"> of tools and</font><font color="#CCCCCC"> the tools that</font>

1018
00:40:59,270 --> 00:41:02,720
I'm going<font color="#CCCCCC"> to go more</font><font color="#E5E5E5"> into detail today</font>

1019
00:41:00,770 --> 00:41:04,369
<font color="#E5E5E5">are basically the tools to look for</font>

1020
00:41:02,720 --> 00:41:09,470
<font color="#E5E5E5">areas</font><font color="#CCCCCC"> of interest</font><font color="#E5E5E5"> and mainly</font><font color="#CCCCCC"> because</font>

1021
00:41:04,369 --> 00:41:11,330
these are open source sorry<font color="#E5E5E5"> and</font>

1022
00:41:09,470 --> 00:41:12,950
<font color="#E5E5E5">basically there's lots of</font><font color="#CCCCCC"> they basically</font>

1023
00:41:11,330 --> 00:41:15,319
will point out<font color="#E5E5E5"> things like semantic</font>

1024
00:41:12,950 --> 00:41:18,609
analysis and semantic analysis is a

1025
00:41:15,320 --> 00:41:20,839
simple concept<font color="#CCCCCC"> of you have values and</font>

1026
00:41:18,609 --> 00:41:23,240
<font color="#E5E5E5">those values might be classed as</font>

1027
00:41:20,839 --> 00:41:25,820
dangerous so<font color="#E5E5E5"> dollars dollar eval in</font>

1028
00:41:23,240 --> 00:41:27,020
<font color="#E5E5E5">angularjs is</font><font color="#CCCCCC"> classed as as dangerous so</font>

1029
00:41:25,820 --> 00:41:29,960
<font color="#E5E5E5">you want to look for that point of</font>

1030
00:41:27,020 --> 00:41:31,250
<font color="#E5E5E5">interest so</font><font color="#CCCCCC"> i there's if you're if</font>

1031
00:41:29,960 --> 00:41:32,450
<font color="#CCCCCC">you're a pen tester you already have</font>

1032
00:41:31,250 --> 00:41:33,650
some<font color="#E5E5E5"> of these available through like</font>

1033
00:41:32,450 --> 00:41:35,689
things<font color="#E5E5E5"> like the</font><font color="#CCCCCC"> burke passive scanner</font>

1034
00:41:33,650 --> 00:41:37,790
<font color="#CCCCCC">there's also a scanned yes but</font><font color="#E5E5E5"> it's</font>

1035
00:41:35,690 --> 00:41:39,650
deprecated there's also<font color="#CCCCCC"> jsn and jasmine</font>

1036
00:41:37,790 --> 00:41:41,529
which is still actively worked on but

1037
00:41:39,650 --> 00:41:43,670
<font color="#E5E5E5">today i'm gonna talk about</font><font color="#CCCCCC"> the es limit</font>

1038
00:41:41,530 --> 00:41:46,160
in a<font color="#E5E5E5"> little while after</font><font color="#CCCCCC"> I go through the</font>

1039
00:41:43,670 --> 00:41:47,300
rest<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> tools there's also a tool so</font>

1040
00:41:46,160 --> 00:41:49,098
like for example<font color="#E5E5E5"> if you're</font><font color="#CCCCCC"> building</font>

1041
00:41:47,300 --> 00:41:53,660
<font color="#E5E5E5">applications or working with development</font>

1042
00:41:49,099 --> 00:41:55,070
teams there's a lot<font color="#E5E5E5"> of security</font><font color="#CCCCCC"> issues</font>

1043
00:41:53,660 --> 00:41:56,149
<font color="#CCCCCC">that can actually</font><font color="#E5E5E5"> happen in products</font>

1044
00:41:55,070 --> 00:41:58,130
<font color="#CCCCCC">that have already been created like</font>

1045
00:41:56,150 --> 00:42:00,349
angularjs<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know react or even these</font>

1046
00:41:58,130 --> 00:42:03,290
<font color="#E5E5E5">things on NPM that you actively down</font>

1047
00:42:00,349 --> 00:42:06,290
<font color="#E5E5E5">download because they look cool</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> tools</font>

1048
00:42:03,290 --> 00:42:08,900
<font color="#E5E5E5">like retired retired</font><font color="#CCCCCC"> a s n SP</font><font color="#E5E5E5"> and snick</font>

1049
00:42:06,290 --> 00:42:10,750
will<font color="#CCCCCC"> I'll try and identify and</font><font color="#E5E5E5"> known</font>

1050
00:42:08,900 --> 00:42:12,970
<font color="#E5E5E5">security issues in</font>

1051
00:42:10,750 --> 00:42:16,300
<font color="#E5E5E5">probably patched packages of light on it</font>

1052
00:42:12,970 --> 00:42:19,089
on<font color="#CCCCCC"> NPM</font><font color="#E5E5E5"> and then there's basically tools</font>

1053
00:42:16,300 --> 00:42:21,070
that<font color="#CCCCCC"> the obfuscated</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> optimized</font>

1054
00:42:19,090 --> 00:42:23,320
JavaScript so the reason why I<font color="#CCCCCC"> talk</font>

1055
00:42:21,070 --> 00:42:25,630
about closure closure compiler is an

1056
00:42:23,320 --> 00:42:29,110
optimizer<font color="#E5E5E5"> but when you're</font><font color="#CCCCCC"> looking at the</font>

1057
00:42:25,630 --> 00:42:30,520
obfuscated<font color="#E5E5E5"> codes you want to get to the</font>

1058
00:42:29,110 --> 00:42:32,110
point where you can remove<font color="#E5E5E5"> the things</font>

1059
00:42:30,520 --> 00:42:33,790
you don't<font color="#E5E5E5"> want to look at so what</font>

1060
00:42:32,110 --> 00:42:35,590
closure compiler will do<font color="#E5E5E5"> will</font><font color="#CCCCCC"> basically</font>

1061
00:42:33,790 --> 00:42:37,120
optimize dead code and get rid of it<font color="#E5E5E5"> and</font>

1062
00:42:35,590 --> 00:42:38,650
that's<font color="#E5E5E5"> quite good when you're looking at</font>

1063
00:42:37,120 --> 00:42:39,940
lots of code that<font color="#E5E5E5"> you know get</font><font color="#CCCCCC"> rid of</font>

1064
00:42:38,650 --> 00:42:43,240
the stuff that<font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> make</font><font color="#E5E5E5"> any</font><font color="#CCCCCC"> sense or</font>

1065
00:42:39,940 --> 00:42:45,550
<font color="#E5E5E5">is not needed and get rid</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> it and is</font>

1066
00:42:43,240 --> 00:42:48,189
still areas only<font color="#E5E5E5"> got released a couple</font>

1067
00:42:45,550 --> 00:42:50,220
<font color="#E5E5E5">of days</font><font color="#CCCCCC"> ago by minded security and what</font>

1068
00:42:48,190 --> 00:42:52,390
it does is partial evaluations so

1069
00:42:50,220 --> 00:42:55,180
impartial evaluation is basically the

1070
00:42:52,390 --> 00:42:57,730
<font color="#E5E5E5">concept of and partly executing the code</font>

1071
00:42:55,180 --> 00:42:59,560
to<font color="#E5E5E5"> see the resource and it does know</font>

1072
00:42:57,730 --> 00:43:01,690
there's a<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> mind I don't mind</font>

1073
00:42:59,560 --> 00:43:03,640
<font color="#CCCCCC"> I think the project's called</font><font color="#E5E5E5"> and</font>

1074
00:43:01,690 --> 00:43:06,760
it's just basically<font color="#E5E5E5"> brackets and pluses</font>

1075
00:43:03,640 --> 00:43:07,990
and exclamation points and<font color="#CCCCCC"> j/s</font><font color="#E5E5E5"> Tillery</font>

1076
00:43:06,760 --> 00:43:12,030
<font color="#E5E5E5">will actually identify what</font><font color="#CCCCCC"> that</font>

1077
00:43:07,990 --> 00:43:18,580
<font color="#CCCCCC">produces and other tools can't do that</font>

1078
00:43:12,030 --> 00:43:21,790
as always<font color="#CCCCCC"> Jesus JEP Jess okay sorry I'm</font>

1079
00:43:18,580 --> 00:43:24,130
<font color="#E5E5E5">sorry for the profanity and so</font><font color="#CCCCCC"> Ashlyn</font>

1080
00:43:21,790 --> 00:43:26,050
has slowly became my favorite go-to tool

1081
00:43:24,130 --> 00:43:28,960
and many of the developers as<font color="#CCCCCC"> well</font><font color="#E5E5E5"> and</font>

1082
00:43:26,050 --> 00:43:30,610
basically<font color="#E5E5E5"> it's an inter and what linters</font>

1083
00:43:28,960 --> 00:43:32,380
do<font color="#E5E5E5"> we'll go through an</font><font color="#CCCCCC"> AST</font><font color="#E5E5E5"> and basically</font>

1084
00:43:30,610 --> 00:43:34,990
<font color="#E5E5E5">look for a co</font><font color="#CCCCCC"> quality and security</font>

1085
00:43:32,380 --> 00:43:37,000
issues<font color="#CCCCCC"> and basically it</font><font color="#E5E5E5"> was allowed</font>

1086
00:43:34,990 --> 00:43:39,490
developers<font color="#E5E5E5"> to</font><font color="#CCCCCC"> create</font><font color="#E5E5E5"> enforce rules on</font>

1087
00:43:37,000 --> 00:43:41,650
<font color="#CCCCCC">our software and a lot of developers</font>

1088
00:43:39,490 --> 00:43:43,600
will actually allow that<font color="#E5E5E5"> code to go out</font>

1089
00:43:41,650 --> 00:43:45,550
to production<font color="#CCCCCC"> until most</font><font color="#E5E5E5"> of their coding</font>

1090
00:43:43,600 --> 00:43:47,230
not the security ones<font color="#E5E5E5"> don't get</font><font color="#CCCCCC"> flagged</font>

1091
00:43:45,550 --> 00:43:52,420
it's more about the code<font color="#E5E5E5"> quality issues</font>

1092
00:43:47,230 --> 00:43:54,580
and<font color="#E5E5E5"> making sure the</font><font color="#CCCCCC"> style looks nice and</font>

1093
00:43:52,420 --> 00:43:56,350
basically there's also it integrates

1094
00:43:54,580 --> 00:43:58,720
into the<font color="#E5E5E5"> CI CD pipeline which is quite</font>

1095
00:43:56,350 --> 00:44:00,190
nice<font color="#CCCCCC"> I'm not sure about like I know it</font>

1096
00:43:58,720 --> 00:44:01,450
definitely<font color="#CCCCCC"> works with git hooks</font><font color="#E5E5E5"> so you</font>

1097
00:44:00,190 --> 00:44:03,940
<font color="#E5E5E5">can you know it's just a</font><font color="#CCCCCC"> command</font><font color="#E5E5E5"> line</font>

1098
00:44:01,450 --> 00:44:05,919
tool<font color="#E5E5E5"> you can execute it and if any</font>

1099
00:44:03,940 --> 00:44:09,130
warnings pop up<font color="#CCCCCC"> it's going to get</font><font color="#E5E5E5"> black</font>

1100
00:44:05,920 --> 00:44:11,400
<font color="#E5E5E5">doers</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> and it also allows custom rules</font>

1101
00:44:09,130 --> 00:44:14,890
for you know specific domains and

1102
00:44:11,400 --> 00:44:17,080
<font color="#E5E5E5">because from what I could see</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

1103
00:44:14,890 --> 00:44:19,810
<font color="#E5E5E5">extremely popular right now this was the</font>

1104
00:44:17,080 --> 00:44:21,759
<font color="#E5E5E5">state of</font><font color="#CCCCCC"> je s from 2017 and</font><font color="#E5E5E5"> he basically</font>

1105
00:44:19,810 --> 00:44:24,339
<font color="#E5E5E5">said that it was used</font><font color="#CCCCCC"> and roughly</font>

1106
00:44:21,760 --> 00:44:26,680
<font color="#CCCCCC">between two</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> three times</font><font color="#E5E5E5"> more</font>

1107
00:44:24,339 --> 00:44:28,150
<font color="#E5E5E5">to any of the other linting tools is</font>

1108
00:44:26,680 --> 00:44:31,779
completely customizable you<font color="#CCCCCC"> can create</font>

1109
00:44:28,150 --> 00:44:33,279
your own<font color="#CCCCCC"> rules and the reason why</font><font color="#E5E5E5"> I'm</font>

1110
00:44:31,779 --> 00:44:34,509
quite happy<font color="#E5E5E5"> with this is</font><font color="#CCCCCC"> because I do a</font>

1111
00:44:33,279 --> 00:44:38,559
<font color="#E5E5E5">lot of code review when it comes to</font>

1112
00:44:34,509 --> 00:44:40,380
JavaScript<font color="#E5E5E5"> and yes lint can be used by</font>

1113
00:44:38,559 --> 00:44:42,940
security<font color="#E5E5E5"> consultants to basically</font>

1114
00:44:40,380 --> 00:44:44,319
<font color="#E5E5E5">identify points of interest very quickly</font>

1115
00:44:42,940 --> 00:44:47,710
<font color="#E5E5E5">so whenever you're starting a new</font>

1116
00:44:44,319 --> 00:44:49,538
<font color="#E5E5E5">project there's basically these security</font>

1117
00:44:47,710 --> 00:44:52,269
conflicts that<font color="#E5E5E5"> you can use which are</font>

1118
00:44:49,539 --> 00:44:53,979
like<font color="#CCCCCC"> on ES Lin RCS and ultimately</font>

1119
00:44:52,269 --> 00:44:55,689
there's support for nodejs vanilla

1120
00:44:53,979 --> 00:44:57,038
<font color="#CCCCCC">jeaious</font><font color="#E5E5E5"> and what</font><font color="#CCCCCC"> i'll talk to</font><font color="#E5E5E5"> you today</font>

1121
00:44:55,690 --> 00:44:57,880
<font color="#E5E5E5">is about the rules I created</font><font color="#CCCCCC"> for</font>

1122
00:44:57,039 --> 00:44:59,950
angularjs

1123
00:44:57,880 --> 00:45:01,479
there's also<font color="#E5E5E5"> react and there's a list of</font>

1124
00:44:59,950 --> 00:45:04,390
security rules like what we talked<font color="#E5E5E5"> about</font>

1125
00:45:01,479 --> 00:45:05,799
before with<font color="#CCCCCC"> the post message there's one</font>

1126
00:45:04,390 --> 00:45:07,089
which basically<font color="#E5E5E5"> says you can't</font><font color="#CCCCCC"> happen</font>

1127
00:45:05,799 --> 00:45:09,069
the wild card you have<font color="#E5E5E5"> to define the</font>

1128
00:45:07,089 --> 00:45:10,420
<font color="#CCCCCC">origin and that's quite good when</font><font color="#E5E5E5"> it</font>

1129
00:45:09,069 --> 00:45:13,058
<font color="#CCCCCC">comes to actually sending data back to</font>

1130
00:45:10,420 --> 00:45:15,249
clients and<font color="#E5E5E5"> there's also things like you</font>

1131
00:45:13,059 --> 00:45:16,660
know<font color="#E5E5E5"> no snow</font><font color="#CCCCCC"> n Save in an age t ml so</font>

1132
00:45:15,249 --> 00:45:17,589
that's when you're assigning attributes

1133
00:45:16,660 --> 00:45:19,538
to the<font color="#CCCCCC"> innerhtml</font>

1134
00:45:17,589 --> 00:45:21,069
and that means when it's represented<font color="#E5E5E5"> in</font>

1135
00:45:19,539 --> 00:45:25,380
the Dom it's actually going<font color="#E5E5E5"> to be</font>

1136
00:45:21,069 --> 00:45:25,380
treated as<font color="#E5E5E5"> HTML and</font><font color="#CCCCCC"> that's quite bad so</font>

1137
00:45:25,829 --> 00:45:29,769
<font color="#CCCCCC">you know when you're creating your own</font>

1138
00:45:27,910 --> 00:45:30,910
rules<font color="#E5E5E5"> like you know you have</font><font color="#CCCCCC"> to have a</font>

1139
00:45:29,769 --> 00:45:33,218
<font color="#CCCCCC">problem</font><font color="#E5E5E5"> and you</font><font color="#CCCCCC"> want to have it be able</font>

1140
00:45:30,910 --> 00:45:35,319
<font color="#E5E5E5">to make a solution so you know every</font>

1141
00:45:33,219 --> 00:45:37,269
angular<font color="#CCCCCC"> pentest I had I had to</font><font color="#E5E5E5"> basically</font>

1142
00:45:35,319 --> 00:45:40,450
<font color="#E5E5E5">go through</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> what I've done in the past</font>

1143
00:45:37,269 --> 00:45:43,988
what have I looked for and basically try

1144
00:45:40,450 --> 00:45:46,058
and reproduce that again so what I<font color="#CCCCCC"> did</font>

1145
00:45:43,989 --> 00:45:47,559
was I went<font color="#E5E5E5"> through a lot of the issues</font>

1146
00:45:46,059 --> 00:45:49,719
that<font color="#E5E5E5"> we've found</font><font color="#CCCCCC"> for research</font><font color="#E5E5E5"> and</font>

1147
00:45:47,559 --> 00:45:51,460
<font color="#E5E5E5">through pen testing and and created a</font>

1148
00:45:49,719 --> 00:45:55,269
<font color="#E5E5E5">list of a</font><font color="#CCCCCC"> bunch of es link rules that</font>

1149
00:45:51,460 --> 00:45:57,039
will<font color="#E5E5E5"> identify problem locations and you</font>

1150
00:45:55,269 --> 00:45:58,359
know the current rules I've created are

1151
00:45:57,039 --> 00:45:59,799
really just to<font color="#E5E5E5"> be used as a point of</font>

1152
00:45:58,359 --> 00:46:02,380
interest<font color="#E5E5E5"> but I want to make them more</font>

1153
00:45:59,799 --> 00:46:03,759
useful<font color="#CCCCCC"> for developers as well and it</font>

1154
00:46:02,380 --> 00:46:06,400
will<font color="#E5E5E5"> identify things like</font><font color="#CCCCCC"> security</font>

1155
00:46:03,759 --> 00:46:08,619
<font color="#E5E5E5">misconfigurations where</font><font color="#CCCCCC"> SCE providers</font>

1156
00:46:06,400 --> 00:46:09,880
<font color="#E5E5E5">disabled and mine that's disabled and</font>

1157
00:46:08,619 --> 00:46:12,150
you<font color="#CCCCCC"> basically got</font><font color="#E5E5E5"> process scripting</font>

1158
00:46:09,880 --> 00:46:14,140
throughout most your<font color="#CCCCCC"> angular app and</font>

1159
00:46:12,150 --> 00:46:15,940
you've also<font color="#E5E5E5"> got like expression</font>

1160
00:46:14,140 --> 00:46:17,710
<font color="#E5E5E5">injection so when data goes into an</font>

1161
00:46:15,940 --> 00:46:19,989
expression<font color="#CCCCCC"> it can be evaluated into</font>

1162
00:46:17,710 --> 00:46:21,609
<font color="#E5E5E5">JavaScript and there's also because of</font>

1163
00:46:19,989 --> 00:46:23,200
the<font color="#E5E5E5"> client-side routing aspects there's</font>

1164
00:46:21,609 --> 00:46:26,529
also things<font color="#CCCCCC"> like you know client side</font>

1165
00:46:23,200 --> 00:46:27,729
open redirection and of course on the

1166
00:46:26,529 --> 00:46:29,680
roadmap there's more rules

1167
00:46:27,729 --> 00:46:31,390
there's angular<font color="#E5E5E5"> term for support which</font>

1168
00:46:29,680 --> 00:46:34,089
obviously<font color="#E5E5E5"> the framework was completely</font>

1169
00:46:31,390 --> 00:46:36,430
rewritten and<font color="#E5E5E5"> I want to be able to</font>

1170
00:46:34,089 --> 00:46:38,290
<font color="#E5E5E5">identify</font><font color="#CCCCCC"> the maintain</font><font color="#E5E5E5"> maintain enough</font>

1171
00:46:36,430 --> 00:46:40,240
state of like variable declare

1172
00:46:38,290 --> 00:46:44,830
so we can actually<font color="#E5E5E5"> have some kind</font><font color="#CCCCCC"> of</font>

1173
00:46:40,240 --> 00:46:46,029
smart<font color="#E5E5E5"> taste analysis so these are the</font>

1174
00:46:44,830 --> 00:46:48,520
steps<font color="#CCCCCC"> that I would generally</font><font color="#E5E5E5"> recommend</font>

1175
00:46:46,030 --> 00:46:49,930
<font color="#E5E5E5">on creating a rule you want to create a</font>

1176
00:46:48,520 --> 00:46:51,790
test with a tree positive and a false

1177
00:46:49,930 --> 00:46:52,899
positive so something that<font color="#E5E5E5"> should pass</font>

1178
00:46:51,790 --> 00:46:56,920
the test and<font color="#E5E5E5"> something that shouldn't</font>

1179
00:46:52,900 --> 00:46:58,750
but it'll be simple<font color="#E5E5E5"> and you then want to</font>

1180
00:46:56,920 --> 00:47:01,450
walk the<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> ast and identify</font>

1181
00:46:58,750 --> 00:47:03,460
your requirements<font color="#E5E5E5"> and you can create the</font>

1182
00:47:01,450 --> 00:47:07,120
rule from<font color="#E5E5E5"> ast output and then basically</font>

1183
00:47:03,460 --> 00:47:09,610
<font color="#E5E5E5">make sure</font><font color="#CCCCCC"> the test passes so this is how</font>

1184
00:47:07,120 --> 00:47:11,470
you<font color="#E5E5E5"> create a test in es</font><font color="#CCCCCC"> limp</font><font color="#E5E5E5"> ultimately</font>

1185
00:47:09,610 --> 00:47:13,690
and require the rule that you want<font color="#E5E5E5"> to</font>

1186
00:47:11,470 --> 00:47:15,879
<font color="#E5E5E5">test</font><font color="#CCCCCC"> for so in this sense</font><font color="#E5E5E5"> it was</font>

1187
00:47:13,690 --> 00:47:18,070
basically making sure SC is disabled or

1188
00:47:15,880 --> 00:47:20,950
<font color="#CCCCCC">not but if it</font><font color="#E5E5E5"> is disabled report it as</font>

1189
00:47:18,070 --> 00:47:23,380
an issue you import you know es<font color="#CCCCCC"> lint</font>

1190
00:47:20,950 --> 00:47:25,060
<font color="#E5E5E5">rule tester</font><font color="#CCCCCC"> and then you basically</font>

1191
00:47:23,380 --> 00:47:26,080
create<font color="#E5E5E5"> a</font><font color="#CCCCCC"> ballot code this</font><font color="#E5E5E5"> should pass</font>

1192
00:47:25,060 --> 00:47:27,640
<font color="#E5E5E5">because it doesn't do anything</font>

1193
00:47:26,080 --> 00:47:29,890
you know if it's<font color="#CCCCCC"> unable</font><font color="#E5E5E5"> to true that's</font>

1194
00:47:27,640 --> 00:47:31,930
good and by default<font color="#E5E5E5"> it's automatically</font>

1195
00:47:29,890 --> 00:47:34,270
<font color="#E5E5E5">on so I should never really be there</font>

1196
00:47:31,930 --> 00:47:36,520
anyway<font color="#E5E5E5"> and then basically if it's</font>

1197
00:47:34,270 --> 00:47:38,950
disabled you know<font color="#CCCCCC"> to off</font><font color="#E5E5E5"> I actually want</font>

1198
00:47:36,520 --> 00:47:40,570
to flag it<font color="#E5E5E5"> as a warning and the way you</font>

1199
00:47:38,950 --> 00:47:42,160
would represent<font color="#CCCCCC"> that is by identifying</font>

1200
00:47:40,570 --> 00:47:43,780
your<font color="#CCCCCC"> requirements</font><font color="#E5E5E5"> and this is using the</font>

1201
00:47:42,160 --> 00:47:46,509
<font color="#CCCCCC">visualize visualization tool that</font><font color="#E5E5E5"> I</font>

1202
00:47:43,780 --> 00:47:47,440
showed earlier and<font color="#E5E5E5"> basically when you</font>

1203
00:47:46,510 --> 00:47:49,330
<font color="#CCCCCC">take a look at what this actually</font>

1204
00:47:47,440 --> 00:47:50,980
attributes is is there's a member

1205
00:47:49,330 --> 00:47:53,650
expression<font color="#CCCCCC"> and a member</font><font color="#E5E5E5"> expression is</font>

1206
00:47:50,980 --> 00:47:56,410
<font color="#CCCCCC">just two values that are</font><font color="#E5E5E5"> parent and a</font>

1207
00:47:53,650 --> 00:47:58,810
child<font color="#E5E5E5"> so you have you know your SC</font>

1208
00:47:56,410 --> 00:48:00,399
provider and enable<font color="#E5E5E5"> it and then to be</font>

1209
00:47:58,810 --> 00:48:01,779
able to<font color="#E5E5E5"> them to jump out and look at the</font>

1210
00:48:00,400 --> 00:48:03,400
<font color="#E5E5E5">arguments you'd have to go to the call</font>

1211
00:48:01,780 --> 00:48:04,810
expression<font color="#E5E5E5"> that gets called</font><font color="#CCCCCC"> so you'd</font>

1212
00:48:03,400 --> 00:48:07,000
have<font color="#E5E5E5"> to go back</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> to the parent nodes</font>

1213
00:48:04,810 --> 00:48:10,779
<font color="#E5E5E5">and take a look at the arguments</font><font color="#CCCCCC"> to see</font>

1214
00:48:07,000 --> 00:48:12,670
if it's set to<font color="#E5E5E5"> false so this is the rule</font>

1215
00:48:10,780 --> 00:48:14,310
<font color="#CCCCCC">that's making in is relatively simple so</font>

1216
00:48:12,670 --> 00:48:16,330
<font color="#E5E5E5">you call your member expression and</font>

1217
00:48:14,310 --> 00:48:18,940
basically you're making<font color="#CCCCCC"> this see if the</font>

1218
00:48:16,330 --> 00:48:21,100
object<font color="#E5E5E5"> name is set to SC provider and if</font>

1219
00:48:18,940 --> 00:48:23,620
it's enabled<font color="#CCCCCC"> and then I'm accessing</font><font color="#E5E5E5"> the</font>

1220
00:48:21,100 --> 00:48:25,330
parent<font color="#E5E5E5"> and grabbing the arguments or the</font>

1221
00:48:23,620 --> 00:48:26,770
first argument because there's in<font color="#E5E5E5"> the</font>

1222
00:48:25,330 --> 00:48:28,960
sense it's never normally one you know

1223
00:48:26,770 --> 00:48:31,150
what more than<font color="#E5E5E5"> one and then we're</font><font color="#CCCCCC"> saying</font>

1224
00:48:28,960 --> 00:48:34,330
<font color="#E5E5E5">if it says</font><font color="#CCCCCC"> to false and if it is then it</font>

1225
00:48:31,150 --> 00:48:37,450
very complains<font color="#CCCCCC"> so I'm going</font><font color="#E5E5E5"> to give a</font>

1226
00:48:34,330 --> 00:48:41,500
quick<font color="#CCCCCC"> demo on es loop and then we're</font>

1227
00:48:37,450 --> 00:48:48,980
done<font color="#E5E5E5"> with the presentation so it's fine</font>

1228
00:48:41,500 --> 00:48:51,089
the code again<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so</font>

1229
00:48:48,980 --> 00:48:53,339
this is the conflict<font color="#CCCCCC"> that I've created</font>

1230
00:48:51,089 --> 00:48:55,140
<font color="#E5E5E5">that is publicly available online and</font>

1231
00:48:53,339 --> 00:48:58,200
all it's doing is basically using<font color="#E5E5E5"> the</font>

1232
00:48:55,140 --> 00:49:00,900
rules I want to look for so some of

1233
00:48:58,200 --> 00:49:02,759
these<font color="#E5E5E5"> I've already so there's let's take</font>

1234
00:49:00,900 --> 00:49:05,279
a look at<font color="#CCCCCC"> dem ojs demo J s is basically</font>

1235
00:49:02,759 --> 00:49:07,769
just jQuery and I've kind of<font color="#CCCCCC"> for a</font>

1236
00:49:05,279 --> 00:49:10,259
couple of minority areas<font color="#CCCCCC"> of interest in</font>

1237
00:49:07,769 --> 00:49:12,299
<font color="#E5E5E5">the</font><font color="#CCCCCC"> code base it's quite a big code base</font>

1238
00:49:10,259 --> 00:49:14,039
<font color="#E5E5E5">and you know it has like a lot</font><font color="#CCCCCC"> of</font>

1239
00:49:12,299 --> 00:49:18,470
<font color="#E5E5E5">different functions</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it passes it</font>

1240
00:49:14,039 --> 00:49:18,470
relatively<font color="#E5E5E5"> simply so now if</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> go to</font>

1241
00:49:18,499 --> 00:49:25,279
that I can find it is it this one no

1242
00:49:25,430 --> 00:49:34,470
yeah<font color="#E5E5E5"> okay so and we want to use</font><font color="#CCCCCC"> that</font>

1243
00:49:30,779 --> 00:49:46,079
<font color="#E5E5E5">against the code base well I can't see</font>

1244
00:49:34,470 --> 00:50:02,160
<font color="#E5E5E5">it okay okay</font><font color="#CCCCCC"> let's so I tried to</font><font color="#E5E5E5"> zoom in</font>

1245
00:49:46,079 --> 00:50:03,720
to<font color="#CCCCCC"> make it more viewable okay so I mean</font>

1246
00:50:02,160 --> 00:50:05,308
<font color="#E5E5E5">it's very</font><font color="#CCCCCC"> difficult to see now but</font>

1247
00:50:03,720 --> 00:50:07,288
<font color="#CCCCCC">basically we're calling it</font><font color="#E5E5E5"> yes lint</font>

1248
00:50:05,309 --> 00:50:09,210
<font color="#CCCCCC">we've basically</font><font color="#E5E5E5"> saying we don't want</font><font color="#CCCCCC"> to</font>

1249
00:50:07,289 --> 00:50:11,460
<font color="#E5E5E5">provide a config and I give my own</font>

1250
00:50:09,210 --> 00:50:13,049
profile which is<font color="#E5E5E5"> the ERC</font><font color="#CCCCCC"> and we're</font>

1251
00:50:11,460 --> 00:50:15,839
spending<font color="#E5E5E5"> that code project so if now if</font>

1252
00:50:13,049 --> 00:50:17,279
I just<font color="#E5E5E5"> run</font><font color="#CCCCCC"> with my rule set</font><font color="#E5E5E5"> now it's</font>

1253
00:50:15,839 --> 00:50:19,019
obviously it's flagged the<font color="#CCCCCC"> compiled</font>

1254
00:50:17,279 --> 00:50:21,690
dangerous version on line 16<font color="#E5E5E5"> it's</font>

1255
00:50:19,019 --> 00:50:25,019
complied the<font color="#CCCCCC"> SCO stares and</font><font color="#E5E5E5"> it's also on</font>

1256
00:50:21,690 --> 00:50:28,829
<font color="#E5E5E5">like line nine thousand 386 the</font><font color="#CCCCCC"> SCBA is</font>

1257
00:50:25,019 --> 00:50:30,269
<font color="#E5E5E5">also set to false so and this is</font>

1258
00:50:28,829 --> 00:50:31,980
<font color="#CCCCCC">basically a great way when you're</font>

1259
00:50:30,269 --> 00:50:33,390
starting<font color="#E5E5E5"> to do code review to basically</font>

1260
00:50:31,980 --> 00:50:35,970
<font color="#E5E5E5">points out areas of interest now</font>

1261
00:50:33,390 --> 00:50:38,759
obviously<font color="#CCCCCC"> going if you change a value</font>

1262
00:50:35,970 --> 00:50:40,109
from SC provider is now X it's<font color="#E5E5E5"> not going</font>

1263
00:50:38,759 --> 00:50:42,180
to find out<font color="#CCCCCC"> any more so which is why</font>

1264
00:50:40,109 --> 00:50:43,499
there's a limitations right<font color="#E5E5E5"> now but</font>

1265
00:50:42,180 --> 00:50:46,169
ultimately I want to<font color="#CCCCCC"> get to the point</font>

1266
00:50:43,499 --> 00:50:53,519
<font color="#E5E5E5">where there's more smarts and tactical</font>

1267
00:50:46,170 --> 00:50:55,650
ways of doing it okay so in summary

1268
00:50:53,519 --> 00:50:58,979
<font color="#CCCCCC">javascript is weird and wonderful</font>

1269
00:50:55,650 --> 00:51:01,349
language you know when you're looking<font color="#CCCCCC"> at</font>

1270
00:50:58,980 --> 00:51:02,040
issues<font color="#E5E5E5"> I try and learn one issue very</font>

1271
00:51:01,349 --> 00:51:04,430
<font color="#CCCCCC">well</font>

1272
00:51:02,040 --> 00:51:07,170
than trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> learn them all in one go</font>

1273
00:51:04,430 --> 00:51:08,819
and you do<font color="#E5E5E5"> have to be concerned of</font>

1274
00:51:07,170 --> 00:51:11,850
<font color="#CCCCCC">JavaScript not just on the client-side</font>

1275
00:51:08,820 --> 00:51:14,190
<font color="#E5E5E5">and on the server but understanding like</font>

1276
00:51:11,850 --> 00:51:15,839
<font color="#E5E5E5">the underlying static analysis process</font>

1277
00:51:14,190 --> 00:51:19,380
can<font color="#E5E5E5"> actually help you identify issues</font>

1278
00:51:15,840 --> 00:51:21,210
<font color="#E5E5E5">quickly</font><font color="#CCCCCC"> quickly</font><font color="#E5E5E5"> and obviously use these</font>

1279
00:51:19,380 --> 00:51:22,320
tools<font color="#E5E5E5"> but don't rely on them because as</font>

1280
00:51:21,210 --> 00:51:24,120
I mentioned<font color="#CCCCCC"> before there's lots of</font>

1281
00:51:22,320 --> 00:51:25,830
limitations there's you know false

1282
00:51:24,120 --> 00:51:27,870
negatives where it just doesn't the

1283
00:51:25,830 --> 00:51:29,970
issue is<font color="#E5E5E5"> this false positives</font><font color="#CCCCCC"> there's</font>

1284
00:51:27,870 --> 00:51:32,940
also you know<font color="#E5E5E5"> true findings that it will</font>

1285
00:51:29,970 --> 00:51:34,259
find<font color="#E5E5E5"> but do not rely on them you know</font>

1286
00:51:32,940 --> 00:51:35,520
make sure<font color="#E5E5E5"> you're also doing you know</font>

1287
00:51:34,260 --> 00:51:37,140
you're doing<font color="#CCCCCC"> your checks and</font><font color="#E5E5E5"> balances</font>

1288
00:51:35,520 --> 00:51:40,500
and making sure you look in the manual

1289
00:51:37,140 --> 00:52:35,580
<font color="#CCCCCC">presents so that's the end the</font>

1290
00:51:40,500 --> 00:52:38,100
presentation<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so the question was</font>

1291
00:52:35,580 --> 00:52:39,750
about fatigue<font color="#CCCCCC"> and when you're</font><font color="#E5E5E5"> giving</font>

1292
00:52:38,100 --> 00:52:41,460
developers rules to use but then

1293
00:52:39,750 --> 00:52:43,500
complaining about things are triple

1294
00:52:41,460 --> 00:52:45,570
equals because it's not<font color="#E5E5E5"> allowed anymore</font>

1295
00:52:43,500 --> 00:52:46,830
<font color="#E5E5E5">but they need it</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> double equals and</font>

1296
00:52:45,570 --> 00:52:49,950
it's not allowed<font color="#E5E5E5"> anymore they need it</font>

1297
00:52:46,830 --> 00:52:52,850
for certain options operations<font color="#CCCCCC"> I think</font>

1298
00:52:49,950 --> 00:52:56,009
the answer is<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> kind of need</font><font color="#CCCCCC"> to</font>

1299
00:52:52,850 --> 00:52:57,680
just come to<font color="#CCCCCC"> our</font><font color="#E5E5E5"> middle ground and if</font>

1300
00:52:56,010 --> 00:53:00,720
that rule is in<font color="#E5E5E5"> particularly a problem</font>

1301
00:52:57,680 --> 00:53:02,069
<font color="#CCCCCC">then</font><font color="#E5E5E5"> disable it in the rule pack but</font>

1302
00:53:00,720 --> 00:53:04,319
then you would<font color="#E5E5E5"> have to do some extra</font>

1303
00:53:02,070 --> 00:53:05,610
verifications like from the security

1304
00:53:04,320 --> 00:53:08,310
team would have<font color="#E5E5E5"> to be aware of those</font>

1305
00:53:05,610 --> 00:53:09,840
risks<font color="#E5E5E5"> and then actually perform some</font>

1306
00:53:08,310 --> 00:53:11,580
manual analysis against<font color="#E5E5E5"> the new code</font>

1307
00:53:09,840 --> 00:53:12,420
base at shipping to see if they actually

1308
00:53:11,580 --> 00:53:13,740
is a problem

1309
00:53:12,420 --> 00:53:14,760
it's obviously if it's no<font color="#E5E5E5"> longer in the</font>

1310
00:53:13,740 --> 00:53:16,950
rules and<font color="#E5E5E5"> they don't</font>

1311
00:53:14,760 --> 00:53:18,270
it's not being flagged<font color="#CCCCCC"> it's gonna be it</font>

1312
00:53:16,950 --> 00:53:20,490
could<font color="#CCCCCC"> be a risk and it's one</font><font color="#E5E5E5"> of those</font>

1313
00:53:18,270 --> 00:53:22,170
things<font color="#E5E5E5"> but</font><font color="#CCCCCC"> you know obviously the</font>

1314
00:53:20,490 --> 00:53:24,060
configurations are customizable<font color="#CCCCCC"> so you</font>

1315
00:53:22,170 --> 00:53:27,200
can they<font color="#E5E5E5"> can the developers can disable</font>

1316
00:53:24,060 --> 00:53:30,150
them<font color="#E5E5E5"> if they need</font><font color="#CCCCCC"> to which</font><font color="#E5E5E5"> is scary but</font>

1317
00:53:27,200 --> 00:53:31,950
but<font color="#E5E5E5"> you know it offers flexibility and</font>

1318
00:53:30,150 --> 00:53:33,349
but there are a<font color="#E5E5E5"> lot of edge</font><font color="#CCCCCC"> cases and</font>

1319
00:53:31,950 --> 00:53:35,759
problems<font color="#E5E5E5"> with that yeah</font><font color="#CCCCCC"> that's for</font><font color="#E5E5E5"> sure</font>

1320
00:53:33,349 --> 00:53:37,650
but<font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't know the answer I think just</font>

1321
00:53:35,760 --> 00:53:39,869
having<font color="#E5E5E5"> to work with the development</font>

1322
00:53:37,650 --> 00:53:43,109
teams and trying to you know<font color="#CCCCCC"> identify a</font>

1323
00:53:39,869 --> 00:53:44,400
middle<font color="#E5E5E5"> ground and just going mmm okay</font>

1324
00:53:43,109 --> 00:53:46,770
<font color="#E5E5E5">where we can take off</font><font color="#CCCCCC"> that rule for now</font>

1325
00:53:44,400 --> 00:53:48,240
and then maybe work<font color="#E5E5E5"> on like critical</font>

1326
00:53:46,770 --> 00:53:50,220
applications for example<font color="#CCCCCC"> if there's like</font>

1327
00:53:48,240 --> 00:53:51,839
you know<font color="#E5E5E5"> the payment systems for example</font>

1328
00:53:50,220 --> 00:53:54,299
of your applications they<font color="#CCCCCC"> have to follow</font>

1329
00:53:51,839 --> 00:53:57,420
<font color="#E5E5E5">those</font><font color="#CCCCCC"> rules but maybe the client-side</font>

1330
00:53:54,300 --> 00:53:59,160
code is something that you know for a

1331
00:53:57,420 --> 00:54:01,410
different<font color="#E5E5E5"> application there's a</font><font color="#CCCCCC"> level</font><font color="#E5E5E5"> a</font>

1332
00:53:59,160 --> 00:54:03,450
lower<font color="#E5E5E5"> level of risk then maybe that's</font>

1333
00:54:01,410 --> 00:54:05,430
okay but obviously<font color="#CCCCCC"> may impact</font>

1334
00:54:03,450 --> 00:54:20,759
productivity<font color="#CCCCCC"> which</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> concern</font>

1335
00:54:05,430 --> 00:54:23,819
as well any<font color="#E5E5E5"> other questions I haven't</font>

1336
00:54:20,760 --> 00:54:24,869
<font color="#E5E5E5">tried it I don't know the answer</font><font color="#CCCCCC"> but I</font>

1337
00:54:23,819 --> 00:54:27,540
mean obviously when I'm looking at

1338
00:54:24,869 --> 00:54:29,880
minified codes<font color="#E5E5E5"> I will run rules against</font>

1339
00:54:27,540 --> 00:54:32,400
them but because because obviously it's

1340
00:54:29,880 --> 00:54:34,079
changing the values normally<font color="#E5E5E5"> to like you</font>

1341
00:54:32,400 --> 00:54:36,450
know small of attributes it won't pick

1342
00:54:34,079 --> 00:54:37,800
<font color="#E5E5E5">up the static rules so you would ever</font>

1343
00:54:36,450 --> 00:54:39,359
have to<font color="#E5E5E5"> like if you're doing like a pen</font>

1344
00:54:37,800 --> 00:54:40,920
test<font color="#CCCCCC"> room for an</font><font color="#E5E5E5"> organization</font><font color="#CCCCCC"> you'd go</font>

1345
00:54:39,359 --> 00:54:43,109
can<font color="#CCCCCC"> you please give me</font><font color="#E5E5E5"> the full source</font>

1346
00:54:40,920 --> 00:54:45,869
<font color="#CCCCCC">code and they go no and you go okay</font><font color="#E5E5E5"> so</font>

1347
00:54:43,109 --> 00:54:47,460
then you would basically<font color="#E5E5E5"> start to just</font>

1348
00:54:45,869 --> 00:54:50,430
have<font color="#E5E5E5"> to manually investigate the code</font>

1349
00:54:47,460 --> 00:54:52,500
<font color="#E5E5E5">and use things like jst Larry or and you</font>

1350
00:54:50,430 --> 00:54:54,328
<font color="#E5E5E5">know close your compiler to try and get</font>

1351
00:54:52,500 --> 00:54:56,010
rid<font color="#CCCCCC"> of code you don't need and then</font>

1352
00:54:54,329 --> 00:54:57,900
manually<font color="#E5E5E5"> look at it and then if you can</font>

1353
00:54:56,010 --> 00:54:59,069
<font color="#CCCCCC">actually start to</font><font color="#E5E5E5"> identify patterns you</font>

1354
00:54:57,900 --> 00:55:00,480
<font color="#E5E5E5">can probably change the code back into</font>

1355
00:54:59,069 --> 00:55:02,130
<font color="#CCCCCC">what it was and then read</font><font color="#E5E5E5"> them the rules</font>

1356
00:55:00,480 --> 00:55:03,569
but<font color="#CCCCCC"> bad-mouths you've defeated</font><font color="#E5E5E5"> the</font>

1357
00:55:02,130 --> 00:55:06,420
purpose<font color="#E5E5E5"> of the rules in the</font><font color="#CCCCCC"> first place</font>

1358
00:55:03,569 --> 00:55:07,980
but yeah that that's<font color="#E5E5E5"> I think it's you</font>

1359
00:55:06,420 --> 00:55:10,560
know<font color="#E5E5E5"> definitely problematic</font><font color="#CCCCCC"> unless you</font>

1360
00:55:07,980 --> 00:55:14,720
can write some very<font color="#CCCCCC"> smart</font><font color="#E5E5E5"> holes to be</font>

1361
00:55:10,560 --> 00:55:16,890
able<font color="#CCCCCC"> to do things like you know</font>

1362
00:55:14,720 --> 00:55:18,930
<font color="#E5E5E5">following the state</font><font color="#CCCCCC"> so when a new</font>

1363
00:55:16,890 --> 00:55:20,009
<font color="#E5E5E5">variable declaration happens and it's</font>

1364
00:55:18,930 --> 00:55:21,839
about you that you know could be

1365
00:55:20,010 --> 00:55:23,579
<font color="#E5E5E5">dangerous you have to tried that all the</font>

1366
00:55:21,839 --> 00:55:24,540
way<font color="#E5E5E5"> through the application but that's</font>

1367
00:55:23,579 --> 00:55:28,200
<font color="#E5E5E5">probably going to be</font><font color="#CCCCCC"> quite memory</font>

1368
00:55:24,540 --> 00:55:36,640
<font color="#E5E5E5">intensive and very problematic</font>

1369
00:55:28,200 --> 00:55:39,549
<font color="#CCCCCC">so</font><font color="#E5E5E5"> do you have</font><font color="#CCCCCC"> any recommendations with</font>

1370
00:55:36,640 --> 00:55:42,339
tools<font color="#E5E5E5"> or doing runtime or dynamic</font>

1371
00:55:39,550 --> 00:55:48,220
analysis<font color="#CCCCCC"> particularly</font><font color="#E5E5E5"> around tracking</font>

1372
00:55:42,339 --> 00:55:50,099
the lifetime of<font color="#E5E5E5"> tainted variables so the</font>

1373
00:55:48,220 --> 00:55:52,839
question was<font color="#E5E5E5"> around the lifetime of</font>

1374
00:55:50,099 --> 00:55:56,470
tracking variables<font color="#E5E5E5"> for like potential</font>

1375
00:55:52,839 --> 00:55:57,970
sources<font color="#E5E5E5"> at ng meme around actually</font>

1376
00:55:56,470 --> 00:55:59,259
debugging dynamic code or you mean

1377
00:55:57,970 --> 00:56:00,819
actually<font color="#CCCCCC"> whether</font><font color="#E5E5E5"> you've identified</font>

1378
00:55:59,260 --> 00:56:08,470
there's a<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> and how long has been</font>

1379
00:56:00,820 --> 00:56:11,680
around for taking my user data from<font color="#CCCCCC"> like</font>

1380
00:56:08,470 --> 00:56:13,540
location to search and tracking<font color="#E5E5E5"> those</font>

1381
00:56:11,680 --> 00:56:21,790
things at runtime dynamically to see

1382
00:56:13,540 --> 00:56:23,470
when<font color="#CCCCCC"> they hits</font><font color="#E5E5E5"> syncs like so there are</font>

1383
00:56:21,790 --> 00:56:25,990
like tools like there's there<font color="#E5E5E5"> was one</font>

1384
00:56:23,470 --> 00:56:28,540
called<font color="#E5E5E5"> Dom Dominator but it changed its</font>

1385
00:56:25,990 --> 00:56:30,129
name<font color="#CCCCCC"> to</font><font color="#E5E5E5"> new closure detect and it</font>

1386
00:56:28,540 --> 00:56:32,680
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> is kind</font><font color="#CCCCCC"> of like a brute force</font>

1387
00:56:30,130 --> 00:56:34,030
for those kind of attributes so new

1388
00:56:32,680 --> 00:56:35,770
Hydra to detect will basically<font color="#E5E5E5"> just</font>

1389
00:56:34,030 --> 00:56:37,839
<font color="#CCCCCC">brute force like identified known</font>

1390
00:56:35,770 --> 00:56:39,220
sources<font color="#CCCCCC"> and known syncs</font><font color="#E5E5E5"> and just hammer</font>

1391
00:56:37,839 --> 00:56:42,190
them away until<font color="#E5E5E5"> they execute something</font>

1392
00:56:39,220 --> 00:56:43,750
<font color="#E5E5E5">and it's you know it's I don't know if</font>

1393
00:56:42,190 --> 00:56:45,040
that improved of<font color="#E5E5E5"> also or if they've</font>

1394
00:56:43,750 --> 00:56:46,839
changed the way they do it<font color="#E5E5E5"> but that was</font>

1395
00:56:45,040 --> 00:56:50,500
one way to do<font color="#E5E5E5"> it there's also one way to</font>

1396
00:56:46,839 --> 00:56:52,240
do<font color="#E5E5E5"> it you know adding</font><font color="#CCCCCC"> debugs debugger</font>

1397
00:56:50,500 --> 00:56:54,130
like kind of captions into code and<font color="#CCCCCC"> just</font>

1398
00:56:52,240 --> 00:56:56,078
stepping through it to see<font color="#E5E5E5"> you know what</font>

1399
00:56:54,130 --> 00:56:59,230
happens and<font color="#E5E5E5"> obviously you know glorified</font>

1400
00:56:56,079 --> 00:57:01,720
<font color="#CCCCCC">greps always</font><font color="#E5E5E5"> help so and</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> think that's</font>

1401
00:56:59,230 --> 00:57:02,950
probably<font color="#CCCCCC"> the best way to do it from you</font>

1402
00:57:01,720 --> 00:57:04,299
know the way I would do<font color="#E5E5E5"> it anyway I</font>

1403
00:57:02,950 --> 00:57:06,970
<font color="#E5E5E5">don't I'm sure</font><font color="#CCCCCC"> there's probably smarter</font>

1404
00:57:04,300 --> 00:57:08,950
ways yeah<font color="#CCCCCC"> I would wreck the probably</font>

1405
00:57:06,970 --> 00:57:10,930
reach out to a guy<font color="#E5E5E5"> called live overflow</font>

1406
00:57:08,950 --> 00:57:13,930
and he has<font color="#E5E5E5"> lots of amazing YouTube</font>

1407
00:57:10,930 --> 00:57:15,399
videos<font color="#E5E5E5"> around kind of like identifying</font>

1408
00:57:13,930 --> 00:57:16,720
things like pop under there are things

1409
00:57:15,400 --> 00:57:18,910
where he's basically debugging the code

1410
00:57:16,720 --> 00:57:20,740
finding how all these things<font color="#E5E5E5"> work I'm</font>

1411
00:57:18,910 --> 00:57:25,930
sure<font color="#CCCCCC"> he has a better</font><font color="#E5E5E5"> explanation for</font>

1412
00:57:20,740 --> 00:57:28,319
<font color="#E5E5E5">those kind of things yeah any other</font>

1413
00:57:25,930 --> 00:57:28,319
questions

1414
00:57:30,260 --> 00:57:35,250
look<font color="#E5E5E5"> okay well thank you</font><font color="#CCCCCC"> for attending</font>

1415
00:57:33,330 --> 00:57:36,630
hopefully it was helpful and I will put

1416
00:57:35,250 --> 00:57:37,890
me<font color="#E5E5E5"> put in the slides up in the next ten</font>

1417
00:57:36,630 --> 00:57:39,360
<font color="#CCCCCC">minutes</font><font color="#E5E5E5"> so if you want or what</font><font color="#CCCCCC"> you like</font>

1418
00:57:37,890 --> 00:57:41,190
look at them<font color="#CCCCCC"> again and get all the</font><font color="#E5E5E5"> links</font>

1419
00:57:39,360 --> 00:57:44,200
and<font color="#E5E5E5"> stuff in the presentation</font><font color="#CCCCCC"> there I'll</font>

1420
00:57:41,190 --> 00:57:49,590
<font color="#E5E5E5">be on my slide deck</font><font color="#CCCCCC"> not to</font><font color="#E5E5E5"> eat out</font>

1421
00:57:44,200 --> 00:57:49,589
[Applause]

