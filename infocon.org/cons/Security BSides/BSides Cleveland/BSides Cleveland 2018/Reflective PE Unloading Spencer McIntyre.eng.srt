1
00:00:00,030 --> 00:00:04,589
hello<font color="#E5E5E5"> everybody</font><font color="#CCCCCC"> Anke here unfortunately</font>

2
00:00:02,310 --> 00:00:06,420
<font color="#CCCCCC">we had audio</font><font color="#E5E5E5"> problem at the beginning</font><font color="#CCCCCC"> of</font>

3
00:00:04,589 --> 00:00:08,700
this talk<font color="#CCCCCC"> so audio does not actually</font>

4
00:00:06,420 --> 00:00:11,570
<font color="#E5E5E5">start in</font><font color="#CCCCCC"> to about the 6 minute mark</font>

5
00:00:08,700 --> 00:00:11,570
sorry for the inconvenience

6
00:00:23,380 --> 00:00:25,439
you

7
00:03:04,120 --> 00:03:06,180
<font color="#E5E5E5">you</font>

8
00:06:04,160 --> 00:06:09,320
the<font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> system loader so doesn't</font>

9
00:06:06,740 --> 00:06:11,390
<font color="#E5E5E5">necessarily even</font><font color="#CCCCCC"> have to be utilized by</font>

10
00:06:09,320 --> 00:06:12,590
<font color="#E5E5E5">the reflective DLL injection so you</font>

11
00:06:11,390 --> 00:06:14,840
don't<font color="#E5E5E5"> have to load it that way if you</font>

12
00:06:12,590 --> 00:06:17,270
<font color="#E5E5E5">don't want to because as many of us in</font>

13
00:06:14,840 --> 00:06:18,799
<font color="#CCCCCC">pentesting</font><font color="#E5E5E5"> knows it's all about having</font>

14
00:06:17,270 --> 00:06:21,049
<font color="#E5E5E5">options we need to be able to have</font>

15
00:06:18,800 --> 00:06:22,340
options<font color="#CCCCCC"> that</font><font color="#E5E5E5"> allow us to be flexible</font><font color="#CCCCCC"> so</font>

16
00:06:21,050 --> 00:06:25,430
<font color="#E5E5E5">that we can very quickly and rapidly</font>

17
00:06:22,340 --> 00:06:27,080
<font color="#E5E5E5">adjust to situations as they change so</font>

18
00:06:25,430 --> 00:06:28,420
we<font color="#E5E5E5"> just want to maximize our options</font>

19
00:06:27,080 --> 00:06:31,190
here

20
00:06:28,420 --> 00:06:33,560
<font color="#E5E5E5">all right so how</font><font color="#CCCCCC"> does this</font><font color="#E5E5E5"> actually work</font>

21
00:06:31,190 --> 00:06:34,910
so<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of briefly mentioned this so but</font>

22
00:06:33,560 --> 00:06:37,910
what we're gonna<font color="#E5E5E5"> end up doing is we're</font>

23
00:06:34,910 --> 00:06:40,100
going to<font color="#E5E5E5"> end up undoing the process of</font>

24
00:06:37,910 --> 00:06:42,290
the modifications that<font color="#CCCCCC"> get</font><font color="#E5E5E5"> applied to</font>

25
00:06:40,100 --> 00:06:44,930
the PE file that allow it to<font color="#E5E5E5"> exist in</font>

26
00:06:42,290 --> 00:06:47,000
memory<font color="#E5E5E5"> and to be executable so we're</font>

27
00:06:44,930 --> 00:06:48,740
going<font color="#E5E5E5"> to undo everything that</font><font color="#CCCCCC"> ends</font><font color="#E5E5E5"> up</font>

28
00:06:47,000 --> 00:06:50,420
getting<font color="#E5E5E5"> done or do all the steps</font><font color="#CCCCCC"> that</font>

29
00:06:48,740 --> 00:06:53,300
the reflective DLL injection does in

30
00:06:50,420 --> 00:06:55,670
<font color="#CCCCCC">Reverse with a single added step or the</font>

31
00:06:53,300 --> 00:06:58,520
<font color="#CCCCCC">Windows loader</font><font color="#E5E5E5"> so from the perspective</font>

32
00:06:55,670 --> 00:07:01,340
<font color="#CCCCCC">of the unloader it doesn't matter if a</font>

33
00:06:58,520 --> 00:07:03,289
if the<font color="#E5E5E5"> P file that exists in memory was</font>

34
00:07:01,340 --> 00:07:04,789
reflectively<font color="#E5E5E5"> injected or if it was</font>

35
00:07:03,290 --> 00:07:06,530
<font color="#E5E5E5">loaded through the system loader we</font>

36
00:07:04,790 --> 00:07:08,930
don't want to be<font color="#E5E5E5"> dependent on the</font>

37
00:07:06,530 --> 00:07:10,549
reflective DLL injection so<font color="#E5E5E5"> all three of</font>

38
00:07:08,930 --> 00:07:13,280
these techniques are all<font color="#E5E5E5"> completely</font>

39
00:07:10,550 --> 00:07:14,840
<font color="#E5E5E5">usable independently and you</font><font color="#CCCCCC"> can do that</font>

40
00:07:13,280 --> 00:07:16,130
and they were written in<font color="#E5E5E5"> such a way when</font>

41
00:07:14,840 --> 00:07:18,950
I talk about how the codes been released

42
00:07:16,130 --> 00:07:20,210
later but it's kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> hard to think of</font>

43
00:07:18,950 --> 00:07:23,479
<font color="#E5E5E5">a situation where you</font><font color="#CCCCCC"> would want to</font>

44
00:07:20,210 --> 00:07:25,010
utilize one<font color="#E5E5E5"> without at least another one</font>

45
00:07:23,480 --> 00:07:27,110
of them like at<font color="#E5E5E5"> least two of the three</font>

46
00:07:25,010 --> 00:07:29,420
techniques<font color="#CCCCCC"> pump coming together start to</font>

47
00:07:27,110 --> 00:07:31,070
end up making<font color="#E5E5E5"> it really powerful and if</font>

48
00:07:29,420 --> 00:07:32,840
you put<font color="#E5E5E5"> all three together you're gonna</font>

49
00:07:31,070 --> 00:07:34,909
<font color="#E5E5E5">have a really good a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> options</font>

50
00:07:32,840 --> 00:07:37,669
available to<font color="#CCCCCC"> you so what we end up doing</font>

51
00:07:34,910 --> 00:07:39,680
is<font color="#E5E5E5"> we take the we start analyzing the</font>

52
00:07:37,670 --> 00:07:40,820
original<font color="#CCCCCC"> PD file or the PE header</font><font color="#E5E5E5"> that</font>

53
00:07:39,680 --> 00:07:42,590
exists in memory and<font color="#E5E5E5"> we're gonna</font>

54
00:07:40,820 --> 00:07:46,010
recalculate the size of what the<font color="#E5E5E5"> P file</font>

55
00:07:42,590 --> 00:07:48,739
would have<font color="#E5E5E5"> bigs looked on on disk we did</font>

56
00:07:46,010 --> 00:07:50,420
reallocate<font color="#CCCCCC"> that much</font><font color="#E5E5E5"> amount of memory so</font>

57
00:07:48,740 --> 00:07:52,820
<font color="#CCCCCC">that we can have it all there and then</font>

58
00:07:50,420 --> 00:07:54,830
we<font color="#E5E5E5"> start to copy the segments out in</font>

59
00:07:52,820 --> 00:07:56,990
<font color="#E5E5E5">Reverse</font><font color="#CCCCCC"> as they</font><font color="#E5E5E5"> would have been copied</font>

60
00:07:54,830 --> 00:07:58,490
<font color="#CCCCCC">from the</font><font color="#E5E5E5"> PE image and placed into memory</font>

61
00:07:56,990 --> 00:08:00,200
through allocations<font color="#E5E5E5"> we're going to go</font>

62
00:07:58,490 --> 00:08:02,000
find all<font color="#CCCCCC"> of those allocations and we're</font>

63
00:08:00,200 --> 00:08:04,219
going<font color="#E5E5E5"> to copy them back into this region</font>

64
00:08:02,000 --> 00:08:05,390
<font color="#E5E5E5">of</font><font color="#CCCCCC"> memory that</font><font color="#E5E5E5"> we had once those</font><font color="#CCCCCC"> are all</font>

65
00:08:04,220 --> 00:08:07,460
done we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> go through and we're</font>

66
00:08:05,390 --> 00:08:09,110
<font color="#CCCCCC">going to undo all of the relocation</font><font color="#E5E5E5"> so</font>

67
00:08:07,460 --> 00:08:11,270
there's a relocation table that's

68
00:08:09,110 --> 00:08:14,570
available in PE files<font color="#E5E5E5"> that have</font><font color="#CCCCCC"> been</font>

69
00:08:11,270 --> 00:08:16,219
loaded<font color="#E5E5E5"> luckily this data stays stays in</font>

70
00:08:14,570 --> 00:08:16,849
memory<font color="#CCCCCC"> windows doesn't like</font><font color="#E5E5E5"> overwrite it</font>

71
00:08:16,220 --> 00:08:19,189
or anything<font color="#E5E5E5"> like that</font>

72
00:08:16,849 --> 00:08:20,539
so it's going<font color="#CCCCCC"> to exist</font><font color="#E5E5E5"> finally after</font>

73
00:08:19,189 --> 00:08:22,610
that we're going<font color="#E5E5E5"> to undo all of</font><font color="#CCCCCC"> the</font>

74
00:08:20,539 --> 00:08:25,550
imports<font color="#E5E5E5"> and then the last thing which is</font>

75
00:08:22,610 --> 00:08:29,569
a special step that is<font color="#E5E5E5"> the one step that</font>

76
00:08:25,550 --> 00:08:31,490
<font color="#CCCCCC">is added and necessary to do</font><font color="#E5E5E5"> in addition</font>

77
00:08:29,569 --> 00:08:33,019
<font color="#E5E5E5">to like the unloader and reflective DLL</font>

78
00:08:31,490 --> 00:08:35,000
<font color="#E5E5E5">injection is we're actually going to</font>

79
00:08:33,019 --> 00:08:37,190
<font color="#CCCCCC">talk about</font><font color="#E5E5E5"> a new section</font><font color="#CCCCCC"> that has to be</font>

80
00:08:35,000 --> 00:08:39,799
<font color="#CCCCCC">implemented to get a true byte for</font><font color="#E5E5E5"> by</font>

81
00:08:37,190 --> 00:08:42,610
copy<font color="#E5E5E5"> and that is restoring a backup from</font>

82
00:08:39,799 --> 00:08:47,420
<font color="#E5E5E5">a new dot restore section in the PE file</font>

83
00:08:42,610 --> 00:08:49,040
<font color="#CCCCCC">so I've been</font><font color="#E5E5E5"> using PE bear I highly</font>

84
00:08:47,420 --> 00:08:51,920
<font color="#E5E5E5">recommend it</font><font color="#CCCCCC"> to do a lot of</font><font color="#E5E5E5"> this</font>

85
00:08:49,040 --> 00:08:54,170
<font color="#CCCCCC">research on this tool is fantastic what</font>

86
00:08:51,920 --> 00:08:55,969
<font color="#E5E5E5">we actually have right here is in</font><font color="#CCCCCC"> this</font>

87
00:08:54,170 --> 00:08:59,420
just<font color="#E5E5E5"> like kind of default view we have</font>

88
00:08:55,970 --> 00:09:01,639
the reflective unloader<font color="#E5E5E5"> DLL is being</font>

89
00:08:59,420 --> 00:09:03,620
<font color="#E5E5E5">analyzed and right on down here in the</font>

90
00:09:01,639 --> 00:09:06,259
<font color="#CCCCCC">bottom we have on the left</font><font color="#E5E5E5"> hand side we</font>

91
00:09:03,620 --> 00:09:09,560
have have how the<font color="#E5E5E5"> PE file exists on disk</font>

92
00:09:06,259 --> 00:09:12,259
<font color="#CCCCCC">and over here in the virtual we have how</font>

93
00:09:09,560 --> 00:09:14,209
it exists in memory so we can see that

94
00:09:12,259 --> 00:09:15,529
<font color="#CCCCCC">these regions are</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> larger when</font>

95
00:09:14,209 --> 00:09:17,810
they're on disk<font color="#E5E5E5"> and that's just because</font>

96
00:09:15,529 --> 00:09:19,399
<font color="#E5E5E5">of how it breaks it out</font><font color="#CCCCCC"> when it is in</font>

97
00:09:17,810 --> 00:09:21,680
memory<font color="#CCCCCC"> you see</font><font color="#E5E5E5"> the text section is still</font>

98
00:09:19,399 --> 00:09:23,360
the largest<font color="#E5E5E5"> those are the same size for</font>

99
00:09:21,680 --> 00:09:25,638
scale but what<font color="#E5E5E5"> we notice is</font><font color="#CCCCCC"> we have</font>

100
00:09:23,360 --> 00:09:27,050
these gaps those kind<font color="#E5E5E5"> of like</font><font color="#CCCCCC"> grey lines</font>

101
00:09:25,639 --> 00:09:28,579
in there and<font color="#E5E5E5"> that's just how those</font>

102
00:09:27,050 --> 00:09:30,740
different sections<font color="#CCCCCC"> get</font><font color="#E5E5E5"> mapped as they</font>

103
00:09:28,579 --> 00:09:32,899
<font color="#E5E5E5">get loaded up into memory so</font><font color="#CCCCCC"> the</font>

104
00:09:30,740 --> 00:09:34,819
conversion<font color="#E5E5E5"> from how it exists on disk</font>

105
00:09:32,899 --> 00:09:37,189
into<font color="#E5E5E5"> memory is what is handled by either</font>

106
00:09:34,819 --> 00:09:39,620
the<font color="#CCCCCC"> system</font><font color="#E5E5E5"> load or the load</font><font color="#CCCCCC"> library that</font>

107
00:09:37,189 --> 00:09:40,969
<font color="#CCCCCC">windows provides</font><font color="#E5E5E5"> or the reflective DLL</font>

108
00:09:39,620 --> 00:09:43,880
injection it's going to take<font color="#E5E5E5"> care of all</font>

109
00:09:40,970 --> 00:09:46,040
this for<font color="#CCCCCC"> us so we</font><font color="#E5E5E5"> have two options</font><font color="#CCCCCC"> for</font>

110
00:09:43,880 --> 00:09:47,389
<font color="#CCCCCC">going from</font><font color="#E5E5E5"> the raw on disk into the</font>

111
00:09:46,040 --> 00:09:48,709
virtual<font color="#E5E5E5"> and now what we want to do is we</font>

112
00:09:47,389 --> 00:09:53,870
want<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to undo that and go from</font>

113
00:09:48,709 --> 00:09:57,439
<font color="#CCCCCC">the virtual back to the raw okay so the</font>

114
00:09:53,870 --> 00:09:59,899
writable sections are are the enemy in

115
00:09:57,439 --> 00:10:01,730
this case the<font color="#CCCCCC"> reason why is because</font><font color="#E5E5E5"> this</font>

116
00:09:59,899 --> 00:10:03,410
is where<font color="#E5E5E5"> any</font><font color="#CCCCCC"> kind of like global</font>

117
00:10:01,730 --> 00:10:05,240
variables are<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be stored</font><font color="#E5E5E5"> even if</font>

118
00:10:03,410 --> 00:10:06,439
you don't utilize global variables if

119
00:10:05,240 --> 00:10:08,480
you're writing a<font color="#CCCCCC"> C implant you're</font>

120
00:10:06,439 --> 00:10:10,670
probably<font color="#E5E5E5"> using the visual C</font><font color="#CCCCCC"> one-time</font>

121
00:10:08,480 --> 00:10:12,079
visual C runtime<font color="#E5E5E5"> is</font><font color="#CCCCCC"> going to have</font><font color="#E5E5E5"> global</font>

122
00:10:10,670 --> 00:10:12,920
<font color="#E5E5E5">variables so even if you don't write any</font>

123
00:10:12,079 --> 00:10:14,870
in<font color="#E5E5E5"> your code</font>

124
00:10:12,920 --> 00:10:16,910
they<font color="#E5E5E5"> probably exist unless you're for</font>

125
00:10:14,870 --> 00:10:18,130
some reason not using the runtime<font color="#CCCCCC"> itself</font>

126
00:10:16,910 --> 00:10:20,509
and you're doing<font color="#CCCCCC"> a lot of like really</font>

127
00:10:18,130 --> 00:10:23,060
in-depth stuff and repeating a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font>

128
00:10:20,509 --> 00:10:24,620
things which you're free to do but what

129
00:10:23,060 --> 00:10:26,899
<font color="#E5E5E5">we wanted was</font><font color="#CCCCCC"> the ability to write a</font>

130
00:10:24,620 --> 00:10:28,339
normal DLL and<font color="#E5E5E5"> not really have to</font><font color="#CCCCCC"> worry</font>

131
00:10:26,899 --> 00:10:30,209
<font color="#E5E5E5">about the intrinsics of getting it</font>

132
00:10:28,339 --> 00:10:32,160
unloaded<font color="#CCCCCC"> eventually so</font>

133
00:10:30,209 --> 00:10:34,229
in order for<font color="#CCCCCC"> this technique to work</font><font color="#E5E5E5"> what</font>

134
00:10:32,160 --> 00:10:36,360
we end up<font color="#CCCCCC"> doing is we</font><font color="#E5E5E5"> analyze</font><font color="#CCCCCC"> the PE</font>

135
00:10:34,230 --> 00:10:38,490
file after it has been compiled<font color="#E5E5E5"> so</font>

136
00:10:36,360 --> 00:10:40,980
before it gets<font color="#CCCCCC"> injected because</font><font color="#E5E5E5"> we know</font>

137
00:10:38,490 --> 00:10:43,800
that<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> this to</font><font color="#CCCCCC"> be unloaded we run</font>

138
00:10:40,980 --> 00:10:45,629
a patch script<font color="#E5E5E5"> a PE patch which has been</font>

139
00:10:43,800 --> 00:10:47,490
released<font color="#CCCCCC"> that is going to analyze the PE</font>

140
00:10:45,629 --> 00:10:49,350
file<font color="#E5E5E5"> and it's going to go through each</font>

141
00:10:47,490 --> 00:10:51,389
of<font color="#CCCCCC"> the sections it's going to find the</font>

142
00:10:49,350 --> 00:10:53,670
sections that<font color="#CCCCCC"> are marked as writable and</font>

143
00:10:51,389 --> 00:10:55,829
we're going to back those copies<font color="#E5E5E5"> we're</font>

144
00:10:53,670 --> 00:10:58,019
<font color="#E5E5E5">gonna</font><font color="#CCCCCC"> backup copies of those into the</font>

145
00:10:55,829 --> 00:11:00,689
dot restore<font color="#E5E5E5"> section and that</font><font color="#CCCCCC"> dot restore</font>

146
00:10:58,019 --> 00:11:02,100
sections<font color="#E5E5E5"> can be marked as read-only</font><font color="#CCCCCC"> now</font>

147
00:11:00,689 --> 00:11:03,779
because nothing in<font color="#E5E5E5"> the actual code</font>

148
00:11:02,100 --> 00:11:05,699
refers to this dot restore section

149
00:11:03,779 --> 00:11:07,579
<font color="#E5E5E5">except for the unloader itself that</font>

150
00:11:05,699 --> 00:11:09,899
copies can be<font color="#E5E5E5"> able to remain in memory</font>

151
00:11:07,579 --> 00:11:12,479
<font color="#E5E5E5">unmodified and what that allows us to do</font>

152
00:11:09,899 --> 00:11:15,149
is the normal<font color="#CCCCCC"> C program can do whatever</font>

153
00:11:12,480 --> 00:11:16,800
it needs<font color="#E5E5E5"> to it can utilize the</font><font color="#CCCCCC"> dot data</font>

154
00:11:15,149 --> 00:11:18,119
<font color="#CCCCCC">section it can change all of</font><font color="#E5E5E5"> the</font>

155
00:11:16,800 --> 00:11:20,128
different things<font color="#E5E5E5"> it needs to in the</font>

156
00:11:18,119 --> 00:11:22,019
writable memory it doesn't need to worry

157
00:11:20,129 --> 00:11:24,929
<font color="#E5E5E5">about any of</font><font color="#CCCCCC"> that but when</font><font color="#E5E5E5"> it comes time</font>

158
00:11:22,019 --> 00:11:27,779
<font color="#CCCCCC">to unload itself we're going to copy</font>

159
00:11:24,929 --> 00:11:29,369
<font color="#E5E5E5">those changes into</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> PE file that</font>

160
00:11:27,779 --> 00:11:31,199
would get exists on disk<font color="#E5E5E5"> but that's</font>

161
00:11:29,369 --> 00:11:32,999
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> give us a cupped copy it's not</font>

162
00:11:31,199 --> 00:11:34,769
gonna<font color="#E5E5E5"> be a true byte for byte match so</font>

163
00:11:32,999 --> 00:11:36,720
that's when the very last<font color="#E5E5E5"> step is we're</font>

164
00:11:34,769 --> 00:11:38,970
gonna find<font color="#E5E5E5"> the stop restore section if</font>

165
00:11:36,720 --> 00:11:40,679
it exists<font color="#E5E5E5"> and we're going to overwrite</font>

166
00:11:38,970 --> 00:11:43,290
<font color="#E5E5E5">the corrupted changes that have been</font>

167
00:11:40,679 --> 00:11:44,670
<font color="#E5E5E5">made from the</font><font color="#CCCCCC"> P file actually</font><font color="#E5E5E5"> wanting</font>

168
00:11:43,290 --> 00:11:46,949
and being utilized so we're going<font color="#E5E5E5"> to</font>

169
00:11:44,670 --> 00:11:48,389
<font color="#E5E5E5">restore that copy right on over and</font>

170
00:11:46,949 --> 00:11:51,779
<font color="#CCCCCC">that's what allows us to get a true byte</font>

171
00:11:48,389 --> 00:11:53,009
<font color="#CCCCCC">for byte</font><font color="#E5E5E5"> copy now the unloader is</font>

172
00:11:51,779 --> 00:11:56,220
written in such a way<font color="#CCCCCC"> that you could</font>

173
00:11:53,009 --> 00:11:57,809
unload<font color="#E5E5E5"> any PE file that is that it's in</font>

174
00:11:56,220 --> 00:12:00,329
in memory<font color="#E5E5E5"> you just have to have pass it</font>

175
00:11:57,809 --> 00:12:02,459
a handle<font color="#E5E5E5"> this last step of doing</font><font color="#CCCCCC"> the dot</font>

176
00:12:00,329 --> 00:12:04,138
resource section is optional<font color="#CCCCCC"> it checks</font>

177
00:12:02,459 --> 00:12:06,329
<font color="#CCCCCC">to see if they don't resource section</font>

178
00:12:04,139 --> 00:12:08,519
exists and if it does it handles<font color="#E5E5E5"> it as</font>

179
00:12:06,329 --> 00:12:10,589
appropriate<font color="#CCCCCC"> but if you wanted</font><font color="#E5E5E5"> to for</font>

180
00:12:08,519 --> 00:12:12,179
whatever reason unload a PE file that

181
00:12:10,589 --> 00:12:13,980
<font color="#E5E5E5">doesn't exist on disk which you're</font>

182
00:12:12,179 --> 00:12:15,629
basically<font color="#E5E5E5"> looking at malware at this</font>

183
00:12:13,980 --> 00:12:18,329
point<font color="#E5E5E5"> because you can't delete a file</font>

184
00:12:15,629 --> 00:12:20,009
that<font color="#E5E5E5"> is loaded up an executable file</font>

185
00:12:18,329 --> 00:12:22,410
that's loaded up into memory<font color="#E5E5E5"> that's why</font>

186
00:12:20,009 --> 00:12:23,819
if you<font color="#CCCCCC"> ever</font><font color="#E5E5E5"> like one in executable on</font>

187
00:12:22,410 --> 00:12:25,920
<font color="#CCCCCC">Windows</font><font color="#E5E5E5"> and you go and you like try to</font>

188
00:12:23,819 --> 00:12:28,319
delete it you can't delete<font color="#E5E5E5"> it</font><font color="#CCCCCC"> while it's</font>

189
00:12:25,920 --> 00:12:29,759
running<font color="#E5E5E5"> it just just doesn't work and</font>

190
00:12:28,319 --> 00:12:32,790
<font color="#E5E5E5">that's because Windows is referencing</font>

191
00:12:29,759 --> 00:12:34,589
that copy so but if you wanted<font color="#E5E5E5"> to if you</font>

192
00:12:32,790 --> 00:12:36,059
<font color="#E5E5E5">had some kind</font><font color="#CCCCCC"> of a section the only</font>

193
00:12:34,589 --> 00:12:37,860
example I<font color="#CCCCCC"> could</font><font color="#E5E5E5"> think of would be would</font>

194
00:12:36,059 --> 00:12:39,209
be<font color="#E5E5E5"> like malware if it had done this type</font>

195
00:12:37,860 --> 00:12:43,410
of<font color="#E5E5E5"> a thing</font><font color="#CCCCCC"> and you needed to</font><font color="#E5E5E5"> dump it out</font>

196
00:12:39,209 --> 00:12:44,189
<font color="#CCCCCC">onto disk so</font><font color="#E5E5E5"> you can do that so a couple</font>

197
00:12:43,410 --> 00:12:46,920
<font color="#E5E5E5">of advantages</font><font color="#CCCCCC"> to</font>

198
00:12:44,190 --> 00:12:49,650
with it this way<font color="#CCCCCC"> first one like I had</font>

199
00:12:46,920 --> 00:12:51,839
<font color="#CCCCCC">already mentioned the original implant</font>

200
00:12:49,650 --> 00:12:53,370
<font color="#E5E5E5">or the original</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> doesn't have to be</font>

201
00:12:51,840 --> 00:12:55,470
aware of the fact that it's going to<font color="#E5E5E5"> be</font>

202
00:12:53,370 --> 00:12:57,060
unloaded<font color="#CCCCCC"> you can basically drop</font><font color="#E5E5E5"> this in</font>

203
00:12:55,470 --> 00:12:58,650
and compile that<font color="#E5E5E5"> it can utilize its</font>

204
00:12:57,060 --> 00:13:01,140
writable sections you can<font color="#CCCCCC"> have all your</font>

205
00:12:58,650 --> 00:13:03,660
global variables if you need to there's

206
00:13:01,140 --> 00:13:05,520
no problem those remain marked as

207
00:13:03,660 --> 00:13:07,920
writable so<font color="#E5E5E5"> in the section</font><font color="#CCCCCC"> or when the</font>

208
00:13:05,520 --> 00:13:09,630
PE loader<font color="#E5E5E5"> adds those into memory and</font>

209
00:13:07,920 --> 00:13:10,770
maps<font color="#E5E5E5"> those out for</font><font color="#CCCCCC"> you it's</font><font color="#E5E5E5"> still</font><font color="#CCCCCC"> gonna</font>

210
00:13:09,630 --> 00:13:12,930
<font color="#E5E5E5">have</font><font color="#CCCCCC"> the proper permissions</font><font color="#E5E5E5"> you're not</font>

211
00:13:10,770 --> 00:13:16,020
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> have any issues</font><font color="#CCCCCC"> with that</font><font color="#E5E5E5"> the dot</font>

212
00:13:12,930 --> 00:13:17,819
restore section<font color="#E5E5E5"> also only backs up the</font>

213
00:13:16,020 --> 00:13:19,500
copies<font color="#CCCCCC"> of the writable</font><font color="#E5E5E5"> section so we</font>

214
00:13:17,820 --> 00:13:22,230
don't want<font color="#E5E5E5"> to like double</font><font color="#CCCCCC"> the size of</font>

215
00:13:19,500 --> 00:13:23,730
<font color="#CCCCCC">our</font><font color="#E5E5E5"> buying area by keeping a backup of</font>

216
00:13:22,230 --> 00:13:25,470
like the entire<font color="#E5E5E5"> thing because that's</font>

217
00:13:23,730 --> 00:13:27,810
unnecessary<font color="#E5E5E5"> at least</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> too large of</font><font color="#CCCCCC"> a</font>

218
00:13:25,470 --> 00:13:29,220
size once again<font color="#E5E5E5"> downloading that and</font>

219
00:13:27,810 --> 00:13:30,540
traversing that across the security

220
00:13:29,220 --> 00:13:31,950
boundaries is probably going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be a bad</font>

221
00:13:30,540 --> 00:13:34,170
idea<font color="#E5E5E5"> so we want to keep it as small</font><font color="#CCCCCC"> as</font>

222
00:13:31,950 --> 00:13:35,490
<font color="#E5E5E5">possible so we</font><font color="#CCCCCC"> only backup</font><font color="#E5E5E5"> what is</font>

223
00:13:34,170 --> 00:13:38,969
necessary<font color="#E5E5E5"> and those are the writable</font>

224
00:13:35,490 --> 00:13:41,130
sections<font color="#CCCCCC"> there is a section that is</font>

225
00:13:38,970 --> 00:13:42,930
<font color="#E5E5E5">marked as I</font><font color="#CCCCCC"> believe there's a flag</font>

226
00:13:41,130 --> 00:13:45,540
<font color="#E5E5E5">called disposable that gets marked on</font>

227
00:13:42,930 --> 00:13:48,140
<font color="#E5E5E5">user mode</font><font color="#CCCCCC"> P files sometimes and it</font>

228
00:13:45,540 --> 00:13:50,699
<font color="#CCCCCC">basically says to the loader that that</font>

229
00:13:48,140 --> 00:13:52,770
section<font color="#CCCCCC"> that once it is loaded up can</font>

230
00:13:50,700 --> 00:13:54,810
actually<font color="#CCCCCC"> be like released and gotten rid</font>

231
00:13:52,770 --> 00:13:56,939
of apparently<font color="#E5E5E5"> that's an older flag that</font>

232
00:13:54,810 --> 00:13:59,790
is utilized primarily by kernel drivers

233
00:13:56,940 --> 00:14:01,950
so the pea patch script<font color="#E5E5E5"> also just clears</font>

234
00:13:59,790 --> 00:14:03,569
that flag out<font color="#CCCCCC"> it shouldn't be utilized</font>

235
00:14:01,950 --> 00:14:04,800
according to<font color="#CCCCCC"> Microsoft's documentation</font>

236
00:14:03,570 --> 00:14:06,960
but<font color="#E5E5E5"> I can't think of why you would be</font>

237
00:14:04,800 --> 00:14:08,219
set on a user mode PE file<font color="#E5E5E5"> so we just</font>

238
00:14:06,960 --> 00:14:10,320
clear it anyways just<font color="#E5E5E5"> to be on the safe</font>

239
00:14:08,220 --> 00:14:12,960
side but we're gonna take<font color="#E5E5E5"> care</font><font color="#CCCCCC"> of those</font>

240
00:14:10,320 --> 00:14:15,240
those two<font color="#CCCCCC"> things so primarily</font><font color="#E5E5E5"> the</font>

241
00:14:12,960 --> 00:14:18,080
writable section so with that<font color="#E5E5E5"> let's go</font>

242
00:14:15,240 --> 00:14:22,740
into demo number<font color="#E5E5E5"> one and we're going to</font>

243
00:14:18,080 --> 00:14:25,500
unload this PE file right<font color="#CCCCCC"> here okay so</font>

244
00:14:22,740 --> 00:14:29,300
<font color="#E5E5E5">we have this reflective on loader dot</font>

245
00:14:25,500 --> 00:14:31,080
x64 right here<font color="#CCCCCC"> I have a file hashes</font>

246
00:14:29,300 --> 00:14:31,680
<font color="#E5E5E5">extension so we're gonna pull</font><font color="#CCCCCC"> out the</font>

247
00:14:31,080 --> 00:14:34,190
sha-1

248
00:14:31,680 --> 00:14:38,040
of this one<font color="#E5E5E5"> right here gonna do</font><font color="#CCCCCC"> a copy</font>

249
00:14:34,190 --> 00:14:39,210
now what we're gonna<font color="#E5E5E5"> do is gonna run</font>

250
00:14:38,040 --> 00:14:40,230
kalcker in and pick on Cal because

251
00:14:39,210 --> 00:14:48,030
<font color="#E5E5E5">nobody likes calc</font>

252
00:14:40,230 --> 00:14:50,730
nobody likes math alright<font color="#CCCCCC"> 4352 so we're</font>

253
00:14:48,030 --> 00:14:53,610
gonna utilize the reflective injector

254
00:14:50,730 --> 00:14:56,900
<font color="#CCCCCC">just the standard stock one that came</font>

255
00:14:53,610 --> 00:14:58,170
<font color="#E5E5E5">with the reflective DLL injection</font>

256
00:14:56,900 --> 00:15:00,420
<font color="#CCCCCC">application</font><font color="#E5E5E5"> just</font>

257
00:14:58,170 --> 00:15:10,829
the one right off the shelf<font color="#CCCCCC"> from github</font>

258
00:15:00,420 --> 00:15:12,770
<font color="#CCCCCC">I already have</font><font color="#E5E5E5"> it compiled jacked 64</font><font color="#CCCCCC"> all</font>

259
00:15:10,830 --> 00:15:15,660
right<font color="#E5E5E5"> all right so we</font><font color="#CCCCCC"> just injected our</font>

260
00:15:12,770 --> 00:15:18,150
<font color="#E5E5E5">unloader up into calculator we have this</font>

261
00:15:15,660 --> 00:15:19,500
waiting<font color="#E5E5E5"> select ok to proceed window you</font>

262
00:15:18,150 --> 00:15:22,050
can see it's actually<font color="#E5E5E5"> attached to the</font>

263
00:15:19,500 --> 00:15:23,850
<font color="#CCCCCC">calc process</font><font color="#E5E5E5"> so we took our PE file and</font>

264
00:15:22,050 --> 00:15:25,979
we reflectively loaded it up into

265
00:15:23,850 --> 00:15:29,820
calculator so calculator is now infected

266
00:15:25,980 --> 00:15:31,830
with this with this image<font color="#E5E5E5"> now</font><font color="#CCCCCC"> because it</font>

267
00:15:29,820 --> 00:15:33,990
was reflectively<font color="#CCCCCC"> unlit me it was</font>

268
00:15:31,830 --> 00:15:39,000
reflectively<font color="#E5E5E5"> loaded it's not actually</font>

269
00:15:33,990 --> 00:15:42,380
tied on memory so we can delete this<font color="#E5E5E5"> my</font>

270
00:15:39,000 --> 00:15:42,380
system<font color="#CCCCCC"> frees no</font>

271
00:16:01,379 --> 00:16:05,720
and<font color="#E5E5E5"> Explorer crashed on me</font>

272
00:16:07,019 --> 00:16:22,019
I have I've not seen that<font color="#E5E5E5"> happen</font><font color="#CCCCCC"> before</font>

273
00:16:15,660 --> 00:16:23,249
I was only infecting calc<font color="#CCCCCC"> and now</font>

274
00:16:22,019 --> 00:16:25,109
everything's respond okay<font color="#CCCCCC"> so we're gonna</font>

275
00:16:23,249 --> 00:16:28,559
rewind we're just gonna run that through

276
00:16:25,109 --> 00:16:34,459
one more<font color="#E5E5E5"> time calc</font>

277
00:16:28,559 --> 00:16:38,939
okay so cow<font color="#CCCCCC"> cuts down here at</font><font color="#E5E5E5"> 10:32</font>

278
00:16:34,459 --> 00:16:41,608
<font color="#CCCCCC">sport in a restart so it's all good</font>

279
00:16:38,939 --> 00:16:42,929
<font color="#CCCCCC">alright so we just did</font><font color="#E5E5E5"> that again we</font>

280
00:16:41,609 --> 00:16:43,859
have that window right<font color="#CCCCCC"> there what we're</font>

281
00:16:42,929 --> 00:16:46,319
going<font color="#E5E5E5"> to do though is we're going to</font>

282
00:16:43,859 --> 00:16:48,839
<font color="#E5E5E5">show that's reflectively loaded and</font>

283
00:16:46,319 --> 00:16:50,728
we're just<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> delete the original on</font>

284
00:16:48,839 --> 00:16:53,129
<font color="#E5E5E5">disk now I still have that hash in my</font>

285
00:16:50,729 --> 00:16:55,199
clipboard<font color="#CCCCCC"> then</font><font color="#E5E5E5"> we select select ok</font><font color="#CCCCCC"> to</font>

286
00:16:53,129 --> 00:16:57,689
proceed<font color="#CCCCCC"> that's purely</font><font color="#E5E5E5"> there to give me</font>

287
00:16:55,199 --> 00:16:59,098
time<font color="#CCCCCC"> to go and delete that file out and</font>

288
00:16:57,689 --> 00:17:00,299
as<font color="#E5E5E5"> you can see it got dumped back out</font>

289
00:16:59,099 --> 00:17:02,489
<font color="#CCCCCC">onto</font><font color="#E5E5E5"> disk that's just what this</font>

290
00:17:00,299 --> 00:17:04,859
<font color="#CCCCCC">proof-of-concept does it reconstructs</font>

291
00:17:02,489 --> 00:17:07,709
itself<font color="#E5E5E5"> writes itself back out onto disk</font>

292
00:17:04,859 --> 00:17:09,839
<font color="#E5E5E5">and so now what we're</font><font color="#CCCCCC"> going to do is to</font>

293
00:17:07,709 --> 00:17:11,370
prove<font color="#CCCCCC"> that we have</font><font color="#E5E5E5"> the exact original</font>

294
00:17:09,839 --> 00:17:16,529
copy again<font color="#E5E5E5"> is we're gonna compare the</font>

295
00:17:11,369 --> 00:17:19,500
hashes and<font color="#CCCCCC"> control-v the sha-1</font><font color="#E5E5E5"> to the</font>

296
00:17:16,529 --> 00:17:21,628
exact same so<font color="#CCCCCC"> that got put up into</font>

297
00:17:19,500 --> 00:17:23,490
memory we deleted it<font color="#E5E5E5"> we brought it back</font>

298
00:17:21,628 --> 00:17:24,839
<font color="#CCCCCC">out of memory and</font><font color="#E5E5E5"> dropped it back onto</font>

299
00:17:23,490 --> 00:17:26,490
disk which is<font color="#E5E5E5"> what we would</font><font color="#CCCCCC"> be dealing</font>

300
00:17:24,839 --> 00:17:28,198
if<font color="#E5E5E5"> we wanted to do like persistence</font>

301
00:17:26,490 --> 00:17:30,570
through<font color="#E5E5E5"> like</font><font color="#CCCCCC"> comm hijacking</font><font color="#E5E5E5"> or something</font>

302
00:17:28,199 --> 00:17:31,980
along<font color="#E5E5E5"> those</font><font color="#CCCCCC"> lines if you wanted to</font>

303
00:17:30,570 --> 00:17:33,658
rename<font color="#E5E5E5"> it put into another</font><font color="#CCCCCC"> location</font><font color="#E5E5E5"> of</font>

304
00:17:31,980 --> 00:17:36,480
<font color="#CCCCCC">course</font><font color="#E5E5E5"> that's all arbitrary strictly</font>

305
00:17:33,659 --> 00:17:39,299
just<font color="#E5E5E5"> just proof concept</font><font color="#CCCCCC"> to just show</font>

306
00:17:36,480 --> 00:17:40,679
that<font color="#E5E5E5"> but we did not have to have</font><font color="#CCCCCC"> it</font>

307
00:17:39,299 --> 00:17:48,179
<font color="#E5E5E5">exist on disk and we were able</font><font color="#CCCCCC"> to get</font>

308
00:17:40,679 --> 00:17:50,490
the exact same<font color="#E5E5E5"> one out</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so in</font>

309
00:17:48,179 --> 00:17:53,429
order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> utilize this this is all solve</font>

310
00:17:50,490 --> 00:17:54,899
public now at that you actually<font color="#E5E5E5"> can't</font>

311
00:17:53,429 --> 00:17:56,580
read<font color="#CCCCCC"> that at all that is way too light</font>

312
00:17:54,899 --> 00:17:59,360
<font color="#E5E5E5">against the white but it's on github</font>

313
00:17:56,580 --> 00:18:02,519
<font color="#E5E5E5">under</font><font color="#CCCCCC"> zero Steiner slash reflective -</font>

314
00:17:59,360 --> 00:18:04,350
polymorphism it's all right there<font color="#E5E5E5"> so the</font>

315
00:18:02,519 --> 00:18:05,850
core API that allows all of<font color="#CCCCCC"> this to</font>

316
00:18:04,350 --> 00:18:07,709
function<font color="#E5E5E5"> is just just two simple</font>

317
00:18:05,850 --> 00:18:10,230
functions you have<font color="#E5E5E5"> the unloader which is</font>

318
00:18:07,710 --> 00:18:12,119
going to allocate<font color="#CCCCCC"> that P region for you</font>

319
00:18:10,230 --> 00:18:13,510
to write it<font color="#E5E5E5"> out</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> it's gonna do all the</font>

320
00:18:12,119 --> 00:18:14,530
unloading for you

321
00:18:13,510 --> 00:18:16,150
and then you have<font color="#E5E5E5"> another one to clean</font>

322
00:18:14,530 --> 00:18:19,290
up after yourself and<font color="#E5E5E5"> to go ahead and</font>

323
00:18:16,150 --> 00:18:22,600
free it<font color="#E5E5E5"> I've tested on 32-bit and 64-bit</font>

324
00:18:19,290 --> 00:18:26,050
<font color="#CCCCCC">DLLs</font><font color="#E5E5E5"> in executables</font><font color="#CCCCCC"> I don't really know</font>

325
00:18:22,600 --> 00:18:27,370
<font color="#CCCCCC">I originally did not</font><font color="#E5E5E5"> really know why</font>

326
00:18:26,050 --> 00:18:29,200
you'd<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> do it on an executable</font>

327
00:18:27,370 --> 00:18:30,489
because an executable is going to not<font color="#CCCCCC"> be</font>

328
00:18:29,200 --> 00:18:31,980
<font color="#E5E5E5">able to be reflectively loaded so you</font>

329
00:18:30,490 --> 00:18:35,080
<font color="#CCCCCC">won't be able</font><font color="#E5E5E5"> to delete it off of memory</font>

330
00:18:31,980 --> 00:18:37,600
until we<font color="#E5E5E5"> combine it with the second half</font>

331
00:18:35,080 --> 00:18:40,899
<font color="#E5E5E5">of this talk which</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> brand new</font><font color="#CCCCCC"> tree</font>

332
00:18:37,600 --> 00:18:42,669
<font color="#CCCCCC">search so one</font><font color="#E5E5E5"> final thing it's all fully</font>

333
00:18:40,900 --> 00:18:44,230
documented in the readme<font color="#E5E5E5"> all the code is</font>

334
00:18:42,670 --> 00:18:45,640
documented<font color="#E5E5E5"> actually in the code if you</font>

335
00:18:44,230 --> 00:18:46,840
<font color="#E5E5E5">go ahead and like download the C code</font>

336
00:18:45,640 --> 00:18:48,730
<font color="#E5E5E5">like all the parameters and everything</font>

337
00:18:46,840 --> 00:18:50,709
like that<font color="#E5E5E5"> are all</font><font color="#CCCCCC"> documented</font><font color="#E5E5E5"> all up into</font>

338
00:18:48,730 --> 00:18:54,520
there as well as the demonstration shown

339
00:18:50,710 --> 00:18:58,420
is in<font color="#CCCCCC"> other releases so move on to the</font>

340
00:18:54,520 --> 00:19:03,129
<font color="#CCCCCC">brand-new stuff this is the</font><font color="#E5E5E5"> cool part</font><font color="#CCCCCC"> ok</font>

341
00:18:58,420 --> 00:19:04,840
so we now have the ability<font color="#CCCCCC"> to have a dll</font>

342
00:19:03,130 --> 00:19:06,970
file that's been reflectively loaded and

343
00:19:04,840 --> 00:19:09,220
it and it's running<font color="#E5E5E5"> up in memory and we</font>

344
00:19:06,970 --> 00:19:10,750
can we can<font color="#E5E5E5"> unload it into memory we can</font>

345
00:19:09,220 --> 00:19:13,060
<font color="#E5E5E5">write it out to disk or we can</font><font color="#CCCCCC"> reenact</font>

346
00:19:10,750 --> 00:19:15,250
into another<font color="#CCCCCC"> process if we</font><font color="#E5E5E5"> want to we</font>

347
00:19:13,060 --> 00:19:16,780
<font color="#CCCCCC">have all</font><font color="#E5E5E5"> of these options but what we</font>

348
00:19:15,250 --> 00:19:18,940
were finding at work is<font color="#E5E5E5"> that we were</font>

349
00:19:16,780 --> 00:19:20,770
<font color="#CCCCCC">getting</font><font color="#E5E5E5"> in these situations where you</font>

350
00:19:18,940 --> 00:19:22,980
know maybe we<font color="#E5E5E5"> want to drop an executable</font>

351
00:19:20,770 --> 00:19:25,600
and get<font color="#E5E5E5"> that into</font><font color="#CCCCCC"> the client well if we</font>

352
00:19:22,980 --> 00:19:26,980
reflectively unload that that<font color="#E5E5E5"> doesn't</font>

353
00:19:25,600 --> 00:19:29,560
<font color="#E5E5E5">work out really well when we want to</font>

354
00:19:26,980 --> 00:19:31,990
<font color="#E5E5E5">have a second session we can't inject an</font>

355
00:19:29,560 --> 00:19:33,940
executable<font color="#CCCCCC"> so now what we want</font><font color="#E5E5E5"> is we</font>

356
00:19:31,990 --> 00:19:35,590
want<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ability to take that executable</font>

357
00:19:33,940 --> 00:19:38,950
that's in memory<font color="#CCCCCC"> and we want to patch</font>

358
00:19:35,590 --> 00:19:41,080
that and<font color="#E5E5E5"> update it into a DLL so we can</font>

359
00:19:38,950 --> 00:19:43,450
transform it<font color="#E5E5E5"> and then inject that into</font>

360
00:19:41,080 --> 00:19:45,399
<font color="#CCCCCC">another process</font><font color="#E5E5E5"> and from that point it</font>

361
00:19:43,450 --> 00:19:47,860
<font color="#CCCCCC">doesn't matter if the original</font><font color="#E5E5E5"> implant</font>

362
00:19:45,400 --> 00:19:49,330
is a<font color="#CCCCCC"> DLL or an executable</font><font color="#E5E5E5"> we can unload</font>

363
00:19:47,860 --> 00:19:51,159
it<font color="#E5E5E5"> we can transform it</font><font color="#CCCCCC"> into whatever</font>

364
00:19:49,330 --> 00:19:52,720
<font color="#E5E5E5">format we want if</font><font color="#CCCCCC"> we want to infect</font>

365
00:19:51,160 --> 00:19:53,920
another<font color="#E5E5E5"> process it's gonna be a DLL if</font>

366
00:19:52,720 --> 00:19:55,590
we want<font color="#E5E5E5"> to drop</font><font color="#CCCCCC"> it onto disk for</font>

367
00:19:53,920 --> 00:19:59,200
persistence<font color="#E5E5E5"> it's gonna be an executable</font>

368
00:19:55,590 --> 00:20:01,750
so<font color="#E5E5E5"> this opens up a lot more doors for</font>

369
00:19:59,200 --> 00:20:04,330
<font color="#E5E5E5">for persistence we can sort of have it</font>

370
00:20:01,750 --> 00:20:06,130
do like<font color="#E5E5E5"> automated detection</font><font color="#CCCCCC"> of like what</font>

371
00:20:04,330 --> 00:20:07,810
is the best<font color="#E5E5E5"> approach right</font><font color="#CCCCCC"> now if you</font>

372
00:20:06,130 --> 00:20:09,400
have like a super cool<font color="#CCCCCC"> comm hijacking</font>

373
00:20:07,810 --> 00:20:10,960
attack if anyone's done<font color="#E5E5E5"> comm hijacking</font>

374
00:20:09,400 --> 00:20:12,940
you know that you have to have a DLL

375
00:20:10,960 --> 00:20:14,320
<font color="#E5E5E5">well if your original implant was an exe</font>

376
00:20:12,940 --> 00:20:16,150
we don't want to go have to<font color="#CCCCCC"> go back to</font>

377
00:20:14,320 --> 00:20:17,919
like<font color="#CCCCCC"> Ground Zero</font><font color="#E5E5E5"> and have to like re</font>

378
00:20:16,150 --> 00:20:19,870
transfer up a<font color="#CCCCCC"> DLL that</font><font color="#E5E5E5"> defeats</font><font color="#CCCCCC"> the whole</font>

379
00:20:17,920 --> 00:20:22,390
point<font color="#E5E5E5"> of all of</font><font color="#CCCCCC"> this we</font><font color="#E5E5E5"> only want to</font>

380
00:20:19,870 --> 00:20:24,760
traverse one PE file<font color="#E5E5E5"> across the security</font>

381
00:20:22,390 --> 00:20:26,260
boundary ideally so we're going<font color="#E5E5E5"> to do</font>

382
00:20:24,760 --> 00:20:30,370
with what we have

383
00:20:26,260 --> 00:20:32,200
<font color="#E5E5E5">okay like I mentioned</font><font color="#CCCCCC"> adaptation is key</font>

384
00:20:30,370 --> 00:20:34,270
we really want<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to adapt to</font>

385
00:20:32,200 --> 00:20:35,919
<font color="#E5E5E5">our scenario</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> else that I want</font>

386
00:20:34,270 --> 00:20:38,320
to point out was both<font color="#E5E5E5"> of these</font>

387
00:20:35,919 --> 00:20:39,760
<font color="#E5E5E5">techniques</font><font color="#CCCCCC"> they don't require</font><font color="#E5E5E5"> any</font><font color="#CCCCCC"> kind</font>

388
00:20:38,320 --> 00:20:41,080
<font color="#E5E5E5">of</font><font color="#CCCCCC"> i/o</font><font color="#E5E5E5"> obviously I mentioned that you</font>

389
00:20:39,760 --> 00:20:42,730
don't<font color="#E5E5E5"> have to traverse anything across</font>

390
00:20:41,080 --> 00:20:44,559
<font color="#E5E5E5">the network there's no there's no</font>

391
00:20:42,730 --> 00:20:46,330
<font color="#E5E5E5">reading from registries there is no</font>

392
00:20:44,559 --> 00:20:48,428
<font color="#E5E5E5">reading or writing to files unless you</font>

393
00:20:46,330 --> 00:20:50,199
explicitly want<font color="#E5E5E5"> to dump it out to a file</font>

394
00:20:48,429 --> 00:20:51,730
it's not really necessary as<font color="#CCCCCC"> part of the</font>

395
00:20:50,200 --> 00:20:53,290
technique<font color="#CCCCCC"> so</font><font color="#E5E5E5"> it can be very difficult to</font>

396
00:20:51,730 --> 00:20:55,750
<font color="#CCCCCC">to determine</font><font color="#E5E5E5"> because it's basically the</font>

397
00:20:53,290 --> 00:20:57,879
program<font color="#E5E5E5"> is just running</font><font color="#CCCCCC"> analysis and</font>

398
00:20:55,750 --> 00:20:59,530
reconstructing itself<font color="#E5E5E5"> all within its own</font>

399
00:20:57,880 --> 00:21:00,760
<font color="#E5E5E5">address space</font><font color="#CCCCCC"> everything we learned goes</font>

400
00:20:59,530 --> 00:21:02,500
lines so it'd<font color="#E5E5E5"> be kind of</font><font color="#CCCCCC"> difficult to</font>

401
00:21:00,760 --> 00:21:06,370
<font color="#E5E5E5">detect</font><font color="#CCCCCC"> because not even you do that</font>

402
00:21:02,500 --> 00:21:08,200
<font color="#E5E5E5">using like those a really janky easily</font>

403
00:21:06,370 --> 00:21:09,760
caught debugging<font color="#CCCCCC"> API is like create</font>

404
00:21:08,200 --> 00:21:10,929
remote thread<font color="#CCCCCC"> write process memory stuff</font>

405
00:21:09,760 --> 00:21:12,070
like that those types of<font color="#E5E5E5"> like</font>

406
00:21:10,929 --> 00:21:13,179
<font color="#E5E5E5">traditional techniques that are really</font>

407
00:21:12,070 --> 00:21:14,710
going<font color="#E5E5E5"> to get you caught we're not using</font>

408
00:21:13,179 --> 00:21:15,910
those<font color="#E5E5E5"> cuz we're all within our</font><font color="#CCCCCC"> own</font>

409
00:21:14,710 --> 00:21:18,970
process we<font color="#E5E5E5"> can make all the</font>

410
00:21:15,910 --> 00:21:21,580
modifications<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we want alright so</font>

411
00:21:18,970 --> 00:21:23,500
once we have a<font color="#CCCCCC"> P file in memory and it</font>

412
00:21:21,580 --> 00:21:25,750
is unloaded<font color="#CCCCCC"> it's either going to</font><font color="#E5E5E5"> be</font>

413
00:21:23,500 --> 00:21:27,730
existing as an executable or<font color="#CCCCCC"> DLL if</font>

414
00:21:25,750 --> 00:21:29,860
we're writing<font color="#E5E5E5"> this though we kind of</font>

415
00:21:27,730 --> 00:21:31,870
have<font color="#E5E5E5"> to figure out</font><font color="#CCCCCC"> like hey what are we</font>

416
00:21:29,860 --> 00:21:33,879
to begin with we<font color="#CCCCCC"> need to know what our</font>

417
00:21:31,870 --> 00:21:35,080
<font color="#E5E5E5">current state is and then we are going</font>

418
00:21:33,880 --> 00:21:36,520
<font color="#E5E5E5">to be able to know like okay</font><font color="#CCCCCC"> are we</font>

419
00:21:35,080 --> 00:21:37,809
compatible with what we<font color="#E5E5E5"> want to do in</font>

420
00:21:36,520 --> 00:21:40,270
which case we can<font color="#E5E5E5"> skip the transformer</font>

421
00:21:37,809 --> 00:21:42,610
<font color="#CCCCCC">that's no problem</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> if we are</font><font color="#E5E5E5"> not then</font>

422
00:21:40,270 --> 00:21:45,129
<font color="#CCCCCC">we need to transform ourselves so we're</font>

423
00:21:42,610 --> 00:21:47,530
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> do this by modifying the</font><font color="#CCCCCC"> Doppler</font>

424
00:21:45,130 --> 00:21:48,850
<font color="#CCCCCC">soothing analyzing the daus and</font><font color="#E5E5E5"> NT</font>

425
00:21:47,530 --> 00:21:50,860
headers which contain the different

426
00:21:48,850 --> 00:21:54,159
flags<font color="#E5E5E5"> to identify whether you're a</font><font color="#CCCCCC"> dll</font>

427
00:21:50,860 --> 00:21:56,590
or an executable strictly<font color="#E5E5E5"> speaking you</font>

428
00:21:54,160 --> 00:22:00,040
can like<font color="#E5E5E5"> call load library on an</font>

429
00:21:56,590 --> 00:22:01,720
executable it starts to get<font color="#E5E5E5"> into like</font>

430
00:22:00,040 --> 00:22:03,399
<font color="#E5E5E5">some real</font><font color="#CCCCCC"> intrinsics and like another</font>

431
00:22:01,720 --> 00:22:06,010
goal<font color="#CCCCCC"> of this project</font><font color="#E5E5E5"> is to ensure that</font>

432
00:22:03,400 --> 00:22:08,799
the<font color="#E5E5E5"> DLLs and the executables have all</font>

433
00:22:06,010 --> 00:22:10,990
the flags<font color="#CCCCCC"> set in such a way that</font><font color="#E5E5E5"> it</font>

434
00:22:08,799 --> 00:22:12,549
doesn't<font color="#E5E5E5"> stand out to someone that's used</font>

435
00:22:10,990 --> 00:22:13,690
to looking at executables we want to

436
00:22:12,549 --> 00:22:16,240
make sure<font color="#E5E5E5"> that everything is configured</font>

437
00:22:13,690 --> 00:22:17,559
<font color="#E5E5E5">as close to like the</font><font color="#CCCCCC"> default and Visual</font>

438
00:22:16,240 --> 00:22:19,240
<font color="#CCCCCC">Studio</font><font color="#E5E5E5"> that if you just went into Visual</font>

439
00:22:17,559 --> 00:22:20,740
Studio<font color="#E5E5E5"> you did like hello world</font><font color="#CCCCCC"> and</font>

440
00:22:19,240 --> 00:22:22,390
compiled it<font color="#E5E5E5"> we don't want to be like</font>

441
00:22:20,740 --> 00:22:24,160
setting like you know custom base

442
00:22:22,390 --> 00:22:25,929
relocation addresses because<font color="#E5E5E5"> we could</font>

443
00:22:24,160 --> 00:22:27,669
<font color="#E5E5E5">just set</font><font color="#CCCCCC"> one we could pick an arbitrary</font>

444
00:22:25,929 --> 00:22:29,230
number<font color="#E5E5E5"> and be like everything is going</font>

445
00:22:27,669 --> 00:22:30,429
to<font color="#E5E5E5"> utilize this base address and like</font>

446
00:22:29,230 --> 00:22:32,620
that'd be fine but if<font color="#E5E5E5"> you're a malware</font>

447
00:22:30,429 --> 00:22:34,929
analysis you're probably<font color="#E5E5E5"> like that's not</font>

448
00:22:32,620 --> 00:22:36,668
appropriate<font color="#CCCCCC"> that's not the</font><font color="#E5E5E5"> appropriate</font>

449
00:22:34,929 --> 00:22:38,380
value for<font color="#E5E5E5"> what I would expect</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> this</font>

450
00:22:36,669 --> 00:22:39,680
file type<font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> gonna send up a red</font>

451
00:22:38,380 --> 00:22:41,630
<font color="#CCCCCC">flag</font><font color="#E5E5E5"> because who would who</font>

452
00:22:39,680 --> 00:22:43,270
<font color="#E5E5E5">do that who would changed that value</font>

453
00:22:41,630 --> 00:22:46,370
unless you<font color="#E5E5E5"> really had a good</font><font color="#CCCCCC"> reason to</font>

454
00:22:43,270 --> 00:22:47,660
<font color="#E5E5E5">so what we end up</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> is we</font><font color="#CCCCCC"> end up</font>

455
00:22:46,370 --> 00:22:49,520
changing<font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple of fields</font><font color="#CCCCCC"> in the</font>

456
00:22:47,660 --> 00:22:51,800
headers as appropriate<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> at the</font>

457
00:22:49,520 --> 00:22:54,710
harder parts like<font color="#E5E5E5"> that that's easy sauce</font>

458
00:22:51,800 --> 00:22:56,810
the harder<font color="#CCCCCC"> part is having the</font><font color="#E5E5E5"> entry</font>

459
00:22:54,710 --> 00:22:57,920
<font color="#CCCCCC">points who</font><font color="#E5E5E5"> need to have two separate</font>

460
00:22:56,810 --> 00:22:59,899
entry points we need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have an</font>

461
00:22:57,920 --> 00:23:02,300
executable entry point as well as<font color="#E5E5E5"> DLL</font>

462
00:22:59,900 --> 00:23:03,740
entry point<font color="#E5E5E5"> it's because the DLL entry</font>

463
00:23:02,300 --> 00:23:05,840
point needs to<font color="#CCCCCC"> actually initialize</font><font color="#E5E5E5"> the</font>

464
00:23:03,740 --> 00:23:07,910
visual C runtime because once<font color="#E5E5E5"> again like</font>

465
00:23:05,840 --> 00:23:09,649
I don't want<font color="#E5E5E5"> to force the implant writer</font>

466
00:23:07,910 --> 00:23:11,060
that's using this like get<font color="#CCCCCC"> away from the</font>

467
00:23:09,650 --> 00:23:12,710
visual C runtime because like there's so

468
00:23:11,060 --> 00:23:14,120
much<font color="#E5E5E5"> stuff in there that like who wants</font>

469
00:23:12,710 --> 00:23:15,920
to like<font color="#E5E5E5"> really get away from all</font><font color="#CCCCCC"> of that</font>

470
00:23:14,120 --> 00:23:17,629
<font color="#E5E5E5">so that has to do a little bit more than</font>

471
00:23:15,920 --> 00:23:19,670
the executable does I ended<font color="#E5E5E5"> up going</font>

472
00:23:17,630 --> 00:23:20,720
with<font color="#E5E5E5"> XE main just because that kind of</font>

473
00:23:19,670 --> 00:23:22,250
<font color="#E5E5E5">makes</font><font color="#CCCCCC"> sense because</font><font color="#E5E5E5"> if you've ever</font>

474
00:23:20,720 --> 00:23:24,440
written a<font color="#E5E5E5"> DLL before you know</font><font color="#CCCCCC"> that the</font>

475
00:23:22,250 --> 00:23:26,630
entry point for<font color="#E5E5E5"> a</font><font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> is DLL main so it</font>

476
00:23:24,440 --> 00:23:28,610
just kind of makes logical sense<font color="#CCCCCC"> so what</font>

477
00:23:26,630 --> 00:23:29,960
<font color="#E5E5E5">we're gonna</font><font color="#CCCCCC"> end up doing</font><font color="#E5E5E5"> is writing both</font>

478
00:23:28,610 --> 00:23:31,520
of these entry points and<font color="#E5E5E5"> they're</font>

479
00:23:29,960 --> 00:23:33,230
basically<font color="#CCCCCC"> just stubs they're gonna do</font>

480
00:23:31,520 --> 00:23:35,360
the bare minimum<font color="#CCCCCC"> and</font><font color="#E5E5E5"> they're both going</font>

481
00:23:33,230 --> 00:23:36,860
<font color="#E5E5E5">to normalize to a real entry point</font>

482
00:23:35,360 --> 00:23:39,709
that's actually going<font color="#E5E5E5"> to one your logic</font>

483
00:23:36,860 --> 00:23:43,100
that's going to contain your implant<font color="#E5E5E5"> but</font>

484
00:23:39,710 --> 00:23:45,050
both of those need<font color="#E5E5E5"> to exist and so that</font>

485
00:23:43,100 --> 00:23:46,850
way when we do<font color="#CCCCCC"> our transformation we</font>

486
00:23:45,050 --> 00:23:48,530
<font color="#CCCCCC">have those available to</font><font color="#E5E5E5"> us and we</font><font color="#CCCCCC"> can</font>

487
00:23:46,850 --> 00:23:51,260
set<font color="#CCCCCC"> to the entry point update it as</font>

488
00:23:48,530 --> 00:23:54,290
<font color="#CCCCCC">appropriate given our destination file</font>

489
00:23:51,260 --> 00:23:56,480
type<font color="#E5E5E5"> okay so the header fields the image</font>

490
00:23:54,290 --> 00:23:58,240
<font color="#E5E5E5">end key contains the actual PE headers</font>

491
00:23:56,480 --> 00:24:01,010
if you've<font color="#CCCCCC"> actually like loaded up a</font>

492
00:23:58,240 --> 00:24:02,270
executable<font color="#E5E5E5"> image like like a normal one</font>

493
00:24:01,010 --> 00:24:03,320
on<font color="#CCCCCC"> diff</font><font color="#E5E5E5"> and not talking like now or</font>

494
00:24:02,270 --> 00:24:05,690
anything<font color="#E5E5E5"> like that anything from</font>

495
00:24:03,320 --> 00:24:06,980
Microsoft<font color="#E5E5E5"> yeah that original like couple</font>

496
00:24:05,690 --> 00:24:08,660
of bytes is not the Pete<font color="#CCCCCC"> u header that's</font>

497
00:24:06,980 --> 00:24:10,070
that's the<font color="#E5E5E5"> NZ header and a little bit</font>

498
00:24:08,660 --> 00:24:12,290
after<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> going to be the actual PE</font>

499
00:24:10,070 --> 00:24:15,050
header<font color="#E5E5E5"> so we have a characteristics</font>

500
00:24:12,290 --> 00:24:18,320
<font color="#E5E5E5">field where there is a flag</font><font color="#CCCCCC"> image file</font>

501
00:24:15,050 --> 00:24:19,520
<font color="#E5E5E5">DLL we're gonna set that if</font><font color="#CCCCCC"> we're a</font><font color="#E5E5E5"> DLL</font>

502
00:24:18,320 --> 00:24:21,830
we're gonna clear<font color="#CCCCCC"> that if we're an</font>

503
00:24:19,520 --> 00:24:23,629
executable another one is the<font color="#E5E5E5"> image file</font>

504
00:24:21,830 --> 00:24:24,830
executable image<font color="#E5E5E5"> we're always going</font><font color="#CCCCCC"> to</font>

505
00:24:23,630 --> 00:24:26,990
set this<font color="#E5E5E5"> because this</font><font color="#CCCCCC"> one's</font><font color="#E5E5E5"> gonna be set</font>

506
00:24:24,830 --> 00:24:28,760
for both executables and<font color="#E5E5E5"> DL</font><font color="#CCCCCC"> aus so</font>

507
00:24:26,990 --> 00:24:30,290
something I didn't quite<font color="#CCCCCC"> know about</font>

508
00:24:28,760 --> 00:24:33,500
before<font color="#CCCCCC"> I started this research</font><font color="#E5E5E5"> is that</font><font color="#CCCCCC"> I</font>

509
00:24:30,290 --> 00:24:35,840
knew executables<font color="#E5E5E5"> dll's and drivers or</font>

510
00:24:33,500 --> 00:24:37,760
dot sis files or all PE images turns out

511
00:24:35,840 --> 00:24:39,649
there's also other PE images that just

512
00:24:37,760 --> 00:24:41,000
<font color="#E5E5E5">basically utilize the loader</font><font color="#CCCCCC"> and may not</font>

513
00:24:39,650 --> 00:24:42,170
<font color="#E5E5E5">necessarily even</font><font color="#CCCCCC"> have like executable</font>

514
00:24:41,000 --> 00:24:43,910
code I<font color="#E5E5E5"> believe these</font><font color="#CCCCCC"> are also</font><font color="#E5E5E5"> the case</font>

515
00:24:42,170 --> 00:24:45,440
for like font files and stuff like that

516
00:24:43,910 --> 00:24:46,850
<font color="#E5E5E5">so</font><font color="#CCCCCC"> trying to be a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> forward</font>

517
00:24:45,440 --> 00:24:48,920
thinking<font color="#E5E5E5"> if we ever want to have like a</font>

518
00:24:46,850 --> 00:24:50,750
non executable<font color="#E5E5E5"> image and transform</font><font color="#CCCCCC"> that</font>

519
00:24:48,920 --> 00:24:52,679
somehow<font color="#CCCCCC"> you</font><font color="#E5E5E5"> just want to be</font><font color="#CCCCCC"> able to set</font>

520
00:24:50,750 --> 00:24:54,570
<font color="#CCCCCC">that image file executable flag</font>

521
00:24:52,679 --> 00:24:56,580
but like I said<font color="#E5E5E5"> it's probably already</font>

522
00:24:54,570 --> 00:24:59,009
set<font color="#E5E5E5"> for executables and dll's then</font>

523
00:24:56,580 --> 00:25:00,869
finally the<font color="#E5E5E5"> image base you could go</font><font color="#CCCCCC"> up</font>

524
00:24:59,009 --> 00:25:03,419
<font color="#E5E5E5">into visual studio</font><font color="#CCCCCC"> and select your own</font>

525
00:25:00,869 --> 00:25:04,049
static image base and just<font color="#E5E5E5"> like leave</font><font color="#CCCCCC"> it</font>

526
00:25:03,419 --> 00:25:06,179
right there

527
00:25:04,049 --> 00:25:08,090
but it's the image base<font color="#CCCCCC"> default</font><font color="#E5E5E5"> are</font>

528
00:25:06,179 --> 00:25:10,080
different for 32-bit<font color="#E5E5E5"> and 64-bit</font>

529
00:25:08,090 --> 00:25:12,330
<font color="#E5E5E5">executables and DLL so you have like</font>

530
00:25:10,080 --> 00:25:14,369
<font color="#E5E5E5">four separate values now we're not able</font>

531
00:25:12,330 --> 00:25:16,559
<font color="#CCCCCC">to transform between 32-bit and 64-bit</font>

532
00:25:14,369 --> 00:25:18,269
so we'd have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have like to hold lis</font>

533
00:25:16,559 --> 00:25:20,070
different sets<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the code base but at</font>

534
00:25:18,269 --> 00:25:21,720
<font color="#CCCCCC">least between</font><font color="#E5E5E5"> an executable and a DLL</font>

535
00:25:20,070 --> 00:25:22,740
that<font color="#E5E5E5"> image base value is gonna have</font>

536
00:25:21,720 --> 00:25:24,119
different<font color="#CCCCCC"> values that</font><font color="#E5E5E5"> are well</font>

537
00:25:22,740 --> 00:25:25,529
documented by Microsoft and<font color="#E5E5E5"> pretty much</font>

538
00:25:24,119 --> 00:25:27,869
every executable<font color="#CCCCCC"> that I've</font><font color="#E5E5E5"> ever looked</font>

539
00:25:25,529 --> 00:25:29,100
at<font color="#E5E5E5"> they just utilize that standard image</font>

540
00:25:27,869 --> 00:25:30,480
base and so this is what we want<font color="#E5E5E5"> to make</font>

541
00:25:29,100 --> 00:25:33,209
<font color="#CCCCCC">sure we update it as appropriate so</font>

542
00:25:30,480 --> 00:25:35,190
<font color="#E5E5E5">we're not standing out when a</font><font color="#CCCCCC"> Joe</font>

543
00:25:33,210 --> 00:25:37,440
malware researcher tries to open<font color="#CCCCCC"> it</font><font color="#E5E5E5"> up</font>

544
00:25:35,190 --> 00:25:38,549
<font color="#E5E5E5">and take a look at it finally and most</font>

545
00:25:37,440 --> 00:25:40,320
importantly is going to be the address

546
00:25:38,549 --> 00:25:43,559
<font color="#E5E5E5">of that entry point so this is</font><font color="#CCCCCC"> going to</font>

547
00:25:40,320 --> 00:25:45,990
<font color="#E5E5E5">be an RV a to where it would exist in</font>

548
00:25:43,559 --> 00:25:47,759
the PE file this is not the virtual

549
00:25:45,990 --> 00:25:50,039
address of where it exists as it's

550
00:25:47,759 --> 00:25:52,919
loaded up<font color="#E5E5E5"> into into memory which leads</font>

551
00:25:50,039 --> 00:25:55,559
<font color="#E5E5E5">us to a couple of</font><font color="#CCCCCC"> problems how do</font><font color="#E5E5E5"> we get</font>

552
00:25:52,919 --> 00:25:57,090
that<font color="#CCCCCC"> r-va</font><font color="#E5E5E5"> well we want to be able to set</font>

553
00:25:55,559 --> 00:25:59,039
<font color="#CCCCCC">it to whatever value</font><font color="#E5E5E5"> we want because</font>

554
00:25:57,090 --> 00:26:01,529
once again<font color="#E5E5E5"> we really want to be</font><font color="#CCCCCC"> flexible</font>

555
00:25:59,039 --> 00:26:04,440
so we<font color="#E5E5E5"> have two options</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> effectively</font>

556
00:26:01,529 --> 00:26:06,269
entry point<font color="#E5E5E5"> first of</font><font color="#CCCCCC"> all I opted to take</font>

557
00:26:04,440 --> 00:26:08,909
<font color="#E5E5E5">an approach where the</font><font color="#CCCCCC"> XE main and the</font>

558
00:26:06,269 --> 00:26:10,830
DLL main are both exported so they're

559
00:26:08,909 --> 00:26:12,720
actually<font color="#CCCCCC"> included</font><font color="#E5E5E5"> in the exports of it I</font>

560
00:26:10,830 --> 00:26:16,350
figured if somebody goes<font color="#E5E5E5"> ahead and looks</font>

561
00:26:12,720 --> 00:26:18,090
at the at the PE file and they see XE

562
00:26:16,350 --> 00:26:19,980
main and DLL main that's probably not as

563
00:26:18,090 --> 00:26:21,959
sketchy<font color="#E5E5E5"> as like some of the other things</font>

564
00:26:19,980 --> 00:26:23,700
but if<font color="#E5E5E5"> you want to go ahead and change</font>

565
00:26:21,960 --> 00:26:26,039
<font color="#E5E5E5">those or not import those you have other</font>

566
00:26:23,700 --> 00:26:29,100
<font color="#E5E5E5">options as I will outline the</font><font color="#CCCCCC"> first</font>

567
00:26:26,039 --> 00:26:30,960
<font color="#E5E5E5">option is you could actually utilize the</font>

568
00:26:29,100 --> 00:26:33,240
get proc address and get module handle

569
00:26:30,960 --> 00:26:35,999
but the issue<font color="#E5E5E5"> with this is</font><font color="#CCCCCC"> that that</font>

570
00:26:33,240 --> 00:26:37,590
using those two functions<font color="#CCCCCC"> they have</font><font color="#E5E5E5"> two</font>

571
00:26:35,999 --> 00:26:39,480
limitations<font color="#E5E5E5"> number one it's gonna be the</font>

572
00:26:37,590 --> 00:26:41,399
address<font color="#E5E5E5"> of where it</font><font color="#CCCCCC"> is loaded in memory</font>

573
00:26:39,480 --> 00:26:43,950
<font color="#CCCCCC">and like I just</font><font color="#E5E5E5"> said the address and P</font>

574
00:26:41,399 --> 00:26:46,049
file needs to<font color="#E5E5E5"> be the r-va not the actual</font>

575
00:26:43,950 --> 00:26:47,759
<font color="#CCCCCC">virtual address of where it's loaded so</font>

576
00:26:46,049 --> 00:26:49,168
we<font color="#E5E5E5"> could convert that we have all the</font>

577
00:26:47,759 --> 00:26:50,669
<font color="#CCCCCC">information available</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> us by</font><font color="#E5E5E5"> going</font>

578
00:26:49,169 --> 00:26:52,320
ahead and like<font color="#E5E5E5"> analyzing the section</font>

579
00:26:50,669 --> 00:26:53,669
headers so that wouldn't really be<font color="#CCCCCC"> a</font>

580
00:26:52,320 --> 00:26:55,980
problem<font color="#CCCCCC"> that</font><font color="#E5E5E5"> would be a pretty quick and</font>

581
00:26:53,669 --> 00:26:58,740
easy way to do<font color="#E5E5E5"> it but what I didn't</font><font color="#CCCCCC"> like</font>

582
00:26:55,980 --> 00:27:00,480
about this<font color="#E5E5E5"> approach is that if we relied</font>

583
00:26:58,740 --> 00:27:03,690
upon this we would only be<font color="#CCCCCC"> able to</font>

584
00:27:00,480 --> 00:27:05,639
<font color="#E5E5E5">transform PE files that also had a</font>

585
00:27:03,690 --> 00:27:08,459
loaded<font color="#E5E5E5"> copy in memory I wanted</font>

586
00:27:05,639 --> 00:27:11,099
be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to potentially take a PE file as</font>

587
00:27:08,459 --> 00:27:13,739
it exists on disk<font color="#E5E5E5"> not run it through the</font>

588
00:27:11,099 --> 00:27:15,479
system<font color="#E5E5E5"> loader copy it into memory</font><font color="#CCCCCC"> run</font>

589
00:27:13,739 --> 00:27:17,279
the transformation and dump it out and

590
00:27:15,479 --> 00:27:20,039
if it's just<font color="#CCCCCC"> copied up into memory and</font>

591
00:27:17,279 --> 00:27:22,379
<font color="#E5E5E5">it doesn't have the and it's not</font>

592
00:27:20,039 --> 00:27:24,479
<font color="#E5E5E5">actually loaded get proc address won't</font>

593
00:27:22,379 --> 00:27:26,039
work it's not meant to analyze unloaded

594
00:27:24,479 --> 00:27:30,509
PE files<font color="#E5E5E5"> which is what led us to</font>

595
00:27:26,039 --> 00:27:33,809
<font color="#CCCCCC">actually want writing our own so but the</font>

596
00:27:30,509 --> 00:27:35,879
DLL main<font color="#E5E5E5"> when you're writing a DLL main</font>

597
00:27:33,809 --> 00:27:38,279
you get called a few<font color="#E5E5E5"> times there's four</font>

598
00:27:35,879 --> 00:27:40,259
different<font color="#CCCCCC"> options</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> the system loader</font>

599
00:27:38,279 --> 00:27:41,969
<font color="#E5E5E5">will call it you have process attached</font>

600
00:27:40,259 --> 00:27:43,889
<font color="#E5E5E5">when you're being</font><font color="#CCCCCC"> loaded</font><font color="#E5E5E5"> up into the</font>

601
00:27:41,969 --> 00:27:45,599
process originally<font color="#E5E5E5"> process detach which</font>

602
00:27:43,889 --> 00:27:47,699
<font color="#E5E5E5">this gets called when the process</font><font color="#CCCCCC"> is</font>

603
00:27:45,599 --> 00:27:49,408
graceful<font color="#E5E5E5"> the exiting keyboard gracefully</font>

604
00:27:47,700 --> 00:27:50,549
if somebody<font color="#E5E5E5"> goes ahead and kills it or</font>

605
00:27:49,409 --> 00:27:51,479
there's like<font color="#CCCCCC"> a</font><font color="#E5E5E5"> segmentation or fault</font>

606
00:27:50,549 --> 00:27:53,908
like that you're not<font color="#CCCCCC"> gonna have that</font>

607
00:27:51,479 --> 00:27:55,229
<font color="#E5E5E5">opportunity to unload yourself and set</font>

608
00:27:53,909 --> 00:27:56,820
<font color="#E5E5E5">up persistence or anything so be aware</font>

609
00:27:55,229 --> 00:27:58,950
of<font color="#E5E5E5"> that</font><font color="#CCCCCC"> and then there's</font><font color="#E5E5E5"> thread attached</font>

610
00:27:56,820 --> 00:28:00,689
and thread detach<font color="#E5E5E5"> these are available so</font>

611
00:27:58,950 --> 00:28:02,190
that<font color="#E5E5E5"> the the module can take the</font>

612
00:28:00,690 --> 00:28:04,049
<font color="#E5E5E5">opportunity to set up any like</font>

613
00:28:02,190 --> 00:28:05,339
thread-local variables that may need<font color="#CCCCCC"> to</font>

614
00:28:04,049 --> 00:28:07,499
be set up<font color="#CCCCCC"> using</font><font color="#E5E5E5"> like thread-local</font>

615
00:28:05,339 --> 00:28:09,269
storage or anything but if you're<font color="#CCCCCC"> doing</font>

616
00:28:07,499 --> 00:28:11,249
it through reflective DLL injection<font color="#E5E5E5"> you</font>

617
00:28:09,269 --> 00:28:13,919
only get the process<font color="#E5E5E5"> attached and</font>

618
00:28:11,249 --> 00:28:15,719
there's<font color="#E5E5E5"> also a another like secret one</font>

619
00:28:13,919 --> 00:28:18,179
<font color="#CCCCCC">that reflective DLL injection adds a</font>

620
00:28:15,719 --> 00:28:20,309
fifth one to query the<font color="#E5E5E5"> H module which</font>

621
00:28:18,179 --> 00:28:22,259
helps you<font color="#CCCCCC"> to set up</font><font color="#E5E5E5"> like so you have</font><font color="#CCCCCC"> a</font>

622
00:28:20,309 --> 00:28:24,299
<font color="#E5E5E5">legitimate each module handle which is</font><font color="#CCCCCC"> a</font>

623
00:28:22,259 --> 00:28:27,629
pointer to<font color="#E5E5E5"> your your</font><font color="#CCCCCC"> MZ header as it</font>

624
00:28:24,299 --> 00:28:29,339
would exist in loaded memory so those

625
00:28:27,629 --> 00:28:32,070
are all right there<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is a quick</font>

626
00:28:29,339 --> 00:28:34,589
<font color="#CCCCCC">example of a proof</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> concept that is</font>

627
00:28:32,070 --> 00:28:36,299
utilized<font color="#E5E5E5"> in in the public so what we</font>

628
00:28:34,589 --> 00:28:38,519
have<font color="#E5E5E5"> right here is we're</font><font color="#CCCCCC"> defining our</font>

629
00:28:36,299 --> 00:28:40,259
DLL main we're<font color="#CCCCCC"> following the standard</font>

630
00:28:38,519 --> 00:28:42,450
signature for DLL main we're taking our

631
00:28:40,259 --> 00:28:43,739
instance<font color="#E5E5E5"> our DW reason for like wire it</font>

632
00:28:42,450 --> 00:28:45,539
being loaded this<font color="#E5E5E5"> would be that process</font>

633
00:28:43,739 --> 00:28:49,379
attach process detach or<font color="#E5E5E5"> whatnot and</font>

634
00:28:45,539 --> 00:28:53,099
<font color="#E5E5E5">then our LP reserved parameter so we're</font>

635
00:28:49,379 --> 00:28:54,958
exporting this with the<font color="#CCCCCC"> deckle</font><font color="#E5E5E5"> spec</font><font color="#CCCCCC"> dll</font>

636
00:28:53,099 --> 00:28:56,849
export just like we're exporting our

637
00:28:54,959 --> 00:28:59,879
main down here and then both of<font color="#E5E5E5"> these</font>

638
00:28:56,849 --> 00:29:01,918
are calling the main function and<font color="#E5E5E5"> it's</font>

639
00:28:59,879 --> 00:29:04,019
taking a handle to the module so this is

640
00:29:01,919 --> 00:29:05,190
the real main<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is where the good</font>

641
00:29:04,019 --> 00:29:07,859
<font color="#E5E5E5">stuff happens our</font><font color="#CCCCCC"> proof of concept</font>

642
00:29:05,190 --> 00:29:08,789
happens<font color="#E5E5E5"> our our implant kicks off or</font>

643
00:29:07,859 --> 00:29:10,859
does<font color="#E5E5E5"> whatever so both of these</font>

644
00:29:08,789 --> 00:29:12,809
normalized to that but what's important

645
00:29:10,859 --> 00:29:15,658
to know is<font color="#CCCCCC"> that when you are do utilize</font>

646
00:29:12,809 --> 00:29:17,330
<font color="#E5E5E5">in the DLL you have to initialize the CR</font>

647
00:29:15,659 --> 00:29:19,820
key<font color="#E5E5E5"> so that's what we're doing</font><font color="#CCCCCC"> up and</font>

648
00:29:17,330 --> 00:29:20,960
checking<font color="#E5E5E5"> to see if the CRT has been</font>

649
00:29:19,820 --> 00:29:23,300
<font color="#E5E5E5">initialized we're going to check</font><font color="#CCCCCC"> that</font>

650
00:29:20,960 --> 00:29:26,720
and do it<font color="#CCCCCC"> ourselves if you were if you</font>

651
00:29:23,300 --> 00:29:28,760
<font color="#E5E5E5">had</font><font color="#CCCCCC"> a normal DLL main method and visual</font>

652
00:29:26,720 --> 00:29:31,100
<font color="#E5E5E5">C</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> assuming</font><font color="#CCCCCC"> and Visual Studio if</font>

653
00:29:28,760 --> 00:29:33,860
you just define DLL main that address is

654
00:29:31,100 --> 00:29:35,719
not actually the<font color="#CCCCCC"> address of the DLL main</font>

655
00:29:33,860 --> 00:29:37,850
as exist in the PE file<font color="#CCCCCC"> Visual Studio</font>

656
00:29:35,720 --> 00:29:39,800
does some hot swapping some

657
00:29:37,850 --> 00:29:41,389
<font color="#CCCCCC">bait-and-switch</font><font color="#E5E5E5"> type with you and they</font>

658
00:29:39,800 --> 00:29:44,120
actually<font color="#E5E5E5"> have their</font><font color="#CCCCCC"> own wrapper</font><font color="#E5E5E5"> that</font>

659
00:29:41,390 --> 00:29:46,040
<font color="#CCCCCC">initializes the visual</font><font color="#E5E5E5"> C runtime for you</font>

660
00:29:44,120 --> 00:29:47,629
which is why we have to do it<font color="#E5E5E5"> explicitly</font>

661
00:29:46,040 --> 00:29:49,399
because we're straight up patching the

662
00:29:47,630 --> 00:29:52,670
address of the entry point in our

663
00:29:49,400 --> 00:29:54,050
version okay so like I'd mentioned we

664
00:29:52,670 --> 00:29:56,180
have our two<font color="#E5E5E5"> options we have our get</font>

665
00:29:54,050 --> 00:29:58,580
proc address the<font color="#E5E5E5"> get module handle a</font>

666
00:29:56,180 --> 00:30:00,140
<font color="#E5E5E5">real easy</font><font color="#CCCCCC"> to deal</font><font color="#E5E5E5"> with we could just run</font>

667
00:29:58,580 --> 00:30:01,639
the calculations ourselves but<font color="#E5E5E5"> then we'd</font>

668
00:30:00,140 --> 00:30:04,190
<font color="#E5E5E5">have the limitation that we could not do</font>

669
00:30:01,640 --> 00:30:05,780
them on images<font color="#E5E5E5"> that were not actually</font>

670
00:30:04,190 --> 00:30:08,120
loaded by either the reflective DLL

671
00:30:05,780 --> 00:30:09,830
injection or the system loader<font color="#CCCCCC"> I wanted</font>

672
00:30:08,120 --> 00:30:12,199
the<font color="#CCCCCC"> ability to do it just like pointed</font>

673
00:30:09,830 --> 00:30:14,060
<font color="#CCCCCC">out an</font><font color="#E5E5E5"> arbitrary one on disk and copy it</font>

674
00:30:12,200 --> 00:30:16,160
<font color="#CCCCCC">from there without</font><font color="#E5E5E5"> ever executing it so</font>

675
00:30:14,060 --> 00:30:17,810
option<font color="#E5E5E5"> two</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> what I ended up</font>

676
00:30:16,160 --> 00:30:20,150
<font color="#E5E5E5">implementing and there is a function</font><font color="#CCCCCC"> for</font>

677
00:30:17,810 --> 00:30:22,280
<font color="#E5E5E5">this in the exported code basically</font><font color="#CCCCCC"> a</font>

678
00:30:20,150 --> 00:30:25,370
convenience function that will parse out

679
00:30:22,280 --> 00:30:27,170
<font color="#E5E5E5">the export address table of an arbitrary</font>

680
00:30:25,370 --> 00:30:29,120
module and it's going<font color="#E5E5E5"> to give you not</font>

681
00:30:27,170 --> 00:30:30,980
<font color="#E5E5E5">where the function would exist in memory</font>

682
00:30:29,120 --> 00:30:32,570
<font color="#CCCCCC">but it's gonna give you the r-va so you</font>

683
00:30:30,980 --> 00:30:33,830
have that and you're just<font color="#CCCCCC"> ready to</font><font color="#E5E5E5"> go so</font>

684
00:30:32,570 --> 00:30:35,780
all you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to do is call this function</font>

685
00:30:33,830 --> 00:30:37,760
<font color="#E5E5E5">to parse out</font><font color="#CCCCCC"> the export address</font><font color="#E5E5E5"> table</font>

686
00:30:35,780 --> 00:30:40,129
and<font color="#E5E5E5"> that's why we export it</font><font color="#CCCCCC"> so that way</font>

687
00:30:37,760 --> 00:30:41,480
we can<font color="#CCCCCC"> identify this</font><font color="#E5E5E5"> function and then</font>

688
00:30:40,130 --> 00:30:44,390
we take that<font color="#CCCCCC"> RBA</font><font color="#E5E5E5"> and we update the</font>

689
00:30:41,480 --> 00:30:46,580
address<font color="#E5E5E5"> the entry point to this r-va and</font>

690
00:30:44,390 --> 00:30:49,700
we have<font color="#E5E5E5"> successfully patched our modules</font>

691
00:30:46,580 --> 00:30:53,000
entry point<font color="#CCCCCC"> in addition to this you</font>

692
00:30:49,700 --> 00:30:54,560
<font color="#CCCCCC">could I</font><font color="#E5E5E5"> have seen them I've seen proof</font>

693
00:30:53,000 --> 00:30:56,660
of concepts online that parse out the

694
00:30:54,560 --> 00:30:57,710
export address table<font color="#E5E5E5"> there's a few it's</font>

695
00:30:56,660 --> 00:30:59,240
quite a<font color="#E5E5E5"> few different implementations</font>

696
00:30:57,710 --> 00:31:01,670
you can pretty easily find one<font color="#E5E5E5"> there are</font>

697
00:30:59,240 --> 00:31:03,410
even ones out there<font color="#CCCCCC"> that are intended to</font>

698
00:31:01,670 --> 00:31:05,540
work on unloaded<font color="#CCCCCC"> PD files so you</font><font color="#E5E5E5"> can</font>

699
00:31:03,410 --> 00:31:07,340
<font color="#CCCCCC">have ones</font><font color="#E5E5E5"> that will work on 32-bit or</font>

700
00:31:05,540 --> 00:31:11,389
64-bit<font color="#E5E5E5"> regardless of the host</font>

701
00:31:07,340 --> 00:31:13,399
architecture<font color="#CCCCCC"> I kind of just left</font><font color="#E5E5E5"> that</font>

702
00:31:11,390 --> 00:31:15,110
limitation<font color="#E5E5E5"> and mine only works for the</font>

703
00:31:13,400 --> 00:31:16,910
native architecture so if<font color="#CCCCCC"> you're 64-bit</font>

704
00:31:15,110 --> 00:31:21,290
you're only<font color="#E5E5E5"> working on 64-bit PE files</font>

705
00:31:16,910 --> 00:31:24,350
<font color="#E5E5E5">32 32 etc</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so putting it together</font>

706
00:31:21,290 --> 00:31:26,210
so<font color="#CCCCCC"> our</font><font color="#E5E5E5"> API is simply going to take the</font>

707
00:31:24,350 --> 00:31:30,279
address point of the new entry point<font color="#E5E5E5"> and</font>

708
00:31:26,210 --> 00:31:31,719
the blob<font color="#E5E5E5"> as it would exist on</font>

709
00:31:30,279 --> 00:31:33,999
but it's already<font color="#E5E5E5"> going to be</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> memory</font>

710
00:31:31,719 --> 00:31:35,109
so we can simply combine<font color="#E5E5E5"> this with what</font>

711
00:31:33,999 --> 00:31:37,029
we<font color="#CCCCCC"> have talked about</font><font color="#E5E5E5"> earlier</font><font color="#CCCCCC"> with</font>

712
00:31:35,109 --> 00:31:38,889
unloading the PE image and passing that

713
00:31:37,029 --> 00:31:40,269
right into<font color="#CCCCCC"> this function it's going to</font>

714
00:31:38,889 --> 00:31:43,238
<font color="#CCCCCC">take care</font><font color="#E5E5E5"> of all the patching that we</font>

715
00:31:40,269 --> 00:31:45,450
need for<font color="#E5E5E5"> that this is going to take the</font>

716
00:31:43,239 --> 00:31:47,619
r-va of whatever<font color="#CCCCCC"> you want to update</font><font color="#E5E5E5"> the</font>

717
00:31:45,450 --> 00:31:50,259
entry point<font color="#E5E5E5"> to which is where that</font>

718
00:31:47,619 --> 00:31:52,090
convenience function<font color="#CCCCCC"> 2x / 2 parts out</font>

719
00:31:50,259 --> 00:31:53,619
the e<font color="#CCCCCC"> 80 comes in handy so that's</font>

720
00:31:52,090 --> 00:31:54,759
<font color="#CCCCCC">available to you if you don't want to</font>

721
00:31:53,619 --> 00:31:57,009
use this technique<font color="#E5E5E5"> because you like</font>

722
00:31:54,759 --> 00:31:57,909
<font color="#E5E5E5">really want to be low slow and quiet</font><font color="#CCCCCC"> and</font>

723
00:31:57,009 --> 00:31:59,919
<font color="#E5E5E5">you really think</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> going to get</font>

724
00:31:57,909 --> 00:32:02,440
<font color="#CCCCCC">analyzed you probably don't want to</font>

725
00:31:59,919 --> 00:32:04,450
<font color="#CCCCCC">utilize</font><font color="#E5E5E5"> the DLL main and the XE main</font>

726
00:32:02,440 --> 00:32:07,269
<font color="#E5E5E5">someone's going to say that that</font><font color="#CCCCCC"> you</font>

727
00:32:04,450 --> 00:32:09,009
know<font color="#E5E5E5"> that that's pretty fishy</font><font color="#CCCCCC"> right</font>

728
00:32:07,269 --> 00:32:10,509
<font color="#E5E5E5">there you can use your imagination</font><font color="#CCCCCC"> to do</font>

729
00:32:09,009 --> 00:32:12,519
some<font color="#E5E5E5"> other types of</font><font color="#CCCCCC"> calculations I'm</font>

730
00:32:10,509 --> 00:32:15,669
sure to figure out an alternative<font color="#CCCCCC"> way to</font>

731
00:32:12,519 --> 00:32:18,219
do it<font color="#E5E5E5"> and so use the the unmodified</font><font color="#CCCCCC"> ap</font>

732
00:32:15,669 --> 00:32:21,219
is also side note<font color="#CCCCCC"> if you are</font><font color="#E5E5E5"> going to</font>

733
00:32:18,219 --> 00:32:23,080
use this<font color="#E5E5E5"> project to do anything and you</font>

734
00:32:21,219 --> 00:32:25,210
do anticipate forensic analysis I highly

735
00:32:23,080 --> 00:32:26,320
recommend you<font color="#E5E5E5"> rename the dot restore</font>

736
00:32:25,210 --> 00:32:28,330
section<font color="#E5E5E5"> to something a little bit more</font>

737
00:32:26,320 --> 00:32:30,399
innocuous<font color="#E5E5E5"> the doubt resource section is</font>

738
00:32:28,330 --> 00:32:32,259
not<font color="#E5E5E5"> being utilized but if you update</font><font color="#CCCCCC"> it</font>

739
00:32:30,399 --> 00:32:34,059
in<font color="#E5E5E5"> the C code</font><font color="#CCCCCC"> and then the PE patch</font>

740
00:32:32,259 --> 00:32:35,080
py file you<font color="#E5E5E5"> can name</font><font color="#CCCCCC"> it to whatever you</font>

741
00:32:34,059 --> 00:32:39,940
<font color="#E5E5E5">want you could have a be called dot</font>

742
00:32:35,080 --> 00:32:41,499
Spencer or something<font color="#CCCCCC"> okay so once we're</font>

743
00:32:39,940 --> 00:32:42,669
doing this we still have no I<font color="#E5E5E5"> oh that's</font>

744
00:32:41,499 --> 00:32:43,690
taking place we're not doing any kind<font color="#E5E5E5"> of</font>

745
00:32:42,669 --> 00:32:45,129
like network traffic we don't have to

746
00:32:43,690 --> 00:32:48,190
like redownload anything<font color="#CCCCCC"> he's</font><font color="#E5E5E5"> not immune</font>

747
00:32:45,129 --> 00:32:50,049
<font color="#E5E5E5">from disk registry</font><font color="#CCCCCC"> entries so successful</font>

748
00:32:48,190 --> 00:32:54,039
we can<font color="#E5E5E5"> do all of this by analyzing</font><font color="#CCCCCC"> what</font>

749
00:32:50,049 --> 00:32:56,710
we<font color="#CCCCCC"> originally have in memory okay quick</font>

750
00:32:54,039 --> 00:32:58,869
notes on usage<font color="#E5E5E5"> like I mentioned the x86</font>

751
00:32:56,710 --> 00:33:01,989
<font color="#E5E5E5">and the 64 are only going to work for</font>

752
00:32:58,869 --> 00:33:07,119
each other<font color="#CCCCCC"> if you're going</font><font color="#E5E5E5"> to be</font>

753
00:33:01,989 --> 00:33:08,589
converting a PE image you're<font color="#E5E5E5"> probably</font>

754
00:33:07,119 --> 00:33:12,459
you're<font color="#CCCCCC"> probably dealing with the same</font>

755
00:33:08,589 --> 00:33:14,769
architecture<font color="#E5E5E5"> anyways alright so sad sad</font>

756
00:33:12,460 --> 00:33:16,989
time I was not<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get this</font>

757
00:33:14,769 --> 00:33:19,389
technique<font color="#E5E5E5"> working</font><font color="#CCCCCC"> with executables for</font>

758
00:33:16,989 --> 00:33:22,059
<font color="#CCCCCC">some reason</font><font color="#E5E5E5"> everything</font><font color="#CCCCCC"> is solid but the</font>

759
00:33:19,389 --> 00:33:24,549
original<font color="#E5E5E5"> like Genesis file has</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be a</font>

760
00:33:22,059 --> 00:33:26,559
<font color="#E5E5E5">DLL and there's still some intrinsic</font>

761
00:33:24,549 --> 00:33:28,029
that I'm working<font color="#CCCCCC"> around through there</font>

762
00:33:26,559 --> 00:33:30,849
<font color="#E5E5E5">there's a some differences in the dot</font>

763
00:33:28,029 --> 00:33:33,789
data section relating<font color="#E5E5E5"> to this</font><font color="#CCCCCC"> tlg</font>

764
00:33:30,849 --> 00:33:36,639
<font color="#CCCCCC">microsoft</font><font color="#E5E5E5"> CRT provider prov structure</font>

765
00:33:33,789 --> 00:33:37,960
<font color="#E5E5E5">that if you try to convert a DLL to</font>

766
00:33:36,639 --> 00:33:39,549
annex<font color="#CCCCCC"> C through the transformer</font>

767
00:33:37,960 --> 00:33:40,809
<font color="#E5E5E5">everything is fine you can</font><font color="#CCCCCC"> even take</font>

768
00:33:39,549 --> 00:33:43,309
<font color="#CCCCCC">that X E and you can convert it back to</font>

769
00:33:40,809 --> 00:33:45,110
a<font color="#E5E5E5"> DLL and</font><font color="#CCCCCC"> you can go on</font><font color="#E5E5E5"> this loop and</font>

770
00:33:43,309 --> 00:33:47,658
<font color="#CCCCCC">Loup and everything's good</font><font color="#E5E5E5"> but the</font>

771
00:33:45,110 --> 00:33:49,879
<font color="#CCCCCC">original file</font><font color="#E5E5E5"> isn't executable</font><font color="#CCCCCC"> you can</font>

772
00:33:47,659 --> 00:33:51,950
convert<font color="#E5E5E5"> that to</font><font color="#CCCCCC"> a dll but the</font><font color="#E5E5E5"> dll or</font>

773
00:33:49,879 --> 00:33:53,509
crash<font color="#E5E5E5"> so I'm still working</font><font color="#CCCCCC"> through this</font>

774
00:33:51,950 --> 00:33:55,009
<font color="#E5E5E5">this is an area for</font><font color="#CCCCCC"> improvement for</font><font color="#E5E5E5"> me</font>

775
00:33:53,509 --> 00:33:56,330
to continue on<font color="#E5E5E5"> but if you want to go</font>

776
00:33:55,009 --> 00:33:58,370
ahead<font color="#E5E5E5"> and pull this down and start to</font>

777
00:33:56,330 --> 00:34:01,279
mess with<font color="#E5E5E5"> it just compile your project</font>

778
00:33:58,370 --> 00:34:04,189
as<font color="#CCCCCC"> a dll and you should be</font><font color="#E5E5E5"> good to go</font><font color="#CCCCCC"> it</font>

779
00:34:01,279 --> 00:34:05,149
will handle<font color="#CCCCCC"> the visual</font><font color="#E5E5E5"> see one time for</font>

780
00:34:04,190 --> 00:34:07,270
you<font color="#CCCCCC"> and it you're</font><font color="#E5E5E5"> not gonna have to</font>

781
00:34:05,149 --> 00:34:11,239
worry about<font color="#E5E5E5"> that so so working to</font>

782
00:34:07,270 --> 00:34:12,710
<font color="#CCCCCC">consolidate</font><font color="#E5E5E5"> talking a little bit through</font>

783
00:34:11,239 --> 00:34:16,459
that<font color="#CCCCCC"> so</font><font color="#E5E5E5"> this is one of the issues that I</font>

784
00:34:12,710 --> 00:34:18,079
actually found so when I was getting

785
00:34:16,460 --> 00:34:19,879
those<font color="#E5E5E5"> differences I ended up dipping the</font>

786
00:34:18,079 --> 00:34:21,829
<font color="#E5E5E5">X's and the</font><font color="#CCCCCC"> DLLs because that'd</font><font color="#E5E5E5"> be a</font>

787
00:34:19,879 --> 00:34:24,109
good<font color="#E5E5E5"> starting point to figure out why is</font>

788
00:34:21,829 --> 00:34:26,089
this technique<font color="#E5E5E5"> not working when I'm</font>

789
00:34:24,109 --> 00:34:27,799
trying to<font color="#E5E5E5"> patch a</font><font color="#CCCCCC"> dll or excuse me an X</font>

790
00:34:26,089 --> 00:34:29,989
into<font color="#CCCCCC"> a DLL but it is working</font><font color="#E5E5E5"> around</font>

791
00:34:27,800 --> 00:34:31,280
<font color="#E5E5E5">trying to go from</font><font color="#CCCCCC"> DLL to an XC</font><font color="#E5E5E5"> and then</font>

792
00:34:29,989 --> 00:34:33,799
back and<font color="#CCCCCC"> forth</font><font color="#E5E5E5"> against just the original</font>

793
00:34:31,280 --> 00:34:35,480
<font color="#E5E5E5">file has to</font><font color="#CCCCCC"> be a dll so I did what any</font>

794
00:34:33,800 --> 00:34:37,819
vulnerability researcher<font color="#E5E5E5"> would do is I</font>

795
00:34:35,480 --> 00:34:39,530
loaded<font color="#CCCCCC"> it up into Ida and I ran dynamics</font>

796
00:34:37,819 --> 00:34:42,829
bin diff on<font color="#E5E5E5"> it does anybody have</font>

797
00:34:39,530 --> 00:34:45,319
familiar with that yeah<font color="#E5E5E5"> so apparently it</font>

798
00:34:42,829 --> 00:34:47,240
<font color="#E5E5E5">doesn't work</font><font color="#CCCCCC"> that great if you're only</font>

799
00:34:45,319 --> 00:34:49,099
trying<font color="#CCCCCC"> to analyze</font><font color="#E5E5E5"> for differences in the</font>

800
00:34:47,239 --> 00:34:50,569
dot data section as we can see<font color="#E5E5E5"> right</font>

801
00:34:49,099 --> 00:34:51,859
here<font color="#E5E5E5"> it's pulled out all</font><font color="#CCCCCC"> of our my</font>

802
00:34:50,569 --> 00:34:53,179
functions and it's saying that<font color="#E5E5E5"> they're</font>

803
00:34:51,859 --> 00:34:54,739
all the same<font color="#E5E5E5"> and like that's great</font>

804
00:34:53,179 --> 00:34:56,659
thanks Ida I know they're all<font color="#E5E5E5"> the same</font>

805
00:34:54,739 --> 00:34:58,910
but<font color="#CCCCCC"> it doesn't point out any differences</font>

806
00:34:56,659 --> 00:35:01,640
in<font color="#E5E5E5"> the dot data section which leads me</font>

807
00:34:58,910 --> 00:35:03,290
to PE<font color="#E5E5E5"> bear P bear was kind of the the</font>

808
00:35:01,640 --> 00:35:05,210
<font color="#E5E5E5">best utility that I could find to</font>

809
00:35:03,290 --> 00:35:06,770
analyze the differences in the dot data

810
00:35:05,210 --> 00:35:08,450
section specifically<font color="#E5E5E5"> because I know all</font>

811
00:35:06,770 --> 00:35:10,400
the code is the<font color="#CCCCCC"> same I</font><font color="#E5E5E5"> just needed to</font>

812
00:35:08,450 --> 00:35:12,649
<font color="#CCCCCC">analyze the data so if anybody has any</font>

813
00:35:10,400 --> 00:35:14,300
recommendations on<font color="#CCCCCC"> that go</font><font color="#E5E5E5"> ahead and let</font>

814
00:35:12,650 --> 00:35:16,670
me<font color="#CCCCCC"> know</font><font color="#E5E5E5"> this is what we have right here</font>

815
00:35:14,300 --> 00:35:18,530
<font color="#E5E5E5">so we have our DLL or 64 bit DLL on the</font>

816
00:35:16,670 --> 00:35:20,359
left<font color="#E5E5E5"> on our 64 bit exe on the right</font>

817
00:35:18,530 --> 00:35:22,160
<font color="#E5E5E5">these</font><font color="#CCCCCC"> four T's</font><font color="#E5E5E5"> right here if you scroll</font>

818
00:35:20,359 --> 00:35:24,078
down<font color="#E5E5E5"> further into the data section</font>

819
00:35:22,160 --> 00:35:26,720
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> are some even more differences</font>

820
00:35:24,079 --> 00:35:28,700
<font color="#E5E5E5">but</font><font color="#CCCCCC"> at the end</font><font color="#E5E5E5"> of the day utilizing the</font>

821
00:35:26,720 --> 00:35:31,459
<font color="#E5E5E5">DLL is just going to be the way to go</font><font color="#CCCCCC"> so</font>

822
00:35:28,700 --> 00:35:34,310
<font color="#CCCCCC">looking</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> it so taking what we had from</font>

823
00:35:31,460 --> 00:35:37,099
<font color="#E5E5E5">PE bear so taking these addresses right</font>

824
00:35:34,310 --> 00:35:39,380
here and the RBA and<font color="#E5E5E5"> actually going back</font>

825
00:35:37,099 --> 00:35:41,359
<font color="#E5E5E5">into Ida to map them out so we're</font>

826
00:35:39,380 --> 00:35:43,670
returning<font color="#E5E5E5"> to Ida</font><font color="#CCCCCC"> and then this is how</font>

827
00:35:41,359 --> 00:35:45,859
Ida had helped me to identify<font color="#E5E5E5"> that</font><font color="#CCCCCC"> there</font>

828
00:35:43,670 --> 00:35:48,290
<font color="#E5E5E5">was something</font><font color="#CCCCCC"> going on</font><font color="#E5E5E5"> with this</font>

829
00:35:45,859 --> 00:35:52,069
structure<font color="#CCCCCC"> right here so if you actually</font>

830
00:35:48,290 --> 00:35:53,509
look<font color="#CCCCCC"> at it</font><font color="#E5E5E5"> something I don't like about</font>

831
00:35:52,069 --> 00:35:54,770
Ida is that they're telling<font color="#CCCCCC"> me</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> this</font>

832
00:35:53,510 --> 00:35:56,330
is a structure but then like all the

833
00:35:54,770 --> 00:35:57,950
addresses<font color="#CCCCCC"> are the same like a kind</font><font color="#E5E5E5"> of</font>

834
00:35:56,330 --> 00:35:59,990
the off sex I<font color="#CCCCCC"> don't I know there's a</font>

835
00:35:57,950 --> 00:36:03,350
field in here that is corrupt that's uh

836
00:35:59,990 --> 00:36:05,330
<font color="#CCCCCC">leading me to have some</font><font color="#E5E5E5"> issues but this</font>

837
00:36:03,350 --> 00:36:07,339
is how I kind<font color="#E5E5E5"> of had identified that</font><font color="#CCCCCC"> so</font>

838
00:36:05,330 --> 00:36:08,870
<font color="#E5E5E5">I know people like kind</font><font color="#CCCCCC"> of like working</font>

839
00:36:07,340 --> 00:36:10,640
through or talking<font color="#E5E5E5"> about how they are</font>

840
00:36:08,870 --> 00:36:11,870
<font color="#E5E5E5">working through</font><font color="#CCCCCC"> problems</font><font color="#E5E5E5"> so moving</font>

841
00:36:10,640 --> 00:36:13,960
<font color="#CCCCCC">forward one of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> things I'm going</font><font color="#E5E5E5"> to</font>

842
00:36:11,870 --> 00:36:16,520
end up<font color="#E5E5E5"> doing is I'm going to take these</font>

843
00:36:13,960 --> 00:36:18,440
<font color="#CCCCCC">these</font><font color="#E5E5E5"> addresses convert them into the</font>

844
00:36:16,520 --> 00:36:20,509
virtual<font color="#E5E5E5"> addresses which what Ida has</font>

845
00:36:18,440 --> 00:36:23,600
over here so that's<font color="#E5E5E5"> different than</font><font color="#CCCCCC"> what</font>

846
00:36:20,510 --> 00:36:26,090
we had seen<font color="#CCCCCC"> in PE</font><font color="#E5E5E5"> bear where PE bear is</font>

847
00:36:23,600 --> 00:36:28,100
<font color="#E5E5E5">utilizing</font><font color="#CCCCCC"> the raw the r-va over here so</font>

848
00:36:26,090 --> 00:36:29,360
we can<font color="#E5E5E5"> using</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> to pretty</font><font color="#CCCCCC"> easily convert</font>

849
00:36:28,100 --> 00:36:32,540
those I'm<font color="#CCCCCC"> going to end up setting</font>

850
00:36:29,360 --> 00:36:34,460
breakpoints<font color="#CCCCCC"> read</font><font color="#E5E5E5"> breakpoints on when</font>

851
00:36:32,540 --> 00:36:36,230
<font color="#E5E5E5">this data is being</font><font color="#CCCCCC"> accessed</font><font color="#E5E5E5"> and then</font>

852
00:36:34,460 --> 00:36:38,000
take a look<font color="#E5E5E5"> at at the code and</font><font color="#CCCCCC"> identify</font>

853
00:36:36,230 --> 00:36:39,890
<font color="#E5E5E5">like what is actually running analysis</font>

854
00:36:38,000 --> 00:36:41,600
on<font color="#E5E5E5"> this and figure out how I can sort of</font>

855
00:36:39,890 --> 00:36:43,730
make<font color="#E5E5E5"> that happy and continue on so</font>

856
00:36:41,600 --> 00:36:45,500
ideally whoever is utilizing<font color="#E5E5E5"> this can</font>

857
00:36:43,730 --> 00:36:48,470
compile the original as an executable or

858
00:36:45,500 --> 00:36:51,050
<font color="#CCCCCC">dll to once again have</font><font color="#E5E5E5"> those options if</font>

859
00:36:48,470 --> 00:36:53,120
you need to start<font color="#E5E5E5"> out with an executable</font>

860
00:36:51,050 --> 00:36:55,190
for an operation my recommendation to

861
00:36:53,120 --> 00:36:58,160
you<font color="#E5E5E5"> right now</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> just compile it as a</font>

862
00:36:55,190 --> 00:36:59,870
DLL and utilize the exact same project

863
00:36:58,160 --> 00:37:01,609
<font color="#E5E5E5">convert it on to a DLL and</font><font color="#CCCCCC"> or excuse me</font>

864
00:36:59,870 --> 00:37:04,339
<font color="#CCCCCC">an executable</font><font color="#E5E5E5"> and now you have both and</font>

865
00:37:01,610 --> 00:37:06,050
they're<font color="#E5E5E5"> both going</font><font color="#CCCCCC"> to work</font><font color="#E5E5E5"> so let's do a</font>

866
00:37:04,340 --> 00:37:08,480
<font color="#CCCCCC">demonstration of this so this</font><font color="#E5E5E5"> is going</font>

867
00:37:06,050 --> 00:37:11,270
<font color="#CCCCCC">to be a separate demo the public</font>

868
00:37:08,480 --> 00:37:12,830
demonstration is<font color="#CCCCCC"> going to combine</font><font color="#E5E5E5"> both</font>

869
00:37:11,270 --> 00:37:16,009
of<font color="#CCCCCC"> these together</font><font color="#E5E5E5"> I'll describe</font><font color="#CCCCCC"> what</font>

870
00:37:12,830 --> 00:37:18,980
that<font color="#E5E5E5"> will look like in a little bit so</font>

871
00:37:16,010 --> 00:37:21,770
this is not a reflectively loadable<font color="#E5E5E5"> DLL</font>

872
00:37:18,980 --> 00:37:24,050
<font color="#E5E5E5">this executable is simply going</font><font color="#CCCCCC"> to dump</font>

873
00:37:21,770 --> 00:37:26,330
itself back out<font color="#CCCCCC"> onto disk but it's</font><font color="#E5E5E5"> going</font>

874
00:37:24,050 --> 00:37:28,010
<font color="#E5E5E5">to dump both a DLL and an executable</font>

875
00:37:26,330 --> 00:37:29,750
<font color="#E5E5E5">back out onto disk and we're going</font><font color="#CCCCCC"> to</font>

876
00:37:28,010 --> 00:37:32,660
use Python<font color="#E5E5E5"> this time and the system</font>

877
00:37:29,750 --> 00:37:37,370
<font color="#E5E5E5">loader by simply calling</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> types when</font>

878
00:37:32,660 --> 00:37:41,120
DLL of load library<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> a make this a</font>

879
00:37:37,370 --> 00:37:41,630
bit<font color="#CCCCCC"> bigger here that's about as big as</font>

880
00:37:41,120 --> 00:37:47,270
<font color="#E5E5E5">it gets</font>

881
00:37:41,630 --> 00:37:49,070
<font color="#E5E5E5">thanks</font><font color="#CCCCCC"> windows that's probably</font><font color="#E5E5E5"> worse</font>

882
00:37:47,270 --> 00:37:50,960
<font color="#E5E5E5">okay well anyways we're simply</font><font color="#CCCCCC"> using</font>

883
00:37:49,070 --> 00:37:54,170
<font color="#E5E5E5">Python to quickly wrap a</font><font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> 32</font>

884
00:37:50,960 --> 00:37:57,800
<font color="#E5E5E5">you're calling load</font><font color="#CCCCCC"> library</font><font color="#E5E5E5"> to load that</font>

885
00:37:54,170 --> 00:37:59,300
DLL<font color="#E5E5E5"> and when we do it let's move this a</font>

886
00:37:57,800 --> 00:38:01,250
<font color="#E5E5E5">little bit over here to the side so we</font>

887
00:37:59,300 --> 00:38:02,840
<font color="#CCCCCC">can</font><font color="#E5E5E5"> see what happens to</font><font color="#CCCCCC"> the desktop we</font>

888
00:38:01,250 --> 00:38:04,490
run<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we get a number</font><font color="#E5E5E5"> back showing</font>

889
00:38:02,840 --> 00:38:06,440
<font color="#E5E5E5">that it got loaded and we have this</font>

890
00:38:04,490 --> 00:38:08,899
<font color="#CCCCCC">brand-new</font><font color="#E5E5E5"> this reflective transformer</font>

891
00:38:06,440 --> 00:38:09,619
<font color="#CCCCCC">dot X 64 X</font><font color="#E5E5E5"> C</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> now what we're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

892
00:38:08,900 --> 00:38:12,109
do is go ahead and

893
00:38:09,619 --> 00:38:13,509
back up<font color="#E5E5E5"> both of these that we compare</font>

894
00:38:12,109 --> 00:38:21,049
them later

895
00:38:13,509 --> 00:38:23,829
<font color="#CCCCCC">KDOT dll and</font><font color="#E5E5E5"> the UK dot exe</font><font color="#CCCCCC"> now we're</font>

896
00:38:21,049 --> 00:38:28,819
going<font color="#E5E5E5"> to double</font><font color="#CCCCCC"> click down</font><font color="#E5E5E5"> one it ran</font>

897
00:38:23,829 --> 00:38:31,059
and we have a reflective transformer<font color="#CCCCCC"> DLL</font>

898
00:38:28,819 --> 00:38:33,680
back out now so we're going<font color="#CCCCCC"> to take this</font>

899
00:38:31,059 --> 00:38:35,390
we're<font color="#E5E5E5"> going to compare this hash because</font>

900
00:38:33,680 --> 00:38:37,190
<font color="#CCCCCC">you have to</font><font color="#E5E5E5"> compare the DLL</font><font color="#CCCCCC"> to the exes</font>

901
00:38:35,390 --> 00:38:38,359
because<font color="#CCCCCC"> there they are</font><font color="#E5E5E5"> different but the</font>

902
00:38:37,190 --> 00:38:41,960
point is<font color="#CCCCCC"> that they're</font><font color="#E5E5E5"> different in a</font>

903
00:38:38,359 --> 00:38:43,759
recoverable way so we have<font color="#E5E5E5"> our our BK</font>

904
00:38:41,960 --> 00:38:45,440
and our<font color="#E5E5E5"> normal one and we're going</font><font color="#CCCCCC"> to</font>

905
00:38:43,759 --> 00:38:47,990
compare these file hashes and<font color="#CCCCCC"> we have</font>

906
00:38:45,440 --> 00:38:53,450
the exact same<font color="#E5E5E5"> file hash we have</font><font color="#CCCCCC"> five</font>

907
00:38:47,990 --> 00:38:55,519
<font color="#E5E5E5">CAC III</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> C so tada the DLLs are the</font>

908
00:38:53,450 --> 00:38:58,069
same and to<font color="#E5E5E5"> prove</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> can then go</font>

909
00:38:55,519 --> 00:38:59,450
<font color="#CCCCCC">back to an executable again we have this</font>

910
00:38:58,069 --> 00:39:08,900
one existing on memory again<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> gonna</font>

911
00:38:59,450 --> 00:39:20,239
<font color="#E5E5E5">run that one more time and where did it</font>

912
00:39:08,900 --> 00:39:23,509
go<font color="#E5E5E5"> oh that's because this is actually</font>

913
00:39:20,239 --> 00:39:28,730
already in<font color="#E5E5E5"> memory so if we're gonna run</font>

914
00:39:23,509 --> 00:39:30,829
<font color="#CCCCCC">this one more time</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> now we have to</font>

915
00:39:28,730 --> 00:39:33,950
exe s we have our BK and we can compare

916
00:39:30,829 --> 00:39:35,869
this one to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> one once again the</font>

917
00:39:33,950 --> 00:39:37,788
<font color="#CCCCCC">x's and the</font><font color="#E5E5E5"> dll's are gonna have</font>

918
00:39:35,869 --> 00:39:45,109
different checksums<font color="#E5E5E5"> and that is</font>

919
00:39:37,789 --> 00:39:50,029
intentional<font color="#CCCCCC"> and there we go</font><font color="#E5E5E5"> so we have</font>

920
00:39:45,109 --> 00:39:53,029
<font color="#E5E5E5">72</font><font color="#CCCCCC"> b b 23</font><font color="#E5E5E5"> B 3 so we went from</font><font color="#CCCCCC"> a dll to</font>

921
00:39:50,029 --> 00:39:54,529
<font color="#E5E5E5">an XC back to a</font><font color="#CCCCCC"> dll and</font><font color="#E5E5E5"> then that dll</font>

922
00:39:53,029 --> 00:39:57,109
<font color="#E5E5E5">made another actually and the x's are</font>

923
00:39:54,529 --> 00:39:58,940
the same the dll's are the same so<font color="#CCCCCC"> we</font>

924
00:39:57,109 --> 00:40:00,558
could in theory continue to do this<font color="#CCCCCC"> and</font>

925
00:39:58,940 --> 00:40:02,210
<font color="#E5E5E5">unless some astronomical thing causes a</font>

926
00:40:00,559 --> 00:40:04,309
bit to get<font color="#E5E5E5"> flipped it will be will be</font>

927
00:40:02,210 --> 00:40:06,200
all<font color="#E5E5E5"> good and we can</font><font color="#CCCCCC"> just keep going</font><font color="#E5E5E5"> on</font>

928
00:40:04,309 --> 00:40:08,839
this in an endless<font color="#E5E5E5"> and an endless</font><font color="#CCCCCC"> sight</font>

929
00:40:06,200 --> 00:40:09,950
<font color="#E5E5E5">so like I</font><font color="#CCCCCC"> mentioned the</font><font color="#E5E5E5"> public version</font>

930
00:40:08,839 --> 00:40:12,739
<font color="#E5E5E5">was</font><font color="#CCCCCC"> going to have a slightly different</font>

931
00:40:09,950 --> 00:40:14,180
demo we're gonna have a single<font color="#CCCCCC"> dll</font><font color="#E5E5E5"> that</font>

932
00:40:12,739 --> 00:40:16,369
will be reflectively loaded and it's

933
00:40:14,180 --> 00:40:18,410
gonna<font color="#E5E5E5"> bump the two in together it's</font>

934
00:40:16,369 --> 00:40:20,359
gonna have<font color="#CCCCCC"> that like select ok thing and</font>

935
00:40:18,410 --> 00:40:22,098
you'll have the<font color="#E5E5E5"> opportunity to delete it</font>

936
00:40:20,359 --> 00:40:23,779
off of your desktop<font color="#E5E5E5"> and then when you</font>

937
00:40:22,099 --> 00:40:25,250
<font color="#E5E5E5">hit</font><font color="#CCCCCC"> OK it's not just going</font><font color="#E5E5E5"> to draw</font>

938
00:40:23,780 --> 00:40:27,620
the<font color="#E5E5E5"> DLL but it's also gonna drop the</font>

939
00:40:25,250 --> 00:40:29,570
executable<font color="#E5E5E5"> you</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> then take both copy</font>

940
00:40:27,620 --> 00:40:30,890
them over<font color="#E5E5E5"> to Like dot</font><font color="#CCCCCC"> BK or</font><font color="#E5E5E5"> whatever's</font>

941
00:40:29,570 --> 00:40:32,090
you can get those hashes<font color="#CCCCCC"> and</font><font color="#E5E5E5"> compare</font>

942
00:40:30,890 --> 00:40:34,069
them for yourself so<font color="#E5E5E5"> you make sure I'm</font>

943
00:40:32,090 --> 00:40:35,180
not<font color="#E5E5E5"> crazy</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then you just run one of</font>

944
00:40:34,070 --> 00:40:38,270
<font color="#E5E5E5">those again you'll get them both back</font>

945
00:40:35,180 --> 00:40:40,819
out<font color="#CCCCCC"> again so should be</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that will</font>

946
00:40:38,270 --> 00:40:42,500
be the public<font color="#CCCCCC"> one so the core</font><font color="#E5E5E5"> API for</font>

947
00:40:40,820 --> 00:40:43,820
<font color="#E5E5E5">the transformer is a little bit more</font>

948
00:40:42,500 --> 00:40:45,500
complicated<font color="#E5E5E5"> than</font><font color="#CCCCCC"> just like those two</font>

949
00:40:43,820 --> 00:40:48,560
<font color="#CCCCCC">it's not really more complicated there's</font>

950
00:40:45,500 --> 00:40:49,670
a couple<font color="#E5E5E5"> more convenience features so</font>

951
00:40:48,560 --> 00:40:51,740
like I mentioned<font color="#CCCCCC"> you</font><font color="#E5E5E5"> need to be able to</font>

952
00:40:49,670 --> 00:40:53,180
identify<font color="#E5E5E5"> what you're running</font><font color="#CCCCCC"> as in disk</font>

953
00:40:51,740 --> 00:40:54,620
because<font color="#E5E5E5"> this is kind of kind of</font>

954
00:40:53,180 --> 00:40:55,879
<font color="#CCCCCC">different because</font><font color="#E5E5E5"> like you're normally</font>

955
00:40:54,620 --> 00:40:57,319
writing a DLL you're like well I'm

956
00:40:55,880 --> 00:40:59,330
always gonna<font color="#E5E5E5"> be a DLL but if you're</font>

957
00:40:57,320 --> 00:41:00,590
utilizing this that may not<font color="#E5E5E5"> be</font><font color="#CCCCCC"> true so</font>

958
00:40:59,330 --> 00:41:02,240
you need to<font color="#E5E5E5"> have a starting</font><font color="#CCCCCC"> point and</font>

959
00:41:00,590 --> 00:41:04,670
<font color="#E5E5E5">know where you are to figure out where</font>

960
00:41:02,240 --> 00:41:07,069
you<font color="#CCCCCC"> need to go</font><font color="#E5E5E5"> so to that end we</font><font color="#CCCCCC"> have a</font>

961
00:41:04,670 --> 00:41:12,230
<font color="#CCCCCC">DOS header as DLL and DOS header</font><font color="#E5E5E5"> is XE</font>

962
00:41:07,070 --> 00:41:14,450
all of these yes all five of these

963
00:41:12,230 --> 00:41:16,280
simply take the output from<font color="#E5E5E5"> the</font>

964
00:41:14,450 --> 00:41:18,259
reflective unloader<font color="#CCCCCC"> likewise you</font><font color="#E5E5E5"> could</font>

965
00:41:16,280 --> 00:41:19,340
<font color="#E5E5E5">just load</font><font color="#CCCCCC"> up the file on disk</font><font color="#E5E5E5"> and copy</font>

966
00:41:18,260 --> 00:41:20,750
<font color="#E5E5E5">that into memory and</font><font color="#CCCCCC"> it's gonna be the</font>

967
00:41:19,340 --> 00:41:22,580
exact<font color="#CCCCCC"> same thing you just point it</font><font color="#E5E5E5"> to</font>

968
00:41:20,750 --> 00:41:24,500
<font color="#CCCCCC">that</font><font color="#E5E5E5"> giant blob and you're good to</font><font color="#CCCCCC"> go</font>

969
00:41:22,580 --> 00:41:26,870
<font color="#E5E5E5">but</font><font color="#CCCCCC"> we have the ability to check</font><font color="#E5E5E5"> to see</font>

970
00:41:24,500 --> 00:41:28,370
<font color="#E5E5E5">if we're a</font><font color="#CCCCCC"> DLL or an executable</font><font color="#E5E5E5"> these</font>

971
00:41:26,870 --> 00:41:30,470
are explicit<font color="#E5E5E5"> to hopefully in the future</font>

972
00:41:28,370 --> 00:41:32,089
<font color="#E5E5E5">be able</font><font color="#CCCCCC"> to identify additional types if</font>

973
00:41:30,470 --> 00:41:33,379
you wanted to you like go into hard mode

974
00:41:32,090 --> 00:41:35,210
we<font color="#CCCCCC"> can have like a driver or something</font>

975
00:41:33,380 --> 00:41:37,730
<font color="#E5E5E5">or one of those other PE file types and</font>

976
00:41:35,210 --> 00:41:39,650
then once we<font color="#CCCCCC"> know what we are we can as</font>

977
00:41:37,730 --> 00:41:42,260
appropriate transform<font color="#CCCCCC"> ourselves either</font>

978
00:41:39,650 --> 00:41:43,700
into a<font color="#E5E5E5"> DLL or an executable with the</font>

979
00:41:42,260 --> 00:41:46,340
appropriate functions<font color="#E5E5E5"> to transform</font><font color="#CCCCCC"> the</font>

980
00:41:43,700 --> 00:41:48,080
DLL transform to<font color="#CCCCCC"> XE those are going</font><font color="#E5E5E5"> to</font>

981
00:41:46,340 --> 00:41:50,120
take<font color="#E5E5E5"> that blob and they're gonna take</font>

982
00:41:48,080 --> 00:41:52,220
the new address<font color="#E5E5E5"> starting point so you</font>

983
00:41:50,120 --> 00:41:54,589
<font color="#E5E5E5">can get that however you want but for</font>

984
00:41:52,220 --> 00:41:56,270
<font color="#CCCCCC">convenience I provide the r-va from</font>

985
00:41:54,590 --> 00:41:57,710
export name that's gonna take that blob

986
00:41:56,270 --> 00:42:00,200
<font color="#E5E5E5">and you can give it like an asking name</font>

987
00:41:57,710 --> 00:42:02,630
like DLL main and<font color="#E5E5E5"> it's gonna find the</font>

988
00:42:00,200 --> 00:42:04,939
<font color="#CCCCCC">appropriate value to then pass</font><font color="#E5E5E5"> up into</font>

989
00:42:02,630 --> 00:42:07,130
the reflective transformer<font color="#E5E5E5"> so that you</font>

990
00:42:04,940 --> 00:42:08,780
can do that<font color="#E5E5E5"> and you don't have to worry</font>

991
00:42:07,130 --> 00:42:11,720
about parsing<font color="#E5E5E5"> about yourself or anything</font>

992
00:42:08,780 --> 00:42:13,820
like that it's kind of a pain this is

993
00:42:11,720 --> 00:42:15,770
also all live it's in the same

994
00:42:13,820 --> 00:42:17,840
<font color="#CCCCCC">repository I apologize</font><font color="#E5E5E5"> for how difficult</font>

995
00:42:15,770 --> 00:42:19,810
that is<font color="#CCCCCC"> to read it's not yeah it's still</font>

996
00:42:17,840 --> 00:42:22,910
that bad to read but sorry<font color="#CCCCCC"> about that</font>

997
00:42:19,810 --> 00:42:24,770
<font color="#CCCCCC">this is all fully documented in the C</font>

998
00:42:22,910 --> 00:42:25,819
code in addition<font color="#CCCCCC"> to figuring</font><font color="#E5E5E5"> out that</font>

999
00:42:24,770 --> 00:42:27,560
additional constraint of<font color="#E5E5E5"> why the</font>

1000
00:42:25,820 --> 00:42:29,180
<font color="#CCCCCC">original one needs to be an executable</font><font color="#E5E5E5"> I</font>

1001
00:42:27,560 --> 00:42:31,100
need to copy the documentation out of

1002
00:42:29,180 --> 00:42:36,020
the code into<font color="#E5E5E5"> like a nice readable</font>

1003
00:42:31,100 --> 00:42:37,549
markdown file<font color="#CCCCCC"> and the there is a public</font>

1004
00:42:36,020 --> 00:42:39,500
<font color="#CCCCCC">proof of concept</font><font color="#E5E5E5"> under the release</font>

1005
00:42:37,550 --> 00:42:41,180
just for the reflective unloader<font color="#CCCCCC"> on the</font>

1006
00:42:39,500 --> 00:42:43,010
transformer code is live but there's<font color="#E5E5E5"> not</font>

1007
00:42:41,180 --> 00:42:44,419
like a built one yet<font color="#E5E5E5"> I'm hoping</font><font color="#CCCCCC"> to have</font>

1008
00:42:43,010 --> 00:42:46,520
that<font color="#E5E5E5"> done in the next</font><font color="#CCCCCC"> couple days</font><font color="#E5E5E5"> but</font>

1009
00:42:44,420 --> 00:42:48,920
all of the code<font color="#CCCCCC"> that you have seen is</font>

1010
00:42:46,520 --> 00:42:50,020
all<font color="#CCCCCC"> live it's all public right now so</font>

1011
00:42:48,920 --> 00:42:52,370
you go ahead<font color="#E5E5E5"> and check</font><font color="#CCCCCC"> that out and</font>

1012
00:42:50,020 --> 00:42:53,750
thanks everyone<font color="#E5E5E5"> and that is much</font><font color="#CCCCCC"> easier</font>

1013
00:42:52,370 --> 00:43:02,330
to<font color="#E5E5E5"> read that's the exact</font><font color="#CCCCCC"> same like from</font>

1014
00:42:53,750 --> 00:43:04,070
everywhere<font color="#CCCCCC"> else</font><font color="#E5E5E5"> so that's it so anybody</font>

1015
00:43:02,330 --> 00:43:05,960
anybody have any questions I have some

1016
00:43:04,070 --> 00:43:10,040
pretty sweet challenge coins<font color="#CCCCCC"> pretty</font>

1017
00:43:05,960 --> 00:43:13,810
sweet<font color="#E5E5E5"> besides challenge coins nope okay</font>

1018
00:43:10,040 --> 00:43:13,810
then I<font color="#CCCCCC"> will actually share</font><font color="#E5E5E5"> a question</font><font color="#CCCCCC"> oh</font>

1019
00:43:19,330 --> 00:43:24,020
the genesis<font color="#E5E5E5"> of this</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> goes back</font><font color="#CCCCCC"> quite</font>

1020
00:43:22,310 --> 00:43:26,240
a few<font color="#CCCCCC"> years actually when I</font><font color="#E5E5E5"> first got</font>

1021
00:43:24,020 --> 00:43:27,650
<font color="#CCCCCC">started</font><font color="#E5E5E5"> messing around like dll's and</font>

1022
00:43:26,240 --> 00:43:29,359
like implants and stuff like<font color="#E5E5E5"> that I had</font>

1023
00:43:27,650 --> 00:43:31,220
this<font color="#CCCCCC"> DLL that you could call like load</font>

1024
00:43:29,360 --> 00:43:33,140
library<font color="#E5E5E5"> on and it would hook like when</font>

1025
00:43:31,220 --> 00:43:35,839
the process<font color="#E5E5E5"> would exit and it would copy</font>

1026
00:43:33,140 --> 00:43:37,310
<font color="#E5E5E5">itself up into another</font><font color="#CCCCCC"> process it</font><font color="#E5E5E5"> was</font>

1027
00:43:35,840 --> 00:43:39,470
like whack-a-mole it would like pop<font color="#CCCCCC"> up</font>

1028
00:43:37,310 --> 00:43:40,730
like<font color="#E5E5E5"> a ha ha</font><font color="#CCCCCC"> I'm in pid' 132 and</font><font color="#E5E5E5"> you</font>

1029
00:43:39,470 --> 00:43:42,529
would like close that process and now

1030
00:43:40,730 --> 00:43:44,390
it's in another<font color="#CCCCCC"> Pig it was it was a</font>

1031
00:43:42,530 --> 00:43:46,010
pretty<font color="#E5E5E5"> funny joke but then one of the</font>

1032
00:43:44,390 --> 00:43:48,020
guys and it was<font color="#E5E5E5"> only intended to be a</font>

1033
00:43:46,010 --> 00:43:49,850
joke<font color="#E5E5E5"> but then when one of the guys that</font>

1034
00:43:48,020 --> 00:43:51,470
I work with saw that he was<font color="#E5E5E5"> like we need</font>

1035
00:43:49,850 --> 00:43:53,420
<font color="#CCCCCC">to</font><font color="#E5E5E5"> make this into</font><font color="#CCCCCC"> an implant so when I</font>

1036
00:43:51,470 --> 00:43:56,089
started<font color="#CCCCCC"> looking into</font><font color="#E5E5E5"> like how you would</font>

1037
00:43:53,420 --> 00:43:57,590
actually do<font color="#CCCCCC"> that in the real world you</font>

1038
00:43:56,090 --> 00:43:59,240
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> want that DLL to exist on disk</font>

1039
00:43:57,590 --> 00:44:00,620
because<font color="#E5E5E5"> that that that's bad</font><font color="#CCCCCC"> news and</font>

1040
00:43:59,240 --> 00:44:02,299
that's<font color="#E5E5E5"> where the reflective unloader</font>

1041
00:44:00,620 --> 00:44:04,130
came into place that<font color="#E5E5E5"> way we could copy</font>

1042
00:44:02,300 --> 00:44:06,020
ourselves out<font color="#E5E5E5"> of memory and then inject</font>

1043
00:44:04,130 --> 00:44:08,060
into another process<font color="#E5E5E5"> by using the</font>

1044
00:44:06,020 --> 00:44:10,060
<font color="#CCCCCC">reflective DLL injection so we started</font>

1045
00:44:08,060 --> 00:44:12,529
<font color="#E5E5E5">using that that worked out pretty</font><font color="#CCCCCC"> well</font>

1046
00:44:10,060 --> 00:44:15,170
<font color="#CCCCCC">that way we could we could clone</font><font color="#E5E5E5"> our</font>

1047
00:44:12,530 --> 00:44:16,460
implants<font color="#E5E5E5"> and not have to copy them over</font>

1048
00:44:15,170 --> 00:44:17,300
<font color="#E5E5E5">the network again which is</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be</font>

1049
00:44:16,460 --> 00:44:19,430
where it's gonna be<font color="#E5E5E5"> most vulnerable</font>

1050
00:44:17,300 --> 00:44:20,570
nobody wants that<font color="#E5E5E5"> but then we had this</font>

1051
00:44:19,430 --> 00:44:22,669
problem<font color="#CCCCCC"> we're like you</font><font color="#E5E5E5"> know sometimes</font>

1052
00:44:20,570 --> 00:44:24,860
you drop<font color="#E5E5E5"> an XE and then the reflective</font>

1053
00:44:22,670 --> 00:44:26,000
<font color="#CCCCCC">of the being able to spawn</font><font color="#E5E5E5"> a new one</font>

1054
00:44:24,860 --> 00:44:28,610
just<font color="#E5E5E5"> wouldn't work because you can't</font>

1055
00:44:26,000 --> 00:44:30,380
reflectively<font color="#CCCCCC"> DLL inject and executable</font>

1056
00:44:28,610 --> 00:44:32,330
<font color="#E5E5E5">so if you you started with an executable</font>

1057
00:44:30,380 --> 00:44:34,190
<font color="#E5E5E5">that was just like what</font><font color="#CCCCCC"> you had and</font><font color="#E5E5E5"> like</font>

1058
00:44:32,330 --> 00:44:35,240
you just<font color="#CCCCCC"> couldn't do it but now</font><font color="#E5E5E5"> we</font>

1059
00:44:34,190 --> 00:44:37,670
<font color="#E5E5E5">wanted the</font><font color="#CCCCCC"> ability</font><font color="#E5E5E5"> to have more</font>

1060
00:44:35,240 --> 00:44:39,979
flexibility and have it not matter what

1061
00:44:37,670 --> 00:44:47,290
the original file was<font color="#CCCCCC"> that was kind of</font>

1062
00:44:39,980 --> 00:44:47,290
the<font color="#CCCCCC"> evolution of that yes</font>

1063
00:44:48,800 --> 00:44:57,890
that's<font color="#E5E5E5"> this files for the drivers and</font>

1064
00:44:51,339 --> 00:45:01,970
<font color="#E5E5E5">not they're like they're like data files</font>

1065
00:44:57,890 --> 00:45:03,410
for the<font color="#E5E5E5"> I I don't remember I'm pretty</font>

1066
00:45:01,970 --> 00:45:05,839
sure<font color="#E5E5E5"> font files were like the the number</font>

1067
00:45:03,410 --> 00:45:37,670
<font color="#E5E5E5">one</font><font color="#CCCCCC"> never</font><font color="#E5E5E5"> the non-executable</font><font color="#CCCCCC"> PC</font><font color="#E5E5E5"> files</font>

1068
00:45:05,839 --> 00:45:38,839
<font color="#E5E5E5">yeah yes oh yeah yeah I mean</font><font color="#CCCCCC"> if you want</font>

1069
00:45:37,670 --> 00:45:40,460
<font color="#CCCCCC">to do that</font><font color="#E5E5E5"> for like cooking</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> whatever</font>

1070
00:45:38,839 --> 00:45:42,980
once it's all<font color="#CCCCCC"> in your</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> and it's</font>

1071
00:45:40,460 --> 00:45:44,240
marked as writable<font color="#E5E5E5"> you can do you can do</font>

1072
00:45:42,980 --> 00:45:46,550
whatever you want<font color="#CCCCCC"> because like we're</font><font color="#E5E5E5"> not</font>

1073
00:45:44,240 --> 00:45:47,509
<font color="#CCCCCC">really infecting another process this is</font>

1074
00:45:46,550 --> 00:45:49,010
all kind<font color="#E5E5E5"> of operating under the</font>

1075
00:45:47,510 --> 00:45:51,589
<font color="#E5E5E5">assumption that you started this</font><font color="#CCCCCC"> process</font>

1076
00:45:49,010 --> 00:45:53,300
you own everything<font color="#E5E5E5"> in this process there</font>

1077
00:45:51,589 --> 00:45:54,230
aren't really any<font color="#E5E5E5"> limitations you could</font>

1078
00:45:53,300 --> 00:45:55,579
<font color="#CCCCCC">hook yourself</font><font color="#E5E5E5"> or if you're being</font>

1079
00:45:54,230 --> 00:45:57,650
injected into another one<font color="#E5E5E5"> that you are</font>

1080
00:45:55,579 --> 00:45:58,970
<font color="#E5E5E5">interested in then yeah you could update</font>

1081
00:45:57,650 --> 00:46:00,710
like the<font color="#E5E5E5"> global offset</font><font color="#CCCCCC"> table or</font>

1082
00:45:58,970 --> 00:46:02,959
<font color="#E5E5E5">something along those</font><font color="#CCCCCC"> lines there's</font><font color="#E5E5E5"> not</font>

1083
00:46:00,710 --> 00:46:06,550
really<font color="#E5E5E5"> any permission constraints on</font>

1084
00:46:02,960 --> 00:46:06,550
those<font color="#E5E5E5"> cos all it's all just your process</font>

1085
00:46:07,890 --> 00:46:10,989
[Music]

1086
00:46:12,430 --> 00:46:16,848
well it all actually<font color="#CCCCCC"> just exists</font><font color="#E5E5E5"> just</font>

1087
00:46:15,349 --> 00:46:18,079
like in the<font color="#E5E5E5"> virtual address space</font><font color="#CCCCCC"> you</font>

1088
00:46:16,849 --> 00:46:19,670
<font color="#CCCCCC">don't really even need to do</font><font color="#E5E5E5"> that if you</font>

1089
00:46:18,079 --> 00:46:22,250
can resolve it with like<font color="#CCCCCC"> get module</font>

1090
00:46:19,670 --> 00:46:23,480
handle the value returned from get

1091
00:46:22,250 --> 00:46:25,400
module handle<font color="#E5E5E5"> is going to be the address</font>

1092
00:46:23,480 --> 00:46:26,660
<font color="#E5E5E5">of where that MZ header is so you don't</font>

1093
00:46:25,400 --> 00:46:28,670
<font color="#CCCCCC">even</font><font color="#E5E5E5"> need to call another functions you</font>

1094
00:46:26,660 --> 00:46:30,200
<font color="#E5E5E5">can just do with mem copy</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you wanted</font>

1095
00:46:28,670 --> 00:46:34,089
or what<font color="#E5E5E5"> I'm actually doing is just</font>

1096
00:46:30,200 --> 00:46:36,828
direct like pointer access to do it

1097
00:46:34,089 --> 00:46:41,450
<font color="#E5E5E5">passing it to a structure and then just</font>

1098
00:46:36,829 --> 00:46:42,980
<font color="#E5E5E5">accessing it that way yep</font><font color="#CCCCCC"> thanks one</font><font color="#E5E5E5"> of</font>

1099
00:46:41,450 --> 00:46:45,379
the questions I did get<font color="#E5E5E5"> on that I</font>

1100
00:46:42,980 --> 00:46:48,680
<font color="#E5E5E5">thought was really</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> previously was</font>

1101
00:46:45,380 --> 00:46:50,450
somebody was<font color="#E5E5E5"> asking about the dot BSS</font>

1102
00:46:48,680 --> 00:46:52,069
section<font color="#E5E5E5"> I guess specifically is filled</font>

1103
00:46:50,450 --> 00:46:53,660
with zeros and they were<font color="#E5E5E5"> asking about if</font>

1104
00:46:52,069 --> 00:46:55,369
I had considered<font color="#E5E5E5"> instead of copying over</font>

1105
00:46:53,660 --> 00:46:56,480
<font color="#E5E5E5">like all the zeros because that would be</font>

1106
00:46:55,369 --> 00:46:58,310
that would<font color="#E5E5E5"> be a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> data and</font>

1107
00:46:56,480 --> 00:46:58,610
inefficient which is something<font color="#E5E5E5"> I want to</font>

1108
00:46:58,310 --> 00:47:01,580
<font color="#E5E5E5">folk</font>

1109
00:46:58,610 --> 00:47:04,970
if I'd considered compressing it the

1110
00:47:01,580 --> 00:47:08,029
answer is is<font color="#CCCCCC"> no</font><font color="#E5E5E5"> because then the</font>

1111
00:47:04,970 --> 00:47:10,430
unloader would have to have a way to

1112
00:47:08,030 --> 00:47:12,770
<font color="#E5E5E5">analyze and determine</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this section</font>

1113
00:47:10,430 --> 00:47:15,140
<font color="#E5E5E5">can effectively be compressed then</font>

1114
00:47:12,770 --> 00:47:17,920
include the<font color="#E5E5E5"> logic to compress it</font><font color="#CCCCCC"> and</font>

1115
00:47:15,140 --> 00:47:20,960
decompress<font color="#CCCCCC"> it and that</font><font color="#E5E5E5"> decompressing it</font>

1116
00:47:17,920 --> 00:47:22,340
that<font color="#E5E5E5"> additional</font><font color="#CCCCCC"> logic I'm guessing I</font>

1117
00:47:20,960 --> 00:47:24,050
<font color="#CCCCCC">don't actually have the numbers behind</font>

1118
00:47:22,340 --> 00:47:25,880
<font color="#E5E5E5">it but I'm</font><font color="#CCCCCC"> guessing just</font><font color="#E5E5E5"> like including</font>

1119
00:47:24,050 --> 00:47:28,580
and linking in<font color="#CCCCCC"> C Lib</font><font color="#E5E5E5"> is probably going</font>

1120
00:47:25,880 --> 00:47:30,350
<font color="#E5E5E5">to increase the amount of space utilized</font>

1121
00:47:28,580 --> 00:47:32,210
by more than<font color="#E5E5E5"> it would save by</font>

1122
00:47:30,350 --> 00:47:33,290
<font color="#E5E5E5">compressing like three thousand</font><font color="#CCCCCC"> zeros or</font>

1123
00:47:32,210 --> 00:47:34,940
something like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> should kind of be</font>

1124
00:47:33,290 --> 00:47:36,980
like counterintuitive<font color="#CCCCCC"> and I really</font>

1125
00:47:34,940 --> 00:47:39,770
wanted to avoid logic that have to

1126
00:47:36,980 --> 00:47:41,540
handle sections with<font color="#E5E5E5"> special cases</font>

1127
00:47:39,770 --> 00:47:43,160
because that adds complexity that's a

1128
00:47:41,540 --> 00:47:44,870
bigger<font color="#CCCCCC"> opportunity for error like I</font><font color="#E5E5E5"> just</font>

1129
00:47:43,160 --> 00:47:45,799
<font color="#E5E5E5">don't want to want to stay away from</font>

1130
00:47:44,870 --> 00:47:48,740
<font color="#E5E5E5">that so we have something that's very</font>

1131
00:47:45,800 --> 00:47:49,610
reliable that that is all my challenge

1132
00:47:48,740 --> 00:47:51,169
<font color="#CCCCCC">point so if you guys have any other</font>

1133
00:47:49,610 --> 00:47:53,450
<font color="#CCCCCC">questions I'll be around all</font><font color="#E5E5E5"> day so</font>

1134
00:47:51,170 --> 00:47:56,719
thank you<font color="#CCCCCC"> very much</font>

1135
00:47:53,450 --> 00:47:56,718
[Applause]

