1
00:00:00,000 --> 00:00:13,170
check cool hey everyone<font color="#E5E5E5"> thanks pretty</font>

2
00:00:10,380 --> 00:00:14,849
excited to be here<font color="#E5E5E5"> this is my</font><font color="#CCCCCC"> third or</font>

3
00:00:13,170 --> 00:00:16,289
<font color="#E5E5E5">fourth time speaking at</font><font color="#CCCCCC"> B</font><font color="#E5E5E5"> side so thank</font>

4
00:00:14,849 --> 00:00:17,970
you all<font color="#E5E5E5"> for</font><font color="#CCCCCC"> coming</font>

5
00:00:16,289 --> 00:00:19,560
my name is Spencer<font color="#CCCCCC"> McIntyre and</font><font color="#E5E5E5"> we're</font>

6
00:00:17,970 --> 00:00:21,599
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to talk about the runtime</font>

7
00:00:19,560 --> 00:00:23,698
<font color="#E5E5E5">manipulation of some processes and OS X</font>

8
00:00:21,600 --> 00:00:25,980
from a post exploitation environment

9
00:00:23,699 --> 00:00:26,699
specifically<font color="#E5E5E5"> through meterpreter so I'm</font>

10
00:00:25,980 --> 00:00:28,590
gonna<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about some of</font><font color="#E5E5E5"> the features</font>

11
00:00:26,699 --> 00:00:30,240
<font color="#CCCCCC">that I've</font><font color="#E5E5E5"> added in some of the issues</font>

12
00:00:28,590 --> 00:00:32,780
add to overcome and ultimately give

13
00:00:30,240 --> 00:00:36,089
demonstration on<font color="#CCCCCC"> what we can do with</font><font color="#E5E5E5"> it</font>

14
00:00:32,780 --> 00:00:37,890
all right<font color="#E5E5E5"> so we're gonna talk about real</font>

15
00:00:36,090 --> 00:00:40,680
quick just<font color="#CCCCCC"> can do a real brief overview</font>

16
00:00:37,890 --> 00:00:42,450
of<font color="#CCCCCC"> Who I am NOT</font><font color="#E5E5E5"> the exciting part so we</font>

17
00:00:40,680 --> 00:00:44,730
<font color="#CCCCCC">talked about Python C</font><font color="#E5E5E5"> types because this</font>

18
00:00:42,450 --> 00:00:46,890
is all<font color="#E5E5E5"> implemented in Python if you</font>

19
00:00:44,730 --> 00:00:48,750
spoke<font color="#E5E5E5"> with me</font><font color="#CCCCCC"> before seeing my previous</font>

20
00:00:46,890 --> 00:00:50,670
presentations<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> a huge fan of Python</font>

21
00:00:48,750 --> 00:00:52,949
so there's always a minute in<font color="#E5E5E5"> the Python</font>

22
00:00:50,670 --> 00:00:54,360
<font color="#E5E5E5">interpreter using</font><font color="#CCCCCC"> the C types</font><font color="#E5E5E5"> library so</font>

23
00:00:52,949 --> 00:00:56,280
we<font color="#E5E5E5"> do a real</font><font color="#CCCCCC"> quick overview of</font><font color="#E5E5E5"> that</font>

24
00:00:54,360 --> 00:00:57,690
that's very integral part<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

25
00:00:56,280 --> 00:01:00,600
<font color="#E5E5E5">low-level stuff that we're actually</font>

26
00:00:57,690 --> 00:01:02,760
<font color="#E5E5E5">doing to change</font><font color="#CCCCCC"> these processes and</font><font color="#E5E5E5"> run</font>

27
00:01:00,600 --> 00:01:04,710
them at runtime<font color="#CCCCCC"> we're talking</font><font color="#E5E5E5"> about how</font>

28
00:01:02,760 --> 00:01:07,830
we actually<font color="#E5E5E5"> use that to integrate into a</font>

29
00:01:04,709 --> 00:01:09,570
interpreter and how<font color="#E5E5E5"> railgun actually</font>

30
00:01:07,830 --> 00:01:12,179
works<font color="#E5E5E5"> so if you've never used railgun</font>

31
00:01:09,570 --> 00:01:13,380
before<font color="#CCCCCC"> or actually have</font><font color="#E5E5E5"> never heard of</font>

32
00:01:12,180 --> 00:01:14,790
rail gun before chances are pretty good

33
00:01:13,380 --> 00:01:17,429
that you've actually<font color="#E5E5E5"> used in just didn't</font>

34
00:01:14,790 --> 00:01:18,720
<font color="#E5E5E5">quite know you were using it it's</font>

35
00:01:17,430 --> 00:01:21,000
<font color="#E5E5E5">low-level functionality that's</font>

36
00:01:18,720 --> 00:01:22,229
implemented<font color="#CCCCCC"> within</font><font color="#E5E5E5"> meterpreter as one of</font>

37
00:01:21,000 --> 00:01:23,820
<font color="#E5E5E5">the extensions</font><font color="#CCCCCC"> and so we're talking</font>

38
00:01:22,229 --> 00:01:25,400
<font color="#E5E5E5">about how that's actually used and what</font>

39
00:01:23,820 --> 00:01:28,439
benefits and advantages

40
00:01:25,400 --> 00:01:29,729
that has over doing<font color="#E5E5E5"> some things like</font>

41
00:01:28,439 --> 00:01:31,139
another way everything we're gonna<font color="#E5E5E5"> talk</font>

42
00:01:29,729 --> 00:01:33,479
<font color="#CCCCCC">about here like you could do</font><font color="#E5E5E5"> it another</font>

43
00:01:31,140 --> 00:01:35,299
<font color="#E5E5E5">way</font><font color="#CCCCCC"> but this</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to be a little</font>

44
00:01:33,479 --> 00:01:37,020
<font color="#E5E5E5">bit cleaners where we talk</font><font color="#CCCCCC"> about why</font>

45
00:01:35,299 --> 00:01:39,600
finally we're actually gonna talk about

46
00:01:37,020 --> 00:01:41,189
<font color="#CCCCCC">using like the Lib</font><font color="#E5E5E5"> Objective C and</font><font color="#CCCCCC"> we're</font>

47
00:01:39,600 --> 00:01:43,770
going to<font color="#E5E5E5"> do a real world example where</font>

48
00:01:41,189 --> 00:01:48,539
we're going to inject<font color="#CCCCCC"> and execute an</font>

49
00:01:43,770 --> 00:01:50,340
<font color="#CCCCCC">Apple script into our victim Mac here</font>

50
00:01:48,540 --> 00:01:51,720
and we're going to run that from within

51
00:01:50,340 --> 00:01:54,530
memory<font color="#E5E5E5"> so if you have any type of like a</font>

52
00:01:51,720 --> 00:01:56,280
post exploitation<font color="#CCCCCC"> Apple</font><font color="#E5E5E5"> scripts you have</font>

53
00:01:54,530 --> 00:01:57,479
<font color="#CCCCCC">you're obviously</font><font color="#E5E5E5"> not gonna want to have</font>

54
00:01:56,280 --> 00:01:59,040
those like<font color="#CCCCCC"> rented</font><font color="#E5E5E5"> dish</font><font color="#CCCCCC"> you're have</font>

55
00:01:57,479 --> 00:02:00,479
<font color="#CCCCCC">antivirus</font><font color="#E5E5E5"> going to gobble those up</font><font color="#CCCCCC"> so</font>

56
00:01:59,040 --> 00:02:02,549
we're<font color="#CCCCCC"> gonna show how you</font><font color="#E5E5E5"> can do that</font>

57
00:02:00,479 --> 00:02:04,110
<font color="#E5E5E5">without</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> writing</font><font color="#CCCCCC"> tips so real</font>

58
00:02:02,549 --> 00:02:06,750
quick<font color="#CCCCCC"> my name is Spencer MacIntyre I</font>

59
00:02:04,110 --> 00:02:09,300
work at a<font color="#E5E5E5"> secure</font><font color="#CCCCCC"> state a bunch of us</font>

60
00:02:06,750 --> 00:02:10,739
here at secure<font color="#CCCCCC"> State I</font><font color="#E5E5E5"> do research</font>

61
00:02:09,300 --> 00:02:13,190
developments<font color="#CCCCCC"> about four projects I'm a</font>

62
00:02:10,739 --> 00:02:15,380
huge<font color="#E5E5E5"> fan of open source I can</font><font color="#CCCCCC"> trigger</font>

63
00:02:13,190 --> 00:02:17,060
lots of<font color="#E5E5E5"> metal</font><font color="#CCCCCC"> project and I do a lot of</font>

64
00:02:15,380 --> 00:02:19,910
other projects<font color="#CCCCCC"> like in Python and</font><font color="#E5E5E5"> things</font>

65
00:02:17,060 --> 00:02:22,670
<font color="#E5E5E5">so it's not</font><font color="#CCCCCC"> about me all right</font>

66
00:02:19,910 --> 00:02:24,770
so<font color="#E5E5E5"> railgun or is where the QQQ comes in</font>

67
00:02:22,670 --> 00:02:25,940
I can never say railgun without hearing

68
00:02:24,770 --> 00:02:27,890
that<font color="#E5E5E5"> like you keep you in my head</font>

69
00:02:25,940 --> 00:02:31,670
because<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is just such a</font><font color="#CCCCCC"> fantastic</font>

70
00:02:27,890 --> 00:02:33,559
name<font color="#E5E5E5"> railgun sounds amazing so why do we</font>

71
00:02:31,670 --> 00:02:35,630
care or why do<font color="#E5E5E5"> we want to do this</font>

72
00:02:33,560 --> 00:02:37,640
through<font color="#E5E5E5"> rail guns</font><font color="#CCCCCC"> the number one reason</font>

73
00:02:35,630 --> 00:02:40,100
<font color="#E5E5E5">it's tells all</font><font color="#CCCCCC"> about the stealth</font>

74
00:02:37,640 --> 00:02:43,369
flexibility yes but it's primarily<font color="#E5E5E5"> the</font>

75
00:02:40,100 --> 00:02:44,840
stealth as a penetration<font color="#E5E5E5"> tester I've</font>

76
00:02:43,370 --> 00:02:46,040
never sold to a penetration tester I was

77
00:02:44,840 --> 00:02:47,420
like you know what I really want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get</font>

78
00:02:46,040 --> 00:02:49,100
caught<font color="#E5E5E5"> today like I really want</font>

79
00:02:47,420 --> 00:02:50,630
antivirus like gobble<font color="#E5E5E5"> up and like stop</font>

80
00:02:49,100 --> 00:02:52,780
out all my payloads everything I'm

81
00:02:50,630 --> 00:02:56,390
uploading nobody nobody wants that

82
00:02:52,780 --> 00:02:58,970
so what railgun does is railgun allows

83
00:02:56,390 --> 00:03:00,769
us to<font color="#E5E5E5"> interact with</font><font color="#CCCCCC"> foreign functions</font>

84
00:02:58,970 --> 00:03:02,900
similar to<font color="#CCCCCC"> c-type</font><font color="#E5E5E5"> so it allows us</font><font color="#CCCCCC"> to do</font>

85
00:03:00,770 --> 00:03:06,200
it remotely through<font color="#CCCCCC"> Metasploit so we can</font>

86
00:03:02,900 --> 00:03:08,360
call these<font color="#CCCCCC"> OS</font><font color="#E5E5E5"> API without writing</font>

87
00:03:06,200 --> 00:03:10,459
anything to disk<font color="#E5E5E5"> alternatively if you</font>

88
00:03:08,360 --> 00:03:14,270
<font color="#E5E5E5">were going</font><font color="#CCCCCC"> to do this without railgun</font>

89
00:03:10,460 --> 00:03:16,190
on<font color="#CCCCCC"> windows like OS X Linux</font><font color="#E5E5E5"> some of the</font>

90
00:03:14,270 --> 00:03:17,750
problems you'd run<font color="#CCCCCC"> into is basically</font><font color="#E5E5E5"> you</font>

91
00:03:16,190 --> 00:03:20,660
would end<font color="#E5E5E5"> up like writing out</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> C file</font>

92
00:03:17,750 --> 00:03:23,000
uploading<font color="#E5E5E5"> that C file compiling it and</font>

93
00:03:20,660 --> 00:03:24,140
then running it<font color="#E5E5E5"> from there</font><font color="#CCCCCC"> and that's</font>

94
00:03:23,000 --> 00:03:26,180
<font color="#E5E5E5">that's not really going to be any good</font>

95
00:03:24,140 --> 00:03:27,829
<font color="#CCCCCC">in addition to</font><font color="#E5E5E5"> having to like touch key</font>

96
00:03:26,180 --> 00:03:29,030
<font color="#E5E5E5">disk if that is the approach that you're</font>

97
00:03:27,830 --> 00:03:31,040
going<font color="#E5E5E5"> to take you're</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> starting a</font>

98
00:03:29,030 --> 00:03:32,750
brand new<font color="#CCCCCC"> process</font><font color="#E5E5E5"> so if any one</font><font color="#CCCCCC"> is like</font>

99
00:03:31,040 --> 00:03:33,769
listing out<font color="#CCCCCC"> the processes and it's</font>

100
00:03:32,750 --> 00:03:34,730
running<font color="#E5E5E5"> for any amount of time or</font>

101
00:03:33,770 --> 00:03:36,530
<font color="#E5E5E5">anything like that they're going to</font>

102
00:03:34,730 --> 00:03:37,670
<font color="#E5E5E5">notice that like hey this process</font>

103
00:03:36,530 --> 00:03:40,130
<font color="#E5E5E5">doesn't really belong it looks kind</font><font color="#CCCCCC"> of</font>

104
00:03:37,670 --> 00:03:42,230
fishy a fair warning though one of<font color="#E5E5E5"> the</font>

105
00:03:40,130 --> 00:03:44,510
drawbacks that railgun<font color="#E5E5E5"> does have is that</font>

106
00:03:42,230 --> 00:03:46,850
it's<font color="#E5E5E5"> it's a lot slower in order</font><font color="#CCCCCC"> to you</font>

107
00:03:44,510 --> 00:03:48,679
this<font color="#CCCCCC"> was a lot</font><font color="#E5E5E5"> of i/o back and forth</font>

108
00:03:46,850 --> 00:03:50,959
between<font color="#CCCCCC"> Metasploit</font><font color="#E5E5E5"> to controlling and</font>

109
00:03:48,680 --> 00:03:52,220
the<font color="#E5E5E5"> actual meterpreter</font><font color="#CCCCCC"> host it's a</font>

110
00:03:50,959 --> 00:03:53,330
little bit slower but<font color="#CCCCCC"> it can be a lot</font>

111
00:03:52,220 --> 00:03:54,800
<font color="#CCCCCC">more</font><font color="#E5E5E5"> stealthy and you're not gonna have</font>

112
00:03:53,330 --> 00:03:56,810
to write anything<font color="#E5E5E5"> else you did things</font>

113
00:03:54,800 --> 00:03:58,220
along those<font color="#CCCCCC"> lines so it's how railgun</font>

114
00:03:56,810 --> 00:04:01,070
<font color="#E5E5E5">actually works over on the far right</font>

115
00:03:58,220 --> 00:04:02,180
<font color="#CCCCCC">tell a actual real</font><font color="#E5E5E5"> railgun works but I</font>

116
00:04:01,070 --> 00:04:03,799
couldn't actually find anyone to<font color="#CCCCCC"> have</font>

117
00:04:02,180 --> 00:04:05,269
media image of how the<font color="#E5E5E5"> software version</font>

118
00:04:03,800 --> 00:04:07,130
<font color="#E5E5E5">works so let me go ahead and explain</font>

119
00:04:05,269 --> 00:04:09,080
<font color="#CCCCCC">that out</font><font color="#E5E5E5"> so like I'd mentioned it's a</font>

120
00:04:07,130 --> 00:04:10,280
foreign function interface<font color="#E5E5E5"> similar to C</font>

121
00:04:09,080 --> 00:04:12,140
types but<font color="#E5E5E5"> it allows it to be done</font>

122
00:04:10,280 --> 00:04:13,220
<font color="#E5E5E5">remotely through</font><font color="#CCCCCC"> Metasploit so</font>

123
00:04:12,140 --> 00:04:14,988
<font color="#CCCCCC">Metasploit has a whole</font><font color="#E5E5E5"> bunch of</font>

124
00:04:13,220 --> 00:04:16,399
definitions<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the various library</font>

125
00:04:14,989 --> 00:04:17,570
files you<font color="#E5E5E5"> might want to use and you're</font>

126
00:04:16,399 --> 00:04:19,130
<font color="#CCCCCC">probably</font><font color="#E5E5E5"> familiar reviews from like a</font>

127
00:04:17,570 --> 00:04:22,340
from like a Windows perspective if you

128
00:04:19,130 --> 00:04:24,560
have like<font color="#CCCCCC"> ones for user 32</font><font color="#E5E5E5"> kernel32</font><font color="#CCCCCC"> ADB</font>

129
00:04:22,340 --> 00:04:26,359
API all those ones there and<font color="#E5E5E5"> these</font>

130
00:04:24,560 --> 00:04:26,930
definition files have the list of<font color="#E5E5E5"> all</font>

131
00:04:26,360 --> 00:04:29,930
<font color="#CCCCCC">the function</font>

132
00:04:26,930 --> 00:04:32,570
that are exported<font color="#E5E5E5"> and the different</font>

133
00:04:29,930 --> 00:04:35,030
parameters that<font color="#E5E5E5"> they take and we use</font>

134
00:04:32,570 --> 00:04:37,039
this<font color="#E5E5E5"> information to construct</font><font color="#CCCCCC"> our</font>

135
00:04:35,030 --> 00:04:38,840
<font color="#E5E5E5">request to</font><font color="#CCCCCC"> railgun which</font><font color="#E5E5E5"> is then going</font>

136
00:04:37,039 --> 00:04:41,060
<font color="#E5E5E5">to execute those functions on our behalf</font>

137
00:04:38,840 --> 00:04:42,380
<font color="#CCCCCC">and it's going</font><font color="#E5E5E5"> to pass in the parameters</font>

138
00:04:41,060 --> 00:04:44,060
that<font color="#E5E5E5"> we specified you can return the</font>

139
00:04:42,380 --> 00:04:45,139
information<font color="#CCCCCC"> necessary for</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> you can</font>

140
00:04:44,060 --> 00:04:48,470
<font color="#E5E5E5">give us all</font><font color="#CCCCCC"> that it's going</font><font color="#E5E5E5"> to happen</font>

141
00:04:45,139 --> 00:04:50,150
all that<font color="#E5E5E5"> in memory</font><font color="#CCCCCC"> uh in the case</font><font color="#E5E5E5"> where</font>

142
00:04:48,470 --> 00:04:51,470
you're running library calls it's also

143
00:04:50,150 --> 00:04:53,870
going to it's<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> handle like the</font>

144
00:04:51,470 --> 00:04:55,580
<font color="#E5E5E5">loading of</font><font color="#CCCCCC"> the DLL</font><font color="#E5E5E5"> into memory all that</font>

145
00:04:53,870 --> 00:04:57,139
stuff gets handled for<font color="#E5E5E5"> you</font><font color="#CCCCCC"> so you don't</font>

146
00:04:55,580 --> 00:04:59,150
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to worry about doing that you</font><font color="#CCCCCC"> don't</font>

147
00:04:57,139 --> 00:05:01,099
have to write up<font color="#CCCCCC"> a C file dynamically</font>

148
00:04:59,150 --> 00:05:03,320
load something<font color="#E5E5E5"> in nothing like that</font>

149
00:05:01,099 --> 00:05:05,210
<font color="#E5E5E5">takes all that for you</font><font color="#CCCCCC"> so one of the big</font>

150
00:05:03,320 --> 00:05:07,490
<font color="#E5E5E5">things that comes out at this level</font>

151
00:05:05,210 --> 00:05:09,799
<font color="#CCCCCC">because we're interfacing with</font><font color="#E5E5E5"> the C API</font>

152
00:05:07,490 --> 00:05:12,110
is<font color="#E5E5E5"> that we need to know the</font><font color="#CCCCCC"> direction of</font>

153
00:05:09,800 --> 00:05:14,840
parameters<font color="#E5E5E5"> Microsoft does a really good</font>

154
00:05:12,110 --> 00:05:16,849
<font color="#E5E5E5">job</font><font color="#CCCCCC"> with documenting the direction of</font>

155
00:05:14,840 --> 00:05:19,280
parameters on some of the other

156
00:05:16,849 --> 00:05:22,460
libraries<font color="#E5E5E5"> since we I poured this over to</font>

157
00:05:19,280 --> 00:05:23,929
Linux and OS X not such a great not such

158
00:05:22,460 --> 00:05:26,000
a great<font color="#E5E5E5"> job as</font><font color="#CCCCCC"> far as documenting</font><font color="#E5E5E5"> the</font>

159
00:05:23,930 --> 00:05:27,410
direction the what the<font color="#E5E5E5"> direction means</font>

160
00:05:26,000 --> 00:05:30,770
is that<font color="#CCCCCC"> a lot of information is being</font>

161
00:05:27,410 --> 00:05:33,349
passed in as pointers<font color="#E5E5E5"> and so we need to</font>

162
00:05:30,770 --> 00:05:35,120
know is the function<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to read from</font>

163
00:05:33,349 --> 00:05:36,740
<font color="#E5E5E5">this pointer</font><font color="#CCCCCC"> is it both going to</font><font color="#E5E5E5"> read</font>

164
00:05:35,120 --> 00:05:38,750
and write to<font color="#E5E5E5"> this pointers are just</font>

165
00:05:36,740 --> 00:05:40,729
<font color="#E5E5E5">going to write information to this</font>

166
00:05:38,750 --> 00:05:42,590
pointer so if<font color="#E5E5E5"> we're calling a function a</font>

167
00:05:40,729 --> 00:05:45,320
good example<font color="#CCCCCC"> would be like DNS query</font>

168
00:05:42,590 --> 00:05:46,698
that takes a out<font color="#E5E5E5"> parameter where we give</font>

169
00:05:45,320 --> 00:05:48,020
it a pointer<font color="#E5E5E5"> and we say hey please put</font>

170
00:05:46,699 --> 00:05:49,789
<font color="#E5E5E5">your information here</font><font color="#CCCCCC"> and in this</font><font color="#E5E5E5"> case</font>

171
00:05:48,020 --> 00:05:51,198
<font color="#CCCCCC">that's out because it's going to write</font>

172
00:05:49,789 --> 00:05:53,030
that<font color="#E5E5E5"> data there</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> don't necessarily</font>

173
00:05:51,199 --> 00:05:55,280
<font color="#E5E5E5">have</font><font color="#CCCCCC"> to initialize anything and pass it</font>

174
00:05:53,030 --> 00:05:57,169
in but with railgun we can do we can<font color="#CCCCCC"> do</font>

175
00:05:55,280 --> 00:05:58,698
both<font color="#E5E5E5"> of those but</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> breaks out all the</font>

176
00:05:57,169 --> 00:06:01,008
<font color="#E5E5E5">parameters</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have into these</font>

177
00:05:58,699 --> 00:06:03,830
three types the in and out and out and

178
00:06:01,009 --> 00:06:05,090
then it<font color="#E5E5E5"> copies all of those</font><font color="#CCCCCC"> onto into</font>

179
00:06:03,830 --> 00:06:07,099
the memory<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> process that's</font><font color="#E5E5E5"> going</font>

180
00:06:05,090 --> 00:06:08,359
<font color="#CCCCCC">to</font><font color="#E5E5E5"> run the railgun call for us which is</font>

181
00:06:07,099 --> 00:06:11,300
<font color="#CCCCCC">that process that</font><font color="#E5E5E5"> meterpreter</font>

182
00:06:08,360 --> 00:06:12,949
is also<font color="#E5E5E5"> running in and then from there</font>

183
00:06:11,300 --> 00:06:14,539
<font color="#CCCCCC">passes in the references each one of</font>

184
00:06:12,949 --> 00:06:16,520
those each<font color="#CCCCCC"> one of those</font><font color="#E5E5E5"> blocks and then</font>

185
00:06:14,539 --> 00:06:18,740
for the out and<font color="#CCCCCC"> the in app it's going to</font>

186
00:06:16,520 --> 00:06:19,969
<font color="#E5E5E5">return</font><font color="#CCCCCC"> that data back</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> it so at a very</font>

187
00:06:18,740 --> 00:06:22,490
low level<font color="#E5E5E5"> that's what it's doing but</font>

188
00:06:19,970 --> 00:06:24,919
<font color="#CCCCCC">that's how it allows us to pass in like</font>

189
00:06:22,490 --> 00:06:26,389
opaque data structures<font color="#CCCCCC"> for some of these</font>

190
00:06:24,919 --> 00:06:29,210
larger functions DNS query<font color="#CCCCCC"> would be</font>

191
00:06:26,389 --> 00:06:30,800
would be<font color="#E5E5E5"> a good</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> so like I had</font>

192
00:06:29,210 --> 00:06:32,388
mentioned if you hadn't<font color="#E5E5E5"> heard of railgun</font>

193
00:06:30,800 --> 00:06:35,029
chances are really high<font color="#CCCCCC"> you've probably</font>

194
00:06:32,389 --> 00:06:37,700
<font color="#CCCCCC">used</font><font color="#E5E5E5"> it if you've used most of the post</font>

195
00:06:35,029 --> 00:06:40,219
<font color="#CCCCCC">windows modules and a few of</font><font color="#E5E5E5"> the local</font>

196
00:06:37,700 --> 00:06:41,719
exploit modules railgun leverage is

197
00:06:40,220 --> 00:06:43,790
how a lot of<font color="#E5E5E5"> those leverage the</font>

198
00:06:41,720 --> 00:06:45,980
functionality of<font color="#CCCCCC"> railgun to make the</font>

199
00:06:43,790 --> 00:06:48,320
calls that<font color="#E5E5E5"> they need</font><font color="#CCCCCC"> to make in order</font><font color="#E5E5E5"> to</font>

200
00:06:45,980 --> 00:06:50,840
get that information<font color="#CCCCCC"> some of the windows</font>

201
00:06:48,320 --> 00:06:52,880
local exploits<font color="#E5E5E5"> use railgun to call</font><font color="#CCCCCC"> n key</font>

202
00:06:50,840 --> 00:06:55,729
device IO<font color="#CCCCCC"> control file so at</font><font color="#E5E5E5"> that point</font>

203
00:06:52,880 --> 00:06:56,960
<font color="#CCCCCC">taken a path in the IO CTLs</font><font color="#E5E5E5"> and it was a</font>

204
00:06:55,730 --> 00:06:58,610
routine to trigger some<font color="#E5E5E5"> of those</font>

205
00:06:56,960 --> 00:07:02,330
<font color="#E5E5E5">exploits a good example of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> would be</font>

206
00:06:58,610 --> 00:07:03,710
<font color="#CCCCCC">a MS 1180 uses this technique some of</font>

207
00:07:02,330 --> 00:07:06,169
the newer ones<font color="#CCCCCC"> have</font><font color="#E5E5E5"> switched over to</font>

208
00:07:03,710 --> 00:07:07,609
using<font color="#E5E5E5"> reflectively loadable</font><font color="#CCCCCC"> DLL</font>

209
00:07:06,170 --> 00:07:09,170
so that would be<font color="#E5E5E5"> another way</font><font color="#CCCCCC"> you could</font>

210
00:07:07,610 --> 00:07:11,650
call your<font color="#E5E5E5"> foreign functions but once</font>

211
00:07:09,170 --> 00:07:14,030
again<font color="#E5E5E5"> you're back to</font><font color="#CCCCCC"> a compiling C code</font>

212
00:07:11,650 --> 00:07:16,370
<font color="#E5E5E5">everybody want to write and compile C</font>

213
00:07:14,030 --> 00:07:19,250
code<font color="#CCCCCC"> no nobody really wants to do that</font>

214
00:07:16,370 --> 00:07:21,380
one<font color="#CCCCCC"> guys</font><font color="#E5E5E5"> always that one guys like yes</font><font color="#CCCCCC"> I</font>

215
00:07:19,250 --> 00:07:24,020
will write and<font color="#CCCCCC"> C you can still do that</font>

216
00:07:21,380 --> 00:07:27,110
<font color="#CCCCCC">it's all</font><font color="#E5E5E5"> about the options right more</font>

217
00:07:24,020 --> 00:07:28,609
<font color="#CCCCCC">options</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> better so at the at the</font>

218
00:07:27,110 --> 00:07:31,310
core<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> these are</font><font color="#CCCCCC"> the four functions</font>

219
00:07:28,610 --> 00:07:33,770
<font color="#CCCCCC">that actually provide so that</font><font color="#E5E5E5"> API is the</font>

220
00:07:31,310 --> 00:07:35,270
number one that<font color="#E5E5E5"> were most</font><font color="#CCCCCC"> interested in</font>

221
00:07:33,770 --> 00:07:38,870
leveraging<font color="#E5E5E5"> so this is how we're actually</font>

222
00:07:35,270 --> 00:07:42,560
<font color="#E5E5E5">able to tell it please take this</font><font color="#CCCCCC"> DLL or</font>

223
00:07:38,870 --> 00:07:44,480
in OS<font color="#CCCCCC"> X this case this die</font><font color="#E5E5E5"> Lib this by</font>

224
00:07:42,560 --> 00:07:47,300
this name called this function<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we</font>

225
00:07:44,480 --> 00:07:49,220
<font color="#CCCCCC">have</font><font color="#E5E5E5"> all these parameter types so we</font>

226
00:07:47,300 --> 00:07:50,540
have our in or in out we have the values

227
00:07:49,220 --> 00:07:51,919
or in the case<font color="#E5E5E5"> of like the out</font>

228
00:07:50,540 --> 00:07:53,510
parameters we tell it the<font color="#E5E5E5"> size that</font>

229
00:07:51,919 --> 00:07:55,400
we're expecting<font color="#E5E5E5"> we pass all that</font>

230
00:07:53,510 --> 00:07:57,830
information to that<font color="#CCCCCC"> railgun</font><font color="#E5E5E5"> API call and</font>

231
00:07:55,400 --> 00:07:59,270
on the remote side it's<font color="#E5E5E5"> going to handle</font>

232
00:07:57,830 --> 00:08:01,310
<font color="#E5E5E5">all</font><font color="#CCCCCC"> of that force is going to</font><font color="#E5E5E5"> make that</font>

233
00:07:59,270 --> 00:08:02,990
<font color="#E5E5E5">call</font><font color="#CCCCCC"> and it's going to</font><font color="#E5E5E5"> give us the</font>

234
00:08:01,310 --> 00:08:06,260
<font color="#CCCCCC">return value as well</font><font color="#E5E5E5"> as it's going to</font>

235
00:08:02,990 --> 00:08:07,940
<font color="#E5E5E5">give us</font><font color="#CCCCCC"> a platform specific error code</font>

236
00:08:06,260 --> 00:08:10,010
so in Windows you're going to be<font color="#CCCCCC"> having</font>

237
00:08:07,940 --> 00:08:11,719
the result of that get last error on

238
00:08:10,010 --> 00:08:13,940
Linux<font color="#E5E5E5"> and OS X you're</font><font color="#CCCCCC"> going to use a</font>

239
00:08:11,720 --> 00:08:16,160
<font color="#E5E5E5">Lipsey's error number so you get that</font>

240
00:08:13,940 --> 00:08:18,140
<font color="#E5E5E5">information back out the last thing it</font>

241
00:08:16,160 --> 00:08:21,050
does is<font color="#E5E5E5"> it takes that error number and</font>

242
00:08:18,140 --> 00:08:22,810
it uses<font color="#E5E5E5"> the OS library to convert that</font>

243
00:08:21,050 --> 00:08:24,890
<font color="#CCCCCC">into a</font><font color="#E5E5E5"> string so you</font><font color="#CCCCCC"> actually have some</font>

244
00:08:22,810 --> 00:08:26,240
<font color="#E5E5E5">useful information as you humans</font><font color="#CCCCCC"> you're</font>

245
00:08:24,890 --> 00:08:28,099
<font color="#E5E5E5">not just like I</font><font color="#CCCCCC"> don't know what error 13</font>

246
00:08:26,240 --> 00:08:30,350
is but it'll tell you like<font color="#CCCCCC"> bad parameter</font>

247
00:08:28,100 --> 00:08:32,630
or buffer<font color="#CCCCCC"> sized insufficient not</font><font color="#E5E5E5"> enough</font>

248
00:08:30,350 --> 00:08:36,020
parameter<font color="#E5E5E5"> or not enough permission what</font>

249
00:08:32,630 --> 00:08:38,750
have you things<font color="#CCCCCC"> like</font><font color="#E5E5E5"> that so API multi</font><font color="#CCCCCC"> a</font>

250
00:08:36,020 --> 00:08:41,390
just like API like I mentioned this<font color="#E5E5E5"> is</font>

251
00:08:38,750 --> 00:08:42,620
really slow interface especially<font color="#CCCCCC"> over if</font>

252
00:08:41,390 --> 00:08:44,000
you're over like a slower now we're

253
00:08:42,620 --> 00:08:45,890
<font color="#CCCCCC">connection</font><font color="#E5E5E5"> because for every single API</font>

254
00:08:44,000 --> 00:08:47,480
<font color="#E5E5E5">call you're making there's a transaction</font>

255
00:08:45,890 --> 00:08:49,699
that<font color="#CCCCCC"> goes</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> Metasploit to</font><font color="#E5E5E5"> meterpreter</font>

256
00:08:47,480 --> 00:08:51,110
to make that API call<font color="#E5E5E5"> now you can make</font>

257
00:08:49,700 --> 00:08:53,270
this a little bit faster<font color="#CCCCCC"> if you</font>

258
00:08:51,110 --> 00:08:53,990
<font color="#CCCCCC">necessarily</font><font color="#E5E5E5"> don't need to act on the</font>

259
00:08:53,270 --> 00:08:55,640
result of

260
00:08:53,990 --> 00:08:57,890
<font color="#E5E5E5">of the functions you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> queue up like</font>

261
00:08:55,640 --> 00:08:59,649
<font color="#E5E5E5">three or four or five API calls you can</font>

262
00:08:57,890 --> 00:09:02,770
pass them all at once<font color="#E5E5E5"> in</font><font color="#CCCCCC"> one transaction</font>

263
00:08:59,649 --> 00:09:04,640
<font color="#E5E5E5">using a multi API so it's just a</font>

264
00:09:02,770 --> 00:09:07,010
convenience functions make it a little

265
00:09:04,640 --> 00:09:08,899
<font color="#E5E5E5">bit more quick after</font><font color="#CCCCCC"> that you have</font>

266
00:09:07,010 --> 00:09:10,819
<font color="#E5E5E5">memory read and memory</font>

267
00:09:08,899 --> 00:09:12,860
these ones are kind<font color="#E5E5E5"> of like the</font><font color="#CCCCCC"> the</font>

268
00:09:10,820 --> 00:09:15,410
process<font color="#E5E5E5"> API the meterpreter also has but</font>

269
00:09:12,860 --> 00:09:17,420
these are specific<font color="#CCCCCC"> to the local the</font>

270
00:09:15,410 --> 00:09:19,160
<font color="#CCCCCC">local</font><font color="#E5E5E5"> process that can be</font><font color="#CCCCCC"> the one</font><font color="#E5E5E5"> that</font>

271
00:09:17,420 --> 00:09:21,529
<font color="#E5E5E5">interpreter is running in you should</font><font color="#CCCCCC"> be</font>

272
00:09:19,160 --> 00:09:23,779
<font color="#CCCCCC">primarily</font><font color="#E5E5E5"> useful if</font><font color="#CCCCCC"> you're passed if</font>

273
00:09:21,529 --> 00:09:25,100
you're getting<font color="#E5E5E5"> a structure of data back</font>

274
00:09:23,779 --> 00:09:27,320
<font color="#E5E5E5">from once again from</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> example like</font>

275
00:09:25,100 --> 00:09:28,910
DNS query X<font color="#E5E5E5"> if there are like pointers</font>

276
00:09:27,320 --> 00:09:30,380
in there<font color="#E5E5E5"> to like this is where the</font>

277
00:09:28,910 --> 00:09:32,209
string is or like<font color="#E5E5E5"> this where the IP is</font>

278
00:09:30,380 --> 00:09:34,399
or anything like<font color="#E5E5E5"> that you can use memory</font>

279
00:09:32,209 --> 00:09:36,079
<font color="#E5E5E5">to easily read the information</font><font color="#CCCCCC"> at that</font>

280
00:09:34,399 --> 00:09:37,459
<font color="#E5E5E5">point or so you just get that data right</font>

281
00:09:36,080 --> 00:09:38,660
back out so once again<font color="#E5E5E5"> like a</font>

282
00:09:37,459 --> 00:09:40,250
<font color="#E5E5E5">convenience function as opposed to</font>

283
00:09:38,660 --> 00:09:45,500
having to<font color="#CCCCCC"> use like the full-blown have</font>

284
00:09:40,250 --> 00:09:47,390
Europe process<font color="#E5E5E5"> aid yet</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so the</font>

285
00:09:45,500 --> 00:09:49,490
<font color="#E5E5E5">non</font><font color="#CCCCCC"> windows implementations of</font>

286
00:09:47,390 --> 00:09:51,740
interpreter<font color="#E5E5E5"> up until March of this year</font>

287
00:09:49,490 --> 00:09:53,660
<font color="#E5E5E5">windows was the only meterpreter that</font>

288
00:09:51,740 --> 00:09:55,520
had access<font color="#CCCCCC"> to this</font><font color="#E5E5E5"> rail gun</font>

289
00:09:53,660 --> 00:09:57,949
functionality on since then it's been

290
00:09:55,520 --> 00:09:59,480
<font color="#CCCCCC">added</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> and what I'm going</font><font color="#CCCCCC"> to</font>

291
00:09:57,950 --> 00:10:02,149
<font color="#E5E5E5">demonstrate for you today is the first</font>

292
00:09:59,480 --> 00:10:04,730
demo of the OS X implementation of

293
00:10:02,149 --> 00:10:06,890
<font color="#CCCCCC">railgun</font><font color="#E5E5E5"> and how we can use that so</font>

294
00:10:04,730 --> 00:10:09,170
pretty<font color="#E5E5E5"> pretty excited about that</font>

295
00:10:06,890 --> 00:10:10,790
so memory the memory calls are actually

296
00:10:09,170 --> 00:10:15,319
deceptively difficult<font color="#CCCCCC"> we reporting this</font>

297
00:10:10,790 --> 00:10:18,469
<font color="#E5E5E5">to different</font><font color="#CCCCCC"> platforms at the</font><font color="#E5E5E5"> core of</font><font color="#CCCCCC"> it</font>

298
00:10:15,320 --> 00:10:19,760
<font color="#CCCCCC">Multi</font><font color="#E5E5E5"> API the concepts can be applied</font><font color="#CCCCCC"> to</font>

299
00:10:18,470 --> 00:10:21,200
<font color="#E5E5E5">different platforms assuming that you</font>

300
00:10:19,760 --> 00:10:24,140
<font color="#E5E5E5">can specify the different calling</font>

301
00:10:21,200 --> 00:10:26,029
convention<font color="#E5E5E5"> windows almost</font><font color="#CCCCCC"> always</font><font color="#E5E5E5"> uses a</font>

302
00:10:24,140 --> 00:10:28,370
standard calling convention but<font color="#E5E5E5"> Linux</font><font color="#CCCCCC"> no</font>

303
00:10:26,029 --> 00:10:30,770
<font color="#CCCCCC">sxe decals so it's</font><font color="#E5E5E5"> not actually that bad</font>

304
00:10:28,370 --> 00:10:32,570
but<font color="#E5E5E5"> the memory and the memory is very</font>

305
00:10:30,770 --> 00:10:34,399
very important and was deceptively

306
00:10:32,570 --> 00:10:36,740
difficult to<font color="#CCCCCC"> implement</font><font color="#E5E5E5"> the reason why is</font>

307
00:10:34,399 --> 00:10:38,240
because each Windows<font color="#E5E5E5"> Linux no</font><font color="#CCCCCC"> effects</font>

308
00:10:36,740 --> 00:10:39,829
they all have different api's that have

309
00:10:38,240 --> 00:10:41,600
different intrinsic swith in that and

310
00:10:39,829 --> 00:10:43,189
the number one<font color="#E5E5E5"> thing that's important</font>

311
00:10:41,600 --> 00:10:45,440
<font color="#E5E5E5">about this is that</font><font color="#CCCCCC"> we do not</font><font color="#E5E5E5"> want our</font>

312
00:10:43,190 --> 00:10:47,480
session to die if<font color="#E5E5E5"> you try to read from</font>

313
00:10:45,440 --> 00:10:48,920
an invalid address<font color="#E5E5E5"> like we've all made</font>

314
00:10:47,480 --> 00:10:51,079
the mistakes sometimes<font color="#E5E5E5"> like a pointer</font>

315
00:10:48,920 --> 00:10:52,790
just<font color="#CCCCCC"> get</font><font color="#E5E5E5"> maybe it gets truncated or you</font>

316
00:10:51,079 --> 00:10:54,349
have<font color="#E5E5E5"> like the wrong value something</font>

317
00:10:52,790 --> 00:10:55,910
along those lines<font color="#E5E5E5"> but if you pass in a</font>

318
00:10:54,350 --> 00:10:57,800
bad pointer to memory<font color="#E5E5E5"> to</font><font color="#CCCCCC"> write you want</font>

319
00:10:55,910 --> 00:10:59,180
it to fail gracefully and like returning

320
00:10:57,800 --> 00:11:01,010
<font color="#E5E5E5">error number</font><font color="#CCCCCC"> to you</font><font color="#E5E5E5"> and basically be</font>

321
00:10:59,180 --> 00:11:02,180
<font color="#CCCCCC">like try again because at this level</font>

322
00:11:01,010 --> 00:11:05,540
<font color="#CCCCCC">because we're working</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> C API</font>

323
00:11:02,180 --> 00:11:07,010
<font color="#E5E5E5">Python can't handle those exceptions so</font>

324
00:11:05,540 --> 00:11:08,319
your session will die<font color="#CCCCCC"> though it would</font>

325
00:11:07,010 --> 00:11:12,430
<font color="#CCCCCC">straight-up</font><font color="#E5E5E5"> die</font>

326
00:11:08,320 --> 00:11:14,230
and that<font color="#E5E5E5"> that's no good</font><font color="#CCCCCC"> so on OSX what</font>

327
00:11:12,430 --> 00:11:16,839
we do is we actually<font color="#E5E5E5"> use the</font><font color="#CCCCCC"> mach api</font>

328
00:11:14,230 --> 00:11:18,520
and<font color="#E5E5E5"> that will return a nice error number</font>

329
00:11:16,840 --> 00:11:20,530
<font color="#E5E5E5">to you saying that hey you know there's</font>

330
00:11:18,520 --> 00:11:22,180
an invalid<font color="#CCCCCC"> address there or there's</font>

331
00:11:20,530 --> 00:11:23,800
invalid permission so we get a<font color="#E5E5E5"> little</font>

332
00:11:22,180 --> 00:11:25,719
<font color="#E5E5E5">bit better information</font><font color="#CCCCCC"> as to</font><font color="#E5E5E5"> why our</font>

333
00:11:23,800 --> 00:11:26,680
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> to write call failed</font><font color="#E5E5E5"> but the most</font>

334
00:11:25,720 --> 00:11:28,750
important thing is it doesn't just

335
00:11:26,680 --> 00:11:31,120
segmentation fault<font color="#E5E5E5"> and die which is why</font>

336
00:11:28,750 --> 00:11:33,520
we<font color="#CCCCCC"> don't just directly use like</font><font color="#E5E5E5"> memories</font>

337
00:11:31,120 --> 00:11:35,290
are<font color="#E5E5E5"> like mem copy from PI factors that</font>

338
00:11:33,520 --> 00:11:37,090
would definitely end<font color="#CCCCCC"> up resulting</font><font color="#E5E5E5"> in a</font>

339
00:11:35,290 --> 00:11:39,550
segmentation<font color="#E5E5E5"> fault ultimately</font>

340
00:11:37,090 --> 00:11:41,620
<font color="#E5E5E5">instability so no good</font>

341
00:11:39,550 --> 00:11:42,339
the error code as well is a little bit

342
00:11:41,620 --> 00:11:44,770
different from each<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of the</font>

343
00:11:42,340 --> 00:11:46,270
<font color="#CCCCCC">platform's</font><font color="#E5E5E5"> like I mentioned</font><font color="#CCCCCC"> windows most</font>

344
00:11:44,770 --> 00:11:49,660
the entire like railgun core

345
00:11:46,270 --> 00:11:50,890
functionality is over<font color="#E5E5E5"> five years old now</font>

346
00:11:49,660 --> 00:11:52,990
<font color="#E5E5E5">I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> I'm like I mentioned it was</font>

347
00:11:50,890 --> 00:11:56,949
specific to Windows up until March<font color="#E5E5E5"> of</font>

348
00:11:52,990 --> 00:11:58,900
<font color="#E5E5E5">this year and so the a ton of it was</font>

349
00:11:56,950 --> 00:12:00,940
very very much specific to<font color="#CCCCCC"> windows so</font>

350
00:11:58,900 --> 00:12:03,939
the references are all I get last error

351
00:12:00,940 --> 00:12:05,350
and things like<font color="#CCCCCC"> that but Lib C on Linux</font>

352
00:12:03,940 --> 00:12:08,440
no<font color="#E5E5E5"> effect can kind of be used to like</font>

353
00:12:05,350 --> 00:12:09,700
the same effect<font color="#E5E5E5"> if a library has a has</font>

354
00:12:08,440 --> 00:12:10,900
an error and<font color="#CCCCCC"> it</font><font color="#E5E5E5"> reports it through</font>

355
00:12:09,700 --> 00:12:12,460
<font color="#CCCCCC">Lipski we can still get</font><font color="#E5E5E5"> the error</font>

356
00:12:10,900 --> 00:12:14,410
information<font color="#E5E5E5"> out that way so we just kind</font>

357
00:12:12,460 --> 00:12:15,940
of treat it as like get last error<font color="#E5E5E5"> and</font>

358
00:12:14,410 --> 00:12:18,040
we can also retrieve the message that

359
00:12:15,940 --> 00:12:19,390
way so<font color="#E5E5E5"> that was also</font><font color="#CCCCCC"> a bit</font><font color="#E5E5E5"> of a</font>

360
00:12:18,040 --> 00:12:21,550
different<font color="#E5E5E5"> thing between like Linux and</font>

361
00:12:19,390 --> 00:12:23,290
OS X but<font color="#E5E5E5"> the most part the memory the</font>

362
00:12:21,550 --> 00:12:27,510
memory<font color="#CCCCCC"> I work on via more complicated</font>

363
00:12:23,290 --> 00:12:29,949
<font color="#E5E5E5">ones to implement most important thing</font>

364
00:12:27,510 --> 00:12:32,140
can't stress it enough<font color="#E5E5E5"> if you read or</font>

365
00:12:29,950 --> 00:12:33,520
write from<font color="#E5E5E5"> a bad pointer it's going to</font>

366
00:12:32,140 --> 00:12:35,530
segmentation fall and you're ultimately

367
00:12:33,520 --> 00:12:39,040
<font color="#E5E5E5">going to have your session closed out on</font>

368
00:12:35,530 --> 00:12:41,709
you so the mach vm<font color="#CCCCCC"> read and</font><font color="#E5E5E5"> write are</font>

369
00:12:39,040 --> 00:12:43,839
specific to the<font color="#E5E5E5"> Lib C version on OS X so</font>

370
00:12:41,710 --> 00:12:46,630
we can use C types<font color="#E5E5E5"> because we're</font><font color="#CCCCCC"> already</font>

371
00:12:43,840 --> 00:12:48,490
leveraging<font color="#E5E5E5"> that quite quite a bit on but</font>

372
00:12:46,630 --> 00:12:50,530
we have a little<font color="#E5E5E5"> wrapper that dispatches</font>

373
00:12:48,490 --> 00:12:53,260
the memory and the memory based on<font color="#E5E5E5"> what</font>

374
00:12:50,530 --> 00:12:54,520
<font color="#E5E5E5">a platform of Python interpreter is</font>

375
00:12:53,260 --> 00:12:56,560
running on so it's running<font color="#E5E5E5"> on Linux</font>

376
00:12:54,520 --> 00:12:59,110
we're going to use a process<font color="#E5E5E5"> VM reading</font>

377
00:12:56,560 --> 00:13:00,880
process<font color="#CCCCCC"> VM right or on OS X reviews that</font>

378
00:12:59,110 --> 00:13:02,380
mach vm<font color="#E5E5E5"> read that</font><font color="#CCCCCC"> mach down right and</font>

379
00:13:00,880 --> 00:13:04,210
the ultimate goal<font color="#CCCCCC"> is that we're not</font>

380
00:13:02,380 --> 00:13:06,160
<font color="#E5E5E5">going to have like a segmentation fault</font>

381
00:13:04,210 --> 00:13:07,900
<font color="#CCCCCC">we can't read or write from that and of</font>

382
00:13:06,160 --> 00:13:08,770
<font color="#CCCCCC">course on Windows I fail</font><font color="#E5E5E5"> to mention that</font>

383
00:13:07,900 --> 00:13:14,199
<font color="#E5E5E5">but that's</font><font color="#CCCCCC"> just going to</font><font color="#E5E5E5"> use the</font>

384
00:13:08,770 --> 00:13:16,140
<font color="#E5E5E5">debugging API of a can't remember it</font>

385
00:13:14,200 --> 00:13:19,590
<font color="#E5E5E5">like process open and then you have a</font>

386
00:13:16,140 --> 00:13:22,180
via<font color="#E5E5E5"> write write proc memory and recovery</font>

387
00:13:19,590 --> 00:13:25,720
<font color="#E5E5E5">that's it</font><font color="#CCCCCC"> but those</font><font color="#E5E5E5"> ones are</font>

388
00:13:22,180 --> 00:13:27,459
fail gracefully<font color="#CCCCCC"> alright so now we're</font>

389
00:13:25,720 --> 00:13:30,880
<font color="#CCCCCC">going talk about like the actual</font><font color="#E5E5E5"> details</font>

390
00:13:27,460 --> 00:13:31,899
of doing it on<font color="#E5E5E5"> OS</font><font color="#CCCCCC"> X so fewer</font><font color="#E5E5E5"> qqq's here</font>

391
00:13:30,880 --> 00:13:33,670
<font color="#E5E5E5">I'm going to start to get into those</font>

392
00:13:31,899 --> 00:13:36,520
segmentation faults and I tried<font color="#E5E5E5"> so hard</font>

393
00:13:33,670 --> 00:13:39,520
to<font color="#CCCCCC"> avoid</font><font color="#E5E5E5"> but sometimes</font><font color="#CCCCCC"> it's inevitable</font>

394
00:13:36,520 --> 00:13:42,939
<font color="#E5E5E5">alright so how the OS</font><font color="#CCCCCC"> X AP is are all</font>

395
00:13:39,520 --> 00:13:44,770
<font color="#E5E5E5">broken out so the turns out that I got</font>

396
00:13:42,940 --> 00:13:46,360
all like the C type stuff working<font color="#CCCCCC"> and</font>

397
00:13:44,770 --> 00:13:48,760
like you know you could load up like the

398
00:13:46,360 --> 00:13:52,510
<font color="#CCCCCC">ISO files call into the function things</font>

399
00:13:48,760 --> 00:13:55,480
like that on OS X not actually that

400
00:13:52,510 --> 00:13:57,370
useful<font color="#E5E5E5"> unfortunately most of the core</font>

401
00:13:55,480 --> 00:14:00,220
API functionality that<font color="#E5E5E5"> apple provides</font>

402
00:13:57,370 --> 00:14:02,410
<font color="#E5E5E5">for OS X is all in the die lives in the</font>

403
00:14:00,220 --> 00:14:03,640
framework<font color="#E5E5E5"> under that framework directory</font>

404
00:14:02,410 --> 00:14:06,240
so everything that<font color="#E5E5E5"> you're used to</font>

405
00:14:03,640 --> 00:14:09,430
dealing<font color="#CCCCCC"> with like like social accounts</font>

406
00:14:06,240 --> 00:14:11,170
security interactions with with the

407
00:14:09,430 --> 00:14:12,630
system are all using<font color="#E5E5E5"> these libraries</font>

408
00:14:11,170 --> 00:14:16,180
<font color="#CCCCCC">here</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> unfortunately these are not</font>

409
00:14:12,630 --> 00:14:17,890
<font color="#E5E5E5">straight</font><font color="#CCCCCC"> C so while we have the ability</font>

410
00:14:16,180 --> 00:14:19,750
to call<font color="#CCCCCC"> into</font><font color="#E5E5E5"> like C functions because</font>

411
00:14:17,890 --> 00:14:22,209
<font color="#E5E5E5">these are not see it's not safe to</font>

412
00:14:19,750 --> 00:14:23,380
directly<font color="#E5E5E5"> call into these but we're going</font>

413
00:14:22,209 --> 00:14:27,069
<font color="#E5E5E5">to get we're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> get around that so</font>

414
00:14:23,380 --> 00:14:28,870
never fear<font color="#CCCCCC"> yep so</font><font color="#E5E5E5"> the foundation one</font>

415
00:14:27,070 --> 00:14:29,740
right here is<font color="#E5E5E5"> that top one that's me</font>

416
00:14:28,870 --> 00:14:31,540
<font color="#CCCCCC">with the</font><font color="#E5E5E5"> one they're actually</font><font color="#CCCCCC"> going to</font>

417
00:14:29,740 --> 00:14:33,940
<font color="#E5E5E5">use today that's where the</font><font color="#CCCCCC"> Apple script</font>

418
00:14:31,540 --> 00:14:37,599
engine<font color="#E5E5E5"> lives and so these are</font><font color="#CCCCCC"> all like e</font>

419
00:14:33,940 --> 00:14:40,209
<font color="#CCCCCC">objective-c libraries</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> there loadable</font>

420
00:14:37,600 --> 00:14:41,920
<font color="#E5E5E5">via Python C types there are some</font>

421
00:14:40,209 --> 00:14:43,619
third-party libraries out there<font color="#E5E5E5"> that</font>

422
00:14:41,920 --> 00:14:46,959
allow wrapping<font color="#E5E5E5"> these a little bit</font><font color="#CCCCCC"> more</font>

423
00:14:43,620 --> 00:14:48,070
more easily more cohesively<font color="#CCCCCC"> but in the</font>

424
00:14:46,959 --> 00:14:50,979
context of like the<font color="#CCCCCC"> Python interpreter</font>

425
00:14:48,070 --> 00:14:53,230
that is not an<font color="#E5E5E5"> option because</font><font color="#CCCCCC"> we can't</font>

426
00:14:50,980 --> 00:14:55,330
be adding in a<font color="#CCCCCC"> third-party</font><font color="#E5E5E5"> code we can't</font>

427
00:14:53,230 --> 00:14:56,980
rely on it<font color="#E5E5E5"> being there we can't package</font>

428
00:14:55,330 --> 00:14:58,720
it<font color="#E5E5E5"> up it's just</font><font color="#CCCCCC"> not feasible</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you have</font>

429
00:14:56,980 --> 00:15:03,760
to do all of this natively by ourselves

430
00:14:58,720 --> 00:15:06,130
<font color="#CCCCCC">okay so live objective-c</font><font color="#E5E5E5"> so this is the</font>

431
00:15:03,760 --> 00:15:09,520
glue<font color="#CCCCCC"> that allows</font><font color="#E5E5E5"> like a native C</font>

432
00:15:06,130 --> 00:15:10,900
application<font color="#CCCCCC"> to load objective-c runtimes</font>

433
00:15:09,520 --> 00:15:13,720
<font color="#E5E5E5">and so this is what we're actually going</font>

434
00:15:10,900 --> 00:15:15,880
to<font color="#E5E5E5"> use so because we can call C native</font>

435
00:15:13,720 --> 00:15:17,620
functions we<font color="#E5E5E5"> can load this library and</font>

436
00:15:15,880 --> 00:15:19,959
say for us<font color="#E5E5E5"> to load this and then</font>

437
00:15:17,620 --> 00:15:21,130
leverage it<font color="#E5E5E5"> to</font><font color="#CCCCCC"> access those those</font>

438
00:15:19,959 --> 00:15:22,510
frameworks<font color="#E5E5E5"> that we talked</font><font color="#CCCCCC"> about like</font>

439
00:15:21,130 --> 00:15:26,800
core foundation the social framework

440
00:15:22,510 --> 00:15:28,060
security framework<font color="#CCCCCC"> uh very uh not very</font>

441
00:15:26,800 --> 00:15:31,029
not very<font color="#CCCCCC"> straightforward there's also a</font>

442
00:15:28,060 --> 00:15:32,930
ton of documentation on like why this is

443
00:15:31,029 --> 00:15:35,870
a bad idea

444
00:15:32,930 --> 00:15:38,239
<font color="#E5E5E5">Apple does not really want</font><font color="#CCCCCC"> you coding</font>

445
00:15:35,870 --> 00:15:42,010
and see if you try to do<font color="#E5E5E5"> anyone has done</font>

446
00:15:38,240 --> 00:15:44,480
<font color="#E5E5E5">like</font><font color="#CCCCCC"> Apple or OS X systems programming</font>

447
00:15:42,010 --> 00:15:45,620
<font color="#E5E5E5">yeah they don't they</font><font color="#CCCCCC"> don't advertise</font><font color="#E5E5E5"> it</font>

448
00:15:44,480 --> 00:15:47,029
they<font color="#E5E5E5"> don't they</font><font color="#CCCCCC"> don't want to do that</font>

449
00:15:45,620 --> 00:15:49,370
they<font color="#CCCCCC"> wants you're using</font><font color="#E5E5E5"> Objective C</font>

450
00:15:47,029 --> 00:15:53,149
Swift<font color="#E5E5E5"> things like that so this</font><font color="#CCCCCC"> isn't</font>

451
00:15:49,370 --> 00:15:55,610
very well documented at all and but you

452
00:15:53,149 --> 00:15:57,230
can do it<font color="#CCCCCC"> one important thing to</font><font color="#E5E5E5"> note</font>

453
00:15:55,610 --> 00:15:58,610
though is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> because Apple doesn't</font>

454
00:15:57,230 --> 00:15:59,990
<font color="#CCCCCC">really provide</font><font color="#E5E5E5"> a whole lot documentation</font>

455
00:15:58,610 --> 00:16:02,510
around<font color="#E5E5E5"> like Lib C and how could be</font>

456
00:15:59,990 --> 00:16:04,790
applied<font color="#CCCCCC"> to their library's</font><font color="#E5E5E5"> Lib C is</font>

457
00:16:02,510 --> 00:16:06,170
actually<font color="#CCCCCC"> a janu project so it is free</font>

458
00:16:04,790 --> 00:16:08,240
<font color="#CCCCCC">and open source</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we can actually find</font>

459
00:16:06,170 --> 00:16:12,050
much more documentation<font color="#CCCCCC"> on this for</font><font color="#E5E5E5"> like</font>

460
00:16:08,240 --> 00:16:15,620
the<font color="#E5E5E5"> Linux version</font><font color="#CCCCCC"> of live live</font><font color="#E5E5E5"> Objective</font>

461
00:16:12,050 --> 00:16:16,880
<font color="#E5E5E5">C um from my experience with just like</font>

462
00:16:15,620 --> 00:16:18,860
<font color="#E5E5E5">the three functions</font><font color="#CCCCCC"> they ended up having</font>

463
00:16:16,880 --> 00:16:20,390
<font color="#CCCCCC">to use</font><font color="#E5E5E5"> it was all it</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> all very very</font>

464
00:16:18,860 --> 00:16:22,940
accurate the information<font color="#CCCCCC"> was able to</font><font color="#E5E5E5"> be</font>

465
00:16:20,390 --> 00:16:25,850
carried<font color="#E5E5E5"> straight over so very good</font>

466
00:16:22,940 --> 00:16:27,560
resource in<font color="#CCCCCC"> that case now the libbed</font>

467
00:16:25,850 --> 00:16:29,779
<font color="#CCCCCC">objective-c provides a whole bunch of</font>

468
00:16:27,560 --> 00:16:32,660
<font color="#E5E5E5">functions but actually came down to</font>

469
00:16:29,779 --> 00:16:35,870
these<font color="#CCCCCC"> three key functions that provided</font>

470
00:16:32,660 --> 00:16:37,150
me with basically<font color="#CCCCCC"> all of the interfaces</font>

471
00:16:35,870 --> 00:16:39,800
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I need and now it's the ability to</font>

472
00:16:37,150 --> 00:16:41,420
<font color="#E5E5E5">instantiate a class so we can</font><font color="#CCCCCC"> allocate</font>

473
00:16:39,800 --> 00:16:43,069
and initialize<font color="#CCCCCC"> a class and then we're</font>

474
00:16:41,420 --> 00:16:45,110
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to call</font><font color="#CCCCCC"> methods on that</font>

475
00:16:43,070 --> 00:16:46,970
class to<font color="#CCCCCC"> actually do useful</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> for</font>

476
00:16:45,110 --> 00:16:48,770
us and<font color="#E5E5E5"> so just those three</font><font color="#CCCCCC"> functions</font>

477
00:16:46,970 --> 00:16:50,450
over<font color="#E5E5E5"> and over and over</font><font color="#CCCCCC"> again very very</font>

478
00:16:48,770 --> 00:16:53,060
<font color="#CCCCCC">repetitive but we're just those three</font>

479
00:16:50,450 --> 00:16:54,920
<font color="#CCCCCC">functions we can do</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> how railgun</font>

480
00:16:53,060 --> 00:16:56,719
actually ties into this is<font color="#E5E5E5"> that we have</font>

481
00:16:54,920 --> 00:16:58,520
the<font color="#E5E5E5"> relevant definitions for Lib</font>

482
00:16:56,720 --> 00:17:00,260
Objective<font color="#E5E5E5"> C and then these are the three</font>

483
00:16:58,520 --> 00:17:03,230
<font color="#CCCCCC">functions we're just me calling over</font><font color="#E5E5E5"> and</font>

484
00:17:00,260 --> 00:17:04,520
<font color="#CCCCCC">over again and once again</font><font color="#E5E5E5"> very very</font><font color="#CCCCCC"> bad</font>

485
00:17:03,230 --> 00:17:06,620
<font color="#CCCCCC">idea everyone's like you know you</font>

486
00:17:04,520 --> 00:17:09,490
shouldn't<font color="#CCCCCC"> be</font><font color="#E5E5E5"> calling in</font><font color="#CCCCCC"> selective C</font>

487
00:17:06,619 --> 00:17:13,550
libraries but like I do what I want<font color="#E5E5E5"> so</font>

488
00:17:09,490 --> 00:17:15,530
worked out not so<font color="#CCCCCC"> bad all</font><font color="#E5E5E5"> right but so</font>

489
00:17:13,550 --> 00:17:17,030
how we actually<font color="#E5E5E5"> have to initialize some</font>

490
00:17:15,530 --> 00:17:18,709
of<font color="#E5E5E5"> these classes because deliver</font>

491
00:17:17,030 --> 00:17:20,780
Objective C stuff is all implementing

492
00:17:18,709 --> 00:17:22,610
<font color="#CCCCCC">classes and as anyone</font><font color="#E5E5E5"> this code in C</font>

493
00:17:20,780 --> 00:17:25,459
will tell you it's got no class

494
00:17:22,609 --> 00:17:27,050
<font color="#CCCCCC">it's how towel rolls</font><font color="#E5E5E5"> but so the</font><font color="#CCCCCC"> first</font>

495
00:17:25,459 --> 00:17:28,040
thing<font color="#E5E5E5"> they're like the main thing</font><font color="#CCCCCC"> that's</font>

496
00:17:27,050 --> 00:17:31,490
going to<font color="#CCCCCC"> be doing</font><font color="#E5E5E5"> is going to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> using</font>

497
00:17:28,040 --> 00:17:32,600
this Objective C message send like the

498
00:17:31,490 --> 00:17:34,370
most important function you're gonna be

499
00:17:32,600 --> 00:17:36,350
using<font color="#CCCCCC"> that</font><font color="#E5E5E5"> to send messages on to the</font>

500
00:17:34,370 --> 00:17:37,850
different<font color="#E5E5E5"> objects unfortunately</font>

501
00:17:36,350 --> 00:17:40,399
something to note about this is<font color="#E5E5E5"> that</font>

502
00:17:37,850 --> 00:17:43,159
those first two<font color="#CCCCCC"> parameters that ID of</font>

503
00:17:40,400 --> 00:17:44,809
self and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> selector</font><font color="#E5E5E5"> those are always</font>

504
00:17:43,160 --> 00:17:46,940
there but that dot dot dot on the far

505
00:17:44,809 --> 00:17:48,860
right this function<font color="#E5E5E5"> is actually</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> C deck</font>

506
00:17:46,940 --> 00:17:50,810
function that takes a<font color="#E5E5E5"> variable number of</font>

507
00:17:48,860 --> 00:17:52,639
arguments<font color="#E5E5E5"> so that also kind of</font>

508
00:17:50,810 --> 00:17:54,950
complicates calling<font color="#E5E5E5"> things from railgun</font>

509
00:17:52,640 --> 00:17:56,780
<font color="#CCCCCC">whose</font><font color="#E5E5E5"> railgun once again having been</font>

510
00:17:54,950 --> 00:17:58,520
<font color="#CCCCCC">primarily developed</font><font color="#E5E5E5"> for Windows Windows</font>

511
00:17:56,780 --> 00:17:59,720
doesn't<font color="#E5E5E5"> use</font><font color="#CCCCCC"> CD echo</font><font color="#E5E5E5"> a lot it uses a</font>

512
00:17:58,520 --> 00:18:01,970
standard call if you're<font color="#E5E5E5"> not familiar</font>

513
00:17:59,720 --> 00:18:04,370
with the calling conventions standard

514
00:18:01,970 --> 00:18:06,440
call<font color="#E5E5E5"> has a fixed number of arguments</font>

515
00:18:04,370 --> 00:18:07,909
about<font color="#E5E5E5"> all the time so there are a couple</font>

516
00:18:06,440 --> 00:18:08,930
of<font color="#E5E5E5"> exceptions like print out things like</font>

517
00:18:07,910 --> 00:18:10,880
<font color="#E5E5E5">that where you can add on additional</font>

518
00:18:08,930 --> 00:18:12,770
arguments<font color="#E5E5E5"> but for the most part the</font>

519
00:18:10,880 --> 00:18:15,590
function will always<font color="#E5E5E5"> take X number of</font>

520
00:18:12,770 --> 00:18:16,670
arguments so message send<font color="#CCCCCC"> can be a</font>

521
00:18:15,590 --> 00:18:18,110
<font color="#E5E5E5">little more difficult</font><font color="#CCCCCC"> so we're gonna</font>

522
00:18:16,670 --> 00:18:19,910
have<font color="#E5E5E5"> to do is we have to</font><font color="#CCCCCC"> define the</font>

523
00:18:18,110 --> 00:18:21,770
prototype<font color="#E5E5E5"> or railgun like over and over</font>

524
00:18:19,910 --> 00:18:23,380
<font color="#CCCCCC">against</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> way we can apply it when we</font>

525
00:18:21,770 --> 00:18:25,879
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> pass in the additional</font><font color="#CCCCCC"> argument</font>

526
00:18:23,380 --> 00:18:28,010
but<font color="#E5E5E5"> that first argument there that that</font>

527
00:18:25,880 --> 00:18:29,870
self<font color="#E5E5E5"> that's actually</font><font color="#CCCCCC"> like the class the</font>

528
00:18:28,010 --> 00:18:31,310
class instance of class reference<font color="#E5E5E5"> object</font>

529
00:18:29,870 --> 00:18:34,189
is going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be because once again</font><font color="#CCCCCC"> incy</font>

530
00:18:31,310 --> 00:18:36,649
like we don't<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> concept of classes</font>

531
00:18:34,190 --> 00:18:38,300
<font color="#E5E5E5">so we have to pass in</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> reference as</font>

532
00:18:36,650 --> 00:18:39,400
that<font color="#CCCCCC"> first function so that's</font><font color="#E5E5E5"> how we do</font>

533
00:18:38,300 --> 00:18:41,930
it

534
00:18:39,400 --> 00:18:43,940
yep<font color="#CCCCCC"> all right so the</font><font color="#E5E5E5"> very first thing</font><font color="#CCCCCC"> is</font>

535
00:18:41,930 --> 00:18:46,610
<font color="#CCCCCC">that we use</font><font color="#E5E5E5"> that get class function so</font>

536
00:18:43,940 --> 00:18:47,750
we<font color="#CCCCCC"> can pass it in a class name in the</font>

537
00:18:46,610 --> 00:18:49,490
case of our<font color="#CCCCCC"> demonstrations what we're</font>

538
00:18:47,750 --> 00:18:52,520
going to<font color="#E5E5E5"> do we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> pass it in</font><font color="#CCCCCC"> NS</font>

539
00:18:49,490 --> 00:18:53,960
<font color="#CCCCCC">Apple script</font><font color="#E5E5E5"> and so that's going to give</font>

540
00:18:52,520 --> 00:18:56,360
<font color="#CCCCCC">us a</font><font color="#E5E5E5"> reference to that class and then</font>

541
00:18:53,960 --> 00:18:59,360
<font color="#E5E5E5">we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use the selector to call</font>

542
00:18:56,360 --> 00:19:01,510
in<font color="#CCCCCC"> up</font><font color="#E5E5E5"> get allocate and then initialize</font>

543
00:18:59,360 --> 00:19:05,629
that we're just<font color="#CCCCCC"> gonna pass those ones in</font>

544
00:19:01,510 --> 00:19:07,520
<font color="#E5E5E5">all right so this is very very dry one</font>

545
00:19:05,630 --> 00:19:08,990
thing I forgot this very first top line

546
00:19:07,520 --> 00:19:10,490
right here<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that prior</font><font color="#CCCCCC"> to being</font><font color="#E5E5E5"> able</font>

547
00:19:08,990 --> 00:19:12,620
to use<font color="#E5E5E5"> like get class and things on the</font>

548
00:19:10,490 --> 00:19:15,200
<font color="#E5E5E5">from the objective-c library you have to</font>

549
00:19:12,620 --> 00:19:16,699
load up<font color="#E5E5E5"> the objective-c library that</font>

550
00:19:15,200 --> 00:19:18,470
<font color="#E5E5E5">allows</font><font color="#CCCCCC"> it to initialize itself and it</font>

551
00:19:16,700 --> 00:19:20,270
registers<font color="#CCCCCC"> its class names</font><font color="#E5E5E5"> and at that</font>

552
00:19:18,470 --> 00:19:22,880
point<font color="#E5E5E5"> you can access them from</font><font color="#CCCCCC"> Lib</font>

553
00:19:20,270 --> 00:19:24,110
<font color="#CCCCCC">objective-c so very dry you really want</font>

554
00:19:22,880 --> 00:19:26,660
to point<font color="#E5E5E5"> that out a little bit too much</font>

555
00:19:24,110 --> 00:19:30,139
but now it's time for demonstration so

556
00:19:26,660 --> 00:19:31,340
<font color="#E5E5E5">take a look at this right everybody</font>

557
00:19:30,140 --> 00:19:40,060
knows the demos can<font color="#E5E5E5"> be way better than</font>

558
00:19:31,340 --> 00:19:40,060
like staring<font color="#E5E5E5"> at</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> pseudo code</font><font color="#CCCCCC"> alright</font>

559
00:19:41,850 --> 00:19:46,750
<font color="#E5E5E5">okay so I am SSH into this MacBook right</font>

560
00:19:45,309 --> 00:19:49,000
here and I want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> thank Tom McPhee for</font>

561
00:19:46,750 --> 00:19:50,889
loaning me his hardware<font color="#E5E5E5"> to do all of</font>

562
00:19:49,000 --> 00:20:03,610
this<font color="#E5E5E5"> research we're going to set up a</font>

563
00:19:50,889 --> 00:20:06,100
Python<font color="#E5E5E5"> meterpreter payload I'm setting a</font>

564
00:20:03,610 --> 00:20:08,258
new option that's in this patch right

565
00:20:06,100 --> 00:20:13,719
<font color="#E5E5E5">now</font><font color="#CCCCCC"> to forth to false we talked</font><font color="#E5E5E5"> Y about</font>

566
00:20:08,259 --> 00:20:16,029
why that<font color="#E5E5E5"> is in just second and public</font>

567
00:20:13,720 --> 00:20:21,549
service announcement<font color="#E5E5E5"> if you did not</font><font color="#CCCCCC"> know</font>

568
00:20:16,029 --> 00:20:23,470
about the<font color="#CCCCCC"> - handler command it's amazing</font>

569
00:20:21,549 --> 00:20:27,990
brand new within within<font color="#CCCCCC"> Metasploit</font>

570
00:20:23,470 --> 00:20:27,990
pretty recently mind-blowing right Jeff

571
00:20:29,039 --> 00:20:41,049
<font color="#CCCCCC">aha</font><font color="#E5E5E5"> all right so we got</font><font color="#CCCCCC"> our session</font>

572
00:20:31,779 --> 00:20:45,279
<font color="#CCCCCC">super lead hacking time now assuming I</font>

573
00:20:41,049 --> 00:20:48,009
can<font color="#E5E5E5"> type okay</font>

574
00:20:45,279 --> 00:20:52,590
so<font color="#E5E5E5"> yep got her a Python</font><font color="#CCCCCC"> meter procession</font>

575
00:20:48,009 --> 00:21:08,559
on our Mac look in the background<font color="#E5E5E5"> use</font>

576
00:20:52,590 --> 00:21:10,120
<font color="#CCCCCC">halo our TV host</font><font color="#E5E5E5"> admin oh okay so we're</font>

577
00:21:08,559 --> 00:21:12,690
going<font color="#E5E5E5"> to run a group concept script here</font>

578
00:21:10,120 --> 00:21:12,689
real quick

579
00:21:17,009 --> 00:21:26,950
<font color="#E5E5E5">and if we're really quiet there you have</font>

580
00:21:26,620 --> 00:21:28,570
<font color="#E5E5E5">it</font>

581
00:21:26,950 --> 00:21:29,710
say hello world besides I know it's cut

582
00:21:28,570 --> 00:21:31,418
off a little bit<font color="#E5E5E5"> over there but we're</font>

583
00:21:29,710 --> 00:21:32,649
just issuing<font color="#E5E5E5"> the sake man so in just a</font>

584
00:21:31,419 --> 00:21:35,110
second I'm<font color="#E5E5E5"> gonna have that one really</font>

585
00:21:32,649 --> 00:21:43,649
<font color="#E5E5E5">really quiet</font><font color="#CCCCCC"> as this Mac screams out</font>

586
00:21:35,110 --> 00:21:46,409
<font color="#E5E5E5">hello world</font><font color="#CCCCCC"> B sides alright</font><font color="#E5E5E5"> options set</font>

587
00:21:43,649 --> 00:21:53,550
script

588
00:21:46,410 --> 00:21:55,790
I always exploit<font color="#CCCCCC"> that's ready right real</font>

589
00:21:53,550 --> 00:21:55,790
quiet

590
00:21:57,290 --> 00:22:02,450
right there in<font color="#E5E5E5"> front row</font><font color="#CCCCCC"> and there we go</font>

591
00:22:03,860 --> 00:22:07,709
<font color="#CCCCCC">alright so uh we</font><font color="#E5E5E5"> have debugging</font>

592
00:22:06,180 --> 00:22:10,620
statements because<font color="#CCCCCC"> I absolutely love</font>

593
00:22:07,710 --> 00:22:12,390
those all the time<font color="#E5E5E5"> but so as I've been</font>

594
00:22:10,620 --> 00:22:14,100
<font color="#E5E5E5">talking about this NS</font><font color="#CCCCCC"> AppleScript so</font><font color="#E5E5E5"> we</font>

595
00:22:12,390 --> 00:22:16,860
allocated<font color="#CCCCCC"> initialize the brand-new</font>

596
00:22:14,100 --> 00:22:18,240
<font color="#CCCCCC">classes at but we</font><font color="#E5E5E5"> initialize our</font><font color="#CCCCCC"> apple</font>

597
00:22:16,860 --> 00:22:19,889
scripts from source<font color="#CCCCCC"> because we read it</font>

598
00:22:18,240 --> 00:22:22,200
off of this system right<font color="#CCCCCC"> here and that</font>

599
00:22:19,890 --> 00:22:24,090
<font color="#E5E5E5">has to be passed in as not a</font><font color="#CCCCCC"> C string</font>

600
00:22:22,200 --> 00:22:26,070
but like an NS string so once<font color="#E5E5E5"> again like</font>

601
00:22:24,090 --> 00:22:28,560
one<font color="#E5E5E5"> of those live objective mod objects</font>

602
00:22:26,070 --> 00:22:30,330
so we<font color="#CCCCCC"> have to initialize</font><font color="#E5E5E5"> that one as</font>

603
00:22:28,560 --> 00:22:32,429
<font color="#CCCCCC">well so</font><font color="#E5E5E5"> we just</font><font color="#CCCCCC"> so happen to do that one</font>

604
00:22:30,330 --> 00:22:34,530
first<font color="#E5E5E5"> and we that has a method where we</font>

605
00:22:32,430 --> 00:22:36,360
<font color="#E5E5E5">can initialize it from a standard like</font>

606
00:22:34,530 --> 00:22:38,760
null terminated<font color="#CCCCCC"> C string so</font><font color="#E5E5E5"> that's how</font>

607
00:22:36,360 --> 00:22:40,560
we do it<font color="#E5E5E5"> through railgun and under the</font>

608
00:22:38,760 --> 00:22:42,650
hood<font color="#E5E5E5"> this was really fast because we're</font>

609
00:22:40,560 --> 00:22:45,149
both<font color="#E5E5E5"> on the local</font><font color="#CCCCCC"> area network but like</font>

610
00:22:42,650 --> 00:22:46,740
unfortunately<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> were if you're on a</font>

611
00:22:45,150 --> 00:22:49,620
real network with any kind<font color="#CCCCCC"> of like</font>

612
00:22:46,740 --> 00:22:52,010
latency issues it would<font color="#E5E5E5"> be a bit OD a</font>

613
00:22:49,620 --> 00:22:56,780
bit slower

614
00:22:52,010 --> 00:23:01,260
<font color="#CCCCCC">alright so segmentation faults</font><font color="#E5E5E5"> so I had</font>

615
00:22:56,780 --> 00:23:03,410
set that<font color="#E5E5E5"> try to fork option</font><font color="#CCCCCC"> default</font><font color="#E5E5E5"> by</font>

616
00:23:01,260 --> 00:23:05,760
default the interpreters that<font color="#CCCCCC"> are</font>

617
00:23:03,410 --> 00:23:08,310
<font color="#E5E5E5">targeting platforms which support</font>

618
00:23:05,760 --> 00:23:10,020
forking they will do so that's so that

619
00:23:08,310 --> 00:23:12,270
<font color="#E5E5E5">your exploit doesn't hang it's going to</font>

620
00:23:10,020 --> 00:23:13,860
fork<font color="#E5E5E5"> the session to a brand-new</font><font color="#CCCCCC"> process</font>

621
00:23:12,270 --> 00:23:15,540
<font color="#E5E5E5">and then you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> run your shenanigans</font>

622
00:23:13,860 --> 00:23:17,129
<font color="#E5E5E5">from there from within like an isolated</font>

623
00:23:15,540 --> 00:23:19,139
environment<font color="#CCCCCC"> generally as</font><font color="#E5E5E5"> like a pen</font>

624
00:23:17,130 --> 00:23:20,550
tester<font color="#CCCCCC"> that's what you want you want</font><font color="#E5E5E5"> it</font>

625
00:23:19,140 --> 00:23:22,530
to fork a new process<font color="#CCCCCC"> and set everything</font>

626
00:23:20,550 --> 00:23:24,540
<font color="#CCCCCC">up there so by default that's how it's</font>

627
00:23:22,530 --> 00:23:26,520
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> work and still currently</font>

628
00:23:24,540 --> 00:23:28,409
publicly the Python interpreter<font color="#E5E5E5"> will</font>

629
00:23:26,520 --> 00:23:31,430
always try to fork when<font color="#CCCCCC"> basically the</font>

630
00:23:28,410 --> 00:23:34,260
fork system call is available however

631
00:23:31,430 --> 00:23:35,850
<font color="#CCCCCC">Apple in their infinite wisdom uses</font><font color="#E5E5E5"> this</font>

632
00:23:34,260 --> 00:23:37,650
thing called Grand Central Dispatch

633
00:23:35,850 --> 00:23:40,320
<font color="#CCCCCC">that's what they refer to</font><font color="#E5E5E5"> a live</font>

634
00:23:37,650 --> 00:23:42,030
dispatch as and live dispatch is an

635
00:23:40,320 --> 00:23:43,710
inter process communication mechanism

636
00:23:42,030 --> 00:23:45,510
used by<font color="#CCCCCC"> a lot of the</font><font color="#E5E5E5"> Apple programs</font>

637
00:23:43,710 --> 00:23:48,390
libraries and<font color="#CCCCCC"> things like that in this</font>

638
00:23:45,510 --> 00:23:50,790
case the NS<font color="#E5E5E5"> Apple script leverages Lib</font>

639
00:23:48,390 --> 00:23:53,280
dispatch to receive<font color="#CCCCCC"> events that were</font>

640
00:23:50,790 --> 00:23:57,510
processed by the execution of the Apple

641
00:23:53,280 --> 00:23:59,940
script<font color="#CCCCCC"> when a process Forks on OSX lib</font>

642
00:23:57,510 --> 00:24:04,679
dispatch hopes<font color="#E5E5E5"> that process and</font>

643
00:23:59,940 --> 00:24:07,230
corrupts itself<font color="#CCCCCC"> they do that so that the</font>

644
00:24:04,679 --> 00:24:09,360
<font color="#E5E5E5">next call into</font><font color="#CCCCCC"> lib</font><font color="#E5E5E5"> dispatch will cause a</font>

645
00:24:07,230 --> 00:24:11,730
a segmentation<font color="#E5E5E5"> fault</font><font color="#CCCCCC"> and it will cost</font>

646
00:24:09,360 --> 00:24:14,370
the<font color="#CCCCCC"> program's you always crash reliably</font>

647
00:24:11,730 --> 00:24:16,620
<font color="#E5E5E5">so to speak but</font><font color="#CCCCCC"> to my knowledge there's</font>

648
00:24:14,370 --> 00:24:18,000
no way to reinitialize this but what

649
00:24:16,620 --> 00:24:19,529
<font color="#E5E5E5">that ends up meaning is that</font><font color="#CCCCCC"> if you</font>

650
00:24:18,000 --> 00:24:21,269
follow<font color="#E5E5E5"> what I've done here and you're</font>

651
00:24:19,529 --> 00:24:23,159
using like live<font color="#CCCCCC"> objective-c and</font><font color="#E5E5E5"> you're</font>

652
00:24:21,269 --> 00:24:26,100
calling it<font color="#CCCCCC"> these apple libraries</font><font color="#E5E5E5"> if you</font>

653
00:24:23,159 --> 00:24:28,230
have forked your process<font color="#CCCCCC"> if any of those</font>

654
00:24:26,100 --> 00:24:29,850
interact with or somehow<font color="#CCCCCC"> touch the lib</font>

655
00:24:28,230 --> 00:24:32,909
dispatch your session is going<font color="#E5E5E5"> to</font>

656
00:24:29,850 --> 00:24:34,439
immediately die unfortunately<font color="#CCCCCC"> I mean one</font>

657
00:24:32,909 --> 00:24:36,000
of the things I<font color="#E5E5E5"> need to look into moving</font>

658
00:24:34,440 --> 00:24:37,970
forward with this is to see if after

659
00:24:36,000 --> 00:24:40,230
forking there's a way to reinitialize

660
00:24:37,970 --> 00:24:41,700
<font color="#CCCCCC">lib</font><font color="#E5E5E5"> dispatch that way you can leverage</font>

661
00:24:40,230 --> 00:24:46,139
it<font color="#E5E5E5"> without actually having it kill your</font>

662
00:24:41,700 --> 00:24:47,909
process and so all this code is public<font color="#CCCCCC"> I</font>

663
00:24:46,139 --> 00:24:49,590
really<font color="#E5E5E5"> really just like it when</font><font color="#CCCCCC"> people</font>

664
00:24:47,909 --> 00:24:50,909
show<font color="#CCCCCC"> off like super cool stuff</font><font color="#E5E5E5"> and</font>

665
00:24:49,590 --> 00:24:52,830
<font color="#E5E5E5">they're like oh yeah</font><font color="#CCCCCC"> you know this isn't</font>

666
00:24:50,909 --> 00:24:54,750
<font color="#CCCCCC">done or or</font><font color="#E5E5E5"> something along those lines</font>

667
00:24:52,830 --> 00:24:56,820
<font color="#CCCCCC">everything that I've shown with the</font>

668
00:24:54,750 --> 00:24:59,190
exception of the Apple<font color="#E5E5E5"> script module is</font>

669
00:24:56,820 --> 00:25:00,090
all public under this branch<font color="#E5E5E5"> right</font><font color="#CCCCCC"> here</font>

670
00:24:59,190 --> 00:25:03,269
so if you want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> check it out its</font>

671
00:25:00,090 --> 00:25:04,860
public right<font color="#CCCCCC"> now today and I'm hoping</font><font color="#E5E5E5"> to</font>

672
00:25:03,269 --> 00:25:06,360
get this<font color="#E5E5E5"> wrapped up and submitted</font><font color="#CCCCCC"> to the</font>

673
00:25:04,860 --> 00:25:07,979
<font color="#CCCCCC">medical aid project as a formal pull</font>

674
00:25:06,360 --> 00:25:10,320
request for review<font color="#E5E5E5"> and ultimately</font>

675
00:25:07,980 --> 00:25:12,059
acceptance in the next week<font color="#E5E5E5"> or so I'm</font>

676
00:25:10,320 --> 00:25:14,070
hoping to get<font color="#E5E5E5"> that submitted on this is</font>

677
00:25:12,059 --> 00:25:16,320
this<font color="#E5E5E5"> all actually</font><font color="#CCCCCC"> done I'm holding</font><font color="#E5E5E5"> on to</font>

678
00:25:14,070 --> 00:25:18,210
<font color="#CCCCCC">the Apple script because honestly</font>

679
00:25:16,320 --> 00:25:19,769
without forking<font color="#CCCCCC"> if you don't if you</font>

680
00:25:18,210 --> 00:25:21,029
didn't fork<font color="#E5E5E5"> ahead of time then like</font>

681
00:25:19,769 --> 00:25:22,769
you're going to<font color="#E5E5E5"> kill your session so I</font>

682
00:25:21,029 --> 00:25:24,120
thought<font color="#CCCCCC"> it</font><font color="#E5E5E5"> probably better to save</font>

683
00:25:22,769 --> 00:25:25,830
people<font color="#CCCCCC"> from that unfortunately if you're</font>

684
00:25:24,120 --> 00:25:27,000
interested<font color="#E5E5E5"> in it let me</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> and I'll</font>

685
00:25:25,830 --> 00:25:28,168
share<font color="#CCCCCC"> it</font><font color="#E5E5E5"> but I really think it's</font>

686
00:25:27,000 --> 00:25:29,519
<font color="#CCCCCC">something that I've longed in there</font>

687
00:25:28,169 --> 00:25:31,259
want<font color="#E5E5E5"> to prevent people</font><font color="#CCCCCC"> computing</font>

688
00:25:29,519 --> 00:25:33,539
themselves in the foot<font color="#E5E5E5"> I've got a couple</font>

689
00:25:31,259 --> 00:25:35,190
<font color="#E5E5E5">of blogs out on the more the technical</font>

690
00:25:33,539 --> 00:25:36,840
<font color="#E5E5E5">details of how</font><font color="#CCCCCC"> railgun</font><font color="#E5E5E5"> actually works if</font>

691
00:25:35,190 --> 00:25:38,879
you<font color="#CCCCCC"> are more interested in</font><font color="#E5E5E5"> that there's</font>

692
00:25:36,840 --> 00:25:40,500
that<font color="#E5E5E5"> otherwise you want to say thank you</font>

693
00:25:38,879 --> 00:25:43,110
<font color="#CCCCCC">for</font><font color="#E5E5E5"> your time</font><font color="#CCCCCC"> and if anybody has any</font>

694
00:25:40,500 --> 00:25:47,659
<font color="#CCCCCC">questions I have some pretty cool bottle</font>

695
00:25:43,110 --> 00:25:47,658
openers and thanks everyone

696
00:25:49,090 --> 00:25:51,149
you

