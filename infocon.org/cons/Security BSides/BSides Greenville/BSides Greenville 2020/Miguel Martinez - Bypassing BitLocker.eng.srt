1
00:00:04,520 --> 00:00:09,680
thanks everybody for joining my name is

2
00:00:07,250 --> 00:00:13,730
Miguel Martinez I am the CTO of tech

3
00:00:09,680 --> 00:00:17,029
refresh also I help run the derbycon

4
00:00:13,730 --> 00:00:21,860
community chapter out of Inland Empire

5
00:00:17,029 --> 00:00:24,130
which is in Southern California so again

6
00:00:21,860 --> 00:00:27,890
this talk is on BitLocker it's mainly

7
00:00:24,130 --> 00:00:30,860
kind of our the talk is based around

8
00:00:27,890 --> 00:00:34,039
actually a real-life scenario that we

9
00:00:30,860 --> 00:00:37,400
went through with one of our customers

10
00:00:34,039 --> 00:00:40,880
actually reached out to us and we'll

11
00:00:37,400 --> 00:00:43,160
kind of go through the the to to attack

12
00:00:40,880 --> 00:00:45,649
methods we went through and what we

13
00:00:43,160 --> 00:00:50,059
learned and kind of what what transpired

14
00:00:45,649 --> 00:00:53,720
so for it so again what would is

15
00:00:50,059 --> 00:00:55,180
BitLocker I mean everybody knows biz

16
00:00:53,720 --> 00:00:58,070
Locker is essentially you know

17
00:00:55,180 --> 00:00:59,920
encryption solution available in Windows

18
00:00:58,070 --> 00:01:03,440
operating system it can do dis level

19
00:00:59,920 --> 00:01:06,290
volume level encryption there's multiple

20
00:01:03,440 --> 00:01:09,229
encryption methods you know there's TPM

21
00:01:06,290 --> 00:01:12,170
which is the chip on the motherboard

22
00:01:09,229 --> 00:01:14,030
that stores help stores encryption keys

23
00:01:12,170 --> 00:01:18,079
and essentially it's like an escrow for

24
00:01:14,030 --> 00:01:20,659
those those keys specifically in this

25
00:01:18,079 --> 00:01:24,969
talk we're gonna we're focusing on TPM

26
00:01:20,659 --> 00:01:28,279
only that that's what are the

27
00:01:24,969 --> 00:01:31,520
essentially our system that we were or

28
00:01:28,279 --> 00:01:36,740
the laptop they were test to gain access

29
00:01:31,520 --> 00:01:38,959
into had had was running and again as

30
00:01:36,740 --> 00:01:41,060
mentioned before you have TPM plus pin

31
00:01:38,959 --> 00:01:43,670
which essentially when when the system

32
00:01:41,060 --> 00:01:46,159
boots up your user has to enter their

33
00:01:43,670 --> 00:01:47,630
their pin there's also pin plus USB

34
00:01:46,159 --> 00:01:50,810
which again is there's a physical aspect

35
00:01:47,630 --> 00:01:52,789
there and again like I mentioned TPM

36
00:01:50,810 --> 00:01:54,919
only is transparent what happens is

37
00:01:52,789 --> 00:01:57,139
essentially the key stored in TPM where

38
00:01:54,919 --> 00:01:59,840
the system boots up you know that DPM

39
00:01:57,139 --> 00:02:03,469
sends over the key and decryption to

40
00:01:59,840 --> 00:02:07,880
drive as mentioned oh if I haven't

41
00:02:03,469 --> 00:02:11,239
mentioned before my I asked my daughter

42
00:02:07,880 --> 00:02:14,750
for suggestions on themes for the for

43
00:02:11,239 --> 00:02:16,610
this talk and her suggestion was to use

44
00:02:14,750 --> 00:02:20,190
one of our or

45
00:02:16,610 --> 00:02:22,110
favorite anime series so if hopefully

46
00:02:20,190 --> 00:02:25,829
you guys can check out attack on titan

47
00:02:22,110 --> 00:02:30,480
if your anime fan so again our subject

48
00:02:25,830 --> 00:02:33,780
was the HP EliteBook 1040 g2 it's a

49
00:02:30,480 --> 00:02:35,820
fairly older system Windows 10

50
00:02:33,780 --> 00:02:38,700
Enterprise had BitLocker enabled with

51
00:02:35,820 --> 00:02:40,859
TPM only which was a huge plus in our

52
00:02:38,700 --> 00:02:42,600
search for this scenario Windows

53
00:02:40,860 --> 00:02:46,800
Firewall was enabled with zero ports

54
00:02:42,600 --> 00:02:48,780
inbound right so for the four just by

55
00:02:46,800 --> 00:02:51,060
what we have here is you know you you

56
00:02:48,780 --> 00:02:53,760
can boot the system up you you're

57
00:02:51,060 --> 00:02:55,830
sitting at a login screen but nobody had

58
00:02:53,760 --> 00:02:59,790
credentials from the system had been

59
00:02:55,830 --> 00:03:02,280
taken off the removed from the domain

60
00:02:59,790 --> 00:03:04,620
nobody had local credentials there was

61
00:03:02,280 --> 00:03:06,180
no network access to it it was it was

62
00:03:04,620 --> 00:03:09,780
essentially hardened the only thing to

63
00:03:06,180 --> 00:03:11,430
do is try to log in but you know it

64
00:03:09,780 --> 00:03:13,710
there's there was just

65
00:03:11,430 --> 00:03:16,110
and whoever encrypted the drive

66
00:03:13,710 --> 00:03:18,720
originally no laurent were worked at the

67
00:03:16,110 --> 00:03:20,370
organization so when they encrypted it

68
00:03:18,720 --> 00:03:23,100
wasn't tied to Active Directory it was

69
00:03:20,370 --> 00:03:25,590
essentially somebody saved the the

70
00:03:23,100 --> 00:03:28,260
recovery the recovery file onto a USB

71
00:03:25,590 --> 00:03:31,230
which nobody knew or were that was

72
00:03:28,260 --> 00:03:32,850
located and again the goal was to

73
00:03:31,230 --> 00:03:36,799
retrieve the data that this laptop

74
00:03:32,850 --> 00:03:38,790
actually was owned by pretty higher up

75
00:03:36,800 --> 00:03:41,180
executive that actually reported

76
00:03:38,790 --> 00:03:45,720
directly to the to the owners and this

77
00:03:41,180 --> 00:03:48,390
big organization I think multi-million

78
00:03:45,720 --> 00:03:50,910
dollar organization so they spent a few

79
00:03:48,390 --> 00:03:52,410
weeks trying to get access to the box so

80
00:03:50,910 --> 00:03:55,500
they reached out and then spent a few

81
00:03:52,410 --> 00:03:58,260
weeks so that gave us a few days to kind

82
00:03:55,500 --> 00:04:00,930
of think about you know our our attack

83
00:03:58,260 --> 00:04:03,510
path and and what we could do to recover

84
00:04:00,930 --> 00:04:06,989
the data I mean this was our first

85
00:04:03,510 --> 00:04:09,120
attempt right so it's since we had a bit

86
00:04:06,989 --> 00:04:11,400
Locker we weren't able to you know just

87
00:04:09,120 --> 00:04:14,970
remove the drive and you know stick it

88
00:04:11,400 --> 00:04:16,890
into another system and decrypt right we

89
00:04:14,970 --> 00:04:19,350
said we had to deal with BitLocker which

90
00:04:16,890 --> 00:04:24,590
was which was enabled you couldn't boot

91
00:04:19,350 --> 00:04:28,020
into us into a Linux OS again because it

92
00:04:24,590 --> 00:04:29,580
you you that TPM

93
00:04:28,020 --> 00:04:34,139
bitlocker essentially prevented you from

94
00:04:29,580 --> 00:04:37,318
from gaining access into that drive so

95
00:04:34,139 --> 00:04:40,169
our first attack path we we went down

96
00:04:37,319 --> 00:04:42,449
our first rabbit hole I should say was

97
00:04:40,169 --> 00:04:46,080
the cold boot attack this is nothing new

98
00:04:42,449 --> 00:04:50,669
this was published on a paper from

99
00:04:46,080 --> 00:04:53,789
Princeton back in 2008 essentially boil

100
00:04:50,669 --> 00:04:56,490
it down essentially it was a research

101
00:04:53,789 --> 00:04:58,949
that found that you know ram retains

102
00:04:56,490 --> 00:05:02,310
data for a few seconds to a few minutes

103
00:04:58,949 --> 00:05:05,070
after you power down the device and it

104
00:05:02,310 --> 00:05:08,820
even becomes more apparent when the the

105
00:05:05,070 --> 00:05:10,349
RAM chips or the are cooled right so the

106
00:05:08,820 --> 00:05:14,729
cooler can get it the longer the data

107
00:05:10,349 --> 00:05:18,120
stays again this this attack was from

108
00:05:14,729 --> 00:05:19,740
back in 2008 back in those times it was

109
00:05:18,120 --> 00:05:23,250
really easy essentially what you could

110
00:05:19,740 --> 00:05:25,650
do is you take a essentially you take

111
00:05:23,250 --> 00:05:28,949
your compressed air can flip it upside

112
00:05:25,650 --> 00:05:31,489
down point at the memory chip cool it

113
00:05:28,949 --> 00:05:34,889
down power off the device power into

114
00:05:31,490 --> 00:05:38,250
something else like lint a bootable

115
00:05:34,889 --> 00:05:40,530
Linux OS and you can read the data off

116
00:05:38,250 --> 00:05:42,990
read the data directly author in the

117
00:05:40,530 --> 00:05:46,198
memory chip right in hopes that the

118
00:05:42,990 --> 00:05:50,090
decryption keys were still resonant in

119
00:05:46,199 --> 00:05:50,090
in the in the RAM

120
00:05:50,310 --> 00:05:57,620
again if you guys have any questions

121
00:05:51,960 --> 00:06:00,450
just pause me or you know we can open to

122
00:05:57,620 --> 00:06:04,190
having a discussion so again this is a

123
00:06:00,450 --> 00:06:09,030
again our HP link book as you can see

124
00:06:04,190 --> 00:06:11,040
the RAM chip is right over here for sure

125
00:06:09,030 --> 00:06:13,799
you can see that or sorry the pie host

126
00:06:11,040 --> 00:06:19,380
chip is right up right here which I

127
00:06:13,800 --> 00:06:20,850
circled so Monaca lis locate there was

128
00:06:19,380 --> 00:06:23,250
nothing it wasn't hidden behind you know

129
00:06:20,850 --> 00:06:23,640
a thousand peripherals or anything like

130
00:06:23,250 --> 00:06:26,160
that

131
00:06:23,640 --> 00:06:29,099
her hardware as soon as we popped out

132
00:06:26,160 --> 00:06:36,740
pop the bot the the bottom cover were

133
00:06:29,100 --> 00:06:36,740
able to locate it and gain access to it

134
00:06:40,280 --> 00:06:48,900
so one of the some of the

135
00:06:46,230 --> 00:06:51,000
countermeasures that that this attack

136
00:06:48,900 --> 00:06:54,659
from 2008 has now right I mean this is

137
00:06:51,000 --> 00:06:55,830
an older attack from 2008 manufacturers

138
00:06:54,660 --> 00:06:59,220
have actually implemented

139
00:06:55,830 --> 00:07:01,380
countermeasures since since that that

140
00:06:59,220 --> 00:07:03,300
paper was published and one of them I

141
00:07:01,380 --> 00:07:05,550
mean it's not really a big counter major

142
00:07:03,300 --> 00:07:07,560
tamper switches right some of these

143
00:07:05,550 --> 00:07:10,680
laptop motherboards or even desktop

144
00:07:07,560 --> 00:07:13,290
motherboards if if the case is open you

145
00:07:10,680 --> 00:07:16,440
know they have some some switches that

146
00:07:13,290 --> 00:07:18,630
were if they're left open you know that

147
00:07:16,440 --> 00:07:21,200
it it won't boot or essentially if

148
00:07:18,630 --> 00:07:25,250
they're left open it will clear memory

149
00:07:21,200 --> 00:07:30,690
during the BIOS post the other big

150
00:07:25,250 --> 00:07:35,700
countermeasure is essentially these this

151
00:07:30,690 --> 00:07:40,590
implementation essentially it's a it's

152
00:07:35,700 --> 00:07:42,500
an implementation that memory that's in

153
00:07:40,590 --> 00:07:45,719
the BIOS essentially clears a memory

154
00:07:42,500 --> 00:07:48,410
that essentially sorry step back works

155
00:07:45,720 --> 00:07:52,500
with the OS that what's assistant boots

156
00:07:48,410 --> 00:07:54,840
it's a bit in the BIOS and if that but

157
00:07:52,500 --> 00:07:59,700
during the shutdown process that that

158
00:07:54,840 --> 00:08:02,580
bit is is changed normal nor during a

159
00:07:59,700 --> 00:08:03,688
clean shutdown so when the BIOS boots up

160
00:08:02,580 --> 00:08:05,008
again

161
00:08:03,689 --> 00:08:07,499
it could read that bit and whether it

162
00:08:05,009 --> 00:08:10,049
was a clean shutdown or not it can

163
00:08:07,499 --> 00:08:12,509
determine whether it needs a clear clear

164
00:08:10,049 --> 00:08:14,419
the memory right and this next slide

165
00:08:12,509 --> 00:08:18,689
kind of helps show that so on the top we

166
00:08:14,419 --> 00:08:22,859
have a clean shutdown right so let me

167
00:08:18,689 --> 00:08:25,199
grab my little pin here so again we have

168
00:08:22,860 --> 00:08:27,569
that memory overwrite request bit during

169
00:08:25,199 --> 00:08:31,199
the BIOS post it is red so as you can

170
00:08:27,569 --> 00:08:34,709
see the arrow up by BIOS it's a zero

171
00:08:31,199 --> 00:08:38,129
then it checks whether it needs to needs

172
00:08:34,708 --> 00:08:40,438
to clear the memory if not then it goes

173
00:08:38,129 --> 00:08:42,329
straight into the OS right so this is

174
00:08:40,438 --> 00:08:45,120
the OS is running in this in this

175
00:08:42,328 --> 00:08:49,739
section here once it gets into a clean

176
00:08:45,120 --> 00:08:52,589
shutdown the OS will change it does it

177
00:08:49,740 --> 00:08:55,350
back to zero right so remember BIOS

178
00:08:52,589 --> 00:08:57,959
checks at zero then after it does its

179
00:08:55,350 --> 00:09:00,240
check it sets it to one and then it's up

180
00:08:57,959 --> 00:09:02,790
to the OS to set it back to zero during

181
00:09:00,240 --> 00:09:04,259
a clean shutdown on the subsequent boot

182
00:09:02,790 --> 00:09:06,240
let's say if there's a clean shutdown

183
00:09:04,259 --> 00:09:08,399
again the BIOS will read it it's a zero

184
00:09:06,240 --> 00:09:10,559
so it's not gonna clear memory down at

185
00:09:08,399 --> 00:09:12,600
the bottom we see what would happen if

186
00:09:10,559 --> 00:09:15,689
we we try to launch a cold boot attack

187
00:09:12,600 --> 00:09:17,730
and actually you know just physically

188
00:09:15,689 --> 00:09:21,329
power off the system without doing a

189
00:09:17,730 --> 00:09:23,870
clean shutdown again first this is a

190
00:09:21,329 --> 00:09:27,839
clean the first boot again the memory

191
00:09:23,870 --> 00:09:31,819
overwrite request bit is set to zero and

192
00:09:27,839 --> 00:09:37,199
then it is you know not memory is not

193
00:09:31,819 --> 00:09:39,540
not cleared the BIOS sets the bit back

194
00:09:37,199 --> 00:09:43,410
to one and then you know the OS is

195
00:09:39,540 --> 00:09:45,360
running in this this section here if we

196
00:09:43,410 --> 00:09:48,300
were to when we pull power in this

197
00:09:45,360 --> 00:09:50,970
section here that bit is still set to

198
00:09:48,300 --> 00:09:53,729
one so the next time the up by the BIOS

199
00:09:50,970 --> 00:09:57,959
boots it's going to read hey there's a

200
00:09:53,730 --> 00:09:59,970
one now it would in that bit so now bio

201
00:09:57,959 --> 00:10:03,000
says well I'm not going to boot the OS

202
00:09:59,970 --> 00:10:05,309
before I clear I need to clear the

203
00:10:03,000 --> 00:10:06,750
memory before the boot though so what

204
00:10:05,309 --> 00:10:10,790
happens is the BIOS clears the memory

205
00:10:06,750 --> 00:10:13,709
and then by the time you boot into your

206
00:10:10,790 --> 00:10:15,900
either your OS or let's say you you were

207
00:10:13,709 --> 00:10:20,250
trying to launch into a

208
00:10:15,900 --> 00:10:23,459
Linux OS that memory is already clear

209
00:10:20,250 --> 00:10:27,090
right there's nothing there so this is

210
00:10:23,460 --> 00:10:29,400
one essentially one of the attack

211
00:10:27,090 --> 00:10:36,690
countermeasures we had to get around for

212
00:10:29,400 --> 00:10:39,650
it for this this attack so our setup for

213
00:10:36,690 --> 00:10:44,850
the attack was essentially leveraging

214
00:10:39,650 --> 00:10:48,300
bootable USB leverage Arch Linux for

215
00:10:44,850 --> 00:10:51,450
memory acquisition we use lime and then

216
00:10:48,300 --> 00:10:56,010
for key recovery we used the AES key

217
00:10:51,450 --> 00:10:59,190
finder was actually provided by the on

218
00:10:56,010 --> 00:11:03,480
the 2008 research paper from Princeton

219
00:10:59,190 --> 00:11:08,130
as as files for that present there for

220
00:11:03,480 --> 00:11:12,150
that research the interesting thing we

221
00:11:08,130 --> 00:11:14,310
went with a nice pretty fast a USB stick

222
00:11:12,150 --> 00:11:16,829
so again the purpose was to boot as fast

223
00:11:14,310 --> 00:11:25,380
as we could so we can get as much RAM

224
00:11:16,830 --> 00:11:26,520
out right so so again the attack one of

225
00:11:25,380 --> 00:11:30,810
the things we needed to do is

226
00:11:26,520 --> 00:11:33,420
essentially get around this memory

227
00:11:30,810 --> 00:11:34,890
overwrite request bit right in order to

228
00:11:33,420 --> 00:11:37,349
prevent the BIOS from changing right

229
00:11:34,890 --> 00:11:39,569
there was no point in us rebooting the

230
00:11:37,350 --> 00:11:41,220
box trying to boot into Linux and then

231
00:11:39,570 --> 00:11:43,530
pulling memory since that there was

232
00:11:41,220 --> 00:11:45,390
there's just not no there wasn't gonna

233
00:11:43,530 --> 00:11:47,939
be any data there right because BIOS was

234
00:11:45,390 --> 00:11:49,980
gonna prevent us we're getting there so

235
00:11:47,940 --> 00:11:56,820
in order to do that what we tried first

236
00:11:49,980 --> 00:11:58,080
was sorry our try first was actually

237
00:11:56,820 --> 00:12:02,120
changing the more bit right we dumped

238
00:11:58,080 --> 00:12:05,460
memory using a BIOS essentially reader

239
00:12:02,120 --> 00:12:08,490
you know we connected into the pins with

240
00:12:05,460 --> 00:12:11,850
another system read it and then look

241
00:12:08,490 --> 00:12:13,620
found where the bit was and then pushed

242
00:12:11,850 --> 00:12:15,210
as change that just that section right

243
00:12:13,620 --> 00:12:18,390
we weren't trying to rewrite the Taira

244
00:12:15,210 --> 00:12:21,990
BIOS that would have taken some too much

245
00:12:18,390 --> 00:12:25,230
time so we needed to just reset that bit

246
00:12:21,990 --> 00:12:27,990
but after several tests we noticed that

247
00:12:25,230 --> 00:12:29,279
the more bit was placed in different

248
00:12:27,990 --> 00:12:34,949
sections of the memory

249
00:12:29,279 --> 00:12:36,509
so we weren't able to essentially create

250
00:12:34,949 --> 00:12:39,540
a script we weren't able to set

251
00:12:36,509 --> 00:12:43,110
something where okay just focus on

252
00:12:39,540 --> 00:12:47,849
memory on the specific memory address we

253
00:12:43,110 --> 00:12:50,519
had to find a way to change the bit in

254
00:12:47,850 --> 00:12:52,529
essentially in a range which could have

255
00:12:50,519 --> 00:12:55,110
found in this particular range of memory

256
00:12:52,529 --> 00:12:57,329
so again mentioned flashing the Taira

257
00:12:55,110 --> 00:13:00,120
bios was not an option it was like 16

258
00:12:57,329 --> 00:13:00,719
bag which took two to three to four

259
00:13:00,120 --> 00:13:03,180
minutes

260
00:13:00,720 --> 00:13:05,309
by that time vias would have warmed up

261
00:13:03,180 --> 00:13:08,519
and or the RAM chip would have weren't

262
00:13:05,309 --> 00:13:10,800
warmed up and most of the resident

263
00:13:08,519 --> 00:13:16,559
memory would have would have been gone

264
00:13:10,800 --> 00:13:19,829
by now so our plan or our approach was

265
00:13:16,559 --> 00:13:22,410
to actually flash a subsection of the

266
00:13:19,829 --> 00:13:25,709
BIOS that covered the more bit right so

267
00:13:22,410 --> 00:13:27,719
we what we did is we we reset the system

268
00:13:25,709 --> 00:13:29,969
a couple times read the BIOS information

269
00:13:27,720 --> 00:13:32,819
multiple times and then just identified

270
00:13:29,970 --> 00:13:36,540
where the more bit fell within a

271
00:13:32,819 --> 00:13:40,500
particular range of the memory in the

272
00:13:36,540 --> 00:13:43,920
BIOS chip so that the memory address we

273
00:13:40,500 --> 00:13:47,879
found that we can overwrite took about

274
00:13:43,920 --> 00:13:51,420
10 seconds so and again this is a this

275
00:13:47,879 --> 00:13:54,720
is a myself using the UEFI tool to

276
00:13:51,420 --> 00:13:58,019
identify the more bit as you can see

277
00:13:54,720 --> 00:14:00,360
this is essentially a BIOS dump at this

278
00:13:58,019 --> 00:14:03,899
moment the BIOS or sorry that the bit is

279
00:14:00,360 --> 00:14:06,600
set to 0 1 which is essentially set to

280
00:14:03,899 --> 00:14:11,069
on next boot to clear the memory right

281
00:14:06,600 --> 00:14:13,199
so again it this wasn't if it was easy

282
00:14:11,069 --> 00:14:14,729
enough if this bit was always in the

283
00:14:13,199 --> 00:14:17,069
same section because we just could have

284
00:14:14,730 --> 00:14:18,980
easily just looked at the memory address

285
00:14:17,069 --> 00:14:22,378
and say I want to rewrite that address

286
00:14:18,980 --> 00:14:24,240
set it to 0 0 be done within a few

287
00:14:22,379 --> 00:14:28,379
milliseconds we would have gone into

288
00:14:24,240 --> 00:14:30,209
booting the OS but again that wasn't

289
00:14:28,379 --> 00:14:32,309
available Oh since most of the memory

290
00:14:30,209 --> 00:14:34,589
fell under multiple or that more bit

291
00:14:32,309 --> 00:14:37,199
after every reboot fell into different

292
00:14:34,589 --> 00:14:39,120
sections in a subcategory so we had to

293
00:14:37,199 --> 00:14:41,329
take the approach that we essentially

294
00:14:39,120 --> 00:14:41,329
had a

295
00:14:41,770 --> 00:14:48,880
essentially had to you know flash a

296
00:14:46,750 --> 00:14:51,010
subsection of the memory and not not the

297
00:14:48,880 --> 00:14:52,450
entire memory or sorry subsection of the

298
00:14:51,010 --> 00:14:56,050
memory not the specific memory because I

299
00:14:52,450 --> 00:15:01,020
get it moved and actually I can share a

300
00:14:56,050 --> 00:15:01,020
quick video of me this was the initial

301
00:15:04,350 --> 00:15:10,330
this was Maya one of the first attempts

302
00:15:07,630 --> 00:15:11,439
this was actually getting a little

303
00:15:10,330 --> 00:15:17,320
carried away I don't know if you guys

304
00:15:11,440 --> 00:15:19,000
can see the video but this is me getting

305
00:15:17,320 --> 00:15:22,990
a little carried away with compressed

306
00:15:19,000 --> 00:15:24,610
air the OS on there is actually not Arch

307
00:15:22,990 --> 00:15:28,390
Linux I know this was my first attempt

308
00:15:24,610 --> 00:15:33,640
it was a full GUI that is there's that

309
00:15:28,390 --> 00:15:35,500
Corsair GTX on that memory while I was

310
00:15:33,640 --> 00:15:37,990
doing the acquisition and the

311
00:15:35,500 --> 00:15:41,820
acquisition only took about twenty ten

312
00:15:37,990 --> 00:15:47,020
to 20 seconds on once we got it down to

313
00:15:41,820 --> 00:15:50,500
leveraging Arch Linux in you know

314
00:15:47,020 --> 00:15:52,030
stripped down and here's what the

315
00:15:50,500 --> 00:15:55,030
ultimate attack looked like right so

316
00:15:52,030 --> 00:15:57,310
here's our Arch Linux at boot there's a

317
00:15:55,030 --> 00:16:00,459
service at or there's a service that

318
00:15:57,310 --> 00:16:02,890
runs essentially will launch lime

319
00:16:00,460 --> 00:16:07,300
acquire the memory and dump it straight

320
00:16:02,890 --> 00:16:10,050
into the section inside the the core

321
00:16:07,300 --> 00:16:14,829
shared GTX which is also the the same

322
00:16:10,050 --> 00:16:17,620
USB we use to to to launch the the

323
00:16:14,830 --> 00:16:20,440
portable or to launch our clinics or to

324
00:16:17,620 --> 00:16:23,860
boot large Linux so again this is the

325
00:16:20,440 --> 00:16:27,720
the test probes kind of crimper clamping

326
00:16:23,860 --> 00:16:31,120
on to the BIOS chip here's the BIOS

327
00:16:27,720 --> 00:16:32,890
reader and writer one in my laptop so my

328
00:16:31,120 --> 00:16:38,620
laptop was used to essentially have

329
00:16:32,890 --> 00:16:41,020
pre-programmed commands to run run the

330
00:16:38,620 --> 00:16:43,360
programming software to write the

331
00:16:41,020 --> 00:16:45,670
specific bit and again what we found is

332
00:16:43,360 --> 00:16:48,310
actually looking at other laptops so

333
00:16:45,670 --> 00:16:51,610
this was again this was our target this

334
00:16:48,310 --> 00:16:53,760
HP elite notebook was the target however

335
00:16:51,610 --> 00:16:56,140
I did look at a couple other

336
00:16:53,760 --> 00:16:58,540
manufacturers and BIOS

337
00:16:56,140 --> 00:17:00,610
what we found is not all of them are the

338
00:16:58,540 --> 00:17:02,349
same in fact some of them saved that

339
00:17:00,610 --> 00:17:04,660
more bit to the same location which

340
00:17:02,350 --> 00:17:07,349
would have made it a hell of a lot

341
00:17:04,660 --> 00:17:11,670
easier for us to to launch this attack

342
00:17:07,349 --> 00:17:13,089
but ultimately was it a success

343
00:17:11,670 --> 00:17:17,050
unfortunately not

344
00:17:13,089 --> 00:17:18,700
we did find multiple I aSG's however

345
00:17:17,050 --> 00:17:21,250
none of them were able to decrypt the

346
00:17:18,700 --> 00:17:23,770
drive I think could have been there's a

347
00:17:21,250 --> 00:17:24,970
new there's number of way a number of

348
00:17:23,770 --> 00:17:28,629
reasons this could have been right there

349
00:17:24,970 --> 00:17:30,640
the most most obvious one right that you

350
00:17:28,630 --> 00:17:34,900
probably didn't stay resident very much

351
00:17:30,640 --> 00:17:37,690
a memory or the TPM module you know

352
00:17:34,900 --> 00:17:39,400
clear that section of memory right so it

353
00:17:37,690 --> 00:17:43,090
could have been a number of things too

354
00:17:39,400 --> 00:17:48,820
that could have prevented us from from

355
00:17:43,090 --> 00:17:51,070
getting that those keys so that we

356
00:17:48,820 --> 00:17:54,370
regrouped and kind of stepped back and

357
00:17:51,070 --> 00:17:58,120
thought of you know our our next

358
00:17:54,370 --> 00:18:02,110
approach and what we should do and again

359
00:17:58,120 --> 00:18:03,489
this is BitLocker TPM only so we when

360
00:18:02,110 --> 00:18:06,340
you boot it the Box you can boot into

361
00:18:03,490 --> 00:18:08,410
the OS but you couldn't touch anything

362
00:18:06,340 --> 00:18:13,300
in the you're essentially just staring

363
00:18:08,410 --> 00:18:15,250
at a login screen and you know there's

364
00:18:13,300 --> 00:18:18,490
no network access you can get it on the

365
00:18:15,250 --> 00:18:21,330
network but you can talk to it it wasn't

366
00:18:18,490 --> 00:18:24,310
talking to anything we we tried doing

367
00:18:21,330 --> 00:18:26,350
you know looking at DNS requests or any

368
00:18:24,310 --> 00:18:30,030
calls going out is very little as

369
00:18:26,350 --> 00:18:34,020
there's nobody logged in very little

370
00:18:30,030 --> 00:18:37,960
applications running prior to login so

371
00:18:34,020 --> 00:18:40,720
the essentially the approach after the

372
00:18:37,960 --> 00:18:42,850
regroup is well why don't we take a

373
00:18:40,720 --> 00:18:48,010
different approach and maybe look at

374
00:18:42,850 --> 00:18:50,260
exploiting other things so the that

375
00:18:48,010 --> 00:18:53,950
second approach was the the DMA attack

376
00:18:50,260 --> 00:18:55,930
or the direct memory access to

377
00:18:53,950 --> 00:18:59,250
essentially to manipulate memory on the

378
00:18:55,930 --> 00:19:01,660
while the system is on and booted and

379
00:18:59,250 --> 00:19:06,340
take control or you know make changes

380
00:19:01,660 --> 00:19:10,080
readwrite on the OS this is again not a

381
00:19:06,340 --> 00:19:12,300
new attack this is back in 2012

382
00:19:10,080 --> 00:19:15,240
and if you guys remember there was a a

383
00:19:12,300 --> 00:19:17,250
tool that was released and I actually

384
00:19:15,240 --> 00:19:20,850
didn't write the gentleman's name here

385
00:19:17,250 --> 00:19:23,340
but inception was the name of the the

386
00:19:20,850 --> 00:19:26,629
tool it mainly focused on the firewire

387
00:19:23,340 --> 00:19:30,480
but it used essentially you leveraged

388
00:19:26,630 --> 00:19:32,750
firewire to talk directly into or use

389
00:19:30,480 --> 00:19:36,480
DMA and talk directly in a memory and

390
00:19:32,750 --> 00:19:38,370
essentially readwrite memory bits so

391
00:19:36,480 --> 00:19:43,710
what that means is you can essentially

392
00:19:38,370 --> 00:19:45,840
take plug in a device that interacts

393
00:19:43,710 --> 00:19:48,810
with that firewire you know look for

394
00:19:45,840 --> 00:19:52,020
specific three strings or information in

395
00:19:48,810 --> 00:19:53,879
memory and then change that section to

396
00:19:52,020 --> 00:19:56,940
whatever so that means you know if you

397
00:19:53,880 --> 00:20:00,510
can locate the section that stores the

398
00:19:56,940 --> 00:20:02,360
password in memory or the hash you can

399
00:20:00,510 --> 00:20:04,920
change the hash to something you know or

400
00:20:02,360 --> 00:20:08,580
just clear it all together and then you

401
00:20:04,920 --> 00:20:10,140
know simply just log into the system but

402
00:20:08,580 --> 00:20:13,439
again that that that attack has been

403
00:20:10,140 --> 00:20:16,050
mitigated fairly um actually pretty

404
00:20:13,440 --> 00:20:18,540
reser shortly after that I think within

405
00:20:16,050 --> 00:20:21,570
a year so that attack was was mitigated

406
00:20:18,540 --> 00:20:26,550
by most most os's which prevented

407
00:20:21,570 --> 00:20:28,740
firewire access into DMA without

408
00:20:26,550 --> 00:20:30,659
actually approval right so when you plug

409
00:20:28,740 --> 00:20:31,950
it in you get a little pop-up says you

410
00:20:30,660 --> 00:20:34,980
know you want to give permissions and

411
00:20:31,950 --> 00:20:38,070
you hit OK right so that that's been

412
00:20:34,980 --> 00:20:41,190
negative for fire work but but what

413
00:20:38,070 --> 00:20:43,820
about this other tool from and I'm

414
00:20:41,190 --> 00:20:47,280
probably butchering his name all frisk

415
00:20:43,820 --> 00:20:50,129
which is PCI leach and this actually

416
00:20:47,280 --> 00:20:54,840
leverages PCIe to interact with memory

417
00:20:50,130 --> 00:20:57,030
same same same approach uses DMA the the

418
00:20:54,840 --> 00:21:00,120
neat thing about this it used common

419
00:20:57,030 --> 00:21:04,020
interfaces or common PCI interfaces like

420
00:21:00,120 --> 00:21:06,570
thunderbolt em two slots Express card or

421
00:21:04,020 --> 00:21:10,560
even mini PCIe since we lured we were

422
00:21:06,570 --> 00:21:12,030
dealing with with the laptop one of the

423
00:21:10,560 --> 00:21:15,659
two things we could have used was

424
00:21:12,030 --> 00:21:18,000
Express card which unfortunately if I

425
00:21:15,660 --> 00:21:20,190
remember correctly Express the 10/40 did

426
00:21:18,000 --> 00:21:22,740
not have an Express card slot

427
00:21:20,190 --> 00:21:24,540
however it did have an m2 slot actually

428
00:21:22,740 --> 00:21:28,890
I had a few

429
00:21:24,540 --> 00:21:30,600
when for the one for the drive which

430
00:21:28,890 --> 00:21:32,460
unfortunately we couldn't use because we

431
00:21:30,600 --> 00:21:35,520
needed the drive on the system be able

432
00:21:32,460 --> 00:21:39,900
to launch the attack the other one was

433
00:21:35,520 --> 00:21:43,139
actually another section in another

434
00:21:39,900 --> 00:21:48,870
peripheral which was the wireless card

435
00:21:43,140 --> 00:21:51,150
or the wireless m2 adapter that we can

436
00:21:48,870 --> 00:21:53,939
leverage to to launch or to essentially

437
00:21:51,150 --> 00:21:56,700
borrow that to tie into and get access

438
00:21:53,940 --> 00:21:59,910
to the to to memory so what kind of

439
00:21:56,700 --> 00:22:03,480
countermeasures are are there for their

440
00:21:59,910 --> 00:22:03,840
DMA or for this this attack well

441
00:22:03,480 --> 00:22:08,630
actually

442
00:22:03,840 --> 00:22:11,459
Microsoft has the ability to do this and

443
00:22:08,630 --> 00:22:15,060
believe the it's actually introduced in

444
00:22:11,460 --> 00:22:17,550
1809 Windows 10 but it's still not

445
00:22:15,060 --> 00:22:19,980
disabled not enabled by default it is a

446
00:22:17,550 --> 00:22:22,050
name you can enable this through policy

447
00:22:19,980 --> 00:22:23,280
I believe it's the V I should have

448
00:22:22,050 --> 00:22:26,730
provided more information on it but it's

449
00:22:23,280 --> 00:22:28,230
a VSS I don't remember these what the

450
00:22:26,730 --> 00:22:30,660
acronym actually stands for but

451
00:22:28,230 --> 00:22:33,510
essentially you can block disable hot

452
00:22:30,660 --> 00:22:36,000
pluggable PCI to downstream ports where

453
00:22:33,510 --> 00:22:39,150
the computers locked and again this is

454
00:22:36,000 --> 00:22:42,870
available to a group policy so if your

455
00:22:39,150 --> 00:22:44,520
organization or industry is concerned

456
00:22:42,870 --> 00:22:48,600
with this kind of attack definitely

457
00:22:44,520 --> 00:22:51,379
recommend looking into that the other

458
00:22:48,600 --> 00:22:53,490
thing is having virtualization enabled

459
00:22:51,380 --> 00:22:57,150
which could prevent access to certain

460
00:22:53,490 --> 00:23:00,120
sections of the RAM but again this is

461
00:22:57,150 --> 00:23:02,190
configurable through bios and as we all

462
00:23:00,120 --> 00:23:04,379
know you can get into the bios pretty

463
00:23:02,190 --> 00:23:07,410
much if you have physical access to box

464
00:23:04,380 --> 00:23:10,260
you can get X to the BIOS if the BIOS

465
00:23:07,410 --> 00:23:13,140
has a password most manufacturers either

466
00:23:10,260 --> 00:23:16,200
have a hard-coded password or there's a

467
00:23:13,140 --> 00:23:20,270
method to clear the BIOS or clear the

468
00:23:16,200 --> 00:23:24,330
bios password through a simple you know

469
00:23:20,270 --> 00:23:27,030
keister key combination or shorten a

470
00:23:24,330 --> 00:23:30,149
couple pins in the motherboard right so

471
00:23:27,030 --> 00:23:34,379
that can easily be disabled which we did

472
00:23:30,150 --> 00:23:36,790
and for this device actually this the HP

473
00:23:34,380 --> 00:23:39,340
EliteBook elite book did not have

474
00:23:36,790 --> 00:23:42,070
a bios password so we were able to

475
00:23:39,340 --> 00:23:44,740
simply disable the virtualization we

476
00:23:42,070 --> 00:23:46,389
didn't have to worry about the the

477
00:23:44,740 --> 00:23:48,130
countermeasure the mic the OS

478
00:23:46,390 --> 00:23:49,570
countermeasure being enabled as we had

479
00:23:48,130 --> 00:23:51,850
verified with the organization's they

480
00:23:49,570 --> 00:23:56,919
did not have that enabled in this

481
00:23:51,850 --> 00:23:59,020
picture I actually showed the the empty

482
00:23:56,920 --> 00:24:01,120
slot that was leveraged to to launch the

483
00:23:59,020 --> 00:24:02,889
attack so again this is the wireless

484
00:24:01,120 --> 00:24:07,360
card as you can see it's got the

485
00:24:02,890 --> 00:24:10,990
antennas still attached to it so one

486
00:24:07,360 --> 00:24:13,060
important thing is it has to be a card

487
00:24:10,990 --> 00:24:17,890
that supports PCI our m2 slot that

488
00:24:13,060 --> 00:24:21,159
supports BCA in this this example we had

489
00:24:17,890 --> 00:24:23,460
an AE slot m2 slot that we were able to

490
00:24:21,160 --> 00:24:26,200
leverage

491
00:24:23,460 --> 00:24:33,630
here's another years again our attacks

492
00:24:26,200 --> 00:24:37,180
set up where we used the again this is a

493
00:24:33,630 --> 00:24:41,290
USB actually some step back sorry this

494
00:24:37,180 --> 00:24:45,220
is our set up for PCI leach in order to

495
00:24:41,290 --> 00:24:46,720
interact with the PCIe there needs to be

496
00:24:45,220 --> 00:24:49,110
Hardware right so the hardware in this

497
00:24:46,720 --> 00:24:51,670
situation was a USB development board

498
00:24:49,110 --> 00:24:55,330
it's a mini PC a USB development board

499
00:24:51,670 --> 00:24:57,880
USB 3380 it's actually fairly

500
00:24:55,330 --> 00:25:00,490
inexpensive I believe we paid about a

501
00:24:57,880 --> 00:25:04,250
hundred and fifty dollars shipped

502
00:25:00,490 --> 00:25:05,430
actually we got it like next day locally

503
00:25:04,250 --> 00:25:10,870
[Music]

504
00:25:05,430 --> 00:25:14,920
and the we had a m2p two mini PCIe

505
00:25:10,870 --> 00:25:18,159
adapter here so again this is m2 the

506
00:25:14,920 --> 00:25:20,560
board is PCIe or mini PC to be exact so

507
00:25:18,160 --> 00:25:24,220
this this whole ribbon is essentially a

508
00:25:20,560 --> 00:25:27,399
mini PCIe 2m to essentially make sure we

509
00:25:24,220 --> 00:25:29,590
got the right form factor there one

510
00:25:27,400 --> 00:25:32,800
drawback to leverage in the USB 3380

511
00:25:29,590 --> 00:25:35,919
it is limited to four gigs of memory

512
00:25:32,800 --> 00:25:40,990
acquisition luckily this laptop only had

513
00:25:35,920 --> 00:25:44,890
four gigs of memory again if you have a

514
00:25:40,990 --> 00:25:46,360
laptop to have that has more than that

515
00:25:44,890 --> 00:25:50,200
there's more there's various things you

516
00:25:46,360 --> 00:25:51,939
can do one thing is there there's other

517
00:25:50,200 --> 00:25:53,950
devices that are available that you can

518
00:25:51,940 --> 00:25:57,430
acquire someone a little bit more

519
00:25:53,950 --> 00:26:00,690
expensive however there is benefits to

520
00:25:57,430 --> 00:26:03,100
them you can purchase a FPGA there's a

521
00:26:00,690 --> 00:26:07,510
I'll share the link here but there's a

522
00:26:03,100 --> 00:26:10,230
on the github page for PC aah there's a

523
00:26:07,510 --> 00:26:12,790
whole list of hardware that's supported

524
00:26:10,230 --> 00:26:15,090
some of them are a little bit pricey but

525
00:26:12,790 --> 00:26:18,399
they do give you faster reads and writes

526
00:26:15,090 --> 00:26:23,320
and they give you a limited access to

527
00:26:18,400 --> 00:26:26,890
the memory one other thing you can do if

528
00:26:23,320 --> 00:26:29,639
if your device has more than 4 gigs if

529
00:26:26,890 --> 00:26:32,140
it has multiple memory cards just remove

530
00:26:29,640 --> 00:26:33,760
cards or replace cards until you get to

531
00:26:32,140 --> 00:26:35,110
the 4 memory right and then you're

532
00:26:33,760 --> 00:26:40,000
certain that you could read all sectors

533
00:26:35,110 --> 00:26:42,070
of memory but for our actually example

534
00:26:40,000 --> 00:26:43,390
here we actually didn't read need to

535
00:26:42,070 --> 00:26:44,919
read the entire memory right

536
00:26:43,390 --> 00:26:48,060
normally one assist of boots it starts

537
00:26:44,920 --> 00:26:51,400
writing to the first couple of sections

538
00:26:48,060 --> 00:26:54,070
of the memory so as long as we can read

539
00:26:51,400 --> 00:26:55,660
that section that has what we need we

540
00:26:54,070 --> 00:26:59,350
should be golden right we don't need the

541
00:26:55,660 --> 00:27:01,480
entire 16 gigs but again we were

542
00:26:59,350 --> 00:27:06,370
fortunate enough at this laptop had 4

543
00:27:01,480 --> 00:27:11,020
gigs of memory here's a next picture

544
00:27:06,370 --> 00:27:14,860
here is kind of a close-up on the on the

545
00:27:11,020 --> 00:27:18,970
USB 3380 again this is mini PCIe this

546
00:27:14,860 --> 00:27:22,979
other connector here is USB 3.0 which

547
00:27:18,970 --> 00:27:26,230
this side plugs into the attack system

548
00:27:22,980 --> 00:27:30,070
and is this essentially where you you

549
00:27:26,230 --> 00:27:34,300
launch the PCIe software our PCI each

550
00:27:30,070 --> 00:27:38,260
software - to interact with the memory

551
00:27:34,300 --> 00:27:41,980
and fortunately I had actually had a

552
00:27:38,260 --> 00:27:46,629
video of this and I misplaced it or I

553
00:27:41,980 --> 00:27:49,360
must have deleted it but uh it's nothing

554
00:27:46,630 --> 00:27:53,860
more than these following screenshots

555
00:27:49,360 --> 00:27:57,189
with actually helped show actual just

556
00:27:53,860 --> 00:28:00,280
the command I ran right so this is a as

557
00:27:57,190 --> 00:28:01,600
you can see this is Callie this is PCIe

558
00:28:00,280 --> 00:28:03,410
leach

559
00:28:01,600 --> 00:28:07,340
essentially just running the patch

560
00:28:03,410 --> 00:28:09,020
command what I did is I switched one of

561
00:28:07,340 --> 00:28:14,570
the signatures is to look for the sticky

562
00:28:09,020 --> 00:28:17,360
keys and switch the switch the sticky

563
00:28:14,570 --> 00:28:20,059
keys from presenting that you know that

564
00:28:17,360 --> 00:28:25,760
sticky key message to actually prompting

565
00:28:20,059 --> 00:28:29,240
a administrative command prompt again so

566
00:28:25,760 --> 00:28:31,790
after a clicking after you know entering

567
00:28:29,240 --> 00:28:34,940
or running the command it goes and looks

568
00:28:31,790 --> 00:28:37,730
for memory as you can see it got through

569
00:28:34,940 --> 00:28:41,240
about 10 percent of the memory before it

570
00:28:37,730 --> 00:28:44,480
found it and successfully patched the

571
00:28:41,240 --> 00:28:47,150
location after such I was able to just

572
00:28:44,480 --> 00:28:48,679
essentially go over the laptop while I

573
00:28:47,150 --> 00:28:50,990
was sitting on it was actually sitting

574
00:28:48,679 --> 00:28:53,600
and I'm still on that login screen and I

575
00:28:50,990 --> 00:28:55,480
just hold the shift key until I got a

576
00:28:53,600 --> 00:28:56,928
command propped up and at that point

577
00:28:55,480 --> 00:29:00,200
essentially I had an administrative

578
00:28:56,929 --> 00:29:02,600
logon or administrative shell or command

579
00:29:00,200 --> 00:29:04,250
prompt which allowed me to essentially

580
00:29:02,600 --> 00:29:06,770
create a user right this is not the

581
00:29:04,250 --> 00:29:08,300
actual screen as I can't show the users

582
00:29:06,770 --> 00:29:11,000
but this is essentially what we did

583
00:29:08,300 --> 00:29:12,800
right so we did the net user account the

584
00:29:11,000 --> 00:29:15,890
net user command to create a new user

585
00:29:12,800 --> 00:29:18,440
and then we added the user to the local

586
00:29:15,890 --> 00:29:20,230
admin and after that we were able to use

587
00:29:18,440 --> 00:29:24,980
that local admin to login to the laptop

588
00:29:20,230 --> 00:29:27,230
and essentially gain you know gain

589
00:29:24,980 --> 00:29:30,290
access to the data after which you know

590
00:29:27,230 --> 00:29:32,090
we we did with any during any

591
00:29:30,290 --> 00:29:35,690
Inquisition we copied we made a copy of

592
00:29:32,090 --> 00:29:37,850
the data just in case anything weird

593
00:29:35,690 --> 00:29:40,490
happen to another external drive and

594
00:29:37,850 --> 00:29:43,280
then provided the laptop and external

595
00:29:40,490 --> 00:29:46,640
drive to the customer again it was this

596
00:29:43,280 --> 00:29:52,639
a success yes it's actually a lot easier

597
00:29:46,640 --> 00:29:54,970
I would say by the time I received again

598
00:29:52,640 --> 00:29:58,160
we ordered the USB 3380

599
00:29:54,970 --> 00:30:00,410
during I think I was on a Tuesday we got

600
00:29:58,160 --> 00:30:02,780
it by Wednesday

601
00:30:00,410 --> 00:30:06,559
I didn't start working this up until

602
00:30:02,780 --> 00:30:10,580
5:00 p.m. when I got back home by like

603
00:30:06,559 --> 00:30:12,668
6:30 7 o'clock I had access to the

604
00:30:10,580 --> 00:30:15,320
laptop and was already copying data in

605
00:30:12,669 --> 00:30:19,880
comparison to my first attempt which was

606
00:30:15,320 --> 00:30:24,439
cold boot attack which essentially took

607
00:30:19,880 --> 00:30:27,140
me several days to do the you know do

608
00:30:24,440 --> 00:30:33,110
the research acquire the I had to order

609
00:30:27,140 --> 00:30:37,790
the BIOS programmer had ordered the that

610
00:30:33,110 --> 00:30:40,219
Corsair USB drive had to essentially

611
00:30:37,790 --> 00:30:41,830
build from scratch not build from

612
00:30:40,220 --> 00:30:45,560
scratch but essentially build a bootable

613
00:30:41,830 --> 00:30:48,050
Arch Linux USB create a script to

614
00:30:45,560 --> 00:30:50,240
automatically dump it and essentially

615
00:30:48,050 --> 00:30:52,610
that took me a few days to actually I

616
00:30:50,240 --> 00:30:54,620
mean a few after evenings I should say

617
00:30:52,610 --> 00:30:58,100
not not spending entire days but a few

618
00:30:54,620 --> 00:31:05,030
evenings of me essentially building this

619
00:30:58,100 --> 00:31:07,340
whole toolkit just to dump memory memory

620
00:31:05,030 --> 00:31:08,780
from key or keys from memory and then

621
00:31:07,340 --> 00:31:10,040
analyze and looking for the keys and

622
00:31:08,780 --> 00:31:13,480
then testing if those keys actually work

623
00:31:10,040 --> 00:31:16,970
and actually spent a few weeks on this

624
00:31:13,480 --> 00:31:20,630
this DMA attack was kind of our last

625
00:31:16,970 --> 00:31:22,190
resort and actually was very successful

626
00:31:20,630 --> 00:31:25,550
I kind of wish we would have gone that

627
00:31:22,190 --> 00:31:26,750
route my initial thought was that this

628
00:31:25,550 --> 00:31:29,419
was going to be a bit more expensive

629
00:31:26,750 --> 00:31:32,360
actually being price was actually being

630
00:31:29,420 --> 00:31:38,480
on par right after factoring and the

631
00:31:32,360 --> 00:31:40,580
programmer the USB the Corsair USB and

632
00:31:38,480 --> 00:31:45,470
you know not even factoring in time

633
00:31:40,580 --> 00:31:47,600
spent I think going down the DMA a path

634
00:31:45,470 --> 00:31:50,390
would have been a lot I mean it was a

635
00:31:47,600 --> 00:31:56,000
lot faster maybe just to recap what the

636
00:31:50,390 --> 00:31:59,060
attack was essentially we took a we took

637
00:31:56,000 --> 00:32:01,400
that USB 33 development board we flashed

638
00:31:59,060 --> 00:32:02,770
it with the PC a leach firmware and that

639
00:32:01,400 --> 00:32:05,630
firmer is available again through

640
00:32:02,770 --> 00:32:10,430
instructions are available through old

641
00:32:05,630 --> 00:32:12,410
frisks PC LH github page or he provides

642
00:32:10,430 --> 00:32:15,410
you the firmware for it for this board

643
00:32:12,410 --> 00:32:18,560
so you put plug it into your attack

644
00:32:15,410 --> 00:32:21,500
system flash it with the PCH firmware

645
00:32:18,560 --> 00:32:22,510
you know unplug it power back in plug it

646
00:32:21,500 --> 00:32:25,100
into the system

647
00:32:22,510 --> 00:32:28,730
open up PCI leach on the attack system

648
00:32:25,100 --> 00:32:31,100
plugging into USB 3.0

649
00:32:28,730 --> 00:32:33,020
and then boot the system up and at that

650
00:32:31,100 --> 00:32:35,418
point you can just launch the PC you

651
00:32:33,020 --> 00:32:38,150
leave software on the tech system to

652
00:32:35,419 --> 00:32:39,620
either patch memory dump memory or

653
00:32:38,150 --> 00:32:42,200
whatever you need to do in our in our

654
00:32:39,620 --> 00:32:45,189
situation we we looked for the sticky

655
00:32:42,200 --> 00:32:50,510
key command and replaced it with a

656
00:32:45,190 --> 00:32:53,030
command prompt and essentially after

657
00:32:50,510 --> 00:32:55,940
that we were able to get a command line

658
00:32:53,030 --> 00:32:58,820
or administrative command prompt where

659
00:32:55,940 --> 00:33:03,080
we entered creating a user and added

660
00:32:58,820 --> 00:33:05,149
that users to local admins again you

661
00:33:03,080 --> 00:33:09,470
know giving credit where credit's due a

662
00:33:05,150 --> 00:33:12,230
lot of the the kind of the path I took

663
00:33:09,470 --> 00:33:15,490
for the cold boot attack was based

664
00:33:12,230 --> 00:33:20,660
heavily on the research done by f-secure

665
00:33:15,490 --> 00:33:21,950
here's a quick little that there's an

666
00:33:20,660 --> 00:33:23,630
article that talks about their the

667
00:33:21,950 --> 00:33:24,730
research and some other presentations

668
00:33:23,630 --> 00:33:27,610
they did it around the cold boot attack

669
00:33:24,730 --> 00:33:30,290
fortunately they didn't share the the

670
00:33:27,610 --> 00:33:34,549
the bootable OS that they create that

671
00:33:30,290 --> 00:33:37,129
you leverage dump the memory however it

672
00:33:34,549 --> 00:33:39,980
looks it seemed like they were based on

673
00:33:37,130 --> 00:33:42,919
the the notes I saw and the research and

674
00:33:39,980 --> 00:33:44,360
some of the presentations and didn't

675
00:33:42,919 --> 00:33:46,640
look too much different than what I was

676
00:33:44,360 --> 00:33:50,030
doing with arch linux and lime for the

677
00:33:46,640 --> 00:33:51,740
memory acquisition and again thanks to

678
00:33:50,030 --> 00:33:54,918
old frisk for PC a leech

679
00:33:51,740 --> 00:33:58,450
that's available on github with a list

680
00:33:54,919 --> 00:34:02,510
of supported hardware and had a you know

681
00:33:58,450 --> 00:34:04,400
definitely recommend picking up one of

682
00:34:02,510 --> 00:34:07,389
these devices probably recommend going

683
00:34:04,400 --> 00:34:11,389
for one that doesn't have a four gig

684
00:34:07,389 --> 00:34:12,949
limitation again our our we went with

685
00:34:11,389 --> 00:34:15,889
that four gig just because it was our

686
00:34:12,949 --> 00:34:17,658
first time trying it was a fairly

687
00:34:15,889 --> 00:34:18,889
inexpensive comparatively

688
00:34:17,659 --> 00:34:22,820
[Music]

689
00:34:18,889 --> 00:34:25,490
and but again I'd recommend having any

690
00:34:22,820 --> 00:34:29,060
securitisation or even organization

691
00:34:25,489 --> 00:34:32,839
right having one of these as a means to

692
00:34:29,060 --> 00:34:34,149
get him back into systems but again you

693
00:34:32,840 --> 00:34:38,240
know thank you

694
00:34:34,149 --> 00:34:40,638
which picture be again thank you for for

695
00:34:38,239 --> 00:34:41,810
the time again my name is Miguel

696
00:34:40,639 --> 00:34:50,510
Martinez

697
00:34:41,810 --> 00:34:55,790
at DEFCON also I also might call sign

698
00:34:50,510 --> 00:34:58,130
here w6 bit or EIT again I'm a CTO tech

699
00:34:55,790 --> 00:35:02,450
refresh you can find us at tech hard at

700
00:34:58,130 --> 00:35:04,820
i/o also if you guys are in if know

701
00:35:02,450 --> 00:35:06,319
anybody in the Southern California area

702
00:35:04,820 --> 00:35:08,630
that's interesting

703
00:35:06,320 --> 00:35:10,940
interested in joining or is in the

704
00:35:08,630 --> 00:35:14,000
InfoSec community we'd love to have

705
00:35:10,940 --> 00:35:16,570
people join us fortunately by current

706
00:35:14,000 --> 00:35:19,040
situations we're not hosting on-site

707
00:35:16,570 --> 00:35:21,110
meetings but again you can find our

708
00:35:19,040 --> 00:35:25,520
derbycon community Inland Empire chapter

709
00:35:21,110 --> 00:35:27,140
at Derby calm ie calm again I'll pause

710
00:35:25,520 --> 00:35:32,200
there if see if anybody has any

711
00:35:27,140 --> 00:35:32,200
questions or comments

712
00:35:38,340 --> 00:35:54,580
and people can't take themselves off me

713
00:35:40,990 --> 00:35:56,169
to ask a question awesome okay no

714
00:35:54,580 --> 00:35:59,590
questions great yeah I appreciate

715
00:35:56,170 --> 00:36:04,420
everybody's time and hope everybody has

716
00:35:59,590 --> 00:36:14,230
a good a good afternoon and sorry was

717
00:36:04,420 --> 00:36:22,000
there a question there how long did you

718
00:36:14,230 --> 00:36:25,120
say it took you to say after flashing

719
00:36:22,000 --> 00:36:27,940
getting the drivers I would say between

720
00:36:25,120 --> 00:36:29,680
an hour from like I had the car an hour

721
00:36:27,940 --> 00:36:42,580
and a half to two hours by the time I

722
00:36:29,680 --> 00:36:44,500
had the car I would say I mean it's you

723
00:36:42,580 --> 00:36:47,319
would have probably have to understand a

724
00:36:44,500 --> 00:36:49,210
little bit of hardware um definitely

725
00:36:47,320 --> 00:36:54,550
some Linux background and understanding

726
00:36:49,210 --> 00:36:59,380
and how you just kind of I mean I would

727
00:36:54,550 --> 00:37:01,090
say like very hard high-level just kind

728
00:36:59,380 --> 00:37:02,620
of know enough to understand how memory

729
00:37:01,090 --> 00:37:06,490
works and stuff I think what I showed

730
00:37:02,620 --> 00:37:09,850
here is pretty much that that command is

731
00:37:06,490 --> 00:37:12,209
pretty much how you run it the risk

732
00:37:09,850 --> 00:37:15,940
makes it really easy to to run this I

733
00:37:12,210 --> 00:37:18,490
think the hardest part was flashing the

734
00:37:15,940 --> 00:37:20,740
the card right because the instructions

735
00:37:18,490 --> 00:37:23,500
were were a little bit weak on flashing

736
00:37:20,740 --> 00:37:27,609
the USB 3380 or maybe I just wasn't

737
00:37:23,500 --> 00:37:31,060
reading the right instructions but from

738
00:37:27,610 --> 00:37:33,720
what my experience is I thought the card

739
00:37:31,060 --> 00:37:36,100
was gonna pull power from the USB 3 port

740
00:37:33,720 --> 00:37:38,919
but in fact it actually pulls power from

741
00:37:36,100 --> 00:37:42,730
the PCIe side so you need to have it in

742
00:37:38,920 --> 00:37:45,790
the PCIe you need to have it in order to

743
00:37:42,730 --> 00:37:47,500
flash it you need it in the PCIe system

744
00:37:45,790 --> 00:37:49,240
that you can access to flash at first

745
00:37:47,500 --> 00:37:51,260
then you can use it to attack but once

746
00:37:49,240 --> 00:37:58,020
you flash it you can use it anytime

747
00:37:51,260 --> 00:38:02,420
have you tried it with the TV I have not

748
00:37:58,020 --> 00:38:05,250
but it will probably uh yeah I have not

749
00:38:02,420 --> 00:38:08,820
most likely won't work again there's

750
00:38:05,250 --> 00:38:12,120
there's a few other attack methods that

751
00:38:08,820 --> 00:38:14,850
I didn't go into that I probably would

752
00:38:12,120 --> 00:38:19,140
have kind of got into which was like

753
00:38:14,850 --> 00:38:22,529
actually soldering into the the leads on

754
00:38:19,140 --> 00:38:25,170
the TPM chip and see if I could read it

755
00:38:22,530 --> 00:38:28,440
using like a logic analyzer as its

756
00:38:25,170 --> 00:38:34,350
talking to the you know to the to the

757
00:38:28,440 --> 00:38:36,210
board and stuff thanks yep thanks hello

758
00:38:34,350 --> 00:38:39,480
we will your slide to be made available

759
00:38:36,210 --> 00:38:42,570
I could definitely share the slides I

760
00:38:39,480 --> 00:38:44,790
can I could send you a copy the slides

761
00:38:42,570 --> 00:38:49,430
Mike and then and if you you have a

762
00:38:44,790 --> 00:38:49,430
method of sharing that

763
00:38:56,470 --> 00:39:02,390
sorry Mike were you there Mike yes well

764
00:39:01,190 --> 00:39:04,299
if you send the slides we'll make them

765
00:39:02,390 --> 00:39:09,348
available awesome thank you sir thank

766
00:39:04,299 --> 00:39:14,900
you great presentation

767
00:39:09,349 --> 00:39:18,549
thank you thank you yeah and you're

768
00:39:14,900 --> 00:39:20,839
welcome to reach out to me you can also

769
00:39:18,549 --> 00:39:23,029
send me an email if you guys have any

770
00:39:20,839 --> 00:39:26,509
questions Miguel de Martinez at tech

771
00:39:23,029 --> 00:39:28,609
refresh calm or you can just read

772
00:39:26,509 --> 00:39:32,210
probably find through our support portal

773
00:39:28,609 --> 00:39:34,640
to card that tech RI oh I'm always happy

774
00:39:32,210 --> 00:39:36,829
to help anybody he's looking for if

775
00:39:34,640 --> 00:39:40,118
they're trying to do this and they're

776
00:39:36,829 --> 00:39:40,119
stuck somewhere happy to help

