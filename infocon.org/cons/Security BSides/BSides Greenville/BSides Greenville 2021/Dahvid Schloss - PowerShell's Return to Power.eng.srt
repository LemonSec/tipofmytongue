1
00:00:05,600 --> 00:00:07,200
uh good morning everyone hopefully

2
00:00:07,200 --> 00:00:09,280
you're all hyped up on uh mountain dew

3
00:00:09,280 --> 00:00:11,040
or coffee or whatever it is that keeps

4
00:00:11,040 --> 00:00:13,200
you going in the morning um

5
00:00:13,200 --> 00:00:15,280
my name is david floss i'm here to talk

6
00:00:15,280 --> 00:00:16,800
to you about powershell

7
00:00:16,800 --> 00:00:18,160
a little bit about myself real quick

8
00:00:18,160 --> 00:00:20,400
though i am the uh offensive security

9
00:00:20,400 --> 00:00:22,560
lead for echelon cyber and risk

10
00:00:22,560 --> 00:00:26,560
basically what that means is any of our

11
00:00:26,560 --> 00:00:28,320
emulation of criminal activity like red

12
00:00:28,320 --> 00:00:30,240
teaming pen testing web app testing i

13
00:00:30,240 --> 00:00:32,800
run our company's

14
00:00:32,800 --> 00:00:35,040
section for that

15
00:00:35,040 --> 00:00:37,520
i come from a red team background in the

16
00:00:37,520 --> 00:00:39,600
private sector and then prior to that i

17
00:00:39,600 --> 00:00:41,840
was in a special operations unit for

18
00:00:41,840 --> 00:00:43,200
cyber

19
00:00:43,200 --> 00:00:47,200
so i got to do this stuff for for fun

20
00:00:47,200 --> 00:00:49,280
i have my linkedin up here in case you

21
00:00:49,280 --> 00:00:51,520
guys want to come check me out i post

22
00:00:51,520 --> 00:00:54,480
red team and pen test

23
00:00:54,480 --> 00:00:56,000
tips every week

24
00:00:56,000 --> 00:00:58,480
especially for october since it is cyber

25
00:00:58,480 --> 00:00:59,840
security month

26
00:00:59,840 --> 00:01:02,000
and then i do have a twitter it's at the

27
00:01:02,000 --> 00:01:04,720
beach loss but uh all i do is post memes

28
00:01:04,720 --> 00:01:06,240
there so if that's what you're looking

29
00:01:06,240 --> 00:01:09,680
for that's available there

30
00:01:09,680 --> 00:01:10,960
uh and just because we're a small

31
00:01:10,960 --> 00:01:12,560
company i want to shout out

32
00:01:12,560 --> 00:01:14,880
our company real quick we are a

33
00:01:14,880 --> 00:01:16,720
consulting firm in cyber security that

34
00:01:16,720 --> 00:01:18,960
does defensive offensive and advisory

35
00:01:18,960 --> 00:01:19,920
work

36
00:01:19,920 --> 00:01:21,920
but past that doesn't really uh not too

37
00:01:21,920 --> 00:01:24,080
important

38
00:01:24,080 --> 00:01:26,560
so what's today's goal today i want you

39
00:01:26,560 --> 00:01:28,400
guys to walk away with like this healthy

40
00:01:28,400 --> 00:01:30,079
dose of paranoia when it comes down to

41
00:01:30,079 --> 00:01:31,600
powershell

42
00:01:31,600 --> 00:01:32,560
i think it's pretty important

43
00:01:32,560 --> 00:01:34,240
considering the fact that over the

44
00:01:34,240 --> 00:01:35,920
course of the the last couple years

45
00:01:35,920 --> 00:01:37,600
we've kind of gone away from paying

46
00:01:37,600 --> 00:01:39,040
attention to

47
00:01:39,040 --> 00:01:41,040
powershell as a whole

48
00:01:41,040 --> 00:01:42,799
as everyone started moving over to

49
00:01:42,799 --> 00:01:47,040
c-sharp for their malicious binaries

50
00:01:47,040 --> 00:01:48,880
so how are we going to do that

51
00:01:48,880 --> 00:01:50,399
well first we're going to talk about

52
00:01:50,399 --> 00:01:52,240
like why i.t admins love it and why

53
00:01:52,240 --> 00:01:53,920
attackers love it kind of set the stage

54
00:01:53,920 --> 00:01:54,799
right

55
00:01:54,799 --> 00:01:56,719
and then we're gonna go into bypassing

56
00:01:56,719 --> 00:01:58,880
controls some of those are organic like

57
00:01:58,880 --> 00:02:00,560
science script execution amsi and white

58
00:02:00,560 --> 00:02:03,840
listing some of them are are not so

59
00:02:03,840 --> 00:02:07,759
organic um like uh an edr's enumeration

60
00:02:07,759 --> 00:02:09,679
alerts

61
00:02:09,679 --> 00:02:10,800
then we're going to wrap it up with some

62
00:02:10,800 --> 00:02:12,560
malware deployment

63
00:02:12,560 --> 00:02:13,599
and

64
00:02:13,599 --> 00:02:15,120
a few tips on how you can protect

65
00:02:15,120 --> 00:02:16,560
yourself

66
00:02:16,560 --> 00:02:18,000
let's jump into it

67
00:02:18,000 --> 00:02:19,920
so why do admins love it

68
00:02:19,920 --> 00:02:22,160
quite simply it's everywhere right it's

69
00:02:22,160 --> 00:02:24,640
on windows linux mac i've had it on my

70
00:02:24,640 --> 00:02:27,760
my mac machine i've had it on my linux

71
00:02:27,760 --> 00:02:30,000
administration machines it's perfect it

72
00:02:30,000 --> 00:02:32,800
has a really wide market share

73
00:02:32,800 --> 00:02:35,840
and it and it works across the board

74
00:02:35,840 --> 00:02:37,360
it's easy to use and learn this is

75
00:02:37,360 --> 00:02:38,800
actually one of the first applications

76
00:02:38,800 --> 00:02:40,879
or programming languages i've i learned

77
00:02:40,879 --> 00:02:42,239
or scripting language i guess in this

78
00:02:42,239 --> 00:02:43,519
case

79
00:02:43,519 --> 00:02:44,560
even before

80
00:02:44,560 --> 00:02:46,560
even for python

81
00:02:46,560 --> 00:02:48,800
and lastly it enables more functions

82
00:02:48,800 --> 00:02:50,480
around remote administration

83
00:02:50,480 --> 00:02:52,800
i originally started my career as an i.t

84
00:02:52,800 --> 00:02:53,760
admin

85
00:02:53,760 --> 00:02:55,599
um and powershell was taking functions

86
00:02:55,599 --> 00:02:57,599
that would normally take hours down to

87
00:02:57,599 --> 00:03:01,599
just a couple minutes to run

88
00:03:01,599 --> 00:03:04,720
so why do attackers love it well frankly

89
00:03:04,720 --> 00:03:06,720
it's everywhere right windows linux mac

90
00:03:06,720 --> 00:03:08,239
you can put it on your kali linux

91
00:03:08,239 --> 00:03:09,680
machine and

92
00:03:09,680 --> 00:03:12,400
just negate the need for impact to

93
00:03:12,400 --> 00:03:14,879
interface with a windows machine

94
00:03:14,879 --> 00:03:17,360
easy to use and learn everyone likes to

95
00:03:17,360 --> 00:03:20,640
bash on microsoft so there's a ton of

96
00:03:20,640 --> 00:03:22,560
resources out there for offensive

97
00:03:22,560 --> 00:03:23,680
security

98
00:03:23,680 --> 00:03:25,680
uh powershell

99
00:03:25,680 --> 00:03:27,680
scripting right

100
00:03:27,680 --> 00:03:29,120
and then it enables more functions

101
00:03:29,120 --> 00:03:31,680
around remote administration

102
00:03:31,680 --> 00:03:33,519
quite frankly when you look at it this

103
00:03:33,519 --> 00:03:36,480
way it really shows that the attackers

104
00:03:36,480 --> 00:03:39,040
have an advantage

105
00:03:39,040 --> 00:03:40,879
um i think what a lot of people just

106
00:03:40,879 --> 00:03:42,400
don't seem to realize is that if you

107
00:03:42,400 --> 00:03:44,560
gain access to powershell

108
00:03:44,560 --> 00:03:47,040
you can

109
00:03:47,040 --> 00:03:48,640
just run scripts from memory you can

110
00:03:48,640 --> 00:03:50,640
copy paste into the terminal

111
00:03:50,640 --> 00:03:52,959
uh you can import it via

112
00:03:52,959 --> 00:03:55,120
netweb requests there there is actually

113
00:03:55,120 --> 00:03:56,879
no need for

114
00:03:56,879 --> 00:03:59,680
scripts uh like mimikats from powershell

115
00:03:59,680 --> 00:04:01,439
or power view or any of that stuff to be

116
00:04:01,439 --> 00:04:03,519
on disk so it makes it very difficult

117
00:04:03,519 --> 00:04:06,000
for like signature based avs

118
00:04:06,000 --> 00:04:09,360
to detect this kind of activity

119
00:04:09,360 --> 00:04:12,000
additionally it's scriptable.net so this

120
00:04:12,000 --> 00:04:13,360
is the reason why we saw a lot of people

121
00:04:13,360 --> 00:04:15,280
go from powershell over to c sharp

122
00:04:15,280 --> 00:04:18,079
because it's basically the same thing

123
00:04:18,079 --> 00:04:19,759
and we'll get more into that later and

124
00:04:19,759 --> 00:04:22,000
then again organic security functions

125
00:04:22,000 --> 00:04:23,759
are always getting defeated people just

126
00:04:23,759 --> 00:04:25,199
love to on microsoft for some

127
00:04:25,199 --> 00:04:26,240
reason

128
00:04:26,240 --> 00:04:29,840
so they they find new ways of doing it

129
00:04:30,639 --> 00:04:32,960
um quite frankly

130
00:04:32,960 --> 00:04:35,919
like in about 95 of my engagements when

131
00:04:35,919 --> 00:04:37,680
i was still running as a red teamer

132
00:04:37,680 --> 00:04:40,240
powershell was the

133
00:04:40,240 --> 00:04:42,639
the the major factor in how we gained

134
00:04:42,639 --> 00:04:44,560
code execution or privilege escalation

135
00:04:44,560 --> 00:04:46,000
lateral movement

136
00:04:46,000 --> 00:04:48,400
just by it being there you open up a lot

137
00:04:48,400 --> 00:04:51,040
of avenues for attack from an attack

138
00:04:51,040 --> 00:04:53,680
from a threat actor

139
00:04:53,680 --> 00:04:54,880
so let's jump into some of the cool

140
00:04:54,880 --> 00:04:56,639
stuff now that we've kind of set the

141
00:04:56,639 --> 00:04:57,840
stage

142
00:04:57,840 --> 00:04:59,360
the first one is kind of it's going to

143
00:04:59,360 --> 00:05:01,199
make some some of you attackers out

144
00:05:01,199 --> 00:05:03,600
there uh roll your eyes and that is a

145
00:05:03,600 --> 00:05:06,080
sign script execution and the reason why

146
00:05:06,080 --> 00:05:07,280
the attackers are rolling their eyes

147
00:05:07,280 --> 00:05:08,880
right now is because this is not a

148
00:05:08,880 --> 00:05:10,479
security control

149
00:05:10,479 --> 00:05:13,520
uh but i bring it up here because

150
00:05:13,520 --> 00:05:15,280
a lot of my clients believe this is

151
00:05:15,280 --> 00:05:17,039
security control and if you read the

152
00:05:17,039 --> 00:05:18,960
documentation from microsoft they write

153
00:05:18,960 --> 00:05:21,199
it as it's a securing control for those

154
00:05:21,199 --> 00:05:22,240
who don't know

155
00:05:22,240 --> 00:05:24,400
script signing execution

156
00:05:24,400 --> 00:05:27,120
is just a policy that's placed into

157
00:05:27,120 --> 00:05:28,880
powershell that

158
00:05:28,880 --> 00:05:31,199
will force the the scripts that you're

159
00:05:31,199 --> 00:05:33,759
running to be signed or unsigned or

160
00:05:33,759 --> 00:05:35,280
self-signed right

161
00:05:35,280 --> 00:05:36,639
um

162
00:05:36,639 --> 00:05:37,919
and the reason why people think this is

163
00:05:37,919 --> 00:05:39,680
a security control in itself is that

164
00:05:39,680 --> 00:05:41,759
when you try to set execution policy

165
00:05:41,759 --> 00:05:43,680
which we can see in the screenshot

166
00:05:43,680 --> 00:05:45,759
uh to bypass it actually says nah you

167
00:05:45,759 --> 00:05:47,520
can't do that right especially if you're

168
00:05:47,520 --> 00:05:49,520
a low privileged user

169
00:05:49,520 --> 00:05:52,880
but the reason why this isn't like

170
00:05:52,880 --> 00:05:54,160
uh

171
00:05:54,160 --> 00:05:56,080
security control is is this right here

172
00:05:56,080 --> 00:05:57,919
uh it's quite simply easy to bypass by

173
00:05:57,919 --> 00:06:00,240
just executing powershell with the flag

174
00:06:00,240 --> 00:06:04,240
ep or execution policy and then bypass

175
00:06:04,240 --> 00:06:06,400
and then you have a nice little

176
00:06:06,400 --> 00:06:08,400
uh bypass terminal

177
00:06:08,400 --> 00:06:10,880
and something to note though is that is

178
00:06:10,880 --> 00:06:13,759
only for this terminal right um when

179
00:06:13,759 --> 00:06:16,080
you're doing the uh code execution of

180
00:06:16,080 --> 00:06:18,720
set execution policy within powershell

181
00:06:18,720 --> 00:06:20,479
you're trying to change a registry key

182
00:06:20,479 --> 00:06:23,360
in the htlm uh hive

183
00:06:23,360 --> 00:06:26,400
but when you just run powershell exe

184
00:06:26,400 --> 00:06:29,759
tech ep bypass then you're

185
00:06:29,759 --> 00:06:31,759
just setting it for that that one time

186
00:06:31,759 --> 00:06:32,880
terminal so if you close out a

187
00:06:32,880 --> 00:06:34,800
powershell it won't affect any other

188
00:06:34,800 --> 00:06:37,199
terminal on the system

189
00:06:37,199 --> 00:06:39,520
but it helps um

190
00:06:39,520 --> 00:06:40,720
again i just wanted to throw this out

191
00:06:40,720 --> 00:06:42,960
because it's really important uh don't

192
00:06:42,960 --> 00:06:45,120
treat this as a security control or stop

193
00:06:45,120 --> 00:06:48,560
trading as security control

194
00:06:48,560 --> 00:06:50,080
uh and that brings us into the cool

195
00:06:50,080 --> 00:06:51,360
stuff and this is going to be what a

196
00:06:51,360 --> 00:06:52,560
majority of the talk is going to be

197
00:06:52,560 --> 00:06:55,199
about which is bypassing amsi

198
00:06:55,199 --> 00:06:58,560
so amsi or i what i call amsi

199
00:06:58,560 --> 00:07:00,840
for short is the anti-malware scan

200
00:07:00,840 --> 00:07:02,960
interface it is a

201
00:07:02,960 --> 00:07:04,080
known

202
00:07:04,080 --> 00:07:06,960
known good hook into

203
00:07:06,960 --> 00:07:09,120
powershell and other scripting

204
00:07:09,120 --> 00:07:10,720
languages within

205
00:07:10,720 --> 00:07:13,199
microsoft for security products to use

206
00:07:13,199 --> 00:07:14,720
so they can monitor

207
00:07:14,720 --> 00:07:17,280
execution and like office macros windows

208
00:07:17,280 --> 00:07:19,599
script host things like that

209
00:07:19,599 --> 00:07:22,720
in powershell itself it it additionally

210
00:07:22,720 --> 00:07:23,759
will

211
00:07:23,759 --> 00:07:25,360
try to block malicious scripts and

212
00:07:25,360 --> 00:07:26,720
functions so

213
00:07:26,720 --> 00:07:29,520
the iex new object download string which

214
00:07:29,520 --> 00:07:32,560
is probably the most commonly used

215
00:07:32,560 --> 00:07:34,319
command to import malicious scripts into

216
00:07:34,319 --> 00:07:35,520
your network

217
00:07:35,520 --> 00:07:37,599
is just flat out blocked like amzi goes

218
00:07:37,599 --> 00:07:40,639
nah this this is too dangerous

219
00:07:40,639 --> 00:07:42,639
additionally

220
00:07:42,639 --> 00:07:44,639
strings like mimikats bloodhound power

221
00:07:44,639 --> 00:07:47,120
view even itself amsi utils is

222
00:07:47,120 --> 00:07:49,039
considered malicious in its eyes and

223
00:07:49,039 --> 00:07:50,479
it'll block you from being able to

224
00:07:50,479 --> 00:07:52,800
execute if it sees those strings

225
00:07:52,800 --> 00:07:55,440
so it's it's kind of nice um

226
00:07:55,440 --> 00:07:57,199
some known integrated antivirus

227
00:07:57,199 --> 00:07:59,599
applications here like mcafee sofas

228
00:07:59,599 --> 00:08:01,520
kaspersky windows defender kind of a duh

229
00:08:01,520 --> 00:08:03,599
there there's probably more i really

230
00:08:03,599 --> 00:08:05,440
didn't dig too deep into it uh to be

231
00:08:05,440 --> 00:08:07,360
honest with you uh but these are the

232
00:08:07,360 --> 00:08:08,879
ones that are openly admitting that they

233
00:08:08,879 --> 00:08:12,879
use amzie as part of their tool

234
00:08:12,879 --> 00:08:14,240
so

235
00:08:14,240 --> 00:08:15,840
here comes another really fun easy

236
00:08:15,840 --> 00:08:18,000
bypass

237
00:08:18,000 --> 00:08:19,759
powershell 2.0

238
00:08:19,759 --> 00:08:22,479
for those who don't know powershell 2.0

239
00:08:22,479 --> 00:08:25,759
is installed by default and

240
00:08:25,759 --> 00:08:28,160
even the newest versions of windows 10.

241
00:08:28,160 --> 00:08:30,479
and it has absolutely zero security

242
00:08:30,479 --> 00:08:32,640
functions uh which is why when you look

243
00:08:32,640 --> 00:08:36,880
at like matt graber's power view or

244
00:08:36,880 --> 00:08:38,479
other windows enumeration scripts

245
00:08:38,479 --> 00:08:40,080
they'll usually try to downgrade to

246
00:08:40,080 --> 00:08:42,559
powershell version 2.0 really quickly or

247
00:08:42,559 --> 00:08:44,320
right off the bat because then you don't

248
00:08:44,320 --> 00:08:45,680
have to worry about any of the security

249
00:08:45,680 --> 00:08:47,279
controls or script lock logging and

250
00:08:47,279 --> 00:08:48,959
things like that

251
00:08:48,959 --> 00:08:51,640
though to caveat all that

252
00:08:51,640 --> 00:08:54,880
dotnet2.net version 2.0 is required for

253
00:08:54,880 --> 00:08:57,600
powershell 2.0 to execute uh which

254
00:08:57,600 --> 00:08:59,519
doesn't come by default but if you're

255
00:08:59,519 --> 00:09:01,200
running old applications that require

256
00:09:01,200 --> 00:09:04,959
like.net 3.5 then net 2.0 is

257
00:09:04,959 --> 00:09:08,480
is bundled with that for some odd reason

258
00:09:08,480 --> 00:09:10,240
uh which is kind of weird but this is

259
00:09:10,240 --> 00:09:12,080
really easy to downgrade to

260
00:09:12,080 --> 00:09:13,440
in fact all it takes is a quick little

261
00:09:13,440 --> 00:09:14,640
screenshot i don't even have to show you

262
00:09:14,640 --> 00:09:17,680
a demo of what's going on um and the

263
00:09:17,680 --> 00:09:19,040
first command up at the top we're

264
00:09:19,040 --> 00:09:20,640
running ps version table to show you

265
00:09:20,640 --> 00:09:22,640
that we're running uh powershell version

266
00:09:22,640 --> 00:09:25,040
5.1 and then we're trying to echo ams

267
00:09:25,040 --> 00:09:27,200
utils this is like a test that we as

268
00:09:27,200 --> 00:09:29,519
attackers will use to see if amzi is

269
00:09:29,519 --> 00:09:32,080
still working

270
00:09:32,240 --> 00:09:34,480
uh and you can see that it doesn't like

271
00:09:34,480 --> 00:09:36,320
itself being called so it goes and

272
00:09:36,320 --> 00:09:38,600
blocks it but then you can just call

273
00:09:38,600 --> 00:09:41,440
powershell.exe tech version 2 and then

274
00:09:41,440 --> 00:09:44,000
oh cool now you can echo amazing utils

275
00:09:44,000 --> 00:09:46,560
right so stupid simple and is actually

276
00:09:46,560 --> 00:09:49,120
like very widely used

277
00:09:49,120 --> 00:09:51,040
and is still widely available because

278
00:09:51,040 --> 00:09:53,279
most um

279
00:09:53,279 --> 00:09:55,040
most people don't realize that it's just

280
00:09:55,040 --> 00:09:57,279
sitting there

281
00:09:57,279 --> 00:09:58,880
right so

282
00:09:58,880 --> 00:10:00,560
what can we do

283
00:10:00,560 --> 00:10:02,640
if powershell version 2.0 isn't

284
00:10:02,640 --> 00:10:04,320
available we need to find some way of

285
00:10:04,320 --> 00:10:06,320
crashing it right

286
00:10:06,320 --> 00:10:09,440
so this comes to the fun part of

287
00:10:09,440 --> 00:10:10,720
where we're going to get to and why i

288
00:10:10,720 --> 00:10:12,399
think powershell is still so dangerous

289
00:10:12,399 --> 00:10:14,640
and when we left it

290
00:10:14,640 --> 00:10:16,079
or stopped paying attention to it it

291
00:10:16,079 --> 00:10:16,880
just

292
00:10:16,880 --> 00:10:19,920
kept working or our attacks kept working

293
00:10:19,920 --> 00:10:22,000
so when we want to defeat amzee what

294
00:10:22,000 --> 00:10:23,519
we're trying to do is put amstee into a

295
00:10:23,519 --> 00:10:26,800
failed state the reason being is is amzi

296
00:10:26,800 --> 00:10:29,200
doesn't have a self-recovery function

297
00:10:29,200 --> 00:10:32,079
meaning if you somehow set it to crash

298
00:10:32,079 --> 00:10:34,160
and you get the field amsy and it failed

299
00:10:34,160 --> 00:10:35,920
to set to true

300
00:10:35,920 --> 00:10:37,839
uh it'll just stop working it doesn't

301
00:10:37,839 --> 00:10:40,320
try to reload itself which is cool uh

302
00:10:40,320 --> 00:10:41,839
for attackers it's really bad for

303
00:10:41,839 --> 00:10:43,839
defenders right

304
00:10:43,839 --> 00:10:46,720
so back in 2016 matt graber the genius

305
00:10:46,720 --> 00:10:48,959
of powershell found that you could use

306
00:10:48,959 --> 00:10:51,200
reflection to just call the mz and it

307
00:10:51,200 --> 00:10:54,399
failed field and set that to true

308
00:10:54,399 --> 00:10:56,959
and this is the reason why amsi utils is

309
00:10:56,959 --> 00:11:00,959
actually a band uh string within amsi uh

310
00:11:00,959 --> 00:11:02,959
thanks to mac raber

311
00:11:02,959 --> 00:11:05,360
and this was fixed relatively quickly uh

312
00:11:05,360 --> 00:11:06,800
the problem is is

313
00:11:06,800 --> 00:11:08,800
this line below it where you have the

314
00:11:08,800 --> 00:11:10,560
concatenated strings of amazing utils

315
00:11:10,560 --> 00:11:12,160
and amazing and it failed well that

316
00:11:12,160 --> 00:11:14,720
worked all the way up until 2020.

317
00:11:14,720 --> 00:11:16,640
um i was using that on most of my red

318
00:11:16,640 --> 00:11:18,720
teams up until last year right

319
00:11:18,720 --> 00:11:21,040
that's kind of scary because they state

320
00:11:21,040 --> 00:11:23,120
in their documentation that amz does

321
00:11:23,120 --> 00:11:25,680
concatenate um before code execution

322
00:11:25,680 --> 00:11:28,560
which just wasn't true but this is

323
00:11:28,560 --> 00:11:29,680
actually a really good use case into

324
00:11:29,680 --> 00:11:31,920
showing you guys that microsoft really

325
00:11:31,920 --> 00:11:33,839
didn't fix the issue they just kind of

326
00:11:33,839 --> 00:11:35,920
pushed it to the side

327
00:11:35,920 --> 00:11:37,120
um

328
00:11:37,120 --> 00:11:38,079
we're going to stop through that real

329
00:11:38,079 --> 00:11:40,240
quick right so the first thing that we

330
00:11:40,240 --> 00:11:42,880
needed to do here was figure out

331
00:11:42,880 --> 00:11:43,760
does

332
00:11:43,760 --> 00:11:45,680
or have our we need to set the static

333
00:11:45,680 --> 00:11:47,279
right so we need to call amsetils and

334
00:11:47,279 --> 00:11:49,680
make sure okay yeah it is blocking it

335
00:11:49,680 --> 00:11:51,040
uh and then we needed to see does

336
00:11:51,040 --> 00:11:53,200
concatenation still work right so can we

337
00:11:53,200 --> 00:11:55,760
call amsa utils with a concatenated out

338
00:11:55,760 --> 00:11:57,680
and we can

339
00:11:57,680 --> 00:11:59,600
so that begs the question all right how

340
00:11:59,600 --> 00:12:01,600
deep down the rabbit hole do we need to

341
00:12:01,600 --> 00:12:03,279
go before microsoft says this is

342
00:12:03,279 --> 00:12:04,959
malicious

343
00:12:04,959 --> 00:12:06,480
um

344
00:12:06,480 --> 00:12:07,519
so

345
00:12:07,519 --> 00:12:09,200
the next thing we need to do is figure

346
00:12:09,200 --> 00:12:11,360
out okay can we just call

347
00:12:11,360 --> 00:12:12,959
the field can we call amzee and it

348
00:12:12,959 --> 00:12:13,920
failed

349
00:12:13,920 --> 00:12:15,839
and it turns out you still can

350
00:12:15,839 --> 00:12:17,600
you can you can concatenate it and as

351
00:12:17,600 --> 00:12:19,279
you can see in the screenshot below we

352
00:12:19,279 --> 00:12:21,680
do get all the information from amazing

353
00:12:21,680 --> 00:12:22,639
it failed

354
00:12:22,639 --> 00:12:25,200
so something weird is going on that

355
00:12:25,200 --> 00:12:27,360
isn't as straightforward as as most

356
00:12:27,360 --> 00:12:30,160
attackers would think

357
00:12:30,160 --> 00:12:33,760
well what it turns out is and thanks to

358
00:12:33,760 --> 00:12:35,839
secure this for writing up a great

359
00:12:35,839 --> 00:12:38,720
write-up on on what's going on here

360
00:12:38,720 --> 00:12:40,240
but when you

361
00:12:40,240 --> 00:12:41,440
uh

362
00:12:41,440 --> 00:12:45,519
call a field and then you set the value

363
00:12:45,519 --> 00:12:46,800
um

364
00:12:46,800 --> 00:12:48,959
ramsey does a little bit of regex from

365
00:12:48,959 --> 00:12:50,720
that and then goes okay i see a few

366
00:12:50,720 --> 00:12:52,240
things that are that are matching up i'm

367
00:12:52,240 --> 00:12:53,839
going to concatenate the strings within

368
00:12:53,839 --> 00:12:54,639
the

369
00:12:54,639 --> 00:12:56,560
the get type and get field and if they

370
00:12:56,560 --> 00:12:58,560
equal a malicious string then i'm going

371
00:12:58,560 --> 00:13:01,279
to obviously block it

372
00:13:01,279 --> 00:13:03,120
so it's kind of cool because now they're

373
00:13:03,120 --> 00:13:04,720
now they're thinking okay maybe if we do

374
00:13:04,720 --> 00:13:06,160
some rejects we can we can catch this

375
00:13:06,160 --> 00:13:07,120
stuff

376
00:13:07,120 --> 00:13:09,680
uh the problem is is amzee this still

377
00:13:09,680 --> 00:13:10,800
sucks

378
00:13:10,800 --> 00:13:13,040
um my number one rule when when

379
00:13:13,040 --> 00:13:14,639
defeating

380
00:13:14,639 --> 00:13:16,399
just about anything in powershell is

381
00:13:16,399 --> 00:13:18,480
when in doubt encode it out

382
00:13:18,480 --> 00:13:21,120
uh i would avoid base64 as a whole

383
00:13:21,120 --> 00:13:23,519
because it is a organic command

384
00:13:23,519 --> 00:13:25,200
structure within

385
00:13:25,200 --> 00:13:27,519
uh powershell but what you can do is

386
00:13:27,519 --> 00:13:29,360
format to hex

387
00:13:29,360 --> 00:13:31,360
and so in the two screenshots below what

388
00:13:31,360 --> 00:13:33,360
you're seeing here is the concatenation

389
00:13:33,360 --> 00:13:35,760
of the mzutils formatted into

390
00:13:35,760 --> 00:13:39,040
hex on an encoding of uta utf-8 and we

391
00:13:39,040 --> 00:13:41,360
can print it we get our nice little hex

392
00:13:41,360 --> 00:13:43,199
code over here to the left

393
00:13:43,199 --> 00:13:44,639
and then when we do the same thing for

394
00:13:44,639 --> 00:13:46,000
mz and it failed

395
00:13:46,000 --> 00:13:49,120
we get this nice little hex code again

396
00:13:49,120 --> 00:13:50,800
so

397
00:13:50,800 --> 00:13:52,880
from there we have to create a one-liner

398
00:13:52,880 --> 00:13:54,880
to figure out how to turn our hex back

399
00:13:54,880 --> 00:13:56,959
into text right because we already have

400
00:13:56,959 --> 00:13:58,160
our text in the hex so you're gonna

401
00:13:58,160 --> 00:14:00,320
sweet little like dr seuss rhyme there

402
00:14:00,320 --> 00:14:04,079
as well so the one liner is quite simple

403
00:14:04,079 --> 00:14:05,519
all we have to do is split each

404
00:14:05,519 --> 00:14:07,760
individual character and then convert it

405
00:14:07,760 --> 00:14:09,040
back into

406
00:14:09,040 --> 00:14:11,360
a um

407
00:14:11,360 --> 00:14:13,360
well a character right we take the hex

408
00:14:13,360 --> 00:14:14,959
code and we split it into a characters

409
00:14:14,959 --> 00:14:16,880
push that into a result field in that

410
00:14:16,880 --> 00:14:20,320
result field then prints mzutils

411
00:14:20,320 --> 00:14:23,360
so what does that look like quite simply

412
00:14:23,360 --> 00:14:26,000
it's using matt graper's method with

413
00:14:26,000 --> 00:14:27,600
uh

414
00:14:27,600 --> 00:14:28,720
with hex

415
00:14:28,720 --> 00:14:29,839
so the first thing we print out

416
00:14:29,839 --> 00:14:31,680
zamasutil will show you that it is

417
00:14:31,680 --> 00:14:34,639
functioning mg is functioning we print

418
00:14:34,639 --> 00:14:37,279
in our

419
00:14:38,160 --> 00:14:40,560
macgraber method with our hex code and

420
00:14:40,560 --> 00:14:42,079
our single line for

421
00:14:42,079 --> 00:14:44,560
breaking apart or breaking back into

422
00:14:44,560 --> 00:14:47,680
text for both amz utils and amsi and it

423
00:14:47,680 --> 00:14:48,959
failed

424
00:14:48,959 --> 00:14:50,959
setting that value to true and now we

425
00:14:50,959 --> 00:14:53,360
can call amzi showing that amsi has been

426
00:14:53,360 --> 00:14:55,680
defeated using this method

427
00:14:55,680 --> 00:14:58,720
so this 2016 method really still hasn't

428
00:14:58,720 --> 00:14:59,920
been fixed

429
00:14:59,920 --> 00:15:00,800
right

430
00:15:00,800 --> 00:15:02,160
and uh

431
00:15:02,160 --> 00:15:03,600
i i can tell you this is probably one of

432
00:15:03,600 --> 00:15:05,839
my more favorite ways of showing clients

433
00:15:05,839 --> 00:15:07,519
that they uh

434
00:15:07,519 --> 00:15:08,959
they're not as secure as they think they

435
00:15:08,959 --> 00:15:10,639
are just because they have some organic

436
00:15:10,639 --> 00:15:13,639
controls

437
00:15:13,680 --> 00:15:15,040
the next piece and i wouldn't worry

438
00:15:15,040 --> 00:15:17,839
about writing any of this down uh is the

439
00:15:17,839 --> 00:15:20,720
rasta mouth method mouse method oh it's

440
00:15:20,720 --> 00:15:22,480
a tongue twister

441
00:15:22,480 --> 00:15:23,920
the the reason why i wanted to call this

442
00:15:23,920 --> 00:15:26,000
one out in particular is because this is

443
00:15:26,000 --> 00:15:28,399
kind of an interesting way of doing it

444
00:15:28,399 --> 00:15:30,399
uh rossa mouth actually found that you

445
00:15:30,399 --> 00:15:32,399
could patch the loaded dll

446
00:15:32,399 --> 00:15:35,199
and that's kind of scary for people who

447
00:15:35,199 --> 00:15:37,360
are attackers because or even even those

448
00:15:37,360 --> 00:15:39,199
who run edrs

449
00:15:39,199 --> 00:15:40,959
because if you're able to patch the

450
00:15:40,959 --> 00:15:44,160
loaded dll you could possibly unhook the

451
00:15:44,160 --> 00:15:46,399
dll um

452
00:15:46,399 --> 00:15:48,800
and and load in something that's that's

453
00:15:48,800 --> 00:15:51,839
clean from from your edr from kernel 32

454
00:15:51,839 --> 00:15:55,279
or ntdl232 right

455
00:15:55,279 --> 00:15:56,639
and this is just c sharp code that's

456
00:15:56,639 --> 00:15:58,160
running in powershell

457
00:15:58,160 --> 00:15:59,839
the only caveat i would say is when you

458
00:15:59,839 --> 00:16:01,680
run this kind of code is if you're an

459
00:16:01,680 --> 00:16:03,680
attacker don't use ad type because ad

460
00:16:03,680 --> 00:16:05,839
type leaves a temporary

461
00:16:05,839 --> 00:16:09,279
dll on disk and it's an artifact so you

462
00:16:09,279 --> 00:16:10,320
can

463
00:16:10,320 --> 00:16:12,240
get caught from that

464
00:16:12,240 --> 00:16:13,839
but basically all this is doing is

465
00:16:13,839 --> 00:16:16,560
loading in the amz dll it's finding the

466
00:16:16,560 --> 00:16:19,040
scan buffer library and then it's

467
00:16:19,040 --> 00:16:21,680
overriding the first couple bytes

468
00:16:21,680 --> 00:16:23,360
and the reason being

469
00:16:23,360 --> 00:16:25,839
is when amsi calls itself in amsi scan

470
00:16:25,839 --> 00:16:28,399
buffer and z context amazing it failed

471
00:16:28,399 --> 00:16:31,279
it always looks for the

472
00:16:31,279 --> 00:16:33,279
first uh first couple bytes that are

473
00:16:33,279 --> 00:16:34,639
static

474
00:16:34,639 --> 00:16:36,800
and those static bytes uh

475
00:16:36,800 --> 00:16:38,639
translate to like amsi so it's just

476
00:16:38,639 --> 00:16:40,560
looking for like the first four letters

477
00:16:40,560 --> 00:16:42,240
of its name and if it doesn't see that

478
00:16:42,240 --> 00:16:44,639
then he goes oh i'm corrupted set it to

479
00:16:44,639 --> 00:16:45,680
failed

480
00:16:45,680 --> 00:16:48,079
and you're good to go

481
00:16:48,079 --> 00:16:50,320
so this is a relatively old method as

482
00:16:50,320 --> 00:16:52,240
well i didn't do any obfuscation on this

483
00:16:52,240 --> 00:16:57,120
one and as we can see mzutils is running

484
00:17:00,079 --> 00:17:02,800
i'll eventually copy and paste it in

485
00:17:02,800 --> 00:17:04,480
nothing's coming up from amsi we're able

486
00:17:04,480 --> 00:17:09,199
to load in our our c sharp code and

487
00:17:09,199 --> 00:17:10,880
call amse again

488
00:17:10,880 --> 00:17:12,480
right so this is a really

489
00:17:12,480 --> 00:17:14,799
relatively old method as well that just

490
00:17:14,799 --> 00:17:17,199
still works right out of the box the

491
00:17:17,199 --> 00:17:18,640
nothing has really changed in this way

492
00:17:18,640 --> 00:17:20,559
of doing things

493
00:17:20,559 --> 00:17:22,480
the only only difference is i think if

494
00:17:22,480 --> 00:17:24,079
you ever saw this in the wild it would

495
00:17:24,079 --> 00:17:25,119
be

496
00:17:25,119 --> 00:17:29,719
i am scroll wheeling um

497
00:17:32,559 --> 00:17:34,799
all right i totally screwed that up give

498
00:17:34,799 --> 00:17:36,720
me a second there we go

499
00:17:36,720 --> 00:17:38,240
uh the only thing i would say if you saw

500
00:17:38,240 --> 00:17:40,720
this in the wild it would be

501
00:17:40,720 --> 00:17:42,720
done using like matt graber's method or

502
00:17:42,720 --> 00:17:44,000
the offensive security method for

503
00:17:44,000 --> 00:17:45,360
loading in

504
00:17:45,360 --> 00:17:47,840
dll imports so it would be reflectively

505
00:17:47,840 --> 00:17:49,679
loaded in so you're not putting anything

506
00:17:49,679 --> 00:17:50,640
on disk

507
00:17:50,640 --> 00:17:52,080
but for the most part this this

508
00:17:52,080 --> 00:17:53,280
technique still

509
00:17:53,280 --> 00:17:54,240
works

510
00:17:54,240 --> 00:17:55,280
right

511
00:17:55,280 --> 00:17:57,039
there is one other one that i kind of

512
00:17:57,039 --> 00:17:59,120
want to go over real quick and

513
00:17:59,120 --> 00:18:00,720
hopefully you guys can still see my

514
00:18:00,720 --> 00:18:01,760
screen

515
00:18:01,760 --> 00:18:03,039
but it's the

516
00:18:03,039 --> 00:18:06,240
offensive security method

517
00:18:06,240 --> 00:18:08,799
which is

518
00:18:09,120 --> 00:18:10,240
right here

519
00:18:10,240 --> 00:18:11,600
and the reason why i like the offensive

520
00:18:11,600 --> 00:18:15,039
security method a lot is

521
00:18:15,039 --> 00:18:18,640
this particular method um

522
00:18:18,640 --> 00:18:20,799
reflectively gathers all the assembly

523
00:18:20,799 --> 00:18:23,600
types that are loaded into

524
00:18:23,600 --> 00:18:26,960
powershell and then it uses wildcards

525
00:18:26,960 --> 00:18:30,320
cards unlike iutels and context to find

526
00:18:30,320 --> 00:18:32,240
the address and then overwrite the

527
00:18:32,240 --> 00:18:34,720
address of amsi contact so

528
00:18:34,720 --> 00:18:36,720
if we just type in

529
00:18:36,720 --> 00:18:41,200
mgutils again show that it is blocked

530
00:18:41,200 --> 00:18:43,840
and copy in our script again it's going

531
00:18:43,840 --> 00:18:45,840
to allow us to print it

532
00:18:45,840 --> 00:18:48,159
but

533
00:18:50,240 --> 00:18:51,600
what i think is kind of cool here is we

534
00:18:51,600 --> 00:18:53,039
can actually kind of

535
00:18:53,039 --> 00:18:54,799
go out and look at each individual

536
00:18:54,799 --> 00:18:56,799
section so when we type in gather we can

537
00:18:56,799 --> 00:18:59,760
see all of the loaded function types or

538
00:18:59,760 --> 00:19:02,400
assembly types that are loaded in

539
00:19:02,400 --> 00:19:05,039
and

540
00:19:05,760 --> 00:19:10,200
maybe i just cancel it there we go

541
00:19:13,679 --> 00:19:16,000
yep

542
00:19:16,880 --> 00:19:18,640
and we can kind of step down and see

543
00:19:18,640 --> 00:19:19,440
like

544
00:19:19,440 --> 00:19:22,880
where each piece of this is going

545
00:19:22,880 --> 00:19:24,720
so when we pull up delta we can actually

546
00:19:24,720 --> 00:19:27,200
pull up all the functions within the mz

547
00:19:27,200 --> 00:19:31,280
uh the mz dll mzcontext mz session mz

548
00:19:31,280 --> 00:19:32,480
and it failed

549
00:19:32,480 --> 00:19:35,120
amazing lock object and what i think is

550
00:19:35,120 --> 00:19:37,520
super cool about this is we can actually

551
00:19:37,520 --> 00:19:38,480
pull

552
00:19:38,480 --> 00:19:42,480
the address for amsi context

553
00:19:42,480 --> 00:19:44,400
right so if we pull up context here we

554
00:19:44,400 --> 00:19:46,320
can oh actually it's going to pull up

555
00:19:46,320 --> 00:19:47,760
the wrong thing

556
00:19:47,760 --> 00:19:48,799
but

557
00:19:48,799 --> 00:19:50,880
adder will work in the same way so when

558
00:19:50,880 --> 00:19:52,640
we call the address variable here we can

559
00:19:52,640 --> 00:19:53,919
actually see the memory address that

560
00:19:53,919 --> 00:19:55,919
it's dynamically loaded into and that's

561
00:19:55,919 --> 00:19:58,640
what we're copying over using.net

562
00:19:58,640 --> 00:20:00,720
because net is available to us in

563
00:20:00,720 --> 00:20:02,320
powershell

564
00:20:02,320 --> 00:20:05,679
this is a very nice like red teaming

565
00:20:05,679 --> 00:20:06,640
little

566
00:20:06,640 --> 00:20:09,120
eight lines of code because uh

567
00:20:09,120 --> 00:20:11,600
it's very hard to detect

568
00:20:11,600 --> 00:20:13,120
and and see

569
00:20:13,120 --> 00:20:15,039
um at least i i haven't been caught in

570
00:20:15,039 --> 00:20:16,480
that regard from it

571
00:20:16,480 --> 00:20:17,760
but i just wanted to point that out real

572
00:20:17,760 --> 00:20:21,640
quick before we continue

573
00:20:22,240 --> 00:20:26,480
so what happens when you can't run code

574
00:20:26,480 --> 00:20:29,200
to bypass amz

575
00:20:29,200 --> 00:20:30,640
whether that's through

576
00:20:30,640 --> 00:20:32,720
restricted language mode like restricted

577
00:20:32,720 --> 00:20:34,400
or constrained language mode or app

578
00:20:34,400 --> 00:20:36,159
locker application whitelisting

579
00:20:36,159 --> 00:20:37,360
blacklisting whatever you're trying to

580
00:20:37,360 --> 00:20:38,799
do

581
00:20:38,799 --> 00:20:40,480
well quite simply

582
00:20:40,480 --> 00:20:42,720
powershell is just a bunch of loaded

583
00:20:42,720 --> 00:20:45,360
dlls on top of command prompt it's

584
00:20:45,360 --> 00:20:48,000
that's why it's called powershell right

585
00:20:48,000 --> 00:20:50,080
so you can just quite easily create your

586
00:20:50,080 --> 00:20:52,159
own powershell using living off the line

587
00:20:52,159 --> 00:20:54,000
binaries

588
00:20:54,000 --> 00:20:57,039
or you can be lazy like 90 of us in in

589
00:20:57,039 --> 00:20:58,799
the pen testing and retaining world and

590
00:20:58,799 --> 00:21:01,840
just use this wonderful

591
00:21:01,840 --> 00:21:04,159
program called ms build shell which can

592
00:21:04,159 --> 00:21:06,720
be found at the github and what ms build

593
00:21:06,720 --> 00:21:09,280
shell does is it uses the

594
00:21:09,280 --> 00:21:10,080
net

595
00:21:10,080 --> 00:21:12,559
version 4.0

596
00:21:12,559 --> 00:21:14,840
executable ms

597
00:21:14,840 --> 00:21:17,840
build i think it's ms build

598
00:21:17,840 --> 00:21:20,559
uh to

599
00:21:20,559 --> 00:21:22,720
uh build a cs project file yeah here we

600
00:21:22,720 --> 00:21:24,240
go

601
00:21:24,240 --> 00:21:26,400
so

602
00:21:26,480 --> 00:21:29,120
because.net 4.0 is installed by default

603
00:21:29,120 --> 00:21:31,679
build.exe is also a living off the land

604
00:21:31,679 --> 00:21:34,320
binary it is installed by default

605
00:21:34,320 --> 00:21:36,320
uh the first thing i did here is i wrote

606
00:21:36,320 --> 00:21:38,080
up ps version table so you guys can see

607
00:21:38,080 --> 00:21:38,799
that

608
00:21:38,799 --> 00:21:40,320
it's not running powershell currently

609
00:21:40,320 --> 00:21:42,559
this is just a straight command prompt

610
00:21:42,559 --> 00:21:44,159
but what we can do is we can take this

611
00:21:44,159 --> 00:21:46,000
cs project file which doesn't get

612
00:21:46,000 --> 00:21:49,440
flagged by antivirus programs because

613
00:21:49,440 --> 00:21:51,760
in itself it's not malicious and if they

614
00:21:51,760 --> 00:21:54,400
started flagging on that

615
00:21:54,400 --> 00:21:56,559
kind of activity you would potentially

616
00:21:56,559 --> 00:22:00,559
start flagging on legitimate activity

617
00:22:00,559 --> 00:22:02,159
but very simply all we have to do is hit

618
00:22:02,159 --> 00:22:03,760
enter here

619
00:22:03,760 --> 00:22:06,000
and it builds us a shell the errors that

620
00:22:06,000 --> 00:22:08,480
we see coming up is is the application

621
00:22:08,480 --> 00:22:11,039
trying to disable amsi

622
00:22:11,039 --> 00:22:13,520
um quite simply as the old mackrevers

623
00:22:13,520 --> 00:22:15,120
method you could just edit the lines of

624
00:22:15,120 --> 00:22:16,799
code that are in there and then this

625
00:22:16,799 --> 00:22:19,200
would come up as uh or nothing would

626
00:22:19,200 --> 00:22:20,320
show

627
00:22:20,320 --> 00:22:21,840
but i left it in just so you can see

628
00:22:21,840 --> 00:22:24,720
what it looks like as a default but

629
00:22:24,720 --> 00:22:26,799
now we can run ps version table

630
00:22:26,799 --> 00:22:29,520
and we get a ps version number but when

631
00:22:29,520 --> 00:22:30,960
we look at the top here we're not

632
00:22:30,960 --> 00:22:32,880
running powershell we're running ms

633
00:22:32,880 --> 00:22:34,480
build shell

634
00:22:34,480 --> 00:22:35,520
so

635
00:22:35,520 --> 00:22:36,720
when you look at that from a

636
00:22:36,720 --> 00:22:38,400
perspectival application whitelisting or

637
00:22:38,400 --> 00:22:40,159
blacklisting like this is not going to

638
00:22:40,159 --> 00:22:41,280
get caught

639
00:22:41,280 --> 00:22:42,559
the only functionality that you would

640
00:22:42,559 --> 00:22:44,400
lose inside this terminal would be your

641
00:22:44,400 --> 00:22:46,480
tab functionality that comes with uh

642
00:22:46,480 --> 00:22:47,600
powershell

643
00:22:47,600 --> 00:22:49,919
but i mean that's no big deal

644
00:22:49,919 --> 00:22:51,360
and then i think i just exit out of here

645
00:22:51,360 --> 00:22:53,280
yeah just so you can see it shows us a

646
00:22:53,280 --> 00:22:56,000
build exits uh it doesn't actually leave

647
00:22:56,000 --> 00:22:57,760
anything behind

648
00:22:57,760 --> 00:22:59,520
the only thing that would possibly be

649
00:22:59,520 --> 00:23:01,679
needed on disk is the cs project file or

650
00:23:01,679 --> 00:23:04,400
you could host that at a distant

651
00:23:04,400 --> 00:23:05,840
smb server

652
00:23:05,840 --> 00:23:09,200
and it would still function the same way

653
00:23:09,200 --> 00:23:11,360
there are other ways of doing this i

654
00:23:11,360 --> 00:23:12,880
kind of don't want to get too deep into

655
00:23:12,880 --> 00:23:13,840
it because it would be a little bit more

656
00:23:13,840 --> 00:23:15,840
outside the scope of a powershell but

657
00:23:15,840 --> 00:23:17,760
there are other projects like powershell

658
00:23:17,760 --> 00:23:19,280
dll project

659
00:23:19,280 --> 00:23:21,600
which you can run the many different

660
00:23:21,600 --> 00:23:23,200
living off the land binaries to run a

661
00:23:23,200 --> 00:23:24,640
dll

662
00:23:24,640 --> 00:23:25,679
um

663
00:23:25,679 --> 00:23:27,360
there's my personal favorite which is

664
00:23:27,360 --> 00:23:28,480
the sync app

665
00:23:28,480 --> 00:23:29,919
publishing server

666
00:23:29,919 --> 00:23:31,840
which is a script that's given to you by

667
00:23:31,840 --> 00:23:32,799
default

668
00:23:32,799 --> 00:23:36,480
you can break out of that and and send a

669
00:23:36,480 --> 00:23:39,440
request to a distant server

670
00:23:39,440 --> 00:23:40,880
be that your attacking server and you

671
00:23:40,880 --> 00:23:43,200
can use netcat to capture it

672
00:23:43,200 --> 00:23:45,520
and you'll get a sweep powershell

673
00:23:45,520 --> 00:23:47,919
shell from that

674
00:23:47,919 --> 00:23:49,520
uh if you want to learn more about this

675
00:23:49,520 --> 00:23:50,720
stuff i would definitely check out like

676
00:23:50,720 --> 00:23:53,360
ired.team they have some great write-ups

677
00:23:53,360 --> 00:23:54,400
on

678
00:23:54,400 --> 00:23:55,760
using

679
00:23:55,760 --> 00:23:57,679
powershell without having to use

680
00:23:57,679 --> 00:24:00,240
powershell

681
00:24:02,559 --> 00:24:04,640
and then the last thing on on bypassing

682
00:24:04,640 --> 00:24:07,600
alerts is going to be enumeration alerts

683
00:24:07,600 --> 00:24:09,120
this is this is something that i think

684
00:24:09,120 --> 00:24:11,360
is more red team focused but it is kind

685
00:24:11,360 --> 00:24:12,720
of an interesting way of looking at

686
00:24:12,720 --> 00:24:13,760
things

687
00:24:13,760 --> 00:24:16,159
um edrs have gotten really smart on

688
00:24:16,159 --> 00:24:18,240
being able to detect the heuristics of

689
00:24:18,240 --> 00:24:20,880
an attacker enumerating a dock or a

690
00:24:20,880 --> 00:24:22,240
workstation

691
00:24:22,240 --> 00:24:24,080
and the reason being

692
00:24:24,080 --> 00:24:26,400
is because most people just run like

693
00:24:26,400 --> 00:24:28,080
jaws like which is just another windows

694
00:24:28,080 --> 00:24:30,640
enumeration script or other enumeration

695
00:24:30,640 --> 00:24:33,279
scripts that just call ipconfig who am i

696
00:24:33,279 --> 00:24:35,679
netstat net sh but those are all

697
00:24:35,679 --> 00:24:38,480
applications that are built and listed

698
00:24:38,480 --> 00:24:41,200
in system32 so if you go to system32

699
00:24:41,200 --> 00:24:43,279
you'll see them quite obviously

700
00:24:43,279 --> 00:24:44,799
um

701
00:24:44,799 --> 00:24:46,480
we'll come back to our our powershell

702
00:24:46,480 --> 00:24:47,919
screen here so you can kind of see what

703
00:24:47,919 --> 00:24:49,440
i'm talking about but if we type in who

704
00:24:49,440 --> 00:24:50,400
am i

705
00:24:50,400 --> 00:24:53,279
right we get this nice little

706
00:24:53,279 --> 00:24:55,360
uh callout well

707
00:24:55,360 --> 00:24:59,279
if we don't want to use those system32

708
00:24:59,279 --> 00:25:01,919
executables we can use net from

709
00:25:01,919 --> 00:25:04,000
powershell to build our own

710
00:25:04,000 --> 00:25:05,760
who am i

711
00:25:05,760 --> 00:25:09,760
using environment variables and

712
00:25:09,760 --> 00:25:12,400
net calls so in this case who am i turns

713
00:25:12,400 --> 00:25:14,960
into environment user domain environment

714
00:25:14,960 --> 00:25:16,400
username

715
00:25:16,400 --> 00:25:17,760
and it looks

716
00:25:17,760 --> 00:25:19,440
pretty much the same

717
00:25:19,440 --> 00:25:21,919
with some better capitalization where it

718
00:25:21,919 --> 00:25:24,880
would normally be seen

719
00:25:24,880 --> 00:25:26,240
though when you start doing things like

720
00:25:26,240 --> 00:25:28,799
ipconfig this is nice and neat very cool

721
00:25:28,799 --> 00:25:32,320
to look at uh the.net library for this

722
00:25:32,320 --> 00:25:35,679
doesn't look as pretty what did i screw

723
00:25:35,679 --> 00:25:37,760
up

724
00:25:38,480 --> 00:25:39,840
oh

725
00:25:39,840 --> 00:25:42,799
oh

726
00:25:42,799 --> 00:25:44,400
there we go

727
00:25:44,400 --> 00:25:46,240
so it's not as pretty but it does get

728
00:25:46,240 --> 00:25:48,080
you the information right and you can

729
00:25:48,080 --> 00:25:50,159
use powershell to format out these

730
00:25:50,159 --> 00:25:54,400
strings uh to to make it pretty

731
00:25:54,400 --> 00:25:55,919
you know say you want the os build

732
00:25:55,919 --> 00:25:58,240
version

733
00:26:00,080 --> 00:26:02,880
you can you can pull the os version uh

734
00:26:02,880 --> 00:26:04,400
push the system environment for os

735
00:26:04,400 --> 00:26:06,000
version into a variable and then pull

736
00:26:06,000 --> 00:26:06,960
out

737
00:26:06,960 --> 00:26:08,400
version and build

738
00:26:08,400 --> 00:26:10,080
and now you have the build version of

739
00:26:10,080 --> 00:26:13,039
the application itself

740
00:26:13,039 --> 00:26:14,799
uh and then you know there's some fun

741
00:26:14,799 --> 00:26:16,000
things that if you really want to get

742
00:26:16,000 --> 00:26:17,840
down to it like you can print out which

743
00:26:17,840 --> 00:26:20,799
edr or antivirus system you're using as

744
00:26:20,799 --> 00:26:24,080
long as i didn't screw this up

745
00:26:24,080 --> 00:26:26,960
uh and and format that out

746
00:26:26,960 --> 00:26:29,039
and because windows keeps track of most

747
00:26:29,039 --> 00:26:30,880
of that activity you can just print it

748
00:26:30,880 --> 00:26:33,120
out but this is this is stuff that won't

749
00:26:33,120 --> 00:26:35,440
necessarily get you caught well this

750
00:26:35,440 --> 00:26:37,200
this edr information might because

751
00:26:37,200 --> 00:26:38,960
you're going to call a cmi

752
00:26:38,960 --> 00:26:40,080
cim

753
00:26:40,080 --> 00:26:42,799
uh instance but the other ones are using

754
00:26:42,799 --> 00:26:44,799
system environment variables

755
00:26:44,799 --> 00:26:46,000
and

756
00:26:46,000 --> 00:26:47,279
dot net

757
00:26:47,279 --> 00:26:49,200
basically pretending to be like an

758
00:26:49,200 --> 00:26:50,400
installer

759
00:26:50,400 --> 00:26:52,640
so if you can change up the way that you

760
00:26:52,640 --> 00:26:54,080
call things

761
00:26:54,080 --> 00:26:56,000
you start defeating the way that these

762
00:26:56,000 --> 00:26:58,400
edr products are detecting enumeration

763
00:26:58,400 --> 00:27:00,720
which allows you to live on the machine

764
00:27:00,720 --> 00:27:03,840
for a lot longer

765
00:27:03,919 --> 00:27:05,840
right this is just a screenshot of the

766
00:27:05,840 --> 00:27:07,520
same thing

767
00:27:07,520 --> 00:27:10,240
so we talked about all of that

768
00:27:10,240 --> 00:27:12,240
just to get to malware deployment

769
00:27:12,240 --> 00:27:13,919
um

770
00:27:13,919 --> 00:27:15,760
this is this is the fun stuff

771
00:27:15,760 --> 00:27:17,520
basically with malware execution on

772
00:27:17,520 --> 00:27:18,960
powershell all you have to do is take

773
00:27:18,960 --> 00:27:20,320
your c sharp code and turn it into

774
00:27:20,320 --> 00:27:22,799
powershell code vice versa it's dot net

775
00:27:22,799 --> 00:27:24,080
right

776
00:27:24,080 --> 00:27:25,919
to get basic code execution you need

777
00:27:25,919 --> 00:27:27,279
virtual alec

778
00:27:27,279 --> 00:27:29,200
and create thread from kernel 32 and you

779
00:27:29,200 --> 00:27:31,120
need the marshall service to copy your

780
00:27:31,120 --> 00:27:33,120
shell code into

781
00:27:33,120 --> 00:27:36,080
uh the allocated memory

782
00:27:36,080 --> 00:27:38,399
and then you do still have to do uh some

783
00:27:38,399 --> 00:27:41,200
av avoidance like reflectively calling

784
00:27:41,200 --> 00:27:43,919
your dlls and um a little bit of shell

785
00:27:43,919 --> 00:27:45,520
code obfuscation

786
00:27:45,520 --> 00:27:47,120
just because you're creating a new

787
00:27:47,120 --> 00:27:49,840
thread

788
00:27:49,919 --> 00:27:51,679
so what i think is cool about malware

789
00:27:51,679 --> 00:27:53,360
execution is that if you're using the

790
00:27:53,360 --> 00:27:55,039
mac graber method which i think is the

791
00:27:55,039 --> 00:27:57,279
best for beginners in

792
00:27:57,279 --> 00:27:59,200
pen testing and attacking using

793
00:27:59,200 --> 00:28:01,520
offensive powershell

794
00:28:01,520 --> 00:28:02,880
the top

795
00:28:02,880 --> 00:28:04,320
line of code for where we're importing

796
00:28:04,320 --> 00:28:07,440
kernel 32's virtual alec is from p

797
00:28:07,440 --> 00:28:08,480
invoke

798
00:28:08,480 --> 00:28:10,720
and the one right below it is how we

799
00:28:10,720 --> 00:28:13,200
would import it into macrae's method

800
00:28:13,200 --> 00:28:15,679
it's quite simply the same uh just a

801
00:28:15,679 --> 00:28:17,600
little less information you know you're

802
00:28:17,600 --> 00:28:19,120
still calling out hey i needed to be an

803
00:28:19,120 --> 00:28:21,200
in-pointer or integer pointer i need an

804
00:28:21,200 --> 00:28:23,039
unsigned integer

805
00:28:23,039 --> 00:28:25,440
um all that jazz and then when we want

806
00:28:25,440 --> 00:28:27,760
to call it it's it is pretty much

807
00:28:27,760 --> 00:28:29,600
exactly the same right this is how you

808
00:28:29,600 --> 00:28:31,440
call it in c sharp and this is how you

809
00:28:31,440 --> 00:28:33,039
call in a power shell

810
00:28:33,039 --> 00:28:36,240
very simple straight to the point

811
00:28:36,240 --> 00:28:37,440
another thing that's really brilliant

812
00:28:37,440 --> 00:28:39,600
about powershell is it helps out with

813
00:28:39,600 --> 00:28:41,520
shell code obfuscation

814
00:28:41,520 --> 00:28:42,720
right

815
00:28:42,720 --> 00:28:44,399
and it is still necessary you don't want

816
00:28:44,399 --> 00:28:46,000
to put just like meterpreter shell code

817
00:28:46,000 --> 00:28:47,600
on a um

818
00:28:47,600 --> 00:28:49,440
in a variable and just call it a day

819
00:28:49,440 --> 00:28:51,360
somebody's going to catch that

820
00:28:51,360 --> 00:28:53,520
but powershell reads bytecode as decimal

821
00:28:53,520 --> 00:28:55,600
instead of hex which is

822
00:28:55,600 --> 00:28:57,679
perfect if you like messing around with

823
00:28:57,679 --> 00:28:59,679
numbers i'm not too much of a fan of hex

824
00:28:59,679 --> 00:29:01,520
code and trying to format hex when you

825
00:29:01,520 --> 00:29:04,320
when you start doing uh obfuscation

826
00:29:04,320 --> 00:29:05,600
so

827
00:29:05,600 --> 00:29:07,520
like zero x zero zero becomes zero zero

828
00:29:07,520 --> 00:29:09,840
zero and zero x f becomes two five five

829
00:29:09,840 --> 00:29:11,679
uh and say you to do something simple

830
00:29:11,679 --> 00:29:13,360
like a caesar cipher which is pushing a

831
00:29:13,360 --> 00:29:15,200
byte to the left or to the right in this

832
00:29:15,200 --> 00:29:17,440
case in this example we're pushing the

833
00:29:17,440 --> 00:29:20,159
byte five to the right zero zero zero

834
00:29:20,159 --> 00:29:22,320
becomes zero zero five two five five

835
00:29:22,320 --> 00:29:24,000
becomes 260.

836
00:29:24,000 --> 00:29:26,799
um but because 260 is over

837
00:29:26,799 --> 00:29:30,080
um you know uh by its maximum range

838
00:29:30,080 --> 00:29:32,320
we need to use another function within

839
00:29:32,320 --> 00:29:35,200
powershell which is uh given to us quite

840
00:29:35,200 --> 00:29:37,200
nicely as modulus right it's a

841
00:29:37,200 --> 00:29:39,440
mathematical function and the operator

842
00:29:39,440 --> 00:29:41,200
is the percent sign

843
00:29:41,200 --> 00:29:44,159
so say you're trying to set your offset

844
00:29:44,159 --> 00:29:45,039
um

845
00:29:45,039 --> 00:29:46,880
to to not go over

846
00:29:46,880 --> 00:29:49,200
your 255

847
00:29:49,200 --> 00:29:51,440
you just do 256 minus or plus your

848
00:29:51,440 --> 00:29:55,279
offset and then modulus that by 256.

849
00:29:55,279 --> 00:29:57,360
so then zero zero zero becomes zero zero

850
00:29:57,360 --> 00:29:59,840
five and two two five becomes zero zero

851
00:29:59,840 --> 00:30:00,880
four

852
00:30:00,880 --> 00:30:02,960
very very simple to work with uh

853
00:30:02,960 --> 00:30:04,320
especially when you're doing a caesar

854
00:30:04,320 --> 00:30:06,320
cipher

855
00:30:06,320 --> 00:30:09,039
so what does that all look like

856
00:30:09,039 --> 00:30:10,559
basically what we're going to do here is

857
00:30:10,559 --> 00:30:12,240
we're going to run our

858
00:30:12,240 --> 00:30:14,399
multihandler as a interpreter reverse

859
00:30:14,399 --> 00:30:16,159
https

860
00:30:16,159 --> 00:30:17,760
and we've already

861
00:30:17,760 --> 00:30:19,279
pre-encoded it

862
00:30:19,279 --> 00:30:21,760
with a caesar cipher of

863
00:30:21,760 --> 00:30:24,960
so i'm showing you oh

864
00:30:24,960 --> 00:30:26,720
let me not click the the wrong buttons

865
00:30:26,720 --> 00:30:27,679
here

866
00:30:27,679 --> 00:30:29,440
so what i'm showing you first is that

867
00:30:29,440 --> 00:30:31,919
powershell is running under 11496 just

868
00:30:31,919 --> 00:30:33,520
so you are aware because we're going to

869
00:30:33,520 --> 00:30:35,200
execute within this process and that

870
00:30:35,200 --> 00:30:38,000
amsi is currently running

871
00:30:38,000 --> 00:30:39,679
and we've talked a lot about just

872
00:30:39,679 --> 00:30:42,480
copying and pasting things into

873
00:30:42,480 --> 00:30:44,720
a terminal if you have access but

874
00:30:44,720 --> 00:30:46,000
say it's like a ton of code you don't

875
00:30:46,000 --> 00:30:47,600
want to just sit there and wait forever

876
00:30:47,600 --> 00:30:50,320
what you can do is use dotnet web

877
00:30:50,320 --> 00:30:51,360
request

878
00:30:51,360 --> 00:30:54,559
to create a new rubric new web request

879
00:30:54,559 --> 00:30:57,200
and read that into a variable

880
00:30:57,200 --> 00:30:59,279
so if there are any people out there

881
00:30:59,279 --> 00:31:02,399
that want to utilize this code

882
00:31:02,399 --> 00:31:04,960
please do it's quite fun um

883
00:31:04,960 --> 00:31:07,120
it functions just like how internet

884
00:31:07,120 --> 00:31:08,640
explorer would

885
00:31:08,640 --> 00:31:09,919
minus

886
00:31:09,919 --> 00:31:11,279
uh you're not

887
00:31:11,279 --> 00:31:13,120
reading into a variable on internet

888
00:31:13,120 --> 00:31:14,960
explorer

889
00:31:14,960 --> 00:31:16,480
but the cool thing here is once we have

890
00:31:16,480 --> 00:31:19,039
it into a variable we can just execute

891
00:31:19,039 --> 00:31:20,480
that variable

892
00:31:20,480 --> 00:31:23,519
with iex content

893
00:31:23,519 --> 00:31:25,760
so we're not directly writing it into

894
00:31:25,760 --> 00:31:27,519
the

895
00:31:27,519 --> 00:31:31,120
powershell application at first

896
00:31:31,120 --> 00:31:32,559
then we're going to call invoke b size

897
00:31:32,559 --> 00:31:34,399
because let's say the

898
00:31:34,399 --> 00:31:35,919
function that i called it give it a

899
00:31:35,919 --> 00:31:38,000
supplied offset of 66.

900
00:31:38,000 --> 00:31:40,159
one thing to note here is that there is

901
00:31:40,159 --> 00:31:42,080
an antivirus running nothing has popped

902
00:31:42,080 --> 00:31:43,600
up

903
00:31:43,600 --> 00:31:44,880
and we can call back and we see that

904
00:31:44,880 --> 00:31:47,840
there's a session running

905
00:31:48,080 --> 00:31:50,960
the uid the paid 11496 the uid is the

906
00:31:50,960 --> 00:31:52,320
low priv user that we've been using for

907
00:31:52,320 --> 00:31:54,559
all this time

908
00:31:54,559 --> 00:31:58,000
and i think that wraps that part up yeah

909
00:31:58,000 --> 00:32:00,159
i have a much longer explanation of of

910
00:32:00,159 --> 00:32:03,120
this code too uh that we'll be releasing

911
00:32:03,120 --> 00:32:05,039
a little bit later

912
00:32:05,039 --> 00:32:07,200
just in this case the time limit kind of

913
00:32:07,200 --> 00:32:09,919
constrain this

914
00:32:10,559 --> 00:32:11,440
so

915
00:32:11,440 --> 00:32:13,039
now that you're hopefully a little bit

916
00:32:13,039 --> 00:32:14,880
paranoid like what can you do how can

917
00:32:14,880 --> 00:32:16,960
you fix some of these things

918
00:32:16,960 --> 00:32:18,880
quite simply like my number one thing is

919
00:32:18,880 --> 00:32:20,960
always to disable powershell uh you

920
00:32:20,960 --> 00:32:22,399
wouldn't give your users python so why

921
00:32:22,399 --> 00:32:24,720
would you give them powershell

922
00:32:24,720 --> 00:32:26,640
i get this doesn't work for everyone but

923
00:32:26,640 --> 00:32:29,760
what people seem to forget uh is that

924
00:32:29,760 --> 00:32:32,559
gpos do allow you to

925
00:32:32,559 --> 00:32:34,480
apply like these application

926
00:32:34,480 --> 00:32:36,559
blacklisting or whitelisting to specific

927
00:32:36,559 --> 00:32:38,559
ou's so your administrators can still

928
00:32:38,559 --> 00:32:40,320
use powershell i would just limit it for

929
00:32:40,320 --> 00:32:43,039
the the users

930
00:32:43,039 --> 00:32:44,880
also look at expanding your application

931
00:32:44,880 --> 00:32:46,799
blacklisting you know not everything

932
00:32:46,799 --> 00:32:50,000
microsoft provides you is safe uh dde

933
00:32:50,000 --> 00:32:53,039
auto is a prime example of this

934
00:32:53,039 --> 00:32:55,120
definitely use some ai based security

935
00:32:55,120 --> 00:32:57,039
products because they are going to hook

936
00:32:57,039 --> 00:32:58,880
into kernel 32 and to

937
00:32:58,880 --> 00:33:01,919
ntdl and like i had mentioned like

938
00:33:01,919 --> 00:33:03,200
sure you might be able to unhook it

939
00:33:03,200 --> 00:33:05,919
within powershell but with a better ai

940
00:33:05,919 --> 00:33:07,840
based security product it is going to be

941
00:33:07,840 --> 00:33:09,440
able to detect when a sensor is being

942
00:33:09,440 --> 00:33:13,360
bypassed and alerts you on that activity

943
00:33:13,360 --> 00:33:14,799
and then last

944
00:33:14,799 --> 00:33:16,559
but not least

945
00:33:16,559 --> 00:33:17,919
and this is less for the people in the

946
00:33:17,919 --> 00:33:19,760
room but microsoft kind of has to fix

947
00:33:19,760 --> 00:33:21,440
their stuff right i can't say it's just

948
00:33:21,440 --> 00:33:23,679
a feature anymore there is a lot of

949
00:33:23,679 --> 00:33:26,000
issues and and

950
00:33:26,000 --> 00:33:27,519
vulnerabilities within powershell that

951
00:33:27,519 --> 00:33:30,240
have been functioning since its release

952
00:33:30,240 --> 00:33:33,039
and because we've started to focus more

953
00:33:33,039 --> 00:33:35,440
on c-sharp binaries and

954
00:33:35,440 --> 00:33:37,120
other attack vectors

955
00:33:37,120 --> 00:33:39,279
people just forgot that powershell

956
00:33:39,279 --> 00:33:40,320
existed

957
00:33:40,320 --> 00:33:41,279
and

958
00:33:41,279 --> 00:33:42,880
they left it at oh we have constrained

959
00:33:42,880 --> 00:33:44,480
language mode or we have script signing

960
00:33:44,480 --> 00:33:46,640
execution or we have amz

961
00:33:46,640 --> 00:33:47,519
right

962
00:33:47,519 --> 00:33:49,760
they forget that this is the majority of

963
00:33:49,760 --> 00:33:51,039
the way that attackers get into your

964
00:33:51,039 --> 00:33:52,399
network and stay here

965
00:33:52,399 --> 00:33:54,000
fileless malware attacks utilize

966
00:33:54,000 --> 00:33:55,919
powershell yeah it might be through your

967
00:33:55,919 --> 00:33:57,519
registry but it's still calling

968
00:33:57,519 --> 00:33:58,799
powershell

969
00:33:58,799 --> 00:34:01,360
so any ways that we can start refocusing

970
00:34:01,360 --> 00:34:03,200
on these

971
00:34:03,200 --> 00:34:05,600
attack factors using the application

972
00:34:05,600 --> 00:34:07,360
would be beneficial to the security

973
00:34:07,360 --> 00:34:10,000
community as a whole

974
00:34:10,000 --> 00:34:11,520
so that's my talk

975
00:34:11,520 --> 00:34:13,918
here's my information again for anybody

976
00:34:13,918 --> 00:34:16,159
who wants to jot it down or wants to

977
00:34:16,159 --> 00:34:18,399
download these slides from from our web

978
00:34:18,399 --> 00:34:21,399
page

