1
00:00:03,060 --> 00:00:08,440
hello everyone<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> Kitty Skelton</font><font color="#E5E5E5"> and I</font>

2
00:00:06,610 --> 00:00:11,590
work for a<font color="#CCCCCC"> white-hot security</font><font color="#E5E5E5"> I have</font>

3
00:00:08,440 --> 00:00:13,059
done for just<font color="#E5E5E5"> under</font><font color="#CCCCCC"> two years</font><font color="#E5E5E5"> thanks for</font>

4
00:00:11,590 --> 00:00:15,820
this opportunity<font color="#E5E5E5"> to speak at this also</font>

5
00:00:13,059 --> 00:00:18,070
in<font color="#E5E5E5"> first besides Belfast event so today</font>

6
00:00:15,820 --> 00:00:19,600
I'm going to<font color="#E5E5E5"> talk a bit about XSS my</font>

7
00:00:18,070 --> 00:00:22,210
despite it being a known vulnerability

8
00:00:19,600 --> 00:00:25,840
<font color="#E5E5E5">for so many years that it</font><font color="#CCCCCC"> still exists</font>

9
00:00:22,210 --> 00:00:28,480
on a large majority<font color="#E5E5E5"> of sites</font><font color="#CCCCCC"> whitehat</font>

10
00:00:25,840 --> 00:00:29,948
<font color="#E5E5E5">just under 50% of site of websites</font><font color="#CCCCCC"> that</font>

11
00:00:28,480 --> 00:00:32,920
we see are vulnerable<font color="#CCCCCC"> to cross-site</font>

12
00:00:29,949 --> 00:00:35,230
scripting<font color="#E5E5E5"> so first of all we're going to</font>

13
00:00:32,920 --> 00:00:37,690
<font color="#E5E5E5">talk a little bit about JavaScript so</font>

14
00:00:35,230 --> 00:00:40,089
what is<font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> javascript</font><font color="#CCCCCC"> is a</font>

15
00:00:37,690 --> 00:00:43,540
scripting language<font color="#CCCCCC"> that was created</font><font color="#E5E5E5"> to</font>

16
00:00:40,090 --> 00:00:47,230
work with HTML<font color="#CCCCCC"> and CSS to provide</font>

17
00:00:43,540 --> 00:00:50,350
interactive<font color="#E5E5E5"> web applications the HTML</font>

18
00:00:47,230 --> 00:00:52,898
<font color="#CCCCCC">provides the content</font><font color="#E5E5E5"> CSS provides the</font>

19
00:00:50,350 --> 00:00:54,610
look and<font color="#CCCCCC"> feel</font><font color="#E5E5E5"> the design of the page and</font>

20
00:00:52,899 --> 00:00:57,610
<font color="#CCCCCC">javascript provides the behavior</font><font color="#E5E5E5"> the</font>

21
00:00:54,610 --> 00:01:00,160
activity some things that you may have

22
00:00:57,610 --> 00:01:02,140
<font color="#CCCCCC">seen on a website that</font><font color="#E5E5E5"> are done through</font>

23
00:01:00,160 --> 00:01:04,839
JavaScript<font color="#E5E5E5"> are things like event</font>

24
00:01:02,140 --> 00:01:07,360
<font color="#E5E5E5">handling so when you mouse over an image</font>

25
00:01:04,839 --> 00:01:09,510
<font color="#E5E5E5">on a page and the image expands in size</font>

26
00:01:07,360 --> 00:01:12,760
<font color="#E5E5E5">this will be done</font><font color="#CCCCCC"> through JavaScript</font>

27
00:01:09,510 --> 00:01:14,229
another thing you might see is when

28
00:01:12,760 --> 00:01:16,479
you're signing up<font color="#E5E5E5"> for</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> account on a</font>

29
00:01:14,229 --> 00:01:18,490
site and<font color="#E5E5E5"> there's a location</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> your</font>

30
00:01:16,479 --> 00:01:21,640
<font color="#E5E5E5">phone</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> and you accidentally put in</font>

31
00:01:18,490 --> 00:01:23,740
<font color="#E5E5E5">an O instead of a</font><font color="#CCCCCC"> zero if this form</font>

32
00:01:21,640 --> 00:01:25,960
highlights that field<font color="#CCCCCC"> in red and says</font>

33
00:01:23,740 --> 00:01:27,729
input<font color="#E5E5E5"> invalid</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> will be done through</font>

34
00:01:25,960 --> 00:01:30,460
client-side validation<font color="#E5E5E5"> which is done</font>

35
00:01:27,729 --> 00:01:33,850
through JavaScript so what does

36
00:01:30,460 --> 00:01:37,570
<font color="#CCCCCC">JavaScript have to do with XSS so first</font>

37
00:01:33,850 --> 00:01:39,070
<font color="#E5E5E5">roll what is XSS XSS or cross-site</font>

38
00:01:37,570 --> 00:01:42,220
scripting is a web application

39
00:01:39,070 --> 00:01:45,130
vulnerability where an attacker is able

40
00:01:42,220 --> 00:01:50,259
to<font color="#E5E5E5"> include malicious code and have it</font>

41
00:01:45,130 --> 00:01:53,259
reflect on the web on a<font color="#E5E5E5"> web page XSS is</font>

42
00:01:50,259 --> 00:01:56,549
where the attacker is abusing<font color="#E5E5E5"> the trust</font>

43
00:01:53,259 --> 00:01:59,140
<font color="#E5E5E5">that a user has for the</font><font color="#CCCCCC"> website</font><font color="#E5E5E5"> itself</font>

44
00:01:56,549 --> 00:02:02,320
<font color="#E5E5E5">the user believes that</font><font color="#CCCCCC"> anything that's</font>

45
00:01:59,140 --> 00:02:04,240
<font color="#E5E5E5">on that</font><font color="#CCCCCC"> web site</font><font color="#E5E5E5"> should</font><font color="#CCCCCC"> be there some</font>

46
00:02:02,320 --> 00:02:06,969
places<font color="#E5E5E5"> and that attackers will look for</font>

47
00:02:04,240 --> 00:02:09,160
identifying XSS are things like<font color="#E5E5E5"> search</font>

48
00:02:06,969 --> 00:02:11,500
functionality<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> search for</font>

49
00:02:09,160 --> 00:02:14,140
<font color="#CCCCCC">something</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> shoes and</font><font color="#E5E5E5"> the response</font>

50
00:02:11,500 --> 00:02:16,400
comes<font color="#CCCCCC"> back</font><font color="#E5E5E5"> saying in the search results</font>

51
00:02:14,140 --> 00:02:18,290
for<font color="#E5E5E5"> shoes</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> be seen below that is</font>

52
00:02:16,400 --> 00:02:21,079
simply your user input<font color="#E5E5E5"> being reflected</font>

53
00:02:18,290 --> 00:02:24,620
on<font color="#E5E5E5"> the page another place</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you might</font>

54
00:02:21,079 --> 00:02:26,750
see<font color="#E5E5E5"> a user input</font><font color="#CCCCCC"> reflection would</font><font color="#E5E5E5"> be</font>

55
00:02:24,620 --> 00:02:28,909
something<font color="#E5E5E5"> like your</font><font color="#CCCCCC"> username so for</font>

56
00:02:26,750 --> 00:02:30,769
example on Amazon<font color="#E5E5E5"> your first name is</font>

57
00:02:28,909 --> 00:02:32,810
<font color="#E5E5E5">reflected when you sign in it says</font>

58
00:02:30,769 --> 00:02:35,780
<font color="#E5E5E5">something like welcome kitty</font><font color="#CCCCCC"> to me</font>

59
00:02:32,810 --> 00:02:38,209
these<font color="#E5E5E5"> are all locations that an attacker</font>

60
00:02:35,780 --> 00:02:41,090
will look for potential XSS and<font color="#E5E5E5"> try to</font>

61
00:02:38,209 --> 00:02:43,750
put in their own<font color="#CCCCCC"> piece of code</font><font color="#E5E5E5"> to run</font>

62
00:02:41,090 --> 00:02:47,840
malicious<font color="#E5E5E5"> JavaScript so the main</font>

63
00:02:43,750 --> 00:02:51,560
language that is<font color="#CCCCCC"> used to at exploit XSS</font>

64
00:02:47,840 --> 00:02:55,879
<font color="#E5E5E5">be JavaScript so what can an attacker do</font>

65
00:02:51,560 --> 00:02:58,099
with XSS one thing an attacker can do

66
00:02:55,879 --> 00:03:00,290
with XSS is<font color="#E5E5E5"> still valid session cookies</font>

67
00:02:58,099 --> 00:03:02,119
so let's say you're<font color="#CCCCCC"> the victim and</font>

68
00:03:00,290 --> 00:03:05,750
you're signed<font color="#CCCCCC"> into</font><font color="#E5E5E5"> your banking site</font>

69
00:03:02,120 --> 00:03:08,150
<font color="#E5E5E5">Frank calm an attacker is find XSS on</font>

70
00:03:05,750 --> 00:03:10,189
<font color="#E5E5E5">bank.com</font><font color="#CCCCCC"> and they've created</font><font color="#E5E5E5"> a malicious</font>

71
00:03:08,150 --> 00:03:12,170
injection that's designed to<font color="#E5E5E5"> steal</font><font color="#CCCCCC"> your</font>

72
00:03:10,189 --> 00:03:14,989
session cookies so when you're

73
00:03:12,170 --> 00:03:17,599
authenticated<font color="#E5E5E5"> to bank</font><font color="#CCCCCC"> calm you set up a</font>

74
00:03:14,989 --> 00:03:20,919
session<font color="#E5E5E5"> with the server that the server</font>

75
00:03:17,599 --> 00:03:24,709
set<font color="#CCCCCC"> send you a particular session cookie</font>

76
00:03:20,919 --> 00:03:27,560
so the attacker sends you the link with

77
00:03:24,709 --> 00:03:30,440
the<font color="#E5E5E5"> valid injection in it and when that</font>

78
00:03:27,560 --> 00:03:33,019
injection fires<font color="#E5E5E5"> after you've clicked on</font>

79
00:03:30,440 --> 00:03:35,150
the link the session cookie is sent to

80
00:03:33,019 --> 00:03:37,099
the attacker<font color="#E5E5E5"> all the attacker needs to</font>

81
00:03:35,150 --> 00:03:39,440
do is include that session<font color="#E5E5E5"> cookie in</font>

82
00:03:37,099 --> 00:03:41,959
their browser navigate through<font color="#CCCCCC"> bank comm</font>

83
00:03:39,440 --> 00:03:44,329
<font color="#E5E5E5">they can see everything</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> see the</font>

84
00:03:41,959 --> 00:03:45,940
<font color="#E5E5E5">bank believes that they are you</font><font color="#CCCCCC"> they</font>

85
00:03:44,329 --> 00:03:48,169
have control of<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> your money</font>

86
00:03:45,940 --> 00:03:50,000
another<font color="#E5E5E5"> thing an attacker can do with</font>

87
00:03:48,169 --> 00:03:52,579
that success is too fierce<font color="#E5E5E5"> web</font>

88
00:03:50,000 --> 00:03:57,470
applications for example<font color="#CCCCCC"> on a new site</font>

89
00:03:52,579 --> 00:04:00,260
if there's XSS on for a new site<font color="#E5E5E5"> it's</font>

90
00:03:57,470 --> 00:04:02,269
possible<font color="#CCCCCC"> to include</font><font color="#E5E5E5"> an article that is</font>

91
00:04:00,260 --> 00:04:06,108
not<font color="#E5E5E5"> actually valid something that the</font>

92
00:04:02,269 --> 00:04:08,449
attacker has created in 2006 CBS<font color="#CCCCCC"> news</font>

93
00:04:06,109 --> 00:04:12,319
<font color="#E5E5E5">and BBC Dakota UK were both vulnerable</font>

94
00:04:08,449 --> 00:04:14,659
<font color="#E5E5E5">to XSS attacker managed to create their</font>

95
00:04:12,319 --> 00:04:16,519
own article<font color="#E5E5E5"> state claiming that</font>

96
00:04:14,659 --> 00:04:18,829
<font color="#CCCCCC">President Bush had appointed a nine year</font>

97
00:04:16,519 --> 00:04:21,500
<font color="#E5E5E5">old boy to be the</font><font color="#CCCCCC"> chairperson of the</font>

98
00:04:18,829 --> 00:04:24,529
<font color="#E5E5E5">Information Security Department it was</font>

99
00:04:21,500 --> 00:04:26,990
backed up by claims on CBS<font color="#CCCCCC"> News on the</font>

100
00:04:24,529 --> 00:04:29,659
<font color="#E5E5E5">BBC through the attackers malicious</font>

101
00:04:26,990 --> 00:04:31,550
injection on both of those sites

102
00:04:29,660 --> 00:04:33,830
so<font color="#E5E5E5"> to a normal</font><font color="#CCCCCC"> person maybe they don't</font>

103
00:04:31,550 --> 00:04:37,460
trust the<font color="#CCCCCC"> website that is the attackers</font>

104
00:04:33,830 --> 00:04:40,599
<font color="#CCCCCC">but if it's backed up by</font><font color="#E5E5E5"> CBS</font><font color="#CCCCCC"> news</font><font color="#E5E5E5"> and</font>

105
00:04:37,460 --> 00:04:43,219
the BBC<font color="#CCCCCC"> who are they to question it</font>

106
00:04:40,600 --> 00:04:46,430
another<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> in a attacker can do with</font>

107
00:04:43,220 --> 00:04:50,030
XSS is redirect user<font color="#CCCCCC"> on to a malicious</font>

108
00:04:46,430 --> 00:04:52,370
<font color="#E5E5E5">site for example</font><font color="#CCCCCC"> you as the victim are</font>

109
00:04:50,030 --> 00:04:56,059
on your social<font color="#E5E5E5"> media site social media</font>

110
00:04:52,370 --> 00:04:58,490
<font color="#E5E5E5">comm and the attacker finds XSS on</font>

111
00:04:56,060 --> 00:05:00,500
social media<font color="#CCCCCC"> com</font><font color="#E5E5E5"> they create an</font>

112
00:04:58,490 --> 00:05:03,680
injection<font color="#E5E5E5"> that is designed to redirect</font>

113
00:05:00,500 --> 00:05:05,840
<font color="#E5E5E5">you to social media</font><font color="#CCCCCC"> login</font><font color="#E5E5E5"> calm my social</font>

114
00:05:03,680 --> 00:05:08,540
media<font color="#CCCCCC"> login calm isn't actually owned by</font>

115
00:05:05,840 --> 00:05:10,700
<font color="#CCCCCC">the company of social media calm it's</font>

116
00:05:08,540 --> 00:05:12,830
hosted by<font color="#CCCCCC"> the attacker</font><font color="#E5E5E5"> the attackers</font>

117
00:05:10,700 --> 00:05:16,610
created<font color="#E5E5E5"> this site to look exactly like</font>

118
00:05:12,830 --> 00:05:19,130
<font color="#E5E5E5">the login form on social media calm the</font>

119
00:05:16,610 --> 00:05:21,380
attacker sends you the<font color="#E5E5E5"> victim a link</font>

120
00:05:19,130 --> 00:05:23,120
containing their injection that

121
00:05:21,380 --> 00:05:25,100
redirects you to social<font color="#CCCCCC"> media log</font><font color="#E5E5E5"> and</font>

122
00:05:23,120 --> 00:05:29,990
calm<font color="#E5E5E5"> saying hey look at this really cool</font>

123
00:05:25,100 --> 00:05:31,700
post and that<font color="#CCCCCC"> I've</font><font color="#E5E5E5"> just find you the</font>

124
00:05:29,990 --> 00:05:33,680
victim clicks on the<font color="#CCCCCC"> link you get</font>

125
00:05:31,700 --> 00:05:35,390
redirected to<font color="#CCCCCC"> your ph that says hey</font>

126
00:05:33,680 --> 00:05:37,270
you've been<font color="#CCCCCC"> unauthenticated</font><font color="#E5E5E5"> from social</font>

127
00:05:35,390 --> 00:05:40,099
media calm<font color="#E5E5E5"> please sign in</font><font color="#CCCCCC"> again</font>

128
00:05:37,270 --> 00:05:42,080
so<font color="#E5E5E5"> you</font><font color="#CCCCCC"> username and password include</font>

129
00:05:40,100 --> 00:05:44,240
<font color="#E5E5E5">your username</font><font color="#CCCCCC"> a password sign back in</font>

130
00:05:42,080 --> 00:05:46,700
the attacker smart the redirect you

131
00:05:44,240 --> 00:05:48,410
actually to social media<font color="#CCCCCC"> calm to an</font>

132
00:05:46,700 --> 00:05:51,260
actual forum post or<font color="#E5E5E5"> whatever they've</font>

133
00:05:48,410 --> 00:05:52,700
<font color="#CCCCCC">told you is there but</font><font color="#E5E5E5"> you the victim</font>

134
00:05:51,260 --> 00:05:54,740
have just<font color="#CCCCCC"> given the attacker your</font>

135
00:05:52,700 --> 00:05:57,920
<font color="#E5E5E5">username and password</font><font color="#CCCCCC"> they can now sign</font>

136
00:05:54,740 --> 00:06:00,890
<font color="#E5E5E5">into that account</font><font color="#CCCCCC"> you may not know as</font>

137
00:05:57,920 --> 00:06:02,510
the victim<font color="#E5E5E5"> that you have given</font><font color="#CCCCCC"> away your</font>

138
00:06:00,890 --> 00:06:04,960
<font color="#E5E5E5">username and</font><font color="#CCCCCC"> password</font><font color="#E5E5E5"> until</font><font color="#CCCCCC"> you no</font>

139
00:06:02,510 --> 00:06:10,849
<font color="#CCCCCC">longer have access</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> acquaintance</font>

140
00:06:04,960 --> 00:06:12,859
<font color="#E5E5E5">so what's the</font><font color="#CCCCCC"> solution for</font><font color="#E5E5E5"> XSS the best</font>

141
00:06:10,850 --> 00:06:15,710
solution for XSS is two things

142
00:06:12,860 --> 00:06:17,960
input sanitization<font color="#E5E5E5"> and I put</font><font color="#CCCCCC"> encoding</font>

143
00:06:15,710 --> 00:06:18,729
these two things<font color="#CCCCCC"> go together hand</font><font color="#E5E5E5"> in</font>

144
00:06:17,960 --> 00:06:21,799
<font color="#CCCCCC">hand</font>

145
00:06:18,730 --> 00:06:24,230
first of all<font color="#CCCCCC"> in personalization is where</font>

146
00:06:21,800 --> 00:06:27,350
the developer<font color="#CCCCCC"> is checking all user input</font>

147
00:06:24,230 --> 00:06:29,210
for key signs of malicious code<font color="#E5E5E5"> for</font>

148
00:06:27,350 --> 00:06:33,830
<font color="#E5E5E5">example less than</font><font color="#CCCCCC"> and greater than</font>

149
00:06:29,210 --> 00:06:35,390
<font color="#E5E5E5">symbols that represent a tag in HTML</font><font color="#CCCCCC"> the</font>

150
00:06:33,830 --> 00:06:37,400
developer may strip those particular

151
00:06:35,390 --> 00:06:41,570
characters<font color="#CCCCCC"> therefore preventing an</font>

152
00:06:37,400 --> 00:06:43,219
attacker<font color="#E5E5E5"> from creating tags or they'll</font>

153
00:06:41,570 --> 00:06:47,330
<font color="#CCCCCC">use open occurring</font>

154
00:06:43,220 --> 00:06:49,790
so I put<font color="#CCCCCC"> encoding is</font><font color="#E5E5E5"> used for when the</font>

155
00:06:47,330 --> 00:06:52,760
site requires special characters to be

156
00:06:49,790 --> 00:06:54,770
<font color="#E5E5E5">used for example a cernium like</font><font color="#CCCCCC"> o'leary</font>

157
00:06:52,760 --> 00:06:56,719
<font color="#E5E5E5">contains a special character the</font>

158
00:06:54,770 --> 00:07:01,070
apostrophe<font color="#E5E5E5"> or single tick depending what</font>

159
00:06:56,720 --> 00:07:02,690
<font color="#E5E5E5">you want to call it in this case the</font>

160
00:07:01,070 --> 00:07:04,969
<font color="#E5E5E5">website shoot a lie</font>

161
00:07:02,690 --> 00:07:06,920
the single tick<font color="#E5E5E5"> to be put in through the</font>

162
00:07:04,970 --> 00:07:11,960
user input<font color="#E5E5E5"> but a single tick can</font>

163
00:07:06,920 --> 00:07:14,320
represent<font color="#E5E5E5"> a string in HTML so to prevent</font>

164
00:07:11,960 --> 00:07:18,200
<font color="#E5E5E5">the browser from treating it as syntax</font>

165
00:07:14,320 --> 00:07:21,140
the developer output encodes it in HTML

166
00:07:18,200 --> 00:07:23,990
<font color="#CCCCCC">encoding</font><font color="#E5E5E5"> so that when the browser sees</font>

167
00:07:21,140 --> 00:07:26,210
this encoding<font color="#E5E5E5"> it goes hey I'm going to</font>

168
00:07:23,990 --> 00:07:27,320
<font color="#E5E5E5">display this as a single tick but I'm</font>

169
00:07:26,210 --> 00:07:30,289
not going to<font color="#E5E5E5"> treat it as part of the</font>

170
00:07:27,320 --> 00:07:33,730
code<font color="#E5E5E5"> of the page so</font><font color="#CCCCCC"> to gather both</font><font color="#E5E5E5"> of</font>

171
00:07:30,290 --> 00:07:36,110
these done properly<font color="#E5E5E5"> will prevent an XSS</font>

172
00:07:33,730 --> 00:07:39,320
<font color="#CCCCCC">to other solutions that</font><font color="#E5E5E5"> are commonly</font>

173
00:07:36,110 --> 00:07:40,540
<font color="#E5E5E5">found on</font><font color="#CCCCCC"> websites are whitelists and</font>

174
00:07:39,320 --> 00:07:44,240
blacklists

175
00:07:40,540 --> 00:07:47,300
so a whitelist<font color="#CCCCCC"> is where a developer has</font>

176
00:07:44,240 --> 00:07:50,000
said I only want<font color="#E5E5E5"> certain things to get</font>

177
00:07:47,300 --> 00:07:52,130
<font color="#E5E5E5">through</font><font color="#CCCCCC"> my user input</font><font color="#E5E5E5"> this is useful for</font>

178
00:07:50,000 --> 00:07:54,320
<font color="#CCCCCC">something like a phone number</font><font color="#E5E5E5"> where the</font>

179
00:07:52,130 --> 00:07:57,620
<font color="#E5E5E5">only thing you want and in your user</font>

180
00:07:54,320 --> 00:07:59,780
input would be numbers but if<font color="#E5E5E5"> your</font>

181
00:07:57,620 --> 00:08:02,630
whitelist starts to continue<font color="#E5E5E5"> to many and</font>

182
00:07:59,780 --> 00:08:03,919
special characters<font color="#E5E5E5"> it may be possible</font>

183
00:08:02,630 --> 00:08:07,000
<font color="#E5E5E5">for</font><font color="#CCCCCC"> an attacker to break through that</font>

184
00:08:03,919 --> 00:08:10,630
whitelist<font color="#E5E5E5"> and run their malicious code</font>

185
00:08:07,000 --> 00:08:14,000
the alternative<font color="#E5E5E5"> to that</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> blacklist</font><font color="#CCCCCC"> a</font>

186
00:08:10,630 --> 00:08:16,190
blacklist<font color="#CCCCCC"> is where the</font><font color="#E5E5E5"> developer says</font>

187
00:08:14,000 --> 00:08:19,040
<font color="#E5E5E5">these are all of the</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> that I</font><font color="#CCCCCC"> don't</font>

188
00:08:16,190 --> 00:08:21,410
want my user input to<font color="#E5E5E5"> contain so things</font>

189
00:08:19,040 --> 00:08:24,350
like tag names<font color="#E5E5E5"> or are less than and</font>

190
00:08:21,410 --> 00:08:27,280
greater than symbols but<font color="#CCCCCC"> a blacklist can</font>

191
00:08:24,350 --> 00:08:30,730
<font color="#E5E5E5">be extensive and quite commonly broken</font>

192
00:08:27,280 --> 00:08:34,309
this little cartoon here<font color="#E5E5E5"> is a joke on</font>

193
00:08:30,730 --> 00:08:36,830
what can happen if input sanitization is

194
00:08:34,309 --> 00:08:39,679
not applied on<font color="#CCCCCC"> your applications</font><font color="#E5E5E5"> in this</font>

195
00:08:36,830 --> 00:08:42,310
case<font color="#CCCCCC"> a parent has named their child</font>

196
00:08:39,679 --> 00:08:45,319
<font color="#E5E5E5">something</font><font color="#CCCCCC"> with an injection</font><font color="#E5E5E5"> in it and</font>

197
00:08:42,309 --> 00:08:47,780
when the<font color="#E5E5E5"> teacher included that child</font>

198
00:08:45,320 --> 00:08:50,089
into<font color="#CCCCCC"> their database</font><font color="#E5E5E5"> it dropped all of</font>

199
00:08:47,780 --> 00:08:51,709
<font color="#E5E5E5">their students information it wiped all</font>

200
00:08:50,089 --> 00:08:53,900
of that information<font color="#CCCCCC"> meaning they don't</font>

201
00:08:51,710 --> 00:08:57,420
<font color="#E5E5E5">have</font><font color="#CCCCCC"> it anymore that is one problem</font><font color="#E5E5E5"> with</font>

202
00:08:53,900 --> 00:08:59,350
impact of input<font color="#E5E5E5"> sanitize</font>

203
00:08:57,420 --> 00:09:05,740
so now I'm going<font color="#E5E5E5"> to talk a bit</font><font color="#CCCCCC"> about</font>

204
00:08:59,350 --> 00:09:08,980
<font color="#CCCCCC">some real-world breakable filters our</font>

205
00:09:05,740 --> 00:09:11,670
first filter is to do with<font color="#E5E5E5"> output</font>

206
00:09:08,980 --> 00:09:14,260
encoding<font color="#E5E5E5"> and some locations where</font>

207
00:09:11,670 --> 00:09:18,069
particular<font color="#E5E5E5"> output including does not</font>

208
00:09:14,260 --> 00:09:20,560
prevent XSS so in this case the

209
00:09:18,070 --> 00:09:23,350
<font color="#CCCCCC">developer is preventing users</font><font color="#E5E5E5"> for user</font>

210
00:09:20,560 --> 00:09:26,170
input from containing<font color="#E5E5E5"> our single</font><font color="#CCCCCC"> tix</font><font color="#E5E5E5"> in</font>

211
00:09:23,350 --> 00:09:29,530
plain text<font color="#E5E5E5"> so it's including it in hex</font>

212
00:09:26,170 --> 00:09:34,000
<font color="#E5E5E5">HTML encoding so our single tick becomes</font>

213
00:09:29,530 --> 00:09:36,160
<font color="#E5E5E5">unpress on hash</font><font color="#CCCCCC"> x 27 semicolon in plain</font>

214
00:09:34,000 --> 00:09:39,310
text areas of<font color="#E5E5E5"> the HTML this will work</font>

215
00:09:36,160 --> 00:09:41,949
<font color="#E5E5E5">fine the browser will simply treat that</font>

216
00:09:39,310 --> 00:09:45,400
as the little character<font color="#E5E5E5"> it will not it</font>

217
00:09:41,950 --> 00:09:48,750
treat<font color="#CCCCCC"> it as syntax however in some</font>

218
00:09:45,400 --> 00:09:51,280
locations such as<font color="#E5E5E5"> in an a tag in an href</font>

219
00:09:48,750 --> 00:09:54,730
<font color="#E5E5E5">in this particular example</font><font color="#CCCCCC"> our first</font>

220
00:09:51,280 --> 00:09:57,370
<font color="#E5E5E5">example here on the</font><font color="#CCCCCC"> screen the from the</font>

221
00:09:54,730 --> 00:09:59,590
<font color="#CCCCCC">eh ref is declaring</font><font color="#E5E5E5"> JavaScript so we're</font>

222
00:09:57,370 --> 00:10:02,620
using the JavaScript<font color="#E5E5E5"> scheme where our</font>

223
00:09:59,590 --> 00:10:05,170
function<font color="#CCCCCC"> hold function</font><font color="#E5E5E5"> is going to run</font>

224
00:10:02,620 --> 00:10:07,900
<font color="#E5E5E5">when a user clicks on</font><font color="#CCCCCC"> the click me</font>

225
00:10:05,170 --> 00:10:10,300
<font color="#CCCCCC">that'll be visible on</font><font color="#E5E5E5"> the page in this</font>

226
00:10:07,900 --> 00:10:13,930
particular example<font color="#E5E5E5"> our user input is</font>

227
00:10:10,300 --> 00:10:15,760
highlighted in red<font color="#E5E5E5"> and if you look at</font>

228
00:10:13,930 --> 00:10:18,370
the line<font color="#E5E5E5"> below you can see what it</font>

229
00:10:15,760 --> 00:10:21,430
decodes to<font color="#E5E5E5"> so we've included single tick</font>

230
00:10:18,370 --> 00:10:23,710
closing<font color="#CCCCCC"> parenthesis semicolon</font><font color="#E5E5E5"> the</font>

231
00:10:21,430 --> 00:10:25,479
function<font color="#E5E5E5"> alert opening and closing</font>

232
00:10:23,710 --> 00:10:28,080
<font color="#E5E5E5">parenthesis</font><font color="#CCCCCC"> are two forward slashes</font>

233
00:10:25,480 --> 00:10:31,420
which represent a comment in JavaScript

234
00:10:28,080 --> 00:10:33,820
<font color="#E5E5E5">so what this is going to do is break out</font>

235
00:10:31,420 --> 00:10:36,189
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> function that our user input is</font>

236
00:10:33,820 --> 00:10:38,710
reflected<font color="#CCCCCC"> into</font><font color="#E5E5E5"> close off that function</font>

237
00:10:36,190 --> 00:10:40,900
and call the alert function this is<font color="#CCCCCC"> a</font>

238
00:10:38,710 --> 00:10:43,120
proof of<font color="#CCCCCC"> concept that</font><font color="#E5E5E5"> we can run</font>

239
00:10:40,900 --> 00:10:46,780
JavaScript<font color="#CCCCCC"> on this particular landing</font>

240
00:10:43,120 --> 00:10:48,700
space another landing space that this

241
00:10:46,780 --> 00:10:51,819
type of including<font color="#E5E5E5"> will work is something</font>

242
00:10:48,700 --> 00:10:55,360
<font color="#E5E5E5">like on drag if the user input is this</font>

243
00:10:51,820 --> 00:11:00,190
<font color="#CCCCCC">again</font><font color="#E5E5E5"> highlighted in red</font><font color="#CCCCCC"> our parentheses</font>

244
00:10:55,360 --> 00:11:02,140
are hex encoded<font color="#E5E5E5"> and when a user</font><font color="#CCCCCC"> dried to</font>

245
00:11:00,190 --> 00:11:05,920
the XSS<font color="#CCCCCC"> that</font><font color="#E5E5E5"> will be visible on the page</font>

246
00:11:02,140 --> 00:11:08,680
<font color="#E5E5E5">the alert will fire so here we want</font><font color="#CCCCCC"> to</font>

247
00:11:05,920 --> 00:11:12,219
<font color="#CCCCCC">look at a quick</font><font color="#E5E5E5"> example of</font>

248
00:11:08,680 --> 00:11:15,310
<font color="#E5E5E5">this filter in practice so here we are</font>

249
00:11:12,220 --> 00:11:17,980
<font color="#E5E5E5">our user input reflected we're first</font>

250
00:11:15,310 --> 00:11:22,119
going<font color="#E5E5E5"> to demonstrate that</font><font color="#CCCCCC"> our user input</font>

251
00:11:17,980 --> 00:11:24,910
is being HTML output<font color="#E5E5E5"> encoded on won't be</font>

252
00:11:22,120 --> 00:11:28,649
<font color="#E5E5E5">treated as actual syntax so here we</font>

253
00:11:24,910 --> 00:11:28,649
can't break<font color="#E5E5E5"> out of the tag</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we're in</font>

254
00:11:29,279 --> 00:11:34,020
so next up we're going to include<font color="#E5E5E5"> the</font>

255
00:11:31,570 --> 00:11:36,339
injection<font color="#E5E5E5"> from the previous slide</font><font color="#CCCCCC"> our</font>

256
00:11:34,020 --> 00:11:46,329
single tick<font color="#E5E5E5"> closing</font><font color="#CCCCCC"> parenthesis</font>

257
00:11:36,339 --> 00:11:48,430
<font color="#E5E5E5">semicolon</font><font color="#CCCCCC"> alert function and here we're</font>

258
00:11:46,330 --> 00:11:49,930
<font color="#E5E5E5">going to click</font><font color="#CCCCCC"> on the title</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> the--</font>

259
00:11:48,430 --> 00:11:51,729
alert fired<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is our proof of concept</font>

260
00:11:49,930 --> 00:11:54,219
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we can run</font><font color="#CCCCCC"> JavaScript</font>

261
00:11:51,730 --> 00:11:59,370
in this<font color="#E5E5E5"> particular landing space HTML</font>

262
00:11:54,220 --> 00:12:02,200
and hex included our<font color="#CCCCCC"> second filter is</font>

263
00:11:59,370 --> 00:12:05,399
when our user input is being reflected

264
00:12:02,200 --> 00:12:08,770
<font color="#CCCCCC">within</font><font color="#E5E5E5"> a script block on the HTML page</font>

265
00:12:05,399 --> 00:12:11,770
in this case<font color="#E5E5E5"> developer is preventing the</font>

266
00:12:08,770 --> 00:12:14,860
user input from block from<font color="#E5E5E5"> escaping the</font>

267
00:12:11,770 --> 00:12:16,920
script tag<font color="#E5E5E5"> so for example closing out</font>

268
00:12:14,860 --> 00:12:20,260
the script<font color="#E5E5E5"> tag with our last on symbol</font>

269
00:12:16,920 --> 00:12:21,969
/script greater than<font color="#E5E5E5"> symbol the</font>

270
00:12:20,260 --> 00:12:23,920
developer might be just stripping<font color="#CCCCCC"> the</font>

271
00:12:21,970 --> 00:12:26,529
special characters<font color="#E5E5E5"> or</font><font color="#CCCCCC"> stripping the</font>

272
00:12:23,920 --> 00:12:28,599
keyword script in this particular case

273
00:12:26,529 --> 00:12:31,360
<font color="#E5E5E5">the</font><font color="#CCCCCC"> developer will be stripping</font><font color="#E5E5E5"> the</font>

274
00:12:28,600 --> 00:12:35,020
keyword script there's two options<font color="#CCCCCC"> that</font>

275
00:12:31,360 --> 00:12:37,420
we have here<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> is closing write</font>

276
00:12:35,020 --> 00:12:41,920
the JavaScript<font color="#CCCCCC"> that we're reflecting</font>

277
00:12:37,420 --> 00:12:45,189
<font color="#E5E5E5">into and putting in our string so in our</font>

278
00:12:41,920 --> 00:12:47,079
first example<font color="#E5E5E5"> and we're in a variable</font><font color="#CCCCCC"> on</font>

279
00:12:45,190 --> 00:12:50,339
our user input is reflected<font color="#CCCCCC"> within a</font>

280
00:12:47,080 --> 00:12:53,730
string so we're<font color="#E5E5E5"> putting in our</font><font color="#CCCCCC"> cent</font><font color="#E5E5E5"> our</font>

281
00:12:50,339 --> 00:12:56,320
quote or semicolon to end the statement

282
00:12:53,730 --> 00:12:57,610
calling<font color="#E5E5E5"> our alert function</font><font color="#CCCCCC"> on commenting</font>

283
00:12:56,320 --> 00:13:01,240
<font color="#CCCCCC">out the rest of</font><font color="#E5E5E5"> the string that's</font>

284
00:12:57,610 --> 00:13:04,870
<font color="#CCCCCC">leftover</font><font color="#E5E5E5"> now this works it works in the</font>

285
00:13:01,240 --> 00:13:06,700
majority<font color="#CCCCCC"> of places</font><font color="#E5E5E5"> however if you're</font>

286
00:13:04,870 --> 00:13:09,220
like if you're<font color="#E5E5E5"> the user</font><font color="#CCCCCC"> reflective</font>

287
00:13:06,700 --> 00:13:11,829
reflection is landing in a large piece

288
00:13:09,220 --> 00:13:14,529
of<font color="#E5E5E5"> script and functions and flag</font>

289
00:13:11,829 --> 00:13:17,620
functions it<font color="#E5E5E5"> can be really hard</font><font color="#CCCCCC"> to fix</font>

290
00:13:14,529 --> 00:13:19,240
the syntax when your user input is being

291
00:13:17,620 --> 00:13:20,320
when you're putting in certain

292
00:13:19,240 --> 00:13:23,610
characters in your user

293
00:13:20,320 --> 00:13:27,400
<font color="#E5E5E5">but javascript is key</font>

294
00:13:23,610 --> 00:13:30,940
<font color="#E5E5E5">javascript requires that the syntax be</font>

295
00:13:27,400 --> 00:13:34,240
correct<font color="#E5E5E5"> otherwise none of this the block</font>

296
00:13:30,940 --> 00:13:38,470
of script will run so this second

297
00:13:34,240 --> 00:13:41,530
injection<font color="#CCCCCC"> are quote star alert</font><font color="#E5E5E5"> star</font>

298
00:13:38,470 --> 00:13:43,720
quote this<font color="#CCCCCC"> is so much simpler</font><font color="#E5E5E5"> so much</font>

299
00:13:41,530 --> 00:13:45,819
<font color="#E5E5E5">easier because we're not breaking the</font>

300
00:13:43,720 --> 00:13:48,220
syntax<font color="#E5E5E5"> we're not trying to break out</font><font color="#CCCCCC"> of</font>

301
00:13:45,820 --> 00:13:49,660
the function<font color="#E5E5E5"> and that we're in so here</font>

302
00:13:48,220 --> 00:13:52,510
what we're doing is recruiting the

303
00:13:49,660 --> 00:13:55,959
string ABC<font color="#E5E5E5"> we're calling the alert</font>

304
00:13:52,510 --> 00:13:57,730
function<font color="#CCCCCC"> I'm creating a string</font><font color="#E5E5E5"> DF what</font>

305
00:13:55,960 --> 00:14:00,280
<font color="#E5E5E5">javascript is</font><font color="#CCCCCC"> going to do it's going to</font>

306
00:13:57,730 --> 00:14:01,780
notice that<font color="#CCCCCC"> we've got a string</font><font color="#E5E5E5"> we're</font>

307
00:14:00,280 --> 00:14:03,430
<font color="#E5E5E5">calling a function and we've got another</font>

308
00:14:01,780 --> 00:14:05,920
string<font color="#E5E5E5"> we're trying to</font><font color="#CCCCCC"> combine them</font>

309
00:14:03,430 --> 00:14:07,569
together<font color="#E5E5E5"> using mathematics so our stars</font>

310
00:14:05,920 --> 00:14:10,870
could be replaced with minus signs

311
00:14:07,570 --> 00:14:15,040
<font color="#E5E5E5">boards lashes or</font><font color="#CCCCCC"> pluses depending on the</font>

312
00:14:10,870 --> 00:14:17,110
mathematics you want to do and what's

313
00:14:15,040 --> 00:14:19,810
<font color="#E5E5E5">going to happen is</font><font color="#CCCCCC"> JavaScript is</font><font color="#E5E5E5"> going</font>

314
00:14:17,110 --> 00:14:22,000
to try<font color="#E5E5E5"> and combine the ABC with the</font>

315
00:14:19,810 --> 00:14:23,520
result of the alert function but the

316
00:14:22,000 --> 00:14:25,810
alert function doesn't<font color="#E5E5E5"> return a string</font>

317
00:14:23,520 --> 00:14:27,420
<font color="#E5E5E5">so after it's called the alert function</font>

318
00:14:25,810 --> 00:14:30,640
the<font color="#CCCCCC"> JavaScript actually</font><font color="#E5E5E5"> went to error</font>

319
00:14:27,420 --> 00:14:32,500
<font color="#E5E5E5">but it's it's</font><font color="#CCCCCC"> alright it's it's too late</font>

320
00:14:30,640 --> 00:14:35,199
<font color="#E5E5E5">we've all the attacker has already</font>

321
00:14:32,500 --> 00:14:38,530
called<font color="#E5E5E5"> has already called their function</font>

322
00:14:35,200 --> 00:14:42,070
and<font color="#E5E5E5"> their</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> their input has their</font>

323
00:14:38,530 --> 00:14:49,300
injection has fired so here we're going

324
00:14:42,070 --> 00:14:51,370
<font color="#CCCCCC">to</font><font color="#E5E5E5"> look at our filter in action so here</font>

325
00:14:49,300 --> 00:14:52,990
our user input is reflecting in<font color="#CCCCCC"> the same</font>

326
00:14:51,370 --> 00:14:55,570
place as in our example on the previous

327
00:14:52,990 --> 00:15:00,460
<font color="#CCCCCC">slide</font><font color="#E5E5E5"> and here in the developer is</font>

328
00:14:55,570 --> 00:15:04,420
simply taking<font color="#CCCCCC"> our keyword script</font><font color="#E5E5E5"> if we</font>

329
00:15:00,460 --> 00:15:10,510
put in<font color="#E5E5E5"> our mathematics function</font><font color="#CCCCCC"> our</font>

330
00:15:04,420 --> 00:15:13,209
<font color="#CCCCCC">Alert fires immediately our next filter</font>

331
00:15:10,510 --> 00:15:15,390
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the white/black listing so we've</font>

332
00:15:13,210 --> 00:15:18,370
talked a little bit about<font color="#CCCCCC"> blacklisting</font>

333
00:15:15,390 --> 00:15:20,470
so in this case our developer is

334
00:15:18,370 --> 00:15:23,410
preventing users from using<font color="#E5E5E5"> certain</font>

335
00:15:20,470 --> 00:15:25,690
event handlers<font color="#E5E5E5"> and tag names in this</font>

336
00:15:23,410 --> 00:15:27,730
particular example<font color="#E5E5E5"> our developer only</font>

337
00:15:25,690 --> 00:15:30,460
knows of a few<font color="#CCCCCC"> ty one tag and</font><font color="#E5E5E5"> a few</font>

338
00:15:27,730 --> 00:15:32,579
event handlers so body on<font color="#E5E5E5"> cliquey and my</font>

339
00:15:30,460 --> 00:15:35,259
silver

340
00:15:32,579 --> 00:15:36,638
this is a pretty short<font color="#CCCCCC"> black</font><font color="#E5E5E5"> list most</font>

341
00:15:35,259 --> 00:15:38,980
black lists on the<font color="#E5E5E5"> web are going to be a</font>

342
00:15:36,639 --> 00:15:41,079
lot more<font color="#E5E5E5"> extensive than this but for</font>

343
00:15:38,980 --> 00:15:43,749
<font color="#E5E5E5">this quick example</font><font color="#CCCCCC"> here are three things</font>

344
00:15:41,079 --> 00:15:47,469
that<font color="#E5E5E5"> can</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> around that black</font><font color="#CCCCCC"> list</font><font color="#E5E5E5"> so</font>

345
00:15:43,749 --> 00:15:51,069
input<font color="#E5E5E5"> on</font><font color="#CCCCCC"> Weill SVG on</font><font color="#E5E5E5"> double-click image</font>

346
00:15:47,470 --> 00:15:55,569
on<font color="#E5E5E5"> M</font><font color="#CCCCCC"> s pointer over OMS</font><font color="#E5E5E5"> pointer over is</font>

347
00:15:51,069 --> 00:15:58,300
an<font color="#CCCCCC"> IE 10 only and event handler</font><font color="#E5E5E5"> but</font>

348
00:15:55,569 --> 00:16:00,759
<font color="#E5E5E5">it'll still work for an attacker these</font>

349
00:15:58,300 --> 00:16:04,870
are just some<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> many ways</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

350
00:16:00,759 --> 00:16:06,999
can break this particular<font color="#E5E5E5"> black list so</font>

351
00:16:04,870 --> 00:16:09,129
here's an example<font color="#E5E5E5"> of why a black list is</font>

352
00:16:06,999 --> 00:16:11,680
a pretty bad idea<font color="#CCCCCC"> this is just some of</font>

353
00:16:09,129 --> 00:16:16,689
the event<font color="#CCCCCC"> handlers</font><font color="#E5E5E5"> that we</font><font color="#CCCCCC"> knew know of</font>

354
00:16:11,680 --> 00:16:18,699
today<font color="#E5E5E5"> and it's quite extensive there's</font>

355
00:16:16,689 --> 00:16:21,399
there's a<font color="#E5E5E5"> lot of them so when new</font>

356
00:16:18,699 --> 00:16:24,189
versions<font color="#CCCCCC"> of HTML are released</font><font color="#E5E5E5"> such as</font>

357
00:16:21,399 --> 00:16:25,990
the most recent<font color="#CCCCCC"> HTML 5 new tags and</font>

358
00:16:24,189 --> 00:16:28,300
event handlers become<font color="#CCCCCC"> available</font><font color="#E5E5E5"> for</font>

359
00:16:25,990 --> 00:16:30,490
attackers<font color="#E5E5E5"> to execute</font><font color="#CCCCCC"> JavaScript on web</font>

360
00:16:28,300 --> 00:16:32,019
applications<font color="#CCCCCC"> this</font><font color="#E5E5E5"> means that there's</font>

361
00:16:30,490 --> 00:16:33,879
<font color="#E5E5E5">more</font><font color="#CCCCCC"> work for the developers who are</font>

362
00:16:32,019 --> 00:16:36,610
maintaining<font color="#CCCCCC"> this</font><font color="#E5E5E5"> blacklist but there's</font>

363
00:16:33,879 --> 00:16:38,319
also room<font color="#CCCCCC"> for error</font><font color="#E5E5E5"> missing a single</font>

364
00:16:36,610 --> 00:16:40,420
event handler should make your

365
00:16:38,319 --> 00:16:42,189
application vulnerable to access s<font color="#E5E5E5"> it</font>

366
00:16:40,420 --> 00:16:44,949
could be just misspelling an event

367
00:16:42,189 --> 00:16:46,930
handler<font color="#E5E5E5"> there's also the problem</font><font color="#CCCCCC"> with</font>

368
00:16:44,949 --> 00:16:48,969
how long<font color="#E5E5E5"> it takes years of the developer</font>

369
00:16:46,930 --> 00:16:51,670
<font color="#CCCCCC">to update the black</font><font color="#E5E5E5"> list when new</font><font color="#CCCCCC"> things</font>

370
00:16:48,970 --> 00:16:53,110
come on it could<font color="#E5E5E5"> be a couple</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> hours it</font>

371
00:16:51,670 --> 00:16:54,819
could<font color="#E5E5E5"> be a couple</font><font color="#CCCCCC"> of months it could</font><font color="#E5E5E5"> be</font>

372
00:16:53,110 --> 00:16:57,149
a couple<font color="#CCCCCC"> of</font><font color="#E5E5E5"> years that any web</font>

373
00:16:54,819 --> 00:17:01,649
application<font color="#E5E5E5"> relying on that black list</font>

374
00:16:57,149 --> 00:17:01,649
they could be vulnerable<font color="#E5E5E5"> to access s</font>

375
00:17:02,579 --> 00:17:09,730
here is<font color="#CCCCCC"> another example of our filter</font>

376
00:17:06,220 --> 00:17:12,899
working so our user input is being

377
00:17:09,730 --> 00:17:15,849
<font color="#CCCCCC">reflected in</font><font color="#E5E5E5"> a plain text</font><font color="#CCCCCC"> area</font><font color="#E5E5E5"> of HTML</font>

378
00:17:12,898 --> 00:17:19,030
we're going to<font color="#E5E5E5"> just want to show that</font>

379
00:17:15,849 --> 00:17:24,398
<font color="#E5E5E5">the body on my silver tag is simply</font>

380
00:17:19,030 --> 00:17:30,789
being<font color="#E5E5E5"> removed by the developer if we</font>

381
00:17:24,398 --> 00:17:32,379
include our input on wheel when a user

382
00:17:30,789 --> 00:17:36,539
wheels over<font color="#CCCCCC"> the input that will be</font>

383
00:17:32,380 --> 00:17:36,539
<font color="#E5E5E5">displayed on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> page the alert fires</font>

384
00:17:39,570 --> 00:17:44,860
another filter<font color="#E5E5E5"> that we have is when the</font>

385
00:17:42,430 --> 00:17:47,710
<font color="#CCCCCC">user input</font><font color="#E5E5E5"> is reflecting in a hidden</font>

386
00:17:44,860 --> 00:17:49,929
input<font color="#CCCCCC"> fields</font><font color="#E5E5E5"> the developer in this case</font>

387
00:17:47,710 --> 00:17:52,570
is preventing the user input from

388
00:17:49,930 --> 00:17:55,450
escaping<font color="#E5E5E5"> the input tag</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> user</font>

389
00:17:52,570 --> 00:17:56,860
input is reflected<font color="#E5E5E5"> into there are three</font>

390
00:17:55,450 --> 00:18:00,700
things that an attacker could<font color="#E5E5E5"> do here</font>

391
00:17:56,860 --> 00:18:03,790
the first on ours<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> slide here is a</font>

392
00:18:00,700 --> 00:18:06,490
style injection so our style equals<font color="#E5E5E5"> X</font>

393
00:18:03,790 --> 00:18:08,080
expression<font color="#E5E5E5"> alert this is going to call</font>

394
00:18:06,490 --> 00:18:11,140
the<font color="#CCCCCC"> alert function</font><font color="#E5E5E5"> when the style</font>

395
00:18:08,080 --> 00:18:13,750
attribute<font color="#CCCCCC"> is applied</font><font color="#E5E5E5"> lucky for us</font>

396
00:18:11,140 --> 00:18:16,090
or lucky<font color="#E5E5E5"> for an attacker style is always</font>

397
00:18:13,750 --> 00:18:18,370
<font color="#E5E5E5">applied to every input tag regardless of</font>

398
00:18:16,090 --> 00:18:20,770
whether it's<font color="#E5E5E5"> hidden or not this is</font>

399
00:18:18,370 --> 00:18:22,750
however an<font color="#E5E5E5"> IE 7 or</font><font color="#CCCCCC"> newer vulnerability</font>

400
00:18:20,770 --> 00:18:28,840
<font color="#E5E5E5">which means that it's got a limited from</font>

401
00:18:22,750 --> 00:18:31,060
victim range sometimes<font color="#E5E5E5"> user input can</font><font color="#CCCCCC"> be</font>

402
00:18:28,840 --> 00:18:33,909
reflected<font color="#CCCCCC"> before the type is declared</font><font color="#E5E5E5"> in</font>

403
00:18:31,060 --> 00:18:36,310
an input field<font color="#E5E5E5"> something that each t ml</font>

404
00:18:33,910 --> 00:18:39,430
does is it takes the first<font color="#E5E5E5"> attribute and</font>

405
00:18:36,310 --> 00:18:41,590
ignores<font color="#E5E5E5"> any duplicates so in this case</font>

406
00:18:39,430 --> 00:18:44,260
an attacker is able to<font color="#E5E5E5"> declare the type</font>

407
00:18:41,590 --> 00:18:46,000
equals text<font color="#E5E5E5"> this input is no longer</font>

408
00:18:44,260 --> 00:18:48,040
hidden<font color="#E5E5E5"> it's going to be visible on the</font>

409
00:18:46,000 --> 00:18:51,100
<font color="#CCCCCC">ph whether the developer wanted it to or</font>

410
00:18:48,040 --> 00:18:53,110
not they can then<font color="#CCCCCC"> go and</font><font color="#E5E5E5"> use any other</font>

411
00:18:51,100 --> 00:18:55,689
event hunter they that the developer

412
00:18:53,110 --> 00:18:58,870
hasn't blocked<font color="#E5E5E5"> so</font><font color="#CCCCCC"> onmouseover</font><font color="#E5E5E5"> equals</font>

413
00:18:55,690 --> 00:19:02,470
alert when a user<font color="#E5E5E5"> Mouse's over that</font>

414
00:18:58,870 --> 00:19:06,280
<font color="#CCCCCC">input field</font><font color="#E5E5E5"> the other fires our third</font>

415
00:19:02,470 --> 00:19:08,410
way of getting an<font color="#E5E5E5"> injection into hidden</font>

416
00:19:06,280 --> 00:19:12,670
input field<font color="#E5E5E5"> is an</font><font color="#CCCCCC"> attribute called</font>

417
00:19:08,410 --> 00:19:15,700
access key creating a access key where

418
00:19:12,670 --> 00:19:18,190
we declare that<font color="#CCCCCC"> a certain and character</font>

419
00:19:15,700 --> 00:19:21,160
on the keyboard<font color="#E5E5E5"> is our access key</font><font color="#CCCCCC"> in</font>

420
00:19:18,190 --> 00:19:23,380
this<font color="#E5E5E5"> case it's X we</font><font color="#CCCCCC"> use the</font><font color="#E5E5E5"> event</font>

421
00:19:21,160 --> 00:19:26,800
handler<font color="#E5E5E5"> on click give it the value alert</font>

422
00:19:23,380 --> 00:19:30,040
and when a user<font color="#E5E5E5"> clicks the buttons</font>

423
00:19:26,800 --> 00:19:35,110
<font color="#CCCCCC">Control Alt X on a mark or alt shift X</font>

424
00:19:30,040 --> 00:19:39,180
on<font color="#CCCCCC"> Windows the alert fires it's going to</font>

425
00:19:35,110 --> 00:19:41,770
be a<font color="#CCCCCC"> problem but</font><font color="#E5E5E5"> it would</font><font color="#CCCCCC"> be possible to</font>

426
00:19:39,180 --> 00:19:44,820
social engineer someone into clicking

427
00:19:41,770 --> 00:19:47,230
<font color="#E5E5E5">those keys to get something to happen</font><font color="#CCCCCC"> it</font>

428
00:19:44,820 --> 00:19:48,550
<font color="#CCCCCC">would be pretty</font><font color="#E5E5E5"> easy to tell someone hey</font>

429
00:19:47,230 --> 00:19:52,210
click on these<font color="#E5E5E5"> buttons and you'll see a</font>

430
00:19:48,550 --> 00:19:52,540
funny cat picture so here we're<font color="#E5E5E5"> going to</font>

431
00:19:52,210 --> 00:19:55,030
see

432
00:19:52,540 --> 00:20:00,000
another example<font color="#CCCCCC"> of this hidden input</font>

433
00:19:55,030 --> 00:20:02,379
field and examples of<font color="#E5E5E5"> our access key</font>

434
00:20:00,000 --> 00:20:04,810
<font color="#E5E5E5">injection working so first of all</font>

435
00:20:02,380 --> 00:20:11,740
showing that we<font color="#CCCCCC"> cannot</font><font color="#E5E5E5"> break out</font><font color="#CCCCCC"> of the</font>

436
00:20:04,810 --> 00:20:15,010
tag so here we can see the developer is

437
00:20:11,740 --> 00:20:17,110
hex encoding<font color="#CCCCCC"> the greater than symbol</font><font color="#E5E5E5"> so</font>

438
00:20:15,010 --> 00:20:23,590
that<font color="#CCCCCC"> we can close out the</font><font color="#E5E5E5"> hidden input</font>

439
00:20:17,110 --> 00:20:35,709
tag so we're going to stay within the

440
00:20:23,590 --> 00:20:39,149
<font color="#E5E5E5">input tag and declare access key so when</font>

441
00:20:35,710 --> 00:20:42,460
the user clicks the appropriate buttons

442
00:20:39,150 --> 00:20:51,820
after this page is rendered the alert

443
00:20:42,460 --> 00:20:54,220
will fire there we are in this

444
00:20:51,820 --> 00:20:56,230
particular<font color="#CCCCCC"> example we are</font><font color="#E5E5E5"> also falling</font>

445
00:20:54,220 --> 00:20:58,900
<font color="#E5E5E5">the user input is also falling</font><font color="#CCCCCC"> before</font>

446
00:20:56,230 --> 00:21:02,200
type equals hidden so just to give an

447
00:20:58,900 --> 00:21:04,330
example<font color="#CCCCCC"> of declaring type equals text as</font>

448
00:21:02,200 --> 00:21:07,380
you can see the<font color="#E5E5E5"> hit the input field</font>

449
00:21:04,330 --> 00:21:10,300
isn't<font color="#E5E5E5"> visible on the</font><font color="#CCCCCC"> page at this time</font>

450
00:21:07,380 --> 00:21:13,180
but<font color="#E5E5E5"> there the input field is not visible</font>

451
00:21:10,300 --> 00:21:18,280
<font color="#E5E5E5">and when</font><font color="#CCCCCC"> the user clicks</font><font color="#E5E5E5"> on it</font><font color="#CCCCCC"> the alert</font>

452
00:21:13,180 --> 00:21:20,410
fired another filter that we've got is

453
00:21:18,280 --> 00:21:24,370
when a<font color="#CCCCCC"> developer is filtering or</font>

454
00:21:20,410 --> 00:21:26,550
filtering<font color="#E5E5E5"> on any tag for</font><font color="#CCCCCC"> example when a</font>

455
00:21:24,370 --> 00:21:29,020
less on symbol is followed by<font color="#CCCCCC"> a letter</font>

456
00:21:26,550 --> 00:21:31,260
<font color="#CCCCCC">developer will either strip out</font><font color="#E5E5E5"> the less</font>

457
00:21:29,020 --> 00:21:35,020
than symbol<font color="#E5E5E5"> strip out the tag entirely</font>

458
00:21:31,260 --> 00:21:39,820
or some other way to prevent the tag

459
00:21:35,020 --> 00:21:44,670
being rendered as a tag<font color="#E5E5E5"> no in plain text</font>

460
00:21:39,820 --> 00:21:48,610
areas of HTML<font color="#E5E5E5"> this may prevent XSS</font>

461
00:21:44,670 --> 00:21:51,070
<font color="#E5E5E5">unless you're using</font><font color="#CCCCCC"> IE</font><font color="#E5E5E5"> 9 in</font><font color="#CCCCCC"> i9 you can</font>

462
00:21:48,610 --> 00:21:55,090
put in a percentage sign between the

463
00:21:51,070 --> 00:21:57,639
less on symbol<font color="#CCCCCC"> on the letter and i9 will</font>

464
00:21:55,090 --> 00:22:00,639
actually treat this as an<font color="#E5E5E5"> actual tie</font><font color="#CCCCCC"> so</font>

465
00:21:57,640 --> 00:22:03,850
we can an attacker<font color="#E5E5E5"> can use on my silver</font>

466
00:22:00,640 --> 00:22:06,070
equals alert when someone<font color="#E5E5E5"> watches over</font>

467
00:22:03,850 --> 00:22:11,050
the ABC<font color="#CCCCCC"> that'll be</font><font color="#E5E5E5"> visible</font><font color="#CCCCCC"> on the page</font>

468
00:22:06,070 --> 00:22:22,800
the alert will fire<font color="#CCCCCC"> so</font><font color="#E5E5E5"> here another</font>

469
00:22:11,050 --> 00:22:26,520
<font color="#CCCCCC">example so here we're showing that</font><font color="#E5E5E5"> our</font>

470
00:22:22,800 --> 00:22:29,740
user inputs reflected in flame tags

471
00:22:26,520 --> 00:22:32,770
we're going to show<font color="#E5E5E5"> that any tag is not</font>

472
00:22:29,740 --> 00:22:36,670
<font color="#E5E5E5">is being filtered</font><font color="#CCCCCC"> out all</font><font color="#E5E5E5"> were left with</font>

473
00:22:32,770 --> 00:22:38,440
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the 1 to 3 of</font><font color="#E5E5E5"> our input now when we</font>

474
00:22:36,670 --> 00:22:40,540
put in<font color="#E5E5E5"> the percentage sign between the</font>

475
00:22:38,440 --> 00:22:42,670
less than symbol<font color="#CCCCCC"> and the tag name</font>

476
00:22:40,540 --> 00:22:44,800
we expect<font color="#CCCCCC"> that user input to not be</font>

477
00:22:42,670 --> 00:22:48,010
reflected<font color="#CCCCCC"> anymore</font><font color="#E5E5E5"> it's being treated as</font>

478
00:22:44,800 --> 00:22:49,680
an actual tag so now if<font color="#CCCCCC"> we put in</font><font color="#E5E5E5"> the</font>

479
00:22:48,010 --> 00:22:55,590
fill injection<font color="#E5E5E5"> from the previous slide</font>

480
00:22:49,680 --> 00:22:55,590
any tag on my super equals alert ABC

481
00:23:00,720 --> 00:23:06,250
there we are

482
00:23:01,990 --> 00:23:07,780
<font color="#CCCCCC">ABCs on the</font><font color="#E5E5E5"> pH alert fired just</font><font color="#CCCCCC"> to</font>

483
00:23:06,250 --> 00:23:11,080
<font color="#CCCCCC">demonstrate</font><font color="#E5E5E5"> that this is are actually</font>

484
00:23:07,780 --> 00:23:12,520
being rendered on the page<font color="#E5E5E5"> I'm going to</font>

485
00:23:11,080 --> 00:23:20,500
<font color="#E5E5E5">look at the source code just</font><font color="#CCCCCC"> to prove</font>

486
00:23:12,520 --> 00:23:22,060
that<font color="#E5E5E5"> that tag is</font><font color="#CCCCCC"> actually there the</font>

487
00:23:20,500 --> 00:23:24,580
final filter that I've got<font color="#E5E5E5"> for</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> today</font>

488
00:23:22,060 --> 00:23:26,620
is when a developer appears to be

489
00:23:24,580 --> 00:23:29,889
filtering<font color="#E5E5E5"> on all special characters that</font>

490
00:23:26,620 --> 00:23:32,620
<font color="#CCCCCC">seem that</font><font color="#E5E5E5"> are required to exploit XSS</font>

491
00:23:29,890 --> 00:23:35,680
for example quotes<font color="#E5E5E5"> that less</font><font color="#CCCCCC"> than and</font>

492
00:23:32,620 --> 00:23:38,979
greater than symbols single<font color="#E5E5E5"> ticks pluses</font>

493
00:23:35,680 --> 00:23:41,650
and equal signs<font color="#E5E5E5"> this particular</font>

494
00:23:38,980 --> 00:23:43,930
injection is landing in a document<font color="#E5E5E5"> dot</font>

495
00:23:41,650 --> 00:23:45,700
write within script space<font color="#E5E5E5"> what's going</font>

496
00:23:43,930 --> 00:23:49,240
to<font color="#E5E5E5"> happen is the document dot write is</font>

497
00:23:45,700 --> 00:23:53,170
<font color="#E5E5E5">going to write this input</font><font color="#CCCCCC"> under the</font><font color="#E5E5E5"> pH</font>

498
00:23:49,240 --> 00:23:55,510
when it<font color="#E5E5E5"> runs but we need those special</font>

499
00:23:53,170 --> 00:23:58,030
<font color="#CCCCCC">characters to create the tag</font><font color="#E5E5E5"> so in this</font>

500
00:23:55,510 --> 00:24:01,480
case we can use hex<font color="#E5E5E5"> and today encoding</font>

501
00:23:58,030 --> 00:24:03,940
which is our backslash x3c is our<font color="#E5E5E5"> lesson</font>

502
00:24:01,480 --> 00:24:07,060
symbol we're creating an arbitrary tag

503
00:24:03,940 --> 00:24:09,910
name<font color="#CCCCCC"> XSS using the event handler</font><font color="#E5E5E5"> on my</font>

504
00:24:07,060 --> 00:24:13,240
silver box<font color="#CCCCCC"> I x3d</font><font color="#E5E5E5"> is our</font><font color="#CCCCCC"> equals</font><font color="#E5E5E5"> sign and</font>

505
00:24:09,910 --> 00:24:16,660
in this particular<font color="#E5E5E5"> case the developer is</font>

506
00:24:13,240 --> 00:24:18,040
actually blocking<font color="#E5E5E5"> keyword alert</font><font color="#CCCCCC"> and so</font>

507
00:24:16,660 --> 00:24:20,029
we're using<font color="#E5E5E5"> this function called top</font>

508
00:24:18,040 --> 00:24:23,299
that's<font color="#CCCCCC"> going to combine the</font>

509
00:24:20,029 --> 00:24:26,809
<font color="#E5E5E5">le string with</font><font color="#CCCCCC"> our T string to</font><font color="#E5E5E5"> create</font>

510
00:24:23,299 --> 00:24:29,239
our function<font color="#CCCCCC"> so we're backslash</font><font color="#E5E5E5"> X 27 is</font>

511
00:24:26,809 --> 00:24:33,019
our single<font color="#E5E5E5"> tick to create our string box</font>

512
00:24:29,239 --> 00:24:35,239
<font color="#CCCCCC">slash X to be is our Plus on box /</font><font color="#E5E5E5"> x</font><font color="#CCCCCC"> 3 e</font>

513
00:24:33,019 --> 00:24:38,479
is our greater than symbol<font color="#CCCCCC"> to close the</font>

514
00:24:35,239 --> 00:24:40,340
tag<font color="#CCCCCC"> a winning user</font><font color="#E5E5E5"> much is over the axis</font>

515
00:24:38,479 --> 00:24:43,369
is displayed on<font color="#CCCCCC"> the page</font><font color="#E5E5E5"> the alert will</font>

516
00:24:40,340 --> 00:24:47,840
fire so again we're going to<font color="#E5E5E5"> see an</font>

517
00:24:43,369 --> 00:24:49,549
<font color="#E5E5E5">example of this filter in</font><font color="#CCCCCC"> place so user</font>

518
00:24:47,840 --> 00:24:53,689
input is reflecting within a<font color="#CCCCCC"> document</font>

519
00:24:49,549 --> 00:24:56,210
dot<font color="#E5E5E5"> right just to verify that user input</font>

520
00:24:53,690 --> 00:24:57,710
cannot be used and the special

521
00:24:56,210 --> 00:25:00,759
characters can't just be used<font color="#CCCCCC"> normally</font>

522
00:24:57,710 --> 00:25:06,830
<font color="#E5E5E5">so we can't close out</font><font color="#CCCCCC"> of the script I</font>

523
00:25:00,759 --> 00:25:08,839
<font color="#CCCCCC">yep so here we've completely removed</font>

524
00:25:06,830 --> 00:25:11,210
some of<font color="#E5E5E5"> the special</font><font color="#CCCCCC"> characters and</font><font color="#E5E5E5"> the</font>

525
00:25:08,839 --> 00:25:12,950
keyword script including our injection

526
00:25:11,210 --> 00:25:15,979
<font color="#E5E5E5">from the previous page or XSS</font>

527
00:25:12,950 --> 00:25:16,609
<font color="#E5E5E5">onmouseover equals top alert with all</font>

528
00:25:15,979 --> 00:25:18,799
our exes

529
00:25:16,609 --> 00:25:23,059
we must over those X's on the alert

530
00:25:18,799 --> 00:25:25,849
fires<font color="#E5E5E5"> this is a fairly unique way to get</font>

531
00:25:23,059 --> 00:25:27,408
in XSS on a<font color="#CCCCCC"> pH</font><font color="#E5E5E5"> it doesn't come up an</font>

532
00:25:25,849 --> 00:25:30,529
awful lot where we reflect<font color="#E5E5E5"> it in</font><font color="#CCCCCC"> a</font>

533
00:25:27,409 --> 00:25:32,719
<font color="#E5E5E5">document dot right so today I've covered</font>

534
00:25:30,529 --> 00:25:35,179
six different<font color="#E5E5E5"> filters with yourselves so</font>

535
00:25:32,719 --> 00:25:38,210
<font color="#E5E5E5">I put including blocking</font><font color="#CCCCCC"> and closing</font>

536
00:25:35,179 --> 00:25:40,729
script<font color="#E5E5E5"> tag</font><font color="#CCCCCC"> black listing hidden field</font>

537
00:25:38,210 --> 00:25:42,859
where the developer is stopping<font color="#E5E5E5"> you from</font>

538
00:25:40,729 --> 00:25:46,940
swapping attacker<font color="#E5E5E5"> from escaping</font><font color="#CCCCCC"> the</font>

539
00:25:42,859 --> 00:25:48,830
<font color="#E5E5E5">input tag filtering of any tag filtering</font>

540
00:25:46,940 --> 00:25:53,089
all special characters<font color="#CCCCCC"> that seem that</font>

541
00:25:48,830 --> 00:25:55,989
are required<font color="#E5E5E5"> for XSS thank you for your</font>

542
00:25:53,089 --> 00:25:55,989
time are there any questions

543
00:26:26,570 --> 00:26:37,789
well thanks

544
00:26:40,350 --> 00:26:42,409
<font color="#E5E5E5">you</font>

