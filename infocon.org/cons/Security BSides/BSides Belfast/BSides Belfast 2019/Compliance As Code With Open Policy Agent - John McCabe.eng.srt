1
00:00:00,530 --> 00:00:02,590
you

2
00:00:02,830 --> 00:00:05,180
yeah so today I'm going to touch on a

3
00:00:05,180 --> 00:00:07,880
few topics kind of following on from the

4
00:00:07,880 --> 00:00:10,580
previous talk were he had a mansions for

5
00:00:10,580 --> 00:00:12,680
the increased sort of visibility of

6
00:00:12,680 --> 00:00:14,690
compliance in the accrete visibility of

7
00:00:14,690 --> 00:00:17,840
automation coming sort of as a result of

8
00:00:17,840 --> 00:00:20,390
of changes in the infrastructure world

9
00:00:20,390 --> 00:00:21,890
in the development world through DevOps

10
00:00:21,890 --> 00:00:23,779
so we're gonna be looking at a

11
00:00:23,779 --> 00:00:25,820
particular project that I've been using

12
00:00:25,820 --> 00:00:27,920
and as being increasingly widely used

13
00:00:27,920 --> 00:00:28,279
called

14
00:00:28,279 --> 00:00:32,830
open policy agents so--but about me a

15
00:00:32,830 --> 00:00:35,050
John McCabe I'm a software engineer

16
00:00:35,050 --> 00:00:36,320
Proofpoint

17
00:00:36,320 --> 00:00:40,309
I started off back when you would go and

18
00:00:40,309 --> 00:00:43,010
physically mount a rack and wire stuff

19
00:00:43,010 --> 00:00:44,960
up yourself before vm's before

20
00:00:44,960 --> 00:00:47,199
containers before anything like that

21
00:00:47,199 --> 00:00:49,430
you'd waste a huge amount of time and

22
00:00:49,430 --> 00:00:51,890
then we got VMs and suddenly things were

23
00:00:51,890 --> 00:00:53,629
more sort of controlled and you could

24
00:00:53,629 --> 00:00:55,309
sort of do things more efficiently more

25
00:00:55,309 --> 00:00:57,379
quickly and then containers came along

26
00:00:57,379 --> 00:01:01,220
and you you got increased sort of at you

27
00:01:01,220 --> 00:01:04,390
ever be there as well and I've worked in

28
00:01:04,390 --> 00:01:06,979
automation at puppet and on the apache

29
00:01:06,979 --> 00:01:09,439
brooklyn project and specifically

30
00:01:09,439 --> 00:01:11,840
focused on this idea of automating and

31
00:01:11,840 --> 00:01:14,270
removing friction and sort of removing

32
00:01:14,270 --> 00:01:16,609
the human part from process where it's

33
00:01:16,609 --> 00:01:18,590
just where we're not great at following

34
00:01:18,590 --> 00:01:20,990
so proof point just got to do the

35
00:01:20,990 --> 00:01:23,390
obligatory thing we're hiring so we've a

36
00:01:23,390 --> 00:01:26,060
booth at in the stall if you want to

37
00:01:26,060 --> 00:01:27,590
kind of drop by and have a chat we're

38
00:01:27,590 --> 00:01:29,390
recruiting for quite a few roles here in

39
00:01:29,390 --> 00:01:32,719
Belfast so let's start off by just

40
00:01:32,719 --> 00:01:34,729
asking the simple question what is

41
00:01:34,729 --> 00:01:37,700
compliance it's not hard it's following

42
00:01:37,700 --> 00:01:38,179
rules

43
00:01:38,179 --> 00:01:41,600
meeting standards and as time goes on

44
00:01:41,600 --> 00:01:44,659
organizations are facing increasing sort

45
00:01:44,659 --> 00:01:46,579
of numbers of regulations and

46
00:01:46,579 --> 00:01:48,609
requirements whether it's statutory or

47
00:01:48,609 --> 00:01:50,990
contractual or legal that they need to

48
00:01:50,990 --> 00:01:52,600
follow and that can impact

49
00:01:52,600 --> 00:01:54,499
infrastructure it can impact

50
00:01:54,499 --> 00:01:56,780
software you know it touches all parts

51
00:01:56,780 --> 00:02:00,710
of the organization's now so compliance

52
00:02:00,710 --> 00:02:03,109
with Walsh so you're you're compliant

53
00:02:03,109 --> 00:02:04,819
with a policy you know it's not hard a

54
00:02:04,819 --> 00:02:07,520
policy is just a rule

55
00:02:07,520 --> 00:02:09,139
so your organization has a set of

56
00:02:09,139 --> 00:02:11,870
security policies perhaps that identify

57
00:02:11,870 --> 00:02:13,370
the rules and processes and procedures

58
00:02:13,370 --> 00:02:15,680
that everybody in the organization is

59
00:02:15,680 --> 00:02:16,230
expected

60
00:02:16,230 --> 00:02:18,510
follow that if you run a service in

61
00:02:18,510 --> 00:02:21,390
production you need to have XYZ sort of

62
00:02:21,390 --> 00:02:22,950
completed so that we know that we're

63
00:02:22,950 --> 00:02:25,470
sort of compliant with whatever sort of

64
00:02:25,470 --> 00:02:30,090
policies that are intentioned on us it's

65
00:02:30,090 --> 00:02:32,190
usually a wrapper a good sort of model

66
00:02:32,190 --> 00:02:34,049
of an organization's culture you know

67
00:02:34,049 --> 00:02:36,150
you can kind of see from the policies

68
00:02:36,150 --> 00:02:38,160
how an organization has evolved over

69
00:02:38,160 --> 00:02:41,849
time and quite often the approach is

70
00:02:41,849 --> 00:02:43,829
very manual it's very human there's like

71
00:02:43,829 --> 00:02:46,829
a sort of an oral tradition to policy

72
00:02:46,829 --> 00:02:48,120
and it's all sort of very sort of

73
00:02:48,120 --> 00:02:52,470
person-to-person is this okay we have

74
00:02:52,470 --> 00:02:55,230
policies we have compliance is this

75
00:02:55,230 --> 00:02:58,620
actually okay I would contend it's not

76
00:02:58,620 --> 00:03:00,959
that's kind of the the crux of the talk

77
00:03:00,959 --> 00:03:03,390
I'm going to have here I don't think

78
00:03:03,390 --> 00:03:05,720
it's actually working particularly well

79
00:03:05,720 --> 00:03:09,090
sort of across most organizations you

80
00:03:09,090 --> 00:03:12,090
know the problem invariably comes down

81
00:03:12,090 --> 00:03:15,420
to you're seeing a disjoint in the rate

82
00:03:15,420 --> 00:03:18,120
of evolution between the sort of the

83
00:03:18,120 --> 00:03:19,950
gatekeepers of security and compliance

84
00:03:19,950 --> 00:03:22,919
in an organization and the technologies

85
00:03:22,919 --> 00:03:26,340
are increasingly sort of resulting in

86
00:03:26,340 --> 00:03:29,040
sort of speed and iteration and you know

87
00:03:29,040 --> 00:03:30,750
if things are increasingly and ephemeral

88
00:03:30,750 --> 00:03:32,069
you know it's very hard to keep track

89
00:03:32,069 --> 00:03:34,730
and security policy specifically in

90
00:03:34,730 --> 00:03:38,579
organisations quite often it's JIRA

91
00:03:38,579 --> 00:03:39,060
tickets

92
00:03:39,060 --> 00:03:42,209
it's spreadsheets it's you know Word

93
00:03:42,209 --> 00:03:45,269
documents wiki pages these aren't great

94
00:03:45,269 --> 00:03:47,250
things these are you're describing sort

95
00:03:47,250 --> 00:03:49,130
of very important policies and

96
00:03:49,130 --> 00:03:52,769
requirements human to human and that's

97
00:03:52,769 --> 00:03:54,720
very different because you can have

98
00:03:54,720 --> 00:03:56,910
misunderstanding you can have the

99
00:03:56,910 --> 00:03:58,829
bandwidth as you increase the number of

100
00:03:58,829 --> 00:04:00,780
policies just it breaks down you can

101
00:04:00,780 --> 00:04:02,430
only remember so many things so what

102
00:04:02,430 --> 00:04:04,530
you'll find is new policies come out

103
00:04:04,530 --> 00:04:07,169
there's a flurry of activity everybody's

104
00:04:07,169 --> 00:04:09,569
very busy everything gets dropped okay

105
00:04:09,569 --> 00:04:11,970
you're compliant and then over time are

106
00:04:11,970 --> 00:04:14,220
you still compliant are there services

107
00:04:14,220 --> 00:04:15,629
that are sort of haven't been touched

108
00:04:15,629 --> 00:04:17,039
for a while because the project hasn't

109
00:04:17,039 --> 00:04:18,899
had people working on other they know

110
00:04:18,899 --> 00:04:20,668
non complaint there's a lot of gaps

111
00:04:20,668 --> 00:04:22,680
where things fall through and it's

112
00:04:22,680 --> 00:04:25,110
predominantly down to us having what

113
00:04:25,110 --> 00:04:26,400
effect could be a process driven

114
00:04:26,400 --> 00:04:27,700
approach

115
00:04:27,700 --> 00:04:32,020
to policy and compliance so processes

116
00:04:32,020 --> 00:04:34,840
square she processes human-to-human it's

117
00:04:34,840 --> 00:04:38,440
it's writing down instructions for other

118
00:04:38,440 --> 00:04:41,170
humans to follow in human languages it's

119
00:04:41,170 --> 00:04:44,830
it's it's not reliable we're all human

120
00:04:44,830 --> 00:04:47,740
on humans make mistakes the best

121
00:04:47,740 --> 00:04:49,810
engineers in the world makes mistakes

122
00:04:49,810 --> 00:04:51,460
and they tend to be the worst ones

123
00:04:51,460 --> 00:04:52,600
because they tend to be the ones that

124
00:04:52,600 --> 00:04:54,400
you don't think you could have ever made

125
00:04:54,400 --> 00:04:56,350
like a slip you don't it doesn't

126
00:04:56,350 --> 00:04:59,170
register so so process-driven approach

127
00:04:59,170 --> 00:05:01,030
to sort of compliance and policy is not

128
00:05:01,030 --> 00:05:05,140
is not great so how could we fix it what

129
00:05:05,140 --> 00:05:06,970
can we do here could we write more

130
00:05:06,970 --> 00:05:09,490
spreadsheets effects the wiki pages I

131
00:05:09,490 --> 00:05:12,010
think we need to look outside of kind of

132
00:05:12,010 --> 00:05:14,770
what we've been doing a you know to this

133
00:05:14,770 --> 00:05:16,180
point and look at sort of advances

134
00:05:16,180 --> 00:05:20,670
elsewhere sort of in the ecosystem and

135
00:05:20,670 --> 00:05:22,990
specifically we're talking about policy

136
00:05:22,990 --> 00:05:25,510
is code here where we want to sort of

137
00:05:25,510 --> 00:05:27,340
tick what we had described in our

138
00:05:27,340 --> 00:05:29,980
spreadsheets described in our wiki's and

139
00:05:29,980 --> 00:05:32,320
our JIRA tickets I'll actually turn that

140
00:05:32,320 --> 00:05:34,300
into code turn that into something that

141
00:05:34,300 --> 00:05:38,350
is objectively true and it's testable

142
00:05:38,350 --> 00:05:41,650
and it's something that you can't have

143
00:05:41,650 --> 00:05:46,120
ambiguity around so we should learn from

144
00:05:46,120 --> 00:05:49,420
DevOps so we've all seen sort of what's

145
00:05:49,420 --> 00:05:50,920
happened with through ops and

146
00:05:50,920 --> 00:05:53,020
infrastructure and dev and so on where

147
00:05:53,020 --> 00:05:55,270
they've kind of had this realization

148
00:05:55,270 --> 00:05:56,800
that their processes weren't good and

149
00:05:56,800 --> 00:05:59,620
also they had a lot of manual processes

150
00:05:59,620 --> 00:06:01,420
that were prone to mistakes and just

151
00:06:01,420 --> 00:06:03,400
just didn't scale especially with the

152
00:06:03,400 --> 00:06:05,470
evolution of the emergence of cloud and

153
00:06:05,470 --> 00:06:07,630
sort of kubernetes and so on it does not

154
00:06:07,630 --> 00:06:10,870
scale so you know what did they do they

155
00:06:10,870 --> 00:06:12,270
double down on what they know best

156
00:06:12,270 --> 00:06:15,850
software development lifecycle so you

157
00:06:15,850 --> 00:06:17,650
you write code you don't write process

158
00:06:17,650 --> 00:06:20,620
you leverage version control you take

159
00:06:20,620 --> 00:06:23,470
advantage of that branching peer reviews

160
00:06:23,470 --> 00:06:26,200
sort of all these those things if change

161
00:06:26,200 --> 00:06:28,510
review flows you know a big part of like

162
00:06:28,510 --> 00:06:31,600
implementing a policy is that you need

163
00:06:31,600 --> 00:06:33,010
to be clear that everybody understands

164
00:06:33,010 --> 00:06:35,800
it it needs to have being sort of given

165
00:06:35,800 --> 00:06:39,160
a blessing by the InfoSec team the GIS

166
00:06:39,160 --> 00:06:40,860
team whoever is that all

167
00:06:40,860 --> 00:06:43,830
authority for codifying the sort of the

168
00:06:43,830 --> 00:06:46,020
policy that you want to enforce so it

169
00:06:46,020 --> 00:06:47,759
gives them an opportunity to act as a

170
00:06:47,759 --> 00:06:50,219
blocking reviewer so you can't actually

171
00:06:50,219 --> 00:06:52,139
have a policy pushed out and enforced

172
00:06:52,139 --> 00:06:54,270
unless it's been approved by GIS this

173
00:06:54,270 --> 00:06:56,340
gives them control keeps the control

174
00:06:56,340 --> 00:06:59,789
there you also get sort of improved

175
00:06:59,789 --> 00:07:01,949
auditing and forensics things are know

176
00:07:01,949 --> 00:07:04,110
logged things are no time-stamped you

177
00:07:04,110 --> 00:07:05,879
can see who's changed something where

178
00:07:05,879 --> 00:07:07,319
they've changed it when they've changed

179
00:07:07,319 --> 00:07:09,870
it and if you build systems around this

180
00:07:09,870 --> 00:07:12,240
rather than building process you can

181
00:07:12,240 --> 00:07:13,740
wrap respectively go back and look at

182
00:07:13,740 --> 00:07:15,360
logs and look at where things happened

183
00:07:15,360 --> 00:07:17,610
you know it's it's it gives you a sort

184
00:07:17,610 --> 00:07:20,069
of foothold to improve how you implement

185
00:07:20,069 --> 00:07:22,349
policy across an organization and then

186
00:07:22,349 --> 00:07:25,500
of course automated testing automated

187
00:07:25,500 --> 00:07:27,569
deployments automation is a key part of

188
00:07:27,569 --> 00:07:30,449
this automation is just getting the

189
00:07:30,449 --> 00:07:33,419
human parts out of the process we still

190
00:07:33,419 --> 00:07:34,919
need to figure out what policy means

191
00:07:34,919 --> 00:07:36,990
what being compliant means but we

192
00:07:36,990 --> 00:07:38,370
shouldn't have to be the ones that do it

193
00:07:38,370 --> 00:07:43,050
because we're not very good at it so one

194
00:07:43,050 --> 00:07:45,599
project that sort of can help us here is

195
00:07:45,599 --> 00:07:48,449
the open policy agent so open policy

196
00:07:48,449 --> 00:07:51,229
agent has been around I think since 2016

197
00:07:51,229 --> 00:07:56,129
it is fully open source it as of April

198
00:07:56,129 --> 00:07:59,580
this year it was adopted into the CSC F

199
00:07:59,580 --> 00:08:04,080
incubator it's sort of sponsored and

200
00:08:04,080 --> 00:08:06,120
supported by sty resort of the company

201
00:08:06,120 --> 00:08:08,339
that the founders sort of created rather

202
00:08:08,339 --> 00:08:10,949
and and this is an important part it's a

203
00:08:10,949 --> 00:08:13,110
general purpose policy engine okay I

204
00:08:13,110 --> 00:08:14,699
know what can imagine kubernetes in the

205
00:08:14,699 --> 00:08:16,650
description the talk it's a general

206
00:08:16,650 --> 00:08:18,210
purpose engine and we'll see what that

207
00:08:18,210 --> 00:08:20,969
how important that is the language the

208
00:08:20,969 --> 00:08:22,259
declarative language

209
00:08:22,259 --> 00:08:24,509
Rhaego which is based on data log it's

210
00:08:24,509 --> 00:08:26,310
not a general-purpose language it's

211
00:08:26,310 --> 00:08:30,779
designed for writing rules and rules or

212
00:08:30,779 --> 00:08:34,679
pauses okay it's it lets us do things

213
00:08:34,679 --> 00:08:36,899
sort of more straightforwardly that we

214
00:08:36,899 --> 00:08:38,640
could do in a sort of in a kind of

215
00:08:38,640 --> 00:08:40,948
another language and it's available

216
00:08:40,948 --> 00:08:44,910
either as well either as a demon or CLI

217
00:08:44,910 --> 00:08:47,399
sort of all implemented and go or a

218
00:08:47,399 --> 00:08:49,079
library which is increasingly becoming

219
00:08:49,079 --> 00:08:51,690
quite interesting in that you don't have

220
00:08:51,690 --> 00:08:52,740
to just die

221
00:08:52,740 --> 00:08:55,590
the service or rawness from the project

222
00:08:55,590 --> 00:08:59,130
you can call in the library via KITT

223
00:08:59,130 --> 00:09:01,290
into whatever you want make it into a

224
00:09:01,290 --> 00:09:03,240
command-line tool making into some other

225
00:09:03,240 --> 00:09:05,070
custom service that you've written you

226
00:09:05,070 --> 00:09:07,770
can pull the core logic the parser and

227
00:09:07,770 --> 00:09:09,150
the evaluator and the interpreter

228
00:09:09,150 --> 00:09:11,610
pulling it into whatever you need that

229
00:09:11,610 --> 00:09:13,140
fits best for your organization and

230
00:09:13,140 --> 00:09:15,540
you're leveraging the same sort of

231
00:09:15,540 --> 00:09:17,220
policy engine that everybody else has

232
00:09:17,220 --> 00:09:19,320
regardless of how they're interacting

233
00:09:19,320 --> 00:09:21,180
with it so there's a couple of projects

234
00:09:21,180 --> 00:09:23,010
we touch on one of them later where

235
00:09:23,010 --> 00:09:24,240
we've seen people do that in the

236
00:09:24,240 --> 00:09:27,810
community so it has a pretty sort of

237
00:09:27,810 --> 00:09:30,150
simple IAM at the aim is to unify policy

238
00:09:30,150 --> 00:09:32,760
enforcement across the stack we've silos

239
00:09:32,760 --> 00:09:34,380
everywhere everybody does things

240
00:09:34,380 --> 00:09:38,070
differently that makes the job of you

241
00:09:38,070 --> 00:09:40,290
know security engineers extremely

242
00:09:40,290 --> 00:09:41,970
difficult because suddenly they need to

243
00:09:41,970 --> 00:09:44,430
know everything the reason why cloud

244
00:09:44,430 --> 00:09:48,300
took off is because previously engineers

245
00:09:48,300 --> 00:09:49,950
deploying systems into production they

246
00:09:49,950 --> 00:09:51,210
needed to know everything they need so

247
00:09:51,210 --> 00:09:53,490
networking and physically racking things

248
00:09:53,490 --> 00:09:55,050
and all the different servers and the

249
00:09:55,050 --> 00:09:57,210
nuances the operating systems when

250
00:09:57,210 --> 00:09:58,770
neither will you ask came along and they

251
00:09:58,770 --> 00:10:00,540
started taking like a contract driven

252
00:10:00,540 --> 00:10:04,710
approach this and you you've suddenly

253
00:10:04,710 --> 00:10:06,780
removed the need to know how the sausage

254
00:10:06,780 --> 00:10:09,450
is being made behind the scenes you just

255
00:10:09,450 --> 00:10:11,730
take the contract and you use the

256
00:10:11,730 --> 00:10:12,780
contract and it's not your

257
00:10:12,780 --> 00:10:15,090
responsibility how that happens and it

258
00:10:15,090 --> 00:10:17,040
suddenly decouples you and frees you up

259
00:10:17,040 --> 00:10:19,770
to the deal so you kind of have the same

260
00:10:19,770 --> 00:10:21,810
idea we're sort of having sort of a

261
00:10:21,810 --> 00:10:23,850
unified policy across the stack suddenly

262
00:10:23,850 --> 00:10:25,470
if you're using Terra forum if you're

263
00:10:25,470 --> 00:10:28,520
using share for pulpit or AWS or Google

264
00:10:28,520 --> 00:10:31,410
suddenly the way in which you implement

265
00:10:31,410 --> 00:10:34,140
your policies it's just one

266
00:10:34,140 --> 00:10:36,240
implementation the data structures might

267
00:10:36,240 --> 00:10:38,430
change but it's one set of tooling it's

268
00:10:38,430 --> 00:10:40,380
one set of processes you've only one

269
00:10:40,380 --> 00:10:42,390
thing to learn which is very attractive

270
00:10:42,390 --> 00:10:44,040
so yeah

271
00:10:44,040 --> 00:10:47,090
very simple at its core so this is a

272
00:10:47,090 --> 00:10:51,510
Popa so say you've a service that wants

273
00:10:51,510 --> 00:10:55,680
to use OPA to sort of you know make a

274
00:10:55,680 --> 00:10:57,150
decision about whether it's allowed to

275
00:10:57,150 --> 00:11:00,960
do something so it sends a query and the

276
00:11:00,960 --> 00:11:02,280
query just take the body

277
00:11:02,280 --> 00:11:05,190
OPA works on JSON objects so it takes a

278
00:11:05,190 --> 00:11:06,390
JSON object

279
00:11:06,390 --> 00:11:09,180
it applies its rules to that object and

280
00:11:09,180 --> 00:11:11,399
it returns a JSON object that represents

281
00:11:11,399 --> 00:11:15,300
whatever another Lauer deny makes sense

282
00:11:15,300 --> 00:11:16,709
in your particular context you can

283
00:11:16,709 --> 00:11:18,810
configure what the response looks like

284
00:11:18,810 --> 00:11:21,420
for the allow case and that alike is so

285
00:11:21,420 --> 00:11:23,700
you would get in a query JSON object

286
00:11:23,700 --> 00:11:25,920
maybe it's a path the username and so on

287
00:11:25,920 --> 00:11:29,790
it goes to oppa oppa has policy so

288
00:11:29,790 --> 00:11:33,029
individual sort of policies are sort of

289
00:11:33,029 --> 00:11:37,589
stored in memory in oppa and it also has

290
00:11:37,589 --> 00:11:40,019
the ability to store additional data so

291
00:11:40,019 --> 00:11:41,100
what you can end up doing with the

292
00:11:41,100 --> 00:11:43,079
policies the policies can effectively be

293
00:11:43,079 --> 00:11:45,870
parametrized and data-driven so you

294
00:11:45,870 --> 00:11:48,180
could see a situation where you have one

295
00:11:48,180 --> 00:11:50,070
team perhaps is responsible for writing

296
00:11:50,070 --> 00:11:53,220
policy and then another team decides how

297
00:11:53,220 --> 00:11:55,709
they ratcheted opera ratcheted down who

298
00:11:55,709 --> 00:11:56,940
gets apply tinsel

299
00:11:56,940 --> 00:12:00,450
so your query comes in the open engine

300
00:12:00,450 --> 00:12:03,450
apply checks all policies against us to

301
00:12:03,450 --> 00:12:05,640
see if anybody denies it so it just

302
00:12:05,640 --> 00:12:07,769
earns all the rules together so if

303
00:12:07,769 --> 00:12:10,829
anything says no then you get a response

304
00:12:10,829 --> 00:12:12,990
back to the service saying no you're not

305
00:12:12,990 --> 00:12:15,810
allowed and that can include contextual

306
00:12:15,810 --> 00:12:17,490
information so no you're not allowed

307
00:12:17,490 --> 00:12:21,300
because of X and because it evaluates

308
00:12:21,300 --> 00:12:24,660
all policies at the same time it's not

309
00:12:24,660 --> 00:12:26,070
you're not playing whack-a-mole you

310
00:12:26,070 --> 00:12:27,930
immediately get back you're violating

311
00:12:27,930 --> 00:12:31,500
because of X Y Zed ABC you just get at

312
00:12:31,500 --> 00:12:31,829
all

313
00:12:31,829 --> 00:12:33,570
so it's quite a nice experience for the

314
00:12:33,570 --> 00:12:37,110
consumer and your end user so the

315
00:12:37,110 --> 00:12:38,430
community minute like there's quite a

316
00:12:38,430 --> 00:12:40,529
lot of significant companies already

317
00:12:40,529 --> 00:12:43,320
using this in in production that's why

318
00:12:43,320 --> 00:12:45,779
Netflix are using it for access control

319
00:12:45,779 --> 00:12:49,350
to their micro services chef use it to

320
00:12:49,350 --> 00:12:49,769
deliver

321
00:12:49,769 --> 00:12:51,959
I am capabilities in some of their

322
00:12:51,959 --> 00:12:54,600
products I believe and you've dozens of

323
00:12:54,600 --> 00:12:56,910
others using it to enforce sort of like

324
00:12:56,910 --> 00:12:59,550
you know policy in kubernetes or what

325
00:12:59,550 --> 00:13:01,560
have you like some of them was common

326
00:13:01,560 --> 00:13:03,779
use cases that you've seen or admission

327
00:13:03,779 --> 00:13:04,740
control which is what we're going to

328
00:13:04,740 --> 00:13:06,800
talk in the context of Kieran at ease

329
00:13:06,800 --> 00:13:08,850
authorization so people are using it in

330
00:13:08,850 --> 00:13:11,190
Kafka and micro services things that

331
00:13:11,190 --> 00:13:13,350
stuff you can hook it into palm and use

332
00:13:13,350 --> 00:13:15,089
it to sort of authorize who can and

333
00:13:15,089 --> 00:13:16,860
can't log into a box or who can and

334
00:13:16,860 --> 00:13:18,720
can't get sue to access

335
00:13:18,720 --> 00:13:20,879
risk management you want to make sure

336
00:13:20,879 --> 00:13:22,769
that you know for example terraform

337
00:13:22,769 --> 00:13:24,690
there's an example we'll look out later

338
00:13:24,690 --> 00:13:26,579
where Tara forms notorious where it's

339
00:13:26,579 --> 00:13:29,310
easy to accidentally make a small change

340
00:13:29,310 --> 00:13:31,019
that results in loads of things getting

341
00:13:31,019 --> 00:13:33,569
changed you can sort of manage that risk

342
00:13:33,569 --> 00:13:35,879
by having a policy that says I'm gonna

343
00:13:35,879 --> 00:13:38,220
wit all the possible changes you can

344
00:13:38,220 --> 00:13:40,589
make and if you exceed a certain value

345
00:13:40,589 --> 00:13:43,230
then it's like no you're not allowed to

346
00:13:43,230 --> 00:13:44,819
do that we need to flag it up figure out

347
00:13:44,819 --> 00:13:45,660
what's going on so you don't

348
00:13:45,660 --> 00:13:47,699
accidentally do more than you think

349
00:13:47,699 --> 00:13:50,490
you're going to do DNA protection so

350
00:13:50,490 --> 00:13:53,459
filtering for example in Kafka you can

351
00:13:53,459 --> 00:13:55,709
kind of restrict who can see wash and

352
00:13:55,709 --> 00:13:58,230
then yeah DNA for doing is just the same

353
00:13:58,230 --> 00:13:58,889
thing again

354
00:13:58,889 --> 00:14:02,519
so an example input so this this would

355
00:14:02,519 --> 00:14:04,769
perhaps be an example input from a micro

356
00:14:04,769 --> 00:14:07,410
service where even authenticated user

357
00:14:07,410 --> 00:14:11,120
Bob and they've they're you do they're

358
00:14:11,120 --> 00:14:13,379
interacting they've sort of talking to

359
00:14:13,379 --> 00:14:15,870
the micro service at the finance salary

360
00:14:15,870 --> 00:14:18,480
slash Alice path so that that's their

361
00:14:18,480 --> 00:14:20,459
context there and they've made a gap and

362
00:14:20,459 --> 00:14:23,040
we want to know if user Bob can see

363
00:14:23,040 --> 00:14:26,579
Alice's salary so previously the

364
00:14:26,579 --> 00:14:28,350
developer would have to codify that and

365
00:14:28,350 --> 00:14:30,449
put it into their into their service so

366
00:14:30,449 --> 00:14:32,459
if you suddenly decide we need to change

367
00:14:32,459 --> 00:14:35,160
the policy I need to get caller I need

368
00:14:35,160 --> 00:14:37,110
to get JIRA tickets raised and an app it

369
00:14:37,110 --> 00:14:39,149
creative I talk to the product manager I

370
00:14:39,149 --> 00:14:40,889
need to get it could take weeks it could

371
00:14:40,889 --> 00:14:42,180
take months to get things done

372
00:14:42,180 --> 00:14:45,240
potentially so by decoupling the policy

373
00:14:45,240 --> 00:14:47,819
from that suddenly you're able to tweak

374
00:14:47,819 --> 00:14:49,290
the policy without having to go back and

375
00:14:49,290 --> 00:14:51,959
rewrite the services so a policy for

376
00:14:51,959 --> 00:14:54,240
that for example would be you know

377
00:14:54,240 --> 00:14:56,339
you're inputting the the input so the

378
00:14:56,339 --> 00:14:57,930
object that comes in is always

379
00:14:57,930 --> 00:15:00,240
referenced as as the M Posche you set

380
00:15:00,240 --> 00:15:03,300
the default so the rule is the allow so

381
00:15:03,300 --> 00:15:05,279
the default response for a rule in this

382
00:15:05,279 --> 00:15:07,380
case is false so it's like by default

383
00:15:07,380 --> 00:15:09,689
you're not getting access and then we've

384
00:15:09,689 --> 00:15:11,699
been we've one instance of a rule and

385
00:15:11,699 --> 00:15:13,290
they lie rule where we're just some

386
00:15:13,290 --> 00:15:14,459
username we're just setting up the

387
00:15:14,459 --> 00:15:17,699
variable and we're making sure that the

388
00:15:17,699 --> 00:15:20,129
input method has to be cash really alert

389
00:15:20,129 --> 00:15:23,699
gets on the input path has to be Finance

390
00:15:23,699 --> 00:15:25,620
salary and username and what it's going

391
00:15:25,620 --> 00:15:28,309
to do here is this is gonna then sort of

392
00:15:28,309 --> 00:15:31,350
sort of initialize username with the

393
00:15:31,350 --> 00:15:32,700
value that you've just passed

394
00:15:32,700 --> 00:15:34,470
and then it's going to check to see if

395
00:15:34,470 --> 00:15:36,990
your user is the same as the username of

396
00:15:36,990 --> 00:15:39,300
the path so this lets you basically

397
00:15:39,300 --> 00:15:41,520
prevent you prevent you from looking at

398
00:15:41,520 --> 00:15:44,580
somebody else's salary and the thing

399
00:15:44,580 --> 00:15:45,870
with this is this is taxable

400
00:15:45,870 --> 00:15:47,400
you can suddenly write unit tests for

401
00:15:47,400 --> 00:15:49,140
this that you can automate it and you

402
00:15:49,140 --> 00:15:51,240
can run and you you build up your

403
00:15:51,240 --> 00:15:53,370
metrics of all possible combinations of

404
00:15:53,370 --> 00:15:54,720
things as it's inching here you can get

405
00:15:54,720 --> 00:15:58,200
like a pretty good level of trust that a

406
00:15:58,200 --> 00:16:00,840
policy will do what you wanted to do so

407
00:16:00,840 --> 00:16:02,790
say for example you wanted to okay no

408
00:16:02,790 --> 00:16:04,950
the manager wants to see a user salary

409
00:16:04,950 --> 00:16:06,570
okay well we need to provide some

410
00:16:06,570 --> 00:16:08,400
additional data so this is where this

411
00:16:08,400 --> 00:16:10,830
there's this data object at the top so

412
00:16:10,830 --> 00:16:12,570
we're saying Alice doesn't have any

413
00:16:12,570 --> 00:16:15,750
subordinates Bob Alice works for Bob

414
00:16:15,750 --> 00:16:18,300
Betty John works for Betty and John

415
00:16:18,300 --> 00:16:19,770
doesn't have anybody working for them

416
00:16:19,770 --> 00:16:22,530
it's just another allow rule so it's the

417
00:16:22,530 --> 00:16:24,810
it's the same rule so this will both

418
00:16:24,810 --> 00:16:27,260
rules are now going to get a value in it

419
00:16:27,260 --> 00:16:29,610
setting up the username that it's a GAF

420
00:16:29,610 --> 00:16:31,740
it's pulling out the username but now

421
00:16:31,740 --> 00:16:34,340
it's chatting to see if the input user

422
00:16:34,340 --> 00:16:38,490
exists as a yo exists as a subordinate

423
00:16:38,490 --> 00:16:42,270
to the requesting user so suddenly

424
00:16:42,270 --> 00:16:44,010
you've got the ability you know and if

425
00:16:44,010 --> 00:16:45,210
you're at you know that's quite a

426
00:16:45,210 --> 00:16:46,590
significant change in your policy

427
00:16:46,590 --> 00:16:48,450
enforcement what you've been able to do

428
00:16:48,450 --> 00:16:51,090
it with one or two lines of code in your

429
00:16:51,090 --> 00:16:53,820
policy engine because you and and it

430
00:16:53,820 --> 00:16:55,470
becomes very very powerful as just a

431
00:16:55,470 --> 00:16:57,920
sort of a basic example

432
00:16:57,920 --> 00:17:01,170
so using OPA you have a couple of

433
00:17:01,170 --> 00:17:02,550
options you've got a service you just

434
00:17:02,550 --> 00:17:05,369
run a daemon you have a CLI so you can

435
00:17:05,369 --> 00:17:07,890
just take some JSON object on disk and

436
00:17:07,890 --> 00:17:12,089
just type them together you know and I

437
00:17:12,089 --> 00:17:13,260
come on the command line or at a

438
00:17:13,260 --> 00:17:14,940
pipeline and just use the can use the

439
00:17:14,940 --> 00:17:17,280
command line there's a full rabble when

440
00:17:17,280 --> 00:17:18,839
you're first starting to get used to it

441
00:17:18,839 --> 00:17:21,690
you can just open run and go in and

442
00:17:21,690 --> 00:17:24,290
experiment and flavor things and so on

443
00:17:24,290 --> 00:17:26,550
or that has met in the library and you

444
00:17:26,550 --> 00:17:28,050
can compare

445
00:17:28,050 --> 00:17:30,450
compose it into other things so one

446
00:17:30,450 --> 00:17:31,710
thing that sort of was reasonable

447
00:17:31,710 --> 00:17:34,530
there's a a project called contest guy

448
00:17:34,530 --> 00:17:37,530
garage Grove where he's basically pulled

449
00:17:37,530 --> 00:17:41,610
the whole opah policy part into a tool

450
00:17:41,610 --> 00:17:44,440
for specifically focused on testing

451
00:17:44,440 --> 00:17:47,049
in pipelines somebody has written a

452
00:17:47,049 --> 00:17:48,909
helen plugin so you can just do ham oppa

453
00:17:48,909 --> 00:17:51,309
and you can do policy validation on your

454
00:17:51,309 --> 00:17:53,740
hound chart like for example it could be

455
00:17:53,740 --> 00:17:55,899
you must have certain labels you must

456
00:17:55,899 --> 00:17:58,210
not run as root and it's just ham oppa

457
00:17:58,210 --> 00:18:00,159
so you suddenly by making it available

458
00:18:00,159 --> 00:18:02,169
like that you've kind of you've not

459
00:18:02,169 --> 00:18:03,610
given somebody another process to

460
00:18:03,610 --> 00:18:05,889
interact with you've been able to tick

461
00:18:05,889 --> 00:18:07,480
the key part of it that you want and

462
00:18:07,480 --> 00:18:09,549
just push it into people's existing

463
00:18:09,549 --> 00:18:11,080
workflows transparently or as

464
00:18:11,080 --> 00:18:13,029
transparently as possible this is very

465
00:18:13,029 --> 00:18:16,960
important so okay we've got a way of

466
00:18:16,960 --> 00:18:18,519
codifying policy so that we're a little

467
00:18:18,519 --> 00:18:20,200
bit better but now we need to remember

468
00:18:20,200 --> 00:18:22,509
to do it we shouldn't we need to

469
00:18:22,509 --> 00:18:24,250
automate doing that it needs to be just

470
00:18:24,250 --> 00:18:26,590
something that happens for free every

471
00:18:26,590 --> 00:18:30,309
time all the time so your various levels

472
00:18:30,309 --> 00:18:31,840
of maturity in terms of how people do

473
00:18:31,840 --> 00:18:33,759
this in organisations most people are

474
00:18:33,759 --> 00:18:35,769
using pipelines some organizations are

475
00:18:35,769 --> 00:18:37,990
starting to move towards get offs people

476
00:18:37,990 --> 00:18:39,700
are using like Argyll and things of that

477
00:18:39,700 --> 00:18:41,019
improving at ease there's there's

478
00:18:41,019 --> 00:18:42,129
different levels of sort of

479
00:18:42,129 --> 00:18:43,480
sophistication but they're ultimately

480
00:18:43,480 --> 00:18:44,950
doing the same thing they're just

481
00:18:44,950 --> 00:18:47,379
automating what was previously a manual

482
00:18:47,379 --> 00:18:49,659
process so for example here this could

483
00:18:49,659 --> 00:18:52,299
be an example of a just a Jenkins

484
00:18:52,299 --> 00:18:56,019
pipeline where you check out your your

485
00:18:56,019 --> 00:19:01,679
year this is so this is like this is it

486
00:19:01,679 --> 00:19:05,559
a terraform charge or terraform plan yes

487
00:19:05,559 --> 00:19:07,659
checked out there's an initial step

488
00:19:07,659 --> 00:19:10,360
where there's the unit asset it applies

489
00:19:10,360 --> 00:19:12,070
the policy validation so if you try and

490
00:19:12,070 --> 00:19:13,870
do something in your ham jar or your in

491
00:19:13,870 --> 00:19:15,990
your tariff or pump that is

492
00:19:15,990 --> 00:19:17,710
non-compliant but whatever your rules

493
00:19:17,710 --> 00:19:20,379
are it'll just feel immediately it'll

494
00:19:20,379 --> 00:19:22,779
give you back contacts you feel because

495
00:19:22,779 --> 00:19:25,000
of this you don't need to go and talk to

496
00:19:25,000 --> 00:19:27,129
somebody and a security team to figure

497
00:19:27,129 --> 00:19:28,659
out what's going it just tells you do

498
00:19:28,659 --> 00:19:31,899
this fix it you'll be unblocked and then

499
00:19:31,899 --> 00:19:33,370
in this case it's passed so it's gone

500
00:19:33,370 --> 00:19:34,750
ahead and it's app light itself - dev

501
00:19:34,750 --> 00:19:36,639
you've mined you were getting promotions

502
00:19:36,639 --> 00:19:37,960
you do all the things that you would

503
00:19:37,960 --> 00:19:39,490
still want to do you still have control

504
00:19:39,490 --> 00:19:41,350
over what policies get enforced you

505
00:19:41,350 --> 00:19:43,419
still have control over you know manual

506
00:19:43,419 --> 00:19:44,830
control with gear into production so it

507
00:19:44,830 --> 00:19:46,210
just gives you a lot of a lot of sort of

508
00:19:46,210 --> 00:19:51,250
power here you know then the policies

509
00:19:51,250 --> 00:19:54,129
itself you know you want to unit test

510
00:19:54,129 --> 00:19:56,529
policies so this is an example of a

511
00:19:56,529 --> 00:19:57,910
policy that's actually

512
00:19:57,910 --> 00:20:00,220
his job so the policies are packaged up

513
00:20:00,220 --> 00:20:03,100
with oppa and a hound chart so anytime

514
00:20:03,100 --> 00:20:05,380
you change policy everything gets pushed

515
00:20:05,380 --> 00:20:07,840
out so you can see it's building all the

516
00:20:07,840 --> 00:20:10,420
components it's testing the policies so

517
00:20:10,420 --> 00:20:12,580
there's a oppa task command and it runs

518
00:20:12,580 --> 00:20:15,370
unit tests and then it's testing and the

519
00:20:15,370 --> 00:20:18,070
testing can include you deploy oppa and

520
00:20:18,070 --> 00:20:20,560
then you've run a series of actual

521
00:20:20,560 --> 00:20:22,600
integration tests where it's like okay I

522
00:20:22,600 --> 00:20:24,100
have a policy that I can't pull from

523
00:20:24,100 --> 00:20:24,460
docker

524
00:20:24,460 --> 00:20:27,040
it will try and spin up a pod or a

525
00:20:27,040 --> 00:20:29,620
deployment and pull from docker and they

526
00:20:29,620 --> 00:20:31,450
should be rejected and try and spin

527
00:20:31,450 --> 00:20:33,460
something up for an internal cache it

528
00:20:33,460 --> 00:20:35,260
should be allowed so you get this

529
00:20:35,260 --> 00:20:38,620
ongoing sort of verification rather than

530
00:20:38,620 --> 00:20:41,800
trust occuring and then for people using

531
00:20:41,800 --> 00:20:43,690
get up so this is an example of just a

532
00:20:43,690 --> 00:20:46,930
small sort of application so it was

533
00:20:46,930 --> 00:20:50,110
written in written to sort of run and

534
00:20:50,110 --> 00:20:52,300
get hope where you just attach the

535
00:20:52,300 --> 00:20:54,550
application to your organization so this

536
00:20:54,550 --> 00:20:56,200
is really hockey this is something and

537
00:20:56,200 --> 00:20:57,730
it's just true together but like you

538
00:20:57,730 --> 00:20:59,170
could see this being something that you

539
00:20:59,170 --> 00:21:01,060
just throw it across your organization

540
00:21:01,060 --> 00:21:03,550
it's clever enough to know what type of

541
00:21:03,550 --> 00:21:05,200
project am i looking for am I looking at

542
00:21:05,200 --> 00:21:07,060
Tara for my love am i looking at how am

543
00:21:07,060 --> 00:21:08,920
I looking at something that might be

544
00:21:08,920 --> 00:21:12,190
using a secret in the wrong way and you

545
00:21:12,190 --> 00:21:13,630
could end up just having like you know

546
00:21:13,630 --> 00:21:16,000
one application that applies and does

547
00:21:16,000 --> 00:21:17,560
the right thing in the right context and

548
00:21:17,560 --> 00:21:20,470
just disappears into your workflow so

549
00:21:20,470 --> 00:21:22,780
you know and and that workflow is a big

550
00:21:22,780 --> 00:21:25,150
part of it you want to kind of disappear

551
00:21:25,150 --> 00:21:28,180
into the background for users so yeah

552
00:21:28,180 --> 00:21:29,620
it's never that simple that's all very

553
00:21:29,620 --> 00:21:31,780
easy very easy for me to say that it's

554
00:21:31,780 --> 00:21:33,970
binary sort of your life do something in

555
00:21:33,970 --> 00:21:36,610
order to do something reality is we have

556
00:21:36,610 --> 00:21:38,200
non-compliance so you have existing

557
00:21:38,200 --> 00:21:39,820
non-compliance is usually one of the big

558
00:21:39,820 --> 00:21:41,670
ones you want to roll out a new policy

559
00:21:41,670 --> 00:21:45,850
you either stop the world and break it

560
00:21:45,850 --> 00:21:47,500
break your system for users that are

561
00:21:47,500 --> 00:21:49,420
non-compliant that point in time or you

562
00:21:49,420 --> 00:21:52,030
have to pasture and corral non-compliant

563
00:21:52,030 --> 00:21:53,860
services to get updated which can be

564
00:21:53,860 --> 00:21:55,630
time-consuming they may not even be

565
00:21:55,630 --> 00:21:58,690
resourced a particular instance so you

566
00:21:58,690 --> 00:22:00,400
need some way of dealing with the

567
00:22:00,400 --> 00:22:01,990
reality that you're not just dealing

568
00:22:01,990 --> 00:22:05,950
instant compliance so you want the

569
00:22:05,950 --> 00:22:08,680
ability to sort of have exceptions have

570
00:22:08,680 --> 00:22:10,330
allowances maybe some

571
00:22:10,330 --> 00:22:12,580
service needs to be non-compliant for a

572
00:22:12,580 --> 00:22:15,610
very specific business reason again you

573
00:22:15,610 --> 00:22:17,429
go that then goes through the normal

574
00:22:17,429 --> 00:22:20,860
processes of evaluation but the it gets

575
00:22:20,860 --> 00:22:24,539
codified as an exception in the policy

576
00:22:24,539 --> 00:22:27,010
what when you do the exceptions the

577
00:22:27,010 --> 00:22:28,809
allowances you still do using policy is

578
00:22:28,809 --> 00:22:30,730
called Authority still remains with

579
00:22:30,730 --> 00:22:32,500
security you know they still are the

580
00:22:32,500 --> 00:22:34,360
ones that get to decide what hasn't

581
00:22:34,360 --> 00:22:35,789
allowed us what doesn't happen allowance

582
00:22:35,789 --> 00:22:38,169
you want visibility you get better

583
00:22:38,169 --> 00:22:40,510
visibility of it it's you can have it so

584
00:22:40,510 --> 00:22:43,720
that well first of all the single source

585
00:22:43,720 --> 00:22:45,429
of truth there is the repository you

586
00:22:45,429 --> 00:22:47,169
know the things that have an exception

587
00:22:47,169 --> 00:22:49,960
are in code in a repository so you can

588
00:22:49,960 --> 00:22:51,880
see them you can integrate sort of it

589
00:22:51,880 --> 00:22:53,500
into logging like Splunk so you can have

590
00:22:53,500 --> 00:22:56,440
a dashboard that shows you attempts to

591
00:22:56,440 --> 00:22:58,269
violate a policy where they're coming

592
00:22:58,269 --> 00:23:00,940
from who's trying it sort of the usage

593
00:23:00,940 --> 00:23:02,860
of services that have an exception and

594
00:23:02,860 --> 00:23:04,600
are violating it's like they've said

595
00:23:04,600 --> 00:23:05,889
they were going to reduce and migrate

596
00:23:05,889 --> 00:23:07,510
across but they're still running and

597
00:23:07,510 --> 00:23:09,340
still being used so there's a lot of

598
00:23:09,340 --> 00:23:10,480
things you can get there to improve

599
00:23:10,480 --> 00:23:12,940
visibility and the ability to track how

600
00:23:12,940 --> 00:23:15,070
policies are being adhere to or not

601
00:23:15,070 --> 00:23:17,019
adhere to so it's just like you're

602
00:23:17,019 --> 00:23:19,090
ratcheting you know what you don't want

603
00:23:19,090 --> 00:23:20,860
to have happen is daliyah pushing at a

604
00:23:20,860 --> 00:23:22,360
policy because you need to wish for

605
00:23:22,360 --> 00:23:24,519
everybody to be ready you just push it

606
00:23:24,519 --> 00:23:27,010
out on everybody this compliant can

607
00:23:27,010 --> 00:23:29,380
never be can never go backwards anybody

608
00:23:29,380 --> 00:23:31,929
new must immediately be compliant and

609
00:23:31,929 --> 00:23:34,750
you just turn the heat up on people who

610
00:23:34,750 --> 00:23:37,090
are currently compliant it's but very

611
00:23:37,090 --> 00:23:38,710
important that just speeds getting pause

612
00:23:38,710 --> 00:23:41,260
here so what does that look like in free

613
00:23:41,260 --> 00:23:44,980
burn at ease though so it's kind of cut

614
00:23:44,980 --> 00:23:46,750
off a little bit the side so criminales

615
00:23:46,750 --> 00:23:48,130
has this concept of an admission

616
00:23:48,130 --> 00:23:51,130
controller an admission controller is

617
00:23:51,130 --> 00:23:53,080
basically a gear keeper the sits in

618
00:23:53,080 --> 00:23:55,840
front of the API server and says whether

619
00:23:55,840 --> 00:23:57,429
you're allowed to create a resource or

620
00:23:57,429 --> 00:23:59,679
not create a resource so you know if

621
00:23:59,679 --> 00:24:01,120
you're interacting with kubernetes you

622
00:24:01,120 --> 00:24:03,519
know either BCI CD or the cube control

623
00:24:03,519 --> 00:24:05,169
command line or you you know you've got

624
00:24:05,169 --> 00:24:06,669
a controller rolling equipment at ease

625
00:24:06,669 --> 00:24:09,610
it talks to the API server it goes

626
00:24:09,610 --> 00:24:10,990
through the authorization on

627
00:24:10,990 --> 00:24:11,830
authentication

628
00:24:11,830 --> 00:24:13,960
you know you're all bot piece and then

629
00:24:13,960 --> 00:24:15,399
it hits the admission controller so it

630
00:24:15,399 --> 00:24:17,500
hits mutating admission controllers

631
00:24:17,500 --> 00:24:21,399
which are say for example you you always

632
00:24:21,399 --> 00:24:23,200
wanted to tag certain label

633
00:24:23,200 --> 00:24:25,059
on every resource you could implement

634
00:24:25,059 --> 00:24:26,950
that in the mutating policy that it just

635
00:24:26,950 --> 00:24:28,539
happens for you and you don't know about

636
00:24:28,539 --> 00:24:28,870
it

637
00:24:28,870 --> 00:24:30,669
say for example you don't want anybody

638
00:24:30,669 --> 00:24:33,460
using darker but you have a cache it

639
00:24:33,460 --> 00:24:35,590
just automatically updates references to

640
00:24:35,590 --> 00:24:36,880
images and point some of the cops you

641
00:24:36,880 --> 00:24:38,500
have a lot of flexibility to do things

642
00:24:38,500 --> 00:24:40,630
there and then what we're talking about

643
00:24:40,630 --> 00:24:42,399
today is through the validation this is

644
00:24:42,399 --> 00:24:45,309
do you adhere to policy you're allowed

645
00:24:45,309 --> 00:24:47,860
or you're denied and what this does is

646
00:24:47,860 --> 00:24:50,169
it looks at the request of object so it

647
00:24:50,169 --> 00:24:52,299
looks at the the the it's an admission

648
00:24:52,299 --> 00:24:57,789
review request this object and it checks

649
00:24:57,789 --> 00:24:59,080
it against the policies that you've

650
00:24:59,080 --> 00:25:00,970
defined in Opa and either lets you

651
00:25:00,970 --> 00:25:02,529
through or doesn't let you through and

652
00:25:02,529 --> 00:25:04,419
what's very nice about it is that if it

653
00:25:04,419 --> 00:25:05,380
does reject you

654
00:25:05,380 --> 00:25:08,260
it passes back very very actionable

655
00:25:08,260 --> 00:25:10,149
information you can pass by all the

656
00:25:10,149 --> 00:25:12,639
detail of you you're not allowed to do X

657
00:25:12,639 --> 00:25:15,159
because of why you should do this you

658
00:25:15,159 --> 00:25:18,130
know so that reduces the friction reduce

659
00:25:18,130 --> 00:25:19,750
you you don't want tickets coming out of

660
00:25:19,750 --> 00:25:20,320
these things

661
00:25:20,320 --> 00:25:24,909
so the keeper implementation as we have

662
00:25:24,909 --> 00:25:26,799
because as I say open is a general

663
00:25:26,799 --> 00:25:28,570
purpose we need to how do we get it

664
00:25:28,570 --> 00:25:30,490
working in kubernetes so it actually

665
00:25:30,490 --> 00:25:32,169
works in kubernetes in conjunction with

666
00:25:32,169 --> 00:25:34,960
a sidecar called tube management and

667
00:25:34,960 --> 00:25:37,929
tube management handles it looks at

668
00:25:37,929 --> 00:25:39,909
configuration maps which is like blobs

669
00:25:39,909 --> 00:25:42,730
of yarrow that you can sort of create in

670
00:25:42,730 --> 00:25:44,679
kubernetes it looks for the creation of

671
00:25:44,679 --> 00:25:46,450
those and specific name spaces with

672
00:25:46,450 --> 00:25:49,750
specific labels and it washes them in to

673
00:25:49,750 --> 00:25:52,419
open as policies or it washes them in as

674
00:25:52,419 --> 00:25:54,519
configuration data so if you change a

675
00:25:54,519 --> 00:25:56,710
policy you can just keep control apply

676
00:25:56,710 --> 00:25:58,450
and you can save map it'll get

677
00:25:58,450 --> 00:26:02,500
synchronized with over postagens it also

678
00:26:02,500 --> 00:26:04,720
handles data replication so say for

679
00:26:04,720 --> 00:26:07,510
example you get a request and you won't

680
00:26:07,510 --> 00:26:10,630
ignore but say the service but you want

681
00:26:10,630 --> 00:26:13,299
to rule that kind of needs to take into

682
00:26:13,299 --> 00:26:15,340
account ingress so you need a different

683
00:26:15,340 --> 00:26:17,320
class of object what cube management can

684
00:26:17,320 --> 00:26:19,059
do is handle replication of other

685
00:26:19,059 --> 00:26:21,039
resources in the cluster so you can

686
00:26:21,039 --> 00:26:22,840
write policies that are able to

687
00:26:22,840 --> 00:26:25,389
reference information that's external to

688
00:26:25,389 --> 00:26:26,919
the requests coming in so you can do

689
00:26:26,919 --> 00:26:31,600
quite complicated policies without the

690
00:26:31,600 --> 00:26:33,460
interact at the point of contact with

691
00:26:33,460 --> 00:26:37,049
OPA and the kubernetes is

692
00:26:37,049 --> 00:26:39,249
validating web who configuration all

693
00:26:39,249 --> 00:26:42,249
you're doing is saying if you get a

694
00:26:42,249 --> 00:26:45,399
request to create any resource that is

695
00:26:45,399 --> 00:26:47,350
picked off by you've a selector there so

696
00:26:47,350 --> 00:26:48,759
you can you don't just stand it

697
00:26:48,759 --> 00:26:50,409
everything you can select what are the

698
00:26:50,409 --> 00:26:52,269
types of resources that you want to get

699
00:26:52,269 --> 00:26:55,239
set if any of those come in send them to

700
00:26:55,239 --> 00:26:57,369
the service and you can use mutual TLS

701
00:26:57,369 --> 00:26:59,710
to kind of secure the communication

702
00:26:59,710 --> 00:27:02,950
between the API server on your europa

703
00:27:02,950 --> 00:27:07,359
pods so you know similarly to what we

704
00:27:07,359 --> 00:27:09,100
saw before you know a policy could be

705
00:27:09,100 --> 00:27:12,279
quite simple so in this case the logic

706
00:27:12,279 --> 00:27:13,690
is reversed and that we're not allowing

707
00:27:13,690 --> 00:27:16,359
we're denying by default so in this case

708
00:27:16,359 --> 00:27:19,450
if any one of these rules so like as I

709
00:27:19,450 --> 00:27:22,059
say a rule every line is a rule if any

710
00:27:22,059 --> 00:27:24,580
one of those returned false will

711
00:27:24,580 --> 00:27:26,950
actually treat that as and allow to go

712
00:27:26,950 --> 00:27:28,869
through so in this case what we're

713
00:27:28,869 --> 00:27:33,279
looking at is pardon me we're looking to

714
00:27:33,279 --> 00:27:34,359
make sure that okay we're only looking

715
00:27:34,359 --> 00:27:35,799
at pods and deployments if you're

716
00:27:35,799 --> 00:27:38,710
creating a cron job we don't care we

717
00:27:38,710 --> 00:27:40,480
were only looking at particular types of

718
00:27:40,480 --> 00:27:44,109
operations updates and creates perhaps

719
00:27:44,109 --> 00:27:45,580
we don't care about patches for some

720
00:27:45,580 --> 00:27:47,710
reason and then we've another rule

721
00:27:47,710 --> 00:27:49,869
that's being referenced here image from

722
00:27:49,869 --> 00:27:53,049
valid registry now the this value at the

723
00:27:53,049 --> 00:27:55,119
end that's the set that will get

724
00:27:55,119 --> 00:27:57,190
returned when that policy evaluates

725
00:27:57,190 --> 00:27:59,499
which we were intern returning to the

726
00:27:59,499 --> 00:28:02,350
deny and what that is that's the text

727
00:28:02,350 --> 00:28:03,580
you will information as to why you've

728
00:28:03,580 --> 00:28:07,600
been denied so you can make this

729
00:28:07,600 --> 00:28:09,129
data-driven which opens up the ability

730
00:28:09,129 --> 00:28:11,259
to kind of how separate you could have

731
00:28:11,259 --> 00:28:13,359
policy in one repo and the data that

732
00:28:13,359 --> 00:28:15,309
drives policy in another so here we're

733
00:28:15,309 --> 00:28:16,600
just saying yeah deployment and job

734
00:28:16,600 --> 00:28:18,340
create and update and you're only

735
00:28:18,340 --> 00:28:21,159
allowed poll from docker and then the

736
00:28:21,159 --> 00:28:23,769
allowed images we're setting up the

737
00:28:23,769 --> 00:28:26,049
image variable container images is kind

738
00:28:26,049 --> 00:28:27,340
of one of the nice things that we have

739
00:28:27,340 --> 00:28:30,039
so we're running this rule container

740
00:28:30,039 --> 00:28:31,989
images and it's returning us a set of

741
00:28:31,989 --> 00:28:32,980
images okay

742
00:28:32,980 --> 00:28:35,649
so if you can imagine that we now have

743
00:28:35,649 --> 00:28:38,109
multiple images through that we're

744
00:28:38,109 --> 00:28:39,489
making sure that it doesn't match any of

745
00:28:39,489 --> 00:28:41,919
the registries so if for example it

746
00:28:41,919 --> 00:28:45,519
doesn't match anything there then we're

747
00:28:45,519 --> 00:28:47,769
using a novel and non-allowed registry

748
00:28:47,769 --> 00:28:49,899
so we go to the next line so message is

749
00:28:49,899 --> 00:28:50,760
no too

750
00:28:50,760 --> 00:28:52,950
so we pass a message value up which in

751
00:28:52,950 --> 00:28:55,170
turn passes up so that's that's an

752
00:28:55,170 --> 00:28:58,230
occurrence of a deny the container

753
00:28:58,230 --> 00:29:01,260
images so particularly parlor disease

754
00:29:01,260 --> 00:29:03,660
are a thing in kubernetes they can let

755
00:29:03,660 --> 00:29:06,000
you prevent a pod from doing a thing and

756
00:29:06,000 --> 00:29:08,880
ultimately that's kind of good enough

757
00:29:08,880 --> 00:29:11,100
maybe because ultimately a thing will

758
00:29:11,100 --> 00:29:13,650
create a pod but the problem is if I am

759
00:29:13,650 --> 00:29:14,850
interacting and saying I want a

760
00:29:14,850 --> 00:29:18,000
deployment and the deployment isn't a

761
00:29:18,000 --> 00:29:20,160
pod but it contains a template for a pod

762
00:29:20,160 --> 00:29:22,110
what would happen with a pod security

763
00:29:22,110 --> 00:29:23,940
policy is that I'll be allowed to create

764
00:29:23,940 --> 00:29:25,679
the deployment but then it'll just sit

765
00:29:25,679 --> 00:29:27,210
there and I'll have to log it I'll have

766
00:29:27,210 --> 00:29:29,160
to connect and to keep control and have

767
00:29:29,160 --> 00:29:30,690
to check the state and I'll say oh it's

768
00:29:30,690 --> 00:29:32,910
stopping this you know qtn or creating

769
00:29:32,910 --> 00:29:35,040
state because it's violating a pod

770
00:29:35,040 --> 00:29:37,380
security policy because we can kind of

771
00:29:37,380 --> 00:29:40,679
be more nuanced and OPA I've got two and

772
00:29:40,679 --> 00:29:42,570
two rules and they both get evaluated

773
00:29:42,570 --> 00:29:45,000
one is looking at the objects packed

774
00:29:45,000 --> 00:29:46,620
containers image which is going to

775
00:29:46,620 --> 00:29:49,260
return all the images that you would see

776
00:29:49,260 --> 00:29:51,000
at the pod level but the one below

777
00:29:51,000 --> 00:29:53,429
you're getting it at the tablet level so

778
00:29:53,429 --> 00:29:55,140
suddenly have one rule that's giving you

779
00:29:55,140 --> 00:29:57,480
pods deployments like we've examples

780
00:29:57,480 --> 00:29:58,800
resistant that are like basically giving

781
00:29:58,800 --> 00:30:00,870
you images from every single thing that

782
00:30:00,870 --> 00:30:02,970
could possibly contain an image pod

783
00:30:02,970 --> 00:30:05,400
security parlor or a pod to get hot

784
00:30:05,400 --> 00:30:07,559
security policies or sorry security

785
00:30:07,559 --> 00:30:10,740
contexts for say Ron is not roush sort

786
00:30:10,740 --> 00:30:12,570
of Ron as a specific user you no longer

787
00:30:12,570 --> 00:30:15,090
have to define them on a per pod basis

788
00:30:15,090 --> 00:30:16,140
you can have it so that they get

789
00:30:16,140 --> 00:30:18,059
rejected for every possible object

790
00:30:18,059 --> 00:30:20,040
immediately which gives a very good and

791
00:30:20,040 --> 00:30:22,500
user experience and then you try to

792
00:30:22,500 --> 00:30:24,660
apply it so I tried to sort of create a

793
00:30:24,660 --> 00:30:26,340
deployment with darker it's fine it

794
00:30:26,340 --> 00:30:28,020
works as normal but if I try to use

795
00:30:28,020 --> 00:30:29,580
something from Google it'll come back

796
00:30:29,580 --> 00:30:31,170
and say you're violating because you've

797
00:30:31,170 --> 00:30:33,420
tried to go to a non-supported registry

798
00:30:33,420 --> 00:30:35,730
so it'll tell you I have what you've

799
00:30:35,730 --> 00:30:37,820
done wrong I can suggest how you fix it

800
00:30:37,820 --> 00:30:41,400
so criminales does provide some tools

801
00:30:41,400 --> 00:30:43,830
for security it provides like there's a

802
00:30:43,830 --> 00:30:45,870
whole range of admission controllers

803
00:30:45,870 --> 00:30:48,540
very specific purposes so one that will

804
00:30:48,540 --> 00:30:51,000
ensure that you always pull images it

805
00:30:51,000 --> 00:30:52,230
will never use an image that's already

806
00:30:52,230 --> 00:30:54,570
on a box that can be useful say for

807
00:30:54,570 --> 00:30:56,570
example where you're using images from

808
00:30:56,570 --> 00:30:59,760
sort of secured registries where some

809
00:30:59,760 --> 00:31:01,200
service that's allowed to pull an image

810
00:31:01,200 --> 00:31:03,750
pulls it and another service

811
00:31:03,750 --> 00:31:05,670
that's scheduled on the same node you

812
00:31:05,670 --> 00:31:07,140
can get the image but it doesn't go

813
00:31:07,140 --> 00:31:09,300
through the authentication so this kind

814
00:31:09,300 --> 00:31:11,310
of stops that whole preventing you from

815
00:31:11,310 --> 00:31:13,380
exactly a privileged serve exacts or

816
00:31:13,380 --> 00:31:15,270
running his route image policies as

817
00:31:15,270 --> 00:31:16,550
there is a web hook that lets us

818
00:31:16,550 --> 00:31:19,500
restrict where you pull images from but

819
00:31:19,500 --> 00:31:20,550
the problem is you're left with that

820
00:31:20,550 --> 00:31:22,620
situation it only works on parts so you

821
00:31:22,620 --> 00:31:23,880
could create a deployment and you're

822
00:31:23,880 --> 00:31:26,730
gonna find hidden away sort of through

823
00:31:26,730 --> 00:31:28,350
the troops you control the actual

824
00:31:28,350 --> 00:31:29,430
failure so it's not a very nice

825
00:31:29,430 --> 00:31:31,920
experience and then we have pod security

826
00:31:31,920 --> 00:31:34,470
policies again loads of security that

827
00:31:34,470 --> 00:31:36,930
you can apply but at the pod level using

828
00:31:36,930 --> 00:31:39,060
OPA lets you kind of pull it up a level

829
00:31:39,060 --> 00:31:41,610
so things fail as soon as we see them

830
00:31:41,610 --> 00:31:43,560
rather than sort of been hidden sort of

831
00:31:43,560 --> 00:31:46,680
behind the scenes so over policies again

832
00:31:46,680 --> 00:31:49,410
it's configuration rather than code in

833
00:31:49,410 --> 00:31:51,060
this case you're just defining the

834
00:31:51,060 --> 00:31:53,400
policy you full control over what that

835
00:31:53,400 --> 00:31:54,870
policy does that you saw in the first

836
00:31:54,870 --> 00:31:58,140
example we went from locking down users

837
00:31:58,140 --> 00:32:00,360
to allowing managers to go in you

838
00:32:00,360 --> 00:32:01,860
couldn't do that normally very easily

839
00:32:01,860 --> 00:32:05,270
without having to go through a dev cycle

840
00:32:05,270 --> 00:32:08,460
we have more than just pods and you get

841
00:32:08,460 --> 00:32:10,080
logging ordering alerting that you don't

842
00:32:10,080 --> 00:32:11,850
necessarily get the others you can write

843
00:32:11,850 --> 00:32:13,230
your policies in such a way and there's

844
00:32:13,230 --> 00:32:15,570
extension points within OPA like there's

845
00:32:15,570 --> 00:32:17,760
a this decision logger decision logger

846
00:32:17,760 --> 00:32:20,940
interface where you can have it who can

847
00:32:20,940 --> 00:32:23,340
then maybe generate metrics so you can

848
00:32:23,340 --> 00:32:25,290
see what policies are violating new

849
00:32:25,290 --> 00:32:27,450
phone metrics of that you can generate a

850
00:32:27,450 --> 00:32:31,050
like send events to slunk Splunk every

851
00:32:31,050 --> 00:32:32,640
time a policy is violated so here the

852
00:32:32,640 --> 00:32:34,260
dashboard and Splunk and you can see

853
00:32:34,260 --> 00:32:37,290
who's actually not following the policy

854
00:32:37,290 --> 00:32:39,000
and you come back to the thing of

855
00:32:39,000 --> 00:32:40,500
consistent tooling you know we want it

856
00:32:40,500 --> 00:32:43,520
to be more than just one one tool

857
00:32:43,520 --> 00:32:46,080
gatekeepers three which is in beta which

858
00:32:46,080 --> 00:32:47,850
will be getting quite soon even comes

859
00:32:47,850 --> 00:32:49,710
out-of-the-box with a standard library

860
00:32:49,710 --> 00:32:51,450
of kubernetes policies because

861
00:32:51,450 --> 00:32:53,070
ultimately we'll all want to do the same

862
00:32:53,070 --> 00:32:56,250
thing you know you've there's a lot of

863
00:32:56,250 --> 00:32:58,200
sort of duplication in terms of sort of

864
00:32:58,200 --> 00:33:00,480
what policies you want given is so gate

865
00:33:00,480 --> 00:33:02,730
keeper three and it's going to give you

866
00:33:02,730 --> 00:33:04,950
all the same things to see him but it's

867
00:33:04,950 --> 00:33:06,810
done in a kubernetes way the kubernetes

868
00:33:06,810 --> 00:33:08,340
native way so instead of just a pod with

869
00:33:08,340 --> 00:33:08,880
a sidecar

870
00:33:08,880 --> 00:33:12,450
it's nested C or D so a C or D in

871
00:33:12,450 --> 00:33:14,040
kubernetes is it

872
00:33:14,040 --> 00:33:16,370
it gives kubernetes

873
00:33:16,370 --> 00:33:18,679
full understanding of a particular data

874
00:33:18,679 --> 00:33:22,549
object as a native kubernetes object so

875
00:33:22,549 --> 00:33:24,590
it no longer is just a thing that's

876
00:33:24,590 --> 00:33:26,539
running on kubernetes it's not a thing

877
00:33:26,539 --> 00:33:28,669
that kubernetes knows about so you can

878
00:33:28,669 --> 00:33:32,779
go cube control get get constraints get

879
00:33:32,779 --> 00:33:34,610
history and tablets and I will give you

880
00:33:34,610 --> 00:33:36,080
those because it knows what those things

881
00:33:36,080 --> 00:33:38,630
are so that's coming quite soon there's

882
00:33:38,630 --> 00:33:39,620
a lot of active development that

883
00:33:39,620 --> 00:33:42,429
mutation is going to be going into that

884
00:33:42,429 --> 00:33:45,860
yeah so you can like so the benefit of C

885
00:33:45,860 --> 00:33:48,320
or DS is because they're native every

886
00:33:48,320 --> 00:33:50,840
tool that works with kubernetes suddenly

887
00:33:50,840 --> 00:33:52,640
works now with your constraints so if

888
00:33:52,640 --> 00:33:54,350
you've like a UI or if you've some other

889
00:33:54,350 --> 00:33:56,299
system that kind of knows how to work

890
00:33:56,299 --> 00:33:57,740
with object resources and kubernetes

891
00:33:57,740 --> 00:34:00,640
they just know work with us so

892
00:34:00,640 --> 00:34:04,520
complaints in terraform so sure most

893
00:34:04,520 --> 00:34:05,929
people kind of already terraform it's a

894
00:34:05,929 --> 00:34:09,020
infrastructure as code sort of tool for

895
00:34:09,020 --> 00:34:11,089
automating deployments in the cloud and

896
00:34:11,089 --> 00:34:16,790
so on and very widely used on the key

897
00:34:16,790 --> 00:34:19,310
part for us is it can I put JSON so

898
00:34:19,310 --> 00:34:20,750
we've something that we can kind of

899
00:34:20,750 --> 00:34:23,810
apply policy to so just for they have

900
00:34:23,810 --> 00:34:25,750
their own solution high score sentinel

901
00:34:25,750 --> 00:34:29,149
kind of primarily focused on hearty Corp

902
00:34:29,149 --> 00:34:31,969
I expect that will change over time but

903
00:34:31,969 --> 00:34:36,109
we can still use OPA with it so Jen the

904
00:34:36,109 --> 00:34:37,580
flow generally is a terraform plan

905
00:34:37,580 --> 00:34:40,609
convert the plan output to Jason apply

906
00:34:40,609 --> 00:34:42,379
your policy before you actually go

907
00:34:42,379 --> 00:34:46,940
through and sort of run it so for

908
00:34:46,940 --> 00:34:48,469
example here is kind of cut off at the

909
00:34:48,469 --> 00:34:51,710
site so this is an example of where you

910
00:34:51,710 --> 00:34:53,929
make a change and that change could

911
00:34:53,929 --> 00:34:55,339
result in that could be a one-line

912
00:34:55,339 --> 00:34:57,369
change and if you do it it's gonna

913
00:34:57,369 --> 00:34:59,780
delete your VP sees it's gonna delete

914
00:34:59,780 --> 00:35:01,609
your your routes and you're like I

915
00:35:01,609 --> 00:35:03,800
didn't intend to do that like oh yeah

916
00:35:03,800 --> 00:35:05,990
that's not what I intended that's quite

917
00:35:05,990 --> 00:35:07,820
a common problem that people have as

918
00:35:07,820 --> 00:35:10,270
they sort of learn and understand

919
00:35:10,270 --> 00:35:13,250
terraform unless they're careful it can

920
00:35:13,250 --> 00:35:15,290
do things that you didn't expect it's

921
00:35:15,290 --> 00:35:17,150
doing exactly what it should do and what

922
00:35:17,150 --> 00:35:19,040
it's supposed to do but it can sometimes

923
00:35:19,040 --> 00:35:20,750
be a little bit of a problem for people

924
00:35:20,750 --> 00:35:23,180
to spot so this policy for example is

925
00:35:23,180 --> 00:35:25,280
you can see there in the middle it's

926
00:35:25,280 --> 00:35:27,859
assigning widths here to different

927
00:35:27,859 --> 00:35:29,810
classes of operations so like

928
00:35:29,810 --> 00:35:32,450
Dilys that's costly you know we

929
00:35:32,450 --> 00:35:34,630
shouldn't expect you to do to it Elise

930
00:35:34,630 --> 00:35:37,250
obviously you could have different part

931
00:35:37,250 --> 00:35:39,080
flows with different policies applied

932
00:35:39,080 --> 00:35:40,760
for cases where you knew you were

933
00:35:40,760 --> 00:35:43,490
deleting services it can be specific to

934
00:35:43,490 --> 00:35:44,450
what you're trying to achieve

935
00:35:44,450 --> 00:35:46,580
so we've waited everything here and

936
00:35:46,580 --> 00:35:48,170
we're maybe only looking at a subset of

937
00:35:48,170 --> 00:35:51,620
resources and then the policy is just

938
00:35:51,620 --> 00:35:54,170
we're just making sure that the score so

939
00:35:54,170 --> 00:35:55,670
the aggregate score of all the waiting's

940
00:35:55,670 --> 00:35:57,920
is less than the configured blast radius

941
00:35:57,920 --> 00:36:01,160
which we set up to 30 below and we also

942
00:36:01,160 --> 00:36:02,750
have another rule that you also can't

943
00:36:02,750 --> 00:36:04,370
touch the eye on so you can't change

944
00:36:04,370 --> 00:36:09,020
your eye on config when you do this so

945
00:36:09,020 --> 00:36:12,790
the blast radius it's just who scores a

946
00:36:12,790 --> 00:36:15,230
it's just basically another function or

947
00:36:15,230 --> 00:36:16,970
another sort of rule it's running

948
00:36:16,970 --> 00:36:18,620
through and it's aggregating all the

949
00:36:18,620 --> 00:36:20,480
resources in the object this is a little

950
00:36:20,480 --> 00:36:22,340
bit more complicated it makes sense

951
00:36:22,340 --> 00:36:24,290
after like you've played around with OPA

952
00:36:24,290 --> 00:36:26,150
a bit but ultimately what's this what

953
00:36:26,150 --> 00:36:27,140
this is doing is it's going through

954
00:36:27,140 --> 00:36:29,900
every single resource in your terraform

955
00:36:29,900 --> 00:36:31,850
plan it's going it's looking at the ones

956
00:36:31,850 --> 00:36:33,380
that you've included in your whitelist

957
00:36:33,380 --> 00:36:35,780
it's pulling out the widths associated

958
00:36:35,780 --> 00:36:37,400
with them and it's out it's summing all

959
00:36:37,400 --> 00:36:39,140
the weights and you're ending up with a

960
00:36:39,140 --> 00:36:41,810
score that's representative of how how

961
00:36:41,810 --> 00:36:44,030
damaging your change could be and then

962
00:36:44,030 --> 00:36:45,860
the I am rule is just checking to see

963
00:36:45,860 --> 00:36:48,650
that you're not trying to change an iamb

964
00:36:48,650 --> 00:36:50,660
rule so it's checking for the occurrence

965
00:36:50,660 --> 00:36:53,330
of I am and if you've more than 0 being

966
00:36:53,330 --> 00:36:56,540
changed no go away and I'll let do it so

967
00:36:56,540 --> 00:36:58,070
you know this is what it would look like

968
00:36:58,070 --> 00:37:00,770
in practice I was gonna demo it but you

969
00:37:00,770 --> 00:37:02,080
won't probably see it on the screen

970
00:37:02,080 --> 00:37:04,400
terraforming it terraform plan out

971
00:37:04,400 --> 00:37:07,220
putting the plan and binary a show to

972
00:37:07,220 --> 00:37:10,040
convert the binary output to Jason and

973
00:37:10,040 --> 00:37:12,260
then you're evaluating your policy so

974
00:37:12,260 --> 00:37:13,880
the Ricoh the rules that we just saw in

975
00:37:13,880 --> 00:37:16,610
this rego file here the input is the

976
00:37:16,610 --> 00:37:18,350
plant from above and what we're doing

977
00:37:18,350 --> 00:37:20,960
here is the data terraform analysis offs

978
00:37:20,960 --> 00:37:23,870
this is the output of rolling the policy

979
00:37:23,870 --> 00:37:26,000
which for the earth part is gonna be

980
00:37:26,000 --> 00:37:27,290
true or false

981
00:37:27,290 --> 00:37:28,730
you know you're allowed to do it you're

982
00:37:28,730 --> 00:37:30,800
not allowed to do it also in the

983
00:37:30,800 --> 00:37:33,200
analysis from running the policy you're

984
00:37:33,200 --> 00:37:34,400
gonna have a score so you can

985
00:37:34,400 --> 00:37:37,280
additionally see the score and you know

986
00:37:37,280 --> 00:37:38,960
we're getting it there and this would be

987
00:37:38,960 --> 00:37:40,010
something that you would just be against

988
00:37:40,010 --> 00:37:41,390
your pipeline you know

989
00:37:41,390 --> 00:37:43,400
just be something that would set and it

990
00:37:43,400 --> 00:37:45,110
would say you can't do it because you've

991
00:37:45,110 --> 00:37:47,330
tried to change these things changes are

992
00:37:47,330 --> 00:37:50,120
only low-impact this volume of things so

993
00:37:50,120 --> 00:37:52,130
you suddenly have more checks and

994
00:37:52,130 --> 00:37:54,050
balances and stuff as being sort of done

995
00:37:54,050 --> 00:37:56,390
right so you kinda want compliance

996
00:37:56,390 --> 00:37:57,920
everywhere like it's the point of having

997
00:37:57,920 --> 00:38:01,820
a consistent system Kafka is another big

998
00:38:01,820 --> 00:38:03,320
example so Kafka has an authorizer

999
00:38:03,320 --> 00:38:07,310
interface there's an example or in the

1000
00:38:07,310 --> 00:38:08,720
project of an implementation of an

1001
00:38:08,720 --> 00:38:11,450
authorizer plugin it runs with Kafka and

1002
00:38:11,450 --> 00:38:13,070
what it does is it all flows

1003
00:38:13,070 --> 00:38:17,120
authorization to an OPA demon and it

1004
00:38:17,120 --> 00:38:19,190
allows you to do authorization it allows

1005
00:38:19,190 --> 00:38:20,960
you to do filtering so you can kind of

1006
00:38:20,960 --> 00:38:23,270
run time by changing the configuration

1007
00:38:23,270 --> 00:38:26,450
in the OPA demon you can sort of limit

1008
00:38:26,450 --> 00:38:28,360
who can see what and what you know

1009
00:38:28,360 --> 00:38:30,320
something you're starting to sort you

1010
00:38:30,320 --> 00:38:32,360
can control very granular things that

1011
00:38:32,360 --> 00:38:34,780
would have required development cycles

1012
00:38:34,780 --> 00:38:38,660
very easy to try so the documentation is

1013
00:38:38,660 --> 00:38:41,030
very good it's it's getting better and

1014
00:38:41,030 --> 00:38:42,410
better and better I think there was like

1015
00:38:42,410 --> 00:38:44,240
version 15 just got released this

1016
00:38:44,240 --> 00:38:47,360
morning I think I also put together I

1017
00:38:47,360 --> 00:38:49,310
was going to do a live demo and I have a

1018
00:38:49,310 --> 00:38:50,780
cat Accord a scenario that shows

1019
00:38:50,780 --> 00:38:52,910
gatekeeper one so it it uses cat a

1020
00:38:52,910 --> 00:38:54,500
quarter to spin off a turbine at ease

1021
00:38:54,500 --> 00:38:58,250
cluster sets off the secrets Chris your

1022
00:38:58,250 --> 00:39:02,390
certs deploys OPA deploys a policy and

1023
00:39:02,390 --> 00:39:04,460
then shows you it running and failing

1024
00:39:04,460 --> 00:39:06,050
and passing and you can just do that in

1025
00:39:06,050 --> 00:39:07,850
your browser so cat a code as a projects

1026
00:39:07,850 --> 00:39:10,970
a it's run out of London that's very

1027
00:39:10,970 --> 00:39:12,820
very good

1028
00:39:12,820 --> 00:39:15,890
so getting involved so subscribe to

1029
00:39:15,890 --> 00:39:18,050
their Twitter feed and it's worth doing

1030
00:39:18,050 --> 00:39:21,230
the project on github

1031
00:39:21,230 --> 00:39:22,940
they've quite so the main project is

1032
00:39:22,940 --> 00:39:24,710
over the one that's seeing a lot of

1033
00:39:24,710 --> 00:39:25,730
attention is we're out of the minute is

1034
00:39:25,730 --> 00:39:27,560
deeper which is like the Canaries near

1035
00:39:27,560 --> 00:39:29,840
the solution and they were very active

1036
00:39:29,840 --> 00:39:32,030
slack group it's very it's it's very

1037
00:39:32,030 --> 00:39:36,500
active um that is a varnish I finished

1038
00:39:36,500 --> 00:39:37,550
on time amazingly

1039
00:39:37,550 --> 00:39:40,490
unbeliev well thank you John are there

1040
00:39:40,490 --> 00:39:42,939
any questions

1041
00:39:45,549 --> 00:39:51,289
questions for young you were very very

1042
00:39:51,289 --> 00:39:53,989
from blue unbelievable

1043
00:39:53,989 --> 00:39:55,579
alright give them another big hand thank

1044
00:39:55,579 --> 00:39:56,150
you very much

1045
00:39:56,150 --> 00:40:00,499
[Applause]

