1
00:00:15,179 --> 00:00:17,600
back folks

2
00:00:17,600 --> 00:00:20,820
here we go it's like like conference

3
00:00:20,820 --> 00:00:23,580
over that's it

4
00:00:23,580 --> 00:00:26,039
oh my gosh all right

5
00:00:26,039 --> 00:00:26,820
um

6
00:00:26,820 --> 00:00:29,340
I guess uh

7
00:00:29,340 --> 00:00:31,080
yeah I guess we can get started and then

8
00:00:31,080 --> 00:00:34,140
I will drag people inside slowly whether

9
00:00:34,140 --> 00:00:36,000
they like it or not

10
00:00:36,000 --> 00:00:38,820
um all right our next presenter today is

11
00:00:38,820 --> 00:00:40,739
Alexander wise who's a technical account

12
00:00:40,739 --> 00:00:43,739
manager at verica and his talk is titled

13
00:00:43,739 --> 00:00:46,140
School of proc kubernetes security and

14
00:00:46,140 --> 00:00:49,920
the post PSP world just give it up

15
00:00:49,920 --> 00:00:52,920
foreign

16
00:00:53,239 --> 00:00:56,760
thank you uh yeah like every other

17
00:00:56,760 --> 00:00:58,920
speaker has said so so cool to be back

18
00:00:58,920 --> 00:01:01,140
in the conference uh setting in person

19
00:01:01,140 --> 00:01:03,960
seeing people I love this uh but I'm I'm

20
00:01:03,960 --> 00:01:06,299
Alex I'm here to talk about kubernetes

21
00:01:06,299 --> 00:01:08,939
security I'm here to talk about the the

22
00:01:08,939 --> 00:01:11,220
recent past and near future of

23
00:01:11,220 --> 00:01:14,760
kubernetes security uh so about a year

24
00:01:14,760 --> 00:01:19,500
ago back April 2021 uh with uh the

25
00:01:19,500 --> 00:01:22,200
release of kubernetes 1.21

26
00:01:22,200 --> 00:01:23,939
the kubernetes team also announced the

27
00:01:23,939 --> 00:01:27,960
deprecation of pod security policy API

28
00:01:27,960 --> 00:01:29,460
and kubernetes

29
00:01:29,460 --> 00:01:32,759
pod security policies were the only

30
00:01:32,759 --> 00:01:34,680
built-in way to configure your

31
00:01:34,680 --> 00:01:38,460
kubernetes cluster so that uh a workload

32
00:01:38,460 --> 00:01:40,619
could not be submitted that that could

33
00:01:40,619 --> 00:01:43,860
trivially escalate to root on the Node

34
00:01:43,860 --> 00:01:45,960
um but but kubernetes deprecation is

35
00:01:45,960 --> 00:01:48,420
just an initial first step it's initial

36
00:01:48,420 --> 00:01:49,920
early warning that says hey this is

37
00:01:49,920 --> 00:01:51,840
going to go away eventually

38
00:01:51,840 --> 00:01:53,340
um you know start making plans to come

39
00:01:53,340 --> 00:01:54,899
off of it find something else that will

40
00:01:54,899 --> 00:01:56,100
work for you

41
00:01:56,100 --> 00:01:57,960
and there really are no plans to remove

42
00:01:57,960 --> 00:02:00,659
pod security policy until kubernetes

43
00:02:00,659 --> 00:02:03,240
1.25

44
00:02:03,240 --> 00:02:04,920
which is the next kubernetes release

45
00:02:04,920 --> 00:02:07,680
1.24 came out last month

46
00:02:07,680 --> 00:02:10,258
um so the next uh the next version of

47
00:02:10,258 --> 00:02:11,819
kubernetes probably will not have pod

48
00:02:11,819 --> 00:02:14,220
security policies in them

49
00:02:14,220 --> 00:02:15,720
um there's still no reason to worry if

50
00:02:15,720 --> 00:02:17,099
you if you might be using pod security

51
00:02:17,099 --> 00:02:20,280
policies because you have most most

52
00:02:20,280 --> 00:02:21,959
folks are not on the freshest Upstream

53
00:02:21,959 --> 00:02:23,720
release of kubernetes as it comes out

54
00:02:23,720 --> 00:02:27,239
and you will have at least a year of

55
00:02:27,239 --> 00:02:29,280
1.24 being supported before that

56
00:02:29,280 --> 00:02:30,959
eventually goes away

57
00:02:30,959 --> 00:02:32,580
so you're not going to be forced to

58
00:02:32,580 --> 00:02:34,200
force off of pod security polies a lot

59
00:02:34,200 --> 00:02:35,940
of folks are not on are not using pod

60
00:02:35,940 --> 00:02:37,980
security policies it's a we'll get into

61
00:02:37,980 --> 00:02:39,959
it it's a little bit difficult of a of a

62
00:02:39,959 --> 00:02:41,879
tool to use

63
00:02:41,879 --> 00:02:42,959
um

64
00:02:42,959 --> 00:02:45,360
but yeah we will uh

65
00:02:45,360 --> 00:02:47,580
we will get into that later

66
00:02:47,580 --> 00:02:49,500
um a little bit about me

67
00:02:49,500 --> 00:02:52,080
um I am my name is Alex wise

68
00:02:52,080 --> 00:02:53,760
um I've been doing kubernetes stuff for

69
00:02:53,760 --> 00:02:55,200
a little while

70
00:02:55,200 --> 00:02:58,500
my first production cluster was uh 1.6 a

71
00:02:58,500 --> 00:03:00,599
little while ago I've since then secured

72
00:03:00,599 --> 00:03:02,340
kubernetes workloads a lot of different

73
00:03:02,340 --> 00:03:04,379
places I've done for SAS for robotics

74
00:03:04,379 --> 00:03:06,599
for ML workloads

75
00:03:06,599 --> 00:03:08,580
um if you want to ever nerd out about

76
00:03:08,580 --> 00:03:10,080
development environments or build

77
00:03:10,080 --> 00:03:12,239
tooling and how to secure that let me

78
00:03:12,239 --> 00:03:14,640
know I'm currently at a company called

79
00:03:14,640 --> 00:03:17,519
verica we build tools to help you secure

80
00:03:17,519 --> 00:03:20,400
and find the the safety margins of your

81
00:03:20,400 --> 00:03:22,019
kubernetes clusters of your Kafka

82
00:03:22,019 --> 00:03:24,420
clusters

83
00:03:24,420 --> 00:03:26,580
we also do work around town for the

84
00:03:26,580 --> 00:03:28,260
software Freedom School I teach for them

85
00:03:28,260 --> 00:03:30,900
write some classes for them helping

86
00:03:30,900 --> 00:03:32,640
beginners learn how to use why to choose

87
00:03:32,640 --> 00:03:35,280
open source software so some folks may

88
00:03:35,280 --> 00:03:36,780
have seen me for that my you can find me

89
00:03:36,780 --> 00:03:40,140
on Twitter AWS Architects so that's me

90
00:03:40,140 --> 00:03:42,000
I do want to lead off here with a couple

91
00:03:42,000 --> 00:03:44,400
quotes from the co-chairs of Sig

92
00:03:44,400 --> 00:03:48,720
security for kubernetes the first one

93
00:03:48,720 --> 00:03:49,799
um

94
00:03:49,799 --> 00:03:53,340
indicates what what value pod security

95
00:03:53,340 --> 00:03:56,940
policies gave us uh what how people used

96
00:03:56,940 --> 00:03:58,260
them what was the threat model they were

97
00:03:58,260 --> 00:04:00,060
trying to stop

98
00:04:00,060 --> 00:04:02,220
um the other one we'll talk about the

99
00:04:02,220 --> 00:04:03,900
design decisions of philosophy where

100
00:04:03,900 --> 00:04:05,400
they want to move kubernetes to why

101
00:04:05,400 --> 00:04:06,780
they're deprecating pot security

102
00:04:06,780 --> 00:04:08,340
policies and what the replacement needs

103
00:04:08,340 --> 00:04:09,599
to do better

104
00:04:09,599 --> 00:04:11,760
so the first quote here

105
00:04:11,760 --> 00:04:14,099
is from Tabby Sable from her talk from

106
00:04:14,099 --> 00:04:16,620
kubecon last year PSP replacement past

107
00:04:16,620 --> 00:04:19,340
present and future

108
00:04:22,199 --> 00:04:24,180
permission to create pod

109
00:04:24,180 --> 00:04:26,400
should not mean permission to be root on

110
00:04:26,400 --> 00:04:28,440
every node in the cluster

111
00:04:28,440 --> 00:04:31,320
so this is the problem that pod security

112
00:04:31,320 --> 00:04:34,979
policy existed to solve kubernetes is a

113
00:04:34,979 --> 00:04:36,840
is a system administration tool that

114
00:04:36,840 --> 00:04:39,180
wants to do system administration things

115
00:04:39,180 --> 00:04:41,280
it wants to help you run privileged

116
00:04:41,280 --> 00:04:42,479
workloads

117
00:04:42,479 --> 00:04:46,440
perform upgrades things like that so

118
00:04:46,440 --> 00:04:48,000
if you're able to run those kind of

119
00:04:48,000 --> 00:04:50,400
privileged workloads there are a

120
00:04:50,400 --> 00:04:52,680
thousand different Paths of attacks ways

121
00:04:52,680 --> 00:04:54,540
to to escalate your privileges out of a

122
00:04:54,540 --> 00:04:55,919
container way to perform container

123
00:04:55,919 --> 00:04:57,180
breakouts

124
00:04:57,180 --> 00:04:59,340
that mean that there's really a very

125
00:04:59,340 --> 00:05:01,440
fuzzy line between create pod and

126
00:05:01,440 --> 00:05:04,199
kubernetes and root on the Node and

127
00:05:04,199 --> 00:05:05,639
we'll talk a few of those in a little

128
00:05:05,639 --> 00:05:07,979
bit but but that's that's what PSP's

129
00:05:07,979 --> 00:05:09,840
solved that's what the replacement needs

130
00:05:09,840 --> 00:05:11,160
to solve that's why we're talking about

131
00:05:11,160 --> 00:05:13,520
this

132
00:05:13,680 --> 00:05:15,720
the next video is from Ian the other

133
00:05:15,720 --> 00:05:17,940
co-chair of Sig security

134
00:05:17,940 --> 00:05:21,259
Tweet back in 2020 saying kubernetes

135
00:05:21,259 --> 00:05:25,139
emphatically not secure by default

136
00:05:25,139 --> 00:05:27,180
um and and we should not paper over that

137
00:05:27,180 --> 00:05:29,520
fact that that what kubernetes needs to

138
00:05:29,520 --> 00:05:33,000
do better is to be secure by default

139
00:05:33,000 --> 00:05:34,440
um you shouldn't need to be a secure

140
00:05:34,440 --> 00:05:37,440
container security Guru to to be able to

141
00:05:37,440 --> 00:05:39,300
to run a secure cluster

142
00:05:39,300 --> 00:05:41,699
so that's where we see PSPs we're

143
00:05:41,699 --> 00:05:43,380
falling down and what The Replacements

144
00:05:43,380 --> 00:05:46,160
May hopefully do a little bit better

145
00:05:46,160 --> 00:05:48,539
it's really important I'm going to put

146
00:05:48,539 --> 00:05:49,500
it here

147
00:05:49,500 --> 00:05:52,020
we'll probably refer back to it but

148
00:05:52,020 --> 00:05:55,860
kubernetes needs to be secure by default

149
00:05:55,860 --> 00:05:57,539
so wayfinding slide here we just

150
00:05:57,539 --> 00:05:59,400
finished intros

151
00:05:59,400 --> 00:06:01,320
we're going to talk about what is slash

152
00:06:01,320 --> 00:06:03,479
was the Pod security policy we're going

153
00:06:03,479 --> 00:06:04,680
to dive a little bit more into what

154
00:06:04,680 --> 00:06:06,180
those rough edges were why it's going

155
00:06:06,180 --> 00:06:08,100
away

156
00:06:08,100 --> 00:06:09,180
going to talk about pod security

157
00:06:09,180 --> 00:06:11,699
admission it's replacement

158
00:06:11,699 --> 00:06:13,620
um and then if pod security admission

159
00:06:13,620 --> 00:06:15,660
doesn't work for you or if you're if

160
00:06:15,660 --> 00:06:16,979
you're a security research or an

161
00:06:16,979 --> 00:06:18,300
attacker out there trying to see what

162
00:06:18,300 --> 00:06:20,280
you might be up against a in a cluster

163
00:06:20,280 --> 00:06:21,840
we'll talk about some of the other

164
00:06:21,840 --> 00:06:23,819
security controls that solve this

165
00:06:23,819 --> 00:06:25,880
problem in kubernetes

166
00:06:25,880 --> 00:06:29,759
all right so diving into it what is a

167
00:06:29,759 --> 00:06:33,000
pod security policy anyway

168
00:06:33,000 --> 00:06:35,699
so pod security policy was an admission

169
00:06:35,699 --> 00:06:39,780
control plug-in it was it's the only uh

170
00:06:39,780 --> 00:06:42,000
security system like this that's built

171
00:06:42,000 --> 00:06:44,580
into kubernetes natively

172
00:06:44,580 --> 00:06:46,680
and that that's important right it was

173
00:06:46,680 --> 00:06:48,360
it's pretty long in the tooth it was G8

174
00:06:48,360 --> 00:06:51,900
in 1.6 and what it does is it lets you

175
00:06:51,900 --> 00:06:54,060
configure requirements for the security

176
00:06:54,060 --> 00:06:56,400
context for any pods that run there and

177
00:06:56,400 --> 00:06:58,080
those are extremely granular we'll take

178
00:06:58,080 --> 00:07:00,180
a look at those some of those but you

179
00:07:00,180 --> 00:07:03,120
can be very specific about the secure

180
00:07:03,120 --> 00:07:05,520
the security controls that you want on

181
00:07:05,520 --> 00:07:07,979
your uh on your workloads

182
00:07:07,979 --> 00:07:09,979
it's also extremely flexible

183
00:07:09,979 --> 00:07:12,180
you can configure your pod security

184
00:07:12,180 --> 00:07:15,360
policy to to default you to secure

185
00:07:15,360 --> 00:07:18,120
settings to to to secure or just

186
00:07:18,120 --> 00:07:20,160
validate and say no you're trying to run

187
00:07:20,160 --> 00:07:21,780
as privileged we won't let that on the

188
00:07:21,780 --> 00:07:22,979
cluster

189
00:07:22,979 --> 00:07:24,660
um you can set these policies up so they

190
00:07:24,660 --> 00:07:26,819
apply to to all namespaces and

191
00:07:26,819 --> 00:07:29,340
everything cluster wide or you can scope

192
00:07:29,340 --> 00:07:31,560
them to specific privileged privileged

193
00:07:31,560 --> 00:07:33,180
name spaces so there's it's very

194
00:07:33,180 --> 00:07:35,520
flexible and very granular which which

195
00:07:35,520 --> 00:07:39,180
creates some foot guns for for folks um

196
00:07:39,180 --> 00:07:42,139
who may not have expertise in this so

197
00:07:42,139 --> 00:07:44,580
uh this is some of the granularity this

198
00:07:44,580 --> 00:07:46,560
is just a sampling of some of the the

199
00:07:46,560 --> 00:07:48,780
controls you would have uh with pod

200
00:07:48,780 --> 00:07:50,400
security policies setting those security

201
00:07:50,400 --> 00:07:53,280
contacts you can see things like running

202
00:07:53,280 --> 00:07:55,740
privileged containers

203
00:07:55,740 --> 00:07:59,160
um you can see in Linux capabilities any

204
00:07:59,160 --> 00:08:01,620
sorts of of volume mounts you might be

205
00:08:01,620 --> 00:08:04,440
able to add there's um SC Linux modes

206
00:08:04,440 --> 00:08:07,860
and app app armor settings that would be

207
00:08:07,860 --> 00:08:09,660
configurable here

208
00:08:09,660 --> 00:08:10,800
um

209
00:08:10,800 --> 00:08:13,080
and if you see there's a an allow

210
00:08:13,080 --> 00:08:14,819
privilege escalation Boolean which is

211
00:08:14,819 --> 00:08:16,860
kind of my favorite Boolean like set

212
00:08:16,860 --> 00:08:18,780
this to false and hey we've solved

213
00:08:18,780 --> 00:08:20,879
security right we we did it

214
00:08:20,879 --> 00:08:22,919
we fixed cyber

215
00:08:22,919 --> 00:08:25,199
um yeah maybe

216
00:08:25,199 --> 00:08:27,240
um anyway so how does this work in

217
00:08:27,240 --> 00:08:31,199
practice so uh so pod security policies

218
00:08:31,199 --> 00:08:33,299
that they build on the the existing R

219
00:08:33,299 --> 00:08:35,760
back and workload identity apis of

220
00:08:35,760 --> 00:08:37,020
kubernetes

221
00:08:37,020 --> 00:08:39,659
essentially every pod has a service

222
00:08:39,659 --> 00:08:42,779
account associated with it and and that

223
00:08:42,779 --> 00:08:45,600
says what permissions that pod has so

224
00:08:45,600 --> 00:08:47,640
PSPs just sort of build on that and say

225
00:08:47,640 --> 00:08:49,740
okay if you if you have this identity

226
00:08:49,740 --> 00:08:51,899
apply this policy to it you might have

227
00:08:51,899 --> 00:08:53,519
these extra permissions or you might be

228
00:08:53,519 --> 00:08:55,500
running you know very very restrictive

229
00:08:55,500 --> 00:08:59,160
but pods map to service accounts map to

230
00:08:59,160 --> 00:09:01,440
either cluster roles or roles and then

231
00:09:01,440 --> 00:09:03,839
those map to PSPs if you're if you're

232
00:09:03,839 --> 00:09:06,540
mutating you're going to get one PSP if

233
00:09:06,540 --> 00:09:08,459
you're if you're validating you might

234
00:09:08,459 --> 00:09:10,500
get a whole array of them uh the

235
00:09:10,500 --> 00:09:12,360
drawback here is that if you're not

236
00:09:12,360 --> 00:09:15,540
using workload identity in um in your

237
00:09:15,540 --> 00:09:18,240
kubernetes clusters so for instance if

238
00:09:18,240 --> 00:09:20,640
all of your pods run as the default

239
00:09:20,640 --> 00:09:23,279
underscore default service account in a

240
00:09:23,279 --> 00:09:25,200
namespace you might have some heavy

241
00:09:25,200 --> 00:09:27,180
lifting to do before you could start to

242
00:09:27,180 --> 00:09:30,120
use pod security policies

243
00:09:30,120 --> 00:09:32,760
but in theory what I could do here I

244
00:09:32,760 --> 00:09:34,620
could make a a really restrictive

245
00:09:34,620 --> 00:09:36,360
cluster role that is cluster-wide that

246
00:09:36,360 --> 00:09:39,000
everything sort of gets by default

247
00:09:39,000 --> 00:09:40,680
um and then if I have more privileged

248
00:09:40,680 --> 00:09:42,540
workloads if I have security tooling if

249
00:09:42,540 --> 00:09:44,640
I have I have operational tooling or or

250
00:09:44,640 --> 00:09:47,700
Legacy workloads then I have a role

251
00:09:47,700 --> 00:09:49,500
that's specified to a single namespace

252
00:09:49,500 --> 00:09:52,260
and gives me just those perms there so

253
00:09:52,260 --> 00:09:53,760
it can kind of do this high this really

254
00:09:53,760 --> 00:09:57,480
cool hierarchical uh setup where I I can

255
00:09:57,480 --> 00:09:59,459
get my least privilege right so that's

256
00:09:59,459 --> 00:10:01,800
what this kind of looks like here on the

257
00:10:01,800 --> 00:10:03,180
left we have a cluster role that's

258
00:10:03,180 --> 00:10:06,120
cluster wide it's very restrictive on

259
00:10:06,120 --> 00:10:07,440
the bottom there that says resource

260
00:10:07,440 --> 00:10:09,000
names that is the name of your pod

261
00:10:09,000 --> 00:10:11,339
security policy the block all the things

262
00:10:11,339 --> 00:10:13,800
policy on the right and your lift and

263
00:10:13,800 --> 00:10:16,860
shift Legacy namespace you've gotten all

264
00:10:16,860 --> 00:10:19,620
the perms pod security policy

265
00:10:19,620 --> 00:10:21,000
so that you can kind of do this this

266
00:10:21,000 --> 00:10:22,740
really cool thing where you have have

267
00:10:22,740 --> 00:10:24,600
hierarchies and you can run the things

268
00:10:24,600 --> 00:10:26,640
that need permissions

269
00:10:26,640 --> 00:10:28,800
um just sort of as with those elevated

270
00:10:28,800 --> 00:10:30,240
permissions without making the cluster

271
00:10:30,240 --> 00:10:31,740
as a whole

272
00:10:31,740 --> 00:10:34,080
um less secure

273
00:10:34,080 --> 00:10:36,180
pretty cool so I think I can do

274
00:10:36,180 --> 00:10:38,519
something like that how do I turn it on

275
00:10:38,519 --> 00:10:40,560
all right so PSP

276
00:10:40,560 --> 00:10:42,920
uh you would turn it on just by by

277
00:10:42,920 --> 00:10:45,779
passing a flag in this enable admission

278
00:10:45,779 --> 00:10:47,700
plugins flag

279
00:10:47,700 --> 00:10:49,680
um to your the cube API server start

280
00:10:49,680 --> 00:10:51,120
command

281
00:10:51,120 --> 00:10:52,620
um you'll actually just be a big long

282
00:10:52,620 --> 00:10:55,440
string of comma separated plugins that

283
00:10:55,440 --> 00:10:57,660
are that are also on by default this

284
00:10:57,660 --> 00:10:59,220
will typically live in your cluster

285
00:10:59,220 --> 00:11:00,959
build out scripts or your your

286
00:11:00,959 --> 00:11:02,399
infrastructures code that kind of

287
00:11:02,399 --> 00:11:03,959
automation

288
00:11:03,959 --> 00:11:06,300
um so I I can do that I can

289
00:11:06,300 --> 00:11:08,279
update this right and the idea is I'll

290
00:11:08,279 --> 00:11:10,800
turn this on and then I'll go in I'll

291
00:11:10,800 --> 00:11:12,180
start looking at my workloads I'll start

292
00:11:12,180 --> 00:11:14,700
crafting policies uh similar to what

293
00:11:14,700 --> 00:11:16,560
that previous slide was and and set this

294
00:11:16,560 --> 00:11:19,860
up right and so I'll do that

295
00:11:19,860 --> 00:11:21,600
and everything breaks

296
00:11:21,600 --> 00:11:25,019
because uh pod security policy is a

297
00:11:25,019 --> 00:11:27,420
security control it's denied by default

298
00:11:27,420 --> 00:11:30,420
if I turn it on and I don't have my PSPs

299
00:11:30,420 --> 00:11:31,440
created

300
00:11:31,440 --> 00:11:33,540
uh no pods can be scheduled everything

301
00:11:33,540 --> 00:11:35,100
gets denied everything gets shut down

302
00:11:35,100 --> 00:11:37,560
and everyone's mad at me

303
00:11:37,560 --> 00:11:39,240
um so

304
00:11:39,240 --> 00:11:41,940
I need to know I I need to know exactly

305
00:11:41,940 --> 00:11:43,440
what my policies are going to look like

306
00:11:43,440 --> 00:11:45,240
before I turn it on

307
00:11:45,240 --> 00:11:46,920
but I

308
00:11:46,920 --> 00:11:48,959
I can't turn it on until I know what my

309
00:11:48,959 --> 00:11:50,760
policies look I kind of I kind of have

310
00:11:50,760 --> 00:11:52,260
this chicken and egg thing right I I

311
00:11:52,260 --> 00:11:56,940
can't quite uh uh I don't know a priori

312
00:11:56,940 --> 00:11:59,820
what my PSPs need to look like and I I

313
00:11:59,820 --> 00:12:01,800
can't really

314
00:12:01,800 --> 00:12:03,959
find my way into them but what I could

315
00:12:03,959 --> 00:12:05,220
do is I could like make a really

316
00:12:05,220 --> 00:12:06,360
permissive

317
00:12:06,360 --> 00:12:09,000
Global policy then turn it on and then

318
00:12:09,000 --> 00:12:11,100
start incrementally

319
00:12:11,100 --> 00:12:12,540
um you know creating policies for

320
00:12:12,540 --> 00:12:13,740
different workloads and finding these

321
00:12:13,740 --> 00:12:16,019
privilege I could do that

322
00:12:16,019 --> 00:12:18,480
there are some caveats

323
00:12:18,480 --> 00:12:20,399
um you know it will take some some trial

324
00:12:20,399 --> 00:12:21,720
and error to get this right probably

325
00:12:21,720 --> 00:12:23,820
depending on how complex I need to be

326
00:12:23,820 --> 00:12:25,140
with it

327
00:12:25,140 --> 00:12:27,300
and it's not a great default I mean we

328
00:12:27,300 --> 00:12:29,220
can just say that right this is this is

329
00:12:29,220 --> 00:12:32,100
this is uh from a from a defender's

330
00:12:32,100 --> 00:12:33,899
perspective

331
00:12:33,899 --> 00:12:36,839
um I I have to do a lot of maneuvering

332
00:12:36,839 --> 00:12:38,459
to get these turned on to get these

333
00:12:38,459 --> 00:12:40,079
running in my environment

334
00:12:40,079 --> 00:12:42,300
and and if we're trying to be secure by

335
00:12:42,300 --> 00:12:43,620
default that we're kind of falling down

336
00:12:43,620 --> 00:12:45,060
here

337
00:12:45,060 --> 00:12:49,339
all right one moment

338
00:12:49,519 --> 00:12:51,360
cool

339
00:12:51,360 --> 00:12:54,000
any questions so far in that

340
00:12:54,000 --> 00:12:55,079
nope

341
00:12:55,079 --> 00:12:57,060
all right so

342
00:12:57,060 --> 00:12:58,200
we're going to dive in a little bit

343
00:12:58,200 --> 00:13:00,959
deeper into pod security policies

344
00:13:00,959 --> 00:13:03,779
um we're gonna say okay I have done

345
00:13:03,779 --> 00:13:04,980
everything I said in that previous

346
00:13:04,980 --> 00:13:07,260
section right I've set up these these

347
00:13:07,260 --> 00:13:08,399
cluster roles I've got everything

348
00:13:08,399 --> 00:13:10,019
running I think I'm running pretty

349
00:13:10,019 --> 00:13:12,300
secure fairly least privileged I'm

350
00:13:12,300 --> 00:13:13,980
feeling good about it I'm probably in

351
00:13:13,980 --> 00:13:16,800
the top 10 percent of secure kubernetes

352
00:13:16,800 --> 00:13:18,660
clusters operators because a lot of

353
00:13:18,660 --> 00:13:21,120
folks don't use PSPs because they're

354
00:13:21,120 --> 00:13:23,220
kind of difficult

355
00:13:23,220 --> 00:13:25,680
then I come across a blog post and it

356
00:13:25,680 --> 00:13:28,260
says kubernetes insecure host path

357
00:13:28,260 --> 00:13:31,560
mounts okay okay

358
00:13:31,560 --> 00:13:33,600
um I dive in I dive into this blog post

359
00:13:33,600 --> 00:13:34,860
and I think

360
00:13:34,860 --> 00:13:39,019
oh duh right cool so kubernetes lets you

361
00:13:39,019 --> 00:13:42,720
mount a server's direct a directory from

362
00:13:42,720 --> 00:13:45,480
the server inside your container as a as

363
00:13:45,480 --> 00:13:47,100
a volume inside that container similar

364
00:13:47,100 --> 00:13:49,200
to how you would do with Docker right

365
00:13:49,200 --> 00:13:52,079
well if I just Mount the root directory

366
00:13:52,079 --> 00:13:54,240
of my server inside my container I can

367
00:13:54,240 --> 00:13:56,339
do all kinds of shenanigans uh this blog

368
00:13:56,339 --> 00:13:58,860
post has you just rooting into into that

369
00:13:58,860 --> 00:14:00,180
directory and taking over the server

370
00:14:00,180 --> 00:14:01,920
that way but you could you could cut

371
00:14:01,920 --> 00:14:04,019
Etsy Shadow you could steal SSH Keys you

372
00:14:04,019 --> 00:14:06,060
could steal the the kubernetes node

373
00:14:06,060 --> 00:14:07,920
search right there's a lot of Mischief

374
00:14:07,920 --> 00:14:10,740
you can have if you have full access to

375
00:14:10,740 --> 00:14:14,399
the root directory on a Linux server

376
00:14:14,399 --> 00:14:16,320
but I can fix this right I can block

377
00:14:16,320 --> 00:14:18,600
this PSPs I have them set up they give

378
00:14:18,600 --> 00:14:21,300
me the tools to to fix this

379
00:14:21,300 --> 00:14:22,680
and it would look something like this

380
00:14:22,680 --> 00:14:25,800
right I don't I don't even I'm in the

381
00:14:25,800 --> 00:14:27,839
cloud right I don't need this host path

382
00:14:27,839 --> 00:14:29,700
I don't need to be mounting directories

383
00:14:29,700 --> 00:14:32,940
inside of containers from from my server

384
00:14:32,940 --> 00:14:34,860
my my servers are mostly immutable

385
00:14:34,860 --> 00:14:38,339
there's no there's no uh State saved

386
00:14:38,339 --> 00:14:39,300
there

387
00:14:39,300 --> 00:14:41,040
um so yeah I'll just I'll just I won't

388
00:14:41,040 --> 00:14:42,660
allow

389
00:14:42,660 --> 00:14:44,940
um I won't allow host paths I will

390
00:14:44,940 --> 00:14:46,560
update all my pod security policies on

391
00:14:46,560 --> 00:14:47,940
my cluster and say you know these this

392
00:14:47,940 --> 00:14:49,980
is the list of the types of volumes we

393
00:14:49,980 --> 00:14:51,240
allow these are sort of kubernetes

394
00:14:51,240 --> 00:14:53,339
native things are Cloud native things we

395
00:14:53,339 --> 00:14:55,139
don't we don't need host paths we don't

396
00:14:55,139 --> 00:14:56,220
want to touch them

397
00:14:56,220 --> 00:14:58,960
and I feel good I feel super secure

398
00:14:58,960 --> 00:14:59,579
[Music]

399
00:14:59,579 --> 00:15:00,180
um

400
00:15:00,180 --> 00:15:04,620
until I see this tweet from Duffy

401
00:15:04,620 --> 00:15:06,899
and that's a that's a heck of a tweet uh

402
00:15:06,899 --> 00:15:09,660
this can run this on any

403
00:15:09,660 --> 00:15:11,519
any cluster

404
00:15:11,519 --> 00:15:13,560
that's not running pod security policies

405
00:15:13,560 --> 00:15:17,519
and get get root on a node

406
00:15:17,519 --> 00:15:19,980
and it's a heck of a tweet right

407
00:15:19,980 --> 00:15:21,139
um

408
00:15:21,139 --> 00:15:24,839
but I I'm a container guy I'm a

409
00:15:24,839 --> 00:15:26,699
kubernetes guy I can I can so I can

410
00:15:26,699 --> 00:15:27,899
parse this right there's nothing here

411
00:15:27,899 --> 00:15:31,860
that I can't parse so Coupe GTL run

412
00:15:31,860 --> 00:15:33,600
pretty standard the image doesn't matter

413
00:15:33,600 --> 00:15:35,220
because we're overriding it okay host

414
00:15:35,220 --> 00:15:36,720
PID true

415
00:15:36,720 --> 00:15:39,360
inner Center all right I think I see

416
00:15:39,360 --> 00:15:43,079
what's going on here and I I I remember

417
00:15:43,079 --> 00:15:44,940
something I heard about about Linux

418
00:15:44,940 --> 00:15:46,260
containers

419
00:15:46,260 --> 00:15:48,600
so Linux so containers aren't little

420
00:15:48,600 --> 00:15:50,459
boxes right I remember Alice goldfuss's

421
00:15:50,459 --> 00:15:51,779
talk here and she had a mantra about

422
00:15:51,779 --> 00:15:53,579
Linux containers containers are

423
00:15:53,579 --> 00:15:55,920
processes anchored to namespaces

424
00:15:55,920 --> 00:15:57,959
controlled by c groups

425
00:15:57,959 --> 00:16:00,360
uh so so container is just a process

426
00:16:00,360 --> 00:16:02,639
it's got It's got a pids uh it's in a

427
00:16:02,639 --> 00:16:05,220
namespace and that says what uh the

428
00:16:05,220 --> 00:16:06,540
Linux namespace says what other

429
00:16:06,540 --> 00:16:08,459
processes it can see and what what

430
00:16:08,459 --> 00:16:10,500
devices it can see and the c groups

431
00:16:10,500 --> 00:16:13,560
control what resources has access to so

432
00:16:13,560 --> 00:16:15,720
if I do a Docker run

433
00:16:15,720 --> 00:16:17,940
okay I started Docker container yeah I

434
00:16:17,940 --> 00:16:20,220
can see that it it has a a it is a

435
00:16:20,220 --> 00:16:22,920
process just on my server it has a PID

436
00:16:22,920 --> 00:16:24,540
um I can do some Linux internal stuff

437
00:16:24,540 --> 00:16:26,160
and see the namespace that it's running

438
00:16:26,160 --> 00:16:28,680
in and I can use that NS enter command

439
00:16:28,680 --> 00:16:31,260
and go into that namespace

440
00:16:31,260 --> 00:16:32,519
um you know I can also see this

441
00:16:32,519 --> 00:16:34,320
information about the C group it's in so

442
00:16:34,320 --> 00:16:36,060
so containers are just processes and

443
00:16:36,060 --> 00:16:38,459
namespaces so going back to Duffy's

444
00:16:38,459 --> 00:16:40,560
tweet all right

445
00:16:40,560 --> 00:16:43,680
so running host PID true that means that

446
00:16:43,680 --> 00:16:45,839
I'm running in the hosts process space

447
00:16:45,839 --> 00:16:49,860
the host name space and I'm using NS

448
00:16:49,860 --> 00:16:50,940
enter

449
00:16:50,940 --> 00:16:53,399
to to go into that namespace that means

450
00:16:53,399 --> 00:16:55,440
that I can see every process and every

451
00:16:55,440 --> 00:16:57,180
device on the Node I can touch every

452
00:16:57,180 --> 00:17:00,480
file so that I'm rude at that point um

453
00:17:00,480 --> 00:17:02,160
everything in Linux is a file so if I do

454
00:17:02,160 --> 00:17:04,260
that I am essentially root

455
00:17:04,260 --> 00:17:06,059
on the server

456
00:17:06,059 --> 00:17:08,280
but I can fix that right I can I can I

457
00:17:08,280 --> 00:17:11,160
can I can use my PSPs to make host bid

458
00:17:11,160 --> 00:17:13,799
false and and privileged false and host

459
00:17:13,799 --> 00:17:15,839
Network false and privilege escalation

460
00:17:15,839 --> 00:17:21,139
false I can do all that to stop it but

461
00:17:21,299 --> 00:17:23,520
it's not very secure by default I've had

462
00:17:23,520 --> 00:17:25,559
to be a container breakout expert to

463
00:17:25,559 --> 00:17:27,660
understand these Paths of attack so that

464
00:17:27,660 --> 00:17:31,260
I could craft these policies so that I

465
00:17:31,260 --> 00:17:33,299
could stop it and and that is not a

466
00:17:33,299 --> 00:17:37,039
place that kubernetes wants to be

467
00:17:38,520 --> 00:17:39,900
um

468
00:17:39,900 --> 00:17:44,160
so wouldn't it be cool if kubernetes

469
00:17:44,160 --> 00:17:47,400
bundled up everything that it knew about

470
00:17:47,400 --> 00:17:49,260
container escalations and privilege

471
00:17:49,260 --> 00:17:50,880
escalation and container breakouts into

472
00:17:50,880 --> 00:17:52,880
a policy right because I talked about

473
00:17:52,880 --> 00:17:56,039
insecure host path mounts and host bid

474
00:17:56,039 --> 00:17:58,440
takeovers but but you there's mounting

475
00:17:58,440 --> 00:18:01,320
the the container runtime socket inside

476
00:18:01,320 --> 00:18:04,740
the container there is running with cap

477
00:18:04,740 --> 00:18:08,460
BPF and capnet raw to to forged packets

478
00:18:08,460 --> 00:18:12,000
there there is uh unmasking the slash

479
00:18:12,000 --> 00:18:13,799
proc Mount there are all these sorts of

480
00:18:13,799 --> 00:18:15,780
container breakouts all these acrobatics

481
00:18:15,780 --> 00:18:17,880
you can do to get out of a container

482
00:18:17,880 --> 00:18:20,460
when you can run privileged workloads

483
00:18:20,460 --> 00:18:22,200
and wouldn't it be cool if kubernetes

484
00:18:22,200 --> 00:18:24,480
bundled all those up for me

485
00:18:24,480 --> 00:18:29,600
so now we get to the PSA on PSAs

486
00:18:30,840 --> 00:18:33,480
pod security admission is the

487
00:18:33,480 --> 00:18:35,280
replacement for for pod security

488
00:18:35,280 --> 00:18:36,660
policies

489
00:18:36,660 --> 00:18:39,419
it is also an admission controller uh

490
00:18:39,419 --> 00:18:42,480
entered beta very recently uh 1.23 still

491
00:18:42,480 --> 00:18:44,160
behind a feature gate

492
00:18:44,160 --> 00:18:46,740
pod security admission is is

493
00:18:46,740 --> 00:18:48,660
significantly simpler

494
00:18:48,660 --> 00:18:51,480
and then pod security policy uh it it

495
00:18:51,480 --> 00:18:53,820
works at the namespace level you

496
00:18:53,820 --> 00:18:56,280
essentially uh in kubernetes labels are

497
00:18:56,280 --> 00:18:58,980
key values that you that you assigned

498
00:18:58,980 --> 00:19:01,740
objects so you're assigning these to the

499
00:19:01,740 --> 00:19:04,200
namespace object and kubernetes and

500
00:19:04,200 --> 00:19:05,820
basically setting it to one of three

501
00:19:05,820 --> 00:19:07,980
security levels and any any workloads

502
00:19:07,980 --> 00:19:10,140
any pods that run in that namespace

503
00:19:10,140 --> 00:19:12,720
will need to conform to whatever that

504
00:19:12,720 --> 00:19:14,520
that that level is

505
00:19:14,520 --> 00:19:15,480
um so what you're getting here you're

506
00:19:15,480 --> 00:19:17,039
getting a loss of that granularity you

507
00:19:17,039 --> 00:19:19,020
don't have that that tool kit that you

508
00:19:19,020 --> 00:19:20,280
had

509
00:19:20,280 --> 00:19:22,260
um that you could use to craft really

510
00:19:22,260 --> 00:19:25,080
specific uh policies but you get better

511
00:19:25,080 --> 00:19:27,240
defaults if you're if you're not a

512
00:19:27,240 --> 00:19:30,780
container security expert you you can

513
00:19:30,780 --> 00:19:33,600
um get a default secure setting and

514
00:19:33,600 --> 00:19:36,179
reasonably trust that that you're not

515
00:19:36,179 --> 00:19:38,640
there aren't uh Paths of attack that

516
00:19:38,640 --> 00:19:39,840
there aren't privilege escalations that

517
00:19:39,840 --> 00:19:41,820
could be performed

518
00:19:41,820 --> 00:19:44,340
so I like this um this first sentence

519
00:19:44,340 --> 00:19:46,679
from the Pod security admission Docs

520
00:19:46,679 --> 00:19:48,840
uh kubernetes pod security standards

521
00:19:48,840 --> 00:19:50,640
Define different isolation levels for

522
00:19:50,640 --> 00:19:52,980
pods these standards let you define how

523
00:19:52,980 --> 00:19:54,780
you want to restrict behavior of pods in

524
00:19:54,780 --> 00:19:57,240
a clear consistent fashion security

525
00:19:57,240 --> 00:19:58,440
restrictions are applied to the

526
00:19:58,440 --> 00:20:01,080
namespace level when pods are created so

527
00:20:01,080 --> 00:20:03,120
this is all about pod security standards

528
00:20:03,120 --> 00:20:04,919
so let's let's dive into what those are

529
00:20:04,919 --> 00:20:06,660
I said they were there were three levels

530
00:20:06,660 --> 00:20:07,679
right

531
00:20:07,679 --> 00:20:10,380
the first privileged

532
00:20:10,380 --> 00:20:12,480
basically no restrictions right if we're

533
00:20:12,480 --> 00:20:13,919
not going to stop every privilege

534
00:20:13,919 --> 00:20:15,360
escalation

535
00:20:15,360 --> 00:20:17,280
um you know we will assume that the

536
00:20:17,280 --> 00:20:19,140
privilege can be escalated there let's

537
00:20:19,140 --> 00:20:22,520
let's not restrict anything

538
00:20:22,520 --> 00:20:26,160
Baseline is your your trade-off between

539
00:20:26,160 --> 00:20:28,500
compatibility and and and this is key

540
00:20:28,500 --> 00:20:30,120
here the known privilege escalation

541
00:20:30,120 --> 00:20:31,980
paths

542
00:20:31,980 --> 00:20:35,160
um it it wants to allow as much as

543
00:20:35,160 --> 00:20:37,320
possible to run without opening the

544
00:20:37,320 --> 00:20:40,200
Avenue for create pod to be root on the

545
00:20:40,200 --> 00:20:42,419
Node

546
00:20:42,419 --> 00:20:45,260
um some some of the things that are

547
00:20:45,260 --> 00:20:48,059
enforced in a baseline you can't have

548
00:20:48,059 --> 00:20:49,559
privilege true

549
00:20:49,559 --> 00:20:51,539
there's a list of specific Linux

550
00:20:51,539 --> 00:20:53,940
capabilities that you can have but none

551
00:20:53,940 --> 00:20:55,620
of the really good ones like capsys

552
00:20:55,620 --> 00:20:57,059
admin

553
00:20:57,059 --> 00:20:58,919
um no host paths at all we saw host

554
00:20:58,919 --> 00:21:01,320
paths were really problematic

555
00:21:01,320 --> 00:21:03,419
um and there's there's a list of others

556
00:21:03,419 --> 00:21:04,679
but those are those are some of them the

557
00:21:04,679 --> 00:21:05,880
the Third

558
00:21:05,880 --> 00:21:08,100
uh mode that we can run in here is

559
00:21:08,100 --> 00:21:10,580
restricted

560
00:21:10,620 --> 00:21:12,179
um and that's that's enforcing every

561
00:21:12,179 --> 00:21:13,740
known pod security best practice so

562
00:21:13,740 --> 00:21:15,000
things like your containers can't be

563
00:21:15,000 --> 00:21:16,919
running as root

564
00:21:16,919 --> 00:21:20,100
um any capabilities have to be have to

565
00:21:20,100 --> 00:21:21,480
be dropped any learning Escape abilities

566
00:21:21,480 --> 00:21:24,900
uh whatever the the host SC Linux mode

567
00:21:24,900 --> 00:21:28,260
is has to be enforced things like that

568
00:21:28,260 --> 00:21:31,080
um also there's one where where no child

569
00:21:31,080 --> 00:21:33,179
processes that are spawned inside the

570
00:21:33,179 --> 00:21:35,100
container can have more permissions than

571
00:21:35,100 --> 00:21:37,640
the container at the the parent PID

572
00:21:37,640 --> 00:21:40,919
things like that so

573
00:21:40,919 --> 00:21:43,320
so those are our baselines

574
00:21:43,320 --> 00:21:45,539
um very simple buckets that we can we

575
00:21:45,539 --> 00:21:48,720
can put our workloads in

576
00:21:48,720 --> 00:21:49,980
and

577
00:21:49,980 --> 00:21:51,179
it's behind the future gate right now

578
00:21:51,179 --> 00:21:52,980
but it's enabled by default

579
00:21:52,980 --> 00:21:55,620
we are moving closer to secure by

580
00:21:55,620 --> 00:21:57,179
default and kubernetes with pod security

581
00:21:57,179 --> 00:21:59,659
admission

582
00:22:00,059 --> 00:22:01,380
all right so let's let's take a look

583
00:22:01,380 --> 00:22:02,940
here what do these labels look like I

584
00:22:02,940 --> 00:22:05,340
said it's just two labels that you would

585
00:22:05,340 --> 00:22:08,100
set on on the namespace object

586
00:22:08,100 --> 00:22:10,980
to set this up so the first one is this

587
00:22:10,980 --> 00:22:14,039
mode label

588
00:22:14,039 --> 00:22:17,580
um so mode you enforce audit or warn the

589
00:22:17,580 --> 00:22:18,659
only difference between audit and Warren

590
00:22:18,659 --> 00:22:20,280
is audit is put writing to your audit

591
00:22:20,280 --> 00:22:21,480
logs

592
00:22:21,480 --> 00:22:22,919
um and Warren is just writing out to the

593
00:22:22,919 --> 00:22:24,900
console

594
00:22:24,900 --> 00:22:27,299
um and then you would the level is one

595
00:22:27,299 --> 00:22:29,159
of those three buckets the privileged

596
00:22:29,159 --> 00:22:31,860
Baseline are restricted so you would say

597
00:22:31,860 --> 00:22:33,679
something like pod

598
00:22:33,679 --> 00:22:36,659
security.kubernetes.io enforce Baseline

599
00:22:36,659 --> 00:22:39,240
and in that namespace now every pod that

600
00:22:39,240 --> 00:22:40,620
that could be scheduled in that

601
00:22:40,620 --> 00:22:44,400
namespace must comply with the Baseline

602
00:22:44,400 --> 00:22:45,960
security standard so no running is

603
00:22:45,960 --> 00:22:48,419
privileged uh you'll you'll get rejected

604
00:22:48,419 --> 00:22:49,559
you won't be allowed to run in the

605
00:22:49,559 --> 00:22:50,820
cluster there

606
00:22:50,820 --> 00:22:52,740
the other thing I want to call out here

607
00:22:52,740 --> 00:22:55,740
is the addition of that warn mode is

608
00:22:55,740 --> 00:22:58,140
pretty awesome

609
00:22:58,140 --> 00:22:59,100
um

610
00:22:59,100 --> 00:23:01,320
what that does is I can set that and I

611
00:23:01,320 --> 00:23:03,059
can start looking at my logs I can start

612
00:23:03,059 --> 00:23:04,740
looking at my console to see oh you know

613
00:23:04,740 --> 00:23:06,600
am I getting warnings

614
00:23:06,600 --> 00:23:09,840
and will I need to to move things to

615
00:23:09,840 --> 00:23:11,340
different namespaces if I switch to

616
00:23:11,340 --> 00:23:13,919
enforce will things start breaking it

617
00:23:13,919 --> 00:23:15,419
gives me a road map to go from

618
00:23:15,419 --> 00:23:18,240
Brownfield to secure cluster which was

619
00:23:18,240 --> 00:23:19,440
huge it's that chicken and egg problem

620
00:23:19,440 --> 00:23:21,539
that we had with PSPs we don't have here

621
00:23:21,539 --> 00:23:23,100
because we have a worn mode that we can

622
00:23:23,100 --> 00:23:24,900
we can start using right away

623
00:23:24,900 --> 00:23:27,960
uh by default out of the box so um the

624
00:23:27,960 --> 00:23:29,940
other thing to keep in mind is is the

625
00:23:29,940 --> 00:23:31,740
life cycle of these of these versions

626
00:23:31,740 --> 00:23:33,780
right a baseline uh security isn't set

627
00:23:33,780 --> 00:23:35,280
in stone

628
00:23:35,280 --> 00:23:37,500
um we could imagine that the Baseline

629
00:23:37,500 --> 00:23:39,000
security standard might need to change

630
00:23:39,000 --> 00:23:40,919
in the future you know if one of the

631
00:23:40,919 --> 00:23:43,260
researchers out there starts finds the

632
00:23:43,260 --> 00:23:45,140
way to to leverage one of the the

633
00:23:45,140 --> 00:23:48,539
allowed Linux capabilities to do some

634
00:23:48,539 --> 00:23:50,820
new fancy container Breakout

635
00:23:50,820 --> 00:23:53,580
Baseline needs to get updated there

636
00:23:53,580 --> 00:23:55,980
um and so operators need to sort of have

637
00:23:55,980 --> 00:23:58,860
a version in mind and there needs to be

638
00:23:58,860 --> 00:24:00,720
a path to go from from version to

639
00:24:00,720 --> 00:24:02,960
version

640
00:24:03,419 --> 00:24:05,880
um and six security has decided let's

641
00:24:05,880 --> 00:24:07,740
just tie it to the kubernetes life cycle

642
00:24:07,740 --> 00:24:09,299
kubernetes release is basically

643
00:24:09,299 --> 00:24:11,159
quarterly

644
00:24:11,159 --> 00:24:14,100
um so so you can label here and say my

645
00:24:14,100 --> 00:24:18,600
enforced version is kubernetes 1.24 and

646
00:24:18,600 --> 00:24:22,500
you're enforced uh you're enforced uh

647
00:24:22,500 --> 00:24:24,480
your Baseline standard that will be

648
00:24:24,480 --> 00:24:26,820
using the kubernetes 1.24 version of

649
00:24:26,820 --> 00:24:28,080
that Baseline so those are the two

650
00:24:28,080 --> 00:24:30,539
labels that's how you use it

651
00:24:30,539 --> 00:24:32,820
that's that's pod security admission in

652
00:24:32,820 --> 00:24:34,380
a nutshell

653
00:24:34,380 --> 00:24:37,280
um pretty straightforward

654
00:24:37,860 --> 00:24:40,320
um we get we get better defaults we get

655
00:24:40,320 --> 00:24:43,740
uh we get a roadmap we get that worn

656
00:24:43,740 --> 00:24:45,240
mode we get that road map to be able to

657
00:24:45,240 --> 00:24:48,679
turn it on to see what might break

658
00:24:49,020 --> 00:24:51,900
um and it's just been a a an easier end

659
00:24:51,900 --> 00:24:53,520
user experience for I want to be clear

660
00:24:53,520 --> 00:24:56,039
but the the built-in because this is the

661
00:24:56,039 --> 00:24:57,840
built-in mode of running kubernetes

662
00:24:57,840 --> 00:25:00,659
securely they wanted it to be usable by

663
00:25:00,659 --> 00:25:02,700
by folks who were not container breakout

664
00:25:02,700 --> 00:25:05,179
artists

665
00:25:05,340 --> 00:25:07,320
um all right

666
00:25:07,320 --> 00:25:10,559
uh but but PSA won't be usable by

667
00:25:10,559 --> 00:25:11,460
everyone

668
00:25:11,460 --> 00:25:13,260
um you may have you may have compliance

669
00:25:13,260 --> 00:25:15,600
regimes or security policies that don't

670
00:25:15,600 --> 00:25:19,919
map to to one of these buckets right you

671
00:25:19,919 --> 00:25:21,900
may not have your workload split up into

672
00:25:21,900 --> 00:25:25,380
namespaces in a way that really lets you

673
00:25:25,380 --> 00:25:28,080
leverage this um you may need to get to

674
00:25:28,080 --> 00:25:29,640
get more granular you may have custom

675
00:25:29,640 --> 00:25:33,140
hosts that have to run that SC Linux uh

676
00:25:33,140 --> 00:25:36,840
configuration so

677
00:25:36,840 --> 00:25:39,480
what do you do then uh what what is out

678
00:25:39,480 --> 00:25:40,860
there for you

679
00:25:40,860 --> 00:25:42,960
if you can't use pod security admission

680
00:25:42,960 --> 00:25:46,580
and pod security policies are going away

681
00:25:47,279 --> 00:25:49,799
well I said I said at the top that pod

682
00:25:49,799 --> 00:25:51,179
security policies were an admission

683
00:25:51,179 --> 00:25:54,779
control plug-in for for kubernetes pod

684
00:25:54,779 --> 00:25:56,100
security admission is an admission

685
00:25:56,100 --> 00:25:57,779
control plug-in for kubernetes so that

686
00:25:57,779 --> 00:26:00,059
really begs the question here what's an

687
00:26:00,059 --> 00:26:02,400
admission controller in kubernetes

688
00:26:02,400 --> 00:26:04,260
and I've stolen this uh this diagram

689
00:26:04,260 --> 00:26:06,960
from the from the kubernetes docs

690
00:26:06,960 --> 00:26:08,000
um

691
00:26:08,000 --> 00:26:11,159
so imagine you run your Cube CTL apply

692
00:26:11,159 --> 00:26:13,020
command you're submitting a new pod a

693
00:26:13,020 --> 00:26:15,659
new workload to run in the cluster it

694
00:26:15,659 --> 00:26:17,100
enters the left side of this diagram

695
00:26:17,100 --> 00:26:18,539
here

696
00:26:18,539 --> 00:26:21,720
as an API request to the API server

697
00:26:21,720 --> 00:26:23,279
I mean there's a series of different

698
00:26:23,279 --> 00:26:26,039
validators of different uh

699
00:26:26,039 --> 00:26:28,559
of logic that's applied to say okay is

700
00:26:28,559 --> 00:26:30,179
this is this workload that has been

701
00:26:30,179 --> 00:26:32,640
submitted is this good is the per is the

702
00:26:32,640 --> 00:26:34,200
person who submitted it allowed to

703
00:26:34,200 --> 00:26:36,720
submit that and and is it well formed

704
00:26:36,720 --> 00:26:37,860
and there's a there's a ton of these

705
00:26:37,860 --> 00:26:39,480
they're not they're not all security

706
00:26:39,480 --> 00:26:40,919
related

707
00:26:40,919 --> 00:26:43,020
um but these admission plugins for

708
00:26:43,020 --> 00:26:44,340
example

709
00:26:44,340 --> 00:26:46,679
um there is one that will check and say

710
00:26:46,679 --> 00:26:49,200
if you if you want to run a pod

711
00:26:49,200 --> 00:26:51,240
uh are you trying to schedule that in a

712
00:26:51,240 --> 00:26:52,860
namespace that is currently in the

713
00:26:52,860 --> 00:26:55,620
process of being deleted because if you

714
00:26:55,620 --> 00:26:57,179
were to do that then then we would get

715
00:26:57,179 --> 00:26:59,700
into an infinite chain of of deleting

716
00:26:59,700 --> 00:27:00,840
things

717
00:27:00,840 --> 00:27:01,799
um

718
00:27:01,799 --> 00:27:03,600
and the circuit breaker for that is an

719
00:27:03,600 --> 00:27:06,000
admission control plugin so there are

720
00:27:06,000 --> 00:27:07,500
lots of these

721
00:27:07,500 --> 00:27:10,500
um uh more than a dozen

722
00:27:10,500 --> 00:27:12,419
um and they really fall into one of two

723
00:27:12,419 --> 00:27:15,059
types they fall into over here on the

724
00:27:15,059 --> 00:27:16,760
right we have the validating admission

725
00:27:16,760 --> 00:27:19,020
plugins that those just say thumbs up

726
00:27:19,020 --> 00:27:22,380
thumbs down is this workload allowed to

727
00:27:22,380 --> 00:27:23,520
run

728
00:27:23,520 --> 00:27:24,900
um hopefully if it's a thumbs down you

729
00:27:24,900 --> 00:27:26,520
get some sort of an error message that

730
00:27:26,520 --> 00:27:28,440
gives you a reason why

731
00:27:28,440 --> 00:27:29,520
um a little bit further to the left you

732
00:27:29,520 --> 00:27:31,320
see the mutating ones

733
00:27:31,320 --> 00:27:32,760
um if you were to run your pod security

734
00:27:32,760 --> 00:27:35,159
policies in a way that like defaults

735
00:27:35,159 --> 00:27:37,919
everything to privileged false that's

736
00:27:37,919 --> 00:27:40,200
your mutating admission web hook

737
00:27:40,200 --> 00:27:42,360
um I think Nathaniel when he talked

738
00:27:42,360 --> 00:27:44,400
about service meshes a pretty common

739
00:27:44,400 --> 00:27:46,320
application for for mutating Mission web

740
00:27:46,320 --> 00:27:49,200
hooks is to automatically insert that

741
00:27:49,200 --> 00:27:50,940
service mesh container into every

742
00:27:50,940 --> 00:27:53,520
workload uh or or a logging container

743
00:27:53,520 --> 00:27:55,500
sidecar into every workload

744
00:27:55,500 --> 00:27:57,600
so that that's

745
00:27:57,600 --> 00:27:59,279
um that's what you have as far as

746
00:27:59,279 --> 00:28:00,960
admission control and kubernetes and

747
00:28:00,960 --> 00:28:03,900
kubernetes is extensible it's flexible

748
00:28:03,900 --> 00:28:06,000
and there are three of these plugins

749
00:28:06,000 --> 00:28:09,480
that are enabled by default that uh that

750
00:28:09,480 --> 00:28:11,039
give you extensibility and give you the

751
00:28:11,039 --> 00:28:14,100
ability to write custom admission logic

752
00:28:14,100 --> 00:28:15,419
um the image policy web hook the

753
00:28:15,419 --> 00:28:16,679
validating Mission web Hook and the

754
00:28:16,679 --> 00:28:18,840
mutating mission web hook you would set

755
00:28:18,840 --> 00:28:20,400
these up they're just a series of

756
00:28:20,400 --> 00:28:22,740
kubernetes objects you would apply one

757
00:28:22,740 --> 00:28:25,440
of those is a is a pod is a web server

758
00:28:25,440 --> 00:28:26,880
that's running

759
00:28:26,880 --> 00:28:28,919
um when a user goes to submit a workload

760
00:28:28,919 --> 00:28:31,200
to kubernetes it reaches out to that web

761
00:28:31,200 --> 00:28:33,000
server and says does this pod spec look

762
00:28:33,000 --> 00:28:35,279
good thumbs up or thumbs down and gets

763
00:28:35,279 --> 00:28:36,480
the response but that's your custom

764
00:28:36,480 --> 00:28:37,860
logic

765
00:28:37,860 --> 00:28:41,460
that you can run and and pod security

766
00:28:41,460 --> 00:28:43,799
admission if you can't enable the

767
00:28:43,799 --> 00:28:45,000
feature gate

768
00:28:45,000 --> 00:28:47,340
they give you all the the steps and all

769
00:28:47,340 --> 00:28:49,140
the code to to run this separately as

770
00:28:49,140 --> 00:28:50,580
its own separate validating the mission

771
00:28:50,580 --> 00:28:52,140
web hook

772
00:28:52,140 --> 00:28:55,260
um it is it is a very valid way to run

773
00:28:55,260 --> 00:28:56,279
it

774
00:28:56,279 --> 00:28:58,020
um all it is under the hood is a

775
00:28:58,020 --> 00:28:59,520
validating Mission web hook it's just

776
00:28:59,520 --> 00:29:01,200
the one that's included by default with

777
00:29:01,200 --> 00:29:03,659
kubernetes as well

778
00:29:03,659 --> 00:29:06,179
and you don't have to to write this

779
00:29:06,179 --> 00:29:07,679
these custom web servers these custom

780
00:29:07,679 --> 00:29:09,720
applications right there there this is a

781
00:29:09,720 --> 00:29:12,000
paved road if you if you want to do this

782
00:29:12,000 --> 00:29:14,640
there are lots of big mature projects

783
00:29:14,640 --> 00:29:18,059
open source projects to configure custom

784
00:29:18,059 --> 00:29:21,000
admission logic in kubernetes so all the

785
00:29:21,000 --> 00:29:22,200
things you could do with pod security

786
00:29:22,200 --> 00:29:24,720
policies you can do with these projects

787
00:29:24,720 --> 00:29:26,700
and you can frankly do them a little bit

788
00:29:26,700 --> 00:29:28,320
easier and you can be a little more

789
00:29:28,320 --> 00:29:30,720
flexible do them a little bit better I

790
00:29:30,720 --> 00:29:31,919
just threw up before here that I'm

791
00:29:31,919 --> 00:29:34,980
familiar with there are more out there

792
00:29:34,980 --> 00:29:35,880
um

793
00:29:35,880 --> 00:29:37,980
but for instance you can you can do more

794
00:29:37,980 --> 00:29:40,020
with these than you could do just with

795
00:29:40,020 --> 00:29:41,700
pod security policies by themselves you

796
00:29:41,700 --> 00:29:42,840
can you can get all the Pod security

797
00:29:42,840 --> 00:29:45,679
standards and all of the PSP

798
00:29:45,679 --> 00:29:47,520
configuration all of that security

799
00:29:47,520 --> 00:29:49,740
context granularity but you could also

800
00:29:49,740 --> 00:29:51,720
do things like require labels on all of

801
00:29:51,720 --> 00:29:53,760
all of your workloads so so any pod

802
00:29:53,760 --> 00:29:55,500
would have like an owner label would map

803
00:29:55,500 --> 00:29:56,940
to what what team is the point of

804
00:29:56,940 --> 00:29:59,700
contact for that for that workload um if

805
00:29:59,700 --> 00:30:01,399
you're using

806
00:30:01,399 --> 00:30:04,440
Valero or or Caston or some other sort

807
00:30:04,440 --> 00:30:07,980
of uh kubernetes backup uh vendor backup

808
00:30:07,980 --> 00:30:09,179
software

809
00:30:09,179 --> 00:30:12,179
you can you can help configure your

810
00:30:12,179 --> 00:30:14,580
backup policy uh using admission control

811
00:30:14,580 --> 00:30:17,039
I talked about adding sidecars for

812
00:30:17,039 --> 00:30:20,520
logging or for or for service meshes

813
00:30:20,520 --> 00:30:22,980
um you can do things like all images

814
00:30:22,980 --> 00:30:24,960
that run in this cluster have to come

815
00:30:24,960 --> 00:30:27,299
from my private Docker my private

816
00:30:27,299 --> 00:30:30,659
registry nothing from Docker Hub

817
00:30:30,659 --> 00:30:32,580
um can run and there's all sorts of

818
00:30:32,580 --> 00:30:34,860
security controls extra security codes

819
00:30:34,860 --> 00:30:36,419
above and beyond even with pod security

820
00:30:36,419 --> 00:30:38,520
policies provided that you can do like

821
00:30:38,520 --> 00:30:40,799
like um mounting the container socket

822
00:30:40,799 --> 00:30:44,460
inside a container or or doing like um

823
00:30:44,460 --> 00:30:46,140
uh engine accent this was this last

824
00:30:46,140 --> 00:30:49,620
bullet point here nginx Ingress is a

825
00:30:49,620 --> 00:30:51,720
is an Ingress that runs

826
00:30:51,720 --> 00:30:56,340
um if you you can apply custom nginx

827
00:30:56,340 --> 00:30:58,799
logic to your to the load balancer there

828
00:30:58,799 --> 00:31:01,380
if you pass in an annotation to an

829
00:31:01,380 --> 00:31:03,659
Ingress object and that opens the door

830
00:31:03,659 --> 00:31:05,820
for things like HTTP Smugglers so you

831
00:31:05,820 --> 00:31:08,399
can even like uh you know enforce some

832
00:31:08,399 --> 00:31:09,659
controls there that you couldn't before

833
00:31:09,659 --> 00:31:12,659
with PSPs so so it's a little bit more

834
00:31:12,659 --> 00:31:14,340
flexible there's a lot of cool stuff you

835
00:31:14,340 --> 00:31:16,080
can do

836
00:31:16,080 --> 00:31:20,940
um and and yeah if PSA isn't for you

837
00:31:20,940 --> 00:31:21,840
um

838
00:31:21,840 --> 00:31:24,059
then then maybe you want to to look at

839
00:31:24,059 --> 00:31:25,440
some of these some of these projects

840
00:31:25,440 --> 00:31:26,340
here

841
00:31:26,340 --> 00:31:27,419
um

842
00:31:27,419 --> 00:31:29,039
so

843
00:31:29,039 --> 00:31:32,299
yeah takeaways

844
00:31:32,940 --> 00:31:34,679
oh man

845
00:31:34,679 --> 00:31:38,100
um so pod security policies going away

846
00:31:38,100 --> 00:31:41,100
in the next release probably August

847
00:31:41,100 --> 00:31:43,500
um but one two four won't go away

848
00:31:43,500 --> 00:31:45,960
forever it'll it'll you'll have at least

849
00:31:45,960 --> 00:31:47,820
a year there

850
00:31:47,820 --> 00:31:49,860
um PSPs were pretty challenging these

851
00:31:49,860 --> 00:31:51,480
out of the box

852
00:31:51,480 --> 00:31:54,539
and really to to craft them you had to

853
00:31:54,539 --> 00:31:56,100
know what you were protecting against

854
00:31:56,100 --> 00:31:57,840
you had to know how to perform container

855
00:31:57,840 --> 00:32:00,000
breakouts which is a pretty high bar for

856
00:32:00,000 --> 00:32:02,940
for operators for security teams

857
00:32:02,940 --> 00:32:04,380
um you know you shouldn't need that

858
00:32:04,380 --> 00:32:06,240
specialized knowledge to use the most

859
00:32:06,240 --> 00:32:09,000
popular container orchestrator in in the

860
00:32:09,000 --> 00:32:10,440
world

861
00:32:10,440 --> 00:32:12,659
um so hopefully PSAs do that a little

862
00:32:12,659 --> 00:32:14,580
bit better if you weren't using PSAs

863
00:32:14,580 --> 00:32:16,919
because they were complex maybe you can

864
00:32:16,919 --> 00:32:18,480
use or if you're using PSPs because they

865
00:32:18,480 --> 00:32:19,799
were complex maybe you could use PSAs

866
00:32:19,799 --> 00:32:21,720
maybe maybe that's a better a better

867
00:32:21,720 --> 00:32:23,820
method for you easier to get your hands

868
00:32:23,820 --> 00:32:25,440
around

869
00:32:25,440 --> 00:32:29,279
um if not other other Solutions exist

870
00:32:29,279 --> 00:32:30,840
um that may even be more powerful for

871
00:32:30,840 --> 00:32:31,980
you

872
00:32:31,980 --> 00:32:33,779
so

873
00:32:33,779 --> 00:32:35,820
um one other thing I want to call out is

874
00:32:35,820 --> 00:32:38,039
that pod security policy deprecation is

875
00:32:38,039 --> 00:32:40,020
not the only enormous change going

876
00:32:40,020 --> 00:32:41,880
through kubernetes right now and it is a

877
00:32:41,880 --> 00:32:43,020
big change it's one of the biggest

878
00:32:43,020 --> 00:32:44,340
changes that's ever happened in the

879
00:32:44,340 --> 00:32:47,700
history of the of the project

880
00:32:47,700 --> 00:32:50,520
um but at the same time we have we have

881
00:32:50,520 --> 00:32:53,700
now ga'd uh dual stack networking as of

882
00:32:53,700 --> 00:32:56,820
1.23 and that's been A Five-Year Plan I

883
00:32:56,820 --> 00:32:59,640
think that started in 2017 to come off

884
00:32:59,640 --> 00:33:02,580
ipv4 and then go to dual stack and then

885
00:33:02,580 --> 00:33:04,140
go back off dual second basically write

886
00:33:04,140 --> 00:33:05,760
the whole networking stack

887
00:33:05,760 --> 00:33:07,380
um Dr Shim was just deprecated as well

888
00:33:07,380 --> 00:33:09,360
in this most recent release

889
00:33:09,360 --> 00:33:10,679
um that's a huge change that was that

890
00:33:10,679 --> 00:33:12,299
was talking in the community hey

891
00:33:12,299 --> 00:33:14,220
shouldn't this be a major version bump

892
00:33:14,220 --> 00:33:15,419
for all the things that we're going to

893
00:33:15,419 --> 00:33:16,799
be breaking and changing here shouldn't

894
00:33:16,799 --> 00:33:20,279
this be kubernetes 2.0 so a lot of a lot

895
00:33:20,279 --> 00:33:21,720
of big changes coming through the

896
00:33:21,720 --> 00:33:23,640
kubernetes community right now coming

897
00:33:23,640 --> 00:33:25,799
through the kubernetes project so if you

898
00:33:25,799 --> 00:33:29,640
are an operator of a kubernetes cluster

899
00:33:29,640 --> 00:33:31,100
or you know an operative Community

900
00:33:31,100 --> 00:33:33,240
kubernetes cluster have some empathy for

901
00:33:33,240 --> 00:33:34,799
them because they they might have a lot

902
00:33:34,799 --> 00:33:37,158
going on

903
00:33:37,200 --> 00:33:40,260
um got some references here the tables

904
00:33:40,260 --> 00:33:42,840
PSP talk Ian Coldwater and Duffy

905
00:33:42,840 --> 00:33:44,760
Cooley's abusing kubernetes default talk

906
00:33:44,760 --> 00:33:47,519
and then some other blog posts there and

907
00:33:47,519 --> 00:33:50,700
that's what I got for you any uh any

908
00:33:50,700 --> 00:33:52,940
questions

909
00:33:53,460 --> 00:33:55,940
yep

910
00:33:56,039 --> 00:33:58,340
um awesome with the uh pod security

911
00:33:58,340 --> 00:34:00,240
that's awesome

912
00:34:00,240 --> 00:34:00,960
um

913
00:34:00,960 --> 00:34:03,960
two two questions really it could go to

914
00:34:03,960 --> 00:34:05,340
three we'll see

915
00:34:05,340 --> 00:34:07,679
um so with uh the first question uh if

916
00:34:07,679 --> 00:34:09,540
you have sounds like we're just kind of

917
00:34:09,540 --> 00:34:11,879
uh formalizing in the stacks you know

918
00:34:11,879 --> 00:34:13,739
you have your your enforce and your

919
00:34:13,739 --> 00:34:15,239
audit and you're born

920
00:34:15,239 --> 00:34:18,000
um is there any way to uh enforce and

921
00:34:18,000 --> 00:34:19,320
warn at the same time you can use

922
00:34:19,320 --> 00:34:21,480
multiple modes uh or is it one or the

923
00:34:21,480 --> 00:34:23,599
other

924
00:34:24,659 --> 00:34:26,940
um I haven't tested I've only had like

925
00:34:26,940 --> 00:34:28,440
one cluster with the feature gate on I

926
00:34:28,440 --> 00:34:30,179
believe the the the the idea with that

927
00:34:30,179 --> 00:34:33,239
schema is that you can't have

928
00:34:33,239 --> 00:34:37,500
uh you could you can warn on a

929
00:34:37,500 --> 00:34:39,899
restricted and and then you know enforce

930
00:34:39,899 --> 00:34:42,239
a baseline or something right um so I I

931
00:34:42,239 --> 00:34:44,399
do believe that but I have not tested it

932
00:34:44,399 --> 00:34:46,440
so that's a great great question

933
00:34:46,440 --> 00:34:47,339
um

934
00:34:47,339 --> 00:34:50,159
doesn't work automatically warn or write

935
00:34:50,159 --> 00:34:52,139
some things to the log I mean so has

936
00:34:52,139 --> 00:34:54,480
logged been elevated within access

937
00:34:54,480 --> 00:34:56,940
logging yeah well you'll get um you'll

938
00:34:56,940 --> 00:34:58,260
definitely get console responses you'll

939
00:34:58,260 --> 00:35:00,060
get a reason that it did not pass

940
00:35:00,060 --> 00:35:03,300
admission because of because of the the

941
00:35:03,300 --> 00:35:05,520
label

942
00:35:05,520 --> 00:35:06,119
um

943
00:35:06,119 --> 00:35:07,980
but then

944
00:35:07,980 --> 00:35:10,320
um yeah and you'll see that in in event

945
00:35:10,320 --> 00:35:12,119
logging as well if you're capturing the

946
00:35:12,119 --> 00:35:15,500
event the event logs

947
00:35:15,619 --> 00:35:18,900
which users submitted it yeah

948
00:35:18,900 --> 00:35:19,619
um

949
00:35:19,619 --> 00:35:21,119
I'd have to look at the autolog I

950
00:35:21,119 --> 00:35:22,440
believe the autolog format would have

951
00:35:22,440 --> 00:35:25,859
that not necessarily the event format

952
00:35:25,859 --> 00:35:27,780
um it would have had to be done by an

953
00:35:27,780 --> 00:35:30,480
authorized user

954
00:35:30,480 --> 00:35:32,820
um the the audit logging would have that

955
00:35:32,820 --> 00:35:35,460
level uh but once it's once it's in Ed

956
00:35:35,460 --> 00:35:38,040
CD it's it's once it's written at CD is

957
00:35:38,040 --> 00:35:39,660
something that should be applied which

958
00:35:39,660 --> 00:35:41,119
is on the other side of Mission Control

959
00:35:41,119 --> 00:35:43,320
then you would you wouldn't have that

960
00:35:43,320 --> 00:35:44,760
but if you're saying you're stopping an

961
00:35:44,760 --> 00:35:45,960
admission control you would see the

962
00:35:45,960 --> 00:35:47,760
apply and you would see the stop okay

963
00:35:47,760 --> 00:35:49,560
thanks

964
00:35:49,560 --> 00:35:53,280
so um so sv-1x and apple both have you

965
00:35:53,280 --> 00:35:55,020
know lots of tooling to parse the audit

966
00:35:55,020 --> 00:35:58,140
log and find custom policies and have

967
00:35:58,140 --> 00:36:00,119
our profile so you have you know minimum

968
00:36:00,119 --> 00:36:01,380
permissions you need your right side to

969
00:36:01,380 --> 00:36:03,180
make your application run design exists

970
00:36:03,180 --> 00:36:05,700
like that for PSA or is that tooling

971
00:36:05,700 --> 00:36:07,380
that's still being builts

972
00:36:07,380 --> 00:36:09,540
um so the the security contacts in

973
00:36:09,540 --> 00:36:11,280
kubernetes so what what PSP was

974
00:36:11,280 --> 00:36:14,099
enforcing does let you

975
00:36:14,099 --> 00:36:16,020
um

976
00:36:16,020 --> 00:36:19,680
just defer to and refer out to any app

977
00:36:19,680 --> 00:36:21,300
armor or SC Linux controls that you

978
00:36:21,300 --> 00:36:22,859
would have

979
00:36:22,859 --> 00:36:24,180
um

980
00:36:24,180 --> 00:36:26,160
uh

981
00:36:26,160 --> 00:36:28,079
uh oh so your question was on on the

982
00:36:28,079 --> 00:36:30,720
visibility of of seeing what would just

983
00:36:30,720 --> 00:36:34,279
like if there's any tooling right now

984
00:36:36,119 --> 00:36:40,500
um permissions or changing PSA logic I

985
00:36:40,500 --> 00:36:44,160
guess not probably counters yeah no

986
00:36:44,160 --> 00:36:46,500
um I'm not sure about the about tooling

987
00:36:46,500 --> 00:36:48,060
that exists there

988
00:36:48,060 --> 00:36:50,940
um you know it would it it depends on

989
00:36:50,940 --> 00:36:52,500
your on your audit logging setup there

990
00:36:52,500 --> 00:36:55,560
you would get you get responses back

991
00:36:55,560 --> 00:36:57,960
um the admission control side of it you

992
00:36:57,960 --> 00:36:59,579
would see

993
00:36:59,579 --> 00:37:01,320
um

994
00:37:01,320 --> 00:37:03,900
you know that you tried to submit a

995
00:37:03,900 --> 00:37:06,060
workload that that was privileged in a

996
00:37:06,060 --> 00:37:07,020
place where you couldn't submit a

997
00:37:07,020 --> 00:37:08,760
privilege but as far as like if you

998
00:37:08,760 --> 00:37:13,380
submit uh an application that needs a

999
00:37:13,380 --> 00:37:14,820
Linux capability doesn't have that

1000
00:37:14,820 --> 00:37:16,260
capability

1001
00:37:16,260 --> 00:37:17,760
um you know it might crash it might have

1002
00:37:17,760 --> 00:37:19,200
weird Behavior I think you would be

1003
00:37:19,200 --> 00:37:22,079
dependent on the application to log that

1004
00:37:22,079 --> 00:37:24,000
out or tell you in some way that hey I

1005
00:37:24,000 --> 00:37:26,760
don't have capnet raw here and I need it

1006
00:37:26,760 --> 00:37:29,599
yeah

1007
00:37:31,020 --> 00:37:34,020
um yeah

1008
00:37:35,099 --> 00:37:37,560
all right can we default back to PSP if

1009
00:37:37,560 --> 00:37:38,880
we wanted to or is it completely gone

1010
00:37:38,880 --> 00:37:43,680
PSP will be gone the so as far as as far

1011
00:37:43,680 --> 00:37:45,900
as we know 1.24 will be the last version

1012
00:37:45,900 --> 00:37:48,839
that has PSP in it

1013
00:37:48,839 --> 00:37:49,500
um

1014
00:37:49,500 --> 00:37:52,830
and and that was an oh

1015
00:37:52,830 --> 00:37:55,880
[Music]

1016
00:38:00,660 --> 00:38:01,500
um

1017
00:38:01,500 --> 00:38:04,500
yeah I mean so so and the the Sig

1018
00:38:04,500 --> 00:38:05,880
security has said you know the story for

1019
00:38:05,880 --> 00:38:09,599
PSP doesn't end until the last user

1020
00:38:09,599 --> 00:38:11,339
um stops using it

1021
00:38:11,339 --> 00:38:12,780
um the idea is that all the

1022
00:38:12,780 --> 00:38:14,640
functionality that PSP gave you you can

1023
00:38:14,640 --> 00:38:17,280
really get by these these uh these other

1024
00:38:17,280 --> 00:38:19,320
projects

1025
00:38:19,320 --> 00:38:21,780
um and to if if people need that

1026
00:38:21,780 --> 00:38:23,700
flexibility that functionality to defer

1027
00:38:23,700 --> 00:38:27,500
to those out of tree projects

1028
00:38:28,380 --> 00:38:32,420
why why diverge

1029
00:38:36,839 --> 00:38:39,780
um so so the story of kubernetes

1030
00:38:39,780 --> 00:38:41,520
yeah yeah

1031
00:38:41,520 --> 00:38:46,440
okay so yeah the um so the the and you

1032
00:38:46,440 --> 00:38:48,240
know I don't represent like the cute the

1033
00:38:48,240 --> 00:38:50,099
kubernetes project or the community or

1034
00:38:50,099 --> 00:38:51,240
anything I

1035
00:38:51,240 --> 00:38:54,119
um but the the story uh over the last

1036
00:38:54,119 --> 00:38:56,820
five or six years has been let's pull

1037
00:38:56,820 --> 00:38:58,380
out

1038
00:38:58,380 --> 00:39:01,520
um logic and feature that that isn't

1039
00:39:01,520 --> 00:39:06,300
core to uh orchestrating containers and

1040
00:39:06,300 --> 00:39:08,760
let let's pull out

1041
00:39:08,760 --> 00:39:11,700
um you know the the drivers for specif

1042
00:39:11,700 --> 00:39:13,500
for for creating volumes in specific

1043
00:39:13,500 --> 00:39:15,359
clouds for instance so we'll pull that

1044
00:39:15,359 --> 00:39:18,720
out of the main kubernetes project and

1045
00:39:18,720 --> 00:39:20,160
and that will be owned as a separate

1046
00:39:20,160 --> 00:39:21,839
project that the cloud providers can can

1047
00:39:21,839 --> 00:39:23,520
then take care and will be pluggable and

1048
00:39:23,520 --> 00:39:25,440
extensible

1049
00:39:25,440 --> 00:39:27,260
um

1050
00:39:27,260 --> 00:39:30,180
so so this is more of a continuation of

1051
00:39:30,180 --> 00:39:33,000
that for for the built-in security for

1052
00:39:33,000 --> 00:39:35,400
the built-in thing we want something

1053
00:39:35,400 --> 00:39:38,220
easy to use out of the box

1054
00:39:38,220 --> 00:39:40,200
um but but if you need that flexibility

1055
00:39:40,200 --> 00:39:41,880
if you need that granular that extra

1056
00:39:41,880 --> 00:39:46,020
tooling look to your other cncf projects

1057
00:39:46,020 --> 00:39:47,760
um that will be plugged that will plug

1058
00:39:47,760 --> 00:39:49,800
into the the workflows that are

1059
00:39:49,800 --> 00:39:52,760
available in kubernetes

1060
00:39:56,700 --> 00:40:00,119
any last questions folks

1061
00:40:00,119 --> 00:40:04,140
yep so if you if you are using this 1.24

1062
00:40:04,140 --> 00:40:06,780
version and you have these uh security

1063
00:40:06,780 --> 00:40:09,180
features set up and you're using them

1064
00:40:09,180 --> 00:40:12,119
currently and you upgrade to 1.25 what

1065
00:40:12,119 --> 00:40:14,220
happens

1066
00:40:14,220 --> 00:40:16,260
um what would happen if you wanted to oh

1067
00:40:16,260 --> 00:40:19,140
if you had PSP objects

1068
00:40:19,140 --> 00:40:21,300
um on a like existing in your cluster in

1069
00:40:21,300 --> 00:40:22,680
at CD

1070
00:40:22,680 --> 00:40:24,480
the API would be gone you would get

1071
00:40:24,480 --> 00:40:26,160
deprecation you're getting deprecation

1072
00:40:26,160 --> 00:40:28,320
warnings now but you would there would

1073
00:40:28,320 --> 00:40:30,000
just be nothing there there'd be no

1074
00:40:30,000 --> 00:40:33,420
plug-in available to to apply those

1075
00:40:33,420 --> 00:40:34,800
um so they would they would exist but it

1076
00:40:34,800 --> 00:40:36,920
wouldn't

1077
00:40:39,119 --> 00:40:42,119
um yeah yeah you would have to label the

1078
00:40:42,119 --> 00:40:44,400
namespace so you're not you're if you're

1079
00:40:44,400 --> 00:40:46,140
not putting the labels on namespace

1080
00:40:46,140 --> 00:40:49,079
you're not you're not actually using the

1081
00:40:49,079 --> 00:40:50,820
the the

1082
00:40:50,820 --> 00:40:54,500
um the Pod security admission controller

1083
00:40:59,400 --> 00:41:00,540
cool

1084
00:41:00,540 --> 00:41:01,840
thanks for the time y'all

1085
00:41:01,840 --> 00:41:07,919
[Applause]

1086
00:41:09,140 --> 00:41:12,900
all right don't run off too far uh we'll

1087
00:41:12,900 --> 00:41:14,339
have one more talk

1088
00:41:14,339 --> 00:41:18,920
um in 15-ish minutes so

