1
00:00:00,000 --> 00:00:00,880
[Applause]

2
00:00:00,880 --> 00:00:04,640
thank you everyone so good morgan so my

3
00:00:04,640 --> 00:00:06,960
name is srivadanjani and i'm gonna be

4
00:00:06,960 --> 00:00:09,599
talking about my experience

5
00:00:09,599 --> 00:00:12,880
uh on keeping electric vehicles secure

6
00:00:12,880 --> 00:00:15,920
by proposing the need for a canned

7
00:00:15,920 --> 00:00:17,840
security framework

8
00:00:17,840 --> 00:00:22,720
so a little bit about me so i s um

9
00:00:22,720 --> 00:00:24,880
the nc is already mentioned i am a

10
00:00:24,880 --> 00:00:28,160
security engineer with disass singapore

11
00:00:28,160 --> 00:00:29,279
and

12
00:00:29,279 --> 00:00:32,479
we have a global presence and there is

13
00:00:32,479 --> 00:00:35,920
also a division right there in germany

14
00:00:35,920 --> 00:00:39,120
uh we specialize in smart cabins and

15
00:00:39,120 --> 00:00:41,280
smart driving including self-driving

16
00:00:41,280 --> 00:00:44,800
capabilities and we have over 35 years

17
00:00:44,800 --> 00:00:46,960
in the automotive industry

18
00:00:46,960 --> 00:00:50,320
so before working in the csv i had a

19
00:00:50,320 --> 00:00:52,160
short stint at national university of

20
00:00:52,160 --> 00:00:55,440
singapore where i got the chance to

21
00:00:55,440 --> 00:00:58,079
hack into one of these famous yellow

22
00:00:58,079 --> 00:00:59,600
bluetooth bikes that you see in the

23
00:00:59,600 --> 00:01:00,960
picture right there

24
00:01:00,960 --> 00:01:04,479
and i was able to hack into them and

25
00:01:04,479 --> 00:01:06,479
was able to ride it without having to

26
00:01:06,479 --> 00:01:09,040
pay for it as a part of their bug bounty

27
00:01:09,040 --> 00:01:12,640
program that got me super excited about

28
00:01:12,640 --> 00:01:15,280
vehicle security and then i transitioned

29
00:01:15,280 --> 00:01:16,159
from

30
00:01:16,159 --> 00:01:20,479
bikes to cars which is my current focus

31
00:01:20,479 --> 00:01:22,960
i also have a masters in information

32
00:01:22,960 --> 00:01:26,000
security from carnegie mellon university

33
00:01:26,000 --> 00:01:29,600
and for fun i play a musical instrument

34
00:01:29,600 --> 00:01:32,320
sometimes and every weekend you can see

35
00:01:32,320 --> 00:01:33,360
me

36
00:01:33,360 --> 00:01:35,920
paddling along the kalong river in

37
00:01:35,920 --> 00:01:37,600
singapore

38
00:01:37,600 --> 00:01:40,400
so today i'm going to be starting with

39
00:01:40,400 --> 00:01:42,799
an introduction of what is can and the

40
00:01:42,799 --> 00:01:44,960
security challenges that come along with

41
00:01:44,960 --> 00:01:45,840
it

42
00:01:45,840 --> 00:01:48,799
then i'm going to be walking you through

43
00:01:48,799 --> 00:01:51,280
my journey of developing an intuition

44
00:01:51,280 --> 00:01:53,759
detection system over the years through

45
00:01:53,759 --> 00:01:55,439
different phases

46
00:01:55,439 --> 00:01:57,520
and what are the lessons i've learned

47
00:01:57,520 --> 00:02:00,159
along the way and finally i will be

48
00:02:00,159 --> 00:02:03,040
proposing a canned security framework

49
00:02:03,040 --> 00:02:05,280
that addresses some of the

50
00:02:05,280 --> 00:02:06,240
uh

51
00:02:06,240 --> 00:02:08,720
problems that i've encountered so far

52
00:02:08,720 --> 00:02:09,758
so

53
00:02:09,758 --> 00:02:13,120
let's start with can so what is scan can

54
00:02:13,120 --> 00:02:15,760
or controller area network

55
00:02:15,760 --> 00:02:18,879
is the main communication channel inside

56
00:02:18,879 --> 00:02:22,560
an electric vehicle or the crux of an

57
00:02:22,560 --> 00:02:24,080
automotive system

58
00:02:24,080 --> 00:02:25,840
so it connects

59
00:02:25,840 --> 00:02:28,160
all the import important components that

60
00:02:28,160 --> 00:02:30,959
you can think of like cruise control

61
00:02:30,959 --> 00:02:34,480
brake system air conditioning gateway

62
00:02:34,480 --> 00:02:37,760
you name it so everything is connected

63
00:02:37,760 --> 00:02:40,480
through this can bus and these

64
00:02:40,480 --> 00:02:43,280
components are called as electronic

65
00:02:43,280 --> 00:02:45,840
control units and chan can is the

66
00:02:45,840 --> 00:02:48,319
channel that connects them and enables

67
00:02:48,319 --> 00:02:50,480
the communication between them

68
00:02:50,480 --> 00:02:53,280
so the main benefits of using this

69
00:02:53,280 --> 00:02:55,800
protocol is that it's

70
00:02:55,800 --> 00:02:58,879
inexpensive it's durable

71
00:02:58,879 --> 00:03:02,319
it's very lightweight and reliable

72
00:03:02,319 --> 00:03:04,400
and it's also

73
00:03:04,400 --> 00:03:06,959
broadcast based unlike peer-to-peer

74
00:03:06,959 --> 00:03:09,120
based which means that it does

75
00:03:09,120 --> 00:03:11,519
much less overhead

76
00:03:11,519 --> 00:03:14,159
and uh that's primarily one of the

77
00:03:14,159 --> 00:03:16,720
reasons that electric vehicles

78
00:03:16,720 --> 00:03:19,040
use can as one of their major

79
00:03:19,040 --> 00:03:21,040
communication channels

80
00:03:21,040 --> 00:03:24,000
so a little bit of a deep dive into a

81
00:03:24,000 --> 00:03:26,480
can header or a cam frame

82
00:03:26,480 --> 00:03:29,760
so you can see a number of fields there

83
00:03:29,760 --> 00:03:31,599
but there are three key fields that i

84
00:03:31,599 --> 00:03:34,159
would like to highlight one is the

85
00:03:34,159 --> 00:03:36,080
arbitration id

86
00:03:36,080 --> 00:03:40,319
the other one is dlc which is the data

87
00:03:40,319 --> 00:03:41,680
length code

88
00:03:41,680 --> 00:03:44,720
the data length code is basically gives

89
00:03:44,720 --> 00:03:47,599
you the number of bytes of payload of

90
00:03:47,599 --> 00:03:50,159
data that follows along with it so here

91
00:03:50,159 --> 00:03:51,120
we have

92
00:03:51,120 --> 00:03:54,080
two eight bytes data so that would be

93
00:03:54,080 --> 00:03:56,720
the dlc which indicates how much of

94
00:03:56,720 --> 00:03:58,560
payload is

95
00:03:58,560 --> 00:04:00,480
sent along in that game frame

96
00:04:00,480 --> 00:04:03,120
and the time at which the frame was

97
00:04:03,120 --> 00:04:05,840
itself sent and the data itself

98
00:04:05,840 --> 00:04:08,959
so the key feed here is arbitration so

99
00:04:08,959 --> 00:04:10,640
let's start with that

100
00:04:10,640 --> 00:04:11,519
so

101
00:04:11,519 --> 00:04:14,480
in an electric car we have many

102
00:04:14,480 --> 00:04:18,238
electronic uh control units that want to

103
00:04:18,238 --> 00:04:19,680
talk to each other

104
00:04:19,680 --> 00:04:21,600
and they have the scan bus which is

105
00:04:21,600 --> 00:04:26,080
their communication channel so each um

106
00:04:26,080 --> 00:04:29,360
each electronic control unit has a

107
00:04:29,360 --> 00:04:32,320
specific set of message ids

108
00:04:32,320 --> 00:04:35,120
that is always on the lookout for

109
00:04:35,120 --> 00:04:37,600
and once it encounters

110
00:04:37,600 --> 00:04:40,560
that message iv on can bus

111
00:04:40,560 --> 00:04:41,520
it

112
00:04:41,520 --> 00:04:43,840
uh reacts to it and starts a

113
00:04:43,840 --> 00:04:45,759
communication with it

114
00:04:45,759 --> 00:04:48,400
so since it's broadcast based and many

115
00:04:48,400 --> 00:04:50,400
of the electronic control units we try

116
00:04:50,400 --> 00:04:52,560
to do this simultaneously

117
00:04:52,560 --> 00:04:54,400
the can bus has a process called

118
00:04:54,400 --> 00:04:56,880
arbitration which gives priority to

119
00:04:56,880 --> 00:04:59,520
which message can be executed first

120
00:04:59,520 --> 00:05:02,320
so if you have a lower message id

121
00:05:02,320 --> 00:05:04,800
then you have higher priorities so by

122
00:05:04,800 --> 00:05:05,840
logic

123
00:05:05,840 --> 00:05:08,080
if you have zero zero zero which is the

124
00:05:08,080 --> 00:05:09,840
lowest you can go

125
00:05:09,840 --> 00:05:12,400
then your message would be given the

126
00:05:12,400 --> 00:05:14,080
highest priority

127
00:05:14,080 --> 00:05:16,880
and will be executed first on the canvas

128
00:05:16,880 --> 00:05:20,080
and every other message has to

129
00:05:20,080 --> 00:05:20,960
wait

130
00:05:20,960 --> 00:05:22,720
a bit more

131
00:05:22,720 --> 00:05:25,759
so this number is represented by the

132
00:05:25,759 --> 00:05:30,160
11-bit arbitration ibs reference here

133
00:05:30,160 --> 00:05:33,520
so a little bit more into the different

134
00:05:33,520 --> 00:05:35,520
type of can messages

135
00:05:35,520 --> 00:05:39,759
so we have two broad classifications one

136
00:05:39,759 --> 00:05:42,639
is called the periodic messages so the

137
00:05:42,639 --> 00:05:45,919
periodic messages are message sense

138
00:05:45,919 --> 00:05:47,280
periodically

139
00:05:47,280 --> 00:05:49,600
to get the statuses of different

140
00:05:49,600 --> 00:05:51,919
electronic control units at different

141
00:05:51,919 --> 00:05:53,280
times

142
00:05:53,280 --> 00:05:54,000
so

143
00:05:54,000 --> 00:05:57,039
uh i am an ecua and i want to talk to

144
00:05:57,039 --> 00:05:58,880
ecub and i want to know the current

145
00:05:58,880 --> 00:06:01,280
status at this particular point of time

146
00:06:01,280 --> 00:06:04,560
so i just sent messages periodically to

147
00:06:04,560 --> 00:06:06,319
know hey what's your current status so

148
00:06:06,319 --> 00:06:08,880
that kind of messages is periodic

149
00:06:08,880 --> 00:06:09,840
so

150
00:06:09,840 --> 00:06:12,400
and uh the second type of one which is

151
00:06:12,400 --> 00:06:15,360
called as event trigger is messages

152
00:06:15,360 --> 00:06:18,840
that only occur when a particular event

153
00:06:18,840 --> 00:06:20,800
happens so

154
00:06:20,800 --> 00:06:23,919
you someone locks the door someone

155
00:06:23,919 --> 00:06:26,800
unlocks the door you apply brakes on the

156
00:06:26,800 --> 00:06:28,560
car

157
00:06:28,560 --> 00:06:30,960
these kind of events

158
00:06:30,960 --> 00:06:32,720
that are happening

159
00:06:32,720 --> 00:06:35,600
will trigger a bunch of messages that

160
00:06:35,600 --> 00:06:38,080
are only pertaining to that

161
00:06:38,080 --> 00:06:40,240
and those kind of messages are called as

162
00:06:40,240 --> 00:06:41,919
eventual messages

163
00:06:41,919 --> 00:06:42,639
so

164
00:06:42,639 --> 00:06:45,600
if you see the screenshot here this is

165
00:06:45,600 --> 00:06:47,199
from a

166
00:06:47,199 --> 00:06:49,360
can database file

167
00:06:49,360 --> 00:06:53,039
you can see two words that's that comes

168
00:06:53,039 --> 00:06:55,680
up very often one is cyclic x and the

169
00:06:55,680 --> 00:06:58,319
other one is spontanex

170
00:06:58,319 --> 00:07:00,800
so anything that's called a cyclic

171
00:07:00,800 --> 00:07:03,680
refers to the periodic messages

172
00:07:03,680 --> 00:07:06,000
and anything that's called spontaneous

173
00:07:06,000 --> 00:07:08,479
which is much much fewer than the cyclic

174
00:07:08,479 --> 00:07:10,080
x messages

175
00:07:10,080 --> 00:07:12,880
refers to the event triggered messages

176
00:07:12,880 --> 00:07:13,919
and

177
00:07:13,919 --> 00:07:15,680
you might be wondering looking at the

178
00:07:15,680 --> 00:07:18,960
screenshot what is this x and why is

179
00:07:18,960 --> 00:07:22,000
there a can extended written at the end

180
00:07:22,000 --> 00:07:24,639
of it what's the significance of it

181
00:07:24,639 --> 00:07:25,440
so

182
00:07:25,440 --> 00:07:29,280
um the x refers to an extension or an

183
00:07:29,280 --> 00:07:31,199
extender

184
00:07:31,199 --> 00:07:34,160
and it's called as scan flexible data

185
00:07:34,160 --> 00:07:35,199
rate

186
00:07:35,199 --> 00:07:39,840
which allows you to send up to 65

187
00:07:39,840 --> 00:07:42,720
64 bytes of data

188
00:07:42,720 --> 00:07:45,520
and has a longer identifier it basically

189
00:07:45,520 --> 00:07:48,000
allows you to send more data in a single

190
00:07:48,000 --> 00:07:49,199
cam frame

191
00:07:49,199 --> 00:07:52,960
as opposed to the original classic can

192
00:07:52,960 --> 00:07:53,840
so

193
00:07:53,840 --> 00:07:56,879
what does this mean from a security

194
00:07:56,879 --> 00:08:00,879
perspective so historically when can was

195
00:08:00,879 --> 00:08:04,879
introduced by robert wash in 1983 it was

196
00:08:04,879 --> 00:08:07,919
only meant to be like a very lightweight

197
00:08:07,919 --> 00:08:10,479
reliable mode of communication

198
00:08:10,479 --> 00:08:13,160
and there is no authentication or

199
00:08:13,160 --> 00:08:15,680
authorization that is built into the

200
00:08:15,680 --> 00:08:17,440
protocol itself

201
00:08:17,440 --> 00:08:20,800
so in order to ensure security you have

202
00:08:20,800 --> 00:08:23,199
to take additional mechanisms

203
00:08:23,199 --> 00:08:26,639
so one such mechanism is building a

204
00:08:26,639 --> 00:08:29,039
model a component that would do the

205
00:08:29,039 --> 00:08:32,000
authentication or authorization for you

206
00:08:32,000 --> 00:08:32,799
so

207
00:08:32,799 --> 00:08:34,320
um

208
00:08:34,320 --> 00:08:36,159
coming to that

209
00:08:36,159 --> 00:08:39,279
you have one such examples of of the

210
00:08:39,279 --> 00:08:43,200
model is an auto source sequocy or

211
00:08:43,200 --> 00:08:45,680
secure onward communications

212
00:08:45,680 --> 00:08:49,040
so basically what this module does is as

213
00:08:49,040 --> 00:08:50,880
referenced by the figure

214
00:08:50,880 --> 00:08:53,360
it generates a lot of message

215
00:08:53,360 --> 00:08:55,760
authentication code and freshness value

216
00:08:55,760 --> 00:08:58,000
which is used to authenticate the

217
00:08:58,000 --> 00:09:00,560
electronic control units communicating

218
00:09:00,560 --> 00:09:02,080
on the canvas

219
00:09:02,080 --> 00:09:06,000
and send this keys plus data

220
00:09:06,000 --> 00:09:08,640
in the can frame along which which

221
00:09:08,640 --> 00:09:11,440
allows you to send more data so if

222
00:09:11,440 --> 00:09:14,080
you're using a classic can

223
00:09:14,080 --> 00:09:16,880
sending this type of information would

224
00:09:16,880 --> 00:09:18,080
mean that

225
00:09:18,080 --> 00:09:21,279
um it will not leave you space for

226
00:09:21,279 --> 00:09:24,800
anything else and it's not your best bet

227
00:09:24,800 --> 00:09:27,760
but can fd can allow you to send

228
00:09:27,760 --> 00:09:30,240
your security related data as well as

229
00:09:30,240 --> 00:09:33,360
the data it's originally intended for

230
00:09:33,360 --> 00:09:35,680
so but there are two challenges that

231
00:09:35,680 --> 00:09:38,000
come along with this one main important

232
00:09:38,000 --> 00:09:39,839
one is that

233
00:09:39,839 --> 00:09:41,360
you have to

234
00:09:41,360 --> 00:09:44,160
secure the keys itself

235
00:09:44,160 --> 00:09:46,640
they've got them and the next important

236
00:09:46,640 --> 00:09:47,760
challenge

237
00:09:47,760 --> 00:09:51,440
is that secrocy has 2.5 times more

238
00:09:51,440 --> 00:09:54,000
bandwidth than can itself

239
00:09:54,000 --> 00:09:55,040
so

240
00:09:55,040 --> 00:09:57,600
in certain situation which means that

241
00:09:57,600 --> 00:10:00,640
you cannot use this always because you

242
00:10:00,640 --> 00:10:02,560
would have to sacrifice your bandwidth

243
00:10:02,560 --> 00:10:05,440
for security and we don't want that do

244
00:10:05,440 --> 00:10:08,640
we so what other option do we have to

245
00:10:08,640 --> 00:10:11,440
ensure that there is security and the

246
00:10:11,440 --> 00:10:14,240
the can bus itself the communications is

247
00:10:14,240 --> 00:10:15,279
secure

248
00:10:15,279 --> 00:10:18,079
so here comes intuition detection

249
00:10:18,079 --> 00:10:22,399
systems so many ideas solutions sit on

250
00:10:22,399 --> 00:10:24,399
different electronic control unit

251
00:10:24,399 --> 00:10:26,959
components and monitor the messages

252
00:10:26,959 --> 00:10:30,240
along the canvas so an example could be

253
00:10:30,240 --> 00:10:33,680
gateway which can look at messages

254
00:10:33,680 --> 00:10:35,680
coming in from different

255
00:10:35,680 --> 00:10:38,000
electronic control units

256
00:10:38,000 --> 00:10:41,120
um so there are broadly two very

257
00:10:41,120 --> 00:10:45,079
different type of

258
00:10:46,560 --> 00:10:49,839
with pertaining to can one is flow base

259
00:10:49,839 --> 00:10:52,640
which only needs the bare essentials the

260
00:10:52,640 --> 00:10:55,680
bare essentials meaning the message id

261
00:10:55,680 --> 00:10:58,000
and the time at which the

262
00:10:58,000 --> 00:10:58,880
uh

263
00:10:58,880 --> 00:11:00,959
frame is sent you don't need the data

264
00:11:00,959 --> 00:11:02,800
you don't need anything else

265
00:11:02,800 --> 00:11:05,200
so this kind of information this kind of

266
00:11:05,200 --> 00:11:08,240
flow based pds is useful

267
00:11:08,240 --> 00:11:09,040
um

268
00:11:09,040 --> 00:11:11,440
because it's very generic and you can

269
00:11:11,440 --> 00:11:14,560
use it almost in many almost in all the

270
00:11:14,560 --> 00:11:16,160
vehicle models that you can think of

271
00:11:16,160 --> 00:11:18,959
because it's very generic it's not data

272
00:11:18,959 --> 00:11:21,600
specific it's not vehicle specific so

273
00:11:21,600 --> 00:11:24,000
once you develop an algorithm

274
00:11:24,000 --> 00:11:26,720
you don't have to go around changing it

275
00:11:26,720 --> 00:11:30,000
again and again uh whereas packet base

276
00:11:30,000 --> 00:11:32,800
is focuses completely on the data

277
00:11:32,800 --> 00:11:35,120
packets or payload itself

278
00:11:35,120 --> 00:11:37,279
so this is also useful in certain

279
00:11:37,279 --> 00:11:40,160
situations um

280
00:11:40,160 --> 00:11:42,880
so these are the two major types and

281
00:11:42,880 --> 00:11:46,640
hybrid is a mix of both of them

282
00:11:46,640 --> 00:11:49,519
so when i started to develop an

283
00:11:49,519 --> 00:11:51,920
intuition detection system i started

284
00:11:51,920 --> 00:11:55,120
with a prototype so my goal was to

285
00:11:55,120 --> 00:11:58,480
create a working prototype from data

286
00:11:58,480 --> 00:12:00,720
that is publicly available

287
00:12:00,720 --> 00:12:03,920
so i wanted to identify common attack

288
00:12:03,920 --> 00:12:07,440
scenarios and generate adapt scenarios

289
00:12:07,440 --> 00:12:09,519
pertaining to that

290
00:12:09,519 --> 00:12:12,240
and along with my team

291
00:12:12,240 --> 00:12:14,639
we wanted to add some machine and deep

292
00:12:14,639 --> 00:12:17,200
learning features to this prototype

293
00:12:17,200 --> 00:12:20,480
and finally test the results on a pc to

294
00:12:20,480 --> 00:12:23,920
see how our ids algorithm has failed so

295
00:12:23,920 --> 00:12:25,120
far

296
00:12:25,120 --> 00:12:25,920
so

297
00:12:25,920 --> 00:12:28,240
um upon a lot of

298
00:12:28,240 --> 00:12:31,279
literature survey i came upon a very

299
00:12:31,279 --> 00:12:33,920
highly cited academic paper

300
00:12:33,920 --> 00:12:37,519
called otids which proposed a novel

301
00:12:37,519 --> 00:12:41,040
nutrition deduction system from the hcrl

302
00:12:41,040 --> 00:12:42,800
lab in korea

303
00:12:42,800 --> 00:12:43,600
so

304
00:12:43,600 --> 00:12:46,000
they had three common attack scenarios

305
00:12:46,000 --> 00:12:48,839
which is denial of service fuzzy and

306
00:12:48,839 --> 00:12:50,800
impersonation

307
00:12:50,800 --> 00:12:53,600
their data was publicly available

308
00:12:53,600 --> 00:12:56,399
which is kind of hard to find in uh

309
00:12:56,399 --> 00:12:58,480
automotive domain

310
00:12:58,480 --> 00:13:01,120
the algorithm itself was fairly easy to

311
00:13:01,120 --> 00:13:03,920
implement and so this seemed like a good

312
00:13:03,920 --> 00:13:08,240
reference point to start of my prototype

313
00:13:08,240 --> 00:13:11,040
so i wanted to generate more such data

314
00:13:11,040 --> 00:13:14,000
so i used vector schenoe network box

315
00:13:14,000 --> 00:13:16,560
it's basically a simulation tool and

316
00:13:16,560 --> 00:13:18,880
used i used this and programmed more

317
00:13:18,880 --> 00:13:20,639
attached data sets based on the

318
00:13:20,639 --> 00:13:22,560
reference model that

319
00:13:22,560 --> 00:13:24,320
i have with me

320
00:13:24,320 --> 00:13:26,720
so some of the attack scenarios the

321
00:13:26,720 --> 00:13:29,279
first one is denial of service

322
00:13:29,279 --> 00:13:33,519
so as the name suggests the goal is to

323
00:13:33,519 --> 00:13:36,399
either jam the canvas

324
00:13:36,399 --> 00:13:40,000
or try to get the highest priority on

325
00:13:40,000 --> 00:13:41,440
the canvas

326
00:13:41,440 --> 00:13:44,399
so the way to do this is to inject

327
00:13:44,399 --> 00:13:46,800
messages that would

328
00:13:46,800 --> 00:13:49,040
that are the highest priority which in

329
00:13:49,040 --> 00:13:51,120
case would be zero zero zero which is

330
00:13:51,120 --> 00:13:52,720
the lowest you can go

331
00:13:52,720 --> 00:13:55,440
you just try to just like spam it in a

332
00:13:55,440 --> 00:13:58,399
very short period of time so either you

333
00:13:58,399 --> 00:14:01,040
get the highest priority or

334
00:14:01,040 --> 00:14:03,440
the canvas becomes invalid either of

335
00:14:03,440 --> 00:14:04,639
this

336
00:14:04,639 --> 00:14:08,240
uh becomes a denial of service attack

337
00:14:08,240 --> 00:14:10,320
the next one is fuzzy

338
00:14:10,320 --> 00:14:14,639
so it basically looks uh is a spoofing

339
00:14:14,639 --> 00:14:15,600
attack

340
00:14:15,600 --> 00:14:18,240
where it injects cools random plan id

341
00:14:18,240 --> 00:14:21,440
and data values so for example replay

342
00:14:21,440 --> 00:14:24,639
attacks is a common example of a fuzzy

343
00:14:24,639 --> 00:14:25,760
attack

344
00:14:25,760 --> 00:14:27,600
so

345
00:14:27,600 --> 00:14:30,560
and few other examples could be

346
00:14:30,560 --> 00:14:33,920
you have the right payload and data but

347
00:14:33,920 --> 00:14:35,839
you send them in

348
00:14:35,839 --> 00:14:38,800
wrong timings so you have a time that is

349
00:14:38,800 --> 00:14:40,959
expected in a normal scenario but then

350
00:14:40,959 --> 00:14:45,360
you just send it along in a in a uh

351
00:14:45,360 --> 00:14:48,320
different timing and another one is you

352
00:14:48,320 --> 00:14:51,040
have the wrong data but then you send it

353
00:14:51,040 --> 00:14:54,000
in the exact sequences that is expected

354
00:14:54,000 --> 00:14:56,240
in a normal scenario so these are all

355
00:14:56,240 --> 00:14:59,040
examples of very fuzzy attack

356
00:14:59,040 --> 00:15:02,000
so the data format that was followed in

357
00:15:02,000 --> 00:15:04,240
this

358
00:15:04,480 --> 00:15:07,360
model was a request response model where

359
00:15:07,360 --> 00:15:10,639
the request was identified with a data

360
00:15:10,639 --> 00:15:13,760
length code of zero and the response

361
00:15:13,760 --> 00:15:16,639
had a data length code of either four or

362
00:15:16,639 --> 00:15:20,320
h and it had the same id so we can

363
00:15:20,320 --> 00:15:22,639
recognize that it's a response and came

364
00:15:22,639 --> 00:15:24,720
along with the payload after that

365
00:15:24,720 --> 00:15:27,279
so the data was collected from a kia

366
00:15:27,279 --> 00:15:30,079
soul vehicle and uh

367
00:15:30,079 --> 00:15:33,600
for the fuzzy attack the authors had two

368
00:15:33,600 --> 00:15:35,120
responses

369
00:15:35,120 --> 00:15:37,040
and they randomized one of it as

370
00:15:37,040 --> 00:15:40,079
original and the other responses attack

371
00:15:40,079 --> 00:15:43,120
so i graphed the packets

372
00:15:43,120 --> 00:15:44,959
as they arrive

373
00:15:44,959 --> 00:15:46,000
if you can

374
00:15:46,000 --> 00:15:49,120
look at the figure here and

375
00:15:49,120 --> 00:15:49,920
so

376
00:15:49,920 --> 00:15:51,120
anything

377
00:15:51,120 --> 00:15:53,519
any packet any response that arrives

378
00:15:53,519 --> 00:15:55,279
after the seventh

379
00:15:55,279 --> 00:15:57,519
message is considered as a loss packet

380
00:15:57,519 --> 00:15:59,920
so we've only considered that particular

381
00:15:59,920 --> 00:16:02,639
window as a legitimate ones

382
00:16:02,639 --> 00:16:04,959
and from the figure in an attack free

383
00:16:04,959 --> 00:16:06,000
state

384
00:16:06,000 --> 00:16:08,000
uh most of the packets even if they

385
00:16:08,000 --> 00:16:09,839
arrive made they arrive

386
00:16:09,839 --> 00:16:12,720
they arrived at a pretty good uh uh time

387
00:16:12,720 --> 00:16:14,480
interval it didn't take too long for

388
00:16:14,480 --> 00:16:15,600
time to

389
00:16:15,600 --> 00:16:18,160
uh get the response to your eyes

390
00:16:18,160 --> 00:16:20,480
but if you look at denial of service and

391
00:16:20,480 --> 00:16:24,079
fuzzing when i grasped the arrival time

392
00:16:24,079 --> 00:16:26,240
you can see that they significantly

393
00:16:26,240 --> 00:16:29,040
increased in both these scenarios

394
00:16:29,040 --> 00:16:31,600
so here you see zero zero zero zero zero

395
00:16:31,600 --> 00:16:33,600
zero which means an attack is happening

396
00:16:33,600 --> 00:16:34,480
and

397
00:16:34,480 --> 00:16:37,199
the response came much much later and in

398
00:16:37,199 --> 00:16:39,360
fuzzing as i mentioned there's two

399
00:16:39,360 --> 00:16:42,079
responses and they randomly chose this

400
00:16:42,079 --> 00:16:43,920
to be the legitimate one

401
00:16:43,920 --> 00:16:44,880
so

402
00:16:44,880 --> 00:16:47,680
uh as usual you can just look at the

403
00:16:47,680 --> 00:16:49,680
graphs you can just see oh there is

404
00:16:49,680 --> 00:16:51,440
something happening there is an attack

405
00:16:51,440 --> 00:16:52,959
that's got happening here you know it

406
00:16:52,959 --> 00:16:55,680
does not look normal or it does not look

407
00:16:55,680 --> 00:16:57,759
like it's in an attack free state so

408
00:16:57,759 --> 00:17:00,240
that's a very good indicator

409
00:17:00,240 --> 00:17:02,000
so uh

410
00:17:02,000 --> 00:17:04,640
with the help of my team we added more

411
00:17:04,640 --> 00:17:06,319
machine and deep learning features to

412
00:17:06,319 --> 00:17:09,359
this model and tested it and it came

413
00:17:09,359 --> 00:17:12,000
from 85 to 94

414
00:17:12,000 --> 00:17:13,919
on the pc

415
00:17:13,919 --> 00:17:15,520
which looked good right the numbers

416
00:17:15,520 --> 00:17:17,439
looked good but then i realized one

417
00:17:17,439 --> 00:17:20,000
thing they didn't mean anything

418
00:17:20,000 --> 00:17:22,559
when i requested data from the original

419
00:17:22,559 --> 00:17:24,480
equipment manufacturers

420
00:17:24,480 --> 00:17:27,199
i realized that most can data they do

421
00:17:27,199 --> 00:17:29,679
not follow the message request format at

422
00:17:29,679 --> 00:17:32,640
all and instead follow the sequencing

423
00:17:32,640 --> 00:17:33,679
format

424
00:17:33,679 --> 00:17:36,960
so which means what i had implemented

425
00:17:36,960 --> 00:17:40,240
was a corner case scenario and not the

426
00:17:40,240 --> 00:17:41,360
norm

427
00:17:41,360 --> 00:17:43,679
so one of the biggest takeaways that i

428
00:17:43,679 --> 00:17:45,840
got was to never trust the research

429
00:17:45,840 --> 00:17:49,200
scope blindly even if it was highly

430
00:17:49,200 --> 00:17:50,160
uh

431
00:17:50,160 --> 00:17:51,120
silent

432
00:17:51,120 --> 00:17:53,600
research so it was back to the drawing

433
00:17:53,600 --> 00:17:56,080
board so this time i wanted to create a

434
00:17:56,080 --> 00:17:59,360
proof of concept and i was very careful

435
00:17:59,360 --> 00:18:01,679
to model the attack data based on real

436
00:18:01,679 --> 00:18:04,559
industry data and instead of testing it

437
00:18:04,559 --> 00:18:08,280
on uh pc i tested it on ip03 which is

438
00:18:08,280 --> 00:18:11,440
disastrous ecu so this ecu is mainly

439
00:18:11,440 --> 00:18:12,640
used for

440
00:18:12,640 --> 00:18:16,480
autonomous vehicle capabilities

441
00:18:16,480 --> 00:18:19,679
so the attack scenarios were uh similar

442
00:18:19,679 --> 00:18:22,320
to the prototype ones the denial of

443
00:18:22,320 --> 00:18:23,280
service

444
00:18:23,280 --> 00:18:25,440
and for uh fussing

445
00:18:25,440 --> 00:18:28,720
uh i also included the categories of can

446
00:18:28,720 --> 00:18:32,160
messages in account so for fuzzing i

447
00:18:32,160 --> 00:18:34,640
sent packets that model the original one

448
00:18:34,640 --> 00:18:37,440
but it's injected in a timing that is

449
00:18:37,440 --> 00:18:39,520
different from what is expected in a

450
00:18:39,520 --> 00:18:42,320
normal scenario and it applies to both

451
00:18:42,320 --> 00:18:44,960
the periodic and eventual messages

452
00:18:44,960 --> 00:18:47,120
but for frequency it's essentially the

453
00:18:47,120 --> 00:18:49,600
same as buzzing but it only applies to

454
00:18:49,600 --> 00:18:51,760
periodic messages and not even triggered

455
00:18:51,760 --> 00:18:54,400
messages i also added an additional

456
00:18:54,400 --> 00:18:57,120
attack scenario which is any id which is

457
00:18:57,120 --> 00:18:59,600
not recognized by the original equipment

458
00:18:59,600 --> 00:19:01,039
manufacturer

459
00:19:01,039 --> 00:19:03,840
is also considered as an attack packet

460
00:19:03,840 --> 00:19:07,280
so i labeled that as alien id

461
00:19:07,280 --> 00:19:09,360
so this was the model for the grip of

462
00:19:09,360 --> 00:19:11,360
concept so i would have the normal data

463
00:19:11,360 --> 00:19:14,400
set and there would be a pre-processing

464
00:19:14,400 --> 00:19:18,000
algorithm that would uh understand the

465
00:19:18,000 --> 00:19:19,520
um

466
00:19:19,520 --> 00:19:22,320
how it behaves in a normal scenario so

467
00:19:22,320 --> 00:19:24,559
once i knew that

468
00:19:24,559 --> 00:19:27,440
we generated attack datasets using the

469
00:19:27,440 --> 00:19:30,240
canoeing vector box and fed it into the

470
00:19:30,240 --> 00:19:32,240
ipu this is the

471
00:19:32,240 --> 00:19:33,760
ip03

472
00:19:33,760 --> 00:19:36,080
so there were two detectors which are

473
00:19:36,080 --> 00:19:38,000
part of the intuition detection system

474
00:19:38,000 --> 00:19:40,799
the first one is a logistic detector or

475
00:19:40,799 --> 00:19:44,000
a statistic based algorithm which takes

476
00:19:44,000 --> 00:19:46,960
really less resources and weeds out

477
00:19:46,960 --> 00:19:49,280
common attack scenarios like denial of

478
00:19:49,280 --> 00:19:51,280
service and alien id

479
00:19:51,280 --> 00:19:53,440
the next one was a learning based

480
00:19:53,440 --> 00:19:55,760
detector which used a deep learning

481
00:19:55,760 --> 00:19:58,320
based algorithm to filter out the fuzzy

482
00:19:58,320 --> 00:20:01,039
and frequency eventually it would just

483
00:20:01,039 --> 00:20:02,720
give out if it's zero which is the

484
00:20:02,720 --> 00:20:05,840
normal or one which is an attack

485
00:20:05,840 --> 00:20:08,080
um the results looked something like

486
00:20:08,080 --> 00:20:10,960
this for these statistic based ones

487
00:20:10,960 --> 00:20:13,919
so for the alien id it's anywhere from a

488
00:20:13,919 --> 00:20:17,440
98 to 100 which is really really good

489
00:20:17,440 --> 00:20:20,000
and for the denial of service it was

490
00:20:20,000 --> 00:20:22,159
either 82 to 83

491
00:20:22,159 --> 00:20:24,640
which seems really good and it's very

492
00:20:24,640 --> 00:20:27,280
comparable to the industry standard

493
00:20:27,280 --> 00:20:29,520
so if you combine both of them the

494
00:20:29,520 --> 00:20:32,640
accuracy goes a little bit up to closer

495
00:20:32,640 --> 00:20:34,320
to 91

496
00:20:34,320 --> 00:20:37,039
so this seems pretty good and in line

497
00:20:37,039 --> 00:20:39,679
with what i had wanted

498
00:20:39,679 --> 00:20:42,400
for the uh

499
00:20:42,400 --> 00:20:45,120
deep learning algorithms it ranged from

500
00:20:45,120 --> 00:20:47,600
85 to 98

501
00:20:47,600 --> 00:20:51,520
and this screenshot here is from ip03

502
00:20:51,520 --> 00:20:53,200
once the deep learning algorithm is

503
00:20:53,200 --> 00:20:55,760
executed so it just says that the

504
00:20:55,760 --> 00:20:58,480
accuracy is 100 here for that particular

505
00:20:58,480 --> 00:20:59,600
data set

506
00:20:59,600 --> 00:21:02,400
and it just gives you some statistic of

507
00:21:02,400 --> 00:21:04,720
the messages that are being processed

508
00:21:04,720 --> 00:21:05,520
so

509
00:21:05,520 --> 00:21:07,360
what were the challenges that i

510
00:21:07,360 --> 00:21:10,330
encountered during this this phase of um

511
00:21:10,330 --> 00:21:11,679
[Music]

512
00:21:11,679 --> 00:21:12,640
concept

513
00:21:12,640 --> 00:21:15,600
so the first one was me to fit the

514
00:21:15,600 --> 00:21:18,480
statistic-based algorithm into the mcu

515
00:21:18,480 --> 00:21:21,120
since it takes up very less resources

516
00:21:21,120 --> 00:21:23,360
and to read up the common attacks like

517
00:21:23,360 --> 00:21:25,120
dos and alien

518
00:21:25,120 --> 00:21:26,960
but then i found out that there was no

519
00:21:26,960 --> 00:21:29,360
straightforward way to get the id and

520
00:21:29,360 --> 00:21:32,799
timestamp in ip03 because of the way

521
00:21:32,799 --> 00:21:35,039
that it was designed and i needed to

522
00:21:35,039 --> 00:21:37,120
like make some

523
00:21:37,120 --> 00:21:40,000
changes in in on a deeper level in order

524
00:21:40,000 --> 00:21:41,760
to be able to do that

525
00:21:41,760 --> 00:21:43,440
so um

526
00:21:43,440 --> 00:21:45,520
and second challenge which you might all

527
00:21:45,520 --> 00:21:48,080
have guessed is that we need to make

528
00:21:48,080 --> 00:21:50,400
sure that the incision detection system

529
00:21:50,400 --> 00:21:52,880
is not the sole focus of the ac itself

530
00:21:52,880 --> 00:21:54,640
so it should not take up a lot of the

531
00:21:54,640 --> 00:21:56,960
resources be it if you put it on system

532
00:21:56,960 --> 00:21:59,760
a moonship or if you put it on mcu it

533
00:21:59,760 --> 00:22:02,960
has to take much it has to perform uh

534
00:22:02,960 --> 00:22:05,200
very well and take up very little

535
00:22:05,200 --> 00:22:07,840
resources as possible

536
00:22:07,840 --> 00:22:09,520
so uh

537
00:22:09,520 --> 00:22:12,159
these the proof of concept was a fairly

538
00:22:12,159 --> 00:22:13,679
good success

539
00:22:13,679 --> 00:22:15,600
but

540
00:22:15,600 --> 00:22:18,400
that it this brought me to a very

541
00:22:18,400 --> 00:22:21,200
important question and the question was

542
00:22:21,200 --> 00:22:25,120
i use data sets which are simulated and

543
00:22:25,120 --> 00:22:27,360
the ids algorithms did really well on

544
00:22:27,360 --> 00:22:28,880
them so it's great

545
00:22:28,880 --> 00:22:29,919
but

546
00:22:29,919 --> 00:22:33,760
that does not equal to a real car so if

547
00:22:33,760 --> 00:22:36,080
you actually deploy this ids algorithms

548
00:22:36,080 --> 00:22:37,679
in a real car

549
00:22:37,679 --> 00:22:39,919
would it still work the same way as it

550
00:22:39,919 --> 00:22:42,960
is intended to because in a real car you

551
00:22:42,960 --> 00:22:45,840
can have like some latency some delay

552
00:22:45,840 --> 00:22:49,200
some legitimate packets can come later

553
00:22:49,200 --> 00:22:51,600
than they are expected to and what

554
00:22:51,600 --> 00:22:53,600
happens to the ideas algorithms then

555
00:22:53,600 --> 00:22:56,240
would it would it still perform uh as

556
00:22:56,240 --> 00:22:59,039
it's supposed to or would it give you a

557
00:22:59,039 --> 00:23:00,640
lot of false positives and false

558
00:23:00,640 --> 00:23:02,720
negatives which you want to avoid

559
00:23:02,720 --> 00:23:05,840
so in order to answer the question i

560
00:23:05,840 --> 00:23:08,559
propose the scan security framework

561
00:23:08,559 --> 00:23:09,600
so

562
00:23:09,600 --> 00:23:11,760
i wanted to test i wanted to set up a

563
00:23:11,760 --> 00:23:13,919
can test build which can be used to run

564
00:23:13,919 --> 00:23:16,880
a canvas in a realistic environment

565
00:23:16,880 --> 00:23:20,080
and then develop a pentas tool which can

566
00:23:20,080 --> 00:23:22,240
inject uh

567
00:23:22,240 --> 00:23:24,480
messages into the cam

568
00:23:24,480 --> 00:23:27,200
so this is basically a this would be

569
00:23:27,200 --> 00:23:29,200
like an attack toolbox that injects

570
00:23:29,200 --> 00:23:31,679
messages into the clan test bed in a

571
00:23:31,679 --> 00:23:34,159
live environment so one of the main

572
00:23:34,159 --> 00:23:36,559
outputs that you can get from here is a

573
00:23:36,559 --> 00:23:40,000
very realistic attack data set

574
00:23:40,000 --> 00:23:42,880
that can be fed into the ids algorithms

575
00:23:42,880 --> 00:23:45,279
you can see how the algorithm is fair

576
00:23:45,279 --> 00:23:47,279
you can make modifications if it's not

577
00:23:47,279 --> 00:23:49,360
up to expectations and then you can

578
00:23:49,360 --> 00:23:51,279
again feed it over here so it's like a

579
00:23:51,279 --> 00:23:52,960
continuous loop

580
00:23:52,960 --> 00:23:55,440
for improvement of security

581
00:23:55,440 --> 00:23:57,840
so uh an example

582
00:23:57,840 --> 00:24:00,799
just a very uh example of a can test but

583
00:24:00,799 --> 00:24:04,000
set up is i have a wired can harness

584
00:24:04,000 --> 00:24:06,640
setup with a lot of nodes

585
00:24:06,640 --> 00:24:10,240
and then you know some of which is uh

586
00:24:10,240 --> 00:24:13,039
uses arduino and simulates

587
00:24:13,039 --> 00:24:14,080
different

588
00:24:14,080 --> 00:24:17,919
uh components in a car like a jaw engine

589
00:24:17,919 --> 00:24:19,200
hvac

590
00:24:19,200 --> 00:24:21,679
and then there are some nodes which have

591
00:24:21,679 --> 00:24:24,400
the much advanced ecu's from disa like

592
00:24:24,400 --> 00:24:26,080
ip03

593
00:24:26,080 --> 00:24:28,880
so and some nodes which are left open so

594
00:24:28,880 --> 00:24:31,840
we can add more issues later on may want

595
00:24:31,840 --> 00:24:34,640
to continue testing and this this

596
00:24:34,640 --> 00:24:38,559
connects to a usb cam interface and

597
00:24:38,559 --> 00:24:41,440
and then connects to a pc which runs the

598
00:24:41,440 --> 00:24:43,600
software message induction toolbox or

599
00:24:43,600 --> 00:24:46,880
the panties toolbox which um performs

600
00:24:46,880 --> 00:24:48,880
the attacks needed for intuition

601
00:24:48,880 --> 00:24:50,480
detecting systems

602
00:24:50,480 --> 00:24:51,279
so

603
00:24:51,279 --> 00:24:53,919
uh you can also have other related

604
00:24:53,919 --> 00:24:56,400
components for the ecu's to work like

605
00:24:56,400 --> 00:24:59,360
sensors or actuators another platform

606
00:24:59,360 --> 00:25:02,960
environments to make this run smoothly

607
00:25:02,960 --> 00:25:04,559
and uh

608
00:25:04,559 --> 00:25:07,919
so the pentax toolbox itself would uh

609
00:25:07,919 --> 00:25:10,480
start off with emulating denial of

610
00:25:10,480 --> 00:25:12,080
service attacks

611
00:25:12,080 --> 00:25:15,760
uh fuzzy replay or management attacks

612
00:25:15,760 --> 00:25:18,400
then frequency attacks by manipulating

613
00:25:18,400 --> 00:25:20,000
chaoticity

614
00:25:20,000 --> 00:25:23,600
and to be primarily developed in python

615
00:25:23,600 --> 00:25:27,840
so uh with this i'm going to go to the

616
00:25:27,840 --> 00:25:30,640
end of representation so here are some

617
00:25:30,640 --> 00:25:32,320
of the key takeaways that i want to

618
00:25:32,320 --> 00:25:33,440
share with you

619
00:25:33,440 --> 00:25:36,080
one is that if you have a highly cited

620
00:25:36,080 --> 00:25:38,640
research it doesn't always mean that

621
00:25:38,640 --> 00:25:41,760
it's useful in the industry so always

622
00:25:41,760 --> 00:25:44,720
model a system based on real data

623
00:25:44,720 --> 00:25:45,679
and

624
00:25:45,679 --> 00:25:49,520
my opinion is that hybrid ids is the

625
00:25:49,520 --> 00:25:51,679
best bet moving forward

626
00:25:51,679 --> 00:25:54,480
uh this uh flowchart here represents a

627
00:25:54,480 --> 00:25:57,120
model for my proof of concept which took

628
00:25:57,120 --> 00:26:00,000
up very less resources so i had a

629
00:26:00,000 --> 00:26:02,559
statistic based algorithm which weeds

630
00:26:02,559 --> 00:26:04,880
out most of the attacks and uh deep

631
00:26:04,880 --> 00:26:06,320
learning one which

632
00:26:06,320 --> 00:26:09,120
uh we did out the advanced one so if you

633
00:26:09,120 --> 00:26:11,200
want if uh companies want to do

634
00:26:11,200 --> 00:26:14,400
something more specific for payload

635
00:26:14,400 --> 00:26:16,559
it can be just added to this model over

636
00:26:16,559 --> 00:26:18,559
here without compromising on the

637
00:26:18,559 --> 00:26:21,919
resources which means that it would be a

638
00:26:21,919 --> 00:26:24,480
really good solution in my opinion

639
00:26:24,480 --> 00:26:27,919
and finally i do not consider my

640
00:26:27,919 --> 00:26:30,320
prototype to be a total failure because

641
00:26:30,320 --> 00:26:32,960
i got a chance to be here and tell you

642
00:26:32,960 --> 00:26:34,640
what not to do

643
00:26:34,640 --> 00:26:36,080
so

644
00:26:36,080 --> 00:26:40,080
with that i would be ending my talk and

645
00:26:40,080 --> 00:26:43,279
i'm open to questions now from the

646
00:26:43,279 --> 00:26:45,370
audience

647
00:26:45,370 --> 00:26:53,520
[Applause]

648
00:26:53,520 --> 00:26:55,919
all right folks so it is question time

649
00:26:55,919 --> 00:26:58,720
does anyone have any questions for oh we

650
00:26:58,720 --> 00:27:00,320
have a questionnaire

651
00:27:00,320 --> 00:27:03,120
come up please

652
00:27:03,200 --> 00:27:05,200
i have a question related to your ids

653
00:27:05,200 --> 00:27:06,720
model

654
00:27:06,720 --> 00:27:08,480
and related to your oem data that you

655
00:27:08,480 --> 00:27:09,760
received

656
00:27:09,760 --> 00:27:12,240
so isn't it like that you probably have

657
00:27:12,240 --> 00:27:14,240
to train a model for each different type

658
00:27:14,240 --> 00:27:15,679
of car model because the data will

659
00:27:15,679 --> 00:27:17,679
always look different maybe even inside

660
00:27:17,679 --> 00:27:21,520
the same oem model line

661
00:27:21,520 --> 00:27:24,640
uh okay yes so uh basically if you use

662
00:27:24,640 --> 00:27:27,200
the flow based ids which is what i do

663
00:27:27,200 --> 00:27:31,360
the ids would be different for each uh

664
00:27:31,360 --> 00:27:34,320
each vehicle model because each oem have

665
00:27:34,320 --> 00:27:36,240
different ids and different way of

666
00:27:36,240 --> 00:27:37,520
processing them

667
00:27:37,520 --> 00:27:40,720
but the logic itself would be same but

668
00:27:40,720 --> 00:27:42,640
you have to as you're right you have to

669
00:27:42,640 --> 00:27:45,919
be training for every a single model uh

670
00:27:45,919 --> 00:27:48,640
depending upon their their own um ids

671
00:27:48,640 --> 00:27:50,480
and specifications but the core

672
00:27:50,480 --> 00:27:52,640
algorithms would uh remain the same if

673
00:27:52,640 --> 00:27:55,600
you use of your waste model

674
00:27:55,600 --> 00:27:57,279
okay thanks and question two if you

675
00:27:57,279 --> 00:27:59,520
don't mind

676
00:27:59,520 --> 00:28:00,720
um in the very beginning you were

677
00:28:00,720 --> 00:28:01,840
talking about using message

678
00:28:01,840 --> 00:28:04,159
authentication codes for protecting con

679
00:28:04,159 --> 00:28:06,799
bus messages

680
00:28:06,799 --> 00:28:08,080
how do you actually distribute the

681
00:28:08,080 --> 00:28:11,199
symmetric key for that

682
00:28:11,440 --> 00:28:13,279
how do you what how do you distribute

683
00:28:13,279 --> 00:28:15,279
the key that is used for the hmac for

684
00:28:15,279 --> 00:28:16,880
the microphone

685
00:28:16,880 --> 00:28:20,640
it's distributed along the um

686
00:28:20,640 --> 00:28:23,360
the extended cam frame so it is send

687
00:28:23,360 --> 00:28:24,880
along with the frames when you do the

688
00:28:24,880 --> 00:28:26,880
checking you would actually check if

689
00:28:26,880 --> 00:28:29,360
it's it works or not on the receiver's

690
00:28:29,360 --> 00:28:32,799
end so it's sent along it's distributed

691
00:28:32,799 --> 00:28:34,880
along the cam frame itself

692
00:28:34,880 --> 00:28:36,960
so how do you secure those messages with

693
00:28:36,960 --> 00:28:39,360
the key

694
00:28:40,320 --> 00:28:41,200
uh

695
00:28:41,200 --> 00:28:46,159
so um let me just go back to this slide

696
00:28:52,080 --> 00:28:55,200
okay so you have a sender and receiver

697
00:28:55,200 --> 00:28:57,520
side so you basically have a you

698
00:28:57,520 --> 00:29:00,159
generate a mac and then you have on a

699
00:29:00,159 --> 00:29:02,559
receiver side you would uh verify the

700
00:29:02,559 --> 00:29:04,399
key that is being sent

701
00:29:04,399 --> 00:29:05,120
so

702
00:29:05,120 --> 00:29:07,039
i think like you would send this on a

703
00:29:07,039 --> 00:29:10,320
can fd and you would like

704
00:29:10,320 --> 00:29:13,120
based on the uh agreement before you

705
00:29:13,120 --> 00:29:15,200
would just verify and if it's if it's

706
00:29:15,200 --> 00:29:16,960
not okay then you know that someone has

707
00:29:16,960 --> 00:29:19,520
tampered with a message and if it's okay

708
00:29:19,520 --> 00:29:23,760
then uh you would proceed with the uh

709
00:29:23,760 --> 00:29:26,320
the other other functionalities right

710
00:29:26,320 --> 00:29:30,000
but where do we get a secret key form

711
00:29:30,000 --> 00:29:31,679
oh

712
00:29:31,679 --> 00:29:33,360
okay so

713
00:29:33,360 --> 00:29:35,120
uh

714
00:29:35,120 --> 00:29:37,440
i think this is uh i'm not really sure

715
00:29:37,440 --> 00:29:39,120
but i think this is

716
00:29:39,120 --> 00:29:41,760
randomly generated this is something i

717
00:29:41,760 --> 00:29:45,520
do not completely know yet

718
00:29:45,520 --> 00:29:48,240
okay thank you

719
00:29:50,000 --> 00:29:52,480
all right are there any other questions

720
00:29:52,480 --> 00:29:55,480
today

721
00:29:55,760 --> 00:29:57,840
so then um with that we're going to

722
00:29:57,840 --> 00:29:59,840
close this session thank you so much for

723
00:29:59,840 --> 00:30:02,960
being here shivaranjani and um have a

724
00:30:02,960 --> 00:30:04,480
great day

725
00:30:04,480 --> 00:30:06,790
thank you

726
00:30:06,790 --> 00:30:08,240
[Applause]

727
00:30:08,240 --> 00:30:10,320
you

