1
00:00:03,199 --> 00:00:06,080
so i'll begin uh hi everyone here

2
00:00:06,080 --> 00:00:08,720
uh uh here we are to present our talk

3
00:00:08,720 --> 00:00:11,440
titled how we got into a unicorn's

4
00:00:11,440 --> 00:00:13,360
private code base through analyzing

5
00:00:13,360 --> 00:00:16,079
millions of mobile apps

6
00:00:16,079 --> 00:00:17,359
moving on

7
00:00:17,359 --> 00:00:18,960
to the next slide

8
00:00:18,960 --> 00:00:20,320
i am ashika

9
00:00:20,320 --> 00:00:22,320
i am a security research and technical

10
00:00:22,320 --> 00:00:23,600
writing intern

11
00:00:23,600 --> 00:00:26,760
at cloudsec

12
00:00:34,000 --> 00:00:37,360
i should i believe there are mute

13
00:00:48,390 --> 00:00:51,469
[Music]

14
00:00:56,559 --> 00:00:59,120
hello everyone uh my name is rashid jain

15
00:00:59,120 --> 00:01:01,199
and i'm working as a full stack engineer

16
00:01:01,199 --> 00:01:03,920
at cloudsick so i love to automate

17
00:01:03,920 --> 00:01:06,240
anything and everything related to

18
00:01:06,240 --> 00:01:09,040
security apart from that i love to

19
00:01:09,040 --> 00:01:13,320
travel and read books

20
00:01:14,479 --> 00:01:16,479
hi everyone i am manan and i work as a

21
00:01:16,479 --> 00:01:19,200
cyber security analyst intern at classic

22
00:01:19,200 --> 00:01:20,720
and i love to play the drums and play

23
00:01:20,720 --> 00:01:23,119
football

24
00:01:24,080 --> 00:01:27,840
cool so let's move on

25
00:01:28,400 --> 00:01:30,640
yeah so the agenda of our talk our talk

26
00:01:30,640 --> 00:01:32,479
is basically divided into three parts in

27
00:01:32,479 --> 00:01:35,040
the first part we are going to explore

28
00:01:35,040 --> 00:01:37,119
uh what exactly happened with the

29
00:01:37,119 --> 00:01:38,960
unicorn that we're talking about in the

30
00:01:38,960 --> 00:01:42,000
second part we will talk about how we

31
00:01:42,000 --> 00:01:44,159
analyze and find vulnerabilities in

32
00:01:44,159 --> 00:01:47,439
mobile apps and in the end part three we

33
00:01:47,439 --> 00:01:48,720
are going to

34
00:01:48,720 --> 00:01:51,200
talk about a large scale study we did of

35
00:01:51,200 --> 00:01:55,280
over one million percent and the impact

36
00:01:55,280 --> 00:01:58,159
so moving on

37
00:01:58,960 --> 00:02:00,250
let's begin with part one

38
00:02:00,250 --> 00:02:02,240
[Music]

39
00:02:02,240 --> 00:02:04,000
the next slide please

40
00:02:04,000 --> 00:02:05,200
yeah so

41
00:02:05,200 --> 00:02:07,520
source code leaks have been in the talk

42
00:02:07,520 --> 00:02:09,840
in the news for many years now

43
00:02:09,840 --> 00:02:11,840
and the biggest one that comes of the

44
00:02:11,840 --> 00:02:14,480
top of my head is the recent twitch leak

45
00:02:14,480 --> 00:02:17,680
that happened in 2021 where

46
00:02:17,680 --> 00:02:20,720
we saw that malicious actors posted on

47
00:02:20,720 --> 00:02:23,680
the 4chan forum over 6000 internal git

48
00:02:23,680 --> 00:02:26,480
repositories of twitch which contained

49
00:02:26,480 --> 00:02:29,120
200 gb worth of data and 3 million

50
00:02:29,120 --> 00:02:30,800
documents so

51
00:02:30,800 --> 00:02:32,959
just by the scale of these numbers you

52
00:02:32,959 --> 00:02:35,519
can understand how big this leak was

53
00:02:35,519 --> 00:02:37,920
and earlier this year we did a little

54
00:02:37,920 --> 00:02:39,519
something of our own which we'd like to

55
00:02:39,519 --> 00:02:41,040
share with you guys

56
00:02:41,040 --> 00:02:44,000
so moving on

57
00:02:44,800 --> 00:02:47,440
let me present to you the big fish

58
00:02:47,440 --> 00:02:50,560
so it was a casual work afternoon for us

59
00:02:50,560 --> 00:02:52,959
we were just uh doing a normal thing

60
00:02:52,959 --> 00:02:55,599
analyzing top apps and finding security

61
00:02:55,599 --> 00:02:57,680
vulnerabilities in them and reporting

62
00:02:57,680 --> 00:03:00,159
them to the uh

63
00:03:00,159 --> 00:03:01,519
organizations

64
00:03:01,519 --> 00:03:03,840
so what we found was really interesting

65
00:03:03,840 --> 00:03:06,080
we found that there was this app which

66
00:03:06,080 --> 00:03:08,080
had 10 million plus downloads in play

67
00:03:08,080 --> 00:03:08,959
store

68
00:03:08,959 --> 00:03:12,319
of a 120 million worth of unicorn that

69
00:03:12,319 --> 00:03:14,400
had a really big security vulnerability

70
00:03:14,400 --> 00:03:17,040
with which we could uh basically

71
00:03:17,040 --> 00:03:19,040
view their entire source code

72
00:03:19,040 --> 00:03:21,040
and do a lot more

73
00:03:21,040 --> 00:03:22,959
a lot more things with it which we'll

74
00:03:22,959 --> 00:03:25,599
tell you in in the coming slides

75
00:03:25,599 --> 00:03:28,159
moving on

76
00:03:29,599 --> 00:03:33,120
so let's explore what exactly happened

77
00:03:33,120 --> 00:03:33,920
so

78
00:03:33,920 --> 00:03:36,239
what happened was that uh while

79
00:03:36,239 --> 00:03:38,480
exploring the uh the code base of this

80
00:03:38,480 --> 00:03:42,319
app uh we were analyzing it on uh

81
00:03:42,319 --> 00:03:44,560
the search engine that we built and what

82
00:03:44,560 --> 00:03:47,200
we saw was that there was something

83
00:03:47,200 --> 00:03:49,760
called as a guitar person access token

84
00:03:49,760 --> 00:03:52,400
which was hard coded into the app's

85
00:03:52,400 --> 00:03:54,400
android bundle file and it was there for

86
00:03:54,400 --> 00:03:57,120
everyone to see and do anything with it

87
00:03:57,120 --> 00:03:59,519
so that's not exactly desirable

88
00:03:59,519 --> 00:04:01,519
especially not from a unicorn

89
00:04:01,519 --> 00:04:03,519
a lot of questions might be arising in

90
00:04:03,519 --> 00:04:05,519
your head people might be asking what is

91
00:04:05,519 --> 00:04:07,760
a guitar personal access token and what

92
00:04:07,760 --> 00:04:09,920
can a person do with it so we'll explore

93
00:04:09,920 --> 00:04:13,559
that in the next slide

94
00:04:14,239 --> 00:04:16,320
a github personal access token is

95
00:04:16,320 --> 00:04:18,959
basically an alternative uh to using

96
00:04:18,959 --> 00:04:21,358
passwords for authentication in github

97
00:04:21,358 --> 00:04:24,400
using the github api or the command line

98
00:04:24,400 --> 00:04:25,440
so

99
00:04:25,440 --> 00:04:28,320
uh with this token basically uh you you

100
00:04:28,320 --> 00:04:30,560
get a lot of privileges and we ran this

101
00:04:30,560 --> 00:04:32,240
query as you can see in the screenshot

102
00:04:32,240 --> 00:04:34,560
on this uh on the screen what happened

103
00:04:34,560 --> 00:04:36,639
was that we passed the github token that

104
00:04:36,639 --> 00:04:38,960
we found in the previous slide and we

105
00:04:38,960 --> 00:04:41,680
wanted to explore what scopes uh is this

106
00:04:41,680 --> 00:04:43,919
guitar personal access token giving us

107
00:04:43,919 --> 00:04:45,680
and you can see the output in the

108
00:04:45,680 --> 00:04:46,800
screenshot

109
00:04:46,800 --> 00:04:48,880
we could see that we're getting admin

110
00:04:48,880 --> 00:04:50,080
privileges

111
00:04:50,080 --> 00:04:52,960
uh we we could delete the repo we could

112
00:04:52,960 --> 00:04:55,440
delete packages in the repo

113
00:04:55,440 --> 00:04:57,440
we could change the workflows we could

114
00:04:57,440 --> 00:05:00,560
write packages we had the reposco we had

115
00:05:00,560 --> 00:05:02,800
the user scope so out of all of these

116
00:05:02,800 --> 00:05:05,840
scopes the most important is the scope

117
00:05:05,840 --> 00:05:08,800
repo which gave us full access to the

118
00:05:08,800 --> 00:05:11,840
private repositories so uh just to give

119
00:05:11,840 --> 00:05:14,000
you an idea of what we could do with

120
00:05:14,000 --> 00:05:15,360
this scope was

121
00:05:15,360 --> 00:05:18,880
uh basically we could uh commit changes

122
00:05:18,880 --> 00:05:20,479
to the

123
00:05:20,479 --> 00:05:23,280
organization's github repo and push them

124
00:05:23,280 --> 00:05:26,320
we could also invite other collaborators

125
00:05:26,320 --> 00:05:28,720
and ask them to do the same we could

126
00:05:28,720 --> 00:05:30,160
mess around with their deployment

127
00:05:30,160 --> 00:05:33,039
workflows we could delete the repo

128
00:05:33,039 --> 00:05:36,080
basically in the end to sum it up we

129
00:05:36,080 --> 00:05:37,520
could do anything with the repos with

130
00:05:37,520 --> 00:05:41,039
the scope with just the scope and that's

131
00:05:41,039 --> 00:05:43,199
a a pretty big deal

132
00:05:43,199 --> 00:05:46,880
now moving on to the next slide

133
00:05:47,520 --> 00:05:49,759
uh after finding out

134
00:05:49,759 --> 00:05:51,039
that

135
00:05:51,039 --> 00:05:52,479
we could get access to the private

136
00:05:52,479 --> 00:05:55,199
repositories we wanted to see how many

137
00:05:55,199 --> 00:05:57,520
private repositories can we actually get

138
00:05:57,520 --> 00:06:00,160
access to so we ran this query uh that

139
00:06:00,160 --> 00:06:01,919
is shown in the screenshot we passed the

140
00:06:01,919 --> 00:06:05,440
token against this uh endpoint and

141
00:06:05,440 --> 00:06:07,680
we were able to find that we could

142
00:06:07,680 --> 00:06:10,720
access the organization's all 26 private

143
00:06:10,720 --> 00:06:12,319
repository

144
00:06:12,319 --> 00:06:13,440
and

145
00:06:13,440 --> 00:06:16,880
that's the impact was pretty nasty so

146
00:06:16,880 --> 00:06:19,199
moving on uh

147
00:06:19,199 --> 00:06:21,440
to the next slide

148
00:06:21,440 --> 00:06:22,240
uh

149
00:06:22,240 --> 00:06:24,240
and this is what the private uh

150
00:06:24,240 --> 00:06:27,280
repositories urls look like so you could

151
00:06:27,280 --> 00:06:30,720
conclude that we could get access to the

152
00:06:30,720 --> 00:06:32,800
unicorns ios apps

153
00:06:32,800 --> 00:06:36,240
their apis and their normal android

154
00:06:36,240 --> 00:06:37,600
mobile apps

155
00:06:37,600 --> 00:06:39,680
finally this is how we got access to the

156
00:06:39,680 --> 00:06:41,520
unicorn's code base

157
00:06:41,520 --> 00:06:42,639
so

158
00:06:42,639 --> 00:06:44,479
after finding this issue we immediately

159
00:06:44,479 --> 00:06:46,880
reported to the company and they

160
00:06:46,880 --> 00:06:49,759
acknowledged the issue and fix the bug

161
00:06:49,759 --> 00:06:52,639
and the token is now no more there

162
00:06:52,639 --> 00:06:55,199
moving on

163
00:06:56,639 --> 00:06:57,680
so

164
00:06:57,680 --> 00:06:59,440
let's count the mistakes

165
00:06:59,440 --> 00:07:01,360
so how are we able to do this entire

166
00:07:01,360 --> 00:07:03,840
thing there were two major mistakes that

167
00:07:03,840 --> 00:07:05,840
were on the developer's part first

168
00:07:05,840 --> 00:07:07,840
mistake was hard coding the github

169
00:07:07,840 --> 00:07:10,560
packet path token in the source code in

170
00:07:10,560 --> 00:07:13,199
the first place so once we found that

171
00:07:13,199 --> 00:07:15,440
hard-coded github pad token we could

172
00:07:15,440 --> 00:07:17,680
clone their repos on a system and just

173
00:07:17,680 --> 00:07:19,680
view that code base so till now we are

174
00:07:19,680 --> 00:07:22,240
just able to view the code base uh but

175
00:07:22,240 --> 00:07:24,080
where things went really south was

176
00:07:24,080 --> 00:07:26,720
mistake number two uh with which like

177
00:07:26,720 --> 00:07:29,199
they gave excessive scope to that token

178
00:07:29,199 --> 00:07:30,800
and anybody could use it for

179
00:07:30,800 --> 00:07:33,280
exploitation like anybody could

180
00:07:33,280 --> 00:07:35,680
commit changes to their private code

181
00:07:35,680 --> 00:07:37,199
base anybody could invite other

182
00:07:37,199 --> 00:07:39,599
collaborators and team like change the

183
00:07:39,599 --> 00:07:41,680
entire organization structure and

184
00:07:41,680 --> 00:07:44,080
whatnot so these were two really big

185
00:07:44,080 --> 00:07:46,879
mistakes that they made on that part

186
00:07:46,879 --> 00:07:48,479
now uh

187
00:07:48,479 --> 00:07:51,599
the talk is titled how we analyzed uh

188
00:07:51,599 --> 00:07:53,280
how we got access to

189
00:07:53,280 --> 00:07:55,360
a unicorn's private code base by

190
00:07:55,360 --> 00:07:58,479
analyzing millions of apps so surely

191
00:07:58,479 --> 00:08:00,720
millions of and analyzing millions of

192
00:08:00,720 --> 00:08:03,599
ass apps is like basically not it's

193
00:08:03,599 --> 00:08:06,319
something a person cannot do manually

194
00:08:06,319 --> 00:08:09,039
it's a herculean task manually so we

195
00:08:09,039 --> 00:08:11,919
automated this process and we did a lot

196
00:08:11,919 --> 00:08:14,639
of analysis on our heart and i'd like to

197
00:08:14,639 --> 00:08:17,440
give it over to arshad my teammate

198
00:08:17,440 --> 00:08:19,280
who's going to explain about this part a

199
00:08:19,280 --> 00:08:22,919
little more in detail

200
00:08:32,320 --> 00:08:36,279
why should i believe you're still

201
00:08:43,839 --> 00:08:46,880
uh hello

202
00:08:48,880 --> 00:08:51,570
you can hear me

203
00:08:51,570 --> 00:08:53,680
[Music]

204
00:08:53,680 --> 00:08:55,839
so uh till this point like many

205
00:08:55,839 --> 00:08:58,080
questions would be arising that how did

206
00:08:58,080 --> 00:09:00,399
you start scanning the code base of this

207
00:09:00,399 --> 00:09:03,360
app how did you uh reach to the

208
00:09:03,360 --> 00:09:06,880
secret at the first phase first place so

209
00:09:06,880 --> 00:09:09,920
uh let me tell you a story uh one day

210
00:09:09,920 --> 00:09:13,519
our security team out of curiosity were

211
00:09:13,519 --> 00:09:14,880
doing a

212
00:09:14,880 --> 00:09:18,240
study on secrets that can be found on

213
00:09:18,240 --> 00:09:20,000
github public reports

214
00:09:20,000 --> 00:09:22,560
and to our surprise we found

215
00:09:22,560 --> 00:09:25,200
like there were many secrets that people

216
00:09:25,200 --> 00:09:26,959
have just hard coded in the public

217
00:09:26,959 --> 00:09:30,240
airport like stripe keys razer pickies

218
00:09:30,240 --> 00:09:33,200
aws credentials and assets like firebase

219
00:09:33,200 --> 00:09:34,240
urls

220
00:09:34,240 --> 00:09:36,640
an aws cognitor url

221
00:09:36,640 --> 00:09:39,680
so this was like a big mistake that the

222
00:09:39,680 --> 00:09:42,320
developer have done on public reports so

223
00:09:42,320 --> 00:09:44,560
then we thought uh these are public

224
00:09:44,560 --> 00:09:47,120
reports which anyone has access to so

225
00:09:47,120 --> 00:09:49,680
what about the source code that no one

226
00:09:49,680 --> 00:09:52,320
has access to like mobile apps

227
00:09:52,320 --> 00:09:53,279
so

228
00:09:53,279 --> 00:09:56,399
then after doing some initial research

229
00:09:56,399 --> 00:09:58,240
uh we did not

230
00:09:58,240 --> 00:10:01,600
find any good tool that can just like

231
00:10:01,600 --> 00:10:05,200
tell us about a secrets that are being

232
00:10:05,200 --> 00:10:08,320
leaked across the mobile app so then for

233
00:10:08,320 --> 00:10:10,560
analyzing the mobile apps we build our

234
00:10:10,560 --> 00:10:12,480
own security searches

235
00:10:12,480 --> 00:10:14,959
so here are the steps that we followed

236
00:10:14,959 --> 00:10:17,279
to build this mobile app scan

237
00:10:17,279 --> 00:10:20,000
so first of all we collected the data

238
00:10:20,000 --> 00:10:22,399
second step was we decompiled

239
00:10:22,399 --> 00:10:23,839
the

240
00:10:23,839 --> 00:10:26,000
app that we collected into readable

241
00:10:26,000 --> 00:10:29,120
source code third was we created a set

242
00:10:29,120 --> 00:10:31,200
of rules

243
00:10:31,200 --> 00:10:32,399
of rejects

244
00:10:32,399 --> 00:10:35,680
so to identify the hard coded tokens and

245
00:10:35,680 --> 00:10:37,600
the third was to

246
00:10:37,600 --> 00:10:41,360
build a interface where we can just do a

247
00:10:41,360 --> 00:10:44,000
rejects or like keyword search and it

248
00:10:44,000 --> 00:10:46,399
will return you all the results on all

249
00:10:46,399 --> 00:10:49,760
the source code that we have collected

250
00:10:49,760 --> 00:10:50,720
so

251
00:10:50,720 --> 00:10:53,279
let's deep dive into all the steps that

252
00:10:53,279 --> 00:10:56,720
we followed to build the system

253
00:10:57,120 --> 00:10:59,279
so the first step was collector of

254
00:10:59,279 --> 00:11:00,480
mobile apps

255
00:11:00,480 --> 00:11:02,880
we thought can we build a

256
00:11:02,880 --> 00:11:05,680
system in in which people can just come

257
00:11:05,680 --> 00:11:08,640
upload their mobile apps and they can

258
00:11:08,640 --> 00:11:12,320
get their security reports

259
00:11:12,320 --> 00:11:14,720
and just know the secrets and issues in

260
00:11:14,720 --> 00:11:17,519
their mobile app so user submission was

261
00:11:17,519 --> 00:11:19,360
the first source that we collected the

262
00:11:19,360 --> 00:11:22,480
data from the second store source was we

263
00:11:22,480 --> 00:11:25,519
collected uh the android apps across the

264
00:11:25,519 --> 00:11:28,560
internet so that included uh apps that

265
00:11:28,560 --> 00:11:30,640
were being downloaded from play store

266
00:11:30,640 --> 00:11:33,920
and as well as third-party app stores so

267
00:11:33,920 --> 00:11:36,240
while we were crawling the play stores

268
00:11:36,240 --> 00:11:38,320
we faced many difficulties like

269
00:11:38,320 --> 00:11:40,480
sometimes we were not able to

270
00:11:40,480 --> 00:11:43,120
uh download apps from certain countries

271
00:11:43,120 --> 00:11:45,279
or sometimes they were refused like some

272
00:11:45,279 --> 00:11:47,519
apps were not compatible with certain

273
00:11:47,519 --> 00:11:50,480
devices but we were able to overcome all

274
00:11:50,480 --> 00:11:51,760
those uh

275
00:11:51,760 --> 00:11:52,800
problems

276
00:11:52,800 --> 00:11:55,200
and the reason we downloaded the apps

277
00:11:55,200 --> 00:11:57,680
from third party app stores was because

278
00:11:57,680 --> 00:12:00,560
we wanted to analyze uh the fake apps

279
00:12:00,560 --> 00:12:02,959
that have been wandering around

280
00:12:02,959 --> 00:12:05,440
on these third-party app stores because

281
00:12:05,440 --> 00:12:07,360
these apps on third-party app stores

282
00:12:07,360 --> 00:12:10,399
contains malwares or sometimes

283
00:12:10,399 --> 00:12:12,240
people have just tampered the

284
00:12:12,240 --> 00:12:14,880
certificate and uploaded the apps in the

285
00:12:14,880 --> 00:12:16,079
system

286
00:12:16,079 --> 00:12:16,800
so

287
00:12:16,800 --> 00:12:19,440
currently we have about a million app

288
00:12:19,440 --> 00:12:22,839
that has been indexed in our system

289
00:12:22,839 --> 00:12:25,920
so after collecting the mobile app we

290
00:12:25,920 --> 00:12:27,760
thought uh

291
00:12:27,760 --> 00:12:31,279
let's like decompile those apps uh into

292
00:12:31,279 --> 00:12:34,000
a readable source code so to do that we

293
00:12:34,000 --> 00:12:36,959
used an open source android tool called

294
00:12:36,959 --> 00:12:40,560
zx so zx it helps you to

295
00:12:40,560 --> 00:12:43,600
decompile delve by code into java

296
00:12:43,600 --> 00:12:45,760
classes from uh

297
00:12:45,760 --> 00:12:47,279
apk and

298
00:12:47,279 --> 00:12:48,399
dex files

299
00:12:48,399 --> 00:12:52,800
it also helps you to decode android dot

300
00:12:52,800 --> 00:12:56,160
manifest dot android manifest xml file

301
00:12:56,160 --> 00:12:59,839
so after decompile all these apps we

302
00:12:59,839 --> 00:13:00,959
thought let's

303
00:13:00,959 --> 00:13:03,360
we stored all these apps into a file

304
00:13:03,360 --> 00:13:04,399
system

305
00:13:04,399 --> 00:13:05,200
so

306
00:13:05,200 --> 00:13:07,200
while we were storing these apps on file

307
00:13:07,200 --> 00:13:10,720
system uh these uh apps

308
00:13:10,720 --> 00:13:12,399
size is like

309
00:13:12,399 --> 00:13:13,440
uh

310
00:13:13,440 --> 00:13:15,200
apps

311
00:13:15,200 --> 00:13:17,839
get increased uh due to

312
00:13:17,839 --> 00:13:19,920
uh like many things that are there in

313
00:13:19,920 --> 00:13:22,240
these apps so we did some optimization

314
00:13:22,240 --> 00:13:26,000
on that pass apart as well

315
00:13:26,560 --> 00:13:27,279
so

316
00:13:27,279 --> 00:13:30,480
after uh decompilation we thought uh

317
00:13:30,480 --> 00:13:32,079
let's uh

318
00:13:32,079 --> 00:13:34,560
how do we find the secrets on these uh

319
00:13:34,560 --> 00:13:38,160
source code uh that we have so for that

320
00:13:38,160 --> 00:13:41,839
we started building uh reject says uh

321
00:13:41,839 --> 00:13:43,279
that can be found

322
00:13:43,279 --> 00:13:44,880
uh

323
00:13:44,880 --> 00:13:46,720
on on the source code

324
00:13:46,720 --> 00:13:48,959
so for building those rejections we

325
00:13:48,959 --> 00:13:50,560
thought let's like

326
00:13:50,560 --> 00:13:51,920
maybe analyze

327
00:13:51,920 --> 00:13:54,320
uh some

328
00:13:54,320 --> 00:13:58,079
mobile apps and see what kind of uh keys

329
00:13:58,079 --> 00:14:01,360
usually do developer uses a developer

330
00:14:01,360 --> 00:14:03,360
use in the mobile apps

331
00:14:03,360 --> 00:14:04,959
so

332
00:14:04,959 --> 00:14:06,639
after this we

333
00:14:06,639 --> 00:14:08,880
started building the jigsaws and there

334
00:14:08,880 --> 00:14:11,120
were many difficulties that we faced

335
00:14:11,120 --> 00:14:13,040
while building those rejections like

336
00:14:13,040 --> 00:14:15,199
sometimes the length of the

337
00:14:15,199 --> 00:14:18,000
key was not fixed other time we were not

338
00:14:18,000 --> 00:14:21,199
able to even find the rejections for it

339
00:14:21,199 --> 00:14:22,079
so

340
00:14:22,079 --> 00:14:23,839
uh for those

341
00:14:23,839 --> 00:14:25,600
for which we did not find the rejections

342
00:14:25,600 --> 00:14:28,959
for we went to open source repositories

343
00:14:28,959 --> 00:14:31,839
like iphone and truffle

344
00:14:31,839 --> 00:14:35,760
after we had all the digixes in

345
00:14:35,760 --> 00:14:37,600
in a place uh

346
00:14:37,600 --> 00:14:40,399
we took all those rejections or we took

347
00:14:40,399 --> 00:14:42,800
all the keys and just put up all the

348
00:14:42,800 --> 00:14:44,880
keys in an android file

349
00:14:44,880 --> 00:14:46,480
uh

350
00:14:46,480 --> 00:14:47,199
so

351
00:14:47,199 --> 00:14:50,000
apart from putting it uh specifically in

352
00:14:50,000 --> 00:14:53,760
a class we put it all the keys in uh

353
00:14:53,760 --> 00:14:56,240
android dot manifest file java classes

354
00:14:56,240 --> 00:14:58,480
and then then after putting all those

355
00:14:58,480 --> 00:15:02,959
keys we com compile the android app and

356
00:15:02,959 --> 00:15:04,160
uh we put

357
00:15:04,160 --> 00:15:06,000
the android app through our system so

358
00:15:06,000 --> 00:15:08,160
that we can see whether we are able to

359
00:15:08,160 --> 00:15:10,720
detect the particular key or not using

360
00:15:10,720 --> 00:15:13,120
our rejections and that that also help

361
00:15:13,120 --> 00:15:16,240
us minimizing the false quality

362
00:15:16,240 --> 00:15:17,279
so

363
00:15:17,279 --> 00:15:20,480
after collecting the apps decompiling it

364
00:15:20,480 --> 00:15:22,240
and building the rejects

365
00:15:22,240 --> 00:15:24,800
rejects for all the

366
00:15:24,800 --> 00:15:26,560
keys we went

367
00:15:26,560 --> 00:15:29,199
and we automated the process

368
00:15:29,199 --> 00:15:31,120
so

369
00:15:31,120 --> 00:15:32,880
we wanted to provide

370
00:15:32,880 --> 00:15:35,680
an interface where people can come just

371
00:15:35,680 --> 00:15:38,320
do a keyword or reject search and it

372
00:15:38,320 --> 00:15:41,360
will just list out all the results uh

373
00:15:41,360 --> 00:15:44,160
that we found using our source code

374
00:15:44,160 --> 00:15:45,360
so

375
00:15:45,360 --> 00:15:48,240
and this is how we were able to reach to

376
00:15:48,240 --> 00:15:51,600
the unicorns uh github token using the

377
00:15:51,600 --> 00:15:54,560
rejects that we built for get back token

378
00:15:54,560 --> 00:15:56,959
so this is the one you this is only the

379
00:15:56,959 --> 00:16:00,079
one use case that we found uh where

380
00:16:00,079 --> 00:16:02,079
using a github token you were able to

381
00:16:02,079 --> 00:16:05,839
reach unicorn's private uh code base so

382
00:16:05,839 --> 00:16:08,399
imagine what can happen with

383
00:16:08,399 --> 00:16:11,600
all other keys that are hardcoded in the

384
00:16:11,600 --> 00:16:12,720
source code

385
00:16:12,720 --> 00:16:15,279
so let me call mana on state

386
00:16:15,279 --> 00:16:16,800
he'll uh

387
00:16:16,800 --> 00:16:18,720
give you the

388
00:16:18,720 --> 00:16:21,440
uh insights of impact of these secret

389
00:16:21,440 --> 00:16:23,519
leaks and why do developers do such

390
00:16:23,519 --> 00:16:26,000
mistakes

391
00:16:30,639 --> 00:16:32,480
well let's take a deep dive into github

392
00:16:32,480 --> 00:16:33,920
pids

393
00:16:33,920 --> 00:16:36,720
so we were able to find 159 private

394
00:16:36,720 --> 00:16:39,680
repositories from 151 github tokens that

395
00:16:39,680 --> 00:16:41,759
we found by analyzing mobile apps that

396
00:16:41,759 --> 00:16:43,680
had installs ranging from 100 to 10

397
00:16:43,680 --> 00:16:45,680
million on the play store

398
00:16:45,680 --> 00:16:47,839
this may lead to leaking or secrets like

399
00:16:47,839 --> 00:16:49,600
database configurations

400
00:16:49,600 --> 00:16:51,759
which in turn lead to decline in brand

401
00:16:51,759 --> 00:16:54,639
confidence and imminent financial losses

402
00:16:54,639 --> 00:16:56,399
by the way all organizations involved

403
00:16:56,399 --> 00:16:57,759
with the upper leagues were informed of

404
00:16:57,759 --> 00:16:59,040
the same and corrective measures have

405
00:16:59,040 --> 00:17:02,399
been taken by them

406
00:17:02,639 --> 00:17:04,720
well we can like but numbers definitely

407
00:17:04,720 --> 00:17:06,720
won't till now we've been able to find

408
00:17:06,720 --> 00:17:08,959
over 1.6 million hardcoded sensitive

409
00:17:08,959 --> 00:17:11,359
tokens as you can see in the pie chart

410
00:17:11,359 --> 00:17:13,199
some of the prominent ones are firebase

411
00:17:13,199 --> 00:17:15,280
and aws readable writable buckets

412
00:17:15,280 --> 00:17:19,839
dropbox api keys facebook secrets etc

413
00:17:20,160 --> 00:17:22,240
now that we materialize things a bit by

414
00:17:22,240 --> 00:17:24,240
seeing the enormous number of leads and

415
00:17:24,240 --> 00:17:26,400
move ahead of the abstract part

416
00:17:26,400 --> 00:17:28,480
let's now take a delve into the impact

417
00:17:28,480 --> 00:17:30,400
of these keys and

418
00:17:30,400 --> 00:17:31,600
what

419
00:17:31,600 --> 00:17:34,960
malicious actors can do with them

420
00:17:34,960 --> 00:17:36,880
the best way to make you all feel the

421
00:17:36,880 --> 00:17:39,520
intensity would be able uh would be to

422
00:17:39,520 --> 00:17:41,760
take you through some examples

423
00:17:41,760 --> 00:17:43,360
well let's take up email automation

424
00:17:43,360 --> 00:17:44,559
first

425
00:17:44,559 --> 00:17:46,400
there are email automation services like

426
00:17:46,400 --> 00:17:49,200
sendgrid made gym mail gun etc

427
00:17:49,200 --> 00:17:50,799
let's analyze what happens when the

428
00:17:50,799 --> 00:17:52,640
secret token for one of these services

429
00:17:52,640 --> 00:17:53,919
gets leaked

430
00:17:53,919 --> 00:17:55,919
the attacker gets access to read and

431
00:17:55,919 --> 00:17:57,360
send emails from all the accounts

432
00:17:57,360 --> 00:17:59,679
associated with that particular key

433
00:17:59,679 --> 00:18:01,440
using this key the attacker might be

434
00:18:01,440 --> 00:18:03,679
able to start a phishing campaign from

435
00:18:03,679 --> 00:18:05,280
the official mailing channels of that

436
00:18:05,280 --> 00:18:07,600
organization which which generally would

437
00:18:07,600 --> 00:18:08,880
be trusted by the customers or the

438
00:18:08,880 --> 00:18:10,640
consumer

439
00:18:10,640 --> 00:18:12,400
also the attacker might be able to gain

440
00:18:12,400 --> 00:18:14,160
sensitive and personally identifiable

441
00:18:14,160 --> 00:18:16,640
information like names emails contact

442
00:18:16,640 --> 00:18:20,160
numbers etc of those customers

443
00:18:20,160 --> 00:18:22,320
similarly if the attacker gets access to

444
00:18:22,320 --> 00:18:24,160
tokens for services like razer bay

445
00:18:24,160 --> 00:18:26,720
stripe etc which are payment processing

446
00:18:26,720 --> 00:18:28,799
tools they might be able to do very

447
00:18:28,799 --> 00:18:30,000
nasty stuff

448
00:18:30,000 --> 00:18:31,679
that might tarnish the reputation of the

449
00:18:31,679 --> 00:18:33,360
organization and further cause financial

450
00:18:33,360 --> 00:18:34,720
damage as well

451
00:18:34,720 --> 00:18:36,240
other than that they might be able to

452
00:18:36,240 --> 00:18:37,919
gain access to transaction details of

453
00:18:37,919 --> 00:18:40,000
the customer and organization like

454
00:18:40,000 --> 00:18:43,520
credit and debit card information

455
00:18:43,520 --> 00:18:44,960
well now i think all of you would have

456
00:18:44,960 --> 00:18:46,480
gotten a gist of how frightful the

457
00:18:46,480 --> 00:18:49,039
consequences of such leaks are therefore

458
00:18:49,039 --> 00:18:50,880
it would be a good idea to talk about

459
00:18:50,880 --> 00:18:52,720
why developers do this

460
00:18:52,720 --> 00:18:54,480
well to be able to answer this question

461
00:18:54,480 --> 00:18:56,559
in a succinct manner we'll have to look

462
00:18:56,559 --> 00:18:58,320
at some common problems faced by android

463
00:18:58,320 --> 00:19:01,039
app developers

464
00:19:01,200 --> 00:19:03,360
we all know how much of a pain it is to

465
00:19:03,360 --> 00:19:05,760
focus on building security and crcd

466
00:19:05,760 --> 00:19:07,440
pipelines instead of building the actual

467
00:19:07,440 --> 00:19:10,799
application and have divert efforts

468
00:19:10,799 --> 00:19:12,799
other than that there is an issue of

469
00:19:12,799 --> 00:19:15,200
awareness many developers think that it

470
00:19:15,200 --> 00:19:16,799
is okay for them to leave hard-coded

471
00:19:16,799 --> 00:19:18,559
tokens in their source code as it is

472
00:19:18,559 --> 00:19:21,039
gonna be compiled into an apk before

473
00:19:21,039 --> 00:19:22,160
publishing

474
00:19:22,160 --> 00:19:24,160
but as a cyber security community it is

475
00:19:24,160 --> 00:19:26,480
our job to make them aware that such is

476
00:19:26,480 --> 00:19:28,000
not the case

477
00:19:28,000 --> 00:19:29,840
also companies can sometimes feel that

478
00:19:29,840 --> 00:19:31,440
money is better spent in other domains

479
00:19:31,440 --> 00:19:32,799
rather than spending it on proper

480
00:19:32,799 --> 00:19:35,600
security testing on their mobile apps

481
00:19:35,600 --> 00:19:37,039
one example would be an app called

482
00:19:37,039 --> 00:19:39,360
clubhouse which became very popular but

483
00:19:39,360 --> 00:19:40,640
it didn't implement end-to-end

484
00:19:40,640 --> 00:19:42,799
encryption on their rtc packets thus any

485
00:19:42,799 --> 00:19:44,240
attacker could perform a man in the

486
00:19:44,240 --> 00:19:45,679
middle attack and snoop on private

487
00:19:45,679 --> 00:19:48,240
conversation

488
00:19:48,480 --> 00:19:49,760
well now that we've discussed the

489
00:19:49,760 --> 00:19:51,280
problem let's go through some of the

490
00:19:51,280 --> 00:19:53,760
solutions for the developers

491
00:19:53,760 --> 00:19:55,679
scoping is the most primitive method of

492
00:19:55,679 --> 00:19:57,600
stepping up the security of your app you

493
00:19:57,600 --> 00:19:59,520
can do this by assigning the secret keys

494
00:19:59,520 --> 00:20:01,280
only the necessary permissions so that

495
00:20:01,280 --> 00:20:03,280
even if the attackers get access to that

496
00:20:03,280 --> 00:20:07,120
key the damage is controlled and limited

497
00:20:07,120 --> 00:20:09,039
using of environment variables to store

498
00:20:09,039 --> 00:20:10,720
keys in another solution so that they

499
00:20:10,720 --> 00:20:12,720
are not hard-coded in the code but

500
00:20:12,720 --> 00:20:14,400
rather embedded into the operating

501
00:20:14,400 --> 00:20:16,320
system and relatively out of the reach

502
00:20:16,320 --> 00:20:17,840
from the attackers

503
00:20:17,840 --> 00:20:19,440
other than that

504
00:20:19,440 --> 00:20:22,400
making use of git hooks like husky to

505
00:20:22,400 --> 00:20:24,559
prevent yourself or anyone in your team

506
00:20:24,559 --> 00:20:27,760
to even push secrets by mistake

507
00:20:27,760 --> 00:20:29,600
also you can make use of walls like

508
00:20:29,600 --> 00:20:31,440
hashicorp world to safely store all of

509
00:20:31,440 --> 00:20:33,360
your secrets

510
00:20:33,360 --> 00:20:35,520
most important of all is building a very

511
00:20:35,520 --> 00:20:37,280
robust security pipeline so that your

512
00:20:37,280 --> 00:20:39,840
application is secure from development

513
00:20:39,840 --> 00:20:43,039
till the time you publish it

514
00:20:44,159 --> 00:20:45,600
now i would like to discuss some of our

515
00:20:45,600 --> 00:20:47,760
future plans till now our research was

516
00:20:47,760 --> 00:20:49,039
more centered towards android

517
00:20:49,039 --> 00:20:51,039
application but in the future we aim to

518
00:20:51,039 --> 00:20:52,799
expand our scope to include client-side

519
00:20:52,799 --> 00:20:57,039
javascript and ios applications as well

520
00:20:57,280 --> 00:20:59,760
lastly i would like to mention

521
00:20:59,760 --> 00:21:01,200
a tool

522
00:21:01,200 --> 00:21:03,919
which is the visual ocean cli

523
00:21:03,919 --> 00:21:05,440
developed by us so that the community

524
00:21:05,440 --> 00:21:07,360
can leverage the asset data extracted

525
00:21:07,360 --> 00:21:09,760
after analyzing millions of mobile apps

526
00:21:09,760 --> 00:21:11,760
if you want to try out for yourself and

527
00:21:11,760 --> 00:21:13,600
see the security score of any mobile app

528
00:21:13,600 --> 00:21:15,440
currently installed on your phone we

529
00:21:15,440 --> 00:21:16,559
would encourage you to go to

530
00:21:16,559 --> 00:21:18,320
bivigill.com and search for the app

531
00:21:18,320 --> 00:21:20,559
there

532
00:21:21,120 --> 00:21:22,799
as you all know that the first steps

533
00:21:22,799 --> 00:21:24,799
towards change is awareness

534
00:21:24,799 --> 00:21:26,640
with with that thought we invite any

535
00:21:26,640 --> 00:21:31,240
questions that the audience might have

536
00:21:34,240 --> 00:21:38,319
[Applause]

