1
00:14:16,480 --> 00:14:18,880
hello

2
00:14:26,399 --> 00:14:27,920
good morning

3
00:14:27,920 --> 00:14:30,720
security fans um

4
00:14:30,720 --> 00:14:33,360
welcome to the rumsferd room my name is

5
00:14:33,360 --> 00:14:35,440
jenesco and i will be the mc for the

6
00:14:35,440 --> 00:14:37,440
first two talks today

7
00:14:37,440 --> 00:14:40,240
and first up uh well let's let's talk

8
00:14:40,240 --> 00:14:42,079
about the first talk so we can get

9
00:14:42,079 --> 00:14:43,040
rolling

10
00:14:43,040 --> 00:14:45,839
um is everything in order

11
00:14:45,839 --> 00:14:47,760
yeah everything good okay

12
00:14:47,760 --> 00:14:50,639
so as security professionals

13
00:14:50,639 --> 00:14:52,800
we always know that there has to be a

14
00:14:52,800 --> 00:14:54,959
balance between security

15
00:14:54,959 --> 00:14:56,800
and usability

16
00:14:56,800 --> 00:15:00,959
and the first talk today explores the

17
00:15:00,959 --> 00:15:03,360
challenge of usability within the space

18
00:15:03,360 --> 00:15:06,160
of multi-factor authentication now we

19
00:15:06,160 --> 00:15:07,519
all know that multi-factor

20
00:15:07,519 --> 00:15:09,519
authentication is one of the best ways

21
00:15:09,519 --> 00:15:11,199
to prevent an attacker from being able

22
00:15:11,199 --> 00:15:13,199
to exploit

23
00:15:13,199 --> 00:15:15,600
just a simple password system but you

24
00:15:15,600 --> 00:15:16,880
have to think about all of the different

25
00:15:16,880 --> 00:15:18,880
ways that you can do multi-factor right

26
00:15:18,880 --> 00:15:21,600
you have hardware tokens you have apps

27
00:15:21,600 --> 00:15:24,399
on your phones you have actual sms

28
00:15:24,399 --> 00:15:26,480
but there are problems with that

29
00:15:26,480 --> 00:15:28,720
there's a definite usability issue and

30
00:15:28,720 --> 00:15:32,160
so today you're going to hear a story of

31
00:15:32,160 --> 00:15:33,519
how

32
00:15:33,519 --> 00:15:35,680
when usability met

33
00:15:35,680 --> 00:15:38,079
to fa and i'm going to have to read the

34
00:15:38,079 --> 00:15:39,440
list of the authors for this because it

35
00:15:39,440 --> 00:15:41,199
was a team effort for this

36
00:15:41,199 --> 00:15:43,440
it's so it's going to be hyun su kim

37
00:15:43,440 --> 00:15:45,839
juno li ki hong heo

38
00:15:45,839 --> 00:15:49,199
sang kyo cha em yong gyeonshin

39
00:15:49,199 --> 00:15:51,199
this is a group from kais which is the

40
00:15:51,199 --> 00:15:53,440
korean advanced institute of science and

41
00:15:53,440 --> 00:15:54,480
technology

42
00:15:54,480 --> 00:15:59,120
so sit back relax and hear the story

43
00:16:00,720 --> 00:16:01,759
hey

44
00:16:01,759 --> 00:16:05,440
thanks for the great introductions

45
00:16:05,440 --> 00:16:08,920
can you hear me

46
00:16:10,160 --> 00:16:11,440
can you hear me

47
00:16:11,440 --> 00:16:14,000
i see great thanks

48
00:16:14,000 --> 00:16:16,560
so again thanks for the introductions

49
00:16:16,560 --> 00:16:19,440
and this is sensu kim from christ

50
00:16:19,440 --> 00:16:22,320
in this talk i'll present about how hard

51
00:16:22,320 --> 00:16:24,160
it is to strike a balance between

52
00:16:24,160 --> 00:16:26,240
usability and security

53
00:16:26,240 --> 00:16:29,040
mainly in two-factor authentication

54
00:16:29,040 --> 00:16:31,680
the title is when usability meant to fa

55
00:16:31,680 --> 00:16:33,440
and this is a joint work with

56
00:16:33,440 --> 00:16:36,720
a group of our team

57
00:16:36,720 --> 00:16:38,800
and we are all from christ and if you

58
00:16:38,800 --> 00:16:41,040
heard of kaist that's great

59
00:16:41,040 --> 00:16:44,639
otherwise uh let us begin with the

60
00:16:44,639 --> 00:16:46,800
introducing ourselves

61
00:16:46,800 --> 00:16:49,839
so we're currently in korea far away

62
00:16:49,839 --> 00:16:52,480
from munich as shown on the map

63
00:16:52,480 --> 00:16:54,880
in korea and munich are about 13 hours

64
00:16:54,880 --> 00:16:57,519
far away in a single hub flight

65
00:16:57,519 --> 00:16:59,440
so considering ourselves as a physically

66
00:16:59,440 --> 00:17:00,880
distant party

67
00:17:00,880 --> 00:17:02,560
we really appreciate having a chance to

68
00:17:02,560 --> 00:17:05,359
present in the event online

69
00:17:05,359 --> 00:17:07,119
and the picture is an overview of our

70
00:17:07,119 --> 00:17:09,520
campus where you can see many buildings

71
00:17:09,520 --> 00:17:11,439
and grasses

72
00:17:11,439 --> 00:17:13,520
this is a picture of blossoms in full

73
00:17:13,520 --> 00:17:15,439
bloom in the campus

74
00:17:15,439 --> 00:17:16,880
last spring

75
00:17:16,880 --> 00:17:18,240
and this is the building that we are

76
00:17:18,240 --> 00:17:20,720
currently in with uh

77
00:17:20,720 --> 00:17:23,119
greenland

78
00:17:23,119 --> 00:17:25,359
yeah and kais is one of the leading

79
00:17:25,359 --> 00:17:27,760
research institute in korea

80
00:17:27,760 --> 00:17:29,679
so the name stands for

81
00:17:29,679 --> 00:17:31,919
korea advanced institute of science and

82
00:17:31,919 --> 00:17:33,360
technology

83
00:17:33,360 --> 00:17:36,240
the qs world ranking of christ is 41

84
00:17:36,240 --> 00:17:38,320
which is moderately high

85
00:17:38,320 --> 00:17:40,880
and especially in computer security

86
00:17:40,880 --> 00:17:43,679
kais marks the fourth in asia and 35th

87
00:17:43,679 --> 00:17:45,360
in the world

88
00:17:45,360 --> 00:17:47,360
so that being said one may imagine how

89
00:17:47,360 --> 00:17:49,840
tempting it is to launch a cyber attacks

90
00:17:49,840 --> 00:17:51,200
towards kaist

91
00:17:51,200 --> 00:17:53,200
as there are a bunch of classified

92
00:17:53,200 --> 00:17:55,200
experimental results and leading-edge

93
00:17:55,200 --> 00:17:57,280
research in progress

94
00:17:57,280 --> 00:17:59,120
indeed there has been and still

95
00:17:59,120 --> 00:18:01,200
happening attempts to exploit the id

96
00:18:01,200 --> 00:18:04,320
service of cheist

97
00:18:04,320 --> 00:18:06,960
and some black hats hackers managed to

98
00:18:06,960 --> 00:18:08,799
leak the privacy information from

99
00:18:08,799 --> 00:18:10,880
libraries electronic research note

100
00:18:10,880 --> 00:18:12,400
system

101
00:18:12,400 --> 00:18:15,280
from the attack more than 30 thousand

102
00:18:15,280 --> 00:18:17,679
members personal information were put in

103
00:18:17,679 --> 00:18:19,039
jeopardy

104
00:18:19,039 --> 00:18:20,720
the incident was considered to be

105
00:18:20,720 --> 00:18:22,720
serious security bridge and the kaiser

106
00:18:22,720 --> 00:18:24,799
administration decided to enhance the

107
00:18:24,799 --> 00:18:28,080
security overall

108
00:18:28,080 --> 00:18:30,400
so through through the postmortem kais

109
00:18:30,400 --> 00:18:32,160
decided to adopt two-factor

110
00:18:32,160 --> 00:18:34,640
authentication that is the well-known

111
00:18:34,640 --> 00:18:37,039
authentication mechanism that requires

112
00:18:37,039 --> 00:18:40,080
two proofs to identify a single user

113
00:18:40,080 --> 00:18:41,840
i'm pretty sure that most of you have

114
00:18:41,840 --> 00:18:44,720
may have seen and already experienced

115
00:18:44,720 --> 00:18:46,880
how it works when you're using service

116
00:18:46,880 --> 00:18:47,679
from

117
00:18:47,679 --> 00:18:50,400
maybe google or github

118
00:18:50,400 --> 00:18:52,240
the authentication mechanism basically

119
00:18:52,240 --> 00:18:54,559
requires two distinct proofs where one

120
00:18:54,559 --> 00:18:57,039
is what the user knows such as password

121
00:18:57,039 --> 00:18:58,960
or pen number

122
00:18:58,960 --> 00:19:01,039
and the other proof shall be what the

123
00:19:01,039 --> 00:19:03,440
user physically possesses for example

124
00:19:03,440 --> 00:19:06,640
your mobile device bank card or even a

125
00:19:06,640 --> 00:19:09,360
usb stick

126
00:19:09,760 --> 00:19:12,000
while it seems quite trivial to adopt

127
00:19:12,000 --> 00:19:15,280
2fa mechanism throughout the institute

128
00:19:15,280 --> 00:19:16,720
the problem was to consider the

129
00:19:16,720 --> 00:19:19,840
usability of 2fa at the same time

130
00:19:19,840 --> 00:19:21,760
since cass members include aged

131
00:19:21,760 --> 00:19:24,080
professors who usually are not familiar

132
00:19:24,080 --> 00:19:26,240
with complicated procedures

133
00:19:26,240 --> 00:19:29,520
to log into a certain simple service

134
00:19:29,520 --> 00:19:32,000
the fact is that they think toefe comes

135
00:19:32,000 --> 00:19:34,000
with no good and merely harms the

136
00:19:34,000 --> 00:19:36,559
usability

137
00:19:36,559 --> 00:19:38,960
the security team in kais had to come up

138
00:19:38,960 --> 00:19:41,360
with a secure 2fa that is also

139
00:19:41,360 --> 00:19:45,199
convenient to use at the same time

140
00:19:45,600 --> 00:19:48,559
so here's how it works

141
00:19:48,559 --> 00:19:50,400
so

142
00:19:50,400 --> 00:19:52,400
here we demonstrate how the invented 2fa

143
00:19:52,400 --> 00:19:54,480
system works and they call it easy

144
00:19:54,480 --> 00:19:57,600
authentication as marked with red box

145
00:19:57,600 --> 00:19:59,679
and all you need to do

146
00:19:59,679 --> 00:20:00,480
is

147
00:20:00,480 --> 00:20:01,360
type

148
00:20:01,360 --> 00:20:02,960
your id

149
00:20:02,960 --> 00:20:05,520
which is for example beside munich works

150
00:20:05,520 --> 00:20:07,520
with rocks which is obvious

151
00:20:07,520 --> 00:20:09,840
then click the button

152
00:20:09,840 --> 00:20:12,240
so the pop-up window shows up saying the

153
00:20:12,240 --> 00:20:14,159
authentication is in

154
00:20:14,159 --> 00:20:16,640
progress

155
00:20:16,880 --> 00:20:19,360
then a push alarm arrives to the user's

156
00:20:19,360 --> 00:20:20,400
mobile device

157
00:20:20,400 --> 00:20:22,000
saying attempt for the easy

158
00:20:22,000 --> 00:20:25,919
authentication is being detected

159
00:20:25,919 --> 00:20:28,000
if you click on the push alarm the

160
00:20:28,000 --> 00:20:30,720
custom app is launched and ask for the

161
00:20:30,720 --> 00:20:32,840
face id or touch id

162
00:20:32,840 --> 00:20:35,120
immediately if success the user is

163
00:20:35,120 --> 00:20:36,799
authenticated

164
00:20:36,799 --> 00:20:38,400
and yeah that that is all for

165
00:20:38,400 --> 00:20:40,480
demonstrating how the system works and

166
00:20:40,480 --> 00:20:42,159
i'm pretty sure most of you may have

167
00:20:42,159 --> 00:20:44,320
already found out how sloppy the system

168
00:20:44,320 --> 00:20:47,799
is being designed

169
00:20:48,080 --> 00:20:49,840
then about several months after the

170
00:20:49,840 --> 00:20:52,880
suspicious 2fa was launched in kaist

171
00:20:52,880 --> 00:20:55,520
graduate school of information security

172
00:20:55,520 --> 00:20:57,200
there was an exciting course going on

173
00:20:57,200 --> 00:20:59,760
called binary code analysis and secure

174
00:20:59,760 --> 00:21:00,840
software

175
00:21:00,840 --> 00:21:03,120
systems as the name of the course

176
00:21:03,120 --> 00:21:04,400
indicates

177
00:21:04,400 --> 00:21:06,480
students were expected to learn binary

178
00:21:06,480 --> 00:21:08,720
level program analysis techniques to

179
00:21:08,720 --> 00:21:11,280
achieve the end goal which is secure

180
00:21:11,280 --> 00:21:13,520
software system

181
00:21:13,520 --> 00:21:15,600
and those pro hackers around the campus

182
00:21:15,600 --> 00:21:18,080
who usually solve hard ctf problems as a

183
00:21:18,080 --> 00:21:22,240
hobby gathered to take the course

184
00:21:22,240 --> 00:21:24,720
and one day the instructor of the course

185
00:21:24,720 --> 00:21:28,000
professor cha sankocha announced to meet

186
00:21:28,000 --> 00:21:30,240
her midterm

187
00:21:30,240 --> 00:21:32,080
which was not simply testing one's

188
00:21:32,080 --> 00:21:33,600
knowledge

189
00:21:33,600 --> 00:21:35,360
and the students were asked to find the

190
00:21:35,360 --> 00:21:37,200
vulnerabilities in christ's easy

191
00:21:37,200 --> 00:21:40,240
authentication service

192
00:21:40,240 --> 00:21:43,120
at the same time he explicitly mentioned

193
00:21:43,120 --> 00:21:45,039
not to actually exploit the system at

194
00:21:45,039 --> 00:21:46,720
all

195
00:21:46,720 --> 00:21:49,360
for the midterm 24 hours were given to

196
00:21:49,360 --> 00:21:51,679
demonstrate the proof of concept and

197
00:21:51,679 --> 00:21:55,200
write a short report about it

198
00:21:55,200 --> 00:21:57,120
and one of the pro hacker who was taking

199
00:21:57,120 --> 00:21:58,559
the course

200
00:21:58,559 --> 00:22:00,960
managed to hacked hack into professor's

201
00:22:00,960 --> 00:22:03,120
account and submitted a screenshot

202
00:22:03,120 --> 00:22:05,440
showing oneself successfully got into

203
00:22:05,440 --> 00:22:07,679
the keist academic system as part of the

204
00:22:07,679 --> 00:22:08,880
report

205
00:22:08,880 --> 00:22:09,679
and

206
00:22:09,679 --> 00:22:10,960
if he

207
00:22:10,960 --> 00:22:12,880
if he uh

208
00:22:12,880 --> 00:22:15,919
if he managed to do that to to do so he

209
00:22:15,919 --> 00:22:18,960
could have manipulate the grades

210
00:22:18,960 --> 00:22:20,960
and so on

211
00:22:20,960 --> 00:22:22,960
so the professor got embarrassed by the

212
00:22:22,960 --> 00:22:23,919
student

213
00:22:23,919 --> 00:22:26,480
yet he was fairly satisfied with the

214
00:22:26,480 --> 00:22:28,480
performance of the students that they

215
00:22:28,480 --> 00:22:30,640
found many serious security threats of

216
00:22:30,640 --> 00:22:34,720
the system much more than he thought

217
00:22:34,720 --> 00:22:36,640
and here's the analysis of such

218
00:22:36,640 --> 00:22:39,360
vulnerabilities

219
00:22:39,360 --> 00:22:41,280
so first of all

220
00:22:41,280 --> 00:22:44,000
it is not even a proper 2fa it's a

221
00:22:44,000 --> 00:22:46,159
single factor authentication

222
00:22:46,159 --> 00:22:48,480
because it only requires the proof of

223
00:22:48,480 --> 00:22:50,240
having a device

224
00:22:50,240 --> 00:22:53,600
and the id itself cannot be a proof

225
00:22:53,600 --> 00:22:56,400
for the authentication

226
00:22:56,400 --> 00:22:58,159
and it's uh

227
00:22:58,159 --> 00:23:00,559
as as you as you've shown as we have

228
00:23:00,559 --> 00:23:02,559
shown in the demonstration

229
00:23:02,559 --> 00:23:05,039
it's very vulnerable to human error

230
00:23:05,039 --> 00:23:07,039
one can accidentally authenticate

231
00:23:07,039 --> 00:23:09,600
unknown requests by mistake

232
00:23:09,600 --> 00:23:11,520
and it is impossible to review or

233
00:23:11,520 --> 00:23:12,559
retrieve

234
00:23:12,559 --> 00:23:15,760
the given sessions

235
00:23:16,080 --> 00:23:18,159
and the other

236
00:23:18,159 --> 00:23:20,799
vulnerability that we found was

237
00:23:20,799 --> 00:23:22,480
the authentication the whole

238
00:23:22,480 --> 00:23:24,799
authentication procedure could be

239
00:23:24,799 --> 00:23:26,640
bypassed

240
00:23:26,640 --> 00:23:29,520
by circumventing entire

241
00:23:29,520 --> 00:23:31,280
authentication process

242
00:23:31,280 --> 00:23:33,280
and we found it

243
00:23:33,280 --> 00:23:36,480
being the most powerful attack and the

244
00:23:36,480 --> 00:23:38,880
reason why they had this vulnerability

245
00:23:38,880 --> 00:23:40,400
is they had

246
00:23:40,400 --> 00:23:44,159
to implement a new 2fa system over the

247
00:23:44,159 --> 00:23:45,520
deprecated

248
00:23:45,520 --> 00:23:47,200
authentication

249
00:23:47,200 --> 00:23:49,840
design and there was a misalignment

250
00:23:49,840 --> 00:23:51,440
between the two

251
00:23:51,440 --> 00:23:52,559
and

252
00:23:52,559 --> 00:23:53,440
this

253
00:23:53,440 --> 00:23:56,240
this huge and serious vulnerability was

254
00:23:56,240 --> 00:23:58,080
there

255
00:23:58,080 --> 00:24:00,640
and we can uh in later

256
00:24:00,640 --> 00:24:01,600
later

257
00:24:01,600 --> 00:24:03,520
this talk we

258
00:24:03,520 --> 00:24:05,440
shortly demonstrate how this

259
00:24:05,440 --> 00:24:08,159
attack works

260
00:24:08,559 --> 00:24:11,600
and not only those two we were able to

261
00:24:11,600 --> 00:24:12,640
find

262
00:24:12,640 --> 00:24:14,080
other more

263
00:24:14,080 --> 00:24:16,080
serious vulnerabilities for example id

264
00:24:16,080 --> 00:24:17,120
leakage

265
00:24:17,120 --> 00:24:19,679
ddos which is distributed denial of

266
00:24:19,679 --> 00:24:21,600
service and iodor

267
00:24:21,600 --> 00:24:23,600
that stands for insecure direct object

268
00:24:23,600 --> 00:24:25,760
reference

269
00:24:25,760 --> 00:24:28,559
an id leakage is

270
00:24:28,559 --> 00:24:29,520
the

271
00:24:29,520 --> 00:24:31,679
use of the vulnerability that user id

272
00:24:31,679 --> 00:24:35,039
validity check api was public

273
00:24:35,039 --> 00:24:36,320
so that

274
00:24:36,320 --> 00:24:38,720
it can be abused as an oracle for valid

275
00:24:38,720 --> 00:24:40,880
ids by an attacker

276
00:24:40,880 --> 00:24:41,840
and by

277
00:24:41,840 --> 00:24:45,279
enumerating valid ids

278
00:24:45,679 --> 00:24:47,679
hackers can

279
00:24:47,679 --> 00:24:51,679
not arbitrarily select uh their target

280
00:24:51,679 --> 00:24:52,559
for

281
00:24:52,559 --> 00:24:55,279
target victim

282
00:24:55,279 --> 00:24:57,600
and that denial of service using botnet

283
00:24:57,600 --> 00:24:58,880
could be

284
00:24:58,880 --> 00:25:00,880
also be done by

285
00:25:00,880 --> 00:25:03,760
with ip spoofing that makes the tracking

286
00:25:03,760 --> 00:25:06,480
nearly impossible

287
00:25:06,480 --> 00:25:07,520
and also

288
00:25:07,520 --> 00:25:09,200
lastly idor

289
00:25:09,200 --> 00:25:13,200
is an access to an unauthorized resource

290
00:25:13,200 --> 00:25:15,440
and again this was

291
00:25:15,440 --> 00:25:17,520
the other vulnerability that comes with

292
00:25:17,520 --> 00:25:21,600
misalignment with i mean between the

293
00:25:21,600 --> 00:25:22,640
legacy

294
00:25:22,640 --> 00:25:24,799
system and the new newly implemented

295
00:25:24,799 --> 00:25:26,799
system

296
00:25:26,799 --> 00:25:29,200
so basically there were

297
00:25:29,200 --> 00:25:31,120
other vulnerabilities due to poorly

298
00:25:31,120 --> 00:25:34,799
designed architecture of apis

299
00:25:35,120 --> 00:25:36,799
so here's a short demo

300
00:25:36,799 --> 00:25:38,159
that

301
00:25:38,159 --> 00:25:40,720
demonstrates the authentication bypass

302
00:25:40,720 --> 00:25:42,880
attack

303
00:25:42,880 --> 00:25:44,159
first you

304
00:25:44,159 --> 00:25:46,640
the attacker can enumerate enumerate

305
00:25:46,640 --> 00:25:47,919
user ids

306
00:25:47,919 --> 00:25:50,159
by going into the cast

307
00:25:50,159 --> 00:25:51,520
mail service

308
00:25:51,520 --> 00:25:54,400
where you type in some string there and

309
00:25:54,400 --> 00:25:56,720
it com it shows you

310
00:25:56,720 --> 00:25:57,679
the

311
00:25:57,679 --> 00:25:59,279
match of

312
00:25:59,279 --> 00:26:03,279
that string to certain kist members

313
00:26:03,279 --> 00:26:04,480
for example

314
00:26:04,480 --> 00:26:07,600
here we find myeongan's

315
00:26:07,600 --> 00:26:09,279
id

316
00:26:09,279 --> 00:26:11,600
email email address

317
00:26:11,600 --> 00:26:13,840
and the finding is that

318
00:26:13,840 --> 00:26:15,520
most users have

319
00:26:15,520 --> 00:26:18,240
the same id with the header head of the

320
00:26:18,240 --> 00:26:19,760
email address

321
00:26:19,760 --> 00:26:22,880
so you we just use the

322
00:26:22,880 --> 00:26:25,200
head of the email address as an id

323
00:26:25,200 --> 00:26:27,919
for the attack

324
00:26:28,080 --> 00:26:29,440
and then

325
00:26:29,440 --> 00:26:31,600
we try to authenticate

326
00:26:31,600 --> 00:26:34,240
the user in the in the browser

327
00:26:34,240 --> 00:26:36,840
and with proxy for example

328
00:26:36,840 --> 00:26:40,559
fiddler we intercept the log in packet

329
00:26:40,559 --> 00:26:42,080
and then

330
00:26:42,080 --> 00:26:45,279
replace the login packet with

331
00:26:45,279 --> 00:26:46,080
the

332
00:26:46,080 --> 00:26:48,320
custom string that we find

333
00:26:48,320 --> 00:26:51,039
that we manually find out

334
00:26:51,039 --> 00:26:53,440
and by replacing it

335
00:26:53,440 --> 00:26:54,799
we can we were

336
00:26:54,799 --> 00:26:58,960
one would successfully log in with

337
00:26:59,440 --> 00:27:02,240
victims user

338
00:27:02,240 --> 00:27:04,480
victims

339
00:27:04,480 --> 00:27:07,039
authentication without any without

340
00:27:07,039 --> 00:27:11,760
knowing the password or having a device

341
00:27:13,200 --> 00:27:14,960
so here's our

342
00:27:14,960 --> 00:27:19,279
suggested solutions to the institute

343
00:27:19,279 --> 00:27:20,399
first

344
00:27:20,399 --> 00:27:22,240
we strongly

345
00:27:22,240 --> 00:27:24,640
uh mentioned that roll backing the

346
00:27:24,640 --> 00:27:27,600
password off would be the

347
00:27:27,600 --> 00:27:29,200
trivial and most

348
00:27:29,200 --> 00:27:32,080
definite solution

349
00:27:32,240 --> 00:27:33,520
and

350
00:27:33,520 --> 00:27:35,120
after that

351
00:27:35,120 --> 00:27:39,120
although it needs the further uh

352
00:27:39,120 --> 00:27:40,880
backup solutions

353
00:27:40,880 --> 00:27:42,159
but we

354
00:27:42,159 --> 00:27:45,279
highly we are strongly

355
00:27:45,279 --> 00:27:46,640
uh

356
00:27:46,640 --> 00:27:49,039
we were you're very clear to say that

357
00:27:49,039 --> 00:27:51,679
this must be done right away

358
00:27:51,679 --> 00:27:54,080
but they didn't but they rejected

359
00:27:54,080 --> 00:27:56,159
because of

360
00:27:56,159 --> 00:27:59,840
uh institute issue

361
00:28:00,320 --> 00:28:05,120
and then we tried to suggest

362
00:28:05,120 --> 00:28:06,159
i mean we

363
00:28:06,159 --> 00:28:08,000
we also said the

364
00:28:08,000 --> 00:28:08,799
the

365
00:28:08,799 --> 00:28:11,840
original system itself is not a 2f8

366
00:28:11,840 --> 00:28:14,960
and we have to go with proper 2fa

367
00:28:14,960 --> 00:28:17,279
that has to come with

368
00:28:17,279 --> 00:28:19,120
a password and

369
00:28:19,120 --> 00:28:22,000
device check all together

370
00:28:22,000 --> 00:28:24,399
and it was funny that there were there

371
00:28:24,399 --> 00:28:26,480
there was already another service in

372
00:28:26,480 --> 00:28:27,919
heist

373
00:28:27,919 --> 00:28:31,520
which is vpn service that already comes

374
00:28:31,520 --> 00:28:33,679
with 2fa

375
00:28:33,679 --> 00:28:34,640
and

376
00:28:34,640 --> 00:28:38,080
it you it requires you to enter password

377
00:28:38,080 --> 00:28:40,880
and one-time password via device

378
00:28:40,880 --> 00:28:42,559
together to get

379
00:28:42,559 --> 00:28:43,679
yourself

380
00:28:43,679 --> 00:28:46,480
authenticated

381
00:28:46,880 --> 00:28:49,039
and then we also

382
00:28:49,039 --> 00:28:51,200
suggested to

383
00:28:51,200 --> 00:28:52,000
have

384
00:28:52,000 --> 00:28:53,840
session review and retrieval

385
00:28:53,840 --> 00:28:55,279
functionality

386
00:28:55,279 --> 00:28:57,760
in the system

387
00:28:57,760 --> 00:28:58,480
so

388
00:28:58,480 --> 00:29:00,240
if you have

389
00:29:00,240 --> 00:29:02,240
uh you i mean you may have seen this

390
00:29:02,240 --> 00:29:04,799
functionality in github or google

391
00:29:04,799 --> 00:29:06,880
so that you can review the currently

392
00:29:06,880 --> 00:29:09,360
activated sessions

393
00:29:09,360 --> 00:29:12,799
so so that you can list up all the

394
00:29:12,799 --> 00:29:14,399
current sessions that is going on and

395
00:29:14,399 --> 00:29:18,080
then you can selectively retrieve

396
00:29:18,080 --> 00:29:19,679
those sessions

397
00:29:19,679 --> 00:29:22,799
which seems to be uh superiors for

398
00:29:22,799 --> 00:29:23,919
example

399
00:29:23,919 --> 00:29:25,360
if you're in

400
00:29:25,360 --> 00:29:27,600
if you're in germany

401
00:29:27,600 --> 00:29:30,720
but you somehow find found that

402
00:29:30,720 --> 00:29:32,960
some sessions were in

403
00:29:32,960 --> 00:29:35,919
i mean said to be in korea

404
00:29:35,919 --> 00:29:38,840
you may think that it's

405
00:29:38,840 --> 00:29:41,679
very superior right so that you can

406
00:29:41,679 --> 00:29:45,120
achieve that session

407
00:29:45,279 --> 00:29:48,880
and then we had uh several iterations

408
00:29:48,880 --> 00:29:51,039
iterated meetings with kaiser

409
00:29:51,039 --> 00:29:52,559
administration

410
00:29:52,559 --> 00:29:56,320
to get uh the system fixed

411
00:29:56,320 --> 00:29:57,760
but they

412
00:29:57,760 --> 00:29:59,760
uh strongly

413
00:29:59,760 --> 00:30:00,960
they were

414
00:30:00,960 --> 00:30:02,880
they rejected the

415
00:30:02,880 --> 00:30:05,520
they i mean they were not they were

416
00:30:05,520 --> 00:30:07,600
pretty against with our suggestions

417
00:30:07,600 --> 00:30:09,279
because

418
00:30:09,279 --> 00:30:10,960
the issue was

419
00:30:10,960 --> 00:30:12,320
usability

420
00:30:12,320 --> 00:30:13,279
i mean

421
00:30:13,279 --> 00:30:17,039
they agree with security issue but

422
00:30:17,039 --> 00:30:19,679
as we go with proper 2fa

423
00:30:19,679 --> 00:30:23,120
it kind of harms the entire usability so

424
00:30:23,120 --> 00:30:26,479
that they cannot go for it

425
00:30:27,440 --> 00:30:29,679
so

426
00:30:29,760 --> 00:30:32,960
with the suggestions i mean with the

427
00:30:32,960 --> 00:30:37,120
we we kept on suggesting other measures

428
00:30:37,120 --> 00:30:37,840
to

429
00:30:37,840 --> 00:30:40,639
make it secure

430
00:30:41,120 --> 00:30:42,480
through the several meetings with the

431
00:30:42,480 --> 00:30:46,080
security administrations

432
00:30:46,080 --> 00:30:48,240
the only change they made was to pop the

433
00:30:48,240 --> 00:30:50,399
number up on the screen on both

434
00:30:50,399 --> 00:30:51,760
the browser

435
00:30:51,760 --> 00:30:53,679
and the mobile app

436
00:30:53,679 --> 00:30:56,240
and before so that the user before

437
00:30:56,240 --> 00:30:58,720
granting access with fade face id or

438
00:30:58,720 --> 00:31:00,799
touch id in the mobile app

439
00:31:00,799 --> 00:31:03,039
the user would hopefully check if the

440
00:31:03,039 --> 00:31:05,039
number shown on the app matches with

441
00:31:05,039 --> 00:31:07,279
that of a browser

442
00:31:07,279 --> 00:31:10,399
so that the user won't

443
00:31:10,399 --> 00:31:11,760
mess up with

444
00:31:11,760 --> 00:31:14,480
i mean mistakenly authenticate other

445
00:31:14,480 --> 00:31:16,480
requests or

446
00:31:16,480 --> 00:31:17,440
attack

447
00:31:17,440 --> 00:31:21,519
by a certain use certain hacker

448
00:31:21,519 --> 00:31:23,200
by mistake

449
00:31:23,200 --> 00:31:24,559
and it partially mitigates the

450
00:31:24,559 --> 00:31:26,880
vulnerability as it helps to confirm

451
00:31:26,880 --> 00:31:28,960
which access is likely to be malicious

452
00:31:28,960 --> 00:31:31,360
or not

453
00:31:31,600 --> 00:31:34,960
and some may ask if

454
00:31:34,960 --> 00:31:36,640
is

455
00:31:36,640 --> 00:31:38,799
can can this be uh

456
00:31:38,799 --> 00:31:41,039
can this set to be i mean understood to

457
00:31:41,039 --> 00:31:43,440
be fixed solution

458
00:31:43,440 --> 00:31:47,840
and definitely it's no

459
00:31:48,080 --> 00:31:50,320
so in conclusion our takeaway message is

460
00:31:50,320 --> 00:31:51,519
as follows

461
00:31:51,519 --> 00:31:54,480
first implementing easy to use 2fa

462
00:31:54,480 --> 00:31:56,640
without weakening the security is very

463
00:31:56,640 --> 00:31:58,640
tricky

464
00:31:58,640 --> 00:32:01,840
so as we have seen in the last slide the

465
00:32:01,840 --> 00:32:04,240
improved version is still not a proper

466
00:32:04,240 --> 00:32:06,640
2fa

467
00:32:06,640 --> 00:32:07,840
and second

468
00:32:07,840 --> 00:32:10,240
software testing and formal verification

469
00:32:10,240 --> 00:32:12,799
should help in its proper design and the

470
00:32:12,799 --> 00:32:14,880
two methods are traditional yet

471
00:32:14,880 --> 00:32:16,720
effective ways to find bugs and

472
00:32:16,720 --> 00:32:18,320
guarantee desired

473
00:32:18,320 --> 00:32:20,320
software guarantee the desired software

474
00:32:20,320 --> 00:32:22,799
property

475
00:32:23,919 --> 00:32:25,760
and here's the references

476
00:32:25,760 --> 00:32:27,200
for our work

477
00:32:27,200 --> 00:32:28,399
and

478
00:32:28,399 --> 00:32:29,840
thank you for listening

479
00:32:29,840 --> 00:32:31,519
if you have any questions please feel

480
00:32:31,519 --> 00:32:33,730
free to ask

481
00:32:33,730 --> 00:32:40,640
[Applause]

482
00:32:40,640 --> 00:32:42,399
so do we have any questions

483
00:32:42,399 --> 00:32:45,519
for our speaker today

484
00:32:45,519 --> 00:32:47,440
one in the back

485
00:32:47,440 --> 00:32:51,120
morton is going he's going

486
00:32:52,559 --> 00:32:54,960
testing testing seems to be working hi

487
00:32:54,960 --> 00:32:59,840
um on the the issue of usability versus

488
00:32:59,840 --> 00:33:02,559
security versus usability um

489
00:33:02,559 --> 00:33:04,000
there's

490
00:33:04,000 --> 00:33:06,880
several systems that don't require user

491
00:33:06,880 --> 00:33:08,880
input but you just talked about just

492
00:33:08,880 --> 00:33:12,320
having proof of a usb stick you put in

493
00:33:12,320 --> 00:33:14,720
and what's your stance on fido 2 tokens

494
00:33:14,720 --> 00:33:16,000
and stuff like that where you don't have

495
00:33:16,000 --> 00:33:18,240
to input anything but it's

496
00:33:18,240 --> 00:33:20,080
just there and you just have to attach

497
00:33:20,080 --> 00:33:23,080
it

498
00:33:26,640 --> 00:33:28,480
sorry i cannot just

499
00:33:28,480 --> 00:33:31,440
should i repeat i'll try um

500
00:33:31,440 --> 00:33:34,240
what's your opinion on

501
00:33:34,240 --> 00:33:36,640
passwordless login procedures through

502
00:33:36,640 --> 00:33:39,440
hardware tokens in the security versus

503
00:33:39,440 --> 00:33:40,720
usability

504
00:33:40,720 --> 00:33:42,159
issue

505
00:33:42,159 --> 00:33:45,039
security token

506
00:33:46,240 --> 00:33:47,360
i mean

507
00:33:47,360 --> 00:33:49,760
password itself is

508
00:33:49,760 --> 00:33:51,440
not a

509
00:33:51,440 --> 00:33:54,720
i mean it it it is a traditional way to

510
00:33:54,720 --> 00:33:56,559
authenticate but

511
00:33:56,559 --> 00:33:59,200
it is also traditionally known to be

512
00:33:59,200 --> 00:34:00,880
unsafe

513
00:34:00,880 --> 00:34:03,039
right because

514
00:34:03,039 --> 00:34:04,840
password only

515
00:34:04,840 --> 00:34:08,480
is is very error prone to humans human

516
00:34:08,480 --> 00:34:10,879
human errors

517
00:34:10,879 --> 00:34:13,199
and

518
00:34:14,399 --> 00:34:18,719
using usb stick is i mean together with

519
00:34:18,719 --> 00:34:21,520
uh

520
00:34:21,520 --> 00:34:24,560
your specific you can achieve better

521
00:34:24,560 --> 00:34:26,480
security i guess

522
00:34:26,480 --> 00:34:29,599
i mean that for sure

523
00:34:30,960 --> 00:34:32,800
am i getting your question right

524
00:34:32,800 --> 00:34:34,719
or am i missing

525
00:34:34,719 --> 00:34:37,839
i think part of the question is

526
00:34:37,839 --> 00:34:40,239
so when you have a security token on a

527
00:34:40,239 --> 00:34:42,560
usb for example

528
00:34:42,560 --> 00:34:43,440
um

529
00:34:43,440 --> 00:34:46,560
what role does usability play there is

530
00:34:46,560 --> 00:34:49,599
it easier is it um less easy does it

531
00:34:49,599 --> 00:34:51,520
make it better for users if they just

532
00:34:51,520 --> 00:34:53,839
have to use uh one of these security

533
00:34:53,839 --> 00:34:56,000
tokens

534
00:34:56,000 --> 00:34:58,480
or oh you me is

535
00:34:58,480 --> 00:35:01,040
security token you mean the number shown

536
00:35:01,040 --> 00:35:02,400
on

537
00:35:02,400 --> 00:35:03,599
the screen

538
00:35:03,599 --> 00:35:06,079
nope we're talking about um

539
00:35:06,079 --> 00:35:08,480
there are usb devices that have

540
00:35:08,480 --> 00:35:09,920
basically

541
00:35:09,920 --> 00:35:11,359
set it up so that

542
00:35:11,359 --> 00:35:13,440
using cryptography you can plug it in

543
00:35:13,440 --> 00:35:16,320
and basically identify as yourself and

544
00:35:16,320 --> 00:35:18,800
so that's commonly used

545
00:35:18,800 --> 00:35:21,440
as a form of authentication

546
00:35:21,440 --> 00:35:22,570
and so um

547
00:35:22,570 --> 00:35:23,920
[Music]

548
00:35:23,920 --> 00:35:26,079
so in that case a person only has to

549
00:35:26,079 --> 00:35:28,560
have this hardware authentication and

550
00:35:28,560 --> 00:35:32,000
then their login and password of course

551
00:35:32,000 --> 00:35:34,640
oh i see and how does that come with

552
00:35:34,640 --> 00:35:37,359
usability

553
00:35:38,320 --> 00:35:40,960
oh and i think that's the good question

554
00:35:40,960 --> 00:35:42,800
but

555
00:35:42,800 --> 00:35:45,920
i think if you have

556
00:35:45,920 --> 00:35:48,880
usb stick you you may not

557
00:35:48,880 --> 00:35:52,000
you may have hard time

558
00:35:52,000 --> 00:35:54,320
uh using

559
00:35:54,320 --> 00:35:55,680
uh

560
00:35:55,680 --> 00:35:57,599
logging into the

561
00:35:57,599 --> 00:35:59,440
certain service through your mobile

562
00:35:59,440 --> 00:36:02,480
device where you cannot easily

563
00:36:02,480 --> 00:36:05,520
plug in the usb stick right

564
00:36:05,520 --> 00:36:08,320
so i think that

565
00:36:08,320 --> 00:36:10,560
kind of

566
00:36:10,560 --> 00:36:13,839
harms to use usability still if we go

567
00:36:13,839 --> 00:36:16,880
for usb stick

568
00:36:16,960 --> 00:36:18,800
will that answer your question

569
00:36:18,800 --> 00:36:20,320
yep did that answer

570
00:36:20,320 --> 00:36:23,440
okay we got a thumbs up very good

571
00:36:23,440 --> 00:36:24,320
so

572
00:36:24,320 --> 00:36:28,800
any other questions for our speaker

573
00:36:29,839 --> 00:36:32,880
i'm checking the time um i actually have

574
00:36:32,880 --> 00:36:34,880
a question for you and that was bad

575
00:36:34,880 --> 00:36:37,599
feedback so um

576
00:36:37,599 --> 00:36:39,280
you said that there was an entire team

577
00:36:39,280 --> 00:36:41,119
or an entire group of people looking at

578
00:36:41,119 --> 00:36:44,000
this in a class and i'm wondering what

579
00:36:44,000 --> 00:36:45,920
kinds of tools did you use to

580
00:36:45,920 --> 00:36:49,119
investigate the implementation of

581
00:36:49,119 --> 00:36:52,000
multi-factor

582
00:36:52,839 --> 00:36:54,720
oh

583
00:36:54,720 --> 00:36:56,880
you mentioned fiddler yeah go ahead

584
00:36:56,880 --> 00:36:58,079
sorry yeah

585
00:36:58,079 --> 00:37:01,359
fiddler was what's the option

586
00:37:01,359 --> 00:37:03,759
and

587
00:37:04,960 --> 00:37:07,960
uh

588
00:37:10,000 --> 00:37:12,320
i i only used fiddler i have to ask

589
00:37:12,320 --> 00:37:15,920
other you know other team

590
00:37:16,240 --> 00:37:17,920
and

591
00:37:17,920 --> 00:37:20,400
basically

592
00:37:20,960 --> 00:37:23,760
python

593
00:37:23,760 --> 00:37:25,280
okay

594
00:37:25,280 --> 00:37:28,240
um and then my final

595
00:37:28,240 --> 00:37:29,440
um

596
00:37:29,440 --> 00:37:31,200
yep so you

597
00:37:31,200 --> 00:37:32,720
you're the class that you were taking

598
00:37:32,720 --> 00:37:35,119
though focused on um

599
00:37:35,119 --> 00:37:36,640
basically

600
00:37:36,640 --> 00:37:39,359
finding vulnerabilities in code

601
00:37:39,359 --> 00:37:42,079
so what kind of tooling do you do you do

602
00:37:42,079 --> 00:37:44,000
or do you use in that course to actually

603
00:37:44,000 --> 00:37:46,880
find vulnerabilities in code

604
00:37:46,880 --> 00:37:48,160
oh yeah

605
00:37:48,160 --> 00:37:48,839
we

606
00:37:48,839 --> 00:37:52,560
use uh ida pro

607
00:37:52,640 --> 00:37:54,960
gedra

608
00:37:54,960 --> 00:37:55,839
and

609
00:37:55,839 --> 00:37:59,119
gdb of course

610
00:37:59,119 --> 00:38:02,640
yeah i think that's all

611
00:38:02,839 --> 00:38:04,000
and uh

612
00:38:04,000 --> 00:38:06,720
yeah and we use we write our exploit

613
00:38:06,720 --> 00:38:08,400
with

614
00:38:08,400 --> 00:38:10,079
python

615
00:38:10,079 --> 00:38:11,440
and

616
00:38:11,440 --> 00:38:13,760
using pawn

617
00:38:13,760 --> 00:38:15,359
i cannot recall the

618
00:38:15,359 --> 00:38:17,599
name of the library right now

619
00:38:17,599 --> 00:38:19,280
okay

620
00:38:19,280 --> 00:38:22,079
and then uh for the solution that you

621
00:38:22,079 --> 00:38:24,240
analyzed was it i didn't get at the

622
00:38:24,240 --> 00:38:28,560
beginning was it a homegrown solution

623
00:38:30,079 --> 00:38:33,040
yeah yeah right yeah okay would you ever

624
00:38:33,040 --> 00:38:36,560
recommend to build your own multi-factor

625
00:38:36,560 --> 00:38:38,800
solution or should you just buy it off

626
00:38:38,800 --> 00:38:41,280
the shelf

627
00:38:41,680 --> 00:38:43,920
uh i think it's

628
00:38:43,920 --> 00:38:45,440
uh

629
00:38:45,440 --> 00:38:47,680
i would buy a buy it off the shelf

630
00:38:47,680 --> 00:38:48,800
because

631
00:38:48,800 --> 00:38:52,160
i mean it's very trivial to

632
00:38:52,160 --> 00:38:56,240
to satisfy the 2fa property so that

633
00:38:56,240 --> 00:39:01,680
you won't get any additional benefit

634
00:39:01,760 --> 00:39:02,640
by

635
00:39:02,640 --> 00:39:05,760
having it yourself unless you have

636
00:39:05,760 --> 00:39:07,520
a very clear idea that

637
00:39:07,520 --> 00:39:09,599
can

638
00:39:09,599 --> 00:39:11,200
you know balance

639
00:39:11,200 --> 00:39:13,280
i mean

640
00:39:13,280 --> 00:39:14,640
guarantee other

641
00:39:14,640 --> 00:39:18,000
properties such as usability here

642
00:39:18,000 --> 00:39:20,240
and

643
00:39:20,240 --> 00:39:21,200
yeah

644
00:39:21,200 --> 00:39:24,079
i i if the if the purpose is just for

645
00:39:24,079 --> 00:39:26,400
security i would buy it off the shelf

646
00:39:26,400 --> 00:39:27,760
but if you

647
00:39:27,760 --> 00:39:31,200
do it something more fun

648
00:39:31,760 --> 00:39:34,720
i'll definitely go

649
00:39:36,000 --> 00:39:37,920
all right does anyone have any other

650
00:39:37,920 --> 00:39:40,560
questions

651
00:39:40,640 --> 00:39:41,599
okay

652
00:39:41,599 --> 00:39:43,119
then thank you so much for your time

653
00:39:43,119 --> 00:39:44,960
today um

654
00:39:44,960 --> 00:39:47,280
it was great to hear about your story

655
00:39:47,280 --> 00:39:50,560
and have a great rest of your day

656
00:39:50,560 --> 00:39:53,799
thank you

657
00:40:44,720 --> 00:40:47,720
um

658
00:42:00,160 --> 00:42:01,359
hello

659
00:42:01,359 --> 00:42:04,000
i i didn't expect it i was

660
00:42:04,000 --> 00:42:06,160
i wasn't expecting the microphone to be

661
00:42:06,160 --> 00:42:07,520
on so

662
00:42:07,520 --> 00:42:09,599
now i know that it is

663
00:42:09,599 --> 00:42:14,520
carry on we have just a few minutes

664
00:42:16,800 --> 00:42:18,800
if you're here for keeping electric cars

665
00:42:18,800 --> 00:42:22,920
secure you're in the right place

666
00:42:44,800 --> 00:42:47,800
um

667
00:43:22,480 --> 00:43:26,680
i remember that you told me

668
00:43:38,720 --> 00:43:40,560
so it looks like we're all set up

669
00:43:40,560 --> 00:43:41,760
two minutes

670
00:43:41,760 --> 00:43:47,000
i'm gonna start talking at 29.

671
00:43:50,240 --> 00:43:53,240
probably

672
00:44:01,040 --> 00:44:04,160
welcome security fans back to the second

673
00:44:04,160 --> 00:44:06,240
talk in the rumford room

674
00:44:06,240 --> 00:44:08,960
uh once again i'm jen gennesco and i'll

675
00:44:08,960 --> 00:44:11,200
be the emcee for the second talk i'm

676
00:44:11,200 --> 00:44:14,879
going to start the time now

677
00:44:16,000 --> 00:44:16,880
so

678
00:44:16,880 --> 00:44:19,119
uh

679
00:44:19,280 --> 00:44:21,359
first thing if you have questions at the

680
00:44:21,359 --> 00:44:22,960
end of the talk which we will have time

681
00:44:22,960 --> 00:44:25,440
for questions i would like you to run to

682
00:44:25,440 --> 00:44:27,119
the front of the room and talk into the

683
00:44:27,119 --> 00:44:28,880
microphone so that everybody can hear

684
00:44:28,880 --> 00:44:30,960
and also our speaker can hear

685
00:44:30,960 --> 00:44:31,839
okay

686
00:44:31,839 --> 00:44:34,960
that being said let's get started so

687
00:44:34,960 --> 00:44:36,800
a few years ago there was this guy his

688
00:44:36,800 --> 00:44:38,560
name was charlie miller

689
00:44:38,560 --> 00:44:40,720
he hacked a jeep he made it really

690
00:44:40,720 --> 00:44:42,400
really public and everybody learned

691
00:44:42,400 --> 00:44:45,520
about the can bus in automobiles

692
00:44:45,520 --> 00:44:49,359
but that was a gas powered machine

693
00:44:49,359 --> 00:44:52,800
how has a can bus evolved

694
00:44:52,800 --> 00:44:55,520
in the world of electric cars

695
00:44:55,520 --> 00:44:57,760
our speaker today is going to talk about

696
00:44:57,760 --> 00:45:00,160
exactly this and a few other things um

697
00:45:00,160 --> 00:45:01,839
we have with us today

698
00:45:01,839 --> 00:45:04,720
shivaranjini

699
00:45:04,720 --> 00:45:06,079
she is

700
00:45:06,079 --> 00:45:08,000
has a masters from carnegie mellon and

701
00:45:08,000 --> 00:45:10,160
she's working as a security researcher

702
00:45:10,160 --> 00:45:13,440
at to say sv in singapore and she's

703
00:45:13,440 --> 00:45:15,280
speaking to us today

704
00:45:15,280 --> 00:45:17,119
live

705
00:45:17,119 --> 00:45:18,400
but remotely

706
00:45:18,400 --> 00:45:21,839
uh to give us um a talk about keeping

707
00:45:21,839 --> 00:45:24,560
electric vehicles secure and to the need

708
00:45:24,560 --> 00:45:28,079
for a can security framework so give it

709
00:45:28,079 --> 00:45:32,280
up for chevron genie

710
00:45:32,400 --> 00:45:36,160
thank you everyone so good morgan so my

711
00:45:36,160 --> 00:45:38,480
name is shivaranjini and i'm going to be

712
00:45:38,480 --> 00:45:41,040
talking about my experience

713
00:45:41,040 --> 00:45:44,400
uh on keeping electric vehicles secure

714
00:45:44,400 --> 00:45:47,520
by proposing the need for a canned

715
00:45:47,520 --> 00:45:49,440
security framework

716
00:45:49,440 --> 00:45:54,319
so a little bit about me so i s um

717
00:45:54,319 --> 00:45:56,480
the nc is already mentioned i am a

718
00:45:56,480 --> 00:45:58,400
security engineer with this asp

719
00:45:58,400 --> 00:45:59,599
singapore

720
00:45:59,599 --> 00:46:00,880
and

721
00:46:00,880 --> 00:46:04,079
we have a global presence and there is

722
00:46:04,079 --> 00:46:07,920
also a division right there in germany

723
00:46:07,920 --> 00:46:11,040
we specialize in smart cabins and smart

724
00:46:11,040 --> 00:46:12,839
driving including self-driving

725
00:46:12,839 --> 00:46:16,400
capabilities and we have over 35 years

726
00:46:16,400 --> 00:46:18,480
in the automotive industry

727
00:46:18,480 --> 00:46:21,920
so before working in the csv i had a

728
00:46:21,920 --> 00:46:23,760
short stint at national university of

729
00:46:23,760 --> 00:46:26,960
singapore where i got the chance to

730
00:46:26,960 --> 00:46:29,599
hack into one of these famous yellow

731
00:46:29,599 --> 00:46:31,119
bluetooth bikes that you see in the

732
00:46:31,119 --> 00:46:32,560
picture right there

733
00:46:32,560 --> 00:46:36,079
and i was able to hack into them and

734
00:46:36,079 --> 00:46:38,079
was able to ride it without having to

735
00:46:38,079 --> 00:46:40,640
pay for it as a part of their bug bounty

736
00:46:40,640 --> 00:46:44,160
program that got me super excited about

737
00:46:44,160 --> 00:46:46,880
vehicle security and then i transitioned

738
00:46:46,880 --> 00:46:47,760
from

739
00:46:47,760 --> 00:46:52,079
bikes to cars which is my current focus

740
00:46:52,079 --> 00:46:54,560
i also have a masters in information

741
00:46:54,560 --> 00:46:57,599
security from carnegie mellon university

742
00:46:57,599 --> 00:47:01,200
and for fun i play a musical instrument

743
00:47:01,200 --> 00:47:03,920
sometimes and every weekend you can see

744
00:47:03,920 --> 00:47:04,960
me

745
00:47:04,960 --> 00:47:07,520
paddling along the kalang river in

746
00:47:07,520 --> 00:47:09,839
singapore

747
00:47:09,839 --> 00:47:12,160
today i'm going to be starting with an

748
00:47:12,160 --> 00:47:14,400
introduction of what is can and the

749
00:47:14,400 --> 00:47:16,480
security challenges that come along with

750
00:47:16,480 --> 00:47:17,440
it

751
00:47:17,440 --> 00:47:20,400
then i'm going to be walking you through

752
00:47:20,400 --> 00:47:22,800
my journey of developing an intuition

753
00:47:22,800 --> 00:47:25,359
detection system over the years through

754
00:47:25,359 --> 00:47:27,040
different phases

755
00:47:27,040 --> 00:47:29,119
and what are the lessons i've learned

756
00:47:29,119 --> 00:47:31,760
along the way and finally i will be

757
00:47:31,760 --> 00:47:34,559
proposing a canned security framework

758
00:47:34,559 --> 00:47:37,839
that addresses some of the

759
00:47:37,839 --> 00:47:40,319
problems that i've encountered so far

760
00:47:40,319 --> 00:47:41,359
so

761
00:47:41,359 --> 00:47:44,720
let's start with can so what is scan can

762
00:47:44,720 --> 00:47:47,359
or controller area network

763
00:47:47,359 --> 00:47:50,480
is the main communication channel inside

764
00:47:50,480 --> 00:47:54,079
an electric vehicle or the crux of an

765
00:47:54,079 --> 00:47:55,680
automotive system

766
00:47:55,680 --> 00:47:57,440
so it connects

767
00:47:57,440 --> 00:47:59,680
all the import important components that

768
00:47:59,680 --> 00:48:02,480
you can think of like cruise control

769
00:48:02,480 --> 00:48:06,079
brake system air conditioning gateway

770
00:48:06,079 --> 00:48:09,280
you name it so everything is connected

771
00:48:09,280 --> 00:48:13,119
to this can bus and these components are

772
00:48:13,119 --> 00:48:16,160
called as electronic control units and

773
00:48:16,160 --> 00:48:18,480
chan can is the channel that connects

774
00:48:18,480 --> 00:48:21,200
them enables the communication between

775
00:48:21,200 --> 00:48:22,079
them

776
00:48:22,079 --> 00:48:24,880
so the main benefits of using this

777
00:48:24,880 --> 00:48:27,400
protocol is that it's

778
00:48:27,400 --> 00:48:30,480
inexpensive it's durable

779
00:48:30,480 --> 00:48:34,559
it's very lightweight and reliable and

780
00:48:34,559 --> 00:48:37,839
it's also broadcast based unlike

781
00:48:37,839 --> 00:48:39,760
peer-to-peer based which means that it

782
00:48:39,760 --> 00:48:40,640
has

783
00:48:40,640 --> 00:48:43,119
much less overhead

784
00:48:43,119 --> 00:48:45,680
and uh that's primarily one of the

785
00:48:45,680 --> 00:48:49,200
reasons that electric vehicles use can

786
00:48:49,200 --> 00:48:51,359
as one of their major communication

787
00:48:51,359 --> 00:48:52,640
channels

788
00:48:52,640 --> 00:48:55,520
so a little bit of a deep dive into a

789
00:48:55,520 --> 00:48:58,079
can header or a cam frame

790
00:48:58,079 --> 00:49:01,359
so you can see a number of fields there

791
00:49:01,359 --> 00:49:03,200
but there are three key fields that i

792
00:49:03,200 --> 00:49:05,760
would like to highlight one is the

793
00:49:05,760 --> 00:49:07,599
arbitration id

794
00:49:07,599 --> 00:49:11,839
the other one is dlc which is the data

795
00:49:11,839 --> 00:49:13,280
length code

796
00:49:13,280 --> 00:49:16,319
the data length code is basically gives

797
00:49:16,319 --> 00:49:19,119
you the number of bytes of payload of

798
00:49:19,119 --> 00:49:21,680
data that follows along with it so here

799
00:49:21,680 --> 00:49:22,720
we have

800
00:49:22,720 --> 00:49:25,680
two eight bytes data so that would be

801
00:49:25,680 --> 00:49:28,319
the dlc which indicates how much of

802
00:49:28,319 --> 00:49:32,079
payload is sent along in that can frame

803
00:49:32,079 --> 00:49:34,640
and the time at which the frame was

804
00:49:34,640 --> 00:49:37,440
itself sent and the data itself

805
00:49:37,440 --> 00:49:40,559
so the key feed here is arbitration so

806
00:49:40,559 --> 00:49:42,240
let's start with that

807
00:49:42,240 --> 00:49:43,040
so

808
00:49:43,040 --> 00:49:46,079
in an electric car we have many

809
00:49:46,079 --> 00:49:47,359
electronic

810
00:49:47,359 --> 00:49:50,240
uh control units that want to talk to

811
00:49:50,240 --> 00:49:51,280
each other

812
00:49:51,280 --> 00:49:53,200
and they have the scan bus which is

813
00:49:53,200 --> 00:49:57,599
their communication channel so each um

814
00:49:57,599 --> 00:50:00,880
each electronic control unit has a

815
00:50:00,880 --> 00:50:03,920
specific set of message ids

816
00:50:03,920 --> 00:50:06,720
that is always on the lookout for

817
00:50:06,720 --> 00:50:09,200
and once it encounters

818
00:50:09,200 --> 00:50:13,680
that message id on the canvas it

819
00:50:13,680 --> 00:50:16,240
reacts to it and starts a communication

820
00:50:16,240 --> 00:50:17,359
with it

821
00:50:17,359 --> 00:50:20,000
so since it's broadcast based and many

822
00:50:20,000 --> 00:50:21,920
of the electronic control units we try

823
00:50:21,920 --> 00:50:24,160
to do this simultaneously

824
00:50:24,160 --> 00:50:25,920
the can bus has a process called

825
00:50:25,920 --> 00:50:28,480
arbitration which gives priority to

826
00:50:28,480 --> 00:50:31,119
which message can be executed first

827
00:50:31,119 --> 00:50:33,920
so if you have a lower message id

828
00:50:33,920 --> 00:50:36,400
then you have higher priorities so by

829
00:50:36,400 --> 00:50:37,440
logic

830
00:50:37,440 --> 00:50:39,680
if you have zero zero zero which is the

831
00:50:39,680 --> 00:50:41,440
lowest you can go

832
00:50:41,440 --> 00:50:44,000
then your message would be given the

833
00:50:44,000 --> 00:50:45,599
highest priority

834
00:50:45,599 --> 00:50:47,599
and would be executed first on the

835
00:50:47,599 --> 00:50:49,200
canvas and

836
00:50:49,200 --> 00:50:51,599
every other message has to

837
00:50:51,599 --> 00:50:52,559
wait

838
00:50:52,559 --> 00:50:57,040
a bit more so this number is represented

839
00:50:57,040 --> 00:50:59,760
by the 11 bit arbitration id as

840
00:50:59,760 --> 00:51:01,760
referenced here

841
00:51:01,760 --> 00:51:02,480
so

842
00:51:02,480 --> 00:51:05,119
a little bit more into the different

843
00:51:05,119 --> 00:51:07,119
type of can messages

844
00:51:07,119 --> 00:51:11,280
so we have two broad classifications one

845
00:51:11,280 --> 00:51:13,760
is called the periodic messages

846
00:51:13,760 --> 00:51:16,319
so the periodic messages are message

847
00:51:16,319 --> 00:51:17,520
sense

848
00:51:17,520 --> 00:51:20,720
periodically to get the statuses of

849
00:51:20,720 --> 00:51:23,040
different electronic control units at

850
00:51:23,040 --> 00:51:24,800
different times

851
00:51:24,800 --> 00:51:25,839
so

852
00:51:25,839 --> 00:51:29,359
i am an ecua and i want to talk to ecub

853
00:51:29,359 --> 00:51:31,119
and i want to know the current status at

854
00:51:31,119 --> 00:51:33,680
this particular point of time so i just

855
00:51:33,680 --> 00:51:36,640
sent messages periodically to know hey

856
00:51:36,640 --> 00:51:38,400
what's your current status that kind of

857
00:51:38,400 --> 00:51:40,480
messages is periodic

858
00:51:40,480 --> 00:51:41,440
so

859
00:51:41,440 --> 00:51:44,000
and uh the second type of one which is

860
00:51:44,000 --> 00:51:46,880
called as event trigger is messages

861
00:51:46,880 --> 00:51:50,240
that only occur when a particular event

862
00:51:50,240 --> 00:51:51,520
happens

863
00:51:51,520 --> 00:51:52,319
so

864
00:51:52,319 --> 00:51:55,520
you someone locks the door someone

865
00:51:55,520 --> 00:51:58,319
unlocks the door you apply brakes on the

866
00:51:58,319 --> 00:52:00,160
car

867
00:52:00,160 --> 00:52:02,559
these kind of events

868
00:52:02,559 --> 00:52:06,000
that are happening will trigger a bunch

869
00:52:06,000 --> 00:52:08,720
of messages that are only pertaining to

870
00:52:08,720 --> 00:52:09,680
that

871
00:52:09,680 --> 00:52:11,839
and those kind of messages are called as

872
00:52:11,839 --> 00:52:13,440
eventual messages

873
00:52:13,440 --> 00:52:14,240
so

874
00:52:14,240 --> 00:52:17,200
if you see the screenshot here this is

875
00:52:17,200 --> 00:52:18,800
from a

876
00:52:18,800 --> 00:52:20,960
can database file

877
00:52:20,960 --> 00:52:24,640
you can see two words that's that comes

878
00:52:24,640 --> 00:52:27,280
up very often one is cyclic x and the

879
00:52:27,280 --> 00:52:29,920
other one is spontanex

880
00:52:29,920 --> 00:52:32,400
so anything that's called a cyclic

881
00:52:32,400 --> 00:52:35,280
refers to the periodic messages

882
00:52:35,280 --> 00:52:37,520
and anything that's called spontaneox

883
00:52:37,520 --> 00:52:40,079
which is much much fewer than the cyclic

884
00:52:40,079 --> 00:52:41,680
x messages

885
00:52:41,680 --> 00:52:44,480
refers to the event triggered messages

886
00:52:44,480 --> 00:52:45,440
and

887
00:52:45,440 --> 00:52:47,280
you might be wondering looking at the

888
00:52:47,280 --> 00:52:50,559
screenshot what is this x and why is

889
00:52:50,559 --> 00:52:53,520
there a can extended written at the end

890
00:52:53,520 --> 00:52:56,240
of it what's the significance of it

891
00:52:56,240 --> 00:52:57,040
so

892
00:52:57,040 --> 00:53:00,880
um the x refers to an extension or an

893
00:53:00,880 --> 00:53:02,800
extender

894
00:53:02,800 --> 00:53:05,760
and it's called as scan flexible data

895
00:53:05,760 --> 00:53:06,720
rate

896
00:53:06,720 --> 00:53:11,359
which allows you to send up to 65

897
00:53:11,359 --> 00:53:15,599
64 bytes of data and has a longer

898
00:53:15,599 --> 00:53:17,680
identifier it basically allows you to

899
00:53:17,680 --> 00:53:20,800
send more data in a single cam frame

900
00:53:20,800 --> 00:53:24,559
as opposed to the original classic can

901
00:53:24,559 --> 00:53:25,359
so

902
00:53:25,359 --> 00:53:28,400
what does this mean from a security

903
00:53:28,400 --> 00:53:29,760
perspective

904
00:53:29,760 --> 00:53:33,280
so historically when can was introduced

905
00:53:33,280 --> 00:53:37,119
by robert wash in 1983 it was only meant

906
00:53:37,119 --> 00:53:40,160
to be like a very lightweight reliable

907
00:53:40,160 --> 00:53:43,440
mode of communication and there is no

908
00:53:43,440 --> 00:53:46,400
authentication or authorization that is

909
00:53:46,400 --> 00:53:49,040
built into the protocol itself

910
00:53:49,040 --> 00:53:52,319
so in order to ensure security you have

911
00:53:52,319 --> 00:53:54,800
to take additional mechanisms

912
00:53:54,800 --> 00:53:58,160
so one such mechanism is building a

913
00:53:58,160 --> 00:54:00,640
model or component that would do the

914
00:54:00,640 --> 00:54:03,599
authentication or authorization for you

915
00:54:03,599 --> 00:54:04,400
so

916
00:54:04,400 --> 00:54:05,920
um

917
00:54:05,920 --> 00:54:07,760
coming to that

918
00:54:07,760 --> 00:54:10,880
you have one such examples of of the

919
00:54:10,880 --> 00:54:14,800
model is an auto source sequocy or

920
00:54:14,800 --> 00:54:17,280
secure onward communications

921
00:54:17,280 --> 00:54:20,640
so basically what this module does is as

922
00:54:20,640 --> 00:54:22,480
referenced by the figure

923
00:54:22,480 --> 00:54:24,880
it generates a lot of message

924
00:54:24,880 --> 00:54:27,359
authentication code and freshness value

925
00:54:27,359 --> 00:54:29,599
which is used to authenticate the

926
00:54:29,599 --> 00:54:32,160
electronic control units communicating

927
00:54:32,160 --> 00:54:33,680
on the canvas

928
00:54:33,680 --> 00:54:35,680
and send this keys

929
00:54:35,680 --> 00:54:37,599
plus data

930
00:54:37,599 --> 00:54:40,240
in the can frame along which which

931
00:54:40,240 --> 00:54:42,960
allows you to send more data so if

932
00:54:42,960 --> 00:54:45,680
you're using a classic can

933
00:54:45,680 --> 00:54:48,480
sending this type of information would

934
00:54:48,480 --> 00:54:50,559
mean that

935
00:54:50,559 --> 00:54:53,440
it will not leave you space for anything

936
00:54:53,440 --> 00:54:56,400
else and it's not your best bet

937
00:54:56,400 --> 00:54:59,280
but can fd can allow you to send

938
00:54:59,280 --> 00:55:01,839
your security related data as well as

939
00:55:01,839 --> 00:55:04,880
the data it's originally intended for

940
00:55:04,880 --> 00:55:07,280
so but there are two challenges that

941
00:55:07,280 --> 00:55:09,520
come along with this one main important

942
00:55:09,520 --> 00:55:11,359
one is that

943
00:55:11,359 --> 00:55:12,880
you have to

944
00:55:12,880 --> 00:55:15,760
secure the keys itself

945
00:55:15,760 --> 00:55:18,839
they've got them and the next important

946
00:55:18,839 --> 00:55:22,640
challenge is that secrocy has 2.5 times

947
00:55:22,640 --> 00:55:25,599
more bandwidth than can itself

948
00:55:25,599 --> 00:55:26,559
so

949
00:55:26,559 --> 00:55:29,119
in certain situation which means that

950
00:55:29,119 --> 00:55:32,240
you cannot use this always because you

951
00:55:32,240 --> 00:55:34,160
would have to sacrifice your bandwidth

952
00:55:34,160 --> 00:55:37,040
for security and we don't want that do

953
00:55:37,040 --> 00:55:40,240
we so what other option do we have to

954
00:55:40,240 --> 00:55:43,040
ensure that there is security and the

955
00:55:43,040 --> 00:55:45,839
the can bus itself the communications is

956
00:55:45,839 --> 00:55:46,880
secure

957
00:55:46,880 --> 00:55:49,599
so here comes intuition detection

958
00:55:49,599 --> 00:55:50,640
systems

959
00:55:50,640 --> 00:55:54,559
so many idea solutions sit on different

960
00:55:54,559 --> 00:55:57,200
electronic control unit components and

961
00:55:57,200 --> 00:56:00,640
monitor the messages along the canvas so

962
00:56:00,640 --> 00:56:03,520
an example could be gateway which can

963
00:56:03,520 --> 00:56:06,079
look at messages coming in from

964
00:56:06,079 --> 00:56:07,280
different

965
00:56:07,280 --> 00:56:09,599
electronic control units

966
00:56:09,599 --> 00:56:12,720
um so there are broadly two very

967
00:56:12,720 --> 00:56:17,240
different type of um

968
00:56:17,280 --> 00:56:21,040
ideas with pertaining to can one is flow

969
00:56:21,040 --> 00:56:23,200
based which only needs the bare

970
00:56:23,200 --> 00:56:25,599
essentials the bare essentials meaning

971
00:56:25,599 --> 00:56:27,200
the message id

972
00:56:27,200 --> 00:56:30,480
and the time at which the uh

973
00:56:30,480 --> 00:56:32,559
frame is sent you don't need the data

974
00:56:32,559 --> 00:56:34,400
you don't need anything else

975
00:56:34,400 --> 00:56:36,799
so this kind of information this kind of

976
00:56:36,799 --> 00:56:39,839
flow-based abs is useful

977
00:56:39,839 --> 00:56:43,040
um because it's very generic and you can

978
00:56:43,040 --> 00:56:46,079
use it almost in many almost in all the

979
00:56:46,079 --> 00:56:47,760
vehicle models that you can think of

980
00:56:47,760 --> 00:56:50,559
because it's very generic it's not data

981
00:56:50,559 --> 00:56:53,200
specific it's not vehicle specific so

982
00:56:53,200 --> 00:56:55,599
once you develop an algorithm

983
00:56:55,599 --> 00:56:57,040
you don't have to

984
00:56:57,040 --> 00:57:00,160
go around changing it again and again

985
00:57:00,160 --> 00:57:02,799
whereas packet base is focuses

986
00:57:02,799 --> 00:57:05,200
completely on the data packets or

987
00:57:05,200 --> 00:57:06,720
payload itself

988
00:57:06,720 --> 00:57:08,880
so this is also useful in certain

989
00:57:08,880 --> 00:57:11,680
situations

990
00:57:11,680 --> 00:57:14,480
so these are the two major types and

991
00:57:14,480 --> 00:57:18,240
hybrid is a mix of both of them

992
00:57:18,240 --> 00:57:21,040
so when i started to develop an

993
00:57:21,040 --> 00:57:23,440
intuition detection system i started

994
00:57:23,440 --> 00:57:26,720
with a prototype so my goal was to

995
00:57:26,720 --> 00:57:30,079
create a working prototype from data

996
00:57:30,079 --> 00:57:32,319
that is publicly available

997
00:57:32,319 --> 00:57:35,520
so i wanted to identify common attack

998
00:57:35,520 --> 00:57:39,040
scenarios and generate adapt scenarios

999
00:57:39,040 --> 00:57:41,119
pertaining to that

1000
00:57:41,119 --> 00:57:41,920
and

1001
00:57:41,920 --> 00:57:43,839
along with my team

1002
00:57:43,839 --> 00:57:46,240
we wanted to add some machine and deep

1003
00:57:46,240 --> 00:57:48,799
learning features to this prototype

1004
00:57:48,799 --> 00:57:52,000
and finally test the results on a pc to

1005
00:57:52,000 --> 00:57:55,200
see how our ideas algorithm has failed

1006
00:57:55,200 --> 00:57:56,720
so far

1007
00:57:56,720 --> 00:57:58,079
so

1008
00:57:58,079 --> 00:57:59,839
upon a lot of

1009
00:57:59,839 --> 00:58:02,880
literature survey i came upon a very

1010
00:58:02,880 --> 00:58:05,440
highly cited academic paper

1011
00:58:05,440 --> 00:58:09,040
called otids which proposed a novel

1012
00:58:09,040 --> 00:58:12,640
intuition detection system from the hcrl

1013
00:58:12,640 --> 00:58:14,400
lab in korea

1014
00:58:14,400 --> 00:58:15,200
so

1015
00:58:15,200 --> 00:58:17,520
they had three common attack scenarios

1016
00:58:17,520 --> 00:58:20,839
which is denial of service fuzzy and

1017
00:58:20,839 --> 00:58:22,400
impersonation

1018
00:58:22,400 --> 00:58:25,200
their data was publicly available

1019
00:58:25,200 --> 00:58:28,000
which is kind of hard to find in

1020
00:58:28,000 --> 00:58:30,079
automotive domain

1021
00:58:30,079 --> 00:58:32,720
the algorithm itself was fairly easy to

1022
00:58:32,720 --> 00:58:35,440
implement and so this seemed like a good

1023
00:58:35,440 --> 00:58:37,760
reference point to start off my uh

1024
00:58:37,760 --> 00:58:39,839
prototype

1025
00:58:39,839 --> 00:58:42,000
so i wanted to generate more of such

1026
00:58:42,000 --> 00:58:45,119
data so i used vector schenoe network

1027
00:58:45,119 --> 00:58:48,160
box it's basically a simulation tool and

1028
00:58:48,160 --> 00:58:50,480
use i use this and programmed more

1029
00:58:50,480 --> 00:58:52,720
attack data sets based on the reference

1030
00:58:52,720 --> 00:58:54,160
model that

1031
00:58:54,160 --> 00:58:55,920
i have with me

1032
00:58:55,920 --> 00:58:58,319
so some of the attack scenarios the

1033
00:58:58,319 --> 00:59:00,880
first one is denial of service

1034
00:59:00,880 --> 00:59:05,119
so as the name suggests the goal is to

1035
00:59:05,119 --> 00:59:08,000
either jam the canvas

1036
00:59:08,000 --> 00:59:11,599
or try to get the highest priority on

1037
00:59:11,599 --> 00:59:13,040
the canvas

1038
00:59:13,040 --> 00:59:16,000
so the way to do this is to inject

1039
00:59:16,000 --> 00:59:18,400
messages that would

1040
00:59:18,400 --> 00:59:20,640
that are the highest priority which in

1041
00:59:20,640 --> 00:59:22,640
case would be zero zero zero which is

1042
00:59:22,640 --> 00:59:24,240
the lowest you can go

1043
00:59:24,240 --> 00:59:27,040
you just try to just like spam it in a

1044
00:59:27,040 --> 00:59:30,000
very short period of time so either you

1045
00:59:30,000 --> 00:59:32,640
get the highest priority or

1046
00:59:32,640 --> 00:59:35,040
the canvas becomes invalid either of

1047
00:59:35,040 --> 00:59:36,240
this

1048
00:59:36,240 --> 00:59:39,839
uh becomes a denial of service attack

1049
00:59:39,839 --> 00:59:41,920
the next one is fuzzy

1050
00:59:41,920 --> 00:59:46,160
so it basically looks uh is a spoofing

1051
00:59:46,160 --> 00:59:47,200
attack

1052
00:59:47,200 --> 00:59:49,920
where it injects proof random can id and

1053
00:59:49,920 --> 00:59:53,040
data values so for example replay

1054
00:59:53,040 --> 00:59:56,240
attacks is a common example of a fuzzy

1055
00:59:56,240 --> 00:59:57,359
attack

1056
00:59:57,359 --> 00:59:58,839
so

1057
00:59:58,839 --> 01:00:02,079
uh and a few other examples could be

1058
01:00:02,079 --> 01:00:05,440
you have the right payload and data but

1059
01:00:05,440 --> 01:00:07,440
you send them in

1060
01:00:07,440 --> 01:00:10,400
wrong timings so you have a time that is

1061
01:00:10,400 --> 01:00:12,559
expected in a normal scenario but then

1062
01:00:12,559 --> 01:00:15,760
you just send it along in a

1063
01:00:15,760 --> 01:00:16,960
in a

1064
01:00:16,960 --> 01:00:19,839
different timing and another one is you

1065
01:00:19,839 --> 01:00:22,559
have the wrong data but then you send it

1066
01:00:22,559 --> 01:00:25,520
in the exact sequences that is expected

1067
01:00:25,520 --> 01:00:27,839
in a normal scenario so these are all

1068
01:00:27,839 --> 01:00:30,640
examples of a uh fuzzy attack

1069
01:00:30,640 --> 01:00:33,520
so the data format that was followed in

1070
01:00:33,520 --> 01:00:34,880
this um

1071
01:00:34,880 --> 01:00:36,079
uh

1072
01:00:36,079 --> 01:00:38,960
model was a request response model where

1073
01:00:38,960 --> 01:00:42,240
the request was identified with a data

1074
01:00:42,240 --> 01:00:45,280
length code of 0 and the response

1075
01:00:45,280 --> 01:00:48,880
had a data length code of either 4 or 8

1076
01:00:48,880 --> 01:00:51,920
and it had the same id so we can

1077
01:00:51,920 --> 01:00:54,160
recognize that it's a response and came

1078
01:00:54,160 --> 01:00:56,960
along with the payload after that so the

1079
01:00:56,960 --> 01:00:59,200
data was collected from a kia soul

1080
01:00:59,200 --> 01:01:01,680
vehicle and

1081
01:01:01,680 --> 01:01:05,200
for the fuzzy attack the authors had two

1082
01:01:05,200 --> 01:01:06,720
responses

1083
01:01:06,720 --> 01:01:08,640
and they randomized one of it as

1084
01:01:08,640 --> 01:01:10,799
original and the other response is

1085
01:01:10,799 --> 01:01:11,680
attack

1086
01:01:11,680 --> 01:01:14,640
so i graphed the packets

1087
01:01:14,640 --> 01:01:16,480
as they arrive

1088
01:01:16,480 --> 01:01:19,200
if you can look at the figure here

1089
01:01:19,200 --> 01:01:20,720
and

1090
01:01:20,720 --> 01:01:22,640
so anything

1091
01:01:22,640 --> 01:01:25,119
any packet any response that arrives

1092
01:01:25,119 --> 01:01:26,880
after the seventh

1093
01:01:26,880 --> 01:01:29,040
message is considered as a loss packet

1094
01:01:29,040 --> 01:01:31,520
so we only considered that particular

1095
01:01:31,520 --> 01:01:34,240
window as a legitimate ones

1096
01:01:34,240 --> 01:01:36,480
and from the figure in an attack free

1097
01:01:36,480 --> 01:01:37,520
state

1098
01:01:37,520 --> 01:01:39,520
uh most of the packets even if they

1099
01:01:39,520 --> 01:01:41,440
arrived made they arrive

1100
01:01:41,440 --> 01:01:44,319
they arrived at a pretty good uh uh time

1101
01:01:44,319 --> 01:01:46,079
interval it didn't take too long for

1102
01:01:46,079 --> 01:01:47,200
time to

1103
01:01:47,200 --> 01:01:49,760
uh get the response to arrive

1104
01:01:49,760 --> 01:01:52,000
but if you look at denial of service and

1105
01:01:52,000 --> 01:01:55,680
fuzzing when i graphed the arrival time

1106
01:01:55,680 --> 01:01:57,839
you can see that they significantly

1107
01:01:57,839 --> 01:02:00,559
increased in both these scenarios

1108
01:02:00,559 --> 01:02:03,200
so here you see zero zero zero zero zero

1109
01:02:03,200 --> 01:02:05,119
zero which means an attack is happening

1110
01:02:05,119 --> 01:02:08,240
and the response came much much later

1111
01:02:08,240 --> 01:02:10,720
and in fuzzing as i mentioned there's

1112
01:02:10,720 --> 01:02:13,359
two responses and they randomly chose

1113
01:02:13,359 --> 01:02:15,520
this to be the legitimate one

1114
01:02:15,520 --> 01:02:16,960
so

1115
01:02:16,960 --> 01:02:19,760
as usual you can just look at the graphs

1116
01:02:19,760 --> 01:02:21,680
you can just see oh there is something

1117
01:02:21,680 --> 01:02:23,520
happening there is an attack that's got

1118
01:02:23,520 --> 01:02:25,680
happening here you know it does not look

1119
01:02:25,680 --> 01:02:27,920
normal or it does not look like it's in

1120
01:02:27,920 --> 01:02:30,160
an attack free state so that's a very

1121
01:02:30,160 --> 01:02:31,839
good indicator

1122
01:02:31,839 --> 01:02:33,599
so uh

1123
01:02:33,599 --> 01:02:36,160
with the help of my team we added more

1124
01:02:36,160 --> 01:02:37,920
machine and deep learning features to

1125
01:02:37,920 --> 01:02:39,119
this model

1126
01:02:39,119 --> 01:02:43,520
and tested it and it came from 85 to 94

1127
01:02:43,520 --> 01:02:45,520
on the pc

1128
01:02:45,520 --> 01:02:47,280
which looked good right the numbers look

1129
01:02:47,280 --> 01:02:49,839
good but then i realized one thing they

1130
01:02:49,839 --> 01:02:52,559
didn't mean anything when i requested

1131
01:02:52,559 --> 01:02:54,559
data from the original equipment

1132
01:02:54,559 --> 01:02:56,079
manufacturers

1133
01:02:56,079 --> 01:02:59,119
i realized that most candida they do not

1134
01:02:59,119 --> 01:03:01,920
follow the message request format at all

1135
01:03:01,920 --> 01:03:05,280
and instead follow the sequencing format

1136
01:03:05,280 --> 01:03:08,559
so which means what i had implemented

1137
01:03:08,559 --> 01:03:11,839
was a corner case scenario and not the

1138
01:03:11,839 --> 01:03:12,880
norm

1139
01:03:12,880 --> 01:03:15,280
so one of the biggest takeaways that i

1140
01:03:15,280 --> 01:03:17,440
got was to never to trust the research

1141
01:03:17,440 --> 01:03:20,799
scope blindly even if it was highly

1142
01:03:20,799 --> 01:03:22,720
uh uh silent

1143
01:03:22,720 --> 01:03:25,200
research so it was back to the drawing

1144
01:03:25,200 --> 01:03:27,680
board so this time i wanted to create a

1145
01:03:27,680 --> 01:03:30,960
proof of concept and i was very careful

1146
01:03:30,960 --> 01:03:33,280
to model the attack data based on real

1147
01:03:33,280 --> 01:03:36,160
industry data and instead of testing it

1148
01:03:36,160 --> 01:03:39,839
on pc i tested it on ip03 which is to

1149
01:03:39,839 --> 01:03:42,640
say it's high-powered ecu so this ecu is

1150
01:03:42,640 --> 01:03:45,839
mainly used for autonomous vehicle

1151
01:03:45,839 --> 01:03:48,079
capabilities

1152
01:03:48,079 --> 01:03:51,200
so the attack scenarios were uh similar

1153
01:03:51,200 --> 01:03:53,280
to the prototype ones

1154
01:03:53,280 --> 01:03:54,880
denial of service

1155
01:03:54,880 --> 01:03:55,920
and for

1156
01:03:55,920 --> 01:03:57,599
fussing

1157
01:03:57,599 --> 01:04:00,240
i also included the categories of can

1158
01:04:00,240 --> 01:04:02,079
messages account

1159
01:04:02,079 --> 01:04:05,039
so for fuzzing i send packets that model

1160
01:04:05,039 --> 01:04:08,240
the original one but it's injected in a

1161
01:04:08,240 --> 01:04:10,240
timing that is different from what is

1162
01:04:10,240 --> 01:04:13,200
expected in a normal scenario and it

1163
01:04:13,200 --> 01:04:14,880
applies to both the periodic and

1164
01:04:14,880 --> 01:04:17,920
eventual messages but for frequency it's

1165
01:04:17,920 --> 01:04:20,079
essentially the same as buzzing but it

1166
01:04:20,079 --> 01:04:22,400
only applies to periodic messages and

1167
01:04:22,400 --> 01:04:25,280
not even triggered messages i also added

1168
01:04:25,280 --> 01:04:27,359
an additional attack scenario which is

1169
01:04:27,359 --> 01:04:30,160
any id which is not recognized by the

1170
01:04:30,160 --> 01:04:32,640
original equipment manufacturer

1171
01:04:32,640 --> 01:04:35,440
is also considered as an attack packet

1172
01:04:35,440 --> 01:04:38,880
so i labeled that as alien id

1173
01:04:38,880 --> 01:04:40,960
so this was the model for the clip of

1174
01:04:40,960 --> 01:04:42,960
concept so i would have the normal data

1175
01:04:42,960 --> 01:04:46,000
set and there would be a pre-processing

1176
01:04:46,000 --> 01:04:49,599
algorithm that would uh understand the

1177
01:04:49,599 --> 01:04:51,119
um

1178
01:04:51,119 --> 01:04:53,920
how it behaves in a normal scenario so

1179
01:04:53,920 --> 01:04:55,680
once they knew that

1180
01:04:55,680 --> 01:04:58,799
uh we generated attack datasets using

1181
01:04:58,799 --> 01:05:01,599
the canoeing vector box and fed it into

1182
01:05:01,599 --> 01:05:03,960
the ip this is the

1183
01:05:03,960 --> 01:05:07,599
ip03 so there were two detectors which

1184
01:05:07,599 --> 01:05:09,119
are part of the intrusion detection

1185
01:05:09,119 --> 01:05:11,520
system the first one is a logistic

1186
01:05:11,520 --> 01:05:14,720
detector or a statistic based algorithm

1187
01:05:14,720 --> 01:05:17,680
which takes really less resources and

1188
01:05:17,680 --> 01:05:20,160
weeds out common attack scenarios like

1189
01:05:20,160 --> 01:05:22,880
denial of service and alien id

1190
01:05:22,880 --> 01:05:24,960
the next one was a learning based

1191
01:05:24,960 --> 01:05:27,359
detector which used a deep learning

1192
01:05:27,359 --> 01:05:29,920
based algorithm to filter out the fuzzy

1193
01:05:29,920 --> 01:05:32,640
and frequency eventually it would just

1194
01:05:32,640 --> 01:05:34,319
give out if it's a zero which is the

1195
01:05:34,319 --> 01:05:36,799
normal or one which is an attack

1196
01:05:36,799 --> 01:05:39,680
so um the results looked something like

1197
01:05:39,680 --> 01:05:42,559
this for these statistic based ones

1198
01:05:42,559 --> 01:05:45,280
so for the alien id it's anywhere from

1199
01:05:45,280 --> 01:05:49,039
898 to 100 which is really really good

1200
01:05:49,039 --> 01:05:51,520
and for the denial of service it was

1201
01:05:51,520 --> 01:05:53,760
either 82 to 83

1202
01:05:53,760 --> 01:05:56,240
which seems really good and it's very

1203
01:05:56,240 --> 01:05:58,880
comparable to the industry standard

1204
01:05:58,880 --> 01:06:01,039
so if you combine both of them the

1205
01:06:01,039 --> 01:06:04,160
accuracy goes a little bit up to close

1206
01:06:04,160 --> 01:06:05,839
it to 91

1207
01:06:05,839 --> 01:06:08,640
so this seems pretty good and in line

1208
01:06:08,640 --> 01:06:11,280
with what i had wanted

1209
01:06:11,280 --> 01:06:13,920
for the uh

1210
01:06:13,920 --> 01:06:16,720
deep learning algorithms it ranged from

1211
01:06:16,720 --> 01:06:19,119
85 to 98 percent

1212
01:06:19,119 --> 01:06:23,119
and this screenshot here is from ip03

1213
01:06:23,119 --> 01:06:24,799
once the deep learning algorithm was

1214
01:06:24,799 --> 01:06:27,359
executed so it just says that the

1215
01:06:27,359 --> 01:06:30,079
accuracy is 100 here for that particular

1216
01:06:30,079 --> 01:06:31,200
data set

1217
01:06:31,200 --> 01:06:33,920
and it just gives you some statistic of

1218
01:06:33,920 --> 01:06:36,319
the messages that were being processed

1219
01:06:36,319 --> 01:06:37,119
so

1220
01:06:37,119 --> 01:06:38,880
what were the challenges that i

1221
01:06:38,880 --> 01:06:43,200
encountered during this this phase of um

1222
01:06:43,200 --> 01:06:44,240
concept

1223
01:06:44,240 --> 01:06:47,200
so the first one would be to fit the

1224
01:06:47,200 --> 01:06:50,079
statistic-based algorithm into the mcu

1225
01:06:50,079 --> 01:06:52,720
since it takes up very less resources

1226
01:06:52,720 --> 01:06:55,359
and to redux the common attacks like dos

1227
01:06:55,359 --> 01:06:56,640
and alien

1228
01:06:56,640 --> 01:06:58,559
but then i found out that there was no

1229
01:06:58,559 --> 01:07:00,960
straightforward way to get the idea and

1230
01:07:00,960 --> 01:07:03,280
time stamp in iq03

1231
01:07:03,280 --> 01:07:05,599
because of the way that it was designed

1232
01:07:05,599 --> 01:07:08,640
and i needed to like make some um

1233
01:07:08,640 --> 01:07:11,680
changes in on a deeper level in order to

1234
01:07:11,680 --> 01:07:13,280
be able to do that

1235
01:07:13,280 --> 01:07:14,960
so um

1236
01:07:14,960 --> 01:07:17,119
and second challenge which you might all

1237
01:07:17,119 --> 01:07:19,680
have guessed is that we need to make

1238
01:07:19,680 --> 01:07:21,920
sure that the incision detection system

1239
01:07:21,920 --> 01:07:24,480
is not the sole focus of the asu itself

1240
01:07:24,480 --> 01:07:26,160
so it should not take up a lot of the

1241
01:07:26,160 --> 01:07:28,880
resources be it if you put it on system

1242
01:07:28,880 --> 01:07:31,680
ship or if you put it on mcu it has to

1243
01:07:31,680 --> 01:07:35,200
take much it has to perform uh very well

1244
01:07:35,200 --> 01:07:37,599
and take up very little resources as

1245
01:07:37,599 --> 01:07:39,359
possible

1246
01:07:39,359 --> 01:07:41,039
so uh

1247
01:07:41,039 --> 01:07:43,760
these the proof of concept was a fairly

1248
01:07:43,760 --> 01:07:45,280
good success

1249
01:07:45,280 --> 01:07:47,119
but

1250
01:07:47,119 --> 01:07:50,000
that it that's brought me to a very

1251
01:07:50,000 --> 01:07:52,799
important question and the question was

1252
01:07:52,799 --> 01:07:56,720
i used data sets which are simulated and

1253
01:07:56,720 --> 01:07:58,880
the ids algorithms did really well on

1254
01:07:58,880 --> 01:08:00,400
them so it's great

1255
01:08:00,400 --> 01:08:01,440
but

1256
01:08:01,440 --> 01:08:05,359
that does not equal to a real car so if

1257
01:08:05,359 --> 01:08:07,680
you actually deploy this ids algorithms

1258
01:08:07,680 --> 01:08:09,200
in a real car

1259
01:08:09,200 --> 01:08:11,520
would it still work the same way as it

1260
01:08:11,520 --> 01:08:14,559
is intended to because in a real car you

1261
01:08:14,559 --> 01:08:17,439
can have like some latency some delay

1262
01:08:17,439 --> 01:08:20,719
some legitimate packets can come later

1263
01:08:20,719 --> 01:08:23,198
than they're expected to and what

1264
01:08:23,198 --> 01:08:25,120
happens to the ideas algorithms then

1265
01:08:25,120 --> 01:08:27,839
would it would it still perform uh as

1266
01:08:27,839 --> 01:08:30,640
it's supposed to or would it give you a

1267
01:08:30,640 --> 01:08:32,238
lot of false positives and false

1268
01:08:32,238 --> 01:08:34,319
negatives which we want to avoid

1269
01:08:34,319 --> 01:08:37,439
so in order to answer the question i

1270
01:08:37,439 --> 01:08:41,198
proposed the scan security framework so

1271
01:08:41,198 --> 01:08:43,359
i wanted to test i wanted to set up a

1272
01:08:43,359 --> 01:08:45,520
can test build which can be used to run

1273
01:08:45,520 --> 01:08:48,479
a canvas in a realistic environment

1274
01:08:48,479 --> 01:08:51,600
and then develop a pentas tool which can

1275
01:08:51,600 --> 01:08:53,759
inject uh

1276
01:08:53,759 --> 01:08:56,080
messages into the cam

1277
01:08:56,080 --> 01:08:58,799
so this is basically a this would be

1278
01:08:58,799 --> 01:09:00,799
like an attack toolbox that injects

1279
01:09:00,799 --> 01:09:03,198
messages into the canned test bed in a

1280
01:09:03,198 --> 01:09:05,679
live environment so one of the main

1281
01:09:05,679 --> 01:09:08,158
outputs that you can get from here is a

1282
01:09:08,158 --> 01:09:11,600
very realistic attack data set

1283
01:09:11,600 --> 01:09:14,479
that can be fed into the ibs algorithms

1284
01:09:14,479 --> 01:09:16,880
you can see how the algorithm is fair

1285
01:09:16,880 --> 01:09:18,799
you can make modifications if it's not

1286
01:09:18,799 --> 01:09:20,960
up to expectations and then you can

1287
01:09:20,960 --> 01:09:22,880
again feed it over here so it's like a

1288
01:09:22,880 --> 01:09:25,520
continuous loop uh for improvement of

1289
01:09:25,520 --> 01:09:27,040
security

1290
01:09:27,040 --> 01:09:30,880
so uh an example which is a very uh

1291
01:09:30,880 --> 01:09:34,080
example of a can test but sera is i have

1292
01:09:34,080 --> 01:09:37,120
a wired can harness setup with a lot of

1293
01:09:37,120 --> 01:09:38,238
nodes

1294
01:09:38,238 --> 01:09:39,040
and

1295
01:09:39,040 --> 01:09:42,319
then you know some of which is uh uses

1296
01:09:42,319 --> 01:09:44,640
arduino and simulates

1297
01:09:44,640 --> 01:09:45,679
different

1298
01:09:45,679 --> 01:09:48,640
uh components in a car like a door

1299
01:09:48,640 --> 01:09:51,920
engine hvac and then there are some

1300
01:09:51,920 --> 01:09:54,800
nodes which have the much advanced pc

1301
01:09:54,800 --> 01:09:57,679
use from just a like ip03

1302
01:09:57,679 --> 01:10:00,400
so and some nodes which are left open so

1303
01:10:00,400 --> 01:10:03,199
we can add more issues later on we may

1304
01:10:03,199 --> 01:10:06,239
want to continue testing and this this

1305
01:10:06,239 --> 01:10:10,159
connects to a usb cam interface and

1306
01:10:10,159 --> 01:10:12,480
and then connects to a pc which

1307
01:10:12,480 --> 01:10:14,400
runs the software message induction

1308
01:10:14,400 --> 01:10:17,280
toolbox or the pentas toolbox which

1309
01:10:17,280 --> 01:10:20,000
um performs the attacks needed for

1310
01:10:20,000 --> 01:10:22,080
intuition detecting systems

1311
01:10:22,080 --> 01:10:25,520
so uh you can also have other related

1312
01:10:25,520 --> 01:10:28,000
components for the ecu's to work like

1313
01:10:28,000 --> 01:10:30,960
sensors or actuators and other platform

1314
01:10:30,960 --> 01:10:34,480
environments to make this run smoothly

1315
01:10:34,480 --> 01:10:36,080
and uh

1316
01:10:36,080 --> 01:10:39,520
so the pen testing box itself would uh

1317
01:10:39,520 --> 01:10:42,080
start off with emulating denial of

1318
01:10:42,080 --> 01:10:45,760
service attacks uh fuzzy replay or

1319
01:10:45,760 --> 01:10:48,480
management attacks then frequency

1320
01:10:48,480 --> 01:10:51,520
attacks by manipulating chaoticity

1321
01:10:51,520 --> 01:10:55,120
and to be primarily developed in python

1322
01:10:55,120 --> 01:10:59,440
so uh with this i'm going to go to the

1323
01:10:59,440 --> 01:11:02,159
end of my presentation so here are some

1324
01:11:02,159 --> 01:11:03,840
of the key takeaways that i want to

1325
01:11:03,840 --> 01:11:05,040
share with you

1326
01:11:05,040 --> 01:11:07,600
one is that if you have a highly cited

1327
01:11:07,600 --> 01:11:10,239
research it doesn't always mean that

1328
01:11:10,239 --> 01:11:13,360
it's useful in the industry so always

1329
01:11:13,360 --> 01:11:16,320
model a system based on real data

1330
01:11:16,320 --> 01:11:17,280
and

1331
01:11:17,280 --> 01:11:21,120
my opinion is that hybrid idf is the

1332
01:11:21,120 --> 01:11:23,199
best bet moving forward

1333
01:11:23,199 --> 01:11:26,080
uh this uh flowchart here represents a

1334
01:11:26,080 --> 01:11:28,719
model for my proof of concept which took

1335
01:11:28,719 --> 01:11:31,600
up very less resources so i had a

1336
01:11:31,600 --> 01:11:34,159
statistic based algorithm which weeds

1337
01:11:34,159 --> 01:11:36,480
out most of the attacks and uh deep

1338
01:11:36,480 --> 01:11:37,920
learning one which

1339
01:11:37,920 --> 01:11:40,719
uh we did on the advanced ones so if you

1340
01:11:40,719 --> 01:11:42,800
want if uh companies want to do

1341
01:11:42,800 --> 01:11:46,000
something more specific for payload

1342
01:11:46,000 --> 01:11:48,159
it can be just added to this model over

1343
01:11:48,159 --> 01:11:50,080
here without compromising on the

1344
01:11:50,080 --> 01:11:53,520
resources which means that it would be a

1345
01:11:53,520 --> 01:11:56,080
really good solution in my opinion

1346
01:11:56,080 --> 01:11:59,520
and finally i do not consider my

1347
01:11:59,520 --> 01:12:01,840
prototype to be a total failure because

1348
01:12:01,840 --> 01:12:04,560
i got a chance to be here and tell you

1349
01:12:04,560 --> 01:12:06,159
what not to do

1350
01:12:06,159 --> 01:12:07,679
so

1351
01:12:07,679 --> 01:12:10,400
with that i would be ending my

1352
01:12:10,400 --> 01:12:14,480
talk and i'm open to questions now from

1353
01:12:14,480 --> 01:12:16,640
the audience

1354
01:12:16,640 --> 01:12:23,360
[Applause]

1355
01:12:23,360 --> 01:12:25,040
hello

1356
01:12:25,040 --> 01:12:27,520
all right folks so it is question time

1357
01:12:27,520 --> 01:12:30,320
does anyone have any questions for oh we

1358
01:12:30,320 --> 01:12:31,840
have a questionnaire

1359
01:12:31,840 --> 01:12:34,719
come up please

1360
01:12:34,800 --> 01:12:36,800
i have a question related to your ids

1361
01:12:36,800 --> 01:12:37,679
model

1362
01:12:37,679 --> 01:12:40,080
uh and related to your oem data that you

1363
01:12:40,080 --> 01:12:41,360
received

1364
01:12:41,360 --> 01:12:43,840
so isn't it like that you probably have

1365
01:12:43,840 --> 01:12:45,760
to train a model for each different type

1366
01:12:45,760 --> 01:12:47,199
of car model because the data will

1367
01:12:47,199 --> 01:12:49,280
always look different maybe even inside

1368
01:12:49,280 --> 01:12:52,559
the same oem model line

1369
01:12:53,040 --> 01:12:56,239
uh okay yes so uh basically if you use

1370
01:12:56,239 --> 01:12:58,800
the flow based ids which is what i do

1371
01:12:58,800 --> 01:13:02,960
the ids would be different for each uh

1372
01:13:02,960 --> 01:13:05,679
each vehicle model because each uh oem

1373
01:13:05,679 --> 01:13:07,760
have different ids and different way of

1374
01:13:07,760 --> 01:13:09,120
processing them

1375
01:13:09,120 --> 01:13:12,320
but the logic itself would be same but

1376
01:13:12,320 --> 01:13:14,239
you have to as you're right you have to

1377
01:13:14,239 --> 01:13:17,440
retrain it for every a single model uh

1378
01:13:17,440 --> 01:13:20,159
depending upon their their own um ids

1379
01:13:20,159 --> 01:13:22,080
and specifications that the core

1380
01:13:22,080 --> 01:13:24,400
algorithms would remain the same if you

1381
01:13:24,400 --> 01:13:27,199
use of the waste model

1382
01:13:27,199 --> 01:13:28,880
okay thanks and question two if you

1383
01:13:28,880 --> 01:13:31,040
don't mind

1384
01:13:31,040 --> 01:13:32,320
um in the very beginning you were

1385
01:13:32,320 --> 01:13:33,360
talking about using message

1386
01:13:33,360 --> 01:13:35,760
authentication codes for protecting con

1387
01:13:35,760 --> 01:13:38,400
bus messages

1388
01:13:38,400 --> 01:13:39,679
how do you actually distribute the

1389
01:13:39,679 --> 01:13:42,800
symmetric key for that

1390
01:13:43,040 --> 01:13:44,880
how do you what how do you distribute

1391
01:13:44,880 --> 01:13:46,880
the key that is used for the hmac for

1392
01:13:46,880 --> 01:13:49,440
the microphone this key is distributed

1393
01:13:49,440 --> 01:13:52,239
along the um

1394
01:13:52,239 --> 01:13:54,880
the extended cam frame so it is sent

1395
01:13:54,880 --> 01:13:56,480
along with the frame so when you do the

1396
01:13:56,480 --> 01:13:58,480
checking you would actually check if

1397
01:13:58,480 --> 01:14:00,960
it's it works or not on the receiver's

1398
01:14:00,960 --> 01:14:01,920
end

1399
01:14:01,920 --> 01:14:04,400
so it's sent along it's distributed

1400
01:14:04,400 --> 01:14:06,480
along the cam frame itself

1401
01:14:06,480 --> 01:14:08,560
so how do you secure those messages with

1402
01:14:08,560 --> 01:14:10,960
the key

1403
01:14:12,800 --> 01:14:16,980
so um let me just go back to this slide

1404
01:14:16,980 --> 01:14:20,860
[Music]

1405
01:14:23,679 --> 01:14:26,719
okay so you have a sender and receiver

1406
01:14:26,719 --> 01:14:29,040
side so you basically have a you

1407
01:14:29,040 --> 01:14:31,679
generate a mac and then you have on a

1408
01:14:31,679 --> 01:14:34,159
receiver side you would uh verify the

1409
01:14:34,159 --> 01:14:36,000
key that is being sent

1410
01:14:36,000 --> 01:14:38,560
so i think like you would send this on a

1411
01:14:38,560 --> 01:14:42,400
can fd and you would like uh based on

1412
01:14:42,400 --> 01:14:45,199
the uh agreement before you would just

1413
01:14:45,199 --> 01:14:47,600
verify and if it's if it's not okay then

1414
01:14:47,600 --> 01:14:49,120
you know that someone has tampered with

1415
01:14:49,120 --> 01:14:52,239
a message and if it's okay then uh you

1416
01:14:52,239 --> 01:14:55,360
would proceed with the uh

1417
01:14:55,360 --> 01:14:57,920
the other other functionalities right

1418
01:14:57,920 --> 01:15:01,520
but where do we get a secret key form

1419
01:15:01,600 --> 01:15:03,280
oh

1420
01:15:03,280 --> 01:15:04,880
okay so

1421
01:15:04,880 --> 01:15:06,719
uh

1422
01:15:06,719 --> 01:15:09,040
i think this is uh i'm not really sure

1423
01:15:09,040 --> 01:15:10,719
but i think this is

1424
01:15:10,719 --> 01:15:13,360
randomly generated this is something i

1425
01:15:13,360 --> 01:15:17,120
do not completely know yet

1426
01:15:17,120 --> 01:15:19,840
okay thank you

1427
01:15:21,520 --> 01:15:24,000
all right are there any other questions

1428
01:15:24,000 --> 01:15:26,400
today

1429
01:15:27,280 --> 01:15:29,360
so then um with that we're going to

1430
01:15:29,360 --> 01:15:31,440
close this session thank you so much for

1431
01:15:31,440 --> 01:15:34,560
being here shiva ranjani and um have a

1432
01:15:34,560 --> 01:15:36,080
great day

1433
01:15:36,080 --> 01:15:38,030
thank you

1434
01:15:38,030 --> 01:15:43,199
[Applause]

1435
01:15:43,199 --> 01:15:45,360
so folks i think is there a break right

1436
01:15:45,360 --> 01:15:48,640
now morton there's a break so head out

1437
01:15:48,640 --> 01:15:51,440
stretch your legs get some air and come

1438
01:15:51,440 --> 01:15:55,400
back for some great talks

1439
01:17:08,719 --> 01:17:11,719
foreign

1440
01:44:56,000 --> 01:44:58,400
hello

1441
01:45:01,600 --> 01:45:04,159
so we start exactly on time hello

1442
01:45:04,159 --> 01:45:05,440
everyone

1443
01:45:05,440 --> 01:45:08,239
nice to meet you all here in the ramford

1444
01:45:08,239 --> 01:45:09,760
room or in the

1445
01:45:09,760 --> 01:45:12,000
moonshot state

1446
01:45:12,000 --> 01:45:14,080
my name is oliver nettinger i am seeing

1447
01:45:14,080 --> 01:45:15,600
the next block

1448
01:45:15,600 --> 01:45:17,840
and i'm very happy to introduce to you

1449
01:45:17,840 --> 01:45:20,480
today zara mada

1450
01:45:20,480 --> 01:45:22,400
she's having her talk about bluetooth

1451
01:45:22,400 --> 01:45:25,119
low energy devices and how to i would

1452
01:45:25,119 --> 01:45:27,280
say hector

1453
01:45:27,280 --> 01:45:29,360
and yeah i think it's a super

1454
01:45:29,360 --> 01:45:31,280
interesting topic because probably

1455
01:45:31,280 --> 01:45:33,040
everyone in the room has at least one

1456
01:45:33,040 --> 01:45:34,560
device that supports bluetooth low

1457
01:45:34,560 --> 01:45:37,360
energy and as i've heard and got to know

1458
01:45:37,360 --> 01:45:38,320
it's a

1459
01:45:38,320 --> 01:45:40,320
it's not a very simple protocol and the

1460
01:45:40,320 --> 01:45:42,400
specifications seem to be pretty insane

1461
01:45:42,400 --> 01:45:43,280
so

1462
01:45:43,280 --> 01:45:45,199
i'm very much looking forward to learn

1463
01:45:45,199 --> 01:45:47,040
about bluetooth slow energy hacking

1464
01:45:47,040 --> 01:45:48,719
today and

1465
01:45:48,719 --> 01:45:51,840
please spend a warm applause for zaga

1466
01:45:51,840 --> 01:45:52,639
and

1467
01:45:52,639 --> 01:45:56,040
enjoy the talk

1468
01:46:02,480 --> 01:46:03,440
okay

1469
01:46:03,440 --> 01:46:05,520
hello uh

1470
01:46:05,520 --> 01:46:07,760
hello everybody and welcome to my talk

1471
01:46:07,760 --> 01:46:10,480
uh hacking like exploit development for

1472
01:46:10,480 --> 01:46:12,800
bluetooth low energy let me first

1473
01:46:12,800 --> 01:46:14,159
introduce myself

1474
01:46:14,159 --> 01:46:16,320
my name is sara mada i'm a security

1475
01:46:16,320 --> 01:46:18,239
analyst at inside attack logic whereby

1476
01:46:18,239 --> 01:46:20,000
my main fields are iot and hardware

1477
01:46:20,000 --> 01:46:22,320
hacking web at network planner

1478
01:46:22,320 --> 01:46:24,080
penetration test as well as the

1479
01:46:24,080 --> 01:46:26,880
bluetooth technology

1480
01:46:26,880 --> 01:46:29,679
a few words to my company

1481
01:46:29,679 --> 01:46:32,239
inside attack logic was founded 2014 in

1482
01:46:32,239 --> 01:46:33,840
munich where we also have our

1483
01:46:33,840 --> 01:46:36,000
headquarters we are doing mainly

1484
01:46:36,000 --> 01:46:40,440
offensive security so

1485
01:46:40,639 --> 01:46:43,199
red and purple teaming penetration test

1486
01:46:43,199 --> 01:46:45,600
as well as security consulting

1487
01:46:45,600 --> 01:46:46,719
so

1488
01:46:46,719 --> 01:46:49,040
bluetooth low energy what is this do we

1489
01:46:49,040 --> 01:46:52,000
need this is this important um

1490
01:46:52,000 --> 01:46:54,159
if you have a look at this diagram which

1491
01:46:54,159 --> 01:46:56,480
is provided by the bluetooth stick the

1492
01:46:56,480 --> 01:46:58,239
special interest group

1493
01:46:58,239 --> 01:47:00,560
in the yearly market update this

1494
01:47:00,560 --> 01:47:02,480
bluetooth special interest group is

1495
01:47:02,480 --> 01:47:04,159
responsible for publishing and

1496
01:47:04,159 --> 01:47:07,440
maintaining the bluetooth specification

1497
01:47:07,440 --> 01:47:09,119
and if we look at this diagram then we

1498
01:47:09,119 --> 01:47:12,000
can see that the estimate a total of

1499
01:47:12,000 --> 01:47:14,639
nearly of over 5 billion bluetooth low

1500
01:47:14,639 --> 01:47:17,199
energy devices in 2022

1501
01:47:17,199 --> 01:47:18,719
and if you compare this to the world

1502
01:47:18,719 --> 01:47:20,159
population

1503
01:47:20,159 --> 01:47:21,800
which is uh over

1504
01:47:21,800 --> 01:47:25,600
7.9 billion people then uh probably it's

1505
01:47:25,600 --> 01:47:28,080
quite an interesting topic and most of

1506
01:47:28,080 --> 01:47:29,920
you uh

1507
01:47:29,920 --> 01:47:32,000
at least have a smartphone which uh i

1508
01:47:32,000 --> 01:47:36,159
assume to be bluetooth uh capable

1509
01:47:36,159 --> 01:47:37,199
so

1510
01:47:37,199 --> 01:47:40,480
what about security

1511
01:47:44,960 --> 01:47:47,040
we can divide the vulnerabilities in

1512
01:47:47,040 --> 01:47:49,440
bluetooth and for categories there are

1513
01:47:49,440 --> 01:47:52,239
general flaws which relate to every

1514
01:47:52,239 --> 01:47:54,719
wireless protocol as also wi-fi for

1515
01:47:54,719 --> 01:47:56,480
example

1516
01:47:56,480 --> 01:47:57,360
so

1517
01:47:57,360 --> 01:47:59,520
everyone can send packets over the air

1518
01:47:59,520 --> 01:48:01,920
so jamming a connection and denial of

1519
01:48:01,920 --> 01:48:05,119
service attacks are very easy to realize

1520
01:48:05,119 --> 01:48:06,239
the next

1521
01:48:06,239 --> 01:48:08,000
big problem is

1522
01:48:08,000 --> 01:48:10,560
our configuration issue so simplified

1523
01:48:10,560 --> 01:48:12,000
set

1524
01:48:12,000 --> 01:48:13,920
if you do not use any encryption then

1525
01:48:13,920 --> 01:48:17,199
it's probably not secure

1526
01:48:17,679 --> 01:48:20,639
a big problem from uh for this protocol

1527
01:48:20,639 --> 01:48:23,119
itself our design issues

1528
01:48:23,119 --> 01:48:25,520
um in the beginning of the protocol you

1529
01:48:25,520 --> 01:48:28,800
might already have heard about uh

1530
01:48:28,800 --> 01:48:31,280
the talk from mike ryan with low energy

1531
01:48:31,280 --> 01:48:33,760
comes low security

1532
01:48:33,760 --> 01:48:35,520
so the earlier version did not provide

1533
01:48:35,520 --> 01:48:37,679
any security in the pairing

1534
01:48:37,679 --> 01:48:39,520
at all

1535
01:48:39,520 --> 01:48:42,480
it's still in the newer versions which

1536
01:48:42,480 --> 01:48:44,880
tried to uh

1537
01:48:44,880 --> 01:48:47,840
we will come to this uh soon

1538
01:48:47,840 --> 01:48:50,280
still in the newer versions um many

1539
01:48:50,280 --> 01:48:52,159
vulnerabilities were discovered and

1540
01:48:52,159 --> 01:48:54,560
published and i think the

1541
01:48:54,560 --> 01:48:57,199
last one was at the end of the

1542
01:48:57,199 --> 01:49:00,880
of last year which i known about

1543
01:49:00,880 --> 01:49:02,639
and finally we have implementation

1544
01:49:02,639 --> 01:49:05,199
issues and implementation issues can uh

1545
01:49:05,199 --> 01:49:08,480
lead to very serious vulnerabilities of

1546
01:49:08,480 --> 01:49:10,719
there's one very impressive example the

1547
01:49:10,719 --> 01:49:12,400
bleeding bit

1548
01:49:12,400 --> 01:49:14,800
vulnerability which was discovered by

1549
01:49:14,800 --> 01:49:18,480
the armistice army's research lab

1550
01:49:18,480 --> 01:49:21,599
and hereby the researchers detected and

1551
01:49:21,599 --> 01:49:24,800
heaped based buffer overflow and the

1552
01:49:24,800 --> 01:49:27,280
handling of advertising package which

1553
01:49:27,280 --> 01:49:30,639
lead to code execution and finally could

1554
01:49:30,639 --> 01:49:32,239
lead to network

1555
01:49:32,239 --> 01:49:33,520
compromise

1556
01:49:33,520 --> 01:49:37,760
of the connected wi-fi network

1557
01:49:37,760 --> 01:49:39,280
i added a

1558
01:49:39,280 --> 01:49:42,639
sources for reference

1559
01:49:42,639 --> 01:49:45,360
so getting started if you start with

1560
01:49:45,360 --> 01:49:47,840
bluetooth energy you might

1561
01:49:47,840 --> 01:49:49,360
you have at first the bluetooth

1562
01:49:49,360 --> 01:49:50,960
specification

1563
01:49:50,960 --> 01:49:53,360
which is a very large document the

1564
01:49:53,360 --> 01:49:55,199
bluetooth specification the newest

1565
01:49:55,199 --> 01:49:59,520
version 5.3 is over 3000 pages large

1566
01:49:59,520 --> 01:50:03,520
and is quite overwhelming if you start

1567
01:50:03,520 --> 01:50:05,760
nevertheless we have not the time to

1568
01:50:05,760 --> 01:50:08,480
dive in that deep today but i will give

1569
01:50:08,480 --> 01:50:10,719
a short overview of the

1570
01:50:10,719 --> 01:50:11,599
of the

1571
01:50:11,599 --> 01:50:13,520
techniques we need for the for the later

1572
01:50:13,520 --> 01:50:14,800
exploit

1573
01:50:14,800 --> 01:50:17,119
after this we will discuss a tech

1574
01:50:17,119 --> 01:50:19,199
scenario have an overview of the mirage

1575
01:50:19,199 --> 01:50:21,599
framework which i prefer to use for my

1576
01:50:21,599 --> 01:50:24,000
exploit development

1577
01:50:24,000 --> 01:50:26,719
have here some implementation details

1578
01:50:26,719 --> 01:50:27,760
and

1579
01:50:27,760 --> 01:50:29,920
finally we have our demonstration and

1580
01:50:29,920 --> 01:50:32,800
the conclusion

1581
01:50:33,119 --> 01:50:35,679
if you start with bluetooth you have at

1582
01:50:35,679 --> 01:50:37,920
first to know that bluetooth has its own

1583
01:50:37,920 --> 01:50:40,719
protocol stack the protocol stack is

1584
01:50:40,719 --> 01:50:45,280
hereby divided into hosted controller

1585
01:50:45,360 --> 01:50:47,360
the host layers are marquee and blue are

1586
01:50:47,360 --> 01:50:50,159
regularly implemented in the

1587
01:50:50,159 --> 01:50:53,199
host operation system or your smartphone

1588
01:50:53,199 --> 01:50:56,080
and the controller layers are separated

1589
01:50:56,080 --> 01:51:00,480
in hardware so if you think for example

1590
01:51:00,480 --> 01:51:02,400
the easiest example here is if you have

1591
01:51:02,400 --> 01:51:05,119
a bluetooth usb dongle then the control

1592
01:51:05,119 --> 01:51:07,280
controller layers will be in this will

1593
01:51:07,280 --> 01:51:09,199
be implemented in this normal and the

1594
01:51:09,199 --> 01:51:10,960
host layers are implemented in the host

1595
01:51:10,960 --> 01:51:13,199
operation system the host controller

1596
01:51:13,199 --> 01:51:15,119
interface is then

1597
01:51:15,119 --> 01:51:18,159
implemented or realized via usb

1598
01:51:18,159 --> 01:51:21,280
might also other

1599
01:51:21,280 --> 01:51:23,679
interfaces are possible

1600
01:51:23,679 --> 01:51:25,520
the most important layers for us here

1601
01:51:25,520 --> 01:51:26,480
are the

1602
01:51:26,480 --> 01:51:28,400
probably the security manager the

1603
01:51:28,400 --> 01:51:30,800
security manager is responsible for the

1604
01:51:30,800 --> 01:51:33,599
security bluetooth

1605
01:51:33,599 --> 01:51:36,000
mainly for establishing a long-term key

1606
01:51:36,000 --> 01:51:39,040
and further distributing

1607
01:51:39,040 --> 01:51:42,320
encryption keys or for example

1608
01:51:42,320 --> 01:51:44,960
keys for address resolution

1609
01:51:44,960 --> 01:51:47,280
and the second layer which is involved

1610
01:51:47,280 --> 01:51:49,440
in security is the link layer which uses

1611
01:51:49,440 --> 01:51:50,560
this

1612
01:51:50,560 --> 01:51:53,360
previously established key

1613
01:51:53,360 --> 01:51:56,639
for the final encryption

1614
01:51:57,840 --> 01:52:00,239
so we can summarize the connection set

1615
01:52:00,239 --> 01:52:03,679
up as follows we have always

1616
01:52:03,679 --> 01:52:04,960
two

1617
01:52:04,960 --> 01:52:06,880
or the most cases we have two two

1618
01:52:06,880 --> 01:52:09,040
parties in the protocol the master slave

1619
01:52:09,040 --> 01:52:12,320
device the master device is uh usually

1620
01:52:12,320 --> 01:52:15,040
your smartphone or your computer

1621
01:52:15,040 --> 01:52:16,880
and the slave device are peripheral

1622
01:52:16,880 --> 01:52:19,440
devices as for example keyboards or

1623
01:52:19,440 --> 01:52:22,159
smart light bulbs or any other

1624
01:52:22,159 --> 01:52:24,800
smart iot product

1625
01:52:24,800 --> 01:52:25,760
um

1626
01:52:25,760 --> 01:52:28,880
this slave devices send advertisements

1627
01:52:28,880 --> 01:52:30,639
to make itself

1628
01:52:30,639 --> 01:52:33,520
discoverable for the master device

1629
01:52:33,520 --> 01:52:35,440
and the master device will then scan for

1630
01:52:35,440 --> 01:52:39,440
this advertisement and if it's

1631
01:52:39,520 --> 01:52:42,080
if this is the correct slave device to

1632
01:52:42,080 --> 01:52:44,000
connect and the connection requests are

1633
01:52:44,000 --> 01:52:47,119
sent and the connection on the

1634
01:52:47,119 --> 01:52:48,880
physical

1635
01:52:48,880 --> 01:52:51,119
layers are established

1636
01:52:51,119 --> 01:52:52,719
and

1637
01:52:52,719 --> 01:52:54,800
after this we have a service discovery

1638
01:52:54,800 --> 01:52:56,960
so every slave device offers services

1639
01:52:56,960 --> 01:52:59,440
for the host for the master device

1640
01:52:59,440 --> 01:53:01,360
to use

1641
01:53:01,360 --> 01:53:04,960
and if one of both devices decides that

1642
01:53:04,960 --> 01:53:06,719
it requires a

1643
01:53:06,719 --> 01:53:08,800
higher security then the pairing process

1644
01:53:08,800 --> 01:53:12,080
can be started

1645
01:53:12,080 --> 01:53:15,599
so pairing a bluetooth um

1646
01:53:15,599 --> 01:53:16,960
uh has

1647
01:53:16,960 --> 01:53:19,199
depends

1648
01:53:19,199 --> 01:53:21,440
at first on the version of the protocol

1649
01:53:21,440 --> 01:53:23,520
or of the

1650
01:53:23,520 --> 01:53:24,400
of the

1651
01:53:24,400 --> 01:53:28,000
hardware which is which version is

1652
01:53:28,000 --> 01:53:29,840
the hardware is capable of

1653
01:53:29,840 --> 01:53:32,159
and the other factor are input and

1654
01:53:32,159 --> 01:53:34,080
output capabilities input output

1655
01:53:34,080 --> 01:53:36,400
capabilities are for example displays or

1656
01:53:36,400 --> 01:53:38,960
keyboards

1657
01:53:38,960 --> 01:53:41,360
the earlier versions were the legacy

1658
01:53:41,360 --> 01:53:44,719
pairing so 4.0 and 4.1

1659
01:53:44,719 --> 01:53:47,280
uh here we have just works pesky entry

1660
01:53:47,280 --> 01:53:49,440
and out of bed pairing

1661
01:53:49,440 --> 01:53:52,080
out of band pairing we won't discuss it

1662
01:53:52,080 --> 01:53:53,679
today because out of band is everything

1663
01:53:53,679 --> 01:53:55,440
but it's not using bluetooth at a

1664
01:53:55,440 --> 01:53:57,199
protocol

1665
01:53:57,199 --> 01:54:00,320
just works pairing as the name says

1666
01:54:00,320 --> 01:54:03,599
just works so the user has no further

1667
01:54:03,599 --> 01:54:05,760
here's no further interaction from the

1668
01:54:05,760 --> 01:54:07,360
user required

1669
01:54:07,360 --> 01:54:09,840
and for past key entry

1670
01:54:09,840 --> 01:54:12,080
uh at least one device with a keyboard

1671
01:54:12,080 --> 01:54:14,159
and one device with a display is

1672
01:54:14,159 --> 01:54:16,400
necessary so here

1673
01:54:16,400 --> 01:54:18,960
the display device will present a pin

1674
01:54:18,960 --> 01:54:20,639
code you

1675
01:54:20,639 --> 01:54:22,880
i assume you already know this procedure

1676
01:54:22,880 --> 01:54:26,480
if you paired a bluetooth device earlier

1677
01:54:26,480 --> 01:54:28,960
and on the keyboard device you have to

1678
01:54:28,960 --> 01:54:31,920
insert this pin to finish the pairing

1679
01:54:31,920 --> 01:54:33,520
process

1680
01:54:33,520 --> 01:54:36,719
this legacy pairing is very broken and

1681
01:54:36,719 --> 01:54:38,480
i already mentioned the talk with low

1682
01:54:38,480 --> 01:54:40,800
energy comes low security and should no

1683
01:54:40,800 --> 01:54:42,239
longer be used

1684
01:54:42,239 --> 01:54:45,920
uh with version 4.2 the cq connection

1685
01:54:45,920 --> 01:54:47,920
feature was

1686
01:54:47,920 --> 01:54:50,080
introduced a secure connections are

1687
01:54:50,080 --> 01:54:51,679
based on an

1688
01:54:51,679 --> 01:54:53,679
elliptic curve diffie-hellman key

1689
01:54:53,679 --> 01:54:56,000
exchange

1690
01:54:56,000 --> 01:54:58,239
and also offer that just works and pass

1691
01:54:58,239 --> 01:54:59,760
key entry

1692
01:54:59,760 --> 01:55:01,520
pairing as well as out of band and

1693
01:55:01,520 --> 01:55:03,679
additionally here we have the numeric

1694
01:55:03,679 --> 01:55:07,199
comparison pairing autonomic comparison

1695
01:55:07,199 --> 01:55:09,520
means that on we have two devices with

1696
01:55:09,520 --> 01:55:11,280
our display and the both devices the

1697
01:55:11,280 --> 01:55:13,520
same pin will be presented and if the

1698
01:55:13,520 --> 01:55:14,400
user

1699
01:55:14,400 --> 01:55:16,239
compares the spins it verifies that the

1700
01:55:16,239 --> 01:55:18,000
pins are identical then the pairing is

1701
01:55:18,000 --> 01:55:19,280
complete

1702
01:55:19,280 --> 01:55:21,199
here we have to set the

1703
01:55:21,199 --> 01:55:23,840
have to say that just works pairing

1704
01:55:23,840 --> 01:55:26,400
is an unauthenticated pairing so that

1705
01:55:26,400 --> 01:55:28,000
just works parent

1706
01:55:28,000 --> 01:55:30,080
has no protection for many middle

1707
01:55:30,080 --> 01:55:31,599
attacks

1708
01:55:31,599 --> 01:55:34,320
okay so

1709
01:55:34,320 --> 01:55:36,639
reversals are very good in bluetooth

1710
01:55:36,639 --> 01:55:39,440
hacking so we have to do something other

1711
01:55:39,440 --> 01:55:40,800
funny

1712
01:55:40,800 --> 01:55:42,800
and

1713
01:55:42,800 --> 01:55:44,880
what is

1714
01:55:44,880 --> 01:55:46,880
widely accepted are these bluetooth

1715
01:55:46,880 --> 01:55:49,440
keyboards and i have to state that this

1716
01:55:49,440 --> 01:55:51,679
is not manufacturer related it's just an

1717
01:55:51,679 --> 01:55:52,800
example

1718
01:55:52,800 --> 01:55:54,159
this is um

1719
01:55:54,159 --> 01:55:58,960
this flaw relates to the to the specific

1720
01:55:58,960 --> 01:56:01,119
service specification so in this case

1721
01:56:01,119 --> 01:56:03,679
the human interface device service

1722
01:56:03,679 --> 01:56:05,920
and what we can do here

1723
01:56:05,920 --> 01:56:06,800
we can

1724
01:56:06,800 --> 01:56:08,560
man in the middle such a bluetooth

1725
01:56:08,560 --> 01:56:10,800
keyboard and turn the legitimate

1726
01:56:10,800 --> 01:56:13,199
keyboard into an

1727
01:56:13,199 --> 01:56:14,880
rubber ducky device

1728
01:56:14,880 --> 01:56:16,639
if we do not know what a rubber ducky is

1729
01:56:16,639 --> 01:56:19,040
a rubber duck is a malicious usb stick

1730
01:56:19,040 --> 01:56:21,599
if once plugged in and the victim's

1731
01:56:21,599 --> 01:56:24,960
computer is able to lock or inject

1732
01:56:24,960 --> 01:56:29,040
keystrokes to execute commands

1733
01:56:29,040 --> 01:56:31,360
so for our example we

1734
01:56:31,360 --> 01:56:32,880
will

1735
01:56:32,880 --> 01:56:35,520
refer to the rubber ducky

1736
01:56:35,520 --> 01:56:38,239
language the daggy script and try to

1737
01:56:38,239 --> 01:56:40,719
exploit the victim computer with a very

1738
01:56:40,719 --> 01:56:44,159
simple example which just pops up the

1739
01:56:44,159 --> 01:56:46,960
calculator

1740
01:56:47,440 --> 01:56:48,239
so

1741
01:56:48,239 --> 01:56:49,280
to

1742
01:56:49,280 --> 01:56:51,599
achieve this man-in-the-middle

1743
01:56:51,599 --> 01:56:53,840
situation we have multiple options the

1744
01:56:53,840 --> 01:56:57,199
first options is already stated we

1745
01:56:57,199 --> 01:56:59,119
try to use the just works pairing which

1746
01:56:59,119 --> 01:57:01,840
is unauthenticated and many the middle

1747
01:57:01,840 --> 01:57:04,480
setup is very easy

1748
01:57:04,480 --> 01:57:06,000
to establish

1749
01:57:06,000 --> 01:57:09,199
for this the attacker requires two usb

1750
01:57:09,199 --> 01:57:11,599
to bluetooth dongles

1751
01:57:11,599 --> 01:57:13,280
one for the connections with with the

1752
01:57:13,280 --> 01:57:14,880
slave device and one for the connection

1753
01:57:14,880 --> 01:57:17,280
with the master device

1754
01:57:17,280 --> 01:57:20,800
and the attacker will present

1755
01:57:20,800 --> 01:57:24,000
to both directions that has neither in

1756
01:57:24,000 --> 01:57:27,520
nor output capabilities and as a result

1757
01:57:27,520 --> 01:57:30,239
the just works pairing will be used if

1758
01:57:30,239 --> 01:57:34,159
the if the devices accept this

1759
01:57:34,159 --> 01:57:36,560
the second option is if you say okay i

1760
01:57:36,560 --> 01:57:38,239
know downgrade text i would never

1761
01:57:38,239 --> 01:57:40,560
connect my keyword if i have

1762
01:57:40,560 --> 01:57:42,719
if i do not have to insert my pin code

1763
01:57:42,719 --> 01:57:44,400
then we have a second option with the

1764
01:57:44,400 --> 01:57:47,599
human interface device service

1765
01:57:47,599 --> 01:57:50,320
and this scenario we first pair with the

1766
01:57:50,320 --> 01:57:53,679
slave device with the just works pairing

1767
01:57:53,679 --> 01:57:55,520
the keyboard

1768
01:57:55,520 --> 01:57:58,080
often does not have the requirement to

1769
01:57:58,080 --> 01:58:01,360
do an authenticated pairing process

1770
01:58:01,360 --> 01:58:04,080
and then we pair with the bus we've

1771
01:58:04,080 --> 01:58:06,159
spoofed the device wait for the master

1772
01:58:06,159 --> 01:58:08,400
to connect and allow the passkey entry

1773
01:58:08,400 --> 01:58:09,920
pairing because we say okay we have a

1774
01:58:09,920 --> 01:58:11,760
keyboard we have

1775
01:58:11,760 --> 01:58:13,679
input capabilities

1776
01:58:13,679 --> 01:58:16,320
and as soon as the victim inserts the

1777
01:58:16,320 --> 01:58:18,719
pin on the master presented pin to the

1778
01:58:18,719 --> 01:58:20,880
keyboard it will be sent to our attacker

1779
01:58:20,880 --> 01:58:23,599
device because as regular keystrokes and

1780
01:58:23,599 --> 01:58:25,679
therefore we can use these keystrokes

1781
01:58:25,679 --> 01:58:29,119
for the pesky entry pairing

1782
01:58:29,440 --> 01:58:31,679
so what do we need for this attack we

1783
01:58:31,679 --> 01:58:34,080
need two usb dongles i prefer to use the

1784
01:58:34,080 --> 01:58:36,119
nrf

1785
01:58:36,119 --> 01:58:39,440
58420 dongles they cost around about 10

1786
01:58:39,440 --> 01:58:41,280
euro and are supported by many

1787
01:58:41,280 --> 01:58:43,280
frameworks and are therefore very

1788
01:58:43,280 --> 01:58:45,760
flexible

1789
01:58:45,760 --> 01:58:46,480
i

1790
01:58:46,480 --> 01:58:50,239
use them with the cpu project

1791
01:58:50,239 --> 01:58:52,000
here we have an host controller

1792
01:58:52,000 --> 01:58:55,119
interface usb sample which is at the end

1793
01:58:55,119 --> 01:58:57,360
and

1794
01:58:58,719 --> 01:59:01,360
bluetooth usb dongle then if you want to

1795
01:59:01,360 --> 01:59:02,639
say it like this

1796
01:59:02,639 --> 01:59:04,560
for the host layers i like to use the

1797
01:59:04,560 --> 01:59:07,040
mirage framework the mirage framework

1798
01:59:07,040 --> 01:59:10,320
it's very complex but also very flexible

1799
01:59:10,320 --> 01:59:12,880
a devil

1800
01:59:13,599 --> 01:59:15,840
fits does fit the needs for the

1801
01:59:15,840 --> 01:59:17,920
bluetooth protocol which is also very

1802
01:59:17,920 --> 01:59:20,320
complex

1803
01:59:20,320 --> 01:59:22,639
so as the auto states the mirage

1804
01:59:22,639 --> 01:59:24,320
framework is a powerful and modular

1805
01:59:24,320 --> 01:59:26,239
framework dedicated to the security

1806
01:59:26,239 --> 01:59:28,960
analysis of wireless communications

1807
01:59:28,960 --> 01:59:31,199
the python framework is

1808
01:59:31,199 --> 01:59:32,159
supports

1809
01:59:32,159 --> 01:59:34,400
multiple protocols for example bluetooth

1810
01:59:34,400 --> 01:59:38,239
low energy wi-fi sigp or infrared

1811
01:59:38,239 --> 01:59:40,559
and

1812
01:59:41,679 --> 01:59:45,119
we have a closer look here

1813
01:59:45,119 --> 01:59:47,360
the mirage framework has

1814
01:59:47,360 --> 01:59:49,840
several components there are at one side

1815
01:59:49,840 --> 01:59:52,239
the core component components

1816
01:59:52,239 --> 01:59:53,199
which

1817
01:59:53,199 --> 01:59:56,239
are necessary for configuration loading

1818
01:59:56,239 --> 01:59:58,560
and execution of modules

1819
01:59:58,560 --> 02:00:01,280
we have the internal libraries whereby

1820
02:00:01,280 --> 02:00:03,760
the bluetooth low energy stack is

1821
02:00:03,760 --> 02:00:05,760
implemented for example

1822
02:00:05,760 --> 02:00:06,880
and

1823
02:00:06,880 --> 02:00:09,199
we have modules and scenarios

1824
02:00:09,199 --> 02:00:10,639
we will focus on the modules and

1825
02:00:10,639 --> 02:00:13,840
scenarios today

1826
02:00:14,159 --> 02:00:16,080
modules offer

1827
02:00:16,080 --> 02:00:18,960
the possibility to implement a specific

1828
02:00:18,960 --> 02:00:21,199
attack for example the man in the middle

1829
02:00:21,199 --> 02:00:22,960
attack

1830
02:00:22,960 --> 02:00:24,159
and

1831
02:00:24,159 --> 02:00:27,679
can be used by multiple scenarios to to

1832
02:00:27,679 --> 02:00:29,679
adjust this attack to our needs so we

1833
02:00:29,679 --> 02:00:31,599
have one module and multiple scenarios

1834
02:00:31,599 --> 02:00:34,400
and can easily

1835
02:00:34,800 --> 02:00:36,800
modify this man in the middle attack to

1836
02:00:36,800 --> 02:00:39,960
our needs

1837
02:00:40,159 --> 02:00:41,520
to do so

1838
02:00:41,520 --> 02:00:44,480
we have to define

1839
02:00:44,480 --> 02:00:47,040
scenario signals in the module

1840
02:00:47,040 --> 02:00:49,920
that means every scenario signals stands

1841
02:00:49,920 --> 02:00:51,920
for a packet that the module might

1842
02:00:51,920 --> 02:00:52,960
receive

1843
02:00:52,960 --> 02:00:55,599
in this example the packet is called say

1844
02:00:55,599 --> 02:00:56,719
hello

1845
02:00:56,719 --> 02:00:58,960
and if the scenario

1846
02:00:58,960 --> 02:01:01,199
want to overwrite the

1847
02:01:01,199 --> 02:01:03,920
send out this method or this packet then

1848
02:01:03,920 --> 02:01:05,840
it would have would have to overwrite

1849
02:01:05,840 --> 02:01:08,960
the hello world method

1850
02:01:08,960 --> 02:01:11,040
additionally we can control if the

1851
02:01:11,040 --> 02:01:12,800
module code is executed so if the

1852
02:01:12,800 --> 02:01:15,679
scenario signal signal method returns

1853
02:01:15,679 --> 02:01:17,280
true then the module code is also

1854
02:01:17,280 --> 02:01:20,159
executed and if the scenario signal

1855
02:01:20,159 --> 02:01:22,320
returns false then the model code will

1856
02:01:22,320 --> 02:01:24,880
be skipped

1857
02:01:24,960 --> 02:01:27,920
to create a module in mirage we can use

1858
02:01:27,920 --> 02:01:31,520
the command option create module

1859
02:01:31,520 --> 02:01:34,560
this will create a following template

1860
02:01:34,560 --> 02:01:36,880
here we have two methods which are very

1861
02:01:36,880 --> 02:01:39,119
self-explanatory i think we have in it

1862
02:01:39,119 --> 02:01:39,920
which

1863
02:01:39,920 --> 02:01:42,239
initializes the module here the most

1864
02:01:42,239 --> 02:01:43,679
important thing to note are the

1865
02:01:43,679 --> 02:01:45,840
arguments so we can pass some command

1866
02:01:45,840 --> 02:01:48,320
line arguments to our execution

1867
02:01:48,320 --> 02:01:50,800
uh most important for example the target

1868
02:01:50,800 --> 02:01:52,719
device address

1869
02:01:52,719 --> 02:01:54,800
and host controller interfaces which are

1870
02:01:54,800 --> 02:01:57,280
used by the module

1871
02:01:57,280 --> 02:01:59,440
and we have the run method which is used

1872
02:01:59,440 --> 02:02:00,639
for the

1873
02:02:00,639 --> 02:02:02,960
final module code

1874
02:02:02,960 --> 02:02:05,599
so since the model for the specific

1875
02:02:05,599 --> 02:02:07,440
examples with the secure connections man

1876
02:02:07,440 --> 02:02:08,880
in the middle model

1877
02:02:08,880 --> 02:02:12,639
is very large and also complex and i

1878
02:02:12,639 --> 02:02:15,040
also had to implement the cryptography

1879
02:02:15,040 --> 02:02:17,119
for the secure connection

1880
02:02:17,119 --> 02:02:19,280
in mirage we cannot cover this in detail

1881
02:02:19,280 --> 02:02:21,360
here but i will give an overview what

1882
02:02:21,360 --> 02:02:23,599
the model does

1883
02:02:23,599 --> 02:02:24,960
so at first

1884
02:02:24,960 --> 02:02:27,360
the attacker will initialize both

1885
02:02:27,360 --> 02:02:29,040
bluetooth devices

1886
02:02:29,040 --> 02:02:31,280
to bluetooth interfaces

1887
02:02:31,280 --> 02:02:32,880
and

1888
02:02:32,880 --> 02:02:34,480
scan for the

1889
02:02:34,480 --> 02:02:37,360
first for the provided slave device as

1890
02:02:37,360 --> 02:02:38,480
for the

1891
02:02:38,480 --> 02:02:40,320
bluetooth device address

1892
02:02:40,320 --> 02:02:43,280
and tries to connect earlier than our

1893
02:02:43,280 --> 02:02:46,320
original master device

1894
02:02:46,320 --> 02:02:48,320
after this happens the

1895
02:02:48,320 --> 02:02:50,400
most devices are blocked because slave

1896
02:02:50,400 --> 02:02:52,800
devices usually are only capable of

1897
02:02:52,800 --> 02:02:55,760
holding one connection at one time

1898
02:02:55,760 --> 02:02:57,040
and

1899
02:02:57,040 --> 02:02:59,679
a legitimate master is no longer able to

1900
02:02:59,679 --> 02:03:02,320
detect the slave device

1901
02:03:02,320 --> 02:03:04,320
after this we clone the slave device

1902
02:03:04,320 --> 02:03:06,560
wait for the master to connect

1903
02:03:06,560 --> 02:03:08,080
and

1904
02:03:08,080 --> 02:03:10,000
pair with both sides

1905
02:03:10,000 --> 02:03:12,400
depending on the scenario and

1906
02:03:12,400 --> 02:03:14,239
requirements

1907
02:03:14,239 --> 02:03:16,560
after this the middle setup is complete

1908
02:03:16,560 --> 02:03:18,719
and the module is only forwarding

1909
02:03:18,719 --> 02:03:20,480
package from master to slave and from

1910
02:03:20,480 --> 02:03:23,360
slave to master

1911
02:03:23,360 --> 02:03:25,040
so we will have now a

1912
02:03:25,040 --> 02:03:27,760
deeper look into the scenario

1913
02:03:27,760 --> 02:03:29,520
the scenario can be created nearly the

1914
02:03:29,520 --> 02:03:32,000
same way here we have three methods on

1915
02:03:32,000 --> 02:03:34,960
start on end on key

1916
02:03:34,960 --> 02:03:37,280
on start and on and are very

1917
02:03:37,280 --> 02:03:40,480
explanatory again on starts is executed

1918
02:03:40,480 --> 02:03:42,239
when the model starts and on end is

1919
02:03:42,239 --> 02:03:44,800
executed when the module ends and on key

1920
02:03:44,800 --> 02:03:49,280
is executed if any key on the attacker

1921
02:03:49,280 --> 02:03:52,320
keyboard is pressed

1922
02:03:52,400 --> 02:03:54,560
so

1923
02:03:54,560 --> 02:03:56,639
um

1924
02:03:56,639 --> 02:03:59,360
since we want to

1925
02:03:59,360 --> 02:04:02,159
pass our human interface device

1926
02:04:02,159 --> 02:04:02,960
key

1927
02:04:02,960 --> 02:04:06,480
keys to uh to lock to lock the

1928
02:04:06,480 --> 02:04:09,199
final user input to console

1929
02:04:09,199 --> 02:04:11,360
and also we have to

1930
02:04:11,360 --> 02:04:13,520
pass our ducky script here we will do

1931
02:04:13,520 --> 02:04:16,400
this in our unstart method

1932
02:04:16,400 --> 02:04:18,480
the mirage framework provides a ducky

1933
02:04:18,480 --> 02:04:20,639
script parser function which is very

1934
02:04:20,639 --> 02:04:22,079
comfortable

1935
02:04:22,079 --> 02:04:25,280
so we can provide our file here and have

1936
02:04:25,280 --> 02:04:27,599
for callbacks which i will explain on

1937
02:04:27,599 --> 02:04:28,960
the next slide

1938
02:04:28,960 --> 02:04:32,079
uh on and can hear by be ignored very

1939
02:04:32,079 --> 02:04:33,280
trivial

1940
02:04:33,280 --> 02:04:35,840
and on key just days if we press the

1941
02:04:35,840 --> 02:04:37,679
escape key then we end this module and

1942
02:04:37,679 --> 02:04:39,440
if we press one we want to inject our

1943
02:04:39,440 --> 02:04:41,920
ducky script to the to the establishment

1944
02:04:41,920 --> 02:04:44,960
in the middle connection

1945
02:04:45,679 --> 02:04:47,599
the best way to explain this method is

1946
02:04:47,599 --> 02:04:50,079
if we compare this to our ducky script

1947
02:04:50,079 --> 02:04:52,560
so at first we have to add keystrokes

1948
02:04:52,560 --> 02:04:54,480
method which is uh

1949
02:04:54,480 --> 02:04:57,160
most important so here we have um

1950
02:04:57,160 --> 02:04:58,400
[Music]

1951
02:04:58,400 --> 02:05:02,320
so for human interface interface devices

1952
02:05:02,320 --> 02:05:04,559
the

1953
02:05:04,880 --> 02:05:07,040
it works as follows the so if you press

1954
02:05:07,040 --> 02:05:09,119
the key on your keyboard then uh the

1955
02:05:09,119 --> 02:05:11,360
sticker will be sent for the key and if

1956
02:05:11,360 --> 02:05:13,040
you release the key that the keystroke

1957
02:05:13,040 --> 02:05:15,360
release message will be

1958
02:05:15,360 --> 02:05:16,239
sent

1959
02:05:16,239 --> 02:05:18,639
and what is most important here is the

1960
02:05:18,639 --> 02:05:21,360
timing so if you are too fast or if you

1961
02:05:21,360 --> 02:05:23,360
are sending our keys

1962
02:05:23,360 --> 02:05:26,239
or messages too fast then some of our

1963
02:05:26,239 --> 02:05:28,400
keys will be skipped and if we are too

1964
02:05:28,400 --> 02:05:31,679
slow then the user can see every single

1965
02:05:31,679 --> 02:05:34,239
letter appearing on the on the screen

1966
02:05:34,239 --> 02:05:36,400
which is a bit obvious

1967
02:05:36,400 --> 02:05:38,000
um

1968
02:05:38,000 --> 02:05:40,719
the in the packet list just is the array

1969
02:05:40,719 --> 02:05:43,520
add delay adds the delay or for the

1970
02:05:43,520 --> 02:05:45,920
delay parameter of our ducky script and

1971
02:05:45,920 --> 02:05:48,560
add text is for the text

1972
02:05:48,560 --> 02:05:50,400
for the string parameter of our ducky

1973
02:05:50,400 --> 02:05:54,559
script so one last thing to do

1974
02:05:55,280 --> 02:05:57,840
since we want to lock our

1975
02:05:57,840 --> 02:05:59,119
keystrokes

1976
02:05:59,119 --> 02:06:01,280
we have to overwrite the enslave handle

1977
02:06:01,280 --> 02:06:02,960
value notification

1978
02:06:02,960 --> 02:06:04,560
packet

1979
02:06:04,560 --> 02:06:06,000
in bluetooth

1980
02:06:06,000 --> 02:06:08,000
these keystrokes are sent via

1981
02:06:08,000 --> 02:06:10,000
notifications from the keyboard to the

1982
02:06:10,000 --> 02:06:11,520
computer

1983
02:06:11,520 --> 02:06:14,639
and here we check for the handle hex 13

1984
02:06:14,639 --> 02:06:16,560
and if it's the right packet then we

1985
02:06:16,560 --> 02:06:21,280
lock our keystroke to the command line

1986
02:06:21,520 --> 02:06:23,520
so one last thing

1987
02:06:23,520 --> 02:06:24,880
uh the

1988
02:06:24,880 --> 02:06:27,520
used keyboard for this example

1989
02:06:27,520 --> 02:06:29,280
requires

1990
02:06:29,280 --> 02:06:31,920
requires the user to put to push the

1991
02:06:31,920 --> 02:06:34,000
button on the back side to put the

1992
02:06:34,000 --> 02:06:36,480
device in advertising mode so the device

1993
02:06:36,480 --> 02:06:39,520
is regular regularly not in advertising

1994
02:06:39,520 --> 02:06:41,119
mode but you have to push the button if

1995
02:06:41,119 --> 02:06:43,040
you want to connect this device i will

1996
02:06:43,040 --> 02:06:44,800
get to this point after the

1997
02:06:44,800 --> 02:06:47,520
demonstration

1998
02:06:48,880 --> 02:06:51,520
so i hope

1999
02:06:51,679 --> 02:06:54,000
to stop this here okay

2000
02:06:54,000 --> 02:06:56,239
so what we can see here is on the left

2001
02:06:56,239 --> 02:06:58,400
side is the victim windows operation

2002
02:06:58,400 --> 02:07:00,719
system

2003
02:07:00,719 --> 02:07:01,760
on the right

2004
02:07:01,760 --> 02:07:04,560
bottom we have the bluetooth keyboard

2005
02:07:04,560 --> 02:07:06,639
and in the right top we have the

2006
02:07:06,639 --> 02:07:09,119
attacker terminal whereby the mirage

2007
02:07:09,119 --> 02:07:11,360
framework is called with the bluetooth

2008
02:07:11,360 --> 02:07:13,040
secure connections man in the middle

2009
02:07:13,040 --> 02:07:14,560
module

2010
02:07:14,560 --> 02:07:16,159
we are providing the bluetooth device

2011
02:07:16,159 --> 02:07:19,440
address the bluetooth device address can

2012
02:07:19,440 --> 02:07:21,920
easily be sniffed for example with the

2013
02:07:21,920 --> 02:07:25,040
uber tools or also with lunix utilities

2014
02:07:25,040 --> 02:07:28,960
as for example bluetooth ctl

2015
02:07:28,960 --> 02:07:31,520
this device is a funny fact uses a

2016
02:07:31,520 --> 02:07:33,520
random address and the randomness of

2017
02:07:33,520 --> 02:07:35,760
this device is that the fourth bias of

2018
02:07:35,760 --> 02:07:37,119
the address is

2019
02:07:37,119 --> 02:07:41,840
regularly increased by one bit so okay

2020
02:07:41,840 --> 02:07:44,480
then we have our interfaces uh house

2021
02:07:44,480 --> 02:07:48,320
controller interface zero zero and one

2022
02:07:48,320 --> 02:07:50,000
uh we do not

2023
02:07:50,000 --> 02:07:51,840
require master spoofing in this case so

2024
02:07:51,840 --> 02:07:53,679
the keyboard does not care about who is

2025
02:07:53,679 --> 02:07:55,280
connecting

2026
02:07:55,280 --> 02:07:57,280
but we need slave spoofing so that the

2027
02:07:57,280 --> 02:07:59,840
computer

2028
02:08:00,560 --> 02:08:03,119
holds the keyboard for a regular

2029
02:08:03,119 --> 02:08:05,280
bluetooth for the regular

2030
02:08:05,280 --> 02:08:07,760
bluetooth device

2031
02:08:07,760 --> 02:08:10,480
provide our scenario so blue bruce lowe

2032
02:08:10,480 --> 02:08:12,639
energy human interface device man in the

2033
02:08:12,639 --> 02:08:15,360
middle and finally we provide our ducky

2034
02:08:15,360 --> 02:08:16,880
script

2035
02:08:16,880 --> 02:08:19,880
okay

2036
02:08:22,639 --> 02:08:24,719
okay that's um good

2037
02:08:24,719 --> 02:08:26,639
um at first we are entering the scan

2038
02:08:26,639 --> 02:08:28,320
stage so

2039
02:08:28,320 --> 02:08:29,840
okay this is very

2040
02:08:29,840 --> 02:08:32,560
bad sorry

2041
02:08:32,560 --> 02:08:35,560
um

2042
02:08:36,560 --> 02:08:38,480
maybe i can

2043
02:08:38,480 --> 02:08:41,480
start

2044
02:08:41,840 --> 02:08:45,400
one second sorry

2045
02:08:56,480 --> 02:08:58,960
so maybe this is better

2046
02:08:58,960 --> 02:09:01,599
hopefully

2047
02:09:03,599 --> 02:09:06,320
yes okay

2048
02:09:06,960 --> 02:09:09,040
so we're editing the scan stage

2049
02:09:09,040 --> 02:09:11,840
now the moment is here to push the

2050
02:09:11,840 --> 02:09:15,440
button on the background of the keyboard

2051
02:09:16,960 --> 02:09:19,520
after this the keyboard will be detected

2052
02:09:19,520 --> 02:09:21,760
connected and cloned

2053
02:09:21,760 --> 02:09:24,719
and now we are waiting for the

2054
02:09:24,719 --> 02:09:28,679
master device to connect

2055
02:09:39,280 --> 02:09:41,840
so master is connected

2056
02:09:41,840 --> 02:09:44,400
man in the middle stage is established

2057
02:09:44,400 --> 02:09:46,719
in the background here is now the

2058
02:09:46,719 --> 02:09:49,199
service discovery that takes a take some

2059
02:09:49,199 --> 02:09:51,280
seconds and now the bluetooth keyboard

2060
02:09:51,280 --> 02:09:53,360
is connected

2061
02:09:53,360 --> 02:09:55,760
we can check now that our keylogger is

2062
02:09:55,760 --> 02:09:58,760
working

2063
02:10:05,840 --> 02:10:07,840
and this keylogger is also working if

2064
02:10:07,840 --> 02:10:09,599
the windows screen is locked so we can

2065
02:10:09,599 --> 02:10:10,960
also

2066
02:10:10,960 --> 02:10:12,480
capture the

2067
02:10:12,480 --> 02:10:16,480
the login password of the user

2068
02:10:22,320 --> 02:10:24,400
and finally

2069
02:10:24,400 --> 02:10:25,360
we can

2070
02:10:25,360 --> 02:10:27,280
inject our ducky script by pressing the

2071
02:10:27,280 --> 02:10:29,840
one button on the attacker keyboard

2072
02:10:29,840 --> 02:10:30,880
and

2073
02:10:30,880 --> 02:10:34,440
opening the calculator

2074
02:10:36,590 --> 02:10:39,770
[Applause]

2075
02:10:55,679 --> 02:10:58,719
okay so a few thoughts here how

2076
02:10:58,719 --> 02:11:02,159
how easy is this um

2077
02:11:02,560 --> 02:11:04,880
you could say okay if this uh this

2078
02:11:04,880 --> 02:11:06,639
attack is only possible if the devices

2079
02:11:06,639 --> 02:11:08,560
are not paired well there are many ways

2080
02:11:08,560 --> 02:11:10,880
to disturb the connection and enforce a

2081
02:11:10,880 --> 02:11:13,119
new pairing process so the easiest way i

2082
02:11:13,119 --> 02:11:15,280
could think of is i just jam the

2083
02:11:15,280 --> 02:11:18,400
connection and as soon as the user is

2084
02:11:18,400 --> 02:11:21,199
annoyed enough to repair his device i'm

2085
02:11:21,199 --> 02:11:24,480
able to intercept this connection

2086
02:11:24,480 --> 02:11:26,719
the next question is what you can ask

2087
02:11:26,719 --> 02:11:28,239
yourself would you push the button if

2088
02:11:28,239 --> 02:11:30,719
your keyboard is no longer working and

2089
02:11:30,719 --> 02:11:33,679
repair the device i think i probably

2090
02:11:33,679 --> 02:11:35,119
would

2091
02:11:35,119 --> 02:11:36,719
and

2092
02:11:36,719 --> 02:11:38,880
to prevent this attack you have to make

2093
02:11:38,880 --> 02:11:41,040
sure that your keyboard provides a

2094
02:11:41,040 --> 02:11:44,159
security mode one level four

2095
02:11:44,159 --> 02:11:45,280
this is

2096
02:11:45,280 --> 02:11:47,119
this means that the secure connection

2097
02:11:47,119 --> 02:11:49,760
mode is enforced so that

2098
02:11:49,760 --> 02:11:50,480
the

2099
02:11:50,480 --> 02:11:52,639
both devices enforce that an

2100
02:11:52,639 --> 02:11:55,760
authenticated pairing algorithm is used

2101
02:11:55,760 --> 02:11:57,760
so not just works pairing and then this

2102
02:11:57,760 --> 02:12:00,320
attack is no longer possible

2103
02:12:00,320 --> 02:12:02,400
okay that's it

2104
02:12:02,400 --> 02:12:04,638
so

2105
02:12:04,840 --> 02:12:06,400
questions

2106
02:12:06,400 --> 02:12:07,520
cool

2107
02:12:07,520 --> 02:12:10,480
thank you very much zara

2108
02:12:10,480 --> 02:12:13,598
round of applause for him

2109
02:12:17,119 --> 02:12:18,719
i think it was so interesting we have

2110
02:12:18,719 --> 02:12:20,320
some time for question if you have a

2111
02:12:20,320 --> 02:12:22,159
question please run to the front to the

2112
02:12:22,159 --> 02:12:26,040
microphone and um

2113
02:12:37,199 --> 02:12:38,000
well

2114
02:12:38,000 --> 02:12:40,079
the bluetooth class specification also

2115
02:12:40,079 --> 02:12:43,119
has an authenticated pairing so it's

2116
02:12:43,119 --> 02:12:44,880
also called just work so the

2117
02:12:44,880 --> 02:12:47,360
specifications are not identical but the

2118
02:12:47,360 --> 02:12:50,239
pairing algorithms are

2119
02:12:50,239 --> 02:12:52,560
comparable and if you have if your

2120
02:12:52,560 --> 02:12:55,760
keyboard allows this

2121
02:12:55,760 --> 02:12:57,360
authenticated pairing then you also have

2122
02:12:57,360 --> 02:13:00,519
the problem

2123
02:13:08,159 --> 02:13:10,320
you mentioned that specification has

2124
02:13:10,320 --> 02:13:13,679
3000 plus pages and then if you look it

2125
02:13:13,679 --> 02:13:16,159
also has a ton of specifications for

2126
02:13:16,159 --> 02:13:18,560
profiles and services and you have

2127
02:13:18,560 --> 02:13:21,040
different types of operation mesh

2128
02:13:21,040 --> 02:13:23,119
and you have sort of regular advertising

2129
02:13:23,119 --> 02:13:26,719
and then the authenticated communication

2130
02:13:26,719 --> 02:13:28,159
how do you start

2131
02:13:28,159 --> 02:13:30,480
with bluetooth low energy if you want to

2132
02:13:30,480 --> 02:13:32,960
do this and do cool things like this

2133
02:13:32,960 --> 02:13:36,079
uh it's a good question um i think if

2134
02:13:36,079 --> 02:13:37,840
you start with bluetooth then there are

2135
02:13:37,840 --> 02:13:39,679
uh

2136
02:13:39,679 --> 02:13:43,599
some easy tools as for example uh

2137
02:13:43,599 --> 02:13:45,840
gateker or beetlejack which you can

2138
02:13:45,840 --> 02:13:48,239
start with and i think most important is

2139
02:13:48,239 --> 02:13:50,560
that you um

2140
02:13:50,560 --> 02:13:53,360
get used to the protocol so uh

2141
02:13:53,360 --> 02:13:56,400
analyze the regula the the communication

2142
02:13:56,400 --> 02:13:58,880
of devices so very easy to analyze the

2143
02:13:58,880 --> 02:14:00,560
communication for bluetooth protocols

2144
02:14:00,560 --> 02:14:02,560
via the host controller interface this

2145
02:14:02,560 --> 02:14:04,719
is um

2146
02:14:04,719 --> 02:14:07,599
possible on linux devices via the

2147
02:14:07,599 --> 02:14:09,920
bluetooth one monitor

2148
02:14:09,920 --> 02:14:11,679
you can also

2149
02:14:11,679 --> 02:14:13,920
extract the

2150
02:14:13,920 --> 02:14:15,599
host control interface new block on

2151
02:14:15,599 --> 02:14:17,760
android devices so this is a developer

2152
02:14:17,760 --> 02:14:18,719
feature

2153
02:14:18,719 --> 02:14:20,079
and the

2154
02:14:20,079 --> 02:14:22,560
benefit in this case is that

2155
02:14:22,560 --> 02:14:24,719
since the encryption is established in a

2156
02:14:24,719 --> 02:14:27,599
link layer and you capture the devices

2157
02:14:27,599 --> 02:14:28,480
in the

2158
02:14:28,480 --> 02:14:30,320
on the host layers then they are not

2159
02:14:30,320 --> 02:14:31,920
encrypted and you can

2160
02:14:31,920 --> 02:14:34,159
check what the protocol is doing because

2161
02:14:34,159 --> 02:14:35,840
if you are sniffing the

2162
02:14:35,840 --> 02:14:38,560
protocol over the air which is on the

2163
02:14:38,560 --> 02:14:40,639
one side very

2164
02:14:40,639 --> 02:14:43,760
complex and not not working very well

2165
02:14:43,760 --> 02:14:46,000
um

2166
02:14:46,560 --> 02:14:48,719
then you have encrypted traffic if

2167
02:14:48,719 --> 02:14:50,159
they're using encryption and then you

2168
02:14:50,159 --> 02:14:52,480
cannot determine what is happening there

2169
02:14:52,480 --> 02:14:54,960
so the best way is to i think is to

2170
02:14:54,960 --> 02:14:58,159
start to get a device check

2171
02:14:58,159 --> 02:14:59,920
check the get the host controller

2172
02:14:59,920 --> 02:15:01,280
interface logs

2173
02:15:01,280 --> 02:15:03,440
put them to wireshark and analyze the

2174
02:15:03,440 --> 02:15:05,199
connection setup and

2175
02:15:05,199 --> 02:15:07,440
try to find

2176
02:15:07,440 --> 02:15:09,760
the required parts in the specification

2177
02:15:09,760 --> 02:15:11,280
it's not easy

2178
02:15:11,280 --> 02:15:12,800
but once you get used to the

2179
02:15:12,800 --> 02:15:14,320
specification it

2180
02:15:14,320 --> 02:15:18,000
also makes kind of sense

2181
02:15:19,920 --> 02:15:22,400
cool thank you very much so we don't

2182
02:15:22,400 --> 02:15:23,840
really have time for another question

2183
02:15:23,840 --> 02:15:25,760
but feel free to reach out to sarah in

2184
02:15:25,760 --> 02:15:28,000
the break i think she will be happy to

2185
02:15:28,000 --> 02:15:30,159
answer any more questions thanks again a

2186
02:15:30,159 --> 02:15:32,370
lot for the talks adam

2187
02:15:32,370 --> 02:15:38,340
[Applause]

2188
02:18:34,638 --> 02:18:36,478
all right

2189
02:18:36,478 --> 02:18:38,638
hello everyone again welcome to the next

2190
02:18:38,638 --> 02:18:40,478
talk my name is oliver netting and i'm

2191
02:18:40,478 --> 02:18:41,920
introducing to you

2192
02:18:41,920 --> 02:18:45,920
um ido cohen and arnold osipov

2193
02:18:45,920 --> 02:18:49,120
yes um and they're talking about today

2194
02:18:49,120 --> 02:18:50,959
um how they

2195
02:18:50,959 --> 02:18:54,000
went and found a suspicious lock entry

2196
02:18:54,000 --> 02:18:56,240
and in the end brought them to a very

2197
02:18:56,240 --> 02:18:59,280
interesting and sophisticated

2198
02:18:59,280 --> 02:19:00,558
crypter

2199
02:19:00,558 --> 02:19:02,799
and i'm very much looking forward to

2200
02:19:02,799 --> 02:19:04,398
hearing your talk and

2201
02:19:04,398 --> 02:19:06,080
yeah give a round of applause for you

2202
02:19:06,080 --> 02:19:08,558
guys and

2203
02:19:12,638 --> 02:19:15,120
thanks oliver hi guys thanks for

2204
02:19:15,120 --> 02:19:17,599
attending our session from simpalog to

2205
02:19:17,599 --> 02:19:21,280
sophisticated crypto

2206
02:19:21,280 --> 02:19:23,679
my name is arnold as already introduced

2207
02:19:23,679 --> 02:19:25,280
i'm here with my friend and colleague

2208
02:19:25,280 --> 02:19:26,879
hido

2209
02:19:26,879 --> 02:19:29,519
and we both live in israel and work as

2210
02:19:29,519 --> 02:19:31,359
malware and threat researchers at the

2211
02:19:31,359 --> 02:19:32,959
company named

2212
02:19:32,959 --> 02:19:34,959
morphysek

2213
02:19:34,959 --> 02:19:36,398
and

2214
02:19:36,398 --> 02:19:38,080
today we want to share with you our

2215
02:19:38,080 --> 02:19:41,599
story on discovering the babadeva crypto

2216
02:19:41,599 --> 02:19:44,558
and we'll do so by showing you our point

2217
02:19:44,558 --> 02:19:47,280
of view when we investigated something

2218
02:19:47,280 --> 02:19:49,200
that might have been simple or

2219
02:19:49,200 --> 02:19:51,600
irrelevant anomaly in one of our

2220
02:19:51,600 --> 02:19:53,600
customers logs

2221
02:19:53,600 --> 02:19:56,080
and later on we'll dive into the cryptos

2222
02:19:56,080 --> 02:19:58,960
internals and understand how it works

2223
02:19:58,960 --> 02:20:00,479
and

2224
02:20:00,479 --> 02:20:02,800
how we use that information in order to

2225
02:20:02,800 --> 02:20:05,520
uncover a major campaign that targets

2226
02:20:05,520 --> 02:20:07,680
some nft communities

2227
02:20:07,680 --> 02:20:09,680
including some additional campaigns that

2228
02:20:09,680 --> 02:20:11,280
targets

2229
02:20:11,280 --> 02:20:14,640
the ukrainian entities

2230
02:20:14,640 --> 02:20:16,560
but before we start

2231
02:20:16,560 --> 02:20:18,479
let me say a couple of words on what the

2232
02:20:18,479 --> 02:20:20,160
crypter is for those of you may not

2233
02:20:20,160 --> 02:20:21,840
familiar with it

2234
02:20:21,840 --> 02:20:24,640
um let's do that with an example

2235
02:20:24,640 --> 02:20:27,120
let's say we have a thread actor that

2236
02:20:27,120 --> 02:20:29,439
wants to use some open source

2237
02:20:29,439 --> 02:20:32,000
information still for some of his

2238
02:20:32,000 --> 02:20:33,760
criminal activities

2239
02:20:33,760 --> 02:20:35,600
if you'll use it as is

2240
02:20:35,600 --> 02:20:38,000
theoretically security solutions would

2241
02:20:38,000 --> 02:20:41,280
be easily detecting it either by strings

2242
02:20:41,280 --> 02:20:45,359
metadata or even some of the code blocks

2243
02:20:45,359 --> 02:20:47,600
and that's exactly when cryptos comes in

2244
02:20:47,600 --> 02:20:50,240
handy they solve this problem by taking

2245
02:20:50,240 --> 02:20:53,200
this malware or the information stiller

2246
02:20:53,200 --> 02:20:54,640
as an input

2247
02:20:54,640 --> 02:20:57,280
and performing some obfuscation

2248
02:20:57,280 --> 02:20:58,880
encryption

2249
02:20:58,880 --> 02:21:00,720
and code manipulation

2250
02:21:00,720 --> 02:21:03,680
and hopefully the output of decrypter is

2251
02:21:03,680 --> 02:21:07,040
an undetected file

2252
02:21:07,359 --> 02:21:10,840
without further ado let our journey

2253
02:21:10,840 --> 02:21:13,040
begin so

2254
02:21:13,040 --> 02:21:15,840
one of our tasks is security researchers

2255
02:21:15,840 --> 02:21:18,080
is to keep track on current trends and

2256
02:21:18,080 --> 02:21:20,399
understand the threat landscape and its

2257
02:21:20,399 --> 02:21:21,600
evolution

2258
02:21:21,600 --> 02:21:23,760
and in order to do so we use

2259
02:21:23,760 --> 02:21:25,840
classifications to divide the massive

2260
02:21:25,840 --> 02:21:28,800
amount of data we got from our customers

2261
02:21:28,800 --> 02:21:31,840
into specific threats or behaviors

2262
02:21:31,840 --> 02:21:34,479
and that helps us to cluster the data

2263
02:21:34,479 --> 02:21:37,120
and follow trends more easily

2264
02:21:37,120 --> 02:21:37,920
so

2265
02:21:37,920 --> 02:21:40,720
one day while going through one of our

2266
02:21:40,720 --> 02:21:43,359
customers logs

2267
02:21:43,359 --> 02:21:46,479
and we came across an anomaly

2268
02:21:46,479 --> 02:21:49,120
specifically it was a bot which is

2269
02:21:49,120 --> 02:21:51,120
an information stiller

2270
02:21:51,120 --> 02:21:55,120
and at the time we had plenty of those

2271
02:21:55,120 --> 02:21:57,680
infections but the thing that caught our

2272
02:21:57,680 --> 02:21:59,920
eye was the fact that

2273
02:21:59,920 --> 02:22:02,319
the infection chain that led to it was

2274
02:22:02,319 --> 02:22:04,880
something that we haven't seen before

2275
02:22:04,880 --> 02:22:07,520
and the

2276
02:22:07,520 --> 02:22:10,560
the clipboard was being executed from an

2277
02:22:10,560 --> 02:22:13,600
executable that was being signed from by

2278
02:22:13,600 --> 02:22:15,040
so by a

2279
02:22:15,040 --> 02:22:19,280
microsoft which was legitimate

2280
02:22:19,760 --> 02:22:22,720
and at this time we were taking those

2281
02:22:22,720 --> 02:22:25,359
first aid ashes like

2282
02:22:25,359 --> 02:22:27,920
every person in our field would do

2283
02:22:27,920 --> 02:22:30,960
to violence total

2284
02:22:31,680 --> 02:22:33,760
yeah and we were surprised to see a zero

2285
02:22:33,760 --> 02:22:36,080
detection rate which means that no

2286
02:22:36,080 --> 02:22:38,479
security solution was able to identify

2287
02:22:38,479 --> 02:22:40,800
this file as a malicious

2288
02:22:40,800 --> 02:22:43,120
and we were even more surprised to see

2289
02:22:43,120 --> 02:22:45,280
that this was the case for multiple

2290
02:22:45,280 --> 02:22:48,160
scans in a very long period of time

2291
02:22:48,160 --> 02:22:50,399
we took an additional ash from one of

2292
02:22:50,399 --> 02:22:52,240
our prevention logs

2293
02:22:52,240 --> 02:22:56,080
and the result was the same

2294
02:22:56,080 --> 02:22:56,960
so

2295
02:22:56,960 --> 02:22:59,120
at this point we were extremely curious

2296
02:22:59,120 --> 02:23:01,840
to understand how the crypto works and

2297
02:23:01,840 --> 02:23:05,200
what keeps that low detection rate

2298
02:23:05,200 --> 02:23:07,520
so in order to do so

2299
02:23:07,520 --> 02:23:09,520
we need to get our ants dirty and dive

2300
02:23:09,520 --> 02:23:10,560
into the

2301
02:23:10,560 --> 02:23:12,479
cryptos internals so

2302
02:23:12,479 --> 02:23:14,720
this is an example of how the infection

2303
02:23:14,720 --> 02:23:15,920
chain looks

2304
02:23:15,920 --> 02:23:17,840
and you can see that it's composed from

2305
02:23:17,840 --> 02:23:19,840
several components and we'll explain

2306
02:23:19,840 --> 02:23:21,680
each and every one of them

2307
02:23:21,680 --> 02:23:23,840
let's start with the installer first

2308
02:23:23,840 --> 02:23:25,520
stager

2309
02:23:25,520 --> 02:23:28,560
and the installer starts with the

2310
02:23:28,560 --> 02:23:31,280
decompressing its files into a newly

2311
02:23:31,280 --> 02:23:33,520
allocated folder on the disk

2312
02:23:33,520 --> 02:23:36,800
and this is how this folder looks

2313
02:23:36,800 --> 02:23:38,720
and you can see that

2314
02:23:38,720 --> 02:23:40,880
among

2315
02:23:40,880 --> 02:23:42,479
it has

2316
02:23:42,479 --> 02:23:45,040
very files in that folder

2317
02:23:45,040 --> 02:23:47,280
and among them

2318
02:23:47,280 --> 02:23:50,479
most of them actually sorry are in fact

2319
02:23:50,479 --> 02:23:53,280
legitimate they belong to legitimate

2320
02:23:53,280 --> 02:23:54,800
application or some open source

2321
02:23:54,800 --> 02:23:56,000
application

2322
02:23:56,000 --> 02:23:58,960
and the ones that marked in red are

2323
02:23:58,960 --> 02:24:02,240
belongs to the malicious infection chain

2324
02:24:02,240 --> 02:24:04,720
once the clip the installer finishes its

2325
02:24:04,720 --> 02:24:06,080
execution

2326
02:24:06,080 --> 02:24:08,479
it calls the file marked

2327
02:24:08,479 --> 02:24:10,880
as one

2328
02:24:10,880 --> 02:24:14,080
the executable and this executable sole

2329
02:24:14,080 --> 02:24:17,040
purpose is to invoke the

2330
02:24:17,040 --> 02:24:18,720
export function of the next stage

2331
02:24:18,720 --> 02:24:20,800
malicious dll

2332
02:24:20,800 --> 02:24:23,120
and as you can see it does so with just

2333
02:24:23,120 --> 02:24:24,800
few lines of code

2334
02:24:24,800 --> 02:24:27,439
that are placed at the very end of a log

2335
02:24:27,439 --> 02:24:28,800
function

2336
02:24:28,800 --> 02:24:30,399
whereas the rest of the code in that

2337
02:24:30,399 --> 02:24:32,640
function is actually benign again

2338
02:24:32,640 --> 02:24:35,520
belongs to legitimate application

2339
02:24:35,520 --> 02:24:38,720
once this dll is being invoked

2340
02:24:38,720 --> 02:24:40,800
it starts its execution

2341
02:24:40,800 --> 02:24:43,920
by calling some sorry

2342
02:24:43,920 --> 02:24:45,439
some additional

2343
02:24:45,439 --> 02:24:47,040
dlls and

2344
02:24:47,040 --> 02:24:49,040
this part in the crypto

2345
02:24:49,040 --> 02:24:51,359
is written in a modular way that helps

2346
02:24:51,359 --> 02:24:54,160
the cryptos users to

2347
02:24:54,160 --> 02:24:56,319
choose which functionality they want to

2348
02:24:56,319 --> 02:24:57,520
use

2349
02:24:57,520 --> 02:24:59,200
for example the

2350
02:24:59,200 --> 02:25:01,680
functionalities that we've seen are for

2351
02:25:01,680 --> 02:25:03,040
example

2352
02:25:03,040 --> 02:25:06,080
a dll that performs persistency in some

2353
02:25:06,080 --> 02:25:07,760
various different ways

2354
02:25:07,760 --> 02:25:09,439
and a dll that can download the

2355
02:25:09,439 --> 02:25:11,600
additional malware

2356
02:25:11,600 --> 02:25:13,520
and many more

2357
02:25:13,520 --> 02:25:16,960
so once the dll finish calling those

2358
02:25:16,960 --> 02:25:18,000
modules

2359
02:25:18,000 --> 02:25:20,640
it will load a file

2360
02:25:20,640 --> 02:25:22,720
from that

2361
02:25:22,720 --> 02:25:24,880
folder to memory

2362
02:25:24,880 --> 02:25:28,160
in this example it's an xml file but

2363
02:25:28,160 --> 02:25:30,560
we've seen many other file formats such

2364
02:25:30,560 --> 02:25:33,439
as pdf png

2365
02:25:33,439 --> 02:25:35,920
and many more

2366
02:25:35,920 --> 02:25:38,240
and this file is structured as the

2367
02:25:38,240 --> 02:25:39,920
follows

2368
02:25:39,920 --> 02:25:43,200
in between its legitimate xml strings we

2369
02:25:43,200 --> 02:25:45,359
have the first shell code

2370
02:25:45,359 --> 02:25:47,120
later on we have a configuration

2371
02:25:47,120 --> 02:25:49,760
structure and after that we have several

2372
02:25:49,760 --> 02:25:52,800
of um encrypted chunks

2373
02:25:52,800 --> 02:25:54,080
and

2374
02:25:54,080 --> 02:25:57,040
once the main dll reads and loads that

2375
02:25:57,040 --> 02:26:00,000
file it will invoke the first shell code

2376
02:26:00,000 --> 02:26:01,439
by

2377
02:26:01,439 --> 02:26:04,800
holding a hard-coded offset to it

2378
02:26:04,800 --> 02:26:06,160
this shell code

2379
02:26:06,160 --> 02:26:08,720
has several functionalities

2380
02:26:08,720 --> 02:26:10,720
one of them is to load the configuration

2381
02:26:10,720 --> 02:26:13,920
structure that was placed in that xml

2382
02:26:13,920 --> 02:26:16,000
and this configuration structure holds

2383
02:26:16,000 --> 02:26:19,040
the decryption key

2384
02:26:19,040 --> 02:26:21,120
and the ship decryption key for those

2385
02:26:21,120 --> 02:26:22,560
encrypted chunks

2386
02:26:22,560 --> 02:26:26,080
and their offset and size in the

2387
02:26:26,080 --> 02:26:28,160
on the on that file

2388
02:26:28,160 --> 02:26:29,920
and after

2389
02:26:29,920 --> 02:26:32,479
sorry those configurations those

2390
02:26:32,479 --> 02:26:34,720
encrypted chunks are actually the final

2391
02:26:34,720 --> 02:26:38,240
payload and the second stage shellcode

2392
02:26:38,240 --> 02:26:40,560
and after

2393
02:26:40,560 --> 02:26:42,479
loading the configuration structure it

2394
02:26:42,479 --> 02:26:44,640
will decrypt those chunks and

2395
02:26:44,640 --> 02:26:48,399
concatenating them to the original form

2396
02:26:48,399 --> 02:26:50,560
then the decryption shell code will

2397
02:26:50,560 --> 02:26:53,040
invoke the second stage shell code which

2398
02:26:53,040 --> 02:26:54,240
is the

2399
02:26:54,240 --> 02:26:56,399
injection shell code

2400
02:26:56,399 --> 02:26:58,960
and this injection shell code well is

2401
02:26:58,960 --> 02:27:02,319
responsible for injecting the payload to

2402
02:27:02,319 --> 02:27:05,120
the original process memory

2403
02:27:05,120 --> 02:27:07,280
and

2404
02:27:07,280 --> 02:27:10,000
after so well that's the

2405
02:27:10,000 --> 02:27:12,080
high level overview on the infection

2406
02:27:12,080 --> 02:27:15,200
chain but for those of you who want

2407
02:27:15,200 --> 02:27:18,000
in-depth uh information on that crypto

2408
02:27:18,000 --> 02:27:20,000
can check our blog

2409
02:27:20,000 --> 02:27:23,040
for more information

2410
02:27:23,280 --> 02:27:26,720
so why did we name it babadela

2411
02:27:26,720 --> 02:27:28,640
the following is a code snippet from one

2412
02:27:28,640 --> 02:27:30,880
of the shell codes specifically the

2413
02:27:30,880 --> 02:27:33,359
second one the injection shell code

2414
02:27:33,359 --> 02:27:35,840
and if you take a closer look you will

2415
02:27:35,840 --> 02:27:38,960
see that there is there are two

2416
02:27:38,960 --> 02:27:40,800
d words in there

2417
02:27:40,800 --> 02:27:42,640
the one in green

2418
02:27:42,640 --> 02:27:44,720
dead beef with a typo

2419
02:27:44,720 --> 02:27:46,880
which is known to be used as a magic

2420
02:27:46,880 --> 02:27:48,240
debug value

2421
02:27:48,240 --> 02:27:51,280
and the second one in the red

2422
02:27:51,280 --> 02:27:52,960
babadeda

2423
02:27:52,960 --> 02:27:56,640
is in russian stands for grandma grandpa

2424
02:27:56,640 --> 02:27:59,760
so it was an easy choice as there were

2425
02:27:59,760 --> 02:28:02,640
no any other indicators

2426
02:28:02,640 --> 02:28:05,439
to choose from

2427
02:28:06,479 --> 02:28:09,760
moving on to what makes it so evasive

2428
02:28:09,760 --> 02:28:10,960
well

2429
02:28:10,960 --> 02:28:12,880
if you remember we have

2430
02:28:12,880 --> 02:28:14,880
the code logic that is splitted to

2431
02:28:14,880 --> 02:28:17,439
several dlls and

2432
02:28:17,439 --> 02:28:20,720
those dlls are placed among many other

2433
02:28:20,720 --> 02:28:23,760
legitimate files and the code in that in

2434
02:28:23,760 --> 02:28:25,600
those dlls

2435
02:28:25,600 --> 02:28:30,000
placed again among many legitimate code

2436
02:28:30,000 --> 02:28:32,800
and on top of that in your variants

2437
02:28:32,800 --> 02:28:34,399
we've seen that

2438
02:28:34,399 --> 02:28:37,680
the main dll is being loaded by a newer

2439
02:28:37,680 --> 02:28:40,160
technique that called the dll side

2440
02:28:40,160 --> 02:28:41,359
loading

2441
02:28:41,359 --> 02:28:43,040
which helps reducing the amount of

2442
02:28:43,040 --> 02:28:45,439
malicious files on that folder by one

2443
02:28:45,439 --> 02:28:46,240
and

2444
02:28:46,240 --> 02:28:48,800
results in executing the final payload

2445
02:28:48,800 --> 02:28:51,200
from a legitimate forces as if you

2446
02:28:51,200 --> 02:28:53,280
remember we've seen in our prevention

2447
02:28:53,280 --> 02:28:55,200
log earlier

2448
02:28:55,200 --> 02:28:56,560
and

2449
02:28:56,560 --> 02:28:58,720
in addition we have the final payload

2450
02:28:58,720 --> 02:29:01,120
and the second stage shellcode encrypted

2451
02:29:01,120 --> 02:29:03,280
in some file format

2452
02:29:03,280 --> 02:29:06,080
for example the xml and

2453
02:29:06,080 --> 02:29:08,080
they are encrypted as i said and split

2454
02:29:08,080 --> 02:29:09,280
it

2455
02:29:09,280 --> 02:29:11,600
so at this point we have the

2456
02:29:11,600 --> 02:29:14,399
um couple of logs from there we

2457
02:29:14,399 --> 02:29:16,399
extracted some hashes

2458
02:29:16,399 --> 02:29:17,200
and

2459
02:29:17,200 --> 02:29:19,760
understand how the crypto works

2460
02:29:19,760 --> 02:29:23,840
and i'll let it all continue from here

2461
02:29:24,560 --> 02:29:27,200
thank you arnold

2462
02:29:27,200 --> 02:29:30,080
so after understanding uh how the crypto

2463
02:29:30,080 --> 02:29:33,200
works we had to figure out what our next

2464
02:29:33,200 --> 02:29:35,439
steps

2465
02:29:35,439 --> 02:29:37,520
i like to look at analysis and research

2466
02:29:37,520 --> 02:29:39,439
as two different things

2467
02:29:39,439 --> 02:29:41,439
in by in my point of view

2468
02:29:41,439 --> 02:29:43,520
analysis is focused on a specific piece

2469
02:29:43,520 --> 02:29:46,319
of malware or a specific task such as

2470
02:29:46,319 --> 02:29:48,080
incident response

2471
02:29:48,080 --> 02:29:49,439
on the other hand

2472
02:29:49,439 --> 02:29:51,280
research is a broad field which is

2473
02:29:51,280 --> 02:29:54,160
redirected as new information revealed

2474
02:29:54,160 --> 02:29:56,720
that's actually exactly what happened

2475
02:29:56,720 --> 02:29:58,800
in our research we started by looking at

2476
02:29:58,800 --> 02:30:01,280
the baba data crypto itself and now we

2477
02:30:01,280 --> 02:30:03,280
are moving on to find its usages in the

2478
02:30:03,280 --> 02:30:05,840
wild

2479
02:30:05,840 --> 02:30:07,439
at this point we have a pretty good

2480
02:30:07,439 --> 02:30:08,960
understanding about

2481
02:30:08,960 --> 02:30:11,680
the inner workings of the crypter

2482
02:30:11,680 --> 02:30:14,080
we can use this knowledge to translate

2483
02:30:14,080 --> 02:30:16,640
and translate it into a yara rule for

2484
02:30:16,640 --> 02:30:18,560
those of you who don't know what a rule

2485
02:30:18,560 --> 02:30:21,120
is all you need to know for now is that

2486
02:30:21,120 --> 02:30:23,520
java provides you a convenient and

2487
02:30:23,520 --> 02:30:25,120
intelligent way

2488
02:30:25,120 --> 02:30:27,200
to search for byte strings

2489
02:30:27,200 --> 02:30:29,280
for bytes and

2490
02:30:29,280 --> 02:30:31,760
for strings and byte sequences in

2491
02:30:31,760 --> 02:30:33,280
binaries

2492
02:30:33,280 --> 02:30:35,920
so our yara is composed of three main

2493
02:30:35,920 --> 02:30:38,880
indicators the first two are being the

2494
02:30:38,880 --> 02:30:41,359
baba dada and dead beef placeholders are

2495
02:30:41,359 --> 02:30:43,120
not just talked about

2496
02:30:43,120 --> 02:30:45,920
and the third one is are few bytes from

2497
02:30:45,920 --> 02:30:48,160
the decryption shell code which i remind

2498
02:30:48,160 --> 02:30:51,840
you is not encrypted on disk

2499
02:30:52,640 --> 02:30:55,280
once we have our java rule tested and

2500
02:30:55,280 --> 02:30:57,840
ready we can use it to hunt for more

2501
02:30:57,840 --> 02:30:59,040
samples

2502
02:30:59,040 --> 02:31:02,800
we hunt in our own data on our own

2503
02:31:02,800 --> 02:31:05,600
telemetry from our own customers as well

2504
02:31:05,600 --> 02:31:08,160
as online malware databases such as

2505
02:31:08,160 --> 02:31:10,720
virustotal and malware bazaar

2506
02:31:10,720 --> 02:31:12,800
those databases usually

2507
02:31:12,800 --> 02:31:15,439
let you use your own url in order to

2508
02:31:15,439 --> 02:31:18,000
find format samples

2509
02:31:18,000 --> 02:31:21,200
so after running this sample collection

2510
02:31:21,200 --> 02:31:23,920
we had a pretty large database of bava

2511
02:31:23,920 --> 02:31:27,040
data samples that we needed to extract

2512
02:31:27,040 --> 02:31:29,439
some information from them so we wrote

2513
02:31:29,439 --> 02:31:32,880
an automation that extracted some iocs

2514
02:31:32,880 --> 02:31:35,120
which i'll talk more in a bit

2515
02:31:35,120 --> 02:31:36,960
about them in a bit

2516
02:31:36,960 --> 02:31:37,760
and

2517
02:31:37,760 --> 02:31:40,080
then we used open source intelligence to

2518
02:31:40,080 --> 02:31:43,359
find some references of usage in the

2519
02:31:43,359 --> 02:31:45,600
wild

2520
02:31:45,600 --> 02:31:48,640
so let's go back to the automation and

2521
02:31:48,640 --> 02:31:51,760
understand what data we need to

2522
02:31:51,760 --> 02:31:55,040
extract from each sample

2523
02:31:55,040 --> 02:31:57,920
to do that we need to understand what is

2524
02:31:57,920 --> 02:32:01,359
our goal and our goal was to find usage

2525
02:32:01,359 --> 02:32:02,399
in the world

2526
02:32:02,399 --> 02:32:05,359
so we figured out that the summer source

2527
02:32:05,359 --> 02:32:07,680
network activity and the final payload

2528
02:32:07,680 --> 02:32:09,760
classification will

2529
02:32:09,760 --> 02:32:11,200
be enough for us

2530
02:32:11,200 --> 02:32:13,439
and as you can see there is an example

2531
02:32:13,439 --> 02:32:15,200
this is an example

2532
02:32:15,200 --> 02:32:17,600
of our automation's output

2533
02:32:17,600 --> 02:32:19,840
the left column

2534
02:32:19,840 --> 02:32:21,600
is the final payload and the right

2535
02:32:21,600 --> 02:32:24,319
column is the corresponding network

2536
02:32:24,319 --> 02:32:27,280
activity network indicator which can be

2537
02:32:27,280 --> 02:32:31,439
your full url domain or ip or even blank

2538
02:32:31,439 --> 02:32:33,439
if we haven't succeeded

2539
02:32:33,439 --> 02:32:35,120
and we used

2540
02:32:35,120 --> 02:32:38,399
this output to see

2541
02:32:38,399 --> 02:32:41,040
what manual families

2542
02:32:41,040 --> 02:32:43,120
made the most use of the baba data

2543
02:32:43,120 --> 02:32:45,200
crypto

2544
02:32:45,200 --> 02:32:47,359
so this one was pretty interesting to

2545
02:32:47,359 --> 02:32:49,040
see

2546
02:32:49,040 --> 02:32:51,520
then after collecting and starting all

2547
02:32:51,520 --> 02:32:53,439
of the data and

2548
02:32:53,439 --> 02:32:54,720
we started

2549
02:32:54,720 --> 02:32:56,640
open source intelligence

2550
02:32:56,640 --> 02:32:59,200
we used online sandboxes malware

2551
02:32:59,200 --> 02:33:00,560
databases

2552
02:33:00,560 --> 02:33:02,640
social networks and of course google and

2553
02:33:02,640 --> 02:33:05,600
virustotal to see

2554
02:33:05,600 --> 02:33:07,680
any correlation between what we found so

2555
02:33:07,680 --> 02:33:08,720
far

2556
02:33:08,720 --> 02:33:10,720
and that's when we came across the

2557
02:33:10,720 --> 02:33:12,080
following tweet

2558
02:33:12,080 --> 02:33:14,640
the match with one one of our samples

2559
02:33:14,640 --> 02:33:15,920
hushes

2560
02:33:15,920 --> 02:33:17,840
the interesting part in this tweet is

2561
02:33:17,840 --> 02:33:19,920
that it provided us an additional

2562
02:33:19,920 --> 02:33:22,479
information to work with as you can see

2563
02:33:22,479 --> 02:33:25,120
there is some kind of app called mumbin

2564
02:33:25,120 --> 02:33:27,600
with a what's supposed to be

2565
02:33:27,600 --> 02:33:30,160
its domain but actually it's slightly

2566
02:33:30,160 --> 02:33:32,640
different from the original one

2567
02:33:32,640 --> 02:33:35,760
and a discord message so it's small in

2568
02:33:35,760 --> 02:33:38,000
here the discord message that

2569
02:33:38,000 --> 02:33:40,720
classified as a scam alert

2570
02:33:40,720 --> 02:33:43,040
we wanted to see if there are any other

2571
02:33:43,040 --> 02:33:44,160
services

2572
02:33:44,160 --> 02:33:46,479
that follow the same

2573
02:33:46,479 --> 02:33:49,120
pattern so we took the ip address of the

2574
02:33:49,120 --> 02:33:51,520
fake domain and

2575
02:33:51,520 --> 02:33:55,120
we saw that there are indeed uh other

2576
02:33:55,120 --> 02:33:59,680
services lister listed lister

2577
02:33:59,680 --> 02:34:02,640
listed under it the most famous one you

2578
02:34:02,640 --> 02:34:04,960
might be familiar with is a fake domain

2579
02:34:04,960 --> 02:34:08,080
of lava labs

2580
02:34:08,080 --> 02:34:11,680
but and then we got into inside those

2581
02:34:11,680 --> 02:34:14,479
fake websites website looked inside the

2582
02:34:14,479 --> 02:34:17,439
code and we were able to find some

2583
02:34:17,439 --> 02:34:20,479
watermarking that allowed us to write a

2584
02:34:20,479 --> 02:34:23,920
crawler which will find additional fixed

2585
02:34:23,920 --> 02:34:26,080
website like those

2586
02:34:26,080 --> 02:34:28,800
and after running our automation we

2587
02:34:28,800 --> 02:34:30,720
found a bunch of them

2588
02:34:30,720 --> 02:34:34,880
uh with a one specific common ground

2589
02:34:34,880 --> 02:34:37,840
that they are all some kind related to

2590
02:34:37,840 --> 02:34:41,600
the nft and crypto communities

2591
02:34:41,600 --> 02:34:43,359
the last piece of information we wanted

2592
02:34:43,359 --> 02:34:44,399
to verify

2593
02:34:44,399 --> 02:34:46,720
is whether the discord message is

2594
02:34:46,720 --> 02:34:49,840
consistent among all of those services

2595
02:34:49,840 --> 02:34:52,240
so we entered the discord server had

2596
02:34:52,240 --> 02:34:54,160
official discord server of which one of

2597
02:34:54,160 --> 02:34:57,520
them and we found that indeed they are

2598
02:34:57,520 --> 02:35:02,080
all having the same discord scam message

2599
02:35:02,080 --> 02:35:04,880
this point we understood that there is

2600
02:35:04,880 --> 02:35:06,880
some kind of an ongoing campaign that

2601
02:35:06,880 --> 02:35:09,600
targets the nft and crypto communities

2602
02:35:09,600 --> 02:35:12,479
and we decided to dig deeper

2603
02:35:12,479 --> 02:35:15,840
and that's what we found

2604
02:35:15,840 --> 02:35:18,319
for those of you who don't know the nft

2605
02:35:18,319 --> 02:35:20,319
and crypto communities are highly

2606
02:35:20,319 --> 02:35:22,800
dependent on discord as the main

2607
02:35:22,800 --> 02:35:24,399
communication channel

2608
02:35:24,399 --> 02:35:27,120
the attacker knew that fact and use it

2609
02:35:27,120 --> 02:35:30,960
used it in order to find new victims

2610
02:35:30,960 --> 02:35:33,680
once they targeted a service

2611
02:35:33,680 --> 02:35:35,040
it will

2612
02:35:35,040 --> 02:35:36,319
add its

2613
02:35:36,319 --> 02:35:39,439
bots into the discord server of this

2614
02:35:39,439 --> 02:35:40,399
service

2615
02:35:40,399 --> 02:35:43,520
and those both bots will send direct

2616
02:35:43,520 --> 02:35:47,760
message to each member of the channel

2617
02:35:47,760 --> 02:35:50,720
as you can see the the

2618
02:35:50,720 --> 02:35:52,240
discord message

2619
02:35:52,240 --> 02:35:55,359
has an official looking of a username

2620
02:35:55,359 --> 02:35:56,800
and title

2621
02:35:56,800 --> 02:35:57,680
the

2622
02:35:57,680 --> 02:36:00,479
discord the message body calls the

2623
02:36:00,479 --> 02:36:02,800
victim to download the new desktop app

2624
02:36:02,800 --> 02:36:04,640
in order to gain

2625
02:36:04,640 --> 02:36:06,880
access to the latest features

2626
02:36:06,880 --> 02:36:09,439
and at the end it provides a link to the

2627
02:36:09,439 --> 02:36:11,520
official website

2628
02:36:11,520 --> 02:36:13,840
which is different from the official one

2629
02:36:13,840 --> 02:36:16,319
for example in this case debunk the

2630
02:36:16,319 --> 02:36:17,439
official

2631
02:36:17,439 --> 02:36:19,359
website is debunked.com

2632
02:36:19,359 --> 02:36:24,120
where the provided one is debunk.found

2633
02:36:24,479 --> 02:36:27,200
once the victim fills into the scam

2634
02:36:27,200 --> 02:36:29,280
message and clicks the link it will be

2635
02:36:29,280 --> 02:36:32,000
displayed with a website that looks

2636
02:36:32,000 --> 02:36:34,720
almost identical with the one main

2637
02:36:34,720 --> 02:36:37,680
difference that the login button is now

2638
02:36:37,680 --> 02:36:40,640
a download button

2639
02:36:41,520 --> 02:36:43,520
yeah

2640
02:36:43,520 --> 02:36:44,399
um

2641
02:36:44,399 --> 02:36:47,200
if the victims continues and download

2642
02:36:47,200 --> 02:36:49,920
this file it's actually a malware that

2643
02:36:49,920 --> 02:36:52,399
upon execution provides

2644
02:36:52,399 --> 02:36:54,399
the attacker a full control on the

2645
02:36:54,399 --> 02:36:57,200
infected system

2646
02:36:57,200 --> 02:36:59,760
we decided to publish a second blog post

2647
02:36:59,760 --> 02:37:01,359
and

2648
02:37:01,359 --> 02:37:03,920
that details about this threat actor and

2649
02:37:03,920 --> 02:37:06,240
the attack chain

2650
02:37:06,240 --> 02:37:09,840
which you can go and read about

2651
02:37:10,319 --> 02:37:11,760
wait

2652
02:37:11,760 --> 02:37:14,080
we actually tracked back the activity of

2653
02:37:14,080 --> 02:37:17,120
this attacker and we found that it was

2654
02:37:17,120 --> 02:37:19,840
active since november 2020

2655
02:37:19,840 --> 02:37:22,479
and and the more interesting part is

2656
02:37:22,479 --> 02:37:25,040
that since august 2021 its preferred

2657
02:37:25,040 --> 02:37:27,280
crypto is no other than the baba data

2658
02:37:27,280 --> 02:37:29,200
crypto we just talked about

2659
02:37:29,200 --> 02:37:31,680
so this actually explains how we got to

2660
02:37:31,680 --> 02:37:33,920
this campaign at the first place

2661
02:37:33,920 --> 02:37:36,399
we wanted to see some usages in the wild

2662
02:37:36,399 --> 02:37:39,599
and we got them

2663
02:37:41,040 --> 02:37:42,960
at this point you

2664
02:37:42,960 --> 02:37:45,840
may ask yourself why do we publish our

2665
02:37:45,840 --> 02:37:47,760
work why do security companies and

2666
02:37:47,760 --> 02:37:50,160
security researchers maintain an active

2667
02:37:50,160 --> 02:37:53,040
blog there are actually many answers to

2668
02:37:53,040 --> 02:37:55,760
this question but for us is to hopefully

2669
02:37:55,760 --> 02:37:57,200
make an impact

2670
02:37:57,200 --> 02:37:58,960
i think

2671
02:37:58,960 --> 02:38:01,520
the this figure shows how many new

2672
02:38:01,520 --> 02:38:03,120
targeted services

2673
02:38:03,120 --> 02:38:05,200
were each month by

2674
02:38:05,200 --> 02:38:07,920
this attack chain and threat actor and

2675
02:38:07,920 --> 02:38:10,960
as you can see before uh releasing our

2676
02:38:10,960 --> 02:38:12,560
first block above

2677
02:38:12,560 --> 02:38:13,520
the baba

2678
02:38:13,520 --> 02:38:15,680
there were around 15 new targeted

2679
02:38:15,680 --> 02:38:17,040
services

2680
02:38:17,040 --> 02:38:19,280
and our first block only briefly

2681
02:38:19,280 --> 02:38:22,640
discussed about this ongoing campaign

2682
02:38:22,640 --> 02:38:25,439
so the impact was of course close to

2683
02:38:25,439 --> 02:38:26,560
none

2684
02:38:26,560 --> 02:38:29,120
and then we decided to publish a second

2685
02:38:29,120 --> 02:38:31,920
blog post focusing on the threat octo

2686
02:38:31,920 --> 02:38:33,359
its evolution over time its

2687
02:38:33,359 --> 02:38:35,920
infrastructure and much more

2688
02:38:35,920 --> 02:38:37,439
and finally

2689
02:38:37,439 --> 02:38:40,640
we got some impact and as of today we

2690
02:38:40,640 --> 02:38:42,479
can say that there are no

2691
02:38:42,479 --> 02:38:44,479
new targeted services

2692
02:38:44,479 --> 02:38:47,200
and we can say for sure we caused it

2693
02:38:47,200 --> 02:38:48,080
but

2694
02:38:48,080 --> 02:38:50,240
we for our own motivation we do like to

2695
02:38:50,240 --> 02:38:52,720
think so

2696
02:38:53,600 --> 02:38:55,760
okay another reason for us to publish

2697
02:38:55,760 --> 02:38:58,800
our work is uh to help other

2698
02:38:58,800 --> 02:39:00,399
with their research

2699
02:39:00,399 --> 02:39:02,560
for example let's take the case of baba

2700
02:39:02,560 --> 02:39:04,800
data against ukraine

2701
02:39:04,800 --> 02:39:06,960
the third ukraine the ukraine third has

2702
02:39:06,960 --> 02:39:08,319
published that ukrainian state

2703
02:39:08,319 --> 02:39:10,800
organization has been targeted to saint

2704
02:39:10,800 --> 02:39:13,280
both and outside malware attacks

2705
02:39:13,280 --> 02:39:16,240
and this blog post there provided some

2706
02:39:16,240 --> 02:39:21,040
details not many and with some iocs

2707
02:39:21,040 --> 02:39:23,040
but didn't explain so much about the

2708
02:39:23,040 --> 02:39:25,040
infection chain

2709
02:39:25,040 --> 02:39:27,439
then security company named chelsea took

2710
02:39:27,439 --> 02:39:30,160
the award work and expanded it and what

2711
02:39:30,160 --> 02:39:33,280
they found is that baba data was used to

2712
02:39:33,280 --> 02:39:35,600
drop the house still malwa

2713
02:39:35,600 --> 02:39:38,240
you can go and read more about this i

2714
02:39:38,240 --> 02:39:42,240
encouraging you a very good stuff

2715
02:39:42,319 --> 02:39:44,800
so let's take a recap of what we have

2716
02:39:44,800 --> 02:39:47,439
talked about today and what are the main

2717
02:39:47,439 --> 02:39:49,359
key takeaways we want you to take from

2718
02:39:49,359 --> 02:39:52,080
this talk and we'll begin by

2719
02:39:52,080 --> 02:39:54,160
understanding the threat landscape

2720
02:39:54,160 --> 02:39:56,479
you're working with if you recall that's

2721
02:39:56,479 --> 02:39:59,280
how the all resource story uh

2722
02:39:59,280 --> 02:40:01,600
began at the first place we knew how

2723
02:40:01,600 --> 02:40:04,000
certain malware infection chain would

2724
02:40:04,000 --> 02:40:05,680
look like and

2725
02:40:05,680 --> 02:40:07,760
that helped us to spot the anomaly

2726
02:40:07,760 --> 02:40:11,280
between the rest of the logs

2727
02:40:11,280 --> 02:40:13,600
look at the bigger picture

2728
02:40:13,600 --> 02:40:15,359
although we started by

2729
02:40:15,359 --> 02:40:17,439
inspecting the baba data crypto and its

2730
02:40:17,439 --> 02:40:19,359
inner walking we

2731
02:40:19,359 --> 02:40:21,840
then immediately took a step back

2732
02:40:21,840 --> 02:40:24,479
to understand what role it plays in a

2733
02:40:24,479 --> 02:40:26,800
full infection chain in a real

2734
02:40:26,800 --> 02:40:28,880
life scenario

2735
02:40:28,880 --> 02:40:31,120
use automation to make your analysis

2736
02:40:31,120 --> 02:40:32,560
easier

2737
02:40:32,560 --> 02:40:34,560
when you are dealing with a larger

2738
02:40:34,560 --> 02:40:36,080
amount of data

2739
02:40:36,080 --> 02:40:38,560
you must automate as many tasks as

2740
02:40:38,560 --> 02:40:40,319
possible to make your analysis and

2741
02:40:40,319 --> 02:40:42,720
research much easier and quicker

2742
02:40:42,720 --> 02:40:44,640
for example in our case we have

2743
02:40:44,640 --> 02:40:46,960
automated the sample collection the ioc

2744
02:40:46,960 --> 02:40:49,359
extraction the corolla and many more

2745
02:40:49,359 --> 02:40:51,040
components

2746
02:40:51,040 --> 02:40:53,840
and finally share your findings and make

2747
02:40:53,840 --> 02:40:55,760
use of other findings

2748
02:40:55,760 --> 02:40:58,160
this is a great community contribute to

2749
02:40:58,160 --> 02:41:01,040
it it will help others in their work and

2750
02:41:01,040 --> 02:41:03,680
hopefully will help you in your future

2751
02:41:03,680 --> 02:41:04,960
work

2752
02:41:04,960 --> 02:41:07,140
thank you everybody

2753
02:41:07,140 --> 02:41:12,859
[Applause]

2754
02:41:14,240 --> 02:41:15,920
cool great guys thank you very much for

2755
02:41:15,920 --> 02:41:17,600
the interesting talk it was nice to be

2756
02:41:17,600 --> 02:41:20,080
taking on on your journey of discovery

2757
02:41:20,080 --> 02:41:23,040
and also i mean linking to the keynote

2758
02:41:23,040 --> 02:41:25,120
from this morning sharing your findings

2759
02:41:25,120 --> 02:41:27,680
um sharing what you figured out it's a

2760
02:41:27,680 --> 02:41:29,680
it's a really cool thing to yeah to help

2761
02:41:29,680 --> 02:41:31,760
the community and maybe some of you got

2762
02:41:31,760 --> 02:41:33,920
interested in also

2763
02:41:33,920 --> 02:41:35,760
doing similar stuff

2764
02:41:35,760 --> 02:41:37,359
so yeah we have time for some questions

2765
02:41:37,359 --> 02:41:40,560
so when you have questions feel free

2766
02:41:40,560 --> 02:41:43,960
come to the microphone

2767
02:41:50,479 --> 02:41:51,760
um so

2768
02:41:51,760 --> 02:41:54,319
between the two blog posts uh there seem

2769
02:41:54,319 --> 02:41:57,920
to be around four months more or less

2770
02:41:57,920 --> 02:42:00,960
how much human efforts there is behind

2771
02:42:00,960 --> 02:42:02,560
this kind of research and how many

2772
02:42:02,560 --> 02:42:04,319
people were involved and

2773
02:42:04,319 --> 02:42:06,240
was this let's say

2774
02:42:06,240 --> 02:42:08,640
a focused effort on that or

2775
02:42:08,640 --> 02:42:10,000
how was this

2776
02:42:10,000 --> 02:42:11,520
done let's say

2777
02:42:11,520 --> 02:42:13,359
so um

2778
02:42:13,359 --> 02:42:15,840
actually after posting as i

2779
02:42:15,840 --> 02:42:18,479
already said uh at the first ball post

2780
02:42:18,479 --> 02:42:20,240
we briefly discussed about the campaign

2781
02:42:20,240 --> 02:42:22,479
so we already knew that there is some

2782
02:42:22,479 --> 02:42:24,479
kind of an ongoing campaign but we

2783
02:42:24,479 --> 02:42:26,399
didn't go

2784
02:42:26,399 --> 02:42:28,720
went in much details and understand it

2785
02:42:28,720 --> 02:42:32,240
fully but we keep our eyes on it

2786
02:42:32,240 --> 02:42:33,760
and then after

2787
02:42:33,760 --> 02:42:36,479
after a certain period of time we

2788
02:42:36,479 --> 02:42:38,479
decided to go back together

2789
02:42:38,479 --> 02:42:41,600
we worked together not only because it

2790
02:42:41,600 --> 02:42:43,200
was uh

2791
02:42:43,200 --> 02:42:44,800
uh it had

2792
02:42:44,800 --> 02:42:47,200
is a lot of work to be done but also

2793
02:42:47,200 --> 02:42:49,200
because it's fun to work together

2794
02:42:49,200 --> 02:42:52,319
and and we got back and we decided to

2795
02:42:52,319 --> 02:42:55,120
investigate more this threat acto

2796
02:42:55,120 --> 02:42:56,720
and it's it

2797
02:42:56,720 --> 02:42:57,840
was

2798
02:42:57,840 --> 02:42:58,880
i think

2799
02:42:58,880 --> 02:43:01,120
at the same scale of the first research

2800
02:43:01,120 --> 02:43:02,960
but it's different because the first

2801
02:43:02,960 --> 02:43:04,640
research is more about reverse

2802
02:43:04,640 --> 02:43:06,560
engineering and malware analysis where

2803
02:43:06,560 --> 02:43:09,439
the second is more threat intelligent

2804
02:43:09,439 --> 02:43:10,640
and

2805
02:43:10,640 --> 02:43:11,439
and

2806
02:43:11,439 --> 02:43:13,600
those sort of stuff but

2807
02:43:13,600 --> 02:43:14,560
yeah

2808
02:43:14,560 --> 02:43:17,760
thank you thank you

2809
02:43:19,200 --> 02:43:20,560
you had this

2810
02:43:20,560 --> 02:43:22,560
slide with the bullet points what um

2811
02:43:22,560 --> 02:43:26,000
about what made the scripture so evasive

2812
02:43:26,000 --> 02:43:28,960
um i'm not i'm new to modern analysis

2813
02:43:28,960 --> 02:43:29,760
but

2814
02:43:29,760 --> 02:43:31,760
still none of those bullets was really

2815
02:43:31,760 --> 02:43:34,319
new to me so was is there any really

2816
02:43:34,319 --> 02:43:36,560
specific thing that made it so evasive

2817
02:43:36,560 --> 02:43:39,359
or is it is it actually not that hard to

2818
02:43:39,359 --> 02:43:41,040
make a crypter

2819
02:43:41,040 --> 02:43:43,520
with a zero detection rate so is it

2820
02:43:43,520 --> 02:43:45,040
common is it a common thing or is it

2821
02:43:45,040 --> 02:43:47,840
really that special

2822
02:43:47,840 --> 02:43:49,840
so first of all

2823
02:43:49,840 --> 02:43:52,080
it's not that hard to make a crypto so

2824
02:43:52,080 --> 02:43:53,279
evasive

2825
02:43:53,279 --> 02:43:54,080
but

2826
02:43:54,080 --> 02:43:57,200
the the thing that was special here that

2827
02:43:57,200 --> 02:43:59,520
was the fact that the script was evasive

2828
02:43:59,520 --> 02:44:01,359
for a very long time

2829
02:44:01,359 --> 02:44:03,600
that was the

2830
02:44:03,600 --> 02:44:05,920
what's interesting in this part

2831
02:44:05,920 --> 02:44:07,680
and

2832
02:44:07,680 --> 02:44:08,640
by

2833
02:44:08,640 --> 02:44:11,760
and this and it does that by

2834
02:44:11,760 --> 02:44:14,720
com combining all of those bullets as

2835
02:44:14,720 --> 02:44:17,600
you said together that's how we it does

2836
02:44:17,600 --> 02:44:19,840
that

2837
02:44:26,080 --> 02:44:28,080
very nice then um yeah thanks again you

2838
02:44:28,080 --> 02:44:29,680
guys for also making a trip from tel

2839
02:44:29,680 --> 02:44:32,960
aviv here to munich and to present and

2840
02:44:32,960 --> 02:44:37,200
thanks a lot another round of applause

2841
02:44:37,200 --> 02:44:44,419
[Applause]

2842
02:46:59,439 --> 02:47:01,279
okay yeah there's still people coming in

2843
02:47:01,279 --> 02:47:03,359
but um i think looking at the time you

2844
02:47:03,359 --> 02:47:04,960
should get started

2845
02:47:04,960 --> 02:47:10,080
so please take a seat um and yeah

2846
02:47:11,840 --> 02:47:13,279
it seems the other talk took a bit

2847
02:47:13,279 --> 02:47:15,600
longer

2848
02:47:16,000 --> 02:47:16,960
so

2849
02:47:16,960 --> 02:47:18,800
all right then let's get started so

2850
02:47:18,800 --> 02:47:20,960
welcome again to the third talk in this

2851
02:47:20,960 --> 02:47:23,040
blog before the lunch break

2852
02:47:23,040 --> 02:47:24,960
my name is oliver i'm the emcee for the

2853
02:47:24,960 --> 02:47:27,279
session and i want to introduce today to

2854
02:47:27,279 --> 02:47:29,439
you christian bauer

2855
02:47:29,439 --> 02:47:31,680
he's talking about building a security

2856
02:47:31,680 --> 02:47:34,560
program for sas product development

2857
02:47:34,560 --> 02:47:37,279
and um i think that this is how to get

2858
02:47:37,279 --> 02:47:38,880
security right in a new product

2859
02:47:38,880 --> 02:47:41,520
development so he will um hopefully show

2860
02:47:41,520 --> 02:47:43,760
you how to do that so thank you very

2861
02:47:43,760 --> 02:47:45,279
much for coming by sharing your talk

2862
02:47:45,279 --> 02:47:48,080
question and give an applause and have a

2863
02:47:48,080 --> 02:47:50,560
nice thought

2864
02:47:51,359 --> 02:47:53,760
well thank you for an introduction so as

2865
02:47:53,760 --> 02:47:55,040
the name implies here this is basically

2866
02:47:55,040 --> 02:47:56,319
going to be about

2867
02:47:56,319 --> 02:47:58,080
how to secure cloud-based product

2868
02:47:58,080 --> 02:47:59,359
development

2869
02:47:59,359 --> 02:48:01,040
but before we start maybe a few words

2870
02:48:01,040 --> 02:48:02,640
about myself so i've been working in

2871
02:48:02,640 --> 02:48:04,720
software industry for a few years now i

2872
02:48:04,720 --> 02:48:06,240
started out as a software engineer

2873
02:48:06,240 --> 02:48:08,640
originally but then transitioned over

2874
02:48:08,640 --> 02:48:10,720
into a security role

2875
02:48:10,720 --> 02:48:11,920
and

2876
02:48:11,920 --> 02:48:13,439
i'm currently working with a security

2877
02:48:13,439 --> 02:48:15,520
engineer securing an as a service

2878
02:48:15,520 --> 02:48:17,120
platform which is currently running on

2879
02:48:17,120 --> 02:48:19,040
two cloud-based platforms

2880
02:48:19,040 --> 02:48:21,120
and this talk is a kind of a summary of

2881
02:48:21,120 --> 02:48:23,120
the things i've learned over the years

2882
02:48:23,120 --> 02:48:24,800
both in my current job but also in my

2883
02:48:24,800 --> 02:48:26,399
previous job i've seen quite a lot of

2884
02:48:26,399 --> 02:48:29,120
different cloud-based products

2885
02:48:29,120 --> 02:48:31,760
okay so imagine you're a security

2886
02:48:31,760 --> 02:48:33,760
engineer and you're starting a new job

2887
02:48:33,760 --> 02:48:36,080
right today

2888
02:48:36,080 --> 02:48:37,840
you're working for the startup called

2889
02:48:37,840 --> 02:48:40,720
acme and you've hired specifically to

2890
02:48:40,720 --> 02:48:42,800
build up their cloud security program

2891
02:48:42,800 --> 02:48:44,560
that means you're the first person who

2892
02:48:44,560 --> 02:48:45,920
really thinks about security from a

2893
02:48:45,920 --> 02:48:47,680
holistic perspective and hopefully or

2894
02:48:47,680 --> 02:48:49,359
knows what you're supposed or what they

2895
02:48:49,359 --> 02:48:51,439
are supposed to be doing

2896
02:48:51,439 --> 02:48:52,800
and when we are talking about product

2897
02:48:52,800 --> 02:48:54,640
well their product is what you see very

2898
02:48:54,640 --> 02:48:56,080
often these days

2899
02:48:56,080 --> 02:48:57,600
on the one hand it's an asset service

2900
02:48:57,600 --> 02:48:59,520
offering can be platform necessary it's

2901
02:48:59,520 --> 02:49:01,359
a software as a service

2902
02:49:01,359 --> 02:49:02,800
it's running on those

2903
02:49:02,800 --> 02:49:04,399
usually well-known cloud provider

2904
02:49:04,399 --> 02:49:06,080
platforms

2905
02:49:06,080 --> 02:49:07,680
and their technology stack is so

2906
02:49:07,680 --> 02:49:09,359
something you see very often these days

2907
02:49:09,359 --> 02:49:11,279
so the applications are packaged into

2908
02:49:11,279 --> 02:49:13,279
containers the containers are being

2909
02:49:13,279 --> 02:49:15,359
deployed and executed by kubernetes and

2910
02:49:15,359 --> 02:49:17,120
you have some additional cloud service

2911
02:49:17,120 --> 02:49:19,200
around it that you need for compute

2912
02:49:19,200 --> 02:49:22,640
instances for storage services and so on

2913
02:49:22,640 --> 02:49:24,319
so this is another thing do let's say

2914
02:49:24,319 --> 02:49:26,319
unusual that you can see in cloud space

2915
02:49:26,319 --> 02:49:27,600
these days

2916
02:49:27,600 --> 02:49:29,520
so the question is

2917
02:49:29,520 --> 02:49:31,359
where do you start right security is a

2918
02:49:31,359 --> 02:49:34,000
huge topic and you can't do everything

2919
02:49:34,000 --> 02:49:35,680
on day one you have to somehow

2920
02:49:35,680 --> 02:49:38,319
prioritize and think about what can you

2921
02:49:38,319 --> 02:49:39,520
do the beginning and what can you do

2922
02:49:39,520 --> 02:49:40,479
later

2923
02:49:40,479 --> 02:49:41,760
that means at the beginning we want to

2924
02:49:41,760 --> 02:49:43,680
go for some easy wins right things which

2925
02:49:43,680 --> 02:49:46,080
are so-called low-hanging fruits but at

2926
02:49:46,080 --> 02:49:47,760
the same time have a high security

2927
02:49:47,760 --> 02:49:49,680
impact in terms of improving the

2928
02:49:49,680 --> 02:49:52,080
security posture of the products

2929
02:49:52,080 --> 02:49:53,680
so how can we do that and that's

2930
02:49:53,680 --> 02:49:55,200
basically what this talk is about how

2931
02:49:55,200 --> 02:49:57,359
can we define a security roadmap that

2932
02:49:57,359 --> 02:50:00,399
somehow starts in a relatively easy way

2933
02:50:00,399 --> 02:50:03,840
and then scales up over time

2934
02:50:03,920 --> 02:50:06,000
so security activities that i'm going to

2935
02:50:06,000 --> 02:50:07,359
present on the next slide are grouped

2936
02:50:07,359 --> 02:50:09,600
into different phases phrase one is like

2937
02:50:09,600 --> 02:50:11,600
the absolute basics that really everyone

2938
02:50:11,600 --> 02:50:12,880
should start with

2939
02:50:12,880 --> 02:50:14,319
and then starting from phase two we are

2940
02:50:14,319 --> 02:50:15,920
going to have more topics that might

2941
02:50:15,920 --> 02:50:18,319
only pay off in the medium term

2942
02:50:18,319 --> 02:50:20,000
whether something should be in phase two

2943
02:50:20,000 --> 02:50:22,080
or three or four is a little bit let's

2944
02:50:22,080 --> 02:50:24,240
say it's always biased

2945
02:50:24,240 --> 02:50:25,600
it depends on what's your background

2946
02:50:25,600 --> 02:50:26,720
right

2947
02:50:26,720 --> 02:50:28,880
for people here who are have a web

2948
02:50:28,880 --> 02:50:30,160
application security background they

2949
02:50:30,160 --> 02:50:31,279
might complain hey there should be more

2950
02:50:31,279 --> 02:50:33,439
web application security in there

2951
02:50:33,439 --> 02:50:34,640
i've done a lot of work on the

2952
02:50:34,640 --> 02:50:36,319
infrastructure space so obviously it's

2953
02:50:36,319 --> 02:50:37,680
maybe a little bit more biased towards

2954
02:50:37,680 --> 02:50:38,960
infrastructure

2955
02:50:38,960 --> 02:50:40,319
it also depends what's the current

2956
02:50:40,319 --> 02:50:42,399
security posture of a company

2957
02:50:42,399 --> 02:50:45,840
and so on so long story short

2958
02:50:45,840 --> 02:50:47,200
about phase one should really apply to

2959
02:50:47,200 --> 02:50:49,439
everyone afterwards it depends what's

2960
02:50:49,439 --> 02:50:50,880
the best approach for you but it's more

2961
02:50:50,880 --> 02:50:53,840
likely to give you some inspiration

2962
02:50:53,840 --> 02:50:55,359
all right so

2963
02:50:55,359 --> 02:50:56,720
what are the security phases i have to

2964
02:50:56,720 --> 02:50:58,800
find four phases and if you do all of

2965
02:50:58,800 --> 02:51:00,800
those you already have achieved a quite

2966
02:51:00,800 --> 02:51:02,479
good security back

2967
02:51:02,479 --> 02:51:04,479
posture doesn't mean you are completed

2968
02:51:04,479 --> 02:51:06,080
but you have i think some good

2969
02:51:06,080 --> 02:51:07,439
achievements

2970
02:51:07,439 --> 02:51:09,359
phrase one at the very top let's say the

2971
02:51:09,359 --> 02:51:11,040
basics i'm going to talk about those in

2972
02:51:11,040 --> 02:51:12,640
detail

2973
02:51:12,640 --> 02:51:13,920
phase two these are already some

2974
02:51:13,920 --> 02:51:15,439
additional topics

2975
02:51:15,439 --> 02:51:16,960
i will briefly cover them and

2976
02:51:16,960 --> 02:51:19,040
unfortunately regarding phase three and

2977
02:51:19,040 --> 02:51:20,800
four i don't have enough time to dive to

2978
02:51:20,800 --> 02:51:23,040
talk about that but i have backup slides

2979
02:51:23,040 --> 02:51:25,200
if anyone should be interested

2980
02:51:25,200 --> 02:51:27,200
the idea is first one i said the basics

2981
02:51:27,200 --> 02:51:30,000
phase two is some topics that are again

2982
02:51:30,000 --> 02:51:32,080
easy wins but at the same time should

2983
02:51:32,080 --> 02:51:33,920
payoff on the medium term starting from

2984
02:51:33,920 --> 02:51:36,479
phase three we have some topics that

2985
02:51:36,479 --> 02:51:38,319
really either need a lot of effort or

2986
02:51:38,319 --> 02:51:39,760
are only going to pay off in the long

2987
02:51:39,760 --> 02:51:40,720
term

2988
02:51:40,720 --> 02:51:43,200
especially for phase four

2989
02:51:43,200 --> 02:51:44,880
so i say that don't have much time so

2990
02:51:44,880 --> 02:51:46,399
let's get started

2991
02:51:46,399 --> 02:51:48,080
phase one and this is actually the very

2992
02:51:48,080 --> 02:51:49,439
first task that you have to do at the

2993
02:51:49,439 --> 02:51:50,479
beginning

2994
02:51:50,479 --> 02:51:52,000
remember you are coming in this is your

2995
02:51:52,000 --> 02:51:53,279
first day and you have no idea what

2996
02:51:53,279 --> 02:51:54,720
you're dealing with

2997
02:51:54,720 --> 02:51:56,319
you don't know how to secure something

2998
02:51:56,319 --> 02:51:58,160
if you don't know what you have

2999
02:51:58,160 --> 02:51:59,600
the first idea is you have to get an

3000
02:51:59,600 --> 02:52:01,359
overview of a cloud environment which

3001
02:52:01,359 --> 02:52:03,200
cloud providers are using how many

3002
02:52:03,200 --> 02:52:04,640
accounts do you have

3003
02:52:04,640 --> 02:52:05,920
do you have a segregation within

3004
02:52:05,920 --> 02:52:08,560
production non-production environments

3005
02:52:08,560 --> 02:52:10,560
and most importantly you need access to

3006
02:52:10,560 --> 02:52:12,160
those accounts and start looking into

3007
02:52:12,160 --> 02:52:14,080
them what kind of infrastructure is

3008
02:52:14,080 --> 02:52:15,600
deployed in those accounts what kind of

3009
02:52:15,600 --> 02:52:17,920
services are being used and

3010
02:52:17,920 --> 02:52:20,240
most importantly how are those services

3011
02:52:20,240 --> 02:52:22,640
configured from a security perspective

3012
02:52:22,640 --> 02:52:24,960
we'll talk about that a little bit later

3013
02:52:24,960 --> 02:52:26,880
if you're only dealing with a handful of

3014
02:52:26,880 --> 02:52:28,880
accounts so in the airbusiness course it

3015
02:52:28,880 --> 02:52:30,160
accounts on google cloud is called

3016
02:52:30,160 --> 02:52:32,080
project but it's basically always

3017
02:52:32,080 --> 02:52:34,080
a cloud environment

3018
02:52:34,080 --> 02:52:35,760
you will easily run in this callability

3019
02:52:35,760 --> 02:52:37,200
problem if you have to deal with those

3020
02:52:37,200 --> 02:52:38,960
and so maybe even hundreds of accounts

3021
02:52:38,960 --> 02:52:41,279
you can go over them manually right

3022
02:52:41,279 --> 02:52:42,479
can you click

3023
02:52:42,479 --> 02:52:44,240
login into every individual account

3024
02:52:44,240 --> 02:52:45,680
start clicking right on the dashboard

3025
02:52:45,680 --> 02:52:47,520
that's not going to scale

3026
02:52:47,520 --> 02:52:49,840
so you need some form of automation and

3027
02:52:49,840 --> 02:52:51,359
there's a lot of tools out there that

3028
02:52:51,359 --> 02:52:52,880
can really help you with that and these

3029
02:52:52,880 --> 02:52:54,160
are all open source tools that i've

3030
02:52:54,160 --> 02:52:56,399
listed here and that list is not even

3031
02:52:56,399 --> 02:52:58,000
complete

3032
02:52:58,000 --> 02:52:59,760
which tool is the best one for you

3033
02:52:59,760 --> 02:53:01,760
depends on what you prefer working with

3034
02:53:01,760 --> 02:53:03,520
and also how many cloud platforms you

3035
02:53:03,520 --> 02:53:05,760
have to cover some are multi-cloud some

3036
02:53:05,760 --> 02:53:07,840
are only supporting one individual cloud

3037
02:53:07,840 --> 02:53:10,080
firm in particular aws because it's the

3038
02:53:10,080 --> 02:53:11,920
most widely used one

3039
02:53:11,920 --> 02:53:14,160
it also depends how you want to handle

3040
02:53:14,160 --> 02:53:15,680
the tool and what kind of output are you

3041
02:53:15,680 --> 02:53:17,359
fine with reading json output or do you

3042
02:53:17,359 --> 02:53:19,520
need some double outputs do you want to

3043
02:53:19,520 --> 02:53:22,000
process this further

3044
02:53:22,000 --> 02:53:23,359
either way i

3045
02:53:23,359 --> 02:53:24,640
personally have used steamweb a lot

3046
02:53:24,640 --> 02:53:26,399
because it's super flexible and supports

3047
02:53:26,399 --> 02:53:28,000
a lot of different platforms including

3048
02:53:28,000 --> 02:53:29,600
software service platforms like

3049
02:53:29,600 --> 02:53:31,680
cloudflare or github

3050
02:53:31,680 --> 02:53:33,279
but it is you can use that to

3051
02:53:33,279 --> 02:53:35,120
automatically obtain data from your

3052
02:53:35,120 --> 02:53:36,399
environments

3053
02:53:36,399 --> 02:53:38,560
and specifically kind of select what

3054
02:53:38,560 --> 02:53:39,920
kind of information you are looking for

3055
02:53:39,920 --> 02:53:42,560
what kind of misconfigurations maybe

3056
02:53:42,560 --> 02:53:44,160
that gives you a basic idea on how

3057
02:53:44,160 --> 02:53:45,439
serious security was taking the

3058
02:53:45,439 --> 02:53:46,800
beginning right

3059
02:53:46,800 --> 02:53:48,640
if you already see some bad things there

3060
02:53:48,640 --> 02:53:50,080
you know oh this is not a good start

3061
02:53:50,080 --> 02:53:52,399
otherwise if it's looking roughly good

3062
02:53:52,399 --> 02:53:54,399
you know okay i don't have to start from

3063
02:53:54,399 --> 02:53:56,240
the beginning

3064
02:53:56,240 --> 02:53:58,000
either way so i've used this tool to

3065
02:53:58,000 --> 02:53:59,520
collect a lot of information and then

3066
02:53:59,520 --> 02:54:00,560
have to start looking for this

3067
02:54:00,560 --> 02:54:02,640
information and the very first thing

3068
02:54:02,640 --> 02:54:04,720
that i usually want to do there that's

3069
02:54:04,720 --> 02:54:07,520
step two now parameter protection and in

3070
02:54:07,520 --> 02:54:09,600
cloud we have two parameters the first

3071
02:54:09,600 --> 02:54:11,040
parameter is identity and access

3072
02:54:11,040 --> 02:54:13,040
management and i think this is a big

3073
02:54:13,040 --> 02:54:14,720
differentiator of cloud compared to

3074
02:54:14,720 --> 02:54:16,560
on-premise systems

3075
02:54:16,560 --> 02:54:18,960
because the cloud provider api is the

3076
02:54:18,960 --> 02:54:20,560
thing that's used to access your cloud

3077
02:54:20,560 --> 02:54:22,640
environments and that's reachable over

3078
02:54:22,640 --> 02:54:24,319
the internet to everyone

3079
02:54:24,319 --> 02:54:25,840
the only thing that keeps you from

3080
02:54:25,840 --> 02:54:27,600
getting breached on the cloud provider

3081
02:54:27,600 --> 02:54:30,640
level is to keep your credentials secure

3082
02:54:30,640 --> 02:54:32,000
that's why it's so important to really

3083
02:54:32,000 --> 02:54:33,279
look at what kind of credentials are

3084
02:54:33,279 --> 02:54:35,680
currently being used

3085
02:54:35,680 --> 02:54:36,479
so

3086
02:54:36,479 --> 02:54:37,920
we have to differentiate here between

3087
02:54:37,920 --> 02:54:40,640
human users and service accounts human

3088
02:54:40,640 --> 02:54:43,520
user and we know you have a form or a

3089
02:54:43,520 --> 02:54:45,359
login form you log in with a password

3090
02:54:45,359 --> 02:54:47,439
maybe then you get in

3091
02:54:47,439 --> 02:54:49,600
that's what at least enable s is

3092
02:54:49,600 --> 02:54:51,600
supported actually you have console

3093
02:54:51,600 --> 02:54:54,560
login with a password or if you need api

3094
02:54:54,560 --> 02:54:56,399
programmatic access you have an access

3095
02:54:56,399 --> 02:54:57,359
key

3096
02:54:57,359 --> 02:54:59,840
both are long term credentials that do

3097
02:54:59,840 --> 02:55:01,920
not expire and you don't have to rotate

3098
02:55:01,920 --> 02:55:04,560
them which means that's a problem

3099
02:55:04,560 --> 02:55:07,200
actually if you look into the publicly

3100
02:55:07,200 --> 02:55:08,399
known

3101
02:55:08,399 --> 02:55:11,680
security incidents of aws customers

3102
02:55:11,680 --> 02:55:14,080
very often the initial act access vector

3103
02:55:14,080 --> 02:55:16,319
for the attacker was a leaked access key

3104
02:55:16,319 --> 02:55:17,840
like somebody committing it to public

3105
02:55:17,840 --> 02:55:19,600
github repo

3106
02:55:19,600 --> 02:55:21,279
so you have to somehow get rid of those

3107
02:55:21,279 --> 02:55:23,680
access keys or more generally long-term

3108
02:55:23,680 --> 02:55:24,880
secrets

3109
02:55:24,880 --> 02:55:26,640
so for humans there's no need to use it

3110
02:55:26,640 --> 02:55:28,160
anymore because you can set up single

3111
02:55:28,160 --> 02:55:29,359
sign-on

3112
02:55:29,359 --> 02:55:31,840
the idea is you singles and on and then

3113
02:55:31,840 --> 02:55:33,680
the human user can obtain a short lift

3114
02:55:33,680 --> 02:55:35,600
token to access the cloud provider

3115
02:55:35,600 --> 02:55:38,080
interfaces including the api

3116
02:55:38,080 --> 02:55:39,200
and as we're talking about single

3117
02:55:39,200 --> 02:55:41,200
sign-on we should obviously be using

3118
02:55:41,200 --> 02:55:42,880
multi-factor authentication as well

3119
02:55:42,880 --> 02:55:45,520
these days and particularly for the

3120
02:55:45,520 --> 02:55:47,279
production environment environment i

3121
02:55:47,279 --> 02:55:48,399
think it's worth investing in the

3122
02:55:48,399 --> 02:55:50,319
physical authentication tokens as well

3123
02:55:50,319 --> 02:55:52,399
like free to do which i think are very

3124
02:55:52,399 --> 02:55:54,479
cost efficient

3125
02:55:54,479 --> 02:55:56,240
now single sign-on is not going to work

3126
02:55:56,240 --> 02:55:57,680
with service accounts right we need

3127
02:55:57,680 --> 02:56:00,080
something else there i see quite often

3128
02:56:00,080 --> 02:56:01,359
that you have an application that's

3129
02:56:01,359 --> 02:56:03,760
running on for example google cloud

3130
02:56:03,760 --> 02:56:05,840
and needs access to the google cloud api

3131
02:56:05,840 --> 02:56:07,200
that means your application is going to

3132
02:56:07,200 --> 02:56:08,560
need a credential

3133
02:56:08,560 --> 02:56:10,560
bible summits use those long term

3134
02:56:10,560 --> 02:56:12,880
secrets just for that but you don't have

3135
02:56:12,880 --> 02:56:14,399
to do that anymore

3136
02:56:14,399 --> 02:56:16,000
because the better way is to obtain a

3137
02:56:16,000 --> 02:56:17,520
short lived token from the cloud

3138
02:56:17,520 --> 02:56:19,359
provider metadata service

3139
02:56:19,359 --> 02:56:22,080
so in the case of for example aws if

3140
02:56:22,080 --> 02:56:24,080
you're running applications inside

3141
02:56:24,080 --> 02:56:26,640
kubernetes they have a feature called im

3142
02:56:26,640 --> 02:56:28,479
rules for service accounts which means

3143
02:56:28,479 --> 02:56:31,040
you sign an i role do your application

3144
02:56:31,040 --> 02:56:33,200
that means the application can get a

3145
02:56:33,200 --> 02:56:34,319
short-lived token from the cloud

3146
02:56:34,319 --> 02:56:36,319
provider metadata service there is no

3147
02:56:36,319 --> 02:56:38,560
long-term secret involved anymore those

3148
02:56:38,560 --> 02:56:40,720
tokens usually only have a lifetime

3149
02:56:40,720 --> 02:56:44,240
order of magnitudes of hours

3150
02:56:44,319 --> 02:56:45,840
it's the same on google cloud the

3151
02:56:45,840 --> 02:56:47,200
feature there if they're using their

3152
02:56:47,200 --> 02:56:49,359
managed kubernetes service is a workload

3153
02:56:49,359 --> 02:56:51,279
identity which works basically the same

3154
02:56:51,279 --> 02:56:54,080
we have application running inside

3155
02:56:54,080 --> 02:56:56,160
google's managed kubernetes you assign a

3156
02:56:56,160 --> 02:56:58,319
role to it and then you can obtain

3157
02:56:58,319 --> 02:56:59,920
a short lived occur from a metadata

3158
02:56:59,920 --> 02:57:01,439
service

3159
02:57:01,439 --> 02:57:02,960
so that works very well if your

3160
02:57:02,960 --> 02:57:04,640
application needs access to the cloud

3161
02:57:04,640 --> 02:57:07,359
provided api of the same platform

3162
02:57:07,359 --> 02:57:08,880
things a little bit more complicated for

3163
02:57:08,880 --> 02:57:10,880
cross-cloud provider access

3164
02:57:10,880 --> 02:57:12,880
like application running google cloud

3165
02:57:12,880 --> 02:57:15,120
needs access to aws api or the other way

3166
02:57:15,120 --> 02:57:16,160
around

3167
02:57:16,160 --> 02:57:17,920
until maybe two years ago the only

3168
02:57:17,920 --> 02:57:20,240
solution was you generate an access key

3169
02:57:20,240 --> 02:57:22,560
in aws you export it and basically

3170
02:57:22,560 --> 02:57:24,640
import it into your application google

3171
02:57:24,640 --> 02:57:26,720
cloud which means you have a long-term

3172
02:57:26,720 --> 02:57:29,040
secret that you can leak again

3173
02:57:29,040 --> 02:57:30,560
luckily you don't have to use it anymore

3174
02:57:30,560 --> 02:57:32,080
because you can now use identity

3175
02:57:32,080 --> 02:57:34,399
federation for service accounts

3176
02:57:34,399 --> 02:57:36,319
so if i continue this example my

3177
02:57:36,319 --> 02:57:38,479
application running google cloud obtains

3178
02:57:38,479 --> 02:57:40,640
the token from google cloud as described

3179
02:57:40,640 --> 02:57:41,439
here

3180
02:57:41,439 --> 02:57:42,960
then this application starts calling

3181
02:57:42,960 --> 02:57:45,120
over to aws and authenticates with the

3182
02:57:45,120 --> 02:57:47,439
google cloud token which is accepted by

3183
02:57:47,439 --> 02:57:50,640
aws and they will issue an amazon token

3184
02:57:50,640 --> 02:57:51,600
for that

3185
02:57:51,600 --> 02:57:53,600
now application can use that amazon duke

3186
02:57:53,600 --> 02:57:55,520
to access the api

3187
02:57:55,520 --> 02:57:56,800
and all of those tokens again

3188
02:57:56,800 --> 02:57:58,240
short-lived

3189
02:57:58,240 --> 02:58:00,399
and this works because on the aws side i

3190
02:58:00,399 --> 02:58:02,080
was set up saying hey if somebody shows

3191
02:58:02,080 --> 02:58:04,399
up with a google token that was issued

3192
02:58:04,399 --> 02:58:05,760
by google

3193
02:58:05,760 --> 02:58:08,080
and is assigned a particular identity at

3194
02:58:08,080 --> 02:58:10,960
google then this person can now get an

3195
02:58:10,960 --> 02:58:13,040
aws token

3196
02:58:13,040 --> 02:58:14,800
meaning that i've completely eliminated

3197
02:58:14,800 --> 02:58:16,880
the need for long-term secrets on both

3198
02:58:16,880 --> 02:58:19,439
aws and gcp on the same works with other

3199
02:58:19,439 --> 02:58:21,120
cloud platforms as well

3200
02:58:21,120 --> 02:58:23,120
which means means i have a two-story the

3201
02:58:23,120 --> 02:58:25,439
risk of leaking long-term keys which is

3202
02:58:25,439 --> 02:58:27,680
often a problem for many people or

3203
02:58:27,680 --> 02:58:29,600
companies

3204
02:58:29,600 --> 02:58:31,520
so that was about

3205
02:58:31,520 --> 02:58:34,160
access keys or credentials

3206
02:58:34,160 --> 02:58:35,680
another issue i see very often in the

3207
02:58:35,680 --> 02:58:37,439
beginning people i mean you have to sign

3208
02:58:37,439 --> 02:58:39,439
i am privileged right you have a token

3209
02:58:39,439 --> 02:58:41,359
that's one thing but you also need to

3210
02:58:41,359 --> 02:58:43,359
define what can i actually access with

3211
02:58:43,359 --> 02:58:44,880
the token

3212
02:58:44,880 --> 02:58:47,120
and people often then do assign a lot of

3213
02:58:47,120 --> 02:58:49,040
privileges right because it makes life

3214
02:58:49,040 --> 02:58:50,560
easier for them

3215
02:58:50,560 --> 02:58:52,399
so it makes a lot of sense to look at

3216
02:58:52,399 --> 02:58:54,560
all those iron policies and basically

3217
02:58:54,560 --> 02:58:56,399
see if you find these kind of situations

3218
02:58:56,399 --> 02:58:58,479
where people like use white cards that

3219
02:58:58,479 --> 02:59:01,279
means can do anything to cut them down

3220
02:59:01,279 --> 02:59:03,040
so this is basically least privileged

3221
02:59:03,040 --> 02:59:06,319
principle that you have to review

3222
02:59:06,319 --> 02:59:08,240
there was the i am parameter the second

3223
02:59:08,240 --> 02:59:10,560
parameter that's basically the same that

3224
02:59:10,560 --> 02:59:12,160
we have in classical non-cloud

3225
02:59:12,160 --> 02:59:14,160
on-premise networks which is the network

3226
02:59:14,160 --> 02:59:16,399
parameter so what i have to look for is

3227
02:59:16,399 --> 02:59:17,439
there

3228
02:59:17,439 --> 02:59:18,560
two people actually have a network

3229
02:59:18,560 --> 02:59:20,720
architecture meaning a public dmd set

3230
02:59:20,720 --> 02:59:22,800
and private zones where most stuff

3231
02:59:22,800 --> 02:59:24,240
should be divided in the private zones

3232
02:59:24,240 --> 02:59:25,760
and only the bare minimum should be in

3233
02:59:25,760 --> 02:59:27,760
the public zoom if public is reachable

3234
02:59:27,760 --> 02:59:29,760
to everyone

3235
02:59:29,760 --> 02:59:32,880
and the second thing is firewall reviews

3236
02:59:32,880 --> 02:59:34,640
that happens really often people start

3237
02:59:34,640 --> 02:59:36,000
opening up

3238
02:59:36,000 --> 02:59:37,680
ports to the internet internet means

3239
02:59:37,680 --> 02:59:39,439
again do anyone

3240
02:59:39,439 --> 02:59:41,920
and you have to look in particular for

3241
02:59:41,920 --> 02:59:44,000
things like open sports

3242
02:59:44,000 --> 02:59:45,680
usually when you open up an snh port

3243
02:59:45,680 --> 02:59:47,520
with internet it takes only a few hours

3244
02:59:47,520 --> 02:59:49,600
and people will start brute forcing you

3245
02:59:49,600 --> 02:59:52,319
then if a password like centos sent to

3246
02:59:52,319 --> 02:59:53,840
us then

3247
02:59:53,840 --> 02:59:56,720
you will be breached

3248
02:59:56,720 --> 02:59:59,040
now what i've said is we're gonna

3249
02:59:59,040 --> 03:00:00,399
basically look at the output from the

3250
03:00:00,399 --> 03:00:02,960
dual and go away manually right so today

3251
03:00:02,960 --> 03:00:04,800
everything might look fine

3252
03:00:04,800 --> 03:00:06,800
maybe next week it's not fine anymore

3253
03:00:06,800 --> 03:00:08,000
because somebody has already started

3254
03:00:08,000 --> 03:00:10,080
opening up firewall rules or generated

3255
03:00:10,080 --> 03:00:11,760
access keys

3256
03:00:11,760 --> 03:00:14,080
so we cannot manually go over it every

3257
03:00:14,080 --> 03:00:15,840
single day or even once a week because

3258
03:00:15,840 --> 03:00:17,680
that's not going to scale again

3259
03:00:17,680 --> 03:00:20,000
so we need some way of automatically

3260
03:00:20,000 --> 03:00:21,760
monitoring our entire environment for

3261
03:00:21,760 --> 03:00:24,319
this kind of security violations and the

3262
03:00:24,319 --> 03:00:25,680
solution to that

3263
03:00:25,680 --> 03:00:27,279
is called cloud security posture

3264
03:00:27,279 --> 03:00:29,120
management which basically just a piece

3265
03:00:29,120 --> 03:00:31,120
of software that's going to look into

3266
03:00:31,120 --> 03:00:32,560
your cloud environments by calling the

3267
03:00:32,560 --> 03:00:33,600
apis

3268
03:00:33,600 --> 03:00:35,680
and checking if anything violates your

3269
03:00:35,680 --> 03:00:37,520
predefined security policies like what

3270
03:00:37,520 --> 03:00:39,920
i've said before right i you have access

3271
03:00:39,920 --> 03:00:41,520
keysteer somebody has opened up the

3272
03:00:41,520 --> 03:00:44,080
firewall rules somebody has a storage

3273
03:00:44,080 --> 03:00:45,680
system that is publicly reachable to

3274
03:00:45,680 --> 03:00:47,279
anyone

3275
03:00:47,279 --> 03:00:48,800
and there's different solutions for that

3276
03:00:48,800 --> 03:00:50,560
how you can implement it option one is

3277
03:00:50,560 --> 03:00:52,080
cloud provider service they have

3278
03:00:52,080 --> 03:00:54,000
everyone supports that basically

3279
03:00:54,000 --> 03:00:56,080
has a solution for that

3280
03:00:56,080 --> 03:00:57,680
there are also four body offerings for

3281
03:00:57,680 --> 03:00:58,640
that

3282
03:00:58,640 --> 03:01:00,640
for example software service platforms

3283
03:01:00,640 --> 03:01:03,200
basically you grant them read access to

3284
03:01:03,200 --> 03:01:04,399
your cloud environment and they can

3285
03:01:04,399 --> 03:01:06,240
monitor everything and then tell you or

3286
03:01:06,240 --> 03:01:08,800
raise alerts if something goes wrong

3287
03:01:08,800 --> 03:01:10,640
some also offer the tool itself so you

3288
03:01:10,640 --> 03:01:12,399
just get the software package and you

3289
03:01:12,399 --> 03:01:13,920
deploy and operate it inside your own

3290
03:01:13,920 --> 03:01:15,040
environment

3291
03:01:15,040 --> 03:01:16,399
just the advantage that you still have

3292
03:01:16,399 --> 03:01:17,920
full control and only have to grant

3293
03:01:17,920 --> 03:01:20,720
access to a third party to environment

3294
03:01:20,720 --> 03:01:23,279
or third option open source tools that

3295
03:01:23,279 --> 03:01:25,040
they can use to build basically your own

3296
03:01:25,040 --> 03:01:27,200
cloud security poster management

3297
03:01:27,200 --> 03:01:28,960
cloud custodian has been around for many

3298
03:01:28,960 --> 03:01:30,319
years i think it was one of the first

3299
03:01:30,319 --> 03:01:31,600
tools

3300
03:01:31,600 --> 03:01:33,040
and it's very popular i think with some

3301
03:01:33,040 --> 03:01:35,200
people steampipe that i mentioned in the

3302
03:01:35,200 --> 03:01:37,600
beginning for inventory you can also use

3303
03:01:37,600 --> 03:01:38,800
that for cloud security posture

3304
03:01:38,800 --> 03:01:40,000
management

3305
03:01:40,000 --> 03:01:41,760
although at some point depending how

3306
03:01:41,760 --> 03:01:43,439
large environment is you might run into

3307
03:01:43,439 --> 03:01:45,840
scalability problems

3308
03:01:45,840 --> 03:01:48,000
but it is this allows us to monitor

3309
03:01:48,000 --> 03:01:49,760
everything automatically and once a

3310
03:01:49,760 --> 03:01:52,319
violation is deducted you get an alert

3311
03:01:52,319 --> 03:01:54,240
and you can run this maybe depending on

3312
03:01:54,240 --> 03:01:56,800
the solution in almost real time or like

3313
03:01:56,800 --> 03:02:00,399
once a day or once a week

3314
03:02:01,600 --> 03:02:03,600
so next part sooner or later you're

3315
03:02:03,600 --> 03:02:05,840
going to have a security incident

3316
03:02:05,840 --> 03:02:07,439
but it's minor majors different story

3317
03:02:07,439 --> 03:02:08,160
but

3318
03:02:08,160 --> 03:02:09,439
when you have to happen you have to

3319
03:02:09,439 --> 03:02:11,040
start investigating

3320
03:02:11,040 --> 03:02:12,800
and investigating means you have to go

3321
03:02:12,800 --> 03:02:14,479
over your log files right

3322
03:02:14,479 --> 03:02:15,920
because without that you can't really do

3323
03:02:15,920 --> 03:02:17,920
a proper investigation

3324
03:02:17,920 --> 03:02:19,840
what i found is the easiest way to do

3325
03:02:19,840 --> 03:02:23,040
that to set up a central locator sync

3326
03:02:23,040 --> 03:02:25,359
and to just dump all your log data in

3327
03:02:25,359 --> 03:02:27,200
there just for storage at the beginning

3328
03:02:27,200 --> 03:02:29,200
and the most cost efficient solution for

3329
03:02:29,200 --> 03:02:31,520
that is use one of the storage services

3330
03:02:31,520 --> 03:02:34,080
like amazon s3 and so on because it's

3331
03:02:34,080 --> 03:02:35,920
easy to set them up you can drop as much

3332
03:02:35,920 --> 03:02:37,520
data in there as you want because this

3333
03:02:37,520 --> 03:02:39,680
will be kind of no limit and they're

3334
03:02:39,680 --> 03:02:41,680
very cost efficient as well

3335
03:02:41,680 --> 03:02:44,080
you can use the seam but that can become

3336
03:02:44,080 --> 03:02:45,600
very expensive

3337
03:02:45,600 --> 03:02:46,960
depending on what kind of solution you

3338
03:02:46,960 --> 03:02:48,319
are using because of the huge amount of

3339
03:02:48,319 --> 03:02:51,200
data that you're dropping in there

3340
03:02:51,200 --> 03:02:53,040
and the first kind of log data that we

3341
03:02:53,040 --> 03:02:54,399
feed in there is going to be the cloud

3342
03:02:54,399 --> 03:02:56,000
prior logs

3343
03:02:56,000 --> 03:02:57,680
if you have a breach on a cloud provider

3344
03:02:57,680 --> 03:03:00,399
level that's that means the attacker is

3345
03:03:00,399 --> 03:03:02,880
going to call the cloud provider apis

3346
03:03:02,880 --> 03:03:04,640
and those codes are going to show up in

3347
03:03:04,640 --> 03:03:06,720
the management api logs

3348
03:03:06,720 --> 03:03:07,920
that's why it's important that you

3349
03:03:07,920 --> 03:03:10,800
activate forwarding these api logs into

3350
03:03:10,800 --> 03:03:12,479
your central locator sync you make sure

3351
03:03:12,479 --> 03:03:13,920
nobody can mess around with that so you

3352
03:03:13,920 --> 03:03:16,560
need access control on that

3353
03:03:16,560 --> 03:03:18,479
now now we are just storing data right

3354
03:03:18,479 --> 03:03:19,760
at some point when you have a security

3355
03:03:19,760 --> 03:03:21,680
in this incident you might have to query

3356
03:03:21,680 --> 03:03:22,960
this data

3357
03:03:22,960 --> 03:03:24,479
and depending on how large your

3358
03:03:24,479 --> 03:03:26,240
environment is you are talking here

3359
03:03:26,240 --> 03:03:28,399
about covering gigabytes of data

3360
03:03:28,399 --> 03:03:30,720
10 gigabyte maybe even 100 gigabytes so

3361
03:03:30,720 --> 03:03:32,240
you're going to need some infrastructure

3362
03:03:32,240 --> 03:03:33,359
for that

3363
03:03:33,359 --> 03:03:34,800
but as i said in the beginning our

3364
03:03:34,800 --> 03:03:36,240
scenario is you're the first and only

3365
03:03:36,240 --> 03:03:37,600
security engineer you don't have the

3366
03:03:37,600 --> 03:03:38,960
time to maintain and operate

3367
03:03:38,960 --> 03:03:40,720
infrastructure for that

3368
03:03:40,720 --> 03:03:42,640
so my recommendation is here you go

3369
03:03:42,640 --> 03:03:45,439
serverless you have this services that

3370
03:03:45,439 --> 03:03:48,080
data lake varying services like aphenum

3371
03:03:48,080 --> 03:03:49,520
or bigquery

3372
03:03:49,520 --> 03:03:51,520
same should exist for azure

3373
03:03:51,520 --> 03:03:53,279
that allow you that they're very easy to

3374
03:03:53,279 --> 03:03:54,720
set up

3375
03:03:54,720 --> 03:03:56,720
they don't need any maintenance at all

3376
03:03:56,720 --> 03:03:58,399
and you can clear them all in a

3377
03:03:58,399 --> 03:04:00,080
relatively cost efficient way over your

3378
03:04:00,080 --> 03:04:01,840
entire data basically the more data you

3379
03:04:01,840 --> 03:04:03,920
clear the more you have to pay but if

3380
03:04:03,920 --> 03:04:06,080
you don't vary that often it makes sense

3381
03:04:06,080 --> 03:04:07,600
to do that

3382
03:04:07,600 --> 03:04:10,960
it's not a lot of effort to set up

3383
03:04:11,359 --> 03:04:14,240
right then incident response as i said

3384
03:04:14,240 --> 03:04:15,600
when incident happens you need to be

3385
03:04:15,600 --> 03:04:17,120
prepared and it's good that you have to

3386
03:04:17,120 --> 03:04:19,120
do that in advance right how does your

3387
03:04:19,120 --> 03:04:21,120
basic process look like

3388
03:04:21,120 --> 03:04:22,720
you go in the new store need to store

3389
03:04:22,720 --> 03:04:24,319
evidence somewhere you need this

3390
03:04:24,319 --> 03:04:26,399
dedicated location for that

3391
03:04:26,399 --> 03:04:28,000
makes sense to track your incidents in

3392
03:04:28,000 --> 03:04:30,240
the issue tracking system and you need

3393
03:04:30,240 --> 03:04:31,840
to find in advance who's your contact

3394
03:04:31,840 --> 03:04:33,920
person for what topic right operations

3395
03:04:33,920 --> 03:04:35,439
you have to talk to them

3396
03:04:35,439 --> 03:04:37,359
if customer data is affected you have to

3397
03:04:37,359 --> 03:04:39,120
reach out to your customers but you're

3398
03:04:39,120 --> 03:04:40,560
not going to do it yourself you need

3399
03:04:40,560 --> 03:04:42,640
someone from customer support for that

3400
03:04:42,640 --> 03:04:44,240
it's just important to define who's to

3401
03:04:44,240 --> 03:04:46,000
connect for what topic in the beginning

3402
03:04:46,000 --> 03:04:48,319
before something happens so by the time

3403
03:04:48,319 --> 03:04:52,000
you have the incident you're ready to go

3404
03:04:52,000 --> 03:04:54,000
and finally vulnerability management i

3405
03:04:54,000 --> 03:04:56,560
think that's a very old topic

3406
03:04:56,560 --> 03:04:58,240
it's not too different in cloud the only

3407
03:04:58,240 --> 03:04:59,840
difference is we have vulnerability

3408
03:04:59,840 --> 03:05:01,520
management on two levels

3409
03:05:01,520 --> 03:05:03,120
we have to scan for vulnerabilities

3410
03:05:03,120 --> 03:05:05,760
first on the container level which also

3411
03:05:05,760 --> 03:05:07,439
includes our application dependencies

3412
03:05:07,439 --> 03:05:09,760
and on the host level meaning the host

3413
03:05:09,760 --> 03:05:11,760
machines where our containers are being

3414
03:05:11,760 --> 03:05:13,439
executed

3415
03:05:13,439 --> 03:05:14,560
there are open source solutions

3416
03:05:14,560 --> 03:05:16,000
available for that anchor and clear

3417
03:05:16,000 --> 03:05:18,160
working very well

3418
03:05:18,160 --> 03:05:20,080
primarily for containers host machines

3419
03:05:20,080 --> 03:05:22,080
is a somewhat more complicated story i

3420
03:05:22,080 --> 03:05:23,600
don't know any

3421
03:05:23,600 --> 03:05:25,359
reliably

3422
03:05:25,359 --> 03:05:26,800
available solution for that on the open

3423
03:05:26,800 --> 03:05:28,479
source space for vulnerability scanning

3424
03:05:28,479 --> 03:05:30,640
on the host machines

3425
03:05:30,640 --> 03:05:33,040
and one more thing

3426
03:05:33,040 --> 03:05:35,279
cicd based scanning makes a lot of sense

3427
03:05:35,279 --> 03:05:37,120
yes but it's not sufficient right if i

3428
03:05:37,120 --> 03:05:39,279
build a container image today as kenny

3429
03:05:39,279 --> 03:05:40,880
today and he has no vulnerabilities this

3430
03:05:40,880 --> 03:05:42,800
assessment might not longer be true next

3431
03:05:42,800 --> 03:05:43,760
week

3432
03:05:43,760 --> 03:05:45,760
so any continuous vulnerability scanning

3433
03:05:45,760 --> 03:05:47,760
that sometimes some people forget about

3434
03:05:47,760 --> 03:05:49,040
that

3435
03:05:49,040 --> 03:05:49,920
and

3436
03:05:49,920 --> 03:05:51,920
identifying vulnerabilities is one thing

3437
03:05:51,920 --> 03:05:53,920
fixing them is another story we have to

3438
03:05:53,920 --> 03:05:56,000
write on slas for that with engineering

3439
03:05:56,000 --> 03:05:57,680
and agree on something like

3440
03:05:57,680 --> 03:05:59,520
one week to get a critical or high

3441
03:05:59,520 --> 03:06:00,960
vulnerability fixed or something like

3442
03:06:00,960 --> 03:06:02,800
that

3443
03:06:02,800 --> 03:06:04,960
well that's already phase one

3444
03:06:04,960 --> 03:06:07,359
this if you are busy standing but that

3445
03:06:07,359 --> 03:06:09,279
will take you at least weeks maybe a few

3446
03:06:09,279 --> 03:06:10,800
months depending on how much in company

3447
03:06:10,800 --> 03:06:12,720
support you will get for that

3448
03:06:12,720 --> 03:06:15,200
after they continue with phase two

3449
03:06:15,200 --> 03:06:16,640
and then the first thing is defining the

3450
03:06:16,640 --> 03:06:18,800
security baseline a secure engineer

3451
03:06:18,800 --> 03:06:21,120
usually know what you should do right

3452
03:06:21,120 --> 03:06:22,399
but that's usually not clear to

3453
03:06:22,399 --> 03:06:24,160
engineering so it's very important to

3454
03:06:24,160 --> 03:06:25,520
write it down

3455
03:06:25,520 --> 03:06:27,120
define what are your expectations

3456
03:06:27,120 --> 03:06:28,960
towards engineering for that

3457
03:06:28,960 --> 03:06:30,800
and you don't have to come up with this

3458
03:06:30,800 --> 03:06:32,880
yourself there's a lot of good stuff out

3459
03:06:32,880 --> 03:06:35,439
there in particular the cs benchmarks

3460
03:06:35,439 --> 03:06:36,319
you have

3461
03:06:36,319 --> 03:06:37,760
basically securely best practice not

3462
03:06:37,760 --> 03:06:39,279
only for cloud providers but also for

3463
03:06:39,279 --> 03:06:41,439
kubernetes for docker images and so on

3464
03:06:41,439 --> 03:06:43,520
it makes sense to just adopt those

3465
03:06:43,520 --> 03:06:44,960
standards

3466
03:06:44,960 --> 03:06:47,279
once i've written down my baseline i

3467
03:06:47,279 --> 03:06:48,720
need to set up the monitoring for that

3468
03:06:48,720 --> 03:06:49,840
right to see if people are actually

3469
03:06:49,840 --> 03:06:52,000
following my security baseline

3470
03:06:52,000 --> 03:06:53,279
and this is where i can use the cloud

3471
03:06:53,279 --> 03:06:54,960
security booster management because i

3472
03:06:54,960 --> 03:06:57,359
have to implement my baseline basic in

3473
03:06:57,359 --> 03:06:59,040
there to look for violations of my

3474
03:06:59,040 --> 03:07:00,960
baseline

3475
03:07:00,960 --> 03:07:03,600
then another easy win kubernetes or

3476
03:07:03,600 --> 03:07:05,600
container deployments

3477
03:07:05,600 --> 03:07:06,960
a lot of people when they run the

3478
03:07:06,960 --> 03:07:08,399
application inside containers those

3479
03:07:08,399 --> 03:07:11,359
applications are running as root

3480
03:07:11,359 --> 03:07:14,000
i've seen this so often i think it's a i

3481
03:07:14,000 --> 03:07:15,359
don't know what's going on there but

3482
03:07:15,359 --> 03:07:17,040
nobody's thinking about it

3483
03:07:17,040 --> 03:07:19,439
there's a very easy way to override that

3484
03:07:19,439 --> 03:07:20,880
in kubernetes you have a so-called

3485
03:07:20,880 --> 03:07:22,640
security context object and there you

3486
03:07:22,640 --> 03:07:24,479
have a parameter called runners use it

3487
03:07:24,479 --> 03:07:26,319
allows you to override that

3488
03:07:26,319 --> 03:07:28,560
you just specify your deployments

3489
03:07:28,560 --> 03:07:30,479
no run this as an unprivileged user and

3490
03:07:30,479 --> 03:07:32,560
then it's no longer running as root

3491
03:07:32,560 --> 03:07:34,880
it's super easy to implement

3492
03:07:34,880 --> 03:07:36,960
and there's a lot more security features

3493
03:07:36,960 --> 03:07:40,080
and kubernetes that you can use

3494
03:07:40,080 --> 03:07:41,359
finally or something that people

3495
03:07:41,359 --> 03:07:42,560
sometimes miss

3496
03:07:42,560 --> 03:07:44,479
if you have two applications running in

3497
03:07:44,479 --> 03:07:46,399
the same kubernetes cluster

3498
03:07:46,399 --> 03:07:48,319
there is no network isolation between

3499
03:07:48,319 --> 03:07:49,680
those applications

3500
03:07:49,680 --> 03:07:51,200
application a can always reach

3501
03:07:51,200 --> 03:07:53,439
application b in vias verizon that's

3502
03:07:53,439 --> 03:07:56,319
just the waste vanilla kubernetes works

3503
03:07:56,319 --> 03:07:58,000
the way to fix that is to use so-called

3504
03:07:58,000 --> 03:07:59,840
kubernetes network policies which are

3505
03:07:59,840 --> 03:08:01,840
usually never enabled by default you

3506
03:08:01,840 --> 03:08:03,279
have to explicitly enable them and start

3507
03:08:03,279 --> 03:08:05,520
deploying network policies which means

3508
03:08:05,520 --> 03:08:07,279
basically it's a firewall rule that

3509
03:08:07,279 --> 03:08:11,040
applies inside the kubernetes cluster

3510
03:08:11,439 --> 03:08:13,359
then again as i said about

3511
03:08:13,359 --> 03:08:15,520
using this run as user option how can

3512
03:08:15,520 --> 03:08:16,880
you be sure that people are actually

3513
03:08:16,880 --> 03:08:18,960
using that you have to again set up the

3514
03:08:18,960 --> 03:08:20,399
monitoring for that

3515
03:08:20,399 --> 03:08:21,760
that means you have to extend your cloud

3516
03:08:21,760 --> 03:08:23,520
security booster management also monitor

3517
03:08:23,520 --> 03:08:24,960
your kubernetes clusters to see what

3518
03:08:24,960 --> 03:08:26,319
people are deploying there actually and

3519
03:08:26,319 --> 03:08:28,560
how

3520
03:08:29,200 --> 03:08:32,000
a very different topic so security and

3521
03:08:32,000 --> 03:08:33,120
cloud usually means you have a

3522
03:08:33,120 --> 03:08:34,960
scalability problem that means you need

3523
03:08:34,960 --> 03:08:37,520
to automate as much as possible

3524
03:08:37,520 --> 03:08:38,880
for that you are usually going to need

3525
03:08:38,880 --> 03:08:40,560
some tool right so for example i want to

3526
03:08:40,560 --> 03:08:42,160
run a dynamic application security

3527
03:08:42,160 --> 03:08:43,680
testing once a week

3528
03:08:43,680 --> 03:08:46,080
i want to run some board scans maybe

3529
03:08:46,080 --> 03:08:48,080
every day same with credential scanning

3530
03:08:48,080 --> 03:08:49,120
maybe

3531
03:08:49,120 --> 03:08:50,640
so i need some platform that allows me

3532
03:08:50,640 --> 03:08:53,120
to define what tool am i using how i'm a

3533
03:08:53,120 --> 03:08:55,200
qualities tool how i'm going to process

3534
03:08:55,200 --> 03:08:56,560
the output and where do i push these

3535
03:08:56,560 --> 03:08:58,399
outputs then i need the time sketcher

3536
03:08:58,399 --> 03:08:59,520
for that

3537
03:08:59,520 --> 03:09:01,439
this is what workflow orchestration

3538
03:09:01,439 --> 03:09:04,080
engines are very useful for

3539
03:09:04,080 --> 03:09:06,160
again the cloud provider services

3540
03:09:06,160 --> 03:09:08,000
serverless allows you to do that there's

3541
03:09:08,000 --> 03:09:10,399
also two kubernetes frameworks for that

3542
03:09:10,399 --> 03:09:12,800
which is algo and daktone i personally

3543
03:09:12,800 --> 03:09:14,880
used a lot of our workflows but

3544
03:09:14,880 --> 03:09:16,479
functionally it's almost the same as

3545
03:09:16,479 --> 03:09:17,840
stackdown so it doesn't really make a

3546
03:09:17,840 --> 03:09:19,359
difference

3547
03:09:19,359 --> 03:09:21,040
or if you don't have that much secured

3548
03:09:21,040 --> 03:09:22,640
animation of course you can just spin up

3549
03:09:22,640 --> 03:09:24,319
a virtual machine with a crunch up on it

3550
03:09:24,319 --> 03:09:27,279
that schedules everything

3551
03:09:27,279 --> 03:09:30,000
a lot of this is reactive right it's how

3552
03:09:30,000 --> 03:09:32,000
do we get things in more proactive mode

3553
03:09:32,000 --> 03:09:33,520
this is not even cloud specific you have

3554
03:09:33,520 --> 03:09:34,960
to hook into the software development

3555
03:09:34,960 --> 03:09:36,800
life cycle that means i need to be

3556
03:09:36,800 --> 03:09:38,960
removed in the design phase otherwise i

3557
03:09:38,960 --> 03:09:40,800
will always be keep running after people

3558
03:09:40,800 --> 03:09:42,800
get things done

3559
03:09:42,800 --> 03:09:44,960
and yeah the bendest kind of obvious i

3560
03:09:44,960 --> 03:09:46,479
think

3561
03:09:46,479 --> 03:09:49,040
right and that's phase two and then in

3562
03:09:49,040 --> 03:09:51,359
theory i can continue with phrase three

3563
03:09:51,359 --> 03:09:52,880
and four depending on what i want to do

3564
03:09:52,880 --> 03:09:55,200
and so on and how to secure the bose js

3565
03:09:55,200 --> 03:09:56,000
now

3566
03:09:56,000 --> 03:09:57,600
now before wrapping up some final

3567
03:09:57,600 --> 03:09:58,800
thoughts

3568
03:09:58,800 --> 03:10:01,680
so our startup sme is doing business

3569
03:10:01,680 --> 03:10:03,040
dealing with business customers and

3570
03:10:03,040 --> 03:10:05,120
there are some customers that would say

3571
03:10:05,120 --> 03:10:07,600
i really like your service offering but

3572
03:10:07,600 --> 03:10:09,760
i will only do business with you if you

3573
03:10:09,760 --> 03:10:11,680
have a security certification like iso

3574
03:10:11,680 --> 03:10:14,960
107000 or soc2 or something like that

3575
03:10:14,960 --> 03:10:15,920
now

3576
03:10:15,920 --> 03:10:17,760
i'm not going to get in topic if those

3577
03:10:17,760 --> 03:10:19,760
certifications are going to improve your

3578
03:10:19,760 --> 03:10:21,760
security posture but i think that's the

3579
03:10:21,760 --> 03:10:23,279
wrong way of looking at you can use

3580
03:10:23,279 --> 03:10:25,760
those programs to actually push for your

3581
03:10:25,760 --> 03:10:28,080
security again to get things done

3582
03:10:28,080 --> 03:10:29,840
because if somebody asks you hey why do

3583
03:10:29,840 --> 03:10:31,920
we have to do this you see well we need

3584
03:10:31,920 --> 03:10:34,080
this for stock too and if you don't have

3585
03:10:34,080 --> 03:10:36,640
stock 2 we will not win that customer

3586
03:10:36,640 --> 03:10:38,000
so that will help you a lot because

3587
03:10:38,000 --> 03:10:39,600
nobody is going to argue about bringing

3588
03:10:39,600 --> 03:10:41,840
more revenue right

3589
03:10:41,840 --> 03:10:43,439
so you've changed security of not being

3590
03:10:43,439 --> 03:10:45,200
a business enabler which is making

3591
03:10:45,200 --> 03:10:46,560
discussions a little bit easier in my

3592
03:10:46,560 --> 03:10:48,399
experience

3593
03:10:48,399 --> 03:10:49,840
yeah and finally

3594
03:10:49,840 --> 03:10:51,760
that's my culture question

3595
03:10:51,760 --> 03:10:54,000
how are you approaching security right

3596
03:10:54,000 --> 03:10:55,840
my security is a very cross-functional

3597
03:10:55,840 --> 03:10:57,120
role we have to deal with a lot of

3598
03:10:57,120 --> 03:10:59,040
people right you talk to customers about

3599
03:10:59,040 --> 03:11:01,600
for incidents and as we're talking about

3600
03:11:01,600 --> 03:11:03,359
product security we are dealing a lot

3601
03:11:03,359 --> 03:11:04,800
with engineering

3602
03:11:04,800 --> 03:11:06,080
you have to build a relationship with

3603
03:11:06,080 --> 03:11:08,720
them and that means are you going to be

3604
03:11:08,720 --> 03:11:10,399
guy who's just going to make trouble for

3605
03:11:10,399 --> 03:11:11,840
them and go is going to blocking them

3606
03:11:11,840 --> 03:11:14,080
all the time or are you more seen as a

3607
03:11:14,080 --> 03:11:16,000
valuable support function because this

3608
03:11:16,000 --> 03:11:17,760
can really influence a lot and how

3609
03:11:17,760 --> 03:11:19,200
whether they are willing to work for fee

3610
03:11:19,200 --> 03:11:21,520
or not

3611
03:11:21,600 --> 03:11:22,479
right

3612
03:11:22,479 --> 03:11:24,800
and before i wrap up i'm not the first

3613
03:11:24,800 --> 03:11:26,160
person to think about how to do this in

3614
03:11:26,160 --> 03:11:27,600
structured way there's a lot of very

3615
03:11:27,600 --> 03:11:29,359
interesting material out there in terms

3616
03:11:29,359 --> 03:11:31,680
of talks and also documents i highly

3617
03:11:31,680 --> 03:11:33,359
recommend going for this if you are

3618
03:11:33,359 --> 03:11:34,840
interested in this

3619
03:11:34,840 --> 03:11:39,279
topic well and that's it

3620
03:11:46,239 --> 03:11:47,760
thank you very much christian for the

3621
03:11:47,760 --> 03:11:49,439
interesting talk i think the one key

3622
03:11:49,439 --> 03:11:51,279
takeaway is that as a security person

3623
03:11:51,279 --> 03:11:53,120
you should not try to be the blocker but

3624
03:11:53,120 --> 03:11:55,120
more like a valuable resource that's a

3625
03:11:55,120 --> 03:11:57,359
very good recommendation i think um are

3626
03:11:57,359 --> 03:11:58,880
there any questions from the audience

3627
03:11:58,880 --> 03:12:01,040
please step forward and

3628
03:12:01,040 --> 03:12:04,040
um

3629
03:12:09,520 --> 03:12:12,399
hi thank you great talk

3630
03:12:12,399 --> 03:12:13,760
i was wondering

3631
03:12:13,760 --> 03:12:16,000
what is a good way to get more support

3632
03:12:16,000 --> 03:12:18,720
by the engineering team and everybody in

3633
03:12:18,720 --> 03:12:20,160
the company for

3634
03:12:20,160 --> 03:12:23,680
getting a better security system

3635
03:12:24,000 --> 03:12:26,560
that's a tough question

3636
03:12:26,560 --> 03:12:28,399
well

3637
03:12:28,399 --> 03:12:29,520
i think

3638
03:12:29,520 --> 03:12:30,880
there was one of the slides that have a

3639
03:12:30,880 --> 03:12:32,399
roof for time reasons i think you need

3640
03:12:32,399 --> 03:12:33,840
management support

3641
03:12:33,840 --> 03:12:35,040
if management doesn't care about

3642
03:12:35,040 --> 03:12:36,880
security

3643
03:12:36,880 --> 03:12:38,720
then things are going to be difficult

3644
03:12:38,720 --> 03:12:40,239
and the other thing

3645
03:12:40,239 --> 03:12:42,000
i think

3646
03:12:42,000 --> 03:12:43,359
if you work with different teams there

3647
03:12:43,359 --> 03:12:44,800
are also people who are for security and

3648
03:12:44,800 --> 03:12:46,080
some people who don't care it's

3649
03:12:46,080 --> 03:12:48,160
important to identify basically those

3650
03:12:48,160 --> 03:12:50,720
people who are interested in security

3651
03:12:50,720 --> 03:12:51,840
because those are going to be their

3652
03:12:51,840 --> 03:12:53,040
allies

3653
03:12:53,040 --> 03:12:54,399
and i think these are basic kind of

3654
03:12:54,399 --> 03:12:55,920
security champions that they can try to

3655
03:12:55,920 --> 03:12:58,239
push

3656
03:12:58,479 --> 03:13:01,720
thank you

3657
03:13:02,800 --> 03:13:05,359
hey uh question about the last thing you

3658
03:13:05,359 --> 03:13:09,439
you touched on on on security culture um

3659
03:13:09,439 --> 03:13:11,279
yeah are they building relationships

3660
03:13:11,279 --> 03:13:13,120
with other departments and not being a

3661
03:13:13,120 --> 03:13:15,279
blocker

3662
03:13:15,279 --> 03:13:16,640
sounds great

3663
03:13:16,640 --> 03:13:19,920
until someone you hear that someone is

3664
03:13:19,920 --> 03:13:22,640
trying to put an rdp password logon

3665
03:13:22,640 --> 03:13:25,840
machine on a public ipv4 address so

3666
03:13:25,840 --> 03:13:26,960
where's the

3667
03:13:26,960 --> 03:13:29,040
there's you have the the one side where

3668
03:13:29,040 --> 03:13:31,680
you everybody here at least thinks they

3669
03:13:31,680 --> 03:13:33,840
have to put the foot down but then you

3670
03:13:33,840 --> 03:13:37,040
you kind of go against that

3671
03:13:37,040 --> 03:13:40,160
how do you keep balance

3672
03:13:40,479 --> 03:13:42,640
yeah so there's an interesting talk from

3673
03:13:42,640 --> 03:13:45,120
netflix and their security culture says

3674
03:13:45,120 --> 03:13:47,040
trust but verify

3675
03:13:47,040 --> 03:13:48,560
their idea is the fd monitoring

3676
03:13:48,560 --> 03:13:50,560
employees if you if one team screws up

3677
03:13:50,560 --> 03:13:52,080
the money will show it up immediately

3678
03:13:52,080 --> 03:13:53,120
and then they go those people they'll

3679
03:13:53,120 --> 03:13:55,120
hey people you have to fix this

3680
03:13:55,120 --> 03:13:57,120
and you have dashboards that show how

3681
03:13:57,120 --> 03:13:58,880
well teams are doing

3682
03:13:58,880 --> 03:14:00,080
they're kind of playing the teams

3683
03:14:00,080 --> 03:14:01,439
against each other

3684
03:14:01,439 --> 03:14:03,040
saying oh this team is really doing well

3685
03:14:03,040 --> 03:14:04,880
you were more like down there maybe you

3686
03:14:04,880 --> 03:14:06,479
should really do something this kind of

3687
03:14:06,479 --> 03:14:09,520
an intrinsic motivation for other teams

3688
03:14:09,520 --> 03:14:10,960
that works for netflix i don't know if

3689
03:14:10,960 --> 03:14:13,680
that works in other places too

3690
03:14:13,680 --> 03:14:16,319
all right thanks

3691
03:14:18,640 --> 03:14:21,279
so actually regarding working with

3692
03:14:21,279 --> 03:14:23,439
departments with our department from my

3693
03:14:23,439 --> 03:14:24,960
experience

3694
03:14:24,960 --> 03:14:27,520
it helps so this also knows with others

3695
03:14:27,520 --> 03:14:28,800
when you

3696
03:14:28,800 --> 03:14:30,880
accept that they have problems or issues

3697
03:14:30,880 --> 03:14:32,640
when they when you take them serious

3698
03:14:32,640 --> 03:14:34,960
from my perspective they take also

3699
03:14:34,960 --> 03:14:37,920
serious if you see that you're competent

3700
03:14:37,920 --> 03:14:40,160
most of the time what what uh

3701
03:14:40,160 --> 03:14:42,160
developers and engineers think okay

3702
03:14:42,160 --> 03:14:44,080
someone comes around and he wants

3703
03:14:44,080 --> 03:14:45,840
something but we have other problems so

3704
03:14:45,840 --> 03:14:47,760
that's just a remark i have two

3705
03:14:47,760 --> 03:14:48,960
questions

3706
03:14:48,960 --> 03:14:50,800
um first you

3707
03:14:50,800 --> 03:14:53,200
talked about setting up a perimeter

3708
03:14:53,200 --> 03:14:56,000
there's nowadays this thing called zero

3709
03:14:56,000 --> 03:14:57,840
trust model and there are a lot of guys

3710
03:14:57,840 --> 03:14:59,920
are saying oh we everything has to be

3711
03:14:59,920 --> 03:15:02,160
secure with zero trust

3712
03:15:02,160 --> 03:15:04,080
what do you think about that one would

3713
03:15:04,080 --> 03:15:06,800
be the first question

3714
03:15:06,800 --> 03:15:09,039
yeah

3715
03:15:09,279 --> 03:15:11,439
so i mean it's possible right zero trust

3716
03:15:11,439 --> 03:15:14,399
i mean i'd say

3717
03:15:16,880 --> 03:15:18,479
the thing is

3718
03:15:18,479 --> 03:15:22,160
with uh with the parameter you kinda

3719
03:15:22,160 --> 03:15:23,040
so

3720
03:15:23,040 --> 03:15:25,680
if you had said in this later phase you

3721
03:15:25,680 --> 03:15:28,239
remove the parameter and do everything

3722
03:15:28,239 --> 03:15:30,960
for example in vpn or separate content

3723
03:15:30,960 --> 03:15:33,120
control and data plane then i would say

3724
03:15:33,120 --> 03:15:35,279
okay for the first step parameters are

3725
03:15:35,279 --> 03:15:37,520
good but when my experience

3726
03:15:37,520 --> 03:15:38,560
especially

3727
03:15:38,560 --> 03:15:40,960
still in cloud people are doing oh i'm

3728
03:15:40,960 --> 03:15:41,920
inter

3729
03:15:41,920 --> 03:15:44,239
in the trusted parameters so that's no

3730
03:15:44,239 --> 03:15:47,119
problem anymore

3731
03:15:47,200 --> 03:15:49,520
right well i mean i think it's not going

3732
03:15:49,520 --> 03:15:50,560
to

3733
03:15:50,560 --> 03:15:51,920
i'm not going to say this will still

3734
03:15:51,920 --> 03:15:53,279
just remove the network pyramid you

3735
03:15:53,279 --> 03:15:55,040
still have it right said in kubernetes

3736
03:15:55,040 --> 03:15:56,319
inside

3737
03:15:56,319 --> 03:15:57,920
this idea you are inside a trusted

3738
03:15:57,920 --> 03:15:59,600
island then everything is good i think

3739
03:15:59,600 --> 03:16:00,800
zero just for me is the opposite it

3740
03:16:00,800 --> 03:16:02,960
means you means micro segmentation and

3741
03:16:02,960 --> 03:16:04,640
micro segmentation for me includes

3742
03:16:04,640 --> 03:16:06,560
network parameter maybe on a smaller

3743
03:16:06,560 --> 03:16:08,239
level but still

3744
03:16:08,239 --> 03:16:10,239
it's there and i think the im is

3745
03:16:10,239 --> 03:16:11,680
actually in the cloud is very easy to do

3746
03:16:11,680 --> 03:16:14,000
serial rust for human users you can say

3747
03:16:14,000 --> 03:16:15,920
you allowed you can set up imports that

3748
03:16:15,920 --> 03:16:18,239
say you log the login but only monday to

3749
03:16:18,239 --> 03:16:19,760
friday and only from a particular ip

3750
03:16:19,760 --> 03:16:21,920
address range for example

3751
03:16:21,920 --> 03:16:23,439
i think your cloud is maybe the easiest

3752
03:16:23,439 --> 03:16:25,680
place to implement zero trust

3753
03:16:25,680 --> 03:16:26,720
yeah

3754
03:16:26,720 --> 03:16:28,080
the second question

3755
03:16:28,080 --> 03:16:29,680
i was a little bit surprised that you

3756
03:16:29,680 --> 03:16:32,239
did not talk when talking about to the

3757
03:16:32,239 --> 03:16:34,560
developers about the supply chain stuff

3758
03:16:34,560 --> 03:16:37,680
because especially i'm i'm more of an

3759
03:16:37,680 --> 03:16:39,840
infrastructure guy myself but the thing

3760
03:16:39,840 --> 03:16:41,120
is

3761
03:16:41,120 --> 03:16:43,200
uh with total with the packages

3762
03:16:43,200 --> 03:16:45,359
situation today in our days i would say

3763
03:16:45,359 --> 03:16:47,760
okay we have really look where

3764
03:16:47,760 --> 03:16:49,680
software where the developers are

3765
03:16:49,680 --> 03:16:51,359
they're getting their software from and

3766
03:16:51,359 --> 03:16:52,800
their libraries

3767
03:16:52,800 --> 03:16:55,040
so um

3768
03:16:55,040 --> 03:16:57,439
in which phase would you say is that

3769
03:16:57,439 --> 03:16:59,120
later on

3770
03:16:59,120 --> 03:17:00,319
it depends

3771
03:17:00,319 --> 03:17:01,760
okay so

3772
03:17:01,760 --> 03:17:02,880
well

3773
03:17:02,880 --> 03:17:04,720
i mean if you had problems or in this

3774
03:17:04,720 --> 03:17:06,399
direction you should pull this into

3775
03:17:06,399 --> 03:17:08,720
phase three at least obviously right i

3776
03:17:08,720 --> 03:17:10,239
mean i mean availability management is

3777
03:17:10,239 --> 03:17:12,319
companies a little bit but not

3778
03:17:12,319 --> 03:17:14,160
completely obviously

3779
03:17:14,160 --> 03:17:15,120
but

3780
03:17:15,120 --> 03:17:16,080
i'd say

3781
03:17:16,080 --> 03:17:18,880
i probably put it into phase four

3782
03:17:18,880 --> 03:17:20,319
okay

3783
03:17:20,319 --> 03:17:22,800
cool thanks

3784
03:17:24,160 --> 03:17:25,680
over time a bit already is it a quick

3785
03:17:25,680 --> 03:17:28,080
one or yeah maybe i can go cool thanks

3786
03:17:28,080 --> 03:17:29,279
thanks again for the presentation so i'm

3787
03:17:29,279 --> 03:17:30,640
wondering so here you are starting with

3788
03:17:30,640 --> 03:17:31,760
the assumption that you have a full

3789
03:17:31,760 --> 03:17:33,600
access into the network and to own to

3790
03:17:33,600 --> 03:17:35,200
the system visibility

3791
03:17:35,200 --> 03:17:36,800
how much would it be different if you

3792
03:17:36,800 --> 03:17:38,880
have a partial or a non-view you know if

3793
03:17:38,880 --> 03:17:40,560
some part is outsourced

3794
03:17:40,560 --> 03:17:42,640
or you're you're a part of the team that

3795
03:17:42,640 --> 03:17:43,920
is actually doesn't have access to the

3796
03:17:43,920 --> 03:17:45,520
entire system

3797
03:17:45,520 --> 03:17:46,960
well if you have no view you have a

3798
03:17:46,960 --> 03:17:48,640
problem right

3799
03:17:48,640 --> 03:17:50,479
i mean you can still do the parameter

3800
03:17:50,479 --> 03:17:53,040
right scan that but that's it if you

3801
03:17:53,040 --> 03:17:54,479
have a partial view

3802
03:17:54,479 --> 03:17:56,000
it depends i think a lot what do you

3803
03:17:56,000 --> 03:17:58,160
have access to like do you have slippery

3804
03:17:58,160 --> 03:18:00,000
access to copyright api or do you and

3805
03:18:00,000 --> 03:18:01,680
that's it or do you also have to look

3806
03:18:01,680 --> 03:18:03,760
have access into host machines and

3807
03:18:03,760 --> 03:18:05,279
things like that

3808
03:18:05,279 --> 03:18:07,680
i think you should always go for

3809
03:18:07,680 --> 03:18:09,359
acts as a security team because actually

3810
03:18:09,359 --> 03:18:10,640
most club providers will give you a

3811
03:18:10,640 --> 03:18:12,720
dedicated security read-only role just

3812
03:18:12,720 --> 03:18:14,479
for that purpose it's called security

3813
03:18:14,479 --> 03:18:15,680
auditor rule

3814
03:18:15,680 --> 03:18:17,040
and you should always go for that i

3815
03:18:17,040 --> 03:18:18,479
think if you don't have that then you

3816
03:18:18,479 --> 03:18:22,720
can't do work i mean it's impossible

3817
03:18:22,720 --> 03:18:24,800
cool great stuff um thank you very much

3818
03:18:24,800 --> 03:18:26,239
christian thanks to the audience for the

3819
03:18:26,239 --> 03:18:26,970
good questions

3820
03:18:26,970 --> 03:18:31,600
[Applause]

3821
03:18:31,600 --> 03:18:33,439
so now we have lunch

3822
03:18:33,439 --> 03:18:36,560
enjoy lunch and there's also soft drinks

3823
03:18:36,560 --> 03:18:38,479
in the fridge now if they're empty

3824
03:18:38,479 --> 03:18:40,720
please approach the people from hilton

3825
03:18:40,720 --> 03:18:42,239
from staff and

3826
03:18:42,239 --> 03:18:45,239
enjoy

3827
04:13:23,120 --> 04:13:24,840
okay everybody

3828
04:13:24,840 --> 04:13:26,880
[Music]

3829
04:13:26,880 --> 04:13:28,479
welcome back from the break

3830
04:13:28,479 --> 04:13:30,159
please take your seats we're gonna start

3831
04:13:30,159 --> 04:13:31,120
in

3832
04:13:31,120 --> 04:13:34,000
a couple of seconds

3833
04:13:36,080 --> 04:13:38,399
so talk after the break

3834
04:13:38,399 --> 04:13:40,800
let me welcome dimitris brazakis for his

3835
04:13:40,800 --> 04:13:44,239
talk attacking malware with ai

3836
04:13:44,239 --> 04:13:45,279
have fun

3837
04:13:45,279 --> 04:13:47,920
thank you thank you i have mike thank

3838
04:13:47,920 --> 04:13:49,520
you

3839
04:13:49,520 --> 04:13:52,000
hello everybody and welcome i hope that

3840
04:13:52,000 --> 04:13:53,760
you have enjoyed your lunch break and

3841
04:13:53,760 --> 04:13:55,920
that you're having an interesting and

3842
04:13:55,920 --> 04:13:58,000
educational day so far

3843
04:13:58,000 --> 04:13:59,920
i'm really glad and delighted to be here

3844
04:13:59,920 --> 04:14:02,080
with you today at besides munich where

3845
04:14:02,080 --> 04:14:03,359
we're going to have the chance to

3846
04:14:03,359 --> 04:14:05,520
explore one of the places where the

3847
04:14:05,520 --> 04:14:07,920
finest concepts of data science and

3848
04:14:07,920 --> 04:14:10,720
cyber security meet

3849
04:14:10,720 --> 04:14:12,319
before doing so i would like to really

3850
04:14:12,319 --> 04:14:14,560
quickly introduce myself to you my name

3851
04:14:14,560 --> 04:14:16,720
is dimitris prasakis and i'm currently

3852
04:14:16,720 --> 04:14:19,439
pursuing my masters in cyber security at

3853
04:14:19,439 --> 04:14:21,439
georgia institute of technology georgia

3854
04:14:21,439 --> 04:14:22,960
tech in the us

3855
04:14:22,960 --> 04:14:24,800
i'm also working as a security engineer

3856
04:14:24,800 --> 04:14:27,120
at trade republic in berlin where i

3857
04:14:27,120 --> 04:14:29,040
specialize in cloud security and

3858
04:14:29,040 --> 04:14:31,840
infrastructure security minders also lie

3859
04:14:31,840 --> 04:14:33,920
in ai and privacy and especially where

3860
04:14:33,920 --> 04:14:35,520
all these worlds intersect with each

3861
04:14:35,520 --> 04:14:37,199
other

3862
04:14:37,199 --> 04:14:39,040
and one of those intersections is what

3863
04:14:39,040 --> 04:14:40,000
we're gonna

3864
04:14:40,000 --> 04:14:42,479
see here today together

3865
04:14:42,479 --> 04:14:44,399
our agenda is made out of four parts the

3866
04:14:44,399 --> 04:14:47,199
first two of them are introductory we're

3867
04:14:47,199 --> 04:14:50,080
going to talk about malware analysis and

3868
04:14:50,080 --> 04:14:52,800
about sandboxes and we are also going to

3869
04:14:52,800 --> 04:14:54,479
talk about machine learning and

3870
04:14:54,479 --> 04:14:56,319
introduce the concept the tasks

3871
04:14:56,319 --> 04:14:58,880
classification and clustering the third

3872
04:14:58,880 --> 04:15:00,319
part of the talk is the heart of the

3873
04:15:00,319 --> 04:15:02,560
talk my your framework it's a malware

3874
04:15:02,560 --> 04:15:04,399
analysis framework

3875
04:15:04,399 --> 04:15:06,319
with ai and we're going to explain how

3876
04:15:06,319 --> 04:15:08,159
it works step by step and we're also

3877
04:15:08,159 --> 04:15:10,239
going to have a decision for

3878
04:15:10,239 --> 04:15:12,800
questions and discussion

3879
04:15:12,800 --> 04:15:15,359
so without further ado let's start

3880
04:15:15,359 --> 04:15:18,399
and let's talk about malware analysis

3881
04:15:18,399 --> 04:15:20,560
in cyber security there is a job title

3882
04:15:20,560 --> 04:15:22,720
malware analysts and these people their

3883
04:15:22,720 --> 04:15:25,760
day-to-day job is to analyze malware

3884
04:15:25,760 --> 04:15:27,920
and they do this with the help of

3885
04:15:27,920 --> 04:15:31,279
certain tools called sandboxes a sandbox

3886
04:15:31,279 --> 04:15:33,760
in short is an isolated environment in

3887
04:15:33,760 --> 04:15:35,680
the context that everything that happens

3888
04:15:35,680 --> 04:15:38,560
in the sandbox can't escape it if we

3889
04:15:38,560 --> 04:15:40,640
execute a program in that sandbox it

3890
04:15:40,640 --> 04:15:42,640
can't infect the host

3891
04:15:42,640 --> 04:15:44,880
right so that's the first thing it does

3892
04:15:44,880 --> 04:15:46,880
and the second thing it does it is that

3893
04:15:46,880 --> 04:15:49,120
it has the ability to study and monitor

3894
04:15:49,120 --> 04:15:51,120
the behavior of what is being executed

3895
04:15:51,120 --> 04:15:53,920
inside of it so in short it takes a

3896
04:15:53,920 --> 04:15:56,319
binary malware binary as an input it

3897
04:15:56,319 --> 04:15:59,120
executes it studies it and then produces

3898
04:15:59,120 --> 04:16:00,479
a text report

3899
04:16:00,479 --> 04:16:03,359
and this report will contain things like

3900
04:16:03,359 --> 04:16:06,239
network requests made or metadata about

3901
04:16:06,239 --> 04:16:07,359
the malware

3902
04:16:07,359 --> 04:16:10,000
but today we care in particular about

3903
04:16:10,000 --> 04:16:12,560
commands this malware tried to execute

3904
04:16:12,560 --> 04:16:14,720
and we're gonna talk about windows

3905
04:16:14,720 --> 04:16:17,279
malware specifically and windows api

3906
04:16:17,279 --> 04:16:18,640
calls

3907
04:16:18,640 --> 04:16:20,319
apart from sandboxes the second

3908
04:16:20,319 --> 04:16:22,479
introductory point

3909
04:16:22,479 --> 04:16:24,239
is the task of classification

3910
04:16:24,239 --> 04:16:27,120
classification is a machine learning

3911
04:16:27,120 --> 04:16:29,040
concepts

3912
04:16:29,040 --> 04:16:30,399
is the task of

3913
04:16:30,399 --> 04:16:32,080
taking an observation

3914
04:16:32,080 --> 04:16:33,600
something about we don't know the

3915
04:16:33,600 --> 04:16:35,680
category it belongs to right

3916
04:16:35,680 --> 04:16:38,319
and putting it into some

3917
04:16:38,319 --> 04:16:41,040
pre-known category into some class to be

3918
04:16:41,040 --> 04:16:42,399
more formal

3919
04:16:42,399 --> 04:16:43,680
so let's say that we download an

3920
04:16:43,680 --> 04:16:45,840
executable from the internet right

3921
04:16:45,840 --> 04:16:48,159
the task of classifying this executable

3922
04:16:48,159 --> 04:16:51,040
to benign or malicious to

3923
04:16:51,040 --> 04:16:53,920
good or bad is called classification

3924
04:16:53,920 --> 04:16:55,520
and in machine learning we classify

3925
04:16:55,520 --> 04:16:58,000
objects with the help of

3926
04:16:58,000 --> 04:16:59,359
classification machine learning

3927
04:16:59,359 --> 04:17:01,199
algorithms and one of the most known

3928
04:17:01,199 --> 04:17:04,080
ones is k n and k nearest neighbors and

3929
04:17:04,080 --> 04:17:06,640
it operates based on the folks saying

3930
04:17:06,640 --> 04:17:08,319
show me your friends and i'm gonna tell

3931
04:17:08,319 --> 04:17:09,600
you who you are

3932
04:17:09,600 --> 04:17:11,760
or in other words show me your nearest

3933
04:17:11,760 --> 04:17:14,080
neighbors in the vector space

3934
04:17:14,080 --> 04:17:15,920
and based on their class

3935
04:17:15,920 --> 04:17:18,159
i'm going to predict your category and

3936
04:17:18,159 --> 04:17:20,239
we see here the example where

3937
04:17:20,239 --> 04:17:22,960
this observation of the

3938
04:17:22,960 --> 04:17:24,880
gets classified as a benign program

3939
04:17:24,880 --> 04:17:27,600
because the nearest neighbors are benign

3940
04:17:27,600 --> 04:17:29,520
apart from classification we have other

3941
04:17:29,520 --> 04:17:31,040
tasks in machine learning and one of

3942
04:17:31,040 --> 04:17:32,560
them is clustering

3943
04:17:32,560 --> 04:17:34,479
and unlike classification which is a

3944
04:17:34,479 --> 04:17:36,080
supervised kind of learning because we

3945
04:17:36,080 --> 04:17:39,120
feed our algorithms with labeled data so

3946
04:17:39,120 --> 04:17:41,680
we fit the algorithm with data that have

3947
04:17:41,680 --> 04:17:43,199
labels

3948
04:17:43,199 --> 04:17:45,520
clustering is a task of

3949
04:17:45,520 --> 04:17:48,000
is a kind of unsupervised learning we

3950
04:17:48,000 --> 04:17:50,560
feed our algorithm with unlabeled data

3951
04:17:50,560 --> 04:17:52,399
and the clustering algorithm tries to

3952
04:17:52,399 --> 04:17:53,359
create

3953
04:17:53,359 --> 04:17:56,479
groups of those unlabeled data clusters

3954
04:17:56,479 --> 04:17:58,479
which we are going to equate today with

3955
04:17:58,479 --> 04:18:01,359
the concept of classes

3956
04:18:01,359 --> 04:18:03,120
let's see how all these three concepts

3957
04:18:03,120 --> 04:18:04,880
sunboxes classification and clustering

3958
04:18:04,880 --> 04:18:07,439
bond together under a framework for

3959
04:18:07,439 --> 04:18:09,920
malware analysis called my year

3960
04:18:09,920 --> 04:18:11,760
but before doing so i would like to talk

3961
04:18:11,760 --> 04:18:14,239
about a very interesting statistic

3962
04:18:14,239 --> 04:18:15,680
every day

3963
04:18:15,680 --> 04:18:17,600
almost half a million new malicious

3964
04:18:17,600 --> 04:18:19,680
software and potentially unwanted

3965
04:18:19,680 --> 04:18:23,359
applications are registered

3966
04:18:23,359 --> 04:18:24,960
i would like you to think about the

3967
04:18:24,960 --> 04:18:26,000
volume

3968
04:18:26,000 --> 04:18:28,159
how much volume of malware this is we

3969
04:18:28,159 --> 04:18:29,840
need to understand this malware we need

3970
04:18:29,840 --> 04:18:31,120
to study it

3971
04:18:31,120 --> 04:18:34,000
so that we can attack it right before it

3972
04:18:34,000 --> 04:18:36,640
attacks us

3973
04:18:36,640 --> 04:18:38,560
we can't do that manually we don't have

3974
04:18:38,560 --> 04:18:40,560
enough manpower we don't have enough

3975
04:18:40,560 --> 04:18:43,359
bandwidth right malware analysis is a

3976
04:18:43,359 --> 04:18:45,279
very energy consuming process and it

3977
04:18:45,279 --> 04:18:46,560
takes time

3978
04:18:46,560 --> 04:18:48,880
there is therefore an imperative need to

3979
04:18:48,880 --> 04:18:50,319
automate this process as much as

3980
04:18:50,319 --> 04:18:51,760
possible

3981
04:18:51,760 --> 04:18:52,880
excuse me

3982
04:18:52,880 --> 04:18:54,479
and this is where my ear framework comes

3983
04:18:54,479 --> 04:18:57,199
into play my year framework is an open

3984
04:18:57,199 --> 04:18:59,040
source framework for malware analysis

3985
04:18:59,040 --> 04:19:00,640
with machine learning

3986
04:19:00,640 --> 04:19:03,600
and it is used to do mainly two things

3987
04:19:03,600 --> 04:19:06,239
to discover new clusters of malware in

3988
04:19:06,239 --> 04:19:08,399
other words to take all these half a

3989
04:19:08,399 --> 04:19:09,520
million

3990
04:19:09,520 --> 04:19:11,600
malicious software every day and try to

3991
04:19:11,600 --> 04:19:13,920
group them into clusters

3992
04:19:13,920 --> 04:19:15,840
that contain malware with identical

3993
04:19:15,840 --> 04:19:17,040
behavior

3994
04:19:17,040 --> 04:19:19,199
and to also classify unknown malware

3995
04:19:19,199 --> 04:19:21,600
observations into clusters that it

3996
04:19:21,600 --> 04:19:22,880
created

3997
04:19:22,880 --> 04:19:24,720
and we are going to see how this happens

3998
04:19:24,720 --> 04:19:26,080
in a bit

3999
04:19:26,080 --> 04:19:27,840
my ear framework looks like this a

4000
04:19:27,840 --> 04:19:30,159
simplified version of it we talked about

4001
04:19:30,159 --> 04:19:31,920
the first concepts right

4002
04:19:31,920 --> 04:19:33,920
so we take all marginal binaries we pass

4003
04:19:33,920 --> 04:19:35,359
them through sandbox produce some text

4004
04:19:35,359 --> 04:19:37,680
report and we talked about clustering

4005
04:19:37,680 --> 04:19:39,279
classifications

4006
04:19:39,279 --> 04:19:41,680
we want to cluster and classify classify

4007
04:19:41,680 --> 04:19:42,840
those malware

4008
04:19:42,840 --> 04:19:45,359
reports but in essence clustering and

4009
04:19:45,359 --> 04:19:47,520
classification are statistical

4010
04:19:47,520 --> 04:19:49,840
algorithms right they don't understand

4011
04:19:49,840 --> 04:19:51,279
text files

4012
04:19:51,279 --> 04:19:53,600
so this is where the second step

4013
04:19:53,600 --> 04:19:56,159
embedding of behavior comes into play

4014
04:19:56,159 --> 04:19:58,319
we take those text files and we

4015
04:19:58,319 --> 04:20:00,560
transpose them into mathematical objects

4016
04:20:00,560 --> 04:20:02,479
into vectors

4017
04:20:02,479 --> 04:20:04,479
so that we can later classify them and

4018
04:20:04,479 --> 04:20:05,760
cluster them

4019
04:20:05,760 --> 04:20:07,600
there is also a step in the middle the

4020
04:20:07,600 --> 04:20:09,520
step of prototype extraction is a very

4021
04:20:09,520 --> 04:20:10,960
beautiful idea which we are going to

4022
04:20:10,960 --> 04:20:13,279
talk about in a bit

4023
04:20:13,279 --> 04:20:16,880
so without further ado here what you see

4024
04:20:16,880 --> 04:20:20,159
is an xml encoded malware report and i

4025
04:20:20,159 --> 04:20:21,680
modified a little bit for the sake of

4026
04:20:21,680 --> 04:20:24,080
the presentation and for understanding

4027
04:20:24,080 --> 04:20:26,319
better what's going on we see three

4028
04:20:26,319 --> 04:20:29,040
snippets of instructions the first one

4029
04:20:29,040 --> 04:20:30,319
is something you're going to see many

4030
04:20:30,319 --> 04:20:31,840
programs do

4031
04:20:31,840 --> 04:20:34,319
the program tries to load the windows

4032
04:20:34,319 --> 04:20:36,880
kernel into the process memory and also

4033
04:20:36,880 --> 04:20:39,040
it reads the time nothing malicious

4034
04:20:39,040 --> 04:20:41,600
about this snippet of commands right

4035
04:20:41,600 --> 04:20:44,560
but if we scroll a little bit more down

4036
04:20:44,560 --> 04:20:45,600
and we

4037
04:20:45,600 --> 04:20:47,680
study the next snippet the next sequence

4038
04:20:47,680 --> 04:20:49,920
of instructions we're gonna notice

4039
04:20:49,920 --> 04:20:52,640
something at least suspicious

4040
04:20:52,640 --> 04:20:55,920
the malware tries to copy itself

4041
04:20:55,920 --> 04:20:57,920
from the location it is

4042
04:20:57,920 --> 04:20:59,920
to a windows protected area called

4043
04:20:59,920 --> 04:21:02,800
system32 and while doing so it also

4044
04:21:02,800 --> 04:21:04,640
renames itself to a windows well known

4045
04:21:04,640 --> 04:21:06,840
process cscs

4046
04:21:06,840 --> 04:21:09,600
rss.exa and after doing this

4047
04:21:09,600 --> 04:21:11,760
it also modifies the windows registry

4048
04:21:11,760 --> 04:21:14,479
keys so that it runs every time window

4049
04:21:14,479 --> 04:21:16,880
windows start up

4050
04:21:16,880 --> 04:21:19,040
so that's

4051
04:21:19,040 --> 04:21:20,800
not something a benign program would do

4052
04:21:20,800 --> 04:21:22,880
right why would you copy yourself into a

4053
04:21:22,880 --> 04:21:24,880
protected area and then put yourself to

4054
04:21:24,880 --> 04:21:27,120
startup you may do the latter but

4055
04:21:27,120 --> 04:21:28,239
especially

4056
04:21:28,239 --> 04:21:30,319
those commands in combination show some

4057
04:21:30,319 --> 04:21:32,000
malicious behavior

4058
04:21:32,000 --> 04:21:33,600
and we see another example another

4059
04:21:33,600 --> 04:21:34,800
snippet

4060
04:21:34,800 --> 04:21:37,120
where the malware just tries to check if

4061
04:21:37,120 --> 04:21:39,279
it's being debugged and malicious

4062
04:21:39,279 --> 04:21:41,600
programs usually do that

4063
04:21:41,600 --> 04:21:42,960
excuse me

4064
04:21:42,960 --> 04:21:44,319
to

4065
04:21:44,319 --> 04:21:46,080
understand if they are being analyzed

4066
04:21:46,080 --> 04:21:48,159
and in this case

4067
04:21:48,159 --> 04:21:50,000
they try to shut down their malicious

4068
04:21:50,000 --> 04:21:52,239
behavior and conceal themselves they try

4069
04:21:52,239 --> 04:21:53,840
to hide themselves from the malware

4070
04:21:53,840 --> 04:21:55,279
analyst

4071
04:21:55,279 --> 04:21:56,800
there is an important observation to

4072
04:21:56,800 --> 04:22:00,159
make to be made here from this example

4073
04:22:00,159 --> 04:22:02,720
that behavior is often manifested as a

4074
04:22:02,720 --> 04:22:05,040
sequence of instructions

4075
04:22:05,040 --> 04:22:07,920
which we formally call as q grams

4076
04:22:07,920 --> 04:22:09,920
so a q gram is a synonym for a

4077
04:22:09,920 --> 04:22:12,560
behavioral pattern let's say

4078
04:22:12,560 --> 04:22:14,960
and we saw two examples of two grams

4079
04:22:14,960 --> 04:22:16,239
because they are made out of two

4080
04:22:16,239 --> 04:22:17,680
instructions

4081
04:22:17,680 --> 04:22:20,000
and this concept of qgrams is important

4082
04:22:20,000 --> 04:22:23,279
because it's what enables us to

4083
04:22:23,279 --> 04:22:25,680
embed the text files into the vector

4084
04:22:25,680 --> 04:22:27,840
space

4085
04:22:27,840 --> 04:22:29,760
we want to do that first of all so that

4086
04:22:29,760 --> 04:22:32,800
they can be read by the clustering

4087
04:22:32,800 --> 04:22:35,199
classification elements but also because

4088
04:22:35,199 --> 04:22:37,279
embedding the reports into vectors will

4089
04:22:37,279 --> 04:22:39,199
enable us to

4090
04:22:39,199 --> 04:22:42,319
express their behavior in a geometrical

4091
04:22:42,319 --> 04:22:43,199
way

4092
04:22:43,199 --> 04:22:44,720
right

4093
04:22:44,720 --> 04:22:47,279
similar reports similar malware are

4094
04:22:47,279 --> 04:22:49,439
going to be closer in the vector space

4095
04:22:49,439 --> 04:22:51,120
and vice versa

4096
04:22:51,120 --> 04:22:52,399
we embed the behavior using a

4097
04:22:52,399 --> 04:22:54,479
mathematical function called embedding

4098
04:22:54,479 --> 04:22:55,600
function

4099
04:22:55,600 --> 04:22:57,840
which looks like this

4100
04:22:57,840 --> 04:22:59,840
we are going to explain in an intuitive

4101
04:22:59,840 --> 04:23:02,960
level what this does simply

4102
04:23:02,960 --> 04:23:04,880
it gets an input which is the malware

4103
04:23:04,880 --> 04:23:07,359
report a sequence of instructions right

4104
04:23:07,359 --> 04:23:10,560
and produces an output an n-dimensional

4105
04:23:10,560 --> 04:23:13,359
binary valued vector where its dimension

4106
04:23:13,359 --> 04:23:16,319
represents a cugram it represents a

4107
04:23:16,319 --> 04:23:17,920
behavior

4108
04:23:17,920 --> 04:23:19,680
for example imagine that we have the

4109
04:23:19,680 --> 04:23:21,680
three-dimensional space right the

4110
04:23:21,680 --> 04:23:24,800
x-dimension z-dimension the x-dimension

4111
04:23:24,800 --> 04:23:26,720
and the y-dimension

4112
04:23:26,720 --> 04:23:28,640
we may embed

4113
04:23:28,640 --> 04:23:31,040
this behavior this kilogram

4114
04:23:31,040 --> 04:23:32,960
in the x diamond in the z dimension

4115
04:23:32,960 --> 04:23:34,080
excuse me

4116
04:23:34,080 --> 04:23:36,080
and say for example that the malware

4117
04:23:36,080 --> 04:23:37,920
tries to copy itself into the windows

4118
04:23:37,920 --> 04:23:40,720
protected area rename itself and put

4119
04:23:40,720 --> 04:23:43,600
itself on startup if the value here is

4120
04:23:43,600 --> 04:23:44,640
one

4121
04:23:44,640 --> 04:23:48,080
or otherwise if it's zero the malware

4122
04:23:48,080 --> 04:23:49,680
doesn't try to do it

4123
04:23:49,680 --> 04:23:52,239
and we may embed this behavior the

4124
04:23:52,239 --> 04:23:54,640
malware taking for debugger on let's say

4125
04:23:54,640 --> 04:23:56,399
the x axis right

4126
04:23:56,399 --> 04:23:58,800
if it's one the malware tries to do that

4127
04:23:58,800 --> 04:24:00,560
if it's zero the malware doesn't try to

4128
04:24:00,560 --> 04:24:01,840
do it

4129
04:24:01,840 --> 04:24:04,159
imagine this for n dimensions in the

4130
04:24:04,159 --> 04:24:06,000
n-dimensional space

4131
04:24:06,000 --> 04:24:07,199
right

4132
04:24:07,199 --> 04:24:08,479
something really

4133
04:24:08,479 --> 04:24:09,920
interesting happens when we embed

4134
04:24:09,920 --> 04:24:12,800
malware in the vector space like that

4135
04:24:12,800 --> 04:24:14,880
because each dimension represents a

4136
04:24:14,880 --> 04:24:17,120
behavior right

4137
04:24:17,120 --> 04:24:18,640
similar reports

4138
04:24:18,640 --> 04:24:20,239
will be closed with each other as we

4139
04:24:20,239 --> 04:24:22,880
said and they will form dense clouds

4140
04:24:22,880 --> 04:24:24,560
into the vector space if we look at the

4141
04:24:24,560 --> 04:24:27,120
sp this space from far away we're going

4142
04:24:27,120 --> 04:24:29,840
to see clouds clusters of malware and

4143
04:24:29,840 --> 04:24:32,880
each cluster has malware that

4144
04:24:32,880 --> 04:24:35,840
behave in similar ways and this exact

4145
04:24:35,840 --> 04:24:38,960
distribution is what we are gonna attack

4146
04:24:38,960 --> 04:24:41,520
in order to exploit the malware before

4147
04:24:41,520 --> 04:24:44,479
it does that to us

4148
04:24:44,479 --> 04:24:46,479
before talking about that however let's

4149
04:24:46,479 --> 04:24:48,800
dive into a very interesting topic of

4150
04:24:48,800 --> 04:24:50,239
computer science computational

4151
04:24:50,239 --> 04:24:51,600
complexity

4152
04:24:51,600 --> 04:24:53,359
algorithms take time

4153
04:24:53,359 --> 04:24:55,760
to be executed correct

4154
04:24:55,760 --> 04:24:57,120
and especially machine learning

4155
04:24:57,120 --> 04:25:00,399
algorithms scale in a super linear way

4156
04:25:00,399 --> 04:25:02,960
let's say in polynomial time

4157
04:25:02,960 --> 04:25:05,600
depending on how much data we give them

4158
04:25:05,600 --> 04:25:07,600
that means that they are quite slow and

4159
04:25:07,600 --> 04:25:09,760
we want to execute this framework

4160
04:25:09,760 --> 04:25:11,840
every day so there is an imperative need

4161
04:25:11,840 --> 04:25:13,120
to

4162
04:25:13,120 --> 04:25:14,960
reduce the time of the framework as much

4163
04:25:14,960 --> 04:25:16,800
as possible there are three things that

4164
04:25:16,800 --> 04:25:18,159
we can do

4165
04:25:18,159 --> 04:25:21,439
either buy more memory and more cpu

4166
04:25:21,439 --> 04:25:23,279
but this is limited right

4167
04:25:23,279 --> 04:25:25,680
and by default we have some physical

4168
04:25:25,680 --> 04:25:27,120
limits as well we don't have quantum

4169
04:25:27,120 --> 04:25:29,600
computers for example so that's that

4170
04:25:29,600 --> 04:25:31,040
option is out

4171
04:25:31,040 --> 04:25:33,600
the second thing we can do is use faster

4172
04:25:33,600 --> 04:25:35,600
algorithms but again

4173
04:25:35,600 --> 04:25:37,840
machine learning algorithms are refined

4174
04:25:37,840 --> 04:25:40,800
like they are as good as they may get we

4175
04:25:40,800 --> 04:25:43,439
we may be able to modify them slightly

4176
04:25:43,439 --> 04:25:46,399
depending on the program problem but

4177
04:25:46,399 --> 04:25:49,040
mostly we can't really reduce how much

4178
04:25:49,040 --> 04:25:50,399
time they take

4179
04:25:50,399 --> 04:25:52,239
the last thing we can do and that we are

4180
04:25:52,239 --> 04:25:53,439
going to do

4181
04:25:53,439 --> 04:25:56,080
is reduce the data that we fit the

4182
04:25:56,080 --> 04:25:57,279
framework

4183
04:25:57,279 --> 04:25:59,120
so what if

4184
04:25:59,120 --> 04:26:01,359
instead of feeding the framework with

4185
04:26:01,359 --> 04:26:03,600
half a million reports every day

4186
04:26:03,600 --> 04:26:06,159
we fit the framework with

4187
04:26:06,159 --> 04:26:08,080
let's say compress them with a ratio one

4188
04:26:08,080 --> 04:26:09,920
to ten and we feed it with

4189
04:26:09,920 --> 04:26:12,319
five fifty thousand reports

4190
04:26:12,319 --> 04:26:13,760
this is where very interesting and

4191
04:26:13,760 --> 04:26:16,399
beautiful idea from 1989

4192
04:26:16,399 --> 04:26:18,640
the idea of prototype extraction comes

4193
04:26:18,640 --> 04:26:20,640
into play

4194
04:26:20,640 --> 04:26:22,560
instead of analyzing all these initial

4195
04:26:22,560 --> 04:26:25,359
model reports all these data points what

4196
04:26:25,359 --> 04:26:26,319
if

4197
04:26:26,319 --> 04:26:27,680
we could

4198
04:26:27,680 --> 04:26:30,399
extract representatives what if we could

4199
04:26:30,399 --> 04:26:32,479
choose certain data points that would

4200
04:26:32,479 --> 04:26:34,479
represent all the others

4201
04:26:34,479 --> 04:26:37,600
we call these data points prototypes

4202
04:26:37,600 --> 04:26:39,760
and luckily enough there is a prototype

4203
04:26:39,760 --> 04:26:41,680
extraction not the optimal one but a

4204
04:26:41,680 --> 04:26:45,439
good enough one that runs in linear time

4205
04:26:45,439 --> 04:26:48,560
so we take all our reports and we try to

4206
04:26:48,560 --> 04:26:51,840
compress them into a small

4207
04:26:51,840 --> 04:26:55,040
set of reports which we call prototypes

4208
04:26:55,040 --> 04:26:56,319
and instead of feeding our

4209
04:26:56,319 --> 04:26:58,399
classification and clustering algorithms

4210
04:26:58,399 --> 04:27:00,159
with the initial reports

4211
04:27:00,159 --> 04:27:02,000
we're going to cluster the prototypes

4212
04:27:02,000 --> 04:27:04,239
themselves and propagate the results of

4213
04:27:04,239 --> 04:27:05,920
the algorithm back to the initial data

4214
04:27:05,920 --> 04:27:08,319
points and see we see

4215
04:27:08,319 --> 04:27:11,040
here we see the five reports right

4216
04:27:11,040 --> 04:27:12,640
that we extracted before the five

4217
04:27:12,640 --> 04:27:14,640
prototypes excuse me

4218
04:27:14,640 --> 04:27:16,239
and they are being clustered into three

4219
04:27:16,239 --> 04:27:18,319
clusters one on the top right one on the

4220
04:27:18,319 --> 04:27:22,080
bottom left and one on the top left

4221
04:27:22,399 --> 04:27:24,319
one would say

4222
04:27:24,319 --> 04:27:26,800
it doesn't really match makes much much

4223
04:27:26,800 --> 04:27:29,840
sense to create a cluster of one person

4224
04:27:29,840 --> 04:27:31,760
right like we do on the top left why

4225
04:27:31,760 --> 04:27:33,760
would we do that why would we create a

4226
04:27:33,760 --> 04:27:35,279
group of one

4227
04:27:35,279 --> 04:27:37,840
and we would agree with it with whoever

4228
04:27:37,840 --> 04:27:40,399
claimed that right and this is why the

4229
04:27:40,399 --> 04:27:42,720
algorithm takes a parameter and we say

4230
04:27:42,720 --> 04:27:45,680
that if a cluster has less than m

4231
04:27:45,680 --> 04:27:46,720
members

4232
04:27:46,720 --> 04:27:48,399
if our clustering algorithm creates a

4233
04:27:48,399 --> 04:27:50,239
cluster with less let's say than two

4234
04:27:50,239 --> 04:27:51,520
members

4235
04:27:51,520 --> 04:27:53,120
we are going to reject this cluster we

4236
04:27:53,120 --> 04:27:55,600
are going to put it on the site

4237
04:27:55,600 --> 04:27:56,880
and we are going to keep these data

4238
04:27:56,880 --> 04:27:58,880
points for future reference maybe

4239
04:27:58,880 --> 04:28:00,880
tomorrow where we are going to have new

4240
04:28:00,880 --> 04:28:02,399
malware reports

4241
04:28:02,399 --> 04:28:03,840
some new prototype is going to be

4242
04:28:03,840 --> 04:28:06,000
extracted on the top left

4243
04:28:06,000 --> 04:28:08,479
and as a result maybe a new cluster will

4244
04:28:08,479 --> 04:28:09,920
be formed because it's going to have

4245
04:28:09,920 --> 04:28:12,080
more than m members

4246
04:28:12,080 --> 04:28:14,960
and the same exact idea applies to

4247
04:28:14,960 --> 04:28:16,640
classification

4248
04:28:16,640 --> 04:28:18,880
we draw our decision boundary and we may

4249
04:28:18,880 --> 04:28:21,840
say that if a new observation falls here

4250
04:28:21,840 --> 04:28:23,920
for example the closest prototype is

4251
04:28:23,920 --> 04:28:25,359
this one as a result we're gonna

4252
04:28:25,359 --> 04:28:26,720
classify our

4253
04:28:26,720 --> 04:28:29,040
new observation into this cluster

4254
04:28:29,040 --> 04:28:31,040
but if it falls

4255
04:28:31,040 --> 04:28:33,600
more than dr distance away let's say

4256
04:28:33,600 --> 04:28:35,199
here

4257
04:28:35,199 --> 04:28:37,760
we reject it and we keep it for future

4258
04:28:37,760 --> 04:28:40,239
reference

4259
04:28:40,239 --> 04:28:42,159
we described the simplified version of

4260
04:28:42,159 --> 04:28:43,359
malia

4261
04:28:43,359 --> 04:28:45,439
we described how we embed malware into

4262
04:28:45,439 --> 04:28:47,359
the vector space how we extract

4263
04:28:47,359 --> 04:28:49,120
prototypes out of them and how we can

4264
04:28:49,120 --> 04:28:51,520
use these prototypes to classify and

4265
04:28:51,520 --> 04:28:52,640
cluster

4266
04:28:52,640 --> 04:28:54,880
faster the malware

4267
04:28:54,880 --> 04:28:56,960
what we didn't talk about however is how

4268
04:28:56,960 --> 04:28:59,840
we can make this framework recurrent

4269
04:28:59,840 --> 04:29:01,680
we said that it's going to be executed

4270
04:29:01,680 --> 04:29:03,359
every day let's say and

4271
04:29:03,359 --> 04:29:06,319
analyze half a million malware right

4272
04:29:06,319 --> 04:29:08,319
this is where a last concept comes into

4273
04:29:08,319 --> 04:29:09,279
play

4274
04:29:09,279 --> 04:29:11,840
the idea of prototype incremental

4275
04:29:11,840 --> 04:29:13,040
analysis

4276
04:29:13,040 --> 04:29:15,520
excuse me and the framework looks like

4277
04:29:15,520 --> 04:29:17,760
this

4278
04:29:17,760 --> 04:29:19,600
so the first steps are the same we take

4279
04:29:19,600 --> 04:29:21,279
the molar binaries we monitor the

4280
04:29:21,279 --> 04:29:23,760
behavior we embed the behavior

4281
04:29:23,760 --> 04:29:25,520
and then instead of classifying the

4282
04:29:25,520 --> 04:29:27,040
initial data points we classify the

4283
04:29:27,040 --> 04:29:29,199
prototypes

4284
04:29:29,199 --> 04:29:31,520
on the rejected

4285
04:29:31,520 --> 04:29:33,920
prototypes from the classification

4286
04:29:33,920 --> 04:29:35,680
we run the algorithms of prototype

4287
04:29:35,680 --> 04:29:37,120
extraction

4288
04:29:37,120 --> 04:29:39,279
and we extract prototypes out of them

4289
04:29:39,279 --> 04:29:41,040
and then we feed these prototypes into

4290
04:29:41,040 --> 04:29:42,720
the clustering algorithm

4291
04:29:42,720 --> 04:29:45,040
and these new prototypes maybe will

4292
04:29:45,040 --> 04:29:47,120
create new clusters with the yesterday's

4293
04:29:47,120 --> 04:29:48,800
prototypes

4294
04:29:48,800 --> 04:29:50,159
and so on

4295
04:29:50,159 --> 04:29:51,840
what we described basically is this

4296
04:29:51,840 --> 04:29:53,600
algorithm this is the heart of my ear

4297
04:29:53,600 --> 04:29:55,840
this is the entry point the main

4298
04:29:55,840 --> 04:29:57,279
function of it

4299
04:29:57,279 --> 04:29:58,159
and

4300
04:29:58,159 --> 04:29:59,600
it invokes all the other three

4301
04:29:59,600 --> 04:30:02,880
algorithms that we talked about

4302
04:30:02,880 --> 04:30:04,399
and this way

4303
04:30:04,399 --> 04:30:06,319
our model gets stronger and stronger

4304
04:30:06,319 --> 04:30:07,600
every day

4305
04:30:07,600 --> 04:30:10,080
our framework can

4306
04:30:10,080 --> 04:30:12,239
create new clusters of malware and as a

4307
04:30:12,239 --> 04:30:15,359
result it can identify

4308
04:30:15,359 --> 04:30:18,479
new malware and in this way

4309
04:30:18,479 --> 04:30:21,040
we can attack the malware before it

4310
04:30:21,040 --> 04:30:23,600
attacks us

4311
04:30:23,760 --> 04:30:25,359
the talk is based on a paper called

4312
04:30:25,359 --> 04:30:27,279
automatic analysis of malware behavior

4313
04:30:27,279 --> 04:30:29,920
using machine learning it's written

4314
04:30:29,920 --> 04:30:32,399
i believe by two german professors and

4315
04:30:32,399 --> 04:30:34,080
one austrian professor

4316
04:30:34,080 --> 04:30:36,239
about 10 years ago but it's still

4317
04:30:36,239 --> 04:30:38,239
relevant

4318
04:30:38,239 --> 04:30:40,560
and it's very interesting if you enjoyed

4319
04:30:40,560 --> 04:30:42,560
the talk i urge you to

4320
04:30:42,560 --> 04:30:44,479
give it a read because it also has some

4321
04:30:44,479 --> 04:30:47,120
concepts that we did not have the time

4322
04:30:47,120 --> 04:30:48,720
to

4323
04:30:48,720 --> 04:30:50,239
talk about today

4324
04:30:50,239 --> 04:30:53,520
i want to thank sneha for guiding me and

4325
04:30:53,520 --> 04:30:56,479
helping me prepare for this talk today

4326
04:30:56,479 --> 04:30:59,120
thank you sneha i really appreciate it

4327
04:30:59,120 --> 04:31:01,760
and i also want to thank besides munich

4328
04:31:01,760 --> 04:31:03,600
for giving me the chance to be here with

4329
04:31:03,600 --> 04:31:04,960
you today

4330
04:31:04,960 --> 04:31:06,960
and explore one of the places where the

4331
04:31:06,960 --> 04:31:09,040
finest concepts of data science and

4332
04:31:09,040 --> 04:31:11,199
malware analysis meet

4333
04:31:11,199 --> 04:31:12,720
i would love to connect with you i have

4334
04:31:12,720 --> 04:31:15,279
a qr code down here i hope it works it's

4335
04:31:15,279 --> 04:31:18,640
not the malware i promise

4336
04:31:18,640 --> 04:31:20,080
you don't have to believe me though

4337
04:31:20,080 --> 04:31:21,760
right so

4338
04:31:21,760 --> 04:31:25,760
you can search me by sorry

4339
04:31:25,760 --> 04:31:26,880
right

4340
04:31:26,880 --> 04:31:28,479
correct

4341
04:31:28,479 --> 04:31:29,760
so

4342
04:31:29,760 --> 04:31:33,120
yeah you can also search me by my name

4343
04:31:33,120 --> 04:31:35,680
and i would love to hear your questions

4344
04:31:35,680 --> 04:31:38,800
and discuss with you about what we

4345
04:31:38,800 --> 04:31:41,730
presented thank you

4346
04:31:41,730 --> 04:31:46,670
[Applause]

4347
04:31:47,439 --> 04:31:49,120
awesome thank you very much any

4348
04:31:49,120 --> 04:31:51,439
questions just come in front here please

4349
04:31:51,439 --> 04:31:54,560
and ask your questions

4350
04:31:58,720 --> 04:32:00,640
just come in front

4351
04:32:00,640 --> 04:32:01,760
thanks

4352
04:32:01,760 --> 04:32:04,720
so we can hear you online as well

4353
04:32:04,720 --> 04:32:07,040
hello hi hello first of all thank you

4354
04:32:07,040 --> 04:32:09,040
very much for the very impressive

4355
04:32:09,040 --> 04:32:11,040
introduction of your system i have just

4356
04:32:11,040 --> 04:32:13,359
one quick question about it where do you

4357
04:32:13,359 --> 04:32:15,439
get all that information related to the

4358
04:32:15,439 --> 04:32:17,199
malware from because i mean it's a huge

4359
04:32:17,199 --> 04:32:18,960
amount of data you need to

4360
04:32:18,960 --> 04:32:20,640
put into the system

4361
04:32:20,640 --> 04:32:22,720
and are you do you have any sources or

4362
04:32:22,720 --> 04:32:24,319
where do you get

4363
04:32:24,319 --> 04:32:26,640
so from usually we get those that's a

4364
04:32:26,640 --> 04:32:28,479
very nice question actually we get those

4365
04:32:28,479 --> 04:32:30,399
from honeypots right

4366
04:32:30,399 --> 04:32:31,920
we

4367
04:32:31,920 --> 04:32:34,800
a honeypot is something like a sandbox

4368
04:32:34,800 --> 04:32:36,239
we could say that we exposed the

4369
04:32:36,239 --> 04:32:38,239
internet right and it has some

4370
04:32:38,239 --> 04:32:41,120
vulnerabilities and attackers may get

4371
04:32:41,120 --> 04:32:43,439
um access to this honeypot and try to

4372
04:32:43,439 --> 04:32:45,040
install some malware

4373
04:32:45,040 --> 04:32:47,040
but they failed to do it because this is

4374
04:32:47,040 --> 04:32:49,199
how hotbots work so we take this malware

4375
04:32:49,199 --> 04:32:50,319
symbol

4376
04:32:50,319 --> 04:32:51,439
and we

4377
04:32:51,439 --> 04:32:53,920
throw it into my year so honeypots

4378
04:32:53,920 --> 04:32:56,080
usually is the way how we gather those

4379
04:32:56,080 --> 04:32:57,680
apart from that also

4380
04:32:57,680 --> 04:33:00,720
self-reported malware from people or

4381
04:33:00,720 --> 04:33:02,960
things that either virus has already

4382
04:33:02,960 --> 04:33:05,278
detected let's say okay perfect thank

4383
04:33:05,278 --> 04:33:07,438
you

4384
04:33:10,958 --> 04:33:14,438
any more questions

4385
04:33:18,000 --> 04:33:20,879
i will suppose it was clear then

4386
04:33:20,879 --> 04:33:22,240
awesome thank you very much i'm sure you

4387
04:33:22,240 --> 04:33:24,080
are available for q a later on yeah i

4388
04:33:24,080 --> 04:33:25,278
would love to talk with you thank you

4389
04:33:25,278 --> 04:33:27,630
very much

4390
04:33:27,630 --> 04:33:35,080
[Applause]

4391
04:33:38,561 --> 04:33:39,599
no

4392
04:33:39,599 --> 04:33:43,480
i'm going to the other one

4393
04:33:49,160 --> 04:33:52,270
[Music]

4394
04:45:35,360 --> 04:45:38,360
look

4395
04:45:38,878 --> 04:45:40,958
okay everybody

4396
04:45:40,958 --> 04:45:44,160
so take your seats please

4397
04:45:44,878 --> 04:45:47,760
wonderful so the last talk here in the

4398
04:45:47,760 --> 04:45:49,440
moonshot track

4399
04:45:49,440 --> 04:45:50,878
for today and actually for the whole

4400
04:45:50,878 --> 04:45:52,878
conference

4401
04:45:52,878 --> 04:45:55,040
live from india

4402
04:45:55,040 --> 04:45:58,000
ashika ashid and manan will talk about

4403
04:45:58,000 --> 04:46:00,000
how to get into how they got into a

4404
04:46:00,000 --> 04:46:03,200
private code database or code base and

4405
04:46:03,200 --> 04:46:04,958
actually i love war stories so this is

4406
04:46:04,958 --> 04:46:07,280
going to be very interesting

4407
04:46:07,280 --> 04:46:10,958
and the stage is yours have fun

4408
04:46:11,920 --> 04:46:15,360
thanks avio um so i'll begin uh hi

4409
04:46:15,360 --> 04:46:17,840
everyone here

4410
04:46:17,840 --> 04:46:20,000
here we are to present our talk titled

4411
04:46:20,000 --> 04:46:22,638
how we got into a unicorn's private code

4412
04:46:22,638 --> 04:46:24,638
base through analyzing millions of

4413
04:46:24,638 --> 04:46:26,878
mobile apps

4414
04:46:26,878 --> 04:46:28,080
moving on

4415
04:46:28,080 --> 04:46:29,680
to the next slide

4416
04:46:29,680 --> 04:46:31,040
i am ashika

4417
04:46:31,040 --> 04:46:33,040
i am a security research and technical

4418
04:46:33,040 --> 04:46:37,040
writing in turn at cloud sec

4419
04:46:44,798 --> 04:46:48,840
i should i believe you're a mute

4420
04:46:54,480 --> 04:46:56,798
hello

4421
04:46:57,440 --> 04:47:00,600
is it

4422
04:47:06,878 --> 04:47:08,638
uh hello everyone

4423
04:47:08,638 --> 04:47:10,798
my name is rashid jain and i am working

4424
04:47:10,798 --> 04:47:13,360
as a full stack engineer at cloudsick so

4425
04:47:13,360 --> 04:47:15,680
i love to automate anything and

4426
04:47:15,680 --> 04:47:18,480
everything related to security apart

4427
04:47:18,480 --> 04:47:21,040
from that i love to travel and read

4428
04:47:21,040 --> 04:47:23,360
books

4429
04:47:25,200 --> 04:47:27,280
hi everyone i am anand and i work as a

4430
04:47:27,280 --> 04:47:29,920
cyber security analyst intern at classic

4431
04:47:29,920 --> 04:47:31,520
and i love to play the drums and play

4432
04:47:31,520 --> 04:47:32,480
football

4433
04:47:32,480 --> 04:47:34,718
yep

4434
04:47:34,798 --> 04:47:38,320
cool so let's move on

4435
04:47:39,120 --> 04:47:41,440
yeah so the agenda of our talk our talk

4436
04:47:41,440 --> 04:47:43,280
is basically divided into three parts in

4437
04:47:43,280 --> 04:47:45,840
the first part we are going to explore

4438
04:47:45,840 --> 04:47:47,840
uh what exactly happened with the

4439
04:47:47,840 --> 04:47:49,680
unicorn that we're talking about in the

4440
04:47:49,680 --> 04:47:52,718
second part we will talk about how we

4441
04:47:52,718 --> 04:47:54,958
analyze and find vulnerabilities in

4442
04:47:54,958 --> 04:47:58,160
mobile apps and in the end part three we

4443
04:47:58,160 --> 04:48:00,718
are going to uh talk about a large scale

4444
04:48:00,718 --> 04:48:02,958
study we did of over one million plus

4445
04:48:02,958 --> 04:48:06,000
apps and the impact

4446
04:48:06,000 --> 04:48:08,958
so moving on

4447
04:48:09,680 --> 04:48:13,040
let's begin with part one

4448
04:48:13,040 --> 04:48:14,718
the next slide please

4449
04:48:14,718 --> 04:48:16,000
yeah so

4450
04:48:16,000 --> 04:48:18,240
source code leaks have been in the talk

4451
04:48:18,240 --> 04:48:20,560
in the news for many years now

4452
04:48:20,560 --> 04:48:22,560
and the biggest one that comes of the

4453
04:48:22,560 --> 04:48:25,280
top of my head is the recent twitch leak

4454
04:48:25,280 --> 04:48:28,400
that happened in 2021 where

4455
04:48:28,400 --> 04:48:31,440
we saw that malicious actors posted on

4456
04:48:31,440 --> 04:48:34,480
the 4chan forum over 6000 internal git

4457
04:48:34,480 --> 04:48:37,280
repositories of twitch which contained

4458
04:48:37,280 --> 04:48:39,840
200 gb worth of data and 3 million

4459
04:48:39,840 --> 04:48:41,520
documents so

4460
04:48:41,520 --> 04:48:43,680
just by the scale of these numbers you

4461
04:48:43,680 --> 04:48:46,240
can understand how big this leak was

4462
04:48:46,240 --> 04:48:48,638
and earlier this year we did a little

4463
04:48:48,638 --> 04:48:50,240
something of our own which we'd like to

4464
04:48:50,240 --> 04:48:51,760
share with you guys

4465
04:48:51,760 --> 04:48:55,480
so moving on

4466
04:48:55,520 --> 04:48:58,160
let me present to you the big fish

4467
04:48:58,160 --> 04:49:01,280
so it was a casual work afternoon for us

4468
04:49:01,280 --> 04:49:02,480
we were just

4469
04:49:02,480 --> 04:49:05,280
doing a normal thing analyzing top apps

4470
04:49:05,280 --> 04:49:07,200
and finding security vulnerabilities in

4471
04:49:07,200 --> 04:49:10,958
them and reporting them to the uh

4472
04:49:10,958 --> 04:49:12,320
organizations

4473
04:49:12,320 --> 04:49:14,638
so what we found was really interesting

4474
04:49:14,638 --> 04:49:16,878
we found that there was this app which

4475
04:49:16,878 --> 04:49:18,878
had 10 million plus downloads in play

4476
04:49:18,878 --> 04:49:19,760
store

4477
04:49:19,760 --> 04:49:23,280
of a 120 million worthy unicorn that had

4478
04:49:23,280 --> 04:49:25,360
a really big security vulnerability with

4479
04:49:25,360 --> 04:49:27,840
which we could uh basically

4480
04:49:27,840 --> 04:49:29,840
view that entire source code

4481
04:49:29,840 --> 04:49:32,480
and do a lot more uh a lot more things

4482
04:49:32,480 --> 04:49:35,040
with it which we'll tell you in in the

4483
04:49:35,040 --> 04:49:36,400
coming slides

4484
04:49:36,400 --> 04:49:38,878
moving on

4485
04:49:40,320 --> 04:49:43,840
so let's explore what exactly happened

4486
04:49:43,840 --> 04:49:44,718
so

4487
04:49:44,718 --> 04:49:47,040
what happened was that uh while

4488
04:49:47,040 --> 04:49:49,200
exploring the uh the gold base of this

4489
04:49:49,200 --> 04:49:53,120
app we were analyzing it on uh

4490
04:49:53,120 --> 04:49:55,120
this search engine that we built and

4491
04:49:55,120 --> 04:49:57,920
what we saw was that there was something

4492
04:49:57,920 --> 04:50:00,480
called as a guitar personal access token

4493
04:50:00,480 --> 04:50:03,200
which was hard coded into the app's

4494
04:50:03,200 --> 04:50:05,200
android bundle file and it was there for

4495
04:50:05,200 --> 04:50:07,920
everyone to see and do anything with it

4496
04:50:07,920 --> 04:50:10,320
so that's not exactly desirable

4497
04:50:10,320 --> 04:50:12,240
especially not from a unicorn

4498
04:50:12,240 --> 04:50:14,240
a lot of questions might be arising in

4499
04:50:14,240 --> 04:50:16,240
your head people might be asking what is

4500
04:50:16,240 --> 04:50:18,480
a github personal access token and what

4501
04:50:18,480 --> 04:50:20,718
can a person do with it so we'll explore

4502
04:50:20,718 --> 04:50:23,680
that in the next slide

4503
04:50:24,560 --> 04:50:27,040
so a github personal access token is

4504
04:50:27,040 --> 04:50:29,680
basically an alternative uh to using

4505
04:50:29,680 --> 04:50:32,080
passwords for authentication in github

4506
04:50:32,080 --> 04:50:35,200
using the github api or the command line

4507
04:50:35,200 --> 04:50:36,160
so

4508
04:50:36,160 --> 04:50:39,040
uh with this token basically uh you you

4509
04:50:39,040 --> 04:50:41,280
get a lot of privileges and we ran this

4510
04:50:41,280 --> 04:50:43,040
query as you can see in the screenshot

4511
04:50:43,040 --> 04:50:44,080
on this

4512
04:50:44,080 --> 04:50:46,240
on the screen what happened was that we

4513
04:50:46,240 --> 04:50:48,080
passed the github token that we found in

4514
04:50:48,080 --> 04:50:50,160
the previous slide and we wanted to

4515
04:50:50,160 --> 04:50:52,718
explore what scopes uh is this guitar

4516
04:50:52,718 --> 04:50:55,440
personal access token giving us and you

4517
04:50:55,440 --> 04:50:57,600
can see the output in the screenshot

4518
04:50:57,600 --> 04:50:59,680
we could see that we're getting admin

4519
04:50:59,680 --> 04:51:01,440
privileges

4520
04:51:01,440 --> 04:51:03,760
we we could delete the repo we could

4521
04:51:03,760 --> 04:51:06,160
delete packages in the repo

4522
04:51:06,160 --> 04:51:08,160
we could change the workflows we could

4523
04:51:08,160 --> 04:51:11,360
write packages we had the reposco we had

4524
04:51:11,360 --> 04:51:13,520
the user scope so out of all of these

4525
04:51:13,520 --> 04:51:16,560
scopes the most important is the scope

4526
04:51:16,560 --> 04:51:19,520
repo which gave us full access to the

4527
04:51:19,520 --> 04:51:22,560
private repositories so uh just to give

4528
04:51:22,560 --> 04:51:24,718
you an idea of what we could do with

4529
04:51:24,718 --> 04:51:26,080
this scope was

4530
04:51:26,080 --> 04:51:29,680
uh basically we could uh commit changes

4531
04:51:29,680 --> 04:51:31,200
to the

4532
04:51:31,200 --> 04:51:34,000
organization's github repo and push them

4533
04:51:34,000 --> 04:51:36,718
we could also invite other collaborators

4534
04:51:36,718 --> 04:51:39,440
uh and ask them to do the same we could

4535
04:51:39,440 --> 04:51:40,878
mess around with their deployment

4536
04:51:40,878 --> 04:51:43,760
workflows we could delete the repo

4537
04:51:43,760 --> 04:51:46,798
basically in the end to sum it up we

4538
04:51:46,798 --> 04:51:48,320
could do anything with the repos with

4539
04:51:48,320 --> 04:51:51,760
the scope with just the scope and that's

4540
04:51:51,760 --> 04:51:53,920
a pretty big deal

4541
04:51:53,920 --> 04:51:57,839
now moving on to the next slide

4542
04:51:58,240 --> 04:52:01,760
uh after finding out uh that

4543
04:52:01,760 --> 04:52:03,280
we could get access to the private

4544
04:52:03,280 --> 04:52:05,920
repositories we wanted to see how many

4545
04:52:05,920 --> 04:52:08,240
private repositories can we actually get

4546
04:52:08,240 --> 04:52:11,200
access to so we run this query that is

4547
04:52:11,200 --> 04:52:12,718
shown in the screenshot we passed the

4548
04:52:12,718 --> 04:52:16,160
token against this uh endpoint and

4549
04:52:16,160 --> 04:52:18,400
we were able to find that we could

4550
04:52:18,400 --> 04:52:21,520
access the organization's all 26 private

4551
04:52:21,520 --> 04:52:23,040
repository

4552
04:52:23,040 --> 04:52:27,120
and that's the impact was pretty nasty

4553
04:52:27,120 --> 04:52:29,920
so moving on uh

4554
04:52:29,920 --> 04:52:32,160
to the next slide

4555
04:52:32,160 --> 04:52:33,040
uh

4556
04:52:33,040 --> 04:52:34,958
and this is what the private uh

4557
04:52:34,958 --> 04:52:38,000
repositories urls look like so you could

4558
04:52:38,000 --> 04:52:40,080
conclude that we could get

4559
04:52:40,080 --> 04:52:43,840
access to the unicorns ios apps their

4560
04:52:43,840 --> 04:52:47,520
apis and their normal android mobile

4561
04:52:47,520 --> 04:52:48,320
apps

4562
04:52:48,320 --> 04:52:50,400
finally this is how we got access to the

4563
04:52:50,400 --> 04:52:53,360
unicorns code base so

4564
04:52:53,360 --> 04:52:55,280
after finding this issue we immediately

4565
04:52:55,280 --> 04:52:57,600
reported to the company and they

4566
04:52:57,600 --> 04:53:00,480
acknowledged the issue and fixed the bug

4567
04:53:00,480 --> 04:53:03,360
and the token is now no more there

4568
04:53:03,360 --> 04:53:06,760
moving on

4569
04:53:07,360 --> 04:53:08,480
so

4570
04:53:08,480 --> 04:53:10,160
let's count the mistakes

4571
04:53:10,160 --> 04:53:12,080
so how are we able to do this entire

4572
04:53:12,080 --> 04:53:14,560
thing there were two major mistakes that

4573
04:53:14,560 --> 04:53:16,560
were on the developer's part first

4574
04:53:16,560 --> 04:53:18,560
mistake was hard coding the github

4575
04:53:18,560 --> 04:53:21,280
packet bad token in the source code in

4576
04:53:21,280 --> 04:53:24,000
the first place so once we found that

4577
04:53:24,000 --> 04:53:26,160
hard-coded github pad token we could

4578
04:53:26,160 --> 04:53:28,400
clone the repos on a system and just

4579
04:53:28,400 --> 04:53:30,400
view their code base so till now we are

4580
04:53:30,400 --> 04:53:32,718
just able to view the code base

4581
04:53:32,718 --> 04:53:34,798
but where things went really south was

4582
04:53:34,798 --> 04:53:37,520
mistake number two uh with which like

4583
04:53:37,520 --> 04:53:39,920
they gave excessive scope to that token

4584
04:53:39,920 --> 04:53:41,520
and anybody could use it for

4585
04:53:41,520 --> 04:53:44,000
exploitation like anybody could

4586
04:53:44,000 --> 04:53:46,400
commit changes to their private code

4587
04:53:46,400 --> 04:53:47,920
base anybody could invite other

4588
04:53:47,920 --> 04:53:50,320
collaborators and team elect change the

4589
04:53:50,320 --> 04:53:52,400
entire organization structure and

4590
04:53:52,400 --> 04:53:54,798
whatnot so these were two really big

4591
04:53:54,798 --> 04:53:57,600
mistakes that they made on their part

4592
04:53:57,600 --> 04:53:59,200
now uh

4593
04:53:59,200 --> 04:54:02,320
the talk is titled how we analyzed uh

4594
04:54:02,320 --> 04:54:04,080
how we got access to

4595
04:54:04,080 --> 04:54:06,080
a unicorn's private code base by

4596
04:54:06,080 --> 04:54:09,200
analyzing millions of apps so surely

4597
04:54:09,200 --> 04:54:12,000
millions of and analyzing millions of us

4598
04:54:12,000 --> 04:54:14,320
apps is like basically not it's

4599
04:54:14,320 --> 04:54:17,040
something a person cannot do manually

4600
04:54:17,040 --> 04:54:19,600
it's a herculean task to do manually so

4601
04:54:19,600 --> 04:54:22,480
we automated this process and we did a

4602
04:54:22,480 --> 04:54:24,560
lot of analysis on our heart and i'd

4603
04:54:24,560 --> 04:54:25,440
like to

4604
04:54:25,440 --> 04:54:28,000
give it over to arshad my teammate

4605
04:54:28,000 --> 04:54:29,600
uh who's going to explain about this

4606
04:54:29,600 --> 04:54:33,120
part a little more in detail

4607
04:54:43,040 --> 04:54:44,560
why should i believe you are still on

4608
04:54:44,560 --> 04:54:46,878
mute

4609
04:54:55,280 --> 04:54:58,280
hello

4610
04:55:04,480 --> 04:55:05,440
so

4611
04:55:05,440 --> 04:55:06,878
till this point like many questions

4612
04:55:06,878 --> 04:55:09,760
would be arising that how did you start

4613
04:55:09,760 --> 04:55:11,760
scanning the code base of this app how

4614
04:55:11,760 --> 04:55:12,798
did you

4615
04:55:12,798 --> 04:55:14,080
reach to the

4616
04:55:14,080 --> 04:55:17,920
secret at the first phase first place so

4617
04:55:17,920 --> 04:55:20,080
let me tell you a story

4618
04:55:20,080 --> 04:55:22,080
one day our security team out of

4619
04:55:22,080 --> 04:55:24,240
curiosity were

4620
04:55:24,240 --> 04:55:25,600
doing a

4621
04:55:25,600 --> 04:55:29,040
study on secrets that can be found on

4622
04:55:29,040 --> 04:55:30,718
github public reports

4623
04:55:30,718 --> 04:55:33,360
and to our surprise we found

4624
04:55:33,360 --> 04:55:36,000
like there were many secrets that people

4625
04:55:36,000 --> 04:55:37,760
have just hard coded in the public

4626
04:55:37,760 --> 04:55:41,040
airport like stripe keys razer pickies

4627
04:55:41,040 --> 04:55:43,920
aws credentials and assets like firebase

4628
04:55:43,920 --> 04:55:47,360
urls and aws cognito urls

4629
04:55:47,360 --> 04:55:50,400
so this was like a big mistake that the

4630
04:55:50,400 --> 04:55:53,040
developer have done on public reports so

4631
04:55:53,040 --> 04:55:55,760
then we thought these are public reports

4632
04:55:55,760 --> 04:55:58,480
which anyone has access to so what about

4633
04:55:58,480 --> 04:55:59,280
the

4634
04:55:59,280 --> 04:56:01,440
source code that no one has access to

4635
04:56:01,440 --> 04:56:03,040
like mobile apps

4636
04:56:03,040 --> 04:56:04,080
so

4637
04:56:04,080 --> 04:56:07,760
then after doing some initial research

4638
04:56:07,760 --> 04:56:08,958
we did not

4639
04:56:08,958 --> 04:56:12,320
find any good tool that can just like

4640
04:56:12,320 --> 04:56:14,400
tell us about uh

4641
04:56:14,400 --> 04:56:17,040
secrets that are being leaked across the

4642
04:56:17,040 --> 04:56:18,160
mobile app

4643
04:56:18,160 --> 04:56:20,798
so then for analyzing the mobile apps we

4644
04:56:20,798 --> 04:56:23,200
build our own security searching

4645
04:56:23,200 --> 04:56:25,680
so here are the steps that we followed

4646
04:56:25,680 --> 04:56:28,240
to build this mobile app scanner so

4647
04:56:28,240 --> 04:56:30,718
first was we collected the data

4648
04:56:30,718 --> 04:56:34,560
second step was we decompiled the

4649
04:56:34,560 --> 04:56:36,798
apps that we collected into readable

4650
04:56:36,798 --> 04:56:39,840
source code third was we created a set

4651
04:56:39,840 --> 04:56:41,520
of rules

4652
04:56:41,520 --> 04:56:44,638
uh of rejects so to identify the hard

4653
04:56:44,638 --> 04:56:48,320
coded tokens and the third was to

4654
04:56:48,320 --> 04:56:52,160
build a interface where we can just do a

4655
04:56:52,160 --> 04:56:54,718
rejects or like keyword search and it

4656
04:56:54,718 --> 04:56:57,120
will return you all the results on all

4657
04:56:57,120 --> 04:57:00,560
the source code that we have collected

4658
04:57:00,560 --> 04:57:03,760
so uh let's deep dive into all the steps

4659
04:57:03,760 --> 04:57:07,440
that we followed to build the system

4660
04:57:07,840 --> 04:57:10,080
so the first step was collector of

4661
04:57:10,080 --> 04:57:13,600
mobile apps we thought can we build a

4662
04:57:13,600 --> 04:57:16,480
system in in which people can just come

4663
04:57:16,480 --> 04:57:19,360
upload their mobile apps and they can

4664
04:57:19,360 --> 04:57:21,920
get their security reports

4665
04:57:21,920 --> 04:57:23,040
uh

4666
04:57:23,040 --> 04:57:25,440
and just know the secrets and issues in

4667
04:57:25,440 --> 04:57:28,240
their mobile app so user submission was

4668
04:57:28,240 --> 04:57:30,080
the first source that we collected the

4669
04:57:30,080 --> 04:57:33,280
data from the second store source was we

4670
04:57:33,280 --> 04:57:36,240
collected uh the android apps across the

4671
04:57:36,240 --> 04:57:39,280
internet so that included uh apps that

4672
04:57:39,280 --> 04:57:41,360
were being downloaded from play store

4673
04:57:41,360 --> 04:57:43,760
and as well as third party app stores

4674
04:57:43,760 --> 04:57:44,718
so

4675
04:57:44,718 --> 04:57:47,040
while we were crawling the play stores

4676
04:57:47,040 --> 04:57:49,040
we faced many difficulties like

4677
04:57:49,040 --> 04:57:51,200
sometimes we were not able to

4678
04:57:51,200 --> 04:57:53,840
uh download apps from certain countries

4679
04:57:53,840 --> 04:57:56,000
or sometimes there were issues like some

4680
04:57:56,000 --> 04:57:58,320
apps were not compatible with certain

4681
04:57:58,320 --> 04:58:01,200
devices but we were able to overcome all

4682
04:58:01,200 --> 04:58:02,480
those uh

4683
04:58:02,480 --> 04:58:03,520
problems

4684
04:58:03,520 --> 04:58:05,920
and the reason we downloaded the apps

4685
04:58:05,920 --> 04:58:08,480
from third party app stores was because

4686
04:58:08,480 --> 04:58:10,400
we wanted to analyze

4687
04:58:10,400 --> 04:58:12,638
the fake apps that have been wandering

4688
04:58:12,638 --> 04:58:13,680
around

4689
04:58:13,680 --> 04:58:16,160
on these third-party app stores because

4690
04:58:16,160 --> 04:58:18,080
these apps on third-party app stores

4691
04:58:18,080 --> 04:58:21,520
contains malwares or sometimes people

4692
04:58:21,520 --> 04:58:23,760
have just tampered the certificate and

4693
04:58:23,760 --> 04:58:26,798
uploaded the apps in the system

4694
04:58:26,798 --> 04:58:30,240
so currently we have about a million app

4695
04:58:30,240 --> 04:58:32,958
that has been indexed in our system

4696
04:58:32,958 --> 04:58:34,560
so

4697
04:58:34,560 --> 04:58:36,718
after collecting the mobile app we

4698
04:58:36,718 --> 04:58:38,480
thought uh

4699
04:58:38,480 --> 04:58:41,600
let's like decompile those apps

4700
04:58:41,600 --> 04:58:44,240
into a readable source code so to do

4701
04:58:44,240 --> 04:58:47,280
that we used an open source android tool

4702
04:58:47,280 --> 04:58:51,280
called zx so zx it helps you to

4703
04:58:51,280 --> 04:58:54,400
decompile delve by code into java

4704
04:58:54,400 --> 04:58:56,480
classes from

4705
04:58:56,480 --> 04:58:58,000
apk and

4706
04:58:58,000 --> 04:59:01,600
dex files it also helps you to decode

4707
04:59:01,600 --> 04:59:03,520
android dot

4708
04:59:03,520 --> 04:59:06,958
manifest dot android manifest xml file

4709
04:59:06,958 --> 04:59:10,560
so after decompile all these apps we

4710
04:59:10,560 --> 04:59:11,680
thought let's

4711
04:59:11,680 --> 04:59:14,160
we stored all these apps into a file

4712
04:59:14,160 --> 04:59:15,120
system

4713
04:59:15,120 --> 04:59:16,000
so

4714
04:59:16,000 --> 04:59:17,920
while we were storing these apps on file

4715
04:59:17,920 --> 04:59:19,520
system

4716
04:59:19,520 --> 04:59:20,560
these

4717
04:59:20,560 --> 04:59:23,120
apps size is like

4718
04:59:23,120 --> 04:59:25,920
uh app sites

4719
04:59:25,920 --> 04:59:28,560
get increased uh due to

4720
04:59:28,560 --> 04:59:30,638
uh like many things that are there in

4721
04:59:30,638 --> 04:59:32,958
these apps so we did some optimization

4722
04:59:32,958 --> 04:59:36,798
on that pass apart as well

4723
04:59:37,280 --> 04:59:41,280
so after uh decompilation we thought uh

4724
04:59:41,280 --> 04:59:42,798
let's uh

4725
04:59:42,798 --> 04:59:45,280
how do we find the secrets on these uh

4726
04:59:45,280 --> 04:59:48,878
source code uh that we have so for that

4727
04:59:48,878 --> 04:59:50,718
we started building

4728
04:59:50,718 --> 04:59:55,440
uh rejects is uh that can be found

4729
04:59:55,680 --> 04:59:57,440
on on the source code

4730
04:59:57,440 --> 04:59:59,760
so for building those rejections we

4731
04:59:59,760 --> 05:00:01,280
thought let's like

4732
05:00:01,280 --> 05:00:02,718
maybe analyze

4733
05:00:02,718 --> 05:00:05,120
uh some

4734
05:00:05,120 --> 05:00:08,878
mobile apps and see what kind of uh keys

4735
05:00:08,878 --> 05:00:12,080
usually do developer uses a developer

4736
05:00:12,080 --> 05:00:14,080
use in the mobile apps

4737
05:00:14,080 --> 05:00:15,680
so

4738
05:00:15,680 --> 05:00:17,440
after this we

4739
05:00:17,440 --> 05:00:19,600
started building the jigsys and there

4740
05:00:19,600 --> 05:00:21,840
were many difficulties that we faced

4741
05:00:21,840 --> 05:00:23,760
while building those rejections like

4742
05:00:23,760 --> 05:00:26,638
sometimes the length of the key was not

4743
05:00:26,638 --> 05:00:29,520
fixed other time we were not able to

4744
05:00:29,520 --> 05:00:31,920
even find the rejections for it

4745
05:00:31,920 --> 05:00:32,798
so

4746
05:00:32,798 --> 05:00:34,560
uh for those

4747
05:00:34,560 --> 05:00:36,400
for which we did not find the rejections

4748
05:00:36,400 --> 05:00:39,760
for we went to open source repositories

4749
05:00:39,760 --> 05:00:42,560
like iphone and truffle

4750
05:00:42,560 --> 05:00:46,480
after we had all the digixes in

4751
05:00:46,480 --> 05:00:48,400
in a place uh

4752
05:00:48,400 --> 05:00:50,878
we took all those uh rejections or we

4753
05:00:50,878 --> 05:00:53,360
took all the keys and just put up all

4754
05:00:53,360 --> 05:00:57,200
the keys in an android file uh

4755
05:00:57,200 --> 05:01:00,560
so apart from putting it uh specifically

4756
05:01:00,560 --> 05:01:04,560
in a class we put it all the keys in

4757
05:01:04,560 --> 05:01:07,040
android dot manifest file java classes

4758
05:01:07,040 --> 05:01:09,280
and then then after putting all those

4759
05:01:09,280 --> 05:01:13,920
keys we com compile the android app and

4760
05:01:13,920 --> 05:01:16,000
we put the android app through our

4761
05:01:16,000 --> 05:01:18,480
system so that we can see whether we are

4762
05:01:18,480 --> 05:01:21,200
able to detect the particular key or not

4763
05:01:21,200 --> 05:01:23,280
using our reject system and that that

4764
05:01:23,280 --> 05:01:25,200
also help us minimizing the false

4765
05:01:25,200 --> 05:01:26,958
quality

4766
05:01:26,958 --> 05:01:28,000
so

4767
05:01:28,000 --> 05:01:31,200
after collecting the apps decompiling it

4768
05:01:31,200 --> 05:01:32,958
and building the rejects

4769
05:01:32,958 --> 05:01:35,520
rejects for all the

4770
05:01:35,520 --> 05:01:37,280
keys we went

4771
05:01:37,280 --> 05:01:40,000
and we automated the process

4772
05:01:40,000 --> 05:01:41,840
so

4773
05:01:41,840 --> 05:01:44,878
we wanted to provide an interface where

4774
05:01:44,878 --> 05:01:46,240
people can come

4775
05:01:46,240 --> 05:01:48,958
just do a keyword or reject search and

4776
05:01:48,958 --> 05:01:52,080
it will just list out all the results

4777
05:01:52,080 --> 05:01:54,878
that we found using our source code

4778
05:01:54,878 --> 05:01:56,080
so

4779
05:01:56,080 --> 05:01:59,040
and this is how we were able to reach to

4780
05:01:59,040 --> 05:02:02,400
the unicorns uh github token using the

4781
05:02:02,400 --> 05:02:04,320
rejections that we built for get back

4782
05:02:04,320 --> 05:02:05,360
token

4783
05:02:05,360 --> 05:02:07,680
so this is the one you this is only the

4784
05:02:07,680 --> 05:02:10,798
one use case that we found uh where

4785
05:02:10,798 --> 05:02:12,718
using a github pack token you were able

4786
05:02:12,718 --> 05:02:16,320
to reach unicorn's private uh code base

4787
05:02:16,320 --> 05:02:19,440
so imagine what can happen with uh all

4788
05:02:19,440 --> 05:02:22,400
other keys that are hard coded in the

4789
05:02:22,400 --> 05:02:25,120
source code so let me call manon on

4790
05:02:25,120 --> 05:02:26,000
state

4791
05:02:26,000 --> 05:02:27,600
he'll

4792
05:02:27,600 --> 05:02:30,000
give you the

4793
05:02:30,000 --> 05:02:32,638
insights of impact of these secret leaks

4794
05:02:32,638 --> 05:02:37,239
and why do developer do such mistakes

4795
05:02:41,360 --> 05:02:43,280
well let's take a deep dive into github

4796
05:02:43,280 --> 05:02:44,638
pids

4797
05:02:44,638 --> 05:02:47,520
so we were able to find 159 private

4798
05:02:47,520 --> 05:02:50,400
repositories from 151 github tokens that

4799
05:02:50,400 --> 05:02:52,480
we found by analyzing mobile apps that

4800
05:02:52,480 --> 05:02:54,480
had installs ranging from 100 to 10

4801
05:02:54,480 --> 05:02:56,400
million on the play store

4802
05:02:56,400 --> 05:02:58,560
this may lead to leaking or secrets like

4803
05:02:58,560 --> 05:03:00,320
database configurations

4804
05:03:00,320 --> 05:03:02,480
which in turn lead to decline in brand

4805
05:03:02,480 --> 05:03:05,360
confidence and imminent financial losses

4806
05:03:05,360 --> 05:03:07,200
by the way all organizations involved

4807
05:03:07,200 --> 05:03:08,560
with the above leads were informed of

4808
05:03:08,560 --> 05:03:09,760
the same and corrective measures have

4809
05:03:09,760 --> 05:03:10,798
been taken

4810
05:03:10,798 --> 05:03:13,199
by them

4811
05:03:13,360 --> 05:03:15,520
well we can lie but numbers definitely

4812
05:03:15,520 --> 05:03:17,520
won't till now we've been able to find

4813
05:03:17,520 --> 05:03:19,680
over 1.6 million hardcoded sensitive

4814
05:03:19,680 --> 05:03:22,080
tokens as you can see in the pie chart

4815
05:03:22,080 --> 05:03:23,920
some of the prominent ones are firebase

4816
05:03:23,920 --> 05:03:26,000
and aws readable writable buckets

4817
05:03:26,000 --> 05:03:30,798
dropbox api keys facebook secrets etc

4818
05:03:30,958 --> 05:03:32,958
now that we materialize things a bit by

4819
05:03:32,958 --> 05:03:34,958
seeing the enormous number of leaks and

4820
05:03:34,958 --> 05:03:37,120
moved ahead of the abstract part

4821
05:03:37,120 --> 05:03:39,280
let's now take a delve into the impact

4822
05:03:39,280 --> 05:03:41,120
of these keys and

4823
05:03:41,120 --> 05:03:42,320
what

4824
05:03:42,320 --> 05:03:45,760
malicious actors can do with them

4825
05:03:45,760 --> 05:03:47,600
the best way to make you all feel the

4826
05:03:47,600 --> 05:03:50,320
intensity would be able uh would be to

4827
05:03:50,320 --> 05:03:52,480
take you through some examples

4828
05:03:52,480 --> 05:03:54,080
well let's take up email automation

4829
05:03:54,080 --> 05:03:55,280
first

4830
05:03:55,280 --> 05:03:57,200
there are email automation services like

4831
05:03:57,200 --> 05:04:00,000
send grid mail jim milgan etc

4832
05:04:00,000 --> 05:04:01,520
let's analyze what happens when the

4833
05:04:01,520 --> 05:04:03,360
secret token for one of these services

4834
05:04:03,360 --> 05:04:04,638
gets leaked

4835
05:04:04,638 --> 05:04:06,638
the attacker gets access to read and

4836
05:04:06,638 --> 05:04:08,080
send emails from all the accounts

4837
05:04:08,080 --> 05:04:10,400
associated with that particular key

4838
05:04:10,400 --> 05:04:12,160
using this key the attacker might be

4839
05:04:12,160 --> 05:04:14,400
able to start a phishing campaign from

4840
05:04:14,400 --> 05:04:16,000
the official mailing channels of that

4841
05:04:16,000 --> 05:04:18,320
organization which which generally would

4842
05:04:18,320 --> 05:04:19,680
be trusted by the customers or the

4843
05:04:19,680 --> 05:04:21,440
consumer

4844
05:04:21,440 --> 05:04:23,120
also the attacker might be able to gain

4845
05:04:23,120 --> 05:04:24,878
sensitive and personally identifiable

4846
05:04:24,878 --> 05:04:27,440
information like names emails contact

4847
05:04:27,440 --> 05:04:30,878
numbers etc all those customers

4848
05:04:30,878 --> 05:04:33,120
similarly if the attacker gets access to

4849
05:04:33,120 --> 05:04:34,878
tokens for services like razor bay

4850
05:04:34,878 --> 05:04:37,520
stripe etc which are payment processing

4851
05:04:37,520 --> 05:04:39,520
tools they might be able to do very

4852
05:04:39,520 --> 05:04:40,718
nasty stuff

4853
05:04:40,718 --> 05:04:42,400
that might tarnish the reputation of the

4854
05:04:42,400 --> 05:04:44,160
organization and further cause financial

4855
05:04:44,160 --> 05:04:45,440
damage as well

4856
05:04:45,440 --> 05:04:47,040
other than that they might be able to

4857
05:04:47,040 --> 05:04:48,638
gain access to transaction details of

4858
05:04:48,638 --> 05:04:50,718
the customer and organization like

4859
05:04:50,718 --> 05:04:54,240
credit and debit card information

4860
05:04:54,240 --> 05:04:55,680
well now i think all of you would have

4861
05:04:55,680 --> 05:04:57,200
gotten a gist of how frightful the

4862
05:04:57,200 --> 05:04:59,760
consequences of such leaks are therefore

4863
05:04:59,760 --> 05:05:01,600
it would be a good idea to talk about

4864
05:05:01,600 --> 05:05:03,440
why developers do this

4865
05:05:03,440 --> 05:05:05,280
well to be able to answer this question

4866
05:05:05,280 --> 05:05:07,360
in a succinct manner we'll have to look

4867
05:05:07,360 --> 05:05:09,120
at some common problems faced by android

4868
05:05:09,120 --> 05:05:11,840
app developers

4869
05:05:11,920 --> 05:05:14,160
we all know how much of a pain it is to

4870
05:05:14,160 --> 05:05:16,480
focus on building security and crcd

4871
05:05:16,480 --> 05:05:18,160
pipelines instead of building the actual

4872
05:05:18,160 --> 05:05:21,520
application and have divert efforts

4873
05:05:21,520 --> 05:05:23,600
other than that there is an issue of

4874
05:05:23,600 --> 05:05:25,920
awareness many developers think that it

4875
05:05:25,920 --> 05:05:27,520
is okay for them to leave hard-coded

4876
05:05:27,520 --> 05:05:29,360
tokens in their source code as it is

4877
05:05:29,360 --> 05:05:31,760
gonna be compiled into an apk before

4878
05:05:31,760 --> 05:05:32,958
publishing

4879
05:05:32,958 --> 05:05:34,958
but as a cyber security community it is

4880
05:05:34,958 --> 05:05:37,200
our job to make them aware that such is

4881
05:05:37,200 --> 05:05:38,718
not the case

4882
05:05:38,718 --> 05:05:40,560
also companies can sometimes feel that

4883
05:05:40,560 --> 05:05:42,160
money is better spent in other domains

4884
05:05:42,160 --> 05:05:43,520
rather than spending it on proper

4885
05:05:43,520 --> 05:05:46,320
security testing on their mobile apps

4886
05:05:46,320 --> 05:05:47,840
one example would be an app called

4887
05:05:47,840 --> 05:05:50,160
clubhouse which became very popular but

4888
05:05:50,160 --> 05:05:51,360
it didn't implement end-to-end

4889
05:05:51,360 --> 05:05:53,520
encryption on their rtc packets thus any

4890
05:05:53,520 --> 05:05:54,958
attacker could perform a man in the

4891
05:05:54,958 --> 05:05:56,400
middle attack and snoop on private

4892
05:05:56,400 --> 05:05:58,958
conversation

4893
05:05:59,200 --> 05:06:00,560
well now that we've discussed the

4894
05:06:00,560 --> 05:06:02,080
problem let's go through some of the

4895
05:06:02,080 --> 05:06:04,480
solutions for the developers

4896
05:06:04,480 --> 05:06:06,480
scoping is the most primitive method of

4897
05:06:06,480 --> 05:06:08,400
stepping up the security of your app you

4898
05:06:08,400 --> 05:06:10,240
can do this by assigning the secret keys

4899
05:06:10,240 --> 05:06:12,000
only the necessary permissions so that

4900
05:06:12,000 --> 05:06:14,000
even if the attackers get access to that

4901
05:06:14,000 --> 05:06:17,840
key the damage is controlled and limited

4902
05:06:17,840 --> 05:06:19,760
using of environment variables to store

4903
05:06:19,760 --> 05:06:21,520
keys in another solution so that they

4904
05:06:21,520 --> 05:06:23,440
are not hard-coded in the code but

4905
05:06:23,440 --> 05:06:25,120
rather embedded into the operating

4906
05:06:25,120 --> 05:06:27,120
system and relatively out of the reach

4907
05:06:27,120 --> 05:06:28,560
from the attackers

4908
05:06:28,560 --> 05:06:30,240
other than that

4909
05:06:30,240 --> 05:06:33,200
making use of git hooks like husky to

4910
05:06:33,200 --> 05:06:35,280
prevent yourself or anyone in your team

4911
05:06:35,280 --> 05:06:38,560
to even push secrets by mistake

4912
05:06:38,560 --> 05:06:40,400
also you can make use of walls like

4913
05:06:40,400 --> 05:06:42,240
hashicorp world to safely store all of

4914
05:06:42,240 --> 05:06:44,160
your secrets

4915
05:06:44,160 --> 05:06:46,240
most important of all is building a very

4916
05:06:46,240 --> 05:06:48,000
robust security pipeline so that your

4917
05:06:48,000 --> 05:06:50,638
application is secure from development

4918
05:06:50,638 --> 05:06:53,840
till the time you publish it

4919
05:06:54,878 --> 05:06:56,320
now i would like to discuss some of our

4920
05:06:56,320 --> 05:06:58,480
future plans till now our research was

4921
05:06:58,480 --> 05:06:59,760
more centered towards android

4922
05:06:59,760 --> 05:07:01,840
applications but in the future we aim to

4923
05:07:01,840 --> 05:07:03,520
expand our scope to include client-side

4924
05:07:03,520 --> 05:07:07,840
javascript and ios applications as well

4925
05:07:08,000 --> 05:07:10,878
lastly i would like to mention uh

4926
05:07:10,878 --> 05:07:12,000
a tool

4927
05:07:12,000 --> 05:07:14,638
which is the visual ocean cli

4928
05:07:14,638 --> 05:07:16,240
developed by us so that the community

4929
05:07:16,240 --> 05:07:18,080
can leverage the asset data extracted

4930
05:07:18,080 --> 05:07:20,560
after analyzing millions of mobile apps

4931
05:07:20,560 --> 05:07:22,480
if you want to try out for yourself and

4932
05:07:22,480 --> 05:07:24,320
see the security score of any mobile app

4933
05:07:24,320 --> 05:07:26,240
currently installed on your phone we

4934
05:07:26,240 --> 05:07:28,240
would encourage you to go to bvigil.com

4935
05:07:28,240 --> 05:07:31,360
and search for the app there

4936
05:07:31,840 --> 05:07:33,600
as you all know that the first steps

4937
05:07:33,600 --> 05:07:35,920
towards change is awareness

4938
05:07:35,920 --> 05:07:37,440
with that thought we invite any

4939
05:07:37,440 --> 05:07:42,039
questions that the audience might have

4940
05:07:45,600 --> 05:07:49,360
[Applause]

4941
05:07:49,360 --> 05:07:52,000
okay wonderful thank you very much

4942
05:07:52,000 --> 05:07:53,600
very interesting talk

4943
05:07:53,600 --> 05:07:55,760
any questions just come in front here

4944
05:07:55,760 --> 05:07:56,878
and

4945
05:07:56,878 --> 05:07:58,480
ask your question they should be able to

4946
05:07:58,480 --> 05:08:01,718
hear you

4947
05:08:06,480 --> 05:08:10,920
they are far away they can't bite you

4948
05:08:18,958 --> 05:08:22,239
i know everything about the project

4949
05:08:25,840 --> 05:08:28,080
okay

4950
05:08:28,320 --> 05:08:29,920
so still thank you very much for the

4951
05:08:29,920 --> 05:08:30,958
question

4952
05:08:30,958 --> 05:08:32,798
for the talk

4953
05:08:32,798 --> 05:08:33,840
and

4954
05:08:33,840 --> 05:08:36,878
do you have any contact information

4955
05:08:36,878 --> 05:08:38,240
or there should be contact information

4956
05:08:38,240 --> 05:08:40,080
on the website

4957
05:08:40,080 --> 05:08:43,280
if you have any additional questions

4958
05:08:43,280 --> 05:08:44,958
thanks a lot and enjoy the rest of the

4959
05:08:44,958 --> 05:08:47,958
day

4960
05:17:47,440 --> 05:17:49,520
you

