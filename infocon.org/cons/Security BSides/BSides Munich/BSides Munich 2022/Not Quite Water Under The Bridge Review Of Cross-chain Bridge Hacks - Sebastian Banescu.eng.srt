1
00:00:02,800 --> 00:00:04,160
production

2
00:00:04,160 --> 00:00:07,839
uh this uh talk is uh put together by

3
00:00:07,839 --> 00:00:09,920
some of my amazing colleagues listed

4
00:00:09,920 --> 00:00:10,880
here

5
00:00:10,880 --> 00:00:13,519
and i'm just sort of distributing the

6
00:00:13,519 --> 00:00:14,480
knowledge

7
00:00:14,480 --> 00:00:16,320
so a bit about myself i've been working

8
00:00:16,320 --> 00:00:19,039
in uh security since 2011

9
00:00:19,039 --> 00:00:22,080
held various roles at various companies

10
00:00:22,080 --> 00:00:24,400
and i've been in the uh blockchain smart

11
00:00:24,400 --> 00:00:28,480
contract auditing scene since uh 2018

12
00:00:28,480 --> 00:00:31,439
and it's been a hell of a ride

13
00:00:31,439 --> 00:00:34,399
um who i work for uh i work for quan

14
00:00:34,399 --> 00:00:35,920
stamp which is the company the logo

15
00:00:35,920 --> 00:00:37,200
there in the middle

16
00:00:37,200 --> 00:00:39,200
uh we're one of the leaders in

17
00:00:39,200 --> 00:00:41,760
smart contract and blockchain security

18
00:00:41,760 --> 00:00:43,360
we've secured

19
00:00:43,360 --> 00:00:46,079
more than 200 billion in

20
00:00:46,079 --> 00:00:49,039
assets and smart contracts we have

21
00:00:49,039 --> 00:00:50,640
a lot of clients

22
00:00:50,640 --> 00:00:52,239
a lot of revenue

23
00:00:52,239 --> 00:00:54,480
and most importantly we're hiring so

24
00:00:54,480 --> 00:00:56,480
stick around until my last slide that

25
00:00:56,480 --> 00:00:57,280
one

26
00:00:57,280 --> 00:00:58,800
has a very interesting piece of

27
00:00:58,800 --> 00:01:01,120
information on it

28
00:01:01,120 --> 00:01:03,760
so why is this talk relevant

29
00:01:03,760 --> 00:01:06,560
there's been a bunch of bridge hacks

30
00:01:06,560 --> 00:01:08,159
over the past

31
00:01:08,159 --> 00:01:09,040
year

32
00:01:09,040 --> 00:01:12,159
so just in 2022 alone there's been more

33
00:01:12,159 --> 00:01:14,799
than uh one billion worth of crypto

34
00:01:14,799 --> 00:01:16,560
assets stolen

35
00:01:16,560 --> 00:01:18,960
from such systems

36
00:01:18,960 --> 00:01:20,560
here are at least just a few of them the

37
00:01:20,560 --> 00:01:22,640
ones with the ones which are like most

38
00:01:22,640 --> 00:01:24,080
important

39
00:01:24,080 --> 00:01:26,560
and we're going go go through

40
00:01:26,560 --> 00:01:28,560
more details

41
00:01:28,560 --> 00:01:30,320
as to why these kind of things happen

42
00:01:30,320 --> 00:01:32,640
and why this kind of thing is so hard to

43
00:01:32,640 --> 00:01:35,600
get right from a security perspective

44
00:01:35,600 --> 00:01:36,960
so here's a bridge

45
00:01:36,960 --> 00:01:39,360
it's pretty simple like you'd say like

46
00:01:39,360 --> 00:01:41,600
why why the heck is this thing so hard

47
00:01:41,600 --> 00:01:43,600
to get right

48
00:01:43,600 --> 00:01:46,079
you have an actor

49
00:01:46,079 --> 00:01:48,320
on the left side you have

50
00:01:48,320 --> 00:01:51,119
a smart contract system like ethereum

51
00:01:51,119 --> 00:01:52,960
that it interacts with

52
00:01:52,960 --> 00:01:55,280
and it basically wants to send assets to

53
00:01:55,280 --> 00:01:57,600
a different chain

54
00:01:57,600 --> 00:01:59,119
and on the other end

55
00:01:59,119 --> 00:02:01,280
this actor or someone else might want to

56
00:02:01,280 --> 00:02:04,000
receive those assets

57
00:02:04,000 --> 00:02:05,920
denominated in something else on the

58
00:02:05,920 --> 00:02:07,439
other chain

59
00:02:07,439 --> 00:02:10,878
now this is like the essence of it

60
00:02:10,878 --> 00:02:12,000
the

61
00:02:12,000 --> 00:02:13,680
going into a bit more detail you see

62
00:02:13,680 --> 00:02:16,000
like when someone deposits like this

63
00:02:16,000 --> 00:02:18,480
actor on the left deposits maybe some

64
00:02:18,480 --> 00:02:20,080
ether

65
00:02:20,080 --> 00:02:22,400
it interacts with a smart contract

66
00:02:22,400 --> 00:02:24,480
called the custodian

67
00:02:24,480 --> 00:02:27,520
and there's a communicator in the middle

68
00:02:27,520 --> 00:02:30,480
which is an off-chain component

69
00:02:30,480 --> 00:02:31,920
it could be a traditional whatever

70
00:02:31,920 --> 00:02:33,440
server application

71
00:02:33,440 --> 00:02:35,200
that is watching

72
00:02:35,200 --> 00:02:38,080
what is happening on the chain

73
00:02:38,080 --> 00:02:40,080
once it sees that someone has deposited

74
00:02:40,080 --> 00:02:43,680
funds in this contract it initiates

75
00:02:43,680 --> 00:02:46,000
a debt issuance call

76
00:02:46,000 --> 00:02:48,239
to the debt issuer contract on a

77
00:02:48,239 --> 00:02:51,200
different chain and this depth issuer

78
00:02:51,200 --> 00:02:53,200
here on the right hand side

79
00:02:53,200 --> 00:02:54,640
it means some

80
00:02:54,640 --> 00:02:57,120
tokens which should be the equivalent of

81
00:02:57,120 --> 00:02:58,319
the ether

82
00:02:58,319 --> 00:03:01,200
that the first actor put in right

83
00:03:01,200 --> 00:03:03,440
so again pretty simple

84
00:03:03,440 --> 00:03:06,080
the opposite path so starting from right

85
00:03:06,080 --> 00:03:09,599
to left the actor wants to redeem back

86
00:03:09,599 --> 00:03:12,000
the ether deposited after having used it

87
00:03:12,000 --> 00:03:13,599
for some purpose

88
00:03:13,599 --> 00:03:14,959
so it

89
00:03:14,959 --> 00:03:17,840
burns these tokens that it got called ac

90
00:03:17,840 --> 00:03:18,720
eth

91
00:03:18,720 --> 00:03:20,400
it sends them to this debt issuer

92
00:03:20,400 --> 00:03:22,800
contract the communicator is also

93
00:03:22,800 --> 00:03:25,120
watching the debt issuer

94
00:03:25,120 --> 00:03:27,680
and when it sees that someone has burned

95
00:03:27,680 --> 00:03:30,000
these tokens it initiates the fund

96
00:03:30,000 --> 00:03:32,640
release on the custodian side so the

97
00:03:32,640 --> 00:03:35,440
actor should receive the corresponding

98
00:03:35,440 --> 00:03:37,920
amount of eth on the ethereum side so

99
00:03:37,920 --> 00:03:41,679
this is depositing and withdrawing

100
00:03:42,080 --> 00:03:42,879
now

101
00:03:42,879 --> 00:03:44,400
you notice from the previous slides the

102
00:03:44,400 --> 00:03:46,239
bridge structure contains like three

103
00:03:46,239 --> 00:03:47,760
main components

104
00:03:47,760 --> 00:03:49,200
two contracts

105
00:03:49,200 --> 00:03:51,920
which are the asset custodian the data

106
00:03:51,920 --> 00:03:52,959
source

107
00:03:52,959 --> 00:03:55,439
and the depth issuer oracle contract

108
00:03:55,439 --> 00:03:56,480
here

109
00:03:56,480 --> 00:03:59,280
and a communicator which is an offline

110
00:03:59,280 --> 00:04:01,439
off chain component

111
00:04:01,439 --> 00:04:04,400
which we call the oracle

112
00:04:04,400 --> 00:04:05,439
and there's

113
00:04:05,439 --> 00:04:08,159
therefore a huge attack surface

114
00:04:08,159 --> 00:04:09,840
when it comes to like

115
00:04:09,840 --> 00:04:10,959
the

116
00:04:10,959 --> 00:04:13,439
web free space so you have

117
00:04:13,439 --> 00:04:14,799
the custodian

118
00:04:14,799 --> 00:04:17,358
the depth issuer the communicator any

119
00:04:17,358 --> 00:04:19,358
interfaces that they use and the network

120
00:04:19,358 --> 00:04:21,680
itself they could all be subject to

121
00:04:21,680 --> 00:04:23,919
attacks and in the next slides we're

122
00:04:23,919 --> 00:04:26,800
going to go through examples of attacks

123
00:04:26,800 --> 00:04:29,520
for each of these layers

124
00:04:29,520 --> 00:04:31,199
and bear in mind that some of these

125
00:04:31,199 --> 00:04:33,040
attacks i won't name names because it's

126
00:04:33,040 --> 00:04:34,320
not

127
00:04:34,320 --> 00:04:37,600
professional but some of them are

128
00:04:37,600 --> 00:04:39,840
referring to the hacks that happen

129
00:04:39,840 --> 00:04:42,080
in the in the past the ones that are on

130
00:04:42,080 --> 00:04:43,040
the

131
00:04:43,040 --> 00:04:45,040
one of the previous slides

132
00:04:45,040 --> 00:04:46,720
so for the custodian

133
00:04:46,720 --> 00:04:48,320
we have something which is called the

134
00:04:48,320 --> 00:04:50,479
call relay attack

135
00:04:50,479 --> 00:04:53,600
and here depending on the bridge you

136
00:04:53,600 --> 00:04:56,560
might have this asset custody smart

137
00:04:56,560 --> 00:04:57,680
contract

138
00:04:57,680 --> 00:05:00,080
which is accessible by some privileged

139
00:05:00,080 --> 00:05:02,000
addresses because they need to manage

140
00:05:02,000 --> 00:05:05,440
them somehow and maybe maximize

141
00:05:05,440 --> 00:05:07,600
the the profit of the project or

142
00:05:07,600 --> 00:05:09,600
something so

143
00:05:09,600 --> 00:05:12,400
what the attacker goal in this case was

144
00:05:12,400 --> 00:05:14,720
was to take over

145
00:05:14,720 --> 00:05:16,880
this asset custody contract and be able

146
00:05:16,880 --> 00:05:18,320
to

147
00:05:18,320 --> 00:05:20,400
take funds out of it so the way in which

148
00:05:20,400 --> 00:05:22,720
they want they did that was that there

149
00:05:22,720 --> 00:05:25,600
was this function that was

150
00:05:25,600 --> 00:05:27,759
in the ascity asset custody smart

151
00:05:27,759 --> 00:05:29,120
contract called

152
00:05:29,120 --> 00:05:31,199
change custody address there at the

153
00:05:31,199 --> 00:05:33,280
arrow at the bottom

154
00:05:33,280 --> 00:05:35,759
and this function

155
00:05:35,759 --> 00:05:38,800
should not be callable from the outside

156
00:05:38,800 --> 00:05:40,400
so there should be some access control

157
00:05:40,400 --> 00:05:42,000
in place that prevents anyone from

158
00:05:42,000 --> 00:05:44,479
calling it

159
00:05:44,479 --> 00:05:45,280
but

160
00:05:45,280 --> 00:05:46,560
what the

161
00:05:46,560 --> 00:05:48,560
attack or like what any user would have

162
00:05:48,560 --> 00:05:50,320
would be allowed to do

163
00:05:50,320 --> 00:05:52,800
was that they were allowed to call

164
00:05:52,800 --> 00:05:55,440
functions of this form right there was a

165
00:05:55,440 --> 00:05:57,280
function name

166
00:05:57,280 --> 00:05:59,120
three parameters

167
00:05:59,120 --> 00:06:01,360
two byte strings and one unsigned

168
00:06:01,360 --> 00:06:03,919
integer on 64 bit

169
00:06:03,919 --> 00:06:06,400
so this was something that

170
00:06:06,400 --> 00:06:08,160
was deemed allowable from the access

171
00:06:08,160 --> 00:06:09,919
control policy because

172
00:06:09,919 --> 00:06:11,360
there were just

173
00:06:11,360 --> 00:06:13,120
one or two functions which were fine to

174
00:06:13,120 --> 00:06:15,280
be called by anyone

175
00:06:15,280 --> 00:06:16,479
now

176
00:06:16,479 --> 00:06:18,000
the nasty part

177
00:06:18,000 --> 00:06:20,000
is

178
00:06:20,000 --> 00:06:21,840
that the attacker

179
00:06:21,840 --> 00:06:23,199
found a way

180
00:06:23,199 --> 00:06:26,080
found a hash collision

181
00:06:26,080 --> 00:06:28,000
on some random name that they put

182
00:06:28,000 --> 00:06:30,960
together using this signature here so

183
00:06:30,960 --> 00:06:33,440
they just randomly compiled

184
00:06:33,440 --> 00:06:35,440
a function name and some parameter

185
00:06:35,440 --> 00:06:36,720
values

186
00:06:36,720 --> 00:06:39,360
which had a hash collision

187
00:06:39,360 --> 00:06:41,440
with this function name

188
00:06:41,440 --> 00:06:43,199
the way in which this contract in the

189
00:06:43,199 --> 00:06:45,280
middle here works this cross chain

190
00:06:45,280 --> 00:06:47,440
communication contract

191
00:06:47,440 --> 00:06:49,840
it whenever it says call this function

192
00:06:49,840 --> 00:06:52,240
it basically hashes the signature and

193
00:06:52,240 --> 00:06:54,880
looks it up in a hash table

194
00:06:54,880 --> 00:06:56,960
and due to this hash collision

195
00:06:56,960 --> 00:06:59,520
it was the attacker was able to

196
00:06:59,520 --> 00:07:01,039
figure out okay

197
00:07:01,039 --> 00:07:03,280
if i have this function well it's just a

198
00:07:03,280 --> 00:07:06,000
random name there but x x one two three

199
00:07:06,000 --> 00:07:08,400
and some parameter values is going to

200
00:07:08,400 --> 00:07:10,560
have a hash collision and i'm gonna be

201
00:07:10,560 --> 00:07:12,160
able to call this

202
00:07:12,160 --> 00:07:12,960
um

203
00:07:12,960 --> 00:07:14,639
function which i'm not supposed to call

204
00:07:14,639 --> 00:07:17,280
and change the owner of the asset

205
00:07:17,280 --> 00:07:19,440
custody to my own address and then i can

206
00:07:19,440 --> 00:07:21,919
just take the funds out

207
00:07:21,919 --> 00:07:25,280
so yeah that's that's one of the attacks

208
00:07:25,280 --> 00:07:27,360
moving on to another attack transaction

209
00:07:27,360 --> 00:07:28,400
replay

210
00:07:28,400 --> 00:07:31,199
it's again on the custodian and um

211
00:07:31,199 --> 00:07:33,360
depending on again the custodian the the

212
00:07:33,360 --> 00:07:35,280
bridge that is implementing

213
00:07:35,280 --> 00:07:38,000
you need to present proofs

214
00:07:38,000 --> 00:07:40,800
when withdrawing assets so this kind of

215
00:07:40,800 --> 00:07:42,319
markle proofs

216
00:07:42,319 --> 00:07:44,720
they get issued so let's let's go step

217
00:07:44,720 --> 00:07:47,120
by step the first step is that you

218
00:07:47,120 --> 00:07:50,000
deposit an asset to the custodian

219
00:07:50,000 --> 00:07:52,160
and in the second step the debt issuer

220
00:07:52,160 --> 00:07:54,639
sends you the debt token we've seen that

221
00:07:54,639 --> 00:07:56,000
on the uh

222
00:07:56,000 --> 00:07:58,479
original slide with depositing then

223
00:07:58,479 --> 00:08:00,639
withdrawing you do burning the debt

224
00:08:00,639 --> 00:08:03,039
token to the debt issuer and in this

225
00:08:03,039 --> 00:08:05,440
case the debt issuer gives you a proof

226
00:08:05,440 --> 00:08:07,759
that you can then go and send to the

227
00:08:07,759 --> 00:08:10,160
custodian and say here's the proof give

228
00:08:10,160 --> 00:08:12,879
me my money give me my tokens

229
00:08:12,879 --> 00:08:13,919
the

230
00:08:13,919 --> 00:08:16,080
the mistake in this case was that the

231
00:08:16,080 --> 00:08:18,400
verification of the proof

232
00:08:18,400 --> 00:08:20,240
uh didn't take into account one of the

233
00:08:20,240 --> 00:08:21,280
fields

234
00:08:21,280 --> 00:08:23,199
so the attacker was able to change one

235
00:08:23,199 --> 00:08:24,560
of the fields

236
00:08:24,560 --> 00:08:28,240
and resend the proof again and again

237
00:08:28,240 --> 00:08:30,000
it was a valid proof but it was

238
00:08:30,000 --> 00:08:32,399
different from the previous ones so for

239
00:08:32,399 --> 00:08:34,799
each replay the attacker got the same

240
00:08:34,799 --> 00:08:35,760
amount

241
00:08:35,760 --> 00:08:39,559
until it drained the custodian

242
00:08:40,000 --> 00:08:42,880
going on to the depth issuer so in case

243
00:08:42,880 --> 00:08:45,760
of the depth issuer the attacker goal

244
00:08:45,760 --> 00:08:47,839
would be to bypass the signature

245
00:08:47,839 --> 00:08:49,839
verification right

246
00:08:49,839 --> 00:08:51,120
and

247
00:08:51,120 --> 00:08:52,800
arbitrarily mint

248
00:08:52,800 --> 00:08:54,560
these tokens right

249
00:08:54,560 --> 00:08:56,719
so

250
00:08:56,880 --> 00:08:58,800
the attacker what what they did in this

251
00:08:58,800 --> 00:09:00,720
case it was again a very specific

252
00:09:00,720 --> 00:09:03,279
implementation of a bridge which

253
00:09:03,279 --> 00:09:05,839
received as an input parameter

254
00:09:05,839 --> 00:09:08,560
over here not sure you see my mouse yeah

255
00:09:08,560 --> 00:09:09,760
it received

256
00:09:09,760 --> 00:09:12,080
the signature verification contract

257
00:09:12,080 --> 00:09:14,320
address right so this was an input

258
00:09:14,320 --> 00:09:15,680
parameter

259
00:09:15,680 --> 00:09:17,760
but it should have been pretty fixed but

260
00:09:17,760 --> 00:09:19,120
this is the way in which the system

261
00:09:19,120 --> 00:09:20,480
worked

262
00:09:20,480 --> 00:09:22,399
they were just receiving this as an

263
00:09:22,399 --> 00:09:23,760
input parameter and of course this

264
00:09:23,760 --> 00:09:25,600
signature verification contract was

265
00:09:25,600 --> 00:09:26,640
unique

266
00:09:26,640 --> 00:09:28,480
it was a trusted component what the

267
00:09:28,480 --> 00:09:30,640
attacker did they deployed a fake

268
00:09:30,640 --> 00:09:32,399
verification contract

269
00:09:32,399 --> 00:09:34,080
and they passed that

270
00:09:34,080 --> 00:09:35,839
as an input parameter so this fake

271
00:09:35,839 --> 00:09:38,000
verification contract said it's always

272
00:09:38,000 --> 00:09:39,680
good whatever you do

273
00:09:39,680 --> 00:09:42,399
you pass the signature verification

274
00:09:42,399 --> 00:09:45,279
and this way the attacker was able to

275
00:09:45,279 --> 00:09:47,680
basically initiate these kind of

276
00:09:47,680 --> 00:09:49,200
withdrawals

277
00:09:49,200 --> 00:09:51,920
without or like this disminting without

278
00:09:51,920 --> 00:09:54,959
deposits without actually um

279
00:09:54,959 --> 00:09:58,320
depositing any money in the custodian

280
00:09:58,320 --> 00:10:00,959
moving on to the communicator layer

281
00:10:00,959 --> 00:10:01,839
there

282
00:10:01,839 --> 00:10:04,160
the attacker has the goal of tricking

283
00:10:04,160 --> 00:10:07,120
the communicator into forwarding invalid

284
00:10:07,120 --> 00:10:10,160
messages and minting tokens

285
00:10:10,160 --> 00:10:11,040
so

286
00:10:11,040 --> 00:10:13,120
for this particular attack

287
00:10:13,120 --> 00:10:15,040
the communicator

288
00:10:15,040 --> 00:10:17,200
was watching the custodian

289
00:10:17,200 --> 00:10:19,440
and was watching if someone deposits

290
00:10:19,440 --> 00:10:21,519
funds in the custodian there's an event

291
00:10:21,519 --> 00:10:22,880
which is emitted

292
00:10:22,880 --> 00:10:24,560
i'm going to check

293
00:10:24,560 --> 00:10:26,000
how much i should emit i'm going to

294
00:10:26,000 --> 00:10:27,839
check the address of the custodian is

295
00:10:27,839 --> 00:10:29,040
correct

296
00:10:29,040 --> 00:10:30,640
unfortunately

297
00:10:30,640 --> 00:10:33,600
for multiple withdrawals or like yeah

298
00:10:33,600 --> 00:10:36,320
for multiple it was looking only at the

299
00:10:36,320 --> 00:10:38,959
first event for the address of the

300
00:10:38,959 --> 00:10:40,720
contract which emitted it

301
00:10:40,720 --> 00:10:43,360
what an attacker did was they deployed a

302
00:10:43,360 --> 00:10:46,079
malicious contract which emits the same

303
00:10:46,079 --> 00:10:48,560
events it look the events look the same

304
00:10:48,560 --> 00:10:50,640
except for the fact that it's emitted by

305
00:10:50,640 --> 00:10:52,720
a different address

306
00:10:52,720 --> 00:10:54,640
the problem with the communicator it was

307
00:10:54,640 --> 00:10:56,240
only checking the address of the first

308
00:10:56,240 --> 00:10:57,200
event

309
00:10:57,200 --> 00:10:59,200
and then only looking for the other

310
00:10:59,200 --> 00:11:01,279
events that came afterwards so the

311
00:11:01,279 --> 00:11:03,760
attacker basically issued a bunch of

312
00:11:03,760 --> 00:11:05,920
fake events from these from this

313
00:11:05,920 --> 00:11:08,160
malicious contract and was able to

314
00:11:08,160 --> 00:11:11,279
uh drain yeah basically get a bunch of

315
00:11:11,279 --> 00:11:15,040
funds that they were not entitled to

316
00:11:15,040 --> 00:11:17,920
moving on to the interface level

317
00:11:17,920 --> 00:11:18,800
here

318
00:11:18,800 --> 00:11:20,240
there's a bunch of attacks which we're

319
00:11:20,240 --> 00:11:22,480
going to look on the first

320
00:11:22,480 --> 00:11:23,839
is

321
00:11:23,839 --> 00:11:26,480
you have this situation where

322
00:11:26,480 --> 00:11:28,720
a legitimate user here at the bottom has

323
00:11:28,720 --> 00:11:30,240
approved

324
00:11:30,240 --> 00:11:32,000
a contract

325
00:11:32,000 --> 00:11:34,160
to

326
00:11:34,160 --> 00:11:36,800
allow them to to basically

327
00:11:36,800 --> 00:11:39,200
um execute some some kind of

328
00:11:39,200 --> 00:11:40,640
function call

329
00:11:40,640 --> 00:11:43,600
for a particular token and this is quite

330
00:11:43,600 --> 00:11:44,640
broad

331
00:11:44,640 --> 00:11:46,720
so what an attacker did there was that

332
00:11:46,720 --> 00:11:47,600
they

333
00:11:47,600 --> 00:11:50,079
just crafted out of this execute call

334
00:11:50,079 --> 00:11:52,720
data generic function they just crafted

335
00:11:52,720 --> 00:11:56,160
okay transfer from user to me right so

336
00:11:56,160 --> 00:11:58,160
they were able just to

337
00:11:58,160 --> 00:11:59,760
easily craft

338
00:11:59,760 --> 00:12:02,000
this function call inside of the call

339
00:12:02,000 --> 00:12:02,959
data

340
00:12:02,959 --> 00:12:05,920
which led to of the legitimate users

341
00:12:05,920 --> 00:12:08,880
tokens being transferred to the attacker

342
00:12:08,880 --> 00:12:10,800
so the attacker could do this for

343
00:12:10,800 --> 00:12:13,440
multiple users who have approved

344
00:12:13,440 --> 00:12:14,880
um

345
00:12:14,880 --> 00:12:16,160
their wallet

346
00:12:16,160 --> 00:12:18,160
uh this this interface spending money

347
00:12:18,160 --> 00:12:20,560
from or funds from their wallet

348
00:12:20,560 --> 00:12:21,519
in

349
00:12:21,519 --> 00:12:23,360
a similar attack

350
00:12:23,360 --> 00:12:26,240
where again the user has approved a

351
00:12:26,240 --> 00:12:27,920
third-party

352
00:12:27,920 --> 00:12:29,680
contract for

353
00:12:29,680 --> 00:12:32,399
allowing people to deposit

354
00:12:32,399 --> 00:12:35,440
with permission basically here

355
00:12:35,440 --> 00:12:37,600
you're allowing someone to

356
00:12:37,600 --> 00:12:40,240
spend money in your name

357
00:12:40,240 --> 00:12:42,480
it should only be meant for tokens which

358
00:12:42,480 --> 00:12:44,720
implement this feature but there are

359
00:12:44,720 --> 00:12:46,720
tokens which do not implement this

360
00:12:46,720 --> 00:12:50,160
feature and do not give any

361
00:12:50,160 --> 00:12:51,360
warning

362
00:12:51,360 --> 00:12:53,680
as to the fact that this function called

363
00:12:53,680 --> 00:12:54,880
failed

364
00:12:54,880 --> 00:12:56,720
so if someone calls this function

365
00:12:56,720 --> 00:12:58,560
deposit with permit

366
00:12:58,560 --> 00:13:00,480
into this contract it's just not going

367
00:13:00,480 --> 00:13:01,839
to say anything

368
00:13:01,839 --> 00:13:03,760
it's not going to return anything and

369
00:13:03,760 --> 00:13:04,959
the error

370
00:13:04,959 --> 00:13:06,560
was in this

371
00:13:06,560 --> 00:13:09,120
third-party contract where they did not

372
00:13:09,120 --> 00:13:11,040
check the return value so they didn't

373
00:13:11,040 --> 00:13:11,839
check

374
00:13:11,839 --> 00:13:13,920
that the return value is explicitly

375
00:13:13,920 --> 00:13:16,639
successful they just assumed that if it

376
00:13:16,639 --> 00:13:18,720
doesn't complain then it's successful

377
00:13:18,720 --> 00:13:21,839
right so missing uh return value

378
00:13:21,839 --> 00:13:23,120
validation

379
00:13:23,120 --> 00:13:25,440
and this way the attacker was just able

380
00:13:25,440 --> 00:13:27,920
to say like hey i'm going to deposit all

381
00:13:27,920 --> 00:13:28,880
of these

382
00:13:28,880 --> 00:13:31,440
funds from the legitimate user into my

383
00:13:31,440 --> 00:13:33,519
account and that's how they got away

384
00:13:33,519 --> 00:13:35,920
with all the funds from legitimate users

385
00:13:35,920 --> 00:13:38,320
who approved

386
00:13:38,320 --> 00:13:40,320
finally the network layer

387
00:13:40,320 --> 00:13:42,000
this is something that hasn't yet

388
00:13:42,000 --> 00:13:43,360
happened but

389
00:13:43,360 --> 00:13:45,680
might happen in the future

390
00:13:45,680 --> 00:13:48,320
there is this thing called the 51 attack

391
00:13:48,320 --> 00:13:51,839
which allows you to reorganize blocks

392
00:13:51,839 --> 00:13:52,720
and

393
00:13:52,720 --> 00:13:56,160
what you can do is launch such an attack

394
00:13:56,160 --> 00:13:58,399
on a level one chain

395
00:13:58,399 --> 00:14:00,240
then you deposit assets to that

396
00:14:00,240 --> 00:14:02,959
custodian contract and you receive the

397
00:14:02,959 --> 00:14:04,639
debt token

398
00:14:04,639 --> 00:14:07,760
afterwards you take that debt token

399
00:14:07,760 --> 00:14:10,000
and withdraw those funds

400
00:14:10,000 --> 00:14:12,160
out of an exchange or something you

401
00:14:12,160 --> 00:14:14,800
withdraw them transform them into

402
00:14:14,800 --> 00:14:17,600
fiat or dollars or whatever

403
00:14:17,600 --> 00:14:20,399
and finally you cancel that deposit

404
00:14:20,399 --> 00:14:22,800
transaction in step two because you now

405
00:14:22,800 --> 00:14:25,519
can reorganize the chain right

406
00:14:25,519 --> 00:14:27,680
and depending on how long

407
00:14:27,680 --> 00:14:30,079
these steps this withdrawal process

408
00:14:30,079 --> 00:14:31,199
takes

409
00:14:31,199 --> 00:14:33,360
you could afford to pay for such an

410
00:14:33,360 --> 00:14:36,000
attack because one hour of such a 51

411
00:14:36,000 --> 00:14:38,639
attack on the ethereum main net is

412
00:14:38,639 --> 00:14:42,000
somewhere between 1.5 and 2 million

413
00:14:42,000 --> 00:14:44,320
if there are sufficient funds an

414
00:14:44,320 --> 00:14:46,079
attacker might be incentivized to

415
00:14:46,079 --> 00:14:47,839
actually pay this

416
00:14:47,839 --> 00:14:50,079
for a certain amount of hours depending

417
00:14:50,079 --> 00:14:53,199
on how fast the bridge enables someone

418
00:14:53,199 --> 00:14:54,880
to transfer funds to deposit and

419
00:14:54,880 --> 00:14:57,120
withdraw

420
00:14:57,120 --> 00:14:59,839
so in summary there's a lot of

421
00:14:59,839 --> 00:15:01,199
bad things that could happen with

422
00:15:01,199 --> 00:15:02,560
bridges

423
00:15:02,560 --> 00:15:06,560
we saw things on the custodian layer

424
00:15:06,560 --> 00:15:09,839
we saw things on the depth issuer layer

425
00:15:09,839 --> 00:15:11,600
i'm not going to go into all of these

426
00:15:11,600 --> 00:15:13,519
but basically

427
00:15:13,519 --> 00:15:15,199
you might have recognized that these are

428
00:15:15,199 --> 00:15:17,199
not totally different from your

429
00:15:17,199 --> 00:15:19,680
classical security mistakes like missing

430
00:15:19,680 --> 00:15:21,680
input validation

431
00:15:21,680 --> 00:15:23,680
not checking return values and so on

432
00:15:23,680 --> 00:15:24,959
right

433
00:15:24,959 --> 00:15:27,519
the communicator layer is this off-chain

434
00:15:27,519 --> 00:15:30,160
component which is basically watching

435
00:15:30,160 --> 00:15:32,480
and triggering smart contracts on both

436
00:15:32,480 --> 00:15:33,519
sides

437
00:15:33,519 --> 00:15:35,759
and there's a many things that could go

438
00:15:35,759 --> 00:15:37,759
wrong we only went into one or two

439
00:15:37,759 --> 00:15:40,079
things in this presentation but there's

440
00:15:40,079 --> 00:15:42,079
a longer list and probably it's not

441
00:15:42,079 --> 00:15:43,680
exhaustive

442
00:15:43,680 --> 00:15:45,360
there's the interface

443
00:15:45,360 --> 00:15:46,800
where

444
00:15:46,800 --> 00:15:48,720
basically it's not necessarily bridge

445
00:15:48,720 --> 00:15:50,160
specific but

446
00:15:50,160 --> 00:15:51,440
there's a lot of things that could go

447
00:15:51,440 --> 00:15:53,680
wrong with allowing people to

448
00:15:53,680 --> 00:15:56,240
deposit in someone else's name

449
00:15:56,240 --> 00:15:58,639
or allowing external contract calls and

450
00:15:58,639 --> 00:16:00,399
then finally the network layer there's

451
00:16:00,399 --> 00:16:03,279
the 51 attack but there could be other

452
00:16:03,279 --> 00:16:06,079
problems as well

453
00:16:07,199 --> 00:16:09,680
finally just want to say we're hiring we

454
00:16:09,680 --> 00:16:12,399
offer great packages and if you're

455
00:16:12,399 --> 00:16:14,399
interested in this kind of stuff finding

456
00:16:14,399 --> 00:16:16,959
bugs and smart contracts we'd be happy

457
00:16:16,959 --> 00:16:18,720
to to

458
00:16:18,720 --> 00:16:20,240
get in touch with you

459
00:16:20,240 --> 00:16:22,220
thanks so much

460
00:16:22,220 --> 00:16:30,240
[Applause]

461
00:16:30,240 --> 00:16:32,320
so do we have any questions for

462
00:16:32,320 --> 00:16:35,199
sebastian that we have a runner coming

463
00:16:35,199 --> 00:16:37,839
forward

464
00:16:39,839 --> 00:16:42,240
so it looks like a lot of stuff you

465
00:16:42,240 --> 00:16:43,440
mentioned is like you said input

466
00:16:43,440 --> 00:16:46,079
validation stuff like that that could be

467
00:16:46,079 --> 00:16:47,600
remediated with

468
00:16:47,600 --> 00:16:50,959
like good programming practices um is my

469
00:16:50,959 --> 00:16:52,720
assumption correct that if you do all

470
00:16:52,720 --> 00:16:54,800
these correct then the problem is the

471
00:16:54,800 --> 00:16:57,279
custodian and you there's no way to do

472
00:16:57,279 --> 00:16:59,120
that one trustless because it is off

473
00:16:59,120 --> 00:17:00,000
chain

474
00:17:00,000 --> 00:17:00,800
so

475
00:17:00,800 --> 00:17:02,720
can we ever get rid of and not the

476
00:17:02,720 --> 00:17:04,799
communicator because that is option is

477
00:17:04,799 --> 00:17:07,520
there ever way to make that component

478
00:17:07,520 --> 00:17:11,520
trustless as well or will that always be

479
00:17:11,520 --> 00:17:14,079
a linchpin in the entire setup how and

480
00:17:14,079 --> 00:17:15,760
there's no way to secure it even if all

481
00:17:15,760 --> 00:17:17,520
the rest is perfect

482
00:17:17,520 --> 00:17:19,599
yeah that's a very good question thanks

483
00:17:19,599 --> 00:17:20,640
so

484
00:17:20,640 --> 00:17:22,720
this architecture which we've mainly

485
00:17:22,720 --> 00:17:24,640
looked at during this talk

486
00:17:24,640 --> 00:17:27,520
is something which is being used

487
00:17:27,520 --> 00:17:29,840
generally right now there are projects

488
00:17:29,840 --> 00:17:32,640
out there which are taking a totally

489
00:17:32,640 --> 00:17:34,320
different approach they don't use this

490
00:17:34,320 --> 00:17:36,720
architecture they use something else

491
00:17:36,720 --> 00:17:37,919
where they don't have this kind of

492
00:17:37,919 --> 00:17:39,919
trusted off-chain component

493
00:17:39,919 --> 00:17:40,799
and

494
00:17:40,799 --> 00:17:42,480
well those kind of things are not yet in

495
00:17:42,480 --> 00:17:45,520
production but they are working towards

496
00:17:45,520 --> 00:17:46,960
a solution

497
00:17:46,960 --> 00:17:48,559
which does not does not have this kind

498
00:17:48,559 --> 00:17:50,799
of um trusted

499
00:17:50,799 --> 00:17:53,520
third party which is off chain all right

500
00:17:53,520 --> 00:17:54,960
if you want we could i can give you more

501
00:17:54,960 --> 00:17:57,360
more details uh in the break and another

502
00:17:57,360 --> 00:17:59,600
question if i may um sure for example in

503
00:17:59,600 --> 00:18:01,280
in terms of web applications we have

504
00:18:01,280 --> 00:18:03,039
stuff like ports rig academy do you have

505
00:18:03,039 --> 00:18:04,559
equivalents for like if you want to

506
00:18:04,559 --> 00:18:06,480
learn about smart contract blockchain is

507
00:18:06,480 --> 00:18:08,799
there any like playgrounds that are easy

508
00:18:08,799 --> 00:18:10,320
to get into for someone that is not

509
00:18:10,320 --> 00:18:12,240
familiar yet totally yeah there are

510
00:18:12,240 --> 00:18:16,000
multiple actually there's things like um

511
00:18:16,000 --> 00:18:18,240
well i'll call them offline ctfs because

512
00:18:18,240 --> 00:18:20,240
they are always going on right you just

513
00:18:20,240 --> 00:18:22,480
have like a playground where there are

514
00:18:22,480 --> 00:18:24,400
some contracts that you can just

515
00:18:24,400 --> 00:18:26,720
exploit toy contracts

516
00:18:26,720 --> 00:18:28,480
and there's like multiple

517
00:18:28,480 --> 00:18:30,720
um difficulty challenges right and

518
00:18:30,720 --> 00:18:32,080
there's

519
00:18:32,080 --> 00:18:33,360
like things like you know damn

520
00:18:33,360 --> 00:18:35,039
vulnerable linux sure yeah there's

521
00:18:35,039 --> 00:18:37,520
something like that for smart contracts

522
00:18:37,520 --> 00:18:40,880
or google damn vulnerable ethereum or

523
00:18:40,880 --> 00:18:42,880
yeah then damn vulnerable defy it's

524
00:18:42,880 --> 00:18:45,120
called yeah yeah so um

525
00:18:45,120 --> 00:18:46,880
there's there's all these kind of things

526
00:18:46,880 --> 00:18:49,760
and also there are training programs

527
00:18:49,760 --> 00:18:51,360
free of charge

528
00:18:51,360 --> 00:18:52,400
because

529
00:18:52,400 --> 00:18:55,520
there's so much interest in um getting

530
00:18:55,520 --> 00:18:58,160
more security experts in this field that

531
00:18:58,160 --> 00:19:00,320
people are no longer charging for

532
00:19:00,320 --> 00:19:02,080
training

533
00:19:02,080 --> 00:19:04,160
everything is sponsored by all these

534
00:19:04,160 --> 00:19:07,039
projects which have suffered such hacks

535
00:19:07,039 --> 00:19:08,480
and and like the amount that they need

536
00:19:08,480 --> 00:19:10,320
to sponsor these academies is nothing

537
00:19:10,320 --> 00:19:11,840
compared to the amount that they could

538
00:19:11,840 --> 00:19:12,799
lose

539
00:19:12,799 --> 00:19:14,400
so everything is like sort of free of

540
00:19:14,400 --> 00:19:15,919
charge so you can pick it up really

541
00:19:15,919 --> 00:19:17,280
easily

542
00:19:17,280 --> 00:19:18,880
okay thanks

543
00:19:18,880 --> 00:19:21,280
thank you

544
00:19:21,760 --> 00:19:25,720
please come up with your question

545
00:19:38,000 --> 00:19:40,559
hello uh for someone that is completely

546
00:19:40,559 --> 00:19:43,039
new to this type of hacking i have a

547
00:19:43,039 --> 00:19:43,919
question

548
00:19:43,919 --> 00:19:46,880
how much of hacking smart contracts and

549
00:19:46,880 --> 00:19:49,520
and blockchain and cryptos

550
00:19:49,520 --> 00:19:50,720
is about

551
00:19:50,720 --> 00:19:52,880
actually cryptography and how much is

552
00:19:52,880 --> 00:19:55,760
about more of these type of logic

553
00:19:55,760 --> 00:19:57,760
books

554
00:19:57,760 --> 00:19:59,840
that's a good question um

555
00:19:59,840 --> 00:20:02,240
i think

556
00:20:02,480 --> 00:20:04,880
probably more than 95 percent is about

557
00:20:04,880 --> 00:20:06,400
this okay

558
00:20:06,400 --> 00:20:08,559
and probably like five percent is about

559
00:20:08,559 --> 00:20:10,240
the crypto because

560
00:20:10,240 --> 00:20:11,039
um

561
00:20:11,039 --> 00:20:12,880
the actual cryptography which is being

562
00:20:12,880 --> 00:20:14,159
used

563
00:20:14,159 --> 00:20:17,440
that is being actively researched by

564
00:20:17,440 --> 00:20:18,320
um

565
00:20:18,320 --> 00:20:21,280
many research groups at top universities

566
00:20:21,280 --> 00:20:23,280
and and many of the world's

567
00:20:23,280 --> 00:20:24,960
leading cryptographers

568
00:20:24,960 --> 00:20:26,720
so the actual

569
00:20:26,720 --> 00:20:28,159
hash functions

570
00:20:28,159 --> 00:20:29,360
encryption

571
00:20:29,360 --> 00:20:30,159
um

572
00:20:30,159 --> 00:20:32,799
proofs and so on everything

573
00:20:32,799 --> 00:20:35,200
is based on many many years of research

574
00:20:35,200 --> 00:20:36,480
from

575
00:20:36,480 --> 00:20:38,000
universities

576
00:20:38,000 --> 00:20:40,880
and now we're just like working at

577
00:20:40,880 --> 00:20:43,600
implementing applications on top of that

578
00:20:43,600 --> 00:20:46,640
okay so we can say something like

579
00:20:46,640 --> 00:20:48,400
if you'll invest more time there

580
00:20:48,400 --> 00:20:51,360
learning about solidity you are uh doing

581
00:20:51,360 --> 00:20:53,840
a very better investment that by

582
00:20:53,840 --> 00:20:56,320
learning i don't know cryptology

583
00:20:56,320 --> 00:20:57,919
something like that

584
00:20:57,919 --> 00:20:59,760
um

585
00:20:59,760 --> 00:21:03,120
depends right um if you're a brilliant

586
00:21:03,120 --> 00:21:05,039
cryptographer and you might invent

587
00:21:05,039 --> 00:21:07,360
something amazing i'm not

588
00:21:07,360 --> 00:21:09,679
then it might be worth doing that but i

589
00:21:09,679 --> 00:21:10,799
think like if

590
00:21:10,799 --> 00:21:12,080
you don't want to do that then

591
00:21:12,080 --> 00:21:14,400
definitely learning something like the

592
00:21:14,400 --> 00:21:16,159
solidity or other programming languages

593
00:21:16,159 --> 00:21:17,919
being used for smart contracts is a very

594
00:21:17,919 --> 00:21:18,640
good

595
00:21:18,640 --> 00:21:20,640
return on investment okay thank you

596
00:21:20,640 --> 00:21:22,960
thank you

597
00:21:26,240 --> 00:21:29,720
any other questions

598
00:21:36,880 --> 00:21:38,880
uh yeah so i have a bit of a

599
00:21:38,880 --> 00:21:41,200
controversial question so your company

600
00:21:41,200 --> 00:21:43,200
is like doing these audits for the

601
00:21:43,200 --> 00:21:44,799
contracts

602
00:21:44,799 --> 00:21:46,960
so you're making money by doing the

603
00:21:46,960 --> 00:21:50,000
audits and stuff but like i've read this

604
00:21:50,000 --> 00:21:51,520
idea that

605
00:21:51,520 --> 00:21:54,320
it's something like a bit like a reverse

606
00:21:54,320 --> 00:21:56,080
but bounty scheme

607
00:21:56,080 --> 00:21:58,080
because in the end there is an incentive

608
00:21:58,080 --> 00:21:59,200
for you

609
00:21:59,200 --> 00:22:01,440
to keep like some kind of bug in the

610
00:22:01,440 --> 00:22:02,799
contract

611
00:22:02,799 --> 00:22:05,840
and then in a blackhead form exploited

612
00:22:05,840 --> 00:22:08,000
so you know what i mean yeah i do i do

613
00:22:08,000 --> 00:22:10,080
totally and so it gets philosophical in

614
00:22:10,080 --> 00:22:12,320
everything but like you're part of the

615
00:22:12,320 --> 00:22:13,840
industry

616
00:22:13,840 --> 00:22:14,799
and

617
00:22:14,799 --> 00:22:16,720
what is your

618
00:22:16,720 --> 00:22:19,360
thinking about this how this could

619
00:22:19,360 --> 00:22:20,559
improve

620
00:22:20,559 --> 00:22:23,840
in a way where it's better for everyone

621
00:22:23,840 --> 00:22:26,640
like your auditors can do your job

622
00:22:26,640 --> 00:22:28,480
others can do their job and everybody

623
00:22:28,480 --> 00:22:31,919
can trust the thing in the end yeah no

624
00:22:31,919 --> 00:22:35,120
that's a very good question thanks so

625
00:22:35,120 --> 00:22:37,679
i think it's always this kind of

626
00:22:37,679 --> 00:22:40,559
trust issue when you're working with a

627
00:22:40,559 --> 00:22:43,120
security service provider

628
00:22:43,120 --> 00:22:45,840
it's not specific to the space it could

629
00:22:45,840 --> 00:22:48,480
be like when you're pen testing a web

630
00:22:48,480 --> 00:22:51,440
application right for any company right

631
00:22:51,440 --> 00:22:53,600
you might withhold some kind of

632
00:22:53,600 --> 00:22:55,360
attack that you can then

633
00:22:55,360 --> 00:22:57,120
use to exploit of course like maybe in

634
00:22:57,120 --> 00:23:00,080
web 2 the damage you do is not directly

635
00:23:00,080 --> 00:23:02,320
financial but it's reputation damage or

636
00:23:02,320 --> 00:23:03,360
so on

637
00:23:03,360 --> 00:23:05,600
but basically the idea is that

638
00:23:05,600 --> 00:23:07,360
what we're doing

639
00:23:07,360 --> 00:23:09,200
if we were doing that if we were would

640
00:23:09,200 --> 00:23:10,799
be withholding

641
00:23:10,799 --> 00:23:13,200
and exploiting

642
00:23:13,200 --> 00:23:15,280
there would be a huge reputation damage

643
00:23:15,280 --> 00:23:17,360
to the company itself and it would cease

644
00:23:17,360 --> 00:23:18,480
to exist

645
00:23:18,480 --> 00:23:19,840
right

646
00:23:19,840 --> 00:23:20,799
we

647
00:23:20,799 --> 00:23:23,600
are well in relative terms a young

648
00:23:23,600 --> 00:23:25,520
company like we've been around for five

649
00:23:25,520 --> 00:23:26,640
years

650
00:23:26,640 --> 00:23:28,400
and we have a reputation

651
00:23:28,400 --> 00:23:30,400
for being one of the best

652
00:23:30,400 --> 00:23:32,799
so if you have a like the longer your

653
00:23:32,799 --> 00:23:35,120
time span is and just keep in mind the

654
00:23:35,120 --> 00:23:37,919
oldest auditing companies in this space

655
00:23:37,919 --> 00:23:39,600
are like five six years old so there's

656
00:23:39,600 --> 00:23:40,640
no

657
00:23:40,640 --> 00:23:42,559
uh there's no others which are like have

658
00:23:42,559 --> 00:23:43,279
been

659
00:23:43,279 --> 00:23:45,520
around for longer doing this specific

660
00:23:45,520 --> 00:23:47,200
thing there's been there's companies who

661
00:23:47,200 --> 00:23:49,279
have pivoted from doing traditional

662
00:23:49,279 --> 00:23:51,840
security to smart contract audits and

663
00:23:51,840 --> 00:23:53,360
they have been around for longer they

664
00:23:53,360 --> 00:23:55,360
have a longer track record but

665
00:23:55,360 --> 00:23:57,760
definitely this kind of track record and

666
00:23:57,760 --> 00:23:59,760
knowing that the company has been around

667
00:23:59,760 --> 00:24:01,440
for longer

668
00:24:01,440 --> 00:24:03,919
helps with this kind of trust issue

669
00:24:03,919 --> 00:24:05,440
because if

670
00:24:05,440 --> 00:24:07,840
let's say you somehow manage to

671
00:24:07,840 --> 00:24:09,919
um trick someone

672
00:24:09,919 --> 00:24:11,520
in trusting you

673
00:24:11,520 --> 00:24:13,840
and you do this kind of thing you you

674
00:24:13,840 --> 00:24:16,559
withhold an export you exploit it

675
00:24:16,559 --> 00:24:18,720
probably in a few months to a year your

676
00:24:18,720 --> 00:24:20,400
company is no longer going to be trusted

677
00:24:20,400 --> 00:24:21,919
by anyone because

678
00:24:21,919 --> 00:24:24,480
your audits always get hacked you know

679
00:24:24,480 --> 00:24:25,360
what i mean

680
00:24:25,360 --> 00:24:27,039
so that's what i think the way to

681
00:24:27,039 --> 00:24:30,440
balance this

682
00:24:33,279 --> 00:24:36,799
okay any other questions

683
00:24:39,120 --> 00:24:40,960
okay i have

684
00:24:40,960 --> 00:24:43,120
a curiosity question

685
00:24:43,120 --> 00:24:46,159
so suppose i wanted to exchange a large

686
00:24:46,159 --> 00:24:47,919
sum of money and i knew it was going to

687
00:24:47,919 --> 00:24:51,120
be a cross blockchain kind of exchange

688
00:24:51,120 --> 00:24:53,279
um should i just avoid that altogether

689
00:24:53,279 --> 00:24:56,400
or what can i do as a consumer of this

690
00:24:56,400 --> 00:24:58,480
entire process

691
00:24:58,480 --> 00:25:00,400
definitely get advice

692
00:25:00,400 --> 00:25:02,640
from professionals

693
00:25:02,640 --> 00:25:04,480
and don't just do it

694
00:25:04,480 --> 00:25:05,760
um

695
00:25:05,760 --> 00:25:07,919
sort of on your own because there are

696
00:25:07,919 --> 00:25:10,320
way more problems sort of attacks

697
00:25:10,320 --> 00:25:13,360
economic attacks that someone could

698
00:25:13,360 --> 00:25:14,559
use

699
00:25:14,559 --> 00:25:15,840
to

700
00:25:15,840 --> 00:25:18,080
do an arbitrage on something that you're

701
00:25:18,080 --> 00:25:20,240
doing right so if you're exchanging one

702
00:25:20,240 --> 00:25:22,240
token for another

703
00:25:22,240 --> 00:25:24,480
you have a lot of parameters which might

704
00:25:24,480 --> 00:25:26,720
be like the margin that you're

705
00:25:26,720 --> 00:25:29,600
willing to lose in the exchange and if

706
00:25:29,600 --> 00:25:32,000
you don't properly set that margin

707
00:25:32,000 --> 00:25:34,080
you might end up

708
00:25:34,080 --> 00:25:36,080
being arbitraged by

709
00:25:36,080 --> 00:25:38,000
there's an army of bots out there just

710
00:25:38,000 --> 00:25:40,400
looking for these kind of opportunities

711
00:25:40,400 --> 00:25:43,440
so definitely ask someone

712
00:25:43,440 --> 00:25:45,120
for these kind of settings right and

713
00:25:45,120 --> 00:25:47,600
then like this is in addition to all the

714
00:25:47,600 --> 00:25:49,360
security issues that might be there

715
00:25:49,360 --> 00:25:50,080
right

716
00:25:50,080 --> 00:25:50,880
so

717
00:25:50,880 --> 00:25:52,880
i'm not saying there are definitely ways

718
00:25:52,880 --> 00:25:55,200
to do that i've done well i don't i

719
00:25:55,200 --> 00:25:56,960
didn't transfer large sums of money but

720
00:25:56,960 --> 00:25:58,640
i've done that myself

721
00:25:58,640 --> 00:26:00,720
with no

722
00:26:00,720 --> 00:26:03,120
let's say issues afterwards right so

723
00:26:03,120 --> 00:26:06,000
it's possible but you really need to to

724
00:26:06,000 --> 00:26:08,240
uh be careful because like we've just

725
00:26:08,240 --> 00:26:11,120
presented let's say i don't know six

726
00:26:11,120 --> 00:26:12,400
seven hacks

727
00:26:12,400 --> 00:26:14,159
but keep in mind there are like dozens

728
00:26:14,159 --> 00:26:16,159
and dozens of bridges and some of them

729
00:26:16,159 --> 00:26:18,240
have never been hacked yeah

730
00:26:18,240 --> 00:26:20,400
exchanges exchanges on their set

731
00:26:20,400 --> 00:26:22,159
themselves are bridges as well they're

732
00:26:22,159 --> 00:26:23,679
just a different type of bridge they're

733
00:26:23,679 --> 00:26:24,720
not from

734
00:26:24,720 --> 00:26:26,720
chain to chain they're from

735
00:26:26,720 --> 00:26:29,919
bank account to chain

736
00:26:31,679 --> 00:26:32,799
super

737
00:26:32,799 --> 00:26:36,000
any other questions then

738
00:26:36,480 --> 00:26:38,400
all right thank you so much sebastian

739
00:26:38,400 --> 00:26:41,559
thank you

