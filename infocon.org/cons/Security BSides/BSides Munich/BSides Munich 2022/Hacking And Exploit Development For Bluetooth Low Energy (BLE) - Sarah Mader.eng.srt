1
00:00:03,919 --> 00:00:06,000
uh hello everybody and welcome to my

2
00:00:06,000 --> 00:00:08,960
talk uh hacking like exploit development

3
00:00:08,960 --> 00:00:10,800
for bluetooth low energy

4
00:00:10,800 --> 00:00:13,280
let me first introduce myself my name is

5
00:00:13,280 --> 00:00:15,440
sargamada i'm a security analyst at

6
00:00:15,440 --> 00:00:17,199
inside attack logic whereby my main

7
00:00:17,199 --> 00:00:19,760
fields are iot and hardware hacking web

8
00:00:19,760 --> 00:00:22,480
network printer penetration test as well

9
00:00:22,480 --> 00:00:25,519
as the bluetooth technology

10
00:00:25,519 --> 00:00:28,320
a few words to my company

11
00:00:28,320 --> 00:00:30,800
inside attack logic was founded 2014 in

12
00:00:30,800 --> 00:00:32,399
munich where we also have our

13
00:00:32,399 --> 00:00:34,559
headquarter we are doing mainly

14
00:00:34,559 --> 00:00:38,640
offensive security so uh

15
00:00:39,200 --> 00:00:41,760
red and purple teaming penetration test

16
00:00:41,760 --> 00:00:45,280
as well as security consulting so

17
00:00:45,280 --> 00:00:47,680
bluetooth low energy what is this do we

18
00:00:47,680 --> 00:00:50,559
need this is this important

19
00:00:50,559 --> 00:00:52,800
if you have a look at this diagram which

20
00:00:52,800 --> 00:00:55,039
is provided by the bluetooth stick the

21
00:00:55,039 --> 00:00:56,879
special interest group

22
00:00:56,879 --> 00:00:59,120
in the yearly market update um this

23
00:00:59,120 --> 00:01:01,039
bluetooth special interest group is

24
00:01:01,039 --> 00:01:02,800
responsible for publishing and

25
00:01:02,800 --> 00:01:06,000
maintaining the bluetooth specification

26
00:01:06,000 --> 00:01:07,680
and if we look at this diagram then we

27
00:01:07,680 --> 00:01:10,560
can see that the estimate a total of

28
00:01:10,560 --> 00:01:13,200
nearly of over 5 billion bluetooth low

29
00:01:13,200 --> 00:01:15,840
energy devices in 2022

30
00:01:15,840 --> 00:01:17,360
and if you compare this to the world

31
00:01:17,360 --> 00:01:18,720
population

32
00:01:18,720 --> 00:01:20,360
which is uh over

33
00:01:20,360 --> 00:01:24,159
7.9 billion people then probably it's

34
00:01:24,159 --> 00:01:26,720
quite an interesting topic and most of

35
00:01:26,720 --> 00:01:28,560
you

36
00:01:28,560 --> 00:01:30,640
at least have a smartphone which i

37
00:01:30,640 --> 00:01:32,960
assume to be bluetooth

38
00:01:32,960 --> 00:01:34,799
capable

39
00:01:34,799 --> 00:01:35,759
so

40
00:01:35,759 --> 00:01:39,320
what about security

41
00:01:43,600 --> 00:01:45,600
we can divide the vulnerabilities in

42
00:01:45,600 --> 00:01:48,000
bluetooth and for categories there are

43
00:01:48,000 --> 00:01:50,799
general flaws which relate to every

44
00:01:50,799 --> 00:01:53,360
wireless protocol as also wi-fi for

45
00:01:53,360 --> 00:01:55,040
example

46
00:01:55,040 --> 00:01:55,920
so

47
00:01:55,920 --> 00:01:58,079
everyone can send packets over the air

48
00:01:58,079 --> 00:02:00,479
so jamming a connection and denial of

49
00:02:00,479 --> 00:02:03,759
service attacks are very easy to realize

50
00:02:03,759 --> 00:02:04,799
the next

51
00:02:04,799 --> 00:02:06,560
big problem is

52
00:02:06,560 --> 00:02:09,199
our configuration issue so simplified

53
00:02:09,199 --> 00:02:10,639
that

54
00:02:10,639 --> 00:02:12,480
if you do not use any encryption then

55
00:02:12,480 --> 00:02:14,959
it's probably not secure

56
00:02:14,959 --> 00:02:16,319
um

57
00:02:16,319 --> 00:02:19,200
a big problem from for this protocol

58
00:02:19,200 --> 00:02:22,480
itself are design issues um in the

59
00:02:22,480 --> 00:02:24,720
beginning of the protocol you might

60
00:02:24,720 --> 00:02:27,360
already have heard about uh

61
00:02:27,360 --> 00:02:29,840
the talk from mike ryan with low energy

62
00:02:29,840 --> 00:02:31,760
comes low security

63
00:02:31,760 --> 00:02:33,760
um so the earlier version did not

64
00:02:33,760 --> 00:02:36,560
provide any security in the pairing at

65
00:02:36,560 --> 00:02:38,080
all

66
00:02:38,080 --> 00:02:40,319
it's still in the newer versions which

67
00:02:40,319 --> 00:02:41,040
uh

68
00:02:41,040 --> 00:02:43,440
try to uh

69
00:02:43,440 --> 00:02:46,400
we will come to this uh soon

70
00:02:46,400 --> 00:02:48,879
still in the newer versions many

71
00:02:48,879 --> 00:02:50,720
vulnerabilities were discovered and

72
00:02:50,720 --> 00:02:53,120
published and i think the

73
00:02:53,120 --> 00:02:55,760
last one was at the end of the

74
00:02:55,760 --> 00:02:59,440
of last year which i known about

75
00:02:59,440 --> 00:03:01,200
and finally we have implementation

76
00:03:01,200 --> 00:03:03,760
issues and implementation issues can

77
00:03:03,760 --> 00:03:07,040
lead to very serious vulnerabilities of

78
00:03:07,040 --> 00:03:09,280
there's one very impressive example the

79
00:03:09,280 --> 00:03:11,040
bleeding bit

80
00:03:11,040 --> 00:03:13,440
vulnerability which was discovered by

81
00:03:13,440 --> 00:03:17,120
the armistice army's research lab

82
00:03:17,120 --> 00:03:20,159
and hereby the researchers detected and

83
00:03:20,159 --> 00:03:23,360
heap-based buffer overflow and the

84
00:03:23,360 --> 00:03:25,840
handling of advertising package which

85
00:03:25,840 --> 00:03:29,280
lead to code execution and finally could

86
00:03:29,280 --> 00:03:30,840
lead to network

87
00:03:30,840 --> 00:03:33,760
compromise of the connected

88
00:03:33,760 --> 00:03:36,319
wi-fi network

89
00:03:36,319 --> 00:03:37,840
i added the

90
00:03:37,840 --> 00:03:41,280
sources for reference

91
00:03:41,280 --> 00:03:43,920
so getting started if you start with

92
00:03:43,920 --> 00:03:46,400
bluetooth low energy you might

93
00:03:46,400 --> 00:03:47,920
you have at first the bluetooth

94
00:03:47,920 --> 00:03:49,599
specification

95
00:03:49,599 --> 00:03:51,920
which is a very large document the

96
00:03:51,920 --> 00:03:53,760
bluetooth specification the newest

97
00:03:53,760 --> 00:03:58,560
version 5.3 is over 3000 pages large and

98
00:03:58,560 --> 00:04:02,080
is quite overwhelming if you start

99
00:04:02,080 --> 00:04:04,319
nevertheless we have not the time to

100
00:04:04,319 --> 00:04:07,040
dive in that deep today but i will give

101
00:04:07,040 --> 00:04:09,280
a short overview of the

102
00:04:09,280 --> 00:04:10,239
of the

103
00:04:10,239 --> 00:04:12,080
techniques we need for the for the later

104
00:04:12,080 --> 00:04:13,360
exploit

105
00:04:13,360 --> 00:04:15,680
after this we will discuss a tech

106
00:04:15,680 --> 00:04:17,759
scenario have an overview of the mirage

107
00:04:17,759 --> 00:04:20,160
framework which i prefer to use for my

108
00:04:20,160 --> 00:04:22,079
exploit development

109
00:04:22,079 --> 00:04:25,280
i have here some implementation details

110
00:04:25,280 --> 00:04:26,320
and

111
00:04:26,320 --> 00:04:28,479
finally we have our demonstration and

112
00:04:28,479 --> 00:04:31,440
the conclusion

113
00:04:31,680 --> 00:04:34,000
if you start with bluetooth uh you have

114
00:04:34,000 --> 00:04:36,320
at first to know that bluetooth has its

115
00:04:36,320 --> 00:04:39,280
own protocol stack the protocol stack is

116
00:04:39,280 --> 00:04:43,840
hereby divided into hosted controller

117
00:04:44,000 --> 00:04:45,919
the host layers are marquis and blue are

118
00:04:45,919 --> 00:04:48,720
regularly implemented in the

119
00:04:48,720 --> 00:04:51,840
host operation system or your smartphone

120
00:04:51,840 --> 00:04:54,720
and the controller layers are separated

121
00:04:54,720 --> 00:04:57,759
in hardware so if you think for example

122
00:04:57,759 --> 00:04:59,040
um

123
00:04:59,040 --> 00:05:00,960
the easiest example here is if you have

124
00:05:00,960 --> 00:05:03,680
a bluetooth usb dongle then the control

125
00:05:03,680 --> 00:05:05,840
controller layers will be in this will

126
00:05:05,840 --> 00:05:07,840
be implemented in this normal and the

127
00:05:07,840 --> 00:05:09,520
host layers are implemented in the host

128
00:05:09,520 --> 00:05:11,759
operation system the host controller

129
00:05:11,759 --> 00:05:13,680
interface is then

130
00:05:13,680 --> 00:05:17,280
implemented or realized via usb and my

131
00:05:17,280 --> 00:05:19,919
also other

132
00:05:19,919 --> 00:05:22,240
interfaces are possible

133
00:05:22,240 --> 00:05:24,160
the most important layers for us here

134
00:05:24,160 --> 00:05:26,880
are the probably the security manager

135
00:05:26,880 --> 00:05:29,280
the security manager is responsible for

136
00:05:29,280 --> 00:05:32,160
the security bluetooth

137
00:05:32,160 --> 00:05:34,560
mainly for establishing a long-term key

138
00:05:34,560 --> 00:05:37,520
and further distributing

139
00:05:37,520 --> 00:05:40,320
encryption keys or for example

140
00:05:40,320 --> 00:05:43,520
at keys for address resolution

141
00:05:43,520 --> 00:05:45,840
and the second layer which is involved

142
00:05:45,840 --> 00:05:48,000
in security is the link layer which uses

143
00:05:48,000 --> 00:05:50,400
this uh previously

144
00:05:50,400 --> 00:05:55,198
established key for the final encryption

145
00:05:56,479 --> 00:05:58,800
so we can summarize the connection set

146
00:05:58,800 --> 00:06:00,880
up as follows

147
00:06:00,880 --> 00:06:02,240
we have always

148
00:06:02,240 --> 00:06:03,440
two

149
00:06:03,440 --> 00:06:06,000
or the most cases we have two parties in

150
00:06:06,000 --> 00:06:08,720
the protocol the master slave device the

151
00:06:08,720 --> 00:06:10,400
master device is

152
00:06:10,400 --> 00:06:13,600
usually your smartphone or your computer

153
00:06:13,600 --> 00:06:15,440
and the slave device are peripheral

154
00:06:15,440 --> 00:06:18,000
devices as for example keyboards or

155
00:06:18,000 --> 00:06:20,720
smart light bulbs or any other

156
00:06:20,720 --> 00:06:24,080
smart iot product

157
00:06:24,400 --> 00:06:27,440
this slave devices send advertisements

158
00:06:27,440 --> 00:06:29,199
to make itself

159
00:06:29,199 --> 00:06:32,080
discoverable for the master device

160
00:06:32,080 --> 00:06:34,000
and the master device will then scan for

161
00:06:34,000 --> 00:06:38,080
this advertisement and if it's uh

162
00:06:38,080 --> 00:06:40,639
if this is the correct slave device to

163
00:06:40,639 --> 00:06:42,560
connect and the connection requests are

164
00:06:42,560 --> 00:06:45,680
sent and the connection on the

165
00:06:45,680 --> 00:06:47,440
physical uh

166
00:06:47,440 --> 00:06:49,759
layers are established

167
00:06:49,759 --> 00:06:51,280
and

168
00:06:51,280 --> 00:06:53,440
after this we have a service discovery

169
00:06:53,440 --> 00:06:55,520
so every slave device offers services

170
00:06:55,520 --> 00:06:58,000
for the host for the master device

171
00:06:58,000 --> 00:07:00,000
to use

172
00:07:00,000 --> 00:07:03,520
and if one of both devices decides that

173
00:07:03,520 --> 00:07:05,280
it requires a

174
00:07:05,280 --> 00:07:07,440
higher security then the pairing process

175
00:07:07,440 --> 00:07:10,319
can be started

176
00:07:10,639 --> 00:07:14,160
so pairing a bluetooth

177
00:07:14,720 --> 00:07:15,599
has

178
00:07:15,599 --> 00:07:17,759
depends on

179
00:07:17,759 --> 00:07:20,000
at first on the version of the protocol

180
00:07:20,000 --> 00:07:22,080
or of the

181
00:07:22,080 --> 00:07:22,960
of the

182
00:07:22,960 --> 00:07:26,560
hardware which is which version is uh

183
00:07:26,560 --> 00:07:28,400
the hardware is capable of

184
00:07:28,400 --> 00:07:30,720
and the other factor are input in and

185
00:07:30,720 --> 00:07:32,639
output capabilities in and output

186
00:07:32,639 --> 00:07:34,960
capabilities are for example displays or

187
00:07:34,960 --> 00:07:36,960
keyboards

188
00:07:36,960 --> 00:07:39,919
um the earlier versions were the legacy

189
00:07:39,919 --> 00:07:43,520
pairing so 4.0 and 4.1

190
00:07:43,520 --> 00:07:46,080
here we have just works pesky entry and

191
00:07:46,080 --> 00:07:48,000
out of bad pairing

192
00:07:48,000 --> 00:07:50,720
out of band pairing we won't discuss it

193
00:07:50,720 --> 00:07:52,319
today because out of band is everything

194
00:07:52,319 --> 00:07:54,000
but it's not using bluetooth at a

195
00:07:54,000 --> 00:07:55,759
protocol

196
00:07:55,759 --> 00:07:58,879
just works pairing as the name says uh

197
00:07:58,879 --> 00:08:02,160
just works so the user has no further

198
00:08:02,160 --> 00:08:04,400
here's no further interaction from the

199
00:08:04,400 --> 00:08:05,919
user required

200
00:08:05,919 --> 00:08:08,400
and for pass key entry

201
00:08:08,400 --> 00:08:10,639
uh at least one device with a keyboard

202
00:08:10,639 --> 00:08:12,560
and one device is a display

203
00:08:12,560 --> 00:08:14,960
is necessary so here

204
00:08:14,960 --> 00:08:17,520
the display device will present a pin

205
00:08:17,520 --> 00:08:19,199
code you

206
00:08:19,199 --> 00:08:21,440
i assume you already know this procedure

207
00:08:21,440 --> 00:08:25,039
if you paired a bluetooth device earlier

208
00:08:25,039 --> 00:08:27,520
and on the keyboard device you have to

209
00:08:27,520 --> 00:08:30,479
insert this pin to finish the pairing

210
00:08:30,479 --> 00:08:31,759
process

211
00:08:31,759 --> 00:08:34,479
uh this legacy pairing is very broken

212
00:08:34,479 --> 00:08:36,799
and i already mentioned the talk with

213
00:08:36,799 --> 00:08:39,120
low energy comes low security and should

214
00:08:39,120 --> 00:08:41,039
no longer be used

215
00:08:41,039 --> 00:08:44,560
with version 4.2 the cq connection

216
00:08:44,560 --> 00:08:46,480
feature was

217
00:08:46,480 --> 00:08:47,760
introduced

218
00:08:47,760 --> 00:08:50,320
secure connections are based on an

219
00:08:50,320 --> 00:08:54,560
elliptic curve tiffy helman key exchange

220
00:08:54,560 --> 00:08:56,800
and also offered adjust works and pass

221
00:08:56,800 --> 00:08:58,320
key entry

222
00:08:58,320 --> 00:09:00,080
pairing as well as out of band and

223
00:09:00,080 --> 00:09:02,240
additionally here we have the numeric

224
00:09:02,240 --> 00:09:05,839
comparison pairing or numeric comparison

225
00:09:05,839 --> 00:09:08,160
means that on we have two devices with a

226
00:09:08,160 --> 00:09:10,080
display and the both devices the same

227
00:09:10,080 --> 00:09:13,040
pin will be presented and if the user

228
00:09:13,040 --> 00:09:14,880
compares this pins it verifies that the

229
00:09:14,880 --> 00:09:16,560
pins are identical then the pairing is

230
00:09:16,560 --> 00:09:17,920
complete

231
00:09:17,920 --> 00:09:19,760
here we have to set the

232
00:09:19,760 --> 00:09:22,399
have to say that just works pairing

233
00:09:22,399 --> 00:09:24,959
is an unauthenticated pairing so that

234
00:09:24,959 --> 00:09:26,640
just works parent

235
00:09:26,640 --> 00:09:28,640
has no protection for many of the middle

236
00:09:28,640 --> 00:09:30,240
attacks

237
00:09:30,240 --> 00:09:32,560
okay so

238
00:09:32,560 --> 00:09:35,200
uh reversals are very good in bluetooth

239
00:09:35,200 --> 00:09:38,080
hacking so we have to do something other

240
00:09:38,080 --> 00:09:39,360
funny

241
00:09:39,360 --> 00:09:41,360
and

242
00:09:41,360 --> 00:09:43,440
what is uh

243
00:09:43,440 --> 00:09:45,519
widely accepted are these bluetooth

244
00:09:45,519 --> 00:09:47,760
keyboards and i have to stately that

245
00:09:47,760 --> 00:09:49,760
this is not manufacturer related it's

246
00:09:49,760 --> 00:09:51,440
just an example

247
00:09:51,440 --> 00:09:52,720
this is um

248
00:09:52,720 --> 00:09:56,000
this flaw relates to the to to the

249
00:09:56,000 --> 00:09:57,600
specific

250
00:09:57,600 --> 00:09:59,680
service specification so in this case

251
00:09:59,680 --> 00:10:02,240
the human interface device service

252
00:10:02,240 --> 00:10:05,440
and what we can do here um we can

253
00:10:05,440 --> 00:10:07,120
man in the middle such a bluetooth

254
00:10:07,120 --> 00:10:09,360
keyboard and turn the legitimate

255
00:10:09,360 --> 00:10:11,120
keyboard into an

256
00:10:11,120 --> 00:10:11,839
uh

257
00:10:11,839 --> 00:10:14,160
rubber ducky device if we do not know

258
00:10:14,160 --> 00:10:16,000
what a rubber ducky is a rubber duck is

259
00:10:16,000 --> 00:10:18,880
a malicious usb stick is once plugged in

260
00:10:18,880 --> 00:10:22,320
and the victim's computer is able to

261
00:10:22,320 --> 00:10:25,120
lock or inject keystrokes to execute

262
00:10:25,120 --> 00:10:27,600
commands

263
00:10:27,600 --> 00:10:29,920
so for our example we

264
00:10:29,920 --> 00:10:31,519
will

265
00:10:31,519 --> 00:10:34,079
refer to the rubber ducky

266
00:10:34,079 --> 00:10:36,800
language the ducky script and try to

267
00:10:36,800 --> 00:10:39,279
exploit the victim computer with a very

268
00:10:39,279 --> 00:10:40,720
simple

269
00:10:40,720 --> 00:10:42,720
example which just pops up the

270
00:10:42,720 --> 00:10:45,720
calculator

271
00:10:46,000 --> 00:10:46,800
so

272
00:10:46,800 --> 00:10:47,839
to

273
00:10:47,839 --> 00:10:50,160
achieve this man in the middle

274
00:10:50,160 --> 00:10:52,399
situation we have multiple options the

275
00:10:52,399 --> 00:10:55,760
first options is already stated we

276
00:10:55,760 --> 00:10:57,760
try to use the just works pairing which

277
00:10:57,760 --> 00:11:00,399
is unauthenticated and man in the middle

278
00:11:00,399 --> 00:11:03,040
setup is very easy

279
00:11:03,040 --> 00:11:04,640
to establish

280
00:11:04,640 --> 00:11:07,120
for this the attacker requires two usb

281
00:11:07,120 --> 00:11:10,720
uh two bluetooth dongles uh one for the

282
00:11:10,720 --> 00:11:12,640
connections with the slave device and

283
00:11:12,640 --> 00:11:14,079
one for the connection with the master

284
00:11:14,079 --> 00:11:15,920
device

285
00:11:15,920 --> 00:11:19,360
and the attacker will present

286
00:11:19,360 --> 00:11:22,560
to both directions that has neither in

287
00:11:22,560 --> 00:11:26,079
nor output capabilities and as a result

288
00:11:26,079 --> 00:11:28,560
the just works pairing will be used

289
00:11:28,560 --> 00:11:32,720
if the if the devices accept this

290
00:11:32,720 --> 00:11:35,120
the second option is if you say okay i

291
00:11:35,120 --> 00:11:36,800
know downgraded text i would never

292
00:11:36,800 --> 00:11:39,680
connect my keyword if i have if i do not

293
00:11:39,680 --> 00:11:41,760
have to insert my pin code then we have

294
00:11:41,760 --> 00:11:43,680
a second option with the human interface

295
00:11:43,680 --> 00:11:46,160
device service

296
00:11:46,160 --> 00:11:48,959
and this scenario we first pair with the

297
00:11:48,959 --> 00:11:52,240
slave device with the just works pairing

298
00:11:52,240 --> 00:11:54,160
the keyboard

299
00:11:54,160 --> 00:11:56,720
often doesn't have the requirement to

300
00:11:56,720 --> 00:11:59,920
do an authenticated pairing process

301
00:11:59,920 --> 00:12:02,639
and then we pair with the bus we've

302
00:12:02,639 --> 00:12:04,720
spoofed the device wait for the master

303
00:12:04,720 --> 00:12:06,959
to connect and allow the passkey entry

304
00:12:06,959 --> 00:12:08,480
pairing because we say okay we're a

305
00:12:08,480 --> 00:12:10,399
keyboard we have

306
00:12:10,399 --> 00:12:12,240
input capabilities

307
00:12:12,240 --> 00:12:14,880
and as soon as the victim inserts the

308
00:12:14,880 --> 00:12:17,279
pin on the master presented pin to the

309
00:12:17,279 --> 00:12:19,440
keyboard it will be sent to our attacker

310
00:12:19,440 --> 00:12:22,240
device because as regular keystrokes and

311
00:12:22,240 --> 00:12:24,240
therefore we can use these keystrokes

312
00:12:24,240 --> 00:12:27,680
for the pesky entry pairing

313
00:12:28,079 --> 00:12:30,240
so what do we need for this attack we

314
00:12:30,240 --> 00:12:32,639
need two usb dongles i prefer to use the

315
00:12:32,639 --> 00:12:34,760
nrf

316
00:12:34,760 --> 00:12:38,079
58420 dongles they cost around about 10

317
00:12:38,079 --> 00:12:39,839
euro and are supported by many

318
00:12:39,839 --> 00:12:41,839
frameworks and are therefore very

319
00:12:41,839 --> 00:12:43,440
flexible

320
00:12:43,440 --> 00:12:44,399
um

321
00:12:44,399 --> 00:12:48,800
i use them with the cpu project

322
00:12:48,800 --> 00:12:50,560
here we have an host controller

323
00:12:50,560 --> 00:12:55,599
interface usb sample which is at the end

324
00:12:57,279 --> 00:12:59,920
bluetooth usb dongle done if you want to

325
00:12:59,920 --> 00:13:01,200
say it like this

326
00:13:01,200 --> 00:13:03,120
for the host layers i like to use the

327
00:13:03,120 --> 00:13:05,760
mirage framework the mirage framework is

328
00:13:05,760 --> 00:13:08,959
very complex but also very flexible

329
00:13:08,959 --> 00:13:11,518
a devil

330
00:13:12,160 --> 00:13:14,880
fit does fit the needs for the bluetooth

331
00:13:14,880 --> 00:13:18,880
protocol which is also very complex

332
00:13:18,880 --> 00:13:21,279
so as the auto states the mirage

333
00:13:21,279 --> 00:13:22,959
framework is a powerful and modular

334
00:13:22,959 --> 00:13:24,800
framework dedicated to the security

335
00:13:24,800 --> 00:13:27,519
analysis of wireless communications

336
00:13:27,519 --> 00:13:29,760
the python framework is

337
00:13:29,760 --> 00:13:30,720
supports

338
00:13:30,720 --> 00:13:32,959
multiple protocols for example bluetooth

339
00:13:32,959 --> 00:13:36,800
slow energy wi-fi zigbee or infrared

340
00:13:36,800 --> 00:13:39,120
and

341
00:13:40,240 --> 00:13:43,760
we have a closer look here

342
00:13:43,760 --> 00:13:45,920
the miraf framework has

343
00:13:45,920 --> 00:13:48,399
several components there are at one side

344
00:13:48,399 --> 00:13:50,800
the core component components

345
00:13:50,800 --> 00:13:51,760
which

346
00:13:51,760 --> 00:13:54,800
are necessary for configuration loading

347
00:13:54,800 --> 00:13:57,199
and execution of modules

348
00:13:57,199 --> 00:13:59,839
we have the internal libraries whereby

349
00:13:59,839 --> 00:14:02,320
the bluetooth low energy stack is

350
00:14:02,320 --> 00:14:04,320
implemented for example

351
00:14:04,320 --> 00:14:05,440
and

352
00:14:05,440 --> 00:14:07,760
we have modules and scenarios

353
00:14:07,760 --> 00:14:09,199
we will focus on the modules and

354
00:14:09,199 --> 00:14:12,079
scenarios today

355
00:14:12,720 --> 00:14:14,639
modules offer

356
00:14:14,639 --> 00:14:17,600
the possibility to implement a specific

357
00:14:17,600 --> 00:14:19,760
attack for example demand in the middle

358
00:14:19,760 --> 00:14:21,519
attack

359
00:14:21,519 --> 00:14:22,800
and

360
00:14:22,800 --> 00:14:26,240
can be used by multiple scenarios to to

361
00:14:26,240 --> 00:14:28,240
adjust this attack to our needs so we

362
00:14:28,240 --> 00:14:30,160
have one module and multiple scenarios

363
00:14:30,160 --> 00:14:32,959
and can easily

364
00:14:33,440 --> 00:14:35,360
modify this man in the middle attack to

365
00:14:35,360 --> 00:14:37,839
our needs

366
00:14:38,800 --> 00:14:40,079
to do so

367
00:14:40,079 --> 00:14:42,079
we have to define

368
00:14:42,079 --> 00:14:43,040
a

369
00:14:43,040 --> 00:14:45,680
scenario signals in the module

370
00:14:45,680 --> 00:14:48,480
that means every scenario signals stands

371
00:14:48,480 --> 00:14:50,560
for a packet that the module might

372
00:14:50,560 --> 00:14:51,519
receive

373
00:14:51,519 --> 00:14:54,160
in this example the packet is called say

374
00:14:54,160 --> 00:14:55,279
hello

375
00:14:55,279 --> 00:14:57,519
and if the scenario

376
00:14:57,519 --> 00:14:59,839
want to overwrite

377
00:14:59,839 --> 00:15:02,480
send out this method or this packet and

378
00:15:02,480 --> 00:15:04,399
it would have would have to overwrite

379
00:15:04,399 --> 00:15:07,360
the hello world method

380
00:15:07,519 --> 00:15:09,600
additionally we can control if the

381
00:15:09,600 --> 00:15:11,360
module code is executed so if the

382
00:15:11,360 --> 00:15:14,240
scenario signal signal method returns

383
00:15:14,240 --> 00:15:15,839
true then the module code is also

384
00:15:15,839 --> 00:15:18,720
executed and if the scenario signal

385
00:15:18,720 --> 00:15:20,959
returns false then the module code will

386
00:15:20,959 --> 00:15:23,439
be skipped

387
00:15:23,519 --> 00:15:26,480
to create a module in mirage we can use

388
00:15:26,480 --> 00:15:30,079
the command option create module

389
00:15:30,079 --> 00:15:33,120
this will create a following template

390
00:15:33,120 --> 00:15:35,440
here we have two methods which are very

391
00:15:35,440 --> 00:15:37,680
self-explanatory i think we have init

392
00:15:37,680 --> 00:15:38,560
which

393
00:15:38,560 --> 00:15:40,800
initializes the module here the most

394
00:15:40,800 --> 00:15:42,240
important thing to note are the

395
00:15:42,240 --> 00:15:44,399
arguments so we can pass some command

396
00:15:44,399 --> 00:15:47,199
line arguments to our execution

397
00:15:47,199 --> 00:15:49,360
most important for example the target

398
00:15:49,360 --> 00:15:51,279
device address

399
00:15:51,279 --> 00:15:53,360
and host controller interfaces which are

400
00:15:53,360 --> 00:15:55,920
used by the module

401
00:15:55,920 --> 00:15:58,000
and we have the run method which is used

402
00:15:58,000 --> 00:15:59,199
for the

403
00:15:59,199 --> 00:16:01,600
final module code

404
00:16:01,600 --> 00:16:04,160
so since the model for this specific

405
00:16:04,160 --> 00:16:06,160
example the secure connections man in

406
00:16:06,160 --> 00:16:07,440
the middle model

407
00:16:07,440 --> 00:16:08,399
is very

408
00:16:08,399 --> 00:16:12,160
large and also complex and i also had to

409
00:16:12,160 --> 00:16:13,920
implement the cryptography for the

410
00:16:13,920 --> 00:16:15,680
secure connection

411
00:16:15,680 --> 00:16:17,920
a mirage we cannot cover this in detail

412
00:16:17,920 --> 00:16:19,920
here but i will give an overview what

413
00:16:19,920 --> 00:16:22,160
the model does

414
00:16:22,160 --> 00:16:23,600
so at first

415
00:16:23,600 --> 00:16:26,000
the attacker will initializes both

416
00:16:26,000 --> 00:16:27,600
bluetooth devices

417
00:16:27,600 --> 00:16:29,839
to bluetooth interfaces

418
00:16:29,839 --> 00:16:31,440
and

419
00:16:31,440 --> 00:16:33,040
scan for the

420
00:16:33,040 --> 00:16:36,160
first for the provided slave device for

421
00:16:36,160 --> 00:16:37,120
the

422
00:16:37,120 --> 00:16:38,880
bluetooth device address

423
00:16:38,880 --> 00:16:41,920
and tries to connect earlier than our

424
00:16:41,920 --> 00:16:44,880
original master device

425
00:16:44,880 --> 00:16:46,959
after this happens the

426
00:16:46,959 --> 00:16:48,959
most devices are blocked because slave

427
00:16:48,959 --> 00:16:51,360
devices usually are only capable of

428
00:16:51,360 --> 00:16:54,320
holding one connection at one time

429
00:16:54,320 --> 00:16:55,600
and

430
00:16:55,600 --> 00:16:58,240
a legitimate master is no longer able to

431
00:16:58,240 --> 00:17:00,880
detect the slave device

432
00:17:00,880 --> 00:17:02,880
after this we clone the slave device

433
00:17:02,880 --> 00:17:05,119
wait for the master to connect

434
00:17:05,119 --> 00:17:06,640
and

435
00:17:06,640 --> 00:17:08,559
pair with both sides

436
00:17:08,559 --> 00:17:10,959
depending on the scenario and the

437
00:17:10,959 --> 00:17:12,799
requirements

438
00:17:12,799 --> 00:17:15,199
after this the middle setup is complete

439
00:17:15,199 --> 00:17:17,280
and the module is only forwarding

440
00:17:17,280 --> 00:17:19,039
package from master to slave and from

441
00:17:19,039 --> 00:17:21,919
slave to master

442
00:17:21,919 --> 00:17:23,599
so we will have now a

443
00:17:23,599 --> 00:17:26,240
deeper look into the scenario

444
00:17:26,240 --> 00:17:28,079
the scenario can be created nearly the

445
00:17:28,079 --> 00:17:30,559
same way here we have three methods on

446
00:17:30,559 --> 00:17:33,520
start on end on key

447
00:17:33,520 --> 00:17:35,919
on start and on end are very

448
00:17:35,919 --> 00:17:39,120
explanatory again on starts is executed

449
00:17:39,120 --> 00:17:40,799
when the model starts and on end is

450
00:17:40,799 --> 00:17:43,360
executed when the module ends and on key

451
00:17:43,360 --> 00:17:47,919
is executed if any key on the attacker

452
00:17:47,919 --> 00:17:50,880
keyboard is pressed

453
00:17:50,960 --> 00:17:53,280
so

454
00:17:55,200 --> 00:17:57,919
since we want to

455
00:17:57,919 --> 00:18:00,720
pass our human interface device

456
00:18:00,720 --> 00:18:01,520
key

457
00:18:01,520 --> 00:18:02,960
keys to

458
00:18:02,960 --> 00:18:05,039
to lock to lock the

459
00:18:05,039 --> 00:18:07,760
final user input to console

460
00:18:07,760 --> 00:18:09,919
and also we have to

461
00:18:09,919 --> 00:18:12,080
pass our ducky script here we will do

462
00:18:12,080 --> 00:18:14,960
this in our start method

463
00:18:14,960 --> 00:18:17,039
the mirage framework provides a ducky

464
00:18:17,039 --> 00:18:19,200
script parser function which is very

465
00:18:19,200 --> 00:18:20,640
comfortable

466
00:18:20,640 --> 00:18:23,919
so we can provide our file here and have

467
00:18:23,919 --> 00:18:26,160
for callbacks which i will explain on

468
00:18:26,160 --> 00:18:29,520
the next slide on and can hear by be

469
00:18:29,520 --> 00:18:31,840
ignored very trivial

470
00:18:31,840 --> 00:18:34,400
and on key just says if we press the

471
00:18:34,400 --> 00:18:36,240
escape key then we enter this module and

472
00:18:36,240 --> 00:18:38,000
if we press one we want to inject our

473
00:18:38,000 --> 00:18:40,559
ducky script to the to the establishment

474
00:18:40,559 --> 00:18:43,840
in the middle connection

475
00:18:44,240 --> 00:18:46,160
the best way to explain this method is

476
00:18:46,160 --> 00:18:48,720
if you compare this to our ducky script

477
00:18:48,720 --> 00:18:51,120
so at first you have to add keystrokes

478
00:18:51,120 --> 00:18:53,039
method which is

479
00:18:53,039 --> 00:18:56,960
most important so here we have um

480
00:18:56,960 --> 00:19:00,240
so for human interface interface devices

481
00:19:00,240 --> 00:19:03,120
um the

482
00:19:03,440 --> 00:19:05,600
it works as follows the so if you press

483
00:19:05,600 --> 00:19:07,520
the key on your keyboard then

484
00:19:07,520 --> 00:19:09,840
the sticker will be sent for the key and

485
00:19:09,840 --> 00:19:11,200
if you release the key that the

486
00:19:11,200 --> 00:19:14,000
keystroke release message will be

487
00:19:14,000 --> 00:19:14,799
sent

488
00:19:14,799 --> 00:19:17,200
and what is most important here is the

489
00:19:17,200 --> 00:19:19,919
timing so if you are too fast or if you

490
00:19:19,919 --> 00:19:21,919
are sending our keys

491
00:19:21,919 --> 00:19:24,799
or messages too fast then some of our

492
00:19:24,799 --> 00:19:26,960
keys will be skipped and if we are too

493
00:19:26,960 --> 00:19:30,240
slow then the user can see every single

494
00:19:30,240 --> 00:19:32,799
letter appearing on the on the screen

495
00:19:32,799 --> 00:19:35,039
which is a bit obvious

496
00:19:35,039 --> 00:19:36,880
um

497
00:19:36,880 --> 00:19:39,600
in the packet list just is the array add

498
00:19:39,600 --> 00:19:42,480
delay adds the delay or is for the delay

499
00:19:42,480 --> 00:19:44,799
parameter of our ducky script and add

500
00:19:44,799 --> 00:19:47,200
text is for the text

501
00:19:47,200 --> 00:19:49,039
for the string parameter of our ducky

502
00:19:49,039 --> 00:19:53,840
script so one last thing to do

503
00:19:53,840 --> 00:19:56,400
since you want to lock our

504
00:19:56,400 --> 00:19:59,039
keystrokes we have to overwrite the

505
00:19:59,039 --> 00:20:01,520
enslave handle value notification

506
00:20:01,520 --> 00:20:03,200
packet

507
00:20:03,200 --> 00:20:04,640
in bluetooth

508
00:20:04,640 --> 00:20:06,559
these keystrokes are sent via

509
00:20:06,559 --> 00:20:08,640
notifications from the keyboard to the

510
00:20:08,640 --> 00:20:09,760
computer

511
00:20:09,760 --> 00:20:12,480
uh and here we check for the handle hex

512
00:20:12,480 --> 00:20:15,200
13 and if it's the right packet then we

513
00:20:15,200 --> 00:20:20,159
lock our keystroke to the command line

514
00:20:20,159 --> 00:20:22,080
so one last thing

515
00:20:22,080 --> 00:20:23,440
uh the

516
00:20:23,440 --> 00:20:26,080
used keyboard for this example uh

517
00:20:26,080 --> 00:20:27,919
requires uh

518
00:20:27,919 --> 00:20:30,480
requires the user to put to push the

519
00:20:30,480 --> 00:20:32,559
button on the back side to put the

520
00:20:32,559 --> 00:20:35,120
device in advertising mode so the device

521
00:20:35,120 --> 00:20:37,360
is regularly regularly not in

522
00:20:37,360 --> 00:20:39,200
advertising mode but you have to push

523
00:20:39,200 --> 00:20:40,640
the button if you want to connect this

524
00:20:40,640 --> 00:20:43,200
device i will get to this point after

525
00:20:43,200 --> 00:20:46,159
the demonstration

526
00:20:47,440 --> 00:20:50,159
so i hope

527
00:20:50,240 --> 00:20:52,559
to stop this here okay

528
00:20:52,559 --> 00:20:54,799
so what we can see here is on the left

529
00:20:54,799 --> 00:20:56,960
side of the victim windows operation

530
00:20:56,960 --> 00:20:59,280
system

531
00:20:59,280 --> 00:21:00,320
on the right

532
00:21:00,320 --> 00:21:03,120
bottom we have the bluetooth keyboard

533
00:21:03,120 --> 00:21:05,200
and in the right top we have the

534
00:21:05,200 --> 00:21:07,679
attacker terminal whereby the mirage

535
00:21:07,679 --> 00:21:09,919
framework is called with the bluetooth

536
00:21:09,919 --> 00:21:11,679
secure connection man in the middle

537
00:21:11,679 --> 00:21:13,120
module

538
00:21:13,120 --> 00:21:14,720
we are providing the bluetooth device

539
00:21:14,720 --> 00:21:18,000
address the bluetooth device address can

540
00:21:18,000 --> 00:21:20,559
easily be sniffed for example with the

541
00:21:20,559 --> 00:21:23,600
uber tools or also with lunix utilities

542
00:21:23,600 --> 00:21:27,520
as for example bluetooth ctl

543
00:21:27,600 --> 00:21:30,080
this device is a funny fact uses a

544
00:21:30,080 --> 00:21:32,080
random address and the randomness of

545
00:21:32,080 --> 00:21:34,320
this device is that the fourth bias of

546
00:21:34,320 --> 00:21:35,679
the address is

547
00:21:35,679 --> 00:21:40,400
regularly increased by one bit so okay

548
00:21:40,400 --> 00:21:43,120
then we have our interfaces host

549
00:21:43,120 --> 00:21:47,120
controller interface 0 0 and 1.

550
00:21:47,120 --> 00:21:48,559
we do not

551
00:21:48,559 --> 00:21:50,400
require master spoofing in this case so

552
00:21:50,400 --> 00:21:52,240
the keyboard does not care about who's

553
00:21:52,240 --> 00:21:53,840
connecting

554
00:21:53,840 --> 00:21:55,840
but we need slave spoofing so that the

555
00:21:55,840 --> 00:21:58,840
computer

556
00:21:59,120 --> 00:22:01,679
holds the keyboard for a regular

557
00:22:01,679 --> 00:22:03,840
bluetooth for the regular

558
00:22:03,840 --> 00:22:06,159
bluetooth device

559
00:22:06,159 --> 00:22:08,640
we provide our scenario so bluetooth

560
00:22:08,640 --> 00:22:10,799
brushless energy human interface device

561
00:22:10,799 --> 00:22:13,440
man manual middle and finally we provide

562
00:22:13,440 --> 00:22:15,440
our ducky script

563
00:22:15,440 --> 00:22:17,840
okay

564
00:22:21,200 --> 00:22:22,559
okay that's

565
00:22:22,559 --> 00:22:23,679
good

566
00:22:23,679 --> 00:22:25,840
at first we are entering the scan stage

567
00:22:25,840 --> 00:22:26,880
so

568
00:22:26,880 --> 00:22:28,400
okay this is very

569
00:22:28,400 --> 00:22:31,200
bad sorry

570
00:22:31,200 --> 00:22:33,440
um

571
00:22:35,200 --> 00:22:37,039
maybe i can

572
00:22:37,039 --> 00:22:40,039
start

573
00:22:40,400 --> 00:22:43,960
one second sorry

574
00:22:55,039 --> 00:22:57,520
so maybe this is better

575
00:22:57,520 --> 00:23:00,158
hopefully

576
00:23:02,159 --> 00:23:04,880
yes okay

577
00:23:05,520 --> 00:23:07,600
so we're editing the scan stage

578
00:23:07,600 --> 00:23:10,400
now the moment is here to push the

579
00:23:10,400 --> 00:23:14,000
button on the background of the keyboard

580
00:23:15,520 --> 00:23:18,080
after this the keyboard will be detected

581
00:23:18,080 --> 00:23:20,320
connected and cloned

582
00:23:20,320 --> 00:23:23,280
and now we are waiting for the

583
00:23:23,280 --> 00:23:27,240
master device to connect

584
00:23:37,840 --> 00:23:40,400
so master is connected uh

585
00:23:40,400 --> 00:23:43,039
when in the middle stage is established

586
00:23:43,039 --> 00:23:44,880
in the background here is

587
00:23:44,880 --> 00:23:47,279
now the service discovery that takes a

588
00:23:47,279 --> 00:23:49,440
take some seconds and now the bluetooth

589
00:23:49,440 --> 00:23:52,000
keyboard is connected

590
00:23:52,000 --> 00:23:54,320
we can check now that our keylogger is

591
00:23:54,320 --> 00:23:57,320
working

592
00:24:04,400 --> 00:24:06,400
and this key logger is also working if

593
00:24:06,400 --> 00:24:08,159
the window screen is locked so we can

594
00:24:08,159 --> 00:24:09,520
also

595
00:24:09,520 --> 00:24:11,039
capture the

596
00:24:11,039 --> 00:24:15,640
the login password of the user

597
00:24:20,880 --> 00:24:23,919
and finally uh we can

598
00:24:23,919 --> 00:24:25,840
inject our ducky script by pressing the

599
00:24:25,840 --> 00:24:28,400
one button on the attacker keyboard

600
00:24:28,400 --> 00:24:29,440
and

601
00:24:29,440 --> 00:24:33,000
opening the calculator

602
00:24:54,240 --> 00:24:57,279
okay so a few thoughts here how

603
00:24:57,279 --> 00:25:01,120
how easy is this um

604
00:25:01,120 --> 00:25:03,440
you could say okay if this uh this

605
00:25:03,440 --> 00:25:05,200
attack is only possible if the devices

606
00:25:05,200 --> 00:25:07,120
are not paired well there are many ways

607
00:25:07,120 --> 00:25:09,520
to disturb the connection and enforce a

608
00:25:09,520 --> 00:25:11,679
new pairing process so the easiest way i

609
00:25:11,679 --> 00:25:13,840
can think of is i just jam the

610
00:25:13,840 --> 00:25:16,960
connection and as soon as the user is

611
00:25:16,960 --> 00:25:19,760
annoyed enough to repair his device i'm

612
00:25:19,760 --> 00:25:23,039
able to intercept this connection

613
00:25:23,039 --> 00:25:25,360
the next question is what you can ask

614
00:25:25,360 --> 00:25:26,799
yourself would you push the button if

615
00:25:26,799 --> 00:25:29,279
your keyboard is no longer working and

616
00:25:29,279 --> 00:25:31,600
repair the device i think

617
00:25:31,600 --> 00:25:33,679
i probably would

618
00:25:33,679 --> 00:25:35,360
and

619
00:25:35,360 --> 00:25:37,440
to prevent this attack you have to make

620
00:25:37,440 --> 00:25:39,600
sure that your keyboard provides a

621
00:25:39,600 --> 00:25:42,720
security mode 1 level 4

622
00:25:42,720 --> 00:25:43,840
this is

623
00:25:43,840 --> 00:25:45,679
this means that the secure connection

624
00:25:45,679 --> 00:25:48,320
mode is enforced so that

625
00:25:48,320 --> 00:25:49,039
the

626
00:25:49,039 --> 00:25:51,200
both devices enforce that an

627
00:25:51,200 --> 00:25:52,720
authenticated

628
00:25:52,720 --> 00:25:55,039
pairing algorithm is used so not just

629
00:25:55,039 --> 00:25:56,960
works pairing and then this attack is no

630
00:25:56,960 --> 00:25:58,880
longer possible

631
00:25:58,880 --> 00:26:01,039
okay that's it

632
00:26:01,039 --> 00:26:02,000
so

633
00:26:02,000 --> 00:26:04,559
questions

634
00:26:04,960 --> 00:26:06,080
cool

635
00:26:06,080 --> 00:26:09,039
thank you very much um

636
00:26:09,039 --> 00:26:10,860
round of applause for him

637
00:26:10,860 --> 00:26:14,090
[Music]

638
00:26:15,679 --> 00:26:17,200
i think it was really interesting we

639
00:26:17,200 --> 00:26:18,799
have some time for question if you have

640
00:26:18,799 --> 00:26:20,640
a question please run to the front to

641
00:26:20,640 --> 00:26:24,679
the microphone and um

642
00:26:37,200 --> 00:26:39,039
class specification also has

643
00:26:39,039 --> 00:26:41,919
unauthenticated pairing so it's also

644
00:26:41,919 --> 00:26:44,159
called just work so the specifications

645
00:26:44,159 --> 00:26:46,320
are not identical but the pairing

646
00:26:46,320 --> 00:26:48,799
algorithms are

647
00:26:48,799 --> 00:26:51,120
comparable and if you have if your

648
00:26:51,120 --> 00:26:54,320
keyboard allows this

649
00:26:54,320 --> 00:26:56,000
authenticated pairing then you also have

650
00:26:56,000 --> 00:26:59,080
the problem

651
00:27:06,720 --> 00:27:08,880
you mentioned that specification has

652
00:27:08,880 --> 00:27:12,240
3000 plus pages and then if you look it

653
00:27:12,240 --> 00:27:14,720
also has a ton of specifications for

654
00:27:14,720 --> 00:27:17,120
profiles and services and you have

655
00:27:17,120 --> 00:27:19,600
different types of operation mesh

656
00:27:19,600 --> 00:27:21,679
and you have sort of regular advertising

657
00:27:21,679 --> 00:27:23,520
and then the authenticated uh

658
00:27:23,520 --> 00:27:25,279
communication

659
00:27:25,279 --> 00:27:26,720
how do you start

660
00:27:26,720 --> 00:27:29,039
with bluetooth low energy if you want to

661
00:27:29,039 --> 00:27:31,600
do this and do cool things like this

662
00:27:31,600 --> 00:27:34,640
uh it's a good question um i think if

663
00:27:34,640 --> 00:27:36,480
you start with bluetooth then there are

664
00:27:36,480 --> 00:27:38,240
uh

665
00:27:38,240 --> 00:27:39,039
some

666
00:27:39,039 --> 00:27:42,159
easy tools as for example uh

667
00:27:42,159 --> 00:27:44,480
gerteka or beetlejack which you can

668
00:27:44,480 --> 00:27:46,799
start with and i think most important is

669
00:27:46,799 --> 00:27:49,120
that you

670
00:27:49,120 --> 00:27:51,919
get used to the protocol so uh

671
00:27:51,919 --> 00:27:54,960
analyze the regula the the communication

672
00:27:54,960 --> 00:27:57,440
of devices so very easy to analyze the

673
00:27:57,440 --> 00:27:59,200
communication for bluetooth protocols

674
00:27:59,200 --> 00:28:01,200
via the host controller interface this

675
00:28:01,200 --> 00:28:03,279
is um

676
00:28:03,279 --> 00:28:06,159
possible on linux devices via the

677
00:28:06,159 --> 00:28:08,480
bluetooth one monitor

678
00:28:08,480 --> 00:28:10,240
you can also

679
00:28:10,240 --> 00:28:11,360
extract

680
00:28:11,360 --> 00:28:12,480
the

681
00:28:12,480 --> 00:28:14,159
host control database new block on

682
00:28:14,159 --> 00:28:16,320
android devices so this is a developer

683
00:28:16,320 --> 00:28:17,279
feature

684
00:28:17,279 --> 00:28:18,640
and the

685
00:28:18,640 --> 00:28:21,440
benefit in this case is that the since

686
00:28:21,440 --> 00:28:23,600
the encryption is established in a link

687
00:28:23,600 --> 00:28:24,720
layer

688
00:28:24,720 --> 00:28:27,120
and you capture the devices in the

689
00:28:27,120 --> 00:28:28,880
on the host layers then they are not

690
00:28:28,880 --> 00:28:30,480
encrypted and you can

691
00:28:30,480 --> 00:28:32,799
check what the protocol is doing because

692
00:28:32,799 --> 00:28:34,480
if you're sniffing the

693
00:28:34,480 --> 00:28:37,120
protocol over the ear which is uh on the

694
00:28:37,120 --> 00:28:39,200
one side very

695
00:28:39,200 --> 00:28:42,840
complex and not not working very well

696
00:28:42,840 --> 00:28:44,799
um

697
00:28:44,799 --> 00:28:47,279
uh then you have encrypted traffic if

698
00:28:47,279 --> 00:28:48,720
they're using encryption and then you

699
00:28:48,720 --> 00:28:51,120
cannot determine what is happening there

700
00:28:51,120 --> 00:28:53,520
so the best way is to um i think is to

701
00:28:53,520 --> 00:28:56,720
start to get a device check

702
00:28:56,720 --> 00:28:58,480
check the get the host controller

703
00:28:58,480 --> 00:28:59,919
interface logs

704
00:28:59,919 --> 00:29:02,000
put them to wireshark and analyze the

705
00:29:02,000 --> 00:29:03,760
connection setup and

706
00:29:03,760 --> 00:29:06,000
try to find

707
00:29:06,000 --> 00:29:08,399
the required parts in the specification

708
00:29:08,399 --> 00:29:09,840
it's not easy

709
00:29:09,840 --> 00:29:11,360
but once you get used to the

710
00:29:11,360 --> 00:29:12,880
specification it

711
00:29:12,880 --> 00:29:16,559
also makes kind of sense

712
00:29:18,559 --> 00:29:20,480
cool thank you very much so

713
00:29:20,480 --> 00:29:22,000
we don't really have time for another

714
00:29:22,000 --> 00:29:23,840
question but feel free to reach out to

715
00:29:23,840 --> 00:29:26,159
sarah in the break i think she will be

716
00:29:26,159 --> 00:29:28,080
happy to answer any more questions

717
00:29:28,080 --> 00:29:32,520
thanks again a lot for the talks adam

