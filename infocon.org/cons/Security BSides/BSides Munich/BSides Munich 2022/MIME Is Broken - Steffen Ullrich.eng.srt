1
00:00:03,600 --> 00:00:05,440
uh welcome

2
00:00:05,440 --> 00:00:07,919
uh yeah my talk is today about uh why

3
00:00:07,919 --> 00:00:10,320
mime is broken and okay the screen is a

4
00:00:10,320 --> 00:00:13,679
little bit off let's see

5
00:00:14,559 --> 00:00:17,520
so uh about me i'm uh yeah i'm the

6
00:00:17,520 --> 00:00:18,960
security

7
00:00:18,960 --> 00:00:21,439
engineer security researcher fellow i'm

8
00:00:21,439 --> 00:00:26,320
working uh 20 years plus at genoa gmbr

9
00:00:26,320 --> 00:00:28,000
uh

10
00:00:28,000 --> 00:00:30,240
munich

11
00:00:30,240 --> 00:00:32,640
my focus of the work is not on breaking

12
00:00:32,640 --> 00:00:34,719
things but on protecting what's already

13
00:00:34,719 --> 00:00:35,920
broken

14
00:00:35,920 --> 00:00:38,320
and i did a lot of firewall development

15
00:00:38,320 --> 00:00:40,480
focusing on the application layer

16
00:00:40,480 --> 00:00:41,600
i

17
00:00:41,600 --> 00:00:44,079
did eight years of collaboration with

18
00:00:44,079 --> 00:00:46,640
academia and research projects

19
00:00:46,640 --> 00:00:48,320
focusing on

20
00:00:48,320 --> 00:00:51,600
defending against taxvier meal and rap

21
00:00:51,600 --> 00:00:52,399
and

22
00:00:52,399 --> 00:00:55,360
i'm currently involved more in product

23
00:00:55,360 --> 00:00:59,399
and research strategies

24
00:01:01,600 --> 00:01:04,239
it's a company

25
00:01:04,239 --> 00:01:06,560
exactly 30 years old now

26
00:01:06,560 --> 00:01:07,600
with

27
00:01:07,600 --> 00:01:11,600
360 plus employees in various locations

28
00:01:11,600 --> 00:01:13,119
inside germany

29
00:01:13,119 --> 00:01:16,560
uh we are a subsidiary of the bundesliga

30
00:01:16,560 --> 00:01:17,920
gambija

31
00:01:17,920 --> 00:01:20,479
and we build security solutions for it

32
00:01:20,479 --> 00:01:24,400
and ot and our focus is on sectors with

33
00:01:24,400 --> 00:01:26,960
higher security requirements so public

34
00:01:26,960 --> 00:01:28,799
sector critical infrastructure

35
00:01:28,799 --> 00:01:30,000
structures

36
00:01:30,000 --> 00:01:31,840
regulated industry

37
00:01:31,840 --> 00:01:35,600
e-health etc and yeah of course if you

38
00:01:35,600 --> 00:01:39,199
want to help you're welcome

39
00:01:39,439 --> 00:01:42,159
uh the motivation of my research like i

40
00:01:42,159 --> 00:01:44,799
said uh i did a lot of um

41
00:01:44,799 --> 00:01:47,280
firewall development uh uh at the

42
00:01:47,280 --> 00:01:49,280
application layer so i had to

43
00:01:49,280 --> 00:01:52,079
implement uh application protocols and

44
00:01:52,079 --> 00:01:54,720
uh the best way or the preferred way to

45
00:01:54,720 --> 00:01:56,560
implement application protocols is to

46
00:01:56,560 --> 00:01:58,560
actually look at the standards

47
00:01:58,560 --> 00:02:00,000
not many do this actually when

48
00:02:00,000 --> 00:02:02,159
implementing these protocols

49
00:02:02,159 --> 00:02:04,240
uh yeah but when looking at the

50
00:02:04,240 --> 00:02:05,600
standards

51
00:02:05,600 --> 00:02:07,600
and trying to find out how to implement

52
00:02:07,600 --> 00:02:08,959
these

53
00:02:08,959 --> 00:02:11,760
the problem is that these standards are

54
00:02:11,760 --> 00:02:13,200
typically

55
00:02:13,200 --> 00:02:16,160
very flexible and very complex and they

56
00:02:16,160 --> 00:02:18,480
are unnecessarily unnecessary flexible

57
00:02:18,480 --> 00:02:21,280
and complex they leave way too much room

58
00:02:21,280 --> 00:02:24,080
for creative interpretation so there are

59
00:02:24,080 --> 00:02:27,920
lots of edge cases with with no clearly

60
00:02:27,920 --> 00:02:29,599
defined behavior

61
00:02:29,599 --> 00:02:32,000
there's no defined behavior of protocol

62
00:02:32,000 --> 00:02:35,200
errors there's a lot of short instead of

63
00:02:35,200 --> 00:02:38,319
must be implemented and they are partly

64
00:02:38,319 --> 00:02:40,720
conflicting with previous standards

65
00:02:40,720 --> 00:02:43,360
of course all of this conflicts kind of

66
00:02:43,360 --> 00:02:44,800
the security

67
00:02:44,800 --> 00:02:47,239
uh the result are that we have different

68
00:02:47,239 --> 00:02:49,200
implementations which

69
00:02:49,200 --> 00:02:50,560
interpret

70
00:02:50,560 --> 00:02:52,640
uh especially edge cases in different

71
00:02:52,640 --> 00:02:56,160
ways and this can of course be used by

72
00:02:56,160 --> 00:02:57,840
attackers

73
00:02:57,840 --> 00:03:00,239
so if the analysis system like a

74
00:03:00,239 --> 00:03:02,159
firewall interprets the content

75
00:03:02,159 --> 00:03:04,879
differently then the end user system

76
00:03:04,879 --> 00:03:07,680
like in our case a mail user agent

77
00:03:07,680 --> 00:03:10,159
then we can pass attacks through the

78
00:03:10,159 --> 00:03:12,239
firewall

79
00:03:12,239 --> 00:03:14,480
so the focus of my

80
00:03:14,480 --> 00:03:16,840
research in this case

81
00:03:16,840 --> 00:03:19,440
is um

82
00:03:19,440 --> 00:03:20,959
it's mine

83
00:03:20,959 --> 00:03:24,080
uh mime is kind of a standard for a rich

84
00:03:24,080 --> 00:03:26,959
meal so what we have today structured

85
00:03:26,959 --> 00:03:28,959
male binary attachments non-ascii

86
00:03:28,959 --> 00:03:30,400
characters

87
00:03:30,400 --> 00:03:35,200
uh and what i explore here is how to use

88
00:03:35,200 --> 00:03:37,040
different interpretations of mime to

89
00:03:37,040 --> 00:03:39,360
bypass security systems so these are

90
00:03:39,360 --> 00:03:41,519
analysis in male filters firewalls

91
00:03:41,519 --> 00:03:44,640
intrusion action systems antivirus

92
00:03:44,640 --> 00:03:46,480
versus the interpretation

93
00:03:46,480 --> 00:03:49,519
by mail user agents or web front ends um

94
00:03:49,519 --> 00:03:51,760
i'm looking into bypassing mirror

95
00:03:51,760 --> 00:03:53,680
detection by content

96
00:03:53,680 --> 00:03:56,000
using the icar test viewers and uh

97
00:03:56,000 --> 00:03:58,480
bypassing detection or attachment

98
00:03:58,480 --> 00:04:01,680
filtering by file name so if we can

99
00:04:01,680 --> 00:04:03,120
uh make

100
00:04:03,120 --> 00:04:04,799
the firewall believe that we have a

101
00:04:04,799 --> 00:04:06,400
different file name

102
00:04:06,400 --> 00:04:08,560
it's not a dot x is not a dot zip then

103
00:04:08,560 --> 00:04:11,840
the firewall will pass through the mail

104
00:04:11,840 --> 00:04:14,959
there's similar research for http one

105
00:04:14,959 --> 00:04:17,839
there's all this ports figure stuff

106
00:04:17,839 --> 00:04:20,798
about http dsync attacks which are

107
00:04:20,798 --> 00:04:23,120
targeting the server side

108
00:04:23,120 --> 00:04:25,520
a little a lot of research on the http

109
00:04:25,520 --> 00:04:28,320
site too but for targeting clients so

110
00:04:28,320 --> 00:04:30,320
sending malicious responses or

111
00:04:30,320 --> 00:04:32,960
unexpected responses by the server and

112
00:04:32,960 --> 00:04:35,520
by passing firewalls this way

113
00:04:35,520 --> 00:04:37,040
this result here

114
00:04:37,040 --> 00:04:41,600
uh was primarily done in 2015 to 2018

115
00:04:41,600 --> 00:04:44,000
during a research project

116
00:04:44,000 --> 00:04:47,360
but i freshly updated it to make sure

117
00:04:47,360 --> 00:04:50,080
that all the attacks still work and they

118
00:04:50,080 --> 00:04:51,680
do

119
00:04:51,680 --> 00:04:52,880
so

120
00:04:52,880 --> 00:04:54,240
yeah to

121
00:04:54,240 --> 00:04:56,720
explore this topic

122
00:04:56,720 --> 00:04:59,919
um i created a lot of different mails

123
00:04:59,919 --> 00:05:00,960
with

124
00:05:00,960 --> 00:05:02,960
different test cases so

125
00:05:02,960 --> 00:05:03,680
uh

126
00:05:03,680 --> 00:05:06,000
nearly a few hundred meals for

127
00:05:06,000 --> 00:05:08,000
continental asus or

128
00:05:08,000 --> 00:05:10,240
nearly 200 meals for bypassing extension

129
00:05:10,240 --> 00:05:11,520
blocking

130
00:05:11,520 --> 00:05:15,680
um these males uh if exported as a files

131
00:05:15,680 --> 00:05:17,440
or mail directory

132
00:05:17,440 --> 00:05:20,320
and also as a packet capture file to

133
00:05:20,320 --> 00:05:22,479
check against intrusion action systems

134
00:05:22,479 --> 00:05:25,360
and then i checked against several

135
00:05:25,360 --> 00:05:28,800
systems like various male user agents

136
00:05:28,800 --> 00:05:31,120
various antivirus and male fetal

137
00:05:31,120 --> 00:05:33,199
products

138
00:05:33,199 --> 00:05:35,680
some intuition injection symptoms in

139
00:05:35,680 --> 00:05:37,759
firewall i won't mention here because

140
00:05:37,759 --> 00:05:39,919
it's not a free one

141
00:05:39,919 --> 00:05:43,919
and some libraries

142
00:05:44,400 --> 00:05:45,600
okay

143
00:05:45,600 --> 00:05:48,080
a short introduction into what mime

144
00:05:48,080 --> 00:05:50,000
actually is

145
00:05:50,000 --> 00:05:52,720
in the beginning there was about uh

146
00:05:52,720 --> 00:05:55,440
before 1994 five

147
00:05:55,440 --> 00:05:58,400
there was only esky there were only esky

148
00:05:58,400 --> 00:06:01,520
males these had a line

149
00:06:01,520 --> 00:06:04,639
uh length limit of thousand

150
00:06:04,639 --> 00:06:07,440
thousand bytes and there was no kind of

151
00:06:07,440 --> 00:06:09,759
structure no attachment or similar

152
00:06:09,759 --> 00:06:11,120
insight

153
00:06:11,120 --> 00:06:12,720
in 1996

154
00:06:12,720 --> 00:06:14,720
we got these

155
00:06:14,720 --> 00:06:16,880
mime rfc

156
00:06:16,880 --> 00:06:20,240
which defined different aspects of how

157
00:06:20,240 --> 00:06:23,520
to serialize

158
00:06:24,800 --> 00:06:26,479
structured information and non-sk

159
00:06:26,479 --> 00:06:29,759
information into the original limits

160
00:06:29,759 --> 00:06:30,720
so

161
00:06:30,720 --> 00:06:32,960
yeah binary data

162
00:06:32,960 --> 00:06:35,360
structures data like attachments and of

163
00:06:35,360 --> 00:06:37,600
course like i said this is a standard

164
00:06:37,600 --> 00:06:40,000
which is flexible which is complex

165
00:06:40,000 --> 00:06:42,560
underspecified and has lots of room for

166
00:06:42,560 --> 00:06:45,759
creative interpretation

167
00:06:45,759 --> 00:06:48,240
a year later there were some additional

168
00:06:48,240 --> 00:06:49,759
standards

169
00:06:49,759 --> 00:06:52,800
one is the callback outcome disposition

170
00:06:52,800 --> 00:06:54,960
how to specify a file name is how to

171
00:06:54,960 --> 00:06:57,280
specify if the attachment is inline or

172
00:06:57,280 --> 00:06:58,960
external

173
00:06:58,960 --> 00:07:00,240
and

174
00:07:00,240 --> 00:07:03,280
there is uh another standard for

175
00:07:03,280 --> 00:07:07,120
encoding of non-ski characters into

176
00:07:07,120 --> 00:07:10,880
uh structured data like file names or so

177
00:07:10,880 --> 00:07:13,199
um for some reason they

178
00:07:13,199 --> 00:07:15,120
didn't include this in the original one

179
00:07:15,120 --> 00:07:18,639
so they needed yet another one which

180
00:07:18,639 --> 00:07:20,880
implemented a totally different encoding

181
00:07:20,880 --> 00:07:21,680
for

182
00:07:21,680 --> 00:07:23,520
some reason

183
00:07:23,520 --> 00:07:24,479
okay

184
00:07:24,479 --> 00:07:26,400
uh if you look at the source code of a

185
00:07:26,400 --> 00:07:29,120
mail we see the different standards

186
00:07:29,120 --> 00:07:30,479
applied here

187
00:07:30,479 --> 00:07:33,599
so uh we have the subject which is an

188
00:07:33,599 --> 00:07:36,319
unstructured header field

189
00:07:36,319 --> 00:07:41,840
and there we see rfc 2047 so this one

190
00:07:41,840 --> 00:07:44,160
which is about encoding characters in

191
00:07:44,160 --> 00:07:47,039
the header what we have here is with q

192
00:07:47,039 --> 00:07:48,240
is

193
00:07:48,240 --> 00:07:50,639
a code printable encoding which means

194
00:07:50,639 --> 00:07:53,520
that uh the characters the non-ascii

195
00:07:53,520 --> 00:07:56,080
characters are encoded in some kind of

196
00:07:56,080 --> 00:07:59,919
hex value so this equals c drive

197
00:07:59,919 --> 00:08:01,759
a c 3 means

198
00:08:01,759 --> 00:08:04,080
that it's a character

199
00:08:04,080 --> 00:08:05,360
hex c

200
00:08:05,360 --> 00:08:07,919
3 and then we can look in the

201
00:08:07,919 --> 00:08:10,960
utf art utf-8 encoding what the second

202
00:08:10,960 --> 00:08:14,560
actually means okay uh then we have this

203
00:08:14,560 --> 00:08:17,840
kind of mime preamble here which is

204
00:08:17,840 --> 00:08:19,919
hidden in modern male clients so

205
00:08:19,919 --> 00:08:22,479
basically all male clients we have today

206
00:08:22,479 --> 00:08:25,840
it's only for the old male clients

207
00:08:25,840 --> 00:08:29,440
so this is everything before the first

208
00:08:29,440 --> 00:08:30,479
part

209
00:08:30,479 --> 00:08:32,799
because we have here a multi-part mail

210
00:08:32,799 --> 00:08:36,000
which is defined in rfc 2046

211
00:08:36,000 --> 00:08:38,640
and we have a boundary here defined to

212
00:08:38,640 --> 00:08:41,839
split the mail into different parts with

213
00:08:41,839 --> 00:08:44,640
the final boundary here

214
00:08:44,640 --> 00:08:45,839
uh

215
00:08:45,839 --> 00:08:49,519
yeah then we have uh for some parts we

216
00:08:49,519 --> 00:08:51,600
have a name so we can have a name given

217
00:08:51,600 --> 00:08:53,519
in this way we can have name given in

218
00:08:53,519 --> 00:08:54,399
this way

219
00:08:54,399 --> 00:08:56,680
this is actually

220
00:08:56,680 --> 00:09:00,000
rc2231 which has this kind of encoding

221
00:09:00,000 --> 00:09:02,880
for long file names which we can split

222
00:09:02,880 --> 00:09:05,519
over multiple parameters because like i

223
00:09:05,519 --> 00:09:07,360
said the

224
00:09:07,360 --> 00:09:10,320
limit for line lengths in male is a

225
00:09:10,320 --> 00:09:12,160
thousand characters

226
00:09:12,160 --> 00:09:15,279
and which has these kind of hex encoding

227
00:09:15,279 --> 00:09:18,160
here which looks similar to what we have

228
00:09:18,160 --> 00:09:19,680
in quoted principle but again it's

229
00:09:19,680 --> 00:09:22,240
totally different because we have a here

230
00:09:22,240 --> 00:09:23,920
we have an equal sign here we percent

231
00:09:23,920 --> 00:09:26,800
percent centered so and yeah

232
00:09:26,800 --> 00:09:29,040
for some reason they needed to make

233
00:09:29,040 --> 00:09:30,399
everything

234
00:09:30,399 --> 00:09:32,160
differently and then we have coded

235
00:09:32,160 --> 00:09:33,839
printable encoding here for the content

236
00:09:33,839 --> 00:09:37,440
and base 64 encoding here uh for the

237
00:09:37,440 --> 00:09:40,480
content of the attachment

238
00:09:40,640 --> 00:09:41,760
okay

239
00:09:41,760 --> 00:09:44,800
uh i show some selected examples of how

240
00:09:44,800 --> 00:09:47,279
this uh

241
00:09:47,279 --> 00:09:50,959
can be used uh to

242
00:09:52,160 --> 00:09:54,560
create

243
00:09:54,560 --> 00:09:56,240
edge cases

244
00:09:56,240 --> 00:09:59,440
which are theoretically allowed

245
00:09:59,440 --> 00:10:00,240
or

246
00:10:00,240 --> 00:10:02,000
especially not as they are not

247
00:10:02,000 --> 00:10:04,880
especially forbidden by the standard but

248
00:10:04,880 --> 00:10:05,920
where the

249
00:10:05,920 --> 00:10:09,200
interpretation is ambitious

250
00:10:09,200 --> 00:10:10,399
so

251
00:10:10,399 --> 00:10:12,800
for example in this case you can define

252
00:10:12,800 --> 00:10:15,200
two content transfer encodings this is

253
00:10:15,200 --> 00:10:18,000
similar like attacks in http where we

254
00:10:18,000 --> 00:10:19,760
have two content length sellers with

255
00:10:19,760 --> 00:10:21,200
different values

256
00:10:21,200 --> 00:10:23,200
and because we have two values here it's

257
00:10:23,200 --> 00:10:24,880
not clear how this part so this is

258
00:10:24,880 --> 00:10:27,519
base64 how this gets interpreted and

259
00:10:27,519 --> 00:10:30,079
depending on the mail client we use it

260
00:10:30,079 --> 00:10:32,079
gets integrated in a different way and

261
00:10:32,079 --> 00:10:35,200
depends on the analysis software we use

262
00:10:35,200 --> 00:10:38,720
or the library some manage to see this

263
00:10:38,720 --> 00:10:42,320
and some uh don't see this so sorry

264
00:10:42,320 --> 00:10:45,839
carter ids doesn't see the attachments

265
00:10:45,839 --> 00:10:48,560
right attachment in this case

266
00:10:48,560 --> 00:10:50,880
oops

267
00:10:51,760 --> 00:10:53,279
slight variation

268
00:10:53,279 --> 00:10:54,480
of this

269
00:10:54,480 --> 00:10:56,240
we have one

270
00:10:56,240 --> 00:10:58,839
field only but we have multiple values

271
00:10:58,839 --> 00:11:03,440
inside uh again some male clients

272
00:11:03,440 --> 00:11:06,399
understand this and just take the base64

273
00:11:06,399 --> 00:11:08,000
because it's the first one

274
00:11:08,000 --> 00:11:11,440
no male client actually uh

275
00:11:11,440 --> 00:11:12,880
unders

276
00:11:12,880 --> 00:11:15,360
takes it detects the last one but

277
00:11:15,360 --> 00:11:17,279
outlook and apple mail

278
00:11:17,279 --> 00:11:18,880
don't understand this at all and just

279
00:11:18,880 --> 00:11:22,800
assume there's no encoding done

280
00:11:24,560 --> 00:11:26,959
you can play similar games with the

281
00:11:26,959 --> 00:11:28,959
content uh

282
00:11:28,959 --> 00:11:30,800
the multi-part

283
00:11:30,800 --> 00:11:33,440
male so we have boundaries here and we

284
00:11:33,440 --> 00:11:36,560
can have two boundary definitions and uh

285
00:11:36,560 --> 00:11:39,839
the correct one would be a bar here so

286
00:11:39,839 --> 00:11:41,760
this is the first one and here's this is

287
00:11:41,760 --> 00:11:43,839
as the last one and again depending on

288
00:11:43,839 --> 00:11:45,680
the meal client and depending on the

289
00:11:45,680 --> 00:11:48,560
analysis software uh we have different

290
00:11:48,560 --> 00:11:51,199
results

291
00:11:51,360 --> 00:11:54,000
same thing again one field multiple

292
00:11:54,000 --> 00:11:55,200
values

293
00:11:55,200 --> 00:11:57,120
and here again it switches

294
00:11:57,120 --> 00:12:00,399
first uh what was on this side and apple

295
00:12:00,399 --> 00:12:02,320
mill was on this side he has a node

296
00:12:02,320 --> 00:12:03,440
switch and

297
00:12:03,440 --> 00:12:05,519
it's the same with the various software

298
00:12:05,519 --> 00:12:09,120
so we see here see a majesty new which

299
00:12:09,120 --> 00:12:11,120
behaves the same as pearl mime tools

300
00:12:11,120 --> 00:12:15,200
because it's used inside

301
00:12:16,399 --> 00:12:19,600
yeah and then a different

302
00:12:19,600 --> 00:12:21,200
area

303
00:12:21,200 --> 00:12:23,600
the area of encodings there's a b64

304
00:12:23,600 --> 00:12:26,880
encoding uh base64 basically means that

305
00:12:26,880 --> 00:12:29,680
we have three bytes binary data

306
00:12:29,680 --> 00:12:32,560
mapped to four byte ascii data so it's

307
00:12:32,560 --> 00:12:35,200
already it's taken the first six bit

308
00:12:35,200 --> 00:12:37,920
then the next six bit and so on until we

309
00:12:37,920 --> 00:12:40,800
have uh have

310
00:12:40,800 --> 00:12:43,199
18

311
00:12:43,360 --> 00:12:44,880
20 24 bit

312
00:12:44,880 --> 00:12:49,839
3 bytes binary and maps these to 32

313
00:12:49,839 --> 00:12:51,839
bits

314
00:12:51,839 --> 00:12:53,120
which

315
00:12:53,120 --> 00:12:55,440
uh are playing s key

316
00:12:55,440 --> 00:12:57,360
and if you have less than three bytes

317
00:12:57,360 --> 00:12:59,680
and we have a padding so in this case we

318
00:12:59,680 --> 00:13:01,839
have four bytes here which means we have

319
00:13:01,839 --> 00:13:04,079
two bytes padding because we have to

320
00:13:04,079 --> 00:13:05,200
fill in

321
00:13:05,200 --> 00:13:07,279
the last two bytes you get six bytes and

322
00:13:07,279 --> 00:13:09,279
here in this case we have two bytes this

323
00:13:09,279 --> 00:13:10,880
means you have one byte padding and this

324
00:13:10,880 --> 00:13:13,839
padding is done with the equal sign here

325
00:13:13,839 --> 00:13:15,680
and

326
00:13:15,680 --> 00:13:17,040
the standard

327
00:13:17,040 --> 00:13:19,200
or the rc

328
00:13:19,200 --> 00:13:21,360
is not clear

329
00:13:21,360 --> 00:13:23,760
uh in this case uh

330
00:13:23,760 --> 00:13:24,639
if

331
00:13:24,639 --> 00:13:27,760
what we have should be encoded in one

332
00:13:27,760 --> 00:13:29,760
piece so that we have only a single

333
00:13:29,760 --> 00:13:31,680
padding at most a single padding at the

334
00:13:31,680 --> 00:13:34,320
end or if you can actually have multiple

335
00:13:34,320 --> 00:13:38,240
pieces it suggests that must may be done

336
00:13:38,240 --> 00:13:41,279
this way but there is no short or even

337
00:13:41,279 --> 00:13:42,880
better a must

338
00:13:42,880 --> 00:13:44,399
and that's why we have different

339
00:13:44,399 --> 00:13:45,839
implementations so we have some about

340
00:13:45,839 --> 00:13:48,000
apple mail which just accepts that it's

341
00:13:48,000 --> 00:13:49,600
okay to do so

342
00:13:49,600 --> 00:13:52,639
uh we have mode this just takes the

343
00:13:52,639 --> 00:13:53,760
first part

344
00:13:53,760 --> 00:13:56,000
and you have outlook which i don't know

345
00:13:56,000 --> 00:13:57,600
it takes the first part and then there's

346
00:13:57,600 --> 00:13:59,839
garbage and i don't

347
00:13:59,839 --> 00:14:01,279
actually know where this garbage comes

348
00:14:01,279 --> 00:14:02,120
from

349
00:14:02,120 --> 00:14:03,440
[Applause]

350
00:14:03,440 --> 00:14:05,519
yeah and if you have a look at the

351
00:14:05,519 --> 00:14:07,600
analysis software or the libraries we

352
00:14:07,600 --> 00:14:10,480
see that most of these

353
00:14:10,480 --> 00:14:13,519
plainly fail to see what major mail

354
00:14:13,519 --> 00:14:17,279
clients actually can do

355
00:14:17,279 --> 00:14:19,839
ah but we have more encodings we have a

356
00:14:19,839 --> 00:14:22,000
quota with printable which is in the

357
00:14:22,000 --> 00:14:24,720
standard tool but we have uh

358
00:14:24,720 --> 00:14:26,160
other encodings which are not in the

359
00:14:26,160 --> 00:14:28,720
standard but which are actually uh

360
00:14:28,720 --> 00:14:31,120
supported by some real clients

361
00:14:31,120 --> 00:14:34,240
there is this why inc encoding and this

362
00:14:34,240 --> 00:14:35,920
is an encoding which comes from the area

363
00:14:35,920 --> 00:14:37,360
of houston news

364
00:14:37,360 --> 00:14:39,760
i don't know if somebody still remembers

365
00:14:39,760 --> 00:14:41,120
it's

366
00:14:41,120 --> 00:14:44,480
some 15 20 years ago

367
00:14:44,480 --> 00:14:45,760
this time was it

368
00:14:45,760 --> 00:14:48,079
yes very efficient encoding and more

369
00:14:48,079 --> 00:14:50,000
efficient than base64 and that's why it

370
00:14:50,000 --> 00:14:52,959
was used on usenet to transfer transfer

371
00:14:52,959 --> 00:14:54,800
binary data

372
00:14:54,800 --> 00:14:57,199
and because thunderbird

373
00:14:57,199 --> 00:14:59,360
can still function as a news reader it

374
00:14:59,360 --> 00:15:01,760
implements these encoding

375
00:15:01,760 --> 00:15:04,800
but nobody else does and no analysis

376
00:15:04,800 --> 00:15:08,240
software is able to see this

377
00:15:10,240 --> 00:15:12,320
other is very interesting encoding is uu

378
00:15:12,320 --> 00:15:16,079
encode this predates mime this predates

379
00:15:16,079 --> 00:15:17,199
why inc

380
00:15:17,199 --> 00:15:18,079
too

381
00:15:18,079 --> 00:15:21,199
uh it was used in former times

382
00:15:21,199 --> 00:15:24,480
in plain text mirrors to include some

383
00:15:24,480 --> 00:15:27,760
binary data so we had some kind of file

384
00:15:27,760 --> 00:15:30,639
name here inside this uh part and then

385
00:15:30,639 --> 00:15:32,320
we had this encoding and then there was

386
00:15:32,320 --> 00:15:34,639
an end and this encoding is very similar

387
00:15:34,639 --> 00:15:37,360
to base 64. only it's mapped slightly

388
00:15:37,360 --> 00:15:40,560
different but the idea is the same uh

389
00:15:40,560 --> 00:15:43,279
yeah and this is actually a widely

390
00:15:43,279 --> 00:15:46,000
supported encoding uh so we have major

391
00:15:46,000 --> 00:15:48,720
mill clients which can do it

392
00:15:48,720 --> 00:15:51,600
and uh we actually have major antivirus

393
00:15:51,600 --> 00:15:55,040
products which can do it too but

394
00:15:55,040 --> 00:15:57,600
uh there are lots of variations so we

395
00:15:57,600 --> 00:15:59,519
can have different uh transfer encoding

396
00:15:59,519 --> 00:16:02,079
times vm sometimes we need to begin and

397
00:16:02,079 --> 00:16:04,959
then sometimes you can skip it etc etc

398
00:16:04,959 --> 00:16:07,519
and uh they all work slightly different

399
00:16:07,519 --> 00:16:09,519
so there's lots of room

400
00:16:09,519 --> 00:16:10,320
for

401
00:16:10,320 --> 00:16:11,519
passing

402
00:16:11,519 --> 00:16:14,720
bypassing analysis software

403
00:16:14,720 --> 00:16:16,880
and then we have another strange feature

404
00:16:16,880 --> 00:16:20,639
of mail which is comments in mail header

405
00:16:20,639 --> 00:16:22,560
as in mail fields

406
00:16:22,560 --> 00:16:25,279
so the standard actually says that uh

407
00:16:25,279 --> 00:16:27,600
one can place combat this is this part

408
00:16:27,600 --> 00:16:30,639
with a parenthesis around it uh in

409
00:16:30,639 --> 00:16:34,399
several places freely inserted and

410
00:16:34,399 --> 00:16:37,120
outlook uh takes this to the next level

411
00:16:37,120 --> 00:16:39,440
it's basically nearly everywhere this

412
00:16:39,440 --> 00:16:41,680
stuff can be inserted and it simply gets

413
00:16:41,680 --> 00:16:44,399
ignored so outlook sees in this case

414
00:16:44,399 --> 00:16:45,199
this

415
00:16:45,199 --> 00:16:46,079
i

416
00:16:46,079 --> 00:16:48,399
bar as a boundary

417
00:16:48,399 --> 00:16:51,600
all other um implementations don't see

418
00:16:51,600 --> 00:16:55,360
this bar and yeah clement can see it and

419
00:16:55,360 --> 00:16:56,480
there's this

420
00:16:56,480 --> 00:16:59,440
firewall which can see us and there is a

421
00:16:59,440 --> 00:17:02,959
uh python library but everybody else

422
00:17:02,959 --> 00:17:05,520
cannot see this

423
00:17:05,520 --> 00:17:08,799
okay this is about content filtering and

424
00:17:08,799 --> 00:17:10,799
then we have the specification of file

425
00:17:10,799 --> 00:17:13,199
lamps

426
00:17:13,280 --> 00:17:15,919
two two small examples

427
00:17:15,919 --> 00:17:18,679
like i said we have this rfc

428
00:17:18,679 --> 00:17:23,119
20231 which defined a new encoding for

429
00:17:23,119 --> 00:17:26,160
file names and which defined how these

430
00:17:26,160 --> 00:17:29,360
can be split into multiple parameters

431
00:17:29,360 --> 00:17:32,320
so there is an index for the parameter

432
00:17:32,320 --> 00:17:34,880
and uh yeah i can split it over

433
00:17:34,880 --> 00:17:37,200
multiple solutions the order actually

434
00:17:37,200 --> 00:17:39,840
does not matter which is

435
00:17:39,840 --> 00:17:41,440
explicitly

436
00:17:41,440 --> 00:17:43,760
specified as a standard

437
00:17:43,760 --> 00:17:44,840
and

438
00:17:44,840 --> 00:17:48,160
yeah um like one see i can see

439
00:17:48,160 --> 00:17:50,240
thunderbird apple mill not all supports

440
00:17:50,240 --> 00:17:51,200
this

441
00:17:51,200 --> 00:17:53,760
kind of outlook has no idea what the

442
00:17:53,760 --> 00:17:55,200
standard is at all

443
00:17:55,200 --> 00:17:58,400
and the funny thing if i use

444
00:17:58,400 --> 00:18:00,559
microsoft exchange

445
00:18:00,559 --> 00:18:04,320
it even transforms

446
00:18:04,320 --> 00:18:07,440
this encoding this write encoding into a

447
00:18:07,440 --> 00:18:09,200
wrong encoding because outlook doesn't

448
00:18:09,200 --> 00:18:11,840
support it

449
00:18:12,000 --> 00:18:13,120
but

450
00:18:13,120 --> 00:18:15,280
i have this in other standards this rfc

451
00:18:15,280 --> 00:18:18,400
2047 which was

452
00:18:18,400 --> 00:18:20,080
defined for

453
00:18:20,080 --> 00:18:23,280
encoding of characters into unstructured

454
00:18:23,280 --> 00:18:26,799
mail fields and it specifically says

455
00:18:26,799 --> 00:18:28,320
that

456
00:18:28,320 --> 00:18:30,240
this encoding stuff should not be quoted

457
00:18:30,240 --> 00:18:32,320
and should not be used inside of content

458
00:18:32,320 --> 00:18:34,480
type of content disposition but funny

459
00:18:34,480 --> 00:18:36,240
thing is

460
00:18:36,240 --> 00:18:39,039
most supports this

461
00:18:39,039 --> 00:18:40,559
and

462
00:18:40,559 --> 00:18:42,400
yeah many analysis software supports us

463
00:18:42,400 --> 00:18:44,320
too but there are several variations of

464
00:18:44,320 --> 00:18:47,039
the topic so if i use uh some

465
00:18:47,039 --> 00:18:50,720
uh strange encodings like otf16 it gets

466
00:18:50,720 --> 00:18:52,799
weird and uh i have

467
00:18:52,799 --> 00:18:56,400
again ways to bypass firewalls or

468
00:18:56,400 --> 00:18:58,559
analysis systems

469
00:18:58,559 --> 00:19:00,320
okay so how to apply this knowledge in

470
00:19:00,320 --> 00:19:02,320
the practice

471
00:19:02,320 --> 00:19:04,559
uh small thing i

472
00:19:04,559 --> 00:19:06,720
create a mail

473
00:19:06,720 --> 00:19:08,840
and i check this mirror with

474
00:19:08,840 --> 00:19:11,120
virustotal so

475
00:19:11,120 --> 00:19:12,400
this mail

476
00:19:12,400 --> 00:19:13,600
has

477
00:19:13,600 --> 00:19:15,039
inside here

478
00:19:15,039 --> 00:19:18,000
base64 encoding

479
00:19:18,000 --> 00:19:20,559
a zip file and the zip file contains the

480
00:19:20,559 --> 00:19:22,559
icar test bureaus

481
00:19:22,559 --> 00:19:25,600
and like we can see there are so the

482
00:19:25,600 --> 00:19:28,720
ground truth 38 uh

483
00:19:28,720 --> 00:19:31,120
products in uh

484
00:19:31,120 --> 00:19:32,720
a virus total

485
00:19:32,720 --> 00:19:36,640
can actually parse this male and can uh

486
00:19:36,640 --> 00:19:39,200
detect the virus inside so

487
00:19:39,200 --> 00:19:40,640
nice

488
00:19:40,640 --> 00:19:41,840
let's see

489
00:19:41,840 --> 00:19:44,320
if we make a small change we add another

490
00:19:44,320 --> 00:19:46,640
transfer encoding here and we can see

491
00:19:46,640 --> 00:19:47,679
the

492
00:19:47,679 --> 00:19:50,160
number goes slightly down if you switch

493
00:19:50,160 --> 00:19:53,280
the order it's not much different and if

494
00:19:53,280 --> 00:19:54,240
we

495
00:19:54,240 --> 00:19:56,000
specify a content transfer encoding

496
00:19:56,000 --> 00:19:57,679
which is

497
00:19:57,679 --> 00:19:59,120
something which doesn't exist like the

498
00:19:59,120 --> 00:20:00,480
x66

499
00:20:00,480 --> 00:20:02,559
then yeah it goes down but there's still

500
00:20:02,559 --> 00:20:04,240
a lot of

501
00:20:04,240 --> 00:20:06,799
scanners which will simply have

502
00:20:06,799 --> 00:20:10,080
heuristic and uh see this is base64

503
00:20:10,080 --> 00:20:13,520
encoding and will uh try to analyze it

504
00:20:13,520 --> 00:20:14,880
okay

505
00:20:14,880 --> 00:20:16,559
small step

506
00:20:16,559 --> 00:20:17,440
uh

507
00:20:17,440 --> 00:20:20,159
we don't use a single chunk for a base64

508
00:20:20,159 --> 00:20:22,480
but we was actually multiple chunks for

509
00:20:22,480 --> 00:20:25,760
two bytes so we get an uh padding one

510
00:20:25,760 --> 00:20:28,640
character betting after after each chunk

511
00:20:28,640 --> 00:20:31,039
and now the number goes way down

512
00:20:31,039 --> 00:20:33,039
and even if we take

513
00:20:33,039 --> 00:20:34,799
back all this stuff

514
00:20:34,799 --> 00:20:39,039
before here is it still very low

515
00:20:39,120 --> 00:20:40,960
and last step

516
00:20:40,960 --> 00:20:43,039
uh we just uh

517
00:20:43,039 --> 00:20:44,000
add

518
00:20:44,000 --> 00:20:46,799
multiple boundaries here with different

519
00:20:46,799 --> 00:20:48,799
implementation and now

520
00:20:48,799 --> 00:20:50,400
we have

521
00:20:50,400 --> 00:20:52,559
no antivirus product uh

522
00:20:52,559 --> 00:20:54,640
supports us anymore if we look at the

523
00:20:54,640 --> 00:20:56,799
meal in thunderbird we can still

524
00:20:56,799 --> 00:20:59,039
normally just extract it have a look at

525
00:20:59,039 --> 00:21:00,480
it

526
00:21:00,480 --> 00:21:03,679
and if we uh

527
00:21:03,679 --> 00:21:05,919
remove uh this uh quantum transfer

528
00:21:05,919 --> 00:21:08,240
confusion here it's still only one

529
00:21:08,240 --> 00:21:12,000
antivirus product which will seize us

530
00:21:12,000 --> 00:21:13,520
okay

531
00:21:13,520 --> 00:21:14,840
slightly different

532
00:21:14,840 --> 00:21:16,559
area are

533
00:21:16,559 --> 00:21:19,120
dkim signatures i don't know who is

534
00:21:19,120 --> 00:21:20,320
familiar with

535
00:21:20,320 --> 00:21:22,000
dkim and demark

536
00:21:22,000 --> 00:21:24,640
the basic idea is that we want to

537
00:21:24,640 --> 00:21:26,159
protect us

538
00:21:26,159 --> 00:21:29,039
against the spoofing of the sender

539
00:21:29,039 --> 00:21:32,000
and the visible sender inside the mirror

540
00:21:32,000 --> 00:21:34,880
is inside the mail from header

541
00:21:34,880 --> 00:21:38,080
and j-mark basically says

542
00:21:38,080 --> 00:21:40,240
that this from header

543
00:21:40,240 --> 00:21:41,919
must the domain of the from header must

544
00:21:41,919 --> 00:21:45,039
be aligned with either

545
00:21:45,039 --> 00:21:47,440
senate permitted frameworks for spf or

546
00:21:47,440 --> 00:21:50,320
daycam signatures and taken signature is

547
00:21:50,320 --> 00:21:52,880
actually only a

548
00:21:52,880 --> 00:21:54,880
it's a cryptographic signature over

549
00:21:54,880 --> 00:21:56,720
parts of the header and over

550
00:21:56,720 --> 00:21:59,440
the body and

551
00:21:59,440 --> 00:22:01,679
we can check this and it's independent

552
00:22:01,679 --> 00:22:04,400
uh from the transport of the mail so we

553
00:22:04,400 --> 00:22:06,960
can redistribute the mail and this uh

554
00:22:06,960 --> 00:22:09,039
dickham signature does not change at all

555
00:22:09,039 --> 00:22:12,400
which is very nice

556
00:22:12,400 --> 00:22:14,320
but

557
00:22:14,320 --> 00:22:16,720
the ecom standard

558
00:22:16,720 --> 00:22:19,120
relies on

559
00:22:19,120 --> 00:22:20,080
mime

560
00:22:20,080 --> 00:22:22,240
being not broken

561
00:22:22,240 --> 00:22:23,280
and

562
00:22:23,280 --> 00:22:26,960
the dqm standard itself is

563
00:22:26,960 --> 00:22:28,240
insufficient too

564
00:22:28,240 --> 00:22:29,440
so there

565
00:22:29,440 --> 00:22:30,799
are

566
00:22:30,799 --> 00:22:33,760
no requirements which header fields like

567
00:22:33,760 --> 00:22:36,080
content type like

568
00:22:36,080 --> 00:22:38,480
subject also need to be protected there

569
00:22:38,480 --> 00:22:40,000
are some recommendations but these

570
00:22:40,000 --> 00:22:42,240
recommendations are insufficient

571
00:22:42,240 --> 00:22:43,520
there

572
00:22:43,520 --> 00:22:46,080
is a way in the standard to protect

573
00:22:46,080 --> 00:22:47,919
header fields to make sure that no

574
00:22:47,919 --> 00:22:50,159
critical header fields can be added

575
00:22:50,159 --> 00:22:52,880
but there's no requirement to do so

576
00:22:52,880 --> 00:22:54,400
which means that

577
00:22:54,400 --> 00:22:57,039
typically implementations like an openg

578
00:22:57,039 --> 00:22:58,240
chem or so

579
00:22:58,240 --> 00:22:59,840
or

580
00:22:59,840 --> 00:23:01,760
basically in any products we see outside

581
00:23:01,760 --> 00:23:03,120
are broken

582
00:23:03,120 --> 00:23:04,720
they don't uh properly protect the

583
00:23:04,720 --> 00:23:06,960
headers

584
00:23:06,960 --> 00:23:08,480
additionally

585
00:23:08,480 --> 00:23:12,000
dkm allows us to sign only parts of

586
00:23:12,000 --> 00:23:14,240
samir the idea is that

587
00:23:14,240 --> 00:23:15,120
some

588
00:23:15,120 --> 00:23:17,679
software could add some food and the

589
00:23:17,679 --> 00:23:20,240
signature should be the same

590
00:23:20,240 --> 00:23:21,679
and they say this is a seriously

591
00:23:21,679 --> 00:23:23,760
security problem but nevertheless they

592
00:23:23,760 --> 00:23:25,440
allow it

593
00:23:25,440 --> 00:23:27,840
okay so what can we can we do

594
00:23:27,840 --> 00:23:31,520
this is a mail i got um about

595
00:23:31,520 --> 00:23:33,440
oh six years ago

596
00:23:33,440 --> 00:23:34,840
and uh

597
00:23:34,840 --> 00:23:36,400
from uh

598
00:23:36,400 --> 00:23:39,360
deutsche post which

599
00:23:39,360 --> 00:23:42,240
uh is a classic sender a typical seller

600
00:23:42,240 --> 00:23:43,840
for spoofing

601
00:23:43,840 --> 00:23:46,400
and uh we have to say dickens signature

602
00:23:46,400 --> 00:23:48,840
here and the deconstruction it says that

603
00:23:48,840 --> 00:23:52,720
uh not the full body is signed but yeah

604
00:23:52,720 --> 00:23:55,440
only up to a specific part like here at

605
00:23:55,440 --> 00:23:56,799
the end

606
00:23:56,799 --> 00:24:00,159
uh the mail also uh the consequence also

607
00:24:00,159 --> 00:24:02,480
says that we have some fields signed

608
00:24:02,480 --> 00:24:03,360
here

609
00:24:03,360 --> 00:24:04,640
but

610
00:24:04,640 --> 00:24:06,799
these are only included once that means

611
00:24:06,799 --> 00:24:09,600
the existing field is including but

612
00:24:09,600 --> 00:24:11,200
i can freely add

613
00:24:11,200 --> 00:24:13,039
additional fields these are not included

614
00:24:13,039 --> 00:24:14,480
in the signature

615
00:24:14,480 --> 00:24:17,520
so what i can do is here i can add

616
00:24:17,520 --> 00:24:18,400
another

617
00:24:18,400 --> 00:24:21,200
date i can add another two header i can

618
00:24:21,200 --> 00:24:23,360
add another content type and i can

619
00:24:23,360 --> 00:24:25,520
freely uh

620
00:24:25,520 --> 00:24:28,320
put stuff at the end which means with

621
00:24:28,320 --> 00:24:31,120
this change content type

622
00:24:31,120 --> 00:24:33,520
i have a different boundary which means

623
00:24:33,520 --> 00:24:35,520
all this part up to this boundary is

624
00:24:35,520 --> 00:24:37,679
seen only as a mine preamble is not

625
00:24:37,679 --> 00:24:39,760
visible in the middle client today but

626
00:24:39,760 --> 00:24:43,360
instead this part after that is shown

627
00:24:43,360 --> 00:24:45,200
and

628
00:24:45,200 --> 00:24:47,360
if i deliver this mail

629
00:24:47,360 --> 00:24:51,039
i can see that this part is shown and i

630
00:24:51,039 --> 00:24:53,760
can see that decam is still okay and

631
00:24:53,760 --> 00:24:56,640
says the properties of mail show that

632
00:24:56,640 --> 00:25:00,320
the date is changed the message id

633
00:25:00,320 --> 00:25:02,720
is i didn't know if i changed it in

634
00:25:02,720 --> 00:25:05,200
previous example but i can see for uh

635
00:25:05,200 --> 00:25:09,840
that daycam and denmark both pass

636
00:25:10,640 --> 00:25:13,360
so final words

637
00:25:13,360 --> 00:25:15,120
uh are there any solutions to this

638
00:25:15,120 --> 00:25:17,520
problem

639
00:25:18,000 --> 00:25:19,520
yeah

640
00:25:19,520 --> 00:25:21,760
maybe the problems are hard to fix there

641
00:25:21,760 --> 00:25:24,159
are zillions of mime implementations and

642
00:25:24,159 --> 00:25:26,720
scripts in the wild is often broken

643
00:25:26,720 --> 00:25:28,880
there is no money pulley on

644
00:25:28,880 --> 00:25:31,520
implementations which can could be used

645
00:25:31,520 --> 00:25:33,120
to enforce a

646
00:25:33,120 --> 00:25:34,799
minimal quality

647
00:25:34,799 --> 00:25:37,760
we have such monopoly browsers

648
00:25:37,760 --> 00:25:40,080
one can try to block

649
00:25:40,080 --> 00:25:44,080
such edge cases but this can cause uh

650
00:25:44,080 --> 00:25:46,880
unbearable correlatory effects we have

651
00:25:46,880 --> 00:25:49,760
i've seen this in the practice

652
00:25:49,760 --> 00:25:52,559
there's simply too much junk in the real

653
00:25:52,559 --> 00:25:54,320
world and

654
00:25:54,320 --> 00:25:55,679
in

655
00:25:55,679 --> 00:25:58,080
dubbed operation beats security it

656
00:25:58,080 --> 00:25:59,840
worked before we installed instead the

657
00:25:59,840 --> 00:26:01,039
firewall

658
00:26:01,039 --> 00:26:03,760
there's a way to sanitize the wheels but

659
00:26:03,760 --> 00:26:06,159
uh this can break stuff tools or it will

660
00:26:06,159 --> 00:26:08,880
break taken signatures pgp and s mime

661
00:26:08,880 --> 00:26:11,840
signatures i've seen this too

662
00:26:11,840 --> 00:26:13,120
and

663
00:26:13,120 --> 00:26:14,799
ultimately one can simply lock the

664
00:26:14,799 --> 00:26:16,320
problems

665
00:26:16,320 --> 00:26:17,679
and then hopes that somebody cares

666
00:26:17,679 --> 00:26:20,640
actually about the locks

667
00:26:21,919 --> 00:26:23,620
thank you

668
00:26:23,620 --> 00:26:28,620
[Applause]

669
00:26:31,440 --> 00:26:34,400
so do we have any questions for stefan

670
00:26:34,400 --> 00:26:39,799
and his very optimistic outlook on mime

671
00:26:42,400 --> 00:26:44,880
so steph and i have one question and you

672
00:26:44,880 --> 00:26:47,200
kind of addressed it in your last slide

673
00:26:47,200 --> 00:26:50,799
if i am an administrator of an email

674
00:26:50,799 --> 00:26:53,200
service what what can i do is there

675
00:26:53,200 --> 00:26:55,520
anything that i should

676
00:26:55,520 --> 00:26:58,240
do today to protect against

677
00:26:58,240 --> 00:27:01,279
attacks like this

678
00:27:03,360 --> 00:27:07,760
i think there's no good answer to this

679
00:27:07,760 --> 00:27:08,799
because

680
00:27:08,799 --> 00:27:10,880
actually we we've built in our product

681
00:27:10,880 --> 00:27:13,279
all the other protections against these

682
00:27:13,279 --> 00:27:16,400
attacks i have shown and we had to

683
00:27:16,400 --> 00:27:18,799
make a lot of these protections

684
00:27:18,799 --> 00:27:21,039
optional because there are a lot of junk

685
00:27:21,039 --> 00:27:23,440
meals outside which are not spam meals

686
00:27:23,440 --> 00:27:25,440
which are real males but which are

687
00:27:25,440 --> 00:27:28,320
actually invalid

688
00:27:29,760 --> 00:27:33,720
okay there's another question

689
00:27:34,640 --> 00:27:38,399
i'm loud um hi um have you have you

690
00:27:38,399 --> 00:27:39,919
taken a look at

691
00:27:39,919 --> 00:27:41,919
sometimes when you forward an email with

692
00:27:41,919 --> 00:27:44,880
attachments uh then in different kinds

693
00:27:44,880 --> 00:27:46,640
of email clients or webmail clients they

694
00:27:46,640 --> 00:27:48,640
get unfolded

695
00:27:48,640 --> 00:27:49,840
even though

696
00:27:49,840 --> 00:27:52,080
it's an attachment heavy have you been

697
00:27:52,080 --> 00:27:54,799
looking into this kind of scenario

698
00:27:54,799 --> 00:27:56,640
because i

699
00:27:56,640 --> 00:27:58,320
used to fix

700
00:27:58,320 --> 00:28:00,720
a bug in a webmail client where there's

701
00:28:00,720 --> 00:28:02,559
an attachment and

702
00:28:02,559 --> 00:28:05,520
a forward with an attachment and they

703
00:28:05,520 --> 00:28:08,320
were unfolded and this kind of helps

704
00:28:08,320 --> 00:28:09,520
sometimes

705
00:28:09,520 --> 00:28:12,799
mitigating also or some bypass some

706
00:28:12,799 --> 00:28:15,120
firewall rules

707
00:28:15,120 --> 00:28:19,360
yeah forwarding meals is it

708
00:28:19,360 --> 00:28:20,720
a strange thing they are there there are

709
00:28:20,720 --> 00:28:22,159
two options to follow the meals the

710
00:28:22,159 --> 00:28:23,679
inline-four wedding at the forwarding is

711
00:28:23,679 --> 00:28:25,039
attachment

712
00:28:25,039 --> 00:28:26,799
and uh supporting this attachment is

713
00:28:26,799 --> 00:28:29,120
supposed to just uh put in the origin

714
00:28:29,120 --> 00:28:31,440
email but one can actually modify it and

715
00:28:31,440 --> 00:28:33,679
then there are different problems on top

716
00:28:33,679 --> 00:28:36,559
of this because if the original mail was

717
00:28:36,559 --> 00:28:39,200
transferred over a path which is

718
00:28:39,200 --> 00:28:40,880
eight byte clean

719
00:28:40,880 --> 00:28:43,679
and uh then i forward the smear and the

720
00:28:43,679 --> 00:28:45,279
the next pass is not eight byte clean

721
00:28:45,279 --> 00:28:48,080
which is a traditional path with smtp

722
00:28:48,080 --> 00:28:49,200
then

723
00:28:49,200 --> 00:28:53,760
i might need to rewrite everything

724
00:28:55,520 --> 00:28:56,799
so it can

725
00:28:56,799 --> 00:28:59,600
it could be used to kind of sanitize but

726
00:28:59,600 --> 00:29:02,559
uh it will then also it might also break

727
00:29:02,559 --> 00:29:05,039
it might break the signatures this might

728
00:29:05,039 --> 00:29:08,879
break pgp and as my signatures

729
00:29:10,320 --> 00:29:12,000
you mentioned that you generate a lot of

730
00:29:12,000 --> 00:29:13,440
test cases

731
00:29:13,440 --> 00:29:16,640
are you aware of any publicly available

732
00:29:16,640 --> 00:29:18,799
weaponized frameworks to exploit these

733
00:29:18,799 --> 00:29:20,720
issues so that i can target specific

734
00:29:20,720 --> 00:29:23,360
setups and generate a mail that will

735
00:29:23,360 --> 00:29:26,559
bypass these checks now i'm not aware of

736
00:29:26,559 --> 00:29:28,640
any other research in this area in this

737
00:29:28,640 --> 00:29:32,080
steps but if you want to start searching

738
00:29:32,080 --> 00:29:34,159
come to me and i give you test cases and

739
00:29:34,159 --> 00:29:36,880
the frame vector generates these

740
00:29:36,880 --> 00:29:39,440
awesome thanks

741
00:29:39,440 --> 00:29:42,080
all right um i'm that should be the last

742
00:29:42,080 --> 00:29:44,399
question we've reached 15 o'clock please

743
00:29:44,399 --> 00:29:49,559
give stephen a hand is broken

