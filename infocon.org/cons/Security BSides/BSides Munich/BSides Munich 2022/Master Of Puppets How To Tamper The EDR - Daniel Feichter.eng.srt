1
00:00:03,000 --> 00:00:05,040
[Applause]

2
00:00:05,040 --> 00:00:07,520
so good morning besides first of all

3
00:00:07,520 --> 00:00:09,679
thank you to the team from b-side munich

4
00:00:09,679 --> 00:00:11,120
for the organization

5
00:00:11,120 --> 00:00:13,040
and for giving me the chance to speak

6
00:00:13,040 --> 00:00:14,719
here today

7
00:00:14,719 --> 00:00:17,039
welcome to master of puppets how to

8
00:00:17,039 --> 00:00:19,119
temper the idia

9
00:00:19,119 --> 00:00:21,199
my name is daniel i'm the founder of the

10
00:00:21,199 --> 00:00:23,920
company infosec tyrol with which i

11
00:00:23,920 --> 00:00:25,840
mainly focus on offensive security

12
00:00:25,840 --> 00:00:27,680
service on windows

13
00:00:27,680 --> 00:00:30,160
and i also spend a lot of my time in

14
00:00:30,160 --> 00:00:33,200
researching learning and in the area of

15
00:00:33,200 --> 00:00:35,760
antivirus products cdr products and the

16
00:00:35,760 --> 00:00:38,640
windows internals

17
00:00:38,719 --> 00:00:40,719
today we take a look at the mitre

18
00:00:40,719 --> 00:00:43,200
subtechnic imper defenses

19
00:00:43,200 --> 00:00:45,680
motival or modifying tools

20
00:00:45,680 --> 00:00:48,320
and we focus on how can we disable the

21
00:00:48,320 --> 00:00:50,960
main functionalities from an edr by

22
00:00:50,960 --> 00:00:53,680
targeted control tempering of specific

23
00:00:53,680 --> 00:00:55,680
key components from them

24
00:00:55,680 --> 00:00:57,520
but we want to achieve this without

25
00:00:57,520 --> 00:00:59,280
relying on an uninstalled password or

26
00:00:59,280 --> 00:01:01,840
token uninstall software uninstalling

27
00:01:01,840 --> 00:01:03,600
the product generally

28
00:01:03,600 --> 00:01:06,640
or by using the windows security center

29
00:01:06,640 --> 00:01:09,040
i would like to point out when i speak

30
00:01:09,040 --> 00:01:12,000
about edr systems in that presentation i

31
00:01:12,000 --> 00:01:13,840
always refer to products which are also

32
00:01:13,840 --> 00:01:15,840
in cloud including an antivirus module

33
00:01:15,840 --> 00:01:19,280
so an epp edr combination

34
00:01:19,280 --> 00:01:21,040
also i would like to point out it's

35
00:01:21,040 --> 00:01:22,960
awesome only my personal research my

36
00:01:22,960 --> 00:01:24,479
personal experience

37
00:01:24,479 --> 00:01:26,560
and the shown strategy or concept

38
00:01:26,560 --> 00:01:31,200
applies to multiple products on windows

39
00:01:31,759 --> 00:01:34,880
in the first step we try to get a better

40
00:01:34,880 --> 00:01:36,240
understanding from the different

41
00:01:36,240 --> 00:01:39,119
components from edrs in user space and

42
00:01:39,119 --> 00:01:41,200
in kernel space we learn a little bit

43
00:01:41,200 --> 00:01:43,119
about their functionality

44
00:01:43,119 --> 00:01:45,040
and important house the relationship

45
00:01:45,040 --> 00:01:46,880
between the different components in user

46
00:01:46,880 --> 00:01:49,360
space and kernel space

47
00:01:49,360 --> 00:01:51,280
in the second step we want to use the

48
00:01:51,280 --> 00:01:53,920
gain knowledge to find a way or to find

49
00:01:53,920 --> 00:01:56,000
more or less the key element

50
00:01:56,000 --> 00:01:57,759
depending on the product

51
00:01:57,759 --> 00:02:00,079
to permanently disable the main

52
00:02:00,079 --> 00:02:02,079
functionality from an edr

53
00:02:02,079 --> 00:02:04,560
and permanently get rid of

54
00:02:04,560 --> 00:02:07,040
prevention by the antivirus module and

55
00:02:07,040 --> 00:02:09,520
permanently get rid of detections and

56
00:02:09,520 --> 00:02:12,080
telemetry footprint host isolation read

57
00:02:12,080 --> 00:02:15,200
time response and edr sensor recovery

58
00:02:15,200 --> 00:02:18,640
feature by the edr module

59
00:02:18,640 --> 00:02:20,560
so we have big plans

60
00:02:20,560 --> 00:02:22,560
at the end of the presentation we should

61
00:02:22,560 --> 00:02:24,480
more or less able to depending on the

62
00:02:24,480 --> 00:02:25,440
product

63
00:02:25,440 --> 00:02:29,599
to disable the edr

64
00:02:30,160 --> 00:02:32,160
so this presentation is not about zero

65
00:02:32,160 --> 00:02:34,640
days um it's more about learning a

66
00:02:34,640 --> 00:02:36,319
little bit about the windows internals

67
00:02:36,319 --> 00:02:38,959
and how do edr products work on windows

68
00:02:38,959 --> 00:02:41,280
so there can be some situations where it

69
00:02:41,280 --> 00:02:44,400
also be possible to do some activities

70
00:02:44,400 --> 00:02:47,040
in unprivileged user way but normally

71
00:02:47,040 --> 00:02:49,120
you need a privileged user

72
00:02:49,120 --> 00:02:51,599
in high integrity or system integrity

73
00:02:51,599 --> 00:02:53,040
level

74
00:02:53,040 --> 00:02:56,319
but despite um everybody which has fight

75
00:02:56,319 --> 00:02:58,480
around with edrs knows that despite you

76
00:02:58,480 --> 00:03:00,560
have a privileged user

77
00:03:00,560 --> 00:03:02,560
most well-known edr products can still

78
00:03:02,560 --> 00:03:06,239
be very annoying and be a problem

79
00:03:06,239 --> 00:03:08,720
normally it is not possible to simply

80
00:03:08,720 --> 00:03:10,400
uninstall the product

81
00:03:10,400 --> 00:03:12,319
because if the blue team has done its

82
00:03:12,319 --> 00:03:14,239
homework correctly

83
00:03:14,239 --> 00:03:16,959
you have to know the uninstall password

84
00:03:16,959 --> 00:03:18,720
to uninstall the product

85
00:03:18,720 --> 00:03:21,440
and as mentioned in the intro we want to

86
00:03:21,440 --> 00:03:22,640
achieve this

87
00:03:22,640 --> 00:03:24,400
without relying on an uninstalled

88
00:03:24,400 --> 00:03:26,879
password

89
00:03:27,519 --> 00:03:29,440
so imagine the following scenario you

90
00:03:29,440 --> 00:03:31,519
have landed a successful fish and you

91
00:03:31,519 --> 00:03:33,680
were also able to escalate your local

92
00:03:33,680 --> 00:03:35,040
privileges

93
00:03:35,040 --> 00:03:37,440
my case i was able to use the print

94
00:03:37,440 --> 00:03:40,640
exploit to escalate to system integrity

95
00:03:40,640 --> 00:03:41,840
context

96
00:03:41,840 --> 00:03:44,159
and by having a look at the process

97
00:03:44,159 --> 00:03:46,480
structure of the compromised machine

98
00:03:46,480 --> 00:03:48,000
i saw that there is another interesting

99
00:03:48,000 --> 00:03:49,599
user session open

100
00:03:49,599 --> 00:03:52,239
so believe it or not in my case it was

101
00:03:52,239 --> 00:03:54,400
one from the domain admins

102
00:03:54,400 --> 00:03:56,640
and i knew okay

103
00:03:56,640 --> 00:03:59,040
could be maybe could be easy to get

104
00:03:59,040 --> 00:04:01,680
credentials by dumping delta's process

105
00:04:01,680 --> 00:04:04,799
or to impersonate as domain admin by

106
00:04:04,799 --> 00:04:06,560
token stealing

107
00:04:06,560 --> 00:04:08,879
but the problem was that i

108
00:04:08,879 --> 00:04:11,200
created a many alerts in the admin

109
00:04:11,200 --> 00:04:13,360
console from the product the blue team

110
00:04:13,360 --> 00:04:16,000
was informed and i got isolated from the

111
00:04:16,000 --> 00:04:17,440
machine

112
00:04:17,440 --> 00:04:19,600
and that was the starting point more or

113
00:04:19,600 --> 00:04:21,759
less from my journey

114
00:04:21,759 --> 00:04:23,120
digging deeper into the windows

115
00:04:23,120 --> 00:04:25,520
internals and edr products and find a

116
00:04:25,520 --> 00:04:28,080
way to disable the main functionality

117
00:04:28,080 --> 00:04:30,560
from them

118
00:04:30,639 --> 00:04:32,240
so we start with the user space

119
00:04:32,240 --> 00:04:35,040
component of a mdr and have a look at

120
00:04:35,040 --> 00:04:38,000
edr processes

121
00:04:38,000 --> 00:04:40,320
normally edr or the processors from vdr

122
00:04:40,320 --> 00:04:42,400
products are executed as process

123
00:04:42,400 --> 00:04:44,240
protected light processes

124
00:04:44,240 --> 00:04:46,400
this means that even if you have

125
00:04:46,400 --> 00:04:48,960
achieved system integrity context it

126
00:04:48,960 --> 00:04:50,479
shouldn't be possible to simply

127
00:04:50,479 --> 00:04:53,520
terminate the process

128
00:04:54,240 --> 00:04:56,720
but in the meantime there are a few ways

129
00:04:56,720 --> 00:04:59,600
how we can deal with uh ppl processors

130
00:04:59,600 --> 00:05:01,199
from red team site

131
00:05:01,199 --> 00:05:02,000
so

132
00:05:02,000 --> 00:05:05,520
uh one possibility can be to use the

133
00:05:05,520 --> 00:05:07,759
more or less the concept of a driver

134
00:05:07,759 --> 00:05:10,000
with the with another access

135
00:05:10,000 --> 00:05:12,880
vulnerability like the mse afterburner

136
00:05:12,880 --> 00:05:16,800
rtcore 64 driver

137
00:05:16,800 --> 00:05:19,039
so when we have a look at the picture

138
00:05:19,039 --> 00:05:21,759
the first step we try to escalate our

139
00:05:21,759 --> 00:05:24,240
unprivileged user to a local privileged

140
00:05:24,240 --> 00:05:27,039
user in high integrity or

141
00:05:27,039 --> 00:05:28,960
system integrity context

142
00:05:28,960 --> 00:05:30,800
and by this we should have the privilege

143
00:05:30,800 --> 00:05:33,520
to load a driver on windows

144
00:05:33,520 --> 00:05:34,639
and

145
00:05:34,639 --> 00:05:38,400
the by loading the rt core 64 driver we

146
00:05:38,400 --> 00:05:40,639
get also right access to kernel space

147
00:05:40,639 --> 00:05:41,919
because of the null

148
00:05:41,919 --> 00:05:44,320
access vulnerability

149
00:05:44,320 --> 00:05:45,759
and

150
00:05:45,759 --> 00:05:47,440
compared to user space in kernel space

151
00:05:47,440 --> 00:05:49,120
and windows there is no isolation

152
00:05:49,120 --> 00:05:51,199
between the different code sections

153
00:05:51,199 --> 00:05:53,440
this means that theoretically we would

154
00:05:53,440 --> 00:05:54,560
have

155
00:05:54,560 --> 00:05:55,280
whole

156
00:05:55,280 --> 00:05:56,800
access to the whole access from kernel

157
00:05:56,800 --> 00:05:57,919
space

158
00:05:57,919 --> 00:06:00,319
in this case we will use the one level

159
00:06:00,319 --> 00:06:02,639
driver to attach to the e-process

160
00:06:02,639 --> 00:06:06,160
structure from the ppl edr process and

161
00:06:06,160 --> 00:06:09,360
we temporarily patch the ppl flag and

162
00:06:09,360 --> 00:06:11,759
can then use

163
00:06:11,759 --> 00:06:14,800
different kind of tools to terminate the

164
00:06:14,800 --> 00:06:16,960
not longer protective process

165
00:06:16,960 --> 00:06:19,919
so for example ppl killer uses the rtcor

166
00:06:19,919 --> 00:06:22,160
64 driver in his code

167
00:06:22,160 --> 00:06:23,759
or maybe cuts

168
00:06:23,759 --> 00:06:27,199
brings his own device driver

169
00:06:28,479 --> 00:06:30,400
also an interesting way depending on the

170
00:06:30,400 --> 00:06:32,400
product it can work if you are able to

171
00:06:32,400 --> 00:06:34,240
execute process hacker in a privileged

172
00:06:34,240 --> 00:06:35,440
way

173
00:06:35,440 --> 00:06:37,520
depending on the product it is possible

174
00:06:37,520 --> 00:06:39,600
to directly terminate

175
00:06:39,600 --> 00:06:42,160
the ppl process in the system session

176
00:06:42,160 --> 00:06:44,400
without removing the ppl flag in the

177
00:06:44,400 --> 00:06:47,638
first step

178
00:06:48,319 --> 00:06:50,160
the conclusion of process tampering is

179
00:06:50,160 --> 00:06:51,520
that um

180
00:06:51,520 --> 00:06:53,199
there are ways to temper the process to

181
00:06:53,199 --> 00:06:55,360
terminate the processes but from my

182
00:06:55,360 --> 00:06:57,919
observation this termination was always

183
00:06:57,919 --> 00:07:00,160
just temporary so

184
00:07:00,160 --> 00:07:01,919
if you terminate the process a few

185
00:07:01,919 --> 00:07:04,800
seconds later or at least a minute later

186
00:07:04,800 --> 00:07:08,800
the process gets restarted and ddr is is

187
00:07:08,800 --> 00:07:11,280
back there

188
00:07:12,000 --> 00:07:13,680
because of this in the next step we take

189
00:07:13,680 --> 00:07:15,440
a look at the user space component and a

190
00:07:15,440 --> 00:07:17,120
closer look at edr

191
00:07:17,120 --> 00:07:19,520
services

192
00:07:19,520 --> 00:07:22,479
so we have to identify the service

193
00:07:22,479 --> 00:07:24,720
which is connected to the protected

194
00:07:24,720 --> 00:07:26,000
process

195
00:07:26,000 --> 00:07:28,080
and the protected service and the

196
00:07:28,080 --> 00:07:30,080
protected process more or less builds

197
00:07:30,080 --> 00:07:32,479
together the user's base component

198
00:07:32,479 --> 00:07:35,199
but similar to protected processes even

199
00:07:35,199 --> 00:07:37,039
if you have achieved system integrity on

200
00:07:37,039 --> 00:07:39,759
windows it's not simply possible to

201
00:07:39,759 --> 00:07:43,840
pause stop or disable a protected

202
00:07:43,840 --> 00:07:45,120
but important

203
00:07:45,120 --> 00:07:47,599
in also important in our situation when

204
00:07:47,599 --> 00:07:50,639
we have a look at the recovery tab from

205
00:07:50,639 --> 00:07:52,960
the protected service we can see that

206
00:07:52,960 --> 00:07:54,560
the service is the component which is

207
00:07:54,560 --> 00:07:57,120
responsible for restarting the process

208
00:07:57,120 --> 00:08:01,680
the ppl process after terminating

209
00:08:03,280 --> 00:08:06,160
conclusion on services

210
00:08:06,160 --> 00:08:07,599
we learned a little bit about the

211
00:08:07,599 --> 00:08:08,879
relationship between protective

212
00:08:08,879 --> 00:08:10,840
processes and protected

213
00:08:10,840 --> 00:08:14,160
services similar to processors it is not

214
00:08:14,160 --> 00:08:15,599
possible also not possible to

215
00:08:15,599 --> 00:08:17,120
temporarily

216
00:08:17,120 --> 00:08:18,879
disable the service

217
00:08:18,879 --> 00:08:19,759
um

218
00:08:19,759 --> 00:08:21,759
but

219
00:08:21,759 --> 00:08:23,840
maybe we can use a find a way to

220
00:08:23,840 --> 00:08:25,280
still disable

221
00:08:25,280 --> 00:08:27,840
the service

222
00:08:28,240 --> 00:08:30,080
because of this in the next step we take

223
00:08:30,080 --> 00:08:32,320
a look at the user-based component and

224
00:08:32,320 --> 00:08:36,080
edr registry keys

225
00:08:36,080 --> 00:08:38,799
so you have to identify the edi rec key

226
00:08:38,799 --> 00:08:40,559
from the user's base component

227
00:08:40,559 --> 00:08:42,479
normally you can find them under control

228
00:08:42,479 --> 00:08:45,120
set a current contour set services

229
00:08:45,120 --> 00:08:47,600
and there are two interesting entries

230
00:08:47,600 --> 00:08:48,480
so

231
00:08:48,480 --> 00:08:51,440
launch protected and start entry because

232
00:08:51,440 --> 00:08:53,760
time is a little bit short

233
00:08:53,760 --> 00:08:56,320
we will focus on the start entry

234
00:08:56,320 --> 00:08:59,839
and by the start entry we can have

235
00:08:59,839 --> 00:09:02,560
influence on the initialization behavior

236
00:09:02,560 --> 00:09:04,720
from the protected service

237
00:09:04,720 --> 00:09:07,200
this means if we would be able to change

238
00:09:07,200 --> 00:09:09,279
the end the value for the entry for the

239
00:09:09,279 --> 00:09:11,680
start entry from the value 2 which is

240
00:09:11,680 --> 00:09:14,640
equal to autoload to the value 4 which

241
00:09:14,640 --> 00:09:16,880
is equal to disabled it should be

242
00:09:16,880 --> 00:09:20,000
possible to disable the protected

243
00:09:20,000 --> 00:09:22,160
service and furthermore the user space

244
00:09:22,160 --> 00:09:24,080
component from the edr

245
00:09:24,080 --> 00:09:26,640
but the problem similar to processes and

246
00:09:26,640 --> 00:09:29,120
services from the edr even in system

247
00:09:29,120 --> 00:09:31,920
integrity it is not possible with most

248
00:09:31,920 --> 00:09:33,360
products

249
00:09:33,360 --> 00:09:34,240
and

250
00:09:34,240 --> 00:09:35,920
depending on the product when you try to

251
00:09:35,920 --> 00:09:37,839
temper the rec key you will create an

252
00:09:37,839 --> 00:09:39,680
alert in the web console that's what

253
00:09:39,680 --> 00:09:42,720
this was the problem in my journey and

254
00:09:42,720 --> 00:09:45,120
the reason why i was isolated from the

255
00:09:45,120 --> 00:09:48,320
compromised machine

256
00:09:49,680 --> 00:09:51,680
so the interim status at the moment we

257
00:09:51,680 --> 00:09:54,080
are not are really able to permanently

258
00:09:54,080 --> 00:09:56,240
disable the edr or the user space

259
00:09:56,240 --> 00:09:58,399
component but we learned a little bit

260
00:09:58,399 --> 00:10:00,640
about the uh relationship between the

261
00:10:00,640 --> 00:10:02,959
different components in user space

262
00:10:02,959 --> 00:10:06,000
and we see that the red key could be

263
00:10:06,000 --> 00:10:08,079
more or less the key element

264
00:10:08,079 --> 00:10:09,920
by changing the value for the start

265
00:10:09,920 --> 00:10:13,519
entry to permanently disable the user

266
00:10:13,519 --> 00:10:16,079
space component but at the moment it is

267
00:10:16,079 --> 00:10:18,560
not possible because the red key

268
00:10:18,560 --> 00:10:20,560
or their keys are protected by a temper

269
00:10:20,560 --> 00:10:25,439
protection mechanism by the edr

270
00:10:26,000 --> 00:10:28,399
because of this in the fourth step we

271
00:10:28,399 --> 00:10:31,040
make our first step into kernel land and

272
00:10:31,040 --> 00:10:35,279
have a look at kernel callback routines

273
00:10:35,279 --> 00:10:37,920
so since the introduction of kernel

274
00:10:37,920 --> 00:10:40,880
patch protection hk patch card it is no

275
00:10:40,880 --> 00:10:42,720
longer possible

276
00:10:42,720 --> 00:10:46,160
officially possible for er vendors to

277
00:10:46,160 --> 00:10:48,640
set their hooks in kernel space

278
00:10:48,640 --> 00:10:51,200
so they are forced in users base to use

279
00:10:51,200 --> 00:10:53,600
users based api hooking

280
00:10:53,600 --> 00:10:56,320
but despite patch guard they can use in

281
00:10:56,320 --> 00:10:58,399
kernel space a mechanism which is called

282
00:10:58,399 --> 00:11:01,920
callback routines and register different

283
00:11:01,920 --> 00:11:04,959
kind of callbacks to realize different

284
00:11:04,959 --> 00:11:07,360
kind of tasks in user space

285
00:11:07,360 --> 00:11:09,760
so for example they can use the process

286
00:11:09,760 --> 00:11:13,279
notify routine to register and realize

287
00:11:13,279 --> 00:11:15,839
telemetry collection in context of

288
00:11:15,839 --> 00:11:17,680
process creations

289
00:11:17,680 --> 00:11:19,360
also they can use the process notify

290
00:11:19,360 --> 00:11:22,160
routine to realize user space dll

291
00:11:22,160 --> 00:11:24,959
injection and furthermore realize users

292
00:11:24,959 --> 00:11:28,800
based api hooking

293
00:11:28,800 --> 00:11:31,440
but more important in our situation now

294
00:11:31,440 --> 00:11:33,360
the callbacks routines by edr products

295
00:11:33,360 --> 00:11:35,839
can also be used to protect their own

296
00:11:35,839 --> 00:11:38,160
registry keys so this is more or less

297
00:11:38,160 --> 00:11:40,000
could be the the key element for the

298
00:11:40,000 --> 00:11:41,680
register for the temporal protection for

299
00:11:41,680 --> 00:11:44,560
rec for the registry keys

300
00:11:44,560 --> 00:11:46,959
in this case the product is using the cm

301
00:11:46,959 --> 00:11:50,480
register callback function

302
00:11:50,480 --> 00:11:52,480
but we will see in our first

303
00:11:52,480 --> 00:11:55,279
pre-recorded demo because i have to

304
00:11:55,279 --> 00:11:58,399
blur every sensitive information we see

305
00:11:58,399 --> 00:11:59,200
that

306
00:11:59,200 --> 00:12:01,360
not just the cm register callback can be

307
00:12:01,360 --> 00:12:05,120
used they also use all the callbacks to

308
00:12:05,120 --> 00:12:06,800
protect their keys

309
00:12:06,800 --> 00:12:08,800
and in the first demo we try to patch

310
00:12:08,800 --> 00:12:11,120
the process notify callback temporary

311
00:12:11,120 --> 00:12:13,760
key disable the user space component and

312
00:12:13,760 --> 00:12:17,880
have a look at the impact

313
00:12:24,079 --> 00:12:26,160
so for first plausible check because at

314
00:12:26,160 --> 00:12:27,839
least we want to

315
00:12:27,839 --> 00:12:29,440
dump

316
00:12:29,440 --> 00:12:32,440
okay

317
00:12:55,200 --> 00:12:58,320
okay that looks better

318
00:13:01,680 --> 00:13:04,240
for first possible check to see that the

319
00:13:04,240 --> 00:13:05,600
antivirus component and ddr is

320
00:13:05,600 --> 00:13:06,880
completely configured and at least we

321
00:13:06,880 --> 00:13:08,399
want to get credentials from the airsoft

322
00:13:08,399 --> 00:13:10,480
process we execute the pre-compiled

323
00:13:10,480 --> 00:13:11,839
version from mimi cuts which you can

324
00:13:11,839 --> 00:13:13,200
find on github

325
00:13:13,200 --> 00:13:15,440
so we execute it and we should see that

326
00:13:15,440 --> 00:13:17,600
you get prevented by the anti-wireless

327
00:13:17,600 --> 00:13:20,800
module and the file gets deleted

328
00:13:20,800 --> 00:13:22,320
in the next step we make a

329
00:13:22,320 --> 00:13:25,600
short possible check in context of

330
00:13:25,600 --> 00:13:28,240
the temporal protection so

331
00:13:28,240 --> 00:13:30,639
at the beginning we try to

332
00:13:30,639 --> 00:13:32,800
terminate the protective process

333
00:13:32,800 --> 00:13:34,959
by executing process explorer and system

334
00:13:34,959 --> 00:13:37,360
integrity context but we are not allowed

335
00:13:37,360 --> 00:13:39,120
to do this

336
00:13:39,120 --> 00:13:42,720
also in case of the protected service

337
00:13:42,720 --> 00:13:44,720
even in system integrity we get an

338
00:13:44,720 --> 00:13:47,440
access denied

339
00:13:47,440 --> 00:13:50,320
and if we try to tamper the value for

340
00:13:50,320 --> 00:13:52,399
the start entry to disable the user

341
00:13:52,399 --> 00:13:55,120
space component to the value of four

342
00:13:55,120 --> 00:13:57,279
we also get an access tonight and

343
00:13:57,279 --> 00:13:58,959
depending on the product now we will

344
00:13:58,959 --> 00:14:01,120
have created an alert and you get with a

345
00:14:01,120 --> 00:14:02,399
high probability

346
00:14:02,399 --> 00:14:04,560
isolated from the machine by the blue

347
00:14:04,560 --> 00:14:06,560
team

348
00:14:06,560 --> 00:14:09,760
because of this we use a very nice um pc

349
00:14:09,760 --> 00:14:11,120
which you can find on github it is

350
00:14:11,120 --> 00:14:13,440
called cheeky blinder it's not from my

351
00:14:13,440 --> 00:14:15,519
side

352
00:14:15,519 --> 00:14:18,880
i called it in this case pari.dxe

353
00:14:18,880 --> 00:14:22,320
and uh in the first

354
00:14:22,320 --> 00:14:26,240
step we will use that poc to load the

355
00:14:26,240 --> 00:14:28,160
driver with the availability the rtcor

356
00:14:28,160 --> 00:14:31,760
64 driver to get access to kernel space

357
00:14:31,760 --> 00:14:33,440
so we load the driver the driver is

358
00:14:33,440 --> 00:14:36,959
initialized and in the next step we list

359
00:14:36,959 --> 00:14:38,959
all the registered process notify

360
00:14:38,959 --> 00:14:40,480
routines

361
00:14:40,480 --> 00:14:42,800
on the machine

362
00:14:42,800 --> 00:14:45,360
and the blurred one on the lower side is

363
00:14:45,360 --> 00:14:48,800
our routine from ddr product

364
00:14:48,800 --> 00:14:51,760
in the next step we will use the poc to

365
00:14:51,760 --> 00:14:55,880
temporarily patch the callback

366
00:15:00,240 --> 00:15:02,480
and after reopening the registry it

367
00:15:02,480 --> 00:15:04,480
should now be possible to change the

368
00:15:04,480 --> 00:15:06,959
value for the start entry and to disable

369
00:15:06,959 --> 00:15:09,199
the user's base component because temple

370
00:15:09,199 --> 00:15:12,639
protection is now not longer

371
00:15:12,639 --> 00:15:13,839
active

372
00:15:13,839 --> 00:15:15,680
so we change the value to 4 which is

373
00:15:15,680 --> 00:15:18,320
equal to disabled and we have to reboot

374
00:15:18,320 --> 00:15:21,480
the machine

375
00:15:26,000 --> 00:15:27,839
after the reboot we see at the lower

376
00:15:27,839 --> 00:15:30,399
right side that now the edr product is

377
00:15:30,399 --> 00:15:31,920
no longer registered in the windows

378
00:15:31,920 --> 00:15:34,320
security center and also by having a

379
00:15:34,320 --> 00:15:35,920
look at the structure from process

380
00:15:35,920 --> 00:15:38,240
explorer we now see not longer blood

381
00:15:38,240 --> 00:15:41,120
sections because and there are no longer

382
00:15:41,120 --> 00:15:44,399
processes by the user space component

383
00:15:44,399 --> 00:15:46,399
also if we check the status from the

384
00:15:46,399 --> 00:15:49,199
user space component we will see that

385
00:15:49,199 --> 00:15:50,800
the service is now

386
00:15:50,800 --> 00:15:53,199
stopped

387
00:15:53,199 --> 00:15:55,199
so it looks very nice maybe we have

388
00:15:55,199 --> 00:15:57,920
until now reached all of our goals

389
00:15:57,920 --> 00:16:00,800
but this is not the case

390
00:16:00,800 --> 00:16:02,560
because after the reboot we have a few

391
00:16:02,560 --> 00:16:04,880
problems

392
00:16:04,880 --> 00:16:06,480
we again

393
00:16:06,480 --> 00:16:08,320
list the registered callbacks on the

394
00:16:08,320 --> 00:16:09,600
machine

395
00:16:09,600 --> 00:16:11,920
and we will see that all the previously

396
00:16:11,920 --> 00:16:14,240
patched callbacks are re-registered

397
00:16:14,240 --> 00:16:16,560
again

398
00:16:16,639 --> 00:16:18,800
this means in case of prevention and

399
00:16:18,800 --> 00:16:20,639
detection based on kernel callback

400
00:16:20,639 --> 00:16:22,959
routines and furthermore windows uses

401
00:16:22,959 --> 00:16:25,279
user-based api hooking we again have the

402
00:16:25,279 --> 00:16:27,759
problem of prevention detection and

403
00:16:27,759 --> 00:16:31,440
especially telemetry footprinting

404
00:16:31,440 --> 00:16:33,120
so again when we execute mimi cuts we

405
00:16:33,120 --> 00:16:37,240
can again prevent it

406
00:16:38,160 --> 00:16:40,560
and despite the user space component is

407
00:16:40,560 --> 00:16:42,399
disabled

408
00:16:42,399 --> 00:16:44,639
we still have the problem that the blue

409
00:16:44,639 --> 00:16:46,639
team can use the isolate function to

410
00:16:46,639 --> 00:16:48,160
isolate our

411
00:16:48,160 --> 00:16:50,399
compromised machine so in a few seconds

412
00:16:50,399 --> 00:16:53,279
we will see that we lose connection to

413
00:16:53,279 --> 00:16:57,079
our compromised target

414
00:17:15,919 --> 00:17:17,439
so what's the conclusion from the first

415
00:17:17,439 --> 00:17:19,520
demo we saw that we can more or less use

416
00:17:19,520 --> 00:17:21,439
a concept of the buildable device driver

417
00:17:21,439 --> 00:17:23,599
to get access to kernel space

418
00:17:23,599 --> 00:17:26,160
um remove or patch the respective

419
00:17:26,160 --> 00:17:28,559
callback temper direct key

420
00:17:28,559 --> 00:17:30,080
change the value for the start enter to

421
00:17:30,080 --> 00:17:33,120
four and by restarting the machine we

422
00:17:33,120 --> 00:17:35,039
can permanently disable the user space

423
00:17:35,039 --> 00:17:36,080
component

424
00:17:36,080 --> 00:17:39,200
but we also saw that only disabling the

425
00:17:39,200 --> 00:17:41,200
user space component do not really have

426
00:17:41,200 --> 00:17:43,840
strong impact in reaching our previously

427
00:17:43,840 --> 00:17:46,400
defined goals

428
00:17:46,400 --> 00:17:47,200
and

429
00:17:47,200 --> 00:17:48,880
no matter after

430
00:17:48,880 --> 00:17:50,320
if you have rebooted the machine and you

431
00:17:50,320 --> 00:17:51,600
would

432
00:17:51,600 --> 00:17:54,000
again patch all the callbacks from the

433
00:17:54,000 --> 00:17:56,720
edr you would still have the pos the

434
00:17:56,720 --> 00:17:58,880
problem that

435
00:17:58,880 --> 00:18:02,240
host isolation uh the recovery feature

436
00:18:02,240 --> 00:18:04,880
and um

437
00:18:04,880 --> 00:18:06,400
the last one

438
00:18:06,400 --> 00:18:07,120
yeah

439
00:18:07,120 --> 00:18:08,480
the features which bluetooth can be used

440
00:18:08,480 --> 00:18:10,080
in the web console is still active so

441
00:18:10,080 --> 00:18:12,000
the biggest problem is that despite the

442
00:18:12,000 --> 00:18:14,000
user space component is system easily

443
00:18:14,000 --> 00:18:16,240
disabled and you patch all the callbacks

444
00:18:16,240 --> 00:18:18,160
you still have the problem with the host

445
00:18:18,160 --> 00:18:19,360
isolation

446
00:18:19,360 --> 00:18:21,840
even if you would not do a reboot and

447
00:18:21,840 --> 00:18:23,039
you were

448
00:18:23,039 --> 00:18:24,640
you just want to temporary patch the

449
00:18:24,640 --> 00:18:27,120
callback

450
00:18:27,440 --> 00:18:30,720
you still have the problem that um also

451
00:18:30,720 --> 00:18:33,679
your your host can still get isolated by

452
00:18:33,679 --> 00:18:35,039
the blue team

453
00:18:35,039 --> 00:18:38,400
so not really if uh efficient from uh

454
00:18:38,400 --> 00:18:41,760
this point um and we have to take our

455
00:18:41,760 --> 00:18:44,240
last step

456
00:18:44,240 --> 00:18:46,080
in the final step we take a look at the

457
00:18:46,080 --> 00:18:48,640
edr mini filter driver

458
00:18:48,640 --> 00:18:51,919
and the mini filter driver is the

459
00:18:51,919 --> 00:18:54,799
component which is responsible for in

460
00:18:54,799 --> 00:18:57,679
general registering callbacks

461
00:18:57,679 --> 00:18:59,520
from the edr

462
00:18:59,520 --> 00:19:01,919
and that is always also the problem why

463
00:19:01,919 --> 00:19:03,600
even if the user space component is

464
00:19:03,600 --> 00:19:05,280
disabled the mini filter driver is a

465
00:19:05,280 --> 00:19:07,520
separate component is still active and

466
00:19:07,520 --> 00:19:10,080
but is after the reboot the callbacks

467
00:19:10,080 --> 00:19:10,960
get

468
00:19:10,960 --> 00:19:13,280
re-registered again

469
00:19:13,280 --> 00:19:15,200
but the good thing is that the

470
00:19:15,200 --> 00:19:17,760
minifilter has its own registry key

471
00:19:17,760 --> 00:19:18,799
and

472
00:19:18,799 --> 00:19:21,039
has a similar structure to the user

473
00:19:21,039 --> 00:19:22,559
space component

474
00:19:22,559 --> 00:19:26,080
this means that depending on the product

475
00:19:26,080 --> 00:19:28,480
the mini filter driver can be more or

476
00:19:28,480 --> 00:19:30,080
less the key element

477
00:19:30,080 --> 00:19:32,240
to

478
00:19:32,320 --> 00:19:33,440
permanently disable the main

479
00:19:33,440 --> 00:19:35,919
functionalities and get rid of

480
00:19:35,919 --> 00:19:37,120
prevention

481
00:19:37,120 --> 00:19:40,400
host isolation return response and edr

482
00:19:40,400 --> 00:19:42,400
recovery feature

483
00:19:42,400 --> 00:19:44,720
to check this out we will have a look at

484
00:19:44,720 --> 00:19:46,240
our second demo

485
00:19:46,240 --> 00:19:48,320
where we try to tamper the mini filter

486
00:19:48,320 --> 00:19:49,760
driver

487
00:19:49,760 --> 00:19:52,320
and permanently get rid of prevention

488
00:19:52,320 --> 00:19:53,600
detection

489
00:19:53,600 --> 00:19:55,280
telemetry collection

490
00:19:55,280 --> 00:19:58,000
and so on

491
00:20:04,240 --> 00:20:05,840
so we start at the point where we have

492
00:20:05,840 --> 00:20:08,240
stop remember we get isolated from the

493
00:20:08,240 --> 00:20:09,280
machine

494
00:20:09,280 --> 00:20:11,280
so we will lift the containment and get

495
00:20:11,280 --> 00:20:13,600
back connection to our compromised

496
00:20:13,600 --> 00:20:16,000
target

497
00:20:16,000 --> 00:20:17,600
and very important

498
00:20:17,600 --> 00:20:19,600
now we

499
00:20:19,600 --> 00:20:21,919
want to re-enable the user space

500
00:20:21,919 --> 00:20:24,240
component in the first step

501
00:20:24,240 --> 00:20:26,320
and only disable the minifilter driver

502
00:20:26,320 --> 00:20:28,799
and to and because we want to check what

503
00:20:28,799 --> 00:20:30,720
is the impact if we only disable the

504
00:20:30,720 --> 00:20:33,960
mini filter

505
00:20:34,000 --> 00:20:36,240
we patched uh re list the callbacks

506
00:20:36,240 --> 00:20:38,080
again we see that the process notify

507
00:20:38,080 --> 00:20:40,559
routine is still there we query the user

508
00:20:40,559 --> 00:20:43,039
space component service

509
00:20:43,039 --> 00:20:45,280
which is currently stopped

510
00:20:45,280 --> 00:20:46,960
and we check the status from the mini

511
00:20:46,960 --> 00:20:48,960
filter from media

512
00:20:48,960 --> 00:20:50,480
and we see that the minifilter is still

513
00:20:50,480 --> 00:20:52,880
running

514
00:20:53,200 --> 00:20:55,039
so we open the registry

515
00:20:55,039 --> 00:20:55,919
and

516
00:20:55,919 --> 00:20:58,720
re-enable the user-based component by

517
00:20:58,720 --> 00:21:00,480
changing the value

518
00:21:00,480 --> 00:21:02,559
from the start entry back from uh from

519
00:21:02,559 --> 00:21:05,678
four to the value two

520
00:21:12,080 --> 00:21:14,159
but we're not allowed why

521
00:21:14,159 --> 00:21:16,159
remember we have did we did a reboot so

522
00:21:16,159 --> 00:21:18,000
we have to to patch the callback one

523
00:21:18,000 --> 00:21:19,679
time again

524
00:21:19,679 --> 00:21:23,480
and reopen the registry

525
00:21:31,200 --> 00:21:33,280
so we patch it again

526
00:21:33,280 --> 00:21:35,200
the process notify routine reopen the

527
00:21:35,200 --> 00:21:36,880
registry

528
00:21:36,880 --> 00:21:38,799
we now re-enable in the first step the

529
00:21:38,799 --> 00:21:41,840
user space component

530
00:21:42,240 --> 00:21:45,360
set the value back to the value 2

531
00:21:45,360 --> 00:21:47,520
and then we go to the minifill direct

532
00:21:47,520 --> 00:21:48,640
key

533
00:21:48,640 --> 00:21:50,799
and change the value to 4 which is equal

534
00:21:50,799 --> 00:21:54,720
to disabled reboot the machine

535
00:21:56,159 --> 00:21:59,280
and after the reboot we see that now the

536
00:21:59,280 --> 00:22:02,159
adr is still not um registered in the

537
00:22:02,159 --> 00:22:04,320
windows security center but then when we

538
00:22:04,320 --> 00:22:06,480
have now um look at the process explorer

539
00:22:06,480 --> 00:22:09,039
we see again blood sections reasonable

540
00:22:09,039 --> 00:22:11,200
this is i have to blur it because um

541
00:22:11,200 --> 00:22:12,720
there again uses base component

542
00:22:12,720 --> 00:22:15,679
processes active

543
00:22:16,080 --> 00:22:17,679
quality starts from the user space

544
00:22:17,679 --> 00:22:19,360
service we see that the service is now

545
00:22:19,360 --> 00:22:20,799
again running

546
00:22:20,799 --> 00:22:23,520
but the mini filter driver is now

547
00:22:23,520 --> 00:22:24,799
stopped

548
00:22:24,799 --> 00:22:25,679
and

549
00:22:25,679 --> 00:22:28,799
at least we check the impact

550
00:22:28,799 --> 00:22:32,080
by disabling the minifilter

551
00:22:32,080 --> 00:22:33,919
we see that no longer callbacks are

552
00:22:33,919 --> 00:22:36,480
registered

553
00:22:37,440 --> 00:22:42,240
we try to isolate the machine again

554
00:22:44,480 --> 00:22:46,480
it looks like the temple protection is

555
00:22:46,480 --> 00:22:48,799
not long active

556
00:22:48,799 --> 00:22:50,400
so we can change the value however we

557
00:22:50,400 --> 00:22:51,360
want

558
00:22:51,360 --> 00:22:53,360
without creating a detection

559
00:22:53,360 --> 00:22:55,039
or creating a footprint based on

560
00:22:55,039 --> 00:22:57,120
telemetry

561
00:22:57,120 --> 00:23:00,480
and finally we can execute mimi cuts and

562
00:23:00,480 --> 00:23:02,240
the credentials

563
00:23:02,240 --> 00:23:07,080
very relaxed i would say

564
00:23:08,480 --> 00:23:10,320
isolation is still not happening so it

565
00:23:10,320 --> 00:23:13,120
looks like that isolating the machine is

566
00:23:13,120 --> 00:23:16,520
no longer working

567
00:23:36,320 --> 00:23:38,159
okay so what's the conclusion from the

568
00:23:38,159 --> 00:23:39,679
second demo

569
00:23:39,679 --> 00:23:41,520
we saw that compared to

570
00:23:41,520 --> 00:23:44,000
uh disabling the user space component

571
00:23:44,000 --> 00:23:46,480
uh depending also on the product

572
00:23:46,480 --> 00:23:48,640
this mini filter has a much stronger

573
00:23:48,640 --> 00:23:52,320
impact in case of reaching our goals

574
00:23:52,320 --> 00:23:54,159
and to permanently

575
00:23:54,159 --> 00:23:55,919
disable main functionalities from the

576
00:23:55,919 --> 00:23:56,960
edr

577
00:23:56,960 --> 00:23:59,679
and permanently get rid of prevention by

578
00:23:59,679 --> 00:24:01,360
the antivirus module

579
00:24:01,360 --> 00:24:04,799
detection footprinting host isolation

580
00:24:04,799 --> 00:24:07,039
and so on

581
00:24:07,039 --> 00:24:08,000
um

582
00:24:08,000 --> 00:24:09,760
at the end of the presentation i would

583
00:24:09,760 --> 00:24:11,360
like to point out that in my opinion

584
00:24:11,360 --> 00:24:14,640
this is not really based on availability

585
00:24:14,640 --> 00:24:17,279
more it's based on the concept from the

586
00:24:17,279 --> 00:24:18,880
windows architecture

587
00:24:18,880 --> 00:24:20,640
and i think every

588
00:24:20,640 --> 00:24:21,520
vendor

589
00:24:21,520 --> 00:24:23,679
excluding microsoft has to play on the

590
00:24:23,679 --> 00:24:25,279
same rules

591
00:24:25,279 --> 00:24:26,960
on windows

592
00:24:26,960 --> 00:24:30,400
so many thanks for your attention

593
00:24:30,400 --> 00:24:38,400
[Applause]

594
00:24:38,400 --> 00:24:41,360
cool thank you very much

595
00:24:41,360 --> 00:24:45,919
um we have some time for questions

596
00:24:45,919 --> 00:24:47,520
any questions

597
00:24:47,520 --> 00:24:49,279
yeah please just line up at

598
00:24:49,279 --> 00:24:51,679
the mic

599
00:24:51,840 --> 00:24:54,959
and whoever is faster

600
00:24:57,440 --> 00:24:59,840
testing testing seems to be working uh

601
00:24:59,840 --> 00:25:02,159
your almost last sentence was every

602
00:25:02,159 --> 00:25:04,799
vendor except microsoft has to play by

603
00:25:04,799 --> 00:25:06,880
the same rules yeah

604
00:25:06,880 --> 00:25:08,559
could you go through the accept

605
00:25:08,559 --> 00:25:11,200
microsoft thing yeah i think the

606
00:25:11,200 --> 00:25:12,880
the difference is compared to

607
00:25:12,880 --> 00:25:14,799
third-party vendors that

608
00:25:14,799 --> 00:25:18,080
microsoft is i think not really

609
00:25:18,080 --> 00:25:20,400
only forced to go in user space so

610
00:25:20,400 --> 00:25:21,760
because since the production of

611
00:25:21,760 --> 00:25:24,720
patchguard officially it's not allowed

612
00:25:24,720 --> 00:25:27,679
also if even uh or maybe if you use a

613
00:25:27,679 --> 00:25:29,520
patch card bypass then you can also go

614
00:25:29,520 --> 00:25:30,799
in kernel space

615
00:25:30,799 --> 00:25:34,480
but i think that um from my experiences

616
00:25:34,480 --> 00:25:36,640
uh microsoft has

617
00:25:36,640 --> 00:25:41,679
a very deep or deeper visibility um

618
00:25:41,679 --> 00:25:44,960
it sits uh it adds more visibility into

619
00:25:44,960 --> 00:25:46,799
kernel space uh compared to other

620
00:25:46,799 --> 00:25:47,840
vendors

621
00:25:47,840 --> 00:25:49,520
so

622
00:25:49,520 --> 00:25:52,880
uh followup have you looked into uh

623
00:25:52,880 --> 00:25:54,480
cutting them off

624
00:25:54,480 --> 00:25:56,960
or their adr products

625
00:25:56,960 --> 00:25:59,919
do you need additional kernel space

626
00:25:59,919 --> 00:26:03,919
disability disabling capabilities or

627
00:26:03,919 --> 00:26:06,960
um no at the moment i

628
00:26:06,960 --> 00:26:09,279
i have only while researching the area

629
00:26:09,279 --> 00:26:10,400
of

630
00:26:10,400 --> 00:26:13,360
mini filters also i also write a blog

631
00:26:13,360 --> 00:26:15,919
post about elon drivers so

632
00:26:15,919 --> 00:26:19,120
i had a look on different components

633
00:26:19,120 --> 00:26:22,159
but not on etvs when you mean this one

634
00:26:22,159 --> 00:26:23,679
etw

635
00:26:23,679 --> 00:26:28,000
uh will be the topic for my next uh

636
00:26:28,000 --> 00:26:29,760
project

637
00:26:29,760 --> 00:26:31,440
looking forward to it thank you

638
00:26:31,440 --> 00:26:33,760
thank you

639
00:26:34,400 --> 00:26:36,640
so how do you think they would go about

640
00:26:36,640 --> 00:26:40,000
to fix this do you think there's any

641
00:26:40,000 --> 00:26:42,400
probability within the

642
00:26:42,400 --> 00:26:44,559
kernel space or from the isolation

643
00:26:44,559 --> 00:26:47,360
perspective and do you think windows 11

644
00:26:47,360 --> 00:26:49,760
could fix this is there anything on the

645
00:26:49,760 --> 00:26:50,840
way with

646
00:26:50,840 --> 00:26:54,240
tpm 2.0 to fix this

647
00:26:54,240 --> 00:26:56,320
and what do you think how hard would it

648
00:26:56,320 --> 00:26:57,760
be to for

649
00:26:57,760 --> 00:26:59,679
somebody interested in pen testing to

650
00:26:59,679 --> 00:27:01,600
learn this do you think there you could

651
00:27:01,600 --> 00:27:04,320
make a lap about this or anybody learn

652
00:27:04,320 --> 00:27:07,200
this or is it just too oversimplified

653
00:27:07,200 --> 00:27:08,240
here

654
00:27:08,240 --> 00:27:10,480
no you can definitely learn it i also

655
00:27:10,480 --> 00:27:12,080
use it by myself

656
00:27:12,080 --> 00:27:13,919
um for sure you have to be very

657
00:27:13,919 --> 00:27:16,240
sensitive because when you do a failure

658
00:27:16,240 --> 00:27:17,919
in the kernel space you will create a

659
00:27:17,919 --> 00:27:20,480
blue screen of death

660
00:27:20,480 --> 00:27:21,520
but

661
00:27:21,520 --> 00:27:24,399
if you know the product very well

662
00:27:24,399 --> 00:27:26,559
you can use it depending on the machine

663
00:27:26,559 --> 00:27:29,039
so maybe when you are acting a very

664
00:27:29,039 --> 00:27:32,320
sensitive machine it is not

665
00:27:32,320 --> 00:27:35,200
maybe good when you do this

666
00:27:35,200 --> 00:27:38,080
what you can do about um i could observe

667
00:27:38,080 --> 00:27:40,320
that well-known products

668
00:27:40,320 --> 00:27:41,279
are

669
00:27:41,279 --> 00:27:44,320
blacklisting uh begin to blacklist the

670
00:27:44,320 --> 00:27:46,159
drivers which have vulnerabilities this

671
00:27:46,159 --> 00:27:47,200
one way

672
00:27:47,200 --> 00:27:51,120
but it is possible to use different pocs

673
00:27:51,120 --> 00:27:53,360
to maybe flip some bytes and get

674
00:27:53,360 --> 00:27:54,480
bypassed

675
00:27:54,480 --> 00:27:57,279
by that by that detections

676
00:27:57,279 --> 00:27:58,399
um

677
00:27:58,399 --> 00:28:00,399
another possibility would be

678
00:28:00,399 --> 00:28:02,320
there is a software vendor on the market

679
00:28:02,320 --> 00:28:04,159
i will not say the name

680
00:28:04,159 --> 00:28:05,279
but

681
00:28:05,279 --> 00:28:09,120
they focus on a mechanism to get

682
00:28:09,120 --> 00:28:12,720
which is based on the web fiber waffle

683
00:28:12,720 --> 00:28:14,799
variable and

684
00:28:14,799 --> 00:28:16,480
the products have the possibility to

685
00:28:16,480 --> 00:28:19,840
include this code into their code and by

686
00:28:19,840 --> 00:28:21,919
they will realize when there

687
00:28:21,919 --> 00:28:23,120
is

688
00:28:23,120 --> 00:28:25,679
something changed or tampered

689
00:28:25,679 --> 00:28:27,919
they can

690
00:28:27,919 --> 00:28:31,120
re-enable it or repair it in

691
00:28:31,120 --> 00:28:33,678
on the machine

692
00:28:35,039 --> 00:28:37,919
and do you think um windows 11 will fix

693
00:28:37,919 --> 00:28:39,919
something about that or with tpm is

694
00:28:39,919 --> 00:28:42,960
there any way vendor could facilitate it

695
00:28:42,960 --> 00:28:44,960
to protect

696
00:28:44,960 --> 00:28:47,039
in any kind it's a good question so at

697
00:28:47,039 --> 00:28:48,480
the moment i have another deeper look at

698
00:28:48,480 --> 00:28:50,640
windows 11

699
00:28:50,640 --> 00:28:52,799
but i think generally

700
00:28:52,799 --> 00:28:54,159
with the drivers

701
00:28:54,159 --> 00:28:55,600
you only can use drivers which are

702
00:28:55,600 --> 00:28:56,880
released

703
00:28:56,880 --> 00:29:01,120
for july 2015 afterwards it is more um

704
00:29:01,120 --> 00:29:03,360
it's harder but there are still drivers

705
00:29:03,360 --> 00:29:05,520
which you can be can be used

706
00:29:05,520 --> 00:29:06,320
um

707
00:29:06,320 --> 00:29:08,720
on windows 11 i can't say too much

708
00:29:08,720 --> 00:29:10,159
because i have too less experience at

709
00:29:10,159 --> 00:29:11,360
the moment

710
00:29:11,360 --> 00:29:14,320
thank you thank you

711
00:29:14,960 --> 00:29:18,559
wonderful any more questions

712
00:29:24,080 --> 00:29:26,080
okay cool thank you very much very

713
00:29:26,080 --> 00:29:29,639
interesting thank you

