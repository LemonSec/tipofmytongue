1
00:47:43,680 --> 00:47:46,680
so

2
00:47:59,930 --> 00:48:03,040
[Applause]

3
00:48:07,280 --> 00:48:09,359
hello

4
00:48:09,359 --> 00:48:10,720
perfect

5
00:48:10,720 --> 00:48:13,280
good morning everyone

6
00:48:13,280 --> 00:48:15,359
hope everyone is doing well

7
00:48:15,359 --> 00:48:17,359
and thank you so much

8
00:48:17,359 --> 00:48:19,599
for helping us and supporting us with

9
00:48:19,599 --> 00:48:22,160
this community for security

10
00:48:22,160 --> 00:48:25,200
so here i sneha your humble

11
00:48:25,200 --> 00:48:28,559
uh host for today welcome you to besides

12
00:48:28,559 --> 00:48:30,960
munich 2022

13
00:48:30,960 --> 00:48:33,920
and i wish you all have a great day

14
00:48:33,920 --> 00:48:36,400
today it's going to be fantastic and we

15
00:48:36,400 --> 00:48:38,640
are going to make it super awesome

16
00:48:38,640 --> 00:48:41,280
we have some ground rules today and the

17
00:48:41,280 --> 00:48:43,359
very first ground rule is

18
00:48:43,359 --> 00:48:45,839
you have to wear mask all the time this

19
00:48:45,839 --> 00:48:48,640
is not just for your safety but it's for

20
00:48:48,640 --> 00:48:51,040
everybody else's safety as well

21
00:48:51,040 --> 00:48:54,000
so masks should be on because we are a

22
00:48:54,000 --> 00:48:56,800
community and our idea our

23
00:48:56,800 --> 00:48:58,800
responsibility is to make sure that

24
00:48:58,800 --> 00:49:01,359
everybody in our community is safe and

25
00:49:01,359 --> 00:49:02,800
sound

26
00:49:02,800 --> 00:49:04,640
when we are talking about this community

27
00:49:04,640 --> 00:49:07,520
we actually derive this entire meaning

28
00:49:07,520 --> 00:49:09,359
and this actually goes with our

29
00:49:09,359 --> 00:49:11,520
principles at b sides

30
00:49:11,520 --> 00:49:14,319
besides security this is a group of

31
00:49:14,319 --> 00:49:16,480
community of engineers security

32
00:49:16,480 --> 00:49:19,280
researchers hackers individuals just

33
00:49:19,280 --> 00:49:21,839
like you all

34
00:49:21,839 --> 00:49:24,319
almost around 13 years ago

35
00:49:24,319 --> 00:49:26,800
these individual ingenious people they

36
00:49:26,800 --> 00:49:28,880
somehow couldn't make it to the

37
00:49:28,880 --> 00:49:31,040
mainstream conferences

38
00:49:31,040 --> 00:49:33,280
and they thought that no their voices

39
00:49:33,280 --> 00:49:34,720
needs to be heard

40
00:49:34,720 --> 00:49:36,880
and that's when they started a new

41
00:49:36,880 --> 00:49:39,599
community called besides security and

42
00:49:39,599 --> 00:49:42,160
today they are present all over the

43
00:49:42,160 --> 00:49:45,359
world and we are humbled to be a part of

44
00:49:45,359 --> 00:49:46,480
it

45
00:49:46,480 --> 00:49:48,240
besides has been

46
00:49:48,240 --> 00:49:50,400
a great part for us

47
00:49:50,400 --> 00:49:53,040
and i would definitely like to say

48
00:49:53,040 --> 00:49:55,920
for every one of you please give a huge

49
00:49:55,920 --> 00:49:57,920
shout out and applause for besides

50
00:49:57,920 --> 00:50:00,880
munich today thank you so much besides

51
00:50:00,880 --> 00:50:03,359
munich for helping us share the ideas

52
00:50:03,359 --> 00:50:06,000
and knowledge

53
00:50:07,760 --> 00:50:10,000
what we have done so far

54
00:50:10,000 --> 00:50:11,599
sorry

55
00:50:11,599 --> 00:50:14,319
is i would like to give you an overview

56
00:50:14,319 --> 00:50:16,880
of the entire achievement for the year

57
00:50:16,880 --> 00:50:18,880
2022

58
00:50:18,880 --> 00:50:21,760
we are a small set of organizers we like

59
00:50:21,760 --> 00:50:24,839
to call ourselves as the besides munich

60
00:50:24,839 --> 00:50:29,280
team we have incredible 20 sponsors who

61
00:50:29,280 --> 00:50:32,000
are the backbone for the conference this

62
00:50:32,000 --> 00:50:33,520
year

63
00:50:33,520 --> 00:50:36,000
and especially thanks to their support

64
00:50:36,000 --> 00:50:38,400
we are all present here and we do have

65
00:50:38,400 --> 00:50:40,720
some great stuff lined up throughout the

66
00:50:40,720 --> 00:50:41,920
day

67
00:50:41,920 --> 00:50:45,040
apart from that sorry we had this year

68
00:50:45,040 --> 00:50:48,160
57 cfp proposals call for papers that

69
00:50:48,160 --> 00:50:51,119
was like super amazing 57 papers well

70
00:50:51,119 --> 00:50:52,720
there's one thing that i definitely need

71
00:50:52,720 --> 00:50:54,319
to tell you there were actually 58

72
00:50:54,319 --> 00:50:57,040
papers but there was this one paper

73
00:50:57,040 --> 00:50:59,599
which was so super genius

74
00:50:59,599 --> 00:51:02,079
none of us like i'm telling you very

75
00:51:02,079 --> 00:51:04,640
frankly whoever is present in this room

76
00:51:04,640 --> 00:51:07,119
no one of us was qualified to judge that

77
00:51:07,119 --> 00:51:10,160
paper the title of the paper was

78
00:51:10,160 --> 00:51:12,720
laura ipsum

79
00:51:12,720 --> 00:51:15,359
that was fantastic and it was the huge

80
00:51:15,359 --> 00:51:16,800
paragraph

81
00:51:16,800 --> 00:51:17,520
so

82
00:51:17,520 --> 00:51:19,440
unfortunately we did not select that

83
00:51:19,440 --> 00:51:22,160
paper and hence we have 57 papers this

84
00:51:22,160 --> 00:51:22,960
year

85
00:51:22,960 --> 00:51:26,880
out of which we have 31 awesome speakers

86
00:51:26,880 --> 00:51:28,800
who are present here who are going to

87
00:51:28,800 --> 00:51:30,880
rock your world with the share of their

88
00:51:30,880 --> 00:51:32,400
knowledge and some amazing

89
00:51:32,400 --> 00:51:35,599
demonstrations and some super amazing

90
00:51:35,599 --> 00:51:38,319
ideas and some of them are also going to

91
00:51:38,319 --> 00:51:40,559
share how they perform the research but

92
00:51:40,559 --> 00:51:42,800
they failed but we'll let you know what

93
00:51:42,800 --> 00:51:44,640
are the lessons they learn which is

94
00:51:44,640 --> 00:51:45,760
fantastic

95
00:51:45,760 --> 00:51:48,800
it's an amazing power packed knowledge

96
00:51:48,800 --> 00:51:50,640
sharing session the whole day that we

97
00:51:50,640 --> 00:51:53,359
have today yesterday we had four

98
00:51:53,359 --> 00:51:56,079
ingenious hands-on workshop which was

99
00:51:56,079 --> 00:51:58,559
again amazing and those who were present

100
00:51:58,559 --> 00:52:00,720
at the workshop i'm sure you had fun and

101
00:52:00,720 --> 00:52:03,280
you learned something new and if not new

102
00:52:03,280 --> 00:52:04,079
you

103
00:52:04,079 --> 00:52:06,400
at least had to polish at least got to

104
00:52:06,400 --> 00:52:09,200
polish your skills

105
00:52:09,200 --> 00:52:11,760
so today's agenda is pretty simple

106
00:52:11,760 --> 00:52:13,680
we start with the remarks

107
00:52:13,680 --> 00:52:16,400
i'll be here talking right now

108
00:52:16,400 --> 00:52:18,720
and after that we have the keynote the

109
00:52:18,720 --> 00:52:20,720
fantastic keynote and the morning

110
00:52:20,720 --> 00:52:22,480
sessions wherein we have the morning

111
00:52:22,480 --> 00:52:25,200
talks then we have some coffee breaks

112
00:52:25,200 --> 00:52:27,520
then again the mid-afternoon sessions

113
00:52:27,520 --> 00:52:29,839
lunch break evening sessions

114
00:52:29,839 --> 00:52:33,040
closing keynote and there is one special

115
00:52:33,040 --> 00:52:35,920
session this year that we have

116
00:52:35,920 --> 00:52:38,559
it's called heartfelt goodbye

117
00:52:38,559 --> 00:52:41,119
and what exactly this goodbye would be

118
00:52:41,119 --> 00:52:42,880
we will let talk about that in the

119
00:52:42,880 --> 00:52:44,880
evening because talking about something

120
00:52:44,880 --> 00:52:46,720
that is going to end

121
00:52:46,720 --> 00:52:48,400
is always difficult

122
00:52:48,400 --> 00:52:50,559
but there's always this excitement that

123
00:52:50,559 --> 00:52:52,160
there's something new that is going to

124
00:52:52,160 --> 00:52:54,240
begin so

125
00:52:54,240 --> 00:52:57,280
please be here with us

126
00:52:57,280 --> 00:53:00,559
next so about us a quick overview so

127
00:53:00,559 --> 00:53:02,319
just just give me a raise of hands of

128
00:53:02,319 --> 00:53:04,160
how many of you are here for the very

129
00:53:04,160 --> 00:53:06,640
first time very first time for besides

130
00:53:06,640 --> 00:53:08,000
munich

131
00:53:08,000 --> 00:53:10,720
wow that's a huge number

132
00:53:10,720 --> 00:53:13,280
how many of you all

133
00:53:13,280 --> 00:53:15,920
came to know about besides like a few

134
00:53:15,920 --> 00:53:18,400
weeks ago or this is your first besides

135
00:53:18,400 --> 00:53:21,280
ever doesn't matter which country

136
00:53:21,280 --> 00:53:24,240
wow that's a huge number

137
00:53:24,240 --> 00:53:27,359
that is amazing so let me just introduce

138
00:53:27,359 --> 00:53:31,280
quickly to what we are how we grew so in

139
00:53:31,280 --> 00:53:34,000
back in 2017 we started a small

140
00:53:34,000 --> 00:53:37,359
community conference wherein we had only

141
00:53:37,359 --> 00:53:40,319
75 people to 78 people attending the

142
00:53:40,319 --> 00:53:42,720
conference we had 10 talks ingenious

143
00:53:42,720 --> 00:53:45,599
presentations and only three workshops

144
00:53:45,599 --> 00:53:49,280
and we grew and today we have over 380

145
00:53:49,280 --> 00:53:51,680
registrations we have amazing

146
00:53:51,680 --> 00:53:56,000
presentations more than uh 57 proposals

147
00:53:56,000 --> 00:53:59,119
this is how we are growing and now we

148
00:53:59,119 --> 00:54:02,240
are also expanding how are we expanding

149
00:54:02,240 --> 00:54:03,839
that's in the evening you will come to

150
00:54:03,839 --> 00:54:04,800
know

151
00:54:04,800 --> 00:54:08,480
before that before i leave this stage i

152
00:54:08,480 --> 00:54:10,960
do want to give a huge round of applause

153
00:54:10,960 --> 00:54:13,839
to the entire organizers team that is

154
00:54:13,839 --> 00:54:15,200
present here

155
00:54:15,200 --> 00:54:19,359
dagmar morton jen chris anna and of

156
00:54:19,359 --> 00:54:20,559
course me

157
00:54:20,559 --> 00:54:22,240
right

158
00:54:22,240 --> 00:54:26,240
oliver engmar max silvio

159
00:54:26,240 --> 00:54:29,520
stefan and a very heartfelt

160
00:54:29,520 --> 00:54:32,160
thank you to nicole unfortunately she

161
00:54:32,160 --> 00:54:34,880
did support us during some reserved

162
00:54:34,880 --> 00:54:37,359
timings itself she's not here at this

163
00:54:37,359 --> 00:54:39,839
moment with us today but for next

164
00:54:39,839 --> 00:54:41,520
conference i'm pretty sure nicole will

165
00:54:41,520 --> 00:54:43,680
also be with us

166
00:54:43,680 --> 00:54:45,359
apart from that

167
00:54:45,359 --> 00:54:48,240
we have our lightning

168
00:54:48,240 --> 00:54:50,960
striking amazing volunteers you will

169
00:54:50,960 --> 00:54:53,920
find them in the blue t-shirts

170
00:54:53,920 --> 00:54:55,839
a huge shout out to them can i have a

171
00:54:55,839 --> 00:54:57,760
round of applause for all the volunteers

172
00:54:57,760 --> 00:55:00,799
please thank you

173
00:55:05,200 --> 00:55:06,960
thank you so much

174
00:55:06,960 --> 00:55:08,960
and before i wrap up there's one thing

175
00:55:08,960 --> 00:55:11,119
that i definitely want to say morning

176
00:55:11,119 --> 00:55:13,280
sessions are really amazing but you know

177
00:55:13,280 --> 00:55:15,599
what the actual fun is when the good

178
00:55:15,599 --> 00:55:18,880
things are kept for the last and today

179
00:55:18,880 --> 00:55:21,520
for our closing keynote we have one such

180
00:55:21,520 --> 00:55:24,799
amazing lady who would be presenting us

181
00:55:24,799 --> 00:55:27,119
sharing us the knowledge she is the

182
00:55:27,119 --> 00:55:29,920
author of best-selling books who which

183
00:55:29,920 --> 00:55:31,920
basically helps you guides you and

184
00:55:31,920 --> 00:55:34,559
supports you in performing secure

185
00:55:34,559 --> 00:55:37,119
security implementing security in devops

186
00:55:37,119 --> 00:55:40,640
operations and how do you shift left and

187
00:55:40,640 --> 00:55:42,799
calculate your success

188
00:55:42,799 --> 00:55:44,799
and the talk would be presented by tanya

189
00:55:44,799 --> 00:55:47,200
jenka

190
00:55:47,200 --> 00:55:48,960
so before

191
00:55:48,960 --> 00:55:49,920
i go

192
00:55:49,920 --> 00:55:52,960
orbit uh goodbye to you for now i would

193
00:55:52,960 --> 00:55:55,119
like to give a huge round of applause

194
00:55:55,119 --> 00:55:58,319
again to all of our sponsors especially

195
00:55:58,319 --> 00:56:00,559
the platinum sponsors

196
00:56:00,559 --> 00:56:03,520
thank you so much we also have gold

197
00:56:03,520 --> 00:56:06,400
silver and the brown sponsors thank you

198
00:56:06,400 --> 00:56:08,559
all so much because of you

199
00:56:08,559 --> 00:56:10,799
plenty of things were possible today and

200
00:56:10,799 --> 00:56:13,359
thank you so much for your support

201
00:56:13,359 --> 00:56:16,160
so one more thing and i'm damn serious

202
00:56:16,160 --> 00:56:18,640
here now this is where i get

203
00:56:18,640 --> 00:56:21,040
talking about the real business code of

204
00:56:21,040 --> 00:56:23,839
conduct we do not tolerate any

205
00:56:23,839 --> 00:56:26,400
inappropriate behavior

206
00:56:26,400 --> 00:56:28,640
if you see something

207
00:56:28,640 --> 00:56:31,200
you should say something

208
00:56:31,200 --> 00:56:32,799
if you find that there is something

209
00:56:32,799 --> 00:56:35,920
wrong if you hear any

210
00:56:35,920 --> 00:56:39,119
racist any derogatory statements from

211
00:56:39,119 --> 00:56:42,960
someone please speak up please reach out

212
00:56:42,960 --> 00:56:44,720
to all of us who are wearing these

213
00:56:44,720 --> 00:56:47,680
orange t-shirts we are here to help you

214
00:56:47,680 --> 00:56:49,119
okay

215
00:56:49,119 --> 00:56:50,319
no

216
00:56:50,319 --> 00:56:53,200
illogical behavior we are one we are one

217
00:56:53,200 --> 00:56:56,400
community we respect each other that is

218
00:56:56,400 --> 00:56:59,200
what we are and again

219
00:56:59,200 --> 00:57:01,440
i'm super serious about this one masks

220
00:57:01,440 --> 00:57:03,200
on i know i'm not wearing a mask right

221
00:57:03,200 --> 00:57:05,040
now because we have huge distance and

222
00:57:05,040 --> 00:57:06,799
i'm wearing the mic

223
00:57:06,799 --> 00:57:08,720
it becomes difficult to talk

224
00:57:08,720 --> 00:57:11,280
so speakers are given a liberty

225
00:57:11,280 --> 00:57:13,760
to not wear masks on the stage

226
00:57:13,760 --> 00:57:16,240
inside this room and the other track

227
00:57:16,240 --> 00:57:20,079
room you're not supposed to eat or drink

228
00:57:20,079 --> 00:57:21,680
if you want to eat something you can

229
00:57:21,680 --> 00:57:24,079
step outside and eat but please keep

230
00:57:24,079 --> 00:57:26,880
your masks on all the time

231
00:57:26,880 --> 00:57:29,440
and yeah just a heads up for the today

232
00:57:29,440 --> 00:57:32,000
evening session

233
00:57:32,000 --> 00:57:35,359
we welcome you to join us we welcome you

234
00:57:35,359 --> 00:57:39,200
to help us grow so please be present and

235
00:57:39,200 --> 00:57:41,280
if you're interested just reach out to

236
00:57:41,280 --> 00:57:44,240
us because this is how we grow

237
00:57:44,240 --> 00:57:46,240
whenever i wanted to

238
00:57:46,240 --> 00:57:47,200
uh

239
00:57:47,200 --> 00:57:49,359
ask something how do i progress in my

240
00:57:49,359 --> 00:57:52,000
life in my career there was always this

241
00:57:52,000 --> 00:57:54,640
question whom should i ask i've always

242
00:57:54,640 --> 00:57:56,880
dreamt of having a community a group of

243
00:57:56,880 --> 00:57:59,280
individual people who think alike like

244
00:57:59,280 --> 00:58:02,400
me who support my ideas and there has

245
00:58:02,400 --> 00:58:05,200
always been this question with me that

246
00:58:05,200 --> 00:58:08,240
how do i get this information from but

247
00:58:08,240 --> 00:58:10,559
to be true uh to tell you the truth i

248
00:58:10,559 --> 00:58:13,359
was also intimidated like oh my god that

249
00:58:13,359 --> 00:58:15,520
person's like super awesome

250
00:58:15,520 --> 00:58:17,280
he or she they are at a great level how

251
00:58:17,280 --> 00:58:19,520
do i go and ask them

252
00:58:19,520 --> 00:58:22,160
i always took a step back from asking

253
00:58:22,160 --> 00:58:25,599
that question and always in my mind i

254
00:58:25,599 --> 00:58:28,720
thought that would there be someone who

255
00:58:28,720 --> 00:58:30,319
would be willing to answer these

256
00:58:30,319 --> 00:58:32,480
questions who would not laugh at my

257
00:58:32,480 --> 00:58:35,200
silly questions and say that's okay i

258
00:58:35,200 --> 00:58:37,119
have an answer for you

259
00:58:37,119 --> 00:58:39,440
i always had this huge question and i'm

260
00:58:39,440 --> 00:58:41,839
pretty sure some of you also especially

261
00:58:41,839 --> 00:58:43,760
the ones who are freshly out of your

262
00:58:43,760 --> 00:58:46,000
graduation and college you have this

263
00:58:46,000 --> 00:58:47,119
question

264
00:58:47,119 --> 00:58:49,839
is there someone who can guide me

265
00:58:49,839 --> 00:58:52,480
is there anybody out there who can guide

266
00:58:52,480 --> 00:58:53,200
me

267
00:58:53,200 --> 00:58:56,000
and the answer is yes and to give this

268
00:58:56,000 --> 00:58:58,480
answer today i would like to call upon

269
00:58:58,480 --> 00:59:01,920
the stage our keynote mr thomas shrek

270
00:59:01,920 --> 00:59:05,280
who is the phd holder and the professor

271
00:59:05,280 --> 00:59:07,839
at the munich university and today he

272
00:59:07,839 --> 00:59:10,480
has decided to take this mental and give

273
00:59:10,480 --> 00:59:13,040
us all an answer how do you grow in your

274
00:59:13,040 --> 00:59:15,359
career what are the risks what are the

275
00:59:15,359 --> 00:59:18,000
downfalls even if you fail that's okay

276
00:59:18,000 --> 00:59:20,319
always treat your failure as success or

277
00:59:20,319 --> 00:59:21,839
at least a learning

278
00:59:21,839 --> 00:59:23,920
and if not nothing you can definitely

279
00:59:23,920 --> 00:59:26,720
write inspiring quotes on instagram that

280
00:59:26,720 --> 00:59:28,240
also works

281
00:59:28,240 --> 00:59:31,520
so without any further ado i would like

282
00:59:31,520 --> 00:59:33,359
to have a round of applause for mr

283
00:59:33,359 --> 00:59:35,430
thomas shrek thank you so much thomas

284
00:59:35,430 --> 00:59:42,960
[Applause]

285
00:59:42,960 --> 00:59:45,440
i think my mom's get off

286
00:59:45,440 --> 00:59:48,319
good luck thank you

287
00:59:49,599 --> 00:59:50,640
so

288
00:59:50,640 --> 00:59:52,799
let's see if the technical work is

289
00:59:52,799 --> 00:59:55,200
working

290
00:59:56,240 --> 00:59:57,760
okay perfect

291
00:59:57,760 --> 00:59:59,520
yeah thank you very much for the nice

292
00:59:59,520 --> 01:00:01,680
introduction

293
01:00:01,680 --> 01:00:05,359
and also for the besides munich

294
01:00:05,359 --> 01:00:07,599
how you called organizers to invite me

295
01:00:07,599 --> 01:00:10,559
to give this keynote

296
01:00:10,559 --> 01:00:13,040
so when they asked me about can you give

297
01:00:13,040 --> 01:00:14,960
the keynote i was asking myself what

298
01:00:14,960 --> 01:00:16,400
should i talk about

299
01:00:16,400 --> 01:00:18,160
it's always always the same thing what

300
01:00:18,160 --> 01:00:20,400
do you want to do and for me when i was

301
01:00:20,400 --> 01:00:22,319
young and listen to keynotes and still

302
01:00:22,319 --> 01:00:24,000
doing listening to keynotes i always

303
01:00:24,000 --> 01:00:26,319
think how should a keynote look like it

304
01:00:26,319 --> 01:00:28,079
should be inspiring it should be giving

305
01:00:28,079 --> 01:00:30,799
the new sword so the first obvious

306
01:00:30,799 --> 01:00:32,000
choice was

307
01:00:32,000 --> 01:00:33,839
let's talk about cyber but i hate this

308
01:00:33,839 --> 01:00:35,760
word cyber so here's the

309
01:00:35,760 --> 01:00:38,240
normal slide like about all the cyber

310
01:00:38,240 --> 01:00:40,240
buzzwords around there and i will not

311
01:00:40,240 --> 01:00:42,640
talk anymore about cyber so you have set

312
01:00:42,640 --> 01:00:44,400
one so the next

313
01:00:44,400 --> 01:00:45,920
topic which came to mind let's talk

314
01:00:45,920 --> 01:00:47,760
about blockchain because i don't know

315
01:00:47,760 --> 01:00:50,079
how it's you how you are doing but

316
01:00:50,079 --> 01:00:52,640
i get a lot with this buzzword so every

317
01:00:52,640 --> 01:00:54,960
manager coming to me every company let's

318
01:00:54,960 --> 01:00:56,720
do something about blockchain blockchain

319
01:00:56,720 --> 01:00:58,720
blockchain blockchain i can't hear it

320
01:00:58,720 --> 01:01:00,880
anymore so here's the obvious slide deck

321
01:01:00,880 --> 01:01:02,880
slide about blockchain i will not talk

322
01:01:02,880 --> 01:01:04,480
anymore about that

323
01:01:04,480 --> 01:01:05,359
so

324
01:01:05,359 --> 01:01:06,640
then we had a

325
01:01:06,640 --> 01:01:08,160
really good talk with the business

326
01:01:08,160 --> 01:01:10,559
organizat organizers

327
01:01:10,559 --> 01:01:12,880
and we discussed about

328
01:01:12,880 --> 01:01:15,839
what can give back to the community

329
01:01:15,839 --> 01:01:17,359
so

330
01:01:17,359 --> 01:01:20,319
i i grew up in a large organization you

331
01:01:20,319 --> 01:01:21,359
know

332
01:01:21,359 --> 01:01:24,000
sometimes very bureaucratic organization

333
01:01:24,000 --> 01:01:24,960
and

334
01:01:24,960 --> 01:01:27,359
every time i went there i was like okay

335
01:01:27,359 --> 01:01:29,119
this is really the way

336
01:01:29,119 --> 01:01:31,119
people are doing that

337
01:01:31,119 --> 01:01:33,440
so i learned a lot when i joined

338
01:01:33,440 --> 01:01:34,799
communities

339
01:01:34,799 --> 01:01:36,559
as the introduction was saying

340
01:01:36,559 --> 01:01:38,160
communities are so important you learn

341
01:01:38,160 --> 01:01:40,359
things and you get new ins and

342
01:01:40,359 --> 01:01:43,040
inspiration and so on and therefore we

343
01:01:43,040 --> 01:01:44,480
said okay

344
01:01:44,480 --> 01:01:46,160
let's talk about communities so why

345
01:01:46,160 --> 01:01:48,000
can't i talk about communities

346
01:01:48,000 --> 01:01:51,280
so i joined very young with a community

347
01:01:51,280 --> 01:01:55,359
and i was there as a yeah newbie

348
01:01:55,359 --> 01:01:57,119
first time attendee

349
01:01:57,119 --> 01:01:59,280
however you get called

350
01:01:59,280 --> 01:02:02,079
and then i was at this large

351
01:02:02,079 --> 01:02:03,760
organization called form of internet

352
01:02:03,760 --> 01:02:05,440
response and security teams which is the

353
01:02:05,440 --> 01:02:07,359
largest organization for security teams

354
01:02:07,359 --> 01:02:09,359
in the world i was there on the board of

355
01:02:09,359 --> 01:02:10,880
directors for six years and were the

356
01:02:10,880 --> 01:02:12,240
chairman for that

357
01:02:12,240 --> 01:02:14,160
and believe me or not

358
01:02:14,160 --> 01:02:15,200
it's

359
01:02:15,200 --> 01:02:17,520
it sounds great but it's a lot of work

360
01:02:17,520 --> 01:02:20,000
so i know what the besides people are

361
01:02:20,000 --> 01:02:21,920
doing in the volunteer time i had

362
01:02:21,920 --> 01:02:23,520
professional staff

363
01:02:23,520 --> 01:02:24,799
around so

364
01:02:24,799 --> 01:02:26,799
i want to use this opportunity now that

365
01:02:26,799 --> 01:02:28,799
you give them all and not only the

366
01:02:28,799 --> 01:02:31,039
volunteers because near forgot about

367
01:02:31,039 --> 01:02:33,280
thanking the whole organization team are

368
01:02:33,280 --> 01:02:35,039
a lot of our plows because what they are

369
01:02:35,039 --> 01:02:36,559
doing is amazing and they're doing all

370
01:02:36,559 --> 01:02:38,400
that for you so please give a lot of

371
01:02:38,400 --> 01:02:40,230
applause to them now

372
01:02:40,230 --> 01:02:47,440
[Applause]

373
01:02:47,440 --> 01:02:50,400
so i want to share the experience i had

374
01:02:50,400 --> 01:02:52,160
with communities building up communities

375
01:02:52,160 --> 01:02:53,440
running communities learning from the

376
01:02:53,440 --> 01:02:55,200
communities and so on

377
01:02:55,200 --> 01:02:58,559
so this is also a bit of a personal talk

378
01:02:58,559 --> 01:03:02,559
so when i was finishing university i was

379
01:03:02,559 --> 01:03:05,440
i thought i know everything

380
01:03:05,440 --> 01:03:07,599
and i learned the total difference when

381
01:03:07,599 --> 01:03:09,599
i joined the first organization first

382
01:03:09,599 --> 01:03:10,559
company

383
01:03:10,559 --> 01:03:13,039
and i was very overwhelmed i learned new

384
01:03:13,039 --> 01:03:14,720
buzzwords every day

385
01:03:14,720 --> 01:03:17,760
and i was like oh god university have

386
01:03:17,760 --> 01:03:20,559
not prepared me for the job

387
01:03:20,559 --> 01:03:23,200
and what did i do wrong with with what i

388
01:03:23,200 --> 01:03:25,920
learned and so on so i was really

389
01:03:25,920 --> 01:03:28,640
i was really sometimes a bit nervous if

390
01:03:28,640 --> 01:03:30,480
if i'm as an engineer doing the right

391
01:03:30,480 --> 01:03:32,480
thing

392
01:03:32,480 --> 01:03:33,760
and

393
01:03:33,760 --> 01:03:35,920
back then when i started we had not had

394
01:03:35,920 --> 01:03:39,039
this company cultures where it was still

395
01:03:39,039 --> 01:03:41,599
hierarchy driven and so on so i looked

396
01:03:41,599 --> 01:03:43,680
at the topics what what we're doing on a

397
01:03:43,680 --> 01:03:45,039
daily business

398
01:03:45,039 --> 01:03:47,119
and i always thought is it really how

399
01:03:47,119 --> 01:03:49,119
this work is it not really boring is

400
01:03:49,119 --> 01:03:51,280
that not a lot of problems and on so i

401
01:03:51,280 --> 01:03:53,920
had a lot of questions every day

402
01:03:53,920 --> 01:03:56,160
and all these questions were not really

403
01:03:56,160 --> 01:03:58,799
answered by my teammates because

404
01:03:58,799 --> 01:04:01,119
those were the ones were doing that all

405
01:04:01,119 --> 01:04:03,119
the time the same thing so i said

406
01:04:03,119 --> 01:04:05,119
question not what they were doing

407
01:04:05,119 --> 01:04:07,920
so i felt really alone i felt alone with

408
01:04:07,920 --> 01:04:09,280
my questions

409
01:04:09,280 --> 01:04:10,799
i was like there

410
01:04:10,799 --> 01:04:12,559
am i in the right place am i doing

411
01:04:12,559 --> 01:04:14,559
something wrong and so on so the

412
01:04:14,559 --> 01:04:16,640
question came to me

413
01:04:16,640 --> 01:04:19,680
is there anybody out there who has the

414
01:04:19,680 --> 01:04:21,839
same problems i do who has the same

415
01:04:21,839 --> 01:04:24,839
perspective on topic than i do

416
01:04:24,839 --> 01:04:27,280
and that was

417
01:04:27,280 --> 01:04:29,520
for a large i think for over one year a

418
01:04:29,520 --> 01:04:32,400
huge topic i thought about i i

419
01:04:32,400 --> 01:04:35,039
questioned myself and so on

420
01:04:35,039 --> 01:04:35,839
so

421
01:04:35,839 --> 01:04:37,920
is there anybody out there by the way

422
01:04:37,920 --> 01:04:41,240
which band

423
01:04:41,599 --> 01:04:43,280
no one

424
01:04:43,280 --> 01:04:46,480
pink floyd right so my favorite band

425
01:04:46,480 --> 01:04:49,119
so it was obvious choice

426
01:04:49,119 --> 01:04:50,880
so is there anybody out there and i can

427
01:04:50,880 --> 01:04:52,880
tell you yes there are there are a lot

428
01:04:52,880 --> 01:04:54,400
of people out there you see it here in

429
01:04:54,400 --> 01:04:55,599
the community there are a lot of people

430
01:04:55,599 --> 01:04:57,200
out there and there are a lot of people

431
01:04:57,200 --> 01:04:59,280
out there in in the whole

432
01:04:59,280 --> 01:05:00,480
in the whole

433
01:05:00,480 --> 01:05:03,119
industry we have who are doing work who

434
01:05:03,119 --> 01:05:05,440
do volunteer work who share experience

435
01:05:05,440 --> 01:05:08,559
on their own but you need to find that

436
01:05:08,559 --> 01:05:10,880
you need to engage with them and what i

437
01:05:10,880 --> 01:05:13,440
want to do today is to discuss with you

438
01:05:13,440 --> 01:05:17,280
about my experience i had when i joined

439
01:05:17,280 --> 01:05:18,799
those communities

440
01:05:18,799 --> 01:05:22,319
learned grew failed

441
01:05:22,319 --> 01:05:23,440
and

442
01:05:23,440 --> 01:05:25,440
in the end were able to run off one of

443
01:05:25,440 --> 01:05:27,520
those communities and spend a lot of

444
01:05:27,520 --> 01:05:28,880
time in there

445
01:05:28,880 --> 01:05:30,960
and it's a it was a great experience

446
01:05:30,960 --> 01:05:32,720
it's still a great experience and i want

447
01:05:32,720 --> 01:05:33,839
to give you

448
01:05:33,839 --> 01:05:36,000
i hope that you when you go out of this

449
01:05:36,000 --> 01:05:39,440
of this talk today that you yeah have

450
01:05:39,440 --> 01:05:40,960
ideas about

451
01:05:40,960 --> 01:05:44,160
what what may you what you can do uh

452
01:05:44,160 --> 01:05:47,039
also to give back the knowledge you have

453
01:05:47,039 --> 01:05:49,039
so how's this talk structured today i

454
01:05:49,039 --> 01:05:51,119
have three important topics which i want

455
01:05:51,119 --> 01:05:54,799
to cover the first is what is this about

456
01:05:54,799 --> 01:05:57,200
so what is about communities what you

457
01:05:57,200 --> 01:05:59,359
really should learn from communities and

458
01:05:59,359 --> 01:06:02,079
so on the next one is what you need to

459
01:06:02,079 --> 01:06:03,359
do

460
01:06:03,359 --> 01:06:04,960
so how can you

461
01:06:04,960 --> 01:06:07,359
give back what you experience what you

462
01:06:07,359 --> 01:06:09,039
learned and so on

463
01:06:09,039 --> 01:06:12,640
and last but not least what you gain

464
01:06:12,640 --> 01:06:15,760
so what you can get out if you do that

465
01:06:15,760 --> 01:06:18,559
if you do it and on so let's start about

466
01:06:18,559 --> 01:06:20,640
what this is about

467
01:06:20,640 --> 01:06:22,880
so who if you

468
01:06:22,880 --> 01:06:26,079
are part of a community

469
01:06:27,760 --> 01:06:30,799
so who so the people that still

470
01:06:30,799 --> 01:06:33,359
have her hands raised

471
01:06:33,359 --> 01:06:35,920
who are part of the community so

472
01:06:35,920 --> 01:06:37,760
who thinks that's a lot of work being in

473
01:06:37,760 --> 01:06:40,319
a community

474
01:06:40,400 --> 01:06:42,240
okay that's interesting

475
01:06:42,240 --> 01:06:44,000
i have a totally different perspective

476
01:06:44,000 --> 01:06:45,039
on that

477
01:06:45,039 --> 01:06:47,520
so when i talk about communities what do

478
01:06:47,520 --> 01:06:48,480
i mean

479
01:06:48,480 --> 01:06:49,280
so

480
01:06:49,280 --> 01:06:51,280
i'm there are a lot of communities out

481
01:06:51,280 --> 01:06:53,599
there there are this super exclusive

482
01:06:53,599 --> 01:06:57,119
globs where companies pay

483
01:06:57,119 --> 01:06:58,160
five

484
01:06:58,160 --> 01:07:01,119
five numbered membership fees annually

485
01:07:01,119 --> 01:07:03,039
and then there are the more industrial

486
01:07:03,039 --> 01:07:05,200
driven organizations who are okay are

487
01:07:05,200 --> 01:07:07,920
based on volunteers and then there are

488
01:07:07,920 --> 01:07:09,760
yeah communities like b-sides or others

489
01:07:09,760 --> 01:07:12,480
who are totally volunteering like yeah

490
01:07:12,480 --> 01:07:15,440
b-sides over and on

491
01:07:15,440 --> 01:07:18,240
so we have a very

492
01:07:18,240 --> 01:07:21,520
we have a lot of different people like

493
01:07:21,520 --> 01:07:23,520
the isaacs who get a lot of money every

494
01:07:23,520 --> 01:07:25,599
year they have professional staff

495
01:07:25,599 --> 01:07:27,599
working on topics and you have those

496
01:07:27,599 --> 01:07:30,000
larger communities which which get money

497
01:07:30,000 --> 01:07:31,599
from sponsors and running it and then

498
01:07:31,599 --> 01:07:33,839
you have the total volunteer driven ones

499
01:07:33,839 --> 01:07:36,559
and i can tell you one thing in all

500
01:07:36,559 --> 01:07:38,960
those communities there's one

501
01:07:38,960 --> 01:07:41,839
thing which is common it's all about the

502
01:07:41,839 --> 01:07:43,839
people who are engaged with that

503
01:07:43,839 --> 01:07:46,000
so if it's if even they have a lot of

504
01:07:46,000 --> 01:07:46,960
money

505
01:07:46,960 --> 01:07:49,119
they are in the background people who

506
01:07:49,119 --> 01:07:50,559
really think this is the thing which we

507
01:07:50,559 --> 01:07:52,000
need to drive

508
01:07:52,000 --> 01:07:53,839
this is important for me so they spend

509
01:07:53,839 --> 01:07:55,839
their whole spare time in this community

510
01:07:55,839 --> 01:07:57,119
building it up and so on and that's

511
01:07:57,119 --> 01:07:59,440
always the same thing

512
01:07:59,440 --> 01:08:02,240
but why do you do that

513
01:08:02,240 --> 01:08:04,319
so the first thing why are doing that is

514
01:08:04,319 --> 01:08:06,720
learning

515
01:08:07,200 --> 01:08:08,000
so

516
01:08:08,000 --> 01:08:11,280
for me when i joined after this one year

517
01:08:11,280 --> 01:08:13,359
thanks to a former manager of mine one

518
01:08:13,359 --> 01:08:14,799
of those communities

519
01:08:14,799 --> 01:08:17,520
i came there for five days and i can

520
01:08:17,520 --> 01:08:20,080
tell you i went back home and i was

521
01:08:20,080 --> 01:08:22,080
totally

522
01:08:22,080 --> 01:08:24,640
full of sugar and totally overengaged

523
01:08:24,640 --> 01:08:26,560
and so on because i gained so much

524
01:08:26,560 --> 01:08:28,560
knowledge during that week and that's

525
01:08:28,560 --> 01:08:30,479
mostly because the nice thing about this

526
01:08:30,479 --> 01:08:31,759
community is

527
01:08:31,759 --> 01:08:34,000
there are people there who are in the

528
01:08:34,000 --> 01:08:36,000
industry for way longer

529
01:08:36,000 --> 01:08:39,198
and who are willing to share what

530
01:08:39,198 --> 01:08:41,040
what um

531
01:08:41,040 --> 01:08:43,198
what say experience what say faults are

532
01:08:43,198 --> 01:08:45,520
so i grew up in the caesar community and

533
01:08:45,520 --> 01:08:46,640
the nice thing about the caesar

534
01:08:46,640 --> 01:08:47,759
community is they are always in the

535
01:08:47,759 --> 01:08:49,839
background so caesar people very don't

536
01:08:49,839 --> 01:08:52,000
talk about in the public how cool they

537
01:08:52,000 --> 01:08:54,640
are they are not in not on on stages

538
01:08:54,640 --> 01:08:56,319
doing huge keynotes they are in the

539
01:08:56,319 --> 01:08:57,439
background and

540
01:08:57,439 --> 01:08:59,679
securing our network our internet and so

541
01:08:59,679 --> 01:09:02,080
on and when i went there there were all

542
01:09:02,080 --> 01:09:03,759
those people who were in the business

543
01:09:03,759 --> 01:09:06,479
for 30 years 20 years and when i talked

544
01:09:06,479 --> 01:09:08,479
with them and showed them i'm really

545
01:09:08,479 --> 01:09:10,319
happy to learn from them

546
01:09:10,319 --> 01:09:11,600
they gave back

547
01:09:11,600 --> 01:09:13,920
all the knowledge they have to me

548
01:09:13,920 --> 01:09:16,560
and i was lucky that two of sam which i

549
01:09:16,560 --> 01:09:18,560
call now friends

550
01:09:18,560 --> 01:09:21,198
took that opportunity up and and helped

551
01:09:21,198 --> 01:09:24,799
me support me to grow where i'm i am now

552
01:09:24,799 --> 01:09:27,198
but it's not always

553
01:09:27,198 --> 01:09:29,120
one way it's not always that the

554
01:09:29,120 --> 01:09:31,520
orders give back to the younger what i

555
01:09:31,520 --> 01:09:34,799
learned is that as a young engineer

556
01:09:34,799 --> 01:09:36,880
i question topics and questions hey is

557
01:09:36,880 --> 01:09:39,759
that the correct way doing so

558
01:09:39,759 --> 01:09:42,080
is it really what we did as a best

559
01:09:42,080 --> 01:09:43,759
practice for 20 years

560
01:09:43,759 --> 01:09:46,080
something which should be done like that

561
01:09:46,080 --> 01:09:48,399
isn't there new technology out new

562
01:09:48,399 --> 01:09:51,839
new thinking in the uh in our society

563
01:09:51,839 --> 01:09:53,759
where we need to adapt our brushes and

564
01:09:53,759 --> 01:09:54,560
the

565
01:09:54,560 --> 01:09:57,040
exp a good experienced person in our

566
01:09:57,040 --> 01:09:59,760
community is seeing this potential that

567
01:09:59,760 --> 01:10:02,800
people are questioning and hearing

568
01:10:02,800 --> 01:10:04,480
and not just saying no no no we have

569
01:10:04,480 --> 01:10:06,719
done that for 20 years we know that's

570
01:10:06,719 --> 01:10:08,000
working

571
01:10:08,000 --> 01:10:10,320
and that's the wrong attitude to to

572
01:10:10,320 --> 01:10:12,800
tackle topics you need to listen to the

573
01:10:12,800 --> 01:10:13,679
people

574
01:10:13,679 --> 01:10:15,840
understand what you if it if that's

575
01:10:15,840 --> 01:10:17,440
maybe something what you're doing for 20

576
01:10:17,440 --> 01:10:20,000
years or wrong and accept that you may

577
01:10:20,000 --> 01:10:21,600
be wrong

578
01:10:21,600 --> 01:10:22,640
so

579
01:10:22,640 --> 01:10:24,640
the former team i was running it was

580
01:10:24,640 --> 01:10:25,520
always

581
01:10:25,520 --> 01:10:27,520
important for me that i listened to what

582
01:10:27,520 --> 01:10:30,159
they are doing what's it what say what

583
01:10:30,159 --> 01:10:30,960
say

584
01:10:30,960 --> 01:10:32,719
what's the experience they have and so

585
01:10:32,719 --> 01:10:35,040
on and for example when i was doing

586
01:10:35,040 --> 01:10:36,239
programming

587
01:10:36,239 --> 01:10:38,080
i was really bad in that

588
01:10:38,080 --> 01:10:39,920
and there's one person here here in the

589
01:10:39,920 --> 01:10:43,120
audience who need who i think hated to

590
01:10:43,120 --> 01:10:45,520
read my code overflow

591
01:10:45,520 --> 01:10:46,800
so

592
01:10:46,800 --> 01:10:49,760
and for me it was important that i was i

593
01:10:49,760 --> 01:10:51,600
was not telling him i'm the older one i

594
01:10:51,600 --> 01:10:53,600
know what i'm doing that i listened to

595
01:10:53,600 --> 01:10:54,960
him and said okay you're better than

596
01:10:54,960 --> 01:10:56,719
that so please do so

597
01:10:56,719 --> 01:11:00,000
so learning is not always about one way

598
01:11:00,000 --> 01:11:01,679
orders giving the experience to young

599
01:11:01,679 --> 01:11:03,679
words it's also the other way that all

600
01:11:03,679 --> 01:11:05,199
the older people are listening to the

601
01:11:05,199 --> 01:11:07,360
younger people understanding hey maybe

602
01:11:07,360 --> 01:11:09,520
they are right or they're not or we are

603
01:11:09,520 --> 01:11:11,360
wrong and we should change

604
01:11:11,360 --> 01:11:14,719
what we are doing so that's an important

605
01:11:14,719 --> 01:11:17,120
very important question

606
01:11:17,120 --> 01:11:19,920
and i choose this picture by purpose

607
01:11:19,920 --> 01:11:21,360
because

608
01:11:21,360 --> 01:11:23,840
in our global society and especially

609
01:11:23,840 --> 01:11:26,400
what we are doing on the internet we

610
01:11:26,400 --> 01:11:28,239
also need to listen to other cultures

611
01:11:28,239 --> 01:11:29,600
what i've experienced in some

612
01:11:29,600 --> 01:11:31,520
communities is when there are people

613
01:11:31,520 --> 01:11:33,679
from other cultures since the western

614
01:11:33,679 --> 01:11:35,920
uh in the western culture approaching

615
01:11:35,920 --> 01:11:36,800
you

616
01:11:36,800 --> 01:11:39,280
they always say okay yeah

617
01:11:39,280 --> 01:11:40,960
what are you talking about in africa i

618
01:11:40,960 --> 01:11:42,719
don't care what you're doing africa and

619
01:11:42,719 --> 01:11:44,719
this is also which we need to so uh yeah

620
01:11:44,719 --> 01:11:46,320
we need to improve because

621
01:11:46,320 --> 01:11:48,320
our cultures are so important the

622
01:11:48,320 --> 01:11:50,080
technology decisions which we are doing

623
01:11:50,080 --> 01:11:52,640
so it's not only learning

624
01:11:52,640 --> 01:11:54,719
between us it's learning listening to

625
01:11:54,719 --> 01:11:56,960
other cultures our societies and so on

626
01:11:56,960 --> 01:11:58,800
and with all the crisis we are kind of

627
01:11:58,800 --> 01:12:00,080
seeing that's getting more and more

628
01:12:00,080 --> 01:12:01,920
important

629
01:12:01,920 --> 01:12:03,920
so the next thing it's not about it's

630
01:12:03,920 --> 01:12:05,920
not only about sharing

631
01:12:05,920 --> 01:12:06,960
so

632
01:12:06,960 --> 01:12:09,520
for example the organization

633
01:12:09,520 --> 01:12:11,840
i was on the board first it was known

634
01:12:11,840 --> 01:12:13,520
for the huge conference so they had an

635
01:12:13,520 --> 01:12:15,280
annual huge conference people around the

636
01:12:15,280 --> 01:12:17,520
world came there but it was mostly only

637
01:12:17,520 --> 01:12:19,360
known for this conference and i hated

638
01:12:19,360 --> 01:12:20,159
that

639
01:12:20,159 --> 01:12:21,679
because there are these

640
01:12:21,679 --> 01:12:24,000
c-shirts around there who really want to

641
01:12:24,000 --> 01:12:24,960
engage in

642
01:12:24,960 --> 01:12:26,640
on a daily on a daily business of

643
01:12:26,640 --> 01:12:28,560
working each other so if there's an

644
01:12:28,560 --> 01:12:30,320
attack on going

645
01:12:30,320 --> 01:12:33,440
there are structures in in blaze where

646
01:12:33,440 --> 01:12:35,440
ceasers can communicate to each other

647
01:12:35,440 --> 01:12:37,199
and say hey we have this problem can you

648
01:12:37,199 --> 01:12:38,239
step in

649
01:12:38,239 --> 01:12:40,640
so i don't know who if you are isn't are

650
01:12:40,640 --> 01:12:42,960
in the response but in zero response is

651
01:12:42,960 --> 01:12:44,800
not tied to one organization it's most

652
01:12:44,800 --> 01:12:48,000
of the time or you have a community

653
01:12:48,000 --> 01:12:51,120
which needs to work on that so this is

654
01:12:51,120 --> 01:12:52,719
so keen that

655
01:12:52,719 --> 01:12:53,520
you

656
01:12:53,520 --> 01:12:56,239
have ways in place when you need to work

657
01:12:56,239 --> 01:12:58,320
with each other that you say hey i have

658
01:12:58,320 --> 01:12:59,679
a problem and then you step in and

659
01:12:59,679 --> 01:13:01,920
support those people

660
01:13:01,920 --> 01:13:03,679
if you go through management for example

661
01:13:03,679 --> 01:13:05,920
so i had this sometimes when you do my

662
01:13:05,920 --> 01:13:07,679
report to my manager and my managers

663
01:13:07,679 --> 01:13:09,199
that then to the next manager can we

664
01:13:09,199 --> 01:13:11,840
talk with this company it takes ages and

665
01:13:11,840 --> 01:13:13,679
when lawyers are involved then it takes

666
01:13:13,679 --> 01:13:14,880
forever

667
01:13:14,880 --> 01:13:16,800
so direct connections to each other are

668
01:13:16,800 --> 01:13:19,040
so important so building up a network in

669
01:13:19,040 --> 01:13:21,120
the community is so keen

670
01:13:21,120 --> 01:13:23,199
so you should not only go there and say

671
01:13:23,199 --> 01:13:25,360
great i will sit here

672
01:13:25,360 --> 01:13:27,280
and listen

673
01:13:27,280 --> 01:13:29,199
and then i go home you should be in

674
01:13:29,199 --> 01:13:30,080
there

675
01:13:30,080 --> 01:13:32,239
go out talk with the speakers talk with

676
01:13:32,239 --> 01:13:35,040
others build up a network because this

677
01:13:35,040 --> 01:13:37,280
network is so keen on daily operations

678
01:13:37,280 --> 01:13:38,800
and it's not only being there at a

679
01:13:38,800 --> 01:13:40,480
conference it's also

680
01:13:40,480 --> 01:13:42,640
doing the conferences joining a mailing

681
01:13:42,640 --> 01:13:44,560
list

682
01:13:44,560 --> 01:13:47,840
give talks somewhere so it's it's keen

683
01:13:47,840 --> 01:13:50,159
because when you have this fire fighting

684
01:13:50,159 --> 01:13:51,199
happening

685
01:13:51,199 --> 01:13:52,480
you need to

686
01:13:52,480 --> 01:13:53,679
use this

687
01:13:53,679 --> 01:13:55,199
this network

688
01:13:55,199 --> 01:13:57,120
and help each other

689
01:13:57,120 --> 01:13:59,120
and there are various communities out

690
01:13:59,120 --> 01:14:00,800
there

691
01:14:00,800 --> 01:14:02,960
where you can do that but they're also

692
01:14:02,960 --> 01:14:04,239
something which is called trusted

693
01:14:04,239 --> 01:14:06,320
communities trusted groups

694
01:14:06,320 --> 01:14:07,840
and those people

695
01:14:07,840 --> 01:14:08,800
are

696
01:14:08,800 --> 01:14:10,480
those communities are

697
01:14:10,480 --> 01:14:13,040
sometimes called fight club so there are

698
01:14:13,040 --> 01:14:14,480
they have fight club rules i am not

699
01:14:14,480 --> 01:14:16,480
really huge fan of these fight club

700
01:14:16,480 --> 01:14:18,960
rules but there are communities who are

701
01:14:18,960 --> 01:14:20,719
individuals and these individuals share

702
01:14:20,719 --> 01:14:22,640
their knowledge share their operational

703
01:14:22,640 --> 01:14:24,880
work sometimes when i open my email box

704
01:14:24,880 --> 01:14:26,960
and i've seen what the tags are ongoing

705
01:14:26,960 --> 01:14:28,880
in this main list i was like wow who

706
01:14:28,880 --> 01:14:30,560
should how should i process that all

707
01:14:30,560 --> 01:14:32,560
this information we have

708
01:14:32,560 --> 01:14:34,480
so

709
01:14:34,480 --> 01:14:36,400
you see this is ongoing this is

710
01:14:36,400 --> 01:14:38,560
something which is helping each other is

711
01:14:38,560 --> 01:14:40,080
so important

712
01:14:40,080 --> 01:14:41,679
so this is what

713
01:14:41,679 --> 01:14:44,960
you are able what is this about learning

714
01:14:44,960 --> 01:14:46,560
from each other

715
01:14:46,560 --> 01:14:48,159
sharing the knowledge

716
01:14:48,159 --> 01:14:50,320
supporting each other when there are

717
01:14:50,320 --> 01:14:52,000
things happening

718
01:14:52,000 --> 01:14:53,120
but

719
01:14:53,120 --> 01:14:55,280
as i said before

720
01:14:55,280 --> 01:14:57,440
you also need to think about okay how

721
01:14:57,440 --> 01:14:59,520
this community is working

722
01:14:59,520 --> 01:15:00,480
so

723
01:15:00,480 --> 01:15:02,880
you come here you listen to talks you

724
01:15:02,880 --> 01:15:04,320
already learned that there are here

725
01:15:04,320 --> 01:15:05,760
people volunteers

726
01:15:05,760 --> 01:15:08,159
who supp who are organizing all of that

727
01:15:08,159 --> 01:15:09,600
there are sponsors who are paying the

728
01:15:09,600 --> 01:15:11,120
money says that we can be here to

729
01:15:11,120 --> 01:15:13,840
conference hotel and so on

730
01:15:13,840 --> 01:15:15,440
but imagine

731
01:15:15,440 --> 01:15:17,120
if there would be no volunteers doing

732
01:15:17,120 --> 01:15:19,440
that no sponsors and no speakers and so

733
01:15:19,440 --> 01:15:21,600
on nothing would happen

734
01:15:21,600 --> 01:15:23,120
so you would

735
01:15:23,120 --> 01:15:24,400
instead of going to

736
01:15:24,400 --> 01:15:26,719
munich and

737
01:15:26,719 --> 01:15:28,560
talk to each other you would need to go

738
01:15:28,560 --> 01:15:30,480
to the office or her home office

739
01:15:30,480 --> 01:15:32,400
and do your work so

740
01:15:32,400 --> 01:15:35,120
only because of volunteers as

741
01:15:35,120 --> 01:15:36,960
this is possible

742
01:15:36,960 --> 01:15:39,199
so

743
01:15:39,199 --> 01:15:42,000
what can you do that this

744
01:15:42,000 --> 01:15:42,960
can be

745
01:15:42,960 --> 01:15:45,600
improved the situation we have

746
01:15:45,600 --> 01:15:49,520
yeah first of all share your experience

747
01:15:49,520 --> 01:15:51,360
so i think all of you have on a daily

748
01:15:51,360 --> 01:15:53,120
basis

749
01:15:53,120 --> 01:15:54,640
um yeah

750
01:15:54,640 --> 01:15:56,560
something is happening in your office

751
01:15:56,560 --> 01:15:58,159
you build a tool

752
01:15:58,159 --> 01:16:00,560
you had an incident or you had a good

753
01:16:00,560 --> 01:16:01,600
hack

754
01:16:01,600 --> 01:16:03,679
but you never want to talk about because

755
01:16:03,679 --> 01:16:06,000
as for example with me i always search

756
01:16:06,000 --> 01:16:07,760
for example oh

757
01:16:07,760 --> 01:16:10,239
i was really doing a bad job there so i

758
01:16:10,239 --> 01:16:11,679
should not talk about it

759
01:16:11,679 --> 01:16:14,080
or oh i don't have the time to prepare

760
01:16:14,080 --> 01:16:15,679
talk

761
01:16:15,679 --> 01:16:18,480
or whatever you find as a next

762
01:16:18,480 --> 01:16:21,040
as an rule that you don't do it

763
01:16:21,040 --> 01:16:22,800
and that's wrong

764
01:16:22,800 --> 01:16:25,520
so first of all what i learned is

765
01:16:25,520 --> 01:16:27,040
um

766
01:16:27,040 --> 01:16:28,800
talking about failure is often more

767
01:16:28,800 --> 01:16:30,560
important than showing off

768
01:16:30,560 --> 01:16:32,239
so i i'm for example now back in the

769
01:16:32,239 --> 01:16:34,320
academic field and i can tell you one of

770
01:16:34,320 --> 01:16:35,600
the worst things about the academic

771
01:16:35,600 --> 01:16:39,360
field is that you only share great great

772
01:16:39,360 --> 01:16:41,760
great papers in big conferences and then

773
01:16:41,760 --> 01:16:45,600
you gain again another

774
01:16:45,600 --> 01:16:47,600
point that you're good talking about

775
01:16:47,600 --> 01:16:48,480
something

776
01:16:48,480 --> 01:16:50,640
but for example in the academic field we

777
01:16:50,640 --> 01:16:53,280
don't talk about failures even

778
01:16:53,280 --> 01:16:55,440
there should be those talks

779
01:16:55,440 --> 01:16:57,199
the industry is a bit better here but

780
01:16:57,199 --> 01:16:59,679
not as it could be

781
01:16:59,679 --> 01:17:00,960
so

782
01:17:00,960 --> 01:17:02,800
talking about failure especially in our

783
01:17:02,800 --> 01:17:04,880
field is so important because everyone

784
01:17:04,880 --> 01:17:07,040
can learn and leverage from that

785
01:17:07,040 --> 01:17:09,440
next when you work on something and you

786
01:17:09,440 --> 01:17:11,600
think okay i don't i'm not really sure

787
01:17:11,600 --> 01:17:13,679
should i publish that or not

788
01:17:13,679 --> 01:17:14,640
do it

789
01:17:14,640 --> 01:17:16,239
i don't know how your company policies

790
01:17:16,239 --> 01:17:19,760
are and so on but put it on github

791
01:17:19,760 --> 01:17:21,520
and share it on twitter

792
01:17:21,520 --> 01:17:22,719
talk about it

793
01:17:22,719 --> 01:17:24,800
that's very important give go to a

794
01:17:24,800 --> 01:17:26,320
conference talk about it then you get

795
01:17:26,320 --> 01:17:28,880
feedback and maybe find people involved

796
01:17:28,880 --> 01:17:32,480
in that i have seen so many cool

797
01:17:32,480 --> 01:17:33,760
projects

798
01:17:33,760 --> 01:17:36,239
dying on a laptop's hard disk because

799
01:17:36,239 --> 01:17:38,880
people have not wanted to share it so

800
01:17:38,880 --> 01:17:40,560
for example my students when they come

801
01:17:40,560 --> 01:17:43,360
to me to write their final thesis i

802
01:17:43,360 --> 01:17:46,400
always say i don't want to have this

803
01:17:46,400 --> 01:17:47,679
source code on

804
01:17:47,679 --> 01:17:51,040
a usb stick or on a cd

805
01:17:51,040 --> 01:17:54,719
and not kidding still on cd sometimes

806
01:17:54,719 --> 01:17:56,719
put it on github

807
01:17:56,719 --> 01:17:59,280
tweet about it because that's maybe no

808
01:17:59,280 --> 01:18:01,280
one is interested in but maybe there are

809
01:18:01,280 --> 01:18:03,360
then you said then you build up your

810
01:18:03,360 --> 01:18:04,960
profile

811
01:18:04,960 --> 01:18:06,800
so

812
01:18:06,800 --> 01:18:08,560
what i want to encourage you is that

813
01:18:08,560 --> 01:18:10,320
everyone who is here now in the audience

814
01:18:10,320 --> 01:18:12,400
will submit the talk to next next year's

815
01:18:12,400 --> 01:18:14,080
b sites

816
01:18:14,080 --> 01:18:15,930
even your manual can be selected

817
01:18:15,930 --> 01:18:21,280
[Applause]

818
01:18:21,280 --> 01:18:23,360
if you not get selected

819
01:18:23,360 --> 01:18:24,960
it's an experience you have you get

820
01:18:24,960 --> 01:18:27,120
feedback and so on

821
01:18:27,120 --> 01:18:28,640
so that's important share your

822
01:18:28,640 --> 01:18:30,800
experience then

823
01:18:30,800 --> 01:18:33,520
help others

824
01:18:33,600 --> 01:18:34,880
so

825
01:18:34,880 --> 01:18:36,320
you are here

826
01:18:36,320 --> 01:18:38,960
because you want to learn something

827
01:18:38,960 --> 01:18:40,320
but it's not only about learning it's

828
01:18:40,320 --> 01:18:42,640
also that we as people are very complex

829
01:18:42,640 --> 01:18:44,640
we may have our personal problems and so

830
01:18:44,640 --> 01:18:45,600
on

831
01:18:45,600 --> 01:18:47,920
and that's so keen in a community when

832
01:18:47,920 --> 01:18:49,679
you have a smaller community

833
01:18:49,679 --> 01:18:52,000
you build up friendship

834
01:18:52,000 --> 01:18:54,239
and therefore it's important that you

835
01:18:54,239 --> 01:18:56,560
listen to others maybe they

836
01:18:56,560 --> 01:18:57,440
say

837
01:18:57,440 --> 01:18:59,440
ask for help you don't understand that

838
01:18:59,440 --> 01:19:01,120
they're asking for help

839
01:19:01,120 --> 01:19:03,360
so you need to listen to them carefully

840
01:19:03,360 --> 01:19:04,800
understanding what the problems they

841
01:19:04,800 --> 01:19:07,360
have and then they

842
01:19:07,360 --> 01:19:09,440
help helps them

843
01:19:09,440 --> 01:19:11,120
and this is something which i

844
01:19:11,120 --> 01:19:13,199
experienced quite often

845
01:19:13,199 --> 01:19:16,080
so i had personal problems i had

846
01:19:16,080 --> 01:19:18,159
problems in the shop and so on and i

847
01:19:18,159 --> 01:19:20,960
have always people i can ask

848
01:19:20,960 --> 01:19:23,760
out of the outside of my company

849
01:19:23,760 --> 01:19:26,320
within my company and so on

850
01:19:26,320 --> 01:19:28,320
and this important thing what i wanted

851
01:19:28,320 --> 01:19:29,520
to give

852
01:19:29,520 --> 01:19:32,159
or what i want to share with you is

853
01:19:32,159 --> 01:19:34,880
first of all if you need help if you

854
01:19:34,880 --> 01:19:36,480
have a complex problem for example you

855
01:19:36,480 --> 01:19:38,640
need to solve you should not be alone

856
01:19:38,640 --> 01:19:40,880
just ask just experience people or

857
01:19:40,880 --> 01:19:42,960
people you trust and tell them hey i

858
01:19:42,960 --> 01:19:45,120
have this problem can you help me

859
01:19:45,120 --> 01:19:46,960
or if you have personal problems because

860
01:19:46,960 --> 01:19:48,719
you don't really know how your career

861
01:19:48,719 --> 01:19:50,560
path is ongoing there are a lot of

862
01:19:50,560 --> 01:19:52,159
communities outside supporting you on

863
01:19:52,159 --> 01:19:54,080
that so ask for

864
01:19:54,080 --> 01:19:55,280
help

865
01:19:55,280 --> 01:19:57,679
and more important be there if someone

866
01:19:57,679 --> 01:19:59,679
is asking for help

867
01:19:59,679 --> 01:20:00,719
so

868
01:20:00,719 --> 01:20:02,159
talk to them

869
01:20:02,159 --> 01:20:05,199
and and use this time i know we are in

870
01:20:05,199 --> 01:20:07,920
this industry we are all stressed out

871
01:20:07,920 --> 01:20:09,920
and we're doing a lot of work on a daily

872
01:20:09,920 --> 01:20:13,600
basis and then you oh and now it's 9 00

873
01:20:13,600 --> 01:20:15,440
pm and i still need to talk with this

874
01:20:15,440 --> 01:20:17,600
one guy because he is asking for help

875
01:20:17,600 --> 01:20:20,239
and that's the total wrong

876
01:20:20,239 --> 01:20:23,120
the total wrong attitude to it it's

877
01:20:23,120 --> 01:20:25,360
something when you help someone you may

878
01:20:25,360 --> 01:20:27,440
later on when you need help this person

879
01:20:27,440 --> 01:20:29,840
may help you as well and i can tell you

880
01:20:29,840 --> 01:20:33,679
i i was at the situation quite often

881
01:20:33,679 --> 01:20:36,000
and it was always very important for me

882
01:20:36,000 --> 01:20:38,719
that i had someone to talk a talk

883
01:20:38,719 --> 01:20:39,840
so

884
01:20:39,840 --> 01:20:42,000
now to the last point

885
01:20:42,000 --> 01:20:43,840
now i told you about what's all about

886
01:20:43,840 --> 01:20:46,159
these communities i talked about what

887
01:20:46,159 --> 01:20:47,920
you need to do or what you should do and

888
01:20:47,920 --> 01:20:49,040
so on

889
01:20:49,040 --> 01:20:52,560
but what do you really gain from that

890
01:20:52,560 --> 01:20:56,320
so first of all knowledge

891
01:20:56,480 --> 01:20:59,679
and as you know knowledge is keen

892
01:20:59,679 --> 01:21:01,920
in our society it's

893
01:21:01,920 --> 01:21:03,920
very important

894
01:21:03,920 --> 01:21:06,080
that you that you gain this knowledge

895
01:21:06,080 --> 01:21:07,920
and

896
01:21:07,920 --> 01:21:10,159
for i can tell you from my experience

897
01:21:10,159 --> 01:21:12,239
that's the most what you get from a

898
01:21:12,239 --> 01:21:15,040
community is exactly that knowledge

899
01:21:15,040 --> 01:21:15,840
so

900
01:21:15,840 --> 01:21:18,719
what's what what kind of knowledge so i

901
01:21:18,719 --> 01:21:22,159
can give you now some examples um so

902
01:21:22,159 --> 01:21:25,280
i was working on a on something within

903
01:21:25,280 --> 01:21:27,520
my former company so i said we were able

904
01:21:27,520 --> 01:21:28,719
to detect

905
01:21:28,719 --> 01:21:30,880
some uh attacks

906
01:21:30,880 --> 01:21:33,120
and i had a problem with

907
01:21:33,120 --> 01:21:37,120
privacy so the way i wanted to do it was

908
01:21:37,120 --> 01:21:39,360
from a private perspective wrong

909
01:21:39,360 --> 01:21:41,280
and i knew that but privacy is important

910
01:21:41,280 --> 01:21:43,760
for all of us so i was really there for

911
01:21:43,760 --> 01:21:45,760
three months i have not found any

912
01:21:45,760 --> 01:21:47,040
solution

913
01:21:47,040 --> 01:21:49,199
so i went to a conference and discussed

914
01:21:49,199 --> 01:21:50,800
it with a friendly circle as it's a

915
01:21:50,800 --> 01:21:52,880
luxembourg czert and i talked to

916
01:21:52,880 --> 01:21:55,040
alexandre i had this program and just

917
01:21:55,040 --> 01:21:57,920
told him what problem i have

918
01:21:57,920 --> 01:22:01,520
and he looked at me oh that's quite easy

919
01:22:01,520 --> 01:22:04,000
just use that in that algorithm and that

920
01:22:04,000 --> 01:22:05,600
is the data structure then everything is

921
01:22:05,600 --> 01:22:06,880
solved

922
01:22:06,880 --> 01:22:08,960
i was like wow this was a very easy

923
01:22:08,960 --> 01:22:11,440
answer so i went back home implemented

924
01:22:11,440 --> 01:22:13,600
that and it worked

925
01:22:13,600 --> 01:22:14,719
and

926
01:22:14,719 --> 01:22:16,800
yeah this knowledge that helped me on a

927
01:22:16,800 --> 01:22:19,360
daily basis and that's just one example

928
01:22:19,360 --> 01:22:21,440
another example is

929
01:22:21,440 --> 01:22:25,760
uh when i was when i became manager

930
01:22:25,760 --> 01:22:27,360
i never really were a good people

931
01:22:27,360 --> 01:22:29,120
manager

932
01:22:29,120 --> 01:22:30,960
and some of the audience can tell about

933
01:22:30,960 --> 01:22:32,400
that

934
01:22:32,400 --> 01:22:33,440
so

935
01:22:33,440 --> 01:22:35,280
i didn't want to discuss it internally

936
01:22:35,280 --> 01:22:37,520
and also the team i

937
01:22:37,520 --> 01:22:39,520
i was in there was totally different to

938
01:22:39,520 --> 01:22:41,600
other teams so i couldn't really ask for

939
01:22:41,600 --> 01:22:43,679
help within the organization

940
01:22:43,679 --> 01:22:44,719
so

941
01:22:44,719 --> 01:22:46,880
i went out there and discussed with

942
01:22:46,880 --> 01:22:48,639
others who were running successfully

943
01:22:48,639 --> 01:22:50,960
teams like mine and said okay what are

944
01:22:50,960 --> 01:22:53,360
you doing what you how how how do you

945
01:22:53,360 --> 01:22:55,199
solve that in that problem

946
01:22:55,199 --> 01:22:57,199
or how do you tackle that

947
01:22:57,199 --> 01:22:59,440
uh and so and they gave me wonderful

948
01:22:59,440 --> 01:23:01,199
ideas about

949
01:23:01,199 --> 01:23:02,639
what you can do and that's also

950
01:23:02,639 --> 01:23:04,159
knowledge it's not only about technical

951
01:23:04,159 --> 01:23:06,560
knowledge it's also about how you

952
01:23:06,560 --> 01:23:08,800
yeah manage people how you

953
01:23:08,800 --> 01:23:11,679
how you grew your people and so on

954
01:23:11,679 --> 01:23:14,239
and last but not least

955
01:23:14,239 --> 01:23:16,080
building up friends

956
01:23:16,080 --> 01:23:19,520
so for example my best friend i

957
01:23:19,520 --> 01:23:20,960
i met

958
01:23:20,960 --> 01:23:23,840
uh at a conference or first of all i met

959
01:23:23,840 --> 01:23:25,600
him with on a mailing list and i thought

960
01:23:25,600 --> 01:23:27,440
who is this who is this person who is

961
01:23:27,440 --> 01:23:29,679
asking so stupid questions

962
01:23:29,679 --> 01:23:32,000
but being biased

963
01:23:32,000 --> 01:23:34,239
and now he's my best friend because we

964
01:23:34,239 --> 01:23:37,120
found out that hey we have the same uh

965
01:23:37,120 --> 01:23:39,360
we have the same technical interest job

966
01:23:39,360 --> 01:23:41,679
interest but also private interest and i

967
01:23:41,679 --> 01:23:43,679
can tell you for sure

968
01:23:43,679 --> 01:23:44,480
that

969
01:23:44,480 --> 01:23:47,199
all of us are bit same not only

970
01:23:47,199 --> 01:23:48,800
only in the industry but also in our

971
01:23:48,800 --> 01:23:51,360
private field so you gain

972
01:23:51,360 --> 01:23:52,719
friends and like

973
01:23:52,719 --> 01:23:55,040
i i must say

974
01:23:55,040 --> 01:23:56,560
when i

975
01:23:56,560 --> 01:23:58,560
when i look into my friendship most of

976
01:23:58,560 --> 01:24:00,480
those people are

977
01:24:00,480 --> 01:24:01,600
within

978
01:24:01,600 --> 01:24:04,159
my community so these are the people i

979
01:24:04,159 --> 01:24:05,600
trust a lot

980
01:24:05,600 --> 01:24:08,320
i i talk on a daily basis and even i

981
01:24:08,320 --> 01:24:09,840
have private problems

982
01:24:09,840 --> 01:24:11,760
i have them because

983
01:24:11,760 --> 01:24:13,600
they knew me they know how i'm working

984
01:24:13,600 --> 01:24:15,840
and so on so this is what you also gain

985
01:24:15,840 --> 01:24:18,800
a lot of friends which you can use

986
01:24:18,800 --> 01:24:21,280
the whole career path and later on

987
01:24:21,280 --> 01:24:23,840
hopefully also when you retire you can

988
01:24:23,840 --> 01:24:26,159
do nice trips with them and so on

989
01:24:26,159 --> 01:24:28,320
so that's also important that you just

990
01:24:28,320 --> 01:24:30,960
don't just look at the look at hey this

991
01:24:30,960 --> 01:24:32,320
is just a job

992
01:24:32,320 --> 01:24:34,960
because our job takes the majority of

993
01:24:34,960 --> 01:24:37,199
the time we have on a week

994
01:24:37,199 --> 01:24:38,960
so you should share that with friends

995
01:24:38,960 --> 01:24:41,120
and not with with people who you just in

996
01:24:41,120 --> 01:24:44,480
there for eight hours on a day so this

997
01:24:44,480 --> 01:24:46,480
is what i want to talk with or talk

998
01:24:46,480 --> 01:24:48,159
about um

999
01:24:48,159 --> 01:24:50,960
what i learned why for me communities

1000
01:24:50,960 --> 01:24:53,280
aren't so important and so on

1001
01:24:53,280 --> 01:24:55,280
and i hope you get

1002
01:24:55,280 --> 01:24:58,080
your yeah you gain something out of this

1003
01:24:58,080 --> 01:25:00,639
talk that you learned about something

1004
01:25:00,639 --> 01:25:01,920
and that you

1005
01:25:01,920 --> 01:25:04,320
submitted a talk next year

1006
01:25:04,320 --> 01:25:06,239
thank you very much i hope you enjoyed

1007
01:25:06,239 --> 01:25:09,239
it

1008
01:25:12,700 --> 01:25:16,550
[Applause]

1009
01:25:20,239 --> 01:25:21,920
does anybody have a question for a

1010
01:25:21,920 --> 01:25:23,199
wholeness

1011
01:25:23,199 --> 01:25:24,840
it's a great

1012
01:25:24,840 --> 01:25:26,560
opportunity some questions right now if

1013
01:25:26,560 --> 01:25:30,520
you have please step forward

1014
01:25:49,920 --> 01:25:53,440
so first of all thank you for your talk

1015
01:25:53,440 --> 01:25:55,679
when you mentioned uh we should talk

1016
01:25:55,679 --> 01:25:58,159
more about failure uh it reminds me of

1017
01:25:58,159 --> 01:26:00,560
something that i read i think in uh

1018
01:26:00,560 --> 01:26:03,440
this book from uh

1019
01:26:03,440 --> 01:26:06,239
i think it's called it and fragile but

1020
01:26:06,239 --> 01:26:07,920
basically the guy makes this argument

1021
01:26:07,920 --> 01:26:10,480
that we have this a big graveyard of

1022
01:26:10,480 --> 01:26:12,880
failure behind us so when you see like

1023
01:26:12,880 --> 01:26:15,600
say book authors uh we have like someone

1024
01:26:15,600 --> 01:26:17,040
that releases a book and we have like i

1025
01:26:17,040 --> 01:26:18,880
don't know ten thousand people that

1026
01:26:18,880 --> 01:26:21,440
never released a book but tried to

1027
01:26:21,440 --> 01:26:23,520
publish something uh could you please

1028
01:26:23,520 --> 01:26:26,239
discuss a bit more how would you

1029
01:26:26,239 --> 01:26:28,320
approach that how could we discuss more

1030
01:26:28,320 --> 01:26:33,040
failure uh give maybe some ideas

1031
01:26:33,600 --> 01:26:35,920
so you you can approach that on on

1032
01:26:35,920 --> 01:26:37,600
various levels i think there is a

1033
01:26:37,600 --> 01:26:39,679
conference format out

1034
01:26:39,679 --> 01:26:41,920
i can't be called the name where you

1035
01:26:41,920 --> 01:26:44,000
just talk about failures

1036
01:26:44,000 --> 01:26:45,920
uh i think that's one approach the

1037
01:26:45,920 --> 01:26:47,840
second approach is within organization

1038
01:26:47,840 --> 01:26:50,080
you what you can talk is that you do uh

1039
01:26:50,080 --> 01:26:52,639
what you can do is on a weekly basis on

1040
01:26:52,639 --> 01:26:55,280
monthly basis you have uh an evening

1041
01:26:55,280 --> 01:26:57,679
where where you're only allowed to share

1042
01:26:57,679 --> 01:26:59,120
failures you did

1043
01:26:59,120 --> 01:27:02,840
and then on a daily on a daily job basis

1044
01:27:02,840 --> 01:27:05,679
uh you may do a

1045
01:27:05,679 --> 01:27:07,920
instead of doing a scrum or dailies and

1046
01:27:07,920 --> 01:27:10,239
so on you also talk about in the dailies

1047
01:27:10,239 --> 01:27:12,719
about what did what did not work and how

1048
01:27:12,719 --> 01:27:15,280
you solved it so you need to facilitate

1049
01:27:15,280 --> 01:27:19,120
a culture where you discussed it

1050
01:27:19,120 --> 01:27:21,520
and way more important is that from a

1051
01:27:21,520 --> 01:27:24,400
mindset you need to allow your allow

1052
01:27:24,400 --> 01:27:27,600
failures so it's quite often that people

1053
01:27:27,600 --> 01:27:30,960
think okay if it if i fail

1054
01:27:30,960 --> 01:27:32,800
i'm doing a bad job

1055
01:27:32,800 --> 01:27:35,760
it's quite obvious

1056
01:27:35,840 --> 01:27:37,600
it's quite obvious it's

1057
01:27:37,600 --> 01:27:40,159
um uh opposite sorry obvious i said

1058
01:27:40,159 --> 01:27:42,560
opposite it's you need to understand hey

1059
01:27:42,560 --> 01:27:43,920
when i'm doing a failure it's totally

1060
01:27:43,920 --> 01:27:46,719
fine that it's a failure and now i need

1061
01:27:46,719 --> 01:27:48,239
to understand doing lessons learned

1062
01:27:48,239 --> 01:27:50,560
about what i what i did wrong

1063
01:27:50,560 --> 01:27:53,120
and honestly when i have a small child

1064
01:27:53,120 --> 01:27:54,159
at home

1065
01:27:54,159 --> 01:27:57,280
and she is doing the whole day failures

1066
01:27:57,280 --> 01:27:59,360
i can shout at her

1067
01:27:59,360 --> 01:28:02,239
and say you're doing it wrong or can i

1068
01:28:02,239 --> 01:28:04,400
can just show here why she did it wrong

1069
01:28:04,400 --> 01:28:05,360
and that's

1070
01:28:05,360 --> 01:28:07,280
like a mindset chef we need to we need

1071
01:28:07,280 --> 01:28:10,080
to do and i can tell you our society

1072
01:28:10,080 --> 01:28:11,679
unfortunately still doesn't allow

1073
01:28:11,679 --> 01:28:13,040
failures

1074
01:28:13,040 --> 01:28:15,199
so starting

1075
01:28:15,199 --> 01:28:16,880
to change in our society that failure is

1076
01:28:16,880 --> 01:28:18,320
allowed is the first thing which is

1077
01:28:18,320 --> 01:28:19,600
important to do

1078
01:28:19,600 --> 01:28:22,400
but a great question

1079
01:28:24,719 --> 01:28:26,239
okay thank you very much and enjoy the

1080
01:28:26,239 --> 01:28:29,638
rest of the day

1081
01:39:32,800 --> 01:39:35,800
do

1082
01:41:12,400 --> 01:41:15,559
oh both

1083
01:41:16,000 --> 01:41:19,080
as well

1084
01:41:25,280 --> 01:41:28,599
test is

1085
01:41:33,760 --> 01:41:36,760
uh

1086
01:41:50,719 --> 01:41:53,719
hello

1087
01:42:04,880 --> 01:42:07,880
so

1088
01:42:42,400 --> 01:42:45,400
business

1089
01:43:01,840 --> 01:43:04,840
hello

1090
01:43:11,520 --> 01:43:15,960
okay so take your seats please

1091
01:43:34,560 --> 01:43:38,440
i guess we'll give you a minute

1092
01:43:46,960 --> 01:43:50,199
a few minutes

1093
01:43:52,000 --> 01:43:54,400
okay

1094
01:44:03,840 --> 01:44:07,960
let's wait for the few hours

1095
01:44:42,000 --> 01:44:43,600
okay great so

1096
01:44:43,600 --> 01:44:45,600
we are one minute in delay

1097
01:44:45,600 --> 01:44:48,000
um yeah i'm very happy to introduce the

1098
01:44:48,000 --> 01:44:49,760
next speaker and the first regular

1099
01:44:49,760 --> 01:44:52,000
speaker connor morally who will talk

1100
01:44:52,000 --> 01:44:53,440
about the mac os

1101
01:44:53,440 --> 01:44:55,280
endpoint security framework

1102
01:44:55,280 --> 01:44:57,679
what it is what it can do and i'm very

1103
01:44:57,679 --> 01:45:01,560
much looking forward to this

1104
01:45:04,239 --> 01:45:06,560
thank you good morning

1105
01:45:06,560 --> 01:45:08,800
back in 2019

1106
01:45:08,800 --> 01:45:10,239
apple at the worldwide developer

1107
01:45:10,239 --> 01:45:11,760
conference announced they were making a

1108
01:45:11,760 --> 01:45:13,280
dramatic change to the way they were

1109
01:45:13,280 --> 01:45:14,880
dealing with the kernel space on their

1110
01:45:14,880 --> 01:45:17,280
mac operating systems today i'm going to

1111
01:45:17,280 --> 01:45:19,119
be dealing with one of the results of

1112
01:45:19,119 --> 01:45:20,960
this namely the endpoint security

1113
01:45:20,960 --> 01:45:24,080
framework or the esf

1114
01:45:24,080 --> 01:45:27,199
i am a senior researcher with secure

1115
01:45:27,199 --> 01:45:29,199
within their countercept team

1116
01:45:29,199 --> 01:45:30,560
prior to being part of the research team

1117
01:45:30,560 --> 01:45:32,639
was a threat hunter four years

1118
01:45:32,639 --> 01:45:34,239
i have produced multiple white papers

1119
01:45:34,239 --> 01:45:36,560
and proof of concept detection codes and

1120
01:45:36,560 --> 01:45:38,639
presented at a number of international

1121
01:45:38,639 --> 01:45:41,119
uh conventions

1122
01:45:41,119 --> 01:45:42,400
so what are we going to be going over

1123
01:45:42,400 --> 01:45:44,400
today we'll be going over what exactly

1124
01:45:44,400 --> 01:45:46,239
the esa is

1125
01:45:46,239 --> 01:45:48,480
why the esf is important to the

1126
01:45:48,480 --> 01:45:50,239
detection industry

1127
01:45:50,239 --> 01:45:51,920
how can we

1128
01:45:51,920 --> 01:45:54,400
in the industry utilize the esf

1129
01:45:54,400 --> 01:45:56,960
some of the issues during implementation

1130
01:45:56,960 --> 01:45:58,400
and some of the solutions that i found

1131
01:45:58,400 --> 01:46:00,159
to these issues

1132
01:46:00,159 --> 01:46:02,159
my device poc solution which i code

1133
01:46:02,159 --> 01:46:03,600
named esfang

1134
01:46:03,600 --> 01:46:05,679
and briefly going over a use case

1135
01:46:05,679 --> 01:46:09,199
against the return pressure agent

1136
01:46:09,199 --> 01:46:12,400
so first off what exactly is the esf

1137
01:46:12,400 --> 01:46:14,719
so the esf is developed as a

1138
01:46:14,719 --> 01:46:16,639
kernel-based telemetry acquisition

1139
01:46:16,639 --> 01:46:18,880
system by apple and it's

1140
01:46:18,880 --> 01:46:21,119
been developed as a way for a one-stop

1141
01:46:21,119 --> 01:46:23,040
shop for telemetry needs from the

1142
01:46:23,040 --> 01:46:25,199
security industry as you said it works

1143
01:46:25,199 --> 01:46:26,560
in the kernel space and because of that

1144
01:46:26,560 --> 01:46:28,320
it actually works fairly similar to the

1145
01:46:28,320 --> 01:46:30,639
way the etw works inside the windows

1146
01:46:30,639 --> 01:46:32,159
operating system

1147
01:46:32,159 --> 01:46:34,400
in many ways it succeeds the open bsm or

1148
01:46:34,400 --> 01:46:36,320
the open basic security module by sun

1149
01:46:36,320 --> 01:46:38,000
systems that was used primarily for

1150
01:46:38,000 --> 01:46:39,520
auditing purposes

1151
01:46:39,520 --> 01:46:42,080
prior to esf and one of the great

1152
01:46:42,080 --> 01:46:44,159
results of esf is that it allows for

1153
01:46:44,159 --> 01:46:48,159
real-time event acquisition for

1154
01:46:48,719 --> 01:46:50,639
direct intervention on

1155
01:46:50,639 --> 01:46:52,000
real-time

1156
01:46:52,000 --> 01:46:53,600
interception

1157
01:46:53,600 --> 01:46:55,600
but what does this exactly look like so

1158
01:46:55,600 --> 01:46:57,600
the image on the right here gives a very

1159
01:46:57,600 --> 01:46:59,440
basic overview of how this works from

1160
01:46:59,440 --> 01:47:02,000
the user space at the bottom with a

1161
01:47:02,000 --> 01:47:03,920
endpoint security application feeding

1162
01:47:03,920 --> 01:47:05,360
into the kernel space and getting

1163
01:47:05,360 --> 01:47:07,440
messages from the kernel space for the

1164
01:47:07,440 --> 01:47:08,400
telemetry

1165
01:47:08,400 --> 01:47:10,480
and on the left is a demonstration of

1166
01:47:10,480 --> 01:47:12,880
that information which uh from every

1167
01:47:12,880 --> 01:47:14,960
single event type includes multiple

1168
01:47:14,960 --> 01:47:16,480
low-level

1169
01:47:16,480 --> 01:47:19,040
data points including the parent process

1170
01:47:19,040 --> 01:47:20,000
id

1171
01:47:20,000 --> 01:47:22,960
path environmental variables cd hashes

1172
01:47:22,960 --> 01:47:25,760
and so forth

1173
01:47:26,400 --> 01:47:29,520
but why is the usf important

1174
01:47:29,520 --> 01:47:30,560
so

1175
01:47:30,560 --> 01:47:33,280
during the presentation at the worldwide

1176
01:47:33,280 --> 01:47:34,719
developer conference in 2019 they

1177
01:47:34,719 --> 01:47:36,400
announced they were going to deprecate

1178
01:47:36,400 --> 01:47:39,119
text or kernel extensions primarily this

1179
01:47:39,119 --> 01:47:40,239
means that they were removing

1180
01:47:40,239 --> 01:47:41,520
third-party current extensions from the

1181
01:47:41,520 --> 01:47:42,719
kernel space

1182
01:47:42,719 --> 01:47:45,280
meaning that uh third-party security

1183
01:47:45,280 --> 01:47:46,800
vendors could not use their own kernel

1184
01:47:46,800 --> 01:47:49,119
extensions for telemetry acquisition

1185
01:47:49,119 --> 01:47:50,800
because of this they introduced

1186
01:47:50,800 --> 01:47:52,960
something called system extensions which

1187
01:47:52,960 --> 01:47:54,880
is their way of allowing kernel

1188
01:47:54,880 --> 01:47:56,400
extension

1189
01:47:56,400 --> 01:47:58,320
proprietary apple kernel extension

1190
01:47:58,320 --> 01:48:00,080
access from the user space using

1191
01:48:00,080 --> 01:48:02,960
something called system extensions

1192
01:48:02,960 --> 01:48:05,440
equally before esf came along open bsm

1193
01:48:05,440 --> 01:48:07,280
as i said was a primary auditing tool

1194
01:48:07,280 --> 01:48:09,280
but it was quite clunky to use and

1195
01:48:09,280 --> 01:48:10,560
fairly difficult to integrate there's

1196
01:48:10,560 --> 01:48:12,239
lots of documentation on the problems

1197
01:48:12,239 --> 01:48:14,080
with open bsm so i won't go into them

1198
01:48:14,080 --> 01:48:16,080
but needless to say earsafe is a much

1199
01:48:16,080 --> 01:48:17,520
easier solution to getting these

1200
01:48:17,520 --> 01:48:20,080
telemetry points

1201
01:48:20,080 --> 01:48:22,800
so let's have a look at the old way of

1202
01:48:22,800 --> 01:48:24,800
how monitoring worked

1203
01:48:24,800 --> 01:48:26,480
so at the bottom we have the user space

1204
01:48:26,480 --> 01:48:29,440
top kernel space on the left the logs

1205
01:48:29,440 --> 01:48:31,199
so what would happen is is that

1206
01:48:31,199 --> 01:48:32,560
third-party vendors would have their

1207
01:48:32,560 --> 01:48:34,320
monitoring program hooked into a

1208
01:48:34,320 --> 01:48:35,840
third-party kernel extension running in

1209
01:48:35,840 --> 01:48:38,159
the kernel space and acquire telemetry

1210
01:48:38,159 --> 01:48:39,600
via that point

1211
01:48:39,600 --> 01:48:41,600
then using open bsm hooks they would

1212
01:48:41,600 --> 01:48:43,920
hook into log files and acquire them

1213
01:48:43,920 --> 01:48:45,760
through an auditing process run them

1214
01:48:45,760 --> 01:48:47,520
back to the monitoring program for

1215
01:48:47,520 --> 01:48:48,639
detection

1216
01:48:48,639 --> 01:48:50,880
uh processing

1217
01:48:50,880 --> 01:48:52,800
the new way is slightly different

1218
01:48:52,800 --> 01:48:54,719
so as we said the system extensions work

1219
01:48:54,719 --> 01:48:56,800
in the user space

1220
01:48:56,800 --> 01:48:58,800
and they work on frameworks that were

1221
01:48:58,800 --> 01:49:01,440
introduced by apple to directly access

1222
01:49:01,440 --> 01:49:03,360
kernel space using their proprietary

1223
01:49:03,360 --> 01:49:05,760
kernel extensions these work out as the

1224
01:49:05,760 --> 01:49:07,600
network extension framework

1225
01:49:07,600 --> 01:49:09,600
endpoint security framework or esf and

1226
01:49:09,600 --> 01:49:11,760
the driver kit framework and using a

1227
01:49:11,760 --> 01:49:13,760
amalgamation of the three you have very

1228
01:49:13,760 --> 01:49:15,760
high visibility over the low level

1229
01:49:15,760 --> 01:49:17,920
telemetry of the operating system

1230
01:49:17,920 --> 01:49:20,080
however we're focusing on the esf and

1231
01:49:20,080 --> 01:49:21,599
from that it actually hooks into the

1232
01:49:21,599 --> 01:49:23,199
endpoint security current extension

1233
01:49:23,199 --> 01:49:25,280
getting developed by apple so it allows

1234
01:49:25,280 --> 01:49:27,679
them to have this proprietary pipeline

1235
01:49:27,679 --> 01:49:29,920
from the user space system extension to

1236
01:49:29,920 --> 01:49:33,599
their maintained kernel extension

1237
01:49:34,800 --> 01:49:36,639
but why make the change

1238
01:49:36,639 --> 01:49:40,320
so the one of the primary reasons

1239
01:49:40,320 --> 01:49:42,159
that apple made the change to remove

1240
01:49:42,159 --> 01:49:43,760
canon extensions was for increased

1241
01:49:43,760 --> 01:49:45,760
stability and security

1242
01:49:45,760 --> 01:49:47,760
so by removing third-party kernel

1243
01:49:47,760 --> 01:49:50,239
extensions you avoid things like the

1244
01:49:50,239 --> 01:49:51,840
black screens of death but equally you

1245
01:49:51,840 --> 01:49:53,840
avoid third-party malicious kind of

1246
01:49:53,840 --> 01:49:55,280
extensions from being introduced into

1247
01:49:55,280 --> 01:49:57,520
the operating system

1248
01:49:57,520 --> 01:49:58,960
this means that they have much greater

1249
01:49:58,960 --> 01:50:00,480
control over what is happening in the

1250
01:50:00,480 --> 01:50:02,480
kernel space and it just eliminates a

1251
01:50:02,480 --> 01:50:04,239
lot of the overheads and a lot of the

1252
01:50:04,239 --> 01:50:06,719
problems that are being encountered with

1253
01:50:06,719 --> 01:50:08,080
less stable current extension that we're

1254
01:50:08,080 --> 01:50:09,760
finding in the wild and it means that

1255
01:50:09,760 --> 01:50:12,080
everything becomes very uniform

1256
01:50:12,080 --> 01:50:13,679
one of the things to note about kernel

1257
01:50:13,679 --> 01:50:15,360
extensions is that even though they've

1258
01:50:15,360 --> 01:50:19,360
been deprecated they can still be used

1259
01:50:19,360 --> 01:50:21,599
they're just you have to dramatically

1260
01:50:21,599 --> 01:50:24,000
reduce the security profile of a mac

1261
01:50:24,000 --> 01:50:26,159
operating system in order to do so

1262
01:50:26,159 --> 01:50:27,920
primarily you used to be able to

1263
01:50:27,920 --> 01:50:29,679
introduce current extensions on the fly

1264
01:50:29,679 --> 01:50:31,599
on demand however now you have to

1265
01:50:31,599 --> 01:50:33,199
degrade the security profile that's

1266
01:50:33,199 --> 01:50:34,960
running then you have to

1267
01:50:34,960 --> 01:50:36,800
turn on canon extension and then reboot

1268
01:50:36,800 --> 01:50:38,639
the system which means you can't just

1269
01:50:38,639 --> 01:50:41,360
inject them as you would

1270
01:50:41,360 --> 01:50:44,960
but how can we use the esf

1271
01:50:44,960 --> 01:50:46,000
so

1272
01:50:46,000 --> 01:50:47,599
this slide's a little bit messy so i'll

1273
01:50:47,599 --> 01:50:49,440
just walk you through it so in the

1274
01:50:49,440 --> 01:50:50,800
bottom right you'd have the main code

1275
01:50:50,800 --> 01:50:51,920
running in the user space of your

1276
01:50:51,920 --> 01:50:54,159
program you would then create an

1277
01:50:54,159 --> 01:50:56,800
endpoint security client object

1278
01:50:56,800 --> 01:50:58,400
this would then subscribe to the

1279
01:50:58,400 --> 01:51:00,880
endpoint security kernel extension with

1280
01:51:00,880 --> 01:51:02,880
the event types that you want so you

1281
01:51:02,880 --> 01:51:05,040
specify the event points you want like

1282
01:51:05,040 --> 01:51:07,280
file creation or process creation or

1283
01:51:07,280 --> 01:51:08,880
anything to that sort of thing

1284
01:51:08,880 --> 01:51:10,320
the endpoint security kernel extension

1285
01:51:10,320 --> 01:51:12,639
then crea populates an event message

1286
01:51:12,639 --> 01:51:15,679
queue in the kernel space and then pipes

1287
01:51:15,679 --> 01:51:17,440
that out to your endpoint security

1288
01:51:17,440 --> 01:51:19,440
client which you have already subscribed

1289
01:51:19,440 --> 01:51:21,119
which you use to subscribe to the kernel

1290
01:51:21,119 --> 01:51:22,239
extension

1291
01:51:22,239 --> 01:51:24,800
then on on each message a callback is

1292
01:51:24,800 --> 01:51:26,239
generated which you can have a callback

1293
01:51:26,239 --> 01:51:28,239
monitor and then each message that's

1294
01:51:28,239 --> 01:51:30,400
received can be processed back into your

1295
01:51:30,400 --> 01:51:34,598
main code for detection purposes

1296
01:51:35,599 --> 01:51:37,840
but what are some of the issues with the

1297
01:51:37,840 --> 01:51:41,040
esf use and what are the solutions so

1298
01:51:41,040 --> 01:51:43,920
during my experimentation with esf back

1299
01:51:43,920 --> 01:51:44,880
in

1300
01:51:44,880 --> 01:51:46,880
early 2020

1301
01:51:46,880 --> 01:51:48,560
there were a number of solutions that

1302
01:51:48,560 --> 01:51:50,400
came out from multiple

1303
01:51:50,400 --> 01:51:52,159
researchers and vendors but there were

1304
01:51:52,159 --> 01:51:54,320
some very primary issues that came out

1305
01:51:54,320 --> 01:51:56,639
with its utilization

1306
01:51:56,639 --> 01:51:59,280
namely a bottlenecking issue uh system

1307
01:51:59,280 --> 01:52:01,599
verbosity and a real parent process id

1308
01:52:01,599 --> 01:52:03,119
issue i shall go through each

1309
01:52:03,119 --> 01:52:05,119
individually

1310
01:52:05,119 --> 01:52:06,800
first of all a bottlenecking issue so

1311
01:52:06,800 --> 01:52:08,639
this was actually something that i was

1312
01:52:08,639 --> 01:52:10,639
banging my head against for

1313
01:52:10,639 --> 01:52:12,400
a couple of weeks even a month two

1314
01:52:12,400 --> 01:52:13,920
months and effectively what was

1315
01:52:13,920 --> 01:52:15,840
happening was is where you were doing

1316
01:52:15,840 --> 01:52:17,840
exactly the same experiment

1317
01:52:17,840 --> 01:52:19,599
you would get different data points

1318
01:52:19,599 --> 01:52:21,119
being populated and you'd have different

1319
01:52:21,119 --> 01:52:22,080
numbers

1320
01:52:22,080 --> 01:52:23,440
and it didn't really make any sense as

1321
01:52:23,440 --> 01:52:24,719
to why

1322
01:52:24,719 --> 01:52:26,639
so you'd conduct the same malicious

1323
01:52:26,639 --> 01:52:28,320
experiment using the esf telemetry

1324
01:52:28,320 --> 01:52:30,719
acquisition but you'd always get you

1325
01:52:30,719 --> 01:52:32,320
always get mismatched data points and

1326
01:52:32,320 --> 01:52:33,760
you'd have data points that were being

1327
01:52:33,760 --> 01:52:35,760
missing for no particular reason and

1328
01:52:35,760 --> 01:52:38,080
equally from a detection perspective

1329
01:52:38,080 --> 01:52:39,440
this means that it's inconsistent and

1330
01:52:39,440 --> 01:52:41,760
therefore the data points are unreliable

1331
01:52:41,760 --> 01:52:43,520
and it was a very long-standing reason

1332
01:52:43,520 --> 01:52:45,360
before i figured out exactly why this

1333
01:52:45,360 --> 01:52:47,598
was

1334
01:52:48,560 --> 01:52:50,239
primarily the issue was caused by the

1335
01:52:50,239 --> 01:52:52,400
kernel level q so you may remember from

1336
01:52:52,400 --> 01:52:54,000
the previous slide i said that the

1337
01:52:54,000 --> 01:52:56,400
kernel extension inside

1338
01:52:56,400 --> 01:52:58,800
for the esf would populate a queue

1339
01:52:58,800 --> 01:53:00,560
within the kernel space but what was

1340
01:53:00,560 --> 01:53:02,480
happening was is this queue was being

1341
01:53:02,480 --> 01:53:04,800
overloaded because the amount of data

1342
01:53:04,800 --> 01:53:07,040
that you were subscribing to was simply

1343
01:53:07,040 --> 01:53:09,360
too much so if you try to subscribe to

1344
01:53:09,360 --> 01:53:11,199
too many event types the queue gets

1345
01:53:11,199 --> 01:53:13,440
overloaded and suddenly drops data

1346
01:53:13,440 --> 01:53:14,880
packets which then don't come back to

1347
01:53:14,880 --> 01:53:17,199
the user space but there's no indication

1348
01:53:17,199 --> 01:53:19,280
that this happens so although the data

1349
01:53:19,280 --> 01:53:21,040
packets are dropped from the kernel side

1350
01:53:21,040 --> 01:53:23,199
because the kernel side is obviously

1351
01:53:23,199 --> 01:53:25,679
secure and it's isolated you don't get a

1352
01:53:25,679 --> 01:53:27,760
notification that this has happened

1353
01:53:27,760 --> 01:53:30,639
which is which is problematic

1354
01:53:30,639 --> 01:53:33,360
two primary solutions to this are a

1355
01:53:33,360 --> 01:53:36,000
development solution and a

1356
01:53:36,000 --> 01:53:38,400
esf proprietary solution i'll go over

1357
01:53:38,400 --> 01:53:41,440
the event muting first so event event

1358
01:53:41,440 --> 01:53:43,840
muting is a function that was built into

1359
01:53:43,840 --> 01:53:45,199
esf

1360
01:53:45,199 --> 01:53:47,679
and what it does is it allows for

1361
01:53:47,679 --> 01:53:50,480
specification for events to be dropped

1362
01:53:50,480 --> 01:53:52,800
inside the current extension space

1363
01:53:52,800 --> 01:53:54,880
now what this means is that through

1364
01:53:54,880 --> 01:53:57,280
process path or process token you can

1365
01:53:57,280 --> 01:53:59,760
specify particular event types to be

1366
01:53:59,760 --> 01:54:01,119
dropped on the kernel side and not

1367
01:54:01,119 --> 01:54:03,760
published into the event message queue

1368
01:54:03,760 --> 01:54:05,440
inside the kernel extension

1369
01:54:05,440 --> 01:54:06,880
because of this it means that you can

1370
01:54:06,880 --> 01:54:08,960
avoid overloading

1371
01:54:08,960 --> 01:54:11,920
however it's quite a blunt tool back

1372
01:54:11,920 --> 01:54:13,760
when i was experimenting with it because

1373
01:54:13,760 --> 01:54:15,280
you either had to specify an entire

1374
01:54:15,280 --> 01:54:17,280
process path again assuming it hasn't

1375
01:54:17,280 --> 01:54:19,360
been hijacked by anything or you had to

1376
01:54:19,360 --> 01:54:20,880
do it by a process token which only

1377
01:54:20,880 --> 01:54:22,719
works for that instance of the process

1378
01:54:22,719 --> 01:54:24,880
it was either too much of a sledgehammer

1379
01:54:24,880 --> 01:54:27,920
or it was too um unspecific it wasn't

1380
01:54:27,920 --> 01:54:30,480
targeted enough so for

1381
01:54:30,480 --> 01:54:32,639
a um

1382
01:54:32,639 --> 01:54:35,040
viable solution event muting just wasn't

1383
01:54:35,040 --> 01:54:37,840
specific enough for effective filtering

1384
01:54:37,840 --> 01:54:40,239
multi-client system however did turn out

1385
01:54:40,239 --> 01:54:42,400
to be very effective so whereas you

1386
01:54:42,400 --> 01:54:44,239
would have a

1387
01:54:44,239 --> 01:54:45,679
endpoint security client within a

1388
01:54:45,679 --> 01:54:48,000
process subscribe to event types instead

1389
01:54:48,000 --> 01:54:49,760
of having one client subscribe to

1390
01:54:49,760 --> 01:54:51,599
multiple event types you could have

1391
01:54:51,599 --> 01:54:52,960
multiple clients subscribed to

1392
01:54:52,960 --> 01:54:54,880
individual event types which equally

1393
01:54:54,880 --> 01:54:56,880
generated their own queue within the

1394
01:54:56,880 --> 01:54:59,040
kernel space and by using this method

1395
01:54:59,040 --> 01:55:00,719
you don't get overload and you get all

1396
01:55:00,719 --> 01:55:02,239
the data you require and you can

1397
01:55:02,239 --> 01:55:04,320
conglomerate them into one data set and

1398
01:55:04,320 --> 01:55:05,440
then run it through your detection stack

1399
01:55:05,440 --> 01:55:07,679
by crops referencing which was very

1400
01:55:07,679 --> 01:55:09,760
effective

1401
01:55:09,760 --> 01:55:12,159
one point to note is that um the

1402
01:55:12,159 --> 01:55:14,719
original development was on sdk 10.15

1403
01:55:14,719 --> 01:55:16,800
for catalina this was when esf was

1404
01:55:16,800 --> 01:55:19,920
introduced but between 10.15 and 10.1

1405
01:55:19,920 --> 01:55:23,280
5.4 the sdk was suddenly updated one

1406
01:55:23,280 --> 01:55:25,440
with a number of new event types they

1407
01:55:25,440 --> 01:55:27,360
equate something called the sec num or

1408
01:55:27,360 --> 01:55:29,520
sequence number in the es message so

1409
01:55:29,520 --> 01:55:30,960
whereas i was saying before there's no

1410
01:55:30,960 --> 01:55:32,560
notification from the kernel that silent

1411
01:55:32,560 --> 01:55:34,560
drops have occurred that is still the

1412
01:55:34,560 --> 01:55:37,040
case but by using the sequence number

1413
01:55:37,040 --> 01:55:38,800
you can see whether there's a gap in

1414
01:55:38,800 --> 01:55:40,320
those sequence numbers to see whether a

1415
01:55:40,320 --> 01:55:41,599
message has been dropped due to

1416
01:55:41,599 --> 01:55:44,000
overloading so it doesn't alert you per

1417
01:55:44,000 --> 01:55:46,719
se but it does allow you to filter that

1418
01:55:46,719 --> 01:55:48,480
data and detect when it's happening and

1419
01:55:48,480 --> 01:55:50,320
from that do diet things like dynamic

1420
01:55:50,320 --> 01:55:54,480
rebalancing in order to prevent overload

1421
01:55:54,480 --> 01:55:56,480
system verbosity um if you look on the

1422
01:55:56,480 --> 01:55:57,760
image on the right you'll see that the

1423
01:55:57,760 --> 01:56:01,119
original uid is zero this is the system

1424
01:56:01,119 --> 01:56:03,440
user id on the on the system on the

1425
01:56:03,440 --> 01:56:06,080
operating system um and because it works

1426
01:56:06,080 --> 01:56:08,480
at the kernel level it ingests all the

1427
01:56:08,480 --> 01:56:10,239
processing and all the file information

1428
01:56:10,239 --> 01:56:12,000
for the system as well including system

1429
01:56:12,000 --> 01:56:14,320
daemons and system level

1430
01:56:14,320 --> 01:56:16,560
propriety management systems

1431
01:56:16,560 --> 01:56:18,560
and this creates a problem because we've

1432
01:56:18,560 --> 01:56:20,239
talked about the bottlenecking issue

1433
01:56:20,239 --> 01:56:23,119
before the simple amount of data that's

1434
01:56:23,119 --> 01:56:25,280
being processed by the esf when you take

1435
01:56:25,280 --> 01:56:27,760
into account the system events is

1436
01:56:27,760 --> 01:56:29,760
extremely high

1437
01:56:29,760 --> 01:56:31,040
and because of this you end up with a

1438
01:56:31,040 --> 01:56:33,440
sort of overhead issue where you have to

1439
01:56:33,440 --> 01:56:34,960
either filter out these system level

1440
01:56:34,960 --> 01:56:37,440
events or you have to

1441
01:56:37,440 --> 01:56:38,880
allow them but then do additional

1442
01:56:38,880 --> 01:56:42,320
filtering for anomalous indications

1443
01:56:42,320 --> 01:56:44,320
so one of the things again is that you

1444
01:56:44,320 --> 01:56:46,080
could do it either before or after

1445
01:56:46,080 --> 01:56:48,400
collection so before collection as we

1446
01:56:48,400 --> 01:56:50,480
said would be by event muting but as

1447
01:56:50,480 --> 01:56:52,239
i've said before this is quite a blunt

1448
01:56:52,239 --> 01:56:54,560
tool and to use this for this sort of

1449
01:56:54,560 --> 01:56:56,719
activity it means you'll be dropping

1450
01:56:56,719 --> 01:56:58,320
the only way to do this would be to drop

1451
01:56:58,320 --> 01:57:00,000
all processes running at the system

1452
01:57:00,000 --> 01:57:02,000
level which can

1453
01:57:02,000 --> 01:57:03,679
introduce ignorance of system level

1454
01:57:03,679 --> 01:57:07,360
compromise which could be very dangerous

1455
01:57:07,360 --> 01:57:08,719
so instead you have to look at

1456
01:57:08,719 --> 01:57:10,239
client-side filtering but then you look

1457
01:57:10,239 --> 01:57:12,159
at the bottleneck issue that i mentioned

1458
01:57:12,159 --> 01:57:14,400
before and even when you start to filter

1459
01:57:14,400 --> 01:57:16,159
down the event types into individual

1460
01:57:16,159 --> 01:57:18,159
clients you still run the risk of data

1461
01:57:18,159 --> 01:57:19,920
events being dropped simply because the

1462
01:57:19,920 --> 01:57:22,560
system level processing event generation

1463
01:57:22,560 --> 01:57:25,599
is just so high so it's a becomes a

1464
01:57:25,599 --> 01:57:27,599
balancing act between the two

1465
01:57:27,599 --> 01:57:30,080
um there's no real

1466
01:57:30,080 --> 01:57:32,159
one-size-fits-all solution for this so

1467
01:57:32,159 --> 01:57:33,920
you have to sort of balance this

1468
01:57:33,920 --> 01:57:38,119
dynamically as well as possible

1469
01:57:38,320 --> 01:57:40,239
parent process id issue so this is an

1470
01:57:40,239 --> 01:57:42,320
ongoing issue in the mac operating

1471
01:57:42,320 --> 01:57:44,719
system

1472
01:57:45,599 --> 01:57:49,199
primarily this relates back to

1473
01:57:49,199 --> 01:57:52,159
identifying where the original process

1474
01:57:52,159 --> 01:57:54,560
was spawned from so this actually goes

1475
01:57:54,560 --> 01:57:57,440
back to things like xpc proxy launch d

1476
01:57:57,440 --> 01:57:58,800
and more recently something called

1477
01:57:58,800 --> 01:58:00,480
running board

1478
01:58:00,480 --> 01:58:02,159
so you may see at the top there's a real

1479
01:58:02,159 --> 01:58:05,679
ppid of -1 this is actually by using a

1480
01:58:05,679 --> 01:58:08,639
ppid solution um

1481
01:58:08,639 --> 01:58:10,080
but as you can see because it was

1482
01:58:10,080 --> 01:58:11,760
running on a newer operating system the

1483
01:58:11,760 --> 01:58:14,320
result has actually come out as -1 which

1484
01:58:14,320 --> 01:58:15,280
is

1485
01:58:15,280 --> 01:58:17,199
incorrect data just to demonstrate that

1486
01:58:17,199 --> 01:58:18,400
this is actually an ongoing issue that

1487
01:58:18,400 --> 01:58:21,040
there isn't really a permanent solution

1488
01:58:21,040 --> 01:58:23,440
for at the bottom you can see that there

1489
01:58:23,440 --> 01:58:26,400
is launch d being launched um xbc proxy

1490
01:58:26,400 --> 01:58:29,119
being launched uh launched by launch d

1491
01:58:29,119 --> 01:58:30,800
but that doesn't necessarily indicate

1492
01:58:30,800 --> 01:58:32,239
where an original process was called

1493
01:58:32,239 --> 01:58:34,239
from the reason for this is because of

1494
01:58:34,239 --> 01:58:34,960
how

1495
01:58:34,960 --> 01:58:36,719
cross-process communications work in mac

1496
01:58:36,719 --> 01:58:40,560
os it's not really that easy to identify

1497
01:58:40,560 --> 01:58:42,320
what process was initiating another

1498
01:58:42,320 --> 01:58:44,000
because it jumps through these other

1499
01:58:44,000 --> 01:58:46,000
programs so when you start to go back to

1500
01:58:46,000 --> 01:58:48,960
the process chain that can be gapped

1501
01:58:48,960 --> 01:58:52,800
due to these underlying system processes

1502
01:58:52,800 --> 01:58:55,040
as i said there is no real future-proof

1503
01:58:55,040 --> 01:58:56,480
solution the real reason for this is

1504
01:58:56,480 --> 01:58:58,719
that apple keep changing the way that

1505
01:58:58,719 --> 01:59:00,560
this cross-process communication works

1506
01:59:00,560 --> 01:59:02,560
for process um spawning

1507
01:59:02,560 --> 01:59:04,880
so any time a solution is made for one

1508
01:59:04,880 --> 01:59:06,880
operating system version it can be made

1509
01:59:06,880 --> 01:59:09,040
obsolete by the next update which as you

1510
01:59:09,040 --> 01:59:10,400
can imagine is

1511
01:59:10,400 --> 01:59:12,239
fairly frustrating

1512
01:59:12,239 --> 01:59:13,840
the current solutions that i was looking

1513
01:59:13,840 --> 01:59:15,440
at the time were true tree by john

1514
01:59:15,440 --> 01:59:18,000
bradley and launch xpc by patrick wall

1515
01:59:18,000 --> 01:59:20,239
launch xvc was actually a solution that

1516
01:59:20,239 --> 01:59:22,239
was implemented in

1517
01:59:22,239 --> 01:59:24,159
my esfang solution

1518
01:59:24,159 --> 01:59:25,840
but it doesn't take into account running

1519
01:59:25,840 --> 01:59:28,480
board at the time which means that as

1520
01:59:28,480 --> 01:59:30,320
was demonstrated by the minus one real

1521
01:59:30,320 --> 01:59:31,840
ppid

1522
01:59:31,840 --> 01:59:34,960
it is not a fully fledged or conclusive

1523
01:59:34,960 --> 01:59:36,800
solution to this

1524
01:59:36,800 --> 01:59:39,280
as i said this is an ongoing problem

1525
01:59:39,280 --> 01:59:40,960
that there isn't a one-size-fits-all

1526
01:59:40,960 --> 01:59:44,080
solution for yet um and it it was beyond

1527
01:59:44,080 --> 01:59:46,000
my scope to to try and figure that one

1528
01:59:46,000 --> 01:59:47,679
out

1529
01:59:47,679 --> 01:59:49,920
so looking at the solution that i

1530
01:59:49,920 --> 01:59:52,960
developed or my psc poc which i code

1531
01:59:52,960 --> 01:59:54,560
named es fang

1532
01:59:54,560 --> 01:59:56,639
so first of all i need to shout out to

1533
01:59:56,639 --> 01:59:59,360
patrick wardle chris ross and omar ikram

1534
01:59:59,360 --> 02:00:02,719
they back in the early 2020 really set

1535
02:00:02,719 --> 02:00:05,360
the stage for how esf could work the

1536
02:00:05,360 --> 02:00:07,040
sort of telemetry acquisitions and

1537
02:00:07,040 --> 02:00:08,400
really basic

1538
02:00:08,400 --> 02:00:11,119
um fundamentals of how to ingest esf

1539
02:00:11,119 --> 02:00:14,159
data and my plc was based primarily off

1540
02:00:14,159 --> 02:00:15,760
of their work and then expanding on it

1541
02:00:15,760 --> 02:00:18,800
and introducing capabilities and

1542
02:00:18,800 --> 02:00:20,800
solutions that i mentioned before for

1543
02:00:20,800 --> 02:00:24,400
some of the issues that i encountered

1544
02:00:24,719 --> 02:00:26,480
my solution was actually developed early

1545
02:00:26,480 --> 02:00:30,000
in 2021 um and it was based off of 52

1546
02:00:30,000 --> 02:00:32,199
event types back in sdk

1547
02:00:32,199 --> 02:00:33,920
10.15.4

1548
02:00:33,920 --> 02:00:34,880
the

1549
02:00:34,880 --> 02:00:36,880
primary reason that i did this was that

1550
02:00:36,880 --> 02:00:39,599
the old solutions had a fixed definition

1551
02:00:39,599 --> 02:00:41,920
of what event types it would ingest and

1552
02:00:41,920 --> 02:00:43,599
as i said before

1553
02:00:43,599 --> 02:00:45,520
this meant that overloading could occur

1554
02:00:45,520 --> 02:00:47,679
because it was a fixed number of event

1555
02:00:47,679 --> 02:00:50,400
types which you couldn't necessarily

1556
02:00:50,400 --> 02:00:52,400
deviate from which if it was causing

1557
02:00:52,400 --> 02:00:54,400
eventing you couldn't

1558
02:00:54,400 --> 02:00:57,040
change from the rigid structure

1559
02:00:57,040 --> 02:00:59,360
however the solution that i put in was a

1560
02:00:59,360 --> 02:01:01,440
dynamic solution so this allows you that

1561
02:01:01,440 --> 02:01:03,679
each boot you can specify which event

1562
02:01:03,679 --> 02:01:05,040
types you want to subscribe to so you

1563
02:01:05,040 --> 02:01:07,280
can have multiple espang instances

1564
02:01:07,280 --> 02:01:09,360
subscribe to different event types or

1565
02:01:09,360 --> 02:01:10,560
you can have them subscribe to multiple

1566
02:01:10,560 --> 02:01:12,800
event types or group types like

1567
02:01:12,800 --> 02:01:13,840
file

1568
02:01:13,840 --> 02:01:16,960
file creation data or file metadata um

1569
02:01:16,960 --> 02:01:20,080
uipc data um cross b

1570
02:01:20,080 --> 02:01:20,960
cross

1571
02:01:20,960 --> 02:01:22,560
process communication port data and

1572
02:01:22,560 --> 02:01:23,920
things like that

1573
02:01:23,920 --> 02:01:25,040
um

1574
02:01:25,040 --> 02:01:27,440
using the solution you can avoid the

1575
02:01:27,440 --> 02:01:30,159
overhead um the bottlenecking issue

1576
02:01:30,159 --> 02:01:32,560
i when i started this had never coded in

1577
02:01:32,560 --> 02:01:35,040
objective c before so doing

1578
02:01:35,040 --> 02:01:37,119
multi-threaded processes to achieve this

1579
02:01:37,119 --> 02:01:39,280
as a standard solution was actually a

1580
02:01:39,280 --> 02:01:42,000
bit outside the scope but it is it

1581
02:01:42,000 --> 02:01:44,320
should be easy to do moving forward from

1582
02:01:44,320 --> 02:01:46,639
any objective-c programmers out there

1583
02:01:46,639 --> 02:01:48,239
one thing to note is that because this

1584
02:01:48,239 --> 02:01:50,480
was not done with an apple developer id

1585
02:01:50,480 --> 02:01:53,119
it is a plc code so sip has to be

1586
02:01:53,119 --> 02:01:55,679
disabled or system integrity protection

1587
02:01:55,679 --> 02:01:58,800
so esf cannot be accessed with sip

1588
02:01:58,800 --> 02:02:00,960
enabled unless the program that you're

1589
02:02:00,960 --> 02:02:02,560
using has been signed by an apple

1590
02:02:02,560 --> 02:02:04,960
developer id so if you want to use this

1591
02:02:04,960 --> 02:02:07,119
for testing purposes you have to disable

1592
02:02:07,119 --> 02:02:10,480
sip on your system so this isn't viable

1593
02:02:10,480 --> 02:02:12,960
for production level systems

1594
02:02:12,960 --> 02:02:15,199
the other thing is that it was designed

1595
02:02:15,199 --> 02:02:17,840
for json output for upstream integration

1596
02:02:17,840 --> 02:02:18,639
so

1597
02:02:18,639 --> 02:02:20,480
all the output is put into json format

1598
02:02:20,480 --> 02:02:22,159
so it can be easily piped up into a

1599
02:02:22,159 --> 02:02:24,239
database for further detection

1600
02:02:24,239 --> 02:02:28,159
processing and easy acquisition by um

1601
02:02:28,159 --> 02:02:30,080
elastic or threatening teams to those

1602
02:02:30,080 --> 02:02:33,119
data sets

1603
02:02:33,119 --> 02:02:34,800
so let's go over the merterpretty use

1604
02:02:34,800 --> 02:02:37,119
case

1605
02:02:37,360 --> 02:02:38,719
use case

1606
02:02:38,719 --> 02:02:41,159
was done on mac os

1607
02:02:41,159 --> 02:02:43,040
11.2.2

1608
02:02:43,040 --> 02:02:45,119
i used esvang to collect all the data

1609
02:02:45,119 --> 02:02:46,800
and this is for the agent only so this

1610
02:02:46,800 --> 02:02:47,840
isn't to do with the metasploit

1611
02:02:47,840 --> 02:02:49,280
frameworks capability that can be piped

1612
02:02:49,280 --> 02:02:51,040
through the interpreter agent it is only

1613
02:02:51,040 --> 02:02:52,560
for the native interpreter agent

1614
02:02:52,560 --> 02:02:54,159
capability

1615
02:02:54,159 --> 02:02:56,080
this is only done on the post exploit

1616
02:02:56,080 --> 02:02:58,080
phase so i'm not interested in how the

1617
02:02:58,080 --> 02:02:59,679
agent got onto the system only what the

1618
02:02:59,679 --> 02:03:01,520
age you can do once it is on a system

1619
02:03:01,520 --> 02:03:03,119
and this was done only against a single

1620
02:03:03,119 --> 02:03:04,960
host so not against an enterprise

1621
02:03:04,960 --> 02:03:06,400
interconnected

1622
02:03:06,400 --> 02:03:08,480
sort of demonstration so it's not

1623
02:03:08,480 --> 02:03:10,560
necessarily representative of a real

1624
02:03:10,560 --> 02:03:12,880
life attack but it's to demonstrate what

1625
02:03:12,880 --> 02:03:16,880
esf telemetry is capable of

1626
02:03:16,880 --> 02:03:18,560
so the overall findings again the graph

1627
02:03:18,560 --> 02:03:20,880
on the right is very small it's

1628
02:03:20,880 --> 02:03:23,679
it's a representation of all the

1629
02:03:23,679 --> 02:03:25,920
commands that were executed and the data

1630
02:03:25,920 --> 02:03:27,840
that was generated as you can see from

1631
02:03:27,840 --> 02:03:29,760
the top solution is actually webcam

1632
02:03:29,760 --> 02:03:32,159
streaming which is not opsec obviously

1633
02:03:32,159 --> 02:03:34,000
and as you can see it generates a

1634
02:03:34,000 --> 02:03:36,239
massive amount of data but as you move

1635
02:03:36,239 --> 02:03:37,920
further down you can see that some of

1636
02:03:37,920 --> 02:03:41,119
the data some of the commands generated

1637
02:03:41,119 --> 02:03:43,040
seemingly none of very little event

1638
02:03:43,040 --> 02:03:44,639
types but i will go through some of

1639
02:03:44,639 --> 02:03:46,880
these to demonstrate some of the data

1640
02:03:46,880 --> 02:03:49,199
values that can be found

1641
02:03:49,199 --> 02:03:52,320
so during the install you can see that

1642
02:03:52,320 --> 02:03:53,760
uh open

1643
02:03:53,760 --> 02:03:56,159
read directory and protect were the

1644
02:03:56,159 --> 02:03:57,760
highest event types that were generated

1645
02:03:57,760 --> 02:03:59,599
through esf for merterpreter

1646
02:03:59,599 --> 02:04:00,800
installation

1647
02:04:00,800 --> 02:04:03,679
now memory protect and um memory mapping

1648
02:04:03,679 --> 02:04:05,760
for new processes you expect this to

1649
02:04:05,760 --> 02:04:07,360
occur and memory protect being that high

1650
02:04:07,360 --> 02:04:08,719
is actually not that anonymous even

1651
02:04:08,719 --> 02:04:10,480
though it's quite a high number but if

1652
02:04:10,480 --> 02:04:12,320
you turn this against what a normal

1653
02:04:12,320 --> 02:04:14,239
process would do on the mac estate it

1654
02:04:14,239 --> 02:04:15,520
actually doesn't stand out as that

1655
02:04:15,520 --> 02:04:16,880
anomalous especially when you look into

1656
02:04:16,880 --> 02:04:18,560
the internal data

1657
02:04:18,560 --> 02:04:20,800
the open event however is slightly more

1658
02:04:20,800 --> 02:04:24,000
anomalous alongside the fc ntl or file

1659
02:04:24,000 --> 02:04:26,159
control events the reason for this is

1660
02:04:26,159 --> 02:04:29,040
that during during deployment the amount

1661
02:04:29,040 --> 02:04:30,480
of file that it accesses in order to

1662
02:04:30,480 --> 02:04:33,919
enumerate number of system

1663
02:04:34,560 --> 02:04:36,320
enumerate the system information and

1664
02:04:36,320 --> 02:04:38,800
equally to change certain file access

1665
02:04:38,800 --> 02:04:41,040
controls can be indicative of a

1666
02:04:41,040 --> 02:04:42,719
temperature deployment so actually

1667
02:04:42,719 --> 02:04:44,480
looking at these two specific event

1668
02:04:44,480 --> 02:04:47,280
types does allow you to process profile

1669
02:04:47,280 --> 02:04:49,119
interpreter installation

1670
02:04:49,119 --> 02:04:53,239
on a mac operating system

1671
02:04:57,280 --> 02:04:58,560
so breaking down that slide a little bit

1672
02:04:58,560 --> 02:05:01,599
further in total 259 data points are

1673
02:05:01,599 --> 02:05:03,440
generated during an interpreter

1674
02:05:03,440 --> 02:05:04,719
installation

1675
02:05:04,719 --> 02:05:07,679
but 259 data points doesn't necessarily

1676
02:05:07,679 --> 02:05:08,960
mean that they're great data points

1677
02:05:08,960 --> 02:05:10,719
quantity is not always

1678
02:05:10,719 --> 02:05:13,119
an indicator of quality

1679
02:05:13,119 --> 02:05:15,040
but if you have enough data points with

1680
02:05:15,040 --> 02:05:16,639
enough cross referencing you can

1681
02:05:16,639 --> 02:05:18,960
generate more accurate processes

1682
02:05:18,960 --> 02:05:21,280
profiles and higher fidelity as long as

1683
02:05:21,280 --> 02:05:24,000
you know what you're looking for and esf

1684
02:05:24,000 --> 02:05:25,840
during my experimentation showed that it

1685
02:05:25,840 --> 02:05:28,000
had both quantity and it had quality

1686
02:05:28,000 --> 02:05:30,159
event types so by filtering the two

1687
02:05:30,159 --> 02:05:31,599
together you actually get a very

1688
02:05:31,599 --> 02:05:32,800
accurate representation of when

1689
02:05:32,800 --> 02:05:35,440
anomalous behavior has occurred

1690
02:05:35,440 --> 02:05:36,719
but let's look at some of the other

1691
02:05:36,719 --> 02:05:39,040
event types that are generated and

1692
02:05:39,040 --> 02:05:41,440
against what sort of commands

1693
02:05:41,440 --> 02:05:44,000
so on this slide again so this is to do

1694
02:05:44,000 --> 02:05:46,719
with file open events so on the far

1695
02:05:46,719 --> 02:05:48,400
right you can see webcam stream

1696
02:05:48,400 --> 02:05:50,800
of 478 and it's not operation secure so

1697
02:05:50,800 --> 02:05:52,800
that stands out like a sore thumb

1698
02:05:52,800 --> 02:05:54,560
process listing is slightly different so

1699
02:05:54,560 --> 02:05:56,639
for each process that's running it opens

1700
02:05:56,639 --> 02:05:58,800
an individual file for each process to

1701
02:05:58,800 --> 02:06:01,840
see whether it is whether it is running

1702
02:06:01,840 --> 02:06:03,679
um when you look at that event type

1703
02:06:03,679 --> 02:06:05,440
individually you can actually filter out

1704
02:06:05,440 --> 02:06:07,520
that scanning each individual processes

1705
02:06:07,520 --> 02:06:10,079
file which is quite easy to profile

1706
02:06:10,079 --> 02:06:11,599
if you already know what processes are

1707
02:06:11,599 --> 02:06:13,599
running on the system you can just scan

1708
02:06:13,599 --> 02:06:14,480
for

1709
02:06:14,480 --> 02:06:17,040
is asus is a process scanning for all

1710
02:06:17,040 --> 02:06:18,960
the running processing files and detect

1711
02:06:18,960 --> 02:06:20,880
against that

1712
02:06:20,880 --> 02:06:23,119
the screen share and system information

1713
02:06:23,119 --> 02:06:27,199
follows the same sort of

1714
02:06:27,920 --> 02:06:30,239
process so in order to enumerate and

1715
02:06:30,239 --> 02:06:31,679
gather information about how it's going

1716
02:06:31,679 --> 02:06:33,440
to screen share it has to open up a

1717
02:06:33,440 --> 02:06:35,199
number of system files and system

1718
02:06:35,199 --> 02:06:36,480
information it does the same way as it

1719
02:06:36,480 --> 02:06:38,159
does for process listing instead of

1720
02:06:38,159 --> 02:06:40,000
using general system information

1721
02:06:40,000 --> 02:06:41,599
commands from the bash terminal and

1722
02:06:41,599 --> 02:06:44,880
instead accesses a number of system um

1723
02:06:44,880 --> 02:06:47,599
files on the on the operating system in

1724
02:06:47,599 --> 02:06:51,280
order to enumerate that information

1725
02:06:51,280 --> 02:06:53,119
notify right this is a really

1726
02:06:53,119 --> 02:06:55,199
interesting one so edit file when it

1727
02:06:55,199 --> 02:06:57,199
targets an individual file to edit it

1728
02:06:57,199 --> 02:06:58,639
writes the information the file and you

1729
02:06:58,639 --> 02:07:00,639
get one writer then

1730
02:07:00,639 --> 02:07:02,719
upload is slightly different so when you

1731
02:07:02,719 --> 02:07:05,760
upload using meterpreter instead as it's

1732
02:07:05,760 --> 02:07:07,840
transferring the data from your

1733
02:07:07,840 --> 02:07:09,760
attack machine to the compromised

1734
02:07:09,760 --> 02:07:12,239
machine each packet is appended to the

1735
02:07:12,239 --> 02:07:13,360
file

1736
02:07:13,360 --> 02:07:15,280
routinely as it's received which

1737
02:07:15,280 --> 02:07:18,000
generates this nump this huge number of

1738
02:07:18,000 --> 02:07:20,400
write events to an individual file but

1739
02:07:20,400 --> 02:07:23,040
the write a size is quite small and it

1740
02:07:23,040 --> 02:07:25,280
actually corresponds to the size of

1741
02:07:25,280 --> 02:07:26,639
network packets being received from the

1742
02:07:26,639 --> 02:07:28,079
interpreter agent

1743
02:07:28,079 --> 02:07:30,639
so from this you can actually target one

1744
02:07:30,639 --> 02:07:33,280
processor targeting one other file in

1745
02:07:33,280 --> 02:07:35,040
the right event and doing it in very

1746
02:07:35,040 --> 02:07:37,119
small increments

1747
02:07:37,119 --> 02:07:39,040
repeatedly especially if you filter out

1748
02:07:39,040 --> 02:07:40,560
things like uh internet browsers and

1749
02:07:40,560 --> 02:07:42,239
things like that you very quickly can

1750
02:07:42,239 --> 02:07:45,678
isolate when this is occurring

1751
02:07:46,079 --> 02:07:48,079
io open is another interesting one so

1752
02:07:48,079 --> 02:07:50,320
this is to do with driver or hardware

1753
02:07:50,320 --> 02:07:51,360
access

1754
02:07:51,360 --> 02:07:53,040
and again you'd expect to see webcam

1755
02:07:53,040 --> 02:07:55,199
stream 220 because it's hijacking the

1756
02:07:55,199 --> 02:07:57,119
webcam streams

1757
02:07:57,119 --> 02:07:58,400
data feed

1758
02:07:58,400 --> 02:08:00,159
but screen share again because it's

1759
02:08:00,159 --> 02:08:02,960
hijacking the user interface uh display

1760
02:08:02,960 --> 02:08:06,480
feed it equally generates io event types

1761
02:08:06,480 --> 02:08:09,199
and again io kit is not something you

1762
02:08:09,199 --> 02:08:12,400
see commonly it's quite a

1763
02:08:12,400 --> 02:08:15,040
low generated event so finding any io

1764
02:08:15,040 --> 02:08:18,159
kit events outside of system uid is

1765
02:08:18,159 --> 02:08:20,000
quite anonymous and makes it very easy

1766
02:08:20,000 --> 02:08:22,079
to identify when malicious behavior is

1767
02:08:22,079 --> 02:08:24,159
occurring

1768
02:08:24,159 --> 02:08:26,480
this is a list of some of the valued

1769
02:08:26,480 --> 02:08:29,280
event types done against other that i've

1770
02:08:29,280 --> 02:08:31,199
isolated from other investigations

1771
02:08:31,199 --> 02:08:33,520
against things like uh max shell swift

1772
02:08:33,520 --> 02:08:34,800
sliver

1773
02:08:34,800 --> 02:08:37,679
merlin and other attack frameworks one

1774
02:08:37,679 --> 02:08:39,040
of the interesting ones uh one of the

1775
02:08:39,040 --> 02:08:40,639
primary interesting ones is on the right

1776
02:08:40,639 --> 02:08:43,440
there for pty grant uh the reason for

1777
02:08:43,440 --> 02:08:45,199
this is that peter where guard is for

1778
02:08:45,199 --> 02:08:49,199
pseudo-terminal generation so for a

1779
02:08:49,199 --> 02:08:51,199
dynamic user session instead of piping

1780
02:08:51,199 --> 02:08:52,560
the command through a bash terminal like

1781
02:08:52,560 --> 02:08:54,960
you normally would instead max shell

1782
02:08:54,960 --> 02:08:56,719
swift generates a pseudo terminal which

1783
02:08:56,719 --> 02:08:58,639
is a master slave comparison and

1784
02:08:58,639 --> 02:09:00,320
actually executes the commands that way

1785
02:09:00,320 --> 02:09:01,840
which is slightly weird and you don't

1786
02:09:01,840 --> 02:09:05,480
see that very often

1787
02:09:05,760 --> 02:09:07,840
so in summary

1788
02:09:07,840 --> 02:09:10,880
esf is extremely powerful and it's very

1789
02:09:10,880 --> 02:09:13,360
clear that apple is taking the time to

1790
02:09:13,360 --> 02:09:15,520
really look over the problems that are

1791
02:09:15,520 --> 02:09:17,119
occurring

1792
02:09:17,119 --> 02:09:19,199
during its use and equally to refine the

1793
02:09:19,199 --> 02:09:21,040
event types that are available

1794
02:09:21,040 --> 02:09:24,320
during s d progression from sdk 10.15 to

1795
02:09:24,320 --> 02:09:27,360
sdk 10.1 5.4 the number of event types

1796
02:09:27,360 --> 02:09:29,280
increased but equally so did the

1797
02:09:29,280 --> 02:09:30,800
capabilities of detection when the

1798
02:09:30,800 --> 02:09:32,239
system wasn't necessarily doing what it

1799
02:09:32,239 --> 02:09:33,920
was meant to

1800
02:09:33,920 --> 02:09:36,159
because of this um it's actually quite

1801
02:09:36,159 --> 02:09:37,599
nice it's actually quite reassuring

1802
02:09:37,599 --> 02:09:39,040
knowing that apple have made this not

1803
02:09:39,040 --> 02:09:40,800
really optional due to the deprecation

1804
02:09:40,800 --> 02:09:43,040
of kernel extensions from third parties

1805
02:09:43,040 --> 02:09:44,320
and the fact that they're actually

1806
02:09:44,320 --> 02:09:45,760
maintaining this

1807
02:09:45,760 --> 02:09:47,599
shows that they realize that they've

1808
02:09:47,599 --> 02:09:48,719
taken that control away from the

1809
02:09:48,719 --> 02:09:49,920
security industry but are actually

1810
02:09:49,920 --> 02:09:51,760
taking steps to provide all the

1811
02:09:51,760 --> 02:09:53,520
information and the stability that is

1812
02:09:53,520 --> 02:09:54,719
required

1813
02:09:54,719 --> 02:09:56,159
as we said some of the teething issues

1814
02:09:56,159 --> 02:09:58,159
to begin with have been addressed but

1815
02:09:58,159 --> 02:10:00,159
there are still more that exist and

1816
02:10:00,159 --> 02:10:01,840
during more and more experimentation

1817
02:10:01,840 --> 02:10:03,679
they will rear their heads as we go

1818
02:10:03,679 --> 02:10:05,520
forward

1819
02:10:05,520 --> 02:10:07,920
as i said earlier um compared to prior

1820
02:10:07,920 --> 02:10:09,280
solutions especially developing your

1821
02:10:09,280 --> 02:10:10,960
internal extensions or using open bsn

1822
02:10:10,960 --> 02:10:13,199
which is very clunky esf is very

1823
02:10:13,199 --> 02:10:15,360
streamlined it's very easy to integrate

1824
02:10:15,360 --> 02:10:17,360
into your existing stack

1825
02:10:17,360 --> 02:10:19,679
and because of this it makes integration

1826
02:10:19,679 --> 02:10:21,599
and development on it very easy from a

1827
02:10:21,599 --> 02:10:24,560
security development standpoint

1828
02:10:24,560 --> 02:10:26,800
looking at the use cases and some of the

1829
02:10:26,800 --> 02:10:28,320
other experimentations that i've done in

1830
02:10:28,320 --> 02:10:30,320
the past it does mean the detection

1831
02:10:30,320 --> 02:10:32,239
capabilities that are available are very

1832
02:10:32,239 --> 02:10:34,400
high and it means that moving forward we

1833
02:10:34,400 --> 02:10:36,159
were able to create better detection

1834
02:10:36,159 --> 02:10:38,960
profiles based off the esf telemetry

1835
02:10:38,960 --> 02:10:40,639
that is available at equally expanding

1836
02:10:40,639 --> 02:10:42,000
event types that they're they're

1837
02:10:42,000 --> 02:10:43,199
allowing

1838
02:10:43,199 --> 02:10:46,159
the the final point to note is that as

1839
02:10:46,159 --> 02:10:48,159
as i've mentioned the number of event

1840
02:10:48,159 --> 02:10:49,520
points that are generated especially

1841
02:10:49,520 --> 02:10:51,119
because the system level and even

1842
02:10:51,119 --> 02:10:52,320
because of the low level temperature

1843
02:10:52,320 --> 02:10:54,639
that's available is very very high and

1844
02:10:54,639 --> 02:10:56,719
because you don't have control over the

1845
02:10:56,719 --> 02:10:58,960
canon extension itself filtering is

1846
02:10:58,960 --> 02:11:01,840
absolutely essential and it becomes

1847
02:11:01,840 --> 02:11:03,920
not optional and it's one of those

1848
02:11:03,920 --> 02:11:05,280
things that we're just going to have to

1849
02:11:05,280 --> 02:11:06,639
deal with moving forward in when

1850
02:11:06,639 --> 02:11:10,599
developing using the system

1851
02:11:11,280 --> 02:11:13,119
that's my email uh that is the github

1852
02:11:13,119 --> 02:11:14,960
with the esfang source code if anyone

1853
02:11:14,960 --> 02:11:17,920
has any questions please feel free to

1854
02:11:17,920 --> 02:11:20,960
email me afterwards um we do have some

1855
02:11:20,960 --> 02:11:23,119
time for q a so if anyone has any

1856
02:11:23,119 --> 02:11:25,839
questions please

1857
02:11:31,760 --> 02:11:34,000
so if anybody has questions please come

1858
02:11:34,000 --> 02:11:38,199
in frontier to the first mic

1859
02:11:40,639 --> 02:11:45,239
just come to the mic yeah yeah thanks

1860
02:11:52,800 --> 02:11:54,000
okay uh

1861
02:11:54,000 --> 02:11:57,040
so uh thank you for the talk uh i was

1862
02:11:57,040 --> 02:11:59,760
wondering from a perspective from a blue

1863
02:11:59,760 --> 02:12:03,199
team uh what kind of events i'm kind of

1864
02:12:03,199 --> 02:12:06,079
i'm um i can find when i look at the

1865
02:12:06,079 --> 02:12:08,560
telemetry because uh i'm more familiar

1866
02:12:08,560 --> 02:12:10,480
with the windows events and sometimes we

1867
02:12:10,480 --> 02:12:12,480
can find like credentials passwords

1868
02:12:12,480 --> 02:12:14,079
what's not good so we have to remove

1869
02:12:14,079 --> 02:12:15,840
them do you know if there is something

1870
02:12:15,840 --> 02:12:19,440
in place that remove this pi data or do

1871
02:12:19,440 --> 02:12:22,159
i have to do it with myself so yeah

1872
02:12:22,159 --> 02:12:23,360
that's a great question so you'd have to

1873
02:12:23,360 --> 02:12:25,360
do this all manually the events that are

1874
02:12:25,360 --> 02:12:26,639
generated by the current extension

1875
02:12:26,639 --> 02:12:28,639
themselves are raw so when you get them

1876
02:12:28,639 --> 02:12:30,719
from the esf client side they can't be

1877
02:12:30,719 --> 02:12:32,159
tampered with from the current extension

1878
02:12:32,159 --> 02:12:33,440
side so it would will have to be

1879
02:12:33,440 --> 02:12:35,840
filtered on the client side itself

1880
02:12:35,840 --> 02:12:37,280
and there's no way of doing this further

1881
02:12:37,280 --> 02:12:38,320
up the chain

1882
02:12:38,320 --> 02:12:41,280
okay so if i decide to ingest this in

1883
02:12:41,280 --> 02:12:43,679
some like uh splunk so i have to take

1884
02:12:43,679 --> 02:12:45,360
care of this yes

1885
02:12:45,360 --> 02:12:46,320
okay

1886
02:12:46,320 --> 02:12:50,239
okay cool thank you very much no problem

1887
02:12:50,880 --> 02:12:53,119
yep

1888
02:12:54,960 --> 02:12:56,400
you mentioned that there's the user

1889
02:12:56,400 --> 02:13:00,239
space component that is registering for

1890
02:13:00,239 --> 02:13:03,599
for the filters or for events sorry yeah

1891
02:13:03,599 --> 02:13:05,840
uh two questions basically is there also

1892
02:13:05,840 --> 02:13:08,239
a unregister element that i can for

1893
02:13:08,239 --> 02:13:10,159
example call if i'm doing a red teaming

1894
02:13:10,159 --> 02:13:12,960
assessment and i got i gain access to

1895
02:13:12,960 --> 02:13:14,639
this user space component can i then

1896
02:13:14,639 --> 02:13:16,639
call an unregistered event that i

1897
02:13:16,639 --> 02:13:19,360
basically disable monitoring for that uh

1898
02:13:19,360 --> 02:13:21,360
so because the event monitoring has to

1899
02:13:21,360 --> 02:13:22,560
be done together and it's done by an

1900
02:13:22,560 --> 02:13:24,560
individual endpoint security client

1901
02:13:24,560 --> 02:13:26,400
object inside the process there isn't a

1902
02:13:26,400 --> 02:13:28,480
way to unregister them from an internal

1903
02:13:28,480 --> 02:13:30,400
process unless you hijack it yourself

1904
02:13:30,400 --> 02:13:32,000
and then basically destroy the object

1905
02:13:32,000 --> 02:13:33,840
and recreate it you can't do it from

1906
02:13:33,840 --> 02:13:36,320
external because it's an internal uh

1907
02:13:36,320 --> 02:13:38,480
code object all right then the other

1908
02:13:38,480 --> 02:13:41,360
question is also solved

1909
02:13:42,560 --> 02:13:45,840
are there any other questions

1910
02:13:48,880 --> 02:13:51,040
yep we have time for another question

1911
02:13:51,040 --> 02:13:53,280
nope

1912
02:13:55,440 --> 02:13:57,360
okay

1913
02:13:57,360 --> 02:14:01,480
thank you very much thanks for listening

1914
02:15:44,000 --> 02:15:47,000
ready

1915
02:15:50,800 --> 02:15:52,400
okay everybody take your seats please

1916
02:15:52,400 --> 02:15:54,079
we'll continue

1917
02:15:54,079 --> 02:15:57,559
in a few seconds

1918
02:16:12,960 --> 02:16:15,440
okay awesome so let's continue with the

1919
02:16:15,440 --> 02:16:17,599
next talk i'm happy to introduce to you

1920
02:16:17,599 --> 02:16:20,079
daniel feister who will tell us how to

1921
02:16:20,079 --> 02:16:22,880
mess with edr systems

1922
02:16:22,880 --> 02:16:25,280
okay

1923
02:16:25,400 --> 02:16:30,320
[Applause]

1924
02:16:30,320 --> 02:16:32,799
so good morning besides first of all

1925
02:16:32,799 --> 02:16:34,638
thank you to the team from besides

1926
02:16:34,638 --> 02:16:36,398
munich for the organization

1927
02:16:36,398 --> 02:16:38,318
and for giving me the chance to speak

1928
02:16:38,318 --> 02:16:40,000
here today

1929
02:16:40,000 --> 02:16:42,398
welcome to master of puppets how to

1930
02:16:42,398 --> 02:16:44,478
temper the edr

1931
02:16:44,478 --> 02:16:46,558
my name is daniel i'm the founder of the

1932
02:16:46,558 --> 02:16:49,280
company infosectihole with which i

1933
02:16:49,280 --> 02:16:51,200
mainly focus on offensive security

1934
02:16:51,200 --> 02:16:53,120
service on windows

1935
02:16:53,120 --> 02:16:55,280
and i also spend a lot of my time

1936
02:16:55,280 --> 02:16:58,398
in researching learning and in the area

1937
02:16:58,398 --> 02:17:01,040
of antivirus products cdr products and

1938
02:17:01,040 --> 02:17:04,000
the windows internals

1939
02:17:04,080 --> 02:17:06,080
today we take a look at the mitre

1940
02:17:06,080 --> 02:17:08,558
subtechnic imper defenses

1941
02:17:08,558 --> 02:17:11,040
motor disable or modifying tools

1942
02:17:11,040 --> 02:17:13,679
and we focus on how can we disable the

1943
02:17:13,679 --> 02:17:16,080
main functionalities from an edr

1944
02:17:16,080 --> 02:17:18,478
by targeted control tempering of

1945
02:17:18,478 --> 02:17:21,040
specific key components from them

1946
02:17:21,040 --> 02:17:22,879
but we want to achieve this without

1947
02:17:22,879 --> 02:17:24,638
relying on an uninstall password or

1948
02:17:24,638 --> 02:17:27,200
token uninstall software uninstalling

1949
02:17:27,200 --> 02:17:28,959
the product generally

1950
02:17:28,959 --> 02:17:32,000
or by using the windows security center

1951
02:17:32,000 --> 02:17:34,398
i would like to point out when i speak

1952
02:17:34,398 --> 02:17:37,359
about edr systems in that presentation i

1953
02:17:37,359 --> 02:17:39,200
always refer to products which are also

1954
02:17:39,200 --> 02:17:41,200
in cloud including an antivirus module

1955
02:17:41,200 --> 02:17:44,638
so an epp edr combination

1956
02:17:44,638 --> 02:17:46,799
also i would like to point out it's also

1957
02:17:46,799 --> 02:17:48,718
only my personal research my personal

1958
02:17:48,718 --> 02:17:49,840
experience

1959
02:17:49,840 --> 02:17:52,000
and the shown strategy or concept

1960
02:17:52,000 --> 02:17:57,120
applies to multiple products on windows

1961
02:17:57,120 --> 02:18:00,240
in the first step we try to get a better

1962
02:18:00,240 --> 02:18:01,599
understanding from the different

1963
02:18:01,599 --> 02:18:04,478
components from edrs in user space and

1964
02:18:04,478 --> 02:18:06,558
in kernel space we learned a little bit

1965
02:18:06,558 --> 02:18:08,558
about their functionality

1966
02:18:08,558 --> 02:18:10,398
and important house the relationship

1967
02:18:10,398 --> 02:18:12,318
between the different components in user

1968
02:18:12,318 --> 02:18:14,718
space and kernel space

1969
02:18:14,718 --> 02:18:16,638
in the second step we want to use the

1970
02:18:16,638 --> 02:18:19,280
gain knowledge to find a way or to find

1971
02:18:19,280 --> 02:18:21,359
more or less the key element

1972
02:18:21,359 --> 02:18:23,200
depending on the product

1973
02:18:23,200 --> 02:18:25,439
to permanently disable the main

1974
02:18:25,439 --> 02:18:27,519
functionality from an edr

1975
02:18:27,519 --> 02:18:29,920
and permanently get rid of

1976
02:18:29,920 --> 02:18:32,398
prevention by the antivirus module and

1977
02:18:32,398 --> 02:18:34,879
permanently get rid of detections and

1978
02:18:34,879 --> 02:18:37,439
telemetry footprint host isolation read

1979
02:18:37,439 --> 02:18:40,558
time response and edr sensor recovery

1980
02:18:40,558 --> 02:18:44,000
feature by the edr module

1981
02:18:44,000 --> 02:18:46,000
so we have big plans

1982
02:18:46,000 --> 02:18:47,920
at the end of the presentation we should

1983
02:18:47,920 --> 02:18:49,840
more or less able to depending on the

1984
02:18:49,840 --> 02:18:54,960
product to disable the edr

1985
02:18:55,599 --> 02:18:57,599
so this presentation is not about zero

1986
02:18:57,599 --> 02:18:58,478
days

1987
02:18:58,478 --> 02:19:00,398
it's more about learning a little bit

1988
02:19:00,398 --> 02:19:02,160
about the windows internals and how do

1989
02:19:02,160 --> 02:19:04,638
edr products work on windows so there

1990
02:19:04,638 --> 02:19:07,120
can be some situations where it also be

1991
02:19:07,120 --> 02:19:10,240
possible to do some activities in

1992
02:19:10,240 --> 02:19:12,718
unprivileged user way but normally you

1993
02:19:12,718 --> 02:19:14,478
need a privileged user

1994
02:19:14,478 --> 02:19:17,040
in high integrity or system integrity

1995
02:19:17,040 --> 02:19:18,398
level

1996
02:19:18,398 --> 02:19:21,760
but despite um everybody which has fight

1997
02:19:21,760 --> 02:19:23,840
around with eds knows that despite you

1998
02:19:23,840 --> 02:19:25,920
have a privileged user

1999
02:19:25,920 --> 02:19:28,000
most well-known edr products can still

2000
02:19:28,000 --> 02:19:29,599
be very annoying

2001
02:19:29,599 --> 02:19:31,679
and be a problem

2002
02:19:31,679 --> 02:19:34,160
normally it is not possible to simply

2003
02:19:34,160 --> 02:19:35,760
uninstall the product

2004
02:19:35,760 --> 02:19:37,679
because if the blue team has done his

2005
02:19:37,679 --> 02:19:39,200
homework correctly

2006
02:19:39,200 --> 02:19:41,760
um you have to know the uninstall

2007
02:19:41,760 --> 02:19:44,398
password to uninstall the product and as

2008
02:19:44,398 --> 02:19:46,558
mentioned in the intro we

2009
02:19:46,558 --> 02:19:49,200
want to achieve this without relying on

2010
02:19:49,200 --> 02:19:52,240
an uninstalled password

2011
02:19:52,960 --> 02:19:54,800
so imagine the following scenario you

2012
02:19:54,800 --> 02:19:56,880
have landed a successful fish and you

2013
02:19:56,880 --> 02:19:59,040
were also able to escalate your local

2014
02:19:59,040 --> 02:20:00,399
privileges

2015
02:20:00,399 --> 02:20:02,800
my case i was able to use the print

2016
02:20:02,800 --> 02:20:06,000
exploit to escalate to system integrity

2017
02:20:06,000 --> 02:20:07,200
context

2018
02:20:07,200 --> 02:20:09,520
and by having a look at the process

2019
02:20:09,520 --> 02:20:11,840
structure of the compromised machine

2020
02:20:11,840 --> 02:20:13,359
i saw that there is another interesting

2021
02:20:13,359 --> 02:20:14,960
user session open

2022
02:20:14,960 --> 02:20:17,680
so believe it or not in my case it was

2023
02:20:17,680 --> 02:20:19,760
one from the domain admins

2024
02:20:19,760 --> 02:20:22,000
and i knew okay

2025
02:20:22,000 --> 02:20:24,399
could be maybe could be easy to get

2026
02:20:24,399 --> 02:20:27,280
credentials by dumping elsa's process or

2027
02:20:27,280 --> 02:20:30,479
to impersonate as domain admin by token

2028
02:20:30,479 --> 02:20:31,920
stealing

2029
02:20:31,920 --> 02:20:34,240
but the problem was that i

2030
02:20:34,240 --> 02:20:36,640
created a many alerts in the admin

2031
02:20:36,640 --> 02:20:38,720
console from the product the blue team

2032
02:20:38,720 --> 02:20:41,439
was informed and i get isolated from the

2033
02:20:41,439 --> 02:20:42,800
machine

2034
02:20:42,800 --> 02:20:45,040
and that was the starting point more or

2035
02:20:45,040 --> 02:20:47,120
less from my journey

2036
02:20:47,120 --> 02:20:48,479
digging deeper into the windows

2037
02:20:48,479 --> 02:20:50,880
internals and edr products and find a

2038
02:20:50,880 --> 02:20:53,439
way to disable the main functionality

2039
02:20:53,439 --> 02:20:55,920
from them

2040
02:20:56,000 --> 02:20:57,520
so we start with the user's base

2041
02:20:57,520 --> 02:21:00,399
component of a media and have a look at

2042
02:21:00,399 --> 02:21:03,359
edr processors

2043
02:21:03,359 --> 02:21:05,680
normally edr or the processors from vdr

2044
02:21:05,680 --> 02:21:07,760
products are executed as process

2045
02:21:07,760 --> 02:21:09,680
protected light processes

2046
02:21:09,680 --> 02:21:11,760
this means that even if you have

2047
02:21:11,760 --> 02:21:14,319
achieved system integrity context it

2048
02:21:14,319 --> 02:21:15,840
shouldn't be possible to simply

2049
02:21:15,840 --> 02:21:18,880
terminate the process

2050
02:21:19,600 --> 02:21:22,080
but in the meantime there are a few ways

2051
02:21:22,080 --> 02:21:24,960
how we can deal with our ppl processors

2052
02:21:24,960 --> 02:21:26,560
from red team site

2053
02:21:26,560 --> 02:21:27,920
so

2054
02:21:27,920 --> 02:21:31,120
one possibility can be to use the more

2055
02:21:31,120 --> 02:21:33,920
or less the concept of a driver with the

2056
02:21:33,920 --> 02:21:36,720
with a null access vulnerability like

2057
02:21:36,720 --> 02:21:42,160
the msc afterburner rtcor 64 driver

2058
02:21:42,160 --> 02:21:44,399
so when we have a look at the picture

2059
02:21:44,399 --> 02:21:46,880
the first step we try to escalate

2060
02:21:46,880 --> 02:21:49,120
our unprivileged user to a local

2061
02:21:49,120 --> 02:21:52,399
privileged user in high integrity or

2062
02:21:52,399 --> 02:21:55,040
system integrity context and by this we

2063
02:21:55,040 --> 02:21:56,720
should have the privilege to load a

2064
02:21:56,720 --> 02:21:58,880
driver on windows

2065
02:21:58,880 --> 02:22:00,000
and

2066
02:22:00,000 --> 02:22:03,600
the by loading the rt core 64 driver

2067
02:22:03,600 --> 02:22:06,000
we get also right access to kernel space

2068
02:22:06,000 --> 02:22:08,080
because of the null duct access

2069
02:22:08,080 --> 02:22:09,760
vulnerability

2070
02:22:09,760 --> 02:22:12,560
and um compared to user space in kernel

2071
02:22:12,560 --> 02:22:14,479
space and windows there is no isolation

2072
02:22:14,479 --> 02:22:16,560
between the different code sections

2073
02:22:16,560 --> 02:22:18,880
this means that theoretically we would

2074
02:22:18,880 --> 02:22:19,920
have

2075
02:22:19,920 --> 02:22:21,840
whole access to the whole access from

2076
02:22:21,840 --> 02:22:23,280
kernel space

2077
02:22:23,280 --> 02:22:25,680
in this case we will use the one level

2078
02:22:25,680 --> 02:22:28,000
driver to attach to the e-process

2079
02:22:28,000 --> 02:22:31,359
structure from the ppl edr process

2080
02:22:31,359 --> 02:22:34,319
and we temporarily patch the ppl flag

2081
02:22:34,319 --> 02:22:36,479
and can then use

2082
02:22:36,479 --> 02:22:40,000
uh different kind of tools to terminate

2083
02:22:40,000 --> 02:22:42,319
the not longer protected process

2084
02:22:42,319 --> 02:22:45,359
so for example ppl killer uses the rtcor

2085
02:22:45,359 --> 02:22:47,600
64 driver in his code

2086
02:22:47,600 --> 02:22:49,200
or maybe cuts

2087
02:22:49,200 --> 02:22:52,560
brings his own device driver

2088
02:22:53,920 --> 02:22:55,760
also an interesting way depending on the

2089
02:22:55,760 --> 02:22:57,760
product it can work if you are able to

2090
02:22:57,760 --> 02:22:59,600
execute process hacker in a privileged

2091
02:22:59,600 --> 02:23:00,800
way

2092
02:23:00,800 --> 02:23:02,880
depending on the product it is possible

2093
02:23:02,880 --> 02:23:04,960
to directly terminate

2094
02:23:04,960 --> 02:23:07,520
the ppl process in the system session

2095
02:23:07,520 --> 02:23:09,760
without removing the ppl flag in the

2096
02:23:09,760 --> 02:23:12,240
first step

2097
02:23:13,680 --> 02:23:15,520
the conclusion of process tampering is

2098
02:23:15,520 --> 02:23:16,880
that

2099
02:23:16,880 --> 02:23:18,560
there are ways to temper the process to

2100
02:23:18,560 --> 02:23:20,720
terminate the processes but from my

2101
02:23:20,720 --> 02:23:23,280
observation this termination was always

2102
02:23:23,280 --> 02:23:25,520
just temporary so

2103
02:23:25,520 --> 02:23:27,359
if you terminate the process a few

2104
02:23:27,359 --> 02:23:30,160
seconds later or at least a minute later

2105
02:23:30,160 --> 02:23:32,479
the process gets restarted

2106
02:23:32,479 --> 02:23:36,720
and ddr is is back there

2107
02:23:37,359 --> 02:23:39,040
because of this in the next step we take

2108
02:23:39,040 --> 02:23:40,800
a look at the user space component and a

2109
02:23:40,800 --> 02:23:42,479
closer look at edr

2110
02:23:42,479 --> 02:23:44,880
services

2111
02:23:44,880 --> 02:23:47,840
so we have to identify the service

2112
02:23:47,840 --> 02:23:50,080
which is connected to the protected

2113
02:23:50,080 --> 02:23:51,359
process

2114
02:23:51,359 --> 02:23:53,520
and the protected service and the

2115
02:23:53,520 --> 02:23:55,439
protected process more or less builds

2116
02:23:55,439 --> 02:23:58,080
together the user's base component but

2117
02:23:58,080 --> 02:24:00,720
similar to protected processes even if

2118
02:24:00,720 --> 02:24:02,399
you have achieved system integrity on

2119
02:24:02,399 --> 02:24:05,120
windows it's not simple possible to

2120
02:24:05,120 --> 02:24:07,359
pause stop or disable a protected

2121
02:24:07,359 --> 02:24:09,200
service

2122
02:24:09,200 --> 02:24:10,479
but important

2123
02:24:10,479 --> 02:24:12,960
in also important in our situation when

2124
02:24:12,960 --> 02:24:16,000
we have a look at the recovery tab from

2125
02:24:16,000 --> 02:24:18,319
the protected service we can see that

2126
02:24:18,319 --> 02:24:19,920
the service is the component which is

2127
02:24:19,920 --> 02:24:22,479
responsible for restarting the process

2128
02:24:22,479 --> 02:24:27,319
the ppl process after terminating

2129
02:24:28,640 --> 02:24:30,800
conclusion on services

2130
02:24:30,800 --> 02:24:32,960
um we learned a little bit about the

2131
02:24:32,960 --> 02:24:34,240
relationship between protective

2132
02:24:34,240 --> 02:24:36,800
processes and protected services

2133
02:24:36,800 --> 02:24:39,600
uh similar to processes is it is not

2134
02:24:39,600 --> 02:24:41,040
possible also not possible to

2135
02:24:41,040 --> 02:24:42,479
temporarily

2136
02:24:42,479 --> 02:24:45,200
disable the service

2137
02:24:45,200 --> 02:24:47,120
but

2138
02:24:47,120 --> 02:24:49,520
maybe we can use a find a way to still

2139
02:24:49,520 --> 02:24:50,720
disable

2140
02:24:50,720 --> 02:24:53,279
the service

2141
02:24:53,600 --> 02:24:55,520
because of this in the next step we take

2142
02:24:55,520 --> 02:24:57,760
a look at the user base component and

2143
02:24:57,760 --> 02:24:58,720
edr

2144
02:24:58,720 --> 02:25:01,439
registry keys

2145
02:25:01,439 --> 02:25:04,160
so you have to identify the edrec key

2146
02:25:04,160 --> 02:25:06,319
from the user's base component normally

2147
02:25:06,319 --> 02:25:08,319
you can find them under control set

2148
02:25:08,319 --> 02:25:10,479
current control set services

2149
02:25:10,479 --> 02:25:12,960
and there are two interesting entries

2150
02:25:12,960 --> 02:25:16,240
so um launch protected and start entry

2151
02:25:16,240 --> 02:25:19,120
because time is a little bit short

2152
02:25:19,120 --> 02:25:21,760
we will focus on the start entry

2153
02:25:21,760 --> 02:25:25,200
and by the start entry we can have

2154
02:25:25,200 --> 02:25:27,920
influence on the initialization behavior

2155
02:25:27,920 --> 02:25:30,080
from the protected service

2156
02:25:30,080 --> 02:25:32,560
this means if we would be able to change

2157
02:25:32,560 --> 02:25:34,640
the end the value for the entry for the

2158
02:25:34,640 --> 02:25:37,040
start entry from the value 2 which is

2159
02:25:37,040 --> 02:25:40,000
equal to autoload to the value 4 which

2160
02:25:40,000 --> 02:25:42,240
is equal to disabled it should be

2161
02:25:42,240 --> 02:25:45,359
possible to disable the protected

2162
02:25:45,359 --> 02:25:47,520
service and furthermore the user space

2163
02:25:47,520 --> 02:25:49,439
component from the edr

2164
02:25:49,439 --> 02:25:52,000
but the problem similar to processes and

2165
02:25:52,000 --> 02:25:54,479
services from the edr even in system

2166
02:25:54,479 --> 02:25:57,280
integrity it is not possible with most

2167
02:25:57,280 --> 02:25:58,720
products

2168
02:25:58,720 --> 02:25:59,600
and

2169
02:25:59,600 --> 02:26:01,359
depending on the product when you try to

2170
02:26:01,359 --> 02:26:03,280
tamper the red key you will create an

2171
02:26:03,280 --> 02:26:05,040
alert in the web console that's what

2172
02:26:05,040 --> 02:26:08,080
this was the problem in my journey and

2173
02:26:08,080 --> 02:26:10,479
the reason why i was isolated from the

2174
02:26:10,479 --> 02:26:13,760
compromised machine

2175
02:26:15,040 --> 02:26:17,040
so the interim status at the moment we

2176
02:26:17,040 --> 02:26:19,439
are not are really able to permanently

2177
02:26:19,439 --> 02:26:21,600
disable the edr or the user space

2178
02:26:21,600 --> 02:26:23,760
component but we learned a little bit

2179
02:26:23,760 --> 02:26:24,880
about the

2180
02:26:24,880 --> 02:26:26,479
relationship between the different

2181
02:26:26,479 --> 02:26:28,319
components and user space

2182
02:26:28,319 --> 02:26:31,520
and we see that direct key could be more

2183
02:26:31,520 --> 02:26:33,439
or less the key element

2184
02:26:33,439 --> 02:26:35,280
by changing the value for the start

2185
02:26:35,280 --> 02:26:38,880
entry to permanently disable the user

2186
02:26:38,880 --> 02:26:41,439
space component but at the moment it is

2187
02:26:41,439 --> 02:26:44,240
not possible because the rec key or

2188
02:26:44,240 --> 02:26:45,920
their keys are protected by a temper

2189
02:26:45,920 --> 02:26:50,800
protection a mechanism by the edr

2190
02:26:51,439 --> 02:26:53,760
because of this in the fourth step we

2191
02:26:53,760 --> 02:26:56,399
make our first step into kernel land and

2192
02:26:56,399 --> 02:27:00,640
have a look at kernel callback routines

2193
02:27:00,640 --> 02:27:03,280
so since the introduction of kernel

2194
02:27:03,280 --> 02:27:06,240
patch protection hk patchguard it is no

2195
02:27:06,240 --> 02:27:09,520
longer possible uh officially possible

2196
02:27:09,520 --> 02:27:10,240
for

2197
02:27:10,240 --> 02:27:12,960
er vendors to set their hooks in kernel

2198
02:27:12,960 --> 02:27:14,000
space

2199
02:27:14,000 --> 02:27:16,560
so they are forced in users base to use

2200
02:27:16,560 --> 02:27:19,040
users based api hooking

2201
02:27:19,040 --> 02:27:21,680
but despite patch guard they can use in

2202
02:27:21,680 --> 02:27:23,760
kernel space a mechanism which is called

2203
02:27:23,760 --> 02:27:25,439
callback routines

2204
02:27:25,439 --> 02:27:28,720
and register different kind of callbacks

2205
02:27:28,720 --> 02:27:31,439
to realize different kind of tasks in

2206
02:27:31,439 --> 02:27:32,720
user space

2207
02:27:32,720 --> 02:27:35,120
so for example they can use the process

2208
02:27:35,120 --> 02:27:38,640
notify routine to register and realize

2209
02:27:38,640 --> 02:27:41,200
telemetry collection in context of

2210
02:27:41,200 --> 02:27:43,040
process creations

2211
02:27:43,040 --> 02:27:44,720
also they can use the process notify

2212
02:27:44,720 --> 02:27:47,600
routine to realize user space dln

2213
02:27:47,600 --> 02:27:50,319
injection and furthermore realize user's

2214
02:27:50,319 --> 02:27:53,920
base api hooking

2215
02:27:54,160 --> 02:27:56,640
but more important in our situation now

2216
02:27:56,640 --> 02:27:58,240
kernel callbacks routines by adr

2217
02:27:58,240 --> 02:28:00,880
products can also be used to protect

2218
02:28:00,880 --> 02:28:02,880
their own registry keys so this is more

2219
02:28:02,880 --> 02:28:05,200
or less could be the the key element for

2220
02:28:05,200 --> 02:28:06,880
the register for the tempo protection

2221
02:28:06,880 --> 02:28:09,600
for wreck for the registry keys

2222
02:28:09,600 --> 02:28:12,000
um in this case the product is using the

2223
02:28:12,000 --> 02:28:15,840
cm register callback function

2224
02:28:15,840 --> 02:28:17,920
but we will see in our first

2225
02:28:17,920 --> 02:28:20,640
pre-recorded demo because i have to

2226
02:28:20,640 --> 02:28:23,600
blur every sensitive information we will

2227
02:28:23,600 --> 02:28:24,560
see that

2228
02:28:24,560 --> 02:28:26,720
not just the cm register callback can be

2229
02:28:26,720 --> 02:28:30,160
used they also use all the callbacks to

2230
02:28:30,160 --> 02:28:32,160
uh protect the red keys

2231
02:28:32,160 --> 02:28:34,160
and in the first demo we try to patch

2232
02:28:34,160 --> 02:28:36,479
the process notify callback temporary

2233
02:28:36,479 --> 02:28:39,120
key disable the user space component and

2234
02:28:39,120 --> 02:28:42,640
have a look at the impact

2235
02:28:49,520 --> 02:28:51,520
so for first plausible check because at

2236
02:28:51,520 --> 02:28:53,280
least we want to

2237
02:28:53,280 --> 02:28:54,880
dump

2238
02:28:54,880 --> 02:28:57,880
okay

2239
02:29:20,560 --> 02:29:23,840
okay that looks better

2240
02:29:26,640 --> 02:29:29,120
uh for first possible check to see that

2241
02:29:29,120 --> 02:29:31,040
the enterprise component and ddr is

2242
02:29:31,040 --> 02:29:32,319
completely configured and at least we

2243
02:29:32,319 --> 02:29:33,760
want to get credentials from the elses

2244
02:29:33,760 --> 02:29:35,840
process we execute the pre-compiled

2245
02:29:35,840 --> 02:29:37,280
version from mini cuts which you can

2246
02:29:37,280 --> 02:29:38,560
find on github

2247
02:29:38,560 --> 02:29:40,800
so we execute it and we should see that

2248
02:29:40,800 --> 02:29:42,960
you get prevented by the anti-wireless

2249
02:29:42,960 --> 02:29:46,160
module and the file gets deleted

2250
02:29:46,160 --> 02:29:47,920
in the next step we make a short

2251
02:29:47,920 --> 02:29:50,960
possible check in context of

2252
02:29:50,960 --> 02:29:53,600
the temporal protection so

2253
02:29:53,600 --> 02:29:56,000
at the beginning we try to

2254
02:29:56,000 --> 02:29:58,240
terminate the protected process

2255
02:29:58,240 --> 02:30:00,399
by executing process explorer and system

2256
02:30:00,399 --> 02:30:02,720
integrity context but we are not allowed

2257
02:30:02,720 --> 02:30:04,479
to do this

2258
02:30:04,479 --> 02:30:08,080
also in case of the protected service

2259
02:30:08,080 --> 02:30:10,080
even in system integrity we get an

2260
02:30:10,080 --> 02:30:12,800
access denied

2261
02:30:12,800 --> 02:30:15,680
and if we try to tamper the value for

2262
02:30:15,680 --> 02:30:17,840
the start entry to disable the user's

2263
02:30:17,840 --> 02:30:20,560
base component to the value of four

2264
02:30:20,560 --> 02:30:22,640
we also get an access tonight and

2265
02:30:22,640 --> 02:30:24,319
depending on the product now we will

2266
02:30:24,319 --> 02:30:26,479
have created an alert and you get with a

2267
02:30:26,479 --> 02:30:29,200
high probability isolated from the

2268
02:30:29,200 --> 02:30:32,000
machine by the blue team

2269
02:30:32,000 --> 02:30:34,800
because of this we use a very nice

2270
02:30:34,800 --> 02:30:36,560
pc which you can find on github it is

2271
02:30:36,560 --> 02:30:38,800
called cheeky blinder it's not from my

2272
02:30:38,800 --> 02:30:40,960
side

2273
02:30:40,960 --> 02:30:44,240
i called it in this case pari.dxe

2274
02:30:44,240 --> 02:30:45,280
and

2275
02:30:45,280 --> 02:30:47,680
in the first

2276
02:30:47,680 --> 02:30:51,600
step we will use that poc to load the

2277
02:30:51,600 --> 02:30:53,520
driver with the availability the rtcor

2278
02:30:53,520 --> 02:30:57,120
64 driver to get access to kernel space

2279
02:30:57,120 --> 02:30:58,840
so we load the driver the driver is

2280
02:30:58,840 --> 02:31:02,319
initialized and in the next step we list

2281
02:31:02,319 --> 02:31:04,319
all the registered process notify

2282
02:31:04,319 --> 02:31:05,920
routines

2283
02:31:05,920 --> 02:31:08,160
on the machine

2284
02:31:08,160 --> 02:31:10,720
and the blurred one on the lower side is

2285
02:31:10,720 --> 02:31:14,399
our routine from the adr product in the

2286
02:31:14,399 --> 02:31:17,120
next step we will use the poc to

2287
02:31:17,120 --> 02:31:20,720
temporarily patch the callback

2288
02:31:25,600 --> 02:31:27,840
and after reopening the registry it

2289
02:31:27,840 --> 02:31:29,840
should now be possible to change the

2290
02:31:29,840 --> 02:31:32,319
value for the start entry and to disable

2291
02:31:32,319 --> 02:31:34,560
the user space component because temple

2292
02:31:34,560 --> 02:31:38,080
protection is now no longer

2293
02:31:38,080 --> 02:31:39,200
active

2294
02:31:39,200 --> 02:31:41,120
so we change the value to 4 which is

2295
02:31:41,120 --> 02:31:43,680
equal to disabled and we have to reboot

2296
02:31:43,680 --> 02:31:46,160
the machine

2297
02:31:51,359 --> 02:31:53,280
after the reboot we see at the lower

2298
02:31:53,280 --> 02:31:55,760
right side that now the edr product is

2299
02:31:55,760 --> 02:31:57,280
no longer registered in the windows

2300
02:31:57,280 --> 02:31:59,680
security center and also by having a

2301
02:31:59,680 --> 02:32:01,280
look at the structure from process

2302
02:32:01,280 --> 02:32:03,680
explorer we now see no longer blurred

2303
02:32:03,680 --> 02:32:06,479
sections because and there are no longer

2304
02:32:06,479 --> 02:32:09,760
processes by the user-based component

2305
02:32:09,760 --> 02:32:11,760
also if we check the status from the

2306
02:32:11,760 --> 02:32:13,920
user's base component we will see that

2307
02:32:13,920 --> 02:32:16,160
the star the service is now

2308
02:32:16,160 --> 02:32:18,560
stopped

2309
02:32:18,560 --> 02:32:20,560
so it looks very nice maybe we have

2310
02:32:20,560 --> 02:32:23,280
until now reached all of our goals

2311
02:32:23,280 --> 02:32:26,160
but this is not the case

2312
02:32:26,160 --> 02:32:28,000
because after the reboot we have a few

2313
02:32:28,000 --> 02:32:30,240
problems

2314
02:32:30,240 --> 02:32:31,840
we again

2315
02:32:31,840 --> 02:32:33,680
list the registered callbacks on the

2316
02:32:33,680 --> 02:32:34,960
machine

2317
02:32:34,960 --> 02:32:37,280
and we will see that all the previously

2318
02:32:37,280 --> 02:32:39,600
patched callbacks are re-registered

2319
02:32:39,600 --> 02:32:42,000
again

2320
02:32:42,000 --> 02:32:44,160
this means in case of prevention and

2321
02:32:44,160 --> 02:32:46,000
detection based on kernel callback

2322
02:32:46,000 --> 02:32:48,319
routines and furthermore windows uses

2323
02:32:48,319 --> 02:32:50,720
user-based api hooking we can have the

2324
02:32:50,720 --> 02:32:53,120
problem of prevention detection and

2325
02:32:53,120 --> 02:32:56,800
especially telemetry footprinting

2326
02:32:56,800 --> 02:32:58,479
so again when we execute mimi cuts we

2327
02:32:58,479 --> 02:33:01,760
get again prevented

2328
02:33:03,520 --> 02:33:05,920
and despite the user space component is

2329
02:33:05,920 --> 02:33:07,840
disabled

2330
02:33:07,840 --> 02:33:10,000
we still have the problem that the blue

2331
02:33:10,000 --> 02:33:12,000
team can use the isolate function to

2332
02:33:12,000 --> 02:33:14,880
isolate our compromi compromised machine

2333
02:33:14,880 --> 02:33:16,960
so in a few seconds we will see that we

2334
02:33:16,960 --> 02:33:18,640
lose connection to

2335
02:33:18,640 --> 02:33:21,840
our compromised target

2336
02:33:41,280 --> 02:33:42,800
so what's the conclusion from the first

2337
02:33:42,800 --> 02:33:44,880
demo we saw that we can more or less use

2338
02:33:44,880 --> 02:33:46,800
a concept of the willable device driver

2339
02:33:46,800 --> 02:33:49,760
to get access to kernel space

2340
02:33:49,760 --> 02:33:52,399
remove or patch the respective callback

2341
02:33:52,399 --> 02:33:53,920
temper direct key

2342
02:33:53,920 --> 02:33:55,520
change the value for the start entry to

2343
02:33:55,520 --> 02:33:58,800
4 and by restarting the machine we can

2344
02:33:58,800 --> 02:34:00,399
permanently disable the user space

2345
02:34:00,399 --> 02:34:01,439
component

2346
02:34:01,439 --> 02:34:04,560
but we also saw that only disabling the

2347
02:34:04,560 --> 02:34:06,479
user space component do not really have

2348
02:34:06,479 --> 02:34:08,399
a strong impact in reaching our

2349
02:34:08,399 --> 02:34:11,760
previously defined goals

2350
02:34:11,760 --> 02:34:12,560
and

2351
02:34:12,560 --> 02:34:14,319
no matter after

2352
02:34:14,319 --> 02:34:15,680
if you have rebooted the machine and you

2353
02:34:15,680 --> 02:34:17,040
would

2354
02:34:17,040 --> 02:34:19,359
again patch all the callbacks from the

2355
02:34:19,359 --> 02:34:22,080
edr you would still have the pos the

2356
02:34:22,080 --> 02:34:25,920
problem that um host isolation

2357
02:34:25,920 --> 02:34:27,600
the recovery feature

2358
02:34:27,600 --> 02:34:28,840
and

2359
02:34:28,840 --> 02:34:31,760
um the last one

2360
02:34:31,760 --> 02:34:32,479
yeah

2361
02:34:32,479 --> 02:34:33,840
the features which bluetooth can be used

2362
02:34:33,840 --> 02:34:35,439
in the web console is still active so

2363
02:34:35,439 --> 02:34:37,439
the biggest problem is that despite the

2364
02:34:37,439 --> 02:34:39,920
user's base component system is disabled

2365
02:34:39,920 --> 02:34:41,760
and you patch all the callbacks you

2366
02:34:41,760 --> 02:34:43,600
still have the problem with the host

2367
02:34:43,600 --> 02:34:44,720
isolation

2368
02:34:44,720 --> 02:34:47,200
even if you would not do a reboot and

2369
02:34:47,200 --> 02:34:49,600
you were um you just want to temporarily

2370
02:34:49,600 --> 02:34:51,760
patch the callback

2371
02:34:51,760 --> 02:34:52,800
um

2372
02:34:52,800 --> 02:34:56,080
you still have the problem that um also

2373
02:34:56,080 --> 02:34:59,040
your your host can still get isolated by

2374
02:34:59,040 --> 02:35:00,399
the blue team

2375
02:35:00,399 --> 02:35:02,240
so not really

2376
02:35:02,240 --> 02:35:03,760
efficient from

2377
02:35:03,760 --> 02:35:05,200
this point

2378
02:35:05,200 --> 02:35:09,600
and we have to take our last step

2379
02:35:09,600 --> 02:35:11,520
in the final step we take a look at the

2380
02:35:11,520 --> 02:35:14,000
edr mini filter driver

2381
02:35:14,000 --> 02:35:17,280
and the mini filter driver is the

2382
02:35:17,280 --> 02:35:20,240
component which is responsible for in

2383
02:35:20,240 --> 02:35:23,120
general registering callbacks

2384
02:35:23,120 --> 02:35:24,960
from the edr

2385
02:35:24,960 --> 02:35:27,280
and that is always also the problem why

2386
02:35:27,280 --> 02:35:28,960
even if the user space component is

2387
02:35:28,960 --> 02:35:30,640
disabled the mini filter driver is a

2388
02:35:30,640 --> 02:35:32,880
separate component is still active and

2389
02:35:32,880 --> 02:35:35,439
but is after the reboot the callbacks

2390
02:35:35,439 --> 02:35:38,640
get uh re-registered again

2391
02:35:38,640 --> 02:35:40,800
but the good thing is that the mini

2392
02:35:40,800 --> 02:35:43,120
filter has its own registry key

2393
02:35:43,120 --> 02:35:44,160
and

2394
02:35:44,160 --> 02:35:46,399
has a similar structure to the user

2395
02:35:46,399 --> 02:35:47,920
space component

2396
02:35:47,920 --> 02:35:49,359
this means

2397
02:35:49,359 --> 02:35:52,160
that depending on the product the

2398
02:35:52,160 --> 02:35:54,000
minifilter driver can be more or less

2399
02:35:54,000 --> 02:35:55,439
the key element

2400
02:35:55,439 --> 02:35:57,680
to

2401
02:35:57,680 --> 02:35:58,800
permanently disable the main

2402
02:35:58,800 --> 02:36:01,280
functionalities and get rid of

2403
02:36:01,280 --> 02:36:02,479
prevention

2404
02:36:02,479 --> 02:36:05,760
host isolation return response and edr

2405
02:36:05,760 --> 02:36:06,840
recovery

2406
02:36:06,840 --> 02:36:09,439
feature to check this out we will have a

2407
02:36:09,439 --> 02:36:11,680
look at our second demo

2408
02:36:11,680 --> 02:36:13,760
where we try to tamper the mini filter

2409
02:36:13,760 --> 02:36:15,120
driver

2410
02:36:15,120 --> 02:36:17,680
and permanently get rid of prevention

2411
02:36:17,680 --> 02:36:18,960
detection

2412
02:36:18,960 --> 02:36:20,640
telemetry collection

2413
02:36:20,640 --> 02:36:23,840
and so on

2414
02:36:29,600 --> 02:36:31,280
so we start at the point where we have

2415
02:36:31,280 --> 02:36:33,680
stop remember we get isolated from the

2416
02:36:33,680 --> 02:36:34,720
machine

2417
02:36:34,720 --> 02:36:36,640
so we will lift the containment and get

2418
02:36:36,640 --> 02:36:38,960
back connection to our compromised

2419
02:36:38,960 --> 02:36:41,359
target

2420
02:36:41,359 --> 02:36:42,960
and very important

2421
02:36:42,960 --> 02:36:44,960
now we uh

2422
02:36:44,960 --> 02:36:47,359
want to re-enable the user space

2423
02:36:47,359 --> 02:36:49,600
component in the first step

2424
02:36:49,600 --> 02:36:51,680
and only disable the minifilter driver

2425
02:36:51,680 --> 02:36:54,160
and to and because we want to check what

2426
02:36:54,160 --> 02:36:56,080
is the impact if we only disable the

2427
02:36:56,080 --> 02:36:58,720
mini filter

2428
02:36:59,200 --> 02:37:00,880
so we patched

2429
02:37:00,880 --> 02:37:02,640
list the callbacks again we see that the

2430
02:37:02,640 --> 02:37:05,040
process notify routine is still there we

2431
02:37:05,040 --> 02:37:08,399
query the user space component service

2432
02:37:08,399 --> 02:37:10,640
which is currently stopped

2433
02:37:10,640 --> 02:37:12,399
and we check the status from the mini

2434
02:37:12,399 --> 02:37:14,319
filter from ddr

2435
02:37:14,319 --> 02:37:15,920
and we see that the mini filter is still

2436
02:37:15,920 --> 02:37:18,560
running

2437
02:37:18,560 --> 02:37:20,399
so we open the registry

2438
02:37:20,399 --> 02:37:21,280
and

2439
02:37:21,280 --> 02:37:24,080
re-enable the user space component by

2440
02:37:24,080 --> 02:37:25,840
changing the value

2441
02:37:25,840 --> 02:37:28,160
from the start entry back from from fork

2442
02:37:28,160 --> 02:37:31,800
to the value 2.

2443
02:37:37,520 --> 02:37:39,520
but we're not allowed why

2444
02:37:39,520 --> 02:37:41,520
remember we have did we did a reboot so

2445
02:37:41,520 --> 02:37:43,359
we have to to patch the callback one

2446
02:37:43,359 --> 02:37:45,040
time again

2447
02:37:45,040 --> 02:37:48,399
and reopen the registry

2448
02:37:56,560 --> 02:37:58,640
so we patch it again

2449
02:37:58,640 --> 02:38:00,560
the process notify routine reopen the

2450
02:38:00,560 --> 02:38:02,240
registry

2451
02:38:02,240 --> 02:38:04,240
we now re-enable in the first step the

2452
02:38:04,240 --> 02:38:07,280
user's base component

2453
02:38:07,600 --> 02:38:10,720
set the value back to the value 2

2454
02:38:10,720 --> 02:38:14,000
and then we go to the mini filtered key

2455
02:38:14,000 --> 02:38:16,160
and change the value to 4 which is equal

2456
02:38:16,160 --> 02:38:20,080
to disabled reboot the machine

2457
02:38:21,600 --> 02:38:24,640
and after the reboot we see that now the

2458
02:38:24,640 --> 02:38:26,240
adr is still not

2459
02:38:26,240 --> 02:38:27,600
registered in the

2460
02:38:27,600 --> 02:38:29,680
windows security center but then when we

2461
02:38:29,680 --> 02:38:31,840
have now um look at the process explorer

2462
02:38:31,840 --> 02:38:34,399
we see again blood sections reasonably

2463
02:38:34,399 --> 02:38:36,800
this is i have to learn because um there

2464
02:38:36,800 --> 02:38:38,720
again uses base component processes

2465
02:38:38,720 --> 02:38:40,800
active

2466
02:38:40,800 --> 02:38:43,040
uh quality starts from the user space

2467
02:38:43,040 --> 02:38:44,720
service we see that the service is now

2468
02:38:44,720 --> 02:38:46,160
again running

2469
02:38:46,160 --> 02:38:48,880
but the mini filter driver is now

2470
02:38:48,880 --> 02:38:50,160
stopped

2471
02:38:50,160 --> 02:38:51,040
and

2472
02:38:51,040 --> 02:38:54,160
at least we check the impact

2473
02:38:54,160 --> 02:38:57,439
by disabling the minifilter

2474
02:38:57,439 --> 02:38:59,280
we see that no longer callbacks are

2475
02:38:59,280 --> 02:39:01,840
registered

2476
02:39:02,800 --> 02:39:05,280
we try to isolate the machine

2477
02:39:05,280 --> 02:39:08,280
again

2478
02:39:10,000 --> 02:39:12,080
looks like the temple protection is no

2479
02:39:12,080 --> 02:39:14,160
longer active

2480
02:39:14,160 --> 02:39:15,840
so we can change the value however we

2481
02:39:15,840 --> 02:39:16,800
want

2482
02:39:16,800 --> 02:39:18,720
without creating a detection

2483
02:39:18,720 --> 02:39:20,399
or creating a footprint based on

2484
02:39:20,399 --> 02:39:22,560
telemetry

2485
02:39:22,560 --> 02:39:25,920
and finally we can execute mimi cuts and

2486
02:39:25,920 --> 02:39:27,600
get credentials

2487
02:39:27,600 --> 02:39:31,680
very relaxed i would say

2488
02:39:33,920 --> 02:39:35,680
isolation is still not happening so it

2489
02:39:35,680 --> 02:39:38,479
looks like that isolating the machine is

2490
02:39:38,479 --> 02:39:41,880
no longer working

2491
02:40:01,680 --> 02:40:03,520
okay so what's the conclusion from the

2492
02:40:03,520 --> 02:40:05,040
second demo

2493
02:40:05,040 --> 02:40:07,120
we saw that compared to

2494
02:40:07,120 --> 02:40:09,680
disabling the user space component

2495
02:40:09,680 --> 02:40:11,840
depending also on the product

2496
02:40:11,840 --> 02:40:14,000
this mini filter has a much stronger

2497
02:40:14,000 --> 02:40:17,680
impact in case of reaching our goals

2498
02:40:17,680 --> 02:40:19,520
and to permanently

2499
02:40:19,520 --> 02:40:21,279
disable main functionalities from the

2500
02:40:21,279 --> 02:40:22,319
edr

2501
02:40:22,319 --> 02:40:25,040
and permanently get rid of prevention by

2502
02:40:25,040 --> 02:40:26,720
the antivirus module

2503
02:40:26,720 --> 02:40:30,160
detection footprinting host isolation

2504
02:40:30,160 --> 02:40:32,880
and so on

2505
02:40:33,359 --> 02:40:35,120
at the end of the presentation i would

2506
02:40:35,120 --> 02:40:36,720
like to point out that in my opinion

2507
02:40:36,720 --> 02:40:40,080
this is not really based on availability

2508
02:40:40,080 --> 02:40:42,640
more it's based on the concept from the

2509
02:40:42,640 --> 02:40:44,240
windows architecture

2510
02:40:44,240 --> 02:40:46,000
and i think every

2511
02:40:46,000 --> 02:40:46,880
vendor

2512
02:40:46,880 --> 02:40:49,040
excluding microsoft has to play on the

2513
02:40:49,040 --> 02:40:50,640
same rules

2514
02:40:50,640 --> 02:40:52,399
on windows

2515
02:40:52,399 --> 02:40:55,840
so many thanks for your attention

2516
02:40:55,840 --> 02:41:03,760
[Applause]

2517
02:41:03,760 --> 02:41:06,720
cool thank you very much

2518
02:41:06,720 --> 02:41:11,279
um we have some time for questions

2519
02:41:11,279 --> 02:41:12,880
any questions

2520
02:41:12,880 --> 02:41:17,279
yeah please just line up at the mic

2521
02:41:17,279 --> 02:41:20,319
and whoever is faster

2522
02:41:22,800 --> 02:41:25,279
testing testing seems to be working

2523
02:41:25,279 --> 02:41:27,520
your almost last sentence was every

2524
02:41:27,520 --> 02:41:30,240
vendor except microsoft has to play by

2525
02:41:30,240 --> 02:41:32,240
the same rules yeah

2526
02:41:32,240 --> 02:41:34,800
can you go through the accept microsoft

2527
02:41:34,800 --> 02:41:36,720
thing yeah i think the

2528
02:41:36,720 --> 02:41:38,800
difference is compared to third-party

2529
02:41:38,800 --> 02:41:40,160
vendors that

2530
02:41:40,160 --> 02:41:43,439
microsoft is i think not really

2531
02:41:43,439 --> 02:41:45,760
only forced to go in user space so

2532
02:41:45,760 --> 02:41:47,439
because since the production of patch

2533
02:41:47,439 --> 02:41:50,880
card officially it's not allowed also if

2534
02:41:50,880 --> 02:41:53,600
even or maybe if you use a patch card

2535
02:41:53,600 --> 02:41:55,279
bypass then you can also go in kernel

2536
02:41:55,279 --> 02:41:56,160
space

2537
02:41:56,160 --> 02:41:58,080
but i think that

2538
02:41:58,080 --> 02:42:00,479
from my experiences

2539
02:42:00,479 --> 02:42:02,000
microsoft has

2540
02:42:02,000 --> 02:42:06,080
a very deep or deeper visibility

2541
02:42:06,080 --> 02:42:07,040
because

2542
02:42:07,040 --> 02:42:10,319
it sits it adds more visibility into

2543
02:42:10,319 --> 02:42:13,200
kernel space compared to other vendors

2544
02:42:13,200 --> 02:42:15,279
so

2545
02:42:15,279 --> 02:42:18,240
follow-up have you looked into

2546
02:42:18,240 --> 02:42:19,840
cutting them off

2547
02:42:19,840 --> 02:42:22,319
or their edr products

2548
02:42:22,319 --> 02:42:25,279
do you need additional criminal space

2549
02:42:25,279 --> 02:42:29,840
disability disabling capabilities or

2550
02:42:29,920 --> 02:42:32,319
no at the moment i

2551
02:42:32,319 --> 02:42:35,760
i have only researching in the area of

2552
02:42:35,760 --> 02:42:38,720
mini filters also i also write a blog

2553
02:42:38,720 --> 02:42:41,279
post about elon drivers so

2554
02:42:41,279 --> 02:42:44,479
i had a look on different components

2555
02:42:44,479 --> 02:42:47,600
but not on etvs when you mean this one

2556
02:42:47,600 --> 02:42:48,720
etw

2557
02:42:48,720 --> 02:42:53,359
that will be the topic for my next

2558
02:42:53,359 --> 02:42:55,120
project

2559
02:42:55,120 --> 02:42:56,800
looking forward to it thank you

2560
02:42:56,800 --> 02:42:59,119
thank you

2561
02:42:59,760 --> 02:43:02,000
so how do you think they would go about

2562
02:43:02,000 --> 02:43:05,359
to fix this um do you think there's any

2563
02:43:05,359 --> 02:43:07,760
probability within the

2564
02:43:07,760 --> 02:43:09,920
kernel space or from the isolation

2565
02:43:09,920 --> 02:43:12,720
perspective and do you think windows 11

2566
02:43:12,720 --> 02:43:15,120
could fix this is there anything on the

2567
02:43:15,120 --> 02:43:17,439
way with tpm

2568
02:43:17,439 --> 02:43:19,600
2.0 to fix this

2569
02:43:19,600 --> 02:43:21,680
and what do you think how hard would it

2570
02:43:21,680 --> 02:43:23,120
be to um for

2571
02:43:23,120 --> 02:43:25,040
somebody interested in pen testing to

2572
02:43:25,040 --> 02:43:26,800
learn this um do you think there you

2573
02:43:26,800 --> 02:43:29,439
could make a lap about this or anybody

2574
02:43:29,439 --> 02:43:31,359
learn this or is it just

2575
02:43:31,359 --> 02:43:33,600
too oversimplified here

2576
02:43:33,600 --> 02:43:35,920
no you can definitely learn it i also

2577
02:43:35,920 --> 02:43:38,080
use it by myself

2578
02:43:38,080 --> 02:43:39,920
for sure you have to be very sensitive

2579
02:43:39,920 --> 02:43:41,840
because when you do a failure in the

2580
02:43:41,840 --> 02:43:43,600
kernel space you will create a blue

2581
02:43:43,600 --> 02:43:45,840
screen of death

2582
02:43:45,840 --> 02:43:46,880
but

2583
02:43:46,880 --> 02:43:49,760
if you know the product very well

2584
02:43:49,760 --> 02:43:52,000
you can use it depending on the machine

2585
02:43:52,000 --> 02:43:52,720
so

2586
02:43:52,720 --> 02:43:54,399
maybe when you are acting a very

2587
02:43:54,399 --> 02:43:57,680
sensitive machine it is not

2588
02:43:57,680 --> 02:44:00,560
maybe good when you do this

2589
02:44:00,560 --> 02:44:02,560
what you can do about

2590
02:44:02,560 --> 02:44:05,680
i could observe that well-known products

2591
02:44:05,680 --> 02:44:06,640
are

2592
02:44:06,640 --> 02:44:09,680
blacklisting uh begin to blacklist the

2593
02:44:09,680 --> 02:44:11,520
drivers which have vulnerabilities this

2594
02:44:11,520 --> 02:44:12,560
one way

2595
02:44:12,560 --> 02:44:13,520
but

2596
02:44:13,520 --> 02:44:16,800
it is possible to use different pocs to

2597
02:44:16,800 --> 02:44:19,840
maybe flip some bytes and get bypass

2598
02:44:19,840 --> 02:44:20,720
by that

2599
02:44:20,720 --> 02:44:23,760
by that detections

2600
02:44:23,760 --> 02:44:25,840
another possibility would be

2601
02:44:25,840 --> 02:44:27,680
there is a software vendor on the market

2602
02:44:27,680 --> 02:44:29,600
i will not say the name

2603
02:44:29,600 --> 02:44:30,640
but

2604
02:44:30,640 --> 02:44:34,479
they focus on a mechanism to get

2605
02:44:34,479 --> 02:44:38,080
which is based on the web fiber weap

2606
02:44:38,080 --> 02:44:41,120
variable and um the products have the

2607
02:44:41,120 --> 02:44:43,200
possibility to include this code into

2608
02:44:43,200 --> 02:44:46,479
their code and by they will realize when

2609
02:44:46,479 --> 02:44:47,279
there

2610
02:44:47,279 --> 02:44:48,479
is

2611
02:44:48,479 --> 02:44:51,040
something changed or tempered

2612
02:44:51,040 --> 02:44:53,279
they can

2613
02:44:53,279 --> 02:44:56,479
re-enable it or repair it in

2614
02:44:56,479 --> 02:44:59,720
on the machine

2615
02:45:00,399 --> 02:45:03,279
and do you think um windows 11 will fix

2616
02:45:03,279 --> 02:45:05,359
something about that or with tpm is

2617
02:45:05,359 --> 02:45:07,920
there any way uh vendor could facilitate

2618
02:45:07,920 --> 02:45:10,319
it to protect um in

2619
02:45:10,319 --> 02:45:12,479
in any kind it's a good question so at

2620
02:45:12,479 --> 02:45:13,840
the moment i had another deeper look at

2621
02:45:13,840 --> 02:45:16,000
windows 11

2622
02:45:16,000 --> 02:45:18,160
but i think generally

2623
02:45:18,160 --> 02:45:19,520
with the drivers

2624
02:45:19,520 --> 02:45:20,960
you only can use drivers which are

2625
02:45:20,960 --> 02:45:22,240
released

2626
02:45:22,240 --> 02:45:26,479
for july 2015 afterwards it is more

2627
02:45:26,479 --> 02:45:28,720
it's harder but there are still drivers

2628
02:45:28,720 --> 02:45:30,880
which you can be can be used

2629
02:45:30,880 --> 02:45:31,680
um

2630
02:45:31,680 --> 02:45:34,080
on windows 11 i can't say too much

2631
02:45:34,080 --> 02:45:35,520
because i have too less experience at

2632
02:45:35,520 --> 02:45:36,800
the moment

2633
02:45:36,800 --> 02:45:39,679
thank you thank you

2634
02:45:40,319 --> 02:45:43,840
wonderful any more questions

2635
02:45:49,439 --> 02:45:51,439
okay cool thank you very much very

2636
02:45:51,439 --> 02:45:55,000
interesting thank you

2637
02:45:58,880 --> 02:46:02,039
thank you

2638
03:11:16,720 --> 03:11:19,820
[Music]

2639
03:14:09,040 --> 03:14:10,319
a few

2640
03:14:10,319 --> 03:14:12,160
last participants

2641
03:14:12,160 --> 03:14:14,399
yes

2642
03:14:18,720 --> 03:14:20,960
okay welcome everybody back after the

2643
03:14:20,960 --> 03:14:24,479
break we have now ethan and javier here

2644
03:14:24,479 --> 03:14:27,520
on stage to i saw on the slides you're

2645
03:14:27,520 --> 03:14:30,319
fans of kitties yes that is correct and

2646
03:14:30,319 --> 03:14:31,520
you will tell us

2647
03:14:31,520 --> 03:14:33,200
some details about

2648
03:14:33,200 --> 03:14:35,200
automotive security

2649
03:14:35,200 --> 03:14:37,279
so i think i just handed over to you

2650
03:14:37,279 --> 03:14:38,800
because we are a tight schedule and you

2651
03:14:38,800 --> 03:14:41,040
have a lot of awesome slides

2652
03:14:41,040 --> 03:14:43,040
yep thank you thank you

2653
03:14:43,040 --> 03:14:46,880
so let's get this started um

2654
03:14:46,880 --> 03:14:48,800
hello everyone

2655
03:14:48,800 --> 03:14:51,120
thanks very much for being here we hope

2656
03:14:51,120 --> 03:14:53,120
that you're enjoying besides munich

2657
03:14:53,120 --> 03:14:56,560
after such a long jog town

2658
03:14:56,560 --> 03:14:58,640
so our talk is going to be obviously

2659
03:14:58,640 --> 03:15:00,000
about hacking i mean you guys can see

2660
03:15:00,000 --> 03:15:02,720
the picture there's two hackers on the

2661
03:15:02,720 --> 03:15:04,560
on the slide so

2662
03:15:04,560 --> 03:15:06,640
let's start with the introduction so who

2663
03:15:06,640 --> 03:15:09,040
are we i'm javier i'm a hardware

2664
03:15:09,040 --> 03:15:12,239
security specialist on the embedded site

2665
03:15:12,239 --> 03:15:15,920
i am from cadiz from the south of spain

2666
03:15:15,920 --> 03:15:17,120
i

2667
03:15:17,120 --> 03:15:19,040
enjoy reverse engineering products

2668
03:15:19,040 --> 03:15:22,239
because quite often more than not

2669
03:15:22,239 --> 03:15:24,000
i'm disappointed with the features that

2670
03:15:24,000 --> 03:15:25,520
devices have and i always want to

2671
03:15:25,520 --> 03:15:27,040
improve them myself right like why not

2672
03:15:27,040 --> 03:15:28,640
if i can

2673
03:15:28,640 --> 03:15:31,200
and i do like cake when it's not alive

2674
03:15:31,200 --> 03:15:33,040
has happened sometimes and i do like

2675
03:15:33,040 --> 03:15:34,479
barbecues i mean

2676
03:15:34,479 --> 03:15:37,358
barbecues are good

2677
03:15:37,840 --> 03:15:40,239
uh hi my name is ethan riggs

2678
03:15:40,239 --> 03:15:41,439
i

2679
03:15:41,439 --> 03:15:43,920
am from california in the u.s and i just

2680
03:15:43,920 --> 03:15:45,920
graduated from college about a year ago

2681
03:15:45,920 --> 03:15:47,439
and it's a mechanical engineering degree

2682
03:15:47,439 --> 03:15:48,399
and a

2683
03:15:48,399 --> 03:15:49,840
math degree but the math degree was more

2684
03:15:49,840 --> 03:15:51,520
for fun honestly

2685
03:15:51,520 --> 03:15:52,880
but over this last year i've been able

2686
03:15:52,880 --> 03:15:54,640
to work with javier a lot

2687
03:15:54,640 --> 03:15:55,760
and i've been really lucky to work with

2688
03:15:55,760 --> 03:15:57,920
him in automotive security engineering

2689
03:15:57,920 --> 03:15:59,359
specifically in the hardware and a lot

2690
03:15:59,359 --> 03:16:01,120
of the embedded systems electricity

2691
03:16:01,120 --> 03:16:02,800
parts and

2692
03:16:02,800 --> 03:16:04,399
i would really like to have that i'm

2693
03:16:04,399 --> 03:16:07,199
looking forward to more

2694
03:16:07,920 --> 03:16:09,920
so why are we here

2695
03:16:09,920 --> 03:16:11,200
okay well

2696
03:16:11,200 --> 03:16:13,359
current day car hack has become kind of

2697
03:16:13,359 --> 03:16:15,120
mainstream

2698
03:16:15,120 --> 03:16:16,800
you could see examples up there of

2699
03:16:16,800 --> 03:16:19,520
people who post things like

2700
03:16:19,520 --> 03:16:21,200
hacked on their dashboards like look at

2701
03:16:21,200 --> 03:16:24,000
me i've done all this work or whatever

2702
03:16:24,000 --> 03:16:27,040
uh a car is hacked um

2703
03:16:27,040 --> 03:16:28,960
that's that and that's uh was mainly

2704
03:16:28,960 --> 03:16:30,800
popularized in the 90s that's can

2705
03:16:30,800 --> 03:16:33,279
injection injection it's not all that

2706
03:16:33,279 --> 03:16:34,640
difficult you can tell because you could

2707
03:16:34,640 --> 03:16:36,160
probably look up a guide for it you

2708
03:16:36,160 --> 03:16:37,520
could probably find something to do it

2709
03:16:37,520 --> 03:16:38,880
um

2710
03:16:38,880 --> 03:16:42,319
in about 15 minutes or so

2711
03:16:42,319 --> 03:16:43,359
but

2712
03:16:43,359 --> 03:16:44,560
further than that

2713
03:16:44,560 --> 03:16:46,080
the reason why it's so simple is because

2714
03:16:46,080 --> 03:16:48,239
a lot of the mechanisms for security on

2715
03:16:48,239 --> 03:16:49,760
the ecu

2716
03:16:49,760 --> 03:16:52,160
are pretty simple and they kind of uh

2717
03:16:52,160 --> 03:16:54,640
they don't need to be but they

2718
03:16:54,640 --> 03:16:56,560
are because the ecu's are so lightweight

2719
03:16:56,560 --> 03:16:58,399
and they are so resistant to noise

2720
03:16:58,399 --> 03:17:00,319
because they have to be they're in cars

2721
03:17:00,319 --> 03:17:01,600
the cars are going to be jostling around

2722
03:17:01,600 --> 03:17:02,880
there's going to be a lot of noise there

2723
03:17:02,880 --> 03:17:04,000
has to be

2724
03:17:04,000 --> 03:17:07,200
i might have said that already whoops

2725
03:17:07,200 --> 03:17:10,000
but on the uh and this goes hand-in-hand

2726
03:17:10,000 --> 03:17:12,080
with diagnostics which are also pretty

2727
03:17:12,080 --> 03:17:14,080
simple um once you understand what

2728
03:17:14,080 --> 03:17:14,960
they're doing because they're talking

2729
03:17:14,960 --> 03:17:16,640
exclusively codes once you memorize them

2730
03:17:16,640 --> 03:17:18,800
it's you can read it like you read

2731
03:17:18,800 --> 03:17:21,040
letters on this or like you read words

2732
03:17:21,040 --> 03:17:23,279
um

2733
03:17:23,520 --> 03:17:24,319
yeah

2734
03:17:24,319 --> 03:17:25,920
what we'll be showing you specifically

2735
03:17:25,920 --> 03:17:26,720
is

2736
03:17:26,720 --> 03:17:28,880
three specific uh

2737
03:17:28,880 --> 03:17:30,239
what are the hacks

2738
03:17:30,239 --> 03:17:31,840
yeah some

2739
03:17:31,840 --> 03:17:33,600
let's call them floss in the

2740
03:17:33,600 --> 03:17:35,840
implementations of the state machine for

2741
03:17:35,840 --> 03:17:38,319
diagnostics right and to add to what

2742
03:17:38,319 --> 03:17:41,279
ethan was saying these two pictures i

2743
03:17:41,279 --> 03:17:42,720
find them personally funny you cannot

2744
03:17:42,720 --> 03:17:44,960
see the hacked here but it says hacked

2745
03:17:44,960 --> 03:17:48,479
here so you have to believe that one

2746
03:17:48,640 --> 03:17:50,479
typically these people start thinking

2747
03:17:50,479 --> 03:17:52,399
that they can inject a cam frame and

2748
03:17:52,399 --> 03:17:54,560
they put an ascii string right so it

2749
03:17:54,560 --> 03:17:56,960
shows up here now they're car hackers

2750
03:17:56,960 --> 03:17:58,479
and that's the first and the last tweet

2751
03:17:58,479 --> 03:18:00,560
you see about car hacking that they make

2752
03:18:00,560 --> 03:18:01,520
because

2753
03:18:01,520 --> 03:18:03,359
automotive security is actually not as

2754
03:18:03,359 --> 03:18:06,560
easy as just injecting

2755
03:18:06,720 --> 03:18:07,680
so

2756
03:18:07,680 --> 03:18:09,040
let's talk a little bit about the

2757
03:18:09,040 --> 03:18:11,439
automotive diagnostic protocols and this

2758
03:18:11,439 --> 03:18:13,120
is just a heads up we are not going to

2759
03:18:13,120 --> 03:18:15,439
waste waste too much time on that

2760
03:18:15,439 --> 03:18:18,000
and so the the diagnostic protocols

2761
03:18:18,000 --> 03:18:20,160
usually are based on a request response

2762
03:18:20,160 --> 03:18:21,040
scheme

2763
03:18:21,040 --> 03:18:23,920
where the tester or the device that you

2764
03:18:23,920 --> 03:18:25,680
connect to the car

2765
03:18:25,680 --> 03:18:28,960
is a client and the duty the device

2766
03:18:28,960 --> 03:18:31,920
under test which is the ecu acts as a

2767
03:18:31,920 --> 03:18:32,880
server

2768
03:18:32,880 --> 03:18:33,760
right

2769
03:18:33,760 --> 03:18:36,880
and then like a most things not

2770
03:18:36,880 --> 03:18:38,960
everything unfortunately

2771
03:18:38,960 --> 03:18:41,359
it requires like certain

2772
03:18:41,359 --> 03:18:43,520
authentication it has security measures

2773
03:18:43,520 --> 03:18:47,359
for some functionality right

2774
03:18:47,600 --> 03:18:49,120
so

2775
03:18:49,120 --> 03:18:50,720
security access which is going to be the

2776
03:18:50,720 --> 03:18:53,520
target of our talk uh

2777
03:18:53,520 --> 03:18:57,600
which is uh the service id27 hex

2778
03:18:57,600 --> 03:18:58,399
uh

2779
03:18:58,399 --> 03:19:01,200
it is the the the tool that's used most

2780
03:19:01,200 --> 03:19:04,080
commonly to retreat to restrict a

2781
03:19:04,080 --> 03:19:05,920
functionality right

2782
03:19:05,920 --> 03:19:08,000
so such as if you want to update the

2783
03:19:08,000 --> 03:19:10,560
firmware on an ecu you will

2784
03:19:10,560 --> 03:19:13,279
most likely hopefully need to perform a

2785
03:19:13,279 --> 03:19:14,960
security access

2786
03:19:14,960 --> 03:19:16,960
challenge response right the same thing

2787
03:19:16,960 --> 03:19:18,720
if there are some

2788
03:19:18,720 --> 03:19:20,479
things that could be critical such as

2789
03:19:20,479 --> 03:19:22,479
the beam right it should not be easy it

2790
03:19:22,479 --> 03:19:24,880
should not be easy to spoof the beam by

2791
03:19:24,880 --> 03:19:27,359
just changing it right or there might be

2792
03:19:27,359 --> 03:19:28,720
some other operations which are

2793
03:19:28,720 --> 03:19:30,960
restricted to the manufacturer such as

2794
03:19:30,960 --> 03:19:34,160
adding a new key fob like sometimes when

2795
03:19:34,160 --> 03:19:35,200
your car

2796
03:19:35,200 --> 03:19:36,960
you have a key lost

2797
03:19:36,960 --> 03:19:39,279
or you need a new key i mean you have to

2798
03:19:39,279 --> 03:19:41,520
go to the dealer and then the dealer

2799
03:19:41,520 --> 03:19:43,359
wants to charge you like 200 euros for

2800
03:19:43,359 --> 03:19:44,720
adding a new key

2801
03:19:44,720 --> 03:19:46,800
right that's because they have tooling

2802
03:19:46,800 --> 03:19:50,080
that is specifically required to do that

2803
03:19:50,080 --> 03:19:52,000
right i mean and security access is

2804
03:19:52,000 --> 03:19:53,520
actually so

2805
03:19:53,520 --> 03:19:55,920
relevant to automotive security that

2806
03:19:55,920 --> 03:19:58,080
there's even a market for selling and

2807
03:19:58,080 --> 03:20:01,760
buying security access algorithms

2808
03:20:01,760 --> 03:20:03,200
okay so

2809
03:20:03,200 --> 03:20:04,239
thank you

2810
03:20:04,239 --> 03:20:05,040
um

2811
03:20:05,040 --> 03:20:06,960
how the actual security access protocol

2812
03:20:06,960 --> 03:20:08,640
works is you first

2813
03:20:08,640 --> 03:20:10,319
you have the tester you have the thing

2814
03:20:10,319 --> 03:20:12,239
that talks to

2815
03:20:12,239 --> 03:20:15,120
the ecu or the diagnostic sports the dut

2816
03:20:15,120 --> 03:20:17,359
the device under test um

2817
03:20:17,359 --> 03:20:19,359
and it starts off with the tester

2818
03:20:19,359 --> 03:20:20,720
sending a

2819
03:20:20,720 --> 03:20:22,239
uh

2820
03:20:22,239 --> 03:20:23,840
request for security access which you

2821
03:20:23,840 --> 03:20:25,439
can uh which means there it is request

2822
03:20:25,439 --> 03:20:26,960
for security access which is that top

2823
03:20:26,960 --> 03:20:29,760
left uh option right there

2824
03:20:29,760 --> 03:20:31,040
the

2825
03:20:31,040 --> 03:20:31,920
uh

2826
03:20:31,920 --> 03:20:34,239
the dut recognizes that as you can see

2827
03:20:34,239 --> 03:20:35,680
right here receives it and then it

2828
03:20:35,680 --> 03:20:40,000
generates a 32-bit random seed

2829
03:20:40,000 --> 03:20:42,319
this seed is random and it's once again

2830
03:20:42,319 --> 03:20:43,920
four bytes which is important and will

2831
03:20:43,920 --> 03:20:46,479
come into play later um

2832
03:20:46,479 --> 03:20:48,720
then sends that seed back to the tester

2833
03:20:48,720 --> 03:20:50,319
where the tester receives a c and both

2834
03:20:50,319 --> 03:20:52,720
of them they calculate uh

2835
03:20:52,720 --> 03:20:54,960
using an algorithm that is generally not

2836
03:20:54,960 --> 03:20:57,680
known uh a key that you will have to use

2837
03:20:57,680 --> 03:20:59,439
to unlock it it then proceeds to

2838
03:20:59,439 --> 03:21:01,359
calculate the key send it to the tester

2839
03:21:01,359 --> 03:21:03,760
or send the tester sends it to the dut

2840
03:21:03,760 --> 03:21:05,840
my apologies um

2841
03:21:05,840 --> 03:21:07,520
and after it sends it to the duty the

2842
03:21:07,520 --> 03:21:09,120
dut

2843
03:21:09,120 --> 03:21:11,359
tests the key against the key that it

2844
03:21:11,359 --> 03:21:13,200
calculated on its own

2845
03:21:13,200 --> 03:21:15,200
and if it's correct

2846
03:21:15,200 --> 03:21:16,880
it has two states that it goes into it

2847
03:21:16,880 --> 03:21:19,120
go it says either security access is

2848
03:21:19,120 --> 03:21:21,600
granted or on the other hand if it was

2849
03:21:21,600 --> 03:21:24,319
incorrect they increment the wrong

2850
03:21:24,319 --> 03:21:26,880
attempts counter and they

2851
03:21:26,880 --> 03:21:29,839
don't give you access

2852
03:21:32,080 --> 03:21:34,319
okay

2853
03:21:36,560 --> 03:21:38,880
this is important because as i mentioned

2854
03:21:38,880 --> 03:21:40,800
they're kind of random but more

2855
03:21:40,800 --> 03:21:42,399
importantly that changes based on your

2856
03:21:42,399 --> 03:21:44,319
security level um

2857
03:21:44,319 --> 03:21:48,000
and most likely based on the dut so

2858
03:21:48,000 --> 03:21:49,200
if you're trying to get access to the

2859
03:21:49,200 --> 03:21:50,720
very lowest level you can generally get

2860
03:21:50,720 --> 03:21:52,880
access or you have one key for that and

2861
03:21:52,880 --> 03:21:54,479
then if you get access to the next one

2862
03:21:54,479 --> 03:21:55,840
um

2863
03:21:55,840 --> 03:21:58,319
a higher level um you probably won't be

2864
03:21:58,319 --> 03:21:59,840
able to get access with the same key and

2865
03:21:59,840 --> 03:22:02,880
even then they're oftentimes random

2866
03:22:02,880 --> 03:22:05,040
on top of that the

2867
03:22:05,040 --> 03:22:08,160
security accesses often times change

2868
03:22:08,160 --> 03:22:11,760
based on what level of security that you

2869
03:22:11,760 --> 03:22:13,600
want which is a little bit different but

2870
03:22:13,600 --> 03:22:15,040
if you're going in for a default

2871
03:22:15,040 --> 03:22:17,840
diagnostic section uh hex 10

2872
03:22:17,840 --> 03:22:20,080
you are

2873
03:22:20,080 --> 03:22:21,920
pro might not be able to do some things

2874
03:22:21,920 --> 03:22:24,160
that require a

2875
03:22:24,160 --> 03:22:26,880
a programming session

2876
03:22:26,880 --> 03:22:28,720
finish which is which is hex 13 i

2877
03:22:28,720 --> 03:22:29,840
believe

2878
03:22:29,840 --> 03:22:32,319
a diagnostic session is 10.

2879
03:22:32,319 --> 03:22:34,560
so to add something and maybe this helps

2880
03:22:34,560 --> 03:22:35,760
understand a little bit about the

2881
03:22:35,760 --> 03:22:37,439
security access different levels think

2882
03:22:37,439 --> 03:22:39,840
of a building right an office building

2883
03:22:39,840 --> 03:22:42,399
so and all the doors have a key like a

2884
03:22:42,399 --> 03:22:44,160
physical key like the one you guys most

2885
03:22:44,160 --> 03:22:46,319
likely used to get in your house so now

2886
03:22:46,319 --> 03:22:49,840
there's gonna be a let's say lower level

2887
03:22:49,840 --> 03:22:53,920
by lower i mean like more

2888
03:22:53,920 --> 03:22:55,600
more restricted so it would be the

2889
03:22:55,600 --> 03:22:57,040
inverse if we're talking about actually

2890
03:22:57,040 --> 03:22:58,720
reverse engineering so a higher level

2891
03:22:58,720 --> 03:23:00,479
key which allows you access to a

2892
03:23:00,479 --> 03:23:02,239
building so you get into the building

2893
03:23:02,239 --> 03:23:04,880
that's a security access algorithm right

2894
03:23:04,880 --> 03:23:07,040
usually that's the most simple

2895
03:23:07,040 --> 03:23:09,840
uh so now you got that so you got into

2896
03:23:09,840 --> 03:23:11,040
the building

2897
03:23:11,040 --> 03:23:13,120
now once you're into the building

2898
03:23:13,120 --> 03:23:15,200
you can have access to different

2899
03:23:15,200 --> 03:23:17,439
compartments offices right or rooms if

2900
03:23:17,439 --> 03:23:18,399
you wish

2901
03:23:18,399 --> 03:23:20,160
now the key for those rooms will be

2902
03:23:20,160 --> 03:23:21,120
different

2903
03:23:21,120 --> 03:23:23,439
and you can obviously not attempt to

2904
03:23:23,439 --> 03:23:25,920
open the an office door if you're not

2905
03:23:25,920 --> 03:23:28,160
already in the building right so that's

2906
03:23:28,160 --> 03:23:29,359
what it means by switching different

2907
03:23:29,359 --> 03:23:31,760
diagnostic modes diagnostics mods could

2908
03:23:31,760 --> 03:23:33,680
be a standard session which is zero one

2909
03:23:33,680 --> 03:23:36,479
right then you have you can perform

2910
03:23:36,479 --> 03:23:38,080
certain security access levels which

2911
03:23:38,080 --> 03:23:39,840
would be equivalent to getting inside

2912
03:23:39,840 --> 03:23:43,040
the building then if you change to as a

2913
03:23:43,040 --> 03:23:44,720
standard session or a programming

2914
03:23:44,720 --> 03:23:47,359
session right which maybe you need to

2915
03:23:47,359 --> 03:23:49,840
perform the this security access before

2916
03:23:49,840 --> 03:23:52,239
it allows you to change to that session

2917
03:23:52,239 --> 03:23:54,160
then you could use

2918
03:23:54,160 --> 03:23:57,760
a different uh more secure hopefully a

2919
03:23:57,760 --> 03:24:01,279
security access algorithm right

2920
03:24:01,279 --> 03:24:04,319
and i also mentioned before that um the

2921
03:24:04,319 --> 03:24:05,920
wrong attempts counter increment and

2922
03:24:05,920 --> 03:24:07,520
this is important because that prevents

2923
03:24:07,520 --> 03:24:09,040
brute force attacks

2924
03:24:09,040 --> 03:24:11,120
after you have three or so it depends on

2925
03:24:11,120 --> 03:24:12,640
the manufacturer but then it locks down

2926
03:24:12,640 --> 03:24:15,200
for generally 1 to 30 minutes just once

2927
03:24:15,200 --> 03:24:18,319
again prevent proof forcing

2928
03:24:20,560 --> 03:24:22,720
so

2929
03:24:22,800 --> 03:24:24,880
just a for

2930
03:24:24,880 --> 03:24:26,960
the for the ones of you that are

2931
03:24:26,960 --> 03:24:29,600
familiar with uh coding a little bit i

2932
03:24:29,600 --> 03:24:31,920
will explain it nonetheless this is if

2933
03:24:31,920 --> 03:24:33,439
you can read it it might be a little bit

2934
03:24:33,439 --> 03:24:35,279
too small but i'll walk you guys through

2935
03:24:35,279 --> 03:24:37,680
the code this would be

2936
03:24:37,680 --> 03:24:41,040
so the first part of the security access

2937
03:24:41,040 --> 03:24:44,560
uh challenge right response so one thing

2938
03:24:44,560 --> 03:24:46,640
that we need to mention

2939
03:24:46,640 --> 03:24:49,120
is that security access is divided into

2940
03:24:49,120 --> 03:24:52,239
two different parts one is requesting

2941
03:24:52,239 --> 03:24:54,560
the seed and the other one is providing

2942
03:24:54,560 --> 03:24:55,680
the key

2943
03:24:55,680 --> 03:24:57,760
they are separated usually you will see

2944
03:24:57,760 --> 03:24:59,680
them one after the other but you could

2945
03:24:59,680 --> 03:25:02,000
very well request a seed

2946
03:25:02,000 --> 03:25:05,920
read the ecu bin and then send the key

2947
03:25:05,920 --> 03:25:08,560
they do not need to be sequential

2948
03:25:08,560 --> 03:25:11,520
so what does the request

2949
03:25:11,520 --> 03:25:14,239
do this is the code from a duty the

2950
03:25:14,239 --> 03:25:18,399
bystander test perspective so you just

2951
03:25:18,399 --> 03:25:20,239
provide like the data which would be

2952
03:25:20,239 --> 03:25:22,160
like the

2953
03:25:22,160 --> 03:25:25,359
the raid uh contains the level so then

2954
03:25:25,359 --> 03:25:26,080
the

2955
03:25:26,080 --> 03:25:28,319
the duty checks for the level because as

2956
03:25:28,319 --> 03:25:30,160
we said earlier ideally there would be

2957
03:25:30,160 --> 03:25:33,120
different uh keys different algorithms

2958
03:25:33,120 --> 03:25:34,239
right

2959
03:25:34,239 --> 03:25:36,319
now when it checks for the label

2960
03:25:36,319 --> 03:25:38,560
the first check it does is

2961
03:25:38,560 --> 03:25:40,479
see if that security access level is

2962
03:25:40,479 --> 03:25:43,520
locked because the tester had too many

2963
03:25:43,520 --> 03:25:44,880
wrong attempts

2964
03:25:44,880 --> 03:25:47,600
right so if it's locked then it returns

2965
03:25:47,600 --> 03:25:50,239
false it tells like yeah see you later

2966
03:25:50,239 --> 03:25:52,800
like you've got to wait out the time

2967
03:25:52,800 --> 03:25:54,560
if it's not locked

2968
03:25:54,560 --> 03:25:56,720
then it will create a

2969
03:25:56,720 --> 03:25:58,720
random number

2970
03:25:58,720 --> 03:26:00,960
usually it's four bytes i mean there's

2971
03:26:00,960 --> 03:26:03,120
different algorithms right but let's go

2972
03:26:03,120 --> 03:26:05,520
with the standard

2973
03:26:05,520 --> 03:26:07,840
it will create four random bytes and

2974
03:26:07,840 --> 03:26:10,479
then it will just send those

2975
03:26:10,479 --> 03:26:13,040
four random bytes so that's as far as it

2976
03:26:13,040 --> 03:26:18,319
goes for the requesting the seed parts

2977
03:26:18,319 --> 03:26:20,560
now the second part which is actually

2978
03:26:20,560 --> 03:26:23,680
now the tester uh cthan showed by before

2979
03:26:23,680 --> 03:26:26,080
has calculated the

2980
03:26:26,080 --> 03:26:29,200
the reply the response and sent it so

2981
03:26:29,200 --> 03:26:31,279
the check key function the verify we

2982
03:26:31,279 --> 03:26:32,399
call it here

2983
03:26:32,399 --> 03:26:34,560
again we'll just

2984
03:26:34,560 --> 03:26:37,200
use the seed that the ecu itself

2985
03:26:37,200 --> 03:26:39,040
generated earlier

2986
03:26:39,040 --> 03:26:40,800
perform its own calculation because

2987
03:26:40,800 --> 03:26:42,640
obviously the ecu knows the algorithm

2988
03:26:42,640 --> 03:26:43,920
right

2989
03:26:43,920 --> 03:26:45,279
and

2990
03:26:45,279 --> 03:26:48,560
then it would just compare

2991
03:26:48,560 --> 03:26:51,200
if the result that it got is the same

2992
03:26:51,200 --> 03:26:53,200
that the tester sent

2993
03:26:53,200 --> 03:26:54,880
now

2994
03:26:54,880 --> 03:26:57,600
if it was the same then yep oh good

2995
03:26:57,600 --> 03:26:59,120
right there you go you got security

2996
03:26:59,120 --> 03:27:03,279
access if it was not correct then it

2997
03:27:03,279 --> 03:27:05,840
would increment the wrong attempts right

2998
03:27:05,840 --> 03:27:07,359
because remember we got here because it

2999
03:27:07,359 --> 03:27:09,520
wasn't yet locked so what happens when

3000
03:27:09,520 --> 03:27:10,239
you

3001
03:27:10,239 --> 03:27:11,840
 up and you just like give the wrong

3002
03:27:11,840 --> 03:27:13,520
reply

3003
03:27:13,520 --> 03:27:17,040
wrong attempts increase

3004
03:27:18,000 --> 03:27:18,960
so

3005
03:27:18,960 --> 03:27:20,720
hacker kitty knows something

3006
03:27:20,720 --> 03:27:22,080
i don't think i personally noticed it

3007
03:27:22,080 --> 03:27:23,520
but i trust him he has a cool hacker

3008
03:27:23,520 --> 03:27:24,960
hoodie on he's attacked the planet

3009
03:27:24,960 --> 03:27:26,080
behind him he seems like he knows what

3010
03:27:26,080 --> 03:27:27,439
he's talking about

3011
03:27:27,439 --> 03:27:28,640
yeah

3012
03:27:28,640 --> 03:27:30,479
we'll we'll see what the kitty found

3013
03:27:30,479 --> 03:27:33,040
probably in a little bit

3014
03:27:33,040 --> 03:27:34,720
okay um

3015
03:27:34,720 --> 03:27:36,000
the next thing is man-in-the-middle

3016
03:27:36,000 --> 03:27:38,239
attacks specifically um

3017
03:27:38,239 --> 03:27:40,080
man-elemental attacks similar to can

3018
03:27:40,080 --> 03:27:41,120
injection

3019
03:27:41,120 --> 03:27:42,720
they're they're not really new they were

3020
03:27:42,720 --> 03:27:45,120
around in the 90s that they're used for

3021
03:27:45,120 --> 03:27:46,800
a lot of attacks and it's oftentimes

3022
03:27:46,800 --> 03:27:48,319
very effective

3023
03:27:48,319 --> 03:27:49,040
but

3024
03:27:49,040 --> 03:27:50,560
specifically

3025
03:27:50,560 --> 03:27:53,200
because they were developed in the 90s

3026
03:27:53,200 --> 03:27:54,840
at the same time

3027
03:27:54,840 --> 03:27:57,920
kwp2000 and uds were also designed so

3028
03:27:57,920 --> 03:27:59,359
you might think that they may take into

3029
03:27:59,359 --> 03:28:01,760
account this um

3030
03:28:01,760 --> 03:28:04,239
this popular attack but

3031
03:28:04,239 --> 03:28:05,439
obviously you probably guessed by the

3032
03:28:05,439 --> 03:28:06,880
fact that we're presenting on it they

3033
03:28:06,880 --> 03:28:07,920
they didn't

3034
03:28:07,920 --> 03:28:10,880
it's still it's still very widely used

3035
03:28:10,880 --> 03:28:11,760
in

3036
03:28:11,760 --> 03:28:13,600
the

3037
03:28:13,600 --> 03:28:15,439
current systems

3038
03:28:15,439 --> 03:28:16,239
yeah

3039
03:28:16,239 --> 03:28:18,640
which you can tell from security hijack

3040
03:28:18,640 --> 03:28:20,720
which are um

3041
03:28:20,720 --> 03:28:24,960
uh which was uh my apologies um

3042
03:28:24,960 --> 03:28:27,760
presented on in 2016's black hat and

3043
03:28:27,760 --> 03:28:30,080
defcon 24 by javier

3044
03:28:30,080 --> 03:28:31,040
about

3045
03:28:31,040 --> 03:28:33,120
this attack which uses a man in the

3046
03:28:33,120 --> 03:28:34,000
middle

3047
03:28:34,000 --> 03:28:37,279
on ecu's that are still being

3048
03:28:37,279 --> 03:28:39,439
manufactured today

3049
03:28:39,439 --> 03:28:40,319
and

3050
03:28:40,319 --> 03:28:41,520
it's the standard man in the middle

3051
03:28:41,520 --> 03:28:43,040
attack and it has three steps to it

3052
03:28:43,040 --> 03:28:45,359
first of all you forward all traffic

3053
03:28:45,359 --> 03:28:47,840
from the tester to the duty and from the

3054
03:28:47,840 --> 03:28:51,359
du2 back to the tester until there was a

3055
03:28:51,359 --> 03:28:54,479
security access and then after that

3056
03:28:54,479 --> 03:28:57,120
um the tester goes tester and the duty

3057
03:28:57,120 --> 03:28:58,160
go through the steps that i mentioned

3058
03:28:58,160 --> 03:29:00,000
before about getting security access and

3059
03:29:00,000 --> 03:29:02,319
then it disconnects and suddenly without

3060
03:29:02,319 --> 03:29:04,399
the tester there

3061
03:29:04,399 --> 03:29:05,680
you have all the security access that

3062
03:29:05,680 --> 03:29:06,880
the tester just gave you or would have

3063
03:29:06,880 --> 03:29:08,880
had access to without them in the middle

3064
03:29:08,880 --> 03:29:10,319
there

3065
03:29:10,319 --> 03:29:11,600
so

3066
03:29:11,600 --> 03:29:14,000
to make it like a perhaps easier to

3067
03:29:14,000 --> 03:29:16,800
understand with letters that even i can

3068
03:29:16,800 --> 03:29:18,960
barely see so i can't only imagine like

3069
03:29:18,960 --> 03:29:20,399
what you guys can see there so let's

3070
03:29:20,399 --> 03:29:22,080
imagine you can see them

3071
03:29:22,080 --> 03:29:24,560
so here there's the tester side there

3072
03:29:24,560 --> 03:29:25,600
would be the money in the middle

3073
03:29:25,600 --> 03:29:27,680
attacker there would be the duty here

3074
03:29:27,680 --> 03:29:30,960
right so tester sends the request for

3075
03:29:30,960 --> 03:29:33,680
seat right for security access the money

3076
03:29:33,680 --> 03:29:35,200
in the middle forwards that doesn't

3077
03:29:35,200 --> 03:29:36,960
touch

3078
03:29:36,960 --> 03:29:39,200
the ac receives the request so it

3079
03:29:39,200 --> 03:29:40,880
generates a seat

3080
03:29:40,880 --> 03:29:42,880
that the money in the middle attacker

3081
03:29:42,880 --> 03:29:45,120
forwards it doesn't touch

3082
03:29:45,120 --> 03:29:47,600
now the tester gets the seed it does its

3083
03:29:47,600 --> 03:29:51,520
calculations that we learned earlier

3084
03:29:51,680 --> 03:29:53,520
the money the attacker forwards the

3085
03:29:53,520 --> 03:29:55,359
result

3086
03:29:55,359 --> 03:29:57,840
now the ecu verifies the seed and when

3087
03:29:57,840 --> 03:30:00,640
the ecu sends a positive reply and only

3088
03:30:00,640 --> 03:30:02,479
when that happens

3089
03:30:02,479 --> 03:30:05,120
then the man in the middle attacker

3090
03:30:05,120 --> 03:30:06,000
kicks

3091
03:30:06,000 --> 03:30:08,640
the tester says goodbye and takes over

3092
03:30:08,640 --> 03:30:10,080
diagnostic session

3093
03:30:10,080 --> 03:30:14,239
so to the eyes of the duty

3094
03:30:14,800 --> 03:30:16,560
this the money in the mail attacker and

3095
03:30:16,560 --> 03:30:17,840
the tester are the same because there's

3096
03:30:17,840 --> 03:30:19,439
like literally no validation there's no

3097
03:30:19,439 --> 03:30:21,439
authentication there's nothing

3098
03:30:21,439 --> 03:30:22,880
so

3099
03:30:22,880 --> 03:30:25,040
you end up

3100
03:30:25,040 --> 03:30:29,040
having a secured a

3101
03:30:29,040 --> 03:30:31,200
diagnostic session like having security

3102
03:30:31,200 --> 03:30:32,239
access

3103
03:30:32,239 --> 03:30:34,880
without needing to know the key or the

3104
03:30:34,880 --> 03:30:37,519
algorithm

3105
03:30:38,080 --> 03:30:39,439
so

3106
03:30:39,439 --> 03:30:41,359
let's talk a little bit about the pros

3107
03:30:41,359 --> 03:30:45,040
and cons this will be more obvious later

3108
03:30:45,040 --> 03:30:48,000
so the pros of this attack where the the

3109
03:30:48,000 --> 03:30:49,600
immediate one is that an attacker does

3110
03:30:49,600 --> 03:30:51,279
not need to know the key or the security

3111
03:30:51,279 --> 03:30:52,880
access algorithm like you just don't

3112
03:30:52,880 --> 03:30:55,520
care you just like

3113
03:30:55,520 --> 03:30:58,239
take a hijacker session that's the name

3114
03:30:58,239 --> 03:31:00,000
right that's where name comes and the

3115
03:31:00,000 --> 03:31:01,840
operation is easily repeatable with

3116
03:31:01,840 --> 03:31:04,080
consistent timing i mean if you have a

3117
03:31:04,080 --> 03:31:06,479
tool that let's say performs a firmware

3118
03:31:06,479 --> 03:31:08,000
update right and you're going to use

3119
03:31:08,000 --> 03:31:08,960
that

3120
03:31:08,960 --> 03:31:09,920
to

3121
03:31:09,920 --> 03:31:13,120
hijack its session right then you can

3122
03:31:13,120 --> 03:31:14,960
measure how long does it take for that

3123
03:31:14,960 --> 03:31:16,640
tool since you press start on the

3124
03:31:16,640 --> 03:31:18,880
flashing process until you can get a

3125
03:31:18,880 --> 03:31:20,160
hijack the session right when the

3126
03:31:20,160 --> 03:31:22,319
security access happens so it is easily

3127
03:31:22,319 --> 03:31:24,319
replica

3128
03:31:24,319 --> 03:31:26,399
you can do it like easily over and over

3129
03:31:26,399 --> 03:31:28,960
consistently now the only con

3130
03:31:28,960 --> 03:31:30,800
is that for every time you want to

3131
03:31:30,800 --> 03:31:32,640
hijack a security access session you

3132
03:31:32,640 --> 03:31:34,479
will need to have the tool so if you're

3133
03:31:34,479 --> 03:31:36,080
going to be working on a project where

3134
03:31:36,080 --> 03:31:37,600
you're going to

3135
03:31:37,600 --> 03:31:40,319
attempt to hijack a session let's say

3136
03:31:40,319 --> 03:31:41,920
twice a day for a month you're gonna

3137
03:31:41,920 --> 03:31:43,760
need the tool for a month right so

3138
03:31:43,760 --> 03:31:45,200
that's the only

3139
03:31:45,200 --> 03:31:46,960
the only con

3140
03:31:46,960 --> 03:31:47,920
um

3141
03:31:47,920 --> 03:31:49,040
now

3142
03:31:49,040 --> 03:31:51,439
security hammer is a

3143
03:31:51,439 --> 03:31:53,439
a programming attack that or software

3144
03:31:53,439 --> 03:31:56,239
attack that javier once again developed

3145
03:31:56,239 --> 03:31:58,160
and it explore exploits poor

3146
03:31:58,160 --> 03:32:00,720
implementation project uh practices in

3147
03:32:00,720 --> 03:32:02,640
state machine logic

3148
03:32:02,640 --> 03:32:06,080
specifically for the diagnostics

3149
03:32:06,080 --> 03:32:07,200
and

3150
03:32:07,200 --> 03:32:09,120
before i really explain what exactly sec

3151
03:32:09,120 --> 03:32:11,120
hammer does i kind of have to explain

3152
03:32:11,120 --> 03:32:13,120
the uh implementation practices that it

3153
03:32:13,120 --> 03:32:15,279
exploits um

3154
03:32:15,279 --> 03:32:16,000
so

3155
03:32:16,000 --> 03:32:17,840
i want you to first think about

3156
03:32:17,840 --> 03:32:20,000
the tester it's set uh and the final

3157
03:32:20,000 --> 03:32:22,479
step when the tester sends the

3158
03:32:22,479 --> 03:32:25,120
key to the dut

3159
03:32:25,120 --> 03:32:26,800
the dut gives you two options you can

3160
03:32:26,800 --> 03:32:28,640
either have the right answer or the

3161
03:32:28,640 --> 03:32:30,560
wrong answer but what if

3162
03:32:30,560 --> 03:32:33,439
you didn't send that final answer then

3163
03:32:33,439 --> 03:32:35,040
you didn't get a right answer or a wrong

3164
03:32:35,040 --> 03:32:37,439
answer this might be what hacker kitty

3165
03:32:37,439 --> 03:32:40,080
was trying to point out earlier as well

3166
03:32:40,080 --> 03:32:40,880
but

3167
03:32:40,880 --> 03:32:42,479
back to set hammer

3168
03:32:42,479 --> 03:32:44,640
if you instead of not sending anything

3169
03:32:44,640 --> 03:32:46,000
you asked for

3170
03:32:46,000 --> 03:32:47,359
another seed

3171
03:32:47,359 --> 03:32:49,200
you weren't right and you weren't wrong

3172
03:32:49,200 --> 03:32:51,120
but you still get another seed

3173
03:32:51,120 --> 03:32:52,880
and then you do it again and again set

3174
03:32:52,880 --> 03:32:54,800
hammer does it thousands of times until

3175
03:32:54,800 --> 03:32:57,200
you have um

3176
03:32:57,200 --> 03:32:59,120
thousands of seeds and with that you can

3177
03:32:59,120 --> 03:33:01,120
look at uh

3178
03:33:01,120 --> 03:33:03,040
randomize these randomized seeds that i

3179
03:33:03,040 --> 03:33:06,479
mentioned earlier and you can see

3180
03:33:06,479 --> 03:33:08,160
if they are really random you can try to

3181
03:33:08,160 --> 03:33:10,880
look for some sort of pattern in them

3182
03:33:10,880 --> 03:33:12,560
and just gather general information on

3183
03:33:12,560 --> 03:33:13,680
them

3184
03:33:13,680 --> 03:33:15,040
yeah

3185
03:33:15,040 --> 03:33:15,760
so

3186
03:33:15,760 --> 03:33:17,840
we are running a little bit tight on

3187
03:33:17,840 --> 03:33:19,200
time so we're going to have to speed it

3188
03:33:19,200 --> 03:33:20,640
up nonetheless

3189
03:33:20,640 --> 03:33:22,800
again another blurry

3190
03:33:22,800 --> 03:33:23,760
image

3191
03:33:23,760 --> 03:33:25,680
hopefully you guys can see some of it so

3192
03:33:25,680 --> 03:33:27,439
basically this is an example of sega

3193
03:33:27,439 --> 03:33:28,319
hammer

3194
03:33:28,319 --> 03:33:29,680
on the first line we just start a

3195
03:33:29,680 --> 03:33:31,359
standard diagnostic station well not a

3196
03:33:31,359 --> 03:33:32,720
standard

3197
03:33:32,720 --> 03:33:33,840
zero two

3198
03:33:33,840 --> 03:33:36,080
so it says wait wait okay we got the

3199
03:33:36,080 --> 03:33:38,640
diagnostic session then we request like

3200
03:33:38,640 --> 03:33:39,600
seed

3201
03:33:39,600 --> 03:33:40,880
level one

3202
03:33:40,880 --> 03:33:43,040
yeah here's your seed seed level one

3203
03:33:43,040 --> 03:33:47,600
here's your seed seed level one i mean

3204
03:33:47,600 --> 03:33:50,239
on the wait time because we are using

3205
03:33:50,239 --> 03:33:52,319
the standard but we could go way faster

3206
03:33:52,319 --> 03:33:53,680
you can see that well you cannot

3207
03:33:53,680 --> 03:33:57,120
probably but the ecu takes it from 855

3208
03:33:57,120 --> 03:33:59,439
microseconds to reply we're waiting 30

3209
03:33:59,439 --> 03:34:00,960
milliseconds we could narrow this down

3210
03:34:00,960 --> 03:34:02,800
to one millisecond so we could be

3211
03:34:02,800 --> 03:34:04,319
getting around

3212
03:34:04,319 --> 03:34:06,160
500 seats per

3213
03:34:06,160 --> 03:34:08,000
per second perhaps

3214
03:34:08,000 --> 03:34:10,399
i mean like this is pretty fast and

3215
03:34:10,399 --> 03:34:12,080
pretty powerful

3216
03:34:12,080 --> 03:34:14,479
and like ethan said with this you can

3217
03:34:14,479 --> 03:34:17,120
actually get a feeling of the

3218
03:34:17,120 --> 03:34:19,600
randomness right in the security access

3219
03:34:19,600 --> 03:34:22,560
the seed key algorithm which until now

3220
03:34:22,560 --> 03:34:26,000
was not really possible

3221
03:34:26,399 --> 03:34:27,760
now

3222
03:34:27,760 --> 03:34:30,640
does it always work so

3223
03:34:30,640 --> 03:34:33,359
they we tested more than 40 cus

3224
03:34:33,359 --> 03:34:36,000
including my own car i mean like we have

3225
03:34:36,000 --> 03:34:37,680
tested like issues on the bench

3226
03:34:37,680 --> 03:34:39,040
different cars

3227
03:34:39,040 --> 03:34:42,479
all the stuff of the 40 38 were were

3228
03:34:42,479 --> 03:34:45,040
vulnerable and one of them we didn't

3229
03:34:45,040 --> 03:34:46,560
consider it vulnerable because it was

3230
03:34:46,560 --> 03:34:48,399
just repeating the same seat zero zero

3231
03:34:48,399 --> 03:34:50,399
zero zero like no matter what you unplug

3232
03:34:50,399 --> 03:34:52,720
it we plug it always the same seat so

3233
03:34:52,720 --> 03:34:56,319
we'll just say it's not vulnerable

3234
03:34:56,319 --> 03:34:58,239
and

3235
03:34:58,239 --> 03:34:59,120
now

3236
03:34:59,120 --> 03:35:01,520
this is important some seeds actually

3237
03:35:01,520 --> 03:35:03,840
they a little bit accounted for this not

3238
03:35:03,840 --> 03:35:05,439
like a lot but they did

3239
03:35:05,439 --> 03:35:06,239
so

3240
03:35:06,239 --> 03:35:07,680
they

3241
03:35:07,680 --> 03:35:09,520
actually if you request them the seed

3242
03:35:09,520 --> 03:35:11,600
again they send you the same seed again

3243
03:35:11,600 --> 03:35:14,080
now there's ways around that

3244
03:35:14,080 --> 03:35:16,080
we need to remember that diagnostics is

3245
03:35:16,080 --> 03:35:18,000
actually a state machine so

3246
03:35:18,000 --> 03:35:20,479
if you are in a diagnostic session right

3247
03:35:20,479 --> 03:35:22,880
and you ask for a seed then if you ask

3248
03:35:22,880 --> 03:35:24,399
again and you get the same seed you need

3249
03:35:24,399 --> 03:35:26,479
to change something now what can you

3250
03:35:26,479 --> 03:35:27,439
change

3251
03:35:27,439 --> 03:35:28,399
you can

3252
03:35:28,399 --> 03:35:30,399
request perhaps security access for a

3253
03:35:30,399 --> 03:35:32,239
different level because that would

3254
03:35:32,239 --> 03:35:34,880
overwrite the seed value right again

3255
03:35:34,880 --> 03:35:35,840
we're thinking about poor

3256
03:35:35,840 --> 03:35:37,840
implementations here so they have an

3257
03:35:37,840 --> 03:35:40,000
embedded systems they have only one

3258
03:35:40,000 --> 03:35:42,800
variable for seeds so when you replace

3259
03:35:42,800 --> 03:35:44,319
it with a different security access then

3260
03:35:44,319 --> 03:35:46,399
that gets replaced right

3261
03:35:46,399 --> 03:35:47,840
or you could try switching to a

3262
03:35:47,840 --> 03:35:49,920
different session right that diagnostic

3263
03:35:49,920 --> 03:35:51,120
station because we also said that

3264
03:35:51,120 --> 03:35:53,600
security access does not carry

3265
03:35:53,600 --> 03:35:56,800
over two different diagnostic levels

3266
03:35:56,800 --> 03:35:59,039
uh

3267
03:35:59,200 --> 03:36:01,600
so or you could just like let's go now

3268
03:36:01,600 --> 03:36:02,960
full here you could just

3269
03:36:02,960 --> 03:36:05,120
disconnect and reconnect from the ecu

3270
03:36:05,120 --> 03:36:07,200
right that takes longer but still that

3271
03:36:07,200 --> 03:36:08,399
would work

3272
03:36:08,399 --> 03:36:10,080
and the thing is that you don't get

3273
03:36:10,080 --> 03:36:10,960
locked

3274
03:36:10,960 --> 03:36:13,359
right like with typical security access

3275
03:36:13,359 --> 03:36:15,040
if you send three wrong attempts you're

3276
03:36:15,040 --> 03:36:16,640
gonna wait out

3277
03:36:16,640 --> 03:36:19,200
from 10 seconds to 30 minutes

3278
03:36:19,200 --> 03:36:21,040
with this method you don't get locked

3279
03:36:21,040 --> 03:36:22,880
out you just get like all the time all

3280
03:36:22,880 --> 03:36:25,279
the seats

3281
03:36:25,279 --> 03:36:27,200
and now sac puppet combines the sec

3282
03:36:27,200 --> 03:36:30,000
hammer that i mentioned and the man in

3283
03:36:30,000 --> 03:36:34,000
the middle attack um

3284
03:36:34,000 --> 03:36:35,680
it's divided into three

3285
03:36:35,680 --> 03:36:38,239
primary parts um first of all

3286
03:36:38,239 --> 03:36:40,160
it analyzes the randomness it gets the

3287
03:36:40,160 --> 03:36:42,239
randomness and it generates uh figures

3288
03:36:42,239 --> 03:36:44,239
out what kind of seed or picks out a

3289
03:36:44,239 --> 03:36:46,319
specific seed that it wants to use using

3290
03:36:46,319 --> 03:36:48,399
sec hammer then you go over to the man

3291
03:36:48,399 --> 03:36:50,880
in the middle part and it forces that

3292
03:36:50,880 --> 03:36:52,000
seed

3293
03:36:52,000 --> 03:36:53,200
once you're in the man in the middle

3294
03:36:53,200 --> 03:36:55,200
attack so that it pulls out a specific

3295
03:36:55,200 --> 03:36:57,120
one now once man in the middle has given

3296
03:36:57,120 --> 03:36:59,520
you uh that seed and you've using the

3297
03:36:59,520 --> 03:37:01,600
process that we mentioned before

3298
03:37:01,600 --> 03:37:04,960
found the key for that seed

3299
03:37:04,960 --> 03:37:07,439
you can use set hammer again

3300
03:37:07,439 --> 03:37:09,600
and force that same seed and now you

3301
03:37:09,600 --> 03:37:10,800
have the key

3302
03:37:10,800 --> 03:37:12,239
and you can get access to that level

3303
03:37:12,239 --> 03:37:14,000
whenever you want without the tester

3304
03:37:14,000 --> 03:37:16,560
using just sec hammer because you know

3305
03:37:16,560 --> 03:37:19,040
exactly what the c that you can get and

3306
03:37:19,040 --> 03:37:21,439
the key

3307
03:37:22,080 --> 03:37:24,560
so to add a little something to what he

3308
03:37:24,560 --> 03:37:26,399
has said so basically what we're going

3309
03:37:26,399 --> 03:37:28,479
to do is we're going to use egg hammer

3310
03:37:28,479 --> 03:37:29,680
we're going to figure out if the

3311
03:37:29,680 --> 03:37:31,680
randomness is good we're going to figure

3312
03:37:31,680 --> 03:37:33,439
out if there's a number that gets

3313
03:37:33,439 --> 03:37:34,560
repeated

3314
03:37:34,560 --> 03:37:36,479
more often than the others or the most

3315
03:37:36,479 --> 03:37:39,840
repeated number in the randomness

3316
03:37:39,840 --> 03:37:41,200
or we're going to figure out if there's

3317
03:37:41,200 --> 03:37:42,800
a pattern if there's like a counter that

3318
03:37:42,800 --> 03:37:44,800
goes up and since reset then you know

3319
03:37:44,800 --> 03:37:46,720
the initial value and then you can see

3320
03:37:46,720 --> 03:37:49,279
it going up all these are true cases

3321
03:37:49,279 --> 03:37:51,040
now if you find that value that you

3322
03:37:51,040 --> 03:37:52,160
already know then you're going to use

3323
03:37:52,160 --> 03:37:53,600
the man in the middle and what you're

3324
03:37:53,600 --> 03:37:56,720
going to do he will explain in a second

3325
03:37:56,720 --> 03:37:59,040
is you're gonna force your own seed

3326
03:37:59,040 --> 03:38:00,640
right and then you're gonna get the

3327
03:38:00,640 --> 03:38:02,720
pre-calculated uh

3328
03:38:02,720 --> 03:38:05,439
reply from the tester and then you will

3329
03:38:05,439 --> 03:38:08,640
use seghammer again to try to force the

3330
03:38:08,640 --> 03:38:11,520
the ut to give you the same seed that

3331
03:38:11,520 --> 03:38:14,720
seem to appear most commonly right or in

3332
03:38:14,720 --> 03:38:16,160
the pattern

3333
03:38:16,160 --> 03:38:17,040
sorry

3334
03:38:17,040 --> 03:38:17,760
okay

3335
03:38:17,760 --> 03:38:19,840
sec puppet follows a very similar thank

3336
03:38:19,840 --> 03:38:22,399
you um follows very similar patterns was

3337
03:38:22,399 --> 03:38:24,479
before there's uh requesting to succeed

3338
03:38:24,479 --> 03:38:27,600
for security uh for security access um

3339
03:38:27,600 --> 03:38:29,760
goes uh the mail in the middle then more

3340
03:38:29,760 --> 03:38:32,080
middle forwards it requests uh the duty

3341
03:38:32,080 --> 03:38:33,000
request

3342
03:38:33,000 --> 03:38:35,680
receives that seed request

3343
03:38:35,680 --> 03:38:37,680
um and then it responds

3344
03:38:37,680 --> 03:38:39,120
with the seed

3345
03:38:39,120 --> 03:38:42,319
calculates it um

3346
03:38:42,479 --> 03:38:43,680
before it

3347
03:38:43,680 --> 03:38:45,680
uh receives that seed

3348
03:38:45,680 --> 03:38:47,520
we force the seed force to seed very

3349
03:38:47,520 --> 03:38:50,080
specifically

3350
03:38:53,279 --> 03:38:54,960
sorry

3351
03:38:54,960 --> 03:38:56,720
so it forces the seed very specifically

3352
03:38:56,720 --> 03:38:57,840
um

3353
03:38:57,840 --> 03:38:59,359
as i mentioned earlier forces the seed

3354
03:38:59,359 --> 03:39:01,040
for um that one seed that we want to

3355
03:39:01,040 --> 03:39:02,080
have that one seed that we're going to

3356
03:39:02,080 --> 03:39:04,160
recreate and reuse every single time and

3357
03:39:04,160 --> 03:39:05,680
then once it gets that seed then it

3358
03:39:05,680 --> 03:39:07,439
sends it to the tester and the tester

3359
03:39:07,439 --> 03:39:08,720
then

3360
03:39:08,720 --> 03:39:11,600
calculates yeah it calculates using um

3361
03:39:11,600 --> 03:39:12,880
the algorithm that we don't know and

3362
03:39:12,880 --> 03:39:14,720
then we save that key we save it so that

3363
03:39:14,720 --> 03:39:17,438
we can use it whenever

3364
03:39:17,680 --> 03:39:19,279
so really quick

3365
03:39:19,279 --> 03:39:22,319
so here would be right when the duty

3366
03:39:22,319 --> 03:39:24,239
sent say its own seed

3367
03:39:24,239 --> 03:39:25,840
we would the money in the mid attacker

3368
03:39:25,840 --> 03:39:27,520
would replace that seed with the one

3369
03:39:27,520 --> 03:39:29,600
that we found out that gets

3370
03:39:29,600 --> 03:39:31,840
a mostly repeated right or the most

3371
03:39:31,840 --> 03:39:33,680
common one or the one we want to find so

3372
03:39:33,680 --> 03:39:35,760
then when we give that seed that we want

3373
03:39:35,760 --> 03:39:37,600
to give to the tester the tester uses

3374
03:39:37,600 --> 03:39:40,080
that seed and then it gives us the reply

3375
03:39:40,080 --> 03:39:41,840
to that seed

3376
03:39:41,840 --> 03:39:43,840
what does that mean

3377
03:39:43,840 --> 03:39:45,199
the pros

3378
03:39:45,199 --> 03:39:47,199
i again

3379
03:39:47,199 --> 03:39:49,279
an attacker does not need to know or

3380
03:39:49,279 --> 03:39:50,479
care about

3381
03:39:50,479 --> 03:39:53,120
keys or algorithms right with this

3382
03:39:53,120 --> 03:39:54,319
method

3383
03:39:54,319 --> 03:39:55,520
uh

3384
03:39:55,520 --> 03:39:56,720
this one

3385
03:39:56,720 --> 03:39:58,800
unlike security hijack requires a

3386
03:39:58,800 --> 03:40:01,040
one-time access to

3387
03:40:01,040 --> 03:40:03,359
a testing equipment right just to do

3388
03:40:03,359 --> 03:40:04,880
their money in the middle attack to get

3389
03:40:04,880 --> 03:40:07,760
your seat precalculated

3390
03:40:07,760 --> 03:40:09,680
and now the cons the

3391
03:40:09,680 --> 03:40:10,880
the biggest one obviously is that the

3392
03:40:10,880 --> 03:40:12,479
target needs to be vulnerable to safe

3393
03:40:12,479 --> 03:40:13,359
hammer

3394
03:40:13,359 --> 03:40:14,880
right if you cannot analyze the

3395
03:40:14,880 --> 03:40:17,359
randomness the source of randomness

3396
03:40:17,359 --> 03:40:19,520
then that's not gonna work too well

3397
03:40:19,520 --> 03:40:21,199
right or if you cannot get it to give

3398
03:40:21,199 --> 03:40:23,359
you many seats right fast

3399
03:40:23,359 --> 03:40:25,359
and then the target needs to have like

3400
03:40:25,359 --> 03:40:27,040
poor or predictable randomness because

3401
03:40:27,040 --> 03:40:29,680
it might be successful to a seg hammer

3402
03:40:29,680 --> 03:40:31,359
but it might actually have

3403
03:40:31,359 --> 03:40:34,319
good randomness

3404
03:40:34,319 --> 03:40:36,720
and a few use cases for these attacks

3405
03:40:36,720 --> 03:40:38,880
one would be this is more

3406
03:40:38,880 --> 03:40:41,040
a

3407
03:40:41,040 --> 03:40:43,279
rather fun test for testing than for an

3408
03:40:43,279 --> 03:40:45,040
attacker it would be like testing the

3409
03:40:45,040 --> 03:40:46,800
issue randomness source right like if

3410
03:40:46,800 --> 03:40:48,399
you get a

3411
03:40:48,399 --> 03:40:50,880
like an ecu front tire one and they are

3412
03:40:50,880 --> 03:40:52,160
telling you or you having your

3413
03:40:52,160 --> 03:40:54,640
requirements like yeah the the it should

3414
03:40:54,640 --> 03:40:56,479
be like truly random and then you

3415
03:40:56,479 --> 03:40:58,319
perform this test and you see it's just

3416
03:40:58,319 --> 03:41:00,800
sequential based on a timer on the

3417
03:41:00,800 --> 03:41:02,560
microseconds that's the seed right or

3418
03:41:02,560 --> 03:41:04,479
the ticks

3419
03:41:04,479 --> 03:41:05,600
have seen

3420
03:41:05,600 --> 03:41:07,199
then you can tell them like yeah this

3421
03:41:07,199 --> 03:41:09,199
does not meet whatever another one would

3422
03:41:09,199 --> 03:41:10,720
be like reading and writing memory or

3423
03:41:10,720 --> 03:41:13,040
flash offsets that are like off limits

3424
03:41:13,040 --> 03:41:14,560
in the sense of if you get like one of

3425
03:41:14,560 --> 03:41:16,720
these tools from ebay that allows you to

3426
03:41:16,720 --> 03:41:19,359
flash your ecu you could do security

3427
03:41:19,359 --> 03:41:22,960
hijack or you could do a sec puppet or

3428
03:41:22,960 --> 03:41:24,399
anything

3429
03:41:24,399 --> 03:41:26,000
and then

3430
03:41:26,000 --> 03:41:28,160
you could try to read into the ram range

3431
03:41:28,160 --> 03:41:30,399
with that which that tool does not do by

3432
03:41:30,399 --> 03:41:32,479
default right or any other tool

3433
03:41:32,479 --> 03:41:34,399
and then performing operations that are

3434
03:41:34,399 --> 03:41:37,120
not supported by the testers like if you

3435
03:41:37,120 --> 03:41:39,760
know like the payload to send to

3436
03:41:39,760 --> 03:41:42,080
execute a specific action but the tool

3437
03:41:42,080 --> 03:41:44,560
you have in your hands does not do that

3438
03:41:44,560 --> 03:41:46,000
you could hijack the session and then

3439
03:41:46,000 --> 03:41:49,680
send your authenticated command right

3440
03:41:50,479 --> 03:41:53,199
and that was it we were a little bit

3441
03:41:53,199 --> 03:41:55,040
over thank you very much for attending

3442
03:41:55,040 --> 03:41:58,160
everyone we hope you enjoyed the

3443
03:41:58,160 --> 03:41:59,680
talk

3444
03:41:59,680 --> 03:42:02,960
and if you have any questions feel free

3445
03:42:02,960 --> 03:42:04,560
to reach us out we're going to be around

3446
03:42:04,560 --> 03:42:06,399
yeah so if you have any questions we

3447
03:42:06,399 --> 03:42:07,359
have a

3448
03:42:07,359 --> 03:42:11,160
microphone in front

3449
03:42:12,000 --> 03:42:14,479
what would oh maybe you can walk up to

3450
03:42:14,479 --> 03:42:16,319
the microphone in the center

3451
03:42:16,319 --> 03:42:18,640
okay

3452
03:42:21,439 --> 03:42:23,040
hi good talk

3453
03:42:23,040 --> 03:42:25,520
um given that the system would be

3454
03:42:25,520 --> 03:42:27,279
vulnerable to the sec hammer could you

3455
03:42:27,279 --> 03:42:29,199
just go ahead and do something like like

3456
03:42:29,199 --> 03:42:32,080
rainbow tables just pre-computed uh the

3457
03:42:32,080 --> 03:42:34,239
precomputation of all the seeds that you

3458
03:42:34,239 --> 03:42:35,120
send

3459
03:42:35,120 --> 03:42:38,319
um to the testing device and then simply

3460
03:42:38,319 --> 03:42:40,319
save it and then basically use the one

3461
03:42:40,319 --> 03:42:42,399
that that that you want to use just when

3462
03:42:42,399 --> 03:42:43,920
it appears

3463
03:42:43,920 --> 03:42:46,160
so that would be doable

3464
03:42:46,160 --> 03:42:48,239
yeah the thing is that that would take

3465
03:42:48,239 --> 03:42:50,800
too much time because let's go to

3466
03:42:50,800 --> 03:42:53,120
this would be for the sec puppet attack

3467
03:42:53,120 --> 03:42:54,479
right because on sega hammer you just

3468
03:42:54,479 --> 03:42:57,120
get seats but you want to

3469
03:42:57,120 --> 03:42:59,199
have a tester pre-calculate the key

3470
03:42:59,199 --> 03:43:00,479
right i mean we're talking about the

3471
03:43:00,479 --> 03:43:02,160
scenario where you do not know the

3472
03:43:02,160 --> 03:43:04,319
security access algorithm or you do not

3473
03:43:04,319 --> 03:43:07,120
know the key so you will have the tester

3474
03:43:07,120 --> 03:43:09,840
and the best you could do is like

3475
03:43:09,840 --> 03:43:12,319
automate the testers starting the

3476
03:43:12,319 --> 03:43:14,560
process whatever right or if the tester

3477
03:43:14,560 --> 03:43:17,439
has literally a command to authenticate

3478
03:43:17,439 --> 03:43:18,239
right

3479
03:43:18,239 --> 03:43:20,319
uh then you could just like hammer the

3480
03:43:20,319 --> 03:43:21,520
tester

3481
03:43:21,520 --> 03:43:24,399
with your own seats yeah that would be

3482
03:43:24,399 --> 03:43:26,560
an option i think i mean it is doable

3483
03:43:26,560 --> 03:43:28,160
but it will be very slow that would be

3484
03:43:28,160 --> 03:43:30,239
mostly useful if you have a subset of

3485
03:43:30,239 --> 03:43:31,520
let's say

3486
03:43:31,520 --> 03:43:34,160
20 most repeated seats right then you

3487
03:43:34,160 --> 03:43:36,160
want to create a table for all those 20

3488
03:43:36,160 --> 03:43:38,080
seats that is doable but if you want to

3489
03:43:38,080 --> 03:43:40,880
do the whole

3490
03:43:40,960 --> 03:43:43,040
four bytes calculation that's going to

3491
03:43:43,040 --> 03:43:44,640
take some time i mean if you're sitting

3492
03:43:44,640 --> 03:43:46,800
in the middle uh you could be seeing all

3493
03:43:46,800 --> 03:43:48,399
the traffic going on and never sending

3494
03:43:48,399 --> 03:43:51,840
the response as you just did so even if

3495
03:43:51,840 --> 03:43:54,319
that could overcome the good randomness

3496
03:43:54,319 --> 03:43:56,560
um so you could work maybe with that so

3497
03:43:56,560 --> 03:43:58,080
that was just i know yeah i mean that

3498
03:43:58,080 --> 03:44:00,000
should be global yes thank you so it

3499
03:44:00,000 --> 03:44:01,199
sounds like you have something to

3500
03:44:01,199 --> 03:44:03,439
discuss afterwards off the stage

3501
03:44:03,439 --> 03:44:05,520
so i have to kick you off the stage you

3502
03:44:05,520 --> 03:44:07,199
kicked out the security

3503
03:44:07,199 --> 03:44:08,479
no

3504
03:44:08,479 --> 03:44:10,479
and we will prepare here for the next

3505
03:44:10,479 --> 03:44:12,720
talk

3506
03:44:13,120 --> 03:44:16,840
thank you very much everyone

3507
03:44:18,560 --> 03:44:21,120
and here we will have our next talk

3508
03:44:21,120 --> 03:44:23,120
about usb fuzzing

3509
03:44:23,120 --> 03:44:25,439
and give us a minute to build up okay

3510
03:44:25,439 --> 03:44:28,680
thank you

3511
03:44:33,520 --> 03:44:36,520
yes

3512
03:44:45,120 --> 03:44:48,120
okay

3513
03:45:10,800 --> 03:45:12,560
let's wait until the other people are in

3514
03:45:12,560 --> 03:45:14,000
and i think they're a bit late but

3515
03:45:14,000 --> 03:45:17,439
that's okay lunch break

3516
03:45:19,520 --> 03:45:22,760
thank you

3517
03:45:36,800 --> 03:45:39,800
uh

3518
03:46:04,399 --> 03:46:07,399
okay

3519
03:46:26,880 --> 03:46:30,239
okay then i see most of the people have

3520
03:46:30,239 --> 03:46:34,080
arrived and changed so you are now

3521
03:46:34,080 --> 03:46:37,680
listening to fuzzing usb from

3522
03:46:37,680 --> 03:46:40,880
andrei konovalov

3523
03:46:40,880 --> 03:46:43,199
and i wonder how you

3524
03:46:43,199 --> 03:46:44,960
discovered this topic but i guess you

3525
03:46:44,960 --> 03:46:45,760
will

3526
03:46:45,760 --> 03:46:47,680
show us and what

3527
03:46:47,680 --> 03:46:49,520
what your research will be about this

3528
03:46:49,520 --> 03:46:51,520
okay no problem okay then i'll hand over

3529
03:46:51,520 --> 03:46:54,399
to you and have a good talk thank you

3530
03:46:54,399 --> 03:46:55,600
okay

3531
03:46:55,600 --> 03:46:59,040
let's say you own an android device and

3532
03:46:59,040 --> 03:47:01,040
an android phone and of course since you

3533
03:47:01,040 --> 03:47:03,279
care about security your android phone

3534
03:47:03,279 --> 03:47:05,439
is locked it's protected either with a

3535
03:47:05,439 --> 03:47:08,399
password or a pin code or pattern

3536
03:47:08,399 --> 03:47:10,479
now let's say you somehow misplaced your

3537
03:47:10,479 --> 03:47:12,720
phone so for example maybe it was stolen

3538
03:47:12,720 --> 03:47:14,880
from you maybe just lost it or maybe it

3539
03:47:14,880 --> 03:47:17,760
was even confiscated by law enforcement

3540
03:47:17,760 --> 03:47:20,160
and now the question is can these people

3541
03:47:20,160 --> 03:47:22,319
who now have your phone somehow unlock

3542
03:47:22,319 --> 03:47:24,160
it and access the data that is stored

3543
03:47:24,160 --> 03:47:25,840
inside

3544
03:47:25,840 --> 03:47:27,279
and there are a few non-technical

3545
03:47:27,279 --> 03:47:29,199
approaches they can take to achieve this

3546
03:47:29,199 --> 03:47:30,880
but we're going to focus on a technical

3547
03:47:30,880 --> 03:47:34,399
one and since each android device has a

3548
03:47:34,399 --> 03:47:37,600
usb port maybe there is a way then they

3549
03:47:37,600 --> 03:47:40,160
can somehow attack it over usb

3550
03:47:40,160 --> 03:47:42,160
well normally if you just start plugging

3551
03:47:42,160 --> 03:47:43,120
in

3552
03:47:43,120 --> 03:47:45,520
like usual usb devices into an android

3553
03:47:45,520 --> 03:47:47,600
phone you will unlikely to get any

3554
03:47:47,600 --> 03:47:49,920
meaningful result to achieve this goal

3555
03:47:49,920 --> 03:47:51,520
but if you manage to find a

3556
03:47:51,520 --> 03:47:54,000
vulnerability inside the usb stack that

3557
03:47:54,000 --> 03:47:55,760
is running inside android then

3558
03:47:55,760 --> 03:47:57,120
theoretically you could use this

3559
03:47:57,120 --> 03:47:59,439
vulnerability to overtake the the

3560
03:47:59,439 --> 03:48:02,319
android device and does unlock it

3561
03:48:02,319 --> 03:48:05,520
and this was the focus of my talk so

3562
03:48:05,520 --> 03:48:08,479
hi my name is andrei and i am a security

3563
03:48:08,479 --> 03:48:10,640
researcher and i mainly work with the

3564
03:48:10,640 --> 03:48:12,800
linux and android kernels

3565
03:48:12,800 --> 03:48:16,160
and my talk is called fuzzing usb with

3566
03:48:16,160 --> 03:48:17,920
raw gadget and essentially this talk is

3567
03:48:17,920 --> 03:48:20,880
about trying to find a particular type

3568
03:48:20,880 --> 03:48:23,199
of vulnerabilities in the android usb

3569
03:48:23,199 --> 03:48:24,560
stack

3570
03:48:24,560 --> 03:48:26,960
so i'm going to start with describing

3571
03:48:26,960 --> 03:48:28,720
briefly describing the usb attack

3572
03:48:28,720 --> 03:48:30,239
surface but the part that i'm gonna

3573
03:48:30,239 --> 03:48:32,880
focus on are the usb drivers

3574
03:48:32,880 --> 03:48:35,040
then we're gonna look in i'm gonna

3575
03:48:35,040 --> 03:48:37,199
explain what fuzzing is and we're gonna

3576
03:48:37,199 --> 03:48:38,720
we're gonna look into how to apply

3577
03:48:38,720 --> 03:48:40,479
fuzzing to usb

3578
03:48:40,479 --> 03:48:42,160
after that we're going to check out a

3579
03:48:42,160 --> 03:48:44,319
few ways to emulate usb devices but the

3580
03:48:44,319 --> 03:48:46,160
way that i'm going to focus on is based

3581
03:48:46,160 --> 03:48:48,880
on the linux usb gadget subsystem

3582
03:48:48,880 --> 03:48:49,920
and

3583
03:48:49,920 --> 03:48:52,160
the main topic of the talk is i'm going

3584
03:48:52,160 --> 03:48:54,960
to show you how i used a new

3585
03:48:54,960 --> 03:48:56,720
kernel module that i developed called

3586
03:48:56,720 --> 03:48:59,600
raw gadget to do fuzzing usb to fuzz usb

3587
03:48:59,600 --> 03:49:01,760
drivers within a virtual machine without

3588
03:49:01,760 --> 03:49:04,640
any extra external dependencies so it

3589
03:49:04,640 --> 03:49:06,319
can be used in any type of a virtual

3590
03:49:06,319 --> 03:49:07,840
machine and it does not require any

3591
03:49:07,840 --> 03:49:09,520
additional hardware

3592
03:49:09,520 --> 03:49:11,199
and finally we're going to look at how

3593
03:49:11,199 --> 03:49:13,439
to trigger usb box with raspberry pi

3594
03:49:13,439 --> 03:49:15,040
zero and i actually have a raspberry pi

3595
03:49:15,040 --> 03:49:16,479
zero right here and hopefully we're

3596
03:49:16,479 --> 03:49:18,000
gonna get to the demo where i will show

3597
03:49:18,000 --> 03:49:19,600
you how to trigger one of the box that i

3598
03:49:19,600 --> 03:49:21,920
managed to find

3599
03:49:21,920 --> 03:49:24,479
all right all right let's start so first

3600
03:49:24,479 --> 03:49:26,080
let's check out the architecture of a

3601
03:49:26,080 --> 03:49:28,800
typical linux usb host i've split this

3602
03:49:28,800 --> 03:49:31,040
architecture into three parts on the

3603
03:49:31,040 --> 03:49:32,800
bottom part we have the hardware layer

3604
03:49:32,800 --> 03:49:34,239
in the middle we have the kernel layer

3605
03:49:34,239 --> 03:49:35,760
and on the top we have the eurospace

3606
03:49:35,760 --> 03:49:36,560
layer

3607
03:49:36,560 --> 03:49:37,520
and i'm going to describe this

3608
03:49:37,520 --> 03:49:39,920
architecture from the bottom to the top

3609
03:49:39,920 --> 03:49:41,920
so every linux device every linux host

3610
03:49:41,920 --> 03:49:44,000
device has a usb port

3611
03:49:44,000 --> 03:49:46,399
and this port is physically connected to

3612
03:49:46,399 --> 03:49:47,760
a piece of hardware that's called the

3613
03:49:47,760 --> 03:49:49,439
usb host controller

3614
03:49:49,439 --> 03:49:51,040
this cost controller knows how to

3615
03:49:51,040 --> 03:49:53,680
communicate over the usb wire

3616
03:49:53,680 --> 03:49:56,399
and since each hardware device in linux

3617
03:49:56,399 --> 03:49:57,760
is supposed to have its own driver the

3618
03:49:57,760 --> 03:49:59,520
host controller also has a driver in the

3619
03:49:59,520 --> 03:50:00,880
kernel

3620
03:50:00,880 --> 03:50:02,560
then this host controller driver is

3621
03:50:02,560 --> 03:50:04,399
connected to an abstraction layer called

3622
03:50:04,399 --> 03:50:06,880
usb core and behind this abstraction

3623
03:50:06,880 --> 03:50:08,640
layer we have the drivers of different

3624
03:50:08,640 --> 03:50:10,960
types of usb devices so for example we

3625
03:50:10,960 --> 03:50:13,680
have the hid driver and hid stands for

3626
03:50:13,680 --> 03:50:15,680
human interface device and this is a

3627
03:50:15,680 --> 03:50:17,680
driver for keyboards mice and other

3628
03:50:17,680 --> 03:50:19,760
types of input devices

3629
03:50:19,760 --> 03:50:21,279
besides that we have drivers for my

3630
03:50:21,279 --> 03:50:23,120
storage which is our which are flash

3631
03:50:23,120 --> 03:50:24,800
drives and we also have drivers for

3632
03:50:24,800 --> 03:50:27,199
video devices and other like there's

3633
03:50:27,199 --> 03:50:28,800
there's a lot of them

3634
03:50:28,800 --> 03:50:30,560
so this abstraction layer the usb core

3635
03:50:30,560 --> 03:50:33,359
abstraction layer allows a developer to

3636
03:50:33,359 --> 03:50:35,760
write a usb driver

3637
03:50:35,760 --> 03:50:37,840
regardless of what controller of what

3638
03:50:37,840 --> 03:50:40,239
host controller driver is in use

3639
03:50:40,239 --> 03:50:42,080
and finally on the very top on the user

3640
03:50:42,080 --> 03:50:43,199
space we have some user space

3641
03:50:43,199 --> 03:50:45,600
applications and user space daemons

3642
03:50:45,600 --> 03:50:49,120
so for example when you plug in a

3643
03:50:49,120 --> 03:50:51,040
keyboard and you start pressing the keys

3644
03:50:51,040 --> 03:50:52,399
these keys are going to be shown in the

3645
03:50:52,399 --> 03:50:54,800
text editor you're using and this text

3646
03:50:54,800 --> 03:50:56,720
editor is part is also kind of

3647
03:50:56,720 --> 03:50:58,880
considered a part of the attack surface

3648
03:50:58,880 --> 03:51:01,520
and it's running in user space

3649
03:51:01,520 --> 03:51:04,479
so here the goal our goal is that we

3650
03:51:04,479 --> 03:51:06,319
control the usb device and we want to

3651
03:51:06,319 --> 03:51:08,239
somehow attack the linux usb host by

3652
03:51:08,239 --> 03:51:09,760
controlling the device

3653
03:51:09,760 --> 03:51:11,279
and we can actually attack each of the

3654
03:51:11,279 --> 03:51:12,960
layers that we have we can attack the

3655
03:51:12,960 --> 03:51:15,120
physical ports so for example there is a

3656
03:51:15,120 --> 03:51:17,120
device that's called usb killer and when

3657
03:51:17,120 --> 03:51:19,680
you connect it to a usb port it's going

3658
03:51:19,680 --> 03:51:23,199
to charge itself from the usb

3659
03:51:23,199 --> 03:51:25,760
power lines and then discharge 200 volts

3660
03:51:25,760 --> 03:51:27,600
over the data lines and essentially just

3661
03:51:27,600 --> 03:51:29,920
electrocute the usb port and maybe also

3662
03:51:29,920 --> 03:51:31,359
the part of the boards maybe the host

3663
03:51:31,359 --> 03:51:32,880
controller

3664
03:51:32,880 --> 03:51:34,160
and then there are attacks that can be

3665
03:51:34,160 --> 03:51:36,000
used like on the very top the user space

3666
03:51:36,000 --> 03:51:38,080
level for example there was this old

3667
03:51:38,080 --> 03:51:40,399
windows attack where you plug in a flash

3668
03:51:40,399 --> 03:51:42,640
drive into a device and there is this

3669
03:51:42,640 --> 03:51:44,960
autorun file that is on this flash drive

3670
03:51:44,960 --> 03:51:46,560
and windows will just run it and this

3671
03:51:46,560 --> 03:51:48,160
way you could execute arbitrary code on

3672
03:51:48,160 --> 03:51:49,760
windows

3673
03:51:49,760 --> 03:51:52,239
so since i work with the linux kernel i

3674
03:51:52,239 --> 03:51:54,080
targeted the kernel layer

3675
03:51:54,080 --> 03:51:56,319
and the parts i was interested in are

3676
03:51:56,319 --> 03:51:59,199
the usb core and the usb drivers the

3677
03:51:59,199 --> 03:52:00,560
reason i didn't really care about the

3678
03:52:00,560 --> 03:52:02,399
host controller driver is because

3679
03:52:02,399 --> 03:52:04,640
different use different

3680
03:52:04,640 --> 03:52:06,479
linux devices might have different host

3681
03:52:06,479 --> 03:52:09,199
controllers and i wanted to find bugs in

3682
03:52:09,199 --> 03:52:10,880
the linux kernel that would affect every

3683
03:52:10,880 --> 03:52:12,560
linux device there is so i wanted to

3684
03:52:12,560 --> 03:52:14,560
find bugs in the part of the kernel that

3685
03:52:14,560 --> 03:52:17,840
are present on every linux device

3686
03:52:17,840 --> 03:52:19,760
all right to find this box i wanted to

3687
03:52:19,760 --> 03:52:21,840
use an approach that's called fuzzing

3688
03:52:21,840 --> 03:52:23,760
and fuzzing is a way to find bugs and

3689
03:52:23,760 --> 03:52:26,080
computer kernels in computer programs

3690
03:52:26,080 --> 03:52:27,920
and can also it can also be applied to

3691
03:52:27,920 --> 03:52:29,199
the kernel

3692
03:52:29,199 --> 03:52:30,720
so i have this definition for fuzzing

3693
03:52:30,720 --> 03:52:32,640
fuzzing is you is fitting in random

3694
03:52:32,640 --> 03:52:34,160
inputs into the program until the

3695
03:52:34,160 --> 03:52:36,160
program crashes and it works like this

3696
03:52:36,160 --> 03:52:38,560
you generate a random input you execute

3697
03:52:38,560 --> 03:52:40,800
the program and feed this input in and

3698
03:52:40,800 --> 03:52:43,520
then you check did the program crash

3699
03:52:43,520 --> 03:52:44,880
for example the program could have

3700
03:52:44,880 --> 03:52:46,160
seg-faulted

3701
03:52:46,160 --> 03:52:48,000
and if the program i mean if the program

3702
03:52:48,000 --> 03:52:49,520
didn't crash you just generate a new

3703
03:52:49,520 --> 03:52:51,680
input and you keep going

3704
03:52:51,680 --> 03:52:54,000
and if some point the program crashed

3705
03:52:54,000 --> 03:52:55,680
that means great we have found a bug

3706
03:52:55,680 --> 03:52:58,000
because we generated an input that

3707
03:52:58,000 --> 03:52:59,520
triggered a crash in a particular

3708
03:52:59,520 --> 03:53:01,279
program that is a definition of a bug at

3709
03:53:01,279 --> 03:53:03,199
least one of the definitions

3710
03:53:03,199 --> 03:53:06,080
so for example if we have an xml parser

3711
03:53:06,080 --> 03:53:08,239
we would be generating random xml files

3712
03:53:08,239 --> 03:53:09,760
we would be

3713
03:53:09,760 --> 03:53:11,279
feeding them into the parser and would

3714
03:53:11,279 --> 03:53:13,520
be checking for parser crashes and at

3715
03:53:13,520 --> 03:53:15,199
some point if the parser crashes then

3716
03:53:15,199 --> 03:53:17,120
perfectly we actually have found a bug

3717
03:53:17,120 --> 03:53:19,680
both a bug and a reproducer for this bug

3718
03:53:19,680 --> 03:53:22,800
in the form of an xml file

3719
03:53:22,800 --> 03:53:25,040
right how would we apply this to usb

3720
03:53:25,040 --> 03:53:26,720
if we look at the definition again so

3721
03:53:26,720 --> 03:53:28,479
first we replace the word program with

3722
03:53:28,479 --> 03:53:29,760
the word kernel because we're trying to

3723
03:53:29,760 --> 03:53:31,760
attack the kernel but then there are two

3724
03:53:31,760 --> 03:53:33,920
parts of this definition that we need to

3725
03:53:33,920 --> 03:53:35,359
address

3726
03:53:35,359 --> 03:53:37,359
so first we need to figure out how do we

3727
03:53:37,359 --> 03:53:40,000
feed data into usb do we use any special

3728
03:53:40,000 --> 03:53:41,920
hardware maybe we use some virtual

3729
03:53:41,920 --> 03:53:44,319
machines maybe we use some other stuff

3730
03:53:44,319 --> 03:53:45,600
and the second thing is we need to

3731
03:53:45,600 --> 03:53:47,520
figure out is what kind of inputs does

3732
03:53:47,520 --> 03:53:49,680
usb accept in general like what data

3733
03:53:49,680 --> 03:53:52,880
with do we feed in what's the protocol

3734
03:53:52,880 --> 03:53:54,000
and

3735
03:53:54,000 --> 03:53:55,760
i want to start with the second part and

3736
03:53:55,760 --> 03:53:58,319
talk a little bit about the usb protocol

3737
03:53:58,319 --> 03:53:59,760
and the most important part about the

3738
03:53:59,760 --> 03:54:02,960
usb is that it is cost driven that means

3739
03:54:02,960 --> 03:54:04,880
the device when when the device is

3740
03:54:04,880 --> 03:54:07,040
connected into a host the device cannot

3741
03:54:07,040 --> 03:54:09,120
just send data by itself it needs to

3742
03:54:09,120 --> 03:54:11,439
wait until a request from the host so

3743
03:54:11,439 --> 03:54:13,600
here on the right i have a device and on

3744
03:54:13,600 --> 03:54:14,960
the left i have a host and let's say we

3745
03:54:14,960 --> 03:54:16,800
plugged in a device into the host so at

3746
03:54:16,800 --> 03:54:18,160
this point device cannot start

3747
03:54:18,160 --> 03:54:20,479
communicating the first communication is

3748
03:54:20,479 --> 03:54:22,399
happening from the host site and the

3749
03:54:22,399 --> 03:54:23,760
host has the device like what kind of

3750
03:54:23,760 --> 03:54:25,520
device are you and the device for

3751
03:54:25,520 --> 03:54:27,680
example responds i'm a keyboard

3752
03:54:27,680 --> 03:54:29,920
and this response is actually done

3753
03:54:29,920 --> 03:54:32,000
i mean the device sends a few structures

3754
03:54:32,000 --> 03:54:33,760
to the host and these structures are

3755
03:54:33,760 --> 03:54:35,600
called usb descriptors

3756
03:54:35,600 --> 03:54:37,680
these descriptors encode information

3757
03:54:37,680 --> 03:54:39,120
about the device so for example they

3758
03:54:39,120 --> 03:54:41,439
decode the class id which is a keyboard

3759
03:54:41,439 --> 03:54:43,520
and they encode the device manufacturer

3760
03:54:43,520 --> 03:54:45,439
and so on and there's there's quite a

3761
03:54:45,439 --> 03:54:46,880
lot of stuff

3762
03:54:46,880 --> 03:54:47,600
so

3763
03:54:47,600 --> 03:54:49,680
now again the device cannot just start

3764
03:54:49,680 --> 03:54:51,920
communicating and now the host asks the

3765
03:54:51,920 --> 03:54:54,000
host knows how to handle keyboards and

3766
03:54:54,000 --> 03:54:55,439
now the host asks the device like what

3767
03:54:55,439 --> 03:54:57,359
kind of keys do you have on what what

3768
03:54:57,359 --> 03:54:58,880
purpose do they serve

3769
03:54:58,880 --> 03:55:00,399
and now the device responds i have this

3770
03:55:00,399 --> 03:55:02,800
many keys intended for this purpose

3771
03:55:02,800 --> 03:55:04,640
and the device and now the host has

3772
03:55:04,640 --> 03:55:06,239
alright you're now connected to which

3773
03:55:06,239 --> 03:55:09,760
the device will respond okay this is

3774
03:55:09,760 --> 03:55:11,920
didn't fit into the slide

3775
03:55:11,920 --> 03:55:14,080
all right so the key part here that the

3776
03:55:14,080 --> 03:55:16,160
device only responded to requests from

3777
03:55:16,160 --> 03:55:17,520
the host

3778
03:55:17,520 --> 03:55:19,840
and this is actually happening so for

3779
03:55:19,840 --> 03:55:21,520
example if you plugged in a keyboard and

3780
03:55:21,520 --> 03:55:23,520
you started typing in keys you started

3781
03:55:23,520 --> 03:55:25,920
pressing on keys the keyboard cannot

3782
03:55:25,920 --> 03:55:28,080
just tell the host by itself that this

3783
03:55:28,080 --> 03:55:30,239
key particular key is now pressed the

3784
03:55:30,239 --> 03:55:31,920
host need to ask for it

3785
03:55:31,920 --> 03:55:33,840
and this is it works like this so the

3786
03:55:33,840 --> 03:55:36,160
host just keeps asking the keyboard like

3787
03:55:36,160 --> 03:55:37,920
which keys do you have pressed and it's

3788
03:55:37,920 --> 03:55:39,199
asked like any keys pressed here the

3789
03:55:39,199 --> 03:55:41,040
keyboard says no any keys for executive

3790
03:55:41,040 --> 03:55:43,279
versus no and at some point you press

3791
03:55:43,279 --> 03:55:45,359
the key and the keyboard the keyboard is

3792
03:55:45,359 --> 03:55:46,960
going to respond now i have this

3793
03:55:46,960 --> 03:55:49,199
particular key pressed

3794
03:55:49,199 --> 03:55:50,239
all right

3795
03:55:50,239 --> 03:55:52,319
so the key part about the protocol is we

3796
03:55:52,319 --> 03:55:54,319
cannot just send data right

3797
03:55:54,319 --> 03:55:56,720
so the way a usb file would work is

3798
03:55:56,720 --> 03:55:58,720
first it would wait until a request from

3799
03:55:58,720 --> 03:56:00,640
the host then it would generate a

3800
03:56:00,640 --> 03:56:02,640
response to this request and send the

3801
03:56:02,640 --> 03:56:03,840
response back

3802
03:56:03,840 --> 03:56:06,080
and keep doing this in a loop until at

3803
03:56:06,080 --> 03:56:08,319
some point in time it the fuzzer also

3804
03:56:08,319 --> 03:56:10,080
needs to monitor the host for crashes

3805
03:56:10,080 --> 03:56:12,479
and if at some point in time the host

3806
03:56:12,479 --> 03:56:14,640
crashes that means we managed to find a

3807
03:56:14,640 --> 03:56:16,000
bug

3808
03:56:16,000 --> 03:56:17,920
okay this is like a high level higher

3809
03:56:17,920 --> 03:56:19,920
level overview of how usb fuzzing would

3810
03:56:19,920 --> 03:56:21,520
work

3811
03:56:21,520 --> 03:56:23,040
now let's go back to challenge number

3812
03:56:23,040 --> 03:56:25,600
one so we need to figure out a way how

3813
03:56:25,600 --> 03:56:29,040
do we fit data into the usb

3814
03:56:29,040 --> 03:56:31,279
and i started looking for ways of doing

3815
03:56:31,279 --> 03:56:33,279
that and the first way that i found is

3816
03:56:33,279 --> 03:56:34,960
to use the face sensor board and i

3817
03:56:34,960 --> 03:56:38,000
actually have it right here

3818
03:56:38,000 --> 03:56:40,399
so this board allows emulating arbitrary

3819
03:56:40,399 --> 03:56:41,760
usb devices

3820
03:56:41,760 --> 03:56:44,000
and essentially this board has two usb

3821
03:56:44,000 --> 03:56:46,319
ports one on the left one on the right

3822
03:56:46,319 --> 03:56:48,319
and one of them is plugged into a

3823
03:56:48,319 --> 03:56:50,239
computer that you control and another

3824
03:56:50,239 --> 03:56:51,600
one is plugged into the computer you're

3825
03:56:51,600 --> 03:56:52,800
trying to attack

3826
03:56:52,800 --> 03:56:54,239
and then on on the computer that you

3827
03:56:54,239 --> 03:56:56,399
control you can run a python library

3828
03:56:56,399 --> 03:56:59,279
that allows you to receive usb requests

3829
03:56:59,279 --> 03:57:01,199
and provide responses to them

3830
03:57:01,199 --> 03:57:03,279
and this way you can emulate devices and

3831
03:57:03,279 --> 03:57:04,960
of course since we can emulate devices

3832
03:57:04,960 --> 03:57:06,720
we can use these these boards for

3833
03:57:06,720 --> 03:57:07,760
fuzzing

3834
03:57:07,760 --> 03:57:09,120
the problem with this approach is that

3835
03:57:09,120 --> 03:57:11,600
it requires hardware and fuzzing with

3836
03:57:11,600 --> 03:57:14,239
hardware is challenging

3837
03:57:14,239 --> 03:57:15,600
so for example

3838
03:57:15,600 --> 03:57:17,760
we need to monitor our host we're trying

3839
03:57:17,760 --> 03:57:19,840
to attack for crashes and if it crashed

3840
03:57:19,840 --> 03:57:21,600
we need to reboot it and doing this with

3841
03:57:21,600 --> 03:57:24,399
hardware is is difficult

3842
03:57:24,399 --> 03:57:26,160
since that it would be great to have

3843
03:57:26,160 --> 03:57:28,080
some kind of approach that works inside

3844
03:57:28,080 --> 03:57:29,520
the virtual machine

3845
03:57:29,520 --> 03:57:31,520
so i kept looking and the next thing i

3846
03:57:31,520 --> 03:57:34,640
found is the usb redire module in common

3847
03:57:34,640 --> 03:57:36,800
and qam is a type of a virtual machine

3848
03:57:36,800 --> 03:57:39,600
and this module allows the host

3849
03:57:39,600 --> 03:57:41,920
to inject arbitrary usb traffic for the

3850
03:57:41,920 --> 03:57:44,399
guest kernel that is running inside camo

3851
03:57:44,399 --> 03:57:45,920
and this can also be used for pausing

3852
03:57:45,920 --> 03:57:47,760
and there is actually other it's called

3853
03:57:47,760 --> 03:57:49,439
virtual usb fuzzer

3854
03:57:49,439 --> 03:57:52,319
and yeah it uses this qmo usb reader

3855
03:57:52,319 --> 03:57:53,359
module

3856
03:57:53,359 --> 03:57:55,040
so the great thing about this approach

3857
03:57:55,040 --> 03:57:56,880
is that we don't need any hardware we

3858
03:57:56,880 --> 03:57:58,399
only need camo

3859
03:57:58,399 --> 03:58:00,720
but this is also a problem because this

3860
03:58:00,720 --> 03:58:03,680
approach depends on qmo so we cannot use

3861
03:58:03,680 --> 03:58:05,359
other types of virtual machines to do

3862
03:58:05,359 --> 03:58:06,960
this kind of fuzzing

3863
03:58:06,960 --> 03:58:07,920
and

3864
03:58:07,920 --> 03:58:09,520
this was also a problem for me and the

3865
03:58:09,520 --> 03:58:11,520
reason was that i wanted to use a fuzzer

3866
03:58:11,520 --> 03:58:13,120
called syscaller and i'm going to talk a

3867
03:58:13,120 --> 03:58:15,199
bit more about it later but the key

3868
03:58:15,199 --> 03:58:17,439
thing about this caller is it it mainly

3869
03:58:17,439 --> 03:58:19,520
runs on google cloud engine and google

3870
03:58:19,520 --> 03:58:20,960
cloud engine is another type of a

3871
03:58:20,960 --> 03:58:22,560
virtual machine

3872
03:58:22,560 --> 03:58:24,479
and that google cloud engine does not

3873
03:58:24,479 --> 03:58:27,199
have the usb reader module so this this

3874
03:58:27,199 --> 03:58:29,279
approach is great but it was not quite

3875
03:58:29,279 --> 03:58:31,279
what i was looking for

3876
03:58:31,279 --> 03:58:33,040
so i kept looking

3877
03:58:33,040 --> 03:58:35,760
and another thing that i found was the

3878
03:58:35,760 --> 03:58:37,760
linux usb gadget subsystem

3879
03:58:37,760 --> 03:58:39,439
and this subsystem essentially allows

3880
03:58:39,439 --> 03:58:41,920
you to take a linux based board like a

3881
03:58:41,920 --> 03:58:44,000
raspberry pi zero that i have right here

3882
03:58:44,000 --> 03:58:46,239
and turn it into a usb device so there

3883
03:58:46,239 --> 03:58:47,760
is a way to configure this board so

3884
03:58:47,760 --> 03:58:50,000
whenever you plug it in over usb

3885
03:58:50,000 --> 03:58:52,880
it pretends to be a device and the logic

3886
03:58:52,880 --> 03:58:54,319
of the device is controlled by the

3887
03:58:54,319 --> 03:58:56,960
software that is running on the board

3888
03:58:56,960 --> 03:58:58,399
right and most of the linux based

3889
03:58:58,399 --> 03:59:00,000
workplace most of the popular boards

3890
03:59:00,000 --> 03:59:01,680
that exist they have the support for

3891
03:59:01,680 --> 03:59:04,640
this so the beaglebone black also tested

3892
03:59:04,640 --> 03:59:06,800
and i had an android board that also

3893
03:59:06,800 --> 03:59:08,800
worked and the raspberry pi boards also

3894
03:59:08,800 --> 03:59:10,479
work

3895
03:59:10,479 --> 03:59:11,680
and

3896
03:59:11,680 --> 03:59:14,800
theoretically if we if we have

3897
03:59:14,800 --> 03:59:17,279
this kind of device we can also use it

3898
03:59:17,279 --> 03:59:19,439
for fuzzing probably because it allows

3899
03:59:19,439 --> 03:59:21,840
you to define usb devices and the

3900
03:59:21,840 --> 03:59:24,080
problem here is that if you're using an

3901
03:59:24,080 --> 03:59:26,160
actual linux based board we still

3902
03:59:26,160 --> 03:59:27,760
require hardware

3903
03:59:27,760 --> 03:59:30,160
but maybe maybe we can figure out a way

3904
03:59:30,160 --> 03:59:32,160
to get rid of this hardware requirement

3905
03:59:32,160 --> 03:59:33,760
so let's try to take a look into the

3906
03:59:33,760 --> 03:59:36,319
architecture of the gadget site so this

3907
03:59:36,319 --> 03:59:38,399
this

3908
03:59:38,399 --> 03:59:39,920
this particular feature of these boards

3909
03:59:39,920 --> 03:59:41,600
is called this board pretends to be a

3910
03:59:41,600 --> 03:59:43,760
usb gadget so let's take a look at the

3911
03:59:43,760 --> 03:59:45,359
gadget architecture and try to figure

3912
03:59:45,359 --> 03:59:47,120
out a way maybe

3913
03:59:47,120 --> 03:59:48,960
we can do something about it

3914
03:59:48,960 --> 03:59:51,040
so on the left i previously shown you

3915
03:59:51,040 --> 03:59:52,960
the architecture of a usb host and now

3916
03:59:52,960 --> 03:59:53,760
we're going to look into the

3917
03:59:53,760 --> 03:59:56,080
architecture of usb gadget

3918
03:59:56,080 --> 03:59:58,080
and here we're going to start from the

3919
03:59:58,080 --> 04:00:00,239
upper part so from user space and the

3920
04:00:00,239 --> 04:00:02,640
logic of the usb device that is being

3921
04:00:02,640 --> 04:00:06,080
emulated by linux based board is

3922
04:00:06,080 --> 04:00:09,600
driven by a user space application

3923
04:00:09,600 --> 04:00:11,439
then there is a gadget driver in the

3924
04:00:11,439 --> 04:00:13,279
kernel and this gadget driver defines

3925
04:00:13,279 --> 04:00:14,800
the type of the usb device so for

3926
04:00:14,800 --> 04:00:16,319
example there is a gadget drivers for

3927
04:00:16,319 --> 04:00:18,080
emulating keyboards there is a gadget

3928
04:00:18,080 --> 04:00:20,000
driver for emulating video devices and

3929
04:00:20,000 --> 04:00:21,600
so on

3930
04:00:21,600 --> 04:00:23,120
then similar to the host we have an

3931
04:00:23,120 --> 04:00:25,120
abstraction layer called usb gadget core

3932
04:00:25,120 --> 04:00:26,720
and behind this abstraction layer we

3933
04:00:26,720 --> 04:00:28,880
have the device controller driver unlike

3934
04:00:28,880 --> 04:00:30,720
the host controller driver this driver

3935
04:00:30,720 --> 04:00:32,960
is for the device controller that knows

3936
04:00:32,960 --> 04:00:36,000
how to communicate over the usb wire

3937
04:00:36,000 --> 04:00:38,080
while being a device not being a host

3938
04:00:38,080 --> 04:00:40,000
right and then we have the usb port

3939
04:00:40,000 --> 04:00:42,000
which is supposed to be plugged into usb

3940
04:00:42,000 --> 04:00:44,800
host and this part on the left allows us

3941
04:00:44,800 --> 04:00:46,800
to use a linux based board to emulate

3942
04:00:46,800 --> 04:00:48,880
usb devices

3943
04:00:48,880 --> 04:00:51,760
so now the question is if we want to use

3944
04:00:51,760 --> 04:00:53,920
this approach for fuzzing we need to

3945
04:00:53,920 --> 04:00:56,479
figure out which gadget driver do we use

3946
04:00:56,479 --> 04:00:58,239
and if you use it just the driver for

3947
04:00:58,239 --> 04:00:59,840
keyboards there is of course this of

3948
04:00:59,840 --> 04:01:01,199
course means that we can only connect

3949
04:01:01,199 --> 04:01:03,600
keyboards which is not very useful when

3950
04:01:03,600 --> 04:01:04,960
when we're fuzzing we want to connect

3951
04:01:04,960 --> 04:01:06,880
all kinds of devices

3952
04:01:06,880 --> 04:01:08,479
so i started looking and i found a

3953
04:01:08,479 --> 04:01:10,479
driver that's called gadgetfs and it

3954
04:01:10,479 --> 04:01:12,880
allows emulating almost arbitrary usb

3955
04:01:12,880 --> 04:01:16,000
devices and the keyword here is almost

3956
04:01:16,000 --> 04:01:18,399
the way gadget device works is

3957
04:01:18,399 --> 04:01:20,399
when it starts it asks the user space

3958
04:01:20,399 --> 04:01:22,560
applications for the usb descriptors of

3959
04:01:22,560 --> 04:01:24,640
the device it's going to emulate

3960
04:01:24,640 --> 04:01:26,640
and then whenever this this gadget stack

3961
04:01:26,640 --> 04:01:28,479
receives a

3962
04:01:28,479 --> 04:01:30,720
usb descriptor request from the host the

3963
04:01:30,720 --> 04:01:32,720
gadget fs is going to respond to this

3964
04:01:32,720 --> 04:01:34,479
request by itself without asking user

3965
04:01:34,479 --> 04:01:35,520
space

3966
04:01:35,520 --> 04:01:37,120
if it receives other types of requests

3967
04:01:37,120 --> 04:01:38,800
it's going to pass them to user space

3968
04:01:38,800 --> 04:01:41,279
and ask them for response and then

3969
04:01:41,279 --> 04:01:43,520
give it back to the host

3970
04:01:43,520 --> 04:01:45,439
there are two problems with gadgetfs the

3971
04:01:45,439 --> 04:01:47,199
first problem is that

3972
04:01:47,199 --> 04:01:49,439
gadgetfs does not pass all usb requests

3973
04:01:49,439 --> 04:01:51,359
to user space it responds to them on

3974
04:01:51,359 --> 04:01:53,279
their own

3975
04:01:53,279 --> 04:01:55,040
to some of them on their own and that

3976
04:01:55,040 --> 04:01:57,439
means that if the same usb descriptor is

3977
04:01:57,439 --> 04:01:59,439
requested twice we cannot provide

3978
04:01:59,439 --> 04:02:00,960
different responses

3979
04:02:00,960 --> 04:02:02,560
and providing different responses would

3980
04:02:02,560 --> 04:02:04,000
be very useful for fuzzing because this

3981
04:02:04,000 --> 04:02:05,840
would be likely to trigger bugs in the

3982
04:02:05,840 --> 04:02:07,120
host

3983
04:02:07,120 --> 04:02:08,720
and another problem which is actually a

3984
04:02:08,720 --> 04:02:10,640
bigger problem is that gadgetfest has

3985
04:02:10,640 --> 04:02:12,479
validity checks for the usb descriptors

3986
04:02:12,479 --> 04:02:14,800
that we provide to it and that means we

3987
04:02:14,800 --> 04:02:16,720
cannot send mall form descriptors to the

3988
04:02:16,720 --> 04:02:18,479
host we have to we have to send the

3989
04:02:18,479 --> 04:02:19,840
correct ones and we want to send

3990
04:02:19,840 --> 04:02:21,439
malformed descriptors because we want to

3991
04:02:21,439 --> 04:02:23,520
trigger bugs

3992
04:02:23,520 --> 04:02:25,520
so initially i wanted to remove these

3993
04:02:25,520 --> 04:02:28,640
countries from gadgetfs i started trying

3994
04:02:28,640 --> 04:02:30,479
to change the gadgetfs code but it has a

3995
04:02:30,479 --> 04:02:32,720
lot of legacy code in there also the

3996
04:02:32,720 --> 04:02:35,199
interface is a bit unusual so it was

3997
04:02:35,199 --> 04:02:37,600
hard to adapt gadgetfs instead i just

3998
04:02:37,600 --> 04:02:39,680
implemented my own gadget driver this

3999
04:02:39,680 --> 04:02:41,760
took some effort but i managed to do it

4000
04:02:41,760 --> 04:02:43,520
and this driver it works similarly to

4001
04:02:43,520 --> 04:02:45,600
gadgetfs but it allows you to emulate

4002
04:02:45,600 --> 04:02:47,600
arbitrary usb devices and the key

4003
04:02:47,600 --> 04:02:49,760
differences are that all usb requests

4004
04:02:49,760 --> 04:02:52,080
that these gadget drive received

4005
04:02:52,080 --> 04:02:53,680
they're passed to user space to get the

4006
04:02:53,680 --> 04:02:55,600
response and then there are no sanity

4007
04:02:55,600 --> 04:02:58,160
checks on usb descriptors

4008
04:02:58,160 --> 04:03:00,640
and i actually mailed this request to

4009
04:03:00,640 --> 04:03:02,720
upstream so i i mailed the linux kernel

4010
04:03:02,720 --> 04:03:04,560
patches and they were accepted in

4011
04:03:04,560 --> 04:03:07,600
version 0.7 i think it was released it

4012
04:03:07,600 --> 04:03:09,359
was over a year ago

4013
04:03:09,359 --> 04:03:10,880
right and

4014
04:03:10,880 --> 04:03:12,479
i have a github repository in case you

4015
04:03:12,479 --> 04:03:14,239
want to check it out with some examples

4016
04:03:14,239 --> 04:03:15,760
and instructions on how to run raw

4017
04:03:15,760 --> 04:03:17,520
gadget

4018
04:03:17,520 --> 04:03:19,600
all right at this point we figured out

4019
04:03:19,600 --> 04:03:22,239
how to we have our own

4020
04:03:22,239 --> 04:03:24,640
new gadget driver that allows us to

4021
04:03:24,640 --> 04:03:27,359
emulate arbitrary usb devices we still

4022
04:03:27,359 --> 04:03:29,920
have that problem that we need hardware

4023
04:03:29,920 --> 04:03:32,080
to do that so what we could do here is

4024
04:03:32,080 --> 04:03:33,680
that this part of the stack the gadget

4025
04:03:33,680 --> 04:03:35,199
part of the stack is going to be running

4026
04:03:35,199 --> 04:03:37,040
on our linux based board

4027
04:03:37,040 --> 04:03:39,199
we can take a separately physical usb

4028
04:03:39,199 --> 04:03:41,520
host we could plug this board into the

4029
04:03:41,520 --> 04:03:43,359
host and then

4030
04:03:43,359 --> 04:03:44,800
run the fuzzer as a user space

4031
04:03:44,800 --> 04:03:47,279
application and this is a way to use the

4032
04:03:47,279 --> 04:03:49,439
linux usb gadget subsystem for fuzzing

4033
04:03:49,439 --> 04:03:52,080
for physical fuzzing of usb hosts now

4034
04:03:52,080 --> 04:03:54,160
the problem is that we need hardware

4035
04:03:54,160 --> 04:03:55,120
right

4036
04:03:55,120 --> 04:03:56,720
and is there any way we can get rid of

4037
04:03:56,720 --> 04:03:59,359
the hardware as it turns out there is

4038
04:03:59,359 --> 04:04:01,120
linux actually provides a solution to

4039
04:04:01,120 --> 04:04:03,120
this and this solution is called the

4040
04:04:03,120 --> 04:04:04,560
damage drivers

4041
04:04:04,560 --> 04:04:06,720
so essentially linux has virtual host

4042
04:04:06,720 --> 04:04:08,560
and device controllers that are

4043
04:04:08,560 --> 04:04:10,239
connected to each other within the same

4044
04:04:10,239 --> 04:04:11,199
kernel

4045
04:04:11,199 --> 04:04:13,840
so previously we had the gadget part of

4046
04:04:13,840 --> 04:04:15,680
the stack running on the linux based

4047
04:04:15,680 --> 04:04:17,199
board and the host part of the stack

4048
04:04:17,199 --> 04:04:19,359
running on a separate host device but

4049
04:04:19,359 --> 04:04:22,080
here we can actually run both parts of

4050
04:04:22,080 --> 04:04:23,680
the stack on the same device or like

4051
04:04:23,680 --> 04:04:25,760
within the same kernel so this all would

4052
04:04:25,760 --> 04:04:28,319
be running within the same environment

4053
04:04:28,319 --> 04:04:30,080
and this is actually the key slide of my

4054
04:04:30,080 --> 04:04:31,680
talk so

4055
04:04:31,680 --> 04:04:33,520
we have our fuzzer running as a

4056
04:04:33,520 --> 04:04:35,120
eurospace application

4057
04:04:35,120 --> 04:04:37,760
we use row gadget to emulate arbitrary

4058
04:04:37,760 --> 04:04:40,880
usb devices we use the damage drivers so

4059
04:04:40,880 --> 04:04:43,359
that the usb device devices this fuzzer

4060
04:04:43,359 --> 04:04:44,880
emulates they're going to be connecting

4061
04:04:44,880 --> 04:04:46,640
to the very same kernel the fuzzer is

4062
04:04:46,640 --> 04:04:47,760
running on

4063
04:04:47,760 --> 04:04:49,760
and this way you can do fuzzing inside

4064
04:04:49,760 --> 04:04:52,479
the virtual machine or inside you can

4065
04:04:52,479 --> 04:04:54,399
take an android phone and you can just

4066
04:04:54,399 --> 04:04:56,800
run raw gadget and virtual damage

4067
04:04:56,800 --> 04:04:58,560
drivers inside

4068
04:04:58,560 --> 04:05:00,319
and you don't need any external hardware

4069
04:05:00,319 --> 04:05:01,840
you're going to be fuzzing on an android

4070
04:05:01,840 --> 04:05:03,760
phone internally and you're going to be

4071
04:05:03,760 --> 04:05:05,920
reaching usb drivers from from within

4072
04:05:05,920 --> 04:05:07,520
the kernel

4073
04:05:07,520 --> 04:05:09,120
right

4074
04:05:09,120 --> 04:05:11,279
all right and yeah this this was the

4075
04:05:11,279 --> 04:05:13,840
approach that they ended up using and

4076
04:05:13,840 --> 04:05:15,279
i actually integrated this approach into

4077
04:05:15,279 --> 04:05:18,000
syscaller syscaller is a kernel fuzzer

4078
04:05:18,000 --> 04:05:20,319
that is developed by google and it was

4079
04:05:20,319 --> 04:05:22,560
initially developed to target the linux

4080
04:05:22,560 --> 04:05:24,160
kernel but right now it targets a bunch

4081
04:05:24,160 --> 04:05:25,520
of different kernels

4082
04:05:25,520 --> 04:05:27,520
and it has a dashboard you can check out

4083
04:05:27,520 --> 04:05:29,120
the dashboard the dashboard shows

4084
04:05:29,120 --> 04:05:31,040
thousands of bugs that this fuzzer has

4085
04:05:31,040 --> 04:05:32,800
found and all of them are public you can

4086
04:05:32,800 --> 04:05:34,319
check out debug you can check the buck

4087
04:05:34,319 --> 04:05:36,000
report you can check out the zero

4088
04:05:36,000 --> 04:05:38,319
producers so essentially

4089
04:05:38,319 --> 04:05:40,720
dc programs that you can run to trigger

4090
04:05:40,720 --> 04:05:42,560
a particular bug

4091
04:05:42,560 --> 04:05:45,120
and i integrated usb fusing into cisco

4092
04:05:45,120 --> 04:05:45,920
and

4093
04:05:45,920 --> 04:05:48,560
so far it is found over 300 bucks in

4094
04:05:48,560 --> 04:05:50,160
different parts of the linux usb

4095
04:05:50,160 --> 04:05:52,160
subsystem some of them are in drivers

4096
04:05:52,160 --> 04:05:54,080
and a few of them are in the usb core

4097
04:05:54,080 --> 04:05:55,520
layer

4098
04:05:55,520 --> 04:05:57,520
and the only thing that i failed to do

4099
04:05:57,520 --> 04:05:58,399
so far

4100
04:05:58,399 --> 04:06:01,120
is to actually exploit a linux or

4101
04:06:01,120 --> 04:06:04,080
android device over usb so there are 300

4102
04:06:04,080 --> 04:06:06,160
bucks and these bugs affect some of the

4103
04:06:06,160 --> 04:06:07,760
drivers but not all

4104
04:06:07,760 --> 04:06:09,760
all of these drivers are present on an

4105
04:06:09,760 --> 04:06:12,720
actual linux on for example in ubuntu

4106
04:06:12,720 --> 04:06:13,600
and

4107
04:06:13,600 --> 04:06:15,920
when it comes to android android also

4108
04:06:15,920 --> 04:06:18,239
restricts the set of enabled drivers

4109
04:06:18,239 --> 04:06:20,880
severely so mainly maybe only a few of

4110
04:06:20,880 --> 04:06:22,399
the bugs they actually affect android

4111
04:06:22,399 --> 04:06:24,160
but the ones that do affect android i

4112
04:06:24,160 --> 04:06:26,880
failed to find a way to exploit them at

4113
04:06:26,880 --> 04:06:29,120
least so far

4114
04:06:29,120 --> 04:06:31,439
now i want to get to the final part of

4115
04:06:31,439 --> 04:06:33,120
the talk which is i think this is the

4116
04:06:33,120 --> 04:06:34,880
most the most awesome part

4117
04:06:34,880 --> 04:06:36,000
so first

4118
04:06:36,000 --> 04:06:38,160
when using his caller to fuss the kernel

4119
04:06:38,160 --> 04:06:40,080
whenever c scholar finds a buck it

4120
04:06:40,080 --> 04:06:42,239
generates a reproducer for this block

4121
04:06:42,239 --> 04:06:44,720
and a reproducer is essentially a

4122
04:06:44,720 --> 04:06:46,640
sequence of actions

4123
04:06:46,640 --> 04:06:49,359
the father can do or like the the

4124
04:06:49,359 --> 04:06:51,279
the father can do to trigger a

4125
04:06:51,279 --> 04:06:53,359
particular bug

4126
04:06:53,359 --> 04:06:54,479
so

4127
04:06:54,479 --> 04:06:57,279
syscaller has a utility a tool to run

4128
04:06:57,279 --> 04:06:59,680
these reproducers it's called csx proc

4129
04:06:59,680 --> 04:07:00,880
so essentially when this caller

4130
04:07:00,880 --> 04:07:02,880
generates reproducer you can run csx

4131
04:07:02,880 --> 04:07:03,680
proc

4132
04:07:03,680 --> 04:07:06,000
and trigger the bug and it works with

4133
04:07:06,000 --> 04:07:07,920
usb as well because we're doing the

4134
04:07:07,920 --> 04:07:09,840
fuzzing in vm we take in the reproducer

4135
04:07:09,840 --> 04:07:10,880
with fuzz

4136
04:07:10,880 --> 04:07:13,279
we run it in the semi-vm and we can

4137
04:07:13,279 --> 04:07:14,239
trigger

4138
04:07:14,239 --> 04:07:16,800
the debug that the father has found

4139
04:07:16,800 --> 04:07:18,399
but the key thing here is that the

4140
04:07:18,399 --> 04:07:19,840
interface between user space and the

4141
04:07:19,840 --> 04:07:22,640
kernel is stable and it is stable in the

4142
04:07:22,640 --> 04:07:25,760
way that we can use any type of a device

4143
04:07:25,760 --> 04:07:28,080
controller or device controller driver

4144
04:07:28,080 --> 04:07:30,160
so which means we can take raspberry pi

4145
04:07:30,160 --> 04:07:32,160
zero so we can take the reproducer that

4146
04:07:32,160 --> 04:07:34,720
was generated inside the virtual machine

4147
04:07:34,720 --> 04:07:37,279
we can copy it onto raspberry pi zero

4148
04:07:37,279 --> 04:07:39,120
and we can plug this raspberry pi zero

4149
04:07:39,120 --> 04:07:41,040
into the physical host

4150
04:07:41,040 --> 04:07:44,880
and this way we can replay the

4151
04:07:44,880 --> 04:07:47,199
usb communications we generated in a

4152
04:07:47,199 --> 04:07:50,560
virtual machine with physical hardware

4153
04:07:50,560 --> 04:07:51,520
right

4154
04:07:51,520 --> 04:07:53,439
okay actually let me let me try to show

4155
04:07:53,439 --> 04:07:55,199
you do you still have five minutes this

4156
04:07:55,199 --> 04:07:57,359
should be enough for the demo so here i

4157
04:07:57,359 --> 04:08:00,080
have a separate linux laptop

4158
04:08:00,080 --> 04:08:01,040
all right

4159
04:08:01,040 --> 04:08:02,800
and i also have raspberry pi zero so

4160
04:08:02,800 --> 04:08:03,920
what i'm going to do is i'm going to

4161
04:08:03,920 --> 04:08:05,359
plug this raspberry pi zero into the

4162
04:08:05,359 --> 04:08:09,040
laptop and let it boot

4163
04:08:12,560 --> 04:08:14,720
so

4164
04:08:14,720 --> 04:08:16,960
what i'm going to do now is it's it's

4165
04:08:16,960 --> 04:08:18,399
this demo is kind of weird because i

4166
04:08:18,399 --> 04:08:20,159
need to show you the screens of both my

4167
04:08:20,159 --> 04:08:21,600
laptop and the laptop i'm trying to

4168
04:08:21,600 --> 04:08:24,159
attack so i'm going to be using a

4169
04:08:24,159 --> 04:08:25,600
web camera

4170
04:08:25,600 --> 04:08:26,399
to

4171
04:08:26,399 --> 04:08:28,000
record the screen of the laptop i'm

4172
04:08:28,000 --> 04:08:31,399
trying to attack

4173
04:08:43,120 --> 04:08:47,159
okay let's see if this works

4174
04:08:53,359 --> 04:08:55,040
okay we can see something

4175
04:08:55,040 --> 04:08:57,840
all right so this laptop is running

4176
04:08:57,840 --> 04:09:00,239
essentially it's ubuntu kernel and the

4177
04:09:00,239 --> 04:09:03,439
kernel version is quite new

4178
04:09:03,439 --> 04:09:06,239
we see it it's from april 22nd so

4179
04:09:06,239 --> 04:09:08,560
essentially it's one month old

4180
04:09:08,560 --> 04:09:10,560
all right so what i'm going to do is on

4181
04:09:10,560 --> 04:09:12,000
this laptop where i plugged in the

4182
04:09:12,000 --> 04:09:14,720
raspberry pi 0 i'm going to run the dmsh

4183
04:09:14,720 --> 04:09:17,600
minus w command

4184
04:09:17,600 --> 04:09:19,840
it's having trouble to focus

4185
04:09:19,840 --> 04:09:21,439
the message minus w command which is

4186
04:09:21,439 --> 04:09:23,840
going to show us the kernel lock in real

4187
04:09:23,840 --> 04:09:24,800
time

4188
04:09:24,800 --> 04:09:28,239
right and

4189
04:09:28,239 --> 04:09:30,560
i'm not actually so for this demo i'm

4190
04:09:30,560 --> 04:09:33,279
not running the simple the the most

4191
04:09:33,279 --> 04:09:35,040
basic version of raspberry pi zero i'm

4192
04:09:35,040 --> 04:09:36,800
running the version with wi-fi and it's

4193
04:09:36,800 --> 04:09:38,640
called raspberry pi zero w

4194
04:09:38,640 --> 04:09:39,520
and

4195
04:09:39,520 --> 04:09:41,279
i configure this board in a way that

4196
04:09:41,279 --> 04:09:43,279
when i plug it in it boots and it sets

4197
04:09:43,279 --> 04:09:45,520
up a wi-fi point so instead of using a

4198
04:09:45,520 --> 04:09:47,760
bunch of wires to connect to that by

4199
04:09:47,760 --> 04:09:49,760
zero i'm going to be using a wi-fi

4200
04:09:49,760 --> 04:09:51,520
connection i'm just gonna ssh onto the

4201
04:09:51,520 --> 04:09:52,960
board

4202
04:09:52,960 --> 04:09:54,640
okay now let's see

4203
04:09:54,640 --> 04:09:57,359
if we get if we have the

4204
04:09:57,359 --> 04:10:00,159
wi-fi connection so on some technical

4205
04:10:00,159 --> 04:10:02,479
conferences actually this demo has a

4206
04:10:02,479 --> 04:10:05,040
problem uh we do have it because wi-fi

4207
04:10:05,040 --> 04:10:05,920
is being

4208
04:10:05,920 --> 04:10:07,279
attacked all the time it's very hard to

4209
04:10:07,279 --> 04:10:10,080
connect but

4210
04:10:10,080 --> 04:10:12,479
it worked

4211
04:10:13,600 --> 04:10:14,960
all right

4212
04:10:14,960 --> 04:10:17,760
now we have ssh onto raspberry pi zero

4213
04:10:17,760 --> 04:10:19,600
so on the left

4214
04:10:19,600 --> 04:10:21,199
we're gonna see the part of the screen

4215
04:10:21,199 --> 04:10:23,600
that is recording the kernel lock of the

4216
04:10:23,600 --> 04:10:24,800
device we're trying to attack and on the

4217
04:10:24,800 --> 04:10:26,159
right we have the connection onto the

4218
04:10:26,159 --> 04:10:28,159
raspberry pi zero that is plugged into

4219
04:10:28,159 --> 04:10:29,279
this device

4220
04:10:29,279 --> 04:10:31,040
so first we need to insert the raw

4221
04:10:31,040 --> 04:10:33,279
gadget module and now what we're going

4222
04:10:33,279 --> 04:10:36,239
to do i have collected the reproducers

4223
04:10:36,239 --> 04:10:38,479
for the usb bugs that's this color found

4224
04:10:38,479 --> 04:10:41,278
and i have them

4225
04:10:42,399 --> 04:10:44,880
right here so this this

4226
04:10:44,880 --> 04:10:46,800
this is a special syntax that cisco uses

4227
04:10:46,800 --> 04:10:48,960
to describe reproducers so essentially

4228
04:10:48,960 --> 04:10:50,640
csusb connect

4229
04:10:50,640 --> 04:10:52,239
means that this

4230
04:10:52,239 --> 04:10:54,560
particular line is going to

4231
04:10:54,560 --> 04:10:57,680
emulate a type of a usb device and the

4232
04:10:57,680 --> 04:10:59,359
type of the device is described by all

4233
04:10:59,359 --> 04:11:00,720
of these arguments

4234
04:11:00,720 --> 04:11:02,399
so what i'm going to do is i have this

4235
04:11:02,399 --> 04:11:04,080
run script and this route script

4236
04:11:04,080 --> 04:11:06,159
essentially runs sees exact proc that i

4237
04:11:06,159 --> 04:11:07,199
showed

4238
04:11:07,199 --> 04:11:10,000
here so i'm gonna do run

4239
04:11:10,000 --> 04:11:13,680
reprose csbot

4240
04:11:13,840 --> 04:11:15,279
and it takes a little bit of time to

4241
04:11:15,279 --> 04:11:17,920
initialize so essentially what is this

4242
04:11:17,920 --> 04:11:21,199
is going to do i have about 300 391's to

4243
04:11:21,199 --> 04:11:24,000
be exact 391 different

4244
04:11:24,000 --> 04:11:26,319
usb devices that will be

4245
04:11:26,319 --> 04:11:28,159
replayed one after each other and this

4246
04:11:28,159 --> 04:11:30,000
raspberry pi 0 is going to be connecting

4247
04:11:30,000 --> 04:11:32,840
these devices to our physical host

4248
04:11:32,840 --> 04:11:37,199
and let's hope that this works

4249
04:11:43,600 --> 04:11:45,760
okay now it's started so as you can see

4250
04:11:45,760 --> 04:11:48,239
on the right we have the log from the

4251
04:11:48,239 --> 04:11:50,239
from the

4252
04:11:50,239 --> 04:11:52,399
part of the code that is emulating usb

4253
04:11:52,399 --> 04:11:54,560
devices and on the left we can actually

4254
04:11:54,560 --> 04:11:56,960
see in the d message that

4255
04:11:56,960 --> 04:11:59,520
these new devices are being connected

4256
04:11:59,520 --> 04:12:02,159
and if we wait for some time i'm not

4257
04:12:02,159 --> 04:12:03,840
sure

4258
04:12:03,840 --> 04:12:05,520
yeah at some point i think this

4259
04:12:05,520 --> 04:12:07,279
particular

4260
04:12:07,279 --> 04:12:08,880
this particular sequence of crashes so

4261
04:12:08,880 --> 04:12:10,560
at this point you can see that the the

4262
04:12:10,560 --> 04:12:12,880
messages stopped that usually means that

4263
04:12:12,880 --> 04:12:15,439
we managed to crash the usb stack that

4264
04:12:15,439 --> 04:12:17,439
is running on the linux laptop and if

4265
04:12:17,439 --> 04:12:19,040
you could look

4266
04:12:19,040 --> 04:12:21,279
look

4267
04:12:22,640 --> 04:12:26,000
i don't have the mouse here

4268
04:12:26,159 --> 04:12:28,239
okay okay now we got something so

4269
04:12:28,239 --> 04:12:30,399
actually the mouse is broken right now i

4270
04:12:30,399 --> 04:12:32,080
mean the the touchpad broke because

4271
04:12:32,080 --> 04:12:33,760
touchpad is connected over usb and will

4272
04:12:33,760 --> 04:12:36,239
likely kill the usb stack on the machine

4273
04:12:36,239 --> 04:12:38,319
so you can see a part of the stack trace

4274
04:12:38,319 --> 04:12:41,199
that is that was triggered and

4275
04:12:41,199 --> 04:12:43,120
yeah this is just some generic stuff so

4276
04:12:43,120 --> 04:12:44,560
probably something something something

4277
04:12:44,560 --> 04:12:45,840
bad happened

4278
04:12:45,840 --> 04:12:47,279
the problem with running reproducers

4279
04:12:47,279 --> 04:12:48,720
like this is that some of them corrupt

4280
04:12:48,720 --> 04:12:51,439
memory and without running a memory

4281
04:12:51,439 --> 04:12:53,040
corrupt detector a memory corruption

4282
04:12:53,040 --> 04:12:55,520
detector on the device it's

4283
04:12:55,520 --> 04:12:58,159
hard to tell what exactly happened

4284
04:12:58,159 --> 04:12:59,840
all right we're running very long time

4285
04:12:59,840 --> 04:13:01,439
so let me let me

4286
04:13:01,439 --> 04:13:04,239
quickly finish the presentation

4287
04:13:04,239 --> 04:13:06,640
yeah this was the demo so it worked

4288
04:13:06,640 --> 04:13:09,279
all right so the summary is that i try

4289
04:13:09,279 --> 04:13:10,479
to attack

4290
04:13:10,479 --> 04:13:12,640
android and linux devices over usb and i

4291
04:13:12,640 --> 04:13:14,720
tried to find bugs in linux kernel

4292
04:13:14,720 --> 04:13:15,760
drivers

4293
04:13:15,760 --> 04:13:17,520
so the result of the work is that i used

4294
04:13:17,520 --> 04:13:19,439
row gadget and i use the dummy virtual

4295
04:13:19,439 --> 04:13:21,439
controllers to that allow

4296
04:13:21,439 --> 04:13:23,279
fuzzing either or in a virtual machine

4297
04:13:23,279 --> 04:13:25,439
and on device and this was integrated in

4298
04:13:25,439 --> 04:13:28,159
this color and we managed to i managed

4299
04:13:28,159 --> 04:13:30,479
to find a way to run this reproducers by

4300
04:13:30,479 --> 04:13:33,279
hardware without any additional hassle

4301
04:13:33,279 --> 04:13:35,439
and yeah by using raspberry pi 0 and row

4302
04:13:35,439 --> 04:13:38,080
gadget we get a very cheap tool for usb

4303
04:13:38,080 --> 04:13:40,960
attacks so essentially

4304
04:13:40,960 --> 04:13:42,720
phase density costs about 80 bucks this

4305
04:13:42,720 --> 04:13:44,720
tool costs about larger pi zero only is

4306
04:13:44,720 --> 04:13:46,720
only for ten dollars you can buy

4307
04:13:46,720 --> 04:13:48,239
and finally the one final not very

4308
04:13:48,239 --> 04:13:50,000
important that cisco is hiring so just

4309
04:13:50,000 --> 04:13:52,159
in case you want to work on linux kernel

4310
04:13:52,159 --> 04:13:54,479
fuzzing or linux kernel security in

4311
04:13:54,479 --> 04:13:56,880
general there is a team and at google

4312
04:13:56,880 --> 04:13:59,520
and they are here in the munich office

4313
04:13:59,520 --> 04:14:00,800
and they are looking for a new team

4314
04:14:00,800 --> 04:14:02,399
member so if you want to work on cisco

4315
04:14:02,399 --> 04:14:05,359
this is the place you can apply

4316
04:14:05,359 --> 04:14:08,000
so with this thank you and we have no

4317
04:14:08,000 --> 04:14:09,439
time for questions so just in case you

4318
04:14:09,439 --> 04:14:11,520
can catch me at the break and ask

4319
04:14:11,520 --> 04:14:14,520
qualifications

4320
04:14:23,680 --> 04:14:25,920
i'm yeah no it's working um thank you

4321
04:14:25,920 --> 04:14:28,479
andre so um we don't really have time

4322
04:14:28,479 --> 04:14:30,319
for questions on the audience but um

4323
04:14:30,319 --> 04:14:32,159
maybe you can yeah answer a few

4324
04:14:32,159 --> 04:14:34,080
questions outside yeah yeah i'm going to

4325
04:14:34,080 --> 04:14:35,439
be right outside right now and so you

4326
04:14:35,439 --> 04:14:37,040
can't ask questions and our next talk

4327
04:14:37,040 --> 04:14:38,159
here will be

4328
04:14:38,159 --> 04:14:39,279
regarding

4329
04:14:39,279 --> 04:14:42,159
building an ica ics firing range within

4330
04:14:42,159 --> 04:14:45,760
your home kitchen with moritz and

4331
04:14:45,760 --> 04:14:48,640
nico so stay tuned in five minutes we'll

4332
04:14:48,640 --> 04:14:51,520
be back

4333
04:14:51,520 --> 04:14:53,359
cool everything works

4334
04:14:53,359 --> 04:14:55,439
yeah it's

4335
04:14:55,439 --> 04:14:58,319
you can take this off now right

4336
04:14:58,319 --> 04:15:02,519
around a little bit low on time

4337
04:15:17,520 --> 04:15:20,760
thank you

4338
04:15:45,520 --> 04:15:48,520
is

4339
04:16:12,000 --> 04:16:15,000
um

4340
04:16:29,040 --> 04:16:32,040
um

4341
04:16:50,239 --> 04:16:53,239
okay

4342
04:17:02,000 --> 04:17:04,399
okay um so we closed the door i think we

4343
04:17:04,399 --> 04:17:06,560
can start nico and moritz

4344
04:17:06,560 --> 04:17:08,000
we'll be talking about the kitchen

4345
04:17:08,000 --> 04:17:11,199
within series or something no let's see

4346
04:17:11,199 --> 04:17:13,520
let's see um thanks everybody for for

4347
04:17:13,520 --> 04:17:15,520
being here and thanks for having us um

4348
04:17:15,520 --> 04:17:17,199
we're going to present in the next 30

4349
04:17:17,199 --> 04:17:19,040
minutes a project that have been we've

4350
04:17:19,040 --> 04:17:20,800
been working on moritz and i for the

4351
04:17:20,800 --> 04:17:22,720
last year and a half

4352
04:17:22,720 --> 04:17:24,640
and i was building a firing range for

4353
04:17:24,640 --> 04:17:26,640
industrial control systems

4354
04:17:26,640 --> 04:17:29,120
um we did that in our kitchen because of

4355
04:17:29,120 --> 04:17:31,359
corona so there was no way to do it in

4356
04:17:31,359 --> 04:17:33,439
the office and that's why that's that's

4357
04:17:33,439 --> 04:17:35,760
that's why um we're going to you can see

4358
04:17:35,760 --> 04:17:37,359
we didn't bring so we actually created a

4359
04:17:37,359 --> 04:17:39,279
model we didn't bring that but we're

4360
04:17:39,279 --> 04:17:40,960
going to show some

4361
04:17:40,960 --> 04:17:43,279
some videos of it later and then for

4362
04:17:43,279 --> 04:17:44,640
everybody to take away as well the

4363
04:17:44,640 --> 04:17:45,920
lessons that we learned so if you're

4364
04:17:45,920 --> 04:17:47,920
planning to build something similar in

4365
04:17:47,920 --> 04:17:50,239
your kitchen then you know what to

4366
04:17:50,239 --> 04:17:52,640
do and not to do hopefully

4367
04:17:52,640 --> 04:17:54,880
um so roughly that's the the agenda for

4368
04:17:54,880 --> 04:17:57,520
the next 30 minutes um we

4369
04:17:57,520 --> 04:17:58,800
try to get everybody on the same page

4370
04:17:58,800 --> 04:18:00,560
what we understand is firing ranges what

4371
04:18:00,560 --> 04:18:03,359
we understand as ot or operational uh

4372
04:18:03,359 --> 04:18:05,520
technology then mods will talk us

4373
04:18:05,520 --> 04:18:07,439
through how the building of the ics fire

4374
04:18:07,439 --> 04:18:10,080
english actually um unfolded we're going

4375
04:18:10,080 --> 04:18:11,600
to demonstrate it and then the lessons

4376
04:18:11,600 --> 04:18:12,960
learned and then at the end the

4377
04:18:12,960 --> 04:18:14,560
questions

4378
04:18:14,560 --> 04:18:18,319
about us i'm niko i'm the red team lead

4379
04:18:18,319 --> 04:18:19,840
for nvizo

4380
04:18:19,840 --> 04:18:22,159
i've had my fair share in ig security

4381
04:18:22,159 --> 04:18:24,560
and i focus on ot security as well in

4382
04:18:24,560 --> 04:18:26,479
the past two years

4383
04:18:26,479 --> 04:18:28,479
and most of you

4384
04:18:28,479 --> 04:18:30,720
my name is summers i'm part of the

4385
04:18:30,720 --> 04:18:32,640
software and security team and r d team

4386
04:18:32,640 --> 04:18:36,080
at nvizo and i'm an iot and ics

4387
04:18:36,080 --> 04:18:37,760
enthusiast and i try and get a hold of

4388
04:18:37,760 --> 04:18:39,520
as many devices as i can try and break

4389
04:18:39,520 --> 04:18:40,960
them

4390
04:18:40,960 --> 04:18:43,120
um a few words about nvizo

4391
04:18:43,120 --> 04:18:44,720
it's it's a company that's roughly nine

4392
04:18:44,720 --> 04:18:46,800
years old originally founded in in

4393
04:18:46,800 --> 04:18:49,040
brussels a noun office in frankfurt in

4394
04:18:49,040 --> 04:18:51,120
munich um

4395
04:18:51,120 --> 04:18:53,439
we have 150 colleagues at the moment so

4396
04:18:53,439 --> 04:18:56,159
it's um it was just a very small subset

4397
04:18:56,159 --> 04:18:58,000
obviously um but what's interesting is

4398
04:18:58,000 --> 04:19:00,399
that in viso it's dedicated to invest 10

4399
04:19:00,399 --> 04:19:02,640
of the revenue into r d and that is how

4400
04:19:02,640 --> 04:19:04,319
we can fund this project and the time

4401
04:19:04,319 --> 04:19:06,880
that went into it um so that's um that's

4402
04:19:06,880 --> 04:19:09,120
how good that that happens

4403
04:19:09,120 --> 04:19:10,880
now firing ranges um what do we

4404
04:19:10,880 --> 04:19:12,800
understand as fine range of course it's

4405
04:19:12,800 --> 04:19:14,840
it's somewhat a controlled interactive

4406
04:19:14,840 --> 04:19:17,040
environment um it's an abstraction of a

4407
04:19:17,040 --> 04:19:18,720
real environment think of a toy train

4408
04:19:18,720 --> 04:19:20,640
for example instead of having the real

4409
04:19:20,640 --> 04:19:22,479
train of course to play with it should

4410
04:19:22,479 --> 04:19:24,319
be as realistic as possible and that's

4411
04:19:24,319 --> 04:19:26,080
what we try to do as well so you will

4412
04:19:26,080 --> 04:19:28,479
see that we built a a model of a basket

4413
04:19:28,479 --> 04:19:30,319
bridge so a bridge that has leaves that

4414
04:19:30,319 --> 04:19:32,479
are lifting so we tried to move letters

4415
04:19:32,479 --> 04:19:35,279
as closely to the real thing as possible

4416
04:19:35,279 --> 04:19:37,359
it should be reusable so we want to use

4417
04:19:37,359 --> 04:19:39,520
it for trying out stuff um in our

4418
04:19:39,520 --> 04:19:41,359
context it's i.t security so we want to

4419
04:19:41,359 --> 04:19:43,120
try out attacks for example or defense

4420
04:19:43,120 --> 04:19:44,479
mechanisms

4421
04:19:44,479 --> 04:19:46,479
and of course if we run an attack

4422
04:19:46,479 --> 04:19:48,080
we should be able to do it again and

4423
04:19:48,080 --> 04:19:50,319
again and it should have that playground

4424
04:19:50,319 --> 04:19:51,680
factor so it should be something where

4425
04:19:51,680 --> 04:19:53,040
we can approach things from different

4426
04:19:53,040 --> 04:19:54,640
angles and just see what happens if we

4427
04:19:54,640 --> 04:19:57,680
try that way and so on

4428
04:19:57,680 --> 04:19:58,640
why

4429
04:19:58,640 --> 04:20:00,479
do we need a fire range

4430
04:20:00,479 --> 04:20:02,239
so the first that comes to mind and that

4431
04:20:02,239 --> 04:20:03,680
was our motivation as well at the

4432
04:20:03,680 --> 04:20:05,680
beginning is for training purposes

4433
04:20:05,680 --> 04:20:08,319
so we've done a lot of id security ot

4434
04:20:08,319 --> 04:20:10,560
security was fairly new to us back then

4435
04:20:10,560 --> 04:20:12,239
so what we wanted to do is to train our

4436
04:20:12,239 --> 04:20:14,159
people as well and ourselves on how to

4437
04:20:14,159 --> 04:20:16,319
approach ot next networks and how to do

4438
04:20:16,319 --> 04:20:18,479
security assessments on those

4439
04:20:18,479 --> 04:20:20,640
the the lab itself the way it turned out

4440
04:20:20,640 --> 04:20:22,640
is very suitable for awareness trainings

4441
04:20:22,640 --> 04:20:24,239
as well because it's very visual so if

4442
04:20:24,239 --> 04:20:26,159
you run an attack for example then you

4443
04:20:26,159 --> 04:20:28,080
can make some some lights stop blinking

4444
04:20:28,080 --> 04:20:29,760
or the bridge leaves are not moving

4445
04:20:29,760 --> 04:20:31,040
anymore something else is happening

4446
04:20:31,040 --> 04:20:32,720
there's a buzzer going off so for

4447
04:20:32,720 --> 04:20:35,040
awareness trainings for example um very

4448
04:20:35,040 --> 04:20:37,840
useful for testing if you had any o2

4449
04:20:37,840 --> 04:20:41,439
components for example pll plc's that

4450
04:20:41,439 --> 04:20:43,279
you want to try out that you've never

4451
04:20:43,279 --> 04:20:45,279
played with before you just plug it into

4452
04:20:45,279 --> 04:20:47,680
the lab or the firing range configured

4453
04:20:47,680 --> 04:20:49,760
and then make it work and then last but

4454
04:20:49,760 --> 04:20:51,199
not least for further development of

4455
04:20:51,199 --> 04:20:53,359
tools for example for forensics

4456
04:20:53,359 --> 04:20:54,960
so we actually used that lab for

4457
04:20:54,960 --> 04:20:57,439
forensic training as well which

4458
04:20:57,439 --> 04:20:59,279
you'll see then at the end as well very

4459
04:20:59,279 --> 04:21:00,720
briefly

4460
04:21:00,720 --> 04:21:01,520
now

4461
04:21:01,520 --> 04:21:04,159
ot and ics operational technology are

4462
04:21:04,159 --> 04:21:05,520
computing systems that are used to

4463
04:21:05,520 --> 04:21:08,080
manage industrial operations for example

4464
04:21:08,080 --> 04:21:10,399
the manufacturing process and the subset

4465
04:21:10,399 --> 04:21:12,720
of that uh industrial control system so

4466
04:21:12,720 --> 04:21:14,640
the integration of hardware and software

4467
04:21:14,640 --> 04:21:16,800
components to control processes for

4468
04:21:16,800 --> 04:21:19,120
automation and humanitarian institute

4469
04:21:19,120 --> 04:21:20,560
mentalization

4470
04:21:20,560 --> 04:21:22,399
we do see two candidates here

4471
04:21:22,399 --> 04:21:23,840
on the slides on the right hand side you

4472
04:21:23,840 --> 04:21:26,640
see a programmer programmable logic

4473
04:21:26,640 --> 04:21:28,159
controller it's very difficult for me to

4474
04:21:28,159 --> 04:21:30,720
say that plcs which is essentially the

4475
04:21:30,720 --> 04:21:32,880
core unit if you will of some automation

4476
04:21:32,880 --> 04:21:36,080
process so it's it's the cpu that that

4477
04:21:36,080 --> 04:21:37,359
runs

4478
04:21:37,359 --> 04:21:39,279
was connected to to sensors and

4479
04:21:39,279 --> 04:21:40,800
actuators that drives for example

4480
04:21:40,800 --> 04:21:42,880
conveyor belts and so on and then on the

4481
04:21:42,880 --> 04:21:44,880
other side that's an hmi human machine

4482
04:21:44,880 --> 04:21:46,880
interface where the operators normally

4483
04:21:46,880 --> 04:21:49,359
oversee the process they can start stop

4484
04:21:49,359 --> 04:21:51,680
processes or react on errors and and so

4485
04:21:51,680 --> 04:21:53,760
on so it's just the interaction with the

4486
04:21:53,760 --> 04:21:56,000
machinery behind it

4487
04:21:56,000 --> 04:21:59,840
now um i bet you're all familiar with it

4488
04:21:59,840 --> 04:22:02,159
the what many might not be familiar with

4489
04:22:02,159 --> 04:22:03,520
is that there's a difference between

4490
04:22:03,520 --> 04:22:05,199
security requirements

4491
04:22:05,199 --> 04:22:07,920
for operational technology and i.t

4492
04:22:07,920 --> 04:22:10,319
whereas in iit normally you would

4493
04:22:10,319 --> 04:22:12,319
probably argue that confidentiality is

4494
04:22:12,319 --> 04:22:14,159
has high priority so you don't want a

4495
04:22:14,159 --> 04:22:16,239
customer database for example to leak to

4496
04:22:16,239 --> 04:22:18,399
the internet that would be very severe

4497
04:22:18,399 --> 04:22:20,720
of course if you shut down that database

4498
04:22:20,720 --> 04:22:22,479
i um

4499
04:22:22,479 --> 04:22:24,399
in regard to availability then that can

4500
04:22:24,399 --> 04:22:25,680
have some impact but it's probably not

4501
04:22:25,680 --> 04:22:28,239
on that same level whereas in ot it's

4502
04:22:28,239 --> 04:22:30,239
very different confidentiality usually

4503
04:22:30,239 --> 04:22:31,840
doesn't play a big factor but

4504
04:22:31,840 --> 04:22:34,800
availability does so if you think about

4505
04:22:34,800 --> 04:22:36,640
power plants for example if they just

4506
04:22:36,640 --> 04:22:38,239
switch off or steal

4507
04:22:38,239 --> 04:22:40,159
a steel mill if that

4508
04:22:40,159 --> 04:22:41,840
is corrupted somehow the process and you

4509
04:22:41,840 --> 04:22:44,399
need to restart that might take days so

4510
04:22:44,399 --> 04:22:46,239
there's a financial impact obviously but

4511
04:22:46,239 --> 04:22:48,640
also the the production behind just the

4512
04:22:48,640 --> 04:22:51,040
delay it takes to get every everything

4513
04:22:51,040 --> 04:22:53,760
back up and starting so availability is

4514
04:22:53,760 --> 04:22:55,600
key

4515
04:22:55,600 --> 04:22:57,760
now attacks against ics this is the

4516
04:22:57,760 --> 04:23:00,479
sun's ics cyber kill chain it usually

4517
04:23:00,479 --> 04:23:02,000
comes in what

4518
04:23:02,000 --> 04:23:03,760
as far as we know it comes in two stages

4519
04:23:03,760 --> 04:23:05,439
the first stage usually goes against the

4520
04:23:05,439 --> 04:23:07,760
it network so the way we know it there's

4521
04:23:07,760 --> 04:23:09,120
a resource development phase at the

4522
04:23:09,120 --> 04:23:10,800
beginning then delivery where for

4523
04:23:10,800 --> 04:23:12,640
example phishing emails are sent to

4524
04:23:12,640 --> 04:23:14,560
somebody working in the office

4525
04:23:14,560 --> 04:23:16,720
they click the attachment

4526
04:23:16,720 --> 04:23:19,120
the the payload installs

4527
04:23:19,120 --> 04:23:21,439
on the workstation ensures persistence

4528
04:23:21,439 --> 04:23:23,840
and establish c2 communication and then

4529
04:23:23,840 --> 04:23:26,800
the the adversary can act through the c2

4530
04:23:26,800 --> 04:23:30,000
channel and um yeah their objectives

4531
04:23:30,000 --> 04:23:32,560
whatever it may be now if the attack

4532
04:23:32,560 --> 04:23:34,880
goes against ot then this is also true

4533
04:23:34,880 --> 04:23:37,279
so we are that that stage where we have

4534
04:23:37,279 --> 04:23:40,319
a foothold on the the enterprise um we

4535
04:23:40,319 --> 04:23:42,960
then recon where is ot located we

4536
04:23:42,960 --> 04:23:45,120
identify possible jump servers or dmz

4537
04:23:45,120 --> 04:23:46,399
that we need to pass through in order to

4538
04:23:46,399 --> 04:23:48,720
get there once we're there we locate the

4539
04:23:48,720 --> 04:23:50,960
targets we develop capabilities testing

4540
04:23:50,960 --> 04:23:52,479
them so that might be payloads that we

4541
04:23:52,479 --> 04:23:54,640
want to download on plc's for example

4542
04:23:54,640 --> 04:23:56,800
then we download them install and

4543
04:23:56,800 --> 04:23:58,399
execute the attack which could be the

4544
04:23:58,399 --> 04:24:00,880
disruption of some manufacturing process

4545
04:24:00,880 --> 04:24:03,279
for example

4546
04:24:03,279 --> 04:24:04,880
the objectives

4547
04:24:04,880 --> 04:24:07,760
of those attackers are commonly either

4548
04:24:07,760 --> 04:24:09,279
the the permanent loss of view of

4549
04:24:09,279 --> 04:24:10,720
control for the operator so that they

4550
04:24:10,720 --> 04:24:12,399
can't see the process they can't

4551
04:24:12,399 --> 04:24:14,080
interact with it anymore it could be

4552
04:24:14,080 --> 04:24:16,479
temporary only for vm control again but

4553
04:24:16,479 --> 04:24:18,159
also safety which is a very important

4554
04:24:18,159 --> 04:24:19,359
factor and the same of course for

4555
04:24:19,359 --> 04:24:21,680
manipulation and the safety aspect is

4556
04:24:21,680 --> 04:24:23,680
also very different to what we have in

4557
04:24:23,680 --> 04:24:25,680
i.t there's rarely at least i don't know

4558
04:24:25,680 --> 04:24:26,880
of any attacks against i.t

4559
04:24:26,880 --> 04:24:28,720
infrastructure where you would say

4560
04:24:28,720 --> 04:24:30,880
safety was a concern safety of people

4561
04:24:30,880 --> 04:24:34,800
specifically and we had a case in 2017

4562
04:24:34,800 --> 04:24:37,359
um which happened in saudi arabia i

4563
04:24:37,359 --> 04:24:39,920
guess a power plant where they found a

4564
04:24:39,920 --> 04:24:42,239
malware that targeted safety equipment

4565
04:24:42,239 --> 04:24:44,560
it didn't succeed but the assumption is

4566
04:24:44,560 --> 04:24:46,479
that if it would have compromised those

4567
04:24:46,479 --> 04:24:48,000
safety systems

4568
04:24:48,000 --> 04:24:49,359
it would have then disabled some of the

4569
04:24:49,359 --> 04:24:50,640
procedures that would have triggered in

4570
04:24:50,640 --> 04:24:52,720
course of emergencies for example if gas

4571
04:24:52,720 --> 04:24:55,120
is leaking um into the outside then

4572
04:24:55,120 --> 04:24:56,960
those safety systems would prevent this

4573
04:24:56,960 --> 04:24:59,040
now if you modify or manipulate that

4574
04:24:59,040 --> 04:25:00,399
then you couldn't or you wouldn't

4575
04:25:00,399 --> 04:25:02,319
prevent it so this would not only be

4576
04:25:02,319 --> 04:25:03,600
then of course

4577
04:25:03,600 --> 04:25:06,800
um an issue for the um the the provider

4578
04:25:06,800 --> 04:25:08,239
here but also for everybody that lives

4579
04:25:08,239 --> 04:25:09,840
around the power plant if hazardous

4580
04:25:09,840 --> 04:25:13,279
gases are leaked to the outside

4581
04:25:13,279 --> 04:25:16,319
now morris is going to talk us through

4582
04:25:16,319 --> 04:25:19,279
our ics-5 range please right

4583
04:25:19,279 --> 04:25:20,479
thanks

4584
04:25:20,479 --> 04:25:22,640
so how did we actually go about building

4585
04:25:22,640 --> 04:25:25,520
this ics firing range well let me maybe

4586
04:25:25,520 --> 04:25:27,520
first start with uh what we had in mind

4587
04:25:27,520 --> 04:25:29,760
what were our driving motivation behind

4588
04:25:29,760 --> 04:25:31,920
building this so as niko pointed out we

4589
04:25:31,920 --> 04:25:33,520
have a difference in security

4590
04:25:33,520 --> 04:25:35,520
requirements in ot

4591
04:25:35,520 --> 04:25:37,600
comparing to i.t right

4592
04:25:37,600 --> 04:25:39,520
and we then have to adapt those

4593
04:25:39,520 --> 04:25:41,279
differences obviously into our

4594
04:25:41,279 --> 04:25:42,800
approaches to performing security

4595
04:25:42,800 --> 04:25:44,080
assessments right

4596
04:25:44,080 --> 04:25:44,960
so

4597
04:25:44,960 --> 04:25:47,199
most importantly what we have to do to

4598
04:25:47,199 --> 04:25:49,359
pay attention to is of course the safety

4599
04:25:49,359 --> 04:25:51,760
aspect we can never know really what is

4600
04:25:51,760 --> 04:25:54,720
the safety impact of of hacking a ot

4601
04:25:54,720 --> 04:25:57,439
device if we don't have accurate

4602
04:25:57,439 --> 04:25:59,040
depictions of the documentation of what

4603
04:25:59,040 --> 04:26:01,120
actually those devices do

4604
04:26:01,120 --> 04:26:03,279
so what we want to do and what we then

4605
04:26:03,279 --> 04:26:05,520
succeeded to do is to build a

4606
04:26:05,520 --> 04:26:07,199
playground where we can

4607
04:26:07,199 --> 04:26:09,120
perform internal training

4608
04:26:09,120 --> 04:26:10,880
and to then perform research and

4609
04:26:10,880 --> 04:26:13,679
development on this

4610
04:26:14,159 --> 04:26:14,960
so

4611
04:26:14,960 --> 04:26:17,439
we developed the concept of a water

4612
04:26:17,439 --> 04:26:19,600
treatment plant which was comprised of

4613
04:26:19,600 --> 04:26:20,640
three

4614
04:26:20,640 --> 04:26:24,000
uh water filtration units and then

4615
04:26:24,000 --> 04:26:25,040
as

4616
04:26:25,040 --> 04:26:27,199
actuators pumping stations which pumped

4617
04:26:27,199 --> 04:26:29,279
water from one filtration unit to the

4618
04:26:29,279 --> 04:26:30,399
next one

4619
04:26:30,399 --> 04:26:33,120
and to back this up and to

4620
04:26:33,120 --> 04:26:35,279
represent a more or less realistic

4621
04:26:35,279 --> 04:26:37,439
environment that drives this we had also

4622
04:26:37,439 --> 04:26:40,000
scada and an enterprise network behind

4623
04:26:40,000 --> 04:26:42,239
this fully virtualized

4624
04:26:42,239 --> 04:26:44,640
so when we worked on this we were then

4625
04:26:44,640 --> 04:26:46,560
contacted by a client who said well we

4626
04:26:46,560 --> 04:26:48,080
really like what you're doing we would

4627
04:26:48,080 --> 04:26:50,479
like to have this for us as well

4628
04:26:50,479 --> 04:26:53,199
because we are actually operating

4629
04:26:53,199 --> 04:26:54,880
critical infrastructure and as part of

4630
04:26:54,880 --> 04:26:58,239
this they operated bridges pasco bridges

4631
04:26:58,239 --> 04:26:59,840
and they wanted to have this such a

4632
04:26:59,840 --> 04:27:01,600
playground for their own digital

4633
04:27:01,600 --> 04:27:03,199
forensics and incident

4634
04:27:03,199 --> 04:27:04,560
response teams

4635
04:27:04,560 --> 04:27:06,080
to find out okay what happened

4636
04:27:06,080 --> 04:27:07,520
post-compromise

4637
04:27:07,520 --> 04:27:09,120
and this should be also a mobile

4638
04:27:09,120 --> 04:27:10,880
solution so they can

4639
04:27:10,880 --> 04:27:12,560
then do those trainings at different

4640
04:27:12,560 --> 04:27:14,000
sites

4641
04:27:14,000 --> 04:27:16,960
so we adapted our concept to

4642
04:27:16,960 --> 04:27:18,960
to do basketball bridges

4643
04:27:18,960 --> 04:27:21,600
and this was our very first concept

4644
04:27:21,600 --> 04:27:23,359
so here you can see it's basically an

4645
04:27:23,359 --> 04:27:25,600
aluminum frame on wheels

4646
04:27:25,600 --> 04:27:27,439
in the very top there you have a scale

4647
04:27:27,439 --> 04:27:29,760
model of bascule bridges

4648
04:27:29,760 --> 04:27:31,359
then in the lower half there's a front

4649
04:27:31,359 --> 04:27:32,960
and a back side in the front side you

4650
04:27:32,960 --> 04:27:35,920
see rot equipment such as plc's

4651
04:27:35,920 --> 04:27:38,080
power distribution power supplies and

4652
04:27:38,080 --> 04:27:39,520
the back there the

4653
04:27:39,520 --> 04:27:41,199
the area that you can't really look into

4654
04:27:41,199 --> 04:27:42,720
because there are black panels there

4655
04:27:42,720 --> 04:27:45,520
should be the virtualization server

4656
04:27:45,520 --> 04:27:47,680
so uh we were familiar with building

4657
04:27:47,680 --> 04:27:50,399
virtual environments uh we were somewhat

4658
04:27:50,399 --> 04:27:52,880
familiar with assembling stuff but not

4659
04:27:52,880 --> 04:27:55,680
very much with 3d printing and um

4660
04:27:55,680 --> 04:27:57,840
yeah just uh designing this this bridge

4661
04:27:57,840 --> 04:27:59,439
for example so that's what we started

4662
04:27:59,439 --> 04:28:00,800
with

4663
04:28:00,800 --> 04:28:03,040
you can see in the center there's our um

4664
04:28:03,040 --> 04:28:06,159
our cad model of the bridge um you saw

4665
04:28:06,159 --> 04:28:08,080
there were two bridges right so the

4666
04:28:08,080 --> 04:28:10,239
other side is just a flip version

4667
04:28:10,239 --> 04:28:12,560
and we 3d printed those so

4668
04:28:12,560 --> 04:28:14,239
what i would like to point out here in

4669
04:28:14,239 --> 04:28:16,720
particular are the most prominent parts

4670
04:28:16,720 --> 04:28:19,359
so here you can see the bridge leaves

4671
04:28:19,359 --> 04:28:21,279
which are lower and race there are

4672
04:28:21,279 --> 04:28:23,520
switches that are our sensors which

4673
04:28:23,520 --> 04:28:25,359
detect whether our bridge is now in a

4674
04:28:25,359 --> 04:28:27,439
fully opened or fully closed state and

4675
04:28:27,439 --> 04:28:29,199
of course we also have traffic lights

4676
04:28:29,199 --> 04:28:31,279
and a road barrier that goes up and down

4677
04:28:31,279 --> 04:28:33,279
and when all of this works it's synced

4678
04:28:33,279 --> 04:28:34,880
so that there's a process where the

4679
04:28:34,880 --> 04:28:36,720
bridge opens and then the traffic

4680
04:28:36,720 --> 04:28:38,479
barriers are down and the lights

4681
04:28:38,479 --> 04:28:39,920
indicate that no traffic should happen

4682
04:28:39,920 --> 04:28:40,720
here

4683
04:28:40,720 --> 04:28:42,399
and it should all hold and then they go

4684
04:28:42,399 --> 04:28:44,560
back down again the road barriers go up

4685
04:28:44,560 --> 04:28:46,159
again and then traffic should commands

4686
04:28:46,159 --> 04:28:47,279
there

4687
04:28:47,279 --> 04:28:49,920
as we said as part of our title we built

4688
04:28:49,920 --> 04:28:51,680
this in our kitchen this is my kitchen

4689
04:28:51,680 --> 04:28:53,760
and that's my oven actually much to the

4690
04:28:53,760 --> 04:28:56,000
dismay of my wife we did this in my

4691
04:28:56,000 --> 04:28:58,159
kitchen just to keep those prototyping

4692
04:28:58,159 --> 04:29:00,000
intervals very very short

4693
04:29:00,000 --> 04:29:02,000
so typically i would design a model in

4694
04:29:02,000 --> 04:29:03,520
the evening kick off the print this

4695
04:29:03,520 --> 04:29:05,760
would take hours and hours and hours and

4696
04:29:05,760 --> 04:29:07,120
sometime in the afternoon it would be

4697
04:29:07,120 --> 04:29:08,880
done on the next day and i could take it

4698
04:29:08,880 --> 04:29:10,720
out of the printer and try and assemble

4699
04:29:10,720 --> 04:29:12,640
it and see if it works or if i have to

4700
04:29:12,640 --> 04:29:13,600
adapt

4701
04:29:13,600 --> 04:29:15,359
anything about it

4702
04:29:15,359 --> 04:29:16,479
so

4703
04:29:16,479 --> 04:29:18,640
at that point we got a model but it

4704
04:29:18,640 --> 04:29:20,880
couldn't really do anything on its own

4705
04:29:20,880 --> 04:29:23,840
so we needed to do more to it we first

4706
04:29:23,840 --> 04:29:25,120
assembled it

4707
04:29:25,120 --> 04:29:27,600
then we got a hold of those aluminum

4708
04:29:27,600 --> 04:29:30,080
profile beams and built the frame and

4709
04:29:30,080 --> 04:29:32,159
the back plate for the electro cabinet

4710
04:29:32,159 --> 04:29:33,600
inside

4711
04:29:33,600 --> 04:29:35,439
we put all the ot equipment in there

4712
04:29:35,439 --> 04:29:37,760
wired everything together

4713
04:29:37,760 --> 04:29:39,760
installed the bridges and wired them

4714
04:29:39,760 --> 04:29:41,840
those are roughly 50 individual

4715
04:29:41,840 --> 04:29:43,040
connections

4716
04:29:43,040 --> 04:29:45,199
that we then put down to the ot

4717
04:29:45,199 --> 04:29:46,720
equipments

4718
04:29:46,720 --> 04:29:47,760
we put

4719
04:29:47,760 --> 04:29:50,000
panels to it because they look nice and

4720
04:29:50,000 --> 04:29:52,159
they of course

4721
04:29:52,159 --> 04:29:53,600
hinder you from actually reaching into

4722
04:29:53,600 --> 04:29:54,960
it while it's operating you shouldn't do

4723
04:29:54,960 --> 04:29:56,479
that

4724
04:29:56,479 --> 04:29:58,319
some sweet backlighting we put in there

4725
04:29:58,319 --> 04:29:59,439
so you could actually see something

4726
04:29:59,439 --> 04:30:01,439
because it was getting dark

4727
04:30:01,439 --> 04:30:03,680
and we did a lot of testing an awful lot

4728
04:30:03,680 --> 04:30:05,680
of testing many hours were put into

4729
04:30:05,680 --> 04:30:07,199
debugging all of this

4730
04:30:07,199 --> 04:30:08,960
and we at some point even had to recite

4731
04:30:08,960 --> 04:30:10,399
using an oscilloscope as you can see

4732
04:30:10,399 --> 04:30:11,199
here

4733
04:30:11,199 --> 04:30:12,880
to debug the motor control signals

4734
04:30:12,880 --> 04:30:14,720
because they were not really in sync and

4735
04:30:14,720 --> 04:30:17,199
they were off

4736
04:30:17,199 --> 04:30:19,120
so we had the physical build but this

4737
04:30:19,120 --> 04:30:21,120
only gets you so far what we were really

4738
04:30:21,120 --> 04:30:23,520
interested in was actually powering it

4739
04:30:23,520 --> 04:30:25,040
with a fully virtual environment in the

4740
04:30:25,040 --> 04:30:27,359
back right so let's get to the network

4741
04:30:27,359 --> 04:30:29,439
infrastructure that was then used for

4742
04:30:29,439 --> 04:30:31,279
example for kill chains

4743
04:30:31,279 --> 04:30:33,359
this should again be somewhat realistic

4744
04:30:33,359 --> 04:30:35,199
and should be extendable

4745
04:30:35,199 --> 04:30:36,960
so here's our network infrastructure

4746
04:30:36,960 --> 04:30:38,800
those are four networks

4747
04:30:38,800 --> 04:30:41,199
the networks in the dotted rectangle

4748
04:30:41,199 --> 04:30:42,960
they're mostly virtual while the ot

4749
04:30:42,960 --> 04:30:44,479
network down there is

4750
04:30:44,479 --> 04:30:45,920
mostly physical

4751
04:30:45,920 --> 04:30:48,000
let's go through all of those

4752
04:30:48,000 --> 04:30:51,040
they were implemented in an e6i server

4753
04:30:51,040 --> 04:30:53,199
and they all use opn sensors for

4754
04:30:53,199 --> 04:30:55,359
segmentation and segregation so just for

4755
04:30:55,359 --> 04:30:57,920
routing and for the firewalls

4756
04:30:57,920 --> 04:31:00,319
now let's let's see so in the enterprise

4757
04:31:00,319 --> 04:31:02,080
we had an enterprise network we had a

4758
04:31:02,080 --> 04:31:03,439
domain controller and a main joint

4759
04:31:03,439 --> 04:31:04,960
office workstation which we heavily

4760
04:31:04,960 --> 04:31:07,040
abused for initial foothold in our kill

4761
04:31:07,040 --> 04:31:07,920
chains

4762
04:31:07,920 --> 04:31:09,439
so there would be for example the case

4763
04:31:09,439 --> 04:31:11,439
where we had a phishing mail and this

4764
04:31:11,439 --> 04:31:12,960
the attachment of this phishing mail got

4765
04:31:12,960 --> 04:31:15,120
opened and then it was compromised

4766
04:31:15,120 --> 04:31:17,359
there was also a web ui that would allow

4767
04:31:17,359 --> 04:31:19,439
office workers to then have a look at

4768
04:31:19,439 --> 04:31:21,600
what the process is currently

4769
04:31:21,600 --> 04:31:22,800
like in the

4770
04:31:22,800 --> 04:31:25,279
uh at the bridge

4771
04:31:25,279 --> 04:31:26,880
then in the skydive network we had an

4772
04:31:26,880 --> 04:31:28,720
operator workstation which would allow

4773
04:31:28,720 --> 04:31:29,920
you to

4774
04:31:29,920 --> 04:31:31,439
more closely

4775
04:31:31,439 --> 04:31:33,199
monitor what's actually going on in the

4776
04:31:33,199 --> 04:31:35,439
process taking place like what are the

4777
04:31:35,439 --> 04:31:37,600
individual pieces of the bridge doing

4778
04:31:37,600 --> 04:31:39,040
there was an historian which actually

4779
04:31:39,040 --> 04:31:40,720
grabbed production data and stored it in

4780
04:31:40,720 --> 04:31:42,640
a time series database and a jump post

4781
04:31:42,640 --> 04:31:45,040
to which we will get back later

4782
04:31:45,040 --> 04:31:47,920
the dmz honestly stays very empty for

4783
04:31:47,920 --> 04:31:49,680
most of the time and still is we plan to

4784
04:31:49,680 --> 04:31:50,640
put a

4785
04:31:50,640 --> 04:31:52,080
windows update server may be there but

4786
04:31:52,080 --> 04:31:53,199
we didn't

4787
04:31:53,199 --> 04:31:54,800
and then in the ot

4788
04:31:54,800 --> 04:31:57,199
network we have of course all our rt

4789
04:31:57,199 --> 04:31:58,159
equipment

4790
04:31:58,159 --> 04:32:00,800
so there are four plc's one

4791
04:32:00,800 --> 04:32:03,439
rather new model so there was an s7 1500

4792
04:32:03,439 --> 04:32:06,479
they were all siemens plc's that was the

4793
04:32:06,479 --> 04:32:07,760
area supervision that one would

4794
04:32:07,760 --> 04:32:09,520
orchestrate the other ones then there

4795
04:32:09,520 --> 04:32:12,080
are two more or less budget models s7

4796
04:32:12,080 --> 04:32:13,199
1200s

4797
04:32:13,199 --> 04:32:15,040
they were the lifting substations and

4798
04:32:15,040 --> 04:32:17,040
they drove the leaves and the barriers

4799
04:32:17,040 --> 04:32:18,399
and then lastly we got a later scene

4800
04:32:18,399 --> 04:32:20,800
model the s7 300

4801
04:32:20,800 --> 04:32:23,680
which is if i recall correctly close to

4802
04:32:23,680 --> 04:32:25,199
30 years old

4803
04:32:25,199 --> 04:32:28,159
and that drives actually the lights

4804
04:32:28,159 --> 04:32:29,520
and of course we have the manual

4805
04:32:29,520 --> 04:32:31,840
override hmi so where you can actually

4806
04:32:31,840 --> 04:32:34,960
tap and change stuff around physically

4807
04:32:34,960 --> 04:32:38,319
we also built in a cctv system using

4808
04:32:38,319 --> 04:32:40,960
raspberry pi's and pen tilt cameras

4809
04:32:40,960 --> 04:32:42,800
and here's one last

4810
04:32:42,800 --> 04:32:44,479
virtualized station so that's the

4811
04:32:44,479 --> 04:32:45,920
engineering workstation that will be

4812
04:32:45,920 --> 04:32:48,800
used to actually program the controllers

4813
04:32:48,800 --> 04:32:50,479
and that would also be

4814
04:32:50,479 --> 04:32:52,319
more or less the last step in our kill

4815
04:32:52,319 --> 04:32:54,399
chain where which we could compromise to

4816
04:32:54,399 --> 04:32:56,239
then

4817
04:32:56,239 --> 04:32:58,640
effectively compromise the plcs because

4818
04:32:58,640 --> 04:33:01,680
this one could program those right

4819
04:33:01,680 --> 04:33:03,040
so

4820
04:33:03,040 --> 04:33:04,958
knowing about this let me show you what

4821
04:33:04,958 --> 04:33:06,240
it really looks like when we all

4822
04:33:06,240 --> 04:33:08,160
assembled it

4823
04:33:08,160 --> 04:33:11,359
let's see if the video works

4824
04:33:11,520 --> 04:33:13,359
ah nice okay

4825
04:33:13,359 --> 04:33:15,599
so here you see the model on top and it

4826
04:33:15,599 --> 04:33:17,759
will just start its cycle of lowering

4827
04:33:17,759 --> 04:33:20,240
the barriers and here we can see in the

4828
04:33:20,240 --> 04:33:21,919
hmi that what you see on screen is

4829
04:33:21,919 --> 04:33:23,520
actually sync to what's going on in the

4830
04:33:23,520 --> 04:33:26,000
bridge model

4831
04:33:26,000 --> 04:33:27,359
so now for example they are raising

4832
04:33:27,359 --> 04:33:28,799
again

4833
04:33:28,799 --> 04:33:30,160
taking a look inside we can see a whole

4834
04:33:30,160 --> 04:33:32,480
bunch of wiring stepper motors

4835
04:33:32,480 --> 04:33:34,400
uh and actually

4836
04:33:34,400 --> 04:33:36,080
also active cooling

4837
04:33:36,080 --> 04:33:38,160
we had to do this a whole bunch um over

4838
04:33:38,160 --> 04:33:39,438
the whole firing range because it got

4839
04:33:39,438 --> 04:33:41,680
really really hot

4840
04:33:41,680 --> 04:33:44,320
then there on the back you can see a

4841
04:33:44,320 --> 04:33:46,879
desktop case so that's our esxi server

4842
04:33:46,879 --> 04:33:48,879
there's the big switch and an ap for

4843
04:33:48,879 --> 04:33:51,680
wireless and easier debugging

4844
04:33:51,680 --> 04:33:53,199
and that's pretty much it and that's

4845
04:33:53,199 --> 04:33:54,561
what it does all the time and now at

4846
04:33:54,561 --> 04:33:56,719
that point we can go there and try and

4847
04:33:56,719 --> 04:33:59,359
compromise it

4848
04:33:59,359 --> 04:34:00,958
then we have some backup slides in case

4849
04:34:00,958 --> 04:34:02,480
the video wouldn't work you can skip

4850
04:34:02,480 --> 04:34:03,919
those

4851
04:34:03,919 --> 04:34:05,680
now for the lessons learned what did we

4852
04:34:05,680 --> 04:34:07,438
learn we learned a whole bunch

4853
04:34:07,438 --> 04:34:09,840
first of all regarding the ics lab setup

4854
04:34:09,840 --> 04:34:11,680
we learned that especially with the

4855
04:34:11,680 --> 04:34:13,199
hardware compatibilities and

4856
04:34:13,199 --> 04:34:14,879
dependencies that you've got

4857
04:34:14,879 --> 04:34:16,480
assembling such a fire range can get

4858
04:34:16,480 --> 04:34:17,840
somewhat complicated when you're not a

4859
04:34:17,840 --> 04:34:20,480
domain expert we are not

4860
04:34:20,480 --> 04:34:22,320
ics engineers we are not mechanical

4861
04:34:22,320 --> 04:34:24,400
engineers so those were things that were

4862
04:34:24,400 --> 04:34:26,561
rather new to us

4863
04:34:26,561 --> 04:34:27,840
you have to take several things into

4864
04:34:27,840 --> 04:34:30,000
account right so power supply what kind

4865
04:34:30,000 --> 04:34:32,000
of power source do you need what kind of

4866
04:34:32,000 --> 04:34:34,799
protocols do those devices support what

4867
04:34:34,799 --> 04:34:36,639
kind of protocols are relevant to your

4868
04:34:36,639 --> 04:34:38,639
cases to your scenarios maybe

4869
04:34:38,639 --> 04:34:40,719
so this can get uh

4870
04:34:40,719 --> 04:34:43,520
this can be quite a bit uh then the the

4871
04:34:43,520 --> 04:34:45,520
software licenses are quite pricey we'll

4872
04:34:45,520 --> 04:34:47,199
get into this later

4873
04:34:47,199 --> 04:34:49,118
and a practical thing that we figured

4874
04:34:49,118 --> 04:34:51,039
out was that the stepper motors they

4875
04:34:51,039 --> 04:34:52,879
tended to overheat and that was actually

4876
04:34:52,879 --> 04:34:55,599
very bad for 3d printing

4877
04:34:55,599 --> 04:34:57,520
again we didn't really do this prior to

4878
04:34:57,520 --> 04:34:59,359
this project so this was all new to us

4879
04:34:59,359 --> 04:35:01,599
we are not mechanical engineers so

4880
04:35:01,599 --> 04:35:03,278
especially the part with the bridge

4881
04:35:03,278 --> 04:35:04,799
leaves opening and closing this was

4882
04:35:04,799 --> 04:35:07,199
quite challenging for us to develop

4883
04:35:07,199 --> 04:35:08,719
to design and then to implement and to

4884
04:35:08,719 --> 04:35:10,080
make sure that it doesn't break because

4885
04:35:10,080 --> 04:35:11,759
it broke a whole lot

4886
04:35:11,759 --> 04:35:13,520
and then factor in the fact

4887
04:35:13,520 --> 04:35:15,759
that printing is very time consuming as

4888
04:35:15,759 --> 04:35:17,599
i said i would kick off a print

4889
04:35:17,599 --> 04:35:19,359
at night and it would maybe be done in

4890
04:35:19,359 --> 04:35:21,278
the afternoon next day we had prints we

4891
04:35:21,278 --> 04:35:23,680
had individual parts that took up to

4892
04:35:23,680 --> 04:35:25,759
three days to print so 72 hours and if

4893
04:35:25,759 --> 04:35:30,480
anything goes wrong you're done it's bad

4894
04:35:30,480 --> 04:35:32,000
and also if you're not an expert in 3d

4895
04:35:32,000 --> 04:35:34,000
printing you will run into a whole lot

4896
04:35:34,000 --> 04:35:35,759
of problems

4897
04:35:35,759 --> 04:35:37,680
ranging from from a to z so we had for

4898
04:35:37,680 --> 04:35:38,958
example problems

4899
04:35:38,958 --> 04:35:40,240
with the prints not sticking to the

4900
04:35:40,240 --> 04:35:42,080
print bed so the print would just go and

4901
04:35:42,080 --> 04:35:43,680
the filament would go all over the place

4902
04:35:43,680 --> 04:35:45,039
but it wouldn't be there where you

4903
04:35:45,039 --> 04:35:46,879
actually needed it

4904
04:35:46,879 --> 04:35:48,400
and then to have

4905
04:35:48,400 --> 04:35:49,840
models that you can actually adapt to

4906
04:35:49,840 --> 04:35:52,400
your needs and to to modify further you

4907
04:35:52,400 --> 04:35:54,320
would do this in cad

4908
04:35:54,320 --> 04:35:56,719
again we didn't know cads prior to this

4909
04:35:56,719 --> 04:35:58,879
so this was also required a whole bunch

4910
04:35:58,879 --> 04:36:00,080
to learn

4911
04:36:00,080 --> 04:36:02,879
but also there were practical challenges

4912
04:36:02,879 --> 04:36:05,520
so uh this is this is the firing range

4913
04:36:05,520 --> 04:36:08,799
it was 80 centimeters by 120 centimeters

4914
04:36:08,799 --> 04:36:10,879
in size uh only the frame was in meter

4915
04:36:10,879 --> 04:36:12,639
in in in height

4916
04:36:12,639 --> 04:36:14,320
and if you factor in the wheels and the

4917
04:36:14,320 --> 04:36:16,240
models it's more like one and a half

4918
04:36:16,240 --> 04:36:18,400
meters so every time we wanted to move

4919
04:36:18,400 --> 04:36:20,639
it anywhere we needed to get a very very

4920
04:36:20,639 --> 04:36:21,840
big van

4921
04:36:21,840 --> 04:36:23,520
which was mostly empty but we needed it

4922
04:36:23,520 --> 04:36:25,759
to put it there upright so we needed the

4923
04:36:25,759 --> 04:36:27,599
vertical space

4924
04:36:27,599 --> 04:36:29,359
and then also we had problems with the

4925
04:36:29,359 --> 04:36:31,680
models right so here you would see that

4926
04:36:31,680 --> 04:36:33,520
the the road barrier would collide with

4927
04:36:33,520 --> 04:36:35,278
the lights up there

4928
04:36:35,278 --> 04:36:37,118
it wasn't very nice the stepper motors

4929
04:36:37,118 --> 04:36:39,118
were heating up there was the wiring

4930
04:36:39,118 --> 04:36:40,958
which was all over the place

4931
04:36:40,958 --> 04:36:42,400
and there was very little clearance for

4932
04:36:42,400 --> 04:36:44,240
the moving parts

4933
04:36:44,240 --> 04:36:46,400
this was iteration one so we iterated

4934
04:36:46,400 --> 04:36:49,039
one more time and their iteration two we

4935
04:36:49,039 --> 04:36:51,118
addressed all of those problems here you

4936
04:36:51,118 --> 04:36:53,039
can see those lights are set back so

4937
04:36:53,039 --> 04:36:54,719
they don't collide anymore there are

4938
04:36:54,719 --> 04:36:56,561
actually fans that we built into it so

4939
04:36:56,561 --> 04:36:58,320
there's active cooling and you can just

4940
04:36:58,320 --> 04:37:00,080
let it run for hours now it won't every

4941
04:37:00,080 --> 04:37:01,759
heat which is nice

4942
04:37:01,759 --> 04:37:03,278
if you want to do maintenance or if you

4943
04:37:03,278 --> 04:37:05,039
have to do it there's a central back

4944
04:37:05,039 --> 04:37:07,199
plane where all the wiring is just going

4945
04:37:07,199 --> 04:37:09,199
which is nice and of course the

4946
04:37:09,199 --> 04:37:10,639
clearance we have way more clearance

4947
04:37:10,639 --> 04:37:13,599
here and then no more parts scraping on

4948
04:37:13,599 --> 04:37:16,639
other parts so that's great

4949
04:37:16,639 --> 04:37:18,400
what's the bottom line though

4950
04:37:18,400 --> 04:37:20,879
we started this in january 2021 we put

4951
04:37:20,879 --> 04:37:22,719
more than a thousand hours of manual

4952
04:37:22,719 --> 04:37:23,919
work into it

4953
04:37:23,919 --> 04:37:26,719
more than 900 hours additional to the

4954
04:37:26,719 --> 04:37:28,958
first 1000 hours which is net 3d

4955
04:37:28,958 --> 04:37:30,639
printing time and a whole lot of this

4956
04:37:30,639 --> 04:37:32,639
time was overnight

4957
04:37:32,639 --> 04:37:34,160
and over the course of the whole project

4958
04:37:34,160 --> 04:37:35,599
we burned through more than eight

4959
04:37:35,599 --> 04:37:37,199
kilograms of filament

4960
04:37:37,199 --> 04:37:39,759
we spent roughly eighteen hundred

4961
04:37:39,759 --> 04:37:42,480
eighteen thousand us dollars

4962
04:37:42,480 --> 04:37:43,919
on the whole project most of this for

4963
04:37:43,919 --> 04:37:45,919
hardware but as you can see three and a

4964
04:37:45,919 --> 04:37:48,240
half thousand euros are use dollars just

4965
04:37:48,240 --> 04:37:49,919
for licenses

4966
04:37:49,919 --> 04:37:52,080
which i hadn't expected

4967
04:37:52,080 --> 04:37:53,919
in the beginning but here we go

4968
04:37:53,919 --> 04:37:55,520
and we actually destroyed some stuff

4969
04:37:55,520 --> 04:37:56,719
over the course of the project so there

4970
04:37:56,719 --> 04:37:58,000
were two stepper motors that we actually

4971
04:37:58,000 --> 04:38:00,799
burned through one plc that's died

4972
04:38:00,799 --> 04:38:03,199
presumably from faulty wiring

4973
04:38:03,199 --> 04:38:05,680
uh and one motor driver that also died

4974
04:38:05,680 --> 04:38:08,480
due to 40 wiring and at times we lost

4975
04:38:08,480 --> 04:38:11,278
parts of our sanity to be honest

4976
04:38:11,278 --> 04:38:12,879
and at that point i would like to hand

4977
04:38:12,879 --> 04:38:16,240
over to nico again about what's next

4978
04:38:16,240 --> 04:38:17,759
what is next

4979
04:38:17,759 --> 04:38:19,759
thanks for watching

4980
04:38:19,759 --> 04:38:21,039
okay

4981
04:38:21,039 --> 04:38:22,240
so you

4982
04:38:22,240 --> 04:38:24,000
if you paid attention i'm sure everybody

4983
04:38:24,000 --> 04:38:26,639
did um the video differed the video that

4984
04:38:26,639 --> 04:38:29,359
we showed differed from the 3d model for

4985
04:38:29,359 --> 04:38:31,438
example um so if it wasn't clear we we

4986
04:38:31,438 --> 04:38:32,879
actually created two iterations the

4987
04:38:32,879 --> 04:38:35,118
first one where the problems the rules

4988
04:38:35,118 --> 04:38:36,958
that that most mentioned and then to

4989
04:38:36,958 --> 04:38:38,639
make it better we created a second model

4990
04:38:38,639 --> 04:38:40,320
so there's actually two models what we

4991
04:38:40,320 --> 04:38:42,160
should be doing is creating a third

4992
04:38:42,160 --> 04:38:44,639
iteration to address some of those

4993
04:38:44,639 --> 04:38:46,000
points that

4994
04:38:46,000 --> 04:38:47,840
are still not

4995
04:38:47,840 --> 04:38:49,680
not that great so for example mobility

4996
04:38:49,680 --> 04:38:52,240
is an issue you need still to rent a van

4997
04:38:52,240 --> 04:38:53,759
to transport it and it was supposed to

4998
04:38:53,759 --> 04:38:56,240
be very mobile it really isn't at this

4999
04:38:56,240 --> 04:38:58,240
moment um so it could be for example

5000
04:38:58,240 --> 04:39:01,199
that the disassembling of the entire um

5001
04:39:01,199 --> 04:39:04,958
firing range is somewhat easier um maybe

5002
04:39:04,958 --> 04:39:07,759
yeah that parts could be taken out

5003
04:39:07,759 --> 04:39:10,000
of it um also the modularization is

5004
04:39:10,000 --> 04:39:11,599
something that we we had in mind for

5005
04:39:11,599 --> 04:39:13,359
example so we talk about basket bridges

5006
04:39:13,359 --> 04:39:14,799
now but maybe we want to have a small

5007
04:39:14,799 --> 04:39:16,480
town or toy train or something running

5008
04:39:16,480 --> 04:39:18,240
on top without changing the hardware

5009
04:39:18,240 --> 04:39:19,599
underneath because it's

5010
04:39:19,599 --> 04:39:21,278
most likely going to be very similar so

5011
04:39:21,278 --> 04:39:22,639
we just

5012
04:39:22,639 --> 04:39:24,639
would replace the the top on the model

5013
04:39:24,639 --> 04:39:26,719
i.e the bridges with something else and

5014
04:39:26,719 --> 04:39:28,561
then download new software on the plcs

5015
04:39:28,561 --> 04:39:29,840
and then it should be done so this is

5016
04:39:29,840 --> 04:39:31,520
something that that could be done in

5017
04:39:31,520 --> 04:39:33,199
third iteration whether or not we're

5018
04:39:33,199 --> 04:39:36,000
doing this we have to see um

5019
04:39:36,000 --> 04:39:37,920
it's not clear at this moment what we

5020
04:39:37,920 --> 04:39:39,280
certainly will be doing is develop more

5021
04:39:39,280 --> 04:39:41,440
scenarios so this the intention of this

5022
04:39:41,440 --> 04:39:43,440
firing range was to use it for training

5023
04:39:43,440 --> 04:39:45,440
and we've used it for forensics training

5024
04:39:45,440 --> 04:39:47,440
in ot for example so we had a two today

5025
04:39:47,440 --> 04:39:49,520
workshop on this which were quite great

5026
04:39:49,520 --> 04:39:51,360
um but we currently don't have scenarios

5027
04:39:51,360 --> 04:39:52,798
for example for penetration testing or

5028
04:39:52,798 --> 04:39:54,160
red teaming in ot so this is something

5029
04:39:54,160 --> 04:39:56,400
we want to to work on as well um

5030
04:39:56,400 --> 04:39:58,798
similarly uh monitoring and detection ot

5031
04:39:58,798 --> 04:39:59,920
i think is a topic that's very

5032
04:39:59,920 --> 04:40:01,520
interesting and

5033
04:40:01,520 --> 04:40:03,280
and many people are interested in

5034
04:40:03,280 --> 04:40:05,040
interlooking that as well even in our

5035
04:40:05,040 --> 04:40:07,600
company so for for this developing a

5036
04:40:07,600 --> 04:40:08,958
scenario would be very

5037
04:40:08,958 --> 04:40:11,040
worthwhile

5038
04:40:11,040 --> 04:40:13,520
now if if you're interested in ot or

5039
04:40:13,520 --> 04:40:15,520
want to know more about this project

5040
04:40:15,520 --> 04:40:17,040
we're here to answer questions of course

5041
04:40:17,040 --> 04:40:18,638
we're going to be outside you know after

5042
04:40:18,638 --> 04:40:20,718
this talk you can reach us

5043
04:40:20,718 --> 04:40:22,958
via these email addresses um if you want

5044
04:40:22,958 --> 04:40:25,520
to know what nviso does for ics there's

5045
04:40:25,520 --> 04:40:28,080
a page for that as well and otherwise we

5046
04:40:28,080 --> 04:40:29,920
have two twitter handles and a block

5047
04:40:29,920 --> 04:40:32,160
that you can look up on the block there

5048
04:40:32,160 --> 04:40:35,520
is a series um about this fire range as

5049
04:40:35,520 --> 04:40:36,638
well so

5050
04:40:36,638 --> 04:40:38,080
parts of what we presented a bit more

5051
04:40:38,080 --> 04:40:40,718
detail as well in some in some areas and

5052
04:40:40,718 --> 04:40:42,400
just check it out and

5053
04:40:42,400 --> 04:40:44,480
see for yourself

5054
04:40:44,480 --> 04:40:45,440
good

5055
04:40:45,440 --> 04:40:48,079
any questions

5056
04:40:49,600 --> 04:40:50,958
thank you

5057
04:40:50,958 --> 04:40:52,560
thank you thank you

5058
04:40:52,560 --> 04:40:54,958
so do we have questions i'm sure for the

5059
04:40:54,958 --> 04:40:56,958
audience the front microphone if you

5060
04:40:56,958 --> 04:41:00,638
want to take any questions

5061
04:41:00,638 --> 04:41:01,840
so

5062
04:41:01,840 --> 04:41:03,520
okay i see chen

5063
04:41:03,520 --> 04:41:06,080
please come up

5064
04:41:07,360 --> 04:41:10,080
telecool so thank you very much for this

5065
04:41:10,080 --> 04:41:12,320
um i was wondering

5066
04:41:12,320 --> 04:41:14,320
what other materials did you consider

5067
04:41:14,320 --> 04:41:17,120
when putting this model together like

5068
04:41:17,120 --> 04:41:18,958
did you did you think about legos or

5069
04:41:18,958 --> 04:41:20,560
something like this or did you go

5070
04:41:20,560 --> 04:41:23,200
directly to printing

5071
04:41:23,200 --> 04:41:25,600
i think we lego was in talks there was

5072
04:41:25,600 --> 04:41:27,520
some talks about using a bit more wood

5073
04:41:27,520 --> 04:41:29,600
as well to to get some parts done i'm

5074
04:41:29,600 --> 04:41:31,840
not sure what we did not decide on lego

5075
04:41:31,840 --> 04:41:32,958
in the end

5076
04:41:32,958 --> 04:41:34,958
to be honest

5077
04:41:34,958 --> 04:41:36,240
not sure

5078
04:41:36,240 --> 04:41:38,480
i think it just looks cooler if it's 3d

5079
04:41:38,480 --> 04:41:40,798
printed maybe it was occupied by

5080
04:41:40,798 --> 04:41:43,520
children or something yeah as well

5081
04:41:43,520 --> 04:41:44,718
yeah

5082
04:41:44,718 --> 04:41:46,638
i think the probably the possibilities

5083
04:41:46,638 --> 04:41:48,798
are it's just a lot more possibilities

5084
04:41:48,798 --> 04:41:49,760
to

5085
04:41:49,760 --> 04:41:51,360
create stuff if we have a 3d printer

5086
04:41:51,360 --> 04:41:53,040
then we're fully in control of how it

5087
04:41:53,040 --> 04:41:54,798
should look like and

5088
04:41:54,798 --> 04:41:56,320
especially the smaller parts than they

5089
04:41:56,320 --> 04:41:58,560
are needed

5090
04:41:58,560 --> 04:42:02,160
and i'm a long time no lego player but

5091
04:42:02,160 --> 04:42:04,160
i remember there were no real bridges

5092
04:42:04,160 --> 04:42:06,320
moving bridges so you only had trains

5093
04:42:06,320 --> 04:42:07,280
and stuff

5094
04:42:07,280 --> 04:42:10,160
okay um do you have any similar projects

5095
04:42:10,160 --> 04:42:11,440
like

5096
04:42:11,440 --> 04:42:13,520
other companies doing similar test

5097
04:42:13,520 --> 04:42:16,160
ranges firing ranges that you exchanged

5098
04:42:16,160 --> 04:42:17,760
ideas with

5099
04:42:17,760 --> 04:42:21,520
honestly we no we didn't we know that

5100
04:42:21,520 --> 04:42:23,360
not for bridges but but of course

5101
04:42:23,360 --> 04:42:24,958
siemens for example they they have

5102
04:42:24,958 --> 04:42:26,878
developed um

5103
04:42:26,878 --> 04:42:29,840
also test environments for for traffic

5104
04:42:29,840 --> 04:42:31,840
controls for example

5105
04:42:31,840 --> 04:42:33,840
but it's a different price range as well

5106
04:42:33,840 --> 04:42:35,440
and i'm not sure if they

5107
04:42:35,440 --> 04:42:36,878
they would disclose too much about their

5108
04:42:36,878 --> 04:42:39,120
projects towards us

5109
04:42:39,120 --> 04:42:40,080
but no

5110
04:42:40,080 --> 04:42:41,680
actually don't know

5111
04:42:41,680 --> 04:42:43,360
maybe over you find somebody from

5112
04:42:43,360 --> 04:42:46,320
siemens over a coffee

5113
04:42:47,280 --> 04:42:50,480
so do we have any other questions

5114
04:42:50,480 --> 04:42:53,120
one coming up

5115
04:42:53,520 --> 04:42:54,480
so

5116
04:42:54,480 --> 04:42:56,638
most of the ics or the ot environment

5117
04:42:56,638 --> 04:42:58,878
will have some physical control

5118
04:42:58,878 --> 04:43:00,560
over the process not only that some

5119
04:43:00,560 --> 04:43:03,120
malware can shut down the process while

5120
04:43:03,120 --> 04:43:04,718
building your fire range did you also

5121
04:43:04,718 --> 04:43:06,560
consider physical controls like you

5122
04:43:06,560 --> 04:43:08,718
detect some attack or something and then

5123
04:43:08,718 --> 04:43:10,000
there is

5124
04:43:10,000 --> 04:43:11,920
somebody who is putting out switch or

5125
04:43:11,920 --> 04:43:14,638
like why triton did not succeed and also

5126
04:43:14,638 --> 04:43:16,480
scenarios like that

5127
04:43:16,480 --> 04:43:18,400
so that's the hmi if

5128
04:43:18,400 --> 04:43:20,240
you meant that so that's the hmi photo

5129
04:43:20,240 --> 04:43:23,120
control so for example uh if you

5130
04:43:23,120 --> 04:43:25,760
uh consider the titan thing it tried to

5131
04:43:25,760 --> 04:43:27,760
uh shut down the safety system but of

5132
04:43:27,760 --> 04:43:29,600
course it did not succeed there were

5133
04:43:29,600 --> 04:43:31,760
also physical controls on site and all

5134
04:43:31,760 --> 04:43:33,120
to avoid this

5135
04:43:33,120 --> 04:43:34,718
were you considering this

5136
04:43:34,718 --> 04:43:36,480
to build in the firing range because

5137
04:43:36,480 --> 04:43:39,280
that would be more realistic in an ot or

5138
04:43:39,280 --> 04:43:42,240
ics environment right yeah

5139
04:43:42,240 --> 04:43:43,600
so

5140
04:43:43,600 --> 04:43:45,280
we can't put everything in that model

5141
04:43:45,280 --> 04:43:47,280
that's i think um probably that's

5142
04:43:47,280 --> 04:43:50,080
difficult um so we we um restrict

5143
04:43:50,080 --> 04:43:51,680
ourselves to the couple of plcs that we

5144
04:43:51,680 --> 04:43:54,958
have in the hmi um to and build the

5145
04:43:54,958 --> 04:43:57,520
stars around that so additional hardware

5146
04:43:57,520 --> 04:43:59,600
equipment we did not plan for at least

5147
04:43:59,600 --> 04:44:02,718
in these situations so far

5148
04:44:02,718 --> 04:44:04,480
yeah yeah this is why because it would

5149
04:44:04,480 --> 04:44:07,280
not be practical to imagine that okay

5150
04:44:07,280 --> 04:44:09,440
only through an enterprise network you

5151
04:44:09,440 --> 04:44:11,040
get into the ot network because there

5152
04:44:11,040 --> 04:44:13,360
would always be some physical control

5153
04:44:13,360 --> 04:44:15,680
over the processes as well sure so

5154
04:44:15,680 --> 04:44:17,440
you're saying that the the attacker like

5155
04:44:17,440 --> 04:44:19,200
they so they skip the it part and they

5156
04:44:19,200 --> 04:44:21,440
go straight to ot and and

5157
04:44:21,440 --> 04:44:22,718
uh

5158
04:44:22,718 --> 04:44:26,080
carry out the attack from this is that

5159
04:44:26,320 --> 04:44:29,600
no i meant like there would be some uh

5160
04:44:29,600 --> 04:44:31,840
physical control that

5161
04:44:31,840 --> 04:44:34,638
cannot be reached by attackers to avoid

5162
04:44:34,638 --> 04:44:37,120
such scenarios and maybe in these kind

5163
04:44:37,120 --> 04:44:39,040
of projects we can also consider this it

5164
04:44:39,040 --> 04:44:40,718
could be it could be implemented in this

5165
04:44:40,718 --> 04:44:42,240
show yeah i mean it's it's also

5166
04:44:42,240 --> 04:44:44,878
extendable if this is a project for fuji

5167
04:44:44,878 --> 04:44:46,958
i think it's a good idea to include

5168
04:44:46,958 --> 04:44:48,560
thanks

5169
04:44:48,560 --> 04:44:50,320
and are you going to put this on the

5170
04:44:50,320 --> 04:44:53,280
internet for us to test as well

5171
04:44:53,280 --> 04:44:55,280
i mean you need that i guess you need

5172
04:44:55,280 --> 04:44:56,400
data

5173
04:44:56,400 --> 04:44:59,920
for forensic analysis so you just just

5174
04:44:59,920 --> 04:45:01,760
put it on the internet and wait for us

5175
04:45:01,760 --> 04:45:03,680
to test it maybe we'll think about it

5176
04:45:03,680 --> 04:45:05,440
yeah

5177
04:45:05,440 --> 04:45:06,480
okay

5178
04:45:06,480 --> 04:45:08,560
okay then thank you very much thank you

5179
04:45:08,560 --> 04:45:10,480
and before everybody heads out for lunch

5180
04:45:10,480 --> 04:45:11,920
break

5181
04:45:11,920 --> 04:45:13,280
we have

5182
04:45:13,280 --> 04:45:15,280
lunch outside and you can also use the

5183
04:45:15,280 --> 04:45:18,320
upper floor so to have a bit more space

5184
04:45:18,320 --> 04:45:19,920
and i think we will continue here in

5185
04:45:19,920 --> 04:45:21,520
this room at two

5186
04:45:21,520 --> 04:45:24,718
o'clock so after one hour of break and

5187
04:45:24,718 --> 04:45:27,670
see you then

5188
04:45:27,670 --> 04:45:31,710
[Applause]

5189
05:41:07,090 --> 05:41:14,470
[Music]

5190
05:42:34,510 --> 05:42:37,629
[Music]

5191
05:43:06,638 --> 05:43:08,638
um

5192
05:43:08,638 --> 05:43:10,080
i don't think that we're gonna magic one

5193
05:43:10,080 --> 05:43:13,958
up in the next

5194
05:43:14,350 --> 05:43:18,080
[Music]

5195
05:43:18,080 --> 05:43:22,440
yeah and i think we have time

5196
05:43:22,830 --> 05:43:26,299
[Music]

5197
05:43:37,200 --> 05:43:39,520
hello

5198
05:43:41,360 --> 05:43:45,240
oh too many things

5199
05:44:11,680 --> 05:44:12,798
so

5200
05:44:12,798 --> 05:44:15,040
it is two o'clock so she we should get

5201
05:44:15,040 --> 05:44:17,920
started with the next talk

5202
05:44:17,920 --> 05:44:19,120
in the

5203
05:44:19,120 --> 05:44:20,480
where are we in the ballroom in the

5204
05:44:20,480 --> 05:44:23,440
ballroom um today we are here as a

5205
05:44:23,440 --> 05:44:24,958
community

5206
05:44:24,958 --> 05:44:27,120
we're making connections

5207
05:44:27,120 --> 05:44:29,840
we're exchanging information

5208
05:44:29,840 --> 05:44:31,520
and guess what else wants to make

5209
05:44:31,520 --> 05:44:35,200
connections and exchange information

5210
05:44:35,200 --> 05:44:37,360
good answer blockchain

5211
05:44:37,360 --> 05:44:40,480
so today uh our speaker sebastian

5212
05:44:40,480 --> 05:44:43,360
baniskew is going to talk to us about

5213
05:44:43,360 --> 05:44:45,360
not quite water under the bridge a

5214
05:44:45,360 --> 05:44:48,718
review of cross chain bridge hacks and

5215
05:44:48,718 --> 05:44:51,600
so sebastian take it away thanks so much

5216
05:44:51,600 --> 05:44:53,520
for the introduction

5217
05:44:53,520 --> 05:44:57,520
this talk is put together by some of my

5218
05:44:57,520 --> 05:44:59,920
amazing colleagues listed here

5219
05:44:59,920 --> 05:45:02,638
and i'm just sort of distributing the

5220
05:45:02,638 --> 05:45:03,600
knowledge

5221
05:45:03,600 --> 05:45:05,520
so a bit about myself i've been working

5222
05:45:05,520 --> 05:45:09,200
in security since 2011. held various

5223
05:45:09,200 --> 05:45:11,280
roles at various companies

5224
05:45:11,280 --> 05:45:12,718
and i've been in the

5225
05:45:12,718 --> 05:45:15,120
blockchain smart contract auditing scene

5226
05:45:15,120 --> 05:45:17,680
since uh 2018

5227
05:45:17,680 --> 05:45:20,958
and it's been a hell of a ride

5228
05:45:21,280 --> 05:45:22,798
who i work for

5229
05:45:22,798 --> 05:45:24,240
i work for quan stamp which is the

5230
05:45:24,240 --> 05:45:26,400
company the logo there in the middle

5231
05:45:26,400 --> 05:45:28,400
uh we're one of the leaders in

5232
05:45:28,400 --> 05:45:30,958
smart contract and blockchain security

5233
05:45:30,958 --> 05:45:32,558
we've secured

5234
05:45:32,558 --> 05:45:35,280
more than 200 billion in

5235
05:45:35,280 --> 05:45:38,400
assets in smart contracts we have a lot

5236
05:45:38,400 --> 05:45:39,840
of clients

5237
05:45:39,840 --> 05:45:41,360
a lot of revenue

5238
05:45:41,360 --> 05:45:43,600
and most importantly we're hiring so

5239
05:45:43,600 --> 05:45:45,680
stick around until my last slide that

5240
05:45:45,680 --> 05:45:46,400
one

5241
05:45:46,400 --> 05:45:47,920
has a very interesting piece of

5242
05:45:47,920 --> 05:45:50,320
information on it

5243
05:45:50,320 --> 05:45:52,480
so why is this talk relevant

5244
05:45:52,480 --> 05:45:55,760
um there's been a bunch of bridge hacks

5245
05:45:55,760 --> 05:45:57,280
over the past

5246
05:45:57,280 --> 05:45:58,160
year

5247
05:45:58,160 --> 05:46:01,360
so just in 2022 alone there's been more

5248
05:46:01,360 --> 05:46:04,000
than uh one billion worth of crypto

5249
05:46:04,000 --> 05:46:05,680
assets stolen

5250
05:46:05,680 --> 05:46:08,080
from such systems

5251
05:46:08,080 --> 05:46:09,760
here are at least just a few of them the

5252
05:46:09,760 --> 05:46:11,840
ones with the ones which are like most

5253
05:46:11,840 --> 05:46:13,200
important

5254
05:46:13,200 --> 05:46:15,760
and we're going to go through

5255
05:46:15,760 --> 05:46:17,680
more details

5256
05:46:17,680 --> 05:46:19,520
as to why these kind of things happen

5257
05:46:19,520 --> 05:46:21,840
and why this kind of thing is so hard to

5258
05:46:21,840 --> 05:46:24,798
get right from a security perspective

5259
05:46:24,798 --> 05:46:26,160
so here's a bridge

5260
05:46:26,160 --> 05:46:28,798
it's pretty simple like you'd say like

5261
05:46:28,798 --> 05:46:30,878
why the heck is this thing so hard to

5262
05:46:30,878 --> 05:46:32,718
get right

5263
05:46:32,718 --> 05:46:35,280
you have an actor

5264
05:46:35,280 --> 05:46:37,520
on the left side you have

5265
05:46:37,520 --> 05:46:40,240
a smart contract system like ethereum

5266
05:46:40,240 --> 05:46:42,080
that it interacts with

5267
05:46:42,080 --> 05:46:44,480
and it basically wants to send assets to

5268
05:46:44,480 --> 05:46:46,798
a different chain

5269
05:46:46,798 --> 05:46:48,320
and on the other end

5270
05:46:48,320 --> 05:46:50,480
this actor or someone else might want to

5271
05:46:50,480 --> 05:46:53,200
receive those assets

5272
05:46:53,200 --> 05:46:55,120
denominated in something else on the

5273
05:46:55,120 --> 05:46:56,558
other chain

5274
05:46:56,558 --> 05:47:00,080
now this is like the essence of it

5275
05:47:00,080 --> 05:47:01,120
the

5276
05:47:01,120 --> 05:47:02,878
going into a bit more detail you see

5277
05:47:02,878 --> 05:47:05,200
like when someone deposits like this

5278
05:47:05,200 --> 05:47:06,558
actor on the left

5279
05:47:06,558 --> 05:47:09,280
deposits maybe some ether

5280
05:47:09,280 --> 05:47:11,600
it interacts with a smart contract

5281
05:47:11,600 --> 05:47:13,600
called the custodian

5282
05:47:13,600 --> 05:47:16,000
and there's a communicator

5283
05:47:16,000 --> 05:47:17,760
in the middle which is an off chain

5284
05:47:17,760 --> 05:47:19,680
component

5285
05:47:19,680 --> 05:47:21,120
it could be a traditional whatever

5286
05:47:21,120 --> 05:47:22,558
server application

5287
05:47:22,558 --> 05:47:24,400
that is watching

5288
05:47:24,400 --> 05:47:27,200
what is happening on the chain

5289
05:47:27,200 --> 05:47:29,280
once it sees that someone has deposited

5290
05:47:29,280 --> 05:47:32,798
funds in this contract it initiates

5291
05:47:32,798 --> 05:47:36,558
a debt issuance call to the debt issuer

5292
05:47:36,558 --> 05:47:39,120
contract on a different chain and this

5293
05:47:39,120 --> 05:47:42,320
debt issuer here on the right hand side

5294
05:47:42,320 --> 05:47:43,760
it means some

5295
05:47:43,760 --> 05:47:46,320
tokens which should be the equivalent of

5296
05:47:46,320 --> 05:47:49,200
the ether that the first actor put in

5297
05:47:49,200 --> 05:47:50,320
right

5298
05:47:50,320 --> 05:47:52,638
so again pretty simple

5299
05:47:52,638 --> 05:47:55,280
the opposite path so starting from right

5300
05:47:55,280 --> 05:47:58,718
to left the actor wants to redeem back

5301
05:47:58,718 --> 05:48:01,120
the ether deposited after having used it

5302
05:48:01,120 --> 05:48:02,798
for some purpose

5303
05:48:02,798 --> 05:48:04,160
so it

5304
05:48:04,160 --> 05:48:06,558
burns these tokens that it got called

5305
05:48:06,558 --> 05:48:07,920
ace

5306
05:48:07,920 --> 05:48:09,520
it sends them to this depth issuer

5307
05:48:09,520 --> 05:48:10,480
contract

5308
05:48:10,480 --> 05:48:12,798
the communicator is also watching the

5309
05:48:12,798 --> 05:48:14,240
debt issuer

5310
05:48:14,240 --> 05:48:16,878
and when it sees that someone has burned

5311
05:48:16,878 --> 05:48:19,120
these tokens it initiates the fund

5312
05:48:19,120 --> 05:48:21,440
release on the custodian side

5313
05:48:21,440 --> 05:48:23,680
so the actor should receive the

5314
05:48:23,680 --> 05:48:26,080
corresponding amount of eth on the

5315
05:48:26,080 --> 05:48:28,240
ethereum side so this is depositing and

5316
05:48:28,240 --> 05:48:30,878
withdrawing

5317
05:48:31,200 --> 05:48:32,080
now

5318
05:48:32,080 --> 05:48:33,600
you notice from the previous slides the

5319
05:48:33,600 --> 05:48:35,440
bridge structure contains like three

5320
05:48:35,440 --> 05:48:36,958
main components

5321
05:48:36,958 --> 05:48:38,400
two contracts

5322
05:48:38,400 --> 05:48:41,040
which are the asset custodian the data

5323
05:48:41,040 --> 05:48:42,160
source

5324
05:48:42,160 --> 05:48:44,558
and the depth issuer the oracle contract

5325
05:48:44,558 --> 05:48:45,680
here

5326
05:48:45,680 --> 05:48:48,400
and a communicator which is an offline

5327
05:48:48,400 --> 05:48:50,638
off chain component

5328
05:48:50,638 --> 05:48:53,520
which we call the oracle

5329
05:48:53,520 --> 05:48:54,638
and there's

5330
05:48:54,638 --> 05:48:55,600
therefore

5331
05:48:55,600 --> 05:48:58,160
a huge attack surface when it comes to

5332
05:48:58,160 --> 05:48:58,958
like

5333
05:48:58,958 --> 05:48:59,840
the

5334
05:48:59,840 --> 05:49:02,558
uh web free space so you have

5335
05:49:02,558 --> 05:49:03,920
the custodian

5336
05:49:03,920 --> 05:49:06,558
the depth issuer the communicator any

5337
05:49:06,558 --> 05:49:08,480
interfaces that they use and the network

5338
05:49:08,480 --> 05:49:10,798
itself they could all be subject to

5339
05:49:10,798 --> 05:49:13,040
attacks and in the next slides we're

5340
05:49:13,040 --> 05:49:16,000
going to go through examples of attacks

5341
05:49:16,000 --> 05:49:18,718
for each of these layers

5342
05:49:18,718 --> 05:49:20,400
and bear in mind that some of these

5343
05:49:20,400 --> 05:49:22,240
attacks i won't name names because it's

5344
05:49:22,240 --> 05:49:23,440
not

5345
05:49:23,440 --> 05:49:26,798
professional but some of them are uh

5346
05:49:26,798 --> 05:49:28,958
referring to the hacks that happen

5347
05:49:28,958 --> 05:49:31,280
in the in the past the ones that are on

5348
05:49:31,280 --> 05:49:32,240
the

5349
05:49:32,240 --> 05:49:34,718
one of the previous slides so for the

5350
05:49:34,718 --> 05:49:35,920
custodian

5351
05:49:35,920 --> 05:49:37,520
we have something which is called the

5352
05:49:37,520 --> 05:49:39,600
call relay attack

5353
05:49:39,600 --> 05:49:42,638
and here depending on the bridge

5354
05:49:42,638 --> 05:49:45,760
you might have this asset custody smart

5355
05:49:45,760 --> 05:49:46,798
contract

5356
05:49:46,798 --> 05:49:48,400
which is accessible

5357
05:49:48,400 --> 05:49:50,080
by some privileged addresses because

5358
05:49:50,080 --> 05:49:52,160
they need to manage them somehow and

5359
05:49:52,160 --> 05:49:54,638
maybe maximize

5360
05:49:54,638 --> 05:49:55,680
the the

5361
05:49:55,680 --> 05:49:58,798
profit of the project or something so

5362
05:49:58,798 --> 05:50:01,520
what the attacker goal in this case was

5363
05:50:01,520 --> 05:50:03,840
was to take over

5364
05:50:03,840 --> 05:50:06,080
this asset custody contract and be able

5365
05:50:06,080 --> 05:50:07,520
to

5366
05:50:07,520 --> 05:50:09,600
take puns out of it so the way in which

5367
05:50:09,600 --> 05:50:11,920
they want they did that was that there

5368
05:50:11,920 --> 05:50:13,360
was this function

5369
05:50:13,360 --> 05:50:14,798
that was

5370
05:50:14,798 --> 05:50:16,878
in the ascity asset custody smart

5371
05:50:16,878 --> 05:50:18,320
contract called

5372
05:50:18,320 --> 05:50:20,320
change custody address there at the

5373
05:50:20,320 --> 05:50:22,400
arrow at the bottom

5374
05:50:22,400 --> 05:50:24,958
and this function

5375
05:50:24,958 --> 05:50:27,920
should not be callable from the outside

5376
05:50:27,920 --> 05:50:29,520
so there should be some access control

5377
05:50:29,520 --> 05:50:31,200
in place that prevents anyone from

5378
05:50:31,200 --> 05:50:33,600
calling it

5379
05:50:33,600 --> 05:50:34,480
but

5380
05:50:34,480 --> 05:50:35,760
what the

5381
05:50:35,760 --> 05:50:38,000
attack or like what any user would have

5382
05:50:38,000 --> 05:50:40,000
would be allowed to do was that they

5383
05:50:40,000 --> 05:50:42,000
were allowed to call

5384
05:50:42,000 --> 05:50:44,638
functions of this form right there was a

5385
05:50:44,638 --> 05:50:46,400
function name

5386
05:50:46,400 --> 05:50:48,320
three parameters

5387
05:50:48,320 --> 05:50:50,558
two byte strings and one unsigned

5388
05:50:50,558 --> 05:50:53,120
integer on 64 bit

5389
05:50:53,120 --> 05:50:55,520
so this was something that

5390
05:50:55,520 --> 05:50:57,280
was deemed allowable from the access

5391
05:50:57,280 --> 05:50:59,120
control policy because

5392
05:50:59,120 --> 05:51:00,480
there were just

5393
05:51:00,480 --> 05:51:02,320
one or two functions which were fine to

5394
05:51:02,320 --> 05:51:04,480
be called by anyone

5395
05:51:04,480 --> 05:51:05,680
now

5396
05:51:05,680 --> 05:51:07,120
the nasty part

5397
05:51:07,120 --> 05:51:09,120
is

5398
05:51:09,120 --> 05:51:10,958
that the attacker

5399
05:51:10,958 --> 05:51:15,280
found a way found a hash collision

5400
05:51:15,280 --> 05:51:17,120
on some random name that they put

5401
05:51:17,120 --> 05:51:20,080
together using this signature here so

5402
05:51:20,080 --> 05:51:22,558
they just randomly compiled

5403
05:51:22,558 --> 05:51:24,840
a function name and some parameter

5404
05:51:24,840 --> 05:51:28,558
values which had a hash collision

5405
05:51:28,558 --> 05:51:30,638
with this function name

5406
05:51:30,638 --> 05:51:32,400
the way in which this contract in the

5407
05:51:32,400 --> 05:51:34,400
middle here works this cross chain

5408
05:51:34,400 --> 05:51:36,638
communication contract

5409
05:51:36,638 --> 05:51:38,958
it whenever it says call this function

5410
05:51:38,958 --> 05:51:41,440
it basically hashes the signature and

5411
05:51:41,440 --> 05:51:44,000
looks it up in a hash table

5412
05:51:44,000 --> 05:51:46,080
and due to this hash collision

5413
05:51:46,080 --> 05:51:48,718
it was the attacker was able to

5414
05:51:48,718 --> 05:51:50,160
figure out okay

5415
05:51:50,160 --> 05:51:52,480
if i have this function well it's just a

5416
05:51:52,480 --> 05:51:55,120
random name there but xx123

5417
05:51:55,120 --> 05:51:57,600
and some parameter values is going to

5418
05:51:57,600 --> 05:51:59,520
have a hash collision and i'm going to

5419
05:51:59,520 --> 05:52:02,080
be able to call this

5420
05:52:02,080 --> 05:52:03,840
function which i'm not supposed to call

5421
05:52:03,840 --> 05:52:06,480
and change the owner of the asset

5422
05:52:06,480 --> 05:52:08,638
custody to my own address and then i can

5423
05:52:08,638 --> 05:52:11,120
just take the funds out

5424
05:52:11,120 --> 05:52:14,400
so yeah that's that's one of the attacks

5425
05:52:14,400 --> 05:52:16,558
moving on to another attack transaction

5426
05:52:16,558 --> 05:52:17,600
replay

5427
05:52:17,600 --> 05:52:20,320
it's again on the custodian and

5428
05:52:20,320 --> 05:52:22,480
depending on again the custodian the

5429
05:52:22,480 --> 05:52:24,400
bridge that is implementing

5430
05:52:24,400 --> 05:52:27,120
you need to present proofs

5431
05:52:27,120 --> 05:52:30,000
when withdrawing assets so this kind of

5432
05:52:30,000 --> 05:52:31,520
markle proofs

5433
05:52:31,520 --> 05:52:33,840
they get issued so let's let's go step

5434
05:52:33,840 --> 05:52:36,240
by step the first step is that you

5435
05:52:36,240 --> 05:52:39,120
deposit an asset to the custodian

5436
05:52:39,120 --> 05:52:41,360
and in the second step the debt issuer

5437
05:52:41,360 --> 05:52:43,840
sends you the debt token we've seen that

5438
05:52:43,840 --> 05:52:45,120
on the

5439
05:52:45,120 --> 05:52:47,600
original slide with depositing then

5440
05:52:47,600 --> 05:52:49,760
withdrawing you do burning the depth

5441
05:52:49,760 --> 05:52:52,240
token to the depth issuer and in this

5442
05:52:52,240 --> 05:52:54,558
case the depth issuer gives you a proof

5443
05:52:54,558 --> 05:52:56,878
that you can then go and send to the

5444
05:52:56,878 --> 05:52:59,280
custodian and say here's the proof give

5445
05:52:59,280 --> 05:53:02,000
me my money give me my tokens

5446
05:53:02,000 --> 05:53:03,040
the

5447
05:53:03,040 --> 05:53:05,200
the mistake in this case was that the

5448
05:53:05,200 --> 05:53:07,600
verification of the proof

5449
05:53:07,600 --> 05:53:09,440
uh didn't take into account one of the

5450
05:53:09,440 --> 05:53:10,400
fields

5451
05:53:10,400 --> 05:53:12,320
so the attacker was able to change one

5452
05:53:12,320 --> 05:53:13,760
of the fields

5453
05:53:13,760 --> 05:53:17,360
and resend the proof again and again

5454
05:53:17,360 --> 05:53:19,120
it was a valid proof but it was

5455
05:53:19,120 --> 05:53:21,520
different from the previous ones so for

5456
05:53:21,520 --> 05:53:24,000
each replay the attacker got the same

5457
05:53:24,000 --> 05:53:28,320
amount until it drained the custodian

5458
05:53:29,120 --> 05:53:32,000
going on to the depth issuer so in case

5459
05:53:32,000 --> 05:53:34,958
of the depth issuer the attacker goal

5460
05:53:34,958 --> 05:53:37,040
would be to bypass the signature

5461
05:53:37,040 --> 05:53:38,958
verification right

5462
05:53:38,958 --> 05:53:40,320
and

5463
05:53:40,320 --> 05:53:42,000
arbitrarily mint

5464
05:53:42,000 --> 05:53:43,680
these tokens right

5465
05:53:43,680 --> 05:53:46,000
so

5466
05:53:46,000 --> 05:53:48,000
the attacker what what they did in this

5467
05:53:48,000 --> 05:53:49,920
case it was again a very specific

5468
05:53:49,920 --> 05:53:52,400
implementation of a bridge which

5469
05:53:52,400 --> 05:53:55,040
received as an input parameter

5470
05:53:55,040 --> 05:53:57,680
over here not sure you see my mouse yeah

5471
05:53:57,680 --> 05:54:00,638
it received the signature verification

5472
05:54:00,638 --> 05:54:03,200
contract address right so this was an

5473
05:54:03,200 --> 05:54:04,878
input parameter

5474
05:54:04,878 --> 05:54:06,878
but it should have been pretty fixed but

5475
05:54:06,878 --> 05:54:08,320
this is the way in which the system

5476
05:54:08,320 --> 05:54:09,680
worked

5477
05:54:09,680 --> 05:54:11,520
they were just receiving this as an

5478
05:54:11,520 --> 05:54:12,958
input parameter and of course this

5479
05:54:12,958 --> 05:54:14,718
signature verification contract was

5480
05:54:14,718 --> 05:54:15,760
unique

5481
05:54:15,760 --> 05:54:17,680
it was a trusted component what the

5482
05:54:17,680 --> 05:54:19,760
attacker did they deployed a fake

5483
05:54:19,760 --> 05:54:21,520
verification contract

5484
05:54:21,520 --> 05:54:23,280
and they passed that

5485
05:54:23,280 --> 05:54:25,040
as an input parameter so this fake

5486
05:54:25,040 --> 05:54:27,200
verification contract said it's always

5487
05:54:27,200 --> 05:54:28,798
good whatever you do

5488
05:54:28,798 --> 05:54:31,520
you passed the signature verification

5489
05:54:31,520 --> 05:54:34,400
and this way the attacker was able to

5490
05:54:34,400 --> 05:54:36,878
basically initiate these kind of uh

5491
05:54:36,878 --> 05:54:38,400
withdrawals

5492
05:54:38,400 --> 05:54:41,040
without or like this disminting without

5493
05:54:41,040 --> 05:54:44,080
deposits without actually

5494
05:54:44,080 --> 05:54:47,440
depositing any money in the custodian

5495
05:54:47,440 --> 05:54:50,080
moving on to the communicator layer

5496
05:54:50,080 --> 05:54:51,040
there

5497
05:54:51,040 --> 05:54:53,280
the attacker has the goal of tricking

5498
05:54:53,280 --> 05:54:56,320
the communicator into forwarding invalid

5499
05:54:56,320 --> 05:54:59,360
messages and minting tokens

5500
05:54:59,360 --> 05:55:00,160
so

5501
05:55:00,160 --> 05:55:02,240
for this particular attack

5502
05:55:02,240 --> 05:55:04,240
the communicator

5503
05:55:04,240 --> 05:55:06,320
was watching the custodian

5504
05:55:06,320 --> 05:55:08,558
and was watching if someone deposits

5505
05:55:08,558 --> 05:55:10,718
funds in the custodian there's an event

5506
05:55:10,718 --> 05:55:12,080
which is emitted

5507
05:55:12,080 --> 05:55:13,680
i'm going to check

5508
05:55:13,680 --> 05:55:15,200
how much i should emit i'm going to

5509
05:55:15,200 --> 05:55:17,040
check the address of the custodian is

5510
05:55:17,040 --> 05:55:18,160
correct

5511
05:55:18,160 --> 05:55:19,760
unfortunately

5512
05:55:19,760 --> 05:55:22,798
for multiple withdrawals or like yeah

5513
05:55:22,798 --> 05:55:25,440
for multiple it was looking only at the

5514
05:55:25,440 --> 05:55:28,160
first event for the address of the

5515
05:55:28,160 --> 05:55:30,558
contract which emitted it what uh an

5516
05:55:30,558 --> 05:55:32,480
attacker did was they deployed a

5517
05:55:32,480 --> 05:55:35,280
malicious contract which emits the same

5518
05:55:35,280 --> 05:55:37,360
events it looked the events look the

5519
05:55:37,360 --> 05:55:39,280
same except for the fact that it's

5520
05:55:39,280 --> 05:55:41,840
emitted by a different address

5521
05:55:41,840 --> 05:55:43,760
the problem with the communicator it was

5522
05:55:43,760 --> 05:55:45,440
only checking the address of the first

5523
05:55:45,440 --> 05:55:46,400
event

5524
05:55:46,400 --> 05:55:48,400
and then only looking for the other

5525
05:55:48,400 --> 05:55:50,480
events that came afterwards so the

5526
05:55:50,480 --> 05:55:52,958
attacker basically issued a bunch of

5527
05:55:52,958 --> 05:55:55,040
fake events from these from this

5528
05:55:55,040 --> 05:55:57,360
malicious contract and was able to

5529
05:55:57,360 --> 05:56:00,480
uh drain yeah basically get a bunch of

5530
05:56:00,480 --> 05:56:04,160
funds that they were not entitled to

5531
05:56:04,240 --> 05:56:07,040
moving on to the interface level

5532
05:56:07,040 --> 05:56:09,280
here there's a bunch of attacks which

5533
05:56:09,280 --> 05:56:11,600
we're going to look on the first

5534
05:56:11,600 --> 05:56:13,040
is um

5535
05:56:13,040 --> 05:56:15,680
you have this situation where

5536
05:56:15,680 --> 05:56:17,840
a legitimate user here at the bottom has

5537
05:56:17,840 --> 05:56:19,360
approved

5538
05:56:19,360 --> 05:56:21,120
a contract

5539
05:56:21,120 --> 05:56:23,360
to

5540
05:56:23,360 --> 05:56:26,400
allow them to to basically

5541
05:56:26,400 --> 05:56:28,320
execute some kind of

5542
05:56:28,320 --> 05:56:29,760
function call

5543
05:56:29,760 --> 05:56:32,718
for a particular token and this is quite

5544
05:56:32,718 --> 05:56:33,760
broad

5545
05:56:33,760 --> 05:56:35,840
so what an attacker did there was that

5546
05:56:35,840 --> 05:56:36,798
they

5547
05:56:36,798 --> 05:56:39,280
just crafted out of this execute call

5548
05:56:39,280 --> 05:56:41,920
data generic function they just crafted

5549
05:56:41,920 --> 05:56:45,280
okay transfer from user to me right so

5550
05:56:45,280 --> 05:56:47,280
they were able just to

5551
05:56:47,280 --> 05:56:48,878
easily craft

5552
05:56:48,878 --> 05:56:51,200
this function call inside of the call

5553
05:56:51,200 --> 05:56:52,080
data

5554
05:56:52,080 --> 05:56:55,120
which led to of the legitimate users

5555
05:56:55,120 --> 05:56:58,000
tokens being transferred to the attacker

5556
05:56:58,000 --> 05:57:00,000
so the attacker could do this for

5557
05:57:00,000 --> 05:57:02,638
multiple users who have approved

5558
05:57:02,638 --> 05:57:04,000
um

5559
05:57:04,000 --> 05:57:05,280
their wallet

5560
05:57:05,280 --> 05:57:07,360
uh this this interface spending money

5561
05:57:07,360 --> 05:57:09,680
from or funds from their wallet

5562
05:57:09,680 --> 05:57:10,638
in

5563
05:57:10,638 --> 05:57:12,480
a similar attack

5564
05:57:12,480 --> 05:57:15,360
where again the user has approved a

5565
05:57:15,360 --> 05:57:17,120
third-party

5566
05:57:17,120 --> 05:57:18,798
contract for

5567
05:57:18,798 --> 05:57:21,520
allowing people to deposit

5568
05:57:21,520 --> 05:57:24,558
with permission basically here

5569
05:57:24,558 --> 05:57:26,718
you're allowing someone to

5570
05:57:26,718 --> 05:57:29,360
spend money in your name

5571
05:57:29,360 --> 05:57:31,600
it should only be meant for tokens which

5572
05:57:31,600 --> 05:57:33,840
implement this feature but there are

5573
05:57:33,840 --> 05:57:35,920
tokens which do not implement this

5574
05:57:35,920 --> 05:57:38,798
feature and do not give any

5575
05:57:38,798 --> 05:57:40,558
uh warning

5576
05:57:40,558 --> 05:57:42,878
as to the fact that this function called

5577
05:57:42,878 --> 05:57:45,840
failed so if someone calls this function

5578
05:57:45,840 --> 05:57:47,760
deposit with permit

5579
05:57:47,760 --> 05:57:49,600
into this contract it's just not going

5580
05:57:49,600 --> 05:57:51,040
to say anything

5581
05:57:51,040 --> 05:57:52,878
it's not going to return anything and

5582
05:57:52,878 --> 05:57:54,160
the error

5583
05:57:54,160 --> 05:57:55,680
was in this

5584
05:57:55,680 --> 05:57:58,320
third-party contract where they did not

5585
05:57:58,320 --> 05:58:00,240
check the return value so they didn't

5586
05:58:00,240 --> 05:58:01,040
check

5587
05:58:01,040 --> 05:58:03,040
that the return value is explicitly

5588
05:58:03,040 --> 05:58:05,760
successful they just assumed that if it

5589
05:58:05,760 --> 05:58:07,840
doesn't complain then it's successful

5590
05:58:07,840 --> 05:58:09,360
right so missing

5591
05:58:09,360 --> 05:58:13,040
uh return value validation and this way

5592
05:58:13,040 --> 05:58:15,200
the attacker was just able to say like

5593
05:58:15,200 --> 05:58:18,080
hey i'm going to deposit all of these

5594
05:58:18,080 --> 05:58:20,558
funds from the legitimate user into my

5595
05:58:20,558 --> 05:58:22,718
account and that's how they got away

5596
05:58:22,718 --> 05:58:23,440
with

5597
05:58:23,440 --> 05:58:25,280
all the funds from legitimate users who

5598
05:58:25,280 --> 05:58:27,440
approved

5599
05:58:27,440 --> 05:58:29,440
finally the network layer

5600
05:58:29,440 --> 05:58:31,200
this is something that hasn't yet

5601
05:58:31,200 --> 05:58:32,558
happened but

5602
05:58:32,558 --> 05:58:34,878
might happen in the future

5603
05:58:34,878 --> 05:58:37,520
there is this thing called the 51 attack

5604
05:58:37,520 --> 05:58:40,958
which allows you to reorganize blocks

5605
05:58:40,958 --> 05:58:41,920
and

5606
05:58:41,920 --> 05:58:45,360
what you can do is launch such an attack

5607
05:58:45,360 --> 05:58:47,520
on a level one chain

5608
05:58:47,520 --> 05:58:49,360
then you deposit assets to that

5609
05:58:49,360 --> 05:58:51,280
custodian contract

5610
05:58:51,280 --> 05:58:53,760
and you receive the debt token

5611
05:58:53,760 --> 05:58:56,958
afterwards you take that debt token

5612
05:58:56,958 --> 05:58:59,200
and withdraw those funds

5613
05:58:59,200 --> 05:59:01,360
out of an exchange or something you re

5614
05:59:01,360 --> 05:59:04,480
withdraw them transform them into fiat

5615
05:59:04,480 --> 05:59:06,718
or dollars whatever

5616
05:59:06,718 --> 05:59:09,520
and finally you cancel that deposit

5617
05:59:09,520 --> 05:59:11,920
transaction in step two because you now

5618
05:59:11,920 --> 05:59:14,638
can reorganize the chain right

5619
05:59:14,638 --> 05:59:16,878
and depending on how long

5620
05:59:16,878 --> 05:59:19,200
these steps this this withdrawal process

5621
05:59:19,200 --> 05:59:20,400
takes

5622
05:59:20,400 --> 05:59:22,480
you could afford to pay for such an

5623
05:59:22,480 --> 05:59:25,200
attack because one hour of such a 51

5624
05:59:25,200 --> 05:59:27,840
attack on the ethereum main net is

5625
05:59:27,840 --> 05:59:31,120
somewhere between 1.5 and 2 million

5626
05:59:31,120 --> 05:59:33,440
if there are sufficient funds an

5627
05:59:33,440 --> 05:59:35,200
attacker might be incentivized to

5628
05:59:35,200 --> 05:59:37,040
actually pay this

5629
05:59:37,040 --> 05:59:39,200
for a certain amount of hours depending

5630
05:59:39,200 --> 05:59:42,320
on how fast the bridge enables someone

5631
05:59:42,320 --> 05:59:44,000
to transfer funds to deposit and

5632
05:59:44,000 --> 05:59:46,240
withdraw

5633
05:59:46,240 --> 05:59:49,040
so in summary there's a lot of

5634
05:59:49,040 --> 05:59:50,400
bad things that could happen with

5635
05:59:50,400 --> 05:59:51,680
bridges

5636
05:59:51,680 --> 05:59:55,760
we saw things on the custodian layer

5637
05:59:55,760 --> 05:59:59,040
we saw things on the depth issuer layer

5638
05:59:59,040 --> 06:00:00,798
i'm not going to go into all of these

5639
06:00:00,798 --> 06:00:02,718
but basically

5640
06:00:02,718 --> 06:00:04,400
you might have recognized that these are

5641
06:00:04,400 --> 06:00:06,400
not totally different from your

5642
06:00:06,400 --> 06:00:08,878
classical security mistakes like missing

5643
06:00:08,878 --> 06:00:10,798
input validation

5644
06:00:10,798 --> 06:00:12,878
not checking return values and so on

5645
06:00:12,878 --> 06:00:14,080
right

5646
06:00:14,080 --> 06:00:16,638
the communicator layer is this off chain

5647
06:00:16,638 --> 06:00:19,280
component which is basically watching

5648
06:00:19,280 --> 06:00:21,600
and triggering smart contracts on both

5649
06:00:21,600 --> 06:00:22,638
sides

5650
06:00:22,638 --> 06:00:24,878
and there's a many things that could go

5651
06:00:24,878 --> 06:00:26,878
wrong we only went into one or two

5652
06:00:26,878 --> 06:00:28,958
things in this presentation but

5653
06:00:28,958 --> 06:00:30,958
there's a longer list and probably it's

5654
06:00:30,958 --> 06:00:32,798
not exhaustive

5655
06:00:32,798 --> 06:00:34,558
there's the interface

5656
06:00:34,558 --> 06:00:35,920
where

5657
06:00:35,920 --> 06:00:37,840
basically it's not necessarily bridge

5658
06:00:37,840 --> 06:00:39,280
specific but

5659
06:00:39,280 --> 06:00:40,638
there's a lot of things that could go

5660
06:00:40,638 --> 06:00:42,878
wrong with allowing people to

5661
06:00:42,878 --> 06:00:45,440
deposit in someone else's name

5662
06:00:45,440 --> 06:00:47,760
or allowing external contract calls and

5663
06:00:47,760 --> 06:00:49,600
then finally the network layer there's

5664
06:00:49,600 --> 06:00:51,440
the 51 attack

5665
06:00:51,440 --> 06:00:53,040
but there could be other problems as

5666
06:00:53,040 --> 06:00:55,280
well

5667
06:00:56,320 --> 06:00:58,878
finally just want to say we're hiring we

5668
06:00:58,878 --> 06:01:01,600
offer great packages and if you're

5669
06:01:01,600 --> 06:01:03,520
interested in this kind of stuff finding

5670
06:01:03,520 --> 06:01:06,160
bugs and smart contracts we'd be happy

5671
06:01:06,160 --> 06:01:07,840
to to

5672
06:01:07,840 --> 06:01:09,440
get in touch with you

5673
06:01:09,440 --> 06:01:11,440
thanks so much

5674
06:01:11,440 --> 06:01:19,440
[Applause]

5675
06:01:19,440 --> 06:01:21,440
so do we have any questions for

5676
06:01:21,440 --> 06:01:24,320
sebastian that we have a runner coming

5677
06:01:24,320 --> 06:01:27,320
forward

5678
06:01:29,040 --> 06:01:29,920
so it

5679
06:01:29,920 --> 06:01:31,680
looks like a lot of stuff you mentioned

5680
06:01:31,680 --> 06:01:33,360
is like you said input validation stuff

5681
06:01:33,360 --> 06:01:36,718
like that that could be remediated with

5682
06:01:36,718 --> 06:01:39,120
like good programming practices

5683
06:01:39,120 --> 06:01:41,440
um is my assumption correct that if you

5684
06:01:41,440 --> 06:01:43,840
do all these correct then the problem is

5685
06:01:43,840 --> 06:01:46,160
the custodian and you there's no way to

5686
06:01:46,160 --> 06:01:48,240
do that one trustless because it is off

5687
06:01:48,240 --> 06:01:49,120
chain

5688
06:01:49,120 --> 06:01:49,920
so

5689
06:01:49,920 --> 06:01:51,920
can we ever get rid of and not the

5690
06:01:51,920 --> 06:01:53,920
communicator because that is option is

5691
06:01:53,920 --> 06:01:56,718
there ever way to make that component

5692
06:01:56,718 --> 06:02:00,638
trustless as well or will that always be

5693
06:02:00,638 --> 06:02:03,200
a linchpin in the entire setup how and

5694
06:02:03,200 --> 06:02:04,958
there's no way to secure it even if all

5695
06:02:04,958 --> 06:02:06,718
the rest is perfect

5696
06:02:06,718 --> 06:02:08,798
yeah that's a very good question thanks

5697
06:02:08,798 --> 06:02:09,840
so

5698
06:02:09,840 --> 06:02:11,920
this architecture which we've mainly

5699
06:02:11,920 --> 06:02:13,760
looked at during this talk

5700
06:02:13,760 --> 06:02:16,638
is something which is being used

5701
06:02:16,638 --> 06:02:19,040
generally right now there are projects

5702
06:02:19,040 --> 06:02:21,360
out there which are taking a

5703
06:02:21,360 --> 06:02:23,040
totally different approach they don't

5704
06:02:23,040 --> 06:02:25,200
use this architecture they use something

5705
06:02:25,200 --> 06:02:27,120
else where they don't have this kind of

5706
06:02:27,120 --> 06:02:29,120
trusted off chain component

5707
06:02:29,120 --> 06:02:29,920
and

5708
06:02:29,920 --> 06:02:31,600
well those kind of things are not yet in

5709
06:02:31,600 --> 06:02:34,718
production but they are working towards

5710
06:02:34,718 --> 06:02:36,160
a solution

5711
06:02:36,160 --> 06:02:37,760
which does not does not have this kind

5712
06:02:37,760 --> 06:02:38,878
of um

5713
06:02:38,878 --> 06:02:39,920
trusted

5714
06:02:39,920 --> 06:02:42,638
third party which is off chain all right

5715
06:02:42,638 --> 06:02:44,160
if you want we could i can give you more

5716
06:02:44,160 --> 06:02:46,558
more details uh in the break and another

5717
06:02:46,558 --> 06:02:48,718
question if i may um sure for example in

5718
06:02:48,718 --> 06:02:50,480
in terms of web applications we have

5719
06:02:50,480 --> 06:02:52,080
stuff like ports right academy do you

5720
06:02:52,080 --> 06:02:53,680
have equivalents for like if you want to

5721
06:02:53,680 --> 06:02:55,600
learn about smart contract blockchain is

5722
06:02:55,600 --> 06:02:58,000
there any like playgrounds that are easy

5723
06:02:58,000 --> 06:02:59,520
to get into for someone that is not

5724
06:02:59,520 --> 06:03:01,360
familiar yet totally yeah there are

5725
06:03:01,360 --> 06:03:05,120
multiple actually there's things like

5726
06:03:05,120 --> 06:03:05,760
well um

5727
06:03:05,760 --> 06:03:07,840
call them offline ctfs because they are

5728
06:03:07,840 --> 06:03:09,760
always going on right you just have like

5729
06:03:09,760 --> 06:03:11,040
a playground

5730
06:03:11,040 --> 06:03:12,558
where there are some contracts that you

5731
06:03:12,558 --> 06:03:13,600
can just

5732
06:03:13,600 --> 06:03:15,840
exploit toy contracts

5733
06:03:15,840 --> 06:03:18,160
and there's like multiple

5734
06:03:18,160 --> 06:03:21,280
difficulty challenges right and there's

5735
06:03:21,280 --> 06:03:22,558
like things like you know damn

5736
06:03:22,558 --> 06:03:24,160
vulnerable linux sure yeah there's

5737
06:03:24,160 --> 06:03:26,638
something like that for smart contracts

5738
06:03:26,638 --> 06:03:30,000
or google damn vulnerable ethereum or

5739
06:03:30,000 --> 06:03:30,718
yeah

5740
06:03:30,718 --> 06:03:33,440
damn vulnerable defy it's called yeah so

5741
06:03:33,440 --> 06:03:35,840
um there's there's all these kind of

5742
06:03:35,840 --> 06:03:38,000
things and also there are training

5743
06:03:38,000 --> 06:03:40,558
programs free of charge

5744
06:03:40,558 --> 06:03:41,520
because

5745
06:03:41,520 --> 06:03:44,638
there's so much interest in um getting

5746
06:03:44,638 --> 06:03:47,360
more security experts in this field that

5747
06:03:47,360 --> 06:03:49,440
people are no longer charging for

5748
06:03:49,440 --> 06:03:51,200
training

5749
06:03:51,200 --> 06:03:53,280
everything is sponsored by all these

5750
06:03:53,280 --> 06:03:56,160
projects which have suffered such hacks

5751
06:03:56,160 --> 06:03:57,680
and and like the amount that they need

5752
06:03:57,680 --> 06:03:59,520
to sponsor these academies is nothing

5753
06:03:59,520 --> 06:04:00,958
compared to the amount that they could

5754
06:04:00,958 --> 06:04:03,440
lose so everything is like sort of free

5755
06:04:03,440 --> 06:04:05,040
of charge so you can pick it up really

5756
06:04:05,040 --> 06:04:06,480
easily

5757
06:04:06,480 --> 06:04:08,080
okay thanks

5758
06:04:08,080 --> 06:04:10,400
thank you

5759
06:04:10,878 --> 06:04:14,920
please come up with your question

5760
06:04:27,200 --> 06:04:28,320
hello

5761
06:04:28,320 --> 06:04:30,160
for someone that is completely new to

5762
06:04:30,160 --> 06:04:33,120
this type of hacking i have a question

5763
06:04:33,120 --> 06:04:36,000
how much of hacking smart contracts and

5764
06:04:36,000 --> 06:04:38,638
and blockchain and cryptos

5765
06:04:38,638 --> 06:04:39,920
is about

5766
06:04:39,920 --> 06:04:42,080
actually cryptography and how much is

5767
06:04:42,080 --> 06:04:44,878
about more of this type of logic

5768
06:04:44,878 --> 06:04:46,958
books

5769
06:04:46,958 --> 06:04:49,040
that's a good question um

5770
06:04:49,040 --> 06:04:51,440
i think

5771
06:04:51,600 --> 06:04:54,000
probably more than 95 percent is about

5772
06:04:54,000 --> 06:04:54,798
this

5773
06:04:54,798 --> 06:04:57,520
okay and probably like five percent is

5774
06:04:57,520 --> 06:04:59,360
about the crypto because

5775
06:04:59,360 --> 06:05:00,240
um

5776
06:05:00,240 --> 06:05:02,080
the actual cryptography which is being

5777
06:05:02,080 --> 06:05:03,280
used

5778
06:05:03,280 --> 06:05:07,440
that is being actively researched by

5779
06:05:07,440 --> 06:05:10,480
many research groups at top universities

5780
06:05:10,480 --> 06:05:12,400
and many of the world's

5781
06:05:12,400 --> 06:05:14,160
leading cryptographers

5782
06:05:14,160 --> 06:05:15,840
so the actual

5783
06:05:15,840 --> 06:05:17,360
hash functions

5784
06:05:17,360 --> 06:05:18,480
encryption

5785
06:05:18,480 --> 06:05:19,360
um

5786
06:05:19,360 --> 06:05:22,000
proofs and so on everything

5787
06:05:22,000 --> 06:05:24,320
is based on many many years of research

5788
06:05:24,320 --> 06:05:25,600
from

5789
06:05:25,600 --> 06:05:27,200
universities

5790
06:05:27,200 --> 06:05:30,080
and now we're just like working at

5791
06:05:30,080 --> 06:05:32,798
implementing applications on top of that

5792
06:05:32,798 --> 06:05:35,840
okay so we can say something like

5793
06:05:35,840 --> 06:05:37,600
if you'll invest more time there

5794
06:05:37,600 --> 06:05:40,638
learning about solidity you are doing a

5795
06:05:40,638 --> 06:05:43,440
very better investment that by learning

5796
06:05:43,440 --> 06:05:45,440
i don't know cryptology

5797
06:05:45,440 --> 06:05:47,040
something like that

5798
06:05:47,040 --> 06:05:48,958
um

5799
06:05:48,958 --> 06:05:51,280
depends right um

5800
06:05:51,280 --> 06:05:53,280
if you're a brilliant cryptographer and

5801
06:05:53,280 --> 06:05:55,200
you might invent something amazing i'm

5802
06:05:55,200 --> 06:05:56,558
not

5803
06:05:56,558 --> 06:05:58,798
then it might be worth doing that but i

5804
06:05:58,798 --> 06:06:01,040
think like if you don't want to do that

5805
06:06:01,040 --> 06:06:03,200
then definitely learning something like

5806
06:06:03,200 --> 06:06:04,878
the solidity or other programming

5807
06:06:04,878 --> 06:06:06,638
languages being used for smart contracts

5808
06:06:06,638 --> 06:06:09,120
is a very good return on investment okay

5809
06:06:09,120 --> 06:06:12,160
thank you thank you

5810
06:06:15,440 --> 06:06:18,920
any other questions

5811
06:06:26,638 --> 06:06:28,878
yeah so i have a bit of a controversial

5812
06:06:28,878 --> 06:06:31,200
question so your company is like doing

5813
06:06:31,200 --> 06:06:33,920
these audits for the contracts

5814
06:06:33,920 --> 06:06:36,080
so you're making money by doing the

5815
06:06:36,080 --> 06:06:38,000
audits and stuff but

5816
06:06:38,000 --> 06:06:40,638
like i've read this idea that

5817
06:06:40,638 --> 06:06:43,440
it's something like a bit like a reverse

5818
06:06:43,440 --> 06:06:45,200
but bounty scheme

5819
06:06:45,200 --> 06:06:47,280
because in the end there is an incentive

5820
06:06:47,280 --> 06:06:48,320
for you

5821
06:06:48,320 --> 06:06:50,638
to keep like some kind of bug in the

5822
06:06:50,638 --> 06:06:51,920
contract

5823
06:06:51,920 --> 06:06:55,040
and then in a blackhead form exploited

5824
06:06:55,040 --> 06:06:57,120
so you know what i mean yeah i do i do

5825
06:06:57,120 --> 06:06:59,280
totally and so it gets philosophical in

5826
06:06:59,280 --> 06:07:01,520
everything but like you're part of the

5827
06:07:01,520 --> 06:07:03,040
industry

5828
06:07:03,040 --> 06:07:05,840
and what is your

5829
06:07:05,840 --> 06:07:08,480
thinking about this how this could

5830
06:07:08,480 --> 06:07:09,760
improve

5831
06:07:09,760 --> 06:07:13,040
in a way where it's better for everyone

5832
06:07:13,040 --> 06:07:15,840
like your auditors can do your job

5833
06:07:15,840 --> 06:07:17,600
others can do their job and everybody

5834
06:07:17,600 --> 06:07:21,040
can trust the thing in the end yeah no

5835
06:07:21,040 --> 06:07:24,320
that's a very good question thanks so

5836
06:07:24,320 --> 06:07:26,878
i think it's always this kind of

5837
06:07:26,878 --> 06:07:29,680
trust issue when you're working with a

5838
06:07:29,680 --> 06:07:32,240
security service provider

5839
06:07:32,240 --> 06:07:35,040
it's not specific to the space it could

5840
06:07:35,040 --> 06:07:37,600
be like when you're pen testing a web

5841
06:07:37,600 --> 06:07:40,638
application right for any company right

5842
06:07:40,638 --> 06:07:43,120
you might withhold some kind of attack

5843
06:07:43,120 --> 06:07:44,480
that you can then

5844
06:07:44,480 --> 06:07:46,320
use to exploit of course like maybe in

5845
06:07:46,320 --> 06:07:49,200
web 2 the damage you do is not directly

5846
06:07:49,200 --> 06:07:51,440
financial but it's reputation damage or

5847
06:07:51,440 --> 06:07:52,558
so on

5848
06:07:52,558 --> 06:07:54,798
but basically the idea is that

5849
06:07:54,798 --> 06:07:56,558
what we're doing

5850
06:07:56,558 --> 06:07:58,400
if we were doing that if we were would

5851
06:07:58,400 --> 06:08:02,400
be withholding and exploiting

5852
06:08:02,400 --> 06:08:04,480
there would be a huge reputation damage

5853
06:08:04,480 --> 06:08:06,480
to the company itself and it would cease

5854
06:08:06,480 --> 06:08:07,600
to exist

5855
06:08:07,600 --> 06:08:08,958
right

5856
06:08:08,958 --> 06:08:09,920
we

5857
06:08:09,920 --> 06:08:10,798
are

5858
06:08:10,798 --> 06:08:13,280
well in relative terms a young company

5859
06:08:13,280 --> 06:08:15,760
like we've been around for five years

5860
06:08:15,760 --> 06:08:17,520
and we have a reputation

5861
06:08:17,520 --> 06:08:19,600
for being one of the best

5862
06:08:19,600 --> 06:08:21,920
so if you have a like the longer your

5863
06:08:21,920 --> 06:08:24,240
time span is and just keep in mind the

5864
06:08:24,240 --> 06:08:25,520
oldest

5865
06:08:25,520 --> 06:08:27,200
auditing companies in this space are

5866
06:08:27,200 --> 06:08:29,760
like five six years old so there's no

5867
06:08:29,760 --> 06:08:31,760
uh there's no others which are like have

5868
06:08:31,760 --> 06:08:34,240
been around for longer doing this

5869
06:08:34,240 --> 06:08:35,760
specific thing there's been there's

5870
06:08:35,760 --> 06:08:38,000
companies who have pivoted from doing

5871
06:08:38,000 --> 06:08:40,240
traditional security to smart contract

5872
06:08:40,240 --> 06:08:42,000
audits and they have been around for

5873
06:08:42,000 --> 06:08:44,320
longer they have a longer track record

5874
06:08:44,320 --> 06:08:46,320
but definitely this kind of track record

5875
06:08:46,320 --> 06:08:48,558
and knowing that the company has been

5876
06:08:48,558 --> 06:08:50,558
around for longer

5877
06:08:50,558 --> 06:08:53,120
helps with this kind of trust issue

5878
06:08:53,120 --> 06:08:54,558
because if

5879
06:08:54,558 --> 06:08:57,040
let's say you somehow managed to

5880
06:08:57,040 --> 06:09:00,958
um trick someone in trusting you and you

5881
06:09:00,958 --> 06:09:03,440
do this kind of thing you you withhold

5882
06:09:03,440 --> 06:09:05,760
an export you exploited

5883
06:09:05,760 --> 06:09:07,840
probably in a few months to a year your

5884
06:09:07,840 --> 06:09:09,520
company is no longer going to be trusted

5885
06:09:09,520 --> 06:09:12,558
by anyone because your audits always get

5886
06:09:12,558 --> 06:09:15,200
hacked you know what i mean so that's

5887
06:09:15,200 --> 06:09:18,878
what i think the way to balance this

5888
06:09:22,480 --> 06:09:25,840
okay any other questions

5889
06:09:28,320 --> 06:09:30,080
okay i have

5890
06:09:30,080 --> 06:09:32,320
a curiosity question

5891
06:09:32,320 --> 06:09:35,280
so suppose i wanted to exchange a large

5892
06:09:35,280 --> 06:09:37,040
sum of money and i knew it was going to

5893
06:09:37,040 --> 06:09:40,320
be a cross blocking kind of exchange

5894
06:09:40,320 --> 06:09:42,480
um should i just avoid that altogether

5895
06:09:42,480 --> 06:09:45,600
or what can i do as a consumer of this

5896
06:09:45,600 --> 06:09:47,680
entire process

5897
06:09:47,680 --> 06:09:51,760
definitely get advice from professionals

5898
06:09:51,760 --> 06:09:53,680
and don't just do it

5899
06:09:53,680 --> 06:09:54,878
um

5900
06:09:54,878 --> 06:09:57,040
sort of on your own because there are

5901
06:09:57,040 --> 06:09:59,520
way more problems sort of attacks

5902
06:09:59,520 --> 06:10:02,558
economic attacks that someone could

5903
06:10:02,558 --> 06:10:03,760
use

5904
06:10:03,760 --> 06:10:04,958
to

5905
06:10:04,958 --> 06:10:07,280
do an arbitrage on something that you're

5906
06:10:07,280 --> 06:10:09,440
doing right so if you're exchanging one

5907
06:10:09,440 --> 06:10:11,440
token for another

5908
06:10:11,440 --> 06:10:13,680
you have a lot of parameters which might

5909
06:10:13,680 --> 06:10:15,840
be like the margin that you're

5910
06:10:15,840 --> 06:10:18,718
willing to lose in the exchange and if

5911
06:10:18,718 --> 06:10:21,200
you don't properly set that margin

5912
06:10:21,200 --> 06:10:23,200
you might end up uh

5913
06:10:23,200 --> 06:10:25,200
being arbitraged by

5914
06:10:25,200 --> 06:10:27,200
there's an army of bots out there just

5915
06:10:27,200 --> 06:10:29,600
looking for these kind of opportunities

5916
06:10:29,600 --> 06:10:32,638
so definitely ask someone

5917
06:10:32,638 --> 06:10:34,240
for these kind of settings right and

5918
06:10:34,240 --> 06:10:36,798
then like this is in addition to all the

5919
06:10:36,798 --> 06:10:38,480
security issues that might be there

5920
06:10:38,480 --> 06:10:39,280
right

5921
06:10:39,280 --> 06:10:40,000
so

5922
06:10:40,000 --> 06:10:42,000
i'm not saying there are definitely ways

5923
06:10:42,000 --> 06:10:44,400
to do that i've done well i don't i

5924
06:10:44,400 --> 06:10:46,080
didn't transfer large sums of money but

5925
06:10:46,080 --> 06:10:47,760
i've done that myself

5926
06:10:47,760 --> 06:10:48,558
with

5927
06:10:48,558 --> 06:10:49,840
no

5928
06:10:49,840 --> 06:10:52,240
let's say issues afterwards right so

5929
06:10:52,240 --> 06:10:55,120
it's possible but you really need to to

5930
06:10:55,120 --> 06:10:57,440
uh be careful because like we've just

5931
06:10:57,440 --> 06:10:59,360
presented let's say

5932
06:10:59,360 --> 06:11:02,160
i don't know six seven hacks but keep in

5933
06:11:02,160 --> 06:11:03,920
mind there are like dozens and dozens of

5934
06:11:03,920 --> 06:11:05,920
bridges and some of them have never been

5935
06:11:05,920 --> 06:11:07,360
hacked yeah

5936
06:11:07,360 --> 06:11:09,520
exchanges exchanges on their set

5937
06:11:09,520 --> 06:11:11,360
themselves are bridges as well they're

5938
06:11:11,360 --> 06:11:12,878
just a different type of bridge they're

5939
06:11:12,878 --> 06:11:13,920
not from

5940
06:11:13,920 --> 06:11:16,558
chain to chain they're from bank account

5941
06:11:16,558 --> 06:11:19,040
to chain

5942
06:11:20,878 --> 06:11:21,920
super

5943
06:11:21,920 --> 06:11:25,199
any other questions then

5944
06:11:25,680 --> 06:11:27,520
all right thank you so much sebastian

5945
06:11:27,520 --> 06:11:30,760
thank you

5946
06:11:51,200 --> 06:11:54,200
so

5947
06:12:17,760 --> 06:12:20,240
don't worry you have plenty of time

5948
06:12:20,240 --> 06:12:23,240
yeah

5949
06:12:29,520 --> 06:12:33,000
wrong paper

5950
06:12:52,638 --> 06:12:55,638
foreign

5951
06:13:03,040 --> 06:13:06,040
okay

5952
06:13:48,000 --> 06:13:52,400
is everything under control okay

5953
06:13:53,680 --> 06:13:54,958
all right

5954
06:13:54,958 --> 06:13:56,000
so

5955
06:13:56,000 --> 06:13:59,040
we're up with our next talk

5956
06:13:59,040 --> 06:14:00,638
um so

5957
06:14:00,638 --> 06:14:02,878
our conference is called the layers

5958
06:14:02,878 --> 06:14:05,360
one of the subtitles is layer six and

5959
06:14:05,360 --> 06:14:07,200
this is really referring to the osi

5960
06:14:07,200 --> 06:14:10,320
model which is the presentation layer so

5961
06:14:10,320 --> 06:14:12,160
we thought it would be fun to call the

5962
06:14:12,160 --> 06:14:14,480
conference layer six it's our sixth year

5963
06:14:14,480 --> 06:14:17,040
layer six presentation yeah okay so you

5964
06:14:17,040 --> 06:14:19,840
get the joke um but layer six is really

5965
06:14:19,840 --> 06:14:22,160
concerned with protocol conversion

5966
06:14:22,160 --> 06:14:25,360
encryption decryption so on and so forth

5967
06:14:25,360 --> 06:14:28,400
and when we saw this talk

5968
06:14:28,400 --> 06:14:30,798
the talk is mime is broken

5969
06:14:30,798 --> 06:14:32,000
we thought

5970
06:14:32,000 --> 06:14:34,718
this is a definitely a layer six talk

5971
06:14:34,718 --> 06:14:37,440
and we have to have it so today i'm

5972
06:14:37,440 --> 06:14:40,160
going to introduce to you stephan ulrich

5973
06:14:40,160 --> 06:14:42,240
he is a software engineer security

5974
06:14:42,240 --> 06:14:46,480
researcher likes jogging and biking and

5975
06:14:46,480 --> 06:14:48,638
he's going to tell us why

5976
06:14:48,638 --> 06:14:50,480
mime is broken and what we should do

5977
06:14:50,480 --> 06:14:52,798
about it

5978
06:14:53,280 --> 06:14:54,718
okay

5979
06:14:54,718 --> 06:14:56,160
so on okay

5980
06:14:56,160 --> 06:14:58,558
yeah uh welcome

5981
06:14:58,558 --> 06:15:00,958
uh yeah my talk is today about uh why

5982
06:15:00,958 --> 06:15:03,360
mime is broken and okay the screen is a

5983
06:15:03,360 --> 06:15:05,360
little bit off let's see

5984
06:15:05,360 --> 06:15:07,600
um

5985
06:15:07,600 --> 06:15:12,080
so uh about me i'm yeah i'm the security

5986
06:15:12,080 --> 06:15:14,558
engineer security researcher fellow i'm

5987
06:15:14,558 --> 06:15:20,798
working uh 20 years plus at genoa gmbr

5988
06:15:20,878 --> 06:15:23,440
near munich

5989
06:15:23,440 --> 06:15:25,760
my focus of the work is not on breaking

5990
06:15:25,760 --> 06:15:27,920
things but on protecting what's already

5991
06:15:27,920 --> 06:15:29,120
broken

5992
06:15:29,120 --> 06:15:31,520
and i did a lot of firewall development

5993
06:15:31,520 --> 06:15:34,798
focusing on the application layer i

5994
06:15:34,798 --> 06:15:37,200
did eight years of collaboration with

5995
06:15:37,200 --> 06:15:39,840
academia and research projects

5996
06:15:39,840 --> 06:15:41,440
focusing on

5997
06:15:41,440 --> 06:15:43,760
defending against attacks via

5998
06:15:43,760 --> 06:15:47,120
meal and web and i'm currently involved

5999
06:15:47,120 --> 06:15:52,240
more in product and research strategies

6000
06:15:52,240 --> 06:15:54,718
uh yeah i'm back in again

6001
06:15:54,718 --> 06:15:57,360
it's a company

6002
06:15:57,360 --> 06:16:00,718
exactly 30 years old now with

6003
06:16:00,718 --> 06:16:04,718
360 plus employees in various locations

6004
06:16:04,718 --> 06:16:06,798
inside germany

6005
06:16:06,798 --> 06:16:11,040
we are a subsidiary of the bundesliga

6006
06:16:11,040 --> 06:16:13,600
and we build security solutions for iit

6007
06:16:13,600 --> 06:16:17,600
and ot and our focus is on sectors with

6008
06:16:17,600 --> 06:16:20,080
higher security requirements so public

6009
06:16:20,080 --> 06:16:22,000
sector critical infrastructure

6010
06:16:22,000 --> 06:16:23,200
structures

6011
06:16:23,200 --> 06:16:25,040
regulated industry

6012
06:16:25,040 --> 06:16:28,718
e-health etc and yeah of course if you

6013
06:16:28,718 --> 06:16:32,320
want to help you're welcome

6014
06:16:32,558 --> 06:16:35,280
uh the motivation of my research like i

6015
06:16:35,280 --> 06:16:40,080
said i did a lot of firewall development

6016
06:16:40,080 --> 06:16:42,400
at the application layer so i had to

6017
06:16:42,400 --> 06:16:45,680
implement application protocols and the

6018
06:16:45,680 --> 06:16:47,920
best way or the preferred way to

6019
06:16:47,920 --> 06:16:49,760
implement application protocols is to

6020
06:16:49,760 --> 06:16:51,680
actually look at the standards

6021
06:16:51,680 --> 06:16:53,120
not many do this actually when

6022
06:16:53,120 --> 06:16:56,080
implementing these protocols

6023
06:16:56,080 --> 06:16:58,718
yeah but when looking at the standards

6024
06:16:58,718 --> 06:17:00,798
and trying to find out how to implement

6025
06:17:00,798 --> 06:17:01,840
these

6026
06:17:01,840 --> 06:17:03,920
uh the problem is that these standards

6027
06:17:03,920 --> 06:17:04,878
are

6028
06:17:04,878 --> 06:17:08,958
typically very flexible and very complex

6029
06:17:08,958 --> 06:17:11,120
and they are unnecessarily unnecessary

6030
06:17:11,120 --> 06:17:13,760
flexible and complex they leave way too

6031
06:17:13,760 --> 06:17:16,480
much room for creative interpretation so

6032
06:17:16,480 --> 06:17:20,080
there are lots of edge cases with with

6033
06:17:20,080 --> 06:17:22,798
no clearly defined behavior

6034
06:17:22,798 --> 06:17:25,200
there's no defined behavior of protocol

6035
06:17:25,200 --> 06:17:28,320
errors there's a lot of short instead of

6036
06:17:28,320 --> 06:17:30,400
must be implemented

6037
06:17:30,400 --> 06:17:32,160
and they are partly conflicting with

6038
06:17:32,160 --> 06:17:35,280
previous standards of course all of this

6039
06:17:35,280 --> 06:17:38,160
conflicts kind of the security

6040
06:17:38,160 --> 06:17:40,440
as a result are that we have different

6041
06:17:40,440 --> 06:17:42,400
implementations which

6042
06:17:42,400 --> 06:17:43,680
interpret

6043
06:17:43,680 --> 06:17:45,840
uh especially edge cases in different

6044
06:17:45,840 --> 06:17:49,280
ways and this can of course be used by

6045
06:17:49,280 --> 06:17:51,040
attackers

6046
06:17:51,040 --> 06:17:53,360
so if the analysis system like a

6047
06:17:53,360 --> 06:17:55,280
firewall interprets the content

6048
06:17:55,280 --> 06:17:58,080
differently then the end user system

6049
06:17:58,080 --> 06:18:00,798
like in our case a male user agent uh

6050
06:18:00,798 --> 06:18:03,280
then we can pass attacks through the

6051
06:18:03,280 --> 06:18:05,360
firewall

6052
06:18:05,360 --> 06:18:07,600
so the focus of my

6053
06:18:07,600 --> 06:18:11,359
research in this case is

6054
06:18:12,558 --> 06:18:14,718
it's mime

6055
06:18:14,718 --> 06:18:18,160
mime is kind of a standard for rich meal

6056
06:18:18,160 --> 06:18:20,400
so what we have today structured male

6057
06:18:20,400 --> 06:18:23,600
binary attachments non-ski characters

6058
06:18:23,600 --> 06:18:25,440
uh and uh

6059
06:18:25,440 --> 06:18:28,320
what i explore here is how to use

6060
06:18:28,320 --> 06:18:30,160
different interpretations of mime to

6061
06:18:30,160 --> 06:18:32,480
bypass security systems so these are

6062
06:18:32,480 --> 06:18:34,718
analysis in mail filters firewalls

6063
06:18:34,718 --> 06:18:37,760
intrusion detection systems antivirus

6064
06:18:37,760 --> 06:18:40,320
versus the interpretation by mail user

6065
06:18:40,320 --> 06:18:42,718
agents or web frontends

6066
06:18:42,718 --> 06:18:44,878
i'm looking into bypassing milva

6067
06:18:44,878 --> 06:18:46,798
detection by content

6068
06:18:46,798 --> 06:18:49,200
using the icar test viewers and uh

6069
06:18:49,200 --> 06:18:51,680
bypassing detection or attachment

6070
06:18:51,680 --> 06:18:55,440
filtering by file name so if we can

6071
06:18:55,440 --> 06:18:56,320
make

6072
06:18:56,320 --> 06:18:57,920
the firewall belief that we have a

6073
06:18:57,920 --> 06:18:59,520
different file name

6074
06:18:59,520 --> 06:19:01,840
it's not a dot access not a zip then the

6075
06:19:01,840 --> 06:19:04,958
firewall will pass through the mail

6076
06:19:04,958 --> 06:19:08,080
there's similar research for http one

6077
06:19:08,080 --> 06:19:11,040
there's all this ports figure stuff

6078
06:19:11,040 --> 06:19:13,920
about http dsync attacks which are

6079
06:19:13,920 --> 06:19:15,840
targeting the server side

6080
06:19:15,840 --> 06:19:18,638
uh i did a lot of research on the http

6081
06:19:18,638 --> 06:19:21,520
site too but for targeting clients so

6082
06:19:21,520 --> 06:19:23,440
sending malicious responses or

6083
06:19:23,440 --> 06:19:26,080
unexpected responses by the server and

6084
06:19:26,080 --> 06:19:28,638
by passing firewalls this way

6085
06:19:28,638 --> 06:19:30,240
this research here

6086
06:19:30,240 --> 06:19:34,718
uh was primarily done in 2015 to 2018

6087
06:19:34,718 --> 06:19:37,120
during a research project

6088
06:19:37,120 --> 06:19:40,478
but i freshly updated it to make sure

6089
06:19:40,478 --> 06:19:43,200
that all the attacks still work and they

6090
06:19:43,200 --> 06:19:44,878
do

6091
06:19:44,878 --> 06:19:49,920
so um yeah to explore this topic

6092
06:19:49,920 --> 06:19:53,040
um i created a lot of different mails

6093
06:19:53,040 --> 06:19:54,080
with

6094
06:19:54,080 --> 06:19:56,878
different test cases so

6095
06:19:56,878 --> 06:19:59,200
nearly a few hundred males for

6096
06:19:59,200 --> 06:20:01,200
continental assists or

6097
06:20:01,200 --> 06:20:03,440
nearly 200 meals for bypassing extension

6098
06:20:03,440 --> 06:20:04,638
blocking

6099
06:20:04,638 --> 06:20:05,520
um

6100
06:20:05,520 --> 06:20:07,040
these males

6101
06:20:07,040 --> 06:20:10,558
if exported as a files or mail directory

6102
06:20:10,558 --> 06:20:13,440
and also as uh packet capture file to

6103
06:20:13,440 --> 06:20:15,600
check against intrusion action systems

6104
06:20:15,600 --> 06:20:18,478
and then i checked against several

6105
06:20:18,478 --> 06:20:21,920
systems like various mail user agents

6106
06:20:21,920 --> 06:20:24,320
various antivirus and male feather

6107
06:20:24,320 --> 06:20:25,600
products

6108
06:20:25,600 --> 06:20:28,798
uh some intuition detection symptoms in

6109
06:20:28,798 --> 06:20:30,878
firewall i won't mention here because

6110
06:20:30,878 --> 06:20:33,040
it's not a free one

6111
06:20:33,040 --> 06:20:37,320
and some libraries

6112
06:20:37,520 --> 06:20:38,718
okay

6113
06:20:38,718 --> 06:20:41,280
a short introduction into what mime

6114
06:20:41,280 --> 06:20:43,200
actually is

6115
06:20:43,200 --> 06:20:45,840
in the beginning there was about uh

6116
06:20:45,840 --> 06:20:48,558
before 1994 five

6117
06:20:48,558 --> 06:20:51,520
there was only esky there were only ski

6118
06:20:51,520 --> 06:20:55,280
males these had a line

6119
06:20:55,280 --> 06:20:57,840
length limit of thousand

6120
06:20:57,840 --> 06:21:00,558
thousand bytes and there was no kind of

6121
06:21:00,558 --> 06:21:02,958
structure no attachment or similar

6122
06:21:02,958 --> 06:21:05,840
inside 1996

6123
06:21:05,840 --> 06:21:07,840
we got these

6124
06:21:07,840 --> 06:21:10,000
mime rfc

6125
06:21:10,000 --> 06:21:13,440
which defined different aspects of how

6126
06:21:13,440 --> 06:21:16,717
to serialize

6127
06:21:16,840 --> 06:21:19,680
um structured information and non-sk

6128
06:21:19,680 --> 06:21:22,878
information into the original limits

6129
06:21:22,878 --> 06:21:26,638
so um yeah binary data uh structures

6130
06:21:26,638 --> 06:21:29,200
data like attachments and of course like

6131
06:21:29,200 --> 06:21:31,200
i said uh this is a standard which is

6132
06:21:31,200 --> 06:21:34,240
flexible which is complex underspecified

6133
06:21:34,240 --> 06:21:36,400
and has lots of room for creative

6134
06:21:36,400 --> 06:21:38,958
interpretation

6135
06:21:38,958 --> 06:21:41,440
a year later there were some additional

6136
06:21:41,440 --> 06:21:42,878
standards

6137
06:21:42,878 --> 06:21:44,840
one is called

6138
06:21:44,840 --> 06:21:47,600
disposition how to specify a file name

6139
06:21:47,600 --> 06:21:49,600
is how to specify if the attachment is

6140
06:21:49,600 --> 06:21:52,080
inline or external

6141
06:21:52,080 --> 06:21:53,440
and

6142
06:21:53,440 --> 06:21:54,558
there is

6143
06:21:54,558 --> 06:21:57,600
another standard for encoding of

6144
06:21:57,600 --> 06:22:00,878
non-ascii characters into

6145
06:22:00,878 --> 06:22:04,478
structured data like file names or so

6146
06:22:04,478 --> 06:22:06,320
for some reason they

6147
06:22:06,320 --> 06:22:08,320
didn't include this in the original one

6148
06:22:08,320 --> 06:22:11,760
so they needed yet another one which

6149
06:22:11,760 --> 06:22:14,080
implemented a totally different encoding

6150
06:22:14,080 --> 06:22:14,798
for

6151
06:22:14,798 --> 06:22:16,638
some reason

6152
06:22:16,638 --> 06:22:18,080
okay

6153
06:22:18,080 --> 06:22:20,320
if you look at the source code of a mail

6154
06:22:20,320 --> 06:22:22,718
we see the different standards applied

6155
06:22:22,718 --> 06:22:23,600
here

6156
06:22:23,600 --> 06:22:24,718
so

6157
06:22:24,718 --> 06:22:26,718
we have the subject which is an

6158
06:22:26,718 --> 06:22:29,440
unstructured header field

6159
06:22:29,440 --> 06:22:34,320
and there we see error of c 2047 so this

6160
06:22:34,320 --> 06:22:37,200
one which is about encoding characters

6161
06:22:37,200 --> 06:22:39,680
in the header what we have here is with

6162
06:22:39,680 --> 06:22:41,600
q is a

6163
06:22:41,600 --> 06:22:43,760
quoted printable encoding which means

6164
06:22:43,760 --> 06:22:46,638
that the characters the non-ascii

6165
06:22:46,638 --> 06:22:49,200
characters are encoded in some kind of

6166
06:22:49,200 --> 06:22:51,200
hex value so this

6167
06:22:51,200 --> 06:22:53,040
equals c dry

6168
06:22:53,040 --> 06:22:54,878
a c3 means

6169
06:22:54,878 --> 06:22:57,280
that it's a character

6170
06:22:57,280 --> 06:22:58,558
hex c

6171
06:22:58,558 --> 06:23:01,040
three and then we can look in the

6172
06:23:01,040 --> 06:23:03,600
utf art utf-8 and calling what the

6173
06:23:03,600 --> 06:23:05,280
second actually means

6174
06:23:05,280 --> 06:23:06,080
okay

6175
06:23:06,080 --> 06:23:08,558
uh then we have this kind of mine

6176
06:23:08,558 --> 06:23:10,958
preamble here which is

6177
06:23:10,958 --> 06:23:13,120
hidden in modern male clients so

6178
06:23:13,120 --> 06:23:15,600
basically all male clients we have today

6179
06:23:15,600 --> 06:23:18,958
it's only for the old male clients

6180
06:23:18,958 --> 06:23:22,558
so this is everything before the first

6181
06:23:22,558 --> 06:23:23,600
part

6182
06:23:23,600 --> 06:23:26,000
because we have here a multi-part male

6183
06:23:26,000 --> 06:23:29,200
which is defined in rfc 2046

6184
06:23:29,200 --> 06:23:31,840
and we have a boundary here defined to

6185
06:23:31,840 --> 06:23:34,958
split the male into different parts with

6186
06:23:34,958 --> 06:23:36,840
the final boundary

6187
06:23:36,840 --> 06:23:38,958
here uh

6188
06:23:38,958 --> 06:23:41,200
yeah then we have

6189
06:23:41,200 --> 06:23:43,840
for some parts we have a name so we can

6190
06:23:43,840 --> 06:23:45,520
have a name given in this way we can

6191
06:23:45,520 --> 06:23:48,000
have name given in this way this is

6192
06:23:48,000 --> 06:23:49,878
actually

6193
06:23:49,878 --> 06:23:53,200
rc2231 which has this kind of encoding

6194
06:23:53,200 --> 06:23:55,120
for long file names

6195
06:23:55,120 --> 06:23:56,718
which we can split over multiple

6196
06:23:56,718 --> 06:23:59,920
parameters because like i said the

6197
06:23:59,920 --> 06:24:03,440
uh limit for line lengths in male is a

6198
06:24:03,440 --> 06:24:05,280
thousand characters

6199
06:24:05,280 --> 06:24:08,478
and which has this kind of hex encoding

6200
06:24:08,478 --> 06:24:11,280
here which looks similar to what we have

6201
06:24:11,280 --> 06:24:12,878
in quoted principle but again it's

6202
06:24:12,878 --> 06:24:15,120
totally different because we have uh

6203
06:24:15,120 --> 06:24:16,638
here we have an equal sign here we

6204
06:24:16,638 --> 06:24:20,160
percent percents and so and yeah for

6205
06:24:20,160 --> 06:24:22,160
some reason they needed to make

6206
06:24:22,160 --> 06:24:23,520
everything

6207
06:24:23,520 --> 06:24:25,360
differently and then we have quoted

6208
06:24:25,360 --> 06:24:27,040
printable encoding here for the content

6209
06:24:27,040 --> 06:24:30,558
and base 64 encoding here uh for the

6210
06:24:30,558 --> 06:24:33,680
content of the attachment

6211
06:24:33,840 --> 06:24:35,120
okay

6212
06:24:35,120 --> 06:24:37,920
i show some selected examples of how

6213
06:24:37,920 --> 06:24:40,239
this

6214
06:24:40,400 --> 06:24:43,920
can be used to

6215
06:24:45,280 --> 06:24:47,680
create

6216
06:24:47,680 --> 06:24:49,040
edge cases

6217
06:24:49,040 --> 06:24:50,558
uh which are

6218
06:24:50,558 --> 06:24:52,558
theoretically allowed

6219
06:24:52,558 --> 06:24:53,440
or

6220
06:24:53,440 --> 06:24:55,120
especially not as they are not

6221
06:24:55,120 --> 06:24:57,360
especially forbidden by the standard

6222
06:24:57,360 --> 06:24:59,040
but where the

6223
06:24:59,040 --> 06:25:00,840
interpretation is

6224
06:25:00,840 --> 06:25:03,200
ambitious so

6225
06:25:03,200 --> 06:25:05,440
uh for example in this case you can

6226
06:25:05,440 --> 06:25:08,000
define two content transfer encodings

6227
06:25:08,000 --> 06:25:10,718
this is similar like attacks in http

6228
06:25:10,718 --> 06:25:12,718
where we have two content length sellers

6229
06:25:12,718 --> 06:25:14,400
with different values

6230
06:25:14,400 --> 06:25:16,320
and because we have two values here it's

6231
06:25:16,320 --> 06:25:18,478
not clear how this part so this is basic

6232
06:25:18,478 --> 06:25:20,638
before how this gets interpreted and

6233
06:25:20,638 --> 06:25:22,878
depending on the mail client we use it's

6234
06:25:22,878 --> 06:25:25,040
uh gets interpreted in a different way

6235
06:25:25,040 --> 06:25:27,600
and depends on the analysis software we

6236
06:25:27,600 --> 06:25:31,440
use or the library some manage to see

6237
06:25:31,440 --> 06:25:33,440
this and some

6238
06:25:33,440 --> 06:25:36,718
don't see this so sorry carter ids

6239
06:25:36,718 --> 06:25:39,200
doesn't see the attachments the right

6240
06:25:39,200 --> 06:25:41,760
attachment in this case

6241
06:25:41,760 --> 06:25:44,760
oops

6242
06:25:44,878 --> 06:25:46,400
slight variation

6243
06:25:46,400 --> 06:25:47,600
of this

6244
06:25:47,600 --> 06:25:49,440
we have one

6245
06:25:49,440 --> 06:25:51,840
field only but we have multiple values

6246
06:25:51,840 --> 06:25:53,680
inside

6247
06:25:53,680 --> 06:25:56,558
again some male clients

6248
06:25:56,558 --> 06:25:59,520
understand this and just take the base64

6249
06:25:59,520 --> 06:26:01,200
because it's the first one

6250
06:26:01,200 --> 06:26:04,558
no male client actually uh

6251
06:26:04,558 --> 06:26:06,000
unders

6252
06:26:06,000 --> 06:26:08,478
takes it it takes the last one but uh

6253
06:26:08,478 --> 06:26:10,478
outlook and apple mail

6254
06:26:10,478 --> 06:26:12,000
don't understand this at all and just

6255
06:26:12,000 --> 06:26:16,000
assume there's no encoding done

6256
06:26:16,798 --> 06:26:17,680
um

6257
06:26:17,680 --> 06:26:20,160
we can play similar games uh with the

6258
06:26:20,160 --> 06:26:21,920
content uh

6259
06:26:21,920 --> 06:26:23,920
with multi-part

6260
06:26:23,920 --> 06:26:27,040
male so we have a boundary c and we can

6261
06:26:27,040 --> 06:26:29,920
have two boundary definitions and uh the

6262
06:26:29,920 --> 06:26:33,200
correct one would be a bar here so this

6263
06:26:33,200 --> 06:26:35,120
is the first one and here's this is as

6264
06:26:35,120 --> 06:26:37,120
the last one and again depending on the

6265
06:26:37,120 --> 06:26:38,878
major client and depending on the

6266
06:26:38,878 --> 06:26:40,958
analysis software

6267
06:26:40,958 --> 06:26:44,320
we have different results

6268
06:26:44,558 --> 06:26:47,200
same thing again one field multiple

6269
06:26:47,200 --> 06:26:50,320
values and here again it switches

6270
06:26:50,320 --> 06:26:51,520
first

6271
06:26:51,520 --> 06:26:53,920
what was on this side and apple mill was

6272
06:26:53,920 --> 06:26:56,638
on this side he has a node switch and

6273
06:26:56,638 --> 06:26:58,638
it's the same with the various software

6274
06:26:58,638 --> 06:27:00,638
so we see here see

6275
06:27:00,638 --> 06:27:03,280
a majesty new which behaves the same as

6276
06:27:03,280 --> 06:27:05,840
pearl mime tools because it's used

6277
06:27:05,840 --> 06:27:08,840
inside

6278
06:27:09,120 --> 06:27:12,798
uh yeah and then uh different

6279
06:27:12,798 --> 06:27:13,760
area

6280
06:27:13,760 --> 06:27:16,718
uh the area of encodings there's a b64

6281
06:27:16,718 --> 06:27:20,000
encoding uh base64 basically means that

6282
06:27:20,000 --> 06:27:22,798
we have three bytes binary data

6283
06:27:22,798 --> 06:27:25,760
mapped to four byte ascii data so it's

6284
06:27:25,760 --> 06:27:28,320
already it's taken the first six bit

6285
06:27:28,320 --> 06:27:31,040
then the next six bit and so on until we

6286
06:27:31,040 --> 06:27:33,920
have uh have

6287
06:27:33,920 --> 06:27:36,399
18

6288
06:27:36,478 --> 06:27:40,320
20 24 bit three bytes uh binary and

6289
06:27:40,320 --> 06:27:42,958
mapses to 32

6290
06:27:42,958 --> 06:27:44,958
bits

6291
06:27:44,958 --> 06:27:46,320
which

6292
06:27:46,320 --> 06:27:48,638
uh are playing ascii

6293
06:27:48,638 --> 06:27:50,478
and if you have less than three bytes

6294
06:27:50,478 --> 06:27:52,878
and we have a padding so in this case we

6295
06:27:52,878 --> 06:27:54,958
have four bytes here which means we have

6296
06:27:54,958 --> 06:27:57,280
two bytes padding because we have to

6297
06:27:57,280 --> 06:27:59,280
fill in uh the last two bytes you get

6298
06:27:59,280 --> 06:28:01,520
six bytes and here in this case we have

6299
06:28:01,520 --> 06:28:03,440
two bytes this means you have one byte

6300
06:28:03,440 --> 06:28:04,878
padding and this padding is done with

6301
06:28:04,878 --> 06:28:06,958
the equal sign here

6302
06:28:06,958 --> 06:28:08,798
and

6303
06:28:08,798 --> 06:28:12,400
the standard or the rc

6304
06:28:12,400 --> 06:28:15,120
is not clear

6305
06:28:15,120 --> 06:28:16,878
in this case

6306
06:28:16,878 --> 06:28:17,760
if

6307
06:28:17,760 --> 06:28:20,878
what we have should be encoded in one

6308
06:28:20,878 --> 06:28:22,878
piece so that we have only a single

6309
06:28:22,878 --> 06:28:24,878
padding at most a single padding at the

6310
06:28:24,878 --> 06:28:27,440
end or if you can actually have multiple

6311
06:28:27,440 --> 06:28:28,400
pieces

6312
06:28:28,400 --> 06:28:32,000
it suggests that was maybe done this way

6313
06:28:32,000 --> 06:28:34,878
but there is no short or even better a

6314
06:28:34,878 --> 06:28:36,000
must

6315
06:28:36,000 --> 06:28:37,520
and that's why we have different

6316
06:28:37,520 --> 06:28:39,040
implementations so we have thunderbolt

6317
06:28:39,040 --> 06:28:41,120
apple mail which just accepts that it's

6318
06:28:41,120 --> 06:28:42,718
okay to do so

6319
06:28:42,718 --> 06:28:45,280
uh we have mode

6320
06:28:45,280 --> 06:28:47,360
just take the first part and you have

6321
06:28:47,360 --> 06:28:49,760
outlook which i don't know it takes the

6322
06:28:49,760 --> 06:28:52,080
first part and then says garbage and i

6323
06:28:52,080 --> 06:28:53,040
don't

6324
06:28:53,040 --> 06:28:54,400
actually know where this garbage comes

6325
06:28:54,400 --> 06:28:55,680
from

6326
06:28:55,680 --> 06:28:56,638
um

6327
06:28:56,638 --> 06:28:58,718
yeah and if you have a look at the

6328
06:28:58,718 --> 06:29:00,798
analysis software also the libraries we

6329
06:29:00,798 --> 06:29:03,600
see that most of these

6330
06:29:03,600 --> 06:29:06,638
plainly fail to see what major male

6331
06:29:06,638 --> 06:29:10,160
clients actually can do

6332
06:29:10,798 --> 06:29:13,040
but we have more encodings we have

6333
06:29:13,040 --> 06:29:15,120
quotable printable which is in the

6334
06:29:15,120 --> 06:29:17,920
standard tool but we have

6335
06:29:17,920 --> 06:29:19,280
also encodings which are not in the

6336
06:29:19,280 --> 06:29:21,280
standard but with a which are actually

6337
06:29:21,280 --> 06:29:24,558
uh supported by some male clients there

6338
06:29:24,558 --> 06:29:27,520
is this why ink encoding and this is an

6339
06:29:27,520 --> 06:29:29,200
encoding which comes from the area of

6340
06:29:29,200 --> 06:29:31,840
youth net news i don't know if somebody

6341
06:29:31,840 --> 06:29:34,240
still remembers it's

6342
06:29:34,240 --> 06:29:37,600
some 15 20 years ago

6343
06:29:37,600 --> 06:29:40,240
this time was it yes very efficient

6344
06:29:40,240 --> 06:29:42,718
encoding more efficient than base64 and

6345
06:29:42,718 --> 06:29:44,478
that's why it was used on usenet to

6346
06:29:44,478 --> 06:29:47,920
transfer transfer binary data

6347
06:29:47,920 --> 06:29:50,320
and because thunderbird

6348
06:29:50,320 --> 06:29:52,478
can still function as a news reader it

6349
06:29:52,478 --> 06:29:54,958
implements these encoding

6350
06:29:54,958 --> 06:29:57,920
but nobody else does and no analysis

6351
06:29:57,920 --> 06:30:01,440
software is able to see this

6352
06:30:03,360 --> 06:30:05,600
other is interesting encoding is uun

6353
06:30:05,600 --> 06:30:09,280
code this predates mime this predates

6354
06:30:09,280 --> 06:30:10,400
why ink

6355
06:30:10,400 --> 06:30:11,280
too

6356
06:30:11,280 --> 06:30:14,478
uh it was used in former times uh in

6357
06:30:14,478 --> 06:30:18,160
plain text meals to include some binary

6358
06:30:18,160 --> 06:30:21,200
data uh so we had some kind of file name

6359
06:30:21,200 --> 06:30:22,958
here inside the

6360
06:30:22,958 --> 06:30:24,798
part and then you had this encoding and

6361
06:30:24,798 --> 06:30:27,040
then there was an end and this encoding

6362
06:30:27,040 --> 06:30:29,520
is very similar to base64 only it's

6363
06:30:29,520 --> 06:30:31,760
mapped slightly different but the idea

6364
06:30:31,760 --> 06:30:33,120
is the same

6365
06:30:33,120 --> 06:30:36,478
uh yeah and this is actually a widely

6366
06:30:36,478 --> 06:30:39,120
supported in coding so we have major

6367
06:30:39,120 --> 06:30:41,920
milk clients which can do it

6368
06:30:41,920 --> 06:30:44,718
and we actually have major antivirus

6369
06:30:44,718 --> 06:30:47,040
products which can do it too

6370
06:30:47,040 --> 06:30:48,718
but

6371
06:30:48,718 --> 06:30:50,958
there are lots of variations so we can

6372
06:30:50,958 --> 06:30:53,120
have different transfer encoding times

6373
06:30:53,120 --> 06:30:55,520
vm sometimes we need the begin and then

6374
06:30:55,520 --> 06:30:58,878
sometimes you can skip it etc etc and uh

6375
06:30:58,878 --> 06:31:00,958
they all work slightly different so

6376
06:31:00,958 --> 06:31:02,638
there's lots of room

6377
06:31:02,638 --> 06:31:03,520
for

6378
06:31:03,520 --> 06:31:04,718
passing

6379
06:31:04,718 --> 06:31:07,840
bypassing analysis software

6380
06:31:07,840 --> 06:31:10,080
and then we have another strange feature

6381
06:31:10,080 --> 06:31:14,320
of mail which is comments in mail header

6382
06:31:14,320 --> 06:31:15,680
in mail fields

6383
06:31:15,680 --> 06:31:18,718
so the standard actually says that one

6384
06:31:18,718 --> 06:31:20,878
can place combat this is this part with

6385
06:31:20,878 --> 06:31:23,680
the parentheses around it

6386
06:31:23,680 --> 06:31:27,600
in several places freely inserted and

6387
06:31:27,600 --> 06:31:28,798
outlook

6388
06:31:28,798 --> 06:31:30,478
takes this to the next level it's

6389
06:31:30,478 --> 06:31:32,798
basically nearly everywhere this stuff

6390
06:31:32,798 --> 06:31:34,878
can be inserted and it simply gets

6391
06:31:34,878 --> 06:31:37,520
ignored so outlook sees in this case

6392
06:31:37,520 --> 06:31:38,400
this

6393
06:31:38,400 --> 06:31:39,200
i

6394
06:31:39,200 --> 06:31:41,520
bar as a boundary

6395
06:31:41,520 --> 06:31:43,520
all other

6396
06:31:43,520 --> 06:31:46,320
implementations don't see this bar and

6397
06:31:46,320 --> 06:31:47,600
yeah clam

6398
06:31:47,600 --> 06:31:49,680
can see it and there's this

6399
06:31:49,680 --> 06:31:52,878
firewall which can see us and there is a

6400
06:31:52,878 --> 06:31:56,160
python library but everybody else

6401
06:31:56,160 --> 06:31:58,718
cannot see this

6402
06:31:58,718 --> 06:32:01,680
okay this is about uh content filtering

6403
06:32:01,680 --> 06:32:03,760
and then we have the specification of

6404
06:32:03,760 --> 06:32:05,200
file lamps

6405
06:32:05,200 --> 06:32:06,400
uh

6406
06:32:06,400 --> 06:32:08,798
two few uh two small examples

6407
06:32:08,798 --> 06:32:12,558
uh like i said we have this uh rfc 2023

6408
06:32:12,558 --> 06:32:16,240
one which defined a new encoding for

6409
06:32:16,240 --> 06:32:19,040
file names and which defined how that

6410
06:32:19,040 --> 06:32:20,878
these can be split into multiple

6411
06:32:20,878 --> 06:32:22,080
parameters

6412
06:32:22,080 --> 06:32:23,840
uh so there is an

6413
06:32:23,840 --> 06:32:26,478
index for the parameter and uh yeah i

6414
06:32:26,478 --> 06:32:28,080
can split it over

6415
06:32:28,080 --> 06:32:30,000
multiple source indexes the order

6416
06:32:30,000 --> 06:32:32,958
actually does not matter which is

6417
06:32:32,958 --> 06:32:34,638
explicitly

6418
06:32:34,638 --> 06:32:36,958
specified as a standard

6419
06:32:36,958 --> 06:32:37,920
and

6420
06:32:37,920 --> 06:32:39,360
yeah

6421
06:32:39,360 --> 06:32:41,840
um like once see i can see thunderbird

6422
06:32:41,840 --> 06:32:45,280
apple mail not all supports this kind of

6423
06:32:45,280 --> 06:32:47,440
outlook has no idea what the standard is

6424
06:32:47,440 --> 06:32:48,320
at all

6425
06:32:48,320 --> 06:32:52,240
and the funny thing if i use a microsoft

6426
06:32:52,240 --> 06:32:53,680
exchange

6427
06:32:53,680 --> 06:32:57,440
it even transforms

6428
06:32:57,440 --> 06:33:00,558
this encoding this write encoding into a

6429
06:33:00,558 --> 06:33:02,400
wrong encoding because outlook does not

6430
06:33:02,400 --> 06:33:04,958
support it

6431
06:33:05,120 --> 06:33:06,320
but

6432
06:33:06,320 --> 06:33:08,478
i have this another standard this rfc

6433
06:33:08,478 --> 06:33:11,520
2047 which was

6434
06:33:11,520 --> 06:33:13,200
defined for

6435
06:33:13,200 --> 06:33:16,400
encoding of characters into unstructured

6436
06:33:16,400 --> 06:33:19,920
male fields and it specifically says

6437
06:33:19,920 --> 06:33:21,440
that

6438
06:33:21,440 --> 06:33:22,878
these encoding stuff should not be

6439
06:33:22,878 --> 06:33:25,120
quoted and should not be used inside of

6440
06:33:25,120 --> 06:33:27,360
content type of content disposition but

6441
06:33:27,360 --> 06:33:29,440
funny thing is

6442
06:33:29,440 --> 06:33:32,240
most supports this

6443
06:33:32,240 --> 06:33:33,680
and

6444
06:33:33,680 --> 06:33:35,600
yeah many analysis software supports us

6445
06:33:35,600 --> 06:33:37,520
too but there are several variations of

6446
06:33:37,520 --> 06:33:40,638
the topic so if i use some

6447
06:33:40,638 --> 06:33:43,840
strange encodings like otf16 it gets

6448
06:33:43,840 --> 06:33:45,040
weird and

6449
06:33:45,040 --> 06:33:45,920
i have

6450
06:33:45,920 --> 06:33:49,360
again ways to bypass firewalls

6451
06:33:49,360 --> 06:33:51,680
or analysis systems

6452
06:33:51,680 --> 06:33:53,520
okay so how to apply this knowledge in

6453
06:33:53,520 --> 06:33:55,520
the practice

6454
06:33:55,520 --> 06:33:57,680
a small thing i

6455
06:33:57,680 --> 06:33:59,840
create a mail

6456
06:33:59,840 --> 06:34:03,440
and i check this mail with a virus total

6457
06:34:03,440 --> 06:34:04,240
so

6458
06:34:04,240 --> 06:34:05,600
this mail

6459
06:34:05,600 --> 06:34:06,718
has

6460
06:34:06,718 --> 06:34:11,200
inside here base64 encoding uh

6461
06:34:11,200 --> 06:34:13,680
a zip file and the zip file contains the

6462
06:34:13,680 --> 06:34:17,680
ica test virus and like we can see there

6463
06:34:17,680 --> 06:34:21,840
are so the ground truth 38

6464
06:34:21,840 --> 06:34:24,240
products in

6465
06:34:24,240 --> 06:34:25,920
a virus total

6466
06:34:25,920 --> 06:34:29,760
can actually parse this male and can

6467
06:34:29,760 --> 06:34:32,400
detect the virus inside so

6468
06:34:32,400 --> 06:34:33,760
nice

6469
06:34:33,760 --> 06:34:34,958
let's see

6470
06:34:34,958 --> 06:34:37,520
if we make a small change we add another

6471
06:34:37,520 --> 06:34:39,840
transfer encoding here and we can see

6472
06:34:39,840 --> 06:34:40,798
the

6473
06:34:40,798 --> 06:34:43,280
number goes slightly down if we switch

6474
06:34:43,280 --> 06:34:46,400
the order it's not much different and if

6475
06:34:46,400 --> 06:34:47,360
we

6476
06:34:47,360 --> 06:34:49,120
specify a content transfer encoding

6477
06:34:49,120 --> 06:34:50,878
which is

6478
06:34:50,878 --> 06:34:52,240
something which doesn't exist like the

6479
06:34:52,240 --> 06:34:53,600
x66

6480
06:34:53,600 --> 06:34:55,440
then yeah it goes down but there are

6481
06:34:55,440 --> 06:34:57,440
still a lot of

6482
06:34:57,440 --> 06:34:59,440
scanners which will

6483
06:34:59,440 --> 06:35:01,840
simply have a heuristic and

6484
06:35:01,840 --> 06:35:04,638
see this is base64 encoding and will

6485
06:35:04,638 --> 06:35:06,718
try to analyze it

6486
06:35:06,718 --> 06:35:08,080
okay

6487
06:35:08,080 --> 06:35:09,680
small step

6488
06:35:09,680 --> 06:35:10,558
uh

6489
06:35:10,558 --> 06:35:12,638
we don't use a single chunk for our

6490
06:35:12,638 --> 06:35:14,718
base64 but we are actually multiple

6491
06:35:14,718 --> 06:35:18,000
chunks for two bytes so we get an uh

6492
06:35:18,000 --> 06:35:20,240
padding uh one character betting after

6493
06:35:20,240 --> 06:35:21,760
after each chunk

6494
06:35:21,760 --> 06:35:24,400
and now the number goes way down and

6495
06:35:24,400 --> 06:35:27,680
even if we take uh back all this stuff

6496
06:35:27,680 --> 06:35:32,320
we did before here is it still very low

6497
06:35:32,320 --> 06:35:34,080
and last step

6498
06:35:34,080 --> 06:35:36,160
uh we just

6499
06:35:36,160 --> 06:35:37,120
add

6500
06:35:37,120 --> 06:35:39,920
multiple boundaries here with different

6501
06:35:39,920 --> 06:35:41,920
implementation and now

6502
06:35:41,920 --> 06:35:43,600
we have

6503
06:35:43,600 --> 06:35:45,680
no antivirus product

6504
06:35:45,680 --> 06:35:47,760
supports it anymore if we look at the

6505
06:35:47,760 --> 06:35:50,000
meal in thunderbird we can still

6506
06:35:50,000 --> 06:35:52,160
normally just extract it have a look at

6507
06:35:52,160 --> 06:35:53,600
it

6508
06:35:53,600 --> 06:35:56,478
and if we

6509
06:35:56,798 --> 06:35:59,600
remove this content transfer confusion

6510
06:35:59,600 --> 06:36:02,000
here it's still only one antivirus

6511
06:36:02,000 --> 06:36:05,120
product which will see this

6512
06:36:05,120 --> 06:36:06,718
okay

6513
06:36:06,718 --> 06:36:09,680
slightly different area

6514
06:36:09,680 --> 06:36:12,240
dkim signatures i don't know who is

6515
06:36:12,240 --> 06:36:13,520
familiar with

6516
06:36:13,520 --> 06:36:15,200
dkim and dmarc

6517
06:36:15,200 --> 06:36:17,840
the basic idea is that we want to

6518
06:36:17,840 --> 06:36:19,360
protect us

6519
06:36:19,360 --> 06:36:22,160
against the spoofing of the sender

6520
06:36:22,160 --> 06:36:25,120
and the visible sender inside the mirror

6521
06:36:25,120 --> 06:36:29,440
is inside the mail from header and jmark

6522
06:36:29,440 --> 06:36:33,360
basically says that this from header

6523
06:36:33,360 --> 06:36:35,280
must the domain as a from header must be

6524
06:36:35,280 --> 06:36:38,240
aligned with uh either

6525
06:36:38,240 --> 06:36:40,558
send a permitted framework for spf or

6526
06:36:40,558 --> 06:36:43,440
jkim signatures and taken signature is

6527
06:36:43,440 --> 06:36:46,080
actually only a

6528
06:36:46,080 --> 06:36:48,000
it's a cryptographic signature over

6529
06:36:48,000 --> 06:36:49,920
parts of the header and over

6530
06:36:49,920 --> 06:36:51,120
the body

6531
06:36:51,120 --> 06:36:52,558
and

6532
06:36:52,558 --> 06:36:55,200
we can check this and it's independent

6533
06:36:55,200 --> 06:36:57,840
from the transport of the mail so we can

6534
06:36:57,840 --> 06:37:00,080
redistribute the mail and this uh

6535
06:37:00,080 --> 06:37:02,240
dickham signature does not change at all

6536
06:37:02,240 --> 06:37:05,360
which is very nice

6537
06:37:05,520 --> 06:37:07,440
but

6538
06:37:07,440 --> 06:37:12,320
the ecom standard relies on

6539
06:37:12,320 --> 06:37:13,280
mime

6540
06:37:13,280 --> 06:37:15,360
being not broken

6541
06:37:15,360 --> 06:37:16,478
and

6542
06:37:16,478 --> 06:37:20,160
the dkim standard itself is

6543
06:37:20,160 --> 06:37:22,638
insufficient too so there

6544
06:37:22,638 --> 06:37:26,240
are no requirements which header fields

6545
06:37:26,240 --> 06:37:29,280
like content type like uh

6546
06:37:29,280 --> 06:37:31,600
subject or so need to be protected there

6547
06:37:31,600 --> 06:37:33,120
are some recommendations but these

6548
06:37:33,120 --> 06:37:35,440
recommendations are insufficient

6549
06:37:35,440 --> 06:37:36,718
there

6550
06:37:36,718 --> 06:37:39,200
is a way in the standard to protect

6551
06:37:39,200 --> 06:37:41,120
header fields to make sure that no

6552
06:37:41,120 --> 06:37:43,360
critical header fields can be added

6553
06:37:43,360 --> 06:37:46,000
but there is no requirement to do so

6554
06:37:46,000 --> 06:37:47,600
which means that

6555
06:37:47,600 --> 06:37:50,160
typically implementations like in openg

6556
06:37:50,160 --> 06:37:51,360
chem or so

6557
06:37:51,360 --> 06:37:52,958
or

6558
06:37:52,958 --> 06:37:54,958
basically in any product we see outside

6559
06:37:54,958 --> 06:37:56,240
are broken

6560
06:37:56,240 --> 06:38:00,080
they don't properly protect the headers

6561
06:38:00,080 --> 06:38:01,680
additionally

6562
06:38:01,680 --> 06:38:05,120
dcam allows us to sign only parts of

6563
06:38:05,120 --> 06:38:07,440
samir the idea is that

6564
06:38:07,440 --> 06:38:08,240
some

6565
06:38:08,240 --> 06:38:10,798
software could add some food and the

6566
06:38:10,798 --> 06:38:13,440
signature should be the same

6567
06:38:13,440 --> 06:38:15,280
and they say that this is a security

6568
06:38:15,280 --> 06:38:18,558
problem but nevertheless they allow it

6569
06:38:18,558 --> 06:38:21,040
okay so what we can can we do

6570
06:38:21,040 --> 06:38:24,638
this is a mail i got um about

6571
06:38:24,638 --> 06:38:26,558
oh six years ago

6572
06:38:26,558 --> 06:38:29,120
and uh from um

6573
06:38:29,120 --> 06:38:32,798
uh deutsche bust which

6574
06:38:33,120 --> 06:38:35,520
is a classic sender a typical center for

6575
06:38:35,520 --> 06:38:37,040
spoofing

6576
06:38:37,040 --> 06:38:39,840
and uh we have to say the signature here

6577
06:38:39,840 --> 06:38:43,360
and the deconstruction it says that uh

6578
06:38:43,360 --> 06:38:45,920
not the full body is signed but yeah

6579
06:38:45,920 --> 06:38:48,638
only up to a specific part like here at

6580
06:38:48,638 --> 06:38:49,920
the end

6581
06:38:49,920 --> 06:38:52,320
uh the mail although

6582
06:38:52,320 --> 06:38:54,080
they can picture also says that we have

6583
06:38:54,080 --> 06:38:56,558
some fields signed here

6584
06:38:56,558 --> 06:38:57,840
but uh

6585
06:38:57,840 --> 06:38:59,920
these are only included once that means

6586
06:38:59,920 --> 06:39:02,798
the existing field is including but

6587
06:39:02,798 --> 06:39:04,400
i can freely add

6588
06:39:04,400 --> 06:39:06,080
additional fields these are not included

6589
06:39:06,080 --> 06:39:07,680
in signature

6590
06:39:07,680 --> 06:39:10,638
so what i can do is here i can add

6591
06:39:10,638 --> 06:39:12,958
another date i can add another two

6592
06:39:12,958 --> 06:39:16,000
header i can add another content type

6593
06:39:16,000 --> 06:39:18,638
and i can freely

6594
06:39:18,638 --> 06:39:21,440
put stuff at the end which means with

6595
06:39:21,440 --> 06:39:24,320
this change content type

6596
06:39:24,320 --> 06:39:26,638
i have a different boundary which means

6597
06:39:26,638 --> 06:39:28,638
all this part up to this boundary is

6598
06:39:28,638 --> 06:39:30,798
seen only as a mind preamble is not

6599
06:39:30,798 --> 06:39:32,958
visible in the middle client today but

6600
06:39:32,958 --> 06:39:36,478
instead this part after that is shown

6601
06:39:36,478 --> 06:39:38,400
and

6602
06:39:38,400 --> 06:39:40,558
if i deliver this mail

6603
06:39:40,558 --> 06:39:44,240
i can see that this part is shown and i

6604
06:39:44,240 --> 06:39:46,878
can see that daycam is still okay and

6605
06:39:46,878 --> 06:39:49,920
the the properties of mail show that the

6606
06:39:49,920 --> 06:39:52,798
date has changed the message id

6607
06:39:52,798 --> 06:39:55,840
uh is i didn't know if i changed it in

6608
06:39:55,840 --> 06:39:58,320
previous example but i can see for uh

6609
06:39:58,320 --> 06:40:02,958
that daycam and denmark both pass

6610
06:40:03,760 --> 06:40:06,638
so final words

6611
06:40:07,040 --> 06:40:10,718
are there any solutions to this problem

6612
06:40:11,200 --> 06:40:12,638
yeah

6613
06:40:12,638 --> 06:40:14,958
maybe the problems are hard to fix there

6614
06:40:14,958 --> 06:40:17,280
are zillions of mime implementations and

6615
06:40:17,280 --> 06:40:19,840
scripts in the wild is often broken

6616
06:40:19,840 --> 06:40:22,000
there is no money pulley on

6617
06:40:22,000 --> 06:40:24,718
implementations which can could be used

6618
06:40:24,718 --> 06:40:27,920
to enforce a minimal quality

6619
06:40:27,920 --> 06:40:30,878
we have such monopoly browsers

6620
06:40:30,878 --> 06:40:33,200
one can try to block

6621
06:40:33,200 --> 06:40:35,360
such edge cases

6622
06:40:35,360 --> 06:40:37,200
but this can cause

6623
06:40:37,200 --> 06:40:40,000
unbearable qualitatory effects we have

6624
06:40:40,000 --> 06:40:42,320
i've seen this in the practice

6625
06:40:42,320 --> 06:40:45,360
uh there's simply too much junk in the

6626
06:40:45,360 --> 06:40:48,798
real world and um in

6627
06:40:48,798 --> 06:40:51,200
dubbed operation beats security it

6628
06:40:51,200 --> 06:40:52,958
worked before we installed instead the

6629
06:40:52,958 --> 06:40:56,000
firewall there's a way to sanitize the

6630
06:40:56,000 --> 06:40:59,120
wheels but this can break stuff too so

6631
06:40:59,120 --> 06:41:01,520
it will break jacob's signature pgp and

6632
06:41:01,520 --> 06:41:05,040
s mime signatures i've seen this too

6633
06:41:05,040 --> 06:41:06,240
and

6634
06:41:06,240 --> 06:41:08,000
ultimately one can simply lock the

6635
06:41:08,000 --> 06:41:09,440
problems

6636
06:41:09,440 --> 06:41:10,878
and then hope that somebody cares

6637
06:41:10,878 --> 06:41:13,760
actually about the locks

6638
06:41:15,040 --> 06:41:16,740
thank you

6639
06:41:16,740 --> 06:41:24,558
[Applause]

6640
06:41:24,558 --> 06:41:27,520
so do we have any questions for stefan

6641
06:41:27,520 --> 06:41:32,320
and his very optimistic outlook on mime

6642
06:41:35,520 --> 06:41:38,000
so steph and i have one question and you

6643
06:41:38,000 --> 06:41:40,320
kind of addressed it in your last slide

6644
06:41:40,320 --> 06:41:43,920
if i am an administrator of an email

6645
06:41:43,920 --> 06:41:46,400
service what what can i do is there

6646
06:41:46,400 --> 06:41:48,718
anything that i should

6647
06:41:48,718 --> 06:41:51,360
do today to protect against

6648
06:41:51,360 --> 06:41:54,400
attacks like this

6649
06:41:56,478 --> 06:41:58,500
i think there's no good answer to this

6650
06:41:58,500 --> 06:42:00,958
[Laughter]

6651
06:42:00,958 --> 06:42:01,920
because

6652
06:42:01,920 --> 06:42:04,160
actually we've built in our product all

6653
06:42:04,160 --> 06:42:06,400
the other protections against these

6654
06:42:06,400 --> 06:42:09,520
attacks i have shown and we had to

6655
06:42:09,520 --> 06:42:12,000
make a lot of these protections uh

6656
06:42:12,000 --> 06:42:14,160
optional because there are a lot of junk

6657
06:42:14,160 --> 06:42:16,558
mails outside which are not spam meals

6658
06:42:16,558 --> 06:42:18,558
which are real males but which are

6659
06:42:18,558 --> 06:42:21,440
actually invalid

6660
06:42:22,958 --> 06:42:26,239
okay there's another question

6661
06:42:27,760 --> 06:42:29,040
i'm loud

6662
06:42:29,040 --> 06:42:33,120
hi um have you have you taken a look at

6663
06:42:33,120 --> 06:42:35,040
sometimes when you forward an email with

6664
06:42:35,040 --> 06:42:38,080
attachments and then in different kinds

6665
06:42:38,080 --> 06:42:39,760
of email clients or webmail clients they

6666
06:42:39,760 --> 06:42:41,760
get unfolded

6667
06:42:41,760 --> 06:42:42,958
even though

6668
06:42:42,958 --> 06:42:44,558
it's an attachment

6669
06:42:44,558 --> 06:42:47,120
have you been looking into this kind of

6670
06:42:47,120 --> 06:42:49,840
scenario because i

6671
06:42:49,840 --> 06:42:51,520
used to fix

6672
06:42:51,520 --> 06:42:53,840
a bug in a webmail client where there's

6673
06:42:53,840 --> 06:42:55,680
an attachment and

6674
06:42:55,680 --> 06:42:58,638
a forward with an attachment and they

6675
06:42:58,638 --> 06:43:01,440
were unfolded and this kind of helps

6676
06:43:01,440 --> 06:43:02,638
sometimes

6677
06:43:02,638 --> 06:43:05,920
mitigating also or some bypass some

6678
06:43:05,920 --> 06:43:08,240
firewall rules

6679
06:43:08,240 --> 06:43:12,478
yeah forwarding meals is it

6680
06:43:12,478 --> 06:43:13,920
a strange thing they are there there are

6681
06:43:13,920 --> 06:43:15,280
two options to follow the mills the

6682
06:43:15,280 --> 06:43:16,798
inline forwarding at the forwardings

6683
06:43:16,798 --> 06:43:18,240
attachment

6684
06:43:18,240 --> 06:43:20,000
and uh supporting this attachment is

6685
06:43:20,000 --> 06:43:22,320
supposed to just uh put in the urgent

6686
06:43:22,320 --> 06:43:24,558
email but one can actually modify it and

6687
06:43:24,558 --> 06:43:26,798
then there are different problems on top

6688
06:43:26,798 --> 06:43:29,760
of this because if the original mail was

6689
06:43:29,760 --> 06:43:32,400
transferred over a path which is

6690
06:43:32,400 --> 06:43:34,080
eight byte clean

6691
06:43:34,080 --> 06:43:36,798
and uh then i forward this mail and the

6692
06:43:36,798 --> 06:43:38,400
the next pass is not eight byte clean

6693
06:43:38,400 --> 06:43:41,200
which is a traditional password smtp

6694
06:43:41,200 --> 06:43:46,878
then i might need to rewrite everything

6695
06:43:48,638 --> 06:43:50,000
so it can

6696
06:43:50,000 --> 06:43:53,120
it could be used to kind of sanitize but

6697
06:43:53,120 --> 06:43:55,840
it will then also it might also break it

6698
06:43:55,840 --> 06:43:58,160
might break the signatures this might

6699
06:43:58,160 --> 06:44:02,000
break pgp and as my signatures

6700
06:44:03,440 --> 06:44:04,878
you mentioned that you generated a lot

6701
06:44:04,878 --> 06:44:06,558
of test cases

6702
06:44:06,558 --> 06:44:09,760
are you aware of any publicly available

6703
06:44:09,760 --> 06:44:11,920
weaponized frameworks to exploit these

6704
06:44:11,920 --> 06:44:13,840
issues so that i can target specific

6705
06:44:13,840 --> 06:44:16,478
setups and generate a mail that will

6706
06:44:16,478 --> 06:44:19,760
bypass these checks now i'm not aware of

6707
06:44:19,760 --> 06:44:21,760
any other research in this area in this

6708
06:44:21,760 --> 06:44:24,000
steps but if you want to start

6709
06:44:24,000 --> 06:44:25,280
successful

6710
06:44:25,280 --> 06:44:27,360
come to me and i give you test cases and

6711
06:44:27,360 --> 06:44:30,000
the framework to generate these

6712
06:44:30,000 --> 06:44:32,638
awesome thanks

6713
06:44:32,638 --> 06:44:35,200
all right um i'm that should be the last

6714
06:44:35,200 --> 06:44:37,600
question we've reached 15 o'clock please

6715
06:44:37,600 --> 06:44:39,200
give stephen a hand

6716
06:44:39,200 --> 06:44:42,160
her mind is broken

6717
06:44:44,240 --> 06:44:46,240
and we now have a 30 minute leg

6718
06:44:46,240 --> 06:44:48,798
stretcher break so go out get some air

6719
06:44:48,798 --> 06:44:51,790
and come back for the next talks

6720
06:44:51,790 --> 06:44:54,880
[Music]

6721
06:45:02,200 --> 06:45:06,159
[Music]

6722
07:12:38,080 --> 07:12:40,558
nobody has rung the bell

6723
07:12:40,558 --> 07:12:43,360
which means people are continuing to eat

6724
07:12:43,360 --> 07:12:45,680
not realizing it's only two minutes

6725
07:12:45,680 --> 07:12:48,320
before begin

6726
07:12:48,320 --> 07:12:50,638
tension builds will they get into the

6727
07:12:50,638 --> 07:12:54,000
room in time will we have enough time

6728
07:12:54,000 --> 07:12:58,400
for this whole talk we will don't worry

6729
07:12:58,400 --> 07:13:01,920
but i do hope someone rings the bell

6730
07:13:02,400 --> 07:13:05,040
the bell is a very powerful tool

6731
07:13:05,040 --> 07:13:08,958
it's soft yet commanding

6732
07:13:10,400 --> 07:13:12,320
philosophy on bells

6733
07:13:12,320 --> 07:13:14,160
at b-sides munich

6734
07:13:14,160 --> 07:13:15,520
layer six

6735
07:13:15,520 --> 07:13:19,320
you heard it here first

6736
07:13:21,680 --> 07:13:24,320
i hear the gentle bell ringing

6737
07:13:24,320 --> 07:13:27,280
now it's a more insistent ring

6738
07:13:27,280 --> 07:13:30,840
come to the room

6739
07:14:07,120 --> 07:14:09,020
ring my bell

6740
07:14:09,020 --> 07:14:10,638
[Music]

6741
07:14:10,638 --> 07:14:14,280
ring my belly

6742
07:14:21,680 --> 07:14:24,240
join us folks have a seat we're about to

6743
07:14:24,240 --> 07:14:27,240
begin

6744
07:14:42,400 --> 07:14:45,400
so

6745
07:14:49,840 --> 07:14:52,638
all right let's get rolling so welcome

6746
07:14:52,638 --> 07:14:54,320
back from break

6747
07:14:54,320 --> 07:14:59,280
we are about to have our next talk um

6748
07:14:59,280 --> 07:15:01,920
according to our next speaker um johan

6749
07:15:01,920 --> 07:15:03,280
silam

6750
07:15:03,280 --> 07:15:07,520
25 of internet traffic is bot traffic

6751
07:15:07,520 --> 07:15:09,840
and it's not like the friendly bots that

6752
07:15:09,840 --> 07:15:12,798
you see in the television shows but it's

6753
07:15:12,798 --> 07:15:15,200
bad bots and so we're going to learn all

6754
07:15:15,200 --> 07:15:17,600
about bad bots today and what they can

6755
07:15:17,600 --> 07:15:19,840
do and how they do it

6756
07:15:19,840 --> 07:15:23,360
so johan is a security researcher and

6757
07:15:23,360 --> 07:15:25,440
one of his favorite sports is table

6758
07:15:25,440 --> 07:15:27,520
tennis so keep that in mind when you

6759
07:15:27,520 --> 07:15:29,360
talk to him after about his very cool

6760
07:15:29,360 --> 07:15:32,080
talk so without further ado

6761
07:15:32,080 --> 07:15:33,680
take it away johan

6762
07:15:33,680 --> 07:15:36,840
thank you

6763
07:15:42,878 --> 07:15:45,520
so hello everybody nice to meet you

6764
07:15:45,520 --> 07:15:48,320
my name is uh as

6765
07:15:48,320 --> 07:15:49,920
jane said

6766
07:15:49,920 --> 07:15:53,200
i'm working for improver company

6767
07:15:53,200 --> 07:15:55,200
uh and this talk is going to talk uh to

6768
07:15:55,200 --> 07:15:58,958
be about uh advanced bot landscape

6769
07:15:58,958 --> 07:16:00,878
so before we start i give you a short

6770
07:16:00,878 --> 07:16:02,798
introduction about myself

6771
07:16:02,798 --> 07:16:03,920
so

6772
07:16:03,920 --> 07:16:05,920
secret researcher with four years of

6773
07:16:05,920 --> 07:16:08,638
experience in cyber security

6774
07:16:08,638 --> 07:16:10,320
i spent the major part of my time

6775
07:16:10,320 --> 07:16:12,878
analyzing malwares but more recently i

6776
07:16:12,878 --> 07:16:14,798
spent time on the web application

6777
07:16:14,798 --> 07:16:16,638
security i tried to understand the

6778
07:16:16,638 --> 07:16:18,718
advanced particle system try to see

6779
07:16:18,718 --> 07:16:20,320
their behavior if there are ways to

6780
07:16:20,320 --> 07:16:23,680
detect them or even block them

6781
07:16:23,680 --> 07:16:25,280
so this is the agenda of the session

6782
07:16:25,280 --> 07:16:27,600
today

6783
07:16:27,600 --> 07:16:29,280
first we will see together the advanced

6784
07:16:29,280 --> 07:16:31,120
particle system

6785
07:16:31,120 --> 07:16:33,280
then i will show you the internal

6786
07:16:33,280 --> 07:16:35,680
structure of an advanced bot

6787
07:16:35,680 --> 07:16:37,520
and lastly we will see together a few

6788
07:16:37,520 --> 07:16:39,360
efficient techniques and the detection

6789
07:16:39,360 --> 07:16:42,240
that we can provide

6790
07:16:42,320 --> 07:16:44,718
so let's go

6791
07:16:44,718 --> 07:16:48,000
but before we start sorry

6792
07:16:48,000 --> 07:16:50,638
short definition of bots

6793
07:16:50,638 --> 07:16:52,878
bots are softwares that automate action

6794
07:16:52,878 --> 07:16:54,398
on the internet

6795
07:16:54,398 --> 07:16:56,478
um there could be good bots for example

6796
07:16:56,478 --> 07:16:58,558
the google googlebot that's cooling the

6797
07:16:58,558 --> 07:17:00,320
web in order to improve its search

6798
07:17:00,320 --> 07:17:01,520
engine result

6799
07:17:01,520 --> 07:17:03,920
and you have bad bots for example the

6800
07:17:03,920 --> 07:17:05,840
ones that are scanning

6801
07:17:05,840 --> 07:17:06,718
all

6802
07:17:06,718 --> 07:17:08,080
the internet in search of vulnerable

6803
07:17:08,080 --> 07:17:09,760
websites

6804
07:17:09,760 --> 07:17:11,040
the difference between the two is the

6805
07:17:11,040 --> 07:17:13,840
content of the server being reached by

6806
07:17:13,840 --> 07:17:16,558
the by those bots for example a bot

6807
07:17:16,558 --> 07:17:18,718
that's not respecting the robots.txt

6808
07:17:18,718 --> 07:17:21,200
file at the root of the website will

6809
07:17:21,200 --> 07:17:24,798
definitely not be a good bot

6810
07:17:24,958 --> 07:17:28,958
okay so the market of bad bots is huge

6811
07:17:28,958 --> 07:17:30,798
the market just talking about ticket

6812
07:17:30,798 --> 07:17:33,360
scalping it was estimated to be roughly

6813
07:17:33,360 --> 07:17:36,080
eight billion dollars in 2017 and we can

6814
07:17:36,080 --> 07:17:38,000
see that the market of bots is growing

6815
07:17:38,000 --> 07:17:40,638
general uh web scrapper uh software

6816
07:17:40,638 --> 07:17:42,558
market was evaluated to half a billion

6817
07:17:42,558 --> 07:17:45,040
dollar uh and this was like almost this

6818
07:17:45,040 --> 07:17:46,478
year

6819
07:17:46,478 --> 07:17:48,798
you have communities gathering

6820
07:17:48,798 --> 07:17:51,120
hundreds of thousands of people

6821
07:17:51,120 --> 07:17:53,680
exchanging advices about bots selling

6822
07:17:53,680 --> 07:17:55,760
bots buying bots

6823
07:17:55,760 --> 07:17:57,040
and there are many ones that i'm going

6824
07:17:57,040 --> 07:17:58,080
to show you

6825
07:17:58,080 --> 07:18:00,798
in this presentation so this is such a

6826
07:18:00,798 --> 07:18:02,478
huge market

6827
07:18:02,478 --> 07:18:04,398
that very efficient bots can be very

6828
07:18:04,398 --> 07:18:06,798
expensive here is the example of a bot

6829
07:18:06,798 --> 07:18:09,440
called the wrath aio

6830
07:18:09,440 --> 07:18:11,680
out of stock in its own website

6831
07:18:11,680 --> 07:18:14,558
and on the recent market you can find it

6832
07:18:14,558 --> 07:18:16,558
for no less than one thousand seven

6833
07:18:16,558 --> 07:18:18,398
hundred dollar

6834
07:18:18,398 --> 07:18:20,798
here aiok means all in one

6835
07:18:20,798 --> 07:18:23,680
that is this bot is able to uh to scalp

6836
07:18:23,680 --> 07:18:25,440
actually it's an advanced sculpting bot

6837
07:18:25,440 --> 07:18:27,520
to all to two

6838
07:18:27,520 --> 07:18:29,040
all sites

6839
07:18:29,040 --> 07:18:33,040
uh developed with the shopify framework

6840
07:18:34,000 --> 07:18:37,200
uh okay so now let's talk about about

6841
07:18:37,200 --> 07:18:39,200
traffic in terms of numbers so i've been

6842
07:18:39,200 --> 07:18:42,160
spoiled a bit but it's completely okay

6843
07:18:42,160 --> 07:18:44,398
so

6844
07:18:44,958 --> 07:18:47,280
bad bot traffic was measured to be

6845
07:18:47,280 --> 07:18:49,280
roughly a quarter of all internet

6846
07:18:49,280 --> 07:18:52,080
traffic in 2020 where a good bot is only

6847
07:18:52,080 --> 07:18:55,040
representing 15 percent of it

6848
07:18:55,040 --> 07:18:57,520
and when we drill down into this

6849
07:18:57,520 --> 07:18:59,040
we can see that

6850
07:18:59,040 --> 07:19:01,600
more than half of it is the fact of

6851
07:19:01,600 --> 07:19:04,478
advanced bots so uh what do we mean

6852
07:19:04,478 --> 07:19:07,440
exactly by advanced bots

6853
07:19:07,440 --> 07:19:09,280
so we have a few things in mind

6854
07:19:09,280 --> 07:19:11,760
the first one is a usage of headless

6855
07:19:11,760 --> 07:19:14,160
brother browser technology

6856
07:19:14,160 --> 07:19:16,320
this is a technology that enables the

6857
07:19:16,320 --> 07:19:19,120
rendering of web content almost the same

6858
07:19:19,120 --> 07:19:21,200
way as a real browser would do an

6859
07:19:21,200 --> 07:19:23,280
example of such technology is selenium

6860
07:19:23,280 --> 07:19:25,200
for example

6861
07:19:25,200 --> 07:19:26,798
we have in mind the rotation between

6862
07:19:26,798 --> 07:19:28,878
anonymous proxies most of the time there

6863
07:19:28,878 --> 07:19:30,320
will be a residential one because they

6864
07:19:30,320 --> 07:19:32,798
are harder to detect

6865
07:19:32,798 --> 07:19:34,558
and also advanced anti-detection

6866
07:19:34,558 --> 07:19:36,398
mechanisms for example the ability to

6867
07:19:36,398 --> 07:19:38,558
mimic a human behavior

6868
07:19:38,558 --> 07:19:41,120
during the solving of captcha

6869
07:19:41,120 --> 07:19:44,718
we'll see an example of that later

6870
07:19:44,798 --> 07:19:47,040
okay so what's the purpose of advanced

6871
07:19:47,040 --> 07:19:49,440
belts so they can be used for many

6872
07:19:49,440 --> 07:19:52,240
things including carding the fact of

6873
07:19:52,240 --> 07:19:53,840
creating checking

6874
07:19:53,840 --> 07:19:55,760
stolen credit card numbers found for

6875
07:19:55,760 --> 07:19:57,760
example in dark web and test it against

6876
07:19:57,760 --> 07:19:59,280
e-commerce websites

6877
07:19:59,280 --> 07:20:01,040
credential stuffing

6878
07:20:01,040 --> 07:20:03,120
the fact of taking combo list of

6879
07:20:03,120 --> 07:20:05,360
username and passwords from the dark web

6880
07:20:05,360 --> 07:20:07,680
and check it against a large range of

6881
07:20:07,680 --> 07:20:09,680
websites in order to find at least one

6882
07:20:09,680 --> 07:20:11,280
match

6883
07:20:11,280 --> 07:20:12,798
scalping

6884
07:20:12,798 --> 07:20:14,878
the fact of purchasing automatically a

6885
07:20:14,878 --> 07:20:16,240
large amount

6886
07:20:16,240 --> 07:20:18,718
of premium items from websites in order

6887
07:20:18,718 --> 07:20:20,638
to resell it later at a higher price on

6888
07:20:20,638 --> 07:20:22,160
the result markets

6889
07:20:22,160 --> 07:20:24,000
so this damages the reputation of the

6890
07:20:24,000 --> 07:20:26,240
ecommerce website and also generate a

6891
07:20:26,240 --> 07:20:28,958
loss in the long term for the company

6892
07:20:28,958 --> 07:20:30,240
because

6893
07:20:30,240 --> 07:20:32,000
it destroys the strategy of premium

6894
07:20:32,000 --> 07:20:33,520
items and generate frustration for the

6895
07:20:33,520 --> 07:20:35,200
customer

6896
07:20:35,200 --> 07:20:36,958
denial of inventory

6897
07:20:36,958 --> 07:20:38,798
the fact of

6898
07:20:38,798 --> 07:20:40,798
for example making a website unusable

6899
07:20:40,798 --> 07:20:44,320
via the massive usage of dummy cards

6900
07:20:44,320 --> 07:20:46,000
and so on

6901
07:20:46,000 --> 07:20:48,320
so among all of those types of um about

6902
07:20:48,320 --> 07:20:50,160
activities scalping has become so

6903
07:20:50,160 --> 07:20:52,000
popular that night has become a kind of

6904
07:20:52,000 --> 07:20:53,120
a sport

6905
07:20:53,120 --> 07:20:55,600
so this is a video taken from a youtube

6906
07:20:55,600 --> 07:20:57,840
channel called butting with burger

6907
07:20:57,840 --> 07:20:59,200
showing one guy

6908
07:20:59,200 --> 07:21:00,878
using two different bots advanced bots

6909
07:21:00,878 --> 07:21:04,398
actually in order to scalp uh

6910
07:21:04,398 --> 07:21:06,080
the premium release of one specific

6911
07:21:06,080 --> 07:21:07,760
company

6912
07:21:07,760 --> 07:21:09,600
so he's using on the left side about

6913
07:21:09,600 --> 07:21:12,000
called cyber io and on the right one red

6914
07:21:12,000 --> 07:21:13,680
set uh tokubot

6915
07:21:13,680 --> 07:21:14,958
so each of the land that you can see

6916
07:21:14,958 --> 07:21:16,080
it's pretty difficult to see i'm not

6917
07:21:16,080 --> 07:21:17,680
sure if you see it well

6918
07:21:17,680 --> 07:21:18,798
is a

6919
07:21:18,798 --> 07:21:22,000
scalping task operation

6920
07:21:22,080 --> 07:21:25,280
and the their status is evolving

6921
07:21:25,280 --> 07:21:28,160
initially it's connecting to the website

6922
07:21:28,160 --> 07:21:29,760
then

6923
07:21:29,760 --> 07:21:31,280
filling the form and

6924
07:21:31,280 --> 07:21:33,280
eventually solving the captcha and do

6925
07:21:33,280 --> 07:21:35,440
the purchase operation so what you can

6926
07:21:35,440 --> 07:21:37,520
see in the left at some point the lines

6927
07:21:37,520 --> 07:21:39,920
turn green which means that the full

6928
07:21:39,920 --> 07:21:42,160
flow from the connecting to the page

6929
07:21:42,160 --> 07:21:44,160
monitoring of the price and the solving

6930
07:21:44,160 --> 07:21:46,718
of the captcha was entirely successful

6931
07:21:46,718 --> 07:21:49,040
and on the right side you can see that

6932
07:21:49,040 --> 07:21:50,958
it stays black

6933
07:21:50,958 --> 07:21:52,718
at the last stage it's not possible to

6934
07:21:52,718 --> 07:21:54,718
read because it's too small but it says

6935
07:21:54,718 --> 07:21:56,718
px banner

6936
07:21:56,718 --> 07:21:58,958
this tells that the security vendor of

6937
07:21:58,958 --> 07:22:00,798
the website was able to detect this

6938
07:22:00,798 --> 07:22:03,520
traffic as uh non-legitimate and was

6939
07:22:03,520 --> 07:22:05,520
able to block it

6940
07:22:05,520 --> 07:22:08,718
so this video is roughly a year old

6941
07:22:08,718 --> 07:22:11,200
and this shows that

6942
07:22:11,200 --> 07:22:12,958
in real time the bypass of the security

6943
07:22:12,958 --> 07:22:15,120
vendor by advanced scalper actually

6944
07:22:15,120 --> 07:22:18,160
called cyberio

6945
07:22:18,558 --> 07:22:21,280
so i showed you this this uh gif in

6946
07:22:21,280 --> 07:22:23,600
order to show you that this is an actual

6947
07:22:23,600 --> 07:22:25,200
concern to be able to block this kind of

6948
07:22:25,200 --> 07:22:27,520
traffic plus this kind of advanced

6949
07:22:27,520 --> 07:22:30,160
softwares

6950
07:22:30,160 --> 07:22:31,120
okay

6951
07:22:31,120 --> 07:22:32,000
so

6952
07:22:32,000 --> 07:22:34,638
one of the challenges of this research

6953
07:22:34,638 --> 07:22:36,478
was to get access to the files of the

6954
07:22:36,478 --> 07:22:37,440
bots

6955
07:22:37,440 --> 07:22:38,558
because

6956
07:22:38,558 --> 07:22:40,558
very often bots were out of stock in

6957
07:22:40,558 --> 07:22:42,080
their own websites

6958
07:22:42,080 --> 07:22:44,000
and even sometimes on the recent market

6959
07:22:44,000 --> 07:22:45,760
they were not available

6960
07:22:45,760 --> 07:22:48,398
so at least for you

6961
07:22:48,398 --> 07:22:50,638
set sources that were very useful to me

6962
07:22:50,638 --> 07:22:52,958
in this investigation

6963
07:22:52,958 --> 07:22:55,120
so first you have general hacking forms

6964
07:22:55,120 --> 07:22:58,240
for example uh hack forums crack.io

6965
07:22:58,240 --> 07:22:59,440
node.2

6966
07:22:59,440 --> 07:23:01,200
fraudster cruise install.live all of

6967
07:23:01,200 --> 07:23:02,638
those

6968
07:23:02,638 --> 07:23:05,520
are hacking forms in general and

6969
07:23:05,520 --> 07:23:07,600
when you so you can search for specific

6970
07:23:07,600 --> 07:23:09,760
tool or you can see a new tools that are

6971
07:23:09,760 --> 07:23:11,680
coming out you'll have one post

6972
07:23:11,680 --> 07:23:13,920
describing the tool and most of the time

6973
07:23:13,920 --> 07:23:15,760
eventually you'll have a link to an

6974
07:23:15,760 --> 07:23:17,600
archive that's stored either to unknown

6975
07:23:17,600 --> 07:23:20,558
files or mega file upload

6976
07:23:20,558 --> 07:23:21,840
you'll have of course to be careful

6977
07:23:21,840 --> 07:23:24,958
because those may give you a small gift

6978
07:23:24,958 --> 07:23:27,520
uh they may be also infected by malwares

6979
07:23:27,520 --> 07:23:29,680
so you should analyze it in a specific

6980
07:23:29,680 --> 07:23:32,160
environment

6981
07:23:32,240 --> 07:23:33,360
okay

6982
07:23:33,360 --> 07:23:34,958
so here

6983
07:23:34,958 --> 07:23:36,798
other kind of marketplaces that were

6984
07:23:36,798 --> 07:23:38,478
very useful

6985
07:23:38,478 --> 07:23:40,080
so as i said scalping has become

6986
07:23:40,080 --> 07:23:41,840
extremely popular now you have even

6987
07:23:41,840 --> 07:23:44,000
marketplaces that are dedicated for a

6988
07:23:44,000 --> 07:23:46,638
type of scalping oh okay for

6989
07:23:46,638 --> 07:23:47,840
example

6990
07:23:47,840 --> 07:23:50,398
ticket bots so ticket scalping or

6991
07:23:50,398 --> 07:23:53,520
sneaker scalping here

6992
07:23:55,200 --> 07:23:56,478
okay

6993
07:23:56,478 --> 07:23:57,760
sometimes

6994
07:23:57,760 --> 07:23:59,760
we were able to get access to the source

6995
07:23:59,760 --> 07:24:02,080
of a bot

6996
07:24:02,080 --> 07:24:04,478
in github it was the case of cyber io

6997
07:24:04,478 --> 07:24:06,320
for example or

6998
07:24:06,320 --> 07:24:08,478
behind misconfigured server we were able

6999
07:24:08,478 --> 07:24:10,718
to get access to the file of

7000
07:24:10,718 --> 07:24:14,558
one advanced bot called the kegel

7001
07:24:15,840 --> 07:24:17,280
okay so once using all of those

7002
07:24:17,280 --> 07:24:19,120
techniques we were able to gather

7003
07:24:19,120 --> 07:24:21,280
something like 40 advanced spots so only

7004
07:24:21,280 --> 07:24:23,280
advanced

7005
07:24:23,280 --> 07:24:25,360
we try to answer a few questions

7006
07:24:25,360 --> 07:24:27,840
what are the statistics

7007
07:24:27,840 --> 07:24:29,040
in terms of programming language the

7008
07:24:29,040 --> 07:24:31,840
term of headless browser technology

7009
07:24:31,840 --> 07:24:33,440
what's the internal structure of these

7010
07:24:33,440 --> 07:24:35,120
bots

7011
07:24:35,120 --> 07:24:36,638
and what are the efficient techniques

7012
07:24:36,638 --> 07:24:39,440
that they are using

7013
07:24:39,840 --> 07:24:44,040
so i'm going to show you this now

7014
07:24:46,320 --> 07:24:47,120
so

7015
07:24:47,120 --> 07:24:48,080
uh

7016
07:24:48,080 --> 07:24:49,680
the great majority of them were

7017
07:24:49,680 --> 07:24:52,718
developed either with electron framework

7018
07:24:52,718 --> 07:24:56,080
or even sometimes with a.net

7019
07:24:56,080 --> 07:24:58,478
written with.net framework

7020
07:24:58,478 --> 07:25:00,878
and when we uh drill down and see what's

7021
07:25:00,878 --> 07:25:03,040
the headless browser technology behind

7022
07:25:03,040 --> 07:25:04,558
we can see that puppeteer is the most

7023
07:25:04,558 --> 07:25:06,398
common headless browser technology used

7024
07:25:06,398 --> 07:25:08,160
here

7025
07:25:08,160 --> 07:25:10,478
but we can see also other ones selenium

7026
07:25:10,478 --> 07:25:12,320
is very popular.net browser but we have

7027
07:25:12,320 --> 07:25:14,478
also other ones like essential objects

7028
07:25:14,478 --> 07:25:16,798
jigs browser which is uh for java

7029
07:25:16,798 --> 07:25:19,840
playwright etc

7030
07:25:20,160 --> 07:25:22,638
now let's look at the internet structure

7031
07:25:22,638 --> 07:25:24,718
of an advanced bot so of course there

7032
07:25:24,718 --> 07:25:26,000
are many different bots so it's not

7033
07:25:26,000 --> 07:25:27,600
possible to do it for all of them but

7034
07:25:27,600 --> 07:25:29,760
the idea is to take the ones that are

7035
07:25:29,760 --> 07:25:32,000
the most successful so we go on discord

7036
07:25:32,000 --> 07:25:33,680
channel we try to see which bot are the

7037
07:25:33,680 --> 07:25:36,398
most expensive the most recommended and

7038
07:25:36,398 --> 07:25:38,000
because

7039
07:25:38,000 --> 07:25:40,878
often attackers

7040
07:25:40,878 --> 07:25:41,840
break

7041
07:25:41,840 --> 07:25:43,440
their outcome

7042
07:25:43,440 --> 07:25:45,040
on those challenges say that they were

7043
07:25:45,040 --> 07:25:47,200
able to escape this and this premium

7044
07:25:47,200 --> 07:25:49,120
release

7045
07:25:49,120 --> 07:25:50,798
so i decided to pick a bot called the

7046
07:25:50,798 --> 07:25:52,718
project destroyer

7047
07:25:52,718 --> 07:25:54,320
so a bit more than a year ago it was

7048
07:25:54,320 --> 07:25:57,680
worth one thousand dollar

7049
07:25:57,680 --> 07:25:59,360
it has the ability to scalp all of those

7050
07:25:59,360 --> 07:26:02,718
kind of websites that you can see here

7051
07:26:02,718 --> 07:26:04,240
and the reason i pick it is because it

7052
07:26:04,240 --> 07:26:06,320
has many functionalities so most of the

7053
07:26:06,320 --> 07:26:07,920
evision tricks that i will show at the

7054
07:26:07,920 --> 07:26:09,760
last part of the presentation are part

7055
07:26:09,760 --> 07:26:10,398
of

7056
07:26:10,398 --> 07:26:12,160
this bot

7057
07:26:12,160 --> 07:26:13,680
but in general the idea of bots are the

7058
07:26:13,680 --> 07:26:15,360
same be able to connect to website

7059
07:26:15,360 --> 07:26:16,958
without being fingerprinted be able to

7060
07:26:16,958 --> 07:26:18,718
perform automated actions in a

7061
07:26:18,718 --> 07:26:20,558
simultaneous way

7062
07:26:20,558 --> 07:26:24,680
at a very fast pace

7063
07:26:25,040 --> 07:26:28,080
so um we could split this is a very

7064
07:26:28,080 --> 07:26:30,160
simple version of this uh of this bot so

7065
07:26:30,160 --> 07:26:32,398
we could split uh in the left side

7066
07:26:32,398 --> 07:26:33,440
what's

7067
07:26:33,440 --> 07:26:35,200
the input what to provide with this bot

7068
07:26:35,200 --> 07:26:36,718
and on the right side what is inside of

7069
07:26:36,718 --> 07:26:37,760
the bot

7070
07:26:37,760 --> 07:26:38,798
so

7071
07:26:38,798 --> 07:26:40,638
to be provided to the bot a list of

7072
07:26:40,638 --> 07:26:43,600
proxies so usually ipport username and

7073
07:26:43,600 --> 07:26:45,840
password

7074
07:26:45,840 --> 07:26:47,360
a valid key for a captcha solving

7075
07:26:47,360 --> 07:26:48,558
service

7076
07:26:48,558 --> 07:26:50,798
for example capmanster a list of

7077
07:26:50,798 --> 07:26:52,558
profiles so including billing

7078
07:26:52,558 --> 07:26:55,600
information names addresses etc the

7079
07:26:55,600 --> 07:26:58,478
attacker may have several ones

7080
07:26:58,478 --> 07:27:00,398
and then inside of the bots

7081
07:27:00,398 --> 07:27:02,558
you have the headless browser so in this

7082
07:27:02,558 --> 07:27:04,798
case it was a puppeteer

7083
07:27:04,798 --> 07:27:07,040
um

7084
07:27:07,040 --> 07:27:08,398
usually you'll have also additional

7085
07:27:08,398 --> 07:27:11,120
modules that will improve its uh

7086
07:27:11,120 --> 07:27:12,798
ability not to be detected for example

7087
07:27:12,798 --> 07:27:14,320
in this case a puppeteer extra plug-in

7088
07:27:14,320 --> 07:27:16,478
staff

7089
07:27:16,478 --> 07:27:18,478
then you have an evasion module

7090
07:27:18,478 --> 07:27:20,160
that would be responsible for all of the

7091
07:27:20,160 --> 07:27:22,320
tricks to

7092
07:27:22,320 --> 07:27:25,440
uh to to make the bot hard to detect

7093
07:27:25,440 --> 07:27:28,240
you have a profile management module

7094
07:27:28,240 --> 07:27:30,000
that's responsible for storing the

7095
07:27:30,000 --> 07:27:32,080
profile provided by the attacker proxy

7096
07:27:32,080 --> 07:27:33,920
management module that will be

7097
07:27:33,920 --> 07:27:36,320
responsible to store the proxies check

7098
07:27:36,320 --> 07:27:38,478
if they are valid measure the speed and

7099
07:27:38,478 --> 07:27:42,320
solve them according to according to it

7100
07:27:42,320 --> 07:27:44,160
you have a cookie jar so it's an

7101
07:27:44,160 --> 07:27:46,080
interface provided to the

7102
07:27:46,080 --> 07:27:47,600
to the attacker

7103
07:27:47,600 --> 07:27:49,760
to generate valid cookies for the target

7104
07:27:49,760 --> 07:27:51,760
website so most of the time

7105
07:27:51,760 --> 07:27:54,958
uh 24 hours up to 48 hours before the

7106
07:27:54,958 --> 07:27:57,120
release of primary items the attacker

7107
07:27:57,120 --> 07:27:59,120
will have to generate a batch of cookies

7108
07:27:59,120 --> 07:28:00,798
and then they will be consumed during

7109
07:28:00,798 --> 07:28:04,000
the scalping operations

7110
07:28:04,160 --> 07:28:05,680
you have a capture management module

7111
07:28:05,680 --> 07:28:07,760
that will be responsible for extracting

7112
07:28:07,760 --> 07:28:09,920
the captcha from the page

7113
07:28:09,920 --> 07:28:12,718
send it to the third-party service

7114
07:28:12,718 --> 07:28:15,040
and then retrieve the answer and solve

7115
07:28:15,040 --> 07:28:17,680
it in the client side

7116
07:28:17,680 --> 07:28:20,478
and you have the operation module

7117
07:28:20,478 --> 07:28:22,558
so in the operation module most of the

7118
07:28:22,558 --> 07:28:24,798
time you have one folder for each target

7119
07:28:24,798 --> 07:28:26,638
victim that you have for example in the

7120
07:28:26,638 --> 07:28:28,878
case of project destroyer you have 37

7121
07:28:28,878 --> 07:28:31,760
folders

7122
07:28:31,760 --> 07:28:33,920
so it will contain the script in order

7123
07:28:33,920 --> 07:28:36,638
to click on specific button to

7124
07:28:36,638 --> 07:28:38,478
to fill a form etc

7125
07:28:38,478 --> 07:28:40,478
and then to call the other

7126
07:28:40,478 --> 07:28:42,958
components

7127
07:28:42,958 --> 07:28:44,798
okay so let's zoom in and see what

7128
07:28:44,798 --> 07:28:47,360
happens in one specific task so the

7129
07:28:47,360 --> 07:28:48,798
headless browser

7130
07:28:48,798 --> 07:28:51,920
here puppeteer is started

7131
07:28:51,920 --> 07:28:54,000
with with as i said a feature in order

7132
07:28:54,000 --> 07:28:55,600
to make it harder to detect for example

7133
07:28:55,600 --> 07:28:56,398
set

7134
07:28:56,398 --> 07:28:59,120
the webdriver to false

7135
07:28:59,120 --> 07:29:00,080
then

7136
07:29:00,080 --> 07:29:02,320
the bot will craft plausible device

7137
07:29:02,320 --> 07:29:04,798
attributes for the bot to look like

7138
07:29:04,798 --> 07:29:06,638
a real device i will show

7139
07:29:06,638 --> 07:29:09,440
some examples just later

7140
07:29:09,440 --> 07:29:11,840
then the bot will pick projected cookies

7141
07:29:11,840 --> 07:29:13,680
and proxy for the

7142
07:29:13,680 --> 07:29:15,600
specific target

7143
07:29:15,600 --> 07:29:17,680
then the bot will monitor the price uh

7144
07:29:17,680 --> 07:29:19,200
of the premium item that it wants to

7145
07:29:19,200 --> 07:29:21,600
purchase in a loop if at some point the

7146
07:29:21,600 --> 07:29:23,520
price is below the threshold that is set

7147
07:29:23,520 --> 07:29:27,680
by the attacker in the task then the

7148
07:29:27,680 --> 07:29:29,760
purchase operation will happen

7149
07:29:29,760 --> 07:29:32,000
when the captcha is provided to the to

7150
07:29:32,000 --> 07:29:33,440
the bot it will be sent to the third

7151
07:29:33,440 --> 07:29:37,680
party and the captcha will be solved

7152
07:29:39,040 --> 07:29:41,520
okay so now let's look at a few

7153
07:29:41,520 --> 07:29:43,040
efficient techniques and some detections

7154
07:29:43,040 --> 07:29:45,760
that we can provide

7155
07:29:45,760 --> 07:29:48,320
first of all it's not actually uh

7156
07:29:48,320 --> 07:29:50,878
evasion it's a code protection so the

7157
07:29:50,878 --> 07:29:52,638
code of this bot was quite strongly

7158
07:29:52,638 --> 07:29:55,120
affected

7159
07:29:55,120 --> 07:29:56,558
when you try to

7160
07:29:56,558 --> 07:29:58,240
expand it this way and execute it you

7161
07:29:58,240 --> 07:30:01,280
will crash with this specific error

7162
07:30:01,280 --> 07:30:02,558
so

7163
07:30:02,558 --> 07:30:04,798
what actually the code does it checks

7164
07:30:04,798 --> 07:30:06,638
the difference of string representation

7165
07:30:06,638 --> 07:30:09,760
of functions when the code is

7166
07:30:09,760 --> 07:30:11,280
not non-touched and when the code is

7167
07:30:11,280 --> 07:30:13,840
being debugged

7168
07:30:14,558 --> 07:30:17,200
so i had to understand which part of the

7169
07:30:17,200 --> 07:30:18,958
code was responsible for this check

7170
07:30:18,958 --> 07:30:20,478
disable it

7171
07:30:20,478 --> 07:30:22,718
and then i was able to detect the other

7172
07:30:22,718 --> 07:30:24,320
tricks used by the bot that i'm going to

7173
07:30:24,320 --> 07:30:26,000
show you now

7174
07:30:26,000 --> 07:30:26,798
so

7175
07:30:26,798 --> 07:30:29,040
one of the tricks that they used was to

7176
07:30:29,040 --> 07:30:31,920
add non-mandatory http address to the

7177
07:30:31,920 --> 07:30:34,718
fields of the requests

7178
07:30:34,718 --> 07:30:36,558
so here for example you have a list of

7179
07:30:36,558 --> 07:30:38,080
uh

7180
07:30:38,080 --> 07:30:39,680
seven different fields that are

7181
07:30:39,680 --> 07:30:43,200
non-mandatory http header fields

7182
07:30:43,520 --> 07:30:46,558
and uh there are randomly a certain

7183
07:30:46,558 --> 07:30:48,638
number of those fields are added to the

7184
07:30:48,638 --> 07:30:50,718
request that will be sent for one

7185
07:30:50,718 --> 07:30:52,558
specific scalping task

7186
07:30:52,558 --> 07:30:55,040
so this is done in order to make

7187
07:30:55,040 --> 07:30:56,798
the bot looks like a slightly different

7188
07:30:56,798 --> 07:30:58,798
device each time it's performing a

7189
07:30:58,798 --> 07:31:00,878
scalping operation

7190
07:31:00,878 --> 07:31:03,120
so this is not actually javascript code

7191
07:31:03,120 --> 07:31:05,120
i deofusculate it and show it in like

7192
07:31:05,120 --> 07:31:07,760
pseudocode

7193
07:31:07,920 --> 07:31:08,798
okay

7194
07:31:08,798 --> 07:31:10,878
another small trick that's worth

7195
07:31:10,878 --> 07:31:11,920
mentioning

7196
07:31:11,920 --> 07:31:14,320
it's called the address jigging

7197
07:31:14,320 --> 07:31:15,840
so

7198
07:31:15,840 --> 07:31:18,000
the bot is extracting the addresses

7199
07:31:18,000 --> 07:31:19,840
provided by the attacker

7200
07:31:19,840 --> 07:31:22,718
and then it's parsing it and

7201
07:31:22,718 --> 07:31:25,840
finding the keywords associated to roads

7202
07:31:25,840 --> 07:31:28,558
avenues lanes streets etc and then

7203
07:31:28,558 --> 07:31:30,638
slightly modifying it in order for all

7204
07:31:30,638 --> 07:31:32,000
of the scoping tasks even though they

7205
07:31:32,000 --> 07:31:33,600
are directing to the same address

7206
07:31:33,600 --> 07:31:35,360
eventually to look

7207
07:31:35,360 --> 07:31:37,200
different

7208
07:31:37,200 --> 07:31:39,920
for any uh security device that would

7209
07:31:39,920 --> 07:31:42,638
try to find scalping operations

7210
07:31:42,638 --> 07:31:44,080
for example there is another function

7211
07:31:44,080 --> 07:31:47,360
that will add a leading zero before the

7212
07:31:47,360 --> 07:31:50,638
numbers of the addresses

7213
07:31:51,840 --> 07:31:53,120
okay

7214
07:31:53,120 --> 07:31:54,638
another important

7215
07:31:54,638 --> 07:31:57,600
topic that can be discussed related to

7216
07:31:57,600 --> 07:32:02,320
advanced bots is the ability to to stack

7217
07:32:02,320 --> 07:32:04,718
capture solving services for example

7218
07:32:04,718 --> 07:32:06,718
there is a tool a new tool called aycd

7219
07:32:06,718 --> 07:32:07,920
autosol

7220
07:32:07,920 --> 07:32:09,600
that can be integrated with some

7221
07:32:09,600 --> 07:32:11,120
advanced bot including cyber io for

7222
07:32:11,120 --> 07:32:12,398
example

7223
07:32:12,398 --> 07:32:15,600
that burns uh the attacker to uh to

7224
07:32:15,600 --> 07:32:17,840
prioritize different uh

7225
07:32:17,840 --> 07:32:19,920
skeptics are solving service for example

7226
07:32:19,920 --> 07:32:21,680
first the capture will be sent to a cap

7227
07:32:21,680 --> 07:32:23,600
monster and if the captcha cannot be

7228
07:32:23,600 --> 07:32:25,280
sold by this specific service it will

7229
07:32:25,280 --> 07:32:27,680
jump to the next one and so on this

7230
07:32:27,680 --> 07:32:29,840
maximize the probability that eventually

7231
07:32:29,840 --> 07:32:30,878
the

7232
07:32:30,878 --> 07:32:34,638
scalping operation will be successful

7233
07:32:34,958 --> 07:32:36,320
okay so now let's look at a few

7234
07:32:36,320 --> 07:32:37,600
detections

7235
07:32:37,600 --> 07:32:40,478
that we can provide for this bot

7236
07:32:40,478 --> 07:32:42,638
so instead of the code i was able to

7237
07:32:42,638 --> 07:32:44,478
spot this specific section that's

7238
07:32:44,478 --> 07:32:46,000
responsible for

7239
07:32:46,000 --> 07:32:49,520
crafting uh device attributes plausible

7240
07:32:49,520 --> 07:32:51,840
for for the bots so here you see the

7241
07:32:51,840 --> 07:32:54,240
available hath

7242
07:32:54,240 --> 07:32:56,718
so this is supposed to uh represent the

7243
07:32:56,718 --> 07:32:58,638
size of the screen of the device not the

7244
07:32:58,638 --> 07:33:00,558
size of the window and it's set to be

7245
07:33:00,558 --> 07:33:03,840
random number between 1 000 and 1 600

7246
07:33:03,840 --> 07:33:05,040
pixels

7247
07:33:05,040 --> 07:33:08,080
uh but it's like uniformly randomized so

7248
07:33:08,080 --> 07:33:09,360
there are values here that don't

7249
07:33:09,360 --> 07:33:11,280
correspond to any device on the planet

7250
07:33:11,280 --> 07:33:14,000
most likely uh because it's uh

7251
07:33:14,000 --> 07:33:16,320
really precise so if someone really is

7252
07:33:16,320 --> 07:33:18,240
really paying attention to what happens

7253
07:33:18,240 --> 07:33:20,240
on the specific device uh he would be

7254
07:33:20,240 --> 07:33:22,240
able to detect that this is probably not

7255
07:33:22,240 --> 07:33:23,680
a real device but

7256
07:33:23,680 --> 07:33:24,958
about

7257
07:33:24,958 --> 07:33:27,200
so this is a flow in the in the code of

7258
07:33:27,200 --> 07:33:29,920
the of the bot

7259
07:33:30,478 --> 07:33:32,160
as i say here in the documentation this

7260
07:33:32,160 --> 07:33:34,638
is the size of the of the screen

7261
07:33:34,638 --> 07:33:38,160
uh okay another thing that we can do is

7262
07:33:38,160 --> 07:33:40,558
extract the snippet of code responsible

7263
07:33:40,558 --> 07:33:43,280
for uh the solving of captcha in the

7264
07:33:43,280 --> 07:33:44,478
client side

7265
07:33:44,478 --> 07:33:45,600
so

7266
07:33:45,600 --> 07:33:47,760
eventually the bot is using a

7267
07:33:47,760 --> 07:33:50,160
function that will generate a busy curve

7268
07:33:50,160 --> 07:33:52,718
in order to solve the captcha so this is

7269
07:33:52,718 --> 07:33:55,360
more or less how it will look look like

7270
07:33:55,360 --> 07:33:56,478
so

7271
07:33:56,478 --> 07:33:58,160
you can see the curvature is pretty

7272
07:33:58,160 --> 07:33:59,600
smartly done you can see the

7273
07:33:59,600 --> 07:34:01,760
acceleration the deceleration so a

7274
07:34:01,760 --> 07:34:03,680
simple device will not be able to to

7275
07:34:03,680 --> 07:34:06,558
detect this as legitimate but if you pay

7276
07:34:06,558 --> 07:34:07,920
more attention you can see that a real

7277
07:34:07,920 --> 07:34:09,840
human will not draw curves like this it

7278
07:34:09,840 --> 07:34:12,558
will be more irregular so we try to just

7279
07:34:12,558 --> 07:34:14,558
to to to check if it was actually true

7280
07:34:14,558 --> 07:34:16,958
if we were able to to see a difference

7281
07:34:16,958 --> 07:34:19,120
between

7282
07:34:19,120 --> 07:34:21,600
real traffic can fake traffic

7283
07:34:21,600 --> 07:34:23,200
so to do so

7284
07:34:23,200 --> 07:34:24,558
uh we decided to measure the

7285
07:34:24,558 --> 07:34:26,320
acceleration of the curve

7286
07:34:26,320 --> 07:34:27,360
um

7287
07:34:27,360 --> 07:34:28,160
so

7288
07:34:28,160 --> 07:34:30,240
this is the graph that we obtained we

7289
07:34:30,240 --> 07:34:33,040
can see that the average is set to

7290
07:34:33,040 --> 07:34:36,398
open one pixel per millimeter square

7291
07:34:36,398 --> 07:34:40,638
with a maximum value to roughly open 15.

7292
07:34:40,638 --> 07:34:44,160
so we try to do the same with a human

7293
07:34:44,160 --> 07:34:45,920
curves and this is more or less the

7294
07:34:45,920 --> 07:34:47,840
graph that we obtained

7295
07:34:47,840 --> 07:34:51,280
with an average higher up to open 15 and

7296
07:34:51,280 --> 07:34:53,680
a maximum to open five so the question

7297
07:34:53,680 --> 07:34:56,160
here is not if we can detect bots using

7298
07:34:56,160 --> 07:34:57,920
this kind of technique this bot actually

7299
07:34:57,920 --> 07:34:59,920
using this kind of dating is how much

7300
07:34:59,920 --> 07:35:01,680
time do we need in order to be accurate

7301
07:35:01,680 --> 07:35:04,958
enough to be sure that this is indeed

7302
07:35:04,958 --> 07:35:07,280
a bot

7303
07:35:07,840 --> 07:35:10,638
okay so as a conclusion

7304
07:35:10,638 --> 07:35:12,798
the managers of market bots

7305
07:35:12,798 --> 07:35:13,520
is

7306
07:35:13,520 --> 07:35:15,040
large and

7307
07:35:15,040 --> 07:35:16,798
expanding today

7308
07:35:16,798 --> 07:35:19,600
uh then uh there is a predominance of

7309
07:35:19,600 --> 07:35:21,760
electron uh framework for about

7310
07:35:21,760 --> 07:35:23,920
development and the puppeteer as a

7311
07:35:23,920 --> 07:35:26,240
headless browser technology and lastly

7312
07:35:26,240 --> 07:35:29,200
it's a cat and mouse game which means

7313
07:35:29,200 --> 07:35:31,920
that um knowing the code of the opponent

7314
07:35:31,920 --> 07:35:33,680
being able to understand the tricks that

7315
07:35:33,680 --> 07:35:36,000
he's using is a great advantage in order

7316
07:35:36,000 --> 07:35:37,520
to help the detection

7317
07:35:37,520 --> 07:35:39,600
for the detection of those of those

7318
07:35:39,600 --> 07:35:41,840
tools

7319
07:35:41,840 --> 07:35:44,960
uh that's it are there any questions

7320
07:35:44,960 --> 07:35:53,920
[Applause]

7321
07:35:53,920 --> 07:35:56,398
so do we have any questions for johan

7322
07:35:56,398 --> 07:35:59,840
and the bad bots

7323
07:36:00,638 --> 07:36:02,240
silence

7324
07:36:02,240 --> 07:36:04,958
um i actually have a question about

7325
07:36:04,958 --> 07:36:06,878
the one of your slides could you go back

7326
07:36:06,878 --> 07:36:09,920
to the slide where you had the

7327
07:36:09,920 --> 07:36:11,200
captcha

7328
07:36:11,200 --> 07:36:13,760
services the captcha beating services or

7329
07:36:13,760 --> 07:36:16,240
whatever they were there was a list

7330
07:36:16,240 --> 07:36:17,280
list

7331
07:36:17,280 --> 07:36:19,520
yeah

7332
07:36:21,280 --> 07:36:23,680
this okay yeah this this one

7333
07:36:23,680 --> 07:36:26,160
so um i'm looking at them and there are

7334
07:36:26,160 --> 07:36:27,840
three there and on the right hand side

7335
07:36:27,840 --> 07:36:29,680
there is balance

7336
07:36:29,680 --> 07:36:33,120
0 49 984 do

7337
07:36:33,120 --> 07:36:35,680
what is the balance for

7338
07:36:35,680 --> 07:36:37,040
so

7339
07:36:37,040 --> 07:36:39,040
the attacker has to register for each of

7340
07:36:39,040 --> 07:36:41,200
the services that will he will integrate

7341
07:36:41,200 --> 07:36:43,040
with aocd auto solve

7342
07:36:43,040 --> 07:36:45,280
so

7343
07:36:45,520 --> 07:36:46,958
he'll have to pay for each of those

7344
07:36:46,958 --> 07:36:48,558
services and then each time they are

7345
07:36:48,558 --> 07:36:51,200
requested then the balance will

7346
07:36:51,200 --> 07:36:52,878
will decrease

7347
07:36:52,878 --> 07:36:54,718
so when the balance is set to zero so

7348
07:36:54,718 --> 07:36:56,160
you cannot use this service so probably

7349
07:36:56,160 --> 07:36:57,680
it will skip automatically to the next

7350
07:36:57,680 --> 07:36:59,280
one

7351
07:36:59,280 --> 07:37:02,000
uh-huh okay so then do these services

7352
07:37:02,000 --> 07:37:04,320
cost different like per time of use is

7353
07:37:04,320 --> 07:37:06,000
there a different price between the

7354
07:37:06,000 --> 07:37:07,840
different services or are roughly the

7355
07:37:07,840 --> 07:37:08,958
same

7356
07:37:08,958 --> 07:37:11,440
um so the prices um

7357
07:37:11,440 --> 07:37:13,680
are

7358
07:37:14,240 --> 07:37:15,920
roughly the same they can like they can

7359
07:37:15,920 --> 07:37:18,638
vary uh a bit but more or less it's uh

7360
07:37:18,638 --> 07:37:21,120
it's uh something like open one dollar

7361
07:37:21,120 --> 07:37:23,360
for uh for each request something like

7362
07:37:23,360 --> 07:37:24,958
that okay

7363
07:37:24,958 --> 07:37:27,200
interesting

7364
07:37:27,200 --> 07:37:28,958
and then

7365
07:37:28,958 --> 07:37:31,840
you talked a lot about scalping um in

7366
07:37:31,840 --> 07:37:34,398
your presentation and

7367
07:37:34,398 --> 07:37:37,040
to me uh i'm very old-fashioned scalping

7368
07:37:37,040 --> 07:37:40,478
to me is where i go to a concert and

7369
07:37:40,478 --> 07:37:42,240
there's somebody standing outside

7370
07:37:42,240 --> 07:37:44,718
holding tickets up and saying please buy

7371
07:37:44,718 --> 07:37:46,958
my tickets and the concert is sold out

7372
07:37:46,958 --> 07:37:49,280
and i pay a bunch of money for that

7373
07:37:49,280 --> 07:37:52,160
what does scalping mean in sort of this

7374
07:37:52,160 --> 07:37:55,920
realm in the in the bot world

7375
07:37:56,080 --> 07:37:57,360
um

7376
07:37:57,360 --> 07:37:58,558
so

7377
07:37:58,558 --> 07:38:01,600
i said that scalping is uh

7378
07:38:01,600 --> 07:38:03,600
okay it damages the so first it's uh

7379
07:38:03,600 --> 07:38:05,280
something that's uh

7380
07:38:05,280 --> 07:38:07,360
uh almost everywhere in the market of

7381
07:38:07,360 --> 07:38:09,040
bots and actually this is where the most

7382
07:38:09,040 --> 07:38:10,320
advanced but we can find the most

7383
07:38:10,320 --> 07:38:12,958
advanced bots because um

7384
07:38:12,958 --> 07:38:14,718
they need to have a very strong

7385
07:38:14,718 --> 07:38:16,398
interaction with the website it's not

7386
07:38:16,398 --> 07:38:18,638
only about like sending one request it

7387
07:38:18,638 --> 07:38:20,240
needs to keep a communication be able to

7388
07:38:20,240 --> 07:38:22,160
move from page to page without being

7389
07:38:22,160 --> 07:38:24,398
spotted as a malicious bots

7390
07:38:24,398 --> 07:38:27,040
so as i said uh scalping damages the

7391
07:38:27,040 --> 07:38:29,680
reputation of uh companies when they're

7392
07:38:29,680 --> 07:38:30,958
successfully

7393
07:38:30,958 --> 07:38:33,120
attacked and that's why companies really

7394
07:38:33,120 --> 07:38:35,760
try to invest uh in order to be able to

7395
07:38:35,760 --> 07:38:37,600
protect again those threats

7396
07:38:37,600 --> 07:38:39,200
so this is why

7397
07:38:39,200 --> 07:38:41,360
this presentation is

7398
07:38:41,360 --> 07:38:43,120
like slightly oriented with a scalping

7399
07:38:43,120 --> 07:38:44,840
but let's say

7400
07:38:44,840 --> 07:38:48,160
okay and then what is the target then of

7401
07:38:48,160 --> 07:38:50,320
a bot that's in that is engaging in

7402
07:38:50,320 --> 07:38:51,600
sculpting

7403
07:38:51,600 --> 07:38:53,520
what's the target yeah what what is that

7404
07:38:53,520 --> 07:38:56,240
um so there are many targets so i show a

7405
07:38:56,240 --> 07:38:58,160
few of them so for example uh website

7406
07:38:58,160 --> 07:39:00,000
developed with shopify from works but

7407
07:39:00,000 --> 07:39:02,160
there are amazon of course ebay

7408
07:39:02,160 --> 07:39:04,718
walmart

7409
07:39:05,760 --> 07:39:07,920
adidas also i mean

7410
07:39:07,920 --> 07:39:10,320
if you go to any of the markets that was

7411
07:39:10,320 --> 07:39:12,558
listed above you can see the list for

7412
07:39:12,558 --> 07:39:13,600
each of the bots that you want to

7413
07:39:13,600 --> 07:39:14,478
purchase

7414
07:39:14,478 --> 07:39:17,200
you will see the list of targets that it

7415
07:39:17,200 --> 07:39:19,120
has the ability to um

7416
07:39:19,120 --> 07:39:21,360
to attack okay

7417
07:39:21,360 --> 07:39:23,440
i think we have another question up here

7418
07:39:23,440 --> 07:39:25,760
yeah um

7419
07:39:25,760 --> 07:39:27,280
yeah thanks for your

7420
07:39:27,280 --> 07:39:30,240
talk and i got a question about bot

7421
07:39:30,240 --> 07:39:32,558
protection i work on a software service

7422
07:39:32,558 --> 07:39:34,478
product which is very very attractive

7423
07:39:34,478 --> 07:39:35,680
for

7424
07:39:35,680 --> 07:39:37,680
people who are trying

7425
07:39:37,680 --> 07:39:38,878
logins from

7426
07:39:38,878 --> 07:39:40,320
database leaks

7427
07:39:40,320 --> 07:39:41,280
and

7428
07:39:41,280 --> 07:39:43,280
for us the invisible recapture from

7429
07:39:43,280 --> 07:39:45,280
google was the only solution

7430
07:39:45,280 --> 07:39:47,920
to protect our lock-in

7431
07:39:47,920 --> 07:39:50,638
against bots

7432
07:39:50,638 --> 07:39:54,239
and automated attacks

7433
07:39:54,320 --> 07:39:56,958
do you know how safe they are

7434
07:39:56,958 --> 07:39:59,920
like a recapture i think it's a top of

7435
07:39:59,920 --> 07:40:01,920
the notch or one of the top of the knot

7436
07:40:01,920 --> 07:40:03,040
solutions

7437
07:40:03,040 --> 07:40:03,920
but

7438
07:40:03,920 --> 07:40:06,958
do you have any experience

7439
07:40:06,958 --> 07:40:09,760
so recaptcha is relatively strong but of

7440
07:40:09,760 --> 07:40:12,160
course i mean they are always the the

7441
07:40:12,160 --> 07:40:13,680
machine learning tools that are

7442
07:40:13,680 --> 07:40:14,958
currently used

7443
07:40:14,958 --> 07:40:15,680
by

7444
07:40:15,680 --> 07:40:18,080
third-party capture services are

7445
07:40:18,080 --> 07:40:20,478
stronger and stronger even at some point

7446
07:40:20,478 --> 07:40:22,878
what they do is they just automatically

7447
07:40:22,878 --> 07:40:24,718
send it to a specific person that will

7448
07:40:24,718 --> 07:40:26,558
solve it manually so this is i think the

7449
07:40:26,558 --> 07:40:28,240
case you have like a tool called death

7450
07:40:28,240 --> 07:40:30,558
capture that's doing both of it it's uh

7451
07:40:30,558 --> 07:40:32,240
so if the captcha is simple it solve it

7452
07:40:32,240 --> 07:40:34,240
with machine learning if not it sends it

7453
07:40:34,240 --> 07:40:36,718
sends it to uh to someone usually in

7454
07:40:36,718 --> 07:40:37,600
india

7455
07:40:37,600 --> 07:40:38,958
that will uh

7456
07:40:38,958 --> 07:40:40,878
that will solve it so it's a it's an

7457
07:40:40,878 --> 07:40:43,440
ongoing challenge to be able to um to uh

7458
07:40:43,440 --> 07:40:44,638
to

7459
07:40:44,638 --> 07:40:45,760
improve uh

7460
07:40:45,760 --> 07:40:47,200
capture strength

7461
07:40:47,200 --> 07:40:49,440
um

7462
07:40:49,440 --> 07:40:51,520
but there are many different ways to try

7463
07:40:51,520 --> 07:40:53,040
to detect but not only about like

7464
07:40:53,040 --> 07:40:54,558
captcha this is like the the end

7465
07:40:54,558 --> 07:40:55,680
solution that

7466
07:40:55,680 --> 07:40:57,360
actually companies now are trying to to

7467
07:40:57,360 --> 07:40:59,040
avoid because it's time consuming also

7468
07:40:59,040 --> 07:41:00,240
for the consumer it's bad user

7469
07:41:00,240 --> 07:41:01,760
experience

7470
07:41:01,760 --> 07:41:04,760
thanks

7471
07:41:08,958 --> 07:41:12,558
hi uh you talked about uh randomizing or

7472
07:41:12,558 --> 07:41:15,760
pseudo uh minimizing the shipping

7473
07:41:15,760 --> 07:41:17,200
address for

7474
07:41:17,200 --> 07:41:19,120
some scalpel that is trying to buy all

7475
07:41:19,120 --> 07:41:21,680
the sneakers on the market for whatever

7476
07:41:21,680 --> 07:41:22,558
um

7477
07:41:22,558 --> 07:41:24,240
has anyone tried

7478
07:41:24,240 --> 07:41:27,680
talking to the shipping guys of ups and

7479
07:41:27,680 --> 07:41:30,080
stuff like that because it sounds like

7480
07:41:30,080 --> 07:41:31,760
an integration with those guys can

7481
07:41:31,760 --> 07:41:33,200
provide a feedback loop to actually

7482
07:41:33,200 --> 07:41:34,958
detect them

7483
07:41:34,958 --> 07:41:36,958
um so this is an

7484
07:41:36,958 --> 07:41:38,478
interesting topic

7485
07:41:38,478 --> 07:41:39,680
i don't think that's okay so it's

7486
07:41:39,680 --> 07:41:42,080
probably below i don't think that uh

7487
07:41:42,080 --> 07:41:44,718
this is something that we did um

7488
07:41:44,718 --> 07:41:46,638
indeed this is uh this is something that

7489
07:41:46,638 --> 07:41:48,878
can be done but i mean i assume that

7490
07:41:48,878 --> 07:41:51,280
people are uh sometimes

7491
07:41:51,280 --> 07:41:53,520
writing shortcuts for also addresses so

7492
07:41:53,520 --> 07:41:58,000
uh it may lead to false positive um

7493
07:41:58,000 --> 07:41:59,520
uh one option probably would be in the

7494
07:41:59,520 --> 07:42:01,840
logs of the um to propose a service for

7495
07:42:01,840 --> 07:42:03,920
the website to to aggregate the logs and

7496
07:42:03,920 --> 07:42:06,478
check if there are any uh

7497
07:42:06,478 --> 07:42:08,080
um aggregation that can lead to

7498
07:42:08,080 --> 07:42:10,080
detection of scalping operations this is

7499
07:42:10,080 --> 07:42:11,440
can something that can be done

7500
07:42:11,440 --> 07:42:13,840
eventually more at the level of the

7501
07:42:13,840 --> 07:42:15,360
log analysis

7502
07:42:15,360 --> 07:42:17,920
okay thanks

7503
07:42:22,478 --> 07:42:26,397
do we have any other questions for johan

7504
07:42:26,958 --> 07:42:31,557
all right we're okay go for it

7505
07:42:33,600 --> 07:42:34,638
uh hi

7506
07:42:34,638 --> 07:42:36,000
so um

7507
07:42:36,000 --> 07:42:38,080
with this technique let's say uh

7508
07:42:38,080 --> 07:42:40,638
professional sculptors are to say what

7509
07:42:40,638 --> 07:42:43,280
quantity of product might this person be

7510
07:42:43,280 --> 07:42:44,478
looking at

7511
07:42:44,478 --> 07:42:46,398
and then how

7512
07:42:46,398 --> 07:42:49,360
this person actually gets than

7513
07:42:49,360 --> 07:42:51,360
things

7514
07:42:51,360 --> 07:42:53,120
once the quantity sometimes it can go up

7515
07:42:53,120 --> 07:42:55,520
to 50 different box of

7516
07:42:55,520 --> 07:42:57,120
let's say sneakers that cost each of

7517
07:42:57,120 --> 07:43:00,320
them 100 or even i don't know a bit more

7518
07:43:00,320 --> 07:43:03,040
so it can be sold at much higher price

7519
07:43:03,040 --> 07:43:05,440
so you can see in mac resell markets for

7520
07:43:05,440 --> 07:43:07,120
specific brands

7521
07:43:07,120 --> 07:43:08,798
the prices of items can go up to a

7522
07:43:08,798 --> 07:43:10,718
thousand dollars so when you have 50

7523
07:43:10,718 --> 07:43:12,958
bucks so you multiply the two numbers

7524
07:43:12,958 --> 07:43:15,440
you can you can make like um

7525
07:43:15,440 --> 07:43:17,760
a very large amount of money so

7526
07:43:17,760 --> 07:43:19,520
this also explains the price of the bud

7527
07:43:19,520 --> 07:43:21,440
that i showed you brought the io uh two

7528
07:43:21,440 --> 07:43:23,440
thousand dollar this is an investment

7529
07:43:23,440 --> 07:43:27,840
but eventually um sometime it pays off

7530
07:43:31,360 --> 07:43:33,120
all right we are getting to the end of

7531
07:43:33,120 --> 07:43:35,600
our time so please give johan a round of

7532
07:43:35,600 --> 07:43:39,798
applause for bad boss

7533
07:43:47,920 --> 07:43:50,398
so i'm going to give you

7534
07:43:50,398 --> 07:43:54,360
thank you thank you very much

7535
07:43:56,798 --> 07:43:59,798
hmm

7536
07:44:18,320 --> 07:44:21,320
yes

7537
07:44:34,958 --> 07:44:37,840
all right

7538
07:44:37,840 --> 07:44:40,080
we're on with our next presentation

7539
07:44:40,080 --> 07:44:43,440
which i'm super excited about so mitre

7540
07:44:43,440 --> 07:44:44,958
we've heard a lot about them the past

7541
07:44:44,958 --> 07:44:45,840
few

7542
07:44:45,840 --> 07:44:48,000
years they have a new addition to their

7543
07:44:48,000 --> 07:44:49,280
tool set

7544
07:44:49,280 --> 07:44:51,120
the attack flow

7545
07:44:51,120 --> 07:44:53,680
so uh today we have marcus osterlo here

7546
07:44:53,680 --> 07:44:56,718
with us from avis i.t security he does a

7547
07:44:56,718 --> 07:44:59,280
little offensive he does a little sock

7548
07:44:59,280 --> 07:45:01,680
and he enjoys bouldering so if you want

7549
07:45:01,680 --> 07:45:03,040
to talk to him later you have some

7550
07:45:03,040 --> 07:45:05,040
things to talk about anyway he's going

7551
07:45:05,040 --> 07:45:07,600
to talk to us about attack flows so take

7552
07:45:07,600 --> 07:45:09,600
it away marcus yeah thanks jen for the

7553
07:45:09,600 --> 07:45:11,120
nice introduction

7554
07:45:11,120 --> 07:45:13,520
yeah welcome everybody to my talk about

7555
07:45:13,520 --> 07:45:16,398
how to measure id security uh by using

7556
07:45:16,398 --> 07:45:19,798
micro attack

7557
07:45:20,478 --> 07:45:22,638
yeah some words additional words about

7558
07:45:22,638 --> 07:45:24,240
miss

7559
07:45:24,240 --> 07:45:25,360
myself

7560
07:45:25,360 --> 07:45:27,440
i have a master's degree from the world

7561
07:45:27,440 --> 07:45:30,000
university book on iit security

7562
07:45:30,000 --> 07:45:32,160
and i'm pretty into like jen already

7563
07:45:32,160 --> 07:45:35,200
told you uh into the offensive part

7564
07:45:35,200 --> 07:45:37,600
and used my knowledge to um currently

7565
07:45:37,600 --> 07:45:40,080
building up socks and blue teams so they

7566
07:45:40,080 --> 07:45:42,878
get uh from the attack perspective a

7567
07:45:42,878 --> 07:45:44,478
better um

7568
07:45:44,478 --> 07:45:46,718
a better

7569
07:45:46,718 --> 07:45:50,958
view on the on the defense in general

7570
07:45:50,958 --> 07:45:54,718
yeah so why should we measure security

7571
07:45:54,718 --> 07:45:57,200
so let's talk about the motivation

7572
07:45:57,200 --> 07:45:58,718
imagine um

7573
07:45:58,718 --> 07:46:02,000
you have a bigger it environment let's

7574
07:46:02,000 --> 07:46:04,080
say in a company

7575
07:46:04,080 --> 07:46:06,160
and in this idea environment you have

7576
07:46:06,160 --> 07:46:08,878
distributed responsibilities like you

7577
07:46:08,878 --> 07:46:10,638
have some guys that are managing the

7578
07:46:10,638 --> 07:46:12,080
clients you have some guys that are

7579
07:46:12,080 --> 07:46:14,398
managing the service web applications

7580
07:46:14,398 --> 07:46:16,558
and so on and so forth

7581
07:46:16,558 --> 07:46:17,840
and

7582
07:46:17,840 --> 07:46:20,638
yeah those guys are also doing um

7583
07:46:20,638 --> 07:46:23,120
some changes in their environment

7584
07:46:23,120 --> 07:46:25,840
and as a security team i'm not directly

7585
07:46:25,840 --> 07:46:29,040
into control of this so i can only see

7586
07:46:29,040 --> 07:46:31,600
the results of those changes

7587
07:46:31,600 --> 07:46:33,520
or by talking to the people

7588
07:46:33,520 --> 07:46:35,840
and get the informations

7589
07:46:35,840 --> 07:46:37,040
so

7590
07:46:37,040 --> 07:46:39,680
it would be great for me as a security

7591
07:46:39,680 --> 07:46:42,478
practitioner practitioner to get

7592
07:46:42,478 --> 07:46:44,398
these changes directly on a regular

7593
07:46:44,398 --> 07:46:47,920
basis so i can um state for instance

7594
07:46:47,920 --> 07:46:51,120
assumptions about my environment and say

7595
07:46:51,120 --> 07:46:53,360
hey i need for instance this very

7596
07:46:53,360 --> 07:46:56,398
important firewall rule and say that my

7597
07:46:56,398 --> 07:46:57,440
environment

7598
07:46:57,440 --> 07:46:59,680
my environment must be like this

7599
07:46:59,680 --> 07:47:01,760
and or for the security operations

7600
07:47:01,760 --> 07:47:02,718
center

7601
07:47:02,718 --> 07:47:05,840
you have a use case for instance and you

7602
07:47:05,840 --> 07:47:08,320
want to check if this use case is still

7603
07:47:08,320 --> 07:47:10,000
working all the time because you're

7604
07:47:10,000 --> 07:47:11,520
getting the right logs and there's

7605
07:47:11,520 --> 07:47:13,280
nothing missing

7606
07:47:13,280 --> 07:47:14,638
so um

7607
07:47:14,638 --> 07:47:16,638
would be great to have something to

7608
07:47:16,638 --> 07:47:19,200
measure this and to verify this so that

7609
07:47:19,200 --> 07:47:21,360
we can build security on confidence from

7610
07:47:21,360 --> 07:47:24,878
our security perspective

7611
07:47:24,878 --> 07:47:25,760
so

7612
07:47:25,760 --> 07:47:27,920
for this let's talk about mitral attack

7613
07:47:27,920 --> 07:47:28,798
first

7614
07:47:28,798 --> 07:47:30,718
so what is mitral attack in general

7615
07:47:30,718 --> 07:47:33,520
mitral attack is a framework

7616
07:47:33,520 --> 07:47:36,240
with generic attacks in it those generic

7617
07:47:36,240 --> 07:47:38,798
attacks are categorized in different

7618
07:47:38,798 --> 07:47:41,120
tactics or so-called tactics here this

7619
07:47:41,120 --> 07:47:43,200
is uh the upper line here

7620
07:47:43,200 --> 07:47:44,798
where you can say i have something like

7621
07:47:44,798 --> 07:47:47,200
initial access so how do i get into the

7622
07:47:47,200 --> 07:47:49,680
company execution so i get my code

7623
07:47:49,680 --> 07:47:52,398
executed and so forth so on and so forth

7624
07:47:52,398 --> 07:47:54,558
and then we have the generalized uh

7625
07:47:54,558 --> 07:47:55,600
attacks

7626
07:47:55,600 --> 07:47:56,718
that were

7627
07:47:56,718 --> 07:47:59,440
on a described on a very generic way

7628
07:47:59,440 --> 07:48:00,240
here

7629
07:48:00,240 --> 07:48:02,398
and so what can you do with it because

7630
07:48:02,398 --> 07:48:03,840
it looks

7631
07:48:03,840 --> 07:48:06,558
at the first glance like a boring table

7632
07:48:06,558 --> 07:48:10,240
okay it is sometimes but um

7633
07:48:10,240 --> 07:48:13,200
you can do with mata uh attack modeling

7634
07:48:13,200 --> 07:48:16,320
so much was all also doing this for you

7635
07:48:16,320 --> 07:48:18,958
so it is modeling some attacker groups

7636
07:48:18,958 --> 07:48:21,280
or attackers in general

7637
07:48:21,280 --> 07:48:23,920
and let's see how it works so for

7638
07:48:23,920 --> 07:48:25,760
instance i use for the initial access

7639
07:48:25,760 --> 07:48:28,638
for a company i use the phishing tactics

7640
07:48:28,638 --> 07:48:31,680
techniques and then i get execution via

7641
07:48:31,680 --> 07:48:35,200
the native api for instance then

7642
07:48:35,200 --> 07:48:37,280
for persistence purposes because i get a

7643
07:48:37,280 --> 07:48:39,040
foot into the door and i want to keep it

7644
07:48:39,040 --> 07:48:41,280
there i create an account for me so i

7645
07:48:41,280 --> 07:48:43,360
can come back because the system is

7646
07:48:43,360 --> 07:48:46,320
reachable about over the internet

7647
07:48:46,320 --> 07:48:47,440
then i

7648
07:48:47,440 --> 07:48:51,120
can probably set up um

7649
07:48:51,280 --> 07:48:53,520
or do a privilege escalation to get

7650
07:48:53,520 --> 07:48:56,240
system rights on the system uh by doing

7651
07:48:56,240 --> 07:48:59,120
um a dll injection and then i can get my

7652
07:48:59,120 --> 07:49:01,600
credentials uh during the credential

7653
07:49:01,600 --> 07:49:03,120
dumping phase

7654
07:49:03,120 --> 07:49:04,958
so like this you can

7655
07:49:04,958 --> 07:49:06,398
general model

7656
07:49:06,398 --> 07:49:07,760
your your

7657
07:49:07,760 --> 07:49:09,920
infrastructure

7658
07:49:09,920 --> 07:49:12,398
but um oftentimes

7659
07:49:12,398 --> 07:49:15,040
in compliance driven companies i see

7660
07:49:15,040 --> 07:49:18,080
that my mitral is a bit misused because

7661
07:49:18,080 --> 07:49:19,920
this is not a checklist

7662
07:49:19,920 --> 07:49:23,200
because each and every technique here

7663
07:49:23,200 --> 07:49:26,000
can be is only a generalized attack

7664
07:49:26,000 --> 07:49:27,200
description

7665
07:49:27,200 --> 07:49:28,878
you have

7666
07:49:28,878 --> 07:49:30,798
multiple layers under android for

7667
07:49:30,798 --> 07:49:33,360
instance you can um do the native api

7668
07:49:33,360 --> 07:49:35,600
execution by using powershell or by

7669
07:49:35,600 --> 07:49:37,840
using um

7670
07:49:37,840 --> 07:49:40,478
c-sharp or something else that you can

7671
07:49:40,478 --> 07:49:43,520
imagine so you have many many multiple

7672
07:49:43,520 --> 07:49:45,600
or multiple ways in general to to do

7673
07:49:45,600 --> 07:49:48,638
your actual attack

7674
07:49:49,200 --> 07:49:50,160
so

7675
07:49:50,160 --> 07:49:53,440
um because we can also use mitral by

7676
07:49:53,440 --> 07:49:55,840
adopting it on a on our company for

7677
07:49:55,840 --> 07:49:58,638
instance uh made an abstract picture of

7678
07:49:58,638 --> 07:50:01,360
that so we can um play through some

7679
07:50:01,360 --> 07:50:04,478
scenarios for us and say hey come on i

7680
07:50:04,478 --> 07:50:06,558
take the the tactics

7681
07:50:06,558 --> 07:50:09,200
and uh derive techniques from that and

7682
07:50:09,200 --> 07:50:13,280
to bo to model um scenario for me

7683
07:50:13,280 --> 07:50:15,280
yeah let's say an attacker is doing some

7684
07:50:15,280 --> 07:50:16,638
reconnaissance

7685
07:50:16,638 --> 07:50:19,120
previously then he is setting up an

7686
07:50:19,120 --> 07:50:22,160
email and say hey i will do the initial

7687
07:50:22,160 --> 07:50:25,680
access by doing a phishing attempt

7688
07:50:25,680 --> 07:50:27,440
do adding

7689
07:50:27,440 --> 07:50:30,558
an attachment to have uh execution

7690
07:50:30,558 --> 07:50:33,200
probabilities so that i for instance

7691
07:50:33,200 --> 07:50:36,000
execute the command line and dump

7692
07:50:36,000 --> 07:50:38,320
dropping my code on on the machine

7693
07:50:38,320 --> 07:50:41,360
then on the machine itself uh it comma

7694
07:50:41,360 --> 07:50:44,558
calls back via for instance https thanks

7695
07:50:44,558 --> 07:50:47,280
to let's encrypt uh fully encrypted uh

7696
07:50:47,280 --> 07:50:49,520
to our command control server and then

7697
07:50:49,520 --> 07:50:52,160
gets uh the next attack steps

7698
07:50:52,160 --> 07:50:54,398
okay now we're on the machine

7699
07:50:54,398 --> 07:50:56,878
we can say hey come on uh we want to kee

7700
07:50:56,878 --> 07:50:58,958
we want to stay there and doing some

7701
07:50:58,958 --> 07:51:01,040
persistence um

7702
07:51:01,040 --> 07:51:03,440
for instance like i said before we just

7703
07:51:03,440 --> 07:51:04,958
use a

7704
07:51:04,958 --> 07:51:07,280
dll injection because we found a program

7705
07:51:07,280 --> 07:51:09,280
or a service that is searching for a

7706
07:51:09,280 --> 07:51:12,398
specific dll and we know to notice that

7707
07:51:12,398 --> 07:51:14,958
okay so now we're system on a windows

7708
07:51:14,958 --> 07:51:16,398
client for instance

7709
07:51:16,398 --> 07:51:20,160
and um the next step is for us

7710
07:51:20,160 --> 07:51:22,160
for privilege escalation purposes

7711
07:51:22,160 --> 07:51:24,320
after that the next step is uh do uh

7712
07:51:24,320 --> 07:51:26,478
moving laterally so when we assist them

7713
07:51:26,478 --> 07:51:29,360
we can simply dump um

7714
07:51:29,360 --> 07:51:30,398
elsa's

7715
07:51:30,398 --> 07:51:33,360
if we do the right steps before and

7716
07:51:33,360 --> 07:51:36,478
jump to the next box and here we found

7717
07:51:36,478 --> 07:51:38,798
for instance some text files for the

7718
07:51:38,798 --> 07:51:41,360
next machine and doing some collection

7719
07:51:41,360 --> 07:51:42,160
and

7720
07:51:42,160 --> 07:51:44,558
exfiltrate the information

7721
07:51:44,558 --> 07:51:47,440
to a different server in the internet

7722
07:51:47,440 --> 07:51:49,760
and so you can adopt all the

7723
07:51:49,760 --> 07:51:52,878
tactics with derived techniques and play

7724
07:51:52,878 --> 07:51:55,600
with micro attack in general to get a

7725
07:51:55,600 --> 07:51:57,440
get a feeling and the

7726
07:51:57,440 --> 07:51:59,840
overview of your attack landscape

7727
07:51:59,840 --> 07:52:02,638
and play something through

7728
07:52:02,638 --> 07:52:06,320
so um okay we saw now uh mitral attack

7729
07:52:06,320 --> 07:52:08,638
and but how do we measure

7730
07:52:08,638 --> 07:52:09,680
so

7731
07:52:09,680 --> 07:52:12,558
uh in the past we um

7732
07:52:12,558 --> 07:52:15,920
we did uh security testing for instance

7733
07:52:15,920 --> 07:52:18,718
like something like red teaming where we

7734
07:52:18,718 --> 07:52:20,958
hired external red team

7735
07:52:20,958 --> 07:52:23,280
and said hey come on guys hack my

7736
07:52:23,280 --> 07:52:26,000
company and give me a report about that

7737
07:52:26,000 --> 07:52:28,160
and tell me how do i

7738
07:52:28,160 --> 07:52:31,280
how i can improve that

7739
07:52:31,280 --> 07:52:33,920
and then um yeah this is good this is

7740
07:52:33,920 --> 07:52:36,398
very important but it's most of the time

7741
07:52:36,398 --> 07:52:39,200
it's doing only annually so you have a

7742
07:52:39,200 --> 07:52:42,320
snapshot of one time in the in the year

7743
07:52:42,320 --> 07:52:45,840
about your current security state

7744
07:52:45,840 --> 07:52:47,680
only one or two

7745
07:52:47,680 --> 07:52:50,798
different um ways into your company so

7746
07:52:50,798 --> 07:52:52,000
the next

7747
07:52:52,000 --> 07:52:54,958
candidate might be penetration testing

7748
07:52:54,958 --> 07:52:56,240
which is a more

7749
07:52:56,240 --> 07:52:58,558
focused approach where you can say i

7750
07:52:58,558 --> 07:52:59,600
want to

7751
07:52:59,600 --> 07:53:01,520
test this machine or that machine or the

7752
07:53:01,520 --> 07:53:03,520
entire network this web application and

7753
07:53:03,520 --> 07:53:05,840
so on it's also good

7754
07:53:05,840 --> 07:53:06,638
but

7755
07:53:06,638 --> 07:53:08,718
imagine you have five pentesters and 800

7756
07:53:08,718 --> 07:53:11,680
machines that doesn't scale

7757
07:53:11,680 --> 07:53:12,478
so

7758
07:53:12,478 --> 07:53:13,280
then

7759
07:53:13,280 --> 07:53:15,040
also a candidate is vulnerability

7760
07:53:15,040 --> 07:53:17,120
scanning which is also great because

7761
07:53:17,120 --> 07:53:19,120
it's a broader approach but

7762
07:53:19,120 --> 07:53:21,120
vulnerability scanning is more focused

7763
07:53:21,120 --> 07:53:24,398
on the cves and in general so you can

7764
07:53:24,398 --> 07:53:25,120
just

7765
07:53:25,120 --> 07:53:27,520
patch the system and you're fine you can

7766
07:53:27,520 --> 07:53:31,360
measure it with that which is good so um

7767
07:53:31,360 --> 07:53:34,000
it might be a part in the general

7768
07:53:34,000 --> 07:53:36,160
security program here

7769
07:53:36,160 --> 07:53:38,320
but you can't just

7770
07:53:38,320 --> 07:53:40,718
test with it some architecture problems

7771
07:53:40,718 --> 07:53:43,760
for instance and there are different

7772
07:53:43,760 --> 07:53:46,398
offenses for defensive tours

7773
07:53:46,398 --> 07:53:48,638
that are mostly working like black boxes

7774
07:53:48,638 --> 07:53:51,120
where you automate your test behavior

7775
07:53:51,120 --> 07:53:52,320
but

7776
07:53:52,320 --> 07:53:53,280
what i

7777
07:53:53,280 --> 07:53:55,520
would

7778
07:53:55,520 --> 07:53:57,680
say to use or what what might be

7779
07:53:57,680 --> 07:54:00,160
interesting to use that we as a security

7780
07:54:00,160 --> 07:54:03,120
practitioner practitioners model our uh

7781
07:54:03,120 --> 07:54:05,360
expectations about the environment and

7782
07:54:05,360 --> 07:54:08,160
say hey guys we want for instance this

7783
07:54:08,160 --> 07:54:10,718
firewall must be there or the web

7784
07:54:10,718 --> 07:54:12,398
application must be authenticated like

7785
07:54:12,398 --> 07:54:13,200
this

7786
07:54:13,200 --> 07:54:16,160
and uh or or this cm rule must be

7787
07:54:16,160 --> 07:54:18,718
triggered under these conditions

7788
07:54:18,718 --> 07:54:21,920
so it's more like the mindset of the um

7789
07:54:21,920 --> 07:54:24,240
of the software development life cycle

7790
07:54:24,240 --> 07:54:27,200
where when you use the test driven

7791
07:54:27,200 --> 07:54:29,440
approach and say hey

7792
07:54:29,440 --> 07:54:32,080
i write a test for it and check if it's

7793
07:54:32,080 --> 07:54:34,638
if my condition that i want to have is

7794
07:54:34,638 --> 07:54:36,878
there

7795
07:54:36,878 --> 07:54:39,360
so how can we measure that with mitra so

7796
07:54:39,360 --> 07:54:41,360
we simply use mitra

7797
07:54:41,360 --> 07:54:44,478
and put it into for instance atomic red

7798
07:54:44,478 --> 07:54:45,360
team

7799
07:54:45,360 --> 07:54:46,558
um

7800
07:54:46,558 --> 07:54:50,240
this is one one way to do this um so

7801
07:54:50,240 --> 07:54:53,280
let's dive into it um so what is atomic

7802
07:54:53,280 --> 07:54:55,200
red team atomic red team is actually a

7803
07:54:55,200 --> 07:54:58,638
micro use case that you can model within

7804
07:54:58,638 --> 07:54:59,360
a

7805
07:54:59,360 --> 07:55:02,240
simple yaml file and run it

7806
07:55:02,240 --> 07:55:03,520
like in a

7807
07:55:03,520 --> 07:55:06,718
it's actually attack in general so

7808
07:55:06,718 --> 07:55:08,878
you have different sections here in

7809
07:55:08,878 --> 07:55:09,920
a

7810
07:55:09,920 --> 07:55:11,840
atomic red team case

7811
07:55:11,840 --> 07:55:14,240
the first one is the input arguments

7812
07:55:14,240 --> 07:55:16,398
imagine this like variables for a

7813
07:55:16,398 --> 07:55:18,080
function

7814
07:55:18,080 --> 07:55:20,558
then you have to check the prerequisites

7815
07:55:20,558 --> 07:55:22,558
then you run the attack itself and

7816
07:55:22,558 --> 07:55:24,558
you're cleaning up the system to become

7817
07:55:24,558 --> 07:55:27,920
the previous state again to be clean

7818
07:55:27,920 --> 07:55:30,080
so okay

7819
07:55:30,080 --> 07:55:31,520
let's

7820
07:55:31,520 --> 07:55:33,280
show this on a

7821
07:55:33,280 --> 07:55:35,360
small example

7822
07:55:35,360 --> 07:55:37,840
let's say we have some source files here

7823
07:55:37,840 --> 07:55:41,440
because we want to run a stager which is

7824
07:55:41,440 --> 07:55:43,040
written in c sharp

7825
07:55:43,040 --> 07:55:44,878
and have an output file somewhere in

7826
07:55:44,878 --> 07:55:46,000
temp

7827
07:55:46,000 --> 07:55:48,160
then we have a prerequisite that we need

7828
07:55:48,160 --> 07:55:50,798
a special compiler and also the access

7829
07:55:50,798 --> 07:55:54,240
to this compiler um so and then the next

7830
07:55:54,240 --> 07:55:56,160
step is to compile the code and run the

7831
07:55:56,160 --> 07:55:58,638
attack and after that

7832
07:55:58,638 --> 07:56:00,958
remove all the files that we generated

7833
07:56:00,958 --> 07:56:03,600
like this okay

7834
07:56:03,600 --> 07:56:07,280
this is a atomic test which is great

7835
07:56:07,280 --> 07:56:09,600
but for measuring it's not enough

7836
07:56:09,600 --> 07:56:10,878
because

7837
07:56:10,878 --> 07:56:13,680
we need criterias without criterias we

7838
07:56:13,680 --> 07:56:15,680
can't measure anything and we can also

7839
07:56:15,680 --> 07:56:18,080
validate anything so we need at least

7840
07:56:18,080 --> 07:56:21,200
success or failure criterias to say um

7841
07:56:21,200 --> 07:56:23,600
this is a successful test or the it's a

7842
07:56:23,600 --> 07:56:24,958
failed test

7843
07:56:24,958 --> 07:56:27,440
so when the atom when the attack goes

7844
07:56:27,440 --> 07:56:28,240
through

7845
07:56:28,240 --> 07:56:31,280
the test is successful itself but it's a

7846
07:56:31,280 --> 07:56:33,200
failure for us because the attack is

7847
07:56:33,200 --> 07:56:34,320
working

7848
07:56:34,320 --> 07:56:35,440
so

7849
07:56:35,440 --> 07:56:37,920
let's look at the example here again

7850
07:56:37,920 --> 07:56:42,000
we have at least three different

7851
07:56:42,398 --> 07:56:47,760
criterias here so we need to uh get

7852
07:56:47,760 --> 07:56:49,200
the the

7853
07:56:49,200 --> 07:56:51,760
compiler must be existing and we need

7854
07:56:51,760 --> 07:56:54,080
access to this compiler because i can't

7855
07:56:54,080 --> 07:56:56,398
block it by for instance applocker and

7856
07:56:56,398 --> 07:56:59,360
then attacker not are able to use it

7857
07:56:59,360 --> 07:57:02,160
potentially and then uh i want uh the

7858
07:57:02,160 --> 07:57:04,718
stager to do what the stager is doing

7859
07:57:04,718 --> 07:57:06,958
uh connect to the commanding control

7860
07:57:06,958 --> 07:57:09,120
server and

7861
07:57:09,120 --> 07:57:10,478
load the next

7862
07:57:10,478 --> 07:57:11,520
stage

7863
07:57:11,520 --> 07:57:14,080
and then we have a successful attack

7864
07:57:14,080 --> 07:57:15,520
in general

7865
07:57:15,520 --> 07:57:16,478
so

7866
07:57:16,478 --> 07:57:18,798
this is also nice um

7867
07:57:18,798 --> 07:57:20,000
let's zoom

7868
07:57:20,000 --> 07:57:22,080
zoom out a bit more

7869
07:57:22,080 --> 07:57:25,280
because yeah atomic tests are good and

7870
07:57:25,280 --> 07:57:28,718
great to have a test scenario but it's

7871
07:57:28,718 --> 07:57:31,760
very very limited on one point so if you

7872
07:57:31,760 --> 07:57:33,280
want to run

7873
07:57:33,280 --> 07:57:36,638
a chain of attacks with a bigger

7874
07:57:36,638 --> 07:57:39,120
scenario like we showed before that you

7875
07:57:39,120 --> 07:57:41,280
can definitely model

7876
07:57:41,280 --> 07:57:44,000
you need chains and each and every chain

7877
07:57:44,000 --> 07:57:44,798
has

7878
07:57:44,798 --> 07:57:47,120
the success criteria and a validation

7879
07:57:47,120 --> 07:57:49,520
step so when the chain fails somewhere

7880
07:57:49,520 --> 07:57:52,320
you know why

7881
07:57:52,320 --> 07:57:55,040
another thing is that some micro attacks

7882
07:57:55,040 --> 07:57:57,120
are not really possible to

7883
07:57:57,120 --> 07:57:59,920
to get modeled like this so imagine you

7884
07:57:59,920 --> 07:58:00,958
modeling

7885
07:58:00,958 --> 07:58:03,600
create a count like an attack it might

7886
07:58:03,600 --> 07:58:06,638
be interesting on different systems

7887
07:58:06,638 --> 07:58:09,360
but it's pretty limited so you can model

7888
07:58:09,360 --> 07:58:12,160
it like for a zoom use case to test it

7889
07:58:12,160 --> 07:58:14,478
that i create an account doing something

7890
07:58:14,478 --> 07:58:16,718
in between and delete the account again

7891
07:58:16,718 --> 07:58:18,320
otherwise i would just mimic

7892
07:58:18,320 --> 07:58:20,240
administrative behavior which is not

7893
07:58:20,240 --> 07:58:22,958
intentional though

7894
07:58:22,958 --> 07:58:26,478
so how can we use this methodology

7895
07:58:26,478 --> 07:58:28,000
in general

7896
07:58:28,000 --> 07:58:30,878
you must choose your must conditions so

7897
07:58:30,878 --> 07:58:33,120
you have to be focused on that you

7898
07:58:33,120 --> 07:58:35,760
gather them and then you prioritize them

7899
07:58:35,760 --> 07:58:37,760
so the most important

7900
07:58:37,760 --> 07:58:40,638
you will implement other because we have

7901
07:58:40,638 --> 07:58:43,120
uh all everyone has only eight hours a

7902
07:58:43,120 --> 07:58:45,520
day so

7903
07:58:45,520 --> 07:58:47,680
we have to model it like this and focus

7904
07:58:47,680 --> 07:58:50,398
and to start with a bunch of of the of

7905
07:58:50,398 --> 07:58:52,878
those cases for instance then we create

7906
07:58:52,878 --> 07:58:55,840
the cases so write our expectations to

7907
07:58:55,840 --> 07:58:58,080
our environment and say hey it must be

7908
07:58:58,080 --> 07:58:59,840
like this

7909
07:58:59,840 --> 07:59:02,478
then we run the test we validate the

7910
07:59:02,478 --> 07:59:03,440
test

7911
07:59:03,440 --> 07:59:05,600
and then we improve our environment and

7912
07:59:05,600 --> 07:59:07,360
then we can go on and on and on and

7913
07:59:07,360 --> 07:59:09,680
create even more of those tests and then

7914
07:59:09,680 --> 07:59:11,440
we can measure in the end our

7915
07:59:11,440 --> 07:59:14,398
environment like this

7916
07:59:14,398 --> 07:59:17,760
so how to express this

7917
07:59:17,760 --> 07:59:20,478
in numbers for instance

7918
07:59:20,478 --> 07:59:23,200
we can use it with mitra with metrics

7919
07:59:23,200 --> 07:59:24,878
and say we have a

7920
07:59:24,878 --> 07:59:26,320
technique here

7921
07:59:26,320 --> 07:59:27,600
we have model

7922
07:59:27,600 --> 07:59:28,718
in general

7923
07:59:28,718 --> 07:59:30,240
five

7924
07:59:30,240 --> 07:59:31,600
tests like this

7925
07:59:31,600 --> 07:59:34,080
we are mitigating four of them and

7926
07:59:34,080 --> 07:59:36,638
alerting only two of them the goal

7927
07:59:36,638 --> 07:59:39,520
should be to to mitigate and alert every

7928
07:59:39,520 --> 07:59:41,920
five of them but sometimes it's simply

7929
07:59:41,920 --> 07:59:44,000
not possible because you have way too

7930
07:59:44,000 --> 07:59:45,120
much

7931
07:59:45,120 --> 07:59:47,440
way too much way

7932
07:59:47,440 --> 07:59:50,240
way too much false positives

7933
07:59:50,240 --> 07:59:52,718
and another a very

7934
07:59:52,718 --> 07:59:54,878
important aspect is that you focus on

7935
07:59:54,878 --> 07:59:56,958
your environments so

7936
07:59:56,958 --> 07:59:58,878
for instance the windows environment

7937
07:59:58,878 --> 08:00:00,798
then we have the clients for it and we

7938
08:00:00,798 --> 08:00:03,360
want to model those tests there and see

7939
08:00:03,360 --> 08:00:07,520
if they are improving or changing and

7940
08:00:07,520 --> 08:00:10,320
how the current security posture is over

7941
08:00:10,320 --> 08:00:11,760
there

7942
08:00:11,760 --> 08:00:13,760
so then we also can measure this over

7943
08:00:13,760 --> 08:00:15,040
time

7944
08:00:15,040 --> 08:00:16,160
making

7945
08:00:16,160 --> 08:00:18,958
a regular iteration about this so the

7946
08:00:18,958 --> 08:00:20,878
time intervals is up to you so you can

7947
08:00:20,878 --> 08:00:23,440
run it daily you can weekly monthly but

7948
08:00:23,440 --> 08:00:25,680
not daily

7949
08:00:25,680 --> 08:00:27,520
and you have different

7950
08:00:27,520 --> 08:00:29,440
categories here

7951
08:00:29,440 --> 08:00:30,878
the red ones are the attackers

7952
08:00:30,878 --> 08:00:33,200
successful so i have to do something

7953
08:00:33,200 --> 08:00:35,520
then the tech is mitigated i have

7954
08:00:35,520 --> 08:00:38,000
counter measures for this in place

7955
08:00:38,000 --> 08:00:40,638
like hardening stuff here

7956
08:00:40,638 --> 08:00:42,558
then we have monitoring

7957
08:00:42,558 --> 08:00:46,080
so we at least getting the logs and can

7958
08:00:46,080 --> 08:00:47,440
read the logs

7959
08:00:47,440 --> 08:00:49,760
after the successful attack

7960
08:00:49,760 --> 08:00:51,840
but this is a prerequisite for the get

7961
08:00:51,840 --> 08:00:54,958
alerted thing so um that we have a vm

7962
08:00:54,958 --> 08:00:57,120
alert for instance and say hey now we

7963
08:00:57,120 --> 08:00:58,878
are also getting

7964
08:00:58,878 --> 08:01:00,798
a notification when this happens even

7965
08:01:00,798 --> 08:01:04,239
when when it's mitigated

7966
08:01:04,320 --> 08:01:07,120
so we can also go a bit deeper into this

7967
08:01:07,120 --> 08:01:09,600
that we can

7968
08:01:09,600 --> 08:01:12,240
write down some cases

7969
08:01:12,240 --> 08:01:15,360
uh pretty briefly so um

7970
08:01:15,360 --> 08:01:16,160
let's

7971
08:01:16,160 --> 08:01:18,000
take for instance the elvis as us

7972
08:01:18,000 --> 08:01:19,440
dumping via

7973
08:01:19,440 --> 08:01:20,958
run dll

7974
08:01:20,958 --> 08:01:22,638
here the attack is successful we

7975
08:01:22,638 --> 08:01:24,878
categorize it in mitra and we defined

7976
08:01:24,878 --> 08:01:28,000
countermeasures we have a risk scoring

7977
08:01:28,000 --> 08:01:30,160
within it so how important is it how

7978
08:01:30,160 --> 08:01:32,558
fast and do i need to act here

7979
08:01:32,558 --> 08:01:35,680
and we have the scope for me a system

7980
08:01:35,680 --> 08:01:37,600
here is the whole system like the

7981
08:01:37,600 --> 08:01:40,320
environment of the company and local is

7982
08:01:40,320 --> 08:01:42,798
more the the local machine it's only

7983
08:01:42,798 --> 08:01:45,200
affected there and you have some

7984
08:01:45,200 --> 08:01:48,558
guy that is responsible to mitigate or

7985
08:01:48,558 --> 08:01:51,200
to do the stuff behind the successful

7986
08:01:51,200 --> 08:01:53,680
task

7987
08:01:53,680 --> 08:01:55,280
okay so

7988
08:01:55,280 --> 08:01:57,120
we are coming finally to the end of my

7989
08:01:57,120 --> 08:01:58,320
talk

7990
08:01:58,320 --> 08:02:00,478
so what are the advantages of this

7991
08:02:00,478 --> 08:02:03,360
strategy so we have a reproducible

7992
08:02:03,360 --> 08:02:05,280
methodology to measure our security

7993
08:02:05,280 --> 08:02:07,520
posture in general

7994
08:02:07,520 --> 08:02:10,558
so uh also we can recognize changes

7995
08:02:10,558 --> 08:02:11,520
there

7996
08:02:11,520 --> 08:02:13,920
so if one of the divisions is

7997
08:02:13,920 --> 08:02:16,718
maybe not intentional at all and changes

7998
08:02:16,718 --> 08:02:19,040
some security

7999
08:02:19,040 --> 08:02:20,878
uh uh settings

8000
08:02:20,878 --> 08:02:23,040
then um yeah we want to recognize this

8001
08:02:23,040 --> 08:02:26,000
and we want uh to get notified here

8002
08:02:26,000 --> 08:02:27,200
and

8003
08:02:27,200 --> 08:02:30,160
we also um in general um

8004
08:02:30,160 --> 08:02:33,440
uh getting the monitoring gaps because

8005
08:02:33,440 --> 08:02:35,680
with this approach we can also test our

8006
08:02:35,680 --> 08:02:38,478
theme use cases on a regular basis and

8007
08:02:38,478 --> 08:02:41,360
we have not only isolated the text and

8008
08:02:41,360 --> 08:02:44,958
we can um yeah model more uh

8009
08:02:44,958 --> 08:02:47,280
sophisticated scenarios for us to test

8010
08:02:47,280 --> 08:02:50,240
those and the most important things is

8011
08:02:50,240 --> 08:02:52,398
then your your security posture gets

8012
08:02:52,398 --> 08:02:54,798
verifiable

8013
08:02:54,798 --> 08:02:56,718
so thanks for your attention now i'm

8014
08:02:56,718 --> 08:02:58,320
open for questions

8015
08:02:58,320 --> 08:03:07,320
[Applause]

8016
08:03:12,000 --> 08:03:14,320
okay

8017
08:03:15,680 --> 08:03:16,878
hello

8018
08:03:16,878 --> 08:03:19,760
hello thank you for a nice talk uh one

8019
08:03:19,760 --> 08:03:21,200
question about

8020
08:03:21,200 --> 08:03:24,878
in case of you using the atomic red team

8021
08:03:24,878 --> 08:03:26,558
framework to

8022
08:03:26,558 --> 08:03:28,478
measure detection in the area of er

8023
08:03:28,478 --> 08:03:30,080
products

8024
08:03:30,080 --> 08:03:30,878
where

8025
08:03:30,878 --> 08:03:33,280
set you deline or split the line in case

8026
08:03:33,280 --> 08:03:35,600
of i would say in case if you dump

8027
08:03:35,600 --> 08:03:38,320
credentials from the else's process

8028
08:03:38,320 --> 08:03:40,940
you can execute your atomic

8029
08:03:40,940 --> 08:03:42,240
[Music]

8030
08:03:42,240 --> 08:03:44,798
i would say um artifact

8031
08:03:44,798 --> 08:03:47,520
and it's more or less the the idle case

8032
08:03:47,520 --> 08:03:49,520
but compared to when i use the same

8033
08:03:49,520 --> 08:03:52,320
technique with from a framework like

8034
08:03:52,320 --> 08:03:54,878
cobalt strike or brute rachel where can

8035
08:03:54,878 --> 08:03:57,280
i set the line that i say okay yeah it's

8036
08:03:57,280 --> 08:04:00,320
okay we see this but compared when i do

8037
08:04:00,320 --> 08:04:02,878
the same technique based on in memory

8038
08:04:02,878 --> 08:04:05,360
encryption other things i do not longer

8039
08:04:05,360 --> 08:04:07,680
see this technique where can i say okay

8040
08:04:07,680 --> 08:04:11,040
um it makes sense it makes sense to do

8041
08:04:11,040 --> 08:04:12,798
it um

8042
08:04:12,798 --> 08:04:16,878
in this way or to say um

8043
08:04:16,878 --> 08:04:19,760
we we see it at this point but not

8044
08:04:19,760 --> 08:04:23,040
longer after we use cobalt swag or

8045
08:04:23,040 --> 08:04:25,680
other tools

8046
08:04:25,680 --> 08:04:26,638
yeah

8047
08:04:26,638 --> 08:04:28,478
generally you have to prioritize first

8048
08:04:28,478 --> 08:04:30,718
that you can say um these are the texts

8049
08:04:30,718 --> 08:04:32,320
that are um

8050
08:04:32,320 --> 08:04:35,120
more probably for my environment um you

8051
08:04:35,120 --> 08:04:37,440
can use the the tactics from

8052
08:04:37,440 --> 08:04:39,600
a cobalt strike and you implement it

8053
08:04:39,600 --> 08:04:42,320
first when you say this might be an

8054
08:04:42,320 --> 08:04:43,920
attack that is

8055
08:04:43,920 --> 08:04:46,000
that takes place in my environment and

8056
08:04:46,000 --> 08:04:48,798
then you have to model this um yeah when

8057
08:04:48,798 --> 08:04:51,680
you have a deeper memory stuff that you

8058
08:04:51,680 --> 08:04:54,080
have to model okay you need to more a

8059
08:04:54,080 --> 08:04:55,520
bit more work to

8060
08:04:55,520 --> 08:04:57,040
do to do

8061
08:04:57,040 --> 08:05:00,240
yeah or to to work on this case but then

8062
08:05:00,240 --> 08:05:03,040
you you use the framework to get to to

8063
08:05:03,040 --> 08:05:04,638
prove the visibility to prove the

8064
08:05:04,638 --> 08:05:06,638
detection so

8065
08:05:06,638 --> 08:05:09,200
when i execute the artifact from atomic

8066
08:05:09,200 --> 08:05:10,638
rectum i will

8067
08:05:10,638 --> 08:05:13,520
maybe uh the dr products we see this

8068
08:05:13,520 --> 08:05:15,600
um but um

8069
08:05:15,600 --> 08:05:17,760
especially in case of elsa's there are

8070
08:05:17,760 --> 08:05:19,360
now of

8071
08:05:19,360 --> 08:05:21,760
many ways to dump it in a different way

8072
08:05:21,760 --> 08:05:25,120
so for example you open um or you search

8073
08:05:25,120 --> 08:05:26,000
for

8074
08:05:26,000 --> 08:05:29,360
um an open handle which is already open

8075
08:05:29,360 --> 08:05:31,600
in case of service host process and then

8076
08:05:31,600 --> 08:05:33,680
i do not long receipt but how what can i

8077
08:05:33,680 --> 08:05:35,040
say then um

8078
08:05:35,040 --> 08:05:37,920
is it enough or should i say okay

8079
08:05:37,920 --> 08:05:40,000
i know there always be a way to bypass

8080
08:05:40,000 --> 08:05:42,160
or do it but um

8081
08:05:42,160 --> 08:05:44,000
from my own experience it's always hard

8082
08:05:44,000 --> 08:05:45,120
to find

8083
08:05:45,120 --> 08:05:46,240
um

8084
08:05:46,240 --> 08:05:49,200
the line so okay until this we see

8085
08:05:49,200 --> 08:05:51,280
everything but then and it's made makes

8086
08:05:51,280 --> 08:05:52,958
no longer sense or

8087
08:05:52,958 --> 08:05:54,000
yeah

8088
08:05:54,000 --> 08:05:54,718
yeah

8089
08:05:54,718 --> 08:05:56,160
it depends

8090
08:05:56,160 --> 08:05:58,798
yeah the the one thing is that you have

8091
08:05:58,798 --> 08:06:01,040
what you already stated is that you have

8092
08:06:01,040 --> 08:06:03,200
uh different perspective and angles that

8093
08:06:03,200 --> 08:06:06,080
you must implement that that you want to

8094
08:06:06,080 --> 08:06:06,878
see

8095
08:06:06,878 --> 08:06:08,958
and then you can trigger those and then

8096
08:06:08,958 --> 08:06:10,878
you can detect this but when you also

8097
08:06:10,878 --> 08:06:13,360
detect this then you have some kind of

8098
08:06:13,360 --> 08:06:15,120
zoom use case let's say

8099
08:06:15,120 --> 08:06:18,320
and um you build it and then with atomic

8100
08:06:18,320 --> 08:06:20,320
red team for instance you can uh trigger

8101
08:06:20,320 --> 08:06:23,200
this uh use case and that's the more

8102
08:06:23,200 --> 08:06:26,320
than uh in this scenario more uh

8103
08:06:26,320 --> 08:06:29,120
the better idea actually okay

8104
08:06:29,120 --> 08:06:30,718
because you don't have

8105
08:06:30,718 --> 08:06:32,878
all the time though in the world so

8106
08:06:32,878 --> 08:06:33,920
okay

8107
08:06:33,920 --> 08:06:36,239
thank you

8108
08:06:38,718 --> 08:06:40,878
hi question regarding the

8109
08:06:40,878 --> 08:06:43,120
test case input files basically

8110
08:06:43,120 --> 08:06:44,718
so you define it and then you just run

8111
08:06:44,718 --> 08:06:47,280
it has anyone already provided a large

8112
08:06:47,280 --> 08:06:49,280
library of predefined test cases that

8113
08:06:49,280 --> 08:06:51,200
you can just use yeah

8114
08:06:51,200 --> 08:06:53,600
atomic red team is a

8115
08:06:53,600 --> 08:06:55,840
repository on github where you exactly

8116
08:06:55,840 --> 08:06:56,878
have this

8117
08:06:56,878 --> 08:06:59,440
many predefined use cases that you can

8118
08:06:59,440 --> 08:07:02,239
use and build up

8119
08:07:02,718 --> 08:07:05,600
how many use cases do you have

8120
08:07:05,600 --> 08:07:07,280
a question i did

8121
08:07:07,280 --> 08:07:09,840
several hundreds i would i could say

8122
08:07:09,840 --> 08:07:11,280
question two the example you showed was

8123
08:07:11,280 --> 08:07:12,798
about windows right summer deck on

8124
08:07:12,798 --> 08:07:15,440
windows so this is executing on one host

8125
08:07:15,440 --> 08:07:17,520
machine how well does this work on a

8126
08:07:17,520 --> 08:07:18,638
network

8127
08:07:18,638 --> 08:07:20,638
centric perspective something that spans

8128
08:07:20,638 --> 08:07:22,478
multiple machines

8129
08:07:22,478 --> 08:07:25,120
um there you just set up a test machine

8130
08:07:25,120 --> 08:07:28,398
for that and then you penetrate the the

8131
08:07:28,398 --> 08:07:30,718
your environment like the network

8132
08:07:30,718 --> 08:07:33,680
i would set it up like this

8133
08:07:33,680 --> 08:07:35,600
okay thanks

8134
08:07:35,600 --> 08:07:38,760
you're welcome

8135
08:07:43,520 --> 08:07:47,120
any other questions for marcos

8136
08:07:48,878 --> 08:07:50,558
all right then please give marcos a hand

8137
08:07:50,558 --> 08:07:54,200
thank you very much

8138
08:07:58,878 --> 08:07:59,680
wait

8139
08:07:59,680 --> 08:08:01,440
we have to

8140
08:08:01,440 --> 08:08:04,240
thank you very much it's our speaker

8141
08:08:04,240 --> 08:08:08,040
so i'm gonna

8142
08:08:15,200 --> 08:08:16,558
so

8143
08:08:16,558 --> 08:08:19,120
it is 16 24 so we have some minutes

8144
08:08:19,120 --> 08:08:20,878
before um

8145
08:08:20,878 --> 08:08:22,878
our last speaker

8146
08:08:22,878 --> 08:08:25,760
i'm going to stop my timer so i don't

8147
08:08:25,760 --> 08:08:28,160
cancel

8148
08:08:28,798 --> 08:08:30,558
i would like to try an experiment if

8149
08:08:30,558 --> 08:08:33,958
you're willing to

8150
08:08:38,398 --> 08:08:41,600
the day we've had some very delicious

8151
08:08:41,600 --> 08:08:42,558
but

8152
08:08:42,558 --> 08:08:44,878
sleep inducing food we've had some

8153
08:08:44,878 --> 08:08:47,600
exciting talks yes we have

8154
08:08:47,600 --> 08:08:49,520
but i'd like to try

8155
08:08:49,520 --> 08:08:50,718
a

8156
08:08:50,718 --> 08:08:54,240
game that is corona friendly but

8157
08:08:54,240 --> 08:08:55,920
and also um

8158
08:08:55,920 --> 08:08:57,680
gets your blood moving

8159
08:08:57,680 --> 08:09:01,280
um and is actually a little bit

8160
08:09:01,280 --> 08:09:03,040
very competitive

8161
08:09:03,040 --> 08:09:05,360
so the idea is this

8162
08:09:05,360 --> 08:09:08,478
what you need to do is to stand up and

8163
08:09:08,478 --> 08:09:11,600
face somebody near you and play rock

8164
08:09:11,600 --> 08:09:13,440
paper scissors

8165
08:09:13,440 --> 08:09:15,200
so if you don't know how to play rock

8166
08:09:15,200 --> 08:09:16,718
paper scissors

8167
08:09:16,718 --> 08:09:20,240
you'd make a rock a paper or scissors to

8168
08:09:20,240 --> 08:09:22,080
the person in front of you

8169
08:09:22,080 --> 08:09:25,120
um and when you do this uh paper covers

8170
08:09:25,120 --> 08:09:27,520
rock scissors rock paper scissors with

8171
08:09:27,520 --> 08:09:28,798
the next person

8172
08:09:28,798 --> 08:09:30,000
and let's see

8173
08:09:30,000 --> 08:09:32,478
if we can get this done within five

8174
08:09:32,478 --> 08:09:33,760
minutes

8175
08:09:33,760 --> 08:09:35,120
so

8176
08:09:35,120 --> 08:09:37,600
without further ado please get up find

8177
08:09:37,600 --> 08:09:39,680
somebody and rock paper scissors and

8178
08:09:39,680 --> 08:09:43,120
let's see if we can make this happen

8179
08:09:44,240 --> 08:09:46,240
just once

8180
08:09:46,240 --> 08:09:51,878
winner goes in front loser goes behind

8181
08:27:06,080 --> 08:27:08,398
yes

8182
08:27:09,360 --> 08:27:12,080
it is freaking amazing to see so many

8183
08:27:12,080 --> 08:27:14,558
people still here at the end of the day

8184
08:27:14,558 --> 08:27:16,558
powering through

8185
08:27:16,558 --> 08:27:21,920
please give yourself a round of applause

8186
08:27:25,440 --> 08:27:28,160
do we have bananas or no yes or no we

8187
08:27:28,160 --> 08:27:30,000
have bananas okay

8188
08:27:30,000 --> 08:27:32,638
so before our last round we are going to

8189
08:27:32,638 --> 08:27:34,798
power through with some questions were

8190
08:27:34,798 --> 08:27:36,718
you paying attention in the introduction

8191
08:27:36,718 --> 08:27:39,520
this morning that's the master question

8192
08:27:39,520 --> 08:27:40,798
so

8193
08:27:40,798 --> 08:27:41,600
if

8194
08:27:41,600 --> 08:27:42,798
okay

8195
08:27:42,798 --> 08:27:45,440
yeah we'll just go from here so first

8196
08:27:45,440 --> 08:27:47,120
question there are five questions you

8197
08:27:47,120 --> 08:27:48,478
can win

8198
08:27:48,478 --> 08:27:49,760
a banana

8199
08:27:49,760 --> 08:27:51,680
if you get the questions right so the

8200
08:27:51,680 --> 08:27:53,840
coveted b-sides munich

8201
08:27:53,840 --> 08:27:56,160
comeback banana is could be there for

8202
08:27:56,160 --> 08:27:58,160
you first question

8203
08:27:58,160 --> 08:28:00,798
which year was the first b-sides munich

8204
08:28:00,798 --> 08:28:02,558
organized

8205
08:28:02,558 --> 08:28:04,798
yes

8206
08:28:04,958 --> 08:28:08,478
yes she gets a banana

8207
08:28:09,680 --> 08:28:12,080
okay well she grabs her banana

8208
08:28:12,080 --> 08:28:16,318
how many cfp submissions did we receive

8209
08:28:16,318 --> 08:28:18,080
this year

8210
08:28:18,080 --> 08:28:19,520
58 is

8211
08:28:19,520 --> 08:28:22,240
correct the answer well done

8212
08:28:22,240 --> 08:28:25,280
catch you banana

8213
08:28:25,520 --> 08:28:27,520
okay

8214
08:28:27,520 --> 08:28:29,120
how many

8215
08:28:29,120 --> 08:28:34,160
virtual speakers did we have today

8216
08:28:34,160 --> 08:28:35,360
yes

8217
08:28:35,360 --> 08:28:37,280
three oh my god she is collecting

8218
08:28:37,280 --> 08:28:41,557
bananas in the corner people

8219
08:28:42,240 --> 08:28:44,160
okay

8220
08:28:44,160 --> 08:28:46,080
second to last question

8221
08:28:46,080 --> 08:28:47,840
number

8222
08:28:47,840 --> 08:28:48,798
of

8223
08:28:48,798 --> 08:28:52,398
workshops this year

8224
08:28:52,398 --> 08:28:54,718
four i heard four is that correct one

8225
08:28:54,718 --> 08:28:58,638
two correct get your banana

8226
08:29:00,398 --> 08:29:04,000
and then last but not least

8227
08:29:04,000 --> 08:29:07,718
why layer six

8228
08:29:10,160 --> 08:29:13,040
say it very loud

8229
08:29:13,040 --> 08:29:15,120
presentation layer winds with a loud

8230
08:29:15,120 --> 08:29:17,360
voice thank you very much all right get

8231
08:29:17,360 --> 08:29:19,200
your banana

8232
08:29:19,200 --> 08:29:22,878
[Applause]

8233
08:29:22,878 --> 08:29:25,040
so uh thank you very much thanks for the

8234
08:29:25,040 --> 08:29:27,760
energetic round of answering questions

8235
08:29:27,760 --> 08:29:30,318
and now it's time to introduce our

8236
08:29:30,318 --> 08:29:32,718
closing keynote speaker i'm super

8237
08:29:32,718 --> 08:29:34,798
excited to have her i've been a huge fan

8238
08:29:34,798 --> 08:29:37,120
for quite a while but i think you are

8239
08:29:37,120 --> 08:29:39,600
the one up to introduce her so

8240
08:29:39,600 --> 08:29:44,079
sneha without further ado let's do this

8241
08:29:45,280 --> 08:29:46,798
thank you so much jen

8242
08:29:46,798 --> 08:29:49,280
and to be fairly honest i take it as an

8243
08:29:49,280 --> 08:29:52,160
honor for myself to introduce her

8244
08:29:52,160 --> 08:29:54,718
because she has not only been a friend

8245
08:29:54,718 --> 08:29:57,760
to me but she has also been a mentor and

8246
08:29:57,760 --> 08:30:00,160
she's not just my mentor she takes up

8247
08:30:00,160 --> 08:30:03,200
the responsibility to mentor everybody

8248
08:30:03,200 --> 08:30:06,398
on every monday of every month of every

8249
08:30:06,398 --> 08:30:08,398
year

8250
08:30:08,398 --> 08:30:11,200
ladies and gentlemen it's really honor

8251
08:30:11,200 --> 08:30:14,318
and i'm so excited and stoked and happy

8252
08:30:14,318 --> 08:30:17,600
to have tanya jenka here today

8253
08:30:17,600 --> 08:30:19,920
although she's virtually present today

8254
08:30:19,920 --> 08:30:22,398
but she is here on our stage

8255
08:30:22,398 --> 08:30:25,520
to guide us through the entire process

8256
08:30:25,520 --> 08:30:27,200
of how

8257
08:30:27,200 --> 08:30:29,760
while performing security

8258
08:30:29,760 --> 08:30:32,558
how do you still keep engineers your

8259
08:30:32,558 --> 08:30:34,638
friends and not enemies

8260
08:30:34,638 --> 08:30:35,520
so

8261
08:30:35,520 --> 08:30:38,638
please give a huge round of applause she

8262
08:30:38,638 --> 08:30:40,958
should hear it right there in canada

8263
08:30:40,958 --> 08:30:43,200
that we are missing her here and we

8264
08:30:43,200 --> 08:30:46,000
appreciate that she took the time today

8265
08:30:46,000 --> 08:30:49,200
and is honoring us by guiding us how to

8266
08:30:49,200 --> 08:30:52,240
keep both these security worlds right

8267
08:30:52,240 --> 08:30:55,280
together in one place and nice and

8268
08:30:55,280 --> 08:30:57,600
happily so please give a round of

8269
08:30:57,600 --> 08:31:01,877
applause to tanya jenka

8270
08:31:03,770 --> 08:31:06,869
[Music]

8271
08:31:08,718 --> 08:31:11,360
hi everyone i really really appreciate

8272
08:31:11,360 --> 08:31:13,920
snea and the entire besides team having

8273
08:31:13,920 --> 08:31:15,360
me here and thank you for letting me

8274
08:31:15,360 --> 08:31:16,958
present virtually

8275
08:31:16,958 --> 08:31:18,718
because sometimes you just can't make it

8276
08:31:18,718 --> 08:31:21,360
to the place you really want to be at so

8277
08:31:21,360 --> 08:31:25,280
this talk is called adding dats to ci cd

8278
08:31:25,280 --> 08:31:27,680
so adding das as in like a dynamic

8279
08:31:27,680 --> 08:31:29,760
application security testing tools

8280
08:31:29,760 --> 08:31:31,920
sometimes people will say oh yeah web

8281
08:31:31,920 --> 08:31:35,120
app scanner and i sort of mean that yes

8282
08:31:35,120 --> 08:31:36,160
but

8283
08:31:36,160 --> 08:31:38,398
i started writing this out and then i

8284
08:31:38,398 --> 08:31:39,920
remembered when

8285
08:31:39,920 --> 08:31:42,080
people first started adding vasts to

8286
08:31:42,080 --> 08:31:44,000
pipelines where i worked and i was the

8287
08:31:44,000 --> 08:31:46,318
person adding them and it didn't happen

8288
08:31:46,318 --> 08:31:48,318
exactly like this but it felt a bit like

8289
08:31:48,318 --> 08:31:49,280
this

8290
08:31:49,280 --> 08:31:51,680
so i was like i've added the scanner to

8291
08:31:51,680 --> 08:31:53,200
your pipeline and the software

8292
08:31:53,200 --> 08:31:56,240
developers were like it is too slow this

8293
08:31:56,240 --> 08:31:58,478
is taking forever and then we went

8294
08:31:58,478 --> 08:32:00,080
through the results and there was a

8295
08:32:00,080 --> 08:32:02,558
false positive in the tool because i was

8296
08:32:02,558 --> 08:32:05,520
using a free tool it was perhaps

8297
08:32:05,520 --> 08:32:07,440
like it i thought it was amazing at the

8298
08:32:07,440 --> 08:32:10,240
time right and i i'm like but i found

8299
08:32:10,240 --> 08:32:13,280
eight real bugs automatically

8300
08:32:13,280 --> 08:32:15,760
um but they're like it's too slow and it

8301
08:32:15,760 --> 08:32:17,680
felt like one false positive breaking

8302
08:32:17,680 --> 08:32:19,760
the build is not acceptable so then i

8303
08:32:19,760 --> 08:32:21,200
was like i should change the name of

8304
08:32:21,200 --> 08:32:25,280
this talk from just adding dast to ci cd

8305
08:32:25,280 --> 08:32:27,600
without losing any friends because if

8306
08:32:27,600 --> 08:32:29,920
you don't have a good relationship with

8307
08:32:29,920 --> 08:32:31,520
the software developers and if you're

8308
08:32:31,520 --> 08:32:33,760
doing devops with the ops team you're

8309
08:32:33,760 --> 08:32:34,558
just

8310
08:32:34,558 --> 08:32:36,398
so not only are you not going to be able

8311
08:32:36,398 --> 08:32:38,878
to have coffee with the cool kids but on

8312
08:32:38,878 --> 08:32:41,440
top of that it's like really really hard

8313
08:32:41,440 --> 08:32:44,240
to get your job done without i'm taking

8314
08:32:44,240 --> 08:32:45,760
off my sweater because when i talk i

8315
08:32:45,760 --> 08:32:47,440
like move around a lot and i get really

8316
08:32:47,440 --> 08:32:49,760
warm um

8317
08:32:49,760 --> 08:32:52,160
but it's it's really hard to get the

8318
08:32:52,160 --> 08:32:54,878
things you want done without ticking

8319
08:32:54,878 --> 08:32:56,638
everyone off if you're not careful and

8320
08:32:56,638 --> 08:32:57,840
so we're going to talk about different

8321
08:32:57,840 --> 08:32:59,600
ways that you can do that

8322
08:32:59,600 --> 08:33:01,280
so you can put this tool in a pipeline

8323
08:33:01,280 --> 08:33:03,200
and get really good results but also all

8324
08:33:03,200 --> 08:33:04,958
the places not in a pipeline that you

8325
08:33:04,958 --> 08:33:06,160
can put it

8326
08:33:06,160 --> 08:33:08,000
but still automate it and still get good

8327
08:33:08,000 --> 08:33:10,398
results and a whole bunch of just other

8328
08:33:10,398 --> 08:33:13,360
tests you can do etc so like who's this

8329
08:33:13,360 --> 08:33:15,680
person that's friends with snaia

8330
08:33:15,680 --> 08:33:17,760
so i am a giant nerd and i'm the

8331
08:33:17,760 --> 08:33:19,600
director of developer relations and

8332
08:33:19,600 --> 08:33:22,398
community at bright security um i

8333
08:33:22,398 --> 08:33:24,080
founded the wehack purple community

8334
08:33:24,080 --> 08:33:25,440
where you can take a bunch of training

8335
08:33:25,440 --> 08:33:27,200
courses for free

8336
08:33:27,200 --> 08:33:30,478
about software security my obsession

8337
08:33:30,478 --> 08:33:32,878
i'm on the internet i wrote a book

8338
08:33:32,878 --> 08:33:35,760
called alice and bob learn apsec i did

8339
08:33:35,760 --> 08:33:36,798
basically

8340
08:33:36,798 --> 08:33:39,360
so the main gist of this slide

8341
08:33:39,360 --> 08:33:41,120
is that i'm a nerd on the internet i've

8342
08:33:41,120 --> 08:33:43,600
been a nerd for a really long time and

8343
08:33:43,600 --> 08:33:45,200
i'm hoping that you will sit through my

8344
08:33:45,200 --> 08:33:46,958
presentation and give me a chance

8345
08:33:46,958 --> 08:33:48,840
because you're like she seems pretty

8346
08:33:48,840 --> 08:33:51,840
competent so that is me where i have

8347
08:33:51,840 --> 08:33:53,600
slightly longer hair

8348
08:33:53,600 --> 08:33:54,638
okay

8349
08:33:54,638 --> 08:33:56,558
so what problem are we trying to solve

8350
08:33:56,558 --> 08:33:57,440
because

8351
08:33:57,440 --> 08:33:59,040
all of these talks that you saw were

8352
08:33:59,040 --> 08:34:01,840
trying to solve a problem and what we

8353
08:34:01,840 --> 08:34:04,558
one of my main things i want to solve

8354
08:34:04,558 --> 08:34:07,760
just in my career is insecure software

8355
08:34:07,760 --> 08:34:10,080
um it's causing data breaches around the

8356
08:34:10,080 --> 08:34:12,080
world it's the number one cause of data

8357
08:34:12,080 --> 08:34:13,120
breaches

8358
08:34:13,120 --> 08:34:15,200
it's not the number one cause of

8359
08:34:15,200 --> 08:34:17,280
software security it's not the number

8360
08:34:17,280 --> 08:34:19,440
one cause of security incidents it's not

8361
08:34:19,440 --> 08:34:20,958
the number one cause of people having

8362
08:34:20,958 --> 08:34:23,360
their money stolen it's people stealing

8363
08:34:23,360 --> 08:34:25,200
all of your data which is the most

8364
08:34:25,200 --> 08:34:27,040
damaging type of security incident you

8365
08:34:27,040 --> 08:34:30,000
can have um i would like us to not win

8366
08:34:30,000 --> 08:34:33,120
this occasion every year so every year

8367
08:34:33,120 --> 08:34:36,080
verizon which is an american company

8368
08:34:36,080 --> 08:34:37,920
makes this breach report and they've

8369
08:34:37,920 --> 08:34:40,558
been doing it since 2008 and pretty much

8370
08:34:40,558 --> 08:34:41,760
every year

8371
08:34:41,760 --> 08:34:43,600
insecure software wins

8372
08:34:43,600 --> 08:34:46,798
the worst title of being the number one

8373
08:34:46,798 --> 08:34:49,200
cause of data breaches and

8374
08:34:49,200 --> 08:34:52,240
i want us to do better

8375
08:34:52,240 --> 08:34:55,520
um another problem we're trying to solve

8376
08:34:55,520 --> 08:34:57,440
is if we're going to work in a devops

8377
08:34:57,440 --> 08:34:59,040
shop and we're going to try to make

8378
08:34:59,040 --> 08:35:01,440
their software more secure

8379
08:35:01,440 --> 08:35:02,638
we need

8380
08:35:02,638 --> 08:35:05,440
our tools to be accurate need them to go

8381
08:35:05,440 --> 08:35:07,680
really fast and whatever we can do we

8382
08:35:07,680 --> 08:35:09,440
need to automate so there's going to be

8383
08:35:09,440 --> 08:35:11,600
way more devops people than security

8384
08:35:11,600 --> 08:35:14,080
people it's just a fact there's way way

8385
08:35:14,080 --> 08:35:16,638
way more software developers than appsec

8386
08:35:16,638 --> 08:35:20,318
people github released a report in

8387
08:35:20,318 --> 08:35:21,440
january

8388
08:35:21,440 --> 08:35:23,760
that said so it used to be one to one

8389
08:35:23,760 --> 08:35:25,680
hundreds there'd be one abstract per

8390
08:35:25,680 --> 08:35:27,440
person for every div

8391
08:35:27,440 --> 08:35:30,000
now it's 500 to 1.

8392
08:35:30,000 --> 08:35:32,478
those are not great odds so we need to

8393
08:35:32,478 --> 08:35:35,920
do we need to be accurate but we need to

8394
08:35:35,920 --> 08:35:38,478
also be fast and

8395
08:35:38,478 --> 08:35:40,240
try to automate

8396
08:35:40,240 --> 08:35:41,520
and so

8397
08:35:41,520 --> 08:35:43,920
if we want to do devsecops so us

8398
08:35:43,920 --> 08:35:46,000
security folks doing security in a

8399
08:35:46,000 --> 08:35:47,760
devops environment

8400
08:35:47,760 --> 08:35:50,478
we need to test from multiple angles

8401
08:35:50,478 --> 08:35:52,718
so we can't just do one test and be like

8402
08:35:52,718 --> 08:35:54,398
i'm sure it's fine

8403
08:35:54,398 --> 08:35:56,478
that's not good enough we need to have

8404
08:35:56,478 --> 08:35:59,200
good relationships between security dev

8405
08:35:59,200 --> 08:36:01,520
and ops and i don't mean that like you

8406
08:36:01,520 --> 08:36:03,680
have to give them hugs or you go grocery

8407
08:36:03,680 --> 08:36:05,760
shopping with them but i mean that we

8408
08:36:05,760 --> 08:36:07,760
have to be able to work with them and

8409
08:36:07,760 --> 08:36:09,840
have a good relationship so i can say

8410
08:36:09,840 --> 08:36:12,080
things like hey did you see those test

8411
08:36:12,080 --> 08:36:14,160
results and the person answers you know

8412
08:36:14,160 --> 08:36:16,080
something like yeah i did or i got the

8413
08:36:16,080 --> 08:36:17,520
email i haven't had a chance to read it

8414
08:36:17,520 --> 08:36:19,440
yet or yeah i've been meaning to talk to

8415
08:36:19,440 --> 08:36:20,318
you

8416
08:36:20,318 --> 08:36:22,318
i need them to not answer with go to

8417
08:36:22,318 --> 08:36:26,240
hell tanya you broke our pipeline again

8418
08:36:26,240 --> 08:36:28,240
i need to maintain a good relationship

8419
08:36:28,240 --> 08:36:30,318
so i can get my job done

8420
08:36:30,318 --> 08:36:32,398
i have worked at places where the

8421
08:36:32,398 --> 08:36:34,240
security team and the software

8422
08:36:34,240 --> 08:36:37,120
developers were like that's just er all

8423
08:36:37,120 --> 08:36:39,200
the time and i spent like half of every

8424
08:36:39,200 --> 08:36:41,360
week just trying to put out

8425
08:36:41,360 --> 08:36:43,760
angry emotional fires

8426
08:36:43,760 --> 08:36:45,840
of people that didn't trust each other

8427
08:36:45,840 --> 08:36:48,000
that didn't like working together etc

8428
08:36:48,000 --> 08:36:49,600
and so if you have a good relationship

8429
08:36:49,600 --> 08:36:51,760
you get twice as much done

8430
08:36:51,760 --> 08:36:53,680
and then the last thing is

8431
08:36:53,680 --> 08:36:57,280
i want bugs fixed as soon as possible

8432
08:36:57,280 --> 08:36:59,040
and i don't mean i want them fixed on

8433
08:36:59,040 --> 08:37:02,000
monday instead of friday i mean if we're

8434
08:37:02,000 --> 08:37:03,680
following the system development life

8435
08:37:03,680 --> 08:37:05,360
cycle so if you're doing waterfalls like

8436
08:37:05,360 --> 08:37:07,840
this it's like requirements design

8437
08:37:07,840 --> 08:37:10,798
coding testing release if you're doing

8438
08:37:10,798 --> 08:37:13,120
agile you do that same thing but you do

8439
08:37:13,120 --> 08:37:14,638
it in a circle and you release a whole

8440
08:37:14,638 --> 08:37:16,558
bunch of times if you're doing devops

8441
08:37:16,558 --> 08:37:18,798
you do the eternity symbol where you're

8442
08:37:18,798 --> 08:37:21,040
like yep got it got it releasing it got

8443
08:37:21,040 --> 08:37:22,958
it releasing it got it release it and

8444
08:37:22,958 --> 08:37:24,878
you just continue to release over and

8445
08:37:24,878 --> 08:37:28,240
over again even more often than agile

8446
08:37:28,240 --> 08:37:30,160
and so automation is our only way that

8447
08:37:30,160 --> 08:37:33,280
we can keep up with those people and i

8448
08:37:33,280 --> 08:37:35,680
want them fixing those bugs as soon as

8449
08:37:35,680 --> 08:37:37,920
we find them or as soon as they have

8450
08:37:37,920 --> 08:37:40,240
time i don't want things waiting until

8451
08:37:40,240 --> 08:37:42,160
later i don't want the software

8452
08:37:42,160 --> 08:37:44,160
developers or the operations folks

8453
08:37:44,160 --> 08:37:46,080
thinking like is tonya ever going to

8454
08:37:46,080 --> 08:37:47,360
tell me what's wrong is she ever gonna

8455
08:37:47,360 --> 08:37:49,600
do a test like where is that lady

8456
08:37:49,600 --> 08:37:52,160
i want to be there for them and know

8457
08:37:52,160 --> 08:37:54,398
i want them to know that i can help

8458
08:37:54,398 --> 08:37:55,440
and so

8459
08:37:55,440 --> 08:37:57,280
fixing books as soon as possible in the

8460
08:37:57,280 --> 08:37:59,440
system development life cycle the reason

8461
08:37:59,440 --> 08:38:01,920
i want that is because it is way cheaper

8462
08:38:01,920 --> 08:38:04,080
it's way way cheaper that way

8463
08:38:04,080 --> 08:38:05,040
so

8464
08:38:05,040 --> 08:38:07,120
what are so today we're going to zero in

8465
08:38:07,120 --> 08:38:09,040
specifically on das so

8466
08:38:09,040 --> 08:38:11,360
right security bought my company a few

8467
08:38:11,360 --> 08:38:13,280
weeks ago and they make a desk and so

8468
08:38:13,280 --> 08:38:14,798
when they're like oh or you know you're

8469
08:38:14,798 --> 08:38:16,558
gonna start applying to companies what

8470
08:38:16,558 --> 08:38:17,840
you want to talk about i won't talk

8471
08:38:17,840 --> 08:38:19,680
about that and how people can do it

8472
08:38:19,680 --> 08:38:21,440
right because i see a lot of people buy

8473
08:38:21,440 --> 08:38:23,280
tools and they don't do it right and

8474
08:38:23,280 --> 08:38:24,718
they don't get good results i want

8475
08:38:24,718 --> 08:38:27,520
people to get better results

8476
08:38:27,520 --> 08:38:30,160
so what the heck is fast so it stands

8477
08:38:30,160 --> 08:38:34,478
for dynamic application security testing

8478
08:38:34,478 --> 08:38:36,318
what it means is that your app needs to

8479
08:38:36,318 --> 08:38:37,840
be running

8480
08:38:37,840 --> 08:38:40,000
so it could be localhost it could be a

8481
08:38:40,000 --> 08:38:42,000
web server it could be a container a

8482
08:38:42,000 --> 08:38:43,920
platform as a service it doesn't matter

8483
08:38:43,920 --> 08:38:45,920
but your app is running like you can see

8484
08:38:45,920 --> 08:38:48,080
the software in a browser

8485
08:38:48,080 --> 08:38:50,558
and then it sends requests

8486
08:38:50,558 --> 08:38:52,638
at your app to try to find security

8487
08:38:52,638 --> 08:38:55,120
vulnerabilities your app responds and it

8488
08:38:55,120 --> 08:38:56,878
goes back and forth like this it can

8489
08:38:56,878 --> 08:38:58,718
also do apis where it sends requests to

8490
08:38:58,718 --> 08:39:00,558
your apis it receives the response it

8491
08:39:00,558 --> 08:39:02,798
goes back and forth and the idea is it's

8492
08:39:02,798 --> 08:39:03,760
sort of

8493
08:39:03,760 --> 08:39:05,680
a computer conversation

8494
08:39:05,680 --> 08:39:07,280
and it just keeps trying to find all

8495
08:39:07,280 --> 08:39:09,040
your vulnerabilities and it does this in

8496
08:39:09,040 --> 08:39:11,280
an automated way so it's like hey how's

8497
08:39:11,280 --> 08:39:13,680
it going oh it's not going so well oh is

8498
08:39:13,680 --> 08:39:15,760
it going like this okay yeah and then

8499
08:39:15,760 --> 08:39:17,520
from that conversation it starts

8500
08:39:17,520 --> 08:39:20,240
crafting better and better tests

8501
08:39:20,240 --> 08:39:21,840
it automates this for you so you could

8502
08:39:21,840 --> 08:39:23,600
just like sit back and be like oh okay

8503
08:39:23,600 --> 08:39:25,520
this is happening that's good

8504
08:39:25,520 --> 08:39:28,398
it's different than static testing or

8505
08:39:28,398 --> 08:39:30,000
software composition analysis that

8506
08:39:30,000 --> 08:39:32,318
requires a copy of your code

8507
08:39:32,318 --> 08:39:34,638
so i used to be a pen tester and they

8508
08:39:34,638 --> 08:39:36,558
wouldn't give me a copy of the code

8509
08:39:36,558 --> 08:39:38,638
so i had to do all my tests in a dynamic

8510
08:39:38,638 --> 08:39:40,718
manner where i was trying to talk to the

8511
08:39:40,718 --> 08:39:43,440
app either manually or with a das tool

8512
08:39:43,440 --> 08:39:45,600
but the idea is it interacts with your

8513
08:39:45,600 --> 08:39:48,478
app to try to find out what's wrong

8514
08:39:48,478 --> 08:39:50,958
and so why did i

8515
08:39:50,958 --> 08:39:53,120
decide to zero in on that so when i was

8516
08:39:53,120 --> 08:39:54,478
a software developer

8517
08:39:54,478 --> 08:39:57,360
for around 17 years i briefly took a a

8518
08:39:57,360 --> 08:39:59,520
break as a sysadmin and then came back

8519
08:39:59,520 --> 08:40:01,520
to software my true love

8520
08:40:01,520 --> 08:40:03,840
and basically

8521
08:40:03,840 --> 08:40:06,000
i started when i moved into security

8522
08:40:06,000 --> 08:40:08,318
with a dynamic scanner i found it way

8523
08:40:08,318 --> 08:40:10,638
easier than static analysis or software

8524
08:40:10,638 --> 08:40:13,520
composition analysis i found it easier

8525
08:40:13,520 --> 08:40:15,200
than trying to figure out because this

8526
08:40:15,200 --> 08:40:17,120
is the secret it's the secret i thought

8527
08:40:17,120 --> 08:40:19,360
it was the easiest one and i find a lot

8528
08:40:19,360 --> 08:40:20,878
of people who are first getting into

8529
08:40:20,878 --> 08:40:22,958
these things they find it easy too

8530
08:40:22,958 --> 08:40:24,958
i also so maybe i'm not supposed to

8531
08:40:24,958 --> 08:40:26,718
admit this but like the first time i ran

8532
08:40:26,718 --> 08:40:28,478
a dash and i found vulnerabilities i'm

8533
08:40:28,478 --> 08:40:30,318
like i'm a hacker

8534
08:40:30,318 --> 08:40:33,040
it felt very exciting and i know that

8535
08:40:33,040 --> 08:40:34,798
might sound silly because i'm like you

8536
08:40:34,798 --> 08:40:36,398
know in my mid-40s and i've been doing

8537
08:40:36,398 --> 08:40:38,478
this a long time but i don't know how to

8538
08:40:38,478 --> 08:40:39,840
explain whenever i find stuff i'm like

8539
08:40:39,840 --> 08:40:41,680
yeah that's right i'm awesome

8540
08:40:41,680 --> 08:40:43,440
um but the last one which is probably

8541
08:40:43,440 --> 08:40:46,558
the most important one is that your app

8542
08:40:46,558 --> 08:40:47,920
is out there sitting on the internet

8543
08:40:47,920 --> 08:40:50,240
your api unless it has a gateway in

8544
08:40:50,240 --> 08:40:52,160
front of it or a bunch of firewalls in

8545
08:40:52,160 --> 08:40:54,638
front of it is out there sitting on the

8546
08:40:54,638 --> 08:40:55,760
internet

8547
08:40:55,760 --> 08:40:58,638
and on the internet anyone can point a

8548
08:40:58,638 --> 08:41:01,680
dash data and scan it if you have a waff

8549
08:41:01,680 --> 08:41:03,200
or you have other defenses you could

8550
08:41:03,200 --> 08:41:05,280
probably shoot away but most the

8551
08:41:05,280 --> 08:41:07,360
internet doesn't have a web application

8552
08:41:07,360 --> 08:41:09,440
firewall or a runtime application

8553
08:41:09,440 --> 08:41:11,440
security protection tool so like a

8554
08:41:11,440 --> 08:41:13,120
shield for your app most of the internet

8555
08:41:13,120 --> 08:41:14,478
doesn't have that

8556
08:41:14,478 --> 08:41:16,718
and so that means basically anyone with

8557
08:41:16,718 --> 08:41:18,318
very little skill can just point a

8558
08:41:18,318 --> 08:41:20,398
dynamic scanner at you and find

8559
08:41:20,398 --> 08:41:22,558
vulnerabilities they are usually

8560
08:41:22,558 --> 08:41:25,280
exploitable and so it's the most obvious

8561
08:41:25,280 --> 08:41:27,200
place to start because that's where bad

8562
08:41:27,200 --> 08:41:29,120
guys start unless you're open source

8563
08:41:29,120 --> 08:41:30,478
they don't have a copy of your code

8564
08:41:30,478 --> 08:41:32,240
unless they're an insider threat they

8565
08:41:32,240 --> 08:41:35,040
can't test from the inside so a das can

8566
08:41:35,040 --> 08:41:36,878
just test from anywhere on the planet

8567
08:41:36,878 --> 08:41:39,040
and it doesn't take very long to find

8568
08:41:39,040 --> 08:41:40,958
problems and so i want us to fix those

8569
08:41:40,958 --> 08:41:42,718
problems first because they are the most

8570
08:41:42,718 --> 08:41:44,840
evident to people that might be

8571
08:41:44,840 --> 08:41:48,240
malicious and so what is devops so this

8572
08:41:48,240 --> 08:41:51,840
is a very short and small summary

8573
08:41:51,840 --> 08:41:54,240
so devops is spoiler alert it's not

8574
08:41:54,240 --> 08:41:56,638
paying one person to two jobs that's not

8575
08:41:56,638 --> 08:41:57,680
what it is

8576
08:41:57,680 --> 08:42:00,958
so basically devops is a newer way to

8577
08:42:00,958 --> 08:42:04,160
create software it's a methodology and

8578
08:42:04,160 --> 08:42:05,920
it's a culture so you follow certain

8579
08:42:05,920 --> 08:42:08,718
processes people act and feel certain

8580
08:42:08,718 --> 08:42:11,280
ways and you often use certain tools to

8581
08:42:11,280 --> 08:42:13,200
reinforce it so we're going to talk

8582
08:42:13,200 --> 08:42:15,040
about it a bit more so sometimes people

8583
08:42:15,040 --> 08:42:16,398
will say it's people products and

8584
08:42:16,398 --> 08:42:17,760
processes

8585
08:42:17,760 --> 08:42:19,760
i don't really like that i like the idea

8586
08:42:19,760 --> 08:42:22,958
of us following the three ways of devops

8587
08:42:22,958 --> 08:42:26,240
but i digress next slide so so first of

8588
08:42:26,240 --> 08:42:27,520
all if you're doing devops you usually

8589
08:42:27,520 --> 08:42:29,440
have a ci cd so it's continuous

8590
08:42:29,440 --> 08:42:32,080
integration continuous delivery

8591
08:42:32,080 --> 08:42:34,080
or continuous deployment depending upon

8592
08:42:34,080 --> 08:42:36,000
how you're using it but it's automated

8593
08:42:36,000 --> 08:42:37,280
software

8594
08:42:37,280 --> 08:42:39,680
that tests and releases your software

8595
08:42:39,680 --> 08:42:41,200
and your infrastructure to different

8596
08:42:41,200 --> 08:42:42,478
environments

8597
08:42:42,478 --> 08:42:44,878
so it takes a copy of your code and

8598
08:42:44,878 --> 08:42:47,360
builds it and tests it and then it's

8599
08:42:47,360 --> 08:42:49,280
like oh i'm gonna put it on a dev server

8600
08:42:49,280 --> 08:42:51,120
i'm gonna test it again oh i'm gonna

8601
08:42:51,120 --> 08:42:52,558
build it like i'm gonna take that

8602
08:42:52,558 --> 08:42:54,080
artifact i'm gonna copy it to the qa

8603
08:42:54,080 --> 08:42:56,478
server i'm gonna run even more tests and

8604
08:42:56,478 --> 08:42:57,920
it does this with your infrastructure as

8605
08:42:57,920 --> 08:42:59,600
well it can actually build the

8606
08:42:59,600 --> 08:43:01,360
infrastructure and then plop your app on

8607
08:43:01,360 --> 08:43:04,240
it and test them together and it's

8608
08:43:04,240 --> 08:43:06,398
i think it's quite nifty

8609
08:43:06,398 --> 08:43:09,120
so then if we want to do devops there

8610
08:43:09,120 --> 08:43:12,080
are the three ways of devops so sort of

8611
08:43:12,080 --> 08:43:14,000
like the three rules you need to kind of

8612
08:43:14,000 --> 08:43:15,440
do these things if you want to get all

8613
08:43:15,440 --> 08:43:17,920
the value that you can of devops and so

8614
08:43:17,920 --> 08:43:19,840
the first one is efficiency for the

8615
08:43:19,840 --> 08:43:22,878
entire system and so when i see that i'm

8616
08:43:22,878 --> 08:43:24,878
like not just your part tanya

8617
08:43:24,878 --> 08:43:27,040
you have to like share with everyone and

8618
08:43:27,040 --> 08:43:28,638
so that's important

8619
08:43:28,638 --> 08:43:31,440
fast feedback and so then i added to

8620
08:43:31,440 --> 08:43:33,360
that that is accurate and gets to the

8621
08:43:33,360 --> 08:43:34,638
right people

8622
08:43:34,638 --> 08:43:37,200
it's nice if there's fast feedback

8623
08:43:37,200 --> 08:43:38,478
it gets to the right people but if

8624
08:43:38,478 --> 08:43:40,000
there's fast feedback but it's totally

8625
08:43:40,000 --> 08:43:41,200
inaccurate

8626
08:43:41,200 --> 08:43:43,200
or like you can't actually see it or you

8627
08:43:43,200 --> 08:43:45,600
have to attend 20 meetings to get a copy

8628
08:43:45,600 --> 08:43:47,920
that's not fast

8629
08:43:47,920 --> 08:43:49,760
and then the third way is continuous

8630
08:43:49,760 --> 08:43:52,000
learning and improvement of your daily

8631
08:43:52,000 --> 08:43:54,160
work sometimes people call this risk

8632
08:43:54,160 --> 08:43:56,000
taking but the idea is is that you step

8633
08:43:56,000 --> 08:43:58,240
back from your daily activities and

8634
08:43:58,240 --> 08:44:00,318
exert effort to making your daily

8635
08:44:00,318 --> 08:44:02,558
activities even better on a regular

8636
08:44:02,558 --> 08:44:05,280
basis usually every month

8637
08:44:05,280 --> 08:44:06,718
the last thing i want to say about

8638
08:44:06,718 --> 08:44:08,878
devops is that not all security testing

8639
08:44:08,878 --> 08:44:11,040
needs to be done in the pipeline for you

8640
08:44:11,040 --> 08:44:13,440
to be doing devops so you can do brief

8641
08:44:13,440 --> 08:44:15,920
checks in the pipeline

8642
08:44:15,920 --> 08:44:17,280
and then do

8643
08:44:17,280 --> 08:44:19,120
like slow checks overnight like there's

8644
08:44:19,120 --> 08:44:21,680
a lot of different options and so we're

8645
08:44:21,680 --> 08:44:23,600
gonna talk about that

8646
08:44:23,600 --> 08:44:25,840
so let's talk strategy for putting a

8647
08:44:25,840 --> 08:44:28,318
dynamic scanner in your ci cd

8648
08:44:28,318 --> 08:44:29,920
so the first one that i see the most

8649
08:44:29,920 --> 08:44:31,920
often one that i i did at the beginning

8650
08:44:31,920 --> 08:44:33,760
that made all the other dads pretty

8651
08:44:33,760 --> 08:44:36,638
ticked off at me was to run my desk on

8652
08:44:36,638 --> 08:44:38,160
full blast

8653
08:44:38,160 --> 08:44:40,160
and then lose all your friends so what i

8654
08:44:40,160 --> 08:44:42,558
mean by this is

8655
08:44:42,558 --> 08:44:45,520
turning it on saying do every test

8656
08:44:45,520 --> 08:44:46,718
you know

8657
08:44:46,718 --> 08:44:48,558
catalog all my different links test

8658
08:44:48,558 --> 08:44:50,638
every single part of my whole app as

8659
08:44:50,638 --> 08:44:52,318
thoroughly as you possibly can and then

8660
08:44:52,318 --> 08:44:55,520
it might run like six hours or something

8661
08:44:55,520 --> 08:44:57,360
and no one's impressed by that if the

8662
08:44:57,360 --> 08:44:59,440
pipeline previously ran 18 minutes and

8663
08:44:59,440 --> 08:45:02,160
now it runs 6 hours and 18 minutes no

8664
08:45:02,160 --> 08:45:04,718
one's going to be very cool with that so

8665
08:45:04,718 --> 08:45:07,360
this is not the one you want to do

8666
08:45:07,360 --> 08:45:09,360
in the release pipeline so the release

8667
08:45:09,360 --> 08:45:10,798
pipeline is the one that everyone's

8668
08:45:10,798 --> 08:45:12,718
using to release all their code

8669
08:45:12,718 --> 08:45:15,040
so what you could do instead of this is

8670
08:45:15,040 --> 08:45:16,958
that you could take a copy of the

8671
08:45:16,958 --> 08:45:19,200
release pipeline put it underneath in

8672
08:45:19,200 --> 08:45:21,360
your cicd software

8673
08:45:21,360 --> 08:45:23,520
and then make it so it doesn't release

8674
08:45:23,520 --> 08:45:25,760
or just releases to one safe place where

8675
08:45:25,760 --> 08:45:27,760
you can do security testing and you put

8676
08:45:27,760 --> 08:45:29,840
it there and you run the security test

8677
08:45:29,840 --> 08:45:32,318
and then that's it and then the results

8678
08:45:32,318 --> 08:45:34,000
go to the software developers or go to

8679
08:45:34,000 --> 08:45:35,520
the security person so that they can see

8680
08:45:35,520 --> 08:45:37,200
it and take action

8681
08:45:37,200 --> 08:45:39,120
so that would be a better way to do it

8682
08:45:39,120 --> 08:45:41,280
so you're not blocking production you

8683
08:45:41,280 --> 08:45:43,040
can still get a very thorough test done

8684
08:45:43,040 --> 08:45:44,798
so sometimes this is called a parallel

8685
08:45:44,798 --> 08:45:47,600
pipeline or an asynchronous pipeline and

8686
08:45:47,600 --> 08:45:49,200
you can run it nice and long and slow

8687
08:45:49,200 --> 08:45:50,958
and you can run it like every night or

8688
08:45:50,958 --> 08:45:52,398
every friday

8689
08:45:52,398 --> 08:45:53,840
and have those results get sent

8690
08:45:53,840 --> 08:45:55,520
somewhere for someone to manually look

8691
08:45:55,520 --> 08:45:57,120
through that

8692
08:45:57,120 --> 08:45:58,398
so the next thing you could do is you

8693
08:45:58,398 --> 08:46:00,798
could refine your scope by using a har

8694
08:46:00,798 --> 08:46:02,080
file so

8695
08:46:02,080 --> 08:46:02,878
r

8696
08:46:02,878 --> 08:46:06,478
h a r stands for html archive file so if

8697
08:46:06,478 --> 08:46:08,638
your software developer or sorry your qa

8698
08:46:08,638 --> 08:46:10,318
team are doing something

8699
08:46:10,318 --> 08:46:12,398
using something like selenium to do

8700
08:46:12,398 --> 08:46:14,718
automated tests of your app you can get

8701
08:46:14,718 --> 08:46:17,040
a copy of that file that's a har file

8702
08:46:17,040 --> 08:46:18,798
that they're recording when they do all

8703
08:46:18,798 --> 08:46:20,798
of that cool automation you can feed

8704
08:46:20,798 --> 08:46:22,958
that into your dynamic scanner

8705
08:46:22,958 --> 08:46:25,520
and then it will just do that test you

8706
08:46:25,520 --> 08:46:29,200
can basically make your your test 30 of

8707
08:46:29,200 --> 08:46:31,840
the time like instead it's like 70

8708
08:46:31,840 --> 08:46:34,080
faster or even faster than that because

8709
08:46:34,080 --> 08:46:35,840
you're just testing whatever new feature

8710
08:46:35,840 --> 08:46:37,280
you're releasing or you're just testing

8711
08:46:37,280 --> 08:46:38,878
the new code or you're just testing what

8712
08:46:38,878 --> 08:46:41,680
the qa person thinks is important

8713
08:46:41,680 --> 08:46:44,160
and is this complete coverage no but

8714
08:46:44,160 --> 08:46:45,760
this would be part of the coverage you

8715
08:46:45,760 --> 08:46:47,120
do so it's like we're just going to test

8716
08:46:47,120 --> 08:46:48,558
this in the pipeline very quickly it's

8717
08:46:48,558 --> 08:46:50,398
going to take six minutes

8718
08:46:50,398 --> 08:46:52,318
and if you break like if you do get a

8719
08:46:52,318 --> 08:46:54,000
high or critical illness we're going to

8720
08:46:54,000 --> 08:46:55,280
break the build

8721
08:46:55,280 --> 08:46:56,798
but for all the other testing we're

8722
08:46:56,798 --> 08:46:58,878
going to do it outside the pipeline and

8723
08:46:58,878 --> 08:47:00,398
we still might come to you and need

8724
08:47:00,398 --> 08:47:02,080
fixes but this is what we think is an

8725
08:47:02,080 --> 08:47:05,360
emergency and so it goes in the pipeline

8726
08:47:05,360 --> 08:47:07,200
another thing you can do so when i first

8727
08:47:07,200 --> 08:47:10,080
showed this app this um slide to people

8728
08:47:10,080 --> 08:47:11,520
they're like you can't just test only

8729
08:47:11,520 --> 08:47:13,680
what you want to test tanya i'm like

8730
08:47:13,680 --> 08:47:16,878
sometimes you can so quite often um when

8731
08:47:16,878 --> 08:47:18,798
i work places we'll have specific

8732
08:47:18,798 --> 08:47:21,280
vulnerabilities we're targeting or types

8733
08:47:21,280 --> 08:47:23,200
of bugs that we're targeting that are

8734
08:47:23,200 --> 08:47:24,718
really important to us that we feel are

8735
08:47:24,718 --> 08:47:26,638
particularly dangerous or we see a lot

8736
08:47:26,638 --> 08:47:28,958
of and so in the pipeline i might just

8737
08:47:28,958 --> 08:47:30,718
test for those like just injection or

8738
08:47:30,718 --> 08:47:33,040
just cross-site scripting and that's it

8739
08:47:33,040 --> 08:47:35,200
or maybe we have like a new

8740
08:47:35,200 --> 08:47:39,280
um security policy and we just want to

8741
08:47:39,280 --> 08:47:41,040
target in on security headers and like

8742
08:47:41,040 --> 08:47:42,478
no one's using security headers so we

8743
08:47:42,478 --> 08:47:44,160
just test for that it's like you know

8744
08:47:44,160 --> 08:47:45,840
what you're breaking the policy you know

8745
08:47:45,840 --> 08:47:47,280
we're all looking for this so you can't

8746
08:47:47,280 --> 08:47:49,200
go to prod but then i do my other

8747
08:47:49,200 --> 08:47:51,840
extensive testing outside of prod and so

8748
08:47:51,840 --> 08:47:53,680
that way what you could do is slowly

8749
08:47:53,680 --> 08:47:56,000
eliminate a certain type of bug

8750
08:47:56,000 --> 08:47:58,398
and then in a few weeks you change to a

8751
08:47:58,398 --> 08:47:59,760
new vulnerability that you're looking

8752
08:47:59,760 --> 08:48:03,840
for and that would be really really fast

8753
08:48:03,840 --> 08:48:05,280
thing you can do that i think everyone

8754
08:48:05,280 --> 08:48:07,200
should do every single time

8755
08:48:07,200 --> 08:48:10,160
is only do technology specific tests

8756
08:48:10,160 --> 08:48:12,718
so let's say you have a wordpress

8757
08:48:12,718 --> 08:48:15,600
application or website

8758
08:48:15,600 --> 08:48:18,160
you would only do the like you you would

8759
08:48:18,160 --> 08:48:19,920
do the wordpress sites

8760
08:48:19,920 --> 08:48:23,040
but you wouldn't do an mssql test

8761
08:48:23,040 --> 08:48:25,040
because you would be running postgresql

8762
08:48:25,040 --> 08:48:27,200
because that is what wordpress runs on

8763
08:48:27,200 --> 08:48:29,280
you wouldn't do a ruby on rails test

8764
08:48:29,280 --> 08:48:32,318
right because you're using wordpress and

8765
08:48:32,318 --> 08:48:34,878
so on and so you just do the technology

8766
08:48:34,878 --> 08:48:36,718
tests that are specific to what you're

8767
08:48:36,718 --> 08:48:39,280
doing and so i always want to do this so

8768
08:48:39,280 --> 08:48:40,958
if i'm scanning an app that's made in

8769
08:48:40,958 --> 08:48:42,558
node.js

8770
08:48:42,558 --> 08:48:44,958
and it's using mongodb i definitely want

8771
08:48:44,958 --> 08:48:47,280
to do all the specific tests for those

8772
08:48:47,280 --> 08:48:49,040
and i'll do other tests that apply to

8773
08:48:49,040 --> 08:48:51,360
every type of website but i'm like oh no

8774
08:48:51,360 --> 08:48:54,638
ms sql no wordpress tests no this know

8775
08:48:54,638 --> 08:48:55,760
that and i just throw them in the

8776
08:48:55,760 --> 08:48:57,360
garbage because i know they just don't

8777
08:48:57,360 --> 08:48:58,318
apply

8778
08:48:58,318 --> 08:49:00,638
like if you're in azure you don't need

8779
08:49:00,638 --> 08:49:03,360
to do aws tests right

8780
08:49:03,360 --> 08:49:04,878
and so this is something that i

8781
08:49:04,878 --> 08:49:07,040
generally do all the time because

8782
08:49:07,040 --> 08:49:10,798
our time is valuable we're busy people

8783
08:49:10,798 --> 08:49:12,478
um i wanted to say a quick note on

8784
08:49:12,478 --> 08:49:14,958
testing apis if you want to test an api

8785
08:49:14,958 --> 08:49:17,840
with a dynamic scanner in a pipeline or

8786
08:49:17,840 --> 08:49:20,080
not in a pipeline it's very very

8787
08:49:20,080 --> 08:49:22,718
important that your schema file or your

8788
08:49:22,718 --> 08:49:25,520
definition file your open api file your

8789
08:49:25,520 --> 08:49:27,280
swagger file whatever you want to call

8790
08:49:27,280 --> 08:49:30,718
the thing that defines your api

8791
08:49:30,718 --> 08:49:32,398
it needs to be complete

8792
08:49:32,398 --> 08:49:35,440
and you can complete it using a linter

8793
08:49:35,440 --> 08:49:37,440
and so some dynamic scanners have a

8794
08:49:37,440 --> 08:49:39,760
linter built into them like bright does

8795
08:49:39,760 --> 08:49:41,840
there's a few that do that and so you

8796
08:49:41,840 --> 08:49:44,398
just open up your api or there's

8797
08:49:44,398 --> 08:49:46,160
separate like

8798
08:49:46,160 --> 08:49:49,440
software things that just lint your api

8799
08:49:49,440 --> 08:49:51,200
and they're very very thorough

8800
08:49:51,200 --> 08:49:52,878
and so basically you use one of those

8801
08:49:52,878 --> 08:49:55,120
and you open up your definition file and

8802
08:49:55,120 --> 08:49:56,558
it will tell you things that are missing

8803
08:49:56,558 --> 08:49:58,638
and so i used to be a dev and i did all

8804
08:49:58,638 --> 08:50:00,160
of the mistakes that i tell people not

8805
08:50:00,160 --> 08:50:01,520
to do now

8806
08:50:01,520 --> 08:50:03,280
because i went to college in the 90s for

8807
08:50:03,280 --> 08:50:05,120
software development and so

8808
08:50:05,120 --> 08:50:07,600
i never learned that had to learn it on

8809
08:50:07,600 --> 08:50:09,200
my own

8810
08:50:09,200 --> 08:50:11,680
and so it will do things like so like

8811
08:50:11,680 --> 08:50:13,200
let's say you've declared a vulnerable

8812
08:50:13,200 --> 08:50:15,040
uh you've declared a variable and the

8813
08:50:15,040 --> 08:50:17,760
variable is date of birth so usually

8814
08:50:17,760 --> 08:50:19,520
people will be like date of birth type

8815
08:50:19,520 --> 08:50:21,520
date and that's it

8816
08:50:21,520 --> 08:50:23,680
but the scanner needs to know what's the

8817
08:50:23,680 --> 08:50:25,200
maximum

8818
08:50:25,200 --> 08:50:28,160
date what's the minimum date does it can

8819
08:50:28,160 --> 08:50:30,080
it only be in the past

8820
08:50:30,080 --> 08:50:32,718
um like can a person be 5 000 years old

8821
08:50:32,718 --> 08:50:34,798
what is the format of the date etc so if

8822
08:50:34,798 --> 08:50:36,398
you don't fill those out the dynamic

8823
08:50:36,398 --> 08:50:38,798
scanner can't test that for you

8824
08:50:38,798 --> 08:50:40,080
and so

8825
08:50:40,080 --> 08:50:42,558
usually if you just take an open api

8826
08:50:42,558 --> 08:50:45,280
file or swagger file and you plug it in

8827
08:50:45,280 --> 08:50:47,440
most dash scanners like kind of barf

8828
08:50:47,440 --> 08:50:48,558
they don't know what to do and they're

8829
08:50:48,558 --> 08:50:50,878
like yeah it looks good to me i guess

8830
08:50:50,878 --> 08:50:52,478
because your file is not complete so you

8831
08:50:52,478 --> 08:50:54,638
need to use a linter on it to make sure

8832
08:50:54,638 --> 08:50:57,280
it is complete and when you make it

8833
08:50:57,280 --> 08:50:59,120
complete like when you add the maximums

8834
08:50:59,120 --> 08:51:01,760
and minimums and the file type the

8835
08:51:01,760 --> 08:51:03,600
formats etc

8836
08:51:03,600 --> 08:51:05,680
you're making your app more secure so

8837
08:51:05,680 --> 08:51:08,478
your api will be able to defend itself

8838
08:51:08,478 --> 08:51:10,080
because it has input validation

8839
08:51:10,080 --> 08:51:11,680
available to it now because you just

8840
08:51:11,680 --> 08:51:13,120
defined that

8841
08:51:13,120 --> 08:51:16,000
but without that that means someone like

8842
08:51:16,000 --> 08:51:17,600
me could go in

8843
08:51:17,600 --> 08:51:20,558
and say oh okay so um yeah i'm 4 000

8844
08:51:20,558 --> 08:51:23,040
years old how's that for you okay cool

8845
08:51:23,040 --> 08:51:24,638
and that might break your application

8846
08:51:24,638 --> 08:51:26,878
eventually and so it is important to do

8847
08:51:26,878 --> 08:51:30,398
linting on your api definition files

8848
08:51:30,398 --> 08:51:32,240
okay so the other thing is you don't

8849
08:51:32,240 --> 08:51:33,840
have to put everything in the dash so

8850
08:51:33,840 --> 08:51:35,040
what you could do let's say you've

8851
08:51:35,040 --> 08:51:37,280
decided to record a horror file and

8852
08:51:37,280 --> 08:51:38,558
you're only going to do technology

8853
08:51:38,558 --> 08:51:40,240
specific tasks

8854
08:51:40,240 --> 08:51:41,600
and then you're going to do

8855
08:51:41,600 --> 08:51:43,440
other things so what are other ways that

8856
08:51:43,440 --> 08:51:46,478
you can use a task that's automated that

8857
08:51:46,478 --> 08:51:49,360
goes with ci cd so we talked briefly

8858
08:51:49,360 --> 08:51:51,200
about how you can make a copy of the

8859
08:51:51,200 --> 08:51:54,398
pipeline and not release it anywhere

8860
08:51:54,398 --> 08:51:56,080
just put it somewhere that you can do

8861
08:51:56,080 --> 08:51:58,798
security testing you can even like

8862
08:51:58,798 --> 08:52:01,120
create a container load it up add your

8863
08:52:01,120 --> 08:52:03,600
app to it

8864
08:52:03,600 --> 08:52:05,280
do all your testing then release those

8865
08:52:05,280 --> 08:52:07,760
resources out back into the cloud

8866
08:52:07,760 --> 08:52:09,040
and finish and just have your test

8867
08:52:09,040 --> 08:52:11,600
results so you can do that without

8868
08:52:11,600 --> 08:52:13,600
blocking releases but what other things

8869
08:52:13,600 --> 08:52:15,600
we could do so first of all you can have

8870
08:52:15,600 --> 08:52:18,958
scheduled automated regular scanning so

8871
08:52:18,958 --> 08:52:21,280
i like to do this at least once a month

8872
08:52:21,280 --> 08:52:22,878
for all my apps that are currently in

8873
08:52:22,878 --> 08:52:25,600
production and all the apis so have

8874
08:52:25,600 --> 08:52:28,000
scans like a scan runs every night of

8875
08:52:28,000 --> 08:52:29,120
the month

8876
08:52:29,120 --> 08:52:31,040
and that report comes in and someone

8877
08:52:31,040 --> 08:52:33,280
looks at it and decides if it thinks

8878
08:52:33,280 --> 08:52:35,200
those are real vulnerabilities or maybe

8879
08:52:35,200 --> 08:52:36,558
some of them are false positives

8880
08:52:36,558 --> 08:52:38,160
depending upon the type of tool you're

8881
08:52:38,160 --> 08:52:39,760
using

8882
08:52:39,760 --> 08:52:41,920
and then put those things in the backlog

8883
08:52:41,920 --> 08:52:44,398
and then go talk to teams about it so

8884
08:52:44,398 --> 08:52:46,478
if you have 30 apps you could run one

8885
08:52:46,478 --> 08:52:47,600
every night

8886
08:52:47,600 --> 08:52:49,680
and you just have to look at one report

8887
08:52:49,680 --> 08:52:51,040
per day except on mondays you have to

8888
08:52:51,040 --> 08:52:53,520
look at three reports but the point is

8889
08:52:53,520 --> 08:52:55,520
is that then you would be able to make

8890
08:52:55,520 --> 08:52:57,360
sure every app is having thorough

8891
08:52:57,360 --> 08:52:58,878
testing

8892
08:52:58,878 --> 08:53:00,398
and it's still automated it's happening

8893
08:53:00,398 --> 08:53:01,440
while you're not at work no one's

8894
08:53:01,440 --> 08:53:03,440
waiting for those resources so this is

8895
08:53:03,440 --> 08:53:05,280
the thing i see a lot at a lot of

8896
08:53:05,280 --> 08:53:06,558
companies

8897
08:53:06,558 --> 08:53:07,920
another thing you can do is want to

8898
08:53:07,920 --> 08:53:10,000
offer manual scans so

8899
08:53:10,000 --> 08:53:12,638
last year i helped some companies do m a

8900
08:53:12,638 --> 08:53:14,160
some mergers and acquisitions and

8901
08:53:14,160 --> 08:53:15,520
they're like we're gonna buy you know

8902
08:53:15,520 --> 08:53:17,440
these companies and so i went and i just

8903
08:53:17,440 --> 08:53:18,878
used the desk camera on all the

8904
08:53:18,878 --> 08:53:20,478
different apps and i was like

8905
08:53:20,478 --> 08:53:22,318
okay so this one's gonna cost like tons

8906
08:53:22,318 --> 08:53:24,558
of money to fix i found like

8907
08:53:24,558 --> 08:53:26,638
100 vulnerabilities this one i only

8908
08:53:26,638 --> 08:53:28,478
found six i think we could fix this very

8909
08:53:28,478 --> 08:53:29,760
quickly i don't think it will cost that

8910
08:53:29,760 --> 08:53:32,240
much etc and so i used a whole bunch of

8911
08:53:32,240 --> 08:53:34,160
different types of scanning tools to do

8912
08:53:34,160 --> 08:53:35,920
an assessment for them of the state of

8913
08:53:35,920 --> 08:53:37,600
security at that company and then they

8914
08:53:37,600 --> 08:53:39,680
renegotiated the price

8915
08:53:39,680 --> 08:53:41,360
and whenever i get a tool the first

8916
08:53:41,360 --> 08:53:43,520
thing i do is play with it manually

8917
08:53:43,520 --> 08:53:45,360
because i want to know like how it works

8918
08:53:45,360 --> 08:53:46,958
and how i can make it go faster and how

8919
08:53:46,958 --> 08:53:48,798
i can make it find more things

8920
08:53:48,798 --> 08:53:50,958
and so usually whenever you get a tool

8921
08:53:50,958 --> 08:53:53,040
the first thing you do is manual testing

8922
08:53:53,040 --> 08:53:55,200
so there's still space for that in our

8923
08:53:55,200 --> 08:53:56,798
industry there is still people doing

8924
08:53:56,798 --> 08:53:58,240
that every day

8925
08:53:58,240 --> 08:54:00,240
another thing you can do so every pen

8926
08:54:00,240 --> 08:54:02,318
tester ever basically

8927
08:54:02,318 --> 08:54:04,878
they use a das tool and they do manual

8928
08:54:04,878 --> 08:54:07,680
testing so they'll use a scanner that's

8929
08:54:07,680 --> 08:54:10,000
usually what we call it like oh yeah i'm

8930
08:54:10,000 --> 08:54:11,600
still doing quick scans to like check

8931
08:54:11,600 --> 08:54:13,120
and see if there's anything that i might

8932
08:54:13,120 --> 08:54:14,718
have missed with my eyes

8933
08:54:14,718 --> 08:54:16,318
but sometimes the dash scanner will find

8934
08:54:16,318 --> 08:54:17,920
something that manual testing doesn't

8935
08:54:17,920 --> 08:54:20,558
and vice versa so you get a much better

8936
08:54:20,558 --> 08:54:23,040
more complete result when you have a

8937
08:54:23,040 --> 08:54:25,040
person who's a security expert doing

8938
08:54:25,040 --> 08:54:27,200
manual testing as well

8939
08:54:27,200 --> 08:54:30,080
but it's expensive and it takes weeks

8940
08:54:30,080 --> 08:54:32,240
and so you have to choose where you do

8941
08:54:32,240 --> 08:54:33,920
that like most companies can't afford to

8942
08:54:33,920 --> 08:54:36,160
do a pen test everywhere so you use a

8943
08:54:36,160 --> 08:54:38,878
lot of dynamic scanning quite regularly

8944
08:54:38,878 --> 08:54:41,280
and then you do like spot pen tests or

8945
08:54:41,280 --> 08:54:42,638
just the ones that have to be pci

8946
08:54:42,638 --> 08:54:44,318
compliant or whatever the case is where

8947
08:54:44,318 --> 08:54:46,080
you work

8948
08:54:46,080 --> 08:54:47,520
i want to remind you that you still have

8949
08:54:47,520 --> 08:54:49,840
to do other types of testing we can't

8950
08:54:49,840 --> 08:54:52,240
only do

8951
08:54:52,240 --> 08:54:53,920
dynamic testing so there's static

8952
08:54:53,920 --> 08:54:55,600
testing where it just looks at the code

8953
08:54:55,600 --> 08:54:57,040
that your team wrote

8954
08:54:57,040 --> 08:54:59,440
which is called sas there's software

8955
08:54:59,440 --> 08:55:01,440
composition analysis where it just looks

8956
08:55:01,440 --> 08:55:03,360
at your dependencies your libraries your

8957
08:55:03,360 --> 08:55:05,760
frameworks any code you your team didn't

8958
08:55:05,760 --> 08:55:08,000
write but that is part of your app to

8959
08:55:08,000 --> 08:55:10,080
see if it's known to be vulnerable

8960
08:55:10,080 --> 08:55:12,398
there's i asked which is interactive

8961
08:55:12,398 --> 08:55:14,638
application security testing where

8962
08:55:14,638 --> 08:55:16,240
basically it's a binary and you put it

8963
08:55:16,240 --> 08:55:18,638
inside your app and it tests as you use

8964
08:55:18,638 --> 08:55:19,760
your app

8965
08:55:19,760 --> 08:55:22,160
there's oops wrong button there's secret

8966
08:55:22,160 --> 08:55:23,760
scanning where it just looks through

8967
08:55:23,760 --> 08:55:25,840
your entire code base and it tries to

8968
08:55:25,840 --> 08:55:28,318
find secrets so this could be an api key

8969
08:55:28,318 --> 08:55:30,318
an api secret a password a connection

8970
08:55:30,318 --> 08:55:32,958
string etc anything like that that

8971
08:55:32,958 --> 08:55:34,318
shouldn't be kept in your code it should

8972
08:55:34,318 --> 08:55:36,478
be in a secret management tool

8973
08:55:36,478 --> 08:55:39,040
and so that is really cool

8974
08:55:39,040 --> 08:55:41,280
we want to do these tests as or some of

8975
08:55:41,280 --> 08:55:43,440
these tests as well

8976
08:55:43,440 --> 08:55:45,280
so these are places where you can do

8977
08:55:45,280 --> 08:55:46,878
dynamic scanning so you could do

8978
08:55:46,878 --> 08:55:48,958
security regression testing with unit

8979
08:55:48,958 --> 08:55:51,360
tests because the unit test

8980
08:55:51,360 --> 08:55:53,280
basically your ide creates a little baby

8981
08:55:53,280 --> 08:55:55,680
mini web server and you can do security

8982
08:55:55,680 --> 08:55:57,840
tests there for the first time then you

8983
08:55:57,840 --> 08:56:00,638
can do dynamic scanning against your dat

8984
08:56:00,638 --> 08:56:03,840
like your dev server or your local host

8985
08:56:03,840 --> 08:56:05,840
then in the testing phase you can do you

8986
08:56:05,840 --> 08:56:07,840
know full blast test

8987
08:56:07,840 --> 08:56:09,360
i didn't mean that for it to rhyme but

8988
08:56:09,360 --> 08:56:11,920
it just does um and you could also do a

8989
08:56:11,920 --> 08:56:14,878
manual penetration test in a pipeline so

8990
08:56:14,878 --> 08:56:16,478
release

8991
08:56:16,478 --> 08:56:17,760
the release

8992
08:56:17,760 --> 08:56:19,440
phase and maintenance phase is where you

8993
08:56:19,440 --> 08:56:21,280
use pipeline so that's where you want to

8994
08:56:21,280 --> 08:56:23,440
tune your das and just do certain types

8995
08:56:23,440 --> 08:56:25,440
of tests and you could do scheduled

8996
08:56:25,440 --> 08:56:27,040
weekly tests

8997
08:56:27,040 --> 08:56:29,440
after it's released into production

8998
08:56:29,440 --> 08:56:30,958
um i was talking about like how the

8999
08:56:30,958 --> 08:56:33,920
first time i ran a desk how i felt so i

9000
08:56:33,920 --> 08:56:35,520
felt kind of like this

9001
08:56:35,520 --> 08:56:38,000
a little like that i really was like i

9002
08:56:38,000 --> 08:56:40,558
am a hacker now this is awesome

9003
08:56:40,558 --> 08:56:44,000
and so uh i feel like it's really fun

9004
08:56:44,000 --> 08:56:46,000
and i know that i'm silly and that is

9005
08:56:46,000 --> 08:56:47,280
okay

9006
08:56:47,280 --> 08:56:48,080
but

9007
08:56:48,080 --> 08:56:48,958
when i

9008
08:56:48,958 --> 08:56:51,600
first ran one it was just so fun and i

9009
08:56:51,600 --> 08:56:53,520
felt so amazing that i found security

9010
08:56:53,520 --> 08:56:55,520
vulnerabilities that as a dev i never

9011
08:56:55,520 --> 08:56:57,200
found before and so

9012
08:56:57,200 --> 08:56:59,440
then as a dev i started doing scans and

9013
08:56:59,440 --> 08:57:00,958
i started teaching other devs to do

9014
08:57:00,958 --> 08:57:02,718
scanning and you could find a lot of

9015
08:57:02,718 --> 08:57:04,000
stuff

9016
08:57:04,000 --> 08:57:04,798
so

9017
08:57:04,798 --> 08:57:06,398
with a quick conclusion because we only

9018
08:57:06,398 --> 08:57:08,000
have two minutes left

9019
08:57:08,000 --> 08:57:10,080
we need to do dynamic scanning because

9020
08:57:10,080 --> 08:57:11,600
any person on the internet can do a

9021
08:57:11,600 --> 08:57:13,600
dynamic scan of our app and we need to

9022
08:57:13,600 --> 08:57:15,520
keep ahead of those people

9023
08:57:15,520 --> 08:57:17,600
automation is our friend but if you are

9024
08:57:17,600 --> 08:57:19,760
at b-sides you already know that

9025
08:57:19,760 --> 08:57:22,240
dynamics testing in a pipeline it has to

9026
08:57:22,240 --> 08:57:24,398
be fast and it has to be accurate

9027
08:57:24,398 --> 08:57:25,920
or no one's going to want to hang out

9028
08:57:25,920 --> 08:57:28,240
with you at lunch all the devops people

9029
08:57:28,240 --> 08:57:29,600
are going to be like no there's tanya

9030
08:57:29,600 --> 08:57:31,680
she broke our pipeline nope this seat's

9031
08:57:31,680 --> 08:57:33,760
taken missy

9032
08:57:33,760 --> 08:57:35,920
we can do dynamics testing outside of

9033
08:57:35,920 --> 08:57:37,840
the pipeline but still be devops

9034
08:57:37,840 --> 08:57:40,160
friendly that is okay we're not breaking

9035
08:57:40,160 --> 08:57:41,840
any rules

9036
08:57:41,840 --> 08:57:43,680
other types of testing are still needed

9037
08:57:43,680 --> 08:57:45,520
so we can find as many vulnerabilities

9038
08:57:45,520 --> 08:57:47,520
as possible and make our app as safe as

9039
08:57:47,520 --> 08:57:48,718
we can

9040
08:57:48,718 --> 08:57:51,360
and basically i'm pretty silly

9041
08:57:51,360 --> 08:57:52,878
that's a thing you probably have picked

9042
08:57:52,878 --> 08:57:55,360
up on already anyway i have a couple

9043
08:57:55,360 --> 08:57:57,520
free resources i want to give you

9044
08:57:57,520 --> 08:57:59,280
uh some some are free the books are not

9045
08:57:59,280 --> 08:58:00,798
free but everything else is free so

9046
08:58:00,798 --> 08:58:02,080
first of all

9047
08:58:02,080 --> 08:58:05,200
i have a podcast we had purple podcast

9048
08:58:05,200 --> 08:58:07,360
where this season we're learning little

9049
08:58:07,360 --> 08:58:09,920
tiny security lessons so you can

9050
08:58:09,920 --> 08:58:11,840
subscribe on any platform or watch it on

9051
08:58:11,840 --> 08:58:13,600
youtube um

9052
08:58:13,600 --> 08:58:15,520
these are all books about devops except

9053
08:58:15,520 --> 08:58:17,520
mine which is about security and i have

9054
08:58:17,520 --> 08:58:20,000
a chapter about devops

9055
08:58:20,000 --> 08:58:22,638
i think we can't do it right i mean i

9056
08:58:22,638 --> 08:58:24,240
think we can't do security right unless

9057
08:58:24,240 --> 08:58:26,558
we're doing it right and i think devops

9058
08:58:26,558 --> 08:58:28,558
is the most efficient and effective and

9059
08:58:28,558 --> 08:58:30,160
quite frankly fun

9060
08:58:30,160 --> 08:58:32,240
way to make software

9061
08:58:32,240 --> 08:58:34,318
the we hack purple community is free

9062
08:58:34,318 --> 08:58:36,160
there's like no upsell or anything it is

9063
08:58:36,160 --> 08:58:38,878
just free we have little meetups on the

9064
08:58:38,878 --> 08:58:41,200
internet sometimes we meet up in person

9065
08:58:41,200 --> 08:58:43,840
we have articles we have blogs we have

9066
08:58:43,840 --> 08:58:45,440
lots of conversations and problem

9067
08:58:45,440 --> 08:58:46,878
solving and we have a ton of free

9068
08:58:46,878 --> 08:58:49,360
courses in there and so everyone is

9069
08:58:49,360 --> 08:58:50,798
invited to that

9070
08:58:50,798 --> 08:58:52,398
every monday this is what snail is

9071
08:58:52,398 --> 08:58:54,558
talking about on twitter is cyber

9072
08:58:54,558 --> 08:58:57,520
mentoring monday where basically we use

9073
08:58:57,520 --> 08:59:00,398
this hashtag and we respond to so i

9074
08:59:00,398 --> 08:59:02,398
always do a tweet to try to start off a

9075
08:59:02,398 --> 08:59:04,160
thread but basically people reach out

9076
08:59:04,160 --> 08:59:06,160
and say i need a professional mentor and

9077
08:59:06,160 --> 08:59:07,360
other people

9078
08:59:07,360 --> 08:59:09,120
from within the industry swoop in and

9079
08:59:09,120 --> 08:59:10,958
help them and sometimes they become

9080
08:59:10,958 --> 08:59:12,398
their mentors sometimes they become

9081
08:59:12,398 --> 08:59:13,920
their friend sometimes they have a

9082
08:59:13,920 --> 08:59:15,600
virtual coffee with them and suggest a

9083
08:59:15,600 --> 08:59:17,200
bunch of books that really change their

9084
08:59:17,200 --> 08:59:20,478
career and maybe it could help you

9085
08:59:20,478 --> 08:59:22,240
resource is bright so bright has a

9086
08:59:22,240 --> 08:59:24,240
highly technical blog with a lot of

9087
08:59:24,240 --> 08:59:25,760
information about like every type of

9088
08:59:25,760 --> 08:59:27,760
vulnerability and how to fix it that's

9089
08:59:27,760 --> 08:59:29,440
pretty handy

9090
08:59:29,440 --> 08:59:31,040
and resource is me

9091
08:59:31,040 --> 08:59:33,200
i am she hacks purple basically on all

9092
08:59:33,200 --> 08:59:34,878
the platforms you can think of i have a

9093
08:59:34,878 --> 08:59:36,478
newsletter a website or youtube blah

9094
08:59:36,478 --> 08:59:38,718
blah blah blah blah mostly i hang out on

9095
08:59:38,718 --> 08:59:40,000
twitter

9096
08:59:40,000 --> 08:59:41,600
and with this i'd like to say thank you

9097
08:59:41,600 --> 08:59:44,798
so much thank you to the entire b-sides

9098
08:59:44,798 --> 08:59:47,040
organizing crew because without them

9099
08:59:47,040 --> 08:59:48,638
this conference would not happen thank

9100
08:59:48,638 --> 08:59:51,200
you to all of you for attending being in

9101
08:59:51,200 --> 08:59:53,120
person is an important way to do

9102
08:59:53,120 --> 08:59:55,840
community building and thank you to the

9103
08:59:55,840 --> 08:59:58,240
entire international b-sides community

9104
08:59:58,240 --> 08:59:59,840
that encourages different cities around

9105
08:59:59,840 --> 09:00:01,360
the world to do this

9106
09:00:01,360 --> 09:00:03,280
i'm tanya jenka and thank you so much

9107
09:00:03,280 --> 09:00:05,200
for having me

9108
09:00:05,200 --> 09:00:07,120
thank you so much tanya that was

9109
09:00:07,120 --> 09:00:09,840
fantastic

9110
09:00:10,080 --> 09:00:12,478
i guess she deserves a louder round of

9111
09:00:12,478 --> 09:00:14,958
applause can we have a louder round of

9112
09:00:14,958 --> 09:00:17,760
applause please for tanya

9113
09:00:17,760 --> 09:00:21,079
that's fantastic

9114
09:00:26,318 --> 09:00:28,798
thank you so much tanya is still with us

9115
09:00:28,798 --> 09:00:31,280
do you have questions for her

9116
09:00:31,280 --> 09:00:35,199
if yes please do come forward

9117
09:00:37,040 --> 09:00:40,718
any questions for tanya

9118
09:00:40,718 --> 09:00:43,360
yes please

9119
09:00:44,958 --> 09:00:47,360
so thank you for the nice presentation

9120
09:00:47,360 --> 09:00:48,478
it was really

9121
09:00:48,478 --> 09:00:51,440
enlightened i would say

9122
09:00:51,440 --> 09:00:53,760
just one point when you mentioned that

9123
09:00:53,760 --> 09:00:56,240
someone needs to write the test for the

9124
09:00:56,240 --> 09:00:58,958
apis like i'd describe them

9125
09:00:58,958 --> 09:01:01,280
usually who is doing that i'm trying to

9126
09:01:01,280 --> 09:01:03,040
imagine like

9127
09:01:03,040 --> 09:01:05,120
uh is a security person that's doing

9128
09:01:05,120 --> 09:01:07,360
that to some from the keyway team so who

9129
09:01:07,360 --> 09:01:09,440
is actually describing the api so that

9130
09:01:09,440 --> 09:01:11,920
when we run the dust we know that

9131
09:01:11,920 --> 09:01:14,160
it's complete

9132
09:01:14,160 --> 09:01:16,240
ideally the software developers would do

9133
09:01:16,240 --> 09:01:18,240
that part ideally

9134
09:01:18,240 --> 09:01:20,240
so every organization is different but

9135
09:01:20,240 --> 09:01:22,718
where i've worked is generally the

9136
09:01:22,718 --> 09:01:24,398
software developers that are responsible

9137
09:01:24,398 --> 09:01:26,160
for adding those parts

9138
09:01:26,160 --> 09:01:28,160
but quite frankly usually it's the

9139
09:01:28,160 --> 09:01:29,680
security team that notices they're

9140
09:01:29,680 --> 09:01:32,318
missing because when i was at dev

9141
09:01:32,318 --> 09:01:34,958
or a software developer i say dev a lot

9142
09:01:34,958 --> 09:01:37,120
i like i didn't know to do that i was

9143
09:01:37,120 --> 09:01:39,200
like it works it does all the things my

9144
09:01:39,200 --> 09:01:41,840
client asked for it's perfect and it

9145
09:01:41,840 --> 09:01:43,680
wasn't until i became friends with an

9146
09:01:43,680 --> 09:01:45,920
ethical hacker and he's like actually

9147
09:01:45,920 --> 09:01:47,600
it does do all the things you need it to

9148
09:01:47,600 --> 09:01:49,120
do but it does a lot of stuff it's not

9149
09:01:49,120 --> 09:01:51,840
supposed to do and i'm like really

9150
09:01:51,840 --> 09:01:54,878
and so um usually it's the security team

9151
09:01:54,878 --> 09:01:56,958
that starts asking for linting it it

9152
09:01:56,958 --> 09:01:58,478
really depends because there's a lot of

9153
09:01:58,478 --> 09:02:00,000
software developers that are very

9154
09:02:00,000 --> 09:02:01,600
security obsessed

9155
09:02:01,600 --> 09:02:02,878
and so they might start doing it

9156
09:02:02,878 --> 09:02:04,958
themselves but if you want everyone in

9157
09:02:04,958 --> 09:02:07,440
your entire organization to be doing it

9158
09:02:07,440 --> 09:02:09,520
you usually have to provide a tool for

9159
09:02:09,520 --> 09:02:11,120
all the software developers give them a

9160
09:02:11,120 --> 09:02:13,520
lesson on what you expect from them

9161
09:02:13,520 --> 09:02:15,520
because otherwise what you receive will

9162
09:02:15,520 --> 09:02:17,520
be very different depending upon what

9163
09:02:17,520 --> 09:02:20,958
type of experience each step has

9164
09:02:20,958 --> 09:02:23,360
does that answer your question yes so

9165
09:02:23,360 --> 09:02:24,878
just to confirm do we understand it i

9166
09:02:24,878 --> 09:02:27,760
would need to enroll the developers or

9167
09:02:27,760 --> 09:02:29,680
to sell this idea to them say hey as

9168
09:02:29,680 --> 09:02:31,920
part of the development process we also

9169
09:02:31,920 --> 09:02:33,920
need to think about to writing tests

9170
09:02:33,920 --> 09:02:36,240
that the dust can use or tool

9171
09:02:36,240 --> 09:02:38,318
that would be it oh so they don't have

9172
09:02:38,318 --> 09:02:41,200
to write a test the das writes the test

9173
09:02:41,200 --> 09:02:43,840
what they need to do is lint their

9174
09:02:43,840 --> 09:02:46,558
definition file so you open it up in

9175
09:02:46,558 --> 09:02:48,958
something like 42 crunch or bright or

9176
09:02:48,958 --> 09:02:50,638
something else like that

9177
09:02:50,638 --> 09:02:53,120
and then it tells you this api

9178
09:02:53,120 --> 09:02:55,120
definition is incomplete

9179
09:02:55,120 --> 09:02:57,200
and it'll actually give you code you can

9180
09:02:57,200 --> 09:02:59,600
copy and paste and it'll say stuff like

9181
09:02:59,600 --> 09:03:01,680
okay so this is a string cool what's the

9182
09:03:01,680 --> 09:03:03,520
maximum length of this string what's the

9183
09:03:03,520 --> 09:03:05,760
minimum length of this string are there

9184
09:03:05,760 --> 09:03:08,000
any uh like which characters should be

9185
09:03:08,000 --> 09:03:10,478
allowed in the string and so you'll say

9186
09:03:10,478 --> 09:03:12,240
let's say like lowercase a through to

9187
09:03:12,240 --> 09:03:14,558
zed uppercase a through to z and then

9188
09:03:14,558 --> 09:03:16,160
zero through to nine

9189
09:03:16,160 --> 09:03:18,398
then it won't let any other characters

9190
09:03:18,398 --> 09:03:20,638
in there does that make sense

9191
09:03:20,638 --> 09:03:23,040
okay now it's clear thank you

9192
09:03:23,040 --> 09:03:26,718
okay thank you that was a great question

9193
09:03:27,040 --> 09:03:29,840
hi tanya uh i love cats though thank you

9194
09:03:29,840 --> 09:03:32,558
a lot um

9195
09:03:32,558 --> 09:03:34,558
question about about trying to scale and

9196
09:03:34,558 --> 09:03:37,280
trying to roll out

9197
09:03:37,280 --> 09:03:40,000
dynamic software testing is awesome and

9198
09:03:40,000 --> 09:03:42,798
i want to offer that to my dev teams so

9199
09:03:42,798 --> 09:03:45,200
i go to the people that prioritize stuff

9200
09:03:45,200 --> 09:03:47,360
like that into the backlog and then i

9201
09:03:47,360 --> 09:03:48,240
have

9202
09:03:48,240 --> 09:03:51,200
five pos sitting in front of me of which

9203
09:03:51,200 --> 09:03:53,360
i need one volunteer

9204
09:03:53,360 --> 09:03:55,200
and all of them think

9205
09:03:55,200 --> 09:03:56,398
if i go

9206
09:03:56,398 --> 09:03:59,040
and volunteer for this i can throw away

9207
09:03:59,040 --> 09:04:01,280
all my road map for my products and

9208
09:04:01,280 --> 09:04:03,200
features

9209
09:04:03,200 --> 09:04:06,080
how do i how do you get over that first

9210
09:04:06,080 --> 09:04:10,080
step of them being scared of you

9211
09:04:10,080 --> 09:04:11,680
um i so

9212
09:04:11,680 --> 09:04:14,160
when the first time i was on a security

9213
09:04:14,160 --> 09:04:15,840
team i had been on the software

9214
09:04:15,840 --> 09:04:18,398
development team at that same company so

9215
09:04:18,398 --> 09:04:20,638
they all already knew me by name like i

9216
09:04:20,638 --> 09:04:22,558
already would eat lunch with them or or

9217
09:04:22,558 --> 09:04:24,478
hang out with them so they all already

9218
09:04:24,478 --> 09:04:25,360
knew me

9219
09:04:25,360 --> 09:04:27,920
so it wasn't as intimidating for them

9220
09:04:27,920 --> 09:04:29,440
but then when i went on to the next

9221
09:04:29,440 --> 09:04:30,958
company

9222
09:04:30,958 --> 09:04:33,440
none of the software developers knew me

9223
09:04:33,440 --> 09:04:35,280
and so what i did was is i started

9224
09:04:35,280 --> 09:04:37,200
giving little presentations about the

9225
09:04:37,200 --> 09:04:38,638
things i wanted

9226
09:04:38,638 --> 09:04:40,638
and so the presentation would always

9227
09:04:40,638 --> 09:04:43,120
start with like this is a big problem

9228
09:04:43,120 --> 09:04:45,200
that i see and i wouldn't say like at

9229
09:04:45,200 --> 09:04:47,360
our company i'd be like on the internet

9230
09:04:47,360 --> 09:04:48,798
it'd be like there's you know like

9231
09:04:48,798 --> 09:04:50,318
injection vulnerabilities on the

9232
09:04:50,318 --> 09:04:51,760
internet this is how it works and this

9233
09:04:51,760 --> 09:04:53,680
is how scary it is and like let's do one

9234
09:04:53,680 --> 09:04:55,520
together and then i'd be like but we

9235
09:04:55,520 --> 09:04:57,600
could stop it from happening here and

9236
09:04:57,600 --> 09:04:59,520
then i'd show them what they could do to

9237
09:04:59,520 --> 09:05:01,440
help stop it like i can test for it and

9238
09:05:01,440 --> 09:05:03,040
find it you could prevent it in the

9239
09:05:03,040 --> 09:05:04,478
first place

9240
09:05:04,478 --> 09:05:06,558
and i would kind of just try to show it

9241
09:05:06,558 --> 09:05:08,798
to them and make them as excited as i

9242
09:05:08,798 --> 09:05:11,040
was if that makes sense and like show

9243
09:05:11,040 --> 09:05:14,398
them my passion about it and right now

9244
09:05:14,398 --> 09:05:15,840
you're like oh she seems like a really

9245
09:05:15,840 --> 09:05:18,398
good presenter yeah i sucked i was

9246
09:05:18,398 --> 09:05:20,080
really not good when i started i've been

9247
09:05:20,080 --> 09:05:21,760
doing this for like eight or nine years

9248
09:05:21,760 --> 09:05:23,760
now and so when i present i'm really

9249
09:05:23,760 --> 09:05:25,600
comfortable and i'm not like super

9250
09:05:25,600 --> 09:05:26,878
nervous where i feel like i can't

9251
09:05:26,878 --> 09:05:28,318
breathe and my heart's beating super

9252
09:05:28,318 --> 09:05:30,798
fast but even when i was like not very

9253
09:05:30,798 --> 09:05:32,240
good at presenting

9254
09:05:32,240 --> 09:05:33,920
they could tell i really really cared

9255
09:05:33,920 --> 09:05:35,760
about it and that's why i was showing

9256
09:05:35,760 --> 09:05:38,478
them and so the first couple times i

9257
09:05:38,478 --> 09:05:39,680
presented

9258
09:05:39,680 --> 09:05:41,840
i really thought i was gonna die but i

9259
09:05:41,840 --> 09:05:44,318
didn't clearly because i'm still alive

9260
09:05:44,318 --> 09:05:47,040
um and and it turned out like they

9261
09:05:47,040 --> 09:05:49,120
wanted to know if that makes sense and

9262
09:05:49,120 --> 09:05:51,360
they're like yeah you seem really like

9263
09:05:51,360 --> 09:05:54,080
worried about this i am and so that's

9264
09:05:54,080 --> 09:05:55,600
what's worked for me

9265
09:05:55,600 --> 09:05:58,240
is just showing them the thing

9266
09:05:58,240 --> 09:05:59,680
sometimes people

9267
09:05:59,680 --> 09:06:01,040
like i've worked at places where the

9268
09:06:01,040 --> 09:06:02,798
security team says we do this now and

9269
09:06:02,798 --> 09:06:04,318
you have to do that and they don't

9270
09:06:04,318 --> 09:06:06,000
explain it and i find it doesn't go very

9271
09:06:06,000 --> 09:06:07,840
well so i always try to explain

9272
09:06:07,840 --> 09:06:09,040
why

9273
09:06:09,040 --> 09:06:10,480
we want to do it

9274
09:06:10,480 --> 09:06:11,839
how to do it

9275
09:06:11,839 --> 09:06:14,160
and i will help you and then if someone

9276
09:06:14,160 --> 09:06:15,839
gets stuck i just like run over to their

9277
09:06:15,839 --> 09:06:18,237
desk and help them and i keep doing that

9278
09:06:18,237 --> 09:06:19,438
until they're like i don't need you

9279
09:06:19,438 --> 09:06:21,680
tanya go away stop being like hovering

9280
09:06:21,680 --> 09:06:23,360
over me i got this

9281
09:06:23,360 --> 09:06:24,640
and then eventually

9282
09:06:24,640 --> 09:06:26,320
the software developers are better at it

9283
09:06:26,320 --> 09:06:28,160
than i am

9284
09:06:28,160 --> 09:06:30,000
and they don't need me anymore for that

9285
09:06:30,000 --> 09:06:30,800
thing

9286
09:06:30,800 --> 09:06:33,438
but for me i've had a lot of luck with

9287
09:06:33,438 --> 09:06:35,438
presenting the problem and like this is

9288
09:06:35,438 --> 09:06:37,917
what i think can help and i need all of

9289
09:06:37,917 --> 09:06:40,480
your help to get this done

9290
09:06:40,480 --> 09:06:42,877
does that help you

9291
09:06:42,877 --> 09:06:44,480
hopefully yeah we'll see

9292
09:06:44,480 --> 09:06:45,839
but thank you okay

9293
09:06:45,839 --> 09:06:47,438
good luck

9294
09:06:47,438 --> 09:06:49,917
i actually have two presentations that i

9295
09:06:49,917 --> 09:06:52,640
open sourced in my github so if you go

9296
09:06:52,640 --> 09:06:54,718
to github.com and then slash she hacks

9297
09:06:54,718 --> 09:06:55,839
purple

9298
09:06:55,839 --> 09:06:56,960
i have a

9299
09:06:56,960 --> 09:06:59,519
a project there of presentations where i

9300
09:06:59,519 --> 09:07:00,718
teach you

9301
09:07:00,718 --> 09:07:02,557
how to give my presentation to your

9302
09:07:02,557 --> 09:07:03,680
depths

9303
09:07:03,680 --> 09:07:06,640
and so i have two so far there and a lot

9304
09:07:06,640 --> 09:07:07,839
of people have told me like yeah i

9305
09:07:07,839 --> 09:07:09,438
wanted to get the devs interested and so

9306
09:07:09,438 --> 09:07:11,438
it's like my slides it's a video of me

9307
09:07:11,438 --> 09:07:13,122
doing it then it's a video of me saying

9308
09:07:13,122 --> 09:07:14,718
what to say for each slide and what

9309
09:07:14,718 --> 09:07:16,640
you're trying to accomplish and then i

9310
09:07:16,640 --> 09:07:18,640
have a description of the whole thing

9311
09:07:18,640 --> 09:07:20,960
and so you could try one of those if you

9312
09:07:20,960 --> 09:07:22,480
don't know what to present because i

9313
09:07:22,480 --> 09:07:23,917
didn't know what to present when i

9314
09:07:23,917 --> 09:07:26,800
started

9315
09:07:26,800 --> 09:07:29,040
yeah

9316
09:07:29,680 --> 09:07:33,360
are there any any other questions

9317
09:07:34,718 --> 09:07:37,519
if there are no further questions or

9318
09:07:37,519 --> 09:07:39,438
pane is still here does anybody have any

9319
09:07:39,438 --> 09:07:42,000
other question

9320
09:07:42,480 --> 09:07:44,718
all right great tania thank you so much

9321
09:07:44,718 --> 09:07:46,877
for explaining us because when it comes

9322
09:07:46,877 --> 09:07:49,519
to product security dust scanning the

9323
09:07:49,519 --> 09:07:52,160
entire ci cd pipeline is super critical

9324
09:07:52,160 --> 09:07:54,320
for everyone not just the engineers or

9325
09:07:54,320 --> 09:07:56,640
the developers but even for the security

9326
09:07:56,640 --> 09:07:59,758
professionals or the security engineers

9327
09:07:59,758 --> 09:08:01,519
call call it like that

9328
09:08:01,519 --> 09:08:04,398
sometimes um there's one quick question

9329
09:08:04,398 --> 09:08:05,438
for you

9330
09:08:05,438 --> 09:08:07,519
with the dust scanning involving in the

9331
09:08:07,519 --> 09:08:09,360
entire pipeline

9332
09:08:09,360 --> 09:08:11,680
how do we basically handle these

9333
09:08:11,680 --> 09:08:14,000
vulnerabilities in a way that we are

9334
09:08:14,000 --> 09:08:16,000
still friends with the developers and

9335
09:08:16,000 --> 09:08:17,917
not just bombard them

9336
09:08:17,917 --> 09:08:19,839
because sometimes it might happen that

9337
09:08:19,839 --> 09:08:21,680
we say oh that vulnerability is super

9338
09:08:21,680 --> 09:08:24,078
critical it's it's got like the cvss

9339
09:08:24,078 --> 09:08:27,199
score the night like say for example 9.6

9340
09:08:27,199 --> 09:08:29,680
you need to fix it in two days or one

9341
09:08:29,680 --> 09:08:30,480
day

9342
09:08:30,480 --> 09:08:33,598
so how do we still try to deliver this

9343
09:08:33,598 --> 09:08:37,438
how do we rely exactly on dust scan

9344
09:08:37,438 --> 09:08:38,480
whereas

9345
09:08:38,480 --> 09:08:40,480
and how do we convince our developers

9346
09:08:40,480 --> 09:08:42,160
that you know

9347
09:08:42,160 --> 09:08:44,557
even though it's a high vulnerability

9348
09:08:44,557 --> 09:08:47,199
the tool says it's super critical

9349
09:08:47,199 --> 09:08:49,122
but based on this

9350
09:08:49,122 --> 09:08:51,360
can you explain how do we maintain the

9351
09:08:51,360 --> 09:08:55,360
relationship still happy and nice

9352
09:08:55,360 --> 09:08:57,519
so i usually try to give

9353
09:08:57,519 --> 09:09:00,160
the developers a license for the tool

9354
09:09:00,160 --> 09:09:02,160
i'm using so that if they want to they

9355
09:09:02,160 --> 09:09:04,800
can test it earlier so if they want to

9356
09:09:04,800 --> 09:09:06,320
when they put it on their dev server or

9357
09:09:06,320 --> 09:09:08,320
their local host they can run the test

9358
09:09:08,320 --> 09:09:10,877
themselves so when they get to the ci cd

9359
09:09:10,877 --> 09:09:12,718
pipeline it's like a double check if

9360
09:09:12,718 --> 09:09:14,320
that makes sense

9361
09:09:14,320 --> 09:09:15,758
i've had a lot of developers say they

9362
09:09:15,758 --> 09:09:17,680
feel it's embarrassing if they break the

9363
09:09:17,680 --> 09:09:18,557
build

9364
09:09:18,557 --> 09:09:20,960
and so they would rather have access to

9365
09:09:20,960 --> 09:09:24,000
look at it themselves first so if i can

9366
09:09:24,000 --> 09:09:26,640
afford it i get them all tools or

9367
09:09:26,640 --> 09:09:28,000
licenses

9368
09:09:28,000 --> 09:09:30,078
and then another thing is is i usually

9369
09:09:30,078 --> 09:09:31,199
start

9370
09:09:31,199 --> 09:09:34,160
with not breaking the build i work up to

9371
09:09:34,160 --> 09:09:36,480
it so first we're just running scans

9372
09:09:36,480 --> 09:09:38,160
manually and i'm showing them results

9373
09:09:38,160 --> 09:09:40,557
and asking them to fix things then i

9374
09:09:40,557 --> 09:09:42,398
start testing a little bit just like a

9375
09:09:42,398 --> 09:09:44,877
couple of things in the pipeline and

9376
09:09:44,877 --> 09:09:47,839
then when they and i just alert i'm like

9377
09:09:47,839 --> 09:09:51,360
alert this is a high alert this is this

9378
09:09:51,360 --> 09:09:52,960
and i try to have

9379
09:09:52,960 --> 09:09:55,438
um sort of two different service level

9380
09:09:55,438 --> 09:09:57,598
agreements once we start having one so

9381
09:09:57,598 --> 09:09:59,519
at first it's like anything that was

9382
09:09:59,519 --> 09:10:00,800
already there

9383
09:10:00,800 --> 09:10:03,278
you know you have months to fix

9384
09:10:03,278 --> 09:10:05,199
but any new vulnerabilities that are

9385
09:10:05,199 --> 09:10:07,598
higher critical you're not allowed those

9386
09:10:07,598 --> 09:10:09,360
so i will break the build if a new

9387
09:10:09,360 --> 09:10:11,680
critical vulnerability comes into it so

9388
09:10:11,680 --> 09:10:13,278
at first no breaking

9389
09:10:13,278 --> 09:10:14,877
and then at first i'm only breaking on

9390
09:10:14,877 --> 09:10:17,199
new things that are very high then new

9391
09:10:17,199 --> 09:10:19,438
things that are just high

9392
09:10:19,438 --> 09:10:20,960
and then new things maybe that are

9393
09:10:20,960 --> 09:10:22,960
medium depending upon what level that

9394
09:10:22,960 --> 09:10:24,078
you need

9395
09:10:24,078 --> 09:10:25,758
and then the stuff that's in the backlog

9396
09:10:25,758 --> 09:10:27,519
the stuff that was there before we had a

9397
09:10:27,519 --> 09:10:28,640
scanner

9398
09:10:28,640 --> 09:10:30,800
i give them more time and we talk about

9399
09:10:30,800 --> 09:10:31,758
those

9400
09:10:31,758 --> 09:10:33,199
over time because they're already out

9401
09:10:33,199 --> 09:10:35,680
there and prod and us not letting them

9402
09:10:35,680 --> 09:10:37,438
go to prod with those old

9403
09:10:37,438 --> 09:10:39,040
vulnerabilities that are already out

9404
09:10:39,040 --> 09:10:41,122
there doesn't really make a lot of sense

9405
09:10:41,122 --> 09:10:43,040
like i want them to fix all of it now

9406
09:10:43,040 --> 09:10:45,360
but i know that they can't especially

9407
09:10:45,360 --> 09:10:47,839
if they're currently doing a project

9408
09:10:47,839 --> 09:10:50,078
and no project time has been allocated

9409
09:10:50,078 --> 09:10:52,640
to do security bug fixing another thing

9410
09:10:52,640 --> 09:10:54,078
i do is i go talk to all the project

9411
09:10:54,078 --> 09:10:56,480
managers and i tell them

9412
09:10:56,480 --> 09:10:58,320
i want to be at all your project kickoff

9413
09:10:58,320 --> 09:11:00,320
meetings and i want to have a two-week

9414
09:11:00,320 --> 09:11:01,278
sprint

9415
09:11:01,278 --> 09:11:04,078
at least one that is just to fix bugs

9416
09:11:04,078 --> 09:11:06,000
and so maybe like four months in or

9417
09:11:06,000 --> 09:11:07,598
something we have a sprint where for two

9418
09:11:07,598 --> 09:11:09,199
straight weeks or three weeks however

9419
09:11:09,199 --> 09:11:11,278
long your sprints are all you do is fix

9420
09:11:11,278 --> 09:11:13,519
bugs that i found and so i get ready in

9421
09:11:13,519 --> 09:11:15,278
advance so they have lots of work to do

9422
09:11:15,278 --> 09:11:17,519
during that time and then they just fix

9423
09:11:17,519 --> 09:11:19,839
lots of bugs so by the time they go out

9424
09:11:19,839 --> 09:11:21,839
to production with everything

9425
09:11:21,839 --> 09:11:23,758
it's like pretty good do you know what i

9426
09:11:23,758 --> 09:11:26,877
mean and so i try to get there earlier

9427
09:11:26,877 --> 09:11:28,800
and be there and talk to them the whole

9428
09:11:28,800 --> 09:11:30,557
way through the project and i don't mean

9429
09:11:30,557 --> 09:11:32,557
every single day but like check-ins

9430
09:11:32,557 --> 09:11:34,320
quite regularly

9431
09:11:34,320 --> 09:11:36,160
and then by the time they get to the end

9432
09:11:36,160 --> 09:11:38,960
it's usually really good with legacy

9433
09:11:38,960 --> 09:11:40,320
software it's different so software

9434
09:11:40,320 --> 09:11:42,160
that's already existed i try to be a lot

9435
09:11:42,160 --> 09:11:44,718
more patient because usually fixing like

9436
09:11:44,718 --> 09:11:46,160
a dependency

9437
09:11:46,160 --> 09:11:48,078
it could mean you know if the dependency

9438
09:11:48,078 --> 09:11:50,398
is really old like we saw during log4j

9439
09:11:50,398 --> 09:11:52,640
in december

9440
09:11:52,640 --> 09:11:54,078
it could be a really like it could be

9441
09:11:54,078 --> 09:11:55,680
like a complete re-architecting of the

9442
09:11:55,680 --> 09:11:58,160
whole app to update that and so

9443
09:11:58,160 --> 09:12:00,480
sometimes i negotiate if it's really

9444
09:12:00,480 --> 09:12:02,557
really really bad i'll say okay well i

9445
09:12:02,557 --> 09:12:04,557
need five thousand dollars from your

9446
09:12:04,557 --> 09:12:07,199
project team so that i can put a like a

9447
09:12:07,199 --> 09:12:09,360
web app firewall or a rasp or something

9448
09:12:09,360 --> 09:12:11,040
in front of your app because it's so

9449
09:12:11,040 --> 09:12:13,438
dangerous having it on the internet

9450
09:12:13,438 --> 09:12:15,122
and then you have you know this long to

9451
09:12:15,122 --> 09:12:17,758
fix things but if you won't let me put a

9452
09:12:17,758 --> 09:12:19,199
laugh in front of it then you only have

9453
09:12:19,199 --> 09:12:20,877
this long to fix things and then they're

9454
09:12:20,877 --> 09:12:22,640
usually like we found five thousand

9455
09:12:22,640 --> 09:12:24,320
dollars tanya

9456
09:12:24,320 --> 09:12:27,278
um so i try to like negotiate with them

9457
09:12:27,278 --> 09:12:28,557
and realize that they have other

9458
09:12:28,557 --> 09:12:30,237
priorities and i'm just one of those

9459
09:12:30,237 --> 09:12:31,519
priorities

9460
09:12:31,519 --> 09:12:32,877
and then things usually go better and

9461
09:12:32,877 --> 09:12:34,078
there's some teams where they're just

9462
09:12:34,078 --> 09:12:37,199
like no go away you're wasting my time i

9463
09:12:37,199 --> 09:12:38,877
want to talk to you and those are the

9464
09:12:38,877 --> 09:12:40,398
most difficult ones and that's where i

9465
09:12:40,398 --> 09:12:42,480
have to be like mean tanya

9466
09:12:42,480 --> 09:12:44,237
and i like first start off really nice

9467
09:12:44,237 --> 09:12:46,000
but then eventually i'm like i'm here to

9468
09:12:46,000 --> 09:12:47,519
bother you because you still haven't

9469
09:12:47,519 --> 09:12:48,800
fixed those things and like five

9470
09:12:48,800 --> 09:12:50,800
separate times i visited you and

9471
09:12:50,800 --> 09:12:52,640
eventually i'm gonna visit your boss

9472
09:12:52,640 --> 09:12:54,398
right like

9473
09:12:54,398 --> 09:12:55,680
like you're forcing me to do this

9474
09:12:55,680 --> 09:12:57,040
because you're not holding up your end

9475
09:12:57,040 --> 09:12:58,398
of the bargain like is that what you

9476
09:12:58,398 --> 09:13:00,160
want because that's not what i want that

9477
09:13:00,160 --> 09:13:02,398
sucks we'll never be friends if i just

9478
09:13:02,398 --> 09:13:04,398
talk to your boss every time and

9479
09:13:04,398 --> 09:13:05,680
sometimes they'll give in and then

9480
09:13:05,680 --> 09:13:08,320
sometimes i have to talk to their boss

9481
09:13:08,320 --> 09:13:10,800
and if their boss says like well i'm

9482
09:13:10,800 --> 09:13:12,398
fine with it i'll talk to the bigger

9483
09:13:12,398 --> 09:13:14,800
boss and eventually i'll try to get them

9484
09:13:14,800 --> 09:13:17,199
to sign off on that risk so i'll say you

9485
09:13:17,199 --> 09:13:19,040
don't want to fix these things you know

9486
09:13:19,040 --> 09:13:20,877
you feel times more important than that

9487
09:13:20,877 --> 09:13:23,040
cool but you need to sign off that you

9488
09:13:23,040 --> 09:13:24,718
are accepting the risk on behalf of the

9489
09:13:24,718 --> 09:13:26,160
organization because for me this is

9490
09:13:26,160 --> 09:13:27,917
completely unacceptable and i do not

9491
09:13:27,917 --> 09:13:30,078
accept this risk and when we're in the

9492
09:13:30,078 --> 09:13:31,917
newspaper someday with a giant breach

9493
09:13:31,917 --> 09:13:33,758
it's cool your name's going to be in

9494
09:13:33,758 --> 09:13:36,237
there it's cool

9495
09:13:36,237 --> 09:13:38,877
and then usually someone gives in

9496
09:13:38,877 --> 09:13:39,917
and

9497
09:13:39,917 --> 09:13:41,680
i've worked places where they don't and

9498
09:13:41,680 --> 09:13:43,199
there's one place where i resigned in

9499
09:13:43,199 --> 09:13:44,640
protest because i just wouldn't fix

9500
09:13:44,640 --> 09:13:46,480
anything ever and i just didn't want to

9501
09:13:46,480 --> 09:13:47,598
change and i didn't want to do any

9502
09:13:47,598 --> 09:13:48,960
security and i was like i won't work

9503
09:13:48,960 --> 09:13:49,917
here

9504
09:13:49,917 --> 09:13:51,917
and that's it

9505
09:13:51,917 --> 09:13:53,839
so that's the grateful lesson that we

9506
09:13:53,839 --> 09:13:56,160
still are learning and i guess we are

9507
09:13:56,160 --> 09:13:58,237
still going to learn the same lesson for

9508
09:13:58,237 --> 09:14:00,800
next couple of years till the time each

9509
09:14:00,800 --> 09:14:03,598
and every company decides to shift left

9510
09:14:03,598 --> 09:14:06,160
and consider security as an integral

9511
09:14:06,160 --> 09:14:08,237
part and not an external part of the

9512
09:14:08,237 --> 09:14:11,278
entire ssdlc process itself

9513
09:14:11,278 --> 09:14:13,917
but that said

9514
09:14:13,917 --> 09:14:16,078
thank you so much tanya for sharing your

9515
09:14:16,078 --> 09:14:18,877
insights and such amazing guidance and

9516
09:14:18,877 --> 09:14:20,160
advice

9517
09:14:20,160 --> 09:14:22,718
and we are so happy and honored to have

9518
09:14:22,718 --> 09:14:25,278
you here and we wish that next year

9519
09:14:25,278 --> 09:14:27,438
maybe we can have you physically present

9520
09:14:27,438 --> 09:14:29,199
at the event

9521
09:14:29,199 --> 09:14:32,640
we wish you all the good luck

9522
09:14:32,960 --> 09:14:36,917
thank you thank you

9523
09:14:44,640 --> 09:14:48,160
wow what a fantastic day we had today

9524
09:14:48,160 --> 09:14:51,438
it's super amazing i mean i'm still so

9525
09:14:51,438 --> 09:14:54,398
energetic i know i would also want to

9526
09:14:54,398 --> 09:14:57,040
like sit down and absorb all the

9527
09:14:57,040 --> 09:14:59,917
knowledge that i have abso like received

9528
09:14:59,917 --> 09:15:02,877
today it's it's amazing and the best

9529
09:15:02,877 --> 09:15:04,160
thing is

9530
09:15:04,160 --> 09:15:06,557
finally after two years i get to meet

9531
09:15:06,557 --> 09:15:09,360
you all i get to see you network with

9532
09:15:09,360 --> 09:15:10,237
you

9533
09:15:10,237 --> 09:15:13,438
and speak with you not just through some

9534
09:15:13,438 --> 09:15:16,237
third party platform but like physically

9535
09:15:16,237 --> 09:15:18,237
we are looking at each other in flesh

9536
09:15:18,237 --> 09:15:21,122
that was so awesome today i mean i don't

9537
09:15:21,122 --> 09:15:23,438
know about you all but i'm super happy

9538
09:15:23,438 --> 09:15:26,557
and finally i would love to say that but

9539
09:15:26,557 --> 09:15:29,278
with caution that maybe our lives are

9540
09:15:29,278 --> 09:15:32,078
coming back to normal again or maybe

9541
09:15:32,078 --> 09:15:34,000
this is the new normal

9542
09:15:34,000 --> 09:15:36,320
hopefully next year we wouldn't have to

9543
09:15:36,320 --> 09:15:37,758
wear the masks

9544
09:15:37,758 --> 09:15:38,480
but

9545
09:15:38,480 --> 09:15:40,480
i'm nobody to say about it at this

9546
09:15:40,480 --> 09:15:42,398
particular moment

9547
09:15:42,398 --> 09:15:44,078
before

9548
09:15:44,078 --> 09:15:46,960
we wrap up completely

9549
09:15:46,960 --> 09:15:50,078
first thing i want to do is to thank of

9550
09:15:50,078 --> 09:15:52,640
course each and every one of you

9551
09:15:52,640 --> 09:15:55,199
but before that i would also want to

9552
09:15:55,199 --> 09:15:58,320
thank all of our organizers

9553
09:15:58,320 --> 09:16:01,199
and i would request our organizers to

9554
09:16:01,199 --> 09:16:02,800
come forward

9555
09:16:02,800 --> 09:16:05,758
please

9556
09:16:05,758 --> 09:16:07,680
and please provide give a round of

9557
09:16:07,680 --> 09:16:10,237
applause

9558
09:16:14,718 --> 09:16:18,200
thank you jen

9559
09:16:18,330 --> 09:16:28,078
[Applause]

9560
09:16:28,078 --> 09:16:29,438
oliver

9561
09:16:29,438 --> 09:16:30,960
dagmar

9562
09:16:30,960 --> 09:16:33,438
silvio stefan

9563
09:16:33,438 --> 09:16:34,877
engmar

9564
09:16:34,877 --> 09:16:36,320
chris

9565
09:16:36,320 --> 09:16:39,122
and the one and only martin

9566
09:16:39,122 --> 09:16:42,320
we all the team of besides munich we

9567
09:16:42,320 --> 09:16:43,438
thank you

9568
09:16:43,438 --> 09:16:44,480
but

9569
09:16:44,480 --> 09:16:46,640
we are not complete yet

9570
09:16:46,640 --> 09:16:49,199
we would like to call upon stage our

9571
09:16:49,199 --> 09:16:52,078
lightning rod volunteers right here

9572
09:16:52,078 --> 09:16:54,640
right now volunteers please come up on

9573
09:16:54,640 --> 09:16:56,398
the stage

9574
09:16:56,398 --> 09:17:01,840
sartha gayard mikhail cooper

9575
09:17:03,360 --> 09:17:06,160
eduardo

9576
09:17:07,360 --> 09:17:10,598
and reinhardt

9577
09:17:17,758 --> 09:17:20,078
well i see one thing that this year the

9578
09:17:20,078 --> 09:17:21,839
stage is little small right do you all

9579
09:17:21,839 --> 09:17:24,000
agree

9580
09:17:24,000 --> 09:17:25,360
yes

9581
09:17:25,360 --> 09:17:28,320
right yeah unfortunately next year we

9582
09:17:28,320 --> 09:17:30,690
are having an even bigger stage

9583
09:17:30,690 --> 09:17:34,300
[Laughter]

9584
09:17:41,758 --> 09:17:43,680
with this i would also like to take the

9585
09:17:43,680 --> 09:17:47,519
opportunity to thank all our sponsors

9586
09:17:47,519 --> 09:17:49,680
who are present here today

9587
09:17:49,680 --> 09:17:52,640
thank you so much for being the backbone

9588
09:17:52,640 --> 09:17:55,122
thank you so much for believing in us

9589
09:17:55,122 --> 09:17:58,237
and i hope next year the sponsors list

9590
09:17:58,237 --> 09:18:00,877
for us will also keep on increasing the

9591
09:18:00,877 --> 09:18:03,040
community strength that we have will

9592
09:18:03,040 --> 09:18:06,480
always keep on increasing and i

9593
09:18:06,480 --> 09:18:09,438
tonight along with my team

9594
09:18:09,438 --> 09:18:11,360
would anyone of you like to say a few

9595
09:18:11,360 --> 09:18:12,800
words today

9596
09:18:12,800 --> 09:18:16,160
before we close up

9597
09:18:16,160 --> 09:18:17,720
anyone

9598
09:18:17,720 --> 09:18:19,040
[Music]

9599
09:18:19,040 --> 09:18:21,122
we want to thank neja for making

9600
09:18:21,122 --> 09:18:23,040
everything happen a big round of

9601
09:18:23,040 --> 09:18:25,840
applause

9602
09:18:34,398 --> 09:18:36,718
there's actually one thing

9603
09:18:36,718 --> 09:18:39,598
that i would want to share

9604
09:18:39,598 --> 09:18:42,960
every year things grow things evolve

9605
09:18:42,960 --> 09:18:45,278
sometimes there are endings and

9606
09:18:45,278 --> 09:18:47,598
sometimes there are new beginnings but

9607
09:18:47,598 --> 09:18:49,839
one thing we should know is that every

9608
09:18:49,839 --> 09:18:52,480
end is basically a new beginning

9609
09:18:52,480 --> 09:18:55,360
and today we would like to ask you for

9610
09:18:55,360 --> 09:18:56,078
the

9611
09:18:56,078 --> 09:18:58,078
new beginning itself

9612
09:18:58,078 --> 09:19:01,917
we are looking for someone to join us to

9613
09:19:01,917 --> 09:19:05,758
be with us to be the team besides munich

9614
09:19:05,758 --> 09:19:08,320
and if you are interested

9615
09:19:08,320 --> 09:19:10,160
please join us

9616
09:19:10,160 --> 09:19:12,640
unfortunately this is not working so i

9617
09:19:12,640 --> 09:19:14,237
cannot really change the slides

9618
09:19:14,237 --> 09:19:16,400
otherwise i had a nice slide which says

9619
09:19:16,400 --> 09:19:18,720
please join us at volunteers besides

9620
09:19:18,720 --> 09:19:21,680
munich.com

9621
09:19:21,680 --> 09:19:24,000
this is not working um

9622
09:19:24,000 --> 09:19:27,596
this is the reason why we need you

9623
09:19:29,360 --> 09:19:31,840
at least the clicker gets working

9624
09:19:31,840 --> 09:19:34,800
so yeah we're done

9625
09:19:34,800 --> 09:19:36,880
i can go again on this like oh yes there

9626
09:19:36,880 --> 09:19:38,000
it is

9627
09:19:38,000 --> 09:19:40,480
so yes absolutely

9628
09:19:40,480 --> 09:19:43,120
so you're most welcome we definitely

9629
09:19:43,120 --> 09:19:45,040
need your help

9630
09:19:45,040 --> 09:19:46,640
support to grow

9631
09:19:46,640 --> 09:19:49,840
and let's get together and next year

9632
09:19:49,840 --> 09:19:53,436
let's have even bigger besides munich

9633
09:19:53,436 --> 09:19:55,596
and with that

9634
09:19:55,596 --> 09:19:57,840
i would like to thank you all along with

9635
09:19:57,840 --> 09:20:00,240
the entire team thank you so much

9636
09:20:00,240 --> 09:20:01,280
namaste

9637
09:20:01,280 --> 09:20:19,969
[Applause]

9638
09:20:21,756 --> 09:20:25,160
that's a wrap

9639
09:20:31,840 --> 09:20:34,840
is

9640
09:20:41,230 --> 09:20:44,410
[Music]

9641
09:21:38,400 --> 09:21:40,480
you

