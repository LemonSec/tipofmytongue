1
00:00:04,160 --> 00:00:05,920
all right so

2
00:00:05,920 --> 00:00:07,680
as it's currently said my name is anis

3
00:00:07,680 --> 00:00:09,120
parchos

4
00:00:09,120 --> 00:00:10,719
and

5
00:00:10,719 --> 00:00:13,040
i am a recent phd graduate from the

6
00:00:13,040 --> 00:00:15,280
university of tartu and in this talk in

7
00:00:15,280 --> 00:00:16,640
this presentation

8
00:00:16,640 --> 00:00:17,840
i will

9
00:00:17,840 --> 00:00:20,080
share with you uh some of the findings

10
00:00:20,080 --> 00:00:22,240
from my phd research about the estonian

11
00:00:22,240 --> 00:00:24,240
electronic identity card and its

12
00:00:24,240 --> 00:00:27,760
security challenges now um

13
00:00:27,760 --> 00:00:29,439
i think i have spent last

14
00:00:29,439 --> 00:00:31,679
perhaps eight years studying researching

15
00:00:31,679 --> 00:00:33,280
this topic so there are really a lot of

16
00:00:33,280 --> 00:00:35,200
findings a lot of details for this

17
00:00:35,200 --> 00:00:36,640
specific presentation i have cherry

18
00:00:36,640 --> 00:00:38,160
picked some um

19
00:00:38,160 --> 00:00:41,120
some key things which i hope that

20
00:00:41,120 --> 00:00:43,040
you will find interesting

21
00:00:43,040 --> 00:00:45,520
so let's uh jump into the topic uh right

22
00:00:45,520 --> 00:00:46,640
away

23
00:00:46,640 --> 00:00:48,160
so let me start by introducing the stone

24
00:00:48,160 --> 00:00:50,800
and electronic identity card um so

25
00:00:50,800 --> 00:00:52,320
um

26
00:00:52,320 --> 00:00:54,160
the estonian electronic identity card

27
00:00:54,160 --> 00:00:56,079
our id card is an identity document that

28
00:00:56,079 --> 00:00:58,320
is issued by estonian state and why it

29
00:00:58,320 --> 00:01:01,280
is interesting to us is because of this

30
00:01:01,280 --> 00:01:03,440
smart card chip here which is basically

31
00:01:03,440 --> 00:01:05,438
a small computer that is capable to

32
00:01:05,438 --> 00:01:07,360
generate cryptographic keys and perform

33
00:01:07,360 --> 00:01:09,840
cryptographic operations with these keys

34
00:01:09,840 --> 00:01:11,520
so basically it is a

35
00:01:11,520 --> 00:01:13,040
hardware security module which

36
00:01:13,040 --> 00:01:16,400
guarantees that the private key exists

37
00:01:16,400 --> 00:01:17,920
only in one copy

38
00:01:17,920 --> 00:01:20,240
in the cardholder's id card

39
00:01:20,240 --> 00:01:22,240
so the private key is generated inside

40
00:01:22,240 --> 00:01:24,000
the chip and if something needs to be

41
00:01:24,000 --> 00:01:26,159
signed the data is sent to the chip chip

42
00:01:26,159 --> 00:01:28,400
performs a cryptographic signature makes

43
00:01:28,400 --> 00:01:29,920
the signature and returns it back to the

44
00:01:29,920 --> 00:01:31,680
terminal

45
00:01:31,680 --> 00:01:33,360
as soon as you see at least in theory it

46
00:01:33,360 --> 00:01:35,040
provides pretty good security features

47
00:01:35,040 --> 00:01:36,960
so to say

48
00:01:36,960 --> 00:01:38,400
so in case of restoring an id card it

49
00:01:38,400 --> 00:01:40,880
contains two asymmetric keys with the

50
00:01:40,880 --> 00:01:42,079
corresponding certificates and the

51
00:01:42,079 --> 00:01:44,399
certificate here is a digitally signed

52
00:01:44,399 --> 00:01:46,000
statement which attests that this

53
00:01:46,000 --> 00:01:47,840
particular public key belongs to this

54
00:01:47,840 --> 00:01:50,159
particular person so that we could later

55
00:01:50,159 --> 00:01:52,159
link digital signature to the person who

56
00:01:52,159 --> 00:01:53,600
created it

57
00:01:53,600 --> 00:01:54,399
okay

58
00:01:54,399 --> 00:01:57,040
so the first key is the authentication

59
00:01:57,040 --> 00:01:58,399
key which is used for authentication to

60
00:01:58,399 --> 00:02:00,640
e-services and document decryption and

61
00:02:00,640 --> 00:02:02,640
the second key is digital signature key

62
00:02:02,640 --> 00:02:03,920
which is used to give legally binding

63
00:02:03,920 --> 00:02:05,680
digital signatures

64
00:02:05,680 --> 00:02:08,560
now the reason why stand and id card is

65
00:02:08,560 --> 00:02:10,399
such interesting topic to study is

66
00:02:10,399 --> 00:02:12,080
because it is a

67
00:02:12,080 --> 00:02:14,400
nationwide electronic identity scheme

68
00:02:14,400 --> 00:02:17,120
which was introduced already in 2002

69
00:02:17,120 --> 00:02:19,360
and it is actually used in practice

70
00:02:19,360 --> 00:02:20,319
now

71
00:02:20,319 --> 00:02:22,720
as you may know uh today there are

72
00:02:22,720 --> 00:02:24,160
many countries in the world who have

73
00:02:24,160 --> 00:02:26,560
similar schemes introduced but as far as

74
00:02:26,560 --> 00:02:28,800
i know in none of these countries the id

75
00:02:28,800 --> 00:02:30,160
card is used as much as it is used in

76
00:02:30,160 --> 00:02:31,200
estonia

77
00:02:31,200 --> 00:02:33,519
and therefore i think there is a lot to

78
00:02:33,519 --> 00:02:36,239
learn from the estonian experience and

79
00:02:36,239 --> 00:02:38,160
also including the

80
00:02:38,160 --> 00:02:40,480
security issues and the other problems

81
00:02:40,480 --> 00:02:43,599
it has faced over these uh 18 years

82
00:02:43,599 --> 00:02:45,440
right so but anyhow whenever we talk

83
00:02:45,440 --> 00:02:46,879
about id card security we have to

84
00:02:46,879 --> 00:02:50,080
realize that this is about much more

85
00:02:50,080 --> 00:02:52,000
than just the security of the ship and

86
00:02:52,000 --> 00:02:53,440
how secure the keys are stored there

87
00:02:53,440 --> 00:02:55,519
right because there is this um

88
00:02:55,519 --> 00:02:57,680
supporting public infrastructure there

89
00:02:57,680 --> 00:02:58,400
is

90
00:02:58,400 --> 00:03:00,640
software that implements these protocols

91
00:03:00,640 --> 00:03:03,519
there is a legal framework

92
00:03:03,519 --> 00:03:05,360
and much more right so

93
00:03:05,360 --> 00:03:06,959
the id card security has to be then

94
00:03:06,959 --> 00:03:08,560
analyzed in a much broader context and

95
00:03:08,560 --> 00:03:10,319
all these things we kind of can

96
00:03:10,319 --> 00:03:12,720
i can describe by the term id card

97
00:03:12,720 --> 00:03:14,800
ecosystem right

98
00:03:14,800 --> 00:03:17,599
all right so um let's just have a quick

99
00:03:17,599 --> 00:03:20,000
overview on the id card manufacturing

100
00:03:20,000 --> 00:03:22,159
and issuance process so this is how it

101
00:03:22,159 --> 00:03:24,159
looks so here we have an id card holder

102
00:03:24,159 --> 00:03:25,680
the person who wants to obtain the id

103
00:03:25,680 --> 00:03:27,920
card to get an id card the person visits

104
00:03:27,920 --> 00:03:30,560
the document issuer in this case police

105
00:03:30,560 --> 00:03:32,879
estonian police and border cardboard

106
00:03:32,879 --> 00:03:34,400
the documentation

107
00:03:34,400 --> 00:03:36,799
themselves do not manufacture the cards

108
00:03:36,799 --> 00:03:38,879
this is outsourced the

109
00:03:38,879 --> 00:03:40,400
the cards are manufactured by the id

110
00:03:40,400 --> 00:03:41,760
card manufacturer

111
00:03:41,760 --> 00:03:44,080
for the first 15 years it was gemalto

112
00:03:44,080 --> 00:03:45,760
for the latest generation id card it is

113
00:03:45,760 --> 00:03:48,239
a company called edemia

114
00:03:48,239 --> 00:03:50,560
uh now dedicated manufacturer also

115
00:03:50,560 --> 00:03:51,959
doesn't actually produce the

116
00:03:51,959 --> 00:03:54,239
microcontrollers themselves so these

117
00:03:54,239 --> 00:03:56,959
security chips are produced by

118
00:03:56,959 --> 00:04:00,200
a huge

119
00:04:00,480 --> 00:04:02,640
semiconductor companies uh infineon

120
00:04:02,640 --> 00:04:04,400
which was used for the first cards and

121
00:04:04,400 --> 00:04:06,080
then for the latest generation card

122
00:04:06,080 --> 00:04:07,680
company nxp

123
00:04:07,680 --> 00:04:10,080
but still the id card manufacturer here

124
00:04:10,080 --> 00:04:11,840
is in a very important

125
00:04:11,840 --> 00:04:13,760
position it is a very important task

126
00:04:13,760 --> 00:04:16,238
because this is the id card manufacturer

127
00:04:16,238 --> 00:04:18,238
who initiates

128
00:04:18,238 --> 00:04:20,320
key generation inside the card so this

129
00:04:20,320 --> 00:04:22,639
is super important that this procedure

130
00:04:22,639 --> 00:04:24,720
is strictly followed because otherwise

131
00:04:24,720 --> 00:04:27,520
the id card manufacturer could get hold

132
00:04:27,520 --> 00:04:29,520
of the id card private keys right which

133
00:04:29,520 --> 00:04:31,280
which wouldn't be good

134
00:04:31,280 --> 00:04:32,560
now and then there is a certificate

135
00:04:32,560 --> 00:04:34,479
authority which is a private estonian

136
00:04:34,479 --> 00:04:36,160
company skid solutions which issues

137
00:04:36,160 --> 00:04:39,280
certificates for the id card and here

138
00:04:39,280 --> 00:04:41,199
the id card manufacturer here is fully

139
00:04:41,199 --> 00:04:43,360
trusted by the certificate authority at

140
00:04:43,360 --> 00:04:45,199
any time id card manufacturer can

141
00:04:45,199 --> 00:04:47,199
connect to the cd authority and ask

142
00:04:47,199 --> 00:04:48,560
please give me a certificate with this

143
00:04:48,560 --> 00:04:51,440
public key and this personal data and

144
00:04:51,440 --> 00:04:52,960
server authority will digitally send the

145
00:04:52,960 --> 00:04:54,400
certificate send it back to the id card

146
00:04:54,400 --> 00:04:55,680
manufacturer

147
00:04:55,680 --> 00:04:57,120
that you can manufacture will write it

148
00:04:57,120 --> 00:04:59,120
into the card the card together with

149
00:04:59,120 --> 00:05:00,880
pink pin envelope will be passed to the

150
00:05:00,880 --> 00:05:03,039
document issuer which will then pass it

151
00:05:03,039 --> 00:05:05,759
to the corresponding cardholder

152
00:05:05,759 --> 00:05:07,440
and it's also important is that to get

153
00:05:07,440 --> 00:05:09,440
an id guard the terms and conditions

154
00:05:09,440 --> 00:05:10,720
have to be signed

155
00:05:10,720 --> 00:05:12,000
and now

156
00:05:12,000 --> 00:05:14,240
these terms and conditions is illegally

157
00:05:14,240 --> 00:05:16,000
binding contract between the certificate

158
00:05:16,000 --> 00:05:19,039
authority and the id card holder so

159
00:05:19,039 --> 00:05:19,919
there is

160
00:05:19,919 --> 00:05:22,320
no way for you to obtain id card without

161
00:05:22,320 --> 00:05:24,240
signing these terms and conditions if

162
00:05:24,240 --> 00:05:26,080
you want to get id card you have to

163
00:05:26,080 --> 00:05:28,080
enter into these contractual

164
00:05:28,080 --> 00:05:29,280
relationships with the certificate

165
00:05:29,280 --> 00:05:31,360
authority and if you read actually these

166
00:05:31,360 --> 00:05:33,039
terms and conditions you will see that

167
00:05:33,039 --> 00:05:34,880
the certificate authority

168
00:05:34,880 --> 00:05:37,520
doesn't take any responsibility for the

169
00:05:37,520 --> 00:05:40,080
security of these generated keys so it's

170
00:05:40,080 --> 00:05:43,120
all the id card holder who's responsible

171
00:05:43,120 --> 00:05:44,880
so anyhow so this is how the adequate

172
00:05:44,880 --> 00:05:48,400
manufacturing and issuance process works

173
00:05:48,400 --> 00:05:50,800
now over the years the electronic

174
00:05:50,800 --> 00:05:53,360
functionality of the id card has been

175
00:05:53,360 --> 00:05:55,520
implemented using different id card chip

176
00:05:55,520 --> 00:05:56,880
platforms

177
00:05:56,880 --> 00:05:58,479
by two platform i mean different

178
00:05:58,479 --> 00:06:00,080
hardware and software components which

179
00:06:00,080 --> 00:06:01,680
are running inside the card

180
00:06:01,680 --> 00:06:04,400
and figuring out which components

181
00:06:04,400 --> 00:06:06,160
exactly have been used in the id card

182
00:06:06,160 --> 00:06:07,840
turned out to be a quite challenging

183
00:06:07,840 --> 00:06:09,360
task because

184
00:06:09,360 --> 00:06:11,039
this information is not

185
00:06:11,039 --> 00:06:14,000
too well publicly documented but anyhow

186
00:06:14,000 --> 00:06:14,960
so

187
00:06:14,960 --> 00:06:17,840
here you can see the

188
00:06:17,840 --> 00:06:20,240
image the figure where you can see what

189
00:06:20,240 --> 00:06:21,840
platforms have been in used over the

190
00:06:21,840 --> 00:06:22,800
years

191
00:06:22,800 --> 00:06:25,280
and you can also see

192
00:06:25,280 --> 00:06:27,199
for which types of identity documents

193
00:06:27,199 --> 00:06:28,639
they have been used for

194
00:06:28,639 --> 00:06:29,759
and

195
00:06:29,759 --> 00:06:31,680
so

196
00:06:31,680 --> 00:06:34,240
largely in estonia there have been five

197
00:06:34,240 --> 00:06:36,560
major id card chip platforms in use over

198
00:06:36,560 --> 00:06:39,319
the years this is mikardo multos

199
00:06:39,319 --> 00:06:42,400
jtobsles66 jtobles78 and for the latest

200
00:06:42,400 --> 00:06:44,240
generation of id cards this they are

201
00:06:44,240 --> 00:06:46,880
provided by the idemia platform

202
00:06:46,880 --> 00:06:48,800
a few words about each platform so this

203
00:06:48,800 --> 00:06:51,440
mikado platform was introduced uh from

204
00:06:51,440 --> 00:06:52,720
in the beginning and it was used for

205
00:06:52,720 --> 00:06:55,280
more than nine years and now this in for

206
00:06:55,280 --> 00:06:57,280
this platform the function electronic

207
00:06:57,280 --> 00:06:59,440
functionality of the id card was

208
00:06:59,440 --> 00:07:02,319
implemented by configuring the micardo

209
00:07:02,319 --> 00:07:04,240
card operating system so

210
00:07:04,240 --> 00:07:05,919
it was possible to create their key

211
00:07:05,919 --> 00:07:08,639
objects pin objects and then configure

212
00:07:08,639 --> 00:07:10,720
the access rights for these objects

213
00:07:10,720 --> 00:07:13,280
then later in 2010 multis platform was

214
00:07:13,280 --> 00:07:16,000
introduced now you need uh this platform

215
00:07:16,000 --> 00:07:18,479
is used exclusively for the digital uh

216
00:07:18,479 --> 00:07:19,919
first generation of digital identity

217
00:07:19,919 --> 00:07:22,319
cards and now this multiple platform was

218
00:07:22,319 --> 00:07:24,720
a fully programmable card so there the

219
00:07:24,720 --> 00:07:26,639
functionality was implemented using low

220
00:07:26,639 --> 00:07:28,080
level c language

221
00:07:28,080 --> 00:07:30,479
and so some some someone was paid to

222
00:07:30,479 --> 00:07:32,319
basically implement the same

223
00:07:32,319 --> 00:07:34,720
functionality the same card interface as

224
00:07:34,720 --> 00:07:37,280
was provided by the micarta platform

225
00:07:37,280 --> 00:07:39,120
uh for different marketing reasons

226
00:07:39,120 --> 00:07:41,759
multus platform was deprecated later and

227
00:07:41,759 --> 00:07:45,520
in 2011 the jtox 66 platform was

228
00:07:45,520 --> 00:07:49,120
introduced now this jtop 66 architecture

229
00:07:49,120 --> 00:07:52,080
is this java card platform meaning that

230
00:07:52,080 --> 00:07:54,319
this platform actually runs java applets

231
00:07:54,319 --> 00:07:56,080
or java card uplets which is a subset of

232
00:07:56,080 --> 00:07:57,680
java programming language

233
00:07:57,680 --> 00:08:00,000
again here's some estonian spades to

234
00:08:00,000 --> 00:08:01,919
implement the same functionality in a

235
00:08:01,919 --> 00:08:04,160
java car doublet and the cards were

236
00:08:04,160 --> 00:08:06,560
shipped out to the to the car holders

237
00:08:06,560 --> 00:08:09,840
now in practice uh this didn't went

238
00:08:09,840 --> 00:08:11,520
so smooth as expected because at the end

239
00:08:11,520 --> 00:08:15,199
of 2011 it was discovered that this

240
00:08:15,199 --> 00:08:17,280
java card applet has an

241
00:08:17,280 --> 00:08:19,599
unnamed security flaw and all these

242
00:08:19,599 --> 00:08:22,639
cards issued in 2011 had to be recalled

243
00:08:22,639 --> 00:08:25,039
and the output had to be fixed

244
00:08:25,039 --> 00:08:26,560
now the next uh

245
00:08:26,560 --> 00:08:29,440
milestone was at the end of 2014 when

246
00:08:29,440 --> 00:08:32,880
the upgraded jtop 78 uh platform was

247
00:08:32,880 --> 00:08:35,599
introduced also java card which used a

248
00:08:35,599 --> 00:08:38,559
newer security microcontroller now

249
00:08:38,559 --> 00:08:40,320
as you may remember this is this

250
00:08:40,320 --> 00:08:43,200
notorious platform which was vulnerable

251
00:08:43,200 --> 00:08:46,560
to this infineon rsa key generation flaw

252
00:08:46,560 --> 00:08:50,240
rockef law which was the cause for the

253
00:08:50,240 --> 00:08:53,680
um id card security crisis in 2017 which

254
00:08:53,680 --> 00:08:55,360
i think you all remember

255
00:08:55,360 --> 00:08:56,959
and which was fixed basically not by

256
00:08:56,959 --> 00:08:58,480
changing platforms but by switching from

257
00:08:58,480 --> 00:09:00,959
their sat generation to elliptic curve

258
00:09:00,959 --> 00:09:02,399
keys here

259
00:09:02,399 --> 00:09:04,880
and then finally at the end of 2018 uh

260
00:09:04,880 --> 00:09:06,959
the idemia platform was introduced and

261
00:09:06,959 --> 00:09:08,959
now this edema platform is also java

262
00:09:08,959 --> 00:09:12,080
card but here this card is not running

263
00:09:12,080 --> 00:09:13,920
some applet written by some estonian but

264
00:09:13,920 --> 00:09:16,240
it is it is it is running a fully

265
00:09:16,240 --> 00:09:19,040
security certified european citizen card

266
00:09:19,040 --> 00:09:20,800
update which is also used in the id

267
00:09:20,800 --> 00:09:23,279
cards of other countries and so what is

268
00:09:23,279 --> 00:09:24,959
important point to make here is that

269
00:09:24,959 --> 00:09:26,800
this edemia platform

270
00:09:26,800 --> 00:09:29,440
is the first id card platform which has

271
00:09:29,440 --> 00:09:30,800
actually passed full security

272
00:09:30,800 --> 00:09:32,240
certification

273
00:09:32,240 --> 00:09:34,640
so for these previous platforms uh

274
00:09:34,640 --> 00:09:37,279
perhaps the chip or the operating system

275
00:09:37,279 --> 00:09:40,880
had a security certification but not the

276
00:09:40,880 --> 00:09:42,160
smart card applied which is which

277
00:09:42,160 --> 00:09:43,440
implements the electronic functionality

278
00:09:43,440 --> 00:09:44,880
of the card

279
00:09:44,880 --> 00:09:46,160
and

280
00:09:46,160 --> 00:09:48,640
so the reason why estonia moved to this

281
00:09:48,640 --> 00:09:51,519
fully certificate certified platform is

282
00:09:51,519 --> 00:09:53,760
because of the legal requirements so as

283
00:09:53,760 --> 00:09:55,839
you have heard the

284
00:09:55,839 --> 00:09:59,120
european union eids regulation

285
00:09:59,120 --> 00:10:00,880
requires

286
00:10:00,880 --> 00:10:02,640
qualified signature creation devices to

287
00:10:02,640 --> 00:10:05,920
be security certified now before eides

288
00:10:05,920 --> 00:10:08,240
there was the european union

289
00:10:08,240 --> 00:10:10,640
directive on electronic signatures it

290
00:10:10,640 --> 00:10:13,279
also recognized security certification

291
00:10:13,279 --> 00:10:14,880
but

292
00:10:14,880 --> 00:10:17,040
as an alternative the member states

293
00:10:17,040 --> 00:10:19,360
could do compliance security assessment

294
00:10:19,360 --> 00:10:21,600
themselves to verify that indeed the

295
00:10:21,600 --> 00:10:22,640
platforms

296
00:10:22,640 --> 00:10:24,640
comply to the security requirements of

297
00:10:24,640 --> 00:10:27,120
secure signature creation devices

298
00:10:27,120 --> 00:10:28,399
and

299
00:10:28,399 --> 00:10:30,160
as far as i can tell

300
00:10:30,160 --> 00:10:33,519
apparently dystonian authorities didn't

301
00:10:33,519 --> 00:10:35,440
do this compliance assessment before

302
00:10:35,440 --> 00:10:37,200
introducing these platforms

303
00:10:37,200 --> 00:10:40,959
only in 2015 when the eides regulation

304
00:10:40,959 --> 00:10:42,560
was soon to be introduced

305
00:10:42,560 --> 00:10:45,279
only then uh the authorities

306
00:10:45,279 --> 00:10:46,399
realized that

307
00:10:46,399 --> 00:10:47,760
but this hasn't been done and actually

308
00:10:47,760 --> 00:10:49,120
we have to do this compliance assessment

309
00:10:49,120 --> 00:10:51,440
because otherwise these cards will not

310
00:10:51,440 --> 00:10:53,920
be recognized under eis as a qualified

311
00:10:53,920 --> 00:10:56,079
signature creation devices now

312
00:10:56,079 --> 00:10:57,839
the status of qualified signature

313
00:10:57,839 --> 00:11:02,079
creation device is prerequisite for the

314
00:11:02,079 --> 00:11:03,920
digital signature to have this

315
00:11:03,920 --> 00:11:06,480
handwritten signature status

316
00:11:06,480 --> 00:11:07,760
if the platform doesn't have the status

317
00:11:07,760 --> 00:11:09,360
of the signatures created with it also

318
00:11:09,360 --> 00:11:10,480
doing a hell handwritten signature

319
00:11:10,480 --> 00:11:11,760
studies right

320
00:11:11,760 --> 00:11:15,839
and so what was done was that in 2015 a

321
00:11:15,839 --> 00:11:16,959
committee

322
00:11:16,959 --> 00:11:18,640
was established

323
00:11:18,640 --> 00:11:20,320
from four

324
00:11:20,320 --> 00:11:23,440
state officials uh who then issued the

325
00:11:23,440 --> 00:11:25,200
the compliance assistance protocol

326
00:11:25,200 --> 00:11:26,480
basically stating that yes these

327
00:11:26,480 --> 00:11:27,519
platforms

328
00:11:27,519 --> 00:11:28,480
comply

329
00:11:28,480 --> 00:11:30,880
to the security requirements of secure

330
00:11:30,880 --> 00:11:32,720
signature creation devices

331
00:11:32,720 --> 00:11:34,720
and as you may guess

332
00:11:34,720 --> 00:11:38,240
this kind of assessment was

333
00:11:38,240 --> 00:11:40,240
rather a formality because it's unlikely

334
00:11:40,240 --> 00:11:42,160
that these officials actually analyze

335
00:11:42,160 --> 00:11:43,680
the security of the source code or

336
00:11:43,680 --> 00:11:45,920
dedicated components

337
00:11:45,920 --> 00:11:48,959
now and even more it seems to me that

338
00:11:48,959 --> 00:11:51,040
for in some of the cases for them on

339
00:11:51,040 --> 00:11:53,279
which platforms the authorities may

340
00:11:53,279 --> 00:11:54,399
actually

341
00:11:54,399 --> 00:11:56,480
haven't found out what are the except

342
00:11:56,480 --> 00:11:58,800
except exact uh

343
00:11:58,800 --> 00:12:00,399
components that are used in the into the

344
00:12:00,399 --> 00:12:04,240
platform and as an example um um

345
00:12:04,240 --> 00:12:05,440
let me discuss this in character

346
00:12:05,440 --> 00:12:06,639
platform

347
00:12:06,639 --> 00:12:08,560
so uh while visually it seems that there

348
00:12:08,560 --> 00:12:10,079
was a single platform used for these

349
00:12:10,079 --> 00:12:11,200
nine years

350
00:12:11,200 --> 00:12:14,240
while communicating with the card i got

351
00:12:14,240 --> 00:12:15,279
um

352
00:12:15,279 --> 00:12:17,200
suspicious that there have actually been

353
00:12:17,200 --> 00:12:18,880
three different chip platforms used over

354
00:12:18,880 --> 00:12:21,200
the years for this mikado platform and i

355
00:12:21,200 --> 00:12:23,120
was also able to obtain

356
00:12:23,120 --> 00:12:24,480
evidence for that

357
00:12:24,480 --> 00:12:27,040
and so what you see here

358
00:12:27,040 --> 00:12:29,920
you see here three id card chip samples

359
00:12:29,920 --> 00:12:31,519
for from the id card issued in different

360
00:12:31,519 --> 00:12:32,399
times

361
00:12:32,399 --> 00:12:34,800
and while you can see that the contact

362
00:12:34,800 --> 00:12:37,120
layout of the chip is the same for all

363
00:12:37,120 --> 00:12:38,639
these three cards

364
00:12:38,639 --> 00:12:41,040
if we turn the chips around and if you

365
00:12:41,040 --> 00:12:43,519
remove the epoxy layer and if you take a

366
00:12:43,519 --> 00:12:45,600
photo of the microcontroller we can

367
00:12:45,600 --> 00:12:47,200
clearly see that

368
00:12:47,200 --> 00:12:50,000
these microcontrollers uh these cards

369
00:12:50,000 --> 00:12:51,519
are using three different

370
00:12:51,519 --> 00:12:53,680
microcontrollers and the fun fact is

371
00:12:53,680 --> 00:12:56,240
that only this microcontroller which was

372
00:12:56,240 --> 00:12:59,040
used in the id cards issued in 2002

373
00:12:59,040 --> 00:13:01,120
was security certified to be used

374
00:13:01,120 --> 00:13:02,880
together with demi cardo operating

375
00:13:02,880 --> 00:13:05,200
system

376
00:13:05,200 --> 00:13:09,040
now i i don't know whether whether the

377
00:13:09,040 --> 00:13:11,440
whether the id card manufacturer

378
00:13:11,440 --> 00:13:12,800
informs the authorities about these

379
00:13:12,800 --> 00:13:14,800
changes but as far as i can tell there

380
00:13:14,800 --> 00:13:16,560
is no protocol that that would have

381
00:13:16,560 --> 00:13:18,880
assessed the compliance uh security

382
00:13:18,880 --> 00:13:20,160
compliance of these changes to the

383
00:13:20,160 --> 00:13:21,600
requirements of qualified signature

384
00:13:21,600 --> 00:13:23,760
creation devices and i mean from one

385
00:13:23,760 --> 00:13:25,120
from one side uh you can see the

386
00:13:25,120 --> 00:13:27,519
benefits of this approach because uh

387
00:13:27,519 --> 00:13:29,519
it's it's very easy to introduce new

388
00:13:29,519 --> 00:13:31,519
cheap platforms and uh you can skip the

389
00:13:31,519 --> 00:13:33,279
the lengthy and maybe time-consuming

390
00:13:33,279 --> 00:13:35,279
security assessment process

391
00:13:35,279 --> 00:13:38,800
on the other hand the this even formal

392
00:13:38,800 --> 00:13:40,720
compliance assessment is a prerequisite

393
00:13:40,720 --> 00:13:42,800
for the digital signatures created using

394
00:13:42,800 --> 00:13:44,240
these cards to help this handwritten

395
00:13:44,240 --> 00:13:46,560
signature status so

396
00:13:46,560 --> 00:13:48,720
you could say that strictly speaking

397
00:13:48,720 --> 00:13:50,560
uh we could challenge the validity of

398
00:13:50,560 --> 00:13:52,240
any digital signature which was given

399
00:13:52,240 --> 00:13:54,959
using these uh these platforms right

400
00:13:54,959 --> 00:13:57,040
but anyhow so let's say step it a bit

401
00:13:57,040 --> 00:13:58,079
and uh

402
00:13:58,079 --> 00:14:00,839
maybe maybe you're wondering how

403
00:14:00,839 --> 00:14:03,360
did i manage to make a photos of these

404
00:14:03,360 --> 00:14:06,000
microcontrollers and indeed this wasn't

405
00:14:06,000 --> 00:14:08,480
actually quite trivial to us to do so

406
00:14:08,480 --> 00:14:09,839
the first challenge was how to remove

407
00:14:09,839 --> 00:14:12,959
the epoxy layer from from from the chips

408
00:14:12,959 --> 00:14:15,040
without damaging the microcontroller

409
00:14:15,040 --> 00:14:18,880
and this is where the fellow

410
00:14:18,880 --> 00:14:21,519
phd chemistry student came in to help

411
00:14:21,519 --> 00:14:24,079
and what you see here is

412
00:14:24,079 --> 00:14:25,600
sulfuric acid

413
00:14:25,600 --> 00:14:26,560
heated

414
00:14:26,560 --> 00:14:29,680
to 200 degrees and when this is done

415
00:14:29,680 --> 00:14:31,600
then the

416
00:14:31,600 --> 00:14:33,839
um okay

417
00:14:33,839 --> 00:14:36,000
um

418
00:14:36,000 --> 00:14:37,519
apparently one slide is missing so when

419
00:14:37,519 --> 00:14:40,000
it is done basically the epoxy layer um

420
00:14:40,000 --> 00:14:42,880
is dissolved and we can get get get hold

421
00:14:42,880 --> 00:14:45,199
of the plane microcontroller now the

422
00:14:45,199 --> 00:14:46,639
next challenge of course was how to make

423
00:14:46,639 --> 00:14:47,920
a high-resolution picture of that

424
00:14:47,920 --> 00:14:50,800
microcontroller and

425
00:14:50,800 --> 00:14:52,399
so first i got in touch with the

426
00:14:52,399 --> 00:14:53,680
university of tartu institute of

427
00:14:53,680 --> 00:14:55,839
technology to perhaps use their

428
00:14:55,839 --> 00:14:57,199
expensive

429
00:14:57,199 --> 00:15:00,000
microscopes but then my colleague

430
00:15:00,000 --> 00:15:02,560
although pets he suggested to try out

431
00:15:02,560 --> 00:15:04,399
this

432
00:15:04,399 --> 00:15:07,040
cheap usb microscope from aliexpress

433
00:15:07,040 --> 00:15:10,639
which you can buy for some 20 25

434
00:15:10,639 --> 00:15:12,160
and indeed this this cheap device

435
00:15:12,160 --> 00:15:14,160
actually worked like a

436
00:15:14,160 --> 00:15:16,079
charm and here you can see the results

437
00:15:16,079 --> 00:15:17,839
so actually order two of them

438
00:15:17,839 --> 00:15:19,760
one with thousand times magnification

439
00:15:19,760 --> 00:15:21,199
another is thousand six hundred and here

440
00:15:21,199 --> 00:15:24,240
we can see the results now this here is

441
00:15:24,240 --> 00:15:27,519
this estonian poem which is printed in a

442
00:15:27,519 --> 00:15:29,199
microprint on the previous generation

443
00:15:29,199 --> 00:15:30,720
file card so you can see actually that

444
00:15:30,720 --> 00:15:34,000
the zoom factor is quite nice here

445
00:15:34,000 --> 00:15:36,399
all right let's uh switch the topic a

446
00:15:36,399 --> 00:15:37,680
bit

447
00:15:37,680 --> 00:15:40,399
so in the context of my phd research i

448
00:15:40,399 --> 00:15:43,600
have also done a few studies which focus

449
00:15:43,600 --> 00:15:45,839
on a specific security aspect of the id

450
00:15:45,839 --> 00:15:47,839
card infrastructure

451
00:15:47,839 --> 00:15:49,680
or ecosystem and the first uh which i

452
00:15:49,680 --> 00:15:51,519
would like to mention you here is the

453
00:15:51,519 --> 00:15:53,360
research titled practical issues with

454
00:15:53,360 --> 00:15:55,600
steele's client server authentication

455
00:15:55,600 --> 00:15:57,440
which was about the use case where the

456
00:15:57,440 --> 00:16:00,320
id card is used to authenticate to

457
00:16:00,320 --> 00:16:02,240
e-services and here you see how it looks

458
00:16:02,240 --> 00:16:04,079
from the user's perspective let's say i

459
00:16:04,079 --> 00:16:05,600
want to authenticate to the online bank

460
00:16:05,600 --> 00:16:06,639
i choose a student id card

461
00:16:06,639 --> 00:16:08,560
authentication option the certificate

462
00:16:08,560 --> 00:16:10,800
pop-up window is shown i click ok

463
00:16:10,800 --> 00:16:12,800
and then on the handshake level a

464
00:16:12,800 --> 00:16:15,279
signature is sent to the server proving

465
00:16:15,279 --> 00:16:17,600
that i have access to the corresponding

466
00:16:17,600 --> 00:16:19,279
private key right

467
00:16:19,279 --> 00:16:21,680
so in the context of this study we

468
00:16:21,680 --> 00:16:24,320
proposed different tests how to test the

469
00:16:24,320 --> 00:16:26,639
security of id card authentication

470
00:16:26,639 --> 00:16:28,959
implementations on the server side so we

471
00:16:28,959 --> 00:16:30,399
run different tests we try to submit

472
00:16:30,399 --> 00:16:32,399
certificates which are expired revoked

473
00:16:32,399 --> 00:16:35,120
and then see whether they are accepted

474
00:16:35,120 --> 00:16:37,040
the the most critical finding that we

475
00:16:37,040 --> 00:16:38,399
found in the in the in the in the

476
00:16:38,399 --> 00:16:40,560
context of this research was that the

477
00:16:40,560 --> 00:16:42,880
two biggest banks in estonia uh said

478
00:16:42,880 --> 00:16:45,240
bank and swedbank that their

479
00:16:45,240 --> 00:16:47,920
implementations failed to verify whether

480
00:16:47,920 --> 00:16:49,600
this certificate is actually issued by

481
00:16:49,600 --> 00:16:52,800
the trusted certificate authority which

482
00:16:52,800 --> 00:16:54,480
basically meant that it was possible to

483
00:16:54,480 --> 00:16:58,800
create fake certificates and essentially

484
00:16:58,800 --> 00:17:00,560
bypass the id card authentication

485
00:17:00,560 --> 00:17:02,839
process

486
00:17:02,839 --> 00:17:06,000
now at the end of uh

487
00:17:06,000 --> 00:17:08,400
last year uh computer science bachelor

488
00:17:08,400 --> 00:17:09,439
student

489
00:17:09,439 --> 00:17:11,439
simeon kravchenko

490
00:17:11,439 --> 00:17:14,160
uh he repeated this experiment and he

491
00:17:14,160 --> 00:17:17,599
found a few more e-service e-services

492
00:17:17,599 --> 00:17:19,839
where the same type of adequate

493
00:17:19,839 --> 00:17:21,199
authentication

494
00:17:21,199 --> 00:17:23,359
flow is present and

495
00:17:23,359 --> 00:17:26,400
these were coop bank

496
00:17:26,400 --> 00:17:27,760
elisa

497
00:17:27,760 --> 00:17:31,039
printing city and the arved

498
00:17:31,039 --> 00:17:33,679
now this rv dot t was a

499
00:17:33,679 --> 00:17:35,679
somewhat special case because it took uh

500
00:17:35,679 --> 00:17:38,240
for them more than months to to fix this

501
00:17:38,240 --> 00:17:40,240
issue uh because apparently they wanted

502
00:17:40,240 --> 00:17:41,919
to ship some also functionality

503
00:17:41,919 --> 00:17:43,360
improvements together with the security

504
00:17:43,360 --> 00:17:44,960
fix the

505
00:17:44,960 --> 00:17:47,679
the the other case which is a noteworthy

506
00:17:47,679 --> 00:17:49,760
i think is the scoop bank case

507
00:17:49,760 --> 00:17:52,559
uh and why because uh bank compared to

508
00:17:52,559 --> 00:17:54,960
other banks in estonia they are fully

509
00:17:54,960 --> 00:17:57,679
relying on the id card authentication so

510
00:17:57,679 --> 00:18:00,880
who bank doesn't use any

511
00:18:00,880 --> 00:18:04,160
semi secret user identifier such as

512
00:18:04,160 --> 00:18:06,320
username or user id as in case of other

513
00:18:06,320 --> 00:18:08,480
banks so what it meant in this case is

514
00:18:08,480 --> 00:18:10,480
that the mass exploitation was possible

515
00:18:10,480 --> 00:18:12,160
right so it was possible to just take

516
00:18:12,160 --> 00:18:14,559
the list of all identity codes go over

517
00:18:14,559 --> 00:18:17,039
them see who has the

518
00:18:17,039 --> 00:18:19,360
bank account in the coop bank and then

519
00:18:19,360 --> 00:18:21,600
log into their accounts

520
00:18:21,600 --> 00:18:23,600
what made the matters worse here was

521
00:18:23,600 --> 00:18:27,200
that kubank is a provider of banklink

522
00:18:27,200 --> 00:18:28,880
authentication service

523
00:18:28,880 --> 00:18:30,880
which then meant that by exploiting this

524
00:18:30,880 --> 00:18:33,440
flaw uh the the person could be

525
00:18:33,440 --> 00:18:35,600
impersonated also in other public and

526
00:18:35,600 --> 00:18:38,000
private uh e-services right

527
00:18:38,000 --> 00:18:41,120
so you see that actually it may be a

528
00:18:41,120 --> 00:18:43,600
good idea to to to introduce some kind

529
00:18:43,600 --> 00:18:45,679
of user identifier because in this case

530
00:18:45,679 --> 00:18:48,000
in case of these these faults the mass

531
00:18:48,000 --> 00:18:49,280
exploitation

532
00:18:49,280 --> 00:18:50,960
could be at least slowed down

533
00:18:50,960 --> 00:18:52,559
in this case

534
00:18:52,559 --> 00:18:54,320
if you're from estonia and you are then

535
00:18:54,320 --> 00:18:56,240
you probably also have heard about this

536
00:18:56,240 --> 00:18:58,000
latest incident where the hacker

537
00:18:58,000 --> 00:19:00,960
downloaded close to 300 000 id guard

538
00:19:00,960 --> 00:19:02,960
photos from the servers of information

539
00:19:02,960 --> 00:19:05,120
system authority and as far as i

540
00:19:05,120 --> 00:19:07,360
understand actually the the a very

541
00:19:07,360 --> 00:19:10,160
similar id card authentication a bypass

542
00:19:10,160 --> 00:19:12,480
flow was exploited in this case

543
00:19:12,480 --> 00:19:15,760
and unfortunately this

544
00:19:15,760 --> 00:19:18,880
e-service of id photo downloading was

545
00:19:18,880 --> 00:19:21,039
not in the list of e-services which we

546
00:19:21,039 --> 00:19:22,559
tested so

547
00:19:22,559 --> 00:19:24,720
we were not able to discover this flow

548
00:19:24,720 --> 00:19:26,080
before

549
00:19:26,080 --> 00:19:28,559
before others uh discovered

550
00:19:28,559 --> 00:19:29,679
um

551
00:19:29,679 --> 00:19:31,520
now the

552
00:19:31,520 --> 00:19:32,880
second paper which i would like to

553
00:19:32,880 --> 00:19:34,720
mention is about using the stone and

554
00:19:34,720 --> 00:19:36,240
electronic identity card for

555
00:19:36,240 --> 00:19:38,080
authentication to a machine and this was

556
00:19:38,080 --> 00:19:40,240
co-work with danielle morgan and now

557
00:19:40,240 --> 00:19:42,240
this study concerned the use case where

558
00:19:42,240 --> 00:19:45,120
the id card is used in

559
00:19:45,120 --> 00:19:48,480
terminals to authenticate the cardholder

560
00:19:48,480 --> 00:19:50,240
now for example you see here example

561
00:19:50,240 --> 00:19:52,799
from the prisma shopping terminal where

562
00:19:52,799 --> 00:19:54,720
the card is inserted for the car holder

563
00:19:54,720 --> 00:19:56,000
to obtain

564
00:19:56,000 --> 00:19:58,160
loyal customer benefits right now what

565
00:19:58,160 --> 00:19:59,520
is super important to note here is that

566
00:19:59,520 --> 00:20:02,320
this use case doesn't involve any

567
00:20:02,320 --> 00:20:05,520
cryptography so what is done here is the

568
00:20:05,520 --> 00:20:07,120
terminal simply reads the personal

569
00:20:07,120 --> 00:20:09,120
identity code from the public personal

570
00:20:09,120 --> 00:20:11,440
data file which is stored in the chip

571
00:20:11,440 --> 00:20:13,600
and here the question was how hard it

572
00:20:13,600 --> 00:20:16,159
would be to build a fake id card an id

573
00:20:16,159 --> 00:20:18,000
card emulator

574
00:20:18,000 --> 00:20:19,840
where we could specify arbitrary data in

575
00:20:19,840 --> 00:20:21,440
this personal data file

576
00:20:21,440 --> 00:20:22,799
and so what we did is that we took a

577
00:20:22,799 --> 00:20:24,480
programmable java card

578
00:20:24,480 --> 00:20:27,039
we took a code from martin paliak and we

579
00:20:27,039 --> 00:20:30,880
extended it in a way also that

580
00:20:30,880 --> 00:20:34,320
this emulator it logged the commands

581
00:20:34,320 --> 00:20:37,440
that were received from the terminal

582
00:20:37,440 --> 00:20:39,600
so this way later we could see exactly

583
00:20:39,600 --> 00:20:40,400
which

584
00:20:40,400 --> 00:20:42,640
entries from the personal data file the

585
00:20:42,640 --> 00:20:45,200
terminal retrieved right

586
00:20:45,200 --> 00:20:46,960
and it's okay so this project was a

587
00:20:46,960 --> 00:20:49,039
success the id card emulator was

588
00:20:49,039 --> 00:20:50,640
accepted as the authentic card in any

589
00:20:50,640 --> 00:20:52,960
terminal we tested and unfortunately we

590
00:20:52,960 --> 00:20:54,480
also observed that

591
00:20:54,480 --> 00:20:56,559
most of the terminals

592
00:20:56,559 --> 00:20:59,600
in shops they read the entire personal

593
00:20:59,600 --> 00:21:01,760
data file although only maybe the

594
00:21:01,760 --> 00:21:03,440
personal identity id code would be

595
00:21:03,440 --> 00:21:05,760
necessary to identify the person right

596
00:21:05,760 --> 00:21:07,280
and of course we don't know whether this

597
00:21:07,280 --> 00:21:09,919
data is used somewhere or or

598
00:21:09,919 --> 00:21:11,520
it's just that the api reads their own

599
00:21:11,520 --> 00:21:13,120
personal data file and the systems throw

600
00:21:13,120 --> 00:21:15,440
away everything except that eco anyhow

601
00:21:15,440 --> 00:21:17,360
so another interesting finding here was

602
00:21:17,360 --> 00:21:19,760
that it turned out that it is quite

603
00:21:19,760 --> 00:21:22,880
trivial to transplant the fake chip to

604
00:21:22,880 --> 00:21:25,360
the authentic id card and here we can

605
00:21:25,360 --> 00:21:27,440
see the example uh this is the authentic

606
00:21:27,440 --> 00:21:29,440
id card and this is authentic id card

607
00:21:29,440 --> 00:21:31,840
with a fake chip blue glued on it

608
00:21:31,840 --> 00:21:32,799
and

609
00:21:32,799 --> 00:21:34,159
also i was surprised that actually the

610
00:21:34,159 --> 00:21:35,039
process

611
00:21:35,039 --> 00:21:36,640
was quite trivial and

612
00:21:36,640 --> 00:21:38,400
in this process no

613
00:21:38,400 --> 00:21:40,640
physical security elements of the

614
00:21:40,640 --> 00:21:43,679
authentic id card were damaged right

615
00:21:43,679 --> 00:21:46,720
so to remove the chip from the fake card

616
00:21:46,720 --> 00:21:48,799
it was only necessary to hold a

617
00:21:48,799 --> 00:21:50,799
lighter a few seconds behind the card

618
00:21:50,799 --> 00:21:53,120
and the chip would simply fell off now

619
00:21:53,120 --> 00:21:54,799
to remove the

620
00:21:54,799 --> 00:21:55,600
the

621
00:21:55,600 --> 00:21:58,000
original chip from the id card you would

622
00:21:58,000 --> 00:21:59,919
have to make a cut somewhere here with a

623
00:21:59,919 --> 00:22:02,559
paper knife and then just remove by

624
00:22:02,559 --> 00:22:04,480
force of the chip and remove the glue

625
00:22:04,480 --> 00:22:06,640
residues which which were around there

626
00:22:06,640 --> 00:22:08,400
and then glue the fake chip

627
00:22:08,400 --> 00:22:10,320
so as you see in this process uh it's

628
00:22:10,320 --> 00:22:13,440
actually possible to create a

629
00:22:13,440 --> 00:22:15,440
authentic id card with a fake chip

630
00:22:15,440 --> 00:22:17,360
that's visually indistinguishable from

631
00:22:17,360 --> 00:22:19,919
from the from the from the authentic

632
00:22:19,919 --> 00:22:22,240
card now i mean in this case you can see

633
00:22:22,240 --> 00:22:23,840
the different differences the cheap

634
00:22:23,840 --> 00:22:26,240
contact layouts but actually today it's

635
00:22:26,240 --> 00:22:28,480
also possible to buy the cheap

636
00:22:28,480 --> 00:22:30,000
programmable java card chip which has

637
00:22:30,000 --> 00:22:32,080
exactly the same contact layout as as in

638
00:22:32,080 --> 00:22:34,320
the authentic card

639
00:22:34,320 --> 00:22:36,640
all right so the

640
00:22:36,640 --> 00:22:38,480
next thing which i cannot skip in the

641
00:22:38,480 --> 00:22:41,720
tile in the talk title as it is is this

642
00:22:41,720 --> 00:22:46,480
2017 id card crisis and i think so i

643
00:22:46,480 --> 00:22:48,159
have written about it quite a lot others

644
00:22:48,159 --> 00:22:50,159
have written i think it's well known

645
00:22:50,159 --> 00:22:52,799
what happened there and uh today i will

646
00:22:52,799 --> 00:22:55,120
not go into it but i will just remind

647
00:22:55,120 --> 00:22:57,360
you that this was the case which

648
00:22:57,360 --> 00:23:00,400
resulted in a legal dispute against the

649
00:23:00,400 --> 00:23:02,240
id card manufacturer gemalto because

650
00:23:02,240 --> 00:23:04,799
apparently gemalto knew about the flaw

651
00:23:04,799 --> 00:23:06,640
earlier but did not inform the

652
00:23:06,640 --> 00:23:08,880
authorities in a timely manner right

653
00:23:08,880 --> 00:23:10,799
now what i want to focus in the rest of

654
00:23:10,799 --> 00:23:12,559
my presentation is on some of the

655
00:23:12,559 --> 00:23:13,919
findings

656
00:23:13,919 --> 00:23:15,919
which maybe are not so well publicly

657
00:23:15,919 --> 00:23:16,960
known

658
00:23:16,960 --> 00:23:19,600
and to set a stage for that let me

659
00:23:19,600 --> 00:23:21,280
introduce the

660
00:23:21,280 --> 00:23:24,080
id guard certificate repository now as

661
00:23:24,080 --> 00:23:26,720
you may know all currently valid id card

662
00:23:26,720 --> 00:23:28,480
certificates

663
00:23:28,480 --> 00:23:30,240
are published in a public ldap

664
00:23:30,240 --> 00:23:32,080
certificate repository

665
00:23:32,080 --> 00:23:34,000
and the purpose of this repository is to

666
00:23:34,000 --> 00:23:36,400
make the public keys available in case

667
00:23:36,400 --> 00:23:38,799
someone would want to make some create

668
00:23:38,799 --> 00:23:41,200
some encrypted file to the card holder

669
00:23:41,200 --> 00:23:42,640
to the recipient

670
00:23:42,640 --> 00:23:45,200
so over over the years time to time i

671
00:23:45,200 --> 00:23:47,360
have been collecting these certificates

672
00:23:47,360 --> 00:23:49,520
which are published in this repository

673
00:23:49,520 --> 00:23:51,120
and

674
00:23:51,120 --> 00:23:53,520
by analyzing these certificates i was

675
00:23:53,520 --> 00:23:55,919
able to discover

676
00:23:55,919 --> 00:23:58,240
some

677
00:23:58,480 --> 00:24:00,400
anomalies which signaled about the

678
00:24:00,400 --> 00:24:02,320
serious

679
00:24:02,320 --> 00:24:04,720
security flaws in the key management of

680
00:24:04,720 --> 00:24:07,679
the id card and uh so these findings

681
00:24:07,679 --> 00:24:10,159
have been published in detail in the the

682
00:24:10,159 --> 00:24:12,320
user next 2020 paper called the standard

683
00:24:12,320 --> 00:24:14,400
electronic identity card security flaws

684
00:24:14,400 --> 00:24:16,640
in key management and i'll just go very

685
00:24:16,640 --> 00:24:18,480
briefly over them and and bring down the

686
00:24:18,480 --> 00:24:21,120
key key find findings

687
00:24:21,120 --> 00:24:23,600
so the first observation to mention was

688
00:24:23,600 --> 00:24:25,679
that there were

689
00:24:25,679 --> 00:24:27,840
certificates with corrupted rsa public

690
00:24:27,840 --> 00:24:29,200
keys and here we can see the full list

691
00:24:29,200 --> 00:24:31,679
of certificates now the corrupted there

692
00:24:31,679 --> 00:24:33,600
is a public key here means

693
00:24:33,600 --> 00:24:36,559
that these public key modules

694
00:24:36,559 --> 00:24:39,440
could be divided by small prime factors

695
00:24:39,440 --> 00:24:42,240
three five seven and so on now

696
00:24:42,240 --> 00:24:44,640
as maybe you know in

697
00:24:44,640 --> 00:24:46,880
rsa the public key modulus is

698
00:24:46,880 --> 00:24:50,080
constructed by multiplying two huge

699
00:24:50,080 --> 00:24:52,480
prime numbers together right

700
00:24:52,480 --> 00:24:54,720
so if the public key can be divided by

701
00:24:54,720 --> 00:24:56,880
small factors something is uh really

702
00:24:56,880 --> 00:24:59,440
really wrong with the key and eventually

703
00:24:59,440 --> 00:25:01,200
we came to the conclusion that most

704
00:25:01,200 --> 00:25:03,679
likely the corruption happened on the id

705
00:25:03,679 --> 00:25:06,240
card production line where the

706
00:25:06,240 --> 00:25:08,240
public keys retrieved from freshly

707
00:25:08,240 --> 00:25:09,600
generated

708
00:25:09,600 --> 00:25:11,120
public keys retrieved from the card

709
00:25:11,120 --> 00:25:13,200
maybe on the electric communication line

710
00:25:13,200 --> 00:25:15,840
and some bits got flipped

711
00:25:15,840 --> 00:25:18,720
and when

712
00:25:18,720 --> 00:25:20,880
even if a single bit is flipped

713
00:25:20,880 --> 00:25:22,640
for the rsa key

714
00:25:22,640 --> 00:25:24,159
then it basically becomes in a way a

715
00:25:24,159 --> 00:25:26,840
random number right so

716
00:25:26,840 --> 00:25:28,640
now

717
00:25:28,640 --> 00:25:31,679
this seemingly purely a quality issue

718
00:25:31,679 --> 00:25:33,679
actually turned out to have a quite

719
00:25:33,679 --> 00:25:36,159
critical security consequences because

720
00:25:36,159 --> 00:25:37,919
if the public key

721
00:25:37,919 --> 00:25:39,279
becomes random number then the

722
00:25:39,279 --> 00:25:41,760
mathematical properties of the key

723
00:25:41,760 --> 00:25:43,039
are lost

724
00:25:43,039 --> 00:25:46,559
which means that if we could somehow

725
00:25:46,559 --> 00:25:49,679
recover all the prime factors that make

726
00:25:49,679 --> 00:25:50,640
up the

727
00:25:50,640 --> 00:25:53,039
corrupted public key we could also then

728
00:25:53,039 --> 00:25:55,039
construct the corresponding private key

729
00:25:55,039 --> 00:25:57,840
right and in the case of one corrupted

730
00:25:57,840 --> 00:26:00,320
public key in case of svetlana's

731
00:26:00,320 --> 00:26:02,080
public key we actually managed to to

732
00:26:02,080 --> 00:26:04,480
fully factor all the factors and here

733
00:26:04,480 --> 00:26:06,799
you can see the process so we use the

734
00:26:06,799 --> 00:26:08,480
gmp elliptic core method for

735
00:26:08,480 --> 00:26:10,240
factorization so this is this corrupted

736
00:26:10,240 --> 00:26:12,400
public key modulus and here we can see

737
00:26:12,400 --> 00:26:14,880
that the first prime factors are found

738
00:26:14,880 --> 00:26:17,120
already in first few seconds then the

739
00:26:17,120 --> 00:26:18,640
next one

740
00:26:18,640 --> 00:26:20,480
and then finally here we can see the

741
00:26:20,480 --> 00:26:24,240
full full list of the prime factors and

742
00:26:24,240 --> 00:26:26,000
it took us this amount of seconds which

743
00:26:26,000 --> 00:26:28,799
is around 60 hours in total

744
00:26:28,799 --> 00:26:29,760
um

745
00:26:29,760 --> 00:26:31,440
so yeah we were lucky of course this is

746
00:26:31,440 --> 00:26:34,320
this process is uh probabilistic so

747
00:26:34,320 --> 00:26:36,000
it's not guaranteed that you

748
00:26:36,000 --> 00:26:37,600
uh basically there is a bit of luck

749
00:26:37,600 --> 00:26:39,760
involved here so i guess we were very

750
00:26:39,760 --> 00:26:43,039
lucky here now once we have the

751
00:26:43,039 --> 00:26:44,799
all the prime factors we can construct

752
00:26:44,799 --> 00:26:47,440
the rsa private key file

753
00:26:47,440 --> 00:26:49,360
and then using the private key file we

754
00:26:49,360 --> 00:26:51,200
can sign something and see whether it

755
00:26:51,200 --> 00:26:53,039
works and

756
00:26:53,039 --> 00:26:54,559
in this case we see that indeed no

757
00:26:54,559 --> 00:26:55,520
surprise

758
00:26:55,520 --> 00:26:57,679
the digital client recognizes the

759
00:26:57,679 --> 00:27:00,080
signature as valid

760
00:27:00,080 --> 00:27:02,480
very good so point proven

761
00:27:02,480 --> 00:27:03,279
now

762
00:27:03,279 --> 00:27:05,200
a more interesting

763
00:27:05,200 --> 00:27:07,279
finding among the certificates where

764
00:27:07,279 --> 00:27:10,080
certificates with dublicate rsa public

765
00:27:10,080 --> 00:27:12,399
keys

766
00:27:12,480 --> 00:27:13,919
so what it means is that there are

767
00:27:13,919 --> 00:27:15,919
several pairs of certificates

768
00:27:15,919 --> 00:27:18,720
where the public key and certificate

769
00:27:18,720 --> 00:27:21,360
issued to one person matched the public

770
00:27:21,360 --> 00:27:22,880
key

771
00:27:22,880 --> 00:27:24,240
from the certificate issue to another

772
00:27:24,240 --> 00:27:25,600
person

773
00:27:25,600 --> 00:27:28,720
and this one pair a pair issued to

774
00:27:28,720 --> 00:27:30,640
belonging to toeivo and

775
00:27:30,640 --> 00:27:32,960
we decided to investigate it further

776
00:27:32,960 --> 00:27:34,720
so here we can see the authentication

777
00:27:34,720 --> 00:27:37,200
certificate of

778
00:27:37,200 --> 00:27:38,480
toivo

779
00:27:38,480 --> 00:27:40,240
and here we can see the digital

780
00:27:40,240 --> 00:27:42,000
signature

781
00:27:42,000 --> 00:27:43,760
certificate of ullen

782
00:27:43,760 --> 00:27:45,520
and as i'm switching between these

783
00:27:45,520 --> 00:27:47,679
certificates you can see that actually

784
00:27:47,679 --> 00:27:48,640
the

785
00:27:48,640 --> 00:27:50,960
uh public key modulus is the same here

786
00:27:50,960 --> 00:27:52,559
and what you can also observe is that

787
00:27:52,559 --> 00:27:54,640
not before time that these certificates

788
00:27:54,640 --> 00:27:56,720
have been issued with a few second

789
00:27:56,720 --> 00:27:58,159
difference right

790
00:27:58,159 --> 00:27:59,600
now the question of course is how it

791
00:27:59,600 --> 00:28:02,399
could possibly happen

792
00:28:02,399 --> 00:28:03,600
maybe it is

793
00:28:03,600 --> 00:28:05,919
some flaw in the certifications process

794
00:28:05,919 --> 00:28:09,120
for instance the public key by a mistake

795
00:28:09,120 --> 00:28:10,799
was included twice in two different

796
00:28:10,799 --> 00:28:12,480
certificates right

797
00:28:12,480 --> 00:28:15,360
now an alternative explanation is that

798
00:28:15,360 --> 00:28:17,039
the certificates are actually correct

799
00:28:17,039 --> 00:28:20,000
but the corresponding id cards uh

800
00:28:20,000 --> 00:28:22,880
contain the same private keys

801
00:28:22,880 --> 00:28:25,039
and

802
00:28:25,039 --> 00:28:25,840
okay

803
00:28:25,840 --> 00:28:27,520
today i know that these cards actually

804
00:28:27,520 --> 00:28:29,600
contained the same private keys but at

805
00:28:29,600 --> 00:28:33,840
that time that had to be established so

806
00:28:33,840 --> 00:28:36,240
but okay in case in case in case the

807
00:28:36,240 --> 00:28:37,760
private keys are the same for these

808
00:28:37,760 --> 00:28:40,399
cards do you see the security impact of

809
00:28:40,399 --> 00:28:41,919
this

810
00:28:41,919 --> 00:28:43,600
so what it basically means is that the

811
00:28:43,600 --> 00:28:45,840
ulla can create using their digital

812
00:28:45,840 --> 00:28:49,200
signature key she can authenticate

813
00:28:49,200 --> 00:28:52,320
and then torivo using his authentication

814
00:28:52,320 --> 00:28:54,799
keeper then can forge digital signatures

815
00:28:54,799 --> 00:28:57,200
in the name of ulla right

816
00:28:57,200 --> 00:28:59,679
uh so to test out this uh i got in touch

817
00:28:59,679 --> 00:29:01,440
with toy war uh taiwa agreed to

818
00:29:01,440 --> 00:29:03,840
participate in the experiment so what i

819
00:29:03,840 --> 00:29:06,480
did is that i sent an executable to to

820
00:29:06,480 --> 00:29:08,720
toyo he had to run it on his computer

821
00:29:08,720 --> 00:29:11,679
enter uh pin one here and some signature

822
00:29:11,679 --> 00:29:13,279
bytes were printed out

823
00:29:13,279 --> 00:29:15,679
now so he sent me back this screenshot

824
00:29:15,679 --> 00:29:18,399
of this output i wrote down bytes from

825
00:29:18,399 --> 00:29:21,039
the signature i pasted them into a

826
00:29:21,039 --> 00:29:22,799
digital signature container

827
00:29:22,799 --> 00:29:24,720
and indeed

828
00:29:24,720 --> 00:29:27,279
this provided a proof that toy was card

829
00:29:27,279 --> 00:29:29,200
contains the corresponding private key

830
00:29:29,200 --> 00:29:31,360
and it can be used to forge digital

831
00:29:31,360 --> 00:29:35,039
signatures in the name of ullen

832
00:29:35,039 --> 00:29:36,960
all right

833
00:29:36,960 --> 00:29:39,679
later i also got in touch with ulla and

834
00:29:39,679 --> 00:29:41,200
found out that her card also contains

835
00:29:41,200 --> 00:29:42,480
the same private key

836
00:29:42,480 --> 00:29:44,159
but then the question the million dollar

837
00:29:44,159 --> 00:29:45,760
question is how is it possible right

838
00:29:45,760 --> 00:29:47,760
because if the if the

839
00:29:47,760 --> 00:29:49,600
if the key is generated inside the card

840
00:29:49,600 --> 00:29:51,200
it should be unique for for for each

841
00:29:51,200 --> 00:29:52,159
card

842
00:29:52,159 --> 00:29:56,240
however if the key is generated outside

843
00:29:56,240 --> 00:29:59,360
and then copied to the card then in case

844
00:29:59,360 --> 00:30:00,960
of some software

845
00:30:00,960 --> 00:30:04,080
flaw the same private key can

846
00:30:04,080 --> 00:30:05,919
be imported in two different cards which

847
00:30:05,919 --> 00:30:09,200
which actually was the case here right

848
00:30:09,200 --> 00:30:12,159
and this is when we come to the

849
00:30:12,159 --> 00:30:14,480
finding the evidence that actually for

850
00:30:14,480 --> 00:30:16,720
some certain set of id cards the private

851
00:30:16,720 --> 00:30:19,520
keys were generated outside the id card

852
00:30:19,520 --> 00:30:22,159
and to make a long story short so what

853
00:30:22,159 --> 00:30:24,480
we did is that we generated millions of

854
00:30:24,480 --> 00:30:27,840
keys using the actual id card platforms

855
00:30:27,840 --> 00:30:30,640
and then compared whether the properties

856
00:30:30,640 --> 00:30:32,640
in the public keys obtained in this

857
00:30:32,640 --> 00:30:33,679
process

858
00:30:33,679 --> 00:30:36,399
match the properties of the public keys

859
00:30:36,399 --> 00:30:38,320
that are inside the certificates and

860
00:30:38,320 --> 00:30:39,840
they should match if the same key

861
00:30:39,840 --> 00:30:41,840
generation agreement was used right but

862
00:30:41,840 --> 00:30:43,679
for a particular set of certificates

863
00:30:43,679 --> 00:30:45,600
they did not match and here you can see

864
00:30:45,600 --> 00:30:47,440
the example so

865
00:30:47,440 --> 00:30:49,279
this is the distribution of most

866
00:30:49,279 --> 00:30:52,000
significant byte of the modulus for keys

867
00:30:52,000 --> 00:30:54,080
generated by the platform and this is

868
00:30:54,080 --> 00:30:55,919
the distribution from the public keys in

869
00:30:55,919 --> 00:30:56,799
the certificate as you see the

870
00:30:56,799 --> 00:30:58,559
distributions are different

871
00:30:58,559 --> 00:31:00,080
which means that these keys were

872
00:31:00,080 --> 00:31:02,240
actually generated by some different rsa

873
00:31:02,240 --> 00:31:04,080
key generation algorithm than the one

874
00:31:04,080 --> 00:31:07,200
which is implemented by the card

875
00:31:07,200 --> 00:31:08,000
now

876
00:31:08,000 --> 00:31:10,559
the set of these certificates belong to

877
00:31:10,559 --> 00:31:13,200
specific set of id cards which were

878
00:31:13,200 --> 00:31:16,159
renewed in a police customer service

879
00:31:16,159 --> 00:31:19,039
point to fix the flaw in the id cards

880
00:31:19,039 --> 00:31:22,080
that were issued in 2011. um

881
00:31:22,080 --> 00:31:25,360
so what is meant is that the the the

882
00:31:25,360 --> 00:31:27,519
first the person got the

883
00:31:27,519 --> 00:31:30,240
id card is a some unnamed four and then

884
00:31:30,240 --> 00:31:32,159
when they went to upgrade or fix it they

885
00:31:32,159 --> 00:31:33,679
actually got the copy of private key

886
00:31:33,679 --> 00:31:35,279
injected in their card

887
00:31:35,279 --> 00:31:37,919
um not very successful fixing of the

888
00:31:37,919 --> 00:31:39,600
issue i would say right

889
00:31:39,600 --> 00:31:41,200
what's also super important to note here

890
00:31:41,200 --> 00:31:43,840
is that um this practice of of of

891
00:31:43,840 --> 00:31:45,679
generating uh these keys outside the

892
00:31:45,679 --> 00:31:49,039
card was present for five year period

893
00:31:49,039 --> 00:31:51,200
this was done over five year period and

894
00:31:51,200 --> 00:31:53,919
in this time none of the audits of the

895
00:31:53,919 --> 00:31:55,919
certified authority neither internal nor

896
00:31:55,919 --> 00:31:57,039
external

897
00:31:57,039 --> 00:31:59,120
found these non-compliance which

898
00:31:59,120 --> 00:32:01,039
basically questions the scope and and

899
00:32:01,039 --> 00:32:02,960
the quality of of or the benefits

900
00:32:02,960 --> 00:32:04,480
provided by these type of security

901
00:32:04,480 --> 00:32:05,519
audits

902
00:32:05,519 --> 00:32:09,440
anyhow so um after we disclosed uh these

903
00:32:09,440 --> 00:32:11,760
findings to the authorities soon after

904
00:32:11,760 --> 00:32:15,039
uh ppa announced um the replacement of

905
00:32:15,039 --> 00:32:17,600
the affected id cards under warranty and

906
00:32:17,600 --> 00:32:21,039
at that time uh from more than 74 000 id

907
00:32:21,039 --> 00:32:22,240
cards which are

908
00:32:22,240 --> 00:32:24,640
renewed in customer search points only

909
00:32:24,640 --> 00:32:28,000
12 000 were still valid

910
00:32:28,000 --> 00:32:31,200
and then soon after also the ppa brought

911
00:32:31,200 --> 00:32:33,039
gemalto to court

912
00:32:33,039 --> 00:32:35,919
demanding a contractual penalty of 152

913
00:32:35,919 --> 00:32:37,440
million euro

914
00:32:37,440 --> 00:32:38,480
for the breach of contract because

915
00:32:38,480 --> 00:32:41,039
apparently the contract required

916
00:32:41,039 --> 00:32:42,720
the educate manufacturer to generate the

917
00:32:42,720 --> 00:32:44,320
keys inside the car yeah so this was

918
00:32:44,320 --> 00:32:46,000
breached now in their public

919
00:32:46,000 --> 00:32:49,120
communication uh gemalto denied any

920
00:32:49,120 --> 00:32:50,559
wrongdoing

921
00:32:50,559 --> 00:32:52,559
they said that it's a surprise

922
00:32:52,559 --> 00:32:53,360
that

923
00:32:53,360 --> 00:32:55,200
the ppas announcements are a surprise

924
00:32:55,200 --> 00:32:56,559
and that they have done everything as

925
00:32:56,559 --> 00:32:57,919
agreed upon

926
00:32:57,919 --> 00:33:00,480
and now the latest news which are from

927
00:33:00,480 --> 00:33:03,120
the february this year is that ppa and

928
00:33:03,120 --> 00:33:05,840
gemalto reached a compromise agreement

929
00:33:05,840 --> 00:33:07,360
with gemalto agreeing to pay the state

930
00:33:07,360 --> 00:33:09,679
2.0 million euro in compensation

931
00:33:09,679 --> 00:33:12,559
so 152 were asked 2.2 were renegotiated

932
00:33:12,559 --> 00:33:13,600
agreed

933
00:33:13,600 --> 00:33:16,720
and if we read the the the press release

934
00:33:16,720 --> 00:33:18,399
which is published

935
00:33:18,399 --> 00:33:21,840
on friday after working hours then we

936
00:33:21,840 --> 00:33:23,760
can see that it states that the

937
00:33:23,760 --> 00:33:25,200
agreement has been signed to close the

938
00:33:25,200 --> 00:33:27,200
claims on the potential vulnerability to

939
00:33:27,200 --> 00:33:28,720
the estonian id card which occurred in

940
00:33:28,720 --> 00:33:31,200
2017. so as you see this press statement

941
00:33:31,200 --> 00:33:33,120
mentions only the rocket case not the

942
00:33:33,120 --> 00:33:34,960
not the key generation outside the card

943
00:33:34,960 --> 00:33:37,039
i approached the ppa and they confirmed

944
00:33:37,039 --> 00:33:40,559
actually that actually this

945
00:33:40,559 --> 00:33:42,960
settlement covers all the disputes

946
00:33:42,960 --> 00:33:45,200
between the state and the id card

947
00:33:45,200 --> 00:33:47,360
manufacturer and so you can only only

948
00:33:47,360 --> 00:33:48,480
wonder

949
00:33:48,480 --> 00:33:50,320
why

950
00:33:50,320 --> 00:33:52,720
these press release mentions only the

951
00:33:52,720 --> 00:33:55,919
rocker case in 2017. but all right so

952
00:33:55,919 --> 00:33:58,159
with this

953
00:33:58,159 --> 00:34:01,279
peculiar note i end my presentation

954
00:34:01,279 --> 00:34:05,480
and thank you for your attention

955
00:34:10,879 --> 00:34:13,199
i believe citizens have a lot of

956
00:34:13,199 --> 00:34:16,960
questions regarding their id card so

957
00:34:16,960 --> 00:34:18,800
no i actually have a question about the

958
00:34:18,800 --> 00:34:22,079
slide 17 uh you said that you generated

959
00:34:22,079 --> 00:34:25,359
keys on the actual light cards right how

960
00:34:25,359 --> 00:34:26,639
did you do that

961
00:34:26,639 --> 00:34:30,159
very good question um

962
00:34:30,239 --> 00:34:31,679
and there is a special story how i did

963
00:34:31,679 --> 00:34:34,079
on these particular cards actually

964
00:34:34,079 --> 00:34:35,679
my cardo cards if you recognize these

965
00:34:35,679 --> 00:34:37,280
are the first generation cards which are

966
00:34:37,280 --> 00:34:39,918
which are used from 2002 to 2009. so in

967
00:34:39,918 --> 00:34:42,320
case of these particular cards

968
00:34:42,320 --> 00:34:44,639
it turned out that this micart operating

969
00:34:44,639 --> 00:34:45,679
system

970
00:34:45,679 --> 00:34:47,599
was

971
00:34:47,599 --> 00:34:48,719
hit the security flow in their

972
00:34:48,719 --> 00:34:51,679
configuration which meant that

973
00:34:51,679 --> 00:34:54,399
i mean i i i found it only after the

974
00:34:54,399 --> 00:34:56,800
last id card was already expired so this

975
00:34:56,800 --> 00:34:59,040
is an issue right but if if if this was

976
00:34:59,040 --> 00:35:00,640
found like then 10 years ago then this

977
00:35:00,640 --> 00:35:02,560
would be issue because what it meant is

978
00:35:02,560 --> 00:35:06,000
that by knowing pin two code of the card

979
00:35:06,000 --> 00:35:09,280
it was possible to

980
00:35:10,000 --> 00:35:12,000
override the card management keys which

981
00:35:12,000 --> 00:35:13,920
are used to personalize the card so

982
00:35:13,920 --> 00:35:15,599
basically i could just take a real cards

983
00:35:15,599 --> 00:35:17,920
and create my own configuration and

984
00:35:17,920 --> 00:35:19,599
generate the keys export them even the

985
00:35:19,599 --> 00:35:22,320
previous private keys export and and and

986
00:35:22,320 --> 00:35:24,480
and collect the cards now for the other

987
00:35:24,480 --> 00:35:27,520
platforms um

988
00:35:27,520 --> 00:35:29,759
now

989
00:35:29,839 --> 00:35:32,000
i got the samples for other cards for

990
00:35:32,000 --> 00:35:34,560
the java card platforms uh for the

991
00:35:34,560 --> 00:35:36,720
multus platform remember the multis

992
00:35:36,720 --> 00:35:38,800
platform which was

993
00:35:38,800 --> 00:35:40,960
which had this applet programmed in in

994
00:35:40,960 --> 00:35:43,599
low level c

995
00:35:43,680 --> 00:35:46,320
i mean i could get a blank blank uh

996
00:35:46,320 --> 00:35:48,000
multi-card and i actually acquired it

997
00:35:48,000 --> 00:35:49,520
but the problem is that the key

998
00:35:49,520 --> 00:35:51,119
generation algorithm was implemented

999
00:35:51,119 --> 00:35:52,640
inside the applet

1000
00:35:52,640 --> 00:35:54,720
so for for this and for java card

1001
00:35:54,720 --> 00:35:56,480
platforms key generation was operating

1002
00:35:56,480 --> 00:35:59,040
system feature so there was no way for

1003
00:35:59,040 --> 00:36:00,640
the manufacturer by writing an applet

1004
00:36:00,640 --> 00:36:03,119
modified but for multi-platform of

1005
00:36:03,119 --> 00:36:04,720
course it depended on this particular

1006
00:36:04,720 --> 00:36:06,960
application which is not open source so

1007
00:36:06,960 --> 00:36:08,400
i couldn't get it and couldn't see

1008
00:36:08,400 --> 00:36:10,480
actually what what what is the key

1009
00:36:10,480 --> 00:36:11,760
generation organ which is used for

1010
00:36:11,760 --> 00:36:14,160
multiple cards only by absurd i could so

1011
00:36:14,160 --> 00:36:18,079
what i could do i could um

1012
00:36:18,079 --> 00:36:20,560
actually just generate this plot but i

1013
00:36:20,560 --> 00:36:22,880
didn't have a reference data to see

1014
00:36:22,880 --> 00:36:24,800
what type of properties were generated

1015
00:36:24,800 --> 00:36:26,720
by the actual card so multi about

1016
00:36:26,720 --> 00:36:29,040
multiple about multiple platform i

1017
00:36:29,040 --> 00:36:31,200
cannot make any claims whether the keys

1018
00:36:31,200 --> 00:36:33,040
were generated inside or outside

1019
00:36:33,040 --> 00:36:35,359
uh but for all other platforms there is

1020
00:36:35,359 --> 00:36:37,119
a quite strong evidence

1021
00:36:37,119 --> 00:36:38,720
that

1022
00:36:38,720 --> 00:36:40,400
for all others except these

1023
00:36:40,400 --> 00:36:42,000
seventy four thousand cards which are in

1024
00:36:42,000 --> 00:36:44,000
ppa these keys have been generated

1025
00:36:44,000 --> 00:36:45,599
actually inside the card but here's

1026
00:36:45,599 --> 00:36:48,000
again the question that um how much can

1027
00:36:48,000 --> 00:36:49,520
you trust the id card manufacturer

1028
00:36:49,520 --> 00:36:51,040
because to

1029
00:36:51,040 --> 00:36:53,119
implement this key import feature the

1030
00:36:53,119 --> 00:36:54,800
applet actually had to modify to to

1031
00:36:54,800 --> 00:36:57,040
supply this functionality right so and

1032
00:36:57,040 --> 00:36:58,880
the same way the id card manufacturer

1033
00:36:58,880 --> 00:37:01,119
could help modify the applet to export

1034
00:37:01,119 --> 00:37:02,960
the private keys after they are

1035
00:37:02,960 --> 00:37:04,800
generated right so this really doesn't

1036
00:37:04,800 --> 00:37:06,720
tell us whether there are copies of the

1037
00:37:06,720 --> 00:37:09,040
private keys somewhere or not

1038
00:37:09,040 --> 00:37:11,200
that this is a trust issue here

1039
00:37:11,200 --> 00:37:12,640
next question

1040
00:37:12,640 --> 00:37:15,440
uh hey uh you mentioned doing research

1041
00:37:15,440 --> 00:37:17,839
with like coup bank and arvad and trying

1042
00:37:17,839 --> 00:37:19,760
to kind of submit uh

1043
00:37:19,760 --> 00:37:21,520
authentication material that maybe

1044
00:37:21,520 --> 00:37:23,680
wasn't valid so to say

1045
00:37:23,680 --> 00:37:26,160
uh how did you feel during this research

1046
00:37:26,160 --> 00:37:28,480
legally speaking did you gather consent

1047
00:37:28,480 --> 00:37:30,400
before or were you protected under

1048
00:37:30,400 --> 00:37:32,960
something or did you just yell it

1049
00:37:32,960 --> 00:37:34,000
um

1050
00:37:34,000 --> 00:37:36,400
no legal con no consent from the parties

1051
00:37:36,400 --> 00:37:38,320
involved uh so what was basically done

1052
00:37:38,320 --> 00:37:40,640
is that the the fake certificate is

1053
00:37:40,640 --> 00:37:43,040
generated and

1054
00:37:43,040 --> 00:37:44,880
we just try to click on the button log

1055
00:37:44,880 --> 00:37:46,240
in with eddy card and see whether we are

1056
00:37:46,240 --> 00:37:47,599
letting

1057
00:37:47,599 --> 00:37:48,720
and

1058
00:37:48,720 --> 00:37:51,440
now the question is whether uh this type

1059
00:37:51,440 --> 00:37:53,680
of testing requires the

1060
00:37:53,680 --> 00:37:57,200
the consent but uh

1061
00:37:57,200 --> 00:37:59,040
this is a discretable

1062
00:37:59,040 --> 00:38:01,040
object here and i'm very much like

1063
00:38:01,040 --> 00:38:02,720
should i like to discuss these things

1064
00:38:02,720 --> 00:38:05,680
but in this case new uh

1065
00:38:05,680 --> 00:38:07,200
we just went and tested it out with the

1066
00:38:07,200 --> 00:38:09,280
service providers we considered uh

1067
00:38:09,280 --> 00:38:11,119
important to be test ticket against this

1068
00:38:11,119 --> 00:38:13,359
fall

1069
00:38:13,599 --> 00:38:15,839
so i'm wondering from the human side

1070
00:38:15,839 --> 00:38:18,400
that toivo you mentioned like what was

1071
00:38:18,400 --> 00:38:20,160
his first reaction when you reached out

1072
00:38:20,160 --> 00:38:22,400
to him was he like what kind of hacker

1073
00:38:22,400 --> 00:38:23,920
are you what are you doing or did he

1074
00:38:23,920 --> 00:38:26,160
understand did he have any background in

1075
00:38:26,160 --> 00:38:27,680
i.t

1076
00:38:27,680 --> 00:38:29,599
right so

1077
00:38:29,599 --> 00:38:33,040
the case we stole was that

1078
00:38:33,040 --> 00:38:34,240
of course when i approached him first

1079
00:38:34,240 --> 00:38:36,320
time i approached him over email and i

1080
00:38:36,320 --> 00:38:37,440
explained

1081
00:38:37,440 --> 00:38:39,599
to some level the that i'm doing this

1082
00:38:39,599 --> 00:38:41,680
research and that it would be very great

1083
00:38:41,680 --> 00:38:43,280
if he could participate in experiment

1084
00:38:43,280 --> 00:38:44,480
now

1085
00:38:44,480 --> 00:38:47,119
i didn't disclose to him that we will be

1086
00:38:47,119 --> 00:38:49,200
forging a digital signature in the name

1087
00:38:49,200 --> 00:38:51,040
of fool

1088
00:38:51,040 --> 00:38:54,320
but i but i assured him that this

1089
00:38:54,320 --> 00:38:56,079
experiment doesn't involve any damaging

1090
00:38:56,079 --> 00:38:58,960
consequences for for his security

1091
00:38:58,960 --> 00:39:01,520
uh because okay so if i actually did

1092
00:39:01,520 --> 00:39:03,599
tell him that you know your id card can

1093
00:39:03,599 --> 00:39:04,800
be used to forge other person's

1094
00:39:04,800 --> 00:39:06,720
signature maybe that wouldn't be uh the

1095
00:39:06,720 --> 00:39:09,359
right thing to do right um but yeah of

1096
00:39:09,359 --> 00:39:11,839
course i i will approach him with also

1097
00:39:11,839 --> 00:39:13,680
the same credentials i said that i'm a

1098
00:39:13,680 --> 00:39:15,520
phd student researching this topic and

1099
00:39:15,520 --> 00:39:17,360
apparently he deemed me

1100
00:39:17,360 --> 00:39:18,960
[Music]

1101
00:39:18,960 --> 00:39:20,480
trustable enough to to run this

1102
00:39:20,480 --> 00:39:22,400
executable of this computer but all to

1103
00:39:22,400 --> 00:39:24,079
be honest we're running executables

1104
00:39:24,079 --> 00:39:25,680
provided by different entities all the

1105
00:39:25,680 --> 00:39:28,560
time right and then uh yeah so maybe i'm

1106
00:39:28,560 --> 00:39:29,839
not so

1107
00:39:29,839 --> 00:39:33,200
real party to not run this yeah

1108
00:39:33,200 --> 00:39:36,320
a follow-up question uh also about this

1109
00:39:36,320 --> 00:39:39,119
certificate collision because all those

1110
00:39:39,119 --> 00:39:41,760
public certificates are associated with

1111
00:39:41,760 --> 00:39:45,440
a personal id and they are published

1112
00:39:45,440 --> 00:39:47,599
in the central registry what is the

1113
00:39:47,599 --> 00:39:50,000
probabilistic theory says if you

1114
00:39:50,000 --> 00:39:52,640
generate a certificate in chip what is

1115
00:39:52,640 --> 00:39:54,720
the what is the

1116
00:39:54,720 --> 00:39:56,640
what the theory says how

1117
00:39:56,640 --> 00:39:57,520
uh

1118
00:39:57,520 --> 00:40:00,720
is it possible to generate again two uh

1119
00:40:00,720 --> 00:40:03,760
uh similar uh certificates but now that

1120
00:40:03,760 --> 00:40:05,839
reside on different ships right right

1121
00:40:05,839 --> 00:40:08,480
very good point so there has been a case

1122
00:40:08,480 --> 00:40:11,200
in the history this was about taiwanese

1123
00:40:11,200 --> 00:40:13,200
uh identity cards where the chips

1124
00:40:13,200 --> 00:40:15,040
actually had a faulty random number

1125
00:40:15,040 --> 00:40:17,040
generator and indeed there was a case

1126
00:40:17,040 --> 00:40:19,200
that different cards contained not

1127
00:40:19,200 --> 00:40:21,280
exactly the same keys but one of the one

1128
00:40:21,280 --> 00:40:22,800
of the prime numbers was the same for

1129
00:40:22,800 --> 00:40:25,760
these cards and indeed uh this this

1130
00:40:25,760 --> 00:40:28,079
hypothesis was not uh disregarded uh

1131
00:40:28,079 --> 00:40:29,839
from the outset that indeed it could

1132
00:40:29,839 --> 00:40:33,520
have been that the the the the

1133
00:40:33,520 --> 00:40:34,720
there's always a coincidence that two

1134
00:40:34,720 --> 00:40:36,319
random numbers are the same right but of

1135
00:40:36,319 --> 00:40:38,160
course if the run if the numbers are

1136
00:40:38,160 --> 00:40:40,240
large enough uh and that they're indeed

1137
00:40:40,240 --> 00:40:41,839
random then this probably should be

1138
00:40:41,839 --> 00:40:43,680
negligible that's it as negligible

1139
00:40:43,680 --> 00:40:45,599
actually being able to just guess these

1140
00:40:45,599 --> 00:40:47,119
prime numbers right

1141
00:40:47,119 --> 00:40:50,319
so uh but that what was of course very

1142
00:40:50,319 --> 00:40:53,359
specific here is that these certificates

1143
00:40:53,359 --> 00:40:57,520
were generated in a

1144
00:40:58,240 --> 00:41:00,319
very close a few second difference from

1145
00:41:00,319 --> 00:41:02,240
each other and as we later established

1146
00:41:02,240 --> 00:41:04,160
that these are actually this the common

1147
00:41:04,160 --> 00:41:05,440
thing about this certificate is that

1148
00:41:05,440 --> 00:41:07,920
they were obtained in the id card

1149
00:41:07,920 --> 00:41:10,400
renewal process then i pretty much

1150
00:41:10,400 --> 00:41:11,680
pointed

1151
00:41:11,680 --> 00:41:14,000
the the finger that most likely these

1152
00:41:14,000 --> 00:41:16,079
keys haven't been generated inside the

1153
00:41:16,079 --> 00:41:17,440
chip right so that would be too much of

1154
00:41:17,440 --> 00:41:20,520
a coincidence

1155
00:41:21,200 --> 00:41:22,720
and generally cannot rule it out indeed

1156
00:41:22,720 --> 00:41:24,079
and but

1157
00:41:24,079 --> 00:41:26,480
of course well no in in some sense we

1158
00:41:26,480 --> 00:41:27,280
have a

1159
00:41:27,280 --> 00:41:29,040
security certification for random number

1160
00:41:29,040 --> 00:41:30,720
generators that are being used on the

1161
00:41:30,720 --> 00:41:33,040
cards right and and stuff but in the

1162
00:41:33,040 --> 00:41:34,480
time in each case this actually didn't

1163
00:41:34,480 --> 00:41:35,680
help so yeah in general it cannot be

1164
00:41:35,680 --> 00:41:37,599
rolled out but

1165
00:41:37,599 --> 00:41:39,040
it's there that this is the reason why

1166
00:41:39,040 --> 00:41:40,640
there had to be some

1167
00:41:40,640 --> 00:41:42,560
some additional evidence found

1168
00:41:42,560 --> 00:41:44,400
determined proof that the keys were

1169
00:41:44,400 --> 00:41:45,599
actually generated outside the card

1170
00:41:45,599 --> 00:41:48,480
right so we couldn't just uh kick uh

1171
00:41:48,480 --> 00:41:49,920
open the doors of the edicar

1172
00:41:49,920 --> 00:41:51,839
manufacturer and inspect the source code

1173
00:41:51,839 --> 00:41:53,119
of the live system what it is actually

1174
00:41:53,119 --> 00:41:55,200
doing although maybe to some extent we

1175
00:41:55,200 --> 00:41:57,359
should have done it i mean not we but

1176
00:41:57,359 --> 00:41:59,280
someone should have done it right so all

1177
00:41:59,280 --> 00:42:01,280
we could do we could uh obtain some

1178
00:42:01,280 --> 00:42:02,880
evidence using the public information

1179
00:42:02,880 --> 00:42:06,560
which actually was the case in this case

1180
00:42:12,000 --> 00:42:14,000
thank you so much for being a watch talk

1181
00:42:14,000 --> 00:42:16,560
on the sterling government and like

1182
00:42:16,560 --> 00:42:18,480
technical agencies for like years and

1183
00:42:18,480 --> 00:42:19,680
years now

1184
00:42:19,680 --> 00:42:21,680
and i also say that you are like a prime

1185
00:42:21,680 --> 00:42:24,480
example of how mathematics can be used

1186
00:42:24,480 --> 00:42:25,839
to actually keep watch of the

1187
00:42:25,839 --> 00:42:27,119
organizations

1188
00:42:27,119 --> 00:42:29,119
but i have a question uh estonian united

1189
00:42:29,119 --> 00:42:30,640
cards were one of them may be the first

1190
00:42:30,640 --> 00:42:31,920
but now there are many countries who are

1191
00:42:31,920 --> 00:42:33,839
doing similar projects what do you think

1192
00:42:33,839 --> 00:42:36,240
what is like the technical control level

1193
00:42:36,240 --> 00:42:37,520
of those countries do they have like

1194
00:42:37,520 --> 00:42:39,280
their own ordinances who are keeping

1195
00:42:39,280 --> 00:42:41,040
tabs on what they do

1196
00:42:41,040 --> 00:42:42,640
right and i think this is really a

1197
00:42:42,640 --> 00:42:44,800
really good point and i mean in

1198
00:42:44,800 --> 00:42:46,560
comparison with id schemes in other

1199
00:42:46,560 --> 00:42:48,240
countries

1200
00:42:48,240 --> 00:42:52,000
it might as well be the fact that about

1201
00:42:52,000 --> 00:42:54,000
the developments in other deployments in

1202
00:42:54,000 --> 00:42:55,280
other countries we simply don't know

1203
00:42:55,280 --> 00:42:56,880
that where these keys are collected and

1204
00:42:56,880 --> 00:42:59,920
stored right but in the case of estonian

1205
00:42:59,920 --> 00:43:01,599
id card there is some evidence that

1206
00:43:01,599 --> 00:43:03,920
actually

1207
00:43:03,920 --> 00:43:05,599
the trust model that we fully trust the

1208
00:43:05,599 --> 00:43:07,119
id card manufacturer

1209
00:43:07,119 --> 00:43:09,200
that we but we enforce the security

1210
00:43:09,200 --> 00:43:11,200
through contractual clauses because they

1211
00:43:11,200 --> 00:43:12,720
promise to provide the security this is

1212
00:43:12,720 --> 00:43:15,119
our security guarantee uh this that this

1213
00:43:15,119 --> 00:43:17,359
actually may not work always right in

1214
00:43:17,359 --> 00:43:19,520
practice and what i also was telling

1215
00:43:19,520 --> 00:43:20,880
that i mean

1216
00:43:20,880 --> 00:43:22,319
when i started actually this research

1217
00:43:22,319 --> 00:43:23,760
and i started off the questions how are

1218
00:43:23,760 --> 00:43:25,839
the keys generated what are the

1219
00:43:25,839 --> 00:43:28,480
practical security measures in place to

1220
00:43:28,480 --> 00:43:30,560
prevent the id card manufacturer for

1221
00:43:30,560 --> 00:43:32,160
collecting the private keys of all

1222
00:43:32,160 --> 00:43:34,000
estonians then

1223
00:43:34,000 --> 00:43:35,760
pretty much the answer was i got was

1224
00:43:35,760 --> 00:43:37,280
first answer was there are security

1225
00:43:37,280 --> 00:43:39,680
audits done right and the second answer

1226
00:43:39,680 --> 00:43:42,079
was that uh this is the business of

1227
00:43:42,079 --> 00:43:43,839
trust right so these id card

1228
00:43:43,839 --> 00:43:46,079
manufacturers are huge companies with a

1229
00:43:46,079 --> 00:43:49,839
billion whatever dollar revenues and

1230
00:43:49,839 --> 00:43:51,520
and they most likely would never risk

1231
00:43:51,520 --> 00:43:52,880
with their reputation doing something

1232
00:43:52,880 --> 00:43:55,599
like this right and these both things uh

1233
00:43:55,599 --> 00:43:57,920
turned out to not hold in practice here

1234
00:43:57,920 --> 00:44:00,000
right so indeed if to answer about the

1235
00:44:00,000 --> 00:44:01,200
the developments in other countries we

1236
00:44:01,200 --> 00:44:03,200
simply we simply don't know but i think

1237
00:44:03,200 --> 00:44:05,359
this is a good lesson also to learn for

1238
00:44:05,359 --> 00:44:06,720
the sake of deployments in other

1239
00:44:06,720 --> 00:44:08,480
countries about these trust issues and

1240
00:44:08,480 --> 00:44:10,000
how much can you trust the id card

1241
00:44:10,000 --> 00:44:11,599
manufacturer

1242
00:44:11,599 --> 00:44:13,599
regarding the process

1243
00:44:13,599 --> 00:44:16,240
as actually the state must be in

1244
00:44:16,240 --> 00:44:18,720
governance of the process

1245
00:44:18,720 --> 00:44:20,319
how do you feel

1246
00:44:20,319 --> 00:44:21,359
is

1247
00:44:21,359 --> 00:44:24,480
and state government like been improved

1248
00:44:24,480 --> 00:44:26,960
uh can you see some improvements uh

1249
00:44:26,960 --> 00:44:29,839
regarding uh uh monitoring the security

1250
00:44:29,839 --> 00:44:31,839
audits performing the security audits as

1251
00:44:31,839 --> 00:44:33,680
needed and so on what what what is your

1252
00:44:33,680 --> 00:44:35,760
feeling about this right so now first of

1253
00:44:35,760 --> 00:44:37,839
all i think it's actually a good uh

1254
00:44:37,839 --> 00:44:39,839
thing in a way that for example this

1255
00:44:39,839 --> 00:44:41,920
edema platform uh which the latest

1256
00:44:41,920 --> 00:44:44,640
platform has passed a formal and not so

1257
00:44:44,640 --> 00:44:47,200
formal security assessment right so

1258
00:44:47,200 --> 00:44:48,880
that's actually a good thing although

1259
00:44:48,880 --> 00:44:50,960
even with that platform there were some

1260
00:44:50,960 --> 00:44:53,760
non-compliances that that showed up

1261
00:44:53,760 --> 00:44:55,920
um now

1262
00:44:55,920 --> 00:44:58,160
has there anything changed uh based on

1263
00:44:58,160 --> 00:44:59,440
these findings

1264
00:44:59,440 --> 00:45:02,160
i unfortunately i don't i don't see any

1265
00:45:02,160 --> 00:45:04,400
fundamental changes in organization of

1266
00:45:04,400 --> 00:45:06,160
the of the

1267
00:45:06,160 --> 00:45:08,079
um

1268
00:45:08,079 --> 00:45:10,240
of these processes

1269
00:45:10,240 --> 00:45:12,240
i mean but but you can ask what the

1270
00:45:12,240 --> 00:45:14,000
state could do right uh

1271
00:45:14,000 --> 00:45:16,720
could there be a policeman with a dog uh

1272
00:45:16,720 --> 00:45:19,920
like observing this process or or or

1273
00:45:19,920 --> 00:45:22,000
this task has been outsourced to the

1274
00:45:22,000 --> 00:45:24,319
private entity and also the security in

1275
00:45:24,319 --> 00:45:25,920
that sense has been outsourced to them

1276
00:45:25,920 --> 00:45:27,440
right and

1277
00:45:27,440 --> 00:45:29,599
no

1278
00:45:30,720 --> 00:45:32,560
of course the the thing which i'm

1279
00:45:32,560 --> 00:45:34,880
advocating for is to

1280
00:45:34,880 --> 00:45:37,359
change the design or architecture of the

1281
00:45:37,359 --> 00:45:39,440
solution in a way that

1282
00:45:39,440 --> 00:45:40,160
the

1283
00:45:40,160 --> 00:45:42,000
uh the the let's say using threshold

1284
00:45:42,000 --> 00:45:43,839
cryptography as it's done in smart id

1285
00:45:43,839 --> 00:45:46,560
when the key is shared between the

1286
00:45:46,560 --> 00:45:50,160
the server and the the the user's mobile

1287
00:45:50,160 --> 00:45:52,160
phone right so there can be a

1288
00:45:52,160 --> 00:45:54,160
cryptographic solutions to decrease the

1289
00:45:54,160 --> 00:45:56,160
trust level required for this and i

1290
00:45:56,160 --> 00:45:58,000
think this is the correct uh way to

1291
00:45:58,000 --> 00:46:00,079
deliver to the research further but of

1292
00:46:00,079 --> 00:46:02,000
course this is not an easy like uh

1293
00:46:02,000 --> 00:46:03,920
switching the flag and and and running

1294
00:46:03,920 --> 00:46:05,440
these requires for the research and

1295
00:46:05,440 --> 00:46:07,599
there has to be also you know political

1296
00:46:07,599 --> 00:46:09,920
and non-political motivation to to to

1297
00:46:09,920 --> 00:46:11,930
try to improve this i don't know maybe

1298
00:46:11,930 --> 00:46:13,680
[Music]

1299
00:46:13,680 --> 00:46:15,119
yeah i mean the very really really good

1300
00:46:15,119 --> 00:46:16,960
question you can ask each of you can ask

1301
00:46:16,960 --> 00:46:18,560
yourself what would you do if you were

1302
00:46:18,560 --> 00:46:20,000
in the in the shoes of the of state

1303
00:46:20,000 --> 00:46:22,640
authorities how to ensure it and what i

1304
00:46:22,640 --> 00:46:24,640
have actually in this research i have i

1305
00:46:24,640 --> 00:46:27,200
got the feeling that

1306
00:46:27,200 --> 00:46:30,640
the authorities actually do not want to

1307
00:46:30,640 --> 00:46:32,079
even know

1308
00:46:32,079 --> 00:46:34,240
what's how these sausages are made

1309
00:46:34,240 --> 00:46:36,800
because by by this knowledge they would

1310
00:46:36,800 --> 00:46:38,560
be

1311
00:46:38,560 --> 00:46:40,800
liable to act somehow and therefore it's

1312
00:46:40,800 --> 00:46:43,119
actually very nice that oh this risk has

1313
00:46:43,119 --> 00:46:45,200
been what is risk transferred yeah this

1314
00:46:45,200 --> 00:46:46,640
risk has been transferred we have solved

1315
00:46:46,640 --> 00:46:49,119
the the the risk right

1316
00:46:49,119 --> 00:46:52,560
so that's that's how i see it

1317
00:46:54,640 --> 00:46:58,240
all right thank you martin yes

1318
00:46:58,240 --> 00:46:59,520
yes

1319
00:46:59,520 --> 00:47:02,640
yeah thank you yeah

1320
00:47:02,640 --> 00:47:06,078
i'll hand it over here

1321
00:47:06,160 --> 00:47:08,319
i have a really easy question

1322
00:47:08,319 --> 00:47:10,640
which agency in the estonian government

1323
00:47:10,640 --> 00:47:12,880
is responsible to ensure that those

1324
00:47:12,880 --> 00:47:15,359
things are correct

1325
00:47:15,359 --> 00:47:16,240
uh

1326
00:47:16,240 --> 00:47:18,240
from the outset it seems to be estonian

1327
00:47:18,240 --> 00:47:21,520
information system authority

1328
00:47:21,599 --> 00:47:22,400
uh

1329
00:47:22,400 --> 00:47:24,400
i mean the responsibility for the for

1330
00:47:24,400 --> 00:47:26,160
the id card

1331
00:47:26,160 --> 00:47:28,240
uh electronic chip of id card and this

1332
00:47:28,240 --> 00:47:29,440
is somewhere written in the in the

1333
00:47:29,440 --> 00:47:31,280
government regulation

1334
00:47:31,280 --> 00:47:32,319
yeah

1335
00:47:32,319 --> 00:47:34,079
but of course i would say actually that

1336
00:47:34,079 --> 00:47:35,280
this is uh

1337
00:47:35,280 --> 00:47:36,480
i mean this

1338
00:47:36,480 --> 00:47:38,800
personally i think that that that the

1339
00:47:38,800 --> 00:47:40,559
the fact that the private key copies

1340
00:47:40,559 --> 00:47:42,480
perhaps are stored somewhere in some

1341
00:47:42,480 --> 00:47:43,760
backend servers

1342
00:47:43,760 --> 00:47:46,640
this is i would say the

1343
00:47:46,640 --> 00:47:49,200
state security issue yeah well after all

1344
00:47:49,200 --> 00:47:51,040
we are voting with these cards right so

1345
00:47:51,040 --> 00:47:52,720
with this private key so

1346
00:47:52,720 --> 00:47:54,079
um

1347
00:47:54,079 --> 00:47:55,920
yeah that's that's that's that's would

1348
00:47:55,920 --> 00:47:58,000
be my answer

1349
00:47:58,000 --> 00:48:00,559
i let's ask one question you

1350
00:48:00,559 --> 00:48:02,319
were already commenting on

1351
00:48:02,319 --> 00:48:04,079
how the things are done in other

1352
00:48:04,079 --> 00:48:05,280
countries and

1353
00:48:05,280 --> 00:48:07,680
said that probably nobody knows but has

1354
00:48:07,680 --> 00:48:09,680
there been interest

1355
00:48:09,680 --> 00:48:12,800
for your work so is there a line of uh

1356
00:48:12,800 --> 00:48:14,480
different eu countries

1357
00:48:14,480 --> 00:48:17,599
waiting for thing in the line right yeah

1358
00:48:17,599 --> 00:48:18,880
no but

1359
00:48:18,880 --> 00:48:21,040
i think that's also understandable uh

1360
00:48:21,040 --> 00:48:23,200
the less

1361
00:48:23,200 --> 00:48:25,760
the less focus uh the less probability

1362
00:48:25,760 --> 00:48:28,000
to find something ugly there right so

1363
00:48:28,000 --> 00:48:29,440
um

1364
00:48:29,440 --> 00:48:32,720
and yes of course i have dedicated a

1365
00:48:32,720 --> 00:48:34,240
significant part of my life actually to

1366
00:48:34,240 --> 00:48:36,319
research the estonian id card ecosystem

1367
00:48:36,319 --> 00:48:39,440
and the solutions used here and

1368
00:48:39,440 --> 00:48:40,880
i would even say that i'm not actually

1369
00:48:40,880 --> 00:48:43,280
interested to to to switch and look uh

1370
00:48:43,280 --> 00:48:45,599
for the the the security research

1371
00:48:45,599 --> 00:48:48,000
outside estonia at least currently

1372
00:48:48,000 --> 00:48:49,440
okay

1373
00:48:49,440 --> 00:48:51,040
any more questions we can probably have

1374
00:48:51,040 --> 00:48:53,119
one small short question

1375
00:48:53,119 --> 00:48:54,800
yeah there is on the back i don't care

1376
00:48:54,800 --> 00:48:57,040
there

1377
00:49:00,319 --> 00:49:01,119
hi

1378
00:49:01,119 --> 00:49:04,079
hi i have a question regarding this

1379
00:49:04,079 --> 00:49:06,640
radical transparency by estonian

1380
00:49:06,640 --> 00:49:08,800
authorities so uh

1381
00:49:08,800 --> 00:49:11,760
your expert opinion on is it possible to

1382
00:49:11,760 --> 00:49:14,319
create cover identities

1383
00:49:14,319 --> 00:49:17,200
with this scheme when all the

1384
00:49:17,200 --> 00:49:20,000
certificates are made public

1385
00:49:20,000 --> 00:49:20,960
um

1386
00:49:20,960 --> 00:49:22,640
now indeed if you look at the estonian

1387
00:49:22,640 --> 00:49:24,400
uh example you can see that they're all

1388
00:49:24,400 --> 00:49:26,800
public basically that the population

1389
00:49:26,800 --> 00:49:29,359
register is public of estonia right in a

1390
00:49:29,359 --> 00:49:32,240
way and any if you see in some other

1391
00:49:32,240 --> 00:49:34,240
countries like germany where they are

1392
00:49:34,240 --> 00:49:36,720
talking about these authentication

1393
00:49:36,720 --> 00:49:38,720
schemes which would just disclose some

1394
00:49:38,720 --> 00:49:40,960
properties about you whether you are

1395
00:49:40,960 --> 00:49:43,440
adult or minor you know and there is a

1396
00:49:43,440 --> 00:49:46,240
there is a big contrast here indeed uh

1397
00:49:46,240 --> 00:49:47,760
whether i would uh

1398
00:49:47,760 --> 00:49:50,000
[Music]

1399
00:49:50,000 --> 00:49:52,800
be advocating for these type of privacy

1400
00:49:52,800 --> 00:49:54,880
pursuing authentication schemes most

1401
00:49:54,880 --> 00:49:56,079
likely not because they are quite

1402
00:49:56,079 --> 00:49:58,400
complicated and what i also see from

1403
00:49:58,400 --> 00:50:00,400
this research of course the complexities

1404
00:50:00,400 --> 00:50:02,079
is not always the friend of the security

1405
00:50:02,079 --> 00:50:03,200
so

1406
00:50:03,200 --> 00:50:04,480
even if they provide maybe some nice

1407
00:50:04,480 --> 00:50:07,520
security features unfortunately

1408
00:50:07,520 --> 00:50:09,520
unfortunately i think that the biggest

1409
00:50:09,520 --> 00:50:11,280
privacy risk is what we what we heard in

1410
00:50:11,280 --> 00:50:14,160
the first session today is that actually

1411
00:50:14,160 --> 00:50:15,440
our data is stored in the servers which

1412
00:50:15,440 --> 00:50:17,520
are not well protected that that i see

1413
00:50:17,520 --> 00:50:19,520
the much bigger privacy issue than

1414
00:50:19,520 --> 00:50:20,960
passing around your personal identity

1415
00:50:20,960 --> 00:50:24,920
code in authentication tokens

1416
00:50:26,800 --> 00:50:28,880
you

