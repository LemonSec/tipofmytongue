1
00:00:01,079 --> 00:00:04,160
so we are still on the line of having

2
00:00:04,160 --> 00:00:07,500
Legends on stage people who have been

3
00:00:07,500 --> 00:00:13,099
doing uh cybering for long and long time

4
00:00:13,099 --> 00:00:15,900
next presenter comes to us from uh

5
00:00:15,900 --> 00:00:17,779
Finland

6
00:00:17,779 --> 00:00:20,939
who's going to talk about finding

7
00:00:20,939 --> 00:00:23,939
vulnerabilities in Mac OS we do know

8
00:00:23,939 --> 00:00:26,820
that Macos OS is completely not

9
00:00:26,820 --> 00:00:29,279
vulnerable to anything it sees the very

10
00:00:29,279 --> 00:00:32,700
secure thing so how is it possible to

11
00:00:32,700 --> 00:00:35,399
find something there that's what we are

12
00:00:35,399 --> 00:00:40,800
going here during the next 45 minutes

13
00:00:45,180 --> 00:00:47,840
wait wait

14
00:00:47,840 --> 00:00:50,929
[Music]

15
00:00:55,170 --> 00:00:57,800
[Music]

16
00:00:57,800 --> 00:01:02,218
these signs Legacy

17
00:01:02,399 --> 00:01:05,059
hello

18
00:01:05,220 --> 00:01:07,920
hello fellow hackers

19
00:01:07,920 --> 00:01:11,360
it's good to be over here I'm

20
00:01:11,360 --> 00:01:14,760
uh really honored to see that there's so

21
00:01:14,760 --> 00:01:16,500
many of you over here

22
00:01:16,500 --> 00:01:19,280
uh

23
00:01:19,979 --> 00:01:24,659
I want to give a round of applause for

24
00:01:24,659 --> 00:01:26,640
all the organizations and also the

25
00:01:26,640 --> 00:01:29,280
sponsors May sponsors to make this event

26
00:01:29,280 --> 00:01:31,520
happen so let's do that

27
00:01:31,520 --> 00:01:36,900
[Applause]

28
00:01:36,900 --> 00:01:39,900
all right so I'm going to talk about uh

29
00:01:39,900 --> 00:01:43,020
Mac OS some Mac OS vulnerabilities and

30
00:01:43,020 --> 00:01:45,600
walk you through uh what was happening

31
00:01:45,600 --> 00:01:49,439
under the hood uh when I found a couple

32
00:01:49,439 --> 00:01:51,439
of interesting

33
00:01:51,439 --> 00:01:55,320
vulnerabilities but before that a little

34
00:01:55,320 --> 00:01:56,659
bit about me

35
00:01:56,659 --> 00:02:00,840
so my name is Mikko cantala I'm a

36
00:02:00,840 --> 00:02:05,880
founder and CEO of sensorflow uh we do a

37
00:02:05,880 --> 00:02:08,038
product which continuously monitors at

38
00:02:08,038 --> 00:02:09,720
how well the network isolation is

39
00:02:09,720 --> 00:02:11,760
working but I'm not going to talk about

40
00:02:11,760 --> 00:02:13,520
that today

41
00:02:13,520 --> 00:02:17,580
I'm more going to talk about the my

42
00:02:17,580 --> 00:02:21,300
happy hacker hobby project which which

43
00:02:21,300 --> 00:02:23,640
is related to the vulnerable one

44
00:02:23,640 --> 00:02:26,640
vulnerability research I have multiple

45
00:02:26,640 --> 00:02:29,400
hats in other organizations but the and

46
00:02:29,400 --> 00:02:32,660
you can find me from the Twitter

47
00:02:32,660 --> 00:02:37,400
previously I did done research

48
00:02:37,400 --> 00:02:41,400
I started to do some research related to

49
00:02:41,400 --> 00:02:44,040
the Mac OS when I got a little bit more

50
00:02:44,040 --> 00:02:47,879
time during the 2020 because of obvious

51
00:02:47,879 --> 00:02:51,599
reasons so I had more I didn't travel so

52
00:02:51,599 --> 00:02:54,300
much and had a bit more time to do and

53
00:02:54,300 --> 00:02:55,860
check out some of the things what I used

54
00:02:55,860 --> 00:02:59,120
myself so I've been doing this since the

55
00:02:59,120 --> 00:03:02,580
well forever that the whatever software

56
00:03:02,580 --> 00:03:05,280
or operating system or applications I am

57
00:03:05,280 --> 00:03:08,940
using I tend to check out that the uh

58
00:03:08,940 --> 00:03:10,920
what is actually going on under the hood

59
00:03:10,920 --> 00:03:13,680
and what might be maybe there's some

60
00:03:13,680 --> 00:03:15,900
security challenges and I want to really

61
00:03:15,900 --> 00:03:18,540
know that how the things work I've done

62
00:03:18,540 --> 00:03:19,920
uh

63
00:03:19,920 --> 00:03:22,560
secure technical security audits as a

64
00:03:22,560 --> 00:03:24,959
profession over 10 years so maybe I'm

65
00:03:24,959 --> 00:03:27,360
not doing those that much anymore but

66
00:03:27,360 --> 00:03:29,760
the maybe that has something to do with

67
00:03:29,760 --> 00:03:33,959
it so previously I found on uh zero

68
00:03:33,959 --> 00:03:37,260
click vulnerability from the Mac OS mail

69
00:03:37,260 --> 00:03:40,080
and you get mail application uh and you

70
00:03:40,080 --> 00:03:42,959
can find the right I've wrote about it

71
00:03:42,959 --> 00:03:45,239
you can find the block from there but

72
00:03:45,239 --> 00:03:48,120
basically what that vulnerability was

73
00:03:48,120 --> 00:03:51,780
about was that I was able to craft an

74
00:03:51,780 --> 00:03:54,239
email as an attacker and send it to the

75
00:03:54,239 --> 00:03:57,840
victim and after immediately after the

76
00:03:57,840 --> 00:04:00,319
victim received the email

77
00:04:00,319 --> 00:04:05,580
the email his his mail application

78
00:04:05,580 --> 00:04:08,040
configuration changed in a way that

79
00:04:08,040 --> 00:04:10,739
after that all the emails were also

80
00:04:10,739 --> 00:04:13,560
forwarded to me so that was arbitrary

81
00:04:13,560 --> 00:04:18,418
file right issue in the Mac OS mail

82
00:04:18,418 --> 00:04:21,959
so but uh this time I'm going to talk

83
00:04:21,959 --> 00:04:24,360
about a little bit different case it is

84
00:04:24,360 --> 00:04:27,120
actually a bit more complicated in the

85
00:04:27,120 --> 00:04:29,460
sense that it includes vulnerability

86
00:04:29,460 --> 00:04:32,880
chain what I needed to explore exploit

87
00:04:32,880 --> 00:04:36,060
to gain the uh access to all the

88
00:04:36,060 --> 00:04:38,460
sensitive data that the user might have

89
00:04:38,460 --> 00:04:40,680
I also walk you through about the

90
00:04:40,680 --> 00:04:42,960
different security methods what actually

91
00:04:42,960 --> 00:04:46,800
is implemented in Mac OS and and I

92
00:04:46,800 --> 00:04:48,780
needed to circulate those to actually

93
00:04:48,780 --> 00:04:53,220
achieve the goal goal so I saw you on

94
00:04:53,220 --> 00:04:55,259
video This is actually the same video

95
00:04:55,259 --> 00:04:58,860
where I sent to the Apple uh so it's the

96
00:04:58,860 --> 00:05:02,340
original uh version of the video to

97
00:05:02,340 --> 00:05:04,800
prove that there's some challenges

98
00:05:04,800 --> 00:05:06,600
and I'm going to walk you through that

99
00:05:06,600 --> 00:05:10,320
what's what's happening on this video so

100
00:05:10,320 --> 00:05:13,080
during that time Pixar was out there or

101
00:05:13,080 --> 00:05:16,500
it's in the beta phase uh I just saw you

102
00:05:16,500 --> 00:05:18,780
that I have all the security mechanics

103
00:05:18,780 --> 00:05:21,180
implemented in a way that it is enabled

104
00:05:21,180 --> 00:05:24,840
so uh even there if even if you open a

105
00:05:24,840 --> 00:05:27,780
terminal you cannot access the files on

106
00:05:27,780 --> 00:05:29,580
that on your desktop or in the other

107
00:05:29,580 --> 00:05:31,380
folders because there's a restrictions

108
00:05:31,380 --> 00:05:32,400
for that

109
00:05:32,400 --> 00:05:36,479
so however in this case when user

110
00:05:36,479 --> 00:05:39,180
downloads a specific file from the

111
00:05:39,180 --> 00:05:42,600
internet it may be uh fishing or

112
00:05:42,600 --> 00:05:43,979
something like that but in this case

113
00:05:43,979 --> 00:05:46,560
it's like a raw demo it's downloading a

114
00:05:46,560 --> 00:05:49,860
zip file and now zip file is downloaded

115
00:05:49,860 --> 00:05:51,840
and you saw the pop-ups that do you

116
00:05:51,840 --> 00:05:53,460
really want to download it and that's

117
00:05:53,460 --> 00:05:56,280
the one click which is needed from the

118
00:05:56,280 --> 00:06:00,060
user input and next time when the user

119
00:06:00,060 --> 00:06:02,580
launches a terminal something weird will

120
00:06:02,580 --> 00:06:04,560
happen and you can see that your machine

121
00:06:04,560 --> 00:06:07,440
is owned and some databases has been

122
00:06:07,440 --> 00:06:09,419
taken and after that it seems that

123
00:06:09,419 --> 00:06:11,880
there's now a terminal can now access to

124
00:06:11,880 --> 00:06:13,259
the all the files in the different

125
00:06:13,259 --> 00:06:16,560
places so something definitely went

126
00:06:16,560 --> 00:06:20,100
wrong because that should never happen

127
00:06:20,100 --> 00:06:21,479
so

128
00:06:21,479 --> 00:06:23,160
uh

129
00:06:23,160 --> 00:06:25,560
a little bit about the background and

130
00:06:25,560 --> 00:06:29,360
how I normally operate

131
00:06:29,400 --> 00:06:32,220
so I tend to find out different

132
00:06:32,220 --> 00:06:35,060
vulnerabilities in rather simple methods

133
00:06:35,060 --> 00:06:38,400
there's three steps and with the first

134
00:06:38,400 --> 00:06:41,039
one is quite obvious that try to learn

135
00:06:41,039 --> 00:06:43,740
as much as possible and you can do that

136
00:06:43,740 --> 00:06:46,199
by reading the documentation reading

137
00:06:46,199 --> 00:06:48,600
what's written at the internet about it

138
00:06:48,600 --> 00:06:50,639
about the same thing what you are

139
00:06:50,639 --> 00:06:52,880
researching and

140
00:06:52,880 --> 00:06:55,259
especially for me the reverse

141
00:06:55,259 --> 00:06:58,139
engineering is the really key thing to

142
00:06:58,139 --> 00:07:01,020
actually find out that how different

143
00:07:01,020 --> 00:07:03,419
applications are working so I normally

144
00:07:03,419 --> 00:07:04,919
use

145
00:07:04,919 --> 00:07:07,380
softwares rather simple softwares maybe

146
00:07:07,380 --> 00:07:11,819
I'm old school guy so I use uh D trace

147
00:07:11,819 --> 00:07:14,940
for example tracing this is calls in the

148
00:07:14,940 --> 00:07:17,580
Mac OS or other systems I use DCP dump

149
00:07:17,580 --> 00:07:22,819
to see the traffic and really Advance

150
00:07:22,819 --> 00:07:25,800
analysis methods like strings to analyze

151
00:07:25,800 --> 00:07:27,900
the binaries and so on so rather simple

152
00:07:27,900 --> 00:07:30,479
things but with that combined to the

153
00:07:30,479 --> 00:07:34,020
things what I uh play around and I see

154
00:07:34,020 --> 00:07:35,699
the results what's happening under the

155
00:07:35,699 --> 00:07:38,520
hood I can make up on my mind that how

156
00:07:38,520 --> 00:07:40,620
exactly the application or the service

157
00:07:40,620 --> 00:07:43,560
is working

158
00:07:43,560 --> 00:07:45,419
uh

159
00:07:45,419 --> 00:07:48,360
find the anomaly when you know how the

160
00:07:48,360 --> 00:07:51,479
process or application actually works uh

161
00:07:51,479 --> 00:07:54,960
if there's a place is for user input so

162
00:07:54,960 --> 00:07:57,919
try to play around with the user input

163
00:07:57,919 --> 00:08:02,520
see if you can cause some anomaly under

164
00:08:02,520 --> 00:08:05,460
the hood so you have a visibility with

165
00:08:05,460 --> 00:08:08,819
the external tools for tools for it or

166
00:08:08,819 --> 00:08:10,680
maybe you get immediate feedback via

167
00:08:10,680 --> 00:08:13,740
user interface but the you try to play

168
00:08:13,740 --> 00:08:16,340
around and try to call some error or

169
00:08:16,340 --> 00:08:18,780
something like that and that might be it

170
00:08:18,780 --> 00:08:21,539
that might be the actual vulnerability

171
00:08:21,539 --> 00:08:24,300
then when you have found it

172
00:08:24,300 --> 00:08:27,060
do specific testing related to that

173
00:08:27,060 --> 00:08:31,979
anomaly and try to exploit that so

174
00:08:31,979 --> 00:08:34,559
rather straightforward as a in a

175
00:08:34,559 --> 00:08:37,380
fundamentals but might take some time to

176
00:08:37,380 --> 00:08:41,760
actually actually get it done

177
00:08:41,760 --> 00:08:43,380
so

178
00:08:43,380 --> 00:08:46,680
to achieve code execution in Mac OS with

179
00:08:46,680 --> 00:08:50,820
one click we need to really evade evade

180
00:08:50,820 --> 00:08:53,660
multiple different security mechanisms

181
00:08:53,660 --> 00:08:57,839
and I quickly walk those through so we

182
00:08:57,839 --> 00:08:59,580
need to find the anomaly we need to

183
00:08:59,580 --> 00:09:02,279
exploit it after that if we want to get

184
00:09:02,279 --> 00:09:04,019
more done we need to evade the

185
00:09:04,019 --> 00:09:07,860
gatekeeper which is uh well I explain it

186
00:09:07,860 --> 00:09:10,980
a bit later which is taking care of the

187
00:09:10,980 --> 00:09:13,980
takes care of the that what application

188
00:09:13,980 --> 00:09:17,220
should be able to run on the system uh

189
00:09:17,220 --> 00:09:20,279
there's a TCC which is taking care of

190
00:09:20,279 --> 00:09:23,459
the restrictions to and doing this

191
00:09:23,459 --> 00:09:26,940
providing the sandbox in the Mac OS and

192
00:09:26,940 --> 00:09:30,260
sip is providing

193
00:09:30,260 --> 00:09:31,880
protecting

194
00:09:31,880 --> 00:09:36,360
most important files in Mac OS based

195
00:09:36,360 --> 00:09:38,880
system and its zip protection is built

196
00:09:38,880 --> 00:09:41,580
into the kernel and the TCC is in the

197
00:09:41,580 --> 00:09:42,839
user land

198
00:09:42,839 --> 00:09:44,880
so the GateKeeper

199
00:09:44,880 --> 00:09:48,360
the main role if you use Mac OS you

200
00:09:48,360 --> 00:09:52,140
might be seeing pop-ups like these these

201
00:09:52,140 --> 00:09:55,260
are basically how you see the gatekeeper

202
00:09:55,260 --> 00:09:58,200
in action so whenever you download new

203
00:09:58,200 --> 00:10:00,600
binaries you open things that you have

204
00:10:00,600 --> 00:10:03,080
downloaded from the internet

205
00:10:03,080 --> 00:10:09,019
it is typically marked as an uh

206
00:10:09,019 --> 00:10:12,180
potentially malicious file and the

207
00:10:12,180 --> 00:10:15,000
gatekeeper will trigger this warning to

208
00:10:15,000 --> 00:10:17,880
show you that the uh I really want to

209
00:10:17,880 --> 00:10:20,459
run this and so a little bit a little

210
00:10:20,459 --> 00:10:22,440
bit of information about where you have

211
00:10:22,440 --> 00:10:25,820
downloaded it and so on

212
00:10:28,440 --> 00:10:31,800
then there's the TCC which which is

213
00:10:31,800 --> 00:10:36,240
basically controlling the sandboxing in

214
00:10:36,240 --> 00:10:38,700
the sense that you have a sensitive data

215
00:10:38,700 --> 00:10:41,160
on your system including web camera

216
00:10:41,160 --> 00:10:44,760
information location information your

217
00:10:44,760 --> 00:10:48,180
emails your files your photos there's

218
00:10:48,180 --> 00:10:51,240
the controls for all of that and TCC is

219
00:10:51,240 --> 00:10:53,060
the component which

220
00:10:53,060 --> 00:10:56,279
basically is the user interface to

221
00:10:56,279 --> 00:10:59,579
control that data so normally when you

222
00:10:59,579 --> 00:11:01,980
run your application your application is

223
00:11:01,980 --> 00:11:02,959
only

224
00:11:02,959 --> 00:11:06,839
should be only accessing the files which

225
00:11:06,839 --> 00:11:09,899
are related to that specific application

226
00:11:09,899 --> 00:11:12,660
if you need to access some files on your

227
00:11:12,660 --> 00:11:14,519
desktop or something like that you

228
00:11:14,519 --> 00:11:17,820
really need to Grant the permission for

229
00:11:17,820 --> 00:11:19,740
that application and provide the

230
00:11:19,740 --> 00:11:22,200
possibility to access the files in

231
00:11:22,200 --> 00:11:25,200
specific places this is rather good

232
00:11:25,200 --> 00:11:29,700
thing to be in to have in the Mac OS

233
00:11:29,700 --> 00:11:32,220
then there's a sip which is the system

234
00:11:32,220 --> 00:11:34,920
Integrity protection uh here's an

235
00:11:34,920 --> 00:11:38,820
example what it does so even though I

236
00:11:38,820 --> 00:11:41,940
have a file in my home directory I

237
00:11:41,940 --> 00:11:44,700
cannot access it so even though if I I

238
00:11:44,700 --> 00:11:47,160
should be the owner I and from the Unix

239
00:11:47,160 --> 00:11:49,440
BSD point of view I should have access

240
00:11:49,440 --> 00:11:53,399
to read that file that sip is protecting

241
00:11:53,399 --> 00:11:57,600
that file to be accessed by myself from

242
00:11:57,600 --> 00:11:59,660
the terminal I need to use specific

243
00:11:59,660 --> 00:12:03,420
software to get the access to that

244
00:12:03,420 --> 00:12:05,579
specific database

245
00:12:05,579 --> 00:12:09,480
so uh this is internal level so it is

246
00:12:09,480 --> 00:12:12,720
making the attacker's life quite much

247
00:12:12,720 --> 00:12:15,620
more harder

248
00:12:15,720 --> 00:12:19,320
so let's dive into the actual

249
00:12:19,320 --> 00:12:21,360
vulnerability chain now you have some

250
00:12:21,360 --> 00:12:23,640
understanding about the background in

251
00:12:23,640 --> 00:12:26,399
this phase can you raise the hand how

252
00:12:26,399 --> 00:12:29,120
many of you are actually using uh Apple

253
00:12:29,120 --> 00:12:33,920
devices or Mac OS

254
00:12:34,019 --> 00:12:37,140
all right about half of you I would say

255
00:12:37,140 --> 00:12:40,740
so quite quite too many

256
00:12:40,740 --> 00:12:45,000
so the vulnerability chain uh Alias file

257
00:12:45,000 --> 00:12:46,620
to rule them all

258
00:12:46,620 --> 00:12:48,839
so uh

259
00:12:48,839 --> 00:12:52,940
in this chain we will

260
00:12:52,940 --> 00:12:56,639
gain the access to compromise the user's

261
00:12:56,639 --> 00:12:59,459
sensitive data with the only one click

262
00:12:59,459 --> 00:13:03,180
you and meaning user interaction so when

263
00:13:03,180 --> 00:13:07,320
the user clicked once this pop-up after

264
00:13:07,320 --> 00:13:12,660
that the game is over so but in in a

265
00:13:12,660 --> 00:13:15,120
nutshell you I saw the video so when the

266
00:13:15,120 --> 00:13:18,180
user actually assets the download

267
00:13:18,180 --> 00:13:22,079
the zip file will be downloaded and and

268
00:13:22,079 --> 00:13:24,480
the Mac OS is infected and what is

269
00:13:24,480 --> 00:13:26,220
happening under the hood

270
00:13:26,220 --> 00:13:30,600
the zip file is in general considered as

271
00:13:30,600 --> 00:13:31,440
a

272
00:13:31,440 --> 00:13:35,639
save file format in a Mac OS Safari at

273
00:13:35,639 --> 00:13:37,920
least in and in also in some other

274
00:13:37,920 --> 00:13:40,320
places so what that means is that when

275
00:13:40,320 --> 00:13:42,240
that is downloaded it will be

276
00:13:42,240 --> 00:13:44,820
automatically uncompressed and extract

277
00:13:44,820 --> 00:13:47,399
to the downloads folder

278
00:13:47,399 --> 00:13:50,220
so in my case the zip file actually

279
00:13:50,220 --> 00:13:53,820
included an application with an alias

280
00:13:53,820 --> 00:13:57,180
file and this is important because

281
00:13:57,180 --> 00:14:00,779
it need to look like an application

282
00:14:00,779 --> 00:14:03,079
because

283
00:14:03,079 --> 00:14:05,100
we want to

284
00:14:05,100 --> 00:14:08,339
well I'll explain it later on but the uh

285
00:14:08,339 --> 00:14:10,980
in that zip file it's an application and

286
00:14:10,980 --> 00:14:13,860
in Mac OS the applications are just a

287
00:14:13,860 --> 00:14:16,680
bunch of directories in a certain

288
00:14:16,680 --> 00:14:19,800
structure and in instructions and the

289
00:14:19,800 --> 00:14:22,500
original binary and I did it so that the

290
00:14:22,500 --> 00:14:25,920
Alias file was the binary in that

291
00:14:25,920 --> 00:14:27,480
application

292
00:14:27,480 --> 00:14:28,920
uh

293
00:14:28,920 --> 00:14:32,519
Mac OS Alias files how many of you have

294
00:14:32,519 --> 00:14:36,600
heard about the Mac OS Alias files

295
00:14:36,600 --> 00:14:38,700
couple of you great

296
00:14:38,700 --> 00:14:40,860
it is interesting because it's mostly

297
00:14:40,860 --> 00:14:44,639
promo that in 91 when when it was

298
00:14:44,639 --> 00:14:47,639
originally introduced in the Mac OS 7.

299
00:14:47,639 --> 00:14:51,560
so quite a while ago and the biggest

300
00:14:51,560 --> 00:14:55,260
benefit with the Mac OS Alias files

301
00:14:55,260 --> 00:14:58,139
compared to the traditional links or

302
00:14:58,139 --> 00:15:01,260
Zoom links or so on is the fact that it

303
00:15:01,260 --> 00:15:03,839
is pointer for certain objective in your

304
00:15:03,839 --> 00:15:04,760
system

305
00:15:04,760 --> 00:15:09,959
object in your system so even though if

306
00:15:09,959 --> 00:15:12,120
you move the original file to different

307
00:15:12,120 --> 00:15:15,540
place all of these Alias files will be

308
00:15:15,540 --> 00:15:17,880
automatically updated also so you can

309
00:15:17,880 --> 00:15:21,240
move the uh the original filed from

310
00:15:21,240 --> 00:15:23,940
place to place and the links will still

311
00:15:23,940 --> 00:15:26,699
work or the Alias files will still work

312
00:15:26,699 --> 00:15:29,160
so it's quite an ancient history and

313
00:15:29,160 --> 00:15:32,040
still working uh well in the Mac OS

314
00:15:32,040 --> 00:15:36,000
system I rarely see this in action uh

315
00:15:36,000 --> 00:15:39,480
maybe maybe more in the if you install a

316
00:15:39,480 --> 00:15:41,820
new application to the Mac OS and you do

317
00:15:41,820 --> 00:15:44,040
the track and drop for the application

318
00:15:44,040 --> 00:15:46,260
and it points to the application folder

319
00:15:46,260 --> 00:15:47,760
that's the only case where you see it

320
00:15:47,760 --> 00:15:49,920
but you can use it for other things like

321
00:15:49,920 --> 00:15:53,839
a PDFs or so on

322
00:15:54,060 --> 00:15:57,000
so the applicants normally includes the

323
00:15:57,000 --> 00:15:59,519
executable inside of the directory

324
00:15:59,519 --> 00:16:01,459
structure

325
00:16:01,459 --> 00:16:06,060
and the in in my example it was exactly

326
00:16:06,060 --> 00:16:08,940
over there where the Alias was so the

327
00:16:08,940 --> 00:16:11,880
main executable was the Alias but the

328
00:16:11,880 --> 00:16:14,220
good the trick in my case was that it

329
00:16:14,220 --> 00:16:16,680
was pointing out to the external

330
00:16:16,680 --> 00:16:18,420
resource and this is one of the cool

331
00:16:18,420 --> 00:16:20,699
things of about the Mac OS Alias files

332
00:16:20,699 --> 00:16:23,399
is that you can actually do it in a way

333
00:16:23,399 --> 00:16:27,300
that it completely links to the out some

334
00:16:27,300 --> 00:16:28,980
resource which is outside of your

335
00:16:28,980 --> 00:16:31,139
computer like a Samba month for example

336
00:16:31,139 --> 00:16:33,360
so I did that

337
00:16:33,360 --> 00:16:36,720
and whenever that application inside of

338
00:16:36,720 --> 00:16:40,620
that zip is downloaded there's an uh

339
00:16:40,620 --> 00:16:44,459
background process called LSD launch

340
00:16:44,459 --> 00:16:47,100
service Daemon and it will automatically

341
00:16:47,100 --> 00:16:49,199
figure out oh this looks like an

342
00:16:49,199 --> 00:16:51,180
application I need to go and index that

343
00:16:51,180 --> 00:16:55,440
so we can launch it easily via other uh

344
00:16:55,440 --> 00:16:57,600
like a spotlight or something like that

345
00:16:57,600 --> 00:16:59,880
you can launch it via that way so it

346
00:16:59,880 --> 00:17:02,220
does it automatically

347
00:17:02,220 --> 00:17:05,640
so with this way attacker can trick the

348
00:17:05,640 --> 00:17:08,459
victim to download and automatically

349
00:17:08,459 --> 00:17:12,299
mount a network share but that's not yet

350
00:17:12,299 --> 00:17:14,640
there there's I was thinking on this was

351
00:17:14,640 --> 00:17:18,839
the original thing what basically uh

352
00:17:18,839 --> 00:17:21,780
give me the uh gave me the idea that

353
00:17:21,780 --> 00:17:23,280
maybe this is something what should be

354
00:17:23,280 --> 00:17:26,520
looked more closely this is not like a

355
00:17:26,520 --> 00:17:29,160
this is a kind of bad thing but not

356
00:17:29,160 --> 00:17:30,780
something what you can exploit

357
00:17:30,780 --> 00:17:31,980
immediately

358
00:17:31,980 --> 00:17:34,860
so so what now attacker can trigger some

359
00:17:34,860 --> 00:17:38,760
amount but what can you do with that uh

360
00:17:38,760 --> 00:17:41,280
you can try to fool out the user to

361
00:17:41,280 --> 00:17:43,980
actually click it open uh some malware

362
00:17:43,980 --> 00:17:46,440
which is inside of that but it will be

363
00:17:46,440 --> 00:17:49,020
prevented by the gatekeeper because it's

364
00:17:49,020 --> 00:17:51,539
flagged as a potentially malicious file

365
00:17:51,539 --> 00:17:53,100
because it's downloaded from the

366
00:17:53,100 --> 00:17:55,860
internet and on the other hand victim

367
00:17:55,860 --> 00:17:59,340
need to do some clicking so it's kind of

368
00:17:59,340 --> 00:18:01,740
boring boring way to approach it that

369
00:18:01,740 --> 00:18:02,820
way

370
00:18:02,820 --> 00:18:07,200
okay and then there's a uh

371
00:18:07,200 --> 00:18:11,419
finding a way that how we can affect the

372
00:18:11,419 --> 00:18:15,539
uh that process when when the moon is

373
00:18:15,539 --> 00:18:17,460
actually actually automatically mounted

374
00:18:17,460 --> 00:18:19,980
so I was trying to figure out that what

375
00:18:19,980 --> 00:18:22,559
I can do with this capability right now

376
00:18:22,559 --> 00:18:24,120
so I started to think about that it

377
00:18:24,120 --> 00:18:26,940
would be great if I can mount the samba

378
00:18:26,940 --> 00:18:29,880
Mount to some specific directory instead

379
00:18:29,880 --> 00:18:34,320
of normally used slash volumes uh and

380
00:18:34,320 --> 00:18:38,400
and typically when you install or double

381
00:18:38,400 --> 00:18:40,740
click the image or the network share it

382
00:18:40,740 --> 00:18:42,960
will be mounted under this last volumes

383
00:18:42,960 --> 00:18:47,160
and the uh last part of that URL is

384
00:18:47,160 --> 00:18:49,440
actually used as a name of the directory

385
00:18:49,440 --> 00:18:52,679
so obviously I started to do some

386
00:18:52,679 --> 00:18:55,440
trickery with dot dot slash type of

387
00:18:55,440 --> 00:18:58,559
naming and pretty much try it all kind

388
00:18:58,559 --> 00:19:00,960
of different kind of tricks but none of

389
00:19:00,960 --> 00:19:04,140
the tricks actually seem to work in a

390
00:19:04,140 --> 00:19:07,280
way that it would be beneficial for me X

391
00:19:07,280 --> 00:19:11,580
there was one anomaly

392
00:19:11,580 --> 00:19:15,539
for some reason naming logic was failing

393
00:19:15,539 --> 00:19:21,720
if I had that percent 0 0 to the name of

394
00:19:21,720 --> 00:19:24,419
the last part path of the URL so that's

395
00:19:24,419 --> 00:19:27,840
new typically and it broke something

396
00:19:27,840 --> 00:19:30,059
related to the parsing in the background

397
00:19:30,059 --> 00:19:34,260
so after that when that triggered uh

398
00:19:34,260 --> 00:19:37,919
after that the naming for the volumes

399
00:19:37,919 --> 00:19:41,640
slash the directory will use actually

400
00:19:41,640 --> 00:19:43,919
the fully qualified domain name in that

401
00:19:43,919 --> 00:19:47,700
URL which basically in my example case

402
00:19:47,700 --> 00:19:51,120
is the fileserver.local in that example

403
00:19:51,120 --> 00:19:53,820
case so I started to figure out that can

404
00:19:53,820 --> 00:19:56,940
I use that maybe there's some different

405
00:19:56,940 --> 00:20:01,799
code path actually in the background and

406
00:20:01,799 --> 00:20:03,900
maybe I can play around with the domain

407
00:20:03,900 --> 00:20:06,120
name although I was a bit worried that

408
00:20:06,120 --> 00:20:08,100
it is quite restricted what I can do

409
00:20:08,100 --> 00:20:11,820
with the domain names however

410
00:20:11,820 --> 00:20:14,280
I decided that I configured the wildcard

411
00:20:14,280 --> 00:20:17,220
domain name for this test so it is more

412
00:20:17,220 --> 00:20:18,600
easily to go through different

413
00:20:18,600 --> 00:20:22,440
variations and so on and it turns out

414
00:20:22,440 --> 00:20:25,260
that the fully qualified domain name is

415
00:20:25,260 --> 00:20:27,780
not sanitized by any means so even

416
00:20:27,780 --> 00:20:29,760
though there was a really strict

417
00:20:29,760 --> 00:20:33,240
sanitation done for the uh URLs and the

418
00:20:33,240 --> 00:20:36,780
last part last part of the URL there was

419
00:20:36,780 --> 00:20:39,000
no sanitation at all in a fully

420
00:20:39,000 --> 00:20:41,760
qualified domain name so the solution

421
00:20:41,760 --> 00:20:45,679
looks like something like this

422
00:20:46,200 --> 00:20:47,960
so

423
00:20:47,960 --> 00:20:50,700
uh there's a

424
00:20:50,700 --> 00:20:54,299
quite a lot of going on so but at first

425
00:20:54,299 --> 00:20:57,840
we break the default naming method uh

426
00:20:57,840 --> 00:21:00,299
with the setting the last part of the

427
00:21:00,299 --> 00:21:03,660
URL as a null and after that the Korean

428
00:21:03,660 --> 00:21:08,940
part is used as an uh as a as an for

429
00:21:08,940 --> 00:21:11,360
naming

430
00:21:11,820 --> 00:21:14,700
that first part I needed to use

431
00:21:14,700 --> 00:21:18,419
uh double URL encoding to make the DNS

432
00:21:18,419 --> 00:21:22,200
query actually work so in that example

433
00:21:22,200 --> 00:21:23,580
uh

434
00:21:23,580 --> 00:21:26,640
I I leveraged the Wild Card domain name

435
00:21:26,640 --> 00:21:29,580
in a way that I entered the dot dot

436
00:21:29,580 --> 00:21:34,320
slash private slash temp slash test and

437
00:21:34,320 --> 00:21:37,799
uh in the third phase I added yet

438
00:21:37,799 --> 00:21:41,419
another null to actually terminate the

439
00:21:41,419 --> 00:21:45,360
uh parsing in a way that the rest of the

440
00:21:45,360 --> 00:21:47,760
fully qualified domain name was not used

441
00:21:47,760 --> 00:21:51,480
for the mounting and after that the

442
00:21:51,480 --> 00:21:54,000
mount point will be slash volumes less

443
00:21:54,000 --> 00:21:56,340
dot dot slash private slash temps last

444
00:21:56,340 --> 00:21:59,720
test so now I have a arbitrary access

445
00:21:59,720 --> 00:22:03,260
in a way that I can mount Samba Mount to

446
00:22:03,260 --> 00:22:06,720
whatever pad I wanted

447
00:22:06,720 --> 00:22:09,600
however there was a limitation on that

448
00:22:09,600 --> 00:22:12,360
that only non-existing directories can

449
00:22:12,360 --> 00:22:14,400
be used as a mount point and this will

450
00:22:14,400 --> 00:22:18,080
be important in later phases

451
00:22:18,960 --> 00:22:20,220
so

452
00:22:20,220 --> 00:22:22,980
phase 3 we still don't have a code

453
00:22:22,980 --> 00:22:25,220
execution but we have the arbitrary

454
00:22:25,220 --> 00:22:29,820
Mount path uh for the samba Mount which

455
00:22:29,820 --> 00:22:32,760
can be triggered with the one click

456
00:22:32,760 --> 00:22:34,980
so how we can get the code execution

457
00:22:34,980 --> 00:22:37,860
this shouldn't be too hard in the sense

458
00:22:37,860 --> 00:22:40,280
that the traditionally

459
00:22:40,280 --> 00:22:43,740
in this phase it's more like you just

460
00:22:43,740 --> 00:22:44,820
need to do

461
00:22:44,820 --> 00:22:47,760
a lot of reading and sitting and on on

462
00:22:47,760 --> 00:22:51,720
the at your computer and just figure it

463
00:22:51,720 --> 00:22:54,480
out however it was surprisingly painful

464
00:22:54,480 --> 00:22:58,559
and finally uh this was the phase which

465
00:22:58,559 --> 00:23:01,140
actually took most of the time in this

466
00:23:01,140 --> 00:23:03,000
exploit chain

467
00:23:03,000 --> 00:23:05,280
so normally there's a couple of

468
00:23:05,280 --> 00:23:08,520
potential paths but you can take when

469
00:23:08,520 --> 00:23:12,720
you actually want to find out uh way to

470
00:23:12,720 --> 00:23:14,820
get code running when you have that kind

471
00:23:14,820 --> 00:23:19,220
of like arbitrary file mode uh situation

472
00:23:19,220 --> 00:23:22,740
so you try to find out what existing

473
00:23:22,740 --> 00:23:24,480
softwares there are maybe there's some

474
00:23:24,480 --> 00:23:27,780
plugins or other features what you can

475
00:23:27,780 --> 00:23:31,080
leverage that whenever the software is

476
00:23:31,080 --> 00:23:32,299
launched

477
00:23:32,299 --> 00:23:34,980
it will automatically load the plugins

478
00:23:34,980 --> 00:23:37,260
from specific directory and so on

479
00:23:37,260 --> 00:23:40,140
however there's plenty of speed bumps

480
00:23:40,140 --> 00:23:42,780
still to go cover uh gatekeeper

481
00:23:42,780 --> 00:23:45,840
sandboxing and that the fact that the

482
00:23:45,840 --> 00:23:48,299
mount Point directory need to be a new

483
00:23:48,299 --> 00:23:51,539
directory there was plenty of options to

484
00:23:51,539 --> 00:23:53,220
actually get the plugins in and running

485
00:23:53,220 --> 00:23:55,140
while you are using normally some

486
00:23:55,140 --> 00:23:57,600
applications but

487
00:23:57,600 --> 00:24:00,419
there was an existing directory so I

488
00:24:00,419 --> 00:24:02,520
couldn't use that so that was great

489
00:24:02,520 --> 00:24:06,200
limitation for me to actually

490
00:24:06,539 --> 00:24:09,120
figure this out just a reminder that

491
00:24:09,120 --> 00:24:11,220
gatekeeper is different one which

492
00:24:11,220 --> 00:24:13,640
provides these pop-ups and prevent the

493
00:24:13,640 --> 00:24:17,460
external applications which may be

494
00:24:17,460 --> 00:24:20,100
malicious to actually run on your Mac

495
00:24:20,100 --> 00:24:23,220
so but I found a solution

496
00:24:23,220 --> 00:24:25,100
and

497
00:24:25,100 --> 00:24:28,620
uh most straightforward way for this

498
00:24:28,620 --> 00:24:32,039
demonstration was to actually use Z dot

499
00:24:32,039 --> 00:24:34,640
Z keyboard

500
00:24:34,640 --> 00:24:38,280
directory it is uh

501
00:24:38,280 --> 00:24:40,740
directory which includes normally or

502
00:24:40,740 --> 00:24:43,200
could include normally some

503
00:24:43,200 --> 00:24:46,559
configuration to your shell so jet sh is

504
00:24:46,559 --> 00:24:49,740
the normal common shell in Mac OS

505
00:24:49,740 --> 00:24:52,500
nowadays and if you have a you can set

506
00:24:52,500 --> 00:24:54,780
up configuration files which are

507
00:24:54,780 --> 00:24:55,980
basically

508
00:24:55,980 --> 00:24:58,440
can be sales scripts for example to that

509
00:24:58,440 --> 00:25:00,480
directory and those will be

510
00:25:00,480 --> 00:25:03,480
automatically loaded whenever the zsh is

511
00:25:03,480 --> 00:25:05,580
initially sized

512
00:25:05,580 --> 00:25:09,059
so now we got finally we had the code

513
00:25:09,059 --> 00:25:11,460
execution capabilities and we can get

514
00:25:11,460 --> 00:25:13,799
our own shell scripts running on the

515
00:25:13,799 --> 00:25:18,179
system whenever the terminal is launched

516
00:25:18,179 --> 00:25:21,960
so but then we had still the problem

517
00:25:21,960 --> 00:25:25,140
and by the way the gatekeeper because it

518
00:25:25,140 --> 00:25:25,860
is

519
00:25:25,860 --> 00:25:29,940
of this is actually affecting the

520
00:25:29,940 --> 00:25:31,740
existing software

521
00:25:31,740 --> 00:25:34,260
and the configuration in that existing

522
00:25:34,260 --> 00:25:38,220
software meaning the zsh and the uh

523
00:25:38,220 --> 00:25:40,740
terminal so these are existing software

524
00:25:40,740 --> 00:25:44,340
so whenever uh those are allowance the

525
00:25:44,340 --> 00:25:47,340
gatekeeper won't prevent of launching

526
00:25:47,340 --> 00:25:49,620
those applications because it is

527
00:25:49,620 --> 00:25:53,039
original application and we only

528
00:25:53,039 --> 00:25:55,260
infected the configuration which will

529
00:25:55,260 --> 00:25:58,679
cause the code execution

530
00:25:58,679 --> 00:26:01,980
so what now we still still don't have

531
00:26:01,980 --> 00:26:05,039
the access to the all the personal uh

532
00:26:05,039 --> 00:26:06,900
information what could be over there

533
00:26:06,900 --> 00:26:11,640
because of the TCC limitations

534
00:26:12,000 --> 00:26:14,820
uh

535
00:26:14,820 --> 00:26:16,860
and this is as a reminder this is how

536
00:26:16,860 --> 00:26:18,840
the TCC looks like it's taking care of

537
00:26:18,840 --> 00:26:21,120
the sandboxing related to the

538
00:26:21,120 --> 00:26:22,559
applications

539
00:26:22,559 --> 00:26:23,760
so

540
00:26:23,760 --> 00:26:27,360
the TCC works so that all the user

541
00:26:27,360 --> 00:26:30,179
content is actually stored in the sqlite

542
00:26:30,179 --> 00:26:33,480
in that specific path all of the macro

543
00:26:33,480 --> 00:26:35,700
users you have that in place and it

544
00:26:35,700 --> 00:26:38,640
includes the all the configuration it is

545
00:26:38,640 --> 00:26:42,659
sqlite uh so it's not that complicated

546
00:26:42,659 --> 00:26:47,279
system but it is protected by the Sip so

547
00:26:47,279 --> 00:26:49,500
you cannot in normal situation you

548
00:26:49,500 --> 00:26:51,659
cannot manipulate it by any means

549
00:26:51,659 --> 00:26:54,059
because it will prevent that even if you

550
00:26:54,059 --> 00:26:57,419
are rude you cannot access that

551
00:26:57,419 --> 00:27:01,200
so this means we need to circumvate the

552
00:27:01,200 --> 00:27:04,919
ship to get access to that tccd how hard

553
00:27:04,919 --> 00:27:07,520
it can be

554
00:27:09,980 --> 00:27:13,559
actually works so that you you have a

555
00:27:13,559 --> 00:27:17,880
user process called tccd running and

556
00:27:17,880 --> 00:27:21,659
it's owned by your user account so I was

557
00:27:21,659 --> 00:27:23,940
thinking of immediately that okay

558
00:27:23,940 --> 00:27:27,059
basic unique stuff I'm the owner of that

559
00:27:27,059 --> 00:27:29,400
process maybe I can manipulate the

560
00:27:29,400 --> 00:27:32,120
environment in a way that something

561
00:27:32,120 --> 00:27:35,400
fancy will happen and I can fool the uh

562
00:27:35,400 --> 00:27:39,480
tccd to actually load some other sqlite

563
00:27:39,480 --> 00:27:41,720
database instead of mine

564
00:27:41,720 --> 00:27:45,840
I am and you as a user you can kill the

565
00:27:45,840 --> 00:27:48,059
tccd process but it will be

566
00:27:48,059 --> 00:27:50,580
automatically launched immediately after

567
00:27:50,580 --> 00:27:52,799
you have killed it but you are able to

568
00:27:52,799 --> 00:27:56,039
do that you the only restriction is that

569
00:27:56,039 --> 00:27:58,620
you cannot manipulate the TCC database

570
00:27:58,620 --> 00:28:02,580
because it's prevented by the Sip

571
00:28:02,580 --> 00:28:04,980
so

572
00:28:04,980 --> 00:28:07,799
I have to be honest this was the first

573
00:28:07,799 --> 00:28:10,980
thing what I tried and it worked

574
00:28:10,980 --> 00:28:12,960
it might be hard to see

575
00:28:12,960 --> 00:28:15,659
but the I will walk you through

576
00:28:15,659 --> 00:28:20,640
so this was Lucky Strike for me because

577
00:28:20,640 --> 00:28:24,720
uh I was playing around with the moans

578
00:28:24,720 --> 00:28:29,580
before in the uh in the previous phases

579
00:28:29,580 --> 00:28:31,500
so this was the first thing what to came

580
00:28:31,500 --> 00:28:34,380
what came to my mind that what if I just

581
00:28:34,380 --> 00:28:37,980
killed the tccd process and quickly

582
00:28:37,980 --> 00:28:42,799
mount a new image to that specific path

583
00:28:42,799 --> 00:28:47,600
and that specific image will include my

584
00:28:47,600 --> 00:28:52,080
customized uh DCC database and this was

585
00:28:52,080 --> 00:28:53,700
basically the first thing what I tried

586
00:28:53,700 --> 00:28:56,220
and it worked and I was really stunned

587
00:28:56,220 --> 00:28:58,740
that what the heck is going on that this

588
00:28:58,740 --> 00:29:01,020
should be preventing all the attackers

589
00:29:01,020 --> 00:29:03,419
to stay in the sandbox and this was the

590
00:29:03,419 --> 00:29:04,919
first thing what came to my mind but it

591
00:29:04,919 --> 00:29:07,620
was the Lucky Strike and if you do if

592
00:29:07,620 --> 00:29:09,720
you do uh like a technical security

593
00:29:09,720 --> 00:29:11,700
outage you find out that these Lucky

594
00:29:11,700 --> 00:29:14,820
Strikes are surprisingly common because

595
00:29:14,820 --> 00:29:17,220
for any reason or maybe it was a hunch

596
00:29:17,220 --> 00:29:18,600
that maybe I should try this because

597
00:29:18,600 --> 00:29:20,460
maybe the developers didn't think about

598
00:29:20,460 --> 00:29:22,980
this kind of scenario at all and

599
00:29:22,980 --> 00:29:24,899
don't repeat that way

600
00:29:24,899 --> 00:29:28,860
so tccd process will start after I have

601
00:29:28,860 --> 00:29:32,820
killed it and mounted to New Image to

602
00:29:32,820 --> 00:29:36,419
that exact path where the TCC database

603
00:29:36,419 --> 00:29:39,779
is when the process will start again it

604
00:29:39,779 --> 00:29:42,659
will just gladly pick the path load the

605
00:29:42,659 --> 00:29:47,419
new sqlite database and that's it so now

606
00:29:47,419 --> 00:29:51,000
whole puzzle was basically sold with

607
00:29:51,000 --> 00:29:54,000
this and now we got an access to all the

608
00:29:54,000 --> 00:29:57,000
files and we are able to run code in the

609
00:29:57,000 --> 00:30:00,539
system in a way that this attacker Samba

610
00:30:00,539 --> 00:30:04,020
Mount mounted to arbitrary file path and

611
00:30:04,020 --> 00:30:07,140
the attacker has fully control and it

612
00:30:07,140 --> 00:30:10,679
can do what whatever the attacker wants

613
00:30:10,679 --> 00:30:13,980
so this was rather

614
00:30:13,980 --> 00:30:17,279
complicated process in the sense that

615
00:30:17,279 --> 00:30:18,240
the

616
00:30:18,240 --> 00:30:21,720
if we look at this the all the steps so

617
00:30:21,720 --> 00:30:24,000
the user downloads the zip file it will

618
00:30:24,000 --> 00:30:26,520
be automatically extracted by Safari

619
00:30:26,520 --> 00:30:28,860
then there's a LSD process which will

620
00:30:28,860 --> 00:30:31,380
automatically go and index it it finds

621
00:30:31,380 --> 00:30:33,840
out that oh there's a Alias file with

622
00:30:33,840 --> 00:30:36,299
the external resource it will

623
00:30:36,299 --> 00:30:38,100
automatically Mount that external

624
00:30:38,100 --> 00:30:41,159
resource because why not and after that

625
00:30:41,159 --> 00:30:43,980
we have an initial access then later on

626
00:30:43,980 --> 00:30:46,679
when the user does some things on normal

627
00:30:46,679 --> 00:30:50,760
things on on his or her laptop like a

628
00:30:50,760 --> 00:30:52,679
launcher terminal I know this is not

629
00:30:52,679 --> 00:30:55,200
there like a like a best scenario but

630
00:30:55,200 --> 00:30:57,120
the it was good enough for the proof of

631
00:30:57,120 --> 00:30:59,880
concept and the demo when the terminal

632
00:30:59,880 --> 00:31:02,520
actually launches it loads the con out

633
00:31:02,520 --> 00:31:06,539
it's launches it that sh and it will

634
00:31:06,539 --> 00:31:09,240
load configuration for it which actually

635
00:31:09,240 --> 00:31:12,120
includes my payload all the shell

636
00:31:12,120 --> 00:31:16,159
commands and the that will be

637
00:31:16,159 --> 00:31:19,559
automatically done and then we have the

638
00:31:19,559 --> 00:31:23,340
evasions for the TCC and the ship to

639
00:31:23,340 --> 00:31:25,679
actually gain full access to that

640
00:31:25,679 --> 00:31:27,480
terminal to access all the different

641
00:31:27,480 --> 00:31:31,159
places and we are there

642
00:31:34,679 --> 00:31:37,620
then this this was basically done the

643
00:31:37,620 --> 00:31:41,100
timeline this was done during the 2020 I

644
00:31:41,100 --> 00:31:44,159
found the issue it took quite a while to

645
00:31:44,159 --> 00:31:46,500
make it make it like a good proof of

646
00:31:46,500 --> 00:31:49,679
concept of it I actually reported this

647
00:31:49,679 --> 00:31:52,919
to the Apple when the picture was in the

648
00:31:52,919 --> 00:31:54,059
beta phase

649
00:31:54,059 --> 00:31:57,120
uh quite fairly quickly they did the

650
00:31:57,120 --> 00:32:00,419
fixes so both of the main

651
00:32:00,419 --> 00:32:02,940
vulnerabilities were fixed in quite

652
00:32:02,940 --> 00:32:05,820
quickly the Alias issue was silently

653
00:32:05,820 --> 00:32:09,179
fixed so maybe they didn't consider that

654
00:32:09,179 --> 00:32:12,539
as an vulnerability the fact that it

655
00:32:12,539 --> 00:32:15,919
will be automatically mounted

656
00:32:15,919 --> 00:32:20,100
if you have a Alias file in your Mac OS

657
00:32:20,100 --> 00:32:22,980
application main binary it's a

658
00:32:22,980 --> 00:32:25,860
functionality I guess so however they

659
00:32:25,860 --> 00:32:28,620
silently fixed it and it's now all the

660
00:32:28,620 --> 00:32:32,159
over 100 million of Mac users are now in

661
00:32:32,159 --> 00:32:33,080
save

662
00:32:33,080 --> 00:32:37,559
uh it took all the way one year or over

663
00:32:37,559 --> 00:32:40,679
one year to actually qualify it for the

664
00:32:40,679 --> 00:32:45,000
Apple security boundary so uh it's not

665
00:32:45,000 --> 00:32:47,279
the fast process if you are planning to

666
00:32:47,279 --> 00:32:50,460
do some security research for the Mac OS

667
00:32:50,460 --> 00:32:54,120
your student hold your breath and wait

668
00:32:54,120 --> 00:32:57,000
the Mac OS bounty to come it will take

669
00:32:57,000 --> 00:33:00,299
some time however they pay at the end of

670
00:33:00,299 --> 00:33:03,600
the day and the uh it is like fairly

671
00:33:03,600 --> 00:33:07,080
good bound I would say

672
00:33:07,080 --> 00:33:09,720
and this is how the cve actually looks

673
00:33:09,720 --> 00:33:12,960
looks like so I think like over five

674
00:33:12,960 --> 00:33:14,220
years ago

675
00:33:14,220 --> 00:33:18,320
especially in the Apple's case uh the

676
00:33:18,320 --> 00:33:21,899
these like uh chains locks related to

677
00:33:21,899 --> 00:33:24,179
the cyber security was always quite

678
00:33:24,179 --> 00:33:26,820
abstract and uh it seems that the things

679
00:33:26,820 --> 00:33:28,380
have been going to the better Direction

680
00:33:28,380 --> 00:33:31,019
I'm happy about it and they are actually

681
00:33:31,019 --> 00:33:33,720
quite quite well showing that what was

682
00:33:33,720 --> 00:33:36,059
going on and it gives you a better idea

683
00:33:36,059 --> 00:33:38,940
that what's what is going on and this is

684
00:33:38,940 --> 00:33:42,419
the uh the other vulnerability

685
00:33:42,419 --> 00:33:46,500
related to that uh I've asked quite a

686
00:33:46,500 --> 00:33:48,360
lot that how the cooperation with the

687
00:33:48,360 --> 00:33:51,299
Apple went so maybe I cover it because I

688
00:33:51,299 --> 00:33:54,539
have some time uh in general I'm

689
00:33:54,539 --> 00:33:57,360
reported also other not that serious

690
00:33:57,360 --> 00:34:00,260
vulnerabilities to Apple and generally

691
00:34:00,260 --> 00:34:03,720
nowadays they reply rather quickly they

692
00:34:03,720 --> 00:34:05,820
don't provide any information that how

693
00:34:05,820 --> 00:34:08,159
the research is going on only after when

694
00:34:08,159 --> 00:34:11,940
you when the issue is fixed and released

695
00:34:11,940 --> 00:34:16,560
they give you Insight that the you were

696
00:34:16,560 --> 00:34:18,599
the first one to find that out and so on

697
00:34:18,599 --> 00:34:20,940
that kind of information but for example

698
00:34:20,940 --> 00:34:23,339
in this vulnerability chain they had

699
00:34:23,339 --> 00:34:26,219
some troubles or challenges to reproduce

700
00:34:26,219 --> 00:34:28,219
the samba Mount

701
00:34:28,219 --> 00:34:32,879
case so we basically cooperated had a

702
00:34:32,879 --> 00:34:36,179
hunter chat via email and after some

703
00:34:36,179 --> 00:34:39,000
discussions I just decided that I built

704
00:34:39,000 --> 00:34:41,339
a virtual machine for them which has the

705
00:34:41,339 --> 00:34:44,399
pre-configured the samba Samba server

706
00:34:44,399 --> 00:34:46,139
and so on and they were able to

707
00:34:46,139 --> 00:34:50,159
reproduce the exact issue so I think

708
00:34:50,159 --> 00:34:52,320
it's fairly good because they can do the

709
00:34:52,320 --> 00:34:54,899
fixes in a really short time two to

710
00:34:54,899 --> 00:34:57,540
three months and those are pushed to all

711
00:34:57,540 --> 00:35:00,000
the users that's good thing obviously

712
00:35:00,000 --> 00:35:02,400
the back Bounty part will take heckloads

713
00:35:02,400 --> 00:35:03,900
of time that's something what most of

714
00:35:03,900 --> 00:35:05,760
the researchers complain but at least

715
00:35:05,760 --> 00:35:08,220
there's a park Bounty program so I think

716
00:35:08,220 --> 00:35:10,020
that's great

717
00:35:10,020 --> 00:35:13,800
okay but I think that's about it thank

718
00:35:13,800 --> 00:35:16,020
you everyone and I'm really happy to

719
00:35:16,020 --> 00:35:18,599
hear if you have any questions

720
00:35:18,599 --> 00:35:19,580
thank you

721
00:35:19,580 --> 00:35:26,160
[Applause]

722
00:35:26,160 --> 00:35:29,760
so any questions from the audience

723
00:35:29,760 --> 00:35:32,900
there is one here first

724
00:35:33,119 --> 00:35:36,660
and and the next one can also uh show

725
00:35:36,660 --> 00:35:38,640
their hands so the microphone can move

726
00:35:38,640 --> 00:35:41,280
during the answering and we get uh

727
00:35:41,280 --> 00:35:43,800
faster so please yeah based on your

728
00:35:43,800 --> 00:35:46,619
presentation the uh security research is

729
00:35:46,619 --> 00:35:48,300
like a walk in a park it's just find one

730
00:35:48,300 --> 00:35:50,119
vulnerability then the next one Etc

731
00:35:50,119 --> 00:35:52,980
especially the phase four uh with the

732
00:35:52,980 --> 00:35:55,320
Lucky Strike but how many dead ends you

733
00:35:55,320 --> 00:35:58,260
you met per phase before you actually

734
00:35:58,260 --> 00:36:01,079
got these successful exploit working

735
00:36:01,079 --> 00:36:03,540
quite many so

736
00:36:03,540 --> 00:36:07,200
in all the faces basically I looked

737
00:36:07,200 --> 00:36:10,700
around quite a lot so

738
00:36:10,700 --> 00:36:13,700
except the Lucky Strike that was like

739
00:36:13,700 --> 00:36:17,220
went went right in the first try but I

740
00:36:17,220 --> 00:36:20,460
would say it's like uh one to ten ratio

741
00:36:20,460 --> 00:36:23,700
I tend to operate in a way that I

742
00:36:23,700 --> 00:36:27,000
try to poke around to find out a hunch

743
00:36:27,000 --> 00:36:29,400
that what might be the next step for

744
00:36:29,400 --> 00:36:33,540
example I went quite far with the one of

745
00:36:33,540 --> 00:36:36,540
plug-in type which is related to the Mac

746
00:36:36,540 --> 00:36:39,780
OS preview so whenever you

747
00:36:39,780 --> 00:36:43,140
uh if you have a picture in your desktop

748
00:36:43,140 --> 00:36:44,880
and if you press space you get the

749
00:36:44,880 --> 00:36:47,160
preview about that file so there's a

750
00:36:47,160 --> 00:36:49,680
plugin system in that preview so I went

751
00:36:49,680 --> 00:36:51,599
quite far with that

752
00:36:51,599 --> 00:36:54,300
but it is really heavily sandbox and

753
00:36:54,300 --> 00:36:56,280
really limited but I spent many many

754
00:36:56,280 --> 00:36:59,339
evenings with that and then decided to

755
00:36:59,339 --> 00:37:02,760
just to take a step back and try to poke

756
00:37:02,760 --> 00:37:04,800
around the other things and it it

757
00:37:04,800 --> 00:37:07,500
started to go forward but it is really

758
00:37:07,500 --> 00:37:10,380
common too so for that reason I try to

759
00:37:10,380 --> 00:37:13,619
operate in the way that when it's Ico

760
00:37:13,619 --> 00:37:16,680
and poke and okay this feels a bit soft

761
00:37:16,680 --> 00:37:19,140
let's see how far I can push it and if

762
00:37:19,140 --> 00:37:21,480
it start to be harder I maybe come back

763
00:37:21,480 --> 00:37:23,760
and try something new in the next day

764
00:37:23,760 --> 00:37:26,520
and and maybe come back to that same

765
00:37:26,520 --> 00:37:29,520
topic again later on so it's like a

766
00:37:29,520 --> 00:37:31,619
really common and

767
00:37:31,619 --> 00:37:34,200
and the about the comment related that

768
00:37:34,200 --> 00:37:36,300
it seems that you just walk walk through

769
00:37:36,300 --> 00:37:39,480
the different paths and look around at

770
00:37:39,480 --> 00:37:42,240
what you can find and that it seems for

771
00:37:42,240 --> 00:37:45,480
me that it's quite there's not too many

772
00:37:45,480 --> 00:37:47,460
researchers doing that kind of things

773
00:37:47,460 --> 00:37:50,400
because it's manual labor basically you

774
00:37:50,400 --> 00:37:53,099
cannot easily automate it this and and

775
00:37:53,099 --> 00:37:55,400
automatically find out this Logic box

776
00:37:55,400 --> 00:37:58,140
what I basically used all of them are

777
00:37:58,140 --> 00:38:01,020
like a kind of logic bugs there's more

778
00:38:01,020 --> 00:38:03,180
research on the things where what you

779
00:38:03,180 --> 00:38:05,880
can do automatically fasting for example

780
00:38:05,880 --> 00:38:08,460
which is still really effective and so

781
00:38:08,460 --> 00:38:11,460
on so that's something what you can also

782
00:38:11,460 --> 00:38:14,040
do I think I felt that this challenge is

783
00:38:14,040 --> 00:38:16,680
what I puzzled what I was able to solve

784
00:38:16,680 --> 00:38:18,839
was more like playing a capture the flag

785
00:38:18,839 --> 00:38:23,839
or or doing that kind of challenges

786
00:38:27,720 --> 00:38:31,220
hi so in the URL

787
00:38:31,220 --> 00:38:34,560
encoding part in the symbol part

788
00:38:34,560 --> 00:38:39,780
you URL encoded the path traversal and I

789
00:38:39,780 --> 00:38:41,640
understand that but what really

790
00:38:41,640 --> 00:38:44,640
surprised me is that you double URL

791
00:38:44,640 --> 00:38:47,700
encoded in the double URL decoded what

792
00:38:47,700 --> 00:38:49,440
do you think it did that

793
00:38:49,440 --> 00:38:53,099
I'm not exactly sure about the if I use

794
00:38:53,099 --> 00:38:56,640
one layer of URL encoding I think it

795
00:38:56,640 --> 00:39:00,540
broke the DNS query because it includes

796
00:39:00,540 --> 00:39:03,300
the dots or slashes

797
00:39:03,300 --> 00:39:05,579
maybe those are not the valid like a DNS

798
00:39:05,579 --> 00:39:07,619
queries most likely some of you know

799
00:39:07,619 --> 00:39:10,619
know about that so for that reason I

800
00:39:10,619 --> 00:39:12,900
needed to use the double encoding and

801
00:39:12,900 --> 00:39:14,700
I'm not sure

802
00:39:14,700 --> 00:39:17,220
what actually happens over there it

803
00:39:17,220 --> 00:39:18,359
might be

804
00:39:18,359 --> 00:39:20,940
I or I don't remember I've been checking

805
00:39:20,940 --> 00:39:23,099
that so most likely what happens is that

806
00:39:23,099 --> 00:39:26,460
the first layer of the encoding is

807
00:39:26,460 --> 00:39:31,020
uh remote immediately in the first

808
00:39:31,020 --> 00:39:34,260
phase when the DNS query is done

809
00:39:34,260 --> 00:39:37,619
so the one layer is removed immediately

810
00:39:37,619 --> 00:39:40,020
and when the

811
00:39:40,020 --> 00:39:41,760
uh

812
00:39:41,760 --> 00:39:43,920
in the next part when that same

813
00:39:43,920 --> 00:39:46,619
information is used again then the

814
00:39:46,619 --> 00:39:49,260
second part will be removed but not sure

815
00:39:49,260 --> 00:39:52,680
but it is a fairly interesting and

816
00:39:52,680 --> 00:39:55,800
fairly old trick to fool the parcels I

817
00:39:55,800 --> 00:39:57,480
would say also to have the double

818
00:39:57,480 --> 00:39:58,859
encoding

819
00:39:58,859 --> 00:40:01,560
thank you next microphone is already

820
00:40:01,560 --> 00:40:04,020
there what recommendation can you give

821
00:40:04,020 --> 00:40:06,720
for the newbies who wants to start the

822
00:40:06,720 --> 00:40:10,020
bug bout this do you say that Apple Puck

823
00:40:10,020 --> 00:40:11,880
point is a harder to find than Windows

824
00:40:11,880 --> 00:40:14,720
or some others

825
00:40:15,839 --> 00:40:18,060
depends on your background

826
00:40:18,060 --> 00:40:20,820
so if you are Unix Source admin if you

827
00:40:20,820 --> 00:40:22,680
have any experiences of

828
00:40:22,680 --> 00:40:26,460
uh hosting uh own Linux server or

829
00:40:26,460 --> 00:40:27,720
something like that

830
00:40:27,720 --> 00:40:30,720
the Mac OS is good because it's working

831
00:40:30,720 --> 00:40:33,359
as traditional Unique Systems under the

832
00:40:33,359 --> 00:40:35,339
hood most of the time there's some

833
00:40:35,339 --> 00:40:38,640
flavors for for Mac OS like the security

834
00:40:38,640 --> 00:40:41,220
control mechanisms and so on but the

835
00:40:41,220 --> 00:40:45,960
fundamentals are the same but for the

836
00:40:45,960 --> 00:40:48,900
for the new rubies I would start with

837
00:40:48,900 --> 00:40:53,099
something maybe smaller because

838
00:40:53,099 --> 00:40:55,980
the operating system includes quite a

839
00:40:55,980 --> 00:40:58,680
lot of new things if you know something

840
00:40:58,680 --> 00:41:01,140
already about the OSS not from the

841
00:41:01,140 --> 00:41:03,900
security point of view but yeah that if

842
00:41:03,900 --> 00:41:05,700
you know already how the system should

843
00:41:05,700 --> 00:41:09,480
basically work it is definitely easy to

844
00:41:09,480 --> 00:41:12,660
dive into that topic but if you are it

845
00:41:12,660 --> 00:41:14,940
might be for total newbie it might be

846
00:41:14,940 --> 00:41:17,400
more you might be much more successful

847
00:41:17,400 --> 00:41:20,640
if you have a smaller scope maybe one

848
00:41:20,640 --> 00:41:23,940
application or one service and you learn

849
00:41:23,940 --> 00:41:28,619
that first and go piece by piece later

850
00:41:28,619 --> 00:41:30,359
on so maybe

851
00:41:30,359 --> 00:41:32,760
that would be but in general

852
00:41:32,760 --> 00:41:35,099
uh hacking the windows or hacking the

853
00:41:35,099 --> 00:41:38,520
Mac OS I don't see mass of difference I

854
00:41:38,520 --> 00:41:42,000
tend to approach it in the way that

855
00:41:42,000 --> 00:41:43,920
I don't do the same things what the

856
00:41:43,920 --> 00:41:45,599
others are doing

857
00:41:45,599 --> 00:41:47,820
so that's might be there might be low

858
00:41:47,820 --> 00:41:50,040
hanging fruits on the places where the

859
00:41:50,040 --> 00:41:52,440
nobody is looking at and this is one of

860
00:41:52,440 --> 00:41:55,200
the examples it seems that everyone who

861
00:41:55,200 --> 00:41:57,720
is doing seriously some vulnerability

862
00:41:57,720 --> 00:42:00,300
research really and backbone is they are

863
00:42:00,300 --> 00:42:02,700
really into running automatically and

864
00:42:02,700 --> 00:42:05,579
systematically fossils and doing testing

865
00:42:05,579 --> 00:42:07,859
that way so I just think thought that

866
00:42:07,859 --> 00:42:10,079
maybe I should take a totally different

867
00:42:10,079 --> 00:42:11,520
approach and look to different

868
00:42:11,520 --> 00:42:13,800
directions and it seems that in general

869
00:42:13,800 --> 00:42:15,900
in cyber security see in this like a

870
00:42:15,900 --> 00:42:18,599
sauron's eye which is like in like in

871
00:42:18,599 --> 00:42:20,220
The Lord of the Rings that it's turning

872
00:42:20,220 --> 00:42:22,260
always to some direction and everybody

873
00:42:22,260 --> 00:42:24,540
is doing similar kind of things so I've

874
00:42:24,540 --> 00:42:27,000
been always trying to pick the leftovers

875
00:42:27,000 --> 00:42:29,040
because it seems that there's a plenty

876
00:42:29,040 --> 00:42:32,160
of research to do in those Avenues also

877
00:42:32,160 --> 00:42:34,079
so maybe that's something to consider if

878
00:42:34,079 --> 00:42:35,820
you want to really get the boundaries

879
00:42:35,820 --> 00:42:38,160
also maybe do something what the others

880
00:42:38,160 --> 00:42:39,720
are not doing

881
00:42:39,720 --> 00:42:41,760
which is there is one more question

882
00:42:41,760 --> 00:42:43,560
there

883
00:42:43,560 --> 00:42:47,640
if there is another hand just show first

884
00:42:47,640 --> 00:42:51,240
yeah hi your disclosure timeline started

885
00:42:51,240 --> 00:42:53,460
with the actual disclosure to Apple but

886
00:42:53,460 --> 00:42:56,099
I was wondering uh

887
00:42:56,099 --> 00:42:59,400
before the time of disclosure how long

888
00:42:59,400 --> 00:43:02,520
were you working on that specific uh

889
00:43:02,520 --> 00:43:05,460
series of events and was the time spent

890
00:43:05,460 --> 00:43:07,920
in proportion with the bug Bounty from

891
00:43:07,920 --> 00:43:09,720
Apple

892
00:43:09,720 --> 00:43:15,000
the main Alias thing is really old one

893
00:43:15,000 --> 00:43:18,240
however I didn't ask if you remember

894
00:43:18,240 --> 00:43:20,280
where we started in the phase one it

895
00:43:20,280 --> 00:43:23,119
didn't didn't lead to too far so

896
00:43:23,119 --> 00:43:27,060
fortunately like 2000 and

897
00:43:27,060 --> 00:43:30,060
15 I found out that there's an you can

898
00:43:30,060 --> 00:43:31,819
sometimes automatically

899
00:43:31,819 --> 00:43:35,280
have a disk image Mount if you if you

900
00:43:35,280 --> 00:43:37,020
are using the Alias so that was

901
00:43:37,020 --> 00:43:38,700
something which was on back of my head

902
00:43:38,700 --> 00:43:40,079
that this is something what needed to be

903
00:43:40,079 --> 00:43:42,180
researched when I have a time and

904
00:43:42,180 --> 00:43:44,339
immediately after seven years I had more

905
00:43:44,339 --> 00:43:46,680
time on the or the five years I had more

906
00:43:46,680 --> 00:43:49,980
time for it so but when I started to do

907
00:43:49,980 --> 00:43:52,440
it and when it started to go forward I I

908
00:43:52,440 --> 00:43:56,099
started to get some results and for me I

909
00:43:56,099 --> 00:43:59,480
think it in I spent the evening time

910
00:43:59,480 --> 00:44:02,339
mainly with tea so three hours per

911
00:44:02,339 --> 00:44:04,800
evening and it took something like

912
00:44:04,800 --> 00:44:08,400
two weeks to go it through during the

913
00:44:08,400 --> 00:44:11,640
evenings and my family had had to be

914
00:44:11,640 --> 00:44:13,680
quite flexible because when I saw that

915
00:44:13,680 --> 00:44:16,079
this is going to some direction and I

916
00:44:16,079 --> 00:44:18,660
cannot stop it now because it's like all

917
00:44:18,660 --> 00:44:21,060
the time on my mind so I need to solve

918
00:44:21,060 --> 00:44:23,099
this puzzle and at the same time it's

919
00:44:23,099 --> 00:44:25,260
rather serious thing if you can do that

920
00:44:25,260 --> 00:44:27,720
kind of thing so I felt that burden of

921
00:44:27,720 --> 00:44:30,900
100 million users that maybe this would

922
00:44:30,900 --> 00:44:33,960
be fixed in a quite quick quickly so two

923
00:44:33,960 --> 00:44:37,200
weeks about what's the timeline for the

924
00:44:37,200 --> 00:44:38,760
for it

925
00:44:38,760 --> 00:44:41,280
okay we have one more question from

926
00:44:41,280 --> 00:44:42,960
there and then there is a time to pick

927
00:44:42,960 --> 00:44:44,819
the winning question

928
00:44:44,819 --> 00:44:47,880
so since this exploit is like from a

929
00:44:47,880 --> 00:44:49,740
user land and start with a single click

930
00:44:49,740 --> 00:44:52,200
do you think is it possible to get it to

931
00:44:52,200 --> 00:44:54,780
a zero click state by using a webkit

932
00:44:54,780 --> 00:44:57,240
exploit yeah

933
00:44:57,240 --> 00:45:00,060
it could be so uh

934
00:45:00,060 --> 00:45:04,020
actually it went so that this actually

935
00:45:04,020 --> 00:45:06,240
refers to the previous question too that

936
00:45:06,240 --> 00:45:08,040
this is the thing where I started

937
00:45:08,040 --> 00:45:10,500
originally so I started to do the

938
00:45:10,500 --> 00:45:12,780
research for the Alias I started to try

939
00:45:12,780 --> 00:45:15,480
to find out the zero click possibility I

940
00:45:15,480 --> 00:45:18,119
ended up finding the male vulnerability

941
00:45:18,119 --> 00:45:21,599
with which was Zero click so I had a

942
00:45:21,599 --> 00:45:23,940
struggle inside of my mind that suit

943
00:45:23,940 --> 00:45:26,460
diets just combined this or get it

944
00:45:26,460 --> 00:45:29,280
working in a way that with that email I

945
00:45:29,280 --> 00:45:31,740
will of course but during that time I

946
00:45:31,740 --> 00:45:33,960
didn't have full chain for this specific

947
00:45:33,960 --> 00:45:37,319
thing however the male vulnerability was

948
00:45:37,319 --> 00:45:38,280
so

949
00:45:38,280 --> 00:45:42,359
big and like uh concerning that I didn't

950
00:45:42,359 --> 00:45:44,579
want to sit on top of that vulnerability

951
00:45:44,579 --> 00:45:47,400
because after all it was Zero click and

952
00:45:47,400 --> 00:45:49,619
it was existing and there's a quite a

953
00:45:49,619 --> 00:45:52,920
lot of users using the mile app so I

954
00:45:52,920 --> 00:45:55,260
made a simple proof of concept for that

955
00:45:55,260 --> 00:45:57,240
and send it to the apple and continued

956
00:45:57,240 --> 00:45:59,400
with this and started to think about it

957
00:45:59,400 --> 00:46:02,660
maybe this is like a another chapter so

958
00:46:02,660 --> 00:46:05,400
uh definitely it could have been

959
00:46:05,400 --> 00:46:08,960
triggered we are that way

960
00:46:09,060 --> 00:46:13,020
okay uh thank you thank you first

961
00:46:13,020 --> 00:46:15,180
the GoPro

962
00:46:15,180 --> 00:46:18,119
booty back for you thank you and uh

963
00:46:18,119 --> 00:46:21,420
which of the questions you like most I

964
00:46:21,420 --> 00:46:23,780
think there was kind of like uh

965
00:46:23,780 --> 00:46:28,260
the URL the final one then the kind of

966
00:46:28,260 --> 00:46:30,540
start getting started I think I think

967
00:46:30,540 --> 00:46:33,420
they're getting how to get started with

968
00:46:33,420 --> 00:46:35,280
the buck bound is is a good thing

969
00:46:35,280 --> 00:46:37,800
because one of them great motivations

970
00:46:37,800 --> 00:46:40,319
for me to come to speak about the

971
00:46:40,319 --> 00:46:42,180
vulnerabilities that this kind of events

972
00:46:42,180 --> 00:46:46,140
is to encourage the uh younger who are

973
00:46:46,140 --> 00:46:48,000
coming to the business to actually do

974
00:46:48,000 --> 00:46:50,339
some security research so I think that's

975
00:46:50,339 --> 00:46:53,460
the best one okay uh hello can find

976
00:46:53,460 --> 00:46:56,220
later the volunteer who will help so

977
00:46:56,220 --> 00:46:59,240
thank you and we have a coffee break of

978
00:46:59,240 --> 00:47:04,140
26 minutes left we'll be back here at 15

979
00:47:04,140 --> 00:47:08,640
30 and then we'll have two more Legends

980
00:47:08,640 --> 00:47:12,260
of cyber security going to talk us about

981
00:47:12,260 --> 00:47:17,099
thinking models based on attack and

982
00:47:17,099 --> 00:47:21,540
different tools that you don't do the

983
00:47:21,540 --> 00:47:24,180
work for you so see you back in 20 some

984
00:47:24,180 --> 00:47:26,480
minutes

