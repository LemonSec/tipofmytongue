1
00:00:17,780 --> 00:00:20,520
thank you

2
00:00:18,990 --> 00:00:22,500
like you said now my name is Dan Lake I

3
00:00:20,520 --> 00:00:24,689
work in Intel amps so I'm a systems

4
00:00:22,500 --> 00:00:26,340
engineer and I work in a part of the

5
00:00:24,689 --> 00:00:29,580
labs called the system prototyping lab

6
00:00:26,340 --> 00:00:31,080
so we work with a variety of researchers

7
00:00:29,580 --> 00:00:32,610
within the labs and what I do

8
00:00:31,080 --> 00:00:34,710
essentially is build hardware and

9
00:00:32,610 --> 00:00:36,680
software prototypes to help researchers

10
00:00:34,710 --> 00:00:38,580
prove out their ideas before they

11
00:00:36,680 --> 00:00:53,040
potentially and hopefully go into a

12
00:00:38,580 --> 00:00:57,269
product group and I work with Anna but

13
00:00:53,040 --> 00:00:59,280
anyway let's talk about da attacks and

14
00:00:57,269 --> 00:01:02,010
my name is Anna I am a research

15
00:00:59,280 --> 00:01:05,430
scientist at Intel labs I work on the

16
00:01:02,010 --> 00:01:07,200
security side defining the next security

17
00:01:05,430 --> 00:01:10,590
features that are gonna be in future

18
00:01:07,200 --> 00:01:17,930
Intel products and I also hold a PhD in

19
00:01:10,590 --> 00:01:21,090
computer security sorry so this talk is

20
00:01:17,930 --> 00:01:24,060
basically a repetition of the talk that

21
00:01:21,090 --> 00:01:26,580
we did in blackhat so just fair warning

22
00:01:24,060 --> 00:01:28,890
if you have seen this before

23
00:01:26,580 --> 00:01:31,470
you can go to the next talk which is

24
00:01:28,890 --> 00:01:34,830
also amazing but this talk will describe

25
00:01:31,470 --> 00:01:37,140
some early research that we have done in

26
00:01:34,830 --> 00:01:40,470
a new type of physical attack for DRAM

27
00:01:37,140 --> 00:01:43,110
memory and we haven't we don't have a

28
00:01:40,470 --> 00:01:46,980
demo to show unfortunately and we

29
00:01:43,110 --> 00:01:49,050
haven't completed an a full attack but

30
00:01:46,980 --> 00:01:51,360
we will describe the hardware design and

31
00:01:49,050 --> 00:01:54,570
the protocol limitations that our attack

32
00:01:51,360 --> 00:01:57,300
is based on and if such an attack is

33
00:01:54,570 --> 00:01:59,270
successful then the result will be full

34
00:01:57,300 --> 00:02:02,158
access to the entire physical memory and

35
00:01:59,270 --> 00:02:04,770
because the limitation is as I said in

36
00:02:02,159 --> 00:02:06,930
the hardware and the protocol this

37
00:02:04,770 --> 00:02:09,810
attack will be applicable to all types

38
00:02:06,930 --> 00:02:13,050
of memories including normal you Dimps

39
00:02:09,810 --> 00:02:16,890
which is used for desktops sodium's for

40
00:02:13,050 --> 00:02:20,760
laptops and our Dems and all memory

41
00:02:16,890 --> 00:02:24,040
architectures as well first of all let's

42
00:02:20,760 --> 00:02:26,290
do an introduction on what DMA attack is

43
00:02:24,040 --> 00:02:28,239
so it's basically a type of physical

44
00:02:26,290 --> 00:02:31,150
attack where the attacker connects to a

45
00:02:28,239 --> 00:02:33,280
DMA capable port and through that he is

46
00:02:31,150 --> 00:02:36,970
able to gain full read and write access

47
00:02:33,280 --> 00:02:39,879
to the entire physical memory space such

48
00:02:36,970 --> 00:02:44,200
a port could be either a PCIe port or a

49
00:02:39,879 --> 00:02:46,450
firewire port or a usb etc and the goal

50
00:02:44,200 --> 00:02:49,780
for the attacker is to either extract

51
00:02:46,450 --> 00:02:52,780
some secrets that reside in the memory

52
00:02:49,780 --> 00:02:55,689
such as a disk encryption key or to

53
00:02:52,780 --> 00:02:58,269
bypass a corrupted memory and bypass the

54
00:02:55,689 --> 00:03:02,049
platform security policies for instance

55
00:02:58,269 --> 00:03:03,879
modify the page tables in order for to

56
00:03:02,049 --> 00:03:07,900
make one application that was running

57
00:03:03,879 --> 00:03:10,000
with ring 3 rights now run in ring 0 are

58
00:03:07,900 --> 00:03:13,420
also installing malware in the kernel

59
00:03:10,000 --> 00:03:16,870
and an example of an actual DMA attack

60
00:03:13,420 --> 00:03:20,379
is for instance something that elf frisk

61
00:03:16,870 --> 00:03:23,500
demonstrated about a year ago now

62
00:03:20,379 --> 00:03:25,450
in a MacBook Air and through his DMA

63
00:03:23,500 --> 00:03:28,449
attack he was able to obtain the file

64
00:03:25,450 --> 00:03:30,399
volt disk encryption password but

65
00:03:28,449 --> 00:03:32,889
thankfully this attack has been patched

66
00:03:30,400 --> 00:03:36,760
now and your MacBook Airs

67
00:03:32,889 --> 00:03:40,030
are secure from the attackers

68
00:03:36,760 --> 00:03:43,510
perspective the pros of such an attack

69
00:03:40,030 --> 00:03:45,730
is that it's relatively easy and meaning

70
00:03:43,510 --> 00:03:47,918
that there's already off-the-shelf

71
00:03:45,730 --> 00:03:49,780
hardware that you can buy often it's

72
00:03:47,919 --> 00:03:51,940
less than three hundred dollars and

73
00:03:49,780 --> 00:03:53,620
there's software and github and there

74
00:03:51,940 --> 00:03:56,889
are great tutorials that you can follow

75
00:03:53,620 --> 00:04:00,040
and do that attack yourself on the con

76
00:03:56,889 --> 00:04:01,780
side it does require the specific

77
00:04:00,040 --> 00:04:05,590
interface for this attack to work

78
00:04:01,780 --> 00:04:08,799
obviously and there are also mitigations

79
00:04:05,590 --> 00:04:10,720
for that attack so the past few years

80
00:04:08,799 --> 00:04:13,569
there have been medications through

81
00:04:10,720 --> 00:04:16,060
either BIOS and programming the VDD so

82
00:04:13,569 --> 00:04:18,608
that a device cannot have direct access

83
00:04:16,060 --> 00:04:20,260
to the entire physical memory space and

84
00:04:18,608 --> 00:04:22,990
there are some access control there or

85
00:04:20,260 --> 00:04:25,449
you can mitigate this attack by blocking

86
00:04:22,990 --> 00:04:27,280
associated drivers and ports so if you

87
00:04:25,449 --> 00:04:30,280
know in your laptop there you're never

88
00:04:27,280 --> 00:04:32,138
gonna use one port or possibly in your

89
00:04:30,280 --> 00:04:34,270
desktop you're never gonna use this

90
00:04:32,139 --> 00:04:36,420
particular PCIe port then you can just

91
00:04:34,270 --> 00:04:39,599
disable it through BIOS

92
00:04:36,420 --> 00:04:42,540
should be fine so the motivation for our

93
00:04:39,600 --> 00:04:45,030
attack is okay what if we could

94
00:04:42,540 --> 00:04:48,650
eliminate all this cons and make

95
00:04:45,030 --> 00:04:50,940
something that is super duper resilient

96
00:04:48,650 --> 00:04:53,219
but in order to do that we need to

97
00:04:50,940 --> 00:04:56,130
explain a little bit on how the DRM is

98
00:04:53,220 --> 00:04:59,190
designed so basically them consists of a

99
00:04:56,130 --> 00:05:01,740
series of DRM chips which hold tiny

100
00:04:59,190 --> 00:05:04,440
capacitors inside and this is mounted

101
00:05:01,740 --> 00:05:06,390
into your PCB and the DIMM is then

102
00:05:04,440 --> 00:05:08,820
inserted into a dim socket on the

103
00:05:06,390 --> 00:05:10,620
motherboard which has internal traces

104
00:05:08,820 --> 00:05:14,310
and through that the DIMM communicates

105
00:05:10,620 --> 00:05:17,400
with the processor and here's an example

106
00:05:14,310 --> 00:05:21,290
of how it looks like in an actual system

107
00:05:17,400 --> 00:05:24,419
as you can see this is a normal desktop

108
00:05:21,290 --> 00:05:27,930
which has four available Tim sockets and

109
00:05:24,420 --> 00:05:30,450
one of them is populated with London if

110
00:05:27,930 --> 00:05:32,970
you take a closer look to that you can

111
00:05:30,450 --> 00:05:35,550
again see the dim PCB which is the green

112
00:05:32,970 --> 00:05:37,860
part and then the empty dim socket which

113
00:05:35,550 --> 00:05:40,440
is right next to it but if you look

114
00:05:37,860 --> 00:05:43,410
super closely you can see the tiny

115
00:05:40,440 --> 00:05:44,130
silver dots there which are actually the

116
00:05:43,410 --> 00:05:45,690
dim pens

117
00:05:44,130 --> 00:05:48,450
those are the pins that make a

118
00:05:45,690 --> 00:05:52,410
connection between the dim and the and

119
00:05:48,450 --> 00:05:54,060
the processor and if you flip that same

120
00:05:52,410 --> 00:05:57,390
motherboard on the other side you can

121
00:05:54,060 --> 00:06:00,780
again see those same pins because they

122
00:05:57,390 --> 00:06:03,240
are a through-hole so overall all 288

123
00:06:00,780 --> 00:06:05,669
pins for each of those Tim sockets are

124
00:06:03,240 --> 00:06:08,460
exposed on both sides of the motherboard

125
00:06:05,670 --> 00:06:11,130
and those pins are electric electrically

126
00:06:08,460 --> 00:06:13,109
connected so what that means that all

127
00:06:11,130 --> 00:06:16,080
the communication that is going on

128
00:06:13,110 --> 00:06:19,440
between the dim and the motherboard is

129
00:06:16,080 --> 00:06:22,530
visible to anyone and this is a standard

130
00:06:19,440 --> 00:06:27,330
design as well this is not specific for

131
00:06:22,530 --> 00:06:29,580
that specific motherboard so as an

132
00:06:27,330 --> 00:06:33,030
attackers we said okay what if you could

133
00:06:29,580 --> 00:06:35,370
plug into that those pins and observe

134
00:06:33,030 --> 00:06:37,950
that communication that is perfectly

135
00:06:35,370 --> 00:06:41,460
doable but what if you can take it a

136
00:06:37,950 --> 00:06:43,680
step further and issue and connect to

137
00:06:41,460 --> 00:06:46,710
those pins again and issue reads and

138
00:06:43,680 --> 00:06:49,689
writes and to that them and impersonate

139
00:06:46,710 --> 00:06:56,318
an actual memory controller that

140
00:06:49,689 --> 00:06:58,389
- right but in order to do to see how's

141
00:06:56,319 --> 00:07:00,489
that it possible and if that is possible

142
00:06:58,389 --> 00:07:02,549
as well we have to dig a little bit

143
00:07:00,489 --> 00:07:05,438
deeper on how the theorem works right

144
00:07:02,549 --> 00:07:07,688
that is specified by the j-2x standard

145
00:07:05,439 --> 00:07:09,969
which defines the set of requirements

146
00:07:07,689 --> 00:07:12,939
that must be satisfied by all memory

147
00:07:09,969 --> 00:07:15,998
modules and all architectures so that is

148
00:07:12,939 --> 00:07:17,529
something that is global so the first

149
00:07:15,999 --> 00:07:19,899
thing that happens is the DRAM

150
00:07:17,529 --> 00:07:22,509
initialization and this is part of the

151
00:07:19,899 --> 00:07:24,489
bios and in that stage basically the CPU

152
00:07:22,509 --> 00:07:27,489
reads the dim serial presence detect

153
00:07:24,489 --> 00:07:29,258
EEPROM data from the SN bus this

154
00:07:27,489 --> 00:07:31,568
contains information such as the

155
00:07:29,259 --> 00:07:34,689
manufacturer of the DEM the module

156
00:07:31,569 --> 00:07:37,659
serials like supported voltages for the

157
00:07:34,689 --> 00:07:40,209
dim etcetera and this bypasses the

158
00:07:37,659 --> 00:07:42,610
memory controller and the next day state

159
00:07:40,209 --> 00:07:44,860
is that the CPU configures the memory

160
00:07:42,610 --> 00:07:47,319
controller so at that stage this is

161
00:07:44,860 --> 00:07:49,269
again part of the BIOS the CPU decides

162
00:07:47,319 --> 00:07:51,999
on the clock frequency that is going to

163
00:07:49,269 --> 00:07:54,309
use to communicate with the DEM and

164
00:07:51,999 --> 00:07:57,249
configures the memory controller to hold

165
00:07:54,309 --> 00:07:59,289
this information next the memory

166
00:07:57,249 --> 00:08:00,849
controller is responsible to perform

167
00:07:59,289 --> 00:08:04,089
something that is called memory

168
00:08:00,849 --> 00:08:05,889
calibration basically a memory

169
00:08:04,089 --> 00:08:08,499
controller is agnostic of the

170
00:08:05,889 --> 00:08:10,869
motherboard and the dim traces that it

171
00:08:08,499 --> 00:08:13,569
communicates to and that makes sense

172
00:08:10,869 --> 00:08:14,769
because you want a particular memory

173
00:08:13,569 --> 00:08:16,659
controller which is part of the

174
00:08:14,769 --> 00:08:18,789
processor to work with different kinds

175
00:08:16,659 --> 00:08:20,739
of motherboards and that work with

176
00:08:18,789 --> 00:08:23,110
different kinds of dims and at the same

177
00:08:20,739 --> 00:08:25,268
the other way around so you want Adam to

178
00:08:23,110 --> 00:08:28,329
operate with different motherboards

179
00:08:25,269 --> 00:08:31,689
right so the memory controller is it

180
00:08:28,329 --> 00:08:33,610
possible to calculate what are all those

181
00:08:31,689 --> 00:08:36,339
traces and configure itself

182
00:08:33,610 --> 00:08:38,139
appropriately so it calculates the

183
00:08:36,339 --> 00:08:40,629
round-trip time between the memory

184
00:08:38,139 --> 00:08:43,509
controller and them and also calculates

185
00:08:40,629 --> 00:08:45,540
small discrepancies between the the

186
00:08:43,509 --> 00:08:49,660
different traces so as I said there are

187
00:08:45,540 --> 00:08:51,550
288 pins one trace might be a little

188
00:08:49,660 --> 00:08:53,649
longer than the other so the memory

189
00:08:51,550 --> 00:08:56,740
controller needs to take to take this

190
00:08:53,649 --> 00:08:58,779
into account as well and the final part

191
00:08:56,740 --> 00:09:01,420
of the initialization is that the memory

192
00:08:58,779 --> 00:09:03,080
controller sets the dims mode registers

193
00:09:01,420 --> 00:09:05,870
those are red

194
00:09:03,080 --> 00:09:08,630
that enable or disable features that the

195
00:09:05,870 --> 00:09:11,000
DIMM supports and it also does some

196
00:09:08,630 --> 00:09:12,980
fine-tuning for the timing so if you

197
00:09:11,000 --> 00:09:17,840
want to overclock your damn you need to

198
00:09:12,980 --> 00:09:20,630
tweak those registers a little bit next

199
00:09:17,840 --> 00:09:22,730
is what happens when the during normal

200
00:09:20,630 --> 00:09:25,520
operation so when your computer is

201
00:09:22,730 --> 00:09:29,450
active and the processor doing actively

202
00:09:25,520 --> 00:09:31,400
reads and writes to the memory in that

203
00:09:29,450 --> 00:09:34,640
case the memory controller needs to

204
00:09:31,400 --> 00:09:37,069
schedule these accesses and optimize

205
00:09:34,640 --> 00:09:39,980
them and the memory controller also

206
00:09:37,070 --> 00:09:45,140
schedules periodic memory refreshes so

207
00:09:39,980 --> 00:09:48,020
because this is the memory contents

208
00:09:45,140 --> 00:09:49,939
degrade over time this is how DRAM

209
00:09:48,020 --> 00:09:53,270
normal diagrams work the memory

210
00:09:49,940 --> 00:10:02,150
controller issues periodic refreshes to

211
00:09:53,270 --> 00:10:04,069
hold the data they're very nice and then

212
00:10:02,150 --> 00:10:07,550
is what happens during sleep in

213
00:10:04,070 --> 00:10:11,030
particular I'm talking about s3 suspend

214
00:10:07,550 --> 00:10:14,390
mode which is a mode where the CPU is

215
00:10:11,030 --> 00:10:17,600
powered off but the memory contents are

216
00:10:14,390 --> 00:10:20,210
held there and when you wake up from the

217
00:10:17,600 --> 00:10:22,850
state then it's a little bit faster than

218
00:10:20,210 --> 00:10:25,670
doing say hibernate where the memory

219
00:10:22,850 --> 00:10:28,370
contents are lost so in this particular

220
00:10:25,670 --> 00:10:31,280
state s3 the memory controller is

221
00:10:28,370 --> 00:10:33,820
powered off the CPU is part of the DIMM

222
00:10:31,280 --> 00:10:38,480
is powered on and it's in self refresh

223
00:10:33,820 --> 00:10:41,450
state so that it holds its memory and a

224
00:10:38,480 --> 00:10:43,280
clock a particular signal that is

225
00:10:41,450 --> 00:10:46,190
controlled by the memory controller is

226
00:10:43,280 --> 00:10:49,100
the clock enable signal and this needs

227
00:10:46,190 --> 00:10:51,980
to be to zero the rest of the signals

228
00:10:49,100 --> 00:10:54,470
are in tri-state this is a pretty

229
00:10:51,980 --> 00:10:57,740
important signal because this is what

230
00:10:54,470 --> 00:11:01,040
the dim is gonna monitor and as soon as

231
00:10:57,740 --> 00:11:03,560
this cke signal goes to one then the the

232
00:11:01,040 --> 00:11:07,550
dim will wake up and you can then issue

233
00:11:03,560 --> 00:11:10,250
again reads and writes to the memory so

234
00:11:07,550 --> 00:11:12,640
overall there is a protocol limitation

235
00:11:10,250 --> 00:11:14,510
and that is that there is no particular

236
00:11:12,640 --> 00:11:16,080
authentication between the memory

237
00:11:14,510 --> 00:11:18,000
controller or the DEM

238
00:11:16,080 --> 00:11:20,340
and there is no state information that

239
00:11:18,000 --> 00:11:22,530
is held on the dim everything including

240
00:11:20,340 --> 00:11:25,410
the calibration results which are

241
00:11:22,530 --> 00:11:27,839
identical for that system are held in

242
00:11:25,410 --> 00:11:30,510
the memory controller side not on the

243
00:11:27,840 --> 00:11:32,400
dim side so basically nothing prevents

244
00:11:30,510 --> 00:11:34,500
an attacker from impersonating and

245
00:11:32,400 --> 00:11:36,449
memory controller to the dim because the

246
00:11:34,500 --> 00:11:41,880
dim is agnostic to the memory controller

247
00:11:36,450 --> 00:11:44,640
that it works with okay but how we could

248
00:11:41,880 --> 00:11:47,160
exploit that the idea that we had is to

249
00:11:44,640 --> 00:11:49,740
create a device that would attach to

250
00:11:47,160 --> 00:11:52,410
those exposed signal pins that I showed

251
00:11:49,740 --> 00:11:55,170
you earlier and impersonate a memory

252
00:11:52,410 --> 00:11:57,300
controller to the DEM however that would

253
00:11:55,170 --> 00:12:00,020
be extremely difficult when the system

254
00:11:57,300 --> 00:12:03,689
is in is in normal operation in s0

255
00:12:00,020 --> 00:12:06,660
because the the cpu and the original

256
00:12:03,690 --> 00:12:09,180
memory controller would issue reads and

257
00:12:06,660 --> 00:12:11,189
writes constantly and we will in our

258
00:12:09,180 --> 00:12:14,609
device will interleave with that and

259
00:12:11,190 --> 00:12:16,590
that would be caused a mess however that

260
00:12:14,610 --> 00:12:19,170
attack would be possible when the system

261
00:12:16,590 --> 00:12:22,590
is in s3 sleep because at that point

262
00:12:19,170 --> 00:12:25,319
there's nothing that communicates with a

263
00:12:22,590 --> 00:12:29,160
DDR and will be the sole owner of that

264
00:12:25,320 --> 00:12:31,290
bus and an example of a realistic attack

265
00:12:29,160 --> 00:12:34,560
would be to say victim go to a

266
00:12:31,290 --> 00:12:37,469
conference and leave aids system to

267
00:12:34,560 --> 00:12:40,109
sleep then the attacker could get hold

268
00:12:37,470 --> 00:12:42,480
of this system and attaches the rogue

269
00:12:40,110 --> 00:12:45,270
memory controller device that I

270
00:12:42,480 --> 00:12:49,890
mentioned to those exposed pins and the

271
00:12:45,270 --> 00:12:51,900
attacker now would own that system so

272
00:12:49,890 --> 00:12:54,210
the requirements for this successful

273
00:12:51,900 --> 00:12:56,670
exploitation would be as I said to

274
00:12:54,210 --> 00:12:58,800
attach the Raghav American troller to

275
00:12:56,670 --> 00:13:01,380
the victim system while that system is

276
00:12:58,800 --> 00:13:04,050
in s3 sleep pulled the clock enable

277
00:13:01,380 --> 00:13:06,930
signal to one in order to wake up to

278
00:13:04,050 --> 00:13:08,609
them perform the calibration between

279
00:13:06,930 --> 00:13:10,739
their Rock memory controller and the

280
00:13:08,610 --> 00:13:13,560
memory bus traces because we're gonna

281
00:13:10,740 --> 00:13:15,960
introduce new traces and our memory

282
00:13:13,560 --> 00:13:18,959
controller needs to tune for that in

283
00:13:15,960 --> 00:13:21,570
order to do successful in communication

284
00:13:18,960 --> 00:13:24,120
with Adam then obviously the attacker

285
00:13:21,570 --> 00:13:26,730
needs to send memory reads and writes

286
00:13:24,120 --> 00:13:28,760
commands because we need to read do

287
00:13:26,730 --> 00:13:31,520
reads and writes for the attack

288
00:13:28,760 --> 00:13:33,410
then put the clock enable signal to zero

289
00:13:31,520 --> 00:13:36,530
in order to put the dim to sleep and

290
00:13:33,410 --> 00:13:39,800
finally detach from the victim system in

291
00:13:36,530 --> 00:13:41,689
order to wake up normally so now the

292
00:13:39,800 --> 00:13:45,709
owner of that system would never notice

293
00:13:41,690 --> 00:13:46,940
that an attack has happened and next

294
00:13:45,710 --> 00:13:50,350
we're going to go through each one of

295
00:13:46,940 --> 00:13:50,350
those builders that I showed you earlier

296
00:13:54,280 --> 00:14:00,020
okay so in order to get the system while

297
00:13:58,550 --> 00:14:01,729
the system is asleep we want to be able

298
00:14:00,020 --> 00:14:03,530
to wake up the dim and be able to talk

299
00:14:01,730 --> 00:14:04,730
to it as a rogue member controller so

300
00:14:03,530 --> 00:14:07,610
the first thing our device

301
00:14:04,730 --> 00:14:10,010
needs to do is to issue a self refresh

302
00:14:07,610 --> 00:14:11,900
exit command and the way that it does

303
00:14:10,010 --> 00:14:13,850
that is through the use of this cke

304
00:14:11,900 --> 00:14:15,740
signal so there's just this one signal

305
00:14:13,850 --> 00:14:19,340
that if we can control this signal we

306
00:14:15,740 --> 00:14:20,960
can tell the dim to wake up so here in

307
00:14:19,340 --> 00:14:23,030
the diagram we show the dim on the right

308
00:14:20,960 --> 00:14:25,430
and what we call the victim memory

309
00:14:23,030 --> 00:14:28,760
controller on the left and then we come

310
00:14:25,430 --> 00:14:30,589
in and we apply a voltage to that pin to

311
00:14:28,760 --> 00:14:32,900
try to get it into a logic high state

312
00:14:30,590 --> 00:14:34,460
while the memory controller is actively

313
00:14:32,900 --> 00:14:37,069
trying to keep that signal in a low

314
00:14:34,460 --> 00:14:39,320
state so in order to not attach the

315
00:14:37,070 --> 00:14:40,970
voltage directly on to a ground pin of

316
00:14:39,320 --> 00:14:42,860
the memory controller and potentially

317
00:14:40,970 --> 00:14:45,140
damaging our processor with the

318
00:14:42,860 --> 00:14:47,180
integrated memory controller we attach

319
00:14:45,140 --> 00:14:48,920
what we call the attacker's resistor

320
00:14:47,180 --> 00:14:50,150
here so we just want to limit the amount

321
00:14:48,920 --> 00:14:52,579
of current that's going to be flowing

322
00:14:50,150 --> 00:14:55,189
into the memory controller so what we

323
00:14:52,580 --> 00:14:56,360
did in the lab is we brought you know

324
00:14:55,190 --> 00:14:58,190
actually a variety of different

325
00:14:56,360 --> 00:15:00,140
motherboards to test out this

326
00:14:58,190 --> 00:15:03,020
methodology with a variety of different

327
00:15:00,140 --> 00:15:06,680
resistors and voltages to test are we

328
00:15:03,020 --> 00:15:08,660
able to wake up the the dim just using a

329
00:15:06,680 --> 00:15:12,739
power supply and and our attacker

330
00:15:08,660 --> 00:15:14,449
resistor so this is a picture of one of

331
00:15:12,740 --> 00:15:16,310
the benches in my lab and with the

332
00:15:14,450 --> 00:15:18,530
microscope and you can see in the center

333
00:15:16,310 --> 00:15:20,359
picture here there's a little blue wire

334
00:15:18,530 --> 00:15:22,640
that we poked into one of those signals

335
00:15:20,360 --> 00:15:24,260
that Anna pointed out earlier the

336
00:15:22,640 --> 00:15:26,060
diagram on the right shows you where the

337
00:15:24,260 --> 00:15:28,370
blue wire is and just out of the frame

338
00:15:26,060 --> 00:15:29,989
there there's a resistor and I think we

339
00:15:28,370 --> 00:15:33,140
probably built half a dozen or a dozen

340
00:15:29,990 --> 00:15:34,550
of the little resistor wires and tested

341
00:15:33,140 --> 00:15:37,069
it with different voltages and different

342
00:15:34,550 --> 00:15:39,229
resistances and we found it across the

343
00:15:37,070 --> 00:15:42,200
board with at least both the ddr3 and

344
00:15:39,230 --> 00:15:46,520
ddr4 in a variety of regice

345
00:15:42,200 --> 00:15:50,120
unbuffered non-ecc varieties we are able

346
00:15:46,520 --> 00:15:53,210
to wake up the the dim using this

347
00:15:50,120 --> 00:15:55,010
methodology so we found that for for

348
00:15:53,210 --> 00:15:57,950
some of them we could use a resistor

349
00:15:55,010 --> 00:16:01,010
around 50 ohms and around 1.2 volts for

350
00:15:57,950 --> 00:16:03,110
ddr4 and we were able to wake this up we

351
00:16:01,010 --> 00:16:05,990
then went through the rest of those 288

352
00:16:03,110 --> 00:16:08,180
signals on the dim saw some of them are

353
00:16:05,990 --> 00:16:10,190
already various power rails some of them

354
00:16:08,180 --> 00:16:12,050
are ground rails but we went through

355
00:16:10,190 --> 00:16:14,240
each of the remaining like the address

356
00:16:12,050 --> 00:16:15,770
lines and the various control lines and

357
00:16:14,240 --> 00:16:18,860
make sure that we could positively

358
00:16:15,770 --> 00:16:21,140
assert a value of 1 or a value of 0

359
00:16:18,860 --> 00:16:23,330
while the memory controller was sleeping

360
00:16:21,140 --> 00:16:25,370
so once we validated that we know that

361
00:16:23,330 --> 00:16:30,650
we can completely own that bus while the

362
00:16:25,370 --> 00:16:31,850
processor is asleep so the first thing

363
00:16:30,650 --> 00:16:33,770
that we need to do that and once we've

364
00:16:31,850 --> 00:16:36,380
once we've owned that bus is to attach

365
00:16:33,770 --> 00:16:37,730
our rogue memory controller and as Anna

366
00:16:36,380 --> 00:16:39,560
mentioned we need to be able to train

367
00:16:37,730 --> 00:16:42,200
our memory controller against the bus

368
00:16:39,560 --> 00:16:44,030
because every different motherboard you

369
00:16:42,200 --> 00:16:45,680
attach to and every different DIMM that

370
00:16:44,030 --> 00:16:47,120
you connect into that motherboard is

371
00:16:45,680 --> 00:16:49,640
going to have different link signals

372
00:16:47,120 --> 00:16:51,980
different impedances and all sorts of

373
00:16:49,640 --> 00:16:53,330
layouts that are they all within the

374
00:16:51,980 --> 00:16:55,880
jeddak's standard but there's a wide

375
00:16:53,330 --> 00:16:57,560
variety of acceptable layouts as you

376
00:16:55,880 --> 00:16:59,300
know you can look at dims from a variety

377
00:16:57,560 --> 00:17:02,660
of manufacturers they all look different

378
00:16:59,300 --> 00:17:04,310
to some degree so normally the system

379
00:17:02,660 --> 00:17:05,599
does this when it first boots up the

380
00:17:04,310 --> 00:17:08,149
memory controller on your motherboard

381
00:17:05,599 --> 00:17:10,099
talks with the dims because it has to be

382
00:17:08,150 --> 00:17:12,560
designed that processor has to work with

383
00:17:10,099 --> 00:17:14,569
any motherboard in any dim so once it's

384
00:17:12,560 --> 00:17:16,159
done that it stores the results in the

385
00:17:14,569 --> 00:17:18,050
memory controller but our memory

386
00:17:16,160 --> 00:17:20,000
controller perhaps has never seen this

387
00:17:18,050 --> 00:17:22,339
board before so we have to do that when

388
00:17:20,000 --> 00:17:23,510
we first connect one of the advantages

389
00:17:22,339 --> 00:17:27,859
to that though is that if we're

390
00:17:23,510 --> 00:17:29,420
targeting a specific victim system if we

391
00:17:27,859 --> 00:17:30,889
have the opportunity to see what brand

392
00:17:29,420 --> 00:17:33,320
of motherboard they're using in the

393
00:17:30,890 --> 00:17:34,820
model and maybe get a our eyeballs in

394
00:17:33,320 --> 00:17:37,159
and see what memory they're using we can

395
00:17:34,820 --> 00:17:38,720
actually pre calibrate before connecting

396
00:17:37,160 --> 00:17:40,850
to the system so we don't have to do

397
00:17:38,720 --> 00:17:42,050
this stage which may take some time to

398
00:17:40,850 --> 00:17:44,959
find the right settings for that

399
00:17:42,050 --> 00:17:46,970
particular system and then the

400
00:17:44,960 --> 00:17:48,980
calibration results could be the same

401
00:17:46,970 --> 00:17:52,930
across all the different systems that

402
00:17:48,980 --> 00:17:54,770
are the same so once we've connected the

403
00:17:52,930 --> 00:17:55,980
designers of these motherboards take

404
00:17:54,770 --> 00:17:58,020
great care to make sure that

405
00:17:55,980 --> 00:17:59,940
there's no stubs and impedance

406
00:17:58,020 --> 00:18:01,679
discontinuities on the motherboard so

407
00:17:59,940 --> 00:18:03,600
they get the highest quality signal

408
00:18:01,679 --> 00:18:05,880
going between the processor and the

409
00:18:03,600 --> 00:18:07,350
memory so obviously when we come along

410
00:18:05,880 --> 00:18:09,360
and we attach on an additional device

411
00:18:07,350 --> 00:18:11,428
we're adding loading onto that bus that

412
00:18:09,360 --> 00:18:14,100
the designer didn't expect to be there

413
00:18:11,429 --> 00:18:15,960
and one of the ways that we can mitigate

414
00:18:14,100 --> 00:18:18,840
some of the signal integrity issues is

415
00:18:15,960 --> 00:18:21,570
to run the ddr at a lower frequency so

416
00:18:18,840 --> 00:18:22,470
as I mentioned earlier the frequency

417
00:18:21,570 --> 00:18:24,090
that you're running whether you're

418
00:18:22,470 --> 00:18:27,870
overclocking your board or not that's

419
00:18:24,090 --> 00:18:29,580
actually decided by the the processor

420
00:18:27,870 --> 00:18:31,439
and the BIOS settings in your processor

421
00:18:29,580 --> 00:18:33,330
but the memory doesn't really care what

422
00:18:31,440 --> 00:18:35,400
frequency you're running it at as long

423
00:18:33,330 --> 00:18:37,159
as you're within the the jeddak's

424
00:18:35,400 --> 00:18:41,510
specification for that particular unit

425
00:18:37,160 --> 00:18:43,860
so once we connect and we calibrate

426
00:18:41,510 --> 00:18:45,570
against that we can actually run at

427
00:18:43,860 --> 00:18:47,428
whatever frequency you want down to a

428
00:18:45,570 --> 00:18:50,870
certain threshold and about 800

429
00:18:47,429 --> 00:18:53,940
megahertz is the low threshold for ddr4

430
00:18:50,870 --> 00:18:56,729
because the ddr4 technology introduces

431
00:18:53,940 --> 00:19:00,179
something called a delay lock loop and

432
00:18:56,730 --> 00:19:01,830
that DLL inside the RAM ensures that all

433
00:19:00,179 --> 00:19:04,049
the timing between the clocks and the

434
00:19:01,830 --> 00:19:05,870
data is line up but it also means that

435
00:19:04,049 --> 00:19:08,490
you can't run your clock too slow

436
00:19:05,870 --> 00:19:09,870
fortunately one of the things in the

437
00:19:08,490 --> 00:19:11,309
jeddak's pack allows you to turn off

438
00:19:09,870 --> 00:19:13,559
that don't lock loop

439
00:19:11,309 --> 00:19:15,149
so once we've calibrated we want to turn

440
00:19:13,559 --> 00:19:17,280
off the delay lock loop and then we can

441
00:19:15,150 --> 00:19:19,590
actually run our clock extremely slow

442
00:19:17,280 --> 00:19:21,870
and although the memory performance is

443
00:19:19,590 --> 00:19:24,240
going to be lower it allows us to scan

444
00:19:21,870 --> 00:19:31,580
through the memory with less signal

445
00:19:24,240 --> 00:19:31,580
integrity violations yes

446
00:19:31,929 --> 00:19:36,559
why don't we hold till the end yeah well

447
00:19:34,549 --> 00:19:37,820
we'll try to finish up and give a few

448
00:19:36,559 --> 00:19:39,408
minutes for questions yeah

449
00:19:37,820 --> 00:19:41,059
so once we've calibrated and we will

450
00:19:39,409 --> 00:19:42,139
reduce the clock frequency then we can

451
00:19:41,059 --> 00:19:44,720
issue the reads and writes just

452
00:19:42,139 --> 00:19:46,129
following the jeddak's specification if

453
00:19:44,720 --> 00:19:47,720
you're familiar with the DDR

454
00:19:46,129 --> 00:19:49,639
specification there's kind of a large

455
00:19:47,720 --> 00:19:52,809
state machine for how to activate and

456
00:19:49,639 --> 00:19:54,738
address the rows and the banks and

457
00:19:52,809 --> 00:19:56,749
that's something that the memory

458
00:19:54,739 --> 00:19:59,090
controller in our in our device that

459
00:19:56,749 --> 00:20:00,529
we've built actually we use just use an

460
00:19:59,090 --> 00:20:05,259
off-the-shelf memory controller that has

461
00:20:00,529 --> 00:20:07,730
all this functionality in it so you see

462
00:20:05,259 --> 00:20:10,700
and here it is so this is a board that

463
00:20:07,730 --> 00:20:13,940
we built in our lab so we're using an

464
00:20:10,700 --> 00:20:16,009
FPGA and we're using a ddr4 in this case

465
00:20:13,940 --> 00:20:19,970
so up above here you can see there's a

466
00:20:16,009 --> 00:20:21,799
slot where there would be a ddr4 like a

467
00:20:19,970 --> 00:20:24,169
dim socket like you would find on your

468
00:20:21,799 --> 00:20:24,889
motherboard but in the boards that I

469
00:20:24,169 --> 00:20:27,950
built

470
00:20:24,889 --> 00:20:29,539
I only populated one with that socket

471
00:20:27,950 --> 00:20:31,399
and the rest of them I actually leave it

472
00:20:29,539 --> 00:20:32,899
empty so that we can play around with

473
00:20:31,399 --> 00:20:38,268
some of those pins on the back of the

474
00:20:32,899 --> 00:20:40,879
motherboard and then the plan here is we

475
00:20:38,269 --> 00:20:42,859
build a mechanical electromechanical

476
00:20:40,879 --> 00:20:44,570
connector that attaches onto the

477
00:20:42,859 --> 00:20:47,239
backside of that motherboard it uses

478
00:20:44,570 --> 00:20:49,789
these little crown tip spring popes that

479
00:20:47,239 --> 00:20:51,529
can grab on to those signals and then we

480
00:20:49,789 --> 00:20:53,029
actually you can see the bottom here the

481
00:20:51,529 --> 00:20:55,220
rogue memory controller board this is

482
00:20:53,029 --> 00:20:57,409
the board I just showed you it has all

483
00:20:55,220 --> 00:20:59,389
of these pins in it and when we apply it

484
00:20:57,409 --> 00:21:03,559
to the backside it allows a simultaneous

485
00:20:59,389 --> 00:21:06,219
access to the entire 288 pins of one of

486
00:21:03,559 --> 00:21:06,220
those dim slots

487
00:21:12,620 --> 00:21:17,039
great thank you Dan

488
00:21:14,700 --> 00:21:19,860
and so overall the thread model that we

489
00:21:17,039 --> 00:21:21,870
have built for this attack is that this

490
00:21:19,860 --> 00:21:24,539
attack requires a hardware a skilled

491
00:21:21,870 --> 00:21:26,489
Hardware attacker and it also obviously

492
00:21:24,539 --> 00:21:30,299
requires physical access to the victim

493
00:21:26,490 --> 00:21:32,340
system our attack is also invasive not

494
00:21:30,299 --> 00:21:36,150
in the terms that it will make it will

495
00:21:32,340 --> 00:21:38,850
modify the the victim system in any way

496
00:21:36,150 --> 00:21:40,890
but it's invasive in the terms that you

497
00:21:38,850 --> 00:21:43,620
have to dig out the motherboard out of

498
00:21:40,890 --> 00:21:45,330
the system you're gonna attack so that

499
00:21:43,620 --> 00:21:47,219
requires a little bit of time especially

500
00:21:45,330 --> 00:21:50,610
if it's a laptop and it's gonna be not

501
00:21:47,220 --> 00:21:52,590
be noticeable as well and finally it may

502
00:21:50,610 --> 00:21:55,379
require some prior knowledge of the

503
00:21:52,590 --> 00:21:58,649
victim system spec so if you know that

504
00:21:55,380 --> 00:22:01,110
you're gonna attack that system with

505
00:21:58,649 --> 00:22:04,168
that motherboard it's if you have this

506
00:22:01,110 --> 00:22:06,779
knowledge then you can pre calibrate the

507
00:22:04,169 --> 00:22:08,640
the solution the the board that Dan

508
00:22:06,779 --> 00:22:10,370
showed you and then you don't need to do

509
00:22:08,640 --> 00:22:14,070
the calibration all over again because

510
00:22:10,370 --> 00:22:15,928
it will be the same across systems that

511
00:22:14,070 --> 00:22:20,879
have the same memory module and same

512
00:22:15,929 --> 00:22:23,700
processor for the future work that we

513
00:22:20,880 --> 00:22:26,850
have is to obviously complete complete

514
00:22:23,700 --> 00:22:28,799
this mechanical connector and attach it

515
00:22:26,850 --> 00:22:31,320
to the board that we already have and

516
00:22:28,799 --> 00:22:34,620
then run the full attacks the full

517
00:22:31,320 --> 00:22:38,129
attack against the the memory bus and we

518
00:22:34,620 --> 00:22:42,870
as Dan mentioned we anticipate to have a

519
00:22:38,130 --> 00:22:46,020
signal noise and reflection problem but

520
00:22:42,870 --> 00:22:50,908
this could be mitigated if we make the

521
00:22:46,020 --> 00:22:52,770
clock if we clock it low enough then we

522
00:22:50,909 --> 00:22:55,919
think that it's not gonna be a huge

523
00:22:52,770 --> 00:23:00,720
issue plus we don't necessarily need to

524
00:22:55,919 --> 00:23:03,179
do rely to all the rights to all all the

525
00:23:00,720 --> 00:23:05,850
reads to be perfectly we can do them

526
00:23:03,179 --> 00:23:08,490
three times four times five times and

527
00:23:05,850 --> 00:23:11,969
then when we read the data back if it's

528
00:23:08,490 --> 00:23:14,600
what we expect then we're golden

529
00:23:11,970 --> 00:23:18,780
in terms of mitigation for this attack

530
00:23:14,600 --> 00:23:21,330
one that it's a little bit silly is to

531
00:23:18,780 --> 00:23:22,260
just not use sleep and use hibernate and

532
00:23:21,330 --> 00:23:24,178
said

533
00:23:22,260 --> 00:23:27,030
and also I think it's a good idea to

534
00:23:24,179 --> 00:23:30,090
focus on the physical security if you

535
00:23:27,030 --> 00:23:32,460
care about your system if it holds

536
00:23:30,090 --> 00:23:37,918
something that's really important in

537
00:23:32,460 --> 00:23:40,200
terms of long-term we plan to be able to

538
00:23:37,919 --> 00:23:43,410
enhance the dim socket and the bother

539
00:23:40,200 --> 00:23:46,020
board design in order to not have those

540
00:23:43,410 --> 00:23:47,850
pins there in the first place because

541
00:23:46,020 --> 00:23:52,049
this is something that it's doable and

542
00:23:47,850 --> 00:23:53,909
we would also like to enhance the Jade

543
00:23:52,049 --> 00:23:55,980
expect to perform some kind of

544
00:23:53,910 --> 00:23:58,110
authentication between the memory

545
00:23:55,980 --> 00:24:01,890
controller and them and not trust it

546
00:23:58,110 --> 00:24:03,840
blindly so to conclude this talk we

547
00:24:01,890 --> 00:24:07,049
describe some early research that we

548
00:24:03,840 --> 00:24:10,678
have done regarding a DMA attack it

549
00:24:07,049 --> 00:24:12,629
requires a skilled attacker and we this

550
00:24:10,679 --> 00:24:16,080
attack exploits a hardware design and

551
00:24:12,630 --> 00:24:19,530
protocol limitation this is new line of

552
00:24:16,080 --> 00:24:21,360
research for physical security I hope we

553
00:24:19,530 --> 00:24:23,970
will be able to influence other people

554
00:24:21,360 --> 00:24:26,699
to go into there and there are short

555
00:24:23,970 --> 00:24:28,800
term and long term medications so thank

556
00:24:26,700 --> 00:24:34,310
you

557
00:24:28,800 --> 00:24:37,310
[Applause]

558
00:24:34,310 --> 00:24:37,310
questions

559
00:24:42,610 --> 00:24:44,669
you

