1
00:00:15,730 --> 00:00:21,650
all right good afternoon everybody house

2
00:00:18,349 --> 00:00:25,279
hello zombicide so far a lot of really

3
00:00:21,650 --> 00:00:27,590
interesting talks all right so my talk

4
00:00:25,279 --> 00:00:29,450
today is a little bit just about some

5
00:00:27,590 --> 00:00:30,560
research that I was doing recently and I

6
00:00:29,450 --> 00:00:32,780
think it was some pretty interesting

7
00:00:30,560 --> 00:00:34,940
stuff so I want to tell you guys what I

8
00:00:32,780 --> 00:00:37,100
discovered and through doing this

9
00:00:34,940 --> 00:00:40,879
research I also found a potential

10
00:00:37,100 --> 00:00:43,370
weakness in a security mechanism so to

11
00:00:40,879 --> 00:00:45,470
get started with this presentation is

12
00:00:43,370 --> 00:00:47,809
just a narrative of the research that I

13
00:00:45,470 --> 00:00:51,010
was doing recently I was looking into

14
00:00:47,809 --> 00:00:54,260
split stacks and threading during

15
00:00:51,010 --> 00:00:56,960
program execution and some of the

16
00:00:54,260 --> 00:00:58,760
security mechanisms behind these the

17
00:00:56,960 --> 00:01:01,250
main driver of this talk is something

18
00:00:58,760 --> 00:01:03,559
called a split stack a split stack is an

19
00:01:01,250 --> 00:01:05,960
alternative to a traditional program

20
00:01:03,559 --> 00:01:08,810
execution stack and I'll go into all the

21
00:01:05,960 --> 00:01:10,399
details in just a minute but I really

22
00:01:08,810 --> 00:01:14,179
want to understand how split stacks work

23
00:01:10,399 --> 00:01:18,439
so that formed the basis of this talk

24
00:01:14,179 --> 00:01:20,720
and all right well a little bit about

25
00:01:18,439 --> 00:01:25,729
myself you know it doesn't matter all

26
00:01:20,720 --> 00:01:28,130
right okay so as I mentioned once you

27
00:01:25,729 --> 00:01:30,320
understand how a stack works during

28
00:01:28,130 --> 00:01:32,390
execution time you can then start

29
00:01:30,320 --> 00:01:36,169
plugging it with various types of

30
00:01:32,390 --> 00:01:37,340
attacks and in particular I'll just go

31
00:01:36,170 --> 00:01:40,520
ahead and give you the TLDR

32
00:01:37,340 --> 00:01:42,259
at the for the whole talk here is that a

33
00:01:40,520 --> 00:01:43,970
security mechanism known as they stack

34
00:01:42,259 --> 00:01:45,799
canary which if you're not familiar with

35
00:01:43,970 --> 00:01:48,710
I'll go into how they are implemented in

36
00:01:45,799 --> 00:01:51,619
a minute they actually provide a

37
00:01:48,710 --> 00:01:53,929
fingerprint into a opaque memory space

38
00:01:51,619 --> 00:01:56,420
so when you launch a program it belongs

39
00:01:53,930 --> 00:01:59,780
to this giant blob of memory well I can

40
00:01:56,420 --> 00:02:01,579
now find you cannot find return

41
00:01:59,780 --> 00:02:03,890
addresses if you have stack Canaries

42
00:02:01,579 --> 00:02:05,839
enabled because stack Canaries have a

43
00:02:03,890 --> 00:02:08,000
certain fingerprint that sticks out of

44
00:02:05,840 --> 00:02:09,950
the memory space so if you're an

45
00:02:08,000 --> 00:02:12,500
attacker and you're scanning the

46
00:02:09,949 --> 00:02:14,810
system's memory well if they're running

47
00:02:12,500 --> 00:02:16,459
with the security mechanism enabled you

48
00:02:14,810 --> 00:02:18,590
can you can find where the return

49
00:02:16,459 --> 00:02:20,299
addresses are and you know that if you

50
00:02:18,590 --> 00:02:23,600
can compromise a return address and you

51
00:02:20,299 --> 00:02:25,990
can compromise a program or I best make

52
00:02:23,600 --> 00:02:29,750
the program crash

53
00:02:25,990 --> 00:02:30,980
alright so the background material I'm

54
00:02:29,750 --> 00:02:34,390
sure many you guys are familiar with

55
00:02:30,980 --> 00:02:37,070
stacks stacks that's the stack of stacks

56
00:02:34,390 --> 00:02:39,679
okay so I'm just gonna kind of cover

57
00:02:37,070 --> 00:02:42,430
everything which will help paint the

58
00:02:39,680 --> 00:02:45,590
story about the attack

59
00:02:42,430 --> 00:02:47,930
okay so stacks if you're not aware are a

60
00:02:45,590 --> 00:02:49,970
data structure that contained things it

61
00:02:47,930 --> 00:02:52,520
just contains information in this data

62
00:02:49,970 --> 00:02:54,859
structure they're used all throughout

63
00:02:52,520 --> 00:02:56,360
computer science but the idea here is

64
00:02:54,860 --> 00:02:59,420
that they're to operations you can

65
00:02:56,360 --> 00:03:01,670
perform to a stack you can push items or

66
00:02:59,420 --> 00:03:04,220
push data onto the top of the stack or

67
00:03:01,670 --> 00:03:06,619
you can remove items from the top of the

68
00:03:04,220 --> 00:03:09,650
stack there's only two operations a push

69
00:03:06,620 --> 00:03:11,300
or pop and they only occur to the top of

70
00:03:09,650 --> 00:03:12,620
the stack you cannot manipulate the

71
00:03:11,300 --> 00:03:14,630
middle of the stack or the bottom of the

72
00:03:12,620 --> 00:03:16,120
stack as I said this is used all through

73
00:03:14,630 --> 00:03:20,120
our computer science but what's

74
00:03:16,120 --> 00:03:22,160
important here our execution stacks so

75
00:03:20,120 --> 00:03:26,420
an execution stack is what a program

76
00:03:22,160 --> 00:03:28,220
uses during runtime so if you think

77
00:03:26,420 --> 00:03:30,440
about what a program does it starts off

78
00:03:28,220 --> 00:03:33,140
in the main function then you call

79
00:03:30,440 --> 00:03:35,620
subsequent functions so main calls foo

80
00:03:33,140 --> 00:03:38,600
foo calls bar and the whole series of

81
00:03:35,620 --> 00:03:40,760
functions are getting executed well you

82
00:03:38,600 --> 00:03:42,590
have to store information about that

83
00:03:40,760 --> 00:03:45,859
function the local variables in the

84
00:03:42,590 --> 00:03:49,340
function the return address of the

85
00:03:45,860 --> 00:03:51,350
function and the parameters or the

86
00:03:49,340 --> 00:03:52,790
arguments passed to the function

87
00:03:51,350 --> 00:03:55,970
they all belong in this temporary

88
00:03:52,790 --> 00:03:59,480
storage area of the process known as the

89
00:03:55,970 --> 00:04:00,980
execution stack every frame has is an

90
00:03:59,480 --> 00:04:03,140
item that is pushed onto the top of the

91
00:04:00,980 --> 00:04:05,060
stack when you call a function and when

92
00:04:03,140 --> 00:04:07,820
you return from the function you pop

93
00:04:05,060 --> 00:04:10,090
that stack frame off or that activation

94
00:04:07,820 --> 00:04:12,200
record or whatever you want to call it

95
00:04:10,090 --> 00:04:14,420
it looks something like this

96
00:04:12,200 --> 00:04:17,870
I have stole this from the Wikipedia so

97
00:04:14,420 --> 00:04:19,548
that's completely legit this is two

98
00:04:17,870 --> 00:04:21,260
functions here these are two separate

99
00:04:19,548 --> 00:04:23,060
stack frames the blue stack frame and

100
00:04:21,260 --> 00:04:24,469
the green stack frame because you can

101
00:04:23,060 --> 00:04:27,170
only do things to the top of the stack

102
00:04:24,470 --> 00:04:30,110
the currently executing function is that

103
00:04:27,170 --> 00:04:32,960
item at the top of the stack as you as I

104
00:04:30,110 --> 00:04:35,000
said earlier it's got the local locals

105
00:04:32,960 --> 00:04:36,770
or the automatics it's got the return

106
00:04:35,000 --> 00:04:37,560
address and it's got the parameters that

107
00:04:36,770 --> 00:04:39,900
were passed

108
00:04:37,560 --> 00:04:43,889
to it so this is kind of what it looks

109
00:04:39,900 --> 00:04:45,780
like in memory during runtime and I've

110
00:04:43,889 --> 00:04:47,340
done just a little bit disassembly here

111
00:04:45,780 --> 00:04:49,409
just to give you an idea of what the

112
00:04:47,340 --> 00:04:54,388
code actually looks like when your

113
00:04:49,410 --> 00:05:05,340
compiler generates stack frames so I'm

114
00:04:54,389 --> 00:05:11,940
going to use this I play rock band I

115
00:05:05,340 --> 00:05:14,010
know how to use a mic all right okay so

116
00:05:11,940 --> 00:05:15,780
in this very simple example all I'm

117
00:05:14,010 --> 00:05:18,870
trying to do is illustrate what a stack

118
00:05:15,780 --> 00:05:20,909
frame looks like during Excellus em

119
00:05:18,870 --> 00:05:23,370
bleed for it looks like because this is

120
00:05:20,910 --> 00:05:25,440
very useful because this is this helps

121
00:05:23,370 --> 00:05:29,280
identify what we need to do to actually

122
00:05:25,440 --> 00:05:32,610
attack a running process so I've

123
00:05:29,280 --> 00:05:35,729
generated a three function program foo

124
00:05:32,610 --> 00:05:38,340
foo calls bar bar calls Baz now you've

125
00:05:35,729 --> 00:05:42,330
seen in the function bar I've defined

126
00:05:38,340 --> 00:05:44,010
two local variables okay so it just

127
00:05:42,330 --> 00:05:49,020
looks like that little fancy diagram

128
00:05:44,010 --> 00:05:51,690
there here is the assembly dump of that

129
00:05:49,020 --> 00:05:53,820
as you can see foo and Baz look pretty

130
00:05:51,690 --> 00:05:55,710
similar this is the portion of the code

131
00:05:53,820 --> 00:05:57,960
that is setting up the stack here you're

132
00:05:55,710 --> 00:06:02,280
pushing the stack base pointer you're

133
00:05:57,960 --> 00:06:04,409
pushing a value on to the stack there if

134
00:06:02,280 --> 00:06:06,119
we look at the function bar you notice

135
00:06:04,410 --> 00:06:08,280
there is a subtraction here because the

136
00:06:06,120 --> 00:06:11,120
stack actually grows downward on an x86

137
00:06:08,280 --> 00:06:14,820
machine my this this is focused on x86

138
00:06:11,120 --> 00:06:16,830
program execution and that subtraction

139
00:06:14,820 --> 00:06:20,460
is enough memory to actually hold the

140
00:06:16,830 --> 00:06:25,859
local values of that we're defined in

141
00:06:20,460 --> 00:06:27,150
the in the user's code okay so that's

142
00:06:25,860 --> 00:06:29,010
just kind of what we're what we're

143
00:06:27,150 --> 00:06:34,460
looking at here for a regular function

144
00:06:29,010 --> 00:06:34,460
without any security mechanisms in place

145
00:06:35,600 --> 00:06:43,380
so all of this discussion so far has led

146
00:06:39,630 --> 00:06:46,620
up to just singly threaded programs now

147
00:06:43,380 --> 00:06:49,140
remember a per my process has one stack

148
00:06:46,620 --> 00:06:50,680
space that works fine for single

149
00:06:49,140 --> 00:06:52,570
threaded programs

150
00:06:50,680 --> 00:06:55,120
but what about multi-threaded programs

151
00:06:52,570 --> 00:06:57,729
because you have now multiple threads

152
00:06:55,120 --> 00:07:00,729
executing functions independently of

153
00:06:57,729 --> 00:07:03,630
each other and a non-deterministic way a

154
00:07:00,729 --> 00:07:06,460
compiler cannot decide at compile time

155
00:07:03,630 --> 00:07:09,190
what functions only be executed in what

156
00:07:06,460 --> 00:07:09,580
order due to this multi-threaded problem

157
00:07:09,190 --> 00:07:13,630
here

158
00:07:09,580 --> 00:07:16,448
so the solution is that every thread

159
00:07:13,630 --> 00:07:19,500
gets his own stack space but this

160
00:07:16,449 --> 00:07:21,780
presents a problem because as I said

161
00:07:19,500 --> 00:07:24,039
stacks contain information they contain

162
00:07:21,780 --> 00:07:26,109
the the process stack contains

163
00:07:24,039 --> 00:07:29,080
information about the callers and the

164
00:07:26,110 --> 00:07:30,729
kaali's of that thread a compiler

165
00:07:29,080 --> 00:07:32,800
doesn't know how big to make the thread

166
00:07:30,729 --> 00:07:34,210
when it's building out your program when

167
00:07:32,800 --> 00:07:36,789
it's making that assembly code that I

168
00:07:34,210 --> 00:07:40,630
just showed you so there's a very simple

169
00:07:36,789 --> 00:07:42,219
solution to this and I think it's

170
00:07:40,630 --> 00:07:44,320
probably not the best solution but this

171
00:07:42,220 --> 00:07:46,539
is what POSIX does they hard code the

172
00:07:44,320 --> 00:07:48,460
size of threads so when you start a

173
00:07:46,539 --> 00:07:50,320
thread if you do pthread create in your

174
00:07:48,460 --> 00:07:52,599
program or if you're using some kind of

175
00:07:50,320 --> 00:07:55,930
threading library these threads are

176
00:07:52,599 --> 00:07:57,400
created with a hard-coded size that

177
00:07:55,930 --> 00:07:58,810
means two things

178
00:07:57,400 --> 00:08:00,460
either you're going to be wasting that

179
00:07:58,810 --> 00:08:03,729
memory if you don't actually need it all

180
00:08:00,460 --> 00:08:05,260
or you might actually blow out the stack

181
00:08:03,729 --> 00:08:09,370
of your thread and terminate the process

182
00:08:05,260 --> 00:08:12,550
prematurely and on the system that I was

183
00:08:09,370 --> 00:08:14,500
investigating it was hard-coded to eight

184
00:08:12,550 --> 00:08:16,180
megabytes now think about that for a

185
00:08:14,500 --> 00:08:17,919
minute if you're spawning threads

186
00:08:16,180 --> 00:08:19,720
chances are you might be doing a lot of

187
00:08:17,919 --> 00:08:21,729
these all over the place think about web

188
00:08:19,720 --> 00:08:24,070
servers something like that eight

189
00:08:21,729 --> 00:08:25,889
megabytes is an awful lot of memory for

190
00:08:24,070 --> 00:08:28,389
every thread think about the overhead

191
00:08:25,889 --> 00:08:32,979
this is also not a very scalable

192
00:08:28,389 --> 00:08:35,110
solution okay so this is just your

193
00:08:32,979 --> 00:08:37,209
traditional POSIX thread now let's think

194
00:08:35,110 --> 00:08:38,919
about other programming languages let's

195
00:08:37,208 --> 00:08:40,958
think about the go programming language

196
00:08:38,919 --> 00:08:43,120
if you're not familiar with go

197
00:08:40,958 --> 00:08:45,430
they really boast about being this

198
00:08:43,120 --> 00:08:48,040
highly concurrent you know we can spawn

199
00:08:45,430 --> 00:08:50,109
tons of threads well it turns out they

200
00:08:48,040 --> 00:08:53,110
do a different trick and this is what

201
00:08:50,110 --> 00:08:55,029
led up to the investigation of a split

202
00:08:53,110 --> 00:08:58,510
stack instead of using the traditional

203
00:08:55,029 --> 00:09:01,810
stacks that I just showed you go uses a

204
00:08:58,510 --> 00:09:03,810
concept call it a split stack and what

205
00:09:01,810 --> 00:09:07,760
that does is it solves this hard

206
00:09:03,810 --> 00:09:11,250
problem in the function prologue oh

207
00:09:07,760 --> 00:09:13,290
sorry in the function prologue so the

208
00:09:11,250 --> 00:09:21,450
very beginning of the function of a go

209
00:09:13,290 --> 00:09:23,189
program so where all the stock

210
00:09:21,450 --> 00:09:26,940
initialization goes down for that

211
00:09:23,190 --> 00:09:29,910
function go makes a check go says okay I

212
00:09:26,940 --> 00:09:33,779
might be running on a thread how big is

213
00:09:29,910 --> 00:09:36,120
the stack area of my thread if it's too

214
00:09:33,779 --> 00:09:38,279
big then what happens I'm sorry if it's

215
00:09:36,120 --> 00:09:39,750
not it's not large enough to hold that

216
00:09:38,279 --> 00:09:42,680
next function that's getting ready to be

217
00:09:39,750 --> 00:09:45,779
executed goes runtime will actually

218
00:09:42,680 --> 00:09:49,079
allocate dynamically a brand new stack

219
00:09:45,779 --> 00:09:52,920
just to run that function so this solves

220
00:09:49,080 --> 00:09:55,830
the a megabyte problem or the hard-coded

221
00:09:52,920 --> 00:09:56,550
thread size problem by allocating only

222
00:09:55,830 --> 00:09:59,460
when it needs to

223
00:09:56,550 --> 00:10:02,010
this also means go can use really tiny

224
00:09:59,460 --> 00:10:06,839
threads so they can do this in a much

225
00:10:02,010 --> 00:10:09,000
more efficient manner so I've just kind

226
00:10:06,839 --> 00:10:11,640
of outlined what happens during a split

227
00:10:09,000 --> 00:10:14,790
stack and I'll I'll share the slides

228
00:10:11,640 --> 00:10:19,199
later I don't want to blast you with fun

229
00:10:14,790 --> 00:10:22,290
words but it turns out that when you

230
00:10:19,200 --> 00:10:24,680
actually create a thread they are

231
00:10:22,290 --> 00:10:28,079
actually dynamically allocated as well

232
00:10:24,680 --> 00:10:29,729
so what this means is that thread memory

233
00:10:28,080 --> 00:10:31,890
whether it be a split stack from like a

234
00:10:29,730 --> 00:10:35,690
go thread or your traditional POSIX

235
00:10:31,890 --> 00:10:38,160
thread they all belong to dynamic memory

236
00:10:35,690 --> 00:10:40,560
this is very interesting because on a

237
00:10:38,160 --> 00:10:43,319
linux machine which is where I dump this

238
00:10:40,560 --> 00:10:46,339
I can now identify what parts of my

239
00:10:43,320 --> 00:10:49,800
process memory space are threads

240
00:10:46,339 --> 00:10:51,450
okay so I've trimmed out some of the

241
00:10:49,800 --> 00:10:53,910
output here but I've highlighted there

242
00:10:51,450 --> 00:10:56,339
at the bottom part where the thread

243
00:10:53,910 --> 00:10:59,459
belongs you can see that it is not

244
00:10:56,339 --> 00:11:01,020
assigned to any any in the object file

245
00:10:59,459 --> 00:11:03,660
there on the right column it's just an

246
00:11:01,020 --> 00:11:06,449
empty slot and there's read and write

247
00:11:03,660 --> 00:11:07,980
permissions on it before that wasn't

248
00:11:06,450 --> 00:11:09,240
there but then when I sort of allocating

249
00:11:07,980 --> 00:11:11,670
threads you'll notice that these

250
00:11:09,240 --> 00:11:14,610
additional pages keep just growing so my

251
00:11:11,670 --> 00:11:17,520
process gets larger and larger so I can

252
00:11:14,610 --> 00:11:20,400
look at any memory space and find

253
00:11:17,520 --> 00:11:21,210
potential pages of memory where a thread

254
00:11:20,400 --> 00:11:25,410
lives

255
00:11:21,210 --> 00:11:27,930
now remember threads have stacks stacks

256
00:11:25,410 --> 00:11:30,240
have returned addresses so now this is

257
00:11:27,930 --> 00:11:35,219
narrowing my search to try to attack a

258
00:11:30,240 --> 00:11:37,110
return address of a running process so

259
00:11:35,220 --> 00:11:42,120
we're gonna have a little bit of fun all

260
00:11:37,110 --> 00:11:44,820
right it's my boy Alex there and so

261
00:11:42,120 --> 00:11:46,770
what's that the bottom question marks

262
00:11:44,820 --> 00:11:49,110
there it looks very similar to what I

263
00:11:46,770 --> 00:11:51,300
just showed there that's probably a

264
00:11:49,110 --> 00:11:53,720
thread maybe not but we can make a rough

265
00:11:51,300 --> 00:11:55,800
you know make a make it a sumption here

266
00:11:53,720 --> 00:11:58,560
I'm not gonna ask you guys what the

267
00:11:55,800 --> 00:12:00,510
answers are here probably a thread or

268
00:11:58,560 --> 00:12:02,880
stack here your first thread there but

269
00:12:00,510 --> 00:12:05,400
what about the other one the other page

270
00:12:02,880 --> 00:12:06,120
there the one right above it that's kind

271
00:12:05,400 --> 00:12:08,610
of interesting

272
00:12:06,120 --> 00:12:10,350
notice the permissions on it there are

273
00:12:08,610 --> 00:12:13,560
none there's no read write or execute

274
00:12:10,350 --> 00:12:17,040
it's just - - - well that's what's

275
00:12:13,560 --> 00:12:20,270
called a guard page basically if you do

276
00:12:17,040 --> 00:12:23,760
in protect and you protect a page with

277
00:12:20,270 --> 00:12:26,250
the protect none flag it sets absolutely

278
00:12:23,760 --> 00:12:28,410
no permissions and if anything reads or

279
00:12:26,250 --> 00:12:30,570
writes to that page of memory your

280
00:12:28,410 --> 00:12:33,060
program terminates because it throws an

281
00:12:30,570 --> 00:12:35,250
exception the CPU says there is a

282
00:12:33,060 --> 00:12:37,199
segmentation fault that's a security

283
00:12:35,250 --> 00:12:38,940
mechanism so that if you're overwriting

284
00:12:37,200 --> 00:12:41,190
pages or your scanning memory you're

285
00:12:38,940 --> 00:12:42,450
trying to touch that your bum the

286
00:12:41,190 --> 00:12:50,430
program would just immediately turn the

287
00:12:42,450 --> 00:12:53,850
name okay so as I've let hopefully

288
00:12:50,430 --> 00:12:55,859
convinced you all now that stacks are

289
00:12:53,850 --> 00:12:58,080
obviously critical pieces of information

290
00:12:55,860 --> 00:12:59,940
they control the flow of a program

291
00:12:58,080 --> 00:13:03,240
because return addresses live on the

292
00:12:59,940 --> 00:13:10,880
stack so of course it makes a lot of

293
00:13:03,240 --> 00:13:13,470
sense to protect the stack right well

294
00:13:10,880 --> 00:13:15,360
there's a concept called e-stat canary

295
00:13:13,470 --> 00:13:17,610
this is you know ancient technologies

296
00:13:15,360 --> 00:13:19,470
but the idea is you place a known word

297
00:13:17,610 --> 00:13:21,420
you being the cap islur when it creates

298
00:13:19,470 --> 00:13:23,160
the program it places a known word at

299
00:13:21,420 --> 00:13:25,020
the top of the stack right as the

300
00:13:23,160 --> 00:13:26,880
function starts and then when the

301
00:13:25,020 --> 00:13:28,680
function completes it checks the stack

302
00:13:26,880 --> 00:13:31,260
to see if that same value is there if

303
00:13:28,680 --> 00:13:35,219
the value has changed at all

304
00:13:31,260 --> 00:13:38,069
then the stack is assumed to be

305
00:13:35,220 --> 00:13:41,850
compromised and the program is

306
00:13:38,070 --> 00:13:43,110
immediately terminated so here's a

307
00:13:41,850 --> 00:13:47,010
little more information like I said I'll

308
00:13:43,110 --> 00:13:49,560
share the slides later but here's what a

309
00:13:47,010 --> 00:13:50,819
canary looks like the Assembly of a

310
00:13:49,560 --> 00:13:53,189
canary it looks like so here's a

311
00:13:50,820 --> 00:13:56,430
function foo I've compiled it using GCC

312
00:13:53,190 --> 00:14:01,080
stack protection mechanism and you can

313
00:13:56,430 --> 00:14:05,880
see right here and this is going to be

314
00:14:01,080 --> 00:14:06,990
fun all right you can see right here

315
00:14:05,880 --> 00:14:08,550
there's a little bit of additional

316
00:14:06,990 --> 00:14:09,810
information if I were to compare this

317
00:14:08,550 --> 00:14:11,459
slide to the ones I showed previously

318
00:14:09,810 --> 00:14:15,479
you'll notice that there's a few extra

319
00:14:11,460 --> 00:14:19,590
instructions I'm reaching into the TLS

320
00:14:15,480 --> 00:14:22,500
or the thread memory for this this

321
00:14:19,590 --> 00:14:25,950
process and I'm putting some value into

322
00:14:22,500 --> 00:14:29,580
the RA X and I'm moving Ari X 2 8 bytes

323
00:14:25,950 --> 00:14:32,040
offset of the the stack which in this

324
00:14:29,580 --> 00:14:34,440
area right here is the actual canary

325
00:14:32,040 --> 00:14:36,719
value so the canary changes every time

326
00:14:34,440 --> 00:14:37,350
you start the program but it should stay

327
00:14:36,720 --> 00:14:39,870
the same

328
00:14:37,350 --> 00:14:42,180
during probe during the program the

329
00:14:39,870 --> 00:14:44,520
reason is if I were an attacker and I

330
00:14:42,180 --> 00:14:47,069
knew what the canary value was a priori

331
00:14:44,520 --> 00:14:50,130
then I can write my malware to actually

332
00:14:47,070 --> 00:14:53,270
just use that canary the solution is to

333
00:14:50,130 --> 00:14:57,330
use a random word instead that's what

334
00:14:53,270 --> 00:15:00,329
Canoe does so when new or if you're

335
00:14:57,330 --> 00:15:02,880
running Linux a random word will be

336
00:15:00,330 --> 00:15:05,550
generated in the kernel past all the way

337
00:15:02,880 --> 00:15:07,950
up to user land your program is launched

338
00:15:05,550 --> 00:15:09,839
and that random value is the canary that

339
00:15:07,950 --> 00:15:12,120
is stored here so if I were writing

340
00:15:09,840 --> 00:15:14,220
malware I have no idea what to actually

341
00:15:12,120 --> 00:15:17,610
use as a canary value if I were trying

342
00:15:14,220 --> 00:15:21,810
to compromise the stack just one one

343
00:15:17,610 --> 00:15:24,780
lovely little little way that kanou

344
00:15:21,810 --> 00:15:27,180
tries to keep things safe and then right

345
00:15:24,780 --> 00:15:29,280
here is the the epilogue of the function

346
00:15:27,180 --> 00:15:30,870
and it checks the the stack canary set

347
00:15:29,280 --> 00:15:33,030
there you can see it's putting that

348
00:15:30,870 --> 00:15:35,490
value into RDX and checking it

349
00:15:33,030 --> 00:15:38,150
if the value changes then the program

350
00:15:35,490 --> 00:15:38,150
terminates

351
00:15:42,570 --> 00:15:50,290
all right okay so that stock Canaries

352
00:15:48,310 --> 00:15:51,640
and that code there at the bottom was

353
00:15:50,290 --> 00:15:53,740
ripped straight from the kernel Linux

354
00:15:51,640 --> 00:15:55,779
kernel and that is what it's using to

355
00:15:53,740 --> 00:15:59,650
generate the the Canaries you can see

356
00:15:55,779 --> 00:16:04,029
it's just using the the random device on

357
00:15:59,650 --> 00:16:06,040
your CPU or your on your system to

358
00:16:04,029 --> 00:16:07,839
actually generate some entropy and then

359
00:16:06,040 --> 00:16:10,930
store it and pass it up to user land

360
00:16:07,839 --> 00:16:13,750
this all is actually used as part of the

361
00:16:10,930 --> 00:16:19,150
auxilary part of an elf file or of your

362
00:16:13,750 --> 00:16:21,670
executable so now the question comes can

363
00:16:19,150 --> 00:16:24,640
a canary of maximum entropy used to be

364
00:16:21,670 --> 00:16:27,579
feds used to find and find addresses in

365
00:16:24,640 --> 00:16:30,550
an opaque memory space well yes of

366
00:16:27,580 --> 00:16:33,670
course again that's the band yes you

367
00:16:30,550 --> 00:16:35,410
didn't get the joke nobody left Wow

368
00:16:33,670 --> 00:16:39,250
at least I'm not a comedian because that

369
00:16:35,410 --> 00:16:41,740
would suck all right so this is this is

370
00:16:39,250 --> 00:16:43,480
called Shannon the man who coined the

371
00:16:41,740 --> 00:16:45,670
term Walden he didn't coin the term

372
00:16:43,480 --> 00:16:47,290
entropy but he tried to measure entropy

373
00:16:45,670 --> 00:16:48,880
and his definition is it's just the

374
00:16:47,290 --> 00:16:51,819
average amount of information given an

375
00:16:48,880 --> 00:16:53,410
event so what we're trying to do is look

376
00:16:51,820 --> 00:16:55,120
into memory space look for the highest

377
00:16:53,410 --> 00:16:57,490
entropy word because I'm pretty sure

378
00:16:55,120 --> 00:16:59,770
that's going to be the canary and then I

379
00:16:57,490 --> 00:17:02,260
know that the canary value lives a

380
00:16:59,770 --> 00:17:05,379
certain way for a certain distance from

381
00:17:02,260 --> 00:17:07,510
the return address so all this means is

382
00:17:05,380 --> 00:17:10,689
I scan to memory or you can scan a

383
00:17:07,510 --> 00:17:14,050
memory memory dump look for the highest

384
00:17:10,689 --> 00:17:15,610
entropy word and then knows that 16

385
00:17:14,050 --> 00:17:17,859
bytes from that it's going to be where

386
00:17:15,609 --> 00:17:19,899
the return address lives if it's not

387
00:17:17,859 --> 00:17:20,708
well you you might break a program or

388
00:17:19,900 --> 00:17:23,020
two who cares

389
00:17:20,709 --> 00:17:25,089
there's false positives it's not it's

390
00:17:23,020 --> 00:17:28,690
not a perfect science here but it does

391
00:17:25,089 --> 00:17:30,250
work I thought he looked cooler with the

392
00:17:28,690 --> 00:17:33,160
glut know he looks cooler without

393
00:17:30,250 --> 00:17:36,280
glasses like Sears these this guy's

394
00:17:33,160 --> 00:17:38,620
awesome so I just kind of defined my

395
00:17:36,280 --> 00:17:41,020
concepts of maximum entropy is based off

396
00:17:38,620 --> 00:17:45,489
of Shannon's enterpise not entirely it's

397
00:17:41,020 --> 00:17:48,700
not a total it's not not total but it is

398
00:17:45,490 --> 00:17:50,200
it is very close and what I do is I look

399
00:17:48,700 --> 00:17:53,200
at a word size and address

400
00:17:50,200 --> 00:17:55,480
sighs and I look for any address or any

401
00:17:53,200 --> 00:17:57,309
value where every byte is a different

402
00:17:55,480 --> 00:17:58,690
value and that's what I call maximum

403
00:17:57,309 --> 00:18:00,279
entropy I'm not looking at the business

404
00:17:58,690 --> 00:18:02,679
I'm looking at every byte just saying if

405
00:18:00,279 --> 00:18:04,779
there's a in the word if every bite is

406
00:18:02,679 --> 00:18:08,620
different I call it maximum entropy and

407
00:18:04,779 --> 00:18:10,090
that seems to work so how frequently

408
00:18:08,620 --> 00:18:11,260
does this occur on a system if it

409
00:18:10,090 --> 00:18:13,689
happens all the time they don't have a

410
00:18:11,260 --> 00:18:15,610
lot of false positives so I scan my

411
00:18:13,690 --> 00:18:18,370
entire system it took a long time but I

412
00:18:15,610 --> 00:18:21,939
was drinking coffee and I don't really

413
00:18:18,370 --> 00:18:24,639
care and it actually turns out it's

414
00:18:21,940 --> 00:18:27,159
actually pretty rare look at that I mean

415
00:18:24,639 --> 00:18:30,309
I'm not gonna read the slides to you but

416
00:18:27,159 --> 00:18:32,559
it's this doesn't mean a lot let's draw

417
00:18:30,309 --> 00:18:34,990
pictures so here's a memory I decided to

418
00:18:32,559 --> 00:18:36,970
write a heat map instead of the highest

419
00:18:34,990 --> 00:18:39,519
entropy words now if you're color blind

420
00:18:36,970 --> 00:18:42,460
I deeply apologize this is gonna not

421
00:18:39,519 --> 00:18:44,529
make any sense but the read items there

422
00:18:42,460 --> 00:18:47,500
I think there's four diagonal in the

423
00:18:44,529 --> 00:18:49,409
middle five six I see seven red items

424
00:18:47,500 --> 00:18:51,970
out of this entire memory space I

425
00:18:49,409 --> 00:18:53,980
removed all the zero bytes because this

426
00:18:51,970 --> 00:18:55,480
would have been enormous otherwise but

427
00:18:53,980 --> 00:18:59,350
this is looking at just one single

428
00:18:55,480 --> 00:19:06,940
process so as you can see the highest

429
00:18:59,350 --> 00:19:08,980
entropy words are pretty rare so this

430
00:19:06,940 --> 00:19:11,950
leads to the attack where you first you

431
00:19:08,980 --> 00:19:13,539
scan the memory area of a process you

432
00:19:11,950 --> 00:19:16,630
look for the highest entropy word and

433
00:19:13,539 --> 00:19:17,950
then you look for a value 16 bytes from

434
00:19:16,630 --> 00:19:21,309
it because that's probably in a return

435
00:19:17,950 --> 00:19:23,350
address if that value is in fact a value

436
00:19:21,309 --> 00:19:27,190
that lives within the memory space if it

437
00:19:23,350 --> 00:19:30,129
looks like an address and it smells like

438
00:19:27,190 --> 00:19:32,950
an address it's probably an address so

439
00:19:30,130 --> 00:19:38,110
there's a little bit of dock logic there

440
00:19:32,950 --> 00:19:40,419
or platypus logic and it actually turns

441
00:19:38,110 --> 00:19:43,389
to work so that's that's basically the

442
00:19:40,419 --> 00:19:45,460
hack there is quite simple using the

443
00:19:43,389 --> 00:19:47,320
security mechanism provided by a stack

444
00:19:45,460 --> 00:19:51,340
canary we can now identify return

445
00:19:47,320 --> 00:19:53,408
addresses so I've got a lot of

446
00:19:51,340 --> 00:19:55,449
information here I'll post the code I

447
00:19:53,409 --> 00:19:59,470
have written which I haven't posted yet

448
00:19:55,450 --> 00:20:01,610
because it's gonna be really close I

449
00:19:59,470 --> 00:20:04,330
doing like a live like I'm releasing now

450
00:20:01,610 --> 00:20:06,350
but I'll just do it later no big deal

451
00:20:04,330 --> 00:20:08,510
and you can look at it you can make

452
00:20:06,350 --> 00:20:10,129
comments you've got my email addresses

453
00:20:08,510 --> 00:20:12,910
at the top so feel free to hit me up

454
00:20:10,130 --> 00:20:12,910
with any questions

455
00:20:19,080 --> 00:20:21,139
you

