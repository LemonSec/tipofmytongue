1
00:00:15,950 --> 00:00:20,520
thanks everyone thanks for coming and

2
00:00:18,420 --> 00:00:22,590
kind of feel a little shy actually

3
00:00:20,520 --> 00:00:25,529
didn't want to do a big introduction but

4
00:00:22,590 --> 00:00:27,240
I do have a slide so all right so

5
00:00:25,529 --> 00:00:30,119
welcome to this talk and first I wanted

6
00:00:27,240 --> 00:00:32,308
to see you guys probably saw on the

7
00:00:30,119 --> 00:00:37,110
agenda we have two full hours of

8
00:00:32,308 --> 00:00:39,449
containers yay no well don't worry so

9
00:00:37,110 --> 00:00:41,460
Josh and I sink top ahead of time so we

10
00:00:39,449 --> 00:00:42,839
know who's gonna talk about what so

11
00:00:41,460 --> 00:00:44,580
you're gonna get really good material

12
00:00:42,840 --> 00:00:49,130
for the boat two hours if you wish to

13
00:00:44,580 --> 00:00:52,140
say for two hours so let me start with

14
00:00:49,130 --> 00:00:54,510
who I am and I'm currently a director of

15
00:00:52,140 --> 00:00:57,030
solutions engineering engineering at

16
00:00:54,510 --> 00:00:59,370
Eclipse him which does hardware and

17
00:00:57,030 --> 00:01:01,860
firmware security I was also a did a

18
00:00:59,370 --> 00:01:03,809
stint as a security architect for check

19
00:01:01,860 --> 00:01:06,390
marks and people probably heard of

20
00:01:03,809 --> 00:01:07,979
checkmarks focusing on application

21
00:01:06,390 --> 00:01:09,660
security and then before that I was

22
00:01:07,979 --> 00:01:11,340
leading a group of professional services

23
00:01:09,660 --> 00:01:13,590
for Identity and Access Management so

24
00:01:11,340 --> 00:01:16,950
I've literally been up and down the

25
00:01:13,590 --> 00:01:18,630
security stack and over the years I got

26
00:01:16,950 --> 00:01:22,220
a lot of spirits and everything and just

27
00:01:18,630 --> 00:01:27,330
a lot of experience in being a hardened

28
00:01:22,220 --> 00:01:29,310
site of the stack so what the stock is

29
00:01:27,330 --> 00:01:30,860
not gonna be about I'm not here to talk

30
00:01:29,310 --> 00:01:33,960
about docker

31
00:01:30,860 --> 00:01:36,840
well actually I'm probably not kidding

32
00:01:33,960 --> 00:01:39,809
anyone I'm you can talk cannot not talk

33
00:01:36,840 --> 00:01:43,439
about docker I am gonna be talk about

34
00:01:39,810 --> 00:01:45,900
darker but just not just about docker so

35
00:01:43,439 --> 00:01:48,389
what I'm also not gonna be talking about

36
00:01:45,900 --> 00:01:51,689
here in this presentation there's

37
00:01:48,390 --> 00:01:53,520
everything that's low on stack so I work

38
00:01:51,689 --> 00:01:56,460
in Hardware infirmary security and I

39
00:01:53,520 --> 00:01:57,750
work with those exploits but a majority

40
00:01:56,460 --> 00:01:59,220
of my experience is actually dealing

41
00:01:57,750 --> 00:02:01,409
with an enterprise level security as

42
00:01:59,220 --> 00:02:03,298
you've seen so it's everything up above

43
00:02:01,409 --> 00:02:05,009
the the hypervisor stack it's in the

44
00:02:03,299 --> 00:02:07,020
kernel seconds the user space stack

45
00:02:05,009 --> 00:02:08,610
everything else you see down below I

46
00:02:07,020 --> 00:02:10,739
hope everybody understands if you get

47
00:02:08,610 --> 00:02:13,440
owned by one of those things

48
00:02:10,739 --> 00:02:15,030
you screwed anyhow right your your

49
00:02:13,440 --> 00:02:18,329
really yeah there's no talk about

50
00:02:15,030 --> 00:02:19,769
continuous at that point so but I'm not

51
00:02:18,329 --> 00:02:21,540
going to talk about it I'm gonna talk

52
00:02:19,769 --> 00:02:25,970
about containers and when you talk about

53
00:02:21,540 --> 00:02:27,870
containers in is if anybody's been into

54
00:02:25,970 --> 00:02:29,909
presentations about containers

55
00:02:27,870 --> 00:02:31,830
you know you have some obligatory slice

56
00:02:29,909 --> 00:02:34,470
so here's a slide about container

57
00:02:31,830 --> 00:02:36,510
history alright I'll just move on okay

58
00:02:34,470 --> 00:02:40,620
here's here's a slide about broken

59
00:02:36,510 --> 00:02:43,679
containers broken they're horrible okay

60
00:02:40,620 --> 00:02:48,090
here's a dead whale okay dead whale for

61
00:02:43,680 --> 00:02:50,030
you guys okay good now no that's out we

62
00:02:48,090 --> 00:02:54,540
can actually get to the presentation

63
00:02:50,030 --> 00:02:57,739
okay so I wanted to share his story and

64
00:02:54,540 --> 00:03:02,160
its story about me about a year ago so

65
00:02:57,739 --> 00:03:04,859
and this is where I've inherited what I

66
00:03:02,160 --> 00:03:06,450
call traditional some people call legacy

67
00:03:04,859 --> 00:03:08,760
I like to steal a call traditional

68
00:03:06,450 --> 00:03:10,260
security product it's a monolithic

69
00:03:08,760 --> 00:03:13,108
products it's focusing on enterprise

70
00:03:10,260 --> 00:03:15,870
level security it's it's focusing on

71
00:03:13,109 --> 00:03:18,540
certain things that developers do and

72
00:03:15,870 --> 00:03:22,769
it's trying to analyze the work flow of

73
00:03:18,540 --> 00:03:25,319
the developers now developers are on the

74
00:03:22,769 --> 00:03:27,120
forefront of technology as I'm sure

75
00:03:25,319 --> 00:03:28,319
everybody have noticed sits they you

76
00:03:27,120 --> 00:03:29,819
know they're screaming containers

77
00:03:28,319 --> 00:03:31,409
they've been screaming for five years

78
00:03:29,819 --> 00:03:33,569
for six years they've been screaming

79
00:03:31,409 --> 00:03:35,370
microcell services for four years they

80
00:03:33,569 --> 00:03:38,010
now screaming serverless been screaming

81
00:03:35,370 --> 00:03:39,569
for two years there's all the cool and

82
00:03:38,010 --> 00:03:40,980
new technologists are coming on the

83
00:03:39,569 --> 00:03:42,899
market and they really want to try it

84
00:03:40,980 --> 00:03:44,548
they wanna you know make an impact build

85
00:03:42,900 --> 00:03:49,079
something cool build build something

86
00:03:44,549 --> 00:03:51,930
quick and they are my consumers I'm

87
00:03:49,079 --> 00:03:53,879
essentially working for them I need to

88
00:03:51,930 --> 00:03:56,730
provide a product that lives in their

89
00:03:53,879 --> 00:03:58,768
ecosystem and I'm stuck with the legacy

90
00:03:56,730 --> 00:04:01,828
product that lives in the ecosystem of

91
00:03:58,769 --> 00:04:04,470
Windows you know dotnet development you

92
00:04:01,829 --> 00:04:08,069
know services Windows services and a

93
00:04:04,470 --> 00:04:11,639
sequel and all that stuff and I need to

94
00:04:08,069 --> 00:04:15,000
I have certain goals I need to make it

95
00:04:11,639 --> 00:04:18,090
secure I need to make it fast and I also

96
00:04:15,000 --> 00:04:19,858
need to make it so it fits inside of the

97
00:04:18,089 --> 00:04:22,859
DevOps infrastructure so essentially

98
00:04:19,858 --> 00:04:25,080
Dell ops is serving doubts and devs are

99
00:04:22,860 --> 00:04:28,050
making their crazy decisions and ops

100
00:04:25,080 --> 00:04:29,880
wants to put everything in the fast

101
00:04:28,050 --> 00:04:32,010
pipeline you want to put something in

102
00:04:29,880 --> 00:04:34,530
where you you can get a turnaround for

103
00:04:32,010 --> 00:04:36,450
their servers for the Dells and now I

104
00:04:34,530 --> 00:04:40,130
need to make that product the legacy

105
00:04:36,450 --> 00:04:42,849
product work in that pipeline and so

106
00:04:40,130 --> 00:04:45,770
so go okay well let's start with this

107
00:04:42,850 --> 00:04:48,170
let's start with you know why you know

108
00:04:45,770 --> 00:04:50,240
containers are pretty cool I heard let's

109
00:04:48,170 --> 00:04:53,360
start looking at what what are they for

110
00:04:50,240 --> 00:04:55,400
and looking at it you realize that these

111
00:04:53,360 --> 00:04:57,110
are actually two goals and they're not

112
00:04:55,400 --> 00:05:00,739
necessarily competing goals there

113
00:04:57,110 --> 00:05:03,500
there's that's something that developers

114
00:05:00,740 --> 00:05:06,530
need and they're trying to close this

115
00:05:03,500 --> 00:05:08,840
gap and they're closing it in to kind of

116
00:05:06,530 --> 00:05:10,460
dissimilar ways but one and the more

117
00:05:08,840 --> 00:05:12,530
important one for the devs is

118
00:05:10,460 --> 00:05:14,359
distribution is how do i package it up

119
00:05:12,530 --> 00:05:16,070
in applications so it works smoothly in

120
00:05:14,360 --> 00:05:17,840
all the systems how would I you know put

121
00:05:16,070 --> 00:05:19,790
it in my dev box and then give it to the

122
00:05:17,840 --> 00:05:21,890
ops guy and then he can run it with no

123
00:05:19,790 --> 00:05:25,400
changes so that's the distribution

124
00:05:21,890 --> 00:05:28,460
problem now the second problem is how to

125
00:05:25,400 --> 00:05:30,620
run untrusted code and by untrusted in

126
00:05:28,460 --> 00:05:32,780
in the dev sense it means somebody

127
00:05:30,620 --> 00:05:35,420
else's code it's like you know it's no

128
00:05:32,780 --> 00:05:37,190
js' I don't necessarily not trust it but

129
00:05:35,420 --> 00:05:39,140
it's no genius who knows where it can

130
00:05:37,190 --> 00:05:42,290
get out so it's better if I close it and

131
00:05:39,140 --> 00:05:44,599
that's the sandbox problem now they're

132
00:05:42,290 --> 00:05:47,420
not like I said mutually exclusive and

133
00:05:44,600 --> 00:05:52,700
this is where containers kind of come in

134
00:05:47,420 --> 00:05:54,680
play alright so back you know five seven

135
00:05:52,700 --> 00:05:56,719
years ago when you talked about

136
00:05:54,680 --> 00:06:00,470
container so you mentioned sandbox as

137
00:05:56,720 --> 00:06:02,930
the VMS came up right and we all been

138
00:06:00,470 --> 00:06:05,420
using VMs for a long long time vm is

139
00:06:02,930 --> 00:06:07,970
actually pretty good about container

140
00:06:05,420 --> 00:06:10,330
raising applications right escaping from

141
00:06:07,970 --> 00:06:13,820
a hypervisor all to the systems you know

142
00:06:10,330 --> 00:06:16,039
not a thing for the past five six years

143
00:06:13,820 --> 00:06:18,110
is it possible probably is it likely

144
00:06:16,040 --> 00:06:21,470
very unlikely so they've been really

145
00:06:18,110 --> 00:06:22,910
good at keeping the close eye on you

146
00:06:21,470 --> 00:06:24,710
know everything that happens in the user

147
00:06:22,910 --> 00:06:27,110
space in the kernel space and then down

148
00:06:24,710 --> 00:06:30,140
to the hypervisor so they're actually

149
00:06:27,110 --> 00:06:32,090
pretty secure now the trouble with them

150
00:06:30,140 --> 00:06:34,219
is they're good for security they're not

151
00:06:32,090 --> 00:06:36,650
really good for distribution if anybody

152
00:06:34,220 --> 00:06:39,740
tried copying you know 10 50 and 50

153
00:06:36,650 --> 00:06:43,280
gigabyte VM off to ops machine you know

154
00:06:39,740 --> 00:06:45,350
that right so there have been systems

155
00:06:43,280 --> 00:06:47,059
they've been solutions to try to make

156
00:06:45,350 --> 00:06:49,210
them a little more portable to kind of

157
00:06:47,060 --> 00:06:51,410
like we sold the sandboxing problem now

158
00:06:49,210 --> 00:06:53,780
distribution maybe we can solve it with

159
00:06:51,410 --> 00:06:55,280
vagrants if anybody tried vagrant you

160
00:06:53,780 --> 00:06:58,039
basically your infrastructure as code

161
00:06:55,280 --> 00:07:00,500
you push it out and creates VMs it's

162
00:06:58,040 --> 00:07:03,260
good I use it I actually daily use it it

163
00:07:00,500 --> 00:07:05,419
manages the VMS alright but it's still

164
00:07:03,260 --> 00:07:09,710
kind of clunky and it still takes time

165
00:07:05,419 --> 00:07:11,450
and it's still not very sufficient same

166
00:07:09,710 --> 00:07:12,799
thing with sheriffs and puppets who try

167
00:07:11,450 --> 00:07:16,099
to manage the infrastructure at the code

168
00:07:12,800 --> 00:07:17,960
level - it works I mean it's a good

169
00:07:16,100 --> 00:07:20,990
workaround but it's really still not

170
00:07:17,960 --> 00:07:22,460
solving the distribution problem and

171
00:07:20,990 --> 00:07:23,870
this is where we come to the kernel

172
00:07:22,460 --> 00:07:26,030
level containers you know those things

173
00:07:23,870 --> 00:07:28,580
that kind of live in here and this is

174
00:07:26,030 --> 00:07:30,950
where docker is right so the kernel

175
00:07:28,580 --> 00:07:33,950
containers are the things that isolate

176
00:07:30,950 --> 00:07:36,440
your security at the level of the kernel

177
00:07:33,950 --> 00:07:39,110
assist level calls and I I feel

178
00:07:36,440 --> 00:07:41,690
obligated to mention the the ways that

179
00:07:39,110 --> 00:07:43,250
are they're made if you actually want to

180
00:07:41,690 --> 00:07:45,440
find out more about the details of what

181
00:07:43,250 --> 00:07:47,210
goes into making a container go to the

182
00:07:45,440 --> 00:07:50,240
next talk josh is gonna talk more about

183
00:07:47,210 --> 00:07:52,159
those but I'll mention them here so when

184
00:07:50,240 --> 00:07:54,050
I say concur non-level containers are

185
00:07:52,160 --> 00:07:56,360
not first order primitives that means

186
00:07:54,050 --> 00:07:58,520
that they're not things in themselves

187
00:07:56,360 --> 00:08:02,030
there's sort of aggregation of other

188
00:07:58,520 --> 00:08:04,760
things it's like a container is a thing

189
00:08:02,030 --> 00:08:06,349
that's put together very cleverly and

190
00:08:04,760 --> 00:08:08,870
it's that there are other things that is

191
00:08:06,350 --> 00:08:11,300
put together with are the capabilities

192
00:08:08,870 --> 00:08:13,910
which limit the process privileges the C

193
00:08:11,300 --> 00:08:16,940
groups which limited resource access

194
00:08:13,910 --> 00:08:18,950
then the namespaces that isolate kernel

195
00:08:16,940 --> 00:08:20,990
functions and then the second filters

196
00:08:18,950 --> 00:08:23,300
that filter the SIS calls into the

197
00:08:20,990 --> 00:08:25,490
kernel and finally you've got an overlay

198
00:08:23,300 --> 00:08:28,010
file system and an overlay network so

199
00:08:25,490 --> 00:08:29,990
take all those pieces by themselves

200
00:08:28,010 --> 00:08:31,849
they're not very much worth it but you

201
00:08:29,990 --> 00:08:33,830
know combine them into something new and

202
00:08:31,850 --> 00:08:37,099
you get something like rocket or docker

203
00:08:33,830 --> 00:08:39,919
and that's how containers came to be and

204
00:08:37,099 --> 00:08:41,599
so there are multiple ways the

205
00:08:39,919 --> 00:08:42,228
containers are done actually I'll start

206
00:08:41,599 --> 00:08:44,810
from the bottom

207
00:08:42,229 --> 00:08:46,460
you if anybody used Heroku you've

208
00:08:44,810 --> 00:08:48,619
already used containers you didn't even

209
00:08:46,460 --> 00:08:50,810
know that here okay we're the first ones

210
00:08:48,620 --> 00:08:52,490
who actually created containers now

211
00:08:50,810 --> 00:08:54,560
they're not public containers that you

212
00:08:52,490 --> 00:08:56,089
can you know run hiroko containers in

213
00:08:54,560 --> 00:08:57,800
your box but they're the ones who

214
00:08:56,089 --> 00:08:59,210
actually came up with that concept and

215
00:08:57,800 --> 00:09:02,449
that's because they run untrusted code

216
00:08:59,210 --> 00:09:04,730
on their infrastructure but later after

217
00:09:02,450 --> 00:09:07,220
that and you can go back to the history

218
00:09:04,730 --> 00:09:07,730
slide if you really want it but lxc

219
00:09:07,220 --> 00:09:10,189
containers

220
00:09:07,730 --> 00:09:12,019
there's still a thing Alex see is what I

221
00:09:10,189 --> 00:09:13,459
call a hardened wood container it's like

222
00:09:12,019 --> 00:09:15,589
you know you're good

223
00:09:13,459 --> 00:09:16,969
all those primitives and you're the ones

224
00:09:15,589 --> 00:09:18,799
in charge and putting those together and

225
00:09:16,970 --> 00:09:19,819
you're the one who's enabling this and

226
00:09:18,799 --> 00:09:21,619
then once you've put it all together

227
00:09:19,819 --> 00:09:22,819
then you've got your car assembled and

228
00:09:21,619 --> 00:09:24,619
now you can actually run with it and

229
00:09:22,819 --> 00:09:26,929
canonical is trying to help they're

230
00:09:24,619 --> 00:09:28,459
building something like lxd to manage

231
00:09:26,929 --> 00:09:30,199
those containers but it's still kind of

232
00:09:28,459 --> 00:09:33,768
like hardcore mode containers for you

233
00:09:30,199 --> 00:09:35,719
people use it especially people in big

234
00:09:33,769 --> 00:09:37,790
companies that need very fine-grained

235
00:09:35,720 --> 00:09:39,230
control over containers now the docker

236
00:09:37,790 --> 00:09:41,149
containers and this is where the whole

237
00:09:39,230 --> 00:09:42,739
thing took off right this is the easy

238
00:09:41,149 --> 00:09:45,769
mode containers there's the ones that

239
00:09:42,739 --> 00:09:47,600
you go and do you know docker run blah

240
00:09:45,769 --> 00:09:50,720
blah and that's suddenly poof you've got

241
00:09:47,600 --> 00:09:52,459
your system that's like we're cool and

242
00:09:50,720 --> 00:09:55,160
as you can imagine there's some cost to

243
00:09:52,459 --> 00:09:55,638
it we're gonna come to costs of the ease

244
00:09:55,160 --> 00:09:59,419
of use

245
00:09:55,639 --> 00:10:00,769
now there's rocket containers and I'm

246
00:09:59,419 --> 00:10:02,329
gonna talk a little bit about the

247
00:10:00,769 --> 00:10:05,269
security of rocket containers but they

248
00:10:02,329 --> 00:10:09,649
they were created to be secure were like

249
00:10:05,269 --> 00:10:10,999
better River than darker okay and you

250
00:10:09,649 --> 00:10:14,269
know the other thing that I wanted to

251
00:10:10,999 --> 00:10:15,829
mention is when you talk about container

252
00:10:14,269 --> 00:10:17,899
level containers you actually do have

253
00:10:15,829 --> 00:10:21,559
really fine gain control control and you

254
00:10:17,899 --> 00:10:23,059
can run you can turn on and off features

255
00:10:21,559 --> 00:10:25,519
in those containers and do really cool

256
00:10:23,059 --> 00:10:29,709
stuff so for example I'll give you

257
00:10:25,519 --> 00:10:34,239
hopefully you can see this so here's a

258
00:10:29,709 --> 00:10:37,099
here's a container that runs a Microsoft

259
00:10:34,239 --> 00:10:39,169
by the way my I'm running Linux on here

260
00:10:37,100 --> 00:10:41,119
but here's a container that was gooey

261
00:10:39,169 --> 00:10:42,649
this the whole thing is inside of

262
00:10:41,119 --> 00:10:44,749
container if you not familiar this is

263
00:10:42,649 --> 00:10:47,899
sequel operation studio that Microsoft

264
00:10:44,749 --> 00:10:49,369
put out for managing sequel server and

265
00:10:47,899 --> 00:10:51,199
you'll see my talk why I need to manage

266
00:10:49,369 --> 00:10:52,939
the sequel server but this is the Linux

267
00:10:51,199 --> 00:10:54,589
container with a gooey front to it and

268
00:10:52,939 --> 00:10:56,238
it's running it and if you actually want

269
00:10:54,589 --> 00:11:10,339
to look at it give it just second I'll

270
00:10:56,239 --> 00:11:12,169
put this so that's this guy you see I

271
00:11:10,339 --> 00:11:14,449
just forward X and I'll run the

272
00:11:12,169 --> 00:11:16,309
container and I get the X so that's your

273
00:11:14,449 --> 00:11:17,689
gooey container you're actually running

274
00:11:16,309 --> 00:11:19,249
stuff inside of the container but you're

275
00:11:17,689 --> 00:11:19,549
interacting it on the gooey level with

276
00:11:19,249 --> 00:11:21,320
it

277
00:11:19,549 --> 00:11:23,180
all right so

278
00:11:21,320 --> 00:11:25,070
the other thing really cool things is

279
00:11:23,180 --> 00:11:27,620
you can run obviously Windows tools will

280
00:11:25,070 --> 00:11:29,329
come to it and you can run a algorithm

281
00:11:27,620 --> 00:11:34,130
so back at home I actually have a little

282
00:11:29,329 --> 00:11:37,609
lab where I'm running Nvidia CUDA deep

283
00:11:34,130 --> 00:11:39,680
dream Network and I create images with a

284
00:11:37,610 --> 00:11:41,180
deep deep dream Network and it's all

285
00:11:39,680 --> 00:11:42,979
running inside of a container so I

286
00:11:41,180 --> 00:11:45,258
didn't install anything I was like

287
00:11:42,980 --> 00:11:48,050
really really we were cool I got AI on

288
00:11:45,259 --> 00:11:50,440
my desktop with no like investment into

289
00:11:48,050 --> 00:11:52,939
building the crazy you know Python

290
00:11:50,440 --> 00:11:54,860
modules non Python and everything that

291
00:11:52,940 --> 00:11:58,100
goes with that and so I was really

292
00:11:54,860 --> 00:11:59,480
really interesting and the big point I

293
00:11:58,100 --> 00:12:02,540
want to make here is with all that

294
00:11:59,480 --> 00:12:04,130
flexibility comes responsibility so

295
00:12:02,540 --> 00:12:06,230
there's a lot of things you can shoot

296
00:12:04,130 --> 00:12:09,560
yourself in the foot with and we're

297
00:12:06,230 --> 00:12:12,110
coming to this but before we go into

298
00:12:09,560 --> 00:12:13,250
containers into kernel level containers

299
00:12:12,110 --> 00:12:14,630
I did want to mention the app level

300
00:12:13,250 --> 00:12:18,500
containers and those are the things that

301
00:12:14,630 --> 00:12:20,779
you probably seen too so for example if

302
00:12:18,500 --> 00:12:22,459
if you ever tried if you run a gnome and

303
00:12:20,779 --> 00:12:26,180
you ever tried to install something from

304
00:12:22,459 --> 00:12:27,888
KDE like the Kate I headed err in KDE

305
00:12:26,180 --> 00:12:30,229
and I really like hidden you do the

306
00:12:27,889 --> 00:12:32,329
usual just you you do the usual app

307
00:12:30,230 --> 00:12:34,399
install Kate then I comes to you and

308
00:12:32,329 --> 00:12:36,410
says okay I'm gonna upgrade in 2-0

309
00:12:34,399 --> 00:12:38,510
packages I'm gonna install a hundred and

310
00:12:36,410 --> 00:12:41,959
fifty two packages under your system and

311
00:12:38,510 --> 00:12:44,500
do you want to continue yes or no and

312
00:12:41,959 --> 00:12:48,949
the correct answer is No

313
00:12:44,500 --> 00:12:50,720
so obviously canonical and Debian

314
00:12:48,949 --> 00:12:53,930
everybody recognized that little problem

315
00:12:50,720 --> 00:12:56,120
that it brings to you and they tried

316
00:12:53,930 --> 00:12:57,920
working on it so snaps happens snaps

317
00:12:56,120 --> 00:13:00,380
happened about five years ago and what

318
00:12:57,920 --> 00:13:02,449
what it is and if you watch

319
00:13:00,380 --> 00:13:03,709
Mark Shuttleworth presentations he's

320
00:13:02,449 --> 00:13:05,959
actually really good about describing

321
00:13:03,709 --> 00:13:08,149
them but they're he's describing them as

322
00:13:05,959 --> 00:13:09,829
the things that are here they're not

323
00:13:08,149 --> 00:13:11,329
containers in the sense that are

324
00:13:09,829 --> 00:13:12,680
isolated from your system they're

325
00:13:11,329 --> 00:13:14,479
containers in a sense that they're

326
00:13:12,680 --> 00:13:15,800
packaged up so essentially it's a

327
00:13:14,480 --> 00:13:18,380
packaged app application that has

328
00:13:15,800 --> 00:13:20,689
limited view into your system but you

329
00:13:18,380 --> 00:13:24,589
also get a full use of that system and

330
00:13:20,689 --> 00:13:26,930
so there's been a very solid change if

331
00:13:24,589 --> 00:13:29,660
you guys live on Ubuntu you'll notice

332
00:13:26,930 --> 00:13:33,199
that sooner than later if you before if

333
00:13:29,660 --> 00:13:34,880
you type in a name of the tool that is

334
00:13:33,199 --> 00:13:36,890
not on your system you'll get

335
00:13:34,880 --> 00:13:39,770
prompt and on goal like this Camille not

336
00:13:36,890 --> 00:13:43,189
found use apt apt install for that

337
00:13:39,770 --> 00:13:46,610
program now if you do this on 1804 or

338
00:13:43,190 --> 00:13:48,410
1800 1810 Lubuntu it comes up with this

339
00:13:46,610 --> 00:13:50,570
not for all programs but with this

340
00:13:48,410 --> 00:13:54,020
notice a little difference you see this

341
00:13:50,570 --> 00:13:57,980
pseudo snap they want you to run snap

342
00:13:54,020 --> 00:14:00,710
now so so what's happening behind it's I

343
00:13:57,980 --> 00:14:01,640
don't know if it's good or bad it's it's

344
00:14:00,710 --> 00:14:03,740
a thing now

345
00:14:01,640 --> 00:14:05,870
they basically they're pushing people to

346
00:14:03,740 --> 00:14:07,370
using snaps more and more and they

347
00:14:05,870 --> 00:14:09,500
actually have their own operating system

348
00:14:07,370 --> 00:14:12,380
I'll mention that then the balloons a

349
00:14:09,500 --> 00:14:13,880
core that's all about snaps but snaps is

350
00:14:12,380 --> 00:14:16,910
just one thing in the canonical space

351
00:14:13,880 --> 00:14:19,070
now and you can see it's basically thing

352
00:14:16,910 --> 00:14:21,980
in the user space it's not extending out

353
00:14:19,070 --> 00:14:23,750
anywhere down into the kernel or the

354
00:14:21,980 --> 00:14:25,310
hypervisor level but there's things that

355
00:14:23,750 --> 00:14:26,900
existed for a long time and you've

356
00:14:25,310 --> 00:14:29,420
probably heard about this is an app and

357
00:14:26,900 --> 00:14:31,370
the thin app and Microsoft V apps now

358
00:14:29,420 --> 00:14:33,079
there are other packages like a Panna

359
00:14:31,370 --> 00:14:34,670
Jazeera installing flatback anybody

360
00:14:33,080 --> 00:14:39,530
who's lived in Linux probably knows

361
00:14:34,670 --> 00:14:42,890
those they you might not know but each

362
00:14:39,530 --> 00:14:44,900
tab in your chrome is actually container

363
00:14:42,890 --> 00:14:47,150
sandbox by itself and it's running

364
00:14:44,900 --> 00:14:49,040
inside of its own pit namespace meaning

365
00:14:47,150 --> 00:14:51,020
that the programs within that tab can't

366
00:14:49,040 --> 00:14:54,339
see anything else so it is a container

367
00:14:51,020 --> 00:14:56,540
it's like a sandbox inside of chrome now

368
00:14:54,340 --> 00:14:58,400
there are only containers in the sense

369
00:14:56,540 --> 00:15:00,890
that this is a container so that I

370
00:14:58,400 --> 00:15:03,199
continue yeah but that's the app

371
00:15:00,890 --> 00:15:05,090
container so as I looked through all

372
00:15:03,200 --> 00:15:07,820
this different technologies in the past

373
00:15:05,090 --> 00:15:10,160
and as I looked at my challenge I it was

374
00:15:07,820 --> 00:15:13,880
pretty easy to realize the amps were too

375
00:15:10,160 --> 00:15:16,819
hard in distribution the app containers

376
00:15:13,880 --> 00:15:20,210
were to open so I was left with the

377
00:15:16,820 --> 00:15:22,790
middle I was left with the containers

378
00:15:20,210 --> 00:15:24,830
that are in the middle of space now I'm

379
00:15:22,790 --> 00:15:26,689
gonna give you a little lay down this is

380
00:15:24,830 --> 00:15:31,010
this is not me from a year ago this is

381
00:15:26,690 --> 00:15:32,750
me from today and this is like if I knew

382
00:15:31,010 --> 00:15:35,030
what's happening with containers this is

383
00:15:32,750 --> 00:15:36,110
what I've showed myself back here but

384
00:15:35,030 --> 00:15:42,560
this is what's happening with the

385
00:15:36,110 --> 00:15:44,510
containers now so to the very so right

386
00:15:42,560 --> 00:15:46,250
here you see your VM containers right

387
00:15:44,510 --> 00:15:48,380
this is the application that's running

388
00:15:46,250 --> 00:15:50,450
on a guest kernel that's I

389
00:15:48,380 --> 00:15:52,850
isolated by the hypervisor from

390
00:15:50,450 --> 00:15:55,100
affecting anything on a host kernel so

391
00:15:52,850 --> 00:15:58,400
essentially your level of isolation is

392
00:15:55,100 --> 00:16:00,080
this hypervisor that's VM now the

393
00:15:58,400 --> 00:16:02,480
traditional kernel level container is

394
00:16:00,080 --> 00:16:04,730
like darker live in this space so you

395
00:16:02,480 --> 00:16:07,220
have an application you have a bunch of

396
00:16:04,730 --> 00:16:09,800
controls and syscall filters that

397
00:16:07,220 --> 00:16:11,870
prevents you from abusing your host and

398
00:16:09,800 --> 00:16:13,459
this filter is the one that's

399
00:16:11,870 --> 00:16:15,290
responsible for security of your

400
00:16:13,460 --> 00:16:18,410
containers and then you go down to the

401
00:16:15,290 --> 00:16:20,839
host kernel now the thing that happened

402
00:16:18,410 --> 00:16:23,420
probably a year ago maybe a little more

403
00:16:20,840 --> 00:16:25,310
is the Intel clear container so the Cata

404
00:16:23,420 --> 00:16:27,500
containers so what they looked at the

405
00:16:25,310 --> 00:16:27,939
same problem and said okay VMs are too

406
00:16:27,500 --> 00:16:31,190
hard

407
00:16:27,940 --> 00:16:33,740
Cisco filters are kind of too flexible

408
00:16:31,190 --> 00:16:37,130
how do we combine the best and they came

409
00:16:33,740 --> 00:16:40,010
up with a mini OS special key SM kernel

410
00:16:37,130 --> 00:16:42,950
that this really fast booting kind of

411
00:16:40,010 --> 00:16:45,590
quick to execute KVM you know qmu

412
00:16:42,950 --> 00:16:48,920
combined into one package and simplified

413
00:16:45,590 --> 00:16:51,080
so you run this essentially it is a kind

414
00:16:48,920 --> 00:16:54,110
of VM container but it is also very

415
00:16:51,080 --> 00:16:57,770
transparent so you get the best best of

416
00:16:54,110 --> 00:16:59,510
both worlds in theory and then Google

417
00:16:57,770 --> 00:17:01,370
looked at same problem and Google said

418
00:16:59,510 --> 00:17:03,200
all right so how about we instead of

419
00:17:01,370 --> 00:17:04,970
doing that the hypervisor thing in the

420
00:17:03,200 --> 00:17:07,850
Cisco thing we actually create our own

421
00:17:04,970 --> 00:17:09,890
kernel and we do it as a shim kernel so

422
00:17:07,849 --> 00:17:12,198
all your calls from application go to

423
00:17:09,890 --> 00:17:14,240
that shim kernel and then we filter it

424
00:17:12,199 --> 00:17:15,920
out and we kind of look like a kernel

425
00:17:14,240 --> 00:17:18,920
we're not actually a kernel but then we

426
00:17:15,920 --> 00:17:21,290
whatever we get from the horse kernel

427
00:17:18,920 --> 00:17:26,140
which sounds really really cool right

428
00:17:21,290 --> 00:17:29,690
it's like wow why why not do this and in

429
00:17:26,140 --> 00:17:32,180
it's all the cool ideas that the trouble

430
00:17:29,690 --> 00:17:34,840
with this is they're all introduced a

431
00:17:32,180 --> 00:17:37,310
lot of performance downgrades so

432
00:17:34,840 --> 00:17:39,980
somebody and I have a link at the bottom

433
00:17:37,310 --> 00:17:41,629
somebody did a performance analysis on

434
00:17:39,980 --> 00:17:43,910
all those kernels and the Google G visor

435
00:17:41,630 --> 00:17:47,090
came the worst it's like the slower than

436
00:17:43,910 --> 00:17:48,650
the freaking VM and then they looked at

437
00:17:47,090 --> 00:17:52,010
the Intel CC and I was like it was

438
00:17:48,650 --> 00:17:53,810
painful to do those two and so when you

439
00:17:52,010 --> 00:17:55,070
actually look at the performance graph

440
00:17:53,810 --> 00:17:56,360
and I don't have it here because I

441
00:17:55,070 --> 00:17:59,840
didn't want to copy it from that web

442
00:17:56,360 --> 00:18:01,250
page but essentially says your docker

443
00:17:59,840 --> 00:18:04,399
things are the fastest

444
00:18:01,250 --> 00:18:06,860
your CCS are probably in the next then

445
00:18:04,400 --> 00:18:08,750
the GM's and then the Google G visor

446
00:18:06,860 --> 00:18:11,060
now that's could change in the future so

447
00:18:08,750 --> 00:18:13,220
in maybe at some point in time they're

448
00:18:11,060 --> 00:18:15,020
gonna you know own up and really build

449
00:18:13,220 --> 00:18:16,550
it onto something really cool and maybe

450
00:18:15,020 --> 00:18:19,639
that's the next thing in containers but

451
00:18:16,550 --> 00:18:21,980
so far it's it wasn't and obviously a

452
00:18:19,640 --> 00:18:25,550
year ago it wasn't a choice for me

453
00:18:21,980 --> 00:18:28,370
either so another thing that wasn't a

454
00:18:25,550 --> 00:18:30,260
choice for me is the scone and the scone

455
00:18:28,370 --> 00:18:32,989
is the next cool thing that kind of

456
00:18:30,260 --> 00:18:36,560
happened so containers that are running

457
00:18:32,990 --> 00:18:38,750
in IntelliJ X and claves and that's

458
00:18:36,560 --> 00:18:40,909
another idea it's like yay how about we

459
00:18:38,750 --> 00:18:44,570
go one level down do you people know

460
00:18:40,910 --> 00:18:49,570
about us Jax I see I see so essentially

461
00:18:44,570 --> 00:18:53,030
it's a it's a completely independent

462
00:18:49,570 --> 00:18:56,000
encrypted area for code execution and

463
00:18:53,030 --> 00:18:57,800
for data manipulation that only the

464
00:18:56,000 --> 00:18:59,480
processor can access and you can switch

465
00:18:57,800 --> 00:19:01,280
the doubt and clave and then execute

466
00:18:59,480 --> 00:19:04,010
your trusted code on that so it really

467
00:19:01,280 --> 00:19:05,899
kind of pokes way from the application

468
00:19:04,010 --> 00:19:07,640
down to the hardware level and then

469
00:19:05,900 --> 00:19:10,160
brings it all up to the application

470
00:19:07,640 --> 00:19:14,510
level so that's like you can't get any

471
00:19:10,160 --> 00:19:17,840
more secure than that and my question to

472
00:19:14,510 --> 00:19:19,460
you is did you foreshadow it yeah do you

473
00:19:17,840 --> 00:19:22,280
guys anybody see what I did there

474
00:19:19,460 --> 00:19:24,470
yeah all right for those who didn't get

475
00:19:22,280 --> 00:19:25,970
it for Shadow is an attack on those GX

476
00:19:24,470 --> 00:19:27,470
enclaves it just came out fairly

477
00:19:25,970 --> 00:19:30,530
recently and that's the thing that

478
00:19:27,470 --> 00:19:32,690
breaks stuff in the STX enclaves and

479
00:19:30,530 --> 00:19:34,520
plus they are horribly slow to you

480
00:19:32,690 --> 00:19:35,960
imagine bringing all the stuff down and

481
00:19:34,520 --> 00:19:38,270
then we encrypting and bring it all up

482
00:19:35,960 --> 00:19:39,980
that somebody estimated it's like

483
00:19:38,270 --> 00:19:41,720
actually the original paper that

484
00:19:39,980 --> 00:19:44,150
proposed these years and claves and

485
00:19:41,720 --> 00:19:47,830
containers coated that there were 18

486
00:19:44,150 --> 00:19:49,250
times slower than a normal container so

487
00:19:47,830 --> 00:19:51,710
there you go

488
00:19:49,250 --> 00:19:53,120
III think it's an interesting technology

489
00:19:51,710 --> 00:19:55,180
to watch for but that's probably even

490
00:19:53,120 --> 00:19:58,699
farther out okay

491
00:19:55,180 --> 00:20:01,730
so at this point a year ago I made my

492
00:19:58,700 --> 00:20:04,670
pick darker and other containers were it

493
00:20:01,730 --> 00:20:06,380
I needed to provide the flexibility I

494
00:20:04,670 --> 00:20:08,930
needed to provide the performance doctor

495
00:20:06,380 --> 00:20:11,120
was fitting I need to have reasonable

496
00:20:08,930 --> 00:20:13,490
security and I was planning to run

497
00:20:11,120 --> 00:20:15,120
trusted code I wasn't you know running

498
00:20:13,490 --> 00:20:18,510
our clients code on that

499
00:20:15,120 --> 00:20:20,309
so I I was fairly you know confident so

500
00:20:18,510 --> 00:20:23,000
that doctor will do it fairly well

501
00:20:20,309 --> 00:20:25,620
without resorting to the amps and the

502
00:20:23,000 --> 00:20:28,440
next thing that kind of hit me is was it

503
00:20:25,620 --> 00:20:31,770
was Windows so now I have to both

504
00:20:28,440 --> 00:20:33,570
windows on darker it was like okay well

505
00:20:31,770 --> 00:20:35,580
windows for darker was the thing already

506
00:20:33,570 --> 00:20:38,340
at the time for probably two three years

507
00:20:35,580 --> 00:20:40,649
and I you know don't deep down into the

508
00:20:38,340 --> 00:20:42,209
space of windows containers trying to

509
00:20:40,650 --> 00:20:44,250
figure out what what the hell's going on

510
00:20:42,210 --> 00:20:46,140
there well I'll give you a quick gist

511
00:20:44,250 --> 00:20:48,900
I'm not gonna go into a lot of details

512
00:20:46,140 --> 00:20:50,870
but there used to be a Google darker

513
00:20:48,900 --> 00:20:54,120
toolbox which was running containers

514
00:20:50,870 --> 00:20:56,699
inside of the VirtualBox installed on

515
00:20:54,120 --> 00:20:58,169
your windows then Microsoft kind of

516
00:20:56,700 --> 00:21:01,470
owned up to the whole thing and they

517
00:20:58,170 --> 00:21:03,240
said all right so how about we just for

518
00:21:01,470 --> 00:21:05,700
Windows 10 which is probably devil

519
00:21:03,240 --> 00:21:10,260
machines we can use hyper-v to run your

520
00:21:05,700 --> 00:21:13,650
docker containers but for Windows Server

521
00:21:10,260 --> 00:21:15,600
we create a Windows Server container

522
00:21:13,650 --> 00:21:17,130
subsystem that actually does run

523
00:21:15,600 --> 00:21:19,260
containers so essentially they did

524
00:21:17,130 --> 00:21:21,090
provide access to the NT kernel features

525
00:21:19,260 --> 00:21:23,429
from within your container so you don't

526
00:21:21,090 --> 00:21:25,350
have to have any any other stupid VM

527
00:21:23,429 --> 00:21:27,750
level in between because I'm sure you

528
00:21:25,350 --> 00:21:29,550
understand putting a VM in somewhere in

529
00:21:27,750 --> 00:21:30,360
the middle kind of negates the benefits

530
00:21:29,550 --> 00:21:35,909
of docker

531
00:21:30,360 --> 00:21:37,530
speed right so the trouble is hyper-v

532
00:21:35,910 --> 00:21:39,150
use exclusive istic that means you can't

533
00:21:37,530 --> 00:21:41,160
run VirtualBox when you're on hyper-v

534
00:21:39,150 --> 00:21:44,150
although I actually did beat it into

535
00:21:41,160 --> 00:21:48,150
existence and I can show I'm running

536
00:21:44,150 --> 00:21:50,790
hyper-v on the k vm in linux inside of

537
00:21:48,150 --> 00:21:53,640
the VirtualBox and it's it's horrible

538
00:21:50,790 --> 00:21:55,980
don't try it at home but if you ever

539
00:21:53,640 --> 00:22:01,410
feel masochistic I can't give you

540
00:21:55,980 --> 00:22:02,550
pointers so windows containers they run

541
00:22:01,410 --> 00:22:06,300
on Windows Server and Windows server

542
00:22:02,550 --> 00:22:09,178
core the images windows images have to

543
00:22:06,300 --> 00:22:10,889
start with only two distributions like

544
00:22:09,179 --> 00:22:12,750
if you know docker you can start from

545
00:22:10,890 --> 00:22:14,370
scratch you can go and build your darker

546
00:22:12,750 --> 00:22:16,170
from the beginning for Windows you have

547
00:22:14,370 --> 00:22:18,389
to start either from the nano server

548
00:22:16,170 --> 00:22:21,780
which is their version of Windows server

549
00:22:18,390 --> 00:22:24,870
that can run anything but 64-bit and

550
00:22:21,780 --> 00:22:26,010
only dotnet core applications and if you

551
00:22:24,870 --> 00:22:28,149
don't know dotnet core is the lighter

552
00:22:26,010 --> 00:22:30,160
version of that it's more

553
00:22:28,150 --> 00:22:32,800
Linux friendly they're actually porting

554
00:22:30,160 --> 00:22:34,720
dotnet core to Linux and then the other

555
00:22:32,800 --> 00:22:38,020
thing is or you can base it on Windows

556
00:22:34,720 --> 00:22:39,790
server core which is an 11 gig based

557
00:22:38,020 --> 00:22:42,160
distribution and then you run it with

558
00:22:39,790 --> 00:22:44,649
dot net and you can have fooled at net

559
00:22:42,160 --> 00:22:46,990
and you can have 32-bit and of course

560
00:22:44,650 --> 00:22:49,390
telemetry you know Micra so what you're

561
00:22:46,990 --> 00:22:52,800
doing you can turn it off but by default

562
00:22:49,390 --> 00:22:52,800
it's on and you don't even know it

563
00:22:54,090 --> 00:23:00,610
okay so that's how you run Windows on

564
00:22:58,180 --> 00:23:03,070
docker containers inside of Windows and

565
00:23:00,610 --> 00:23:05,620
then you can run Linux but that

566
00:23:03,070 --> 00:23:08,320
introduces a hyper-v VM there's no

567
00:23:05,620 --> 00:23:10,600
tricks to it you can't run Linux kernel

568
00:23:08,320 --> 00:23:12,370
on Windows kernel you have to have a VM

569
00:23:10,600 --> 00:23:16,179
and between that does something for you

570
00:23:12,370 --> 00:23:18,270
and that's their solution so I'm not

571
00:23:16,180 --> 00:23:20,890
sure you can ever expect Windows to run

572
00:23:18,270 --> 00:23:22,840
Linux containers natively but when you

573
00:23:20,890 --> 00:23:24,490
run it just know that there's a hyper-v

574
00:23:22,840 --> 00:23:28,540
VM underneath it and I'm going to talk

575
00:23:24,490 --> 00:23:30,070
about it in a second - so and then when

576
00:23:28,540 --> 00:23:31,629
you run Windows containers on Linux you

577
00:23:30,070 --> 00:23:36,220
can actually do this and I'll show to

578
00:23:31,630 --> 00:23:38,920
you so just second hopefully you can

579
00:23:36,220 --> 00:23:43,680
hear me still so I'm gonna switch to

580
00:23:38,920 --> 00:23:51,670
another shell and this is this is my

581
00:23:43,680 --> 00:23:53,410
darker that's well I can't type so look

582
00:23:51,670 --> 00:23:56,080
at those two things so this is the

583
00:23:53,410 --> 00:23:57,820
client and the client is Linux and then

584
00:23:56,080 --> 00:24:07,480
this is the server and the server is

585
00:23:57,820 --> 00:24:09,879
Windows so if I do a darker image I have

586
00:24:07,480 --> 00:24:11,590
a list of images and you see whoo I can

587
00:24:09,880 --> 00:24:13,300
run Windows server core I can run

588
00:24:11,590 --> 00:24:15,429
another server I can even run Microsoft

589
00:24:13,300 --> 00:24:16,000
sequel server on my daugher so that's

590
00:24:15,430 --> 00:24:18,520
pretty cool

591
00:24:16,000 --> 00:24:19,900
notice the sizes - this is you know this

592
00:24:18,520 --> 00:24:25,060
is a little different from Linux

593
00:24:19,900 --> 00:24:26,650
containers but it's all possible but the

594
00:24:25,060 --> 00:24:28,240
reason this possible is not a big trick

595
00:24:26,650 --> 00:24:29,560
really what what I'm doing actually in

596
00:24:28,240 --> 00:24:31,810
the background is I'm running this

597
00:24:29,560 --> 00:24:35,470
little thing the Ronix linux docker host

598
00:24:31,810 --> 00:24:40,510
which is a Windows server core VM which

599
00:24:35,470 --> 00:24:41,799
I'm forwarding the docker management

600
00:24:40,510 --> 00:24:42,940
interface out and

601
00:24:41,799 --> 00:24:47,019
and I'm connecting to the darker

602
00:24:42,940 --> 00:24:48,789
management interface and this is why I

603
00:24:47,019 --> 00:24:55,239
all talk about the darker management

604
00:24:48,789 --> 00:24:57,700
interface in just a second so come on

605
00:24:55,239 --> 00:24:58,419
complete for me yay all right so that's

606
00:24:57,700 --> 00:25:00,190
the trick

607
00:24:58,419 --> 00:25:02,259
so I'm feeding off a different system

608
00:25:00,190 --> 00:25:06,970
and running it here and my Linux

609
00:25:02,259 --> 00:25:09,249
environment okay so with that out what's

610
00:25:06,970 --> 00:25:10,929
the catch and the catch is simple it

611
00:25:09,249 --> 00:25:12,639
still it works Microsoft's is still

612
00:25:10,929 --> 00:25:14,230
working on it they're bugs all over the

613
00:25:12,639 --> 00:25:16,809
place they're still on the implemented

614
00:25:14,230 --> 00:25:18,399
features did not working is buggy and I

615
00:25:16,809 --> 00:25:20,889
fortunately I had to spend like two days

616
00:25:18,399 --> 00:25:23,320
you know now debugging the network where

617
00:25:20,889 --> 00:25:25,869
it would die in the middle of a very

618
00:25:23,320 --> 00:25:29,408
intensive stream and it was horrible but

619
00:25:25,869 --> 00:25:31,509
I still have headaches about it but so

620
00:25:29,409 --> 00:25:33,549
another thing is nana servers headless

621
00:25:31,509 --> 00:25:35,320
you can't run any Google nana server

622
00:25:33,549 --> 00:25:37,600
windows server container it doesn't have

623
00:25:35,320 --> 00:25:39,820
an RDP built into it so you can't RDP

624
00:25:37,600 --> 00:25:43,209
into it so what that means is you can't

625
00:25:39,820 --> 00:25:45,129
have that nice GUI windows containers

626
00:25:43,210 --> 00:25:46,480
what I showed you from Linux just a

627
00:25:45,129 --> 00:25:49,418
second ago you can't have that on

628
00:25:46,480 --> 00:25:51,519
Windows it's just not possible so maybe

629
00:25:49,419 --> 00:25:54,789
one day when Windows when Microsoft

630
00:25:51,519 --> 00:25:57,159
actually goes into implementing the RDP

631
00:25:54,789 --> 00:25:59,320
into Windows containers maybe then you

632
00:25:57,159 --> 00:26:03,460
can have your GUI from the windows

633
00:25:59,320 --> 00:26:07,539
containers and you also don't there's no

634
00:26:03,460 --> 00:26:11,440
way to update Windows containers and I

635
00:26:07,539 --> 00:26:15,999
go wait wait what what no no update on

636
00:26:11,440 --> 00:26:18,070
windows so yeah containers are immutable

637
00:26:15,999 --> 00:26:20,739
in the way that my croissants you to do

638
00:26:18,070 --> 00:26:23,320
it is they want you to re-upload vbase

639
00:26:20,739 --> 00:26:25,149
your image rebuild your image so every

640
00:26:23,320 --> 00:26:27,700
time you pull an image you actually are

641
00:26:25,149 --> 00:26:29,799
building on the latest fixpack that they

642
00:26:27,700 --> 00:26:31,090
build in so what it means to you if

643
00:26:29,799 --> 00:26:32,649
you're running Windows containers you

644
00:26:31,090 --> 00:26:34,389
have to rebuild your images that's the

645
00:26:32,649 --> 00:26:39,340
only way you can get a Windows Update on

646
00:26:34,389 --> 00:26:42,609
the windows container alright moving on

647
00:26:39,340 --> 00:26:44,168
so let's talk a little bit about

648
00:26:42,609 --> 00:26:46,359
security of the windows containers

649
00:26:44,169 --> 00:26:49,830
because that's windows you have to talk

650
00:26:46,359 --> 00:26:53,049
about security and a couple of things

651
00:26:49,830 --> 00:26:54,850
one is apparently I have no idea why

652
00:26:53,049 --> 00:26:55,450
they do this but when darker porter

653
00:26:54,850 --> 00:26:58,260
their stuff

654
00:26:55,450 --> 00:27:01,870
two windows they rewrote it in dotnet

655
00:26:58,260 --> 00:27:03,970
instead of go and what it means to you

656
00:27:01,870 --> 00:27:05,649
is that now you can look at the source

657
00:27:03,970 --> 00:27:06,940
code you now you can reverse the source

658
00:27:05,649 --> 00:27:08,889
code and look at the go because you know

659
00:27:06,940 --> 00:27:11,370
there's dotnet just like Java you can

660
00:27:08,889 --> 00:27:14,379
you know look at the dotnet code

661
00:27:11,370 --> 00:27:17,018
reversed from the white level code so

662
00:27:14,380 --> 00:27:18,730
one guy did it he opened it up he said

663
00:27:17,019 --> 00:27:21,610
all right cool let's look at the darker

664
00:27:18,730 --> 00:27:24,639
core DLL you know he found this little

665
00:27:21,610 --> 00:27:26,500
thing that passed packets from the

666
00:27:24,639 --> 00:27:29,019
docker control interface and he said

667
00:27:26,500 --> 00:27:32,049
let's se realized I wonder what I can do

668
00:27:29,019 --> 00:27:35,559
there with this so what he did is he

669
00:27:32,049 --> 00:27:39,039
built a DC realization attack on the

670
00:27:35,559 --> 00:27:41,678
docker dotnet DLL and he got himself to

671
00:27:39,039 --> 00:27:45,129
escalate the privileges from from the

672
00:27:41,679 --> 00:27:47,590
normal darker D into a darker user with

673
00:27:45,130 --> 00:27:49,960
net Authority system so that's the thing

674
00:27:47,590 --> 00:27:52,658
just making you aware that's not a

675
00:27:49,960 --> 00:27:54,159
horrible thing but it is a thing another

676
00:27:52,659 --> 00:27:56,110
thing that people did with Windows

677
00:27:54,159 --> 00:27:58,870
containers and this is really cool

678
00:27:56,110 --> 00:28:00,189
attack i I I will walk you really

679
00:27:58,870 --> 00:28:01,989
quickly through this because I think

680
00:28:00,190 --> 00:28:06,429
it's cool it's worth knowing about it

681
00:28:01,990 --> 00:28:09,039
was demonstrated at blackhat 17 and it

682
00:28:06,429 --> 00:28:11,380
relies on several critical windows

683
00:28:09,039 --> 00:28:14,769
components basically what it is is

684
00:28:11,380 --> 00:28:16,360
somebody I developer goes out to on

685
00:28:14,769 --> 00:28:18,940
malicious website and a malicious

686
00:28:16,360 --> 00:28:22,209
website has JavaScript and that

687
00:28:18,940 --> 00:28:24,970
JavaScript wants to target your docker

688
00:28:22,210 --> 00:28:27,490
instance and by default just like you

689
00:28:24,970 --> 00:28:29,769
saw me here exposing that interface

690
00:28:27,490 --> 00:28:32,019
developers do expose the internal

691
00:28:29,769 --> 00:28:34,000
interfaces out to their systems and by

692
00:28:32,019 --> 00:28:36,190
default that will be bound to zero zero

693
00:28:34,000 --> 00:28:38,049
zero meaning to any interface so docker

694
00:28:36,190 --> 00:28:40,690
is listening on your machine on any

695
00:28:38,049 --> 00:28:41,049
interface for any action you can do with

696
00:28:40,690 --> 00:28:43,779
docker

697
00:28:41,049 --> 00:28:46,960
and what they do is that malicious

698
00:28:43,779 --> 00:28:48,789
JavaScript then reroutes back to the

699
00:28:46,960 --> 00:28:50,940
darker daemon on your machine through a

700
00:28:48,789 --> 00:28:54,610
little tricks with DNS rebinding

701
00:28:50,940 --> 00:28:57,220
Microsoft has this LLVM thing for

702
00:28:54,610 --> 00:28:59,649
assigning DNS names but you can trick it

703
00:28:57,220 --> 00:29:02,440
is essentially saying you're going to

704
00:28:59,649 --> 00:29:04,389
pwned something and then that poll now

705
00:29:02,440 --> 00:29:07,450
resolves to your local Dhakal German

706
00:29:04,389 --> 00:29:09,340
darker daemon so the JavaScript from the

707
00:29:07,450 --> 00:29:10,930
browser is now talking to the dark

708
00:29:09,340 --> 00:29:13,149
on your machine and from that point on

709
00:29:10,930 --> 00:29:15,220
you have full ownage because you can

710
00:29:13,150 --> 00:29:16,680
actually create new containers they

711
00:29:15,220 --> 00:29:18,790
created a new containers they put a

712
00:29:16,680 --> 00:29:20,260
shell script into that container that

713
00:29:18,790 --> 00:29:21,909
container actually because you're

714
00:29:20,260 --> 00:29:24,490
running at boot privileges and I'll show

715
00:29:21,910 --> 00:29:26,050
them a second to that infected the mobi

716
00:29:24,490 --> 00:29:27,910
VM remember I talked about the VM

717
00:29:26,050 --> 00:29:29,800
running on Linux so in fact that made

718
00:29:27,910 --> 00:29:32,010
persistence and so at that point in time

719
00:29:29,800 --> 00:29:34,780
every time you spawn off another

720
00:29:32,010 --> 00:29:38,110
container on your machine it was already

721
00:29:34,780 --> 00:29:39,820
rootkit it so if you're interested find

722
00:29:38,110 --> 00:29:41,590
out more about this they go into a lot

723
00:29:39,820 --> 00:29:43,210
of details but that's just it a kind of

724
00:29:41,590 --> 00:29:48,159
cool thing that you can do with the

725
00:29:43,210 --> 00:29:50,110
containers okay so another thing that I

726
00:29:48,160 --> 00:29:52,630
had to deal with is that I was working

727
00:29:50,110 --> 00:29:54,219
with very sensitive intellectual

728
00:29:52,630 --> 00:29:56,170
property I was dealing with encrypted

729
00:29:54,220 --> 00:29:58,390
installers because that's sensitive IP

730
00:29:56,170 --> 00:30:01,180
you don't want to get it out I had to

731
00:29:58,390 --> 00:30:03,310
have a sensitive deployment I had a

732
00:30:01,180 --> 00:30:04,600
special licensing protocol that I had to

733
00:30:03,310 --> 00:30:07,450
do basically I had to protect my

734
00:30:04,600 --> 00:30:11,020
employer at the time and I had to make

735
00:30:07,450 --> 00:30:12,400
it secure now well so just to explain to

736
00:30:11,020 --> 00:30:13,900
you what's going on here with secrets

737
00:30:12,400 --> 00:30:16,270
and by the way there's not a conference

738
00:30:13,900 --> 00:30:19,210
talk going on about secrets at the same

739
00:30:16,270 --> 00:30:21,160
time but why do you show you something

740
00:30:19,210 --> 00:30:25,030
so let's say I'm building a container

741
00:30:21,160 --> 00:30:27,280
and I want to look at storing secret

742
00:30:25,030 --> 00:30:30,520
information and I build something like

743
00:30:27,280 --> 00:30:32,139
this I look at look at my darker file

744
00:30:30,520 --> 00:30:34,060
and it's something like I've got a

745
00:30:32,140 --> 00:30:35,800
secret here maybe I can store it my

746
00:30:34,060 --> 00:30:38,290
secret in the environment variable but

747
00:30:35,800 --> 00:30:40,540
if you look at darker you know that you

748
00:30:38,290 --> 00:30:43,060
shouldn't really storing this I can try

749
00:30:40,540 --> 00:30:45,909
to store it in the build arguments I can

750
00:30:43,060 --> 00:30:48,460
copy my super-secret file into and then

751
00:30:45,910 --> 00:30:50,680
delete that super-secret file maybe

752
00:30:48,460 --> 00:30:52,450
that's good enough for me to build a

753
00:30:50,680 --> 00:30:54,310
docker container and actually you know

754
00:30:52,450 --> 00:30:56,370
get my secrets into the container

755
00:30:54,310 --> 00:31:01,389
without exposing them to the end-user

756
00:30:56,370 --> 00:31:04,090
well so I'm sure you guys heard about

757
00:31:01,390 --> 00:31:12,460
docker history if you haven't you should

758
00:31:04,090 --> 00:31:15,669
and the darker history is this so I

759
00:31:12,460 --> 00:31:18,390
should probably build this so I'm

760
00:31:15,670 --> 00:31:18,390
building it

761
00:31:18,810 --> 00:31:25,480
so I'm doing this and I'm gonna do this

762
00:31:21,520 --> 00:31:28,000
I'm gonna add a build because I'm smart

763
00:31:25,480 --> 00:31:31,710
I miss I've heard about security and I'm

764
00:31:28,000 --> 00:31:37,750
building a build arguments to assign my

765
00:31:31,710 --> 00:31:40,750
secret password at the build time so I

766
00:31:37,750 --> 00:31:43,510
can save it and not have to give it out

767
00:31:40,750 --> 00:31:46,390
to the customer so it builds and then I

768
00:31:43,510 --> 00:31:49,570
do this I just want to check how it

769
00:31:46,390 --> 00:31:52,600
built I do a darker history I do my

770
00:31:49,570 --> 00:31:55,330
container secret

771
00:31:52,600 --> 00:31:58,719
come on complete for me I don't want to

772
00:31:55,330 --> 00:32:00,909
type all right and I see something

773
00:31:58,720 --> 00:32:02,950
really odd in this history so instead

774
00:32:00,910 --> 00:32:06,210
you know it kind of looks ugly but I

775
00:32:02,950 --> 00:32:09,490
build this little tool called darker

776
00:32:06,210 --> 00:32:11,830
historian and I do this and it gives me

777
00:32:09,490 --> 00:32:15,220
oh my gosh it gave me back my docker

778
00:32:11,830 --> 00:32:17,740
file and it gave me with the the secret

779
00:32:15,220 --> 00:32:19,390
here and well thankfully the file is

780
00:32:17,740 --> 00:32:21,640
deleted so shouldn't have any files in

781
00:32:19,390 --> 00:32:23,350
that but it also gave me this like key

782
00:32:21,640 --> 00:32:26,200
to secrets so all your secrets are

783
00:32:23,350 --> 00:32:28,870
exposed you can't save them in a docker

784
00:32:26,200 --> 00:32:31,210
file well moreover actually take a look

785
00:32:28,870 --> 00:32:34,540
at this so here's my docker historian

786
00:32:31,210 --> 00:32:40,270
for let's see what do I have

787
00:32:34,540 --> 00:32:50,470
oh the sequel my my little Microsoft

788
00:32:40,270 --> 00:32:53,500
sequel file sequel o sequel Express ok

789
00:32:50,470 --> 00:32:55,870
so here's here's my secret my docker

790
00:32:53,500 --> 00:32:58,420
file it's essentially reversing this the

791
00:32:55,870 --> 00:33:00,040
docker file back into what it was so if

792
00:32:58,420 --> 00:33:02,440
you ever get an image and you want to

793
00:33:00,040 --> 00:33:04,389
find out how was build run this you're

794
00:33:02,440 --> 00:33:05,890
gonna get your darker file back with all

795
00:33:04,390 --> 00:33:09,100
the details moreover you know actually

796
00:33:05,890 --> 00:33:11,110
see this part is what darker did

797
00:33:09,100 --> 00:33:13,179
themselves this is how they built the

798
00:33:11,110 --> 00:33:16,510
image that I built my docker file from

799
00:33:13,180 --> 00:33:18,250
so you can reverse all the way back and

800
00:33:16,510 --> 00:33:24,480
just to show you I'm not I don't have

801
00:33:18,250 --> 00:33:28,180
anything up my sleeve here's here's my

802
00:33:24,480 --> 00:33:31,050
docker file for Microsoft sequel so this

803
00:33:28,180 --> 00:33:34,440
is what I did and this is from

804
00:33:31,050 --> 00:33:35,610
docker so this is it reversed you see it

805
00:33:34,440 --> 00:33:37,950
looks a little bit different obviously

806
00:33:35,610 --> 00:33:40,139
it's not the same syntax but then this

807
00:33:37,950 --> 00:33:42,420
is what I got from so if I ever want to

808
00:33:40,140 --> 00:33:44,429
rebuild Ubuntu like they did and I can

809
00:33:42,420 --> 00:33:48,300
just run this file so that's easy

810
00:33:44,429 --> 00:33:50,760
alright so that that was about history

811
00:33:48,300 --> 00:33:54,110
now another thing is like all right what

812
00:33:50,760 --> 00:33:59,840
I do about the file and there's darker

813
00:33:54,110 --> 00:34:05,399
save and I do darker save and I save my

814
00:33:59,840 --> 00:34:09,600
secret to ah dump and let's see what's

815
00:34:05,400 --> 00:34:14,310
in that dump and I go start my my little

816
00:34:09,600 --> 00:34:16,230
tool it stores right here okay I have

817
00:34:14,310 --> 00:34:22,619
the dump file and I look in the dump

818
00:34:16,230 --> 00:34:30,179
file sorry look in my dumb file and you

819
00:34:22,619 --> 00:34:31,860
know what's going on I okay

820
00:34:30,179 --> 00:34:33,690
so I look in the dump file and there's

821
00:34:31,860 --> 00:34:35,550
several layers in that dump file and

822
00:34:33,690 --> 00:34:37,830
there's a JSON in that dump file that

823
00:34:35,550 --> 00:34:39,840
actually uh interesting to you can look

824
00:34:37,830 --> 00:34:41,520
at all the details of the JSON file and

825
00:34:39,840 --> 00:34:43,710
see what's going on there you can see

826
00:34:41,520 --> 00:34:45,449
the secrets too if you want it to but

827
00:34:43,710 --> 00:34:47,580
what's more interesting is that docker

828
00:34:45,449 --> 00:34:51,928
file has layers and in one on the layers

829
00:34:47,580 --> 00:34:54,659
I find the super secret file and this is

830
00:34:51,929 --> 00:34:57,330
because that's what docker does it never

831
00:34:54,659 --> 00:35:00,480
deletes stuff it actually creates layers

832
00:34:57,330 --> 00:35:02,700
yeah the file system is right on or

833
00:35:00,480 --> 00:35:04,050
create on right so whatever you write

834
00:35:02,700 --> 00:35:05,879
something it creates another layer so

835
00:35:04,050 --> 00:35:10,200
your secret super secret file is still

836
00:35:05,880 --> 00:35:12,060
there don't worry about this okay so

837
00:35:10,200 --> 00:35:14,460
that's about secrets and that gave me a

838
00:35:12,060 --> 00:35:16,200
huge headache I had to look at it in its

839
00:35:14,460 --> 00:35:22,680
like oh my gosh I was building darker

840
00:35:16,200 --> 00:35:24,810
and I built this well turns out they're

841
00:35:22,680 --> 00:35:27,029
solutions and the solutions are either

842
00:35:24,810 --> 00:35:29,070
squashing or multistage built I'm not

843
00:35:27,030 --> 00:35:30,450
going to go into details unfortunately

844
00:35:29,070 --> 00:35:33,390
that's not supported on Windows so I

845
00:35:30,450 --> 00:35:36,060
wasn't nowhere you know pretty bad move

846
00:35:33,390 --> 00:35:38,069
now there are open source solutions like

847
00:35:36,060 --> 00:35:40,350
docket of old and others like hash warp

848
00:35:38,070 --> 00:35:41,820
and kubernetes and swarm that wasn't

849
00:35:40,350 --> 00:35:44,490
overkill for me at the time so what I

850
00:35:41,820 --> 00:35:45,130
did is I build a standalone docker

851
00:35:44,490 --> 00:35:46,720
container to

852
00:35:45,130 --> 00:35:48,160
contain all the secrets so during a

853
00:35:46,720 --> 00:35:49,868
build time they can get the secrets from

854
00:35:48,160 --> 00:35:51,160
the standalone docker container but

855
00:35:49,869 --> 00:35:54,089
that's essentially the extent you have

856
00:35:51,160 --> 00:35:56,799
to go to to actually build a secure and

857
00:35:54,089 --> 00:35:58,869
reasonable solution and then last thing

858
00:35:56,799 --> 00:36:01,509
I have to do is okay now I have to have

859
00:35:58,869 --> 00:36:04,210
a standalone Linux container so let's

860
00:36:01,509 --> 00:36:06,190
look at the Linux security and the Linux

861
00:36:04,210 --> 00:36:07,960
security has gotten a lot of attention a

862
00:36:06,190 --> 00:36:09,220
Linux acha contain container security

863
00:36:07,960 --> 00:36:11,349
got a lot of attention over the past

864
00:36:09,220 --> 00:36:12,788
years so I'm not gonna go again into

865
00:36:11,349 --> 00:36:15,130
details if you're really interested in

866
00:36:12,789 --> 00:36:18,190
figuring out if they're secure the short

867
00:36:15,130 --> 00:36:19,960
answer yeah layer secure no talk goes

868
00:36:18,190 --> 00:36:22,720
about referencing just Raziel and her

869
00:36:19,960 --> 00:36:25,000
container AF thing basically it's

870
00:36:22,720 --> 00:36:27,129
proving that they are secure unless you

871
00:36:25,000 --> 00:36:30,369
do stupid stuff and I appreciate people

872
00:36:27,130 --> 00:36:32,319
do stupid stuff but there's you can do

873
00:36:30,369 --> 00:36:35,650
protections against the DOS you can

874
00:36:32,319 --> 00:36:37,329
there's cap net raw capability in the

875
00:36:35,650 --> 00:36:39,099
Linux containers that in theory give you

876
00:36:37,329 --> 00:36:41,859
men in the middle but in practice nobody

877
00:36:39,099 --> 00:36:43,599
actually proved it there's also a

878
00:36:41,859 --> 00:36:45,250
knowledge set of tools that allows you

879
00:36:43,599 --> 00:36:47,109
to look into the application side of

880
00:36:45,250 --> 00:36:49,990
your container and and defend from the

881
00:36:47,109 --> 00:36:51,848
application level your container but

882
00:36:49,990 --> 00:36:54,549
there are tons of food guns and food

883
00:36:51,849 --> 00:36:56,710
guns is something you know you pretty

884
00:36:54,549 --> 00:37:00,460
much do to yourself and this is how you

885
00:36:56,710 --> 00:37:03,160
screw yourself over so here's a typical

886
00:37:00,460 --> 00:37:04,900
scenario if you ever run know the inside

887
00:37:03,160 --> 00:37:06,460
of a docker container you probably

888
00:37:04,900 --> 00:37:08,140
encounter this when you hit control-c

889
00:37:06,460 --> 00:37:10,630
the container doesn't terminate and you

890
00:37:08,140 --> 00:37:12,069
do what you Google right and the first

891
00:37:10,630 --> 00:37:14,559
thing that pops up is this guy from

892
00:37:12,069 --> 00:37:17,470
darker thread saying okay if you can't

893
00:37:14,559 --> 00:37:19,900
terminate it just add the - - bid equals

894
00:37:17,470 --> 00:37:21,279
cost and and you're good with it no

895
00:37:19,900 --> 00:37:24,759
change to the code and you're like yay

896
00:37:21,279 --> 00:37:26,829
well what this does is it exposes all

897
00:37:24,759 --> 00:37:28,329
the processes from your host to your

898
00:37:26,829 --> 00:37:29,890
dock in containers so whatever is

899
00:37:28,329 --> 00:37:32,049
running inside of your container can now

900
00:37:29,890 --> 00:37:35,410
you look at the command lines on your

901
00:37:32,049 --> 00:37:38,619
poor host and it's like yay so the

902
00:37:35,410 --> 00:37:41,589
actual answer is to add single handle

903
00:37:38,619 --> 00:37:43,329
inside of your app there are other food

904
00:37:41,589 --> 00:37:45,308
gowns that people do to themselves like

905
00:37:43,329 --> 00:37:48,940
the rude thing so let me show you the

906
00:37:45,309 --> 00:37:50,829
rude thing so never run containers root

907
00:37:48,940 --> 00:37:52,420
you might have heard this but here's to

908
00:37:50,829 --> 00:37:54,670
use the actual proof so

909
00:37:52,420 --> 00:37:58,190
docker run

910
00:37:54,670 --> 00:38:01,280
and do interactive with the volume of

911
00:37:58,190 --> 00:38:03,770
slash mounted to slash are on your

912
00:38:01,280 --> 00:38:06,500
container and do all porn because it's

913
00:38:03,770 --> 00:38:08,420
small and run this so this is darker

914
00:38:06,500 --> 00:38:10,850
container and notice I'm running it as

915
00:38:08,420 --> 00:38:13,220
myself right it I'm user I'm not doing

916
00:38:10,850 --> 00:38:14,810
soo do anything but then I'm kicking off

917
00:38:13,220 --> 00:38:20,020
this container and I do inside of that

918
00:38:14,810 --> 00:38:29,360
container I do crap for roots inside of

919
00:38:20,020 --> 00:38:30,710
/r remember that's where I mounted in so

920
00:38:29,360 --> 00:38:32,960
I basically got a root on my machine

921
00:38:30,710 --> 00:38:34,880
without being rude and the reason it

922
00:38:32,960 --> 00:38:37,100
works is because the Dr Dee container is

923
00:38:34,880 --> 00:38:41,330
running as root and I'm a part of the

924
00:38:37,100 --> 00:38:43,400
doctor group so that last group that

925
00:38:41,330 --> 00:38:46,250
essentially gives any container Iran

926
00:38:43,400 --> 00:38:48,050
root privileges so if you run root

927
00:38:46,250 --> 00:38:49,430
inside of you container you root on your

928
00:38:48,050 --> 00:38:52,790
host that's it

929
00:38:49,430 --> 00:38:56,690
there's no joking about it so don't just

930
00:38:52,790 --> 00:38:58,670
don't okay the other thing that people

931
00:38:56,690 --> 00:39:01,340
do and I actually did it in front of you

932
00:38:58,670 --> 00:39:04,310
guys if you haven't noticed its

933
00:39:01,340 --> 00:39:05,900
supposing the socket so socket is the

934
00:39:04,310 --> 00:39:08,900
way the doctor D communicates to

935
00:39:05,900 --> 00:39:12,140
yourself so when I showed you my little

936
00:39:08,900 --> 00:39:14,240
trick with Windows that's the socket in

937
00:39:12,140 --> 00:39:16,370
Windows case this is a TCP socket in the

938
00:39:14,240 --> 00:39:18,649
Linux case it's the actual socket so

939
00:39:16,370 --> 00:39:20,299
when I'm exposing my socket I'm exposing

940
00:39:18,650 --> 00:39:21,620
myself to that attack I just showed you

941
00:39:20,300 --> 00:39:24,230
earlier and that's not just Windows

942
00:39:21,620 --> 00:39:26,240
Linux - if I can write to the socket

943
00:39:24,230 --> 00:39:28,040
Windows doctor doesn't do any

944
00:39:26,240 --> 00:39:29,839
authentication it'll just trust it it's

945
00:39:28,040 --> 00:39:31,430
like you can you can talk to me alright

946
00:39:29,840 --> 00:39:33,860
I understand I'll run the container for

947
00:39:31,430 --> 00:39:39,020
you and if you you're running it as root

948
00:39:33,860 --> 00:39:41,650
2 so if you if you do something try not

949
00:39:39,020 --> 00:39:44,150
to do this darker sock thing exposure

950
00:39:41,650 --> 00:39:45,620
sometimes you have to do it and if you

951
00:39:44,150 --> 00:39:48,740
need to do talk to me you know how to

952
00:39:45,620 --> 00:39:52,790
work around it but yeah windows is kind

953
00:39:48,740 --> 00:39:56,209
of like that just to show you again why

954
00:39:52,790 --> 00:39:59,750
not to expose your darker socket in 2018

955
00:39:56,210 --> 00:40:02,360
the darker had had 18 back toward images

956
00:39:59,750 --> 00:40:04,940
the remaining Manero and it's a known

957
00:40:02,360 --> 00:40:08,500
thing you know docker kind of warmed up

958
00:40:04,940 --> 00:40:08,500
to it and they killed the this

