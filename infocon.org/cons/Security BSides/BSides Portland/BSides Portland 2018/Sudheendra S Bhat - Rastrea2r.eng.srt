1
00:00:15,820 --> 00:00:22,100
my name is sue teamed up hurt I'm here

2
00:00:19,190 --> 00:00:23,720
to talk about lasted or which is one of

3
00:00:22,100 --> 00:00:26,810
the projects that I've been contributing

4
00:00:23,720 --> 00:00:29,960
to for the past I would say about eight

5
00:00:26,810 --> 00:00:33,829
to ten months we recently also presented

6
00:00:29,960 --> 00:00:36,770
this project in black hat arsenal and it

7
00:00:33,829 --> 00:00:39,829
was pretty well received and I thought

8
00:00:36,770 --> 00:00:42,950
hey why not present into our local

9
00:00:39,829 --> 00:00:44,600
community so that I can also share some

10
00:00:42,950 --> 00:00:46,460
of the experiences that I had with this

11
00:00:44,600 --> 00:00:49,070
project and some of the things that I

12
00:00:46,460 --> 00:00:54,530
learned while implementing it

13
00:00:49,070 --> 00:00:58,250
I'm also the yeah my full-time job I'm a

14
00:00:54,530 --> 00:01:01,249
security architect at McAfee I'm also

15
00:00:58,250 --> 00:01:02,749
the maintainer for rusty door project we

16
00:01:01,249 --> 00:01:05,540
have a organization we have right now

17
00:01:02,749 --> 00:01:08,480
two projects one of them is the last

18
00:01:05,540 --> 00:01:12,650
adult client and second one is the last

19
00:01:08,480 --> 00:01:15,350
two door server so let me give you a

20
00:01:12,650 --> 00:01:17,690
little bit of context on the history

21
00:01:15,350 --> 00:01:21,770
this is not a new project this project

22
00:01:17,690 --> 00:01:23,179
has been basically it was started by a

23
00:01:21,770 --> 00:01:26,079
smile valenzuela

24
00:01:23,180 --> 00:01:29,119
who is the principal engineer at McAfee

25
00:01:26,079 --> 00:01:32,240
he is like he's been in the security

26
00:01:29,119 --> 00:01:36,409
industry for almost like 20 years now

27
00:01:32,240 --> 00:01:38,600
and it was his brainchild where he

28
00:01:36,409 --> 00:01:41,689
decided that okay I'm having certain

29
00:01:38,600 --> 00:01:43,880
problems on the field I'm trying to find

30
00:01:41,689 --> 00:01:46,610
some more information but the tools that

31
00:01:43,880 --> 00:01:52,658
I have are not really giving me what I

32
00:01:46,610 --> 00:01:56,960
really want so the story as he says on a

33
00:01:52,659 --> 00:01:59,840
stormy windy day in New York there was a

34
00:01:56,960 --> 00:02:03,199
snowfall and he had to work from home

35
00:01:59,840 --> 00:02:04,820
and he basically spent two days doing a

36
00:02:03,200 --> 00:02:07,939
quick and dirty prototype of this

37
00:02:04,820 --> 00:02:11,410
project where he wanted to basically

38
00:02:07,939 --> 00:02:14,630
take it to work on Monday and start

39
00:02:11,410 --> 00:02:16,250
using it to see if it really solves the

40
00:02:14,630 --> 00:02:19,519
problem so I'll get to the problem in a

41
00:02:16,250 --> 00:02:21,350
second but so with this project since

42
00:02:19,520 --> 00:02:23,750
inception it was presented in several

43
00:02:21,350 --> 00:02:25,210
conferences in 2016 it was presented at

44
00:02:23,750 --> 00:02:28,450
Arsenal and it has

45
00:02:25,210 --> 00:02:30,700
being presented or multiple conferences

46
00:02:28,450 --> 00:02:33,940
on sans smile

47
00:02:30,700 --> 00:02:37,149
he's also science instructors so he has

48
00:02:33,940 --> 00:02:39,100
also used this as a is this tool as a

49
00:02:37,150 --> 00:02:41,140
part of his curriculum in some of the

50
00:02:39,100 --> 00:02:46,900
courses which is being taught it sounds

51
00:02:41,140 --> 00:02:49,989
as well and we also so in 2008 early

52
00:02:46,900 --> 00:02:51,940
2000 I started contribute I decided to

53
00:02:49,990 --> 00:02:55,240
start contributing to this project

54
00:02:51,940 --> 00:02:57,579
mostly because one I was trying to learn

55
00:02:55,240 --> 00:03:00,310
more about the secretary ins in general

56
00:02:57,580 --> 00:03:02,740
because on my day to day job I do most

57
00:03:00,310 --> 00:03:05,350
of the defending stuff at work but I

58
00:03:02,740 --> 00:03:07,120
also wanted to build some tools that

59
00:03:05,350 --> 00:03:09,489
could also assist the security

60
00:03:07,120 --> 00:03:12,150
operations centers in general especially

61
00:03:09,490 --> 00:03:15,280
with threat hunting and like identifying

62
00:03:12,150 --> 00:03:17,410
indicators of compromises quickly and so

63
00:03:15,280 --> 00:03:21,040
on so forth so I thought this project

64
00:03:17,410 --> 00:03:22,930
was one of those projects that had good

65
00:03:21,040 --> 00:03:25,329
learning opportunities so I just started

66
00:03:22,930 --> 00:03:28,060
contributing and we added a bunch of new

67
00:03:25,330 --> 00:03:32,170
features that we presented at blackhat

68
00:03:28,060 --> 00:03:34,750
this Arsenal this 2018 so I will be

69
00:03:32,170 --> 00:03:36,579
talking I have modified that if you

70
00:03:34,750 --> 00:03:38,380
actually go look it up online you will

71
00:03:36,580 --> 00:03:41,320
find the slides presented in black hat

72
00:03:38,380 --> 00:03:44,049
as well but I have modified these slides

73
00:03:41,320 --> 00:03:45,760
a little bit to meet the needs of the

74
00:03:44,050 --> 00:03:47,800
audience I would say like black hat it

75
00:03:45,760 --> 00:03:48,880
was a very specific targeted audience so

76
00:03:47,800 --> 00:03:51,190
I'm also going to be little bit talking

77
00:03:48,880 --> 00:03:54,880
about the secretary operation centers in

78
00:03:51,190 --> 00:03:57,490
general I will also briefly discuss some

79
00:03:54,880 --> 00:04:00,850
of the newer features that we added in

80
00:03:57,490 --> 00:04:03,370
this future in this last iteration and

81
00:04:00,850 --> 00:04:08,320
the latest release and see how you can

82
00:04:03,370 --> 00:04:10,270
use that so also I wanted to mention the

83
00:04:08,320 --> 00:04:11,980
credits I give the credits is not just

84
00:04:10,270 --> 00:04:15,670
I'm not the only contributor this

85
00:04:11,980 --> 00:04:18,070
project has been in the been presented

86
00:04:15,670 --> 00:04:19,779
in the past has been pretty much

87
00:04:18,070 --> 00:04:23,159
available as open source projects for

88
00:04:19,779 --> 00:04:26,380
last couple of years but I am recently

89
00:04:23,160 --> 00:04:29,890
pretty much added a bunch of new

90
00:04:26,380 --> 00:04:32,469
features rewrote some of the modules to

91
00:04:29,890 --> 00:04:34,060
make it more adaptable and I'm also one

92
00:04:32,470 --> 00:04:37,600
of the main goals that I'm trying to

93
00:04:34,060 --> 00:04:39,820
focus on is to basically make it more

94
00:04:37,600 --> 00:04:42,100
extendible so that open-source community

95
00:04:39,820 --> 00:04:44,620
can come and contribute and use it as

96
00:04:42,100 --> 00:04:48,870
they find necessary so basically putting

97
00:04:44,620 --> 00:04:51,280
decent process around it so with that

98
00:04:48,870 --> 00:04:53,110
I'm not really gonna go much in detail

99
00:04:51,280 --> 00:04:56,260
about what security operation centers

100
00:04:53,110 --> 00:04:58,510
are and what do they do but before I

101
00:04:56,260 --> 00:05:01,870
proceed further how many of you have

102
00:04:58,510 --> 00:05:05,520
heard about sock or worked in sock okay

103
00:05:01,870 --> 00:05:09,940
that's that that makes my life easier so

104
00:05:05,520 --> 00:05:12,250
as for who I'm sorry for those who are

105
00:05:09,940 --> 00:05:14,980
not really familiar with sock I would

106
00:05:12,250 --> 00:05:18,310
like to think of sock as a methodology

107
00:05:14,980 --> 00:05:20,670
rather than big organization having a

108
00:05:18,310 --> 00:05:24,160
dedicated set of folks sitting in a

109
00:05:20,670 --> 00:05:27,010
closed room watching big monitors seeing

110
00:05:24,160 --> 00:05:29,590
different charts and basically taking

111
00:05:27,010 --> 00:05:33,640
care of the entire security issues that

112
00:05:29,590 --> 00:05:38,679
are around in and around the office and

113
00:05:33,640 --> 00:05:39,969
all the cyber related issues but along

114
00:05:38,680 --> 00:05:42,880
with that I would like to also think of

115
00:05:39,970 --> 00:05:44,650
sock as the methodology that what what

116
00:05:42,880 --> 00:05:48,460
are they intend to do because security

117
00:05:44,650 --> 00:05:51,849
operations centers can consist of like

118
00:05:48,460 --> 00:05:54,190
dealing with about 100,000 nodes to up

119
00:05:51,850 --> 00:05:56,530
to 10 to 15 nodes I come from a startup

120
00:05:54,190 --> 00:05:58,780
background where my initial part of the

121
00:05:56,530 --> 00:06:00,909
career I used to work for startup which

122
00:05:58,780 --> 00:06:03,760
had almost I would say about two to

123
00:06:00,910 --> 00:06:08,620
three developers and about five program

124
00:06:03,760 --> 00:06:11,550
managers and two sales folks so there

125
00:06:08,620 --> 00:06:14,470
the sock was myself I was the only

126
00:06:11,550 --> 00:06:17,290
entire sock I was doing the hunting I

127
00:06:14,470 --> 00:06:21,640
was also doing the troubleshooting

128
00:06:17,290 --> 00:06:23,470
Incident Response so but the

129
00:06:21,640 --> 00:06:25,360
methodologies that are currently used in

130
00:06:23,470 --> 00:06:26,950
a bigger organization versus the smaller

131
00:06:25,360 --> 00:06:29,920
organization pretty much remain the same

132
00:06:26,950 --> 00:06:32,740
so from a Sox perspective pretty much

133
00:06:29,920 --> 00:06:34,930
they do monitoring investigation some

134
00:06:32,740 --> 00:06:37,950
preventative actions that's where

135
00:06:34,930 --> 00:06:41,020
majority of the advanced investigations

136
00:06:37,950 --> 00:06:43,659
occur and finally reporting like what

137
00:06:41,020 --> 00:06:45,039
did we learn what are the possible new

138
00:06:43,660 --> 00:06:49,060
threats that we should be prepared for

139
00:06:45,040 --> 00:06:52,870
and so on so forth so along with that

140
00:06:49,060 --> 00:06:55,930
there are multiple processes that are

141
00:06:52,870 --> 00:06:58,270
also defined in a sock so again

142
00:06:55,930 --> 00:06:59,530
depending on the size of the company in

143
00:06:58,270 --> 00:07:01,690
size of the organization

144
00:06:59,530 --> 00:07:04,900
there can be tire one tile two entire

145
00:07:01,690 --> 00:07:06,790
three levels of sock analyst and they

146
00:07:04,900 --> 00:07:09,039
could be dedicated incident responding

147
00:07:06,790 --> 00:07:12,880
team and so on so forth so that's

148
00:07:09,040 --> 00:07:16,960
general notion about sock and for Intel

149
00:07:12,880 --> 00:07:20,440
folks sock is definitely not systemic so

150
00:07:16,960 --> 00:07:25,590
I used to be a part of Intel for almost

151
00:07:20,440 --> 00:07:29,100
six years I think so what what really

152
00:07:25,590 --> 00:07:31,989
what's a day like for a sock enlist so

153
00:07:29,100 --> 00:07:35,080
there will be pretty much some type of

154
00:07:31,990 --> 00:07:38,650
alerting mechanism I'm assuming in a

155
00:07:35,080 --> 00:07:42,099
decent sized organization where they'll

156
00:07:38,650 --> 00:07:43,929
be a report saying hey you we are seeing

157
00:07:42,100 --> 00:07:45,729
some type of a malicious activity on one

158
00:07:43,930 --> 00:07:48,790
of the nodes or one of the endpoints in

159
00:07:45,729 --> 00:07:50,710
your organization so now there are

160
00:07:48,790 --> 00:07:52,930
multiple questions that a sock analyst

161
00:07:50,710 --> 00:07:54,729
needs to address saying okay should i

162
00:07:52,930 --> 00:07:58,740
what should i do next

163
00:07:54,729 --> 00:08:02,349
should I is it like a ransomware is it a

164
00:07:58,740 --> 00:08:04,270
PT type of an attack or how do I proceed

165
00:08:02,350 --> 00:08:09,419
further so how do I start looking for

166
00:08:04,270 --> 00:08:15,280
iosys so in a bigger organizations

167
00:08:09,419 --> 00:08:18,039
typically there are vendor vendor

168
00:08:15,280 --> 00:08:22,330
supplied tools that give you initial

169
00:08:18,039 --> 00:08:24,880
tracking mechanism but the problem like

170
00:08:22,330 --> 00:08:28,900
Ted mentioned in the earlier talk is

171
00:08:24,880 --> 00:08:30,909
that since you are basically up sitting

172
00:08:28,900 --> 00:08:33,309
behind the Windows software but you

173
00:08:30,910 --> 00:08:36,969
really don't have much control on what

174
00:08:33,309 --> 00:08:39,579
data you could leverage to basically go

175
00:08:36,969 --> 00:08:41,200
in and try to look for iOS's by yourself

176
00:08:39,580 --> 00:08:43,330
because you have to believe whatever the

177
00:08:41,200 --> 00:08:45,850
vendor software tells you have to

178
00:08:43,330 --> 00:08:48,730
believe that it is true and maybe they

179
00:08:45,850 --> 00:08:50,680
are not covering all the aspects so one

180
00:08:48,730 --> 00:08:52,839
of the main reasons for this project was

181
00:08:50,680 --> 00:08:57,040
also to be more control to the SARC

182
00:08:52,839 --> 00:08:59,440
analyst or the hunters as we say to do

183
00:08:57,040 --> 00:09:01,449
thrashing quickly like how do you I mean

184
00:08:59,440 --> 00:09:02,980
not just I mean depending on the company

185
00:09:01,450 --> 00:09:04,870
you may have

186
00:09:02,980 --> 00:09:07,720
vendor software that you have already

187
00:09:04,870 --> 00:09:10,720
purchased but if you don't how do you go

188
00:09:07,720 --> 00:09:13,209
about looking for iosys and what tools

189
00:09:10,720 --> 00:09:14,649
are I mean typically you have you could

190
00:09:13,209 --> 00:09:16,569
like I say if it is a Windows host

191
00:09:14,649 --> 00:09:19,690
machine which is malicious you would

192
00:09:16,570 --> 00:09:21,940
start running some system instances

193
00:09:19,690 --> 00:09:24,279
internal tools or you would write some

194
00:09:21,940 --> 00:09:27,010
you start looking for specific aspects

195
00:09:24,279 --> 00:09:29,170
like prefetch or startup processes to

196
00:09:27,010 --> 00:09:33,189
identify if there is anything malicious

197
00:09:29,170 --> 00:09:36,510
going on but very currently there are no

198
00:09:33,190 --> 00:09:39,459
comprehensive tool which is available

199
00:09:36,510 --> 00:09:41,410
for one to the the for the hunter to go

200
00:09:39,459 --> 00:09:43,449
ahead and start looking into different

201
00:09:41,410 --> 00:09:49,269
aspects of a host to identifying

202
00:09:43,449 --> 00:09:54,029
specific iosys so that's where we yeah

203
00:09:49,269 --> 00:09:56,889
so people like especially on the smaller

204
00:09:54,029 --> 00:09:59,410
organization do majority of these kind

205
00:09:56,889 --> 00:10:01,600
of tasks manually why first of all they

206
00:09:59,410 --> 00:10:05,139
are not really the these went to

207
00:10:01,600 --> 00:10:08,050
software's are not cheap right so so

208
00:10:05,139 --> 00:10:09,579
what what's like a typical day like so

209
00:10:08,050 --> 00:10:11,410
you will get an alert notification

210
00:10:09,579 --> 00:10:12,939
saying hey you have a suspicious

211
00:10:11,410 --> 00:10:16,209
activity going on on one of your

212
00:10:12,940 --> 00:10:18,760
instances so how do you go ahead and

213
00:10:16,209 --> 00:10:22,630
respond so you have multiple choices

214
00:10:18,760 --> 00:10:25,990
right so first you could maybe go ahead

215
00:10:22,630 --> 00:10:29,860
and cremate the Box it might work for

216
00:10:25,990 --> 00:10:31,029
some time but in the long run maybe not

217
00:10:29,860 --> 00:10:34,630
a good idea right it's like playing

218
00:10:31,029 --> 00:10:38,139
whack-a-mole so so what are the other

219
00:10:34,630 --> 00:10:40,480
alternatives so that's where you start

220
00:10:38,139 --> 00:10:44,740
hunting or you start doing the smart

221
00:10:40,480 --> 00:10:46,870
incident response process so it's like

222
00:10:44,740 --> 00:10:49,720
if you think of it in the bigger sense

223
00:10:46,870 --> 00:10:51,880
you basically get an alert you start

224
00:10:49,720 --> 00:10:54,490
looking for indicators of compromises or

225
00:10:51,880 --> 00:10:57,639
i/o sees then start thrashing that

226
00:10:54,490 --> 00:10:59,649
specific host to see what else you can

227
00:10:57,639 --> 00:11:01,870
find out to see if you can even root

228
00:10:59,649 --> 00:11:04,209
cause it at all if not time is of

229
00:11:01,870 --> 00:11:06,069
essence right you have to basically

230
00:11:04,209 --> 00:11:08,619
can't I like contain that particular

231
00:11:06,069 --> 00:11:10,510
issue so that you don't spread the blast

232
00:11:08,620 --> 00:11:13,209
zone for that particular issue is

233
00:11:10,510 --> 00:11:15,670
reduced so you have to act on it very

234
00:11:13,209 --> 00:11:17,859
very quickly then once you do

235
00:11:15,670 --> 00:11:20,620
then you start running these advanced

236
00:11:17,860 --> 00:11:22,540
forensic analysis on that particular

237
00:11:20,620 --> 00:11:24,610
host machine to identify what is the

238
00:11:22,540 --> 00:11:27,430
root cause how do you eradicate the

239
00:11:24,610 --> 00:11:32,590
whole issue from your organization as a

240
00:11:27,430 --> 00:11:34,030
whole and so on so forth so this is a

241
00:11:32,590 --> 00:11:35,860
general methodology that I just wanted

242
00:11:34,030 --> 00:11:40,420
to list it here so that we understand

243
00:11:35,860 --> 00:11:43,060
what also - one thing I missed to tell

244
00:11:40,420 --> 00:11:46,569
here is that if you notice here at each

245
00:11:43,060 --> 00:11:49,719
stage of the whole incident response

246
00:11:46,570 --> 00:11:52,810
process you may require to do some type

247
00:11:49,720 --> 00:11:55,600
of hunting but maybe I you start looking

248
00:11:52,810 --> 00:11:58,119
for IOC and you have to use certain

249
00:11:55,600 --> 00:12:00,490
tools to identify if there is any type

250
00:11:58,120 --> 00:12:03,310
of malicious activity or any type of

251
00:12:00,490 --> 00:12:06,070
logs that you can find that can lead you

252
00:12:03,310 --> 00:12:08,500
to a specific IOC or you would like

253
00:12:06,070 --> 00:12:10,240
let's say you have identified the IOC s

254
00:12:08,500 --> 00:12:12,190
then at the next stage you wanna

255
00:12:10,240 --> 00:12:14,890
identify what is your blast zone what is

256
00:12:12,190 --> 00:12:16,650
the scope altogether so for that again

257
00:12:14,890 --> 00:12:21,250
you might require some more tools to

258
00:12:16,650 --> 00:12:23,260
identify how many issue how many host

259
00:12:21,250 --> 00:12:25,600
systems are affected in my organization

260
00:12:23,260 --> 00:12:27,460
and so on so forth so the point I want

261
00:12:25,600 --> 00:12:31,150
to tell here is that like at each stage

262
00:12:27,460 --> 00:12:35,430
of hunting or incident response you will

263
00:12:31,150 --> 00:12:35,430
end up using multiple different tools so

264
00:12:37,770 --> 00:12:42,699
as a next step so how do you go ahead

265
00:12:40,690 --> 00:12:44,560
and do all this you could perform all

266
00:12:42,700 --> 00:12:47,410
these operations manually by running

267
00:12:44,560 --> 00:12:50,949
different tools from different vendors

268
00:12:47,410 --> 00:12:52,780
or you could consolidate all the related

269
00:12:50,950 --> 00:12:56,410
tools that are required for threat

270
00:12:52,780 --> 00:12:58,990
hunting and use that as a centralized

271
00:12:56,410 --> 00:13:01,780
tool to perform the threat handling

272
00:12:58,990 --> 00:13:04,870
process altogether including looking for

273
00:13:01,780 --> 00:13:08,680
IOC s so that's where the genesis of a

274
00:13:04,870 --> 00:13:11,980
secure project came and it is just to

275
00:13:08,680 --> 00:13:14,709
give some background on the name

276
00:13:11,980 --> 00:13:17,290
roster door really means hunter in

277
00:13:14,710 --> 00:13:21,040
Spanish like I mentioned the primary

278
00:13:17,290 --> 00:13:24,780
author or the pioneer of this project

279
00:13:21,040 --> 00:13:28,890
smile is a Spaniard so hence the name

280
00:13:24,780 --> 00:13:34,839
roster door so it is a command-line tool

281
00:13:28,890 --> 00:13:36,790
why yeah because it's sexy sure why not

282
00:13:34,840 --> 00:13:41,650
so I got this light from my black head

283
00:13:36,790 --> 00:13:44,349
so I yeah anyways it is cross-platform

284
00:13:41,650 --> 00:13:46,990
what it really means is that you could

285
00:13:44,350 --> 00:13:49,150
potentially run this currently we have

286
00:13:46,990 --> 00:13:51,580
three separate versions of executables

287
00:13:49,150 --> 00:13:54,010
but we are trying to unify that in the

288
00:13:51,580 --> 00:13:56,260
future but we are trying to support all

289
00:13:54,010 --> 00:13:58,180
these functionalities from this command

290
00:13:56,260 --> 00:14:00,730
line tool to be executed on each of the

291
00:13:58,180 --> 00:14:05,949
individual platforms like Windows UNIX

292
00:14:00,730 --> 00:14:08,410
and Mac OS it also has a restful

293
00:14:05,950 --> 00:14:10,870
back-end server where you could store

294
00:14:08,410 --> 00:14:12,189
all your results from your different

295
00:14:10,870 --> 00:14:18,060
scans that we'll talk about in the

296
00:14:12,190 --> 00:14:22,180
future in the upcoming slides and it can

297
00:14:18,060 --> 00:14:24,339
potentially run any given command as

298
00:14:22,180 --> 00:14:26,290
specified by the hunter so why did we

299
00:14:24,340 --> 00:14:31,030
basically think of this design pattern

300
00:14:26,290 --> 00:14:33,010
so we wanted to enable the hunter to

301
00:14:31,030 --> 00:14:35,230
pick and choose his tools or write his

302
00:14:33,010 --> 00:14:36,730
own tool like the there's a saying right

303
00:14:35,230 --> 00:14:38,650
the best security tool is the one that

304
00:14:36,730 --> 00:14:42,460
you write to solve your specific problem

305
00:14:38,650 --> 00:14:44,829
so for example forensic artifact

306
00:14:42,460 --> 00:14:47,950
collection if if you are specifically

307
00:14:44,830 --> 00:14:50,470
interested in getting only data that are

308
00:14:47,950 --> 00:14:51,910
generated by netstat so you should be

309
00:14:50,470 --> 00:14:55,800
able to do that rather than depending on

310
00:14:51,910 --> 00:14:58,209
other tools so we I'll show those

311
00:14:55,800 --> 00:15:00,400
specific details in the upcoming slide

312
00:14:58,210 --> 00:15:02,680
but we wanted to provide a generic

313
00:15:00,400 --> 00:15:04,569
framework that is extendable as well so

314
00:15:02,680 --> 00:15:07,689
that people can come and write and

315
00:15:04,570 --> 00:15:09,820
extend it according to their needs along

316
00:15:07,690 --> 00:15:11,140
with we have also exposed some of the

317
00:15:09,820 --> 00:15:13,000
standard functionalities which are

318
00:15:11,140 --> 00:15:16,750
pretty useful on a day to day basis for

319
00:15:13,000 --> 00:15:18,640
any given hunter to identify the IOC s

320
00:15:16,750 --> 00:15:23,230
as well as to perform little bird little

321
00:15:18,640 --> 00:15:28,990
more advanced investigations so it is

322
00:15:23,230 --> 00:15:33,880
built in completely on Python and also

323
00:15:28,990 --> 00:15:37,329
the expectation here is that it is to be

324
00:15:33,880 --> 00:15:40,269
used on by an organization

325
00:15:37,329 --> 00:15:45,219
such that it can be executed using a

326
00:15:40,269 --> 00:15:47,110
centralized AV console or yes ECM like a

327
00:15:45,220 --> 00:15:49,360
central management repository through

328
00:15:47,110 --> 00:15:51,009
which you should be able to deploy this

329
00:15:49,360 --> 00:15:52,989
particular process and execute it on

330
00:15:51,009 --> 00:15:55,149
endpoint and collect all the related

331
00:15:52,989 --> 00:15:59,339
data that you need for IOC

332
00:15:55,149 --> 00:16:02,709
investigations why is this important

333
00:15:59,339 --> 00:16:03,549
imagine deploying your own new agent on

334
00:16:02,709 --> 00:16:06,579
an endpoint

335
00:16:03,549 --> 00:16:08,309
it requires I'm not really sure whether

336
00:16:06,579 --> 00:16:11,410
you're familiar it takes a lot of

337
00:16:08,309 --> 00:16:12,759
approval process and security evaluation

338
00:16:11,410 --> 00:16:14,799
to be considered before you start

339
00:16:12,759 --> 00:16:16,389
deploying something onto the endpoint so

340
00:16:14,799 --> 00:16:18,790
we wanted to get out of that model and

341
00:16:16,389 --> 00:16:20,879
use the existing infrastructure to see

342
00:16:18,790 --> 00:16:25,118
if we could potentially deploy this

343
00:16:20,879 --> 00:16:27,309
executable on to the endpoint and execs

344
00:16:25,119 --> 00:16:29,949
acute it and collect the responses from

345
00:16:27,309 --> 00:16:31,689
that particular process to get whatever

346
00:16:29,949 --> 00:16:38,498
in from specific information that you're

347
00:16:31,689 --> 00:16:41,980
looking for okay so okay so yeah it is

348
00:16:38,499 --> 00:16:43,689
the open source project you can see it

349
00:16:41,980 --> 00:16:47,980
under the rest of the organization in

350
00:16:43,689 --> 00:16:49,209
github and in terms of functionalities

351
00:16:47,980 --> 00:16:51,819
what are the current functionalities

352
00:16:49,209 --> 00:16:55,449
that are supported we did release the v1

353
00:16:51,819 --> 00:16:58,389
trees for the blackhat Arsenal this year

354
00:16:55,449 --> 00:17:01,299
so we have fine-tuned some of the

355
00:16:58,389 --> 00:17:03,669
operations but in a nutshell the current

356
00:17:01,299 --> 00:17:07,359
functionalities that we support are fast

357
00:17:03,669 --> 00:17:09,250
Trajan so what does that mean so faster

358
00:17:07,359 --> 00:17:11,168
engine is a mechanism where you could

359
00:17:09,250 --> 00:17:15,159
potentially go ahead and run any type of

360
00:17:11,169 --> 00:17:17,579
commands on the endpoint and collect

361
00:17:15,159 --> 00:17:19,389
necessary information based on the

362
00:17:17,579 --> 00:17:22,559
command execution that you have

363
00:17:19,388 --> 00:17:25,148
performed why is this important so

364
00:17:22,559 --> 00:17:30,549
typically whenever you're trying to

365
00:17:25,148 --> 00:17:32,649
identify more IOC s or any more specific

366
00:17:30,549 --> 00:17:34,179
information about a given host you would

367
00:17:32,649 --> 00:17:36,820
be interested in let's say auto run

368
00:17:34,179 --> 00:17:39,070
process or the net stat information or

369
00:17:36,820 --> 00:17:41,529
the web history information and so on so

370
00:17:39,070 --> 00:17:45,510
forth so faster edging is a mechanism

371
00:17:41,529 --> 00:17:49,570
where we basically expose multiple

372
00:17:45,510 --> 00:17:50,360
commands that are already defined for

373
00:17:49,570 --> 00:17:52,428
you

374
00:17:50,360 --> 00:17:54,530
you could also basically write your own

375
00:17:52,429 --> 00:17:57,020
customized script that you could

376
00:17:54,530 --> 00:17:58,610
potentially run it so that you can

377
00:17:57,020 --> 00:18:00,200
basically go ahead and execute that

378
00:17:58,610 --> 00:18:02,030
faster edging on the endpoint and

379
00:18:00,200 --> 00:18:05,690
collect that specific information for

380
00:18:02,030 --> 00:18:07,700
further thrashing and prefetch is the

381
00:18:05,690 --> 00:18:10,429
other functionality where we basically

382
00:18:07,700 --> 00:18:12,140
the command these are all basically

383
00:18:10,429 --> 00:18:15,230
boils down to the commands that are used

384
00:18:12,140 --> 00:18:17,650
along with the raster door client so

385
00:18:15,230 --> 00:18:21,500
prefetch basically goes and fetches the

386
00:18:17,650 --> 00:18:22,580
prefetch files on Windows and that's the

387
00:18:21,500 --> 00:18:25,340
functionality that's currently only

388
00:18:22,580 --> 00:18:28,809
supported for Windows so why prefetch is

389
00:18:25,340 --> 00:18:31,720
important so as we all know that they

390
00:18:28,809 --> 00:18:35,809
when window I think it was introduced in

391
00:18:31,720 --> 00:18:38,270
Windows XP where every process when it

392
00:18:35,809 --> 00:18:41,389
starts executing if it is having any

393
00:18:38,270 --> 00:18:43,129
type of cache cache hit miss then they

394
00:18:41,390 --> 00:18:45,890
basically write that file onto the

395
00:18:43,130 --> 00:18:47,919
prefetch folder so that they can use it

396
00:18:45,890 --> 00:18:51,530
for improving the performance of that

397
00:18:47,919 --> 00:18:53,390
process later which is good from a

398
00:18:51,530 --> 00:18:55,160
security point of view why because we

399
00:18:53,390 --> 00:18:57,980
could potentially grab the prefetch

400
00:18:55,160 --> 00:19:01,309
folder as is and see what process ran

401
00:18:57,980 --> 00:19:03,559
before or some more information about

402
00:19:01,309 --> 00:19:07,129
that specific process right

403
00:19:03,559 --> 00:19:08,870
forensic artifact collection so this was

404
00:19:07,130 --> 00:19:12,770
one of the recent features that we

405
00:19:08,870 --> 00:19:16,909
introduced where we basically go ahead

406
00:19:12,770 --> 00:19:20,059
and use the CY LR how many of you have

407
00:19:16,910 --> 00:19:23,510
you heard of that so I'll go in detail

408
00:19:20,059 --> 00:19:26,030
about that as well which is a process

409
00:19:23,510 --> 00:19:28,570
it's open source project as well where

410
00:19:26,030 --> 00:19:30,710
basically goes and gets the entire

411
00:19:28,570 --> 00:19:34,520
system configuration as well as the user

412
00:19:30,710 --> 00:19:36,650
details from the given host the

413
00:19:34,520 --> 00:19:40,370
interesting part about that particular

414
00:19:36,650 --> 00:19:43,610
tool is that it does not use any of the

415
00:19:40,370 --> 00:19:45,979
windows ApS to perform the data

416
00:19:43,610 --> 00:19:48,639
gathering which is good because we are

417
00:19:45,980 --> 00:19:51,470
not really contaminating the end and

418
00:19:48,640 --> 00:19:54,140
endpoint with unnecessary logs that are

419
00:19:51,470 --> 00:19:57,559
generated and also the forensic artifact

420
00:19:54,140 --> 00:20:00,590
collection is entirely done in memory so

421
00:19:57,559 --> 00:20:02,178
there is no not really artifacts that

422
00:20:00,590 --> 00:20:03,250
are left behind after the process is

423
00:20:02,179 --> 00:20:06,039
executed

424
00:20:03,250 --> 00:20:09,690
so web fish web history is as it

425
00:20:06,039 --> 00:20:13,658
suggests it basically gives you the

426
00:20:09,690 --> 00:20:15,970
history of all the operations that were

427
00:20:13,659 --> 00:20:20,169
performed using the browsers and also

428
00:20:15,970 --> 00:20:22,840
gives you information about all the from

429
00:20:20,169 --> 00:20:24,610
not only one type of browsers but it

430
00:20:22,840 --> 00:20:26,530
basically collects information across

431
00:20:24,610 --> 00:20:29,949
multiple browsers across multiple for

432
00:20:26,530 --> 00:20:32,320
multiple users as well so Yarra disk and

433
00:20:29,950 --> 00:20:36,190
yaar mmm are the scans that are

434
00:20:32,320 --> 00:20:38,980
performed using Yarra how many of have

435
00:20:36,190 --> 00:20:43,900
you heard of Yarra great

436
00:20:38,980 --> 00:20:46,360
okay so Yarra is think of it as a

437
00:20:43,900 --> 00:20:48,159
general pattern matching to it is also

438
00:20:46,360 --> 00:20:50,740
called the Swiss are meaning of knife

439
00:20:48,159 --> 00:20:53,500
for pattern matches it's especially used

440
00:20:50,740 --> 00:20:55,809
for malware used by the malware

441
00:20:53,500 --> 00:20:58,480
researchers to identify specific malware

442
00:20:55,809 --> 00:21:03,039
in a given system we go or in detail

443
00:20:58,480 --> 00:21:05,679
about that so deploying glasses there on

444
00:21:03,039 --> 00:21:07,900
endpoints so like I mentioned the idea

445
00:21:05,679 --> 00:21:09,370
here is that we wanted to design raster

446
00:21:07,900 --> 00:21:12,820
though such that the client can be

447
00:21:09,370 --> 00:21:14,469
easily deployed onto the endpoint and

448
00:21:12,820 --> 00:21:17,500
executed to collect the necessary

449
00:21:14,470 --> 00:21:21,360
forensic art artifacts so that we can

450
00:21:17,500 --> 00:21:24,789
quickly identify and look for iosys so

451
00:21:21,360 --> 00:21:28,059
in this case as I show in the diagram

452
00:21:24,789 --> 00:21:31,750
here the if you see the arrow mark we

453
00:21:28,059 --> 00:21:36,789
are currently luxacore could be deployed

454
00:21:31,750 --> 00:21:39,610
on any AV console or EPO EPO is a McAfee

455
00:21:36,789 --> 00:21:43,330
product again it's not necessarily has

456
00:21:39,610 --> 00:21:45,280
to be EPO but any centralized console

457
00:21:43,330 --> 00:21:47,230
that can potentially talk to each of

458
00:21:45,280 --> 00:21:51,760
your endpoint you should be able to

459
00:21:47,230 --> 00:21:54,190
execute this so from there it will be

460
00:21:51,760 --> 00:21:57,090
deployed on to the endpoints and all the

461
00:21:54,190 --> 00:21:59,530
necessary commands that are executed

462
00:21:57,090 --> 00:22:01,510
will be executed on the endpoint and the

463
00:21:59,530 --> 00:22:02,260
data will be collected and sent back as

464
00:22:01,510 --> 00:22:05,289
needed

465
00:22:02,260 --> 00:22:06,879
so I basically show two folders here one

466
00:22:05,289 --> 00:22:09,129
is the the tools and the other one is

467
00:22:06,880 --> 00:22:13,929
the data so one of the pre requirements

468
00:22:09,130 --> 00:22:15,760
for running rosters or is we expect you

469
00:22:13,929 --> 00:22:16,550
to have infrastructure set up such that

470
00:22:15,760 --> 00:22:18,950
you have

471
00:22:16,550 --> 00:22:21,740
a tools and data directory set up on an

472
00:22:18,950 --> 00:22:23,300
SMB if you are running this on a bigger

473
00:22:21,740 --> 00:22:25,700
organization but if you are a small

474
00:22:23,300 --> 00:22:28,190
organization or if you're just a solo

475
00:22:25,700 --> 00:22:30,050
soldier then you could potentially run

476
00:22:28,190 --> 00:22:33,130
everything locally as well so there's no

477
00:22:30,050 --> 00:22:35,720
really hard and fast requirement on SMB

478
00:22:33,130 --> 00:22:37,550
but this is important because in the

479
00:22:35,720 --> 00:22:40,040
tools folder is where you would

480
00:22:37,550 --> 00:22:43,040
basically place all your sysinternals

481
00:22:40,040 --> 00:22:45,350
files or we have a list of processes

482
00:22:43,040 --> 00:22:47,780
that we currently support which are

483
00:22:45,350 --> 00:22:53,120
internally used for performing certain

484
00:22:47,780 --> 00:22:55,700
data art artifact collection so and why

485
00:22:53,120 --> 00:22:58,669
we don't distribute that because this

486
00:22:55,700 --> 00:23:00,290
internal tools is currently the licensed

487
00:22:58,670 --> 00:23:01,730
by Microsoft and we don't want to

488
00:23:00,290 --> 00:23:04,310
maintain that thing our guitar

489
00:23:01,730 --> 00:23:06,260
repository right but however just to

490
00:23:04,310 --> 00:23:09,169
note on that note that we are trying to

491
00:23:06,260 --> 00:23:11,480
implement a new command called Russ's or

492
00:23:09,170 --> 00:23:16,220
in it let's say which will allow you to

493
00:23:11,480 --> 00:23:19,340
go ahead and set up this all these tools

494
00:23:16,220 --> 00:23:21,500
and data directory at runtime where all

495
00:23:19,340 --> 00:23:24,370
the tools automatically will be

496
00:23:21,500 --> 00:23:26,090
downloaded from the target sites to

497
00:23:24,370 --> 00:23:30,739
provide you with the necessary

498
00:23:26,090 --> 00:23:33,050
capabilities ok so like I was mentioning

499
00:23:30,740 --> 00:23:35,180
raster door is the command-line tool if

500
00:23:33,050 --> 00:23:38,570
you basically run it we have already

501
00:23:35,180 --> 00:23:41,210
compiled the exe and it's available in

502
00:23:38,570 --> 00:23:43,760
our git repository and if you don't

503
00:23:41,210 --> 00:23:45,800
trust our executable which you shouldn't

504
00:23:43,760 --> 00:23:47,450
you should be able to go ahead and use

505
00:23:45,800 --> 00:23:50,930
the spec files that we have provided and

506
00:23:47,450 --> 00:23:54,560
use the pines pines taller to generate

507
00:23:50,930 --> 00:23:57,950
the exe for yourself as well so with

508
00:23:54,560 --> 00:23:59,750
respect to execution currently like I

509
00:23:57,950 --> 00:24:03,590
mentioned we support yara days chiara

510
00:23:59,750 --> 00:24:05,000
mam memory dump triage web history I

511
00:24:03,590 --> 00:24:09,320
think one of them is missing

512
00:24:05,000 --> 00:24:11,920
which is the collect nothing fancy there

513
00:24:09,320 --> 00:24:18,080
so in terms of fallen seek artifact

514
00:24:11,920 --> 00:24:20,870
acquisition so this is like I mentioned

515
00:24:18,080 --> 00:24:22,850
earlier this is a wrapper 4-cyl R which

516
00:24:20,870 --> 00:24:27,409
is the open source tool as well which

517
00:24:22,850 --> 00:24:28,370
helps you to perform quick response

518
00:24:27,410 --> 00:24:30,320
collection

519
00:24:28,370 --> 00:24:33,290
this is like when I say it's really fast

520
00:24:30,320 --> 00:24:35,060
it is really really fast compared to how

521
00:24:33,290 --> 00:24:37,340
would typically go ahead and gather the

522
00:24:35,060 --> 00:24:38,899
information from the endpoint why

523
00:24:37,340 --> 00:24:41,929
because the entire operation is

524
00:24:38,900 --> 00:24:44,930
performed in memory there is no file

525
00:24:41,930 --> 00:24:51,230
operations involved there plus it is

526
00:24:44,930 --> 00:24:54,020
also written like specifically optimized

527
00:24:51,230 --> 00:24:56,000
to execute certain specific commands

528
00:24:54,020 --> 00:24:59,660
internally to go ahead and get the

529
00:24:56,000 --> 00:25:02,780
artifacts from the host machine so the

530
00:24:59,660 --> 00:25:05,690
other thing to note here is that this

531
00:25:02,780 --> 00:25:08,510
the cyl our tool basically generates the

532
00:25:05,690 --> 00:25:11,360
artifact that can be potentially used

533
00:25:08,510 --> 00:25:13,310
with some third party and when i say

534
00:25:11,360 --> 00:25:15,949
third party is some other open source

535
00:25:13,310 --> 00:25:18,200
projects like time sketch i think it's a

536
00:25:15,950 --> 00:25:20,570
project from google where you could use

537
00:25:18,200 --> 00:25:22,400
to collaborate on threat hunting and

538
00:25:20,570 --> 00:25:24,020
identifying some of the IOC s as well it

539
00:25:22,400 --> 00:25:25,910
writes a nice UI where you could

540
00:25:24,020 --> 00:25:28,550
basically collect all these artifacts

541
00:25:25,910 --> 00:25:31,190
and timeline them which is pretty useful

542
00:25:28,550 --> 00:25:33,909
especially if you're multiple analysts

543
00:25:31,190 --> 00:25:37,580
are working on that specific problem

544
00:25:33,910 --> 00:25:39,410
okay so in the bottom you can notice the

545
00:25:37,580 --> 00:25:43,669
command that are used to execute this

546
00:25:39,410 --> 00:25:45,290
specific collect functionality the path

547
00:25:43,670 --> 00:25:48,490
will be basically expected to provide

548
00:25:45,290 --> 00:25:50,750
the parameters for to server as well as

549
00:25:48,490 --> 00:25:53,810
data server I will show you an example

550
00:25:50,750 --> 00:25:58,280
towards the end on how to execute these

551
00:25:53,810 --> 00:26:00,320
commands and the next functionality we

552
00:25:58,280 --> 00:26:02,720
are exposing currently is thrashing like

553
00:26:00,320 --> 00:26:05,450
I briefly mentioned earlier try a gene

554
00:26:02,720 --> 00:26:08,900
where is the mechanism where you execute

555
00:26:05,450 --> 00:26:10,730
specific set of commands currently for

556
00:26:08,900 --> 00:26:12,110
example we support sis internal tools

557
00:26:10,730 --> 00:26:18,440
you could also write your own custom

558
00:26:12,110 --> 00:26:20,659
command and here basically you would you

559
00:26:18,440 --> 00:26:23,270
are expected to have that specific tool

560
00:26:20,660 --> 00:26:25,010
on the tools folder so that you could

561
00:26:23,270 --> 00:26:27,530
basically go ahead and execute on the

562
00:26:25,010 --> 00:26:29,540
endpoint and while executing it rusted

563
00:26:27,530 --> 00:26:31,970
or internally knows how to basically

564
00:26:29,540 --> 00:26:34,159
perform the use that specific tool

565
00:26:31,970 --> 00:26:35,840
located in your tools directory to

566
00:26:34,160 --> 00:26:38,780
execute on to the endpoint and collect

567
00:26:35,840 --> 00:26:39,889
the responses and give it back to you in

568
00:26:38,780 --> 00:26:44,210
a

569
00:26:39,890 --> 00:26:45,980
readable form manner right so like I

570
00:26:44,210 --> 00:26:47,809
mentioned earlier we currently support

571
00:26:45,980 --> 00:26:50,899
only assembly shares but there are plans

572
00:26:47,809 --> 00:26:54,289
on extending that to support local file

573
00:26:50,899 --> 00:26:57,918
share systems as well as s3 or cloud

574
00:26:54,289 --> 00:27:00,740
native support as well in the future so

575
00:26:57,919 --> 00:27:02,750
what would a triaging look like so like

576
00:27:00,740 --> 00:27:06,890
I mentioned currently we support the

577
00:27:02,750 --> 00:27:10,070
basic internal tools and if you see it

578
00:27:06,890 --> 00:27:11,840
basically generates for each command

579
00:27:10,070 --> 00:27:14,658
that is executed on the end point it

580
00:27:11,840 --> 00:27:18,439
will generate artifacts in a CSV format

581
00:27:14,659 --> 00:27:21,590
that will have not just CSV sorry in a

582
00:27:18,440 --> 00:27:23,870
text format that will have all the

583
00:27:21,590 --> 00:27:27,620
specific information on the infected

584
00:27:23,870 --> 00:27:29,809
host about the info infected host and it

585
00:27:27,620 --> 00:27:33,969
basically can be used by the sub hunter

586
00:27:29,809 --> 00:27:40,010
to further analysis and look for IOC s

587
00:27:33,970 --> 00:27:42,049
so yeah so one more example where we

588
00:27:40,010 --> 00:27:44,419
also run the startup list process

589
00:27:42,049 --> 00:27:47,059
internally that kind of gives you what

590
00:27:44,419 --> 00:27:49,370
are the processes that are running like

591
00:27:47,059 --> 00:27:51,710
auto run processes which are running as

592
00:27:49,370 --> 00:27:57,320
a part of your startup of your operating

593
00:27:51,710 --> 00:27:59,929
system right so in this slide we

594
00:27:57,320 --> 00:28:03,439
basically see that like this is a net

595
00:27:59,929 --> 00:28:05,450
stat information yeah so here we

596
00:28:03,440 --> 00:28:07,669
basically I'm just trying to point out

597
00:28:05,450 --> 00:28:13,730
the fact saying that if there is a you

598
00:28:07,669 --> 00:28:15,019
see all the specific information about

599
00:28:13,730 --> 00:28:16,669
what ports are open

600
00:28:15,019 --> 00:28:19,429
is there anything malicious that is

601
00:28:16,669 --> 00:28:22,850
going on using the net stat logs right

602
00:28:19,429 --> 00:28:24,649
so the next command is the prefetch

603
00:28:22,850 --> 00:28:28,760
command which is like I mentioned it's

604
00:28:24,649 --> 00:28:30,289
very window specific feature which

605
00:28:28,760 --> 00:28:31,908
basically goes and collects all the

606
00:28:30,289 --> 00:28:34,990
information related to your prefetch

607
00:28:31,909 --> 00:28:38,380
files under the prefetch folder also to

608
00:28:34,990 --> 00:28:40,490
note one thing here that trusted or

609
00:28:38,380 --> 00:28:42,590
command to be executed in the

610
00:28:40,490 --> 00:28:47,450
administrator mode right like because

611
00:28:42,590 --> 00:28:48,770
lot of these folders require you to have

612
00:28:47,450 --> 00:28:50,389
that many privileges before you start

613
00:28:48,770 --> 00:28:52,908
accessing it so if you want it to work

614
00:28:50,389 --> 00:28:56,299
correctly and get you all the related

615
00:28:52,909 --> 00:29:00,440
information on the host you better than

616
00:28:56,299 --> 00:29:02,989
it has admin we don't mean privileges so

617
00:29:00,440 --> 00:29:06,049
the next one is web history we spoke

618
00:29:02,989 --> 00:29:08,869
about that for a bit which basically

619
00:29:06,049 --> 00:29:12,139
gives you information from different

620
00:29:08,869 --> 00:29:15,369
browser statistics as for any given

621
00:29:12,139 --> 00:29:17,719
system user on that particular host and

622
00:29:15,369 --> 00:29:24,228
currently we support ie Chrome and

623
00:29:17,720 --> 00:29:27,409
Firefox browsers full memory damn so

624
00:29:24,229 --> 00:29:31,009
this is one of the other nifty features

625
00:29:27,409 --> 00:29:33,950
I would say which basically uses

626
00:29:31,009 --> 00:29:37,309
internally the wind PMM - written by

627
00:29:33,950 --> 00:29:39,710
michael Kohan which captures the not

628
00:29:37,309 --> 00:29:41,450
only the entire memory dump but it also

629
00:29:39,710 --> 00:29:43,249
allows you to capture the crash dumps

630
00:29:41,450 --> 00:29:46,460
which can be pretty handy when you're

631
00:29:43,249 --> 00:29:48,889
basically looking for i/o sees that as

632
00:29:46,460 --> 00:29:51,859
some of the threats could potentially

633
00:29:48,889 --> 00:29:55,059
crash your existing processes and you

634
00:29:51,859 --> 00:30:00,019
could potentially use that as a

635
00:29:55,059 --> 00:30:01,399
indicative of attack right so the memory

636
00:30:00,019 --> 00:30:04,039
dump basically generates you an eye

637
00:30:01,399 --> 00:30:06,439
image and that image could also be

638
00:30:04,039 --> 00:30:09,679
further used with some other third-party

639
00:30:06,440 --> 00:30:12,200
library third party tools like the red

640
00:30:09,679 --> 00:30:14,179
line from mandiant or volatility which

641
00:30:12,200 --> 00:30:18,909
is a pretty famous one for memory

642
00:30:14,179 --> 00:30:21,769
forensic analysis so the next feature

643
00:30:18,909 --> 00:30:25,249
yeah before we talk about the yarra mam

644
00:30:21,769 --> 00:30:27,200
and Yarra disk I think it can it is

645
00:30:25,249 --> 00:30:29,749
important to understand two things how

646
00:30:27,200 --> 00:30:32,539
does the roster the server work and what

647
00:30:29,749 --> 00:30:34,460
is the intention behind it right so the

648
00:30:32,539 --> 00:30:36,830
rush to the server was initially written

649
00:30:34,460 --> 00:30:38,720
as a simple Python server in an

650
00:30:36,830 --> 00:30:40,759
organization when we collected the

651
00:30:38,720 --> 00:30:42,710
artifacts great like yeah we have enough

652
00:30:40,759 --> 00:30:44,899
data now but what do we do with that I

653
00:30:42,710 --> 00:30:46,789
mean we could potentially manually open

654
00:30:44,899 --> 00:30:49,279
each of these log files and see what is

655
00:30:46,789 --> 00:30:52,340
happening but we were kind of looking

656
00:30:49,279 --> 00:30:55,249
one of the ideas was to basically see if

657
00:30:52,340 --> 00:30:56,899
we could automate the hunting process so

658
00:30:55,249 --> 00:30:58,429
if you want to automate how do i how

659
00:30:56,899 --> 00:30:59,809
would we go ahead and do that so we

660
00:30:58,429 --> 00:31:03,019
wanted to basically start leveraging

661
00:30:59,809 --> 00:31:05,990
some of the work that has been done on

662
00:31:03,019 --> 00:31:08,540
Yarra to see if we could scan using

663
00:31:05,990 --> 00:31:11,660
Yara and potentially post these results

664
00:31:08,540 --> 00:31:16,520
into a server for further analysis for

665
00:31:11,660 --> 00:31:19,970
the hunter why why scanning with Yara we

666
00:31:16,520 --> 00:31:22,610
would be basically reducing this the the

667
00:31:19,970 --> 00:31:25,480
false positives one plus also reducing

668
00:31:22,610 --> 00:31:29,510
the scope to a very specific set of

669
00:31:25,480 --> 00:31:32,210
iosys so that we are not wasting time in

670
00:31:29,510 --> 00:31:33,890
terms of try adding the overall issue so

671
00:31:32,210 --> 00:31:37,580
typically in a shock from what I have

672
00:31:33,890 --> 00:31:39,650
heard at least on the bigger socks they

673
00:31:37,580 --> 00:31:42,559
would get like 10 to 15 minutes at the

674
00:31:39,650 --> 00:31:44,780
max to try as the initial issue so we

675
00:31:42,559 --> 00:31:47,809
wanted to see if we could potentially

676
00:31:44,780 --> 00:31:51,160
use Yara to basically scan the collected

677
00:31:47,809 --> 00:31:56,960
artifacts to identify any initial

678
00:31:51,160 --> 00:31:58,760
attacks indicators of compromise so for

679
00:31:56,960 --> 00:32:01,580
that reason we basically have the

680
00:31:58,760 --> 00:32:03,980
python-based plus server that is exposed

681
00:32:01,580 --> 00:32:06,530
which can be hosted by any organization

682
00:32:03,980 --> 00:32:07,220
and it also has some basic support right

683
00:32:06,530 --> 00:32:09,290
now

684
00:32:07,220 --> 00:32:11,690
for authentication currently to support

685
00:32:09,290 --> 00:32:13,550
only basic authentication nothing fancy

686
00:32:11,690 --> 00:32:15,830
there again in the future we will be

687
00:32:13,550 --> 00:32:20,240
adding support for LDAP and adding

688
00:32:15,830 --> 00:32:23,740
integration so so forth and we can be

689
00:32:20,240 --> 00:32:26,630
hosted only on a Linux machine right now

690
00:32:23,740 --> 00:32:30,440
just because that we didn't have time to

691
00:32:26,630 --> 00:32:33,320
support Windows at the moment so there

692
00:32:30,440 --> 00:32:35,210
is a documentation but the other the

693
00:32:33,320 --> 00:32:37,460
Rossiter server is specifically used for

694
00:32:35,210 --> 00:32:39,920
to use cases right now one where we

695
00:32:37,460 --> 00:32:42,800
perform the era disk scan where we run

696
00:32:39,920 --> 00:32:45,050
where we look for specific uses or

697
00:32:42,800 --> 00:32:47,300
malware's on a given disk by running

698
00:32:45,050 --> 00:32:49,790
space running

699
00:32:47,300 --> 00:32:51,409
yara scans on the disk and the second

700
00:32:49,790 --> 00:32:53,389
one is running yara scans on memory

701
00:32:51,410 --> 00:32:58,730
where we look for specific processes or

702
00:32:53,390 --> 00:33:03,050
any indices in memory so the results are

703
00:32:58,730 --> 00:33:06,050
currently stored in JSON why because it

704
00:33:03,050 --> 00:33:09,770
can be easy for us to integrate that in

705
00:33:06,050 --> 00:33:12,379
the future with other open-source tools

706
00:33:09,770 --> 00:33:14,900
like maybe ALK stack that kind of gives

707
00:33:12,380 --> 00:33:18,710
you a graphical representation of the

708
00:33:14,900 --> 00:33:22,100
findings and so on so forth right

709
00:33:18,710 --> 00:33:25,370
so with that Yara

710
00:33:22,100 --> 00:33:27,050
Yara is the open source we kind of

711
00:33:25,370 --> 00:33:29,360
briefly start upon it it's open source

712
00:33:27,050 --> 00:33:34,070
tool developed by Victoria Mallory's of

713
00:33:29,360 --> 00:33:36,409
virustotal basically a pattern matching

714
00:33:34,070 --> 00:33:40,639
tool like a advanced grep option like if

715
00:33:36,410 --> 00:33:42,830
you think about it right so these days

716
00:33:40,640 --> 00:33:44,920
the RS I think getting much more

717
00:33:42,830 --> 00:33:47,659
attention especially considering that

718
00:33:44,920 --> 00:33:50,090
more and more security researchers are

719
00:33:47,660 --> 00:33:52,340
using Yara to initially identify the

720
00:33:50,090 --> 00:33:54,500
malware and they're sharing their error

721
00:33:52,340 --> 00:33:56,780
rules with public so that public can

722
00:33:54,500 --> 00:34:00,290
potentially use that to quickly identify

723
00:33:56,780 --> 00:34:03,920
the specific malware signatures or in

724
00:34:00,290 --> 00:34:05,840
their organization - so most of the AV

725
00:34:03,920 --> 00:34:08,750
vendors as well are adopting to this

726
00:34:05,840 --> 00:34:10,850
idea of Yara so I think if you haven't

727
00:34:08,750 --> 00:34:11,719
heard about it I think you be worth to

728
00:34:10,850 --> 00:34:15,580
take a look at it

729
00:34:11,719 --> 00:34:19,310
so Yara is also powerful in terms of

730
00:34:15,580 --> 00:34:21,650
basically not only for searching for

731
00:34:19,310 --> 00:34:23,690
specific patterns it also gives you a

732
00:34:21,650 --> 00:34:25,940
ton of customization options like if

733
00:34:23,690 --> 00:34:28,730
there are already a lot of add-on

734
00:34:25,940 --> 00:34:31,220
modules that are built around Yara which

735
00:34:28,730 --> 00:34:35,449
are readily available for at free of

736
00:34:31,219 --> 00:34:39,350
cost so along with that Yara Jen is also

737
00:34:35,449 --> 00:34:41,600
a very handy tool that basically takes

738
00:34:39,350 --> 00:34:43,429
the malware sample that you have as an

739
00:34:41,600 --> 00:34:45,650
input and generates the error rule for

740
00:34:43,429 --> 00:34:47,899
you why is this important because you

741
00:34:45,650 --> 00:34:50,900
could potentially use that rule now to

742
00:34:47,900 --> 00:34:52,550
execute on all your other endpoints

743
00:34:50,900 --> 00:34:54,470
which are located in an organization

744
00:34:52,550 --> 00:34:57,410
right so that kind of saves a lot of

745
00:34:54,469 --> 00:34:59,480
time especially from a threat hunting

746
00:34:57,410 --> 00:35:02,960
perspective so what does a Yara rule

747
00:34:59,480 --> 00:35:05,750
look like so it pretty much has pretty

748
00:35:02,960 --> 00:35:07,660
easy to understand type of format where

749
00:35:05,750 --> 00:35:10,520
you have the context about the rule and

750
00:35:07,660 --> 00:35:14,810
specific patterns to search for and a

751
00:35:10,520 --> 00:35:15,710
match condition and it can be there can

752
00:35:14,810 --> 00:35:17,690
be a little bit of learning curve

753
00:35:15,710 --> 00:35:23,210
initially when you're starting to write

754
00:35:17,690 --> 00:35:26,120
Yara rules but it certainly is doable if

755
00:35:23,210 --> 00:35:28,820
you ask me and it can basically provide

756
00:35:26,120 --> 00:35:31,640
you with more tools to fine tune your

757
00:35:28,820 --> 00:35:34,460
pattern matching just like any other

758
00:35:31,640 --> 00:35:36,529
pattern-matching tools which makes it

759
00:35:34,460 --> 00:35:39,710
pretty unique in terms of malware

760
00:35:36,530 --> 00:35:41,240
hunting let's just say that so with

761
00:35:39,710 --> 00:35:44,120
respect to Yara discs this is one of the

762
00:35:41,240 --> 00:35:47,299
commands that you can execute on using

763
00:35:44,120 --> 00:35:50,810
lasted or it basically performs the Yara

764
00:35:47,300 --> 00:35:52,910
scan on the given directory as you

765
00:35:50,810 --> 00:35:56,090
specify in the command to look for that

766
00:35:52,910 --> 00:35:59,120
specific patterns that you have provided

767
00:35:56,090 --> 00:36:01,280
in your era file so the rule files these

768
00:35:59,120 --> 00:36:03,140
files are currently look expected to be

769
00:36:01,280 --> 00:36:04,610
in the server why because in an

770
00:36:03,140 --> 00:36:07,850
organized every organization may have

771
00:36:04,610 --> 00:36:10,100
their own specific set of rules so if

772
00:36:07,850 --> 00:36:11,569
you are planning on hosting your estate

773
00:36:10,100 --> 00:36:13,850
or server you could potentially also

774
00:36:11,570 --> 00:36:15,770
write your own Yara rules and place them

775
00:36:13,850 --> 00:36:18,040
in your servers so for further

776
00:36:15,770 --> 00:36:22,400
consumption by your estate or client

777
00:36:18,040 --> 00:36:26,000
right yeah so yeah basically upon

778
00:36:22,400 --> 00:36:29,180
successful hits on the Yaris can it will

779
00:36:26,000 --> 00:36:31,160
basically give you what file got

780
00:36:29,180 --> 00:36:32,720
affected where can you find that what is

781
00:36:31,160 --> 00:36:35,770
the location of that particular file and

782
00:36:32,720 --> 00:36:35,770
so on so forth

783
00:36:35,800 --> 00:36:42,170
the next command is the Yarra mam which

784
00:36:39,260 --> 00:36:46,390
is similar to Yarra disk but again the

785
00:36:42,170 --> 00:36:50,090
scan here is entirely done on in memory

786
00:36:46,390 --> 00:36:52,370
there is a brilliant article by Michel

787
00:36:50,090 --> 00:36:53,330
Kohan which basically he did analysis

788
00:36:52,370 --> 00:36:55,490
like so which is better

789
00:36:53,330 --> 00:36:58,430
should I do we are mmm or should I do er

790
00:36:55,490 --> 00:36:59,839
a scan on the disk so based on that

791
00:36:58,430 --> 00:37:01,549
article I think when some of the

792
00:36:59,840 --> 00:37:04,040
findings were like if it is done right

793
00:37:01,550 --> 00:37:06,290
the rmm can be very very efficient in

794
00:37:04,040 --> 00:37:07,520
terms of time consumption so imagine if

795
00:37:06,290 --> 00:37:09,560
you are running these Yarra scans on

796
00:37:07,520 --> 00:37:12,140
50,000 endpoints right like you want it

797
00:37:09,560 --> 00:37:15,170
to be much more optimized and for that

798
00:37:12,140 --> 00:37:17,720
purpose erm can be pretty handy as well

799
00:37:15,170 --> 00:37:19,040
in terms of that hunting but essentially

800
00:37:17,720 --> 00:37:22,549
they both do the same thing like you

801
00:37:19,040 --> 00:37:25,190
provide a Yarra file with the specific

802
00:37:22,550 --> 00:37:30,500
patterns it goes and runs the Yarra scan

803
00:37:25,190 --> 00:37:32,830
in memory or versus the disk yeah it

804
00:37:30,500 --> 00:37:35,300
also some other information it returns

805
00:37:32,830 --> 00:37:37,360
some basic information like on a

806
00:37:35,300 --> 00:37:39,830
successful hit which host name it was

807
00:37:37,360 --> 00:37:42,890
affected what file what is the location

808
00:37:39,830 --> 00:37:47,029
what process and so on so forth

809
00:37:42,890 --> 00:37:49,910
so now we spoke about different commands

810
00:37:47,030 --> 00:37:52,190
that are associated that are exposed by

811
00:37:49,910 --> 00:37:55,279
lasted or and if you think of it before

812
00:37:52,190 --> 00:37:58,250
we go on the general notion right like

813
00:37:55,280 --> 00:38:00,680
the idea here was to expose certain

814
00:37:58,250 --> 00:38:03,440
functionalities that can be used on a

815
00:38:00,680 --> 00:38:06,220
day-to-day basis for hunting like what

816
00:38:03,440 --> 00:38:10,070
does the typical handle hunter do on a

817
00:38:06,220 --> 00:38:12,080
given day when new alert is issued so a

818
00:38:10,070 --> 00:38:14,990
generic flow would be like okay you have

819
00:38:12,080 --> 00:38:17,540
IDs IPS triggers a notification so you

820
00:38:14,990 --> 00:38:19,250
would have a basic sense of which

821
00:38:17,540 --> 00:38:21,500
endpoint is affected so from you will

822
00:38:19,250 --> 00:38:23,690
start from there so typically you could

823
00:38:21,500 --> 00:38:26,330
potentially use collect module like I

824
00:38:23,690 --> 00:38:30,470
showed earlier to do the initial level

825
00:38:26,330 --> 00:38:33,140
of data collection which is important

826
00:38:30,470 --> 00:38:37,220
because it collect module doesn't really

827
00:38:33,140 --> 00:38:38,990
leave any data behind in terms of it

828
00:38:37,220 --> 00:38:41,839
won't contaminate your existing

829
00:38:38,990 --> 00:38:46,490
operating system and its file structure

830
00:38:41,840 --> 00:38:49,910
so it if you're if the hunter is still

831
00:38:46,490 --> 00:38:51,680
not very clear on iosys based on that

832
00:38:49,910 --> 00:38:53,990
information you could potentially run

833
00:38:51,680 --> 00:38:55,339
the triage command in the triage command

834
00:38:53,990 --> 00:38:56,959
you could base case on any of the

835
00:38:55,340 --> 00:38:59,240
sysinternals command or your custom

836
00:38:56,960 --> 00:39:01,130
scripts to basically go ahead and fetch

837
00:38:59,240 --> 00:39:05,959
a specific information which is not

838
00:39:01,130 --> 00:39:08,570
captured by your collect command so at

839
00:39:05,960 --> 00:39:10,820
this point you pretty much we would

840
00:39:08,570 --> 00:39:13,070
assume that there will be some signs of

841
00:39:10,820 --> 00:39:15,980
iOS's look okay you are in the place

842
00:39:13,070 --> 00:39:18,890
where like a trained hunter is pretty

843
00:39:15,980 --> 00:39:21,560
much able to tell what is causing that

844
00:39:18,890 --> 00:39:24,500
issue and how to eradicate by looking at

845
00:39:21,560 --> 00:39:25,970
the different data facts right which are

846
00:39:24,500 --> 00:39:29,060
collected using the triage command or

847
00:39:25,970 --> 00:39:33,200
the collect command so after that you

848
00:39:29,060 --> 00:39:36,380
would basically go ahead and perform the

849
00:39:33,200 --> 00:39:38,390
yarra scans on the endpoint to see what

850
00:39:36,380 --> 00:39:41,540
is a full scope of that particular issue

851
00:39:38,390 --> 00:39:43,520
and also try to run the error scan

852
00:39:41,540 --> 00:39:46,340
across the overall environment to see

853
00:39:43,520 --> 00:39:49,690
what what are the other host systems are

854
00:39:46,340 --> 00:39:52,640
the endpoints that are affected so and

855
00:39:49,690 --> 00:39:54,440
once you do that you basically keep

856
00:39:52,640 --> 00:39:55,230
repeating this process because you will

857
00:39:54,440 --> 00:39:58,500
in

858
00:39:55,230 --> 00:40:01,380
she hid a lot of false positives so once

859
00:39:58,500 --> 00:40:03,080
you fine-tune your error rules you will

860
00:40:01,380 --> 00:40:05,340
be able to get a better result and

861
00:40:03,080 --> 00:40:08,819
basically define the overall scope of

862
00:40:05,340 --> 00:40:10,470
that particular issue and once you have

863
00:40:08,820 --> 00:40:12,630
figured out the entire scope you can

864
00:40:10,470 --> 00:40:13,680
think about the remediation plan right

865
00:40:12,630 --> 00:40:16,580
like how would you go ahead and

866
00:40:13,680 --> 00:40:21,000
remediate that given specific issue and

867
00:40:16,580 --> 00:40:22,980
then on you would maybe use the memory

868
00:40:21,000 --> 00:40:24,690
dump to perform further analysis on

869
00:40:22,980 --> 00:40:26,940
identifying the root cause of a given

870
00:40:24,690 --> 00:40:29,100
issue maybe or maybe maybe not maybe

871
00:40:26,940 --> 00:40:30,859
it's a straightforward issue but the

872
00:40:29,100 --> 00:40:33,660
point I wanted to show here is that

873
00:40:30,859 --> 00:40:36,869
there are basic tools that are available

874
00:40:33,660 --> 00:40:39,420
using a raster door now which are

875
00:40:36,869 --> 00:40:42,690
integrated into raster door which is

876
00:40:39,420 --> 00:40:44,550
pretty much good enough to start off the

877
00:40:42,690 --> 00:40:48,060
thread hunting process and of course

878
00:40:44,550 --> 00:40:50,040
it's not the the most polished code out

879
00:40:48,060 --> 00:40:54,029
there it's the open source code but the

880
00:40:50,040 --> 00:40:57,240
advantage of this tool is that it could

881
00:40:54,030 --> 00:40:59,340
be customized for your needs based on

882
00:40:57,240 --> 00:41:01,520
your requirement and some people might

883
00:40:59,340 --> 00:41:03,900
be only focusing on memory scan analysis

884
00:41:01,520 --> 00:41:06,090
our some people might be only interested

885
00:41:03,900 --> 00:41:07,710
in running processes and identifying

886
00:41:06,090 --> 00:41:09,390
what are the different processes that

887
00:41:07,710 --> 00:41:11,100
are running or the ports that are open

888
00:41:09,390 --> 00:41:15,240
across the organization and so on so

889
00:41:11,100 --> 00:41:17,520
forth so the point here was that like

890
00:41:15,240 --> 00:41:20,729
you could potentially use raster door to

891
00:41:17,520 --> 00:41:22,080
do a variety of activities which can

892
00:41:20,730 --> 00:41:24,510
assist you greatly in terms of

893
00:41:22,080 --> 00:41:27,090
identifying 4i OCS or any type of

894
00:41:24,510 --> 00:41:28,800
threads so what are the different

895
00:41:27,090 --> 00:41:31,890
choices you have in terms of customizing

896
00:41:28,800 --> 00:41:34,410
right like so like I mentioned the idea

897
00:41:31,890 --> 00:41:37,440
is to one of with one dot over release

898
00:41:34,410 --> 00:41:40,170
our idea was to basically make it very

899
00:41:37,440 --> 00:41:41,490
easy for adopting like you may already

900
00:41:40,170 --> 00:41:43,410
have certain tools that you have

901
00:41:41,490 --> 00:41:47,879
purchased so how would you use those

902
00:41:43,410 --> 00:41:49,710
tools to run against right so you could

903
00:41:47,880 --> 00:41:51,600
potentially customize that by writing a

904
00:41:49,710 --> 00:41:54,300
shell script that can be executed using

905
00:41:51,600 --> 00:41:55,710
last resort as well so I'm not really

906
00:41:54,300 --> 00:41:57,150
going to go much detail about the server

907
00:41:55,710 --> 00:41:59,340
customization there are some basic

908
00:41:57,150 --> 00:42:01,220
options that we support in terms of

909
00:41:59,340 --> 00:42:03,630
customization but in terms of client

910
00:42:01,220 --> 00:42:05,700
this is where you could we basically

911
00:42:03,630 --> 00:42:07,530
specify what are the different commands

912
00:42:05,700 --> 00:42:08,299
windows commands or unix commands that

913
00:42:07,530 --> 00:42:11,500
you want to run

914
00:42:08,300 --> 00:42:14,570
when you're running your trash module

915
00:42:11,500 --> 00:42:17,450
like I pointed out here that you could

916
00:42:14,570 --> 00:42:20,630
also basically tell that you can run

917
00:42:17,450 --> 00:42:24,020
your specific customized command to do a

918
00:42:20,630 --> 00:42:26,690
specific task in an endpoint to collect

919
00:42:24,020 --> 00:42:29,120
and collect the response from that using

920
00:42:26,690 --> 00:42:34,250
Rusted or as well using the triage

921
00:42:29,120 --> 00:42:35,480
command so apart from that yeah like I

922
00:42:34,250 --> 00:42:38,360
mentioned we added a bunch of new

923
00:42:35,480 --> 00:42:43,550
features which basically making it a

924
00:42:38,360 --> 00:42:45,770
little bit enterprise ready with respect

925
00:42:43,550 --> 00:42:48,590
to how it can be deployed on a server

926
00:42:45,770 --> 00:42:51,700
and what are the logging options and so

927
00:42:48,590 --> 00:42:54,290
on so forth so nothing interesting here

928
00:42:51,700 --> 00:42:56,330
yeah this can be pretty interesting so

929
00:42:54,290 --> 00:42:58,340
we are we're actively working on this

930
00:42:56,330 --> 00:43:02,319
project we are adding new and new

931
00:42:58,340 --> 00:43:02,320
features and newer features in terms of

932
00:43:02,440 --> 00:43:06,260
providing the init method like I

933
00:43:05,000 --> 00:43:07,760
mentioned where one of the current

934
00:43:06,260 --> 00:43:09,530
requirement is that like you are

935
00:43:07,760 --> 00:43:11,660
expected to host your tools and data

936
00:43:09,530 --> 00:43:13,670
folder why because we don't want to

937
00:43:11,660 --> 00:43:15,740
distribute the tools these are Windows

938
00:43:13,670 --> 00:43:18,020
tools or some open source tools we are

939
00:43:15,740 --> 00:43:19,910
expecting according to your needs you

940
00:43:18,020 --> 00:43:21,980
would basically go ahead and create a

941
00:43:19,910 --> 00:43:24,259
tools folder and put all your tools

942
00:43:21,980 --> 00:43:27,500
inside the tools folder so that it can

943
00:43:24,260 --> 00:43:29,810
be used by rastas or what will trust it

944
00:43:27,500 --> 00:43:32,330
or do it will basically enable you to

945
00:43:29,810 --> 00:43:34,700
execute that on an endpoint plus it will

946
00:43:32,330 --> 00:43:37,690
also provide a output in a specific

947
00:43:34,700 --> 00:43:41,839
manner which is easy for you to read and

948
00:43:37,690 --> 00:43:44,990
process further right so yeah we are

949
00:43:41,840 --> 00:43:47,210
adding a bunch of features including

950
00:43:44,990 --> 00:43:50,029
supporting doctor eyes deployments for

951
00:43:47,210 --> 00:43:51,590
servers especially if you want to

952
00:43:50,030 --> 00:43:53,240
quickly deploy something onto your

953
00:43:51,590 --> 00:43:56,390
existing infrastructure

954
00:43:53,240 --> 00:43:57,799
I think docker is the way to go so that

955
00:43:56,390 --> 00:44:00,410
is coming and like I mentioned we are

956
00:43:57,800 --> 00:44:02,150
planning on also supporting LDAP for

957
00:44:00,410 --> 00:44:04,609
Asador so that it can be easily

958
00:44:02,150 --> 00:44:08,750
integrated at an enterprise level than

959
00:44:04,610 --> 00:44:10,070
having a basic authentication and like I

960
00:44:08,750 --> 00:44:11,750
mentioned one of the big things that we

961
00:44:10,070 --> 00:44:13,190
are trying to focus on is currently we

962
00:44:11,750 --> 00:44:17,950
have three separate executables for

963
00:44:13,190 --> 00:44:19,780
Windows Mac and Linux and one of the

964
00:44:17,950 --> 00:44:21,520
main thing that we reach that we are

965
00:44:19,780 --> 00:44:23,619
trying to add is to basically unify them

966
00:44:21,520 --> 00:44:26,259
and provide one executable for all

967
00:44:23,619 --> 00:44:28,720
platforms this can be especially handy

968
00:44:26,260 --> 00:44:31,359
if you if you have organization where

969
00:44:28,720 --> 00:44:36,009
you have endpoints which are running on

970
00:44:31,359 --> 00:44:38,410
multiple different Oasis right so along

971
00:44:36,010 --> 00:44:40,119
with that there are certain some other

972
00:44:38,410 --> 00:44:43,210
notable projects that I wanted to list

973
00:44:40,119 --> 00:44:46,270
here one of them is the open CNA project

974
00:44:43,210 --> 00:44:49,839
so one of the problems with roster third

975
00:44:46,270 --> 00:44:51,550
project is that we allow you to

976
00:44:49,839 --> 00:44:54,339
basically generate all the run of these

977
00:44:51,550 --> 00:44:58,750
different tools and generate these logs

978
00:44:54,339 --> 00:45:01,599
and these logs are every tool has their

979
00:44:58,750 --> 00:45:04,150
own formatting and the results are not

980
00:45:01,599 --> 00:45:06,400
very unified there is not really a clean

981
00:45:04,150 --> 00:45:09,430
standard so you would basically end up

982
00:45:06,400 --> 00:45:11,740
manually reviewing these logs right the

983
00:45:09,430 --> 00:45:13,660
artifacts that are generated so the open

984
00:45:11,740 --> 00:45:16,149
CNA project basically focuses on it is

985
00:45:13,660 --> 00:45:18,940
built on on top of roster though it uses

986
00:45:16,150 --> 00:45:21,099
roster doors for data collection but it

987
00:45:18,940 --> 00:45:23,920
does little more it basically provides

988
00:45:21,099 --> 00:45:26,020
the parsers to parse each of these

989
00:45:23,920 --> 00:45:29,190
results like for example netstat or auto

990
00:45:26,020 --> 00:45:30,819
run processes so it basically runs the

991
00:45:29,190 --> 00:45:34,869
parses on top

992
00:45:30,819 --> 00:45:36,579
- basically unify the output Y so that

993
00:45:34,869 --> 00:45:39,660
it can run some analytics on top of it

994
00:45:36,579 --> 00:45:42,369
right so it's a very interesting project

995
00:45:39,660 --> 00:45:46,660
so the data collected by different

996
00:45:42,369 --> 00:45:48,700
endpoints are passed to generate some

997
00:45:46,660 --> 00:45:50,980
analytics information and based on that

998
00:45:48,700 --> 00:45:52,480
you could potentially perform take

999
00:45:50,980 --> 00:45:56,020
further actions this is especially

1000
00:45:52,480 --> 00:45:59,550
useful in advanced the proactive IOC

1001
00:45:56,020 --> 00:46:02,740
hunting and yeah like I mentioned

1002
00:45:59,550 --> 00:46:05,560
Rossiter also provides wrappers for cyl

1003
00:46:02,740 --> 00:46:08,319
our bin PMM which is used for memory

1004
00:46:05,560 --> 00:46:11,529
dump - so you can learn about that in

1005
00:46:08,319 --> 00:46:14,230
the following links as well

1006
00:46:11,530 --> 00:46:17,589
awesome Yara is a brilliant reference

1007
00:46:14,230 --> 00:46:20,200
for anything we are related if you are

1008
00:46:17,589 --> 00:46:21,400
looking for any public I mean publicly

1009
00:46:20,200 --> 00:46:24,098
available there are like at least

1010
00:46:21,400 --> 00:46:25,240
thousands of java rules available so

1011
00:46:24,099 --> 00:46:28,270
that you don't have to reinvent the

1012
00:46:25,240 --> 00:46:30,660
whole wheel right like so I would

1013
00:46:28,270 --> 00:46:37,410
definitely recommend you check that link

1014
00:46:30,660 --> 00:46:39,899
as well so in conclusion one of the

1015
00:46:37,410 --> 00:46:43,440
things that I kind of specifically like

1016
00:46:39,900 --> 00:46:47,490
about this whole sock and performing

1017
00:46:43,440 --> 00:46:50,550
threat hunting and looking for initial

1018
00:46:47,490 --> 00:46:52,979
IOC is that there are way too many tools

1019
00:46:50,550 --> 00:46:55,800
out there and if you're not really using

1020
00:46:52,980 --> 00:46:57,510
the right set of tools then you are

1021
00:46:55,800 --> 00:47:01,290
basically wasting your time I mean maybe

1022
00:46:57,510 --> 00:47:02,460
this right set of tools for right set of

1023
00:47:01,290 --> 00:47:04,920
problems yeah

1024
00:47:02,460 --> 00:47:09,240
so identifying and using the right set

1025
00:47:04,920 --> 00:47:10,920
of tools can be very effective and the

1026
00:47:09,240 --> 00:47:13,680
whole idea behind Rasta thought was to

1027
00:47:10,920 --> 00:47:16,430
basically allow the hunters to customize

1028
00:47:13,680 --> 00:47:22,529
their tools according to their needs

1029
00:47:16,430 --> 00:47:24,870
so we also basically allowed a couple of

1030
00:47:22,530 --> 00:47:28,020
we added some new features in the roster

1031
00:47:24,870 --> 00:47:31,380
door to not only perform the collection

1032
00:47:28,020 --> 00:47:36,660
across multiple endpoints quickly but

1033
00:47:31,380 --> 00:47:38,880
also started to we enable the hunter to

1034
00:47:36,660 --> 00:47:41,190
perform some scans on top of it which is

1035
00:47:38,880 --> 00:47:43,650
pretty handy especially considering the

1036
00:47:41,190 --> 00:47:46,080
amount of data you're collecting let's

1037
00:47:43,650 --> 00:47:49,950
say if you have 10,000 plus endpoints on

1038
00:47:46,080 --> 00:47:52,650
your in your organization right so some

1039
00:47:49,950 --> 00:47:56,160
of the generic statement here that like

1040
00:47:52,650 --> 00:47:58,440
we were able to run execute we this

1041
00:47:56,160 --> 00:48:00,509
positi like I mentioned is being used

1042
00:47:58,440 --> 00:48:04,100
actively in some of the production

1043
00:48:00,510 --> 00:48:06,900
systems with 50,000 plus nodes and

1044
00:48:04,100 --> 00:48:11,310
majority of the cases we were able to

1045
00:48:06,900 --> 00:48:15,720
use this tool to identify the IOC s at

1046
00:48:11,310 --> 00:48:18,029
least as a starting point so the whole

1047
00:48:15,720 --> 00:48:22,169
idea here is to basically leverage the

1048
00:48:18,030 --> 00:48:25,940
existing tools and use those existing

1049
00:48:22,170 --> 00:48:28,830
forensic tools along with rostered or to

1050
00:48:25,940 --> 00:48:31,430
execute those tools on the endpoint and

1051
00:48:28,830 --> 00:48:34,590
the residual to be used as a framework

1052
00:48:31,430 --> 00:48:36,810
and not as a tool rather as a framework

1053
00:48:34,590 --> 00:48:40,940
which allows you to integrate these

1054
00:48:36,810 --> 00:48:40,940
different tools quickly and seamlessly

1055
00:48:41,650 --> 00:48:48,299
that's about it if you have any

1056
00:48:44,079 --> 00:48:48,299
questions let me know

1057
00:48:49,690 --> 00:48:52,880
[Applause]

