1
00:00:17,130 --> 00:00:22,330
thanks everybody can everybody hear me

2
00:00:20,050 --> 00:00:25,390
this distance I don't know how close I

3
00:00:22,330 --> 00:00:27,459
need to get to the mic here alright so I

4
00:00:25,390 --> 00:00:29,560
think that intro kind of covered most of

5
00:00:27,460 --> 00:00:32,110
it here but a little bit about me I'm

6
00:00:29,560 --> 00:00:34,600
Karl Fossen practice director at net spy

7
00:00:32,110 --> 00:00:37,720
I do pen testing in the past I've done

8
00:00:34,600 --> 00:00:40,989
lots of password cracking social

9
00:00:37,720 --> 00:00:43,600
engineering blogging a bit of a cloud

10
00:00:40,989 --> 00:00:44,830
enthusiast and since we are in Oregon

11
00:00:43,600 --> 00:00:46,870
I'm a homebrewer

12
00:00:44,830 --> 00:00:49,329
like to brew beer I was actually here

13
00:00:46,870 --> 00:00:52,180
for homebrew con like six months ago

14
00:00:49,329 --> 00:00:53,649
know if anybody else was but another fun

15
00:00:52,180 --> 00:00:55,059
conference that happens to be here thank

16
00:00:53,649 --> 00:00:56,770
you for being here on a Saturday

17
00:00:55,059 --> 00:00:59,739
afternoon with the competition of the

18
00:00:56,770 --> 00:01:02,170
other conferences going on here

19
00:00:59,739 --> 00:01:04,239
I know Pokemon and anime might be a

20
00:01:02,170 --> 00:01:05,110
little bit more exciting but we'll try

21
00:01:04,239 --> 00:01:09,580
and make this interesting

22
00:01:05,110 --> 00:01:11,320
so my info is up here net spies github

23
00:01:09,580 --> 00:01:13,030
you can find a lot of the stuff I've

24
00:01:11,320 --> 00:01:15,880
written up at blog dotnet spy calm you

25
00:01:13,030 --> 00:01:18,369
can find me at twitter at kaif awesome

26
00:01:15,880 --> 00:01:20,530
and I'm the old guy yelling at the cloud

27
00:01:18,369 --> 00:01:21,850
so this is our outline we're gonna talk

28
00:01:20,530 --> 00:01:24,700
about all this stuff so I'm not gonna

29
00:01:21,850 --> 00:01:26,979
stay on this slide but we're gonna start

30
00:01:24,700 --> 00:01:30,430
with talking about dumping a juror data

31
00:01:26,979 --> 00:01:32,380
first so why would we want to dump data

32
00:01:30,430 --> 00:01:34,210
from a juror so we have a number of

33
00:01:32,380 --> 00:01:36,280
clients who are moving over to Azure

34
00:01:34,210 --> 00:01:40,658
because of a lot of reasons but

35
00:01:36,280 --> 00:01:44,799
primarily Wow everything is pumping

36
00:01:40,659 --> 00:01:46,150
ahead here so primarily a lot of our

37
00:01:44,799 --> 00:01:47,890
clients are starting to move over to

38
00:01:46,150 --> 00:01:50,860
Azure environments due to the fact that

39
00:01:47,890 --> 00:01:52,659
Azure Active Directory is easy to

40
00:01:50,860 --> 00:01:55,000
integrate with existing Active Directory

41
00:01:52,659 --> 00:01:58,180
environments so things like role based

42
00:01:55,000 --> 00:01:59,770
access control or Billy now all of these

43
00:01:58,180 --> 00:02:02,049
things can be tied to Active Directory

44
00:01:59,770 --> 00:02:04,270
users and groups that's really easy to

45
00:02:02,049 --> 00:02:05,590
migrate to cloud infrastructure that's

46
00:02:04,270 --> 00:02:08,350
already tied to your Active Directory

47
00:02:05,590 --> 00:02:11,110
infrastructure as attackers this is

48
00:02:08,350 --> 00:02:12,940
great for us because things like season

49
00:02:11,110 --> 00:02:15,310
in year password combinations we can go

50
00:02:12,940 --> 00:02:18,489
ahead and guess a user's password for a

51
00:02:15,310 --> 00:02:20,350
domain during I don't know why this

52
00:02:18,489 --> 00:02:22,950
keeps jumping ahead my timings are all

53
00:02:20,350 --> 00:02:24,859
messed up on here anyways

54
00:02:22,950 --> 00:02:27,619
[Music]

55
00:02:24,860 --> 00:02:28,940
what I'm saying is as an attacker from

56
00:02:27,620 --> 00:02:30,940
an external perspective we can go ahead

57
00:02:28,940 --> 00:02:33,680
and guess a password and get access to

58
00:02:30,940 --> 00:02:37,250
Active Directory through the Microsoft

59
00:02:33,680 --> 00:02:39,020
portal or through Azure so frequently

60
00:02:37,250 --> 00:02:41,420
when we get those credentials during an

61
00:02:39,020 --> 00:02:43,280
external pen test we like to go ahead

62
00:02:41,420 --> 00:02:45,910
and dump information from the issuer

63
00:02:43,280 --> 00:02:48,890
configuration to further our attacks so

64
00:02:45,910 --> 00:02:51,829
typically normal domain users have

65
00:02:48,890 --> 00:02:54,109
access to the azure portal most times

66
00:02:51,830 --> 00:02:56,180
that we run into Active Directory creds

67
00:02:54,110 --> 00:02:59,660
on an external pen test those users have

68
00:02:56,180 --> 00:03:00,980
rights to login it's pretty rare that

69
00:02:59,660 --> 00:03:02,930
it's actually locked down to a point

70
00:03:00,980 --> 00:03:05,510
that regular users do not have access to

71
00:03:02,930 --> 00:03:07,520
the user report Allah so we want to get

72
00:03:05,510 --> 00:03:08,870
access to all that information

73
00:03:07,520 --> 00:03:10,640
additionally doing as your

74
00:03:08,870 --> 00:03:12,950
infrastructure audits we do have clients

75
00:03:10,640 --> 00:03:15,109
that bring us in to look at their actual

76
00:03:12,950 --> 00:03:17,269
issuer infrastructure and do an audit

77
00:03:15,110 --> 00:03:20,680
against you know best practices make

78
00:03:17,270 --> 00:03:23,120
sure that everything is actively

79
00:03:20,680 --> 00:03:25,520
correctly managed and set up properly

80
00:03:23,120 --> 00:03:27,380
all of that so why can we do this well

81
00:03:25,520 --> 00:03:29,299
the user management is available over

82
00:03:27,380 --> 00:03:32,630
the Internet it's the cloud it's meant

83
00:03:29,299 --> 00:03:33,769
to be available publicly frequently this

84
00:03:32,630 --> 00:03:36,290
is done without multi-factor

85
00:03:33,769 --> 00:03:38,120
authentication typically for a standard

86
00:03:36,290 --> 00:03:39,709
Windows domain they're not gonna set up

87
00:03:38,120 --> 00:03:41,420
multi-factor authentication for the

88
00:03:39,709 --> 00:03:43,280
issuer portal if they're not walking

89
00:03:41,420 --> 00:03:45,619
down portal access in the first place so

90
00:03:43,280 --> 00:03:47,780
we're finding lots of single factor

91
00:03:45,620 --> 00:03:50,090
authentication points with the visual

92
00:03:47,780 --> 00:03:52,370
portal and it's easy to get access this

93
00:03:50,090 --> 00:03:54,769
way so why do we want to automate this

94
00:03:52,370 --> 00:03:56,600
well talking about all of the things

95
00:03:54,769 --> 00:03:58,850
that we want to gather doing this by

96
00:03:56,600 --> 00:04:00,290
hand and going through the portal

97
00:03:58,850 --> 00:04:01,100
website can be a little bit

98
00:04:00,290 --> 00:04:02,570
time-consuming

99
00:04:01,100 --> 00:04:04,820
while the copying and pasting we want to

100
00:04:02,570 --> 00:04:06,670
automate this with PowerShell which is

101
00:04:04,820 --> 00:04:10,760
what we did with the micro burst tools

102
00:04:06,670 --> 00:04:12,768
so micro burst is a github repo that

103
00:04:10,760 --> 00:04:14,480
we've got the link for right up here

104
00:04:12,769 --> 00:04:16,790
I'll have links for all this stuff at

105
00:04:14,480 --> 00:04:18,709
the end and I'll have the slides later I

106
00:04:16,790 --> 00:04:20,260
don't know why I keep jumping ahead to

107
00:04:18,709 --> 00:04:24,560
the next slide I apologize for that

108
00:04:20,260 --> 00:04:27,620
anyways the repositories got a handful

109
00:04:24,560 --> 00:04:29,390
of PowerShell scripts that we use to do

110
00:04:27,620 --> 00:04:30,470
as your assessment so here's some of the

111
00:04:29,390 --> 00:04:32,570
current functions we're going to talk

112
00:04:30,470 --> 00:04:35,300
about these during the actual demo here

113
00:04:32,570 --> 00:04:36,349
so we're not gonna linger on these but I

114
00:04:35,300 --> 00:04:37,660
does have a couple of module

115
00:04:36,349 --> 00:04:39,430
dependencies that will prompt

116
00:04:37,660 --> 00:04:42,370
for when you import the actual

117
00:04:39,430 --> 00:04:44,530
microburst module so you can find code

118
00:04:42,370 --> 00:04:46,810
out here but we'll have more links for

119
00:04:44,530 --> 00:04:49,359
that later so a quick note on

120
00:04:46,810 --> 00:04:52,260
permissions so a juror has three really

121
00:04:49,360 --> 00:04:55,930
important permissions level owner

122
00:04:52,260 --> 00:04:58,480
contributor and reader so within an

123
00:04:55,930 --> 00:04:59,710
insurer environment this is gonna keep

124
00:04:58,480 --> 00:05:03,310
doing this because there's something

125
00:04:59,710 --> 00:05:04,390
weird with my timings within each of

126
00:05:03,310 --> 00:05:06,340
your environment you've got the

127
00:05:04,390 --> 00:05:08,140
environment a subscription within that

128
00:05:06,340 --> 00:05:10,390
environment and then that subscription

129
00:05:08,140 --> 00:05:11,710
has different services underneath that

130
00:05:10,390 --> 00:05:13,270
within that subscription you've got

131
00:05:11,710 --> 00:05:15,580
these three different levels of

132
00:05:13,270 --> 00:05:17,260
permissions so the owner owns that

133
00:05:15,580 --> 00:05:18,690
subscription and they have rights to

134
00:05:17,260 --> 00:05:21,150
delegate rights out to other users

135
00:05:18,690 --> 00:05:23,650
startup services basically do everything

136
00:05:21,150 --> 00:05:26,109
contributors have rights to fire up

137
00:05:23,650 --> 00:05:27,820
virtual machines use different services

138
00:05:26,110 --> 00:05:30,130
but they're not allowed to assign

139
00:05:27,820 --> 00:05:32,320
specific rights to other users that's

140
00:05:30,130 --> 00:05:33,909
what the owner accounts are for the

141
00:05:32,320 --> 00:05:36,190
reader roles have rights to read

142
00:05:33,910 --> 00:05:38,320
configurations read information but in

143
00:05:36,190 --> 00:05:40,360
general not necessarily fire up virtual

144
00:05:38,320 --> 00:05:42,340
machines or anything like that there are

145
00:05:40,360 --> 00:05:45,520
additional roles that you can create to

146
00:05:42,340 --> 00:05:47,799
allow a regular reader users to create

147
00:05:45,520 --> 00:05:48,460
virtual machines or deploy code or

148
00:05:47,800 --> 00:05:51,670
anything like that

149
00:05:48,460 --> 00:05:53,680
those aren't hugely important here will

150
00:05:51,670 --> 00:05:55,450
you actually dump out the list of all of

151
00:05:53,680 --> 00:05:57,880
the roles with one of the tools within

152
00:05:55,450 --> 00:05:59,110
microburst but they're worth looking

153
00:05:57,880 --> 00:06:01,060
into because sometimes there's some

154
00:05:59,110 --> 00:06:03,400
interesting kind of inheritance issues

155
00:06:01,060 --> 00:06:05,110
where you may end up getting owner type

156
00:06:03,400 --> 00:06:06,580
access to something when you didn't

157
00:06:05,110 --> 00:06:09,730
intend to have that with some of these

158
00:06:06,580 --> 00:06:13,359
custom roles but not hugely important

159
00:06:09,730 --> 00:06:14,919
here but worth noting so there's a

160
00:06:13,360 --> 00:06:15,760
number of different ways to dump data

161
00:06:14,919 --> 00:06:18,780
from a juror

162
00:06:15,760 --> 00:06:22,000
there's the juror portal rest api's

163
00:06:18,780 --> 00:06:24,640
powershell commandlets and it might jump

164
00:06:22,000 --> 00:06:28,510
ahead yeah there we go I don't know why

165
00:06:24,640 --> 00:06:30,190
it keeps doing this but anyways we'll

166
00:06:28,510 --> 00:06:31,900
talk about the azure portal first kind

167
00:06:30,190 --> 00:06:33,310
of mentioned this first we log in

168
00:06:31,900 --> 00:06:35,799
through the web interface that's portal

169
00:06:33,310 --> 00:06:37,990
as your comm and if it's tied to your

170
00:06:35,800 --> 00:06:41,140
Active Directory or back to a federated

171
00:06:37,990 --> 00:06:42,850
a Active Directory domain it's pretty

172
00:06:41,140 --> 00:06:45,610
easy to access with standard Windows

173
00:06:42,850 --> 00:06:47,110
domain credentials but pros it's a nice

174
00:06:45,610 --> 00:06:49,360
graphical interface we can see kind of

175
00:06:47,110 --> 00:06:50,740
the sidebar here over on the right-hand

176
00:06:49,360 --> 00:06:52,630
side of the screen

177
00:06:50,740 --> 00:06:54,310
it's nice to look at but it's really

178
00:06:52,630 --> 00:06:56,620
hard to dump configuration information

179
00:06:54,310 --> 00:06:58,389
that way so in terms of scaling it's not

180
00:06:56,620 --> 00:07:01,419
easy to scale pulling information from

181
00:06:58,389 --> 00:07:03,400
there the rest api's that are available

182
00:07:01,419 --> 00:07:04,960
or nice structured JSON data it's easy

183
00:07:03,400 --> 00:07:07,330
to make requests easy to get data back

184
00:07:04,960 --> 00:07:09,280
but setting up authentication for it

185
00:07:07,330 --> 00:07:11,680
getting the actual like tokens to access

186
00:07:09,280 --> 00:07:14,380
it and some of the JSON data formatting

187
00:07:11,680 --> 00:07:16,930
is not ideal in terms of doing a lot of

188
00:07:14,380 --> 00:07:19,419
this at scale so with the powershell

189
00:07:16,930 --> 00:07:21,580
commandlets we've got integrated off

190
00:07:19,419 --> 00:07:23,919
with the Active Directory authentication

191
00:07:21,580 --> 00:07:26,440
libraries so you just put in username

192
00:07:23,919 --> 00:07:29,859
and passwords get a token really easy to

193
00:07:26,440 --> 00:07:31,509
operate with that all of the data is

194
00:07:29,860 --> 00:07:33,789
typically returned as pipeline able

195
00:07:31,509 --> 00:07:35,500
objects so if those people in the room

196
00:07:33,789 --> 00:07:37,599
that are not familiar with PowerShell

197
00:07:35,500 --> 00:07:40,030
you have objects that you can basically

198
00:07:37,599 --> 00:07:43,060
export from one function to another and

199
00:07:40,030 --> 00:07:45,250
basically pipeline all of that data from

200
00:07:43,060 --> 00:07:47,319
one function to another so let's say we

201
00:07:45,250 --> 00:07:48,909
want to get a list of all of the network

202
00:07:47,319 --> 00:07:50,979
interfaces for all of the virtual

203
00:07:48,909 --> 00:07:52,360
machines well we could just ask a juror

204
00:07:50,979 --> 00:07:54,969
for a list of all of the virtual

205
00:07:52,360 --> 00:07:58,180
machines pipe that virtual machine list

206
00:07:54,969 --> 00:08:00,219
into get interface and basically pull

207
00:07:58,180 --> 00:08:02,050
out a list for each virtual machine each

208
00:08:00,219 --> 00:08:03,909
of their interfaces so we can pipeline

209
00:08:02,050 --> 00:08:06,729
all of this and streamline everything

210
00:08:03,909 --> 00:08:08,979
which is really good for scalability if

211
00:08:06,729 --> 00:08:10,389
you've got you know 400 virtual machines

212
00:08:08,979 --> 00:08:12,580
that you need to pull you know IP

213
00:08:10,389 --> 00:08:15,940
addresses for it's really easy to do

214
00:08:12,580 --> 00:08:18,639
that it's nice for data output as well

215
00:08:15,940 --> 00:08:20,349
those same objects are easy to export to

216
00:08:18,639 --> 00:08:23,020
CSV files or text files

217
00:08:20,349 --> 00:08:25,120
the only real con is PowerShell is a

218
00:08:23,020 --> 00:08:27,130
little bit limited in terms of threading

219
00:08:25,120 --> 00:08:29,199
options it's kind of hard to spin up a

220
00:08:27,130 --> 00:08:30,490
bunch of different threads and it's it's

221
00:08:29,199 --> 00:08:33,459
hard to kind of multitask with

222
00:08:30,490 --> 00:08:39,010
PowerShell it's it's not ideal but the

223
00:08:33,458 --> 00:08:41,189
objects definitely make up for that so

224
00:08:39,010 --> 00:08:43,689
hopefully this doesn't jump ahead here

225
00:08:41,190 --> 00:08:50,950
all right we'll just plan for that on

226
00:08:43,690 --> 00:08:53,320
every slide no it's something with the

227
00:08:50,950 --> 00:08:55,630
template I was trying to add some of

228
00:08:53,320 --> 00:08:57,459
these transitions earlier today so that

229
00:08:55,630 --> 00:08:58,990
things would pop up one at a time and I

230
00:08:57,459 --> 00:09:05,380
must have enabled something that

231
00:08:58,990 --> 00:09:07,900
automatically skips so anyways there are

232
00:09:05,380 --> 00:09:10,810
three different primary powershell

233
00:09:07,900 --> 00:09:13,300
commandlets that you're gonna be using

234
00:09:10,810 --> 00:09:16,420
the first two the issuer service

235
00:09:13,300 --> 00:09:19,060
management and Azure RM are kind of the

236
00:09:16,420 --> 00:09:21,550
primary ones that microbursts uses those

237
00:09:19,060 --> 00:09:22,689
are more of the older style these your

238
00:09:21,550 --> 00:09:24,250
service management it's kind of the

239
00:09:22,690 --> 00:09:26,230
original powershell commandlets that you

240
00:09:24,250 --> 00:09:29,320
use to manage at your infrastructure as

241
00:09:26,230 --> 00:09:31,690
your RM is the newer option for resource

242
00:09:29,320 --> 00:09:33,160
management most of the functions that

243
00:09:31,690 --> 00:09:36,220
we're using in microbursts are around as

244
00:09:33,160 --> 00:09:37,930
your RM modules AZ is the latest option

245
00:09:36,220 --> 00:09:39,699
that's actually going to replace the

246
00:09:37,930 --> 00:09:42,310
azure RM modules they just announced

247
00:09:39,699 --> 00:09:43,870
that about a week ago luckily for me

248
00:09:42,310 --> 00:09:45,969
pretty much everything is going to be

249
00:09:43,870 --> 00:09:47,350
backwards compatible with Azure RM

250
00:09:45,970 --> 00:09:49,899
command le'ts so I'm not gonna have to

251
00:09:47,350 --> 00:09:52,029
rewrite everything in about 6 months so

252
00:09:49,899 --> 00:09:54,520
that's nice the last one that we

253
00:09:52,029 --> 00:09:56,500
included on here is ms online so this is

254
00:09:54,520 --> 00:09:57,750
for Microsoft online services or office

255
00:09:56,500 --> 00:09:59,890
365

256
00:09:57,750 --> 00:10:01,300
basically if you're in a situation where

257
00:09:59,890 --> 00:10:03,790
you've got domain creds and you want to

258
00:10:01,300 --> 00:10:06,430
dump information about a domain and you

259
00:10:03,790 --> 00:10:08,170
don't have access to any of these or

260
00:10:06,430 --> 00:10:08,680
commandlets or access to the issue or

261
00:10:08,170 --> 00:10:10,209
portal

262
00:10:08,680 --> 00:10:13,089
chances are you're gonna have access to

263
00:10:10,209 --> 00:10:14,680
office 365 where you can then still pull

264
00:10:13,089 --> 00:10:17,380
information about the domain domain

265
00:10:14,680 --> 00:10:19,479
users groups lots of other stuff it's

266
00:10:17,380 --> 00:10:20,500
pretty handy but I'm including that on

267
00:10:19,480 --> 00:10:22,510
here because some of the Microverse

268
00:10:20,500 --> 00:10:27,820
stuff makes use of the MS online

269
00:10:22,510 --> 00:10:30,490
Commandments so there is some existing

270
00:10:27,820 --> 00:10:32,230
tooling and research out here already

271
00:10:30,490 --> 00:10:34,000
there's tool called as you car I

272
00:10:32,230 --> 00:10:38,440
actually just talked with the author

273
00:10:34,000 --> 00:10:40,120
about that talked with the author of

274
00:10:38,440 --> 00:10:43,449
that tool a couple of weeks ago about

275
00:10:40,120 --> 00:10:46,209
their tool it doesn't quite meet the use

276
00:10:43,449 --> 00:10:49,270
cases for how I typically test Azure

277
00:10:46,209 --> 00:10:51,219
environments but it is a good tool as

278
00:10:49,270 --> 00:10:52,959
great reporting there's edge write

279
00:10:51,220 --> 00:10:53,649
Explorer I haven't really used this a

280
00:10:52,959 --> 00:10:55,239
whole lot

281
00:10:53,649 --> 00:10:57,100
couple of the commandlets in there are

282
00:10:55,240 --> 00:11:00,610
old commandlets that are not compatible

283
00:10:57,100 --> 00:11:02,649
with current version of azure RM so ever

284
00:11:00,610 --> 00:11:04,959
really use that but if the microbrews

285
00:11:02,649 --> 00:11:07,269
tools do not work for you I'd say go

286
00:11:04,959 --> 00:11:08,498
check out those they may be more you

287
00:11:07,269 --> 00:11:13,720
know focused on the things that you're

288
00:11:08,499 --> 00:11:15,759
specifically looking to test so I would

289
00:11:13,720 --> 00:11:17,829
say that this book that I have right up

290
00:11:15,759 --> 00:11:19,869
here if anybody wants to look after the

291
00:11:17,829 --> 00:11:21,998
talk is kind of required reading if

292
00:11:19,869 --> 00:11:26,949
you're going to be doing any as your pen

293
00:11:21,999 --> 00:11:28,990
testing so it's pen testing user

294
00:11:26,949 --> 00:11:31,089
applications by Matt burrow I can find

295
00:11:28,990 --> 00:11:33,939
that on no starch this came out right

296
00:11:31,089 --> 00:11:36,220
before Def Con I think and it really

297
00:11:33,939 --> 00:11:37,959
clearly outlines a good testing process

298
00:11:36,220 --> 00:11:40,480
for testing these your applications and

299
00:11:37,959 --> 00:11:40,839
ensure environments it's gonna drive me

300
00:11:40,480 --> 00:11:45,040
crazy

301
00:11:40,839 --> 00:11:47,910
sorry I can probably fix this in about

302
00:11:45,040 --> 00:11:47,910
two seconds

303
00:11:54,350 --> 00:12:03,930
where's it I don't remember it was

304
00:12:00,060 --> 00:12:05,489
online so just disabled the one thing

305
00:12:03,930 --> 00:12:07,069
that I enabled earlier so we'll see if

306
00:12:05,490 --> 00:12:09,240
that works

307
00:12:07,070 --> 00:12:12,300
anyways this is a great book if you're

308
00:12:09,240 --> 00:12:17,600
going to be pen testing as you're a lot

309
00:12:12,300 --> 00:12:20,130
then wow that is really annoying sorry

310
00:12:17,600 --> 00:12:22,290
alright so if you're gonna be doing lots

311
00:12:20,130 --> 00:12:23,460
of your applications or is your

312
00:12:22,290 --> 00:12:26,310
environments I definitely recommend

313
00:12:23,460 --> 00:12:30,150
reading this and jumping ahead to the

314
00:12:26,310 --> 00:12:33,569
next slide so let's talk about your

315
00:12:30,150 --> 00:12:35,250
services here so there are a number of

316
00:12:33,570 --> 00:12:36,840
different Azure services that are out

317
00:12:35,250 --> 00:12:39,750
there there are way too many to talk

318
00:12:36,840 --> 00:12:43,410
about today we have relatively limited

319
00:12:39,750 --> 00:12:45,530
time here but this is a rough count of

320
00:12:43,410 --> 00:12:47,579
the ones that we're going to talk about

321
00:12:45,530 --> 00:12:49,199
primarily we're gonna be looking at

322
00:12:47,580 --> 00:12:51,480
Afeni kated services that we can

323
00:12:49,200 --> 00:12:53,910
identify and unauthenticated services we

324
00:12:51,480 --> 00:12:55,560
can identify so as an attacker I want

325
00:12:53,910 --> 00:12:57,990
things that I can potentially attack

326
00:12:55,560 --> 00:12:59,640
unauthenticated enumerate different

327
00:12:57,990 --> 00:13:01,560
services without authentication without

328
00:12:59,640 --> 00:13:03,090
those Active Directory domain

329
00:13:01,560 --> 00:13:04,560
credentials and once we are

330
00:13:03,090 --> 00:13:06,230
authenticated I want to be able to list

331
00:13:04,560 --> 00:13:09,510
out all of the different important

332
00:13:06,230 --> 00:13:10,980
services that are enabled and stuff that

333
00:13:09,510 --> 00:13:13,830
we might be able to use for lateral

334
00:13:10,980 --> 00:13:15,540
movement pivoting anything like that so

335
00:13:13,830 --> 00:13:18,840
this is kind of a rough overview of some

336
00:13:15,540 --> 00:13:20,400
of the ones we're gonna talk about but

337
00:13:18,840 --> 00:13:23,100
first things first we'll talk about a

338
00:13:20,400 --> 00:13:24,449
juror Active Directory or Azure ad and

339
00:13:23,100 --> 00:13:28,170
the primary things that we care about

340
00:13:24,450 --> 00:13:29,640
here are users and groups really is your

341
00:13:28,170 --> 00:13:35,370
Active Directory is just like regular

342
00:13:29,640 --> 00:13:36,569
Active Directory thank you in most

343
00:13:35,370 --> 00:13:39,270
environments that we're dealing with

344
00:13:36,570 --> 00:13:41,130
people are doing something called a der

345
00:13:39,270 --> 00:13:45,300
sink or Active Directory sync up to

346
00:13:41,130 --> 00:13:46,920
Azure ad to basically sync up all of

347
00:13:45,300 --> 00:13:50,430
their Active Directory users and groups

348
00:13:46,920 --> 00:13:52,110
to a juror so that you can you know make

349
00:13:50,430 --> 00:13:54,569
use of those existing Active Directory

350
00:13:52,110 --> 00:13:56,340
users and groups so within that we want

351
00:13:54,570 --> 00:13:58,410
to dump out tons of information to start

352
00:13:56,340 --> 00:14:00,450
attacking other users in the environment

353
00:13:58,410 --> 00:14:02,040
so additional recon info including

354
00:14:00,450 --> 00:14:03,900
things like phone numbers so let's say

355
00:14:02,040 --> 00:14:05,310
we compromised that external environment

356
00:14:03,900 --> 00:14:06,660
when I start doing phone based social

357
00:14:05,310 --> 00:14:09,508
engineering to get

358
00:14:06,660 --> 00:14:11,610
way into internal systems likewise with

359
00:14:09,509 --> 00:14:14,250
phishing we can pull out email addresses

360
00:14:11,610 --> 00:14:17,009
from Active Directory start phishing

361
00:14:14,250 --> 00:14:19,319
attacks that way taking a look at

362
00:14:17,009 --> 00:14:22,529
enrolled devices this one's really fun

363
00:14:19,319 --> 00:14:24,660
because lots of Azure Active Directory

364
00:14:22,529 --> 00:14:27,060
environments are now allowing kind of

365
00:14:24,660 --> 00:14:29,189
asset management options within your

366
00:14:27,060 --> 00:14:31,349
Active Directory so you can you know

367
00:14:29,189 --> 00:14:33,149
track an asset to a specific person so I

368
00:14:31,350 --> 00:14:34,589
can look up a specific domain

369
00:14:33,149 --> 00:14:37,199
administrator and know what the host

370
00:14:34,589 --> 00:14:38,699
name of their system is so once we pivot

371
00:14:37,199 --> 00:14:40,469
to the internal network we know exactly

372
00:14:38,699 --> 00:14:42,258
where that domain admins computer is

373
00:14:40,470 --> 00:14:45,990
going to be already of the host name

374
00:14:42,259 --> 00:14:48,540
pretty convenient third-party apps this

375
00:14:45,990 --> 00:14:50,550
is the last line down here as well

376
00:14:48,540 --> 00:14:52,829
accessing third-party apps for practical

377
00:14:50,550 --> 00:14:54,870
examples one of the things that we can

378
00:14:52,829 --> 00:14:59,279
pull out of Azure Active Directory is

379
00:14:54,870 --> 00:15:03,449
the list of integrated SSO endpoints so

380
00:14:59,279 --> 00:15:04,829
things like AWS or WebEx or any like HR

381
00:15:03,449 --> 00:15:07,170
expensing software that you may have

382
00:15:04,829 --> 00:15:09,660
that single sign-on so where basically

383
00:15:07,170 --> 00:15:12,719
you go out to the website to put in your

384
00:15:09,660 --> 00:15:14,069
HR or expense information that's going

385
00:15:12,720 --> 00:15:17,220
to be tied back to your Active Directory

386
00:15:14,069 --> 00:15:18,990
or ad FS and we can list out all of the

387
00:15:17,220 --> 00:15:20,430
integrations there so if you're on a Red

388
00:15:18,990 --> 00:15:22,920
Team assessment and need to get access

389
00:15:20,430 --> 00:15:25,649
to the HR Payroll data you know exactly

390
00:15:22,920 --> 00:15:28,829
where that URL is to access that so

391
00:15:25,649 --> 00:15:32,040
that's really handy it's a good way of

392
00:15:28,829 --> 00:15:33,779
showing impact or potential impact the

393
00:15:32,040 --> 00:15:35,790
one thing I haven't covered on here is

394
00:15:33,779 --> 00:15:37,019
guest users as your Active Directory has

395
00:15:35,790 --> 00:15:39,810
a really interesting feature where you

396
00:15:37,019 --> 00:15:42,899
can add external domain users to your

397
00:15:39,810 --> 00:15:45,268
Active Directory domain so I could go

398
00:15:42,899 --> 00:15:47,579
ahead and add my at net spy com email

399
00:15:45,269 --> 00:15:50,459
address to another Azure Active

400
00:15:47,579 --> 00:15:53,609
Directory domain as a guest user you can

401
00:15:50,459 --> 00:15:56,130
also apply these same types of users and

402
00:15:53,610 --> 00:15:58,500
groups policies to give myself say owner

403
00:15:56,130 --> 00:16:00,029
rights to the subscription and keep

404
00:15:58,500 --> 00:16:02,639
persistent access because if they're not

405
00:16:00,029 --> 00:16:04,559
looking at the specific guest users well

406
00:16:02,639 --> 00:16:06,809
there's potential there's persistence

407
00:16:04,559 --> 00:16:10,550
there and somebody could persist access

408
00:16:06,809 --> 00:16:10,550
so those are pretty handy

409
00:16:11,050 --> 00:16:15,620
so storage accounts we're gonna give

410
00:16:13,819 --> 00:16:18,589
this two seconds to let it bump ahead

411
00:16:15,620 --> 00:16:21,370
and then jump back but storage accounts

412
00:16:18,589 --> 00:16:24,500
are really the way of storing data

413
00:16:21,370 --> 00:16:26,149
within a juror there's a number of

414
00:16:24,500 --> 00:16:27,620
different data types that are supported

415
00:16:26,149 --> 00:16:29,449
within these storage accounts but you

416
00:16:27,620 --> 00:16:33,050
can think of it this way storage

417
00:16:29,449 --> 00:16:36,079
accounts start with the name the type of

418
00:16:33,050 --> 00:16:37,370
data type and then cor windows net so in

419
00:16:36,079 --> 00:16:40,489
this case we've got a storage account

420
00:16:37,370 --> 00:16:42,470
name that's by issuer the service is any

421
00:16:40,490 --> 00:16:44,240
number of these names here so let's say

422
00:16:42,470 --> 00:16:46,759
the blob service this would be nets by a

423
00:16:44,240 --> 00:16:48,589
juror that blob dot cored out windows

424
00:16:46,759 --> 00:16:50,269
that net blob is kind of the

425
00:16:48,589 --> 00:16:52,939
unstructured data you can think of it

426
00:16:50,269 --> 00:16:54,439
like s3 buckets for a juror you can

427
00:16:52,939 --> 00:16:56,089
basically just put whatever data you

428
00:16:54,439 --> 00:16:57,469
want in there and there's containers you

429
00:16:56,089 --> 00:16:59,870
can apply policies to the different

430
00:16:57,470 --> 00:17:01,970
folders to give people access actually

431
00:16:59,870 --> 00:17:05,630
talk about that access policy and the

432
00:17:01,970 --> 00:17:08,510
next screenshot here but this can also

433
00:17:05,630 --> 00:17:09,909
be easily misconfigured so when you're

434
00:17:08,510 --> 00:17:12,109
setting up permissions for things

435
00:17:09,909 --> 00:17:16,069
administrators need to give access to

436
00:17:12,109 --> 00:17:18,168
things to people so you know I go for

437
00:17:16,069 --> 00:17:20,089
the things that work so container access

438
00:17:18,169 --> 00:17:21,919
is anonymous access for everybody read

439
00:17:20,089 --> 00:17:24,799
access everything you can list out files

440
00:17:21,919 --> 00:17:28,520
and access any of the files there in the

441
00:17:24,799 --> 00:17:30,440
container permission container so we

442
00:17:28,520 --> 00:17:31,970
frequently find that with containers

443
00:17:30,440 --> 00:17:35,030
that are just set up and publicly

444
00:17:31,970 --> 00:17:37,900
available so if we step back one step

445
00:17:35,030 --> 00:17:40,879
here what we would do is look up a

446
00:17:37,900 --> 00:17:43,159
storage account trying DNS brute force

447
00:17:40,880 --> 00:17:46,280
for one of these storage accounts look

448
00:17:43,159 --> 00:17:48,799
at the blobs and enumerate folders from

449
00:17:46,280 --> 00:17:51,590
there so let's say it's net spy as your

450
00:17:48,799 --> 00:17:53,658
blob Corti windows at net after that we

451
00:17:51,590 --> 00:17:56,059
would start guessing folder names here

452
00:17:53,659 --> 00:17:58,700
we've got a script that we reference on

453
00:17:56,059 --> 00:18:01,250
the blog post down here that you can do

454
00:17:58,700 --> 00:18:03,770
anonymous blob enumeration so what we do

455
00:18:01,250 --> 00:18:06,020
with that is a DNS brute force on that

456
00:18:03,770 --> 00:18:09,350
storage account and then try and look

457
00:18:06,020 --> 00:18:11,539
for specific containers after that so we

458
00:18:09,350 --> 00:18:15,469
find very common names for folders or

459
00:18:11,539 --> 00:18:17,539
containers test dev email all sorts of

460
00:18:15,470 --> 00:18:19,460
just very common names and you can

461
00:18:17,539 --> 00:18:22,010
basically throw you know a directory

462
00:18:19,460 --> 00:18:23,990
attack and grab your favorite list of

463
00:18:22,010 --> 00:18:27,260
rector ease and throw that in for

464
00:18:23,990 --> 00:18:29,450
potential folders for the containers if

465
00:18:27,260 --> 00:18:31,760
any of those have public access enabled

466
00:18:29,450 --> 00:18:33,410
or container access enabled we'll then

467
00:18:31,760 --> 00:18:37,220
go ahead and just list out all of the

468
00:18:33,410 --> 00:18:39,860
publicly available files this is kind of

469
00:18:37,220 --> 00:18:41,630
where we're at with the open s3 buckets

470
00:18:39,860 --> 00:18:43,459
from what three four years ago where

471
00:18:41,630 --> 00:18:45,380
lots of public data was just spilling

472
00:18:43,460 --> 00:18:49,130
everywhere we're seeing lots of similar

473
00:18:45,380 --> 00:18:52,100
problems with Azure blob security if

474
00:18:49,130 --> 00:18:55,900
you're able to find a blob storage

475
00:18:52,100 --> 00:18:57,919
container that's fully open chances are

476
00:18:55,900 --> 00:18:59,890
all the different files and see

477
00:18:57,920 --> 00:19:03,640
everything that's there so it's

478
00:18:59,890 --> 00:19:05,840
surprisingly common we find config files

479
00:19:03,640 --> 00:19:07,250
VHD files which we'll talk about in the

480
00:19:05,840 --> 00:19:09,879
example but there are virtual hard drive

481
00:19:07,250 --> 00:19:12,680
files you come out those in hyper-v and

482
00:19:09,880 --> 00:19:16,490
we'll show a full walkthrough an example

483
00:19:12,680 --> 00:19:19,640
here it's kind of fun but found some PII

484
00:19:16,490 --> 00:19:25,850
password data you can also use these for

485
00:19:19,640 --> 00:19:27,410
hosting payloads so that's my blog cored

486
00:19:25,850 --> 00:19:30,230
out windows that net the end of that is

487
00:19:27,410 --> 00:19:32,660
windows.net and you can access that over

488
00:19:30,230 --> 00:19:35,720
HTTPS that SSL certificate is signed by

489
00:19:32,660 --> 00:19:37,820
Microsoft so this all looks pretty

490
00:19:35,720 --> 00:19:41,180
legitimate if you send somebody out to a

491
00:19:37,820 --> 00:19:43,790
Windows net web site to download and run

492
00:19:41,180 --> 00:19:45,740
an executable or whatever file you want

493
00:19:43,790 --> 00:19:47,840
so we've actually had pretty good luck

494
00:19:45,740 --> 00:19:50,360
with fishing engagements where the link

495
00:19:47,840 --> 00:19:52,340
is out to blob storage because we can

496
00:19:50,360 --> 00:19:54,919
make that publicly available and host

497
00:19:52,340 --> 00:19:56,480
payloads out there and if anybody's

498
00:19:54,920 --> 00:19:58,370
worried about like oh but if I keep my

499
00:19:56,480 --> 00:20:00,650
payload out there you know Microsoft

500
00:19:58,370 --> 00:20:04,340
will capture it I've had copies of like

501
00:20:00,650 --> 00:20:06,470
me me cats and other like reverse tools

502
00:20:04,340 --> 00:20:10,399
sitting in a storage container for your

503
00:20:06,470 --> 00:20:12,080
now so I haven't gotten an email or any

504
00:20:10,400 --> 00:20:15,340
notification hey you might have malware

505
00:20:12,080 --> 00:20:18,740
up in your blog or up in your blobs so

506
00:20:15,340 --> 00:20:21,199
it's worked out pretty well so another

507
00:20:18,740 --> 00:20:23,450
service that we're commonly seen used is

508
00:20:21,200 --> 00:20:26,360
as your sequel so it's Microsoft sequel

509
00:20:23,450 --> 00:20:28,580
up in the cloud sure sequel is really

510
00:20:26,360 --> 00:20:29,899
handy for you know just having your

511
00:20:28,580 --> 00:20:32,530
database out in the cloud if you're

512
00:20:29,900 --> 00:20:34,750
gonna host everything out there however

513
00:20:32,530 --> 00:20:37,080
you know when you see cases where people

514
00:20:34,750 --> 00:20:39,250
just open up the firewall rules to the

515
00:20:37,080 --> 00:20:41,860
actual database and it's just wide open

516
00:20:39,250 --> 00:20:43,300
to the internet it's actually kind of

517
00:20:41,860 --> 00:20:45,580
hard to do you have to set your IP

518
00:20:43,300 --> 00:20:48,930
address range that's allowed to a pretty

519
00:20:45,580 --> 00:20:50,980
wide range to allow it but we've seen it

520
00:20:48,930 --> 00:20:52,810
typically in development environments

521
00:20:50,980 --> 00:20:54,850
where you've got you know a team that's

522
00:20:52,810 --> 00:20:56,620
separated across you know different time

523
00:20:54,850 --> 00:20:58,030
zones or different IP spaces or might be

524
00:20:56,620 --> 00:21:00,189
working from different coffee shops that

525
00:20:58,030 --> 00:21:01,780
kind of thing but we've seen it where

526
00:21:00,190 --> 00:21:04,360
it's you know pretty widely open on the

527
00:21:01,780 --> 00:21:06,129
firewall rules and you can access that

528
00:21:04,360 --> 00:21:08,500
directly with sequel management studio

529
00:21:06,130 --> 00:21:10,480
you basically just point it at the azure

530
00:21:08,500 --> 00:21:12,670
sequel database and you can go ahead and

531
00:21:10,480 --> 00:21:14,470
try and log in we've seen it set up with

532
00:21:12,670 --> 00:21:17,050
you know common dev environment problems

533
00:21:14,470 --> 00:21:20,020
of weak sa passwords or just weak

534
00:21:17,050 --> 00:21:21,639
credentials in general we've also made

535
00:21:20,020 --> 00:21:24,940
use of it as the commanding control

536
00:21:21,640 --> 00:21:27,280
platform so you could just go ahead and

537
00:21:24,940 --> 00:21:29,860
use Azure sequel database tables and

538
00:21:27,280 --> 00:21:31,540
some PowerShell to basically send

539
00:21:29,860 --> 00:21:33,129
command and control because again we're

540
00:21:31,540 --> 00:21:35,320
going out to a trusted Windows domain

541
00:21:33,130 --> 00:21:37,510
and we're just making Microsoft sequel

542
00:21:35,320 --> 00:21:39,790
traffic throughs going out over the

543
00:21:37,510 --> 00:21:41,320
Internet but if you're a major shop

544
00:21:39,790 --> 00:21:43,659
there's a chance that you might actually

545
00:21:41,320 --> 00:21:46,270
be using Azure sequel for legitimate

546
00:21:43,660 --> 00:21:49,090
uses so my co-workers Scott Sutherland

547
00:21:46,270 --> 00:21:52,590
who put together a PowerShell toolkit

548
00:21:49,090 --> 00:21:54,760
called powerup sequel for attacking

549
00:21:52,590 --> 00:21:56,919
Microsoft sequel databases using

550
00:21:54,760 --> 00:21:59,500
PowerShell tools he put together a

551
00:21:56,920 --> 00:22:03,250
really great bro great blog post about

552
00:21:59,500 --> 00:22:06,130
using sequel as a c2 platform so you can

553
00:22:03,250 --> 00:22:09,420
check that out on the net spy block you

554
00:22:06,130 --> 00:22:12,070
can also access this directly from the

555
00:22:09,420 --> 00:22:13,150
Microsoft Azure portal there's a couple

556
00:22:12,070 --> 00:22:14,590
of different spots where you can pull

557
00:22:13,150 --> 00:22:16,870
credentials which we'll talk about later

558
00:22:14,590 --> 00:22:18,730
on but if you pull those connection

559
00:22:16,870 --> 00:22:20,229
strings and get access to the azure

560
00:22:18,730 --> 00:22:23,920
sequel database you actually just use

561
00:22:20,230 --> 00:22:26,140
the direct sequel query functionality

562
00:22:23,920 --> 00:22:27,700
within the Microsoft portal and just

563
00:22:26,140 --> 00:22:30,190
query the database directly from the

564
00:22:27,700 --> 00:22:33,519
website so it's also pretty handy

565
00:22:30,190 --> 00:22:36,070
oh I mentioned that from a operational

566
00:22:33,519 --> 00:22:38,590
security standpoint so if you don't want

567
00:22:36,070 --> 00:22:40,600
to open up firewall rules to your IP

568
00:22:38,590 --> 00:22:42,100
address to connect with sequel

569
00:22:40,600 --> 00:22:43,389
management studio you can just go

570
00:22:42,100 --> 00:22:44,799
through the website and then you don't

571
00:22:43,389 --> 00:22:46,178
have to open up any firewall rules or

572
00:22:44,799 --> 00:22:48,399
anything like that you can just log in

573
00:22:46,179 --> 00:22:52,269
with the creds you have so that's

574
00:22:48,399 --> 00:22:53,350
convenient so in terms of passwords

575
00:22:52,269 --> 00:22:55,809
there's a number of different places

576
00:22:53,350 --> 00:22:59,110
that passwords hide out in as your

577
00:22:55,809 --> 00:23:01,149
primary one being key volts so key volts

578
00:22:59,110 --> 00:23:04,418
or you know what's the name applies able

579
00:23:01,149 --> 00:23:07,059
for keys we find keys certificates

580
00:23:04,419 --> 00:23:08,529
passwords all sorts of interesting stuff

581
00:23:07,059 --> 00:23:10,960
means stored in key vaults typically

582
00:23:08,529 --> 00:23:13,629
access on that is pretty restricted you

583
00:23:10,960 --> 00:23:15,460
may have to grant yourself access with

584
00:23:13,629 --> 00:23:17,769
any accounts that you have in order to

585
00:23:15,460 --> 00:23:18,909
actually pull out data from that but if

586
00:23:17,769 --> 00:23:20,799
you do have an account that does have

587
00:23:18,909 --> 00:23:22,690
access to the key vaults this can be

588
00:23:20,799 --> 00:23:24,220
really convenient for getting you know

589
00:23:22,690 --> 00:23:25,899
password data or certificate data

590
00:23:24,220 --> 00:23:29,320
anything that might be handy for

591
00:23:25,899 --> 00:23:30,969
pivoting in the environment additionally

592
00:23:29,320 --> 00:23:31,928
app service configurations what I was

593
00:23:30,970 --> 00:23:34,240
talking about with the database

594
00:23:31,929 --> 00:23:37,659
connection strings app services is

595
00:23:34,240 --> 00:23:39,429
basically a gorge dynamic application

596
00:23:37,659 --> 00:23:41,860
management platform so if you want to

597
00:23:39,429 --> 00:23:44,379
deploy your web code out to a web server

598
00:23:41,860 --> 00:23:46,959
in Azure you just pointed at the

599
00:23:44,379 --> 00:23:48,639
repository for the code and say hey run

600
00:23:46,960 --> 00:23:50,559
the web server run this code it's really

601
00:23:48,639 --> 00:23:52,330
simple you can figure it with these app

602
00:23:50,559 --> 00:23:54,269
service configurations which include

603
00:23:52,330 --> 00:23:57,490
things like deployment credentials so

604
00:23:54,269 --> 00:24:00,759
where you upload the code to over either

605
00:23:57,490 --> 00:24:02,559
HTTP or FTP you can pull those

606
00:24:00,759 --> 00:24:04,690
deployment credentials out of what's

607
00:24:02,559 --> 00:24:06,850
called the publishing profile within a

608
00:24:04,690 --> 00:24:08,649
door and you can go ahead and put your

609
00:24:06,850 --> 00:24:11,139
own web shell up there or run your own

610
00:24:08,649 --> 00:24:13,959
code on the web server or do lots of

611
00:24:11,139 --> 00:24:17,529
other interesting things so I've written

612
00:24:13,960 --> 00:24:19,509
the git as your passwords module within

613
00:24:17,529 --> 00:24:21,100
microburst here that will go out to the

614
00:24:19,509 --> 00:24:23,110
key vaults pull that information down

615
00:24:21,100 --> 00:24:25,629
app service configs do the same thing

616
00:24:23,110 --> 00:24:28,629
and also do something with automation

617
00:24:25,629 --> 00:24:31,299
accounts so automation accounts are a

618
00:24:28,629 --> 00:24:32,740
jurors way of automating different tasks

619
00:24:31,299 --> 00:24:34,210
within the issuer environment and you

620
00:24:32,740 --> 00:24:36,580
can configure these with specific

621
00:24:34,210 --> 00:24:39,639
credentials you can also get access to

622
00:24:36,580 --> 00:24:42,570
these credentials relatively easily you

623
00:24:39,639 --> 00:24:45,000
create a PowerShell script upload it to

624
00:24:42,570 --> 00:24:49,500
a runbook within power within as your

625
00:24:45,000 --> 00:24:51,149
and the script is right here we can see

626
00:24:49,500 --> 00:24:52,889
that we're just gonna get the username

627
00:24:51,149 --> 00:24:54,389
for the credential the password for the

628
00:24:52,889 --> 00:24:57,809
credential and just write them out

629
00:24:54,389 --> 00:25:01,139
really simple like this is super simple

630
00:24:57,809 --> 00:25:03,269
but we're basically gonna upload that

631
00:25:01,139 --> 00:25:05,189
PowerShell script up to a run book in

632
00:25:03,269 --> 00:25:07,529
the environment run it get the

633
00:25:05,190 --> 00:25:10,380
credentials and delete the automation

634
00:25:07,529 --> 00:25:12,929
script after the fact so what we can see

635
00:25:10,380 --> 00:25:15,360
here is there's this kind of random I

636
00:25:12,929 --> 00:25:18,990
think it's 12 character string right

637
00:25:15,360 --> 00:25:20,850
here for the ps1 run book what the get

638
00:25:18,990 --> 00:25:22,889
is your password script does is it

639
00:25:20,850 --> 00:25:26,668
writes that script that we just saw to a

640
00:25:22,889 --> 00:25:29,490
randomly named ps1 file uploads it runs

641
00:25:26,669 --> 00:25:31,679
it and deletes it and then all that you

642
00:25:29,490 --> 00:25:33,539
see in the logs up and insurer is just

643
00:25:31,679 --> 00:25:35,519
this random string here and you maybe

644
00:25:33,539 --> 00:25:37,500
think well maybe Microsoft ran something

645
00:25:35,519 --> 00:25:39,149
in the background or this just seems

646
00:25:37,500 --> 00:25:41,279
like randomly named garbage it's kind of

647
00:25:39,149 --> 00:25:43,559
hard to tell what this is you can't pull

648
00:25:41,279 --> 00:25:46,590
down the PowerShell runbook after the

649
00:25:43,559 --> 00:25:48,389
fact it's gone it's already run and it's

650
00:25:46,590 --> 00:25:51,449
pretty much done at that point so it's

651
00:25:48,389 --> 00:25:52,889
not the most OPSEC safe but it can be

652
00:25:51,450 --> 00:25:56,840
really handy if you need to get access

653
00:25:52,889 --> 00:25:56,840
to those automation creds

654
00:25:59,420 --> 00:26:05,370
all right so

655
00:26:02,700 --> 00:26:07,530
let's see if it bounces ahead here all

656
00:26:05,370 --> 00:26:09,959
right there we go so just a quick note

657
00:26:07,530 --> 00:26:11,700
on microburst it is a PowerShell tool

658
00:26:09,960 --> 00:26:14,550
kit it's lots of different PowerShell

659
00:26:11,700 --> 00:26:16,350
files to import all of those make use of

660
00:26:14,550 --> 00:26:19,919
them you can use the import module

661
00:26:16,350 --> 00:26:21,719
command and point it at the PS m1 file

662
00:26:19,920 --> 00:26:23,790
and that will load up all of the

663
00:26:21,720 --> 00:26:25,680
available commands that we have within

664
00:26:23,790 --> 00:26:27,180
microburst so a couple of different

665
00:26:25,680 --> 00:26:31,980
command examples we'll go through those

666
00:26:27,180 --> 00:26:33,480
in the demo here but I would just

667
00:26:31,980 --> 00:26:35,610
recommend with most of them using the

668
00:26:33,480 --> 00:26:37,290
verbose flag I like using right verbose

669
00:26:35,610 --> 00:26:39,570
because then you can kind of see what's

670
00:26:37,290 --> 00:26:43,590
going on otherwise not outputting a

671
00:26:39,570 --> 00:26:45,800
whole lot of the data there but with all

672
00:26:43,590 --> 00:26:49,919
of these I think we'll have examples so

673
00:26:45,800 --> 00:26:51,960
we'll just go through those so getting

674
00:26:49,920 --> 00:26:54,180
into our demo here just making sure

675
00:26:51,960 --> 00:26:56,250
we're good on time here all right so

676
00:26:54,180 --> 00:26:59,610
this is gonna be a sample escalation

677
00:26:56,250 --> 00:27:01,500
from anonymous access basically you

678
00:26:59,610 --> 00:27:03,659
don't see anything we're starting with

679
00:27:01,500 --> 00:27:06,780
no credentials we're gonna find an

680
00:27:03,660 --> 00:27:08,400
anonymously available blob download that

681
00:27:06,780 --> 00:27:10,710
file and then kind of pivot from there

682
00:27:08,400 --> 00:27:12,090
you're gonna see all of this this is

683
00:27:10,710 --> 00:27:14,610
more so if anybody wants to see the

684
00:27:12,090 --> 00:27:16,830
slides later go through these the videos

685
00:27:14,610 --> 00:27:21,379
aren't gonna be up on SlideShare so this

686
00:27:16,830 --> 00:27:25,320
is kind of the rundown of that so

687
00:27:21,380 --> 00:27:27,120
autoplay here it probably won't because

688
00:27:25,320 --> 00:27:29,429
I get rid of the timings there we go

689
00:27:27,120 --> 00:27:33,750
alright so what we're doing here is

690
00:27:29,430 --> 00:27:36,270
using the invoke alright invoke

691
00:27:33,750 --> 00:27:38,490
enumerate as your blobs with the base of

692
00:27:36,270 --> 00:27:40,710
microburst so it found a storage account

693
00:27:38,490 --> 00:27:44,060
called microburst blob quartet

694
00:27:40,710 --> 00:27:46,470
windows.net and it's gonna find a test

695
00:27:44,060 --> 00:27:49,860
container within there and within that

696
00:27:46,470 --> 00:27:51,750
container we've got a public VHD file so

697
00:27:49,860 --> 00:27:54,360
VHDs or virtual hard disk this is

698
00:27:51,750 --> 00:27:56,490
basically the file format that Microsoft

699
00:27:54,360 --> 00:27:58,320
uses for these virtual hard drives that

700
00:27:56,490 --> 00:28:00,750
you run virtual machines in the door

701
00:27:58,320 --> 00:28:02,669
with these are great they're very

702
00:28:00,750 --> 00:28:05,340
portable you can store them in different

703
00:28:02,670 --> 00:28:07,950
storage accounts different areas you can

704
00:28:05,340 --> 00:28:10,379
create them as kind of gold images this

705
00:28:07,950 --> 00:28:12,510
is frequently what we see with these VHD

706
00:28:10,380 --> 00:28:14,430
files is somebody's created a gold image

707
00:28:12,510 --> 00:28:14,980
that they want to build all of their

708
00:28:14,430 --> 00:28:17,140
Azure

709
00:28:14,980 --> 00:28:18,669
drill machines off of then they make it

710
00:28:17,140 --> 00:28:20,200
publicly available within a container

711
00:28:18,669 --> 00:28:22,750
and then we download it and get access

712
00:28:20,200 --> 00:28:24,160
to it if you want to play around with

713
00:28:22,750 --> 00:28:27,850
this yourself I would recommend using

714
00:28:24,160 --> 00:28:30,640
the small disc all one word small disc

715
00:28:27,850 --> 00:28:33,010
images for tape windows because those

716
00:28:30,640 --> 00:28:34,540
are only I think those are 32 gigs

717
00:28:33,010 --> 00:28:37,210
compared to the standard hundred and

718
00:28:34,540 --> 00:28:39,159
twenty gig as your virtual machines it's

719
00:28:37,210 --> 00:28:42,220
a lot easier to download 32 gigs from a

720
00:28:39,160 --> 00:28:43,390
VHD file than it is 120 so if you're

721
00:28:42,220 --> 00:28:45,309
gonna play around with these and do this

722
00:28:43,390 --> 00:28:48,280
yourself I would recommend using those I

723
00:28:45,309 --> 00:28:50,799
will also say all of this is done in

724
00:28:48,280 --> 00:28:52,899
videos I initially recorded these for

725
00:28:50,799 --> 00:28:54,520
derbycon a few weeks ago I've burned

726
00:28:52,900 --> 00:28:56,410
this entire environment down to the

727
00:28:54,520 --> 00:28:58,000
ground because I figured well if I'm

728
00:28:56,410 --> 00:29:01,120
instructing people on how to attack my

729
00:28:58,000 --> 00:29:03,280
issue or a sample domain up here

730
00:29:01,120 --> 00:29:07,570
probably need to get rid of that after I

731
00:29:03,280 --> 00:29:10,000
make all this stuff public so yeah I

732
00:29:07,570 --> 00:29:13,750
think that covers that so let's see if

733
00:29:10,000 --> 00:29:16,179
we can bypass that jump there so what

734
00:29:13,750 --> 00:29:17,740
we're gonna do here is paste the URL

735
00:29:16,179 --> 00:29:20,380
that we just saw in the last script

736
00:29:17,740 --> 00:29:22,570
there I'm not gonna make you wait and

737
00:29:20,380 --> 00:29:25,510
watch 32 gigs download here so we're

738
00:29:22,570 --> 00:29:27,309
gonna fast forward in time and there's

739
00:29:25,510 --> 00:29:29,410
our test VHD files so if you right-click

740
00:29:27,309 --> 00:29:30,639
and mount within Windows it's really

741
00:29:29,410 --> 00:29:33,669
convenient because you can just mount

742
00:29:30,640 --> 00:29:36,040
the VHD file what we'll see here is hey

743
00:29:33,669 --> 00:29:37,690
it's a standard Windows hard drive open

744
00:29:36,040 --> 00:29:40,418
up the windows folder cool

745
00:29:37,690 --> 00:29:42,340
so from there we want to get the local

746
00:29:40,419 --> 00:29:44,740
admin credentials so we're gonna use

747
00:29:42,340 --> 00:29:46,928
Cain and Abel to pull up the system and

748
00:29:44,740 --> 00:29:48,010
Sam files if anybody's familiar with

749
00:29:46,929 --> 00:29:50,679
this they've probably done this a few

750
00:29:48,010 --> 00:29:53,110
times but basically we're gonna grab the

751
00:29:50,679 --> 00:29:55,390
local cred store off of that Windows

752
00:29:53,110 --> 00:29:59,168
hard drive along with the boot key for

753
00:29:55,390 --> 00:30:01,390
it to decrypt it and pull back the local

754
00:29:59,169 --> 00:30:04,290
administrator credentials so in this

755
00:30:01,390 --> 00:30:08,200
case we're gonna get the ntlm hash for

756
00:30:04,290 --> 00:30:10,750
it'll show up in a second the AZ

757
00:30:08,200 --> 00:30:13,150
administrator account we see the NT hash

758
00:30:10,750 --> 00:30:14,350
on the right there so there's a couple

759
00:30:13,150 --> 00:30:17,950
of different things we can do at this

760
00:30:14,350 --> 00:30:20,049
point we'd go ahead and crack it throw

761
00:30:17,950 --> 00:30:22,600
it in a hash cat we crack that one it's

762
00:30:20,049 --> 00:30:24,379
AZ - admin pass with an exclamation mark

763
00:30:22,600 --> 00:30:26,449
okay

764
00:30:24,380 --> 00:30:30,040
I'm kind of making it easy on myself

765
00:30:26,450 --> 00:30:34,100
because I created that password but

766
00:30:30,040 --> 00:30:36,170
anyways if you know that's the situation

767
00:30:34,100 --> 00:30:37,730
we're able to crack that we could just

768
00:30:36,170 --> 00:30:40,850
go ahead and load up that virtual hard

769
00:30:37,730 --> 00:30:42,650
disk in hyper-v and login ourselves so

770
00:30:40,850 --> 00:30:44,679
we can see here with nice little who am

771
00:30:42,650 --> 00:30:47,270
i down here we're logged in as that user

772
00:30:44,680 --> 00:30:49,580
loaded this up in the hyper-v manager

773
00:30:47,270 --> 00:30:51,800
and now we've got full access to that

774
00:30:49,580 --> 00:30:53,389
virtual hard drive cool there's lots of

775
00:30:51,800 --> 00:30:55,010
other things that you can do with full

776
00:30:53,390 --> 00:30:56,840
access to that you could just browse the

777
00:30:55,010 --> 00:30:58,790
files the look of things what's nice

778
00:30:56,840 --> 00:31:00,860
about this is once you've got full local

779
00:30:58,790 --> 00:31:02,810
admin access you can start you know

780
00:31:00,860 --> 00:31:04,340
using any applications that are on there

781
00:31:02,810 --> 00:31:06,830
so if it's a virtual machine that's used

782
00:31:04,340 --> 00:31:08,449
to run a client application or something

783
00:31:06,830 --> 00:31:09,770
like that you might be able to do the

784
00:31:08,450 --> 00:31:11,980
same things that you'd be able to do up

785
00:31:09,770 --> 00:31:15,170
in the cloud down on your local desktop

786
00:31:11,980 --> 00:31:17,630
so it's convenient but we kind of want

787
00:31:15,170 --> 00:31:20,030
to pivot up into the azure environment

788
00:31:17,630 --> 00:31:21,170
at that point so let's say that we knew

789
00:31:20,030 --> 00:31:24,889
a little bit more about the environment

790
00:31:21,170 --> 00:31:27,110
we knew the end point that the VM was

791
00:31:24,890 --> 00:31:28,130
pulled from if we have the IP address

792
00:31:27,110 --> 00:31:29,659
for it or hostname

793
00:31:28,130 --> 00:31:31,580
we could potentially find that out on

794
00:31:29,660 --> 00:31:33,590
the internet and RDP to it there's a

795
00:31:31,580 --> 00:31:35,629
surprising number of your virtual

796
00:31:33,590 --> 00:31:37,730
machines with management ports wide open

797
00:31:35,630 --> 00:31:38,840
to the Internet it's one of the default

798
00:31:37,730 --> 00:31:40,310
options that you can select when you

799
00:31:38,840 --> 00:31:42,350
create the virtual machine just say yeah

800
00:31:40,310 --> 00:31:44,389
I want RDP open to the world it warns

801
00:31:42,350 --> 00:31:46,100
you says hey you're you know setting up

802
00:31:44,390 --> 00:31:48,260
RDP open to the world you may not want

803
00:31:46,100 --> 00:31:51,139
to do this but it's something that's

804
00:31:48,260 --> 00:31:52,700
pretty easy to set out so let's say RDP

805
00:31:51,140 --> 00:31:54,950
is open we'll just go ahead and log in

806
00:31:52,700 --> 00:31:57,170
ran me me Katz hey we got access to a

807
00:31:54,950 --> 00:31:59,240
domain user for the Fossen domain

808
00:31:57,170 --> 00:32:01,400
previously we just have local admin

809
00:31:59,240 --> 00:32:04,130
rights now we're getting into the actual

810
00:32:01,400 --> 00:32:06,230
domain here so in this case Kay test is

811
00:32:04,130 --> 00:32:07,850
domain admin like I said I'm kind of

812
00:32:06,230 --> 00:32:09,560
stacking the deck here because this is

813
00:32:07,850 --> 00:32:11,300
my demo and it's easier to demo this

814
00:32:09,560 --> 00:32:13,909
stuff this is based off of real-world

815
00:32:11,300 --> 00:32:16,300
experience we've actually had experience

816
00:32:13,910 --> 00:32:18,590
it's like this where this has worked but

817
00:32:16,300 --> 00:32:20,840
let's say that RDP is not open

818
00:32:18,590 --> 00:32:24,080
everywhere well we can go ahead and grab

819
00:32:20,840 --> 00:32:27,409
the Sam security and system files and

820
00:32:24,080 --> 00:32:29,149
use the impact secret stump to go ahead

821
00:32:27,410 --> 00:32:31,280
and get the cached financials so we can

822
00:32:29,150 --> 00:32:33,650
see here that Kay test account on the

823
00:32:31,280 --> 00:32:35,810
Fossen calm domain we've got cached

824
00:32:33,650 --> 00:32:37,850
credentials here so this happened when

825
00:32:35,810 --> 00:32:40,700
that domain admin logged into the box

826
00:32:37,850 --> 00:32:42,379
and that was cached on the Windows

827
00:32:40,700 --> 00:32:44,780
system so we pulled that cache

828
00:32:42,380 --> 00:32:47,810
credential out and we go ahead and try

829
00:32:44,780 --> 00:32:50,300
and crack that so in this case I created

830
00:32:47,810 --> 00:32:51,649
this user as a domain admin in Azure

831
00:32:50,300 --> 00:32:54,740
Active Directory

832
00:32:51,650 --> 00:32:56,540
if you drop off all of the exclamation

833
00:32:54,740 --> 00:32:58,850
marks that's the password that Microsoft

834
00:32:56,540 --> 00:33:00,710
created for that user by default by

835
00:32:58,850 --> 00:33:03,469
default in Azure Active Directory if you

836
00:33:00,710 --> 00:33:05,990
let Microsoft manage that domain it will

837
00:33:03,470 --> 00:33:08,710
create an eight character password right

838
00:33:05,990 --> 00:33:11,030
off the bat it's upper/lower

839
00:33:08,710 --> 00:33:14,060
alphanumeric for the first four and then

840
00:33:11,030 --> 00:33:16,220
just numbers for the last four so like

841
00:33:14,060 --> 00:33:17,990
Carl one two three four might be an

842
00:33:16,220 --> 00:33:19,430
actual password there this is the

843
00:33:17,990 --> 00:33:21,380
password they gave me I put a couple

844
00:33:19,430 --> 00:33:24,350
exclamation marks onyx I needed to reset

845
00:33:21,380 --> 00:33:26,000
it a couple of times but in this case

846
00:33:24,350 --> 00:33:27,980
we're able to get the cache credential

847
00:33:26,000 --> 00:33:29,600
crack that now we've got domain

848
00:33:27,980 --> 00:33:32,840
credentials that we can then go log back

849
00:33:29,600 --> 00:33:35,530
into the azure portal or log in through

850
00:33:32,840 --> 00:33:38,540
PowerShell and start dumping information

851
00:33:35,530 --> 00:33:41,960
so with domain credentials we'll go

852
00:33:38,540 --> 00:33:45,100
ahead and connect the ORM account this

853
00:33:41,960 --> 00:33:48,260
is just more of the manual process of

854
00:33:45,100 --> 00:33:49,760
adding that account locally if you're

855
00:33:48,260 --> 00:33:50,960
running any of the microbrews tools it

856
00:33:49,760 --> 00:33:53,510
will prompt you if you're not already

857
00:33:50,960 --> 00:33:54,710
authenticated but for proof of concept

858
00:33:53,510 --> 00:33:57,950
here we want to show you that process

859
00:33:54,710 --> 00:34:00,080
this is the ADL login process here just

860
00:33:57,950 --> 00:34:02,480
put in the Kay test at fosston comm and

861
00:34:00,080 --> 00:34:05,960
the password we have hey we're logged in

862
00:34:02,480 --> 00:34:09,230
to my first demo cool so what we're

863
00:34:05,960 --> 00:34:12,190
gonna do here is dump the domain info so

864
00:34:09,230 --> 00:34:14,990
we're gonna select our subscription here

865
00:34:12,190 --> 00:34:17,570
and start dumping out all of these

866
00:34:14,989 --> 00:34:19,069
services and information so this

867
00:34:17,570 --> 00:34:20,690
specific script here is going to go

868
00:34:19,070 --> 00:34:22,820
through the subscription and dump out

869
00:34:20,690 --> 00:34:24,530
all of the users all of the groups all

870
00:34:22,820 --> 00:34:26,660
of the services are available basically

871
00:34:24,530 --> 00:34:28,280
general configuration information so you

872
00:34:26,659 --> 00:34:31,429
can get all of the information about

873
00:34:28,280 --> 00:34:33,080
what your attack surface area is I kind

874
00:34:31,429 --> 00:34:34,609
of left some of the password stuff out

875
00:34:33,080 --> 00:34:37,159
of here and kept that in to get

876
00:34:34,610 --> 00:34:38,570
passwords because wanted to separate the

877
00:34:37,159 --> 00:34:40,429
two in case you wanted to use this form

878
00:34:38,570 --> 00:34:42,380
or audit focused compared to pen test

879
00:34:40,429 --> 00:34:43,759
focus if you're doing more of an audit

880
00:34:42,380 --> 00:34:46,040
of your environment you probably don't

881
00:34:43,760 --> 00:34:47,390
want to dump all your passwords into the

882
00:34:46,040 --> 00:34:48,040
config data that you're also dumping

883
00:34:47,389 --> 00:34:51,350
here

884
00:34:48,040 --> 00:34:53,150
so I will say that this does run a

885
00:34:51,350 --> 00:34:55,759
little bit slow on larger environments

886
00:34:53,150 --> 00:34:57,620
if you're looking at 10,000 users in an

887
00:34:55,760 --> 00:34:59,300
Active Directory domain this could take

888
00:34:57,620 --> 00:35:01,009
quite a while to enumerate all of the

889
00:34:59,300 --> 00:35:02,360
users and groups because it'll go

890
00:35:01,010 --> 00:35:04,460
through every one of the groups and get

891
00:35:02,360 --> 00:35:06,670
each of the users for each group so

892
00:35:04,460 --> 00:35:10,100
there are flags on here to disable that

893
00:35:06,670 --> 00:35:12,230
here we're showing the output here so

894
00:35:10,100 --> 00:35:15,620
it's gonna output two text files and CSV

895
00:35:12,230 --> 00:35:17,990
files for easy parsing and easy data

896
00:35:15,620 --> 00:35:20,060
management but I will say if you're

897
00:35:17,990 --> 00:35:22,580
dealing with a very large environment I

898
00:35:20,060 --> 00:35:24,259
would recommend just disabling the users

899
00:35:22,580 --> 00:35:29,450
and groups because that might take quite

900
00:35:24,260 --> 00:35:38,690
a while so next thing that we're gonna

901
00:35:29,450 --> 00:35:39,740
do here is get these where passwords so

902
00:35:38,690 --> 00:35:43,700
we can see here that we're logged in

903
00:35:39,740 --> 00:35:47,209
this K test and running the get your

904
00:35:43,700 --> 00:35:48,890
passwords function within here with this

905
00:35:47,210 --> 00:35:50,600
one I definitely recommend outputting to

906
00:35:48,890 --> 00:35:52,580
grid view so you'll see the grid view

907
00:35:50,600 --> 00:35:56,150
output at the end of this but grid views

908
00:35:52,580 --> 00:35:58,160
that nice Oh grid view but it's a nice

909
00:35:56,150 --> 00:35:59,750
way of visualizing some of the data and

910
00:35:58,160 --> 00:36:02,000
it makes it easy for sorting and copying

911
00:35:59,750 --> 00:36:03,560
things out so we can see here it's

912
00:36:02,000 --> 00:36:05,920
grabbing the list of key vaults these

913
00:36:03,560 --> 00:36:11,000
your app services and running our

914
00:36:05,920 --> 00:36:12,770
randomly named ps1 file here and here's

915
00:36:11,000 --> 00:36:15,530
the out grid view so like I said this is

916
00:36:12,770 --> 00:36:17,330
really handy and like I also said I've

917
00:36:15,530 --> 00:36:18,920
burned down this entire environment so

918
00:36:17,330 --> 00:36:21,830
these passwords are gonna work now so

919
00:36:18,920 --> 00:36:23,000
it's okay if you guys see these but what

920
00:36:21,830 --> 00:36:24,560
we can see here is you know there's a

921
00:36:23,000 --> 00:36:26,750
number of different credentials here the

922
00:36:24,560 --> 00:36:29,480
automation account we've got some app

923
00:36:26,750 --> 00:36:33,050
service configs a secret up at the top

924
00:36:29,480 --> 00:36:34,130
with super-secret value so there's lots

925
00:36:33,050 --> 00:36:36,470
of good information that you can

926
00:36:34,130 --> 00:36:38,240
actually pull out of these but like I

927
00:36:36,470 --> 00:36:39,529
said key vaults are usually a little bit

928
00:36:38,240 --> 00:36:45,140
more locked down so your mileage may

929
00:36:39,530 --> 00:36:47,180
vary there all right so last item that

930
00:36:45,140 --> 00:36:49,670
we're gonna cover here in the demos is

931
00:36:47,180 --> 00:36:51,410
code execution now this is relatively

932
00:36:49,670 --> 00:36:53,060
new I'm gonna actually push the code for

933
00:36:51,410 --> 00:36:54,200
this within the next week or so here I'm

934
00:36:53,060 --> 00:36:56,740
just making some kind of last-minute

935
00:36:54,200 --> 00:36:58,419
tweaks to the

936
00:36:56,740 --> 00:37:01,359
and for the blogpost it's gonna go with

937
00:36:58,420 --> 00:37:03,940
this but this is a way to execute

938
00:37:01,360 --> 00:37:05,530
commands on all your virtual machines

939
00:37:03,940 --> 00:37:07,570
which might be kind of handy you can

940
00:37:05,530 --> 00:37:09,369
also limit it to individual

941
00:37:07,570 --> 00:37:12,010
subscriptions or individual resource

942
00:37:09,369 --> 00:37:14,050
groups or just a list of your virtual

943
00:37:12,010 --> 00:37:16,869
machines that you want to provide but

944
00:37:14,050 --> 00:37:19,930
sure is nice enough to include an invoke

945
00:37:16,869 --> 00:37:22,210
as your RM VM run command so it's a bit

946
00:37:19,930 --> 00:37:25,960
of a mouthful here but basically you can

947
00:37:22,210 --> 00:37:28,780
point the URM VM run command at a

948
00:37:25,960 --> 00:37:30,610
specific virtual machine and say hey run

949
00:37:28,780 --> 00:37:33,070
this PowerShell script and it will do

950
00:37:30,610 --> 00:37:35,020
that it does require contributor rights

951
00:37:33,070 --> 00:37:36,850
so somebody that has a little bit more

952
00:37:35,020 --> 00:37:39,220
access than a regular reader user

953
00:37:36,850 --> 00:37:42,160
however what we've been finding is

954
00:37:39,220 --> 00:37:43,569
development people will typically have

955
00:37:42,160 --> 00:37:44,859
contributor rights in the issuer

956
00:37:43,570 --> 00:37:46,690
environment because they need to spend

957
00:37:44,860 --> 00:37:48,820
up virtual machines they need to deploy

958
00:37:46,690 --> 00:37:50,500
code they typically have a little bit

959
00:37:48,820 --> 00:37:52,720
more access so if you get access to a

960
00:37:50,500 --> 00:37:55,960
developer account chances are you're

961
00:37:52,720 --> 00:37:58,330
gonna have contributor rights so the

962
00:37:55,960 --> 00:38:00,340
really nice thing about this is all of

963
00:37:58,330 --> 00:38:04,840
the commands actually execute as NT

964
00:38:00,340 --> 00:38:07,180
Authority system this is really bad like

965
00:38:04,840 --> 00:38:09,660
this is the most privileged you can get

966
00:38:07,180 --> 00:38:11,770
on a virtual machine and as you're here

967
00:38:09,660 --> 00:38:13,868
you're running a system you're running

968
00:38:11,770 --> 00:38:15,730
as the operating system it's great for

969
00:38:13,869 --> 00:38:17,290
us because if you know we want to run me

970
00:38:15,730 --> 00:38:19,330
me cats against all of the virtual

971
00:38:17,290 --> 00:38:21,759
machines it's pretty easy for us to do

972
00:38:19,330 --> 00:38:22,690
that because we're already system so in

973
00:38:21,760 --> 00:38:24,460
the demo we're gonna show we're gonna

974
00:38:22,690 --> 00:38:27,700
show actually running me me cats here

975
00:38:24,460 --> 00:38:28,990
but so some practical uses here running

976
00:38:27,700 --> 00:38:31,180
me me cats against all the virtual

977
00:38:28,990 --> 00:38:33,430
machines together all of these available

978
00:38:31,180 --> 00:38:36,450
clear text financials or ntlm hashes

979
00:38:33,430 --> 00:38:39,339
pulling those off of those boxes

980
00:38:36,450 --> 00:38:41,200
potentially tasking see two agents so if

981
00:38:39,340 --> 00:38:43,690
you want to get say an empire

982
00:38:41,200 --> 00:38:45,279
meterpreter shell on all of the virtual

983
00:38:43,690 --> 00:38:47,320
machines in the insurer virtual machine

984
00:38:45,280 --> 00:38:49,240
environment you can go ahead and just do

985
00:38:47,320 --> 00:38:51,520
that you basically just task it up and

986
00:38:49,240 --> 00:38:54,700
say run this PowerShell command and hit

987
00:38:51,520 --> 00:38:56,770
go searching for data it's kind of nice

988
00:38:54,700 --> 00:38:59,230
you could search for sensitive files on

989
00:38:56,770 --> 00:39:02,020
stuff not so practical uses and you have

990
00:38:59,230 --> 00:39:03,250
bot nets or crypto miners or deleting

991
00:39:02,020 --> 00:39:06,410
everything off the virtual machines

992
00:39:03,250 --> 00:39:09,319
don't do those things those are bad

993
00:39:06,410 --> 00:39:12,940
that's my disclaimer for all of us just

994
00:39:09,319 --> 00:39:16,490
be careful don't do bad things this also

995
00:39:12,940 --> 00:39:17,420
your success may depend on the VM region

996
00:39:16,490 --> 00:39:20,089
or the virtual machine configuration

997
00:39:17,420 --> 00:39:23,270
I've had some different regions that

998
00:39:20,089 --> 00:39:26,808
don't respond all that well to actually

999
00:39:23,270 --> 00:39:28,400
tasking up these commands I've currently

1000
00:39:26,809 --> 00:39:29,750
the thing that's kind of delaying the

1001
00:39:28,400 --> 00:39:31,190
blog posts I'm going through each of the

1002
00:39:29,750 --> 00:39:33,500
different as your virtual machine

1003
00:39:31,190 --> 00:39:35,420
regions that you can deploy to to try

1004
00:39:33,500 --> 00:39:38,020
and get kind of timestamps on how long

1005
00:39:35,420 --> 00:39:41,750
some of these commands run a standard

1006
00:39:38,020 --> 00:39:43,960
you know us West virtual machine running

1007
00:39:41,750 --> 00:39:46,130
it from my internet connection at home

1008
00:39:43,960 --> 00:39:49,430
maybe takes thirty Seconds to a minute

1009
00:39:46,130 --> 00:39:51,440
to execute the Mimi cat's PowerShell

1010
00:39:49,430 --> 00:39:53,210
script but what you have to think about

1011
00:39:51,440 --> 00:39:55,579
is we're actually uploading the entirety

1012
00:39:53,210 --> 00:39:57,349
of that Mimi cat's powershell script to

1013
00:39:55,579 --> 00:39:59,990
that virtual machine running it and then

1014
00:39:57,349 --> 00:40:01,430
pulling the info back down so it does

1015
00:39:59,990 --> 00:40:03,799
take a little while to travel over the

1016
00:40:01,430 --> 00:40:05,450
internet if you're going you know down

1017
00:40:03,799 --> 00:40:07,700
to Australia or something that's got a

1018
00:40:05,450 --> 00:40:10,160
bit of a round-trip to make to get back

1019
00:40:07,700 --> 00:40:12,009
to the US so that could take upwards of

1020
00:40:10,160 --> 00:40:14,899
a minute or more to actually execute

1021
00:40:12,010 --> 00:40:18,170
conveniently for our demo I'm able to

1022
00:40:14,900 --> 00:40:19,720
speed up time and video so it doesn't

1023
00:40:18,170 --> 00:40:22,940
take that long

1024
00:40:19,720 --> 00:40:24,919
so do here and what you can see on the

1025
00:40:22,940 --> 00:40:29,210
screen right now is will run the invoke

1026
00:40:24,920 --> 00:40:32,480
at your MVM bulk CMD with the Mimi test

1027
00:40:29,210 --> 00:40:36,650
ps1 script and we'll jump right past our

1028
00:40:32,480 --> 00:40:38,809
video using the script tag here we can

1029
00:40:36,650 --> 00:40:40,640
see the IP addresses for that virtual

1030
00:40:38,809 --> 00:40:42,920
machine this is kind of handy for just

1031
00:40:40,640 --> 00:40:45,920
keeping tabs on where that's actually

1032
00:40:42,920 --> 00:40:50,630
running and we can see the Mimi cats

1033
00:40:45,920 --> 00:40:56,799
output came back and it'll get to our

1034
00:40:50,630 --> 00:40:59,180
password here a Hello besides PDX so

1035
00:40:56,799 --> 00:41:00,230
what's really nice about this is you

1036
00:40:59,180 --> 00:41:02,450
know if you're using that verbose and

1037
00:41:00,230 --> 00:41:05,029
you're tasking say empire agents to

1038
00:41:02,450 --> 00:41:08,180
phone home you can then correlate these

1039
00:41:05,029 --> 00:41:10,160
specific external IP addresses they're

1040
00:41:08,180 --> 00:41:12,500
coming back or internal ones to the

1041
00:41:10,160 --> 00:41:15,930
verbose logs here and kind of figure out

1042
00:41:12,500 --> 00:41:20,029
which systems actually executed your

1043
00:41:15,930 --> 00:41:23,249
command-and-control all of that so

1044
00:41:20,029 --> 00:41:25,140
that's the end of the demo here talking

1045
00:41:23,249 --> 00:41:28,078
about fixes and kind of conclusions here

1046
00:41:25,140 --> 00:41:30,839
in general try to limit your as your

1047
00:41:28,079 --> 00:41:32,749
access for non admin users there are

1048
00:41:30,839 --> 00:41:34,980
options to do that and get that set up

1049
00:41:32,749 --> 00:41:37,499
we do see it occasionally in some

1050
00:41:34,980 --> 00:41:39,359
environments one thing I didn't know in

1051
00:41:37,499 --> 00:41:41,459
here is that we've actually had web

1052
00:41:39,359 --> 00:41:45,269
applications of allowed for Active

1053
00:41:41,460 --> 00:41:47,339
Directory portal access so we've logged

1054
00:41:45,269 --> 00:41:49,649
in with an application services

1055
00:41:47,339 --> 00:41:51,210
application that uses Azure ad for

1056
00:41:49,650 --> 00:41:53,579
authentication or handling

1057
00:41:51,210 --> 00:41:54,930
authentication for users and we're

1058
00:41:53,579 --> 00:41:59,069
actually able to use those credentials

1059
00:41:54,930 --> 00:42:00,480
to log into the azure portal so

1060
00:41:59,069 --> 00:42:02,220
something to keep in mind as you're

1061
00:42:00,480 --> 00:42:04,710
developing applications and as your if

1062
00:42:02,220 --> 00:42:06,058
you're using Azure Active Directory make

1063
00:42:04,710 --> 00:42:08,339
sure you're walking down access for that

1064
00:42:06,059 --> 00:42:10,769
one that's gonna be really hard here is

1065
00:42:08,339 --> 00:42:12,749
try to get users to stop using fall 2018

1066
00:42:10,769 --> 00:42:14,879
is password or season year combinations

1067
00:42:12,749 --> 00:42:17,308
I don't mean to call out or shame

1068
00:42:14,880 --> 00:42:18,720
anybody here that is using that but that

1069
00:42:17,309 --> 00:42:20,869
is the first thing we're gonna guess on

1070
00:42:18,720 --> 00:42:23,009
a pen test season your combination is

1071
00:42:20,869 --> 00:42:25,289
one of the most common that we run into

1072
00:42:23,009 --> 00:42:27,450
outside of like company name one or

1073
00:42:25,289 --> 00:42:29,220
password one things like that it

1074
00:42:27,450 --> 00:42:31,049
typically meets complexity requirements

1075
00:42:29,220 --> 00:42:33,509
we've got eight characters up or lower

1076
00:42:31,049 --> 00:42:36,390
and a number here that's gonna get us

1077
00:42:33,509 --> 00:42:38,220
access set up multi-factor

1078
00:42:36,390 --> 00:42:40,440
authentication for access this is

1079
00:42:38,220 --> 00:42:42,328
actually really easy to do I did this on

1080
00:42:40,440 --> 00:42:45,140
my demo environment in like three

1081
00:42:42,329 --> 00:42:47,789
minutes so it's really simple to set up

1082
00:42:45,140 --> 00:42:50,578
conclusions wise powerpoints a major

1083
00:42:47,789 --> 00:42:52,829
pain the cloud is complicated

1084
00:42:50,579 --> 00:42:54,599
misconfigurations will happen I learned

1085
00:42:52,829 --> 00:42:56,880
a lot about configuring cloud services

1086
00:42:54,599 --> 00:42:59,190
while putting this together I mess stuff

1087
00:42:56,880 --> 00:43:01,559
up myself sometimes intentionally

1088
00:42:59,190 --> 00:43:04,019
sometimes not intentionally but there

1089
00:43:01,559 --> 00:43:05,819
are options for mitigate for mitigating

1090
00:43:04,019 --> 00:43:07,649
the risks we've got the microburst tool

1091
00:43:05,819 --> 00:43:09,239
set that you can use to you know check

1092
00:43:07,650 --> 00:43:11,460
your environment there's other tool sets

1093
00:43:09,239 --> 00:43:13,200
out there as well I know that some of

1094
00:43:11,460 --> 00:43:15,839
the automated vulnerability scanners out

1095
00:43:13,200 --> 00:43:18,538
there now do some configuration reviews

1096
00:43:15,839 --> 00:43:20,489
I know tenable has got some profiles you

1097
00:43:18,539 --> 00:43:24,589
can use for that as well so there are

1098
00:43:20,489 --> 00:43:24,589
some options out there any questions

1099
00:43:34,280 --> 00:43:40,800
would it be more expedient to spin up a

1100
00:43:38,490 --> 00:43:43,620
storage container to see region has

1101
00:43:40,800 --> 00:43:46,560
whatever your fantastic port like your

1102
00:43:43,620 --> 00:43:48,870
cloud regions five stores they're good

1103
00:43:46,560 --> 00:43:51,420
love stores and then make those copies

1104
00:43:48,870 --> 00:43:56,819
directly in region to something that you

1105
00:43:51,420 --> 00:43:58,320
own you possess you could potentially do

1106
00:43:56,820 --> 00:44:00,240
that so the question was when you're

1107
00:43:58,320 --> 00:44:02,100
doing a pen test and you've got some

1108
00:44:00,240 --> 00:44:04,020
additional resources to spin up

1109
00:44:02,100 --> 00:44:06,509
potentially would it make more sense to

1110
00:44:04,020 --> 00:44:08,580
use a more localized resource to copy

1111
00:44:06,510 --> 00:44:11,340
over something like VHD files or really

1112
00:44:08,580 --> 00:44:14,520
large files I haven't tried that

1113
00:44:11,340 --> 00:44:16,650
personally probably saves a lot of time

1114
00:44:14,520 --> 00:44:18,150
I've been looking at different options

1115
00:44:16,650 --> 00:44:20,610
I'm actually working with somebody

1116
00:44:18,150 --> 00:44:23,790
online who's working on some other stuff

1117
00:44:20,610 --> 00:44:25,740
kind of similar to that but in terms of

1118
00:44:23,790 --> 00:44:28,380
trying to parse those files fully

1119
00:44:25,740 --> 00:44:29,750
downloading like 120 gig image takes a

1120
00:44:28,380 --> 00:44:33,110
long time yeah

1121
00:44:29,750 --> 00:44:33,110
other questions

1122
00:44:48,760 --> 00:44:55,579
yep so the question was not only looking

1123
00:44:52,519 --> 00:44:57,348
for kind of out of policy items but

1124
00:44:55,579 --> 00:44:59,390
actually enforcing those out of policy

1125
00:44:57,349 --> 00:45:02,150
items I don't have anything in here at

1126
00:44:59,390 --> 00:45:04,009
the moment to do any of that we're

1127
00:45:02,150 --> 00:45:06,890
trying to make this read-only kind of

1128
00:45:04,010 --> 00:45:08,359
testing there's some some stuff that you

1129
00:45:06,890 --> 00:45:10,609
know does make some changes but we try

1130
00:45:08,359 --> 00:45:14,450
to avoid major state changes in general

1131
00:45:10,609 --> 00:45:15,650
just as kind of a rule of thumb but you

1132
00:45:14,450 --> 00:45:17,359
know in terms of a tool that could

1133
00:45:15,650 --> 00:45:19,490
automate that that would be pretty handy

1134
00:45:17,359 --> 00:45:22,308
for people to use or at least prompt

1135
00:45:19,490 --> 00:45:31,250
them before they make the changes any

1136
00:45:22,309 --> 00:45:34,730
other questions that's a good question

1137
00:45:31,250 --> 00:45:37,160
the question was how noisy is microburst

1138
00:45:34,730 --> 00:45:39,440
and how likely would a blue team detect

1139
00:45:37,160 --> 00:45:41,839
this so the nice thing from an attacker

1140
00:45:39,440 --> 00:45:43,430
red teamers perspective is we're using

1141
00:45:41,839 --> 00:45:45,680
native technologies with the issuer

1142
00:45:43,430 --> 00:45:48,680
commandlets so it's kind of expected

1143
00:45:45,680 --> 00:45:52,368
behavior to a certain degree there are

1144
00:45:48,680 --> 00:45:55,220
some indicators for the invoke remote

1145
00:45:52,369 --> 00:45:56,869
command so I have that in the blog post

1146
00:45:55,220 --> 00:45:58,368
that's coming up here you can set up

1147
00:45:56,869 --> 00:45:59,930
specific alerts for specific items

1148
00:45:58,369 --> 00:46:01,789
particularly around the command

1149
00:45:59,930 --> 00:46:04,069
execution you know if you're allowing

1150
00:46:01,789 --> 00:46:05,359
people with contributor rights to run

1151
00:46:04,069 --> 00:46:06,710
system level code on your virtual

1152
00:46:05,359 --> 00:46:09,078
machines you should definitely be

1153
00:46:06,710 --> 00:46:12,670
auditing that and all have specific

1154
00:46:09,079 --> 00:46:12,670
instructions in the blog post about that

1155
00:46:20,619 --> 00:46:25,220
perfect so the note from the crowd here

1156
00:46:23,509 --> 00:46:27,589
was that there should be very specific

1157
00:46:25,220 --> 00:46:29,959
logging for the key bolts and I've

1158
00:46:27,589 --> 00:46:32,119
looked into that yeah I haven't done as

1159
00:46:29,960 --> 00:46:33,529
much on the the logging and blue team

1160
00:46:32,119 --> 00:46:35,480
side of things I've mostly just been

1161
00:46:33,529 --> 00:46:37,430
trying to write tools to attack but

1162
00:46:35,480 --> 00:46:41,710
eventually we'll switch over to more of

1163
00:46:37,430 --> 00:46:41,710
those any other questions

1164
00:46:42,440 --> 00:46:46,640
all right cool well thanks everybody for

1165
00:46:44,269 --> 00:46:47,959
coming out for a Saturday afternoon talk

1166
00:46:46,640 --> 00:46:50,558
like I said I know there's competition

1167
00:46:47,960 --> 00:46:52,819
with the anime and Pokemon here but

1168
00:46:50,559 --> 00:46:55,039
thanks to my net spite co-workers who

1169
00:46:52,819 --> 00:46:56,930
did a lot of the QA on this and helped

1170
00:46:55,039 --> 00:46:59,529
with testing and anybody watching online

1171
00:46:56,930 --> 00:46:59,529
thank you

1172
00:47:10,940 --> 00:47:13,000
you

