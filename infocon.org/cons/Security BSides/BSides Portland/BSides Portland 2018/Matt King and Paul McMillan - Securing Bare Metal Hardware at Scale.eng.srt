1
00:00:15,940 --> 00:00:22,130
hello I'm Paul

2
00:00:17,990 --> 00:00:24,168
I can barely see your laptop your

3
00:00:22,130 --> 00:00:25,130
privacy privacy screen works too well

4
00:00:24,169 --> 00:00:29,599
Matt I'm sorry

5
00:00:25,130 --> 00:00:31,070
so the typical disclaimer I'm not

6
00:00:29,599 --> 00:00:33,620
speaking on behalf of my current

7
00:00:31,070 --> 00:00:36,339
employer Matt isn't either

8
00:00:33,620 --> 00:00:38,899
and we're definitely not making any

9
00:00:36,339 --> 00:00:41,530
announcements or talking about specific

10
00:00:38,899 --> 00:00:43,610
product features or vulnerabilities so

11
00:00:41,530 --> 00:00:47,239
let's start by talking about what we're

12
00:00:43,610 --> 00:00:48,769
not talking about we are not gonna be

13
00:00:47,239 --> 00:00:49,820
addressing virtual machine' security

14
00:00:48,769 --> 00:00:52,370
here we're not gonna be talking about

15
00:00:49,820 --> 00:00:54,109
runtime security here we're not talking

16
00:00:52,370 --> 00:00:57,320
about securing laptops and desktops

17
00:00:54,109 --> 00:01:00,140
those are out of scope and honestly very

18
00:00:57,320 --> 00:01:02,179
very hard relative to even the problem

19
00:01:00,140 --> 00:01:03,559
we're trying to solve here which assumes

20
00:01:02,179 --> 00:01:05,899
there are guards at the door to the data

21
00:01:03,559 --> 00:01:09,800
center we're also not talking about the

22
00:01:05,899 --> 00:01:11,300
TC G and T PM's and so on and I know you

23
00:01:09,800 --> 00:01:12,470
are all here because the super micro

24
00:01:11,300 --> 00:01:15,050
thing but we're not talking about

25
00:01:12,470 --> 00:01:18,380
defending against Hardware implants or

26
00:01:15,050 --> 00:01:21,200
vendors who are doing bad things so this

27
00:01:18,380 --> 00:01:24,020
we are talking about allowing customers

28
00:01:21,200 --> 00:01:30,490
to run on the bare metal that as you

29
00:01:24,020 --> 00:01:32,840
will see is a metal bear on a cloud so

30
00:01:30,490 --> 00:01:35,360
the particular thing that we're

31
00:01:32,840 --> 00:01:37,280
concerned about in this context is the

32
00:01:35,360 --> 00:01:40,130
firmware on the devices the customer can

33
00:01:37,280 --> 00:01:42,380
actually access in a VM context

34
00:01:40,130 --> 00:01:45,350
everything is abstracted away they don't

35
00:01:42,380 --> 00:01:46,640
have can't get to the low level but we

36
00:01:45,350 --> 00:01:49,100
want to secure things and give people

37
00:01:46,640 --> 00:01:53,210
directly direct access access to the

38
00:01:49,100 --> 00:01:55,669
hardware so again the firmware we're

39
00:01:53,210 --> 00:01:58,820
concerned about if you look at a modern

40
00:01:55,670 --> 00:02:01,009
modern server in the cloud today it will

41
00:01:58,820 --> 00:02:03,919
have between 50 and a hundred different

42
00:02:01,009 --> 00:02:06,710
places that have mutable firmware or

43
00:02:03,920 --> 00:02:09,229
writable data that might be accessible

44
00:02:06,710 --> 00:02:11,030
to an attacker individual chips

45
00:02:09,229 --> 00:02:14,000
scattered throughout the throughout the

46
00:02:11,030 --> 00:02:15,590
platform we know that customers can run

47
00:02:14,000 --> 00:02:17,630
the firmware update utilities the

48
00:02:15,590 --> 00:02:19,400
manufacturers give them to them and we

49
00:02:17,630 --> 00:02:21,470
can't it's hard to just turn that

50
00:02:19,400 --> 00:02:23,329
capability off when you don't need it

51
00:02:21,470 --> 00:02:26,090
and turn it back on because it's all

52
00:02:23,329 --> 00:02:28,280
wired directly into the hardware if

53
00:02:26,090 --> 00:02:31,489
customers do that and very often fleet

54
00:02:28,280 --> 00:02:33,230
management utilities you know the

55
00:02:31,489 --> 00:02:36,260
automated tooling that they run in their

56
00:02:33,230 --> 00:02:38,149
data center will change to a version of

57
00:02:36,260 --> 00:02:40,340
a firmware on Hardware that they trust

58
00:02:38,150 --> 00:02:41,870
they say oh you know we only qualified

59
00:02:40,340 --> 00:02:43,250
this old version we know our workload

60
00:02:41,870 --> 00:02:44,930
works as that so let's just put it back

61
00:02:43,250 --> 00:02:48,229
to that while we're using this hardware

62
00:02:44,930 --> 00:02:49,970
this is a great flexibil very good for

63
00:02:48,229 --> 00:02:50,930
being flexible for the customer and

64
00:02:49,970 --> 00:02:53,540
that's them do what they want with

65
00:02:50,930 --> 00:02:55,970
hardware but then when we get it back we

66
00:02:53,540 --> 00:02:58,850
need to make sure that it is not

67
00:02:55,970 --> 00:03:00,620
malicious we need to make sure that they

68
00:02:58,850 --> 00:03:04,519
haven't stuck an old buggy version of

69
00:03:00,620 --> 00:03:07,699
the firmware in the hardware and we need

70
00:03:04,519 --> 00:03:09,919
to do this consistently and reliably we

71
00:03:07,699 --> 00:03:11,959
want it when you ran to the system we've

72
00:03:09,919 --> 00:03:13,340
got you have do what you want but when

73
00:03:11,959 --> 00:03:16,280
we get it back we need to be able to

74
00:03:13,340 --> 00:03:19,160
restore it to pristine state and it has

75
00:03:16,280 --> 00:03:20,630
to be automatable this has to be to be

76
00:03:19,160 --> 00:03:24,190
able you have to be able to do this at

77
00:03:20,630 --> 00:03:27,168
scale and it has to work every time

78
00:03:24,190 --> 00:03:29,180
update routines that defend depending on

79
00:03:27,169 --> 00:03:32,090
the firmware itself doing a good job of

80
00:03:29,180 --> 00:03:36,079
updating it fail more often than you

81
00:03:32,090 --> 00:03:37,639
think they would unfortunately so and

82
00:03:36,079 --> 00:03:39,739
the the other thing that we need is we

83
00:03:37,639 --> 00:03:42,500
need to be able to say even if this

84
00:03:39,739 --> 00:03:45,440
device had a bug in it and maybe we've

85
00:03:42,500 --> 00:03:47,509
discovered and fixed it we still need to

86
00:03:45,440 --> 00:03:49,400
be able to assert that the version we're

87
00:03:47,509 --> 00:03:50,929
giving to the next customer not only

88
00:03:49,400 --> 00:03:52,609
doesn't have that bug but that bug

89
00:03:50,930 --> 00:03:56,919
hasn't been exploited to backdoor the

90
00:03:52,609 --> 00:03:56,919
next the next customer

91
00:04:02,140 --> 00:04:06,290
all right so as Paul was mentioning

92
00:04:04,580 --> 00:04:08,390
there's a lot of things if you look at a

93
00:04:06,290 --> 00:04:11,720
modern server platform even a laptop but

94
00:04:08,390 --> 00:04:13,069
servers are just more of the same so

95
00:04:11,720 --> 00:04:14,720
there's a lot of things in there you

96
00:04:13,069 --> 00:04:16,370
know how does it get built how does it

97
00:04:14,720 --> 00:04:18,589
end up it obviously doesn't appear fully

98
00:04:16,370 --> 00:04:21,048
formed in a data center ready for us to

99
00:04:18,589 --> 00:04:23,359
use and rent to customers right the

100
00:04:21,048 --> 00:04:25,010
manufacturing line the process that gets

101
00:04:23,360 --> 00:04:26,510
it there is actually pretty long and

102
00:04:25,010 --> 00:04:27,710
complicated and intricate and I don't

103
00:04:26,510 --> 00:04:30,700
know if anybody's ever had to actually

104
00:04:27,710 --> 00:04:33,710
try and build a real physical server

105
00:04:30,700 --> 00:04:35,210
it's a lot more painful than you could

106
00:04:33,710 --> 00:04:40,070
imagine if you're used to dealing with

107
00:04:35,210 --> 00:04:41,239
software so not a whole lot if you if

108
00:04:40,070 --> 00:04:42,950
you're familiar with the old PCI

109
00:04:41,240 --> 00:04:44,750
architecture diagrams of like what does

110
00:04:42,950 --> 00:04:46,460
this computer look like right things

111
00:04:44,750 --> 00:04:50,060
haven't actually changed that much over

112
00:04:46,460 --> 00:04:51,739
the last 20 years the i/o buses have

113
00:04:50,060 --> 00:04:54,169
gotten faster we've taken some things

114
00:04:51,740 --> 00:04:56,389
that used to be discrete parts and put

115
00:04:54,169 --> 00:04:57,919
them onto the same package but we've

116
00:04:56,389 --> 00:05:01,639
still got you know memory controllers

117
00:04:57,919 --> 00:05:04,760
application processors IO devices some

118
00:05:01,639 --> 00:05:07,310
management stuff storage the the general

119
00:05:04,760 --> 00:05:08,930
layout the general architecture the way

120
00:05:07,310 --> 00:05:10,430
these components interact hasn't

121
00:05:08,930 --> 00:05:13,660
actually changed a lot even though the

122
00:05:10,430 --> 00:05:15,740
protocols may be a little different now

123
00:05:13,660 --> 00:05:17,630
one of the things that has changed

124
00:05:15,740 --> 00:05:19,580
though is that literally everything has

125
00:05:17,630 --> 00:05:21,740
a microcontroller in it right it used to

126
00:05:19,580 --> 00:05:23,300
be all Hardware pre-programmed

127
00:05:21,740 --> 00:05:25,640
functionality State Hardware state

128
00:05:23,300 --> 00:05:27,830
machines that's kind of gone by the

129
00:05:25,640 --> 00:05:30,610
wayside everything uses microcontrollers

130
00:05:27,830 --> 00:05:33,200
and they all have firmware of some kind

131
00:05:30,610 --> 00:05:34,910
so like up on this picture I think the

132
00:05:33,200 --> 00:05:37,909
blue ones are the microcontrollers and

133
00:05:34,910 --> 00:05:39,830
the orange ones are firmware so you've

134
00:05:37,910 --> 00:05:41,660
got you know even for the DRAM you've

135
00:05:39,830 --> 00:05:43,219
got some bit of data there that tells

136
00:05:41,660 --> 00:05:45,350
you how big this dim is and what the

137
00:05:43,220 --> 00:05:46,850
timings for it are right because if you

138
00:05:45,350 --> 00:05:47,900
want the system to support a hundred

139
00:05:46,850 --> 00:05:49,280
different dims from different

140
00:05:47,900 --> 00:05:51,859
manufacturers with different settings

141
00:05:49,280 --> 00:05:53,419
and sizes you need something to tell the

142
00:05:51,860 --> 00:05:55,820
system what those are so it knows how to

143
00:05:53,419 --> 00:05:57,500
set up memory

144
00:05:55,820 --> 00:05:59,060
this gives the system a lot of

145
00:05:57,500 --> 00:06:01,430
flexibility it allows you to build

146
00:05:59,060 --> 00:06:02,840
things it allows you to fix things after

147
00:06:01,430 --> 00:06:04,130
you've built them it allows you to plug

148
00:06:02,840 --> 00:06:05,900
different things together and hopefully

149
00:06:04,130 --> 00:06:08,719
they all work because they can sort of

150
00:06:05,900 --> 00:06:11,150
tell each other what they are and sync

151
00:06:08,720 --> 00:06:12,380
appropriately but it now also means we

152
00:06:11,150 --> 00:06:13,008
have a bunch of things to deal with

153
00:06:12,380 --> 00:06:14,150
right

154
00:06:13,009 --> 00:06:15,889
there's a whole lot more places things

155
00:06:14,150 --> 00:06:17,659
can go wrong and we've now got a lot of

156
00:06:15,889 --> 00:06:19,939
people who are not software developers

157
00:06:17,659 --> 00:06:21,649
writing software to run in places that

158
00:06:19,939 --> 00:06:26,240
are not like easily visible or

159
00:06:21,649 --> 00:06:27,830
accessible or verifiable and it's really

160
00:06:26,240 --> 00:06:29,449
like this is this is still the

161
00:06:27,830 --> 00:06:31,399
simplified picture it's worse there's

162
00:06:29,449 --> 00:06:33,860
more stuff in there right

163
00:06:31,399 --> 00:06:35,599
most modern high-performance devices are

164
00:06:33,860 --> 00:06:37,159
no longer single core they have multiple

165
00:06:35,599 --> 00:06:39,710
cores they might have multiple different

166
00:06:37,159 --> 00:06:43,639
firmware images running on them

167
00:06:39,710 --> 00:06:45,680
your emmc storage for your embedded

168
00:06:43,639 --> 00:06:50,389
controller probably has its own firmware

169
00:06:45,680 --> 00:06:52,460
in it you've got other things on the

170
00:06:50,389 --> 00:06:54,259
board that may not be documented that

171
00:06:52,460 --> 00:06:57,049
you know clearly have some kind of

172
00:06:54,259 --> 00:06:58,580
non-volatile storage on them sometimes

173
00:06:57,050 --> 00:07:00,409
it's as simple as some Part D

174
00:06:58,580 --> 00:07:02,089
identifiers so that when you need to

175
00:07:00,409 --> 00:07:03,649
return something to the manufacturer

176
00:07:02,089 --> 00:07:05,169
they can identify which part this was

177
00:07:03,649 --> 00:07:07,219
and send you an appropriate replacement

178
00:07:05,169 --> 00:07:09,830
sometimes there's actual like

179
00:07:07,219 --> 00:07:14,119
microcontrollers in your battery keeping

180
00:07:09,830 --> 00:07:15,979
it from exploding so there's a there's a

181
00:07:14,119 --> 00:07:17,749
lot of things right your your hard

182
00:07:15,979 --> 00:07:19,520
drives all have them your USB Wi-Fi

183
00:07:17,749 --> 00:07:21,259
device probably has separate

184
00:07:19,520 --> 00:07:24,799
microcontrollers on both the usb side

185
00:07:21,259 --> 00:07:26,059
and the Wi-Fi side there's a lot of

186
00:07:24,800 --> 00:07:28,300
things in there there's a lot of places

187
00:07:26,059 --> 00:07:31,099
if you want to persistently store

188
00:07:28,300 --> 00:07:34,490
malware there's a whole bunch of places

189
00:07:31,099 --> 00:07:36,830
you can stick it right and the ability

190
00:07:34,490 --> 00:07:38,330
of the system to go investigate what's

191
00:07:36,830 --> 00:07:39,649
in the hard drive firmware is generally

192
00:07:38,330 --> 00:07:42,979
pretty limited because if you look at

193
00:07:39,649 --> 00:07:44,959
the protocol specifications for like I

194
00:07:42,979 --> 00:07:46,849
say the hard drive it doesn't have a

195
00:07:44,959 --> 00:07:48,830
command in there that says hey tell me

196
00:07:46,849 --> 00:07:50,719
exactly what your firmware is it's got

197
00:07:48,830 --> 00:07:52,308
like an update routine that if you go

198
00:07:50,719 --> 00:07:53,479
look at the Linux utility says very

199
00:07:52,309 --> 00:07:56,120
clearly don't do this you'll break your

200
00:07:53,479 --> 00:07:57,289
hard drive so not only can people not

201
00:07:56,120 --> 00:07:59,029
inspected but they've been told

202
00:07:57,289 --> 00:08:00,229
explicitly not to even try updating the

203
00:07:59,029 --> 00:08:03,529
firmware on a bunch of these devices

204
00:08:00,229 --> 00:08:05,029
because it's dangerous and it can be if

205
00:08:03,529 --> 00:08:06,800
the manufacturers done a bad job

206
00:08:05,029 --> 00:08:08,209
building the device but that also means

207
00:08:06,800 --> 00:08:11,080
you're not getting security updates when

208
00:08:08,209 --> 00:08:11,080
there's problems with it

209
00:08:11,370 --> 00:08:17,320
so that's what's in a server how does it

210
00:08:14,560 --> 00:08:19,270
come to be a server like there's tens of

211
00:08:17,320 --> 00:08:21,820
thousands of different components in a

212
00:08:19,270 --> 00:08:25,270
server right individual components from

213
00:08:21,820 --> 00:08:29,560
passives to small ActiveX components

214
00:08:25,270 --> 00:08:31,539
like muxes and other things to you know

215
00:08:29,560 --> 00:08:33,099
the big CPUs that we think of as being

216
00:08:31,540 --> 00:08:36,130
the actual part of the server that we're

217
00:08:33,099 --> 00:08:39,000
interested in and they're like they're

218
00:08:36,130 --> 00:08:42,338
built all around the world you know

219
00:08:39,000 --> 00:08:45,550
South Korea and Taiwan and Israel build

220
00:08:42,339 --> 00:08:47,710
a lot of individual components right and

221
00:08:45,550 --> 00:08:50,680
these sort of get farmed out these are

222
00:08:47,710 --> 00:08:52,960
in most cases commodity things so when

223
00:08:50,680 --> 00:08:55,060
you say I want to go build a server I

224
00:08:52,960 --> 00:08:57,970
need ten thousand of this resistor to

225
00:08:55,060 --> 00:08:59,349
put on the motherboard you know somebody

226
00:08:57,970 --> 00:09:01,150
in your supply chain organization goes

227
00:08:59,350 --> 00:09:02,560
out and orders 10,000 of those from

228
00:09:01,150 --> 00:09:05,050
wherever they can find them either

229
00:09:02,560 --> 00:09:06,550
available or cheapest and then they show

230
00:09:05,050 --> 00:09:09,479
up at the contract manufacturer in the

231
00:09:06,550 --> 00:09:12,130
contract manufacturer uses them and

232
00:09:09,480 --> 00:09:14,260
there may or may not be good tracking of

233
00:09:12,130 --> 00:09:15,400
those all along the way from the place

234
00:09:14,260 --> 00:09:17,529
that built them to the place that

235
00:09:15,400 --> 00:09:21,579
packaged them to your contract

236
00:09:17,529 --> 00:09:23,500
manufacturer but even assuming you you

237
00:09:21,580 --> 00:09:25,560
have that right we've we've got

238
00:09:23,500 --> 00:09:28,420
components coming from one set of

239
00:09:25,560 --> 00:09:31,510
manufacturers we've got PCBs being built

240
00:09:28,420 --> 00:09:34,529
in entirely different places there's

241
00:09:31,510 --> 00:09:36,880
plenty of places that have a lot of PCB

242
00:09:34,529 --> 00:09:38,380
manufacturing but the components and the

243
00:09:36,880 --> 00:09:40,209
PCBs are not generally manufactured

244
00:09:38,380 --> 00:09:42,459
together right the components come from

245
00:09:40,209 --> 00:09:45,790
one vendor the PCBs come from another

246
00:09:42,459 --> 00:09:47,859
vendor and then they all go to a third

247
00:09:45,790 --> 00:09:50,380
place where they get assemble right and

248
00:09:47,860 --> 00:09:51,490
this is the the assembly is usually

249
00:09:50,380 --> 00:09:53,800
where we talk about contract

250
00:09:51,490 --> 00:09:55,150
manufacturers where we get all the

251
00:09:53,800 --> 00:09:57,819
pieces in the same place and somebody

252
00:09:55,150 --> 00:10:00,010
saw there's them all together and that's

253
00:09:57,820 --> 00:10:01,600
great but if you don't have tracking on

254
00:10:00,010 --> 00:10:02,890
what comes into the contract

255
00:10:01,600 --> 00:10:05,350
manufacturer you're not really going to

256
00:10:02,890 --> 00:10:07,120
have a good idea of what you're actually

257
00:10:05,350 --> 00:10:09,160
getting is that the thing you wanted I

258
00:10:07,120 --> 00:10:11,200
know there was talk this morning about

259
00:10:09,160 --> 00:10:13,990
the this part of the supply chain aspect

260
00:10:11,200 --> 00:10:15,820
where you've got a whole bunch of coming

261
00:10:13,990 --> 00:10:17,260
things in I think it was Joe feds that

262
00:10:15,820 --> 00:10:20,110
made the comment of just replace it real

263
00:10:17,260 --> 00:10:22,000
right like at the contract manufacturer

264
00:10:20,110 --> 00:10:23,230
they're just gonna have buckets full of

265
00:10:22,000 --> 00:10:24,700
the specific components

266
00:10:23,230 --> 00:10:30,400
instructions on where to solder them

267
00:10:24,700 --> 00:10:32,050
down on the PCBs if you can inject new

268
00:10:30,400 --> 00:10:34,480
things into the supply chain at that

269
00:10:32,050 --> 00:10:35,979
point this is sort of where they was

270
00:10:34,480 --> 00:10:38,350
talking about it happened somewhere in

271
00:10:35,980 --> 00:10:40,680
the process of taking all the individual

272
00:10:38,350 --> 00:10:45,070
parts putting it in the same place and

273
00:10:40,680 --> 00:10:46,839
soldering them together that's a really

274
00:10:45,070 --> 00:10:48,580
hard problem to solve tracking all that

275
00:10:46,840 --> 00:10:50,560
we didn't really attempt to solve that

276
00:10:48,580 --> 00:10:52,870
problem we were worried more about just

277
00:10:50,560 --> 00:10:55,119
the firmware because all of these places

278
00:10:52,870 --> 00:10:57,520
all of these components all of them that

279
00:10:55,120 --> 00:10:59,350
are programmable at any point in this

280
00:10:57,520 --> 00:11:01,210
process somebody could be putting hands

281
00:10:59,350 --> 00:11:02,680
on it programming it testing it in fact

282
00:11:01,210 --> 00:11:04,180
hopefully they are putting hands on it

283
00:11:02,680 --> 00:11:05,709
and programming and testing it make sure

284
00:11:04,180 --> 00:11:09,729
it works before they assemble everything

285
00:11:05,710 --> 00:11:12,550
and send it to you and so there's gonna

286
00:11:09,730 --> 00:11:14,080
be firmware on these devices right

287
00:11:12,550 --> 00:11:15,760
everything that's programmable by the

288
00:11:14,080 --> 00:11:17,710
time it leaves the contract manufacturer

289
00:11:15,760 --> 00:11:19,090
is going to have some firmware on it

290
00:11:17,710 --> 00:11:20,500
because hopefully if they have done some

291
00:11:19,090 --> 00:11:22,060
level of testing and if they haven't

292
00:11:20,500 --> 00:11:23,590
then you get really upset with them and

293
00:11:22,060 --> 00:11:25,030
you go yell at them and make them do

294
00:11:23,590 --> 00:11:28,690
that because you want them to send you

295
00:11:25,030 --> 00:11:29,920
working devices and then once you have

296
00:11:28,690 --> 00:11:32,350
them they get shipped all over the world

297
00:11:29,920 --> 00:11:34,959
right so I know there's the the stories

298
00:11:32,350 --> 00:11:37,630
about customs interdiction of devices

299
00:11:34,960 --> 00:11:40,660
and reprogramming of them because they

300
00:11:37,630 --> 00:11:44,050
have to cross three or four borders to

301
00:11:40,660 --> 00:11:46,030
get from point A to point B because like

302
00:11:44,050 --> 00:11:48,130
as you've seen from the slides you know

303
00:11:46,030 --> 00:11:49,839
probably every part near servers been

304
00:11:48,130 --> 00:11:51,520
around the world two or three times by

305
00:11:49,840 --> 00:11:53,470
the point it lands in your data center

306
00:11:51,520 --> 00:11:56,170
so they're been plenty of opportunities

307
00:11:53,470 --> 00:12:00,100
for people to touch them test them

308
00:11:56,170 --> 00:12:02,140
reprogram them and you know do something

309
00:12:00,100 --> 00:12:04,780
that you might not actually have good

310
00:12:02,140 --> 00:12:07,300
record-keeping of and probably not good

311
00:12:04,780 --> 00:12:09,189
ways to verify before it gets to you and

312
00:12:07,300 --> 00:12:13,599
you're ready to start using and running

313
00:12:09,190 --> 00:12:18,490
that server with you know whatever is on

314
00:12:13,600 --> 00:12:21,670
it so a big part of the problem we're

315
00:12:18,490 --> 00:12:23,560
trying to solve here is once the system

316
00:12:21,670 --> 00:12:27,040
arrives it's in my data center it's now

317
00:12:23,560 --> 00:12:30,599
in a secured physical location how do we

318
00:12:27,040 --> 00:12:30,599
know what's really in there right

319
00:12:30,750 --> 00:12:34,510
there's been some testing

320
00:12:32,740 --> 00:12:36,520
obviously that is verified that the

321
00:12:34,510 --> 00:12:40,090
system functions or we would have

322
00:12:36,520 --> 00:12:42,730
acted it and sent it back but in most

323
00:12:40,090 --> 00:12:44,560
cases the firmware on there is not going

324
00:12:42,730 --> 00:12:46,120
to be what we actually want the the

325
00:12:44,560 --> 00:12:50,260
process of building this server has

326
00:12:46,120 --> 00:12:52,000
taken on a good cycle three months

327
00:12:50,260 --> 00:12:54,040
so whatever versions of firmware were

328
00:12:52,000 --> 00:12:56,500
installed on this thing to test it as it

329
00:12:54,040 --> 00:12:58,300
was getting built are almost certainly

330
00:12:56,500 --> 00:12:59,560
out of date by the time we get it and we

331
00:12:58,300 --> 00:13:02,530
want to run it some of them might still

332
00:12:59,560 --> 00:13:04,800
be okay but the the odds are that

333
00:13:02,530 --> 00:13:07,510
everything on theirs out of date

334
00:13:04,800 --> 00:13:11,069
probably has known bugs that we want to

335
00:13:07,510 --> 00:13:14,620
fix and get rid of under mediate and

336
00:13:11,070 --> 00:13:17,260
test and verify that hey we've got this

337
00:13:14,620 --> 00:13:19,930
thing in the data center how do we know

338
00:13:17,260 --> 00:13:21,370
that before we hand it to the customer

339
00:13:19,930 --> 00:13:23,140
we want to give everybody a pristine

340
00:13:21,370 --> 00:13:26,350
system with a known set of firmware on

341
00:13:23,140 --> 00:13:27,640
it how do we verify that on the system

342
00:13:26,350 --> 00:13:36,190
when it's ready to deploy when it's

343
00:13:27,640 --> 00:13:38,590
ready to use so before we go into the

344
00:13:36,190 --> 00:13:39,880
new thing we're talking about what what

345
00:13:38,590 --> 00:13:42,310
we did to solve this problem I'm going

346
00:13:39,880 --> 00:13:45,189
to go through a few of the existing

347
00:13:42,310 --> 00:13:47,560
solutions to this that are in the wild

348
00:13:45,190 --> 00:13:50,140
today so the first place you want to

349
00:13:47,560 --> 00:13:54,130
start is with signed firmware this means

350
00:13:50,140 --> 00:13:57,910
that you have vendor signs the bits that

351
00:13:54,130 --> 00:14:00,790
they put into the device and this should

352
00:13:57,910 --> 00:14:02,980
prevent unintended code from running if

353
00:14:00,790 --> 00:14:09,250
they have done everything perfectly and

354
00:14:02,980 --> 00:14:12,780
have no bugs this most most devices are

355
00:14:09,250 --> 00:14:15,250
moving to sign firmware the majority of

356
00:14:12,780 --> 00:14:17,380
manufacturers care about this it keeps

357
00:14:15,250 --> 00:14:19,990
customers from breaking their devices so

358
00:14:17,380 --> 00:14:22,600
that's generally a good thing and this

359
00:14:19,990 --> 00:14:26,020
really wants you to do that

360
00:14:22,600 --> 00:14:30,940
this works best when one vendor controls

361
00:14:26,020 --> 00:14:36,460
the system end to end the limitations

362
00:14:30,940 --> 00:14:38,020
though you have you know it all the

363
00:14:36,460 --> 00:14:39,970
signature is saying is these are the

364
00:14:38,020 --> 00:14:41,439
bits that I intended to put in it

365
00:14:39,970 --> 00:14:42,760
doesn't say that there are no bugs

366
00:14:41,440 --> 00:14:46,900
it doesn't say there are no backdoors

367
00:14:42,760 --> 00:14:48,860
and it doesn't even say that we aren't

368
00:14:46,900 --> 00:14:51,020
that it can prevent unsigned

369
00:14:48,860 --> 00:14:53,360
code for running it just says using the

370
00:14:51,020 --> 00:14:56,750
normal process we try to try to run only

371
00:14:53,360 --> 00:14:59,870
sign code the other problem we have is

372
00:14:56,750 --> 00:15:02,330
that runtime firmware could prevent the

373
00:14:59,870 --> 00:15:06,290
installation or the update of the new

374
00:15:02,330 --> 00:15:08,690
firmware you want to put in this is a

375
00:15:06,290 --> 00:15:10,459
fairly common feature of the BIOS

376
00:15:08,690 --> 00:15:12,410
backdoors when people have been

377
00:15:10,460 --> 00:15:14,390
developing those they want to prevent

378
00:15:12,410 --> 00:15:17,900
you from taking their backdoor out and

379
00:15:14,390 --> 00:15:20,060
so accepting accepting accepting an

380
00:15:17,900 --> 00:15:21,470
update and saying great I've applied

381
00:15:20,060 --> 00:15:24,560
that and then dropping it on the floor

382
00:15:21,470 --> 00:15:25,850
is a pretty easy thing for for a runtime

383
00:15:24,560 --> 00:15:27,650
firmware to do and it's very hard to

384
00:15:25,850 --> 00:15:30,860
verify that that sort of thing hasn't

385
00:15:27,650 --> 00:15:32,240
happened the next technique that people

386
00:15:30,860 --> 00:15:35,660
are using is what's called secure boot

387
00:15:32,240 --> 00:15:38,720
this is definitely better it generally

388
00:15:35,660 --> 00:15:42,079
consists of a ROM a very small ROM this

389
00:15:38,720 --> 00:15:43,970
mask um to the device which takes a

390
00:15:42,080 --> 00:15:46,640
checksum of the firmware that it's about

391
00:15:43,970 --> 00:15:49,610
to load and make sure that it's signed

392
00:15:46,640 --> 00:15:52,970
by the vendor before it actually runs

393
00:15:49,610 --> 00:15:54,800
the firmware this is great because it

394
00:15:52,970 --> 00:15:58,220
means that you your code is checked at

395
00:15:54,800 --> 00:15:59,810
every every boot the downside is it

396
00:15:58,220 --> 00:16:03,220
doesn't give you any runtime protection

397
00:15:59,810 --> 00:16:09,369
and it also still has the issue

398
00:16:03,220 --> 00:16:11,480
associated with associated with

399
00:16:09,370 --> 00:16:13,700
configuration which is expected to be

400
00:16:11,480 --> 00:16:15,350
changed at runtime by the customer the

401
00:16:13,700 --> 00:16:17,360
vendor can't sign that because it

402
00:16:15,350 --> 00:16:20,150
doesn't know what the right answers are

403
00:16:17,360 --> 00:16:23,390
there and oftentimes we'll see exploits

404
00:16:20,150 --> 00:16:24,949
that are actually the exploit is written

405
00:16:23,390 --> 00:16:27,650
into the configuration area and that

406
00:16:24,950 --> 00:16:29,690
exploits a parser that allows you to

407
00:16:27,650 --> 00:16:32,270
leverage code execution even though the

408
00:16:29,690 --> 00:16:36,020
device is running signed code from the

409
00:16:32,270 --> 00:16:37,750
vendor the other difficulty with this is

410
00:16:36,020 --> 00:16:40,610
it's very hard to end up with a

411
00:16:37,750 --> 00:16:43,610
functional room revocation mechanism

412
00:16:40,610 --> 00:16:47,030
where if you have a downgrade

413
00:16:43,610 --> 00:16:49,790
vulnerability or the you know vendor has

414
00:16:47,030 --> 00:16:52,300
lost their keys updating often requires

415
00:16:49,790 --> 00:16:55,160
actually just replacing the hardware

416
00:16:52,300 --> 00:16:58,490
that's hard to do at scale and it's very

417
00:16:55,160 --> 00:17:00,360
expensive the by the way the

418
00:16:58,490 --> 00:17:03,370
configuration

419
00:17:00,360 --> 00:17:05,740
vulnerability that I discussed is how we

420
00:17:03,370 --> 00:17:15,369
got into the Intel I me blast what was

421
00:17:05,740 --> 00:17:19,329
that the most recent one so the other

422
00:17:15,369 --> 00:17:20,708
thing that we have in devices is or that

423
00:17:19,329 --> 00:17:22,300
we would like to have in devices as a

424
00:17:20,709 --> 00:17:25,600
way to measure what firmware is running

425
00:17:22,300 --> 00:17:29,409
this is rarer we're working on making it

426
00:17:25,599 --> 00:17:34,000
more common but usually this this is a

427
00:17:29,410 --> 00:17:35,710
process where the device signs sign

428
00:17:34,000 --> 00:17:37,720
something using a private key stored in

429
00:17:35,710 --> 00:17:40,420
the device gives you back that value and

430
00:17:37,720 --> 00:17:42,400
when this is implemented correctly it

431
00:17:40,420 --> 00:17:44,530
gives you assurance that the code that

432
00:17:42,400 --> 00:17:47,980
is running is the code that you intended

433
00:17:44,530 --> 00:17:49,870
to load so TPMS are supposed to work

434
00:17:47,980 --> 00:17:53,920
this way Google site and chip works this

435
00:17:49,870 --> 00:17:56,020
way the limit this is also limited

436
00:17:53,920 --> 00:17:58,720
though the biggest one is very few

437
00:17:56,020 --> 00:18:02,290
devices support it and the measurements

438
00:17:58,720 --> 00:18:05,560
are often unstable as firmware changes

439
00:18:02,290 --> 00:18:07,270
as pieces of configuration change you

440
00:18:05,560 --> 00:18:08,790
you can't pass over the configuration

441
00:18:07,270 --> 00:18:12,370
for the same reason you can't sign it

442
00:18:08,790 --> 00:18:13,899
and unless you're in an a very very

443
00:18:12,370 --> 00:18:15,909
carefully controlled environment and

444
00:18:13,900 --> 00:18:18,160
even then serial numbers and MAC

445
00:18:15,910 --> 00:18:20,110
addresses and so on mean that you don't

446
00:18:18,160 --> 00:18:22,990
have don't necessarily have matching

447
00:18:20,110 --> 00:18:25,510
hashes so this is this is hard to do at

448
00:18:22,990 --> 00:18:28,510
scale it's easier if you have very very

449
00:18:25,510 --> 00:18:33,160
similar hardware but it's it's difficult

450
00:18:28,510 --> 00:18:35,230
to do effectively so our challenge

451
00:18:33,160 --> 00:18:37,510
signing is insufficient as currently

452
00:18:35,230 --> 00:18:41,230
implemented most devices don't give us

453
00:18:37,510 --> 00:18:42,780
measurement and we need assurance about

454
00:18:41,230 --> 00:18:48,420
the running firmware we need to know

455
00:18:42,780 --> 00:18:48,420
what is inside our device so

456
00:18:54,010 --> 00:18:58,700
so as someone noticed from my water

457
00:18:56,690 --> 00:19:01,520
bottle here I've not always done

458
00:18:58,700 --> 00:19:03,760
security before I did security I did

459
00:19:01,520 --> 00:19:06,049
hardware engineering and validation and

460
00:19:03,760 --> 00:19:08,990
you know one of the things about

461
00:19:06,049 --> 00:19:10,789
pre-production Hardware just like you

462
00:19:08,990 --> 00:19:13,360
know your first attempt to compile

463
00:19:10,789 --> 00:19:16,280
software it doesn't ever actually work

464
00:19:13,360 --> 00:19:18,770
the first version of something new is

465
00:19:16,280 --> 00:19:21,080
going to have a lot of bugs things that

466
00:19:18,770 --> 00:19:24,408
you expect it to work right even very

467
00:19:21,080 --> 00:19:26,178
simple things very critical things are

468
00:19:24,409 --> 00:19:29,020
not going to work right and you're gonna

469
00:19:26,179 --> 00:19:30,830
end up with either a very expensive

470
00:19:29,020 --> 00:19:32,030
doorstop that you thought was going to

471
00:19:30,830 --> 00:19:34,580
be a prototype you could use for

472
00:19:32,030 --> 00:19:37,010
development or you're going to waste a

473
00:19:34,580 --> 00:19:40,250
lot of money building more prototypes as

474
00:19:37,010 --> 00:19:42,169
you fix every little bug that gets cost

475
00:19:40,250 --> 00:19:45,020
and time prohibitive real quickly if you

476
00:19:42,169 --> 00:19:46,880
have to do new production cycles every

477
00:19:45,020 --> 00:19:48,289
time you need a bug fix as you're going

478
00:19:46,880 --> 00:19:50,450
through trying to bring up a new piece

479
00:19:48,289 --> 00:19:52,309
of hardware as I mentioned earlier

480
00:19:50,450 --> 00:19:57,679
manufacturing is hard and takes a long

481
00:19:52,309 --> 00:19:59,570
time so hardware manufacturers do have

482
00:19:57,679 --> 00:20:01,490
capabilities to take something that is

483
00:19:59,570 --> 00:20:03,470
not working right that doesn't have good

484
00:20:01,490 --> 00:20:06,710
firmware on it that has bugs in it and

485
00:20:03,470 --> 00:20:08,960
still do something with it right in the

486
00:20:06,710 --> 00:20:12,470
process of taking sand and turning it

487
00:20:08,960 --> 00:20:14,090
into a computer involves a lot of work

488
00:20:12,470 --> 00:20:16,340
and a lot of debug and a lot of

489
00:20:14,090 --> 00:20:17,720
validation and the hardware engineering

490
00:20:16,340 --> 00:20:19,220
community's put a lot of effort into

491
00:20:17,720 --> 00:20:21,260
figuring out how to do that how to

492
00:20:19,220 --> 00:20:24,260
determine hey does this transistor work

493
00:20:21,260 --> 00:20:27,350
hey does this CPU work hey does this

494
00:20:24,260 --> 00:20:31,908
laptop work without throwing it out and

495
00:20:27,350 --> 00:20:34,070
building a whole new thing so you know

496
00:20:31,909 --> 00:20:36,020
what what happens is when you're doing

497
00:20:34,070 --> 00:20:38,480
firmware development right you've got a

498
00:20:36,020 --> 00:20:40,158
platform you know hot off the presses

499
00:20:38,480 --> 00:20:42,049
you've got this brand new thing in front

500
00:20:40,159 --> 00:20:43,850
of you you're really excited you want to

501
00:20:42,049 --> 00:20:45,679
boot it up right you just want to like

502
00:20:43,850 --> 00:20:48,760
get BIOS to run through so you can get

503
00:20:45,679 --> 00:20:51,500
to an EFI prompt then test some things

504
00:20:48,760 --> 00:20:53,510
the you first get that there's no

505
00:20:51,500 --> 00:20:55,940
firmware right you've maybe done

506
00:20:53,510 --> 00:20:58,010
something in an emulator that you have

507
00:20:55,940 --> 00:20:59,900
to put on here like the very first time

508
00:20:58,010 --> 00:21:01,640
there's nothing on the system to even

509
00:20:59,900 --> 00:21:02,600
accept the firmware update right you

510
00:21:01,640 --> 00:21:04,460
can't run a capsule update

511
00:21:02,600 --> 00:21:08,299
before you've got the very first bios

512
00:21:04,460 --> 00:21:10,370
installed the update routines are often

513
00:21:08,299 --> 00:21:11,570
not the first thing you develop right

514
00:21:10,370 --> 00:21:13,070
you're not worried about updating

515
00:21:11,570 --> 00:21:17,389
something if you can't even get it to

516
00:21:13,070 --> 00:21:19,010
power on and like accept commands very

517
00:21:17,390 --> 00:21:20,720
often when you're doing firmware

518
00:21:19,010 --> 00:21:23,809
development you will make a mistake and

519
00:21:20,720 --> 00:21:25,730
the system will hang and it's real hard

520
00:21:23,809 --> 00:21:28,399
if it hangs before you can get back in

521
00:21:25,730 --> 00:21:31,240
to update it to get your new code in to

522
00:21:28,400 --> 00:21:33,590
see if you're bug fix or bug fix works

523
00:21:31,240 --> 00:21:36,080
another big problem even if you're doing

524
00:21:33,590 --> 00:21:39,049
signed firmware if you have implemented

525
00:21:36,080 --> 00:21:40,549
that incorrectly you now have a problem

526
00:21:39,049 --> 00:21:42,408
because now you can't update because

527
00:21:40,549 --> 00:21:44,000
your signature checking is is broken in

528
00:21:42,409 --> 00:21:47,390
some way that prevents it from accepting

529
00:21:44,000 --> 00:21:49,720
an update you know very often hardware

530
00:21:47,390 --> 00:21:51,950
features don't work if you're

531
00:21:49,720 --> 00:21:54,470
non-volatile storage controller has some

532
00:21:51,950 --> 00:21:56,539
bugs you may not be able to do rights

533
00:21:54,470 --> 00:21:58,520
like there there may be protocol issues

534
00:21:56,539 --> 00:22:00,860
there may be other problems that just

535
00:21:58,520 --> 00:22:02,510
prevent the system from working as

536
00:22:00,860 --> 00:22:04,219
intended so if you're used to dealing

537
00:22:02,510 --> 00:22:06,110
with production hardware that mostly

538
00:22:04,220 --> 00:22:08,990
works you're like we'll just run the

539
00:22:06,110 --> 00:22:09,979
update and that is just not something

540
00:22:08,990 --> 00:22:12,890
that's possible in pre-production

541
00:22:09,980 --> 00:22:14,390
hardware you can't rely on most of the

542
00:22:12,890 --> 00:22:16,730
normal functionality that you would use

543
00:22:14,390 --> 00:22:18,320
to do things because it it is either not

544
00:22:16,730 --> 00:22:20,919
they're not implemented or just not

545
00:22:18,320 --> 00:22:20,918
working properly

546
00:22:22,840 --> 00:22:28,340
these have largely been solved right we

547
00:22:26,419 --> 00:22:29,990
are able to ship new systems I think

548
00:22:28,340 --> 00:22:31,908
most of the people in this room can go

549
00:22:29,990 --> 00:22:33,950
out and buy like a new computer or you

550
00:22:31,909 --> 00:22:35,539
know work on new systems this obviously

551
00:22:33,950 --> 00:22:38,210
isn't blocking us from shipping things

552
00:22:35,539 --> 00:22:40,960
this is not an unsolvable problem right

553
00:22:38,210 --> 00:22:43,400
and what's happened is most Hardware

554
00:22:40,960 --> 00:22:45,140
both components and higher-level

555
00:22:43,400 --> 00:22:48,110
platforms that are you know components

556
00:22:45,140 --> 00:22:51,230
put together have recovery mechanisms

557
00:22:48,110 --> 00:22:53,689
that allow the developers to continue

558
00:22:51,230 --> 00:22:55,640
running tests - you know load new

559
00:22:53,690 --> 00:22:59,150
firmware into the device when it's not

560
00:22:55,640 --> 00:23:01,490
working and these mechanisms don't

561
00:22:59,150 --> 00:23:03,770
depend on certain levels of

562
00:23:01,490 --> 00:23:06,559
functionality of the software right

563
00:23:03,770 --> 00:23:08,360
they're explicitly designed to require

564
00:23:06,559 --> 00:23:11,780
as little of the system to be in a

565
00:23:08,360 --> 00:23:14,899
functional state as possible so things

566
00:23:11,780 --> 00:23:16,399
like JTAG is really designed to work

567
00:23:14,900 --> 00:23:18,860
with a very very small

568
00:23:16,400 --> 00:23:22,220
number of transistors actually operating

569
00:23:18,860 --> 00:23:24,169
normally and let you find the other ones

570
00:23:22,220 --> 00:23:25,760
that aren't right so if there's if

571
00:23:24,170 --> 00:23:29,120
there's problems with the system as long

572
00:23:25,760 --> 00:23:30,320
as your JTAG controller is working you

573
00:23:29,120 --> 00:23:32,419
should be able to get in there and go

574
00:23:30,320 --> 00:23:33,710
start querying other parts go put

575
00:23:32,420 --> 00:23:36,290
instructions in and make sure they're

576
00:23:33,710 --> 00:23:38,900
executing properly and do things to the

577
00:23:36,290 --> 00:23:40,460
system in a way that it doesn't really

578
00:23:38,900 --> 00:23:42,320
matter what the state of the rest of the

579
00:23:40,460 --> 00:23:44,390
system is right it's designed to work

580
00:23:42,320 --> 00:23:46,700
regardless of what is currently

581
00:23:44,390 --> 00:23:49,040
happening on the system or what has

582
00:23:46,700 --> 00:23:50,090
happened in the past because it was

583
00:23:49,040 --> 00:23:51,500
designed under the assumption that

584
00:23:50,090 --> 00:23:53,179
probably everything is still broken

585
00:23:51,500 --> 00:23:54,860
right and we need to go and be able to

586
00:23:53,180 --> 00:23:58,460
diagnose and figure out what's going on

587
00:23:54,860 --> 00:24:00,110
and then make it work again lots of

588
00:23:58,460 --> 00:24:03,020
systems have recovery mechanisms built

589
00:24:00,110 --> 00:24:05,479
into ROM right there's real a real

590
00:24:03,020 --> 00:24:08,480
common implementation is you have a

591
00:24:05,480 --> 00:24:10,790
jumper on the system and you put the you

592
00:24:08,480 --> 00:24:12,350
know put a jumper on a header and now it

593
00:24:10,790 --> 00:24:14,030
goes into some failsafe mode that allows

594
00:24:12,350 --> 00:24:17,990
you to recover the system into a known

595
00:24:14,030 --> 00:24:19,490
state lots of systems have like debug

596
00:24:17,990 --> 00:24:21,710
serial ports that are active all the

597
00:24:19,490 --> 00:24:25,220
time no matter what the actual firmware

598
00:24:21,710 --> 00:24:26,960
is doing and there's like way too many

599
00:24:25,220 --> 00:24:29,030
other proprietary mechanisms to attempt

600
00:24:26,960 --> 00:24:30,890
to go into all of them but you know

601
00:24:29,030 --> 00:24:33,350
everybody who's done this has had to

602
00:24:30,890 --> 00:24:36,590
come up with something to allow them to

603
00:24:33,350 --> 00:24:39,469
go back and recover the system when it's

604
00:24:36,590 --> 00:24:41,000
not working because you know you can't

605
00:24:39,470 --> 00:24:45,110
brick all your prototypes if you want to

606
00:24:41,000 --> 00:24:48,530
ever ship product so we asked ourselves

607
00:24:45,110 --> 00:24:51,320
like hey there are mechanisms in the

608
00:24:48,530 --> 00:24:53,210
server we can use to force it into a

609
00:24:51,320 --> 00:24:54,800
known state like our firmware developers

610
00:24:53,210 --> 00:24:57,260
are using them during the course of

611
00:24:54,800 --> 00:25:03,440
their day jobs can we leverage those for

612
00:24:57,260 --> 00:25:07,150
security - I don't think anybody got the

613
00:25:03,440 --> 00:25:07,150
joke this is the band yes

614
00:25:15,049 --> 00:25:21,379
I somebody suggested we like play the

615
00:25:19,370 --> 00:25:28,639
song there and I'm like I don't want to

616
00:25:21,380 --> 00:25:30,679
rely on audio working so yeah the answer

617
00:25:28,640 --> 00:25:33,919
is yes right we can use these recovery

618
00:25:30,679 --> 00:25:36,140
mechanisms to get very high assurance of

619
00:25:33,919 --> 00:25:42,200
the firmware on our platform right we

620
00:25:36,140 --> 00:25:45,620
can go in up apply the updates to like

621
00:25:42,200 --> 00:25:48,380
the runtime the mutable firmware without

622
00:25:45,620 --> 00:25:52,760
relying on any code that's actually

623
00:25:48,380 --> 00:25:54,649
running on the system right and this

624
00:25:52,760 --> 00:25:56,029
this gives us assurance because the the

625
00:25:54,649 --> 00:25:58,178
mechanism we're using doesn't depend on

626
00:25:56,029 --> 00:26:00,380
the runtime code it doesn't depend on

627
00:25:58,179 --> 00:26:03,289
what's currently on there that we don't

628
00:26:00,380 --> 00:26:05,779
know right if if we assume that like

629
00:26:03,289 --> 00:26:08,450
very malicious things are on the

630
00:26:05,779 --> 00:26:10,549
platform or it's just been completely

631
00:26:08,450 --> 00:26:13,700
erased and the thing is a brick and we

632
00:26:10,549 --> 00:26:16,070
can't can't run the normal update

633
00:26:13,700 --> 00:26:17,809
routines like this gives us a mechanism

634
00:26:16,070 --> 00:26:21,200
to go in sort of regardless of where the

635
00:26:17,809 --> 00:26:25,700
system is now hit it and bring it back

636
00:26:21,200 --> 00:26:27,950
to where we want it to be and so this

637
00:26:25,700 --> 00:26:29,960
gives us assurance because it doesn't

638
00:26:27,950 --> 00:26:31,700
really matter where it is now we believe

639
00:26:29,960 --> 00:26:33,529
the mechanism works regardless of what's

640
00:26:31,700 --> 00:26:35,090
currently on there and when we're done

641
00:26:33,529 --> 00:26:37,940
using this mechanism and pushing the

642
00:26:35,090 --> 00:26:40,010
firmware we want into the system we have

643
00:26:37,940 --> 00:26:41,539
very high confidence that you know when

644
00:26:40,010 --> 00:26:42,919
we start executing that firmware that's

645
00:26:41,539 --> 00:26:45,408
gonna be what's really running because

646
00:26:42,919 --> 00:26:46,789
the mechanism we use to put it in you

647
00:26:45,409 --> 00:26:50,840
know was kind of oblivious to whatever

648
00:26:46,789 --> 00:26:53,260
else was going on at the time and so

649
00:26:50,840 --> 00:26:57,529
there's there's lots of ways to do this

650
00:26:53,260 --> 00:27:00,080
as I mentioned just a minute ago options

651
00:26:57,529 --> 00:27:02,950
from you know booting the device into

652
00:27:00,080 --> 00:27:05,840
you know a specific recovery mode

653
00:27:02,950 --> 00:27:07,880
JTAG often allows you to load known code

654
00:27:05,840 --> 00:27:11,149
onto a system and then start executing

655
00:27:07,880 --> 00:27:13,730
it regardless of what's there most of

656
00:27:11,149 --> 00:27:15,139
this ends up being somewhat specific to

657
00:27:13,730 --> 00:27:17,750
the device the process is always a

658
00:27:15,139 --> 00:27:19,800
little different but almost everything

659
00:27:17,750 --> 00:27:22,320
we've looked at has some mechanism

660
00:27:19,800 --> 00:27:23,760
to do this because that's the thing the

661
00:27:22,320 --> 00:27:31,800
developers of the system have been using

662
00:27:23,760 --> 00:27:37,230
to do this now I just covered most of

663
00:27:31,800 --> 00:27:39,810
this so you know real common one is is

664
00:27:37,230 --> 00:27:41,610
sort of the jumper thing and the device

665
00:27:39,810 --> 00:27:43,530
will go into you know it's usually

666
00:27:41,610 --> 00:27:46,080
called a recovery or an anti brick mode

667
00:27:43,530 --> 00:27:48,330
and very often it'll just sit there and

668
00:27:46,080 --> 00:27:49,800
wait for some custom undocumented vendor

669
00:27:48,330 --> 00:27:52,770
utility to supply it a new firmware

670
00:27:49,800 --> 00:27:54,360
image that it will then like write to

671
00:27:52,770 --> 00:27:57,510
its storage and then when you reboot you

672
00:27:54,360 --> 00:28:00,090
come back up into a known state and if

673
00:27:57,510 --> 00:28:02,790
you can convince yourself that that

674
00:28:00,090 --> 00:28:04,740
mechanism will actually you know write

675
00:28:02,790 --> 00:28:07,430
the firmware you're giving it to the

676
00:28:04,740 --> 00:28:09,480
storage regardless of what's on there

677
00:28:07,430 --> 00:28:11,220
then when you can be confident when you

678
00:28:09,480 --> 00:28:13,550
reboot that's what's actually there

679
00:28:11,220 --> 00:28:16,320
[Music]

680
00:28:13,550 --> 00:28:18,270
sometimes the it's a multi-stage process

681
00:28:16,320 --> 00:28:19,800
right sometimes you update just the

682
00:28:18,270 --> 00:28:21,450
bootloader and then you reboot into that

683
00:28:19,800 --> 00:28:25,500
and go do a normal update from the

684
00:28:21,450 --> 00:28:27,450
bootloader sometimes it's you know you

685
00:28:25,500 --> 00:28:30,720
can use JTAG to force an own thing in

686
00:28:27,450 --> 00:28:33,240
there or provide an image over a serial

687
00:28:30,720 --> 00:28:34,860
debug port that the runtime firmware

688
00:28:33,240 --> 00:28:38,670
doesn't actually have access to

689
00:28:34,860 --> 00:28:41,850
interfere with the mechanisms vary a lot

690
00:28:38,670 --> 00:28:53,160
like I say and it's quite device

691
00:28:41,850 --> 00:28:56,429
specific so I thought this was in the

692
00:28:53,160 --> 00:28:58,500
next section so how do we use this right

693
00:28:56,430 --> 00:29:02,040
we've got tens of thousands of servers

694
00:28:58,500 --> 00:29:03,570
in data centers you know putting jumpers

695
00:29:02,040 --> 00:29:05,850
on things is great when they're sitting

696
00:29:03,570 --> 00:29:08,280
on your desk that doesn't work when you

697
00:29:05,850 --> 00:29:12,810
need to do it to ten thousand systems on

698
00:29:08,280 --> 00:29:15,899
a you know daily basis potentially so in

699
00:29:12,810 --> 00:29:19,530
order to operationalize this we built

700
00:29:15,900 --> 00:29:22,290
custom hardware we kind of had to it

701
00:29:19,530 --> 00:29:23,879
gives us connectivity to you know

702
00:29:22,290 --> 00:29:25,790
whatever the interfaces on the specific

703
00:29:23,880 --> 00:29:29,520
components we're trying to require are

704
00:29:25,790 --> 00:29:31,500
it has things like you art in JTAG and

705
00:29:29,520 --> 00:29:33,210
other interfaces that we can plug into

706
00:29:31,500 --> 00:29:34,500
different components

707
00:29:33,210 --> 00:29:36,000
we intentionally tried to make it

708
00:29:34,500 --> 00:29:37,560
flexible enough to support lots of

709
00:29:36,000 --> 00:29:41,280
different devices from lots of different

710
00:29:37,560 --> 00:29:42,899
vendors and it's actually just sort of a

711
00:29:41,280 --> 00:29:49,080
simple thing and it gives us a path to

712
00:29:42,900 --> 00:29:51,810
go from our server management system to

713
00:29:49,080 --> 00:29:53,790
actually go you know drive whatever

714
00:29:51,810 --> 00:29:55,590
interface on the specific device we need

715
00:29:53,790 --> 00:30:01,340
in order to put it into the recovery

716
00:29:55,590 --> 00:30:04,889
state and because we're relying on this

717
00:30:01,340 --> 00:30:08,459
right this is this is now becoming the

718
00:30:04,890 --> 00:30:09,600
thing we trust in order to repave all

719
00:30:08,460 --> 00:30:12,270
the firmware on the rest of our server

720
00:30:09,600 --> 00:30:15,629
we very explicit made it not run time

721
00:30:12,270 --> 00:30:17,430
updatable so if we need to reprogram it

722
00:30:15,630 --> 00:30:19,830
we have to we do have to put hands on to

723
00:30:17,430 --> 00:30:21,390
reprogram our recovery device and that

724
00:30:19,830 --> 00:30:23,129
was a very intentional choice because

725
00:30:21,390 --> 00:30:25,980
that means that there is no mechanism

726
00:30:23,130 --> 00:30:27,630
from software running on the system to

727
00:30:25,980 --> 00:30:29,730
modify our recovery device there's just

728
00:30:27,630 --> 00:30:32,870
no wires there there's no connectivity

729
00:30:29,730 --> 00:30:36,030
it can't be done because it's not

730
00:30:32,870 --> 00:30:37,709
connected that way and that means that

731
00:30:36,030 --> 00:30:39,990
when we do use this we've got very high

732
00:30:37,710 --> 00:30:42,060
assurance that you know we programmed it

733
00:30:39,990 --> 00:30:43,530
it is what we expected you know we've

734
00:30:42,060 --> 00:30:47,040
got the firmware running on our recovery

735
00:30:43,530 --> 00:30:49,290
device that we expect and because we

736
00:30:47,040 --> 00:30:52,230
have physical possession of the systems

737
00:30:49,290 --> 00:30:53,760
and control over who has access to do

738
00:30:52,230 --> 00:30:55,470
that programming we have pretty high

739
00:30:53,760 --> 00:30:57,800
assurance that it's actually working as

740
00:30:55,470 --> 00:30:57,800
intended

741
00:31:08,800 --> 00:31:11,800
okay

742
00:31:17,380 --> 00:31:23,890
so as I was saying we did build custom

743
00:31:20,120 --> 00:31:27,800
hardware it's actually not interesting

744
00:31:23,890 --> 00:31:30,770
it's not much more than an Arduino on a

745
00:31:27,800 --> 00:31:32,570
custom PCIe form factor card it turns

746
00:31:30,770 --> 00:31:36,139
out if you want to stick something into

747
00:31:32,570 --> 00:31:37,700
a server and you need connectivity to

748
00:31:36,140 --> 00:31:39,260
something outside the server you don't

749
00:31:37,700 --> 00:31:43,370
have a lot of options for what form

750
00:31:39,260 --> 00:31:45,500
factor that's gonna be this is the there

751
00:31:43,370 --> 00:31:48,439
are PCIe edge fingers on there

752
00:31:45,500 --> 00:31:50,200
the only thing hooked up is power we

753
00:31:48,440 --> 00:31:51,980
draw power from the server and that's it

754
00:31:50,200 --> 00:31:57,140
turns out we don't need to recover

755
00:31:51,980 --> 00:32:00,800
servers that don't have power doesn't

756
00:31:57,140 --> 00:32:02,150
help much so it's like it the the form

757
00:32:00,800 --> 00:32:04,730
factor is kind of irrelevant it's

758
00:32:02,150 --> 00:32:06,680
basically an Arduino on a custom PCB and

759
00:32:04,730 --> 00:32:08,330
like I was saying it's got connectivity

760
00:32:06,680 --> 00:32:11,090
to a bunch of things so we can plug some

761
00:32:08,330 --> 00:32:13,790
wires in make the operations people very

762
00:32:11,090 --> 00:32:17,899
unhappy about the extra wires and use

763
00:32:13,790 --> 00:32:22,190
those see nodding in the back very

764
00:32:17,900 --> 00:32:24,110
unhappy and and use those to you know

765
00:32:22,190 --> 00:32:25,820
instead of having to walk up and

766
00:32:24,110 --> 00:32:27,500
physically place a jumper onto a header

767
00:32:25,820 --> 00:32:31,240
we now have wires going to it that we

768
00:32:27,500 --> 00:32:31,240
can flip through a GPIO on this thing

769
00:32:32,110 --> 00:32:35,530
questions now is fine

770
00:32:41,490 --> 00:32:54,240
it's not much oh the time wearing it in

771
00:32:48,900 --> 00:32:57,540
I don't actually know that I remember it

772
00:32:54,240 --> 00:33:00,710
like the cost per board was trivial like

773
00:32:57,540 --> 00:33:17,670
it you did take a while to get the

774
00:33:00,710 --> 00:33:22,370
people that is that is a feature not a

775
00:33:17,670 --> 00:33:25,110
bug I don't know how many firmware

776
00:33:22,370 --> 00:33:28,979
updates you get from your vendors

777
00:33:25,110 --> 00:33:30,959
I get a lot some of them don't work sure

778
00:33:28,980 --> 00:33:35,090
how many of your firmware internal

779
00:33:30,960 --> 00:33:35,090
firmware updates have critical errors

780
00:33:44,040 --> 00:33:51,399
so I mean we have we have in fact sorry

781
00:33:49,510 --> 00:33:53,200
I should be close to the mic so we have

782
00:33:51,400 --> 00:33:54,580
in fact where this has where I know this

783
00:33:53,200 --> 00:33:56,740
has worked and where this has saved a

784
00:33:54,580 --> 00:33:58,330
lot of time and money is we actually at

785
00:33:56,740 --> 00:33:59,920
one point did get a firmware update from

786
00:33:58,330 --> 00:34:01,928
a vendor to fix a bug that introduced a

787
00:33:59,920 --> 00:34:05,260
new bug that basically bricked a bunch

788
00:34:01,929 --> 00:34:07,059
of devices and we were able to use this

789
00:34:05,260 --> 00:34:09,010
to roll back to the previous version on

790
00:34:07,059 --> 00:34:10,509
a bunch of devices that were otherwise

791
00:34:09,010 --> 00:34:15,250
inoperable and would not have been able

792
00:34:10,510 --> 00:34:17,169
to be rolled back automatically so all

793
00:34:15,250 --> 00:34:19,600
the pain it caused to try and install

794
00:34:17,168 --> 00:34:22,060
and use this thing everybody was real

795
00:34:19,600 --> 00:34:24,179
happy we had it when we started needing

796
00:34:22,060 --> 00:34:24,179
it

797
00:34:29,760 --> 00:34:35,780
and so let's talk a little bit about the

798
00:34:33,480 --> 00:34:38,550
limitations including what you mentioned

799
00:34:35,780 --> 00:34:40,649
we have we had to build this custom if

800
00:34:38,550 --> 00:34:43,080
this is not something that we could you

801
00:34:40,649 --> 00:34:44,580
know if we gave this gave you one of

802
00:34:43,080 --> 00:34:47,969
ours it wouldn't be very useful to you

803
00:34:44,580 --> 00:34:49,830
for your servers the other thing is you

804
00:34:47,969 --> 00:34:51,779
really need to cooperate with the

805
00:34:49,830 --> 00:34:54,840
manufacturers that you're doing this to

806
00:34:51,780 --> 00:34:56,850
you need you need information from your

807
00:34:54,840 --> 00:34:58,619
server vendor or you're gonna spend a

808
00:34:56,850 --> 00:35:00,839
lot of time reverse engineering stuff

809
00:34:58,619 --> 00:35:02,369
what you made anyway even if the vendors

810
00:35:00,840 --> 00:35:04,440
are being cooperative

811
00:35:02,369 --> 00:35:08,730
unfortunately they often don't know how

812
00:35:04,440 --> 00:35:10,260
their device works either but it's it's

813
00:35:08,730 --> 00:35:13,290
a bunch of work especially if you're

814
00:35:10,260 --> 00:35:15,450
trying to do it without cooperation the

815
00:35:13,290 --> 00:35:18,900
other issue is on many of these devices

816
00:35:15,450 --> 00:35:21,629
they the flash chip is used for

817
00:35:18,900 --> 00:35:26,430
debugging it's used for runtime metrics

818
00:35:21,630 --> 00:35:28,230
logging and so when you have the data

819
00:35:26,430 --> 00:35:30,450
center of reliability folks who come by

820
00:35:28,230 --> 00:35:32,790
and say hey we need to figure out why

821
00:35:30,450 --> 00:35:34,859
this thing failed can we look at the

822
00:35:32,790 --> 00:35:36,450
last hundred hours of logs or whatever

823
00:35:34,859 --> 00:35:38,119
if you say well it went to a new

824
00:35:36,450 --> 00:35:40,710
customer and we blew that all the way

825
00:35:38,119 --> 00:35:42,330
great the previous customer can't

826
00:35:40,710 --> 00:35:44,160
backdoor the new customer with that data

827
00:35:42,330 --> 00:35:47,880
not so great we don't have the data

828
00:35:44,160 --> 00:35:49,740
anymore as you mentioned also the

829
00:35:47,880 --> 00:35:53,640
cabling is really really annoying for

830
00:35:49,740 --> 00:35:55,470
this because most devices are not

831
00:35:53,640 --> 00:35:56,879
designed with the idea that their debug

832
00:35:55,470 --> 00:36:00,750
ports are going to be wired up during

833
00:35:56,880 --> 00:36:03,450
production in the data center as we move

834
00:36:00,750 --> 00:36:05,340
forward with this and we work closely

835
00:36:03,450 --> 00:36:07,680
with the vendors and we redesign our

836
00:36:05,340 --> 00:36:11,640
boards the cabling gets better but it's

837
00:36:07,680 --> 00:36:15,359
still not it's still not perfect you

838
00:36:11,640 --> 00:36:18,600
know cables falling out headers that are

839
00:36:15,359 --> 00:36:20,790
pins rather than latching retention all

840
00:36:18,600 --> 00:36:22,500
things that Enterprise Server people

841
00:36:20,790 --> 00:36:27,090
care very deeply about for reliability

842
00:36:22,500 --> 00:36:28,980
reasons I already mentioned reverse

843
00:36:27,090 --> 00:36:31,380
engineering the other thing about this

844
00:36:28,980 --> 00:36:33,480
is that it very often requires you to

845
00:36:31,380 --> 00:36:36,000
cycle power to the device to take up the

846
00:36:33,480 --> 00:36:37,320
new firmware you've installed if you're

847
00:36:36,000 --> 00:36:39,420
in a shared environment you have

848
00:36:37,320 --> 00:36:42,390
multi-tenant something like that that

849
00:36:39,420 --> 00:36:44,849
may not be tenable for you

850
00:36:42,390 --> 00:36:48,618
depending on exactly which hardware

851
00:36:44,849 --> 00:36:51,809
you're taking this approach to if you

852
00:36:48,619 --> 00:36:54,420
are choosing say a network card vendor

853
00:36:51,809 --> 00:36:55,950
you've got to look and see who has this

854
00:36:54,420 --> 00:36:58,289
capability and how they've implemented

855
00:36:55,950 --> 00:36:59,910
it again you need to sit down with the

856
00:36:58,289 --> 00:37:01,980
sit down with the vendor and have some

857
00:36:59,910 --> 00:37:03,899
have some conversations that they don't

858
00:37:01,980 --> 00:37:05,460
usually answer correctly the first time

859
00:37:03,900 --> 00:37:10,380
around because it's hard to understand

860
00:37:05,460 --> 00:37:12,599
the question you're asking the and so

861
00:37:10,380 --> 00:37:14,220
you know if your chosen vendor can't do

862
00:37:12,599 --> 00:37:16,559
this then you may have a problem you may

863
00:37:14,220 --> 00:37:19,529
have to switch vendors or ask them to

864
00:37:16,559 --> 00:37:23,069
build the feature for you the other

865
00:37:19,529 --> 00:37:25,049
thing is for some devices the flash chip

866
00:37:23,069 --> 00:37:27,150
is inexpensive and you only have 10,000

867
00:37:25,049 --> 00:37:28,740
rights if you do this all day every day

868
00:37:27,150 --> 00:37:31,920
eventually going to wear those out and

869
00:37:28,740 --> 00:37:34,319
then then your device stops working so

870
00:37:31,920 --> 00:37:37,470
make sure that that is something you've

871
00:37:34,319 --> 00:37:39,779
taken into account before you do it the

872
00:37:37,470 --> 00:37:41,788
other thing is part part of the reason

873
00:37:39,779 --> 00:37:44,010
that we ended up doing this was because

874
00:37:41,789 --> 00:37:47,569
we knew that it was possible for someone

875
00:37:44,010 --> 00:37:50,069
else to do it if we have this low level

876
00:37:47,569 --> 00:37:52,650
known to blow it all the way at the

877
00:37:50,069 --> 00:37:54,630
hardware level functionality we don't

878
00:37:52,650 --> 00:37:57,720
need anti roll back protections like you

879
00:37:54,630 --> 00:38:01,559
were mentioning because we know that

880
00:37:57,720 --> 00:38:04,500
when we put it into the state that's the

881
00:38:01,559 --> 00:38:07,259
state it's in and it's not you know it

882
00:38:04,500 --> 00:38:11,369
can't be backdoor then not in terms of

883
00:38:07,259 --> 00:38:13,109
the firmware it's not a the bugs that

884
00:38:11,369 --> 00:38:16,140
were in the previous firmware can't keep

885
00:38:13,109 --> 00:38:17,990
it bricked it will only have the vendor

886
00:38:16,140 --> 00:38:26,250
supplied back doors at that point yeah

887
00:38:17,990 --> 00:38:28,970
I'm giving everyone the same back so did

888
00:38:26,250 --> 00:38:45,830
you have a question before

889
00:38:28,970 --> 00:38:48,410
a great many of them yeah it was so the

890
00:38:45,830 --> 00:38:52,910
the PCIe card it was wired to all the

891
00:38:48,410 --> 00:38:54,799
other hardware yeah there's there's

892
00:38:52,910 --> 00:38:56,240
custom designed more than just the PCIe

893
00:38:54,800 --> 00:38:58,310
card this is what he was saying that

894
00:38:56,240 --> 00:38:59,598
like we could give you one of these and

895
00:38:58,310 --> 00:39:07,580
it would be useless if we don't give you

896
00:38:59,599 --> 00:39:10,910
the server to put it in also so talking

897
00:39:07,580 --> 00:39:13,098
about things going forward here one of

898
00:39:10,910 --> 00:39:14,990
the things that we're working towards is

899
00:39:13,099 --> 00:39:17,750
figuring out how to do this in band on

900
00:39:14,990 --> 00:39:20,779
the device for some kinds of devices

901
00:39:17,750 --> 00:39:23,030
this is already possible but you know so

902
00:39:20,780 --> 00:39:25,940
going in over the PCI Express bus rather

903
00:39:23,030 --> 00:39:27,980
than having to squish firmware down over

904
00:39:25,940 --> 00:39:32,810
serial cables dangling around the inside

905
00:39:27,980 --> 00:39:34,310
of a server is definitely optimal the

906
00:39:32,810 --> 00:39:36,049
other thing we'd like to move forward

907
00:39:34,310 --> 00:39:38,660
with is getting it to the point where

908
00:39:36,050 --> 00:39:40,940
you can do a full firmware reset on the

909
00:39:38,660 --> 00:39:43,160
devices without resetting the host this

910
00:39:40,940 --> 00:39:44,570
has both the nice property of if you're

911
00:39:43,160 --> 00:39:45,890
using them from multi-tenant you can

912
00:39:44,570 --> 00:39:48,380
still get them back into a known good

913
00:39:45,890 --> 00:39:51,230
state but also means that the recovery

914
00:39:48,380 --> 00:39:53,420
can go much faster one of the challenges

915
00:39:51,230 --> 00:39:55,550
of this is servers are very slow to

916
00:39:53,420 --> 00:39:58,640
reboot if you have to do this a bunch of

917
00:39:55,550 --> 00:40:01,820
times you end up with you know an hour

918
00:39:58,640 --> 00:40:03,950
or two hours the our first on

919
00:40:01,820 --> 00:40:07,849
unoptimized variant of it took a very

920
00:40:03,950 --> 00:40:09,529
very long time and if you have that in

921
00:40:07,849 --> 00:40:11,270
the data center folks are gonna be

922
00:40:09,530 --> 00:40:12,859
complaining about you know we could be

923
00:40:11,270 --> 00:40:15,290
renting these servers why are they

924
00:40:12,859 --> 00:40:17,299
taking so long to recycle so getting

925
00:40:15,290 --> 00:40:19,460
that time down especially if you can do

926
00:40:17,300 --> 00:40:25,609
it online without a full power cycle is

927
00:40:19,460 --> 00:40:27,770
very ideal to opportunity the other

928
00:40:25,609 --> 00:40:30,348
thing that we are hoping hoping we can

929
00:40:27,770 --> 00:40:32,810
move forward with is being able to

930
00:40:30,349 --> 00:40:35,570
detect if firmware has been modified

931
00:40:32,810 --> 00:40:37,369
right now the best you can usually do is

932
00:40:35,570 --> 00:40:39,320
ask the device hey what's your version

933
00:40:37,369 --> 00:40:40,280
number of your firmware it tells it to

934
00:40:39,320 --> 00:40:42,260
you and then

935
00:40:40,280 --> 00:40:44,990
I believe it or it was lying and you

936
00:40:42,260 --> 00:40:46,010
can't tell that it was lying there are

937
00:40:44,990 --> 00:40:48,350
some folks who have done some very

938
00:40:46,010 --> 00:40:49,880
clever things with looking at the timing

939
00:40:48,350 --> 00:40:50,839
it takes to do that to try to figure out

940
00:40:49,880 --> 00:40:53,930
whether or not you're actually running

941
00:40:50,840 --> 00:40:55,670
with what it says it it is but at the

942
00:40:53,930 --> 00:40:58,069
end of the day that's it's an arms race

943
00:40:55,670 --> 00:41:00,830
that I don't think is practical to play

944
00:40:58,070 --> 00:41:03,650
the better solution is ask the vendors

945
00:41:00,830 --> 00:41:07,840
to tell to give us hardware securities

946
00:41:03,650 --> 00:41:10,040
to figure out what the firmware is and

947
00:41:07,840 --> 00:41:12,050
when we talked about this last time I

948
00:41:10,040 --> 00:41:14,360
said that a vendor was working on this

949
00:41:12,050 --> 00:41:17,180
for us but I couldn't tell you who now

950
00:41:14,360 --> 00:41:20,720
there is a intel has actually published

951
00:41:17,180 --> 00:41:23,390
the drafts back of their hardware level

952
00:41:20,720 --> 00:41:26,060
firmware attestation and the way that

953
00:41:23,390 --> 00:41:31,009
works is they have a rom in the device

954
00:41:26,060 --> 00:41:33,470
that does a checksum of the sorry it

955
00:41:31,010 --> 00:41:35,930
doesn't have yes I won't say it does the

956
00:41:33,470 --> 00:41:38,620
hash of the of the firmware before it

957
00:41:35,930 --> 00:41:41,450
boots it and then it puts that into a

958
00:41:38,620 --> 00:41:44,210
locked PCIe register so you can get that

959
00:41:41,450 --> 00:41:46,520
value out of the device and because this

960
00:41:44,210 --> 00:41:49,100
all happens at the hardware level you

961
00:41:46,520 --> 00:41:51,140
have very strong attestation of exactly

962
00:41:49,100 --> 00:41:53,839
what booted in that device what you do

963
00:41:51,140 --> 00:41:56,299
with that value is up to you but it it

964
00:41:53,840 --> 00:41:57,370
allows you to see in in a way that you

965
00:41:56,300 --> 00:42:00,200
couldn't before

966
00:41:57,370 --> 00:42:04,100
so I strongly recommend taking a look at

967
00:42:00,200 --> 00:42:06,669
that and commenting on it with them

968
00:42:04,100 --> 00:42:09,950
there are some things in there that are

969
00:42:06,670 --> 00:42:11,660
also solve other problems but the bits

970
00:42:09,950 --> 00:42:14,540
about getting the hash at the firmware I

971
00:42:11,660 --> 00:42:16,220
think is very interesting the other

972
00:42:14,540 --> 00:42:19,100
thing other limitation this doesn't do

973
00:42:16,220 --> 00:42:21,049
anything for runtime integrity that's a

974
00:42:19,100 --> 00:42:25,819
very hard problem we'd like to hear your

975
00:42:21,050 --> 00:42:28,760
ideas but the the fundamental issues are

976
00:42:25,820 --> 00:42:30,950
until we have boot time integrity trying

977
00:42:28,760 --> 00:42:33,470
to solve for runtime integrity is maybe

978
00:42:30,950 --> 00:42:35,629
not something that that is worth the

979
00:42:33,470 --> 00:42:37,250
effort until we get this out of the way

980
00:42:35,630 --> 00:42:42,020
and we understand which firmware we're

981
00:42:37,250 --> 00:42:46,610
running on but that's an area of a lot

982
00:42:42,020 --> 00:42:48,410
of research still so conclusions here

983
00:42:46,610 --> 00:42:50,270
gaining assurance on your firmware is

984
00:42:48,410 --> 00:42:53,390
hard but it is possible

985
00:42:50,270 --> 00:42:55,250
ask your vendors for these capabilities

986
00:42:53,390 --> 00:42:58,100
the more we go to the people we're

987
00:42:55,250 --> 00:42:59,660
buying hardware for from and say I would

988
00:42:58,100 --> 00:43:01,430
like you to do these things for me so

989
00:42:59,660 --> 00:43:03,799
that I can secure your hardware in my

990
00:43:01,430 --> 00:43:06,290
data center the more likely they are to

991
00:43:03,800 --> 00:43:08,990
do it if we if we present a unified

992
00:43:06,290 --> 00:43:11,180
front to them in asking for these things

993
00:43:08,990 --> 00:43:15,080
it's much more likely that will actually

994
00:43:11,180 --> 00:43:35,629
get change and with that we'll take

995
00:43:15,080 --> 00:43:37,580
questions to the network its externally

996
00:43:35,630 --> 00:43:38,840
controlled right it's not something that

997
00:43:37,580 --> 00:43:40,549
comes in through the system we issued

998
00:43:38,840 --> 00:43:42,770
commands to it from something else that

999
00:43:40,550 --> 00:43:49,520
gets plugged into the network by some

1000
00:43:42,770 --> 00:43:52,520
other thing it is it is like a BMC for a

1001
00:43:49,520 --> 00:43:55,580
BMC in some ways yes and it's much less

1002
00:43:52,520 --> 00:43:58,670
complicated and much easier to do very

1003
00:43:55,580 --> 00:44:02,590
careful audits on how it functions yeah

1004
00:43:58,670 --> 00:44:02,590
several orders of magnitude less code

1005
00:44:09,579 --> 00:44:15,289
so as I said it's you know it's small

1006
00:44:13,519 --> 00:44:17,109
enough that it in terms of the

1007
00:44:15,289 --> 00:44:19,400
functionality and the code that an

1008
00:44:17,109 --> 00:44:23,960
individual can very carefully validate

1009
00:44:19,400 --> 00:44:26,299
what it does it is not updatable one of

1010
00:44:23,960 --> 00:44:28,549
the concerns we have is all enterprise

1011
00:44:26,299 --> 00:44:31,009
hardware is built to be updatable in

1012
00:44:28,549 --> 00:44:33,288
situ because that's how you deal with

1013
00:44:31,009 --> 00:44:35,630
bugs in it we really don't want that for

1014
00:44:33,289 --> 00:44:38,569
this piece of hardware so once we put

1015
00:44:35,630 --> 00:44:40,039
the firmware in because it's simple

1016
00:44:38,569 --> 00:44:43,788
because it's only doing a few things I

1017
00:44:40,039 --> 00:44:45,559
mean it doesn't have the ability to it

1018
00:44:43,789 --> 00:44:48,920
doesn't have enough storage even to

1019
00:44:45,559 --> 00:44:53,289
write out a backdoored firmware and it's

1020
00:44:48,920 --> 00:44:53,289
doing things like toggling GPIO pins

1021
00:45:08,390 --> 00:45:13,710
yes yeah so that's being handled

1022
00:45:11,130 --> 00:45:15,240
basically the same way so on on a whole

1023
00:45:13,710 --> 00:45:16,770
bunch of devices we have to rewrite all

1024
00:45:15,240 --> 00:45:19,129
of the configuration settings when we do

1025
00:45:16,770 --> 00:45:21,210
this yeah we have to do things like

1026
00:45:19,130 --> 00:45:35,250
restore the serial numbers and put them

1027
00:45:21,210 --> 00:45:37,710
back in we so we store the store those

1028
00:45:35,250 --> 00:45:39,420
states store that data when we put the

1029
00:45:37,710 --> 00:45:41,250
system into the data center and we

1030
00:45:39,420 --> 00:45:46,500
restore with known good values not not

1031
00:45:41,250 --> 00:45:48,180
the ones supplied by the customer if the

1032
00:45:46,500 --> 00:45:49,380
manufacturer is screwing with us we have

1033
00:45:48,180 --> 00:45:57,419
different set of problems and we're

1034
00:45:49,380 --> 00:45:58,860
trying to say yeah yeah we're trying to

1035
00:45:57,420 --> 00:46:01,290
ensure the vendor supplied back doors

1036
00:45:58,860 --> 00:46:18,510
and not the other customer supplied back

1037
00:46:01,290 --> 00:46:20,460
doors there's nothing that prevents us

1038
00:46:18,510 --> 00:46:22,740
from doing that it doesn't usually

1039
00:46:20,460 --> 00:46:25,560
happen in practice because if just sort

1040
00:46:22,740 --> 00:46:32,029
of the rate at which machines come back

1041
00:46:25,560 --> 00:46:34,350
to be recycled the the process like

1042
00:46:32,030 --> 00:46:36,930
current processes involve as Paul was

1043
00:46:34,350 --> 00:46:38,310
mentioning a lot of reboots so we only

1044
00:46:36,930 --> 00:46:41,040
do them when the systems are not being

1045
00:46:38,310 --> 00:46:42,720
otherwise used we have to move stuff

1046
00:46:41,040 --> 00:46:44,190
around to vacate systems in order to run

1047
00:46:42,720 --> 00:46:45,750
the process so we don't generally have

1048
00:46:44,190 --> 00:46:47,970
like a hundred of these going all

1049
00:46:45,750 --> 00:46:49,620
simultaneously and some of some of the

1050
00:46:47,970 --> 00:46:51,810
limitations in terms of how long it

1051
00:46:49,620 --> 00:46:53,759
takes are some of the processes for

1052
00:46:51,810 --> 00:46:56,720
instance involve squishing firmware down

1053
00:46:53,760 --> 00:46:59,430
over a fairly slow serial link so that

1054
00:46:56,720 --> 00:47:01,379
that can only go as fast per machine as

1055
00:46:59,430 --> 00:47:04,020
it can but but there's nothing that

1056
00:47:01,380 --> 00:47:05,640
prevents us from running it there's as

1057
00:47:04,020 --> 00:47:08,100
far as I'm aware there's no limit on how

1058
00:47:05,640 --> 00:47:11,400
many of these we can do simultaneously

1059
00:47:08,100 --> 00:47:12,870
but the process is like it's it's

1060
00:47:11,400 --> 00:47:14,700
individualized so you have to run

1061
00:47:12,870 --> 00:47:16,150
through the set of steps on each server

1062
00:47:14,700 --> 00:47:17,770
and the right order

1063
00:47:16,150 --> 00:47:19,210
won't accomplish a whole lot so you have

1064
00:47:17,770 --> 00:47:29,560
to go through that on each server

1065
00:47:19,210 --> 00:47:32,380
individually I don't know that we needed

1066
00:47:29,560 --> 00:47:34,120
anything but three point three honestly

1067
00:47:32,380 --> 00:47:35,980
how many voltages how many different IO

1068
00:47:34,120 --> 00:47:37,750
voltages did we have to support we had

1069
00:47:35,980 --> 00:47:41,410
at least one device that we were worried

1070
00:47:37,750 --> 00:47:43,090
was gonna have but I don't think we are

1071
00:47:41,410 --> 00:47:44,620
currently doing anything that is other

1072
00:47:43,090 --> 00:47:46,330
than three point three right now but it

1073
00:47:44,620 --> 00:47:47,470
it ends up being a small number right

1074
00:47:46,330 --> 00:47:51,670
everything in the server is running

1075
00:47:47,470 --> 00:47:54,850
generally on 12 volts 3.3 or like 1.8

1076
00:47:51,670 --> 00:47:57,460
and there's not that many different like

1077
00:47:54,850 --> 00:47:59,640
main voltages that you have to interface

1078
00:47:57,460 --> 00:47:59,640
to

1079
00:48:07,380 --> 00:48:14,200
we build it into all the servers it's

1080
00:48:10,150 --> 00:48:15,640
always there yeah the it wouldn't scale

1081
00:48:14,200 --> 00:48:16,600
if we had to put it in every time he

1082
00:48:15,640 --> 00:48:20,009
wanted a new server

1083
00:48:16,600 --> 00:48:20,009
I mean we build clouds right

1084
00:48:30,890 --> 00:48:42,660
one of those yes the device itself is

1085
00:48:38,610 --> 00:48:45,030
quite simple I mean at the end of the

1086
00:48:42,660 --> 00:48:46,379
day so at the end of the day it does

1087
00:48:45,030 --> 00:48:48,480
need to be connected to the network to

1088
00:48:46,380 --> 00:48:50,880
automate it so we do have to control

1089
00:48:48,480 --> 00:48:56,130
access to whatever is managing access -

1090
00:48:50,880 --> 00:48:58,230
right like yes we we have we we do lots

1091
00:48:56,130 --> 00:49:01,820
of other things to control access to

1092
00:48:58,230 --> 00:49:01,820
this to make sure that it is not misused

1093
00:49:04,490 --> 00:49:08,069
at the end of the day if the people

1094
00:49:06,420 --> 00:49:09,420
walking up to the server want to do

1095
00:49:08,070 --> 00:49:24,720
things to it we have different set of

1096
00:49:09,420 --> 00:49:26,520
problems you have to walk up to it to

1097
00:49:24,720 --> 00:49:28,589
treat it to it you have a firmware yeah

1098
00:49:26,520 --> 00:49:33,800
and and we have actually that process is

1099
00:49:28,590 --> 00:49:36,060
somewhat involved so we do have some

1100
00:49:33,800 --> 00:49:37,380
mechanisms for verifying that this has

1101
00:49:36,060 --> 00:49:38,880
happened correctly and device was

1102
00:49:37,380 --> 00:49:43,050
programmed correctly and we know that it

1103
00:49:38,880 --> 00:49:44,480
hasn't been modified it's if you walk up

1104
00:49:43,050 --> 00:49:46,740
and just try and touch it and do

1105
00:49:44,480 --> 00:49:48,780
something not terribly clever we will

1106
00:49:46,740 --> 00:49:50,970
notice there there are some bits

1107
00:49:48,780 --> 00:49:53,420
involving crypto that they asked us not

1108
00:49:50,970 --> 00:49:53,419
to talk about

1109
00:49:58,730 --> 00:50:06,390
between customers it takes long enough

1110
00:50:01,770 --> 00:50:07,740
you don't we now we'd like you can't

1111
00:50:06,390 --> 00:50:09,839
stop customers on bare metal from

1112
00:50:07,740 --> 00:50:12,629
shooting themselves in the foot it's a

1113
00:50:09,840 --> 00:50:15,450
feature too right you know it is a very

1114
00:50:12,630 --> 00:50:16,980
legitimate use case to say I know that I

1115
00:50:15,450 --> 00:50:19,080
have qualified this network card

1116
00:50:16,980 --> 00:50:20,480
firmware for my software and I don't

1117
00:50:19,080 --> 00:50:23,090
want whatever the name of stuff is

1118
00:50:20,480 --> 00:50:27,080
Enterprise does that all the time and

1119
00:50:23,090 --> 00:50:27,080
customers want to do that so we let them

1120
00:50:59,460 --> 00:51:04,589
so this is talking directly to the spy

1121
00:51:01,589 --> 00:51:06,779
flash as directly as we can so the

1122
00:51:04,589 --> 00:51:09,029
original firmware may be back doored

1123
00:51:06,780 --> 00:51:11,910
it may have a bug it may have a bug that

1124
00:51:09,030 --> 00:51:14,309
allows someone to get it into us you

1125
00:51:11,910 --> 00:51:17,549
know for example about every year there

1126
00:51:14,309 --> 00:51:19,440
are vulnerabilities in SMM that allow an

1127
00:51:17,550 --> 00:51:22,440
attacker to write to the firmware or

1128
00:51:19,440 --> 00:51:24,809
write to the bios on a machine because

1129
00:51:22,440 --> 00:51:27,809
we're not using the bios itself to do

1130
00:51:24,809 --> 00:51:30,119
this kind of update they then even

1131
00:51:27,809 --> 00:51:32,400
though even in the context of a world

1132
00:51:30,119 --> 00:51:33,750
where we know there are either either we

1133
00:51:32,400 --> 00:51:35,940
found them where we haven't but we know

1134
00:51:33,750 --> 00:51:38,579
there are that kind of bugs because

1135
00:51:35,940 --> 00:51:41,550
we're writing directly the spy flash we

1136
00:51:38,579 --> 00:51:52,920
are bypassing the kate the possibility

1137
00:51:41,550 --> 00:51:54,660
of those exploiting the update now we we

1138
00:51:52,920 --> 00:51:56,670
explicitly don't want to use the

1139
00:51:54,660 --> 00:51:58,200
firmware update routine we're trying to

1140
00:51:56,670 --> 00:52:00,540
use some hardware mechanism that does

1141
00:51:58,200 --> 00:52:06,950
not depend on whatever the firmware is

1142
00:52:00,540 --> 00:52:06,950
at this time any other questions

1143
00:52:07,690 --> 00:52:11,369
all right thank you very much

1144
00:52:19,830 --> 00:52:21,890
you

