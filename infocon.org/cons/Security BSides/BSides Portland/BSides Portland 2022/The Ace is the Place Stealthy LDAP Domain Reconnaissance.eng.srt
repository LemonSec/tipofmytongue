1
00:00:00,299 --> 00:00:02,879
all right awesome awesome hello everyone

2
00:00:02,879 --> 00:00:05,819
uh welcome to my talk the the ace is a

3
00:00:05,819 --> 00:00:07,259
place or stealthy ldap domain

4
00:00:07,259 --> 00:00:09,859
reconnaissance

5
00:00:09,960 --> 00:00:12,420
a little bit about myself my name is

6
00:00:12,420 --> 00:00:14,759
Garrett Foster I'm a senior security

7
00:00:14,759 --> 00:00:17,600
consultant on Optics attack and Pen team

8
00:00:17,600 --> 00:00:20,520
my primary role is on this team are to

9
00:00:20,520 --> 00:00:23,100
perform targeted internal and perimeter

10
00:00:23,100 --> 00:00:25,800
penetration tests as well as uh recently

11
00:00:25,800 --> 00:00:27,779
to perform red team engagements with

12
00:00:27,779 --> 00:00:31,260
some light adult supervision

13
00:00:31,260 --> 00:00:32,238
foreign

14
00:00:32,238 --> 00:00:35,280
so for this talk we're going to cover a

15
00:00:35,280 --> 00:00:37,079
quick high level overview of what a

16
00:00:37,079 --> 00:00:38,700
security descriptor is in active

17
00:00:38,700 --> 00:00:40,920
directory and why they're valuable to

18
00:00:40,920 --> 00:00:42,540
attackers

19
00:00:42,540 --> 00:00:43,920
um and then we'll talk about Bloodhound

20
00:00:43,920 --> 00:00:46,079
kind of a well-known tool for performing

21
00:00:46,079 --> 00:00:49,379
Recon of a Target domain and then kind

22
00:00:49,379 --> 00:00:51,719
of show the risks associated associated

23
00:00:51,719 --> 00:00:53,700
with running Bloodhound when using it

24
00:00:53,700 --> 00:00:56,660
during an evasive engagements

25
00:00:56,660 --> 00:00:59,239
and then I'll introduce the tool I wrote

26
00:00:59,239 --> 00:01:01,980
aced to alleviate some of those risks

27
00:01:01,980 --> 00:01:04,199
and then following that I'll show a

28
00:01:04,199 --> 00:01:07,320
quick demo of how how that works

29
00:01:07,320 --> 00:01:08,700
okay

30
00:01:08,700 --> 00:01:11,340
so the the security descriptor is and

31
00:01:11,340 --> 00:01:14,159
it's an attribute in ldap that stores a

32
00:01:14,159 --> 00:01:16,920
compact binary representation of the

33
00:01:16,920 --> 00:01:18,360
security associated with a securable

34
00:01:18,360 --> 00:01:21,360
object so essentially it's a collection

35
00:01:21,360 --> 00:01:23,460
of data that identifies the ownership

36
00:01:23,460 --> 00:01:25,979
and permissions on that object

37
00:01:25,979 --> 00:01:27,900
so it consists of four things it's uh

38
00:01:27,900 --> 00:01:29,759
you've got the object owner which is

39
00:01:29,759 --> 00:01:31,740
identified by a sid or security

40
00:01:31,740 --> 00:01:33,080
identifier

41
00:01:33,080 --> 00:01:36,060
a sid is a unique value that identifies

42
00:01:36,060 --> 00:01:37,979
a trustee such as a user or group

43
00:01:37,979 --> 00:01:40,439
similar to how we all have a Social

44
00:01:40,439 --> 00:01:41,700
Security number

45
00:01:41,700 --> 00:01:44,340
uh the primary primary group ID of the

46
00:01:44,340 --> 00:01:46,439
object such as the domain users or

47
00:01:46,439 --> 00:01:48,299
domain computers Group which is also

48
00:01:48,299 --> 00:01:51,420
identified a reference biased then you

49
00:01:51,420 --> 00:01:53,700
have the the sackle which is the system

50
00:01:53,700 --> 00:01:56,000
Access Control list

51
00:01:56,000 --> 00:01:58,920
and this apple provides uh

52
00:01:58,920 --> 00:02:02,159
administrators a way to audit a

53
00:02:02,159 --> 00:02:04,920
securable object so anytime that the

54
00:02:04,920 --> 00:02:07,259
object is red it will trigger an alert

55
00:02:07,259 --> 00:02:09,119
that that will kind of give the

56
00:02:09,119 --> 00:02:11,400
administrators some more information and

57
00:02:11,400 --> 00:02:12,599
then there's the dackle or the

58
00:02:12,599 --> 00:02:14,340
discretionary actions control list which

59
00:02:14,340 --> 00:02:16,800
is where we'll be focusing primarily the

60
00:02:16,800 --> 00:02:19,080
DAC will list trustees that are denied

61
00:02:19,080 --> 00:02:21,660
or allowed access to a securable object

62
00:02:21,660 --> 00:02:24,300
so each entry in this list are called

63
00:02:24,300 --> 00:02:28,340
Access Control entries or Aces

64
00:02:29,640 --> 00:02:32,459
so Aces themselves have several pieces

65
00:02:32,459 --> 00:02:35,220
of information the first is the Sid so

66
00:02:35,220 --> 00:02:37,620
that's that's the specific trustee that

67
00:02:37,620 --> 00:02:39,959
has the right that we're going over then

68
00:02:39,959 --> 00:02:41,280
there's the access type whether it's

69
00:02:41,280 --> 00:02:42,540
going to be access allowed or access

70
00:02:42,540 --> 00:02:45,720
denied then we've got the access mask so

71
00:02:45,720 --> 00:02:48,660
what is the specific right uh that is

72
00:02:48,660 --> 00:02:50,540
being granted to this the to the sit

73
00:02:50,540 --> 00:02:52,920
then we've got inheritance which is

74
00:02:52,920 --> 00:02:54,959
whether the right is explicitly granted

75
00:02:54,959 --> 00:02:56,819
so if it's just that individual account

76
00:02:56,819 --> 00:02:59,519
or whether it's the the group that it's

77
00:02:59,519 --> 00:03:01,319
a member of that's granting the right

78
00:03:01,319 --> 00:03:03,239
and then then you've got the object type

79
00:03:03,239 --> 00:03:06,120
which I mentioned is sometimes so

80
00:03:06,120 --> 00:03:08,040
object types you'll you'll find those in

81
00:03:08,040 --> 00:03:09,599
the Ace entry when you want to limit the

82
00:03:09,599 --> 00:03:12,599
right to something specific so I get a

83
00:03:12,599 --> 00:03:14,519
good example of this is when you've got

84
00:03:14,519 --> 00:03:16,500
like a lower tier help desk group that

85
00:03:16,500 --> 00:03:17,640
you want to give them the right to

86
00:03:17,640 --> 00:03:19,980
change all of your users passwords but

87
00:03:19,980 --> 00:03:21,239
not give them the right like full

88
00:03:21,239 --> 00:03:24,680
control over all the users

89
00:03:27,480 --> 00:03:30,120
so this is this is an example of what a

90
00:03:30,120 --> 00:03:31,920
a DACA would look like if you were

91
00:03:31,920 --> 00:03:33,840
working from active directory users and

92
00:03:33,840 --> 00:03:35,940
computers so on the left you've got the

93
00:03:35,940 --> 00:03:38,099
the different Ace types so at the top

94
00:03:38,099 --> 00:03:39,599
you'll see that there's an access deny

95
00:03:39,599 --> 00:03:40,920
and then the rest are allowed then

96
00:03:40,920 --> 00:03:42,720
you've got the Sid which identifies the

97
00:03:42,720 --> 00:03:44,459
the principle that the right is assigned

98
00:03:44,459 --> 00:03:47,459
to the access mask and then inheritance

99
00:03:47,459 --> 00:03:51,620
so for each row is an ace

100
00:03:51,680 --> 00:03:54,959
so why is ldap and ACL Recon useful for

101
00:03:54,959 --> 00:03:57,180
for attackers um the first thing it

102
00:03:57,180 --> 00:04:00,000
identifies targets of interest in an

103
00:04:00,000 --> 00:04:02,099
environment such as like a user group OU

104
00:04:02,099 --> 00:04:04,440
whatever it may be so with with red

105
00:04:04,440 --> 00:04:07,019
teaming the target isn't always domain

106
00:04:07,019 --> 00:04:09,540
admin we we only need just enough access

107
00:04:09,540 --> 00:04:11,879
to reach the targets or the goal for the

108
00:04:11,879 --> 00:04:12,840
assessment

109
00:04:12,840 --> 00:04:15,900
so and by analyzing ACLS we can we can

110
00:04:15,900 --> 00:04:18,959
chain multiple abuses together and build

111
00:04:18,959 --> 00:04:21,298
attack paths to move laterally or to

112
00:04:21,298 --> 00:04:24,198
escalate privileges

113
00:04:25,080 --> 00:04:27,300
um so many red teamers including some on

114
00:04:27,300 --> 00:04:29,160
my team uh make a living bypassing

115
00:04:29,160 --> 00:04:31,440
endpoint protections however that that's

116
00:04:31,440 --> 00:04:34,139
not in my wheelhouse and I I found that

117
00:04:34,139 --> 00:04:35,400
the best way to avoid endpoint

118
00:04:35,400 --> 00:04:37,380
protection is just don't touch them so

119
00:04:37,380 --> 00:04:40,199
let's live in all that

120
00:04:40,199 --> 00:04:42,300
so the the challenges in performing this

121
00:04:42,300 --> 00:04:45,540
Recon is uh there's a few so in a

122
00:04:45,540 --> 00:04:47,460
perfect world the flow of these ACLS

123
00:04:47,460 --> 00:04:49,259
would show you if you you looked up an

124
00:04:49,259 --> 00:04:50,759
object it would tell you everywhere it

125
00:04:50,759 --> 00:04:52,620
has access but that's just not the case

126
00:04:52,620 --> 00:04:54,840
so it has an inbound flow so when you're

127
00:04:54,840 --> 00:04:56,340
creating an object you can only see all

128
00:04:56,340 --> 00:04:58,680
the rights against that one object

129
00:04:58,680 --> 00:05:00,540
and then remember that the structure of

130
00:05:00,540 --> 00:05:02,880
the dacal is in binary form so each

131
00:05:02,880 --> 00:05:04,440
piece needs to be translated to human

132
00:05:04,440 --> 00:05:06,600
readable format which can be incredibly

133
00:05:06,600 --> 00:05:08,040
time consuming

134
00:05:08,040 --> 00:05:10,199
so what's the solution here

135
00:05:10,199 --> 00:05:11,880
um automation

136
00:05:11,880 --> 00:05:13,620
so there's there's already several tools

137
00:05:13,620 --> 00:05:15,180
that exist that are really really useful

138
00:05:15,180 --> 00:05:16,259
for this

139
00:05:16,259 --> 00:05:18,240
um and probably the most famous is

140
00:05:18,240 --> 00:05:21,780
Vector office's bloodhound

141
00:05:21,780 --> 00:05:23,639
now for all the veteran red teamers

142
00:05:23,639 --> 00:05:25,500
listening please bear with me while I go

143
00:05:25,500 --> 00:05:27,600
through this when an attacker runs

144
00:05:27,600 --> 00:05:29,460
Bloodhound the the entire domain is

145
00:05:29,460 --> 00:05:31,620
being extracted every single object and

146
00:05:31,620 --> 00:05:33,780
then it's being ingested into an

147
00:05:33,780 --> 00:05:36,479
interactive graphical interface and then

148
00:05:36,479 --> 00:05:38,880
it so it creates this big map of the

149
00:05:38,880 --> 00:05:40,860
domain and it shows you how all those

150
00:05:40,860 --> 00:05:42,419
objects are connected and then the

151
00:05:42,419 --> 00:05:45,900
directional flows of those relationships

152
00:05:45,900 --> 00:05:47,699
so in the screenshot on the right that's

153
00:05:47,699 --> 00:05:49,139
an example of what bloodhound's

154
00:05:49,139 --> 00:05:50,759
graphical interface looks like so you

155
00:05:50,759 --> 00:05:52,380
can see how each different icon

156
00:05:52,380 --> 00:05:53,820
represents a different object in the

157
00:05:53,820 --> 00:05:55,620
domain so the green objects are the

158
00:05:55,620 --> 00:05:57,000
users the yellows are the groups or

159
00:05:57,000 --> 00:05:59,639
we'll use and then the red icons if you

160
00:05:59,639 --> 00:06:01,919
can see them are computers so and then

161
00:06:01,919 --> 00:06:03,720
all of the chains connecting them are

162
00:06:03,720 --> 00:06:05,580
ACL relationships and how they might be

163
00:06:05,580 --> 00:06:07,080
abused

164
00:06:07,080 --> 00:06:09,419
so this does solve our challenges we

165
00:06:09,419 --> 00:06:10,740
were worried about that directional flow

166
00:06:10,740 --> 00:06:11,699
and we wish we could see everything

167
00:06:11,699 --> 00:06:13,440
outbound so now with the Bloodhound we

168
00:06:13,440 --> 00:06:15,960
can and then it's it automates that that

169
00:06:15,960 --> 00:06:17,940
translation so now we've we've automated

170
00:06:17,940 --> 00:06:20,340
the Sid translation all of the different

171
00:06:20,340 --> 00:06:22,860
pieces of the ace and it's it's arguably

172
00:06:22,860 --> 00:06:24,720
the fastest and easiest way to map out a

173
00:06:24,720 --> 00:06:27,539
Target environment so while all of this

174
00:06:27,539 --> 00:06:29,460
is true it really doesn't fit into the

175
00:06:29,460 --> 00:06:31,319
evasive nature of red team operations

176
00:06:31,319 --> 00:06:34,699
for for several reasons

177
00:06:36,780 --> 00:06:37,979
so Bloodhound has been around for

178
00:06:37,979 --> 00:06:39,120
several years now

179
00:06:39,120 --> 00:06:40,560
um and Defenders are very aware of its

180
00:06:40,560 --> 00:06:42,240
existence and and have several

181
00:06:42,240 --> 00:06:45,060
opportunities to to detect its activity

182
00:06:45,060 --> 00:06:47,940
blood out and similar tools generate a

183
00:06:47,940 --> 00:06:49,259
tremendous amount of network traffic

184
00:06:49,259 --> 00:06:51,419
which can trigger internal IDs and IPS

185
00:06:51,419 --> 00:06:53,819
Solutions especially if it's running

186
00:06:53,819 --> 00:06:56,160
over clear text ldap so that it can just

187
00:06:56,160 --> 00:06:58,199
sniff fit everything in the clear

188
00:06:58,199 --> 00:07:00,960
so and then as the tool resolves hosts

189
00:07:00,960 --> 00:07:03,000
if the the requisite flags are enabled

190
00:07:03,000 --> 00:07:04,440
when running the tool it will actually

191
00:07:04,440 --> 00:07:06,240
attempt to connect to each host that it

192
00:07:06,240 --> 00:07:08,460
resolves through DNS and try to identify

193
00:07:08,460 --> 00:07:10,199
session data so if there's any logged in

194
00:07:10,199 --> 00:07:12,600
users at the time as well as uh what

195
00:07:12,600 --> 00:07:14,819
users or principles might have local

196
00:07:14,819 --> 00:07:16,620
admin rights

197
00:07:16,620 --> 00:07:19,740
and then previously I mentioned cycles

198
00:07:19,740 --> 00:07:22,500
and how they can be used for auditing so

199
00:07:22,500 --> 00:07:24,419
since um Bloodhound pulls data

200
00:07:24,419 --> 00:07:26,699
comprehensively it's the entire domain

201
00:07:26,699 --> 00:07:28,500
administrators can create accounts with

202
00:07:28,500 --> 00:07:31,020
an attached sackle

203
00:07:31,020 --> 00:07:33,000
so the the idea here is that these

204
00:07:33,000 --> 00:07:34,500
accounts should never be touched they

205
00:07:34,500 --> 00:07:36,720
just sit there kind of doing nothing for

206
00:07:36,720 --> 00:07:39,419
a while and then if the account is read

207
00:07:39,419 --> 00:07:41,699
then that identifies that something

208
00:07:41,699 --> 00:07:44,580
might be nefarious in their environment

209
00:07:44,580 --> 00:07:47,520
so another option which is is a little

210
00:07:47,520 --> 00:07:50,639
bit difficult to tune is to enable

211
00:07:50,639 --> 00:07:52,800
expensive ldap querying and then

212
00:07:52,800 --> 00:07:54,840
essentially the idea here is that you

213
00:07:54,840 --> 00:07:57,479
you identify thresholds for with like

214
00:07:57,479 --> 00:08:00,180
common ldap results so ldap queries

215
00:08:00,180 --> 00:08:02,099
happen all the time but with Bloodhound

216
00:08:02,099 --> 00:08:04,319
you're literally running thousands tens

217
00:08:04,319 --> 00:08:06,479
of thousands of ldap queries so you can

218
00:08:06,479 --> 00:08:09,360
set a threshold that's unexpected and

219
00:08:09,360 --> 00:08:11,220
then when that happens you also know

220
00:08:11,220 --> 00:08:14,580
when when something's up

221
00:08:14,580 --> 00:08:16,560
so when do you run Bloodhound during a

222
00:08:16,560 --> 00:08:18,900
red team you don't

223
00:08:18,900 --> 00:08:20,639
um so while I was shadowing and learning

224
00:08:20,639 --> 00:08:22,379
the ropes I noticed that things really

225
00:08:22,379 --> 00:08:24,720
started to slow down uh during domain

226
00:08:24,720 --> 00:08:26,819
reconnaissance we have our own internal

227
00:08:26,819 --> 00:08:29,220
methods which are are effective

228
00:08:29,220 --> 00:08:31,139
but it was slower

229
00:08:31,139 --> 00:08:33,000
um and and being the very impatient

230
00:08:33,000 --> 00:08:35,339
person that I am I wanted something that

231
00:08:35,339 --> 00:08:37,320
would pick up the pace I wanted to be

232
00:08:37,320 --> 00:08:38,940
able to resolve ACLS the same way

233
00:08:38,940 --> 00:08:41,279
Bloodhound does but with a little less

234
00:08:41,279 --> 00:08:42,958
shocking awe and a little more of a

235
00:08:42,958 --> 00:08:44,580
tactical approach

236
00:08:44,580 --> 00:08:48,800
so I developed taste

237
00:08:50,459 --> 00:08:52,680
some of the the features with a star

238
00:08:52,680 --> 00:08:54,660
that it was designed um

239
00:08:54,660 --> 00:08:58,380
primarily focused on on being stealthy

240
00:08:58,380 --> 00:09:00,060
um which I'll describe a little bit more

241
00:09:00,060 --> 00:09:02,519
in the next slide and then as you're

242
00:09:02,519 --> 00:09:04,680
running these queries the the dackle

243
00:09:04,680 --> 00:09:06,420
associated with the account is actually

244
00:09:06,420 --> 00:09:08,100
being parsed and returned to you in real

245
00:09:08,100 --> 00:09:09,980
time so each each

246
00:09:09,980 --> 00:09:12,060
principle that you query for is going to

247
00:09:12,060 --> 00:09:14,600
show up in your terminal

248
00:09:14,600 --> 00:09:17,399
so while the tool is parsing the the the

249
00:09:17,399 --> 00:09:20,459
the ldap that you're querying for or the

250
00:09:20,459 --> 00:09:22,200
the decal that you're querying for it's

251
00:09:22,200 --> 00:09:24,540
actually logging the corresponding ldap

252
00:09:24,540 --> 00:09:26,640
search in the background so it's storing

253
00:09:26,640 --> 00:09:28,560
it in a text file

254
00:09:28,560 --> 00:09:29,700
foreign

255
00:09:29,700 --> 00:09:32,220
and then it has compatibility with a

256
00:09:32,220 --> 00:09:34,680
tool called buff hound and block found

257
00:09:34,680 --> 00:09:37,800
is a a tool developed by a photo list

258
00:09:37,800 --> 00:09:41,220
and it was created for transforming the

259
00:09:41,220 --> 00:09:43,980
logs generated by trusted sex ldap

260
00:09:43,980 --> 00:09:45,240
search buff

261
00:09:45,240 --> 00:09:48,480
into a bloodhound compatible format so

262
00:09:48,480 --> 00:09:49,680
you could take all the logs that were

263
00:09:49,680 --> 00:09:51,000
generated during your operation you're

264
00:09:51,000 --> 00:09:53,160
doing ldap queries and actually convert

265
00:09:53,160 --> 00:09:54,720
them to Bloodhound compatible so you

266
00:09:54,720 --> 00:09:57,300
could have all the the graphical fun

267
00:09:57,300 --> 00:09:59,220
that comes with it

268
00:09:59,220 --> 00:10:00,779
so

269
00:10:00,779 --> 00:10:04,920
I excuse me so the logging that Ace

270
00:10:04,920 --> 00:10:05,940
performs is actually the same

271
00:10:05,940 --> 00:10:08,580
compatibility so it all those logs can

272
00:10:08,580 --> 00:10:10,740
can then be transformed by found and

273
00:10:10,740 --> 00:10:12,839
then ingested into blood out but with

274
00:10:12,839 --> 00:10:14,279
the Bloodhound support now you've got

275
00:10:14,279 --> 00:10:16,440
the opportunity for operators to ingest

276
00:10:16,440 --> 00:10:17,399
the queries that they're running with

277
00:10:17,399 --> 00:10:18,839
aced so

278
00:10:18,839 --> 00:10:21,000
if multiple people are running it and

279
00:10:21,000 --> 00:10:23,580
then actually be able to get uh the data

280
00:10:23,580 --> 00:10:26,300
shared between everyone

281
00:10:27,060 --> 00:10:29,399
okay so a little bit about the stealth

282
00:10:29,399 --> 00:10:30,180
um

283
00:10:30,180 --> 00:10:32,640
State Ace was designed to have a small

284
00:10:32,640 --> 00:10:34,200
Network traffic footprint only

285
00:10:34,200 --> 00:10:36,480
generating as many queries as needed to

286
00:10:36,480 --> 00:10:38,640
partially resolve the dackle and focuses

287
00:10:38,640 --> 00:10:40,260
only on those Ace types that we care

288
00:10:40,260 --> 00:10:42,959
about which is the abusable Ace types

289
00:10:42,959 --> 00:10:44,459
if it's not an abusable ace it just

290
00:10:44,459 --> 00:10:47,160
skips over it ACE also supports ldap

291
00:10:47,160 --> 00:10:50,160
over SSL so your recon traffic can be

292
00:10:50,160 --> 00:10:51,899
encrypted and then kind of avoid those

293
00:10:51,899 --> 00:10:54,060
IDs and IPS Solutions

294
00:10:54,060 --> 00:10:56,459
it does no host enumeration Ace only

295
00:10:56,459 --> 00:10:58,320
lives in ldap and won't reach out in

296
00:10:58,320 --> 00:11:00,480
touch host to enumerate session or local

297
00:11:00,480 --> 00:11:04,079
admin data and Ace focuses on resolving

298
00:11:04,079 --> 00:11:06,060
only one principle at a time rather than

299
00:11:06,060 --> 00:11:07,860
the entire domain which provides a bit

300
00:11:07,860 --> 00:11:09,660
more control over what is and isn't

301
00:11:09,660 --> 00:11:11,459
being queried which helps to reduce the

302
00:11:11,459 --> 00:11:13,200
risk of triggering those honey accounts

303
00:11:13,200 --> 00:11:15,420
cackles

304
00:11:15,420 --> 00:11:17,459
then it has minimal ldap queries the

305
00:11:17,459 --> 00:11:19,500
longer your session lasts when running

306
00:11:19,500 --> 00:11:21,480
Ace the fewer ldap queries it needs to

307
00:11:21,480 --> 00:11:24,720
perform thanks to Sid caching so to

308
00:11:24,720 --> 00:11:26,579
identify what a sid is referencing we

309
00:11:26,579 --> 00:11:28,260
need to resolve it with an ldap query

310
00:11:28,260 --> 00:11:31,380
once a Sit is resolved it's cached so

311
00:11:31,380 --> 00:11:33,660
the next time you run a query Ace checks

312
00:11:33,660 --> 00:11:34,920
if this state has already been resolved

313
00:11:34,920 --> 00:11:36,480
if it exists it's returned from the

314
00:11:36,480 --> 00:11:38,160
store the stored list instead of

315
00:11:38,160 --> 00:11:39,980
performing at a query

316
00:11:39,980 --> 00:11:42,360
so therefore the more queries you run

317
00:11:42,360 --> 00:11:44,339
the longer your Sid cache and the more

318
00:11:44,339 --> 00:11:45,959
effective your searches are

319
00:11:45,959 --> 00:11:48,899
well-known rids are built in a relative

320
00:11:48,899 --> 00:11:50,880
identifier is the last part of a sid so

321
00:11:50,880 --> 00:11:54,660
like 500 5 12 5 13. several objects are

322
00:11:54,660 --> 00:11:56,640
constant globally in active directory

323
00:11:56,640 --> 00:11:58,740
such as the domain administrators group

324
00:11:58,740 --> 00:12:00,720
or Enterprise admins and they all share

325
00:12:00,720 --> 00:12:02,940
the same grid regardless of the domain

326
00:12:02,940 --> 00:12:05,220
since we already know this we know the

327
00:12:05,220 --> 00:12:06,720
expected grid for these accounts there's

328
00:12:06,720 --> 00:12:09,800
no need to query for it

329
00:12:09,839 --> 00:12:11,880
if the ace applies to a specific object

330
00:12:11,880 --> 00:12:13,860
type it contains the entire library for

331
00:12:13,860 --> 00:12:15,360
the active directory schema and how

332
00:12:15,360 --> 00:12:16,980
those those object types are mapped to

333
00:12:16,980 --> 00:12:19,140
their specific grid so instead of having

334
00:12:19,140 --> 00:12:20,579
to do a query for that we've got it met

335
00:12:20,579 --> 00:12:21,899
we've got it stored and we don't

336
00:12:21,899 --> 00:12:25,459
actually have to perform an ldap query

337
00:12:26,940 --> 00:12:29,160
so this is an example of the real-time

338
00:12:29,160 --> 00:12:31,680
dackle parsing the the top piece is

339
00:12:31,680 --> 00:12:33,120
going to be all of your specific object

340
00:12:33,120 --> 00:12:34,740
types that attackers might care about

341
00:12:34,740 --> 00:12:36,600
and then the bottom are going to be your

342
00:12:36,600 --> 00:12:38,279
more generic and right so these are like

343
00:12:38,279 --> 00:12:40,019
the axis allowed lists and these are the

344
00:12:40,019 --> 00:12:43,220
axis allowed object types

345
00:12:44,100 --> 00:12:46,320
on the next is a is an example of what

346
00:12:46,320 --> 00:12:48,120
the ldap search logging looks like so

347
00:12:48,120 --> 00:12:50,519
after you you actually look up an

348
00:12:50,519 --> 00:12:52,620
account this is being logged into a text

349
00:12:52,620 --> 00:12:55,399
file in the background

350
00:12:55,860 --> 00:12:57,540
and I mentioned previously ball found

351
00:12:57,540 --> 00:12:59,100
was designed to work with trusted sex

352
00:12:59,100 --> 00:13:00,720
ldap search buff and that's what you're

353
00:13:00,720 --> 00:13:02,279
you're seeing here

354
00:13:02,279 --> 00:13:03,480
um I know it's probably a little bit

355
00:13:03,480 --> 00:13:04,560
difficult to see in the back so I'm

356
00:13:04,560 --> 00:13:05,700
sorry

357
00:13:05,700 --> 00:13:08,940
um but uh on the left is the the ldap

358
00:13:08,940 --> 00:13:10,320
search buff running and then on the

359
00:13:10,320 --> 00:13:11,880
right is boss found actually parsing

360
00:13:11,880 --> 00:13:13,500
those logs and then transforming them

361
00:13:13,500 --> 00:13:17,040
into Bloodhound compatible format

362
00:13:17,040 --> 00:13:19,500
and then this is a screenshot that shows

363
00:13:19,500 --> 00:13:22,200
the result of that parsing that data so

364
00:13:22,200 --> 00:13:24,480
all of it is compatible with blow down

365
00:13:24,480 --> 00:13:28,760
it's very a very very cool tool

366
00:13:28,860 --> 00:13:32,279
okay so I will stop yammering and try to

367
00:13:32,279 --> 00:13:34,920
provide a bit of a demonstration

368
00:13:34,920 --> 00:13:37,320
so for this simple demo I'd like to kind

369
00:13:37,320 --> 00:13:39,420
of demonstrate what's my envisioned

370
00:13:39,420 --> 00:13:41,399
workflow with Ace is uh so we'll start

371
00:13:41,399 --> 00:13:43,560
from a low privileged user on myself I'm

372
00:13:43,560 --> 00:13:45,899
playing the role of an Insider threat my

373
00:13:45,899 --> 00:13:47,880
goal is to achieve domain administrator

374
00:13:47,880 --> 00:13:50,100
access so the first query that I'm going

375
00:13:50,100 --> 00:13:51,300
to run

376
00:13:51,300 --> 00:13:55,040
is for the domain admins group

377
00:13:56,040 --> 00:13:58,200
okay so you'll see here that that both

378
00:13:58,200 --> 00:14:00,779
the the dackle before the account was

379
00:14:00,779 --> 00:14:02,220
returned and resolved and you can see

380
00:14:02,220 --> 00:14:03,660
that the domain admins and Enterprise

381
00:14:03,660 --> 00:14:06,420
admins are all are all showing up and

382
00:14:06,420 --> 00:14:08,100
then on the right I'm actually tailing

383
00:14:08,100 --> 00:14:09,839
the log file so that you can view it in

384
00:14:09,839 --> 00:14:12,600
real time for each query that you run

385
00:14:12,600 --> 00:14:14,760
so let's see if there's anything uh

386
00:14:14,760 --> 00:14:18,800
misconfigured over domain admins

387
00:14:21,240 --> 00:14:23,160
so we're going to actually investigate

388
00:14:23,160 --> 00:14:24,779
the built-in administrators Group which

389
00:14:24,779 --> 00:14:27,779
is uh has a common misconfiguration and

390
00:14:27,779 --> 00:14:29,700
sometimes users add principles to that

391
00:14:29,700 --> 00:14:30,959
and don't really understand the rights

392
00:14:30,959 --> 00:14:32,519
associated with it

393
00:14:32,519 --> 00:14:34,920
so by by actually investigating the log

394
00:14:34,920 --> 00:14:37,200
generated by Ace we can look at the

395
00:14:37,200 --> 00:14:39,360
membership of the group and see that the

396
00:14:39,360 --> 00:14:42,120
the kind of the the expected group

397
00:14:42,120 --> 00:14:43,440
memberships are there so the domain

398
00:14:43,440 --> 00:14:45,899
admins Enterprise admins and so on but

399
00:14:45,899 --> 00:14:48,240
we've actually got an outlier oh there's

400
00:14:48,240 --> 00:14:49,740
Alfonso Cruz

401
00:14:49,740 --> 00:14:54,060
so let's look into Alfonso Cruz's tackle

402
00:14:54,060 --> 00:14:55,199
and see if we can find anything

403
00:14:55,199 --> 00:14:57,600
misconfigured there

404
00:14:57,600 --> 00:15:00,240
so the the result is over on the left is

405
00:15:00,240 --> 00:15:02,699
actually the parseed Apple for Alfonso

406
00:15:02,699 --> 00:15:04,079
so we're going to look through it and

407
00:15:04,079 --> 00:15:05,339
see if we can find anything that kind of

408
00:15:05,339 --> 00:15:07,820
sticks out

409
00:15:08,639 --> 00:15:10,500
if you look at the bottom Herschel

410
00:15:10,500 --> 00:15:12,600
Becker actually has generic All rights

411
00:15:12,600 --> 00:15:14,459
and generic all there's plenty of abuse

412
00:15:14,459 --> 00:15:16,740
cases associated with that

413
00:15:16,740 --> 00:15:18,839
so Herschel we're going to investigate

414
00:15:18,839 --> 00:15:20,339
Herschel and see if there's anything we

415
00:15:20,339 --> 00:15:21,899
could abuse in that case

416
00:15:21,899 --> 00:15:24,720
so by parsing herschel's tackle we can

417
00:15:24,720 --> 00:15:26,459
find that our account Garrett actually

418
00:15:26,459 --> 00:15:28,260
can change that user's password so we

419
00:15:28,260 --> 00:15:29,880
have effectively created a chain that we

420
00:15:29,880 --> 00:15:31,380
can walk back from the domain admins

421
00:15:31,380 --> 00:15:33,620
group

422
00:15:33,899 --> 00:15:36,180
kind of a Nuance with Ace is that if you

423
00:15:36,180 --> 00:15:37,500
want to be able to ingest it correctly

424
00:15:37,500 --> 00:15:39,540
you have to have every object so you

425
00:15:39,540 --> 00:15:43,019
query for the Garrett dackle and then uh

426
00:15:43,019 --> 00:15:45,060
that'll get parsed out by bot found on

427
00:15:45,060 --> 00:15:46,560
the next slide

428
00:15:46,560 --> 00:15:49,320
so once you've completed kind of your

429
00:15:49,320 --> 00:15:50,279
attack chain you're done with the

430
00:15:50,279 --> 00:15:51,779
investigation you'll transform it with

431
00:15:51,779 --> 00:15:54,180
the fordalus's buff found it you can see

432
00:15:54,180 --> 00:15:55,740
that it parses all five objects we've

433
00:15:55,740 --> 00:15:57,360
got our users or groups and then all of

434
00:15:57,360 --> 00:15:59,880
the ACL relationships so once that data

435
00:15:59,880 --> 00:16:02,339
is complete and you import it into buff

436
00:16:02,339 --> 00:16:04,500
into Bloodhound now you can see the

437
00:16:04,500 --> 00:16:06,600
entire chain that we enumerated in real

438
00:16:06,600 --> 00:16:08,820
time into a graphical format that you

439
00:16:08,820 --> 00:16:10,620
can share with the rest of the team

440
00:16:10,620 --> 00:16:12,839
so you can see the entire chain both

441
00:16:12,839 --> 00:16:15,300
directions and it's that familiar kind

442
00:16:15,300 --> 00:16:16,800
of Bloodhound GUI that everyone knows

443
00:16:16,800 --> 00:16:17,940
and loves

444
00:16:17,940 --> 00:16:19,500
so with Ace you can you can steadily

445
00:16:19,500 --> 00:16:21,660
pinpoint a Target and then work your way

446
00:16:21,660 --> 00:16:23,699
backwards to build your potential attack

447
00:16:23,699 --> 00:16:25,380
pass and perform kind of like the domain

448
00:16:25,380 --> 00:16:27,240
Recon while still being able to leverage

449
00:16:27,240 --> 00:16:29,519
all the features of Bloodhound and then

450
00:16:29,519 --> 00:16:32,220
so there's no you know no need to

451
00:16:32,220 --> 00:16:35,600
manually parse the dackles anymore

452
00:16:36,420 --> 00:16:38,100
so that was it but I do want to real

453
00:16:38,100 --> 00:16:39,839
quick have some acknowledgments uh dear

454
00:16:39,839 --> 00:16:42,540
Connor malema um I stole a lot of code

455
00:16:42,540 --> 00:16:44,279
from you I thank you very much for all

456
00:16:44,279 --> 00:16:45,899
the inspiration

457
00:16:45,899 --> 00:16:47,399
um Adam Brown and Matt Krill who were

458
00:16:47,399 --> 00:16:49,560
the developers of ballfound give them a

459
00:16:49,560 --> 00:16:51,480
follow they have a lot of great content

460
00:16:51,480 --> 00:16:53,399
and then my whole team had opted for

461
00:16:53,399 --> 00:16:55,380
putting up with me uh constantly asking

462
00:16:55,380 --> 00:16:58,320
asking them to test out my tools

463
00:16:58,320 --> 00:17:01,519
um but that's it thanks

464
00:17:07,199 --> 00:17:10,799
any questions before I step down

465
00:17:10,799 --> 00:17:13,858
awesome thanks everyone appreciate it

466
00:17:13,858 --> 00:17:17,839
[Applause]

