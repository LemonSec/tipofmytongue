1
00:00:01,520 --> 00:00:05,580
next up uh from uh starting it well

2
00:00:05,580 --> 00:00:07,259
right about now

3
00:00:07,259 --> 00:00:09,059
um we've got one of our longer 50 50

4
00:00:09,059 --> 00:00:11,400
minute talks and I'm very happy to

5
00:00:11,400 --> 00:00:13,920
introduce you all to Pim jarbach

6
00:00:13,920 --> 00:00:16,260
who is going to be uh giving a talk

7
00:00:16,260 --> 00:00:18,539
called Smoke loader the Pandora's box of

8
00:00:18,539 --> 00:00:20,939
tricks payloads and anti-analysis he's a

9
00:00:20,939 --> 00:00:22,320
reverse engineer

10
00:00:22,320 --> 00:00:26,600
so everyone give a big welcome to Bim

11
00:00:30,720 --> 00:00:32,700
can you all hear me okay

12
00:00:32,700 --> 00:00:34,739
cool all right

13
00:00:34,739 --> 00:00:36,239
all right so quick introduction to

14
00:00:36,239 --> 00:00:38,700
myself my name is Pym I am a reverse

15
00:00:38,700 --> 00:00:41,940
engineer at proofpoint my main focus is

16
00:00:41,940 --> 00:00:44,940
on equine botnet so things like ammo

17
00:00:44,940 --> 00:00:48,059
Tech cubot ice ID and so on but every

18
00:00:48,059 --> 00:00:51,059
once in a while I'll get the random apt

19
00:00:51,059 --> 00:00:52,440
request but I'll be asked to reverse

20
00:00:52,440 --> 00:00:55,140
engineer some nation-state Trojans and

21
00:00:55,140 --> 00:00:58,020
whatnot I'm a member of the cryptolamus

22
00:00:58,020 --> 00:00:59,579
team so for those of you that don't know

23
00:00:59,579 --> 00:01:02,039
what that is it's a team of roughly 25

24
00:01:02,039 --> 00:01:03,960
researchers all around the world where

25
00:01:03,960 --> 00:01:06,060
we for the last three or four years have

26
00:01:06,060 --> 00:01:08,479
been fighting with the botnet ammo tet

27
00:01:08,479 --> 00:01:10,740
and I've done a mix of reverse

28
00:01:10,740 --> 00:01:12,840
engineering for them and software

29
00:01:12,840 --> 00:01:14,340
development to do automated malware

30
00:01:14,340 --> 00:01:17,580
processing uh my background is in

31
00:01:17,580 --> 00:01:19,200
computer science I got a degree from

32
00:01:19,200 --> 00:01:22,979
Lewis and Clark uh in computer science

33
00:01:22,979 --> 00:01:25,380
um and my first job out of college was a

34
00:01:25,380 --> 00:01:28,200
software development role and I had a

35
00:01:28,200 --> 00:01:29,580
deep interest in malware at the time but

36
00:01:29,580 --> 00:01:31,380
I didn't have any formal training on

37
00:01:31,380 --> 00:01:33,960
reverse engineering so I kind of wanted

38
00:01:33,960 --> 00:01:36,000
to combine those two things and I

39
00:01:36,000 --> 00:01:38,040
started to get pretty good at reverse

40
00:01:38,040 --> 00:01:39,780
engineering and I also really enjoyed

41
00:01:39,780 --> 00:01:42,119
writing code so the for me the kind of

42
00:01:42,119 --> 00:01:44,040
nice blend of these two was Network

43
00:01:44,040 --> 00:01:45,659
protocols and specifically malware

44
00:01:45,659 --> 00:01:47,759
Network protocols that's kind of what I

45
00:01:47,759 --> 00:01:50,460
specialize in for malware analysis

46
00:01:50,460 --> 00:01:53,640
and there's my Twitter and GitHub

47
00:01:53,640 --> 00:01:55,799
okay so for the agenda today we'll be

48
00:01:55,799 --> 00:01:57,659
talking about uh we'll be going into the

49
00:01:57,659 --> 00:01:59,759
history of smoke loader and we'll be

50
00:01:59,759 --> 00:02:01,799
getting into the first stage that will

51
00:02:01,799 --> 00:02:04,200
analyze the set the final stage and then

52
00:02:04,200 --> 00:02:05,759
I'll talk about how I actually achieved

53
00:02:05,759 --> 00:02:07,799
a fully static config extraction for

54
00:02:07,799 --> 00:02:09,720
this malware family we'll be going into

55
00:02:09,720 --> 00:02:11,580
the communication protocol that it uses

56
00:02:11,580 --> 00:02:12,780
to communicate with the command and

57
00:02:12,780 --> 00:02:15,000
control and then we will talk about the

58
00:02:15,000 --> 00:02:16,500
payloads that I actually received from

59
00:02:16,500 --> 00:02:18,840
this botnet

60
00:02:18,840 --> 00:02:21,480
so what exactly is smoke loader a smoke

61
00:02:21,480 --> 00:02:23,220
loader is a piece of malware that is

62
00:02:23,220 --> 00:02:24,840
classified as a loader and this

63
00:02:24,840 --> 00:02:26,520
basically means that its entire job is

64
00:02:26,520 --> 00:02:28,680
to deliver additional malware so you can

65
00:02:28,680 --> 00:02:31,500
kind of think of it like the UPS system

66
00:02:31,500 --> 00:02:33,660
where people can just send malware

67
00:02:33,660 --> 00:02:35,340
through it

68
00:02:35,340 --> 00:02:38,220
um it first appeared in 2014 it targets

69
00:02:38,220 --> 00:02:42,140
solely windows it's around a 30 kilobyte

70
00:02:42,140 --> 00:02:44,819
payload which is pretty small generally

71
00:02:44,819 --> 00:02:46,860
you see them around like 100 to 150 to

72
00:02:46,860 --> 00:02:49,739
200 and this malware is actually written

73
00:02:49,739 --> 00:02:52,860
in C and assembly now pure assembly is

74
00:02:52,860 --> 00:02:54,060
not something you really see in malware

75
00:02:54,060 --> 00:02:56,879
too much but in this case which I'll get

76
00:02:56,879 --> 00:02:58,500
into later they actually have to do a

77
00:02:58,500 --> 00:02:59,700
good chunk of this development in

78
00:02:59,700 --> 00:03:01,019
assembly

79
00:03:01,019 --> 00:03:04,140
so while smoke loader is a loader it has

80
00:03:04,140 --> 00:03:06,120
additional plug-ins that kind of extend

81
00:03:06,120 --> 00:03:08,040
its capabilities that'll be for data

82
00:03:08,040 --> 00:03:10,640
exfiltration and just additional

83
00:03:10,640 --> 00:03:14,099
actions on objective and whatnot and

84
00:03:14,099 --> 00:03:15,780
from a reverse engineering perspective

85
00:03:15,780 --> 00:03:17,760
people really like to reverse engineer

86
00:03:17,760 --> 00:03:19,019
smoke loader because it's highly

87
00:03:19,019 --> 00:03:20,400
obfuscated there's things that smoke

88
00:03:20,400 --> 00:03:22,800
loader does that people don't see in

89
00:03:22,800 --> 00:03:24,900
other malware families

90
00:03:24,900 --> 00:03:26,280
um and since it was since it first came

91
00:03:26,280 --> 00:03:28,440
out in 2014 it's actually has had

92
00:03:28,440 --> 00:03:30,420
continued development throughout its

93
00:03:30,420 --> 00:03:32,700
life cycle so they generally have a

94
00:03:32,700 --> 00:03:34,860
round day update every year or two where

95
00:03:34,860 --> 00:03:36,959
they add additional features the entire

96
00:03:36,959 --> 00:03:38,640
package if you wanted to purchase the

97
00:03:38,640 --> 00:03:41,340
panel a bot and all the plugins and

98
00:03:41,340 --> 00:03:42,299
everything it would run you about

99
00:03:42,299 --> 00:03:44,940
sixteen hundred dollars and what's

100
00:03:44,940 --> 00:03:46,620
interesting here is there is a check

101
00:03:46,620 --> 00:03:49,860
where it's make sure that the machine

102
00:03:49,860 --> 00:03:51,480
that it's infected is not a Russian

103
00:03:51,480 --> 00:03:53,340
machine and this is something that you

104
00:03:53,340 --> 00:03:55,200
cannot remove this is like hard-coded

105
00:03:55,200 --> 00:03:56,760
within the bot everything else you can

106
00:03:56,760 --> 00:03:59,340
modify but this is a check that is not

107
00:03:59,340 --> 00:04:01,799
allowed to be bypassed and finally this

108
00:04:01,799 --> 00:04:04,680
is a multi-stage malware so it has that

109
00:04:04,680 --> 00:04:07,140
first stage and then if everything goes

110
00:04:07,140 --> 00:04:08,400
well with the first stage then it will

111
00:04:08,400 --> 00:04:12,060
get onto the final stage of the malware

112
00:04:12,060 --> 00:04:14,220
wow that does not look good

113
00:04:14,220 --> 00:04:15,440
um

114
00:04:15,440 --> 00:04:17,639
all right this talk might be tough with

115
00:04:17,639 --> 00:04:19,019
some of these diagrams

116
00:04:19,019 --> 00:04:20,699
um but this is basically the listing

117
00:04:20,699 --> 00:04:22,320
that they have on the Forum where smoke

118
00:04:22,320 --> 00:04:24,720
loader is being sold you can go and see

119
00:04:24,720 --> 00:04:26,340
what they're actually what they're

120
00:04:26,340 --> 00:04:28,139
advertising and what modules they have

121
00:04:28,139 --> 00:04:29,280
and it's really nice from reverse

122
00:04:29,280 --> 00:04:30,479
engineering perspective when you can

123
00:04:30,479 --> 00:04:32,940
just go and see what features they have

124
00:04:32,940 --> 00:04:35,880
makes my job a little bit easier

125
00:04:35,880 --> 00:04:38,580
okay so the current set of plugins that

126
00:04:38,580 --> 00:04:40,139
smoke loader actually has is a form

127
00:04:40,139 --> 00:04:42,479
grabber and this is advertised it's

128
00:04:42,479 --> 00:04:44,340
really just stealing credentials that

129
00:04:44,340 --> 00:04:46,320
are sent in HTTP post requests and

130
00:04:46,320 --> 00:04:49,320
whatnot I'm not sure the efficacy of how

131
00:04:49,320 --> 00:04:51,060
any of these work I haven't reverse

132
00:04:51,060 --> 00:04:52,919
engineered these plugins then it has a

133
00:04:52,919 --> 00:04:54,419
password sniffer which is just going to

134
00:04:54,419 --> 00:04:57,840
stiff sniff the network traffic for like

135
00:04:57,840 --> 00:05:01,020
FTP credentials and various other

136
00:05:01,020 --> 00:05:03,900
credentials the low hanging fruit and

137
00:05:03,900 --> 00:05:05,639
then it has a remote PC which basically

138
00:05:05,639 --> 00:05:07,800
acts as TeamViewer so it's not something

139
00:05:07,800 --> 00:05:10,139
where they have like their own session

140
00:05:10,139 --> 00:05:11,820
they actually join the session of the

141
00:05:11,820 --> 00:05:13,860
user and then they have a fake DNS

142
00:05:13,860 --> 00:05:16,080
plugin so if you wanted to redirect all

143
00:05:16,080 --> 00:05:19,199
traffic from google.com to some to your

144
00:05:19,199 --> 00:05:21,600
own IP you can do that this doesn't work

145
00:05:21,600 --> 00:05:24,120
with SSL so it's just purely HTTP

146
00:05:24,120 --> 00:05:26,940
traffic and then for they have a file

147
00:05:26,940 --> 00:05:29,220
search module so you can basically give

148
00:05:29,220 --> 00:05:31,259
it a regex and it will find all the

149
00:05:31,259 --> 00:05:33,479
files that match on the host and then

150
00:05:33,479 --> 00:05:35,820
send them back and then it has a procmon

151
00:05:35,820 --> 00:05:37,880
module which was kind of interesting

152
00:05:37,880 --> 00:05:39,840
frockman is generally a tool that people

153
00:05:39,840 --> 00:05:41,280
will use for incident response and

154
00:05:41,280 --> 00:05:43,020
whatnot but in this case they actually

155
00:05:43,020 --> 00:05:45,300
use it to they can basically Define

156
00:05:45,300 --> 00:05:47,160
events and actions to happen when

157
00:05:47,160 --> 00:05:49,259
specific processes are created

158
00:05:49,259 --> 00:05:51,479
and then they have a DDOS module a

159
00:05:51,479 --> 00:05:53,699
standard keylogger and then the email

160
00:05:53,699 --> 00:05:55,259
Grabber which is just going to steal the

161
00:05:55,259 --> 00:05:58,880
Outlook address book and whatnot

162
00:05:59,280 --> 00:06:00,900
so how is smoke loader actually used

163
00:06:00,900 --> 00:06:03,000
let's say I was in the market and I want

164
00:06:03,000 --> 00:06:04,680
to buy a botnet I want to start my own

165
00:06:04,680 --> 00:06:06,479
but I don't have the dev skills to write

166
00:06:06,479 --> 00:06:08,160
my own so I'm going to see this smoke

167
00:06:08,160 --> 00:06:10,199
loader and it's I decide that it's the

168
00:06:10,199 --> 00:06:12,479
one that I want to purchase so basically

169
00:06:12,479 --> 00:06:14,759
I'm going to get the C2 panel a bot and

170
00:06:14,759 --> 00:06:15,960
all the modules

171
00:06:15,960 --> 00:06:18,120
and I set up my panel and I start

172
00:06:18,120 --> 00:06:20,340
infecting machines let's say somehow I

173
00:06:20,340 --> 00:06:23,520
was able to infect 300 400 500 machines

174
00:06:23,520 --> 00:06:25,740
then I can go to all my friends and be

175
00:06:25,740 --> 00:06:27,300
like hey do you guys have malware that

176
00:06:27,300 --> 00:06:28,560
you want to deliver to all these

177
00:06:28,560 --> 00:06:30,660
machines that I have infected and

178
00:06:30,660 --> 00:06:34,020
they'll be like heck yeah why not and I

179
00:06:34,020 --> 00:06:36,080
can basically say well if I'll install

180
00:06:36,080 --> 00:06:38,400
your malware to 100 machines for a

181
00:06:38,400 --> 00:06:39,479
hundred dollars

182
00:06:39,479 --> 00:06:42,060
so it's basically this as I mentioned

183
00:06:42,060 --> 00:06:43,620
before it's really this delivery Network

184
00:06:43,620 --> 00:06:45,840
and you can have a single bot that is

185
00:06:45,840 --> 00:06:48,120
tasked to deliver 50 plus malware

186
00:06:48,120 --> 00:06:50,100
samples which just with with just its

187
00:06:50,100 --> 00:06:51,960
initial check into the command and

188
00:06:51,960 --> 00:06:52,740
control

189
00:06:52,740 --> 00:06:54,780
so this process is generally referred to

190
00:06:54,780 --> 00:06:56,699
as selling loads so the other big

191
00:06:56,699 --> 00:06:58,979
malware in this family of loaders is

192
00:06:58,979 --> 00:07:00,479
going to be private loader basically

193
00:07:00,479 --> 00:07:02,100
does the same thing where they sell a

194
00:07:02,100 --> 00:07:04,440
service for installing your malware x

195
00:07:04,440 --> 00:07:05,699
amount of times

196
00:07:05,699 --> 00:07:07,740
but this model has flaws it's something

197
00:07:07,740 --> 00:07:10,259
that's kind of used by lower or mid-tier

198
00:07:10,259 --> 00:07:12,660
criminals because a lot of these hosts

199
00:07:12,660 --> 00:07:14,220
that are infected they're infected with

200
00:07:14,220 --> 00:07:16,620
like 30 40 different remote access

201
00:07:16,620 --> 00:07:19,560
Trojans info Steelers so you really have

202
00:07:19,560 --> 00:07:21,180
cases where they're all exfiltrating the

203
00:07:21,180 --> 00:07:22,800
same set of credentials over and over

204
00:07:22,800 --> 00:07:24,660
that people have seen for the last 10

205
00:07:24,660 --> 00:07:26,639
years so the data you're actually

206
00:07:26,639 --> 00:07:28,199
getting is not going to be very valuable

207
00:07:28,199 --> 00:07:30,360
but if you just need like raw compute

208
00:07:30,360 --> 00:07:32,880
power for DDOS or stuff then I guess

209
00:07:32,880 --> 00:07:37,340
this could be a viable botnet to use

210
00:07:38,460 --> 00:07:39,900
okay so now we'll get into the

211
00:07:39,900 --> 00:07:41,819
operational model so let's say I'm the

212
00:07:41,819 --> 00:07:44,280
admin and I have a couple partners

213
00:07:44,280 --> 00:07:45,960
from the command and control server I'm

214
00:07:45,960 --> 00:07:48,660
able to send the following to the Smoke

215
00:07:48,660 --> 00:07:51,240
loader bot I can send the plugins if I

216
00:07:51,240 --> 00:07:53,940
purchase them I could send actual raw

217
00:07:53,940 --> 00:07:56,580
executables I can send executables that

218
00:07:56,580 --> 00:07:58,800
are encrypted with rc4 and I can

219
00:07:58,800 --> 00:08:01,440
actually send URLs that point to clear

220
00:08:01,440 --> 00:08:03,360
text executable so it's a way for

221
00:08:03,360 --> 00:08:05,460
instructing the bot to download payloads

222
00:08:05,460 --> 00:08:10,099
from a remote servers basically

223
00:08:11,340 --> 00:08:14,699
so in the actual listing of the smoke

224
00:08:14,699 --> 00:08:16,979
loader Forum post they actually say you

225
00:08:16,979 --> 00:08:18,180
have to crypt the panel they

226
00:08:18,180 --> 00:08:19,860
specifically say like this is not fud

227
00:08:19,860 --> 00:08:22,139
like this is a sample that you need to

228
00:08:22,139 --> 00:08:24,720
like uh pack basically so for those that

229
00:08:24,720 --> 00:08:27,240
don't know uh packing is basically if

230
00:08:27,240 --> 00:08:28,560
you were to think of your malware sample

231
00:08:28,560 --> 00:08:31,500
as a onion you just add another layer to

232
00:08:31,500 --> 00:08:33,120
it of encryption or compression or

233
00:08:33,120 --> 00:08:34,979
something and this is basically to

234
00:08:34,979 --> 00:08:37,200
defeat basic antivirus and things like

235
00:08:37,200 --> 00:08:40,799
virustotal checks and so on so let's say

236
00:08:40,799 --> 00:08:42,899
we have a pack of smoke floater sample

237
00:08:42,899 --> 00:08:44,399
and that's the sample that actually

238
00:08:44,399 --> 00:08:46,380
lives on disk here so then that is going

239
00:08:46,380 --> 00:08:48,120
to get unpacked to our smoke loader our

240
00:08:48,120 --> 00:08:50,220
initial stage of smoke loader and then

241
00:08:50,220 --> 00:08:51,899
if all the checks pass in that stage

242
00:08:51,899 --> 00:08:54,180
then we are finally going to get within

243
00:08:54,180 --> 00:08:57,120
memory the unpacked final smoke loader

244
00:08:57,120 --> 00:08:59,360
stage

245
00:09:00,720 --> 00:09:03,420
okay so with this understanding of this

246
00:09:03,420 --> 00:09:06,000
botnet and having me talk with a bunch

247
00:09:06,000 --> 00:09:07,860
of other friends and them saying like

248
00:09:07,860 --> 00:09:09,899
smoke loader you know it like delivers

249
00:09:09,899 --> 00:09:11,459
tons of payloads it would be really cool

250
00:09:11,459 --> 00:09:13,320
to see what they're actually delivering

251
00:09:13,320 --> 00:09:14,399
I was like well

252
00:09:14,399 --> 00:09:16,320
like I have access to a bunch of malware

253
00:09:16,320 --> 00:09:18,480
feeds but what if I want to basically

254
00:09:18,480 --> 00:09:22,200
turn this delivery network of infections

255
00:09:22,200 --> 00:09:24,180
into a delivery network of intelligence

256
00:09:24,180 --> 00:09:26,640
data basically like I wanted to turn

257
00:09:26,640 --> 00:09:29,220
smoke water on its head and really turn

258
00:09:29,220 --> 00:09:31,260
it into a passive intelligence gathering

259
00:09:31,260 --> 00:09:33,480
tool so this is the process that I came

260
00:09:33,480 --> 00:09:35,700
up with so there's a stage one for smoke

261
00:09:35,700 --> 00:09:37,380
loader the initial stage

262
00:09:37,380 --> 00:09:40,380
that is going to decompress the final

263
00:09:40,380 --> 00:09:42,420
stage of smoke loader and then from that

264
00:09:42,420 --> 00:09:44,220
we need to instruct all the

265
00:09:44,220 --> 00:09:46,140
configuration details so the command and

266
00:09:46,140 --> 00:09:47,880
control servers the encryption Keys the

267
00:09:47,880 --> 00:09:50,519
versions and whatnot and then we need to

268
00:09:50,519 --> 00:09:52,500
understand the network protocol because

269
00:09:52,500 --> 00:09:54,180
we need to be able to write a client for

270
00:09:54,180 --> 00:09:55,860
this botnet that can communicate with

271
00:09:55,860 --> 00:09:57,420
the command control without actually

272
00:09:57,420 --> 00:09:59,279
causing infections we basically just

273
00:09:59,279 --> 00:10:00,720
want to save off all the payloads that

274
00:10:00,720 --> 00:10:03,019
were sent

275
00:10:04,019 --> 00:10:05,940
so now we'll get into the analysis of

276
00:10:05,940 --> 00:10:07,800
smoke loader stage one

277
00:10:07,800 --> 00:10:09,600
so stage one is really where all the

278
00:10:09,600 --> 00:10:11,339
interesting obfuscation of the malware

279
00:10:11,339 --> 00:10:13,500
lives the functionality of this is

280
00:10:13,500 --> 00:10:16,380
really just to check if the host is a

281
00:10:16,380 --> 00:10:19,200
viable victim for the botnet so it

282
00:10:19,200 --> 00:10:21,420
checks the Locale of the machine just to

283
00:10:21,420 --> 00:10:23,100
make sure it's not doesn't have like a

284
00:10:23,100 --> 00:10:24,540
Cyrillic keyboard or something like that

285
00:10:24,540 --> 00:10:27,180
it checks for sandbox artifacts

286
00:10:27,180 --> 00:10:29,640
virtualization processes and then if all

287
00:10:29,640 --> 00:10:31,620
this checks paths it's going to decrypt

288
00:10:31,620 --> 00:10:35,279
and decompress the actual bot

289
00:10:35,279 --> 00:10:36,959
now some of the main obfuscation

290
00:10:36,959 --> 00:10:38,519
techniques that smoke loader uses are

291
00:10:38,519 --> 00:10:41,100
going to be opaque predicates and then

292
00:10:41,100 --> 00:10:42,300
it actually has this technique called

293
00:10:42,300 --> 00:10:45,839
runtime function decryption and a a slew

294
00:10:45,839 --> 00:10:50,000
of other anti-disassembly tricks

295
00:10:50,220 --> 00:10:52,860
that's not great either okay

296
00:10:52,860 --> 00:10:54,959
um so getting into opaque predicates I

297
00:10:54,959 --> 00:10:56,100
just want to give a quick introduction

298
00:10:56,100 --> 00:10:58,620
to what those are so in the top we have

299
00:10:58,620 --> 00:11:00,420
our incorrect disassembly so for those

300
00:11:00,420 --> 00:11:02,160
that can't see there's basically a

301
00:11:02,160 --> 00:11:04,320
instruction that is a jump not zero and

302
00:11:04,320 --> 00:11:05,480
it points to

303
00:11:05,480 --> 00:11:09,000
location X in memory and then there is a

304
00:11:09,000 --> 00:11:10,860
jump zero instruction which points to

305
00:11:10,860 --> 00:11:12,420
the same location X

306
00:11:12,420 --> 00:11:16,500
now as humans we can see that a jump not

307
00:11:16,500 --> 00:11:18,120
zero and a jump zero is going to cover

308
00:11:18,120 --> 00:11:19,920
all of your cases it's basically like if

309
00:11:19,920 --> 00:11:21,300
you were to write code if you had a

310
00:11:21,300 --> 00:11:24,000
conditional that said if true else if

311
00:11:24,000 --> 00:11:26,160
false like it's a condition that is

312
00:11:26,160 --> 00:11:28,019
always going to happen so we can easily

313
00:11:28,019 --> 00:11:30,540
see that this jump is always going to be

314
00:11:30,540 --> 00:11:33,660
taken but disassemblers can't realize

315
00:11:33,660 --> 00:11:35,040
this they don't they don't have the

316
00:11:35,040 --> 00:11:38,480
ability to process this Boolean logic so

317
00:11:38,480 --> 00:11:40,920
the disassembler takes the byte

318
00:11:40,920 --> 00:11:43,019
immediately after that jump zero and

319
00:11:43,019 --> 00:11:44,820
starts disassembling from there but

320
00:11:44,820 --> 00:11:46,320
that's actually the incorrect

321
00:11:46,320 --> 00:11:49,560
implementation so in the bottom we have

322
00:11:49,560 --> 00:11:51,420
the correct disassembly where I told the

323
00:11:51,420 --> 00:11:54,000
disassembler don't disassemble from this

324
00:11:54,000 --> 00:11:56,279
location disassemble from this one so

325
00:11:56,279 --> 00:11:58,140
that's where we can actually see in the

326
00:11:58,140 --> 00:12:00,959
bottom here it's doing a pop ECX and

327
00:12:00,959 --> 00:12:02,459
then doing a jump that is actually the

328
00:12:02,459 --> 00:12:04,740
correct flow and this is not something

329
00:12:04,740 --> 00:12:06,600
that is going to have any effect on the

330
00:12:06,600 --> 00:12:07,980
malware it's not going to slow it down

331
00:12:07,980 --> 00:12:10,980
or cause any issues with its execution

332
00:12:10,980 --> 00:12:12,959
this is purely just to make make the

333
00:12:12,959 --> 00:12:14,279
lives of reverse Engineers more

334
00:12:14,279 --> 00:12:16,579
difficult

335
00:12:18,480 --> 00:12:21,839
yikes okay so now we have the runtime

336
00:12:21,839 --> 00:12:24,000
function decryption so basically all the

337
00:12:24,000 --> 00:12:25,500
functions that are of interest to smoke

338
00:12:25,500 --> 00:12:28,260
loader it encrypts their function bodies

339
00:12:28,260 --> 00:12:29,820
so normally when you have your source

340
00:12:29,820 --> 00:12:31,019
code let's say you're writing a python

341
00:12:31,019 --> 00:12:33,000
application you have your function call

342
00:12:33,000 --> 00:12:34,500
and then you can just read the source

343
00:12:34,500 --> 00:12:36,120
code and see what's happening smoke

344
00:12:36,120 --> 00:12:37,980
loader doesn't allow you to do that so

345
00:12:37,980 --> 00:12:39,839
basically what it does is when it's

346
00:12:39,839 --> 00:12:42,120
calling a function that it has deemed

347
00:12:42,120 --> 00:12:44,100
important or basically eighty percent of

348
00:12:44,100 --> 00:12:46,620
its functions are encrypted it gets a

349
00:12:46,620 --> 00:12:48,839
reference to its current instruction

350
00:12:48,839 --> 00:12:51,000
pointer and it gets the size that it

351
00:12:51,000 --> 00:12:54,420
needs to decrypt or encrypt and then

352
00:12:54,420 --> 00:12:56,160
when the function is called it will

353
00:12:56,160 --> 00:12:58,440
decrypt the rest of the body and then at

354
00:12:58,440 --> 00:13:00,120
the end we actually have another call

355
00:13:00,120 --> 00:13:01,800
that will encrypt the rest of the body

356
00:13:01,800 --> 00:13:03,000
back up

357
00:13:03,000 --> 00:13:04,980
so from a static analysis perspective

358
00:13:04,980 --> 00:13:06,779
this makes the malware really tough to

359
00:13:06,779 --> 00:13:08,820
look at because you're not going to look

360
00:13:08,820 --> 00:13:10,260
at valid you're not going to be looking

361
00:13:10,260 --> 00:13:11,760
at valid assembly instructions you're

362
00:13:11,760 --> 00:13:13,620
going to be looking at encrypted code so

363
00:13:13,620 --> 00:13:15,720
the only way to really statically

364
00:13:15,720 --> 00:13:18,180
reverse engineer smoke loader is to add

365
00:13:18,180 --> 00:13:21,620
additional scripting on top of it

366
00:13:21,720 --> 00:13:22,980
so how does smoke loader actually

367
00:13:22,980 --> 00:13:25,740
Implement that so in the bottom here on

368
00:13:25,740 --> 00:13:27,420
the decryption results we actually have

369
00:13:27,420 --> 00:13:29,600
a function that I threw in idapro's

370
00:13:29,600 --> 00:13:32,220
decompiler after I did a bunch of work

371
00:13:32,220 --> 00:13:34,680
to decrypt the function body and you can

372
00:13:34,680 --> 00:13:36,839
see at the top there they have the

373
00:13:36,839 --> 00:13:39,240
decrypt code body call and then the rest

374
00:13:39,240 --> 00:13:41,399
of that code is basically what I was

375
00:13:41,399 --> 00:13:44,459
able to decrypt and then at the end they

376
00:13:44,459 --> 00:13:46,139
have another call to decrypt code body

377
00:13:46,139 --> 00:13:48,300
which in this case actually encrypts the

378
00:13:48,300 --> 00:13:49,860
rest of the body back up so even if you

379
00:13:49,860 --> 00:13:52,260
were to take a memory jump a smoke

380
00:13:52,260 --> 00:13:54,300
loader you would never have a snapshot

381
00:13:54,300 --> 00:13:56,160
in time where all the functions were

382
00:13:56,160 --> 00:13:58,620
decrypted so you really have to go the

383
00:13:58,620 --> 00:14:01,380
python approach and manually parse these

384
00:14:01,380 --> 00:14:03,060
function bodies so in the case of smoke

385
00:14:03,060 --> 00:14:05,820
loader it does this by xoring the body

386
00:14:05,820 --> 00:14:07,920
with a single byte xor key so in this

387
00:14:07,920 --> 00:14:10,139
case they use EF

388
00:14:10,139 --> 00:14:12,139
um

389
00:14:12,600 --> 00:14:14,399
so the next thing they do that I found

390
00:14:14,399 --> 00:14:17,339
interesting was they have a way to get

391
00:14:17,339 --> 00:14:20,040
obscure string references so

392
00:14:20,040 --> 00:14:22,079
they have a call instruction here that

393
00:14:22,079 --> 00:14:24,060
does a call to location four zero two

394
00:14:24,060 --> 00:14:26,820
two four six and that basically does a

395
00:14:26,820 --> 00:14:30,300
jump to uh the address after these

396
00:14:30,300 --> 00:14:32,279
strings now for those that don't know a

397
00:14:32,279 --> 00:14:34,440
call instruction in assembly what it

398
00:14:34,440 --> 00:14:36,240
really does is it pushes the following

399
00:14:36,240 --> 00:14:38,760
address onto the stack and then it does

400
00:14:38,760 --> 00:14:40,199
a jump that's all the call instruction

401
00:14:40,199 --> 00:14:43,199
does but immediately after they do this

402
00:14:43,199 --> 00:14:45,420
call instruction they have a pop into

403
00:14:45,420 --> 00:14:47,880
the the ESI register so it's basically

404
00:14:47,880 --> 00:14:51,420
giving ESI the address of that sbie dll

405
00:14:51,420 --> 00:14:53,820
which is the sandboxy dll it's a common

406
00:14:53,820 --> 00:14:56,100
tool that people can use for analyzing

407
00:14:56,100 --> 00:14:57,959
Windows processes and malware

408
00:14:57,959 --> 00:15:00,500
so this is just one way that they

409
00:15:00,500 --> 00:15:02,880
references reference strings indirectly

410
00:15:02,880 --> 00:15:04,320
and this also actually breaks

411
00:15:04,320 --> 00:15:06,959
disassembly and The Idler Pro decompiler

412
00:15:06,959 --> 00:15:09,240
so just another thing to make static

413
00:15:09,240 --> 00:15:12,180
reverse engineering more difficult

414
00:15:12,180 --> 00:15:14,459
so now getting into the actual execution

415
00:15:14,459 --> 00:15:16,620
flow of what stage one does

416
00:15:16,620 --> 00:15:18,360
so the first check that it does is it

417
00:15:18,360 --> 00:15:20,339
checks if there's a debugger attached

418
00:15:20,339 --> 00:15:22,680
and it does this by reading the process

419
00:15:22,680 --> 00:15:24,060
environment block which I'll talk about

420
00:15:24,060 --> 00:15:27,300
later and then it loads two dlls kernel

421
00:15:27,300 --> 00:15:29,880
32 and user32 and if it detects that it

422
00:15:29,880 --> 00:15:32,100
has a Cyrillic keyboard then the malware

423
00:15:32,100 --> 00:15:34,620
will exit but if that check passes it's

424
00:15:34,620 --> 00:15:38,760
going to load ADV API 32 and shell 32

425
00:15:38,760 --> 00:15:40,560
and then it actually does something

426
00:15:40,560 --> 00:15:43,500
interesting it takes ntdll which is kind

427
00:15:43,500 --> 00:15:45,720
of your main Windows deal all your

428
00:15:45,720 --> 00:15:48,360
lowest level dll and it copies it to the

429
00:15:48,360 --> 00:15:50,339
temp directory and loads it from there

430
00:15:50,339 --> 00:15:51,899
and this is a technique that malware

431
00:15:51,899 --> 00:15:55,199
uses to evade EDR systems because EDR

432
00:15:55,199 --> 00:15:57,600
systems commonly look to see if ntdll is

433
00:15:57,600 --> 00:15:59,820
being loaded directly so so that they

434
00:15:59,820 --> 00:16:01,620
can place their hooks into the functions

435
00:16:01,620 --> 00:16:03,959
so in this case it's a attempt to bypass

436
00:16:03,959 --> 00:16:05,760
that

437
00:16:05,760 --> 00:16:07,079
um and then they have some basic checks

438
00:16:07,079 --> 00:16:08,940
just to see the check its own file name

439
00:16:08,940 --> 00:16:11,399
so if you like if it's sampled.bin or

440
00:16:11,399 --> 00:16:13,199
virus.bin or something the malware is

441
00:16:13,199 --> 00:16:15,180
not going to execute and it checks if

442
00:16:15,180 --> 00:16:16,920
there are dlls loaded within its own

443
00:16:16,920 --> 00:16:20,160
process that relate to sandbox

444
00:16:20,160 --> 00:16:22,440
and then it checks if there are VM

445
00:16:22,440 --> 00:16:23,880
processes run so it checks for like

446
00:16:23,880 --> 00:16:25,880
virtualbox parallels

447
00:16:25,880 --> 00:16:28,500
VMware and so on

448
00:16:28,500 --> 00:16:30,420
and then finally if all those checks

449
00:16:30,420 --> 00:16:33,959
happen it has a a if statement basically

450
00:16:33,959 --> 00:16:36,839
where it will if the host is a 64-bit

451
00:16:36,839 --> 00:16:39,300
system versus a 32-bit system then it

452
00:16:39,300 --> 00:16:42,240
will decrypt and decompress the 64-bit

453
00:16:42,240 --> 00:16:44,399
payload otherwise it will do the 32-bit

454
00:16:44,399 --> 00:16:46,820
payload

455
00:16:50,279 --> 00:16:52,800
so now if we were to think about this

456
00:16:52,800 --> 00:16:54,480
smoke loader initial stage in memory

457
00:16:54,480 --> 00:16:56,040
it's basically broken up into three

458
00:16:56,040 --> 00:16:58,980
chunks so we have the

459
00:16:58,980 --> 00:17:01,800
top chunk being our smoke loader stage

460
00:17:01,800 --> 00:17:03,720
one then our second chunk is going to be

461
00:17:03,720 --> 00:17:06,240
our 32-bit final stage and then the

462
00:17:06,240 --> 00:17:09,179
final bit is going to be our 64-bit

463
00:17:09,179 --> 00:17:10,919
so how does smoke loader actually

464
00:17:10,919 --> 00:17:12,839
extract this final stage within itself

465
00:17:12,839 --> 00:17:16,199
so it decrypts it with a 4 byte xor key

466
00:17:16,199 --> 00:17:17,280
which I have in the python

467
00:17:17,280 --> 00:17:19,380
implementation there and then it

468
00:17:19,380 --> 00:17:22,679
actually uses a algorithm called lzsa to

469
00:17:22,679 --> 00:17:24,780
decompress now for those that know

470
00:17:24,780 --> 00:17:26,939
things about compression algorithms

471
00:17:26,939 --> 00:17:28,380
they're incredibly difficult to

472
00:17:28,380 --> 00:17:29,700
implement

473
00:17:29,700 --> 00:17:30,780
um

474
00:17:30,780 --> 00:17:32,580
and I was actually able to find an

475
00:17:32,580 --> 00:17:34,980
implementation of this decompression

476
00:17:34,980 --> 00:17:37,080
algorithm but it's in a raw assembly

477
00:17:37,080 --> 00:17:38,340
which makes it kind of difficult because

478
00:17:38,340 --> 00:17:39,660
you can't really call that from any

479
00:17:39,660 --> 00:17:41,580
python bindings and you can't really

480
00:17:41,580 --> 00:17:43,260
there's no C implementation no nothing

481
00:17:43,260 --> 00:17:45,960
so it makes analysis even more difficult

482
00:17:45,960 --> 00:17:47,580
there but let's say we were able to

483
00:17:47,580 --> 00:17:50,220
decrypt and decompress our payload and

484
00:17:50,220 --> 00:17:51,660
now we have our final stage of smoke

485
00:17:51,660 --> 00:17:54,140
loader

486
00:17:55,620 --> 00:17:58,320
so the final stage this is basically

487
00:17:58,320 --> 00:17:59,940
what the final stage looks like in a hex

488
00:17:59,940 --> 00:18:02,280
editor now if you notice there is no PE

489
00:18:02,280 --> 00:18:04,860
header so this is not a valid Windows

490
00:18:04,860 --> 00:18:06,600
executable

491
00:18:06,600 --> 00:18:09,660
so how does this load well basically it

492
00:18:09,660 --> 00:18:11,580
uh it functions as Shell Code so it's

493
00:18:11,580 --> 00:18:13,380
position independent code where it needs

494
00:18:13,380 --> 00:18:15,539
to be able to resolve its own access

495
00:18:15,539 --> 00:18:16,919
because normally when you have a Windows

496
00:18:16,919 --> 00:18:18,720
executable you can rely on the Windows

497
00:18:18,720 --> 00:18:20,580
loader that is going to properly load

498
00:18:20,580 --> 00:18:22,500
your executable memory and make sure

499
00:18:22,500 --> 00:18:23,820
that you can make all the function calls

500
00:18:23,820 --> 00:18:25,620
that you need to make with shell code

501
00:18:25,620 --> 00:18:29,360
you don't have that feature basically so

502
00:18:29,360 --> 00:18:31,620
this final stage needs to be able to

503
00:18:31,620 --> 00:18:33,780
resolve those things all by itself

504
00:18:33,780 --> 00:18:35,760
so the main thing or the main features

505
00:18:35,760 --> 00:18:37,799
that this final stage really has is just

506
00:18:37,799 --> 00:18:40,679
C2 Communications and to inject and

507
00:18:40,679 --> 00:18:42,960
deliver or to inject and receive these

508
00:18:42,960 --> 00:18:44,940
payloads that's all it really does at

509
00:18:44,940 --> 00:18:47,220
the end of the day

510
00:18:47,220 --> 00:18:48,780
so since it's a Shell Code or

511
00:18:48,780 --> 00:18:50,700
effectively Shell Code it needs to

512
00:18:50,700 --> 00:18:52,620
initialize its main client so it needs a

513
00:18:52,620 --> 00:18:54,240
couple things that it there's a couple

514
00:18:54,240 --> 00:18:55,799
things that has to do that normally you

515
00:18:55,799 --> 00:18:59,520
would rely on the Windows loader for so

516
00:18:59,520 --> 00:19:01,860
it needs to find the correct dll handle

517
00:19:01,860 --> 00:19:03,660
so this basically gives it access to the

518
00:19:03,660 --> 00:19:05,640
libraries that it needs and then from

519
00:19:05,640 --> 00:19:07,200
those libraries it needs to figure out

520
00:19:07,200 --> 00:19:09,539
the functions that it wants to call so

521
00:19:09,539 --> 00:19:11,580
it needs to be able to find all those

522
00:19:11,580 --> 00:19:13,620
addresses for functions and then finally

523
00:19:13,620 --> 00:19:16,260
it needs IPS and domains to communicate

524
00:19:16,260 --> 00:19:17,760
with because it needs to check into the

525
00:19:17,760 --> 00:19:21,059
C2 to get its list of tasks

526
00:19:21,059 --> 00:19:22,860
um and then we it needs the ability to

527
00:19:22,860 --> 00:19:24,600
gather host information and in this case

528
00:19:24,600 --> 00:19:26,280
that information is sent to the command

529
00:19:26,280 --> 00:19:28,500
and control server or then the admin of

530
00:19:28,500 --> 00:19:30,240
the panel is able to filter their Bots

531
00:19:30,240 --> 00:19:32,640
by the various information that has been

532
00:19:32,640 --> 00:19:34,880
sent

533
00:19:35,220 --> 00:19:38,520
okay so how does it actually so how does

534
00:19:38,520 --> 00:19:40,140
the smoke loader sample actually able to

535
00:19:40,140 --> 00:19:42,059
do this well it reads something called

536
00:19:42,059 --> 00:19:44,160
the PEB or the process environment block

537
00:19:44,160 --> 00:19:46,140
and it's the structure that is present

538
00:19:46,140 --> 00:19:48,960
within all windows processes and there's

539
00:19:48,960 --> 00:19:50,820
and normally it's really for like

540
00:19:50,820 --> 00:19:53,520
additional metadata and debugging

541
00:19:53,520 --> 00:19:55,799
purposes but in this specific case

542
00:19:55,799 --> 00:19:57,840
malware authors love it for this one

543
00:19:57,840 --> 00:20:00,840
particular field this ldr field here and

544
00:20:00,840 --> 00:20:01,980
that's basically a pointer to another

545
00:20:01,980 --> 00:20:05,220
struct and that struct is this smaller

546
00:20:05,220 --> 00:20:08,640
one on the you are right and that

547
00:20:08,640 --> 00:20:10,799
basically has a list of all the dlls

548
00:20:10,799 --> 00:20:12,419
that are loaded within the windows

549
00:20:12,419 --> 00:20:15,240
process so as you're unpacking your

550
00:20:15,240 --> 00:20:17,340
malware samples this basically gives you

551
00:20:17,340 --> 00:20:18,960
access to a bunch of dlls where you

552
00:20:18,960 --> 00:20:21,120
wouldn't have to or where normally you

553
00:20:21,120 --> 00:20:22,440
would have to do a bunch of math to try

554
00:20:22,440 --> 00:20:24,480
and figure out how to call these

555
00:20:24,480 --> 00:20:26,340
functions and stuff but Norm but in this

556
00:20:26,340 --> 00:20:28,260
case they can just rely on the in-memory

557
00:20:28,260 --> 00:20:32,280
order module list to get handles to dlls

558
00:20:32,280 --> 00:20:34,380
so on the

559
00:20:34,380 --> 00:20:36,780
right here at your right we can see that

560
00:20:36,780 --> 00:20:39,000
they're accessing the PEB and then

561
00:20:39,000 --> 00:20:40,919
they're load they're accessing the ldr

562
00:20:40,919 --> 00:20:43,740
field or member and then the in load

563
00:20:43,740 --> 00:20:45,840
order module list so this Loop that

564
00:20:45,840 --> 00:20:48,600
they're doing here this do while loop is

565
00:20:48,600 --> 00:20:51,960
basically their way of hashing the dll's

566
00:20:51,960 --> 00:20:55,140
name so this is a common technique that

567
00:20:55,140 --> 00:20:57,299
malware uses where it basically can

568
00:20:57,299 --> 00:21:01,440
store references to Strings and to

569
00:21:01,440 --> 00:21:04,260
um yeah just just strings without having

570
00:21:04,260 --> 00:21:05,940
to place the string within the sample

571
00:21:05,940 --> 00:21:08,400
itself because let's say it had the

572
00:21:08,400 --> 00:21:11,360
string x64 debug or something in there

573
00:21:11,360 --> 00:21:13,440
you wouldn't want to put that within

574
00:21:13,440 --> 00:21:15,120
your sample because then just from

575
00:21:15,120 --> 00:21:16,500
looking at the strings of the sample you

576
00:21:16,500 --> 00:21:17,640
can see well okay well maybe it's

577
00:21:17,640 --> 00:21:19,080
looking for a debugger so maybe I don't

578
00:21:19,080 --> 00:21:21,480
use that specific debugger but in this

579
00:21:21,480 --> 00:21:24,059
case they generate a hash and then they

580
00:21:24,059 --> 00:21:26,820
xor with a four byte value and if that

581
00:21:26,820 --> 00:21:31,260
value equals this C3 fd16d then they

582
00:21:31,260 --> 00:21:33,000
know that they found the handle for

583
00:21:33,000 --> 00:21:35,700
ntgll they know that they can preserve

584
00:21:35,700 --> 00:21:37,919
that and use that for later purposes and

585
00:21:37,919 --> 00:21:39,659
that is the actual hashing algorithm

586
00:21:39,659 --> 00:21:41,880
that smoke loader uses I think this is

587
00:21:41,880 --> 00:21:43,980
pretty consistent across

588
00:21:43,980 --> 00:21:47,000
all the versions

589
00:21:47,700 --> 00:21:50,760
but at this point it has found the dll

590
00:21:50,760 --> 00:21:54,059
handle for ntdll and kernel 32 and then

591
00:21:54,059 --> 00:21:55,620
from there it has these functions which

592
00:21:55,620 --> 00:21:57,659
I've named resolve Imports into struct

593
00:21:57,659 --> 00:21:59,940
where it takes the handles to those dlls

594
00:21:59,940 --> 00:22:03,179
along with a array of API hashes

595
00:22:03,179 --> 00:22:05,400
basically just hashes of function names

596
00:22:05,400 --> 00:22:07,440
and it will iterate over all the

597
00:22:07,440 --> 00:22:09,960
functions in the dll hash them and if it

598
00:22:09,960 --> 00:22:11,760
matches the given hash then it saves

599
00:22:11,760 --> 00:22:13,860
that address to its own structure so it

600
00:22:13,860 --> 00:22:18,720
does this for user32 ADV API Ole 32 win

601
00:22:18,720 --> 00:22:23,000
HTTP and DNS API

602
00:22:23,940 --> 00:22:26,640
so the bot is basically initialized at

603
00:22:26,640 --> 00:22:28,620
this point there are two things that it

604
00:22:28,620 --> 00:22:30,360
does before it actually returns to

605
00:22:30,360 --> 00:22:32,820
making Communications and processing

606
00:22:32,820 --> 00:22:35,640
payloads it creates two threads where

607
00:22:35,640 --> 00:22:36,900
they basically check for malware

608
00:22:36,900 --> 00:22:38,700
analysis processes and they use the same

609
00:22:38,700 --> 00:22:40,380
hashing algorithm that I listed earlier

610
00:22:40,380 --> 00:22:43,020
to basically iterate over all the list

611
00:22:43,020 --> 00:22:45,360
of running processes and all the window

612
00:22:45,360 --> 00:22:47,480
names of all the

613
00:22:47,480 --> 00:22:50,039
processes and then they hash those and

614
00:22:50,039 --> 00:22:51,419
if they match any of the given hashes

615
00:22:51,419 --> 00:22:53,340
then they know that they're that a

616
00:22:53,340 --> 00:22:54,840
malware analyst is trying to look at

617
00:22:54,840 --> 00:22:56,640
their malware sample so they quit

618
00:22:56,640 --> 00:22:57,960
execution there so if you're ever

619
00:22:57,960 --> 00:23:01,620
debugging smoke loader and it just

620
00:23:01,620 --> 00:23:03,600
randomly quits on you this this might be

621
00:23:03,600 --> 00:23:05,700
why so you might want to patch out these

622
00:23:05,700 --> 00:23:08,520
create thread calls

623
00:23:08,520 --> 00:23:10,320
okay so now that the client is

624
00:23:10,320 --> 00:23:12,600
initialized we need to talk about the

625
00:23:12,600 --> 00:23:13,860
network communications how the bot

626
00:23:13,860 --> 00:23:16,140
actually sends the data that it gathers

627
00:23:16,140 --> 00:23:17,460
to the command and control server and

628
00:23:17,460 --> 00:23:19,980
what data is actually sent so the bot

629
00:23:19,980 --> 00:23:22,440
will send the version of smoke loader so

630
00:23:22,440 --> 00:23:24,419
I mentioned earlier they basically have

631
00:23:24,419 --> 00:23:27,299
a One update every year

632
00:23:27,299 --> 00:23:29,820
and the version is just going to be the

633
00:23:29,820 --> 00:23:30,900
given year

634
00:23:30,900 --> 00:23:32,400
and this version is actually the first

635
00:23:32,400 --> 00:23:34,799
thing that is checked within the

636
00:23:34,799 --> 00:23:37,559
um response on the C2 panel as well as

637
00:23:37,559 --> 00:23:39,659
the bot side and if that value doesn't

638
00:23:39,659 --> 00:23:41,880
match then it discards the rest of the

639
00:23:41,880 --> 00:23:43,500
packet

640
00:23:43,500 --> 00:23:45,900
and then it's going to send a 41 byte

641
00:23:45,900 --> 00:23:47,580
bot ID which is basically a

642
00:23:47,580 --> 00:23:50,340
concatenation of host information and

643
00:23:50,340 --> 00:23:52,200
effectively for my purposes I just set

644
00:23:52,200 --> 00:23:54,000
this to a random string just so that I

645
00:23:54,000 --> 00:23:55,500
never got any so that they couldn't

646
00:23:55,500 --> 00:23:58,320
block me by bot ID and then you have a

647
00:23:58,320 --> 00:24:00,179
hostname which in this case they have a

648
00:24:00,179 --> 00:24:03,240
max value of a 16 byte string again I

649
00:24:03,240 --> 00:24:06,240
just set this to a random value

650
00:24:06,240 --> 00:24:08,640
and then we have the affiliate ID so

651
00:24:08,640 --> 00:24:09,840
this is the field that is extremely

652
00:24:09,840 --> 00:24:12,419
important so let's say I purchased smoke

653
00:24:12,419 --> 00:24:14,220
loader and I set up my botnet I would

654
00:24:14,220 --> 00:24:17,820
name my botnet Pim or something then

655
00:24:17,820 --> 00:24:20,220
basically every bot that checks in needs

656
00:24:20,220 --> 00:24:23,100
to have that affiliate the affiliate ID

657
00:24:23,100 --> 00:24:25,980
of Pim and if it's not that value then I

658
00:24:25,980 --> 00:24:27,299
know that it's a bad bot or that it

659
00:24:27,299 --> 00:24:28,799
shouldn't be connecting to my system or

660
00:24:28,799 --> 00:24:30,179
it's just not going to get any payloads

661
00:24:30,179 --> 00:24:31,919
so you really have to make sure that if

662
00:24:31,919 --> 00:24:33,840
you are extracting the configuration of

663
00:24:33,840 --> 00:24:35,280
smoke loader that you're able to extract

664
00:24:35,280 --> 00:24:37,640
this affiliate ID because it greatly

665
00:24:37,640 --> 00:24:40,320
influences how many payloads you get

666
00:24:40,320 --> 00:24:42,179
and then it sends the user's privilege

667
00:24:42,179 --> 00:24:45,299
just to see if the user is admin and

668
00:24:45,299 --> 00:24:48,620
then it sends the windows version

669
00:24:48,720 --> 00:24:51,419
so smoke loader actually has support for

670
00:24:51,419 --> 00:24:53,220
three commands now botnets they all have

671
00:24:53,220 --> 00:24:55,200
support for commands and they generally

672
00:24:55,200 --> 00:24:59,039
will have uh five to ten commands or

673
00:24:59,039 --> 00:25:00,360
something but smoke loader only has

674
00:25:00,360 --> 00:25:03,539
three and they are really just for the

675
00:25:03,539 --> 00:25:06,539
purposes of modifying the final stage so

676
00:25:06,539 --> 00:25:08,220
they have I which stands for installed

677
00:25:08,220 --> 00:25:09,480
persistence

678
00:25:09,480 --> 00:25:12,240
they have R which stands for remove or

679
00:25:12,240 --> 00:25:14,700
uninstall so if you send them like a bad

680
00:25:14,700 --> 00:25:16,140
packet or something you might get a r

681
00:25:16,140 --> 00:25:18,000
response back that was something that I

682
00:25:18,000 --> 00:25:19,799
actually dealt with When developing my

683
00:25:19,799 --> 00:25:22,440
smoke loader client and then U is

684
00:25:22,440 --> 00:25:24,779
actually a update so if the admin of the

685
00:25:24,779 --> 00:25:27,960
botnet buys the new update or New Year's

686
00:25:27,960 --> 00:25:30,360
version you'll see this command to tell

687
00:25:30,360 --> 00:25:34,500
your Bot to update to 2022 or something

688
00:25:34,500 --> 00:25:36,059
whoopsies

689
00:25:36,059 --> 00:25:37,980
um okay so now that we've analyzed stage

690
00:25:37,980 --> 00:25:39,659
two we need to figure out how to extract

691
00:25:39,659 --> 00:25:43,760
the configuration from smoke loader

692
00:25:44,220 --> 00:25:46,380
um so I really wanted to

693
00:25:46,380 --> 00:25:47,460
um

694
00:25:47,460 --> 00:25:49,799
actually wait so we have to be able to

695
00:25:49,799 --> 00:25:52,919
extract the final stage from the initial

696
00:25:52,919 --> 00:25:54,360
smoke loader stage and I didn't want to

697
00:25:54,360 --> 00:25:56,700
rely on any sandboxes because I just

698
00:25:56,700 --> 00:25:57,779
wanted to be able to do this all

699
00:25:57,779 --> 00:26:00,059
statically and throw a thousand plus

700
00:26:00,059 --> 00:26:03,299
samples at my code and just be given the

701
00:26:03,299 --> 00:26:05,940
final stage so

702
00:26:05,940 --> 00:26:08,220
I mentioned earlier that for lzsa there

703
00:26:08,220 --> 00:26:10,919
is no source code implementation but in

704
00:26:10,919 --> 00:26:13,860
this case I actually used the CPU or the

705
00:26:13,860 --> 00:26:15,960
assembly instructions within smoke

706
00:26:15,960 --> 00:26:17,580
loader itself to decompress the final

707
00:26:17,580 --> 00:26:19,500
stage so I used something called a CPU

708
00:26:19,500 --> 00:26:22,320
emulator in this case I used unicorn and

709
00:26:22,320 --> 00:26:23,880
it basically allows you to define a

710
00:26:23,880 --> 00:26:26,460
start address and an end address and as

711
00:26:26,460 --> 00:26:28,400
long as you set your arguments correctly

712
00:26:28,400 --> 00:26:32,900
it will basically decompress the payload

713
00:26:32,900 --> 00:26:35,100
without me having to write source code

714
00:26:35,100 --> 00:26:36,659
for it so I know that this function in

715
00:26:36,659 --> 00:26:38,760
assembly is going to decompress I just

716
00:26:38,760 --> 00:26:40,679
have to set up the correct arguments and

717
00:26:40,679 --> 00:26:42,720
then I can basically wrap it in Python

718
00:26:42,720 --> 00:26:44,159
bindings and then I have this nice

719
00:26:44,159 --> 00:26:46,140
little python function that can

720
00:26:46,140 --> 00:26:49,500
decompress the final stage so at this

721
00:26:49,500 --> 00:26:51,539
point we're able to take 1000 plus

722
00:26:51,539 --> 00:26:54,419
samples and we can easily figure out the

723
00:26:54,419 --> 00:26:56,400
xor key and we can decompress the final

724
00:26:56,400 --> 00:26:58,440
stage

725
00:26:58,440 --> 00:27:00,360
so what actually constitutes a smoke

726
00:27:00,360 --> 00:27:03,059
loader configuration so this Json blob

727
00:27:03,059 --> 00:27:05,100
here is basically how I organize all of

728
00:27:05,100 --> 00:27:06,720
my configurations I extract

729
00:27:06,720 --> 00:27:08,279
configurations from multiple malware

730
00:27:08,279 --> 00:27:10,200
families I will generally have a family

731
00:27:10,200 --> 00:27:13,140
field in there where I can easily figure

732
00:27:13,140 --> 00:27:15,480
out what the malware Family actually is

733
00:27:15,480 --> 00:27:18,240
and then we have our list of c2s and

734
00:27:18,240 --> 00:27:20,100
then we smoke loader actually has two

735
00:27:20,100 --> 00:27:21,179
encryption keys for network

736
00:27:21,179 --> 00:27:23,039
communication so it has one key that is

737
00:27:23,039 --> 00:27:24,840
used to encrypt data going to this

738
00:27:24,840 --> 00:27:26,820
command and control server and it has

739
00:27:26,820 --> 00:27:28,380
another key that's used for decrypting

740
00:27:28,380 --> 00:27:30,779
data from the command and control server

741
00:27:30,779 --> 00:27:32,640
and then we have that affiliate ID and

742
00:27:32,640 --> 00:27:34,200
the version and with just this

743
00:27:34,200 --> 00:27:36,000
information you have everything you need

744
00:27:36,000 --> 00:27:38,159
to create your own smoke loader bot and

745
00:27:38,159 --> 00:27:42,600
to start a new uh a new bot

746
00:27:42,600 --> 00:27:44,340
so how do we actually extract these

747
00:27:44,340 --> 00:27:46,380
encryption keys so

748
00:27:46,380 --> 00:27:49,380
for some of these like mid-tier or kind

749
00:27:49,380 --> 00:27:50,880
of lower tier malware families the way

750
00:27:50,880 --> 00:27:52,200
that they actually work is when they

751
00:27:52,200 --> 00:27:54,480
have a bot Builder it's not like they're

752
00:27:54,480 --> 00:27:56,100
putting in the new command and control

753
00:27:56,100 --> 00:27:58,380
servers into the source code and then

754
00:27:58,380 --> 00:28:01,020
compiling everything and doing it that

755
00:28:01,020 --> 00:28:03,419
way basically they take the compiled

756
00:28:03,419 --> 00:28:04,799
code and they strip out where the

757
00:28:04,799 --> 00:28:06,059
command and control servers are where

758
00:28:06,059 --> 00:28:07,860
the encryption keys are and they save

759
00:28:07,860 --> 00:28:10,860
those as variables and then when they go

760
00:28:10,860 --> 00:28:12,299
to build a new bot when you pass those

761
00:28:12,299 --> 00:28:14,700
fields in it will basically just copy

762
00:28:14,700 --> 00:28:18,179
paste them into the raw binary itself so

763
00:28:18,179 --> 00:28:20,460
this means for our analysis it makes

764
00:28:20,460 --> 00:28:22,380
extraction very easy because offsets for

765
00:28:22,380 --> 00:28:24,720
things aren't going to change they're

766
00:28:24,720 --> 00:28:26,820
not going to change bytes for assembly

767
00:28:26,820 --> 00:28:28,980
instructions so in that case I actually

768
00:28:28,980 --> 00:28:32,279
was able to use regex which I'll get

769
00:28:32,279 --> 00:28:35,460
into here so this is the python code

770
00:28:35,460 --> 00:28:37,140
that I actually use to extract the

771
00:28:37,140 --> 00:28:38,700
encryption key

772
00:28:38,700 --> 00:28:40,559
so we Define our regex now people

773
00:28:40,559 --> 00:28:43,140
generally use regex for Strings and

774
00:28:43,140 --> 00:28:44,520
whatnot but there's nothing stopping you

775
00:28:44,520 --> 00:28:46,919
from using it for assembly instructions

776
00:28:46,919 --> 00:28:49,200
and then we iterate over all the matches

777
00:28:49,200 --> 00:28:51,659
for that regex and then we unpack them

778
00:28:51,659 --> 00:28:53,400
with the correct engineers and we append

779
00:28:53,400 --> 00:28:57,480
it to our list and return the list now

780
00:28:57,480 --> 00:28:59,700
I never had a case here where I got more

781
00:28:59,700 --> 00:29:01,500
than one result so I guess that's just

782
00:29:01,500 --> 00:29:03,480
showing that this technique can be

783
00:29:03,480 --> 00:29:05,100
really valuable when you have these like

784
00:29:05,100 --> 00:29:08,840
template Builder malware families

785
00:29:09,419 --> 00:29:11,039
and then we can do the same thing for

786
00:29:11,039 --> 00:29:13,679
version extraction we identify where the

787
00:29:13,679 --> 00:29:15,299
version is stored or referenced within

788
00:29:15,299 --> 00:29:17,159
the assembly instructions and then we

789
00:29:17,159 --> 00:29:19,200
create a regex based off that iterate

790
00:29:19,200 --> 00:29:21,120
over all the matches then we can do some

791
00:29:21,120 --> 00:29:22,799
light checking in this case I just make

792
00:29:22,799 --> 00:29:24,720
sure it's a value that's not over 0x

793
00:29:24,720 --> 00:29:27,179
ffff

794
00:29:27,179 --> 00:29:30,000
I should really just do the year

795
00:29:30,000 --> 00:29:32,220
um but this approach works extremely

796
00:29:32,220 --> 00:29:33,720
well for the final stage like I don't

797
00:29:33,720 --> 00:29:35,220
think I encountered I think I processed

798
00:29:35,220 --> 00:29:37,620
200 300 samples and I didn't have a

799
00:29:37,620 --> 00:29:39,240
single one where I wasn't able to

800
00:29:39,240 --> 00:29:41,960
extract this information

801
00:29:42,059 --> 00:29:43,860
so now for the command and control

802
00:29:43,860 --> 00:29:45,539
servers for this malware the way it

803
00:29:45,539 --> 00:29:48,720
works is they have a global uh array

804
00:29:48,720 --> 00:29:51,899
basically of string pointers or byte

805
00:29:51,899 --> 00:29:54,120
pointers basically where each one is

806
00:29:54,120 --> 00:29:56,760
going to be a offset to a encrypted

807
00:29:56,760 --> 00:29:58,679
command and control server

808
00:29:58,679 --> 00:30:00,960
so it iterates over that Global list of

809
00:30:00,960 --> 00:30:03,659
commanding controls pointers and it

810
00:30:03,659 --> 00:30:05,340
reads the first value and that's going

811
00:30:05,340 --> 00:30:06,480
to be the length of the command and

812
00:30:06,480 --> 00:30:08,399
control server and then it reads the

813
00:30:08,399 --> 00:30:10,200
next four bytes and that's going to be

814
00:30:10,200 --> 00:30:12,419
your rc4 key to decrypt the command and

815
00:30:12,419 --> 00:30:14,399
control server and then finally we can

816
00:30:14,399 --> 00:30:17,240
rc4 with that four byte key and we can

817
00:30:17,240 --> 00:30:22,200
rc4 decrypt the length that we extracted

818
00:30:22,200 --> 00:30:24,120
earlier and then from there we have our

819
00:30:24,120 --> 00:30:26,960
Command and control so in Smoke loader

820
00:30:26,960 --> 00:30:30,600
they use anywhere from two to ten c2s

821
00:30:30,600 --> 00:30:32,039
from what I've seen they either have a

822
00:30:32,039 --> 00:30:34,559
pattern of in this case they use host

823
00:30:34,559 --> 00:30:36,059
file host and then some random number

824
00:30:36,059 --> 00:30:38,100
they follow that pattern a lot where

825
00:30:38,100 --> 00:30:39,899
it'll be a concatenation of three words

826
00:30:39,899 --> 00:30:42,419
and then a random number at the end or

827
00:30:42,419 --> 00:30:44,940
they'll just go full just random string

828
00:30:44,940 --> 00:30:47,159
mode and just have like six different

829
00:30:47,159 --> 00:30:48,480
domains in there that are all random

830
00:30:48,480 --> 00:30:50,779
strings

831
00:30:51,240 --> 00:30:53,460
so putting this all together I wrote a

832
00:30:53,460 --> 00:30:55,399
bunch of code that could

833
00:30:55,399 --> 00:30:58,799
find all these uh these obfuscation

834
00:30:58,799 --> 00:31:00,480
techniques strip them out from the

835
00:31:00,480 --> 00:31:02,940
binary decrypt all the function bodies

836
00:31:02,940 --> 00:31:05,520
and decompress the final stage and it

837
00:31:05,520 --> 00:31:08,880
does this all statically so hopefully

838
00:31:08,880 --> 00:31:11,600
aha

839
00:31:12,179 --> 00:31:14,700
so it found a bunch of opaque predicates

840
00:31:14,700 --> 00:31:16,799
here and I actually patched those bytes

841
00:31:16,799 --> 00:31:18,299
out so it makes it really nice and easy

842
00:31:18,299 --> 00:31:20,640
to look at smoke loader in a

843
00:31:20,640 --> 00:31:23,399
disassembler and then we identify all of

844
00:31:23,399 --> 00:31:25,559
the function calls where it goes to

845
00:31:25,559 --> 00:31:27,899
decrypt the function body decrypt all of

846
00:31:27,899 --> 00:31:30,539
those and then we identify the start and

847
00:31:30,539 --> 00:31:33,659
end address of the 64-bit and 32-bit

848
00:31:33,659 --> 00:31:37,200
payloads and then we're able to decrypt

849
00:31:37,200 --> 00:31:39,419
and decompress the final stage and then

850
00:31:39,419 --> 00:31:40,620
from that we can run our config

851
00:31:40,620 --> 00:31:43,200
extraction which is the output here in

852
00:31:43,200 --> 00:31:44,760
Json

853
00:31:44,760 --> 00:31:45,720
um and this is something that I'll open

854
00:31:45,720 --> 00:31:47,520
source so if people want ideas for how

855
00:31:47,520 --> 00:31:49,799
to do a more complex conflict extraction

856
00:31:49,799 --> 00:31:52,080
they can use this as a reference or

857
00:31:52,080 --> 00:31:54,439
whatever

858
00:31:55,020 --> 00:31:57,360
okay so now we basically have this

859
00:31:57,360 --> 00:31:59,580
pipeline where we're able to take a

860
00:31:59,580 --> 00:32:01,799
stage one smoke loader samples

861
00:32:01,799 --> 00:32:03,600
and extract configurations from fully

862
00:32:03,600 --> 00:32:05,580
statically so we don't have to rely on

863
00:32:05,580 --> 00:32:07,140
any sandboxes or anything so now we need

864
00:32:07,140 --> 00:32:09,419
to actually implement the bot of smoke

865
00:32:09,419 --> 00:32:11,220
loader

866
00:32:11,220 --> 00:32:13,799
so for the data that gets sent to the C2

867
00:32:13,799 --> 00:32:16,140
this is the clear text Data that's

868
00:32:16,140 --> 00:32:17,419
actually sent

869
00:32:17,419 --> 00:32:20,159
the packet gets encrypted with that 4

870
00:32:20,159 --> 00:32:22,200
byte rc4 key that I mentioned in the

871
00:32:22,200 --> 00:32:25,500
Json configuration but the first value

872
00:32:25,500 --> 00:32:27,179
it sends is going to be the version and

873
00:32:27,179 --> 00:32:28,559
this is the first thing that the malware

874
00:32:28,559 --> 00:32:31,020
checks if this value is off at all it

875
00:32:31,020 --> 00:32:33,299
discards the rest of the package so if

876
00:32:33,299 --> 00:32:34,980
you want to do any fuzzing or any sort

877
00:32:34,980 --> 00:32:37,559
of like just

878
00:32:37,559 --> 00:32:39,539
analysis of the network protocol you

879
00:32:39,539 --> 00:32:40,679
have to make sure that you understand

880
00:32:40,679 --> 00:32:42,899
the network protocol so it's not just

881
00:32:42,899 --> 00:32:45,539
going to discard all of your data that

882
00:32:45,539 --> 00:32:47,580
you're sending to it but then we have

883
00:32:47,580 --> 00:32:49,500
our bot ID in this case I just used

884
00:32:49,500 --> 00:32:51,840
again just a random string we have our

885
00:32:51,840 --> 00:32:53,820
computer name just set it to a random

886
00:32:53,820 --> 00:32:55,380
string then you have your affiliate ID

887
00:32:55,380 --> 00:32:57,480
which is the only field that really has

888
00:32:57,480 --> 00:32:59,580
to be set correctly and then we have our

889
00:32:59,580 --> 00:33:01,260
Windows version in this case I was

890
00:33:01,260 --> 00:33:03,720
pretending to be a Windows 10 machine

891
00:33:03,720 --> 00:33:05,880
and then we have our win bit I think

892
00:33:05,880 --> 00:33:07,500
that's I don't actually know what that

893
00:33:07,500 --> 00:33:10,020
one is and then the Bots privilege level

894
00:33:10,020 --> 00:33:12,480
so this is basically the privilege level

895
00:33:12,480 --> 00:33:14,519
of the user that executed the process

896
00:33:14,519 --> 00:33:16,980
and then we have our Command ID our

897
00:33:16,980 --> 00:33:18,419
Command option and our Command results

898
00:33:18,419 --> 00:33:20,399
so those are the three fields that are

899
00:33:20,399 --> 00:33:22,019
going to change throughout the package

900
00:33:22,019 --> 00:33:23,220
that we send to the command and control

901
00:33:23,220 --> 00:33:25,559
server everything else fully static you

902
00:33:25,559 --> 00:33:26,700
can just hard code those in there

903
00:33:26,700 --> 00:33:28,140
throughout the entirety of the bot's

904
00:33:28,140 --> 00:33:29,760
lifetime

905
00:33:29,760 --> 00:33:32,880
and then finally there's um it appends

906
00:33:32,880 --> 00:33:34,380
the packet with random data or it's

907
00:33:34,380 --> 00:33:35,940
going to be data that's being

908
00:33:35,940 --> 00:33:38,539
exfiltrated

909
00:33:39,179 --> 00:33:41,700
so then for the response packet

910
00:33:41,700 --> 00:33:43,500
it's the same kind of thing where the

911
00:33:43,500 --> 00:33:45,059
first two bytes are going to be the

912
00:33:45,059 --> 00:33:46,799
version and it checks the bot also makes

913
00:33:46,799 --> 00:33:48,659
the same check but if it's not that

914
00:33:48,659 --> 00:33:51,299
value then it discards the rest of the

915
00:33:51,299 --> 00:33:52,440
packet

916
00:33:52,440 --> 00:33:55,679
and then it actually sends a two byte

917
00:33:55,679 --> 00:33:57,480
value that is going to correspond to a

918
00:33:57,480 --> 00:34:00,299
uh a number so in this case this

919
00:34:00,299 --> 00:34:03,059
corresponds to 48 and this basically

920
00:34:03,059 --> 00:34:05,700
tells the bot there are 48 tasks for you

921
00:34:05,700 --> 00:34:08,280
to download make 48 requests to download

922
00:34:08,280 --> 00:34:10,260
it and then you'll get a payload back

923
00:34:10,260 --> 00:34:11,879
and then we have this hard-coded

924
00:34:11,879 --> 00:34:14,099
separator here and finally we have this

925
00:34:14,099 --> 00:34:15,839
plug-in string where it basically is a

926
00:34:15,839 --> 00:34:18,599
plug-in underscore size equals blank and

927
00:34:18,599 --> 00:34:21,359
if that value is not zero then it is

928
00:34:21,359 --> 00:34:23,639
going to or then the rest of the data in

929
00:34:23,639 --> 00:34:24,839
this packet is going to be all the

930
00:34:24,839 --> 00:34:27,480
plugins when they're encrypted and it

931
00:34:27,480 --> 00:34:28,800
basically instructs the bot that hey

932
00:34:28,800 --> 00:34:29,879
there are plugins that you need to

933
00:34:29,879 --> 00:34:32,179
process

934
00:34:32,580 --> 00:34:33,960
so how does this actually look over the

935
00:34:33,960 --> 00:34:37,679
wire I set up my client and I let it run

936
00:34:37,679 --> 00:34:40,500
and captured some traffic in Wireshark

937
00:34:40,500 --> 00:34:43,080
so in this case everything is made

938
00:34:43,080 --> 00:34:46,440
through post requests to slash and then

939
00:34:46,440 --> 00:34:49,800
they have the encrypted rc4 packet but

940
00:34:49,800 --> 00:34:51,060
if we look at the response it's actually

941
00:34:51,060 --> 00:34:53,040
returning a 404 so this is something

942
00:34:53,040 --> 00:34:54,780
that you have to keep in mind when

943
00:34:54,780 --> 00:34:57,180
dealing with malware systems is they

944
00:34:57,180 --> 00:34:58,500
aren't going to follow like standard

945
00:34:58,500 --> 00:35:00,839
practices of like if it's a valid

946
00:35:00,839 --> 00:35:03,119
response return of 200 or something I

947
00:35:03,119 --> 00:35:04,680
think within the bot they actually check

948
00:35:04,680 --> 00:35:06,780
to ensure that it returns a 404 before

949
00:35:06,780 --> 00:35:08,220
it starts processing the rest of the

950
00:35:08,220 --> 00:35:10,260
data so this is just to keep in mind

951
00:35:10,260 --> 00:35:12,780
that malware systems are not they don't

952
00:35:12,780 --> 00:35:14,280
have to abide by the same rules that

953
00:35:14,280 --> 00:35:17,220
standard developers do

954
00:35:17,220 --> 00:35:19,140
so now we need to get into the order of

955
00:35:19,140 --> 00:35:21,240
communications that the malware needs to

956
00:35:21,240 --> 00:35:22,859
send so we started off with that one

957
00:35:22,859 --> 00:35:24,839
zero zero zero one command which

958
00:35:24,839 --> 00:35:27,420
basically puts us in the botnet panel so

959
00:35:27,420 --> 00:35:29,640
at that point we are a live bot and

960
00:35:29,640 --> 00:35:31,200
we've incremented the number of bots

961
00:35:31,200 --> 00:35:33,300
that this Bot Master has

962
00:35:33,300 --> 00:35:34,800
and it's going to tell us you need to

963
00:35:34,800 --> 00:35:38,280
pull uh 48 tasks

964
00:35:38,280 --> 00:35:40,140
so we make a bunch of requests we send

965
00:35:40,140 --> 00:35:43,320
the command one zero zero zero two which

966
00:35:43,320 --> 00:35:46,440
basically will return the uh the

967
00:35:46,440 --> 00:35:48,300
specific tasks that we need to inject or

968
00:35:48,300 --> 00:35:50,820
write to disk or in some form or another

969
00:35:50,820 --> 00:35:53,820
execute and then we need to confirm back

970
00:35:53,820 --> 00:35:55,200
to the command and control server that

971
00:35:55,200 --> 00:35:58,140
yes this actually worked we properly

972
00:35:58,140 --> 00:36:00,359
installed this malware and then the

973
00:36:00,359 --> 00:36:02,099
actual like I mentioned earlier that

974
00:36:02,099 --> 00:36:04,260
that this process is basically called

975
00:36:04,260 --> 00:36:06,480
selling loads so then it will actually

976
00:36:06,480 --> 00:36:08,400
increment the loads counter and say yes

977
00:36:08,400 --> 00:36:13,760
that is another uh load for this actor

978
00:36:14,400 --> 00:36:17,579
so proof of concept I wrote a bot for

979
00:36:17,579 --> 00:36:19,500
smoke loader in go

980
00:36:19,500 --> 00:36:22,020
and I set up my own command and control

981
00:36:22,020 --> 00:36:23,520
server

982
00:36:23,520 --> 00:36:25,560
here

983
00:36:25,560 --> 00:36:28,440
and basically what it's doing is I

984
00:36:28,440 --> 00:36:33,140
basically said hey there is a oopsies

985
00:36:33,680 --> 00:36:36,660
here we initialize our bot so we're

986
00:36:36,660 --> 00:36:39,000
basically registering the bot with the

987
00:36:39,000 --> 00:36:40,859
command and control and in my panel I

988
00:36:40,859 --> 00:36:43,020
had it say there is a payload at

989
00:36:43,020 --> 00:36:45,780
google.com or twitter.com and then I put

990
00:36:45,780 --> 00:36:47,300
a actual

991
00:36:47,300 --> 00:36:50,280
payload that is being sent to smoke load

992
00:36:50,280 --> 00:36:52,920
or Bots so at this point

993
00:36:52,920 --> 00:36:54,660
um I have a fully working bot where

994
00:36:54,660 --> 00:36:56,880
we're able to pull tasks and dump them

995
00:36:56,880 --> 00:36:59,520
to disk with various metadata and we can

996
00:36:59,520 --> 00:37:00,900
confirm back that yes this wasn't

997
00:37:00,900 --> 00:37:03,000
exactly or this was installed when in

998
00:37:03,000 --> 00:37:05,480
fact it wasn't

999
00:37:07,200 --> 00:37:09,000
but the plugins I have yet to address

1000
00:37:09,000 --> 00:37:11,640
the plugin so I'll kind of going or I'll

1001
00:37:11,640 --> 00:37:13,260
be going over now what the structure of

1002
00:37:13,260 --> 00:37:15,240
these plugins is and how to parse them

1003
00:37:15,240 --> 00:37:16,500
it's not something that I really saw

1004
00:37:16,500 --> 00:37:19,740
people talk about anywhere so if

1005
00:37:19,740 --> 00:37:21,000
anyone's looking at smoke loader and

1006
00:37:21,000 --> 00:37:23,520
this helps you then great

1007
00:37:23,520 --> 00:37:25,560
so there are two structures for the

1008
00:37:25,560 --> 00:37:27,960
plugins the main one is going to be this

1009
00:37:27,960 --> 00:37:30,300
smoke plug-in container which is that

1010
00:37:30,300 --> 00:37:32,640
bottom one there and basically when the

1011
00:37:32,640 --> 00:37:33,900
bot registers with the command and

1012
00:37:33,900 --> 00:37:35,280
control it sends back if there are

1013
00:37:35,280 --> 00:37:38,160
plugins it returns back a blob of rc4

1014
00:37:38,160 --> 00:37:41,579
encrypted data now that data is

1015
00:37:41,579 --> 00:37:43,140
basically this smoke plugging container

1016
00:37:43,140 --> 00:37:45,480
it contains information about how many

1017
00:37:45,480 --> 00:37:48,240
plugins there are and then it basically

1018
00:37:48,240 --> 00:37:50,280
goes into a loop for processing all the

1019
00:37:50,280 --> 00:37:51,420
plugins

1020
00:37:51,420 --> 00:37:53,220
so the first value for the actual

1021
00:37:53,220 --> 00:37:55,560
plug-in itself which is this top struct

1022
00:37:55,560 --> 00:37:57,839
here is it gives the size of the plug-in

1023
00:37:57,839 --> 00:38:00,060
and then a 15 byte rc4 key which I

1024
00:38:00,060 --> 00:38:01,980
thought was kind of interesting you

1025
00:38:01,980 --> 00:38:04,680
don't generally see 15 byte rc4 Keys

1026
00:38:04,680 --> 00:38:06,599
they'll generally keep it like 16 or 32

1027
00:38:06,599 --> 00:38:08,880
or something and they actually use that

1028
00:38:08,880 --> 00:38:12,240
rc4 key to decrypt the plugin and inject

1029
00:38:12,240 --> 00:38:13,859
it into memory

1030
00:38:13,859 --> 00:38:14,700
um

1031
00:38:14,700 --> 00:38:17,579
now these plugins I didn't get a chance

1032
00:38:17,579 --> 00:38:18,960
to reverse engineer them because it's

1033
00:38:18,960 --> 00:38:20,339
kind of the same format as the final

1034
00:38:20,339 --> 00:38:22,680
stage of smoke loader where

1035
00:38:22,680 --> 00:38:23,339
um

1036
00:38:23,339 --> 00:38:25,200
there is no valid header to it so it

1037
00:38:25,200 --> 00:38:27,119
makes it kind of a pain to analyze and I

1038
00:38:27,119 --> 00:38:29,900
just didn't have enough time

1039
00:38:30,060 --> 00:38:32,400
um but now we were able to implement our

1040
00:38:32,400 --> 00:38:34,500
bot and we're able to pull payload so

1041
00:38:34,500 --> 00:38:35,700
now we're kind of in the stage where we

1042
00:38:35,700 --> 00:38:37,320
need to set up a environment where we

1043
00:38:37,320 --> 00:38:39,180
can passively pull payloads and gain

1044
00:38:39,180 --> 00:38:41,940
that intelligence from this botnet

1045
00:38:41,940 --> 00:38:44,760
so for the setup I set up a Raspberry Pi

1046
00:38:44,760 --> 00:38:48,660
under my desk about 10 months ago the

1047
00:38:48,660 --> 00:38:51,000
bat the bot gather or the the bot

1048
00:38:51,000 --> 00:38:52,560
gathered configurations from various

1049
00:38:52,560 --> 00:38:53,760
sources

1050
00:38:53,760 --> 00:38:55,320
it would register with the command and

1051
00:38:55,320 --> 00:38:57,119
control server make the appropriate

1052
00:38:57,119 --> 00:38:58,619
amount of download requests where we

1053
00:38:58,619 --> 00:39:00,359
would get a bunch of payloads those

1054
00:39:00,359 --> 00:39:02,280
would be written to disk and then we

1055
00:39:02,280 --> 00:39:05,099
could post process them later so some

1056
00:39:05,099 --> 00:39:07,440
caveats here I did not run the Bots for

1057
00:39:07,440 --> 00:39:09,480
very long I basically let the bot

1058
00:39:09,480 --> 00:39:10,940
register with the command and control

1059
00:39:10,940 --> 00:39:14,640
and I went through that first Loop of

1060
00:39:14,640 --> 00:39:16,740
tasks to pull so I never ran a bot for I

1061
00:39:16,740 --> 00:39:18,839
think more than five minutes I never

1062
00:39:18,839 --> 00:39:20,300
switched any

1063
00:39:20,300 --> 00:39:22,859
geolocations or used any proxies of any

1064
00:39:22,859 --> 00:39:25,440
kind everything was just done from my uh

1065
00:39:25,440 --> 00:39:27,599
apartment here in Portland so I'm sure

1066
00:39:27,599 --> 00:39:29,579
my my IP appears in a bunch of smoke

1067
00:39:29,579 --> 00:39:32,099
loader panels right now and I've

1068
00:39:32,099 --> 00:39:33,780
randomized data but I didn't make it

1069
00:39:33,780 --> 00:39:36,480
look believable like I didn't have like

1070
00:39:36,480 --> 00:39:38,700
actual names in the username or actual

1071
00:39:38,700 --> 00:39:41,599
host information in the host name so

1072
00:39:41,599 --> 00:39:43,560
that was something I probably could have

1073
00:39:43,560 --> 00:39:45,359
done better but I wrote all this

1074
00:39:45,359 --> 00:39:47,040
information out from all these payloads

1075
00:39:47,040 --> 00:39:49,020
into a CSV

1076
00:39:49,020 --> 00:39:50,400
um that's basically what we're seeing

1077
00:39:50,400 --> 00:39:53,599
there in the screenshot

1078
00:39:53,820 --> 00:39:55,920
so some results I get that that's really

1079
00:39:55,920 --> 00:39:57,599
small so I'll just read them out but

1080
00:39:57,599 --> 00:39:59,220
over an eight month period I captured

1081
00:39:59,220 --> 00:40:00,660
ten thousand samples and I was feeling

1082
00:40:00,660 --> 00:40:02,099
really good about myself thinking like

1083
00:40:02,099 --> 00:40:03,780
hey I got this really cool malware feed

1084
00:40:03,780 --> 00:40:06,000
and where I can like where I have

1085
00:40:06,000 --> 00:40:07,619
definitive proof that smoke loader is

1086
00:40:07,619 --> 00:40:10,260
delivering X malware at this time with

1087
00:40:10,260 --> 00:40:11,820
this affiliate ID

1088
00:40:11,820 --> 00:40:14,280
but really only 2500 of those were valid

1089
00:40:14,280 --> 00:40:17,339
PE files and I just did not parse the

1090
00:40:17,339 --> 00:40:19,200
results properly a good chunk of them

1091
00:40:19,200 --> 00:40:22,980
were HTML files and like 403 responses

1092
00:40:22,980 --> 00:40:24,900
so that was my bad

1093
00:40:24,900 --> 00:40:26,880
um but I for all the PE files that I

1094
00:40:26,880 --> 00:40:28,320
actually got I submitted them to the

1095
00:40:28,320 --> 00:40:31,079
hatching triage sandbox and if it was

1096
00:40:31,079 --> 00:40:33,480
able to classify it as X Y or Z malware

1097
00:40:33,480 --> 00:40:34,980
family then I kept a record of it in

1098
00:40:34,980 --> 00:40:37,980
that CSV so some of the most significant

1099
00:40:37,980 --> 00:40:40,079
results I got from this work I

1100
00:40:40,079 --> 00:40:43,200
apparently got 614 Deja Vu samples which

1101
00:40:43,200 --> 00:40:45,020
for those that don't know it's a

1102
00:40:45,020 --> 00:40:47,940
ransomware written in go but I think the

1103
00:40:47,940 --> 00:40:50,220
signatures for this aren't very good go

1104
00:40:50,220 --> 00:40:52,980
binaries are quite large in nature and

1105
00:40:52,980 --> 00:40:54,720
I've seen quite a few false positives

1106
00:40:54,720 --> 00:40:56,700
with deja vu in the past so that might

1107
00:40:56,700 --> 00:40:59,460
need future exploration

1108
00:40:59,460 --> 00:41:01,740
and then we have archive and Redline

1109
00:41:01,740 --> 00:41:03,599
which are kind of your standard info

1110
00:41:03,599 --> 00:41:04,859
Steelers you're one of the mill info

1111
00:41:04,859 --> 00:41:07,140
Steelers but what's interesting here is

1112
00:41:07,140 --> 00:41:09,359
we have smoke loader delivering smoke

1113
00:41:09,359 --> 00:41:12,240
loader which is that first bar there so

1114
00:41:12,240 --> 00:41:14,160
that's kind of like this weird recursive

1115
00:41:14,160 --> 00:41:16,079
system where smoke loader admins are

1116
00:41:16,079 --> 00:41:17,700
paying other smoke loader admins to

1117
00:41:17,700 --> 00:41:20,820
deliver their own uh smoke loader so you

1118
00:41:20,820 --> 00:41:23,700
have this like weird recursive system of

1119
00:41:23,700 --> 00:41:27,540
smoke water uh delivering smoke loader

1120
00:41:27,540 --> 00:41:29,339
but then some other interesting ones

1121
00:41:29,339 --> 00:41:32,760
here is we have iced ID and gozi or isfb

1122
00:41:32,760 --> 00:41:34,260
however you feel like calling that and

1123
00:41:34,260 --> 00:41:36,720
those are kind of two more mature

1124
00:41:36,720 --> 00:41:38,400
malware operations where they don't

1125
00:41:38,400 --> 00:41:40,500
really have to rely on this selling

1126
00:41:40,500 --> 00:41:42,660
loads model like they can they have

1127
00:41:42,660 --> 00:41:45,420
their own ways of sending Mouse spam and

1128
00:41:45,420 --> 00:41:47,579
they don't have to put all their effort

1129
00:41:47,579 --> 00:41:48,900
into this which I thought was kind of

1130
00:41:48,900 --> 00:41:50,220
interesting that they then were using

1131
00:41:50,220 --> 00:41:52,079
this selling loads model to load their

1132
00:41:52,079 --> 00:41:53,520
malware but

1133
00:41:53,520 --> 00:41:55,859
who am I um and then also there was

1134
00:41:55,859 --> 00:41:57,720
Topsy which for those that don't know

1135
00:41:57,720 --> 00:42:01,079
tafsi is a spam botnet and so it was

1136
00:42:01,079 --> 00:42:03,240
kind of this other case where like you

1137
00:42:03,240 --> 00:42:04,980
have smoke loader Distributing malware

1138
00:42:04,980 --> 00:42:07,020
which then delivers Topsy which then

1139
00:42:07,020 --> 00:42:08,940
sends more malware so it's just like

1140
00:42:08,940 --> 00:42:11,220
these hosts get so mangled and just have

1141
00:42:11,220 --> 00:42:12,780
so much malware running on them that

1142
00:42:12,780 --> 00:42:15,839
they I'm sure that the uh that they

1143
00:42:15,839 --> 00:42:18,240
aren't running very well

1144
00:42:18,240 --> 00:42:20,579
so some additional observations when I

1145
00:42:20,579 --> 00:42:23,160
started this and set up the bot I was

1146
00:42:23,160 --> 00:42:24,780
not able to properly extract the

1147
00:42:24,780 --> 00:42:27,960
affiliate ID so I kind of I knew that

1148
00:42:27,960 --> 00:42:29,520
there were some main ones and in that

1149
00:42:29,520 --> 00:42:32,160
case it's Pub 1 Pub 2 and Pub five I

1150
00:42:32,160 --> 00:42:34,859
think there's a pub four and maybe a pub

1151
00:42:34,859 --> 00:42:36,720
three in there even but I had it hard

1152
00:42:36,720 --> 00:42:38,280
coded to these so we can kind of see

1153
00:42:38,280 --> 00:42:40,920
that Pub 1 is the most active one so

1154
00:42:40,920 --> 00:42:42,420
maybe in the future I would like to

1155
00:42:42,420 --> 00:42:44,520
figure out why that one why I got the

1156
00:42:44,520 --> 00:42:46,740
most payloads there

1157
00:42:46,740 --> 00:42:49,859
so some Reflections from this work I was

1158
00:42:49,859 --> 00:42:51,720
pretty bummed that a good chunk of the

1159
00:42:51,720 --> 00:42:52,859
results that I was saving to disc

1160
00:42:52,859 --> 00:42:55,560
weren't valid PE files I think if I

1161
00:42:55,560 --> 00:42:57,119
actually looked at my data throughout

1162
00:42:57,119 --> 00:42:58,619
this process and saw that a good chunk

1163
00:42:58,619 --> 00:43:00,480
of it weren't valid and they would have

1164
00:43:00,480 --> 00:43:02,700
done better work to make my bots more

1165
00:43:02,700 --> 00:43:03,660
believable

1166
00:43:03,660 --> 00:43:05,700
and I would have added more IP rotation

1167
00:43:05,700 --> 00:43:08,099
to the setup because within smoke loader

1168
00:43:08,099 --> 00:43:10,440
in the panel you can actually say like I

1169
00:43:10,440 --> 00:43:12,540
want this payload to go to bots in this

1170
00:43:12,540 --> 00:43:14,060
deal location

1171
00:43:14,060 --> 00:43:17,400
and for the longest time since 2020

1172
00:43:17,400 --> 00:43:19,319
actually that was the only ver that was

1173
00:43:19,319 --> 00:43:21,960
the latest version that was out but then

1174
00:43:21,960 --> 00:43:23,579
three months ago they actually came out

1175
00:43:23,579 --> 00:43:25,500
with version 2022 which I was not aware

1176
00:43:25,500 --> 00:43:27,599
of so most of this work was done with

1177
00:43:27,599 --> 00:43:30,720
2020 but I tried my bot against the 2020

1178
00:43:30,720 --> 00:43:32,400
version of the panel and it works fine

1179
00:43:32,400 --> 00:43:34,680
so they don't have a network or a

1180
00:43:34,680 --> 00:43:36,300
protocol update it seems to be just

1181
00:43:36,300 --> 00:43:39,060
plug-in related and I would like to

1182
00:43:39,060 --> 00:43:40,800
probably reverse engineer the plugins

1183
00:43:40,800 --> 00:43:42,839
just to see that they actually are doing

1184
00:43:42,839 --> 00:43:45,119
what their advertised is doing

1185
00:43:45,119 --> 00:43:47,160
I need to look into the affiliate IDs

1186
00:43:47,160 --> 00:43:49,980
and how they're extracted the way that I

1187
00:43:49,980 --> 00:43:51,599
know to extract them is to read the last

1188
00:43:51,599 --> 00:43:53,640
four bytes of state of the initial stage

1189
00:43:53,640 --> 00:43:55,920
but that does not work for all the

1190
00:43:55,920 --> 00:43:57,119
samples so I need to figure out for

1191
00:43:57,119 --> 00:43:58,859
those samples where it doesn't work how

1192
00:43:58,859 --> 00:44:01,079
that is actually implemented and right

1193
00:44:01,079 --> 00:44:02,640
now the Unicorn component basically

1194
00:44:02,640 --> 00:44:05,520
reads A entire like legitimate smoke

1195
00:44:05,520 --> 00:44:07,680
loader sample it doesn't execute any of

1196
00:44:07,680 --> 00:44:09,540
the other functions but it just feels

1197
00:44:09,540 --> 00:44:11,280
weird basically having my software

1198
00:44:11,280 --> 00:44:14,280
development product rely on a legitimate

1199
00:44:14,280 --> 00:44:16,380
smoke loader sample

1200
00:44:16,380 --> 00:44:19,560
so some additional resources I did most

1201
00:44:19,560 --> 00:44:22,380
of my analysis just kind of with my own

1202
00:44:22,380 --> 00:44:25,020
reverse engineering experience here are

1203
00:44:25,020 --> 00:44:26,579
some cases where other people reverse

1204
00:44:26,579 --> 00:44:28,020
engineered smoke loader they might have

1205
00:44:28,020 --> 00:44:30,599
different results open analysis recently

1206
00:44:30,599 --> 00:44:32,819
did a fantastic I think three or four

1207
00:44:32,819 --> 00:44:34,560
part series on analyzing smoke loaders

1208
00:44:34,560 --> 00:44:35,880
so I definitely recommend checking that

1209
00:44:35,880 --> 00:44:37,680
out if you're interested and then night

1210
00:44:37,680 --> 00:44:40,200
wolf insert PL put out good resources on

1211
00:44:40,200 --> 00:44:42,000
smoke odor that go over the obfuscation

1212
00:44:42,000 --> 00:44:43,800
techniques and some of the other things

1213
00:44:43,800 --> 00:44:46,400
that I didn't cover

1214
00:44:46,500 --> 00:44:48,480
um so what will I be releasing from all

1215
00:44:48,480 --> 00:44:51,060
this I'm going to be putting up

1216
00:44:51,060 --> 00:44:52,980
somewhere all the malware samples that I

1217
00:44:52,980 --> 00:44:54,359
actually got so if people are interested

1218
00:44:54,359 --> 00:44:56,819
in investigating this botnet they go and

1219
00:44:56,819 --> 00:44:59,220
take that data set maybe find inferences

1220
00:44:59,220 --> 00:45:01,859
that I couldn't come up with happy to

1221
00:45:01,859 --> 00:45:03,839
share my Ida analysis files if people

1222
00:45:03,839 --> 00:45:06,119
are interested the slides for the talk

1223
00:45:06,119 --> 00:45:08,339
and then that config extraction tool

1224
00:45:08,339 --> 00:45:10,380
that I wrote I'll be open sourcing that

1225
00:45:10,380 --> 00:45:13,020
here I just have to actually remove that

1226
00:45:13,020 --> 00:45:14,819
valid smoke loader sample and just strip

1227
00:45:14,819 --> 00:45:17,640
it down to its uh to to just the

1228
00:45:17,640 --> 00:45:20,460
decompression code and then finally a

1229
00:45:20,460 --> 00:45:23,880
CSV containing all of the results that I

1230
00:45:23,880 --> 00:45:25,319
that I got throughout this eight month

1231
00:45:25,319 --> 00:45:27,060
period

1232
00:45:27,060 --> 00:45:28,619
So yeah thank you I guess if people have

1233
00:45:28,619 --> 00:45:29,760
questions

1234
00:45:29,760 --> 00:45:32,839
happy to take those

1235
00:45:39,359 --> 00:45:41,460
I have a question about the payloads he

1236
00:45:41,460 --> 00:45:43,500
delivered Ollie debugger as a payload

1237
00:45:43,500 --> 00:45:45,780
and ran it would it disable the mount

1238
00:45:45,780 --> 00:45:48,540
the the botnet yeah I mean you would you

1239
00:45:48,540 --> 00:45:50,819
would have to tell the debugger kind of

1240
00:45:50,819 --> 00:45:53,640
how to initialize it to debug itself but

1241
00:45:53,640 --> 00:45:55,020
yeah I mean you definitely could like

1242
00:45:55,020 --> 00:45:56,760
just start up a product you wouldn't

1243
00:45:56,760 --> 00:45:58,440
even actually have to deliver all the

1244
00:45:58,440 --> 00:46:00,720
debug like it just checks by the name by

1245
00:46:00,720 --> 00:46:02,339
the executable name so if you want to

1246
00:46:02,339 --> 00:46:04,140
like you gain access to a smoke loader

1247
00:46:04,140 --> 00:46:06,300
panel you can go and push tasks and

1248
00:46:06,300 --> 00:46:08,160
cause all the Bots to shut down

1249
00:46:08,160 --> 00:46:10,020
totally viable

1250
00:46:10,020 --> 00:46:12,119
wouldn't recommend it but you know up to

1251
00:46:12,119 --> 00:46:14,240
you

1252
00:46:17,760 --> 00:46:19,859
so during your career of you know

1253
00:46:19,859 --> 00:46:22,319
reverse engineering you were were you at

1254
00:46:22,319 --> 00:46:24,720
any point uh able to trace back to the

1255
00:46:24,720 --> 00:46:27,480
command center where it was hosted is it

1256
00:46:27,480 --> 00:46:30,000
maybe in like a major cloud provider

1257
00:46:30,000 --> 00:46:33,000
like Azure AWS gcp stuff like that and

1258
00:46:33,000 --> 00:46:35,300
if you did what were those Cloud

1259
00:46:35,300 --> 00:46:38,339
providers response

1260
00:46:38,339 --> 00:46:39,780
um so I looked into some of these

1261
00:46:39,780 --> 00:46:42,359
command and control servers a couple

1262
00:46:42,359 --> 00:46:44,400
months ago they're at like kind of shady

1263
00:46:44,400 --> 00:46:46,920
or hosting providers so if you send them

1264
00:46:46,920 --> 00:46:48,540
a request that hey you have like a valid

1265
00:46:48,540 --> 00:46:51,180
C2 panel they'll ignore you that's

1266
00:46:51,180 --> 00:46:52,740
generally how it works for some of these

1267
00:46:52,740 --> 00:46:54,540
shadier places

1268
00:46:54,540 --> 00:46:55,980
um but I forgot to mention but the

1269
00:46:55,980 --> 00:46:58,200
actual like 2018 version of smoke loader

1270
00:46:58,200 --> 00:46:59,819
the panel was leaked so if anyone wants

1271
00:46:59,819 --> 00:47:01,920
to go look at like what a C2 panel looks

1272
00:47:01,920 --> 00:47:04,440
like for a like Enterprise grade malware

1273
00:47:04,440 --> 00:47:06,180
operation you can go do that that's

1274
00:47:06,180 --> 00:47:07,740
actually how I set up my own command and

1275
00:47:07,740 --> 00:47:10,578
control server for it

1276
00:47:10,859 --> 00:47:14,839
any final questions

1277
00:47:15,300 --> 00:47:17,819
all righty well thank you all I

1278
00:47:17,819 --> 00:47:19,140
definitely appreciate you all letting me

1279
00:47:19,140 --> 00:47:21,210
present to you

1280
00:47:21,210 --> 00:47:27,019
[Applause]

