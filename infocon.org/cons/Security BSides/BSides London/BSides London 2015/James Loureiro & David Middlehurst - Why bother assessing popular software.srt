1
00:00:00,000 --> 00:00:05,730
Thanks hello everyone<font color="#E5E5E5"> and so first of</font>

2
00:00:04,170 --> 00:00:08,160
all before I get started I'd like to ask

3
00:00:05,730 --> 00:00:10,349
a quick question of the audience<font color="#E5E5E5"> just to</font>

4
00:00:08,160 --> 00:00:11,849
get do a quick straw poll so could you

5
00:00:10,349 --> 00:00:15,330
put your hands up if you<font color="#E5E5E5"> use Adobe</font>

6
00:00:11,849 --> 00:00:17,520
Reader Oh a few people<font color="#E5E5E5"> okay keep</font><font color="#CCCCCC"> your</font>

7
00:00:15,330 --> 00:00:19,740
hand<font color="#CCCCCC"> right keep your</font><font color="#E5E5E5"> hand up if you use</font>

8
00:00:17,520 --> 00:00:23,789
Adobe Reader right and put it down if

9
00:00:19,740 --> 00:00:26,430
you understand the attack surface okay

10
00:00:23,789 --> 00:00:28,230
so it's kind of mixed it's kind of what

11
00:00:26,430 --> 00:00:30,929
I expect it and it was<font color="#CCCCCC"> probably a lot</font>

12
00:00:28,230 --> 00:00:32,369
less in this room of people who use

13
00:00:30,929 --> 00:00:36,089
Adobe Reader perhaps because we're in

14
00:00:32,369 --> 00:00:38,399
the security industry so that's kind of

15
00:00:36,090 --> 00:00:41,160
what I expected from that and the fact

16
00:00:38,399 --> 00:00:42,390
that you perhaps as few<font color="#CCCCCC"> people here who</font>

17
00:00:41,160 --> 00:00:44,968
met perhaps<font color="#E5E5E5"> don't understand the</font>

18
00:00:42,390 --> 00:00:47,520
software<font color="#E5E5E5"> and the the understand the</font>

19
00:00:44,969 --> 00:00:49,170
attack surface is a software and so

20
00:00:47,520 --> 00:00:50,670
that's<font color="#CCCCCC"> interesting and</font><font color="#E5E5E5"> hopefully what</font>

21
00:00:49,170 --> 00:00:56,699
you'll learn<font color="#E5E5E5"> something from this talk</font>

22
00:00:50,670 --> 00:00:58,350
which<font color="#CCCCCC"> is something</font><font color="#E5E5E5"> we'll cover so I'm</font>

23
00:00:56,699 --> 00:01:00,649
David middlehurst and I'm join with my

24
00:00:58,350 --> 00:01:03,629
colleague James<font color="#CCCCCC"> lavarro from mwr and</font>

25
00:01:00,649 --> 00:01:05,580
we're both security consultants and my

26
00:01:03,629 --> 00:01:07,289
<font color="#E5E5E5">background is conducting security</font>

27
00:01:05,580 --> 00:01:09,900
assurance projects<font color="#CCCCCC"> in simulated attacks</font>

28
00:01:07,290 --> 00:01:12,299
on a day-to-day basis my specialisms our

29
00:01:09,900 --> 00:01:15,930
application security tool development

30
00:01:12,299 --> 00:01:17,159
and vulnerability research and<font color="#E5E5E5"> James has</font>

31
00:01:15,930 --> 00:01:19,110
more of a<font color="#CCCCCC"> background in vulnerability</font>

32
00:01:17,159 --> 00:01:23,869
research reverse engineering industrial

33
00:01:19,110 --> 00:01:26,759
control systems and embedded systems so

34
00:01:23,869 --> 00:01:28,290
first of<font color="#E5E5E5"> all how</font><font color="#CCCCCC"> did this presentation</font>

35
00:01:26,759 --> 00:01:30,420
come about well earlier<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the year</font>

36
00:01:28,290 --> 00:01:32,640
b-sides launched its call for<font color="#E5E5E5"> papers and</font>

37
00:01:30,420 --> 00:01:34,920
there was three topics where they

38
00:01:32,640 --> 00:01:38,009
suggested for the proper papers there

39
00:01:34,920 --> 00:01:40,259
was operational security attribution and

40
00:01:38,009 --> 00:01:43,079
making a<font color="#E5E5E5"> difference and the final one</font>

41
00:01:40,259 --> 00:01:45,899
making a difference was where we thought

42
00:01:43,079 --> 00:01:47,429
we try and<font color="#E5E5E5"> do a presentation and so at</font>

43
00:01:45,899 --> 00:01:48,360
the time earlier in the year we were

44
00:01:47,430 --> 00:01:51,270
looking<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> pound throwing</font>

45
00:01:48,360 --> 00:01:53,159
competition and WR so myself James and a

46
00:01:51,270 --> 00:01:56,158
few others at<font color="#CCCCCC"> mwr were looking at and</font>

47
00:01:53,159 --> 00:02:00,240
own throne and one of the targets for

48
00:01:56,159 --> 00:02:02,340
own throne was adobe reader and so we

49
00:02:00,240 --> 00:02:05,460
began looking<font color="#E5E5E5"> at this and adobe</font><font color="#CCCCCC"> read is</font>

50
00:02:02,340 --> 00:02:07,290
a good example<font color="#E5E5E5"> of a piece of software</font>

51
00:02:05,460 --> 00:02:09,538
which has had its fair share of scrutiny

52
00:02:07,290 --> 00:02:10,350
over the years from our industry and we

53
00:02:09,538 --> 00:02:12,899
thought<font color="#E5E5E5"> that</font>

54
00:02:10,350 --> 00:02:14,760
we'd share our approach and<font color="#E5E5E5"> the</font>

55
00:02:12,900 --> 00:02:18,810
methodology we took in assessing<font color="#E5E5E5"> this</font>

56
00:02:14,760 --> 00:02:21,209
piece of software<font color="#E5E5E5"> so a quick overview of</font>

57
00:02:18,810 --> 00:02:23,100
<font color="#E5E5E5">the agenda for today so first of all</font>

58
00:02:21,210 --> 00:02:25,620
we're<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to start with software</font>

59
00:02:23,100 --> 00:02:27,390
security in general<font color="#CCCCCC"> today we're what you</font>

60
00:02:25,620 --> 00:02:29,840
might expect from a piece of popular

61
00:02:27,390 --> 00:02:32,579
software from a security perspective

62
00:02:29,840 --> 00:02:35,250
what<font color="#E5E5E5"> perhaps is for happening behind the</font>

63
00:02:32,580 --> 00:02:38,160
scenes before the software even<font color="#E5E5E5"> makes it</font>

64
00:02:35,250 --> 00:02:41,010
to release then we're going<font color="#E5E5E5"> to take</font>

65
00:02:38,160 --> 00:02:43,140
adobe reader as a case study we're<font color="#E5E5E5"> going</font>

66
00:02:41,010 --> 00:02:45,959
<font color="#E5E5E5">to explore its attack surface we're</font>

67
00:02:43,140 --> 00:02:48,660
<font color="#E5E5E5">going to have a look at that areas such</font>

68
00:02:45,960 --> 00:02:51,900
as the<font color="#CCCCCC"> javascript api and how you might</font>

69
00:02:48,660 --> 00:02:54,840
fuzz and try and<font color="#E5E5E5"> find vulnerabilities in</font>

70
00:02:51,900 --> 00:02:56,640
the PDF file format<font color="#E5E5E5"> well then move on</font><font color="#CCCCCC"> to</font>

71
00:02:54,840 --> 00:03:00,690
some mitigation such as the sandbox and

72
00:02:56,640 --> 00:03:04,070
then we'll draw some conclusions so how

73
00:03:00,690 --> 00:03:06,720
our vendors improving security and

74
00:03:04,070 --> 00:03:10,320
generally vendors<font color="#E5E5E5"> of popular software</font>

75
00:03:06,720 --> 00:03:13,140
have improved their<font color="#E5E5E5"> security posture of</font>

76
00:03:10,320 --> 00:03:14,790
the software<font color="#CCCCCC"> and there are a lot more</font>

77
00:03:13,140 --> 00:03:17,010
switched on with security generally

78
00:03:14,790 --> 00:03:18,540
we're secure if you've got piece of

79
00:03:17,010 --> 00:03:20,220
popular software you'd expect some of

80
00:03:18,540 --> 00:03:21,660
these things<font color="#E5E5E5"> to be happening behind the</font>

81
00:03:20,220 --> 00:03:24,060
scenes so you'd have<font color="#E5E5E5"> an in-house</font>

82
00:03:21,660 --> 00:03:26,040
security team carrying out some of these

83
00:03:24,060 --> 00:03:28,200
other activities so they<font color="#E5E5E5"> might do their</font>

84
00:03:26,040 --> 00:03:31,980
<font color="#E5E5E5">own security research that might get</font>

85
00:03:28,200 --> 00:03:34,709
independent testing they might do code

86
00:03:31,980 --> 00:03:37,290
review implement a strong secure

87
00:03:34,710 --> 00:03:39,360
development<font color="#E5E5E5"> lifecycle and they might</font>

88
00:03:37,290 --> 00:03:41,730
look at implementing and exploit

89
00:03:39,360 --> 00:03:43,260
mitigation techniques and perhaps do

90
00:03:41,730 --> 00:03:46,109
their own fuzzing so as with<font color="#E5E5E5"> the</font>

91
00:03:43,260 --> 00:03:47,880
chromium project the chrome and google

92
00:03:46,110 --> 00:03:50,310
the chromium projects and<font color="#CCCCCC"> google do a</font>

93
00:03:47,880 --> 00:03:53,280
lot of fuzzing and find a lot<font color="#E5E5E5"> of bugs</font>

94
00:03:50,310 --> 00:03:54,990
before other pit third parties do so

95
00:03:53,280 --> 00:03:58,200
<font color="#E5E5E5">they do a lot of fuzzing themselves and</font>

96
00:03:54,990 --> 00:04:02,040
and this is to be expected for some

97
00:03:58,200 --> 00:04:04,739
popular software nowadays so why bother

98
00:04:02,040 --> 00:04:06,720
assessing popular software you know you

99
00:04:04,740 --> 00:04:08,760
perhaps got project zero you've got some

100
00:04:06,720 --> 00:04:11,070
big names looking at you know pieces of

101
00:04:08,760 --> 00:04:13,739
software like like<font color="#E5E5E5"> Adobe Reader you know</font>

102
00:04:11,070 --> 00:04:15,750
are<font color="#E5E5E5"> you going to find bugs well we'd</font>

103
00:04:13,740 --> 00:04:17,370
like to<font color="#E5E5E5"> think so and we this is when we</font>

104
00:04:15,750 --> 00:04:19,880
started this<font color="#CCCCCC"> project we thought well we</font>

105
00:04:17,370 --> 00:04:22,139
<font color="#E5E5E5">didn't have a great time frame</font>

106
00:04:19,880 --> 00:04:25,080
for the phone throwing competition from

107
00:04:22,139 --> 00:04:27,000
when the target<font color="#E5E5E5"> list got released so we</font>

108
00:04:25,080 --> 00:04:28,800
we started<font color="#CCCCCC"> looking at it and we thought</font>

109
00:04:27,000 --> 00:04:30,720
<font color="#CCCCCC">well we'll give it a stab and see we'll</font>

110
00:04:28,800 --> 00:04:32,479
see where we get with it and and we

111
00:04:30,720 --> 00:04:34,650
really wanted<font color="#E5E5E5"> to share to the community</font>

112
00:04:32,479 --> 00:04:37,919
our general approach of how we

113
00:04:34,650 --> 00:04:39,359
approached adobe reader and hopefully

114
00:04:37,919 --> 00:04:42,900
share some of some of<font color="#E5E5E5"> the things we</font>

115
00:04:39,360 --> 00:04:45,210
found so movie answer that the case

116
00:04:42,900 --> 00:04:46,948
study of adobe reader then so<font color="#E5E5E5"> adobe</font>

117
00:04:45,210 --> 00:04:51,330
reader is implicitly trusted by

118
00:04:46,949 --> 00:04:54,840
enterprise<font color="#E5E5E5"> and home users and so I had a</font>

119
00:04:51,330 --> 00:04:56,909
look online at some resources to try and

120
00:04:54,840 --> 00:04:59,429
establish the market<font color="#CCCCCC"> share that adobe</font>

121
00:04:56,910 --> 00:05:01,500
reader has and there was a recent<font color="#CCCCCC"> Sakuni</font>

122
00:04:59,430 --> 00:05:03,449
or article which suggested that it could

123
00:05:01,500 --> 00:05:05,760
be<font color="#E5E5E5"> greater than eighty percent market</font>

124
00:05:03,449 --> 00:05:07,560
share that adobe reader has of the PDF

125
00:05:05,760 --> 00:05:09,060
<font color="#CCCCCC">Reader market so it's not hardly</font>

126
00:05:07,560 --> 00:05:11,669
surprising that we had a few hands<font color="#E5E5E5"> in</font>

127
00:05:09,060 --> 00:05:13,139
the air and that you use it whether

128
00:05:11,669 --> 00:05:15,150
<font color="#E5E5E5">that's your choice or it's your employee</font>

129
00:05:13,139 --> 00:05:18,840
who who forces you to use it I don't

130
00:05:15,150 --> 00:05:20,669
<font color="#E5E5E5">know but and I don't know and so but PDF</font>

131
00:05:18,840 --> 00:05:23,039
certain themselves are generally trusted

132
00:05:20,669 --> 00:05:25,349
they built around the internet we all<font color="#CCCCCC"> we</font>

133
00:05:23,039 --> 00:05:29,389
use them everyday people generally

134
00:05:25,349 --> 00:05:29,389
aren't too afraid of clicking on a PDF

135
00:05:29,419 --> 00:05:35,070
but despite<font color="#E5E5E5"> Adobe doing some of this</font>

136
00:05:32,639 --> 00:05:36,720
good security stuff so probably some of

137
00:05:35,070 --> 00:05:38,729
<font color="#E5E5E5">the stuff from what we</font><font color="#CCCCCC"> were talking</font>

138
00:05:36,720 --> 00:05:41,280
about in a few slides ago there's still

139
00:05:38,729 --> 00:05:44,219
bugs found and there's<font color="#E5E5E5"> no real sign of</font>

140
00:05:41,280 --> 00:05:48,388
decline this is the graph of<font color="#E5E5E5"> CVS and for</font>

141
00:05:44,220 --> 00:05:51,419
the<font color="#E5E5E5"> past since 1999 to 2015 so far this</font>

142
00:05:48,389 --> 00:05:53,639
year there's a decent<font color="#E5E5E5"> number and for the</font>

143
00:05:51,419 --> 00:05:55,560
past number of years there's it's been

144
00:05:53,639 --> 00:05:58,320
quite sporadic there's no no real sign

145
00:05:55,560 --> 00:05:59,970
of slowing down<font color="#E5E5E5"> and and</font><font color="#CCCCCC"> we'll maybe come</font>

146
00:05:58,320 --> 00:06:01,800
unto this a little bit<font color="#E5E5E5"> more with the</font>

147
00:05:59,970 --> 00:06:04,229
attack surface of why this might be

148
00:06:01,800 --> 00:06:08,250
because the attack surface perhaps quite

149
00:06:04,229 --> 00:06:11,190
vast so in terms<font color="#E5E5E5"> of high-risk</font><font color="#CCCCCC"> CV SI VES</font>

150
00:06:08,250 --> 00:06:13,409
with a score of CBS s<font color="#E5E5E5"> seven or more was</font>

151
00:06:11,190 --> 00:06:19,139
actually 31 bins reported to date this

152
00:06:13,409 --> 00:06:24,690
year and 37 in 2014 and 65 in that was a

153
00:06:19,139 --> 00:06:27,810
good<font color="#CCCCCC"> year</font><font color="#E5E5E5"> in 2013 so before we start</font>

154
00:06:24,690 --> 00:06:30,150
looking<font color="#CCCCCC"> at Adobe and finding going for</font>

155
00:06:27,810 --> 00:06:32,190
bug hunting with this product<font color="#CCCCCC"> and let's</font>

156
00:06:30,150 --> 00:06:32,969
look at the latest adobe security

157
00:06:32,190 --> 00:06:35,699
bulletin which was

158
00:06:32,969 --> 00:06:37,229
<font color="#CCCCCC">Eastern may this</font><font color="#E5E5E5"> is how they classified</font>

159
00:06:35,699 --> 00:06:40,610
the vulnerabilities which they fixed in

160
00:06:37,229 --> 00:06:43,739
that release and as you can see 14

161
00:06:40,610 --> 00:06:46,289
JavaScript API security bypasses there

162
00:06:43,739 --> 00:06:50,578
is 10 unclassified memory corruption

163
00:06:46,289 --> 00:06:52,378
bugs 55 years after fries and a couple

164
00:06:50,579 --> 00:06:55,709
of buffer overflows and an<font color="#CCCCCC"> exit see</font>

165
00:06:52,379 --> 00:06:57,509
vulnerability so that<font color="#E5E5E5"> these are the</font>

166
00:06:55,709 --> 00:06:59,279
<font color="#E5E5E5">types of areas where we might expect to</font>

167
00:06:57,509 --> 00:07:02,879
find vulnerabilities in this product

168
00:06:59,279 --> 00:07:04,409
<font color="#E5E5E5">when we start</font><font color="#CCCCCC"> looking at it so before we</font>

169
00:07:02,879 --> 00:07:06,209
got started with this<font color="#E5E5E5"> product we'd</font>

170
00:07:04,409 --> 00:07:07,949
obviously looked at<font color="#E5E5E5"> this you know</font><font color="#CCCCCC"> CVEs</font>

171
00:07:06,209 --> 00:07:10,229
<font color="#CCCCCC">we'd</font><font color="#E5E5E5"> looked at some of the output</font><font color="#CCCCCC"> from</font>

172
00:07:07,949 --> 00:07:13,139
project zero on this target and other

173
00:07:10,229 --> 00:07:15,239
other useful things but these are the

174
00:07:13,139 --> 00:07:16,889
key resources that we really referred to

175
00:07:15,239 --> 00:07:19,078
before we got started approaching the

176
00:07:16,889 --> 00:07:20,369
target so we<font color="#E5E5E5"> obviously went through a</font>

177
00:07:19,079 --> 00:07:21,929
derby for their standards and

178
00:07:20,369 --> 00:07:24,239
documentation and some of that

179
00:07:21,929 --> 00:07:25,919
<font color="#E5E5E5">engineering teams output is extremely</font>

180
00:07:24,239 --> 00:07:28,799
useful<font color="#E5E5E5"> especially if you're you know for</font>

181
00:07:25,919 --> 00:07:31,619
some of<font color="#E5E5E5"> the sample files and exercising</font>

182
00:07:28,799 --> 00:07:34,609
some of the functionality and call<font color="#E5E5E5"> kami</font>

183
00:07:31,619 --> 00:07:37,379
he does a good course called PDF 101 and

184
00:07:34,610 --> 00:07:39,360
which which describes some of the

185
00:07:37,379 --> 00:07:40,979
intricacies of the PDF file format and

186
00:07:39,360 --> 00:07:45,329
some of the tips<font color="#E5E5E5"> and tricks that you can</font>

187
00:07:40,979 --> 00:07:47,039
use to<font color="#E5E5E5"> create PDF and didya Stevens has</font>

188
00:07:45,329 --> 00:07:48,599
<font color="#CCCCCC">good some good research over the years</font>

189
00:07:47,039 --> 00:07:52,229
<font color="#E5E5E5">and will perhaps touch on some of his</font>

190
00:07:48,599 --> 00:07:54,539
research in embedding<font color="#E5E5E5"> an XE so he found</font>

191
00:07:52,229 --> 00:07:56,489
that<font color="#E5E5E5"> you know embedding and XE in a PDF</font>

192
00:07:54,539 --> 00:07:59,550
<font color="#E5E5E5">and that was bad you could dress up the</font>

193
00:07:56,489 --> 00:08:02,609
<font color="#E5E5E5">dialogue which comes up to launch the XE</font>

194
00:07:59,550 --> 00:08:04,589
so that's don't really a bad thing and

195
00:08:02,610 --> 00:08:06,749
then three presentations in particular

196
00:08:04,589 --> 00:08:08,759
helps us out a great deal with different

197
00:08:06,749 --> 00:08:11,879
aspects of the attack surface so the

198
00:08:08,759 --> 00:08:14,399
life of a javascript bug that's<font color="#CCCCCC"> a</font>

199
00:08:11,879 --> 00:08:16,589
brilliant presentation and it takes you

200
00:08:14,399 --> 00:08:18,749
right through from for a privilege

201
00:08:16,589 --> 00:08:20,369
escalation and right through to some of

202
00:08:18,749 --> 00:08:21,659
the things you could do with that and we

203
00:08:20,369 --> 00:08:25,319
use<font color="#CCCCCC"> that and when we looked at</font><font color="#E5E5E5"> the</font>

204
00:08:21,659 --> 00:08:28,379
<font color="#E5E5E5">JavaScript API for the sandbox these two</font>

205
00:08:25,319 --> 00:08:30,899
presentations want it black at<font color="#E5E5E5"> Europe</font>

206
00:08:28,379 --> 00:08:33,539
and one at concert<font color="#CCCCCC"> West were incredibly</font>

207
00:08:30,899 --> 00:08:35,099
useful finally I mentioned government

208
00:08:33,539 --> 00:08:37,588
hardening guidelines because these are

209
00:08:35,099 --> 00:08:40,099
<font color="#E5E5E5">quite</font><font color="#CCCCCC"> useful and so</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> the notable</font>

210
00:08:37,589 --> 00:08:42,929
ones for Adobe were NSA and DSD

211
00:08:40,099 --> 00:08:44,740
essentially this is the information<font color="#CCCCCC"> that</font>

212
00:08:42,929 --> 00:08:47,050
<font color="#CCCCCC">Adobe puts out and</font>

213
00:08:44,740 --> 00:08:49,570
<font color="#E5E5E5">to give</font><font color="#CCCCCC"> advice to government their</font>

214
00:08:47,050 --> 00:08:50,859
government departments and how they

215
00:08:49,570 --> 00:08:53,290
<font color="#CCCCCC">think that</font><font color="#E5E5E5"> the product should be locked</font>

216
00:08:50,860 --> 00:08:54,730
down<font color="#E5E5E5"> and hence why where they perceive</font>

217
00:08:53,290 --> 00:08:57,339
the attack surface to be so this is

218
00:08:54,730 --> 00:09:00,730
useful<font color="#E5E5E5"> and knowing where what they tell</font>

219
00:08:57,339 --> 00:09:02,560
you<font color="#E5E5E5"> to switch off essentially and so</font>

220
00:09:00,730 --> 00:09:05,740
what did we perceive the attack surface

221
00:09:02,560 --> 00:09:08,199
to be so we mentioned so there's a

222
00:09:05,740 --> 00:09:10,959
JavaScript API which it will come unto

223
00:09:08,200 --> 00:09:13,540
<font color="#E5E5E5">in more detail later and passing and</font>

224
00:09:10,959 --> 00:09:17,949
rendering of PDF files themselves so

225
00:09:13,540 --> 00:09:20,649
file format type it bugs extensions so

226
00:09:17,950 --> 00:09:22,630
there's a lot<font color="#CCCCCC"> of inbuilt extensions with</font>

227
00:09:20,649 --> 00:09:24,850
with a divey reader and they also open

228
00:09:22,630 --> 00:09:27,220
<font color="#E5E5E5">up an</font><font color="#CCCCCC"> sdk for to allow you</font><font color="#E5E5E5"> to develop</font>

229
00:09:24,850 --> 00:09:29,440
extent extensions for the product and

230
00:09:27,220 --> 00:09:31,450
but one<font color="#E5E5E5"> of the extensions which comes as</font>

231
00:09:29,440 --> 00:09:33,040
standard<font color="#CCCCCC"> is XML forms so that's</font>

232
00:09:31,450 --> 00:09:35,320
something you could you could approach I

233
00:09:33,040 --> 00:09:37,029
mentioned it embedded files and that's

234
00:09:35,320 --> 00:09:39,940
something that didya<font color="#CCCCCC"> Stephens did with</font>

235
00:09:37,029 --> 00:09:42,370
<font color="#CCCCCC">embed in an XE can you embed other</font>

236
00:09:39,940 --> 00:09:44,380
dangerous content within<font color="#CCCCCC"> pdfs that might</font>

237
00:09:42,370 --> 00:09:46,180
be an option and final there's some

238
00:09:44,380 --> 00:09:48,040
security features such as document sign

239
00:09:46,180 --> 00:09:50,739
in and the concept of a trusted

240
00:09:48,040 --> 00:09:53,079
publisher and perhaps if you trust<font color="#E5E5E5"> the</font>

241
00:09:50,740 --> 00:09:55,029
publisher then it may be gives you more

242
00:09:53,079 --> 00:09:57,729
permissions within<font color="#CCCCCC"> adobe reader when you</font>

243
00:09:55,029 --> 00:10:03,490
open a PDF file coming from a trusted

244
00:09:57,730 --> 00:10:05,290
publisher so essentially with the attack

245
00:10:03,490 --> 00:10:07,089
surface we shared this out among<font color="#CCCCCC"> the</font>

246
00:10:05,290 --> 00:10:09,250
team and we all we all kind of work

247
00:10:07,089 --> 00:10:12,190
together but one of the things which<font color="#E5E5E5"> I</font>

248
00:10:09,250 --> 00:10:15,089
<font color="#E5E5E5">looked at was the JavaScript and API so</font>

249
00:10:12,190 --> 00:10:18,490
as<font color="#E5E5E5"> it says here</font><font color="#CCCCCC"> this is from adobe site</font>

250
00:10:15,089 --> 00:10:20,560
javascript in Adobe Reader you know is

251
00:10:18,490 --> 00:10:22,570
it a good idea I<font color="#CCCCCC"> don't know but it</font>

252
00:10:20,560 --> 00:10:24,489
sounds so it essentially means that you

253
00:10:22,570 --> 00:10:26,290
can generate<font color="#E5E5E5"> pdfs which are interactive</font>

254
00:10:24,490 --> 00:10:27,940
they perhaps have a form and<font color="#E5E5E5"> they</font>

255
00:10:26,290 --> 00:10:30,730
connect to a database to store the

256
00:10:27,940 --> 00:10:32,829
results this allows developers to do

257
00:10:30,730 --> 00:10:35,709
weird and wonderful things<font color="#E5E5E5"> with pdfs and</font>

258
00:10:32,829 --> 00:10:39,160
and and so it's based on JavaScript

259
00:10:35,709 --> 00:10:40,779
version 1.5 ECMAScript and this is<font color="#E5E5E5"> very</font>

260
00:10:39,160 --> 00:10:43,029
much similar to<font color="#E5E5E5"> the JavaScript</font><font color="#CCCCCC"> you might</font>

261
00:10:40,779 --> 00:10:46,240
explained in finding a web browser and

262
00:10:43,029 --> 00:10:50,920
and you<font color="#CCCCCC"> know could be invoked from an</font>

263
00:10:46,240 --> 00:10:54,520
HTML page so before we looked at the

264
00:10:50,920 --> 00:10:56,620
<font color="#CCCCCC">JavaScript API some useful documentation</font>

265
00:10:54,520 --> 00:10:58,499
was the<font color="#E5E5E5"> JavaScript API documentation and</font>

266
00:10:56,620 --> 00:11:00,199
<font color="#E5E5E5">we'll come on to this a bit a little bit</font>

267
00:10:58,499 --> 00:11:03,659
later but you<font color="#E5E5E5"> can also decompile the</font>

268
00:11:00,199 --> 00:11:05,218
spider monkey bite code and and in the

269
00:11:03,659 --> 00:11:06,749
presentation<font color="#CCCCCC"> I mentioned the life of a</font>

270
00:11:05,219 --> 00:11:08,729
javascript bug it gives you a bit of

271
00:11:06,749 --> 00:11:10,979
that<font color="#E5E5E5"> background and how there's how you</font>

272
00:11:08,729 --> 00:11:13,499
might do this and to<font color="#CCCCCC"> play with</font>

273
00:11:10,979 --> 00:11:16,439
javascript in PDFs and you've got really

274
00:11:13,499 --> 00:11:18,959
got two options you can either make pdfs

275
00:11:16,439 --> 00:11:21,179
with<font color="#E5E5E5"> javascript embedded or where you</font>

276
00:11:18,959 --> 00:11:22,858
can invoke the JavaScript console within

277
00:11:21,179 --> 00:11:26,249
Adobe Reader and you can interact<font color="#E5E5E5"> with</font>

278
00:11:22,859 --> 00:11:28,679
<font color="#E5E5E5">this directly I wanted to first of all</font>

279
00:11:26,249 --> 00:11:32,159
share some just very simple tricks on

280
00:11:28,679 --> 00:11:35,218
how you can<font color="#E5E5E5"> play with javascript in PDFs</font>

281
00:11:32,159 --> 00:11:37,468
so on the left here is a PDF<font color="#E5E5E5"> and that's</font>

282
00:11:35,219 --> 00:11:40,409
a valid PDF we've got a stream here

283
00:11:37,469 --> 00:11:42,539
which is a JavaScript stream and I'm

284
00:11:40,409 --> 00:11:45,209
just<font color="#E5E5E5"> spawning an alert dialog and a</font>

285
00:11:42,539 --> 00:11:47,369
Hello dialogue here within reader when

286
00:11:45,209 --> 00:11:50,189
you open<font color="#CCCCCC"> this PDF you get the hell</font><font color="#E5E5E5"> over</font>

287
00:11:47,369 --> 00:11:52,319
dialogue popping up obviously<font color="#E5E5E5"> replace</font>

288
00:11:50,189 --> 00:11:55,228
this with whatever payloads you you know

289
00:11:52,319 --> 00:11:58,738
you'd like<font color="#E5E5E5"> to play</font><font color="#CCCCCC"> around with and then</font>

290
00:11:55,229 --> 00:12:01,919
that's the option so one way he can do

291
00:11:58,739 --> 00:12:04,379
and one simple<font color="#E5E5E5"> Python script you can use</font>

292
00:12:01,919 --> 00:12:07,619
to<font color="#E5E5E5"> create these PDFs is a script from</font>

293
00:12:04,379 --> 00:12:10,409
<font color="#E5E5E5">video Stevens PDFs tool set and if make</font>

294
00:12:07,619 --> 00:12:11,939
PDF JavaScript<font color="#E5E5E5"> you sinfully specify the</font>

295
00:12:10,409 --> 00:12:14,729
javascript file you want to embed in a

296
00:12:11,939 --> 00:12:18,149
PDF in<font color="#E5E5E5"> it'll it'll load this JavaScript</font>

297
00:12:14,729 --> 00:12:20,549
when when you<font color="#E5E5E5"> launch the PDF so I</font>

298
00:12:18,149 --> 00:12:22,289
mentioned<font color="#E5E5E5"> the JavaScript console so to</font>

299
00:12:20,549 --> 00:12:25,439
actually get access to the JavaScript

300
00:12:22,289 --> 00:12:27,779
console if you incorporate this in so

301
00:12:25,439 --> 00:12:30,149
the way I did<font color="#E5E5E5"> it was that if you create</font>

302
00:12:27,779 --> 00:12:32,129
a PDF with simply console show in it

303
00:12:30,149 --> 00:12:34,019
then it invokes the console there was a

304
00:12:32,129 --> 00:12:36,779
few other ways you<font color="#CCCCCC"> can save a shortcut</font>

305
00:12:34,019 --> 00:12:38,489
within Adobe Reader itself but this<font color="#E5E5E5"> is a</font>

306
00:12:36,779 --> 00:12:40,679
simple trick it will invoke this this

307
00:12:38,489 --> 00:12:44,129
dialogue here which is the<font color="#E5E5E5"> JavaScript</font>

308
00:12:40,679 --> 00:12:46,709
debugger with this JavaScript debugger

309
00:12:44,129 --> 00:12:49,829
you can type JavaScript into the console

310
00:12:46,709 --> 00:12:52,348
and press<font color="#E5E5E5"> control enter and it will</font>

311
00:12:49,829 --> 00:12:55,738
execute<font color="#E5E5E5"> the JavaScript and this this</font>

312
00:12:52,349 --> 00:12:58,139
opens up the JavaScript API<font color="#CCCCCC"> T some other</font>

313
00:12:55,739 --> 00:13:00,959
<font color="#E5E5E5">tricks tips and tricks which are worth</font>

314
00:12:58,139 --> 00:13:03,269
mentioning you can call a function with

315
00:13:00,959 --> 00:13:04,799
<font color="#CCCCCC">the parameter acro help and it will</font>

316
00:13:03,269 --> 00:13:07,529
return some output which looks like this

317
00:13:04,799 --> 00:13:09,779
and this<font color="#E5E5E5"> is useful for fuzzing because</font>

318
00:13:07,529 --> 00:13:12,870
it gives you the expected

319
00:13:09,779 --> 00:13:14,610
values but expected parameters that the

320
00:13:12,870 --> 00:13:17,759
function expects along with its data

321
00:13:14,610 --> 00:13:22,769
type and<font color="#E5E5E5"> those in square brackets</font>

322
00:13:17,759 --> 00:13:24,930
indicate optional parameters and as<font color="#E5E5E5"> with</font>

323
00:13:22,769 --> 00:13:28,069
all JavaScript you can iterate through

324
00:13:24,930 --> 00:13:30,359
what's there and to you know enumerate

325
00:13:28,069 --> 00:13:32,550
the objects and functions which are

326
00:13:30,360 --> 00:13:35,490
present within Adobe Reader and in a

327
00:13:32,550 --> 00:13:37,769
quite an active manner I just use this

328
00:13:35,490 --> 00:13:39,569
little slip snippet to produce a list

329
00:13:37,769 --> 00:13:42,930
like<font color="#CCCCCC"> this and I'll come</font><font color="#E5E5E5"> under this a</font>

330
00:13:39,569 --> 00:13:46,559
little bit later in as well but<font color="#E5E5E5"> this is</font>

331
00:13:42,930 --> 00:13:48,239
at iterating the app object within Adobe

332
00:13:46,559 --> 00:13:50,430
Reader which we know is present and

333
00:13:48,240 --> 00:13:52,889
things like alert stem from this and

334
00:13:50,430 --> 00:13:54,508
this<font color="#E5E5E5"> is all the nested up some of these</font>

335
00:13:52,889 --> 00:13:57,389
objects some of these<font color="#E5E5E5"> are functions and</font>

336
00:13:54,509 --> 00:14:00,959
<font color="#E5E5E5">we'll come on to tip now too so so</font>

337
00:13:57,389 --> 00:14:03,240
<font color="#CCCCCC">actually yeah so this this is one way</font>

338
00:14:00,959 --> 00:14:05,910
you can<font color="#E5E5E5"> establish that so if you call</font>

339
00:14:03,240 --> 00:14:07,889
say app alert and then cause to string

340
00:14:05,910 --> 00:14:10,829
on it as<font color="#E5E5E5"> you can see you'll get a</font>

341
00:14:07,889 --> 00:14:13,139
response here which indicates that this

342
00:14:10,829 --> 00:14:15,300
is implemented in native code and this

343
00:14:13,139 --> 00:14:17,160
is important for fuzzing because this is

344
00:14:15,300 --> 00:14:18,779
<font color="#E5E5E5">probably more attractive fuzzing target</font>

345
00:14:17,160 --> 00:14:21,029
because it's implemented in native code

346
00:14:18,779 --> 00:14:24,540
then other functions like this which are

347
00:14:21,029 --> 00:14:27,329
implemented in<font color="#CCCCCC"> JavaScript I'm just</font>

348
00:14:24,540 --> 00:14:29,849
calling to string on this function the

349
00:14:27,329 --> 00:14:31,290
same way as that one but that indicates

350
00:14:29,850 --> 00:14:33,629
that it's implemented in JavaScript

351
00:14:31,290 --> 00:14:35,550
rather than native code and hence some

352
00:14:33,629 --> 00:14:37,410
of these<font color="#E5E5E5"> calls that that makes will be</font>

353
00:14:35,550 --> 00:14:39,449
implemented in native code so it's still

354
00:14:37,410 --> 00:14:41,699
valuable for fuzzing but there's

355
00:14:39,449 --> 00:14:43,979
probably<font color="#CCCCCC"> other checks which are going on</font>

356
00:14:41,699 --> 00:14:45,779
in this<font color="#E5E5E5"> function which one so</font><font color="#CCCCCC"> you've</font>

357
00:14:43,980 --> 00:14:49,529
<font color="#CCCCCC">probably better off focus on</font><font color="#E5E5E5"> a meat for</font>

358
00:14:45,779 --> 00:14:51,420
fuzzing if you want to fuzz this so<font color="#CCCCCC"> to</font>

359
00:14:49,529 --> 00:14:52,889
to work with this i developed a

360
00:14:51,420 --> 00:14:54,449
<font color="#E5E5E5">proof-of-concept tool and I'm going to</font>

361
00:14:52,889 --> 00:14:57,089
<font color="#CCCCCC">show you a demo in a minute of this tool</font>

362
00:14:54,449 --> 00:14:59,008
and so essentially it's just a proof of

363
00:14:57,089 --> 00:15:01,410
concept it's not ready and we will

364
00:14:59,009 --> 00:15:03,779
release it once it's you know a little

365
00:15:01,410 --> 00:15:06,469
bit less rough and hopefully with the

366
00:15:03,779 --> 00:15:08,550
demo<font color="#CCCCCC"> all work today and so we've</font><font color="#E5E5E5"> got</font>

367
00:15:06,470 --> 00:15:10,860
essentially interact with the JavaScript

368
00:15:08,550 --> 00:15:13,019
console but instead of typing manually

369
00:15:10,860 --> 00:15:14,309
into the JavaScript console interact

370
00:15:13,019 --> 00:15:17,220
with the JavaScript console via the

371
00:15:14,309 --> 00:15:20,839
win32<font color="#E5E5E5"> API it essentially just grabs a</font>

372
00:15:17,220 --> 00:15:23,540
handle to the JavaScript console and

373
00:15:20,840 --> 00:15:25,910
sets the text and then execute with<font color="#E5E5E5"> ctrl</font>

374
00:15:23,540 --> 00:15:28,189
enter like I described in the last slide

375
00:15:25,910 --> 00:15:31,780
so<font color="#E5E5E5"> I'll just move on to the demo of this</font>

376
00:15:28,190 --> 00:15:43,430
tool<font color="#E5E5E5"> now so hopefully show you something</font>

377
00:15:31,780 --> 00:15:45,290
working so first of all I've look I've

378
00:15:43,430 --> 00:15:46,370
launched the tool here and what I'm

379
00:15:45,290 --> 00:15:49,099
<font color="#CCCCCC">going to do is I'm going to click the</font>

380
00:15:46,370 --> 00:15:51,830
console button as<font color="#E5E5E5"> you can see it's</font>

381
00:15:49,100 --> 00:15:55,070
invoked a PDF with with the<font color="#E5E5E5"> JavaScript</font>

382
00:15:51,830 --> 00:15:56,690
debugger active and all this is<font color="#E5E5E5"> doing</font>

383
00:15:55,070 --> 00:15:58,670
behind the scenes is really drop in that

384
00:15:56,690 --> 00:16:01,460
that's the PDF I I<font color="#CCCCCC"> told</font><font color="#E5E5E5"> you to craft</font>

385
00:15:58,670 --> 00:16:04,370
with with<font color="#E5E5E5"> consoles are showing it once</font>

386
00:16:01,460 --> 00:16:07,520
this is running my tool if you<font color="#E5E5E5"> click a</font>

387
00:16:04,370 --> 00:16:10,610
numerate<font color="#CCCCCC"> it'll start typing into the</font>

388
00:16:07,520 --> 00:16:13,250
JavaScript console start iterating using

389
00:16:10,610 --> 00:16:15,230
introspection<font color="#E5E5E5"> and to get the nested</font>

390
00:16:13,250 --> 00:16:18,050
objects and functions within Adobe

391
00:16:15,230 --> 00:16:21,980
Reader the reason I did this was I

392
00:16:18,050 --> 00:16:24,740
wanted to have a tool which interrogate

393
00:16:21,980 --> 00:16:26,420
what's their finds does some enumeration

394
00:16:24,740 --> 00:16:27,920
does some information it could gather

395
00:16:26,420 --> 00:16:30,079
some as much information about the

396
00:16:27,920 --> 00:16:31,370
functions which are present and the ones

397
00:16:30,080 --> 00:16:33,590
which I<font color="#E5E5E5"> will might want to target for</font>

398
00:16:31,370 --> 00:16:35,210
fuzzing and then and<font color="#E5E5E5"> then goes off and</font>

399
00:16:33,590 --> 00:16:37,850
fuzzy so I can scale this tool up

400
00:16:35,210 --> 00:16:39,950
eventually so what I want<font color="#E5E5E5"> to do is it's</font>

401
00:16:37,850 --> 00:16:43,820
a populated tree view here on the<font color="#E5E5E5"> left</font>

402
00:16:39,950 --> 00:16:46,640
<font color="#E5E5E5">hand side if I if I start to expand that</font>

403
00:16:43,820 --> 00:16:48,350
out as you can<font color="#E5E5E5"> see with in-app here's</font>

404
00:16:46,640 --> 00:16:50,420
all the nested some of them<font color="#E5E5E5"> are more</font>

405
00:16:48,350 --> 00:16:54,470
objects and media<font color="#CCCCCC"> is an object some of</font>

406
00:16:50,420 --> 00:16:58,430
the functions if I then<font color="#CCCCCC"> double-click one</font>

407
00:16:54,470 --> 00:17:00,830
<font color="#E5E5E5">of those it's identified it's a function</font>

408
00:16:58,430 --> 00:17:03,770
it<font color="#CCCCCC"> is</font><font color="#E5E5E5"> identified</font><font color="#CCCCCC"> it's in native code</font>

409
00:17:00,830 --> 00:17:08,270
it's identified that it expects a string

410
00:17:03,770 --> 00:17:11,389
parameter if I<font color="#E5E5E5"> then flip back to the</font>

411
00:17:08,270 --> 00:17:14,109
tool as you<font color="#E5E5E5"> can see it's it's extracted</font>

412
00:17:11,390 --> 00:17:17,180
this information it's passed out and

413
00:17:14,109 --> 00:17:18,800
some of the parameters it's found that

414
00:17:17,180 --> 00:17:22,100
as a mandatory parameter of a string

415
00:17:18,800 --> 00:17:23,869
which is<font color="#E5E5E5"> the policy file and then you've</font>

416
00:17:22,099 --> 00:17:27,079
<font color="#CCCCCC">got something which you can work with to</font>

417
00:17:23,869 --> 00:17:28,429
<font color="#E5E5E5">fuzz this I've half implemented a fuzzy</font>

418
00:17:27,079 --> 00:17:31,010
and of it as you can see at<font color="#E5E5E5"> the top</font>

419
00:17:28,430 --> 00:17:32,210
there's a fuzzer which is isn't quite

420
00:17:31,010 --> 00:17:34,670
there yet and we've not necessarily

421
00:17:32,210 --> 00:17:37,040
found some bugs with this alone

422
00:17:34,670 --> 00:17:40,010
the animation has been useful with this

423
00:17:37,040 --> 00:17:41,899
tool but I also implemented a rag

424
00:17:40,010 --> 00:17:43,970
exposure which<font color="#CCCCCC"> fuzzes the red X engine</font>

425
00:17:41,900 --> 00:17:46,070
by basically constructing a simple test

426
00:17:43,970 --> 00:17:48,080
case which says oh here's a stringed let

427
00:17:46,070 --> 00:17:54,560
let's try and match this reg ex against

428
00:17:48,080 --> 00:17:56,960
the string and I just wanted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> show you</font>

429
00:17:54,560 --> 00:18:02,120
what happens when it's an object rather

430
00:17:56,960 --> 00:18:05,900
than<font color="#E5E5E5"> so identified that's an object if I</font>

431
00:18:02,120 --> 00:18:07,580
click on<font color="#CCCCCC"> that it's found nested objects</font>

432
00:18:05,900 --> 00:18:11,180
and functions which are present below

433
00:18:07,580 --> 00:18:12,679
<font color="#E5E5E5">app media and essentially when in the</font>

434
00:18:11,180 --> 00:18:15,230
earlier revisions of this tool I just

435
00:18:12,680 --> 00:18:17,660
left it running overnight just finding

436
00:18:15,230 --> 00:18:32,720
stuff there are some loops in there so

437
00:18:17,660 --> 00:18:34,670
be careful though so a final point on

438
00:18:32,720 --> 00:18:38,540
<font color="#E5E5E5">the JavaScript API and will touch upon</font>

439
00:18:34,670 --> 00:18:40,700
some of the security considerations with

440
00:18:38,540 --> 00:18:42,800
the JavaScript API lets a bit<font color="#CCCCCC"> late in</font>

441
00:18:40,700 --> 00:18:45,170
the<font color="#E5E5E5"> presentation but I mentioned you can</font>

442
00:18:42,800 --> 00:18:47,570
be from pile the spider monkey<font color="#E5E5E5"> bite code</font>

443
00:18:45,170 --> 00:18:49,130
if you follow the steps and<font color="#E5E5E5"> the tool</font>

444
00:18:47,570 --> 00:18:50,659
which was released in<font color="#E5E5E5"> the life of a</font>

445
00:18:49,130 --> 00:18:53,090
javascript bug this will enable you to

446
00:18:50,660 --> 00:18:54,920
do<font color="#E5E5E5"> this and when you do this and</font>

447
00:18:53,090 --> 00:18:56,840
prettify the JavaScript<font color="#E5E5E5"> you end up with</font>

448
00:18:54,920 --> 00:18:59,270
<font color="#CCCCCC">twenty-seven thousand lines of code</font>

449
00:18:56,840 --> 00:19:04,520
which present within Adobe Reader as

450
00:18:59,270 --> 00:19:07,340
standard when you<font color="#E5E5E5"> install the product so</font>

451
00:19:04,520 --> 00:19:10,070
as I mentioned video<font color="#E5E5E5"> Stevens did some</font>

452
00:19:07,340 --> 00:19:12,500
work on embedding dangerous files within

453
00:19:10,070 --> 00:19:16,280
PDFs and one thing which we we looked at

454
00:19:12,500 --> 00:19:19,840
is what mitigation modo be put in place

455
00:19:16,280 --> 00:19:22,760
<font color="#E5E5E5">so essentially</font><font color="#CCCCCC"> we launched reader we</font>

456
00:19:19,840 --> 00:19:24,379
embedded a file within a PDF and had a

457
00:19:22,760 --> 00:19:26,860
look in sysinternals to see what was

458
00:19:24,380 --> 00:19:30,440
going on we<font color="#CCCCCC"> identified this registry key</font>

459
00:19:26,860 --> 00:19:33,919
here which contains a list a<font color="#CCCCCC"> black list</font>

460
00:19:30,440 --> 00:19:35,150
of bad extensions as with any<font color="#E5E5E5"> black list</font>

461
00:19:33,920 --> 00:19:37,100
there might be gaps and one of the

462
00:19:35,150 --> 00:19:38,630
things<font color="#CCCCCC"> we we looked at was whether</font>

463
00:19:37,100 --> 00:19:42,590
there's any gaps that we could<font color="#CCCCCC"> find we</font>

464
00:19:38,630 --> 00:19:45,830
had some success with some some theme

465
00:19:42,590 --> 00:19:47,669
packs for example for windows and but we

466
00:19:45,830 --> 00:19:49,620
didn't really<font color="#E5E5E5"> get anything which was</font>

467
00:19:47,670 --> 00:19:50,910
too valuable<font color="#E5E5E5"> out</font><font color="#CCCCCC"> of this but</font><font color="#E5E5E5"> just</font>

468
00:19:49,620 --> 00:19:52,379
thought it was<font color="#E5E5E5"> sure if sharing because</font>

469
00:19:50,910 --> 00:19:54,630
it was something we did when we

470
00:19:52,380 --> 00:19:56,160
approached this piece of<font color="#E5E5E5"> software I'm</font>

471
00:19:54,630 --> 00:19:58,440
going<font color="#E5E5E5"> to hand over to James now things</font>

472
00:19:56,160 --> 00:20:03,870
going to discuss how we approach the PDF

473
00:19:58,440 --> 00:20:05,670
<font color="#CCCCCC">vendor and ng so as Steve said we</font>

474
00:20:03,870 --> 00:20:07,889
started<font color="#E5E5E5"> looking at</font><font color="#CCCCCC"> rideau mostly for</font>

475
00:20:05,670 --> 00:20:09,270
pound<font color="#CCCCCC"> to own and a lot of our efforts</font>

476
00:20:07,890 --> 00:20:11,580
for that we're<font color="#CCCCCC"> looking at the JavaScript</font>

477
00:20:09,270 --> 00:20:12,510
over the last couple of weeks we decided

478
00:20:11,580 --> 00:20:15,240
would have a look at the rendering

479
00:20:12,510 --> 00:20:18,600
engine because this is a huge attack

480
00:20:15,240 --> 00:20:21,480
surface the PDF specification for

481
00:20:18,600 --> 00:20:23,550
example runs to<font color="#E5E5E5"> 740 odd pages and</font>

482
00:20:21,480 --> 00:20:25,170
there's an<font color="#E5E5E5"> Adobe supplement to that</font>

483
00:20:23,550 --> 00:20:27,899
which<font color="#CCCCCC"> is another hundred and forty odd</font>

484
00:20:25,170 --> 00:20:31,950
pages so there's a lot of features in

485
00:20:27,900 --> 00:20:33,660
the PDF file format which means there's

486
00:20:31,950 --> 00:20:35,160
going<font color="#E5E5E5"> to be a huge number of potential</font>

487
00:20:33,660 --> 00:20:37,850
<font color="#E5E5E5">areas we can start looking</font><font color="#CCCCCC"> at</font>

488
00:20:35,160 --> 00:20:42,090
particularly for fuzzing the PDF format

489
00:20:37,850 --> 00:20:44,010
so what we wanted to do here<font color="#CCCCCC"> is get as</font>

490
00:20:42,090 --> 00:20:45,929
much code coverage from this as is

491
00:20:44,010 --> 00:20:48,720
possible so we wanted to go out<font color="#E5E5E5"> and get</font>

492
00:20:45,930 --> 00:20:51,630
as many<font color="#E5E5E5"> PDFs that could possibly cover</font>

493
00:20:48,720 --> 00:20:55,680
all the aspects of reader before for

494
00:20:51,630 --> 00:20:57,030
when we foster a PDF file format there's

495
00:20:55,680 --> 00:20:58,770
kind of a couple of ways I guess we

496
00:20:57,030 --> 00:21:01,800
thought we<font color="#CCCCCC"> could do</font><font color="#E5E5E5"> this we could either</font>

497
00:20:58,770 --> 00:21:03,180
generate the pdfs ourselves that might

498
00:21:01,800 --> 00:21:04,830
take<font color="#CCCCCC"> a little while but you know we've</font>

499
00:21:03,180 --> 00:21:07,080
got the specification we can probably<font color="#E5E5E5"> go</font>

500
00:21:04,830 --> 00:21:09,470
do that the option we chose was<font color="#E5E5E5"> just to</font>

501
00:21:07,080 --> 00:21:12,030
go out<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> internet and just</font><font color="#CCCCCC"> w get</font>

502
00:21:09,470 --> 00:21:14,340
lots and lots of<font color="#E5E5E5"> pdfs i think we ended</font>

503
00:21:12,030 --> 00:21:16,680
up with around<font color="#CCCCCC"> 2 terabytes of</font><font color="#E5E5E5"> pdfs after</font>

504
00:21:14,340 --> 00:21:20,850
running w get recursively for about a

505
00:21:16,680 --> 00:21:23,520
week or<font color="#CCCCCC"> so now that's great and we have</font>

506
00:21:20,850 --> 00:21:26,219
lots<font color="#CCCCCC"> and lots pdfs but we want</font><font color="#E5E5E5"> to reduce</font>

507
00:21:23,520 --> 00:21:28,139
the amount of pdfs we have before<font color="#E5E5E5"> we</font>

508
00:21:26,220 --> 00:21:29,580
fast them because you know a lot of

509
00:21:28,140 --> 00:21:33,240
<font color="#E5E5E5">these PDFs are actually going to add new</font>

510
00:21:29,580 --> 00:21:36,030
coverage so we only<font color="#E5E5E5"> want to buzz PDFs</font>

511
00:21:33,240 --> 00:21:37,620
they're going to add new coverage so the

512
00:21:36,030 --> 00:21:40,290
<font color="#E5E5E5">way we did that is we wrote a little</font>

513
00:21:37,620 --> 00:21:43,139
<font color="#E5E5E5">script around the dynamo rio dr curve</font>

514
00:21:40,290 --> 00:21:44,970
tool what dr cough does is it<font color="#E5E5E5"> helped put</font>

515
00:21:43,140 --> 00:21:47,640
the basic blocks that get covered when

516
00:21:44,970 --> 00:21:51,000
you execute an application and this is

517
00:21:47,640 --> 00:21:54,060
quite useful so we ran the PDF through

518
00:21:51,000 --> 00:21:56,250
reader the<font color="#CCCCCC"> arcade cough just</font><font color="#E5E5E5"> injected</font>

519
00:21:54,060 --> 00:21:58,169
dll outputs the<font color="#E5E5E5"> basic blocks then we</font>

520
00:21:56,250 --> 00:22:00,600
compare that to a database if the PDF

521
00:21:58,170 --> 00:22:01,110
adds new coverage<font color="#CCCCCC"> rate we'll keep that</font>

522
00:22:00,600 --> 00:22:03,120
could

523
00:22:01,110 --> 00:22:04,469
in our<font color="#CCCCCC"> phaser if it</font><font color="#E5E5E5"> doesn't well we</font>

524
00:22:03,120 --> 00:22:06,989
don't really<font color="#E5E5E5"> care about it we'll just</font>

525
00:22:04,470 --> 00:22:08,490
drop that off from that I<font color="#CCCCCC"> think we ended</font>

526
00:22:06,990 --> 00:22:10,590
<font color="#E5E5E5">up with about four or five hundred makes</font>

527
00:22:08,490 --> 00:22:12,660
worth of PDFs from the original input

528
00:22:10,590 --> 00:22:14,730
size of<font color="#E5E5E5"> two terabytes which means we're</font>

529
00:22:12,660 --> 00:22:16,710
going<font color="#E5E5E5"> to be a little bit</font><font color="#CCCCCC"> more likely of</font>

530
00:22:14,730 --> 00:22:18,330
finding bugs there because we're

531
00:22:16,710 --> 00:22:22,650
exercising lots of different code paths

532
00:22:18,330 --> 00:22:25,199
with<font color="#CCCCCC"> the application one thing before</font>

533
00:22:22,650 --> 00:22:27,059
you start phasing<font color="#E5E5E5"> PDS that is worth</font>

534
00:22:25,200 --> 00:22:30,150
mentioning<font color="#E5E5E5"> they're typically compressed</font>

535
00:22:27,059 --> 00:22:32,190
and it's worth uncompressing them first

536
00:22:30,150 --> 00:22:33,840
you'll tend to get much better results

537
00:22:32,190 --> 00:22:36,750
if<font color="#E5E5E5"> you're going to go out and fast these</font>

538
00:22:33,840 --> 00:22:38,970
formats which is obviously what we did

539
00:22:36,750 --> 00:22:40,740
again lots<font color="#E5E5E5"> of free tools online</font><font color="#CCCCCC"> that did</font>

540
00:22:38,970 --> 00:22:42,440
that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> just barely wrap</font><font color="#CCCCCC"> the script</font>

541
00:22:40,740 --> 00:22:45,540
<font color="#E5E5E5">around one of the freely available ones</font>

542
00:22:42,440 --> 00:22:48,770
reader is happy to accept compressed or

543
00:22:45,540 --> 00:22:53,280
uncompressed PDS so that's all good

544
00:22:48,770 --> 00:22:55,230
although why bother fuzzy lots and<font color="#E5E5E5"> lots</font>

545
00:22:53,280 --> 00:22:57,090
of<font color="#CCCCCC"> people spend a lot of effort fuzzing</font>

546
00:22:55,230 --> 00:22:58,950
reader I know project zero ever<font color="#CCCCCC"> loaded</font>

547
00:22:57,090 --> 00:23:00,899
<font color="#E5E5E5">bugs on their website where they've just</font>

548
00:22:58,950 --> 00:23:04,320
gone out and fast reader adobe doing

549
00:23:00,900 --> 00:23:05,910
themselves the idea is is you need to

550
00:23:04,320 --> 00:23:07,379
fuzz a lot smarter just<font color="#E5E5E5"> grabbing a</font>

551
00:23:05,910 --> 00:23:08,700
couple of<font color="#E5E5E5"> pdfs and throwing them through</font>

552
00:23:07,380 --> 00:23:11,010
reading you're not going to<font color="#E5E5E5"> get great</font>

553
00:23:08,700 --> 00:23:12,360
results from it if you can exercise lots

554
00:23:11,010 --> 00:23:14,490
of different code paths lots of

555
00:23:12,360 --> 00:23:17,668
different code coverage you might have a

556
00:23:14,490 --> 00:23:19,799
better chance of a attempting of getting

557
00:23:17,669 --> 00:23:21,210
bugs and this is<font color="#CCCCCC"> something that</font><font color="#E5E5E5"> some of</font>

558
00:23:19,799 --> 00:23:25,559
you probably know American fuzzy lot

559
00:23:21,210 --> 00:23:27,780
which is<font color="#CCCCCC"> a really</font><font color="#E5E5E5"> cool fuzzer manages to</font>

560
00:23:25,559 --> 00:23:29,309
do it tries to exercise as much of the

561
00:23:27,780 --> 00:23:31,320
code as possible and it has a really

562
00:23:29,309 --> 00:23:33,389
<font color="#CCCCCC">good feedback engine in that allows it</font>

563
00:23:31,320 --> 00:23:34,889
to do that if<font color="#E5E5E5"> you're on the AFL website</font>

564
00:23:33,390 --> 00:23:37,020
you'll see all<font color="#E5E5E5"> the bugs it's found in</font>

565
00:23:34,890 --> 00:23:39,929
some<font color="#E5E5E5"> pretty high-profile bits of</font>

566
00:23:37,020 --> 00:23:41,668
software the other thing that's<font color="#E5E5E5"> worth</font>

567
00:23:39,929 --> 00:23:44,549
considering which isn't actually what we

568
00:23:41,669 --> 00:23:46,410
did with reader but it's worth trying to

569
00:23:44,549 --> 00:23:49,679
distribute out your fuzzing runs as much

570
00:23:46,410 --> 00:23:51,480
as possible so as you'll see we actually

571
00:23:49,679 --> 00:23:53,340
just used a<font color="#E5E5E5"> couple of laptops ran it for</font>

572
00:23:51,480 --> 00:23:56,880
a week if we<font color="#CCCCCC"> could run that you know</font>

573
00:23:53,340 --> 00:23:58,678
clouds<font color="#E5E5E5"> go get some AWS time over a lots</font>

574
00:23:56,880 --> 00:24:02,100
and lots of<font color="#E5E5E5"> boxes you're probably going</font>

575
00:23:58,679 --> 00:24:05,700
<font color="#E5E5E5">to get some good success so yeah we got</font>

576
00:24:02,100 --> 00:24:07,949
a few crashes from<font color="#E5E5E5"> doing this I said all</font>

577
00:24:05,700 --> 00:24:09,750
we did was a really simple bit flip ran

578
00:24:07,950 --> 00:24:11,580
it for a week across a coupler laptops

579
00:24:09,750 --> 00:24:14,400
you know<font color="#E5E5E5"> graphing we were launching a</font>

580
00:24:11,580 --> 00:24:17,020
few reader instances every few set

581
00:24:14,400 --> 00:24:18,490
so nothing particularly quick but we got

582
00:24:17,020 --> 00:24:21,039
to use after free we've got a null

583
00:24:18,490 --> 00:24:24,299
pointer drf lots of boring rubbish

584
00:24:21,039 --> 00:24:26,379
crashes but in total alphas are

585
00:24:24,299 --> 00:24:27,910
identified around a hundred crashes

586
00:24:26,380 --> 00:24:29,650
which was still triaging we only ran

587
00:24:27,910 --> 00:24:32,860
<font color="#CCCCCC">this not last week the week before I</font>

588
00:24:29,650 --> 00:24:34,150
<font color="#E5E5E5">think it was currently</font><font color="#CCCCCC"> I'm just trying</font>

589
00:24:32,860 --> 00:24:36,010
<font color="#E5E5E5">to write a proof of concept for the use</font>

590
00:24:34,150 --> 00:24:37,740
of the free and going to<font color="#E5E5E5"> report that to</font>

591
00:24:36,010 --> 00:24:41,169
<font color="#CCCCCC">adobe obviously but once we've done that</font>

592
00:24:37,740 --> 00:24:42,700
just very<font color="#E5E5E5"> quickly it's appears to be an</font>

593
00:24:41,169 --> 00:24:45,010
error in the<font color="#E5E5E5"> way of font library is</font>

594
00:24:42,700 --> 00:24:47,230
being handled and we're<font color="#E5E5E5"> going to get</font>

595
00:24:45,010 --> 00:24:49,510
that reported off to<font color="#CCCCCC"> Adobe and why your</font>

596
00:24:47,230 --> 00:24:52,030
proof<font color="#E5E5E5"> of concept so hopefully keep an</font>

597
00:24:49,510 --> 00:24:56,470
eye on our website and probably publish

598
00:24:52,030 --> 00:24:58,980
something on that the other thing though

599
00:24:56,470 --> 00:25:01,570
the problem<font color="#E5E5E5"> with looking at the</font>

600
00:24:58,980 --> 00:25:04,240
rendering engine is there are now quite

601
00:25:01,570 --> 00:25:05,678
a lot mitigations in place so if we've

602
00:25:04,240 --> 00:25:07,510
got that use after free image<font color="#CCCCCC"> to our</font>

603
00:25:05,679 --> 00:25:09,669
cool exploit for it or whatever from

604
00:25:07,510 --> 00:25:11,799
<font color="#CCCCCC">read a niner below would probably have</font>

605
00:25:09,669 --> 00:25:14,770
some cool would have control of the user

606
00:25:11,799 --> 00:25:17,350
machine from reader 10 we've got<font color="#E5E5E5"> this</font>

607
00:25:14,770 --> 00:25:18,760
idea of a sandbox so probably quite love

608
00:25:17,350 --> 00:25:21,280
you know<font color="#E5E5E5"> about this already but</font><font color="#CCCCCC"> the</font>

609
00:25:18,760 --> 00:25:24,658
sandbox limits what our abilities of our

610
00:25:21,280 --> 00:25:26,559
exploit to cool out the operating system

611
00:25:24,659 --> 00:25:30,280
essentially it goes through a broker

612
00:25:26,559 --> 00:25:32,080
processing reader now there's<font color="#E5E5E5"> been quite</font>

613
00:25:30,280 --> 00:25:34,030
a lot<font color="#CCCCCC"> of work already done on the</font>

614
00:25:32,080 --> 00:25:37,678
sandbox these are a couple<font color="#CCCCCC"> of papers</font>

615
00:25:34,030 --> 00:25:40,090
which they've mentioned at the beginning

616
00:25:37,679 --> 00:25:42,460
ultimately it's not massively changed

617
00:25:40,090 --> 00:25:44,168
between we to 10 and ritu 11 we have

618
00:25:42,460 --> 00:25:46,750
done a little bit of looking at the

619
00:25:44,169 --> 00:25:50,440
sandbox recently and we're going<font color="#CCCCCC"> to</font>

620
00:25:46,750 --> 00:25:51,940
carry on<font color="#E5E5E5"> looking at that as well it's</font>

621
00:25:50,440 --> 00:25:54,190
worth noting as well that the reader

622
00:25:51,940 --> 00:25:55,900
sandbox is actually heavily based on the

623
00:25:54,190 --> 00:25:58,780
chrome sandbox but the differences are

624
00:25:55,900 --> 00:26:01,510
that with the chrome sandbox we have

625
00:25:58,780 --> 00:26:03,309
around<font color="#E5E5E5"> 10 calls out to the OS whereas in</font>

626
00:26:01,510 --> 00:26:05,789
reader there's a hundred<font color="#E5E5E5"> and something</font>

627
00:26:03,309 --> 00:26:07,720
to<font color="#CCCCCC"> support its rich feature set</font>

628
00:26:05,789 --> 00:26:09,520
obviously this gives us quite a nice

629
00:26:07,720 --> 00:26:11,650
attack surface for when you want to

630
00:26:09,520 --> 00:26:14,770
maybe look at<font color="#E5E5E5"> the sandbox or try and</font>

631
00:26:11,650 --> 00:26:16,750
fuzzy or something so with that in mind

632
00:26:14,770 --> 00:26:19,150
there's a few ways<font color="#CCCCCC"> that you could</font>

633
00:26:16,750 --> 00:26:21,789
consider trying to break out<font color="#CCCCCC"> the sandbox</font>

634
00:26:19,150 --> 00:26:24,850
it will go through in a minute but with

635
00:26:21,789 --> 00:26:27,379
Adobe the sandbox essentially looks like

636
00:26:24,850 --> 00:26:29,570
this so when you launch Adobe

637
00:26:27,380 --> 00:26:31,430
actually launched<font color="#E5E5E5"> two processes so you</font>

638
00:26:29,570 --> 00:26:33,950
get<font color="#CCCCCC"> a really low</font><font color="#E5E5E5"> privilege process which</font>

639
00:26:31,430 --> 00:26:35,630
is what renders your PDF and then<font color="#CCCCCC"> a</font>

640
00:26:33,950 --> 00:26:39,790
second process which is this broker

641
00:26:35,630 --> 00:26:41,990
process up here excuse me which

642
00:26:39,790 --> 00:26:44,270
essentially hooks all calls out to the

643
00:26:41,990 --> 00:26:48,200
OS to ensure<font color="#CCCCCC"> that you know nothing weird</font>

644
00:26:44,270 --> 00:26:49,970
and wonderful is<font color="#CCCCCC"> going on again the reed</font>

645
00:26:48,200 --> 00:26:51,440
<font color="#CCCCCC">writes out</font><font color="#E5E5E5"> like the file system and</font>

646
00:26:49,970 --> 00:26:53,240
registry keys these<font color="#E5E5E5"> are heavily</font>

647
00:26:51,440 --> 00:26:55,340
restricted now you can't just go an

648
00:26:53,240 --> 00:26:56,900
arbitrary right to any bit of the

649
00:26:55,340 --> 00:26:58,929
<font color="#CCCCCC">filesystem you can't just go right to a</font>

650
00:26:56,900 --> 00:27:03,770
bit of the registry that you feel<font color="#E5E5E5"> like</font>

651
00:26:58,930 --> 00:27:05,360
you'll get caught out there so as I

652
00:27:03,770 --> 00:27:07,430
mentioned there<font color="#CCCCCC"> are a few ways we can</font>

653
00:27:05,360 --> 00:27:11,419
consider maybe trying to<font color="#E5E5E5"> break out of</font>

654
00:27:07,430 --> 00:27:13,130
this sandbox a kernel oh don't you know

655
00:27:11,420 --> 00:27:15,820
probably quite difficult but it's<font color="#E5E5E5"> that</font>

656
00:27:13,130 --> 00:27:18,350
year thing you could consider and

657
00:27:15,820 --> 00:27:20,570
certainly that's if you look at some the

658
00:27:18,350 --> 00:27:22,580
<font color="#CCCCCC">pound 20 winners previously that's some</font>

659
00:27:20,570 --> 00:27:24,020
of<font color="#E5E5E5"> the things that they have done so you</font>

660
00:27:22,580 --> 00:27:27,350
know it's not to say that there aren't

661
00:27:24,020 --> 00:27:30,170
any bugs<font color="#E5E5E5"> a logical flaws in the cross</font>

662
00:27:27,350 --> 00:27:34,370
goes yeah<font color="#E5E5E5"> okay so reader is continuously</font>

663
00:27:30,170 --> 00:27:36,080
adding new minus features which need to

664
00:27:34,370 --> 00:27:38,600
be<font color="#E5E5E5"> implemented in the sandbox but</font>

665
00:27:36,080 --> 00:27:39,439
<font color="#CCCCCC">they're you know</font><font color="#E5E5E5"> certainly no reason to</font>

666
00:27:38,600 --> 00:27:42,110
<font color="#CCCCCC">think that they wouldn't have made</font>

667
00:27:39,440 --> 00:27:44,450
mistake sir but one<font color="#E5E5E5"> of the ways we're</font>

668
00:27:42,110 --> 00:27:46,729
looking at is a memory corruption in the

669
00:27:44,450 --> 00:27:51,380
cross gules so we're looking at building

670
00:27:46,730 --> 00:27:54,320
a sandbox Kozma this is kind<font color="#E5E5E5"> of based on</font>

671
00:27:51,380 --> 00:27:56,780
<font color="#CCCCCC">the work in the breeding sandworms paper</font>

672
00:27:54,320 --> 00:27:59,450
where they implemented something kind<font color="#E5E5E5"> of</font>

673
00:27:56,780 --> 00:28:01,370
similar but they only implemented it on

674
00:27:59,450 --> 00:28:03,410
one corporate<font color="#E5E5E5"> I think so we're looking</font>

675
00:28:01,370 --> 00:28:04,969
at extending that a little bit and

676
00:28:03,410 --> 00:28:09,770
trying to force a lot more<font color="#E5E5E5"> of the calls</font>

677
00:28:04,970 --> 00:28:11,600
out just very very briefly just the<font color="#E5E5E5"> idea</font>

678
00:28:09,770 --> 00:28:13,790
<font color="#E5E5E5">behind the sandbox buzzing is you</font>

679
00:28:11,600 --> 00:28:15,439
obviously<font color="#CCCCCC"> have your PDF here it goes to</font>

680
00:28:13,790 --> 00:28:17,990
the reader broke reader broke the

681
00:28:15,440 --> 00:28:21,050
process what we want to<font color="#E5E5E5"> do is just hook</font>

682
00:28:17,990 --> 00:28:24,070
that called a modified data and when a

683
00:28:21,050 --> 00:28:26,300
PDF is loaded as will see a bit later

684
00:28:24,070 --> 00:28:28,639
one<font color="#E5E5E5"> of the actions you might want to do</font>

685
00:28:26,300 --> 00:28:30,110
is try<font color="#CCCCCC"> and access a website for example</font>

686
00:28:28,640 --> 00:28:32,299
so you had embed the you are

687
00:28:30,110 --> 00:28:34,159
URL in there what we can do is<font color="#E5E5E5"> obviously</font>

688
00:28:32,299 --> 00:28:37,070
that's a user controllable with value so

689
00:28:34,160 --> 00:28:39,440
we can hook that modify that insert fast

690
00:28:37,070 --> 00:28:41,689
data there and try and<font color="#E5E5E5"> watch out for</font>

691
00:28:39,440 --> 00:28:43,640
<font color="#CCCCCC">some bugs so that's something we're</font>

692
00:28:41,690 --> 00:28:45,679
currently working on as<font color="#CCCCCC"> well along with</font>

693
00:28:43,640 --> 00:28:50,270
<font color="#CCCCCC">all the other bugs we're looking out</font>

694
00:28:45,679 --> 00:28:52,549
from the fuzzing so that's<font color="#CCCCCC"> actually all</font>

695
00:28:50,270 --> 00:28:53,840
i wanted to talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> so David is going</font>

696
00:28:52,549 --> 00:28:55,429
<font color="#CCCCCC">to have and talk</font><font color="#E5E5E5"> about some of the bugs</font>

697
00:28:53,840 --> 00:29:03,649
we found in the JavaScript privileges

698
00:28:55,429 --> 00:29:05,660
system thanks James so back<font color="#CCCCCC"> to the</font>

699
00:29:03,650 --> 00:29:08,419
JavaScript API I just wanted<font color="#CCCCCC"> to touch</font>

700
00:29:05,660 --> 00:29:10,640
upon a mitigation which a day we put<font color="#E5E5E5"> in</font>

701
00:29:08,419 --> 00:29:13,010
place<font color="#E5E5E5"> to safeguard some of the more</font>

702
00:29:10,640 --> 00:29:16,220
sensitive JavaScript functions which are

703
00:29:13,010 --> 00:29:17,900
in built into the reader so in adobe

704
00:29:16,220 --> 00:29:20,750
reader does a concept of privilege

705
00:29:17,900 --> 00:29:23,059
versus non-privileged context<font color="#E5E5E5"> and this</font>

706
00:29:20,750 --> 00:29:25,340
is defined in the<font color="#E5E5E5"> adobe documentation</font>

707
00:29:23,059 --> 00:29:28,850
for the javascript api here as you<font color="#CCCCCC"> can</font>

708
00:29:25,340 --> 00:29:31,520
<font color="#CCCCCC">see and</font><font color="#E5E5E5"> those some</font><font color="#CCCCCC"> javascript methods</font>

709
00:29:28,850 --> 00:29:35,030
mark with this little<font color="#E5E5E5"> ass icon a little</font>

710
00:29:31,520 --> 00:29:37,190
red icon and can only be accessed in a

711
00:29:35,030 --> 00:29:38,960
<font color="#E5E5E5">privileged context so if you crafted a</font>

712
00:29:37,190 --> 00:29:40,400
PDF<font color="#E5E5E5"> and it's come you know you just</font>

713
00:29:38,960 --> 00:29:43,190
download it from the internet<font color="#E5E5E5"> you can't</font>

714
00:29:40,400 --> 00:29:44,870
you can't for example use the launch

715
00:29:43,190 --> 00:29:48,620
your old method which will launch<font color="#E5E5E5"> the</font>

716
00:29:44,870 --> 00:29:51,168
URL in a browser so if you look at<font color="#CCCCCC"> the</font>

717
00:29:48,620 --> 00:29:54,320
paper<font color="#E5E5E5"> I discussed about</font><font color="#CCCCCC"> the life of</font><font color="#E5E5E5"> a</font>

718
00:29:51,169 --> 00:29:57,200
javascript bug it describes this it's in

719
00:29:54,320 --> 00:29:58,428
<font color="#E5E5E5">more detail but very simply what after</font>

720
00:29:57,200 --> 00:30:00,080
we've done<font color="#E5E5E5"> our enumeration we've</font>

721
00:29:58,429 --> 00:30:01,880
established what's there and what some

722
00:30:00,080 --> 00:30:04,730
of the inbuilt functions within reader

723
00:30:01,880 --> 00:30:06,410
look like and also we've compiled the

724
00:30:04,730 --> 00:30:08,630
price<font color="#E5E5E5"> bytecode we can start to do</font>

725
00:30:06,410 --> 00:30:12,440
essentially code review of some of these

726
00:30:08,630 --> 00:30:15,110
in built functions some of the functions

727
00:30:12,440 --> 00:30:18,320
<font color="#CCCCCC">that marked is trusted so here we define</font>

728
00:30:15,110 --> 00:30:21,770
foo as a trusted function this has a

729
00:30:18,320 --> 00:30:23,770
parameter bar you you begin<font color="#E5E5E5"> the</font>

730
00:30:21,770 --> 00:30:26,629
privileged operation which increases the

731
00:30:23,770 --> 00:30:28,639
privilege<font color="#CCCCCC"> as a stack frame some</font>

732
00:30:26,630 --> 00:30:32,360
privileged stuff happens<font color="#CCCCCC"> here and then</font>

733
00:30:28,640 --> 00:30:33,950
you<font color="#CCCCCC"> UN the privileged one of the one of</font>

734
00:30:32,360 --> 00:30:35,979
the vulnerabilities which we've report

735
00:30:33,950 --> 00:30:39,410
to add ivory which we<font color="#CCCCCC"> identified and</font>

736
00:30:35,980 --> 00:30:42,020
basically involves are being used in the

737
00:30:39,410 --> 00:30:42,290
<font color="#E5E5E5">privileged stuff so you can call one of</font>

738
00:30:42,020 --> 00:30:43,639
the

739
00:30:42,290 --> 00:30:47,690
<font color="#CCCCCC">trusted functions which is present</font>

740
00:30:43,640 --> 00:30:49,580
within within reader you can manipulate

741
00:30:47,690 --> 00:30:52,940
the bar which is<font color="#E5E5E5"> an object</font><font color="#CCCCCC"> which is</font>

742
00:30:49,580 --> 00:30:54,800
passed in and then in in turn you get a

743
00:30:52,940 --> 00:30:56,780
privilege escalation with something<font color="#E5E5E5"> you</font>

744
00:30:54,800 --> 00:31:00,290
<font color="#E5E5E5">control something</font><font color="#CCCCCC"> which happens in in</font>

745
00:30:56,780 --> 00:31:04,480
the privilege stuff so I just<font color="#CCCCCC"> wanted to</font>

746
00:31:00,290 --> 00:31:04,480
<font color="#E5E5E5">do a quick</font><font color="#CCCCCC"> demo of more exploited this</font>

747
00:31:08,020 --> 00:31:13,550
so<font color="#E5E5E5"> first of all I'm going to launch a</font>

748
00:31:10,550 --> 00:31:16,850
PDF which tries to launch a URL in a low

749
00:31:13,550 --> 00:31:21,770
<font color="#E5E5E5">privileged context as you can see you</font>

750
00:31:16,850 --> 00:31:23,870
<font color="#CCCCCC">get a security warning which which is</font>

751
00:31:21,770 --> 00:31:26,420
preventing you from launching the URL

752
00:31:23,870 --> 00:31:28,879
which is YouTube you've got the option

753
00:31:26,420 --> 00:31:30,020
to remember this for future reference

754
00:31:28,880 --> 00:31:32,570
but i'm not going<font color="#CCCCCC"> to click that i'm</font>

755
00:31:30,020 --> 00:31:38,780
going<font color="#E5E5E5"> to click cancel just to prove that</font>

756
00:31:32,570 --> 00:31:43,010
<font color="#E5E5E5">we're actually doing something it here's</font>

757
00:31:38,780 --> 00:31:46,490
our exploit PDF as you can see there was

758
00:31:43,010 --> 00:31:48,870
no security dialogue and we get a nice

759
00:31:46,490 --> 00:31:51,240
song from the rehearsing

760
00:31:48,870 --> 00:31:53,100
James some of it that you<font color="#E5E5E5"> should</font><font color="#CCCCCC"> have</font>

761
00:31:51,240 --> 00:32:05,130
seen some of<font color="#E5E5E5"> the PDS which changes we</font>

762
00:31:53,100 --> 00:32:08,340
send<font color="#CCCCCC"> agree with me spinning all times so</font>

763
00:32:05,130 --> 00:32:10,530
finally to summarize our talk so what we

764
00:32:08,340 --> 00:32:12,929
learnt from our journey with adobe

765
00:32:10,530 --> 00:32:15,780
reader well we've learnt a methodology

766
00:32:12,930 --> 00:32:18,420
which can allow us to understand the

767
00:32:15,780 --> 00:32:20,040
attack surface this product how

768
00:32:18,420 --> 00:32:22,920
potentially how this can be reduced

769
00:32:20,040 --> 00:32:24,450
through hardening potentially we've

770
00:32:22,920 --> 00:32:27,030
learned some things which can be

771
00:32:24,450 --> 00:32:30,120
implemented as security controls to

772
00:32:27,030 --> 00:32:33,690
mitigate the<font color="#E5E5E5"> risk so perhaps on boundary</font>

773
00:32:30,120 --> 00:32:36,178
email and web filtering appliances for

774
00:32:33,690 --> 00:32:38,970
an organization you might flag or

775
00:32:36,179 --> 00:32:40,679
increase the risk associate<font color="#CCCCCC"> with an</font>

776
00:32:38,970 --> 00:32:44,070
attachment which has javascript or

777
00:32:40,679 --> 00:32:46,350
something like that in it but the

778
00:32:44,070 --> 00:32:48,450
conclusion is that we we've identified a

779
00:32:46,350 --> 00:32:49,949
number of bugs we didn't know<font color="#E5E5E5"> if we'd</font>

780
00:32:48,450 --> 00:32:51,809
fight if<font color="#CCCCCC"> we get anywhere with this</font>

781
00:32:49,950 --> 00:32:53,280
<font color="#E5E5E5">project but you know with a couple of</font>

782
00:32:51,809 --> 00:32:55,020
laptops we<font color="#CCCCCC"> managed to</font><font color="#E5E5E5"> get our views</font>

783
00:32:53,280 --> 00:32:56,970
after free with a bit of effort with the

784
00:32:55,020 --> 00:32:59,070
JavaScript API<font color="#CCCCCC"> we've managed to get a</font>

785
00:32:56,970 --> 00:33:02,220
privilege escalation and we've got

786
00:32:59,070 --> 00:33:03,960
plenty<font color="#E5E5E5"> more to triage so the longer it</font>

787
00:33:02,220 --> 00:33:09,270
short of<font color="#E5E5E5"> it is yeah you should bother</font>

788
00:33:03,960 --> 00:33:11,520
assessing popular software so future

789
00:33:09,270 --> 00:33:13,620
work then and we already starting to

790
00:33:11,520 --> 00:33:15,929
apply this a similar<font color="#E5E5E5"> sort of methodology</font>

791
00:33:13,620 --> 00:33:17,969
for other projects products and the

792
00:33:15,929 --> 00:33:20,520
<font color="#CCCCCC">tactic seems to be working so we've</font>

793
00:33:17,970 --> 00:33:22,830
already got bugs in<font color="#E5E5E5"> Microsoft Visio and</font>

794
00:33:20,520 --> 00:33:24,780
when we're working<font color="#CCCCCC"> on other products but</font>

795
00:33:22,830 --> 00:33:27,030
we wanted<font color="#CCCCCC"> to share this methodology so</font>

796
00:33:24,780 --> 00:33:28,678
you know this<font color="#CCCCCC"> is something that you guys</font>

797
00:33:27,030 --> 00:33:30,570
can do as well and pick products and

798
00:33:28,679 --> 00:33:31,980
start approaching them just because

799
00:33:30,570 --> 00:33:33,600
they're popular and they used everywhere

800
00:33:31,980 --> 00:33:35,309
that maybe been lucked out to death over

801
00:33:33,600 --> 00:33:39,540
the years it's<font color="#CCCCCC"> still worth a stab at</font>

802
00:33:35,309 --> 00:33:40,889
them so if final thanks to<font color="#CCCCCC"> Nils and</font>

803
00:33:39,540 --> 00:33:42,840
<font color="#E5E5E5">young for member you are for their help</font>

804
00:33:40,890 --> 00:33:45,900
and of course<font color="#E5E5E5"> the b-sides crew for all</font>

805
00:33:42,840 --> 00:33:48,899
all their efforts in getting this event

806
00:33:45,900 --> 00:33:51,150
together and fought and<font color="#E5E5E5"> also you guys</font>

807
00:33:48,900 --> 00:33:56,730
for voting<font color="#CCCCCC"> our talk and to be at this</font>

808
00:33:51,150 --> 00:33:58,440
event so finally just before I go<font color="#CCCCCC"> into</font>

809
00:33:56,730 --> 00:34:00,240
the questions actually and just a note

810
00:33:58,440 --> 00:34:01,890
that if<font color="#CCCCCC"> you want to</font><font color="#E5E5E5"> come to the</font><font color="#CCCCCC"> end of</font>

811
00:34:00,240 --> 00:34:02,429
<font color="#E5E5E5">your after party come and see as at the</font>

812
00:34:01,890 --> 00:34:03,869
<font color="#E5E5E5">stand</font>

813
00:34:02,429 --> 00:34:06,840
and we'll be running they have to play

814
00:34:03,869 --> 00:34:09,058
later on and yeah coming<font color="#CCCCCC"> up a beer with</font>

815
00:34:06,840 --> 00:34:12,259
us and have a chat about<font color="#CCCCCC"> Adobe but for</font>

816
00:34:09,059 --> 00:34:12,260
the time being is there any questions

