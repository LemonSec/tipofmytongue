1
00:00:00,000 --> 00:00:06,930
hi so I'm<font color="#CCCCCC"> Julian I'm coming from</font>

2
00:00:04,740 --> 00:00:08,340
Switzerland and<font color="#CCCCCC"> the montains sorry i</font>

3
00:00:06,930 --> 00:00:14,580
don't have fluctuate too late for all of

4
00:00:08,340 --> 00:00:16,710
you I'm<font color="#E5E5E5"> working for</font><font color="#CCCCCC"> MSSP as a security</font>

5
00:00:14,580 --> 00:00:18,779
architect<font color="#CCCCCC"> or security expert thought of</font>

6
00:00:16,710 --> 00:00:20,730
a team doing applied research or a

7
00:00:18,779 --> 00:00:24,359
technology scouting to know what would

8
00:00:20,730 --> 00:00:26,789
<font color="#CCCCCC">be</font><font color="#E5E5E5"> the next</font><font color="#CCCCCC"> step I'm going to talk</font><font color="#E5E5E5"> about</font>

9
00:00:24,359 --> 00:00:29,609
iOS malware but the name of<font color="#CCCCCC"> the company</font>

10
00:00:26,789 --> 00:00:32,430
<font color="#E5E5E5">sounds like one of the AV vendor but I'm</font>

11
00:00:29,609 --> 00:00:35,510
not ready<font color="#E5E5E5"> to AV vendor so he's not to</font>

12
00:00:32,430 --> 00:00:41,219
sell you a new product info SEC is a

13
00:00:35,510 --> 00:00:44,699
close but not in this building<font color="#CCCCCC"> and</font>

14
00:00:41,219 --> 00:00:48,030
otherwise<font color="#E5E5E5"> I'm doing also</font><font color="#CCCCCC"> cgf and stuff</font>

15
00:00:44,700 --> 00:00:50,520
like that<font color="#CCCCCC"> so today's top would be</font><font color="#E5E5E5"> about</font>

16
00:00:48,030 --> 00:00:52,170
iOS malware but if<font color="#E5E5E5"> we looked into the</font>

17
00:00:50,520 --> 00:00:55,199
news most of the time what we heard

18
00:00:52,170 --> 00:00:58,770
since 2010 is a lot of stuff<font color="#CCCCCC"> about</font>

19
00:00:55,199 --> 00:01:01,289
<font color="#CCCCCC">Android banking malware or information</font>

20
00:00:58,770 --> 00:01:05,100
stealing software on<font color="#E5E5E5"> Android so you</font>

21
00:01:01,289 --> 00:01:08,490
might say<font color="#E5E5E5"> okay I heard</font><font color="#CCCCCC"> about a lot of</font>

22
00:01:05,099 --> 00:01:11,009
them so the only pick a few there but if

23
00:01:08,490 --> 00:01:13,350
we<font color="#CCCCCC"> if we looked at iOS you might said</font>

24
00:01:11,010 --> 00:01:17,970
<font color="#CCCCCC">okay it's</font><font color="#E5E5E5"> not even a problem because</font>

25
00:01:13,350 --> 00:01:20,548
from last year verizon<font color="#CCCCCC"> GBI a report they</font>

26
00:01:17,970 --> 00:01:22,740
said that her phrasing jay-z<font color="#E5E5E5"> I got 99</font>

27
00:01:20,549 --> 00:01:25,409
problems and mobile malware isn't even

28
00:01:22,740 --> 00:01:28,829
one first of them so what they basically

29
00:01:25,409 --> 00:01:31,950
said is ok but there is no mobile

30
00:01:28,829 --> 00:01:35,070
malware and they I highlighted something

31
00:01:31,950 --> 00:01:37,470
that is really out to read but what they

32
00:01:35,070 --> 00:01:39,779
said is<font color="#CCCCCC"> although suspicious activity</font>

33
00:01:37,470 --> 00:01:41,850
related to iOS malware was in fact a

34
00:01:39,780 --> 00:01:46,140
false positive triggered on Android

35
00:01:41,850 --> 00:01:49,199
devices so this is<font color="#E5E5E5"> their point of view I</font>

36
00:01:46,140 --> 00:01:53,159
tend to<font color="#CCCCCC"> think that they might have some</font>

37
00:01:49,200 --> 00:01:55,140
kind of bias into the information<font color="#CCCCCC"> that</font>

38
00:01:53,159 --> 00:01:57,730
they had because if you look at all the

39
00:01:55,140 --> 00:01:59,710
companies working to the

40
00:01:57,730 --> 00:02:03,220
the report that<font color="#E5E5E5"> they build every year</font>

41
00:01:59,710 --> 00:02:05,949
there<font color="#E5E5E5"> is not that lot of company into</font>

42
00:02:03,220 --> 00:02:08,859
Asia there is a lot of European and US

43
00:02:05,950 --> 00:02:11,830
companies but not in in in Asia this is

44
00:02:08,860 --> 00:02:14,350
where actually most of the iOS malware

45
00:02:11,830 --> 00:02:18,400
are spreading into the photo moment so

46
00:02:14,350 --> 00:02:21,609
publicly so it's more widespread than we

47
00:02:18,400 --> 00:02:25,780
we might sink and<font color="#CCCCCC"> the more at risk</font><font color="#E5E5E5"> might</font>

48
00:02:21,610 --> 00:02:28,330
be companies especially the high-profile

49
00:02:25,780 --> 00:02:31,080
ones where you might<font color="#CCCCCC"> have some some type</font>

50
00:02:28,330 --> 00:02:34,510
of attacks so if we<font color="#CCCCCC"> look</font><font color="#E5E5E5"> there are still</font>

51
00:02:31,080 --> 00:02:37,150
some types of us malware that has been

52
00:02:34,510 --> 00:02:40,390
published<font color="#E5E5E5"> or discovers through the year</font>

53
00:02:37,150 --> 00:02:42,910
the first one<font color="#CCCCCC"> was in 2009 it was named</font><font color="#E5E5E5"> I</font>

54
00:02:40,390 --> 00:02:45,549
<font color="#E5E5E5">key the</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> actually kinda run</font>

55
00:02:42,910 --> 00:02:47,470
somewhere but what you<font color="#E5E5E5"> did was a lock</font>

56
00:02:45,550 --> 00:02:49,690
your screen and changed your<font color="#E5E5E5"> password so</font>

57
00:02:47,470 --> 00:02:52,120
you pass code and if you don't didn't

58
00:02:49,690 --> 00:02:54,250
pay five bucks then it will not unlock

59
00:02:52,120 --> 00:02:56,560
your password how it spread it was a

60
00:02:54,250 --> 00:02:59,650
worm and it<font color="#E5E5E5"> spread by using the default</font>

61
00:02:56,560 --> 00:03:01,900
ssh<font color="#CCCCCC"> I count on iOS one when there was</font>

62
00:02:59,650 --> 00:03:04,540
the first jailbreak so and the problem

63
00:03:01,900 --> 00:03:06,700
is<font color="#CCCCCC"> that once you're even</font><font color="#E5E5E5"> on the 3g or</font>

64
00:03:04,540 --> 00:03:09,310
LTE network of operators most of the

65
00:03:06,700 --> 00:03:11,589
time there is no segmentation between

66
00:03:09,310 --> 00:03:14,200
all the devices and you can directly

67
00:03:11,590 --> 00:03:15,940
access when another devices provided

68
00:03:14,200 --> 00:03:18,369
that you know their IP address she has

69
00:03:15,940 --> 00:03:20,800
been the problem has been recently shown

70
00:03:18,370 --> 00:03:23,530
in the news so last summer when Charlie

71
00:03:20,800 --> 00:03:25,660
Miller did the talk on<font color="#E5E5E5"> a Jeep hacking</font>

72
00:03:23,530 --> 00:03:27,459
hacking I don't know if<font color="#CCCCCC"> you you've read</font>

73
00:03:25,660 --> 00:03:30,549
the details but what they did they were

74
00:03:27,459 --> 00:03:32,620
able<font color="#E5E5E5"> to actually access the Jeep LTE</font>

75
00:03:30,550 --> 00:03:36,130
modem of the jib because<font color="#CCCCCC"> if</font><font color="#E5E5E5"> they were on</font>

76
00:03:32,620 --> 00:03:38,739
the same provider network so I<font color="#E5E5E5"> key was</font>

77
00:03:36,130 --> 00:03:41,670
scanning for openssh port then it's

78
00:03:38,739 --> 00:03:46,959
connected and using the<font color="#E5E5E5"> route and Alpine</font>

79
00:03:41,670 --> 00:03:49,269
credentials and then<font color="#E5E5E5"> that was it then</font>

80
00:03:46,959 --> 00:03:53,650
there are bid some other one in 2012 and

81
00:03:49,270 --> 00:03:56,620
2014 but it was mostly some had related

82
00:03:53,650 --> 00:04:00,220
stuff and not that much and it wasn't

83
00:03:56,620 --> 00:04:03,790
that<font color="#CCCCCC"> much into the news but starting in</font>

84
00:04:00,220 --> 00:04:07,760
2014 the end of 2014 we have seen a lot

85
00:04:03,790 --> 00:04:13,280
more<font color="#E5E5E5"> of them like unload wire locker</font>

86
00:04:07,760 --> 00:04:16,880
and then we had a big one named<font color="#E5E5E5"> Xcode</font>

87
00:04:13,280 --> 00:04:18,709
ghost that was in 2015 and that one made

88
00:04:16,880 --> 00:04:20,418
a lot of noise because it was also it

89
00:04:18,709 --> 00:04:22,870
was parading through the modified

90
00:04:20,418 --> 00:04:25,070
version of xcode so in the news

91
00:04:22,870 --> 00:04:27,919
depending on<font color="#CCCCCC"> which website you're</font>

92
00:04:25,070 --> 00:04:29,960
reading from<font color="#E5E5E5"> you would say that xcode</font>

93
00:04:27,919 --> 00:04:32,419
was used to spread malware but in fact

94
00:04:29,960 --> 00:04:35,719
it was a pirated version of xcode that

95
00:04:32,419 --> 00:04:38,090
was used to<font color="#E5E5E5"> spread this mal work and</font>

96
00:04:35,720 --> 00:04:39,919
what<font color="#CCCCCC"> i found is that most of the time</font>

97
00:04:38,090 --> 00:04:41,840
it's quite hard<font color="#E5E5E5"> to differentiate what</font>

98
00:04:39,919 --> 00:04:44,000
was possible using a jailbroken or a

99
00:04:41,840 --> 00:04:46,010
standard device and that's why they made

100
00:04:44,000 --> 00:04:48,729
this presentation is to try to make<font color="#E5E5E5"> it</font>

101
00:04:46,010 --> 00:04:52,099
more clear between the two worlds and

102
00:04:48,729 --> 00:04:56,270
actually most of the staff discovered

103
00:04:52,100 --> 00:04:58,850
since 2015 so unflawed where locker<font color="#CCCCCC"> he</font>

104
00:04:56,270 --> 00:05:01,250
has<font color="#E5E5E5"> been discovered I'll published at</font>

105
00:04:58,850 --> 00:05:04,310
least by a Palo Alto and one of the

106
00:05:01,250 --> 00:05:06,380
researcher<font color="#CCCCCC"> clubs l is doing something</font>

107
00:05:04,310 --> 00:05:08,539
<font color="#CCCCCC">great is sharing all of the samples</font><font color="#E5E5E5"> that</font>

108
00:05:06,380 --> 00:05:10,909
they got to the community so as I'm not

109
00:05:08,539 --> 00:05:12,469
directly rated by my job<font color="#E5E5E5"> into looking</font>

110
00:05:10,910 --> 00:05:16,190
into malware and I'm doing<font color="#CCCCCC"> it at night</font>

111
00:05:12,470 --> 00:05:19,900
<font color="#CCCCCC">it is</font><font color="#E5E5E5"> quite useful it profit the</font>

112
00:05:16,190 --> 00:05:22,699
community to share those those those

113
00:05:19,900 --> 00:05:26,659
binaries so we can we can reverse them

114
00:05:22,699 --> 00:05:30,260
and learn from them so<font color="#E5E5E5"> just a quick</font>

115
00:05:26,660 --> 00:05:33,220
recap on iOS security the first thing

116
00:05:30,260 --> 00:05:35,810
that almost everyone is aware of is that

117
00:05:33,220 --> 00:05:38,449
the platform is quite close compared<font color="#CCCCCC"> to</font>

118
00:05:35,810 --> 00:05:41,840
android is not possible to sell sign

119
00:05:38,449 --> 00:05:44,530
your binary and push it into a device so

120
00:05:41,840 --> 00:05:47,030
no it's<font color="#E5E5E5"> possible but it's really new</font>

121
00:05:44,530 --> 00:05:51,349
it's something<font color="#E5E5E5"> that you can do only from</font>

122
00:05:47,030 --> 00:05:54,260
a few few months actually nearly nearly

123
00:05:51,349 --> 00:05:56,719
one year but most<font color="#E5E5E5"> of the time you have</font>

124
00:05:54,260 --> 00:05:58,940
<font color="#E5E5E5">those type of access the first one is</font>

125
00:05:56,720 --> 00:06:01,430
<font color="#E5E5E5">the app store everybody knows</font><font color="#CCCCCC"> about it</font>

126
00:05:58,940 --> 00:06:03,349
ueber you get a free application from

127
00:06:01,430 --> 00:06:06,199
the app store it's downloaded and then

128
00:06:03,349 --> 00:06:09,280
you have the binary no it's<font color="#CCCCCC"> not the full</font>

129
00:06:06,199 --> 00:06:11,750
binary it's a soul there<font color="#CCCCCC"> is a</font>

130
00:06:09,280 --> 00:06:13,669
<font color="#E5E5E5">application so sinning and then you</font>

131
00:06:11,750 --> 00:06:14,930
don't have all the the binary for all

132
00:06:13,669 --> 00:06:15,650
the architecture it has been downloaded

133
00:06:14,930 --> 00:06:19,970
onto

134
00:06:15,650 --> 00:06:22,310
on now then you have deployment<font color="#E5E5E5"> which is</font>

135
00:06:19,970 --> 00:06:24,710
called in aus this is when you have

136
00:06:22,310 --> 00:06:27,050
<font color="#CCCCCC">Enterprise developed application so we</font>

137
00:06:24,710 --> 00:06:29,000
threw the as a developer for an

138
00:06:27,050 --> 00:06:31,220
enterprise you have to sign up<font color="#CCCCCC"> for our</font>

139
00:06:29,000 --> 00:06:32,870
enterprise developer account which is<font color="#CCCCCC"> a</font>

140
00:06:31,220 --> 00:06:36,229
<font color="#E5E5E5">little bit more costly you have to</font>

141
00:06:32,870 --> 00:06:38,240
provide<font color="#CCCCCC"> a specific number for the</font>

142
00:06:36,229 --> 00:06:39,500
company register into<font color="#CCCCCC"> the u.s. so you</font>

143
00:06:38,240 --> 00:06:42,490
can prove<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you are actually a</font>

144
00:06:39,500 --> 00:06:45,110
company but it is not the other<font color="#CCCCCC"> spot and</font>

145
00:06:42,490 --> 00:06:48,860
then you sign it and the<font color="#E5E5E5"> idea is that</font>

146
00:06:45,110 --> 00:06:51,260
you by getting this certificate you

147
00:06:48,860 --> 00:06:53,990
would say that I<font color="#E5E5E5"> will only deploy it</font>

148
00:06:51,260 --> 00:06:56,930
within my company so<font color="#CCCCCC"> usually is not</font>

149
00:06:53,990 --> 00:06:58,610
supposed<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> deployed widespread so</font>

150
00:06:56,930 --> 00:07:00,260
this<font color="#CCCCCC"> is something</font><font color="#E5E5E5"> that you might</font><font color="#CCCCCC"> have</font>

151
00:06:58,610 --> 00:07:04,030
known from<font color="#E5E5E5"> your own company if</font><font color="#CCCCCC"> you have</font>

152
00:07:00,260 --> 00:07:07,219
<font color="#CCCCCC">a MGM and you're using iOS basically</font>

153
00:07:04,030 --> 00:07:10,039
devices for your own play then you might

154
00:07:07,220 --> 00:07:11,449
have some in-house developed application

155
00:07:10,039 --> 00:07:13,610
signed by an enterprise developer

156
00:07:11,449 --> 00:07:15,800
account then you<font color="#E5E5E5"> have the jailbroken</font>

157
00:07:13,610 --> 00:07:17,449
device which is the third party app

158
00:07:15,800 --> 00:07:20,180
store but then you have to jailbreak

159
00:07:17,449 --> 00:07:22,160
your device and actually it disables

160
00:07:20,180 --> 00:07:24,070
some of the<font color="#CCCCCC"> projections or the system</font>

161
00:07:22,160 --> 00:07:27,860
<font color="#E5E5E5">and then it allows you to bring on</font>

162
00:07:24,070 --> 00:07:32,419
unsigned code to<font color="#CCCCCC"> the to the device then</font>

163
00:07:27,860 --> 00:07:34,699
you have a fault type of deployment

164
00:07:32,419 --> 00:07:37,250
which is named other a duck is to do

165
00:07:34,699 --> 00:07:39,650
some debugging because as a developer if

166
00:07:37,250 --> 00:07:43,520
you only have your device it's not<font color="#E5E5E5"> that</font>

167
00:07:39,650 --> 00:07:46,880
<font color="#CCCCCC">much and you have even if iOS is less</font>

168
00:07:43,520 --> 00:07:49,729
fragmented<font color="#E5E5E5"> that undred you have various</font>

169
00:07:46,880 --> 00:07:51,289
version of GED OS you have various

170
00:07:49,729 --> 00:07:53,479
version of the phone so you might want

171
00:07:51,289 --> 00:07:56,360
to<font color="#E5E5E5"> check for</font><font color="#CCCCCC"> that it work for everyone</font>

172
00:07:53,479 --> 00:07:58,909
and also get feedbacks as a developer so

173
00:07:56,360 --> 00:08:03,110
what you<font color="#E5E5E5"> can do as an addict is provide</font>

174
00:07:58,909 --> 00:08:06,380
at<font color="#E5E5E5"> mode most most a hundred email</font>

175
00:08:03,110 --> 00:08:09,440
address or so Apple ID and then you can

176
00:08:06,380 --> 00:08:13,550
deploy<font color="#E5E5E5"> those your application</font><font color="#CCCCCC"> on to</font>

177
00:08:09,440 --> 00:08:15,680
those at most 100 people device but

178
00:08:13,550 --> 00:08:17,330
there<font color="#E5E5E5"> is a strong limitation and then</font>

179
00:08:15,680 --> 00:08:19,729
you have the new case since the<font color="#E5E5E5"> last</font>

180
00:08:17,330 --> 00:08:21,948
summer which is<font color="#CCCCCC"> still sign so</font><font color="#E5E5E5"> using</font>

181
00:08:19,729 --> 00:08:24,320
Xcode<font color="#E5E5E5"> 7 know what you can do is request</font>

182
00:08:21,949 --> 00:08:26,810
the cell signing certificate and then

183
00:08:24,320 --> 00:08:28,070
you need to assign so to really pair

184
00:08:26,810 --> 00:08:30,320
your device not on

185
00:08:28,070 --> 00:08:33,020
like<font color="#E5E5E5"> you can access this through itunes</font>

186
00:08:30,320 --> 00:08:34,909
but you have to say actually states that

187
00:08:33,020 --> 00:08:38,210
your device is no acting as a developer

188
00:08:34,909 --> 00:08:40,370
device and then you are able<font color="#E5E5E5"> to develop</font>

189
00:08:38,210 --> 00:08:42,950
and sign your own<font color="#CCCCCC"> application you still</font>

190
00:08:40,370 --> 00:08:48,380
have to<font color="#E5E5E5"> have a knack to do so and use</font>

191
00:08:42,950 --> 00:08:51,920
iphone so the jailbroken case is quite

192
00:08:48,380 --> 00:08:54,350
specific because it can<font color="#CCCCCC"> be used</font><font color="#E5E5E5"> in the</font>

193
00:08:51,920 --> 00:08:56,709
security industry as an advantage<font color="#CCCCCC"> I used</font>

194
00:08:54,350 --> 00:08:58,930
to do a pen testing and especially

195
00:08:56,710 --> 00:09:01,220
mobile application<font color="#E5E5E5"> reverse engineering</font>

196
00:08:58,930 --> 00:09:03,739
to check the security vulnerabilities

197
00:09:01,220 --> 00:09:06,530
and that<font color="#E5E5E5"> everything is a was a West</font>

198
00:09:03,740 --> 00:09:08,150
secure either for the customer for

199
00:09:06,530 --> 00:09:09,560
custome build a solution or for

200
00:09:08,150 --> 00:09:13,850
commercial solution that they want to

201
00:09:09,560 --> 00:09:15,229
use to us as a security so it's quite

202
00:09:13,850 --> 00:09:17,690
useful because if you<font color="#E5E5E5"> don't have a</font>

203
00:09:15,230 --> 00:09:19,550
jailbroken phone you have a lot of

204
00:09:17,690 --> 00:09:21,230
limitation for example all the binary is

205
00:09:19,550 --> 00:09:24,140
coming from job stores are encrypted

206
00:09:21,230 --> 00:09:26,480
using a light grm but it's quite enough

207
00:09:24,140 --> 00:09:28,790
that if you<font color="#E5E5E5"> get the binary sign you</font>

208
00:09:26,480 --> 00:09:31,460
encrypted you<font color="#CCCCCC"> can have</font><font color="#E5E5E5"> decrypt it by</font>

209
00:09:28,790 --> 00:09:34,520
yourself so if you have a jailbroken

210
00:09:31,460 --> 00:09:38,720
phone it's<font color="#E5E5E5"> quite easy the</font><font color="#CCCCCC"> Packer is</font>

211
00:09:34,520 --> 00:09:41,600
really simple<font color="#E5E5E5"> you set a breakpoint once</font>

212
00:09:38,720 --> 00:09:43,670
the the code has been decrypted well

213
00:09:41,600 --> 00:09:46,730
then you run the binary the system will

214
00:09:43,670 --> 00:09:49,280
decrypt your your bite your butt sign

215
00:09:46,730 --> 00:09:51,650
encrypted binary and then you<font color="#E5E5E5"> dump all</font>

216
00:09:49,280 --> 00:09:53,900
<font color="#E5E5E5">the code from the memory it's quite</font>

217
00:09:51,650 --> 00:09:58,550
quite easy and then you have the clear

218
00:09:53,900 --> 00:10:01,370
text binary that's why it's quite useful

219
00:09:58,550 --> 00:10:03,380
<font color="#E5E5E5">in the security industry but there is</font>

220
00:10:01,370 --> 00:10:06,980
<font color="#CCCCCC">one drawback on major drawback is that</font>

221
00:10:03,380 --> 00:10:08,240
it disables code signing validation so

222
00:10:06,980 --> 00:10:10,460
for some people it's a good point

223
00:10:08,240 --> 00:10:13,130
because then you are<font color="#E5E5E5"> able to get some</font>

224
00:10:10,460 --> 00:10:15,760
free stuff out of author App Store you

225
00:10:13,130 --> 00:10:19,430
can install tweak you can<font color="#E5E5E5"> install the</font>

226
00:10:15,760 --> 00:10:26,360
pirated copies of some application which

227
00:10:19,430 --> 00:10:29,170
<font color="#CCCCCC">is bad but also there is a problem</font>

228
00:10:26,360 --> 00:10:31,820
because<font color="#E5E5E5"> then you remove one of the</font>

229
00:10:29,170 --> 00:10:36,140
<font color="#CCCCCC">corpse security principle that made the</font>

230
00:10:31,820 --> 00:10:38,960
platform like Windows RT or iOS more

231
00:10:36,140 --> 00:10:41,360
secure com-pubs<font color="#E5E5E5"> to</font><font color="#CCCCCC"> or laptops or desktop</font>

232
00:10:38,960 --> 00:10:43,970
<font color="#E5E5E5">because we have to bring on</font>

233
00:10:41,360 --> 00:10:45,800
code that can be run and it's not

234
00:10:43,970 --> 00:10:49,250
<font color="#CCCCCC">something that you that is usually done</font>

235
00:10:45,800 --> 00:10:51,079
on the windows or OS 10 boxes I don't

236
00:10:49,250 --> 00:10:54,500
know if many of you have deployed a

237
00:10:51,079 --> 00:10:56,779
blocker within our company but from my

238
00:10:54,500 --> 00:10:59,029
experience at<font color="#CCCCCC"> least in Switzerland and</font>

239
00:10:56,779 --> 00:11:00,740
France there is not a lot of<font color="#E5E5E5"> them so</font>

240
00:10:59,029 --> 00:11:02,269
it's something<font color="#E5E5E5"> that white listing</font>

241
00:11:00,740 --> 00:11:04,630
application is not something that people

242
00:11:02,269 --> 00:11:06,620
tends<font color="#E5E5E5"> to do because there is a lot of</font>

243
00:11:04,630 --> 00:11:09,140
work<font color="#CCCCCC"> that you have</font><font color="#E5E5E5"> to do in the</font>

244
00:11:06,620 --> 00:11:10,880
background to enable new version of<font color="#E5E5E5"> the</font>

245
00:11:09,140 --> 00:11:12,860
application and do some different stuff

246
00:11:10,880 --> 00:11:15,079
so that truly one of the<font color="#E5E5E5"> core principle</font>

247
00:11:12,860 --> 00:11:17,860
of iOS or Windows archivo was doing the

248
00:11:15,079 --> 00:11:24,739
same and unfortunately it's been stopped

249
00:11:17,860 --> 00:11:27,079
but those are core principle so other

250
00:11:24,740 --> 00:11:29,300
<font color="#E5E5E5">than the code signing</font><font color="#CCCCCC"> Apple is also</font>

251
00:11:27,079 --> 00:11:31,219
putting all the type of limitation one

252
00:11:29,300 --> 00:11:34,189
of them is the<font color="#E5E5E5"> Sun box which</font><font color="#CCCCCC"> is named</font>

253
00:11:31,220 --> 00:11:36,200
seatbelt the idea is then every code

254
00:11:34,190 --> 00:11:38,779
coming from the app store or any code

255
00:11:36,200 --> 00:11:41,839
ring and device as to be to going

256
00:11:38,779 --> 00:11:45,079
through sandbox environment so it cannot

257
00:11:41,839 --> 00:11:49,880
do anything they want so<font color="#CCCCCC"> Android does</font>

258
00:11:45,079 --> 00:11:54,319
that by using a very use user and then

259
00:11:49,880 --> 00:11:56,600
is using the basic user segmentation

260
00:11:54,320 --> 00:11:58,820
based on any<font color="#E5E5E5"> Linux that if you don't</font>

261
00:11:56,600 --> 00:12:00,800
have the right for<font color="#E5E5E5"> a specific folder on</font>

262
00:11:58,820 --> 00:12:02,540
by another user you cannot access it

263
00:12:00,800 --> 00:12:05,899
that's all they do the segmentation

264
00:12:02,540 --> 00:12:07,939
between all the application within iOS

265
00:12:05,899 --> 00:12:10,100
is different you have<font color="#CCCCCC"> seatbelt and then</font>

266
00:12:07,940 --> 00:12:12,949
you have like a firewall which is in

267
00:12:10,100 --> 00:12:14,899
place for the<font color="#E5E5E5"> cisco or some specific</font>

268
00:12:12,949 --> 00:12:17,180
function call and if you don't have the

269
00:12:14,899 --> 00:12:20,420
correct privilege you cannot call this

270
00:12:17,180 --> 00:12:23,779
<font color="#E5E5E5">API you cannot call this</font><font color="#CCCCCC"> cisco it's as</font>

271
00:12:20,420 --> 00:12:27,019
basic as that and that's all they do the

272
00:12:23,779 --> 00:12:28,910
isolation for all the application when

273
00:12:27,019 --> 00:12:31,279
you request an access you have<font color="#E5E5E5"> to bring</font>

274
00:12:28,910 --> 00:12:33,560
it like part of your manifest so you

275
00:12:31,279 --> 00:12:36,260
have to declare<font color="#CCCCCC"> a specific file which is</font>

276
00:12:33,560 --> 00:12:38,209
<font color="#E5E5E5">an entitlement and then you feel in all</font>

277
00:12:36,260 --> 00:12:40,069
<font color="#E5E5E5">your entertainment for example if I want</font>

278
00:12:38,209 --> 00:12:42,469
<font color="#CCCCCC">to access the calendar I have to add the</font>

279
00:12:40,070 --> 00:12:44,540
specific entitlement saying the I want

280
00:12:42,470 --> 00:12:46,730
<font color="#E5E5E5">to access the calendar and then Apple we</font>

281
00:12:44,540 --> 00:12:48,949
will review those entitlement and are

282
00:12:46,730 --> 00:12:50,779
some specific types that are disallowed

283
00:12:48,949 --> 00:12:52,609
into the<font color="#CCCCCC"> app store so this is the</font><font color="#E5E5E5"> basic</font>

284
00:12:50,779 --> 00:12:54,120
check if your application is<font color="#CCCCCC"> is</font>

285
00:12:52,610 --> 00:12:56,130
requesting the

286
00:12:54,120 --> 00:12:58,890
entitlement to install another

287
00:12:56,130 --> 00:13:00,839
application because it does exist it

288
00:12:58,890 --> 00:13:02,939
will be<font color="#CCCCCC"> rejected by the App Store and</font>

289
00:13:00,839 --> 00:13:05,910
this is something quite easy<font color="#E5E5E5"> for them to</font>

290
00:13:02,940 --> 00:13:08,520
perform as a check because there is no

291
00:13:05,910 --> 00:13:12,959
obfuscation that you can do in this part

292
00:13:08,520 --> 00:13:15,990
because it's a<font color="#E5E5E5"> XML so phplist file XML</font>

293
00:13:12,960 --> 00:13:18,270
or binary XML file so is really<font color="#E5E5E5"> no</font>

294
00:13:15,990 --> 00:13:21,300
obfuscation that you can do at that time

295
00:13:18,270 --> 00:13:24,210
<font color="#E5E5E5">so it is something that you</font><font color="#CCCCCC"> can do on</font>

296
00:13:21,300 --> 00:13:28,170
top of<font color="#CCCCCC"> that the sandbox seatbelt is</font>

297
00:13:24,210 --> 00:13:30,330
supposed to prevent you as i said to

298
00:13:28,170 --> 00:13:33,870
calling api that you don't have<font color="#E5E5E5"> access</font>

299
00:13:30,330 --> 00:13:35,400
to<font color="#E5E5E5"> but there are some limitation maybe</font>

300
00:13:33,870 --> 00:13:38,670
you have seen<font color="#CCCCCC"> in the news like two weeks</font>

301
00:13:35,400 --> 00:13:41,819
<font color="#CCCCCC">ago I think Stephanie sir one researcher</font>

302
00:13:38,670 --> 00:13:45,329
on iOS he published an application for a

303
00:13:41,820 --> 00:13:47,520
<font color="#CCCCCC">to book something</font><font color="#E5E5E5"> in order to to check</font>

304
00:13:45,330 --> 00:13:49,740
if your device was jailbroken or not or

305
00:13:47,520 --> 00:13:53,520
<font color="#CCCCCC">if you had suspicious application</font>

306
00:13:49,740 --> 00:13:57,450
running on your device what he did to<font color="#E5E5E5"> do</font>

307
00:13:53,520 --> 00:14:01,079
that was to actually take advantage of

308
00:13:57,450 --> 00:14:03,990
holes into the the Sun box to call some

309
00:14:01,080 --> 00:14:06,120
API that weren't supposed to<font color="#E5E5E5"> be allowed</font>

310
00:14:03,990 --> 00:14:08,040
like listing other processes is

311
00:14:06,120 --> 00:14:11,070
something that you're not<font color="#E5E5E5"> supposed to be</font>

312
00:14:08,040 --> 00:14:13,290
able<font color="#E5E5E5"> to do on iOS if you don't have the</font>

313
00:14:11,070 --> 00:14:15,150
specific<font color="#CCCCCC"> entitlements but still</font><font color="#E5E5E5"> you find</font>

314
00:14:13,290 --> 00:14:17,819
a flow that if you call a specific API

315
00:14:15,150 --> 00:14:20,220
you can you that is not well protected

316
00:14:17,820 --> 00:14:26,160
then you will<font color="#E5E5E5"> you will you will get</font>

317
00:14:20,220 --> 00:14:28,830
access to this information so if we look

318
00:14:26,160 --> 00:14:34,350
<font color="#CCCCCC">at malware basically it gets to one will</font>

319
00:14:28,830 --> 00:14:37,920
cause people get infected so most of<font color="#E5E5E5"> the</font>

320
00:14:34,350 --> 00:14:41,070
time<font color="#E5E5E5"> for the iOS world or mobile</font><font color="#CCCCCC"> world</font>

321
00:14:37,920 --> 00:14:43,829
<font color="#E5E5E5">as a whole it's a tool yer user into</font>

322
00:14:41,070 --> 00:14:45,810
installing the application the message

323
00:14:43,830 --> 00:14:48,209
application so what<font color="#CCCCCC"> did we</font><font color="#E5E5E5"> what the</font>

324
00:14:45,810 --> 00:14:51,119
attacker will do is send a link or a

325
00:14:48,209 --> 00:14:53,279
message with a download download link

326
00:14:51,120 --> 00:14:57,060
and then the user will click on the link

327
00:14:53,279 --> 00:14:58,709
it will install<font color="#CCCCCC"> the application I use</font>

328
00:14:57,060 --> 00:15:01,680
this in a fishing campaign for a

329
00:14:58,709 --> 00:15:03,719
customer when<font color="#E5E5E5"> i was doing pen test and i</font>

330
00:15:01,680 --> 00:15:04,589
develop a small application saying that

331
00:15:03,720 --> 00:15:06,930
you

332
00:15:04,590 --> 00:15:08,790
in order to<font color="#CCCCCC"> win a holiday paid by the</font>

333
00:15:06,930 --> 00:15:10,829
company you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to enter your ad</font>

334
00:15:08,790 --> 00:15:13,560
credentials into the application<font color="#CCCCCC"> and</font>

335
00:15:10,830 --> 00:15:15,150
then<font color="#E5E5E5"> I had</font><font color="#CCCCCC"> a ten percent conversion rate</font>

336
00:15:13,560 --> 00:15:17,790
of the people who downloaded the

337
00:15:15,150 --> 00:15:20,459
application and enter the<font color="#E5E5E5"> ID so Windows</font>

338
00:15:17,790 --> 00:15:22,980
ad<font color="#E5E5E5"> Windows domain credentials into the</font>

339
00:15:20,460 --> 00:15:25,410
application because I was a say that it

340
00:15:22,980 --> 00:15:27,840
was a game and if you didn't enter your

341
00:15:25,410 --> 00:15:30,569
credential we cannot check that you were

342
00:15:27,840 --> 00:15:32,820
part of<font color="#CCCCCC"> the company so</font><font color="#E5E5E5"> you cannot enter</font>

343
00:15:30,570 --> 00:15:35,280
the<font color="#CCCCCC"> game to to plate so ten percent is</font>

344
00:15:32,820 --> 00:15:37,140
not that<font color="#E5E5E5"> much</font><font color="#CCCCCC"> but still</font><font color="#E5E5E5"> it shows that it</font>

345
00:15:35,280 --> 00:15:40,140
proves that people are doing or

346
00:15:37,140 --> 00:15:42,630
installing this type of applications we

347
00:15:40,140 --> 00:15:44,550
would say that mostly<font color="#E5E5E5"> on</font><font color="#CCCCCC"> Windows what</font>

348
00:15:42,630 --> 00:15:45,990
attacker are using is watering hole

349
00:15:44,550 --> 00:15:48,750
attacks and they are exploiting

350
00:15:45,990 --> 00:15:51,210
vulnerabilities within the browser it's

351
00:15:48,750 --> 00:15:53,340
<font color="#E5E5E5">something that is also possible on iOS</font>

352
00:15:51,210 --> 00:15:55,470
like on any OS since you<font color="#E5E5E5"> have code you</font>

353
00:15:53,340 --> 00:15:58,080
have parsing code then you have possible

354
00:15:55,470 --> 00:16:01,650
flows so it's not something to rule out

355
00:15:58,080 --> 00:16:05,220
but remote code execution on iOS are

356
00:16:01,650 --> 00:16:06,920
quite expensive<font color="#E5E5E5"> in sense that at least</font>

357
00:16:05,220 --> 00:16:10,590
publicly there are not a lot of<font color="#E5E5E5"> them and</font>

358
00:16:06,920 --> 00:16:13,709
if<font color="#E5E5E5"> we look</font><font color="#CCCCCC"> ok it's maybe also a PR stunt</font>

359
00:16:10,590 --> 00:16:15,300
but what<font color="#E5E5E5"> the rhodium did is over 1</font>

360
00:16:13,710 --> 00:16:18,090
million dollar for a remote code

361
00:16:15,300 --> 00:16:21,719
execution on iOS so it's a<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of a pier</font>

362
00:16:18,090 --> 00:16:23,520
to get people talking about<font color="#E5E5E5"> them but he</font>

363
00:16:21,720 --> 00:16:26,070
clearly show that if there were so many

364
00:16:23,520 --> 00:16:28,890
remote code execution on iOS it's not

365
00:16:26,070 --> 00:16:33,600
<font color="#E5E5E5">something that that they will price so</font>

366
00:16:28,890 --> 00:16:35,550
high so there is quite the initial

367
00:16:33,600 --> 00:16:37,350
infection point for an attacker is not

368
00:16:35,550 --> 00:16:40,109
<font color="#E5E5E5">that easy if you don't go through the</font>

369
00:16:37,350 --> 00:16:43,170
social engineering part then once you

370
00:16:40,110 --> 00:16:44,970
run to the device there is not that much

371
00:16:43,170 --> 00:16:48,360
public but there is still a lot<font color="#CCCCCC"> of</font>

372
00:16:44,970 --> 00:16:51,300
variety that allows you to evaluate<font color="#CCCCCC"> too</font>

373
00:16:48,360 --> 00:16:53,400
sorry to elevate your privilege on the

374
00:16:51,300 --> 00:16:55,140
iOS using vulnerabilities within the

375
00:16:53,400 --> 00:16:58,250
colonel within the module that is led by

376
00:16:55,140 --> 00:17:01,439
the kernel or any privilege code

377
00:16:58,250 --> 00:17:03,840
otherwise if<font color="#CCCCCC"> you don't want to to send a</font>

378
00:17:01,440 --> 00:17:08,180
<font color="#CCCCCC">link what has also been done actually in</font>

379
00:17:03,840 --> 00:17:11,700
the presentation at various conferences

380
00:17:08,180 --> 00:17:13,460
at least it was in Asia what did was a

381
00:17:11,700 --> 00:17:16,350
<font color="#E5E5E5">some</font>

382
00:17:13,460 --> 00:17:19,470
provider were attacked on to the<font color="#CCCCCC"> DNS and</font>

383
00:17:16,349 --> 00:17:23,399
the attacker reroute the DNS traffic and

384
00:17:19,470 --> 00:17:25,110
then they push their malware into the

385
00:17:23,400 --> 00:17:27,710
<font color="#E5E5E5">web page</font><font color="#CCCCCC"> that was supposed to be</font><font color="#E5E5E5"> loaded</font>

386
00:17:25,109 --> 00:17:31,080
so they injected the link that way

387
00:17:27,710 --> 00:17:33,770
otherwise<font color="#E5E5E5"> what I've seen also what has</font>

388
00:17:31,080 --> 00:17:37,350
been reported it was in China<font color="#E5E5E5"> as well is</font>

389
00:17:33,770 --> 00:17:39,240
moving with a<font color="#CCCCCC"> fakey not be so it at</font>

390
00:17:37,350 --> 00:17:41,790
<font color="#CCCCCC">least</font><font color="#E5E5E5"> for LTE so it's not possible to</font>

391
00:17:39,240 --> 00:17:46,080
have a<font color="#CCCCCC"> faker in OB energy but</font><font color="#E5E5E5"> it's</font>

392
00:17:41,790 --> 00:17:48,930
possible in in a 3g so in 3g if you have

393
00:17:46,080 --> 00:17:50,699
a fake radio interface there is no

394
00:17:48,930 --> 00:17:55,560
mutual authentication between the device

395
00:17:50,700 --> 00:17:58,500
and the radio interface so what you<font color="#E5E5E5"> can</font>

396
00:17:55,560 --> 00:18:01,350
do if if I'm emitting<font color="#CCCCCC"> signals stronger</font>

397
00:17:58,500 --> 00:18:03,810
than the one provided by any mobile

398
00:18:01,350 --> 00:18:05,820
telco then the phone will connect<font color="#CCCCCC"> to me</font>

399
00:18:03,810 --> 00:18:08,909
then I'm not<font color="#E5E5E5"> able to do the full</font>

400
00:18:05,820 --> 00:18:11,010
connection to the so I'm<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to do the</font>

401
00:18:08,910 --> 00:18:13,350
full connection to the telco and what I

402
00:18:11,010 --> 00:18:16,290
can do as well is also push the binary

403
00:18:13,350 --> 00:18:18,719
<font color="#CCCCCC">onto the traffic so that's also</font><font color="#E5E5E5"> one way</font>

404
00:18:16,290 --> 00:18:23,970
that people got infected then you also

405
00:18:18,720 --> 00:18:25,590
have physical attack one feature<font color="#E5E5E5"> is</font>

406
00:18:23,970 --> 00:18:27,690
called<font color="#E5E5E5"> mobile device framework it's a</font>

407
00:18:25,590 --> 00:18:31,050
feature from I us it's what allows you

408
00:18:27,690 --> 00:18:33,930
when you plug your iOS device<font color="#CCCCCC"> on to your</font>

409
00:18:31,050 --> 00:18:36,360
mac pc linux it's a framework so library

410
00:18:33,930 --> 00:18:38,640
that allows you to push application to

411
00:18:36,360 --> 00:18:42,179
push files onto the device it's a good

412
00:18:38,640 --> 00:18:44,850
<font color="#CCCCCC">gene but there</font><font color="#E5E5E5"> are some unknown stuff it</font>

413
00:18:42,180 --> 00:18:47,670
allows you to install application and it

414
00:18:44,850 --> 00:18:49,590
allows you to do some process listing

415
00:18:47,670 --> 00:18:51,030
and to do some stuff<font color="#E5E5E5"> like installing</font>

416
00:18:49,590 --> 00:18:53,340
application can be seen also<font color="#E5E5E5"> as</font>

417
00:18:51,030 --> 00:18:57,540
malicious because one idea would be as

418
00:18:53,340 --> 00:18:59,790
an attacker you<font color="#E5E5E5"> compromised the host so</font>

419
00:18:57,540 --> 00:19:02,100
the desktop and then once the desktop is

420
00:18:59,790 --> 00:19:04,950
compromised once a night iOS device is

421
00:19:02,100 --> 00:19:07,620
plugged in you generate a piece of code

422
00:19:04,950 --> 00:19:10,580
<font color="#CCCCCC">that will push the malware onto the iOS</font>

423
00:19:07,620 --> 00:19:13,979
device that's one way to to install<font color="#CCCCCC"> it</font>

424
00:19:10,580 --> 00:19:16,199
but it's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> working only as USB is also</font>

425
00:19:13,980 --> 00:19:19,140
working through Wi-Fi so once your iOS

426
00:19:16,200 --> 00:19:20,970
device is paired<font color="#CCCCCC"> with your desktop or</font>

427
00:19:19,140 --> 00:19:23,670
<font color="#E5E5E5">laptop once they're on the same Wi-Fi</font>

428
00:19:20,970 --> 00:19:25,560
network and has been burned before then

429
00:19:23,670 --> 00:19:27,750
<font color="#E5E5E5">you are able as an attacker to</font>

430
00:19:25,560 --> 00:19:30,450
push recording through the device and

431
00:19:27,750 --> 00:19:33,000
last summer<font color="#E5E5E5"> also at the black hat I</font>

432
00:19:30,450 --> 00:19:36,270
guess it was a rather with<font color="#E5E5E5"> Nora G in</font><font color="#CCCCCC"> our</font>

433
00:19:33,000 --> 00:19:39,600
drop that allows you if you're within

434
00:19:36,270 --> 00:19:42,990
reach of the Bluetooth signal of an iOS

435
00:19:39,600 --> 00:19:44,459
device then someone can send you an iOS

436
00:19:42,990 --> 00:19:45,980
application that would be installed

437
00:19:44,460 --> 00:19:48,360
automatically once you reboot<font color="#CCCCCC"> your phone</font>

438
00:19:45,980 --> 00:19:50,130
because that was a flow within an

439
00:19:48,360 --> 00:19:54,419
airdrop and you didn't even<font color="#E5E5E5"> have to</font>

440
00:19:50,130 --> 00:19:56,880
accept the incoming file then you have a

441
00:19:54,420 --> 00:19:59,790
third type which is<font color="#E5E5E5"> code injection it</font>

442
00:19:56,880 --> 00:20:02,250
has been an obstacle by fire I I guess

443
00:19:59,790 --> 00:20:05,790
into that for example there is a library

444
00:20:02,250 --> 00:20:07,790
<font color="#E5E5E5">for iOS that is called GS patch and from</font>

445
00:20:05,790 --> 00:20:10,889
JavaScript you can call the objective-c

446
00:20:07,790 --> 00:20:12,690
methods and what some developer are

447
00:20:10,890 --> 00:20:15,450
doing is a two-hot patch some

448
00:20:12,690 --> 00:20:17,520
application they are using GS patch so

449
00:20:15,450 --> 00:20:19,140
they get from the web they download

450
00:20:17,520 --> 00:20:21,840
piece of code and then they all patch

451
00:20:19,140 --> 00:20:23,190
their application their binary so it is

452
00:20:21,840 --> 00:20:25,169
<font color="#CCCCCC">something that can be seen as quite</font>

453
00:20:23,190 --> 00:20:27,180
useful because then you<font color="#E5E5E5"> will you will be</font>

454
00:20:25,170 --> 00:20:29,970
able<font color="#E5E5E5"> to patch your binary but then if</font>

455
00:20:27,180 --> 00:20:32,550
for example this<font color="#CCCCCC"> is done include text so</font>

456
00:20:29,970 --> 00:20:35,760
not in SSL<font color="#E5E5E5"> and you do it from a starbuck</font>

457
00:20:32,550 --> 00:20:38,840
then if an attacker interceptor traffic

458
00:20:35,760 --> 00:20:42,710
then you will be able<font color="#E5E5E5"> to push is</font>

459
00:20:38,840 --> 00:20:42,709
JavaScript code within your application

460
00:20:43,130 --> 00:20:48,300
so this is an example with an

461
00:20:45,930 --> 00:20:50,670
application from<font color="#E5E5E5"> it's a defensive</font>

462
00:20:48,300 --> 00:20:52,409
application from as Imperial what they

463
00:20:50,670 --> 00:20:54,990
did was develop a small application from

464
00:20:52,410 --> 00:20:57,170
for linux that will use actually<font color="#E5E5E5"> this</font>

465
00:20:54,990 --> 00:20:59,330
mobile device framework and will

466
00:20:57,170 --> 00:21:01,860
activate the

467
00:20:59,330 --> 00:21:03,689
installation proxy on the iOS device and

468
00:21:01,860 --> 00:21:05,610
will retrieve the list of all<font color="#E5E5E5"> the</font>

469
00:21:03,690 --> 00:21:07,530
installed application and then try to

470
00:21:05,610 --> 00:21:09,570
match the list<font color="#E5E5E5"> of installed application</font>

471
00:21:07,530 --> 00:21:14,700
against a black list of application

472
00:21:09,570 --> 00:21:16,710
bundle but then again if<font color="#CCCCCC"> we look back I</font>

473
00:21:14,700 --> 00:21:19,890
<font color="#CCCCCC">just said that</font><font color="#E5E5E5"> there is a code signing</font>

474
00:21:16,710 --> 00:21:21,900
validation so even if I an attacker as

475
00:21:19,890 --> 00:21:23,820
an attacker I'm able<font color="#E5E5E5"> to push code into a</font>

476
00:21:21,900 --> 00:21:26,850
device then I still<font color="#E5E5E5"> have the code</font>

477
00:21:23,820 --> 00:21:29,210
signing problem to to bypass on

478
00:21:26,850 --> 00:21:31,740
jailbroken devices that quite easily

479
00:21:29,210 --> 00:21:34,860
because there is no code signing done

480
00:21:31,740 --> 00:21:38,790
anymore but on a standard device that's

481
00:21:34,860 --> 00:21:41,100
still a problem so what<font color="#CCCCCC"> I could do was</font>

482
00:21:38,790 --> 00:21:43,110
sign<font color="#E5E5E5"> my application as a drug developer</font>

483
00:21:41,100 --> 00:21:45,449
but then I'm limited because I can only

484
00:21:43,110 --> 00:21:50,550
target 100 people and then I need<font color="#CCCCCC"> their</font>

485
00:21:45,450 --> 00:21:53,820
email account so I us information there

486
00:21:50,550 --> 00:21:56,220
has<font color="#CCCCCC"> been some some some information some</font>

487
00:21:53,820 --> 00:21:59,820
attacks<font color="#E5E5E5"> don't using this and you also</font>

488
00:21:56,220 --> 00:22:01,980
needed your udid but no access to the

489
00:21:59,820 --> 00:22:04,050
udid is blocked to application by Apple

490
00:22:01,980 --> 00:22:07,530
so it's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> something that's been that's</font>

491
00:22:04,050 --> 00:22:09,389
possible anymore really if you if

492
00:22:07,530 --> 00:22:11,340
attacker are doing a<font color="#E5E5E5"> really narrow and</font>

493
00:22:09,390 --> 00:22:13,770
targeted attack they might use this

494
00:22:11,340 --> 00:22:16,919
technique but it's not widespread at

495
00:22:13,770 --> 00:22:18,780
least at the moment another option is to

496
00:22:16,920 --> 00:22:20,880
<font color="#CCCCCC">use the</font><font color="#E5E5E5"> enterprise developer certificate</font>

497
00:22:18,780 --> 00:22:22,800
because<font color="#E5E5E5"> if you have an application that</font>

498
00:22:20,880 --> 00:22:26,480
is<font color="#E5E5E5"> sign with such a certificate then you</font>

499
00:22:22,800 --> 00:22:31,139
<font color="#E5E5E5">are able to install onto any device but</font>

500
00:22:26,480 --> 00:22:34,140
even<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you're not from this company but</font>

501
00:22:31,140 --> 00:22:37,440
still there<font color="#E5E5E5"> is some limitation so</font><font color="#CCCCCC"> our</font>

502
00:22:34,140 --> 00:22:42,660
validation put in place by<font color="#E5E5E5"> Apple on at</font>

503
00:22:37,440 --> 00:22:44,720
up<font color="#CCCCCC"> to iOS 8 a user at once they download</font>

504
00:22:42,660 --> 00:22:47,400
an application they had to validate that

505
00:22:44,720 --> 00:22:50,010
they want to install an application and

506
00:22:47,400 --> 00:22:51,660
then there was<font color="#E5E5E5"> a second validation to be</font>

507
00:22:50,010 --> 00:22:53,730
done the first time that you launch the

508
00:22:51,660 --> 00:22:55,680
application so does the first time that

509
00:22:53,730 --> 00:22:57,120
you run an application installed and

510
00:22:55,680 --> 00:22:59,370
sign with an enterprise the reverse

511
00:22:57,120 --> 00:23:01,290
certificate it will ask you are you sure

512
00:22:59,370 --> 00:23:03,270
that you want to run this application

513
00:23:01,290 --> 00:23:06,290
signed by and then the<font color="#E5E5E5"> name of the</font>

514
00:23:03,270 --> 00:23:09,720
company so then it's it's up to the user

515
00:23:06,290 --> 00:23:11,550
but for those<font color="#CCCCCC"> of you are doing pen test</font>

516
00:23:09,720 --> 00:23:14,270
and social Engineering's tricks and

517
00:23:11,550 --> 00:23:14,270
stuff like that Oh

518
00:23:14,410 --> 00:23:20,030
itl desk during the holidays for the

519
00:23:17,600 --> 00:23:24,110
family you know that people get tricked

520
00:23:20,030 --> 00:23:27,230
and that's a fact now since iOS 9 it's

521
00:23:24,110 --> 00:23:29,330
more complicated Apple added a new step

522
00:23:27,230 --> 00:23:31,010
so actually<font color="#CCCCCC"> if you install an</font>

523
00:23:29,330 --> 00:23:32,620
application signed with an enterprise

524
00:23:31,010 --> 00:23:35,360
developer certificate and the

525
00:23:32,620 --> 00:23:37,429
certificate has not been imported

526
00:23:35,360 --> 00:23:39,290
through your MDM solution so your device

527
00:23:37,430 --> 00:23:42,140
is<font color="#E5E5E5"> not controlled by a mobile device</font>

528
00:23:39,290 --> 00:23:44,510
management solution which push pushed

529
00:23:42,140 --> 00:23:47,150
the developer certificate then<font color="#E5E5E5"> you have</font>

530
00:23:44,510 --> 00:23:49,879
to go to the settings search<font color="#CCCCCC"> for the</font>

531
00:23:47,150 --> 00:23:51,650
<font color="#CCCCCC">certificate and actually enable it so</font>

532
00:23:49,880 --> 00:23:53,960
you have more steps to<font color="#E5E5E5"> do and that's</font>

533
00:23:51,650 --> 00:23:58,760
<font color="#E5E5E5">their way to try to reduce this problem</font>

534
00:23:53,960 --> 00:24:01,730
by making it needed more step more<font color="#E5E5E5"> steps</font>

535
00:23:58,760 --> 00:24:04,879
so people want to do it but<font color="#CCCCCC"> still if you</font>

536
00:24:01,730 --> 00:24:08,840
<font color="#CCCCCC">offer them a free early day that's the</font>

537
00:24:04,880 --> 00:24:11,270
<font color="#E5E5E5">problem so if</font><font color="#CCCCCC"> we look for the code sign</font>

538
00:24:08,840 --> 00:24:14,600
at an<font color="#CCCCCC"> application in this example I used</font>

539
00:24:11,270 --> 00:24:17,000
the example which was part of the Y

540
00:24:14,600 --> 00:24:19,129
<font color="#E5E5E5">Specter attack which is named a peon if</font>

541
00:24:17,000 --> 00:24:21,620
we looked at it using code sign which<font color="#E5E5E5"> is</font>

542
00:24:19,130 --> 00:24:24,740
an application installed in iOS on OS 10

543
00:24:21,620 --> 00:24:26,750
<font color="#CCCCCC">Tori we seen that the authority is</font>

544
00:24:24,740 --> 00:24:30,250
defined as<font color="#E5E5E5"> an iphone distribution I</font>

545
00:24:26,750 --> 00:24:33,830
don't have<font color="#E5E5E5"> the name of the company so</font>

546
00:24:30,250 --> 00:24:35,570
one impetus is that those company which

547
00:24:33,830 --> 00:24:38,210
are taking part of<font color="#E5E5E5"> G attack are not</font>

548
00:24:35,570 --> 00:24:40,399
willing what happens is apparently<font color="#E5E5E5"> that</font>

549
00:24:38,210 --> 00:24:42,680
the attacker are hacking into those

550
00:24:40,400 --> 00:24:45,710
company stealing sense they're signing

551
00:24:42,680 --> 00:24:47,270
certificates and then doubt signing

552
00:24:45,710 --> 00:24:49,580
their malware with the enterprise

553
00:24:47,270 --> 00:24:54,710
certificate from<font color="#E5E5E5"> this happy this company</font>

554
00:24:49,580 --> 00:24:57,439
and then spreading to user so this<font color="#E5E5E5"> is</font>

555
00:24:54,710 --> 00:25:00,280
something<font color="#E5E5E5"> to take</font><font color="#CCCCCC"> care if you into</font>

556
00:24:57,440 --> 00:25:03,320
<font color="#E5E5E5">information security for an end customer</font>

557
00:25:00,280 --> 00:25:05,270
you're signing certificate our part of

558
00:25:03,320 --> 00:25:07,340
your assets because<font color="#E5E5E5"> if someone breaks</font>

559
00:25:05,270 --> 00:25:10,220
into your one of your developer account

560
00:25:07,340 --> 00:25:12,110
and then is able to download the signing

561
00:25:10,220 --> 00:25:14,480
certificate for the old company then he

562
00:25:12,110 --> 00:25:16,699
is able to develop a piece of code that

563
00:25:14,480 --> 00:25:19,430
is will be trusted on all your iOS

564
00:25:16,700 --> 00:25:21,290
devices<font color="#E5E5E5"> for the company or even further</font>

565
00:25:19,430 --> 00:25:24,130
and then you have a major impact that

566
00:25:21,290 --> 00:25:24,129
you have to to<font color="#E5E5E5"> Humble</font>

567
00:25:24,889 --> 00:25:31,979
but then we said that there has<font color="#CCCCCC"> been in</font>

568
00:25:29,429 --> 00:25:34,710
the news<font color="#CCCCCC"> a malware called ace deceiver</font>

569
00:25:31,980 --> 00:25:37,080
this one was said as a malware bypassing

570
00:25:34,710 --> 00:25:40,740
Apple code signing mechanism to say<font color="#E5E5E5"> okay</font>

571
00:25:37,080 --> 00:25:46,590
it's broken well not<font color="#E5E5E5"> exactly what</font>

572
00:25:40,740 --> 00:25:49,320
happens<font color="#CCCCCC"> actually is that if you read</font>

573
00:25:46,590 --> 00:25:54,240
into the original post made by the Palo

574
00:25:49,320 --> 00:25:56,908
Alto researcher what is made<font color="#E5E5E5"> actually is</font>

575
00:25:54,240 --> 00:25:59,100
that the application had to be at least

576
00:25:56,909 --> 00:26:01,049
once published into the apps into one

577
00:25:59,100 --> 00:26:03,840
app store because there are several app

578
00:26:01,049 --> 00:26:06,690
store that you you pushed your

579
00:26:03,840 --> 00:26:08,820
application into Switzerland UK France

580
00:26:06,690 --> 00:26:10,289
and then you are China and then you

581
00:26:08,820 --> 00:26:13,379
choose which apt all you want<font color="#E5E5E5"> your</font>

582
00:26:10,289 --> 00:26:15,690
application to<font color="#E5E5E5"> be part then what they</font>

583
00:26:13,379 --> 00:26:17,668
did for<font color="#E5E5E5"> example as an attackers say</font><font color="#CCCCCC"> okay</font>

584
00:26:15,690 --> 00:26:20,659
we'll only publish my application into

585
00:26:17,669 --> 00:26:24,230
the Switzerland<font color="#E5E5E5"> App Store and then I</font>

586
00:26:20,659 --> 00:26:28,919
will only activate my malicious code

587
00:26:24,230 --> 00:26:30,659
when the<font color="#CCCCCC"> IP address</font><font color="#E5E5E5"> for on the so we'll</font>

588
00:26:28,919 --> 00:26:33,659
make<font color="#CCCCCC"> a call back to a work</font><font color="#E5E5E5"> service and</font>

589
00:26:30,659 --> 00:26:36,269
if the web service is not sending me

590
00:26:33,659 --> 00:26:38,730
back a token a specific token I will not

591
00:26:36,269 --> 00:26:41,639
activate the malicious code so what you

592
00:26:38,730 --> 00:26:44,220
<font color="#E5E5E5">will do is using geoip and say okay if</font>

593
00:26:41,639 --> 00:26:45,689
<font color="#E5E5E5">the device IP is not within Switzerland</font>

594
00:26:44,220 --> 00:26:48,450
I will not<font color="#E5E5E5"> activate the malicious code</font>

595
00:26:45,690 --> 00:26:52,200
if let's say I want only<font color="#E5E5E5"> to to address</font>

596
00:26:48,450 --> 00:26:54,600
<font color="#E5E5E5">to to attack people in Switzerland so</font>

597
00:26:52,200 --> 00:26:57,509
what did the attacker was since all the

598
00:26:54,600 --> 00:27:00,269
the sandbox made by apple are hosted

599
00:26:57,509 --> 00:27:02,070
into the US but they did was<font color="#E5E5E5"> okay if the</font>

600
00:27:00,269 --> 00:27:03,720
IP address<font color="#E5E5E5"> is coming from the US and</font>

601
00:27:02,070 --> 00:27:07,590
since we know that we're targeting only

602
00:27:03,720 --> 00:27:09,149
this country so no we will not send<font color="#E5E5E5"> the</font>

603
00:27:07,590 --> 00:27:11,668
token and the malicious code won't be

604
00:27:09,149 --> 00:27:14,189
executed and since<font color="#CCCCCC"> Apple has too many</font>

605
00:27:11,669 --> 00:27:16,440
application to review each day it's not

606
00:27:14,190 --> 00:27:18,869
<font color="#E5E5E5">possible to do to do that by end so</font>

607
00:27:16,440 --> 00:27:23,820
either they do it automatically or they

608
00:27:18,869 --> 00:27:26,990
can use the code analysis stuff so it

609
00:27:23,820 --> 00:27:30,240
should be even easier for them today

610
00:27:26,990 --> 00:27:32,879
<font color="#E5E5E5">because if as a developer you enable the</font>

611
00:27:30,240 --> 00:27:36,149
cuts inning what you will do is not push

612
00:27:32,879 --> 00:27:37,709
the compiled binary but no from iOS 9

613
00:27:36,149 --> 00:27:39,989
what you will do if you enable

614
00:27:37,710 --> 00:27:43,470
concerning is actually only compile it

615
00:27:39,990 --> 00:27:46,409
to have half the binary which means that

616
00:27:43,470 --> 00:27:49,409
<font color="#E5E5E5">for llvm it will only get the</font><font color="#CCCCCC"> llvm</font>

617
00:27:46,409 --> 00:27:51,120
interpret intermediate language and then

618
00:27:49,409 --> 00:27:53,340
determine that language is pushed to

619
00:27:51,120 --> 00:27:55,590
apple and then what they do with code

620
00:27:53,340 --> 00:28:00,949
signing the idea is not to send you as a

621
00:27:55,590 --> 00:28:04,529
user auto binary for arm v7 arm v9

622
00:28:00,950 --> 00:28:07,020
<font color="#E5E5E5">64-bit 32 bits that will only compiler</font>

623
00:28:04,529 --> 00:28:09,779
you the specific binary for your device

624
00:28:07,020 --> 00:28:13,020
<font color="#E5E5E5">and that's why they did so they take</font>

625
00:28:09,779 --> 00:28:15,659
only the<font color="#E5E5E5"> interpretation intermediate</font>

626
00:28:13,020 --> 00:28:17,490
representation and then compile the

627
00:28:15,659 --> 00:28:19,679
application for specific piece of<font color="#E5E5E5"> code</font>

628
00:28:17,490 --> 00:28:21,360
so for them it should be easier if<font color="#E5E5E5"> you</font>

629
00:28:19,679 --> 00:28:24,840
seen the presentation before about a

630
00:28:21,360 --> 00:28:27,779
static analysis from<font color="#CCCCCC"> llvm i er it should</font>

631
00:28:24,840 --> 00:28:32,970
be<font color="#E5E5E5"> easier to recreate the IST and then</font>

632
00:28:27,779 --> 00:28:36,120
from this AST so the<font color="#CCCCCC"> the code 3 country</font>

633
00:28:32,970 --> 00:28:37,950
of the application then to see if a

634
00:28:36,120 --> 00:28:39,418
malicious application is cold or<font color="#E5E5E5"> if</font>

635
00:28:37,950 --> 00:28:40,890
something malicious happens but still

636
00:28:39,419 --> 00:28:43,770
<font color="#E5E5E5">there is many way to do to do</font>

637
00:28:40,890 --> 00:28:46,169
obfuscation on iOS especially<font color="#E5E5E5"> since the</font>

638
00:28:43,770 --> 00:28:49,379
language objective-c is a reflect

639
00:28:46,169 --> 00:28:54,750
reflective then you can call<font color="#CCCCCC"> application</font>

640
00:28:49,380 --> 00:28:57,480
by using the name and if you obfuscate

641
00:28:54,750 --> 00:29:00,390
the name and you you<font color="#E5E5E5"> get the token so</font>

642
00:28:57,480 --> 00:29:03,179
the key to delphos<font color="#CCCCCC"> Kate the name of the</font>

643
00:29:00,390 --> 00:29:07,260
function only on specific case then you

644
00:29:03,179 --> 00:29:09,149
will you<font color="#E5E5E5"> will not see see that and in</font>

645
00:29:07,260 --> 00:29:12,510
<font color="#E5E5E5">the case of</font><font color="#CCCCCC"> age deceiver what they did</font>

646
00:29:09,149 --> 00:29:14,580
then was<font color="#E5E5E5"> on top of that what they did so</font>

647
00:29:12,510 --> 00:29:17,429
their binary was pushed at least once by

648
00:29:14,580 --> 00:29:19,678
<font color="#E5E5E5">Apple but then once Apple revoked those</font>

649
00:29:17,429 --> 00:29:23,179
applications with it was not anymore on

650
00:29:19,679 --> 00:29:26,340
any store but still one day that the

651
00:29:23,179 --> 00:29:30,390
attacker had one of their binary signed

652
00:29:26,340 --> 00:29:33,449
by by Apple so what they do they did was

653
00:29:30,390 --> 00:29:35,309
to use a flow within the installation

654
00:29:33,450 --> 00:29:39,600
when you install an application from

655
00:29:35,309 --> 00:29:41,428
your PC or Mac using iTunes because you

656
00:29:39,600 --> 00:29:43,230
could in this case<font color="#CCCCCC"> you are able to</font><font color="#E5E5E5"> do a</font>

657
00:29:41,429 --> 00:29:45,390
man-in-the-middle attack and then you

658
00:29:43,230 --> 00:29:47,669
are able<font color="#E5E5E5"> to bypass the check that once</font>

659
00:29:45,390 --> 00:29:49,200
the application is installed it checked

660
00:29:47,669 --> 00:29:50,250
by<font color="#CCCCCC"> Apple if the application is still</font>

661
00:29:49,200 --> 00:29:52,440
valid or not

662
00:29:50,250 --> 00:29:57,630
so in this case they do the man in the

663
00:29:52,440 --> 00:29:59,820
<font color="#E5E5E5">middle and what they do was make the iOS</font>

664
00:29:57,630 --> 00:30:02,430
device believed that the application is

665
00:29:59,820 --> 00:30:05,310
still valid for<font color="#E5E5E5"> Apple and that's all</font>

666
00:30:02,430 --> 00:30:07,980
they push<font color="#CCCCCC"> it to you</font><font color="#E5E5E5"> and the application</font>

667
00:30:05,310 --> 00:30:10,290
<font color="#E5E5E5">is encrypted but when you installed it</font>

668
00:30:07,980 --> 00:30:12,600
from itunes u you get the encryption key

669
00:30:10,290 --> 00:30:16,170
is part of the bundle so they push you

670
00:30:12,600 --> 00:30:19,439
directly to to the bundle so that's one

671
00:30:16,170 --> 00:30:21,810
way<font color="#E5E5E5"> to to install</font><font color="#CCCCCC"> it into my issues so</font>

672
00:30:19,440 --> 00:30:26,520
to install a malicious application to a

673
00:30:21,810 --> 00:30:30,360
device know if we looked into the the

674
00:30:26,520 --> 00:30:32,760
actions the first thing we can do is

675
00:30:30,360 --> 00:30:34,800
look at to the application deployed into

676
00:30:32,760 --> 00:30:36,900
the<font color="#CCCCCC"> App Store really to see what is</font>

677
00:30:34,800 --> 00:30:38,490
possible on the App Store<font color="#CCCCCC"> and what is</font>

678
00:30:36,900 --> 00:30:40,950
possible outside<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> App Store on</font>

679
00:30:38,490 --> 00:30:43,410
jailbroken device or<font color="#E5E5E5"> Enterprise sign</font>

680
00:30:40,950 --> 00:30:44,970
<font color="#E5E5E5">application so in the case of App Store</font>

681
00:30:43,410 --> 00:30:46,860
for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> let's say you</font><font color="#E5E5E5"> want to do</font>

682
00:30:44,970 --> 00:30:49,920
audio recording<font color="#CCCCCC"> it's a classical case</font>

683
00:30:46,860 --> 00:30:52,590
when<font color="#CCCCCC"> you can scare really the sea level</font>

684
00:30:49,920 --> 00:30:55,590
<font color="#CCCCCC">because if you say that in one of</font><font color="#E5E5E5"> the</font>

685
00:30:52,590 --> 00:31:00,120
meeting you are able to to catch what is

686
00:30:55,590 --> 00:31:03,000
said then for them it's a big<font color="#E5E5E5"> deal so</font>

687
00:31:00,120 --> 00:31:06,060
you have an API on the app for any

688
00:31:03,000 --> 00:31:08,160
application on iOS and from this API

689
00:31:06,060 --> 00:31:10,669
what you can do is<font color="#E5E5E5"> actually record with</font>

690
00:31:08,160 --> 00:31:13,440
the voice so from<font color="#CCCCCC"> the from the make</font>

691
00:31:10,670 --> 00:31:16,680
application like Shazam are doing it but

692
00:31:13,440 --> 00:31:18,300
watch what you will say see is that if

693
00:31:16,680 --> 00:31:20,580
you put the application in the

694
00:31:18,300 --> 00:31:22,290
background is still able to<font color="#E5E5E5"> record the</font>

695
00:31:20,580 --> 00:31:26,370
audio but then the user will<font color="#E5E5E5"> have a</font>

696
00:31:22,290 --> 00:31:27,750
ribbon blue or<font color="#E5E5E5"> green ribbon that will be</font>

697
00:31:26,370 --> 00:31:29,370
highlighted saying you that<font color="#E5E5E5"> the</font>

698
00:31:27,750 --> 00:31:32,040
application is recording audio in

699
00:31:29,370 --> 00:31:35,310
<font color="#E5E5E5">background so it's not that stealth for</font>

700
00:31:32,040 --> 00:31:37,710
a from an attacker so this one on the

701
00:31:35,310 --> 00:31:39,960
app store it's possible<font color="#CCCCCC"> but not the</font>

702
00:31:37,710 --> 00:31:41,630
stealthy then you have the key logging

703
00:31:39,960 --> 00:31:47,900
keylogging is also a big stuff

704
00:31:41,630 --> 00:31:50,640
especially since iOS 8 iOS 9 8 broke the

705
00:31:47,900 --> 00:31:52,710
concept of the extension so you can have

706
00:31:50,640 --> 00:31:54,480
extension for the browser like for

707
00:31:52,710 --> 00:31:57,330
<font color="#E5E5E5">example you have ad blocker that are</font>

708
00:31:54,480 --> 00:32:01,310
using extent as<font color="#E5E5E5"> a extension and you also</font>

709
00:31:57,330 --> 00:32:03,899
have keyboard keyboards like<font color="#E5E5E5"> Swift and</font>

710
00:32:01,310 --> 00:32:06,960
then at the<font color="#E5E5E5"> beginning it</font>

711
00:32:03,900 --> 00:32:09,600
say that an extension is separated from

712
00:32:06,960 --> 00:32:11,670
<font color="#E5E5E5">the standard application so there is no</font>

713
00:32:09,600 --> 00:32:13,260
<font color="#E5E5E5">way for an extension to store file on</font>

714
00:32:11,670 --> 00:32:15,240
disk and there is no way for an

715
00:32:13,260 --> 00:32:17,220
extension to communicate with<font color="#CCCCCC"> the</font>

716
00:32:15,240 --> 00:32:19,170
internet<font color="#E5E5E5"> because there is a big fear</font>

717
00:32:17,220 --> 00:32:21,510
because if you<font color="#E5E5E5"> install the let's say</font>

718
00:32:19,170 --> 00:32:24,660
swift keyboard and you don't<font color="#E5E5E5"> trust Swift</font>

719
00:32:21,510 --> 00:32:26,990
what do you<font color="#CCCCCC"> do because they are</font>

720
00:32:24,660 --> 00:32:29,730
providing the keyboard so there<font color="#E5E5E5"> is one</font>

721
00:32:26,990 --> 00:32:31,920
<font color="#E5E5E5">stuff that is put in place by Apple if</font>

722
00:32:29,730 --> 00:32:34,860
you have something<font color="#CCCCCC"> that is a</font><font color="#E5E5E5"> password</font>

723
00:32:31,920 --> 00:32:37,350
prompt it will actually be the standard

724
00:32:34,860 --> 00:32:39,750
iOS keyboard that will be prompted it's

725
00:32:37,350 --> 00:32:44,040
not the one that you installed but the

726
00:32:39,750 --> 00:32:48,360
the text input has to be marked as a

727
00:32:44,040 --> 00:32:50,790
password field by a developer but there

728
00:32:48,360 --> 00:32:52,679
is<font color="#E5E5E5"> also a problem is that they say</font><font color="#CCCCCC"> okay</font>

729
00:32:50,790 --> 00:32:54,629
<font color="#E5E5E5">but it's too complicated let's say that</font>

730
00:32:52,680 --> 00:32:56,340
the application would like to the

731
00:32:54,630 --> 00:32:59,220
extension would like to access the

732
00:32:56,340 --> 00:33:01,260
internet so is able to send what you

733
00:32:59,220 --> 00:33:03,840
type do some machine learning on it and

734
00:33:01,260 --> 00:33:07,140
then do some<font color="#E5E5E5"> text prediction to get you</font>

735
00:33:03,840 --> 00:33:09,179
more<font color="#E5E5E5"> words easier and actually</font><font color="#CCCCCC"> that's</font>

736
00:33:07,140 --> 00:33:12,570
what<font color="#CCCCCC"> swiftkey is doing or author</font>

737
00:33:09,180 --> 00:33:15,870
extension like it so then if you go into

738
00:33:12,570 --> 00:33:17,909
the settings and allow full access for

739
00:33:15,870 --> 00:33:19,919
an extension then the extension is able

740
00:33:17,910 --> 00:33:22,470
to<font color="#CCCCCC"> access the file system and access the</font>

741
00:33:19,920 --> 00:33:25,650
internet so<font color="#E5E5E5"> know everything that you</font>

742
00:33:22,470 --> 00:33:28,110
type into this<font color="#E5E5E5"> keyboard can be sent the</font>

743
00:33:25,650 --> 00:33:30,930
outside world and actually<font color="#E5E5E5"> that's one of</font>

744
00:33:28,110 --> 00:33:33,270
the trick that use a hacking team in one

745
00:33:30,930 --> 00:33:38,600
of their tools for our us that's how

746
00:33:33,270 --> 00:33:38,600
they they did it with sign application

747
00:33:39,890 --> 00:33:46,680
then there is<font color="#CCCCCC"> the provide a p.i okay</font>

748
00:33:43,980 --> 00:33:49,080
this<font color="#CCCCCC"> has been in the news last year more</font>

749
00:33:46,680 --> 00:33:50,790
<font color="#E5E5E5">than 200 of iOS application there are</font>

750
00:33:49,080 --> 00:33:53,699
stealing information they are<font color="#CCCCCC"> using the</font>

751
00:33:50,790 --> 00:33:55,980
provided<font color="#CCCCCC"> I what is the previa p I so</font>

752
00:33:53,700 --> 00:33:58,080
actually<font color="#CCCCCC"> it's only stuff that has been</font>

753
00:33:55,980 --> 00:33:59,670
forbidden by<font color="#E5E5E5"> Apple in</font><font color="#CCCCCC"> the developer</font>

754
00:33:58,080 --> 00:34:01,889
contract they say you shouldn't<font color="#E5E5E5"> call</font>

755
00:33:59,670 --> 00:34:04,140
<font color="#E5E5E5">everything that is private so its</font>

756
00:34:01,890 --> 00:34:08,810
symbols that are not directly published

757
00:34:04,140 --> 00:34:08,810
or that's it are not documented

758
00:34:10,010 --> 00:34:16,200
but still it should still be<font color="#CCCCCC"> into the</font>

759
00:34:13,830 --> 00:34:18,360
sandbox so all of the calls to the

760
00:34:16,199 --> 00:34:20,520
previa PA should be blocked by<font color="#E5E5E5"> the Sun</font>

761
00:34:18,360 --> 00:34:22,440
box but by default but as I said before

762
00:34:20,520 --> 00:34:25,469
there has been some flow into the<font color="#E5E5E5"> Sun</font>

763
00:34:22,440 --> 00:34:32,909
box and now Apple needs to<font color="#E5E5E5"> be getting</font>

764
00:34:25,469 --> 00:34:36,000
around all those those flow those to get

765
00:34:32,909 --> 00:34:38,399
access<font color="#E5E5E5"> to a specific call as I said you</font>

766
00:34:36,000 --> 00:34:41,190
<font color="#E5E5E5">need an entitlement like I'd explained</font>

767
00:34:38,400 --> 00:34:43,110
before you need<font color="#E5E5E5"> to define said</font><font color="#CCCCCC"> okay</font>

768
00:34:41,190 --> 00:34:45,480
request access to the calendar our

769
00:34:43,110 --> 00:34:47,400
request access to the address book there

770
00:34:45,480 --> 00:34:51,780
is<font color="#CCCCCC"> a whole list that can be found on the</font>

771
00:34:47,400 --> 00:34:54,210
new<font color="#E5E5E5"> us or stand book the the guy writing</font>

772
00:34:51,780 --> 00:34:57,750
this book made a whole list and then you

773
00:34:54,210 --> 00:35:00,210
can see on a base system based I<font color="#E5E5E5"> OS</font>

774
00:34:57,750 --> 00:35:03,900
system which application is using which

775
00:35:00,210 --> 00:35:07,350
entitlement this is validated by<font color="#E5E5E5"> Apple</font>

776
00:35:03,900 --> 00:35:09,270
and then<font color="#CCCCCC"> enforce by a seatbelt so</font>

777
00:35:07,350 --> 00:35:12,690
prevent<font color="#E5E5E5"> API does not mean that you can</font>

778
00:35:09,270 --> 00:35:15,000
break out of the sandbox is not that

779
00:35:12,690 --> 00:35:19,200
simple still there have been some flow

780
00:35:15,000 --> 00:35:21,300
but is not<font color="#E5E5E5"> is not that easy and there is</font>

781
00:35:19,200 --> 00:35:23,339
<font color="#E5E5E5">also a problem is that for Apple to</font>

782
00:35:21,300 --> 00:35:25,320
detect if you're using actually if you

783
00:35:23,340 --> 00:35:27,240
are truly using previa tapey I or not is

784
00:35:25,320 --> 00:35:29,370
not that easy<font color="#CCCCCC"> because either explain if</font>

785
00:35:27,240 --> 00:35:33,359
you said<font color="#E5E5E5"> okay we'll only call the previa</font>

786
00:35:29,370 --> 00:35:35,279
if my device is located in<font color="#E5E5E5"> the UK but I</font>

787
00:35:33,360 --> 00:35:37,410
my user in Switzerland then it won't

788
00:35:35,280 --> 00:35:39,860
work your code won't be called so<font color="#CCCCCC"> for</font>

789
00:35:37,410 --> 00:35:41,910
<font color="#E5E5E5">Apple is not that easy to to check and</font>

790
00:35:39,860 --> 00:35:44,400
there has been<font color="#E5E5E5"> some flow into the</font>

791
00:35:41,910 --> 00:35:48,060
mechanism like<font color="#E5E5E5"> I said with Stefan answer</font>

792
00:35:44,400 --> 00:35:51,480
so unique application that acted to list

793
00:35:48,060 --> 00:35:53,310
also applications things like that in

794
00:35:51,480 --> 00:35:55,530
this case if we<font color="#E5E5E5"> took one of the malware</font>

795
00:35:53,310 --> 00:35:58,259
also from why<font color="#CCCCCC"> Spectre which is called no</font>

796
00:35:55,530 --> 00:36:00,450
icon if you check<font color="#E5E5E5"> and to the right that</font>

797
00:35:58,260 --> 00:36:04,500
<font color="#E5E5E5">is asking there is a rights to install</font>

798
00:36:00,450 --> 00:36:07,259
bros and install and remove archive so

799
00:36:04,500 --> 00:36:10,200
this application is basically able to

800
00:36:07,260 --> 00:36:14,310
install also application so this

801
00:36:10,200 --> 00:36:18,379
requires the April provide provides

802
00:36:14,310 --> 00:36:18,380
mobile installed<font color="#E5E5E5"> allowed spi</font>

803
00:36:18,900 --> 00:36:24,849
entitlement with the install<font color="#E5E5E5"> and so on</font>

804
00:36:21,780 --> 00:36:26,260
is something<font color="#CCCCCC"> if you try to put it to</font>

805
00:36:24,849 --> 00:36:28,540
your application and push your

806
00:36:26,260 --> 00:36:30,099
application<font color="#CCCCCC"> on to the app store this is</font>

807
00:36:28,540 --> 00:36:31,540
a big no for Apple this is<font color="#E5E5E5"> something</font>

808
00:36:30,099 --> 00:36:33,250
<font color="#CCCCCC">that they can detect and they will block</font>

809
00:36:31,540 --> 00:36:35,619
your application this is not not

810
00:36:33,250 --> 00:36:37,869
complicated for them but then there are

811
00:36:35,619 --> 00:36:42,160
also type of private api that don't need

812
00:36:37,869 --> 00:36:45,940
specific entitlements if you want list

813
00:36:42,160 --> 00:36:50,410
of the previa you can use there is Geeta

814
00:36:45,940 --> 00:36:52,900
made by<font color="#E5E5E5"> Nicola stereo on Swiss fellow</font>

815
00:36:50,410 --> 00:36:56,140
who made a full list of all the private

816
00:36:52,900 --> 00:37:00,160
function or on a jailbroken device what

817
00:36:56,140 --> 00:37:02,259
you can do is use the class stamp d y LD

818
00:37:00,160 --> 00:37:04,690
and then<font color="#CCCCCC"> dump all the classes on a</font>

819
00:37:02,260 --> 00:37:06,970
jailbroken device and then you from that

820
00:37:04,690 --> 00:37:11,260
from that you<font color="#CCCCCC"> can check for all the</font>

821
00:37:06,970 --> 00:37:15,220
symbols within private stuff that are

822
00:37:11,260 --> 00:37:17,170
not published if you want to<font color="#E5E5E5"> call previa</font>

823
00:37:15,220 --> 00:37:19,390
tapey I it can be called<font color="#E5E5E5"> either directly</font>

824
00:37:17,170 --> 00:37:22,240
it can be done through<font color="#E5E5E5"> the</font><font color="#CCCCCC"> unopened</font><font color="#E5E5E5"> dl</font>

825
00:37:19,390 --> 00:37:25,000
sim if you developed it<font color="#CCCCCC"> C and then</font>

826
00:37:22,240 --> 00:37:26,950
otherwise use objective c for example if

827
00:37:25,000 --> 00:37:28,780
it's called directly if you look into

828
00:37:26,950 --> 00:37:31,058
the<font color="#E5E5E5"> import for our binary you will see</font>

829
00:37:28,780 --> 00:37:33,329
it directly Michael devout and then if

830
00:37:31,059 --> 00:37:35,950
you using reflection what you can do is

831
00:37:33,329 --> 00:37:38,200
I'm using actually the string and I'm

832
00:37:35,950 --> 00:37:40,299
building like in<font color="#E5E5E5"> Java in objective c you</font>

833
00:37:38,200 --> 00:37:42,339
can use reflection and then you are able

834
00:37:40,299 --> 00:37:44,589
<font color="#E5E5E5">to get a class from the name of the</font>

835
00:37:42,339 --> 00:37:47,619
class<font color="#E5E5E5"> and then get a pointer to a method</font>

836
00:37:44,589 --> 00:37:50,828
on by a class by using its name as well

837
00:37:47,619 --> 00:37:52,809
so in this case I've<font color="#E5E5E5"> put all the strings</font>

838
00:37:50,829 --> 00:37:56,099
in<font color="#E5E5E5"> creo text based on attackers they can</font>

839
00:37:52,809 --> 00:38:00,010
obfuscate those string so simple<font color="#CCCCCC"> x or or</font>

840
00:37:56,099 --> 00:38:02,040
rod<font color="#CCCCCC"> searching all stuff like that in the</font>

841
00:38:00,010 --> 00:38:04,599
case<font color="#E5E5E5"> of in-house application is</font>

842
00:38:02,040 --> 00:38:06,549
different because entitlement won't be

843
00:38:04,599 --> 00:38:08,770
checked by Apple since is not going<font color="#E5E5E5"> to</font>

844
00:38:06,549 --> 00:38:10,420
<font color="#E5E5E5">the app store so if</font><font color="#CCCCCC"> if there's an</font>

845
00:38:08,770 --> 00:38:12,280
attacker you are able<font color="#E5E5E5"> to sign an</font>

846
00:38:10,420 --> 00:38:15,040
application as<font color="#E5E5E5"> enterprise the Ripper</font>

847
00:38:12,280 --> 00:38:17,710
certificate then<font color="#E5E5E5"> you put anything you</font>

848
00:38:15,040 --> 00:38:19,750
want<font color="#CCCCCC"> into your code into</font><font color="#E5E5E5"> your</font>

849
00:38:17,710 --> 00:38:23,290
entitlements and that's how<font color="#E5E5E5"> they are</font>

850
00:38:19,750 --> 00:38:25,730
<font color="#CCCCCC">able to made malware that are able</font><font color="#E5E5E5"> to</font>

851
00:38:23,290 --> 00:38:28,009
install other applications to the

852
00:38:25,730 --> 00:38:31,880
the device even<font color="#CCCCCC"> if the device is</font><font color="#E5E5E5"> not</font>

853
00:38:28,010 --> 00:38:34,430
jailbroken and then it allows you more

854
00:38:31,880 --> 00:38:36,350
possibilities that what was using by the

855
00:38:34,430 --> 00:38:39,109
white<font color="#CCCCCC"> Specter attack for example they</font>

856
00:38:36,350 --> 00:38:41,779
are able<font color="#CCCCCC"> to access the mg and ma of the</font>

857
00:38:39,109 --> 00:38:44,330
terminal and that's why they said but it

858
00:38:41,780 --> 00:38:45,710
the application are<font color="#CCCCCC"> coked by getting</font>

859
00:38:44,330 --> 00:38:47,960
private information about the user

860
00:38:45,710 --> 00:38:51,080
because if you know the<font color="#E5E5E5"> MZ</font><font color="#CCCCCC"> and email of</font>

861
00:38:47,960 --> 00:38:53,750
a user<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> it's pretty strong to</font>

862
00:38:51,080 --> 00:38:56,420
identify someone you can also install

863
00:38:53,750 --> 00:38:58,130
application and access also<font color="#E5E5E5"> provide</font>

864
00:38:56,420 --> 00:39:00,170
information like the mac address of the

865
00:38:58,130 --> 00:39:02,630
device and if you get the mac address

866
00:39:00,170 --> 00:39:05,600
then you can also infer some some stuff

867
00:39:02,630 --> 00:39:07,580
about the<font color="#E5E5E5"> guy now there is also another</font>

868
00:39:05,600 --> 00:39:10,880
type of malware which is<font color="#CCCCCC"> known</font>

869
00:39:07,580 --> 00:39:13,009
application-based maybe if you're using

870
00:39:10,880 --> 00:39:14,450
iOS devices and you have mobile device

871
00:39:13,010 --> 00:39:16,340
management solution you're pushing

872
00:39:14,450 --> 00:39:18,529
<font color="#E5E5E5">profile configuration profile onto</font>

873
00:39:16,340 --> 00:39:20,500
<font color="#E5E5E5">device most of the time is to configure</font>

874
00:39:18,530 --> 00:39:23,750
the email access is to configure the VPN

875
00:39:20,500 --> 00:39:25,850
to install corporate certificate<font color="#E5E5E5"> onto</font>

876
00:39:23,750 --> 00:39:28,550
the devices but as an attacker it can

877
00:39:25,850 --> 00:39:31,100
also be seen or used another way an

878
00:39:28,550 --> 00:39:33,890
attacker<font color="#CCCCCC"> can use configuration profile</font>

879
00:39:31,100 --> 00:39:35,660
to install a proxy and say to the iOS

880
00:39:33,890 --> 00:39:39,589
device from now on you go through this

881
00:39:35,660 --> 00:39:42,529
proxy and also it is able<font color="#CCCCCC"> to install</font><font color="#E5E5E5"> as</font>

882
00:39:39,590 --> 00:39:45,680
a new CA so if you go<font color="#E5E5E5"> even if your</font>

883
00:39:42,530 --> 00:39:47,690
application is using SSL or TLS if the

884
00:39:45,680 --> 00:39:50,000
<font color="#E5E5E5">CA is installed and the application is</font>

885
00:39:47,690 --> 00:39:54,770
not performing a strong validation of

886
00:39:50,000 --> 00:39:57,260
the certificate<font color="#E5E5E5"> then is able to even get</font>

887
00:39:54,770 --> 00:40:00,440
access to your ssl/tls communications

888
00:39:57,260 --> 00:40:03,980
and then also we can<font color="#E5E5E5"> install something</font>

889
00:40:00,440 --> 00:40:07,160
the certificate to deploy application

890
00:40:03,980 --> 00:40:11,869
later on so this has also been seen in

891
00:40:07,160 --> 00:40:15,020
the in<font color="#CCCCCC"> the world know quickly the</font>

892
00:40:11,869 --> 00:40:18,560
<font color="#CCCCCC">projection and detection so detection is</font>

893
00:40:15,020 --> 00:40:22,460
not that easy<font color="#E5E5E5"> as as on standard</font>

894
00:40:18,560 --> 00:40:26,390
endpoints like Windows and Mac because

895
00:40:22,460 --> 00:40:29,540
the system is there is less privileged

896
00:40:26,390 --> 00:40:31,279
so the<font color="#CCCCCC"> privileged are more strictly</font>

897
00:40:29,540 --> 00:40:33,800
enforced and<font color="#E5E5E5"> you cannot develop</font>

898
00:40:31,280 --> 00:40:36,500
something like on Windows most of the AV

899
00:40:33,800 --> 00:40:36,990
or<font color="#E5E5E5"> Linux they are running using a kernel</font>

900
00:40:36,500 --> 00:40:39,270
module

901
00:40:36,990 --> 00:40:41,220
but on the<font color="#E5E5E5"> US you can come to apple and</font>

902
00:40:39,270 --> 00:40:43,680
say okay I've develop a kernel module to

903
00:40:41,220 --> 00:40:45,810
do an anti-malware solution that won't

904
00:40:43,680 --> 00:40:48,000
say<font color="#CCCCCC"> okay but yeah we have the</font>

905
00:40:45,810 --> 00:40:50,310
application whitelisting so we don't

906
00:40:48,000 --> 00:40:53,190
need that so basically there is no way

907
00:40:50,310 --> 00:40:55,590
for someone at the moment to publish

908
00:40:53,190 --> 00:40:57,300
such a code so that means<font color="#E5E5E5"> that the AV</font>

909
00:40:55,590 --> 00:41:02,070
rendered the same level<font color="#E5E5E5"> as</font><font color="#CCCCCC"> the malware</font>

910
00:40:57,300 --> 00:41:03,480
so this<font color="#CCCCCC"> is a bit of a trouble on the</font>

911
00:41:02,070 --> 00:41:06,180
network side this<font color="#E5E5E5"> is even</font><font color="#CCCCCC"> more</font>

912
00:41:03,480 --> 00:41:09,690
<font color="#E5E5E5">complicated because on standard devices</font>

913
00:41:06,180 --> 00:41:12,359
you might say<font color="#E5E5E5"> okay I will use my IDs my</font>

914
00:41:09,690 --> 00:41:16,170
proxy logs my anything that you have on

915
00:41:12,360 --> 00:41:17,940
on to your network monitoring stuff and

916
00:41:16,170 --> 00:41:20,580
drew network but the prime of mobile

917
00:41:17,940 --> 00:41:22,980
devices is that they mobile so they

918
00:41:20,580 --> 00:41:24,810
<font color="#E5E5E5">might connect from the conference am</font><font color="#CCCCCC"> I</font>

919
00:41:22,980 --> 00:41:27,119
connect from the starbuck so there is<font color="#CCCCCC"> a</font>

920
00:41:24,810 --> 00:41:29,009
<font color="#E5E5E5">lot of point that you might not cover so</font>

921
00:41:27,119 --> 00:41:32,750
one idea will be to have an always-on

922
00:41:29,010 --> 00:41:35,820
VPN there are some provider doing that

923
00:41:32,750 --> 00:41:38,850
and then you route all of your traffic

924
00:41:35,820 --> 00:41:42,480
to using the VPN through your IDs but

925
00:41:38,850 --> 00:41:44,430
<font color="#CCCCCC">your IDs is published so through the VPN</font>

926
00:41:42,480 --> 00:41:46,350
is one way<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> it but then</font><font color="#E5E5E5"> you have a</font>

927
00:41:44,430 --> 00:41:48,299
<font color="#CCCCCC">problem with the if it's a bring your</font>

928
00:41:46,350 --> 00:41:50,310
own device it also<font color="#E5E5E5"> means that the user</font>

929
00:41:48,300 --> 00:41:52,680
everything they do will go through this

930
00:41:50,310 --> 00:41:55,560
VPN but then you have also container

931
00:41:52,680 --> 00:41:57,899
like good or<font color="#E5E5E5"> also type of container sis</font>

932
00:41:55,560 --> 00:42:01,560
my soft then they are<font color="#E5E5E5"> doing specific</font>

933
00:41:57,900 --> 00:42:02,790
flow only<font color="#E5E5E5"> for for the application they</font>

934
00:42:01,560 --> 00:42:08,640
are<font color="#E5E5E5"> setting the VPN only for</font>

935
00:42:02,790 --> 00:42:11,279
applications so if you want the ideas

936
00:42:08,640 --> 00:42:14,580
like feature I've looked for example but

937
00:42:11,280 --> 00:42:16,890
you came<font color="#CCCCCC"> back</font><font color="#E5E5E5"> to one year ago I looked</font>

938
00:42:14,580 --> 00:42:20,640
into what was<font color="#E5E5E5"> presented into emerging</font>

939
00:42:16,890 --> 00:42:23,129
threat type of IGS alert the<font color="#CCCCCC"> rule set</font>

940
00:42:20,640 --> 00:42:25,589
that they provide<font color="#E5E5E5"> for</font><font color="#CCCCCC"> suricata and snot</font>

941
00:42:23,130 --> 00:42:28,050
but from the they have some mobile

942
00:42:25,590 --> 00:42:30,450
malware type of rules but<font color="#E5E5E5"> mostly there</font>

943
00:42:28,050 --> 00:42:33,000
are only for android so<font color="#CCCCCC"> there are not a</font>

944
00:42:30,450 --> 00:42:35,970
lot<font color="#CCCCCC"> or any of them for</font><font color="#E5E5E5"> iOS I may be</font>

945
00:42:33,000 --> 00:42:38,790
<font color="#E5E5E5">wrong in that and there are also stuff</font>

946
00:42:35,970 --> 00:42:43,169
like log out who is doing also shred

947
00:42:38,790 --> 00:42:45,119
intelligence into this area then what

948
00:42:43,170 --> 00:42:47,520
you will all what you can<font color="#E5E5E5"> also do from</font>

949
00:42:45,119 --> 00:42:50,010
an ids is to detect non-corporate

950
00:42:47,520 --> 00:42:50,680
configuration profile because<font color="#E5E5E5"> if one of</font>

951
00:42:50,010 --> 00:42:53,950
your device

952
00:42:50,680 --> 00:42:56,410
is accessing configuration profile file

953
00:42:53,950 --> 00:42:58,390
into<font color="#CCCCCC"> the internet and this profile has</font>

954
00:42:56,410 --> 00:43:00,430
not been provided by<font color="#CCCCCC"> you you should</font>

955
00:42:58,390 --> 00:43:03,190
block it at least if<font color="#E5E5E5"> you control the</font>

956
00:43:00,430 --> 00:43:07,720
egress point of the mobile<font color="#E5E5E5"> device what</font>

957
00:43:03,190 --> 00:43:09,760
you can also<font color="#E5E5E5"> do is to detect on the fly</font>

958
00:43:07,720 --> 00:43:13,000
if an application is signed by

959
00:43:09,760 --> 00:43:15,130
enterprise developer certificate so any

960
00:43:13,000 --> 00:43:18,130
application download it to one of<font color="#E5E5E5"> your</font>

961
00:43:15,130 --> 00:43:19,180
device at at least<font color="#E5E5E5"> same problem it needs</font>

962
00:43:18,130 --> 00:43:22,120
to be protected by your network

963
00:43:19,180 --> 00:43:24,640
monitoring solutions if it's signed by

964
00:43:22,120 --> 00:43:26,620
another company you block it because

965
00:43:24,640 --> 00:43:29,950
most<font color="#E5E5E5"> of the time there is no</font><font color="#CCCCCC"> reason</font>

966
00:43:26,620 --> 00:43:32,680
except specific<font color="#E5E5E5"> case that one of your</font>

967
00:43:29,950 --> 00:43:35,560
device should be running an application

968
00:43:32,680 --> 00:43:38,379
signed by by another company outside of

969
00:43:35,560 --> 00:43:41,650
Java store so this is<font color="#E5E5E5"> one way</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> to</font>

970
00:43:38,380 --> 00:43:44,500
<font color="#E5E5E5">detect it then if you have an MGM or ma</font>

971
00:43:41,650 --> 00:43:46,390
<font color="#E5E5E5">m solution what you can do using the MGM</font>

972
00:43:44,500 --> 00:43:48,610
is to get a list of installed

973
00:43:46,390 --> 00:43:49,660
application from the devices so then you

974
00:43:48,610 --> 00:43:51,400
get the list of the installed

975
00:43:49,660 --> 00:43:53,440
application you get the bundle name and

976
00:43:51,400 --> 00:43:56,950
then you match the bundle name against

977
00:43:53,440 --> 00:43:59,830
the black list of names used by malware

978
00:43:56,950 --> 00:44:01,299
but this is not<font color="#E5E5E5"> its I you see on</font><font color="#CCCCCC"> the</font>

979
00:43:59,830 --> 00:44:03,340
cheap because<font color="#CCCCCC"> you don't have</font><font color="#E5E5E5"> access to</font>

980
00:44:01,300 --> 00:44:05,230
the hashes you don't have access to a

981
00:44:03,340 --> 00:44:07,780
lot of stuff you only<font color="#E5E5E5"> have the bundle</font>

982
00:44:05,230 --> 00:44:11,320
name so basically the application<font color="#CCCCCC"> name</font>

983
00:44:07,780 --> 00:44:13,780
like comment<font color="#CCCCCC"> Facebook that something so</font>

984
00:44:11,320 --> 00:44:14,800
it's not that that good is quite easy is

985
00:44:13,780 --> 00:44:21,610
something that you can<font color="#E5E5E5"> quite easily</font>

986
00:44:14,800 --> 00:44:23,950
change as an attacker so that's one<font color="#CCCCCC"> way</font>

987
00:44:21,610 --> 00:44:26,290
to do<font color="#E5E5E5"> it if you're running it if you</font>

988
00:44:23,950 --> 00:44:29,140
want to check on<font color="#E5E5E5"> your own device you can</font>

989
00:44:26,290 --> 00:44:31,870
connect it or prove it using a USB or

990
00:44:29,140 --> 00:44:34,480
Wi-Fi and then you can install the tools

991
00:44:31,870 --> 00:44:36,520
<font color="#CCCCCC">named the iDevice installer or</font><font color="#E5E5E5"> I device</font>

992
00:44:34,480 --> 00:44:38,380
provision and then from this tool on<font color="#CCCCCC"> the</font>

993
00:44:36,520 --> 00:44:40,810
command line you are able to<font color="#CCCCCC"> list all</font>

994
00:44:38,380 --> 00:44:43,630
the application installed into your iOS

995
00:44:40,810 --> 00:44:45,430
device so that's one way<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> from</font>

996
00:44:43,630 --> 00:44:47,980
the<font color="#CCCCCC"> iDevice provision comment you should</font>

997
00:44:45,430 --> 00:44:49,569
be able also<font color="#E5E5E5"> as well to get access to</font>

998
00:44:47,980 --> 00:44:53,050
the configuration profile in style

999
00:44:49,570 --> 00:44:55,180
installed android device but lately<font color="#CCCCCC"> i</font>

1000
00:44:53,050 --> 00:44:57,520
had some trouble to do it I think it's

1001
00:44:55,180 --> 00:45:00,100
no blocked by by Apple behalf to check

1002
00:44:57,520 --> 00:45:03,670
this I haven't<font color="#E5E5E5"> got time</font><font color="#CCCCCC"> to dig into that</font>

1003
00:45:00,100 --> 00:45:04,610
if you want to take it<font color="#E5E5E5"> to the forensic</font>

1004
00:45:03,670 --> 00:45:06,650
point of view

1005
00:45:04,610 --> 00:45:10,370
if you have access to the iOS device

1006
00:45:06,650 --> 00:45:15,830
logs and you<font color="#CCCCCC"> get it through using open</font>

1007
00:45:10,370 --> 00:45:20,299
source tools through the case that<font color="#CCCCCC"> you</font>

1008
00:45:15,830 --> 00:45:22,160
can buy two together to do some forensic

1009
00:45:20,300 --> 00:45:23,690
analysis for mobile devices and then

1010
00:45:22,160 --> 00:45:25,759
it's not<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that we can see here</font>

1011
00:45:23,690 --> 00:45:28,040
but you have to stuff to look for its

1012
00:45:25,760 --> 00:45:30,110
installed<font color="#CCCCCC"> G and spring ball there are</font>

1013
00:45:28,040 --> 00:45:34,040
two of the processes or services that

1014
00:45:30,110 --> 00:45:36,620
<font color="#CCCCCC">are that are making entry when you have</font>

1015
00:45:34,040 --> 00:45:40,610
a new application that is<font color="#E5E5E5"> installed for</font>

1016
00:45:36,620 --> 00:45:43,430
example spring world will say is the

1017
00:45:40,610 --> 00:45:45,650
last one<font color="#CCCCCC"> it said that an installed</font>

1018
00:45:43,430 --> 00:45:47,419
application did<font color="#E5E5E5"> change so if you have</font>

1019
00:45:45,650 --> 00:45:50,660
<font color="#E5E5E5">this type of information that at least</font>

1020
00:45:47,420 --> 00:45:55,850
that allows you to know that<font color="#E5E5E5"> ok the guy</font>

1021
00:45:50,660 --> 00:45:58,160
got infected at that time then if you

1022
00:45:55,850 --> 00:46:02,000
have also access to a backup of those

1023
00:45:58,160 --> 00:46:04,190
device you can infer stuff from us so

1024
00:46:02,000 --> 00:46:07,220
let's say side channels like for example

1025
00:46:04,190 --> 00:46:14,210
the battery usage or the data usage

1026
00:46:07,220 --> 00:46:17,450
because you have a lot in form of sequel

1027
00:46:14,210 --> 00:46:20,450
sequel database<font color="#CCCCCC"> onto the device</font><font color="#E5E5E5"> and in</font>

1028
00:46:17,450 --> 00:46:23,529
those databases you have the battery

1029
00:46:20,450 --> 00:46:27,439
usage the data usage and also type of

1030
00:46:23,530 --> 00:46:30,290
statistics that are already made by

1031
00:46:27,440 --> 00:46:32,450
applications so if suddenly you get

1032
00:46:30,290 --> 00:46:35,240
access<font color="#E5E5E5"> to a device that you use sink is</font>

1033
00:46:32,450 --> 00:46:36,980
compromised and you have a battery usage

1034
00:46:35,240 --> 00:46:38,839
for a specific application that you

1035
00:46:36,980 --> 00:46:42,850
don't know<font color="#E5E5E5"> about this is on something</font>

1036
00:46:38,840 --> 00:46:45,470
fishy<font color="#E5E5E5"> and that gives you hints to to get</font>

1037
00:46:42,850 --> 00:46:48,110
and then it also gives you the last

1038
00:46:45,470 --> 00:46:50,000
exactly the information so that's from

1039
00:46:48,110 --> 00:46:51,110
the foreign<font color="#CCCCCC"> Singh point of view but then</font>

1040
00:46:50,000 --> 00:46:54,230
there is a<font color="#E5E5E5"> problem with the acquisition</font>

1041
00:46:51,110 --> 00:46:58,270
because then if you want the binary it's

1042
00:46:54,230 --> 00:47:00,170
something<font color="#E5E5E5"> more difficult for example if</font>

1043
00:46:58,270 --> 00:47:06,050
you get<font color="#E5E5E5"> something from</font><font color="#CCCCCC"> the app store</font>

1044
00:47:00,170 --> 00:47:08,660
it's<font color="#E5E5E5"> encrypted so before up to so before</font>

1045
00:47:06,050 --> 00:47:11,150
iOS 9 if you made a backup of your iOS

1046
00:47:08,660 --> 00:47:13,700
device using itune you will get the

1047
00:47:11,150 --> 00:47:15,710
binary for the application installed

1048
00:47:13,700 --> 00:47:18,288
into<font color="#CCCCCC"> the</font><font color="#E5E5E5"> app store but now since there</font>

1049
00:47:15,710 --> 00:47:20,299
is<font color="#CCCCCC"> an app sinning and</font><font color="#E5E5E5"> all type of stuff</font>

1050
00:47:18,289 --> 00:47:23,269
no Apple<font color="#E5E5E5"> is not providing the binary</font>

1051
00:47:20,299 --> 00:47:26,869
within the backup is not anymore there

1052
00:47:23,269 --> 00:47:28,758
but even it's a app store application so

1053
00:47:26,869 --> 00:47:30,589
<font color="#E5E5E5">there are encrypted you cannot access</font>

1054
00:47:28,759 --> 00:47:32,509
the code so even if a malware was from

1055
00:47:30,589 --> 00:47:34,939
the app store you weren't you will not

1056
00:47:32,509 --> 00:47:36,439
be<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> access his code and to</font>

1057
00:47:34,939 --> 00:47:40,428
analyze it except if you have a

1058
00:47:36,439 --> 00:47:41,989
jailbroken device from to<font color="#CCCCCC"> begin with but</font>

1059
00:47:40,429 --> 00:47:43,939
now there is<font color="#E5E5E5"> a problem with enterprise</font>

1060
00:47:41,989 --> 00:47:46,009
signed application because enterprise

1061
00:47:43,939 --> 00:47:48,589
application are not part of backups

1062
00:47:46,009 --> 00:47:50,959
since the beginning it stated into the

1063
00:47:48,589 --> 00:47:52,549
documentation from apple application

1064
00:47:50,959 --> 00:47:54,469
that you have developed in<font color="#CCCCCC"> out or</font>

1065
00:47:52,549 --> 00:47:56,359
distributed to your user with enterprise

1066
00:47:54,469 --> 00:47:58,910
provisioning profile won't be backed up

1067
00:47:56,359 --> 00:48:00,529
or transfer to your user computer so

1068
00:47:58,910 --> 00:48:02,299
there<font color="#E5E5E5"> is a big problem because if you</font>

1069
00:48:00,529 --> 00:48:04,779
want to do some forensic and analyze

1070
00:48:02,299 --> 00:48:07,759
what is going on if you don't have a

1071
00:48:04,779 --> 00:48:10,459
jailbroken device that you infect and

1072
00:48:07,759 --> 00:48:12,890
then you retrieve all the binary all the

1073
00:48:10,459 --> 00:48:16,129
information but you have a user<font color="#CCCCCC"> that got</font>

1074
00:48:12,890 --> 00:48:18,890
infected then you have a big problem to

1075
00:48:16,130 --> 00:48:24,859
<font color="#E5E5E5">be</font><font color="#CCCCCC"> able to extract the binary to to</font>

1076
00:48:18,890 --> 00:48:28,308
analyze it maybe what we<font color="#E5E5E5"> consign the</font>

1077
00:48:24,859 --> 00:48:31,819
future are scanning task using USB so

1078
00:48:28,309 --> 00:48:33,739
when you walk into the<font color="#E5E5E5"> other like you</font>

1079
00:48:31,819 --> 00:48:36,109
have with USB key you have this type of

1080
00:48:33,739 --> 00:48:37,880
this kiosk where you plug in plug in

1081
00:48:36,109 --> 00:48:39,890
your USB key that you<font color="#E5E5E5"> got at it</font><font color="#CCCCCC"> owns</font>

1082
00:48:37,880 --> 00:48:43,339
<font color="#CCCCCC">info sack for example and then we will</font>

1083
00:48:39,890 --> 00:48:45,379
run<font color="#E5E5E5"> a multiple malware on it AV sorry</font>

1084
00:48:43,339 --> 00:48:47,869
and they try to detect malware we might

1085
00:48:45,380 --> 00:48:50,989
see the same stuff for iOS devices maybe

1086
00:48:47,869 --> 00:48:53,179
in the future or maybe an AV for rock

1087
00:48:50,989 --> 00:48:55,579
station that will say<font color="#CCCCCC"> okay we have</font><font color="#E5E5E5"> a new</font>

1088
00:48:53,179 --> 00:48:58,400
feature it would<font color="#CCCCCC"> now be scanning your</font>

1089
00:48:55,579 --> 00:49:00,049
iOS devices as well for android<font color="#CCCCCC"> is more</font>

1090
00:48:58,400 --> 00:49:04,579
complicated because<font color="#E5E5E5"> then you</font><font color="#CCCCCC"> have to</font>

1091
00:49:00,049 --> 00:49:06,829
have adb enabled and enabled adb<font color="#CCCCCC"> onto a</font>

1092
00:49:04,579 --> 00:49:11,689
non developer device is not something

1093
00:49:06,829 --> 00:49:13,569
that<font color="#E5E5E5"> is recommended now about the</font>

1094
00:49:11,689 --> 00:49:16,038
protection the first one is quite easy

1095
00:49:13,569 --> 00:49:17,839
update your devices but then you will

1096
00:49:16,039 --> 00:49:20,539
<font color="#E5E5E5">say</font><font color="#CCCCCC"> okay we</font><font color="#E5E5E5"> don't know if it's supported</font>

1097
00:49:17,839 --> 00:49:22,819
if you will crash my device and then you

1098
00:49:20,539 --> 00:49:25,909
have the hardening so what you can do as

1099
00:49:22,819 --> 00:49:28,279
an end user on the<font color="#E5E5E5"> auditing side are the</font>

1100
00:49:25,909 --> 00:49:29,809
best practices so for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> disable</font>

1101
00:49:28,279 --> 00:49:30,829
<font color="#CCCCCC">the airdrop is something that you can</font><font color="#E5E5E5"> do</font>

1102
00:49:29,809 --> 00:49:33,630
using your MGM

1103
00:49:30,829 --> 00:49:36,449
forcing a six digit passcode at least

1104
00:49:33,630 --> 00:49:39,509
<font color="#E5E5E5">and one of the most important stuff</font>

1105
00:49:36,449 --> 00:49:42,630
could<font color="#CCCCCC"> be to actually do some user</font>

1106
00:49:39,509 --> 00:49:44,519
training and tell them<font color="#CCCCCC"> that if you</font>

1107
00:49:42,630 --> 00:49:46,979
installed an application<font color="#E5E5E5"> that is signed</font>

1108
00:49:44,519 --> 00:49:48,808
by another company it shouldn't be

1109
00:49:46,979 --> 00:49:52,049
installed into your your application you

1110
00:49:48,809 --> 00:49:55,199
should<font color="#E5E5E5"> stop the process and call the the</font>

1111
00:49:52,049 --> 00:50:00,029
ite a desk or the corporate security

1112
00:49:55,199 --> 00:50:04,669
team as soon as possible but<font color="#E5E5E5"> then in</font>

1113
00:50:00,029 --> 00:50:04,669
<font color="#E5E5E5">your putting the work on to the user</font>

1114
00:50:09,380 --> 00:50:14,210
okay as I said in the beginning this is

1115
00:50:12,410 --> 00:50:16,190
made mostly I've been able<font color="#E5E5E5"> to</font>

1116
00:50:14,210 --> 00:50:18,200
reverse-engineer those binaries because

1117
00:50:16,190 --> 00:50:23,180
I got access to them and since I'm not

1118
00:50:18,200 --> 00:50:26,870
actually performing active research on

1119
00:50:23,180 --> 00:50:29,629
this dismal<font color="#E5E5E5"> worth looking</font><font color="#CCCCCC"> for on website</font>

1120
00:50:26,870 --> 00:50:32,210
for binaries and stuff like that is

1121
00:50:29,630 --> 00:50:40,630
mainly due<font color="#E5E5E5"> to this Palo Alto guy that I</font>

1122
00:50:32,210 --> 00:50:40,630
got access to to them so that's it

