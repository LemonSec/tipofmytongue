1
00:00:00,000 --> 00:00:03,720
so I'm<font color="#CCCCCC"> gonna be here today</font><font color="#E5E5E5"> talking about</font>

2
00:00:01,650 --> 00:00:05,970
hunting for bugs with static code

3
00:00:03,720 --> 00:00:07,740
analysis so let's have a<font color="#CCCCCC"> look at</font><font color="#E5E5E5"> the</font>

4
00:00:05,970 --> 00:00:09,960
problem while we're actually here what

5
00:00:07,740 --> 00:00:11,550
do we care about<font color="#E5E5E5"> and software developers</font>

6
00:00:09,960 --> 00:00:13,080
a human they make mistakes<font color="#CCCCCC"> they screw up</font>

7
00:00:11,550 --> 00:00:15,299
and there's been quite a lot<font color="#E5E5E5"> of that</font>

8
00:00:13,080 --> 00:00:16,619
lately<font color="#E5E5E5"> over the last few years and you</font>

9
00:00:15,299 --> 00:00:18,869
know we got<font color="#CCCCCC"> a heart bleed</font><font color="#E5E5E5"> shell shock</font>

10
00:00:16,619 --> 00:00:21,119
<font color="#E5E5E5">the ghost gene lipsy bug was pretty bad</font>

11
00:00:18,869 --> 00:00:23,460
too and just<font color="#E5E5E5"> to pick a few out of the</font>

12
00:00:21,119 --> 00:00:24,750
air and now<font color="#CCCCCC"> they've got nice fancy logos</font>

13
00:00:23,460 --> 00:00:27,449
it makes nice and easy to<font color="#E5E5E5"> make a</font>

14
00:00:24,750 --> 00:00:29,099
presentation<font color="#CCCCCC"> about them and but mistakes</font>

15
00:00:27,449 --> 00:00:31,859
means bugs bugs mean vulnerabilities

16
00:00:29,099 --> 00:00:35,370
overall we want fewer bugs that's what

17
00:00:31,859 --> 00:00:38,219
we're here<font color="#CCCCCC"> for so Who am I I'm Nick</font>

18
00:00:35,370 --> 00:00:40,349
Jones I<font color="#E5E5E5"> work for mwr info security is a</font>

19
00:00:38,219 --> 00:00:42,300
security<font color="#E5E5E5"> consultant most of my time</font>

20
00:00:40,350 --> 00:00:44,129
spent on web application security or

21
00:00:42,300 --> 00:00:45,779
infrastructure assessments and but in a

22
00:00:44,129 --> 00:00:47,339
previous life I was<font color="#CCCCCC"> a commercial</font>

23
00:00:45,780 --> 00:00:48,960
software developer working with embedded

24
00:00:47,340 --> 00:00:50,850
systems so I've got a bit<font color="#E5E5E5"> of an</font>

25
00:00:48,960 --> 00:00:53,129
<font color="#E5E5E5">understanding of both sides of the coin</font>

26
00:00:50,850 --> 00:00:55,680
there and I've done<font color="#CCCCCC"> some work developing</font>

27
00:00:53,129 --> 00:01:00,329
bespoke static analysis for clients

28
00:00:55,680 --> 00:01:01,940
during that<font color="#E5E5E5"> time as well so roughly what</font>

29
00:01:00,329 --> 00:01:04,379
we're going to<font color="#E5E5E5"> be going over today and</font>

30
00:01:01,940 --> 00:01:06,048
the problems of application security why

31
00:01:04,379 --> 00:01:08,939
we're actually here talking about<font color="#CCCCCC"> it and</font>

32
00:01:06,049 --> 00:01:10,799
regular expressions<font color="#CCCCCC"> parses control flow</font>

33
00:01:08,939 --> 00:01:12,960
graphs and then just a quick look into

34
00:01:10,799 --> 00:01:15,180
<font color="#E5E5E5">why you might be interested in these</font>

35
00:01:12,960 --> 00:01:17,309
tools and<font color="#E5E5E5"> how you can best use them both</font>

36
00:01:15,180 --> 00:01:19,320
as a bug hunters security consultant and

37
00:01:17,310 --> 00:01:22,290
what have you<font color="#E5E5E5"> and also from the point of</font>

38
00:01:19,320 --> 00:01:24,389
view of software developers so to start

39
00:01:22,290 --> 00:01:26,700
<font color="#CCCCCC">off what's the problem here we're</font><font color="#E5E5E5"> really</font>

40
00:01:24,390 --> 00:01:28,799
looking at throughout the talk<font color="#E5E5E5"> I'm going</font>

41
00:01:26,700 --> 00:01:32,460
<font color="#E5E5E5">to refer</font><font color="#CCCCCC"> to a company as a case study</font>

42
00:01:28,799 --> 00:01:34,470
and<font color="#CCCCCC"> MWR events who've been developing a</font>

43
00:01:32,460 --> 00:01:36,210
new online events management platform

44
00:01:34,470 --> 00:01:37,619
and they've got<font color="#CCCCCC"> a website they've got</font>

45
00:01:36,210 --> 00:01:40,289
mobile apps they've got a<font color="#CCCCCC"> back-end</font><font color="#E5E5E5"> that</font>

46
00:01:37,619 --> 00:01:42,810
someone built in some horrible embedded

47
00:01:40,290 --> 00:01:45,090
platform all in all it's a real mix of

48
00:01:42,810 --> 00:01:47,250
stuff and the developers are average

49
00:01:45,090 --> 00:01:49,409
quality not completely terrible but

50
00:01:47,250 --> 00:01:51,060
equally they're not<font color="#E5E5E5"> particularly hot</font>

51
00:01:49,409 --> 00:01:53,939
either they've got no in-house security

52
00:01:51,060 --> 00:01:57,390
expertise and so they're contracting out

53
00:01:53,939 --> 00:01:59,369
to try and find people<font color="#CCCCCC"> to help them so</font>

54
00:01:57,390 --> 00:02:02,369
if they<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to find and fix all their</font>

55
00:01:59,369 --> 00:02:04,229
bugs where do we start there's a few

56
00:02:02,369 --> 00:02:06,299
different methodologies and mindsets you

57
00:02:04,229 --> 00:02:07,890
can apply<font color="#CCCCCC"> to this and broadly speaking</font>

58
00:02:06,299 --> 00:02:09,420
there break down into<font color="#E5E5E5"> two categories you</font>

59
00:02:07,890 --> 00:02:11,940
have static<font color="#E5E5E5"> analysis and dynamic</font>

60
00:02:09,419 --> 00:02:12,690
analysis so static analysis is looking

61
00:02:11,940 --> 00:02:14,940
at a nap

62
00:02:12,690 --> 00:02:16,770
location without actually executing it

63
00:02:14,940 --> 00:02:19,530
you're reviewing the code or the binary

64
00:02:16,770 --> 00:02:21,120
or otherwise digging into what the

65
00:02:19,530 --> 00:02:22,770
application is built<font color="#E5E5E5"> of without actually</font>

66
00:02:21,120 --> 00:02:24,240
executing it on the platform it's

67
00:02:22,770 --> 00:02:25,620
designed to<font color="#E5E5E5"> run on so this typically</font>

68
00:02:24,240 --> 00:02:27,570
breaks down into sort of<font color="#E5E5E5"> code review</font>

69
00:02:25,620 --> 00:02:28,860
reverse engineering analysis of the

70
00:02:27,570 --> 00:02:31,320
binaries you're handed so on and so

71
00:02:28,860 --> 00:02:33,090
forth and dynamic<font color="#E5E5E5"> analysis on the other</font>

72
00:02:31,320 --> 00:02:35,790
<font color="#E5E5E5">hand is your</font><font color="#CCCCCC"> more traditional</font>

73
00:02:33,090 --> 00:02:37,620
penetration testing and you execute the

74
00:02:35,790 --> 00:02:39,900
application you interact with<font color="#E5E5E5"> it as</font><font color="#CCCCCC"> its</font>

75
00:02:37,620 --> 00:02:42,540
executing you try and find bugs that way

76
00:02:39,900 --> 00:02:44,040
so fuzzing and typical functional

77
00:02:42,540 --> 00:02:46,230
testing tampering that kind of thing all

78
00:02:44,040 --> 00:02:47,370
falls under dynamic<font color="#E5E5E5"> analysis give them</font>

79
00:02:46,230 --> 00:02:48,600
the<font color="#E5E5E5"> tool title I'm sure it won't</font>

80
00:02:47,370 --> 00:02:50,790
surprise people to find out we're going

81
00:02:48,600 --> 00:02:52,079
<font color="#E5E5E5">to be focusing on static analysis and</font>

82
00:02:50,790 --> 00:02:55,109
for the most part<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> going to be</font>

83
00:02:52,080 --> 00:02:56,790
talking<font color="#E5E5E5"> about code review and how to use</font>

84
00:02:55,110 --> 00:03:01,940
static analysis<font color="#E5E5E5"> techniques to analyze</font>

85
00:02:56,790 --> 00:03:04,709
source code so how do we do code review

86
00:03:01,940 --> 00:03:06,329
you<font color="#CCCCCC"> can either do it</font><font color="#E5E5E5"> manually or you can</font>

87
00:03:04,710 --> 00:03:07,530
build yourself a tool to do it in the

88
00:03:06,330 --> 00:03:10,200
manual sentence you give it to<font color="#E5E5E5"> some</font>

89
00:03:07,530 --> 00:03:11,490
smart security people who understand how

90
00:03:10,200 --> 00:03:13,739
to<font color="#E5E5E5"> look for bugs in source code and</font>

91
00:03:11,490 --> 00:03:15,780
they've read through it try and<font color="#E5E5E5"> find</font>

92
00:03:13,740 --> 00:03:17,100
<font color="#E5E5E5">some bugs and you know often you'll</font><font color="#CCCCCC"> find</font>

93
00:03:15,780 --> 00:03:18,720
quite a few that way and the other

94
00:03:17,100 --> 00:03:21,600
<font color="#E5E5E5">approach is to build yourself a tool</font>

95
00:03:18,720 --> 00:03:23,670
<font color="#E5E5E5">past your code into</font><font color="#CCCCCC"> the tool and let the</font>

96
00:03:21,600 --> 00:03:25,049
tool understand and reason with the code

97
00:03:23,670 --> 00:03:28,290
in<font color="#CCCCCC"> order to spot issues that it can</font>

98
00:03:25,050 --> 00:03:30,840
understand so from a manual perspective

99
00:03:28,290 --> 00:03:32,190
and I'm sure if you<font color="#E5E5E5"> have you have seen</font>

100
00:03:30,840 --> 00:03:34,800
things<font color="#E5E5E5"> like this crop</font><font color="#CCCCCC"> & Co before</font>

101
00:03:32,190 --> 00:03:37,800
someone shout out what sort of bug are

102
00:03:34,800 --> 00:03:40,590
we looking at here<font color="#E5E5E5"> yeah buffer overflow</font>

103
00:03:37,800 --> 00:03:41,970
fantastic and so that's a nice easy<font color="#E5E5E5"> one</font>

104
00:03:40,590 --> 00:03:43,080
<font color="#CCCCCC">and you know you've got</font><font color="#E5E5E5"> a couple of</font>

105
00:03:41,970 --> 00:03:45,090
lines of code there it's immediately

106
00:03:43,080 --> 00:03:46,380
obvious when you<font color="#E5E5E5"> read</font><font color="#CCCCCC"> it and likewise if</font>

107
00:03:45,090 --> 00:03:48,510
anyone's done in the<font color="#E5E5E5"> Android security</font>

108
00:03:46,380 --> 00:03:50,220
they'll tell you that i'm setting

109
00:03:48,510 --> 00:03:51,929
<font color="#E5E5E5">javascript enabled on your web views</font>

110
00:03:50,220 --> 00:03:54,150
generally doesn't end terribly well so

111
00:03:51,930 --> 00:03:58,380
again single line nice and easy to spot

112
00:03:54,150 --> 00:04:00,050
your problem then becomes it's really

113
00:03:58,380 --> 00:04:02,010
<font color="#E5E5E5">expensive doing this on large code bases</font>

114
00:04:00,050 --> 00:04:03,630
I've pulled some numbers off<font color="#CCCCCC"> the</font>

115
00:04:02,010 --> 00:04:05,429
internet for<font color="#E5E5E5"> a few major projects and</font>

116
00:04:03,630 --> 00:04:07,760
latest estimates for Windows and Mac

117
00:04:05,430 --> 00:04:10,050
coming at about 45 million lines of code

118
00:04:07,760 --> 00:04:13,140
86 million lines of code respectively

119
00:04:10,050 --> 00:04:15,209
and the new f-35<font color="#CCCCCC"> there reckons about 24</font>

120
00:04:13,140 --> 00:04:18,209
million lines of code overall and and

121
00:04:15,209 --> 00:04:20,608
paying a security consultancy to sit

122
00:04:18,209 --> 00:04:22,200
down<font color="#E5E5E5"> and read through 86 million lines</font>

123
00:04:20,608 --> 00:04:23,940
of code to try and find bugs in it it's

124
00:04:22,200 --> 00:04:26,400
a really expensive way of doing it and

125
00:04:23,940 --> 00:04:29,370
and to give<font color="#CCCCCC"> you</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> idea of how many</font><font color="#E5E5E5"> bug</font>

126
00:04:26,400 --> 00:04:31,799
that might<font color="#CCCCCC"> be and Steve McConnell who</font>

127
00:04:29,370 --> 00:04:34,759
wrote code complete says estimates<font color="#E5E5E5"> 10 to</font>

128
00:04:31,800 --> 00:04:37,650
<font color="#E5E5E5">20 defects per thousand lines of code I</font>

129
00:04:34,759 --> 00:04:39,270
seems a little high to me but we'll go

130
00:04:37,650 --> 00:04:40,620
with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> anyway which means</font><font color="#CCCCCC"> Windows</font>

131
00:04:39,270 --> 00:04:42,840
<font color="#E5E5E5">we're looking at about six seven hundred</font>

132
00:04:40,620 --> 00:04:45,270
thousand bugs about 1.3 million for mac

133
00:04:42,840 --> 00:04:46,440
<font color="#E5E5E5">OS x and our brand spanking new fighters</font>

134
00:04:45,270 --> 00:04:48,560
going<font color="#E5E5E5"> to have somewhere between three</font>

135
00:04:46,440 --> 00:04:51,509
and four hundred thousand and that's a

136
00:04:48,560 --> 00:04:53,070
lot<font color="#CCCCCC"> of bugs so how do we cut that down</font>

137
00:04:51,509 --> 00:04:58,199
without spending silly amounts of money

138
00:04:53,070 --> 00:05:00,659
on security concerns to do this we use

139
00:04:58,199 --> 00:05:02,780
static code analysis tools so

140
00:05:00,660 --> 00:05:05,820
essentially you build tool tooling<font color="#CCCCCC"> to</font>

141
00:05:02,780 --> 00:05:08,039
automatically search your code to try

142
00:05:05,820 --> 00:05:11,159
and find security<font color="#E5E5E5"> issues that you can</font>

143
00:05:08,039 --> 00:05:12,270
write rules essentially for and so

144
00:05:11,160 --> 00:05:14,340
you've got typically got a very high

145
00:05:12,270 --> 00:05:15,780
upfront costs you're either buying in a

146
00:05:14,340 --> 00:05:17,880
commercial tool the commercial tools get

147
00:05:15,780 --> 00:05:19,380
really expensive depending on the scale

148
00:05:17,880 --> 00:05:20,760
you're using them at and all<font color="#E5E5E5"> you're</font>

149
00:05:19,380 --> 00:05:22,289
developing something yourself and these

150
00:05:20,760 --> 00:05:23,820
tools are not trivial<font color="#E5E5E5"> to develop which i</font>

151
00:05:22,289 --> 00:05:26,159
guess is why the commercial ones cost so

152
00:05:23,820 --> 00:05:27,750
much and<font color="#CCCCCC"> so as a result and there's a</font>

153
00:05:26,160 --> 00:05:29,849
<font color="#E5E5E5">fairly serious upfront cost to it but</font>

154
00:05:27,750 --> 00:05:33,139
once you've built<font color="#E5E5E5"> it it's essentially</font>

155
00:05:29,849 --> 00:05:35,669
free you've got to run it but the<font color="#E5E5E5"> actual</font>

156
00:05:33,139 --> 00:05:37,919
the cost to run it is pretty much

157
00:05:35,669 --> 00:05:39,299
negligible<font color="#E5E5E5"> and you can catch a lot</font><font color="#CCCCCC"> of</font>

158
00:05:37,919 --> 00:05:44,760
the low-hanging fruit automatically as

159
00:05:39,300 --> 00:05:46,199
well see<font color="#CCCCCC"> you</font><font color="#E5E5E5"> later on so a bit</font><font color="#CCCCCC"> of a</font>

160
00:05:44,760 --> 00:05:47,340
warning<font color="#E5E5E5"> here and in order</font><font color="#CCCCCC"> to get our</font>

161
00:05:46,199 --> 00:05:48,300
heads around how a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of these tools</font>

162
00:05:47,340 --> 00:05:49,679
work there's going to be a bit of

163
00:05:48,300 --> 00:05:50,729
computer science theory apologies to

164
00:05:49,680 --> 00:05:52,590
those of<font color="#E5E5E5"> you who've done compiler</font>

165
00:05:50,729 --> 00:05:54,900
courses already equally apologies to

166
00:05:52,590 --> 00:05:56,520
those of you<font color="#E5E5E5"> where I'm trying to fit</font><font color="#CCCCCC"> by</font>

167
00:05:54,900 --> 00:05:59,159
<font color="#CCCCCC">the two semesters worth of compiler</font>

168
00:05:56,520 --> 00:06:00,900
theory into about 15 minutes<font color="#CCCCCC"> and this is</font>

169
00:05:59,159 --> 00:06:02,010
<font color="#E5E5E5">going to move quite fast broadly</font>

170
00:06:00,900 --> 00:06:04,620
speaking we're gonna have to cover

171
00:06:02,010 --> 00:06:07,889
language types automata and then how you

172
00:06:04,620 --> 00:06:10,199
build passes from automata<font color="#E5E5E5"> and so what</font>

173
00:06:07,889 --> 00:06:13,169
is a language and it's a set of strings

174
00:06:10,199 --> 00:06:15,030
of symbols of some description that are

175
00:06:13,169 --> 00:06:18,299
constrained by set of rules rules are

176
00:06:15,030 --> 00:06:19,770
usually defined by grammar and so<font color="#E5E5E5"> this</font>

177
00:06:18,300 --> 00:06:21,270
can be said<font color="#CCCCCC"> for human languages just</font><font color="#E5E5E5"> the</font>

178
00:06:19,770 --> 00:06:24,180
same as it secondly can be said<font color="#CCCCCC"> for</font>

179
00:06:21,270 --> 00:06:25,620
programming languages and and a bloke

180
00:06:24,180 --> 00:06:27,620
called Noam Chomsky who some of you will

181
00:06:25,620 --> 00:06:29,880
probably have heard of came<font color="#CCCCCC"> up with a</font>

182
00:06:27,620 --> 00:06:31,199
hierarchy of the different kind of

183
00:06:29,880 --> 00:06:34,289
constraints that apply to different

184
00:06:31,199 --> 00:06:35,639
<font color="#E5E5E5">types of languages and so we're mainly</font>

185
00:06:34,289 --> 00:06:37,469
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to be focusing on the bottom two</font>

186
00:06:35,639 --> 00:06:39,660
regular and context-free that's where

187
00:06:37,469 --> 00:06:41,550
most programming languages fall into

188
00:06:39,660 --> 00:06:44,610
so we're going<font color="#E5E5E5"> to start</font><font color="#CCCCCC"> off with regular</font>

189
00:06:41,550 --> 00:06:46,170
languages first and taking a<font color="#CCCCCC"> look at</font>

190
00:06:44,610 --> 00:06:51,110
regular expressions in that context as

191
00:06:46,170 --> 00:06:53,190
<font color="#CCCCCC">well and so like I say regular languages</font>

192
00:06:51,110 --> 00:06:54,810
which can be parsed by regular

193
00:06:53,190 --> 00:06:56,280
expressions<font color="#E5E5E5"> I'm sure most of you come</font>

194
00:06:54,810 --> 00:06:57,660
across regular expressions already and

195
00:06:56,280 --> 00:07:00,299
here we're<font color="#CCCCCC"> talking about them in the</font>

196
00:06:57,660 --> 00:07:02,250
<font color="#E5E5E5">classic sense rather than the modern</font>

197
00:07:00,300 --> 00:07:04,260
regular expression passes that you'll

198
00:07:02,250 --> 00:07:05,840
have<font color="#E5E5E5"> used no doubt in a number of</font>

199
00:07:04,260 --> 00:07:08,159
languages Python Perl what have you and

200
00:07:05,840 --> 00:07:09,840
the modern ones<font color="#E5E5E5"> are generally a lot more</font>

201
00:07:08,160 --> 00:07:11,340
powerful<font color="#E5E5E5"> than the classic model and can</font>

202
00:07:09,840 --> 00:07:13,950
do things<font color="#E5E5E5"> like backtracking but</font>

203
00:07:11,340 --> 00:07:15,060
generally speaking the same<font color="#E5E5E5"> kind of</font>

204
00:07:13,950 --> 00:07:17,960
limitations that I'm going<font color="#E5E5E5"> to be talking</font>

205
00:07:15,060 --> 00:07:20,490
about<font color="#E5E5E5"> here our problem for them and so</font>

206
00:07:17,960 --> 00:07:22,620
broadly speaking regular expressions act

207
00:07:20,490 --> 00:07:25,110
as a finite automata which is a finite

208
00:07:22,620 --> 00:07:26,340
state machine in simple terms if any of

209
00:07:25,110 --> 00:07:27,990
you have used those you have a list of

210
00:07:26,340 --> 00:07:29,729
states and a list of transitions that

211
00:07:27,990 --> 00:07:31,290
can be<font color="#E5E5E5"> made between your</font><font color="#CCCCCC"> states and you</font>

212
00:07:29,730 --> 00:07:34,590
<font color="#E5E5E5">process your input till you either reach</font>

213
00:07:31,290 --> 00:07:37,410
the end or you error out and so very

214
00:07:34,590 --> 00:07:40,200
basic regular expression parser looking

215
00:07:37,410 --> 00:07:42,810
for the word nice and so you<font color="#CCCCCC"> have your</font>

216
00:07:40,200 --> 00:07:45,000
starting character is<font color="#E5E5E5"> it an N if so move</font>

217
00:07:42,810 --> 00:07:48,300
<font color="#E5E5E5">on to state</font><font color="#CCCCCC"> 2 if</font><font color="#E5E5E5"> not you move out to</font>

218
00:07:45,000 --> 00:07:50,340
your arrow state which here is<font color="#CCCCCC"> 6 you</font>

219
00:07:48,300 --> 00:07:51,990
know and so on<font color="#E5E5E5"> and so forth looping</font>

220
00:07:50,340 --> 00:07:54,030
through until you either each success or

221
00:07:51,990 --> 00:07:55,560
error and obviously<font color="#E5E5E5"> if you start using</font>

222
00:07:54,030 --> 00:07:56,489
wildcards and so on<font color="#E5E5E5"> and so forth your</font>

223
00:07:55,560 --> 00:07:58,560
state machines get a bit<font color="#E5E5E5"> more</font>

224
00:07:56,490 --> 00:08:01,200
complicated but broadly speaking it

225
00:07:58,560 --> 00:08:04,500
boils down to<font color="#CCCCCC"> the same thing so had a</font>

226
00:08:01,200 --> 00:08:05,880
regular<font color="#CCCCCC"> expressions help us you can</font>

227
00:08:04,500 --> 00:08:07,400
match code snippets that look like

228
00:08:05,880 --> 00:08:09,800
problems you were already aware of and

229
00:08:07,400 --> 00:08:11,669
and there's a few advantages to that

230
00:08:09,800 --> 00:08:13,200
especially when the context of regular

231
00:08:11,669 --> 00:08:14,909
expressions they're very quick and<font color="#E5E5E5"> easy</font>

232
00:08:13,200 --> 00:08:17,039
to write comparatively low cost if

233
00:08:14,910 --> 00:08:18,690
you're a security<font color="#E5E5E5"> consultant who wants</font>

234
00:08:17,040 --> 00:08:21,090
to get a feel for how rope your code

235
00:08:18,690 --> 00:08:23,190
bases or you're<font color="#CCCCCC"> looking for the really</font>

236
00:08:21,090 --> 00:08:24,840
really obvious bugs in some code this is

237
00:08:23,190 --> 00:08:27,270
probably where<font color="#CCCCCC"> you start and basically</font>

238
00:08:24,840 --> 00:08:29,130
boils down to does my code match this

239
00:08:27,270 --> 00:08:30,359
very specific known issue that I

240
00:08:29,130 --> 00:08:32,370
understand<font color="#E5E5E5"> and I've been able to write a</font>

241
00:08:30,360 --> 00:08:33,690
rule for so maybe someone's using some

242
00:08:32,370 --> 00:08:35,400
bad libraries so you can scan<font color="#E5E5E5"> through</font>

243
00:08:33,690 --> 00:08:37,140
and find any import statements for bad

244
00:08:35,400 --> 00:08:38,760
libraries<font color="#E5E5E5"> khalsa known dangerous</font>

245
00:08:37,140 --> 00:08:39,659
functions and you know if you're you're

246
00:08:38,760 --> 00:08:41,280
<font color="#CCCCCC">looking through the code and that's</font>

247
00:08:39,659 --> 00:08:44,430
<font color="#E5E5E5">caused a stroke off me everywhere that's</font>

248
00:08:41,280 --> 00:08:47,189
<font color="#E5E5E5">probably bad and likewise known security</font>

249
00:08:44,430 --> 00:08:49,439
misconfigurations so as we talked about

250
00:08:47,190 --> 00:08:50,880
earlier enabling<font color="#E5E5E5"> JavaScript on web views</font>

251
00:08:49,440 --> 00:08:52,260
and androids is bad so we write

252
00:08:50,880 --> 00:08:52,649
ourselves a regular<font color="#CCCCCC"> expression that</font>

253
00:08:52,260 --> 00:08:56,579
looks

254
00:08:52,649 --> 00:08:57,990
for set javascript-enabled calls and lo

255
00:08:56,579 --> 00:09:00,508
and behold when you run your<font color="#CCCCCC"> regex over</font>

256
00:08:57,990 --> 00:09:04,889
your<font color="#E5E5E5"> code base you find this line so you</font>

257
00:09:00,509 --> 00:09:09,269
know that's<font color="#E5E5E5"> bad you can go fix it as</font>

258
00:09:04,889 --> 00:09:11,610
another example here and we've got<font color="#E5E5E5"> some</font>

259
00:09:09,269 --> 00:09:13,259
debug statements and they're rats in a

260
00:09:11,610 --> 00:09:14,970
guard you've set a constant somewhere

261
00:09:13,259 --> 00:09:17,610
that states whether the application is

262
00:09:14,970 --> 00:09:19,170
in debug mode or not and what you care

263
00:09:17,610 --> 00:09:22,259
about here is whether you're logging in

264
00:09:19,170 --> 00:09:24,329
a production environment now<font color="#CCCCCC"> you're</font>

265
00:09:22,259 --> 00:09:26,279
<font color="#E5E5E5">regex looking for printf statements</font>

266
00:09:24,329 --> 00:09:29,160
which is what we're assuming is being

267
00:09:26,279 --> 00:09:32,720
<font color="#E5E5E5">used to log here and it's going to quite</font>

268
00:09:29,160 --> 00:09:34,740
happily find all three of those princess

269
00:09:32,720 --> 00:09:36,629
so you've got<font color="#E5E5E5"> a couple of problems here</font>

270
00:09:34,740 --> 00:09:39,170
though regular expressions can't count

271
00:09:36,629 --> 00:09:41,129
you have no way to maintain state

272
00:09:39,170 --> 00:09:42,719
classically they can't back-trace if

273
00:09:41,129 --> 00:09:46,319
you're using a modern reg expression

274
00:09:42,720 --> 00:09:48,179
they can to some degree or another but

275
00:09:46,319 --> 00:09:50,519
the issue here<font color="#E5E5E5"> then is if we go back to</font>

276
00:09:48,179 --> 00:09:52,619
<font color="#E5E5E5">the previous code you've actually got</font>

277
00:09:50,519 --> 00:09:54,569
three issues turning up for what<font color="#CCCCCC"> is</font>

278
00:09:52,619 --> 00:09:56,970
essentially still one and it's actually

279
00:09:54,569 --> 00:09:58,529
<font color="#E5E5E5">not one because you've got it's a false</font>

280
00:09:56,970 --> 00:10:01,740
positive because you've<font color="#E5E5E5"> got your your</font>

281
00:09:58,529 --> 00:10:03,300
debug guard in place and see in order<font color="#E5E5E5"> to</font>

282
00:10:01,740 --> 00:10:04,589
<font color="#E5E5E5">check to see whether the developers</font>

283
00:10:03,300 --> 00:10:06,120
remember to put<font color="#CCCCCC"> the guard in place</font>

284
00:10:04,589 --> 00:10:09,059
you've<font color="#E5E5E5"> got a couple of different</font><font color="#CCCCCC"> options</font>

285
00:10:06,120 --> 00:10:10,679
and<font color="#CCCCCC"> you can check backwards line by line</font>

286
00:10:09,059 --> 00:10:11,730
through your code file until you reach

287
00:10:10,679 --> 00:10:13,769
other beginning of the line or<font color="#CCCCCC"> the</font>

288
00:10:11,730 --> 00:10:15,509
appropriate statement and which is

289
00:10:13,769 --> 00:10:16,949
inefficient and prone to false negatives

290
00:10:15,509 --> 00:10:19,199
because sometimes you'll catch guards

291
00:10:16,949 --> 00:10:20,969
that might not actually necessarily

292
00:10:19,199 --> 00:10:23,579
apply to what you're looking at and or

293
00:10:20,970 --> 00:10:24,899
you check the<font color="#E5E5E5"> X many previous lines you</font>

294
00:10:23,579 --> 00:10:26,939
<font color="#E5E5E5">know you pick an arbitrary number</font><font color="#CCCCCC"> five</font>

295
00:10:24,899 --> 00:10:29,429
lines 10 lines what have you and but

296
00:10:26,939 --> 00:10:31,139
that will tend to<font color="#E5E5E5"> lead you into a good</font>

297
00:10:29,429 --> 00:10:33,689
number<font color="#E5E5E5"> of false positives because you're</font>

298
00:10:31,139 --> 00:10:35,579
only checking so far and and as I said

299
00:10:33,689 --> 00:10:38,490
<font color="#E5E5E5">you general generating three alerts for</font>

300
00:10:35,579 --> 00:10:39,899
the same missing<font color="#CCCCCC"> god so the fundamental</font>

301
00:10:38,490 --> 00:10:41,490
problem here is regular expressions are

302
00:10:39,899 --> 00:10:45,329
<font color="#CCCCCC">not designed for pausing programming</font>

303
00:10:41,490 --> 00:10:46,949
languages regular expressions mostly

304
00:10:45,329 --> 00:10:49,128
<font color="#E5E5E5">only match regular languages most</font>

305
00:10:46,949 --> 00:10:52,618
programming languages are context-free

306
00:10:49,129 --> 00:10:56,040
so the next<font color="#CCCCCC"> one</font><font color="#E5E5E5"> up the hierarchy in</font>

307
00:10:52,619 --> 00:10:57,779
<font color="#CCCCCC">chomsky's language hierarchy and so</font>

308
00:10:56,040 --> 00:11:04,019
instead of regular expressions we use

309
00:10:57,779 --> 00:11:05,579
<font color="#CCCCCC">parses so context-free languages are a</font>

310
00:11:04,019 --> 00:11:06,300
superset of regular languages as I said

311
00:11:05,579 --> 00:11:07,739
<font color="#E5E5E5">and</font>

312
00:11:06,300 --> 00:11:10,979
defined as anything<font color="#E5E5E5"> that can be accepted</font>

313
00:11:07,740 --> 00:11:13,500
<font color="#E5E5E5">by pushdown automata which is a little</font>

314
00:11:10,980 --> 00:11:14,730
<font color="#E5E5E5">bit like final</font><font color="#CCCCCC"> Thomas Rowe as we</font>

315
00:11:13,500 --> 00:11:16,590
discussed previously only this time

316
00:11:14,730 --> 00:11:18,030
around you have a stack which means that

317
00:11:16,590 --> 00:11:19,410
you can decide your transitions within

318
00:11:18,030 --> 00:11:21,240
your state machine both based on the

319
00:11:19,410 --> 00:11:22,589
input and also whatever<font color="#E5E5E5"> it is that you</font>

320
00:11:21,240 --> 00:11:25,790
last popped onto the stack and<font color="#CCCCCC"> you can</font>

321
00:11:22,590 --> 00:11:28,620
push and pop the stack as you need and

322
00:11:25,790 --> 00:11:30,510
<font color="#E5E5E5">kind of a brief idea of how these work</font>

323
00:11:28,620 --> 00:11:32,880
you're<font color="#E5E5E5"> reading some characters off an</font>

324
00:11:30,510 --> 00:11:35,220
input<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> have a stack both of those</font>

325
00:11:32,880 --> 00:11:36,630
inputs together decide where you're

326
00:11:35,220 --> 00:11:42,090
moving next within your finite state

327
00:11:36,630 --> 00:11:43,530
machine so how does this then apply<font color="#E5E5E5"> to a</font>

328
00:11:42,090 --> 00:11:45,210
parts of<font color="#E5E5E5"> pauses are generally and</font>

329
00:11:43,530 --> 00:11:49,199
implementations of push down automata in

330
00:11:45,210 --> 00:11:51,240
some former an hour and and you convert

331
00:11:49,200 --> 00:11:53,430
text in the form of human readable

332
00:11:51,240 --> 00:11:55,410
source code into some kind of

333
00:11:53,430 --> 00:11:58,079
hierarchical data structure usually

334
00:11:55,410 --> 00:12:01,230
either a parse tree or an abstract

335
00:11:58,080 --> 00:12:02,760
syntax tree the basic difference there

336
00:12:01,230 --> 00:12:05,400
is<font color="#CCCCCC"> a parse tree contains every single</font>

337
00:12:02,760 --> 00:12:06,480
token so you'll include brackets and so

338
00:12:05,400 --> 00:12:10,110
on and<font color="#E5E5E5"> so forth where as an abstract</font>

339
00:12:06,480 --> 00:12:11,880
syntax tree newly purely holds on to the

340
00:12:10,110 --> 00:12:15,090
<font color="#E5E5E5">information</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is important to</font>

341
00:12:11,880 --> 00:12:17,220
<font color="#CCCCCC">actually build the program several</font>

342
00:12:15,090 --> 00:12:19,530
different types of passes I'm not<font color="#E5E5E5"> really</font>

343
00:12:17,220 --> 00:12:22,410
gonna go into the detail there it's<font color="#E5E5E5"> not</font>

344
00:12:19,530 --> 00:12:23,910
terribly relevant for for this and the

345
00:12:22,410 --> 00:12:25,350
one<font color="#E5E5E5"> thing to say though is that most</font>

346
00:12:23,910 --> 00:12:26,819
parts is operating two separate stages

347
00:12:25,350 --> 00:12:30,240
so you have<font color="#E5E5E5"> something that chops your</font>

348
00:12:26,820 --> 00:12:31,470
input up into the tokens and<font color="#E5E5E5"> strings</font>

349
00:12:30,240 --> 00:12:33,300
with an understood meaning so you know

350
00:12:31,470 --> 00:12:35,840
your keywords in your language or your

351
00:12:33,300 --> 00:12:39,120
your braces or your variables or a view

352
00:12:35,840 --> 00:12:41,460
and then<font color="#E5E5E5"> once you've finished lexing</font>

353
00:12:39,120 --> 00:12:43,140
your input you then run a parser over it

354
00:12:41,460 --> 00:12:44,910
in<font color="#E5E5E5"> order to construct you or your tree</font>

355
00:12:43,140 --> 00:12:46,199
of some description and you can combine

356
00:12:44,910 --> 00:12:48,209
both it's<font color="#E5E5E5"> not usually done for</font>

357
00:12:46,200 --> 00:12:50,100
programming languages and so as an

358
00:12:48,210 --> 00:12:53,670
example and we're<font color="#E5E5E5"> going to run</font><font color="#CCCCCC"> a lexer</font>

359
00:12:50,100 --> 00:12:56,490
over the debug guard example<font color="#CCCCCC"> i used</font>

360
00:12:53,670 --> 00:12:58,740
previously and you can see there the

361
00:12:56,490 --> 00:13:01,860
<font color="#E5E5E5">lexus picked up different types of</font>

362
00:12:58,740 --> 00:13:03,990
keywords function calls variables and so

363
00:13:01,860 --> 00:13:05,430
on<font color="#E5E5E5"> and so forth and so then once you've</font>

364
00:13:03,990 --> 00:13:10,460
lexxtex<font color="#E5E5E5"> successfully you can pass it</font>

365
00:13:05,430 --> 00:13:12,540
into your parser and the parser here

366
00:13:10,460 --> 00:13:14,010
starts reading from the top discovers

367
00:13:12,540 --> 00:13:17,370
it's got an if statement so you create

368
00:13:14,010 --> 00:13:19,290
an F block next up you find yourself an

369
00:13:17,370 --> 00:13:19,920
open curly brace which means you now

370
00:13:19,290 --> 00:13:22,889
know

371
00:13:19,920 --> 00:13:24,540
that you're starting<font color="#E5E5E5"> a new code block so</font>

372
00:13:22,889 --> 00:13:26,550
from there all<font color="#E5E5E5"> of your princess</font>

373
00:13:24,540 --> 00:13:29,130
statements are then attached to<font color="#E5E5E5"> that</font>

374
00:13:26,550 --> 00:13:30,990
code block which is<font color="#E5E5E5"> then closed off once</font>

375
00:13:29,130 --> 00:13:33,600
you then find<font color="#E5E5E5"> that final bracket now the</font>

376
00:13:30,990 --> 00:13:35,579
real power<font color="#E5E5E5"> here is that you understand</font>

377
00:13:33,600 --> 00:13:37,500
the<font color="#CCCCCC"> position of your printf statements</font>

378
00:13:35,579 --> 00:13:39,180
within the<font color="#E5E5E5"> code so you can check back up</font>

379
00:13:37,500 --> 00:13:40,529
the tree rather<font color="#E5E5E5"> than reading line by</font>

380
00:13:39,180 --> 00:13:43,109
line without really understanding the

381
00:13:40,529 --> 00:13:45,269
context hey<font color="#E5E5E5"> this is a lot</font><font color="#CCCCCC"> faster because</font>

382
00:13:43,110 --> 00:13:47,370
<font color="#CCCCCC">if you're searching back up a tree of</font>

383
00:13:45,269 --> 00:13:48,600
<font color="#E5E5E5">source code that's an awful lot faster</font>

384
00:13:47,370 --> 00:13:51,389
than reading back through a thousand

385
00:13:48,600 --> 00:13:53,220
line text file and but be it provides

386
00:13:51,389 --> 00:13:54,899
the opportunity for far fewer false

387
00:13:53,220 --> 00:13:57,930
positives because you have much greater

388
00:13:54,899 --> 00:14:00,360
understanding of context so now<font color="#E5E5E5"> that</font>

389
00:13:57,930 --> 00:14:03,149
we've built<font color="#E5E5E5"> an abstract syntax tree what</font>

390
00:14:00,360 --> 00:14:06,660
do<font color="#E5E5E5"> we do from there you've got</font><font color="#CCCCCC"> a few</font>

391
00:14:03,149 --> 00:14:08,160
<font color="#CCCCCC">options really</font><font color="#E5E5E5"> and at a basic level you</font>

392
00:14:06,660 --> 00:14:10,769
can search it for dodgy function calls

393
00:14:08,160 --> 00:14:12,120
and<font color="#E5E5E5"> female guards as we mentioned</font>

394
00:14:10,769 --> 00:14:14,040
previously that kind of thing<font color="#E5E5E5"> is quite</font>

395
00:14:12,120 --> 00:14:16,290
<font color="#CCCCCC">easy to do and check in for questionable</font>

396
00:14:14,040 --> 00:14:17,430
in ports and works the same as in

397
00:14:16,290 --> 00:14:19,410
regular expressions but there are a few

398
00:14:17,430 --> 00:14:21,269
<font color="#E5E5E5">other advantages here and hey you've got</font>

399
00:14:19,410 --> 00:14:23,069
<font color="#E5E5E5">fewer false positives as I mentioned the</font>

400
00:14:21,269 --> 00:14:26,480
<font color="#CCCCCC">other thing is</font><font color="#E5E5E5"> it stops you accidentally</font>

401
00:14:23,070 --> 00:14:28,560
pausing comments that kind of thing

402
00:14:26,480 --> 00:14:30,750
generally makes things a bit nicer and

403
00:14:28,560 --> 00:14:31,560
but where this becomes really powerful

404
00:14:30,750 --> 00:14:33,449
you know that's fairly basic

405
00:14:31,560 --> 00:14:36,719
functionality is then when you start

406
00:14:33,449 --> 00:14:40,829
<font color="#E5E5E5">looking at control flow graphs and taint</font>

407
00:14:36,720 --> 00:14:43,399
analysis so let's<font color="#E5E5E5"> take a look at control</font>

408
00:14:40,829 --> 00:14:45,779
flow graphs what is a control flow graph

409
00:14:43,399 --> 00:14:48,329
it's a representation using graph

410
00:14:45,779 --> 00:14:50,310
notation of the paths that<font color="#E5E5E5"> might be</font>

411
00:14:48,329 --> 00:14:53,579
traversed through the program at any

412
00:14:50,310 --> 00:14:55,319
point so<font color="#E5E5E5"> you build essentially a</font>

413
00:14:53,579 --> 00:14:58,229
representation of the possible execution

414
00:14:55,320 --> 00:14:59,880
paths that can be taken<font color="#E5E5E5"> and each basic</font>

415
00:14:58,230 --> 00:15:02,610
block is used as a node and we're

416
00:14:59,880 --> 00:15:04,500
defining a basic block here as something

417
00:15:02,610 --> 00:15:08,660
with a jump targets at the<font color="#E5E5E5"> start and a</font>

418
00:15:04,500 --> 00:15:11,790
jump at<font color="#CCCCCC"> the end and so in the context of</font>

419
00:15:08,660 --> 00:15:14,100
an if statement for example if you<font color="#CCCCCC"> look</font>

420
00:15:11,790 --> 00:15:17,519
at<font color="#E5E5E5"> a over on the left there we have an</font>

421
00:15:14,100 --> 00:15:19,110
<font color="#E5E5E5">if-else branch at the top which then</font>

422
00:15:17,519 --> 00:15:21,839
takes<font color="#E5E5E5"> two different</font><font color="#CCCCCC"> paths</font><font color="#E5E5E5"> depending on</font>

423
00:15:19,110 --> 00:15:24,600
the<font color="#E5E5E5"> the variable you input and then ends</font>

424
00:15:21,839 --> 00:15:25,920
up at the<font color="#CCCCCC"> same point at the end of</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> as</font>

425
00:15:24,600 --> 00:15:29,040
you would<font color="#E5E5E5"> expect an if-else statement</font>

426
00:15:25,920 --> 00:15:32,040
see and in the context of be here what

427
00:15:29,040 --> 00:15:33,120
we've actually got is a while loop or

428
00:15:32,040 --> 00:15:35,099
similar

429
00:15:33,120 --> 00:15:38,250
<font color="#CCCCCC">you've got some</font><font color="#E5E5E5"> kind of loop variable</font>

430
00:15:35,100 --> 00:15:40,500
that has iterate between the top and

431
00:15:38,250 --> 00:15:43,110
second node repeatedly and then when you

432
00:15:40,500 --> 00:15:45,950
reach your your end condition you then

433
00:15:43,110 --> 00:15:50,130
jump out<font color="#CCCCCC"> to the third node highlighted</font>

434
00:15:45,950 --> 00:15:51,680
in the case of see similar only this

435
00:15:50,130 --> 00:15:53,939
time around what we've got actually is a

436
00:15:51,680 --> 00:15:55,709
break cause in your while loop or what

437
00:15:53,940 --> 00:15:58,320
have you<font color="#CCCCCC"> that allows you to jump out</font><font color="#E5E5E5"> to</font>

438
00:15:55,710 --> 00:16:00,120
<font color="#CCCCCC">your own condition at a different point</font>

439
00:15:58,320 --> 00:16:02,750
to the initiative specified end

440
00:16:00,120 --> 00:16:06,120
condition when you start to the loop and

441
00:16:02,750 --> 00:16:08,520
<font color="#CCCCCC">finally</font><font color="#E5E5E5"> D is where someone's decided to</font>

442
00:16:06,120 --> 00:16:10,140
<font color="#E5E5E5">get fancy</font><font color="#CCCCCC"> and there's a to entry points</font>

443
00:16:08,520 --> 00:16:12,329
into<font color="#E5E5E5"> the loop and because someone's</font>

444
00:16:10,140 --> 00:16:18,180
throwing to go to in somewhere up in the

445
00:16:12,330 --> 00:16:19,200
top block so that unfortunately it's

446
00:16:18,180 --> 00:16:20,699
something we see on a fairly regular

447
00:16:19,200 --> 00:16:24,240
basis there's still plenty of<font color="#E5E5E5"> goes who's</font>

448
00:16:20,700 --> 00:16:25,380
kicking about<font color="#CCCCCC"> and so but why should I</font>

449
00:16:24,240 --> 00:16:27,540
care about<font color="#E5E5E5"> these what can we do with</font>

450
00:16:25,380 --> 00:16:29,100
this and the big really powerful thing

451
00:16:27,540 --> 00:16:30,719
here is it allows you to trace the

452
00:16:29,100 --> 00:16:32,970
execution without running<font color="#E5E5E5"> the</font>

453
00:16:30,720 --> 00:16:35,760
application and<font color="#E5E5E5"> so you can use this in</font>

454
00:16:32,970 --> 00:16:37,800
the<font color="#E5E5E5"> context of disassembled malware</font>

455
00:16:35,760 --> 00:16:40,200
binaries if you're not happy running

456
00:16:37,800 --> 00:16:42,060
<font color="#E5E5E5">malware funnily enough and then that's</font>

457
00:16:40,200 --> 00:16:44,490
quite a powerful tool there and but also

458
00:16:42,060 --> 00:16:46,290
in the context of trying to find SQL

459
00:16:44,490 --> 00:16:48,420
injection cross-site scripting buffer

460
00:16:46,290 --> 00:16:51,180
overflows these kind of vulnerabilities

461
00:16:48,420 --> 00:16:52,800
you can use<font color="#CCCCCC"> it to trace the endpoint of</font>

462
00:16:51,180 --> 00:16:55,890
data back<font color="#CCCCCC"> to where it originally came</font>

463
00:16:52,800 --> 00:16:57,060
from which we'll see in a second at the

464
00:16:55,890 --> 00:16:59,580
rich yet so the powerful thing here

465
00:16:57,060 --> 00:17:01,020
really<font color="#E5E5E5"> is that if the</font><font color="#CCCCCC"> data was sanitized</font>

466
00:16:59,580 --> 00:17:02,700
several function calls go back in

467
00:17:01,020 --> 00:17:04,349
another source file you can trace your

468
00:17:02,700 --> 00:17:06,000
way back<font color="#CCCCCC"> up the control flow graph in</font>

469
00:17:04,349 --> 00:17:07,349
order<font color="#E5E5E5"> to find whether the data was</font>

470
00:17:06,000 --> 00:17:08,609
sanitized<font color="#CCCCCC"> the opportunity user in</font>

471
00:17:07,349 --> 00:17:10,559
putting it and actually being<font color="#E5E5E5"> used in</font>

472
00:17:08,609 --> 00:17:12,780
the application<font color="#CCCCCC"> and that's really quite</font>

473
00:17:10,559 --> 00:17:15,109
powerful so as an example here I've just

474
00:17:12,780 --> 00:17:17,819
thrown some PHP up on the board and

475
00:17:15,109 --> 00:17:19,169
we've got a<font color="#CCCCCC"> login function of some sort</font>

476
00:17:17,819 --> 00:17:21,629
that decides whether users logged in or

477
00:17:19,170 --> 00:17:24,630
not and that then calls<font color="#CCCCCC"> a query function</font>

478
00:17:21,630 --> 00:17:29,250
the query takes some input and returns

479
00:17:24,630 --> 00:17:31,890
the<font color="#E5E5E5"> result of the query so your analyzer</font>

480
00:17:29,250 --> 00:17:34,500
piles use the code scans right the way

481
00:17:31,890 --> 00:17:36,059
through discovers there's this MySQL

482
00:17:34,500 --> 00:17:38,580
query statement kicking around down the

483
00:17:36,059 --> 00:17:41,070
bottom and at<font color="#CCCCCC"> first glance that looks</font>

484
00:17:38,580 --> 00:17:43,560
pretty<font color="#E5E5E5"> bad you know you've got variables</font>

485
00:17:41,070 --> 00:17:45,120
just being plunked straight into an SQL

486
00:17:43,560 --> 00:17:46,919
query without any kind<font color="#E5E5E5"> of filtering and</font>

487
00:17:45,120 --> 00:17:49,290
but<font color="#E5E5E5"> because the analyzer</font>

488
00:17:46,920 --> 00:17:52,200
got the context at this point it doesn't

489
00:17:49,290 --> 00:17:54,330
immediately<font color="#CCCCCC"> flag</font><font color="#E5E5E5"> it so what it does it</font>

490
00:17:52,200 --> 00:17:55,680
says okay so what function way you know

491
00:17:54,330 --> 00:17:57,689
this function log inquiry has been

492
00:17:55,680 --> 00:17:59,490
called and we can see<font color="#CCCCCC"> that</font><font color="#E5E5E5"> as part of</font>

493
00:17:57,690 --> 00:18:02,070
that function called the two<font color="#E5E5E5"> variables</font>

494
00:17:59,490 --> 00:18:03,840
that we're passing now into the the

495
00:18:02,070 --> 00:18:06,090
query statement have been<font color="#E5E5E5"> passed in</font>

496
00:18:03,840 --> 00:18:09,209
there so what you then do is look for

497
00:18:06,090 --> 00:18:12,389
<font color="#E5E5E5">where that function was cool we know</font>

498
00:18:09,210 --> 00:18:13,890
that was up here and so from there you

499
00:18:12,390 --> 00:18:15,810
can see ok<font color="#E5E5E5"> so again this username and</font>

500
00:18:13,890 --> 00:18:17,460
passwords been passed in and where's

501
00:18:15,810 --> 00:18:19,429
<font color="#E5E5E5">that come from that's come from the</font>

502
00:18:17,460 --> 00:18:21,420
original function call here again

503
00:18:19,430 --> 00:18:23,370
username and password being passed in

504
00:18:21,420 --> 00:18:25,470
and that came from here and at this

505
00:18:23,370 --> 00:18:27,510
point the analyzer understands that

506
00:18:25,470 --> 00:18:29,790
dollar underscore post variables are

507
00:18:27,510 --> 00:18:31,470
coming in from the user there's no

508
00:18:29,790 --> 00:18:34,470
filtering going on that's just straight

509
00:18:31,470 --> 00:18:36,320
in from from the web server and so at

510
00:18:34,470 --> 00:18:38,640
<font color="#CCCCCC">that point your analyzer can flag</font>

511
00:18:36,320 --> 00:18:41,580
there's been no sanitization this is

512
00:18:38,640 --> 00:18:42,930
probably an SQL injection beta so you

513
00:18:41,580 --> 00:18:45,090
should go do something about it will

514
00:18:42,930 --> 00:18:47,730
flag this now and so if<font color="#E5E5E5"> you just run a</font>

515
00:18:45,090 --> 00:18:49,169
regex over it and look for query strings

516
00:18:47,730 --> 00:18:50,580
where<font color="#E5E5E5"> you're just</font><font color="#CCCCCC"> passing those in in</font>

517
00:18:49,170 --> 00:18:52,530
this context you'd have found<font color="#E5E5E5"> it and</font>

518
00:18:50,580 --> 00:18:54,419
that's great<font color="#E5E5E5"> but equally I've seen</font>

519
00:18:52,530 --> 00:18:56,070
plenty of code where people<font color="#E5E5E5"> sanitize</font>

520
00:18:54,420 --> 00:18:58,830
user input as soon as they get it<font color="#E5E5E5"> and</font>

521
00:18:56,070 --> 00:19:00,540
then pass it in down at a later point at

522
00:18:58,830 --> 00:19:01,679
which<font color="#E5E5E5"> point</font><font color="#CCCCCC"> you're your regular</font>

523
00:19:00,540 --> 00:19:03,210
expression scanning is just<font color="#E5E5E5"> going to</font>

524
00:19:01,680 --> 00:19:05,880
find<font color="#CCCCCC"> I'll look at all these SQL</font>

525
00:19:03,210 --> 00:19:07,890
statements you know you<font color="#E5E5E5"> find 150 in a</font>

526
00:19:05,880 --> 00:19:10,260
web application in 149 of them are

527
00:19:07,890 --> 00:19:12,060
actually protected and but who wants to

528
00:19:10,260 --> 00:19:16,830
sit<font color="#E5E5E5"> down and read through 149 false</font>

529
00:19:12,060 --> 00:19:20,190
positives right so they have some

530
00:19:16,830 --> 00:19:21,389
downsides as i said before higher

531
00:19:20,190 --> 00:19:22,710
upfront<font color="#CCCCCC"> costs to develop they are</font>

532
00:19:21,390 --> 00:19:25,290
significantly<font color="#CCCCCC"> more computationally</font>

533
00:19:22,710 --> 00:19:26,760
intensive and the research that led to

534
00:19:25,290 --> 00:19:28,230
<font color="#E5E5E5">me during this presentation came from a</font>

535
00:19:26,760 --> 00:19:31,170
client project that we did where we

536
00:19:28,230 --> 00:19:33,870
moved from some fairly simple grep bash

537
00:19:31,170 --> 00:19:35,610
scripts over to a static analyzer and it

538
00:19:33,870 --> 00:19:37,909
went<font color="#CCCCCC"> from about a 30 second run time on</font>

539
00:19:35,610 --> 00:19:39,840
this code base up to about 20 minutes

540
00:19:37,910 --> 00:19:40,920
mainly because<font color="#CCCCCC"> i</font><font color="#E5E5E5"> wrote it in python</font>

541
00:19:39,840 --> 00:19:43,050
obviously not the most efficient

542
00:19:40,920 --> 00:19:44,460
languages but it gives<font color="#E5E5E5"> you an idea of</font>

543
00:19:43,050 --> 00:19:51,450
the<font color="#CCCCCC"> kind of computational overhead that</font>

544
00:19:44,460 --> 00:19:53,220
<font color="#E5E5E5">these bring to the table so the thing</font><font color="#CCCCCC"> to</font>

545
00:19:51,450 --> 00:19:54,360
note though is despite these being

546
00:19:53,220 --> 00:19:56,760
awesome you can do some amazing things

547
00:19:54,360 --> 00:19:58,500
with them they do all<font color="#E5E5E5"> still fit into the</font>

548
00:19:56,760 --> 00:19:59,910
bigger picture you can't just run static

549
00:19:58,500 --> 00:20:00,160
analysis tools and expect them to<font color="#E5E5E5"> solve</font>

550
00:19:59,910 --> 00:20:01,870
all

551
00:20:00,160 --> 00:20:04,570
problems either as a developer or as a

552
00:20:01,870 --> 00:20:06,040
security consultant and you know they

553
00:20:04,570 --> 00:20:07,540
need to fit in<font color="#E5E5E5"> with the traditional</font>

554
00:20:06,040 --> 00:20:08,800
manual code review fuzzing functional

555
00:20:07,540 --> 00:20:10,180
testing and all the other kinds of

556
00:20:08,800 --> 00:20:11,770
assessment techniques they're already

557
00:20:10,180 --> 00:20:15,910
used it's just another tool in your

558
00:20:11,770 --> 00:20:17,470
arsenal but having<font color="#CCCCCC"> said that how how</font>

559
00:20:15,910 --> 00:20:21,790
these tools most beneficial to you

560
00:20:17,470 --> 00:20:25,090
depending on your on your<font color="#CCCCCC"> use case so</font>

561
00:20:21,790 --> 00:20:26,980
let's<font color="#E5E5E5"> start with bug hunters I'm going</font>

562
00:20:25,090 --> 00:20:28,659
<font color="#CCCCCC">to</font><font color="#E5E5E5"> define bug hunters here as security</font>

563
00:20:26,980 --> 00:20:30,580
consultants people<font color="#E5E5E5"> do bug bounties</font><font color="#CCCCCC"> with</font>

564
00:20:28,660 --> 00:20:32,170
a guy access to the source code people

565
00:20:30,580 --> 00:20:34,689
looking 40 days to sell to the Chinese

566
00:20:32,170 --> 00:20:36,550
whatever it is<font color="#E5E5E5"> that they they want to be</font>

567
00:20:34,690 --> 00:20:38,470
<font color="#E5E5E5">doing but not people working on building</font>

568
00:20:36,550 --> 00:20:40,270
the software in the first place<font color="#CCCCCC"> and then</font>

569
00:20:38,470 --> 00:20:43,710
developers being<font color="#E5E5E5"> people who build</font>

570
00:20:40,270 --> 00:20:46,810
software who care about their security

571
00:20:43,710 --> 00:20:49,150
so as a bug hunter why do you care

572
00:20:46,810 --> 00:20:51,970
there's a few quite useful use cases for

573
00:20:49,150 --> 00:20:53,710
for these tools<font color="#E5E5E5"> and 3 i'm going to</font>

574
00:20:51,970 --> 00:20:55,360
highlight here<font color="#E5E5E5"> are target identification</font>

575
00:20:53,710 --> 00:20:56,950
finding a<font color="#E5E5E5"> projects go after in the first</font>

576
00:20:55,360 --> 00:20:59,199
place finally a few low hanging fruit

577
00:20:56,950 --> 00:21:00,820
once you get there but also let's<font color="#E5E5E5"> say</font>

578
00:20:59,200 --> 00:21:02,080
there aren't any<font color="#CCCCCC"> low-hanging fruit it's</font>

579
00:21:00,820 --> 00:21:04,030
probably<font color="#CCCCCC"> going to give you an</font><font color="#E5E5E5"> idea of</font>

580
00:21:02,080 --> 00:21:08,290
where the ropey parts within a code base

581
00:21:04,030 --> 00:21:10,300
are so to start with we're going<font color="#E5E5E5"> to</font>

582
00:21:08,290 --> 00:21:12,970
download source for a bunch<font color="#E5E5E5"> of projects</font>

583
00:21:10,300 --> 00:21:14,740
<font color="#E5E5E5">that I've got got bounties out and and</font>

584
00:21:12,970 --> 00:21:17,470
we're going to<font color="#E5E5E5"> pick an analyzer and run</font>

585
00:21:14,740 --> 00:21:19,990
the analyzer across all of<font color="#E5E5E5"> them so in</font>

586
00:21:17,470 --> 00:21:22,420
this case<font color="#E5E5E5"> I picked floor finder which is</font>

587
00:21:19,990 --> 00:21:24,970
a parser that<font color="#E5E5E5"> does some basically really</font>

588
00:21:22,420 --> 00:21:26,320
<font color="#E5E5E5">dumb regex</font><font color="#CCCCCC"> tile scanning and essentially</font>

589
00:21:24,970 --> 00:21:28,420
<font color="#E5E5E5">only uses the</font><font color="#CCCCCC"> parlor</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> order</font><font color="#E5E5E5"> to make</font>

590
00:21:26,320 --> 00:21:29,919
<font color="#CCCCCC">sure</font><font color="#E5E5E5"> that it's not reading comments or</font>

591
00:21:28,420 --> 00:21:32,230
other junk it's purely reading the

592
00:21:29,920 --> 00:21:35,020
actual source code and I run this across

593
00:21:32,230 --> 00:21:37,270
four different<font color="#E5E5E5"> SSL libraries embed TLS</font>

594
00:21:35,020 --> 00:21:39,040
is polarizer<font color="#CCCCCC"> cells new name in case</font>

595
00:21:37,270 --> 00:21:41,410
anyone wasn't aware of<font color="#E5E5E5"> that but you can</font>

596
00:21:39,040 --> 00:21:43,600
see from that<font color="#E5E5E5"> quite quickly the openssl</font>

597
00:21:41,410 --> 00:21:45,220
would make by far the most sense to go

598
00:21:43,600 --> 00:21:46,480
after given that it's got half as many

599
00:21:45,220 --> 00:21:48,370
alerts again as any of<font color="#E5E5E5"> the other</font>

600
00:21:46,480 --> 00:21:49,840
libraries there's a<font color="#E5E5E5"> reason that people</font>

601
00:21:48,370 --> 00:21:52,139
are finding heart bleeding things in it

602
00:21:49,840 --> 00:21:54,520
and it's<font color="#CCCCCC"> been spun off as leave our ssl</font>

603
00:21:52,140 --> 00:21:56,440
so the kind of stuff that floor finder

604
00:21:54,520 --> 00:22:00,520
gives you back<font color="#E5E5E5"> is a report that looks</font>

605
00:21:56,440 --> 00:22:03,940
<font color="#E5E5E5">like this so we found p KS p kc s 11 see</font>

606
00:22:00,520 --> 00:22:07,960
online 871 is using string coffee and

607
00:22:03,940 --> 00:22:09,100
and that in love itself you know<font color="#CCCCCC"> maybe</font>

608
00:22:07,960 --> 00:22:10,510
that's not<font color="#E5E5E5"> that important because</font>

609
00:22:09,100 --> 00:22:13,270
they've already checked sizes and what

610
00:22:10,510 --> 00:22:14,050
their string copying but generally

611
00:22:13,270 --> 00:22:15,670
speaking

612
00:22:14,050 --> 00:22:18,850
not good you should probably<font color="#CCCCCC"> be using</font>

613
00:22:15,670 --> 00:22:21,040
<font color="#CCCCCC">one of</font><font color="#E5E5E5"> the cycle functions so you'll</font>

614
00:22:18,850 --> 00:22:23,169
<font color="#E5E5E5">find if you run floor finder across one</font>

615
00:22:21,040 --> 00:22:26,440
of these a big long list of all of<font color="#E5E5E5"> these</font>

616
00:22:23,170 --> 00:22:28,090
kinds of things and so that gives you an

617
00:22:26,440 --> 00:22:31,420
idea of where you might<font color="#E5E5E5"> want to start</font>

618
00:22:28,090 --> 00:22:32,889
<font color="#E5E5E5">looking and it's also really good for</font>

619
00:22:31,420 --> 00:22:34,300
<font color="#E5E5E5">picking up a lot</font><font color="#CCCCCC"> of the the lower</font>

620
00:22:32,890 --> 00:22:37,540
hanging fruits and actually some

621
00:22:34,300 --> 00:22:40,810
slightly more complex bugs too and we

622
00:22:37,540 --> 00:22:43,750
talked already<font color="#E5E5E5"> about using st. analysis</font>

623
00:22:40,810 --> 00:22:45,940
essentially to look for your data sinks

624
00:22:43,750 --> 00:22:47,290
and then tracing back up your control

625
00:22:45,940 --> 00:22:50,590
flow graph in order to understand where

626
00:22:47,290 --> 00:22:51,790
that date has come<font color="#E5E5E5"> from that's quite</font>

627
00:22:50,590 --> 00:22:55,689
powerful for spotting a lot of the

628
00:22:51,790 --> 00:22:59,170
classic user input type attack vectors

629
00:22:55,690 --> 00:23:02,440
and but moving on from that actually

630
00:22:59,170 --> 00:23:05,020
you've also got<font color="#CCCCCC"> user after free</font>

631
00:23:02,440 --> 00:23:07,240
detection to some degree as a<font color="#E5E5E5"> result of</font>

632
00:23:05,020 --> 00:23:08,920
<font color="#E5E5E5">having this control flow graph and B you</font>

633
00:23:07,240 --> 00:23:10,930
can track points<font color="#E5E5E5"> or allocation and</font>

634
00:23:08,920 --> 00:23:12,220
de-allocation as you go through<font color="#E5E5E5"> the</font>

635
00:23:10,930 --> 00:23:13,600
application you can look at all the

636
00:23:12,220 --> 00:23:15,520
different execution paths<font color="#E5E5E5"> because you</font>

637
00:23:13,600 --> 00:23:18,699
know that because<font color="#E5E5E5"> you built your control</font>

638
00:23:15,520 --> 00:23:20,200
flow graph and you can use that by

639
00:23:18,700 --> 00:23:23,560
keeping track in order to detect whether

640
00:23:20,200 --> 00:23:25,810
someone is referencing a pointer after

641
00:23:23,560 --> 00:23:27,010
it's already been deallocated likewise

642
00:23:25,810 --> 00:23:28,720
<font color="#E5E5E5">you can use that to check for things</font>

643
00:23:27,010 --> 00:23:30,670
like<font color="#E5E5E5"> double freeing of memory and so on</font>

644
00:23:28,720 --> 00:23:31,780
<font color="#E5E5E5">and so forth and because you have</font><font color="#CCCCCC"> that</font>

645
00:23:30,670 --> 00:23:33,910
context and you have this understanding

646
00:23:31,780 --> 00:23:37,180
of how<font color="#E5E5E5"> the data is flowed through the</font>

647
00:23:33,910 --> 00:23:39,420
<font color="#E5E5E5">application so to give you some examples</font>

648
00:23:37,180 --> 00:23:43,540
<font color="#E5E5E5">of</font><font color="#CCCCCC"> some tools that you might find useful</font>

649
00:23:39,420 --> 00:23:45,190
for doing some of this stuff floor

650
00:23:43,540 --> 00:23:48,580
finder as I<font color="#E5E5E5"> Illustrated previously good</font>

651
00:23:45,190 --> 00:23:51,040
for C C++ broad it stands<font color="#E5E5E5"> for grep rough</font>

652
00:23:48,580 --> 00:23:52,149
audit and has a bunch of signatures for

653
00:23:51,040 --> 00:23:54,760
a few<font color="#CCCCCC"> different programming languages</font>

654
00:23:52,150 --> 00:23:56,200
and that tends<font color="#E5E5E5"> to generate a lot of</font>

655
00:23:54,760 --> 00:23:58,120
noise and a lot<font color="#CCCCCC"> of false positives but</font>

656
00:23:56,200 --> 00:24:01,030
if you're looking<font color="#CCCCCC"> for target</font>

657
00:23:58,120 --> 00:24:02,080
identification or trying to work out

658
00:24:01,030 --> 00:24:03,490
which areas of the code base are

659
00:24:02,080 --> 00:24:06,490
particularly<font color="#CCCCCC"> ropey that's quite a nice</font>

660
00:24:03,490 --> 00:24:07,750
place to start and if you're using<font color="#E5E5E5"> Java</font>

661
00:24:06,490 --> 00:24:10,540
you might have come across find bugs

662
00:24:07,750 --> 00:24:12,760
previously find security<font color="#E5E5E5"> bugs does I</font>

663
00:24:10,540 --> 00:24:16,030
think it's 80 different classes of bugs

664
00:24:12,760 --> 00:24:17,379
for java web applications mainly and

665
00:24:16,030 --> 00:24:20,260
that will<font color="#E5E5E5"> catch a lot</font><font color="#CCCCCC"> of the low-hanging</font>

666
00:24:17,380 --> 00:24:21,550
fruit or minor issues like incorrect

667
00:24:20,260 --> 00:24:24,250
cookie flags being set you're not

668
00:24:21,550 --> 00:24:26,860
setting<font color="#CCCCCC"> hfcs headers</font><font color="#E5E5E5"> that kind of thing</font>

669
00:24:24,250 --> 00:24:27,970
along<font color="#CCCCCC"> with the sort of</font><font color="#E5E5E5"> the SQL injection</font>

670
00:24:26,860 --> 00:24:31,990
are the user input related

671
00:24:27,970 --> 00:24:33,310
so<font color="#E5E5E5"> I mentioned</font><font color="#CCCCCC"> previously rats is quite</font>

672
00:24:31,990 --> 00:24:35,320
hard<font color="#E5E5E5"> to find a copy of these days it</font>

673
00:24:33,310 --> 00:24:38,260
turns out but most of that's now been

674
00:24:35,320 --> 00:24:39,909
built into a commercial tool fortify but

675
00:24:38,260 --> 00:24:41,260
that covers a number of different<font color="#CCCCCC"> bug</font>

676
00:24:39,910 --> 00:24:44,440
classes for a few different<font color="#E5E5E5"> languages</font>

677
00:24:41,260 --> 00:24:46,510
and rips works really quite nicely on

678
00:24:44,440 --> 00:24:47,860
PHP there's two versions of it now it

679
00:24:46,510 --> 00:24:49,390
used to be open source is now an open

680
00:24:47,860 --> 00:24:51,219
source in<font color="#E5E5E5"> the commercial the commercial</font>

681
00:24:49,390 --> 00:24:52,870
<font color="#CCCCCC">does a lot more of</font><font color="#E5E5E5"> the the in depth</font>

682
00:24:51,220 --> 00:24:54,490
control flow graph<font color="#E5E5E5"> analysis and so on</font>

683
00:24:52,870 --> 00:24:55,899
<font color="#CCCCCC">the than the open source one but the</font>

684
00:24:54,490 --> 00:24:58,750
open source one will still catch quite a

685
00:24:55,900 --> 00:25:02,860
lot<font color="#CCCCCC"> and if you're using Ruby on Rails</font>

686
00:24:58,750 --> 00:25:05,260
then break man's also quite nice if

687
00:25:02,860 --> 00:25:07,810
you're going<font color="#E5E5E5"> to do what I</font><font color="#CCCCCC"> did he says</font>

688
00:25:05,260 --> 00:25:10,510
with its<font color="#CCCCCC"> clicca not working and build</font>

689
00:25:07,810 --> 00:25:13,570
<font color="#CCCCCC">your own then there's a few options for</font>

690
00:25:10,510 --> 00:25:15,670
that as well<font color="#CCCCCC"> so the analyzer built into</font>

691
00:25:13,570 --> 00:25:18,520
clang is really quite powerful as is and

692
00:25:15,670 --> 00:25:21,160
we'll do a lot of C C++ static analysis

693
00:25:18,520 --> 00:25:22,840
for you simply when you build the build

694
00:25:21,160 --> 00:25:24,370
your source code with it but also

695
00:25:22,840 --> 00:25:25,659
because of the<font color="#E5E5E5"> way clang works and the</font>

696
00:25:24,370 --> 00:25:28,090
way it's been nicely separated separated

697
00:25:25,660 --> 00:25:31,380
out into different chunks of libraries

698
00:25:28,090 --> 00:25:34,419
you can actually<font color="#CCCCCC"> use clangs</font><font color="#E5E5E5"> front end</font>

699
00:25:31,380 --> 00:25:36,250
syntax parser and so on to build an

700
00:25:34,420 --> 00:25:38,710
analyzer off the back<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> abstract</font>

701
00:25:36,250 --> 00:25:40,930
syntax tree<font color="#E5E5E5"> it builds there's quite a</font>

702
00:25:38,710 --> 00:25:43,240
lot<font color="#CCCCCC"> of quite steep learning curve there</font>

703
00:25:40,930 --> 00:25:44,830
and but crying is really really<font color="#E5E5E5"> powerful</font>

704
00:25:43,240 --> 00:25:46,030
so if you're looking<font color="#CCCCCC"> at</font><font color="#E5E5E5"> anything clang</font>

705
00:25:44,830 --> 00:25:47,409
supports and you wanted to<font color="#E5E5E5"> build your</font>

706
00:25:46,030 --> 00:25:49,270
own that'd be<font color="#CCCCCC"> one of the places i</font>

707
00:25:47,410 --> 00:25:51,070
recommend starting if you want something

708
00:25:49,270 --> 00:25:54,280
<font color="#E5E5E5">quick and dirty and you're familiar with</font>

709
00:25:51,070 --> 00:25:56,530
<font color="#E5E5E5">python and then there's a library called</font>

710
00:25:54,280 --> 00:25:58,030
ply and a<font color="#CCCCCC"> variety of different libraries</font>

711
00:25:56,530 --> 00:25:59,470
that build on top of that apply j for

712
00:25:58,030 --> 00:26:01,510
job for example which was what i ended

713
00:25:59,470 --> 00:26:03,100
up using and which will allow you to

714
00:26:01,510 --> 00:26:05,379
<font color="#E5E5E5">create abstract syntax trees out of</font>

715
00:26:03,100 --> 00:26:07,719
inputted source code and it's<font color="#E5E5E5"> pretty</font>

716
00:26:05,380 --> 00:26:10,270
slow like I say pythons not the fastest

717
00:26:07,720 --> 00:26:12,190
the languages in any case and plies not

718
00:26:10,270 --> 00:26:13,629
<font color="#E5E5E5">being terribly well optimized and but as</font>

719
00:26:12,190 --> 00:26:14,350
a quick and<font color="#E5E5E5"> dirty starting point where</font>

720
00:26:13,630 --> 00:26:16,030
you're<font color="#E5E5E5"> trying to</font><font color="#CCCCCC"> get your head around</font>

721
00:26:14,350 --> 00:26:18,310
how a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of this stuff works that's not</font>

722
00:26:16,030 --> 00:26:19,840
<font color="#CCCCCC">a bad place to go and PI pausing</font>

723
00:26:18,310 --> 00:26:23,710
likewise operates in a similar fashion

724
00:26:19,840 --> 00:26:28,360
<font color="#E5E5E5">to apply and</font><font color="#CCCCCC"> then you get onto some of</font>

725
00:26:23,710 --> 00:26:29,950
the more academically inclined or or

726
00:26:28,360 --> 00:26:32,350
grammar focus tools such as antler and

727
00:26:29,950 --> 00:26:34,210
cocoa and so they require<font color="#CCCCCC"> you</font><font color="#E5E5E5"> to define</font>

728
00:26:32,350 --> 00:26:35,830
a grammar for your<font color="#E5E5E5"> language and</font>

729
00:26:34,210 --> 00:26:37,030
hopefully<font color="#CCCCCC"> for a lot of the</font><font color="#E5E5E5"> major</font>

730
00:26:35,830 --> 00:26:38,860
languages people have already defined

731
00:26:37,030 --> 00:26:41,170
grammars and posted on the<font color="#CCCCCC"> internet but</font>

732
00:26:38,860 --> 00:26:45,370
<font color="#E5E5E5">you can then use that to generate</font>

733
00:26:41,170 --> 00:26:46,540
code for Java or Python or C I think

734
00:26:45,370 --> 00:26:49,659
there's a<font color="#CCCCCC"> couple of others they support</font>

735
00:26:46,540 --> 00:26:52,060
which allow you to<font color="#E5E5E5"> also generate most of</font>

736
00:26:49,660 --> 00:26:54,550
the<font color="#E5E5E5"> croft for parsing your language and</font>

737
00:26:52,060 --> 00:26:56,169
you can then add in your<font color="#E5E5E5"> own functions</font>

738
00:26:54,550 --> 00:26:57,430
for<font color="#CCCCCC"> okay I've come across a variable</font>

739
00:26:56,170 --> 00:26:58,780
what do I do<font color="#E5E5E5"> with it I've come across an</font>

740
00:26:57,430 --> 00:27:00,670
if statement what do I do with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and</font>

741
00:26:58,780 --> 00:27:05,320
which<font color="#CCCCCC"> you can then build on in</font><font color="#E5E5E5"> order to</font>

742
00:27:00,670 --> 00:27:09,010
build your<font color="#E5E5E5"> own your own analyzer so now</font>

743
00:27:05,320 --> 00:27:13,750
if<font color="#E5E5E5"> I'm a software developer what might I</font>

744
00:27:09,010 --> 00:27:16,240
be interested<font color="#CCCCCC"> in here and the big one</font>

745
00:27:13,750 --> 00:27:18,160
really is how early on you can catch

746
00:27:16,240 --> 00:27:20,170
bugs with static analysis versus waiting

747
00:27:18,160 --> 00:27:21,190
for the traditional<font color="#E5E5E5"> pen testing cycle to</font>

748
00:27:20,170 --> 00:27:24,550
come around towards the end of<font color="#E5E5E5"> the</font>

749
00:27:21,190 --> 00:27:25,960
applications release the earlier on you

750
00:27:24,550 --> 00:27:27,669
catch your buggins the development

751
00:27:25,960 --> 00:27:30,790
<font color="#E5E5E5">lifecycle the cheaper it tends to get</font>

752
00:27:27,670 --> 00:27:32,710
and and you can<font color="#E5E5E5"> build these tools in as</font>

753
00:27:30,790 --> 00:27:35,500
part of your existing tool chain or

754
00:27:32,710 --> 00:27:36,790
other tool sets you're using in order<font color="#E5E5E5"> to</font>

755
00:27:35,500 --> 00:27:38,590
<font color="#E5E5E5">make it</font><font color="#CCCCCC"> as easy as possible for you</font>

756
00:27:36,790 --> 00:27:40,090
developers to use it<font color="#E5E5E5"> and if you've got a</font>

757
00:27:38,590 --> 00:27:41,800
large development team you can have one

758
00:27:40,090 --> 00:27:43,000
or two experienced developers or people

759
00:27:41,800 --> 00:27:46,149
who<font color="#E5E5E5"> understand the security implications</font>

760
00:27:43,000 --> 00:27:48,190
of some of these bugs build your tooling

761
00:27:46,150 --> 00:27:49,780
for it and then hand<font color="#E5E5E5"> it off to everyone</font>

762
00:27:48,190 --> 00:27:52,540
<font color="#E5E5E5">so that you've</font><font color="#CCCCCC"> got the same level</font><font color="#E5E5E5"> of</font>

763
00:27:49,780 --> 00:27:54,430
static analysis checking being done both

764
00:27:52,540 --> 00:27:58,149
by your 20 year veterans and the interns

765
00:27:54,430 --> 00:28:00,220
you've hired in for the summer so one<font color="#CCCCCC"> of</font>

766
00:27:58,150 --> 00:28:01,540
the places this is really<font color="#E5E5E5"> powerful is in</font>

767
00:28:00,220 --> 00:28:04,060
the context of continuous integration

768
00:28:01,540 --> 00:28:05,379
and so some of you will no doubt<font color="#CCCCCC"> I've</font>

769
00:28:04,060 --> 00:28:07,300
seen a bit of<font color="#CCCCCC"> the buzz web being thrown</font>

770
00:28:05,380 --> 00:28:08,560
around essentially the idea is every

771
00:28:07,300 --> 00:28:10,360
time someone checks code into<font color="#E5E5E5"> the</font>

772
00:28:08,560 --> 00:28:12,610
central repository you compile it or

773
00:28:10,360 --> 00:28:14,740
interpret it run the tests across<font color="#E5E5E5"> the</font>

774
00:28:12,610 --> 00:28:15,879
test suite across it and and then

775
00:28:14,740 --> 00:28:17,260
there's a report as to<font color="#CCCCCC"> whether</font><font color="#E5E5E5"> your</font>

776
00:28:15,880 --> 00:28:18,750
build failed or succeeded and then

777
00:28:17,260 --> 00:28:20,710
whether the test suite did likewise and

778
00:28:18,750 --> 00:28:23,050
which means that<font color="#E5E5E5"> every time someone</font>

779
00:28:20,710 --> 00:28:24,370
pushes new code to the<font color="#E5E5E5"> repository it</font>

780
00:28:23,050 --> 00:28:26,320
gets checked for bugs in a fashion that

781
00:28:24,370 --> 00:28:27,550
everyone can keep track of and so you've

782
00:28:26,320 --> 00:28:29,129
probably seen some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the tooling that's</font>

783
00:28:27,550 --> 00:28:31,659
been used<font color="#E5E5E5"> for this kicking about and</font>

784
00:28:29,130 --> 00:28:33,130
<font color="#E5E5E5">Jenkins and Hudson are two of the major</font>

785
00:28:31,660 --> 00:28:35,440
ones you've<font color="#CCCCCC"> got some commercial</font>

786
00:28:33,130 --> 00:28:37,600
offerings from Microsoft and elastin and

787
00:28:35,440 --> 00:28:39,220
<font color="#E5E5E5">Travis is also fairly big and</font>

788
00:28:37,600 --> 00:28:40,600
incidentally<font color="#CCCCCC"> if you ever on a network</font>

789
00:28:39,220 --> 00:28:42,460
<font color="#E5E5E5">pen testing you find one of these</font>

790
00:28:40,600 --> 00:28:44,530
running they're usually a goldmine for

791
00:28:42,460 --> 00:28:47,260
remote command<font color="#CCCCCC"> and code execution and</font>

792
00:28:44,530 --> 00:28:49,149
<font color="#CCCCCC">Jenkins for instance by default has no</font>

793
00:28:47,260 --> 00:28:51,220
default credentials and you can upload

794
00:28:49,150 --> 00:28:52,540
<font color="#E5E5E5">your</font><font color="#CCCCCC"> own build scripts and just hand it</font>

795
00:28:51,220 --> 00:28:52,840
a bash script for it to go run on the

796
00:28:52,540 --> 00:28:56,590
server

797
00:28:52,840 --> 00:28:58,870
so that's quite<font color="#CCCCCC"> good fun but broadly</font>

798
00:28:56,590 --> 00:29:00,490
speaking the workflow that most<font color="#CCCCCC"> CIS</font>

799
00:28:58,870 --> 00:29:02,889
follow is developer checks in<font color="#E5E5E5"> Kota</font>

800
00:29:00,490 --> 00:29:04,299
central repository server compiles

801
00:29:02,890 --> 00:29:05,950
interpret et cetera test suites are

802
00:29:04,299 --> 00:29:08,710
automatically run as part of<font color="#CCCCCC"> that and</font><font color="#E5E5E5"> so</font>

803
00:29:05,950 --> 00:29:10,809
we<font color="#CCCCCC"> bolt our static analyzer in there and</font>

804
00:29:08,710 --> 00:29:12,640
so most of the tooling this is Jenkins

805
00:29:10,809 --> 00:29:14,320
but most of<font color="#E5E5E5"> them will provide you a nice</font>

806
00:29:12,640 --> 00:29:15,789
little graph that shows whether you're

807
00:29:14,320 --> 00:29:19,139
passing or failing and how how much

808
00:29:15,789 --> 00:29:19,140
you're passing and failing and so on and

809
00:29:19,320 --> 00:29:24,240
but catching introduces issues as

810
00:29:21,880 --> 00:29:26,980
they're introduced to the code base is

811
00:29:24,240 --> 00:29:29,110
so so<font color="#E5E5E5"> much better than catching them</font>

812
00:29:26,980 --> 00:29:30,309
right at the end you it<font color="#CCCCCC"> costs</font><font color="#E5E5E5"> you so</font>

813
00:29:29,110 --> 00:29:32,110
much less you have the developer who

814
00:29:30,309 --> 00:29:33,850
developed it there and then<font color="#CCCCCC"> he sees it</font>

815
00:29:32,110 --> 00:29:36,039
as<font color="#CCCCCC"> his mind is in the phone in the set</font>

816
00:29:33,850 --> 00:29:37,480
of that code he understands it instead I

817
00:29:36,039 --> 00:29:39,309
went to come back six<font color="#CCCCCC"> months later and</font>

818
00:29:37,480 --> 00:29:44,440
go what was this pearl I wrote I can't

819
00:29:39,309 --> 00:29:45,730
read it and catching regressions in code

820
00:29:44,440 --> 00:29:48,399
before they hit production as people

821
00:29:45,730 --> 00:29:50,110
<font color="#CCCCCC">introduced bug fixes is really quite</font>

822
00:29:48,399 --> 00:29:52,120
powerful<font color="#CCCCCC"> too I've got a case study we'll</font>

823
00:29:50,110 --> 00:29:54,219
talk about that in a second and but also

824
00:29:52,120 --> 00:29:56,260
the fact that it runs automatically with

825
00:29:54,220 --> 00:29:58,600
no developer input required beyond their

826
00:29:56,260 --> 00:30:00,640
usual check encoding means that people

827
00:29:58,600 --> 00:30:02,529
can't escape the tests there's no oh i

828
00:30:00,640 --> 00:30:03,789
forgot to run the static analyzer<font color="#E5E5E5"> that</font>

829
00:30:02,529 --> 00:30:06,370
time around and<font color="#E5E5E5"> i'll look these bugs</font>

830
00:30:03,789 --> 00:30:08,649
slip through the net and it all happens

831
00:30:06,370 --> 00:30:09,610
automatically and so as an example of

832
00:30:08,649 --> 00:30:11,260
where it would<font color="#CCCCCC"> have been really useful</font>

833
00:30:09,610 --> 00:30:13,059
for someone<font color="#CCCCCC"> marks and spencers had a</font>

834
00:30:11,260 --> 00:30:15,970
fairly major data breach back in october

835
00:30:13,059 --> 00:30:17,590
2015 where as part of a bug fix or

836
00:30:15,970 --> 00:30:20,230
feature enhancement or whatever a

837
00:30:17,590 --> 00:30:21,580
developer managed to make it<font color="#E5E5E5"> so that</font>

838
00:30:20,230 --> 00:30:22,840
when you logged in<font color="#E5E5E5"> to M&S you were</font>

839
00:30:21,580 --> 00:30:24,760
presented with someone else's user

840
00:30:22,840 --> 00:30:26,980
details including partial credit card

841
00:30:24,760 --> 00:30:28,149
numbers so it took him about two or

842
00:30:26,980 --> 00:30:30,210
three hours to find and fix that

843
00:30:28,149 --> 00:30:33,279
meanwhile it was up on the<font color="#E5E5E5"> live site and</font>

844
00:30:30,210 --> 00:30:34,690
or as if you'd had a decent set<font color="#E5E5E5"> of test</font>

845
00:30:33,279 --> 00:30:37,149
suites as part of your continuous

846
00:30:34,690 --> 00:30:38,890
integration you know you could have

847
00:30:37,149 --> 00:30:42,189
<font color="#E5E5E5">caught that by using appropriate test</font>

848
00:30:38,890 --> 00:30:44,110
data and static analysis wouldn't have

849
00:30:42,190 --> 00:30:45,730
been particularly useful in that that

850
00:30:44,110 --> 00:30:48,399
particular by example but it shows where

851
00:30:45,730 --> 00:30:49,840
that<font color="#E5E5E5"> kind of automated testing from a</font>

852
00:30:48,399 --> 00:30:52,629
security perspective makes an awful lot

853
00:30:49,840 --> 00:30:55,240
of<font color="#E5E5E5"> sense and if you're a developer and</font>

854
00:30:52,630 --> 00:30:57,039
you're short on time<font color="#E5E5E5"> like a lot</font>

855
00:30:55,240 --> 00:30:58,390
developers are and you might be<font color="#E5E5E5"> better</font>

856
00:30:57,039 --> 00:31:00,399
off buying in a commercial static

857
00:30:58,390 --> 00:31:02,679
analysis tool and so there's a<font color="#CCCCCC"> few</font>

858
00:31:00,399 --> 00:31:04,750
examples<font color="#E5E5E5"> up here I've pulled up and a</font>

859
00:31:02,679 --> 00:31:05,430
<font color="#CCCCCC">verra code Coverity fortified</font><font color="#E5E5E5"> check</font>

860
00:31:04,750 --> 00:31:06,990
<font color="#E5E5E5">marks clock</font>

861
00:31:05,430 --> 00:31:08,880
you've<font color="#E5E5E5"> probably seen a few of these</font>

862
00:31:06,990 --> 00:31:10,230
<font color="#E5E5E5">names kicking about security conferences</font>

863
00:31:08,880 --> 00:31:12,000
and things especially if any of you were

864
00:31:10,230 --> 00:31:16,890
unfortunate enough to take a trip to

865
00:31:12,000 --> 00:31:19,230
<font color="#CCCCCC">infosec these tend to be very powerful</font>

866
00:31:16,890 --> 00:31:20,820
once they're built right they require an

867
00:31:19,230 --> 00:31:22,320
awful lot of tuning of<font color="#E5E5E5"> the rule sets</font>

868
00:31:20,820 --> 00:31:24,270
writing<font color="#CCCCCC"> your own custom rules and so on</font>

869
00:31:22,320 --> 00:31:25,939
<font color="#E5E5E5">and so forth in order to tune down the</font>

870
00:31:24,270 --> 00:31:28,110
amount<font color="#E5E5E5"> of false positives they generate</font>

871
00:31:25,940 --> 00:31:29,580
it's well worth taking<font color="#CCCCCC"> the time to do</font>

872
00:31:28,110 --> 00:31:31,199
<font color="#CCCCCC">that if you've got a large code base</font><font color="#E5E5E5"> and</font>

873
00:31:29,580 --> 00:31:34,949
a large number of developers but<font color="#E5E5E5"> that</font>

874
00:31:31,200 --> 00:31:39,180
<font color="#E5E5E5">plus the the initial licensing costs can</font>

875
00:31:34,950 --> 00:31:40,440
make for quite a steep budget and his

876
00:31:39,180 --> 00:31:42,240
I've just pulled a screenshot of

877
00:31:40,440 --> 00:31:44,580
Coverity off the off the internets give

878
00:31:42,240 --> 00:31:46,080
you an<font color="#CCCCCC"> idea of roughly roughly how they</font>

879
00:31:44,580 --> 00:31:47,550
look and how they<font color="#E5E5E5"> work so this has been</font>

880
00:31:46,080 --> 00:31:48,750
<font color="#E5E5E5">run across a large code base you can see</font>

881
00:31:47,550 --> 00:31:50,730
there's a big long list of issues at<font color="#CCCCCC"> the</font>

882
00:31:48,750 --> 00:31:51,990
top and while I'm sure you can't read

883
00:31:50,730 --> 00:31:54,330
that<font color="#E5E5E5"> it says that's found a buffer</font>

884
00:31:51,990 --> 00:31:55,950
overflow and because someone's not been

885
00:31:54,330 --> 00:32:01,050
checking sizes of data being passed

886
00:31:55,950 --> 00:32:02,880
<font color="#E5E5E5">incorrectly and so a few</font><font color="#CCCCCC"> places where us</font>

887
00:32:01,050 --> 00:32:04,080
as security consultants I'm sure I'm not

888
00:32:02,880 --> 00:32:06,300
the only<font color="#E5E5E5"> security consulting in this</font>

889
00:32:04,080 --> 00:32:09,540
audience might be able to help some<font color="#CCCCCC"> of</font>

890
00:32:06,300 --> 00:32:11,129
their clients and in<font color="#E5E5E5"> several ways but</font>

891
00:32:09,540 --> 00:32:13,649
the obvious for that came to mind while

892
00:32:11,130 --> 00:32:15,690
I was writing this and identifying where

893
00:32:13,650 --> 00:32:17,700
the<font color="#E5E5E5"> security risks are likely to lie on</font>

894
00:32:15,690 --> 00:32:20,400
any given code base and whatever your

895
00:32:17,700 --> 00:32:21,930
application you've got situations where

896
00:32:20,400 --> 00:32:23,490
the code is like to<font color="#CCCCCC"> be more security</font>

897
00:32:21,930 --> 00:32:25,140
critical and others let's say you're

898
00:32:23,490 --> 00:32:26,790
writing an<font color="#CCCCCC"> Android</font><font color="#E5E5E5"> app with</font><font color="#CCCCCC"> the masses</font>

899
00:32:25,140 --> 00:32:28,050
of you I<font color="#E5E5E5"> guf that Android requires you</font>

900
00:32:26,790 --> 00:32:30,060
to generate it's probably not going to

901
00:32:28,050 --> 00:32:32,370
<font color="#E5E5E5">cause much</font><font color="#CCCCCC"> of a</font><font color="#E5E5E5"> security risk whereas</font>

902
00:32:30,060 --> 00:32:34,200
your<font color="#CCCCCC"> route detection say if you've got a</font>

903
00:32:32,370 --> 00:32:36,780
fancy app<font color="#E5E5E5"> going on it might be a little</font>

904
00:32:34,200 --> 00:32:38,370
more a little more important and so

905
00:32:36,780 --> 00:32:40,230
understanding where the key points of

906
00:32:38,370 --> 00:32:42,239
<font color="#E5E5E5">your code are helps you to tune the</font><font color="#CCCCCC"> rule</font>

907
00:32:40,230 --> 00:32:44,880
<font color="#CCCCCC">set to focus down on the</font><font color="#E5E5E5"> really</font>

908
00:32:42,240 --> 00:32:47,040
important parts and some<font color="#CCCCCC"> security</font>

909
00:32:44,880 --> 00:32:49,740
consultancies will offer services for

910
00:32:47,040 --> 00:32:51,570
writing custom rules for existing static

911
00:32:49,740 --> 00:32:53,250
analysis engines and what<font color="#E5E5E5"> I talked</font><font color="#CCCCCC"> about</font>

912
00:32:51,570 --> 00:32:56,550
previously with commercial tooling

913
00:32:53,250 --> 00:32:57,960
requiring a lot of tuning and additional

914
00:32:56,550 --> 00:32:59,909
rule writing or to get the most out of

915
00:32:57,960 --> 00:33:01,440
it and you know<font color="#E5E5E5"> hiring someone else in</font>

916
00:32:59,910 --> 00:33:03,720
to do that for<font color="#E5E5E5"> you might make sense and</font>

917
00:33:01,440 --> 00:33:06,720
in the extreme cases where you've got

918
00:33:03,720 --> 00:33:08,610
<font color="#E5E5E5">particularly unusual either environments</font>

919
00:33:06,720 --> 00:33:10,380
and libraries or programming languages

920
00:33:08,610 --> 00:33:13,770
<font color="#E5E5E5">being used it might make</font><font color="#CCCCCC"> sense to be</font>

921
00:33:10,380 --> 00:33:15,450
developing bespoke tools as weeded but

922
00:33:13,770 --> 00:33:19,350
that's a pretty<font color="#E5E5E5"> expensive offer a tire</font>

923
00:33:15,450 --> 00:33:22,470
option for most use cases<font color="#CCCCCC"> and finally</font>

924
00:33:19,350 --> 00:33:24,178
advising on how you can integrate all<font color="#CCCCCC"> of</font>

925
00:33:22,470 --> 00:33:26,600
this tooling best into a development

926
00:33:24,179 --> 00:33:29,520
lifecycle depending on the clients own

927
00:33:26,600 --> 00:33:31,230
environment and needs is also<font color="#E5E5E5"> a place I</font>

928
00:33:29,520 --> 00:33:36,990
<font color="#CCCCCC">think security consultancies can add a</font>

929
00:33:31,230 --> 00:33:39,150
<font color="#E5E5E5">lot of value so conclusions what are we</font>

930
00:33:36,990 --> 00:33:41,250
covered and so static<font color="#E5E5E5"> analysis overall</font>

931
00:33:39,150 --> 00:33:43,710
can provide a lot<font color="#CCCCCC"> of low-cost security</font>

932
00:33:41,250 --> 00:33:46,169
checking for comparatively little effort

933
00:33:43,710 --> 00:33:48,990
for developers and and as a security

934
00:33:46,169 --> 00:33:51,480
consultant will allow you<font color="#E5E5E5"> to find some</font>

935
00:33:48,990 --> 00:33:53,340
classes of bugs quite quickly as soon<font color="#E5E5E5"> as</font>

936
00:33:51,480 --> 00:33:55,409
you sit<font color="#CCCCCC"> down at your</font><font color="#E5E5E5"> at your engagement</font>

937
00:33:53,340 --> 00:33:57,809
and more if your bounty hunting might

938
00:33:55,409 --> 00:34:00,210
help you both work out what targets the

939
00:33:57,809 --> 00:34:03,090
after and also and where to look once

940
00:34:00,210 --> 00:34:04,110
you get there if you are going to go

941
00:34:03,090 --> 00:34:05,129
down the static analysis for it

942
00:34:04,110 --> 00:34:07,260
especially if you're looking at building

943
00:34:05,130 --> 00:34:09,960
your own tooling and while regular

944
00:34:07,260 --> 00:34:11,699
<font color="#CCCCCC">expressions and a few quick bash scripts</font>

945
00:34:09,960 --> 00:34:14,220
running grep over things will catch some

946
00:34:11,699 --> 00:34:15,899
stuff<font color="#E5E5E5"> really and being able to build</font>

947
00:34:14,219 --> 00:34:17,549
abstract syntax trees and then control

948
00:34:15,899 --> 00:34:19,379
flow graphs off that gives you so much

949
00:34:17,550 --> 00:34:21,929
power to<font color="#E5E5E5"> do all kinds of analysis of the</font>

950
00:34:19,379 --> 00:34:23,489
application but it really is worth

951
00:34:21,929 --> 00:34:25,740
<font color="#CCCCCC">looking into doing that</font><font color="#E5E5E5"> if you can and</font>

952
00:34:23,489 --> 00:34:27,509
and at the end of<font color="#E5E5E5"> the day all</font><font color="#CCCCCC"> of these</font>

953
00:34:25,739 --> 00:34:28,979
automated analysis techniques do

954
00:34:27,510 --> 00:34:30,600
complement traditional manual

955
00:34:28,980 --> 00:34:32,010
assessments you're not gonna be

956
00:34:30,600 --> 00:34:36,239
replacing<font color="#E5E5E5"> pen testers with this</font><font color="#CCCCCC"> anytime</font>

957
00:34:32,010 --> 00:34:37,889
<font color="#E5E5E5">soon unfortunately so thank you for</font>

958
00:34:36,239 --> 00:34:39,029
<font color="#CCCCCC">listening and if anyone's got any</font>

959
00:34:37,889 --> 00:34:40,109
questions there is a man at the back

960
00:34:39,030 --> 00:34:41,700
with a mic so if you can stick your

961
00:34:40,109 --> 00:34:45,739
hands up he'll come<font color="#CCCCCC"> around</font><font color="#E5E5E5"> to you with a</font>

962
00:34:41,699 --> 00:34:45,739
microphone and we can get<font color="#E5E5E5"> started</font>

