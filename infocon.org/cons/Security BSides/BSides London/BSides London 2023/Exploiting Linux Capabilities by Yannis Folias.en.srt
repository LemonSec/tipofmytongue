1
00:00:02,820 --> 00:00:06,299
good morning everyone uh my name is

2
00:00:06,299 --> 00:00:09,840
yamis and uh yeah today we're going to

3
00:00:09,840 --> 00:00:12,240
be talking about exploiting Linux kernel

4
00:00:12,240 --> 00:00:12,830
capabilities

5
00:00:12,830 --> 00:00:14,179
[Music]

6
00:00:14,179 --> 00:00:17,699
uh the overall agenda is uh we're gonna

7
00:00:17,699 --> 00:00:20,359
have an overview for lyrics capabilities

8
00:00:20,359 --> 00:00:23,039
we're gonna go through and get your

9
00:00:23,039 --> 00:00:24,900
understanding of why in a Target would

10
00:00:24,900 --> 00:00:28,080
be interested in um in them we're going

11
00:00:28,080 --> 00:00:29,340
to be looking into different ways to

12
00:00:29,340 --> 00:00:31,920
exploit them as well as some mitigation

13
00:00:31,920 --> 00:00:33,480
techniques

14
00:00:33,480 --> 00:00:34,800
[Music]

15
00:00:34,800 --> 00:00:37,640
a little bit about myself

16
00:00:37,640 --> 00:00:40,739
uh I'm working as a security engineer on

17
00:00:40,739 --> 00:00:42,540
behalf of control playing

18
00:00:42,540 --> 00:00:45,480
I spent a few years working as a devops

19
00:00:45,480 --> 00:00:47,460
engineer before getting into Cloud

20
00:00:47,460 --> 00:00:49,680
security I've got a master's degree in

21
00:00:49,680 --> 00:00:52,559
advanced security and digital forensics

22
00:00:52,559 --> 00:00:54,960
I'm offensive security certified and

23
00:00:54,960 --> 00:00:57,800
I've spent the last year of my life

24
00:00:57,800 --> 00:01:00,960
they get into container security and

25
00:01:00,960 --> 00:01:03,420
exploring all different suspects uh

26
00:01:03,420 --> 00:01:05,950
different aspects of container security

27
00:01:05,950 --> 00:01:07,200
[Music]

28
00:01:07,200 --> 00:01:10,700
a little bit how about control playing

29
00:01:10,700 --> 00:01:14,760
uh we are a UK based consultancy a cloud

30
00:01:14,760 --> 00:01:17,479
native security consultancy

31
00:01:17,479 --> 00:01:20,520
established back in 2017

32
00:01:20,520 --> 00:01:22,920
we are actually a bunch of Engineers

33
00:01:22,920 --> 00:01:24,900
specializing in cloud kubernetes and

34
00:01:24,900 --> 00:01:26,159
containers

35
00:01:26,159 --> 00:01:28,979
we've got clients across government

36
00:01:28,979 --> 00:01:31,680
financial institutions regulator

37
00:01:31,680 --> 00:01:33,020
services

38
00:01:33,020 --> 00:01:36,840
at the moment we are like 50 plus

39
00:01:36,840 --> 00:01:39,960
people yeah and uh we're looking into

40
00:01:39,960 --> 00:01:42,780
expanding further if you're interested

41
00:01:42,780 --> 00:01:46,939
please feel free to apply

42
00:01:47,220 --> 00:01:51,360
moving on so yeah before we get into

43
00:01:51,360 --> 00:01:54,360
into the core of uh of this talk which

44
00:01:54,360 --> 00:01:56,420
is um about um

45
00:01:56,420 --> 00:01:59,700
exploiting learning capabilities

46
00:01:59,700 --> 00:02:03,000
I appreciate that some some people might

47
00:02:03,000 --> 00:02:07,560
ask what are Linux capabilities and uh

48
00:02:07,560 --> 00:02:09,840
what are what are they actually trying

49
00:02:09,840 --> 00:02:12,540
to achieve and why were they even

50
00:02:12,540 --> 00:02:14,959
created

51
00:02:15,200 --> 00:02:19,140
and uh it's important to

52
00:02:19,140 --> 00:02:22,980
take a step back and look into what was

53
00:02:22,980 --> 00:02:24,660
happening before

54
00:02:24,660 --> 00:02:27,120
they get introduced into the Linux

55
00:02:27,120 --> 00:02:30,840
kernel this happened before uh kernel

56
00:02:30,840 --> 00:02:32,640
2.2

57
00:02:32,640 --> 00:02:35,819
there were actually two types of

58
00:02:35,819 --> 00:02:38,040
of processes running within the Linux

59
00:02:38,040 --> 00:02:39,300
kernel

60
00:02:39,300 --> 00:02:43,140
they were either privileged running with

61
00:02:43,140 --> 00:02:45,900
a uad zero

62
00:02:45,900 --> 00:02:50,280
or unprivileged with a non-zero uids

63
00:02:50,280 --> 00:02:52,800
the distinction is that the privileged

64
00:02:52,800 --> 00:02:54,900
processes they were allowed to do pretty

65
00:02:54,900 --> 00:02:56,099
much anything

66
00:02:56,099 --> 00:02:59,519
there were no restrictions whatsoever

67
00:02:59,519 --> 00:03:01,680
on the other side the unprivileged

68
00:03:01,680 --> 00:03:04,379
processes they were not allowed to do

69
00:03:04,379 --> 00:03:08,120
anything they had all sorts of uh

70
00:03:08,120 --> 00:03:10,920
restrictions applied to them

71
00:03:10,920 --> 00:03:12,200
[Music]

72
00:03:12,200 --> 00:03:17,159
however from uh Linux kernel 2.2 onwards

73
00:03:17,159 --> 00:03:19,980
so there was uh some magic that was

74
00:03:19,980 --> 00:03:23,780
introduced into the Linux kernel

75
00:03:23,780 --> 00:03:27,560
and this is what Linux capabilities are

76
00:03:27,560 --> 00:03:30,120
uh there's a few of them actually it's

77
00:03:30,120 --> 00:03:35,060
not just the ones I've listed here

78
00:03:35,360 --> 00:03:38,580
the way I like to I'd like to think

79
00:03:38,580 --> 00:03:41,819
about the Linux capabilities is like um

80
00:03:41,819 --> 00:03:44,400
little magic tricks Maybe

81
00:03:44,400 --> 00:03:46,980
some pieces of wisdom maybe I don't know

82
00:03:46,980 --> 00:03:51,840
whatever and uh what they actually are

83
00:03:51,840 --> 00:03:54,200
is um

84
00:03:54,200 --> 00:03:57,980
the all the the privilege the

85
00:03:57,980 --> 00:04:01,220
processes um they got split into

86
00:04:01,220 --> 00:04:05,400
distinct units and uh whatever process

87
00:04:05,400 --> 00:04:09,840
might require we can just proceed in a

88
00:04:09,840 --> 00:04:12,599
sign the specific privilege privileges

89
00:04:12,599 --> 00:04:14,040
to a process

90
00:04:14,040 --> 00:04:16,199
so as an example let's say that a

91
00:04:16,199 --> 00:04:18,720
specific process need to

92
00:04:18,720 --> 00:04:22,919
change the ownership of the file or such

93
00:04:22,919 --> 00:04:26,240
specific uids or group IDs or

94
00:04:26,240 --> 00:04:28,460
change the

95
00:04:28,460 --> 00:04:33,060
do some stuff around the network

96
00:04:33,060 --> 00:04:36,120
within this within the server we can

97
00:04:36,120 --> 00:04:37,259
then

98
00:04:37,259 --> 00:04:40,560
assign the specific Linux capability

99
00:04:40,560 --> 00:04:44,120
and give the process the ability to

100
00:04:44,120 --> 00:04:47,880
fulfill its purpose and uh

101
00:04:47,880 --> 00:04:50,060
and proceed

102
00:04:50,060 --> 00:04:54,440
this is just a few of them actually

103
00:04:54,440 --> 00:04:56,759
if you want to have a look at the full

104
00:04:56,759 --> 00:04:59,100
list of Linux capabilities please go to

105
00:04:59,100 --> 00:05:02,639
this URL it's the Linux one page where

106
00:05:02,639 --> 00:05:05,520
and includes pretty much all the

107
00:05:05,520 --> 00:05:06,450
capabilities available

108
00:05:06,450 --> 00:05:08,580
[Music]

109
00:05:08,580 --> 00:05:12,000
so also we need to understand how we

110
00:05:12,000 --> 00:05:13,860
will be able to work with Linux

111
00:05:13,860 --> 00:05:15,800
capabilities

112
00:05:15,800 --> 00:05:21,440
uh as soon as we get onto a host

113
00:05:21,440 --> 00:05:24,840
uh the first action we would like to do

114
00:05:24,840 --> 00:05:27,539
like uh we should be able to identify

115
00:05:27,539 --> 00:05:30,560
any capabilities

116
00:05:31,160 --> 00:05:34,680
any system-wide capabilities there is a

117
00:05:34,680 --> 00:05:36,419
there are some built-in tools for

118
00:05:36,419 --> 00:05:38,340
working with capabilities within Linux

119
00:05:38,340 --> 00:05:41,820
one of them is copper Shades which is

120
00:05:41,820 --> 00:05:44,160
um actually a wrapper for interacting

121
00:05:44,160 --> 00:05:48,120
with uh capabilities on on the Linux

122
00:05:48,120 --> 00:05:50,039
host

123
00:05:50,039 --> 00:05:52,699
we can also identify

124
00:05:52,699 --> 00:05:55,979
capabilities associated with specific

125
00:05:55,979 --> 00:05:57,900
system binaries

126
00:05:57,900 --> 00:06:00,419
uh for this purpose we should be able to

127
00:06:00,419 --> 00:06:02,940
use GitHub which is another tool for

128
00:06:02,940 --> 00:06:06,240
interacting with Linux capabilities

129
00:06:06,240 --> 00:06:09,539
and as we can see here we've got this

130
00:06:09,539 --> 00:06:12,419
the python executable which is which has

131
00:06:12,419 --> 00:06:13,860
been assigned with the capsized admin

132
00:06:13,860 --> 00:06:15,070
capability

133
00:06:15,070 --> 00:06:16,680
[Music]

134
00:06:16,680 --> 00:06:19,860
another method for identifying

135
00:06:19,860 --> 00:06:22,139
capabilities Associated either with

136
00:06:22,139 --> 00:06:25,080
binaries or processes is by looking at

137
00:06:25,080 --> 00:06:27,960
the status file of the process itself

138
00:06:27,960 --> 00:06:30,060
in this specific instance uh we're

139
00:06:30,060 --> 00:06:33,080
looking at a

140
00:06:33,800 --> 00:06:38,419
process with a pid1 which is actually

141
00:06:38,419 --> 00:06:41,880
the core process of a container and

142
00:06:41,880 --> 00:06:44,539
there are different categories of

143
00:06:44,539 --> 00:06:46,160
capabilities

144
00:06:46,160 --> 00:06:48,600
described here

145
00:06:48,600 --> 00:06:51,000
the first one is inherited it is a

146
00:06:51,000 --> 00:06:55,100
capabilities that oh okay

147
00:06:55,100 --> 00:06:57,360
that the process inherits from something

148
00:06:57,360 --> 00:06:58,580
else

149
00:06:58,580 --> 00:07:01,800
and permissive effective I'm just gonna

150
00:07:01,800 --> 00:07:04,039
have to be a bit quicker

151
00:07:04,039 --> 00:07:06,300
so yeah from an attacker's point of view

152
00:07:06,300 --> 00:07:09,360
as soon as someone gets access to a

153
00:07:09,360 --> 00:07:12,060
container or a Linux host there are

154
00:07:12,060 --> 00:07:14,819
specific things that he he will be able

155
00:07:14,819 --> 00:07:17,639
to do or he would like to do actually he

156
00:07:17,639 --> 00:07:20,039
would start actually enumerating the

157
00:07:20,039 --> 00:07:21,780
uh sorry

158
00:07:21,780 --> 00:07:23,520
anybody in the house looking for Open

159
00:07:23,520 --> 00:07:27,599
Force owners access to foils

160
00:07:27,599 --> 00:07:30,900
anyway to exploit a an executables or

161
00:07:30,900 --> 00:07:33,660
services or maybe set up some reverse or

162
00:07:33,660 --> 00:07:35,340
buying cells

163
00:07:35,340 --> 00:07:39,780
and for containerized environments in

164
00:07:39,780 --> 00:07:42,138
particular

165
00:07:42,479 --> 00:07:44,940
he should be looking for ways to escape

166
00:07:44,940 --> 00:07:48,000
the container and one of the scariest

167
00:07:48,000 --> 00:07:51,919
things is that uh capabilities provide

168
00:07:51,919 --> 00:07:56,880
this uh all all these options to an

169
00:07:56,880 --> 00:07:59,940
attacker so yeah he could be he would be

170
00:07:59,940 --> 00:08:03,319
able to take advantage of them

171
00:08:03,319 --> 00:08:06,240
so it would only make sense to go

172
00:08:06,240 --> 00:08:07,880
through some demos

173
00:08:07,880 --> 00:08:10,560
uh I'm not gonna lie I was planning to

174
00:08:10,560 --> 00:08:13,259
do some light demos but uh due to lack

175
00:08:13,259 --> 00:08:14,639
of time

176
00:08:14,639 --> 00:08:15,960
most likely I'm going to be going

177
00:08:15,960 --> 00:08:17,520
through

178
00:08:17,520 --> 00:08:20,479
some recorded once or maybe one second

179
00:08:20,479 --> 00:08:25,280
let me just bring this here

180
00:08:25,860 --> 00:08:29,060
uh wait

181
00:08:29,900 --> 00:08:34,289
[Music]

182
00:08:36,299 --> 00:08:39,419
oh come on

183
00:08:39,419 --> 00:08:41,958
foreign

184
00:08:42,799 --> 00:08:47,120
let's have a look at that

185
00:08:47,520 --> 00:08:50,160
[Music]

186
00:08:50,160 --> 00:08:52,579
oh

187
00:08:53,700 --> 00:08:58,160
is this clear actually yeah

188
00:09:00,070 --> 00:09:02,279
[Music]

189
00:09:02,279 --> 00:09:04,760
it is

190
00:09:09,790 --> 00:09:13,939
[Music]

191
00:09:14,339 --> 00:09:17,120
foreign

192
00:09:21,860 --> 00:09:26,929
[Music]

193
00:09:27,080 --> 00:09:29,760
of what's going on here

194
00:09:29,760 --> 00:09:33,300
uh this is uh this is on time to abuse

195
00:09:33,300 --> 00:09:36,300
the capture capsys module

196
00:09:36,300 --> 00:09:38,640
capability

197
00:09:38,640 --> 00:09:42,000
uh which is a capability that uh allows

198
00:09:42,000 --> 00:09:45,300
an attacker to insert kernel modules

199
00:09:45,300 --> 00:09:49,019
modules into the host kernel

200
00:09:49,019 --> 00:09:51,000
what we do actually after identifying

201
00:09:51,000 --> 00:09:53,040
the IP of

202
00:09:53,040 --> 00:09:56,040
of the host that we would like to send

203
00:09:56,040 --> 00:09:59,519
the reverse show to and the port

204
00:09:59,519 --> 00:10:03,779
we we inject actually the

205
00:10:03,779 --> 00:10:06,300
the module into the Linux kernel and

206
00:10:06,300 --> 00:10:07,860
after executing

207
00:10:07,860 --> 00:10:09,660
uh

208
00:10:09,660 --> 00:10:12,360
uh after injecting the the module into

209
00:10:12,360 --> 00:10:15,300
the kernel this is how the the reversal

210
00:10:15,300 --> 00:10:18,199
gets triggered

211
00:10:20,279 --> 00:10:22,880
uh

212
00:10:23,339 --> 00:10:25,220
yeah

213
00:10:25,220 --> 00:10:30,020
let me just have a look at the maximum

214
00:10:30,020 --> 00:10:32,640
[Music]

215
00:10:32,640 --> 00:10:35,160
okay it looks like we are running out of

216
00:10:35,160 --> 00:10:37,019
time

217
00:10:37,019 --> 00:10:40,019
uh

218
00:10:41,100 --> 00:10:45,560
anyway uh I'm just gonna go through

219
00:10:45,959 --> 00:10:48,480
there's certainly loads of things that

220
00:10:48,480 --> 00:10:50,459
you can achieve with uh Linux

221
00:10:50,459 --> 00:10:53,000
capabilities and uh

222
00:10:53,000 --> 00:10:58,100
uh you can drop uh an odd

223
00:10:58,100 --> 00:11:01,860
file rules you can set your IDs you can

224
00:11:01,860 --> 00:11:04,019
elevate your privileges you can set up

225
00:11:04,019 --> 00:11:06,600
buying shells you can do all sorts of

226
00:11:06,600 --> 00:11:10,519
stuff and uh yeah I guess uh whoever

227
00:11:10,519 --> 00:11:13,200
sets these up they're gonna have to be

228
00:11:13,200 --> 00:11:14,700
particularly careful with whatever

229
00:11:14,700 --> 00:11:16,620
they're using

230
00:11:16,620 --> 00:11:19,079
[Music]

231
00:11:19,079 --> 00:11:22,320
so with regards to mitigating these

232
00:11:22,320 --> 00:11:24,680
issues

233
00:11:24,740 --> 00:11:27,240
security context for the win security

234
00:11:27,240 --> 00:11:29,700
conflicts are like uh

235
00:11:29,700 --> 00:11:31,500
let's call them firewalls for any

236
00:11:31,500 --> 00:11:33,079
containerized environments or

237
00:11:33,079 --> 00:11:35,339
kubernetes-based environments

238
00:11:35,339 --> 00:11:38,100
uh it would be nice to as a rule of

239
00:11:38,100 --> 00:11:40,920
thumb to drop everything by default and

240
00:11:40,920 --> 00:11:44,160
keep only their ones required

241
00:11:44,160 --> 00:11:46,560
uh it might be a bit tricky to identify

242
00:11:46,560 --> 00:11:50,480
which ones are required by its um

243
00:11:50,480 --> 00:11:53,700
pipeline executable process or whatever

244
00:11:53,700 --> 00:11:55,560
you're planning to run

245
00:11:55,560 --> 00:11:58,620
and uh there is an amazing Tool uh

246
00:11:58,620 --> 00:12:01,560
developed by Aqua security

247
00:12:01,560 --> 00:12:03,779
which is called Tracy

248
00:12:03,779 --> 00:12:10,440
uh which is based on evpf and uh yeah he

249
00:12:10,440 --> 00:12:12,600
came to also analyzing events and

250
00:12:12,600 --> 00:12:14,700
detecting any sort of suspicious

251
00:12:14,700 --> 00:12:17,100
Behavior

252
00:12:17,100 --> 00:12:19,680
but yeah actually it's out of the scope

253
00:12:19,680 --> 00:12:21,600
of this talk

254
00:12:21,600 --> 00:12:24,000
wrapping up uh just a couple of

255
00:12:24,000 --> 00:12:25,680
recommendations

256
00:12:25,680 --> 00:12:27,959
I would definitely advise anyone who

257
00:12:27,959 --> 00:12:29,940
wants to dive deeper into Linux

258
00:12:29,940 --> 00:12:32,760
capabilities and ways to exploit them to

259
00:12:32,760 --> 00:12:36,000
look into list Rice's book

260
00:12:36,000 --> 00:12:38,160
on container security there's a few

261
00:12:38,160 --> 00:12:39,959
examples included

262
00:12:39,959 --> 00:12:42,720
on top of that I would advise anyone to

263
00:12:42,720 --> 00:12:45,540
have a look at how can kubernetes this

264
00:12:45,540 --> 00:12:48,300
goes a bit further but there are some

265
00:12:48,300 --> 00:12:51,300
stuff in included related to Lynch

266
00:12:51,300 --> 00:12:52,800
capabilities as well

267
00:12:52,800 --> 00:12:55,139
however there are some stuff as well on

268
00:12:55,139 --> 00:12:56,579
Port security

269
00:12:56,579 --> 00:12:59,760
um anything related around

270
00:12:59,760 --> 00:13:03,240
security and kubernetes

271
00:13:03,240 --> 00:13:06,600
and this was actually written by our CEO

272
00:13:06,600 --> 00:13:09,779
of the control plane CEO our remote

273
00:13:09,779 --> 00:13:13,639
thing and uh

274
00:13:14,519 --> 00:13:17,279
thank you very much for attending

275
00:13:17,279 --> 00:13:20,160
it's actually my first talk so yeah

276
00:13:20,160 --> 00:13:23,719
Amazon live was a bit stressed

277
00:13:29,519 --> 00:13:35,340
any questions whatsoever yes here we go

278
00:13:35,340 --> 00:13:38,799
[Music]

279
00:13:40,500 --> 00:13:43,079
hello I just wanted to know uh have you

280
00:13:43,079 --> 00:13:46,200
had any success with implementing uh

281
00:13:46,200 --> 00:13:48,360
this uh particular exploit against

282
00:13:48,360 --> 00:13:52,160
modern Linux kernels or

283
00:13:52,320 --> 00:13:53,600
something sorry

284
00:13:53,600 --> 00:13:57,899
yeah so have you had any success with

285
00:13:57,899 --> 00:13:59,940
trying to implement this particular

286
00:13:59,940 --> 00:14:01,800
previous privileged escalation or

287
00:14:01,800 --> 00:14:04,620
exploit against uh modern uh Linux

288
00:14:04,620 --> 00:14:08,519
kernels yes uh to be honest um

289
00:14:08,519 --> 00:14:11,579
the particular use case and this is how

290
00:14:11,579 --> 00:14:15,839
I got into this uh actually was uh

291
00:14:15,839 --> 00:14:19,260
part of a workflow for securing techno

292
00:14:19,260 --> 00:14:20,279
Pipelines

293
00:14:20,279 --> 00:14:25,019
part of the requirements was to verify

294
00:14:25,019 --> 00:14:28,380
whether how secure are the Pipelines

295
00:14:28,380 --> 00:14:31,139
and whether they could actually be

296
00:14:31,139 --> 00:14:34,459
exploited we were ex we were able to

297
00:14:34,459 --> 00:14:37,680
exploit anything that was running within

298
00:14:37,680 --> 00:14:40,920
within these take on pipelines by using

299
00:14:40,920 --> 00:14:44,760
this way we were able to trigger uh

300
00:14:44,760 --> 00:14:47,940
reversials or even set up binds also

301
00:14:47,940 --> 00:14:52,139
maybe even inject stuff into host

302
00:14:52,139 --> 00:14:54,420
processes

303
00:14:54,420 --> 00:14:58,079
yeah it's uh have you got any particular

304
00:14:58,079 --> 00:14:59,820
use case that you wanna you were unable

305
00:14:59,820 --> 00:15:02,160
to implement it

306
00:15:02,160 --> 00:15:04,139
I got any specific example I'm just

307
00:15:04,139 --> 00:15:06,920
trying to think

308
00:15:07,160 --> 00:15:10,980
in any case yeah uh we've done this

309
00:15:10,980 --> 00:15:14,040
research quite recently and uh all these

310
00:15:14,040 --> 00:15:17,820
was applied against uh modern Linux

311
00:15:17,820 --> 00:15:19,699
kernels

312
00:15:19,699 --> 00:15:23,060
yeah look like they're kicking us out

313
00:15:23,060 --> 00:15:26,699
any other questions yeah time for one

314
00:15:26,699 --> 00:15:28,440
more I think

315
00:15:28,440 --> 00:15:32,040
I like um I was wondering when it comes

316
00:15:32,040 --> 00:15:33,120
to

317
00:15:33,120 --> 00:15:34,620
um sort of kubernetes and opposite and

318
00:15:34,620 --> 00:15:36,000
things like that quite often you'll find

319
00:15:36,000 --> 00:15:39,240
clients who have a Docker container that

320
00:15:39,240 --> 00:15:40,500
they know need some additional

321
00:15:40,500 --> 00:15:42,600
capabilities but they don't know which

322
00:15:42,600 --> 00:15:43,920
ones

323
00:15:43,920 --> 00:15:45,360
um and quite often they just have no

324
00:15:45,360 --> 00:15:46,980
choice but to turn everything on because

325
00:15:46,980 --> 00:15:48,420
the supplier of the container just

326
00:15:48,420 --> 00:15:50,339
hasn't told them what capabilities it

327
00:15:50,339 --> 00:15:52,019
needs if you've got any recommendations

328
00:15:52,019 --> 00:15:54,180
for how they can sort of investigate and

329
00:15:54,180 --> 00:15:57,000
find out what the minimum set is uh

330
00:15:57,000 --> 00:15:59,040
actually yeah I just quickly jumped

331
00:15:59,040 --> 00:16:01,800
through it uh I would definitely advise

332
00:16:01,800 --> 00:16:05,940
anyone using Tracy this is an example of

333
00:16:05,940 --> 00:16:08,699
how we we used it to identify

334
00:16:08,699 --> 00:16:11,820
capabilities during runtime as I said uh

335
00:16:11,820 --> 00:16:13,620
we were executing pipelines Within

336
00:16:13,620 --> 00:16:16,740
tecton and we had to quickly identify

337
00:16:16,740 --> 00:16:19,320
what capabilities are required and

338
00:16:19,320 --> 00:16:24,680
what's been used internally and uh sorry

339
00:16:25,920 --> 00:16:28,500
what this actually what this actually

340
00:16:28,500 --> 00:16:29,600
does

341
00:16:29,600 --> 00:16:33,660
uh it's actually keeping an eye for any

342
00:16:33,660 --> 00:16:36,240
new containers that are popping up

343
00:16:36,240 --> 00:16:39,540
and it's outputting the capabilities as

344
00:16:39,540 --> 00:16:41,820
you can see here it's tracing for

345
00:16:41,820 --> 00:16:44,160
capability related events

346
00:16:44,160 --> 00:16:48,420
and it's outputting anything that's that

347
00:16:48,420 --> 00:16:52,199
it's finding to Json trade.log

348
00:16:52,199 --> 00:16:56,600
and it's an ebpf based

349
00:16:56,600 --> 00:16:59,720
executable and that's why

350
00:16:59,720 --> 00:17:03,180
there are it has specific requirements

351
00:17:03,180 --> 00:17:05,939
like you're gonna have to run it as pre

352
00:17:05,939 --> 00:17:09,079
in previous mode you also have to

353
00:17:09,079 --> 00:17:12,299
map a few stuff within the container

354
00:17:12,299 --> 00:17:15,419
just to allow the abpf related modules

355
00:17:15,419 --> 00:17:18,119
to compile initially

356
00:17:18,119 --> 00:17:20,160
uh this is what we were using actually

357
00:17:20,160 --> 00:17:22,319
in this particular use case

358
00:17:22,319 --> 00:17:23,939
cool that's all I got time for I'm

359
00:17:23,939 --> 00:17:25,559
afraid thank you Janice thank you

360
00:17:25,559 --> 00:17:26,699
everyone

361
00:17:26,699 --> 00:17:29,660
um yeah

362
00:17:30,360 --> 00:17:33,020
thank you

