1
00:00:03,259 --> 00:00:05,759
thank you thank you for having me Rob

2
00:00:05,759 --> 00:00:09,780
and pronouncing my my name correctly

3
00:00:09,780 --> 00:00:11,340
um so we're going to talk about today

4
00:00:11,340 --> 00:00:14,040
about hacking 7s application I hope you

5
00:00:14,040 --> 00:00:15,900
enjoyed your lunch and you have filled

6
00:00:15,900 --> 00:00:20,600
with energy to listen to this session

7
00:00:23,840 --> 00:00:25,380
[Music]

8
00:00:25,380 --> 00:00:30,000
so uh my name is hen if you're hitting

9
00:00:30,000 --> 00:00:32,159
the slide you probably read it as Chen

10
00:00:32,159 --> 00:00:34,620
and that's totally fine if you call the

11
00:00:34,620 --> 00:00:37,500
chain I will answer I'm used to it but

12
00:00:37,500 --> 00:00:41,160
the right way to pronounce my name is

13
00:00:41,160 --> 00:00:43,140
um for the last 10 years I've been

14
00:00:43,140 --> 00:00:45,480
helping companies

15
00:00:45,480 --> 00:00:48,020
um delivering and developing their

16
00:00:48,020 --> 00:00:50,760
software projects and achieve their

17
00:00:50,760 --> 00:00:52,020
business goals

18
00:00:52,020 --> 00:00:54,120
and in the last two years I've been

19
00:00:54,120 --> 00:00:57,180
working at the Consular security as a

20
00:00:57,180 --> 00:00:59,879
software development manager leading our

21
00:00:59,879 --> 00:01:01,739
Cloud native application security

22
00:01:01,739 --> 00:01:03,539
testing product

23
00:01:03,539 --> 00:01:06,119
you probably noticed those little hearts

24
00:01:06,119 --> 00:01:09,960
there and well during those years I've

25
00:01:09,960 --> 00:01:13,560
had five kids with my beautiful wife and

26
00:01:13,560 --> 00:01:15,720
definitely that's my biggest project so

27
00:01:15,720 --> 00:01:16,799
far

28
00:01:16,799 --> 00:01:19,020
hmm

29
00:01:19,020 --> 00:01:21,619
so

30
00:01:22,619 --> 00:01:24,240
what are you going to talk about today

31
00:01:24,240 --> 00:01:26,340
what is serverless application right

32
00:01:26,340 --> 00:01:28,320
what are the challenges in serverless

33
00:01:28,320 --> 00:01:29,340
application

34
00:01:29,340 --> 00:01:31,140
what are the security risks and

35
00:01:31,140 --> 00:01:34,380
challenges that we have in serverless

36
00:01:34,380 --> 00:01:37,079
application and we show some demos about

37
00:01:37,079 --> 00:01:39,439
how to hack serverless applications

38
00:01:39,439 --> 00:01:41,640
and how to protect serverless

39
00:01:41,640 --> 00:01:42,840
certification

40
00:01:42,840 --> 00:01:45,299
most of the things we will see are AWS

41
00:01:45,299 --> 00:01:48,900
oriented but everything is applied to

42
00:01:48,900 --> 00:01:52,740
all major Cloud providers

43
00:01:52,740 --> 00:01:54,619
[Music]

44
00:01:54,619 --> 00:01:56,220
so

45
00:01:56,220 --> 00:01:58,619
um how many of you are using serverless

46
00:01:58,619 --> 00:02:00,840
application please raise your hand

47
00:02:00,840 --> 00:02:04,460
oh quite a few nice

48
00:02:05,040 --> 00:02:07,799
so over half of organization in each

49
00:02:07,799 --> 00:02:10,979
cloud provider have adopted servers and

50
00:02:10,979 --> 00:02:14,520
that's a huge shift and we're seeing

51
00:02:14,520 --> 00:02:17,700
um as you can see in AWS gcp and Azure

52
00:02:17,700 --> 00:02:19,800
all of them

53
00:02:19,800 --> 00:02:22,500
um and organizations are adopting

54
00:02:22,500 --> 00:02:25,560
serverless and we are seeing this Rising

55
00:02:25,560 --> 00:02:27,959
Trend among our customers as well that

56
00:02:27,959 --> 00:02:29,879
they're using more and more serverless

57
00:02:29,879 --> 00:02:31,560
application and deploying more

58
00:02:31,560 --> 00:02:34,080
serverless components

59
00:02:34,080 --> 00:02:36,780
um and well that's

60
00:02:36,780 --> 00:02:38,819
um here that serverless is here to stay

61
00:02:38,819 --> 00:02:40,620
right

62
00:02:40,620 --> 00:02:42,480
um I believe that it will it will become

63
00:02:42,480 --> 00:02:45,060
one of the dominant Technologies in

64
00:02:45,060 --> 00:02:47,280
years to come and that's why we are

65
00:02:47,280 --> 00:02:49,879
talking about it

66
00:02:50,220 --> 00:02:52,620
but serverless is not it's not just a

67
00:02:52,620 --> 00:02:55,560
technology shift uh it's more than that

68
00:02:55,560 --> 00:02:57,300
if you're looking at the architecture

69
00:02:57,300 --> 00:02:59,459
we're not talking about

70
00:02:59,459 --> 00:03:03,000
um any more about big monoliths with one

71
00:03:03,000 --> 00:03:06,540
flow one big logical flow we're talking

72
00:03:06,540 --> 00:03:09,660
about architecture that is event driven

73
00:03:09,660 --> 00:03:12,319
by Nature we are talking about

74
00:03:12,319 --> 00:03:15,540
components that are even smaller than

75
00:03:15,540 --> 00:03:17,819
microservices we're talking some will

76
00:03:17,819 --> 00:03:19,920
call it Nano services

77
00:03:19,920 --> 00:03:21,420
and

78
00:03:21,420 --> 00:03:24,599
each serverless function is developed

79
00:03:24,599 --> 00:03:26,819
with a single purpose right with a very

80
00:03:26,819 --> 00:03:30,120
very simple single purpose and that's

81
00:03:30,120 --> 00:03:32,040
part of the architecture we're also

82
00:03:32,040 --> 00:03:34,680
talking about the Cycles right the

83
00:03:34,680 --> 00:03:37,920
development life cycle the dev Ops or if

84
00:03:37,920 --> 00:03:40,739
you want the devsec up Cycles

85
00:03:40,739 --> 00:03:43,860
um developers are deploying multiple

86
00:03:43,860 --> 00:03:46,560
times a day while using serverless you

87
00:03:46,560 --> 00:03:48,959
see it I see it in my team it's not

88
00:03:48,959 --> 00:03:49,980
anymore

89
00:03:49,980 --> 00:03:52,560
um deploying a dead on the cycle or even

90
00:03:52,560 --> 00:03:55,519
at the end of the day Developers

91
00:03:55,519 --> 00:03:59,760
Code test build and deploy

92
00:03:59,760 --> 00:04:00,480
um

93
00:04:00,480 --> 00:04:03,840
and the process right the process is no

94
00:04:03,840 --> 00:04:05,700
more manual you want to automate

95
00:04:05,700 --> 00:04:08,280
everything if it's not automated it just

96
00:04:08,280 --> 00:04:09,840
won't work

97
00:04:09,840 --> 00:04:11,879
um everything is automated we're using

98
00:04:11,879 --> 00:04:14,400
infrastructures code and that's

99
00:04:14,400 --> 00:04:16,680
something that it's a must right we

100
00:04:16,680 --> 00:04:19,798
cannot do manual processes in any of the

101
00:04:19,798 --> 00:04:22,139
things many more pipelines a lot more

102
00:04:22,139 --> 00:04:24,300
automations

103
00:04:24,300 --> 00:04:27,000
and by that combining all of those

104
00:04:27,000 --> 00:04:28,740
things

105
00:04:28,740 --> 00:04:31,199
um the decision coming bottom up right

106
00:04:31,199 --> 00:04:32,820
the developers are getting more and more

107
00:04:32,820 --> 00:04:35,040
responsibility to their hands they're

108
00:04:35,040 --> 00:04:37,020
choosing their services they're choosing

109
00:04:37,020 --> 00:04:38,699
their tools

110
00:04:38,699 --> 00:04:40,259
um they're creating all the pipelines

111
00:04:40,259 --> 00:04:42,180
and that means they have bigger

112
00:04:42,180 --> 00:04:44,460
responsibility and the decision is no

113
00:04:44,460 --> 00:04:48,419
more top down but bottom up

114
00:04:48,419 --> 00:04:51,479
so let's dive the dive deep to

115
00:04:51,479 --> 00:04:54,660
serverless architecture and it's not of

116
00:04:54,660 --> 00:04:57,060
course not only about the code it's

117
00:04:57,060 --> 00:05:00,180
about the architecture itself

118
00:05:00,180 --> 00:05:04,380
so if it was zoom in a bit about what a

119
00:05:04,380 --> 00:05:05,720
serverless

120
00:05:05,720 --> 00:05:09,540
component if you like looks like so we

121
00:05:09,540 --> 00:05:10,740
have this

122
00:05:10,740 --> 00:05:11,400
um

123
00:05:11,400 --> 00:05:13,740
this Lambda function at the middle and

124
00:05:13,740 --> 00:05:15,960
we have the triggers so another function

125
00:05:15,960 --> 00:05:19,440
can be triggered from multiple ways

126
00:05:19,440 --> 00:05:21,300
multiple triggers we have for example

127
00:05:21,300 --> 00:05:24,180
the API Gateway an S3 bucket an event

128
00:05:24,180 --> 00:05:27,360
from dynamodb a cloud watch log and much

129
00:05:27,360 --> 00:05:28,979
much more

130
00:05:28,979 --> 00:05:31,740
and then we have that Lambda function

131
00:05:31,740 --> 00:05:34,139
that hosts our code and the services

132
00:05:34,139 --> 00:05:36,720
that usually interacts with

133
00:05:36,720 --> 00:05:40,080
and again the Lambda function hosts R

134
00:05:40,080 --> 00:05:43,199
code which means it also holds our

135
00:05:43,199 --> 00:05:45,620
mistakes

136
00:05:46,020 --> 00:05:49,800
in which we will zoom out a bit look at

137
00:05:49,800 --> 00:05:52,440
a bigger serverless architecture it's

138
00:05:52,440 --> 00:05:55,020
not it's not that big but it's a fairly

139
00:05:55,020 --> 00:05:58,259
typical serverless architecture we see

140
00:05:58,259 --> 00:05:59,580
that we have

141
00:05:59,580 --> 00:06:03,900
a lot of serverless function across

142
00:06:03,900 --> 00:06:08,160
um the entire flow and we see that

143
00:06:08,160 --> 00:06:11,340
um it comes from an end point from one

144
00:06:11,340 --> 00:06:13,080
like the user interacts with the

145
00:06:13,080 --> 00:06:15,840
application in one endpoint but

146
00:06:15,840 --> 00:06:17,960
basically the Lambda function is trigger

147
00:06:17,960 --> 00:06:21,180
triggered in multiple ways multiple

148
00:06:21,180 --> 00:06:23,699
triggers Happening Here

149
00:06:23,699 --> 00:06:26,520
the red circles you can see that we have

150
00:06:26,520 --> 00:06:29,340
an API Gateway we have dynamodb we have

151
00:06:29,340 --> 00:06:32,340
the S3 bucket and

152
00:06:32,340 --> 00:06:35,639
basically each trigger has its own

153
00:06:35,639 --> 00:06:38,220
inputs right so if

154
00:06:38,220 --> 00:06:40,440
something happened and triggers the

155
00:06:40,440 --> 00:06:42,180
first thing

156
00:06:42,180 --> 00:06:45,060
what's happening behind the scenes it's

157
00:06:45,060 --> 00:06:47,400
important because we see that the invent

158
00:06:47,400 --> 00:06:49,620
bridge will trigger some State machine

159
00:06:49,620 --> 00:06:51,479
and so on

160
00:06:51,479 --> 00:06:53,100
and

161
00:06:53,100 --> 00:06:55,800
each function housed its own code on

162
00:06:55,800 --> 00:06:58,500
configuration and on policies and that's

163
00:06:58,500 --> 00:06:59,940
one of the challenges

164
00:06:59,940 --> 00:07:03,740
we will discuss about it more

165
00:07:04,800 --> 00:07:07,500
this is an application one of our

166
00:07:07,500 --> 00:07:09,600
customers

167
00:07:09,600 --> 00:07:12,180
looks overwhelming right but

168
00:07:12,180 --> 00:07:14,819
it's a fairly small application and we

169
00:07:14,819 --> 00:07:16,620
see again a lot of Lambda function

170
00:07:16,620 --> 00:07:20,099
around 100 Lambda functions and we see

171
00:07:20,099 --> 00:07:23,460
API gateways and so on and what I want

172
00:07:23,460 --> 00:07:25,740
to show you here

173
00:07:25,740 --> 00:07:26,639
um

174
00:07:26,639 --> 00:07:30,960
is the overall view of how a serverless

175
00:07:30,960 --> 00:07:33,419
application looks like it's not like one

176
00:07:33,419 --> 00:07:36,240
process going synchronously a lot of

177
00:07:36,240 --> 00:07:38,819
event driven you see those gray lines

178
00:07:38,819 --> 00:07:41,520
that are not connected

179
00:07:41,520 --> 00:07:43,500
um physically they're connected by

180
00:07:43,500 --> 00:07:47,819
configuration by their policies and

181
00:07:47,819 --> 00:07:49,199
and

182
00:07:49,199 --> 00:07:52,199
with that architecture it's pretty hard

183
00:07:52,199 --> 00:07:54,180
to secure each serverless function has

184
00:07:54,180 --> 00:07:56,580
its own code on configuration and on

185
00:07:56,580 --> 00:07:59,699
policies and we need to find a way how

186
00:07:59,699 --> 00:08:03,120
to secure uh secure those functions so

187
00:08:03,120 --> 00:08:06,120
let's talk about application security

188
00:08:06,120 --> 00:08:08,759
how are you are you securing your

189
00:08:08,759 --> 00:08:11,660
serverless application

190
00:08:11,720 --> 00:08:16,280
less a lot less hence than before

191
00:08:17,639 --> 00:08:20,539
and that's fine

192
00:08:20,639 --> 00:08:24,120
um a Google trend from five or six years

193
00:08:24,120 --> 00:08:26,639
we see again that Rising trend of

194
00:08:26,639 --> 00:08:28,680
searching

195
00:08:28,680 --> 00:08:31,199
um serverless Computing it's rising and

196
00:08:31,199 --> 00:08:33,299
Rising a little drop because of the

197
00:08:33,299 --> 00:08:36,839
covid but we see it going above and

198
00:08:36,839 --> 00:08:39,599
above but when looking at the serverless

199
00:08:39,599 --> 00:08:42,539
security we see a flat line

200
00:08:42,539 --> 00:08:44,039
and that's something we see right

201
00:08:44,039 --> 00:08:46,920
security is somehow Left Behind until

202
00:08:46,920 --> 00:08:48,720
it's adopted like we have a technology

203
00:08:48,720 --> 00:08:51,920
that we adopt and security is trying to

204
00:08:51,920 --> 00:08:56,880
fill the Gap and that happens slowly and

205
00:08:56,880 --> 00:09:00,000
what we want to do is close this Gap the

206
00:09:00,000 --> 00:09:01,800
sooner is possible

207
00:09:01,800 --> 00:09:04,200
and that's something that we will talk

208
00:09:04,200 --> 00:09:05,580
about

209
00:09:05,580 --> 00:09:07,740
so let's talk about the traditional

210
00:09:07,740 --> 00:09:09,060
application

211
00:09:09,060 --> 00:09:11,279
all right so we have

212
00:09:11,279 --> 00:09:12,120
um

213
00:09:12,120 --> 00:09:15,540
this little architecture user interacts

214
00:09:15,540 --> 00:09:17,519
with the application

215
00:09:17,519 --> 00:09:20,640
there is a load balancer and so on so

216
00:09:20,640 --> 00:09:23,339
here we have one entry point one

217
00:09:23,339 --> 00:09:26,160
and we will put all our security

218
00:09:26,160 --> 00:09:28,560
measures security components security

219
00:09:28,560 --> 00:09:32,100
rules and so on on this entry point and

220
00:09:32,100 --> 00:09:33,720
well basically

221
00:09:33,720 --> 00:09:35,940
we are covered in a way

222
00:09:35,940 --> 00:09:40,640
it's not the case for um serverless

223
00:09:40,640 --> 00:09:43,019
applications we have multiple ways to

224
00:09:43,019 --> 00:09:45,019
interact with that with the application

225
00:09:45,019 --> 00:09:47,760
uh we have the API Gateway and we can

226
00:09:47,760 --> 00:09:49,740
put all the some of the security

227
00:09:49,740 --> 00:09:53,399
measures there but we also have the S3

228
00:09:53,399 --> 00:09:56,540
bucket that might trigger another

229
00:09:56,540 --> 00:10:00,000
serverless function and we have maybe an

230
00:10:00,000 --> 00:10:03,600
sqs and we have a lot of again triggers

231
00:10:03,600 --> 00:10:06,120
that can trigger our code and our Lambda

232
00:10:06,120 --> 00:10:07,200
function

233
00:10:07,200 --> 00:10:12,560
and that makes it uh harder to secure

234
00:10:13,019 --> 00:10:15,120
let's talk about a bit about the

235
00:10:15,120 --> 00:10:18,240
serverless risks so I named a few here

236
00:10:18,240 --> 00:10:21,779
but they're much more we will go over go

237
00:10:21,779 --> 00:10:23,760
over them quickly

238
00:10:23,760 --> 00:10:26,459
so we have the over privileged functions

239
00:10:26,459 --> 00:10:28,980
right so each function has its own

240
00:10:28,980 --> 00:10:32,339
policy that basically let the function

241
00:10:32,339 --> 00:10:35,760
interact with the cloud environment

242
00:10:35,760 --> 00:10:38,580
and usually what we see is that the

243
00:10:38,580 --> 00:10:41,820
function has an over permissive policy

244
00:10:41,820 --> 00:10:45,720
hard to pick the right permission for

245
00:10:45,720 --> 00:10:47,579
the right policy for the right action

246
00:10:47,579 --> 00:10:50,700
and so on and we will take a look at an

247
00:10:50,700 --> 00:10:53,220
example right after this slide we have

248
00:10:53,220 --> 00:10:55,380
the insecure secret management how we

249
00:10:55,380 --> 00:10:57,540
secure our secrets do we put them in

250
00:10:57,540 --> 00:11:01,019
environment variable do we use SSM or

251
00:11:01,019 --> 00:11:03,839
something like that the sensitive data

252
00:11:03,839 --> 00:11:06,240
exposure the denial of wallet right we

253
00:11:06,240 --> 00:11:07,800
are talking about serverless you can

254
00:11:07,800 --> 00:11:09,720
scale and scale and scale and don't have

255
00:11:09,720 --> 00:11:12,000
to worry about any

256
00:11:12,000 --> 00:11:12,720
um

257
00:11:12,720 --> 00:11:15,560
server or clusters or whatever

258
00:11:15,560 --> 00:11:19,920
but with that comes the risk so if I'm

259
00:11:19,920 --> 00:11:23,040
attacker and I will invoke my function

260
00:11:23,040 --> 00:11:24,540
again and again and again and again and

261
00:11:24,540 --> 00:11:26,399
again and I don't have the right

262
00:11:26,399 --> 00:11:28,019
configuration in place so you don't have

263
00:11:28,019 --> 00:11:30,899
the right concurrency limit

264
00:11:30,899 --> 00:11:34,440
um in configuration I'll probably see

265
00:11:34,440 --> 00:11:37,200
that at the end of the month in my build

266
00:11:37,200 --> 00:11:39,300
right

267
00:11:39,300 --> 00:11:41,579
um we have the event injection

268
00:11:41,579 --> 00:11:44,519
multiple ways to injection as you all

269
00:11:44,519 --> 00:11:46,920
know the vulnerable dependencies so we

270
00:11:46,920 --> 00:11:49,440
host our code but we usually use

271
00:11:49,440 --> 00:11:52,860
multiple third-party packages and that

272
00:11:52,860 --> 00:11:56,100
may introduce vulnerabilities the broken

273
00:11:56,100 --> 00:11:59,279
authentication open resources open S3

274
00:11:59,279 --> 00:12:01,140
buckets that we

275
00:12:01,140 --> 00:12:04,140
all know and more resources that are

276
00:12:04,140 --> 00:12:07,260
open and malwares

277
00:12:07,260 --> 00:12:10,920
earlier earlier this year there was

278
00:12:10,920 --> 00:12:13,680
introduced to denonia the malware that

279
00:12:13,680 --> 00:12:17,820
is targeted to AWS Lambda function and

280
00:12:17,820 --> 00:12:20,519
much more you can read about it and I

281
00:12:20,519 --> 00:12:22,500
will show you the resources at the end

282
00:12:22,500 --> 00:12:25,519
so let's dive deep a bit about

283
00:12:25,519 --> 00:12:27,600
overprivileged function which we see is

284
00:12:27,600 --> 00:12:30,670
a bigger challenge for our customers

285
00:12:30,670 --> 00:12:32,160
[Music]

286
00:12:32,160 --> 00:12:35,760
so what you see here on the left side is

287
00:12:35,760 --> 00:12:38,579
a pretty straightforward Lambda function

288
00:12:38,579 --> 00:12:41,339
the Lambda gets an event extracts some

289
00:12:41,339 --> 00:12:44,220
data takes the data and put it in a

290
00:12:44,220 --> 00:12:47,519
dynamodb table with uh the put item

291
00:12:47,519 --> 00:12:48,959
action

292
00:12:48,959 --> 00:12:51,540
on the right side we see we see the

293
00:12:51,540 --> 00:12:53,579
execution role of that Lambda function

294
00:12:53,579 --> 00:12:55,860
the execution ball basically is a wall

295
00:12:55,860 --> 00:12:58,760
that includes a policy

296
00:12:58,760 --> 00:13:02,459
that basically allows the Lambda to

297
00:13:02,459 --> 00:13:05,279
interact with the cloud environment and

298
00:13:05,279 --> 00:13:08,940
told it what action it can do and what

299
00:13:08,940 --> 00:13:10,320
are the boundaries what are the

300
00:13:10,320 --> 00:13:13,260
resources that the Lambda can talk with

301
00:13:13,260 --> 00:13:14,880
so

302
00:13:14,880 --> 00:13:17,459
here we see the put item action that's

303
00:13:17,459 --> 00:13:19,380
the only thing that the Lambda does in

304
00:13:19,380 --> 00:13:21,480
this specific use case

305
00:13:21,480 --> 00:13:24,540
um in the cloud environment but we see

306
00:13:24,540 --> 00:13:26,760
that the permission is dynamodb star

307
00:13:26,760 --> 00:13:29,399
which means this Lambda basically can do

308
00:13:29,399 --> 00:13:33,060
anything any action on dynamodb within

309
00:13:33,060 --> 00:13:34,860
the cloud environment

310
00:13:34,860 --> 00:13:38,720
dynamodb has like 20 or 25 permissions

311
00:13:38,720 --> 00:13:41,459
here it's put and can delete and read

312
00:13:41,459 --> 00:13:42,800
and so on

313
00:13:42,800 --> 00:13:46,920
besides that we see that we also gave a

314
00:13:46,920 --> 00:13:50,040
star on the resources which means this

315
00:13:50,040 --> 00:13:52,740
Lambda basically can do anything on

316
00:13:52,740 --> 00:13:55,740
dynamodb on any table we have in the

317
00:13:55,740 --> 00:13:57,779
cloud environment

318
00:13:57,779 --> 00:14:00,899
so how we can fix that right so first of

319
00:14:00,899 --> 00:14:02,639
all that's a problem

320
00:14:02,639 --> 00:14:04,860
if an attacker can compromise this

321
00:14:04,860 --> 00:14:07,139
Lambda and get its keys he can do

322
00:14:07,139 --> 00:14:10,200
anything not just put item on that

323
00:14:10,200 --> 00:14:12,600
specific table you can delete read

324
00:14:12,600 --> 00:14:15,480
everything on our Cloud environment in

325
00:14:15,480 --> 00:14:17,279
any table we have

326
00:14:17,279 --> 00:14:18,480
and

327
00:14:18,480 --> 00:14:20,519
this is hard right I see it in my team

328
00:14:20,519 --> 00:14:22,620
it's hard to maintain these policies

329
00:14:22,620 --> 00:14:26,160
it's hard to know what action do what

330
00:14:26,160 --> 00:14:28,260
permission do I need for that action

331
00:14:28,260 --> 00:14:32,760
there are thousands of actions above 300

332
00:14:32,760 --> 00:14:36,560
Services specifically in AWS it's hard

333
00:14:36,560 --> 00:14:39,360
for this example

334
00:14:39,360 --> 00:14:42,360
um what we can do so we know that we use

335
00:14:42,360 --> 00:14:46,320
boot item let's change the permission

336
00:14:46,320 --> 00:14:48,600
to only put item by that we are

337
00:14:48,600 --> 00:14:52,139
minimizing the risk dramatically and if

338
00:14:52,139 --> 00:14:54,120
an attacker will compromise the alumni

339
00:14:54,120 --> 00:14:57,180
the only thing you can do is putting an

340
00:14:57,180 --> 00:14:58,920
item in the database

341
00:14:58,920 --> 00:15:00,540
the second thing

342
00:15:00,540 --> 00:15:02,940
is of course removing the Stars the

343
00:15:02,940 --> 00:15:04,800
style from the resources

344
00:15:04,800 --> 00:15:07,320
so we will change that to the

345
00:15:07,320 --> 00:15:10,440
and table we are talking with by that we

346
00:15:10,440 --> 00:15:13,740
minimize the risk again dramatically

347
00:15:13,740 --> 00:15:15,959
of course you cannot do it manually it's

348
00:15:15,959 --> 00:15:18,660
hard to do it manually and as we said

349
00:15:18,660 --> 00:15:21,360
before if it's manual it won't work so

350
00:15:21,360 --> 00:15:23,699
we need a way to automate it for this

351
00:15:23,699 --> 00:15:25,980
process and we will talk about it in a

352
00:15:25,980 --> 00:15:28,160
second

353
00:15:28,800 --> 00:15:30,420
so

354
00:15:30,420 --> 00:15:32,279
um now we're going to talk about a few

355
00:15:32,279 --> 00:15:34,860
demos we'll show you a few demos we will

356
00:15:34,860 --> 00:15:37,320
watch a few demos about how to hack

357
00:15:37,320 --> 00:15:39,779
serverless application

358
00:15:39,779 --> 00:15:40,380
um

359
00:15:40,380 --> 00:15:42,180
basically attacking without being

360
00:15:42,180 --> 00:15:44,060
noticed

361
00:15:44,060 --> 00:15:47,519
Lambda function holds its keys right it

362
00:15:47,519 --> 00:15:49,500
spin up when it needs when it triggers

363
00:15:49,500 --> 00:15:52,620
when it invokes and and then we have the

364
00:15:52,620 --> 00:15:54,420
keys to interact with the cloud

365
00:15:54,420 --> 00:15:56,880
environment and if an attacker can get

366
00:15:56,880 --> 00:16:00,240
those keys and use them basically he

367
00:16:00,240 --> 00:16:02,940
proxy the Lambda without being noticed

368
00:16:02,940 --> 00:16:04,980
you can use those keys from his local

369
00:16:04,980 --> 00:16:07,800
machine or from whatever and just

370
00:16:07,800 --> 00:16:09,620
interacts with the Lambda

371
00:16:09,620 --> 00:16:12,420
with the permission the Lambda can do

372
00:16:12,420 --> 00:16:13,920
right with the actions the Lambda is

373
00:16:13,920 --> 00:16:16,760
permitted to do

374
00:16:17,339 --> 00:16:18,600
so

375
00:16:18,600 --> 00:16:21,420
um the first thing we will see is a

376
00:16:21,420 --> 00:16:23,940
simple application and the attack Vector

377
00:16:23,940 --> 00:16:27,720
is the API Gateway a user is interacting

378
00:16:27,720 --> 00:16:30,779
with a slack Channel with a bot sending

379
00:16:30,779 --> 00:16:33,420
messages this those messages are going

380
00:16:33,420 --> 00:16:36,000
through an API Gateway that invokes a

381
00:16:36,000 --> 00:16:38,220
Lambda function is Lambda function

382
00:16:38,220 --> 00:16:40,620
stores the messages in dynamodb and

383
00:16:40,620 --> 00:16:44,519
respond back to on slack API into the

384
00:16:44,519 --> 00:16:45,779
channel

385
00:16:45,779 --> 00:16:48,839
what we'll see is

386
00:16:48,839 --> 00:16:51,060
um in this specific Lambda there is a

387
00:16:51,060 --> 00:16:54,779
vulnerable dependency with a known cve

388
00:16:54,779 --> 00:16:57,360
um that we are compromising basically we

389
00:16:57,360 --> 00:17:00,120
took the payload from Google search the

390
00:17:00,120 --> 00:17:02,220
cve took the payload from Google

391
00:17:02,220 --> 00:17:06,299
and you just interact with that slackbot

392
00:17:06,299 --> 00:17:07,679
and found a

393
00:17:07,679 --> 00:17:10,880
the exploit

394
00:17:17,819 --> 00:17:20,880
okay so we're interacting with the slack

395
00:17:20,880 --> 00:17:23,880
bot we have an ngrok server open on the

396
00:17:23,880 --> 00:17:26,780
bottom left

397
00:17:28,020 --> 00:17:31,020
and now we are pasting that payload uh

398
00:17:31,020 --> 00:17:33,960
we got from Google and trying to see if

399
00:17:33,960 --> 00:17:36,600
we can do anything with it we are

400
00:17:36,600 --> 00:17:38,940
executing

401
00:17:38,940 --> 00:17:40,980
um the command there is a command

402
00:17:40,980 --> 00:17:43,980
injection in that cve

403
00:17:43,980 --> 00:17:46,980
and we saw that we got a request to our

404
00:17:46,980 --> 00:17:48,480
local server

405
00:17:48,480 --> 00:17:51,299
okay now what we can do we are changing

406
00:17:51,299 --> 00:17:55,020
a bit the command and we are trying to

407
00:17:55,020 --> 00:17:59,220
do LS and again we're succeeding we get

408
00:17:59,220 --> 00:18:01,080
the file name

409
00:18:01,080 --> 00:18:05,280
and now we will cut the file content and

410
00:18:05,280 --> 00:18:09,480
see what we have uh in that Lambda

411
00:18:09,480 --> 00:18:13,160
so we are cutting the index.js file

412
00:18:13,160 --> 00:18:17,460
encoding it to day64 and then we can we

413
00:18:17,460 --> 00:18:19,679
will be able to see the code see what's

414
00:18:19,679 --> 00:18:21,539
happening inside the Lambda and trying

415
00:18:21,539 --> 00:18:25,260
to get more deeper

416
00:18:27,120 --> 00:18:30,439
so you got the code

417
00:18:33,000 --> 00:18:38,360
now we will encode it sorry decode it

418
00:18:45,960 --> 00:18:48,660
and we can see the code right in front

419
00:18:48,660 --> 00:18:51,059
of our eyes exactly what's happening

420
00:18:51,059 --> 00:18:53,280
what it's doing interacting with slack

421
00:18:53,280 --> 00:18:56,640
API which tables what are the

422
00:18:56,640 --> 00:19:00,299
environment variables and so on

423
00:19:00,299 --> 00:19:03,360
now what we're trying to do

424
00:19:03,360 --> 00:19:07,080
is using not a put item but using a scan

425
00:19:07,080 --> 00:19:09,120
command on the table to get everything

426
00:19:09,120 --> 00:19:11,039
from that table

427
00:19:11,039 --> 00:19:14,280
well if the Lambda have the right

428
00:19:14,280 --> 00:19:16,200
permissions in place we won't be able to

429
00:19:16,200 --> 00:19:19,260
do that but in this case it's not the

430
00:19:19,260 --> 00:19:21,179
case

431
00:19:21,179 --> 00:19:23,299
we see that we are

432
00:19:23,299 --> 00:19:25,620
constructing the command scanning the

433
00:19:25,620 --> 00:19:28,559
table and basically sending back

434
00:19:28,559 --> 00:19:31,919
everything from the table to the select

435
00:19:31,919 --> 00:19:33,780
Channel

436
00:19:33,780 --> 00:19:36,480
we're closing the inbox server we don't

437
00:19:36,480 --> 00:19:38,820
need it anymore boom we just have

438
00:19:38,820 --> 00:19:42,900
everything inside a table in the slack

439
00:19:42,900 --> 00:19:44,700
Channel

440
00:19:44,700 --> 00:19:49,559
and that's basically it right so

441
00:19:49,559 --> 00:19:54,000
we found a vulnerable London right that

442
00:19:54,000 --> 00:19:56,460
that happens okay it's our code we have

443
00:19:56,460 --> 00:20:00,419
vulnerable dependencies and so on but

444
00:20:00,419 --> 00:20:02,100
the

445
00:20:02,100 --> 00:20:04,799
the attacker would be able to escalate

446
00:20:04,799 --> 00:20:07,020
it and get all the information from the

447
00:20:07,020 --> 00:20:10,080
table if the Lambda had the right

448
00:20:10,080 --> 00:20:14,059
permission in place that won't happen

449
00:20:14,700 --> 00:20:18,860
so let's see another demo

450
00:20:21,360 --> 00:20:26,220
in this one we will attack an S3 bucket

451
00:20:26,220 --> 00:20:28,380
um the demo we will see is again the

452
00:20:28,380 --> 00:20:33,660
code itself includes a command injection

453
00:20:33,660 --> 00:20:37,200
that execute our malicious command and

454
00:20:37,200 --> 00:20:39,720
what we'll see here is the user

455
00:20:39,720 --> 00:20:43,080
interacts with the feedback form

456
00:20:43,080 --> 00:20:45,360
um the attacker can see like what's

457
00:20:45,360 --> 00:20:47,880
happening inside the network and what is

458
00:20:47,880 --> 00:20:49,380
happening is that

459
00:20:49,380 --> 00:20:53,220
when you click on the attach file there

460
00:20:53,220 --> 00:20:57,299
is a pre-signed URL to upload the file

461
00:20:57,299 --> 00:21:00,660
directly to an SG bucket a present URL

462
00:21:00,660 --> 00:21:03,480
is a URL a temporary URL with a specific

463
00:21:03,480 --> 00:21:05,820
expiration time

464
00:21:05,820 --> 00:21:09,720
this URL is responding back to the

465
00:21:09,720 --> 00:21:11,760
client and then the client is using that

466
00:21:11,760 --> 00:21:14,880
present URL to upload the file to the

467
00:21:14,880 --> 00:21:20,340
bucket and to the Lambda foreign

468
00:21:21,720 --> 00:21:23,700
um this application we're seeing by the

469
00:21:23,700 --> 00:21:26,340
way this is a dvsa application it's a

470
00:21:26,340 --> 00:21:28,880
damn vulnerable serverless application

471
00:21:28,880 --> 00:21:31,500
that we've been part of the development

472
00:21:31,500 --> 00:21:34,440
it's under oasp and basically it's an

473
00:21:34,440 --> 00:21:36,000
application an e-commerce application

474
00:21:36,000 --> 00:21:38,460
built totally on serverless on AWS that

475
00:21:38,460 --> 00:21:40,919
you can deploy with three click just to

476
00:21:40,919 --> 00:21:43,140
show you how

477
00:21:43,140 --> 00:21:46,140
um a serverless application can be well

478
00:21:46,140 --> 00:21:48,360
then vulnerable

479
00:21:48,360 --> 00:21:51,270
so let's see that demo

480
00:21:51,270 --> 00:21:53,640
[Music]

481
00:21:53,640 --> 00:21:57,000
so again we have that anger server

482
00:21:57,000 --> 00:22:00,120
we are logging into the application as

483
00:22:00,120 --> 00:22:01,260
you can see it's an e-commerce

484
00:22:01,260 --> 00:22:03,539
application with games you can purchase

485
00:22:03,539 --> 00:22:07,520
you're going to the feedback form

486
00:22:08,640 --> 00:22:11,640
sending the feedback everything's went

487
00:22:11,640 --> 00:22:13,940
good

488
00:22:14,280 --> 00:22:16,140
now we will open the network and see

489
00:22:16,140 --> 00:22:17,780
what's happening

490
00:22:17,780 --> 00:22:22,039
so we are attaching a file

491
00:22:24,539 --> 00:22:28,559
see the payload attachment name and we

492
00:22:28,559 --> 00:22:32,400
see that pre-signed URL that we

493
00:22:32,400 --> 00:22:35,299
Got Back

494
00:22:36,059 --> 00:22:38,880
oh everything uploaded everything fine

495
00:22:38,880 --> 00:22:41,820
now what we will try to do is change the

496
00:22:41,820 --> 00:22:43,980
name of that file

497
00:22:43,980 --> 00:22:47,039
with a command injection and well we

498
00:22:47,039 --> 00:22:49,760
will see what happens

499
00:22:54,260 --> 00:22:57,179
we're constructing and what we're trying

500
00:22:57,179 --> 00:22:59,400
to do is basically getting the

501
00:22:59,400 --> 00:23:01,080
environment variables of the Lambda

502
00:23:01,080 --> 00:23:03,320
function

503
00:23:10,880 --> 00:23:13,140
touching this file

504
00:23:13,140 --> 00:23:17,520
and looking to see

505
00:23:17,520 --> 00:23:20,220
the respond back

506
00:23:20,220 --> 00:23:23,780
to our Android server

507
00:23:24,659 --> 00:23:26,880
right so we've got results we're going

508
00:23:26,880 --> 00:23:28,320
to the server

509
00:23:28,320 --> 00:23:30,360
and we have

510
00:23:30,360 --> 00:23:32,480
the environment variables

511
00:23:32,480 --> 00:23:35,760
encoded now we are decoding it and see

512
00:23:35,760 --> 00:23:38,780
what we can get from there

513
00:23:41,280 --> 00:23:44,640
oh so we have everything including the

514
00:23:44,640 --> 00:23:47,460
AWS keys that

515
00:23:47,460 --> 00:23:50,039
um the Lambda has to interact with the

516
00:23:50,039 --> 00:23:51,360
cloud environment

517
00:23:51,360 --> 00:23:53,720
basically we're taking those keys

518
00:23:53,720 --> 00:23:56,340
exporting them to our local terminal

519
00:23:56,340 --> 00:23:58,020
local machine

520
00:23:58,020 --> 00:24:02,120
and trying to see what we can do with it

521
00:24:08,460 --> 00:24:10,679
first of all we're listing all the files

522
00:24:10,679 --> 00:24:11,960
all the buckets

523
00:24:11,960 --> 00:24:15,360
inside and

524
00:24:15,360 --> 00:24:18,419
and we've got everything right not only

525
00:24:18,419 --> 00:24:21,659
one bucket not only we didn't get access

526
00:24:21,659 --> 00:24:25,200
denied anything we got everything

527
00:24:25,200 --> 00:24:27,120
um on that cloud environment all the

528
00:24:27,120 --> 00:24:29,340
buckets now we're trying to go deeper

529
00:24:29,340 --> 00:24:30,960
and deeper and deeper and see what we

530
00:24:30,960 --> 00:24:33,320
can get

531
00:24:35,400 --> 00:24:37,740
looking for something interesting that

532
00:24:37,740 --> 00:24:39,179
we can see

533
00:24:39,179 --> 00:24:42,179
just going over and over until we find

534
00:24:42,179 --> 00:24:44,640
the file that we're looking for and now

535
00:24:44,640 --> 00:24:47,700
we're executing a get object command

536
00:24:47,700 --> 00:24:51,260
right to get the file

537
00:24:54,299 --> 00:24:57,960
we get it we get a specific order right

538
00:24:57,960 --> 00:25:00,419
it's an e-commerce application we get a

539
00:25:00,419 --> 00:25:03,080
specific order

540
00:25:04,500 --> 00:25:07,919
and now we will change that order a bit

541
00:25:07,919 --> 00:25:10,200
change the file the the name change the

542
00:25:10,200 --> 00:25:13,860
address and upload that file back again

543
00:25:13,860 --> 00:25:17,700
to the same bucket to the cloud

544
00:25:17,700 --> 00:25:20,640
and again what we see here is command

545
00:25:20,640 --> 00:25:22,140
injection right we have the command

546
00:25:22,140 --> 00:25:24,600
injection inside the Lambda function but

547
00:25:24,600 --> 00:25:27,480
because we have uh over permissive

548
00:25:27,480 --> 00:25:29,940
policy we can do a lot more than what

549
00:25:29,940 --> 00:25:32,340
this Lambda basically actually needs

550
00:25:32,340 --> 00:25:35,700
just uploading a file we can list we can

551
00:25:35,700 --> 00:25:39,360
get and we can upload and that's exactly

552
00:25:39,360 --> 00:25:41,820
what we're seeing here

553
00:25:41,820 --> 00:25:44,600
excuse me

554
00:25:50,100 --> 00:25:54,260
so again the same thing again we are

555
00:25:54,260 --> 00:25:57,000
exploit some Lambda function that had

556
00:25:57,000 --> 00:25:59,340
the vulnerability and because of over

557
00:25:59,340 --> 00:26:02,100
permissive policy we'll be able to go

558
00:26:02,100 --> 00:26:04,320
deeper and deeper and deeper and that

559
00:26:04,320 --> 00:26:06,600
can escalate to many many services in

560
00:26:06,600 --> 00:26:10,200
the cloud to any place to getting an

561
00:26:10,200 --> 00:26:13,140
encrypted keys to getting uh basically

562
00:26:13,140 --> 00:26:15,240
anything right anything the Lambda can

563
00:26:15,240 --> 00:26:16,039
do

564
00:26:16,039 --> 00:26:19,440
we can do within our local machine

565
00:26:19,440 --> 00:26:22,080
without being noticed again it's hard to

566
00:26:22,080 --> 00:26:25,080
there is no access logs there is no such

567
00:26:25,080 --> 00:26:26,640
stuff in a serverless environment so

568
00:26:26,640 --> 00:26:29,580
it's hard to track all this stuff

569
00:26:29,580 --> 00:26:33,260
and we need a way to secure it

570
00:26:35,820 --> 00:26:39,720
okay in this example obviously all aware

571
00:26:39,720 --> 00:26:42,779
of the log4j that was introduced last

572
00:26:42,779 --> 00:26:45,480
year uh it was a lot of noise around

573
00:26:45,480 --> 00:26:47,039
that

574
00:26:47,039 --> 00:26:50,460
um so just a quick demo about how it can

575
00:26:50,460 --> 00:26:52,919
be we can exploit that cve in a Lambda

576
00:26:52,919 --> 00:26:55,799
function we will use the console

577
00:26:55,799 --> 00:26:58,340
directly

578
00:26:59,700 --> 00:27:01,279
uh

579
00:27:01,279 --> 00:27:03,840
invoking with that malicious payload

580
00:27:03,840 --> 00:27:06,960
that vulnerable payload and again

581
00:27:06,960 --> 00:27:09,919
getting the keys

582
00:27:10,850 --> 00:27:12,840
[Music]

583
00:27:12,840 --> 00:27:16,039
opening a server

584
00:27:16,320 --> 00:27:19,639
and then just

585
00:27:19,799 --> 00:27:23,700
invoking our malicious payload

586
00:27:23,700 --> 00:27:26,720
chatting the keys

587
00:27:27,140 --> 00:27:30,000
and there we are now we can do anything

588
00:27:30,000 --> 00:27:32,880
the Lambda can do

589
00:27:32,880 --> 00:27:34,980
um so again

590
00:27:34,980 --> 00:27:37,740
um the same vulnerability again not the

591
00:27:37,740 --> 00:27:38,760
sing vulnerability but another

592
00:27:38,760 --> 00:27:42,179
vulnerability that we can use to get the

593
00:27:42,179 --> 00:27:43,740
keys and interact with the cloud

594
00:27:43,740 --> 00:27:47,900
environment and do whatever we want

595
00:27:49,980 --> 00:27:52,559
okay so we saw like how we can hack

596
00:27:52,559 --> 00:27:55,140
things in a serverless environment and

597
00:27:55,140 --> 00:27:58,260
what are the the risks there so how can

598
00:27:58,260 --> 00:28:01,919
I protect my serverless apps right so I

599
00:28:01,919 --> 00:28:04,559
think that awareness is the first step

600
00:28:04,559 --> 00:28:07,559
aware of the cloud environment be aware

601
00:28:07,559 --> 00:28:09,480
of the challenges that the cloud

602
00:28:09,480 --> 00:28:10,559
environment and the serverless

603
00:28:10,559 --> 00:28:13,740
applications bring with is an important

604
00:28:13,740 --> 00:28:16,020
thing if I'll be aware of the

605
00:28:16,020 --> 00:28:18,900
permissions you can be aware of the

606
00:28:18,900 --> 00:28:21,659
vulnerabilities that I have I will be

607
00:28:21,659 --> 00:28:23,820
able to protect my applications better

608
00:28:23,820 --> 00:28:26,880
so first first things first about the

609
00:28:26,880 --> 00:28:28,320
least privileged principle you're all

610
00:28:28,320 --> 00:28:32,240
aware of it basically give the Lambda as

611
00:28:32,240 --> 00:28:35,640
minimum permission as it needs keep the

612
00:28:35,640 --> 00:28:37,620
permissions to the minimum

613
00:28:37,620 --> 00:28:41,100
and find a way to Monitor and track the

614
00:28:41,100 --> 00:28:43,559
permissions regularly right on a daily

615
00:28:43,559 --> 00:28:46,980
basis it's hard as we saw serverless

616
00:28:46,980 --> 00:28:50,460
architecture is big but there are ways

617
00:28:50,460 --> 00:28:53,520
um to do that and again try to automate

618
00:28:53,520 --> 00:28:55,799
the process as much as possible if it's

619
00:28:55,799 --> 00:28:57,240
not automated

620
00:28:57,240 --> 00:29:00,440
trust me it won't work

621
00:29:00,840 --> 00:29:03,299
the second thing is you need to know our

622
00:29:03,299 --> 00:29:06,419
own code right it's our own code be

623
00:29:06,419 --> 00:29:08,220
aware of the different triggers how can

624
00:29:08,220 --> 00:29:10,020
I protect

625
00:29:10,020 --> 00:29:13,260
um and validate the inputs from our

626
00:29:13,260 --> 00:29:17,960
multiple triggers as we saw API files

627
00:29:17,960 --> 00:29:21,480
events cues and so on so we need to be

628
00:29:21,480 --> 00:29:24,419
aware of the different triggers and the

629
00:29:24,419 --> 00:29:26,039
code and again use the tools and

630
00:29:26,039 --> 00:29:27,720
processes to monitor the code whether

631
00:29:27,720 --> 00:29:29,640
it's the process to review the code

632
00:29:29,640 --> 00:29:32,460
whether it's the using the tools like

633
00:29:32,460 --> 00:29:35,760
Saft or whatever just use the tools and

634
00:29:35,760 --> 00:29:38,760
processes to monitor the code and again

635
00:29:38,760 --> 00:29:43,220
automate that process or it won't work

636
00:29:44,460 --> 00:29:46,559
and the third thing is about the

637
00:29:46,559 --> 00:29:49,020
dependencies right we use a lot of

638
00:29:49,020 --> 00:29:51,539
dependencies we use a lot of Open Source

639
00:29:51,539 --> 00:29:54,659
projects that can introduce vulnerable

640
00:29:54,659 --> 00:29:58,980
um dependent vulnerabilities and we need

641
00:29:58,980 --> 00:30:01,260
a way to keep our dependencies up to

642
00:30:01,260 --> 00:30:02,940
date monitoring tracker vulnerable

643
00:30:02,940 --> 00:30:05,520
dependencies whether we are extracting

644
00:30:05,520 --> 00:30:07,919
s-bomb from H Lambda function to

645
00:30:07,919 --> 00:30:10,500
understand what's going on

646
00:30:10,500 --> 00:30:11,220
um

647
00:30:11,220 --> 00:30:13,740
anything and there are a lot of SCA

648
00:30:13,740 --> 00:30:18,179
tools to use and we need to to do that

649
00:30:18,179 --> 00:30:21,179
monitor and track it and again automate

650
00:30:21,179 --> 00:30:23,600
the process

651
00:30:23,820 --> 00:30:26,580
so today I want to introduce you with

652
00:30:26,580 --> 00:30:28,559
the contrast code Tech contrast code

653
00:30:28,559 --> 00:30:31,799
Tech is a free CLI tool we've developed

654
00:30:31,799 --> 00:30:34,860
at contrast to help you doing all this

655
00:30:34,860 --> 00:30:38,159
stuff that we uh discussed today it's a

656
00:30:38,159 --> 00:30:39,840
tool that you can scare and secure your

657
00:30:39,840 --> 00:30:43,799
code in minutes we have currently three

658
00:30:43,799 --> 00:30:46,080
um commands there one is the Lambda that

659
00:30:46,080 --> 00:30:48,480
we will I will show you in a second how

660
00:30:48,480 --> 00:30:51,539
it works we have the audit command which

661
00:30:51,539 --> 00:30:53,179
is can extract

662
00:30:53,179 --> 00:30:55,860
ACA s-bomb and find your vulnerable

663
00:30:55,860 --> 00:30:59,039
dependencies and contrast scan

664
00:30:59,039 --> 00:31:02,880
which is a static analysis tool to find

665
00:31:02,880 --> 00:31:06,000
the vulnerable static vulnerabilities in

666
00:31:06,000 --> 00:31:08,419
your code

667
00:31:09,480 --> 00:31:12,120
so let's see a quick demo about contrast

668
00:31:12,120 --> 00:31:14,658
Lambda

669
00:31:15,299 --> 00:31:18,299
you can download the the CLI tool via

670
00:31:18,299 --> 00:31:20,220
npm or Brew

671
00:31:20,220 --> 00:31:23,340
to work on any any machine Mac Windows

672
00:31:23,340 --> 00:31:24,919
Linux

673
00:31:24,919 --> 00:31:27,659
so it's already installed

674
00:31:27,659 --> 00:31:29,880
I'm not sure if you can see something

675
00:31:29,880 --> 00:31:31,919
We Run The Help command just to see

676
00:31:31,919 --> 00:31:33,419
what's going on

677
00:31:33,419 --> 00:31:35,520
and what we will do is to run the Lambda

678
00:31:35,520 --> 00:31:39,539
command basically what we do is using

679
00:31:39,539 --> 00:31:42,480
your credentials your AWS credentials in

680
00:31:42,480 --> 00:31:44,399
your local machine to get the

681
00:31:44,399 --> 00:31:46,200
configuration and the code we're not

682
00:31:46,200 --> 00:31:50,340
uploading the credentials to our backend

683
00:31:50,340 --> 00:31:52,919
all right so now I will list all the

684
00:31:52,919 --> 00:31:55,260
functions that are available in the

685
00:31:55,260 --> 00:31:58,640
environment available to scan

686
00:32:04,080 --> 00:32:06,720
by that we can see which functions we

687
00:32:06,720 --> 00:32:09,260
can scan

688
00:32:10,260 --> 00:32:13,020
so you see we have a lot of functions

689
00:32:13,020 --> 00:32:15,720
they're divided by the runtime so we

690
00:32:15,720 --> 00:32:18,179
will pick one function specifically this

691
00:32:18,179 --> 00:32:19,980
one is in node.js

692
00:32:19,980 --> 00:32:23,100
and with one we will run a scan on it

693
00:32:23,100 --> 00:32:25,500
basically within seconds we will get

694
00:32:25,500 --> 00:32:28,740
results and we will cover go over them

695
00:32:28,740 --> 00:32:30,120
all right we are fetching the

696
00:32:30,120 --> 00:32:31,679
configuration and policies for this

697
00:32:31,679 --> 00:32:33,440
Lambda function on your local machine

698
00:32:33,440 --> 00:32:37,440
right we're sending the the payload to

699
00:32:37,440 --> 00:32:40,100
our backend to scan

700
00:32:40,100 --> 00:32:44,719
basically we are starting the scan

701
00:32:48,240 --> 00:32:50,340
a few more seconds and we will get the

702
00:32:50,340 --> 00:32:52,580
results

703
00:32:54,600 --> 00:32:57,600
Gathering the results and now what we

704
00:32:57,600 --> 00:32:58,919
will see

705
00:32:58,919 --> 00:33:00,840
is basically all the vulnerabilities

706
00:33:00,840 --> 00:33:03,539
that we have inside this specific Lambda

707
00:33:03,539 --> 00:33:05,840
function

708
00:33:09,840 --> 00:33:13,880
great so we've got all the results

709
00:33:13,880 --> 00:33:16,559
within 40 seconds and the first

710
00:33:16,559 --> 00:33:19,799
vulnerability we see is uh least

711
00:33:19,799 --> 00:33:22,440
privileged violation a medium list

712
00:33:22,440 --> 00:33:24,600
privilege regulation that tells us

713
00:33:24,600 --> 00:33:28,140
exactly what we need to remove from our

714
00:33:28,140 --> 00:33:30,360
policy

715
00:33:30,360 --> 00:33:34,080
um to make it again more secure and

716
00:33:34,080 --> 00:33:37,440
minimize the risk so we have a wild card

717
00:33:37,440 --> 00:33:41,159
for an S3 we have unused dynamodb

718
00:33:41,159 --> 00:33:43,260
permission and so on so what we do

719
00:33:43,260 --> 00:33:45,179
behind the scenes in analyzing the code

720
00:33:45,179 --> 00:33:47,220
and understanding

721
00:33:47,220 --> 00:33:50,039
what are the services and actions that

722
00:33:50,039 --> 00:33:52,380
Lambda actually use uh in the cloud

723
00:33:52,380 --> 00:33:54,240
environment and in this specific use

724
00:33:54,240 --> 00:33:56,460
case we saw that this Lambda only needs

725
00:33:56,460 --> 00:33:59,880
at least all my buckets permission so we

726
00:33:59,880 --> 00:34:02,399
know how to map between action to

727
00:34:02,399 --> 00:34:05,340
affirmation and you can just take this

728
00:34:05,340 --> 00:34:08,580
new policy based in the Lambda and

729
00:34:08,580 --> 00:34:11,879
minimize the risk the second thing we

730
00:34:11,879 --> 00:34:15,960
see is uh a known cve a vulnerable open

731
00:34:15,960 --> 00:34:20,699
source package node serialize and and

732
00:34:20,699 --> 00:34:23,099
again you can just upgrade to the latest

733
00:34:23,099 --> 00:34:26,699
version or to the minimum version to

734
00:34:26,699 --> 00:34:28,080
um

735
00:34:28,080 --> 00:34:32,418
to remediate this farmability

736
00:34:37,199 --> 00:34:39,780
so a bit about resources and open open

737
00:34:39,780 --> 00:34:42,480
source projects so serverless our top 10

738
00:34:42,480 --> 00:34:45,418
some of them we've discussed but as you

739
00:34:45,418 --> 00:34:46,500
can look up

740
00:34:46,500 --> 00:34:48,119
and see there is a lot of information

741
00:34:48,119 --> 00:34:50,219
there are a lot of information about

742
00:34:50,219 --> 00:34:52,139
which

743
00:34:52,139 --> 00:34:55,199
um each vulnerability and so you can

744
00:34:55,199 --> 00:34:57,780
look it up and and find a lot more

745
00:34:57,780 --> 00:34:58,490
details there

746
00:34:58,490 --> 00:34:59,880
[Music]

747
00:34:59,880 --> 00:35:02,160
we have the hours dvsa that then

748
00:35:02,160 --> 00:35:04,140
vulnerable serverless application we've

749
00:35:04,140 --> 00:35:06,839
discussed uh of course don't use it in

750
00:35:06,839 --> 00:35:09,660
production it's damn vulnerable uh so

751
00:35:09,660 --> 00:35:11,400
deploy to some test account or something

752
00:35:11,400 --> 00:35:13,800
like that and and it's nice to see and

753
00:35:13,800 --> 00:35:15,540
interact with this application and find

754
00:35:15,540 --> 00:35:17,830
all those vulnerabilities

755
00:35:17,830 --> 00:35:19,380
[Music]

756
00:35:19,380 --> 00:35:21,660
um we have the contrast appsec Observer

757
00:35:21,660 --> 00:35:24,240
serverless this is our blog about all

758
00:35:24,240 --> 00:35:26,339
things serverless and Cloud native you

759
00:35:26,339 --> 00:35:28,079
can find there

760
00:35:28,079 --> 00:35:30,960
um recent Trends recent threats and a

761
00:35:30,960 --> 00:35:33,060
lot of a lot more information about the

762
00:35:33,060 --> 00:35:34,980
serverless and serverless security that

763
00:35:34,980 --> 00:35:37,320
might be interesting for you

764
00:35:37,320 --> 00:35:39,780
and of course contrast scotsak what we

765
00:35:39,780 --> 00:35:43,020
just saw you can scan it download it use

766
00:35:43,020 --> 00:35:46,680
it for free it can help a lot in terms

767
00:35:46,680 --> 00:35:48,660
of security and also productivity right

768
00:35:48,660 --> 00:35:51,180
the developer can use it to find which

769
00:35:51,180 --> 00:35:53,220
services and action and which permission

770
00:35:53,220 --> 00:35:56,579
it actually needs that might be very

771
00:35:56,579 --> 00:35:58,680
helpful

772
00:35:58,680 --> 00:36:01,260
so I hope you enjoyed the talk and found

773
00:36:01,260 --> 00:36:03,500
it beneficial if you have any questions

774
00:36:03,500 --> 00:36:07,760
feel free to ask thank you

775
00:36:11,359 --> 00:36:14,839
do we have any questions

776
00:36:20,900 --> 00:36:23,700
hi hi it's going to be a quick one

777
00:36:23,700 --> 00:36:26,579
actually is your tool open source uh yes

778
00:36:26,579 --> 00:36:28,980
would anyone be able to contribute yes

779
00:36:28,980 --> 00:36:30,780
it is open source on GitHub so you can

780
00:36:30,780 --> 00:36:32,400
look it up and see like the code and

781
00:36:32,400 --> 00:36:36,140
everything good stuff okay thank you

782
00:36:45,200 --> 00:36:47,700
oh can we see your barcode again please

783
00:36:47,700 --> 00:36:50,579
the barcode of course thank you

784
00:36:50,579 --> 00:36:52,760
thank you

785
00:36:55,140 --> 00:36:58,140
you can also find it in the contrast

786
00:36:58,140 --> 00:37:00,780
booth there is a sticker with the

787
00:37:00,780 --> 00:37:04,339
barcode so you can get it from there

788
00:37:07,220 --> 00:37:11,520
hi I'm my question is I often would like

789
00:37:11,520 --> 00:37:12,960
to use stuff like this or like

790
00:37:12,960 --> 00:37:15,960
Dependable on GitHub work but I often

791
00:37:15,960 --> 00:37:18,420
can't install anything third party that

792
00:37:18,420 --> 00:37:20,640
I have to give credits to at work just

793
00:37:20,640 --> 00:37:22,320
because of like internal

794
00:37:22,320 --> 00:37:24,780
work policies so if that makes sense I

795
00:37:24,780 --> 00:37:27,060
wonder if you have any ideas for how to

796
00:37:27,060 --> 00:37:28,800
still run these sort of scans or checks

797
00:37:28,800 --> 00:37:30,240
in an environment where you can't

798
00:37:30,240 --> 00:37:31,859
credentialize third-party apps that

799
00:37:31,859 --> 00:37:34,680
easily so you're asking about depend

800
00:37:34,680 --> 00:37:35,940
about

801
00:37:35,940 --> 00:37:38,400
no sorry so I mean to frame that in

802
00:37:38,400 --> 00:37:40,440
relation to contrast I so the bit where

803
00:37:40,440 --> 00:37:42,900
you put in their AWS credentials like we

804
00:37:42,900 --> 00:37:45,000
use gcp in production and I wouldn't be

805
00:37:45,000 --> 00:37:47,880
allowed to put in any credentials into

806
00:37:47,880 --> 00:37:50,640
your application do you mean the

807
00:37:50,640 --> 00:37:52,500
contrast contact

808
00:37:52,500 --> 00:37:54,960
yeah but I but I wonder if there's any

809
00:37:54,960 --> 00:37:56,579
other ways of still

810
00:37:56,579 --> 00:37:57,839
being able to use some of the

811
00:37:57,839 --> 00:37:59,820
functionality Yeah so basically we're

812
00:37:59,820 --> 00:38:02,700
not uploading your secret keys for our

813
00:38:02,700 --> 00:38:05,940
backend right so we use you're using

814
00:38:05,940 --> 00:38:06,720
your

815
00:38:06,720 --> 00:38:09,240
um we're using Code Tech in your local

816
00:38:09,240 --> 00:38:11,160
machine we use it in your local which we

817
00:38:11,160 --> 00:38:13,440
just upload the configuration and code

818
00:38:13,440 --> 00:38:16,380
you can temporarily to analyze it and

819
00:38:16,380 --> 00:38:17,940
bring you the results so we're not

820
00:38:17,940 --> 00:38:19,200
uploading the keys just the

821
00:38:19,200 --> 00:38:21,359
configuration

822
00:38:21,359 --> 00:38:23,880
so I understand that but I'm I still

823
00:38:23,880 --> 00:38:25,740
wouldn't be allowed to do it at work so

824
00:38:25,740 --> 00:38:27,420
I'm just wondering if there's like an

825
00:38:27,420 --> 00:38:30,300
intelligent way around this because it

826
00:38:30,300 --> 00:38:32,760
yeah I'll be happy to answer that uh you

827
00:38:32,760 --> 00:38:34,440
know in the both I will bring you get

828
00:38:34,440 --> 00:38:36,359
you more information about how you can

829
00:38:36,359 --> 00:38:38,820
uh benefit from that

830
00:38:38,820 --> 00:38:43,040
have any further questions for yeah

831
00:38:43,079 --> 00:38:45,180
thanks so much Ken and obviously thanks

832
00:38:45,180 --> 00:38:46,980
for mentioning all of us but serverless

833
00:38:46,980 --> 00:38:48,720
top 10. uh the question I have obviously

834
00:38:48,720 --> 00:38:50,220
everything in your talk including the

835
00:38:50,220 --> 00:38:52,920
demo was very AWS and Lambda functions

836
00:38:52,920 --> 00:38:55,859
oriented is there anything specific in

837
00:38:55,859 --> 00:38:58,380
with Azure functions which you think

838
00:38:58,380 --> 00:39:01,260
makes them either more vulnerable or

839
00:39:01,260 --> 00:39:02,520
less vulnerable can you give us some

840
00:39:02,520 --> 00:39:05,280
examples please so we have Azure it's

841
00:39:05,280 --> 00:39:09,000
currently in uh data phase but we see

842
00:39:09,000 --> 00:39:11,760
the same thing applied to to Azure as

843
00:39:11,760 --> 00:39:13,920
well same vulnerabilities in a different

844
00:39:13,920 --> 00:39:16,320
way of course but the same thing you can

845
00:39:16,320 --> 00:39:18,119
have vulnerable dependencies you can

846
00:39:18,119 --> 00:39:19,079
have

847
00:39:19,079 --> 00:39:20,880
um you have the same list privilege

848
00:39:20,880 --> 00:39:24,300
there so it's pretty much the same and

849
00:39:24,300 --> 00:39:28,020
our tools will uh we'll we'll work on

850
00:39:28,020 --> 00:39:30,680
Azure as well

851
00:39:32,579 --> 00:39:34,560
so any further questions

852
00:39:34,560 --> 00:39:36,480
so thank you very much thank you very

853
00:39:36,480 --> 00:39:38,540
much

