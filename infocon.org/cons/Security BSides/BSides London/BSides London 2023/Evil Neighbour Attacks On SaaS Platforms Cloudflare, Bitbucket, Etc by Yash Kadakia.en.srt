1
00:00:02,820 --> 00:00:03,410
foreign

2
00:00:03,410 --> 00:00:06,359
[Applause]

3
00:00:06,359 --> 00:00:08,220
yeah all right

4
00:00:08,220 --> 00:00:09,179
um so I'll give a little bit of

5
00:00:09,179 --> 00:00:11,580
background how I about the talk and a

6
00:00:11,580 --> 00:00:13,500
little bit about me as well

7
00:00:13,500 --> 00:00:14,940
um even neighbor attacks it's something

8
00:00:14,940 --> 00:00:16,379
we essentially came up here in some of

9
00:00:16,379 --> 00:00:18,720
our head teams that we were doing

10
00:00:18,720 --> 00:00:20,279
um essentially we're just talking about

11
00:00:20,279 --> 00:00:22,859
bad neighbors on SAS platforms right uh

12
00:00:22,859 --> 00:00:24,960
that's the basic premise

13
00:00:24,960 --> 00:00:26,340
um a little bit about me really quick

14
00:00:26,340 --> 00:00:27,900
I've been inside basically for about 20

15
00:00:27,900 --> 00:00:29,820
years grew up in India moved to London

16
00:00:29,820 --> 00:00:32,279
about two years ago now

17
00:00:32,279 --> 00:00:33,780
um social consulting firm called

18
00:00:33,780 --> 00:00:34,980
security Brigade which has been around

19
00:00:34,980 --> 00:00:36,420
for about 18 years

20
00:00:36,420 --> 00:00:38,100
and

21
00:00:38,100 --> 00:00:39,719
the other one's not coming through for

22
00:00:39,719 --> 00:00:41,399
some reason

23
00:00:41,399 --> 00:00:43,440
um a SAS platform called Shadow map as

24
00:00:43,440 --> 00:00:45,000
well which does document monitoring

25
00:00:45,000 --> 00:00:47,340
attack surface management Etc

26
00:00:47,340 --> 00:00:49,260
um so as part of our red teams right we

27
00:00:49,260 --> 00:00:50,579
run across a lot of really interesting

28
00:00:50,579 --> 00:00:54,360
scenarios and the traditional SAS I mean

29
00:00:54,360 --> 00:00:55,860
the Assassin cloud has sort of changed

30
00:00:55,860 --> 00:00:57,059
the stack that we typically deal with

31
00:00:57,059 --> 00:00:58,199
right

32
00:00:58,199 --> 00:00:59,820
um I've spent about 18 years doing red

33
00:00:59,820 --> 00:01:01,800
teams now and traditionally red teams

34
00:01:01,800 --> 00:01:03,780
were always oriented towards your

35
00:01:03,780 --> 00:01:05,400
traditional perimeter right you're

36
00:01:05,400 --> 00:01:06,840
looking to get and get an interactive

37
00:01:06,840 --> 00:01:08,240
directory you're looking to get onto

38
00:01:08,240 --> 00:01:10,140
lateral movements once you get onto the

39
00:01:10,140 --> 00:01:12,360
network and sort of go from there right

40
00:01:12,360 --> 00:01:13,799
um in the last couple of years we've

41
00:01:13,799 --> 00:01:15,299
been doing a lot more red teams that are

42
00:01:15,299 --> 00:01:17,159
startup oriented it's a lot more SAS

43
00:01:17,159 --> 00:01:19,680
oriented a lot more Cloud oriented uh a

44
00:01:19,680 --> 00:01:22,380
lot more AWS and it sort of changes

45
00:01:22,380 --> 00:01:23,700
things in terms of our approach and what

46
00:01:23,700 --> 00:01:25,799
we typically do in a red team right

47
00:01:25,799 --> 00:01:26,939
um so the whole talk that I'm going to

48
00:01:26,939 --> 00:01:28,140
give you today is a redeemer's

49
00:01:28,140 --> 00:01:29,520
perspective which is a little bit

50
00:01:29,520 --> 00:01:31,500
different from of course the devsecup

51
00:01:31,500 --> 00:01:32,400
folks a little bit different from the

52
00:01:32,400 --> 00:01:34,619
pen testers it it kind of looks at a

53
00:01:34,619 --> 00:01:36,540
broader sort of perspective right

54
00:01:36,540 --> 00:01:37,439
um

55
00:01:37,439 --> 00:01:40,619
uh just a quick sort of uh example of a

56
00:01:40,619 --> 00:01:42,900
sample red team Journey that we did a

57
00:01:42,900 --> 00:01:44,640
couple of years ago actually

58
00:01:44,640 --> 00:01:46,079
um just to give you a context of what

59
00:01:46,079 --> 00:01:47,939
what cloud or SAS red teams typically

60
00:01:47,939 --> 00:01:49,619
look like how they differ from your

61
00:01:49,619 --> 00:01:51,899
traditional uh perimeter with behavior

62
00:01:51,899 --> 00:01:54,659
red teams uh so this one started with an

63
00:01:54,659 --> 00:01:55,920
ha proxy server that was running

64
00:01:55,920 --> 00:01:58,259
publicly misconfigured let us start

65
00:01:58,259 --> 00:02:00,060
talking to things behind the network

66
00:02:00,060 --> 00:02:01,320
that weren't supposed to be public right

67
00:02:01,320 --> 00:02:03,360
went from there to accessing an Internet

68
00:02:03,360 --> 00:02:06,360
domain so a private domain to accessing

69
00:02:06,360 --> 00:02:07,799
a Django server that was running on

70
00:02:07,799 --> 00:02:10,199
debug mode debug mode gave us a bunch of

71
00:02:10,199 --> 00:02:12,180
password hashes that had weak passwords

72
00:02:12,180 --> 00:02:14,580
crack those passwords back

73
00:02:14,580 --> 00:02:15,900
um and they were using the same

74
00:02:15,900 --> 00:02:18,300
credential for VPN or very limited VPN

75
00:02:18,300 --> 00:02:20,480
right so this was just the Gateway VPN

76
00:02:20,480 --> 00:02:23,099
essentially you get you route through

77
00:02:23,099 --> 00:02:24,239
that IP address but you can't really

78
00:02:24,239 --> 00:02:26,580
access any on the land right

79
00:02:26,580 --> 00:02:28,140
um turns out they had a bunch of

80
00:02:28,140 --> 00:02:30,120
instances running on AWS they were white

81
00:02:30,120 --> 00:02:31,379
listed to the particular office IP

82
00:02:31,379 --> 00:02:34,800
address so now we had Jenkins uh running

83
00:02:34,800 --> 00:02:36,300
on a white listed basis we could start

84
00:02:36,300 --> 00:02:37,500
accessing Jenkins and go from there

85
00:02:37,500 --> 00:02:40,140
right uh Jenkins had Google single

86
00:02:40,140 --> 00:02:41,519
sign-on we were able to get around that

87
00:02:41,519 --> 00:02:43,379
because they weren't um they weren't

88
00:02:43,379 --> 00:02:44,519
checking what domain you were coming

89
00:02:44,519 --> 00:02:45,540
from you could log into your personal

90
00:02:45,540 --> 00:02:48,060
Gmail and still get in uh pretty classic

91
00:02:48,060 --> 00:02:50,700
flow there uh use the Jenkins build

92
00:02:50,700 --> 00:02:51,900
functionality to start executing

93
00:02:51,900 --> 00:02:53,280
commands

94
00:02:53,280 --> 00:02:55,560
um so Jenkins has a really interesting

95
00:02:55,560 --> 00:02:56,760
functionality

96
00:02:56,760 --> 00:02:58,739
um eventually admin is essentially you

97
00:02:58,739 --> 00:03:00,420
can run commands locally in the Jenkins

98
00:03:00,420 --> 00:03:02,280
instance with a scripting interface

99
00:03:02,280 --> 00:03:04,560
ran the commands extracted the passwords

100
00:03:04,560 --> 00:03:05,819
that were saved secrets that were saved

101
00:03:05,819 --> 00:03:08,819
inside Jenkins decoded them got GitHub I

102
00:03:08,819 --> 00:03:10,560
believe credentials that had 2fa though

103
00:03:10,560 --> 00:03:13,440
uh but when what's interesting is when

104
00:03:13,440 --> 00:03:15,480
you try to enumerate GitHub through the

105
00:03:15,480 --> 00:03:17,220
API it actually doesn't ask for 2fa in

106
00:03:17,220 --> 00:03:19,200
most cases as long as you name the

107
00:03:19,200 --> 00:03:20,819
report know the repository names it will

108
00:03:20,819 --> 00:03:22,019
let you check them out and download the

109
00:03:22,019 --> 00:03:23,099
code

110
00:03:23,099 --> 00:03:24,599
um so did that got about 200

111
00:03:24,599 --> 00:03:26,580
repositories one of them was called

112
00:03:26,580 --> 00:03:29,599
devops contained a bunch of SSH Keys uh

113
00:03:29,599 --> 00:03:32,180
inside them

114
00:03:32,180 --> 00:03:34,739
SSH keys to find some jump servers

115
00:03:34,739 --> 00:03:36,239
connect to those servers get onto their

116
00:03:36,239 --> 00:03:39,599
SSH they had sudo enabled got root bunch

117
00:03:39,599 --> 00:03:42,000
of Saved SSH Keys hopped onto a bunch of

118
00:03:42,000 --> 00:03:43,080
different machines on the network and

119
00:03:43,080 --> 00:03:44,280
pretty much had everything at the end of

120
00:03:44,280 --> 00:03:45,599
that right

121
00:03:45,599 --> 00:03:47,519
um so that's typically what our Cloud

122
00:03:47,519 --> 00:03:49,260
SAS red team Journey looks like and it's

123
00:03:49,260 --> 00:03:50,640
really interesting because it's very

124
00:03:50,640 --> 00:03:52,080
different from what red teams

125
00:03:52,080 --> 00:03:53,940
traditionally used to be right right no

126
00:03:53,940 --> 00:03:56,099
active directory no real

127
00:03:56,099 --> 00:03:57,120
um Enterprise compromise right

128
00:03:57,120 --> 00:03:58,319
everything sort of happened outside the

129
00:03:58,319 --> 00:03:59,940
network

130
00:03:59,940 --> 00:04:01,680
so what I'm here talking about today is

131
00:04:01,680 --> 00:04:02,940
essentially evil neighbor attacks right

132
00:04:02,940 --> 00:04:04,379
I'm talking about multi-tenant SAS

133
00:04:04,379 --> 00:04:05,819
platforms so your bit Market your

134
00:04:05,819 --> 00:04:07,980
cloudflare anything right GitHub any of

135
00:04:07,980 --> 00:04:09,299
those solutions that most Enterprises

136
00:04:09,299 --> 00:04:11,819
use uh where you have a single set of

137
00:04:11,819 --> 00:04:13,260
infra and then of course multiple

138
00:04:13,260 --> 00:04:15,120
different organizations using it and

139
00:04:15,120 --> 00:04:16,380
we've seen some interesting attack

140
00:04:16,380 --> 00:04:17,639
scenarios that we were able to come up

141
00:04:17,639 --> 00:04:19,560
with during our red teams

142
00:04:19,560 --> 00:04:20,820
um that we could leverage and sort of

143
00:04:20,820 --> 00:04:22,740
use that to compromise things right

144
00:04:22,740 --> 00:04:23,880
um so I'll give you a couple of examples

145
00:04:23,880 --> 00:04:25,080
and I'll talk more about these as well

146
00:04:25,080 --> 00:04:27,780
so one is abusing certain functionality

147
00:04:27,780 --> 00:04:29,639
within cloudflare to get past the back

148
00:04:29,639 --> 00:04:31,919
so even when the origin is restricted

149
00:04:31,919 --> 00:04:34,259
limited no Public Access we could still

150
00:04:34,259 --> 00:04:36,300
bypass the graph and sort of Hit the

151
00:04:36,300 --> 00:04:39,240
endpoints and get around that

152
00:04:39,240 --> 00:04:41,820
second is a cloudflare access scenario

153
00:04:41,820 --> 00:04:43,560
where we are able to uh I'll talk a

154
00:04:43,560 --> 00:04:44,639
little bit about what plot for Access is

155
00:04:44,639 --> 00:04:46,800
for anybody who doesn't know it uh but

156
00:04:46,800 --> 00:04:47,880
we're able to get around Cloud for

157
00:04:47,880 --> 00:04:50,340
Access and directly talk to the end

158
00:04:50,340 --> 00:04:52,560
applications essentially bypassing the

159
00:04:52,560 --> 00:04:54,300
zero trust authentication that they have

160
00:04:54,300 --> 00:04:55,440
in place

161
00:04:55,440 --> 00:04:57,780
and the last is uh was bitbucket where

162
00:04:57,780 --> 00:04:59,699
we were able to go and talk SSH to

163
00:04:59,699 --> 00:05:01,320
servers that one service would be on the

164
00:05:01,320 --> 00:05:02,880
public internet at all

165
00:05:02,880 --> 00:05:04,800
um so your Enterprise servers that are

166
00:05:04,800 --> 00:05:07,440
uh behind your firewalls IP whitelisted

167
00:05:07,440 --> 00:05:09,720
restricted from bitbucket for everyone

168
00:05:09,720 --> 00:05:11,160
but bitbucket and we could still get

169
00:05:11,160 --> 00:05:12,840
around there and talk to them so I'll go

170
00:05:12,840 --> 00:05:14,580
into more details but that's

171
00:05:14,580 --> 00:05:16,139
um the other thing I want to add right

172
00:05:16,139 --> 00:05:18,900
now is the this the attack idea isn't

173
00:05:18,900 --> 00:05:19,979
really limited to cloudflare or

174
00:05:19,979 --> 00:05:21,419
bitbucket these are just examples that I

175
00:05:21,419 --> 00:05:24,060
saw During certain set of red teams

176
00:05:24,060 --> 00:05:25,380
um this would work for more SAS

177
00:05:25,380 --> 00:05:27,060
platforms where there's white listing or

178
00:05:27,060 --> 00:05:28,919
limitation that some sort of controls

179
00:05:28,919 --> 00:05:29,639
that you're putting in on your

180
00:05:29,639 --> 00:05:31,620
Enterprise and uh and you'll see what I

181
00:05:31,620 --> 00:05:32,699
mean when I get when I talk a little bit

182
00:05:32,699 --> 00:05:34,620
more about it

183
00:05:34,620 --> 00:05:36,660
so getting through the web right so

184
00:05:36,660 --> 00:05:38,460
again just a little bit of a refresher

185
00:05:38,460 --> 00:05:40,500
cloudflare Waf essentially Cloud any

186
00:05:40,500 --> 00:05:42,960
Cloud Web right is primarily going to

187
00:05:42,960 --> 00:05:45,419
work by routing your DNS to cloudflare's

188
00:05:45,419 --> 00:05:48,780
uh uh DNS it's gonna route all your

189
00:05:48,780 --> 00:05:50,340
traffic to cloudflare swap and it's then

190
00:05:50,340 --> 00:05:51,419
going to talk to your origin server

191
00:05:51,419 --> 00:05:52,500
right

192
00:05:52,500 --> 00:05:54,120
um that's your standard Waf

193
00:05:54,120 --> 00:05:55,800
implementation they typically recommend

194
00:05:55,800 --> 00:05:58,800
that you use cloudflare tunnel or IP

195
00:05:58,800 --> 00:06:00,479
restriction on the origin server to make

196
00:06:00,479 --> 00:06:02,520
sure that an attacker can't get around

197
00:06:02,520 --> 00:06:03,900
it and talk directly to your origin

198
00:06:03,900 --> 00:06:05,220
server right which which typically

199
00:06:05,220 --> 00:06:06,419
happens

200
00:06:06,419 --> 00:06:08,340
um when when you look at bypass there's

201
00:06:08,340 --> 00:06:09,720
typically two ways that it will happen

202
00:06:09,720 --> 00:06:12,660
one is you're either using some sort of

203
00:06:12,660 --> 00:06:15,419
uh input manipulation to sort of bypass

204
00:06:15,419 --> 00:06:17,160
the signature and the second is you're

205
00:06:17,160 --> 00:06:18,240
trying to talk directly to the original

206
00:06:18,240 --> 00:06:20,460
server right what we're doing is a

207
00:06:20,460 --> 00:06:22,080
completely third approach

208
00:06:22,080 --> 00:06:23,880
um and it's it's pretty interesting it's

209
00:06:23,880 --> 00:06:26,039
really straightforward so I've taken the

210
00:06:26,039 --> 00:06:28,319
example of security brigade.com which is

211
00:06:28,319 --> 00:06:30,360
one of our websites uh where if you try

212
00:06:30,360 --> 00:06:33,479
to access wpe hyphen config.php uh it's

213
00:06:33,479 --> 00:06:34,919
going to give you it's cloudflare is

214
00:06:34,919 --> 00:06:36,120
going to pick it up and block you right

215
00:06:36,120 --> 00:06:37,500
and this is the standard rule that

216
00:06:37,500 --> 00:06:39,780
cloudflare has and you can use any rule

217
00:06:39,780 --> 00:06:41,639
essentially to test this out

218
00:06:41,639 --> 00:06:43,080
um so anytime you're trying to access

219
00:06:43,080 --> 00:06:44,880
something potentially malicious gonna

220
00:06:44,880 --> 00:06:47,580
pick it up block you and and take that

221
00:06:47,580 --> 00:06:48,600
action right

222
00:06:48,600 --> 00:06:51,120
and what we realized was that um okay so

223
00:06:51,120 --> 00:06:52,319
to do this attack the first thing you're

224
00:06:52,319 --> 00:06:53,759
going to do right is we have to buy

225
00:06:53,759 --> 00:06:55,139
Cloud for a pro so we had to pay for

226
00:06:55,139 --> 00:06:56,880
that uh gets a little bit of an audit

227
00:06:56,880 --> 00:06:58,080
Trail there

228
00:06:58,080 --> 00:06:59,460
um so you need to buy a cloudflare pro

229
00:06:59,460 --> 00:07:00,840
account it can be for any domain right

230
00:07:00,840 --> 00:07:02,340
so in this case you can't really read it

231
00:07:02,340 --> 00:07:04,860
uh it's for evildomain.in it has nothing

232
00:07:04,860 --> 00:07:06,180
to do with any of the topics right it's

233
00:07:06,180 --> 00:07:09,600
a completely independent uh account that

234
00:07:09,600 --> 00:07:10,919
we've set up with no connection to any

235
00:07:10,919 --> 00:07:13,020
of the domains we're targeting right

236
00:07:13,020 --> 00:07:15,780
once you buy cloudflare Pro uh you have

237
00:07:15,780 --> 00:07:17,520
something called health checks so

238
00:07:17,520 --> 00:07:19,020
cloudflare gives you the ability to

239
00:07:19,020 --> 00:07:20,819
start uh pinging the servers at a

240
00:07:20,819 --> 00:07:22,500
regular frequency to see if there's

241
00:07:22,500 --> 00:07:24,419
they're online if they're working fine

242
00:07:24,419 --> 00:07:25,680
if there's any sort of downtime you can

243
00:07:25,680 --> 00:07:27,240
trigger the load balancer you can check

244
00:07:27,240 --> 00:07:28,860
out all of that right

245
00:07:28,860 --> 00:07:30,300
um so what we've sort of realized right

246
00:07:30,300 --> 00:07:31,560
and what is really interesting and we

247
00:07:31,560 --> 00:07:32,699
actually use this as part of our red

248
00:07:32,699 --> 00:07:34,620
teams was you could create a health

249
00:07:34,620 --> 00:07:36,720
check for pretty much any website in the

250
00:07:36,720 --> 00:07:38,220
world it doesn't really restrict it to

251
00:07:38,220 --> 00:07:39,660
your particular scope or your particular

252
00:07:39,660 --> 00:07:41,940
set of domains that are in your account

253
00:07:41,940 --> 00:07:44,160
so ideally it should probably restrict

254
00:07:44,160 --> 00:07:45,900
me to email domain.in which is the

255
00:07:45,900 --> 00:07:48,060
domain I have linked to the account but

256
00:07:48,060 --> 00:07:50,039
in this case what you can see is I mean

257
00:07:50,039 --> 00:07:51,360
you can't really read it very clearly

258
00:07:51,360 --> 00:07:53,759
I'll sort of walk through it let me say

259
00:07:53,759 --> 00:07:55,740
again a pointer is I've got the original

260
00:07:55,740 --> 00:07:57,840
IP address which we identified through

261
00:07:57,840 --> 00:08:00,360
uh through just looking at past DNS

262
00:08:00,360 --> 00:08:01,800
records in this case right historical

263
00:08:01,800 --> 00:08:03,479
DNS records

264
00:08:03,479 --> 00:08:04,740
um we've got the original IP address the

265
00:08:04,740 --> 00:08:07,020
origin again let me just flag is IP

266
00:08:07,020 --> 00:08:09,180
restricted no public internet access you

267
00:08:09,180 --> 00:08:10,919
can hit it with nmap and it's going to

268
00:08:10,919 --> 00:08:12,840
come back with no ports open right

269
00:08:12,840 --> 00:08:15,360
um so that's not the attack Vector we've

270
00:08:15,360 --> 00:08:18,060
then asked um Cloud fairs alert to look

271
00:08:18,060 --> 00:08:19,680
for the wp config file that we got

272
00:08:19,680 --> 00:08:21,960
blocked with previously we've asked it

273
00:08:21,960 --> 00:08:23,520
to look to make sure that it's getting a

274
00:08:23,520 --> 00:08:26,160
200 okay header response back

275
00:08:26,160 --> 00:08:28,319
and we are asking it to add a host

276
00:08:28,319 --> 00:08:30,479
header for www.security brigade.com or

277
00:08:30,479 --> 00:08:32,159
any internal subdomain in this case

278
00:08:32,159 --> 00:08:34,500
right so you could add a lan subdomain

279
00:08:34,500 --> 00:08:35,700
you could add any subdomain that's

280
00:08:35,700 --> 00:08:37,080
mapped to that particular IP address and

281
00:08:37,080 --> 00:08:38,700
we should be able to access it uh

282
00:08:38,700 --> 00:08:39,839
getting around a lot of the controls

283
00:08:39,839 --> 00:08:40,799
there

284
00:08:40,799 --> 00:08:42,719
and once you do this you're essentially

285
00:08:42,719 --> 00:08:44,880
going to start seeing the response comes

286
00:08:44,880 --> 00:08:46,440
back and says it's healthy which

287
00:08:46,440 --> 00:08:47,880
basically means it was able to hit that

288
00:08:47,880 --> 00:08:50,220
file and got a 200 okay response versus

289
00:08:50,220 --> 00:08:51,959
a four or three or five or two or

290
00:08:51,959 --> 00:08:54,720
anything that's limited right uh on the

291
00:08:54,720 --> 00:08:56,100
server end you can look at the logs and

292
00:08:56,100 --> 00:08:57,480
the logs will tell you that WP

293
00:08:57,480 --> 00:09:00,120
config.php was hit a 200 response Got

294
00:09:00,120 --> 00:09:02,160
Served the hell check ID that was used

295
00:09:02,160 --> 00:09:03,360
which is the same idea as the health

296
00:09:03,360 --> 00:09:04,920
check I created

297
00:09:04,920 --> 00:09:06,180
um and the attacks are coming in from

298
00:09:06,180 --> 00:09:08,880
cloudflare's IP addresses uh owned by

299
00:09:08,880 --> 00:09:10,200
cloudflare which are the list of IP

300
00:09:10,200 --> 00:09:11,580
addresses that cloudflare asks you to

301
00:09:11,580 --> 00:09:13,440
whitelist uh when you're implementing

302
00:09:13,440 --> 00:09:14,760
the web

303
00:09:14,760 --> 00:09:19,140
so put it really simply uh we're abusing

304
00:09:19,140 --> 00:09:21,000
the functionality to use cloudflare's

305
00:09:21,000 --> 00:09:22,680
own IP addresses to talk to the endpoint

306
00:09:22,680 --> 00:09:24,899
uh getting around that origin bypass

307
00:09:24,899 --> 00:09:26,399
that's there and getting us and

308
00:09:26,399 --> 00:09:27,899
bypassing the vaf in the process as well

309
00:09:27,899 --> 00:09:30,240
right so we can force cloudflare to make

310
00:09:30,240 --> 00:09:32,100
those malicious requests on our behalf

311
00:09:32,100 --> 00:09:33,959
and it's going to hit the end point it's

312
00:09:33,959 --> 00:09:35,339
going to get processed and served and

313
00:09:35,339 --> 00:09:37,140
we're going to get around that so that's

314
00:09:37,140 --> 00:09:38,700
that's one attack that we've used a lot

315
00:09:38,700 --> 00:09:40,019
in our red teams and it's been really

316
00:09:40,019 --> 00:09:41,399
interesting right

317
00:09:41,399 --> 00:09:43,019
um the next one is again the same attack

318
00:09:43,019 --> 00:09:44,640
but I'll I'll cover both of it I talk

319
00:09:44,640 --> 00:09:45,779
about mitigation and controls that

320
00:09:45,779 --> 00:09:47,940
clutter already has available

321
00:09:47,940 --> 00:09:49,980
um is cloud fed access right uh so we

322
00:09:49,980 --> 00:09:51,660
use plot for Access as an organization

323
00:09:51,660 --> 00:09:55,080
so all of our assets are behind zero

324
00:09:55,080 --> 00:09:56,880
trust cloudflare access there's no VPN

325
00:09:56,880 --> 00:09:58,560
essentially being used

326
00:09:58,560 --> 00:10:00,959
um so for those that don't know what's

327
00:10:00,959 --> 00:10:02,820
right I've just got a quick little GIF

328
00:10:02,820 --> 00:10:04,680
that plays with Cloud for Access but

329
00:10:04,680 --> 00:10:06,540
simply put you're gonna browse to your

330
00:10:06,540 --> 00:10:08,540
application so in our case it's

331
00:10:08,540 --> 00:10:10,680
lemon.securitybrigade.com it's gonna

332
00:10:10,680 --> 00:10:12,420
check your rules on cloudflare if

333
00:10:12,420 --> 00:10:13,800
everything's okay it's going to give you

334
00:10:13,800 --> 00:10:15,600
some sort of single sign-on right so

335
00:10:15,600 --> 00:10:16,500
it's going to be Google or whatever

336
00:10:16,500 --> 00:10:17,880
whatever's been configured by the

337
00:10:17,880 --> 00:10:19,380
administrator and it's going to

338
00:10:19,380 --> 00:10:21,600
potentially let you in based on that

339
00:10:21,600 --> 00:10:23,279
so it has it's as simple as that right

340
00:10:23,279 --> 00:10:26,360
uh if I look at trying to access

341
00:10:26,360 --> 00:10:27,779
lemon.securitybrigade.com which is one

342
00:10:27,779 --> 00:10:29,399
of our websites it gives me the

343
00:10:29,399 --> 00:10:31,980
cloudflare access Google's SSO page if

344
00:10:31,980 --> 00:10:34,140
you look at the actual burp requests you

345
00:10:34,140 --> 00:10:35,700
can see that initially the request goes

346
00:10:35,700 --> 00:10:37,940
to Lemon which redirects me back to

347
00:10:37,940 --> 00:10:40,260
shadowmap.cloudfed access.com which

348
00:10:40,260 --> 00:10:41,880
checks whether I meet the rules to

349
00:10:41,880 --> 00:10:43,140
authenticate so whether I'm coming from

350
00:10:43,140 --> 00:10:44,700
a particular IP set whether I'm coming

351
00:10:44,700 --> 00:10:46,560
from a geography a bunch of rules that

352
00:10:46,560 --> 00:10:48,540
we can Define and if all of that's okay

353
00:10:48,540 --> 00:10:50,700
it then redirects me to Google and let's

354
00:10:50,700 --> 00:10:51,959
go to Google authentication and then

355
00:10:51,959 --> 00:10:53,160
come back and access the application

356
00:10:53,160 --> 00:10:54,240
right

357
00:10:54,240 --> 00:10:56,220
so in the same exact way what we're able

358
00:10:56,220 --> 00:10:57,480
to do and what's really interesting is

359
00:10:57,480 --> 00:11:00,720
we're able to again use the health check

360
00:11:00,720 --> 00:11:02,940
tool within cloudflare to start talking

361
00:11:02,940 --> 00:11:04,920
to those applications which completely

362
00:11:04,920 --> 00:11:06,959
bypass Cloud for Access for us this is

363
00:11:06,959 --> 00:11:08,519
again I'll talk about this in the

364
00:11:08,519 --> 00:11:09,959
mitigation phase but this only works

365
00:11:09,959 --> 00:11:12,420
when you've done an IP address bypass uh

366
00:11:12,420 --> 00:11:13,560
when they've done an IP address white

367
00:11:13,560 --> 00:11:14,820
listing right

368
00:11:14,820 --> 00:11:15,959
um there is another method that

369
00:11:15,959 --> 00:11:17,100
cloudflare recommends as well I'll talk

370
00:11:17,100 --> 00:11:19,320
about that in a few minutes but the I

371
00:11:19,320 --> 00:11:21,000
and what's interesting here is they have

372
00:11:21,000 --> 00:11:23,820
uh they have two options right one is

373
00:11:23,820 --> 00:11:26,040
expected code what response are you

374
00:11:26,040 --> 00:11:27,240
expecting on the server and the second

375
00:11:27,240 --> 00:11:29,820
is expected content so what you can now

376
00:11:29,820 --> 00:11:31,019
do is you can actually make your

377
00:11:31,019 --> 00:11:33,240
requests and then enumerate the content

378
00:11:33,240 --> 00:11:34,800
that's actually on the page that's

379
00:11:34,800 --> 00:11:37,140
behind the authentication right so for

380
00:11:37,140 --> 00:11:39,540
example uh in this case I put in the

381
00:11:39,540 --> 00:11:40,860
word lemon which is just the title of

382
00:11:40,860 --> 00:11:42,060
the website

383
00:11:42,060 --> 00:11:43,140
um and you can see if it's actually

384
00:11:43,140 --> 00:11:44,760
legitimate it comes back with a healthy

385
00:11:44,760 --> 00:11:46,860
status if it's not it comes back with

386
00:11:46,860 --> 00:11:48,540
unhealthy and you can see in the if you

387
00:11:48,540 --> 00:11:49,860
Mouse over it it says response body

388
00:11:49,860 --> 00:11:52,320
mismatch error so if you're looking for

389
00:11:52,320 --> 00:11:53,459
sensitive files ready if you're looking

390
00:11:53,459 --> 00:11:55,140
for password files config files

391
00:11:55,140 --> 00:11:56,640
something of that nature you can

392
00:11:56,640 --> 00:11:59,459
actually enumerate keywords letters you

393
00:11:59,459 --> 00:12:01,200
could use a blind SQL injection method

394
00:12:01,200 --> 00:12:02,279
where you can actually enumerate one

395
00:12:02,279 --> 00:12:04,380
letter at a time uh figure out the

396
00:12:04,380 --> 00:12:05,459
letters that are in use and then use

397
00:12:05,459 --> 00:12:06,779
that to go back right so there's a lot

398
00:12:06,779 --> 00:12:07,560
of

399
00:12:07,560 --> 00:12:09,360
um interesting things that you could use

400
00:12:09,360 --> 00:12:11,160
this for potentially

401
00:12:11,160 --> 00:12:11,880
um

402
00:12:11,880 --> 00:12:13,440
but yeah so I'll talk about how to fix

403
00:12:13,440 --> 00:12:15,600
it as well uh and this particular set of

404
00:12:15,600 --> 00:12:17,880
bugs you can fix pretty immediately

405
00:12:17,880 --> 00:12:19,980
um but yeah we we've had a lot of fun

406
00:12:19,980 --> 00:12:21,240
with this during our red team so far at

407
00:12:21,240 --> 00:12:22,680
least uh

408
00:12:22,680 --> 00:12:25,079
yeah so in terms of fixing it's a cloud

409
00:12:25,079 --> 00:12:26,640
fair when you're implementing graph or

410
00:12:26,640 --> 00:12:28,500
implementing access typically recommends

411
00:12:28,500 --> 00:12:30,120
uh

412
00:12:30,120 --> 00:12:32,040
restricting connections to your origin

413
00:12:32,040 --> 00:12:33,180
server from anywhere but cloudflare

414
00:12:33,180 --> 00:12:34,620
which is what we're abusing in this case

415
00:12:34,620 --> 00:12:36,600
so if you've chosen to go with that

416
00:12:36,600 --> 00:12:38,100
particular method this attack will still

417
00:12:38,100 --> 00:12:40,140
work right it'll be it'll still get us

418
00:12:40,140 --> 00:12:41,940
to access your web server and the other

419
00:12:41,940 --> 00:12:44,040
one is cloudflare tunnel which is where

420
00:12:44,040 --> 00:12:46,860
you use Argo Auto flat tunnel to

421
00:12:46,860 --> 00:12:48,180
essentially create a reverse tunnel

422
00:12:48,180 --> 00:12:50,040
where cloudflare Daemon is running on

423
00:12:50,040 --> 00:12:51,600
your server talks back to the cloud

424
00:12:51,600 --> 00:12:52,860
friend Network and routes traffic

425
00:12:52,860 --> 00:12:55,019
through that way right so if you've

426
00:12:55,019 --> 00:12:56,700
happened to use cloudflare tunnel you

427
00:12:56,700 --> 00:12:59,100
should be okay uh if you're using the IP

428
00:12:59,100 --> 00:13:00,300
origin method then you're most likely

429
00:13:00,300 --> 00:13:01,680
going to be vulnerable to this you are

430
00:13:01,680 --> 00:13:02,760
going to be available to this attack

431
00:13:02,760 --> 00:13:04,019
right

432
00:13:04,019 --> 00:13:06,480
um so that's that's one set of sort of

433
00:13:06,480 --> 00:13:07,620
attacks and one sort of vectors that

434
00:13:07,620 --> 00:13:09,180
we've seen here and there's a lot of

435
00:13:09,180 --> 00:13:10,740
opportunity within cloudflare as well so

436
00:13:10,740 --> 00:13:12,180
I think uh we were experimenting using

437
00:13:12,180 --> 00:13:14,160
cloudflare workers and using scripting

438
00:13:14,160 --> 00:13:15,600
within workers to try to leverage the

439
00:13:15,600 --> 00:13:16,860
same attack as well which I'm reasonably

440
00:13:16,860 --> 00:13:18,240
sure is possible which is another time

441
00:13:18,240 --> 00:13:21,000
to explore it enough uh but again not

442
00:13:21,000 --> 00:13:23,700
just just point uh I mean it's not a

443
00:13:23,700 --> 00:13:25,079
cloud specific issue right this is the

444
00:13:25,079 --> 00:13:26,220
issue that you see at a whole bunch of

445
00:13:26,220 --> 00:13:28,380
different SAS platforms

446
00:13:28,380 --> 00:13:30,240
um after being the one that I use often

447
00:13:30,240 --> 00:13:31,560
enough that I could pick it up and and

448
00:13:31,560 --> 00:13:33,360
sort of talk about it comfortably

449
00:13:33,360 --> 00:13:34,019
right

450
00:13:34,019 --> 00:13:37,740
um yeah so that's one Set uh bitbucket

451
00:13:37,740 --> 00:13:40,139
again something very similar so what

452
00:13:40,139 --> 00:13:41,579
happens then you're a lot of our red

453
00:13:41,579 --> 00:13:42,839
teams

454
00:13:42,839 --> 00:13:44,700
um is we end up with credentials right

455
00:13:44,700 --> 00:13:47,040
we'll we'll get access to SSH Keys we

456
00:13:47,040 --> 00:13:49,079
get access to passwords but we won't be

457
00:13:49,079 --> 00:13:50,160
able to actually talk to the server

458
00:13:50,160 --> 00:13:51,480
eventually because the server is behind

459
00:13:51,480 --> 00:13:53,639
some sort of controls and that's exactly

460
00:13:53,639 --> 00:13:54,720
what happened to us studying one of our

461
00:13:54,720 --> 00:13:56,459
red teams that we were doing

462
00:13:56,459 --> 00:13:59,040
um and we comp I I believe through

463
00:13:59,040 --> 00:14:00,660
Confluence or jira or some sort of

464
00:14:00,660 --> 00:14:03,120
somewhere that we compromised we ended

465
00:14:03,120 --> 00:14:04,680
up getting SSH keys that were being used

466
00:14:04,680 --> 00:14:07,320
on some particular set of servers uh we

467
00:14:07,320 --> 00:14:08,700
just could not talk to the server right

468
00:14:08,700 --> 00:14:09,899
so we had the keys we couldn't get to

469
00:14:09,899 --> 00:14:12,839
the door and it was really frustrating

470
00:14:12,839 --> 00:14:14,820
um eventually looking up DNS records we

471
00:14:14,820 --> 00:14:17,100
realized that the customer had was using

472
00:14:17,100 --> 00:14:18,600
atlasm products

473
00:14:18,600 --> 00:14:20,160
um so at least when you do a domain

474
00:14:20,160 --> 00:14:21,959
verification it adds a text record you

475
00:14:21,959 --> 00:14:24,060
can enumerate and we use that to figure

476
00:14:24,060 --> 00:14:26,940
out that um they were using SSH

477
00:14:26,940 --> 00:14:28,860
um we did have the original IP addresses

478
00:14:28,860 --> 00:14:30,660
in this case we knew the public IP

479
00:14:30,660 --> 00:14:33,420
addresses from DNS records but they were

480
00:14:33,420 --> 00:14:36,000
completely restricted right so SSH is

481
00:14:36,000 --> 00:14:37,800
filtered you can't connect to it times

482
00:14:37,800 --> 00:14:38,940
out

483
00:14:38,940 --> 00:14:40,980
um iptables is being used on the

484
00:14:40,980 --> 00:14:42,540
particular instance to just block all

485
00:14:42,540 --> 00:14:44,880
other IP addresses out right uh so

486
00:14:44,880 --> 00:14:46,079
that's where we were stuck and we spent

487
00:14:46,079 --> 00:14:47,279
a couple of days brainstorming trying to

488
00:14:47,279 --> 00:14:49,079
think about how do we go about this

489
00:14:49,079 --> 00:14:50,519
um and as you can imagine it can get

490
00:14:50,519 --> 00:14:52,560
really frustrating right you've

491
00:14:52,560 --> 00:14:53,820
um you're running a red team you've got

492
00:14:53,820 --> 00:14:55,320
credentials you've got access you've

493
00:14:55,320 --> 00:14:56,820
compromised you've essentially got there

494
00:14:56,820 --> 00:14:58,079
right

495
00:14:58,079 --> 00:14:59,699
um and just when you thought you you

496
00:14:59,699 --> 00:15:01,260
about had it you realize that you can't

497
00:15:01,260 --> 00:15:03,360
really do anything further with it

498
00:15:03,360 --> 00:15:06,420
um so that's where we're at and we

499
00:15:06,420 --> 00:15:07,800
realized eventually at some point so we

500
00:15:07,800 --> 00:15:09,120
were actually using our own bitbucket

501
00:15:09,120 --> 00:15:11,279
pipelines for some deployments

502
00:15:11,279 --> 00:15:13,019
um and we realized that bitbucket has

503
00:15:13,019 --> 00:15:15,360
some SSH tools built in right uh so it

504
00:15:15,360 --> 00:15:16,860
has a SSH tool built in where you can

505
00:15:16,860 --> 00:15:19,320
plug an IP address in add host it's

506
00:15:19,320 --> 00:15:20,579
gonna tell you whether it can connect to

507
00:15:20,579 --> 00:15:21,839
it or not if it can it gives you the

508
00:15:21,839 --> 00:15:24,180
fingerprint pack right so great we could

509
00:15:24,180 --> 00:15:25,980
now use this to essentially run across

510
00:15:25,980 --> 00:15:28,139
their subnet come back with a list of IP

511
00:15:28,139 --> 00:15:29,820
addresses that they had white listed for

512
00:15:29,820 --> 00:15:31,620
bitbucket right

513
00:15:31,620 --> 00:15:33,000
um so we were able to enumerate a list

514
00:15:33,000 --> 00:15:34,440
of IP addresses that we knew are running

515
00:15:34,440 --> 00:15:37,320
SSH we knew our

516
00:15:37,320 --> 00:15:39,480
um whitelisted for bitbuckets IP

517
00:15:39,480 --> 00:15:41,160
addresses and that can't be accessed

518
00:15:41,160 --> 00:15:43,320
from the outside right uh so that became

519
00:15:43,320 --> 00:15:45,600
the next step we went and wrote a whole

520
00:15:45,600 --> 00:15:47,639
bunch of pipelines

521
00:15:47,639 --> 00:15:49,920
um I mean no rocket science there right

522
00:15:49,920 --> 00:15:52,199
we added the SSH keys that we had

523
00:15:52,199 --> 00:15:53,699
compromised or the password that you've

524
00:15:53,699 --> 00:15:55,560
compromised uh it doesn't have to be

525
00:15:55,560 --> 00:15:57,899
limited to SSH could be RC could be any

526
00:15:57,899 --> 00:15:59,220
protocol that they're essentially using

527
00:15:59,220 --> 00:16:01,800
for deployments right uh since it'll be

528
00:16:01,800 --> 00:16:03,300
an IP whitelist you could realistically

529
00:16:03,300 --> 00:16:05,639
use that so we could then go plug in the

530
00:16:05,639 --> 00:16:07,800
IP address the user the SSH keys of

531
00:16:07,800 --> 00:16:09,779
course uh the attack was based on the

532
00:16:09,779 --> 00:16:11,160
fact that we already had the keys and we

533
00:16:11,160 --> 00:16:13,800
had the passwords uh but it got us to a

534
00:16:13,800 --> 00:16:15,300
point where we could now talk to that

535
00:16:15,300 --> 00:16:17,880
server that was otherwise ipy listed and

536
00:16:17,880 --> 00:16:20,040
we could then start running the pipeline

537
00:16:20,040 --> 00:16:22,800
and getting access

538
00:16:22,800 --> 00:16:24,360
um to execute commands on that

539
00:16:24,360 --> 00:16:25,560
particular server through bitbucket

540
00:16:25,560 --> 00:16:27,720
right so we would simply go and edit the

541
00:16:27,720 --> 00:16:29,399
bitbucket pipeline each time change the

542
00:16:29,399 --> 00:16:31,139
commands if you were running uh get a

543
00:16:31,139 --> 00:16:32,519
reverse shell going or get whatever we

544
00:16:32,519 --> 00:16:34,160
need to go going as part of the process

545
00:16:34,160 --> 00:16:36,180
and then bitbucket pipeline would

546
00:16:36,180 --> 00:16:38,100
execute through its whitelisted IP

547
00:16:38,100 --> 00:16:39,720
addresses if we talked to the CZ server

548
00:16:39,720 --> 00:16:41,940
execute the commands come back give us

549
00:16:41,940 --> 00:16:43,620
the response so the results in the log

550
00:16:43,620 --> 00:16:45,839
file or a text file or the output uh

551
00:16:45,839 --> 00:16:47,699
however we set it up and that would work

552
00:16:47,699 --> 00:16:48,899
as well right

553
00:16:48,899 --> 00:16:50,459
so yes

554
00:16:50,459 --> 00:16:51,899
um give us the wind that we were looking

555
00:16:51,899 --> 00:16:53,399
for and these are a couple of examples

556
00:16:53,399 --> 00:16:54,779
right there's a lot of other platforms

557
00:16:54,779 --> 00:16:56,279
that I think are potentially vulnerable

558
00:16:56,279 --> 00:16:58,199
uh it's just we haven't had the

559
00:16:58,199 --> 00:16:59,399
bandwidth to go and test each one of

560
00:16:59,399 --> 00:17:00,959
them out and and sort of figure it out

561
00:17:00,959 --> 00:17:02,339
right

562
00:17:02,339 --> 00:17:04,439
um mitigating this particular attack is

563
00:17:04,439 --> 00:17:07,740
a little bit of a challenge right so um

564
00:17:07,740 --> 00:17:10,439
the currently I I mean we've spent a lot

565
00:17:10,439 --> 00:17:11,699
of time brainstorming and the the

566
00:17:11,699 --> 00:17:13,319
customer we did the red team four was

567
00:17:13,319 --> 00:17:15,359
not happy we didn't have a solution uh

568
00:17:15,359 --> 00:17:18,059
there wasn't much we could do there but

569
00:17:18,059 --> 00:17:19,439
um we thought about it a whole bunch and

570
00:17:19,439 --> 00:17:20,939
the only way we could really recommend

571
00:17:20,939 --> 00:17:23,459
to them uh was to sort of restructure to

572
00:17:23,459 --> 00:17:25,439
use Docker instances versus the direct

573
00:17:25,439 --> 00:17:28,380
SSH push right so when you when you're

574
00:17:28,380 --> 00:17:30,059
using bitbucket pipelines you can choose

575
00:17:30,059 --> 00:17:33,120
to use SSH to SCP code over to the

576
00:17:33,120 --> 00:17:35,640
server you could choose to use rsync to

577
00:17:35,640 --> 00:17:37,679
move squad over to the server

578
00:17:37,679 --> 00:17:41,100
um in in all of those any push-based

579
00:17:41,100 --> 00:17:42,299
method this attack would essentially

580
00:17:42,299 --> 00:17:44,100
work right because it's all leveraging

581
00:17:44,100 --> 00:17:46,320
IP white listing so what we eventually

582
00:17:46,320 --> 00:17:49,080
had to get them to do was um

583
00:17:49,080 --> 00:17:51,900
um to use git on the other end to sort

584
00:17:51,900 --> 00:17:53,760
of check out as part of the bitbucket

585
00:17:53,760 --> 00:17:55,260
pipeline so they would essentially use

586
00:17:55,260 --> 00:17:57,120
either git to do a check out of that and

587
00:17:57,120 --> 00:17:59,039
download the code so that there was no

588
00:17:59,039 --> 00:18:00,840
direct connectivity or they could use

589
00:18:00,840 --> 00:18:03,480
Docker to then push an image from here

590
00:18:03,480 --> 00:18:04,799
to the docker instance and then use

591
00:18:04,799 --> 00:18:06,120
Docker to come back through kubernetes

592
00:18:06,120 --> 00:18:07,380
and download it

593
00:18:07,380 --> 00:18:09,059
um there isn't an elegant solution Cloud

594
00:18:09,059 --> 00:18:10,320
Fair of course had a great solution

595
00:18:10,320 --> 00:18:12,480
already uh through Argo Tunnels for this

596
00:18:12,480 --> 00:18:13,559
we haven't thought of a good solution

597
00:18:13,559 --> 00:18:15,720
yet I'm not sure

598
00:18:15,720 --> 00:18:17,580
um how bitbucketer and all GitHub even

599
00:18:17,580 --> 00:18:19,799
would go about fixing it

600
00:18:19,799 --> 00:18:21,960
um because short of giving static IP

601
00:18:21,960 --> 00:18:23,580
addresses to customers

602
00:18:23,580 --> 00:18:25,260
um they're gonna have to tell folks that

603
00:18:25,260 --> 00:18:26,820
uh they'll have to be some sort of

604
00:18:26,820 --> 00:18:28,860
secondary certificate process check out

605
00:18:28,860 --> 00:18:29,820
some sort of check that they'll have to

606
00:18:29,820 --> 00:18:31,919
add to fix it but I can't think of a

607
00:18:31,919 --> 00:18:34,559
good fix to actually go and uh adjust

608
00:18:34,559 --> 00:18:36,840
this particular issue right now any

609
00:18:36,840 --> 00:18:38,520
questions so far

610
00:18:38,520 --> 00:18:40,080
happy to sort of answer as we go along

611
00:18:40,080 --> 00:18:42,439
as well

612
00:18:51,480 --> 00:18:55,320
they could but I'm not sure if anyone's

613
00:18:55,320 --> 00:18:56,520
gonna

614
00:18:56,520 --> 00:18:58,860
um agree to deploy that

615
00:18:58,860 --> 00:19:00,660
because for cloudflare you're inherently

616
00:19:00,660 --> 00:19:02,160
using the Argo tunnel as part of your

617
00:19:02,160 --> 00:19:04,679
network in any way uh it's not a

618
00:19:04,679 --> 00:19:05,940
separate measure that you would have to

619
00:19:05,940 --> 00:19:07,740
use in this case it would have to be a

620
00:19:07,740 --> 00:19:08,820
whole separate

621
00:19:08,820 --> 00:19:10,799
client and implementation that would

622
00:19:10,799 --> 00:19:12,980
happen

623
00:19:15,419 --> 00:19:17,700
yes I have I have reached out to them

624
00:19:17,700 --> 00:19:18,900
they haven't come back with a concrete

625
00:19:18,900 --> 00:19:21,120
solution yet but I think yeah

626
00:19:21,120 --> 00:19:23,640
because again it's it's complicated for

627
00:19:23,640 --> 00:19:25,320
them because uh

628
00:19:25,320 --> 00:19:27,419
you might have multiple web services and

629
00:19:27,419 --> 00:19:29,039
multiple applications that you want to

630
00:19:29,039 --> 00:19:30,960
sort of do a health check for outside of

631
00:19:30,960 --> 00:19:32,820
your scope and fixing it would mean

632
00:19:32,820 --> 00:19:35,160
essentially breaking every single health

633
00:19:35,160 --> 00:19:36,960
check that's not within the scope I mean

634
00:19:36,960 --> 00:19:38,700
not within those Scopes it would be a

635
00:19:38,700 --> 00:19:40,080
big breaking change for them to do so I

636
00:19:40,080 --> 00:19:41,760
don't think it's as

637
00:19:41,760 --> 00:19:44,460
um yeah they probably would have to uh I

638
00:19:44,460 --> 00:19:45,960
think for now you're probably going to

639
00:19:45,960 --> 00:19:48,600
see them change the IP addresses uh

640
00:19:48,600 --> 00:19:50,580
they'll probably want to remove the uh

641
00:19:50,580 --> 00:19:52,679
not let health check use the IP

642
00:19:52,679 --> 00:19:53,520
addresses that are within the

643
00:19:53,520 --> 00:19:55,679
whitelisted pool uh so that then it has

644
00:19:55,679 --> 00:19:56,960
to go through the public internet anyway

645
00:19:56,960 --> 00:19:59,520
uh but again I'm not sure because in

646
00:19:59,520 --> 00:20:01,440
that case again uh you wouldn't be able

647
00:20:01,440 --> 00:20:03,240
to do an origin server check so if I

648
00:20:03,240 --> 00:20:04,799
want to make sure that my origin servers

649
00:20:04,799 --> 00:20:05,880
are working correctly and I have 10

650
00:20:05,880 --> 00:20:07,440
different religion servers running I

651
00:20:07,440 --> 00:20:08,520
can't do that I would still have to

652
00:20:08,520 --> 00:20:10,140
route my health check through cloudflare

653
00:20:10,140 --> 00:20:12,299
uh so cloudflare demons the only really

654
00:20:12,299 --> 00:20:14,880
good way to fix it and still retain

655
00:20:14,880 --> 00:20:17,720
functionality so

656
00:20:18,660 --> 00:20:20,760
um I am not sure to be honest if it's

657
00:20:20,760 --> 00:20:23,100
fade again

658
00:20:23,100 --> 00:20:26,000
anything else

659
00:20:28,919 --> 00:20:30,840
like I said essentially the the

660
00:20:30,840 --> 00:20:32,400
challenge isn't really limited to these

661
00:20:32,400 --> 00:20:33,900
folks it will be to for most Enterprise

662
00:20:33,900 --> 00:20:37,740
SAS Solutions so uh github's uh build

663
00:20:37,740 --> 00:20:40,200
feature as well Jenkins as a service is

664
00:20:40,200 --> 00:20:41,700
gonna they're all gonna fall into the

665
00:20:41,700 --> 00:20:43,200
same bucket right

666
00:20:43,200 --> 00:20:45,179
um it's not a cloud specific problem or

667
00:20:45,179 --> 00:20:47,340
it's not a bit bucket specific problem

668
00:20:47,340 --> 00:20:49,380
um any Enterprise solution SAS solution

669
00:20:49,380 --> 00:20:51,780
where there's whitelisting required so

670
00:20:51,780 --> 00:20:53,460
um from a security perspective we're

671
00:20:53,460 --> 00:20:56,100
gonna have to look at a process that

672
00:20:56,100 --> 00:20:57,539
stops

673
00:20:57,539 --> 00:20:59,520
um that stops rather asks the question

674
00:20:59,520 --> 00:21:00,780
when white listing is required for

675
00:21:00,780 --> 00:21:02,880
third-party SAS Services uh because

676
00:21:02,880 --> 00:21:04,740
these sort of attacks I believe aren't

677
00:21:04,740 --> 00:21:06,840
really going to be mitigated easily uh

678
00:21:06,840 --> 00:21:08,400
it'll break a lot of functionality for

679
00:21:08,400 --> 00:21:09,780
it to be for it to mitigate so it's

680
00:21:09,780 --> 00:21:11,940
going to be an accepted risk I think

681
00:21:11,940 --> 00:21:15,240
um so yeah it's going to be um

682
00:21:15,240 --> 00:21:17,760
um it's going to be interesting but this

683
00:21:17,760 --> 00:21:18,480
will

684
00:21:18,480 --> 00:21:20,039
um yeah so I think it's gonna have to be

685
00:21:20,039 --> 00:21:22,320
more of a security process change where

686
00:21:22,320 --> 00:21:23,760
operational teams will have to sort of

687
00:21:23,760 --> 00:21:26,640
ask that question when Dev teams or

688
00:21:26,640 --> 00:21:28,260
devsecop teams come back and try to

689
00:21:28,260 --> 00:21:30,539
figure out how to uh how to get

690
00:21:30,539 --> 00:21:32,520
something whitelisted for a shared

691
00:21:32,520 --> 00:21:35,418
Enterprise service

692
00:21:46,620 --> 00:21:49,100
us

693
00:21:50,760 --> 00:21:52,919
yeah and that's that's what any

694
00:21:52,919 --> 00:21:54,419
Enterprise service that has shared IP

695
00:21:54,419 --> 00:21:56,640
addresses uh we sat down and tried to

696
00:21:56,640 --> 00:21:58,380
make a list but it was just

697
00:21:58,380 --> 00:21:59,760
um it was it would just take a huge

698
00:21:59,760 --> 00:22:01,020
amount of effort to go and evaluate

699
00:22:01,020 --> 00:22:03,240
every single one that had shared IP

700
00:22:03,240 --> 00:22:04,799
addresses and some sort of human human

701
00:22:04,799 --> 00:22:06,960
control but logically they would all

702
00:22:06,960 --> 00:22:09,720
uh fall to the same the same issue

703
00:22:09,720 --> 00:22:11,700
logically of course cloudflare is the

704
00:22:11,700 --> 00:22:13,020
only one that had an exception which is

705
00:22:13,020 --> 00:22:16,280
why I sort of took that as an example

706
00:22:16,280 --> 00:22:18,659
doesn't have a have a good mitigation

707
00:22:18,659 --> 00:22:20,940
anyway so yeah take away from this I

708
00:22:20,940 --> 00:22:22,620
mean honestly so this is the the Crux of

709
00:22:22,620 --> 00:22:25,559
the talk right uh I'm assuming that as

710
00:22:25,559 --> 00:22:27,480
folks dig into it more it's gonna more

711
00:22:27,480 --> 00:22:28,559
and more services will kind of get

712
00:22:28,559 --> 00:22:30,240
vulnerable to it and it's pretty

713
00:22:30,240 --> 00:22:32,760
interesting but the uh the Crux of this

714
00:22:32,760 --> 00:22:35,460
is essentially the need for the need for

715
00:22:35,460 --> 00:22:37,500
outside insecurity right

716
00:22:37,500 --> 00:22:39,059
um typically when we deal with a lot of

717
00:22:39,059 --> 00:22:41,340
our customers folks are extremely

718
00:22:41,340 --> 00:22:43,860
focused on sort of I mean to be honest

719
00:22:43,860 --> 00:22:45,720
if every time I had a seesaw ask me

720
00:22:45,720 --> 00:22:47,880
about dark web monitoring versus just

721
00:22:47,880 --> 00:22:49,140
looking at their perimeter their Cloud

722
00:22:49,140 --> 00:22:50,340
Solutions and that sort of thing right

723
00:22:50,340 --> 00:22:53,460
it's a we tend to sort of lean towards

724
00:22:53,460 --> 00:22:55,679
the what's being talked about a lot more

725
00:22:55,679 --> 00:22:57,360
than the Practical risk that's actually

726
00:22:57,360 --> 00:22:58,380
there

727
00:22:58,380 --> 00:23:00,539
um and I think red teams are something

728
00:23:00,539 --> 00:23:01,799
that add a lot of value from this

729
00:23:01,799 --> 00:23:04,679
perspective uh because traditional pen

730
00:23:04,679 --> 00:23:06,000
testing traditional apps like of course

731
00:23:06,000 --> 00:23:07,620
adds a lot of value but it's typically

732
00:23:07,620 --> 00:23:10,620
looking from uh accepted pathway right I

733
00:23:10,620 --> 00:23:11,880
have an application I'm looking at an

734
00:23:11,880 --> 00:23:14,280
application I'm trying to get there red

735
00:23:14,280 --> 00:23:16,200
teams are forced to look from creative

736
00:23:16,200 --> 00:23:18,600
interesting ways to sort of get in

737
00:23:18,600 --> 00:23:20,220
um and that then in turn typically

738
00:23:20,220 --> 00:23:22,100
identifies a lot of these really weird

739
00:23:22,100 --> 00:23:24,480
uh scenarios where we're able to access

740
00:23:24,480 --> 00:23:25,860
things

741
00:23:25,860 --> 00:23:28,140
um through ways that were completely uh

742
00:23:28,140 --> 00:23:29,580
not the intended purpose of the design

743
00:23:29,580 --> 00:23:31,740
purpose right uh and then that drives a

744
00:23:31,740 --> 00:23:33,000
lot of value so we do a lot of red teams

745
00:23:33,000 --> 00:23:33,960
where we're able to pick this sort of

746
00:23:33,960 --> 00:23:35,700
stuff up and it might just be mess-ups

747
00:23:35,700 --> 00:23:36,900
on the customers Android it's not

748
00:23:36,900 --> 00:23:38,460
necessarily always

749
00:23:38,460 --> 00:23:39,120
um

750
00:23:39,120 --> 00:23:40,740
going to be cloudflare somebody else

751
00:23:40,740 --> 00:23:43,500
that's really messed up uh but if you if

752
00:23:43,500 --> 00:23:44,880
you look at a lot of project teams that

753
00:23:44,880 --> 00:23:46,380
we've done right for example

754
00:23:46,380 --> 00:23:48,780
um uh there are just tons of issues

755
00:23:48,780 --> 00:23:51,780
where uh it's something extremely small

756
00:23:51,780 --> 00:23:53,400
that results in everything else getting

757
00:23:53,400 --> 00:23:54,780
compromised right

758
00:23:54,780 --> 00:23:56,460
um I'll give you an example um so we

759
00:23:56,460 --> 00:23:57,720
were recently doing a red team for uh

760
00:23:57,720 --> 00:24:00,120
for a large Enterprise customer

761
00:24:00,120 --> 00:24:02,880
um they had I mean every every single

762
00:24:02,880 --> 00:24:07,200
important asset was VPN to fade VPN uh

763
00:24:07,200 --> 00:24:08,580
you had to specifically raise a ticket

764
00:24:08,580 --> 00:24:10,740
for VPN so that you could only access

765
00:24:10,740 --> 00:24:12,659
that one particular endpoint inside the

766
00:24:12,659 --> 00:24:14,460
native that you needed access to and get

767
00:24:14,460 --> 00:24:16,440
all of that down right uh eventually

768
00:24:16,440 --> 00:24:18,720
turns out that they had a um what's it

769
00:24:18,720 --> 00:24:21,120
called a remote support platform

770
00:24:21,120 --> 00:24:22,860
um that their ID teams were using to

771
00:24:22,860 --> 00:24:25,380
support users and that's the one that

772
00:24:25,380 --> 00:24:26,820
didn't have two fa we could get access

773
00:24:26,820 --> 00:24:29,640
to use that to access all pull a list of

774
00:24:29,640 --> 00:24:31,080
all the machines access all the machines

775
00:24:31,080 --> 00:24:33,000
execute software do everything RSM

776
00:24:33,000 --> 00:24:35,820
software I think uh but yeah and start

777
00:24:35,820 --> 00:24:37,860
compromising all of that right so uh

778
00:24:37,860 --> 00:24:39,720
it's typically that outside view outside

779
00:24:39,720 --> 00:24:41,280
perspective the red teams add a lot of

780
00:24:41,280 --> 00:24:42,360
value to

781
00:24:42,360 --> 00:24:44,520
um that typically gets missed out and um

782
00:24:44,520 --> 00:24:46,320
yeah so that's it any questions I'm

783
00:24:46,320 --> 00:24:48,720
happy to answer we're a little bit early

784
00:24:48,720 --> 00:24:51,539
um which uh

785
00:24:51,539 --> 00:24:53,940
James if you have any questions with the

786
00:24:53,940 --> 00:24:55,799
mic uh but otherwise it's possible yes

787
00:24:55,799 --> 00:25:00,200
awesome thank you very much

788
00:25:05,960 --> 00:25:08,340
I'll run around with the bike

789
00:25:08,340 --> 00:25:09,240
um

790
00:25:09,240 --> 00:25:11,280
no I think we've maybe had the questions

791
00:25:11,280 --> 00:25:13,380
and cool well we have finished a bit

792
00:25:13,380 --> 00:25:14,640
early so we get some coffee or a bit

793
00:25:14,640 --> 00:25:16,080
fresher brilliant thanks again yes

794
00:25:16,080 --> 00:25:18,918
that's great thank you

