1
00:00:09,310 --> 00:00:16,660
I'm like okay yeah okay you're all

2
00:00:13,540 --> 00:00:18,910
responsive yet excellent excellent well

3
00:00:16,660 --> 00:00:20,890
Kamal practical crypto attacks against

4
00:00:18,910 --> 00:00:22,869
web applications so i had a slight

5
00:00:20,890 --> 00:00:24,700
concern just a little bit before as to

6
00:00:22,869 --> 00:00:25,750
whether i was going to<font color="#E5E5E5"> be too basic so</font>

7
00:00:24,700 --> 00:00:28,300
<font color="#E5E5E5">hopefully</font><font color="#CCCCCC"> i'm going to strike the</font>

8
00:00:25,750 --> 00:00:30,580
balance<font color="#E5E5E5"> between just confusing the hell</font>

9
00:00:28,300 --> 00:00:32,950
out of you for an hour and boring the

10
00:00:30,580 --> 00:00:35,260
hell out of you for now so you<font color="#E5E5E5"> know</font>

11
00:00:32,950 --> 00:00:38,230
listen to see how the hell it goes for

12
00:00:35,260 --> 00:00:39,339
those of<font color="#E5E5E5"> you who don't know me if I talk</font>

13
00:00:38,230 --> 00:00:40,510
to<font color="#CCCCCC"> you fast cousin from New Zealand and</font>

14
00:00:39,340 --> 00:00:44,020
if we can't understand what I'm saying

15
00:00:40,510 --> 00:00:45,760
let me know and I'll slow down you know

16
00:00:44,020 --> 00:00:48,790
Kiwis you know we can talk fast

17
00:00:45,760 --> 00:00:53,980
<font color="#E5E5E5">sometimes we just not initially do so</font>

18
00:00:48,790 --> 00:00:57,220
excellent overview I am NOT a

19
00:00:53,980 --> 00:00:59,640
cryptographer and actually is really

20
00:00:57,220 --> 00:01:02,440
completely anybody who has you know

21
00:00:59,640 --> 00:01:06,270
crypto like you call yourself a

22
00:01:02,440 --> 00:01:08,259
cryptographer in there in the audience

23
00:01:06,270 --> 00:01:11,289
good because we're going<font color="#E5E5E5"> to talk about</font>

24
00:01:08,259 --> 00:01:12,640
today<font color="#E5E5E5"> is you know if you're not</font><font color="#CCCCCC"> a</font>

25
00:01:11,290 --> 00:01:14,920
cryptographer this stuff is practical

26
00:01:12,640 --> 00:01:15,820
stuff to look at so we're looking at and

27
00:01:14,920 --> 00:01:17,829
there's<font color="#E5E5E5"> three particular ones in</font>

28
00:01:15,820 --> 00:01:19,570
particular that I'm looking<font color="#E5E5E5"> at which are</font>

29
00:01:17,829 --> 00:01:22,899
repeatable patterns of things that<font color="#CCCCCC"> you</font>

30
00:01:19,570 --> 00:01:24,070
<font color="#CCCCCC">can look for which are indicative of and</font>

31
00:01:22,899 --> 00:01:27,060
how you can<font color="#E5E5E5"> actually look at kind of</font>

32
00:01:24,070 --> 00:01:30,249
breaking those systems as well and

33
00:01:27,060 --> 00:01:32,020
cryptography is wonderful but if you<font color="#E5E5E5"> use</font>

34
00:01:30,249 --> 00:01:33,520
it badly often you end up<font color="#E5E5E5"> in a situation</font>

35
00:01:32,020 --> 00:01:36,490
where it doesn't give you<font color="#E5E5E5"> anywhere near</font>

36
00:01:33,520 --> 00:01:38,590
the protection that<font color="#E5E5E5"> you that you want so</font>

37
00:01:36,490 --> 00:01:40,889
using<font color="#E5E5E5"> crypto does not equal security</font>

38
00:01:38,590 --> 00:01:44,530
equally crypto does not equal security

39
00:01:40,889 --> 00:01:46,839
and the reason that I probably wanted<font color="#CCCCCC"> to</font>

40
00:01:44,530 --> 00:01:49,659
pitch this one in here and do this talk

41
00:01:46,840 --> 00:01:51,249
is because you know I<font color="#E5E5E5"> think there's</font>

42
00:01:49,659 --> 00:01:52,749
probably a certain one certain people<font color="#E5E5E5"> in</font>

43
00:01:51,249 --> 00:01:54,818
here who do look for<font color="#E5E5E5"> this kind of thing</font>

44
00:01:52,749 --> 00:01:57,068
in fact I ran into port swagger death

45
00:01:54,819 --> 00:02:01,749
just before and he said that<font color="#CCCCCC"> the latest</font>

46
00:01:57,069 --> 00:02:07,450
<font color="#CCCCCC">version of of burps wheedle bit pro or</font>

47
00:02:01,749 --> 00:02:09,369
both or<font color="#CCCCCC"> okay is going to have some bit</font>

48
00:02:07,450 --> 00:02:11,170
flipping attacks against things like

49
00:02:09,369 --> 00:02:12,250
cookies as well which is<font color="#E5E5E5"> exactly the</font>

50
00:02:11,170 --> 00:02:13,869
kind of thing I'm<font color="#E5E5E5"> going talk about now</font>

51
00:02:12,250 --> 00:02:15,450
so it's something<font color="#E5E5E5"> that you'd be probably</font>

52
00:02:13,870 --> 00:02:17,200
had to do manually up until this point

53
00:02:15,450 --> 00:02:18,819
so we're going<font color="#E5E5E5"> to look at the kind of</font>

54
00:02:17,200 --> 00:02:20,679
kind of stuff<font color="#E5E5E5"> that we can we can do that</font>

55
00:02:18,819 --> 00:02:22,750
so I mean perhaps this isn't something

56
00:02:20,680 --> 00:02:23,290
which has been well contested if you've

57
00:02:22,750 --> 00:02:25,450
<font color="#E5E5E5">been around</font>

58
00:02:23,290 --> 00:02:27,939
long time you<font color="#E5E5E5"> probably have heard of or</font>

59
00:02:25,450 --> 00:02:30,429
you may well<font color="#CCCCCC"> be a lot more expert and</font>

60
00:02:27,939 --> 00:02:31,689
some of these things<font color="#E5E5E5"> than I am but the</font>

61
00:02:30,430 --> 00:02:33,819
assumption here is that it's probably<font color="#E5E5E5"> a</font>

62
00:02:31,689 --> 00:02:35,530
few of<font color="#E5E5E5"> you</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> not probably</font>

63
00:02:33,819 --> 00:02:36,700
figuring out that it's quite<font color="#E5E5E5"> as easy to</font>

64
00:02:35,530 --> 00:02:40,890
look<font color="#E5E5E5"> for these kinds of things as it</font>

65
00:02:36,700 --> 00:02:42,819
actually is so the basics

66
00:02:40,890 --> 00:02:45,849
confidentiality integrity and

67
00:02:42,819 --> 00:02:49,929
authenticity so what<font color="#E5E5E5"> are we trying to</font>

68
00:02:45,849 --> 00:02:52,689
achieve I mean it inevitably it's

69
00:02:49,930 --> 00:02:54,579
probably the first one confidentiality

70
00:02:52,689 --> 00:02:58,900
is what we think of you know we want<font color="#E5E5E5"> it</font>

71
00:02:54,579 --> 00:03:00,280
to<font color="#CCCCCC"> be secret but</font><font color="#E5E5E5"> the other ones and I've</font>

72
00:02:58,900 --> 00:03:01,389
used about their fists instead of

73
00:03:00,280 --> 00:03:03,669
availability in this particular case

74
00:03:01,389 --> 00:03:06,790
just to justify those of you who know

75
00:03:03,669 --> 00:03:09,489
what the CIA actually is but it's often

76
00:03:06,790 --> 00:03:10,750
kind of the<font color="#E5E5E5"> audience do the actual</font>

77
00:03:09,489 --> 00:03:13,239
integrity of the data and things like

78
00:03:10,750 --> 00:03:15,389
that is pretty<font color="#E5E5E5"> damn important but it's</font>

79
00:03:13,239 --> 00:03:17,379
not<font color="#CCCCCC"> something that time that we need</font><font color="#E5E5E5"> to</font>

80
00:03:15,389 --> 00:03:19,150
there's<font color="#E5E5E5"> not something that we often kind</font>

81
00:03:17,379 --> 00:03:20,500
of consider and it's often<font color="#CCCCCC"> something</font>

82
00:03:19,150 --> 00:03:23,139
that when you're doing something when

83
00:03:20,500 --> 00:03:25,000
you're so we're developer you're

84
00:03:23,139 --> 00:03:27,549
throwing something together<font color="#E5E5E5"> you know</font>

85
00:03:25,000 --> 00:03:29,739
you're encrypting it you know the way

86
00:03:27,549 --> 00:03:32,530
you do that can have some impacts on

87
00:03:29,739 --> 00:03:33,549
this<font color="#E5E5E5"> kind of stuff as well so what are</font>

88
00:03:32,530 --> 00:03:35,650
<font color="#CCCCCC">we</font><font color="#E5E5E5"> actually gonna look at today so</font>

89
00:03:33,549 --> 00:03:38,650
because we<font color="#E5E5E5"> just have 50 minutes and</font>

90
00:03:35,650 --> 00:03:41,049
because i am going to<font color="#E5E5E5"> tempt the demons</font>

91
00:03:38,650 --> 00:03:43,900
of fate and try<font color="#E5E5E5"> and do live demos of the</font>

92
00:03:41,049 --> 00:03:46,780
stuff which may or may not lead to

93
00:03:43,900 --> 00:03:49,720
massive demo fail or not we<font color="#E5E5E5"> could look</font>

94
00:03:46,780 --> 00:03:53,829
<font color="#E5E5E5">at three main kind of ones so we can</font>

95
00:03:49,720 --> 00:03:55,690
look at ECB mode crypto which even

96
00:03:53,829 --> 00:03:57,459
though you hear about the fact that it's

97
00:03:55,690 --> 00:04:01,120
bad people<font color="#E5E5E5"> still use we're also going to</font>

98
00:03:57,459 --> 00:04:02,620
look at heading<font color="#E5E5E5"> Oracle's and we're also</font>

99
00:04:01,120 --> 00:04:04,299
going to have a brief kind of coverage

100
00:04:02,620 --> 00:04:06,129
on some of the random<font color="#CCCCCC"> number generation</font>

101
00:04:04,299 --> 00:04:09,780
stuff here now all three<font color="#E5E5E5"> of these</font>

102
00:04:06,129 --> 00:04:12,578
scenarios<font color="#E5E5E5"> are ones we find in pin tests</font>

103
00:04:09,780 --> 00:04:14,199
so you know the<font color="#CCCCCC"> question is are you</font>

104
00:04:12,579 --> 00:04:15,099
looking for them and let's have<font color="#E5E5E5"> a look</font>

105
00:04:14,199 --> 00:04:19,750
<font color="#E5E5E5">at the kinds of things you</font><font color="#CCCCCC"> should be</font>

106
00:04:15,099 --> 00:04:21,250
looking for so if we're talking about

107
00:04:19,750 --> 00:04:24,280
the<font color="#E5E5E5"> crypt over two different term kind</font>

108
00:04:21,250 --> 00:04:27,849
of symmetric crypto ones for those of

109
00:04:24,280 --> 00:04:29,830
<font color="#E5E5E5">you who you know don't necessarily</font>

110
00:04:27,849 --> 00:04:32,889
haven't dug into this too and too much

111
00:04:29,830 --> 00:04:34,330
<font color="#E5E5E5">detail we basically have a number of</font>

112
00:04:32,889 --> 00:04:35,560
different ways<font color="#CCCCCC"> that these</font><font color="#E5E5E5"> things work</font>

113
00:04:34,330 --> 00:04:37,370
the two ones we're gonna look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> today</font>

114
00:04:35,560 --> 00:04:40,880
are probably the two most common ones

115
00:04:37,370 --> 00:04:43,210
<font color="#CCCCCC">across ECB and</font><font color="#E5E5E5"> CBC of those CBC is the</font>

116
00:04:40,880 --> 00:04:47,300
one that<font color="#E5E5E5"> you probably should be using</font>

117
00:04:43,210 --> 00:04:49,729
but the trick here is cryptography you

118
00:04:47,300 --> 00:04:51,830
know<font color="#E5E5E5"> encryption doesn't equal integrity</font>

119
00:04:49,729 --> 00:04:55,099
can anyone<font color="#E5E5E5"> tell me what happens if you</font>

120
00:04:51,830 --> 00:04:57,830
take like<font color="#E5E5E5"> you know you know crypto so</font>

121
00:04:55,100 --> 00:05:04,070
you take<font color="#CCCCCC"> ciphertext and you flip a bit</font>

122
00:04:57,830 --> 00:05:06,169
and the Decrypter what happens yeah

123
00:05:04,070 --> 00:05:08,510
you'll get a slight<font color="#E5E5E5"> change in the clear</font>

124
00:05:06,169 --> 00:05:11,990
text now it's not predictable what

125
00:05:08,510 --> 00:05:13,250
that's going to be but you<font color="#CCCCCC"> know equally</font>

126
00:05:11,990 --> 00:05:14,030
you may as<font color="#CCCCCC"> well sit there and flip them</font>

127
00:05:13,250 --> 00:05:16,880
just to see if you get anything

128
00:05:14,030 --> 00:05:18,919
interesting so<font color="#CCCCCC"> I mean used in isolation</font>

129
00:05:16,880 --> 00:05:20,449
these things don't provide any integrity

130
00:05:18,919 --> 00:05:21,680
and a lot of<font color="#E5E5E5"> things that we can talk</font>

131
00:05:20,449 --> 00:05:23,570
<font color="#E5E5E5">about</font><font color="#CCCCCC"> at least</font><font color="#E5E5E5"> especially for the first</font>

132
00:05:21,680 --> 00:05:27,880
part of this talk are directly related

133
00:05:23,570 --> 00:05:29,870
to that so ECB is kind of like<font color="#CCCCCC"> the</font>

134
00:05:27,880 --> 00:05:34,280
default mode we're looking<font color="#E5E5E5"> at block</font>

135
00:05:29,870 --> 00:05:36,050
encryption so block encryption who can

136
00:05:34,280 --> 00:05:38,330
<font color="#E5E5E5">tell me what kind of common block size</font>

137
00:05:36,050 --> 00:05:42,380
would be<font color="#E5E5E5"> what kind of block sizes we're</font>

138
00:05:38,330 --> 00:05:44,690
talking about<font color="#CCCCCC"> 64 bit hundred</font>

139
00:05:42,380 --> 00:05:46,180
<font color="#E5E5E5">twenty-eight bit so those probably the</font>

140
00:05:44,690 --> 00:05:49,940
two most common ones will come across<font color="#E5E5E5"> so</font>

141
00:05:46,180 --> 00:05:53,270
64-bit very common for things like

142
00:05:49,940 --> 00:05:54,620
Triple DES AES usually hundred<font color="#CCCCCC"> twenty</font>

143
00:05:53,270 --> 00:05:59,030
<font color="#CCCCCC">eight bit what does that</font><font color="#E5E5E5"> mean it means</font>

144
00:05:54,620 --> 00:06:00,710
eight bytes or<font color="#E5E5E5"> sixteen bytes</font><font color="#CCCCCC"> so if we're</font>

145
00:05:59,030 --> 00:06:02,539
not quite quite familiar with kinda like

146
00:06:00,710 --> 00:06:03,830
thinking of bits<font color="#E5E5E5"> versus biots you know</font>

147
00:06:02,539 --> 00:06:06,560
we<font color="#E5E5E5"> are talking</font><font color="#CCCCCC"> about discrete blocks</font>

148
00:06:03,830 --> 00:06:08,359
what happens ECB you take the<font color="#E5E5E5"> first</font>

149
00:06:06,560 --> 00:06:10,160
block you encrypt it get the next block

150
00:06:08,360 --> 00:06:17,570
you encrypt it next block you've ripped

151
00:06:10,160 --> 00:06:18,860
it why is that bad because it's oh<font color="#E5E5E5"> ex</font>

152
00:06:17,570 --> 00:06:21,020
it's not bad because it's using<font color="#E5E5E5"> the same</font>

153
00:06:18,860 --> 00:06:24,470
here what happens if the plane tix is

154
00:06:21,020 --> 00:06:27,590
the same you get the same ciphertext

155
00:06:24,470 --> 00:06:29,960
yeah so I mean<font color="#E5E5E5"> it's ECB mode it has been</font>

156
00:06:27,590 --> 00:06:33,138
known to be bad<font color="#CCCCCC"> for as long as there has</font>

157
00:06:29,960 --> 00:06:35,650
<font color="#CCCCCC">been ECB mode why it's why it's not even</font>

158
00:06:33,139 --> 00:06:38,120
there so here's an example take a

159
00:06:35,650 --> 00:06:39,260
graphic and alerts hasn't turned out

160
00:06:38,120 --> 00:06:42,050
particularly well this particular case

161
00:06:39,260 --> 00:06:44,360
encrypted with ECB mode what do<font color="#E5E5E5"> you get</font>

162
00:06:42,050 --> 00:06:48,500
well you don't hide the patents<font color="#CCCCCC"> first</font>

163
00:06:44,360 --> 00:06:50,700
<font color="#CCCCCC">art it is encrypted but</font><font color="#E5E5E5"> you know there's</font>

164
00:06:48,500 --> 00:06:53,880
a<font color="#CCCCCC"> lot of information</font>

165
00:06:50,700 --> 00:06:57,420
which is exposed<font color="#CCCCCC"> it however we continue</font>

166
00:06:53,880 --> 00:07:00,110
to see people using ECB mode because it

167
00:06:57,420 --> 00:07:04,890
is<font color="#E5E5E5"> supported in all of the major crypto</font>

168
00:07:00,110 --> 00:07:06,000
frameworks so it's almost as if they

169
00:07:04,890 --> 00:07:08,400
should<font color="#CCCCCC"> probably really just take it out</font>

170
00:07:06,000 --> 00:07:11,550
but it does have some you<font color="#CCCCCC"> know so people</font>

171
00:07:08,400 --> 00:07:15,270
will continue to use it so<font color="#E5E5E5"> what kind of</font>

172
00:07:11,550 --> 00:07:16,920
snows are we talking about so now take

173
00:07:15,270 --> 00:07:19,080
something<font color="#E5E5E5"> of this cookie cookie value</font>

174
00:07:16,920 --> 00:07:22,680
for example so we have an encrypted

175
00:07:19,080 --> 00:07:25,200
cookie value and it has various kind<font color="#E5E5E5"> of</font>

176
00:07:22,680 --> 00:07:26,310
things that we have user<font color="#CCCCCC"> IDs</font><font color="#E5E5E5"> roles names</font>

177
00:07:25,200 --> 00:07:29,310
you know<font color="#E5E5E5"> the kind of things that you</font>

178
00:07:26,310 --> 00:07:31,830
<font color="#E5E5E5">know you might end up sticking in a</font>

179
00:07:29,310 --> 00:07:34,620
cookie on a legacy system or<font color="#E5E5E5"> something</font>

180
00:07:31,830 --> 00:07:38,130
like that<font color="#E5E5E5"> so let's assume that we've</font>

181
00:07:34,620 --> 00:07:40,170
actually encrypted that so you know

182
00:07:38,130 --> 00:07:41,760
we've taken this we've done it on using

183
00:07:40,170 --> 00:07:45,050
64-bit one in<font color="#E5E5E5"> this particular case we</font>

184
00:07:41,760 --> 00:07:47,130
have eight bytes and we've encrypted it

185
00:07:45,050 --> 00:07:51,060
so you know that's<font color="#E5E5E5"> fine you know it</font>

186
00:07:47,130 --> 00:07:54,360
<font color="#CCCCCC">looks secure its hex it's secure isn't</font>

187
00:07:51,060 --> 00:07:57,660
it yeah in what happens if we actually

188
00:07:54,360 --> 00:07:59,910
swap things around so<font color="#CCCCCC"> I mean we're</font><font color="#E5E5E5"> not</font>

189
00:07:57,660 --> 00:08:02,310
talking<font color="#E5E5E5"> about anything rocket science in</font>

190
00:07:59,910 --> 00:08:04,110
this particular case but if we have an

191
00:08:02,310 --> 00:08:06,540
<font color="#E5E5E5">element of predictability about what is</font>

192
00:08:04,110 --> 00:08:09,000
actually in these particular<font color="#CCCCCC"> things and</font>

193
00:08:06,540 --> 00:08:11,100
there is a direct correlation in ECB

194
00:08:09,000 --> 00:08:14,160
mode between what block is what bit of

195
00:08:11,100 --> 00:08:16,110
data we can<font color="#E5E5E5"> just you</font><font color="#CCCCCC"> know have fun and</font>

196
00:08:14,160 --> 00:08:19,050
play with things so in this particular

197
00:08:16,110 --> 00:08:21,630
case was swapped kind of block<font color="#CCCCCC"> 7 into</font>

198
00:08:19,050 --> 00:08:23,900
where block tippers and then when we

199
00:08:21,630 --> 00:08:27,510
have the decryption operation heavens

200
00:08:23,900 --> 00:08:29,130
you know we have<font color="#E5E5E5"> it</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> quite</font>

201
00:08:27,510 --> 00:08:30,390
different so in this particular case<font color="#CCCCCC"> you</font>

202
00:08:29,130 --> 00:08:33,470
know this is<font color="#CCCCCC"> a contrived example of this</font>

203
00:08:30,390 --> 00:08:35,819
case we've gone from<font color="#E5E5E5"> roll 3</font><font color="#CCCCCC"> throw 39</font>

204
00:08:33,470 --> 00:08:38,550
what does<font color="#CCCCCC"> that mean well in the context</font>

205
00:08:35,820 --> 00:08:42,080
of the application who knows but<font color="#E5E5E5"> it's</font>

206
00:08:38,549 --> 00:08:44,069
<font color="#E5E5E5">interesting that this kind of thing is</font>

207
00:08:42,080 --> 00:08:46,440
not<font color="#E5E5E5"> something that</font><font color="#CCCCCC"> we generally kind of</font>

208
00:08:44,070 --> 00:08:51,540
looking for so<font color="#E5E5E5"> we have you know a bit</font><font color="#CCCCCC"> of</font>

209
00:08:46,440 --> 00:08:53,880
differentiation there so now we have we

210
00:08:51,540 --> 00:08:58,650
<font color="#E5E5E5">will see if this works so this</font>

211
00:08:53,880 --> 00:09:01,740
particular<font color="#E5E5E5"> example is based on a live</font>

212
00:08:58,650 --> 00:09:03,090
example that we did see<font color="#E5E5E5"> add a client so</font>

213
00:09:01,740 --> 00:09:04,230
let me<font color="#CCCCCC"> introduce a few bits</font><font color="#E5E5E5"> and pieces</font>

214
00:09:03,090 --> 00:09:08,910
so first

215
00:09:04,230 --> 00:09:11,490
of all let me introduce you to the stock

216
00:09:08,910 --> 00:09:19,050
trader application which hopefully is

217
00:09:11,490 --> 00:09:26,880
still working it's probably<font color="#E5E5E5"> also yep so</font>

218
00:09:19,050 --> 00:09:27,839
as you can see no license copy so it's

219
00:09:26,880 --> 00:09:30,360
going to have<font color="#E5E5E5"> a look and see what we've</font>

220
00:09:27,840 --> 00:09:31,560
got in here so let<font color="#E5E5E5"> me just maximize this</font>

221
00:09:30,360 --> 00:09:36,630
because this<font color="#E5E5E5"> is a relatively simple</font>

222
00:09:31,560 --> 00:09:38,069
example so this is an example

223
00:09:36,630 --> 00:09:39,390
<font color="#E5E5E5">application one's going to use for a</font>

224
00:09:38,070 --> 00:09:40,860
couple of<font color="#CCCCCC"> things now this is</font><font color="#E5E5E5"> an</font>

225
00:09:39,390 --> 00:09:43,890
interesting piece<font color="#CCCCCC"> of functionality in</font>

226
00:09:40,860 --> 00:09:48,870
this application which<font color="#CCCCCC"> is basically the</font>

227
00:09:43,890 --> 00:09:51,300
self registration functionality and what

228
00:09:48,870 --> 00:09:53,100
happens in this particular functionality

229
00:09:51,300 --> 00:10:04,130
is we just register a user so let me

230
00:09:53,100 --> 00:10:07,110
just put<font color="#E5E5E5"> a test and what happens is</font>

231
00:10:04,130 --> 00:10:09,500
nothing<font color="#E5E5E5"> actually see that this week look</font>

232
00:10:07,110 --> 00:10:09,500
at the

233
00:10:14,899 --> 00:10:19,189
suffering from resolution a little bit

234
00:10:17,180 --> 00:10:21,378
here as we end up with basically a

235
00:10:19,189 --> 00:10:23,540
single sign off single sign-on pass off

236
00:10:21,379 --> 00:10:25,490
between two different systems so in this

237
00:10:23,540 --> 00:10:27,498
particular scenario we have a system

238
00:10:25,490 --> 00:10:28,819
<font color="#CCCCCC">which does enrollment and it's</font><font color="#E5E5E5"> basically</font>

239
00:10:27,499 --> 00:10:31,220
doing a single<font color="#E5E5E5"> sign of pass off to</font>

240
00:10:28,819 --> 00:10:33,618
<font color="#E5E5E5">another system which is authenticating</font>

241
00:10:31,220 --> 00:10:34,699
<font color="#CCCCCC">so this this kind of scenario and does</font>

242
00:10:33,619 --> 00:10:37,730
come<font color="#E5E5E5"> when you kind of rolled your own</font>

243
00:10:34,699 --> 00:10:38,779
single sign-on or if you have perhaps a

244
00:10:37,730 --> 00:10:40,129
legacy system where you're logging

245
00:10:38,779 --> 00:10:41,499
somebody in and then<font color="#CCCCCC"> you're basically</font>

246
00:10:40,129 --> 00:10:44,269
kicking them over to a new system

247
00:10:41,499 --> 00:10:47,649
probably<font color="#E5E5E5"> as part of kind of a rollover</font>

248
00:10:44,269 --> 00:10:49,610
period in this<font color="#E5E5E5"> particular case we have</font>

249
00:10:47,649 --> 00:10:50,749
you know the first<font color="#CCCCCC"> thing is</font><font color="#E5E5E5"> this like</font>

250
00:10:49,610 --> 00:10:52,699
it's like you know I'm always<font color="#E5E5E5"> interested</font>

251
00:10:50,749 --> 00:10:57,410
in<font color="#E5E5E5"> anything which is hex but it's like 1</font>

252
00:10:52,699 --> 00:10:59,149
2 3 4<font color="#E5E5E5"> 5</font><font color="#CCCCCC"> 6</font><font color="#E5E5E5"> 7 8 9 10 11 12 13 14 15 16 I'm</font>

253
00:10:57,410 --> 00:11:01,959
especially interested in anything which

254
00:10:59,149 --> 00:11:04,129
is divisible into blocks of eights

255
00:11:01,959 --> 00:11:06,378
because it's automatically a little bit

256
00:11:04,129 --> 00:11:08,779
suspicious now this particular<font color="#E5E5E5"> case we</font>

257
00:11:06,379 --> 00:11:11,420
have a pure hex value it could also be

258
00:11:08,779 --> 00:11:13,579
basically Ford it could be encoded in<font color="#E5E5E5"> a</font>

259
00:11:11,420 --> 00:11:16,878
number of different<font color="#CCCCCC"> ways as well so it's</font>

260
00:11:13,579 --> 00:11:18,949
<font color="#CCCCCC">it's something which is of interest I'm</font>

261
00:11:16,879 --> 00:11:21,949
also also<font color="#E5E5E5"> very interested in situations</font>

262
00:11:18,949 --> 00:11:23,479
where we possibly have<font color="#CCCCCC"> the ability to</font>

263
00:11:21,949 --> 00:11:25,969
put<font color="#CCCCCC"> something into something which is</font>

264
00:11:23,480 --> 00:11:28,160
encrypted so if<font color="#E5E5E5"> we have the ability to</font>

265
00:11:25,970 --> 00:11:30,410
force the application to equip something

266
00:11:28,160 --> 00:11:32,629
for us and the<font color="#CCCCCC"> observed through the</font>

267
00:11:30,410 --> 00:11:36,589
outputs and that's the particular

268
00:11:32,629 --> 00:11:39,920
example in this case so the example that

269
00:11:36,589 --> 00:11:42,100
we have in this case is this let me log

270
00:11:39,920 --> 00:11:42,099
out

271
00:11:47,470 --> 00:11:58,600
now it just skip several stages there is

272
00:11:50,110 --> 00:12:01,450
an account called admin and strangely

273
00:11:58,600 --> 00:12:03,850
enough you can't create another account

274
00:12:01,450 --> 00:12:04,750
called admin because the way that<font color="#E5E5E5"> the</font>

275
00:12:03,850 --> 00:12:07,930
authentication for this particular

276
00:12:04,750 --> 00:12:10,780
application works you<font color="#E5E5E5"> know it is it is a</font>

277
00:12:07,930 --> 00:12:12,640
<font color="#E5E5E5">login and hand over but what kind of</font>

278
00:12:10,780 --> 00:12:13,900
stuff could we do well let's have a look

279
00:12:12,640 --> 00:12:17,110
and see<font color="#CCCCCC"> what happens if we do stuff like</font>

280
00:12:13,900 --> 00:12:18,130
this so I'm just going to do a few of

281
00:12:17,110 --> 00:12:25,500
these<font color="#CCCCCC"> and we'll have</font><font color="#E5E5E5"> a look and see what</font>

282
00:12:18,130 --> 00:12:25,500
<font color="#E5E5E5">it looks like it's going to call X admin</font>

283
00:12:40,640 --> 00:12:47,189
<font color="#E5E5E5">it's the X admin I'll do one more</font>

284
00:12:45,720 --> 00:12:49,970
discreet have a look<font color="#E5E5E5"> and see what we're</font>

285
00:12:47,190 --> 00:12:49,970
seeing it's exactly

286
00:12:56,080 --> 00:13:08,930
look at sea where are<font color="#E5E5E5"> we there's my book</font>

287
00:13:04,310 --> 00:13:12,410
on too many windows<font color="#CCCCCC"> okay so let's have a</font>

288
00:13:08,930 --> 00:13:19,130
look and<font color="#E5E5E5"> see what</font><font color="#CCCCCC"> we're actually what</font>

289
00:13:12,410 --> 00:13:26,949
we've been seeing so so there's the

290
00:13:19,130 --> 00:13:26,950
second one so 09 another one b7 ah

291
00:13:27,670 --> 00:13:33,620
excellent<font color="#E5E5E5"> okay interesting it's now at</font>

292
00:13:30,800 --> 00:13:35,000
longer<font color="#E5E5E5"> okay so what's happened in this</font>

293
00:13:33,620 --> 00:13:36,710
particular cases were actually started

294
00:13:35,000 --> 00:13:38,900
another block<font color="#E5E5E5"> okay so this is</font>

295
00:13:36,710 --> 00:13:40,610
interesting so generally speaking what

296
00:13:38,900 --> 00:13:43,010
we're going to do is we're going to

297
00:13:40,610 --> 00:13:44,300
continue adding<font color="#E5E5E5"> Xers in this winter case</font>

298
00:13:43,010 --> 00:13:45,710
I'm going to skip a few steps because we

299
00:13:44,300 --> 00:13:48,439
actually end up doing about nine other

300
00:13:45,710 --> 00:13:50,270
words particular case what's happened in

301
00:13:48,440 --> 00:13:53,030
this<font color="#E5E5E5"> particular case well whatever is in</font>

302
00:13:50,270 --> 00:13:54,230
there by putting<font color="#CCCCCC"> the</font><font color="#E5E5E5"> excess is now</font>

303
00:13:53,030 --> 00:13:57,260
spilled over into the next one so we

304
00:13:54,230 --> 00:14:01,820
have you know<font color="#E5E5E5"> presumably you</font><font color="#CCCCCC"> know exit</font>

305
00:13:57,260 --> 00:14:05,000
<font color="#CCCCCC">6a and then or maybe exists x 60 x ADM</font>

306
00:14:01,820 --> 00:14:08,480
up in<font color="#CCCCCC"> EMI</font><font color="#E5E5E5"> in and then the last the last</font>

307
00:14:05,000 --> 00:14:13,180
<font color="#E5E5E5">block is actually the</font><font color="#CCCCCC"> in so let's just</font>

308
00:14:08,480 --> 00:14:13,180
<font color="#E5E5E5">skip a couple of steps and show you</font>

309
00:14:13,300 --> 00:14:17,079
where we're going with this

310
00:14:24,090 --> 00:14:27,870
you create<font color="#E5E5E5"> three more</font>

311
00:14:37,170 --> 00:14:43,670
that's how many that's 1237

312
00:14:53,310 --> 00:14:56,310
thanks

313
00:15:01,529 --> 00:15:05,790
and we'll do one<font color="#CCCCCC"> of nine as well</font>

314
00:15:17,830 --> 00:15:20,610
ok

315
00:15:21,390 --> 00:15:24,720
so it's going to have look<font color="#CCCCCC"> and see what</font>

316
00:15:23,490 --> 00:15:34,920
<font color="#E5E5E5">kind of results we get with that kind of</font>

317
00:15:24,720 --> 00:15:37,170
thing so okay so<font color="#CCCCCC"> it was the last one</font>

318
00:15:34,920 --> 00:15:39,030
that<font color="#CCCCCC"> one's was when we just basically</font>

319
00:15:37,170 --> 00:15:40,979
would made<font color="#E5E5E5"> Edmund greater than eight</font>

320
00:15:39,030 --> 00:15:43,020
bytes because my invites long so if<font color="#E5E5E5"> we</font>

321
00:15:40,980 --> 00:15:46,880
go down<font color="#E5E5E5"> and have a look at them so that</font>

322
00:15:43,020 --> 00:15:54,449
<font color="#E5E5E5">was a seven or maybe was at six sixes</font>

323
00:15:46,880 --> 00:16:01,830
letting of seven<font color="#CCCCCC"> nixes a texts so and 9</font>

324
00:15:54,450 --> 00:16:04,980
x's<font color="#CCCCCC"> ok that's interesting now we have</font>

325
00:16:01,830 --> 00:16:05,970
exactly the same thing so if we're doing

326
00:16:04,980 --> 00:16:07,680
this kind of thing up until now we

327
00:16:05,970 --> 00:16:08,640
probably don't know what that<font color="#CCCCCC"> is other</font>

328
00:16:07,680 --> 00:16:10,949
than the fact that seems to be

329
00:16:08,640 --> 00:16:12,960
predictable or seems to be contained

330
00:16:10,950 --> 00:16:15,440
some stuff that<font color="#CCCCCC"> we've put</font><font color="#E5E5E5"> in there but</font>

331
00:16:12,960 --> 00:16:17,850
now it's kind of it's pretty clear that

332
00:16:15,440 --> 00:16:22,970
what's what's in that first kind<font color="#E5E5E5"> of 16</font>

333
00:16:17,850 --> 00:16:27,330
bytes what is that 3522 if to whatever

334
00:16:22,970 --> 00:16:28,890
yeah it's 8 x's and that's it so because

335
00:16:27,330 --> 00:16:33,600
<font color="#CCCCCC">we still have a TEDx is on the</font><font color="#E5E5E5"> front of</font>

336
00:16:28,890 --> 00:16:36,030
it so likely is not and we see<font color="#CCCCCC"> this</font>

337
00:16:33,600 --> 00:16:41,180
because the first block is exactly the

338
00:16:36,030 --> 00:16:45,449
same it's probably ECB mode so what is

339
00:16:41,180 --> 00:16:53,880
if we have a look at 63 what does<font color="#E5E5E5"> 4 5</font>

340
00:16:45,450 --> 00:16:55,950
a-9 etc what is that Edmund it's

341
00:16:53,880 --> 00:16:58,770
probably<font color="#E5E5E5"> Edmund encrypted and you know</font>

342
00:16:55,950 --> 00:17:02,730
just just because we've<font color="#E5E5E5"> got to prove</font>

343
00:16:58,770 --> 00:17:06,270
these things this is when Justin hopes

344
00:17:02,730 --> 00:17:07,140
this this actually works because<font color="#E5E5E5"> even</font>

345
00:17:06,270 --> 00:17:08,310
though you test these things the

346
00:17:07,140 --> 00:17:09,420
previous night he never one hundred

347
00:17:08,310 --> 00:17:13,679
percent sure it was going to work on the

348
00:17:09,420 --> 00:17:18,959
day so<font color="#E5E5E5"> that's the value that we</font>

349
00:17:13,680 --> 00:17:21,270
extracted which<font color="#CCCCCC"> logsdon</font><font color="#E5E5E5"> Edmund so this</font>

350
00:17:18,959 --> 00:17:24,150
<font color="#CCCCCC">is a very simple</font><font color="#E5E5E5"> example but this is</font>

351
00:17:21,270 --> 00:17:25,530
based on a concrete example where we did

352
00:17:24,150 --> 00:17:26,820
<font color="#E5E5E5">exactly this the only difference in the</font>

353
00:17:25,530 --> 00:17:30,510
example that we that we actually

354
00:17:26,819 --> 00:17:32,790
exploited was this was a cookie and the

355
00:17:30,510 --> 00:17:35,140
only other you know cut a bit was

356
00:17:32,790 --> 00:17:36,700
instead of putting basically stuff on

357
00:17:35,140 --> 00:17:39,100
in that particular case instead of

358
00:17:36,700 --> 00:17:40,780
<font color="#E5E5E5">putting stuff on the front of the</font>

359
00:17:39,100 --> 00:17:42,909
username we're actually putting stuff<font color="#E5E5E5"> in</font>

360
00:17:40,780 --> 00:17:44,770
<font color="#E5E5E5">the middle of user name and that was</font>

361
00:17:42,910 --> 00:17:47,530
<font color="#CCCCCC">largely because of how they did their</font>

362
00:17:44,770 --> 00:17:49,629
the user names is like that but it's

363
00:17:47,530 --> 00:17:52,570
literally if you see pieces<font color="#E5E5E5"> of data with</font>

364
00:17:49,630 --> 00:17:55,210
that you have to play with them and see

365
00:17:52,570 --> 00:17:58,570
what happens so this one's particular

366
00:17:55,210 --> 00:18:00,370
one is a nice easy example but you

367
00:17:58,570 --> 00:18:04,600
occasionally will come across exactly

368
00:18:00,370 --> 00:18:09,459
<font color="#E5E5E5">the kind of thing so it ECB mode it is</font>

369
00:18:04,600 --> 00:18:13,899
<font color="#CCCCCC">generally bad so what about CBC mode so</font>

370
00:18:09,460 --> 00:18:14,950
ECB mode came out and everyone said all

371
00:18:13,900 --> 00:18:16,990
that sexually not a particularly good

372
00:18:14,950 --> 00:18:18,670
<font color="#E5E5E5">idea because we could do block swapping</font>

373
00:18:16,990 --> 00:18:20,860
so what we're going to do is going to<font color="#E5E5E5"> do</font>

374
00:18:18,670 --> 00:18:21,940
cipher block chaining so what we're

375
00:18:20,860 --> 00:18:25,500
going to do is<font color="#E5E5E5"> we're actually going to X</font>

376
00:18:21,940 --> 00:18:28,660
or in effectively something to make the

377
00:18:25,500 --> 00:18:30,190
the<font color="#E5E5E5"> next block dependent on the previous</font>

378
00:18:28,660 --> 00:18:31,360
one so the<font color="#E5E5E5"> way that happens</font><font color="#CCCCCC"> to be</font>

379
00:18:30,190 --> 00:18:33,220
implemented<font color="#CCCCCC"> in this particular case is</font>

380
00:18:31,360 --> 00:18:35,350
first of<font color="#E5E5E5"> all this is where you have an</font>

381
00:18:33,220 --> 00:18:37,150
initialization vector what's the

382
00:18:35,350 --> 00:18:38,919
initialization vector useful and

383
00:18:37,150 --> 00:18:41,680
Vladimir you've been answering lots of

384
00:18:38,920 --> 00:18:45,880
questions initialize the vexation<font color="#CCCCCC"> Victor</font>

385
00:18:41,680 --> 00:18:47,770
what's it used for<font color="#CCCCCC"> it's where guys it's</font>

386
00:18:45,880 --> 00:18:50,170
made to make that it's used to make the

387
00:18:47,770 --> 00:18:51,370
first<font color="#E5E5E5"> block not predictable because we</font>

388
00:18:50,170 --> 00:18:53,380
don't we're not mixing in anything

389
00:18:51,370 --> 00:18:55,060
previously with the first block so the

390
00:18:53,380 --> 00:18:57,040
first block was always the same it would

391
00:18:55,060 --> 00:18:58,419
be always the same would end up<font color="#CCCCCC"> with you</font>

392
00:18:57,040 --> 00:18:59,770
<font color="#E5E5E5">know having some predictably about there</font>

393
00:18:58,420 --> 00:19:01,600
so the initialisation vector kind of

394
00:18:59,770 --> 00:19:03,160
mixes<font color="#E5E5E5"> some stuff and wipe the start work</font>

395
00:19:01,600 --> 00:19:05,169
and effectively what we're doing is

396
00:19:03,160 --> 00:19:07,570
we're exerting in the<font color="#CCCCCC"> ciphertext from</font>

397
00:19:05,170 --> 00:19:10,870
the previous operation with the plane

398
00:19:07,570 --> 00:19:12,340
tix and then encrypting van so

399
00:19:10,870 --> 00:19:14,560
effectively we're building a dependency

400
00:19:12,340 --> 00:19:16,000
so so this looks<font color="#E5E5E5"> all really good and I</font>

401
00:19:14,560 --> 00:19:18,310
like these like diagrams which have

402
00:19:16,000 --> 00:19:20,230
pretty boxes and eggs<font color="#CCCCCC"> ores and arrows</font>

403
00:19:18,310 --> 00:19:24,879
and plain text goes here in<font color="#CCCCCC"> cipher text</font>

404
00:19:20,230 --> 00:19:26,170
goes here but any so we have<font color="#CCCCCC"> X or</font>

405
00:19:24,880 --> 00:19:29,470
operations<font color="#E5E5E5"> this that's what there is is</font>

406
00:19:26,170 --> 00:19:31,360
it for and it does what<font color="#CCCCCC"> it's intended to</font>

407
00:19:29,470 --> 00:19:32,440
do it does mix in and kind of break a

408
00:19:31,360 --> 00:19:36,850
lot<font color="#E5E5E5"> of those patterns and things like</font>

409
00:19:32,440 --> 00:19:39,340
that<font color="#CCCCCC"> but implementation is a bitch so</font>

410
00:19:36,850 --> 00:19:41,439
decryption operation is effectively

411
00:19:39,340 --> 00:19:43,419
<font color="#E5E5E5">exactly the reverse so we end up with</font>

412
00:19:41,440 --> 00:19:47,680
the initialization vector ciphertext

413
00:19:43,420 --> 00:19:49,030
decrypt<font color="#E5E5E5"> X or plain text so we are doing</font>

414
00:19:47,680 --> 00:19:51,160
the XOR operations in<font color="#E5E5E5"> reverse</font>

415
00:19:49,030 --> 00:19:52,480
in order to be able to do this what's

416
00:19:51,160 --> 00:19:54,720
what's important about this is we're

417
00:19:52,480 --> 00:19:57,910
actually exhorting in the<font color="#CCCCCC"> ciphertext</font>

418
00:19:54,720 --> 00:20:01,120
from the previous one so it's just the

419
00:19:57,910 --> 00:20:02,770
implementation and block swapping will

420
00:20:01,120 --> 00:20:03,939
result in corruption so you can't you

421
00:20:02,770 --> 00:20:06,490
can't talk them around Dueling double

422
00:20:03,940 --> 00:20:08,890
nonsense note this doesn't mean that<font color="#CCCCCC"> you</font>

423
00:20:06,490 --> 00:20:10,420
won't be<font color="#E5E5E5"> able to decrypt it you can</font>

424
00:20:08,890 --> 00:20:11,620
you'll<font color="#CCCCCC"> be able to</font><font color="#E5E5E5"> just arbitrarily stick</font>

425
00:20:10,420 --> 00:20:14,530
whatever you like<font color="#E5E5E5"> into an encryption</font>

426
00:20:11,620 --> 00:20:15,550
algorithm for the most part and force it

427
00:20:14,530 --> 00:20:17,170
<font color="#E5E5E5">to decrypt you'll just end up with</font>

428
00:20:15,550 --> 00:20:18,580
nonsense<font color="#CCCCCC"> you're not going to end up with</font>

429
00:20:17,170 --> 00:20:24,940
what you start with what you're looking

430
00:20:18,580 --> 00:20:28,780
for but the way people<font color="#E5E5E5"> implement systems</font>

431
00:20:24,940 --> 00:20:29,950
based on these can have<font color="#CCCCCC"> problems and</font>

432
00:20:28,780 --> 00:20:32,230
this is where the padding Oracle is

433
00:20:29,950 --> 00:20:34,120
particularly good example this so what

434
00:20:32,230 --> 00:20:36,010
<font color="#E5E5E5">does a padding Oracle has nothing to do</font>

435
00:20:34,120 --> 00:20:40,570
with Oracle so we're not going<font color="#E5E5E5"> to talk</font>

436
00:20:36,010 --> 00:20:42,160
anything about databases this is a kind

437
00:20:40,570 --> 00:20:43,000
<font color="#E5E5E5">of crypto issue and also crypto sure</font>

438
00:20:42,160 --> 00:20:45,160
which has been known about for a long

439
00:20:43,000 --> 00:20:49,000
time I<font color="#E5E5E5"> think the first kind of public</font>

440
00:20:45,160 --> 00:20:52,720
paper on this was maybe 2002 a lot of

441
00:20:49,000 --> 00:20:56,470
you may have heard April last year I

442
00:20:52,720 --> 00:21:00,120
think<font color="#CCCCCC"> it was that a</font><font color="#E5E5E5"> couple of chaps</font>

443
00:20:56,470 --> 00:21:02,200
who's named<font color="#CCCCCC"> Giuliano and completely</font><font color="#E5E5E5"> ty</font>

444
00:21:00,120 --> 00:21:04,510
presented paper a black hat Europe last

445
00:21:02,200 --> 00:21:08,710
year I'm kind of looking at practical

446
00:21:04,510 --> 00:21:10,210
attacks on on jsf so timber last year we

447
00:21:08,710 --> 00:21:12,490
kept this this really<font color="#E5E5E5"> kind of burst onto</font>

448
00:21:10,210 --> 00:21:13,990
the scene because there was a major

449
00:21:12,490 --> 00:21:16,600
padding Oracle to explore it and don't

450
00:21:13,990 --> 00:21:17,680
need so what are<font color="#E5E5E5"> we actually talking</font>

451
00:21:16,600 --> 00:21:20,230
about<font color="#E5E5E5"> what we're talking about bit</font>

452
00:21:17,680 --> 00:21:21,820
flipping of ciphertext so we have

453
00:21:20,230 --> 00:21:24,040
<font color="#E5E5E5">ciphertext and we have the relationships</font>

454
00:21:21,820 --> 00:21:25,540
between blocks of ciphertext so we can

455
00:21:24,040 --> 00:21:27,220
we can't actually bit flip and just

456
00:21:25,540 --> 00:21:29,409
basically just start changing things to

457
00:21:27,220 --> 00:21:31,300
see what<font color="#E5E5E5"> happens but</font><font color="#CCCCCC"> in this particular</font>

458
00:21:29,410 --> 00:21:34,390
case we're<font color="#CCCCCC"> looking at a behavior of how</font>

459
00:21:31,300 --> 00:21:36,340
the system is implemented which based on

460
00:21:34,390 --> 00:21:39,040
<font color="#E5E5E5">this behavior we can get more</font>

461
00:21:36,340 --> 00:21:40,750
information and what it leads to is the

462
00:21:39,040 --> 00:21:43,750
ability to actually arbitrarily decrypt

463
00:21:40,750 --> 00:21:46,060
the data without knowing the key without

464
00:21:43,750 --> 00:21:47,380
even knowing the algorithm entirely

465
00:21:46,060 --> 00:21:51,970
based on the behavior of the system

466
00:21:47,380 --> 00:21:54,940
itself so the first thing we have to

467
00:21:51,970 --> 00:22:00,430
talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> when we talk about padding</font>

468
00:21:54,940 --> 00:22:02,029
Oracle's is what is padding so when

469
00:22:00,430 --> 00:22:03,859
we're encrypting stuff

470
00:22:02,029 --> 00:22:07,009
because we're encrypting blocks of eight

471
00:22:03,859 --> 00:22:09,109
blocks of 16 data if you don't have a

472
00:22:07,009 --> 00:22:10,759
block of<font color="#E5E5E5"> eight or block of 16 you need</font>

473
00:22:09,109 --> 00:22:12,529
to pet it so you need to<font color="#E5E5E5"> stick something</font>

474
00:22:10,759 --> 00:22:16,690
on there in order<font color="#CCCCCC"> to have something to</font>

475
00:22:12,529 --> 00:22:20,690
encrypt and this is PK cs5 heading

476
00:22:16,690 --> 00:22:22,849
basically if you have you<font color="#E5E5E5"> know three</font>

477
00:22:20,690 --> 00:22:25,159
bits of data you need to<font color="#CCCCCC"> pad it</font><font color="#E5E5E5"> in with</font>

478
00:22:22,849 --> 00:22:26,389
five more bits of data in<font color="#E5E5E5"> this</font>

479
00:22:25,159 --> 00:22:30,019
particular case<font color="#CCCCCC"> you end up heading it</font>

480
00:22:26,389 --> 00:22:31,599
with five lots of<font color="#CCCCCC"> x5 and if you have six</font>

481
00:22:30,019 --> 00:22:34,219
you end up heading with two lots of two

482
00:22:31,599 --> 00:22:37,399
if you know seven you end up heading

483
00:22:34,219 --> 00:22:40,070
with one of one and interestingly if you

484
00:22:37,399 --> 00:22:43,008
have if you actually do have eight

485
00:22:40,070 --> 00:22:46,450
you'll end up adding it with eight lots

486
00:22:43,009 --> 00:22:49,849
of eight so this<font color="#E5E5E5"> is a very standard</font>

487
00:22:46,450 --> 00:22:51,739
heading behavior it's not the only one

488
00:22:49,849 --> 00:22:52,820
who come across but it's probably<font color="#E5E5E5"> the</font>

489
00:22:51,739 --> 00:22:56,210
most<font color="#E5E5E5"> common one that you'll come across</font>

490
00:22:52,820 --> 00:22:57,950
and the reason<font color="#CCCCCC"> you do this is that so</font>

491
00:22:56,210 --> 00:23:00,499
effectively so you can validate the

492
00:22:57,950 --> 00:23:02,149
decrypted something correctly because if

493
00:23:00,499 --> 00:23:04,729
you decrypt something and it's correctly

494
00:23:02,149 --> 00:23:06,349
padded then it was probably successful

495
00:23:04,729 --> 00:23:08,359
in the decryption operations this is one

496
00:23:06,349 --> 00:23:09,129
of<font color="#E5E5E5"> the useful ways you can tell with</font>

497
00:23:08,359 --> 00:23:12,678
you've actually managed successfully

498
00:23:09,129 --> 00:23:14,330
decrypt something or not so PK cs5 and

499
00:23:12,679 --> 00:23:19,549
what are<font color="#E5E5E5"> we talking about when we talk</font>

500
00:23:14,330 --> 00:23:21,978
about Oracle's well there is only eight

501
00:23:19,549 --> 00:23:24,408
possible padding sequences you could

502
00:23:21,979 --> 00:23:30,739
have in the situation of having an

503
00:23:24,409 --> 00:23:34,239
eight-block algorithm so first of all

504
00:23:30,739 --> 00:23:36,830
that's interesting so<font color="#CCCCCC"> we know for sure</font>

505
00:23:34,239 --> 00:23:37,820
what at<font color="#E5E5E5"> least one bite of this data is</font>

506
00:23:36,830 --> 00:23:40,460
going<font color="#E5E5E5"> to be or could only be eight</font>

507
00:23:37,820 --> 00:23:42,468
things and depending on what it was we

508
00:23:40,460 --> 00:23:48,679
could no more of them so<font color="#E5E5E5"> that's</font>

509
00:23:42,469 --> 00:23:51,919
interesting<font color="#E5E5E5"> it's interesting and so what</font>

510
00:23:48,679 --> 00:23:53,690
happens if we do on a bit flip in CBC

511
00:23:51,919 --> 00:23:57,229
mode so say for example in particular

512
00:23:53,690 --> 00:24:01,129
case<font color="#E5E5E5"> you know we do flip for example you</font>

513
00:23:57,229 --> 00:24:02,960
<font color="#CCCCCC">know</font><font color="#E5E5E5"> the sixth kind of bite in this kind</font>

514
00:24:01,129 --> 00:24:04,339
of situation well we're going<font color="#E5E5E5"> to end up</font>

515
00:24:02,960 --> 00:24:07,249
with<font color="#E5E5E5"> that kind of stuff affecting the</font>

516
00:24:04,339 --> 00:24:08,599
<font color="#CCCCCC">plaintext but interestingly it's also</font>

517
00:24:07,249 --> 00:24:12,139
going to end up plant affecting the

518
00:24:08,599 --> 00:24:13,609
plain text of the next<font color="#E5E5E5"> block</font><font color="#CCCCCC"> okay so</font>

519
00:24:12,139 --> 00:24:15,659
that's interesting<font color="#E5E5E5"> so this is all kind</font>

520
00:24:13,609 --> 00:24:18,870
of<font color="#E5E5E5"> like about how it works</font>

521
00:24:15,660 --> 00:24:20,670
and based on how the odds decryption

522
00:24:18,870 --> 00:24:23,090
operation itself is it works and<font color="#E5E5E5"> this is</font>

523
00:24:20,670 --> 00:24:25,850
especially how it commonly works in

524
00:24:23,090 --> 00:24:28,260
something like<font color="#E5E5E5"> a web application is</font>

525
00:24:25,850 --> 00:24:32,219
we're probably going to<font color="#E5E5E5"> end up</font><font color="#CCCCCC"> with a</font>

526
00:24:28,260 --> 00:24:33,629
number<font color="#E5E5E5"> of errors if the description</font>

527
00:24:32,220 --> 00:24:37,230
operation fails in some particular case

528
00:24:33,630 --> 00:24:39,000
<font color="#E5E5E5">even better if we know what those zeros</font>

529
00:24:37,230 --> 00:24:42,210
are so the one that we're particularly

530
00:24:39,000 --> 00:24:43,500
interested in is you know so invalid key

531
00:24:42,210 --> 00:24:47,040
is well hopefully you're not<font color="#E5E5E5"> going to</font>

532
00:24:43,500 --> 00:24:49,050
<font color="#E5E5E5">get one of those is it an even block</font>

533
00:24:47,040 --> 00:24:50,550
multiple so those ones are only if

534
00:24:49,050 --> 00:24:51,780
you're kind of like feeding an invalid

535
00:24:50,550 --> 00:24:54,480
data the one we were particularly

536
00:24:51,780 --> 00:24:58,470
interested in is an invalid heading

537
00:24:54,480 --> 00:25:02,490
exception so how<font color="#CCCCCC"> is it</font><font color="#E5E5E5"> going to be</font>

538
00:24:58,470 --> 00:25:04,140
<font color="#CCCCCC">useful to us so this one this one is</font>

539
00:25:02,490 --> 00:25:06,480
interesting because part of this is we

540
00:25:04,140 --> 00:25:10,110
need to be<font color="#CCCCCC"> able to determine whether we</font>

541
00:25:06,480 --> 00:25:11,490
have<font color="#E5E5E5"> this error so what happens commonly</font>

542
00:25:10,110 --> 00:25:13,860
in something like we're application if

543
00:25:11,490 --> 00:25:17,960
you try and<font color="#E5E5E5"> do something with data and</font>

544
00:25:13,860 --> 00:25:21,479
it fails your web application Europe

545
00:25:17,960 --> 00:25:24,300
maybe it even bubbles up<font color="#E5E5E5"> an ear emitted</font>

546
00:25:21,480 --> 00:25:26,430
explicit ear message if you're lucky but

547
00:25:24,300 --> 00:25:28,980
more<font color="#E5E5E5"> to the point you're likely to see a</font>

548
00:25:26,430 --> 00:25:30,990
different behavior you might<font color="#CCCCCC"> get a 500</font>

549
00:25:28,980 --> 00:25:33,630
era where previously you expecting a 200

550
00:25:30,990 --> 00:25:35,100
so there's some observable behavior if

551
00:25:33,630 --> 00:25:39,450
we manage to cause one of these<font color="#E5E5E5"> things</font>

552
00:25:35,100 --> 00:25:41,189
to happen so what are<font color="#E5E5E5"> we talking about</font>

553
00:25:39,450 --> 00:25:42,750
with a padding Oracle effect and then

554
00:25:41,190 --> 00:25:45,030
the art this is where the Oracle but

555
00:25:42,750 --> 00:25:47,640
comes in because the Oracle means that

556
00:25:45,030 --> 00:25:48,930
we are effectively we have the

557
00:25:47,640 --> 00:25:52,020
application the system as<font color="#CCCCCC"> its</font>

558
00:25:48,930 --> 00:25:54,060
implemented is telling us whether we

559
00:25:52,020 --> 00:25:56,190
have this or not so effectively the

560
00:25:54,060 --> 00:25:58,889
application as<font color="#CCCCCC"> it's um implemented is</font>

561
00:25:56,190 --> 00:26:02,520
telling us<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> situation does exist</font>

562
00:25:58,890 --> 00:26:04,680
so let's take the<font color="#CCCCCC"> example so we're going</font>

563
00:26:02,520 --> 00:26:06,330
to flip the last bite of the ciphertext

564
00:26:04,680 --> 00:26:07,910
so first of all we're going<font color="#CCCCCC"> to end up</font>

565
00:26:06,330 --> 00:26:14,939
with rubbish plain text we don't<font color="#E5E5E5"> hear</font>

566
00:26:07,910 --> 00:26:17,250
but so we call that one<font color="#E5E5E5"> x x so x x maps</font>

567
00:26:14,940 --> 00:26:20,010
to bite why so basically<font color="#CCCCCC"> it is eggs</font>

568
00:26:17,250 --> 00:26:24,930
<font color="#E5E5E5">would with the results of the next one</font>

569
00:26:20,010 --> 00:26:27,320
so it does affect the next operation so

570
00:26:24,930 --> 00:26:29,480
what happens if the plane tix doesn't

571
00:26:27,320 --> 00:26:31,980
isn't correctly

572
00:26:29,480 --> 00:26:35,340
we that this is this is the situation

573
00:26:31,980 --> 00:26:37,710
where we have it so previous block we

574
00:26:35,340 --> 00:26:40,799
<font color="#E5E5E5">changed that or actually just put it as</font>

575
00:26:37,710 --> 00:26:42,299
one it is going to affect and<font color="#E5E5E5"> it be eggs</font>

576
00:26:40,799 --> 00:26:43,529
<font color="#CCCCCC">ord and at the end of the day that the</font>

577
00:26:42,299 --> 00:26:47,580
plain text which comes out of the next

578
00:26:43,529 --> 00:26:49,470
block if it's not validly padded we're

579
00:26:47,580 --> 00:26:55,949
probably going to get an exception<font color="#E5E5E5"> so</font>

580
00:26:49,470 --> 00:26:59,010
here's an<font color="#CCCCCC"> example we put in 0 so</font><font color="#E5E5E5"> you</font>

581
00:26:55,950 --> 00:27:01,679
know<font color="#CCCCCC"> okay so we put in 0 we get an</font>

582
00:26:59,010 --> 00:27:04,470
<font color="#CCCCCC">exception we put in one we're getting</font>

583
00:27:01,679 --> 00:27:10,799
exception we put into we don't get an

584
00:27:04,470 --> 00:27:12,600
exception what does<font color="#CCCCCC"> that tell us what it</font>

585
00:27:10,799 --> 00:27:15,418
tells us is if we stick a 2 into<font color="#E5E5E5"> the</font>

586
00:27:12,600 --> 00:27:16,949
<font color="#CCCCCC">cipher text of the previous block what</font>

587
00:27:15,419 --> 00:27:22,529
must that value be if it's correctly

588
00:27:16,950 --> 00:27:26,340
padded what sorts or was it yes it must

589
00:27:22,529 --> 00:27:28,529
be<font color="#CCCCCC"> a padding value so it must be</font><font color="#E5E5E5"> a valid</font>

590
00:27:26,340 --> 00:27:32,668
padding value of which there is only

591
00:27:28,529 --> 00:27:35,279
eight and likely as not we know<font color="#E5E5E5"> exactly</font>

592
00:27:32,669 --> 00:27:36,630
what that is it must be one so we know

593
00:27:35,279 --> 00:27:38,250
what they value is so we know if we

594
00:27:36,630 --> 00:27:40,679
stick a<font color="#CCCCCC"> two in here we get a one out</font>

595
00:27:38,250 --> 00:27:42,120
here so equally we can we can continue

596
00:27:40,679 --> 00:27:45,179
that and because we're talking about

597
00:27:42,120 --> 00:27:50,389
eggs or this means that we know other

598
00:27:45,179 --> 00:27:52,590
stuff as well so more to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> point this</font>

599
00:27:50,390 --> 00:27:53,909
it's basically the intermediate kind of

600
00:27:52,590 --> 00:27:55,949
value that<font color="#E5E5E5"> the one which comes out of</font>

601
00:27:53,909 --> 00:27:57,840
the decryption and<font color="#E5E5E5"> has then eggs Ord</font>

602
00:27:55,950 --> 00:27:59,760
with the ciphertext it means we<font color="#E5E5E5"> also</font>

603
00:27:57,840 --> 00:28:02,340
know what<font color="#E5E5E5"> that value</font><font color="#CCCCCC"> is as well so</font><font color="#E5E5E5"> means</font>

604
00:27:59,760 --> 00:28:06,330
<font color="#E5E5E5">that we know effectively three different</font>

605
00:28:02,340 --> 00:28:09,840
bits of information so I mean

606
00:28:06,330 --> 00:28:11,309
effectively that gives us the ability to

607
00:28:09,840 --> 00:28:13,559
kind of figure<font color="#E5E5E5"> out what</font><font color="#CCCCCC"> that in an</font>

608
00:28:11,309 --> 00:28:14,639
encrypted value is it also gives us the

609
00:28:13,559 --> 00:28:16,020
ability although we're not going to

610
00:28:14,640 --> 00:28:18,630
<font color="#E5E5E5">really talk to too much detail about</font>

611
00:28:16,020 --> 00:28:22,860
this to actually be able<font color="#E5E5E5"> to re-encrypt</font>

612
00:28:18,630 --> 00:28:24,690
stuff with their block as well so not

613
00:28:22,860 --> 00:28:27,090
only<font color="#E5E5E5"> can we use this particular exploit</font>

614
00:28:24,690 --> 00:28:29,309
to decrypt stuff which is<font color="#E5E5E5"> the simplest</font>

615
00:28:27,090 --> 00:28:31,918
of the two examples but we can also use

616
00:28:29,309 --> 00:28:33,149
this exploit to re-encrypt stuff and we

617
00:28:31,919 --> 00:28:35,149
<font color="#E5E5E5">don't know the key we don't even know</font>

618
00:28:33,149 --> 00:28:37,620
what the algorithm is at<font color="#E5E5E5"> this point</font>

619
00:28:35,149 --> 00:28:41,549
we're entirely looking at the<font color="#CCCCCC"> behavior</font>

620
00:28:37,620 --> 00:28:45,570
of the system<font color="#E5E5E5"> and how its implemented so</font>

621
00:28:41,549 --> 00:28:47,940
padding by it was one the bite that<font color="#E5E5E5"> we</font>

622
00:28:45,570 --> 00:28:51,090
stuck in which is the two tells us

623
00:28:47,940 --> 00:28:53,429
effectively the intermediate bites you

624
00:28:51,090 --> 00:28:54,928
know must be such and such<font color="#CCCCCC"> that haven't</font>

625
00:28:53,429 --> 00:28:59,580
actually figured out what that<font color="#CCCCCC"> is give</font>

626
00:28:54,929 --> 00:29:00,690
me something<font color="#E5E5E5"> else so in oh we're</font><font color="#CCCCCC"> just</font>

627
00:28:59,580 --> 00:29:02,460
going to<font color="#E5E5E5"> call</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the intermediate one</font>

628
00:29:00,690 --> 00:29:04,320
because it's effectively a value that we

629
00:29:02,460 --> 00:29:06,960
don't normally look at but it's just

630
00:29:04,320 --> 00:29:07,918
interesting there<font color="#E5E5E5"> the tube case so let's</font>

631
00:29:06,960 --> 00:29:11,119
<font color="#E5E5E5">just have a look at a practical example</font>

632
00:29:07,919 --> 00:29:14,100
this who's who's come across pad Buster

633
00:29:11,119 --> 00:29:15,600
<font color="#CCCCCC">had bust a few of you so on the Gotham</font>

634
00:29:14,100 --> 00:29:18,238
<font color="#E5E5E5">dental science website we</font><font color="#CCCCCC"> have a free</font>

635
00:29:15,600 --> 00:29:20,459
tool which I'm going to demo it is open

636
00:29:18,239 --> 00:29:22,049
source its reciprocal public license

637
00:29:20,460 --> 00:29:24,899
feel free<font color="#CCCCCC"> to do whatever you want with</font>

638
00:29:22,049 --> 00:29:29,029
it tour which exploits exactly this

639
00:29:24,899 --> 00:29:37,799
stuff as well so let's<font color="#E5E5E5"> have a look at</font>

640
00:29:29,029 --> 00:29:40,440
<font color="#E5E5E5">doing that so so I'm</font><font color="#CCCCCC"> going to do this</font>

641
00:29:37,799 --> 00:29:44,549
against this particular application here

642
00:29:40,440 --> 00:29:46,259
so as I mentioned there<font color="#E5E5E5"> was a there's a</font>

643
00:29:44,549 --> 00:29:49,350
padding Oracle exploit or a padding

644
00:29:46,259 --> 00:29:51,359
Oracle problem with dot net as of kind

645
00:29:49,350 --> 00:29:53,309
of September 2010 last<font color="#E5E5E5"> year so that was</font>

646
00:29:51,359 --> 00:29:55,230
patched so the version that I'm<font color="#E5E5E5"> not</font>

647
00:29:53,309 --> 00:29:57,809
going to the<font color="#CCCCCC"> vision I'm showing the this</font>

648
00:29:55,230 --> 00:29:58,889
particular<font color="#E5E5E5"> case is not patched but i'm</font>

649
00:29:57,809 --> 00:30:01,080
just<font color="#E5E5E5"> going to demo it in this particular</font>

650
00:29:58,889 --> 00:30:03,090
case so there's a couple of bits and

651
00:30:01,080 --> 00:30:05,850
pieces in the.net framework which are

652
00:30:03,090 --> 00:30:09,209
susceptible to padding Oracle's<font color="#CCCCCC"> okay can</font>

653
00:30:05,850 --> 00:30:11,580
anyone<font color="#E5E5E5"> including odious it tell me what</font>

654
00:30:09,210 --> 00:30:15,029
thou you guys are very communicative

655
00:30:11,580 --> 00:30:17,428
today<font color="#CCCCCC"> okay view states so view states</font>

656
00:30:15,029 --> 00:30:18,509
are a good one but the one I'm going

657
00:30:17,429 --> 00:30:20,909
particularly look out of this at this

658
00:30:18,509 --> 00:30:24,600
case is results handlers so resource

659
00:30:20,909 --> 00:30:27,269
handlers donít 3.5 don't knit for<font color="#E5E5E5"> Ajax</font>

660
00:30:24,600 --> 00:30:28,559
abs are particularly interesting so

661
00:30:27,269 --> 00:30:29,909
there's two of them by default you would

662
00:30:28,559 --> 00:30:32,070
normally come across once called the web

663
00:30:29,909 --> 00:30:34,379
resource handler and the other one<font color="#CCCCCC"> is</font>

664
00:30:32,070 --> 00:30:35,999
called<font color="#E5E5E5"> the script resource handler now</font>

665
00:30:34,379 --> 00:30:39,539
if you have a look<font color="#E5E5E5"> into more detail</font>

666
00:30:35,999 --> 00:30:41,340
about the the padding Oracle tax you can

667
00:30:39,539 --> 00:30:43,769
<font color="#CCCCCC">actually use the script resort handler</font>

668
00:30:41,340 --> 00:30:47,070
to do handy things like download the

669
00:30:43,769 --> 00:30:49,470
web.config off the side which is<font color="#E5E5E5"> kind of</font>

670
00:30:47,070 --> 00:30:51,299
cool you kind of just you know pointing

671
00:30:49,470 --> 00:30:52,649
it out<font color="#E5E5E5"> something decrypting it re</font>

672
00:30:51,299 --> 00:30:55,299
encrypting it and saying give<font color="#CCCCCC"> me</font><font color="#E5E5E5"> the</font>

673
00:30:52,649 --> 00:30:56,649
web.config and it would now

674
00:30:55,299 --> 00:30:58,720
fortunately<font color="#E5E5E5"> I couldn't get there working</font>

675
00:30:56,649 --> 00:31:00,610
largely because the this application

676
00:30:58,720 --> 00:31:02,470
here is not an AJAX application<font color="#E5E5E5"> even</font>

677
00:31:00,610 --> 00:31:03,248
though<font color="#E5E5E5"> it hasn't gotten at 3.51 so what</font>

678
00:31:02,470 --> 00:31:06,340
I'm gonna do is I'm just<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> show</font>

679
00:31:03,249 --> 00:31:09,129
you an example of decrypting something

680
00:31:06,340 --> 00:31:11,980
rather through through the web originals

681
00:31:09,129 --> 00:31:13,570
handler so what the hell am<font color="#E5E5E5"> I talking</font>

682
00:31:11,980 --> 00:31:15,159
<font color="#E5E5E5">about when i talk</font><font color="#CCCCCC"> about weaves or resort</font>

683
00:31:13,570 --> 00:31:16,450
handlers so let me have<font color="#E5E5E5"> a look at the</font>

684
00:31:15,159 --> 00:31:20,320
target thing we<font color="#E5E5E5"> would have come across</font>

685
00:31:16,450 --> 00:31:24,460
some of these on break this down we're

686
00:31:20,320 --> 00:31:28,840
<font color="#CCCCCC">talking about this thing so what the</font>

687
00:31:24,460 --> 00:31:33,669
hell is that effectively<font color="#E5E5E5"> what it is is</font>

688
00:31:28,840 --> 00:31:36,970
it is a request which returns a script

689
00:31:33,669 --> 00:31:39,039
effectively so this bit of data is a

690
00:31:36,970 --> 00:31:41,919
script<font color="#E5E5E5"> or it's a pointer to a script in</font>

691
00:31:39,039 --> 00:31:45,309
fact it actually is a<font color="#CCCCCC"> filename in</font><font color="#E5E5E5"> this</font>

692
00:31:41,919 --> 00:31:47,379
particular<font color="#CCCCCC"> case it's interesting because</font>

693
00:31:45,309 --> 00:31:50,049
it with the web resource handler you can

694
00:31:47,379 --> 00:31:53,469
<font color="#E5E5E5">actually download any</font><font color="#CCCCCC"> JavaScript files</font>

695
00:31:50,049 --> 00:31:55,359
which are inside an assembly dll in.net

696
00:31:53,470 --> 00:31:56,080
the script resource handler is more

697
00:31:55,359 --> 00:32:00,009
interesting because you<font color="#E5E5E5"> can actually</font>

698
00:31:56,080 --> 00:32:01,509
<font color="#E5E5E5">pull down any file on d'box so</font>

699
00:32:00,009 --> 00:32:06,539
unfortunately<font color="#E5E5E5"> can't demonstrate that one</font>

700
00:32:01,509 --> 00:32:13,720
in this particular case so let me demo

701
00:32:06,539 --> 00:32:15,070
head buster so hopefully this works so

702
00:32:13,720 --> 00:32:17,830
it's worth pointing out of this point

703
00:32:15,070 --> 00:32:20,230
that pad<font color="#E5E5E5"> buster is not a specific tool</font>

704
00:32:17,830 --> 00:32:23,168
for this particular issue it's written

705
00:32:20,230 --> 00:32:26,919
<font color="#E5E5E5">by a colleague of mine</font><font color="#CCCCCC"> Bryan in New York</font>

706
00:32:23,169 --> 00:32:28,509
it<font color="#E5E5E5"> is a general tool for all types of</font>

707
00:32:26,919 --> 00:32:32,200
heading Oracle's so it was<font color="#E5E5E5"> actually</font>

708
00:32:28,509 --> 00:32:36,129
originally written for exploiting jcf

709
00:32:32,200 --> 00:32:37,629
server faces view<font color="#E5E5E5"> states but it works</font>

710
00:32:36,129 --> 00:32:39,820
quite handily with the.net example as

711
00:32:37,629 --> 00:32:42,789
well so main things we're looking<font color="#CCCCCC"> at we</font>

712
00:32:39,820 --> 00:32:45,730
need to provide a URL we need to<font color="#E5E5E5"> provide</font>

713
00:32:42,789 --> 00:32:50,158
an encrypted sample of data and we need

714
00:32:45,730 --> 00:32:58,200
<font color="#E5E5E5">to specify block size so let's do</font><font color="#CCCCCC"> that</font>

715
00:32:50,159 --> 00:32:58,200
so grab one of these

716
00:33:15,490 --> 00:33:28,520
help i get spell and when we're talking

717
00:33:24,650 --> 00:33:31,100
about encrypted sample effectively<font color="#CCCCCC"> it</font>

718
00:33:28,520 --> 00:33:37,010
<font color="#CCCCCC">just needs you to tell it what the bit</font>

719
00:33:31,100 --> 00:33:42,980
is that<font color="#E5E5E5"> it needs to play with so it's</font>

720
00:33:37,010 --> 00:33:44,840
going to<font color="#E5E5E5"> be that one so</font><font color="#CCCCCC"> two j8 you in</font>

721
00:33:42,980 --> 00:33:49,550
this particular<font color="#E5E5E5"> case if i remember</font>

722
00:33:44,840 --> 00:33:50,809
correctly it needs to be 16<font color="#E5E5E5"> with the</font>

723
00:33:49,550 --> 00:33:55,428
block size with a health nut pointer

724
00:33:50,809 --> 00:33:56,570
gone and there's a couple<font color="#E5E5E5"> of the things</font>

725
00:33:55,429 --> 00:33:58,970
<font color="#E5E5E5">we need to specify on this particular</font>

726
00:33:56,570 --> 00:34:02,780
case these are donate specific ones

727
00:33:58,970 --> 00:34:05,720
which are effectively telling it what

728
00:34:02,780 --> 00:34:07,790
kind of format the data is in and so

729
00:34:05,720 --> 00:34:09,199
think of a case encoding is<font color="#E5E5E5"> dotnet URL</font>

730
00:34:07,790 --> 00:34:14,989
token which is a particularly weird

731
00:34:09,199 --> 00:34:17,149
version of of encoding acid on it has

732
00:34:14,989 --> 00:34:19,969
its own particular one and no IV means

733
00:34:17,149 --> 00:34:21,589
<font color="#CCCCCC">the the you know one of these you know</font>

734
00:34:19,969 --> 00:34:24,168
the IV is not included in this blockage

735
00:34:21,590 --> 00:34:27,609
the particular option for don't yet so

736
00:34:24,168 --> 00:34:27,609
let's<font color="#E5E5E5"> see if this works</font>

737
00:34:36,480 --> 00:34:43,109
okay so what is it done it has gone

738
00:34:40,918 --> 00:34:46,649
<font color="#E5E5E5">through and it is flipped effectively</font>

739
00:34:43,109 --> 00:34:48,989
the the<font color="#E5E5E5"> last block of that to all 256</font>

740
00:34:46,649 --> 00:34:51,000
values and it's just seeing what

741
00:34:48,989 --> 00:34:52,350
happened now what<font color="#CCCCCC"> happens in a web a</font>

742
00:34:51,000 --> 00:34:53,310
patient is going to be is going to be

743
00:34:52,350 --> 00:34:57,420
different depending on<font color="#E5E5E5"> the application</font>

744
00:34:53,310 --> 00:35:00,930
you could see<font color="#E5E5E5"> 200 s 30 s 500 but more</font>

745
00:34:57,420 --> 00:35:02,130
importantly we have<font color="#E5E5E5"> one which is grossly</font>

746
00:35:00,930 --> 00:35:03,720
different to the other ones so

747
00:35:02,130 --> 00:35:05,520
<font color="#E5E5E5">effectively were looking for the air</font>

748
00:35:03,720 --> 00:35:08,069
condition of this at this point so we

749
00:35:05,520 --> 00:35:09,600
can then effectively tell which ones are

750
00:35:08,070 --> 00:35:11,820
accurate much all it's<font color="#E5E5E5"> not so it's</font>

751
00:35:09,600 --> 00:35:13,700
<font color="#CCCCCC">Hendley pointed this out that we should</font>

752
00:35:11,820 --> 00:35:15,510
probably select to at this point and

753
00:35:13,700 --> 00:35:16,529
what it's going<font color="#CCCCCC"> to do is it's going</font><font color="#E5E5E5"> to</font>

754
00:35:15,510 --> 00:35:19,220
go<font color="#E5E5E5"> through the process of decrypting</font>

755
00:35:16,530 --> 00:35:19,220
that piece of information

756
00:35:26,700 --> 00:35:31,319
now<font color="#CCCCCC"> I</font><font color="#E5E5E5"> warn you now</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> output of</font>

757
00:35:29,220 --> 00:35:33,169
this is not<font color="#E5E5E5"> very exciting what's</font>

758
00:35:31,320 --> 00:35:35,660
actually in here is not very interesting

759
00:35:33,170 --> 00:35:39,650
but<font color="#E5E5E5"> it is purely just to demonstrate</font>

760
00:35:35,660 --> 00:35:39,649
kind of the output of this kind of thing

761
00:35:49,950 --> 00:35:58,379
yep so the decrypted value is that which

762
00:35:55,079 --> 00:36:01,800
is not very exciting so effectively what

763
00:35:58,380 --> 00:36:04,349
it is reference to s so the<font color="#E5E5E5"> way this</font>

764
00:36:01,800 --> 00:36:06,300
particular piece<font color="#E5E5E5"> of data works is it's s</font>

765
00:36:04,349 --> 00:36:07,560
is a particular type of resource which

766
00:36:06,300 --> 00:36:10,010
in<font color="#E5E5E5"> this particular case is an embedded</font>

767
00:36:07,560 --> 00:36:13,950
assembly resource and then you have

768
00:36:10,010 --> 00:36:15,990
piping which are basically separators

769
00:36:13,950 --> 00:36:17,790
and the<font color="#E5E5E5"> resources we have you add</font>

770
00:36:15,990 --> 00:36:21,540
validation GS which is a standard kind

771
00:36:17,790 --> 00:36:25,470
<font color="#E5E5E5">of Ajax being kind of dotnet thing but</font>

772
00:36:21,540 --> 00:36:28,349
more the point you know we still don't

773
00:36:25,470 --> 00:36:31,950
know what this<font color="#E5E5E5"> key is and we've just</font>

774
00:36:28,349 --> 00:36:33,450
decrypted it so<font color="#E5E5E5"> I'll point out at this</font>

775
00:36:31,950 --> 00:36:34,680
<font color="#CCCCCC">point that</font><font color="#E5E5E5"> some which having chapter</font>

776
00:36:33,450 --> 00:36:35,879
provides from defensive security pad

777
00:36:34,680 --> 00:36:37,919
<font color="#CCCCCC">Buster probably will be on the next</font>

778
00:36:35,880 --> 00:36:40,530
version<font color="#CCCCCC"> of backtrack but in the</font><font color="#E5E5E5"> meantime</font>

779
00:36:37,920 --> 00:36:43,470
feel free to pull it down just<font color="#CCCCCC"> off our</font>

780
00:36:40,530 --> 00:36:46,410
website<font color="#E5E5E5"> GD security com it's sitting</font>

781
00:36:43,470 --> 00:36:49,799
there<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> tool thing as well so</font>

782
00:36:46,410 --> 00:36:51,149
that's<font color="#E5E5E5"> nice little simple example also</font>

783
00:36:49,800 --> 00:36:52,650
if<font color="#CCCCCC"> you have a look on our blog</font><font color="#E5E5E5"> there's</font>

784
00:36:51,150 --> 00:36:54,510
some good examples of pulling down weird

785
00:36:52,650 --> 00:36:56,250
configs if you particular<font color="#E5E5E5"> interest in</font>

786
00:36:54,510 --> 00:36:57,920
how that<font color="#E5E5E5"> works unfortunate i couldn't</font>

787
00:36:56,250 --> 00:37:02,099
get that demo working for<font color="#E5E5E5"> this is noted</font>

788
00:36:57,920 --> 00:37:05,599
so both of<font color="#E5E5E5"> the things that we've been</font>

789
00:37:02,099 --> 00:37:07,530
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> about so far are purely because</font>

790
00:37:05,599 --> 00:37:09,569
we have a situation where we have

791
00:37:07,530 --> 00:37:11,339
encryption things where we have the

792
00:37:09,569 --> 00:37:12,900
ability to<font color="#CCCCCC"> change stuff so we have the</font>

793
00:37:11,339 --> 00:37:16,230
ability to<font color="#CCCCCC"> change the</font><font color="#E5E5E5"> cipher text for</font>

794
00:37:12,900 --> 00:37:17,819
the most part swap things around and it

795
00:37:16,230 --> 00:37:19,859
still<font color="#E5E5E5"> works you know</font><font color="#CCCCCC"> it so in these</font>

796
00:37:17,819 --> 00:37:22,170
particular<font color="#CCCCCC"> cases largely because it</font>

797
00:37:19,859 --> 00:37:25,009
hasn't been science so you know it might

798
00:37:22,170 --> 00:37:27,390
<font color="#CCCCCC">be worth looking at options for signing</font>

799
00:37:25,010 --> 00:37:29,010
if you were<font color="#E5E5E5"> trying to fix one of these</font>

800
00:37:27,390 --> 00:37:32,190
things so there's various types<font color="#E5E5E5"> of one's</font>

801
00:37:29,010 --> 00:37:36,750
H max is one of them<font color="#E5E5E5"> but have a look</font>

802
00:37:32,190 --> 00:37:40,770
<font color="#E5E5E5">into that interestingly</font><font color="#CCCCCC"> the dotnet issue</font>

803
00:37:36,750 --> 00:37:42,720
that we just<font color="#E5E5E5"> looked at is signed it's</font>

804
00:37:40,770 --> 00:37:45,060
just sign the signature is not checked

805
00:37:42,720 --> 00:37:47,339
until after you've decrypted it so we're

806
00:37:45,060 --> 00:37:49,799
actually forcing the error before it

807
00:37:47,339 --> 00:37:53,040
actually checks the signature so in this

808
00:37:49,800 --> 00:37:55,530
particular case although at first past

809
00:37:53,040 --> 00:37:56,250
the design look good because<font color="#E5E5E5"> of where</font>

810
00:37:55,530 --> 00:37:57,660
<font color="#CCCCCC">they were actually checking the</font>

811
00:37:56,250 --> 00:37:59,010
signature it was actually after the

812
00:37:57,660 --> 00:38:00,990
decryption operation as opposed to

813
00:37:59,010 --> 00:38:03,150
before so we had that particular one as

814
00:38:00,990 --> 00:38:03,839
well so other things<font color="#E5E5E5"> which were</font>

815
00:38:03,150 --> 00:38:05,100
vulnerable this is

816
00:38:03,840 --> 00:38:07,110
forms authentication cookie as well

817
00:38:05,100 --> 00:38:08,940
that's a good one so if you have an

818
00:38:07,110 --> 00:38:11,160
expat which asp.net which has forms

819
00:38:08,940 --> 00:38:12,990
authentication cookies that's another

820
00:38:11,160 --> 00:38:15,870
one which is susceptible to this to our

821
00:38:12,990 --> 00:38:17,580
jsf few states also susceptible to this

822
00:38:15,870 --> 00:38:20,819
I don't<font color="#CCCCCC"> think the JSF stuff to be fixed</font>

823
00:38:17,580 --> 00:38:22,259
<font color="#E5E5E5">any</font><font color="#CCCCCC"> won't have any better I'm pretty</font>

824
00:38:20,820 --> 00:38:26,540
sure the JSF is still vulnerable to this

825
00:38:22,260 --> 00:38:28,680
day although got<font color="#CCCCCC"> Nets has patched</font>

826
00:38:26,540 --> 00:38:31,380
although I'm not a hundred percent sure

827
00:38:28,680 --> 00:38:32,879
<font color="#CCCCCC">i think i was put as an important patch</font>

828
00:38:31,380 --> 00:38:34,770
which means in some cases it may not

829
00:38:32,880 --> 00:38:36,090
have been automatically picked up so

830
00:38:34,770 --> 00:38:39,300
it's worth it's worth checking to make

831
00:38:36,090 --> 00:38:42,630
sure you're not<font color="#CCCCCC"> set book for</font><font color="#E5E5E5"> this and</font>

832
00:38:39,300 --> 00:38:45,120
last but not least because don't want to

833
00:38:42,630 --> 00:38:46,020
run over time<font color="#E5E5E5"> talk about</font><font color="#CCCCCC"> just and I</font>

834
00:38:45,120 --> 00:38:48,529
don't have a demo for this particular

835
00:38:46,020 --> 00:38:50,550
one because unfortunately it's a little

836
00:38:48,530 --> 00:38:52,890
talking about runnin random number

837
00:38:50,550 --> 00:38:54,270
generators it's kind<font color="#E5E5E5"> of like you need to</font>

838
00:38:52,890 --> 00:38:55,710
<font color="#E5E5E5">you need to run at a half a dozen times</font>

839
00:38:54,270 --> 00:38:58,340
<font color="#E5E5E5">to like have any chance of it actually</font>

840
00:38:55,710 --> 00:39:02,610
working but these kind of situations are

841
00:38:58,340 --> 00:39:04,290
good examples how<font color="#E5E5E5"> random is random so</font>

842
00:39:02,610 --> 00:39:08,490
you'd be surprised how often we come

843
00:39:04,290 --> 00:39:10,460
across situations we're people using no

844
00:39:08,490 --> 00:39:14,819
normal<font color="#CCCCCC"> super red and um generators and</font>

845
00:39:10,460 --> 00:39:18,090
you know kind of how how do those

846
00:39:14,820 --> 00:39:19,800
numbers<font color="#CCCCCC"> come from so typically you know</font>

847
00:39:18,090 --> 00:39:22,020
where they had problems with non random

848
00:39:19,800 --> 00:39:23,700
seed values or we may have kind of

849
00:39:22,020 --> 00:39:25,560
deterministic ones we're going<font color="#E5E5E5"> to</font>

850
00:39:23,700 --> 00:39:28,830
predict we'll see what those<font color="#E5E5E5"> things are</font>

851
00:39:25,560 --> 00:39:32,220
as well and it's surprising how often

852
00:39:28,830 --> 00:39:36,450
you see situations like this so you know

853
00:39:32,220 --> 00:39:37,379
we have 11 1<font color="#E5E5E5"> series 2 series effectively</font>

854
00:39:36,450 --> 00:39:38,790
<font color="#CCCCCC">what</font><font color="#E5E5E5"> we're doing is we just like</font>

855
00:39:37,380 --> 00:39:41,130
creating<font color="#CCCCCC"> red</font><font color="#E5E5E5"> of Nova generator and just</font>

856
00:39:38,790 --> 00:39:45,480
outputting stuff runs you know one after

857
00:39:41,130 --> 00:39:48,210
each other and you know unsurprisingly

858
00:39:45,480 --> 00:39:49,860
if it does it outputs<font color="#CCCCCC"> the same thing why</font>

859
00:39:48,210 --> 00:39:56,790
is that so in this particular case that

860
00:39:49,860 --> 00:39:58,110
was dotnet code this<font color="#E5E5E5"> particular case we</font>

861
00:39:56,790 --> 00:40:00,029
didn't we didn't even supply a seed

862
00:39:58,110 --> 00:40:02,130
possibly using crappy random generated

863
00:40:00,030 --> 00:40:05,340
in the first place and it seeds it off

864
00:40:02,130 --> 00:40:07,740
the clock<font color="#CCCCCC"> okay so if you're running a</font>

865
00:40:05,340 --> 00:40:11,790
random number generator and your seeding

866
00:40:07,740 --> 00:40:13,319
it off the clock hmm how<font color="#CCCCCC"> predictable is</font>

867
00:40:11,790 --> 00:40:16,020
is it to be<font color="#CCCCCC"> able to figure</font><font color="#E5E5E5"> out what the</font>

868
00:40:13,320 --> 00:40:18,150
clock<font color="#E5E5E5"> on your server is it's not their</font>

869
00:40:16,020 --> 00:40:19,440
heart is it you could probably make a

870
00:40:18,150 --> 00:40:20,910
educated guess as to what the<font color="#E5E5E5"> clock is</font>

871
00:40:19,440 --> 00:40:22,890
going<font color="#E5E5E5"> to be especially if it's a unix</font>

872
00:40:20,910 --> 00:40:24,328
box and it's probably running gmt you

873
00:40:22,890 --> 00:40:27,058
know if you've probably got a very

874
00:40:24,329 --> 00:40:28,079
limited kind of kind of time frame as to

875
00:40:27,059 --> 00:40:32,430
as to what we're looking at and they've

876
00:40:28,079 --> 00:40:35,010
kept<font color="#E5E5E5"> those cases and you end up with</font>

877
00:40:32,430 --> 00:40:37,500
<font color="#CCCCCC">like code like this and this is based</font>

878
00:40:35,010 --> 00:40:38,910
off an example we actually did see<font color="#CCCCCC"> we're</font>

879
00:40:37,500 --> 00:40:41,760
we have a basically<font color="#E5E5E5"> random number</font>

880
00:40:38,910 --> 00:40:44,629
generator for resetting<font color="#E5E5E5"> a password so</font>

881
00:40:41,760 --> 00:40:47,760
you've requested a password reset and

882
00:40:44,630 --> 00:40:49,950
it's doing<font color="#E5E5E5"> it in a pretty crappy way</font>

883
00:40:47,760 --> 00:40:51,359
<font color="#E5E5E5">from a security point of view and what's</font>

884
00:40:49,950 --> 00:40:55,500
it doing is<font color="#E5E5E5"> it's emailing you out your</font>

885
00:40:51,359 --> 00:40:56,609
new password so that's<font color="#E5E5E5"> fine but</font><font color="#CCCCCC"> can</font>

886
00:40:55,500 --> 00:40:59,549
anyone tell me<font color="#E5E5E5"> what the big problem in</font>

887
00:40:56,609 --> 00:41:01,380
<font color="#E5E5E5">this particular case is well there's no</font>

888
00:40:59,549 --> 00:41:03,359
see well yeah there's no seed and it's a

889
00:41:01,380 --> 00:41:07,200
random<font color="#E5E5E5"> what happens if you hit this like</font>

890
00:41:03,359 --> 00:41:09,650
at the same time or close enough<font color="#E5E5E5"> what</font>

891
00:41:07,200 --> 00:41:11,339
happens if I just seen a lot of requests

892
00:41:09,650 --> 00:41:14,400
yeah you can end up<font color="#E5E5E5"> with the same</font>

893
00:41:11,339 --> 00:41:16,259
password and unsurprisingly that's

894
00:41:14,400 --> 00:41:20,390
exactly<font color="#CCCCCC"> what happens in whoopsie-daisy</font>

895
00:41:16,260 --> 00:41:23,880
what the hell happen there<font color="#CCCCCC"> okay</font>

896
00:41:20,390 --> 00:41:25,980
unsurprisingly this does is possible and

897
00:41:23,880 --> 00:41:27,260
is reproducible in practice now if

898
00:41:25,980 --> 00:41:30,359
you're doing<font color="#CCCCCC"> something over the</font><font color="#E5E5E5"> Internet</font>

899
00:41:27,260 --> 00:41:31,890
needless to say you can have to have an

900
00:41:30,359 --> 00:41:35,098
<font color="#E5E5E5">element of luck to get things turning up</font>

901
00:41:31,890 --> 00:41:37,410
at pretty much the same time but through

902
00:41:35,099 --> 00:41:39,630
a<font color="#CCCCCC"> brute force approach and you can amp</font>

903
00:41:37,410 --> 00:41:41,910
or situations like<font color="#CCCCCC"> this so there wasn't</font>

904
00:41:39,630 --> 00:41:44,130
experiment I've lost the reference to

905
00:41:41,910 --> 00:41:46,649
the<font color="#E5E5E5"> actual paper that they did but</font>

906
00:41:44,130 --> 00:41:49,109
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> actually looking at a site which</font>

907
00:41:46,650 --> 00:41:50,069
had password resets implemented in

908
00:41:49,109 --> 00:41:53,069
exactly the same way that we were

909
00:41:50,069 --> 00:41:55,079
<font color="#CCCCCC">looking at and they</font><font color="#E5E5E5"> found out</font><font color="#CCCCCC"> that some</font>

910
00:41:53,069 --> 00:41:57,420
if they basically just ate lots and lots

911
00:41:55,079 --> 00:41:59,460
of password reset requests pretty much

912
00:41:57,420 --> 00:42:02,339
at the same time they<font color="#CCCCCC"> could end up with</font>

913
00:41:59,460 --> 00:42:04,589
<font color="#E5E5E5">it and they could force situations where</font>

914
00:42:02,339 --> 00:42:06,599
they had the same password<font color="#CCCCCC"> sent to them</font>

915
00:42:04,589 --> 00:42:07,890
as well so this<font color="#CCCCCC"> particular case if you</font>

916
00:42:06,599 --> 00:42:09,779
<font color="#E5E5E5">have the</font><font color="#CCCCCC"> ability to kind of like</font>

917
00:42:07,890 --> 00:42:12,690
arbitrary reset people's passwords and

918
00:42:09,779 --> 00:42:14,220
you can reset yours at the<font color="#E5E5E5"> same time you</font>

919
00:42:12,690 --> 00:42:15,750
have<font color="#E5E5E5"> an element of predictability as to</font>

920
00:42:14,220 --> 00:42:18,089
what<font color="#CCCCCC"> that person's password is going to</font>

921
00:42:15,750 --> 00:42:20,369
be so it's something which is

922
00:42:18,089 --> 00:42:23,819
interesting and something to have a look

923
00:42:20,369 --> 00:42:26,369
<font color="#E5E5E5">at and we were talking about dotnet you</font>

924
00:42:23,819 --> 00:42:29,009
know is<font color="#E5E5E5"> Java or any better and that</font>

925
00:42:26,369 --> 00:42:30,569
looks pretty random doesn't it maybe if

926
00:42:29,010 --> 00:42:31,140
we do it two-dimensional plot you know

927
00:42:30,569 --> 00:42:37,290
it<font color="#E5E5E5"> looks</font><font color="#CCCCCC"> pretty</font>

928
00:42:31,140 --> 00:42:39,029
them maybe<font color="#E5E5E5"> not so so Java has exactly</font>

929
00:42:37,290 --> 00:42:40,470
the<font color="#CCCCCC"> same kind of problems although its</font>

930
00:42:39,030 --> 00:42:43,080
default random number generator is a

931
00:42:40,470 --> 00:42:48,589
little bit better it has much<font color="#CCCCCC"> of the</font>

932
00:42:43,080 --> 00:42:54,630
same<font color="#E5E5E5"> kind of problems so to summarize</font>

933
00:42:48,590 --> 00:42:56,040
implementing cryptography is hard and a

934
00:42:54,630 --> 00:43:00,210
lot<font color="#CCCCCC"> of the situations that we</font><font color="#E5E5E5"> just</font>

935
00:42:56,040 --> 00:43:01,920
talked about our usage so none of the

936
00:43:00,210 --> 00:43:03,450
stuff we've just looked at has anything

937
00:43:01,920 --> 00:43:05,340
to do with how strong the crypto we're

938
00:43:03,450 --> 00:43:07,200
actually using is in the padding Oracle

939
00:43:05,340 --> 00:43:09,030
one we<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> know what the</font>

940
00:43:07,200 --> 00:43:11,819
algorithm is let alone what options

941
00:43:09,030 --> 00:43:16,680
there using we don't hear it's all based

942
00:43:11,820 --> 00:43:18,900
on usage so when you<font color="#CCCCCC"> are implementing</font>

943
00:43:16,680 --> 00:43:20,069
<font color="#E5E5E5">things and more the point when you're</font>

944
00:43:18,900 --> 00:43:21,660
looking at other things<font color="#CCCCCC"> that other</font>

945
00:43:20,070 --> 00:43:23,250
people have implemented and you're

946
00:43:21,660 --> 00:43:25,500
looking<font color="#CCCCCC"> at it</font><font color="#E5E5E5"> there from from a security</font>

947
00:43:23,250 --> 00:43:26,700
point of view as well you need to make

948
00:43:25,500 --> 00:43:29,640
<font color="#CCCCCC">sure</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you give those things an</font>

949
00:43:26,700 --> 00:43:31,080
element of rigor around kind of how it's

950
00:43:29,640 --> 00:43:33,480
designed how<font color="#E5E5E5"> it's implemented in things</font>

951
00:43:31,080 --> 00:43:36,600
like<font color="#E5E5E5"> that and when in doubt ask an</font>

952
00:43:33,480 --> 00:43:39,480
expert which by<font color="#E5E5E5"> the way I'm</font><font color="#CCCCCC"> not equipped</font>

953
00:43:36,600 --> 00:43:42,870
<font color="#E5E5E5">to expert but hopefully you know within</font>

954
00:43:39,480 --> 00:43:44,340
your organization or you know within

955
00:43:42,870 --> 00:43:45,810
<font color="#CCCCCC">money the people that you rely on or</font>

956
00:43:44,340 --> 00:43:47,040
something<font color="#CCCCCC"> like that you have somebody</font>

957
00:43:45,810 --> 00:43:48,779
<font color="#E5E5E5">who can actually take that kind of look</font>

958
00:43:47,040 --> 00:43:51,440
at something you're designing because

959
00:43:48,780 --> 00:43:51,440
crypto is

960
00:43:57,160 --> 00:43:59,220
you

