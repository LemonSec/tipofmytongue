1
00:00:01,530 --> 00:00:10,350
this is<font color="#E5E5E5"> we yeah I'm a penetration tester</font>

2
00:00:07,000 --> 00:00:15,820
for portcullis been there for about

3
00:00:10,350 --> 00:00:19,390
about 14 months now well my specialities

4
00:00:15,820 --> 00:00:21,130
is messing around with the<font color="#E5E5E5"> binary</font>

5
00:00:19,390 --> 00:00:23,279
protocols mess around with network

6
00:00:21,130 --> 00:00:25,509
protocols mess around with flat files

7
00:00:23,279 --> 00:00:28,420
windows reverse engineering windows

8
00:00:25,510 --> 00:00:29,770
internal stuff windows binary

9
00:00:28,420 --> 00:00:32,500
applications so that's the kind of stuff

10
00:00:29,770 --> 00:00:35,379
I I<font color="#E5E5E5"> really enjoy doing so I'm going to</font>

11
00:00:32,500 --> 00:00:38,440
talk to you today about some sort<font color="#CCCCCC"> of</font>

12
00:00:35,379 --> 00:00:41,670
generic techniques into breaking these

13
00:00:38,440 --> 00:00:43,928
binary protocols from from the ground up

14
00:00:41,670 --> 00:00:46,299
so yeah these are all my contact details

15
00:00:43,929 --> 00:00:47,920
and this is all the corporate

16
00:00:46,299 --> 00:00:53,969
information which I am required<font color="#E5E5E5"> to tell</font>

17
00:00:47,920 --> 00:00:57,609
you out so read them if you want right

18
00:00:53,969 --> 00:00:59,819
so yeah quick introduction we'll go over

19
00:00:57,609 --> 00:01:03,030
some background information to the talk

20
00:00:59,819 --> 00:01:05,170
some general analysis techniques for

21
00:01:03,030 --> 00:01:07,920
digging into these binary<font color="#E5E5E5"> network</font>

22
00:01:05,170 --> 00:01:11,290
protocols identifying back bad

23
00:01:07,920 --> 00:01:12,220
implementations of cryptography so often

24
00:01:11,290 --> 00:01:14,380
you'll find<font color="#CCCCCC"> that people who've</font>

25
00:01:12,220 --> 00:01:16,840
implemented their own binary protocols

26
00:01:14,380 --> 00:01:18,550
all have<font color="#CCCCCC"> also done silly things with the</font>

27
00:01:16,840 --> 00:01:20,050
crypto they won't if you just TLS

28
00:01:18,550 --> 00:01:22,690
wrapped it with a decent implementation

29
00:01:20,050 --> 00:01:26,410
that<font color="#E5E5E5"> I've gone and put their own things</font>

30
00:01:22,690 --> 00:01:28,149
in there and then we're going to<font color="#CCCCCC"> put</font>

31
00:01:26,410 --> 00:01:29,770
things<font color="#E5E5E5"> together and come up with some</font>

32
00:01:28,150 --> 00:01:33,010
conclusions basically this this entire

33
00:01:29,770 --> 00:01:35,560
talk is based around some issues<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I</font>

34
00:01:33,010 --> 00:01:40,870
found in a very popular piece of

35
00:01:35,560 --> 00:01:43,720
networking equipment so how many of<font color="#E5E5E5"> you</font>

36
00:01:40,870 --> 00:01:45,100
saw the abstract and that sort the

37
00:01:43,720 --> 00:01:47,110
little disclaimer at the bottom saying

38
00:01:45,100 --> 00:01:49,089
oh we're<font color="#CCCCCC"> not quite sure what we're going</font>

39
00:01:47,110 --> 00:01:51,310
to be<font color="#E5E5E5"> talking about whether we can tell</font>

40
00:01:49,090 --> 00:01:55,840
you or not and came<font color="#E5E5E5"> here in</font><font color="#CCCCCC"> the hopes of</font>

41
00:01:51,310 --> 00:01:57,990
getting some<font color="#CCCCCC"> zero-day well it's gonna</font><font color="#E5E5E5"> be</font>

42
00:01:55,840 --> 00:01:57,990
good

43
00:02:01,680 --> 00:02:08,190
I'm particularly proud of some of these

44
00:02:03,870 --> 00:02:12,810
animated gifts so the subject of<font color="#E5E5E5"> this</font>

45
00:02:08,190 --> 00:02:17,550
today is a load balancer anybody know

46
00:02:12,810 --> 00:02:19,890
what that is somebody said it it's a

47
00:02:17,550 --> 00:02:22,260
citrix netscaler so in<font color="#E5E5E5"> reality it'll</font>

48
00:02:19,890 --> 00:02:24,329
probably<font color="#E5E5E5"> look more like that so it's a</font>

49
00:02:22,260 --> 00:02:26,220
<font color="#E5E5E5">little less shiny these are the older</font>

50
00:02:24,330 --> 00:02:29,610
style ones I'm not<font color="#E5E5E5"> quite sure which</font>

51
00:02:26,220 --> 00:02:32,520
revision this is but yeah these things

52
00:02:29,610 --> 00:02:35,220
are essentially well I'll tell you what

53
00:02:32,520 --> 00:02:38,489
there in a minute so this<font color="#E5E5E5"> is what it</font>

54
00:02:35,220 --> 00:02:40,800
says on their website that first<font color="#CCCCCC"> lot</font>

55
00:02:38,489 --> 00:02:43,739
<font color="#E5E5E5">it's a loaded way too much for me to</font>

56
00:02:40,800 --> 00:02:46,020
<font color="#E5E5E5">read but my second two quotes here are</font>

57
00:02:43,739 --> 00:02:48,810
absolute gold like marketing material is

58
00:02:46,020 --> 00:02:50,489
brilliant combines a comprehensive

59
00:02:48,810 --> 00:02:52,380
attack detection database to immediately

60
00:02:50,489 --> 00:02:54,030
identify and block security threats

61
00:02:52,380 --> 00:02:57,510
along with<font color="#E5E5E5"> the positive security model</font>

62
00:02:54,030 --> 00:03:00,480
that blocks zero-day attacks I'm sure

63
00:02:57,510 --> 00:03:05,850
that<font color="#E5E5E5"> really works oh by the way does</font>

64
00:03:00,480 --> 00:03:09,690
anyone here work for citrix nobody

65
00:03:05,850 --> 00:03:13,950
well when this goes out if anybody from

66
00:03:09,690 --> 00:03:16,740
<font color="#CCCCCC">Statistics is watching sorry I know</font>

67
00:03:13,950 --> 00:03:19,200
they've already spoken to me but sorry I

68
00:03:16,740 --> 00:03:23,370
me of course blocking one hundred

69
00:03:19,200 --> 00:03:28,980
percent of attacks yeah I'm sure so the

70
00:03:23,370 --> 00:03:30,210
reality it's ninety percent bullshit so

71
00:03:28,980 --> 00:03:31,920
it's a load balancer it's an<font color="#CCCCCC"> ssl</font>

72
00:03:30,210 --> 00:03:33,390
endpoint it's a VPN endpoint it's

73
00:03:31,920 --> 00:03:34,829
<font color="#E5E5E5">available as a physical device which if</font>

74
00:03:33,390 --> 00:03:38,459
you've seen you<font color="#E5E5E5"> can get it as a</font>

75
00:03:34,830 --> 00:03:40,680
virtualized appliance it has the various

76
00:03:38,460 --> 00:03:43,350
<font color="#E5E5E5">Citrix stuff so you've got</font><font color="#CCCCCC"> ICA which is</font>

77
00:03:40,680 --> 00:03:46,340
the remote desktop style thing<font color="#E5E5E5"> Zen app</font>

78
00:03:43,350 --> 00:03:48,269
and all their other various things and

79
00:03:46,340 --> 00:03:49,380
standard security features which is

80
00:03:48,270 --> 00:03:51,960
basically a firewall but they've got

81
00:03:49,380 --> 00:03:54,900
<font color="#E5E5E5">some particular things that matter to it</font>

82
00:03:51,960 --> 00:03:57,600
in terms of it being a necessary<font color="#E5E5E5"> and</font>

83
00:03:54,900 --> 00:04:00,240
things like that so<font color="#CCCCCC"> the history of this</font>

84
00:03:57,600 --> 00:04:03,120
is essentially the the second week i

85
00:04:00,240 --> 00:04:06,780
started at portcullis Tim the guys SAT

86
00:04:03,120 --> 00:04:09,360
there handed me this big black box and

87
00:04:06,780 --> 00:04:10,650
said mess with that so I said<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> I'll be</font>

88
00:04:09,360 --> 00:04:13,140
interesting so I started digging<font color="#CCCCCC"> around</font>

89
00:04:10,650 --> 00:04:14,700
in it<font color="#E5E5E5"> spent a couple of weeks playing</font>

90
00:04:13,140 --> 00:04:16,829
with it<font color="#CCCCCC"> I found some very interesting</font>

91
00:04:14,700 --> 00:04:19,560
things<font color="#E5E5E5"> stop reverse engineering various</font>

92
00:04:16,829 --> 00:04:20,669
bits of it and worked out that<font color="#E5E5E5"> they</font>

93
00:04:19,560 --> 00:04:25,770
<font color="#E5E5E5">would think quite a few things wrong</font>

94
00:04:20,670 --> 00:04:28,200
with it so we what I compiled all of

95
00:04:25,770 --> 00:04:31,409
this research into a paper and we sent

96
00:04:28,200 --> 00:04:34,620
it off to citrix about<font color="#E5E5E5"> seven months ago</font>

97
00:04:31,410 --> 00:04:38,370
<font color="#E5E5E5">and it's now been seven months and</font>

98
00:04:34,620 --> 00:04:40,020
they've now patched two of the issues we

99
00:04:38,370 --> 00:04:44,070
actually had a conference<font color="#E5E5E5"> call</font><font color="#CCCCCC"> with them</font>

100
00:04:40,020 --> 00:04:47,370
<font color="#E5E5E5">yesterday at four-thirty only going over</font>

101
00:04:44,070 --> 00:04:50,250
but we've essentially decided that it's

102
00:04:47,370 --> 00:04:52,760
been a long<font color="#CCCCCC"> time the contact</font><font color="#E5E5E5"> level has</font>

103
00:04:50,250 --> 00:04:54,960
not been brilliant so therefore we've

104
00:04:52,760 --> 00:04:58,349
gone ahead and decided that<font color="#E5E5E5"> we're going</font>

105
00:04:54,960 --> 00:05:01,349
to disclose this<font color="#E5E5E5"> stuff how that being</font>

106
00:04:58,350 --> 00:05:05,070
said citrix have apologized for not

107
00:05:01,350 --> 00:05:06,660
being in<font color="#E5E5E5"> contact with us quite as much</font>

108
00:05:05,070 --> 00:05:08,520
as<font color="#CCCCCC"> they as we would have liked them to</font>

109
00:05:06,660 --> 00:05:11,280
be and they're<font color="#E5E5E5"> going to go footwear</font>

110
00:05:08,520 --> 00:05:13,349
working with them going forward to try

111
00:05:11,280 --> 00:05:15,299
and improve<font color="#CCCCCC"> the security the security of</font>

112
00:05:13,350 --> 00:05:19,009
their products as well as they're sort

113
00:05:15,300 --> 00:05:22,069
of handling of further issues so

114
00:05:19,009 --> 00:05:26,539
they're doing pretty<font color="#CCCCCC"> well so the initial</font>

115
00:05:22,069 --> 00:05:28,550
approach to looking at the device first

116
00:05:26,539 --> 00:05:30,469
<font color="#E5E5E5">thing look at the physical</font><font color="#CCCCCC"> parts because</font>

117
00:05:28,550 --> 00:05:32,270
<font color="#E5E5E5">I like playing with</font><font color="#CCCCCC"> hardware hardware</font>

118
00:05:30,469 --> 00:05:35,360
it's fun you can<font color="#E5E5E5"> find all sorts of crazy</font>

119
00:05:32,270 --> 00:05:37,549
shit and hardware so the first<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> I</font>

120
00:05:35,360 --> 00:05:40,509
did was spin it around take the cover

121
00:05:37,550 --> 00:05:42,830
off see what I<font color="#E5E5E5"> can find unfortunately</font>

122
00:05:40,509 --> 00:05:44,689
not a whole lot but we're<font color="#E5E5E5"> going to that</font>

123
00:05:42,830 --> 00:05:47,628
<font color="#CCCCCC">in a minute analyzing the network</font>

124
00:05:44,689 --> 00:05:51,020
footprint so that's a posh way of saying

125
00:05:47,629 --> 00:05:53,089
nmap basically poking around having a

126
00:05:51,020 --> 00:05:54,710
look at what it exposes on different

127
00:05:53,089 --> 00:05:56,839
ports because obviously you're<font color="#CCCCCC"> going to</font>

128
00:05:54,710 --> 00:05:59,089
have with it being an enterprise

129
00:05:56,839 --> 00:06:00,349
networking piece of equipment<font color="#CCCCCC"> you can</font>

130
00:05:59,089 --> 00:06:01,430
have different ports that are set up for

131
00:06:00,349 --> 00:06:03,349
different things so you<font color="#E5E5E5"> can access</font>

132
00:06:01,430 --> 00:06:04,639
management over these ports and these

133
00:06:03,349 --> 00:06:06,919
are<font color="#E5E5E5"> external these are internal blah</font>

134
00:06:04,639 --> 00:06:08,240
blah blah<font color="#CCCCCC"> blah so yeah probing the</font>

135
00:06:06,919 --> 00:06:09,889
services for interesting things so

136
00:06:08,240 --> 00:06:12,499
<font color="#E5E5E5">connected to do them trying to work out</font>

137
00:06:09,889 --> 00:06:14,270
what they<font color="#CCCCCC"> are what they do whether they</font>

138
00:06:12,499 --> 00:06:15,770
may be say something really silly and

139
00:06:14,270 --> 00:06:17,869
you're going<font color="#CCCCCC"> home was like</font><font color="#E5E5E5"> doing that</font>

140
00:06:15,770 --> 00:06:21,680
and then sniffing traffic using<font color="#E5E5E5"> normal</font>

141
00:06:17,869 --> 00:06:23,839
during normal operation so digging a

142
00:06:21,680 --> 00:06:26,209
while it's just<font color="#E5E5E5"> actually doing its job</font>

143
00:06:23,839 --> 00:06:27,830
and<font color="#E5E5E5"> then sniffing the traffic whilst</font>

144
00:06:26,209 --> 00:06:28,999
it's doing administrative tasks so for

145
00:06:27,830 --> 00:06:31,818
example<font color="#E5E5E5"> if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> logged into the admin</font>

146
00:06:28,999 --> 00:06:33,020
panel what's it doing<font color="#CCCCCC"> there so the</font>

147
00:06:31,819 --> 00:06:34,370
physical ports as I said weren't

148
00:06:33,020 --> 00:06:38,959
actually got interesting there's a

149
00:06:34,370 --> 00:06:40,459
serial port so its standard dv9000 25 so

150
00:06:38,959 --> 00:06:44,240
there's there's not a whole lot<font color="#E5E5E5"> to look</font>

151
00:06:40,459 --> 00:06:48,620
<font color="#E5E5E5">around in there so 0 port as I said</font>

152
00:06:44,240 --> 00:06:52,099
standard dv9000 we go through to<font color="#E5E5E5"> that on</font>

153
00:06:48,620 --> 00:06:55,159
a standard 9600 baud connection drops

154
00:06:52,099 --> 00:06:57,069
you to a management shell you<font color="#CCCCCC"> can manage</font>

155
00:06:55,159 --> 00:06:59,180
device reset passwords blah blah

156
00:06:57,069 --> 00:07:02,300
physical requirement obviously it's

157
00:06:59,180 --> 00:07:04,430
designed for if you walk into<font color="#E5E5E5"> the DC</font>

158
00:07:02,300 --> 00:07:06,139
walk up and you<font color="#CCCCCC"> need to fix</font><font color="#E5E5E5"> something on</font>

159
00:07:04,430 --> 00:07:09,620
it you<font color="#E5E5E5"> can go in and directly configure</font>

160
00:07:06,139 --> 00:07:14,809
it but we did discover a special log on

161
00:07:09,620 --> 00:07:18,259
there's a special log on that is kind of

162
00:07:14,809 --> 00:07:19,999
<font color="#E5E5E5">documented it's you can find out</font><font color="#CCCCCC"> about</font>

163
00:07:18,259 --> 00:07:22,069
it on the citric forums and some of the

164
00:07:19,999 --> 00:07:25,309
<font color="#CCCCCC">Citrix support guy through talk about it</font>

165
00:07:22,069 --> 00:07:28,569
but I don't<font color="#E5E5E5"> believe it's in the the main</font>

166
00:07:25,309 --> 00:07:30,700
reels of documentation that they publish

167
00:07:28,569 --> 00:07:32,830
<font color="#E5E5E5">it's kind</font><font color="#CCCCCC"> of interesting</font>

168
00:07:30,700 --> 00:07:35,500
but you can't do a whole lot with<font color="#E5E5E5"> it</font>

169
00:07:32,830 --> 00:07:40,900
really so then we start looking<font color="#E5E5E5"> at the</font>

170
00:07:35,500 --> 00:07:43,690
network level so got tcp ports open port

171
00:07:40,900 --> 00:07:46,960
22 for ssh 80 and 443 for the

172
00:07:43,690 --> 00:07:52,000
configuration utility over HTTP or<font color="#CCCCCC"> https</font>

173
00:07:46,960 --> 00:07:54,190
user can go to either 3008 for the this

174
00:07:52,000 --> 00:07:55,480
is a java applet within the

175
00:07:54,190 --> 00:07:56,890
configuration utility so the

176
00:07:55,480 --> 00:07:58,750
configuration utility is basically just

177
00:07:56,890 --> 00:08:00,039
<font color="#E5E5E5">like a web page where the</font><font color="#CCCCCC"> Java applet</font>

178
00:07:58,750 --> 00:08:03,520
embedded in it and it doesn't<font color="#E5E5E5"> really do</font>

179
00:08:00,040 --> 00:08:06,220
anything else you<font color="#CCCCCC"> use the Java applet to</font>

180
00:08:03,520 --> 00:08:09,430
configure the whole thing if you visit

181
00:08:06,220 --> 00:08:11,950
it over port 80 then the Java applet

182
00:08:09,430 --> 00:08:13,720
talks over port 30-10 and does

183
00:08:11,950 --> 00:08:18,070
everything in the clear if you visit it

184
00:08:13,720 --> 00:08:20,050
over<font color="#E5E5E5"> HTTPS then it talks over 33 to</font>

185
00:08:18,070 --> 00:08:24,610
below eight and does that<font color="#CCCCCC"> wrapped him</font>

186
00:08:20,050 --> 00:08:27,580
ssl port 4001 for citrix i th-thought

187
00:08:24,610 --> 00:08:30,910
systemic port seven six six seven seven

188
00:08:27,580 --> 00:08:32,559
seven six runs an unknown service if<font color="#E5E5E5"> you</font>

189
00:08:30,910 --> 00:08:34,419
connect<font color="#E5E5E5"> to it it</font><font color="#CCCCCC"> just immediately kills</font>

190
00:08:32,559 --> 00:08:38,199
you connection I don't know what that's

191
00:08:34,419 --> 00:08:41,350
<font color="#E5E5E5">for I never works out 2,700 and so I</font>

192
00:08:38,200 --> 00:08:44,190
<font color="#CCCCCC">27,000</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> 5 2 334 is the Flex net</font>

193
00:08:41,350 --> 00:08:46,780
licensing stuff that they use on their

194
00:08:44,190 --> 00:08:47,500
whole lot interesting with that so the

195
00:08:46,780 --> 00:08:49,780
main<font color="#CCCCCC"> thing that we're going to be</font>

196
00:08:47,500 --> 00:08:54,310
digging into is the stuff on<font color="#E5E5E5"> 32 below</font>

197
00:08:49,780 --> 00:08:57,730
eight and thirty 30 10 now a console

198
00:08:54,310 --> 00:08:59,589
management when you connect via<font color="#CCCCCC"> SSH you</font>

199
00:08:57,730 --> 00:09:02,830
login with the username and password as

200
00:08:59,590 --> 00:09:05,380
you normally want but instead of there's

201
00:09:02,830 --> 00:09:06,700
a default which is nsns<font color="#CCCCCC"> root you can</font>

202
00:09:05,380 --> 00:09:08,170
<font color="#E5E5E5">just log straight into that if they</font>

203
00:09:06,700 --> 00:09:10,930
haven't changed it not pitched more to

204
00:09:08,170 --> 00:09:12,699
do NS recover is the alternative one

205
00:09:10,930 --> 00:09:16,030
that we were talking about<font color="#E5E5E5"> a minute</font><font color="#CCCCCC"> ago</font>

206
00:09:12,700 --> 00:09:18,790
so the unusual one it seems to<font color="#CCCCCC"> be that</font>

207
00:09:16,030 --> 00:09:20,920
<font color="#CCCCCC">you so that one doesn't appear in et Cie</font>

208
00:09:18,790 --> 00:09:22,750
password it seems to<font color="#E5E5E5"> be like some sort</font>

209
00:09:20,920 --> 00:09:26,020
of special account that's built into the

210
00:09:22,750 --> 00:09:27,400
sshd not entirely sure how it all works

211
00:09:26,020 --> 00:09:31,060
there's no obvious way to change the

212
00:09:27,400 --> 00:09:33,550
<font color="#CCCCCC">password for it but on a few of the</font>

213
00:09:31,060 --> 00:09:34,869
<font color="#CCCCCC">devices that</font><font color="#E5E5E5"> we looked at the passwords</font>

214
00:09:33,550 --> 00:09:36,490
were changed so it may well be that

215
00:09:34,870 --> 00:09:38,410
citrix can change it or there is some

216
00:09:36,490 --> 00:09:41,830
sort of documented wait I<font color="#E5E5E5"> just not found</font>

217
00:09:38,410 --> 00:09:43,600
it but when you log in you don't<font color="#E5E5E5"> get an</font>

218
00:09:41,830 --> 00:09:45,940
<font color="#CCCCCC">SSH prompt you don't you don't get</font>

219
00:09:43,600 --> 00:09:47,410
you know bash shell or whatever what it

220
00:09:45,940 --> 00:09:50,050
actually drops you too is a menu based

221
00:09:47,410 --> 00:09:52,329
configuration system so what they've

222
00:09:50,050 --> 00:09:55,019
done is they've taken this sshd and then

223
00:09:52,329 --> 00:09:57,279
pipe basically<font color="#CCCCCC"> piped this</font><font color="#E5E5E5"> management</font>

224
00:09:55,019 --> 00:09:58,810
utility into it so that when you<font color="#CCCCCC"> login</font>

225
00:09:57,279 --> 00:10:00,130
<font color="#E5E5E5">you just drop into that so you can't</font>

226
00:09:58,810 --> 00:10:03,479
there's<font color="#E5E5E5"> no real sort of like break out</font>

227
00:10:00,130 --> 00:10:06,279
from that well there it is but

228
00:10:03,480 --> 00:10:08,949
essentially you do this menu based

229
00:10:06,279 --> 00:10:10,779
configuration so they have a set of it's

230
00:10:08,949 --> 00:10:13,449
a little<font color="#CCCCCC"> bit like using don't you've</font>

231
00:10:10,779 --> 00:10:15,399
used diskpart or something like that<font color="#E5E5E5"> so</font>

232
00:10:13,449 --> 00:10:16,990
you type this part and<font color="#E5E5E5"> then you go</font><font color="#CCCCCC"> into</font>

233
00:10:15,399 --> 00:10:19,589
certain sub menus and submenus and you

234
00:10:16,990 --> 00:10:21,730
can go back<font color="#CCCCCC"> and use your kind of thing</font>

235
00:10:19,589 --> 00:10:23,350
<font color="#E5E5E5">but if you have admin rights you just</font>

236
00:10:21,730 --> 00:10:28,389
type shell and drops you to it shell

237
00:10:23,350 --> 00:10:31,990
prompt as root which is quite Alice now

238
00:10:28,389 --> 00:10:34,750
reversing the Java applet how many you

239
00:10:31,990 --> 00:10:36,819
hear a reverse the<font color="#E5E5E5"> Java applet at least</font>

240
00:10:34,750 --> 00:10:40,029
hadn't or a try right so I found<font color="#CCCCCC"> on me</font>

241
00:10:36,819 --> 00:10:41,979
basically<font color="#E5E5E5"> Java is</font><font color="#CCCCCC"> a just-in-time</font>

242
00:10:40,029 --> 00:10:47,709
compiled language it's quite<font color="#E5E5E5"> similar to</font>

243
00:10:41,980 --> 00:10:50,050
net so if you compile the application

244
00:10:47,709 --> 00:10:52,180
because it's such a reflective language

245
00:10:50,050 --> 00:10:54,910
it's<font color="#E5E5E5"> actually relatively trivial to get</font>

246
00:10:52,180 --> 00:10:58,120
the almost original source code back bar

247
00:10:54,910 --> 00:11:00,670
comments like everything basically gets

248
00:10:58,120 --> 00:11:02,709
compiled in because it's a it's

249
00:11:00,670 --> 00:11:04,630
essentially<font color="#CCCCCC"> a machine-readable</font>

250
00:11:02,709 --> 00:11:07,359
description of the code<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> put in</font>

251
00:11:04,630 --> 00:11:08,709
there so you can reverse and reverse

252
00:11:07,360 --> 00:11:11,920
engineer that quite easily there's lots

253
00:11:08,709 --> 00:11:14,170
<font color="#E5E5E5">of tools to do it I use JD GUI it's</font>

254
00:11:11,920 --> 00:11:16,779
quite nice tool you literally just drop

255
00:11:14,170 --> 00:11:18,459
the executable in there over the jar in

256
00:11:16,779 --> 00:11:20,829
there and it literally just tells you

257
00:11:18,459 --> 00:11:22,839
all the<font color="#E5E5E5"> sauce you just go through and</font>

258
00:11:20,829 --> 00:11:24,910
read it<font color="#E5E5E5"> all is like being back</font><font color="#CCCCCC"> in an IDE</font>

259
00:11:22,839 --> 00:11:29,110
you can export it all out as text so<font color="#E5E5E5"> you</font>

260
00:11:24,910 --> 00:11:31,569
can grab for it or whatever and as I

261
00:11:29,110 --> 00:11:33,579
said use grep to find interesting things

262
00:11:31,569 --> 00:11:35,740
certain<font color="#E5E5E5"> things</font><font color="#CCCCCC"> that you might discover</font>

263
00:11:33,579 --> 00:11:38,649
quite easily with grep some things a bit

264
00:11:35,740 --> 00:11:41,290
<font color="#E5E5E5">more contextual and the documentation</font>

265
00:11:38,649 --> 00:11:43,839
gives you a bit of context as to which

266
00:11:41,290 --> 00:11:45,099
bits of code important which bit salt

267
00:11:43,839 --> 00:11:47,050
and what they might<font color="#E5E5E5"> be doing so you</font>

268
00:11:45,100 --> 00:11:49,149
might grep for something and then go I

269
00:11:47,050 --> 00:11:50,680
have no<font color="#E5E5E5"> idea what that's doing and then</font>

270
00:11:49,149 --> 00:11:52,180
you start to trace it back and then look

271
00:11:50,680 --> 00:11:53,390
through the documentation and that gives

272
00:11:52,180 --> 00:11:57,410
you a better<font color="#E5E5E5"> idea</font>

273
00:11:53,390 --> 00:12:01,370
now spot<font color="#E5E5E5"> the fail number one who here it</font>

274
00:11:57,410 --> 00:12:02,719
actually knows java who here can tell<font color="#E5E5E5"> me</font>

275
00:12:01,370 --> 00:12:09,110
what's wrong with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> or why that's</font>

276
00:12:02,720 --> 00:12:15,050
stupid if you can read it<font color="#E5E5E5"> I know you</font>

277
00:12:09,110 --> 00:12:16,490
know Tim yeah so basically<font color="#E5E5E5"> the</font>

278
00:12:15,050 --> 00:12:19,189
validation of the certificate<font color="#CCCCCC"> it just</font>

279
00:12:16,490 --> 00:12:20,960
return true so I hand you a certificate

280
00:12:19,190 --> 00:12:24,170
and instead<font color="#CCCCCC"> of validating it you just</font>

281
00:12:20,960 --> 00:12:26,360
don't okay and just accept it blindly so

282
00:12:24,170 --> 00:12:31,030
I could hand you an expired code signing

283
00:12:26,360 --> 00:12:32,810
certificate for the wrong IP address

284
00:12:31,030 --> 00:12:34,370
everything can be<font color="#E5E5E5"> wrong with it and it</font>

285
00:12:32,810 --> 00:12:35,900
will<font color="#E5E5E5"> just go yeah that's fine as long as</font>

286
00:12:34,370 --> 00:12:38,360
you give it a certificate as long as

287
00:12:35,900 --> 00:12:43,490
it's well-formed so that's kind of bad

288
00:12:38,360 --> 00:12:45,020
so that's in<font color="#E5E5E5"> that code so yet the</font>

289
00:12:43,490 --> 00:12:46,520
problem with<font color="#E5E5E5"> that obviously being that</font>

290
00:12:45,020 --> 00:12:51,530
you can use that to<font color="#CCCCCC"> man-in-the-middle</font>

291
00:12:46,520 --> 00:12:55,220
<font color="#E5E5E5">the connection next one same thing</font>

292
00:12:51,530 --> 00:12:58,699
donate so this<font color="#E5E5E5"> is this is originally</font>

293
00:12:55,220 --> 00:13:00,260
from their documentation so they have an

294
00:12:58,700 --> 00:13:04,210
API that you can<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> to and they</font>

295
00:13:00,260 --> 00:13:06,830
recommend using that all very bright

296
00:13:04,210 --> 00:13:09,890
however it also turns out if<font color="#E5E5E5"> you google</font>

297
00:13:06,830 --> 00:13:11,270
a little bit<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that code like it turns</font>

298
00:13:09,890 --> 00:13:13,760
out it doesn't appear very often that

299
00:13:11,270 --> 00:13:17,870
people write that so if you google a bit

300
00:13:13,760 --> 00:13:20,420
of it some other people have put out

301
00:13:17,870 --> 00:13:22,550
open source stuff why<font color="#E5E5E5"> i say open source</font>

302
00:13:20,420 --> 00:13:25,040
of reverse engineered stuff from other

303
00:13:22,550 --> 00:13:29,150
citrix products and that's in another

304
00:13:25,040 --> 00:13:31,069
<font color="#CCCCCC">citrix product somewhere interesting</font>

305
00:13:29,150 --> 00:13:36,400
wait it's still related to the<font color="#E5E5E5"> net but</font>

306
00:13:31,070 --> 00:13:36,400
<font color="#E5E5E5">yeah so issue number one</font>

307
00:13:37,810 --> 00:13:41,979
I told<font color="#E5E5E5"> you I was proud of the animate it</font>

308
00:13:39,430 --> 00:13:44,229
gets so there's no certificate

309
00:13:41,980 --> 00:13:46,900
validation on the ssl communications<font color="#CCCCCC"> for</font>

310
00:13:44,230 --> 00:13:48,550
the applet so that ssl is when you go

311
00:13:46,900 --> 00:13:52,180
over port 3 2 below eight when you've

312
00:13:48,550 --> 00:13:54,339
gone to the website over<font color="#E5E5E5"> https the java</font>

313
00:13:52,180 --> 00:13:56,079
applet loads up and then talks back over

314
00:13:54,339 --> 00:13:58,390
port 3 double or eight with the tls

315
00:13:56,080 --> 00:14:00,520
wrapping but if you can run in the

316
00:13:58,390 --> 00:14:02,410
middle that connection back it didn't

317
00:14:00,520 --> 00:14:04,540
matter<font color="#E5E5E5"> that it went over</font><font color="#CCCCCC"> https their</font>

318
00:14:02,410 --> 00:14:07,120
browser it means nothing<font color="#E5E5E5"> you can just go</font>

319
00:14:04,540 --> 00:14:11,370
through and pop those communications and

320
00:14:07,120 --> 00:14:15,600
see what's going<font color="#E5E5E5"> on between between the</font>

321
00:14:11,370 --> 00:14:15,600
<font color="#E5E5E5">users java applet and the device itself</font>

322
00:14:16,650 --> 00:14:24,779
so who here knows what<font color="#E5E5E5"> every helmet is</font>

323
00:14:20,610 --> 00:14:27,960
right so diff exchange protocol it's a

324
00:14:24,779 --> 00:14:31,150
bit of interesting cryptography

325
00:14:27,960 --> 00:14:34,630
essentially its way for two parties to

326
00:14:31,150 --> 00:14:37,329
securely exchange a secret without an

327
00:14:34,630 --> 00:14:40,870
observer being able to work out what

328
00:14:37,330 --> 00:14:45,480
<font color="#E5E5E5">that secret is so there's two types of</font>

329
00:14:40,870 --> 00:14:48,580
diffe ahem<font color="#CCCCCC"> ADH and dh8 eh is anonymous</font>

330
00:14:45,480 --> 00:14:52,920
so I know nothing<font color="#E5E5E5"> about you you know</font>

331
00:14:48,580 --> 00:14:52,920
<font color="#CCCCCC">nothing about me there's no prior</font>

332
00:14:52,980 --> 00:14:58,170
authentication and the problem with that

333
00:14:55,780 --> 00:15:01,630
is if you<font color="#CCCCCC"> moan in</font><font color="#E5E5E5"> the middle back I</font>

334
00:14:58,170 --> 00:15:03,189
might end<font color="#CCCCCC"> up talking to somebody</font><font color="#E5E5E5"> else so</font>

335
00:15:01,630 --> 00:15:04,990
I might<font color="#E5E5E5"> end</font><font color="#CCCCCC"> up going</font><font color="#E5E5E5"> ok I'm going to</font>

336
00:15:03,190 --> 00:15:06,310
<font color="#E5E5E5">exchange this with you but actually I'm</font>

337
00:15:04,990 --> 00:15:07,780
exchanging it with<font color="#E5E5E5"> somebody else and</font>

338
00:15:06,310 --> 00:15:09,989
they do another exchange with them and

339
00:15:07,780 --> 00:15:13,390
then they man the middle and get into

340
00:15:09,990 --> 00:15:16,170
difficulty use<font color="#E5E5E5"> an authenticated version</font>

341
00:15:13,390 --> 00:15:18,339
of that which essentially the initial

342
00:15:16,170 --> 00:15:21,130
handshake stuff that goes across is

343
00:15:18,339 --> 00:15:24,490
authenticated with the with some sort of

344
00:15:21,130 --> 00:15:27,250
prior exchanged or agreed upon

345
00:15:24,490 --> 00:15:28,660
authenticity information so when you

346
00:15:27,250 --> 00:15:30,339
normally<font color="#CCCCCC"> do it you may line it with a</font>

347
00:15:28,660 --> 00:15:31,990
<font color="#CCCCCC">long-term</font><font color="#E5E5E5"> public key that's our</font>

348
00:15:30,339 --> 00:15:33,330
long-term private key and<font color="#E5E5E5"> then somebody</font>

349
00:15:31,990 --> 00:15:37,080
else<font color="#E5E5E5"> can validate it with that publicly</font>

350
00:15:33,330 --> 00:15:40,810
now the implementation that<font color="#E5E5E5"> they use in</font>

351
00:15:37,080 --> 00:15:43,390
<font color="#CCCCCC">order</font><font color="#E5E5E5"> to generate the random</font><font color="#CCCCCC"> prime they</font>

352
00:15:40,810 --> 00:15:44,469
use<font color="#CCCCCC"> java dot util dot random now John</font>

353
00:15:43,390 --> 00:15:47,620
without you till around them is just<font color="#CCCCCC"> a</font>

354
00:15:44,470 --> 00:15:48,940
<font color="#E5E5E5">PR ng it's like lipsy random there's no</font>

355
00:15:47,620 --> 00:15:50,209
guarantee of it being cryptographically

356
00:15:48,940 --> 00:15:51,319
secure in<font color="#E5E5E5"> fact i can tell you</font>

357
00:15:50,209 --> 00:15:54,618
<font color="#E5E5E5">that out it is not cryptographically</font>

358
00:15:51,319 --> 00:15:57,019
secure don't use<font color="#E5E5E5"> it for</font><font color="#CCCCCC"> that so there's</font>

359
00:15:54,619 --> 00:15:58,639
a 32-bit seed on older systems or newer

360
00:15:57,019 --> 00:16:01,579
ones it's 48 bit which kind of makes<font color="#E5E5E5"> it</font>

361
00:15:58,639 --> 00:16:03,439
hard to brute-force the seed because the

362
00:16:01,579 --> 00:16:05,508
random generation isn't like a trivial

363
00:16:03,439 --> 00:16:06,860
bit of computation it's a little bit

364
00:16:05,509 --> 00:16:09,759
more<font color="#CCCCCC"> difficult to brute force but it's</font>

365
00:16:06,860 --> 00:16:12,889
still possible but the problem<font color="#CCCCCC"> is that</font>

366
00:16:09,759 --> 00:16:14,209
because<font color="#E5E5E5"> it's a PR ng it's not a true</font>

367
00:16:12,889 --> 00:16:15,709
<font color="#E5E5E5">it's not a cryptographically secure</font>

368
00:16:14,209 --> 00:16:19,189
random number generator it's a

369
00:16:15,709 --> 00:16:20,660
pseudo-random function it's not designed

370
00:16:19,189 --> 00:16:23,599
to be cryptographically secure if you

371
00:16:20,660 --> 00:16:25,519
take a bunch of outputs from this there

372
00:16:23,600 --> 00:16:27,019
are what's called predictor algorithms

373
00:16:25,519 --> 00:16:28,970
that people have written which will tell

374
00:16:27,019 --> 00:16:30,889
you what<font color="#E5E5E5"> the seed is based on like five</font>

375
00:16:28,970 --> 00:16:33,019
outputs from the random number<font color="#E5E5E5"> generator</font>

376
00:16:30,889 --> 00:16:35,480
so it's<font color="#E5E5E5"> really bad to use that kind of</font>

377
00:16:33,019 --> 00:16:36,589
thing for cryptography and the seed is

378
00:16:35,480 --> 00:16:39,259
also based on<font color="#E5E5E5"> the time stamps that</font>

379
00:16:36,589 --> 00:16:40,999
<font color="#E5E5E5">really narrows your narrows down your</font>

380
00:16:39,259 --> 00:16:44,089
values because if you know<font color="#E5E5E5"> that the</font>

381
00:16:40,999 --> 00:16:46,249
applet started up roughly when you just

382
00:16:44,089 --> 00:16:49,939
saw somebody download a big bit of HTTPS

383
00:16:46,249 --> 00:16:52,129
data off the<font color="#E5E5E5"> off of</font><font color="#CCCCCC"> the netscaler you</font>

384
00:16:49,939 --> 00:16:53,748
can kind of guess roughly<font color="#CCCCCC"> the time stamp</font>

385
00:16:52,129 --> 00:16:55,910
is going to be within this range and

386
00:16:53,749 --> 00:16:58,339
therefore you've just got the number<font color="#E5E5E5"> of</font>

387
00:16:55,910 --> 00:17:00,829
seeds down massively so then all you

388
00:16:58,339 --> 00:17:03,410
<font color="#CCCCCC">need</font><font color="#E5E5E5"> to do</font><font color="#CCCCCC"> is guess that have enough</font>

389
00:17:00,829 --> 00:17:07,668
guesses have enough outputs be able to

390
00:17:03,410 --> 00:17:09,260
roughly work out what potential value

391
00:17:07,669 --> 00:17:10,789
what potential seed values there could

392
00:17:09,260 --> 00:17:12,020
be until you get them within this window

393
00:17:10,789 --> 00:17:13,490
<font color="#E5E5E5">and then suddenly you know what the</font>

394
00:17:12,020 --> 00:17:15,139
<font color="#E5E5E5">Cedars and then you can work out every</font>

395
00:17:13,490 --> 00:17:17,089
random number generator and the number

396
00:17:15,140 --> 00:17:18,319
that it will generate and therefore you

397
00:17:17,089 --> 00:17:21,020
can work out what the diffie-hellman

398
00:17:18,319 --> 00:17:26,449
private information was and then you get

399
00:17:21,020 --> 00:17:27,559
<font color="#E5E5E5">the secret which means you win so sorry</font>

400
00:17:26,449 --> 00:17:30,909
there's a lot of max in this particular

401
00:17:27,559 --> 00:17:30,908
bit i'll say<font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot</font>

402
00:17:31,590 --> 00:17:39,240
so the way Tiffany<font color="#CCCCCC"> Helmand works is that</font>

403
00:17:33,450 --> 00:17:42,299
you have a prime P and a base<font color="#E5E5E5"> G these</font>

404
00:17:39,240 --> 00:17:45,240
values a sort of picked beforehand and

405
00:17:42,299 --> 00:17:48,658
then in all the way that it was

406
00:17:45,240 --> 00:17:52,529
<font color="#E5E5E5">implemented in their code is as follows</font>

407
00:17:48,659 --> 00:17:57,419
prime p hg then you sudo randomly select

408
00:17:52,529 --> 00:17:59,400
a candidate secret value so a ' which is

409
00:17:57,419 --> 00:18:00,809
a candidate secret value I i think i'm

410
00:17:59,400 --> 00:18:05,309
going to<font color="#E5E5E5"> use this one I need to check</font>

411
00:18:00,809 --> 00:18:09,600
<font color="#CCCCCC">that it's alright first such that it's</font>

412
00:18:05,309 --> 00:18:19,039
less<font color="#CCCCCC"> than the max so imagine</font><font color="#E5E5E5"> I pick the</font>

413
00:18:09,600 --> 00:18:21,120
number<font color="#CCCCCC"> 3 as my p-value now three in</font>

414
00:18:19,039 --> 00:18:26,700
terms<font color="#E5E5E5"> of the number of bits you need to</font>

415
00:18:21,120 --> 00:18:29,370
store<font color="#E5E5E5"> the number three you need what do</font>

416
00:18:26,700 --> 00:18:33,600
bits through it so my brain is not

417
00:18:29,370 --> 00:18:35,908
working today a number of bits now given

418
00:18:33,600 --> 00:18:38,549
<font color="#CCCCCC">that candidate number p basically using</font>

419
00:18:35,909 --> 00:18:41,659
the same sort of idea how<font color="#CCCCCC"> many bits do i</font>

420
00:18:38,549 --> 00:18:44,158
need to store this number so that's<font color="#E5E5E5"> the</font>

421
00:18:41,659 --> 00:18:45,210
the maximum value that this will be<font color="#E5E5E5"> so</font>

422
00:18:44,159 --> 00:18:46,649
basically what it does is it loops

423
00:18:45,210 --> 00:18:48,360
through and goes okay<font color="#CCCCCC"> i need</font><font color="#E5E5E5"> to pick</font>

424
00:18:46,649 --> 00:18:54,539
<font color="#CCCCCC">another number that's smaller than this</font>

425
00:18:48,360 --> 00:18:56,520
one so<font color="#CCCCCC"> if i pick a number such that it's</font>

426
00:18:54,539 --> 00:18:57,809
it's got<font color="#E5E5E5"> that number of bits there's a</font>

427
00:18:56,520 --> 00:19:00,360
good chance that i'm going to<font color="#E5E5E5"> be</font>

428
00:18:57,809 --> 00:19:03,330
somewhere<font color="#E5E5E5"> around the right maximum value</font>

429
00:19:00,360 --> 00:19:05,729
so then in next checks that is actually

430
00:19:03,330 --> 00:19:07,139
less than that value and if it has if

431
00:19:05,730 --> 00:19:09,149
it's if that doesn't that condition

432
00:19:07,140 --> 00:19:10,260
doesn't match it looks<font color="#E5E5E5"> around again try</font>

433
00:19:09,149 --> 00:19:12,000
to pick another<font color="#E5E5E5"> number so what it's</font>

434
00:19:10,260 --> 00:19:14,340
<font color="#E5E5E5">essentially doing is saying okay pick a</font>

435
00:19:12,000 --> 00:19:17,130
random number does that random number

436
00:19:14,340 --> 00:19:19,500
satisfy these things if it does hooray

437
00:19:17,130 --> 00:19:21,539
let's<font color="#E5E5E5"> use that if it doesn't take</font>

438
00:19:19,500 --> 00:19:23,279
another one now this is<font color="#CCCCCC"> kind of</font>

439
00:19:21,539 --> 00:19:24,799
interesting because<font color="#E5E5E5"> the upper bound for</font>

440
00:19:23,279 --> 00:19:26,730
that value is something that you know

441
00:19:24,799 --> 00:19:28,350
because it's a public piece of

442
00:19:26,730 --> 00:19:30,120
information so if I hand out this public

443
00:19:28,350 --> 00:19:31,529
piece of information and say to you<font color="#E5E5E5"> okay</font>

444
00:19:30,120 --> 00:19:33,000
i'm going<font color="#E5E5E5"> to pick a bunch of i'm going</font>

445
00:19:31,529 --> 00:19:34,440
to pick a random number but i don't<font color="#CCCCCC"> know</font>

446
00:19:33,000 --> 00:19:35,909
whether it's<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> satisfy these</font>

447
00:19:34,440 --> 00:19:38,190
conditions<font color="#E5E5E5"> i'm</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to loop around</font>

448
00:19:35,909 --> 00:19:40,860
until I do it one of them is if you work

449
00:19:38,190 --> 00:19:42,210
out how long<font color="#CCCCCC"> it took me to do that based</font>

450
00:19:40,860 --> 00:19:43,678
on<font color="#E5E5E5"> that piece of information you know</font>

451
00:19:42,210 --> 00:19:44,970
you can start<font color="#CCCCCC"> to work</font><font color="#E5E5E5"> out how many</font>

452
00:19:43,679 --> 00:19:47,789
iterations I'm

453
00:19:44,970 --> 00:19:51,240
might have done in order to hit that

454
00:19:47,789 --> 00:19:53,720
value so by knowing this public value

455
00:19:51,240 --> 00:19:57,090
and knowing how<font color="#CCCCCC"> long it took me to</font>

456
00:19:53,720 --> 00:19:59,130
generate the private value part you

457
00:19:57,090 --> 00:20:01,289
might be able to start<font color="#E5E5E5"> working out some</font>

458
00:19:59,130 --> 00:20:04,169
more<font color="#CCCCCC"> information about how</font><font color="#E5E5E5"> the about</font>

459
00:20:01,289 --> 00:20:06,390
what that<font color="#E5E5E5"> value might be or more</font>

460
00:20:04,169 --> 00:20:08,940
<font color="#CCCCCC">importantly about which values i</font>

461
00:20:06,390 --> 00:20:11,820
discarded now if you know that<font color="#CCCCCC"> i</font>

462
00:20:08,940 --> 00:20:13,500
discarded the whole bunch<font color="#E5E5E5"> of values you</font>

463
00:20:11,820 --> 00:20:16,320
<font color="#CCCCCC">can know</font><font color="#E5E5E5"> that those values have a</font>

464
00:20:13,500 --> 00:20:18,799
certain property like for<font color="#CCCCCC"> example that</font>

465
00:20:16,320 --> 00:20:21,899
they were too big so if<font color="#CCCCCC"> I say</font><font color="#E5E5E5"> okay</font>

466
00:20:18,799 --> 00:20:24,720
here's a number 1000 I'm going<font color="#E5E5E5"> to pick a</font>

467
00:20:21,900 --> 00:20:26,789
bunch<font color="#E5E5E5"> of random numbers until I find one</font>

468
00:20:24,720 --> 00:20:28,799
that's less than a thousand so if you

469
00:20:26,789 --> 00:20:30,360
know that<font color="#CCCCCC"> it probably took me about 20</font>

470
00:20:28,799 --> 00:20:32,429
iterations before that happened you know

471
00:20:30,360 --> 00:20:34,260
I had 20 numbers that were bigger than a

472
00:20:32,429 --> 00:20:35,640
thousand coming out of my random number

473
00:20:34,260 --> 00:20:38,610
generator which means<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you start to</font>

474
00:20:35,640 --> 00:20:41,330
build this sort<font color="#E5E5E5"> of model if okay we had</font>

475
00:20:38,610 --> 00:20:43,770
about this many values we know<font color="#CCCCCC"> that</font>

476
00:20:41,330 --> 00:20:45,658
therefore we might be able to build<font color="#E5E5E5"> a</font>

477
00:20:43,770 --> 00:20:49,530
predictor for that random number

478
00:20:45,659 --> 00:20:52,230
generator such that i can<font color="#CCCCCC"> tell it okay I</font>

479
00:20:49,530 --> 00:20:55,500
picked 60 random values that were larger

480
00:20:52,230 --> 00:20:58,890
than this find me a sequence so I find

481
00:20:55,500 --> 00:21:01,260
me a seed whereby this sequence<font color="#E5E5E5"> is</font>

482
00:20:58,890 --> 00:21:02,700
likely to have occurred and then when<font color="#CCCCCC"> we</font>

483
00:21:01,260 --> 00:21:04,559
start to tie all this information

484
00:21:02,700 --> 00:21:07,590
together we can start to look at you

485
00:21:04,559 --> 00:21:12,030
<font color="#E5E5E5">know for example 00 if the p-value is</font>

486
00:21:07,590 --> 00:21:14,399
quite high and has like a lot of its

487
00:21:12,030 --> 00:21:16,080
early bits set to 1 you know that all

488
00:21:14,400 --> 00:21:19,440
the discarded ones must have always<font color="#CCCCCC"> or</font>

489
00:21:16,080 --> 00:21:21,960
also had its those bits set to 1 because

490
00:21:19,440 --> 00:21:23,429
in order for it to be larger it must

491
00:21:21,960 --> 00:21:25,289
also therefore<font color="#E5E5E5"> have those bit sets of</font>

492
00:21:23,429 --> 00:21:26,900
one so you can<font color="#E5E5E5"> start to work out these</font>

493
00:21:25,289 --> 00:21:30,120
<font color="#E5E5E5">little things and start to unravel</font>

494
00:21:26,900 --> 00:21:32,429
information about the discarded values

495
00:21:30,120 --> 00:21:33,870
and then start to work out this

496
00:21:32,429 --> 00:21:39,750
information about what the random<font color="#E5E5E5"> number</font>

497
00:21:33,870 --> 00:21:42,479
generator output now there's also a

498
00:21:39,750 --> 00:21:43,919
function called<font color="#CCCCCC"> munge in there which</font>

499
00:21:42,480 --> 00:21:47,490
made me laugh because it's<font color="#E5E5E5"> a completely</font>

500
00:21:43,919 --> 00:21:48,539
ridiculous name for a<font color="#E5E5E5"> function so they</font>

501
00:21:47,490 --> 00:21:49,770
have this function called munch and

502
00:21:48,539 --> 00:21:54,830
literally what it does<font color="#E5E5E5"> it takes an input</font>

503
00:21:49,770 --> 00:21:58,090
value of some bites and repeatedly<font color="#E5E5E5"> X</font><font color="#CCCCCC"> ors</font>

504
00:21:54,830 --> 00:22:01,158
these fixed values the static key

505
00:21:58,090 --> 00:22:04,668
over that information<font color="#E5E5E5"> and then outputs</font>

506
00:22:01,159 --> 00:22:06,919
them again so it's like<font color="#CCCCCC"> a really</font><font color="#E5E5E5"> crappy</font>

507
00:22:04,669 --> 00:22:10,279
encryption algorithm and it turns out

508
00:22:06,919 --> 00:22:13,309
that these byte values are these strings

509
00:22:10,279 --> 00:22:16,279
here now the<font color="#E5E5E5"> first one look what they</font>

510
00:22:13,309 --> 00:22:17,960
look like landmarks in India not I don't

511
00:22:16,279 --> 00:22:19,880
<font color="#E5E5E5">know how anybody recognizes those I</font>

512
00:22:17,960 --> 00:22:22,370
don't know what they are and the bottom

513
00:22:19,880 --> 00:22:24,350
<font color="#CCCCCC">one is a company that used to make hard</font>

514
00:22:22,370 --> 00:22:26,418
drive controllers so I'm not<font color="#CCCCCC"> really</font>

515
00:22:24,350 --> 00:22:30,649
quite sure what that's all about by the

516
00:22:26,419 --> 00:22:34,429
way um yeah so<font color="#CCCCCC"> I</font><font color="#E5E5E5"> got two issues there</font>

517
00:22:30,649 --> 00:22:38,149
issue number one is<font color="#CCCCCC"> that weird different</font>

518
00:22:34,429 --> 00:22:40,639
human stuff badly implemented and issue

519
00:22:38,149 --> 00:22:42,049
number two is the static crypto things

520
00:22:40,639 --> 00:22:47,320
will go into what they were used for in

521
00:22:42,049 --> 00:22:49,370
a bit so I'm sorry we have issues

522
00:22:47,320 --> 00:22:55,870
incidentally that is my favorite gift

523
00:22:49,370 --> 00:22:58,969
ever so weird so you remember how I said

524
00:22:55,870 --> 00:23:04,370
to anyway who from<font color="#E5E5E5"> Citrix who's watching</font>

525
00:22:58,970 --> 00:23:06,260
sorry things like this that well i'm

526
00:23:04,370 --> 00:23:08,059
lazy like really lazy<font color="#CCCCCC"> i really can't be</font>

527
00:23:06,260 --> 00:23:09,590
asked to float so like<font color="#E5E5E5"> breaking</font><font color="#CCCCCC"> d ages</font>

528
00:23:08,059 --> 00:23:11,090
heartbreaking are in Jesus hard it hurts

529
00:23:09,590 --> 00:23:11,959
my head I have to<font color="#CCCCCC"> do maths my beard</font>

530
00:23:11,090 --> 00:23:15,350
isn't big enough to talk about

531
00:23:11,960 --> 00:23:17,419
probability theorem so yeah I'm<font color="#E5E5E5"> I'm</font>

532
00:23:15,350 --> 00:23:20,139
<font color="#E5E5E5">lazing let's break it easier in an</font>

533
00:23:17,419 --> 00:23:22,700
easier way so the borrowed protocol

534
00:23:20,139 --> 00:23:23,928
digging around in that and you'll see

535
00:23:22,700 --> 00:23:27,590
why that all the stuff is relevant in a

536
00:23:23,929 --> 00:23:29,480
minute analyzing the traffic on port 30

537
00:23:27,590 --> 00:23:33,168
10 which is<font color="#E5E5E5"> the plain text stuff it's</font>

538
00:23:29,480 --> 00:23:34,760
easy to look at however as a clear text

539
00:23:33,169 --> 00:23:35,990
header which has a bunch of<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> in</font>

540
00:23:34,760 --> 00:23:36,889
there<font color="#E5E5E5"> that I look out and go okay yeah</font>

541
00:23:35,990 --> 00:23:38,120
that looks like<font color="#E5E5E5"> Claire takes to me</font>

542
00:23:36,889 --> 00:23:39,678
followed by<font color="#E5E5E5"> something that's quite high</font>

543
00:23:38,120 --> 00:23:43,729
entropy so that looks either compressed

544
00:23:39,679 --> 00:23:46,490
or encrypted or both so the a bit of

545
00:23:43,730 --> 00:23:49,639
guessing so as I started<font color="#E5E5E5"> to look at the</font>

546
00:23:46,490 --> 00:23:52,120
protocol look at how things changed you

547
00:23:49,639 --> 00:23:55,580
can sort<font color="#E5E5E5"> of see values that look like</font>

548
00:23:52,120 --> 00:24:02,928
encoded integers so like for example if

549
00:23:55,580 --> 00:24:05,779
you get 10 000 000 so you've got four

550
00:24:02,929 --> 00:24:07,460
bytes there you kind of think well<font color="#CCCCCC"> ok</font>

551
00:24:05,779 --> 00:24:11,149
well that looks like an integer whose

552
00:24:07,460 --> 00:24:11,600
value is 16 because 10<font color="#E5E5E5"> in hex is 16 and</font>

553
00:24:11,149 --> 00:24:12,918
you

554
00:24:11,600 --> 00:24:15,168
a bunch of<font color="#E5E5E5"> zeros after there it looks</font>

555
00:24:12,919 --> 00:24:17,030
like<font color="#CCCCCC"> a 4-byte in so you can kind of</font>

556
00:24:15,169 --> 00:24:19,179
<font color="#E5E5E5">guess certain things so then you go okay</font>

557
00:24:17,030 --> 00:24:22,100
well what does that number represent

558
00:24:19,179 --> 00:24:23,840
what about<font color="#CCCCCC"> the length of the packet so</font>

559
00:24:22,100 --> 00:24:25,370
you work out how long<font color="#E5E5E5"> the packet that</font>

560
00:24:23,840 --> 00:24:26,928
the data blob was and go oh look that

561
00:24:25,370 --> 00:24:29,449
matches up then you get another packet

562
00:24:26,929 --> 00:24:30,650
and you look at the two and they both

563
00:24:29,450 --> 00:24:32,900
match up and then you've worked out that

564
00:24:30,650 --> 00:24:34,610
that's the length field so then you look

565
00:24:32,900 --> 00:24:36,650
at other things like values that are say

566
00:24:34,610 --> 00:24:38,090
static like for<font color="#E5E5E5"> example the second field</font>

567
00:24:36,650 --> 00:24:42,950
in<font color="#E5E5E5"> there which</font><font color="#CCCCCC"> is a magic number it's</font>

568
00:24:38,090 --> 00:24:45,530
just not<font color="#E5E5E5"> X</font><font color="#CCCCCC"> a505</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> just designed</font>

569
00:24:42,950 --> 00:24:48,620
to identify this is actually the traffic

570
00:24:45,530 --> 00:24:50,600
you're looking for a reserve value which

571
00:24:48,620 --> 00:24:51,379
is<font color="#CCCCCC"> zero because it was</font><font color="#E5E5E5"> always zero so</font>

572
00:24:50,600 --> 00:24:54,559
I'm just going to guess that it's

573
00:24:51,380 --> 00:24:56,870
probably reserved some kind of packet

574
00:24:54,559 --> 00:24:59,928
type or code so what<font color="#E5E5E5"> I was seeing was a</font>

575
00:24:56,870 --> 00:25:02,418
lot of when you<font color="#E5E5E5"> log in you see a lot of</font>

576
00:24:59,929 --> 00:25:04,669
different<font color="#CCCCCC"> types and then periodically</font>

577
00:25:02,419 --> 00:25:06,380
you<font color="#E5E5E5"> just see this this value say the</font>

578
00:25:04,669 --> 00:25:09,559
same certain ones<font color="#E5E5E5"> and then you start</font>

579
00:25:06,380 --> 00:25:10,880
doing management management tasks and in

580
00:25:09,559 --> 00:25:12,470
more packets come through with different

581
00:25:10,880 --> 00:25:14,270
values in this field and<font color="#E5E5E5"> that kinda says</font>

582
00:25:12,470 --> 00:25:19,370
to me well it's probably like some kind

583
00:25:14,270 --> 00:25:22,250
of command code so as I guess then some

584
00:25:19,370 --> 00:25:23,928
kind of flag it kept like it didn't

585
00:25:22,250 --> 00:25:25,669
<font color="#CCCCCC">really correlate to being a different</font>

586
00:25:23,929 --> 00:25:27,980
<font color="#E5E5E5">type of function it seemed to have</font>

587
00:25:25,669 --> 00:25:29,840
different it<font color="#CCCCCC"> just seemed to be set</font>

588
00:25:27,980 --> 00:25:32,270
slightly differently in different ones

589
00:25:29,840 --> 00:25:36,980
of the same type they're the same like<font color="#E5E5E5"> a</font>

590
00:25:32,270 --> 00:25:38,570
packet type of saying function<font color="#CCCCCC"> its</font><font color="#E5E5E5"> kind</font>

591
00:25:36,980 --> 00:25:41,570
<font color="#E5E5E5">of guess work you have to try and build</font>

592
00:25:38,570 --> 00:25:43,220
up this sort<font color="#E5E5E5"> of pattern in</font><font color="#CCCCCC"> your mind of</font>

593
00:25:41,570 --> 00:25:44,658
what's going<font color="#E5E5E5"> on by looking at all the</font>

594
00:25:43,220 --> 00:25:46,610
different types of traffic that's going

595
00:25:44,659 --> 00:25:47,630
through and give me mind yes I could

596
00:25:46,610 --> 00:25:49,549
have gone through and look through the

597
00:25:47,630 --> 00:25:51,260
java source code at the<font color="#E5E5E5"> time I haven't</font>

598
00:25:49,549 --> 00:25:53,840
<font color="#E5E5E5">actually found the bit where they define</font>

599
00:25:51,260 --> 00:25:55,940
the packet quite<font color="#E5E5E5"> big source tree so I</font>

600
00:25:53,840 --> 00:25:57,620
was still digging around for that but so

601
00:25:55,940 --> 00:25:59,750
in the meantime I did that<font color="#E5E5E5"> then an</font>

602
00:25:57,620 --> 00:26:01,750
unknown 16-bit integer and then 32-bit

603
00:25:59,750 --> 00:26:06,710
integer couldn't work out what they were

604
00:26:01,750 --> 00:26:07,820
so the payload data is the stuff that

605
00:26:06,710 --> 00:26:09,799
came after this so that was the clear

606
00:26:07,820 --> 00:26:12,950
text header now the payload data after

607
00:26:09,799 --> 00:26:14,690
that is all encrypted and stuff so you

608
00:26:12,950 --> 00:26:16,730
can see there the this is one of these

609
00:26:14,690 --> 00:26:19,790
packets that kept repeatedly being sent

610
00:26:16,730 --> 00:26:21,290
now I thought probably<font color="#CCCCCC"> a heartbeat</font>

611
00:26:19,790 --> 00:26:25,129
<font color="#CCCCCC">packets say hi I'm still here I'm still</font>

612
00:26:21,290 --> 00:26:25,860
connected don't drop my session<font color="#CCCCCC"> the same</font>

613
00:26:25,130 --> 00:26:28,520
repeated

614
00:26:25,860 --> 00:26:31,049
pattern but if you start a new session

615
00:26:28,520 --> 00:26:33,690
that pattern completely changes you get

616
00:26:31,049 --> 00:26:36,480
the same sort of repeating pattern but

617
00:26:33,690 --> 00:26:39,330
you get<font color="#E5E5E5"> different values but for the</font>

618
00:26:36,480 --> 00:26:41,640
same session every packet same values

619
00:26:39,330 --> 00:26:43,080
and the first pit would sort of change a

620
00:26:41,640 --> 00:26:45,420
little bit but<font color="#E5E5E5"> then the rest would be</font>

621
00:26:43,080 --> 00:26:50,570
<font color="#E5E5E5">all right it would be all</font><font color="#CCCCCC"> the same so</font>

622
00:26:45,420 --> 00:26:52,860
that<font color="#CCCCCC"> to me is evidence of a repeated XOR</font>

623
00:26:50,570 --> 00:26:55,770
cipher I say that in the loosest terms

624
00:26:52,860 --> 00:26:57,990
so essentially<font color="#E5E5E5"> they are looping some</font>

625
00:26:55,770 --> 00:26:59,850
value repeatedly X soaring it over it

626
00:26:57,990 --> 00:27:03,059
and as you can see at<font color="#E5E5E5"> the bottom you've</font>

627
00:26:59,850 --> 00:27:07,678
<font color="#CCCCCC">got this loops string</font><font color="#E5E5E5"> up the quite tell</font>

628
00:27:03,059 --> 00:27:09,629
but it's like 88 CDC 298 CDC tumor and

629
00:27:07,679 --> 00:27:11,640
it just carries on repeatedly but the

630
00:27:09,630 --> 00:27:12,840
<font color="#E5E5E5">first</font><font color="#CCCCCC"> bits of kind of have a little bit</font>

631
00:27:11,640 --> 00:27:14,940
of that<font color="#E5E5E5"> and then a little bit</font><font color="#CCCCCC"> that's</font>

632
00:27:12,840 --> 00:27:19,760
changed so it's like huh okay<font color="#CCCCCC"> so what's</font>

633
00:27:14,940 --> 00:27:23,010
being over there now<font color="#E5E5E5"> just want to talk</font>

634
00:27:19,760 --> 00:27:25,860
<font color="#CCCCCC">quickly about some crypto classification</font>

635
00:27:23,010 --> 00:27:27,690
now if you if I throw you a binary

636
00:27:25,860 --> 00:27:30,780
protocol it's got some a bunch<font color="#E5E5E5"> of data</font>

637
00:27:27,690 --> 00:27:32,520
and you want to work out<font color="#CCCCCC"> okay well what</font>

638
00:27:30,780 --> 00:27:34,860
kind of crypto is being used over this

639
00:27:32,520 --> 00:27:36,059
data you<font color="#CCCCCC"> want you want to without</font>

640
00:27:34,860 --> 00:27:37,139
looking through the source code let's

641
00:27:36,059 --> 00:27:38,879
say you don't<font color="#CCCCCC"> even</font><font color="#E5E5E5"> have the source code</font>

642
00:27:37,140 --> 00:27:40,650
let's say you can't even<font color="#E5E5E5"> look on the</font>

643
00:27:38,880 --> 00:27:44,640
device it's some web app somewhere and

644
00:27:40,650 --> 00:27:47,910
it's just black box and you want to work

645
00:27:44,640 --> 00:27:49,049
out what exactly<font color="#CCCCCC"> are they doing in terms</font>

646
00:27:47,910 --> 00:27:51,990
of the crypto are they doing something

647
00:27:49,049 --> 00:27:54,780
smart are they using something custom

648
00:27:51,990 --> 00:27:57,179
are they using a block cipher are they

649
00:27:54,780 --> 00:27:59,520
using a stream cipher are they using

650
00:27:57,179 --> 00:28:02,280
something that is considered good like

651
00:27:59,520 --> 00:28:06,179
AES but implemented badly like have they

652
00:28:02,280 --> 00:28:08,730
excitedly so the<font color="#E5E5E5"> first thing you want to</font>

653
00:28:06,179 --> 00:28:09,900
look<font color="#CCCCCC"> for is patterns if you see patterns</font>

654
00:28:08,730 --> 00:28:13,410
you know they're<font color="#E5E5E5"> doing something wrong</font>

655
00:28:09,900 --> 00:28:15,270
because proper encrypted data you should

656
00:28:13,410 --> 00:28:17,160
never see patterns it should all just

657
00:28:15,270 --> 00:28:18,660
look like purely<font color="#E5E5E5"> random gibberish so if</font>

658
00:28:17,160 --> 00:28:22,200
you start see these sort of repeated

659
00:28:18,660 --> 00:28:25,169
blocks of data or like repeated little

660
00:28:22,200 --> 00:28:26,730
sequences of bytes you can start<font color="#E5E5E5"> to work</font>

661
00:28:25,169 --> 00:28:30,120
out that maybe they're<font color="#CCCCCC"> doing something a</font>

662
00:28:26,730 --> 00:28:33,809
<font color="#E5E5E5">little bit wrong now one of these other</font>

663
00:28:30,120 --> 00:28:38,370
things is if you maybe change a value

664
00:28:33,809 --> 00:28:39,160
slightly in your plain text input so you

665
00:28:38,370 --> 00:28:40,479
can

666
00:28:39,160 --> 00:28:42,840
for all the input and it gives you this

667
00:28:40,480 --> 00:28:45,310
encrypted output so it's what's called

668
00:28:42,840 --> 00:28:46,629
it's a form of differential

669
00:28:45,310 --> 00:28:48,730
cryptanalysis because you're essentially

670
00:28:46,630 --> 00:28:50,530
taking what's coming in and preparing it

671
00:28:48,730 --> 00:28:53,620
what's coming out and<font color="#E5E5E5"> working out what</font>

672
00:28:50,530 --> 00:28:55,210
those changes are so essentially you

673
00:28:53,620 --> 00:28:56,739
want to make a small change in your

674
00:28:55,210 --> 00:28:58,570
input and see how<font color="#CCCCCC"> that changes</font><font color="#E5E5E5"> the</font>

675
00:28:56,740 --> 00:29:01,240
output now if you just see that this

676
00:28:58,570 --> 00:29:04,060
tiny little linear change in your input

677
00:29:01,240 --> 00:29:05,950
just makes this tiny little change in

678
00:29:04,060 --> 00:29:08,590
the output then<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> that they're</font>

679
00:29:05,950 --> 00:29:11,080
doing<font color="#E5E5E5"> something kind of unusual either</font>

680
00:29:08,590 --> 00:29:12,850
it's a stream cipher or it's<font color="#E5E5E5"> something</font>

681
00:29:11,080 --> 00:29:15,040
like repeated XOR because if you change

682
00:29:12,850 --> 00:29:16,449
one bit and one bit changes on the

683
00:29:15,040 --> 00:29:17,740
output you know that they're<font color="#CCCCCC"> doing</font>

684
00:29:16,450 --> 00:29:22,240
<font color="#CCCCCC">something linear that's going</font><font color="#E5E5E5"> to give</font><font color="#CCCCCC"> us</font>

685
00:29:17,740 --> 00:29:23,560
for<font color="#CCCCCC"> example an exclusive or operation so</font>

686
00:29:22,240 --> 00:29:25,270
if you've<font color="#CCCCCC"> got a single</font><font color="#E5E5E5"> bite input change</font>

687
00:29:23,560 --> 00:29:26,889
gives you a single bite output change

688
00:29:25,270 --> 00:29:30,490
you've either got a stream cipher or

689
00:29:26,890 --> 00:29:33,280
something crap like repeated XOR but

690
00:29:30,490 --> 00:29:34,930
then if you cycle to a new session and

691
00:29:33,280 --> 00:29:36,610
then try<font color="#CCCCCC"> and do the same</font><font color="#E5E5E5"> and you see</font>

692
00:29:34,930 --> 00:29:40,720
different values it might either be that

693
00:29:36,610 --> 00:29:42,669
they've changed the key yeah they've

694
00:29:40,720 --> 00:29:43,570
probably<font color="#CCCCCC"> change</font><font color="#E5E5E5"> the key but if they</font>

695
00:29:42,670 --> 00:29:46,420
don't<font color="#E5E5E5"> then you know it's robbing a</font>

696
00:29:43,570 --> 00:29:50,560
static key which is interesting or if

697
00:29:46,420 --> 00:29:51,640
you know it's<font color="#E5E5E5"> the same key somehow then</font>

698
00:29:50,560 --> 00:29:53,770
they're<font color="#E5E5E5"> not using something like an</font>

699
00:29:51,640 --> 00:29:55,840
initialization value initialization

700
00:29:53,770 --> 00:29:59,950
factor which then will also change the

701
00:29:55,840 --> 00:30:02,530
output of<font color="#E5E5E5"> the value so if you see that a</font>

702
00:29:59,950 --> 00:30:05,770
single input bytes change change the

703
00:30:02,530 --> 00:30:08,200
whole block about put so like maybe<font color="#E5E5E5"> 16</font>

704
00:30:05,770 --> 00:30:09,400
bytes or something or eight bytes you

705
00:30:08,200 --> 00:30:10,660
know that they're probably using a block

706
00:30:09,400 --> 00:30:13,450
cipher so the way<font color="#E5E5E5"> a block cipher works</font>

707
00:30:10,660 --> 00:30:15,880
is given a block of input a fixed length

708
00:30:13,450 --> 00:30:19,720
size of input it's not only<font color="#E5E5E5"> does it</font>

709
00:30:15,880 --> 00:30:21,010
alter the values but it also<font color="#CCCCCC"> permits</font><font color="#E5E5E5"> the</font>

710
00:30:19,720 --> 00:30:22,450
information around<font color="#CCCCCC"> is it there's two</font>

711
00:30:21,010 --> 00:30:23,920
concerts one's called<font color="#CCCCCC"> a confusion</font><font color="#E5E5E5"> the</font>

712
00:30:22,450 --> 00:30:25,930
other<font color="#CCCCCC"> one's called diffusion confusion</font>

713
00:30:23,920 --> 00:30:28,000
is about<font color="#E5E5E5"> taking a value and making it a</font>

714
00:30:25,930 --> 00:30:29,710
different<font color="#E5E5E5"> value diffusion is about</font>

715
00:30:28,000 --> 00:30:33,760
<font color="#E5E5E5">taking that value and moving it around</font>

716
00:30:29,710 --> 00:30:34,990
in<font color="#E5E5E5"> the block so or splitting it out into</font>

717
00:30:33,760 --> 00:30:36,370
its individual bits and then flipping

718
00:30:34,990 --> 00:30:37,900
those all around and<font color="#E5E5E5"> then messing with</font>

719
00:30:36,370 --> 00:30:40,300
them more and<font color="#E5E5E5"> more and more so by mixing</font>

720
00:30:37,900 --> 00:30:43,650
confusion and diffusion you get a half

721
00:30:40,300 --> 00:30:45,970
decent block cipher so it's I think

722
00:30:43,650 --> 00:30:47,760
Claude Claude Shannon is the one who

723
00:30:45,970 --> 00:30:50,470
came<font color="#E5E5E5"> up with that terminology I think</font>

724
00:30:47,760 --> 00:30:52,940
he's a smart guy

725
00:30:50,470 --> 00:30:54,169
so yeah if you see<font color="#E5E5E5"> this chunk about what</font>

726
00:30:52,940 --> 00:30:56,720
changing then it's probably a block

727
00:30:54,169 --> 00:30:57,830
cipher but if you do see that it's a

728
00:30:56,720 --> 00:31:03,139
<font color="#E5E5E5">block cipher but you know they've done</font>

729
00:30:57,830 --> 00:31:05,299
it wrong because if they did<font color="#E5E5E5"> it right</font>

730
00:31:03,139 --> 00:31:08,000
they would you be using a block cipher

731
00:31:05,299 --> 00:31:09,769
mode that causes all of that other

732
00:31:08,000 --> 00:31:13,070
information to change once you change

733
00:31:09,769 --> 00:31:15,919
one bit changes in a block should always

734
00:31:13,070 --> 00:31:17,570
permits so I<font color="#E5E5E5"> always sort of cascade</font>

735
00:31:15,919 --> 00:31:19,840
across to the rest of the blocks and

736
00:31:17,570 --> 00:31:22,460
change the information more so

737
00:31:19,840 --> 00:31:24,799
electronic code book mode ECB is the but

738
00:31:22,460 --> 00:31:26,929
most basic block cipher mode which<font color="#CCCCCC"> is</font>

739
00:31:24,799 --> 00:31:30,860
essentially<font color="#E5E5E5"> take every individual block</font>

740
00:31:26,929 --> 00:31:32,929
of data using the key encrypt each one

741
00:31:30,860 --> 00:31:34,309
separately using the transform the

742
00:31:32,929 --> 00:31:37,190
crypto transform which is like for

743
00:31:34,309 --> 00:31:43,100
example AAS or serpent or something like

744
00:31:37,190 --> 00:31:45,200
that<font color="#E5E5E5"> das you go through and and encrypt</font>

745
00:31:43,100 --> 00:31:46,340
each block separately but you<font color="#E5E5E5"> don't</font>

746
00:31:45,200 --> 00:31:47,659
castigate them together you<font color="#CCCCCC"> just leave</font>

747
00:31:46,340 --> 00:31:50,269
them all separately now there's a great

748
00:31:47,659 --> 00:31:51,559
image of this which you may<font color="#CCCCCC"> have</font><font color="#E5E5E5"> seen if</font>

749
00:31:50,269 --> 00:31:54,649
you've ever looked on the<font color="#CCCCCC"> Wikipedia</font><font color="#E5E5E5"> page</font>

750
00:31:51,559 --> 00:32:00,529
for block cipher modes if you encrypt a

751
00:31:54,649 --> 00:32:02,928
bitmap image with AES 256-bit AES in ECB

752
00:32:00,529 --> 00:32:05,210
mode and then you look<font color="#E5E5E5"> at the output the</font>

753
00:32:02,929 --> 00:32:06,980
bitmap header back on so it can actually

754
00:32:05,210 --> 00:32:09,710
be rendered and you load it up you<font color="#E5E5E5"> can</font>

755
00:32:06,980 --> 00:32:12,440
still tell it's a picture<font color="#E5E5E5"> you can still</font>

756
00:32:09,710 --> 00:32:14,929
tell like this they use the these tux

757
00:32:12,440 --> 00:32:16,429
the linux penguin as an example you can

758
00:32:14,929 --> 00:32:18,049
actually see that image you can you can

759
00:32:16,429 --> 00:32:20,059
still tell what it is the colors are all

760
00:32:18,049 --> 00:32:24,710
messed up but the reason<font color="#CCCCCC"> that is is</font>

761
00:32:20,059 --> 00:32:27,529
because the same bytes of input for a

762
00:32:24,710 --> 00:32:29,690
block will always produce the same bytes

763
00:32:27,529 --> 00:32:32,690
of output for a block if<font color="#CCCCCC"> you use the</font>

764
00:32:29,690 --> 00:32:35,149
same key so if you've got consecutive

765
00:32:32,690 --> 00:32:36,529
blocks that have the same plain text

766
00:32:35,149 --> 00:32:37,639
you'll<font color="#E5E5E5"> get the same ciphertext which</font>

767
00:32:36,529 --> 00:32:39,950
means you know something about that

768
00:32:37,639 --> 00:32:43,070
place<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> bad</font><font color="#CCCCCC"> idea so</font><font color="#E5E5E5"> because these</font>

769
00:32:39,950 --> 00:32:44,809
pictures have the same sort of color

770
00:32:43,070 --> 00:32:46,610
information for a block so if you've<font color="#CCCCCC"> got</font>

771
00:32:44,809 --> 00:32:48,860
a big chunk of white you can actually

772
00:32:46,610 --> 00:32:50,000
see that all these are the same and then

773
00:32:48,860 --> 00:32:51,620
when you<font color="#E5E5E5"> get a line you get this</font>

774
00:32:50,000 --> 00:32:53,419
transition where they're all different

775
00:32:51,620 --> 00:32:55,549
and it all kind of looks a bit messy and

776
00:32:53,419 --> 00:32:57,139
then it<font color="#E5E5E5"> goes back to</font><font color="#CCCCCC"> being same same</font>

777
00:32:55,549 --> 00:32:59,509
patterns over now again so the patterns

778
00:32:57,139 --> 00:33:01,668
<font color="#E5E5E5">of data between blocks don't change in</font>

779
00:32:59,509 --> 00:33:03,410
ECB mode there's a way around that and

780
00:33:01,669 --> 00:33:05,630
it's using a different mode for

781
00:33:03,410 --> 00:33:10,220
sample cycle block chaining<font color="#CCCCCC"> CBC which is</font>

782
00:33:05,630 --> 00:33:12,530
a much better<font color="#E5E5E5"> way</font><font color="#CCCCCC"> of doing it so you</font>

783
00:33:10,220 --> 00:33:14,840
know it's CBC mode if you change it and

784
00:33:12,530 --> 00:33:18,379
then<font color="#E5E5E5"> only one block changes you know</font>

785
00:33:14,840 --> 00:33:20,840
it's ECB mode if you change it that

786
00:33:18,380 --> 00:33:22,730
block changes and all of the blocks

787
00:33:20,840 --> 00:33:26,360
after it change but the ones before

788
00:33:22,730 --> 00:33:28,010
don't so if you can put<font color="#CCCCCC"> something like a</font>

789
00:33:26,360 --> 00:33:30,260
big string of days and<font color="#CCCCCC"> then</font><font color="#E5E5E5"> you flip one</font>

790
00:33:28,010 --> 00:33:32,750
to Abby and you see that everything

791
00:33:30,260 --> 00:33:34,760
<font color="#CCCCCC">after that gets changed you</font><font color="#E5E5E5"> know it's</font>

792
00:33:32,750 --> 00:33:40,310
probably<font color="#E5E5E5"> something like ECB mode where</font>

793
00:33:34,760 --> 00:33:41,900
<font color="#CCCCCC">you get this cascading effect so that's</font>

794
00:33:40,310 --> 00:33:44,629
what I mean<font color="#E5E5E5"> there by single</font><font color="#CCCCCC"> byte input</font>

795
00:33:41,900 --> 00:33:46,700
change is a current chunk plus all

796
00:33:44,630 --> 00:33:47,930
subsequent chunks all the blocks after

797
00:33:46,700 --> 00:33:49,670
that change because<font color="#CCCCCC"> you get</font><font color="#E5E5E5"> this</font>

798
00:33:47,930 --> 00:33:51,470
propagating thing that still means they

799
00:33:49,670 --> 00:33:53,900
did it wrong because it still should

800
00:33:51,470 --> 00:33:55,760
just all be completely random so yeah if

801
00:33:53,900 --> 00:33:58,370
you put in a single bite change and

802
00:33:55,760 --> 00:34:00,020
<font color="#CCCCCC">everything changes that probably</font><font color="#E5E5E5"> means</font>

803
00:33:58,370 --> 00:34:01,429
they're doing<font color="#E5E5E5"> something right because</font>

804
00:34:00,020 --> 00:34:03,410
what<font color="#CCCCCC"> that means is they're using an</font>

805
00:34:01,430 --> 00:34:05,570
initialization vector in there which<font color="#CCCCCC"> is</font>

806
00:34:03,410 --> 00:34:10,100
the idea<font color="#CCCCCC"> is that for every message you</font>

807
00:34:05,570 --> 00:34:12,679
choose this unique value this unique IV

808
00:34:10,100 --> 00:34:15,380
which then causes everything after that

809
00:34:12,679 --> 00:34:16,760
to become<font color="#E5E5E5"> permuted completely randomly</font>

810
00:34:15,380 --> 00:34:19,220
you can't work out what's going on<font color="#E5E5E5"> in</font>

811
00:34:16,760 --> 00:34:20,929
there so as I said with the CBC mode it

812
00:34:19,219 --> 00:34:23,810
changed these together the way it does

813
00:34:20,929 --> 00:34:26,090
that<font color="#E5E5E5"> is it take for every plaintext</font>

814
00:34:23,810 --> 00:34:28,040
block it x<font color="#E5E5E5"> ors it with the previous</font>

815
00:34:26,090 --> 00:34:30,080
ciphertext block for the first one

816
00:34:28,040 --> 00:34:32,600
because there isn't the previous one use

817
00:34:30,080 --> 00:34:34,429
the IV which then causes that to cascade

818
00:34:32,600 --> 00:34:36,230
across so essentially what what's

819
00:34:34,429 --> 00:34:37,668
<font color="#E5E5E5">happening is you it's a little bit like</font>

820
00:34:36,230 --> 00:34:40,400
a nonce value it's a<font color="#E5E5E5"> little bit like a</font>

821
00:34:37,668 --> 00:34:42,859
<font color="#E5E5E5">salt as long as it's unique everything</font>

822
00:34:40,400 --> 00:34:44,660
will always appear to be random so they

823
00:34:42,860 --> 00:34:45,890
do that right you'll never know what's

824
00:34:44,659 --> 00:34:47,000
going<font color="#CCCCCC"> on you won't</font><font color="#E5E5E5"> be able to work out</font>

825
00:34:45,889 --> 00:34:48,409
whether it's just strange cyber blocks

826
00:34:47,000 --> 00:34:50,270
life of what because it will all just

827
00:34:48,409 --> 00:34:54,259
look like gibberish but if you can see

828
00:34:50,270 --> 00:34:57,410
these changes these behaviors of the

829
00:34:54,260 --> 00:34:59,150
cryptography when you change small

830
00:34:57,410 --> 00:35:02,060
amounts of<font color="#E5E5E5"> information you can start</font><font color="#CCCCCC"> to</font>

831
00:34:59,150 --> 00:35:03,470
get a picture of what's happening in in

832
00:35:02,060 --> 00:35:05,330
that implementation so you can start to

833
00:35:03,470 --> 00:35:07,970
look out that<font color="#E5E5E5"> maybe they're using ECB</font>

834
00:35:05,330 --> 00:35:09,830
mode maybe they're using<font color="#E5E5E5"> CBC but they've</font>

835
00:35:07,970 --> 00:35:11,689
<font color="#CCCCCC">got a static IV so it's</font><font color="#E5E5E5"> not changing so</font>

836
00:35:09,830 --> 00:35:12,930
that this you get<font color="#E5E5E5"> that cascade effect</font>

837
00:35:11,690 --> 00:35:14,730
where you change one thing

838
00:35:12,930 --> 00:35:16,970
everything after changes but their

839
00:35:14,730 --> 00:35:21,630
values before stay the same so the<font color="#E5E5E5"> whole</font>

840
00:35:16,970 --> 00:35:23,069
kind of idea behind it is you treat<font color="#CCCCCC"> it</font>

841
00:35:21,630 --> 00:35:26,220
as a black box start sending it

842
00:35:23,069 --> 00:35:29,279
information map how it changes as you

843
00:35:26,220 --> 00:35:32,609
change things and you start to work out

844
00:35:29,280 --> 00:35:35,130
what's going on and the<font color="#E5E5E5"> final thing</font>

845
00:35:32,609 --> 00:35:37,920
there is the block size of the chunk so

846
00:35:35,130 --> 00:35:40,190
if you flip one bit and the whole block

847
00:35:37,920 --> 00:35:43,559
changes by working out<font color="#E5E5E5"> how much of that</font>

848
00:35:40,190 --> 00:35:45,300
Dave how much data changed you can see

849
00:35:43,559 --> 00:35:47,099
the block size which means you can

850
00:35:45,300 --> 00:35:48,480
narrow<font color="#E5E5E5"> that down too</font><font color="#CCCCCC"> okay well how many</font>

851
00:35:47,099 --> 00:35:51,240
block ciphers do I know<font color="#CCCCCC"> that have a</font>

852
00:35:48,480 --> 00:35:52,740
64-bit block size or a 128-bit block

853
00:35:51,240 --> 00:35:54,720
size so then you can start to<font color="#CCCCCC"> work out</font>

854
00:35:52,740 --> 00:35:57,149
maybe maybe they're using a s maybe

855
00:35:54,720 --> 00:36:00,680
they're using Blowfish movies in<font color="#CCCCCC"> das you</font>

856
00:35:57,150 --> 00:36:00,680
can start<font color="#CCCCCC"> to work out what's going</font><font color="#E5E5E5"> on</font>

857
00:36:01,220 --> 00:36:07,169
now decrypting the actual payload so as

858
00:36:05,730 --> 00:36:08,880
I said before it look like repeated X or

859
00:36:07,170 --> 00:36:10,650
so i just took those bites at<font color="#E5E5E5"> the bottom</font>

860
00:36:08,880 --> 00:36:13,200
and guessed that maybe they were like

861
00:36:10,650 --> 00:36:15,510
null bites so if there were no bites and

862
00:36:13,200 --> 00:36:16,680
then you XOR them with a key the result

863
00:36:15,510 --> 00:36:18,240
will just be<font color="#CCCCCC"> the key so they would be</font>

864
00:36:16,680 --> 00:36:20,250
just transmitting the key inside the

865
00:36:18,240 --> 00:36:22,890
packet in in the clear you could just

866
00:36:20,250 --> 00:36:24,150
see<font color="#CCCCCC"> it so when I did it</font><font color="#E5E5E5"> and excellent</font>

867
00:36:22,890 --> 00:36:25,379
everything with it<font color="#E5E5E5"> get bunch of zeros</font>

868
00:36:24,150 --> 00:36:28,020
<font color="#CCCCCC">and then get stuff that looks</font><font color="#E5E5E5"> like an</font>

869
00:36:25,380 --> 00:36:29,220
actual proper packet header and that to

870
00:36:28,020 --> 00:36:31,259
me<font color="#E5E5E5"> when okay yeah they're</font><font color="#CCCCCC"> definitely</font>

871
00:36:29,220 --> 00:36:32,970
doing repeated<font color="#CCCCCC"> Exel so I eventually</font>

872
00:36:31,260 --> 00:36:34,380
found packet structure in the code had a

873
00:36:32,970 --> 00:36:36,569
look around did some more intuitive

874
00:36:34,380 --> 00:36:40,950
analysis to guess the fields worked out

875
00:36:36,569 --> 00:36:44,940
what's going<font color="#E5E5E5"> on and this is what</font><font color="#CCCCCC"> it said</font>

876
00:36:40,950 --> 00:36:47,279
in the actual packet structure so packet

877
00:36:44,940 --> 00:36:49,079
length magic number Reserve Command flag

878
00:36:47,280 --> 00:36:50,579
error code and<font color="#E5E5E5"> Devon number so you</font>

879
00:36:49,079 --> 00:36:52,770
remember I said there was a 16-bit and

880
00:36:50,579 --> 00:36:54,660
32-bit integer that<font color="#CCCCCC"> I didn't know those</font>

881
00:36:52,770 --> 00:36:58,190
two at<font color="#E5E5E5"> the end now this is a</font><font color="#CCCCCC"> login</font>

882
00:36:54,660 --> 00:37:00,629
packet and the<font color="#E5E5E5"> username and password</font>

883
00:36:58,190 --> 00:37:03,359
were looked encrypted I<font color="#E5E5E5"> couldn't work</font>

884
00:37:00,630 --> 00:37:04,559
out what was going on now remember I

885
00:37:03,359 --> 00:37:09,089
said that<font color="#E5E5E5"> those two functions called</font>

886
00:37:04,559 --> 00:37:12,089
munge and those two static crypto keys

887
00:37:09,089 --> 00:37:15,380
inside there well it<font color="#CCCCCC"> turns out that if</font>

888
00:37:12,089 --> 00:37:18,839
you XOR the username with the first one

889
00:37:15,380 --> 00:37:20,490
you XOR the password with the other one

890
00:37:18,839 --> 00:37:22,558
you get the clear text username and

891
00:37:20,490 --> 00:37:24,580
password so<font color="#CCCCCC"> you can actually go through</font>

892
00:37:22,559 --> 00:37:26,750
and decrypt all that information

893
00:37:24,580 --> 00:37:28,370
so the<font color="#CCCCCC"> high-level open for you</font><font color="#E5E5E5"> here oh</font>

894
00:37:26,750 --> 00:37:29,930
yeah<font color="#E5E5E5"> and closing up I got pretty close</font>

895
00:37:28,370 --> 00:37:33,170
to working it out without looking at the

896
00:37:29,930 --> 00:37:36,230
sauce so I'm happy<font color="#E5E5E5"> about that so high</font>

897
00:37:33,170 --> 00:37:42,020
level overview so the handshake packets

898
00:37:36,230 --> 00:37:46,910
at the start used eh to exchange a key

899
00:37:42,020 --> 00:37:50,750
for the session that key is then used<font color="#CCCCCC"> to</font>

900
00:37:46,910 --> 00:37:52,640
encrypt the subsequent packet so it's

901
00:37:50,750 --> 00:37:56,440
using<font color="#E5E5E5"> this repeated</font><font color="#CCCCCC"> X or so-called</font>

902
00:37:52,640 --> 00:37:58,129
<font color="#CCCCCC">cipher and then the login packet is sent</font>

903
00:37:56,440 --> 00:37:59,900
contains the username and password

904
00:37:58,130 --> 00:38:03,050
obscured with that munching function and

905
00:37:59,900 --> 00:38:04,760
the<font color="#E5E5E5"> username and password whilst they</font>

906
00:38:03,050 --> 00:38:08,090
are<font color="#E5E5E5"> asking they're quite clearly</font>

907
00:38:04,760 --> 00:38:10,400
obviously<font color="#E5E5E5"> there they're not the ones</font>

908
00:38:08,090 --> 00:38:13,460
that we entered which is a<font color="#E5E5E5"> little bit</font>

909
00:38:10,400 --> 00:38:14,210
weird and it turns out that we<font color="#E5E5E5"> can do</font>

910
00:38:13,460 --> 00:38:15,770
some interesting things with that

911
00:38:14,210 --> 00:38:18,800
<font color="#E5E5E5">basically it comes out as a bunch of</font>

912
00:38:15,770 --> 00:38:21,860
hexadecimal in ascii and it looks kind

913
00:38:18,800 --> 00:38:25,430
of old so the impact here is if the use

914
00:38:21,860 --> 00:38:27,980
of user of HTTP we can use the traffic

915
00:38:25,430 --> 00:38:31,609
on port 30 10 which is<font color="#E5E5E5"> in the clear but</font>

916
00:38:27,980 --> 00:38:33,200
encrypted with their custom algorithm we

917
00:38:31,610 --> 00:38:34,820
can pop that crypto off quite easily

918
00:38:33,200 --> 00:38:36,439
just by watching for a single ping

919
00:38:34,820 --> 00:38:39,170
packet which then actually contains the

920
00:38:36,440 --> 00:38:42,380
damn keys inside the packet because it's

921
00:38:39,170 --> 00:38:44,390
x10 gives you that value then you can

922
00:38:42,380 --> 00:38:45,860
decrypt everything different<font color="#CCCCCC"> to all of</font>

923
00:38:44,390 --> 00:38:47,589
the traffic all the way back and you get

924
00:38:45,860 --> 00:38:51,050
<font color="#E5E5E5">the username and password they do it on</font>

925
00:38:47,590 --> 00:38:53,600
<font color="#E5E5E5">3008 so if they visited the applet that</font>

926
00:38:51,050 --> 00:38:57,170
and gone on via HTTPS it goes<font color="#E5E5E5"> alright</font>

927
00:38:53,600 --> 00:38:59,660
best<font color="#CCCCCC"> youth best</font><font color="#E5E5E5"> use port 3008 best best</font>

928
00:38:57,170 --> 00:39:03,260
be secure and then they go<font color="#E5E5E5"> through and</font>

929
00:38:59,660 --> 00:39:04,819
just<font color="#CCCCCC"> let any ssl certificate through so</font>

930
00:39:03,260 --> 00:39:07,910
you can just man in the middle<font color="#CCCCCC"> that pop</font>

931
00:39:04,820 --> 00:39:09,980
the crepes how off again you win but

932
00:39:07,910 --> 00:39:12,890
what are those logins the the weird ones

933
00:39:09,980 --> 00:39:14,180
that we can actually<font color="#E5E5E5"> quite that they</font>

934
00:39:12,890 --> 00:39:17,420
didn't look right well they're<font color="#CCCCCC"> not your</font>

935
00:39:14,180 --> 00:39:21,460
everyday logging so the accounts on the

936
00:39:17,420 --> 00:39:25,100
wire I like session IDs<font color="#E5E5E5"> so the username</font>

937
00:39:21,460 --> 00:39:27,670
so called<font color="#E5E5E5"> user name is two hashes a</font>

938
00:39:25,100 --> 00:39:30,110
bunch of hacks and then a null byte and

939
00:39:27,670 --> 00:39:33,920
the passwords are just a bunch of hacks

940
00:39:30,110 --> 00:39:35,810
again now if you log into those<font color="#CCCCCC"> you log</font>

941
00:39:33,920 --> 00:39:38,060
those in to the

942
00:39:35,810 --> 00:39:39,770
the normal<font color="#E5E5E5"> SSH so basically you login</font>

943
00:39:38,060 --> 00:39:40,880
<font color="#E5E5E5">over the panel then you've knew</font>

944
00:39:39,770 --> 00:39:42,170
something and sniffed somebody's

945
00:39:40,880 --> 00:39:44,780
connection and you've decrypted that

946
00:39:42,170 --> 00:39:46,580
<font color="#E5E5E5">traffic you then</font><font color="#CCCCCC"> take those those bits</font>

947
00:39:44,780 --> 00:39:50,870
<font color="#E5E5E5">of information and use them to log</font><font color="#CCCCCC"> into</font>

948
00:39:46,580 --> 00:39:52,160
<font color="#E5E5E5">the netscaler over over ssh and it drops</font>

949
00:39:50,870 --> 00:39:54,890
you straight in so you<font color="#E5E5E5"> just stole</font>

950
00:39:52,160 --> 00:39:57,649
somebody's session and you've got and<font color="#CCCCCC"> if</font>

951
00:39:54,890 --> 00:39:59,600
they've<font color="#E5E5E5"> got if the one if the person</font>

952
00:39:57,650 --> 00:40:01,850
that you were monitoring the<font color="#E5E5E5"> person</font>

953
00:39:59,600 --> 00:40:05,180
<font color="#CCCCCC">who's traffic he was stealing was the</font>

954
00:40:01,850 --> 00:40:06,799
superuser you type<font color="#CCCCCC"> shell you get root so</font>

955
00:40:05,180 --> 00:40:09,080
that's<font color="#E5E5E5"> your money shot right there you</font>

956
00:40:06,800 --> 00:40:15,940
win by sniffing the traffic or by

957
00:40:09,080 --> 00:40:19,880
<font color="#E5E5E5">man-in-the-middle in them any questions</font>

958
00:40:15,940 --> 00:40:21,050
and more<font color="#E5E5E5"> anime gifts yes just clear up</font>

959
00:40:19,880 --> 00:40:22,670
so this<font color="#CCCCCC"> is obviously occurring when the</font>

960
00:40:21,050 --> 00:40:24,620
more you know video<font color="#CCCCCC"> good</font><font color="#E5E5E5"> job reports so</font>

961
00:40:22,670 --> 00:40:27,460
it's only<font color="#CCCCCC"> the citrix java client</font>

962
00:40:24,620 --> 00:40:30,020
vulnerable is the default desktop client

963
00:40:27,460 --> 00:40:31,460
securing its this and<font color="#CCCCCC"> i don't know about</font>

964
00:40:30,020 --> 00:40:32,960
any of<font color="#E5E5E5"> the other science these are the</font>

965
00:40:31,460 --> 00:40:35,240
the job warmers the only one I looked at

966
00:40:32,960 --> 00:40:36,200
it may well be that the other<font color="#CCCCCC"> clients</font>

967
00:40:35,240 --> 00:40:38,000
are vulnerable it may well be that

968
00:40:36,200 --> 00:40:40,520
they're not<font color="#E5E5E5"> I would imagine the HTTP</font>

969
00:40:38,000 --> 00:40:42,380
HTML 5 1 probably wasn't because it's

970
00:40:40,520 --> 00:40:44,120
probably<font color="#E5E5E5"> just doing like Ajax calls back</font>

971
00:40:42,380 --> 00:40:45,860
into it I would<font color="#E5E5E5"> imagine that this in one</font>

972
00:40:44,120 --> 00:40:48,500
of the newer net scalars because they

973
00:40:45,860 --> 00:40:51,500
have got some slightly different admin

974
00:40:48,500 --> 00:40:53,840
panel stuff on there but the java the

975
00:40:51,500 --> 00:40:56,300
java stuff yet definitely vulnerable

976
00:40:53,840 --> 00:41:00,560
well was horrible they have now released

977
00:40:56,300 --> 00:41:03,470
a patch which fixes the ssl validation

978
00:41:00,560 --> 00:41:05,509
and fixes what<font color="#E5E5E5"> apparently fixes the the</font>

979
00:41:03,470 --> 00:41:07,310
the diffie-hellman stuff we haven't

980
00:41:05,510 --> 00:41:08,540
reviewed this yet they've said that

981
00:41:07,310 --> 00:41:10,340
<font color="#E5E5E5">they've released it and they said that</font>

982
00:41:08,540 --> 00:41:12,110
<font color="#E5E5E5">there's a patch out we haven't actually</font>

983
00:41:10,340 --> 00:41:13,190
had time to go back<font color="#CCCCCC"> and look at it</font>

984
00:41:12,110 --> 00:41:15,320
<font color="#E5E5E5">because we only had the conf call with</font>

985
00:41:13,190 --> 00:41:21,860
them at<font color="#E5E5E5"> four-thirty yesterday to verify</font>

986
00:41:15,320 --> 00:41:24,020
all of this so yeah and wheels what kind

987
00:41:21,860 --> 00:41:25,520
of tools to use to do the analysis and

988
00:41:24,020 --> 00:41:30,830
capture<font color="#E5E5E5"> the data and we play in things</font>

989
00:41:25,520 --> 00:41:32,509
so<font color="#CCCCCC"> I mainly just Wireshark and then in</font>

990
00:41:30,830 --> 00:41:35,120
order<font color="#E5E5E5"> to like mess with the data again I</font>

991
00:41:32,510 --> 00:41:36,950
just<font color="#CCCCCC"> wrote some custom stuff just to I</font>

992
00:41:35,120 --> 00:41:41,120
<font color="#E5E5E5">cannot take</font><font color="#CCCCCC"> it CTP sockets and start</font>

993
00:41:36,950 --> 00:41:43,970
sending data to them there are tools

994
00:41:41,120 --> 00:41:45,799
that you can use to do like binary out

995
00:41:43,970 --> 00:41:46,430
like on the wire manipulation I've not

996
00:41:45,800 --> 00:41:52,569
found a good one

997
00:41:46,430 --> 00:41:56,390
yet the one that I would use<font color="#E5E5E5"> if I had to</font>

998
00:41:52,569 --> 00:41:59,930
echo<font color="#E5E5E5"> Mirage it's a windows one so</font>

999
00:41:56,390 --> 00:42:01,578
<font color="#E5E5E5">basically it binds to the the packet</font>

1000
00:41:59,930 --> 00:42:02,569
functions and let you mess with stuff as

1001
00:42:01,579 --> 00:42:04,280
they're coming<font color="#E5E5E5"> in and</font><font color="#CCCCCC"> out there are a</font>

1002
00:42:02,569 --> 00:42:06,259
couple of ones<font color="#E5E5E5"> that do that but echo</font>

1003
00:42:04,280 --> 00:42:08,420
Mirage can also detect if you're using

1004
00:42:06,260 --> 00:42:10,400
standard ssl wrappers and then give you

1005
00:42:08,420 --> 00:42:12,020
the stuff before the ssl which is quite

1006
00:42:10,400 --> 00:42:14,240
nice<font color="#E5E5E5"> I like that feature doesn't work</font>

1007
00:42:12,020 --> 00:42:16,759
with<font color="#E5E5E5"> everything but it works with like</font>

1008
00:42:14,240 --> 00:42:20,750
the window standard API for doing ssl it

1009
00:42:16,760 --> 00:42:22,190
works<font color="#E5E5E5"> for I think couple of standard</font>

1010
00:42:20,750 --> 00:42:23,750
like open source libraries as well it

1011
00:42:22,190 --> 00:42:26,059
detects those and goes<font color="#E5E5E5"> ok</font><font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to</font>

1012
00:42:23,750 --> 00:42:29,349
hook before that rather than hooking the

1013
00:42:26,059 --> 00:42:29,349
packets end function<font color="#CCCCCC"> just quite</font><font color="#E5E5E5"> nice</font>

1014
00:42:35,710 --> 00:42:40,369
Dixie encryption how did you<font color="#CCCCCC"> broke up</font>

1015
00:42:37,940 --> 00:42:42,980
<font color="#CCCCCC">where did you find the key for that so</font>

1016
00:42:40,369 --> 00:42:45,430
the extra encryption is inside the so if

1017
00:42:42,980 --> 00:42:48,980
the ping packets that were getting<font color="#E5E5E5"> sent</font>

1018
00:42:45,430 --> 00:42:51,348
because it's because the way x all works

1019
00:42:48,980 --> 00:42:53,150
if you XOR a value with<font color="#E5E5E5"> zero you just</font>

1020
00:42:51,349 --> 00:42:54,410
get<font color="#E5E5E5"> that value so because the ping</font>

1021
00:42:53,150 --> 00:42:55,940
packets that<font color="#CCCCCC"> were being sent having</font>

1022
00:42:54,410 --> 00:42:57,740
encrypted payloads and those payloads

1023
00:42:55,940 --> 00:42:59,059
were always<font color="#CCCCCC"> zero it just</font><font color="#E5E5E5"> meant that they</font>

1024
00:42:57,740 --> 00:43:00,770
were<font color="#E5E5E5"> sending the key in the packet</font>

1025
00:42:59,059 --> 00:43:03,319
because you could literally just see it

1026
00:43:00,770 --> 00:43:05,000
essentially it but though if it was

1027
00:43:03,319 --> 00:43:06,589
still<font color="#E5E5E5"> a static value and it wasn't zero</font>

1028
00:43:05,000 --> 00:43:08,150
it still wouldn't matter because you

1029
00:43:06,589 --> 00:43:09,770
just X or it with whatever static well

1030
00:43:08,150 --> 00:43:12,559
you've got in the packet if you know the

1031
00:43:09,770 --> 00:43:16,549
data is there you just X or it back

1032
00:43:12,559 --> 00:43:17,510
against so<font color="#E5E5E5"> you get the ciphertext XOR it</font>

1033
00:43:16,549 --> 00:43:19,910
with<font color="#E5E5E5"> the blank text</font><font color="#CCCCCC"> and that just gives</font>

1034
00:43:17,510 --> 00:43:21,500
you the key so<font color="#E5E5E5"> you can just recover the</font>

1035
00:43:19,910 --> 00:43:22,578
key three doing that and by getting that

1036
00:43:21,500 --> 00:43:28,119
key you<font color="#CCCCCC"> can go back</font><font color="#E5E5E5"> and decrypt</font>

1037
00:43:22,579 --> 00:43:28,119
everything else anyone else

1038
00:43:28,760 --> 00:43:35,690
<font color="#E5E5E5">no one one last little bit sorry so just</font>

1039
00:43:33,740 --> 00:43:37,189
quick special thanks first off to Tim

1040
00:43:35,690 --> 00:43:38,840
for just throwing this at me and point

1041
00:43:37,190 --> 00:43:41,630
me in the<font color="#E5E5E5"> deep end well</font><font color="#CCCCCC"> a second week</font>

1042
00:43:38,840 --> 00:43:45,770
into the<font color="#E5E5E5"> job and also</font><font color="#CCCCCC"> to arendelle's</font>

1043
00:43:41,630 --> 00:43:47,210
well he's the guy who handles our vendor

1044
00:43:45,770 --> 00:43:49,190
disclosure stuff he's done a lot<font color="#CCCCCC"> of hard</font>

1045
00:43:47,210 --> 00:43:51,470
work over the<font color="#E5E5E5"> Citrix of keeping keeping</font>

1046
00:43:49,190 --> 00:43:52,760
in touch with them managing that he's

1047
00:43:51,470 --> 00:43:54,470
doing<font color="#CCCCCC"> a brilliant job and obviously the</font>

1048
00:43:52,760 --> 00:43:57,730
b-sides organizers for making us and

1049
00:43:54,470 --> 00:43:57,730
everybody<font color="#E5E5E5"> who voted for my talk</font>

