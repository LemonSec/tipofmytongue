1
00:00:01,760 --> 00:00:07,229
so a<font color="#E5E5E5"> bit about me I'm CTO continuum</font>

2
00:00:04,230 --> 00:00:08,940
security I spend my<font color="#CCCCCC"> time doing split</font>

3
00:00:07,230 --> 00:00:10,980
between<font color="#E5E5E5"> security consulting and</font>

4
00:00:08,940 --> 00:00:12,989
development work and that was part<font color="#E5E5E5"> of</font>

5
00:00:10,980 --> 00:00:15,450
<font color="#E5E5E5">the motivation</font><font color="#CCCCCC"> for creating the BDD</font>

6
00:00:12,990 --> 00:00:18,869
security project which is a security

7
00:00:15,450 --> 00:00:20,939
testing framework written in languages

8
00:00:18,869 --> 00:00:25,830
and concepts that developers understand

9
00:00:20,939 --> 00:00:27,180
but for testing security features right

10
00:00:25,830 --> 00:00:30,330
but let's<font color="#CCCCCC"> start of talking about</font><font color="#E5E5E5"> the</font>

11
00:00:27,180 --> 00:00:32,668
DevOps<font color="#CCCCCC"> ten minute introduction to DevOps</font>

12
00:00:30,330 --> 00:00:35,160
so we're going to start<font color="#CCCCCC"> with waterfall</font>

13
00:00:32,668 --> 00:00:37,620
and waterfall was characterized by

14
00:00:35,160 --> 00:00:40,739
developing software in long batch runs

15
00:00:37,620 --> 00:00:42,809
right with a lot of<font color="#E5E5E5"> upfront design a lot</font>

16
00:00:40,739 --> 00:00:45,269
of upfront development before<font color="#CCCCCC"> we had</font>

17
00:00:42,809 --> 00:00:46,890
something<font color="#E5E5E5"> that we could test so it</font><font color="#CCCCCC"> took</font>

18
00:00:45,270 --> 00:00:48,539
<font color="#E5E5E5">us a long time to get feedback</font><font color="#CCCCCC"> from our</font>

19
00:00:46,890 --> 00:00:51,809
<font color="#CCCCCC">tests to find out whether what we</font>

20
00:00:48,539 --> 00:00:54,030
developed actually works or not and this

21
00:00:51,809 --> 00:00:55,890
resulted in a high risk of project

22
00:00:54,030 --> 00:00:57,420
failure because things change in a

23
00:00:55,890 --> 00:00:59,850
project it takes two years<font color="#CCCCCC"> before you</font>

24
00:00:57,420 --> 00:01:03,030
have a product that you can<font color="#CCCCCC"> even test it</font>

25
00:00:59,850 --> 00:01:05,039
can become<font color="#E5E5E5"> quite problematic so a long</font>

26
00:01:03,030 --> 00:01:07,920
<font color="#E5E5E5">time agile and agile said well let's</font>

27
00:01:05,039 --> 00:01:10,680
break this big long batch run run up

28
00:01:07,920 --> 00:01:13,260
into<font color="#E5E5E5"> smaller batches and we'll write</font>

29
00:01:10,680 --> 00:01:16,049
individual features so we'll create a

30
00:01:13,260 --> 00:01:18,810
feature we can<font color="#E5E5E5"> test that feature and we</font>

31
00:01:16,049 --> 00:01:20,280
can pile them up into a release<font color="#E5E5E5"> and once</font>

32
00:01:18,810 --> 00:01:24,869
we're happy with the feature set we have

33
00:01:20,280 --> 00:01:27,450
<font color="#E5E5E5">we can release that those set of</font>

34
00:01:24,869 --> 00:01:30,150
features and once they released they

35
00:01:27,450 --> 00:01:32,520
then move<font color="#E5E5E5"> over to the ops team ops team</font>

36
00:01:30,150 --> 00:01:33,840
get to test it into various testing

37
00:01:32,520 --> 00:01:35,520
environments they have to build that

38
00:01:33,840 --> 00:01:37,770
environment deploy it into the

39
00:01:35,520 --> 00:01:39,869
environment<font color="#E5E5E5"> and then run the tests in</font>

40
00:01:37,770 --> 00:01:41,460
that environment and finally deploying

41
00:01:39,869 --> 00:01:44,490
into production which is the first<font color="#E5E5E5"> time</font>

42
00:01:41,460 --> 00:01:49,639
that our users get to see this these new

43
00:01:44,490 --> 00:01:53,429
features so there's a bottleneck where

44
00:01:49,640 --> 00:01:56,820
features become a release and then make

45
00:01:53,430 --> 00:01:58,950
the way to the users right what we care

46
00:01:56,820 --> 00:02:00,539
about<font color="#E5E5E5"> and what DevOps says is what we</font>

47
00:01:58,950 --> 00:02:03,509
want to do is get those features to our

48
00:02:00,540 --> 00:02:05,520
users as fast as<font color="#CCCCCC"> possible we want to</font>

49
00:02:03,509 --> 00:02:07,560
wait<font color="#CCCCCC"> for a whole batch release then send</font>

50
00:02:05,520 --> 00:02:09,780
<font color="#E5E5E5">it through this laborious QA process</font>

51
00:02:07,560 --> 00:02:12,150
build those environments configure those

52
00:02:09,780 --> 00:02:14,459
servers and get the the product released

53
00:02:12,150 --> 00:02:19,080
what we want to do instead<font color="#E5E5E5"> is extend the</font>

54
00:02:14,459 --> 00:02:21,270
agile cycle so we can deploy individual

55
00:02:19,080 --> 00:02:23,190
features so we can take<font color="#E5E5E5"> one feature and</font>

56
00:02:21,270 --> 00:02:25,110
put it through<font color="#CCCCCC"> the whole process have a</font>

57
00:02:23,190 --> 00:02:27,180
QA test that have it acceptance tested

58
00:02:25,110 --> 00:02:31,140
and finally get it deployed into the

59
00:02:27,180 --> 00:02:34,050
live environment the benefit<font color="#E5E5E5"> this gives</font>

60
00:02:31,140 --> 00:02:35,879
us is we reduce the feedback with time

61
00:02:34,050 --> 00:02:38,849
that<font color="#CCCCCC"> the feedback loops take to get from</font>

62
00:02:35,879 --> 00:02:40,859
testing and the<font color="#E5E5E5"> time it takes our users</font>

63
00:02:38,849 --> 00:02:42,238
to give us feedback<font color="#E5E5E5"> on those features so</font>

64
00:02:40,860 --> 00:02:44,010
we can<font color="#E5E5E5"> deploy things really quickly and</font>

65
00:02:42,239 --> 00:02:45,030
you can see that<font color="#E5E5E5"> the users like it or</font>

66
00:02:44,010 --> 00:02:48,750
they don't<font color="#E5E5E5"> like it or doesn't work</font>

67
00:02:45,030 --> 00:02:52,620
what's broken and in order to do this we

68
00:02:48,750 --> 00:02:55,260
really have<font color="#CCCCCC"> to work better together dev</font>

69
00:02:52,620 --> 00:02:57,120
and ops and the testing team really have

70
00:02:55,260 --> 00:02:59,879
to be<font color="#E5E5E5"> working together and we have to</font>

71
00:02:57,120 --> 00:03:02,340
get<font color="#E5E5E5"> rid</font><font color="#CCCCCC"> of this idea</font><font color="#E5E5E5"> of dev creating a</font>

72
00:02:59,879 --> 00:03:05,040
software product handing it to ops and

73
00:03:02,340 --> 00:03:06,959
then letting ops take<font color="#E5E5E5"> all the</font>

74
00:03:05,040 --> 00:03:10,769
responsibility for deploying it and for

75
00:03:06,959 --> 00:03:12,360
testing it and and so on so<font color="#CCCCCC"> in order to</font>

76
00:03:10,769 --> 00:03:16,319
do this<font color="#CCCCCC"> DevOps relies a lot on</font>

77
00:03:12,360 --> 00:03:19,950
automation testing automation acceptance

78
00:03:16,319 --> 00:03:21,510
<font color="#CCCCCC">tests QA tests automated configuration</font>

79
00:03:19,950 --> 00:03:23,299
of the environments in DevOps

80
00:03:21,510 --> 00:03:25,470
environments they're building entire

81
00:03:23,300 --> 00:03:27,299
testing environments out<font color="#E5E5E5"> of software</font>

82
00:03:25,470 --> 00:03:30,269
with virtual machines and with cloud

83
00:03:27,299 --> 00:03:36,150
infrastructure and automating the

84
00:03:30,269 --> 00:03:38,310
process of deployment so DevOps

85
00:03:36,150 --> 00:03:40,470
introduced well<font color="#E5E5E5"> continue</font><font color="#CCCCCC"> delivery</font>

86
00:03:38,310 --> 00:03:43,200
<font color="#E5E5E5">introduced this concept of a continuous</font>

87
00:03:40,470 --> 00:03:46,200
delivery pipeline where you feed

88
00:03:43,200 --> 00:03:47,909
insecure or<font color="#E5E5E5"> if you feed in features or</font>

89
00:03:46,200 --> 00:03:51,298
requirements on one side of the<font color="#CCCCCC"> pipeline</font>

90
00:03:47,909 --> 00:03:53,640
those features become code they are

91
00:03:51,299 --> 00:03:55,980
tested unit tested<font color="#E5E5E5"> their then passed</font>

92
00:03:53,640 --> 00:03:59,129
through deployed into a testing

93
00:03:55,980 --> 00:04:01,018
environment the testing<font color="#E5E5E5"> environment ven</font>

94
00:03:59,129 --> 00:04:03,179
runs acceptance tests QA test

95
00:04:01,019 --> 00:04:05,670
performance tests and finally it's

96
00:04:03,180 --> 00:04:11,159
deployed into production in one long

97
00:04:05,670 --> 00:04:13,679
continuous process and DevOps is what

98
00:04:11,159 --> 00:04:15,840
allows<font color="#CCCCCC"> us to do that</font><font color="#E5E5E5"> DevOps gives us the</font>

99
00:04:13,680 --> 00:04:18,810
ability to operate this continuous

100
00:04:15,840 --> 00:04:21,750
delivery pipeline so if you<font color="#CCCCCC"> think of</font>

101
00:04:18,810 --> 00:04:24,480
ramping up from doing pure agile all the

102
00:04:21,750 --> 00:04:26,190
way to doing continuous deployment via

103
00:04:24,480 --> 00:04:28,890
of DevOps you're doing naturally

104
00:04:26,190 --> 00:04:31,350
increases so if you're doing just a

105
00:04:28,890 --> 00:04:32,789
jalandhar integration you're still

106
00:04:31,350 --> 00:04:34,920
working<font color="#CCCCCC"> within</font><font color="#E5E5E5"> the development</font>

107
00:04:32,790 --> 00:04:37,020
environment developers are<font color="#CCCCCC"> building code</font>

108
00:04:34,920 --> 00:04:40,110
that code works in their environment and

109
00:04:37,020 --> 00:04:42,120
that's their end product they then give

110
00:04:40,110 --> 00:04:43,290
that code over to ops and ops can deploy

111
00:04:42,120 --> 00:04:45,480
it into the into the testing

112
00:04:43,290 --> 00:04:47,610
environments so at<font color="#E5E5E5"> this stage you don't</font>

113
00:04:45,480 --> 00:04:49,650
need to be doing<font color="#CCCCCC"> DevOps because you're</font>

114
00:04:47,610 --> 00:04:52,470
just handing over the software from

115
00:04:49,650 --> 00:04:53,549
development to the operations team once

116
00:04:52,470 --> 00:04:57,480
you start doing<font color="#CCCCCC"> continuous delivery</font>

117
00:04:53,550 --> 00:05:00,060
<font color="#E5E5E5">you're now delivering not just code but</font>

118
00:04:57,480 --> 00:05:04,620
code and a working environment and a set

119
00:05:00,060 --> 00:05:06,330
of<font color="#E5E5E5"> automated tests and you're delivering</font>

120
00:05:04,620 --> 00:05:08,100
that<font color="#E5E5E5"> into a pre production environment</font>

121
00:05:06,330 --> 00:05:10,289
so there's still<font color="#CCCCCC"> a manual component here</font>

122
00:05:08,100 --> 00:05:11,820
some type of test you<font color="#E5E5E5"> want to do</font>

123
00:05:10,290 --> 00:05:15,510
manually before deploying into

124
00:05:11,820 --> 00:05:18,330
production continued deployment goes one

125
00:05:15,510 --> 00:05:20,460
step further and says well we're going

126
00:05:18,330 --> 00:05:22,770
<font color="#E5E5E5">to automate the entire process and we're</font>

127
00:05:20,460 --> 00:05:25,229
going<font color="#E5E5E5"> to let developers write code have</font>

128
00:05:22,770 --> 00:05:28,049
it automatically tested through all the

129
00:05:25,230 --> 00:05:29,850
various environments and finally make

130
00:05:28,050 --> 00:05:32,580
its way<font color="#CCCCCC"> into production all in one</font>

131
00:05:29,850 --> 00:05:33,960
continuous process so if you're doing

132
00:05:32,580 --> 00:05:36,960
continuous delivery or continuous

133
00:05:33,960 --> 00:05:42,750
deployment you have to rely on DevOps to

134
00:05:36,960 --> 00:05:45,390
allow you to<font color="#CCCCCC"> do that so the challenge</font>

135
00:05:42,750 --> 00:05:48,180
the security is quite clear right<font color="#CCCCCC"> Devon</font>

136
00:05:45,390 --> 00:05:53,130
ops are saying we understand what we

137
00:05:48,180 --> 00:05:56,280
have to we understand what we have to

138
00:05:53,130 --> 00:05:58,170
deliver and we have we understand how we

139
00:05:56,280 --> 00:05:59,820
need to<font color="#E5E5E5"> deliver it in fact they</font>

140
00:05:58,170 --> 00:06:03,140
understand how to deliver<font color="#E5E5E5"> it so well</font>

141
00:05:59,820 --> 00:06:05,070
that they've automated<font color="#CCCCCC"> the whole process</font>

142
00:06:03,140 --> 00:06:07,440
that means they can allow their

143
00:06:05,070 --> 00:06:11,780
developers to effectively deploy into

144
00:06:07,440 --> 00:06:15,750
production and some real world examples

145
00:06:11,780 --> 00:06:17,789
amazon deploys every 11 seconds every 11

146
00:06:15,750 --> 00:06:21,030
seconds there's a new feature hitting

147
00:06:17,790 --> 00:06:24,170
production etsy does it 25 times a day

148
00:06:21,030 --> 00:06:26,250
and even go to UK does it 30 times<font color="#E5E5E5"> a day</font>

149
00:06:24,170 --> 00:06:28,710
so the question of security is quite

150
00:06:26,250 --> 00:06:31,650
clear if we have this capability if we

151
00:06:28,710 --> 00:06:34,940
can deploy that fast into production how

152
00:06:31,650 --> 00:06:34,940
can<font color="#E5E5E5"> we do</font><font color="#CCCCCC"> it securely</font>

153
00:06:34,950 --> 00:06:38,789
and i<font color="#CCCCCC"> think</font><font color="#E5E5E5"> the typical answer from a</font>

154
00:06:36,650 --> 00:06:40,950
traditional security team is more along

155
00:06:38,790 --> 00:06:42,720
the lines of a continuous anointment

156
00:06:40,950 --> 00:06:46,380
model rather than a continuous

157
00:06:42,720 --> 00:06:49,050
deployment model right there's no way we

158
00:06:46,380 --> 00:06:51,420
can do<font color="#CCCCCC"> security testing every 11 seconds</font>

159
00:06:49,050 --> 00:06:54,060
that's just not possible and there's<font color="#E5E5E5"> no</font>

160
00:06:51,420 --> 00:06:55,530
way security is going to allow a bit of

161
00:06:54,060 --> 00:06:59,690
code to hit production without

162
00:06:55,530 --> 00:06:59,690
undergoing adequate security testing I

163
00:07:01,280 --> 00:07:06,780
think if we want<font color="#E5E5E5"> to answer that question</font>

164
00:07:04,860 --> 00:07:08,400
how<font color="#CCCCCC"> can we do the security we need to</font>

165
00:07:06,780 --> 00:07:11,669
<font color="#E5E5E5">realize that security is really not that</font>

166
00:07:08,400 --> 00:07:14,130
special<font color="#E5E5E5"> I mean security is really a</font>

167
00:07:11,670 --> 00:07:17,100
subset of quality<font color="#E5E5E5"> control it's a special</font>

168
00:07:14,130 --> 00:07:19,320
type of<font color="#E5E5E5"> quality control so if we look</font><font color="#CCCCCC"> at</font>

169
00:07:17,100 --> 00:07:21,570
how is DevOps already implementing

170
00:07:19,320 --> 00:07:24,630
quality control within<font color="#CCCCCC"> the process we</font>

171
00:07:21,570 --> 00:07:27,690
can extend those processes to adapt to

172
00:07:24,630 --> 00:07:30,150
security and the first that way they're

173
00:07:27,690 --> 00:07:33,270
doing it is not a technical control at

174
00:07:30,150 --> 00:07:35,190
all it's a cultural control it's holding

175
00:07:33,270 --> 00:07:38,219
developers responsible for the quality

176
00:07:35,190 --> 00:07:41,660
of their code and the famous example of

177
00:07:38,220 --> 00:07:44,790
<font color="#E5E5E5">this is pagerduty the</font><font color="#CCCCCC"> DevOps companies</font>

178
00:07:41,660 --> 00:07:47,310
when the production application goes

179
00:07:44,790 --> 00:07:49,470
down at<font color="#CCCCCC"> 3am in the morning they don't</font>

180
00:07:47,310 --> 00:07:52,860
wake<font color="#CCCCCC"> up the</font><font color="#E5E5E5"> ops guy they wake up the</font>

181
00:07:49,470 --> 00:07:55,290
developer and all of a sudden quote code

182
00:07:52,860 --> 00:07:58,440
quality starts improving once you start

183
00:07:55,290 --> 00:08:00,810
holding the people responsible who write

184
00:07:58,440 --> 00:08:03,450
that code and I<font color="#E5E5E5"> think that's a natural</font>

185
00:08:00,810 --> 00:08:05,370
<font color="#CCCCCC">extension for security</font><font color="#E5E5E5"> we can hold</font>

186
00:08:03,450 --> 00:08:08,580
developers responsible for the security

187
00:08:05,370 --> 00:08:10,500
of their code and that<font color="#CCCCCC"> fits in well with</font>

188
00:08:08,580 --> 00:08:12,240
the<font color="#E5E5E5"> dev the DevOps culture that we're</font>

189
00:08:10,500 --> 00:08:15,000
all working together to the<font color="#E5E5E5"> same goal</font>

190
00:08:12,240 --> 00:08:18,570
there isn't an antagonistic relationship

191
00:08:15,000 --> 00:08:20,700
between security<font color="#E5E5E5"> and dev and test we all</font>

192
00:08:18,570 --> 00:08:23,810
want to get code into production as fast

193
00:08:20,700 --> 00:08:26,070
as possible<font color="#E5E5E5"> and as safely as possible</font>

194
00:08:23,810 --> 00:08:28,320
and<font color="#CCCCCC"> then brick that</font><font color="#E5E5E5"> brings me on to the</font>

195
00:08:26,070 --> 00:08:30,750
next one the<font color="#CCCCCC"> the idea that there</font><font color="#E5E5E5"> is no</font>

196
00:08:28,320 --> 00:08:32,630
them in the team<font color="#E5E5E5"> and this is something</font><font color="#CCCCCC"> I</font>

197
00:08:30,750 --> 00:08:35,460
<font color="#CCCCCC">think security is particularly guilty of</font>

198
00:08:32,630 --> 00:08:38,549
we're always referring to those crazy

199
00:08:35,460 --> 00:08:40,380
developers writing that code that really

200
00:08:38,549 --> 00:08:42,478
should never have<font color="#E5E5E5"> been in production we</font>

201
00:08:40,380 --> 00:08:45,450
need to get out of<font color="#E5E5E5"> that mindset and to</font>

202
00:08:42,479 --> 00:08:46,230
think<font color="#CCCCCC"> that we're all on</font><font color="#E5E5E5"> the same</font><font color="#CCCCCC"> team</font>

203
00:08:45,450 --> 00:08:48,740
and we<font color="#CCCCCC"> all</font>

204
00:08:46,230 --> 00:08:52,650
working towards the same goals

205
00:08:48,740 --> 00:08:54,930
continuous monitoring is a key<font color="#CCCCCC"> part of</font>

206
00:08:52,650 --> 00:08:56,400
DevOps and I'm not<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to touch it at</font>

207
00:08:54,930 --> 00:08:58,560
all because<font color="#E5E5E5"> i think it's an entire topic</font>

208
00:08:56,400 --> 00:09:00,329
on its own but the bit that<font color="#E5E5E5"> i do want to</font>

209
00:08:58,560 --> 00:09:03,420
get<font color="#CCCCCC"> into is testing and how can we</font>

210
00:09:00,330 --> 00:09:09,060
extend existing testing functionality to

211
00:09:03,420 --> 00:09:14,040
work for security so we typically think

212
00:09:09,060 --> 00:09:15,420
of tests as verification controls that's

213
00:09:14,040 --> 00:09:18,060
what a test does it verifies that

214
00:09:15,420 --> 00:09:21,089
something is true<font color="#CCCCCC"> the developers use</font>

215
00:09:18,060 --> 00:09:23,489
tests as specification in other words

216
00:09:21,090 --> 00:09:25,920
they write the<font color="#E5E5E5"> test before they write</font>

217
00:09:23,490 --> 00:09:28,980
the implementation this means that their

218
00:09:25,920 --> 00:09:30,740
tests act as their requirement they

219
00:09:28,980 --> 00:09:32,850
don't maintain a separate<font color="#CCCCCC"> document of</font>

220
00:09:30,740 --> 00:09:36,390
requirements they maintain a set of

221
00:09:32,850 --> 00:09:39,390
tests so they have self verifying

222
00:09:36,390 --> 00:09:42,240
requirements and we can do the same with

223
00:09:39,390 --> 00:09:46,590
security we can use<font color="#CCCCCC"> automated tests as</font>

224
00:09:42,240 --> 00:09:49,110
our security requirements if we do it

225
00:09:46,590 --> 00:09:51,450
this way we have tests that are code in

226
00:09:49,110 --> 00:09:53,220
other words<font color="#CCCCCC"> it's treated as code is</font>

227
00:09:51,450 --> 00:09:57,300
controlled s code it's uploaded to the

228
00:09:53,220 --> 00:09:59,220
source code repository we can control

229
00:09:57,300 --> 00:10:00,990
access to that code we can roll back to

230
00:09:59,220 --> 00:10:06,360
a previous test if one of our test fails

231
00:10:00,990 --> 00:10:08,640
and we have the capability to automate

232
00:10:06,360 --> 00:10:11,960
manual tests in other words do the

233
00:10:08,640 --> 00:10:14,760
manual test once and then record<font color="#E5E5E5"> it and</font>

234
00:10:11,960 --> 00:10:18,780
we can then<font color="#CCCCCC"> playback that recording as</font>

235
00:10:14,760 --> 00:10:21,660
an automated test automating the

236
00:10:18,780 --> 00:10:23,880
scanning process of course we rely a lot

237
00:10:21,660 --> 00:10:27,360
on scanning for to detect security

238
00:10:23,880 --> 00:10:30,420
issues and scanning itself is automated

239
00:10:27,360 --> 00:10:32,160
but the process<font color="#E5E5E5"> around it isn't right we</font>

240
00:10:30,420 --> 00:10:34,620
need a human to go and choose to perform

241
00:10:32,160 --> 00:10:36,630
a scan we need that human to interpret

242
00:10:34,620 --> 00:10:38,040
the results to remove false positives

243
00:10:36,630 --> 00:10:41,160
and then to decide what to do about

244
00:10:38,040 --> 00:10:46,170
<font color="#E5E5E5">those issues and we can build automation</font>

245
00:10:41,160 --> 00:10:48,000
around that entire process since they

246
00:10:46,170 --> 00:10:50,819
could look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> a first attempt to doing</font>

247
00:10:48,000 --> 00:10:52,890
this will use the developers tool<font color="#CCCCCC"> J unit</font>

248
00:10:50,820 --> 00:10:56,280
testing framework we use selenium

249
00:10:52,890 --> 00:10:57,689
webdriver to control the browser so we

250
00:10:56,280 --> 00:10:59,069
can programmatically<font color="#E5E5E5"> tell the browser to</font>

251
00:10:57,690 --> 00:11:01,320
do things for us

252
00:10:59,070 --> 00:11:04,080
and we create our specification we want

253
00:11:01,320 --> 00:11:05,940
to<font color="#E5E5E5"> change the session ID after</font><font color="#CCCCCC"> login so</font>

254
00:11:04,080 --> 00:11:08,370
we write this test first before we even

255
00:11:05,940 --> 00:11:13,020
write our app so we know what we need<font color="#E5E5E5"> to</font>

256
00:11:08,370 --> 00:11:16,170
build so first off driver get the login

257
00:11:13,020 --> 00:11:18,930
page of<font color="#E5E5E5"> of the site go and read the</font>

258
00:11:16,170 --> 00:11:21,420
session cookie then log in and log in

259
00:11:18,930 --> 00:11:25,170
tells us how to<font color="#E5E5E5"> login find the element</font>

260
00:11:21,420 --> 00:11:26,760
called user name and enter the<font color="#E5E5E5"> username</font>

261
00:11:25,170 --> 00:11:28,860
find the password into the<font color="#E5E5E5"> password</font>

262
00:11:26,760 --> 00:11:31,980
click login and the<font color="#CCCCCC"> browser is logged in</font>

263
00:11:28,860 --> 00:11:35,280
then go and<font color="#E5E5E5"> read the session ID again</font>

264
00:11:31,980 --> 00:11:38,490
and assert that the old session ID is

265
00:11:35,280 --> 00:11:41,550
not the same as<font color="#E5E5E5"> the new session ID so</font>

266
00:11:38,490 --> 00:11:46,290
<font color="#CCCCCC">this works we've encapsulated a security</font>

267
00:11:41,550 --> 00:11:50,130
requirement as a test but there are<font color="#E5E5E5"> some</font>

268
00:11:46,290 --> 00:11:52,349
<font color="#E5E5E5">problems so firstly the navigation logic</font>

269
00:11:50,130 --> 00:11:53,880
is embedded in the<font color="#E5E5E5"> test we've got a mix</font>

270
00:11:52,350 --> 00:11:56,160
here of two things we've<font color="#E5E5E5"> got our</font>

271
00:11:53,880 --> 00:11:58,650
security requirements and we've got the

272
00:11:56,160 --> 00:12:01,380
navigation of how to<font color="#E5E5E5"> actually log in in</font>

273
00:11:58,650 --> 00:12:04,860
which URLs to<font color="#E5E5E5"> go to which means that if</font>

274
00:12:01,380 --> 00:12:06,300
we<font color="#CCCCCC"> wanted to</font><font color="#E5E5E5"> apply our same test to a</font>

275
00:12:04,860 --> 00:12:10,530
different app we'd have to go and

276
00:12:06,300 --> 00:12:12,359
rewrite all our tests right the second

277
00:12:10,530 --> 00:12:14,819
problem is a technical issue with

278
00:12:12,360 --> 00:12:18,330
selenium it doesn't expose the HTTP API

279
00:12:14,820 --> 00:12:21,210
at all the<font color="#E5E5E5"> lowest level stuff we can do</font>

280
00:12:18,330 --> 00:12:22,800
is read a cookie through selenium we

281
00:12:21,210 --> 00:12:25,410
can't even read the HTTP response code

282
00:12:22,800 --> 00:12:27,060
from selenium so relying on a pure

283
00:12:25,410 --> 00:12:28,650
selenium solution to do this type of

284
00:12:27,060 --> 00:12:31,260
testing is not good<font color="#CCCCCC"> enough because</font><font color="#E5E5E5"> we</font>

285
00:12:28,650 --> 00:12:34,620
need to be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> access the HTTP layer</font>

286
00:12:31,260 --> 00:12:36,240
for security tests and the biggest

287
00:12:34,620 --> 00:12:39,270
<font color="#CCCCCC">problem is that it excludes</font>

288
00:12:36,240 --> 00:12:42,740
non-developers if we're in a dev ops

289
00:12:39,270 --> 00:12:46,770
team and we're working<font color="#E5E5E5"> developers</font>

290
00:12:42,740 --> 00:12:49,470
testing and ops<font color="#E5E5E5"> all together we all</font><font color="#CCCCCC"> need</font>

291
00:12:46,770 --> 00:12:50,850
to<font color="#E5E5E5"> understand the specification we all</font>

292
00:12:49,470 --> 00:12:53,550
need<font color="#CCCCCC"> to be able to understand if</font><font color="#E5E5E5"> it's</font>

293
00:12:50,850 --> 00:12:54,990
failing why it's failing this has

294
00:12:53,550 --> 00:12:56,189
written<font color="#E5E5E5"> in code that only a developer's</font>

295
00:12:54,990 --> 00:13:00,780
going to understand so it's going to

296
00:12:56,190 --> 00:13:04,470
exclude most of our team solving those

297
00:13:00,780 --> 00:13:07,439
issues is the motivation behind the<font color="#E5E5E5"> BDD</font>

298
00:13:04,470 --> 00:13:10,790
security testing framework so

299
00:13:07,440 --> 00:13:13,190
introduction to be DD this is a BDD

300
00:13:10,790 --> 00:13:17,000
vacation it's written<font color="#E5E5E5"> in a given when</font>

301
00:13:13,190 --> 00:13:19,370
then format uses<font color="#E5E5E5"> J behave and it's</font>

302
00:13:17,000 --> 00:13:22,070
written<font color="#E5E5E5"> in a natural language so we can</font>

303
00:13:19,370 --> 00:13:23,450
understand this right given the login

304
00:13:22,070 --> 00:13:25,550
page and the value of the session<font color="#CCCCCC"> cookie</font>

305
00:13:23,450 --> 00:13:27,770
<font color="#CCCCCC">is noted when the default user logs in</font>

306
00:13:25,550 --> 00:13:29,479
with credentials from this text file<font color="#E5E5E5"> and</font>

307
00:13:27,770 --> 00:13:30,350
the user is logged in then<font color="#E5E5E5"> the</font><font color="#CCCCCC"> value of</font>

308
00:13:29,480 --> 00:13:32,120
the session cookie issued after

309
00:13:30,350 --> 00:13:34,360
authentication should be different from

310
00:13:32,120 --> 00:13:36,230
that of<font color="#E5E5E5"> the previously issued session ID</font>

311
00:13:34,360 --> 00:13:39,560
for everybody who<font color="#E5E5E5"> understands what a</font>

312
00:13:36,230 --> 00:13:42,740
session ID is that<font color="#CCCCCC"> makes sense and this</font>

313
00:13:39,560 --> 00:13:45,760
is executable there's<font color="#CCCCCC"> Java backing every</font>

314
00:13:42,740 --> 00:13:45,760
one of these<font color="#E5E5E5"> lines</font>

315
00:14:03,370 --> 00:14:13,450
<font color="#E5E5E5">okay so this is a</font><font color="#CCCCCC"> bdd port scanner which</font>

316
00:14:10,690 --> 00:14:15,550
looks like<font color="#CCCCCC"> this again this</font><font color="#E5E5E5"> is a</font>

317
00:14:13,450 --> 00:14:17,770
specification only the required ports

318
00:14:15,550 --> 00:14:22,839
should be open given the target host

319
00:14:17,770 --> 00:14:26,740
when TCP ports from 1 to 4 430 skank we

320
00:14:22,839 --> 00:14:29,500
can make this 500 so we<font color="#E5E5E5"> can change</font>

321
00:14:26,740 --> 00:14:34,270
parameters within the natural language

322
00:14:29,500 --> 00:14:37,330
rules we can use<font color="#CCCCCC"> 5 threads and a time</font>

323
00:14:34,270 --> 00:14:38,589
out of 300<font color="#E5E5E5"> milliseconds</font><font color="#CCCCCC"> so when the open</font>

324
00:14:37,330 --> 00:14:40,450
ports are selected then only the

325
00:14:38,589 --> 00:14:50,310
following<font color="#E5E5E5"> ports should be open port 80</font>

326
00:14:40,450 --> 00:14:50,310
and 443 so we can<font color="#E5E5E5"> run this scenario</font>

327
00:15:03,300 --> 00:15:12,209
and we have test failure we expected a

328
00:15:08,790 --> 00:15:17,939
collection containing 80 and 443 instead

329
00:15:12,209 --> 00:15:22,380
we got 22 and<font color="#E5E5E5"> 80 and the test failed our</font>

330
00:15:17,940 --> 00:15:25,050
specification failed so that's quite<font color="#E5E5E5"> a</font>

331
00:15:22,380 --> 00:15:26,579
rudimentary port scanner but from<font color="#E5E5E5"> a</font>

332
00:15:25,050 --> 00:15:28,620
DevOps point of view and<font color="#E5E5E5"> from a process</font>

333
00:15:26,579 --> 00:15:30,060
point of view it is<font color="#E5E5E5"> I think a bit more</font>

334
00:15:28,620 --> 00:15:33,149
<font color="#CCCCCC">interesting than</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> like n map</font>

335
00:15:30,060 --> 00:15:35,040
and a human because<font color="#E5E5E5"> we write this first</font>

336
00:15:33,149 --> 00:15:36,209
so the ops guy<font color="#CCCCCC"> he needs</font><font color="#E5E5E5"> to go and build</font>

337
00:15:35,040 --> 00:15:38,610
the server and configure<font color="#CCCCCC"> the firewall</font>

338
00:15:36,209 --> 00:15:42,449
knows beforehand what he needs<font color="#E5E5E5"> to</font>

339
00:15:38,610 --> 00:15:43,890
configure this is his spec the

340
00:15:42,450 --> 00:15:47,190
requirements understandable by everyone

341
00:15:43,890 --> 00:15:52,290
the requirement itself is self verifying

342
00:15:47,190 --> 00:15:55,110
and we can fail the build if our

343
00:15:52,290 --> 00:15:56,819
requirement is not met so imagine that

344
00:15:55,110 --> 00:15:58,920
<font color="#CCCCCC">continuous delivery</font><font color="#E5E5E5"> pipeline with a new</font>

345
00:15:56,820 --> 00:16:00,570
feature going in if our tests are

346
00:15:58,920 --> 00:16:02,939
running in<font color="#E5E5E5"> that pipeline and one of our</font>

347
00:16:00,570 --> 00:16:04,890
test fails we can fail the build we can

348
00:16:02,940 --> 00:16:06,600
block the pipeline say well this is<font color="#E5E5E5"> not</font>

349
00:16:04,890 --> 00:16:11,550
going<font color="#E5E5E5"> into production because our</font>

350
00:16:06,600 --> 00:16:14,370
expectation<font color="#E5E5E5"> is not met so a bit</font><font color="#CCCCCC"> more</font>

351
00:16:11,550 --> 00:16:17,040
<font color="#E5E5E5">about the BDD security framework it's</font>

352
00:16:14,370 --> 00:16:22,500
written in selenium and it uses OS zap

353
00:16:17,040 --> 00:16:24,660
proxy<font color="#CCCCCC"> to do the HTTP stuff and using</font>

354
00:16:22,500 --> 00:16:26,820
those two things we can<font color="#CCCCCC"> mimic anything</font>

355
00:16:24,660 --> 00:16:28,890
that a manual penetration tester can do

356
00:16:26,820 --> 00:16:31,079
so we can<font color="#E5E5E5"> control the browser we can</font>

357
00:16:28,890 --> 00:16:33,360
control<font color="#E5E5E5"> the proxy programmatically so we</font>

358
00:16:31,079 --> 00:16:35,969
can recreate anything that a manual web

359
00:16:33,360 --> 00:16:37,890
app tester would do<font color="#CCCCCC"> tests are</font>

360
00:16:35,970 --> 00:16:39,899
understandable yep it<font color="#E5E5E5"> fits into the dev</font>

361
00:16:37,890 --> 00:16:41,160
workflow and obviously into the

362
00:16:39,899 --> 00:16:44,220
continuous delivery continuous

363
00:16:41,160 --> 00:16:46,170
integration pipeline the logic of the

364
00:16:44,220 --> 00:16:51,660
tests is independent from<font color="#E5E5E5"> the navigation</font>

365
00:16:46,170 --> 00:16:54,540
code so every BDD test that is run needs

366
00:16:51,660 --> 00:16:56,610
its own navigation code for that app but

367
00:16:54,540 --> 00:16:58,620
that code<font color="#CCCCCC"> is in a separate file so</font><font color="#E5E5E5"> we</font>

368
00:16:56,610 --> 00:16:59,940
have reusable tests we can take the same

369
00:16:58,620 --> 00:17:01,920
test and run it on a number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> different</font>

370
00:16:59,940 --> 00:17:06,990
apps and we just have to change<font color="#E5E5E5"> the code</font>

371
00:17:01,920 --> 00:17:10,849
in one place I think it's easiest to

372
00:17:06,990 --> 00:17:10,849
understand it through a demonstration

373
00:17:12,599 --> 00:17:24,359
right so the app we're going to test is

374
00:17:15,369 --> 00:17:24,359
<font color="#E5E5E5">this one very simple app offers log in</font>

375
00:17:24,690 --> 00:17:31,480
and<font color="#CCCCCC"> you can see</font><font color="#E5E5E5"> the list of tasks you</font>

376
00:17:28,960 --> 00:17:35,700
can<font color="#E5E5E5"> type searches in you can search for</font>

377
00:17:31,480 --> 00:17:41,290
things click on your profile and so on

378
00:17:35,700 --> 00:17:43,450
<font color="#E5E5E5">okay so very basic app so in order to</font>

379
00:17:41,290 --> 00:17:44,710
configure this for BDD security you

380
00:17:43,450 --> 00:17:47,020
would check out the video security

381
00:17:44,710 --> 00:17:51,700
project each web app gets its own copy

382
00:17:47,020 --> 00:17:53,980
of the BD security tests first thing we

383
00:17:51,700 --> 00:17:56,500
need to configure is the config file we

384
00:17:53,980 --> 00:17:59,140
need to decide which browsers we want to

385
00:17:56,500 --> 00:18:01,030
use to test at the moment support chrome

386
00:17:59,140 --> 00:18:02,650
and firefox and chrome is quite a bit

387
00:18:01,030 --> 00:18:05,080
faster so i'm going<font color="#E5E5E5"> to use chrome over</font>

388
00:18:02,650 --> 00:18:06,580
here it uses two browsers one of them

389
00:18:05,080 --> 00:18:08,679
configured for zap and one of<font color="#E5E5E5"> them</font>

390
00:18:06,580 --> 00:18:10,870
<font color="#E5E5E5">without that so because</font><font color="#CCCCCC"> that was a bit</font>

391
00:18:08,680 --> 00:18:12,700
slow<font color="#E5E5E5"> for some things if we don't need to</font>

392
00:18:10,870 --> 00:18:16,870
read the HTTP layer we don't use that

393
00:18:12,700 --> 00:18:18,820
browser we use the regular browser we

394
00:18:16,870 --> 00:18:21,129
configure the base URL so this<font color="#E5E5E5"> is just</font>

395
00:18:18,820 --> 00:18:23,620
<font color="#E5E5E5">for convenience sake in our tests we can</font>

396
00:18:21,130 --> 00:18:28,150
just refer<font color="#E5E5E5"> to that part of the URL as</font>

397
00:18:23,620 --> 00:18:32,110
our web app as a secure URL for<font color="#E5E5E5"> HTTPS</font>

398
00:18:28,150 --> 00:18:35,320
and here is a<font color="#E5E5E5"> Java class file that we</font>

399
00:18:32,110 --> 00:18:37,840
need<font color="#E5E5E5"> to create that contains the</font>

400
00:18:35,320 --> 00:18:39,159
navigation code for our app so i'm going

401
00:18:37,840 --> 00:18:44,129
to create a new<font color="#E5E5E5"> one error will call it</font>

402
00:18:39,160 --> 00:18:44,130
be signs besides<font color="#CCCCCC"> London</font>

403
00:18:51,840 --> 00:18:56,908
yes a new file besides London we need to

404
00:18:54,299 --> 00:18:59,490
tell it<font color="#E5E5E5"> what the session ID is when you</font>

405
00:18:56,909 --> 00:19:01,529
tell who the users are so in this case

406
00:18:59,490 --> 00:19:04,500
we would want at least two users from

407
00:19:01,529 --> 00:19:07,049
each role yeah so here we've got Alice

408
00:19:04,500 --> 00:19:10,289
and Bob for normal users in admin who's

409
00:19:07,049 --> 00:19:11,908
an adventure to the user and some other

410
00:19:10,289 --> 00:19:13,740
configuration options most importantly

411
00:19:11,909 --> 00:19:15,779
we need to tell it<font color="#E5E5E5"> where zap is</font>

412
00:19:13,740 --> 00:19:20,720
listening so I've already got zapped up

413
00:19:15,779 --> 00:19:23,549
and running here listening on localhost

414
00:19:20,720 --> 00:19:36,929
<font color="#CCCCCC">ok so the</font><font color="#E5E5E5"> next bit of configuration is</font>

415
00:19:23,549 --> 00:19:39,179
to create this file so we extend a base

416
00:19:36,929 --> 00:19:40,679
class which is web application with free

417
00:19:39,179 --> 00:19:42,419
testing web application at the moment

418
00:19:40,679 --> 00:19:44,940
the framework at the<font color="#E5E5E5"> moment the</font>

419
00:19:42,419 --> 00:19:46,740
framework only test web apps but it will

420
00:19:44,940 --> 00:19:48,600
<font color="#CCCCCC">be able</font><font color="#E5E5E5"> to support web services or</font>

421
00:19:46,740 --> 00:19:52,230
anything with an HTTP communication

422
00:19:48,600 --> 00:19:55,168
layer so right in our web apps and we

423
00:19:52,230 --> 00:19:57,090
will implement interfaces that describe

424
00:19:55,169 --> 00:19:59,549
the functionality of our app so this

425
00:19:57,090 --> 00:20:02,639
gives us independence of<font color="#CCCCCC"> our tests so</font>

426
00:19:59,549 --> 00:20:04,950
for example they are<font color="#CCCCCC"> built-in interfaces</font>

427
00:20:02,640 --> 00:20:08,399
for I<font color="#E5E5E5"> login for any app that offers</font>

428
00:20:04,950 --> 00:20:12,149
login for<font color="#CCCCCC"> I log out for any app that</font>

429
00:20:08,399 --> 00:20:14,959
offers<font color="#CCCCCC"> logout we'll get our IDE to</font>

430
00:20:12,149 --> 00:20:14,959
complete that for<font color="#CCCCCC"> us</font>

431
00:20:21,700 --> 00:20:26,840
okay so we need<font color="#E5E5E5"> to provide these methods</font>

432
00:20:24,559 --> 00:20:28,940
we need to tell the framework how to

433
00:20:26,840 --> 00:20:30,678
open the login page how<font color="#E5E5E5"> to login how to</font>

434
00:20:28,940 --> 00:20:35,029
logout and how to<font color="#E5E5E5"> determine whether we</font>

435
00:20:30,679 --> 00:20:37,880
are logged in a lot and this<font color="#E5E5E5"> is not that</font>

436
00:20:35,029 --> 00:20:41,980
hard with selenium so to open the login

437
00:20:37,880 --> 00:20:47,770
page we just need to access that URL

438
00:20:41,980 --> 00:20:47,770
which is quite easy with selenium get

439
00:20:51,039 --> 00:20:58,190
like that now we're on the login<font color="#E5E5E5"> page we</font>

440
00:20:55,279 --> 00:21:00,080
need to tell it how to login and since

441
00:20:58,190 --> 00:21:03,049
how to login is a bit complex we can use

442
00:21:00,080 --> 00:21:07,820
selenium<font color="#CCCCCC"> IDE which is a browser</font><font color="#E5E5E5"> plug-in</font>

443
00:21:03,049 --> 00:21:11,149
for 55 frogs that will make this easier

444
00:21:07,820 --> 00:21:15,379
for us so it will record our actions and

445
00:21:11,149 --> 00:21:19,279
save them as code so on the login form

446
00:21:15,380 --> 00:21:22,700
I'm Bob I login<font color="#CCCCCC"> with password and I</font>

447
00:21:19,279 --> 00:21:25,850
click login so those actions are stored

448
00:21:22,700 --> 00:21:28,700
by selenium<font color="#CCCCCC"> IDE in the native Cellini's</font>

449
00:21:25,850 --> 00:21:30,678
language and you can then set the

450
00:21:28,700 --> 00:21:33,020
clipboard to whichever whichever

451
00:21:30,679 --> 00:21:35,090
language you want to<font color="#E5E5E5"> export to now case</font>

452
00:21:33,020 --> 00:21:39,649
java j unit for you can also<font color="#E5E5E5"> use a ruby</font>

453
00:21:35,090 --> 00:21:42,799
or whatever you're familiar with so we

454
00:21:39,649 --> 00:21:47,059
can<font color="#CCCCCC"> then paste this into the login</font>

455
00:21:42,799 --> 00:21:49,399
function import that and we have<font color="#CCCCCC"> login</font>

456
00:21:47,059 --> 00:21:51,799
almost working so the login function

457
00:21:49,399 --> 00:21:53,779
takes a generic credentials objects we

458
00:21:51,799 --> 00:21:56,299
want to<font color="#CCCCCC"> use a username</font><font color="#E5E5E5"> and password so</font>

459
00:21:53,779 --> 00:22:01,820
<font color="#CCCCCC">we just need to convert that to a new</font>

460
00:21:56,299 --> 00:22:03,320
user false credentials we don't want to

461
00:22:01,820 --> 00:22:08,918
<font color="#CCCCCC">log in as Bob every</font><font color="#E5E5E5"> time we want to</font>

462
00:22:03,320 --> 00:22:08,918
<font color="#E5E5E5">login as our credentials get</font><font color="#CCCCCC"> username</font>

463
00:22:09,730 --> 00:22:16,840
get<font color="#CCCCCC"> password and click and that's it</font>

464
00:22:13,490 --> 00:22:19,520
we've got a login function for our appt

465
00:22:16,840 --> 00:22:22,158
next is quite an important one is logged

466
00:22:19,520 --> 00:22:23,899
in the framework often calls is logged

467
00:22:22,159 --> 00:22:25,850
in to<font color="#E5E5E5"> find out whether the users</font>

468
00:22:23,899 --> 00:22:27,379
actually currently logged in or not so

469
00:22:25,850 --> 00:22:28,639
<font color="#E5E5E5">we need some way to determine that and</font>

470
00:22:27,380 --> 00:22:30,650
this is something that you'll<font color="#CCCCCC"> have to</font>

471
00:22:28,640 --> 00:22:33,560
determine for the specific app

472
00:22:30,650 --> 00:22:38,690
outside<font color="#CCCCCC"> of the time so I know that if we</font>

473
00:22:33,560 --> 00:22:40,190
access the URL task list then I see the

474
00:22:38,690 --> 00:22:42,830
word welcome here and that doesn't

475
00:22:40,190 --> 00:22:54,680
<font color="#CCCCCC">happen if I'm</font><font color="#E5E5E5"> not logged in so we can</font>

476
00:22:42,830 --> 00:23:00,139
code that up as driver don't get get the

477
00:22:54,680 --> 00:23:05,390
task list then if get page source

478
00:23:00,140 --> 00:23:12,080
contains the word welcome then return

479
00:23:05,390 --> 00:23:15,320
true in all other cases return false and

480
00:23:12,080 --> 00:23:26,600
<font color="#E5E5E5">logout</font><font color="#CCCCCC"> is the final one this is</font><font color="#E5E5E5"> going to</font>

481
00:23:15,320 --> 00:23:28,639
be<font color="#E5E5E5"> just a simple get user log out right</font>

482
00:23:26,600 --> 00:23:31,419
so that's the configuration that we have

483
00:23:28,640 --> 00:23:34,130
to do for every app that we want to<font color="#E5E5E5"> test</font>

484
00:23:31,420 --> 00:23:37,010
but once that configuration is done you

485
00:23:34,130 --> 00:23:39,220
can run the pre written tests against

486
00:23:37,010 --> 00:23:44,780
their configuration so let's run the

487
00:23:39,220 --> 00:23:47,780
authentication story for example so they

488
00:23:44,780 --> 00:23:50,360
<font color="#CCCCCC">just did the j behav lingo hear a story</font>

489
00:23:47,780 --> 00:23:52,850
is a set of scenarios and each scenario

490
00:23:50,360 --> 00:23:57,909
is a requirement so right<font color="#E5E5E5"> here</font><font color="#CCCCCC"> I'm going</font>

491
00:23:52,850 --> 00:24:06,290
to run a story the authentication story

492
00:23:57,910 --> 00:24:09,710
wrong it<font color="#CCCCCC"> goes and fires up the one</font>

493
00:24:06,290 --> 00:24:11,629
chrome instance that's not using zap the

494
00:24:09,710 --> 00:24:18,410
other instance is and runs through all

495
00:24:11,630 --> 00:24:21,890
<font color="#CCCCCC">the tests</font><font color="#E5E5E5"> and we're done and we have a</font>

496
00:24:18,410 --> 00:24:23,720
report of our authentication stories one

497
00:24:21,890 --> 00:24:26,300
successful five have failed and two<font color="#E5E5E5"> were</font>

498
00:24:23,720 --> 00:24:28,360
excluded so we can see the details of

499
00:24:26,300 --> 00:24:28,360
<font color="#E5E5E5">that</font>

500
00:24:30,300 --> 00:24:35,460
our first scenario password should be

501
00:24:32,310 --> 00:24:37,200
case sensitive obviously so when the

502
00:24:35,460 --> 00:24:38,670
default user logs in then the users

503
00:24:37,200 --> 00:24:40,320
logged in when the case of the password

504
00:24:38,670 --> 00:24:42,480
is changed and<font color="#E5E5E5"> the user logs in from a</font>

505
00:24:40,320 --> 00:24:45,629
fresh page then the user is not logged

506
00:24:42,480 --> 00:24:49,710
<font color="#E5E5E5">in but in this case the user was test</font>

507
00:24:45,630 --> 00:24:52,260
failure our requirement is not met the

508
00:24:49,710 --> 00:24:56,970
login form itself is not presented<font color="#E5E5E5"> over</font>

509
00:24:52,260 --> 00:25:01,070
HTTPS we expected to see an HTTPS URL

510
00:24:56,970 --> 00:25:06,540
instead we saw an HTTP URL failure and

511
00:25:01,070 --> 00:25:08,340
so on<font color="#CCCCCC"> so you can run the authentication</font>

512
00:25:06,540 --> 00:25:10,440
test out the box with this type of

513
00:25:08,340 --> 00:25:14,610
configuration you can also run the

514
00:25:10,440 --> 00:25:16,470
session management tests<font color="#E5E5E5"> tests that log</font>

515
00:25:14,610 --> 00:25:20,850
<font color="#E5E5E5">out works invalidate the session when</font>

516
00:25:16,470 --> 00:25:22,710
the user logs out I set the secure<font color="#E5E5E5"> flag</font>

517
00:25:20,850 --> 00:25:25,980
<font color="#E5E5E5">my session cookie set the HTTP I Nick</font>

518
00:25:22,710 --> 00:25:28,260
flag on the session cookie and so on<font color="#CCCCCC"> so</font>

519
00:25:25,980 --> 00:25:29,730
these r QA e type of test these<font color="#E5E5E5"> are</font>

520
00:25:28,260 --> 00:25:33,210
functional security things that you'd

521
00:25:29,730 --> 00:25:39,750
<font color="#CCCCCC">want your qas guys to test but we can</font>

522
00:25:33,210 --> 00:25:41,280
also wrap things like an SS can so a lot

523
00:25:39,750 --> 00:25:43,080
of the stories have a narrative the

524
00:25:41,280 --> 00:25:46,440
narrative describes why we want this

525
00:25:43,080 --> 00:25:48,330
what benefit does this story give us so

526
00:25:46,440 --> 00:25:49,890
here<font color="#E5E5E5"> our narrative is that in order to</font>

527
00:25:48,330 --> 00:25:51,960
identify the security vulnerabilities on

528
00:25:49,890 --> 00:25:54,510
the host as an operations engineer

529
00:25:51,960 --> 00:25:55,800
responsible for<font color="#E5E5E5"> clinical configuration I</font>

530
00:25:54,510 --> 00:25:58,710
<font color="#E5E5E5">want to scan the host for knowing</font>

531
00:25:55,800 --> 00:26:00,450
security vulnerabilities and we have one

532
00:25:58,710 --> 00:26:02,880
scenario in there which connects to an

533
00:26:00,450 --> 00:26:05,190
SS server it logs in with the given user

534
00:26:02,880 --> 00:26:08,280
name and password it uses the provided

535
00:26:05,190 --> 00:26:10,140
scanning policy it scans the<font color="#E5E5E5"> list of</font>

536
00:26:08,280 --> 00:26:11,820
hosts<font color="#E5E5E5"> here and this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> just a text file</font>

537
00:26:10,140 --> 00:26:16,800
so you can add whichever hosts you like

538
00:26:11,820 --> 00:26:19,470
here as part of the parameters the

539
00:26:16,800 --> 00:26:22,770
scanner is run issues are stored and the

540
00:26:19,470 --> 00:26:25,080
<font color="#E5E5E5">following false positives are removed so</font>

541
00:26:22,770 --> 00:26:26,580
we can<font color="#E5E5E5"> provide a text list of false</font>

542
00:26:25,080 --> 00:26:29,159
positives you want to remove here and

543
00:26:26,580 --> 00:26:32,280
then we accept our expectation on<font color="#E5E5E5"> the</font>

544
00:26:29,160 --> 00:26:34,260
next line no severity 2 or higher issues

545
00:26:32,280 --> 00:26:37,850
should<font color="#E5E5E5"> be present if they are this test</font>

546
00:26:34,260 --> 00:26:37,850
fails and we can fail the build

547
00:26:39,360 --> 00:26:44,070
so that's more a kind of<font color="#E5E5E5"> an op C type of</font>

548
00:26:41,820 --> 00:26:47,490
test test your environment we also do of

549
00:26:44,070 --> 00:26:49,200
course scanning app scanning so since

550
00:26:47,490 --> 00:26:53,070
we're using our subs app we might as

551
00:26:49,200 --> 00:26:56,040
well scan using iOS app as well so it

552
00:26:53,070 --> 00:26:59,629
scans using different policies and for

553
00:26:56,040 --> 00:27:02,220
each policy it first navigates the app a

554
00:26:59,630 --> 00:27:03,870
given story again is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> J behaved thing</font>

555
00:27:02,220 --> 00:27:05,220
if we're going<font color="#E5E5E5"> to keep referring to the</font>

556
00:27:03,870 --> 00:27:07,409
same story in a number of different

557
00:27:05,220 --> 00:27:09,630
places we can<font color="#E5E5E5"> just wrap it up and say</font>

558
00:27:07,410 --> 00:27:12,210
<font color="#CCCCCC">always run this given story before you</font>

559
00:27:09,630 --> 00:27:14,910
run the scenario so always navigate the

560
00:27:12,210 --> 00:27:18,450
app before you scan anything we can go

561
00:27:14,910 --> 00:27:21,240
and<font color="#E5E5E5"> read this navigate app which</font><font color="#CCCCCC"> is</font>

562
00:27:18,450 --> 00:27:22,740
given<font color="#E5E5E5"> a new scanning session and the</font>

563
00:27:21,240 --> 00:27:25,140
page flow described in the method

564
00:27:22,740 --> 00:27:26,880
navigate is run through the proxy we

565
00:27:25,140 --> 00:27:28,710
<font color="#CCCCCC">don't have a method</font><font color="#E5E5E5"> navigate in our</font><font color="#CCCCCC"> Java</font>

566
00:27:26,880 --> 00:27:32,640
file yet we only have is logged in and

567
00:27:28,710 --> 00:27:34,559
logged out so on we exclude certain<font color="#E5E5E5"> URLs</font>

568
00:27:32,640 --> 00:27:36,240
that we<font color="#E5E5E5"> don't want to spider we then</font>

569
00:27:34,559 --> 00:27:38,610
configure the spider we tell the spider

570
00:27:36,240 --> 00:27:40,280
<font color="#E5E5E5">to go and spider the site and whatever</font>

571
00:27:38,610 --> 00:27:42,510
it has<font color="#E5E5E5"> seen through</font><font color="#CCCCCC"> the navigate method</font>

572
00:27:40,280 --> 00:27:44,820
and we<font color="#E5E5E5"> wait for the spider to complete</font>

573
00:27:42,510 --> 00:27:47,960
once we've navigated the app and we've

574
00:27:44,820 --> 00:27:50,610
spotted it then we start scanning it and

575
00:27:47,960 --> 00:27:52,830
then we start with the SQL injection

576
00:27:50,610 --> 00:27:54,389
scanning policy for example so in order

577
00:27:52,830 --> 00:28:02,309
to build this or configure this we need

578
00:27:54,390 --> 00:28:06,360
<font color="#E5E5E5">to create a navigate method so we will</font>

579
00:28:02,309 --> 00:28:08,910
open the login page we will<font color="#E5E5E5"> log in and</font>

580
00:28:06,360 --> 00:28:10,889
since we<font color="#E5E5E5"> don't care who logs in we'll</font>

581
00:28:08,910 --> 00:28:16,460
just use the default credentials from

582
00:28:10,890 --> 00:28:20,900
the configuration and now we can use

583
00:28:16,460 --> 00:28:25,230
selenium<font color="#CCCCCC"> ide again to record our actions</font>

584
00:28:20,900 --> 00:28:29,250
so click on tasks type something in

585
00:28:25,230 --> 00:28:36,450
click<font color="#E5E5E5"> on search click on profile and</font>

586
00:28:29,250 --> 00:28:38,640
that's enough so copy those paste them

587
00:28:36,450 --> 00:28:41,280
and we have the set of operations we

588
00:28:38,640 --> 00:28:45,320
want to perform through the through the

589
00:28:41,280 --> 00:28:48,809
proxy so selenium<font color="#CCCCCC"> IDE can't recognize</font>

590
00:28:45,320 --> 00:28:52,100
the search button so we'll have to find

591
00:28:48,809 --> 00:28:52,100
that<font color="#E5E5E5"> ourselves</font>

592
00:28:54,460 --> 00:29:03,639
first have<font color="#CCCCCC"> to see it there it is search</font>

593
00:29:00,080 --> 00:29:03,639
button has ID search

594
00:29:12,630 --> 00:29:17,950
click and whatever we've typed in here

595
00:29:16,570 --> 00:29:19,360
this is the code<font color="#E5E5E5"> that's going to run</font>

596
00:29:17,950 --> 00:29:21,430
<font color="#CCCCCC">through the scanner and the scanner will</font>

597
00:29:19,360 --> 00:29:24,610
recognize it<font color="#E5E5E5"> spider from it and in scan</font>

598
00:29:21,430 --> 00:29:26,380
it and we can<font color="#E5E5E5"> run that here</font><font color="#CCCCCC"> will run</font>

599
00:29:24,610 --> 00:29:30,899
just the SQL injection scanning not the

600
00:29:26,380 --> 00:29:30,900
whole story so scenario

601
00:29:38,050 --> 00:29:44,649
we should see it start up perform the

602
00:29:42,400 --> 00:29:47,830
navigation in the browser and then start

603
00:29:44,650 --> 00:29:50,050
performing the scanning it's also done

604
00:29:47,830 --> 00:30:04,300
the<font color="#E5E5E5"> spy during already and now the</font>

605
00:29:50,050 --> 00:30:05,919
scanning yes I'll get<font color="#E5E5E5"> to that so it's</font>

606
00:30:04,300 --> 00:30:07,360
quite important that you you need to

607
00:30:05,920 --> 00:30:09,340
<font color="#CCCCCC">make sure</font><font color="#E5E5E5"> your navigation is working</font>

608
00:30:07,360 --> 00:30:11,020
properly and<font color="#CCCCCC"> with any kind</font><font color="#E5E5E5"> of automated</font>

609
00:30:09,340 --> 00:30:12,820
<font color="#CCCCCC">test</font><font color="#E5E5E5"> even if your QA guys are doing</font>

610
00:30:11,020 --> 00:30:14,230
automated tests the big problem they're

611
00:30:12,820 --> 00:30:16,060
going to<font color="#E5E5E5"> run into is test maintenance</font>

612
00:30:14,230 --> 00:30:17,530
how do you<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure your tests aren't</font>

613
00:30:16,060 --> 00:30:19,540
failing all the time the web developer

614
00:30:17,530 --> 00:30:21,460
goes and changes the ID of a button now

615
00:30:19,540 --> 00:30:23,440
all<font color="#E5E5E5"> of a sudden all your tests fail so</font>

616
00:30:21,460 --> 00:30:26,620
it's a really<font color="#CCCCCC"> good idea to stick these</font>

617
00:30:23,440 --> 00:30:28,900
types of verification statements in your

618
00:30:26,620 --> 00:30:30,729
<font color="#CCCCCC">navigation code am I on the page I</font>

619
00:30:28,900 --> 00:30:32,620
expect to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> on after I click the search</font>

620
00:30:30,730 --> 00:30:35,740
button just to make sure that your<font color="#CCCCCC"> tests</font>

621
00:30:32,620 --> 00:30:45,969
on failing so we have a test failure

622
00:30:35,740 --> 00:30:47,470
here again let's have a look so the

623
00:30:45,970 --> 00:30:49,900
application should not contain SQL

624
00:30:47,470 --> 00:30:52,720
injection vulnerabilities we expected to

625
00:30:49,900 --> 00:30:55,750
<font color="#E5E5E5">find no medium or</font><font color="#CCCCCC"> high risk but we did</font>

626
00:30:52,720 --> 00:30:59,170
find two and it tells you where the URL

627
00:30:55,750 --> 00:31:01,360
is what the parameter is and the cwe ID

628
00:30:59,170 --> 00:31:03,040
for that you can use these three

629
00:31:01,360 --> 00:31:04,389
variables in your false positive if you

630
00:31:03,040 --> 00:31:06,100
decide these are false positives you

631
00:31:04,390 --> 00:31:08,260
just add<font color="#CCCCCC"> it to the story and it will</font>

632
00:31:06,100 --> 00:31:14,969
ignore those false positives the next

633
00:31:08,260 --> 00:31:17,650
time the story is run okay so this is a

634
00:31:14,970 --> 00:31:18,910
<font color="#E5E5E5">scanning type of thing again</font><font color="#CCCCCC"> but we can</font>

635
00:31:17,650 --> 00:31:20,080
do some more interesting<font color="#E5E5E5"> things because</font>

636
00:31:18,910 --> 00:31:22,150
since we have selenium and we have the

637
00:31:20,080 --> 00:31:24,929
proxy we can<font color="#E5E5E5"> even test access control</font>

638
00:31:22,150 --> 00:31:24,930
between<font color="#E5E5E5"> users</font>

639
00:31:29,149 --> 00:31:34,728
so to test access control the framework

640
00:31:31,969 --> 00:31:37,339
needs to know who is logged in what

641
00:31:34,729 --> 00:31:40,249
actions they perform and then what

642
00:31:37,339 --> 00:31:42,529
sensitive data or what's special data

643
00:31:40,249 --> 00:31:44,779
should they and only<font color="#E5E5E5"> them see when they</font>

644
00:31:42,529 --> 00:31:47,960
perform those actions so in this example

645
00:31:44,779 --> 00:31:50,659
if<font color="#E5E5E5"> Bob is logged in and Bob clicks on</font>

646
00:31:47,960 --> 00:31:53,719
profile then only<font color="#E5E5E5"> Bob should see his</font>

647
00:31:50,659 --> 00:32:00,979
<font color="#CCCCCC">email address</font><font color="#E5E5E5"> there and we can code that</font>

648
00:31:53,719 --> 00:32:05,799
up in a test so we create an arbitrary

649
00:32:00,979 --> 00:32:05,799
method will call it view Bob's profile

650
00:32:06,999 --> 00:32:24,469
oops we will<font color="#E5E5E5"> firstly driver do a get for</font>

651
00:32:22,159 --> 00:32:30,529
a page say just to make sure that we are

652
00:32:24,469 --> 00:32:34,549
<font color="#CCCCCC">on the front page of the app will get</font>

653
00:32:30,529 --> 00:32:37,639
that URL then we will click on the

654
00:32:34,549 --> 00:32:40,309
profile link which we already know how

655
00:32:37,639 --> 00:32:41,899
to do like that and that's it so that's

656
00:32:40,309 --> 00:32:43,879
our action that's one of the variables

657
00:32:41,899 --> 00:32:47,539
we need to know what action Bob performs

658
00:32:43,879 --> 00:32:51,738
and now using an annotation we tell it

659
00:32:47,539 --> 00:32:58,429
about who should perform that so its

660
00:32:51,739 --> 00:32:59,779
<font color="#E5E5E5">users equals Bob which users are</font>

661
00:32:58,429 --> 00:33:01,580
permitted to<font color="#E5E5E5"> perform this action only</font>

662
00:32:59,779 --> 00:33:04,359
<font color="#E5E5E5">Bob in this case we can can't provide a</font>

663
00:33:01,580 --> 00:33:04,359
list of users

664
00:33:08,179 --> 00:33:19,539
let's just complete this sensitive data

665
00:33:12,950 --> 00:33:19,539
is Bob and<font color="#E5E5E5"> continue security Don</font>

666
00:33:32,980 --> 00:33:37,590
oops i have an error here

667
00:33:55,850 --> 00:34:01,459
<font color="#E5E5E5">okay that's better so with</font><font color="#CCCCCC"> this</font>

668
00:33:59,750 --> 00:34:03,080
information the framework has enough to

669
00:34:01,460 --> 00:34:05,179
perform access control test it knows

670
00:34:03,080 --> 00:34:07,549
<font color="#E5E5E5">whose act allowed to perform this method</font>

671
00:34:05,179 --> 00:34:09,230
what the actions are in<font color="#E5E5E5"> this method and</font>

672
00:34:07,549 --> 00:34:12,199
<font color="#E5E5E5">then what is the sensitive data it's</font>

673
00:34:09,230 --> 00:34:15,290
meant to to see there so we<font color="#E5E5E5"> can go to</font>

674
00:34:12,199 --> 00:34:27,649
the authorization story and let's run

675
00:34:15,290 --> 00:34:30,469
that run so its first going<font color="#E5E5E5"> to go and</font>

676
00:34:27,649 --> 00:34:33,230
perform that action as Bob it's going<font color="#E5E5E5"> to</font>

677
00:34:30,469 --> 00:34:35,029
record those HTTP requests that are part

678
00:34:33,230 --> 00:34:37,879
of that view Bob's profile and store

679
00:34:35,030 --> 00:34:40,129
them and then it's going to<font color="#CCCCCC"> login</font><font color="#E5E5E5"> as</font>

680
00:34:37,879 --> 00:34:43,639
every other user switch in the session

681
00:34:40,129 --> 00:34:45,500
IDs and replay those methods so it's

682
00:34:43,639 --> 00:34:46,879
<font color="#CCCCCC">exactly how you would test this when</font>

683
00:34:45,500 --> 00:34:51,909
you're doing a manual web app test

684
00:34:46,879 --> 00:34:51,909
except<font color="#E5E5E5"> that</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> things automated so</font>

685
00:34:52,510 --> 00:34:59,420
authorization test it consists<font color="#CCCCCC"> of the</font>

686
00:34:57,280 --> 00:35:01,730
authorization story is three scenarios

687
00:34:59,420 --> 00:35:03,440
the very first scenario sets everything

688
00:35:01,730 --> 00:35:08,320
up for us and<font color="#E5E5E5"> just make</font><font color="#CCCCCC"> sure we've</font>

689
00:35:03,440 --> 00:35:10,550
entered valid data so it checks can<font color="#E5E5E5"> Bob</font>

690
00:35:08,320 --> 00:35:13,430
calling the view Bob's profile method

691
00:35:10,550 --> 00:35:16,580
<font color="#CCCCCC">does he actually see this data somewhere</font>

692
00:35:13,430 --> 00:35:19,609
in the HTTP responses it then also goes

693
00:35:16,580 --> 00:35:21,140
in stores those HTTP responses and<font color="#CCCCCC"> the</font>

694
00:35:19,609 --> 00:35:23,900
next scenario is the one that actually

695
00:35:21,140 --> 00:35:26,020
does<font color="#CCCCCC"> the access control testing so it</font>

696
00:35:23,900 --> 00:35:28,520
uses a table that it went and<font color="#E5E5E5"> created</font>

697
00:35:26,020 --> 00:35:34,220
based on all the other<font color="#E5E5E5"> users it knows</font>

698
00:35:28,520 --> 00:35:36,440
about so it now logs in a zealous logs

699
00:35:34,220 --> 00:35:39,830
enos ellis and the previously recorded

700
00:35:36,440 --> 00:35:43,840
HTTP requests<font color="#CCCCCC"> for view bob's profile are</font>

701
00:35:39,830 --> 00:35:47,180
replayed using<font color="#E5E5E5"> alice's session ID and</font>

702
00:35:43,840 --> 00:35:50,090
then<font color="#CCCCCC"> Alice should not see this over here</font>

703
00:35:47,180 --> 00:35:54,049
<font color="#E5E5E5">and if she does then we have an access</font>

704
00:35:50,090 --> 00:35:55,640
control floor so we have coded up an

705
00:35:54,050 --> 00:35:59,990
access control<font color="#E5E5E5"> floor here and we can see</font>

706
00:35:55,640 --> 00:36:02,000
that<font color="#E5E5E5"> Alice does see that data from her</font>

707
00:35:59,990 --> 00:36:05,490
session and we can see this is a very

708
00:36:02,000 --> 00:36:09,680
basic access control flow here

709
00:36:05,490 --> 00:36:11,759
any user can see any other users profile

710
00:36:09,680 --> 00:36:13,290
but we have<font color="#CCCCCC"> an automated</font><font color="#E5E5E5"> way of testing</font>

711
00:36:11,760 --> 00:36:28,230
it for any number of methods and any

712
00:36:13,290 --> 00:36:30,060
number of users right ah<font color="#CCCCCC"> Jenkins okay so</font>

713
00:36:28,230 --> 00:36:32,010
we<font color="#CCCCCC"> have these tests we have an automated</font>

714
00:36:30,060 --> 00:36:33,810
<font color="#E5E5E5">way to run all</font><font color="#CCCCCC"> of these tests next</font>

715
00:36:32,010 --> 00:36:40,230
logical step is integrated into<font color="#CCCCCC"> our</font>

716
00:36:33,810 --> 00:36:42,299
build process and for<font color="#CCCCCC"> that I have a</font>

717
00:36:40,230 --> 00:36:45,210
pre-recorded session using Jenkins and

718
00:36:42,300 --> 00:36:48,540
this is this would be the entire process

719
00:36:45,210 --> 00:36:50,130
of a developer writing code committing

720
00:36:48,540 --> 00:36:52,140
it to source code having the<font color="#E5E5E5"> BDD</font>

721
00:36:50,130 --> 00:36:55,320
security<font color="#CCCCCC"> tests to run as part of a</font>

722
00:36:52,140 --> 00:36:57,000
Jenkins bill so our developer goes and

723
00:36:55,320 --> 00:36:59,910
makes changes to<font color="#E5E5E5"> the web apps that</font>

724
00:36:57,000 --> 00:37:03,930
they're building they decide to<font color="#E5E5E5"> change</font>

725
00:36:59,910 --> 00:37:06,180
the way they do queries they change how

726
00:37:03,930 --> 00:37:16,799
they get access to the users instance

727
00:37:06,180 --> 00:37:21,299
and they commit their code to get push

728
00:37:16,800 --> 00:37:22,530
it up to<font color="#E5E5E5"> github and that's it so from</font>

729
00:37:21,300 --> 00:37:24,990
the developers point of view that's it

730
00:37:22,530 --> 00:37:26,340
they've just committed code all of what

731
00:37:24,990 --> 00:37:29,459
happens from this point on<font color="#CCCCCC"> is completely</font>

732
00:37:26,340 --> 00:37:31,440
automated<font color="#E5E5E5"> Jenkins is automatically</font>

733
00:37:29,460 --> 00:37:33,660
watching github if there<font color="#CCCCCC"> are</font><font color="#E5E5E5"> any changes</font>

734
00:37:31,440 --> 00:37:37,320
in<font color="#CCCCCC"> e new commits it goes and pulls down</font>

735
00:37:33,660 --> 00:37:41,029
the new version<font color="#CCCCCC"> of the web app so it</font>

736
00:37:37,320 --> 00:37:44,010
goes and pulls<font color="#CCCCCC"> the way back down</font><font color="#E5E5E5"> and</font>

737
00:37:41,030 --> 00:37:46,380
start building<font color="#CCCCCC"> it it's compiling the web</font>

738
00:37:44,010 --> 00:37:48,450
app it's going to deploy it into a test

739
00:37:46,380 --> 00:37:51,900
environment deploying it on tomcat here

740
00:37:48,450 --> 00:37:54,210
and it automatically kicks off a BDD

741
00:37:51,900 --> 00:37:58,380
security build after deploying the web

742
00:37:54,210 --> 00:37:59,460
app now BDD security starts running<font color="#CCCCCC"> it's</font>

743
00:37:58,380 --> 00:38:02,220
running in this case in a virtual

744
00:37:59,460 --> 00:38:05,040
machine just so we can see what's<font color="#CCCCCC"> going</font>

745
00:38:02,220 --> 00:38:08,549
on you can run this in a headless mode

746
00:38:05,040 --> 00:38:10,770
if you use xvv on<font color="#E5E5E5"> on</font><font color="#CCCCCC"> linux so this is</font>

747
00:38:08,550 --> 00:38:12,330
massively speeded up it takes<font color="#CCCCCC"> about</font><font color="#E5E5E5"> 10</font>

748
00:38:10,770 --> 00:38:15,140
minutes to run<font color="#E5E5E5"> through all the tests for</font>

749
00:38:12,330 --> 00:38:18,230
this simple app

750
00:38:15,140 --> 00:38:24,980
going along doing<font color="#E5E5E5"> functional tests we</font>

751
00:38:18,230 --> 00:38:27,290
can see the progress and done yeah

752
00:38:24,980 --> 00:38:29,480
essential<font color="#CCCCCC"> jenkins plugin is the bruce</font>

753
00:38:27,290 --> 00:38:31,670
schneier<font color="#CCCCCC"> plugin which you must have to</font>

754
00:38:29,480 --> 00:38:34,700
give<font color="#E5E5E5"> your developers somebody about</font>

755
00:38:31,670 --> 00:38:37,910
security so<font color="#E5E5E5"> immediately we see we have</font>

756
00:38:34,700 --> 00:38:39,649
test results<font color="#E5E5E5"> we have 24 failures in</font>

757
00:38:37,910 --> 00:38:42,470
total but all of these<font color="#E5E5E5"> are old failures</font>

758
00:38:39,650 --> 00:38:44,680
three of them<font color="#E5E5E5"> are new failures caused by</font>

759
00:38:42,470 --> 00:38:46,700
this<font color="#E5E5E5"> new build that we've</font><font color="#CCCCCC"> just committed</font>

760
00:38:44,680 --> 00:38:52,279
so we know that<font color="#CCCCCC"> there are three new</font>

761
00:38:46,700 --> 00:38:53,710
security regressions in our build and we

762
00:38:52,280 --> 00:38:58,210
can click<font color="#E5E5E5"> on them we can see what the</font>

763
00:38:53,710 --> 00:38:58,210
regression is access control problem

764
00:38:59,860 --> 00:39:07,850
cross-site scripting issue another

765
00:39:03,980 --> 00:39:09,980
access control issue and because<font color="#CCCCCC"> Jenkins</font>

766
00:39:07,850 --> 00:39:11,960
is integrated with our source control

767
00:39:09,980 --> 00:39:13,790
management with github in this case we

768
00:39:11,960 --> 00:39:15,680
can navigate to the code<font color="#CCCCCC"> that caused</font>

769
00:39:13,790 --> 00:39:17,509
this issue so that developer can<font color="#E5E5E5"> go and</font>

770
00:39:15,680 --> 00:39:18,830
see or hang on a minute those were<font color="#CCCCCC"> the</font>

771
00:39:17,510 --> 00:39:20,870
changes I made<font color="#E5E5E5"> and those were the</font>

772
00:39:18,830 --> 00:39:29,779
changes that caused my new security

773
00:39:20,870 --> 00:39:31,490
regressions and the security report the

774
00:39:29,780 --> 00:39:33,740
HTML reports are also embedded within

775
00:39:31,490 --> 00:39:35,540
the Jenkins UI so while the developers

776
00:39:33,740 --> 00:39:41,799
is browsing Jenkins he can go<font color="#CCCCCC"> and see</font>

777
00:39:35,540 --> 00:39:41,800
what the detailed issue is<font color="#CCCCCC"> okay</font>

778
00:39:51,450 --> 00:39:56,350
so there<font color="#E5E5E5"> are some limitations there's no</font>

779
00:39:54,010 --> 00:39:57,610
email functionality built in yet so if

780
00:39:56,350 --> 00:39:59,589
you've gone you<font color="#E5E5E5"> want to test self</font>

781
00:39:57,610 --> 00:40:01,450
registration you can have to build the

782
00:39:59,590 --> 00:40:02,680
<font color="#E5E5E5">email functionality go and pop an email</font>

783
00:40:01,450 --> 00:40:05,020
off the server to register the user

784
00:40:02,680 --> 00:40:08,520
based on an email that<font color="#E5E5E5"> the system has</font>

785
00:40:05,020 --> 00:40:10,960
sent him account lockout can be an issue

786
00:40:08,520 --> 00:40:12,850
so who you would either have to create

787
00:40:10,960 --> 00:40:14,560
user accounts for the app<font color="#E5E5E5"> you're testing</font>

788
00:40:12,850 --> 00:40:16,049
that aren't locked out or you'd<font color="#CCCCCC"> have to</font>

789
00:40:14,560 --> 00:40:18,580
be<font color="#E5E5E5"> very careful about how you test those</font>

790
00:40:16,050 --> 00:40:21,070
those lockouts or have a completely

791
00:40:18,580 --> 00:40:23,950
automated lock unlocking process that

792
00:40:21,070 --> 00:40:26,800
you can activate<font color="#E5E5E5"> through the framework</font>

793
00:40:23,950 --> 00:40:29,770
at the<font color="#E5E5E5"> moment the access control tests</font>

794
00:40:26,800 --> 00:40:32,350
are not and TCS are everywhere and<font color="#CCCCCC"> the</font>

795
00:40:29,770 --> 00:40:34,720
access control tests are resending HTTP

796
00:40:32,350 --> 00:40:36,640
requests to the server if there's a<font color="#CCCCCC"> CSRF</font>

797
00:40:34,720 --> 00:40:37,959
token in there<font color="#CCCCCC"> it they're not</font><font color="#E5E5E5"> going to</font>

798
00:40:36,640 --> 00:40:40,150
work<font color="#E5E5E5"> because they're sending the old</font>

799
00:40:37,960 --> 00:40:43,480
token along this is<font color="#E5E5E5"> something i'll</font>

800
00:40:40,150 --> 00:40:44,920
change quite quite soon and then as i

801
00:40:43,480 --> 00:40:46,660
mentioned earlier<font color="#E5E5E5"> test maintenance can</font>

802
00:40:44,920 --> 00:40:50,560
be an issue so you should do error

803
00:40:46,660 --> 00:40:52,690
checking as part of your tests security

804
00:40:50,560 --> 00:40:54,190
testing is a bit different to QA testing

805
00:40:52,690 --> 00:40:56,140
or functional testing because in

806
00:40:54,190 --> 00:40:57,910
functional testing when a test fails

807
00:40:56,140 --> 00:40:59,529
you're pretty sure that something is

808
00:40:57,910 --> 00:41:01,660
wrong<font color="#CCCCCC"> with your app but the security</font>

809
00:40:59,530 --> 00:41:04,000
testing we want to distinguish between a

810
00:41:01,660 --> 00:41:06,160
test failure that means<font color="#E5E5E5"> something is</font>

811
00:41:04,000 --> 00:41:07,450
wrong with<font color="#CCCCCC"> our test or a security</font>

812
00:41:06,160 --> 00:41:09,759
failures something's wrong with the

813
00:41:07,450 --> 00:41:11,169
thing that we're testing<font color="#E5E5E5"> so these two</font>

814
00:41:09,760 --> 00:41:16,440
things require two different actions

815
00:41:11,170 --> 00:41:16,440
from us one<font color="#E5E5E5"> way to do</font><font color="#CCCCCC"> this is to</font>

816
00:41:18,150 --> 00:41:26,560
<font color="#CCCCCC">sprinkle your tests with error checking</font>

817
00:41:24,370 --> 00:41:27,730
like this one so the first one<font color="#E5E5E5"> about</font>

818
00:41:26,560 --> 00:41:32,290
changing the session ID after

819
00:41:27,730 --> 00:41:33,460
authentication given and when when the

820
00:41:32,290 --> 00:41:35,620
default user logs in with the

821
00:41:33,460 --> 00:41:37,720
credentials<font color="#E5E5E5"> from here so now we know</font>

822
00:41:35,620 --> 00:41:39,279
<font color="#CCCCCC">that the users meant to be logged in but</font>

823
00:41:37,720 --> 00:41:41,169
there's an<font color="#CCCCCC"> additional step here and the</font>

824
00:41:39,280 --> 00:41:42,580
user is logged in this is superfluous

825
00:41:41,170 --> 00:41:44,290
from a security testing point<font color="#E5E5E5"> of view</font>

826
00:41:42,580 --> 00:41:47,529
that's there purely for error checking

827
00:41:44,290 --> 00:41:48,880
so that if that fails we no hang on we

828
00:41:47,530 --> 00:41:52,990
<font color="#E5E5E5">actually try to</font><font color="#CCCCCC"> login and we didn't log</font>

829
00:41:48,880 --> 00:41:54,280
in and we were meant to to<font color="#CCCCCC"> login another</font>

830
00:41:52,990 --> 00:41:59,649
thing<font color="#CCCCCC"> you would do then is as I</font>

831
00:41:54,280 --> 00:42:01,210
described with the navigation method if

832
00:41:59,650 --> 00:42:03,550
you perform some action on<font color="#E5E5E5"> a page</font>

833
00:42:01,210 --> 00:42:04,400
there's a shortcut you can do verify

834
00:42:03,550 --> 00:42:09,020
text prison

835
00:42:04,400 --> 00:42:11,300
and some text so<font color="#E5E5E5"> you can sprinkle</font>

836
00:42:09,020 --> 00:42:13,009
complex selenium code with that verify

837
00:42:11,300 --> 00:42:14,750
text present just to make<font color="#CCCCCC"> sure that you</font>

838
00:42:13,010 --> 00:42:16,730
are<font color="#CCCCCC"> on the right page and nothing is</font>

839
00:42:14,750 --> 00:42:19,100
being missed by the way if you compare

840
00:42:16,730 --> 00:42:21,260
this to pure scanning at least<font color="#E5E5E5"> you can</font>

841
00:42:19,100 --> 00:42:23,270
do this here with a one hundred percent

842
00:42:21,260 --> 00:42:24,890
pure scanner this is<font color="#E5E5E5"> often obfuscator do</font>

843
00:42:23,270 --> 00:42:26,720
you have no<font color="#E5E5E5"> idea whether it's actually</font>

844
00:42:24,890 --> 00:42:28,670
eating the pages you believe it's

845
00:42:26,720 --> 00:42:30,109
hitting with this approach you can see

846
00:42:28,670 --> 00:42:33,910
where this going and you can ensure<font color="#E5E5E5"> that</font>

847
00:42:30,110 --> 00:42:33,910
it is on the page it's meant to be on

848
00:42:33,940 --> 00:42:39,980
the<font color="#E5E5E5"> other thing</font><font color="#CCCCCC"> is captures so</font><font color="#E5E5E5"> are any</font>

849
00:42:36,740 --> 00:42:46,399
<font color="#E5E5E5">two captures testing a production site</font>

850
00:42:39,980 --> 00:42:49,760
and I solved it by using the death<font color="#E5E5E5"> by</font>

851
00:42:46,400 --> 00:42:52,280
capture service so def<font color="#E5E5E5"> by capture com</font>

852
00:42:49,760 --> 00:42:54,980
yep<font color="#E5E5E5"> yep</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> capture</font><font color="#CCCCCC"> com is a service</font><font color="#E5E5E5"> it</font>

853
00:42:52,280 --> 00:42:57,710
uses humans to solve captures it costs

854
00:42:54,980 --> 00:42:59,720
six euros for a thousand solved captures

855
00:42:57,710 --> 00:43:00,710
I think it's a bargain I don't want to

856
00:42:59,720 --> 00:43:04,879
know how<font color="#CCCCCC"> they doing it's one of those</font>

857
00:43:00,710 --> 00:43:09,010
things we just no ethical questions<font color="#CCCCCC"> all</font>

858
00:43:04,880 --> 00:43:09,010
<font color="#CCCCCC">right so with our app we</font>

859
00:43:20,250 --> 00:43:24,960
ok so our app we're going to enable

860
00:43:22,350 --> 00:43:25,950
recapture on the<font color="#E5E5E5"> login if you fail login</font>

861
00:43:24,960 --> 00:43:27,570
it's going<font color="#E5E5E5"> to prompt you with the</font>

862
00:43:25,950 --> 00:43:30,000
capture so will trigger that manually

863
00:43:27,570 --> 00:43:35,580
and now we get<font color="#E5E5E5"> a capture so now in order</font>

864
00:43:30,000 --> 00:43:37,260
to<font color="#E5E5E5"> login we have to solve the capture so</font>

865
00:43:35,580 --> 00:43:39,240
the<font color="#E5E5E5"> way</font><font color="#CCCCCC"> to do this is</font><font color="#E5E5E5"> that there's a</font>

866
00:43:37,260 --> 00:43:42,240
behavior called the<font color="#E5E5E5"> I capture behavior</font>

867
00:43:39,240 --> 00:43:46,290
and we can ask it to implement<font color="#CCCCCC"> these</font>

868
00:43:42,240 --> 00:43:48,270
methods for us in order to<font color="#E5E5E5"> be able to</font>

869
00:43:46,290 --> 00:43:50,730
solve captures we need to tell it three

870
00:43:48,270 --> 00:43:53,610
things how to get the capture image how

871
00:43:50,730 --> 00:43:55,890
to find it on<font color="#CCCCCC"> the page how to</font><font color="#E5E5E5"> find the</font>

872
00:43:53,610 --> 00:43:57,810
response field on<font color="#CCCCCC"> the page and then</font>

873
00:43:55,890 --> 00:43:59,100
which solver to use in<font color="#E5E5E5"> this case we only</font>

874
00:43:57,810 --> 00:44:05,910
<font color="#E5E5E5">support one which</font><font color="#CCCCCC"> is the death</font><font color="#E5E5E5"> by</font>

875
00:43:59,100 --> 00:44:07,860
capture service so<font color="#CCCCCC"> we will</font><font color="#E5E5E5"> first find</font>

876
00:44:05,910 --> 00:44:10,680
the<font color="#E5E5E5"> image on the page which</font><font color="#CCCCCC"> is pretty</font>

877
00:44:07,860 --> 00:44:14,010
simple because recaptures uses a unique

878
00:44:10,680 --> 00:44:16,560
ID recapture challenge image is the ID

879
00:44:14,010 --> 00:44:18,750
of the element we just need to return

880
00:44:16,560 --> 00:44:22,650
the selenium in selenium formats right

881
00:44:18,750 --> 00:44:24,300
which hell of webelement it is we do the

882
00:44:22,650 --> 00:44:25,710
<font color="#E5E5E5">same for the answer where we're going to</font>

883
00:44:24,300 --> 00:44:28,850
type the answer in so the framework

884
00:44:25,710 --> 00:44:28,850
knows where to put the answer in

885
00:44:36,630 --> 00:44:42,150
and we set the default captcha solving

886
00:44:39,690 --> 00:44:43,650
service as I said at the moment deaf by

887
00:44:42,150 --> 00:44:45,420
captures the only one this<font color="#E5E5E5"> contains my</font>

888
00:44:43,650 --> 00:44:47,970
username and password where I signed up

889
00:44:45,420 --> 00:44:52,080
with for the service so<font color="#E5E5E5"> you can use this</font>

890
00:44:47,970 --> 00:44:53,310
same code for your systems and then

891
00:44:52,080 --> 00:44:55,259
obviously we need to change<font color="#E5E5E5"> the</font><font color="#CCCCCC"> login</font>

892
00:44:53,310 --> 00:44:59,850
function because login now needs<font color="#E5E5E5"> to</font>

893
00:44:55,260 --> 00:45:02,840
check after I<font color="#CCCCCC"> filled in the username and</font>

894
00:44:59,850 --> 00:45:06,240
<font color="#E5E5E5">password</font><font color="#CCCCCC"> is a capture prison if it is</font>

895
00:45:02,840 --> 00:45:08,310
insolvent and then continue sending on

896
00:45:06,240 --> 00:45:10,259
the login form and since we've told it

897
00:45:08,310 --> 00:45:12,090
where<font color="#E5E5E5"> to find the images</font><font color="#CCCCCC"> and wettest</font>

898
00:45:10,260 --> 00:45:19,380
<font color="#E5E5E5">I'll find the response field it can do</font>

899
00:45:12,090 --> 00:45:21,600
it for us so<font color="#CCCCCC"> we can run this test fires</font>

900
00:45:19,380 --> 00:45:25,200
up the browser logs in with Bob and<font color="#CCCCCC"> his</font>

901
00:45:21,600 --> 00:45:27,000
password and now the<font color="#CCCCCC"> image has been</font>

902
00:45:25,200 --> 00:45:31,830
uploaded to death my capture we're

903
00:45:27,000 --> 00:45:33,420
waiting for<font color="#CCCCCC"> a response waiting since</font>

904
00:45:31,830 --> 00:45:39,470
it's someone typing it in anyway there

905
00:45:33,420 --> 00:45:39,470
we go and that was<font color="#CCCCCC"> the capture response</font>

906
00:45:39,890 --> 00:45:44,279
so it's a<font color="#E5E5E5"> bit slower than doing it</font>

907
00:45:42,150 --> 00:45:46,710
purely automated system but at least you

908
00:45:44,280 --> 00:45:49,190
can<font color="#E5E5E5"> test production apps that have kept</font>

909
00:45:46,710 --> 00:45:49,190
you enabled

910
00:45:54,980 --> 00:46:00,480
so basically we've moved the way we've

911
00:45:58,290 --> 00:46:02,820
we are can we work with our<font color="#E5E5E5"> security</font>

912
00:46:00,480 --> 00:46:04,980
requirements in the old way we would

913
00:46:02,820 --> 00:46:08,130
have security requirements described in

914
00:46:04,980 --> 00:46:09,930
<font color="#CCCCCC">excel sheets in PDF so in</font><font color="#E5E5E5"> Word docs that</font>

915
00:46:08,130 --> 00:46:12,060
we all know and<font color="#E5E5E5"> ends up at the bottom of</font>

916
00:46:09,930 --> 00:46:15,569
someone's draw and is never referred to

917
00:46:12,060 --> 00:46:16,920
again we want our developers to use our

918
00:46:15,570 --> 00:46:19,410
requirements to build the app we want

919
00:46:16,920 --> 00:46:21,810
our Ops guys to use our requirements to

920
00:46:19,410 --> 00:46:24,420
build their infrastructure but<font color="#E5E5E5"> this is</font>

921
00:46:21,810 --> 00:46:26,340
rarely the case we also rely heavily on

922
00:46:24,420 --> 00:46:28,320
manual processes and each of these

923
00:46:26,340 --> 00:46:32,700
manual processes should<font color="#CCCCCC"> be basing their</font>

924
00:46:28,320 --> 00:46:36,500
tests on our requirements so this does

925
00:46:32,700 --> 00:46:40,439
not fit into a continuous delivery model

926
00:46:36,500 --> 00:46:43,920
this method<font color="#CCCCCC"> does instead of having</font>

927
00:46:40,440 --> 00:46:45,750
static requirements defined on paper or

928
00:46:43,920 --> 00:46:47,460
defined in dead documents we have

929
00:46:45,750 --> 00:46:49,800
requirements that are actually self

930
00:46:47,460 --> 00:46:53,570
verifying they're still in a natural

931
00:46:49,800 --> 00:46:55,380
language so we can still<font color="#CCCCCC"> use them as</font>

932
00:46:53,570 --> 00:46:58,080
requirements to communicate<font color="#CCCCCC"> with anybody</font>

933
00:46:55,380 --> 00:46:59,790
else in the team and they can verify

934
00:46:58,080 --> 00:47:02,400
themselves and we can use those to wrap

935
00:46:59,790 --> 00:47:04,529
things like scanners<font color="#CCCCCC"> to wrap manual</font>

936
00:47:02,400 --> 00:47:06,840
tests to wrap QA test and to run them

937
00:47:04,530 --> 00:47:10,890
from in continuous integration service

938
00:47:06,840 --> 00:47:15,870
and so on some<font color="#E5E5E5"> additional resources on</font>

939
00:47:10,890 --> 00:47:17,339
<font color="#CCCCCC">our github page a bitty security</font><font color="#E5E5E5"> users a</font>

940
00:47:15,870 --> 00:47:18,330
few components that we've developed so

941
00:47:17,340 --> 00:47:20,970
if you want to use any of<font color="#E5E5E5"> those</font>

942
00:47:18,330 --> 00:47:23,730
components some of those<font color="#CCCCCC"> are available</font>

943
00:47:20,970 --> 00:47:33,660
there is an SSL tester which will test

944
00:47:23,730 --> 00:47:35,370
ssl on the site like this support t on

945
00:47:33,660 --> 00:47:38,310
this one or two it will check the<font color="#CCCCCC"> tls</font>

946
00:47:35,370 --> 00:47:39,810
one or two is supported it will say<font color="#CCCCCC"> that</font>

947
00:47:38,310 --> 00:47:43,740
<font color="#E5E5E5">you should be patched against heartbleed</font>

948
00:47:39,810 --> 00:47:47,549
and it will test that<font color="#E5E5E5"> hard bleed is not</font>

949
00:47:43,740 --> 00:47:51,000
there right<font color="#E5E5E5"> so there are quite a few</font>

950
00:47:47,550 --> 00:47:52,830
prepackaged security stories and of

951
00:47:51,000 --> 00:47:55,620
<font color="#CCCCCC">course you're encouraged to modify them</font>

952
00:47:52,830 --> 00:47:57,029
for the app under test and ideally you'd

953
00:47:55,620 --> 00:47:59,910
have this one set of<font color="#CCCCCC"> stories that</font><font color="#E5E5E5"> you</font>

954
00:47:57,030 --> 00:48:02,570
could apply<font color="#CCCCCC"> to</font><font color="#E5E5E5"> a group of web apps that</font>

955
00:47:59,910 --> 00:48:02,569
you're responsible<font color="#CCCCCC"> for</font>

956
00:48:08,660 --> 00:48:28,779
questions yes I know<font color="#E5E5E5"> it's always a</font>

957
00:48:20,809 --> 00:48:28,780
contentious point sorry yes yeah yeah

958
00:48:28,930 --> 00:48:47,000
yes it is<font color="#E5E5E5"> and it depends on what type of</font>

959
00:48:43,309 --> 00:48:48,470
tests you would run so by wrapping

960
00:48:47,000 --> 00:48:50,900
scanners we can do<font color="#E5E5E5"> everything that a</font>

961
00:48:48,470 --> 00:48:52,549
scanner<font color="#E5E5E5"> can do if you wanted to do more</font>

962
00:48:50,900 --> 00:48:53,809
kind<font color="#E5E5E5"> of exploratory type testing you</font>

963
00:48:52,549 --> 00:48:56,589
would want to wrap something like a

964
00:48:53,809 --> 00:48:58,670
fuzzer so if you want to<font color="#E5E5E5"> find heartbleed</font>

965
00:48:56,589 --> 00:49:01,520
proactively you would have to<font color="#CCCCCC"> have some</font>

966
00:48:58,670 --> 00:49:04,160
<font color="#CCCCCC">kind of super-intelligent</font><font color="#E5E5E5"> fuzzer that</font>

967
00:49:01,520 --> 00:49:06,640
would go<font color="#E5E5E5"> and scan for that type of thing</font>

968
00:49:04,160 --> 00:49:08,450
<font color="#E5E5E5">and then find those type of anomalies</font>

969
00:49:06,640 --> 00:49:10,368
although<font color="#E5E5E5"> I don't think we would have</font>

970
00:49:08,450 --> 00:49:19,910
<font color="#E5E5E5">made we didn't find heartbleed using</font>

971
00:49:10,369 --> 00:49:22,490
traditional methods in any<font color="#CCCCCC"> case yes yes</font>

972
00:49:19,910 --> 00:49:24,828
it's away<font color="#CCCCCC"> from a process point of view</font>

973
00:49:22,490 --> 00:49:27,640
we<font color="#CCCCCC"> can run security test in the same</font>

974
00:49:24,829 --> 00:49:31,279
place<font color="#CCCCCC"> that we run quality control tests</font>

975
00:49:27,640 --> 00:49:32,868
this can't replace a manual tester going

976
00:49:31,279 --> 00:49:34,910
into<font color="#CCCCCC"> a nap and finding new</font>

977
00:49:32,869 --> 00:49:36,680
vulnerabilities what it does provide is

978
00:49:34,910 --> 00:49:39,828
the<font color="#CCCCCC"> facility to record those activities</font>

979
00:49:36,680 --> 00:49:41,359
and put them into your test suite that

980
00:49:39,829 --> 00:49:43,609
you<font color="#E5E5E5"> can then repeat on subsequent</font>

981
00:49:41,359 --> 00:49:45,710
retests and have cost you nothing<font color="#CCCCCC"> to run</font>

982
00:49:43,609 --> 00:49:47,480
a retest with this type of thing but

983
00:49:45,710 --> 00:49:51,079
<font color="#E5E5E5">yeah I wouldn't say it's a replacement</font>

984
00:49:47,480 --> 00:49:53,980
for doing manual testing now any of<font color="#E5E5E5"> us</font>

985
00:49:51,079 --> 00:49:53,980
yes

986
00:49:55,970 --> 00:50:04,410
yes yes<font color="#E5E5E5"> yes sir phantom</font><font color="#CCCCCC"> jes</font><font color="#E5E5E5"> is a</font>

987
00:50:00,030 --> 00:50:05,910
headless browser and do<font color="#CCCCCC"> I have read some</font>

988
00:50:04,410 --> 00:50:07,770
problems with phantom<font color="#CCCCCC"> Jas that it</font>

989
00:50:05,910 --> 00:50:11,279
doesn't the<font color="#E5E5E5"> JavaScript engine is a</font>

990
00:50:07,770 --> 00:50:14,280
WebKit and WebKit right it's a WebKit

991
00:50:11,280 --> 00:50:16,410
engine and it might not interpret some

992
00:50:14,280 --> 00:50:18,840
JavaScript on some sites exactly the

993
00:50:16,410 --> 00:50:20,670
<font color="#E5E5E5">same way that chrome might do it so at</font>

994
00:50:18,840 --> 00:50:24,210
the moment I'm focusing<font color="#E5E5E5"> on Chrome and</font>

995
00:50:20,670 --> 00:50:26,460
doing headless chrome with xvf be under

996
00:50:24,210 --> 00:50:27,840
linux so you could<font color="#E5E5E5"> reach at least run</font>

997
00:50:26,460 --> 00:50:30,330
these tests headless you don't have to

998
00:50:27,840 --> 00:50:32,010
set up a full x server to run them but

999
00:50:30,330 --> 00:50:33,390
after<font color="#CCCCCC"> that</font><font color="#E5E5E5"> i'll definitely interested in</font>

1000
00:50:32,010 --> 00:50:34,980
<font color="#E5E5E5">running phantom</font><font color="#CCCCCC"> jes it's also</font>

1001
00:50:33,390 --> 00:50:40,339
significantly faster than a real browser

1002
00:50:34,980 --> 00:50:50,280
so that would be a nice plus point yes

1003
00:50:40,340 --> 00:50:52,140
yeah yeah so you can run it from you can

1004
00:50:50,280 --> 00:50:56,280
run you can kick off the tests either on

1005
00:50:52,140 --> 00:50:57,930
the command line or as a<font color="#CCCCCC"> java file so if</font>

1006
00:50:56,280 --> 00:51:01,320
you can run a command line<font color="#CCCCCC"> under cruise</font>

1007
00:50:57,930 --> 00:51:03,839
control you can run it under under bv

1008
00:51:01,320 --> 00:51:06,290
security good thank you dear<font color="#E5E5E5"> Lucas</font>

1009
00:51:03,840 --> 00:51:06,290
thanks

