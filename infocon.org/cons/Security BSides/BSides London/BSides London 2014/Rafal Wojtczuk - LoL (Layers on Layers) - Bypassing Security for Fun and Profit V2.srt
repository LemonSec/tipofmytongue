1
00:00:01,570 --> 00:00:06,620
good morning<font color="#CCCCCC"> everyone my name is Rafa</font>

2
00:00:04,310 --> 00:00:09,799
vagyok I work for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> company name</font>

3
00:00:06,620 --> 00:00:12,020
bromium and this talk is titled layers

4
00:00:09,799 --> 00:00:15,739
on layers<font color="#CCCCCC"> by passing endpoint security</font>

5
00:00:12,020 --> 00:00:18,410
we will talk about Mariah's endpoint

6
00:00:15,740 --> 00:00:22,700
security solutions and they come on

7
00:00:18,410 --> 00:00:25,580
balance more specifically the<font color="#CCCCCC"> agendas</font>

8
00:00:22,700 --> 00:00:27,049
<font color="#CCCCCC">will start about explaining the</font>

9
00:00:25,580 --> 00:00:30,470
difference between kernel mode and user

10
00:00:27,050 --> 00:00:32,090
mode execution I hope you all know<font color="#E5E5E5"> more</font>

11
00:00:30,470 --> 00:00:35,839
or<font color="#E5E5E5"> less about you so just quick</font>

12
00:00:32,090 --> 00:00:37,940
introduction then again<font color="#E5E5E5"> i will do a</font>

13
00:00:35,840 --> 00:00:39,200
little bit on why Colonel exploits are

14
00:00:37,940 --> 00:00:43,099
important and relevant especially

15
00:00:39,200 --> 00:00:46,190
nowadays and then we'll go through<font color="#CCCCCC"> all</font>

16
00:00:43,100 --> 00:00:49,160
this nice acronyms AV image maps and

17
00:00:46,190 --> 00:00:51,680
boxy deep safe hips and we'll just try

18
00:00:49,160 --> 00:00:54,440
to figure<font color="#E5E5E5"> out how these security</font>

19
00:00:51,680 --> 00:00:58,730
solutions relate to problems with

20
00:00:54,440 --> 00:01:00,860
Colonel exploits<font color="#CCCCCC"> okay so different</font>

21
00:00:58,730 --> 00:01:04,339
between come about in user mode so it's

22
00:01:00,860 --> 00:01:06,770
all rooted in the hardware from<font color="#E5E5E5"> hardware</font>

23
00:01:04,339 --> 00:01:09,109
<font color="#E5E5E5">perspective Intel compatible</font><font color="#CCCCCC"> CPUs have</font>

24
00:01:06,770 --> 00:01:12,109
for privilege levels<font color="#CCCCCC"> named drinks and</font>

25
00:01:09,109 --> 00:01:13,969
numbered from 0 to 3 most of the

26
00:01:12,109 --> 00:01:16,639
operating<font color="#E5E5E5"> system use only two of them</font>

27
00:01:13,969 --> 00:01:18,708
ring 0 and rings three innings 0 with

28
00:01:16,639 --> 00:01:22,068
the privileged one effectively there is

29
00:01:18,709 --> 00:01:23,959
no restrictions on what ring 0 God code

30
00:01:22,069 --> 00:01:27,229
can do to the rest of the system and

31
00:01:23,959 --> 00:01:29,869
that's why the colonel part of the

32
00:01:27,229 --> 00:01:32,590
operating system that needs all the

33
00:01:29,869 --> 00:01:38,810
privileges needs to talk to the hardware

34
00:01:32,590 --> 00:01:41,749
must execute with ring 0 privileges so

35
00:01:38,810 --> 00:01:44,299
that's that's when Colonel Ellis and

36
00:01:41,749 --> 00:01:48,380
ring 0 is a non privileged mode of

37
00:01:44,299 --> 00:01:51,889
execution right and all the user

38
00:01:48,380 --> 00:01:55,009
application browsers spreadsheets

39
00:01:51,889 --> 00:01:57,649
whatever live in ring ring free and

40
00:01:55,009 --> 00:02:00,079
again<font color="#E5E5E5"> because it's unprivileged it can</font>

41
00:01:57,649 --> 00:02:02,499
do<font color="#E5E5E5"> only what ring 0 allows it to do or</font>

42
00:02:00,079 --> 00:02:05,899
configure it to do<font color="#E5E5E5"> so for instance</font>

43
00:02:02,499 --> 00:02:08,660
particularly ring 3 code cannot access

44
00:02:05,899 --> 00:02:11,030
the memory used by ring 0 code directly

45
00:02:08,660 --> 00:02:13,640
it's it's not allowed and that's why

46
00:02:11,030 --> 00:02:14,460
ring 0 code is protected<font color="#E5E5E5"> from malicious</font>

47
00:02:13,640 --> 00:02:16,799
links

48
00:02:14,460 --> 00:02:20,190
and it also means<font color="#E5E5E5"> that all</font><font color="#CCCCCC"> the security</font>

49
00:02:16,800 --> 00:02:22,770
controls access controls etc should live

50
00:02:20,190 --> 00:02:26,340
in ring 0 which is protected<font color="#CCCCCC"> from</font>

51
00:02:22,770 --> 00:02:31,140
malicious rings ago so<font color="#E5E5E5"> really quick</font>

52
00:02:26,340 --> 00:02:33,390
interaction<font color="#CCCCCC"> ok so we say ring 0 is</font>

53
00:02:31,140 --> 00:02:36,630
privileged all-powerful so no<font color="#E5E5E5"> wonder</font>

54
00:02:33,390 --> 00:02:38,880
that malicious code attackers would like

55
00:02:36,630 --> 00:02:41,600
to get<font color="#E5E5E5"> a very</font><font color="#CCCCCC"> key to execute code in</font>

56
00:02:38,880 --> 00:02:46,109
this mode in this all-powerful mode

57
00:02:41,600 --> 00:02:48,359
however normally<font color="#CCCCCC"> kernel is not exposed</font>

58
00:02:46,110 --> 00:02:50,460
<font color="#E5E5E5">directly to the malicious payload from</font>

59
00:02:48,360 --> 00:02:53,220
the attacker usually attacker interacts

60
00:02:50,460 --> 00:02:56,820
directly with some application like a

61
00:02:53,220 --> 00:02:59,130
browser or office application so stages

62
00:02:56,820 --> 00:03:01,380
of an attack when we talk about Colonel

63
00:02:59,130 --> 00:03:03,690
exploits usually involve these three

64
00:03:01,380 --> 00:03:05,880
steps first attacker means to achieve

65
00:03:03,690 --> 00:03:09,329
code execution in context of the user

66
00:03:05,880 --> 00:03:11,549
mode application so it for instance you

67
00:03:09,330 --> 00:03:14,160
craft some malformed HTML file we just

68
00:03:11,550 --> 00:03:16,470
<font color="#CCCCCC">passed</font><font color="#E5E5E5"> the browser and then you exploit</font>

69
00:03:14,160 --> 00:03:19,350
a browser you have ability to<font color="#CCCCCC"> run</font>

70
00:03:16,470 --> 00:03:22,320
arbitrary code and then once we have it

71
00:03:19,350 --> 00:03:24,269
we can prepare<font color="#E5E5E5"> and run special user mode</font>

72
00:03:22,320 --> 00:03:26,790
code that interacts with<font color="#E5E5E5"> the colonel and</font>

73
00:03:24,270 --> 00:03:29,040
try to exploit vulnerability in it<font color="#CCCCCC"> and</font>

74
00:03:26,790 --> 00:03:33,390
as as a result get ability to run

75
00:03:29,040 --> 00:03:35,010
arbitrary kernel mode code and then<font color="#CCCCCC"> the</font>

76
00:03:33,390 --> 00:03:37,019
purpose of the exercise<font color="#E5E5E5"> is ability to</font>

77
00:03:35,010 --> 00:03:38,959
run something useful in in the in the

78
00:03:37,020 --> 00:03:42,570
kernel mode to do something useful with

79
00:03:38,960 --> 00:03:45,500
disability and again these three steps

80
00:03:42,570 --> 00:03:49,019
of attacks are pretty common nowadays

81
00:03:45,500 --> 00:03:50,790
especially for skilled attackers if you

82
00:03:49,020 --> 00:03:52,260
look<font color="#E5E5E5"> at some high-profile events for</font>

83
00:03:50,790 --> 00:03:55,440
instance like bound to own<font color="#E5E5E5"> at</font>

84
00:03:52,260 --> 00:03:58,230
consequence similar things this pattern

85
00:03:55,440 --> 00:04:01,109
is in all the time when when trying to

86
00:03:58,230 --> 00:04:03,299
<font color="#E5E5E5">for instance get full bypass of the</font>

87
00:04:01,110 --> 00:04:06,060
security imposed by<font color="#E5E5E5"> the browser sandbox</font>

88
00:04:03,300 --> 00:04:09,540
etc and<font color="#E5E5E5"> for</font><font color="#CCCCCC"> instance mwr guys are pretty</font>

89
00:04:06,060 --> 00:04:14,100
effective at it so you can talk to<font color="#E5E5E5"> them</font>

90
00:04:09,540 --> 00:04:16,529
about it<font color="#CCCCCC"> okay so let's assume we already</font>

91
00:04:14,100 --> 00:04:18,750
managed to be able<font color="#E5E5E5"> to run arbitrary code</font>

92
00:04:16,529 --> 00:04:20,579
in the context of the colonel<font color="#E5E5E5"> so what we</font>

93
00:04:18,750 --> 00:04:23,970
should should we do and depends on the

94
00:04:20,579 --> 00:04:27,200
goal and the<font color="#E5E5E5"> most typical scenario is</font>

95
00:04:23,970 --> 00:04:29,780
that all<font color="#CCCCCC"> we do we just</font>

96
00:04:27,200 --> 00:04:32,090
grant the calling user mode process the

97
00:04:29,780 --> 00:04:35,059
highest possible privileged in user mode

98
00:04:32,090 --> 00:04:37,700
so the system token and we just returned

99
00:04:35,060 --> 00:04:40,280
to decisional process so that's that's

100
00:04:37,700 --> 00:04:42,979
how it goes we start with<font color="#CCCCCC"> some CMD shell</font>

101
00:04:40,280 --> 00:04:45,260
<font color="#E5E5E5">that's not privileged it runs some low</font>

102
00:04:42,980 --> 00:04:47,720
<font color="#E5E5E5">privileged user we run an exploit code</font>

103
00:04:45,260 --> 00:04:51,140
and then suddenly<font color="#CCCCCC"> kadam we run as</font>

104
00:04:47,720 --> 00:04:54,130
anti-authority system and again this is

105
00:04:51,140 --> 00:04:57,440
<font color="#CCCCCC">the highest possible user mode privilege</font>

106
00:04:54,130 --> 00:04:59,480
this particular tool<font color="#CCCCCC"> I wrote for the</font>

107
00:04:57,440 --> 00:05:02,570
purpose of this presentation to exercise

108
00:04:59,480 --> 00:05:05,060
a couple of<font color="#CCCCCC"> things see more of</font><font color="#E5E5E5"> it later</font>

109
00:05:02,570 --> 00:05:07,610
so again if you look for<font color="#E5E5E5"> instance that</font>

110
00:05:05,060 --> 00:05:09,890
public exploits related to the carnival

111
00:05:07,610 --> 00:05:13,550
<font color="#CCCCCC">Rob youjizz ninety-nine percent of the</font>

112
00:05:09,890 --> 00:05:17,330
time you see this all an attacker needs

113
00:05:13,550 --> 00:05:18,920
from a camera payload is to grant

114
00:05:17,330 --> 00:05:23,960
highest possible privilege to the<font color="#E5E5E5"> user</font>

115
00:05:18,920 --> 00:05:26,330
mode and<font color="#E5E5E5"> it usually is enough especially</font>

116
00:05:23,960 --> 00:05:30,169
when there is no<font color="#E5E5E5"> other security software</font>

117
00:05:26,330 --> 00:05:32,930
running the problem is<font color="#CCCCCC"> that many people</font>

118
00:05:30,170 --> 00:05:36,080
have<font color="#E5E5E5"> become very fixed on this pattern</font>

119
00:05:32,930 --> 00:05:37,760
of exploitation<font color="#E5E5E5"> that they think it's one</font>

120
00:05:36,080 --> 00:05:40,310
to one relationship but whenever you

121
00:05:37,760 --> 00:05:44,120
<font color="#E5E5E5">have an elaborately and cannot exploit</font>

122
00:05:40,310 --> 00:05:49,040
you have to do this elevation<font color="#CCCCCC"> of usable</font>

123
00:05:44,120 --> 00:05:52,040
process and that's totally not true it's

124
00:05:49,040 --> 00:05:54,830
totally the other way around again once

125
00:05:52,040 --> 00:05:57,140
we<font color="#E5E5E5"> have ability</font><font color="#CCCCCC"> to run arbitrary code in</font>

126
00:05:54,830 --> 00:06:00,950
in kernel mode we<font color="#CCCCCC"> can essentially do</font>

127
00:05:57,140 --> 00:06:04,400
anything particularly again once<font color="#E5E5E5"> we have</font>

128
00:06:00,950 --> 00:06:06,800
ability<font color="#E5E5E5"> to run code in kernel mode all</font>

129
00:06:04,400 --> 00:06:08,599
the security<font color="#CCCCCC"> measures implemented in</font>

130
00:06:06,800 --> 00:06:14,000
camel or in the user mode can be

131
00:06:08,600 --> 00:06:17,390
bypassed and one obvious reason why it

132
00:06:14,000 --> 00:06:19,940
is possible is<font color="#CCCCCC"> that as I</font><font color="#E5E5E5"> mentioned</font>

133
00:06:17,390 --> 00:06:22,640
before kernel memory is protected<font color="#CCCCCC"> from</font>

134
00:06:19,940 --> 00:06:24,920
malicious user mode by page tables but

135
00:06:22,640 --> 00:06:28,430
there<font color="#E5E5E5"> is no way to protect kernel memory</font>

136
00:06:24,920 --> 00:06:30,620
or kernel code from itself<font color="#E5E5E5"> right so once</font>

137
00:06:28,430 --> 00:06:32,690
an attacker has ability to run code in

138
00:06:30,620 --> 00:06:34,430
the kernel mode it can do<font color="#E5E5E5"> anything it</font>

139
00:06:32,690 --> 00:06:36,320
wants with all the code running in the

140
00:06:34,430 --> 00:06:39,050
colonel it can overwrite it with

141
00:06:36,320 --> 00:06:41,330
schnapps it can zero it out completely

142
00:06:39,050 --> 00:06:43,550
or can force your favorite

143
00:06:41,330 --> 00:06:46,698
security solution to compute like 1

144
00:06:43,550 --> 00:06:50,599
million digits of pi number simply there

145
00:06:46,699 --> 00:06:55,490
is there is no barrier anymore at<font color="#CCCCCC"> least</font>

146
00:06:50,599 --> 00:06:58,039
that the theory because in reality you

147
00:06:55,490 --> 00:07:00,650
cannot<font color="#E5E5E5"> just you know not out wipe out</font>

148
00:06:58,039 --> 00:07:02,889
all the executable code running in the

149
00:07:00,650 --> 00:07:05,530
colonel for instance<font color="#CCCCCC"> um kernel driver</font>

150
00:07:02,889 --> 00:07:08,990
because the system would probably crash

151
00:07:05,530 --> 00:07:13,008
so in<font color="#CCCCCC"> reality it's non-trivial to</font>

152
00:07:08,990 --> 00:07:15,229
actually disable completely a given

153
00:07:13,009 --> 00:07:17,090
security solution say hips or whatever

154
00:07:15,229 --> 00:07:19,909
because what you would<font color="#CCCCCC"> have to do is to</font>

155
00:07:17,090 --> 00:07:22,190
thoroughly reverse-engineer its

156
00:07:19,909 --> 00:07:24,770
internals learn how the code operates

157
00:07:22,190 --> 00:07:27,860
which have the ways that you can disable

158
00:07:24,770 --> 00:07:30,440
it all together and<font color="#E5E5E5"> it takes a little</font>

159
00:07:27,860 --> 00:07:32,229
bit more time and<font color="#E5E5E5"> it's really dull job</font>

160
00:07:30,440 --> 00:07:35,180
because it's specific to a single

161
00:07:32,229 --> 00:07:36,650
<font color="#E5E5E5">security solutions might be even bound a</font>

162
00:07:35,180 --> 00:07:38,810
particular version of the software so

163
00:07:36,650 --> 00:07:42,080
it's not much much interesting it's

164
00:07:38,810 --> 00:07:43,939
possible though in principle what's more

165
00:07:42,080 --> 00:07:47,448
interesting is that there<font color="#E5E5E5"> are a couple</font>

166
00:07:43,939 --> 00:07:50,120
of methods which are generic that should

167
00:07:47,449 --> 00:07:53,680
work against<font color="#E5E5E5"> almost all security</font>

168
00:07:50,120 --> 00:07:56,539
solutions and even though they do not

169
00:07:53,680 --> 00:07:58,370
disable it complete your<font color="#CCCCCC"> toki wipe</font><font color="#E5E5E5"> it</font>

170
00:07:56,539 --> 00:08:00,919
out from the system<font color="#CCCCCC"> they're good</font><font color="#E5E5E5"> enough</font>

171
00:07:58,370 --> 00:08:04,460
to break some protection methods and

172
00:08:00,919 --> 00:08:06,529
these are the most most interesting and

173
00:08:04,460 --> 00:08:08,599
<font color="#E5E5E5">it is what I would</font><font color="#CCCCCC"> like to talk about so</font>

174
00:08:06,529 --> 00:08:10,099
again<font color="#CCCCCC"> just remember this single sentence</font>

175
00:08:08,599 --> 00:08:12,139
from the whole presentation that once

176
00:08:10,099 --> 00:08:14,599
you are in<font color="#E5E5E5"> the kernel mode all security</font>

177
00:08:12,139 --> 00:08:18,710
protections methods that are in kernel

178
00:08:14,599 --> 00:08:20,210
mode are gone and for the majority of

179
00:08:18,710 --> 00:08:22,128
<font color="#E5E5E5">the presentation we'll just talk</font><font color="#CCCCCC"> about a</font>

180
00:08:20,210 --> 00:08:25,580
few generic methods which may not<font color="#CCCCCC"> be</font>

181
00:08:22,129 --> 00:08:29,139
<font color="#E5E5E5">complete but can be sufficiently</font>

182
00:08:25,580 --> 00:08:32,838
effective and again such methods are

183
00:08:29,139 --> 00:08:35,149
<font color="#CCCCCC">well known in the literature</font><font color="#E5E5E5"> the oldest</font>

184
00:08:32,839 --> 00:08:38,269
<font color="#E5E5E5">one i found was just clearing her</font>

185
00:08:35,149 --> 00:08:41,899
callback tables so essentially make the

186
00:08:38,269 --> 00:08:44,660
water blind so how it<font color="#CCCCCC"> works for instance</font>

187
00:08:41,899 --> 00:08:47,480
<font color="#E5E5E5">again let's think about typical hips</font>

188
00:08:44,660 --> 00:08:49,610
scenario the hips kernel driver would

189
00:08:47,480 --> 00:08:51,440
like to know<font color="#E5E5E5"> whenever a</font><font color="#CCCCCC"> new process is</font>

190
00:08:49,610 --> 00:08:52,880
created right so it can hook it

191
00:08:51,440 --> 00:08:55,400
inspected

192
00:08:52,880 --> 00:08:57,850
cetera<font color="#E5E5E5"> so the common way to do it is to</font>

193
00:08:55,400 --> 00:09:00,590
register<font color="#CCCCCC"> a call back with a</font><font color="#E5E5E5"> colonel</font>

194
00:08:57,850 --> 00:09:02,300
using<font color="#E5E5E5"> certain API so that's saying dear</font>

195
00:09:00,590 --> 00:09:06,020
Colonel please let me know another new

196
00:09:02,300 --> 00:09:08,750
process is created and because this API

197
00:09:06,020 --> 00:09:10,939
is well defined the malware running in

198
00:09:08,750 --> 00:09:12,680
kernel mode can match the data

199
00:09:10,940 --> 00:09:14,720
structures used by the api's it can

200
00:09:12,680 --> 00:09:16,550
simply<font color="#E5E5E5"> clear all registered</font><font color="#CCCCCC"> colonel</font>

201
00:09:14,720 --> 00:09:18,890
<font color="#E5E5E5">called</font><font color="#CCCCCC"> Commerce and it's very easy</font>

202
00:09:16,550 --> 00:09:21,550
malware actually does it there are

203
00:09:18,890 --> 00:09:25,550
examples of it and the effect is that

204
00:09:21,550 --> 00:09:27,229
<font color="#E5E5E5">again the suit is this security product</font>

205
00:09:25,550 --> 00:09:30,260
no longer receive notifications on the

206
00:09:27,230 --> 00:09:32,390
<font color="#E5E5E5">colonel so it's still resides in the</font>

207
00:09:30,260 --> 00:09:35,740
memory but it gets no events from the

208
00:09:32,390 --> 00:09:38,540
colonel so<font color="#E5E5E5"> essentially it gets blind I</font>

209
00:09:35,740 --> 00:09:41,810
think the<font color="#CCCCCC"> unreal rootkit work was the</font>

210
00:09:38,540 --> 00:09:45,170
first one to include another generic

211
00:09:41,810 --> 00:09:48,050
technique is migration<font color="#CCCCCC"> of code injection</font>

212
00:09:45,170 --> 00:09:50,689
tar Beach<font color="#CCCCCC"> our user mode processes so</font>

213
00:09:48,050 --> 00:09:52,670
again we're not trying to talk you wipe

214
00:09:50,690 --> 00:09:55,310
out a given security solution from the

215
00:09:52,670 --> 00:09:57,770
<font color="#E5E5E5">system instead what we try to achieve is</font>

216
00:09:55,310 --> 00:10:00,829
to get control<font color="#CCCCCC"> over each and every</font>

217
00:09:57,770 --> 00:10:03,980
process user mode process which is again

218
00:10:00,830 --> 00:10:06,140
good enough it means usually means you

219
00:10:03,980 --> 00:10:09,010
have all access to the system we see

220
00:10:06,140 --> 00:10:12,020
examples so once again these<font color="#CCCCCC"> are</font>

221
00:10:09,010 --> 00:10:14,090
examples of generic approaches not

222
00:10:12,020 --> 00:10:19,180
guaranteed to<font color="#E5E5E5"> work every</font><font color="#CCCCCC"> time but we'll</font>

223
00:10:14,090 --> 00:10:22,280
see it works good enough aunt in

224
00:10:19,180 --> 00:10:24,800
generally theoretically you can really

225
00:10:22,280 --> 00:10:26,530
disabled or wipe out any code that

226
00:10:24,800 --> 00:10:30,579
resides in the colonel once you have

227
00:10:26,530 --> 00:10:34,600
<font color="#E5E5E5">ability to execute code in the camera</font>

228
00:10:30,580 --> 00:10:38,200
<font color="#E5E5E5">okay and why it is all relevant nowadays</font>

229
00:10:34,600 --> 00:10:41,450
there would be<font color="#E5E5E5"> no much not big deal if</font>

230
00:10:38,200 --> 00:10:44,270
the colonel was secure again the stock

231
00:10:41,450 --> 00:10:46,970
is exclusively about windows so whenever

232
00:10:44,270 --> 00:10:49,699
I would say Caroline windows cannot so

233
00:10:46,970 --> 00:10:52,310
if there was no easy way to exploit

234
00:10:49,700 --> 00:10:54,880
<font color="#CCCCCC">windows kernel and get code execution in</font>

235
00:10:52,310 --> 00:10:58,569
context of it it would<font color="#E5E5E5"> be not a problem</font>

236
00:10:54,880 --> 00:11:03,939
unfortunate reality is a bit different

237
00:10:58,570 --> 00:11:05,779
again<font color="#E5E5E5"> in 2013 only there</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> 76</font><font color="#CCCCCC"> seguin</font>

238
00:11:03,940 --> 00:11:08,120
<font color="#E5E5E5">identifiers</font>

239
00:11:05,779 --> 00:11:10,970
allocated for<font color="#E5E5E5"> Windows vulnerabilities</font>

240
00:11:08,120 --> 00:11:13,699
only windows camera so yes it is<font color="#CCCCCC"> a big</font>

241
00:11:10,970 --> 00:11:17,959
problem and again if you look at events

242
00:11:13,699 --> 00:11:19,969
like bone bone cancer quest or HP the DI

243
00:11:17,959 --> 00:11:24,768
<font color="#E5E5E5">that's really what's what's happening</font>

244
00:11:19,970 --> 00:11:30,129
now<font color="#CCCCCC"> ok so that was kind of introduction</font>

245
00:11:24,769 --> 00:11:32,899
and now let's just briefly look at many

246
00:11:30,129 --> 00:11:35,300
security solutions and see how they

247
00:11:32,899 --> 00:11:37,730
relate to<font color="#E5E5E5"> or how</font><font color="#CCCCCC"> how they are supposed</font>

248
00:11:35,300 --> 00:11:42,758
<font color="#CCCCCC">to protect against kernel-mode</font>

249
00:11:37,730 --> 00:11:46,490
vulnerabilities so first antiviruses

250
00:11:42,759 --> 00:11:49,910
again what they trying to do typically

251
00:11:46,490 --> 00:11:52,879
what typical AV tries to do is to well

252
00:11:49,910 --> 00:11:54,920
prevent this first stage of attack so

253
00:11:52,879 --> 00:11:58,240
even not allow some malicious payload

254
00:11:54,920 --> 00:12:02,779
enter the vulnerable application right

255
00:11:58,240 --> 00:12:04,819
and nowadays the term ad is not well

256
00:12:02,779 --> 00:12:07,040
defined again for the purpose of the

257
00:12:04,819 --> 00:12:09,099
presentation I mean<font color="#E5E5E5"> IV is just scanning</font>

258
00:12:07,040 --> 00:12:14,029
for signatures in user mode that's

259
00:12:09,100 --> 00:12:15,889
typical what we expect from from ad they

260
00:12:14,029 --> 00:12:19,759
can do other things but<font color="#CCCCCC"> let's focus on</font>

261
00:12:15,889 --> 00:12:24,170
that so it means<font color="#E5E5E5"> it's not very relevant</font>

262
00:12:19,759 --> 00:12:26,930
to the subject right ad has no way to

263
00:12:24,170 --> 00:12:30,800
interact to prevent exploiting Colonel

264
00:12:26,930 --> 00:12:34,719
violet Van<font color="#CCCCCC"> rabbit and it would be</font>

265
00:12:30,800 --> 00:12:36,889
relevant if ad was capable of actually

266
00:12:34,720 --> 00:12:39,050
preventing the malicious code running in

267
00:12:36,889 --> 00:12:41,449
user mode right if it worked but<font color="#E5E5E5"> if he</font>

268
00:12:39,050 --> 00:12:43,279
does not<font color="#E5E5E5"> work does</font><font color="#CCCCCC"> not work 40 days</font>

269
00:12:41,449 --> 00:12:46,399
almost<font color="#E5E5E5"> by definition because 0 days</font>

270
00:12:43,279 --> 00:12:49,279
means now available signatures and in

271
00:12:46,399 --> 00:12:51,170
fact<font color="#CCCCCC"> even if you try</font><font color="#E5E5E5"> to exploit a</font>

272
00:12:49,279 --> 00:12:53,689
well-known all vulnerability it's

273
00:12:51,170 --> 00:12:56,420
usually<font color="#E5E5E5"> trivial to just you know tweak</font>

274
00:12:53,689 --> 00:12:58,490
exploit code just to not carry some

275
00:12:56,420 --> 00:13:01,040
offending pattern in it so instance if

276
00:12:58,490 --> 00:13:03,499
you try to<font color="#CCCCCC"> use some well-known she'll</font>

277
00:13:01,040 --> 00:13:05,179
call from<font color="#CCCCCC"> metasploit we cannot include</font>

278
00:13:03,499 --> 00:13:08,089
it in the clear because IV will catch a

279
00:13:05,179 --> 00:13:12,759
TD you just need to encode it in some

280
00:13:08,089 --> 00:13:17,179
stupid and smell all offers are

281
00:13:12,759 --> 00:13:19,649
<font color="#CCCCCC">well-known to</font><font color="#E5E5E5"> test their malware against</font>

282
00:13:17,179 --> 00:13:21,749
men<font color="#CCCCCC"> ids before their</font><font color="#E5E5E5"> wrist</font>

283
00:13:19,649 --> 00:13:27,269
and they do a pretty decent job with<font color="#E5E5E5"> it</font>

284
00:13:21,749 --> 00:13:29,369
and again<font color="#E5E5E5"> I uploaded this tool that</font>

285
00:13:27,269 --> 00:13:33,059
exploits a single vulnerability and as

286
00:13:29,369 --> 00:13:36,480
you see none of the supported antivirus

287
00:13:33,059 --> 00:13:39,059
see anything<font color="#CCCCCC"> crumble so generally</font><font color="#E5E5E5"> AV is</font>

288
00:13:36,480 --> 00:13:43,139
not relevant and for the topic of

289
00:13:39,059 --> 00:13:46,618
<font color="#CCCCCC">carnarvon army Frankie does not work so</font>

290
00:13:43,139 --> 00:13:48,529
another nice acronym<font color="#CCCCCC"> image again it</font>

291
00:13:46,619 --> 00:13:51,300
tries to disrupt this first stage of

292
00:13:48,529 --> 00:13:53,339
exploitation<font color="#E5E5E5"> but a little bit later it</font>

293
00:13:51,300 --> 00:13:56,248
does<font color="#E5E5E5"> not prevent the entry of malformed</font>

294
00:13:53,339 --> 00:13:58,619
<font color="#E5E5E5">data to</font><font color="#CCCCCC"> the application but it tries to</font>

295
00:13:56,249 --> 00:14:01,980
prevent actual execution of arbitrary

296
00:13:58,619 --> 00:14:03,959
code so it<font color="#E5E5E5"> does</font><font color="#CCCCCC"> not prevent triggering</font>

297
00:14:01,980 --> 00:14:08,189
of the<font color="#E5E5E5"> actual vulnerability in the user</font>

298
00:14:03,959 --> 00:14:11,399
mode but tries to prevent attacker from

299
00:14:08,189 --> 00:14:15,209
running<font color="#CCCCCC"> urban area code</font><font color="#E5E5E5"> and how it works</font>

300
00:14:11,399 --> 00:14:17,819
<font color="#CCCCCC">Emmitt is essentially a set of hooks in</font>

301
00:14:15,209 --> 00:14:22,429
user mode libraries like kernel32.dll or

302
00:14:17,819 --> 00:14:25,319
<font color="#E5E5E5">anti dll that tries to</font><font color="#CCCCCC"> catch many</font>

303
00:14:22,429 --> 00:14:27,870
behaviors exposed by common<font color="#E5E5E5"> shellcode or</font>

304
00:14:25,319 --> 00:14:32,878
or opting for instance whenever it sees

305
00:14:27,870 --> 00:14:35,129
that sounding tries to write to execute

306
00:14:32,879 --> 00:14:38,100
virtual protect function on the stack so

307
00:14:35,129 --> 00:14:40,249
make a stack executable then it panics

308
00:14:38,100 --> 00:14:44,670
right<font color="#E5E5E5"> because that behavior will not be</font>

309
00:14:40,249 --> 00:14:48,509
exhibited by any normal software the

310
00:14:44,670 --> 00:14:51,959
only case when it happens is when the

311
00:14:48,509 --> 00:14:53,730
rope chain is running again not very

312
00:14:51,959 --> 00:14:56,518
<font color="#E5E5E5">much relevant to the topic of</font><font color="#CCCCCC"> carnarvon</font>

313
00:14:53,730 --> 00:15:01,439
remedies<font color="#E5E5E5"> Emmitt is not related</font><font color="#CCCCCC"> to</font>

314
00:14:56,519 --> 00:15:04,350
preventing<font color="#E5E5E5"> Colonel exploits and again it</font>

315
00:15:01,439 --> 00:15:06,799
would<font color="#E5E5E5"> be nice if it worked but even</font>

316
00:15:04,350 --> 00:15:10,319
<font color="#E5E5E5">Microsoft admits that it's just you know</font>

317
00:15:06,799 --> 00:15:14,309
hires the bar makes exploitation more

318
00:15:10,319 --> 00:15:15,660
difficult but it's all by possible and I

319
00:15:14,309 --> 00:15:18,029
won't<font color="#CCCCCC"> dwell on it because it's not</font><font color="#E5E5E5"> much</font>

320
00:15:15,660 --> 00:15:21,809
relevant but you can see the paper of my

321
00:15:18,029 --> 00:15:25,079
colleague Jared<font color="#E5E5E5"> chess pub recently broke</font>

322
00:15:21,809 --> 00:15:28,490
all the protection in image 4.1 so again

323
00:15:25,079 --> 00:15:30,680
not<font color="#E5E5E5"> relevant and not three</font><font color="#CCCCCC"> words</font>

324
00:15:28,490 --> 00:15:34,160
ok so now finally we get to something

325
00:15:30,680 --> 00:15:38,060
related to Colonel vulnerabilities SME<font color="#CCCCCC"> T</font>

326
00:15:34,160 --> 00:15:40,910
now it tries to<font color="#E5E5E5"> break the latest stage</font>

327
00:15:38,060 --> 00:15:46,520
of<font color="#CCCCCC"> exploits so running useful Colonel</font>

328
00:15:40,910 --> 00:15:52,579
payload and SME p is actually a feature

329
00:15:46,520 --> 00:15:55,189
in more or less new Intel CPUs the trick

330
00:15:52,580 --> 00:15:59,060
<font color="#CCCCCC">is to forbid running the code</font><font color="#E5E5E5"> that</font>

331
00:15:55,190 --> 00:16:01,220
stored in user mode memory if it runs

332
00:15:59,060 --> 00:16:03,439
with Colonel privileges that's the

333
00:16:01,220 --> 00:16:05,959
common way how<font color="#CCCCCC"> Colonel XO it works you</font>

334
00:16:03,440 --> 00:16:08,120
prepare your shellcode in the memory

335
00:16:05,959 --> 00:16:10,579
that<font color="#CCCCCC"> you have access to</font><font color="#E5E5E5"> so new thermal</font>

336
00:16:08,120 --> 00:16:12,700
memory then corrupt the kernel state so

337
00:16:10,580 --> 00:16:16,480
the execution is diverted into your

338
00:16:12,700 --> 00:16:20,899
shellcode that you have people and

339
00:16:16,480 --> 00:16:25,190
Anthony peep prevents exactly that well

340
00:16:20,899 --> 00:16:27,320
for in<font color="#E5E5E5"> order for</font><font color="#CCCCCC"> it to work at all there</font>

341
00:16:25,190 --> 00:16:28,880
is an assumption that attacker must

342
00:16:27,320 --> 00:16:31,250
prepare<font color="#E5E5E5"> its shell code in user mode</font>

343
00:16:28,880 --> 00:16:35,149
right if it was possible for an attacker

344
00:16:31,250 --> 00:16:39,649
to prepare arbitrary memory contents in

345
00:16:35,149 --> 00:16:41,540
kernel mode which is executable then s

346
00:16:39,649 --> 00:16:43,790
<font color="#E5E5E5">MEP would be relevant because attacker</font>

347
00:16:41,540 --> 00:16:46,880
would just try to execute code that is

348
00:16:43,790 --> 00:16:48,800
stored in internal pages and<font color="#E5E5E5"> window</font><font color="#CCCCCC"> site</font>

349
00:16:46,880 --> 00:16:51,500
on 64 bits that's pretty decent job

350
00:16:48,800 --> 00:16:55,520
<font color="#E5E5E5">about it on 32 bits easily broken but</font>

351
00:16:51,500 --> 00:16:58,279
let's assume<font color="#CCCCCC"> that it's fine okay so</font>

352
00:16:55,520 --> 00:17:00,020
that's that<font color="#CCCCCC"> is pretty cool it's very</font>

353
00:16:58,279 --> 00:17:04,220
sensible thing to do it should be done

354
00:17:00,020 --> 00:17:06,740
from the<font color="#E5E5E5"> very beginning but again the</font>

355
00:17:04,220 --> 00:17:10,910
generic bypasses is available so just

356
00:17:06,740 --> 00:17:13,880
like around 2003 malware authors begin

357
00:17:10,910 --> 00:17:16,490
to bypass<font color="#CCCCCC"> dep or an</font><font color="#E5E5E5"> X by using a rope in</font>

358
00:17:13,880 --> 00:17:20,120
user mode so<font color="#E5E5E5"> you can generally bypass</font>

359
00:17:16,490 --> 00:17:23,839
SME p by doing return oriented

360
00:17:20,119 --> 00:17:27,198
programming within the kernel and the

361
00:17:23,839 --> 00:17:29,149
usually suggested way is that first you

362
00:17:27,199 --> 00:17:31,370
jump into the piece<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the kernel code</font>

363
00:17:29,150 --> 00:17:33,800
that will disable a semi p by clearing

364
00:17:31,370 --> 00:17:35,540
this particular bit and then you're

365
00:17:33,800 --> 00:17:38,080
allowed to execute code in user mode

366
00:17:35,540 --> 00:17:38,080
membranous

367
00:17:39,400 --> 00:17:47,050
yeah yeah so the vulnerability that I

368
00:17:45,520 --> 00:17:52,000
studied a little bit for<font color="#CCCCCC"> the purpose of</font>

369
00:17:47,050 --> 00:17:53,860
<font color="#E5E5E5">this presentation is 2013 360 this</font>

370
00:17:52,000 --> 00:17:56,740
vulnerability primitive allows you to

371
00:17:53,860 --> 00:17:59,290
override arbitrary location in the

372
00:17:56,740 --> 00:18:01,960
kernel doing the kernel with an address

373
00:17:59,290 --> 00:18:05,770
<font color="#E5E5E5">of the kernel buffer and let's see what</font>

374
00:18:01,960 --> 00:18:07,960
how the public proof-of-concept calls

375
00:18:05,770 --> 00:18:11,139
from tablets or Mandy how it works it

376
00:18:07,960 --> 00:18:13,270
over us a kernel code pointer so it

377
00:18:11,140 --> 00:18:14,890
overrides<font color="#CCCCCC"> a location in the kernel</font>

378
00:18:13,270 --> 00:18:17,590
memory that stores the pointer to the

379
00:18:14,890 --> 00:18:19,920
code and it's<font color="#CCCCCC"> over eyes again it</font><font color="#E5E5E5"> with</font>

380
00:18:17,590 --> 00:18:22,810
the address<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> user mode share code</font>

381
00:18:19,920 --> 00:18:24,850
the code stored in the user mode ladies

382
00:18:22,810 --> 00:18:27,370
and then because of this vulnerability

383
00:18:24,850 --> 00:18:29,199
the state of the colonel<font color="#E5E5E5"> is corrupted so</font>

384
00:18:27,370 --> 00:18:33,310
that it jumps into this user mode

385
00:18:29,200 --> 00:18:37,840
payload and if you run this exploit on

386
00:18:33,310 --> 00:18:40,389
windows 8 on your<font color="#CCCCCC"> cpu you get this you</font>

387
00:18:37,840 --> 00:18:41,770
<font color="#E5E5E5">get a bag check</font><font color="#CCCCCC"> as you can see in the</font>

388
00:18:40,390 --> 00:18:45,100
bottom<font color="#E5E5E5"> attempted execute of</font>

389
00:18:41,770 --> 00:18:47,350
non-executive never so this<font color="#E5E5E5"> protections</font>

390
00:18:45,100 --> 00:18:51,219
reworks of this particular exploit right

391
00:18:47,350 --> 00:18:58,600
<font color="#CCCCCC">it's it's it works how design so that's</font>

392
00:18:51,220 --> 00:19:01,600
nice um again there is no attacker has

393
00:18:58,600 --> 00:19:05,439
other ways right if it gets a little bit

394
00:19:01,600 --> 00:19:07,270
more constructive it can be bypassed so

395
00:19:05,440 --> 00:19:09,670
I<font color="#CCCCCC"> came with with this little bit</font>

396
00:19:07,270 --> 00:19:14,050
interesting tweak how to exploit this

397
00:19:09,670 --> 00:19:16,150
vulnerability so first you do not

398
00:19:14,050 --> 00:19:19,000
overwrite the code pointer immediately

399
00:19:16,150 --> 00:19:21,910
but first<font color="#E5E5E5"> you override a certain current</font>

400
00:19:19,000 --> 00:19:26,560
variable named<font color="#CCCCCC"> NTN i'm using probe</font>

401
00:19:21,910 --> 00:19:29,470
address which<font color="#E5E5E5"> stores the highest user</font>

402
00:19:26,560 --> 00:19:31,960
mode address so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the rabbit is</font>

403
00:19:29,470 --> 00:19:34,270
consulted by the kernel whenever it

404
00:19:31,960 --> 00:19:36,640
wants to check is a given address kernel

405
00:19:34,270 --> 00:19:39,490
mode or user mode so if you corrupt it

406
00:19:36,640 --> 00:19:42,640
it means that the result<font color="#E5E5E5"> is you can</font>

407
00:19:39,490 --> 00:19:45,820
write<font color="#CCCCCC"> to any colonel location again</font>

408
00:19:42,640 --> 00:19:47,350
because you corrupted this threshold

409
00:19:45,820 --> 00:19:52,270
memory

410
00:19:47,350 --> 00:19:54,370
and if you have it because this this

411
00:19:52,270 --> 00:19:58,030
approach is well known it was like

412
00:19:54,370 --> 00:20:00,159
published in 2011 but the new thing

413
00:19:58,030 --> 00:20:04,000
<font color="#E5E5E5">particularly for SME p is that you can</font>

414
00:20:00,160 --> 00:20:07,090
use this ability to mess with page

415
00:20:04,000 --> 00:20:09,400
tables you<font color="#CCCCCC"> can set the user mode bit in</font>

416
00:20:07,090 --> 00:20:12,520
the page table for some page eggs which

417
00:20:09,400 --> 00:20:14,260
initially was user mode but now you set

418
00:20:12,520 --> 00:20:19,059
this bit and now<font color="#E5E5E5"> Colonel stinks its</font>

419
00:20:14,260 --> 00:20:21,158
kernel mode so the flow is you prepare

420
00:20:19,059 --> 00:20:23,230
your shellcode in your user memory and

421
00:20:21,159 --> 00:20:26,230
then using<font color="#E5E5E5"> this vulnerability you mark</font>

422
00:20:23,230 --> 00:20:29,049
your user memory<font color="#E5E5E5"> s camera right from</font>

423
00:20:26,230 --> 00:20:31,390
from this moment on this page look like

424
00:20:29,049 --> 00:20:35,559
a<font color="#CCCCCC"> corrado</font><font color="#E5E5E5"> and then proceed as before</font>

425
00:20:31,390 --> 00:20:37,630
just buy some corrupting some code

426
00:20:35,559 --> 00:20:44,230
pointer and diverting execution

427
00:20:37,630 --> 00:20:47,770
direction and it works surprisingly<font color="#CCCCCC"> so</font>

428
00:20:44,230 --> 00:20:49,659
in this<font color="#E5E5E5"> stall all you need to do is to</font>

429
00:20:47,770 --> 00:20:53,080
enable this behavior of messing with

430
00:20:49,659 --> 00:20:55,240
page table by adding command-line switch

431
00:20:53,080 --> 00:20:59,908
and then<font color="#E5E5E5"> it works exactly as before</font>

432
00:20:55,240 --> 00:21:02,289
again user mode cmd.exe is granted

433
00:20:59,909 --> 00:21:04,659
elevated privileges and its really works

434
00:21:02,289 --> 00:21:06,129
on windows 8<font color="#E5E5E5"> vulnerable versions of</font>

435
00:21:04,659 --> 00:21:09,210
Windows I to<font color="#CCCCCC"> this honorably</font><font color="#E5E5E5"> right</font>

436
00:21:06,130 --> 00:21:12,940
because<font color="#E5E5E5"> it was patched like a year ago</font>

437
00:21:09,210 --> 00:21:16,299
ok so again it's a common pattern that

438
00:21:12,940 --> 00:21:18,730
there is a protection method that blocks

439
00:21:16,299 --> 00:21:20,679
many common ways of expectation but if

440
00:21:18,730 --> 00:21:23,280
you<font color="#E5E5E5"> just work a little bit harder you</font>

441
00:21:20,679 --> 00:21:23,280
<font color="#E5E5E5">can get around</font>

442
00:21:23,559 --> 00:21:29,420
so a very short note about sandboxie

443
00:21:26,750 --> 00:21:32,390
version<font color="#E5E5E5"> 4 and chrome sandbox bolívar</font>

444
00:21:29,420 --> 00:21:35,390
sandbox is a generic sandbox when you

445
00:21:32,390 --> 00:21:37,970
can run any programs and boxed and

446
00:21:35,390 --> 00:21:41,179
chrome sandbox is sound box designed

447
00:21:37,970 --> 00:21:44,120
only for the browser interestingly in

448
00:21:41,179 --> 00:21:46,100
both these cases the<font color="#E5E5E5"> isolations of the</font>

449
00:21:44,120 --> 00:21:49,939
sandbox process from the<font color="#E5E5E5"> rest of the</font>

450
00:21:46,100 --> 00:21:52,820
system is implemented using usual OS

451
00:21:49,940 --> 00:21:55,630
security mechanisms so the sandbox runs

452
00:21:52,820 --> 00:21:59,830
for instance with a restricted token as

453
00:21:55,630 --> 00:22:03,110
low integrity level etc etc all using

454
00:21:59,830 --> 00:22:06,199
normal<font color="#E5E5E5"> windows operating system</font>

455
00:22:03,110 --> 00:22:08,149
mechanisms and the<font color="#E5E5E5"> problem is</font><font color="#CCCCCC"> that if</font>

456
00:22:06,200 --> 00:22:09,650
you are<font color="#E5E5E5"> able to well steal the</font>

457
00:22:08,150 --> 00:22:11,750
authentication token like we saw before

458
00:22:09,650 --> 00:22:15,890
all these protections are gone

459
00:22:11,750 --> 00:22:17,570
immediately<font color="#E5E5E5"> right because again things</font>

460
00:22:15,890 --> 00:22:20,450
like restricted token<font color="#CCCCCC"> an immediate</font>

461
00:22:17,570 --> 00:22:22,669
instant integrity level are derived from

462
00:22:20,450 --> 00:22:25,460
<font color="#E5E5E5">the current authentication tokens read</font>

463
00:22:22,670 --> 00:22:26,929
process so in order to bypass these two

464
00:22:25,460 --> 00:22:29,120
solutions you don't need to do anything

465
00:22:26,929 --> 00:22:32,570
<font color="#E5E5E5">fancy almost but in principle yes you</font>

466
00:22:29,120 --> 00:22:34,489
<font color="#E5E5E5">just run this common most common kernel</font>

467
00:22:32,570 --> 00:22:36,020
<font color="#E5E5E5">mode payload you get elevated user more</font>

468
00:22:34,490 --> 00:22:38,179
privileges and the sandbox is totally

469
00:22:36,020 --> 00:22:42,710
gone and this time<font color="#E5E5E5"> its total bypass</font>

470
00:22:38,179 --> 00:22:44,660
there is<font color="#E5E5E5"> nothing left one thing that</font><font color="#CCCCCC"> can</font>

471
00:22:42,710 --> 00:22:47,750
run one positive thing<font color="#E5E5E5"> that can be said</font>

472
00:22:44,660 --> 00:22:50,450
<font color="#E5E5E5">about chrome sandbox it it limits the</font>

473
00:22:47,750 --> 00:22:53,360
number of usable<font color="#CCCCCC"> exploits that's</font>

474
00:22:50,450 --> 00:22:57,080
interesting because it runs in<font color="#CCCCCC"> inner</font>

475
00:22:53,360 --> 00:22:59,540
<font color="#E5E5E5">environment in which some resources</font>

476
00:22:57,080 --> 00:23:01,460
required for lunch menu<font color="#E5E5E5"> Colonel actually</font>

477
00:22:59,540 --> 00:23:03,350
are not available for instance you

478
00:23:01,460 --> 00:23:06,320
cannot run a debugger in such an

479
00:23:03,350 --> 00:23:08,899
environment so that's good but<font color="#E5E5E5"> the</font>

480
00:23:06,320 --> 00:23:10,550
problem is that all the exploits related

481
00:23:08,900 --> 00:23:14,750
to the graphics subsystem<font color="#CCCCCC"> arcilla</font>

482
00:23:10,550 --> 00:23:17,360
exploitable and in fact it's the<font color="#E5E5E5"> fact</font>

483
00:23:14,750 --> 00:23:19,630
that within<font color="#E5E5E5"> the windows kernel there is</font>

484
00:23:17,360 --> 00:23:22,610
this<font color="#E5E5E5"> giant blob implementing all the</font>

485
00:23:19,630 --> 00:23:24,020
graphics subsystem it is one of<font color="#CCCCCC"> the</font>

486
00:23:22,610 --> 00:23:26,240
reasons why there are so many

487
00:23:24,020 --> 00:23:29,270
vulnerabilities in<font color="#CCCCCC"> windows kernel again</font>

488
00:23:26,240 --> 00:23:31,610
such a large code base running in kernel

489
00:23:29,270 --> 00:23:33,590
means usually the ladder code base the

490
00:23:31,610 --> 00:23:36,590
more vulnerability severe right

491
00:23:33,590 --> 00:23:38,600
that's<font color="#E5E5E5"> one of the direct reasons again</font>

492
00:23:36,590 --> 00:23:40,100
so this is<font color="#E5E5E5"> not interesting so maybe</font>

493
00:23:38,600 --> 00:23:43,760
let's get to something interesting for a

494
00:23:40,100 --> 00:23:46,959
change sandboxie version 3 so all the

495
00:23:43,760 --> 00:23:50,990
one happens to be more interesting<font color="#CCCCCC"> I</font>

496
00:23:46,960 --> 00:23:53,150
would say it was not<font color="#E5E5E5"> designed with</font>

497
00:23:50,990 --> 00:23:56,090
protecting<font color="#CCCCCC"> colonel exploits in mind but</font>

498
00:23:53,150 --> 00:24:00,100
it happens<font color="#CCCCCC"> too well offer some</font>

499
00:23:56,090 --> 00:24:03,908
resistance and this time this latest

500
00:24:00,100 --> 00:24:08,000
<font color="#E5E5E5">again stage of the execution is targeted</font>

501
00:24:03,909 --> 00:24:11,270
so running useful<font color="#CCCCCC"> Colonel x-play so how</font>

502
00:24:08,000 --> 00:24:15,080
sandbox aversions three works is you can

503
00:24:11,270 --> 00:24:16,760
label some process as a sandbox it said

504
00:24:15,080 --> 00:24:19,580
some<font color="#CCCCCC"> flag in internal data structures</font>

505
00:24:16,760 --> 00:24:21,740
and now whenever this process wants to

506
00:24:19,580 --> 00:24:24,379
request Colonel to do<font color="#E5E5E5"> anything so it</font>

507
00:24:21,740 --> 00:24:27,289
makes a system call then the sandbox the

508
00:24:24,380 --> 00:24:30,169
<font color="#E5E5E5">kernel driver places additional checks</font>

509
00:24:27,289 --> 00:24:32,390
so this time<font color="#CCCCCC"> we do not rely on the</font>

510
00:24:30,169 --> 00:24:34,610
protection implemented by the windows

511
00:24:32,390 --> 00:24:36,740
operating system we play some extra

512
00:24:34,610 --> 00:24:39,229
additional checks and that's that's

513
00:24:36,740 --> 00:24:42,049
different that's definitely<font color="#CCCCCC"> different</font>

514
00:24:39,230 --> 00:24:44,960
and what happens is if you run the

515
00:24:42,049 --> 00:24:47,330
typical<font color="#CCCCCC"> colonel exploit that just</font>

516
00:24:44,960 --> 00:24:49,450
elevates user mode within sandbox see it

517
00:24:47,330 --> 00:24:52,279
seems to succeed so you get

518
00:24:49,450 --> 00:24:53,649
anti-authority system shell but still it

519
00:24:52,279 --> 00:24:56,570
cannot do anything to their solar system

520
00:24:53,649 --> 00:24:59,090
<font color="#E5E5E5">it's cool because it breaches the</font>

521
00:24:56,570 --> 00:25:00,620
windows built-in protection the access

522
00:24:59,090 --> 00:25:04,459
control implemented by<font color="#E5E5E5"> the windows pc</font>

523
00:25:00,620 --> 00:25:10,840
system but<font color="#E5E5E5"> since sandbox driver is</font>

524
00:25:04,460 --> 00:25:10,840
effective let's that's nice definitely

525
00:25:14,590 --> 00:25:23,689
<font color="#CCCCCC">okay and some similar capability can be</font>

526
00:25:21,740 --> 00:25:27,070
expected from host intrusion prevention

527
00:25:23,690 --> 00:25:30,980
system hips is again very<font color="#E5E5E5"> fuzzy term</font>

528
00:25:27,070 --> 00:25:32,840
millions of flavors of hits and again<font color="#CCCCCC"> I</font>

529
00:25:30,980 --> 00:25:36,529
cannot claim<font color="#CCCCCC"> my I even know about</font><font color="#E5E5E5"> all of</font>

530
00:25:32,840 --> 00:25:38,899
them but generally what you can expect

531
00:25:36,529 --> 00:25:40,940
some hedges first user not exploitation

532
00:25:38,899 --> 00:25:43,250
prevention so some cooks in in user mode

533
00:25:40,940 --> 00:25:46,309
that tries to disrupt<font color="#CCCCCC"> shellcode or</font>

534
00:25:43,250 --> 00:25:47,030
<font color="#E5E5E5">objects again not not</font><font color="#CCCCCC"> relevant to</font><font color="#E5E5E5"> do to</font>

535
00:25:46,309 --> 00:25:49,530
the

536
00:25:47,030 --> 00:25:51,270
the subject of this<font color="#E5E5E5"> talk it might be</font>

537
00:25:49,530 --> 00:25:54,750
<font color="#E5E5E5">quite interesting if it works but again</font>

538
00:25:51,270 --> 00:25:56,879
not relevant for now many hips feature

539
00:25:54,750 --> 00:25:58,410
some extra<font color="#CCCCCC"> logging confuser actions</font>

540
00:25:56,880 --> 00:26:00,000
right so whenever you access some

541
00:25:58,410 --> 00:26:01,950
resource it's logged for something or

542
00:26:00,000 --> 00:26:04,440
forensic purposes nice but again not

543
00:26:01,950 --> 00:26:07,920
<font color="#CCCCCC">much relevant it can do system integrity</font>

544
00:26:04,440 --> 00:26:10,620
checks similarly to both particle does

545
00:26:07,920 --> 00:26:12,600
it's nice but again for<font color="#E5E5E5"> the purpose of</font>

546
00:26:10,620 --> 00:26:15,540
the stock the<font color="#CCCCCC"> most instances interesting</font>

547
00:26:12,600 --> 00:26:22,500
part is again limiting ability of user

548
00:26:15,540 --> 00:26:25,379
processes again by some extra code not

549
00:26:22,500 --> 00:26:27,900
relying on mere security boundaries and

550
00:26:25,380 --> 00:26:31,050
sorted on faulty iOS so if you have a

551
00:26:27,900 --> 00:26:32,940
decent hips then no matter what the

552
00:26:31,050 --> 00:26:34,830
privilege of<font color="#E5E5E5"> the user mode process is</font>

553
00:26:32,940 --> 00:26:36,600
whether it's done to the admin or system

554
00:26:34,830 --> 00:26:39,030
would forever you should<font color="#E5E5E5"> not</font><font color="#CCCCCC"> be able to</font>

555
00:26:36,600 --> 00:26:42,540
<font color="#E5E5E5">stop hips user mode services right it</font>

556
00:26:39,030 --> 00:26:45,360
should should defend itself it should

557
00:26:42,540 --> 00:26:48,360
prevent loading non whitelisted karna

558
00:26:45,360 --> 00:26:52,709
drivers so it should again disallow

559
00:26:48,360 --> 00:26:57,179
entering unknown cannon drivers into the

560
00:26:52,710 --> 00:26:59,730
system also<font color="#E5E5E5"> it should forbid messing</font>

561
00:26:57,180 --> 00:27:03,140
with some protected systems like certain

562
00:26:59,730 --> 00:27:05,940
processes are valuable like LS a SS

563
00:27:03,140 --> 00:27:09,750
holds the cached credential for every

564
00:27:05,940 --> 00:27:12,600
user so a decent<font color="#CCCCCC"> in Turin prevention</font>

565
00:27:09,750 --> 00:27:15,420
systems should not allow to inject code

566
00:27:12,600 --> 00:27:18,780
into<font color="#E5E5E5"> LS iess to steal credentials from</font>

567
00:27:15,420 --> 00:27:21,930
it and again it's a little bit similar

568
00:27:18,780 --> 00:27:24,600
to<font color="#E5E5E5"> what sandboxie version 3 does in a</font>

569
00:27:21,930 --> 00:27:27,540
way that it should implement its own set

570
00:27:24,600 --> 00:27:30,600
of security controls access control

571
00:27:27,540 --> 00:27:34,500
again something additional to the<font color="#CCCCCC"> bare</font>

572
00:27:30,600 --> 00:27:40,310
operating<font color="#E5E5E5"> system does okay and</font><font color="#CCCCCC"> that's it</font>

573
00:27:34,500 --> 00:27:40,310
leads us to her to this another<font color="#E5E5E5"> generic</font>

574
00:27:41,210 --> 00:27:47,490
bypass method which is user mode code

575
00:27:44,550 --> 00:27:49,320
injection from the colonel again it

576
00:27:47,490 --> 00:27:52,160
beats all this process restrictions

577
00:27:49,320 --> 00:27:56,899
right for instance

578
00:27:52,160 --> 00:27:58,970
let's get back to them yeah<font color="#E5E5E5"> okay even if</font>

579
00:27:56,900 --> 00:28:03,230
<font color="#E5E5E5">this process cannot do anything even if</font>

580
00:27:58,970 --> 00:28:05,780
you elevated if our<font color="#CCCCCC"> Colonel payload can</font>

581
00:28:03,230 --> 00:28:07,730
inject arbitrary code here to non

582
00:28:05,780 --> 00:28:13,010
sandbox process then we effectively

583
00:28:07,730 --> 00:28:14,840
bypass all the sandbox and similarly at

584
00:28:13,010 --> 00:28:17,720
least to some extent it's similar with

585
00:28:14,840 --> 00:28:22,129
hips generally if if there is some

586
00:28:17,720 --> 00:28:25,610
results that's coveted by the attacker

587
00:28:22,130 --> 00:28:28,210
like some some<font color="#CCCCCC"> files some contents of</font>

588
00:28:25,610 --> 00:28:31,370
memory and if it is present in any

589
00:28:28,210 --> 00:28:33,680
process why I think<font color="#CCCCCC"> any process on the</font>

590
00:28:31,370 --> 00:28:35,649
system then we can grab this resource by

591
00:28:33,680 --> 00:28:38,240
injecting code into process why right

592
00:28:35,650 --> 00:28:40,430
well is there is a resource that's<font color="#E5E5E5"> not</font>

593
00:28:38,240 --> 00:28:43,700
accessible by any process on the system

594
00:28:40,430 --> 00:28:46,700
then it's not useful I would say you

595
00:28:43,700 --> 00:28:48,650
usually resources are also the purpose

596
00:28:46,700 --> 00:28:51,140
of being<font color="#E5E5E5"> used by at least one process</font>

597
00:28:48,650 --> 00:28:54,230
right so we can assume there should be

598
00:28:51,140 --> 00:28:58,490
at least one process capable of

599
00:28:54,230 --> 00:29:01,610
accessing diseases so okay<font color="#E5E5E5"> so how can we</font>

600
00:28:58,490 --> 00:29:04,520
<font color="#E5E5E5">inject cold into</font><font color="#CCCCCC"> the context of the user</font>

601
00:29:01,610 --> 00:29:06,800
mode process from the kernel mode

602
00:29:04,520 --> 00:29:09,080
because in user mode it's pretty simple

603
00:29:06,800 --> 00:29:11,270
you<font color="#CCCCCC"> have API for it there is an API</font>

604
00:29:09,080 --> 00:29:14,030
named creative mode thread that you can

605
00:29:11,270 --> 00:29:16,310
just<font color="#E5E5E5"> call and Adam you get code</font>

606
00:29:14,030 --> 00:29:19,550
execution in another process but<font color="#E5E5E5"> again</font>

607
00:29:16,310 --> 00:29:21,710
in user mode it is simple to stop

608
00:29:19,550 --> 00:29:24,500
<font color="#E5E5E5">because in order to use creative mode</font>

609
00:29:21,710 --> 00:29:27,080
thread first you'll need to call open

610
00:29:24,500 --> 00:29:29,480
process and it's easy<font color="#E5E5E5"> to hook open</font>

611
00:29:27,080 --> 00:29:32,330
process to disallow opening protected

612
00:29:29,480 --> 00:29:36,440
<font color="#CCCCCC">process and there is no such protection</font>

613
00:29:32,330 --> 00:29:40,790
in kernel mode so the most widely

614
00:29:36,440 --> 00:29:43,100
discussed method is this this kernel API

615
00:29:40,790 --> 00:29:45,440
<font color="#CCCCCC">okay instant queue a PC which</font>

616
00:29:43,100 --> 00:29:47,510
effectively queues and synchronous

617
00:29:45,440 --> 00:29:52,070
procedure call in the context of other

618
00:29:47,510 --> 00:29:54,500
given process and it's nice it works the

619
00:29:52,070 --> 00:29:56,689
problem with it is that it's heavy

620
00:29:54,500 --> 00:29:58,340
dependent on<font color="#CCCCCC"> Colonel ap</font><font color="#E5E5E5"> ice so you have</font>

621
00:29:56,690 --> 00:30:00,020
to<font color="#CCCCCC"> prepare the APC then you have to</font>

622
00:29:58,340 --> 00:30:02,510
queue it then there<font color="#E5E5E5"> is a problem with</font>

623
00:30:00,020 --> 00:30:04,460
alert<font color="#CCCCCC"> abell DVS none other to the threat</font>

624
00:30:02,510 --> 00:30:07,910
and

625
00:30:04,460 --> 00:30:10,850
the main problem<font color="#CCCCCC"> is that because</font><font color="#E5E5E5"> it's</font>

626
00:30:07,910 --> 00:30:12,950
must use some kernel API is some

627
00:30:10,850 --> 00:30:15,889
security solution like hips or sandbox

628
00:30:12,950 --> 00:30:18,530
monitors usage of this API it can catch

629
00:30:15,890 --> 00:30:20,600
the exploit right it seizes huh someone

630
00:30:18,530 --> 00:30:23,600
tries to kill a<font color="#E5E5E5"> PC for protected process</font>

631
00:30:20,600 --> 00:30:27,169
it won't be allowed right and also<font color="#E5E5E5"> this</font>

632
00:30:23,600 --> 00:30:29,540
method allows you to our inject<font color="#E5E5E5"> cold</font>

633
00:30:27,170 --> 00:30:35,660
into a single process at a time only

634
00:30:29,540 --> 00:30:42,170
which might<font color="#CCCCCC"> be the problem</font><font color="#E5E5E5"> and much</font>

635
00:30:35,660 --> 00:30:44,720
nicer and more elegant method is cisco

636
00:30:42,170 --> 00:30:46,820
less the center MSR<font color="#CCCCCC"> overwrite with this</font>

637
00:30:44,720 --> 00:30:49,190
method there is no current API use at

638
00:30:46,820 --> 00:30:52,129
all all you need<font color="#CCCCCC"> to do is to write to a</font>

639
00:30:49,190 --> 00:30:55,010
cpu register and again there is no way

640
00:30:52,130 --> 00:30:57,500
to hook right the<font color="#CCCCCC"> cpu register almost</font>

641
00:30:55,010 --> 00:31:00,980
will we get back to that so how it works

642
00:30:57,500 --> 00:31:03,770
<font color="#E5E5E5">you attack the method how system calls</font>

643
00:31:00,980 --> 00:31:07,370
are dispatched from user mode so

644
00:31:03,770 --> 00:31:09,470
whenever a process wants service from

645
00:31:07,370 --> 00:31:13,399
the colonel so it involves<font color="#E5E5E5"> a system call</font>

646
00:31:09,470 --> 00:31:15,950
then the<font color="#E5E5E5"> cpu looks at a particular</font><font color="#CCCCCC"> cpu</font>

647
00:31:13,400 --> 00:31:18,200
register<font color="#E5E5E5"> where in the kernel mode</font><font color="#CCCCCC"> there</font>

648
00:31:15,950 --> 00:31:21,500
<font color="#CCCCCC">is a cisco handle and it</font><font color="#E5E5E5"> jumps so this</font>

649
00:31:18,200 --> 00:31:23,750
kernel mode code and obviously<font color="#E5E5E5"> if we can</font>

650
00:31:21,500 --> 00:31:26,540
just override this single<font color="#E5E5E5"> cpu register</font>

651
00:31:23,750 --> 00:31:30,830
it means<font color="#E5E5E5"> whenever closest wants to do</font>

652
00:31:26,540 --> 00:31:33,139
something<font color="#E5E5E5"> it will call our it will call</font>

653
00:31:30,830 --> 00:31:36,379
the code of our choosing right it means

654
00:31:33,140 --> 00:31:38,840
we<font color="#E5E5E5"> can control</font><font color="#CCCCCC"> the behavior of all the</font>

655
00:31:36,380 --> 00:31:41,600
<font color="#CCCCCC">SIS calls and this particular means we</font>

656
00:31:38,840 --> 00:31:44,000
can<font color="#E5E5E5"> inject out and again it is quite</font>

657
00:31:41,600 --> 00:31:46,399
elegant it works very well and<font color="#CCCCCC"> the best</font>

658
00:31:44,000 --> 00:31:48,470
the<font color="#CCCCCC"> best thing is that you control all</font>

659
00:31:46,400 --> 00:31:51,190
the processes at the same time right you

660
00:31:48,470 --> 00:31:56,090
control the behavior of all the process

661
00:31:51,190 --> 00:31:59,630
so that's that's<font color="#CCCCCC"> pretty nice and how do</font>

662
00:31:56,090 --> 00:32:01,790
beat it the only<font color="#E5E5E5"> I think the only</font>

663
00:31:59,630 --> 00:32:05,510
reliable way to beat it is by using

664
00:32:01,790 --> 00:32:09,170
virtualization and McAfee deep safe does

665
00:32:05,510 --> 00:32:12,410
exactly that so what McAfee how deep

666
00:32:09,170 --> 00:32:16,160
safe works it actually de privileges all

667
00:32:12,410 --> 00:32:17,840
the operating system so it turns all the

668
00:32:16,160 --> 00:32:18,200
operating system including the colonel

669
00:32:17,840 --> 00:32:20,270
into

670
00:32:18,200 --> 00:32:22,220
virtual machine<font color="#CCCCCC"> and that's quite a</font>

671
00:32:20,270 --> 00:32:24,740
change of<font color="#CCCCCC"> paradigm</font><font color="#E5E5E5"> here because from</font>

672
00:32:22,220 --> 00:32:26,540
this moment on I said that ring 0 is

673
00:32:24,740 --> 00:32:28,580
<font color="#E5E5E5">all-powerful there are no limits</font><font color="#CCCCCC"> are no</font>

674
00:32:26,540 --> 00:32:32,210
boundaries right it's not true in<font color="#CCCCCC"> this</font>

675
00:32:28,580 --> 00:32:33,919
scenario in this<font color="#E5E5E5"> scenario your operating</font>

676
00:32:32,210 --> 00:32:37,970
system is controlled by the hypervisor

677
00:32:33,920 --> 00:32:40,340
and there are limits and particularly

678
00:32:37,970 --> 00:32:42,890
deep safe is pretty good at detecting

679
00:32:40,340 --> 00:32:45,080
anomalous behavior affecting the state

680
00:32:42,890 --> 00:32:52,160
of the CPU particularly writing to the

681
00:32:45,080 --> 00:32:54,980
model specific registers next yeah and

682
00:32:52,160 --> 00:32:58,490
<font color="#E5E5E5">that tips I've deep sigh generally tries</font>

683
00:32:54,980 --> 00:33:00,650
to detect the rootkit like behavior so

684
00:32:58,490 --> 00:33:02,720
it tries to monitor the memory of the

685
00:33:00,650 --> 00:33:05,480
operating system right and see some

686
00:33:02,720 --> 00:33:08,990
anomalous behaviour so particularly it

687
00:33:05,480 --> 00:33:12,320
can despite besides changes to the

688
00:33:08,990 --> 00:33:14,240
registers it can find out whenever the

689
00:33:12,320 --> 00:33:16,550
interrupt descriptor table<font color="#E5E5E5"> is changed or</font>

690
00:33:14,240 --> 00:33:18,740
system service descriptor table is

691
00:33:16,550 --> 00:33:21,649
changed again these data structures are

692
00:33:18,740 --> 00:33:23,750
commonly used<font color="#CCCCCC"> by the rootkit to you</font><font color="#E5E5E5"> get</font>

693
00:33:21,650 --> 00:33:26,450
get control of the operating<font color="#E5E5E5"> system and</font>

694
00:33:23,750 --> 00:33:30,520
many many other things it's quite

695
00:33:26,450 --> 00:33:33,020
impressive and it works quite<font color="#E5E5E5"> well again</font>

696
00:33:30,520 --> 00:33:36,080
what's important to note here<font color="#CCCCCC"> is it's</font>

697
00:33:33,020 --> 00:33:39,710
the change change of paradigm now your

698
00:33:36,080 --> 00:33:41,750
operating system is not well in control

699
00:33:39,710 --> 00:33:43,880
of the machine it runs under the control

700
00:33:41,750 --> 00:33:47,270
of the hypervisor right that's a

701
00:33:43,880 --> 00:33:49,490
difference and that that's why you can

702
00:33:47,270 --> 00:33:52,760
detect reliably things like all the

703
00:33:49,490 --> 00:33:57,830
writing model-specific registers so

704
00:33:52,760 --> 00:34:00,470
that's nice particularly if you run any

705
00:33:57,830 --> 00:34:02,449
color mode code that messes with

706
00:34:00,470 --> 00:34:06,640
model-specific registers you get big

707
00:34:02,450 --> 00:34:10,340
alerts from deep sighs saying that yeah

708
00:34:06,640 --> 00:34:13,580
the rootkit behavior right to the MSR

709
00:34:10,340 --> 00:34:16,010
register I have no idea<font color="#CCCCCC"> why it says some</font>

710
00:34:13,580 --> 00:34:18,860
some<font color="#CCCCCC"> do gbv is responsible for it but</font>

711
00:34:16,010 --> 00:34:23,210
never<font color="#E5E5E5"> mind anyway that that is reliable</font>

712
00:34:18,860 --> 00:34:25,370
it works it really works again it works

713
00:34:23,210 --> 00:34:28,179
reliably because we have another layer

714
00:34:25,370 --> 00:34:34,549
of control right

715
00:34:28,179 --> 00:34:36,590
<font color="#E5E5E5">okay so how do we did okay that's one</font>

716
00:34:34,550 --> 00:34:38,390
<font color="#E5E5E5">more</font><font color="#CCCCCC"> thing just the straight right on</font>

717
00:34:36,590 --> 00:34:40,340
the fact that deep safe is very good at

718
00:34:38,389 --> 00:34:42,500
detecting anomalous changes to the state

719
00:34:40,340 --> 00:34:44,660
of the<font color="#E5E5E5"> CPU and</font><font color="#CCCCCC"> i said previously that</font>

720
00:34:42,500 --> 00:34:47,540
the commonly suggested method of

721
00:34:44,659 --> 00:34:50,149
bypassing SME p is just to clear this

722
00:34:47,540 --> 00:34:52,250
particular bit in the<font color="#CCCCCC"> cfl register and</font>

723
00:34:50,150 --> 00:34:55,910
again deep safe is in a position to

724
00:34:52,250 --> 00:34:57,800
reliably detect this<font color="#E5E5E5"> behavior</font><font color="#CCCCCC"> I'm not</font>

725
00:34:55,909 --> 00:35:01,279
<font color="#E5E5E5">sure</font><font color="#CCCCCC"> if it does it I know it is one</font>

726
00:34:57,800 --> 00:35:02,870
another security<font color="#E5E5E5"> solution that based on</font>

727
00:35:01,280 --> 00:35:07,480
virtualization that does exactly that

728
00:35:02,870 --> 00:35:10,790
detects clearing of SME pivot<font color="#CCCCCC"> okay so</font>

729
00:35:07,480 --> 00:35:13,970
what's the problem deep safe is

730
00:35:10,790 --> 00:35:16,820
incomplete in a way that it really does

731
00:35:13,970 --> 00:35:19,339
not have a good way of detecting the

732
00:35:16,820 --> 00:35:22,220
mere escalation to the kernel mode it

733
00:35:19,340 --> 00:35:24,320
can detect some malicious behavior right

734
00:35:22,220 --> 00:35:27,350
but it cannot prevent the<font color="#E5E5E5"> mere</font>

735
00:35:24,320 --> 00:35:30,230
escalation to the kernel mode that there

736
00:35:27,350 --> 00:35:32,779
is no<font color="#CCCCCC"> easy way so it means</font><font color="#E5E5E5"> that your</font>

737
00:35:30,230 --> 00:35:34,910
exploits were work fine to the point

738
00:35:32,780 --> 00:35:38,570
<font color="#E5E5E5">when you reach</font><font color="#CCCCCC"> Colonel shellcode you</font>

739
00:35:34,910 --> 00:35:40,759
<font color="#E5E5E5">just need to be very careful to not use</font>

740
00:35:38,570 --> 00:35:47,240
any methods that's that are covered<font color="#E5E5E5"> by</font>

741
00:35:40,760 --> 00:35:51,680
deep safe and then you'll find so okay

742
00:35:47,240 --> 00:35:53,270
so<font color="#CCCCCC"> MSR of the right will not do for the</font>

743
00:35:51,680 --> 00:35:58,089
purpose of user mode injection so what

744
00:35:53,270 --> 00:36:01,400
works the thing that actually works is

745
00:35:58,090 --> 00:36:04,130
direct right to the memory of the user

746
00:36:01,400 --> 00:36:07,700
mode process which<font color="#CCCCCC"> can be dubbed as</font>

747
00:36:04,130 --> 00:36:12,050
backing physical frame over right so how

748
00:36:07,700 --> 00:36:14,540
it<font color="#E5E5E5"> works it it is based by the fact that</font>

749
00:36:12,050 --> 00:36:16,760
all the decent operating system

750
00:36:14,540 --> 00:36:19,720
implement memory sharing so when you

751
00:36:16,760 --> 00:36:23,330
have a read-only memory in any process

752
00:36:19,720 --> 00:36:26,319
it can<font color="#CCCCCC"> be shared with other processes so</font>

753
00:36:23,330 --> 00:36:30,380
for instance anti dll code is read only

754
00:36:26,320 --> 00:36:34,070
so the page tables are set up so that

755
00:36:30,380 --> 00:36:37,910
this location memory map to the same

756
00:36:34,070 --> 00:36:40,610
physical frame in memory<font color="#E5E5E5"> so we have two</font>

757
00:36:37,910 --> 00:36:42,149
<font color="#E5E5E5">different processes but they all map to</font>

758
00:36:40,610 --> 00:36:45,299
the same<font color="#CCCCCC"> location in</font>

759
00:36:42,150 --> 00:36:49,920
and again it's it's it's possible only

760
00:36:45,299 --> 00:36:51,750
because the mapping is<font color="#CCCCCC"> read only if this</font>

761
00:36:49,920 --> 00:36:53,670
<font color="#E5E5E5">mapping was read right then it would</font><font color="#CCCCCC"> not</font>

762
00:36:51,750 --> 00:36:55,650
work because a single process could

763
00:36:53,670 --> 00:36:57,329
corrupt the memory used by other process

764
00:36:55,650 --> 00:37:01,160
so that wouldn't<font color="#CCCCCC"> work but</font><font color="#E5E5E5"> as long</font><font color="#CCCCCC"> as</font>

765
00:36:57,329 --> 00:37:01,160
it's read only that it actually works

766
00:37:01,640 --> 00:37:07,500
again when we are in kernel mode all the

767
00:37:05,250 --> 00:37:08,910
protection and falls by page tables are

768
00:37:07,500 --> 00:37:12,260
irrelevant because we can change it

769
00:37:08,910 --> 00:37:15,328
<font color="#CCCCCC">right so we can easily</font><font color="#E5E5E5"> write to any</font>

770
00:37:12,260 --> 00:37:22,740
memory frame that<font color="#CCCCCC"> starves code of the</font>

771
00:37:15,329 --> 00:37:25,079
user mode process<font color="#CCCCCC"> okay yeah so once</font>

772
00:37:22,740 --> 00:37:27,538
again how<font color="#E5E5E5"> to overwrite this physical</font>

773
00:37:25,079 --> 00:37:30,420
memory just mess with page tables again

774
00:37:27,539 --> 00:37:33,089
one extra bonus on on Windows platform

775
00:37:30,420 --> 00:37:35,970
is that on<font color="#CCCCCC"> windows page tables are</font>

776
00:37:33,089 --> 00:37:37,890
mapped at<font color="#CCCCCC"> the</font><font color="#E5E5E5"> fixed address so it's very</font>

777
00:37:35,970 --> 00:37:39,808
easy<font color="#CCCCCC"> to find them so again you don't</font>

778
00:37:37,890 --> 00:37:41,970
need any<font color="#CCCCCC"> Colonel api's you don't need to</font>

779
00:37:39,809 --> 00:37:44,250
actually walk the pay tables it does

780
00:37:41,970 --> 00:37:47,328
fixed at the given virtual address

781
00:37:44,250 --> 00:37:50,579
that's<font color="#E5E5E5"> nice okay so what what this</font>

782
00:37:47,329 --> 00:37:53,640
method<font color="#E5E5E5"> gives us again it gives us</font>

783
00:37:50,579 --> 00:37:57,000
ability to modify the contents of all

784
00:37:53,640 --> 00:37:59,190
the processes or say libraries that I

785
00:37:57,000 --> 00:38:04,190
used by all the processes again with a

786
00:37:59,190 --> 00:38:07,109
single right that's pretty<font color="#E5E5E5"> nice again so</font>

787
00:38:04,190 --> 00:38:09,420
yeah so there are<font color="#E5E5E5"> two questions what to</font>

788
00:38:07,109 --> 00:38:12,630
<font color="#CCCCCC">overwrite and where to place the hook</font>

789
00:38:09,420 --> 00:38:15,660
coat and again this this idea<font color="#E5E5E5"> of</font>

790
00:38:12,630 --> 00:38:17,880
overwriting the the process<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the user</font>

791
00:38:15,660 --> 00:38:21,270
mode the memory physical process was

792
00:38:17,880 --> 00:38:24,930
discussed before and guys suggested that

793
00:38:21,270 --> 00:38:27,599
shared user data structure is<font color="#E5E5E5"> the best</font>

794
00:38:24,930 --> 00:38:32,098
<font color="#E5E5E5">one again because it's shared in all the</font>

795
00:38:27,599 --> 00:38:33,930
processes and also on 32 bits 32 bits it

796
00:38:32,099 --> 00:38:36,480
controls how the Cisco's are dispatched

797
00:38:33,930 --> 00:38:39,000
there is a pointer in it means that<font color="#E5E5E5"> it</font>

798
00:38:36,480 --> 00:38:43,049
says this is<font color="#E5E5E5"> the actual function that is</font>

799
00:38:39,000 --> 00:38:46,170
part of the system code so that it works

800
00:38:43,049 --> 00:38:50,099
if you overwrite this pointer in the

801
00:38:46,170 --> 00:38:52,230
Strad user data you can divert the

802
00:38:50,099 --> 00:38:54,759
system called execution the problem is

803
00:38:52,230 --> 00:38:57,650
were to direct it to divert<font color="#CCCCCC"> it though</font>

804
00:38:54,759 --> 00:39:00,519
again initially authors suggested that

805
00:38:57,650 --> 00:39:02,569
you can<font color="#E5E5E5"> just make shared user data</font>

806
00:39:00,519 --> 00:39:04,879
executable and start the hook coat

807
00:39:02,569 --> 00:39:06,529
<font color="#E5E5E5">instead user data as well and again</font><font color="#CCCCCC"> it</font>

808
00:39:04,880 --> 00:39:08,029
is very nice because this page is

809
00:39:06,529 --> 00:39:10,609
presented all the process at the same

810
00:39:08,029 --> 00:39:13,130
virtual address right again you just

811
00:39:10,609 --> 00:39:15,319
need a single right and you have total

812
00:39:13,130 --> 00:39:17,630
<font color="#E5E5E5">hook of all the system calls in all the</font>

813
00:39:15,319 --> 00:39:19,970
process but<font color="#E5E5E5"> when I tried it it actually</font>

814
00:39:17,630 --> 00:39:26,029
does not work on windows 7 or older or

815
00:39:19,970 --> 00:39:30,589
newer apparently because each process

816
00:39:26,029 --> 00:39:33,559
has a separate page table entry for the

817
00:39:30,589 --> 00:39:35,240
<font color="#CCCCCC">shut data so if you you would need to</font>

818
00:39:33,559 --> 00:39:37,670
change in order to<font color="#E5E5E5"> make it executable</font>

819
00:39:35,240 --> 00:39:39,999
you would need<font color="#CCCCCC"> to alter page tables for</font>

820
00:39:37,670 --> 00:39:42,380
each process and that's that's bad

821
00:39:39,999 --> 00:39:44,629
<font color="#E5E5E5">especially if you consider what happens</font>

822
00:39:42,380 --> 00:39:47,869
<font color="#E5E5E5">when you create a new process then there</font>

823
00:39:44,630 --> 00:39:49,549
is<font color="#CCCCCC"> a race you would need</font><font color="#E5E5E5"> to alter the</font>

824
00:39:47,869 --> 00:39:54,789
page tables of this process very early

825
00:39:49,549 --> 00:39:58,190
otherwise<font color="#CCCCCC"> it it would</font><font color="#E5E5E5"> be killed so a</font>

826
00:39:54,789 --> 00:40:01,039
better method is just to overwrite the

827
00:39:58,190 --> 00:40:03,019
actual<font color="#CCCCCC"> cisco invocation NT dll so this</font>

828
00:40:01,039 --> 00:40:04,690
particular<font color="#E5E5E5"> see center final season</font>

829
00:40:03,019 --> 00:40:09,109
during instruction or cisco and

830
00:40:04,690 --> 00:40:12,410
similarly the good working way of

831
00:40:09,109 --> 00:40:15,019
placing the hook code is again in anti

832
00:40:12,410 --> 00:40:20,058
dll library at some unused end of the

833
00:40:15,019 --> 00:40:21,499
section location because<font color="#E5E5E5"> again sections</font>

834
00:40:20,059 --> 00:40:22,999
are aligned at the paint boundaries

835
00:40:21,499 --> 00:40:24,769
<font color="#E5E5E5">right so usually at the end</font><font color="#CCCCCC"> of the</font>

836
00:40:22,999 --> 00:40:27,348
section you have<font color="#E5E5E5"> some slack space which</font>

837
00:40:24,769 --> 00:40:30,439
you can use and that works as we see in

838
00:40:27,349 --> 00:40:34,099
a moment actually when when<font color="#CCCCCC"> i was on the</font>

839
00:40:30,440 --> 00:40:36,559
<font color="#E5E5E5">plane to hear i came upon this really</font>

840
00:40:34,099 --> 00:40:38,869
perverted idea of<font color="#CCCCCC"> storing the hook coat</font>

841
00:40:36,559 --> 00:40:41,299
in the<font color="#E5E5E5"> kernel pages that would be really</font>

842
00:40:38,869 --> 00:40:42,859
<font color="#CCCCCC">cool but it's untested i need to</font><font color="#E5E5E5"> find</font>

843
00:40:41,299 --> 00:40:46,730
out if it<font color="#E5E5E5"> works but if it works it's</font>

844
00:40:42,859 --> 00:40:48,950
even better<font color="#CCCCCC"> okay so what's what's the</font>

845
00:40:46,730 --> 00:40:51,759
effect unfortunately<font color="#CCCCCC"> okay so that's</font><font color="#E5E5E5"> a</font>

846
00:40:48,950 --> 00:40:53,989
final demonstration you would need

847
00:40:51,759 --> 00:40:57,980
<font color="#CCCCCC">fortunately</font><font color="#E5E5E5"> the font is pretty small but</font>

848
00:40:53,989 --> 00:41:00,109
<font color="#E5E5E5">I cannot do anything about it but so</font>

849
00:40:57,980 --> 00:41:02,829
what what you see here is you have

850
00:41:00,109 --> 00:41:06,400
semantic critical system protection

851
00:41:02,829 --> 00:41:08,580
agent running you have deep sighs

852
00:41:06,400 --> 00:41:12,360
defender running as well

853
00:41:08,580 --> 00:41:15,900
and on top of it all you<font color="#E5E5E5"> run sandboxie</font>

854
00:41:12,360 --> 00:41:17,730
you run the cmd.exe under the control of

855
00:41:15,900 --> 00:41:21,240
sandboxie so again it has its own

856
00:41:17,730 --> 00:41:26,490
additional layers of<font color="#CCCCCC"> the code ok so this</font>

857
00:41:21,240 --> 00:41:31,229
is CSP running and here<font color="#E5E5E5"> ok battery went</font>

858
00:41:26,490 --> 00:41:33,479
dead<font color="#E5E5E5"> ok so here you have properties of</font>

859
00:41:31,230 --> 00:41:37,080
services eggsy process so it's<font color="#CCCCCC"> supposed</font>

860
00:41:33,480 --> 00:41:40,860
to be protected right and you can see it

861
00:41:37,080 --> 00:41:44,790
has<font color="#E5E5E5"> to tcp ports open presumably for its</font>

862
00:41:40,860 --> 00:41:50,460
RPC interface that's normal and what we

863
00:41:44,790 --> 00:41:54,630
will do huh ok so what we'll do we'll

864
00:41:50,460 --> 00:41:59,700
just again run this<font color="#E5E5E5"> tool at this time</font>

865
00:41:54,630 --> 00:42:05,730
trying<font color="#E5E5E5"> to migrate code into the context</font>

866
00:41:59,700 --> 00:42:07,919
of this services<font color="#CCCCCC"> EG</font><font color="#E5E5E5"> process and you'll</font>

867
00:42:05,730 --> 00:42:10,020
see it works so find<font color="#E5E5E5"> waldo find the</font>

868
00:42:07,920 --> 00:42:12,630
difference between two pictures right so

869
00:42:10,020 --> 00:42:16,800
this<font color="#CCCCCC"> is another one</font><font color="#E5E5E5"> so the difference is</font>

870
00:42:12,630 --> 00:42:20,700
it has<font color="#E5E5E5"> completed no alert whatever from</font>

871
00:42:16,800 --> 00:42:23,580
the defender<font color="#E5E5E5"> 10</font><font color="#CCCCCC"> boxy or semantics hips</font>

872
00:42:20,700 --> 00:42:26,370
and another thing that changes is you

873
00:42:23,580 --> 00:42:29,910
see additional tcp port opening service

874
00:42:26,370 --> 00:42:32,700
disagree suddenly services eggsy listen

875
00:42:29,910 --> 00:42:34,259
some on port 44 44 and why it is so

876
00:42:32,700 --> 00:42:39,089
because it got injecting with the

877
00:42:34,260 --> 00:42:40,740
default metasploit bantul so again using

878
00:42:39,090 --> 00:42:43,560
this approach we can inject arbitrary

879
00:42:40,740 --> 00:42:47,600
code into arbitrary process again get

880
00:42:43,560 --> 00:42:52,140
get full control over it again nobody

881
00:42:47,600 --> 00:42:55,170
none of the protections deployed had any

882
00:42:52,140 --> 00:42:58,740
comments about it and it also highlights

883
00:42:55,170 --> 00:43:00,750
the problem that it doesn't help<font color="#E5E5E5"> if you</font>

884
00:42:58,740 --> 00:43:02,759
stack one<font color="#E5E5E5"> security solution upon each</font>

885
00:43:00,750 --> 00:43:04,890
other if they share the common weakness

886
00:43:02,760 --> 00:43:07,200
right the problem with<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of them is</font>

887
00:43:04,890 --> 00:43:10,529
that<font color="#E5E5E5"> they share the common vulnerability</font>

888
00:43:07,200 --> 00:43:13,770
they are well prone to<font color="#CCCCCC"> Colonel exploits</font>

889
00:43:10,530 --> 00:43:15,420
<font color="#CCCCCC">right so even if you just stuck one</font>

890
00:43:13,770 --> 00:43:19,210
apparent each other you can just bypass

891
00:43:15,420 --> 00:43:24,250
them all the single exploit and that's

892
00:43:19,210 --> 00:43:26,859
it's pretty bad so obviously other any

893
00:43:24,250 --> 00:43:29,650
solutions that are resilient to<font color="#E5E5E5"> Colonel</font>

894
00:43:26,859 --> 00:43:32,500
exploits there is one we saw the

895
00:43:29,650 --> 00:43:34,780
defender at least architectural he has

896
00:43:32,500 --> 00:43:36,940
some potential to defend again against

897
00:43:34,780 --> 00:43:40,869
cannot extract because it's implemented

898
00:43:36,940 --> 00:43:42,849
additional layer<font color="#CCCCCC"> of control implemented</font>

899
00:43:40,869 --> 00:43:44,410
in<font color="#E5E5E5"> virtualization and generally</font>

900
00:43:42,849 --> 00:43:46,030
virtualization is the way to go if

901
00:43:44,410 --> 00:43:48,580
implemented properly better than deep

902
00:43:46,030 --> 00:43:50,650
safe because again it changes the

903
00:43:48,580 --> 00:43:52,960
paradigm implements another layer of

904
00:43:50,650 --> 00:43:55,810
control which cannot be altered if you

905
00:43:52,960 --> 00:44:01,570
get caught in the<font color="#E5E5E5"> context of the</font><font color="#CCCCCC"> camera</font>

906
00:43:55,810 --> 00:44:05,640
ah yeah references thank you<font color="#E5E5E5"> okay that's</font>

907
00:44:01,570 --> 00:44:05,640
<font color="#E5E5E5">about it any questions for a minute</font>

