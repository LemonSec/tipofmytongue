1
00:00:01,310 --> 00:00:09,870
<font color="#CCCCCC">okay so here it started before</font><font color="#E5E5E5"> I get</font>

2
00:00:06,660 --> 00:00:11,759
started let's finish the stupid

3
00:00:09,870 --> 00:00:14,070
questions first does anyone in this room

4
00:00:11,759 --> 00:00:18,890
not now what cross-site scripting is and

5
00:00:14,070 --> 00:00:22,980
I I feel really<font color="#E5E5E5"> stupid asking this sorry</font>

6
00:00:18,890 --> 00:00:25,949
okay I assume<font color="#CCCCCC"> everyone that's great so</font>

7
00:00:22,980 --> 00:00:28,369
my talk is on CSP analysis or content

8
00:00:25,949 --> 00:00:32,250
security policy and one knows what it<font color="#E5E5E5"> is</font>

9
00:00:28,369 --> 00:00:37,500
content security policy<font color="#CCCCCC"> okay we'll cover</font>

10
00:00:32,250 --> 00:00:40,079
that so short introduction to Edward

11
00:00:37,500 --> 00:00:42,899
perfect to myself my name is Frederick

12
00:00:40,079 --> 00:00:44,730
I'm 24 and I'm from Munich I work as an

13
00:00:42,899 --> 00:00:47,579
information security officer at chip

14
00:00:44,730 --> 00:00:51,839
digital so<font color="#E5E5E5"> if you might may know the</font>

15
00:00:47,579 --> 00:00:53,850
site chip de smoothly German you can

16
00:00:51,840 --> 00:00:56,219
find<font color="#E5E5E5"> all the examples on the source code</font>

17
00:00:53,850 --> 00:00:58,590
of what I'm showing you here on hash to

18
00:00:56,219 --> 00:01:01,260
execute calm / CSP so you want to check

19
00:00:58,590 --> 00:01:03,750
<font color="#E5E5E5">that out the exclusive and you can ask</font>

20
00:01:01,260 --> 00:01:08,939
me questions<font color="#E5E5E5"> anytime later or on twitter</font>

21
00:01:03,750 --> 00:01:11,189
at hashtag security<font color="#E5E5E5"> ok so content</font>

22
00:01:08,939 --> 00:01:13,259
security policy is basically an HTTP

23
00:01:11,189 --> 00:01:14,759
header so if you can request the side

24
00:01:13,260 --> 00:01:17,159
you get a response from the server and

25
00:01:14,760 --> 00:01:20,100
the server sense you're in the response

26
00:01:17,159 --> 00:01:22,650
sends<font color="#CCCCCC"> your</font><font color="#E5E5E5"> HTTP header that says example</font>

27
00:01:20,100 --> 00:01:25,350
here<font color="#CCCCCC"> Def Con dot org they have CSP</font>

28
00:01:22,650 --> 00:01:27,240
enabled and as a consequence<font color="#E5E5E5"> e default</font>

29
00:01:25,350 --> 00:01:30,380
source self which tells your browser

30
00:01:27,240 --> 00:01:33,089
you're allowed<font color="#E5E5E5"> to load sources like</font>

31
00:01:30,380 --> 00:01:36,420
<font color="#E5E5E5">JavaScript files like style sheets</font>

32
00:01:33,090 --> 00:01:39,299
images stuff like that only<font color="#E5E5E5"> from our</font>

33
00:01:36,420 --> 00:01:41,130
server they could specify from facebook

34
00:01:39,299 --> 00:01:44,579
com or from wherever you<font color="#E5E5E5"> want but</font>

35
00:01:41,130 --> 00:01:47,420
basically it's a whitelist so the goal

36
00:01:44,579 --> 00:01:53,539
is cross-site scripting mitigation so

37
00:01:47,420 --> 00:01:56,790
you can't<font color="#CCCCCC"> just specify from evil calm /</font>

38
00:01:53,540 --> 00:01:59,869
give me all your cookies yes you can

39
00:01:56,790 --> 00:02:03,180
include<font color="#E5E5E5"> it if it's</font><font color="#CCCCCC"> not here in the CSP</font>

40
00:01:59,869 --> 00:02:05,490
so obviously that's a nice thought but

41
00:02:03,180 --> 00:02:07,170
not enough to mitigate cross-site

42
00:02:05,490 --> 00:02:08,459
scripting just whitelisting sources

43
00:02:07,170 --> 00:02:10,649
because if you have a cross-site

44
00:02:08,459 --> 00:02:12,340
scripting vulnerability you could<font color="#CCCCCC"> just</font>

45
00:02:10,649 --> 00:02:16,690
add your own code in line

46
00:02:12,340 --> 00:02:19,360
so what CSP does besides whitelisting

47
00:02:16,690 --> 00:02:22,450
sources is it blocks all inline

48
00:02:19,360 --> 00:02:25,150
JavaScript so if you enable CSP on your

49
00:02:22,450 --> 00:02:27,670
site it will probably not work anymore I

50
00:02:25,150 --> 00:02:30,040
don't know I guess a lot of<font color="#E5E5E5"> you guys</font>

51
00:02:27,670 --> 00:02:32,200
<font color="#CCCCCC">have a website that uses JavaScript and</font>

52
00:02:30,040 --> 00:02:34,329
probably not everything has been moved

53
00:02:32,200 --> 00:02:36,640
to JavaScript files and<font color="#CCCCCC"> included but</font>

54
00:02:34,330 --> 00:02:39,069
<font color="#E5E5E5">sometimes there's just the typical</font>

55
00:02:36,640 --> 00:02:41,500
script<font color="#E5E5E5"> card script tags and then</font>

56
00:02:39,069 --> 00:02:45,220
javascript in between right in the dot

57
00:02:41,500 --> 00:02:48,190
PHP HTML file so this won't work with a

58
00:02:45,220 --> 00:02:51,310
CSP enabled other stuff that<font color="#E5E5E5"> doesn't</font>

59
00:02:48,190 --> 00:02:53,590
work i am sorry to<font color="#E5E5E5"> make it work as I</font>

60
00:02:51,310 --> 00:02:56,319
said you need to<font color="#E5E5E5"> move it to</font><font color="#CCCCCC"> a script</font>

61
00:02:53,590 --> 00:02:58,269
<font color="#E5E5E5">file and include it like this other</font>

62
00:02:56,319 --> 00:03:01,980
<font color="#E5E5E5">things</font><font color="#CCCCCC"> that won't work is all evil</font>

63
00:02:58,269 --> 00:03:05,200
functions are blocked give all this evil

64
00:03:01,980 --> 00:03:08,170
everyone should know that here don't use

65
00:03:05,200 --> 00:03:11,319
<font color="#E5E5E5">it if you have CSP enabled you could</font>

66
00:03:08,170 --> 00:03:13,839
enable it on purpose of like opening all

67
00:03:11,319 --> 00:03:18,819
ports on the firewall kind of destroys

68
00:03:13,840 --> 00:03:21,489
the the purpose of CSP and another<font color="#CCCCCC"> thing</font>

69
00:03:18,819 --> 00:03:23,950
which most people is really interest

70
00:03:21,489 --> 00:03:26,650
interesting Lee enough sorry about<font color="#CCCCCC"> that</font>

71
00:03:23,950 --> 00:03:29,500
don't know bar my function equals new

72
00:03:26,650 --> 00:03:31,750
function that kind of declaring function

73
00:03:29,500 --> 00:03:33,910
in JavaScript doesn't work as well it's

74
00:03:31,750 --> 00:03:35,920
blocked by CSP and you can't enable it

75
00:03:33,910 --> 00:03:37,780
the reason why most people don't<font color="#E5E5E5"> know</font>

76
00:03:35,920 --> 00:03:41,108
this is because most<font color="#E5E5E5"> people actually</font>

77
00:03:37,780 --> 00:03:44,530
<font color="#CCCCCC">don't take a look at the request for</font>

78
00:03:41,109 --> 00:03:46,030
comment but let's just<font color="#E5E5E5"> go for blog</font><font color="#CCCCCC"> posts</font>

79
00:03:44,530 --> 00:03:47,799
and it's not<font color="#E5E5E5"> mentioned in most of the</font>

80
00:03:46,030 --> 00:03:52,329
blog posts so you might<font color="#E5E5E5"> run into</font>

81
00:03:47,799 --> 00:03:55,720
problems with<font color="#E5E5E5"> that</font><font color="#CCCCCC"> okay yet another</font>

82
00:03:52,329 --> 00:03:59,739
thing that is blocked by CSP and you can

83
00:03:55,720 --> 00:04:01,480
enable that as well is inline CSS so if

84
00:03:59,739 --> 00:04:05,430
you have any we're on your side

85
00:04:01,480 --> 00:04:09,540
something<font color="#E5E5E5"> like this and</font><font color="#CCCCCC"> header line one</font>

86
00:04:05,430 --> 00:04:12,010
headline one<font color="#E5E5E5"> tag with</font><font color="#CCCCCC"> the inline</font>

87
00:04:09,540 --> 00:04:14,470
cascading style sheets like font color

88
00:04:12,010 --> 00:04:16,329
equals<font color="#CCCCCC"> read this is a basic cross-site</font>

89
00:04:14,470 --> 00:04:18,279
scripting example we have an unsanitized

90
00:04:16,329 --> 00:04:20,620
user variable and we can<font color="#CCCCCC"> just add</font>

91
00:04:18,279 --> 00:04:22,780
anything after<font color="#E5E5E5"> Bob and what</font><font color="#CCCCCC"> I did here</font>

92
00:04:20,620 --> 00:04:25,610
is I added the one<font color="#CCCCCC"> that they had a one</font>

93
00:04:22,780 --> 00:04:27,438
line with a style font color

94
00:04:25,610 --> 00:04:29,689
was red and as you can see the header

95
00:04:27,439 --> 00:04:33,740
defaced is added but it's still green

96
00:04:29,689 --> 00:04:36,919
because by<font color="#E5E5E5"> ocsp of course HTML is not</font>

97
00:04:33,740 --> 00:04:41,240
blocked<font color="#CCCCCC"> will be disastrous but CSS is</font>

98
00:04:36,919 --> 00:04:43,008
blocked<font color="#CCCCCC"> ok you can see all the</font>

99
00:04:41,240 --> 00:04:45,259
violations to<font color="#E5E5E5"> your content security</font>

100
00:04:43,009 --> 00:04:47,569
policy<font color="#E5E5E5"> in your browser which doesn't</font>

101
00:04:45,259 --> 00:04:49,669
help you that much if a user comes to

102
00:04:47,569 --> 00:04:52,789
your<font color="#E5E5E5"> page and browses it and stumbles</font>

103
00:04:49,669 --> 00:04:55,310
across a CSP violation but<font color="#E5E5E5"> that you can</font>

104
00:04:52,789 --> 00:04:57,199
set up actually a report your I where

105
00:04:55,310 --> 00:04:59,270
all these reports from all users are

106
00:04:57,199 --> 00:05:02,930
sent to and you have detailed<font color="#E5E5E5"> reports in</font>

107
00:04:59,270 --> 00:05:06,198
a lock which is kind of nice it's

108
00:05:02,930 --> 00:05:08,689
supported by almost all browsers yeah

109
00:05:06,199 --> 00:05:10,180
guess that not<font color="#CCCCCC"> internet explorer these</font>

110
00:05:08,689 --> 00:05:12,710
are the<font color="#E5E5E5"> only guys who haven't</font>

111
00:05:10,180 --> 00:05:15,080
implemented it yet at<font color="#CCCCCC"> least not fully</font>

112
00:05:12,710 --> 00:05:16,849
they have some features but it's very

113
00:05:15,080 --> 00:05:21,279
experimental and not really supported by

114
00:05:16,849 --> 00:05:23,960
<font color="#CCCCCC">E actually I tested it with e IE 11</font>

115
00:05:21,279 --> 00:05:29,440
doesn't work so they're still behind

116
00:05:23,960 --> 00:05:32,299
there<font color="#CCCCCC"> ok so the question what is CSP as</font>

117
00:05:29,440 --> 00:05:34,339
frustrating it's<font color="#E5E5E5"> really frustrating to</font>

118
00:05:32,300 --> 00:05:36,589
implement it you're gonna really going

119
00:05:34,339 --> 00:05:38,719
to have a hard time doing it<font color="#CCCCCC"> and if you</font>

120
00:05:36,589 --> 00:05:40,870
do please do your research first

121
00:05:38,719 --> 00:05:43,580
otherwise you will break your site and

122
00:05:40,870 --> 00:05:46,039
angry people will be at<font color="#CCCCCC"> your desk</font>

123
00:05:43,580 --> 00:05:47,870
definitely so the<font color="#E5E5E5"> question I want to</font>

124
00:05:46,039 --> 00:05:50,089
answer here is it worth it if it's

125
00:05:47,870 --> 00:05:53,000
frustrating do we really<font color="#E5E5E5"> want to put</font>

126
00:05:50,089 --> 00:05:55,370
that<font color="#E5E5E5"> much time and effort into it for</font>

127
00:05:53,000 --> 00:05:57,680
that I want<font color="#CCCCCC"> to take a</font><font color="#E5E5E5"> look if it</font>

128
00:05:55,370 --> 00:06:00,259
actually does what it says it does so I

129
00:05:57,680 --> 00:06:03,860
gathered all<font color="#CCCCCC"> the information I could</font>

130
00:06:00,259 --> 00:06:06,229
find on attacks on CSP<font color="#E5E5E5"> and try them each</font>

131
00:06:03,860 --> 00:06:09,020
one by one and let's<font color="#E5E5E5"> take a look at that</font>

132
00:06:06,229 --> 00:06:11,810
so we have injecting<font color="#CCCCCC"> javascript of</font>

133
00:06:09,020 --> 00:06:14,810
course sorry encoding<font color="#CCCCCC"> javascript of</font>

134
00:06:11,810 --> 00:06:18,319
course there's always a way to try to

135
00:06:14,810 --> 00:06:20,180
bypass stuff by encoding it we have

136
00:06:18,319 --> 00:06:21,710
injecting into service I files if we can

137
00:06:20,180 --> 00:06:24,469
inject into the files that<font color="#E5E5E5"> are on the</font>

138
00:06:21,710 --> 00:06:26,930
server most content security policies

139
00:06:24,469 --> 00:06:29,659
state that our own server is fine of

140
00:06:26,930 --> 00:06:31,370
course<font color="#CCCCCC"> why wouldn't they so we can</font>

141
00:06:29,659 --> 00:06:33,740
inject into those files<font color="#E5E5E5"> then you're in</font>

142
00:06:31,370 --> 00:06:35,539
the clear if you can upload malicious

143
00:06:33,740 --> 00:06:37,990
files of course that's<font color="#E5E5E5"> another great way</font>

144
00:06:35,539 --> 00:06:41,289
to do it or if you can just

145
00:06:37,990 --> 00:06:43,600
manipulate the CSP head itself<font color="#E5E5E5"> okay so</font>

146
00:06:41,290 --> 00:06:45,460
first up this is actually interesting

147
00:06:43,600 --> 00:06:49,180
because we're not encoding the

148
00:06:45,460 --> 00:06:51,640
JavaScript to bypass the CSP so in order

149
00:06:49,180 --> 00:06:53,770
to hide that we're using javascript

150
00:06:51,640 --> 00:06:55,570
we're just encoding it so we can<font color="#E5E5E5"> put it</font>

151
00:06:53,770 --> 00:06:59,469
in the URL field without breaking

152
00:06:55,570 --> 00:07:01,750
anything and the meta tag is an HTTP

153
00:06:59,470 --> 00:07:06,100
tagg and is therefore not blocked

154
00:07:01,750 --> 00:07:09,790
because CSP can't block and HTML<font color="#E5E5E5"> I'm</font>

155
00:07:06,100 --> 00:07:12,370
sorry HTML so what we do here is

156
00:07:09,790 --> 00:07:15,460
http-equiv refresh' we telling we're

157
00:07:12,370 --> 00:07:18,910
telling the browser of our victim to

158
00:07:15,460 --> 00:07:22,299
refresh the page not any page we tell it

159
00:07:18,910 --> 00:07:24,640
refresh the page base64 and that's our

160
00:07:22,300 --> 00:07:27,430
JavaScript base64 encoded and wonder

161
00:07:24,640 --> 00:07:30,909
what the victims browser will do is it

162
00:07:27,430 --> 00:07:33,520
will take the base64 string decoded and

163
00:07:30,910 --> 00:07:35,770
execute it so we're<font color="#E5E5E5"> not on this side</font>

164
00:07:33,520 --> 00:07:37,330
with the cross-site scripting anymore

165
00:07:35,770 --> 00:07:39,340
but we're still able<font color="#E5E5E5"> to execute</font>

166
00:07:37,330 --> 00:07:41,050
<font color="#E5E5E5">JavaScript and the in the victims</font>

167
00:07:39,340 --> 00:07:43,359
browser which which<font color="#CCCCCC"> is at least</font>

168
00:07:41,050 --> 00:07:47,830
something<font color="#CCCCCC"> okay so that's the</font><font color="#E5E5E5"> the most</font>

169
00:07:43,360 --> 00:07:50,410
basic attack another attack of course is

170
00:07:47,830 --> 00:07:52,479
trying to inject into the<font color="#CCCCCC"> JavaScript</font>

171
00:07:50,410 --> 00:07:54,340
files themselves so we have to move

172
00:07:52,480 --> 00:07:56,740
<font color="#E5E5E5">everything from inside JavaScript to out</font>

173
00:07:54,340 --> 00:07:59,650
of line or inline JavaScript to out of

174
00:07:56,740 --> 00:08:04,180
line<font color="#E5E5E5"> JavaScript how can we inject</font>

175
00:07:59,650 --> 00:08:06,429
directly into these these documents so i

176
00:08:04,180 --> 00:08:09,040
tried some stuff I tried evil which is

177
00:08:06,430 --> 00:08:11,230
<font color="#E5E5E5">blocked but</font><font color="#CCCCCC"> I tried it anyway I tried</font>

178
00:08:09,040 --> 00:08:12,730
VAR my function equals equals new

179
00:08:11,230 --> 00:08:16,210
function which is<font color="#E5E5E5"> how I stumble across</font>

180
00:08:12,730 --> 00:08:18,130
that this is blocked and<font color="#E5E5E5"> I tried with</font>

181
00:08:16,210 --> 00:08:21,280
the help of a colleague of mine parent

182
00:08:18,130 --> 00:08:23,260
node insert this actually works I'm not

183
00:08:21,280 --> 00:08:25,210
<font color="#E5E5E5">going to show it here because it's</font><font color="#CCCCCC"> just</font>

184
00:08:23,260 --> 00:08:28,900
a bunch<font color="#E5E5E5"> of code and it's not that</font>

185
00:08:25,210 --> 00:08:31,500
interesting<font color="#E5E5E5"> as I said</font><font color="#CCCCCC"> I put all of the</font>

186
00:08:28,900 --> 00:08:34,360
content all of the code examples online

187
00:08:31,500 --> 00:08:39,010
you can you can check that out if<font color="#CCCCCC"> we</font>

188
00:08:34,360 --> 00:08:41,770
want it's really really awful code so if

189
00:08:39,010 --> 00:08:43,990
you you shouldn't stumble across this so

190
00:08:41,770 --> 00:08:46,720
the last example you shouldn't stumble

191
00:08:43,990 --> 00:08:48,850
across this type of vulnerability in the

192
00:08:46,720 --> 00:08:51,070
wild because we we really put a lot of

193
00:08:48,850 --> 00:08:54,100
effort into making this

194
00:08:51,070 --> 00:08:55,870
vulnerable enough for us to bypass CSP

195
00:08:54,100 --> 00:08:58,300
so this was all important purpose and it

196
00:08:55,870 --> 00:09:00,100
still took us a lot<font color="#E5E5E5"> of time if you do</font>

197
00:08:58,300 --> 00:09:01,780
however if you take a<font color="#E5E5E5"> look at</font><font color="#CCCCCC"> it if you</font>

198
00:09:00,100 --> 00:09:03,370
find it somewhere<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a while please tell</font>

199
00:09:01,780 --> 00:09:07,689
me because if it's out there I want to

200
00:09:03,370 --> 00:09:11,140
see it let's hope not<font color="#CCCCCC"> ok so another</font>

201
00:09:07,690 --> 00:09:14,110
<font color="#E5E5E5">server site injection is Jason because</font>

202
00:09:11,140 --> 00:09:17,800
changed Jason much more obviously it's

203
00:09:14,110 --> 00:09:20,860
used for storing data and for reading

204
00:09:17,800 --> 00:09:23,020
data from<font color="#CCCCCC"> it so this is a basic PHP</font>

205
00:09:20,860 --> 00:09:27,160
commenting system it is vulnerable I

206
00:09:23,020 --> 00:09:29,260
made it<font color="#CCCCCC"> a bit more</font><font color="#E5E5E5"> vulnerable not</font>

207
00:09:27,160 --> 00:09:31,180
because I<font color="#E5E5E5"> needed to bypass ESP but</font>

208
00:09:29,260 --> 00:09:33,060
because it's more convenient that way I

209
00:09:31,180 --> 00:09:37,479
don't have to think<font color="#E5E5E5"> about encoding stuff</font>

210
00:09:33,060 --> 00:09:41,140
it's<font color="#E5E5E5"> just as an easy example so you can</font>

211
00:09:37,480 --> 00:09:42,580
just<font color="#E5E5E5"> store type in your comment post it</font>

212
00:09:41,140 --> 00:09:43,990
and it's stored<font color="#E5E5E5"> in the JSON file and</font>

213
00:09:42,580 --> 00:09:46,570
what the chaser five looks like it's the

214
00:09:43,990 --> 00:09:49,630
first line these are<font color="#E5E5E5"> two comments in the</font>

215
00:09:46,570 --> 00:09:52,000
<font color="#E5E5E5">chase and file so you basically you have</font>

216
00:09:49,630 --> 00:09:54,400
a laser pointer here you have your text

217
00:09:52,000 --> 00:09:56,440
<font color="#CCCCCC">field and then first comment which is</font>

218
00:09:54,400 --> 00:09:59,470
here and then you have the second

219
00:09:56,440 --> 00:10:01,630
comment and what we want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do is we</font>

220
00:09:59,470 --> 00:10:04,300
want to<font color="#E5E5E5"> close the chase in with the</font>

221
00:10:01,630 --> 00:10:06,760
square bracket add our<font color="#CCCCCC"> JavaScript and</font>

222
00:10:04,300 --> 00:10:09,910
then open a new for further comments

223
00:10:06,760 --> 00:10:13,390
what this does is it gives us valid

224
00:10:09,910 --> 00:10:17,439
JavaScript and valid Jason so nothing

225
00:10:13,390 --> 00:10:19,990
breaks if you just use this one so<font color="#E5E5E5"> if</font>

226
00:10:17,440 --> 00:10:23,010
you the highlighted the<font color="#CCCCCC"> gray highlighted</font>

227
00:10:19,990 --> 00:10:26,290
area it would<font color="#E5E5E5"> just post this as it is</font>

228
00:10:23,010 --> 00:10:31,060
<font color="#CCCCCC">Jason will when Jason angkong</font><font color="#E5E5E5"> code is</font>

229
00:10:26,290 --> 00:10:34,599
called will encode it and what you<font color="#E5E5E5"> get</font>

230
00:10:31,060 --> 00:10:36,849
<font color="#E5E5E5">essentially is a comment like this but</font>

231
00:10:34,600 --> 00:10:39,280
you've not broken it because it will

232
00:10:36,850 --> 00:10:41,620
escape all double tix so it's not<font color="#CCCCCC"> going</font>

233
00:10:39,280 --> 00:10:44,199
to work if you charge you executed what

234
00:10:41,620 --> 00:10:46,570
we can do is usually have seven encoded

235
00:10:44,200 --> 00:10:48,940
and I actually never worked with UT of 7

236
00:10:46,570 --> 00:10:52,450
before this so I was something new for

237
00:10:48,940 --> 00:10:55,660
me what you get is<font color="#E5E5E5"> this exact same</font>

238
00:10:52,450 --> 00:10:56,860
payload is now this string and if you if

239
00:10:55,660 --> 00:11:00,510
you take a<font color="#E5E5E5"> look at it there are no</font>

240
00:10:56,860 --> 00:11:02,690
double quotes no double<font color="#E5E5E5"> ticks in there</font>

241
00:11:00,510 --> 00:11:05,090
double quotes right

242
00:11:02,690 --> 00:11:08,000
so it's not escaped so we can't just

243
00:11:05,090 --> 00:11:10,340
inject it and this is the exact same

244
00:11:08,000 --> 00:11:14,090
string as will be stored in the JSON

245
00:11:10,340 --> 00:11:15,680
file so it's not been altered so the

246
00:11:14,090 --> 00:11:17,690
first three dots are just the<font color="#CCCCCC"> first two</font>

247
00:11:15,680 --> 00:11:20,120
comments I've stripped them away for

248
00:11:17,690 --> 00:11:22,910
better readability but this is exactly

249
00:11:20,120 --> 00:11:26,960
<font color="#E5E5E5">what we get if we take the whole JSON</font>

250
00:11:22,910 --> 00:11:28,790
file and UT of seven<font color="#E5E5E5"> decoded so</font>

251
00:11:26,960 --> 00:11:31,700
everything that's been stored in the

252
00:11:28,790 --> 00:11:35,599
chase the file before and is decoded you

253
00:11:31,700 --> 00:11:38,630
tf7 won't change so it's still the<font color="#CCCCCC"> same</font>

254
00:11:35,600 --> 00:11:41,510
<font color="#E5E5E5">thing so that quite that works quite</font>

255
00:11:38,630 --> 00:11:44,120
well if we include it via we're the

256
00:11:41,510 --> 00:11:47,270
script tag source equals and then our

257
00:11:44,120 --> 00:11:50,870
comments<font color="#E5E5E5"> JSON file and then type equals</font>

258
00:11:47,270 --> 00:11:55,010
application /<font color="#E5E5E5"> JavaScript what what</font>

259
00:11:50,870 --> 00:11:57,410
chrome will will tell<font color="#CCCCCC"> us is you can't</font>

260
00:11:55,010 --> 00:11:59,060
execute<font color="#CCCCCC"> json file this</font><font color="#E5E5E5"> JavaScript it's</font>

261
00:11:57,410 --> 00:12:00,680
not going to work because you have

262
00:11:59,060 --> 00:12:03,949
strict mime type checking enabled and

263
00:12:00,680 --> 00:12:06,949
that's not not allowed so what<font color="#E5E5E5"> Firefox</font>

264
00:12:03,950 --> 00:12:09,770
says is this well that's quite

265
00:12:06,950 --> 00:12:12,410
<font color="#E5E5E5">interesting I have to think you're a bit</font>

266
00:12:09,770 --> 00:12:16,610
with it actually if firefox gives you

267
00:12:12,410 --> 00:12:20,480
this response<font color="#E5E5E5"> only on firefox 4.1 4.01</font>

268
00:12:16,610 --> 00:12:23,180
and below<font color="#E5E5E5"> the reason for this is mozilla</font>

269
00:12:20,480 --> 00:12:26,240
<font color="#CCCCCC">stripped all you tf7 support from</font>

270
00:12:23,180 --> 00:12:29,540
<font color="#E5E5E5">firefox 5 and the buff to be html5</font>

271
00:12:26,240 --> 00:12:32,900
compliant it still tries to execute the

272
00:12:29,540 --> 00:12:35,000
Chasen though it<font color="#CCCCCC"> just can't read it okay</font>

273
00:12:32,900 --> 00:12:38,000
so that brought me to another idea if it

274
00:12:35,000 --> 00:12:39,530
takes anything you give it want to try

275
00:12:38,000 --> 00:12:41,990
<font color="#E5E5E5">to upload that image and there are a lot</font>

276
00:12:39,530 --> 00:12:44,720
of vulnerabilities out there that think

277
00:12:41,990 --> 00:12:47,810
you're uploading it in an image because

278
00:12:44,720 --> 00:12:51,800
it's called dot jpg so what else could

279
00:12:47,810 --> 00:12:54,020
it possibly be than an image right so

280
00:12:51,800 --> 00:12:56,500
this<font color="#E5E5E5"> is a really really basic examples</font>

281
00:12:54,020 --> 00:13:00,170
i'm sure you guys can think of a lot a

282
00:12:56,500 --> 00:13:02,390
<font color="#CCCCCC">lot</font><font color="#E5E5E5"> better ways to inject code in the</font>

283
00:13:00,170 --> 00:13:05,959
into images with this for simplicity's

284
00:13:02,390 --> 00:13:08,000
sake we have a file called evil<font color="#E5E5E5"> Dolce</font>

285
00:13:05,960 --> 00:13:11,900
pack actually it's a text file with

286
00:13:08,000 --> 00:13:13,190
alert one in it and suppose<font color="#CCCCCC"> we can</font>

287
00:13:11,900 --> 00:13:14,959
<font color="#E5E5E5">upload it</font><font color="#CCCCCC"> to the server it's</font>

288
00:13:13,190 --> 00:13:18,350
theoretically of course

289
00:13:14,960 --> 00:13:20,270
and then we can<font color="#CCCCCC"> just</font><font color="#E5E5E5"> tell Firefox if our</font>

290
00:13:18,350 --> 00:13:22,820
victim uses firefox of course otherwise

291
00:13:20,270 --> 00:13:24,860
it will break to load this as a

292
00:13:22,820 --> 00:13:28,250
<font color="#CCCCCC">JavaScript file and it will happily</font>

293
00:13:24,860 --> 00:13:31,940
execute it I tested it on Firefox 28 no

294
00:13:28,250 --> 00:13:36,380
problem so this is<font color="#E5E5E5"> still a possible</font>

295
00:13:31,940 --> 00:13:39,950
attack okay um let's get to the last

296
00:13:36,380 --> 00:13:41,600
part who here<font color="#CCCCCC"> knows whats ER LF</font>

297
00:13:39,950 --> 00:13:47,750
injection or carriage return line feed

298
00:13:41,600 --> 00:13:51,890
injection<font color="#CCCCCC"> asst okay basically what you</font>

299
00:13:47,750 --> 00:13:55,850
have<font color="#E5E5E5"> is you have a new line</font><font color="#CCCCCC"> thanks and</font>

300
00:13:51,890 --> 00:13:58,970
this the characters percentage 0d

301
00:13:55,850 --> 00:14:01,550
percentage<font color="#CCCCCC"> see ray which tells this is</font>

302
00:13:58,970 --> 00:14:07,160
the end<font color="#E5E5E5"> of the line and now comes a new</font>

303
00:14:01,550 --> 00:14:11,060
line what we do this the the<font color="#CCCCCC"> coda part</font>

304
00:14:07,160 --> 00:14:14,270
is basically an HD a PHP redirect page

305
00:14:11,060 --> 00:14:16,609
so all it does is<font color="#E5E5E5"> it takes the URL</font>

306
00:14:14,270 --> 00:14:19,040
parameter and tries to redirect it to

307
00:14:16,610 --> 00:14:21,410
this source and what you can do is you

308
00:14:19,040 --> 00:14:25,250
can call the side<font color="#E5E5E5"> I call it read your</font>

309
00:14:21,410 --> 00:14:26,900
PHP and your l equals site this is our

310
00:14:25,250 --> 00:14:28,070
side with the cross-site scripting on it

311
00:14:26,900 --> 00:14:30,430
you can add the cross-site scripting

312
00:14:28,070 --> 00:14:33,380
parameter if you can add<font color="#E5E5E5"> them in the URL</font>

313
00:14:30,430 --> 00:14:36,709
and<font color="#E5E5E5"> then just percentage 0d percentage</font>

314
00:14:33,380 --> 00:14:39,590
0a and don't<font color="#E5E5E5"> put a line break in there</font>

315
00:14:36,710 --> 00:14:40,880
it's just for better readability because

316
00:14:39,590 --> 00:14:44,890
otherwise the line<font color="#E5E5E5"> would be too long</font>

317
00:14:40,880 --> 00:14:48,050
this is actually one line add your

318
00:14:44,890 --> 00:14:50,240
header option which you want to to add

319
00:14:48,050 --> 00:14:52,010
<font color="#E5E5E5">to the response from the server like</font>

320
00:14:50,240 --> 00:14:55,060
content security policy equals script

321
00:14:52,010 --> 00:14:58,340
source unsafe inline we're just allowing

322
00:14:55,060 --> 00:15:01,400
inside inline JavaScript to be<font color="#CCCCCC"> executed</font>

323
00:14:58,340 --> 00:15:03,770
so we're telling the CSP allow inline

324
00:15:01,400 --> 00:15:07,250
JavaScript which is as I said<font color="#E5E5E5"> before</font>

325
00:15:03,770 --> 00:15:10,670
much likely allow evil function bad

326
00:15:07,250 --> 00:15:14,120
never do it on purpose depends<font color="#E5E5E5"> on the</font>

327
00:15:10,670 --> 00:15:17,030
side you're<font color="#E5E5E5"> on right so what we do is we</font>

328
00:15:14,120 --> 00:15:20,540
add<font color="#CCCCCC"> two crls at the end and tell the</font>

329
00:15:17,030 --> 00:15:23,390
browser header and everything that comes

330
00:15:20,540 --> 00:15:25,870
now just forget about it this is the<font color="#CCCCCC"> end</font>

331
00:15:23,390 --> 00:15:25,870
of our head

332
00:15:26,180 --> 00:15:31,910
it works on certain machines depending

333
00:15:30,350 --> 00:15:36,470
on the PHP version you have installed

334
00:15:31,910 --> 00:15:38,870
because PHP actually fix that problem it

335
00:15:36,470 --> 00:15:40,970
still<font color="#E5E5E5"> works even though PHP fixed it in</font>

336
00:15:38,870 --> 00:15:44,720
some versions<font color="#CCCCCC"> of Internet Explorer up</font>

337
00:15:40,970 --> 00:15:46,279
but I<font color="#E5E5E5"> don't tested them because internet</font>

338
00:15:44,720 --> 00:15:50,120
explorer doesn't support CSP in the

339
00:15:46,279 --> 00:15:54,970
first place so<font color="#E5E5E5"> why bother</font><font color="#CCCCCC"> that would</font><font color="#E5E5E5"> be</font>

340
00:15:50,120 --> 00:15:57,680
any gain of it so it still works but

341
00:15:54,970 --> 00:15:59,750
aside from PHP having that vulnerability

342
00:15:57,680 --> 00:16:02,779
fixed and still in common vulnerability

343
00:15:59,750 --> 00:16:05,810
so this is<font color="#E5E5E5"> just an example which has</font>

344
00:16:02,779 --> 00:16:08,420
been fixed<font color="#E5E5E5"> in the meantime but there are</font>

345
00:16:05,810 --> 00:16:11,060
still<font color="#E5E5E5"> CRF injection vulnerabilities out</font>

346
00:16:08,420 --> 00:16:13,670
there and if you stumble<font color="#E5E5E5"> across one and</font>

347
00:16:11,060 --> 00:16:17,449
there is a CSP in place you could use

348
00:16:13,670 --> 00:16:20,290
this kind of attack to bypass CSP which

349
00:16:17,450 --> 00:16:24,850
brings<font color="#E5E5E5"> me to my at the end of my talk</font>

350
00:16:20,290 --> 00:16:29,839
does it work and for me CSP does

351
00:16:24,850 --> 00:16:32,779
<font color="#E5E5E5">definitely work look strange because</font><font color="#CCCCCC"> all</font>

352
00:16:29,839 --> 00:16:35,600
almost<font color="#E5E5E5"> all of the attacks if they still</font>

353
00:16:32,779 --> 00:16:38,240
work rely<font color="#CCCCCC"> on other vulnerabilities to be</font>

354
00:16:35,600 --> 00:16:39,620
in place so<font color="#E5E5E5"> you have the</font><font color="#CCCCCC"> crl f1 ability</font>

355
00:16:38,240 --> 00:16:42,170
that needs to be in place you have the

356
00:16:39,620 --> 00:16:44,240
file uploads vulnerability that has to

357
00:16:42,170 --> 00:16:48,439
be<font color="#E5E5E5"> in place</font><font color="#CCCCCC"> in order to bypass CSP so if</font>

358
00:16:44,240 --> 00:16:50,870
you have a secure site and only only

359
00:16:48,440 --> 00:16:52,490
cross-site scripting on the side yeah

360
00:16:50,870 --> 00:16:55,459
secure side and cross site scripting in

361
00:16:52,490 --> 00:16:58,790
the same sentence then it's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> going to</font>

362
00:16:55,459 --> 00:17:01,069
work except for the meta tag but there's

363
00:16:58,790 --> 00:17:05,059
nothing CSP can do about that because it

364
00:17:01,070 --> 00:17:06,740
can't block the HTML<font color="#E5E5E5"> meta tag and once</font>

365
00:17:05,059 --> 00:17:08,119
the refresh is done it's not<font color="#E5E5E5"> on the side</font>

366
00:17:06,740 --> 00:17:10,849
and<font color="#E5E5E5"> you're not on</font><font color="#CCCCCC"> the side anymore</font>

367
00:17:08,119 --> 00:17:14,448
that's protected by CSP so it's kind of

368
00:17:10,849 --> 00:17:16,879
a way around it<font color="#CCCCCC"> ok so the other question</font>

369
00:17:14,449 --> 00:17:18,500
is is it worth the hassle and that's

370
00:17:16,880 --> 00:17:21,020
<font color="#E5E5E5">really for everyone else to figure out I</font>

371
00:17:18,500 --> 00:17:23,750
can't tell you yes or no for me it's

372
00:17:21,020 --> 00:17:26,839
definitely worth the hassle I know how

373
00:17:23,750 --> 00:17:29,870
much work it is and I know how<font color="#E5E5E5"> much</font><font color="#CCCCCC"> of a</font>

374
00:17:26,839 --> 00:17:31,428
pain it can be<font color="#E5E5E5"> but if you take the time</font>

375
00:17:29,870 --> 00:17:34,489
<font color="#E5E5E5">and if you get the resources of course</font>

376
00:17:31,429 --> 00:17:36,830
for doing so it can help you because it

377
00:17:34,490 --> 00:17:39,720
not only blocks cross-site scripting

378
00:17:36,830 --> 00:17:42,780
attacks and gives it time to

379
00:17:39,720 --> 00:17:44,580
them it also if someone stumbles across

380
00:17:42,780 --> 00:17:47,250
it by accident it doesn't even realize

381
00:17:44,580 --> 00:17:47,970
it you get a report<font color="#E5E5E5"> and you know that</font>

382
00:17:47,250 --> 00:17:50,789
there's a cross-site scripting

383
00:17:47,970 --> 00:17:53,490
vulnerability and you can fix it so for

384
00:17:50,789 --> 00:17:55,289
me it's worth it<font color="#CCCCCC"> okay so that</font><font color="#E5E5E5"> was my</font>

385
00:17:53,490 --> 00:17:56,820
talk as I<font color="#E5E5E5"> said you can find all the</font>

386
00:17:55,289 --> 00:18:00,030
source code<font color="#CCCCCC"> and the examples along with</font>

387
00:17:56,820 --> 00:18:02,789
detailed explanations on<font color="#E5E5E5"> hashtag</font>

388
00:18:00,030 --> 00:18:05,190
security of calm / CSP you can ask me

389
00:18:02,789 --> 00:18:07,470
questions now later or<font color="#E5E5E5"> on twitter at</font>

390
00:18:05,190 --> 00:18:09,750
hashtag security<font color="#CCCCCC"> i want to thank</font><font color="#E5E5E5"> my</font>

391
00:18:07,470 --> 00:18:10,980
mentor day for helping me and also<font color="#E5E5E5"> a</font>

392
00:18:09,750 --> 00:18:12,750
colleague of mine who isn't here today

393
00:18:10,980 --> 00:18:15,620
as<font color="#CCCCCC"> scott for helping me with a</font>

394
00:18:12,750 --> 00:18:17,970
javascript the evil evil<font color="#CCCCCC"> JavaScript and</font>

395
00:18:15,620 --> 00:18:20,270
thank you all for listening and for

396
00:18:17,970 --> 00:18:20,270
having<font color="#E5E5E5"> me</font>

