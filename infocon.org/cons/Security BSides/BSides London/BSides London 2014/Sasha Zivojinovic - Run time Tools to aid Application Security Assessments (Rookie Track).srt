1
00:00:03,230 --> 00:00:09,160
you

2
00:00:05,110 --> 00:00:11,139
hey guys so my<font color="#E5E5E5"> name is Sasha I work at</font>

3
00:00:09,160 --> 00:00:13,030
Gotham digital science I'm a security

4
00:00:11,139 --> 00:00:17,980
concept consultant and have been for the

5
00:00:13,030 --> 00:00:19,750
last four<font color="#CCCCCC"> years I say probably eighty</font>

6
00:00:17,980 --> 00:00:22,810
percent of what I do is a web

7
00:00:19,750 --> 00:00:27,850
application tests a good set of those

8
00:00:22,810 --> 00:00:29,979
are black box tests so an extreme

9
00:00:27,850 --> 00:00:31,180
example of<font color="#E5E5E5"> a</font><font color="#CCCCCC"> bat box yes we had a client</font>

10
00:00:29,980 --> 00:00:33,340
turn around and say we're not<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

11
00:00:31,180 --> 00:00:35,050
tell you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> web application is I'll</font>

12
00:00:33,340 --> 00:00:36,550
<font color="#E5E5E5">tell you</font><font color="#CCCCCC"> what it's like go find it</font>

13
00:00:35,050 --> 00:00:40,300
confirm with us that it's what you think

14
00:00:36,550 --> 00:00:41,800
it is and then proceeded to hack it but

15
00:00:40,300 --> 00:00:44,860
typically what it means is that we get

16
00:00:41,800 --> 00:00:47,589
<font color="#E5E5E5">given some credentials and we escalate</font>

17
00:00:44,860 --> 00:00:51,070
our<font color="#E5E5E5"> way up the exploitation part is some</font>

18
00:00:47,590 --> 00:00:52,140
kind of system compromised so for the

19
00:00:51,070 --> 00:00:54,070
last four years<font color="#CCCCCC"> I've been performing</font>

20
00:00:52,140 --> 00:00:56,710
blackbox testing it's become quite

21
00:00:54,070 --> 00:00:58,690
obvious that that box sets a kind<font color="#E5E5E5"> of a</font>

22
00:00:56,710 --> 00:01:00,340
hangover from<font color="#CCCCCC"> the area where we used</font><font color="#E5E5E5"> to</font>

23
00:00:58,690 --> 00:01:04,628
hang out in<font color="#CCCCCC"> our basements and testings</font>

24
00:01:00,340 --> 00:01:07,840
not necessarily with permission the

25
00:01:04,629 --> 00:01:10,150
problem with this it's quite obvious

26
00:01:07,840 --> 00:01:12,549
after a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of testing that</font><font color="#E5E5E5"> we</font>

27
00:01:10,150 --> 00:01:16,570
are largely testing blind a lot of what

28
00:01:12,549 --> 00:01:18,190
we do is inference based so we inject

29
00:01:16,570 --> 00:01:19,990
some kind<font color="#E5E5E5"> of input into an application</font>

30
00:01:18,190 --> 00:01:21,640
it will<font color="#CCCCCC"> give us an output and we'll try</font>

31
00:01:19,990 --> 00:01:26,048
and<font color="#E5E5E5"> come to some conclusion as to what's</font>

32
00:01:21,640 --> 00:01:29,110
happening<font color="#CCCCCC"> behind the scenes so the</font>

33
00:01:26,049 --> 00:01:32,020
solution to<font color="#CCCCCC"> this has been great box</font>

34
00:01:29,110 --> 00:01:33,880
testing so a client will provide<font color="#CCCCCC"> us move</font>

35
00:01:32,020 --> 00:01:36,460
source code and say look from a source

36
00:01:33,880 --> 00:01:40,060
code it audit and use it<font color="#CCCCCC"> to better</font>

37
00:01:36,460 --> 00:01:42,610
channel your black box testing so this

38
00:01:40,060 --> 00:01:44,740
combination we get a kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> grey box on</font>

39
00:01:42,610 --> 00:01:46,210
somewhere in between kind of test it's

40
00:01:44,740 --> 00:01:49,240
slightly more informed in black box

41
00:01:46,210 --> 00:01:50,740
testing but it can be problematic a lot

42
00:01:49,240 --> 00:01:53,890
<font color="#CCCCCC">of the time we are chasing source code</font>

43
00:01:50,740 --> 00:01:55,390
with clients we can spend a good<font color="#E5E5E5"> two</font>

44
00:01:53,890 --> 00:01:56,560
three days burning time trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find</font>

45
00:01:55,390 --> 00:01:59,229
the right developers different

46
00:01:56,560 --> 00:02:00,790
development teams when they do get the

47
00:01:59,229 --> 00:02:02,020
source code to us it's not<font color="#CCCCCC"> the right</font>

48
00:02:00,790 --> 00:02:05,350
version it's not what's going into

49
00:02:02,020 --> 00:02:07,329
production problematic and then trying

50
00:02:05,350 --> 00:02:08,590
<font color="#E5E5E5">to find the one guy an organization who</font>

51
00:02:07,329 --> 00:02:11,439
knows actually<font color="#CCCCCC"> we had to build this</font>

52
00:02:08,590 --> 00:02:13,000
solution is well it's never happened so

53
00:02:11,439 --> 00:02:16,410
if<font color="#E5E5E5"> we aren't provided with libraries</font>

54
00:02:13,000 --> 00:02:16,410
were chasing our tails a lot of the time

55
00:02:16,630 --> 00:02:23,240
so yeah we also got a problem with

56
00:02:19,790 --> 00:02:25,640
source code delivery obviously most<font color="#E5E5E5"> of</font>

57
00:02:23,240 --> 00:02:27,800
the source code is intellectual property

58
00:02:25,640 --> 00:02:30,980
a client does not want<font color="#E5E5E5"> to leave the site</font>

59
00:02:27,800 --> 00:02:33,050
they don't want to send it to you by<font color="#E5E5E5"> any</font>

60
00:02:30,980 --> 00:02:34,549
kind of external mean so it has<font color="#CCCCCC"> been a</font>

61
00:02:33,050 --> 00:02:38,330
problem trying to get hold this stuff

62
00:02:34,550 --> 00:02:41,750
once on site so what's the other gray

63
00:02:38,330 --> 00:02:44,560
box solution it's well I think it's

64
00:02:41,750 --> 00:02:49,340
probably using run time tracing

65
00:02:44,560 --> 00:02:52,730
technology to skip past this source code

66
00:02:49,340 --> 00:02:54,500
necessity and actually have a more

67
00:02:52,730 --> 00:02:57,530
reformed look at what's happening whilst

68
00:02:54,500 --> 00:03:00,200
<font color="#E5E5E5">we're performing these tests typically</font>

69
00:02:57,530 --> 00:03:03,170
the tools that well a short summary<font color="#CCCCCC"> of</font>

70
00:03:00,200 --> 00:03:06,619
the available tools are<font color="#CCCCCC"> DTrace l trace</font>

71
00:03:03,170 --> 00:03:08,450
and estrace and they are kind of in

72
00:03:06,620 --> 00:03:11,510
order<font color="#CCCCCC"> of preference if you've got a box</font>

73
00:03:08,450 --> 00:03:15,380
that you've got d trace on you you've

74
00:03:11,510 --> 00:03:16,730
lucked out it's you it's do some

75
00:03:15,380 --> 00:03:19,670
research<font color="#E5E5E5"> on the tool it's fantastic it's</font>

76
00:03:16,730 --> 00:03:22,340
not only<font color="#E5E5E5"> allows you to monitor function</font>

77
00:03:19,670 --> 00:03:24,470
calls as they're being performed but you

78
00:03:22,340 --> 00:03:26,480
can also edit them by its destructive

79
00:03:24,470 --> 00:03:28,870
mode I'll trace allows you to trace

80
00:03:26,480 --> 00:03:31,850
library calls this is<font color="#E5E5E5"> convenient for</font>

81
00:03:28,870 --> 00:03:33,560
lipsy stark also with them whenever you

82
00:03:31,850 --> 00:03:36,829
want to spot like a dangerous<font color="#E5E5E5"> mem copy</font>

83
00:03:33,560 --> 00:03:39,050
or evaluate Lemke copy your<font color="#E5E5E5"> sterling</font>

84
00:03:36,830 --> 00:03:41,690
copy or any kind<font color="#E5E5E5"> of dangerous function</font>

85
00:03:39,050 --> 00:03:43,280
you can<font color="#CCCCCC"> use that and estrace is kind of</font>

86
00:03:41,690 --> 00:03:46,790
<font color="#E5E5E5">your fallback mechanism if you've got</font>

87
00:03:43,280 --> 00:03:50,360
none of these things<font color="#E5E5E5"> so if you</font><font color="#CCCCCC"> think</font>

88
00:03:46,790 --> 00:03:52,130
about something<font color="#E5E5E5"> like a remote file</font>

89
00:03:50,360 --> 00:03:54,530
<font color="#E5E5E5">include or local file</font><font color="#CCCCCC"> ink let's go with</font>

90
00:03:52,130 --> 00:03:57,740
local file include so the easiest way to

91
00:03:54,530 --> 00:04:01,790
spot this would be to watch for a<font color="#E5E5E5"> sis</font>

92
00:03:57,740 --> 00:04:04,280
<font color="#E5E5E5">call open on a file handle and if the</font>

93
00:04:01,790 --> 00:04:05,989
argument for the path argument ends up

94
00:04:04,280 --> 00:04:08,510
being some kind of data that<font color="#E5E5E5"> you control</font>

95
00:04:05,990 --> 00:04:14,510
you know you've potentially got a vector

96
00:04:08,510 --> 00:04:17,690
for filing<font color="#E5E5E5"> field of some sort so what is</font>

97
00:04:14,510 --> 00:04:20,510
typical testing look like number one

98
00:04:17,690 --> 00:04:23,360
with your requests to HTTP<font color="#CCCCCC"> request it</font>

99
00:04:20,510 --> 00:04:25,940
hits a web server<font color="#CCCCCC"> that web</font><font color="#E5E5E5"> server says</font>

100
00:04:23,360 --> 00:04:28,580
well<font color="#E5E5E5"> it's queering user name dot PHP so</font>

101
00:04:25,940 --> 00:04:30,210
<font color="#E5E5E5">I'm gonna perform a cisco open that file</font>

102
00:04:28,580 --> 00:04:35,940
out read it

103
00:04:30,210 --> 00:04:38,448
read the contents out and pass that that

104
00:04:35,940 --> 00:04:41,880
source code to an interpreter and

105
00:04:38,449 --> 00:04:44,280
execute whatever codes in there so let's

106
00:04:41,880 --> 00:04:48,750
say that<font color="#E5E5E5"> collect could contains a sequel</font>

107
00:04:44,280 --> 00:04:51,739
select statement the web server will

108
00:04:48,750 --> 00:04:54,539
handle the clearing the database via

109
00:04:51,740 --> 00:04:58,050
whatever function calls it does and then

110
00:04:54,539 --> 00:05:00,389
we get<font color="#E5E5E5"> return some HTML based on this</font>

111
00:04:58,050 --> 00:05:04,139
query and response from the sequel

112
00:05:00,389 --> 00:05:06,900
server so tracing effectively allows us

113
00:05:04,139 --> 00:05:08,310
to interject into a number number of

114
00:05:06,900 --> 00:05:10,770
these<font color="#E5E5E5"> points</font><font color="#CCCCCC"> so that we're not</font><font color="#E5E5E5"> only</font>

115
00:05:08,310 --> 00:05:12,900
<font color="#E5E5E5">pumping data in and getting some kind of</font>

116
00:05:10,770 --> 00:05:15,990
output out we could actually sit on the

117
00:05:12,900 --> 00:05:19,320
web server and say every<font color="#CCCCCC"> time a function</font>

118
00:05:15,990 --> 00:05:21,539
calls me to the sequel server and the

119
00:05:19,320 --> 00:05:24,240
sequel<font color="#CCCCCC"> query is performed tell me about</font>

120
00:05:21,539 --> 00:05:26,130
it so that I can<font color="#E5E5E5"> have greater overview</font>

121
00:05:24,240 --> 00:05:29,099
of how this application actually

122
00:05:26,130 --> 00:05:31,080
functions then every time<font color="#E5E5E5"> I could</font>

123
00:05:29,099 --> 00:05:32,880
mentioned a sis call was made to open<font color="#E5E5E5"> a</font>

124
00:05:31,080 --> 00:05:36,659
file tell me about it cuz I want to know

125
00:05:32,880 --> 00:05:40,770
if I can<font color="#E5E5E5"> control any of that input so I</font>

126
00:05:36,659 --> 00:05:45,509
mentioned<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the tools ready but</font>

127
00:05:40,770 --> 00:05:50,940
<font color="#CCCCCC">dtrace is</font><font color="#E5E5E5"> solaris freebsd OS X and iOS</font>

128
00:05:45,509 --> 00:05:53,009
simulator included by default so if

129
00:05:50,940 --> 00:05:55,110
you've got our sex start playing with

130
00:05:53,009 --> 00:05:57,900
<font color="#CCCCCC">dtrace because it really is like</font>

131
00:05:55,110 --> 00:06:01,979
incredible<font color="#CCCCCC"> l trace is commonly included</font>

132
00:05:57,900 --> 00:06:04,739
in linux and unix destroyers and as is

133
00:06:01,979 --> 00:06:07,919
estrace if it's not<font color="#E5E5E5"> you can get it by</font>

134
00:06:04,740 --> 00:06:10,440
package managers quite quickly a space

135
00:06:07,919 --> 00:06:13,198
truss today leverage the<font color="#CCCCCC"> peter</font><font color="#E5E5E5"> a cisco</font>

136
00:06:10,440 --> 00:06:14,880
the puter a cisco effectively allows a

137
00:06:13,199 --> 00:06:17,490
process to gain<font color="#CCCCCC"> control of another</font>

138
00:06:14,880 --> 00:06:20,789
process and mess about with its internal

139
00:06:17,490 --> 00:06:24,210
state this kind<font color="#CCCCCC"> of allows us within</font>

140
00:06:20,789 --> 00:06:30,449
<font color="#CCCCCC">Astraeus trust to log</font><font color="#E5E5E5"> syscalls as they</font>

141
00:06:24,210 --> 00:06:32,130
<font color="#E5E5E5">are made by a application and how to</font>

142
00:06:30,449 --> 00:06:34,469
describe<font color="#E5E5E5"> cisco so Cisco's are basically</font>

143
00:06:32,130 --> 00:06:37,050
like the operating system level<font color="#E5E5E5"> API so</font>

144
00:06:34,469 --> 00:06:38,969
if you want to<font color="#E5E5E5"> open</font><font color="#CCCCCC"> a file or do some</font>

145
00:06:37,050 --> 00:06:42,390
kind<font color="#E5E5E5"> of repetitive tasks that's just too</font>

146
00:06:38,969 --> 00:06:44,250
monotonous to do manually

147
00:06:42,390 --> 00:06:47,550
leverages<font color="#CCCCCC"> AP is the equivalent in</font>

148
00:06:44,250 --> 00:06:50,580
Windows is the win32 API or the

149
00:06:47,550 --> 00:06:52,560
extensions for 64-bit the difference

150
00:06:50,580 --> 00:06:55,200
with<font color="#CCCCCC"> l traces allows you to trace</font>

151
00:06:52,560 --> 00:06:59,430
library calls again if you want<font color="#CCCCCC"> to look</font>

152
00:06:55,200 --> 00:07:01,289
<font color="#E5E5E5">at things like buffer overflows and see</font>

153
00:06:59,430 --> 00:07:05,760
whenever a dangerous function in lib

154
00:07:01,290 --> 00:07:07,920
<font color="#E5E5E5">ceased being called you can leverage l</font>

155
00:07:05,760 --> 00:07:11,520
trace to give you this kind of print out

156
00:07:07,920 --> 00:07:14,190
or all this stuff going through it also

157
00:07:11,520 --> 00:07:16,919
<font color="#CCCCCC">includes</font><font color="#E5E5E5"> monitoring for cisco's logging</font>

158
00:07:14,190 --> 00:07:20,610
<font color="#E5E5E5">for cisco's so L trace be test rates</font>

159
00:07:16,920 --> 00:07:24,360
tres tres<font color="#CCCCCC"> Moyes dtrace dynamic tracing</font>

160
00:07:20,610 --> 00:07:28,470
was developed by<font color="#CCCCCC"> sun included in solaris</font>

161
00:07:24,360 --> 00:07:33,630
mainly as a kind of performance logging

162
00:07:28,470 --> 00:07:35,930
and troubleshooting tool and it's it's

163
00:07:33,630 --> 00:07:37,950
it's fantastic in that allows you to

164
00:07:35,930 --> 00:07:40,890
step through applications that have

165
00:07:37,950 --> 00:07:43,920
probes defined within them and this this

166
00:07:40,890 --> 00:07:45,750
is a bit<font color="#E5E5E5"> of a hole back</font><font color="#CCCCCC"> in terms</font><font color="#E5E5E5"> of you</font>

167
00:07:43,920 --> 00:07:47,940
have to have<font color="#E5E5E5"> an app or some kind of</font>

168
00:07:45,750 --> 00:07:50,460
service that's had these probes coded

169
00:07:47,940 --> 00:07:52,200
within them once you've got these you're

170
00:07:50,460 --> 00:07:54,840
actually flying because not only can you

171
00:07:52,200 --> 00:07:57,090
<font color="#E5E5E5">monitor function calls you can actually</font>

172
00:07:54,840 --> 00:07:58,440
<font color="#E5E5E5">modify them on the fly so you've got you</font>

173
00:07:57,090 --> 00:08:00,060
know you've got<font color="#E5E5E5"> a quick route into</font>

174
00:07:58,440 --> 00:08:03,480
in-memory fuzzing and process buzzing

175
00:08:00,060 --> 00:08:08,880
that kind of thing what<font color="#CCCCCC"> dtrace looks</font>

176
00:08:03,480 --> 00:08:12,060
like in action so qn is effectively

177
00:08:08,880 --> 00:08:14,460
quiet mode dtrace and then the red bit

178
00:08:12,060 --> 00:08:17,640
is a target<font color="#E5E5E5"> process so we are looking</font>

179
00:08:14,460 --> 00:08:20,940
for<font color="#CCCCCC"> am icicle demon we're looking</font><font color="#E5E5E5"> for a</font>

180
00:08:17,640 --> 00:08:23,310
query that's wild card my sequel pass my

181
00:08:20,940 --> 00:08:24,840
cuckoo pass is what my sequel calls

182
00:08:23,310 --> 00:08:27,690
every time it wants<font color="#CCCCCC"> to perform a kind</font><font color="#E5E5E5"> of</font>

183
00:08:24,840 --> 00:08:30,960
select insert whatever statement bits

184
00:08:27,690 --> 00:08:33,030
and blue are what we do once we<font color="#CCCCCC"> have</font>

185
00:08:30,960 --> 00:08:35,789
triggered this condition so we want to

186
00:08:33,030 --> 00:08:37,829
print out a<font color="#CCCCCC"> time stamp and the first</font>

187
00:08:35,789 --> 00:08:40,978
argument<font color="#E5E5E5"> to the function to my sequel</font>

188
00:08:37,830 --> 00:08:46,410
pass and then we're<font color="#CCCCCC"> just wrapping out</font>

189
00:08:40,979 --> 00:08:50,490
and passing piping back the PID for my

190
00:08:46,410 --> 00:08:52,709
sequel service bicycle demon and the

191
00:08:50,490 --> 00:08:56,490
output kind of looks like this

192
00:08:52,710 --> 00:08:59,340
so what you have is this is from PHP

193
00:08:56,490 --> 00:09:04,740
myadmin you have every single query that

194
00:08:59,340 --> 00:09:06,570
is before once you hit a page so it's

195
00:09:04,740 --> 00:09:08,670
<font color="#CCCCCC">you know it's typically a lot more</font>

196
00:09:06,570 --> 00:09:12,840
queries and we'd think occur in a

197
00:09:08,670 --> 00:09:15,000
background so the target really<font color="#CCCCCC"> is to</font>

198
00:09:12,840 --> 00:09:17,100
look through this and attempt<font color="#CCCCCC"> to find</font>

199
00:09:15,000 --> 00:09:21,800
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that we potentially control</font>

200
00:09:17,100 --> 00:09:24,060
that could<font color="#CCCCCC"> be an attack vector but and</font>

201
00:09:21,800 --> 00:09:28,349
right at the<font color="#E5E5E5"> bottom we've got a select</font>

202
00:09:24,060 --> 00:09:31,530
be<font color="#CCCCCC"> sized 2014 so it indicates that we</font>

203
00:09:28,350 --> 00:09:32,850
might<font color="#E5E5E5"> have some kind of control of the</font>

204
00:09:31,530 --> 00:09:35,579
parameters<font color="#CCCCCC"> passed to that select</font>

205
00:09:32,850 --> 00:09:38,370
statement therefore we might have sequel

206
00:09:35,580 --> 00:09:42,330
injection but this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a sort of this is</font>

207
00:09:38,370 --> 00:09:44,640
very applicable for a patchy kind of web

208
00:09:42,330 --> 00:09:47,280
app<font color="#E5E5E5"> II kind of testing which is why I</font>

209
00:09:44,640 --> 00:09:49,650
<font color="#CCCCCC">spend a lot of my time doing so I've</font>

210
00:09:47,280 --> 00:09:52,650
kind of focused my research into these

211
00:09:49,650 --> 00:09:53,880
tools based around those facts but

212
00:09:52,650 --> 00:09:56,400
there's no<font color="#E5E5E5"> reason that you can't use</font>

213
00:09:53,880 --> 00:09:59,610
these tools to<font color="#CCCCCC"> perform just</font><font color="#E5E5E5"> a</font>

214
00:09:56,400 --> 00:10:01,920
system-wide kind of blanket coverage of

215
00:09:59,610 --> 00:10:03,890
every dangerous function that is called

216
00:10:01,920 --> 00:10:08,870
on your<font color="#E5E5E5"> system what's calling it and</font>

217
00:10:03,890 --> 00:10:11,400
even set to the side so the expected

218
00:10:08,870 --> 00:10:13,680
expected buffer size for the arguments

219
00:10:11,400 --> 00:10:15,930
and the actual buffer size so it's<font color="#E5E5E5"> quite</font>

220
00:10:13,680 --> 00:10:17,189
easy to trigger an alert every time you

221
00:10:15,930 --> 00:10:23,310
get some kind<font color="#E5E5E5"> of buffer overflow</font>

222
00:10:17,190 --> 00:10:25,080
condition this<font color="#E5E5E5"> is what</font><font color="#CCCCCC"> is X again RSX</font>

223
00:10:23,310 --> 00:10:26,939
<font color="#CCCCCC">colonel includes the probes that you</font>

224
00:10:25,080 --> 00:10:33,720
need to<font color="#E5E5E5"> be able to perform this kind of</font>

225
00:10:26,940 --> 00:10:36,750
the kernel level logging so okay we've

226
00:10:33,720 --> 00:10:39,870
got a sequel injection we've got buffer

227
00:10:36,750 --> 00:10:42,930
overflows and massive massive issue or

228
00:10:39,870 --> 00:10:46,110
one of the hurdles<font color="#E5E5E5"> with how we progress</font>

229
00:10:42,930 --> 00:10:48,180
to form black box testing like this sort

230
00:10:46,110 --> 00:10:49,800
<font color="#CCCCCC">of a grey box testing style is we</font><font color="#E5E5E5"> need</font>

231
00:10:48,180 --> 00:10:51,780
to define<font color="#CCCCCC"> what the heuristics are four</font>

232
00:10:49,800 --> 00:10:53,479
different vulnerabilities example how do

233
00:10:51,780 --> 00:10:55,079
you perform<font color="#E5E5E5"> cross-site scripting</font>

234
00:10:53,480 --> 00:10:59,730
assessments automatically

235
00:10:55,080 --> 00:11:02,070
programmatically using tracing tools it

236
00:10:59,730 --> 00:11:03,990
turns out a<font color="#E5E5E5"> Firefox is actually actually</font>

237
00:11:02,070 --> 00:11:05,470
<font color="#E5E5E5">contains a lot</font><font color="#CCCCCC"> of the dtrace probes you</font>

238
00:11:03,990 --> 00:11:08,140
just have to build it separate

239
00:11:05,470 --> 00:11:10,680
with separate flag and you might have an

240
00:11:08,140 --> 00:11:13,240
<font color="#E5E5E5">avenue there for hooking into the</font>

241
00:11:10,680 --> 00:11:14,620
JavaScript runtime and seeing if there's

242
00:11:13,240 --> 00:11:17,590
any day that you're passing to it you

243
00:11:14,620 --> 00:11:19,960
can control or there<font color="#E5E5E5"> are simple avenues</font>

244
00:11:17,590 --> 00:11:21,670
like every time an application or web

245
00:11:19,960 --> 00:11:23,740
server returned some outputs every time

246
00:11:21,670 --> 00:11:26,650
it's<font color="#CCCCCC"> writing to socket is it writing any</font>

247
00:11:23,740 --> 00:11:29,410
data<font color="#E5E5E5"> that we've put in there this idea</font>

248
00:11:26,650 --> 00:11:31,390
<font color="#E5E5E5">of monitoring the day that we've put</font>

249
00:11:29,410 --> 00:11:35,829
through ends up being<font color="#E5E5E5"> actually quiet key</font>

250
00:11:31,390 --> 00:11:40,090
to how we how we analyze these large

251
00:11:35,830 --> 00:11:43,690
data sets so if you guys use burp<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> a</font>

252
00:11:40,090 --> 00:11:46,420
scanner it you'll see the tag that<font color="#E5E5E5"> it</font>

253
00:11:43,690 --> 00:11:48,190
generates the kind of like<font color="#CCCCCC"> Hoshi ASCII</font>

254
00:11:46,420 --> 00:11:50,979
kind of values that<font color="#E5E5E5"> are pencil different</font>

255
00:11:48,190 --> 00:11:53,850
<font color="#CCCCCC">queries so that it knows which requests</font>

256
00:11:50,980 --> 00:11:55,990
have ended it ended in which responses

257
00:11:53,850 --> 00:11:57,130
for second third order cross-site

258
00:11:55,990 --> 00:12:00,940
scripting and that kind of thing so it

259
00:11:57,130 --> 00:12:02,560
can match request response pairs<font color="#CCCCCC"> you'd</font>

260
00:12:00,940 --> 00:12:04,540
<font color="#CCCCCC">have to</font><font color="#E5E5E5"> pursue the same kind of Avenue</font>

261
00:12:02,560 --> 00:12:06,430
so you have to match on token values<font color="#CCCCCC"> in</font>

262
00:12:04,540 --> 00:12:10,300
vulnerabilities and then say this

263
00:12:06,430 --> 00:12:12,670
<font color="#E5E5E5">request has a value to this kind of</font>

264
00:12:10,300 --> 00:12:13,900
response which means that probably we

265
00:12:12,670 --> 00:12:17,020
got some kind<font color="#CCCCCC"> of cross-site scripting or</font>

266
00:12:13,900 --> 00:12:19,120
at least a free route to some<font color="#E5E5E5"> kind of</font>

267
00:12:17,020 --> 00:12:21,040
vulnerability and this is something<font color="#CCCCCC"> that</font>

268
00:12:19,120 --> 00:12:23,140
needs<font color="#CCCCCC"> to be considered actually with all</font>

269
00:12:21,040 --> 00:12:26,050
the vulnerability classes is how do we

270
00:12:23,140 --> 00:12:28,630
utilize these tools at which point<font color="#E5E5E5"> do we</font>

271
00:12:26,050 --> 00:12:32,640
evaluate the vulnerability and<font color="#E5E5E5"> it's</font>

272
00:12:28,630 --> 00:12:37,080
successfully occurring and how do we

273
00:12:32,640 --> 00:12:42,210
meaningfully reduce the data set<font color="#E5E5E5"> so</font>

274
00:12:37,080 --> 00:12:44,620
using<font color="#CCCCCC"> D tre sorelle trace or estrace</font>

275
00:12:42,210 --> 00:12:47,140
<font color="#CCCCCC">whatever but at the moment is a</font><font color="#E5E5E5"> client</font>

276
00:12:44,620 --> 00:12:48,670
agent and the server agent talks to the

277
00:12:47,140 --> 00:12:50,530
server and it says look I've got all

278
00:12:48,670 --> 00:12:54,550
these syscalls and it's in the tens of

279
00:12:50,530 --> 00:12:55,930
thousands and terminal quite quickly

280
00:12:54,550 --> 00:12:59,410
your terminal buffer will quite quickly

281
00:12:55,930 --> 00:13:02,800
fill up because the data set is actually

282
00:12:59,410 --> 00:13:04,480
massive and so you<font color="#E5E5E5"> have to</font><font color="#CCCCCC"> be a</font><font color="#E5E5E5"> little</font>

283
00:13:02,800 --> 00:13:06,849
<font color="#E5E5E5">bit smarter</font><font color="#CCCCCC"> about what you want</font><font color="#E5E5E5"> to</font>

284
00:13:04,480 --> 00:13:08,890
<font color="#CCCCCC">monitor so you have to start reducing</font>

285
00:13:06,850 --> 00:13:11,380
things like syscalls down to pertinent

286
00:13:08,890 --> 00:13:13,689
syscall so file handling two schools

287
00:13:11,380 --> 00:13:16,540
anything to do with the<font color="#CCCCCC"> network if</font>

288
00:13:13,690 --> 00:13:18,959
you're at the<font color="#E5E5E5"> sort of win API level are</font>

289
00:13:16,540 --> 00:13:23,760
we calling any cryptographic

290
00:13:18,959 --> 00:13:26,649
api's how those being cooled and then

291
00:13:23,760 --> 00:13:28,899
depending on the sequel<font color="#E5E5E5"> server database</font>

292
00:13:26,649 --> 00:13:30,399
types and web server flavors you cannot

293
00:13:28,899 --> 00:13:32,579
actually have to hook different things

294
00:13:30,399 --> 00:13:36,639
so there's a kind<font color="#E5E5E5"> of learning process to</font>

295
00:13:32,579 --> 00:13:38,620
to employing<font color="#E5E5E5"> this technique and then</font>

296
00:13:36,639 --> 00:13:40,269
there's more sort of nebulous concepts

297
00:13:38,620 --> 00:13:43,089
like how do we test for authorization

298
00:13:40,269 --> 00:13:44,740
weakness that's quite tough that's a

299
00:13:43,089 --> 00:13:46,870
hard problem to solve in this kind of

300
00:13:44,740 --> 00:13:49,170
scenario but I don't know some<font color="#E5E5E5"> more</font>

301
00:13:46,870 --> 00:13:52,269
thought might come up with a<font color="#E5E5E5"> solution</font>

302
00:13:49,170 --> 00:13:54,910
the issue of how do we<font color="#CCCCCC"> then quantify and</font>

303
00:13:52,269 --> 00:13:58,329
guaranteed coverage so how do<font color="#E5E5E5"> we tell</font>

304
00:13:54,910 --> 00:13:59,560
say to a client we've<font color="#E5E5E5"> hit eight percent</font>

305
00:13:58,329 --> 00:14:03,609
of functionality within this application

306
00:13:59,560 --> 00:14:07,388
and it turns out that that's not quite

307
00:14:03,610 --> 00:14:09,040
an easy thing to do<font color="#CCCCCC"> and there's</font><font color="#E5E5E5"> that</font>

308
00:14:07,389 --> 00:14:12,370
then<font color="#E5E5E5"> there's a dependency for the client</font>

309
00:14:09,040 --> 00:14:15,819
to<font color="#E5E5E5"> a give us access to the server that's</font>

310
00:14:12,370 --> 00:14:18,459
running these services be that they've

311
00:14:15,820 --> 00:14:21,180
got the tools installed or they will

312
00:14:18,459 --> 00:14:23,290
allow us to install these tools<font color="#E5E5E5"> then</font>

313
00:14:21,180 --> 00:14:25,599
because a lot of the time we tend to

314
00:14:23,290 --> 00:14:27,339
test in development environments this

315
00:14:25,600 --> 00:14:30,970
isn't too much<font color="#CCCCCC"> of a hurdle you just have</font>

316
00:14:27,339 --> 00:14:32,649
to talk to the right developer they're

317
00:14:30,970 --> 00:14:34,180
quite<font color="#CCCCCC"> happy to</font><font color="#E5E5E5"> give you access as long</font>

318
00:14:32,649 --> 00:14:37,480
<font color="#E5E5E5">as you don't completely tanked the</font>

319
00:14:34,180 --> 00:14:40,569
environment but the overall benefits are

320
00:14:37,480 --> 00:14:42,850
that really<font color="#E5E5E5"> I get a little bit less</font>

321
00:14:40,569 --> 00:14:45,279
bored by constant web testing day today

322
00:14:42,850 --> 00:14:47,620
I get to think about things on a

323
00:14:45,279 --> 00:14:50,980
different sort of<font color="#E5E5E5"> different layers which</font>

324
00:14:47,620 --> 00:14:53,139
is quite important so my generation got

325
00:14:50,980 --> 00:14:55,360
thrown into web app testing and we

326
00:14:53,139 --> 00:14:56,889
didn't really escalate up the stack when

327
00:14:55,360 --> 00:14:58,720
people are<font color="#CCCCCC"> stored with networks and then</font>

328
00:14:56,889 --> 00:15:00,610
work their way up so we're kind of

329
00:14:58,720 --> 00:15:02,319
merging our way down we're traveling

330
00:15:00,610 --> 00:15:04,750
down from the application layer all the

331
00:15:02,319 --> 00:15:07,899
way down to<font color="#CCCCCC"> the physical stuff</font><font color="#E5E5E5"> and this</font>

332
00:15:04,750 --> 00:15:10,000
<font color="#CCCCCC">is quite a beneficial way to learn all</font>

333
00:15:07,899 --> 00:15:13,120
that kind of stuff<font color="#E5E5E5"> and learn how</font><font color="#CCCCCC"> things</font>

334
00:15:10,000 --> 00:15:14,680
function behind the scenes<font color="#E5E5E5"> the obvious</font>

335
00:15:13,120 --> 00:15:16,269
benefit is this<font color="#CCCCCC"> remove source</font>

336
00:15:14,680 --> 00:15:18,069
codependency so if you<font color="#E5E5E5"> haven't got</font>

337
00:15:16,269 --> 00:15:20,050
sports good at a time you've<font color="#E5E5E5"> still got</font>

338
00:15:18,069 --> 00:15:22,540
some kind<font color="#E5E5E5"> of gray box more enlightened</font>

339
00:15:20,050 --> 00:15:24,430
view as to what you are testing more

340
00:15:22,540 --> 00:15:29,290
bugs is obviously equivalent to better

341
00:15:24,430 --> 00:15:30,729
coverage hopefully and tracing is bigger

342
00:15:29,290 --> 00:15:32,649
than web us<font color="#E5E5E5"> all right so</font>

343
00:15:30,730 --> 00:15:34,570
I've restricted this to web app testing

344
00:15:32,649 --> 00:15:37,079
<font color="#E5E5E5">there's actually no reason why you can't</font>

345
00:15:34,570 --> 00:15:40,570
do something<font color="#CCCCCC"> more sophisticated like</font>

346
00:15:37,079 --> 00:15:42,849
network security tests a big bug but the

347
00:15:40,570 --> 00:15:44,170
bugbear<font color="#CCCCCC"> I have is our PC services and I</font>

348
00:15:42,850 --> 00:15:48,639
never feel like they're adequately

349
00:15:44,170 --> 00:15:51,490
tested<font color="#E5E5E5"> oh we can sit if we can sit on</font>

350
00:15:48,639 --> 00:15:53,410
<font color="#E5E5E5">the</font><font color="#CCCCCC"> same box as a service monitor the</font>

351
00:15:51,490 --> 00:15:55,690
kind of critical calls that are being

352
00:15:53,410 --> 00:15:59,139
triggered within it what we can do is

353
00:15:55,690 --> 00:16:03,100
get a better idea<font color="#E5E5E5"> of well how we should</font>

354
00:15:59,139 --> 00:16:07,079
proceed with testing and that's that's

355
00:16:03,100 --> 00:16:10,870
<font color="#CCCCCC">pretty much it for this talk props go to</font>

356
00:16:07,079 --> 00:16:13,239
Matt Hillman<font color="#E5E5E5"> and Nils squidgy surname at</font>

357
00:16:10,870 --> 00:16:15,279
previous employer they kind of<font color="#E5E5E5"> stab me</font>

358
00:16:13,240 --> 00:16:17,079
on the D traceroute and when they told

359
00:16:15,279 --> 00:16:19,120
<font color="#CCCCCC">me about dtrace my kind</font><font color="#E5E5E5"> of mind was</font>

360
00:16:17,079 --> 00:16:20,529
blown and<font color="#E5E5E5"> it took very long time to sit</font>

361
00:16:19,120 --> 00:16:25,060
down and<font color="#E5E5E5"> think the figure out actually</font>

362
00:16:20,529 --> 00:16:27,760
did work how they said it<font color="#CCCCCC"> worked</font><font color="#E5E5E5"> Martin</font>

363
00:16:25,060 --> 00:16:30,250
Oliver at GDS and GDS for giving me the

364
00:16:27,760 --> 00:16:32,170
time to research the project we're

365
00:16:30,250 --> 00:16:34,870
currently<font color="#E5E5E5"> writing a tool that's going to</font>

366
00:16:32,170 --> 00:16:36,849
collate all this kind<font color="#E5E5E5"> of agent driven</font>

367
00:16:34,870 --> 00:16:39,100
data into common serve and represent it

368
00:16:36,850 --> 00:16:41,620
all conveniently within burps as an

369
00:16:39,100 --> 00:16:45,190
<font color="#E5E5E5">extension the various problems to kind</font>

370
00:16:41,620 --> 00:16:47,560
of get over before this goes live is

371
00:16:45,190 --> 00:16:50,139
remotely usable but we are in that

372
00:16:47,560 --> 00:16:52,329
process<font color="#E5E5E5"> at the moment and last of all</font>

373
00:16:50,139 --> 00:16:56,370
thanks to be<font color="#CCCCCC"> sized 2014 for giving me a</font>

374
00:16:52,329 --> 00:16:56,370
chance<font color="#E5E5E5"> to yeah you thank</font>

375
00:16:59,320 --> 00:17:01,380
you

