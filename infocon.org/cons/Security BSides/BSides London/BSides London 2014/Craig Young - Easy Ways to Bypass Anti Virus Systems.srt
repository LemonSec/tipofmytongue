1
00:00:01,470 --> 00:00:06,450
thanks to everybody for organizing

2
00:00:04,019 --> 00:00:08,518
besides London I'm glad to be<font color="#E5E5E5"> here to</font>

3
00:00:06,450 --> 00:00:10,680
talk to you and I'm going to<font color="#E5E5E5"> be talking</font>

4
00:00:08,519 --> 00:00:14,310
a bit about what I do as a<font color="#E5E5E5"> security</font>

5
00:00:10,680 --> 00:00:16,859
researcher for tripwire verte so this

6
00:00:14,310 --> 00:00:20,220
talk is primarily focused around the

7
00:00:16,859 --> 00:00:23,730
ideas of being able<font color="#E5E5E5"> to do security</font>

8
00:00:20,220 --> 00:00:26,130
focused quality assurance testing so if

9
00:00:23,730 --> 00:00:28,409
you haven't<font color="#E5E5E5"> had any exposure independent</font>

10
00:00:26,130 --> 00:00:30,839
ousting before and you have a product

11
00:00:28,409 --> 00:00:32,910
that you need to start finding<font color="#E5E5E5"> vuln this</font>

12
00:00:30,839 --> 00:00:35,519
is going<font color="#E5E5E5"> to give you all the tools that</font>

13
00:00:32,910 --> 00:00:37,110
you need if<font color="#E5E5E5"> you are a pen tester already</font>

14
00:00:35,520 --> 00:00:40,470
it might teach you something you don't

15
00:00:37,110 --> 00:00:42,750
<font color="#E5E5E5">know already but more or less</font><font color="#CCCCCC"> it's</font>

16
00:00:40,470 --> 00:00:45,629
approaches to manual fuzz testing to

17
00:00:42,750 --> 00:00:47,160
find vulnerabilities so using these

18
00:00:45,630 --> 00:00:49,500
techniques I found quite<font color="#E5E5E5"> a few</font>

19
00:00:47,160 --> 00:00:51,660
vulnerabilities back in February when<font color="#E5E5E5"> I</font>

20
00:00:49,500 --> 00:00:53,160
<font color="#E5E5E5">had put these slides together these were</font>

21
00:00:51,660 --> 00:00:58,800
the<font color="#CCCCCC"> Seavey's that</font><font color="#E5E5E5"> I had had assigned</font>

22
00:00:53,160 --> 00:01:00,089
already this year so like I said we're

23
00:00:58,800 --> 00:01:02,550
<font color="#E5E5E5">going to be talking about identifying</font>

24
00:01:00,090 --> 00:01:05,659
vulnerabilities the processes that I use

25
00:01:02,550 --> 00:01:08,550
the tools that I use and I'm going<font color="#CCCCCC"> to</font>

26
00:01:05,659 --> 00:01:11,460
reinforce this with some hands-on so

27
00:01:08,550 --> 00:01:13,229
some applications which I've identified

28
00:01:11,460 --> 00:01:15,509
over time as having various

29
00:01:13,230 --> 00:01:17,720
vulnerabilities and then we'll talk<font color="#E5E5E5"> a</font>

30
00:01:15,510 --> 00:01:21,420
little bit about what we've talked about

31
00:01:17,720 --> 00:01:23,550
so<font color="#E5E5E5"> before you begin any kind of pen test</font>

32
00:01:21,420 --> 00:01:25,380
your application pen test you need to

33
00:01:23,550 --> 00:01:27,390
<font color="#E5E5E5">consider what kind of target or we're</font>

34
00:01:25,380 --> 00:01:29,130
dealing with are we if we're dealing

35
00:01:27,390 --> 00:01:31,380
<font color="#CCCCCC">with a web application versus an</font>

36
00:01:29,130 --> 00:01:33,420
embedded device versus just<font color="#E5E5E5"> a raw</font>

37
00:01:31,380 --> 00:01:34,530
network protocol all<font color="#CCCCCC"> of these different</font>

38
00:01:33,420 --> 00:01:36,510
<font color="#CCCCCC">things are going to have different</font>

39
00:01:34,530 --> 00:01:38,610
<font color="#E5E5E5">approaches and you also have to be</font>

40
00:01:36,510 --> 00:01:41,010
considerate<font color="#E5E5E5"> of what kind of platforms</font>

41
00:01:38,610 --> 00:01:44,070
you're running on top of so is it<font color="#E5E5E5"> Linux</font>

42
00:01:41,010 --> 00:01:46,170
is it windows is it running various

43
00:01:44,070 --> 00:01:48,899
server-side scripting languages like ASP

44
00:01:46,170 --> 00:01:51,150
or PHP and of course<font color="#CCCCCC"> databases</font>

45
00:01:48,900 --> 00:01:52,740
underlying different security

46
00:01:51,150 --> 00:01:57,030
vulnerabilities and different semantics

47
00:01:52,740 --> 00:01:59,630
for your testing so I've set up what I

48
00:01:57,030 --> 00:02:03,180
like to refer to as<font color="#CCCCCC"> a security testing</font>

49
00:01:59,630 --> 00:02:04,920
tool belt and in this we have<font color="#E5E5E5"> your</font>

50
00:02:03,180 --> 00:02:06,390
hammer which is your fuzz testing where

51
00:02:04,920 --> 00:02:08,690
you're basically just<font color="#E5E5E5"> banging away at</font>

52
00:02:06,390 --> 00:02:12,030
something until you get it to break a

53
00:02:08,690 --> 00:02:13,590
static analysis which is kind<font color="#E5E5E5"> of more</font>

54
00:02:12,030 --> 00:02:14,880
like your magnifying glass you're taking

55
00:02:13,590 --> 00:02:16,980
a closer look

56
00:02:14,880 --> 00:02:18,810
at the binaries themselves seeing what

57
00:02:16,980 --> 00:02:21,239
calls are made in them what you might<font color="#CCCCCC"> be</font>

58
00:02:18,810 --> 00:02:23,430
able<font color="#CCCCCC"> to find that's unusual source</font>

59
00:02:21,240 --> 00:02:25,950
review this<font color="#E5E5E5"> is your microscope of your</font>

60
00:02:23,430 --> 00:02:27,300
tool belt this is where you're<font color="#E5E5E5"> going to</font>

61
00:02:25,950 --> 00:02:30,299
actually look through source code

62
00:02:27,300 --> 00:02:32,460
whenever available and look for patterns

63
00:02:30,300 --> 00:02:36,230
of vulnerable code that you can<font color="#E5E5E5"> inspect</font>

64
00:02:32,460 --> 00:02:39,090
further and of<font color="#CCCCCC"> course firmware analysis</font>

65
00:02:36,230 --> 00:02:42,299
applying mostly towards embedded systems

66
00:02:39,090 --> 00:02:44,940
of court so to<font color="#E5E5E5"> start out by talking</font>

67
00:02:42,300 --> 00:02:47,130
<font color="#E5E5E5">about fuzz testing everybody should more</font>

68
00:02:44,940 --> 00:02:49,160
or<font color="#E5E5E5"> less be aware of this but the general</font>

69
00:02:47,130 --> 00:02:51,750
<font color="#CCCCCC">idea is that you're going</font><font color="#E5E5E5"> to take some</font>

70
00:02:49,160 --> 00:02:53,430
input that is expected for an

71
00:02:51,750 --> 00:02:55,800
application<font color="#CCCCCC"> you're going to manipulate</font>

72
00:02:53,430 --> 00:02:57,960
that input so<font color="#CCCCCC"> that it is not well-formed</font>

73
00:02:55,800 --> 00:03:00,690
anymore you can execute your target

74
00:02:57,960 --> 00:03:02,550
process you're going<font color="#CCCCCC"> to look to see did</font>

75
00:03:00,690 --> 00:03:05,160
it crash did it do<font color="#E5E5E5"> something else</font>

76
00:03:02,550 --> 00:03:07,050
unexpected any of those<font color="#E5E5E5"> results get</font>

77
00:03:05,160 --> 00:03:10,079
recorded and then<font color="#E5E5E5"> you go back into your</font>

78
00:03:07,050 --> 00:03:12,750
loop of manipulating the input running

79
00:03:10,080 --> 00:03:14,400
<font color="#E5E5E5">your process etc etc and then at the end</font>

80
00:03:12,750 --> 00:03:17,120
of<font color="#E5E5E5"> the day you hopefully have a nice</font>

81
00:03:14,400 --> 00:03:21,560
list of crash dumps and things like that

82
00:03:17,120 --> 00:03:26,190
which you can review for exploitability

83
00:03:21,560 --> 00:03:29,460
so with web vulnerabilities<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font>

84
00:03:26,190 --> 00:03:31,680
talk<font color="#E5E5E5"> about four of the primary</font>

85
00:03:29,460 --> 00:03:33,960
categories of vulnerabilities which are

86
00:03:31,680 --> 00:03:36,210
very<font color="#E5E5E5"> common to</font><font color="#CCCCCC"> find and sometimes very</font>

87
00:03:33,960 --> 00:03:38,340
easy to find first on the list you've

88
00:03:36,210 --> 00:03:40,860
got cross-site scripting so this of

89
00:03:38,340 --> 00:03:43,470
course is whenever you have<font color="#CCCCCC"> the ability</font>

90
00:03:40,860 --> 00:03:45,030
<font color="#CCCCCC">to inject client-side code into a web</font>

91
00:03:43,470 --> 00:03:48,090
page so that it's executing in the

92
00:03:45,030 --> 00:03:51,570
context of that<font color="#E5E5E5"> domain gives you access</font>

93
00:03:48,090 --> 00:03:54,209
to cookies things like that<font color="#E5E5E5"> see surf on</font>

94
00:03:51,570 --> 00:03:56,459
<font color="#CCCCCC">the top right here this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> cross-site</font>

95
00:03:54,209 --> 00:03:59,030
request forgery it's when a web

96
00:03:56,459 --> 00:04:01,740
application has requests which are

97
00:03:59,030 --> 00:04:03,900
ultimately predictable you're<font color="#E5E5E5"> able to</font>

98
00:04:01,740 --> 00:04:06,300
<font color="#CCCCCC">actually craft up a web page and make it</font>

99
00:04:03,900 --> 00:04:08,520
so that your web page is<font color="#CCCCCC"> going to send</font>

100
00:04:06,300 --> 00:04:10,830
out messages to another web application

101
00:04:08,520 --> 00:04:13,860
<font color="#CCCCCC">that web application isn't going to be</font>

102
00:04:10,830 --> 00:04:16,049
able<font color="#E5E5E5"> to distinguish this request coming</font>

103
00:04:13,860 --> 00:04:17,880
from your app versus a request coming

104
00:04:16,048 --> 00:04:19,200
from a legitimate user because of some

105
00:04:17,880 --> 00:04:23,310
things<font color="#E5E5E5"> that we'll talk about in how the</font>

106
00:04:19,200 --> 00:04:25,080
browser works injection this<font color="#CCCCCC"> is a</font>

107
00:04:23,310 --> 00:04:27,570
category that covers a lot<font color="#CCCCCC"> of different</font>

108
00:04:25,080 --> 00:04:30,030
things so you<font color="#CCCCCC"> can have in jan</font>

109
00:04:27,570 --> 00:04:32,520
action of operating system<font color="#E5E5E5"> commands xml</font>

110
00:04:30,030 --> 00:04:36,659
injection of course you have sequel

111
00:04:32,520 --> 00:04:38,280
injection ldap injection and finally

112
00:04:36,660 --> 00:04:39,930
we'll look a little bit about file

113
00:04:38,280 --> 00:04:42,179
inclusion<font color="#E5E5E5"> and so these are</font>

114
00:04:39,930 --> 00:04:45,450
vulnerabilities where you can as an

115
00:04:42,180 --> 00:04:47,430
attacker do something to influence<font color="#CCCCCC"> what</font>

116
00:04:45,450 --> 00:04:52,860
code is actually<font color="#CCCCCC"> going to be loaded on</font>

117
00:04:47,430 --> 00:04:55,290
the server side so back to cross-site

118
00:04:52,860 --> 00:04:57,500
scripting in general cross-site

119
00:04:55,290 --> 00:04:59,880
scripting is going to be a<font color="#E5E5E5"> failure to</font>

120
00:04:57,500 --> 00:05:03,420
sanitize certain values which get

121
00:04:59,880 --> 00:05:07,200
interpreted as HTML so since you can use

122
00:05:03,420 --> 00:05:09,690
HTML to invoke<font color="#E5E5E5"> JavaScript context then</font>

123
00:05:07,200 --> 00:05:12,659
when this HTML gets rendered by a

124
00:05:09,690 --> 00:05:15,120
vulnerable application content is going

125
00:05:12,660 --> 00:05:18,450
to run as if it was legitimate content

126
00:05:15,120 --> 00:05:20,250
from that domain this tends<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get</font>

127
00:05:18,450 --> 00:05:24,570
introduced when you have things like

128
00:05:20,250 --> 00:05:26,340
what we have up<font color="#CCCCCC"> here you have a format</font>

129
00:05:24,570 --> 00:05:29,700
string which<font color="#CCCCCC"> is being</font><font color="#E5E5E5"> used create an</font>

130
00:05:26,340 --> 00:05:32,039
image tag if you imagine that that

131
00:05:29,700 --> 00:05:34,469
<font color="#E5E5E5">person s is being replaced by the input</font>

132
00:05:32,040 --> 00:05:36,900
that<font color="#E5E5E5"> I've shown up here on the slide you</font>

133
00:05:34,470 --> 00:05:40,800
end up with an image tag that has an

134
00:05:36,900 --> 00:05:42,390
invalid URL and a non error attribute to

135
00:05:40,800 --> 00:05:46,350
load some<font color="#CCCCCC"> JavaScript in this case just</font>

136
00:05:42,390 --> 00:05:48,510
<font color="#CCCCCC">an alert pop</font><font color="#E5E5E5"> up with the message one now</font>

137
00:05:46,350 --> 00:05:51,480
some<font color="#E5E5E5"> of the things that</font><font color="#CCCCCC"> we use to look</font>

138
00:05:48,510 --> 00:05:53,310
for cross-site scripting are called

139
00:05:51,480 --> 00:05:56,510
cross-site scripting locators naturally

140
00:05:53,310 --> 00:05:58,860
enough with these different formats they

141
00:05:56,510 --> 00:06:02,490
affect different browsers differently

142
00:05:58,860 --> 00:06:05,490
<font color="#E5E5E5">like for example the SVG onload this</font>

143
00:06:02,490 --> 00:06:08,030
I've seen sporadically work in chrome

144
00:06:05,490 --> 00:06:11,400
pretty much consistently work in firefox

145
00:06:08,030 --> 00:06:13,890
<font color="#E5E5E5">the image on air tends to work very</font>

146
00:06:11,400 --> 00:06:15,719
effectively although is more commonly

147
00:06:13,890 --> 00:06:20,340
filtered by basic cross-site scripting

148
00:06:15,720 --> 00:06:23,130
filters and then the<font color="#CCCCCC"> last locator that</font><font color="#E5E5E5"> I</font>

149
00:06:20,340 --> 00:06:25,469
have<font color="#E5E5E5"> here is one like from the previous</font>

150
00:06:23,130 --> 00:06:28,650
slide where let's say the user<font color="#CCCCCC"> has the</font>

151
00:06:25,470 --> 00:06:32,130
<font color="#E5E5E5">ability to control the href or the</font>

152
00:06:28,650 --> 00:06:35,130
source for some image tag or anchor tag

153
00:06:32,130 --> 00:06:37,169
you can<font color="#E5E5E5"> then if it's not being sanitized</font>

154
00:06:35,130 --> 00:06:38,219
inject a string that's<font color="#E5E5E5"> going to include</font>

155
00:06:37,169 --> 00:06:41,940
an error handler

156
00:06:38,220 --> 00:06:43,950
and launch your XSS payload so on the

157
00:06:41,940 --> 00:06:46,830
bottom line there that<font color="#E5E5E5"> excess s equals</font>

158
00:06:43,950 --> 00:06:48,630
alert 1337 you can imagine that's<font color="#CCCCCC"> what</font>

159
00:06:46,830 --> 00:06:51,630
<font color="#E5E5E5">you would put</font><font color="#CCCCCC"> into all of the locators</font>

160
00:06:48,630 --> 00:06:53,550
or something along those lines could be

161
00:06:51,630 --> 00:06:55,320
alert document dot domain or document

162
00:06:53,550 --> 00:06:57,810
that cookie<font color="#CCCCCC"> so it's an easy</font><font color="#E5E5E5"> way to</font>

163
00:06:55,320 --> 00:07:02,909
<font color="#E5E5E5">recognize that your script is actually</font>

164
00:06:57,810 --> 00:07:05,850
executed with OS injection<font color="#E5E5E5"> this is</font>

165
00:07:02,910 --> 00:07:08,610
generally going to be a situation<font color="#E5E5E5"> in an</font>

166
00:07:05,850 --> 00:07:10,320
<font color="#CCCCCC">application where it needs to be</font><font color="#E5E5E5"> able to</font>

167
00:07:08,610 --> 00:07:12,780
run system commands<font color="#E5E5E5"> and it needs to be</font>

168
00:07:10,320 --> 00:07:15,750
<font color="#CCCCCC">able to do this</font><font color="#E5E5E5"> based on user input so</font>

169
00:07:12,780 --> 00:07:18,450
the use of eval function<font color="#E5E5E5"> system</font>

170
00:07:15,750 --> 00:07:21,060
functions any of these that<font color="#E5E5E5"> are taking</font>

171
00:07:18,450 --> 00:07:23,219
user input without being sanitized they

172
00:07:21,060 --> 00:07:28,620
can all result obviously<font color="#CCCCCC"> in unintended</font>

173
00:07:23,220 --> 00:07:30,930
code execution so for example if you're

174
00:07:28,620 --> 00:07:32,760
using the<font color="#E5E5E5"> Pearl eval command and you</font>

175
00:07:30,930 --> 00:07:35,390
have an eval command that simply takes

176
00:07:32,760 --> 00:07:38,390
one of the parameters from your<font color="#E5E5E5"> URL add</font>

177
00:07:35,390 --> 00:07:41,490
some<font color="#E5E5E5"> parentheses to make a function call</font>

178
00:07:38,390 --> 00:07:44,340
you can very easily exploit this by

179
00:07:41,490 --> 00:07:46,919
putting in a value with back tix

180
00:07:44,340 --> 00:07:49,679
semicolons things of that nature which

181
00:07:46,919 --> 00:07:52,310
are<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be expanded</font><font color="#CCCCCC"> by the shell to</font>

182
00:07:49,680 --> 00:07:56,180
<font color="#E5E5E5">run some commands in</font><font color="#CCCCCC"> the context of</font>

183
00:07:52,310 --> 00:07:58,710
whatever was running this perl script so

184
00:07:56,180 --> 00:08:01,710
some of the locators that I like to<font color="#E5E5E5"> use</font>

185
00:07:58,710 --> 00:08:04,200
for doing this the first one up here is

186
00:08:01,710 --> 00:08:07,080
using the pipe command which of course

187
00:08:04,200 --> 00:08:08,760
<font color="#CCCCCC">Linux is going to take the output</font><font color="#E5E5E5"> of one</font>

188
00:08:07,080 --> 00:08:11,190
command standard out and pipe it into

189
00:08:08,760 --> 00:08:13,349
standard<font color="#CCCCCC"> and of another so it will</font>

190
00:08:11,190 --> 00:08:17,700
trigger command execution if it's not

191
00:08:13,350 --> 00:08:20,010
filtered out you've got<font color="#CCCCCC"> an another</font>

192
00:08:17,700 --> 00:08:22,020
option of using back ticks with an echo

193
00:08:20,010 --> 00:08:25,890
and then actually<font color="#CCCCCC"> providing into that</font>

194
00:08:22,020 --> 00:08:29,039
echo valid input if you run this and it

195
00:08:25,890 --> 00:08:30,840
works then it probably means that<font color="#E5E5E5"> either</font>

196
00:08:29,040 --> 00:08:32,190
they've got some very nice cast and

197
00:08:30,840 --> 00:08:34,530
going on that's finding<font color="#E5E5E5"> the value that</font>

198
00:08:32,190 --> 00:08:37,349
<font color="#CCCCCC">it's supposed to or you've actually</font>

199
00:08:34,530 --> 00:08:38,760
executed that<font color="#E5E5E5"> echo command and things</font>

200
00:08:37,349 --> 00:08:41,880
are working because you're injecting

201
00:08:38,760 --> 00:08:44,520
commands the last one here I call this

202
00:08:41,880 --> 00:08:47,040
ping injection because find this on

203
00:08:44,520 --> 00:08:50,610
basically every so far out or<font color="#E5E5E5"> anything</font>

204
00:08:47,040 --> 00:08:52,140
that's allowing you to do pings or<font color="#E5E5E5"> trace</font>

205
00:08:50,610 --> 00:08:53,880
<font color="#E5E5E5">route stuff like that</font>

206
00:08:52,140 --> 00:08:56,699
in this particular<font color="#E5E5E5"> example you'll see</font>

207
00:08:53,880 --> 00:08:59,700
the IP<font color="#CCCCCC"> address is invalid so if that</font>

208
00:08:56,700 --> 00:09:02,940
<font color="#E5E5E5">gets passed into ping it's going to</font><font color="#CCCCCC"> fail</font>

209
00:08:59,700 --> 00:09:05,970
and when it fails your double pipes are

210
00:09:02,940 --> 00:09:08,580
going to say okay go ahead<font color="#E5E5E5"> and run the</font>

211
00:09:05,970 --> 00:09:10,590
other command you name so in this case

212
00:09:08,580 --> 00:09:12,840
if you<font color="#E5E5E5"> plug this into a vulnerable ping</font>

213
00:09:10,590 --> 00:09:15,510
function the<font color="#E5E5E5"> output that you would get</font>

214
00:09:12,840 --> 00:09:17,520
would be output indicating the you name

215
00:09:15,510 --> 00:09:21,480
from the<font color="#E5E5E5"> target system assuming it's a</font>

216
00:09:17,520 --> 00:09:25,079
<font color="#E5E5E5">UNIX system or Linux system now with</font>

217
00:09:21,480 --> 00:09:27,120
sequel injection this is<font color="#E5E5E5"> going to be of</font>

218
00:09:25,080 --> 00:09:29,910
course whenever your application needs

219
00:09:27,120 --> 00:09:31,650
to<font color="#E5E5E5"> be able to</font><font color="#CCCCCC"> access a database</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font>

220
00:09:29,910 --> 00:09:34,829
the possibility<font color="#CCCCCC"> of having sequel</font>

221
00:09:31,650 --> 00:09:37,380
injection this<font color="#CCCCCC"> happens if you do not</font>

222
00:09:34,830 --> 00:09:39,660
properly sanitized data<font color="#E5E5E5"> going into your</font>

223
00:09:37,380 --> 00:09:42,210
sequel queries common theme coming up

224
00:09:39,660 --> 00:09:44,819
here not sanitizing input leads to

225
00:09:42,210 --> 00:09:48,000
vulnerabilities and of course<font color="#E5E5E5"> if</font>

226
00:09:44,820 --> 00:09:49,590
somebody is able to insert a new sequel

227
00:09:48,000 --> 00:09:51,720
into your sequel queries that your

228
00:09:49,590 --> 00:09:53,310
application is making they can<font color="#E5E5E5"> basically</font>

229
00:09:51,720 --> 00:09:55,650
take control of your whole database

230
00:09:53,310 --> 00:10:00,060
especially if your happen to be logged

231
00:09:55,650 --> 00:10:02,189
in running the queries as a DBA so some

232
00:10:00,060 --> 00:10:05,880
of the places where these types of

233
00:10:02,190 --> 00:10:08,040
problems come up of course again when

234
00:10:05,880 --> 00:10:10,050
you're using format strings like if you

235
00:10:08,040 --> 00:10:13,020
see here we've got<font color="#E5E5E5"> the percent asses</font>

236
00:10:10,050 --> 00:10:15,449
that should be an immediate red flag of

237
00:10:13,020 --> 00:10:18,270
course it's possible that the inputs to

238
00:10:15,450 --> 00:10:20,550
these format strings could have<font color="#E5E5E5"> already</font>

239
00:10:18,270 --> 00:10:23,550
been sanitized but more often<font color="#E5E5E5"> than not</font>

240
00:10:20,550 --> 00:10:24,959
it's just direct user input and the

241
00:10:23,550 --> 00:10:26,729
proper thing that the developer should

242
00:10:24,960 --> 00:10:30,000
have been<font color="#E5E5E5"> doing in this case would be to</font>

243
00:10:26,730 --> 00:10:31,920
use a parameterised library where you're

244
00:10:30,000 --> 00:10:34,320
giving it presents and passing<font color="#E5E5E5"> two</font>

245
00:10:31,920 --> 00:10:36,150
parameters in that way you're relying on

246
00:10:34,320 --> 00:10:40,020
the library to make sure that nothing

247
00:10:36,150 --> 00:10:42,390
unexpected is going to happen in this

248
00:10:40,020 --> 00:10:44,850
example that I've<font color="#E5E5E5"> given here if you</font>

249
00:10:42,390 --> 00:10:47,250
plugged in that input for password the x

250
00:10:44,850 --> 00:10:49,580
or<font color="#E5E5E5"> x equals x you're going to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

251
00:10:47,250 --> 00:10:52,800
<font color="#CCCCCC">login</font><font color="#E5E5E5"> as any user simply because it's a</font>

252
00:10:49,580 --> 00:10:55,340
very very<font color="#E5E5E5"> poorly designed system usually</font>

253
00:10:52,800 --> 00:10:59,550
passwords of course would<font color="#E5E5E5"> be hashed but</font>

254
00:10:55,340 --> 00:11:03,480
this is<font color="#CCCCCC"> just a basic example so some of</font>

255
00:10:59,550 --> 00:11:05,529
the locators that we use for<font color="#E5E5E5"> this the</font>

256
00:11:03,480 --> 00:11:08,649
first one here on our list is the

257
00:11:05,529 --> 00:11:10,509
or x equals x the reason<font color="#CCCCCC"> that this works</font>

258
00:11:08,649 --> 00:11:13,269
is because you're giving it<font color="#E5E5E5"> a boolean</font>

259
00:11:10,509 --> 00:11:16,600
alternative so if there is a check that

260
00:11:13,269 --> 00:11:19,180
saying is username equal to whatever

261
00:11:16,600 --> 00:11:23,170
you're saying<font color="#E5E5E5"> is the username equal to</font>

262
00:11:19,180 --> 00:11:24,819
whatever or is X equal to X and the end

263
00:11:23,170 --> 00:11:26,469
quote is of course missing because

264
00:11:24,819 --> 00:11:29,378
you're assuming that<font color="#E5E5E5"> the application is</font>

265
00:11:26,470 --> 00:11:31,809
going<font color="#E5E5E5"> to fill</font><font color="#CCCCCC"> that back in now with the</font>

266
00:11:29,379 --> 00:11:34,329
other examples<font color="#E5E5E5"> i have here for locators</font>

267
00:11:31,809 --> 00:11:36,370
first you've got a numeric injection

268
00:11:34,329 --> 00:11:38,050
type and this is ending with comment

269
00:11:36,370 --> 00:11:40,660
characters because of course you want to

270
00:11:38,050 --> 00:11:42,550
nullify the rest of the statement this

271
00:11:40,660 --> 00:11:45,579
can create<font color="#E5E5E5"> problems if you're trying to</font>

272
00:11:42,550 --> 00:11:48,719
<font color="#E5E5E5">inject into say a complex nested sequel</font>

273
00:11:45,579 --> 00:11:52,180
query but more often than<font color="#E5E5E5"> not it's</font>

274
00:11:48,720 --> 00:11:54,910
helpful rather than hurtful and also the

275
00:11:52,180 --> 00:11:56,769
having one equals one is in here<font color="#CCCCCC"> because</font>

276
00:11:54,910 --> 00:11:58,959
if you're familiar with sequel you'll

277
00:11:56,769 --> 00:12:00,759
see that sometimes this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> helpful for</font>

278
00:11:58,959 --> 00:12:06,069
<font color="#E5E5E5">being</font><font color="#CCCCCC"> able to get</font><font color="#E5E5E5"> an injection that's</font>

279
00:12:00,759 --> 00:12:07,959
going to work later on in a query so the

280
00:12:06,069 --> 00:12:09,819
<font color="#E5E5E5">way that you're using these locators I</font>

281
00:12:07,959 --> 00:12:11,349
felt this needed a<font color="#E5E5E5"> special note since</font>

282
00:12:09,819 --> 00:12:14,139
I've received a lot of questions<font color="#CCCCCC"> about</font>

283
00:12:11,350 --> 00:12:16,449
it typically you're going to plug in one

284
00:12:14,139 --> 00:12:19,660
of your locators if you see different

285
00:12:16,449 --> 00:12:21,699
results<font color="#CCCCCC"> than</font><font color="#E5E5E5"> when you are not having the</font>

286
00:12:19,660 --> 00:12:23,589
locator in there like for example if you

287
00:12:21,699 --> 00:12:27,040
see extra data coming out of<font color="#CCCCCC"> something</font>

288
00:12:23,589 --> 00:12:29,259
it's a good indicator that there could

289
00:12:27,040 --> 00:12:31,209
be sequel injection so then the<font color="#CCCCCC"> next</font>

290
00:12:29,259 --> 00:12:35,439
test that you're on is to flip<font color="#CCCCCC"> your</font>

291
00:12:31,209 --> 00:12:38,979
boolean logic so rather than doing x and

292
00:12:35,439 --> 00:12:41,319
x<font color="#CCCCCC"> equals x change it to</font><font color="#E5E5E5"> x and x</font><font color="#CCCCCC"> equals y</font>

293
00:12:38,980 --> 00:12:44,290
and if you're still getting out put out

294
00:12:41,319 --> 00:12:46,329
<font color="#CCCCCC">then you had a false positive but if all</font>

295
00:12:44,290 --> 00:12:48,189
of the sudden your output goes away you

296
00:12:46,329 --> 00:12:51,969
just found yourself a sequel injection

297
00:12:48,189 --> 00:12:55,449
point so now<font color="#CCCCCC"> we're going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> move into</font>

298
00:12:51,970 --> 00:12:58,809
the first case study is anybody in here

299
00:12:55,449 --> 00:13:01,420
has anybody used review board it's a

300
00:12:58,809 --> 00:13:05,139
popular application from error which

301
00:13:01,420 --> 00:13:07,719
<font color="#CCCCCC">Apache KDE various open source projects</font>

302
00:13:05,139 --> 00:13:11,769
as well as corporations like trip wire

303
00:13:07,720 --> 00:13:14,980
and IBM use internally for facilitating

304
00:13:11,769 --> 00:13:16,360
the code review process so<font color="#CCCCCC"> I did a</font>

305
00:13:14,980 --> 00:13:18,860
little bit of analysis on<font color="#E5E5E5"> this</font>

306
00:13:16,360 --> 00:13:21,590
application<font color="#E5E5E5"> I'm going to go through the</font>

307
00:13:18,860 --> 00:13:24,920
steps that<font color="#E5E5E5"> I</font><font color="#CCCCCC"> use to</font><font color="#E5E5E5"> find flaws in it so</font>

308
00:13:21,590 --> 00:13:26,930
first starting point was to scope out

309
00:13:24,920 --> 00:13:30,829
what we're looking at this is a web

310
00:13:26,930 --> 00:13:34,370
application<font color="#E5E5E5"> it's python-based that runs</font>

311
00:13:30,830 --> 00:13:37,120
on a variety of HTTP servers it runs

312
00:13:34,370 --> 00:13:39,920
with a variety of database backends and

313
00:13:37,120 --> 00:13:41,750
from this we can kind of compile a list

314
00:13:39,920 --> 00:13:46,069
of possible vulnerabilities which have

315
00:13:41,750 --> 00:13:47,480
done so on the right here so since it's

316
00:13:46,070 --> 00:13:48,980
a web app we're obviously going<font color="#E5E5E5"> to look</font>

317
00:13:47,480 --> 00:13:51,890
for cross-site scripting cross-site

318
00:13:48,980 --> 00:13:53,330
request forgery since it uses databases

319
00:13:51,890 --> 00:13:56,090
we're going to look for some sequel

320
00:13:53,330 --> 00:13:58,640
injection we're also going to look for

321
00:13:56,090 --> 00:14:00,800
lfi and our file is there your file

322
00:13:58,640 --> 00:14:03,620
inclusion<font color="#E5E5E5"> vulnerabilities simply because</font>

323
00:14:00,800 --> 00:14:06,349
it's a web app and there's a good chance

324
00:14:03,620 --> 00:14:08,060
that you might have<font color="#E5E5E5"> some room to get</font>

325
00:14:06,350 --> 00:14:10,880
some new code uploaded onto the server

326
00:14:08,060 --> 00:14:13,609
and of course OS injection is a

327
00:14:10,880 --> 00:14:16,550
possibility because this is a web

328
00:14:13,610 --> 00:14:20,060
application which integrates with tools

329
00:14:16,550 --> 00:14:22,130
like get and other<font color="#CCCCCC"> rfcs systems so</font>

330
00:14:20,060 --> 00:14:24,680
there's the possibility that somebody

331
00:14:22,130 --> 00:14:28,460
could inject their own<font color="#E5E5E5"> commands into</font>

332
00:14:24,680 --> 00:14:32,120
that and<font color="#CCCCCC"> own your server so let's start</font>

333
00:14:28,460 --> 00:14:34,160
by doing some fuzzing on this the first

334
00:14:32,120 --> 00:14:36,680
thing that you see<font color="#E5E5E5"> when you log in to</font>

335
00:14:34,160 --> 00:14:38,510
review board is that at least under the

336
00:14:36,680 --> 00:14:40,430
default configuration it's set up so

337
00:14:38,510 --> 00:14:43,939
that if you don't<font color="#E5E5E5"> have an account you</font>

338
00:14:40,430 --> 00:14:46,939
can create an account so that's what

339
00:14:43,940 --> 00:14:49,580
we're going<font color="#E5E5E5"> to go ahead and do and in</font>

340
00:14:46,940 --> 00:14:52,010
the account creation field you can see

341
00:14:49,580 --> 00:14:54,890
here that I've entered my name and

342
00:14:52,010 --> 00:14:58,490
username and a password but for my real

343
00:14:54,890 --> 00:15:00,439
last name I've got this SVG onload tag

344
00:14:58,490 --> 00:15:02,360
which is one of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> see the cross-site</font>

345
00:15:00,440 --> 00:15:06,290
scripting locators that we talked about

346
00:15:02,360 --> 00:15:08,480
<font color="#CCCCCC">a little</font><font color="#E5E5E5"> bit earlier and so right away</font>

347
00:15:06,290 --> 00:15:11,030
by browsing through the web interface

348
00:15:08,480 --> 00:15:13,100
for this tool<font color="#E5E5E5"> I found that when you go</font>

349
00:15:11,030 --> 00:15:16,220
to the submitters list it<font color="#E5E5E5"> presents that</font>

350
00:15:13,100 --> 00:15:19,340
full<font color="#CCCCCC"> user's name without sanitization so</font>

351
00:15:16,220 --> 00:15:21,050
you can see our pop-up 1337 as you can

352
00:15:19,340 --> 00:15:24,110
read it<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the slides that's good and</font>

353
00:15:21,050 --> 00:15:26,180
then<font color="#CCCCCC"> again I found that when you go and</font>

354
00:15:24,110 --> 00:15:27,980
you want to assign<font color="#E5E5E5"> a review to some but</font>

355
00:15:26,180 --> 00:15:30,319
you start typing<font color="#CCCCCC"> in their name it has a</font>

356
00:15:27,980 --> 00:15:32,120
nice little autocomplete widget this

357
00:15:30,320 --> 00:15:34,610
autocomplete widget of course

358
00:15:32,120 --> 00:15:37,760
renders the name without sanitization

359
00:15:34,610 --> 00:15:39,830
again so you<font color="#CCCCCC"> got a pop-up</font><font color="#E5E5E5"> so these were</font>

360
00:15:37,760 --> 00:15:41,600
two CVS that were<font color="#E5E5E5"> assigned the first one</font>

361
00:15:39,830 --> 00:15:43,460
of course that submitters lyst not being

362
00:15:41,600 --> 00:15:46,850
sanitized the autocomplete not being

363
00:15:43,460 --> 00:15:49,339
sanitized and<font color="#CCCCCC"> Christian</font><font color="#E5E5E5"> Hammond of the</font>

364
00:15:46,850 --> 00:15:51,980
review board project was very good about

365
00:15:49,339 --> 00:15:54,500
implementing a fix we're in their

366
00:15:51,980 --> 00:15:57,890
underlying library would now sanitize

367
00:15:54,500 --> 00:15:59,320
everything globally so realistically

368
00:15:57,890 --> 00:16:03,890
there shouldn't be cross-site scripting

369
00:15:59,320 --> 00:16:05,990
vulnerabilities left so then if we talk

370
00:16:03,890 --> 00:16:08,300
<font color="#CCCCCC">about what kind of risks there are from</font>

371
00:16:05,990 --> 00:16:12,380
not updating this or if you wanted to

372
00:16:08,300 --> 00:16:13,819
say show to your management or in a

373
00:16:12,380 --> 00:16:16,189
professional engagement show to<font color="#E5E5E5"> your</font>

374
00:16:13,820 --> 00:16:18,050
customer that there are<font color="#E5E5E5"> actual serious</font>

375
00:16:16,190 --> 00:16:19,940
risks as a result of<font color="#E5E5E5"> this one these</font>

376
00:16:18,050 --> 00:16:23,089
cross-site scripting vulnerabilities

377
00:16:19,940 --> 00:16:26,740
being unpatched you can spark up Kali

378
00:16:23,089 --> 00:16:30,589
Linux load up backtrack or load back ya

379
00:16:26,740 --> 00:16:32,960
lo de beef rather or you can load beef

380
00:16:30,589 --> 00:16:35,900
on any other box and this<font color="#E5E5E5"> is an</font>

381
00:16:32,960 --> 00:16:38,300
excellent tool<font color="#E5E5E5"> for just gives you a</font>

382
00:16:35,900 --> 00:16:40,069
little script that you can in use in

383
00:16:38,300 --> 00:16:42,680
your cross-site scripting payload and

384
00:16:40,070 --> 00:16:44,990
then you can't<font color="#CCCCCC"> really see it here so</font>

385
00:16:42,680 --> 00:16:46,609
<font color="#CCCCCC">clearly but there's a little screenshot</font>

386
00:16:44,990 --> 00:16:49,100
showing what it looks like when you've

387
00:16:46,610 --> 00:16:52,420
put something on your meat hook in beef

388
00:16:49,100 --> 00:16:57,110
and from there you<font color="#CCCCCC"> can do things like</font>

389
00:16:52,420 --> 00:17:00,650
injecting<font color="#CCCCCC"> metasploit exploits into a</font>

390
00:16:57,110 --> 00:17:02,690
page you can start enumerate encase lick

391
00:17:00,650 --> 00:17:06,050
through what sites have been visited on

392
00:17:02,690 --> 00:17:08,589
<font color="#CCCCCC">the browser there's</font><font color="#E5E5E5"> even the ability to</font>

393
00:17:06,050 --> 00:17:11,510
do limited keystroke logging through it

394
00:17:08,589 --> 00:17:14,899
so what this all teaches us as

395
00:17:11,510 --> 00:17:17,510
developers we have to be expecting the

396
00:17:14,900 --> 00:17:19,280
unexpected you can have situations where

397
00:17:17,510 --> 00:17:21,740
you're going to trust output because

398
00:17:19,280 --> 00:17:25,730
it's coming from a system caller it's

399
00:17:21,740 --> 00:17:27,859
already in your database but really<font color="#E5E5E5"> you</font>

400
00:17:25,730 --> 00:17:29,600
<font color="#E5E5E5">need to think about has this doubt have</font>

401
00:17:27,859 --> 00:17:31,550
been sanitized somewhere before you're

402
00:17:29,600 --> 00:17:33,949
getting and if the<font color="#CCCCCC"> answer to that is no</font>

403
00:17:31,550 --> 00:17:38,450
you<font color="#E5E5E5"> treat</font><font color="#CCCCCC"> it as tainted and you sanitize</font>

404
00:17:33,950 --> 00:17:42,170
it so when I looked at IBM<font color="#CCCCCC"> websphere</font>

405
00:17:38,450 --> 00:17:44,929
last year sometime<font color="#CCCCCC"> I found</font><font color="#E5E5E5"> that they</font>

406
00:17:42,170 --> 00:17:45,450
were<font color="#E5E5E5"> not doing this so system calls for</font>

407
00:17:44,929 --> 00:17:47,789
a new

408
00:17:45,450 --> 00:17:49,710
reading the file system of course under

409
00:17:47,789 --> 00:17:52,590
unix you can have file names which have

410
00:17:49,710 --> 00:17:55,169
greater than less than tags these can be

411
00:17:52,590 --> 00:17:59,370
used for cross it or for HTML attributes

412
00:17:55,169 --> 00:18:01,409
HTML tags and in the WebSphere

413
00:17:59,370 --> 00:18:03,629
administrative console they have

414
00:18:01,409 --> 00:18:05,970
actually<font color="#E5E5E5"> a little file browser where you</font>

415
00:18:03,630 --> 00:18:08,940
can go through<font color="#CCCCCC"> and you can see what</font>

416
00:18:05,970 --> 00:18:11,850
files are on your server now if somebody

417
00:18:08,940 --> 00:18:14,909
happened to be able<font color="#E5E5E5"> to create files on</font>

418
00:18:11,850 --> 00:18:16,469
your server with special file names when

419
00:18:14,909 --> 00:18:18,510
the administrator goes to browse that

420
00:18:16,470 --> 00:18:22,409
they're<font color="#E5E5E5"> going to have across that</font>

421
00:18:18,510 --> 00:18:24,629
scripting payload run this is actually a

422
00:18:22,409 --> 00:18:27,630
really common mistake I've seen this on

423
00:18:24,630 --> 00:18:31,289
more than one google service<font color="#E5E5E5"> it's paid</font>

424
00:18:27,630 --> 00:18:33,750
out of<font color="#E5E5E5"> bounty I went back</font><font color="#CCCCCC"> to review</font>

425
00:18:31,289 --> 00:18:35,340
<font color="#E5E5E5">board and I looked at review board</font>

426
00:18:33,750 --> 00:18:38,460
considering whether<font color="#CCCCCC"> or</font><font color="#E5E5E5"> not they might</font>

427
00:18:35,340 --> 00:18:40,260
have the same<font color="#CCCCCC"> type of problem so the</font>

428
00:18:38,460 --> 00:18:42,510
text is kind of small up there but you

429
00:18:40,260 --> 00:18:45,600
can see I'm uploading an attachment to a

430
00:18:42,510 --> 00:18:47,789
review<font color="#E5E5E5"> which has a name that's a</font>

431
00:18:45,600 --> 00:18:50,850
cross-site scripting locator and the

432
00:18:47,789 --> 00:18:53,399
actual file name itself was or is a

433
00:18:50,850 --> 00:18:57,689
cross-site scripting locator with a dot

434
00:18:53,399 --> 00:19:00,629
PHP extension so fun uploading it we see

435
00:18:57,690 --> 00:19:03,240
<font color="#E5E5E5">that this was properly sanitized that's</font>

436
00:19:00,630 --> 00:19:04,559
the output something like the output

437
00:19:03,240 --> 00:19:08,159
that<font color="#E5E5E5"> you would want to see you don't</font>

438
00:19:04,559 --> 00:19:09,658
<font color="#E5E5E5">have a pop-up you see ampersand LT</font>

439
00:19:08,159 --> 00:19:11,630
although that's a little weird you

440
00:19:09,659 --> 00:19:15,450
should probably<font color="#CCCCCC"> see angle brackets and</font>

441
00:19:11,630 --> 00:19:18,000
the file name itself has been sanitized

442
00:19:15,450 --> 00:19:21,029
in such a way that we have underscores

443
00:19:18,000 --> 00:19:24,570
instead of spaces and our carrots are

444
00:19:21,029 --> 00:19:27,570
completely gone<font color="#E5E5E5"> but when we actually</font>

445
00:19:24,570 --> 00:19:30,779
click that file we have<font color="#CCCCCC"> a web shell so</font>

446
00:19:27,570 --> 00:19:33,450
this<font color="#E5E5E5"> is a file inclusion or remote code</font>

447
00:19:30,779 --> 00:19:35,970
execution vulnerability there's a bit of

448
00:19:33,450 --> 00:19:38,159
<font color="#E5E5E5">stuff that we could do from this console</font>

449
00:19:35,970 --> 00:19:39,779
an attacker would be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to start</font>

450
00:19:38,159 --> 00:19:43,529
running commands on your server browse

451
00:19:39,779 --> 00:19:47,370
and files creating connect back shells

452
00:19:43,529 --> 00:19:49,340
things of that nature so this

453
00:19:47,370 --> 00:19:51,709
vulnerability stems from the fact that

454
00:19:49,340 --> 00:19:54,600
review board gets installed by their

455
00:19:51,710 --> 00:19:57,360
install process their install process

456
00:19:54,600 --> 00:19:58,830
sets up uploads directories and it

457
00:19:57,360 --> 00:20:00,959
doesn't bother to actually

458
00:19:58,830 --> 00:20:03,750
or didn't bother to actually set up

459
00:20:00,960 --> 00:20:06,390
permissions on these upload directories

460
00:20:03,750 --> 00:20:08,760
to prevent things like PHP handlers or

461
00:20:06,390 --> 00:20:12,779
other kind<font color="#E5E5E5"> of server handlers from</font>

462
00:20:08,760 --> 00:20:15,390
running there so also you could very

463
00:20:12,779 --> 00:20:16,980
easily upload HTML documents regardless

464
00:20:15,390 --> 00:20:18,960
of what<font color="#CCCCCC"> kind of handlers are installed</font>

465
00:20:16,980 --> 00:20:20,399
on the server and<font color="#CCCCCC"> you have perfect</font>

466
00:20:18,960 --> 00:20:22,890
ammunition for cross-site scripting

467
00:20:20,399 --> 00:20:25,979
attacks phishing attacks try<font color="#E5E5E5"> and gain</font>

468
00:20:22,890 --> 00:20:29,580
credentials and of course like I showed

469
00:20:25,980 --> 00:20:31,590
if there is a PHP handler or mod ASP or

470
00:20:29,580 --> 00:20:34,379
something like that<font color="#E5E5E5"> you would be able to</font>

471
00:20:31,590 --> 00:20:38,220
get a web shell on<font color="#CCCCCC"> the server and this</font>

472
00:20:34,380 --> 00:20:40,190
is a problem that just updating review

473
00:20:38,220 --> 00:20:43,830
board doesn't do anything to fix it

474
00:20:40,190 --> 00:20:46,740
updating review board and then

475
00:20:43,830 --> 00:20:48,510
reinstalling your site or reconfigure in

476
00:20:46,740 --> 00:20:50,639
your site is the only way that you could

477
00:20:48,510 --> 00:20:53,220
eliminate this flaw and they did that

478
00:20:50,639 --> 00:20:56,010
through adding specific content handlers

479
00:20:53,220 --> 00:20:57,600
and removing unnecessary content

480
00:20:56,010 --> 00:21:02,700
handlers or recommending that you use a

481
00:20:57,600 --> 00:21:04,049
content delivery network so we<font color="#CCCCCC"> just</font>

482
00:21:02,700 --> 00:21:07,169
talked about<font color="#E5E5E5"> all this i'm not going to</font>

483
00:21:04,049 --> 00:21:10,350
say that<font color="#E5E5E5"> again but let's move on to</font>

484
00:21:07,169 --> 00:21:13,649
wireless IP cameras is anybody in here

485
00:21:10,350 --> 00:21:17,309
considered or used a wireless IP camera

486
00:21:13,649 --> 00:21:22,260
for home or<font color="#CCCCCC"> office security few hands so</font>

487
00:21:17,309 --> 00:21:23,760
<font color="#CCCCCC">i</font><font color="#E5E5E5"> myself i had the same desire I go on a</font>

488
00:21:22,260 --> 00:21:26,820
lot of<font color="#E5E5E5"> trips so I wanted to be able to</font>

489
00:21:23,760 --> 00:21:29,129
monitor my home remotely so I bought a

490
00:21:26,820 --> 00:21:31,408
camera that looks kind of like that<font color="#CCCCCC"> one</font>

491
00:21:29,130 --> 00:21:33,659
on<font color="#E5E5E5"> the top right there and I</font><font color="#CCCCCC"> thought oh</font>

492
00:21:31,409 --> 00:21:36,450
yay<font color="#E5E5E5"> I'm going to be able to put this in</font>

493
00:21:33,659 --> 00:21:37,799
my dmz access it from wherever I want I

494
00:21:36,450 --> 00:21:42,419
don't have to bother going through my

495
00:21:37,799 --> 00:21:44,399
VPN and before I did that is that

496
00:21:42,419 --> 00:21:47,370
<font color="#CCCCCC">alright we'll spend 15 minutes doing</font><font color="#E5E5E5"> a</font>

497
00:21:44,399 --> 00:21:50,518
security review so first thing we see

498
00:21:47,370 --> 00:21:54,178
<font color="#E5E5E5">when we look at this it's got an HTTP</font>

499
00:21:50,519 --> 00:21:57,510
interface for both managing<font color="#E5E5E5"> the device</font>

500
00:21:54,179 --> 00:22:00,330
and viewing the camera feeds and on this

501
00:21:57,510 --> 00:22:03,090
HTTP interface it's got a banner that I

502
00:22:00,330 --> 00:22:06,750
had never<font color="#CCCCCC"> seen before the banner was net</font>

503
00:22:03,090 --> 00:22:09,090
wave IP camera and throwing some basic

504
00:22:06,750 --> 00:22:12,169
options had options verbs out and things

505
00:22:09,090 --> 00:22:14,059
like that you<font color="#E5E5E5"> doesn't seem too</font>

506
00:22:12,169 --> 00:22:16,190
be like a fork of Apache or anything

507
00:22:14,059 --> 00:22:18,440
well known so there's a good<font color="#CCCCCC"> chance that</font>

508
00:22:16,190 --> 00:22:22,899
it's a custom<font color="#CCCCCC"> I p.m. plantation I found</font>

509
00:22:18,440 --> 00:22:25,669
out later<font color="#CCCCCC"> it came from open IP cam so I</font>

510
00:22:22,899 --> 00:22:28,369
decided that<font color="#CCCCCC"> this would be</font><font color="#E5E5E5"> the ripe</font>

511
00:22:25,669 --> 00:22:30,440
estar 'get to look at that if<font color="#E5E5E5"> it's</font>

512
00:22:28,369 --> 00:22:32,359
custom HP implementation there's a good

513
00:22:30,440 --> 00:22:36,350
chance they made mistakes that people

514
00:22:32,359 --> 00:22:39,199
before them have made there's also the

515
00:22:36,350 --> 00:22:40,369
very much likelihood that the web

516
00:22:39,200 --> 00:22:43,100
interface is going to have

517
00:22:40,369 --> 00:22:46,189
vulnerabilities because well most web

518
00:22:43,100 --> 00:22:48,559
interfaces have vulnerabilities so we'll

519
00:22:46,190 --> 00:22:51,619
start looking<font color="#E5E5E5"> for low hanging fruit this</font>

520
00:22:48,559 --> 00:22:53,629
is the management page I've got the

521
00:22:51,619 --> 00:22:57,859
chrome developer tools loaded on the

522
00:22:53,629 --> 00:22:59,689
bottom<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can kind of read it here but</font>

523
00:22:57,859 --> 00:23:02,059
this<font color="#E5E5E5"> is the list of users configured on</font>

524
00:22:59,690 --> 00:23:03,830
the device let's go<font color="#CCCCCC"> ahead and send that</font>

525
00:23:02,059 --> 00:23:06,408
request and then in the chrome

526
00:23:03,830 --> 00:23:10,309
development tools look at the request

527
00:23:06,409 --> 00:23:13,279
that came across now what<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see up</font>

528
00:23:10,309 --> 00:23:16,309
here is that this<font color="#CCCCCC"> is a get request and</font>

529
00:23:13,279 --> 00:23:19,070
it's a get request that has in the URL

530
00:23:16,309 --> 00:23:21,820
parameters a list of every user name

531
00:23:19,070 --> 00:23:27,678
every password every privilege and

532
00:23:21,820 --> 00:23:31,460
what's missing is a nonce value so what

533
00:23:27,679 --> 00:23:34,340
happens if we have a web page<font color="#E5E5E5"> that has</font>

534
00:23:31,460 --> 00:23:37,940
an image<font color="#E5E5E5"> tag on it and that image tag</font>

535
00:23:34,340 --> 00:23:39,949
has the source referring to that the IP

536
00:23:37,940 --> 00:23:43,279
address of your IP camera on<font color="#CCCCCC"> that set</font>

537
00:23:39,950 --> 00:23:46,029
users CGI script with some parameters

538
00:23:43,279 --> 00:23:49,549
being selected to<font color="#CCCCCC"> change your passwords</font>

539
00:23:46,029 --> 00:23:52,279
well the browser is going to request the

540
00:23:49,549 --> 00:23:54,529
URL if your browser knows credentials

541
00:23:52,279 --> 00:23:57,830
for<font color="#E5E5E5"> the site it's going to automatically</font>

542
00:23:54,529 --> 00:23:59,749
push those credentials out and the

543
00:23:57,830 --> 00:24:02,090
camera<font color="#E5E5E5"> is going to treat this</font><font color="#CCCCCC"> as an</font>

544
00:23:59,749 --> 00:24:04,129
authenticated request as if you the

545
00:24:02,090 --> 00:24:06,019
legitimate user had gone in to change

546
00:24:04,129 --> 00:24:11,299
your<font color="#E5E5E5"> username and</font><font color="#CCCCCC"> password or add a new</font>

547
00:24:06,019 --> 00:24:14,929
account and so the fixes for this type

548
00:24:11,299 --> 00:24:16,700
of problem primarily you don't<font color="#E5E5E5"> ever want</font>

549
00:24:14,929 --> 00:24:18,980
to<font color="#E5E5E5"> be able to change passwords without</font>

550
00:24:16,700 --> 00:24:21,739
entering a password again forcing real

551
00:24:18,980 --> 00:24:23,779
authentication<font color="#E5E5E5"> and most importantly</font>

552
00:24:21,739 --> 00:24:25,170
these types of requests should be

553
00:24:23,779 --> 00:24:27,630
treated with<font color="#E5E5E5"> a nonce value</font>

554
00:24:25,170 --> 00:24:30,330
the reason<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is that if you have</font>

555
00:24:27,630 --> 00:24:34,200
<font color="#E5E5E5">some unique value coming out in your</font>

556
00:24:30,330 --> 00:24:35,970
page and submissions to that script are

557
00:24:34,200 --> 00:24:38,160
going to require<font color="#CCCCCC"> that unique value to</font>

558
00:24:35,970 --> 00:24:40,410
match you're not<font color="#E5E5E5"> going to be able to do</font>

559
00:24:38,160 --> 00:24:43,110
cross-site request forgery without

560
00:24:40,410 --> 00:24:44,490
violating the same origin policy because

561
00:24:43,110 --> 00:24:45,959
you're not<font color="#E5E5E5"> going you're going to be able</font>

562
00:24:44,490 --> 00:24:48,060
<font color="#E5E5E5">to send requests you're not going to be</font>

563
00:24:45,960 --> 00:24:52,160
able to read the responses unless you

564
00:24:48,060 --> 00:24:56,879
<font color="#E5E5E5">have some special situations so this is</font>

565
00:24:52,160 --> 00:25:01,380
get base<font color="#CCCCCC"> Caesar very trivial to exploit</font>

566
00:24:56,880 --> 00:25:03,210
and even if you had say some trusted

567
00:25:01,380 --> 00:25:04,680
websites that could be tricked in

568
00:25:03,210 --> 00:25:07,980
toasting<font color="#CCCCCC"> an advertisement with the</font>

569
00:25:04,680 --> 00:25:10,650
crafted URL or forum pages with crafted

570
00:25:07,980 --> 00:25:13,980
<font color="#E5E5E5">URLs you could start exploiting this on</font>

571
00:25:10,650 --> 00:25:16,230
a massive scale but this was the<font color="#E5E5E5"> least</font>

572
00:25:13,980 --> 00:25:18,270
of<font color="#E5E5E5"> the problems with this device the</font>

573
00:25:16,230 --> 00:25:21,780
next thing<font color="#E5E5E5"> that I decided to look at was</font>

574
00:25:18,270 --> 00:25:24,240
directory traversal and this is a bug

575
00:25:21,780 --> 00:25:26,580
straight out of the 90s and so I was

576
00:25:24,240 --> 00:25:28,110
really really<font color="#E5E5E5"> very surprised and</font>

577
00:25:26,580 --> 00:25:32,310
disappointed that the camera that<font color="#E5E5E5"> i</font><font color="#CCCCCC"> just</font>

578
00:25:28,110 --> 00:25:37,020
bought in 2013 would have this<font color="#E5E5E5"> problem</font>

579
00:25:32,310 --> 00:25:39,870
but lo and behold doing a curl for / /

580
00:25:37,020 --> 00:25:44,670
etsy resolv.conf shows me name server

581
00:25:39,870 --> 00:25:47,419
configuration from it so that's bad but

582
00:25:44,670 --> 00:25:50,310
let's see if<font color="#E5E5E5"> it gets a little worse so</font>

583
00:25:47,420 --> 00:25:52,260
when we put<font color="#E5E5E5"> all the pieces together here</font>

584
00:25:50,310 --> 00:25:54,690
we can see first of all there's

585
00:25:52,260 --> 00:25:58,350
resolv.conf on the system if resolv.conf

586
00:25:54,690 --> 00:26:00,780
is on the system then most likely this

587
00:25:58,350 --> 00:26:03,230
is a linux or unix box we're going<font color="#E5E5E5"> to</font>

588
00:26:00,780 --> 00:26:06,720
guess that it's<font color="#CCCCCC"> probably</font><font color="#E5E5E5"> a linux box and</font>

589
00:26:03,230 --> 00:26:08,880
in linux we have the proc file system a

590
00:26:06,720 --> 00:26:12,270
lot<font color="#E5E5E5"> of times park file system is</font>

591
00:26:08,880 --> 00:26:13,650
configured with mounts for<font color="#CCCCCC"> mem came em</font>

592
00:26:12,270 --> 00:26:16,680
whatever that are going<font color="#E5E5E5"> to give you</font>

593
00:26:13,650 --> 00:26:19,680
access to the system's memory and in

594
00:26:16,680 --> 00:26:21,720
<font color="#CCCCCC">that memory you have passwords not just</font>

595
00:26:19,680 --> 00:26:25,230
the password for logging into the system

596
00:26:21,720 --> 00:26:28,170
but<font color="#CCCCCC"> also passwords for everything else</font>

597
00:26:25,230 --> 00:26:30,690
that it's going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use so smtp servers</font>

598
00:26:28,170 --> 00:26:34,020
dine<font color="#E5E5E5"> dns servers ftp servers that you</font>

599
00:26:30,690 --> 00:26:36,630
want to<font color="#E5E5E5"> load images to so I wrote a</font>

600
00:26:34,020 --> 00:26:38,550
little<font color="#E5E5E5"> script there's screenshot here</font>

601
00:26:36,630 --> 00:26:41,100
just showing how

602
00:26:38,550 --> 00:26:43,290
easily you could parse out the

603
00:26:41,100 --> 00:26:45,179
recognizable pattern of the admin

604
00:26:43,290 --> 00:26:46,860
username and password this is of course

605
00:26:45,180 --> 00:26:49,260
actually<font color="#E5E5E5"> the default credentials on the</font>

606
00:26:46,860 --> 00:26:51,360
box but<font color="#E5E5E5"> works just the same if you</font>

607
00:26:49,260 --> 00:26:54,030
change the<font color="#E5E5E5"> username and or password you</font>

608
00:26:51,360 --> 00:26:56,399
can look<font color="#CCCCCC"> for things in memory that are</font>

609
00:26:54,030 --> 00:27:01,050
<font color="#E5E5E5">going to proceed this and easily</font>

610
00:26:56,400 --> 00:27:02,880
identify that data so like I said you

611
00:27:01,050 --> 00:27:05,370
have the admin password being disclosed

612
00:27:02,880 --> 00:27:07,290
this way any other services which are

613
00:27:05,370 --> 00:27:09,120
authenticated services configured on the

614
00:27:07,290 --> 00:27:12,659
box their passwords are going to be

615
00:27:09,120 --> 00:27:14,820
disclosed so for example my comcast mail

616
00:27:12,660 --> 00:27:17,610
password which was necessary for having

617
00:27:14,820 --> 00:27:21,000
the camera send out alerts to me<font color="#E5E5E5"> during</font>

618
00:27:17,610 --> 00:27:23,459
movement that would get disclosed to

619
00:27:21,000 --> 00:27:25,170
anybody who knew the IP address of my

620
00:27:23,460 --> 00:27:28,170
camera<font color="#E5E5E5"> without having knowledge of the</font>

621
00:27:25,170 --> 00:27:31,590
password and in a straightforward and

622
00:27:28,170 --> 00:27:33,480
automated fashion and also of course you

623
00:27:31,590 --> 00:27:35,580
could probably<font color="#E5E5E5"> das the</font><font color="#CCCCCC"> device just</font><font color="#E5E5E5"> by</font>

624
00:27:33,480 --> 00:27:37,590
repeatedly requesting a dump of the

625
00:27:35,580 --> 00:27:42,570
memory on<font color="#E5E5E5"> it it's not going to last very</font>

626
00:27:37,590 --> 00:27:44,070
long so this gives a decent segue into

627
00:27:42,570 --> 00:27:46,409
firmware analysis in that particular

628
00:27:44,070 --> 00:27:48,899
<font color="#CCCCCC">case</font><font color="#E5E5E5"> of the camera I didn't do any</font>

629
00:27:46,410 --> 00:27:50,760
firmware analysis because the<font color="#E5E5E5"> only way</font>

630
00:27:48,900 --> 00:27:53,520
to get the firmware for it at<font color="#CCCCCC"> that time</font>

631
00:27:50,760 --> 00:27:55,530
would have been<font color="#CCCCCC"> to get it off of the</font>

632
00:27:53,520 --> 00:27:59,160
chip there were no released firmware

633
00:27:55,530 --> 00:28:00,780
updates for it they have since given me

634
00:27:59,160 --> 00:28:02,970
a firmware update that they didn't post

635
00:28:00,780 --> 00:28:06,810
on the website for some reason but

636
00:28:02,970 --> 00:28:09,630
nonetheless with other devices it's very

637
00:28:06,810 --> 00:28:11,790
helpful<font color="#CCCCCC"> to take a firmware update like</font>

638
00:28:09,630 --> 00:28:15,210
safe for your<font color="#E5E5E5"> d-link your neck your</font>

639
00:28:11,790 --> 00:28:17,460
router and<font color="#E5E5E5"> Craig Hefner has a great tool</font>

640
00:28:15,210 --> 00:28:20,790
out there called firmware mod kit this

641
00:28:17,460 --> 00:28:22,590
will allow<font color="#CCCCCC"> you to</font><font color="#E5E5E5"> it uses bin walk and</font>

642
00:28:20,790 --> 00:28:25,409
walks through the file system for the

643
00:28:22,590 --> 00:28:29,490
update or for the file for the update

644
00:28:25,410 --> 00:28:32,490
looks<font color="#E5E5E5"> for known file systems extracts</font>

645
00:28:29,490 --> 00:28:35,790
them<font color="#E5E5E5"> mounts them and all</font><font color="#CCCCCC"> of the data</font>

646
00:28:32,490 --> 00:28:39,720
<font color="#CCCCCC">that you get out of this you can use for</font>

647
00:28:35,790 --> 00:28:41,430
static<font color="#CCCCCC"> analysis and you can also use</font>

648
00:28:39,720 --> 00:28:43,980
some information from it to find

649
00:28:41,430 --> 00:28:46,560
<font color="#E5E5E5">backdoors like for</font><font color="#CCCCCC"> example there have</font>

650
00:28:43,980 --> 00:28:49,980
been cases where we've seen hard-coded

651
00:28:46,560 --> 00:28:52,470
user agent strings within HTTP binaries

652
00:28:49,980 --> 00:28:55,470
which allow you to<font color="#CCCCCC"> bypass authentication</font>

653
00:28:52,470 --> 00:29:00,299
and other similar vulnerabilities which

654
00:28:55,470 --> 00:29:02,640
I'll get to in a moment so jumping ahead

655
00:29:00,299 --> 00:29:06,780
a bit because<font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to kind of intermix</font>

656
00:29:02,640 --> 00:29:08,610
these two topics static<font color="#CCCCCC"> analysis is at</font>

657
00:29:06,780 --> 00:29:10,980
least from<font color="#E5E5E5"> my perspective the analysis</font>

658
00:29:08,610 --> 00:29:13,889
of binaries without actually<font color="#E5E5E5"> rotting</font>

659
00:29:10,980 --> 00:29:17,280
them so this gives you a way to analyze

660
00:29:13,890 --> 00:29:20,280
potentially malicious code it also

661
00:29:17,280 --> 00:29:22,110
<font color="#E5E5E5">prevents the process</font><font color="#CCCCCC"> that you're</font>

662
00:29:20,280 --> 00:29:24,629
examining from recognizing that you're

663
00:29:22,110 --> 00:29:26,309
examining it and there's lots of great

664
00:29:24,630 --> 00:29:28,530
tools out there for doing this free

665
00:29:26,309 --> 00:29:31,740
tools you've got object up you've got

666
00:29:28,530 --> 00:29:34,200
strings been walk on the commercial side

667
00:29:31,740 --> 00:29:36,090
of things<font color="#CCCCCC"> Ida</font><font color="#E5E5E5"> is a great tool they also</font>

668
00:29:34,200 --> 00:29:40,200
have a free version which<font color="#CCCCCC"> is kind</font><font color="#E5E5E5"> of old</font>

669
00:29:36,090 --> 00:29:42,629
but still quite<font color="#E5E5E5"> helpful now if we</font>

670
00:29:40,200 --> 00:29:45,270
combine the static<font color="#E5E5E5"> analysis approach and</font>

671
00:29:42,630 --> 00:29:47,700
the dynamic<font color="#CCCCCC"> analysis approach we can get</font>

672
00:29:45,270 --> 00:29:51,870
some interesting power out<font color="#CCCCCC"> of our</font>

673
00:29:47,700 --> 00:29:54,570
firmware analysis so first we can say

674
00:29:51,870 --> 00:29:56,219
extract the firmware from a router when

675
00:29:54,570 --> 00:29:58,830
<font color="#E5E5E5">we extract the firmware from the router</font>

676
00:29:56,220 --> 00:30:01,770
and melt the file systems that has we

677
00:29:58,830 --> 00:30:04,770
can<font color="#CCCCCC"> actually see all the files which are</font>

678
00:30:01,770 --> 00:30:08,580
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be in the public</font><font color="#E5E5E5"> HTML directory</font>

679
00:30:04,770 --> 00:30:10,980
for the web server adding on to that we

680
00:30:08,580 --> 00:30:13,889
have<font color="#E5E5E5"> binaries on the system like the</font>

681
00:30:10,980 --> 00:30:16,140
HTTP Damon we can dump strings out of

682
00:30:13,890 --> 00:30:17,760
that or do a knob dump of that and we

683
00:30:16,140 --> 00:30:19,830
can start to look for patterns of other

684
00:30:17,760 --> 00:30:22,049
things that<font color="#E5E5E5"> look like</font><font color="#CCCCCC"> they could be URLs</font>

685
00:30:19,830 --> 00:30:25,500
or you are eyes buried within<font color="#CCCCCC"> the code</font>

686
00:30:22,049 --> 00:30:29,039
once that's found we can<font color="#CCCCCC"> prepare a list</font>

687
00:30:25,500 --> 00:30:31,530
and then having<font color="#E5E5E5"> the device online</font><font color="#CCCCCC"> and</font>

688
00:30:29,039 --> 00:30:34,830
accessible we can iterate through this

689
00:30:31,530 --> 00:30:37,710
list and request every possible page

690
00:30:34,830 --> 00:30:39,418
that we think is on the device or

691
00:30:37,710 --> 00:30:42,900
handled internally through the web

692
00:30:39,419 --> 00:30:45,330
server and then keep notes of what data

693
00:30:42,900 --> 00:30:48,240
is being returned from each of them what

694
00:30:45,330 --> 00:30:52,309
return codes are coming out and what

695
00:30:48,240 --> 00:30:56,789
kind<font color="#E5E5E5"> of sensitive data is in there so</font>

696
00:30:52,309 --> 00:31:01,260
doing this approach on soho routers we

697
00:30:56,789 --> 00:31:03,600
<font color="#E5E5E5">found that 37 of the top 50 routers on</font>

698
00:31:01,260 --> 00:31:06,330
<font color="#E5E5E5">amazon we by</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> way did not look at all</font>

699
00:31:03,600 --> 00:31:08,760
50 of the routers so it's quite possible

700
00:31:06,330 --> 00:31:11,100
50 out of 50 of them are having<font color="#E5E5E5"> critical</font>

701
00:31:08,760 --> 00:31:14,669
vulnerabilities but from the ones that

702
00:31:11,100 --> 00:31:16,289
we had available to<font color="#E5E5E5"> us there were</font>

703
00:31:14,669 --> 00:31:19,440
vulnerabilities which were quite

704
00:31:16,289 --> 00:31:22,919
critical which were present on 37 of

705
00:31:19,440 --> 00:31:25,649
these<font color="#E5E5E5"> top-selling ones in the US so I'm</font>

706
00:31:22,919 --> 00:31:27,419
going<font color="#CCCCCC"> to do a little</font><font color="#E5E5E5"> bit of a</font>

707
00:31:25,649 --> 00:31:30,600
demonstration<font color="#E5E5E5"> of some of the stuff</font><font color="#CCCCCC"> that</font>

708
00:31:27,419 --> 00:31:33,840
we<font color="#E5E5E5"> found with this approach but because</font>

709
00:31:30,600 --> 00:31:36,209
all of the routers are basically crap I

710
00:31:33,840 --> 00:31:38,970
am just<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to I've made a little</font>

711
00:31:36,210 --> 00:31:40,470
masking proxy which does not reveal the

712
00:31:38,970 --> 00:31:42,870
strings that are being used<font color="#E5E5E5"> to bypass</font>

713
00:31:40,470 --> 00:31:44,820
authentication here in Google around for

714
00:31:42,870 --> 00:31:46,260
it you'll probably find it but you

715
00:31:44,820 --> 00:31:48,990
<font color="#E5E5E5">should just kind of think</font><font color="#CCCCCC"> about this</font>

716
00:31:46,260 --> 00:31:51,260
router as being every router because

717
00:31:48,990 --> 00:31:56,130
they're all about equally as vulnerable

718
00:31:51,260 --> 00:31:58,980
so on the top<font color="#E5E5E5"> here</font><font color="#CCCCCC"> you can see when we</font>

719
00:31:56,130 --> 00:32:01,350
request the page directly we get an

720
00:31:58,980 --> 00:32:05,789
unauthorized message saying<font color="#CCCCCC"> that you</font>

721
00:32:01,350 --> 00:32:10,289
need credentials on the bottom I have

722
00:32:05,789 --> 00:32:13,169
instead requested the page with this ?

723
00:32:10,289 --> 00:32:15,720
replaced with magic which my proxy

724
00:32:13,169 --> 00:32:18,059
string<font color="#CCCCCC"> behind-the-scenes is replacing</font>

725
00:32:15,720 --> 00:32:21,330
that with some set of characters which I

726
00:32:18,059 --> 00:32:24,029
found to be common amongst all of the

727
00:32:21,330 --> 00:32:25,559
file or all of the server resources

728
00:32:24,029 --> 00:32:28,350
which were given to me without

729
00:32:25,559 --> 00:32:31,230
authentication and when I make this

730
00:32:28,350 --> 00:32:34,279
request you can see<font color="#CCCCCC"> that one part of the</font>

731
00:32:31,230 --> 00:32:37,110
page this little nav bar on the side is

732
00:32:34,279 --> 00:32:39,179
actually being displayed and so<font color="#E5E5E5"> that</font>

733
00:32:37,110 --> 00:32:42,418
tells us that at least one<font color="#CCCCCC"> of the</font>

734
00:32:39,179 --> 00:32:44,809
requests was authenticated or was

735
00:32:42,419 --> 00:32:47,970
treated without needing<font color="#E5E5E5"> authentication</font>

736
00:32:44,809 --> 00:32:50,908
taking this a little bit further if<font color="#E5E5E5"> we</font>

737
00:32:47,970 --> 00:32:53,519
do a request directly to the<font color="#E5E5E5"> backup CGI</font>

738
00:32:50,909 --> 00:32:55,380
script on<font color="#CCCCCC"> the device we can</font><font color="#E5E5E5"> download the</font>

739
00:32:53,519 --> 00:32:57,659
configuration for the router without

740
00:32:55,380 --> 00:33:00,990
having authentication this configuration

741
00:32:57,659 --> 00:33:02,580
file of course contains passwords for

742
00:33:00,990 --> 00:33:04,830
any services that are configured<font color="#CCCCCC"> on it</font>

743
00:33:02,580 --> 00:33:08,850
and of course<font color="#CCCCCC"> the router administrative</font>

744
00:33:04,830 --> 00:33:12,510
password so<font color="#CCCCCC"> you basically own the box</font>

745
00:33:08,850 --> 00:33:17,820
with out too much effort so what we did

746
00:33:12,510 --> 00:33:19,680
here we assess what files are actually

747
00:33:17,820 --> 00:33:21,300
on the<font color="#E5E5E5"> device</font>

748
00:33:19,680 --> 00:33:23,310
we went<font color="#CCCCCC"> through and we attempted to</font>

749
00:33:21,300 --> 00:33:25,649
access each of the devices each of the

750
00:33:23,310 --> 00:33:28,770
files and what we came up with<font color="#E5E5E5"> was a</font>

751
00:33:25,650 --> 00:33:31,650
list of files<font color="#CCCCCC"> that all were acceptable</font>

752
00:33:28,770 --> 00:33:35,040
with at 200<font color="#E5E5E5"> okay and some content</font>

753
00:33:31,650 --> 00:33:36,660
potentially and then by looking across

754
00:33:35,040 --> 00:33:39,930
all of<font color="#E5E5E5"> these your eyes that are being</font>

755
00:33:36,660 --> 00:33:43,350
accepted patterns emerge and using those

756
00:33:39,930 --> 00:33:45,950
patterns were able to see all right well

757
00:33:43,350 --> 00:33:49,500
when our request ends with such-and-such

758
00:33:45,950 --> 00:33:52,260
we're going to bypass the<font color="#E5E5E5"> authentication</font>

759
00:33:49,500 --> 00:33:55,740
checks and then after this was

760
00:33:52,260 --> 00:33:57,840
determined<font color="#CCCCCC"> I opened</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> Ida knobs dumped</font>

761
00:33:55,740 --> 00:33:59,880
and started<font color="#CCCCCC"> looking through the binary</font>

762
00:33:57,840 --> 00:34:02,340
and realized yeah there's a check in

763
00:33:59,880 --> 00:34:04,530
here that's saying<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right if you see</font>

764
00:34:02,340 --> 00:34:06,360
certain file types you're going to<font color="#E5E5E5"> treat</font>

765
00:34:04,530 --> 00:34:08,909
them as not needing authentication

766
00:34:06,360 --> 00:34:10,529
because of course there are some things

767
00:34:08,909 --> 00:34:13,980
that<font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to be able to</font><font color="#E5E5E5"> access on</font>

768
00:34:10,530 --> 00:34:17,130
<font color="#CCCCCC">the system like that</font><font color="#E5E5E5"> on off that was up</font>

769
00:34:13,980 --> 00:34:18,870
before which are going to need to<font color="#CCCCCC"> be</font>

770
00:34:17,130 --> 00:34:22,680
accessible without a username<font color="#E5E5E5"> and</font>

771
00:34:18,870 --> 00:34:24,299
password and that's essentially<font color="#CCCCCC"> the root</font>

772
00:34:22,679 --> 00:34:26,639
of this vulnerability that and the fact

773
00:34:24,300 --> 00:34:28,260
that they<font color="#CCCCCC"> didn't actually enforce that</font>

774
00:34:26,639 --> 00:34:31,589
the file name that they were grabbing

775
00:34:28,260 --> 00:34:34,590
was having this extension but rather

776
00:34:31,590 --> 00:34:37,440
just that the URL coming in ended with

777
00:34:34,590 --> 00:34:41,580
this extension so question marks could

778
00:34:37,440 --> 00:34:43,650
<font color="#E5E5E5">be used to fool it so what you could do</font>

779
00:34:41,580 --> 00:34:45,150
with this vulnerability really the

780
00:34:43,650 --> 00:34:48,990
things that we've seen with like the

781
00:34:45,150 --> 00:34:51,600
moon worm and other vulnerability or

782
00:34:48,989 --> 00:34:54,120
other worms attacking routers and other

783
00:34:51,600 --> 00:34:55,980
mass attacks against routers people are

784
00:34:54,120 --> 00:34:59,190
changing dns settings that they can

785
00:34:55,980 --> 00:35:00,810
start hijacking sessions you can

786
00:34:59,190 --> 00:35:03,080
<font color="#CCCCCC">actually upload a completely new</font>

787
00:35:00,810 --> 00:35:06,270
firmware to the device which is going<font color="#E5E5E5"> to</font>

788
00:35:03,080 --> 00:35:08,400
<font color="#E5E5E5">prevent it from receiving future updates</font>

789
00:35:06,270 --> 00:35:13,070
or giving any indication that it's been

790
00:35:08,400 --> 00:35:15,030
compromised and of<font color="#E5E5E5"> course anything which</font>

791
00:35:13,070 --> 00:35:17,550
initially would have been an

792
00:35:15,030 --> 00:35:20,130
authenticated vulnerability this is now

793
00:35:17,550 --> 00:35:25,560
exposed to you because you<font color="#CCCCCC"> can bypass</font>

794
00:35:20,130 --> 00:35:27,720
the authentication so some of the other

795
00:35:25,560 --> 00:35:30,020
things<font color="#CCCCCC"> that came to light during</font><font color="#E5E5E5"> this</font>

796
00:35:27,720 --> 00:35:30,020
process

797
00:35:30,339 --> 00:35:38,229
we<font color="#E5E5E5"> found that error pages on one brand</font>

798
00:35:34,989 --> 00:35:40,779
router in particular had a huge flaw in

799
00:35:38,229 --> 00:35:43,210
them in which there was client-side code

800
00:35:40,779 --> 00:35:45,279
that was being<font color="#E5E5E5"> used to determine whether</font>

801
00:35:43,210 --> 00:35:48,099
<font color="#CCCCCC">or</font><font color="#E5E5E5"> not the system was in a</font><font color="#CCCCCC"> first-time</font>

802
00:35:45,279 --> 00:35:50,670
<font color="#E5E5E5">setup mode so the JavaScript would</font>

803
00:35:48,099 --> 00:35:53,950
actually come out<font color="#E5E5E5"> saying all right if</font>

804
00:35:50,670 --> 00:35:56,200
admin equals and then the server<font color="#E5E5E5"> would</font>

805
00:35:53,950 --> 00:36:00,218
replace the other part of the expression

806
00:35:56,200 --> 00:36:01,779
<font color="#E5E5E5">with the actual configured password then</font>

807
00:36:00,219 --> 00:36:03,279
you're going to redirect<font color="#E5E5E5"> to one page</font>

808
00:36:01,779 --> 00:36:05,200
otherwise you're going<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> something</font>

809
00:36:03,279 --> 00:36:08,430
else that's something else is irrelevant

810
00:36:05,200 --> 00:36:11,348
because now you<font color="#CCCCCC"> have the password and</font>

811
00:36:08,430 --> 00:36:13,629
also a bunch<font color="#E5E5E5"> of other things like IP</font>

812
00:36:11,349 --> 00:36:16,690
addresses<font color="#CCCCCC"> and mac addresses from the</font>

813
00:36:13,630 --> 00:36:18,549
internal network get revealed a lot of

814
00:36:16,690 --> 00:36:20,589
debugging information which would<font color="#E5E5E5"> help</font>

815
00:36:18,549 --> 00:36:23,559
you if you wanted to be able to in an

816
00:36:20,589 --> 00:36:25,420
automated fashion identify a router and

817
00:36:23,559 --> 00:36:31,839
determine what vulnerabilities you know

818
00:36:25,420 --> 00:36:36,130
<font color="#CCCCCC">about in it so looking</font><font color="#E5E5E5"> at source code</font>

819
00:36:31,839 --> 00:36:37,779
review the general idea here is that

820
00:36:36,130 --> 00:36:41,039
you're going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be looking for patterns</font>

821
00:36:37,779 --> 00:36:44,890
within the code that<font color="#E5E5E5"> are indicative of</font>

822
00:36:41,039 --> 00:36:46,619
security failings so for example the

823
00:36:44,890 --> 00:36:49,239
traditional<font color="#E5E5E5"> memory corruption</font>

824
00:36:46,619 --> 00:36:52,809
vulnerabilities came from s<font color="#E5E5E5"> printf store</font>

825
00:36:49,239 --> 00:36:54,880
<font color="#E5E5E5">caster copy things like that sequel</font>

826
00:36:52,809 --> 00:36:57,249
injection if you want to find<font color="#E5E5E5"> this in a</font>

827
00:36:54,880 --> 00:37:00,489
code base just start looking for places

828
00:36:57,249 --> 00:37:03,488
where you see different sequel verbs and

829
00:37:00,489 --> 00:37:06,219
perhaps augment that with looking for

830
00:37:03,489 --> 00:37:08,950
format string specifiers when you find

831
00:37:06,219 --> 00:37:12,519
these these are particularly suspicious

832
00:37:08,950 --> 00:37:14,109
and should have<font color="#E5E5E5"> a second look at seeing</font>

833
00:37:12,519 --> 00:37:17,109
whether or not they're exploitable and

834
00:37:14,109 --> 00:37:18,640
of course<font color="#CCCCCC"> for OS injection depending on</font>

835
00:37:17,109 --> 00:37:20,950
what language you're looking at there a

836
00:37:18,640 --> 00:37:23,348
number<font color="#E5E5E5"> of functions which you should</font><font color="#CCCCCC"> be</font>

837
00:37:20,950 --> 00:37:24,759
looking looking<font color="#CCCCCC"> for usage in your code</font>

838
00:37:23,349 --> 00:37:27,640
and verifying that it's being used

839
00:37:24,759 --> 00:37:29,979
safely so some tools for doing your

840
00:37:27,640 --> 00:37:32,799
source code review we've got grep of

841
00:37:29,979 --> 00:37:35,169
course the loss project has their labs

842
00:37:32,799 --> 00:37:38,769
tool which is<font color="#E5E5E5"> more specific for web</font>

843
00:37:35,170 --> 00:37:40,660
applications and<font color="#E5E5E5"> Google is an excellent</font>

844
00:37:38,769 --> 00:37:42,419
<font color="#CCCCCC">resource the google code search</font>

845
00:37:40,660 --> 00:37:44,328
capabilities have

846
00:37:42,420 --> 00:37:48,329
end up some vulnerabilities in the past

847
00:37:44,329 --> 00:37:52,920
so this<font color="#E5E5E5"> is a piece of source code it's</font>

848
00:37:48,329 --> 00:37:56,640
kind of<font color="#CCCCCC"> see code can anybody read it</font><font color="#E5E5E5"> can</font>

849
00:37:52,920 --> 00:38:05,250
anybody see what's wrong with this any

850
00:37:56,640 --> 00:38:09,690
hands what's wrong yes and no buffer

851
00:38:05,250 --> 00:38:13,520
overflow here well it's an SN printf so

852
00:38:09,690 --> 00:38:16,530
if you've got data being longer than

853
00:38:13,520 --> 00:38:17,940
buff it's not<font color="#E5E5E5"> going to overflow anything</font>

854
00:38:16,530 --> 00:38:22,460
it's<font color="#CCCCCC"> only going to write the size of</font>

855
00:38:17,940 --> 00:38:22,460
buff into there any other guesses

856
00:38:30,249 --> 00:38:36,950
yeah there could be something with<font color="#E5E5E5"> that</font>

857
00:38:32,299 --> 00:38:40,279
<font color="#E5E5E5">that's not actually the particular</font>

858
00:38:36,950 --> 00:38:43,430
vulnerability that I've found in this so

859
00:38:40,279 --> 00:38:47,420
let me go ahead here this is<font color="#E5E5E5"> actually a</font>

860
00:38:43,430 --> 00:38:50,660
buffer<font color="#E5E5E5"> over read in this situation SN</font>

861
00:38:47,420 --> 00:38:52,339
printf if you have data that is longer

862
00:38:50,660 --> 00:38:55,368
than the size of that<font color="#E5E5E5"> buffer that you're</font>

863
00:38:52,339 --> 00:38:57,769
putting it into SN printf isn't going to

864
00:38:55,369 --> 00:38:59,930
return the number<font color="#E5E5E5"> of bytes which were</font>

865
00:38:57,769 --> 00:39:01,788
actually written into the<font color="#E5E5E5"> buffer but</font>

866
00:38:59,930 --> 00:39:03,919
rather the number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> bytes that would</font>

867
00:39:01,789 --> 00:39:07,430
have been written<font color="#E5E5E5"> into the buffer had it</font>

868
00:39:03,920 --> 00:39:09,559
not<font color="#CCCCCC"> been a bounded string function so on</font>

869
00:39:07,430 --> 00:39:12,950
the next<font color="#E5E5E5"> line when you go ahead</font><font color="#CCCCCC"> and do a</font>

870
00:39:09,559 --> 00:39:15,650
send and using the return value from SN

871
00:39:12,950 --> 00:39:19,038
printf this<font color="#CCCCCC"> len you're going to end up</font>

872
00:39:15,650 --> 00:39:20,329
sending more data than you expected<font color="#E5E5E5"> to</font>

873
00:39:19,039 --> 00:39:23,809
<font color="#E5E5E5">you're going</font><font color="#CCCCCC"> to read off the end of</font><font color="#E5E5E5"> the</font>

874
00:39:20,329 --> 00:39:27,289
<font color="#E5E5E5">buffer because Len can be considerably</font>

875
00:39:23,809 --> 00:39:29,329
<font color="#E5E5E5">larger than size of buff so properly</font>

876
00:39:27,289 --> 00:39:32,660
written this code should only be sending

877
00:39:29,329 --> 00:39:36,529
at most sighs of buffs so it should be

878
00:39:32,660 --> 00:39:41,058
size of buff the ternary operator and if

879
00:39:36,529 --> 00:39:43,910
size of buff is going to be less than

880
00:39:41,059 --> 00:39:49,759
the land value you only want to send

881
00:39:43,910 --> 00:39:52,819
size of both plates so what<font color="#CCCCCC"> is a read</font>

882
00:39:49,759 --> 00:39:58,369
over the buffer over read why is<font color="#E5E5E5"> it</font>

883
00:39:52,819 --> 00:40:00,619
important so this is cwe 126 in general

884
00:39:58,369 --> 00:40:03,109
it's<font color="#E5E5E5"> whenever you're using a buffer and</font>

885
00:40:00,619 --> 00:40:05,269
you're not paying attention to how long

886
00:40:03,109 --> 00:40:08,058
this buffer is and getting data beyond

887
00:40:05,269 --> 00:40:10,189
the edge of the buffer and there's

888
00:40:08,059 --> 00:40:12,970
obvious reasons why you should care in

889
00:40:10,190 --> 00:40:15,589
case you hadn't noticed this month

890
00:40:12,970 --> 00:40:17,959
basically the<font color="#CCCCCC"> internet got turned upside</font>

891
00:40:15,589 --> 00:40:20,720
it's on its head<font color="#E5E5E5"> because of a buffer</font>

892
00:40:17,960 --> 00:40:23,210
over read vulnerability and open<font color="#CCCCCC"> US cell</font>

893
00:40:20,720 --> 00:40:25,669
that we call heartbleed so it should be

894
00:40:23,210 --> 00:40:29,450
pretty clear why buffer over reads are

895
00:40:25,670 --> 00:40:34,009
important to understand now looking at

896
00:40:29,450 --> 00:40:36,439
mini upnp d I found back some time<font color="#E5E5E5"> ago a</font>

897
00:40:34,009 --> 00:40:39,499
buffer over read this is a buffer over

898
00:40:36,440 --> 00:40:40,549
read in a network service because like

899
00:40:39,499 --> 00:40:42,558
that code sample

900
00:40:40,549 --> 00:40:44,779
that<font color="#E5E5E5"> I had up on the screen there they</font>

901
00:40:42,559 --> 00:40:47,509
were using the return value from sm

902
00:40:44,779 --> 00:40:49,939
printf<font color="#E5E5E5"> and weren't considering the</font>

903
00:40:47,509 --> 00:40:52,579
possibility that that length could

904
00:40:49,939 --> 00:40:55,819
exceed the size of<font color="#E5E5E5"> their buffer and so</font>

905
00:40:52,579 --> 00:41:00,140
if<font color="#E5E5E5"> you would send a crafted upnp message</font>

906
00:40:55,819 --> 00:41:02,058
you could cause a sin that's going to

907
00:41:00,140 --> 00:41:04,368
come out and send you extra data from

908
00:41:02,059 --> 00:41:08,599
the heap and that extra data and the

909
00:41:04,369 --> 00:41:10,819
heap is going to be upnp<font color="#E5E5E5"> messages so you</font>

910
00:41:08,599 --> 00:41:13,459
could<font color="#E5E5E5"> actually use this from outside of</font>

911
00:41:10,819 --> 00:41:15,979
a network to start fingerprinting and

912
00:41:13,459 --> 00:41:18,939
seeing what's inside the network what

913
00:41:15,979 --> 00:41:22,759
packet says this upnp damon been

914
00:41:18,939 --> 00:41:25,689
receiving and from there say<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> i know</font>

915
00:41:22,759 --> 00:41:28,579
<font color="#CCCCCC">there's an ad server or media player or</font>

916
00:41:25,689 --> 00:41:31,368
whatever else that<font color="#E5E5E5"> might be using upnp d</font>

917
00:41:28,579 --> 00:41:34,099
on the inside of this network that<font color="#CCCCCC"> i'm</font>

918
00:41:31,369 --> 00:41:36,170
only<font color="#E5E5E5"> on the outside of</font><font color="#CCCCCC"> and i can get</font>

919
00:41:34,099 --> 00:41:39,160
version information about it and use

920
00:41:36,170 --> 00:41:43,039
that<font color="#CCCCCC"> in reconnaissance for future attack</font>

921
00:41:39,160 --> 00:41:44,959
now there<font color="#CCCCCC"> are other instances where you</font>

922
00:41:43,039 --> 00:41:48,949
also have<font color="#CCCCCC"> to worry about the use of s</font>

923
00:41:44,959 --> 00:41:50,689
and printf and other bounded string

924
00:41:48,949 --> 00:41:54,469
functions which are supposed to be safe

925
00:41:50,689 --> 00:41:59,229
so ready DLNA another media related

926
00:41:54,469 --> 00:42:03,259
product from a netgear developer they

927
00:41:59,229 --> 00:42:07,368
had fixed up some stack buffer overflows

928
00:42:03,259 --> 00:42:09,650
which had been publicized<font color="#E5E5E5"> and replaced</font>

929
00:42:07,369 --> 00:42:10,939
them with a heap buffer overflow the

930
00:42:09,650 --> 00:42:13,609
reason<font color="#CCCCCC"> that this happened is because</font>

931
00:42:10,939 --> 00:42:15,890
they were using signed integers<font color="#CCCCCC"> to</font>

932
00:42:13,609 --> 00:42:17,719
calculate length fields never use a

933
00:42:15,890 --> 00:42:19,519
scientist ature to calculate a length

934
00:42:17,719 --> 00:42:23,269
field there's no reason that your length

935
00:42:19,519 --> 00:42:26,029
is ever going<font color="#CCCCCC"> to be negative so</font><font color="#E5E5E5"> in this</font>

936
00:42:23,269 --> 00:42:28,189
particular case the user could send data

937
00:42:26,029 --> 00:42:30,769
which is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to make</font><font color="#E5E5E5"> the signed buffer</font>

938
00:42:28,189 --> 00:42:33,739
or signed integer roll<font color="#CCCCCC"> over and you're</font>

939
00:42:30,769 --> 00:42:36,049
<font color="#E5E5E5">going to have unexpected results and you</font>

940
00:42:33,739 --> 00:42:38,390
can actually crop the heap this way and

941
00:42:36,049 --> 00:42:40,038
although it would take a bit of work in

942
00:42:38,390 --> 00:42:42,499
this<font color="#E5E5E5"> particular context to get code</font>

943
00:42:40,039 --> 00:42:46,719
execution at a bare minimum you<font color="#E5E5E5"> have a</font>

944
00:42:42,499 --> 00:42:49,160
denial of service attack from this so

945
00:42:46,719 --> 00:42:51,259
summary you've got vulnerabilities

946
00:42:49,160 --> 00:42:54,109
everywhere all<font color="#CCCCCC"> the systems that we deal</font>

947
00:42:51,259 --> 00:42:55,910
with are vulnerable and

948
00:42:54,109 --> 00:42:57,739
ways<font color="#E5E5E5"> and when you start to train</font>

949
00:42:55,910 --> 00:43:00,200
yourself to be able to look for these

950
00:42:57,739 --> 00:43:01,789
vulnerabilities you're going to find

951
00:43:00,200 --> 00:43:06,379
them and you're going<font color="#E5E5E5"> to find lots of</font>

952
00:43:01,789 --> 00:43:09,230
<font color="#E5E5E5">them and what I've found is that you can</font>

953
00:43:06,380 --> 00:43:11,029
run a lot<font color="#CCCCCC"> of animated or automated</font>

954
00:43:09,230 --> 00:43:14,119
scanning tools and they're not<font color="#CCCCCC"> going to</font>

955
00:43:11,029 --> 00:43:16,720
<font color="#CCCCCC">find things as quickly as just one or</font>

956
00:43:14,119 --> 00:43:19,309
two QA people going through and manually

957
00:43:16,720 --> 00:43:21,078
putting in different vulnerability

958
00:43:19,309 --> 00:43:26,720
locators into every field of your

959
00:43:21,079 --> 00:43:28,670
application so i also want to mention

960
00:43:26,720 --> 00:43:31,368
you<font color="#E5E5E5"> shouldn't be using any of these</font>

961
00:43:28,670 --> 00:43:34,599
tactics or techniques on systems that

962
00:43:31,369 --> 00:43:37,910
you don't own or don't have<font color="#E5E5E5"> a</font>

963
00:43:34,599 --> 00:43:40,369
professional engagement to be testing

964
00:43:37,910 --> 00:43:43,098
you also you want<font color="#E5E5E5"> to be careful about</font>

965
00:43:40,369 --> 00:43:44,690
what you're disclosing if you're going

966
00:43:43,099 --> 00:43:46,910
to disclose something publicly you have

967
00:43:44,690 --> 00:43:50,210
to understand<font color="#E5E5E5"> that it can put a lot of</font>

968
00:43:46,910 --> 00:43:53,210
<font color="#E5E5E5">people at risk so be patient with the</font>

969
00:43:50,210 --> 00:43:54,619
vendors they're not<font color="#CCCCCC"> necessarily going</font><font color="#E5E5E5"> to</font>

970
00:43:53,210 --> 00:43:56,539
be as smart as you when it comes to

971
00:43:54,619 --> 00:43:59,809
security<font color="#E5E5E5"> and they might need a little</font>

972
00:43:56,539 --> 00:44:04,069
bit of hold hand hand holding in order

973
00:43:59,809 --> 00:44:05,989
<font color="#CCCCCC">to figure out how to properly remediate</font>

974
00:44:04,069 --> 00:44:08,029
the vulnerability so I spend a lot of my

975
00:44:05,989 --> 00:44:10,549
time going back and forth with fenders

976
00:44:08,029 --> 00:44:13,339
and explaining to them why particular

977
00:44:10,549 --> 00:44:17,089
fixes are incomplete or what the proper

978
00:44:13,339 --> 00:44:18,619
way of doing things is so since I<font color="#E5E5E5"> still</font>

979
00:44:17,089 --> 00:44:21,190
have some<font color="#CCCCCC"> people here we're going</font><font color="#E5E5E5"> to go</font>

980
00:44:18,619 --> 00:44:23,869
<font color="#E5E5E5">back</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> router is I like to end</font>

981
00:44:21,190 --> 00:44:26,509
presentations with more than<font color="#E5E5E5"> just</font><font color="#CCCCCC"> a</font>

982
00:44:23,869 --> 00:44:29,210
little summary so I had<font color="#CCCCCC"> mentioned that</font>

983
00:44:26,509 --> 00:44:31,549
with the authentication bypass on the

984
00:44:29,210 --> 00:44:34,190
router we looked at earlier it exposes

985
00:44:31,549 --> 00:44:35,420
also vulnerabilities which generally

986
00:44:34,190 --> 00:44:38,569
would only be exposed to an

987
00:44:35,420 --> 00:44:42,559
authenticated user now this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> one such</font>

988
00:44:38,569 --> 00:44:46,640
vulnerability you can see maybe you can

989
00:44:42,559 --> 00:44:49,430
see in this is the pink<font color="#CCCCCC"> six</font>

990
00:44:46,640 --> 00:44:51,379
functionality of the router and if you

991
00:44:49,430 --> 00:44:53,089
give<font color="#E5E5E5"> it an IP address that has back</font>

992
00:44:51,380 --> 00:44:54,829
ticks in it it's<font color="#E5E5E5"> not going to do</font>

993
00:44:53,089 --> 00:44:57,769
anything to take those out before<font color="#E5E5E5"> it</font>

994
00:44:54,829 --> 00:45:01,940
passes it on to the system call and so

995
00:44:57,769 --> 00:45:04,758
when<font color="#CCCCCC"> we run back tick echo and then the</font>

996
00:45:01,940 --> 00:45:06,470
loopback address for ipv6 you end up

997
00:45:04,759 --> 00:45:07,970
getting output that looks like it's

998
00:45:06,470 --> 00:45:10,939
pinging the loopback address

999
00:45:07,970 --> 00:45:13,660
and so it's a good indication<font color="#E5E5E5"> that</font>

1000
00:45:10,940 --> 00:45:16,220
there's command injection<font color="#E5E5E5"> I actually</font>

1001
00:45:13,660 --> 00:45:19,848
verified this by<font color="#CCCCCC"> doing some other things</font>

1002
00:45:16,220 --> 00:45:21,500
like since we have the analysis<font color="#E5E5E5"> of the</font>

1003
00:45:19,849 --> 00:45:25,520
<font color="#E5E5E5">firmware we know the file system layout</font>

1004
00:45:21,500 --> 00:45:29,390
I could issue an LS slash bin and send

1005
00:45:25,520 --> 00:45:33,050
that output to a file in the web sharing

1006
00:45:29,390 --> 00:45:35,210
directory and<font color="#E5E5E5"> then when we go back and</font>

1007
00:45:33,050 --> 00:45:38,119
browse that fell we're<font color="#E5E5E5"> going to have</font>

1008
00:45:35,210 --> 00:45:40,880
output from our commands and then of

1009
00:45:38,119 --> 00:45:45,590
course on<font color="#CCCCCC"> the bottom line we have a</font>

1010
00:45:40,880 --> 00:45:50,180
semicolon you telnet d dash p 1337 any

1011
00:45:45,590 --> 00:45:51,920
<font color="#CCCCCC">guesses what</font><font color="#E5E5E5"> that's going to do so what</font>

1012
00:45:50,180 --> 00:45:53,960
we've<font color="#CCCCCC"> done here we extracted the</font>

1013
00:45:51,920 --> 00:45:57,260
firmware we<font color="#E5E5E5"> found that there was a</font>

1014
00:45:53,960 --> 00:46:00,950
hidden ping page on there we fuzz the

1015
00:45:57,260 --> 00:46:02,869
parameters very briefly<font color="#E5E5E5"> the way that I</font>

1016
00:46:00,950 --> 00:46:05,089
actually tested the<font color="#E5E5E5"> first time was just</font>

1017
00:46:02,869 --> 00:46:08,060
by doing back tick reboot backtick and

1018
00:46:05,090 --> 00:46:09,980
found yep<font color="#E5E5E5"> boxer boots</font><font color="#CCCCCC"> and it's a very</font>

1019
00:46:08,060 --> 00:46:13,520
common<font color="#CCCCCC"> problem like i said even some</font>

1020
00:46:09,980 --> 00:46:15,260
routers you will find that you can

1021
00:46:13,520 --> 00:46:17,810
trigger like on some<font color="#E5E5E5"> of the older</font>

1022
00:46:15,260 --> 00:46:19,730
linksys routers you can trigger the pink

1023
00:46:17,810 --> 00:46:22,220
functionality with an injection without

1024
00:46:19,730 --> 00:46:24,109
having any authentication just a post

1025
00:46:22,220 --> 00:46:27,348
request to<font color="#CCCCCC"> the script and it will ignore</font>

1026
00:46:24,109 --> 00:46:30,259
whatever credentials are sent so it's a

1027
00:46:27,349 --> 00:46:32,900
pretty serious problem something that

1028
00:46:30,260 --> 00:46:37,310
could<font color="#CCCCCC"> be very</font><font color="#E5E5E5"> easily warm put into a</font>

1029
00:46:32,900 --> 00:46:40,940
worm to propagate so of<font color="#E5E5E5"> course this is</font>

1030
00:46:37,310 --> 00:46:44,299
the<font color="#E5E5E5"> what</font><font color="#CCCCCC"> you get when you actually would</font>

1031
00:46:40,940 --> 00:46:48,290
run that you<font color="#E5E5E5"> telnet command there we've</font>

1032
00:46:44,300 --> 00:46:49,640
opened up a shell on port 1337 and when

1033
00:46:48,290 --> 00:46:51,650
we connect to it we<font color="#CCCCCC"> can see that</font><font color="#E5E5E5"> the</font>

1034
00:46:49,640 --> 00:46:55,970
<font color="#E5E5E5">router under the covers was using open</font>

1035
00:46:51,650 --> 00:46:58,190
wrt and we have a root shell and of

1036
00:46:55,970 --> 00:47:01,520
course<font color="#E5E5E5"> we have a root shell because as</font>

1037
00:46:58,190 --> 00:47:03,650
shown by PS you have the web server

1038
00:47:01,520 --> 00:47:07,490
running as root because who wouldn't

1039
00:47:03,650 --> 00:47:09,830
want to run their web server as root so

1040
00:47:07,490 --> 00:47:16,160
here's some<font color="#E5E5E5"> of the tools that I talked</font>

1041
00:47:09,830 --> 00:47:18,880
<font color="#CCCCCC">about lots of good ones in there does</font>

1042
00:47:16,160 --> 00:47:18,879
anybody have any questions

1043
00:47:21,280 --> 00:47:25,540
all right<font color="#E5E5E5"> thank you guys</font><font color="#CCCCCC"> for your time</font>

