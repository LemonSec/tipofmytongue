1
00:00:03,200 --> 00:00:07,379
might also notices teams biting wheedle

2
00:00:05,730 --> 00:00:09,809
so we try to get to do be kind every

3
00:00:07,379 --> 00:00:13,349
year the team yeah so some pretty good

4
00:00:09,809 --> 00:00:14,639
write-ups a if you're interested but so

5
00:00:13,349 --> 00:00:16,980
let's get to the crook to the top so

6
00:00:14,639 --> 00:00:19,470
what is PowerShell and is it yet so I

7
00:00:16,980 --> 00:00:21,060
think a lot being percept to be sort on

8
00:00:19,470 --> 00:00:22,229
to save its own powers off dead don't

9
00:00:21,060 --> 00:00:23,820
use it anymore but I think we need to

10
00:00:22,230 --> 00:00:25,109
think about it a little bit more think

11
00:00:23,820 --> 00:00:26,340
we need to go into the cooks of

12
00:00:25,109 --> 00:00:28,349
PowerShell and what it actually is so

13
00:00:26,340 --> 00:00:29,789
when people say our PowerShell is dead

14
00:00:28,349 --> 00:00:31,289
from a defensive perspective does that

15
00:00:29,789 --> 00:00:32,850
mean sort of practice you know aren't

16
00:00:31,289 --> 00:00:34,350
using anymore you're not allowed to sort

17
00:00:32,850 --> 00:00:35,730
of say not allowed to sorry you can't

18
00:00:34,350 --> 00:00:37,890
use it you know gets detect there with

19
00:00:35,730 --> 00:00:39,239
blocked but are they referring to the

20
00:00:37,890 --> 00:00:41,610
PowerShell you know the Microsoft signed

21
00:00:39,239 --> 00:00:43,440
binary is that what is blocked so if you

22
00:00:41,610 --> 00:00:45,269
if you're caught running power to act in

23
00:00:43,440 --> 00:00:47,250
a box it'll be one block if it's not

24
00:00:45,270 --> 00:00:48,510
lock that we detected in some is that

25
00:00:47,250 --> 00:00:50,969
what we're saying when we say PowerShell

26
00:00:48,510 --> 00:00:52,230
it's dead is it the DLL behind the

27
00:00:50,969 --> 00:00:53,969
binary it's actually power told actually

28
00:00:52,230 --> 00:00:56,218
just a wrapper with a system that mines

29
00:00:53,969 --> 00:00:57,989
went that automation DLL so if you've

30
00:00:56,219 --> 00:00:59,609
got good products like EDR which has

31
00:00:57,989 --> 00:01:01,800
treating enabled and allows you to see

32
00:00:59,609 --> 00:01:03,300
all the DLL loaded is it the fact that

33
00:01:01,800 --> 00:01:05,188
if you run any system management

34
00:01:03,300 --> 00:01:06,929
automation deal or any protists on a box

35
00:01:05,188 --> 00:01:08,580
now that's capable of being detected

36
00:01:06,930 --> 00:01:10,170
so that is actually what we say when we

37
00:01:08,580 --> 00:01:12,570
say PowerShell is dead it's both the XE

38
00:01:10,170 --> 00:01:13,890
and the automation DLL or is it

39
00:01:12,570 --> 00:01:15,809
typically the Poli it could be the

40
00:01:13,890 --> 00:01:17,340
folder the Power Cells launches from so

41
00:01:15,810 --> 00:01:20,280
if we go and copy pouch all the XE to

42
00:01:17,340 --> 00:01:21,750
another to the folder within Windows and

43
00:01:20,280 --> 00:01:23,400
have a different name does that mean we

44
00:01:21,750 --> 00:01:24,990
can actually use that and that isn't

45
00:01:23,400 --> 00:01:26,610
blocked so kind of we need to sort of

46
00:01:24,990 --> 00:01:27,479
understand what people say when they say

47
00:01:26,610 --> 00:01:29,070
PowerShell is dead

48
00:01:27,479 --> 00:01:31,048
also I don't know if you're aware or not

49
00:01:29,070 --> 00:01:32,939
but since version four and five it's now

50
00:01:31,049 --> 00:01:34,470
I've got integration within a MSI so you

51
00:01:32,939 --> 00:01:36,389
can see things that signature level from

52
00:01:34,470 --> 00:01:38,158
an AV perspective it's got things like

53
00:01:36,390 --> 00:01:39,689
transcript logging script logging and

54
00:01:38,159 --> 00:01:41,430
module logging so anything that's kind

55
00:01:39,689 --> 00:01:42,720
of run within the parish or run space

56
00:01:41,430 --> 00:01:44,280
whether that be from the dotnet

57
00:01:42,720 --> 00:01:46,500
management automation or directly from

58
00:01:44,280 --> 00:01:48,329
PowerShell you've got a chance to detect

59
00:01:46,500 --> 00:01:50,070
it and see it so for running common

60
00:01:48,329 --> 00:01:52,619
tools like Power View and power and

61
00:01:50,070 --> 00:01:54,479
things like that with the with the likes

62
00:01:52,619 --> 00:01:55,729
of shot and sorry script bot login and

63
00:01:54,479 --> 00:01:57,719
transcript logging you now from an

64
00:01:55,729 --> 00:01:59,610
infection perspective and see that

65
00:01:57,719 --> 00:02:02,158
within transcript and have it have a

66
00:01:59,610 --> 00:02:03,990
chance to see people early so we talked

67
00:02:02,159 --> 00:02:05,219
a little bit more about the crux of

68
00:02:03,990 --> 00:02:06,630
PowerShell in our other tool where we

69
00:02:05,219 --> 00:02:08,038
kind of tried to mix it up a little bit

70
00:02:06,630 --> 00:02:09,720
so if you want to go see your talk it's

71
00:02:08,038 --> 00:02:10,538
there Cooper's put it up or online so

72
00:02:09,720 --> 00:02:11,470
the

73
00:02:10,538 --> 00:02:13,929
gives you a little bit more background

74
00:02:11,470 --> 00:02:16,090
about powershell before that than we do

75
00:02:13,930 --> 00:02:18,519
in this tool so it moves on gets to the

76
00:02:16,090 --> 00:02:19,980
evolution of Asti too so those you don't

77
00:02:18,519 --> 00:02:21,970
know why she - it's a PowerShell

78
00:02:19,980 --> 00:02:23,709
framework completely written in

79
00:02:21,970 --> 00:02:25,900
PowerShell at least it was to start with

80
00:02:23,709 --> 00:02:27,400
so both the c2 server side and the

81
00:02:25,900 --> 00:02:29,650
implant side was written in PowerShell

82
00:02:27,400 --> 00:02:30,940
so you just have that a Windows box you

83
00:02:29,650 --> 00:02:32,340
can deploy it on a Windows box whether

84
00:02:30,940 --> 00:02:34,720
that's in the client environment or not

85
00:02:32,340 --> 00:02:36,340
either through the internet or not well

86
00:02:34,720 --> 00:02:36,819
the implant just runs purely in

87
00:02:36,340 --> 00:02:38,440
PowerShell

88
00:02:36,819 --> 00:02:39,640
originally it was literally anything

89
00:02:38,440 --> 00:02:42,159
you'd have to run is a PowerShell

90
00:02:39,640 --> 00:02:43,569
one-liner so we'd have the - II encoded

91
00:02:42,159 --> 00:02:45,670
command with a massive global basic

92
00:02:43,569 --> 00:02:47,798
support text we then went through some

93
00:02:45,670 --> 00:02:49,480
iterations of changes we implemented the

94
00:02:47,799 --> 00:02:50,890
C sharp theory which allowed you to do

95
00:02:49,480 --> 00:02:52,480
things like right-click get system and

96
00:02:50,890 --> 00:02:54,488
write that screenshot but absolutely

97
00:02:52,480 --> 00:02:56,500
hated it as an operator level people

98
00:02:54,489 --> 00:02:57,910
like Dugger myself and rather when

99
00:02:56,500 --> 00:02:59,440
you're using it it's just it's you want

100
00:02:57,910 --> 00:03:00,819
to know what you're typing in and you

101
00:02:59,440 --> 00:03:01,750
want to get the output back instantly

102
00:03:00,819 --> 00:03:03,640
you don't have to be waiting for

103
00:03:01,750 --> 00:03:05,890
something to happen in a GUI so kind of

104
00:03:03,640 --> 00:03:07,599
scrapped that pretty quickly we've

105
00:03:05,890 --> 00:03:08,798
introduced the questio to slack channel

106
00:03:07,599 --> 00:03:10,599
so people can get on there and sort of

107
00:03:08,799 --> 00:03:13,989
any help or any problems that they're

108
00:03:10,599 --> 00:03:15,459
having or running any tools we actually

109
00:03:13,989 --> 00:03:17,709
ported the server over to Python as well

110
00:03:15,459 --> 00:03:19,329
to make it go across platforms you can

111
00:03:17,709 --> 00:03:21,599
now run it on Linux or UNIX flavored

112
00:03:19,329 --> 00:03:24,459
systems even Macs from the server side

113
00:03:21,599 --> 00:03:25,839
and one thing that we did was which made

114
00:03:24,459 --> 00:03:28,299
a massive difference with the refer like

115
00:03:25,840 --> 00:03:29,799
the DLL or the shell code this is based

116
00:03:28,299 --> 00:03:32,049
off the good work there's even fewer did

117
00:03:29,799 --> 00:03:34,780
to allow you to load the managed runtime

118
00:03:32,049 --> 00:03:38,470
CLR in unmanaged code space so now you

119
00:03:34,780 --> 00:03:40,419
can pour any implant from PowerShell one

120
00:03:38,470 --> 00:03:41,889
line is now going into any process on an

121
00:03:40,419 --> 00:03:43,810
operating system so things like VC

122
00:03:41,889 --> 00:03:45,609
hosting got search protocol host outlook

123
00:03:43,810 --> 00:03:47,470
any processes running as your user or

124
00:03:45,609 --> 00:03:49,090
you'll use a level you can now migrate

125
00:03:47,470 --> 00:03:50,470
into that and be running all the same

126
00:03:49,090 --> 00:03:52,480
commands that you work at all so that

127
00:03:50,470 --> 00:03:54,040
was kind of a big thing also Rob who's

128
00:03:52,480 --> 00:03:55,899
here again today he really sharp socks

129
00:03:54,040 --> 00:03:57,668
so it's kind of one of this kind outside

130
00:03:55,900 --> 00:03:59,260
of things like Metasploit and cobol

131
00:03:57,669 --> 00:04:01,389
which allows you to now use all your

132
00:03:59,260 --> 00:04:03,280
tools client-side or sorry server-side

133
00:04:01,389 --> 00:04:05,709
when like you know tool that nmap telnet

134
00:04:03,280 --> 00:04:07,870
RDP so msds see you can now turn all

135
00:04:05,709 --> 00:04:09,459
that over HTTP beacons and it will be

136
00:04:07,870 --> 00:04:11,650
relay at the other side of the implant

137
00:04:09,459 --> 00:04:13,690
so you can just RDP to servers all

138
00:04:11,650 --> 00:04:14,799
through HTTP beacons so it allows it to

139
00:04:13,690 --> 00:04:17,440
it allows you to be much more flexible

140
00:04:14,799 --> 00:04:20,890
and this is all integrated within in

141
00:04:17,440 --> 00:04:21,700
Charlotte in version 3 but then do some

142
00:04:20,890 --> 00:04:23,740
other things actually wrote some

143
00:04:21,700 --> 00:04:25,770
documentation which is great made it

144
00:04:23,740 --> 00:04:28,750
easier for people outside an area to use

145
00:04:25,770 --> 00:04:30,039
and also in 2019 or so around the

146
00:04:28,750 --> 00:04:31,840
Christmas time we released a sharp

147
00:04:30,039 --> 00:04:33,460
implant so this is actually now moves

148
00:04:31,840 --> 00:04:35,500
anything and who's completely away from

149
00:04:33,460 --> 00:04:37,060
either the power shoulder XE or the

150
00:04:35,500 --> 00:04:38,979
systems on management automation delouse

151
00:04:37,060 --> 00:04:40,630
we've now got fully fledged implants

152
00:04:38,979 --> 00:04:42,068
that don't have either of those in and

153
00:04:40,630 --> 00:04:43,569
we'll talk a little bit about in a

154
00:04:42,069 --> 00:04:45,910
little bit fine

155
00:04:43,569 --> 00:04:47,530
we also added support for 2003 and XP

156
00:04:45,910 --> 00:04:48,729
and when I say support it more means

157
00:04:47,530 --> 00:04:50,710
that the sharp in but actually just

158
00:04:48,729 --> 00:04:52,659
works on that by default if they've got

159
00:04:50,710 --> 00:04:54,340
the dotnet runtime visual for which they

160
00:04:52,660 --> 00:04:56,080
can have if there's the latest versions

161
00:04:54,340 --> 00:04:57,429
of both those operating systems you

162
00:04:56,080 --> 00:04:59,109
might say why the hell would you back

163
00:04:57,430 --> 00:05:00,520
call it 2003 well you know some of our

164
00:04:59,110 --> 00:05:02,080
clients and even some of the big clients

165
00:05:00,520 --> 00:05:04,448
still have certain three legacy systems

166
00:05:02,080 --> 00:05:05,919
running in their network so be amazed

167
00:05:04,449 --> 00:05:07,240
how many times you see that and it's

168
00:05:05,919 --> 00:05:09,280
actually quite difficult least these

169
00:05:07,240 --> 00:05:11,199
days to get your tooling to work on

170
00:05:09,280 --> 00:05:14,710
operating system such as XP and serve

171
00:05:11,199 --> 00:05:16,180
them green and in June Rob sir made some

172
00:05:14,710 --> 00:05:17,710
massive updates recently not pushed them

173
00:05:16,180 --> 00:05:19,240
yet so what's his face but sharp flux

174
00:05:17,710 --> 00:05:20,948
has got like uber quicker than it has

175
00:05:19,240 --> 00:05:22,539
before and the integration within

176
00:05:20,949 --> 00:05:23,889
partials going to be almost you know you

177
00:05:22,539 --> 00:05:25,300
start sharp stocks and it'll just

178
00:05:23,889 --> 00:05:27,400
instantly start you'll do all the server

179
00:05:25,300 --> 00:05:28,659
stuff on the back end and it's all going

180
00:05:27,400 --> 00:05:29,739
to be written in that cord I want to

181
00:05:28,659 --> 00:05:30,820
steal his thunder but that's kind of a

182
00:05:29,740 --> 00:05:32,320
lot of stuff that we're going to be

183
00:05:30,820 --> 00:05:36,430
doing and hopefully releasing in June if

184
00:05:32,320 --> 00:05:37,900
he pulls this finger out so this is what

185
00:05:36,430 --> 00:05:39,159
PowerShell used to look like so it's

186
00:05:37,900 --> 00:05:40,530
like partially to look like when it

187
00:05:39,159 --> 00:05:42,699
first came out over in in PowerShell

188
00:05:40,530 --> 00:05:43,809
from an upset consideration from the

189
00:05:42,699 --> 00:05:45,370
defensive side this is what it would

190
00:05:43,810 --> 00:05:47,050
look like you would go in on a box

191
00:05:45,370 --> 00:05:49,509
see if it's compromised parish she'll be

192
00:05:47,050 --> 00:05:50,680
running you dig a little bit deeper you

193
00:05:49,509 --> 00:05:52,599
would see there'll be a massive global

194
00:05:50,680 --> 00:05:54,190
basics before you go into code that

195
00:05:52,599 --> 00:05:56,259
basics or you can see where all the CT

196
00:05:54,190 --> 00:05:58,090
URLs are you can see what the encryption

197
00:05:56,259 --> 00:06:00,759
keys where you can decode all the

198
00:05:58,090 --> 00:06:02,560
traffic very very simple to sort of

199
00:06:00,759 --> 00:06:05,229
debug from that side from a detection

200
00:06:02,560 --> 00:06:06,969
with the spent perspective especially

201
00:06:05,229 --> 00:06:09,130
with the integration of EDR so in carbon

202
00:06:06,969 --> 00:06:11,320
black and tan human life can come across

203
00:06:09,130 --> 00:06:12,789
you can really easily threat hunt your

204
00:06:11,320 --> 00:06:14,229
estate and go if they show me everywhere

205
00:06:12,789 --> 00:06:15,310
where PowerShell is running and you'll

206
00:06:14,229 --> 00:06:16,930
be able to go and see the command line

207
00:06:15,310 --> 00:06:18,400
options and so if someone is using

208
00:06:16,930 --> 00:06:20,380
Cauchy to in your state you've got ADR

209
00:06:18,400 --> 00:06:23,109
on the PowerShell level really really

210
00:06:20,380 --> 00:06:25,000
easy to see so that's kind of where

211
00:06:23,110 --> 00:06:27,099
pushes you started and even when you

212
00:06:25,000 --> 00:06:30,219
added the reflective DLL on the shell

213
00:06:27,099 --> 00:06:32,830
code it's now just as simple with the

214
00:06:30,219 --> 00:06:34,190
likes of EDR Carmel a containing to find

215
00:06:32,830 --> 00:06:35,870
out where they've loaded

216
00:06:34,190 --> 00:06:38,300
management automation DLL so which

217
00:06:35,870 --> 00:06:40,610
processes so as you can see here net sh

218
00:06:38,300 --> 00:06:42,070
search protocol pokes SPC host all of

219
00:06:40,610 --> 00:06:44,510
these are actually bad malicious

220
00:06:42,070 --> 00:06:46,250
processes that we've started and put the

221
00:06:44,510 --> 00:06:48,110
implant in so again this is another

222
00:06:46,250 --> 00:06:49,160
great way to threaten your estate to go

223
00:06:48,110 --> 00:06:51,290
and see where other people have done

224
00:06:49,160 --> 00:06:52,790
this it's very unlikely that process is

225
00:06:51,290 --> 00:06:54,440
other than PowerShell and a few of the

226
00:06:52,790 --> 00:06:56,540
processes that use similar versions of

227
00:06:54,440 --> 00:06:58,010
PowerShell that have system management

228
00:06:56,540 --> 00:06:59,780
automation in that aren't malicious so

229
00:06:58,010 --> 00:07:02,960
another great way to find PowerShell

230
00:06:59,780 --> 00:07:05,299
within your environment so I guess from

231
00:07:02,960 --> 00:07:06,979
a defensive and legacy approach to

232
00:07:05,300 --> 00:07:08,300
PowerShell so back in the day everyone's

233
00:07:06,980 --> 00:07:10,190
just like well should block PowerShell

234
00:07:08,300 --> 00:07:12,200
to get rid of it let's put some sort of

235
00:07:10,190 --> 00:07:13,640
blacklist in place and stop parish I was

236
00:07:12,200 --> 00:07:15,560
running on endpoints but I guess that

237
00:07:13,640 --> 00:07:16,849
didn't really cut it so the modern

238
00:07:15,560 --> 00:07:19,010
approach in the practical pro actually

239
00:07:16,850 --> 00:07:20,540
to allow it so things like version 5 has

240
00:07:19,010 --> 00:07:22,250
much greater visibility like I was

241
00:07:20,540 --> 00:07:23,510
talking to you about like the transcript

242
00:07:22,250 --> 00:07:26,090
log and you can see everything that's in

243
00:07:23,510 --> 00:07:28,520
that run space you can enable constrain

244
00:07:26,090 --> 00:07:30,260
mode so even has language restrictions a

245
00:07:28,520 --> 00:07:32,570
bit like ad types you can't compile your

246
00:07:30,260 --> 00:07:33,620
own stuff on the fly and you can monitor

247
00:07:32,570 --> 00:07:35,180
for things like the system top

248
00:07:33,620 --> 00:07:38,120
management or automation dll in the

249
00:07:35,180 --> 00:07:39,650
process most vendors I think pretty much

250
00:07:38,120 --> 00:07:41,660
all vendors now all the bigger than

251
00:07:39,650 --> 00:07:43,219
fenders have a Massiah integration so a

252
00:07:41,660 --> 00:07:44,840
lot of people use PowerShell before to

253
00:07:43,220 --> 00:07:46,400
get code directly into memory so that it

254
00:07:44,840 --> 00:07:48,049
couldn't be scammed a lot of them now

255
00:07:46,400 --> 00:07:49,429
have a Mis our integration so they can

256
00:07:48,050 --> 00:07:52,340
see all the command lists before they go

257
00:07:49,430 --> 00:07:53,810
into memory script block transcript log

258
00:07:52,340 --> 00:07:55,520
in a module log in again this is all

259
00:07:53,810 --> 00:07:59,270
great thus showing early signs of

260
00:07:55,520 --> 00:08:01,070
suspicious behavior on your network so I

261
00:07:59,270 --> 00:08:03,979
guess what this comes back to is from

262
00:08:01,070 --> 00:08:05,300
our perspective is PowerShell Det so if

263
00:08:03,980 --> 00:08:07,340
you take all the things I've just said

264
00:08:05,300 --> 00:08:09,169
into account it's all based off what you

265
00:08:07,340 --> 00:08:10,580
have from a defensive perspective so if

266
00:08:09,169 --> 00:08:12,380
you were going into an environment that

267
00:08:10,580 --> 00:08:14,450
isn't running any EDR and just running

268
00:08:12,380 --> 00:08:15,890
simple logging on an endpoint PowerShell

269
00:08:14,450 --> 00:08:17,300
is absolutely by impartial we're running

270
00:08:15,890 --> 00:08:19,370
no problem at all you're out of any

271
00:08:17,300 --> 00:08:22,160
logging any alerts even most a be some

272
00:08:19,370 --> 00:08:23,540
power saw lines still get around so in

273
00:08:22,160 --> 00:08:24,980
our opinion now it's not dead it is

274
00:08:23,540 --> 00:08:26,480
purely depend on the configuration of

275
00:08:24,980 --> 00:08:28,490
the endpoints and the configuration of

276
00:08:26,480 --> 00:08:30,680
the client so with EDR it's definitely

277
00:08:28,490 --> 00:08:32,120
getting more difficult but you can still

278
00:08:30,680 --> 00:08:34,520
run system the management automation on

279
00:08:32,120 --> 00:08:35,659
most large EDR rollouts nowadays cause

280
00:08:34,520 --> 00:08:37,819
all of them have to have things like the

281
00:08:35,659 --> 00:08:39,319
tracing enable which takes a lot more

282
00:08:37,820 --> 00:08:40,969
processing power so again its usability

283
00:08:39,320 --> 00:08:44,540
versus security so it's all down to

284
00:08:40,969 --> 00:08:47,420
configuration which is key and if you

285
00:08:44,540 --> 00:08:48,079
didn't believe us a bt 33 corn fire I've

286
00:08:47,420 --> 00:08:50,240
been using it

287
00:08:48,080 --> 00:08:51,980
basically in the whole of 2018 it's a

288
00:08:50,240 --> 00:08:53,120
hack the aerospace and energy sectors

289
00:08:51,980 --> 00:08:54,560
there's some really good write-ups there

290
00:08:53,120 --> 00:08:56,240
and they haven't been doing anything

291
00:08:54,560 --> 00:08:58,939
clever they've been throwing HTA's

292
00:08:56,240 --> 00:09:01,010
envious or random emails basically again

293
00:08:58,940 --> 00:09:02,269
HTA's department running power shop let

294
00:09:01,010 --> 00:09:03,860
you PowerShell one lies they haven't

295
00:09:02,269 --> 00:09:05,870
been even using sort system management

296
00:09:03,860 --> 00:09:06,950
run spaces just look you've been doing

297
00:09:05,870 --> 00:09:08,420
one-liners and they've been getting away

298
00:09:06,950 --> 00:09:12,740
with it and having some really good

299
00:09:08,420 --> 00:09:14,870
success from these blogs perspectives so

300
00:09:12,740 --> 00:09:16,250
if you did still think parish I was dead

301
00:09:14,870 --> 00:09:18,290
and I'm just going to introduce the C

302
00:09:16,250 --> 00:09:22,399
sharp implant so we released this in

303
00:09:18,290 --> 00:09:23,750
December January time this year same way

304
00:09:22,399 --> 00:09:26,269
as before so when you when you start

305
00:09:23,750 --> 00:09:28,160
pops you to you get like the two options

306
00:09:26,269 --> 00:09:29,329
the way to deploy it by shell code so

307
00:09:28,160 --> 00:09:31,160
you can deploy it however you want to

308
00:09:29,329 --> 00:09:33,109
deploy shell code any shell code cradle

309
00:09:31,160 --> 00:09:35,540
or you can just pop a DLL onto disk if

310
00:09:33,110 --> 00:09:36,740
you want to so in the simplest form is

311
00:09:35,540 --> 00:09:38,300
going to show you how you get it going

312
00:09:36,740 --> 00:09:40,310
so basically just trip the DL arm disk

313
00:09:38,300 --> 00:09:41,930
if you don't know the entry point it's

314
00:09:40,310 --> 00:09:43,459
all written in the documentation or

315
00:09:41,930 --> 00:09:45,680
should be but if you don't open CF up

316
00:09:43,459 --> 00:09:46,969
explorer check the exports you can see

317
00:09:45,680 --> 00:09:48,649
which entry points you can modify the

318
00:09:46,970 --> 00:09:50,930
entry points but this one just boy pump

319
00:09:48,649 --> 00:09:53,410
simple and then you can do things like

320
00:09:50,930 --> 00:09:55,880
migrate as you could before

321
00:09:53,410 --> 00:09:57,350
so once you've migrated with a c-sharp

322
00:09:55,880 --> 00:09:59,689
implant what does that look like from a

323
00:09:57,350 --> 00:10:01,910
defensive perspective let's just take a

324
00:09:59,690 --> 00:10:03,740
simple 64-bit process search protocol

325
00:10:01,910 --> 00:10:05,480
how it's running on a Windows system but

326
00:10:03,740 --> 00:10:08,270
this is actually PowerShell sorry the

327
00:10:05,480 --> 00:10:09,980
sharp implant running proxy to so what

328
00:10:08,270 --> 00:10:11,959
you wouldn't normally see is the dotnet

329
00:10:09,980 --> 00:10:13,220
assembly so no search protocol host on

330
00:10:11,959 --> 00:10:15,260
your system across your estate should

331
00:10:13,220 --> 00:10:17,270
ever have a dotnet assembly or done at

332
00:10:15,260 --> 00:10:18,920
runtime loaded into it as you can see

333
00:10:17,270 --> 00:10:20,300
here it's got a new app the main app

334
00:10:18,920 --> 00:10:22,579
that means got a randomly generated

335
00:10:20,300 --> 00:10:24,020
string inside the app domain as you can

336
00:10:22,579 --> 00:10:25,310
see there's two assemblies both there's

337
00:10:24,020 --> 00:10:27,680
assembly they don't have a location on

338
00:10:25,310 --> 00:10:30,260
this that is always a point that

339
00:10:27,680 --> 00:10:31,880
something looks not quite right and it

340
00:10:30,260 --> 00:10:34,310
should go and be searched of these kind

341
00:10:31,880 --> 00:10:36,170
of things other things that you might

342
00:10:34,310 --> 00:10:39,199
notice as well is it's loaded the CLR

343
00:10:36,170 --> 00:10:40,640
DLL all the MS Cori e dot DL out so both

344
00:10:39,199 --> 00:10:43,010
of these are requirements have run

345
00:10:40,640 --> 00:10:45,470
basically two CLR with in runtime with

346
00:10:43,010 --> 00:10:46,579
an unmanaged space so as before I guess

347
00:10:45,470 --> 00:10:48,199
the obstet consideration will be

348
00:10:46,579 --> 00:10:50,989
decision time management automation DLL

349
00:10:48,199 --> 00:10:53,660
now it's the CLR DLL or the MS core ye

350
00:10:50,990 --> 00:10:55,490
AR but a lot of other systems even like

351
00:10:53,660 --> 00:10:56,810
silence I think I've written in dotnet

352
00:10:55,490 --> 00:10:58,220
so there's a lot of other programs out

353
00:10:56,810 --> 00:10:59,989
there across your estate now which would

354
00:10:58,220 --> 00:11:01,939
be using CLR that the allow so it's not

355
00:10:59,990 --> 00:11:03,499
quite simple to do the same

356
00:11:01,939 --> 00:11:05,179
we were talking about before we taenia

357
00:11:03,499 --> 00:11:06,289
man glad to do show me everything that's

358
00:11:05,179 --> 00:11:08,839
got the systems of management the

359
00:11:06,289 --> 00:11:10,309
automation because CLR is running a lot

360
00:11:08,839 --> 00:11:11,839
to programs even a lot of Microsoft

361
00:11:10,309 --> 00:11:19,639
programs they're typically used on a day

362
00:11:11,839 --> 00:11:21,499
to day basis one thing to take note of

363
00:11:19,639 --> 00:11:23,689
is within the sharp implant is the help

364
00:11:21,499 --> 00:11:25,549
so typically the PowerShell in plan

365
00:11:23,689 --> 00:11:26,868
which is basically a command prompt has

366
00:11:25,549 --> 00:11:29,269
all the features of like changed

367
00:11:26,869 --> 00:11:31,339
directory copy file delete file when you

368
00:11:29,269 --> 00:11:32,449
let me introduce c-sharp in plan none of

369
00:11:31,339 --> 00:11:33,679
this is default so we have to actually

370
00:11:32,449 --> 00:11:35,118
recreate just a lot of the common

371
00:11:33,679 --> 00:11:36,559
features that you typically want to use

372
00:11:35,119 --> 00:11:37,519
literally like change directory that

373
00:11:36,559 --> 00:11:38,689
doesn't exist

374
00:11:37,519 --> 00:11:40,609
so you have to actually write the code

375
00:11:38,689 --> 00:11:41,929
behind that so we've done a lot of work

376
00:11:40,609 --> 00:11:43,639
on the court the allowable or Roberts

377
00:11:41,929 --> 00:11:45,559
also didn't work on the core DLL in

378
00:11:43,639 --> 00:11:46,999
written in C sharp it doesn't have

379
00:11:45,559 --> 00:11:48,889
everything so what we've actually done

380
00:11:46,999 --> 00:11:50,989
is giving you the cradle to load any

381
00:11:48,889 --> 00:11:53,359
c-sharp assembly within your own one

382
00:11:50,989 --> 00:11:55,249
space so take seat belt take all the

383
00:11:53,359 --> 00:11:56,689
great work you know that Spector ops

384
00:11:55,249 --> 00:11:58,399
have done with ghost packets set your

385
00:11:56,689 --> 00:11:59,988
loads of other programs or that you can

386
00:11:58,399 --> 00:12:01,789
basically take any of those binaries

387
00:11:59,989 --> 00:12:04,039
compile them yourself I wouldn't ever

388
00:12:01,789 --> 00:12:06,259
take anybody up on top internet and run

389
00:12:04,039 --> 00:12:07,339
them and either you can run a DLL or run

390
00:12:06,259 --> 00:12:08,959
an XE there are kind of two main

391
00:12:07,339 --> 00:12:10,519
features so you can go write all your

392
00:12:08,959 --> 00:12:13,248
own modules all your own cordial owls

393
00:12:10,519 --> 00:12:14,689
and run them through this harness so all

394
00:12:13,249 --> 00:12:16,339
you have to take a now of is if you're

395
00:12:14,689 --> 00:12:17,868
running a DLL the main difference I

396
00:12:16,339 --> 00:12:19,789
guess between the DLR X is the entry

397
00:12:17,869 --> 00:12:20,809
point so and actually should should have

398
00:12:19,789 --> 00:12:22,999
a main or should have a main method

399
00:12:20,809 --> 00:12:25,129
where the DLL wouldn't so you have to

400
00:12:22,999 --> 00:12:26,449
specify that as a parameter but as long

401
00:12:25,129 --> 00:12:29,329
as you know the class name so for

402
00:12:26,449 --> 00:12:31,219
example seatbelt sorry class name is

403
00:12:29,329 --> 00:12:34,248
program but the namespace is seatbelt so

404
00:12:31,220 --> 00:12:35,659
see the namespace the class and then the

405
00:12:34,249 --> 00:12:37,369
method and then you can run something

406
00:12:35,659 --> 00:12:39,199
like user checks happy days through the

407
00:12:37,369 --> 00:12:41,359
employment as long as it runs to console

408
00:12:39,199 --> 00:12:42,738
dot write line and you can we all hook

409
00:12:41,359 --> 00:12:44,209
that information and bring that back to

410
00:12:42,739 --> 00:12:45,769
you through the implant that's quite

411
00:12:44,209 --> 00:12:47,899
simple it is to run something like that

412
00:12:45,769 --> 00:12:51,109
then push you to almost like the execute

413
00:12:47,899 --> 00:12:52,099
assembly within Cobalts right just dig

414
00:12:51,109 --> 00:12:54,019
in a little deeper won't go too much

415
00:12:52,099 --> 00:12:55,459
into the code but load you who do you

416
00:12:54,019 --> 00:12:56,659
know some dot net reflection stuff this

417
00:12:55,459 --> 00:12:57,679
is how basically we're doing under the

418
00:12:56,659 --> 00:12:59,119
hood we're going through looking through

419
00:12:57,679 --> 00:13:00,978
all of the assemblies that we've loaded

420
00:12:59,119 --> 00:13:02,539
in you know on disk so if you've loaded

421
00:13:00,979 --> 00:13:02,979
sharp seatbelt whatever it is we've

422
00:13:02,539 --> 00:13:05,119
loaded

423
00:13:02,979 --> 00:13:07,429
rated with the run XE we're picking the

424
00:13:05,119 --> 00:13:09,349
entry point and invoking it with certain

425
00:13:07,429 --> 00:13:11,149
arguments whatever you pass and with the

426
00:13:09,349 --> 00:13:12,739
DLL basically we're passing it the

427
00:13:11,149 --> 00:13:14,470
method name plus the parameters as well

428
00:13:12,739 --> 00:13:15,870
and then we're just capturing the output

429
00:13:14,470 --> 00:13:18,480
this is

430
00:13:15,870 --> 00:13:19,770
anything so although there's probably

431
00:13:18,480 --> 00:13:21,090
not as fully-fledged as the power

432
00:13:19,770 --> 00:13:22,980
shelling plant all the coding and all

433
00:13:21,090 --> 00:13:24,060
the scripts behind it this does allow

434
00:13:22,980 --> 00:13:26,250
you to go and write your own code and

435
00:13:24,060 --> 00:13:29,280
just deploy it quite quickly within any

436
00:13:26,250 --> 00:13:30,660
c-sharp in pun again from a defensive

437
00:13:29,280 --> 00:13:32,730
perspective let's just take a quick look

438
00:13:30,660 --> 00:13:34,530
what that looks like though so again you

439
00:13:32,730 --> 00:13:36,120
see the app domain but also you'll see

440
00:13:34,530 --> 00:13:37,380
the EXCI so you want to be mindful when

441
00:13:36,120 --> 00:13:38,880
you're compiling your annexes what you

442
00:13:37,380 --> 00:13:40,230
call them so I think like C pal will

443
00:13:38,880 --> 00:13:42,450
then stick out like a sore thumb and

444
00:13:40,230 --> 00:13:43,920
people actually looking for this in the

445
00:13:42,450 --> 00:13:45,900
app load or this or a load assembly

446
00:13:43,920 --> 00:13:47,040
module and the obviously C part probably

447
00:13:45,900 --> 00:13:48,300
not a good one going forward from a

448
00:13:47,040 --> 00:13:49,530
signature perspective so make sure you

449
00:13:48,300 --> 00:13:51,180
compile them and call the namespaces

450
00:13:49,530 --> 00:13:54,329
something different when you roll them

451
00:13:51,180 --> 00:13:56,250
out so I guess this is pretty much it

452
00:13:54,330 --> 00:13:58,170
from a c-sharp perspective well I guess

453
00:13:56,250 --> 00:14:00,360
it's it's hopefully helping get around

454
00:13:58,170 --> 00:14:01,530
other things like EDR but if you want

455
00:14:00,360 --> 00:14:03,090
more information on that I think Doug's

456
00:14:01,530 --> 00:14:17,220
gonna talk quite a bit that EDR and/or

457
00:14:03,090 --> 00:14:17,790
next nav now thanks Ben so obviously up

458
00:14:17,220 --> 00:14:20,670
to this point

459
00:14:17,790 --> 00:14:24,510
Ben's mentioned ez are a lot but they're

460
00:14:20,670 --> 00:14:27,300
actually little EDRs a end point

461
00:14:24,510 --> 00:14:28,770
detection response software so it's

462
00:14:27,300 --> 00:14:30,089
basically behavioral data and it's

463
00:14:28,770 --> 00:14:31,949
sending all that behavioral data through

464
00:14:30,090 --> 00:14:34,500
an agent back time i central and

465
00:14:31,950 --> 00:14:36,780
database and earthiness analysis there

466
00:14:34,500 --> 00:14:38,190
so it's not just static signatures it's

467
00:14:36,780 --> 00:14:39,600
not just looking at one thing it's able

468
00:14:38,190 --> 00:14:42,300
to pick up what's the thing that's able

469
00:14:39,600 --> 00:14:44,760
to pull search trees and pack them apart

470
00:14:42,300 --> 00:14:46,740
you think about a word document with a

471
00:14:44,760 --> 00:14:48,750
macro that's going to kick off BBA

472
00:14:46,740 --> 00:14:50,160
that's going to possibly do w script and

473
00:14:48,750 --> 00:14:52,170
if they load up i'll is going to execute

474
00:14:50,160 --> 00:14:54,329
that that can all be tracked in a chain

475
00:14:52,170 --> 00:14:56,160
and that's the kind of power the EDR

476
00:14:54,330 --> 00:14:58,560
gives us that extra visibility that

477
00:14:56,160 --> 00:15:00,990
wasn't there before and some of the

478
00:14:58,560 --> 00:15:05,459
vendors your your lower carbon black

479
00:15:00,990 --> 00:15:07,170
silence sentinel one and before endpoint

480
00:15:05,460 --> 00:15:09,570
patient response was really a thing and

481
00:15:07,170 --> 00:15:11,760
it was there very much so head in the

482
00:15:09,570 --> 00:15:13,710
sand for the blue team they had too much

483
00:15:11,760 --> 00:15:16,620
visibility now it's about up a role

484
00:15:13,710 --> 00:15:18,720
reversal as a better game changer when

485
00:15:16,620 --> 00:15:20,490
I'm in my red team's and I get in and

486
00:15:18,720 --> 00:15:22,050
I'm in a situation awareness one who

487
00:15:20,490 --> 00:15:24,540
says less didn't see something with had

488
00:15:22,050 --> 00:15:26,490
the black or Ori other that's very much

489
00:15:24,540 --> 00:15:28,469
so do not want I was hoping for a bit of

490
00:15:26,490 --> 00:15:29,700
an easy gig best time but unfortunately

491
00:15:28,470 --> 00:15:33,930
over happy

492
00:15:29,700 --> 00:15:35,100
I'm actually doing but it's not while as

493
00:15:33,930 --> 00:15:36,959
against Windows welcome to the

494
00:15:35,100 --> 00:15:38,940
everything is we're still plenty of room

495
00:15:36,960 --> 00:15:41,190
to play and you just got to be really

496
00:15:38,940 --> 00:15:42,960
careful a couple of thoughts we're going

497
00:15:41,190 --> 00:15:45,960
to go through a void in each directory

498
00:15:42,960 --> 00:15:46,860
and part in with EDR and the end deserts

499
00:15:45,960 --> 00:15:50,940
they were going to have to share the

500
00:15:46,860 --> 00:15:52,800
bath for the DVR so avoidances as as as

501
00:15:50,940 --> 00:15:55,470
you'd expect that pretty much just rifle

502
00:15:52,800 --> 00:15:58,589
okay what EGR didn't do it don't get

503
00:15:55,470 --> 00:16:00,570
detected an example of this and sadly it

504
00:15:58,590 --> 00:16:02,700
came from a detection we got detected

505
00:16:00,570 --> 00:16:04,020
and we actually buy in a lot of the even

506
00:16:02,700 --> 00:16:06,270
got EDR products and start to research

507
00:16:04,020 --> 00:16:07,800
and look at them what it did before we

508
00:16:06,270 --> 00:16:10,530
did that we also went online and had a

509
00:16:07,800 --> 00:16:12,000
look see what certainly the attributes

510
00:16:10,530 --> 00:16:14,280
the one that caught me was carbon black

511
00:16:12,000 --> 00:16:15,480
we're gonna look had a look when you

512
00:16:14,280 --> 00:16:17,880
install and it was a lot of heat so

513
00:16:15,480 --> 00:16:19,740
there you can prevent so many suspicious

514
00:16:17,880 --> 00:16:21,330
indicators is one of them it's got my

515
00:16:19,740 --> 00:16:23,010
earpiece siguiente know as well and that

516
00:16:21,330 --> 00:16:25,620
ends up being all the signatures that

517
00:16:23,010 --> 00:16:28,350
come back in the centralized database so

518
00:16:25,620 --> 00:16:29,850
about an RTF a moment for myself they

519
00:16:28,350 --> 00:16:32,070
actually began to those and you start to

520
00:16:29,850 --> 00:16:34,680
see pablor bills especially process

521
00:16:32,070 --> 00:16:36,780
execution suspicious SB sequels Payton

522
00:16:34,680 --> 00:16:38,160
what we were using SPC host as a as a

523
00:16:36,780 --> 00:16:40,350
parent and then executing things

524
00:16:38,160 --> 00:16:42,120
underneath that like however she'll like

525
00:16:40,350 --> 00:16:44,130
any description you've got has been at

526
00:16:42,120 --> 00:16:46,610
CSC to compile code on the fly

527
00:16:44,130 --> 00:16:49,110
that's all very suspicious also sent

528
00:16:46,610 --> 00:16:50,850
pulses headin in system seems like a

529
00:16:49,110 --> 00:16:53,100
really good idea but not you know that

530
00:16:50,850 --> 00:16:55,860
that's what EDI was watching for so

531
00:16:53,100 --> 00:16:57,270
avoidance stop figure out what it's

532
00:16:55,860 --> 00:16:59,640
doing and then and boom do it

533
00:16:57,270 --> 00:17:01,500
another example Bank hmmm touched on

534
00:16:59,640 --> 00:17:02,730
this one if you can look through your

535
00:17:01,500 --> 00:17:04,260
whole estate and you can find all the

536
00:17:02,730 --> 00:17:07,200
binaries are one ancestor management

537
00:17:04,260 --> 00:17:08,730
automation pol then you'll find the

538
00:17:07,200 --> 00:17:09,090
signature here a companion tries to do

539
00:17:08,730 --> 00:17:11,190
that

540
00:17:09,089 --> 00:17:12,569
and it says not in these binaries these

541
00:17:11,190 --> 00:17:14,580
are the binaries that is fixed rates in

542
00:17:12,569 --> 00:17:16,829
the plane the end so someone's attempted

543
00:17:14,579 --> 00:17:18,839
to put the signature together or they've

544
00:17:16,829 --> 00:17:20,550
actually made a mistake and that is that

545
00:17:18,839 --> 00:17:23,579
they're not actually doing any checks on

546
00:17:20,550 --> 00:17:24,930
the actual and binaries at all they're

547
00:17:23,579 --> 00:17:26,399
not there to find both of the right once

548
00:17:24,930 --> 00:17:29,280
or not you can check in the process path

549
00:17:26,400 --> 00:17:31,710
so I can know and take one at for

550
00:17:29,280 --> 00:17:33,840
Shakespeare goals drop onto the desktop

551
00:17:31,710 --> 00:17:35,850
call it monitoring boost or exit where

552
00:17:33,840 --> 00:17:37,709
system on a mantle automation inside it

553
00:17:35,850 --> 00:17:42,540
and that works like not on that allow

554
00:17:37,710 --> 00:17:43,410
anyway any trickery this is kind of so

555
00:17:42,540 --> 00:17:47,129
if you think about

556
00:17:43,410 --> 00:17:48,750
process 3 the ability years and you know

557
00:17:47,130 --> 00:17:51,330
they've got that visibility is trying to

558
00:17:48,750 --> 00:17:53,190
track that into not been able to sure

559
00:17:51,330 --> 00:17:54,090
exactly what you're doing that time so

560
00:17:53,190 --> 00:17:55,830
certain things that I've been about

561
00:17:54,090 --> 00:17:57,299
problem pain like parents Krypton

562
00:17:55,830 --> 00:17:59,250
did your Stevens was talking about that

563
00:17:57,299 --> 00:18:01,500
some typos in a name that pretty much an

564
00:17:59,250 --> 00:18:03,030
accurate mean see two known as well but

565
00:18:01,500 --> 00:18:04,530
the cord for it is actually this is just

566
00:18:03,030 --> 00:18:06,720
off Stack Overflow issue is what it

567
00:18:04,530 --> 00:18:10,320
looks like you've got a start up in for

568
00:18:06,720 --> 00:18:12,870
X which has a structure with IPA phobias

569
00:18:10,320 --> 00:18:17,399
list and then you can update the Haven

570
00:18:12,870 --> 00:18:18,689
head and site that just here what that

571
00:18:17,400 --> 00:18:22,559
allows you to do is basically just say

572
00:18:18,690 --> 00:18:23,820
an explorer as Mark Dayton so if you

573
00:18:22,559 --> 00:18:25,379
think about that attack pattern you're

574
00:18:23,820 --> 00:18:26,460
doing this again if your animal and

575
00:18:25,380 --> 00:18:28,169
you've executed something previously

576
00:18:26,460 --> 00:18:30,539
that with a Pina appear and Microsoft

577
00:18:28,169 --> 00:18:31,980
work makeup in your parent but no you

578
00:18:30,539 --> 00:18:33,270
can actually see explore this map parent

579
00:18:31,980 --> 00:18:34,770
and when you think about how someone

580
00:18:33,270 --> 00:18:36,510
uses an operating system they're

581
00:18:34,770 --> 00:18:38,789
generally launched sanction Explorer not

582
00:18:36,510 --> 00:18:41,100
from insane or what documents us helping

583
00:18:38,789 --> 00:18:45,120
you bypass and what's the biggest bypass

584
00:18:41,100 --> 00:18:46,678
on their detections hidden pets with

585
00:18:45,120 --> 00:18:49,139
them this is what it looks like it's

586
00:18:46,679 --> 00:18:51,059
different carbon blacks or partially to

587
00:18:49,140 --> 00:18:54,230
has the capability preparing pets with

588
00:18:51,059 --> 00:18:56,760
whom we've said sex two five two here

589
00:18:54,230 --> 00:18:59,190
and then and said carbon black or we've

590
00:18:56,760 --> 00:19:00,510
got as explode or launching SBC horse so

591
00:18:59,190 --> 00:19:01,860
that is just using the same stock

592
00:19:00,510 --> 00:19:04,830
overflow code and say that the allotted

593
00:19:01,860 --> 00:19:06,299
to carry this out but just proven that

594
00:19:04,830 --> 00:19:09,960
it was actually worked in buzz bypass

595
00:19:06,299 --> 00:19:11,700
things like carbon black and thick and

596
00:19:09,960 --> 00:19:15,210
parents whipping it can offset brought a

597
00:19:11,700 --> 00:19:17,460
blog post about six months ago and using

598
00:19:15,210 --> 00:19:19,200
adventuresome for Windows so the N event

599
00:19:17,460 --> 00:19:21,030
racing program booze event you've got a

600
00:19:19,200 --> 00:19:23,929
head or field which contains the process

601
00:19:21,030 --> 00:19:26,520
ID of the process is kept open event and

602
00:19:23,929 --> 00:19:29,039
say that you've then got the data of the

603
00:19:26,520 --> 00:19:30,990
event and you'll see here just post paid

604
00:19:29,039 --> 00:19:32,669
and process ID nine two three four and

605
00:19:30,990 --> 00:19:34,940
then in the header you've got process ID

606
00:19:32,669 --> 00:19:38,159
line 34 that's what it should look like

607
00:19:34,940 --> 00:19:40,919
but if you do Haven process button pets

608
00:19:38,159 --> 00:19:42,570
Bookman sorry you've got four six five -

609
00:19:40,919 --> 00:19:44,880
is the patent process here but it was

610
00:19:42,570 --> 00:19:46,710
actually launched by process ID 1934

611
00:19:44,880 --> 00:19:49,289
therefore you can say that's a detection

612
00:19:46,710 --> 00:19:54,360
you just identified hidden pets

613
00:19:49,289 --> 00:19:55,950
equipment they have process arguments

614
00:19:54,360 --> 00:19:57,110
within something clever and cobalt right

615
00:19:55,950 --> 00:20:00,639
official at the argue

616
00:19:57,110 --> 00:20:03,350
anybody familiar with us proper people

617
00:20:00,639 --> 00:20:04,668
basically every process how I should

618
00:20:03,350 --> 00:20:06,199
actually mentions work so I would forget

619
00:20:04,669 --> 00:20:07,519
the whole people like when you've done

620
00:20:06,200 --> 00:20:11,090
something but well world were kissed on

621
00:20:07,519 --> 00:20:12,889
the top and red team in the rh2 looking

622
00:20:11,090 --> 00:20:15,738
folks you go check it covers process

623
00:20:12,889 --> 00:20:18,860
arguments button as well but inside each

624
00:20:15,739 --> 00:20:20,149
process I has a pair a process

625
00:20:18,860 --> 00:20:22,939
environment block which tells you a lot

626
00:20:20,149 --> 00:20:24,738
about the process and as a structure

627
00:20:22,940 --> 00:20:27,169
much like less here and say that

628
00:20:24,739 --> 00:20:28,580
structure with RTL a user process

629
00:20:27,169 --> 00:20:30,409
parameters and then say that you got

630
00:20:28,580 --> 00:20:32,570
command-line arguments so you can

631
00:20:30,409 --> 00:20:34,159
actually go and look through the memory

632
00:20:32,570 --> 00:20:35,178
usage structure to parse that and

633
00:20:34,159 --> 00:20:37,580
identify where your command-line

634
00:20:35,179 --> 00:20:39,470
arguments are in your process this is

635
00:20:37,580 --> 00:20:41,869
important because we can use and abuse

636
00:20:39,470 --> 00:20:43,730
as as attackers so if we create a

637
00:20:41,869 --> 00:20:45,039
process suspended with fake arguments

638
00:20:43,730 --> 00:20:47,029
you can create wherever you want a

639
00:20:45,039 --> 00:20:50,480
powershell one-liner for example not

640
00:20:47,029 --> 00:20:52,129
endorse that necessarily but identify

641
00:20:50,480 --> 00:20:54,320
the pay abuse in NC query process

642
00:20:52,129 --> 00:20:56,119
information then we are going to parse

643
00:20:54,320 --> 00:20:57,799
the pet with the structures to find out

644
00:20:56,119 --> 00:20:59,059
where the command line structure is then

645
00:20:57,799 --> 00:21:01,190
going to overwrite the command line

646
00:20:59,059 --> 00:21:03,678
structure using great process memory

647
00:21:01,190 --> 00:21:06,230
then resume it or actually happens when

648
00:21:03,679 --> 00:21:07,580
that's happening as the windows and a

649
00:21:06,230 --> 00:21:09,320
lot of programs and side windows will

650
00:21:07,580 --> 00:21:10,668
actually take the event a snapshot there

651
00:21:09,320 --> 00:21:13,189
then add a payment which is being

652
00:21:10,669 --> 00:21:15,519
created so that's when it's suspended so

653
00:21:13,190 --> 00:21:17,509
if your appearance exists they're not

654
00:21:15,519 --> 00:21:20,239
not the bill arguments which is what

655
00:21:17,509 --> 00:21:22,129
it's going to look like min at once but

656
00:21:20,239 --> 00:21:23,509
there's multiple to like they'll to

657
00:21:22,129 --> 00:21:25,850
actually do this as I mentioned they

658
00:21:23,509 --> 00:21:27,649
argue and say COBOL straight one thing

659
00:21:25,850 --> 00:21:29,629
was a really cool tool and fuzzy sake

660
00:21:27,649 --> 00:21:31,039
put together I just wanted to give you

661
00:21:29,629 --> 00:21:32,539
some code you could actually go look at

662
00:21:31,039 --> 00:21:34,369
to see how this is bottled specifically

663
00:21:32,539 --> 00:21:35,809
but in this example we're going to use

664
00:21:34,369 --> 00:21:37,189
swamp thank the launch command prompt

665
00:21:35,809 --> 00:21:39,408
we're going to get the P arguments of

666
00:21:37,190 --> 00:21:42,169
echo hello sailor and real arguments of

667
00:21:39,409 --> 00:21:44,480
echo will be seized what we see here is

668
00:21:42,169 --> 00:21:45,710
actually as echoed will be safe because

669
00:21:44,480 --> 00:21:48,590
that's the view arguments not what we

670
00:21:45,710 --> 00:21:50,389
wanted it to do for us were carried out

671
00:21:48,590 --> 00:21:52,039
after we actually looked at process

672
00:21:50,389 --> 00:21:55,158
hacker and look at a command line access

673
00:21:52,039 --> 00:21:56,899
for little sailor so we can start to

674
00:21:55,159 --> 00:21:59,899
throw off the blue team with their own

675
00:21:56,899 --> 00:22:01,639
Toulon and if you think about how we're

676
00:21:59,899 --> 00:22:06,168
going to use that or you can use it for

677
00:22:01,639 --> 00:22:07,729
execution potentially bypassing and some

678
00:22:06,169 --> 00:22:09,950
detection you've got our owned execution

679
00:22:07,730 --> 00:22:10,880
or lateral movement probably obey throw

680
00:22:09,950 --> 00:22:12,890
one if you're going to move

681
00:22:10,880 --> 00:22:14,960
for one post-it make it look like you

682
00:22:12,890 --> 00:22:16,130
move to another then the blue team will

683
00:22:14,960 --> 00:22:17,420
be looking to this other horse while

684
00:22:16,130 --> 00:22:18,800
you're on vessels doing what you want

685
00:22:17,420 --> 00:22:21,580
there's quite a lot of good things you

686
00:22:18,800 --> 00:22:24,230
can do with that a nice lady please

687
00:22:21,580 --> 00:22:26,330
harden with you dr Ethier is not going

688
00:22:24,230 --> 00:22:27,320
to go away is honest estimate just seems

689
00:22:26,330 --> 00:22:29,210
to be getting stalled by more and more

690
00:22:27,320 --> 00:22:31,760
systems he's these as well but runs the

691
00:22:29,210 --> 00:22:33,290
system as well and so I have more power

692
00:22:31,760 --> 00:22:34,520
than you generally on on an endpoint

693
00:22:33,290 --> 00:22:36,550
when you get there so you're going to

694
00:22:34,520 --> 00:22:38,900
have to share the basketball with EBR

695
00:22:36,550 --> 00:22:40,250
but the talk about how you are and what

696
00:22:38,900 --> 00:22:41,810
it's actually do some of the some of

697
00:22:40,250 --> 00:22:43,790
that tackle methodologies to migrate

698
00:22:41,810 --> 00:22:45,500
processes but many reasons why we do

699
00:22:43,790 --> 00:22:47,180
that but I just want to cover over some

700
00:22:45,500 --> 00:22:48,590
of the API positivity do it and then

701
00:22:47,180 --> 00:22:50,930
we'll look at how EDR is going to defend

702
00:22:48,590 --> 00:22:52,399
against that paper thing so migration

703
00:22:50,930 --> 00:22:54,380
basics will take a handle and another

704
00:22:52,400 --> 00:22:55,760
process with an allocated memory and

705
00:22:54,380 --> 00:22:58,310
that's how the process uses virtual

706
00:22:55,760 --> 00:22:59,629
allocate Olalla text and I'm going to

707
00:22:58,310 --> 00:23:01,399
write our shell put then use invite

708
00:22:59,630 --> 00:23:02,750
process memory and then we're going to

709
00:23:01,400 --> 00:23:04,250
create a remote thread on that and

710
00:23:02,750 --> 00:23:06,020
that's going to kick off our M plan and

711
00:23:04,250 --> 00:23:11,150
save another process run another single

712
00:23:06,020 --> 00:23:12,620
thread so again point no-till inject all

713
00:23:11,150 --> 00:23:14,150
things it's got a lot of different API

714
00:23:12,620 --> 00:23:15,229
calls inside that it showed you how to

715
00:23:14,150 --> 00:23:17,390
build up some of the migration

716
00:23:15,230 --> 00:23:19,340
techniques and however there's many

717
00:23:17,390 --> 00:23:21,350
things you can actually use a migration

718
00:23:19,340 --> 00:23:23,870
techniques so create more threads one

719
00:23:21,350 --> 00:23:26,360
and in certain cases EDR has detected

720
00:23:23,870 --> 00:23:27,739
that but actually RTL create user thread

721
00:23:26,360 --> 00:23:30,290
is another the buzz exactly the same

722
00:23:27,740 --> 00:23:31,670
thing that wasn't detected by specific

723
00:23:30,290 --> 00:23:33,409
EDR so we were actually able to bypass

724
00:23:31,670 --> 00:23:38,060
some of the Ethier's just by using that

725
00:23:33,410 --> 00:23:40,310
API calls and how does this actually

726
00:23:38,060 --> 00:23:42,560
work and this is my diagram of us

727
00:23:40,310 --> 00:23:44,629
together not 100% accurate that's how I

728
00:23:42,560 --> 00:23:45,950
see the world so you basically got your

729
00:23:44,630 --> 00:23:47,750
process which is going to call gotcha

730
00:23:45,950 --> 00:23:49,250
lollicakes which is then and I'm gonna

731
00:23:47,750 --> 00:23:51,350
call said bubble you allocate partial

732
00:23:49,250 --> 00:23:52,970
memory and that's actually the call that

733
00:23:51,350 --> 00:23:56,990
makes this s calls over to the kernel

734
00:23:52,970 --> 00:23:58,400
that's where actually happens and EDRs

735
00:23:56,990 --> 00:23:59,840
gonna try to offset that and there's

736
00:23:58,400 --> 00:24:02,030
going to intercept a pipe in event

737
00:23:59,840 --> 00:24:03,679
called quicken and in short hookans a

738
00:24:02,030 --> 00:24:05,120
technique that allows you to alter or

739
00:24:03,680 --> 00:24:06,380
augment the behavior of an operating

740
00:24:05,120 --> 00:24:08,629
system if you think about old-school

741
00:24:06,380 --> 00:24:10,970
gaming when you could hook the game and

742
00:24:08,630 --> 00:24:13,160
give yourself anything apply for extra

743
00:24:10,970 --> 00:24:16,300
money this is exactly that and that's

744
00:24:13,160 --> 00:24:19,130
what EDR is doing so we just have a look

745
00:24:16,300 --> 00:24:20,419
at the same diagram again what you dr's

746
00:24:19,130 --> 00:24:23,180
going to do is it's going to inject the

747
00:24:20,420 --> 00:24:24,650
DLL into your process and then it's

748
00:24:23,180 --> 00:24:27,530
going to air hot patch

749
00:24:24,650 --> 00:24:28,730
with a jump when you call ZW allocate

750
00:24:27,530 --> 00:24:30,110
virtual memory it's actually going to

751
00:24:28,730 --> 00:24:32,059
call it's going to put a jump

752
00:24:30,110 --> 00:24:33,949
instruction there jump its own DLL and

753
00:24:32,059 --> 00:24:35,210
then it can monitor everything that's

754
00:24:33,950 --> 00:24:36,460
called and saved your process or

755
00:24:35,210 --> 00:24:41,420
monitoring down at what's going on

756
00:24:36,460 --> 00:24:44,390
determine if it's bad or not so that's

757
00:24:41,420 --> 00:24:45,800
all sounds about my typical me I'm not

758
00:24:44,390 --> 00:24:47,930
that great with Windows Intel's these

759
00:24:45,800 --> 00:24:48,889
days are better and other people in the

760
00:24:47,930 --> 00:24:51,140
office as well if you just let them

761
00:24:48,890 --> 00:24:52,100
breather but I just want to show it if

762
00:24:51,140 --> 00:24:54,380
you sure have easy and accessible

763
00:24:52,100 --> 00:24:57,199
actually as so this is before EDR unless

764
00:24:54,380 --> 00:24:58,760
is you can use a debugger and a lot of

765
00:24:57,200 --> 00:25:01,220
program that's going on the CPI policy

766
00:24:58,760 --> 00:25:02,629
can see what it looks like which is a

767
00:25:01,220 --> 00:25:04,130
quick death so we're going to say our

768
00:25:02,630 --> 00:25:08,750
breakpoint down the bottom we've already

769
00:25:04,130 --> 00:25:10,460
loaded our binary set a breakpoint on ZW

770
00:25:08,750 --> 00:25:13,520
hate thread X which is create more

771
00:25:10,460 --> 00:25:16,970
threads and if I call and you'll see

772
00:25:13,520 --> 00:25:17,920
move our 10 it's our CX that's what it

773
00:25:16,970 --> 00:25:21,530
should look like

774
00:25:17,920 --> 00:25:23,809
however if we call install silence on my

775
00:25:21,530 --> 00:25:26,928
on a VM and do exactly the same thing

776
00:25:23,809 --> 00:25:30,670
open up our injector program and put a

777
00:25:26,929 --> 00:25:32,720
breakpoint and jump to that break point

778
00:25:30,670 --> 00:25:36,500
will see that now we've actually got a

779
00:25:32,720 --> 00:25:37,250
jump to a from this side then they have

780
00:25:36,500 --> 00:25:39,710
64

781
00:25:37,250 --> 00:25:41,179
it'll just remember it's no basically

782
00:25:39,710 --> 00:25:43,880
this is what it's done it's hot patched

783
00:25:41,179 --> 00:25:47,929
your a process another jump in pity a

784
00:25:43,880 --> 00:25:49,400
DLL and it's not it's not all miss

785
00:25:47,929 --> 00:25:50,840
islands that works like that there's a

786
00:25:49,400 --> 00:25:52,040
lot of different in the arts and they

787
00:25:50,840 --> 00:25:54,500
all do very similar things

788
00:25:52,040 --> 00:25:56,750
this is an example a sensible one

789
00:25:54,500 --> 00:25:59,030
secondly our DLL and save your process

790
00:25:56,750 --> 00:26:01,010
if you actually again look at it with no

791
00:25:59,030 --> 00:26:02,809
got a jump instruction out said that

792
00:26:01,010 --> 00:26:04,160
will you create credits we should jump

793
00:26:02,809 --> 00:26:05,480
it into the a DLL so they can monitor

794
00:26:04,160 --> 00:26:07,700
what you're doing when you make those

795
00:26:05,480 --> 00:26:09,559
calls but the great thing from our

796
00:26:07,700 --> 00:26:11,929
perspective and bringing back the good

797
00:26:09,559 --> 00:26:14,559
things is actually we are in that

798
00:26:11,929 --> 00:26:17,780
process so our process they've given to

799
00:26:14,559 --> 00:26:20,960
edited our process and we can just could

800
00:26:17,780 --> 00:26:22,730
be Patchett and cut them back out so you

801
00:26:20,960 --> 00:26:24,950
can return to all that code to the old

802
00:26:22,730 --> 00:26:27,200
boots or got repack memory to I jump

803
00:26:24,950 --> 00:26:29,120
into the original good I'll pay them for

804
00:26:27,200 --> 00:26:30,920
address table two points the correct

805
00:26:29,120 --> 00:26:32,178
function create a stub to carry out the

806
00:26:30,920 --> 00:26:34,160
same system pause which means you never

807
00:26:32,179 --> 00:26:36,920
have to call those windows API key and

808
00:26:34,160 --> 00:26:39,190
calls anyway or use something like free

809
00:26:36,920 --> 00:26:42,039
library to remove interfere in the air

810
00:26:39,190 --> 00:26:45,309
the bypass on silence is already been

811
00:26:42,039 --> 00:26:47,309
covered before by whole Hawaiian you

812
00:26:45,309 --> 00:26:49,360
opens inaccurately

813
00:26:47,309 --> 00:26:50,590
here so you have a look at that as a

814
00:26:49,360 --> 00:26:52,178
really good one what we didn't want to

815
00:26:50,590 --> 00:26:53,649
just show you a demo but someone else is

816
00:26:52,179 --> 00:26:54,640
already been researching so some stuff

817
00:26:53,650 --> 00:26:56,679
we were actually working on yesterday

818
00:26:54,640 --> 00:26:58,240
there one feel about bugger mode it

819
00:26:56,679 --> 00:27:00,250
shows you a before and after

820
00:26:58,240 --> 00:27:02,590
so this is going to be we've already got

821
00:27:00,250 --> 00:27:04,750
empires import situ or want to my agree

822
00:27:02,590 --> 00:27:06,610
and Sentinel one is going to catch house

823
00:27:04,750 --> 00:27:11,289
migraine and then we're going to go cut

824
00:27:06,610 --> 00:27:13,030
it out this is us first and foremost and

825
00:27:11,289 --> 00:27:14,770
they get there's a bit slow but

826
00:27:13,030 --> 00:27:16,480
basically up here for anyone who's not

827
00:27:14,770 --> 00:27:18,010
use horsey to these are two and pounds

828
00:27:16,480 --> 00:27:21,159
of already got n say but I've already

829
00:27:18,010 --> 00:27:23,020
bypassed and EGR to get our Empire is

830
00:27:21,159 --> 00:27:25,780
running on a box sent no one with an

831
00:27:23,020 --> 00:27:31,480
island user and this one and say ped two

832
00:27:25,780 --> 00:27:32,770
three three six and we want to click to

833
00:27:31,480 --> 00:27:43,240
make it go faster but that's not going

834
00:27:32,770 --> 00:27:45,070
to work so and safe process Explorer now

835
00:27:43,240 --> 00:27:46,870
we can go get a pet we can go account

836
00:27:45,070 --> 00:27:49,840
and you can see that net SH is running

837
00:27:46,870 --> 00:27:52,719
and then Satan a sh will be able to see

838
00:27:49,840 --> 00:27:55,030
the center of one dll's so they focus it

839
00:27:52,720 --> 00:27:56,590
so now when we go back and we want to

840
00:27:55,030 --> 00:27:58,690
migrate and we want to use the same API

841
00:27:56,590 --> 00:28:01,059
calls what we should see a Centon or

842
00:27:58,690 --> 00:28:08,919
once you catch us and we'll be protected

843
00:28:01,059 --> 00:28:10,720
for it so an N or C to quite simply

844
00:28:08,919 --> 00:28:12,280
migrate will migrate you to you don't

845
00:28:10,720 --> 00:28:13,780
have to give any additional parameters

846
00:28:12,280 --> 00:28:18,460
it or migrate dealer migrate another

847
00:28:13,780 --> 00:28:19,750
nature thing by default and obviously

848
00:28:18,460 --> 00:28:21,610
all our commands are on their side

849
00:28:19,750 --> 00:28:23,500
everything else comes back on their safe

850
00:28:21,610 --> 00:28:25,090
so we'll see that the migrate command

851
00:28:23,500 --> 00:28:26,740
actually come back and after check sent

852
00:28:25,090 --> 00:28:28,330
and want a five-second deacon at the

853
00:28:26,740 --> 00:28:31,150
moment as well so it's just a hunk

854
00:28:28,330 --> 00:28:32,949
that's more so that's that it's know

855
00:28:31,150 --> 00:28:34,270
migrated we're actually going to get a

856
00:28:32,950 --> 00:28:36,460
shell at morning because Sentinel one

857
00:28:34,270 --> 00:28:38,020
can install them detection mode only not

858
00:28:36,460 --> 00:28:39,850
blocked in would which is also something

859
00:28:38,020 --> 00:28:43,210
we thickens I can't remember when we're

860
00:28:39,850 --> 00:28:45,129
doing red teens right team as the f you

861
00:28:43,210 --> 00:28:46,720
actually get something the blue team may

862
00:28:45,130 --> 00:28:48,760
be well on tell you about that point put

863
00:28:46,720 --> 00:28:51,220
everything blanc original something's

864
00:28:48,760 --> 00:28:52,210
going on so they can silently watch what

865
00:28:51,220 --> 00:28:54,430
we're doing

866
00:28:52,210 --> 00:28:56,980
anyway right now with no go at an

867
00:28:54,430 --> 00:28:58,420
additional hemp I'm n for jump back to

868
00:28:56,980 --> 00:28:59,890
here you like this either in the bottle

869
00:28:58,420 --> 00:29:02,980
we've had a threat detected form our

870
00:28:59,890 --> 00:29:05,680
migration and where my pecs are off so

871
00:29:02,980 --> 00:29:06,910
there's our threat within detective blue

872
00:29:05,680 --> 00:29:08,890
team and I want to is it won't be long

873
00:29:06,910 --> 00:29:10,330
before without a lot of IDI our products

874
00:29:08,890 --> 00:29:11,530
have actually got isolation people don't

875
00:29:10,330 --> 00:29:12,730
and things like that as well so as soon

876
00:29:11,530 --> 00:29:14,560
as you've done that you your own

877
00:29:12,730 --> 00:29:16,720
missions isolate the new at the network

878
00:29:14,560 --> 00:29:19,110
the next one hold flu have split up and

879
00:29:16,720 --> 00:29:21,370
it's a bit quicker but basically this is

880
00:29:19,110 --> 00:29:24,520
the same again we've got an endpoint

881
00:29:21,370 --> 00:29:27,610
here dirt running then head seven over

882
00:29:24,520 --> 00:29:28,840
five sex but that's time what we're

883
00:29:27,610 --> 00:29:31,659
going to do on the other side is we're

884
00:29:28,840 --> 00:29:32,740
going to hook it or unhook it sorry

885
00:29:31,660 --> 00:29:34,840
we're going to attach it to a debugger

886
00:29:32,740 --> 00:29:38,140
again just showing that is definitely an

887
00:29:34,840 --> 00:29:40,149
SH it has Sentinel one dll's in it we're

888
00:29:38,140 --> 00:29:41,740
going to open up a debugger were then

889
00:29:40,150 --> 00:29:43,960
going to stop it we're going to hit

890
00:29:41,740 --> 00:29:45,400
power function now we're going to modify

891
00:29:43,960 --> 00:29:49,150
it back to what the original code looked

892
00:29:45,400 --> 00:29:53,730
like says he's out what we're doing no

893
00:29:49,150 --> 00:29:53,730
we're just going to attach sin that Sh

894
00:29:54,030 --> 00:29:57,670
there's our great point record the jump

895
00:29:56,260 --> 00:30:04,390
instruction is going off somewhere else

896
00:29:57,670 --> 00:30:06,100
it should shouldn't be doing that sort

897
00:30:04,390 --> 00:30:10,300
of following a disassembler we're then

898
00:30:06,100 --> 00:30:12,129
also going to look out aid yeah though

899
00:30:10,300 --> 00:30:15,760
yours the Dom which gives you the base

900
00:30:12,130 --> 00:30:16,720
out that had that Mary address what

901
00:30:15,760 --> 00:30:19,390
we're going to do is we've already

902
00:30:16,720 --> 00:30:21,790
worked so exactly the way put we're

903
00:30:19,390 --> 00:30:23,920
going to put back in their PC is assess

904
00:30:21,790 --> 00:30:28,060
call specifically for that's personal

905
00:30:23,920 --> 00:30:30,460
windows to do the WX once we put that

906
00:30:28,060 --> 00:30:34,840
back end will be back to move ten RCX

907
00:30:30,460 --> 00:30:36,400
and movie X ABC that's exactly what it

908
00:30:34,840 --> 00:30:38,530
looked like before they had got it or

909
00:30:36,400 --> 00:30:44,320
about it hands on it and and modified it

910
00:30:38,530 --> 00:30:46,570
and made it and so now what we're going

911
00:30:44,320 --> 00:30:49,120
to do is we're going to detach from this

912
00:30:46,570 --> 00:30:51,580
we're going to prove that the Empire is

913
00:30:49,120 --> 00:30:53,590
still running and memory so it's not

914
00:30:51,580 --> 00:30:56,250
broken in any way and then we're going

915
00:30:53,590 --> 00:30:56,250
to migrate again

916
00:31:03,510 --> 00:31:07,810
that's all run a quick PWD just to print

917
00:31:06,280 --> 00:31:10,330
the working directory for our implant

918
00:31:07,810 --> 00:31:12,940
I'll come by down here and tell us the

919
00:31:10,330 --> 00:31:15,730
working directory we're then going to

920
00:31:12,940 --> 00:31:18,580
run migrate since just exactly synthesis

921
00:31:15,730 --> 00:31:20,850
last time we'll successfully migrated

922
00:31:18,580 --> 00:31:22,830
another shell or comment as it has no

923
00:31:20,850 --> 00:31:25,929
there it's here

924
00:31:22,830 --> 00:31:28,689
an open we jump back to our VM there is

925
00:31:25,930 --> 00:31:31,120
no detection because Sentinel one just

926
00:31:28,690 --> 00:31:32,410
doesn't see it hooks under the very

927
00:31:31,120 --> 00:31:34,149
start when you kicked off the protest

928
00:31:32,410 --> 00:31:36,130
but event continue to monitor that on an

929
00:31:34,150 --> 00:31:41,410
ongoing basis so they that in our

930
00:31:36,130 --> 00:31:44,770
process so you just undid it and I think

931
00:31:41,410 --> 00:31:46,810
yeah now so actually new something to a

932
00:31:44,770 --> 00:31:48,160
needy are also in do some cool things as

933
00:31:46,810 --> 00:31:49,720
well this is some of the problems we've

934
00:31:48,160 --> 00:31:52,600
come up against the way and we face them

935
00:31:49,720 --> 00:31:54,400
on a regular basis but some things when

936
00:31:52,600 --> 00:31:55,959
you're doing this is then your cat and

937
00:31:54,400 --> 00:31:57,310
mouse in terms of we want to forget then

938
00:31:55,960 --> 00:31:58,900
they start to look at least it stopped

939
00:31:57,310 --> 00:32:00,340
you've been able to pick it a lot of

940
00:31:58,900 --> 00:32:01,450
different reason what you can play in

941
00:32:00,340 --> 00:32:13,689
and welp in a couple of some additional

942
00:32:01,450 --> 00:32:16,810
ones and okay um series we've just been

943
00:32:13,690 --> 00:32:18,070
discussing has red teamers on our way to

944
00:32:16,810 --> 00:32:20,080
the objective the certain things that

945
00:32:18,070 --> 00:32:23,020
you have to do you have to migrate you

946
00:32:20,080 --> 00:32:24,460
have to persist on boxes and I mean we

947
00:32:23,020 --> 00:32:29,980
just socially just can't run again me

948
00:32:24,460 --> 00:32:31,840
the whole time so I so I just sort of

949
00:32:29,980 --> 00:32:34,990
seen EDR is getting pretty good at

950
00:32:31,840 --> 00:32:37,270
spotting what we're doing we've found as

951
00:32:34,990 --> 00:32:39,250
well that you know there's also seems to

952
00:32:37,270 --> 00:32:40,960
be a bit of behavior about the one of a

953
00:32:39,250 --> 00:32:43,480
better term behavioral signatures coming

954
00:32:40,960 --> 00:32:45,130
along now so you're kind of the example

955
00:32:43,480 --> 00:32:47,440
Doug gable the sort of the canonical

956
00:32:45,130 --> 00:32:49,360
migration of opening a handle for a

957
00:32:47,440 --> 00:32:52,450
process allocating memory coding your mo

958
00:32:49,360 --> 00:32:55,270
thread there's other examples too such

959
00:32:52,450 --> 00:32:57,070
as you know downloading a file or

960
00:32:55,270 --> 00:32:59,710
opening a connection out to the internet

961
00:32:57,070 --> 00:33:01,000
writing a file down and then executing

962
00:32:59,710 --> 00:33:01,840
code you probably going to get pinned as

963
00:33:01,000 --> 00:33:04,480
being a downloader

964
00:33:01,840 --> 00:33:07,659
other actions as well like opening our

965
00:33:04,480 --> 00:33:09,160
Pels sass and then and dumping all of

966
00:33:07,660 --> 00:33:12,400
your memory you're probably going to get

967
00:33:09,160 --> 00:33:16,029
pinned as mini cats so what essentially

968
00:33:12,400 --> 00:33:18,609
what can we do well is it there's a few

969
00:33:16,029 --> 00:33:20,710
things realistically and we can learn

970
00:33:18,609 --> 00:33:23,289
the detection mechanisms we can learn

971
00:33:20,710 --> 00:33:25,899
what's what's going on we can use the

972
00:33:23,289 --> 00:33:27,700
live off the land strategy and we can

973
00:33:25,899 --> 00:33:30,728
abuse built-in functionality

974
00:33:27,700 --> 00:33:33,099
now some complex engagements have done

975
00:33:30,729 --> 00:33:35,619
that I have been doing recently it

976
00:33:33,099 --> 00:33:38,139
required us to kind of look back and

977
00:33:35,619 --> 00:33:40,539
instead of look at some functionality in

978
00:33:38,139 --> 00:33:42,488
Windows has been around for a while and

979
00:33:40,539 --> 00:33:45,759
it's basically we've had to become best

980
00:33:42,489 --> 00:33:47,229
mates book calm because most of this

981
00:33:45,759 --> 00:33:49,419
functionality is essentially accessible

982
00:33:47,229 --> 00:33:51,609
viral so being that it's a 10 to 15

983
00:33:49,419 --> 00:33:53,919
minute talk or my section is at least no

984
00:33:51,609 --> 00:33:56,320
way in hell that I can possibly begin to

985
00:33:53,919 --> 00:33:58,899
describe what it is and James Paul Shaw

986
00:33:56,320 --> 00:34:00,999
did a talk at infiltrate it was last

987
00:33:58,899 --> 00:34:03,339
year common six minutes absolutely

988
00:34:00,999 --> 00:34:07,389
brilliant and probably the best kind of

989
00:34:03,339 --> 00:34:09,219
hope that I've seen you know that they

990
00:34:07,389 --> 00:34:11,139
don't yeah that that will get you into

991
00:34:09,219 --> 00:34:13,000
devices but there's two main takeaways

992
00:34:11,139 --> 00:34:16,029
that you can kind of hug them this is

993
00:34:13,000 --> 00:34:17,619
that comm is not a language it's a way

994
00:34:16,029 --> 00:34:19,389
for languages to essentially talk to

995
00:34:17,619 --> 00:34:21,460
each other you can build components and

996
00:34:19,389 --> 00:34:24,010
then one and in one language and then

997
00:34:21,460 --> 00:34:27,279
another language can consume also the

998
00:34:24,010 --> 00:34:31,119
way it's implemented it haven't uses the

999
00:34:27,279 --> 00:34:34,029
registry underneath so as we're kind of

1000
00:34:31,119 --> 00:34:36,849
going back to well we're on our red team

1001
00:34:34,029 --> 00:34:38,139
we've sort of landing somewhere now I'd

1002
00:34:36,849 --> 00:34:39,789
love to say that we had like this

1003
00:34:38,139 --> 00:34:40,839
massive stash your browser zero days and

1004
00:34:39,789 --> 00:34:41,740
that's what we're using to get in but

1005
00:34:40,839 --> 00:34:43,389
it's just not the truth

1006
00:34:41,739 --> 00:34:45,549
quite often we'll sort of end up in a

1007
00:34:43,389 --> 00:34:47,470
process that shouldn't be talking out to

1008
00:34:45,549 --> 00:34:49,719
the internet shouldn't be executing code

1009
00:34:47,469 --> 00:34:52,089
shouldn't be you know you shouldn't have

1010
00:34:49,719 --> 00:34:52,868
system management automation that loads

1011
00:34:52,089 --> 00:34:54,699
of different things that it just

1012
00:34:52,869 --> 00:34:56,559
shouldn't do so what we need to do that

1013
00:34:54,699 --> 00:34:59,649
is to move into a process is you know a

1014
00:34:56,559 --> 00:35:01,720
bit more doing look looks more like what

1015
00:34:59,650 --> 00:35:03,609
we're doing so you can try and hide what

1016
00:35:01,720 --> 00:35:05,558
we're doing I use a great candidate

1017
00:35:03,609 --> 00:35:07,839
because it's installed everywhere

1018
00:35:05,559 --> 00:35:10,599
that's quite often open and it's talking

1019
00:35:07,839 --> 00:35:13,119
out to the Internet I did a to the talk

1020
00:35:10,599 --> 00:35:15,569
last year it's still called common power

1021
00:35:13,119 --> 00:35:19,119
thief which I sort of the least it's all

1022
00:35:15,569 --> 00:35:20,589
how you post exploitation ID there's a

1023
00:35:19,119 --> 00:35:22,420
little section on there about actually

1024
00:35:20,589 --> 00:35:25,690
being able to migrate from one process

1025
00:35:22,420 --> 00:35:28,210
into entry without using any of the

1026
00:35:25,690 --> 00:35:29,740
traditional mechanisms now why this is

1027
00:35:28,210 --> 00:35:31,240
key because it very

1028
00:35:29,740 --> 00:35:32,770
the attribution between you won't have

1029
00:35:31,240 --> 00:35:35,169
this sort of suspicious parent-child

1030
00:35:32,770 --> 00:35:37,540
relationship ie you've landed in where

1031
00:35:35,170 --> 00:35:39,490
that's where executing code and then

1032
00:35:37,540 --> 00:35:40,630
it's suddenly called by or something

1033
00:35:39,490 --> 00:35:42,040
else you know you haven't sort of seen

1034
00:35:40,630 --> 00:35:46,600
it an open process you haven't seen

1035
00:35:42,040 --> 00:35:48,820
anything else and so how does this work

1036
00:35:46,600 --> 00:35:51,700
so the key to it is a concept known as

1037
00:35:48,820 --> 00:35:53,650
Junction folders this was a technique

1038
00:35:51,700 --> 00:35:55,720
that was leaked in the vault seven dumps

1039
00:35:53,650 --> 00:35:56,800
haven't been through it of course better

1040
00:35:55,720 --> 00:35:59,259
selling the Internet very very

1041
00:35:56,800 --> 00:36:01,660
interesting read it forms the basis of

1042
00:35:59,260 --> 00:36:04,330
sandbox escapers recent I think about a

1043
00:36:01,660 --> 00:36:06,250
week or so ago the sandbox escaped out

1044
00:36:04,330 --> 00:36:08,950
to be the needed integrity ie process

1045
00:36:06,250 --> 00:36:12,880
and essentially you can add some

1046
00:36:08,950 --> 00:36:14,740
registry keys and then you can build a

1047
00:36:12,880 --> 00:36:16,510
folder within a certain format that if

1048
00:36:14,740 --> 00:36:20,350
you navigate through it it's then going

1049
00:36:16,510 --> 00:36:23,350
to load a DLL of your choosing within

1050
00:36:20,350 --> 00:36:26,470
that process so is there a legitimate

1051
00:36:23,350 --> 00:36:28,810
use for this absolutely and it's a

1052
00:36:26,470 --> 00:36:31,390
little bit of hack but so if you sort of

1053
00:36:28,810 --> 00:36:32,799
look at the top left hand corner day

1054
00:36:31,390 --> 00:36:35,440
you'll see an icon that looks like a

1055
00:36:32,800 --> 00:36:35,740
control panel but it's actually not what

1056
00:36:35,440 --> 00:36:37,900
it is

1057
00:36:35,740 --> 00:36:40,149
it's a folder that's been named in the

1058
00:36:37,900 --> 00:36:43,960
particular format so if you sort of see

1059
00:36:40,150 --> 00:36:46,330
the middle red box there it says

1060
00:36:43,960 --> 00:36:48,880
something like file folder and then it's

1061
00:36:46,330 --> 00:36:50,350
got a dot a squiggly bracket and buried

1062
00:36:48,880 --> 00:36:52,300
and then a squiggly bracket on the end

1063
00:36:50,350 --> 00:36:53,980
now what that means is as soon as you

1064
00:36:52,300 --> 00:36:57,070
try it as soon as you navigate to that

1065
00:36:53,980 --> 00:36:59,050
and windows will actually then look up

1066
00:36:57,070 --> 00:37:01,359
that particular value in the registry

1067
00:36:59,050 --> 00:37:02,140
and which happens to be under eight hkey

1068
00:37:01,359 --> 00:37:04,359
classes root

1069
00:37:02,140 --> 00:37:05,980
clsid and then reviewing and then

1070
00:37:04,359 --> 00:37:07,869
however those registry keys is set up

1071
00:37:05,980 --> 00:37:10,660
it'll it'll then essentially load what's

1072
00:37:07,869 --> 00:37:13,030
there so in the case of control panel

1073
00:37:10,660 --> 00:37:14,920
it'll go and load shell 32 dll and then

1074
00:37:13,030 --> 00:37:17,320
internally how the registry keys out and

1075
00:37:14,920 --> 00:37:19,180
all the local control panel so can we

1076
00:37:17,320 --> 00:37:21,940
use this absolutely we can don't create

1077
00:37:19,180 --> 00:37:24,279
a run now in order to be able to create

1078
00:37:21,940 --> 00:37:26,230
a HQ passes route you have to be admin

1079
00:37:24,280 --> 00:37:27,730
but thankfully you don't have to create

1080
00:37:26,230 --> 00:37:29,230
them there we can also create them under

1081
00:37:27,730 --> 00:37:31,210
in a to hkey current user which is

1082
00:37:29,230 --> 00:37:33,369
essentially have access to so if we

1083
00:37:31,210 --> 00:37:33,970
wanted to build our own switch we've

1084
00:37:33,369 --> 00:37:35,050
done here

1085
00:37:33,970 --> 00:37:37,209
you'll sort of see in the first

1086
00:37:35,050 --> 00:37:40,900
screenshot he had default running off to

1087
00:37:37,210 --> 00:37:42,490
Val DLL which is evil file and now the

1088
00:37:40,900 --> 00:37:43,360
beauty of this is you don't have to call

1089
00:37:42,490 --> 00:37:45,370
it dot DL

1090
00:37:43,360 --> 00:37:46,690
Doxey better just load it whatever as

1091
00:37:45,370 --> 00:37:49,720
long as this kind of aden ends at heaven

1092
00:37:46,690 --> 00:37:52,000
whatever if he's going to get loaded the

1093
00:37:49,720 --> 00:37:53,410
second bit just shows some other values

1094
00:37:52,000 --> 00:37:57,940
that you have to set up they're there to

1095
00:37:53,410 --> 00:38:03,399
be recognized so how could we use it

1096
00:37:57,940 --> 00:38:06,520
well if we can get access to essentially

1097
00:38:03,400 --> 00:38:08,560
if there's an IE window that's probably

1098
00:38:06,520 --> 00:38:10,240
open we can get a reference dollar and

1099
00:38:08,560 --> 00:38:12,970
and if we can get a reference to that

1100
00:38:10,240 --> 00:38:16,479
will in chrome and we can then call this

1101
00:38:12,970 --> 00:38:19,000
method calls navigate to now don't

1102
00:38:16,480 --> 00:38:22,480
navigate to takes urls in this specific

1103
00:38:19,000 --> 00:38:24,310
format which is shell triple : squiggly

1104
00:38:22,480 --> 00:38:26,200
bracket the guild and then screw the

1105
00:38:24,310 --> 00:38:27,670
bracket at the end now if you trigger

1106
00:38:26,200 --> 00:38:29,529
the navigate on that on ie

1107
00:38:27,670 --> 00:38:31,600
II's going to read that registry key

1108
00:38:29,530 --> 00:38:32,230
pick up the DLL and then load it into

1109
00:38:31,600 --> 00:38:37,299
that process

1110
00:38:32,230 --> 00:38:39,970
oh so how do we get a reference to our

1111
00:38:37,300 --> 00:38:42,130
ie window that's open well thankfully

1112
00:38:39,970 --> 00:38:44,140
there's another common class which is

1113
00:38:42,130 --> 00:38:45,880
great one to cochon will show windows

1114
00:38:44,140 --> 00:38:48,700
and what this allows you to do is

1115
00:38:45,880 --> 00:38:50,200
enumerate all of the open ie and explore

1116
00:38:48,700 --> 00:38:53,620
and Windows Explorer windows that are

1117
00:38:50,200 --> 00:38:58,109
essentially currently open so there is

1118
00:38:53,620 --> 00:38:59,980
essentially activate that windows

1119
00:38:58,110 --> 00:39:02,410
property on that which is an Iranian

1120
00:38:59,980 --> 00:39:06,430
just those book or which one's the one

1121
00:39:02,410 --> 00:39:09,220
we want and then you will navigate so

1122
00:39:06,430 --> 00:39:11,440
has power shows dead here's an example

1123
00:39:09,220 --> 00:39:13,359
and and this is it essentially being

1124
00:39:11,440 --> 00:39:16,840
done in PowerShell what we first do is

1125
00:39:13,360 --> 00:39:18,490
build up a big you--it and that just

1126
00:39:16,840 --> 00:39:20,320
happens to e so the big word there is

1127
00:39:18,490 --> 00:39:22,089
actually a specific one for show windows

1128
00:39:20,320 --> 00:39:25,060
that's actually even certified out in

1129
00:39:22,090 --> 00:39:27,430
the registry and now we create a type

1130
00:39:25,060 --> 00:39:30,070
we've got a net from that you create an

1131
00:39:27,430 --> 00:39:31,390
instance of it and then there we just

1132
00:39:30,070 --> 00:39:33,250
picked the first one so we've basically

1133
00:39:31,390 --> 00:39:35,140
just in zero indexed so what this

1134
00:39:33,250 --> 00:39:37,240
essentially will rely on if there's an

1135
00:39:35,140 --> 00:39:39,339
least one Internet Explorer window

1136
00:39:37,240 --> 00:39:42,609
running at this point in time and if

1137
00:39:39,340 --> 00:39:44,470
you've got just a wouldn't you know it's

1138
00:39:42,610 --> 00:39:47,440
for a window it's this particular

1139
00:39:44,470 --> 00:39:49,959
example doesn't support every day - but

1140
00:39:47,440 --> 00:39:52,570
then what I've also done then is I've

1141
00:39:49,960 --> 00:39:54,190
built a a junction folder with that

1142
00:39:52,570 --> 00:39:56,020
gooood and so as soon as you hit that

1143
00:39:54,190 --> 00:39:57,160
you'd never get to known that that will

1144
00:39:56,020 --> 00:39:58,990
then go and

1145
00:39:57,160 --> 00:40:00,609
you know I eat will essentially know

1146
00:39:58,990 --> 00:40:02,049
that the alarm the process and now we

1147
00:40:00,610 --> 00:40:06,030
essentially have no relationship between

1148
00:40:02,050 --> 00:40:09,730
it because it's all gone through calm

1149
00:40:06,030 --> 00:40:11,620
so is that weaponize herbal you know in

1150
00:40:09,730 --> 00:40:13,810
a way that you might be able to land in

1151
00:40:11,620 --> 00:40:16,240
an environment absolutely and you can

1152
00:40:13,810 --> 00:40:19,210
actually do this in VBA the program with

1153
00:40:16,240 --> 00:40:22,479
VBA and is there isn't really any easy

1154
00:40:19,210 --> 00:40:25,210
way to do registry function yeah this

1155
00:40:22,480 --> 00:40:26,760
sort of leaves or anything else but

1156
00:40:25,210 --> 00:40:29,380
thankfully it has a concept of

1157
00:40:26,760 --> 00:40:31,440
platforming boat just like net dozen

1158
00:40:29,380 --> 00:40:33,430
that you can talk to and call

1159
00:40:31,440 --> 00:40:35,380
essentially the low-level wind produce

1160
00:40:33,430 --> 00:40:37,690
or api's so what I've done there is just

1161
00:40:35,380 --> 00:40:39,970
essentially defined function prototypes

1162
00:40:37,690 --> 00:40:42,250
which relate to the actual low-level

1163
00:40:39,970 --> 00:40:44,560
wind 32 api's which all of those

1164
00:40:42,250 --> 00:40:49,300
basically sort of you know you create

1165
00:40:44,560 --> 00:40:50,830
and set and registry keys and then from

1166
00:40:49,300 --> 00:40:53,020
there we've got some more VBA which just

1167
00:40:50,830 --> 00:40:57,569
goes through and essentially create sort

1168
00:40:53,020 --> 00:41:00,700
of the the registry keys like before and

1169
00:40:57,570 --> 00:41:03,130
then we have our final piece of the

1170
00:41:00,700 --> 00:41:05,649
puzzle which we create the shoulder the

1171
00:41:03,130 --> 00:41:09,250
application you then go through all of

1172
00:41:05,650 --> 00:41:11,710
the basically loop through the windows

1173
00:41:09,250 --> 00:41:15,090
look pretty anything that has a full

1174
00:41:11,710 --> 00:41:17,620
name of I explore and then based on the

1175
00:41:15,090 --> 00:41:19,990
clsid we had you build up the show

1176
00:41:17,620 --> 00:41:21,609
triple colon that's really thing and

1177
00:41:19,990 --> 00:41:27,790
then we call navigate and then that's

1178
00:41:21,610 --> 00:41:30,910
gonna launch out so do you have to write

1179
00:41:27,790 --> 00:41:32,259
just standards native C++ details now I

1180
00:41:30,910 --> 00:41:34,029
spend about seven years of my life for

1181
00:41:32,260 --> 00:41:36,120
any super spice and I'm I'm kind of over

1182
00:41:34,030 --> 00:41:40,000
now I'm like the first sort of c-sharp

1183
00:41:36,120 --> 00:41:41,830
book and thankfully yeah you don't have

1184
00:41:40,000 --> 00:41:44,620
to because also as well not everyone

1185
00:41:41,830 --> 00:41:47,529
knows C++ and it's quite a massive loan

1186
00:41:44,620 --> 00:41:51,339
you heard there is a function we've got

1187
00:41:47,530 --> 00:41:53,380
net called conquerable wrappers and now

1188
00:41:51,340 --> 00:41:55,270
these these are really really hardly

1189
00:41:53,380 --> 00:41:57,850
they allow you to essentially choose

1190
00:41:55,270 --> 00:41:59,440
well build a don't know don't go to the

1191
00:41:57,850 --> 00:42:02,920
way so consumed from a comma where

1192
00:41:59,440 --> 00:42:05,470
language and absolutely not enough time

1193
00:42:02,920 --> 00:42:07,780
to go through in more detail but there's

1194
00:42:05,470 --> 00:42:10,480
a really good link on the MSDN on how it

1195
00:42:07,780 --> 00:42:12,430
how it works but essentially you

1196
00:42:10,480 --> 00:42:15,190
Stan she ate your object like you would

1197
00:42:12,430 --> 00:42:18,040
any other column net run Constance

1198
00:42:15,190 --> 00:42:19,690
started with the others loaded it calls

1199
00:42:18,040 --> 00:42:21,600
the constructor and then you can start

1200
00:42:19,690 --> 00:42:24,610
interacting the essentially the object

1201
00:42:21,600 --> 00:42:25,779
so how do you build one all we really

1202
00:42:24,610 --> 00:42:28,360
need is basically just the dotnet

1203
00:42:25,780 --> 00:42:30,160
assembly with a class that implements an

1204
00:42:28,360 --> 00:42:32,370
interface and then we need to set up

1205
00:42:30,160 --> 00:42:35,680
some registry please an interface is a

1206
00:42:32,370 --> 00:42:38,200
kind of a very important concept within

1207
00:42:35,680 --> 00:42:40,240
calm essentially it sets up a binary

1208
00:42:38,200 --> 00:42:42,750
content contract between objects to sort

1209
00:42:40,240 --> 00:42:47,020
of say you know I support this function

1210
00:42:42,750 --> 00:42:49,720
yeah so the first thing we have to do is

1211
00:42:47,020 --> 00:42:50,770
we have to build up our interface and so

1212
00:42:49,720 --> 00:42:53,890
in this case here which is got a

1213
00:42:50,770 --> 00:42:55,060
namespace vegetable pretty much

1214
00:42:53,890 --> 00:42:56,680
everything you need will be in the

1215
00:42:55,060 --> 00:42:59,920
system that runtime got integral

1216
00:42:56,680 --> 00:43:00,640
services namespace and we just have to

1217
00:42:59,920 --> 00:43:03,670
hannett 8ao

1218
00:43:00,640 --> 00:43:05,589
our interface as con visible have to

1219
00:43:03,670 --> 00:43:08,170
give the gooood we just give it a ten

1220
00:43:05,590 --> 00:43:12,910
interface type in for this we just live

1221
00:43:08,170 --> 00:43:14,740
in two places just over those and then

1222
00:43:12,910 --> 00:43:16,950
and then we have our main class what's

1223
00:43:14,740 --> 00:43:19,270
kind of not shown on here because the

1224
00:43:16,950 --> 00:43:20,529
Constructors is too much code I would

1225
00:43:19,270 --> 00:43:22,330
actually have to provide a function

1226
00:43:20,530 --> 00:43:23,740
definition for that test method which is

1227
00:43:22,330 --> 00:43:26,009
defined in the interface if it didn't do

1228
00:43:23,740 --> 00:43:28,870
that then it would compile of the break

1229
00:43:26,010 --> 00:43:31,180
so what we're essentially doing here is

1230
00:43:28,870 --> 00:43:32,830
just using once again sorry we've got a

1231
00:43:31,180 --> 00:43:34,960
marketer's con visible true give it a

1232
00:43:32,830 --> 00:43:36,700
gooood we give it a program ID so if we

1233
00:43:34,960 --> 00:43:39,070
do want to create it we can create it by

1234
00:43:36,700 --> 00:43:42,609
that name rather than having to use or

1235
00:43:39,070 --> 00:43:44,860
using period and then from there yeah so

1236
00:43:42,610 --> 00:43:48,700
in the constructor when there's a deal

1237
00:43:44,860 --> 00:43:51,790
that loads we're going to have just you

1238
00:43:48,700 --> 00:43:53,169
know message officers say I uh I've also

1239
00:43:51,790 --> 00:43:58,150
got like I'm not slide in the shell code

1240
00:43:53,170 --> 00:44:00,340
and that'll run so so I did say it is

1241
00:43:58,150 --> 00:44:02,020
registry keys so if we didn't want to be

1242
00:44:00,340 --> 00:44:03,610
able to use it the previous technique of

1243
00:44:02,020 --> 00:44:04,960
actually the junction folders we've got

1244
00:44:03,610 --> 00:44:08,860
to go into census record what those

1245
00:44:04,960 --> 00:44:10,660
registry keys up so unfortunately the

1246
00:44:08,860 --> 00:44:12,610
next year I've got it kind of goes up

1247
00:44:10,660 --> 00:44:14,680
the process monitor pretty quickly on

1248
00:44:12,610 --> 00:44:18,610
but I'll just explain what I've done is

1249
00:44:14,680 --> 00:44:23,069
essentially I'm looking for and anything

1250
00:44:18,610 --> 00:44:24,510
that writes to a cheap prices route and

1251
00:44:23,070 --> 00:44:26,040
buyer in this village because msbuild

1252
00:44:24,510 --> 00:44:28,710
essentially was gonna go build and

1253
00:44:26,040 --> 00:44:31,770
register than everything else so here we

1254
00:44:28,710 --> 00:44:39,570
go so there's my filters essentially

1255
00:44:31,770 --> 00:44:41,280
clean the project we build it and then

1256
00:44:39,570 --> 00:44:42,540
from there I know so sorry is well yeah

1257
00:44:41,280 --> 00:44:46,290
if I didn't mentioned you have to run

1258
00:44:42,540 --> 00:44:47,850
Visual Studio has has a lot of roads to

1259
00:44:46,290 --> 00:44:48,740
be able to like take beta key classes

1260
00:44:47,850 --> 00:44:50,910
route

1261
00:44:48,740 --> 00:44:54,930
so there we can see it's kind of written

1262
00:44:50,910 --> 00:44:56,549
out I'll just you jump to impress a

1263
00:44:54,930 --> 00:45:05,629
small over there proto jump straight to

1264
00:44:56,550 --> 00:45:07,650
the register key that's been written and

1265
00:45:05,630 --> 00:45:09,330
so from there you can sort of see the

1266
00:45:07,650 --> 00:45:10,440
code base upon settlement here though

1267
00:45:09,330 --> 00:45:17,430
there's a whole bunch of other things

1268
00:45:10,440 --> 00:45:19,020
that it'll set up okay so then if we

1269
00:45:17,430 --> 00:45:21,089
want to use it in the the junction

1270
00:45:19,020 --> 00:45:22,259
folder scenario what we've got to do no

1271
00:45:21,090 --> 00:45:23,880
no how with a lot to be honest I mean

1272
00:45:22,260 --> 00:45:27,300
basically all we have to do is just

1273
00:45:23,880 --> 00:45:29,100
change H key actually parcels root to

1274
00:45:27,300 --> 00:45:31,530
just be actually part either and then we

1275
00:45:29,100 --> 00:45:33,990
can essentially put that into into the

1276
00:45:31,530 --> 00:45:37,680
registry very important points is that

1277
00:45:33,990 --> 00:45:40,290
John Windows 64 you have to import it

1278
00:45:37,680 --> 00:45:43,410
from the 64 bit process or use the

1279
00:45:40,290 --> 00:45:44,550
explicit 64 bit registry key otherwise

1280
00:45:43,410 --> 00:45:46,859
it's going to end up in there the

1281
00:45:44,550 --> 00:45:48,720
windows 32 node and it might appear

1282
00:45:46,860 --> 00:45:50,760
there then you use regedit and you waste

1283
00:45:48,720 --> 00:45:52,859
a lot of time looking for it there's a

1284
00:45:50,760 --> 00:45:56,580
good write-up just don't rest on that

1285
00:45:52,860 --> 00:45:59,850
link there and so now so in this example

1286
00:45:56,580 --> 00:46:03,590
I've tweaked my Explorer

1287
00:45:59,850 --> 00:46:03,589
internet explorer shortcuts slightly and

1288
00:46:05,300 --> 00:46:16,680
so this kind of demonstrates a bit of a

1289
00:46:07,890 --> 00:46:19,790
persistence mechanism just wait for this

1290
00:46:16,680 --> 00:46:19,790
one that surrogate explained

1291
00:46:25,440 --> 00:46:30,490
should be yeah yeah so there you go just

1292
00:46:28,300 --> 00:46:31,480
picked by E and that means that the dll

1293
00:46:30,490 --> 00:46:33,970
is basically though that this button

1294
00:46:31,480 --> 00:46:35,920
picked off and got a message box and

1295
00:46:33,970 --> 00:46:37,089
that's one of the other code I've done

1296
00:46:35,920 --> 00:46:46,720
if we're going to approach this Explorer

1297
00:46:37,090 --> 00:46:52,330
and then just view the PLL's we can

1298
00:46:46,720 --> 00:46:55,509
essentially see that's loaded okay so

1299
00:46:52,330 --> 00:46:58,720
remember this script from earlier you

1300
00:46:55,510 --> 00:47:00,940
know allows you to essentially launch a

1301
00:46:58,720 --> 00:47:02,049
DLL well we can tweak it slightly so

1302
00:47:00,940 --> 00:47:03,609
what happens if you've got an explorer

1303
00:47:02,050 --> 00:47:05,500
window open instead so in this case

1304
00:47:03,609 --> 00:47:08,350
we're just assuming a Windows Explorer

1305
00:47:05,500 --> 00:47:09,760
and in this case here what we're going

1306
00:47:08,350 --> 00:47:13,600
to do is just navigate to powershell

1307
00:47:09,760 --> 00:47:14,980
we'll see what happens so here we are in

1308
00:47:13,600 --> 00:47:17,259
link pad which is our favorite

1309
00:47:14,980 --> 00:47:18,580
development tool and all I've done is

1310
00:47:17,260 --> 00:47:21,250
just look well what I'll do is just

1311
00:47:18,580 --> 00:47:24,900
launch a PowerShell window I'll copy

1312
00:47:21,250 --> 00:47:27,160
that previous script paste it in and

1313
00:47:24,900 --> 00:47:29,560
then we launch another power shelving

1314
00:47:27,160 --> 00:47:32,319
there now the important point here is

1315
00:47:29,560 --> 00:47:33,790
the parent process so yeah it's actually

1316
00:47:32,320 --> 00:47:35,109
launched from the store rather than any

1317
00:47:33,790 --> 00:47:36,460
of the others so rather than having a

1318
00:47:35,109 --> 00:47:38,140
nest around the load code from Stack

1319
00:47:36,460 --> 00:47:39,430
Overflow or anything else then just call

1320
00:47:38,140 --> 00:47:42,940
a couple of common objects then BOOM

1321
00:47:39,430 --> 00:47:45,640
we've moved into another one and I've

1322
00:47:42,940 --> 00:47:47,680
sort of been having a look at this from

1323
00:47:45,640 --> 00:47:49,629
an etw perspective and I think it kind

1324
00:47:47,680 --> 00:47:52,029
of gets around the the previous

1325
00:47:49,630 --> 00:47:54,400
discussion part putting your concern

1326
00:47:52,030 --> 00:47:56,650
so if we look at this we can see the

1327
00:47:54,400 --> 00:47:58,480
circular one has essentially been

1328
00:47:56,650 --> 00:48:00,790
launched from Explorer rather than the

1329
00:47:58,480 --> 00:48:02,650
app and so you've broken the attribution

1330
00:48:00,790 --> 00:48:04,359
between processes now the beauty of that

1331
00:48:02,650 --> 00:48:09,900
also being on is you can pretty much

1332
00:48:04,359 --> 00:48:16,180
that's it understands that ie speed a

1333
00:48:09,900 --> 00:48:18,850
VBA all of them so cool so kind of a

1334
00:48:16,180 --> 00:48:20,440
summary on media and it's not a silver

1335
00:48:18,850 --> 00:48:22,750
bullet as you can see we've got our

1336
00:48:20,440 --> 00:48:25,090
bypasses but raise those like

1337
00:48:22,750 --> 00:48:26,410
something's rather than others it does

1338
00:48:25,090 --> 00:48:28,960
give you incredible visibility and

1339
00:48:26,410 --> 00:48:30,250
there's a very very good points and but

1340
00:48:28,960 --> 00:48:32,170
but as that everything has old

1341
00:48:30,250 --> 00:48:34,930
technology there's a complementary piece

1342
00:48:32,170 --> 00:48:39,070
and exactly you shouldn't eat so little

1343
00:48:34,930 --> 00:48:39,319
item and yeah we're all about sort of

1344
00:48:39,070 --> 00:48:41,270
pea

1345
00:48:39,320 --> 00:48:43,420
processing technology and also as you

1346
00:48:41,270 --> 00:48:51,230
can see - this is a constant hours race

1347
00:48:43,420 --> 00:48:53,420
so huge predictions yes I'm just some

1348
00:48:51,230 --> 00:48:55,190
future predictions as Rob said bit over

1349
00:48:53,420 --> 00:48:57,380
reliance on EDR it's not the Silver

1350
00:48:55,190 --> 00:48:58,550
Bullet customers have broken all their

1351
00:48:57,380 --> 00:49:00,050
attention focusing all their attention

1352
00:48:58,550 --> 00:49:02,510
on the endpoints and not actually the

1353
00:49:00,050 --> 00:49:04,010
critical data so probably going to see a

1354
00:49:02,510 --> 00:49:06,500
push from that perspective to make sure

1355
00:49:04,010 --> 00:49:08,540
that's all blogged and monitored a bit

1356
00:49:06,500 --> 00:49:09,170
of a move to zero trust networks and MFA

1357
00:49:08,540 --> 00:49:10,610
everywhere

1358
00:49:09,170 --> 00:49:12,920
that's kind of a bit of prediction

1359
00:49:10,610 --> 00:49:14,960
machine learning so a lot of investment

1360
00:49:12,920 --> 00:49:16,220
into people and process so if you can

1361
00:49:14,960 --> 00:49:17,960
understand you know your processes

1362
00:49:16,220 --> 00:49:19,310
internally and the attacker isn't going

1363
00:49:17,960 --> 00:49:21,260
to know those processes so anytime you

1364
00:49:19,310 --> 00:49:23,060
avoid those processes from a behavioral

1365
00:49:21,260 --> 00:49:24,850
perspective you can sort of see that and

1366
00:49:23,060 --> 00:49:26,660
talk catch people out quite early I

1367
00:49:24,850 --> 00:49:28,130
think it's going to be a bit of a shift

1368
00:49:26,660 --> 00:49:30,980
to see two frameworks using Warsaw

1369
00:49:28,130 --> 00:49:32,720
native C++ code MSF you know could even

1370
00:49:30,980 --> 00:49:34,390
be revived for red teaming and IJ is

1371
00:49:32,720 --> 00:49:37,700
doing quite a bit of work in that space

1372
00:49:34,390 --> 00:49:39,799
all standard Eve a B and E D our vendors

1373
00:49:37,700 --> 00:49:42,290
are starting to adopt a BIA and am si

1374
00:49:39,800 --> 00:49:43,850
not prediction but Windows seven is

1375
00:49:42,290 --> 00:49:46,759
going to be under life in January so

1376
00:49:43,850 --> 00:49:48,740
what sort of space Windows 10 has

1377
00:49:46,760 --> 00:49:50,270
removed net v2 so all the PowerShell

1378
00:49:48,740 --> 00:49:53,209
version two stuff is completely gone now

1379
00:49:50,270 --> 00:49:55,160
in the later versions in Windows 10 and

1380
00:49:53,210 --> 00:49:56,990
I think roll bass and all bins I think

1381
00:49:55,160 --> 00:49:58,670
again they're a finite list so from an

1382
00:49:56,990 --> 00:50:00,229
execution perspective people are sort of

1383
00:49:58,670 --> 00:50:02,150
there and away from them now because a

1384
00:50:00,230 --> 00:50:03,620
lot of IDI arts or vendors have got

1385
00:50:02,150 --> 00:50:05,510
those signatures in place who's slightly

1386
00:50:03,620 --> 00:50:07,220
better to move around them and use even

1387
00:50:05,510 --> 00:50:08,930
like an executable so it might seem

1388
00:50:07,220 --> 00:50:11,209
quite simple but actually that's not on

1389
00:50:08,930 --> 00:50:12,410
their list of known bad things so be not

1390
00:50:11,210 --> 00:50:15,110
on that list then you're probably going

1391
00:50:12,410 --> 00:50:16,640
to get through and that's they just

1392
00:50:15,110 --> 00:50:18,200
leave you with find a job you enjoy

1393
00:50:16,640 --> 00:50:20,299
doing and you'll never have to work a

1394
00:50:18,200 --> 00:50:22,069
day in your life thank you very much for

1395
00:50:20,300 --> 00:50:24,460
listening we doing some training at

1396
00:50:22,070 --> 00:50:24,460
silicon

