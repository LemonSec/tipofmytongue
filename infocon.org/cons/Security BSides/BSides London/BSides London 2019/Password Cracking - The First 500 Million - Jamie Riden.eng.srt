1
00:00:02,570 --> 00:00:09,990
right oh goodness this is come to be the

2
00:00:07,290 --> 00:00:13,620
biggest room I've ever talked to by a

3
00:00:09,990 --> 00:00:16,230
factor of three probably so I want to

4
00:00:13,620 --> 00:00:18,900
talk about faster cracking today not

5
00:00:16,230 --> 00:00:22,680
probably the minutia the thing that

6
00:00:18,900 --> 00:00:23,970
maybe some of the logistical issues the

7
00:00:22,680 --> 00:00:26,009
motivation is essentially I've got bored

8
00:00:23,970 --> 00:00:28,740
of remembering all the haschke options

9
00:00:26,010 --> 00:00:37,140
running out over in hurricane so we look

10
00:00:28,740 --> 00:00:40,800
for some efficiency savings so first off

11
00:00:37,140 --> 00:00:42,450
this is work I've done here or builds on

12
00:00:40,800 --> 00:00:47,788
top of hash cat

13
00:00:42,450 --> 00:00:49,410
Tommy Ripper in packet various word

14
00:00:47,789 --> 00:00:53,129
lists from little people expect lists

15
00:00:49,410 --> 00:00:56,250
cracks tension hashes org it uses

16
00:00:53,129 --> 00:00:57,750
graphic live reserved people of selling

17
00:00:56,250 --> 00:01:01,620
here because the size in the first place

18
00:00:57,750 --> 00:01:03,750
and the dataset reduced sort of a

19
00:01:01,620 --> 00:01:06,570
proving ground for all the stuff is from

20
00:01:03,750 --> 00:01:08,250
Troy Hemant so there's a whole lot of

21
00:01:06,570 --> 00:01:14,149
people to thank the work that's gone

22
00:01:08,250 --> 00:01:18,659
into here so I'm from NCC this isn't

23
00:01:14,150 --> 00:01:20,159
particularly official NCC work it's not

24
00:01:18,659 --> 00:01:21,869
also not that controversial and they

25
00:01:20,159 --> 00:01:22,799
probably don't disagree with it I don't

26
00:01:21,869 --> 00:01:27,270
think they've actually read it

27
00:01:22,799 --> 00:01:33,509
so there is an NCC logo there but please

28
00:01:27,270 --> 00:01:35,340
don't take this as official NCC stuff so

29
00:01:33,509 --> 00:01:37,439
the only interesting bits about me I've

30
00:01:35,340 --> 00:01:39,869
built improved and managed malteaser

31
00:01:37,439 --> 00:01:43,020
password cracking systems at tuk pentas

32
00:01:39,869 --> 00:01:45,290
companies I don't offer being cracked in

33
00:01:43,020 --> 00:01:51,298
people's passwords since about 2003

34
00:01:45,290 --> 00:01:52,619
which is blue teen stuff and yeah this

35
00:01:51,299 --> 00:01:58,799
there's obviously more but you don't

36
00:01:52,619 --> 00:02:00,270
each never asset so why we actually

37
00:01:58,799 --> 00:02:02,009
bother in this anyway

38
00:02:00,270 --> 00:02:05,719
some people tell you is the solve

39
00:02:02,009 --> 00:02:07,590
problem or were too dull or in problem

40
00:02:05,719 --> 00:02:10,560
before cities problem that comes up

41
00:02:07,590 --> 00:02:12,489
quite a lot in pen testing so if we look

42
00:02:10,560 --> 00:02:14,560
at the the naive approach

43
00:02:12,489 --> 00:02:17,470
a lot of people just find a favorite

44
00:02:14,560 --> 00:02:19,840
word list a favorite rule file and then

45
00:02:17,470 --> 00:02:22,180
you know just run that which isn't

46
00:02:19,840 --> 00:02:25,780
actually T bad rock-hewn and save you to

47
00:02:22,180 --> 00:02:32,349
dothe is pretty good but we can send you

48
00:02:25,780 --> 00:02:34,900
better so in terms of other things we do

49
00:02:32,349 --> 00:02:37,720
need to do this sort of as a pen tester

50
00:02:34,900 --> 00:02:40,769
you come across the movie 40 also common

51
00:02:37,720 --> 00:02:42,909
hash formats so it's not all just ntlm

52
00:02:40,769 --> 00:02:47,250
there's plenty of other things out there

53
00:02:42,909 --> 00:02:50,290
like Kerberos various things and so on

54
00:02:47,250 --> 00:02:54,159
we also need to do format conversions in

55
00:02:50,290 --> 00:02:55,150
quite a few places and obviously when

56
00:02:54,159 --> 00:02:57,189
you're in pen test you've got a hard

57
00:02:55,150 --> 00:03:00,579
time but you want to get everything as

58
00:02:57,189 --> 00:03:01,599
soon as you possibly can another

59
00:03:00,579 --> 00:03:04,930
approach I've heard from people is just

60
00:03:01,599 --> 00:03:08,888
to use a massive 80 gig word list which

61
00:03:04,930 --> 00:03:10,810
is fine if it's in frequency order if

62
00:03:08,889 --> 00:03:12,250
it's not then you sort of wasting their

63
00:03:10,810 --> 00:03:24,340
own time and it's better to use the time

64
00:03:12,250 --> 00:03:26,019
to do one so so from both the red and

65
00:03:24,340 --> 00:03:29,680
blue team point of view I want to talk

66
00:03:26,019 --> 00:03:32,560
about but adding good hashes why they're

67
00:03:29,680 --> 00:03:34,389
back and why the good but then go into

68
00:03:32,560 --> 00:03:36,760
the hash prep practice script I've

69
00:03:34,389 --> 00:03:40,299
written which is essentially just a big

70
00:03:36,760 --> 00:03:42,489
blue script offensive uses of password

71
00:03:40,299 --> 00:03:45,639
cracking and then defensive uses and

72
00:03:42,489 --> 00:03:49,620
then say as a test bed room to talk

73
00:03:45,639 --> 00:03:52,000
about the Troy hunt date set and

74
00:03:49,620 --> 00:03:54,370
obviously last week I realized I promise

75
00:03:52,000 --> 00:03:56,889
to do CTF as well which is not really a

76
00:03:54,370 --> 00:04:00,459
CTF in that sense but it's a challenge

77
00:03:56,889 --> 00:04:08,470
that people to do at home so that'd be

78
00:04:00,459 --> 00:04:12,400
the last bit so md5 why is it about hash

79
00:04:08,470 --> 00:04:14,019
for us we don't care about the various

80
00:04:12,400 --> 00:04:17,680
cryptographic flaws that is pointing the

81
00:04:14,019 --> 00:04:21,099
preimage stuff the only issue for us is

82
00:04:17,680 --> 00:04:25,020
it's very very quick to compute so I

83
00:04:21,099 --> 00:04:29,400
think I've been separating my 1080 Ti

84
00:04:25,020 --> 00:04:34,080
like guesses 35 billion tries again 75

85
00:04:29,400 --> 00:04:36,359
in a second which is just not acceptable

86
00:04:34,080 --> 00:04:38,639
I've written that there's no salt so you

87
00:04:36,360 --> 00:04:42,210
could compute lookup table of common you

88
00:04:38,639 --> 00:04:43,800
know questions announces but in practice

89
00:04:42,210 --> 00:04:46,198
in the lookup table will be 35 billion

90
00:04:43,800 --> 00:04:50,370
messes a second anyway have it this

91
00:04:46,199 --> 00:04:54,270
their theoretical floor ntlm is based on

92
00:04:50,370 --> 00:04:56,039
MD 4 and LMZ worse than those two so

93
00:04:54,270 --> 00:04:59,008
that's an example of hollow about hashes

94
00:04:56,039 --> 00:05:00,330
and before.she for most of us we can't

95
00:04:59,009 --> 00:05:01,830
really get rid of any of them for our

96
00:05:00,330 --> 00:05:04,310
environments they are going to be still

97
00:05:01,830 --> 00:05:04,310
there somewhere

98
00:05:05,750 --> 00:05:11,490
other examples of bad hashes people have

99
00:05:09,300 --> 00:05:15,529
tried doing various homebrew crypto

100
00:05:11,490 --> 00:05:21,900
seems to shore up their md5 hashes so

101
00:05:15,529 --> 00:05:23,669
adding secret data in which is it's a

102
00:05:21,900 --> 00:05:24,900
reasonably well codified approach you

103
00:05:23,669 --> 00:05:28,710
just have to make sure that the secret

104
00:05:24,900 --> 00:05:31,080
stays secret so you may find yourself

105
00:05:28,710 --> 00:05:34,799
attacking this lock up found one web app

106
00:05:31,080 --> 00:05:38,250
where essentially a random string fixed

107
00:05:34,800 --> 00:05:39,719
strings appended to the thing which

108
00:05:38,250 --> 00:05:42,779
means you can just write one genre for

109
00:05:39,719 --> 00:05:46,819
all and it will crack it for you so

110
00:05:42,779 --> 00:05:46,819
please just use a good library function

111
00:05:48,139 --> 00:05:55,979
Blowfish or argon - a good examples or

112
00:05:51,659 --> 00:05:58,379
pbkdf2 if you haven't got any others hb7

113
00:05:55,979 --> 00:06:01,560
implement it even so you can generate a

114
00:05:58,379 --> 00:06:05,159
nice strong hash that essentially it

115
00:06:01,560 --> 00:06:07,940
needs to be just a bit quicker than

116
00:06:05,159 --> 00:06:11,279
annoying for the user's computer once

117
00:06:07,940 --> 00:06:13,949
sort of maybe one ten to the second and

118
00:06:11,279 --> 00:06:20,360
then this already caused the attacker

119
00:06:13,949 --> 00:06:22,589
problems because there's a random salt

120
00:06:20,360 --> 00:06:25,500
involved in the process which is stored

121
00:06:22,589 --> 00:06:27,419
along with it it becomes infeasible to

122
00:06:25,500 --> 00:06:28,979
create a lookup table of you know all

123
00:06:27,419 --> 00:06:35,190
the common questions and answers you've

124
00:06:28,979 --> 00:06:37,680
got so some point I've got or word of

125
00:06:35,190 --> 00:06:39,270
typing out commands by hand over and

126
00:06:37,680 --> 00:06:41,830
over and over

127
00:06:39,270 --> 00:06:44,979
so I built the script which essentially

128
00:06:41,830 --> 00:06:46,900
tries to getcha guess the hash type for

129
00:06:44,980 --> 00:06:51,040
you so you don't need to import dollar

130
00:06:46,900 --> 00:06:54,760
to a means or anything that if it's a

131
00:06:51,040 --> 00:06:57,570
more complex thing like a zip file it

132
00:06:54,760 --> 00:07:00,420
will try D codify the Jumeirah script

133
00:06:57,570 --> 00:07:05,500
which will come out with your hashtag

134
00:07:00,420 --> 00:07:07,690
each attack and it'll also based on what

135
00:07:05,500 --> 00:07:12,490
it thinks is speed at the hashes it'll

136
00:07:07,690 --> 00:07:15,850
try some dictionaries and rules and also

137
00:07:12,490 --> 00:07:19,660
the the mapping of regular expressions

138
00:07:15,850 --> 00:07:22,240
to hash types and hash types to what

139
00:07:19,660 --> 00:07:24,430
parameters during it ways is stored as

140
00:07:22,240 --> 00:07:26,830
data files so it's fairly easy to tweak

141
00:07:24,430 --> 00:07:31,000
if when you're very unlikely to have

142
00:07:26,830 --> 00:07:39,960
same exact same cars that I've got and

143
00:07:31,000 --> 00:07:39,960
that's currently GPL on github so sorry

144
00:07:45,990 --> 00:07:53,440
the motivation behind writing this

145
00:07:48,460 --> 00:07:57,280
script was I was bored of writing the

146
00:07:53,440 --> 00:08:00,210
same commands over and over again so I

147
00:07:57,280 --> 00:08:02,469
wanted to create a system which would

148
00:08:00,210 --> 00:08:05,250
essentially take all the thinking out

149
00:08:02,470 --> 00:08:08,110
the initial attacking of these hashes so

150
00:08:05,250 --> 00:08:11,020
I don't have to remember how to unpack

151
00:08:08,110 --> 00:08:14,110
some file format but after roughly how

152
00:08:11,020 --> 00:08:15,669
fast it is I can just essentially feed

153
00:08:14,110 --> 00:08:18,990
it to this and see how it gets on start

154
00:08:15,670 --> 00:08:22,210
with and then maybe to queue from there

155
00:08:18,990 --> 00:08:24,010
another important thing to do is to

156
00:08:22,210 --> 00:08:27,190
actually have a codified technique so I

157
00:08:24,010 --> 00:08:32,380
can see if it's good or not and then if

158
00:08:27,190 --> 00:08:34,840
you think about improvement so the graph

159
00:08:32,380 --> 00:08:37,059
on the right this is not using this

160
00:08:34,840 --> 00:08:38,979
system it's easy this from our work

161
00:08:37,059 --> 00:08:42,549
system how it does show us the

162
00:08:38,979 --> 00:08:44,950
improvement in the ratio of password

163
00:08:42,549 --> 00:08:46,719
repacking which is obviously what we

164
00:08:44,950 --> 00:08:48,700
honesty is pregnant right in a stroke

165
00:08:46,720 --> 00:08:50,680
but if it's not you know if the app puts

166
00:08:48,700 --> 00:08:52,860
rubbish then you know it's not used to

167
00:08:50,680 --> 00:08:52,859
anyone

168
00:08:53,280 --> 00:08:56,680
so the other reason I wrote this six of

169
00:08:55,300 --> 00:08:59,199
them often stuck at machine room side I

170
00:08:56,680 --> 00:09:02,469
have access to our crack and cluster so

171
00:08:59,200 --> 00:09:04,570
to get on my laptop and also being in

172
00:09:02,470 --> 00:09:06,550
seniors lot enabled me to have some free

173
00:09:04,570 --> 00:09:17,500
time to write this norm right waiting

174
00:09:06,550 --> 00:09:19,180
for my necess scan fish so the the way

175
00:09:17,500 --> 00:09:21,940
hash crack works is it has five main

176
00:09:19,180 --> 00:09:25,150
attack boats you have a hybrid so

177
00:09:21,940 --> 00:09:27,730
dictionary rules approach there's a mode

178
00:09:25,150 --> 00:09:30,160
a1 which is the cross product ie tries

179
00:09:27,730 --> 00:09:33,160
every word that lists a with every bit

180
00:09:30,160 --> 00:09:38,800
of speed and you've got various mask

181
00:09:33,160 --> 00:09:41,680
mode so above all with this we want to

182
00:09:38,800 --> 00:09:44,439
keep the gpgpu busy if you just feed it

183
00:09:41,680 --> 00:09:46,660
a few ANTM hashes you just feed it a

184
00:09:44,440 --> 00:09:48,730
standard dictionary it weren't really

185
00:09:46,660 --> 00:09:51,750
utilize the whole GPU so you need to

186
00:09:48,730 --> 00:09:55,980
give it more things to try either with

187
00:09:51,750 --> 00:09:55,980
dictionary and mask or dictionary rules

188
00:09:56,280 --> 00:10:02,829
we also want it to start finding

189
00:09:58,840 --> 00:10:06,670
passwords yeah quickly they need to be

190
00:10:02,830 --> 00:10:09,130
at the front so studying like NTM it'll

191
00:10:06,670 --> 00:10:11,709
run really quickly with the incremental

192
00:10:09,130 --> 00:10:14,230
load a3 which basically tries all

193
00:10:11,710 --> 00:10:16,900
possible combinations of masks up to

194
00:10:14,230 --> 00:10:19,090
whatever you want so we want to find

195
00:10:16,900 --> 00:10:23,100
passwords quickly rather than at the end

196
00:10:19,090 --> 00:10:25,930
of the process the other thing which is

197
00:10:23,100 --> 00:10:27,880
more of a design consideration then that

198
00:10:25,930 --> 00:10:30,040
it is now maybe the steep reuse

199
00:10:27,880 --> 00:10:33,010
obviously if you crack any other master

200
00:10:30,040 --> 00:10:34,780
presence you know the corresponding ntlm

201
00:10:33,010 --> 00:10:35,980
is going to be that same word with a

202
00:10:34,780 --> 00:10:39,610
different capitalization

203
00:10:35,980 --> 00:10:42,520
I thought LM is dead but they probably

204
00:10:39,610 --> 00:10:43,690
found another domain name on it so that

205
00:10:42,520 --> 00:10:52,120
functional answer is not quite obsolete

206
00:10:43,690 --> 00:10:55,570
yet so I think it supports maybe 3040

207
00:10:52,120 --> 00:10:58,780
hash types but we'll take PWM file so we

208
00:10:55,570 --> 00:11:02,560
all know unload visit this example see

209
00:10:58,780 --> 00:11:03,100
that PWM file it will first try the LM

210
00:11:02,560 --> 00:11:05,138
ashes

211
00:11:03,100 --> 00:11:07,420
they're probably all blank these days

212
00:11:05,139 --> 00:11:10,359
and if there are only when we used that

213
00:11:07,420 --> 00:11:11,618
as a crib using it rule which

214
00:11:10,359 --> 00:11:15,939
essentially gives you all case

215
00:11:11,619 --> 00:11:18,730
permutations of that word it'll then try

216
00:11:15,939 --> 00:11:22,719
the incremental math mode up to eight

217
00:11:18,730 --> 00:11:25,869
characters which I think allows a pro

218
00:11:22,720 --> 00:11:32,410
lower digit to heart then lower in digit

219
00:11:25,869 --> 00:11:34,299
and then special on the end movie it

220
00:11:32,410 --> 00:11:36,160
will also run a few other modes and then

221
00:11:34,299 --> 00:11:38,169
it will fall back to the basic extended

222
00:11:36,160 --> 00:11:39,669
whatever dictionary you think we can get

223
00:11:38,169 --> 00:11:44,559
away with in a few hours together with

224
00:11:39,669 --> 00:11:51,009
some rules so I seemed like a reasonable

225
00:11:44,559 --> 00:11:52,480
approach for ntlm then you come across

226
00:11:51,009 --> 00:11:54,910
something like bcrypt which is them

227
00:11:52,480 --> 00:11:59,649
basically the exact exact opposite so

228
00:11:54,910 --> 00:12:01,899
it's salted which means that the runtime

229
00:11:59,649 --> 00:12:04,209
scales with number of hashes ntlm can

230
00:12:01,899 --> 00:12:06,189
crack fifty five hundred five million

231
00:12:04,209 --> 00:12:09,699
and it won't make much difference to the

232
00:12:06,189 --> 00:12:14,589
runtime decrypt to hashes takes types of

233
00:12:09,699 --> 00:12:15,849
thousands of on hash so you can only

234
00:12:14,589 --> 00:12:17,769
really afford some fairly small

235
00:12:15,850 --> 00:12:20,309
dictionary files in this case you don't

236
00:12:17,769 --> 00:12:23,309
need a new rules or anything masks to

237
00:12:20,309 --> 00:12:25,689
keep up speed in general so you can just

238
00:12:23,309 --> 00:12:31,749
feed it but you're sort of topping on to

239
00:12:25,689 --> 00:12:35,259
what k5 or something like that so that's

240
00:12:31,749 --> 00:12:36,759
essentially what the script does it

241
00:12:35,259 --> 00:12:41,139
stops me from having to think about all

242
00:12:36,759 --> 00:12:42,939
these issues every time home and it

243
00:12:41,139 --> 00:12:50,499
tells you what it's doing if you need to

244
00:12:42,939 --> 00:12:52,929
tweak it for your own purposes during a

245
00:12:50,499 --> 00:12:54,910
red team engagement we get hashes to

246
00:12:52,929 --> 00:12:58,959
remember of places if you can calculate

247
00:12:54,910 --> 00:13:02,439
running responder or dumping NTDs util

248
00:12:58,959 --> 00:13:05,410
stuff directly you can get bodes you've

249
00:13:02,439 --> 00:13:08,139
got Kerberos the internal monologue the

250
00:13:05,410 --> 00:13:13,379
nicking devices SMB your eye leaks

251
00:13:08,139 --> 00:13:16,749
office docks zip files all these things

252
00:13:13,379 --> 00:13:17,950
at least either how our hashes or imply

253
00:13:16,749 --> 00:13:23,290
hashes in the case of

254
00:13:17,950 --> 00:13:24,400
stocks and during a red team of C never

255
00:13:23,290 --> 00:13:25,569
know what's going to be useful so you

256
00:13:24,400 --> 00:13:30,130
might want to start cracking things

257
00:13:25,570 --> 00:13:32,080
pursuance you of them so the nice thing

258
00:13:30,130 --> 00:13:35,650
about password cracking is once you

259
00:13:32,080 --> 00:13:36,990
abstract it extracted that hash for

260
00:13:35,650 --> 00:13:42,060
target isn't know you're cracking it

261
00:13:36,990 --> 00:13:45,190
obviously you can replace some ashes but

262
00:13:42,060 --> 00:13:46,479
it's always nice to password if only

263
00:13:45,190 --> 00:13:53,020
because then you can retry that password

264
00:13:46,480 --> 00:13:53,980
on other things and so it's just nice to

265
00:13:53,020 --> 00:13:55,420
have something kicked off in the

266
00:13:53,980 --> 00:13:58,350
background or you can then go and think

267
00:13:55,420 --> 00:14:00,579
about other things that you need to do

268
00:13:58,350 --> 00:14:02,790
for the blue team I would say don't

269
00:14:00,580 --> 00:14:06,100
share passwords across security domains

270
00:14:02,790 --> 00:14:08,199
for example I saw a printer and a route

271
00:14:06,100 --> 00:14:10,330
to sharing same SMB password and

272
00:14:08,200 --> 00:14:12,970
obviously printers are not hard and in

273
00:14:10,330 --> 00:14:16,870
the same areas are and it would very

274
00:14:12,970 --> 00:14:22,810
easy to give it up as a red team that's

275
00:14:16,870 --> 00:14:24,340
exactly what each one juice to it so

276
00:14:22,810 --> 00:14:27,219
good you can see that reason they've got

277
00:14:24,340 --> 00:14:31,300
the this is sort of relative hash speeds

278
00:14:27,220 --> 00:14:32,770
so the T on the Left LM and ntlm those

279
00:14:31,300 --> 00:14:34,920
are both unsalted so they're actually

280
00:14:32,770 --> 00:14:37,810
worse than that looks

281
00:14:34,920 --> 00:14:41,530
sorry it's a log graph otherwise it

282
00:14:37,810 --> 00:14:45,640
would be you wouldn't be able to read it

283
00:14:41,530 --> 00:14:50,199
properly so ntlm is very fast and

284
00:14:45,640 --> 00:14:52,210
unsalted LM do we all know so LM is

285
00:14:50,200 --> 00:14:54,730
broken into two hours which makes it

286
00:14:52,210 --> 00:14:56,980
worse unless capitalized which makes it

287
00:14:54,730 --> 00:14:59,890
we're still so it's really terrible a

288
00:14:56,980 --> 00:15:03,640
schism from there you have sort of

289
00:14:59,890 --> 00:15:04,199
domain cache credentials Ln V one and so

290
00:15:03,640 --> 00:15:08,110
on

291
00:15:04,200 --> 00:15:10,870
so the point is obviously the first

292
00:15:08,110 --> 00:15:13,510
batch of loading is up to TCC to a much

293
00:15:10,870 --> 00:15:16,030
more likely to all will have us you know

294
00:15:13,510 --> 00:15:18,730
whatever hash you get is in a represent

295
00:15:16,030 --> 00:15:21,819
the Windows domain password so in your

296
00:15:18,730 --> 00:15:26,410
interest to be cracking ntlm rather than

297
00:15:21,820 --> 00:15:30,180
DCC - I've put office 2007 and 2013 on

298
00:15:26,410 --> 00:15:30,180
for comparison as well

299
00:15:30,540 --> 00:15:38,250
let's say obviously is better for you to

300
00:15:32,310 --> 00:15:40,770
be attacking past the hashes so things

301
00:15:38,250 --> 00:15:44,420
that I've written is to support now I've

302
00:15:40,770 --> 00:15:47,040
used personally you can just read it

303
00:15:44,420 --> 00:15:50,990
something you've gathered through an TDC

304
00:15:47,040 --> 00:15:54,300
tool and an i FM so that standard thing

305
00:15:50,990 --> 00:15:55,860
if you've installed it properly it will

306
00:15:54,300 --> 00:15:58,680
run in packets secret start to unpack it

307
00:15:55,860 --> 00:16:01,770
for you and then it'll do its work Sam

308
00:15:58,680 --> 00:16:05,579
responded up DB runs a secret like query

309
00:16:01,770 --> 00:16:08,310
to get the antenna master SAP salaries

310
00:16:05,580 --> 00:16:10,410
direct so that's X it would run the

311
00:16:08,310 --> 00:16:12,239
script from John the Ripper which will

312
00:16:10,410 --> 00:16:15,719
again give you a hash that hash captain

313
00:16:12,240 --> 00:16:20,070
work with so this is not really original

314
00:16:15,720 --> 00:16:21,240
work just there's a blue script so

315
00:16:20,070 --> 00:16:25,950
because I've got bored of typing up

316
00:16:21,240 --> 00:16:27,450
these things so that's a slightly trim

317
00:16:25,950 --> 00:16:31,380
down examples of running it against the

318
00:16:27,450 --> 00:16:33,600
docx file from the test suite as you can

319
00:16:31,380 --> 00:16:36,420
see is from Python to you officer john

320
00:16:33,600 --> 00:16:37,530
de pie it's got the hash out as you can

321
00:16:36,420 --> 00:16:40,410
see at the bottom

322
00:16:37,530 --> 00:16:45,329
it runs hash cat using the appropriate

323
00:16:40,410 --> 00:16:47,459
mode picks it reasonably here because

324
00:16:45,330 --> 00:16:48,990
there's a test suite on I've put the

325
00:16:47,460 --> 00:16:52,110
answer straight in the form of hash cap

326
00:16:48,990 --> 00:16:56,490
dot txt in real life obviously have to

327
00:16:52,110 --> 00:17:01,800
wait for it a bit so essentially is just

328
00:16:56,490 --> 00:17:06,089
meant to take time and it needs to take

329
00:17:01,800 --> 00:17:11,909
the so you take the hard thinking work

330
00:17:06,089 --> 00:17:14,790
out of doing this stuff for sort of the

331
00:17:11,910 --> 00:17:16,610
blue team people you can also do this

332
00:17:14,790 --> 00:17:19,530
and this is what I was doing in

333
00:17:16,609 --> 00:17:22,530
2003-2004 if you crack your own divine

334
00:17:19,530 --> 00:17:25,889
hashes you can see essentially what the

335
00:17:22,530 --> 00:17:28,889
really weak ones are so it's unlikely

336
00:17:25,890 --> 00:17:31,200
that anyone would be able to obtain your

337
00:17:28,890 --> 00:17:33,480
any of them hashes directly but if

338
00:17:31,200 --> 00:17:35,960
people have got pastors like you know

339
00:17:33,480 --> 00:17:38,240
passed with one welcome one two three

340
00:17:35,960 --> 00:17:40,890
that's probably guessable

341
00:17:38,240 --> 00:17:43,230
within the parameters you count like a

342
00:17:40,890 --> 00:17:46,420
policy

343
00:17:43,230 --> 00:17:48,280
so it's very much worth doing this just

344
00:17:46,420 --> 00:17:49,570
because you crack something in this

345
00:17:48,280 --> 00:17:54,100
offline sack doesn't necessarily mean

346
00:17:49,570 --> 00:17:55,360
it's an awful password but you may want

347
00:17:54,100 --> 00:17:59,199
to look at the data it's a whole lot in

348
00:17:55,360 --> 00:18:03,790
considering consider sort of updating

349
00:17:59,200 --> 00:18:05,440
your pastor policies unfortunately

350
00:18:03,790 --> 00:18:08,320
default wind is possible season very

351
00:18:05,440 --> 00:18:11,440
flexible some of people trying to add a

352
00:18:08,320 --> 00:18:13,929
filter to stop you know things like

353
00:18:11,440 --> 00:18:15,670
welcome welcome one bang which

354
00:18:13,930 --> 00:18:25,270
technically the policy policy if it

355
00:18:15,670 --> 00:18:26,650
still doesn't look good password so I

356
00:18:25,270 --> 00:18:28,150
can leave the team point of view you

357
00:18:26,650 --> 00:18:31,270
wanna stop people choosing really view

358
00:18:28,150 --> 00:18:32,950
passwords passwords that are widely

359
00:18:31,270 --> 00:18:35,440
compromised if they are tied to the same

360
00:18:32,950 --> 00:18:40,390
account certainly and things based on

361
00:18:35,440 --> 00:18:41,850
dictionary words so the essential idea

362
00:18:40,390 --> 00:18:44,410
is if you can stop people choosing a

363
00:18:41,850 --> 00:18:47,139
small group of very big passwords and

364
00:18:44,410 --> 00:18:49,600
you have a decent account like how or

365
00:18:47,140 --> 00:18:51,880
rate limiting policy of some kind then

366
00:18:49,600 --> 00:18:54,280
you should basically be okay and it'll

367
00:18:51,880 --> 00:18:57,900
you know it'll greatly reduce the users

368
00:18:54,280 --> 00:18:57,899
of people guessing correct credentials

369
00:18:58,080 --> 00:19:01,540
it's like cracking your own pastors is

370
00:19:00,220 --> 00:19:09,100
great way to find the really low-hanging

371
00:19:01,540 --> 00:19:13,570
fruit here so I graft lengths of the the

372
00:19:09,100 --> 00:19:17,169
500-year hazard you got from try and you

373
00:19:13,570 --> 00:19:19,780
can see Shannon entropy isn't isn't a

374
00:19:17,170 --> 00:19:22,210
wonderful way of estimating how good a

375
00:19:19,780 --> 00:19:27,010
password is but now it's relatively easy

376
00:19:22,210 --> 00:19:30,250
to compute you can see there's a fairly

377
00:19:27,010 --> 00:19:32,800
good sort of dome shape graph modulo

378
00:19:30,250 --> 00:19:34,510
some conservation where as the password

379
00:19:32,800 --> 00:19:36,430
length tends to you have a bit of a

380
00:19:34,510 --> 00:19:38,290
longer tail on right which is just

381
00:19:36,430 --> 00:19:40,600
people here years long passwords using

382
00:19:38,290 --> 00:19:46,090
less complex passwords but that's fine

383
00:19:40,600 --> 00:19:47,980
that's why longer passwords exist so for

384
00:19:46,090 --> 00:19:49,659
example if you want to stop people

385
00:19:47,980 --> 00:19:51,640
choosing

386
00:19:49,660 --> 00:19:54,640
passwords that have been introns breach

387
00:19:51,640 --> 00:19:54,860
itself you can send him the I think

388
00:19:54,640 --> 00:19:57,410
that's

389
00:19:54,860 --> 00:20:00,790
show on Ash and it'll literally tell you

390
00:19:57,410 --> 00:20:04,400
whether it's people from us or not

391
00:20:00,790 --> 00:20:06,350
for those worried about privacy there is

392
00:20:04,400 --> 00:20:08,059
a more honest way of querying that

393
00:20:06,350 --> 00:20:13,790
apparently which I have not needed

394
00:20:08,059 --> 00:20:16,700
looking to yet again for the blue team

395
00:20:13,790 --> 00:20:18,950
when you're cracking these if you get

396
00:20:16,700 --> 00:20:21,049
hash cat and use the status outputs say

397
00:20:18,950 --> 00:20:24,820
every ten seconds or so you can actually

398
00:20:21,049 --> 00:20:27,049
see you whether so that x-axis is time

399
00:20:24,820 --> 00:20:30,200
and the y-axis is how many passes

400
00:20:27,049 --> 00:20:31,970
through covered so you can see whether

401
00:20:30,200 --> 00:20:33,830
essentially your audio passwords they

402
00:20:31,970 --> 00:20:36,350
left that graph which means they're

403
00:20:33,830 --> 00:20:39,220
generally weak or if they sort of

404
00:20:36,350 --> 00:20:44,270
shunted to the right which means

405
00:20:39,220 --> 00:20:46,610
essentially that the they're not very

406
00:20:44,270 --> 00:20:48,260
easily guessable that are guessable but

407
00:20:46,610 --> 00:20:50,320
at least you made the attacker work for

408
00:20:48,260 --> 00:20:50,320
it

409
00:20:51,730 --> 00:21:00,620
so for anyone who wants to get into this

410
00:20:56,090 --> 00:21:02,928
pending on budget you can start with an

411
00:21:00,620 --> 00:21:04,879
entry level that laptops to fine

412
00:21:02,929 --> 00:21:07,580
CPUs still do fine for a lot of things

413
00:21:04,880 --> 00:21:09,620
and if you are using a laptop you very

414
00:21:07,580 --> 00:21:11,870
careful about overheating it so make

415
00:21:09,620 --> 00:21:15,428
sure it's got enough airflow and please

416
00:21:11,870 --> 00:21:18,020
do not disable the hardware monitoring a

417
00:21:15,429 --> 00:21:19,460
homework modest tower which is

418
00:21:18,020 --> 00:21:24,710
essentially at 1080 TI with some

419
00:21:19,460 --> 00:21:26,110
scaffolding you can have a homebrew

420
00:21:24,710 --> 00:21:28,370
cases multi colors anything like that

421
00:21:26,110 --> 00:21:30,229
you can buy one off the shelf for about

422
00:21:28,370 --> 00:21:33,889
twenty five thousand US dollars which is

423
00:21:30,230 --> 00:21:37,520
very less you can use hash table lists a

424
00:21:33,890 --> 00:21:39,140
clustered very small unis the only one I

425
00:21:37,520 --> 00:21:42,290
haven't played with really is a double

426
00:21:39,140 --> 00:21:43,760
yes because the if essentially if I

427
00:21:42,290 --> 00:21:45,950
forget to turn something off fast on the

428
00:21:43,760 --> 00:21:49,250
able of twenty K at in the month and I'm

429
00:21:45,950 --> 00:21:56,630
not professor so I'd rather spend a

430
00:21:49,250 --> 00:21:58,700
couple of K on hardware so that's the

431
00:21:56,630 --> 00:21:59,660
tower I've got a cooling pad for my

432
00:21:58,700 --> 00:22:02,720
laptop because it's slightly

433
00:21:59,660 --> 00:22:06,260
temperamental Sakuni pad cost about a 10

434
00:22:02,720 --> 00:22:06,710
or an Amazon so it's not not

435
00:22:06,260 --> 00:22:08,100
particularly

436
00:22:06,710 --> 00:22:13,860
stretch

437
00:22:08,100 --> 00:22:16,020
and yeah as I say on on these two things

438
00:22:13,860 --> 00:22:19,550
I got through I was sort of 500 million

439
00:22:16,020 --> 00:22:22,139
passes in a couple of weeks so it's a

440
00:22:19,550 --> 00:22:25,169
straight this is in reach of everyone to

441
00:22:22,140 --> 00:22:29,580
try this stuff and the ntlm is really

442
00:22:25,170 --> 00:22:33,560
not a good hash so if you want to

443
00:22:29,580 --> 00:22:35,810
replicate this stuff and I say I'm

444
00:22:33,560 --> 00:22:38,179
essentially just easing this is a

445
00:22:35,810 --> 00:22:40,889
validation to the approach they've taken

446
00:22:38,180 --> 00:22:47,280
so you can download the passage from

447
00:22:40,890 --> 00:22:49,440
Detroit on site get them unzip them you

448
00:22:47,280 --> 00:22:54,330
need to from this particular phone in

449
00:22:49,440 --> 00:22:56,670
check off the frequency vector you will

450
00:22:54,330 --> 00:23:01,560
also need to put a small tank into the

451
00:22:56,670 --> 00:23:05,130
codes so the bitmap Maps max parameter

452
00:23:01,560 --> 00:23:10,110
is fine for basically every base that

453
00:23:05,130 --> 00:23:15,720
I've looked at apart from this one it's

454
00:23:10,110 --> 00:23:17,729
to do is sort of what's due and you need

455
00:23:15,720 --> 00:23:19,350
to set high enough cash cat5 will warn

456
00:23:17,730 --> 00:23:21,570
if is too low and it'll basically say

457
00:23:19,350 --> 00:23:23,219
you set it higher and just you keep

458
00:23:21,570 --> 00:23:26,220
setting a higher until as I K and then

459
00:23:23,220 --> 00:23:32,850
it runs at a reasonable speed otherwise

460
00:23:26,220 --> 00:23:37,230
it will be very slow also the whole base

461
00:23:32,850 --> 00:23:39,030
that doesn't fit in even 1080 Ti so what

462
00:23:37,230 --> 00:23:44,040
I had to do is split it into chunks of

463
00:23:39,030 --> 00:23:45,420
500 sorry 50 million lines if you are

464
00:23:44,040 --> 00:23:49,050
going to do this make sure you put L

465
00:23:45,420 --> 00:23:53,580
which is 50 million lines not n which is

466
00:23:49,050 --> 00:23:58,200
50 million jokes even next for doesn't

467
00:23:53,580 --> 00:24:03,030
like 15 million files so I think I had

468
00:23:58,200 --> 00:24:07,550
about Jimmy 1011 files which then got

469
00:24:03,030 --> 00:24:11,940
essentially run a particular approach

470
00:24:07,550 --> 00:24:14,190
against each chunk - - remove takes your

471
00:24:11,940 --> 00:24:18,330
answers out so basically your answers

472
00:24:14,190 --> 00:24:20,310
accumulating try one pot the need at the

473
00:24:18,330 --> 00:24:22,290
end you stitch too far back together so

474
00:24:20,310 --> 00:24:25,500
actually summer and then repeat with the

475
00:24:22,290 --> 00:24:28,050
next phase the other thing I found I

476
00:24:25,500 --> 00:24:29,670
needed to send the output once of which

477
00:24:28,050 --> 00:24:32,669
happy is working I need to send the

478
00:24:29,670 --> 00:24:35,550
output to dead null because literally

479
00:24:32,670 --> 00:24:43,290
writing out the fan passes to the

480
00:24:35,550 --> 00:24:46,379
terminal was loving these damn so we've

481
00:24:43,290 --> 00:24:51,300
got two dictionary rules available to

482
00:24:46,380 --> 00:24:53,160
play with incremental attack masks then

483
00:24:51,300 --> 00:24:56,669
you've got a six a seven which is sort

484
00:24:53,160 --> 00:25:02,430
of wordless in masks and then the sort

485
00:24:56,670 --> 00:25:05,630
of cross product to Dickens so probably

486
00:25:02,430 --> 00:25:10,500
just explain the other ones are obvious

487
00:25:05,630 --> 00:25:12,840
but the a one and masks a one literally

488
00:25:10,500 --> 00:25:15,150
tries every word from the left

489
00:25:12,840 --> 00:25:19,340
dictionary next to every regional right

490
00:25:15,150 --> 00:25:24,150
extra so that folded squares or you get

491
00:25:19,340 --> 00:25:26,370
from maths in Texas slightly complex but

492
00:25:24,150 --> 00:25:29,850
basically quest might use any uppercase

493
00:25:26,370 --> 00:25:33,709
fish my allies any lowercase and it'll

494
00:25:29,850 --> 00:25:33,709
iterate you all the possible values that

495
00:25:34,490 --> 00:25:41,490
just skip over this briefly because it's

496
00:25:37,050 --> 00:25:43,230
not directly relevant as well as doing

497
00:25:41,490 --> 00:25:44,970
that you can also feed stuff in standard

498
00:25:43,230 --> 00:25:50,340
if you need to as you've run out of

499
00:25:44,970 --> 00:25:55,800
other IDs so in terms of my script those

500
00:25:50,340 --> 00:25:58,040
same attacks are expressed like this and

501
00:25:55,800 --> 00:26:01,980
then this is actually what I got out of

502
00:25:58,040 --> 00:26:06,000
sorry hun data so default run ways I

503
00:26:01,980 --> 00:26:10,110
think top 258 million and some rules go

504
00:26:06,000 --> 00:26:10,530
up literary 250 million then incremental

505
00:26:10,110 --> 00:26:13,580
attacks

506
00:26:10,530 --> 00:26:16,680
it's a listicle reach compilation online

507
00:26:13,580 --> 00:26:21,030
and a slightly more aggressive mask

508
00:26:16,680 --> 00:26:25,020
approach versus two which had more but

509
00:26:21,030 --> 00:26:30,270
more special characters the top two

510
00:26:25,020 --> 00:26:32,450
Billy this was quite good the next one

511
00:26:30,270 --> 00:26:33,770
250 million in last four

512
00:26:32,450 --> 00:26:36,440
I essentially computed the common

513
00:26:33,770 --> 00:26:38,930
suffixes and it's just taking a load of

514
00:26:36,440 --> 00:26:41,570
common words back in common suffixes on

515
00:26:38,930 --> 00:26:42,980
them and seeing what you get and the

516
00:26:41,570 --> 00:26:46,760
answer is that's quite a good approach

517
00:26:42,980 --> 00:26:50,090
as well ice to try some other

518
00:26:46,760 --> 00:26:52,340
dictionaries with suffixes and then best

519
00:26:50,090 --> 00:26:53,750
of all probably because essentially how

520
00:26:52,340 --> 00:26:58,250
she's always been attacking the same

521
00:26:53,750 --> 00:27:00,260
list and I am aware of that hash it's

522
00:26:58,250 --> 00:27:04,760
all got under that sort of trying to

523
00:27:00,260 --> 00:27:06,530
follow million and if you have those

524
00:27:04,760 --> 00:27:08,510
follows up that is over five from the

525
00:27:06,530 --> 00:27:11,810
meet so like I say that's that's two

526
00:27:08,510 --> 00:27:14,150
weeks work on a 1080 TOI you could

527
00:27:11,810 --> 00:27:19,010
probably do in three weeks on the laptop

528
00:27:14,150 --> 00:27:21,700
these days so is there any practical use

529
00:27:19,010 --> 00:27:25,940
to us other than validating the approach

530
00:27:21,700 --> 00:27:26,960
probably not directly so if you're going

531
00:27:25,940 --> 00:27:29,180
to use it as dictionary

532
00:27:26,960 --> 00:27:32,930
you should prune out the really obvious

533
00:27:29,180 --> 00:27:36,020
words because you probably want to be

534
00:27:32,930 --> 00:27:37,870
searching that enviable approach so

535
00:27:36,020 --> 00:27:43,460
there we go

536
00:27:37,870 --> 00:27:45,889
it needs more work as is everything only

537
00:27:43,460 --> 00:27:48,590
so far john the ripper sports bitlocker

538
00:27:45,890 --> 00:27:55,040
OpenCL for example that's not in attica

539
00:27:48,590 --> 00:27:57,080
yet so dispute in i did promise the CCF

540
00:27:55,040 --> 00:27:59,240
i saw last week in my submissions so

541
00:27:57,080 --> 00:28:00,740
there is one if you want to have a go

542
00:27:59,240 --> 00:28:04,640
there's various I think in five or six

543
00:28:00,740 --> 00:28:08,530
formats crack as fun as you can starting

544
00:28:04,640 --> 00:28:11,120
with the easiest and sends me and I will

545
00:28:08,530 --> 00:28:13,670
do something for the winner he'll be

546
00:28:11,120 --> 00:28:21,469
nice to see the solution on your blog if

547
00:28:13,670 --> 00:28:24,340
you'd like to take answers so on the web

548
00:28:21,470 --> 00:28:26,390
right I'll skip feelers on that website

549
00:28:24,340 --> 00:28:29,090
there is a bunch of references there

550
00:28:26,390 --> 00:28:32,660
because they got too big anyway so I'm

551
00:28:29,090 --> 00:28:34,840
just get to questions with that up on it

552
00:28:32,660 --> 00:28:34,840
there

553
00:28:39,140 --> 00:28:42,219
[Music]

554
00:28:47,580 --> 00:28:54,250
yeah yeah some of them sorry the

555
00:28:52,300 --> 00:28:56,889
question was how well does regular

556
00:28:54,250 --> 00:29:01,300
expression work for matching on hash

557
00:28:56,890 --> 00:29:05,410
types the answer is anywhere between

558
00:29:01,300 --> 00:29:07,000
very well and and not also ntlm and md5

559
00:29:05,410 --> 00:29:09,640
look exactly the same there was no way

560
00:29:07,000 --> 00:29:11,710
to tell me about where is obviously

561
00:29:09,640 --> 00:29:17,380
things like dollar one dollar two dollar

562
00:29:11,710 --> 00:29:18,820
five very easy so the regular

563
00:29:17,380 --> 00:29:22,450
expressions I've got have been arrived

564
00:29:18,820 --> 00:29:34,000
at empirically so yes they work well

565
00:29:22,450 --> 00:29:37,380
enough for me no you can just tell it

566
00:29:34,000 --> 00:29:37,380
what it is for you if you know better

567
00:29:40,060 --> 00:29:43,260
[Applause]

