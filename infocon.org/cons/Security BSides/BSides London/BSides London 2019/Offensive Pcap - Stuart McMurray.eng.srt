1
00:00:04,250 --> 00:00:09,389
thank you for coming back at hub time

2
00:00:06,839 --> 00:00:10,950
after break I appreciate it

3
00:00:09,389 --> 00:00:14,190
I'm Stewart McMurray I'm a red teamer

4
00:00:10,950 --> 00:00:16,108
over a tire net really for us that means

5
00:00:14,190 --> 00:00:19,880
I'm a general UNIX nerd Swiss Army knife

6
00:00:16,109 --> 00:00:22,619
type twitter handle Twitter QR code

7
00:00:19,880 --> 00:00:24,419
makes it a bit easier and before I talk

8
00:00:22,619 --> 00:00:26,460
about pcap I'd like to point out I'm not

9
00:00:24,420 --> 00:00:30,000
at all affiliated with nmap Wireshark

10
00:00:26,460 --> 00:00:32,430
TCP dump group anybody else I very much

11
00:00:30,000 --> 00:00:34,079
enjoy the projects they have but I'm not

12
00:00:32,430 --> 00:00:39,329
a developer or contribute or anything of

13
00:00:34,079 --> 00:00:42,000
that sort standard disclaimer that this

14
00:00:39,329 --> 00:00:43,860
is anything I say is not necessarily the

15
00:00:42,000 --> 00:00:46,829
use of my company also please don't sue

16
00:00:43,860 --> 00:00:48,840
me or anybody if you do things that you

17
00:00:46,829 --> 00:00:54,360
oughtn't and if you do please don't tell

18
00:00:48,840 --> 00:00:56,399
them you know me right so the genesis of

19
00:00:54,360 --> 00:00:58,410
this talk was a cyber defense

20
00:00:56,399 --> 00:01:00,210
competition that some college kids did

21
00:00:58,410 --> 00:01:02,279
where they have a college kids defending

22
00:01:00,210 --> 00:01:04,920
the network and local professionals on

23
00:01:02,280 --> 00:01:06,869
defending the network and they they we

24
00:01:04,920 --> 00:01:09,479
had a team that found that any network

25
00:01:06,869 --> 00:01:11,880
comms we're bad yeah it's a range right

26
00:01:09,479 --> 00:01:14,880
a test range a competition range so

27
00:01:11,880 --> 00:01:16,679
pretty much any any tcp comes that we're

28
00:01:14,880 --> 00:01:17,880
not their services they were meant to

29
00:01:16,680 --> 00:01:19,799
keep up or bad so it's like like a fine

30
00:01:17,880 --> 00:01:22,020
i'll use UDP and they figured out that

31
00:01:19,799 --> 00:01:23,790
hey anything UDP it all is bad I was

32
00:01:22,020 --> 00:01:25,110
like okay fine I'll use a raw socket and

33
00:01:23,790 --> 00:01:26,729
I figured out anything a raw socket is

34
00:01:25,110 --> 00:01:29,400
bad still show up in net tat net stuff

35
00:01:26,729 --> 00:01:31,439
and they just netstat a loop right so I

36
00:01:29,400 --> 00:01:32,930
got me a tepee cap and it turns out you

37
00:01:31,439 --> 00:01:36,179
can do a lot of cool stuff at the pcap

38
00:01:32,930 --> 00:01:38,729
so it's a Limpy cap it's just a library

39
00:01:36,180 --> 00:01:40,710
that wraps on Linux it wraps packet

40
00:01:38,729 --> 00:01:44,039
sockets it has a whole bunch of

41
00:01:40,710 --> 00:01:45,539
different underlying technologies on 140

42
00:01:44,040 --> 00:01:47,670
ish different targets you can build it

43
00:01:45,540 --> 00:01:50,790
for it's a sea library quick question

44
00:01:47,670 --> 00:01:53,880
how many no see oh wow okay

45
00:01:50,790 --> 00:01:55,439
awesome we'll see some C code for those

46
00:01:53,880 --> 00:01:57,270
who don't there's FM 5 for a lot of

47
00:01:55,439 --> 00:02:02,820
languages so a lot of rappers Python is

48
00:01:57,270 --> 00:02:06,360
pretty good once KP it's a few few URLs

49
00:02:02,820 --> 00:02:08,250
there TCP dump org TCP dump uses pcap

50
00:02:06,360 --> 00:02:10,619
heavily and writes the peek at their

51
00:02:08,250 --> 00:02:13,020
documentation is excellent and map of

52
00:02:10,619 --> 00:02:14,790
course is we all know

53
00:02:13,020 --> 00:02:17,610
nmap but they write the windows driver

54
00:02:14,790 --> 00:02:21,090
and pcap sort of the successor to wind

55
00:02:17,610 --> 00:02:23,370
pcap there's a go library for the go

56
00:02:21,090 --> 00:02:25,710
programmers that is quite good it's a it

57
00:02:23,370 --> 00:02:28,080
will require C go so if you don't like C

58
00:02:25,710 --> 00:02:30,120
go please write and C and finally escape

59
00:02:28,080 --> 00:02:32,670
E is very helpful for doing anything

60
00:02:30,120 --> 00:02:35,460
pcap related it's it's a Python shell

61
00:02:32,670 --> 00:02:40,079
plus it's a Python shell but a lot of

62
00:02:35,460 --> 00:02:43,590
syntax sugar for anything injection so

63
00:02:40,080 --> 00:02:46,350
this is a general generalized very

64
00:02:43,590 --> 00:02:50,940
notional layout of what pcap is in

65
00:02:46,350 --> 00:02:52,859
relation to a notional UNIX box cursor

66
00:02:50,940 --> 00:02:54,329
awesome so you are here you we have a

67
00:02:52,860 --> 00:02:56,760
NIC we have a connection to the network

68
00:02:54,330 --> 00:02:59,100
and we have some application using lid

69
00:02:56,760 --> 00:03:00,600
pcap that essentially does the read and

70
00:02:59,100 --> 00:03:02,850
write or send and receive on layer 2

71
00:03:00,600 --> 00:03:03,840
frames so it'll notionally and this is

72
00:03:02,850 --> 00:03:05,880
of course not how it works under the

73
00:03:03,840 --> 00:03:07,350
hood but it'll send frames from your

74
00:03:05,880 --> 00:03:09,210
application to the necking out to the

75
00:03:07,350 --> 00:03:11,640
network and then you get frames from the

76
00:03:09,210 --> 00:03:12,900
network you get it into the NIC and you

77
00:03:11,640 --> 00:03:15,149
receive in your application filtered a

78
00:03:12,900 --> 00:03:17,340
bit talked about later notice the

79
00:03:15,150 --> 00:03:18,720
firewall is over here so one of the

80
00:03:17,340 --> 00:03:22,709
nifty things is even if somebody

81
00:03:18,720 --> 00:03:26,520
firewalls in the box ok then do us any

82
00:03:22,709 --> 00:03:27,840
good so this is not on window windows

83
00:03:26,520 --> 00:03:29,880
works the other way around we'll see it

84
00:03:27,840 --> 00:03:31,620
in a bit later but you know for a

85
00:03:29,880 --> 00:03:34,910
general you are here right here talking

86
00:03:31,620 --> 00:03:37,200
more or less ish directly to the Nick

87
00:03:34,910 --> 00:03:38,340
that's cool and kind of painful because

88
00:03:37,200 --> 00:03:41,010
now we have to roll our own Ethernet

89
00:03:38,340 --> 00:03:43,500
frames so why would you do this um it's

90
00:03:41,010 --> 00:03:45,989
not exactly the easiest thing to do well

91
00:03:43,500 --> 00:03:47,010
from a seafood perspective HTTP is it's

92
00:03:45,990 --> 00:03:48,660
a well-known thing and if you can use

93
00:03:47,010 --> 00:03:49,829
HTTP and that works for you if you can

94
00:03:48,660 --> 00:03:51,209
just throw up cobalt strike and you got

95
00:03:49,830 --> 00:03:54,230
out your awesome that's good

96
00:03:51,209 --> 00:03:57,000
that's not always how it works anymore

97
00:03:54,230 --> 00:03:59,100
an HTTP is well known we all know it

98
00:03:57,000 --> 00:04:00,690
defenders also know it and there's lots

99
00:03:59,100 --> 00:04:02,519
and lots and lots of tooling for HDB's

100
00:04:00,690 --> 00:04:04,370
okay so maybe we use HTTP ask mean it's

101
00:04:02,520 --> 00:04:06,209
just another letter for most of us right

102
00:04:04,370 --> 00:04:07,980
and there's getting to be more and more

103
00:04:06,209 --> 00:04:10,560
tooling around HTTP okay so we'll domain

104
00:04:07,980 --> 00:04:12,000
front domain fronting has the problem

105
00:04:10,560 --> 00:04:15,540
that you're relying on some third party

106
00:04:12,000 --> 00:04:17,790
some third party to help you and they

107
00:04:15,540 --> 00:04:19,980
typically don't like helping you ask to

108
00:04:17,790 --> 00:04:22,650
ask Amazon dude hey like so you know

109
00:04:19,980 --> 00:04:23,900
music did amazon.com cloud front he's

110
00:04:22,650 --> 00:04:28,109
like don't do that

111
00:04:23,900 --> 00:04:29,630
so I stopped it's okay so maybe domain

112
00:04:28,110 --> 00:04:33,120
fronting is not necessarily the answer

113
00:04:29,630 --> 00:04:35,130
and if it is it's awesome use it okay so

114
00:04:33,120 --> 00:04:38,220
we use DMS tunneling DNS tunneling is

115
00:04:35,130 --> 00:04:40,469
not fast and it's not not necessarily

116
00:04:38,220 --> 00:04:42,600
trivial to get to work just right and

117
00:04:40,470 --> 00:04:45,060
not get caught and it's actually not in

118
00:04:42,600 --> 00:04:46,920
a lot of cases not hard to catch we're

119
00:04:45,060 --> 00:04:47,940
kin spongy dudes and they're like hey we

120
00:04:46,920 --> 00:04:49,830
need some tunneling we're testing a

121
00:04:47,940 --> 00:04:53,310
thing right as a DNS thing I was like

122
00:04:49,830 --> 00:04:55,169
use iodine I like um we just got our DNS

123
00:04:53,310 --> 00:04:57,600
server blacklisted because it was

124
00:04:55,170 --> 00:04:59,160
running iodine so uh do you know

125
00:04:57,600 --> 00:05:01,170
something maybe doesn't work for you so

126
00:04:59,160 --> 00:05:02,970
and then just okay it's fine I'll just

127
00:05:01,170 --> 00:05:04,020
make a TCP socket out I'll use some high

128
00:05:02,970 --> 00:05:05,700
port nobody even notice

129
00:05:04,020 --> 00:05:06,780
well then I'll still leave a little bit

130
00:05:05,700 --> 00:05:07,740
of a trail pointing to the box you

131
00:05:06,780 --> 00:05:09,960
victimized for the nice things about

132
00:05:07,740 --> 00:05:11,430
pcap is we can have source addresses

133
00:05:09,960 --> 00:05:13,859
source MAC address source IP address

134
00:05:11,430 --> 00:05:15,510
source whatever layer to address that

135
00:05:13,860 --> 00:05:17,100
just don't point to anything and at that

136
00:05:15,510 --> 00:05:18,210
point you have to start like you have to

137
00:05:17,100 --> 00:05:20,390
go to switches and be like hey switch

138
00:05:18,210 --> 00:05:22,859
okay what port is this address on please

139
00:05:20,390 --> 00:05:25,760
hey switch report is broadcast coming

140
00:05:22,860 --> 00:05:28,020
from please that doesn't get very easy

141
00:05:25,760 --> 00:05:29,190
okay so it's like the c2 side the fun

142
00:05:28,020 --> 00:05:31,380
like we got a shell side we're not

143
00:05:29,190 --> 00:05:33,240
sniffing it's kind of like yeah we all

144
00:05:31,380 --> 00:05:34,469
run TCP dump right well turns out like

145
00:05:33,240 --> 00:05:36,990
there's a lot of cool things that you

146
00:05:34,470 --> 00:05:38,970
find on networks so I'm a banks network

147
00:05:36,990 --> 00:05:40,470
at one point it was like well I have a

148
00:05:38,970 --> 00:05:41,940
box what do I do and I so I just like i

149
00:05:40,470 --> 00:05:44,100
was watching traffic turns out the held

150
00:05:41,940 --> 00:05:47,400
app running alright turns out LDAP was

151
00:05:44,100 --> 00:05:49,350
passing Unix hashes all right not great

152
00:05:47,400 --> 00:05:51,030
hashes but all right sure and then it

153
00:05:49,350 --> 00:05:52,500
you know ssh was using it so like

154
00:05:51,030 --> 00:05:53,880
anytime anybody tried to as his agent of

155
00:05:52,500 --> 00:05:56,130
the box the box reached back to the LDAP

156
00:05:53,880 --> 00:05:58,260
server grab the hash all in plaintext

157
00:05:56,130 --> 00:06:01,650
it's like okay so now I have every UNIX

158
00:05:58,260 --> 00:06:03,060
users hash hey you should have more than

159
00:06:01,650 --> 00:06:06,780
eight characters in UNIX password by the

160
00:06:03,060 --> 00:06:08,340
way so uh so as far as sniffing goes

161
00:06:06,780 --> 00:06:10,710
it's really cool to put TCP dump on a

162
00:06:08,340 --> 00:06:12,090
box I got lucky it was on there um when

163
00:06:10,710 --> 00:06:13,229
you put T speed up on a box usually you

164
00:06:12,090 --> 00:06:14,700
have to bring a lippy cap with you and

165
00:06:13,230 --> 00:06:16,380
that may be it's not what you want to do

166
00:06:14,700 --> 00:06:18,479
maybe like you don't want TCP dump

167
00:06:16,380 --> 00:06:20,250
syntax in a process listing so rolling

168
00:06:18,480 --> 00:06:22,740
your own is actually like a really good

169
00:06:20,250 --> 00:06:26,280
way to go we'll see that and one of the

170
00:06:22,740 --> 00:06:27,720
demos we'll have so you can do you know

171
00:06:26,280 --> 00:06:30,210
things that most tools do but just an

172
00:06:27,720 --> 00:06:33,060
ad-hoc bespoke way and it's it'll work a

173
00:06:30,210 --> 00:06:35,219
little better sometimes if tools of

174
00:06:33,060 --> 00:06:37,920
canned tools work use them

175
00:06:35,220 --> 00:06:39,510
it's quite a bit easier so and also you

176
00:06:37,920 --> 00:06:40,620
can you know you can have comment that

177
00:06:39,510 --> 00:06:43,050
normal network sockets don't want to

178
00:06:40,620 --> 00:06:45,390
spoil demo later but there's no if

179
00:06:43,050 --> 00:06:47,130
you're getting frames straight from the

180
00:06:45,390 --> 00:06:48,330
Nick there's no real need to actually

181
00:06:47,130 --> 00:06:50,010
open a socket I mean you'll have a

182
00:06:48,330 --> 00:06:52,349
packet socket on Linux or a BPF device

183
00:06:50,010 --> 00:06:54,180
or whatever but you know you can you

184
00:06:52,350 --> 00:06:55,620
have data into user land from the

185
00:06:54,180 --> 00:06:58,110
network without actually opening a

186
00:06:55,620 --> 00:06:59,280
socket so I looted two frames from

187
00:06:58,110 --> 00:07:01,950
non-existent sources I don't have a demo

188
00:06:59,280 --> 00:07:03,840
for that but it it works and then

189
00:07:01,950 --> 00:07:04,680
non-existent protocols so you take say

190
00:07:03,840 --> 00:07:06,929
TCP

191
00:07:04,680 --> 00:07:08,670
you switch the IP prototype II proto TCP

192
00:07:06,930 --> 00:07:13,710
to like some random number 100 or

193
00:07:08,670 --> 00:07:15,210
something and no route all right so the

194
00:07:13,710 --> 00:07:17,370
good news is about half the audience it

195
00:07:15,210 --> 00:07:19,380
looked like which half the audience it

196
00:07:17,370 --> 00:07:21,390
looked like speak see so we'll go

197
00:07:19,380 --> 00:07:25,020
through the C API very quickly briefly

198
00:07:21,390 --> 00:07:27,419
just to a little you know whirlwind tour

199
00:07:25,020 --> 00:07:30,150
of how to pcap out of the pcap each of

200
00:07:27,420 --> 00:07:31,910
them will present the present what if

201
00:07:30,150 --> 00:07:35,460
the function call is an a brief demo

202
00:07:31,910 --> 00:07:37,380
briefs like will not text highlighted

203
00:07:35,460 --> 00:07:38,870
with the important bit highlighted of

204
00:07:37,380 --> 00:07:41,370
note there's a lot of error handling I

205
00:07:38,870 --> 00:07:42,920
myself and guilty of just like finding

206
00:07:41,370 --> 00:07:45,090
hey slides I do what I want copy paste

207
00:07:42,920 --> 00:07:47,400
that doesn't usually mean copy paste

208
00:07:45,090 --> 00:07:50,159
checking errors so the error checking is

209
00:07:47,400 --> 00:07:52,140
nice and built-in before we do that it's

210
00:07:50,160 --> 00:07:54,020
not necessarily obvious the first time

211
00:07:52,140 --> 00:07:56,310
you do this what order to do things in

212
00:07:54,020 --> 00:07:59,099
how many if we read BJ's guide to

213
00:07:56,310 --> 00:08:01,200
network sockets okay

214
00:07:59,100 --> 00:08:03,300
so if everybody else if you don't write

215
00:08:01,200 --> 00:08:04,890
network sockets beach has this really

216
00:08:03,300 --> 00:08:07,980
great guide to network sockets like yes

217
00:08:04,890 --> 00:08:10,770
and you socket socket by and except so

218
00:08:07,980 --> 00:08:12,360
on and so forth listen except so TCP not

219
00:08:10,770 --> 00:08:15,090
man pages are a great place to start for

220
00:08:12,360 --> 00:08:16,830
pcap and then seeing it in practice

221
00:08:15,090 --> 00:08:18,299
OpenBSD source for a lot of things

222
00:08:16,830 --> 00:08:20,580
especially open BSD used implementation

223
00:08:18,300 --> 00:08:22,320
of TCP dump is really very clean and

224
00:08:20,580 --> 00:08:23,669
easy to read code filling all that to

225
00:08:22,320 --> 00:08:24,930
search github search for whatever

226
00:08:23,669 --> 00:08:25,820
function somebody hey I do use pickup

227
00:08:24,930 --> 00:08:28,560
open live

228
00:08:25,820 --> 00:08:30,870
so speaking of pcap open live first we

229
00:08:28,560 --> 00:08:32,849
have to attach to a device we take you

230
00:08:30,870 --> 00:08:34,830
know your Nick on the UNIX side it's

231
00:08:32,849 --> 00:08:36,450
something like 8 0 and say I would like

232
00:08:34,830 --> 00:08:38,130
to capture on it please I would like

233
00:08:36,450 --> 00:08:40,320
frames from this device into my program

234
00:08:38,130 --> 00:08:42,450
you give it a few other parameters some

235
00:08:40,320 --> 00:08:43,979
I am going to be pressed for time not

236
00:08:42,450 --> 00:08:46,630
going to go through them each one but

237
00:08:43,979 --> 00:08:48,130
you give them a few other parameters and

238
00:08:46,630 --> 00:08:50,649
it will return you a handle sort of an

239
00:08:48,130 --> 00:08:51,939
opaque pointer as he often does this is

240
00:08:50,649 --> 00:08:54,370
what it looks like in real life so we'll

241
00:08:51,940 --> 00:08:55,810
open we'll start capturing em0 set a

242
00:08:54,370 --> 00:08:56,440
fairly large capture buffer it so it's

243
00:08:55,810 --> 00:08:58,540
too small

244
00:08:56,440 --> 00:09:00,339
you risk run the risk of missing chunks

245
00:08:58,540 --> 00:09:01,779
of packet or that miss maybe okay maybe

246
00:09:00,339 --> 00:09:04,690
you do actually you only really care

247
00:09:01,779 --> 00:09:06,670
about the header of note you need to

248
00:09:04,690 --> 00:09:08,079
pass it in an air buffer too if you know

249
00:09:06,670 --> 00:09:11,769
you want to see what there that you get

250
00:09:08,079 --> 00:09:12,969
is then you have to you have an option

251
00:09:11,769 --> 00:09:14,079
you can either pcap open live which

252
00:09:12,970 --> 00:09:15,970
allows you to set some parameters you

253
00:09:14,079 --> 00:09:17,859
can pcap create which is more or less

254
00:09:15,970 --> 00:09:20,019
the same sort of the modern way of doing

255
00:09:17,860 --> 00:09:21,819
it and you give it your source device m0

256
00:09:20,019 --> 00:09:23,889
and last example air buffer then you can

257
00:09:21,819 --> 00:09:25,569
set some options you can say hey I want

258
00:09:23,889 --> 00:09:26,949
to this timeout one buffering packets or

259
00:09:25,569 --> 00:09:30,040
I want this timestamp type or what have

260
00:09:26,949 --> 00:09:31,889
you and then you activate it pcap open

261
00:09:30,040 --> 00:09:34,689
live does not all in one in one go

262
00:09:31,889 --> 00:09:37,899
that's about what it looks like you call

263
00:09:34,690 --> 00:09:40,329
the three check for Arizona's use P sort

264
00:09:37,899 --> 00:09:42,370
of as a read and write so before that

265
00:09:40,329 --> 00:09:43,839
typically you compile a BPF filter and

266
00:09:42,370 --> 00:09:46,209
this is this is like you see in TCP dump

267
00:09:43,839 --> 00:09:48,519
I want TCP port 80 all right watch TCP

268
00:09:46,209 --> 00:09:50,469
port 443 and push header or the push

269
00:09:48,519 --> 00:09:52,600
flag set and the syn flag not set or

270
00:09:50,470 --> 00:09:54,880
something along those lines you can get

271
00:09:52,600 --> 00:09:56,649
very granular BPF is actually a complete

272
00:09:54,880 --> 00:09:57,970
language it doesn't loop but it's like a

273
00:09:56,649 --> 00:09:59,319
four word language it runs in a little

274
00:09:57,970 --> 00:10:01,660
vm so you can do some interesting things

275
00:09:59,319 --> 00:10:04,300
with it anyways you got to compile it to

276
00:10:01,660 --> 00:10:05,680
vm bytecode that's how you do it and

277
00:10:04,300 --> 00:10:08,649
then you have to set it on your pcap

278
00:10:05,680 --> 00:10:09,910
handle when you're done free the memory

279
00:10:08,649 --> 00:10:13,660
is allocated so that's what it looks

280
00:10:09,910 --> 00:10:16,149
like so in this case i'm i'm intending

281
00:10:13,660 --> 00:10:18,910
to dump on TCP port 80 i will compile

282
00:10:16,149 --> 00:10:20,050
that to a struct BPF program and i'll

283
00:10:18,910 --> 00:10:23,800
pass that and set it on the filter and

284
00:10:20,050 --> 00:10:24,639
i'll free it before we actually do

285
00:10:23,800 --> 00:10:26,258
anything interesting

286
00:10:24,639 --> 00:10:28,029
you're not especially in linux you're

287
00:10:26,259 --> 00:10:29,500
not guaranteed that your layer 2 header

288
00:10:28,029 --> 00:10:30,670
is going to be what you expect it to be

289
00:10:29,500 --> 00:10:33,310
even if it's an ethernet device you're

290
00:10:30,670 --> 00:10:35,139
dumping on it might not actually be an

291
00:10:33,310 --> 00:10:36,550
Ethernet header it might not be the 12

292
00:10:35,139 --> 00:10:38,139
bytes ish forget the design number of

293
00:10:36,550 --> 00:10:39,670
new through there so you fast say hey if

294
00:10:38,139 --> 00:10:41,500
you cap how big is this header and it

295
00:10:39,670 --> 00:10:42,819
will say not how big the header it is

296
00:10:41,500 --> 00:10:43,660
let's say this is the data link type and

297
00:10:42,819 --> 00:10:44,829
then you have this big old switch

298
00:10:43,660 --> 00:10:46,630
statement it's like if it's Ethernet

299
00:10:44,829 --> 00:10:48,189
this if it's raw it's this if it's

300
00:10:46,630 --> 00:10:49,360
whatever else whatever else and this

301
00:10:48,189 --> 00:10:51,279
actually comes in handy if you don't

302
00:10:49,360 --> 00:10:52,540
really know what the devices Linux

303
00:10:51,279 --> 00:10:53,889
device names are not necessarily

304
00:10:52,540 --> 00:10:55,800
accurate especially when you get into

305
00:10:53,889 --> 00:10:57,050
the kubernetes docker side of things so

306
00:10:55,800 --> 00:10:58,490
just kinda

307
00:10:57,050 --> 00:10:59,660
important to know how to how far to go

308
00:10:58,490 --> 00:11:02,450
if you care if you're actually going to

309
00:10:59,660 --> 00:11:04,100
start parsing packets this is what it

310
00:11:02,450 --> 00:11:06,230
looks like so we have some some magic

311
00:11:04,100 --> 00:11:09,050
initialization of P which we'll use in

312
00:11:06,230 --> 00:11:10,970
the future slides as well grab the data

313
00:11:09,050 --> 00:11:15,709
link type and then you'll have some sort

314
00:11:10,970 --> 00:11:16,730
of switch well had it somewhere in the

315
00:11:15,709 --> 00:11:18,920
code anyways you'll have some sort of

316
00:11:16,730 --> 00:11:20,240
switch no two functions pick up tattling

317
00:11:18,920 --> 00:11:21,560
Val the name description which I total

318
00:11:20,240 --> 00:11:23,870
skeptic on the last slide give a nice

319
00:11:21,560 --> 00:11:27,109
human readable name for your type and a

320
00:11:23,870 --> 00:11:29,420
brief description so if we want to

321
00:11:27,110 --> 00:11:31,519
receive packets there are equivalents to

322
00:11:29,420 --> 00:11:33,740
the receive or read system calls it's

323
00:11:31,519 --> 00:11:35,209
sometimes I often easier you're just

324
00:11:33,740 --> 00:11:37,370
going to keep doing it to loop it and it

325
00:11:35,209 --> 00:11:39,229
contains a looping function built-in so

326
00:11:37,370 --> 00:11:41,450
you pass in that opaque pcap handle you

327
00:11:39,230 --> 00:11:42,709
pass in a callback function and you also

328
00:11:41,450 --> 00:11:43,640
get this nice little user pointed you

329
00:11:42,709 --> 00:11:46,069
can put in there whatever you'd like

330
00:11:43,640 --> 00:11:47,779
it's an unsigned character pointer but

331
00:11:46,070 --> 00:11:50,240
you can cast it to anything is just a

332
00:11:47,779 --> 00:11:51,470
pointer so assuming you're on a system

333
00:11:50,240 --> 00:11:52,550
where you can cast players to anything

334
00:11:51,470 --> 00:11:53,810
which is most of them nowadays

335
00:11:52,550 --> 00:11:55,370
I'm your handle that looks like this

336
00:11:53,810 --> 00:11:57,109
there's that same user pointer it's

337
00:11:55,370 --> 00:11:58,850
passed in straight this is all single

338
00:11:57,110 --> 00:12:01,220
threaded by the way so that is immutable

339
00:11:58,850 --> 00:12:03,620
so notice it's not a Const it's just a

340
00:12:01,220 --> 00:12:06,040
pointer it's that little thing you're

341
00:12:03,620 --> 00:12:08,899
showing up it is that's cool

342
00:12:06,040 --> 00:12:10,730
that's not what I wanted um anyways you

343
00:12:08,899 --> 00:12:12,050
get a peek at packet header apologies

344
00:12:10,730 --> 00:12:13,279
for the quirk there you get a peek at

345
00:12:12,050 --> 00:12:15,620
packet header it'll tell you the amount

346
00:12:13,279 --> 00:12:16,700
of data you got off the wire and the

347
00:12:15,620 --> 00:12:18,050
amount was out of the packet originally

348
00:12:16,700 --> 00:12:19,760
was if your capture buffer is too small

349
00:12:18,050 --> 00:12:21,410
because maybe you only care about the

350
00:12:19,760 --> 00:12:22,819
headers or something then you'll know

351
00:12:21,410 --> 00:12:24,680
how big the packet wedge is originally I

352
00:12:22,820 --> 00:12:27,740
find that you get the buffer for the

353
00:12:24,680 --> 00:12:29,390
packet it's what it looks like you loop

354
00:12:27,740 --> 00:12:32,120
it you give it your call back and it

355
00:12:29,390 --> 00:12:34,220
just it goes error handling you can

356
00:12:32,120 --> 00:12:35,959
break out of the loop with pcap break

357
00:12:34,220 --> 00:12:39,709
loop I believe in which case you'll get

358
00:12:35,959 --> 00:12:40,640
a negative two as a return value so

359
00:12:39,709 --> 00:12:41,930
about what a handler looks like

360
00:12:40,640 --> 00:12:44,630
obviously you know in real life they're

361
00:12:41,930 --> 00:12:46,370
a bit more interesting than this taking

362
00:12:44,630 --> 00:12:47,630
this the you know the user run some

363
00:12:46,370 --> 00:12:49,850
character casting each manager and will

364
00:12:47,630 --> 00:12:52,070
just take it as a contrived example to

365
00:12:49,850 --> 00:12:54,529
count the somewhere in there count the

366
00:12:52,070 --> 00:12:55,730
packets but notice we get the length of

367
00:12:54,529 --> 00:12:57,860
the packet on the wire the length of the

368
00:12:55,730 --> 00:12:59,480
packet we captured and just you can

369
00:12:57,860 --> 00:13:01,250
index into it just as any other point

370
00:12:59,480 --> 00:13:03,570
early so I mean any other unsigned

371
00:13:01,250 --> 00:13:05,830
character I use byte pointer

372
00:13:03,570 --> 00:13:09,339
pick up inject is they send or right

373
00:13:05,830 --> 00:13:10,420
side of this you send you just like any

374
00:13:09,339 --> 00:13:12,490
other right you give it instead of a

375
00:13:10,420 --> 00:13:13,510
file descriptor a pointer but other than

376
00:13:12,490 --> 00:13:15,130
that you give it a buffer and how many

377
00:13:13,510 --> 00:13:16,450
bytes and just goes puts it on the wire

378
00:13:15,130 --> 00:13:19,839
which means you have to actually get

379
00:13:16,450 --> 00:13:21,100
your layer two right if you mess up your

380
00:13:19,839 --> 00:13:22,810
layer - it's not gonna go anywhere so

381
00:13:21,100 --> 00:13:24,490
unlike a raw socket you actually have to

382
00:13:22,810 --> 00:13:26,109
take care of the entire stack

383
00:13:24,490 --> 00:13:27,940
you don't need an ethernet trailer and

384
00:13:26,110 --> 00:13:30,490
the ethernet checksum though the device

385
00:13:27,940 --> 00:13:32,680
driver will handle that so what it looks

386
00:13:30,490 --> 00:13:34,300
like it looks no pretty much like any

387
00:13:32,680 --> 00:13:35,949
other right we've initialized our pcap

388
00:13:34,300 --> 00:13:37,839
we've you know it found some way to

389
00:13:35,950 --> 00:13:39,839
generate a packet and we've stuck it on

390
00:13:37,839 --> 00:13:42,250
the wire um you can get partial sense

391
00:13:39,839 --> 00:13:45,250
especially in go I know but I think see

392
00:13:42,250 --> 00:13:47,380
as well you know you're you know TCP use

393
00:13:45,250 --> 00:13:50,140
normally get parcel sends UDP it's like

394
00:13:47,380 --> 00:13:51,970
here did something wrong pcap it's the

395
00:13:50,140 --> 00:13:53,110
same as any other thing that stateless

396
00:13:51,970 --> 00:13:57,160
your connection list it's like oops

397
00:13:53,110 --> 00:13:58,959
goofed few other handy things net on

398
00:13:57,160 --> 00:14:00,910
that end on H is a header file that you

399
00:13:58,959 --> 00:14:02,079
include just about every peek at program

400
00:14:00,910 --> 00:14:05,020
has a whole bunch of constants in there

401
00:14:02,080 --> 00:14:06,610
that are defined there's a handful of

402
00:14:05,020 --> 00:14:09,370
functions P can't look up to final divs

403
00:14:06,610 --> 00:14:11,170
and clothes that will find a device for

404
00:14:09,370 --> 00:14:12,760
you on the UNIX ID it's easy you you

405
00:14:11,170 --> 00:14:15,760
know it's a short name it's bridge 0 or

406
00:14:12,760 --> 00:14:17,230
tap 0 or wreath 1 or whatever on the

407
00:14:15,760 --> 00:14:18,850
windows side it gets very complicated

408
00:14:17,230 --> 00:14:20,560
because they like to use you you IDs for

409
00:14:18,850 --> 00:14:23,410
everything and device names are no

410
00:14:20,560 --> 00:14:25,119
different so um it's sometimes easier

411
00:14:23,410 --> 00:14:26,890
just to say hey user here's a list of

412
00:14:25,120 --> 00:14:28,630
devices please give me like you know a

413
00:14:26,890 --> 00:14:31,029
menu list give me a number or something

414
00:14:28,630 --> 00:14:33,430
those will handle that as far as

415
00:14:31,029 --> 00:14:34,720
calculating check sums I got sick of

416
00:14:33,430 --> 00:14:36,250
doing it by hand so I wrote a library to

417
00:14:34,720 --> 00:14:38,470
do it so if you're free to use it just

418
00:14:36,250 --> 00:14:40,330
nice and is elicenser BSD license every

419
00:14:38,470 --> 00:14:41,830
which permissively licensed um it has a

420
00:14:40,330 --> 00:14:43,150
single function in it package up some

421
00:14:41,830 --> 00:14:46,329
calculate and it calculates and inserts

422
00:14:43,150 --> 00:14:48,579
your check sums so roll your packet add

423
00:14:46,329 --> 00:14:51,339
that you know package checksum calculate

424
00:14:48,579 --> 00:14:53,229
and then send your pcap inject worth

425
00:14:51,339 --> 00:14:56,020
mentioning escapee again it's a it's

426
00:14:53,230 --> 00:14:57,279
very fast to write and see we're very

427
00:14:56,020 --> 00:14:59,620
fast to run so you not so fast to write

428
00:14:57,279 --> 00:15:01,360
and see and it tends to work forever

429
00:14:59,620 --> 00:15:02,500
once you get it right but if you really

430
00:15:01,360 --> 00:15:05,260
just need to send a packet scape ease

431
00:15:02,500 --> 00:15:07,690
generally the way to go so few handy

432
00:15:05,260 --> 00:15:10,089
structs that mostly provide headers here

433
00:15:07,690 --> 00:15:12,910
so when you receive packets on the pcap

434
00:15:10,089 --> 00:15:14,410
loop side of things it's you know

435
00:15:12,910 --> 00:15:15,819
painful to calculate offset by hand it

436
00:15:14,410 --> 00:15:16,600
if you're doing one or two whatever but

437
00:15:15,820 --> 00:15:19,330
oh

438
00:15:16,600 --> 00:15:20,710
no it's often easier just to point a

439
00:15:19,330 --> 00:15:22,390
struck ether header at the beginning of

440
00:15:20,710 --> 00:15:25,000
your packet figure out how big that goes

441
00:15:22,390 --> 00:15:26,620
point a struct IP at the next you know

442
00:15:25,000 --> 00:15:29,470
layer and so on and so forth

443
00:15:26,620 --> 00:15:30,910
mix writing quite a bit simpler for

444
00:15:29,470 --> 00:15:38,770
these you'll often need net uh net in

445
00:15:30,910 --> 00:15:40,890
dot H included so that's cool

446
00:15:38,770 --> 00:15:43,120
C is fun how do we actually run it

447
00:15:40,890 --> 00:15:44,050
compiling is almost like compiling

448
00:15:43,120 --> 00:15:45,670
anything else this is just a wrapper

449
00:15:44,050 --> 00:15:47,439
around packet sockets and setting a

450
00:15:45,670 --> 00:15:48,880
beefy F filter so it's not that much

451
00:15:47,440 --> 00:15:52,300
different except you have to link in

452
00:15:48,880 --> 00:15:54,580
lippy cap lippy cap is not necessarily

453
00:15:52,300 --> 00:15:57,609
always on target so you might need to

454
00:15:54,580 --> 00:15:59,380
bring it with you which works so

455
00:15:57,610 --> 00:16:00,880
statically building it in solves a lot

456
00:15:59,380 --> 00:16:02,680
of problems you get the latest source

457
00:16:00,880 --> 00:16:06,070
there I find myself typically I just

458
00:16:02,680 --> 00:16:07,989
bring down the source build it works so

459
00:16:06,070 --> 00:16:09,370
you can on Debian boxes of course

460
00:16:07,990 --> 00:16:11,350
install Lippe captive L or something

461
00:16:09,370 --> 00:16:12,250
like that in the P octave or whatever um

462
00:16:11,350 --> 00:16:14,620
which works you're not necessarily

463
00:16:12,250 --> 00:16:16,420
guaranteed that lib pcap is the same as

464
00:16:14,620 --> 00:16:19,030
the Lib pcap and target so so I

465
00:16:16,420 --> 00:16:20,770
typically statically link it in things I

466
00:16:19,030 --> 00:16:23,890
found interesting or useful for writing

467
00:16:20,770 --> 00:16:25,689
pkp programs macros for config we'll see

468
00:16:23,890 --> 00:16:27,699
you in a bit we're gonna inject program

469
00:16:25,690 --> 00:16:28,690
straight into system D so you don't

470
00:16:27,700 --> 00:16:29,350
really have the option to give it a

471
00:16:28,690 --> 00:16:32,440
config file

472
00:16:29,350 --> 00:16:34,390
um as a report came out a couple weeks

473
00:16:32,440 --> 00:16:35,770
ago about a group that just they like

474
00:16:34,390 --> 00:16:37,330
took their binary they added a config

475
00:16:35,770 --> 00:16:38,680
file to the end encrypted it and like

476
00:16:37,330 --> 00:16:41,080
hey just read the binary it'll be there

477
00:16:38,680 --> 00:16:42,250
that's cool and tell somebody like

478
00:16:41,080 --> 00:16:45,130
decode your config file and writes a

479
00:16:42,250 --> 00:16:47,470
blog post about it also find it's quite

480
00:16:45,130 --> 00:16:49,390
handy to instead of putting things in

481
00:16:47,470 --> 00:16:50,710
main if it's just a single use program

482
00:16:49,390 --> 00:16:52,510
you're always gonna run it that way cool

483
00:16:50,710 --> 00:16:54,370
but instead of putting things in main

484
00:16:52,510 --> 00:16:56,050
putting making it a constructor function

485
00:16:54,370 --> 00:16:57,550
which will run as a standalone binary or

486
00:16:56,050 --> 00:16:59,319
if it's injected I was talking to the

487
00:16:57,550 --> 00:17:01,270
fellows this time about a square

488
00:16:59,320 --> 00:17:04,420
yesterday and I was like alright TLDR

489
00:17:01,270 --> 00:17:05,949
don't run programs so constructor

490
00:17:04,420 --> 00:17:08,199
functions as threads that you shove into

491
00:17:05,949 --> 00:17:10,180
things is probably a good thing to start

492
00:17:08,199 --> 00:17:12,040
doing that's about what it would look

493
00:17:10,180 --> 00:17:13,420
like compiling so in this case you can

494
00:17:12,040 --> 00:17:14,889
assume that pcap hello world is going to

495
00:17:13,420 --> 00:17:16,360
ask what device are going to need to

496
00:17:14,890 --> 00:17:18,640
know what device to capture on suite 0

497
00:17:16,359 --> 00:17:20,409
or at least what device to attach to and

498
00:17:18,640 --> 00:17:22,380
for this case we'll just link in pcap as

499
00:17:20,410 --> 00:17:24,490
you link in any other normal library

500
00:17:22,380 --> 00:17:26,890
those we could pilot flags I was used

501
00:17:24,490 --> 00:17:28,870
they worked pretty good everybody has

502
00:17:26,890 --> 00:17:30,170
their own other than that you just give

503
00:17:28,870 --> 00:17:32,239
it a source and go

504
00:17:30,170 --> 00:17:33,500
so then how to run it as a standalone

505
00:17:32,240 --> 00:17:34,640
binary it's like any other standalone

506
00:17:33,500 --> 00:17:36,920
binary the exception that you either

507
00:17:34,640 --> 00:17:39,290
need root on most unix-like systems

508
00:17:36,920 --> 00:17:40,970
capmetro if you're running on Linux on

509
00:17:39,290 --> 00:17:43,159
Windows you don't necessarily need admin

510
00:17:40,970 --> 00:17:45,290
if you install the pcap driver and

511
00:17:43,160 --> 00:17:47,540
system right service right scuse me you

512
00:17:45,290 --> 00:17:48,980
don't actually need capmetro I would

513
00:17:47,540 --> 00:17:50,330
hazard to guess most of time if you find

514
00:17:48,980 --> 00:17:51,890
peak app installed it's because

515
00:17:50,330 --> 00:17:53,090
somebody's running Wireshark to debug

516
00:17:51,890 --> 00:17:53,600
something or forensics something or

517
00:17:53,090 --> 00:17:56,449
what-have-you

518
00:17:53,600 --> 00:17:58,219
so it probably won't need admin it's not

519
00:17:56,450 --> 00:18:00,200
a bad thing to drop privileges because

520
00:17:58,220 --> 00:18:01,340
at this point you're you know do all

521
00:18:00,200 --> 00:18:03,710
sorts of strange things and buffer

522
00:18:01,340 --> 00:18:05,990
overflows happen and so on and I found

523
00:18:03,710 --> 00:18:07,070
it's it's you know just I've dropped TCP

524
00:18:05,990 --> 00:18:09,110
dump on a target to drop my map or

525
00:18:07,070 --> 00:18:11,360
whatever and just say hey SDC is peaking

526
00:18:09,110 --> 00:18:12,620
up there ldd I'll tell you an objective

527
00:18:11,360 --> 00:18:15,169
library it's no different than any other

528
00:18:12,620 --> 00:18:17,209
shared object you build except that the

529
00:18:15,170 --> 00:18:18,950
process you inject into needs to have

530
00:18:17,210 --> 00:18:20,960
some access to underlying pcaps

531
00:18:18,950 --> 00:18:22,310
underlying mechanism so this is not you

532
00:18:20,960 --> 00:18:23,930
think oh yeah any route process works

533
00:18:22,310 --> 00:18:27,860
it's not actually how it works it turns

534
00:18:23,930 --> 00:18:31,400
out I have yet to figure out why so feel

535
00:18:27,860 --> 00:18:32,510
free to tell me but systemd works it's

536
00:18:31,400 --> 00:18:35,510
not stablest thing ever

537
00:18:32,510 --> 00:18:37,160
syslog tends to work and TP descends to

538
00:18:35,510 --> 00:18:40,010
work so yeah

539
00:18:37,160 --> 00:18:41,210
containers cost trouble as they often do

540
00:18:40,010 --> 00:18:42,350
but the cool thing is then you attach to

541
00:18:41,210 --> 00:18:46,220
a bridge device and you're like hey I

542
00:18:42,350 --> 00:18:48,469
own all the boxes so pker that create

543
00:18:46,220 --> 00:18:49,760
and then a double fork can often solve

544
00:18:48,470 --> 00:18:51,650
your problems so you just you inject

545
00:18:49,760 --> 00:18:53,480
into a process u4q fork your decadent

546
00:18:51,650 --> 00:18:55,100
process you spawn a thread u4q fork now

547
00:18:53,480 --> 00:18:58,460
you have another process that has like

548
00:18:55,100 --> 00:19:00,709
no binary on disk if you're going the LD

549
00:18:58,460 --> 00:19:02,720
PSO preload route to inject and it's not

550
00:19:00,710 --> 00:19:05,000
necessarily not necessarily a pcap thing

551
00:19:02,720 --> 00:19:07,400
but there's no impotency with pcap if

552
00:19:05,000 --> 00:19:08,780
you have everything and it's been from

553
00:19:07,400 --> 00:19:09,770
experience you injected everything and

554
00:19:08,780 --> 00:19:10,970
everything's listening for a trigger

555
00:19:09,770 --> 00:19:12,110
packet or something and it gets it then

556
00:19:10,970 --> 00:19:13,340
you have like a thousand shells calling

557
00:19:12,110 --> 00:19:15,469
you back it's not not always what you

558
00:19:13,340 --> 00:19:16,669
want LD preload is a good way to take

559
00:19:15,470 --> 00:19:19,610
care of that if you can sneak that into

560
00:19:16,670 --> 00:19:22,670
an init file or I think the group I was

561
00:19:19,610 --> 00:19:24,080
reading about put it in a T profile all

562
00:19:22,670 --> 00:19:26,720
right so first of the demos this will be

563
00:19:24,080 --> 00:19:28,939
a little program it'll just tend holo

564
00:19:26,720 --> 00:19:30,980
world as the layer 3 payload to the

565
00:19:28,940 --> 00:19:34,100
broadcast address so I've either net

566
00:19:30,980 --> 00:19:35,240
hello world like we saw a couple slides

567
00:19:34,100 --> 00:19:38,060
back we'll select the interface we

568
00:19:35,240 --> 00:19:40,130
inject on via of a preprocessor macro so

569
00:19:38,060 --> 00:19:41,870
D device it's worth noting I did not

570
00:19:40,130 --> 00:19:43,910
point out the backslash quotes are

571
00:19:41,870 --> 00:19:45,679
important because otherwise it

572
00:19:43,910 --> 00:19:50,600
we'll go straight to the source and that

573
00:19:45,680 --> 00:19:52,340
is a string and then we will write this

574
00:19:50,600 --> 00:19:53,149
so that it happens in a constructor not

575
00:19:52,340 --> 00:19:54,470
in Maine

576
00:19:53,150 --> 00:19:55,760
saw somebody taking pictures I'll put

577
00:19:54,470 --> 00:19:58,400
these slides on Twitter right after the

578
00:19:55,760 --> 00:20:01,100
talk so yeah well we'll run this in the

579
00:19:58,400 --> 00:20:03,200
constructor not in Maine for the sake of

580
00:20:01,100 --> 00:20:05,270
injection and mixed verdict demo or

581
00:20:03,200 --> 00:20:06,800
source and ASCII cast all these demos

582
00:20:05,270 --> 00:20:07,850
are recorded as ASCII casts by the way

583
00:20:06,800 --> 00:20:09,590
so if you look me up using the same

584
00:20:07,850 --> 00:20:12,860
Twitter handle and ask innama they're

585
00:20:09,590 --> 00:20:15,820
all they're nice and copy-paste well so

586
00:20:12,860 --> 00:20:24,110
that is about the demo that is the demo

587
00:20:15,820 --> 00:20:25,870
Wow gods with gods of apologize this is

588
00:20:24,110 --> 00:20:31,219
gonna be every one of them I think so uh

589
00:20:25,870 --> 00:20:33,939
my apologies there you go so on the demo

590
00:20:31,220 --> 00:20:36,080
box we're gonna grab pcap source code

591
00:20:33,940 --> 00:20:38,180
we're gonna compile it just like you

592
00:20:36,080 --> 00:20:39,770
compiled almost anything think back like

593
00:20:38,180 --> 00:20:41,720
the old Slackware days of everything

594
00:20:39,770 --> 00:20:42,889
configure make make install - the make

595
00:20:41,720 --> 00:20:44,090
install because we don't really need to

596
00:20:42,890 --> 00:20:46,160
install the system-wide also I'm not

597
00:20:44,090 --> 00:20:48,590
route but we just we need to compile

598
00:20:46,160 --> 00:20:50,690
library since it don't need the reenter

599
00:20:48,590 --> 00:20:53,179
special this happens

600
00:20:50,690 --> 00:20:55,010
PK app is a well-used tested bit of

601
00:20:53,180 --> 00:20:57,410
software it's not likely that the

602
00:20:55,010 --> 00:21:01,820
compiler warnings are a bad thing

603
00:20:57,410 --> 00:21:04,820
necessarily so grab a source have a look

604
00:21:01,820 --> 00:21:08,270
at the source real quick there there is

605
00:21:04,820 --> 00:21:09,740
a the layer 3 payload here notice that

606
00:21:08,270 --> 00:21:12,350
on an end I H in the cell you include

607
00:21:09,740 --> 00:21:14,120
pcap older versions of pcap if you're on

608
00:21:12,350 --> 00:21:20,719
a really ancient box it might be pcap /p

609
00:21:14,120 --> 00:21:22,550
k @h there we go so here's here is the

610
00:21:20,720 --> 00:21:24,590
actual not main but the function that'll

611
00:21:22,550 --> 00:21:28,639
run before main it's real simple

612
00:21:24,590 --> 00:21:32,149
grab a make a buffer know it out we'll

613
00:21:28,640 --> 00:21:34,820
put a point in either header at it copy

614
00:21:32,150 --> 00:21:36,970
in the source desk dresser and ethertype

615
00:21:34,820 --> 00:21:38,840
so we use the chaos ethertype because

616
00:21:36,970 --> 00:21:40,730
it's a demo and it makes it really easy

617
00:21:38,840 --> 00:21:42,350
to find on the wire it's also kind of

618
00:21:40,730 --> 00:21:44,210
neat if you're showing like hey look i'm

619
00:21:42,350 --> 00:21:45,260
on your box and i could in theory inject

620
00:21:44,210 --> 00:21:46,070
whatever i want into the network but

621
00:21:45,260 --> 00:21:47,780
it's something safe that i know

622
00:21:46,070 --> 00:21:50,300
nothing's gonna pick up use whatever

623
00:21:47,780 --> 00:21:51,800
ethan type you'd like unless you have

624
00:21:50,300 --> 00:21:55,610
old Lisp machines on your network chaos

625
00:21:51,800 --> 00:21:57,710
is probably pretty safe so copy the

626
00:21:55,610 --> 00:21:58,969
buffer in and then it's almost

627
00:21:57,710 --> 00:22:03,260
just like opening a socket open the

628
00:21:58,970 --> 00:22:03,919
device inject the inject the frame clean

629
00:22:03,260 --> 00:22:09,110
up and we're done

630
00:22:03,919 --> 00:22:11,120
notice main just returns there you go so

631
00:22:09,110 --> 00:22:12,740
this is how we would compile it as a

632
00:22:11,120 --> 00:22:13,699
binary it's pretty much the same we set

633
00:22:12,740 --> 00:22:14,960
the include path because we're gonna

634
00:22:13,700 --> 00:22:16,760
need to figure out where P Kapton H is

635
00:22:14,960 --> 00:22:19,340
so the include path so we can find it

636
00:22:16,760 --> 00:22:20,510
and we'll compile in pcap statically the

637
00:22:19,340 --> 00:22:22,220
rest of the library will be dynamically

638
00:22:20,510 --> 00:22:27,620
linked just just lib TCAP will be in

639
00:22:22,220 --> 00:22:29,270
there statically there we go let me see

640
00:22:27,620 --> 00:22:30,918
it's just it's you know looks like any

641
00:22:29,270 --> 00:22:32,389
other binary if you're doing super deep

642
00:22:30,919 --> 00:22:33,470
forensics if somebody if you're at the

643
00:22:32,390 --> 00:22:34,610
point where somebody is looking at your

644
00:22:33,470 --> 00:22:36,500
malware and they're like looking at link

645
00:22:34,610 --> 00:22:38,570
libraries you probably should not be on

646
00:22:36,500 --> 00:22:40,820
that box anymore but there we go it's

647
00:22:38,570 --> 00:22:42,379
also kind of big that happens it's you

648
00:22:40,820 --> 00:22:46,730
know static linking static dynamic

649
00:22:42,380 --> 00:22:48,320
linking then we'll compile it as a

650
00:22:46,730 --> 00:22:49,610
shared object as well just like you

651
00:22:48,320 --> 00:22:51,439
compile any other shared object another

652
00:22:49,610 --> 00:22:53,809
nifty way just compile in one thing

653
00:22:51,440 --> 00:22:56,240
statically is say hey linker static eyes

654
00:22:53,809 --> 00:22:58,250
this one thing and not the rest and

655
00:22:56,240 --> 00:23:03,020
notice we have to point it at where the

656
00:22:58,250 --> 00:23:05,140
P capture P kept archives are so looks

657
00:23:03,020 --> 00:23:08,210
pretty much the same except this is a

658
00:23:05,140 --> 00:23:09,890
shared object file also by default debug

659
00:23:08,210 --> 00:23:11,270
info not stripped that might not be a

660
00:23:09,890 --> 00:23:13,870
great thing if you suspect somebody's

661
00:23:11,270 --> 00:23:15,950
gonna find your mother on target

662
00:23:13,870 --> 00:23:17,750
so we'll just TCP dump real quick and

663
00:23:15,950 --> 00:23:20,929
we'll look for anything that IP casts is

664
00:23:17,750 --> 00:23:23,149
not IP there might be ARP frames it's

665
00:23:20,929 --> 00:23:26,419
okay and I'll print it out print out the

666
00:23:23,149 --> 00:23:29,689
hex and ASCII I'm back rounding it so

667
00:23:26,419 --> 00:23:31,309
we'll have like combined output all

668
00:23:29,690 --> 00:23:32,809
right cool well run it like we run

669
00:23:31,309 --> 00:23:35,740
anything else there we go so we have our

670
00:23:32,809 --> 00:23:37,809
next frame it has an Ethernet header and

671
00:23:35,740 --> 00:23:40,340
printing starts at layer 3 by the way

672
00:23:37,809 --> 00:23:43,210
and it prints a holo world and that's

673
00:23:40,340 --> 00:23:44,959
that is that's as easy as injecting is

674
00:23:43,210 --> 00:23:48,020
you can actually do a lot of cool things

675
00:23:44,960 --> 00:23:50,149
with injecting it turns out so we'll

676
00:23:48,020 --> 00:23:52,059
just this is this typical DL open shove

677
00:23:50,149 --> 00:23:54,949
it into a process notice we'll use pin 1

678
00:23:52,059 --> 00:23:56,570
which is system D be careful with it

679
00:23:54,950 --> 00:23:58,880
it's maybe not something you want to do

680
00:23:56,570 --> 00:24:01,220
just like hey I found a box but it makes

681
00:23:58,880 --> 00:24:03,350
for like a hey you can't do this Mike Oh

682
00:24:01,220 --> 00:24:05,570
watch this Laurie ever injected it we

683
00:24:03,350 --> 00:24:07,279
got an oval void pointer so DL open

684
00:24:05,570 --> 00:24:09,460
return to us a pointer as opposed to

685
00:24:07,279 --> 00:24:12,310
know which means it worked

686
00:24:09,460 --> 00:24:13,810
yep it did in fact in Jack again if

687
00:24:12,310 --> 00:24:14,980
somebody's like going this far that

688
00:24:13,810 --> 00:24:16,389
they're looking at in it for your amount

689
00:24:14,980 --> 00:24:21,550
where you shouldn't be on that box

690
00:24:16,390 --> 00:24:22,870
probably cool also notice we have our we

691
00:24:21,550 --> 00:24:25,629
have our hello world it did in fact work

692
00:24:22,870 --> 00:24:28,780
in jumbled output and we'll close it

693
00:24:25,630 --> 00:24:31,180
there we go um that will sec fault

694
00:24:28,780 --> 00:24:32,800
system d if the library is still in use

695
00:24:31,180 --> 00:24:33,820
so works for injection not so much for

696
00:24:32,800 --> 00:24:38,190
sniffing there's no closed sniffs

697
00:24:33,820 --> 00:24:40,480
anything there we go that was the demo

698
00:24:38,190 --> 00:24:43,120
all right so that's that's nice theory

699
00:24:40,480 --> 00:24:44,740
so let's have four or four things four

700
00:24:43,120 --> 00:24:45,550
little demos of what you know you can

701
00:24:44,740 --> 00:24:47,410
actually do with it

702
00:24:45,550 --> 00:24:49,090
most of these were written based on

703
00:24:47,410 --> 00:24:50,890
things I've done but the source code

704
00:24:49,090 --> 00:24:53,500
wasn't public so the implementations of

705
00:24:50,890 --> 00:24:57,790
or just proof of concept of things other

706
00:24:53,500 --> 00:24:59,770
things that are internal so first thing

707
00:24:57,790 --> 00:25:01,330
we could just sniff the wire how many of

708
00:24:59,770 --> 00:25:03,010
us have heard like no no we don't

709
00:25:01,330 --> 00:25:04,870
encrypt inside that's that's resource

710
00:25:03,010 --> 00:25:08,490
consumption in hard nobody can get in

711
00:25:04,870 --> 00:25:10,510
anyways it's like common thing yeah

712
00:25:08,490 --> 00:25:13,510
there's like a million hands that are

713
00:25:10,510 --> 00:25:17,680
like this hi so so it's working at this

714
00:25:13,510 --> 00:25:19,300
place and they were like yeah so we're

715
00:25:17,680 --> 00:25:21,520
good inside and then they use FTP to get

716
00:25:19,300 --> 00:25:25,270
from them to clients it was a bank by

717
00:25:21,520 --> 00:25:26,710
the way so um see some FTP if you're on

718
00:25:25,270 --> 00:25:28,270
an endpoint it goes without saying you

719
00:25:26,710 --> 00:25:30,730
only get endpoint coms you can get a lot

720
00:25:28,270 --> 00:25:32,800
of endpoint coms so talk about the LDAP

721
00:25:30,730 --> 00:25:34,540
creds there and if you're on a router

722
00:25:32,800 --> 00:25:36,040
you can get anything traversing your

723
00:25:34,540 --> 00:25:40,300
router if you're an environment where

724
00:25:36,040 --> 00:25:43,270
they're using say the freebsd firewall

725
00:25:40,300 --> 00:25:44,169
the name of which just escaped me if you

726
00:25:43,270 --> 00:25:46,389
have sense thank you

727
00:25:44,170 --> 00:25:47,950
half the crown fusing pfSense compiles

728
00:25:46,390 --> 00:25:49,840
great and pfsense works pretty good

729
00:25:47,950 --> 00:25:52,660
if you have sense like everything runs

730
00:25:49,840 --> 00:25:54,659
as route by the way so and the GUI

731
00:25:52,660 --> 00:25:58,300
reflects like config files not reality

732
00:25:54,660 --> 00:26:00,370
so works pretty good also routers in the

733
00:25:58,300 --> 00:26:02,740
DevOps modern Kubb docker world are

734
00:26:00,370 --> 00:26:04,000
usually linux switch devices or bridge

735
00:26:02,740 --> 00:26:07,210
devices or something along those lines

736
00:26:04,000 --> 00:26:09,970
so your router is just nice and tcp dump

737
00:26:07,210 --> 00:26:12,010
little it's not a bad idea to filter

738
00:26:09,970 --> 00:26:13,330
narrowly so if you add this to anything

739
00:26:12,010 --> 00:26:14,500
anything you're looking at tcp and

740
00:26:13,330 --> 00:26:17,530
you're actually looking at the internal

741
00:26:14,500 --> 00:26:19,090
so the tcp little DPF filter bit that

742
00:26:17,530 --> 00:26:20,350
will keep you from having to deal with

743
00:26:19,090 --> 00:26:21,429
headers basic layer keep you haven't

744
00:26:20,350 --> 00:26:21,779
excuse me keep you from having to give

745
00:26:21,430 --> 00:26:24,210
us in

746
00:26:21,779 --> 00:26:25,919
finn's resets so on and so forth means

747
00:26:24,210 --> 00:26:27,529
less time spent in user land less fewer

748
00:26:25,919 --> 00:26:29,580
copies from kernel user land and so on

749
00:26:27,529 --> 00:26:31,769
there's a few tools that do this already

750
00:26:29,580 --> 00:26:33,029
TCP dump we've I mean we used it a few

751
00:26:31,769 --> 00:26:34,889
seconds ago it works pretty good the

752
00:26:33,029 --> 00:26:36,659
output is not that great and easily

753
00:26:34,889 --> 00:26:38,248
possible I've done it the first

754
00:26:36,659 --> 00:26:40,219
iteration of the LDAP hash thing was

755
00:26:38,249 --> 00:26:43,440
just TCP dump in Perl worked really good

756
00:26:40,219 --> 00:26:45,330
d sniff is old venerable and works

757
00:26:43,440 --> 00:26:48,119
there's a whole suite of tools that you

758
00:26:45,330 --> 00:26:49,799
mostly are still relevant and they have

759
00:26:48,119 --> 00:26:50,999
a lot of interesting pcap stuff built in

760
00:26:49,799 --> 00:26:52,619
and of course Wireshark or T shark

761
00:26:50,999 --> 00:26:54,659
cheese chart gives you a nice

762
00:26:52,619 --> 00:26:58,529
configurable output Y shark is of course

763
00:26:54,659 --> 00:26:59,729
easy to read so demo a little thing

764
00:26:58,529 --> 00:27:01,169
called telnet watcher I wrote this

765
00:26:59,729 --> 00:27:05,129
originally to watch a telnet honeypot

766
00:27:01,169 --> 00:27:07,349
many years ago you know it sends it just

767
00:27:05,129 --> 00:27:09,119
takes whatever ya know payload TCP UDP

768
00:27:07,349 --> 00:27:10,379
Pio and príncipe standard out I was

769
00:27:09,119 --> 00:27:13,799
watching like people tell that in live

770
00:27:10,379 --> 00:27:15,299
it was interesting I've I've learned the

771
00:27:13,799 --> 00:27:17,219
hard way not to put things on github and

772
00:27:15,299 --> 00:27:18,929
expect them to not be used in ways I

773
00:27:17,219 --> 00:27:20,519
don't expect so all of these have

774
00:27:18,929 --> 00:27:22,409
something that makes them not just copy

775
00:27:20,519 --> 00:27:23,969
paste able by people you wouldn't want

776
00:27:22,409 --> 00:27:26,669
to use your code on this one's written

777
00:27:23,969 --> 00:27:28,289
for open BSD open BSD is quite nice for

778
00:27:26,669 --> 00:27:29,969
development it's not a lot of them BSD

779
00:27:28,289 --> 00:27:32,070
targets out there so probably is okay

780
00:27:29,969 --> 00:27:33,690
their source code is pretty simple feel

781
00:27:32,070 --> 00:27:36,149
free to use it modify it as you'd like

782
00:27:33,690 --> 00:27:38,549
it's you know pretty much the same as

783
00:27:36,149 --> 00:27:41,129
this TCP dump line here so we have a

784
00:27:38,549 --> 00:27:41,519
contrived scenario which is from real

785
00:27:41,129 --> 00:27:43,019
life

786
00:27:41,519 --> 00:27:44,190
so you've landed on a host involved in

787
00:27:43,019 --> 00:27:47,669
ftp ting off some bad financial

788
00:27:44,190 --> 00:27:49,919
transactions and you've got root so yes

789
00:27:47,669 --> 00:27:51,509
actually happened this is about what

790
00:27:49,919 --> 00:27:53,009
this looks like so we'll have some

791
00:27:51,509 --> 00:27:56,039
transaction transfer box running enough

792
00:27:53,009 --> 00:27:57,570
to BD a bank it's sending you know that

793
00:27:56,039 --> 00:27:59,789
we'll use for FTP coms to send

794
00:27:57,570 --> 00:28:01,499
transactions to and we'll have somebody

795
00:27:59,789 --> 00:28:03,629
who SSH is into it presumably to admin

796
00:28:01,499 --> 00:28:05,639
it or maybe the SCP into it and then we

797
00:28:03,629 --> 00:28:11,759
have us delete hack stores doing our

798
00:28:05,639 --> 00:28:14,998
thing on route that did not switch there

799
00:28:11,759 --> 00:28:15,629
we go alright now did I remember to set

800
00:28:14,999 --> 00:28:19,160
the lang

801
00:28:15,629 --> 00:28:21,980
oh I didn't

802
00:28:19,160 --> 00:28:23,270
so we'll just go like this would not be

803
00:28:21,980 --> 00:28:24,620
a demo if I didn't do something wrong

804
00:28:23,270 --> 00:28:27,010
all right so this would tell that

805
00:28:24,620 --> 00:28:29,139
watcher so we're on his route and

806
00:28:27,010 --> 00:28:31,429
hopefully you're not actually running a

807
00:28:29,140 --> 00:28:34,100
you know getting help on target that's

808
00:28:31,429 --> 00:28:36,980
about what that looks like so we'll ask

809
00:28:34,100 --> 00:28:38,240
it to caption port 21 on vio 0 and

810
00:28:36,980 --> 00:28:40,309
Alaska to print out unprintable bytes is

811
00:28:38,240 --> 00:28:42,410
hex I when I was TCP dumping or whenever

812
00:28:40,309 --> 00:28:43,520
excuse me actually watching telnet that

813
00:28:42,410 --> 00:28:44,809
what has a lot of protocol stuff that

814
00:28:43,520 --> 00:28:47,210
doesn't get printed so it's kind of

815
00:28:44,809 --> 00:28:50,059
interesting also I found out that new

816
00:28:47,210 --> 00:28:53,600
lines and crlf don't always translate

817
00:28:50,059 --> 00:28:55,940
from system to system very well so we're

818
00:28:53,600 --> 00:28:57,469
dumping and looky there we have banker

819
00:28:55,940 --> 00:28:59,720
Joe logging in and we got his creds

820
00:28:57,470 --> 00:29:01,880
that was some unfortunately a pretty

821
00:28:59,720 --> 00:29:03,440
realistic thing that in several seconds

822
00:29:01,880 --> 00:29:06,919
now we have credit you know maybe we can

823
00:29:03,440 --> 00:29:09,020
reuse who knows and we see him batching

824
00:29:06,919 --> 00:29:11,179
off a file so now we say hey by the way

825
00:29:09,020 --> 00:29:13,549
bankers I also have your data I learned

826
00:29:11,179 --> 00:29:14,809
the hard way not to see I got rude I was

827
00:29:13,549 --> 00:29:15,980
talking to any HR guy and it's like hey

828
00:29:14,809 --> 00:29:18,770
dude I got rude on your system he's like

829
00:29:15,980 --> 00:29:21,950
no it was like so I can like see all

830
00:29:18,770 --> 00:29:23,210
your files he's like ok it's like so

831
00:29:21,950 --> 00:29:24,980
like I can read write stuff he's like

832
00:29:23,210 --> 00:29:26,750
yeah it's I t's problems like hey look

833
00:29:24,980 --> 00:29:28,340
payroll database like I found my salary

834
00:29:26,750 --> 00:29:32,929
I could like add a zero he's like oh my

835
00:29:28,340 --> 00:29:38,330
god so um oh my god we got transfers and

836
00:29:32,929 --> 00:29:41,600
we could change them in flight cool so

837
00:29:38,330 --> 00:29:43,580
um I was talking to it was a UNIX admin

838
00:29:41,600 --> 00:29:46,459
actually I'm Amazon the guy believed and

839
00:29:43,580 --> 00:29:48,199
he found himself on a target we're on a

840
00:29:46,460 --> 00:29:50,840
box he's admitting he's not a red guy

841
00:29:48,200 --> 00:29:52,460
and he only had true story the OpenBSD

842
00:29:50,840 --> 00:29:53,539
installer and he needed to get if I was

843
00:29:52,460 --> 00:29:56,360
like the one thing that would boot this

844
00:29:53,539 --> 00:29:57,289
and he needed to get files off OBS the

845
00:29:56,360 --> 00:29:58,879
Installer is like a really small memory

846
00:29:57,289 --> 00:30:01,190
footprint so like you have memory that's

847
00:29:58,880 --> 00:30:02,780
all messed up it works and we're like

848
00:30:01,190 --> 00:30:04,280
how do we do this and he we came up with

849
00:30:02,780 --> 00:30:07,280
the idea we used the user agent field

850
00:30:04,280 --> 00:30:09,440
open BSD FTP does HTTP I would use the

851
00:30:07,280 --> 00:30:12,049
user agent field which works it gets

852
00:30:09,440 --> 00:30:15,620
logged so in this case well you know

853
00:30:12,049 --> 00:30:16,820
notionally say on this box we have SSH

854
00:30:15,620 --> 00:30:19,520
say we have access to this and we want

855
00:30:16,820 --> 00:30:21,139
to exfil the key I'll just use the

856
00:30:19,520 --> 00:30:23,120
password field it's not likely to be

857
00:30:21,140 --> 00:30:24,830
logged anywhere you know there's a

858
00:30:23,120 --> 00:30:26,209
reasonable expectation that this box can

859
00:30:24,830 --> 00:30:28,699
be doing a lot of FTP maybe not this box

860
00:30:26,210 --> 00:30:29,840
so clean nobody's looking too hard and

861
00:30:28,700 --> 00:30:30,840
you know something along these lines

862
00:30:29,840 --> 00:30:33,389
will

863
00:30:30,840 --> 00:30:37,110
we'll get an SSH key probably just tell

864
00:30:33,389 --> 00:30:40,199
it watch your grab it so that is the

865
00:30:37,110 --> 00:30:42,449
command will run on the SSH box the

866
00:30:40,200 --> 00:30:43,830
internal box so yeah we'll dump on if

867
00:30:42,450 --> 00:30:46,350
you really really care about the user in

868
00:30:43,830 --> 00:30:46,889
pass specifically the password anonymous

869
00:30:46,350 --> 00:30:48,840
isn't up

870
00:30:46,889 --> 00:30:51,600
there's my little uh that's cool

871
00:30:48,840 --> 00:30:57,029
anonymous is anonymous they're sometimes

872
00:30:51,600 --> 00:31:01,289
typos get past your one sorry oh cool so

873
00:30:57,029 --> 00:31:03,330
lurks got our pass get our pass cool so

874
00:31:01,289 --> 00:31:05,700
we'll basically reverse the Pearl we

875
00:31:03,330 --> 00:31:07,499
used reverse the said pearl is an

876
00:31:05,700 --> 00:31:08,999
awesome tool to put on target when you

877
00:31:07,499 --> 00:31:11,399
need something that you can't just like

878
00:31:08,999 --> 00:31:12,600
ride utility because you can't read that

879
00:31:11,399 --> 00:31:14,428
and I can't read that and I wrote that

880
00:31:12,600 --> 00:31:18,719
and certainly the dude triaging this

881
00:31:14,429 --> 00:31:20,369
isn't gonna read that and there we go we

882
00:31:18,720 --> 00:31:22,049
get our private key it's it's actually a

883
00:31:20,369 --> 00:31:23,340
lot slower this than this in real life s

884
00:31:22,049 --> 00:31:25,230
Kinnaman has this nice thing we're gonna

885
00:31:23,340 --> 00:31:26,639
like compress pauses like you watch a

886
00:31:25,230 --> 00:31:28,019
cooking show and it's like I put this in

887
00:31:26,639 --> 00:31:32,610
the oven and look it's done already

888
00:31:28,019 --> 00:31:35,970
that's gonna does that for us so as Mike

889
00:31:32,610 --> 00:31:37,918
a sniffing the wire by the way alright

890
00:31:35,970 --> 00:31:39,659
so next thing so that was cool so we we

891
00:31:37,919 --> 00:31:41,039
have think we've watched the wire we've

892
00:31:39,659 --> 00:31:43,080
got comms we sort of injected in a

893
00:31:41,039 --> 00:31:47,190
little like how to compile a demo let's

894
00:31:43,080 --> 00:31:47,999
actually make some comms pardon me let's

895
00:31:47,190 --> 00:31:51,929
actually make some comps without a

896
00:31:47,999 --> 00:31:53,399
socket so um there-there is technically

897
00:31:51,929 --> 00:31:55,860
a packet socket on Linux there's BPF

898
00:31:53,399 --> 00:31:57,418
device on most of the vsts everything

899
00:31:55,860 --> 00:31:59,610
has some underlying mechanism they don't

900
00:31:57,419 --> 00:32:01,529
usually show up in that stat peanut this

901
00:31:59,610 --> 00:32:03,449
is what the the university that I was

902
00:32:01,529 --> 00:32:04,619
red teaming against did they just put

903
00:32:03,450 --> 00:32:06,659
this in a loop it was like anything that

904
00:32:04,619 --> 00:32:08,999
was not port 80 dropped and then port 80

905
00:32:06,659 --> 00:32:11,220
bound and I don't remember why I didn't

906
00:32:08,999 --> 00:32:13,220
use it but I didn't so we'll just mooch

907
00:32:11,220 --> 00:32:16,980
existing comms anything you can get from

908
00:32:13,220 --> 00:32:18,480
c2 to target somehow you can use because

909
00:32:16,980 --> 00:32:19,889
you'll be able to see it soon when you

910
00:32:18,480 --> 00:32:21,690
write your BP I filled it properly

911
00:32:19,889 --> 00:32:23,129
um you know like Buzz Lightyear it's not

912
00:32:21,690 --> 00:32:26,570
not flying it's falling with style this

913
00:32:23,129 --> 00:32:30,178
is not comes as such sniffing with style

914
00:32:26,570 --> 00:32:33,090
if you're going to do like box - box -

915
00:32:30,179 --> 00:32:35,299
box - pcap logging happens depending on

916
00:32:33,090 --> 00:32:38,610
how you're getting it there I will use

917
00:32:35,299 --> 00:32:39,480
SSH that will cause some logging the

918
00:32:38,610 --> 00:32:41,939
yeah you don't actually need to go

919
00:32:39,480 --> 00:32:42,899
direct host to host bonus points if you

920
00:32:41,940 --> 00:32:44,490
have something else to do it and then

921
00:32:42,899 --> 00:32:46,620
people are like hey so what is

922
00:32:44,490 --> 00:32:47,730
listening and then you you start to use

923
00:32:46,620 --> 00:32:49,020
this and like hey yeah I'll just like

924
00:32:47,730 --> 00:32:50,100
implement some protocol or I'll keep

925
00:32:49,020 --> 00:32:51,660
like message numbers so I know to

926
00:32:50,100 --> 00:32:53,428
retransmit and then you're like I need

927
00:32:51,660 --> 00:32:55,290
something tell me to retransmit like

928
00:32:53,429 --> 00:32:56,670
well maybe I don't need every retransmit

929
00:32:55,290 --> 00:33:00,120
and you realize you're implementing TCP

930
00:32:56,670 --> 00:33:02,040
I have about six different iterations of

931
00:33:00,120 --> 00:33:04,860
TCP over DNS and every time I'm like I

932
00:33:02,040 --> 00:33:05,850
might reopen TCP so till I have out

933
00:33:04,860 --> 00:33:08,280
there pcap noggin this is the one I

934
00:33:05,850 --> 00:33:09,300
wrote for that that thing I mean it just

935
00:33:08,280 --> 00:33:10,320
sniffs the wired weights or something

936
00:33:09,300 --> 00:33:12,389
interesting so you can either give it

937
00:33:10,320 --> 00:33:14,189
the word command a command to run and

938
00:33:12,390 --> 00:33:15,300
the word command anywhere in a packet or

939
00:33:14,190 --> 00:33:17,460
as long as it can sense it on the wire

940
00:33:15,300 --> 00:33:19,678
or you can give it the word call back an

941
00:33:17,460 --> 00:33:21,660
IP and a port colon port or underscore

942
00:33:19,679 --> 00:33:23,640
port and the word call back it'll call

943
00:33:21,660 --> 00:33:24,570
you back with a shell it's nice and

944
00:33:23,640 --> 00:33:26,760
stack bullets it's out there you're

945
00:33:24,570 --> 00:33:28,919
welcome to use it runs standalone its

946
00:33:26,760 --> 00:33:32,250
cross-platform I've put it on FreeBSD

947
00:33:28,920 --> 00:33:35,030
OpenBSD Solaris Linux missing one

948
00:33:32,250 --> 00:33:37,710
somewhere probably not Windows so much

949
00:33:35,030 --> 00:33:39,000
it's also don't I don't recommend it

950
00:33:37,710 --> 00:33:40,440
using it in an actual Red Team

951
00:33:39,000 --> 00:33:42,059
engagement as it does no encryption no

952
00:33:40,440 --> 00:33:44,250
authentication so nobody play attack

953
00:33:42,059 --> 00:33:45,420
protection so if you're gonna use it you

954
00:33:44,250 --> 00:33:47,850
probably need to add that kind of stuff

955
00:33:45,420 --> 00:33:49,230
in and for the scenario we will say we

956
00:33:47,850 --> 00:33:51,419
have a log server compromised already

957
00:33:49,230 --> 00:33:54,270
we've got root on it so back to our

958
00:33:51,420 --> 00:33:55,830
transaction transfer box oh we have some

959
00:33:54,270 --> 00:33:57,240
syslog server we have root on it we

960
00:33:55,830 --> 00:33:58,379
don't have direct comms to it because

961
00:33:57,240 --> 00:33:59,540
this is the only thing internet facing

962
00:33:58,380 --> 00:34:01,890
over on the Internet and we would like

963
00:33:59,540 --> 00:34:05,250
to get a call back from syslog we'd like

964
00:34:01,890 --> 00:34:15,899
somehow to get a shell in there there's

965
00:34:05,250 --> 00:34:18,989
the asking of a link again for this so

966
00:34:15,899 --> 00:34:23,819
vio 0 is our local box so weird dot 42

967
00:34:18,989 --> 00:34:25,770
locally and this is what we'll be

968
00:34:23,820 --> 00:34:27,659
calling what we'll be using to trigger

969
00:34:25,770 --> 00:34:31,980
our implant we can assume you have pcap

970
00:34:27,659 --> 00:34:33,270
knock on the syslog box already so what

971
00:34:31,980 --> 00:34:35,219
we'll be using to tell the implant to

972
00:34:33,270 --> 00:34:37,109
call us back we'll use this as a login

973
00:34:35,219 --> 00:34:39,689
name obviously it's not a valid login

974
00:34:37,109 --> 00:34:41,369
but probably not a valid login name but

975
00:34:39,690 --> 00:34:42,690
what we'll do is make a syslog message

976
00:34:41,369 --> 00:34:44,100
that goes to the ssh server in the

977
00:34:42,690 --> 00:34:45,149
estate you know say yeah I'll call you

978
00:34:44,100 --> 00:34:50,940
back

979
00:34:45,149 --> 00:34:52,859
that's 43 where SS aging to 42 is us and

980
00:34:50,940 --> 00:34:54,750
we'll background SSH I'm all this is

981
00:34:52,859 --> 00:34:56,340
just to probably make it quicker and not

982
00:34:54,750 --> 00:34:57,210
require terminal input and we'll sketch

983
00:34:56,340 --> 00:34:59,339
it with neck hat

984
00:34:57,210 --> 00:35:02,800
[Music]

985
00:34:59,339 --> 00:35:04,779
all right we have it listening typical

986
00:35:02,800 --> 00:35:10,720
sshe stuff here we go we got a callback

987
00:35:04,780 --> 00:35:12,760
for 44 so the log server 44 and that

988
00:35:10,720 --> 00:35:13,959
this is the you know typical ssh like

989
00:35:12,760 --> 00:35:16,720
hey permission denied so i probably

990
00:35:13,960 --> 00:35:18,490
logged somewhere let's have a look it's

991
00:35:16,720 --> 00:35:21,700
what it looks like okay in it is me

992
00:35:18,490 --> 00:35:23,348
painted is just been sh with its file

993
00:35:21,700 --> 00:35:24,279
descriptor 0 1 & 2 so standard incident

994
00:35:23,349 --> 00:35:25,630
about standard error connected to the

995
00:35:24,280 --> 00:35:27,400
network it is dupe 2 then a network

996
00:35:25,630 --> 00:35:31,240
connection over to it notice I got PS

997
00:35:27,400 --> 00:35:32,380
which is psi was running as a child

998
00:35:31,240 --> 00:35:35,109
process of K in it but a whole bunch

999
00:35:32,380 --> 00:35:36,640
more that's because I couldn't really

1000
00:35:35,109 --> 00:35:39,460
control how many times it was logged was

1001
00:35:36,640 --> 00:35:41,650
talking about impotency this isn't an

1002
00:35:39,460 --> 00:35:44,079
amaz route it's cool too so that's

1003
00:35:41,650 --> 00:35:46,210
that's where my code was living so it's

1004
00:35:44,079 --> 00:35:49,359
in system DS you know it's injected into

1005
00:35:46,210 --> 00:35:50,940
system D works pretty well that's how I

1006
00:35:49,359 --> 00:35:52,598
did it

1007
00:35:50,940 --> 00:35:54,550
let's have a look at what it actually

1008
00:35:52,599 --> 00:35:56,140
looks at on the wire notice um injecting

1009
00:35:54,550 --> 00:35:59,079
in the lip pcap are sees me injecting a

1010
00:35:56,140 --> 00:36:00,700
TCP dump did not work very well I'm not

1011
00:35:59,079 --> 00:36:04,510
sure why I didn't have time to dig into

1012
00:36:00,700 --> 00:36:06,460
that unfortunately so got a syslog

1013
00:36:04,510 --> 00:36:08,650
message there we go this is log message

1014
00:36:06,460 --> 00:36:10,059
looks like a syslog message except it

1015
00:36:08,650 --> 00:36:12,430
has our nav magic little string in there

1016
00:36:10,059 --> 00:36:14,619
so it calls us back all these by the way

1017
00:36:12,430 --> 00:36:17,529
are on github and I'll link that as well

1018
00:36:14,619 --> 00:36:20,200
on Twitter after the talk the W there is

1019
00:36:17,530 --> 00:36:22,809
just so I can know TCP dump is finished

1020
00:36:20,200 --> 00:36:24,549
I learned the hard way to specify a

1021
00:36:22,809 --> 00:36:26,109
packet capture counting TCP dump when

1022
00:36:24,549 --> 00:36:34,750
doing these things but I have met Kat

1023
00:36:26,109 --> 00:36:37,000
because ctrl C does not kill TCP dump so

1024
00:36:34,750 --> 00:36:38,619
that's cool so we have sort of two a

1025
00:36:37,000 --> 00:36:40,869
coms we have inbound columns we don't

1026
00:36:38,619 --> 00:36:42,069
really have outbound coms and if there's

1027
00:36:40,869 --> 00:36:45,790
firewalling the thing won't necessarily

1028
00:36:42,069 --> 00:36:48,520
call us back so we have this ability to

1029
00:36:45,790 --> 00:36:51,069
read pack read frames from the device

1030
00:36:48,520 --> 00:36:53,619
and get them into user land we can open

1031
00:36:51,069 --> 00:36:56,109
a tap device Linux is time tap thing

1032
00:36:53,619 --> 00:36:58,660
your my tap device and send frames from

1033
00:36:56,109 --> 00:37:00,549
user lands straight to the kernel and IP

1034
00:36:58,660 --> 00:37:02,078
tables slash net filter will filter on

1035
00:37:00,549 --> 00:37:03,819
top zero or one of your top devices but

1036
00:37:02,079 --> 00:37:05,410
it probably is not configured to do so

1037
00:37:03,819 --> 00:37:07,660
in a lot of circumstances as a policy is

1038
00:37:05,410 --> 00:37:10,529
dropped probably isn't likewise we can

1039
00:37:07,660 --> 00:37:11,879
take that tap device read frames

1040
00:37:10,530 --> 00:37:14,250
get into userland we can inject with

1041
00:37:11,880 --> 00:37:18,270
pcap which means we bypass a kernel

1042
00:37:14,250 --> 00:37:21,120
nicely so you know basically we're by

1043
00:37:18,270 --> 00:37:22,110
past firewall nicely so no firewalls

1044
00:37:21,120 --> 00:37:23,670
cool

1045
00:37:22,110 --> 00:37:24,690
there's also by the way I didn't write

1046
00:37:23,670 --> 00:37:26,250
the code for this but it makes a nifty

1047
00:37:24,690 --> 00:37:27,720
VPN if you take the tap device put it

1048
00:37:26,250 --> 00:37:29,850
remotely have some sort of pre-existing

1049
00:37:27,720 --> 00:37:31,799
comms between the two and just use lippy

1050
00:37:29,850 --> 00:37:33,839
cap on the victims side to inject frames

1051
00:37:31,800 --> 00:37:35,580
and sniff frames there's a similar

1052
00:37:33,840 --> 00:37:36,570
functionality and cobalt strike can't

1053
00:37:35,580 --> 00:37:37,500
for the life of me remember the name of

1054
00:37:36,570 --> 00:37:39,720
it

1055
00:37:37,500 --> 00:37:42,060
SSH is w option does something similar

1056
00:37:39,720 --> 00:37:44,430
just with extra steps um it's also was

1057
00:37:42,060 --> 00:37:46,320
like a first real offensive malicious

1058
00:37:44,430 --> 00:37:48,210
pcap project I made other than pcap

1059
00:37:46,320 --> 00:37:49,710
knock which is kind of simple um so

1060
00:37:48,210 --> 00:37:51,180
basically we've got Network talks to

1061
00:37:49,710 --> 00:37:52,590
pcap talks to our user lying process

1062
00:37:51,180 --> 00:37:56,370
doctor staff is your own kernel and then

1063
00:37:52,590 --> 00:37:57,900
back tool called bypass FW bypass

1064
00:37:56,370 --> 00:37:59,910
firewall it does exactly what we said

1065
00:37:57,900 --> 00:38:02,400
again to avoid copy pasting and finding

1066
00:37:59,910 --> 00:38:04,560
it and having security researchers tweet

1067
00:38:02,400 --> 00:38:06,180
at me it's nasty grams this will only

1068
00:38:04,560 --> 00:38:06,660
work on open base to you right now it's

1069
00:38:06,180 --> 00:38:08,850
um

1070
00:38:06,660 --> 00:38:10,279
you know a minor modifications it'll

1071
00:38:08,850 --> 00:38:14,370
work on Linux or your next engagement

1072
00:38:10,280 --> 00:38:16,740
the one caveat is BPF filters and if

1073
00:38:14,370 --> 00:38:18,480
config kind of do you can't necessarily

1074
00:38:16,740 --> 00:38:20,129
just say yeah I'll just make up a MAC

1075
00:38:18,480 --> 00:38:22,080
address and I'll th the P and IP address

1076
00:38:20,130 --> 00:38:24,000
and it works especially in virtual

1077
00:38:22,080 --> 00:38:27,060
machines and like a VirtualBox or VMware

1078
00:38:24,000 --> 00:38:28,470
the hypervisor knows what address what

1079
00:38:27,060 --> 00:38:29,580
MAC address should be on that switch and

1080
00:38:28,470 --> 00:38:31,589
if you get it wrong then they'll be like

1081
00:38:29,580 --> 00:38:33,750
no someone's doing something funny

1082
00:38:31,590 --> 00:38:36,060
or the other way happens and it's like

1083
00:38:33,750 --> 00:38:38,940
you're sniffing sees everything it's

1084
00:38:36,060 --> 00:38:39,840
like one supposed to see that so um take

1085
00:38:38,940 --> 00:38:41,430
the network you've been on and we'll say

1086
00:38:39,840 --> 00:38:42,780
FTP for whatever reason isn't working

1087
00:38:41,430 --> 00:38:44,040
probably because the last engagement or

1088
00:38:42,780 --> 00:38:45,540
like hey we just like did bad things

1089
00:38:44,040 --> 00:38:47,940
with FTP please switch to something

1090
00:38:45,540 --> 00:38:49,320
better but you know we still have the

1091
00:38:47,940 --> 00:38:52,170
guy's creds he didn't change it it still

1092
00:38:49,320 --> 00:38:53,700
gets us SSH and we want to FTP for

1093
00:38:52,170 --> 00:38:55,800
whatever Breezies there's the source for

1094
00:38:53,700 --> 00:38:57,689
this ask you cast again it's what it

1095
00:38:55,800 --> 00:39:00,710
will look like this is not the network

1096
00:38:57,690 --> 00:39:02,430
this time this is the on target like

1097
00:39:00,710 --> 00:39:04,230
architecture for lack of a better word

1098
00:39:02,430 --> 00:39:05,609
notional is not actually how it works if

1099
00:39:04,230 --> 00:39:08,490
you look in kernel code but now we're

1100
00:39:05,610 --> 00:39:10,170
gonna go get a frame onto the Nick will

1101
00:39:08,490 --> 00:39:11,549
have a BPF filter that says yes I would

1102
00:39:10,170 --> 00:39:13,890
like that frame get into our user line

1103
00:39:11,550 --> 00:39:15,210
process Jack didn't via the tap device

1104
00:39:13,890 --> 00:39:16,259
into the kernel likewise the kernels say

1105
00:39:15,210 --> 00:39:18,300
yeah I want to sum something out the tap

1106
00:39:16,260 --> 00:39:21,270
device we read from the tap device and

1107
00:39:18,300 --> 00:39:22,950
go out tap device by the way she

1108
00:39:21,270 --> 00:39:24,339
probably shoulda mentioned earlier most

1109
00:39:22,950 --> 00:39:26,288
normal Ethernet devices or interface

1110
00:39:24,339 --> 00:39:28,328
you have Colonel on one side and copper

1111
00:39:26,289 --> 00:39:30,099
fiber Wi-Fi whatever in the other side

1112
00:39:28,329 --> 00:39:31,599
tap device you have Colonel on one side

1113
00:39:30,099 --> 00:39:33,160
and software on the other side

1114
00:39:31,599 --> 00:39:34,690
so the colonel as far as it knows it's

1115
00:39:33,160 --> 00:39:36,069
putting a frame on the network but the

1116
00:39:34,690 --> 00:39:38,170
driver is your code you can do whatever

1117
00:39:36,069 --> 00:39:47,650
you want with it like injected on to the

1118
00:39:38,170 --> 00:39:49,619
network again or so what it looks like

1119
00:39:47,650 --> 00:39:52,599
in practice

1120
00:39:49,619 --> 00:39:56,140
so FTP did not work for us we can still

1121
00:39:52,599 --> 00:39:57,219
SSH in you got his password what on

1122
00:39:56,140 --> 00:40:00,069
earth is going on this is an open BSD

1123
00:39:57,219 --> 00:40:01,930
box I was like do I use Linux or open

1124
00:40:00,069 --> 00:40:03,489
BSD and it was like you like a pilot for

1125
00:40:01,930 --> 00:40:06,819
lytic syrup from BSD and that solved

1126
00:40:03,489 --> 00:40:08,559
that this is pretty stock open BSD

1127
00:40:06,819 --> 00:40:10,119
firewall this it's a last match wind

1128
00:40:08,559 --> 00:40:12,880
thing so we'll drop in on our interface

1129
00:40:10,119 --> 00:40:16,509
and in on our interface and only allow

1130
00:40:12,880 --> 00:40:17,410
it on port 22 so until there's five

1131
00:40:16,509 --> 00:40:22,869
minutes left so we're gonna go really

1132
00:40:17,410 --> 00:40:26,019
quite quickly okay that explains why

1133
00:40:22,869 --> 00:40:29,680
that didn't work put up our binary get

1134
00:40:26,019 --> 00:40:31,299
on target we're gonna grab the MAC

1135
00:40:29,680 --> 00:40:33,430
address of the existing one because this

1136
00:40:31,299 --> 00:40:34,690
is VM and we have two you can either

1137
00:40:33,430 --> 00:40:36,009
make the tap device before or after

1138
00:40:34,690 --> 00:40:37,839
let's software make the tap device and

1139
00:40:36,009 --> 00:40:39,640
set parameters up to you so I find that

1140
00:40:37,839 --> 00:40:44,200
easier to read anyways cool

1141
00:40:39,640 --> 00:40:47,950
they worked I'll bypass it and FTP works

1142
00:40:44,200 --> 00:40:49,509
again maybe there we go so that nifty

1143
00:40:47,950 --> 00:40:52,629
little way to bypass fire with minimal

1144
00:40:49,509 --> 00:40:53,950
effort minimal changes to the box got em

1145
00:40:52,630 --> 00:40:55,660
something in like three months later it

1146
00:40:53,950 --> 00:40:57,368
was big incidents but up we need every

1147
00:40:55,660 --> 00:41:00,219
config change you made to the box was

1148
00:40:57,369 --> 00:41:02,200
like I ran a program so there is no

1149
00:41:00,219 --> 00:41:03,999
config changes there once you stop the

1150
00:41:02,200 --> 00:41:07,180
program writing alright last thing in

1151
00:41:03,999 --> 00:41:09,488
three minutes now Steve Hanks me dr so

1152
00:41:07,180 --> 00:41:11,859
this is a little Windows programs like

1153
00:41:09,489 --> 00:41:15,130
hey it's all UNIX stuff windows still

1154
00:41:11,859 --> 00:41:17,229
has a very very large footprint TLDR it

1155
00:41:15,130 --> 00:41:19,809
watches for packets if it sees a packet

1156
00:41:17,229 --> 00:41:22,299
it grabs IP IP port pairs so the four

1157
00:41:19,809 --> 00:41:23,529
five tuple and ask the Windows kernel to

1158
00:41:22,299 --> 00:41:26,670
please drop it

1159
00:41:23,529 --> 00:41:28,779
params called EDR sniper source and I

1160
00:41:26,670 --> 00:41:30,549
wrote a little wiper to test it with so

1161
00:41:28,779 --> 00:41:32,920
I just put I googled like best free AV

1162
00:41:30,549 --> 00:41:33,869
best free antivirus 2019 put it on

1163
00:41:32,920 --> 00:41:36,269
target

1164
00:41:33,869 --> 00:41:37,170
test VM and put a wipe around the test

1165
00:41:36,269 --> 00:41:38,339
VM

1166
00:41:37,170 --> 00:41:40,680
please don't actually run that in real

1167
00:41:38,339 --> 00:41:43,130
life this is what this looks like notice

1168
00:41:40,680 --> 00:41:46,589
inside the firewall the end of system

1169
00:41:43,130 --> 00:41:47,549
cool there we go no s Kenema just a

1170
00:41:46,589 --> 00:41:49,440
bunch of screen stuff so we have the

1171
00:41:47,549 --> 00:41:50,819
wiper here and we have EDR sniper

1172
00:41:49,440 --> 00:41:52,259
reporting what it's dropped here and

1173
00:41:50,819 --> 00:41:56,489
anything starting with a seven will be

1174
00:41:52,259 --> 00:41:58,589
the antivirus addresses so yeah so it

1175
00:41:56,489 --> 00:42:00,029
dropped some things and you know av

1176
00:41:58,589 --> 00:42:03,989
called out was like hey is this okay and

1177
00:42:00,029 --> 00:42:05,940
it got a since an AK and a reset and

1178
00:42:03,989 --> 00:42:07,410
then I'd like drop some more things that

1179
00:42:05,940 --> 00:42:08,190
probably shouldn't be gone or a blew

1180
00:42:07,410 --> 00:42:10,589
away some more things that probably

1181
00:42:08,190 --> 00:42:12,960
shouldn't be gone and he was like hey is

1182
00:42:10,589 --> 00:42:16,109
that cool maybe there yeah it probably

1183
00:42:12,960 --> 00:42:17,430
is alright yeah and then that happened

1184
00:42:16,109 --> 00:42:19,769
and at that point

1185
00:42:17,430 --> 00:42:21,029
thanks this is all this is all just

1186
00:42:19,769 --> 00:42:23,038
normal Microsoft calms the system is

1187
00:42:21,029 --> 00:42:27,329
still up that was like hey what happens

1188
00:42:23,039 --> 00:42:28,469
if I do this so that happened so you

1189
00:42:27,329 --> 00:42:29,489
know I've actually been asking over the

1190
00:42:28,469 --> 00:42:31,950
past few days hey what happens if you

1191
00:42:29,489 --> 00:42:33,269
don't have carbon black Splunk OS query

1192
00:42:31,950 --> 00:42:34,558
what not in the answer is well at a

1193
00:42:33,269 --> 00:42:36,118
certain point we just got to go knock on

1194
00:42:34,559 --> 00:42:38,849
the door and tap on somebody's shoulder

1195
00:42:36,119 --> 00:42:40,829
so the flip side is if you drop all tcp

1196
00:42:38,849 --> 00:42:44,249
your user like your victim will probably

1197
00:42:40,829 --> 00:42:48,119
notice I likely don't have time for a

1198
00:42:44,249 --> 00:42:50,968
summary so that I knew was gonna be

1199
00:42:48,119 --> 00:42:52,529
running out of time as did my cat feel

1200
00:42:50,969 --> 00:42:56,009
free to just look at the slides you know

1201
00:42:52,529 --> 00:42:57,569
the TLDR here a couple ideas if

1202
00:42:56,009 --> 00:43:00,420
anybody's looking for a quick fun peek

1203
00:42:57,569 --> 00:43:02,579
at project any questions which I'll take

1204
00:43:00,420 --> 00:43:06,210
afterwards which I'm told I'll take

1205
00:43:02,579 --> 00:43:08,779
afterwards the Twitter QR code there and

1206
00:43:06,210 --> 00:43:08,779
thank you very much

