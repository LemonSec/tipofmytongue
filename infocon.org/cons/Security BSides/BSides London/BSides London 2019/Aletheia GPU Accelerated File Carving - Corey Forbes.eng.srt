1
00:00:02,720 --> 00:00:09,510
so yeah I'm gonna talk to you today

2
00:00:06,330 --> 00:00:12,719
about my dissertation project I done an

3
00:00:09,510 --> 00:00:14,730
investigation and to gpgpu enabled

4
00:00:12,719 --> 00:00:16,529
failed carving and if you don't know

5
00:00:14,730 --> 00:00:22,560
what that as I will explain its

6
00:00:16,529 --> 00:00:27,890
hopefully so yep

7
00:00:22,560 --> 00:00:30,390
I'm Corey Forbes I've recently left

8
00:00:27,890 --> 00:00:33,380
Alberti the university that doesn't

9
00:00:30,390 --> 00:00:36,180
exist the Northwest save the world I've

10
00:00:33,380 --> 00:00:37,890
just also finished work at the Scottish

11
00:00:36,180 --> 00:00:40,320
business resilience centre and I'm

12
00:00:37,890 --> 00:00:46,680
moving down here to work at NWR so

13
00:00:40,320 --> 00:00:49,280
that's gonna be fun yes so what is fail

14
00:00:46,680 --> 00:00:51,809
coming I hope everyone here knows and

15
00:00:49,280 --> 00:00:53,010
does anyone want to put their hand up if

16
00:00:51,809 --> 00:00:59,629
they do actually know what failed

17
00:00:53,010 --> 00:01:03,510
carving is okay maybe not then and so

18
00:00:59,629 --> 00:01:09,539
fail carving as the collection of fails

19
00:01:03,510 --> 00:01:11,490
on the raw hard disk because when files

20
00:01:09,540 --> 00:01:12,450
are deleted they're not really like

21
00:01:11,490 --> 00:01:15,960
removed

22
00:01:12,450 --> 00:01:18,540
they're just dereferenced so what we do

23
00:01:15,960 --> 00:01:21,539
is we drop down to the physical level

24
00:01:18,540 --> 00:01:26,549
and we search the contents of a hard

25
00:01:21,540 --> 00:01:29,159
disk or backing storage so the Quartier

26
00:01:26,549 --> 00:01:33,479
excellently summarizes that the metadata

27
00:01:29,159 --> 00:01:36,479
that holds all of the fail locations as

28
00:01:33,479 --> 00:01:41,549
fragile baguettes completely weight and

29
00:01:36,479 --> 00:01:44,130
when I fails deleted but when as deleted

30
00:01:41,549 --> 00:01:48,710
this is still actually and the physical

31
00:01:44,130 --> 00:01:53,429
death square so and you can see here

32
00:01:48,710 --> 00:01:55,559
that the track sectors and are when the

33
00:01:53,430 --> 00:01:58,380
death sectors and the tracks meet and

34
00:01:55,560 --> 00:02:01,380
that typically holds your individual

35
00:01:58,380 --> 00:02:04,969
chunks of a file and but the operating

36
00:02:01,380 --> 00:02:04,969
system usually deals with us for you

37
00:02:05,630 --> 00:02:11,038
the fail so the fails are broken down in

38
00:02:08,940 --> 00:02:13,109
these chunks and appropriately place

39
00:02:11,038 --> 00:02:13,720
them at the desk and this can be in the

40
00:02:13,110 --> 00:02:16,240
two ways

41
00:02:13,720 --> 00:02:20,410
you can see here which is fragmented

42
00:02:16,240 --> 00:02:23,140
fails where the fails to beg to be

43
00:02:20,410 --> 00:02:26,970
stored all together and as throwing

44
00:02:23,140 --> 00:02:30,070
throw death it's a pain in the arse and

45
00:02:26,970 --> 00:02:32,050
contiguous failure location as when the

46
00:02:30,070 --> 00:02:35,260
fails all kept together and it's just

47
00:02:32,050 --> 00:02:37,360
linear like lift missus quake Goods when

48
00:02:35,260 --> 00:02:40,030
you're working with physical hard deaths

49
00:02:37,360 --> 00:02:42,970
that have the actuator arm so the

50
00:02:40,030 --> 00:02:47,110
riverboat because you just read all and

51
00:02:42,970 --> 00:02:50,560
one go when it comes to tests as well

52
00:02:47,110 --> 00:02:52,450
with these actuator arms and that helps

53
00:02:50,560 --> 00:02:55,030
me segue into the fact that backing

54
00:02:52,450 --> 00:02:58,480
storage has only recently became fast

55
00:02:55,030 --> 00:03:01,360
enough that it's no the software's fault

56
00:02:58,480 --> 00:03:03,880
that it's not that everything's starting

57
00:03:01,360 --> 00:03:07,950
to get slow from our fail carbon

58
00:03:03,880 --> 00:03:12,640
perspective so SSDs and raid technology

59
00:03:07,950 --> 00:03:15,760
has helped shift the attention of these

60
00:03:12,640 --> 00:03:20,730
programs back into the limelight in

61
00:03:15,760 --> 00:03:25,510
terms of needing improvement so

62
00:03:20,730 --> 00:03:30,339
ultimately my research question was how

63
00:03:25,510 --> 00:03:32,679
fast can be header for search become our

64
00:03:30,340 --> 00:03:36,280
how fast can I get the header for search

65
00:03:32,680 --> 00:03:39,390
to fame these fails and to clarify the

66
00:03:36,280 --> 00:03:41,890
headers and furs or unique like

67
00:03:39,390 --> 00:03:45,130
identification at the start in the end

68
00:03:41,890 --> 00:03:50,320
let's say this is a PDF or this is a

69
00:03:45,130 --> 00:03:53,410
JPEG so Alethea helped me get a solid

70
00:03:50,320 --> 00:03:57,609
answer to the question but to better

71
00:03:53,410 --> 00:04:00,400
explain as just to make sure our to

72
00:03:57,610 --> 00:04:04,989
figure out where the problem was I had

73
00:04:00,400 --> 00:04:07,810
to break down what fail carving programs

74
00:04:04,989 --> 00:04:10,090
do so it just comes down to the to house

75
00:04:07,810 --> 00:04:13,690
of searching for these fails and these

76
00:04:10,090 --> 00:04:17,200
header/footer pairs as well as the

77
00:04:13,690 --> 00:04:19,418
actual carving but the carving can only

78
00:04:17,200 --> 00:04:23,080
get so quick before you start to lose

79
00:04:19,418 --> 00:04:24,190
accuracy and so the header fur repairs

80
00:04:23,080 --> 00:04:27,130
is entirely

81
00:04:24,190 --> 00:04:30,240
where are the searching for these pairs

82
00:04:27,130 --> 00:04:33,400
entirely where my efforts were focused

83
00:04:30,240 --> 00:04:35,860
so I'll quickly talk about surfing

84
00:04:33,400 --> 00:04:40,090
algorithms I don't want to ruin

85
00:04:35,860 --> 00:04:43,210
everyone's day here so Ballmer as what

86
00:04:40,090 --> 00:04:45,880
the current tools for motion scalp will

87
00:04:43,210 --> 00:04:49,000
make yourself these are two open source

88
00:04:45,880 --> 00:04:53,560
CPU fail carving tools that I was

89
00:04:49,000 --> 00:04:57,340
comparing against Boyer uses to rule

90
00:04:53,560 --> 00:05:01,630
sets to jump through and strengthener

91
00:04:57,340 --> 00:05:07,359
searching and help save time but it

92
00:05:01,630 --> 00:05:09,100
requires the CPU to be fast enough I'm

93
00:05:07,360 --> 00:05:11,620
not going to go through everything on

94
00:05:09,100 --> 00:05:14,520
the side but as more for the video for

95
00:05:11,620 --> 00:05:16,000
anyone who wants to look back on it

96
00:05:14,520 --> 00:05:20,859
Boyer mer

97
00:05:16,000 --> 00:05:25,240
also has two pre-compile these jumps so

98
00:05:20,860 --> 00:05:27,850
it's not very fair for purpose with this

99
00:05:25,240 --> 00:05:31,000
new hardware I was trying to bring into

100
00:05:27,850 --> 00:05:33,610
the process and so as such I moved to a

101
00:05:31,000 --> 00:05:37,540
new algorithm which is the parallel

102
00:05:33,610 --> 00:05:39,760
failure list a whole Korsak it's a

103
00:05:37,540 --> 00:05:43,420
dumbed down version of the apple corer

104
00:05:39,760 --> 00:05:47,230
SiC algorithm which will allow our which

105
00:05:43,420 --> 00:05:49,510
basically well act as a brute-force

106
00:05:47,230 --> 00:05:52,240
search but for multiple patterns

107
00:05:49,510 --> 00:05:54,370
simultaneously forgot to mention

108
00:05:52,240 --> 00:05:57,250
actually Boyer can only search for one

109
00:05:54,370 --> 00:06:00,190
string item so having the ability to

110
00:05:57,250 --> 00:06:02,770
search from multiple as we're a big step

111
00:06:00,190 --> 00:06:06,610
up also comes in which will see in the

112
00:06:02,770 --> 00:06:09,250
results later but having this more

113
00:06:06,610 --> 00:06:13,990
towards brute force search helps with

114
00:06:09,250 --> 00:06:18,010
them the fact that each core of our each

115
00:06:13,990 --> 00:06:19,900
computer core on a GPU is a stupid and

116
00:06:18,010 --> 00:06:24,760
comparison to the CPU where it's all

117
00:06:19,900 --> 00:06:27,729
fast and smart so know the backgrounds

118
00:06:24,760 --> 00:06:31,930
oh the way we can discuss the

119
00:06:27,730 --> 00:06:36,220
development so I made use of C++ as well

120
00:06:31,930 --> 00:06:39,580
as the CUDA library to develop the

121
00:06:36,220 --> 00:06:40,780
Alethea tool set but CUDA then limited

122
00:06:39,580 --> 00:06:43,870
me to only be

123
00:06:40,780 --> 00:06:46,859
Alti used in the video hardware so as

124
00:06:43,870 --> 00:06:49,630
such I wanted to bring back the

125
00:06:46,860 --> 00:06:52,030
usability at the time Matt and actually

126
00:06:49,630 --> 00:06:54,669
realized and ER looking into adopting

127
00:06:52,030 --> 00:06:59,289
CUDA so that would have worked well to

128
00:06:54,669 --> 00:07:01,210
know okay so yeah cross-platform

129
00:06:59,290 --> 00:07:04,270
development was then a big objective of

130
00:07:01,210 --> 00:07:08,950
thing I wanted to get working on both

131
00:07:04,270 --> 00:07:11,740
Windows and Linux so then other tool or

132
00:07:08,950 --> 00:07:15,120
the other goal of course was I wanted

133
00:07:11,740 --> 00:07:19,330
open source fail Carver's to be

134
00:07:15,120 --> 00:07:22,570
hopefully and I wanted to be in the

135
00:07:19,330 --> 00:07:25,030
leaps in compared to those foremost and

136
00:07:22,570 --> 00:07:27,849
scalpel being cpu-based I was hoping

137
00:07:25,030 --> 00:07:31,380
that I could proof of concept that GPU

138
00:07:27,850 --> 00:07:35,290
is the way forward so for my results I

139
00:07:31,380 --> 00:07:38,830
used both my personal desktop which was

140
00:07:35,290 --> 00:07:42,700
running Windows and AWS instance on

141
00:07:38,830 --> 00:07:45,450
Linux and I've just got less for Klara's

142
00:07:42,700 --> 00:07:49,900
purposes again it can be looked at later

143
00:07:45,450 --> 00:07:53,200
AWS was really useful for being able to

144
00:07:49,900 --> 00:07:58,030
recreate my results for anyone to want

145
00:07:53,200 --> 00:08:01,180
it to look at it themselves so you can

146
00:07:58,030 --> 00:08:05,080
see here the scalpel has both the

147
00:08:01,180 --> 00:08:09,370
fastest and slowest between the two

148
00:08:05,080 --> 00:08:11,770
tools and specifically it's worth

149
00:08:09,370 --> 00:08:16,270
knowing that the Boyar algorithm I

150
00:08:11,770 --> 00:08:17,799
discussed and how it searches for only

151
00:08:16,270 --> 00:08:19,570
one string at a time it was made

152
00:08:17,800 --> 00:08:20,620
perfectly clear by the fact that had to

153
00:08:19,570 --> 00:08:22,690
do multiple passes

154
00:08:20,620 --> 00:08:24,610
thus when I was searching for all the

155
00:08:22,690 --> 00:08:27,430
patterns instead of just PDF patterns

156
00:08:24,610 --> 00:08:32,020
the data throughput dropped drastically

157
00:08:27,430 --> 00:08:35,380
um you then compare this to ilithyia

158
00:08:32,020 --> 00:08:38,710
which was a vast improvement and when

159
00:08:35,380 --> 00:08:41,830
you compare PDF only to all patterns you

160
00:08:38,710 --> 00:08:45,760
can see there's a lot less drop-off or a

161
00:08:41,830 --> 00:08:51,459
lot less of an extreme drop-off on the

162
00:08:45,760 --> 00:08:53,670
death reports so I was hoping as well

163
00:08:51,459 --> 00:08:57,540
that's just taken away so

164
00:08:53,670 --> 00:09:00,120
far more for future work I was really

165
00:08:57,540 --> 00:09:03,740
hoping that I could even apply this to

166
00:09:00,120 --> 00:09:06,390
real time memory forensics use case a

167
00:09:03,740 --> 00:09:09,870
hypervisor for example could be running

168
00:09:06,390 --> 00:09:12,870
a tool very similar or a repurposed

169
00:09:09,870 --> 00:09:15,360
version of the final project in the

170
00:09:12,870 --> 00:09:19,010
event I do implement the fill fail

171
00:09:15,360 --> 00:09:21,570
carving features and it could search for

172
00:09:19,010 --> 00:09:25,140
malicious files they exist in life

173
00:09:21,570 --> 00:09:29,160
memory so but yeah that's that's a lot

174
00:09:25,140 --> 00:09:34,050
of in terms of my slides but I'm open to

175
00:09:29,160 --> 00:09:40,620
any questions or heckles hackles yeah

176
00:09:34,050 --> 00:09:43,530
there's any questions I'll ask one that

177
00:09:40,620 --> 00:09:46,860
so while you were doing this did you

178
00:09:43,530 --> 00:09:48,510
look at the device free list not the dev

179
00:09:46,860 --> 00:09:51,390
free list but there are no free list in

180
00:09:48,510 --> 00:09:53,520
the UNIX systems to see if that might be

181
00:09:51,390 --> 00:09:57,360
a good starting place or did you just

182
00:09:53,520 --> 00:10:01,140
look at the file system raw so I was

183
00:09:57,360 --> 00:10:04,020
just looking at how fast I could get a

184
00:10:01,140 --> 00:10:06,210
specific process to go just looking at

185
00:10:04,020 --> 00:10:09,689
fail carving yourself I haven't looks so

186
00:10:06,210 --> 00:10:10,770
you just scrape the entire dr3 list off

187
00:10:09,690 --> 00:10:13,980
the drive yeah

188
00:10:10,770 --> 00:10:16,439
I'm specifically with my EWS instance as

189
00:10:13,980 --> 00:10:18,810
well I wanted to test my algorithm more

190
00:10:16,440 --> 00:10:21,270
so I even made use of RAM disks to

191
00:10:18,810 --> 00:10:23,280
Lourdes the contents that I wanted

192
00:10:21,270 --> 00:10:25,380
searched and it was just all but the

193
00:10:23,280 --> 00:10:27,300
speed of the algorithm so and did you

194
00:10:25,380 --> 00:10:32,100
look it through the bed block table as

195
00:10:27,300 --> 00:10:34,380
well or did you know I was the stupid

196
00:10:32,100 --> 00:10:35,480
approaches over yeah okay other

197
00:10:34,380 --> 00:10:37,680
questions

198
00:10:35,480 --> 00:10:40,560
now that the tough ones are out of the

199
00:10:37,680 --> 00:10:43,040
way that was actually how I got started

200
00:10:40,560 --> 00:10:48,719
in security doing the how fantastic

201
00:10:43,040 --> 00:10:50,310
forty-one years ago yeah hello hi Sam hi

202
00:10:48,720 --> 00:10:52,410
Cori

203
00:10:50,310 --> 00:10:55,709
yeah I was just wondering what do you

204
00:10:52,410 --> 00:11:00,990
think about the feasibility of tools

205
00:10:55,710 --> 00:11:02,670
like for most implementing a GPU based

206
00:11:00,990 --> 00:11:04,089
approach do you think that might happen

207
00:11:02,670 --> 00:11:10,660
or do you think is

208
00:11:04,089 --> 00:11:13,839
Rider but the court isn't good I held

209
00:11:10,660 --> 00:11:20,110
them on github and they responded with

210
00:11:13,839 --> 00:11:22,180
their attempt and I mean yeah they could

211
00:11:20,110 --> 00:11:24,879
absolutely adopt it it's just a matter

212
00:11:22,180 --> 00:11:26,290
of proof of concept and hopefully being

213
00:11:24,879 --> 00:11:28,540
able to circulate this knowledge

214
00:11:26,290 --> 00:11:31,990
throughout the sphere and it would be

215
00:11:28,540 --> 00:11:33,189
applied hopefully in the future so when

216
00:11:31,990 --> 00:11:35,350
you say it's not good did you mean it

217
00:11:33,189 --> 00:11:37,660
wasn't parallelizable or was it not

218
00:11:35,350 --> 00:11:41,410
vectorizable so they dead managed to

219
00:11:37,660 --> 00:11:43,689
paralyze their results but they've also

220
00:11:41,410 --> 00:11:45,339
it was as if they they're really good

221
00:11:43,689 --> 00:11:48,629
computer scientists but they just

222
00:11:45,339 --> 00:11:51,160
obviously aren't good parallel

223
00:11:48,629 --> 00:11:53,559
performance they just didn't understand

224
00:11:51,160 --> 00:11:55,959
how to do it correctly and ultimately it

225
00:11:53,559 --> 00:12:01,829
just didn't work out well for them other

226
00:11:55,959 --> 00:12:04,909
questions comments ideas okay thank you

227
00:12:01,830 --> 00:12:04,909
[Music]

