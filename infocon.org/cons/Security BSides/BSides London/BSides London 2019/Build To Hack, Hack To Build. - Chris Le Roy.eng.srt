1
00:00:02,600 --> 00:00:07,939
yeah welcome to my talk Tartabull to

2
00:00:05,960 --> 00:00:11,269
hack hack to build or hacked Bulbul to

3
00:00:07,939 --> 00:00:13,070
hack I confused the two quite often so

4
00:00:11,269 --> 00:00:15,049
yeah Who am I

5
00:00:13,070 --> 00:00:18,050
my name is Chris Leroy I'm a skirt

6
00:00:15,049 --> 00:00:20,330
engineer at Heroku you can find me on

7
00:00:18,050 --> 00:00:22,070
the internet at Bron pony if you're on

8
00:00:20,330 --> 00:00:24,080
the back story between that hand behind

9
00:00:22,070 --> 00:00:26,689
that handle feel free to throw something

10
00:00:24,080 --> 00:00:28,848
at me and ask and yeah I like hacking

11
00:00:26,689 --> 00:00:30,619
stuff and I'm particularly lazy in such

12
00:00:28,849 --> 00:00:31,999
a way that I like to build stuff that

13
00:00:30,619 --> 00:00:34,550
makes me hack stuff a little bit quicker

14
00:00:31,999 --> 00:00:38,570
so both a couple things to hack we're

15
00:00:34,550 --> 00:00:40,640
windows android and now containers so

16
00:00:38,570 --> 00:00:42,530
this slides more for me than it is for

17
00:00:40,640 --> 00:00:44,750
you so I don't forget what it is over to

18
00:00:42,530 --> 00:00:47,120
share with you today of course there was

19
00:00:44,750 --> 00:00:50,090
a problem we look at some existing

20
00:00:47,120 --> 00:00:52,940
research then I'm gonna introduce Bob

21
00:00:50,090 --> 00:00:54,710
with the silent T then we look at some

22
00:00:52,940 --> 00:00:56,599
capabilities and integration and of

23
00:00:54,710 --> 00:01:00,170
course a conclusion so that's just a

24
00:00:56,600 --> 00:01:04,640
rough outline so what are the problems

25
00:01:00,170 --> 00:01:08,659
or problem so I work in a very modern

26
00:01:04,640 --> 00:01:11,840
cloud DevOps hdl-c agile environment no

27
00:01:08,659 --> 00:01:14,270
machine learning yet but one of the

28
00:01:11,840 --> 00:01:16,670
issues that are often ran into was how

29
00:01:14,270 --> 00:01:18,829
do we identify and exploit container

30
00:01:16,670 --> 00:01:21,140
vulnerabilities which is quite a common

31
00:01:18,829 --> 00:01:23,360
problem with a European test or an

32
00:01:21,140 --> 00:01:25,640
engineer but after dealing with

33
00:01:23,360 --> 00:01:28,310
engineers quite a lot I ran into that

34
00:01:25,640 --> 00:01:29,630
last point which is kind of the same

35
00:01:28,310 --> 00:01:32,299
problem but slightly different

36
00:01:29,630 --> 00:01:33,560
and once you're popping containers and

37
00:01:32,299 --> 00:01:35,810
identifying vulnerabilities in

38
00:01:33,560 --> 00:01:38,750
containers in a large-scale environments

39
00:01:35,810 --> 00:01:40,520
how do you test secure and monitor and

40
00:01:38,750 --> 00:01:42,799
when you're doing rapid deployment using

41
00:01:40,520 --> 00:01:44,960
thousands of deployments a day with a

42
00:01:42,799 --> 00:01:47,960
lot of containers and a lot of things

43
00:01:44,960 --> 00:01:50,149
that can go wrong it becomes a little

44
00:01:47,960 --> 00:01:51,589
bit more interesting and a little bit

45
00:01:50,149 --> 00:01:54,799
more than just popping shells and

46
00:01:51,590 --> 00:01:56,360
getting grid on a box so with that

47
00:01:54,799 --> 00:01:59,630
problem in hand and particularly looking

48
00:01:56,360 --> 00:02:01,670
at popping containers this is some

49
00:01:59,630 --> 00:02:03,949
existing categories of tools out there

50
00:02:01,670 --> 00:02:05,799
that I found quite useful this is a

51
00:02:03,950 --> 00:02:07,850
partial list this is by no means

52
00:02:05,799 --> 00:02:10,820
definitely not all the tools available

53
00:02:07,850 --> 00:02:11,900
but when you're under container one of

54
00:02:10,820 --> 00:02:13,430
the first things you do especially for

55
00:02:11,900 --> 00:02:15,950
pen testers you run amuk contained

56
00:02:13,430 --> 00:02:17,959
because depending on the syscalls and

57
00:02:15,950 --> 00:02:20,480
capabilities that are available in that

58
00:02:17,959 --> 00:02:22,370
container that will dictate what you can

59
00:02:20,480 --> 00:02:23,929
do in that container and my content will

60
00:02:22,370 --> 00:02:24,920
tell you that so one of the first things

61
00:02:23,930 --> 00:02:26,599
you're going to do when you want to

62
00:02:24,920 --> 00:02:28,549
break out of a container then there's

63
00:02:26,599 --> 00:02:29,720
Google container tools one of my

64
00:02:28,550 --> 00:02:31,790
favorite tools at the moment is the

65
00:02:29,720 --> 00:02:34,880
container structure test really great

66
00:02:31,790 --> 00:02:36,950
way to statically analyze an image and

67
00:02:34,880 --> 00:02:38,959
work with the tile layers you can also

68
00:02:36,950 --> 00:02:40,250
work with the container as well but

69
00:02:38,959 --> 00:02:41,269
there's a whole bunch of other tools in

70
00:02:40,250 --> 00:02:44,090
that Reaper that are actually really

71
00:02:41,269 --> 00:02:47,870
useful then there's clear which is one

72
00:02:44,090 --> 00:02:49,040
of the more older older but more it's

73
00:02:47,870 --> 00:02:50,690
been around longer than a lot of others

74
00:02:49,040 --> 00:02:53,390
in terms of vulnerability analysis and

75
00:02:50,690 --> 00:02:55,250
containers so static analysis containers

76
00:02:53,390 --> 00:02:57,828
your container may have vulnerability X

77
00:02:55,250 --> 00:02:59,360
in it then there's equal security who's

78
00:02:57,829 --> 00:03:01,549
actually released a lot of other tools

79
00:02:59,360 --> 00:03:03,410
as well but there's this one particular

80
00:03:01,549 --> 00:03:05,090
category so there's the docker benchmark

81
00:03:03,410 --> 00:03:06,470
which is quite useful in an environment

82
00:03:05,090 --> 00:03:08,000
when you want to benchmark your

83
00:03:06,470 --> 00:03:11,260
containers from a security perspective

84
00:03:08,000 --> 00:03:14,540
and then it actually is quite useful so

85
00:03:11,260 --> 00:03:17,209
these were the categories of tools that

86
00:03:14,540 --> 00:03:18,920
I found existed that I could use from a

87
00:03:17,209 --> 00:03:22,340
pen testing background and from an

88
00:03:18,920 --> 00:03:23,929
engineering background and this research

89
00:03:22,340 --> 00:03:28,010
deserves its own slide and this was

90
00:03:23,930 --> 00:03:29,900
actually said besides Barcelona and this

91
00:03:28,010 --> 00:03:31,880
was released by a researcher called

92
00:03:29,900 --> 00:03:33,350
Alena Radu I apologize if I'm

93
00:03:31,880 --> 00:03:35,180
pronouncing their name wrong please

94
00:03:33,350 --> 00:03:36,590
correct me but this is really cool

95
00:03:35,180 --> 00:03:38,930
because while I was doing this research

96
00:03:36,590 --> 00:03:43,639
I saw this talk and this was one of the

97
00:03:38,930 --> 00:03:46,190
first pieces of heavily directed towards

98
00:03:43,639 --> 00:03:49,459
CRC Department technology and containers

99
00:03:46,190 --> 00:03:50,900
so it's not something that you if you're

100
00:03:49,459 --> 00:03:52,850
in a container it's not the binary that

101
00:03:50,900 --> 00:03:55,400
you just drop on the host but it is a

102
00:03:52,850 --> 00:03:57,410
framework targeted towards your CRC the

103
00:03:55,400 --> 00:03:58,790
environment and it's very very cool in

104
00:03:57,410 --> 00:04:00,920
terms that so I really recommend having

105
00:03:58,790 --> 00:04:03,019
a look at that and I saw this now so

106
00:04:00,920 --> 00:04:05,388
well no this was really great if you

107
00:04:03,019 --> 00:04:07,280
have an existing hdl-c

108
00:04:05,389 --> 00:04:11,359
and see a CD that can support this

109
00:04:07,280 --> 00:04:12,950
framework so it can be done so how do I

110
00:04:11,359 --> 00:04:14,959
like to solve problems so I'm run

111
00:04:12,950 --> 00:04:17,418
engineer I'm not a dev I just break

112
00:04:14,959 --> 00:04:19,760
I break stuff sorry I'm social courted

113
00:04:17,418 --> 00:04:21,889
social probably curse less but I like to

114
00:04:19,760 --> 00:04:24,409
break stuff and to do this I created

115
00:04:21,889 --> 00:04:26,300
something called break after box or Bob

116
00:04:24,409 --> 00:04:28,820
with the silent e I have very bad

117
00:04:26,300 --> 00:04:29,690
reputation for tool names so that may

118
00:04:28,820 --> 00:04:32,030
change in the future

119
00:04:29,690 --> 00:04:33,620
but anyway written in go because I just

120
00:04:32,030 --> 00:04:35,960
wanted to embrace the in the hipster in

121
00:04:33,620 --> 00:04:37,820
East London and it's released as a

122
00:04:35,960 --> 00:04:39,950
binary so it's not a framework it's a

123
00:04:37,820 --> 00:04:43,580
binary that if you're on a host you want

124
00:04:39,950 --> 00:04:44,990
to execute like I said I'm hot lazy so I

125
00:04:43,580 --> 00:04:46,310
mean I'm in a host I want to auto pound

126
00:04:44,990 --> 00:04:47,870
stuff of course I want to understand

127
00:04:46,310 --> 00:04:48,920
what it is that I'm running I wrote

128
00:04:47,870 --> 00:04:50,330
something that's going to allow me to

129
00:04:48,920 --> 00:04:51,890
auto pound common container

130
00:04:50,330 --> 00:04:54,680
vulnerabilities because after you get

131
00:04:51,890 --> 00:04:56,539
the ten shell on a container you kind of

132
00:04:54,680 --> 00:04:59,630
get bored of running the same commands

133
00:04:56,540 --> 00:05:01,790
over and over it also helps me to

134
00:04:59,630 --> 00:05:04,640
perform common container recon functions

135
00:05:01,790 --> 00:05:06,140
so thing Linux post exploitation but

136
00:05:04,640 --> 00:05:07,610
there are a lot of quirks in containers

137
00:05:06,140 --> 00:05:10,400
that you'll find along the way and I'll

138
00:05:07,610 --> 00:05:12,950
discuss some of those and also in terms

139
00:05:10,400 --> 00:05:16,549
of these capabilities I implemented them

140
00:05:12,950 --> 00:05:17,990
so that you can perform them in a way

141
00:05:16,550 --> 00:05:20,030
that's useful for engineers and pain

142
00:05:17,990 --> 00:05:22,160
testers so not about popping shells of

143
00:05:20,030 --> 00:05:23,630
course it's there for that but also in a

144
00:05:22,160 --> 00:05:26,150
way that you can use it with engineers

145
00:05:23,630 --> 00:05:28,310
and in clcd environments and I'll show

146
00:05:26,150 --> 00:05:30,229
you how I actually went about that and I

147
00:05:28,310 --> 00:05:31,850
did make the github repo publicly

148
00:05:30,230 --> 00:05:34,400
available this morning you can find it

149
00:05:31,850 --> 00:05:36,890
there remember Bob with the silent T but

150
00:05:34,400 --> 00:05:40,669
T is in the URL and there's a lot of

151
00:05:36,890 --> 00:05:42,140
examples and all over there so first

152
00:05:40,670 --> 00:05:43,670
thing we're gonna do let's just burn all

153
00:05:42,140 --> 00:05:46,580
the things and if your opponent on

154
00:05:43,670 --> 00:05:48,140
containers Dakka Dakka Dakka dot suck is

155
00:05:46,580 --> 00:05:51,140
the first thing you're going to do what

156
00:05:48,140 --> 00:05:52,370
is dr. it's a UNIX domain socket using

157
00:05:51,140 --> 00:05:54,860
UNIX systems for inter-process

158
00:05:52,370 --> 00:05:56,419
communication it is pretty much the core

159
00:05:54,860 --> 00:05:58,250
thing when it comes to running docker

160
00:05:56,419 --> 00:05:59,900
how you're going to communicate it runs

161
00:05:58,250 --> 00:06:01,790
those routes and if anything is part of

162
00:05:59,900 --> 00:06:04,159
the docker group you can essentially

163
00:06:01,790 --> 00:06:05,660
become routes on the host so why is this

164
00:06:04,160 --> 00:06:07,520
important well when you're hacking

165
00:06:05,660 --> 00:06:10,130
containers this is like the hollow wall

166
00:06:07,520 --> 00:06:11,840
to hacking containers it's not new and

167
00:06:10,130 --> 00:06:14,150
this is one of the first things that you

168
00:06:11,840 --> 00:06:15,289
look at so where this came from is that

169
00:06:14,150 --> 00:06:16,549
there are a lot of instances where

170
00:06:15,290 --> 00:06:18,860
people wanted to use docker within the

171
00:06:16,550 --> 00:06:21,200
container I'm going you know getting

172
00:06:18,860 --> 00:06:22,790
really inception like don't do this by

173
00:06:21,200 --> 00:06:25,190
the way there are better ways to do that

174
00:06:22,790 --> 00:06:26,210
but that's where this came out and

175
00:06:25,190 --> 00:06:27,950
that's going to allow you to do two

176
00:06:26,210 --> 00:06:30,380
things it can allow you to break out of

177
00:06:27,950 --> 00:06:31,969
a container onto the host also it can

178
00:06:30,380 --> 00:06:33,860
give you a local provost so you'll find

179
00:06:31,970 --> 00:06:35,300
in a lot of situations based in CRC D

180
00:06:33,860 --> 00:06:37,130
environments you'll be given your own

181
00:06:35,300 --> 00:06:39,890
ec2 instance or your own Google Cloud

182
00:06:37,130 --> 00:06:41,920
compute instance and dr. dot sock will

183
00:06:39,890 --> 00:06:44,020
be there because sometimes you run

184
00:06:41,920 --> 00:06:45,670
within that environment but by default

185
00:06:44,020 --> 00:06:47,260
you'll be running as a non root user and

186
00:06:45,670 --> 00:06:49,000
you know if you're not root you don't

187
00:06:47,260 --> 00:06:51,490
have the keys to the kingdom you can use

188
00:06:49,000 --> 00:06:52,930
this to break out and become root and

189
00:06:51,490 --> 00:06:54,100
that's has some interesting consequences

190
00:06:52,930 --> 00:06:57,820
actually quite recently

191
00:06:54,100 --> 00:06:59,950
so hydroponic sock so firstly you gotta

192
00:06:57,820 --> 00:07:01,420
identify polka dot sock you got to

193
00:06:59,950 --> 00:07:03,010
interact with it so depending if it's

194
00:07:01,420 --> 00:07:04,120
mounted on the interface on a UNIX

195
00:07:03,010 --> 00:07:07,030
domain soccer do you need something that

196
00:07:04,120 --> 00:07:08,650
can speak specific data grams for that

197
00:07:07,030 --> 00:07:10,239
so either curl or the doctor client

198
00:07:08,650 --> 00:07:11,950
there's a few other ways you can do that

199
00:07:10,240 --> 00:07:13,540
I want to interact with this it's

200
00:07:11,950 --> 00:07:15,219
basically the API or token you can say

201
00:07:13,540 --> 00:07:16,870
create a new content or mount this

202
00:07:15,220 --> 00:07:18,300
interface everything that you can do

203
00:07:16,870 --> 00:07:21,040
with the doctor clients is done by the

204
00:07:18,300 --> 00:07:22,930
sockets what you then want to just

205
00:07:21,040 --> 00:07:26,320
create a new container and you want to

206
00:07:22,930 --> 00:07:29,050
mount the hosts container host file

207
00:07:26,320 --> 00:07:31,450
system in the container and then you

208
00:07:29,050 --> 00:07:33,370
then want to run in you want to run into

209
00:07:31,450 --> 00:07:36,070
this container and then you want to see

210
00:07:33,370 --> 00:07:37,210
eight root containers and the CH util is

211
00:07:36,070 --> 00:07:39,159
going to come around sometime in this

212
00:07:37,210 --> 00:07:40,900
presentation but you want to see 8 root

213
00:07:39,160 --> 00:07:43,300
the amount that you didn't step three in

214
00:07:40,900 --> 00:07:45,609
your new host and then basically it is

215
00:07:43,300 --> 00:07:47,080
like your root on the host with access

216
00:07:45,610 --> 00:07:49,300
to everything really simple really easy

217
00:07:47,080 --> 00:07:52,359
and a lot of fun as you can see there's

218
00:07:49,300 --> 00:07:55,080
a wash rinse repeat method over here so

219
00:07:52,360 --> 00:07:58,390
there are some quirks when it comes to

220
00:07:55,080 --> 00:08:02,140
this kind of stuff in containers looking

221
00:07:58,390 --> 00:08:04,450
for sockets can get tricky because

222
00:08:02,140 --> 00:08:07,690
living off the land in containers it's a

223
00:08:04,450 --> 00:08:09,280
lot of fun but it might be the case that

224
00:08:07,690 --> 00:08:11,380
the useful commands that you need to

225
00:08:09,280 --> 00:08:12,849
find sockets might not be available so

226
00:08:11,380 --> 00:08:15,850
for example if you run good old docker

227
00:08:12,850 --> 00:08:16,930
image it's very limited and there's not

228
00:08:15,850 --> 00:08:18,190
a lot of commands and that's not just

229
00:08:16,930 --> 00:08:19,990
learn you contain the image that it's

230
00:08:18,190 --> 00:08:21,850
like that so find or SS and they said or

231
00:08:19,990 --> 00:08:23,050
whatever might not be in the container

232
00:08:21,850 --> 00:08:24,730
so if you don't need these commands

233
00:08:23,050 --> 00:08:26,050
literally one-line a batch that you

234
00:08:24,730 --> 00:08:28,480
could normally do to find sockets are

235
00:08:26,050 --> 00:08:30,790
not there another issue that you have

236
00:08:28,480 --> 00:08:33,789
with this is that the cock-eyed might

237
00:08:30,790 --> 00:08:35,830
not be mounted at wall run docker socket

238
00:08:33,789 --> 00:08:37,209
might be mansur that moobot so now if

239
00:08:35,830 --> 00:08:38,590
you gotta traverse this entire file

240
00:08:37,210 --> 00:08:39,550
system and look for sockets and if you

241
00:08:38,590 --> 00:08:41,200
don't have the commands that you

242
00:08:39,549 --> 00:08:44,920
normally used this can get a little

243
00:08:41,200 --> 00:08:46,390
tricky so how do we solve this well such

244
00:08:44,920 --> 00:08:48,760
calls and this is where Emma contain

245
00:08:46,390 --> 00:08:50,439
comes into play just because the the

246
00:08:48,760 --> 00:08:52,480
command is or the binary isn't available

247
00:08:50,440 --> 00:08:54,760
doesn't mean that the circles are

248
00:08:52,480 --> 00:08:54,990
required to do that aren't available so

249
00:08:54,760 --> 00:08:56,520
on

250
00:08:54,990 --> 00:08:58,350
left those are the scores for a standard

251
00:08:56,520 --> 00:09:00,959
Ubuntu system that are required for the

252
00:08:58,350 --> 00:09:02,700
find command on the right is some go

253
00:09:00,959 --> 00:09:04,410
code to basically implement that so the

254
00:09:02,700 --> 00:09:06,120
find command might not be on the ear

255
00:09:04,410 --> 00:09:07,500
installed in the container but the

256
00:09:06,120 --> 00:09:09,540
syscalls might be available and the

257
00:09:07,500 --> 00:09:11,279
really nice thing about go yes that is

258
00:09:09,540 --> 00:09:14,730
very terrible go code like I said I'm

259
00:09:11,279 --> 00:09:15,839
not add if I break stuff but you'll see

260
00:09:14,730 --> 00:09:17,490
that there's no shell come on it's being

261
00:09:15,839 --> 00:09:18,779
executed and the great thing about go is

262
00:09:17,490 --> 00:09:20,550
that'll go and execute underlying

263
00:09:18,779 --> 00:09:23,220
Siskel's so they didn't have to rely on

264
00:09:20,550 --> 00:09:26,430
shell commands which is really neat so

265
00:09:23,220 --> 00:09:27,690
same same but different so how do we

266
00:09:26,430 --> 00:09:33,359
actually go ahead and do this

267
00:09:27,690 --> 00:09:36,750
so show controls and so what we have

268
00:09:33,360 --> 00:09:39,360
over here so I'm on my host on my boon

269
00:09:36,750 --> 00:09:41,850
to host I'm just gonna watch a directory

270
00:09:39,360 --> 00:09:43,770
in temp in the top we're gonna run into

271
00:09:41,850 --> 00:09:46,020
a container and you can see we've

272
00:09:43,770 --> 00:09:48,810
mounted a socket at temp this is not a

273
00:09:46,020 --> 00:09:50,430
socket and we're just gonna mount a

274
00:09:48,810 --> 00:09:54,839
local directory that has the binary in

275
00:09:50,430 --> 00:09:57,660
it so once we go to Bob we're gonna tell

276
00:09:54,839 --> 00:09:59,240
Bob always run Bob first his check it

277
00:09:57,660 --> 00:10:02,370
actually can run in your system and

278
00:09:59,240 --> 00:10:03,720
we're gonna tell Bob tell me what you

279
00:10:02,370 --> 00:10:05,010
can do so there's a whole bunch of stuff

280
00:10:03,720 --> 00:10:06,690
but first things that we're gonna do is

281
00:10:05,010 --> 00:10:08,550
we're going to look for sockets so if

282
00:10:06,690 --> 00:10:10,260
you look for UNIX domain sockets because

283
00:10:08,550 --> 00:10:13,079
there are other kinds of things you can

284
00:10:10,260 --> 00:10:14,700
do and in this case we find the socket

285
00:10:13,079 --> 00:10:17,489
at forth slash temp this is not a socket

286
00:10:14,700 --> 00:10:20,520
what you do what do we do now we google

287
00:10:17,490 --> 00:10:22,380
furiously on how deep own sockets now we

288
00:10:20,520 --> 00:10:24,060
say Auto current equals true and now

289
00:10:22,380 --> 00:10:25,649
what Bob's going to go ahead and do it's

290
00:10:24,060 --> 00:10:27,569
now identified the socket and now it's

291
00:10:25,649 --> 00:10:30,000
gonna check if it is a talker socket and

292
00:10:27,570 --> 00:10:32,310
if it is it's now going to give you a

293
00:10:30,000 --> 00:10:34,709
shell in a container which gives you a

294
00:10:32,310 --> 00:10:37,050
shell on the underlying host so now we

295
00:10:34,709 --> 00:10:40,199
are on the underlying hosts file system

296
00:10:37,050 --> 00:10:42,660
and we're gonna go into the Bob folder

297
00:10:40,200 --> 00:10:44,760
and we're gonna create a file and at the

298
00:10:42,660 --> 00:10:46,170
bottom terminal you'll see that the

299
00:10:44,760 --> 00:10:47,579
father I'm going to create is now going

300
00:10:46,170 --> 00:10:50,849
to appear on the host operating system

301
00:10:47,579 --> 00:10:51,959
so once that decides to come there you

302
00:10:50,850 --> 00:10:54,060
go so now the host operating system

303
00:10:51,959 --> 00:10:55,619
we've now played with the operating

304
00:10:54,060 --> 00:10:58,140
system and then you can exit with Bob

305
00:10:55,620 --> 00:11:00,240
you give an interactive TTY and now

306
00:10:58,140 --> 00:11:02,490
we're back on the container that we were

307
00:11:00,240 --> 00:11:04,800
in if you go back to temp we won't see

308
00:11:02,490 --> 00:11:06,630
what we were there so that is the hollow

309
00:11:04,800 --> 00:11:08,670
world - breaking out of containers has

310
00:11:06,630 --> 00:11:09,390
been around for ages you'd be surprised

311
00:11:08,670 --> 00:11:11,819
how common

312
00:11:09,390 --> 00:11:13,470
is there's a lot of security through

313
00:11:11,820 --> 00:11:15,120
obscurity but hey you know people going

314
00:11:13,470 --> 00:11:18,000
to look for voir undoctored suck

315
00:11:15,120 --> 00:11:20,370
let's man sit at bla bla bla bla bla

316
00:11:18,000 --> 00:11:24,480
because they'll never find it well you

317
00:11:20,370 --> 00:11:26,490
can so in this case Bob can be used to

318
00:11:24,480 --> 00:11:28,650
get a show on the host I think pentester

319
00:11:26,490 --> 00:11:30,300
you know nothing you know it says better

320
00:11:28,650 --> 00:11:31,590
in a report saying uh we got rid on the

321
00:11:30,300 --> 00:11:34,439
underlying host and we could read you

322
00:11:31,590 --> 00:11:35,280
know at see shadow sure engineers how

323
00:11:34,440 --> 00:11:38,670
can they users they don't necessarily

324
00:11:35,280 --> 00:11:40,199
want to pop shells so return codes are

325
00:11:38,670 --> 00:11:42,150
very interesting so in your see our CD

326
00:11:40,200 --> 00:11:44,280
environments Michelle doesn't really

327
00:11:42,150 --> 00:11:46,500
mean much but you want something I have

328
00:11:44,280 --> 00:11:48,150
to say hey this is exploitable this

329
00:11:46,500 --> 00:11:50,190
isn't what will make use of that and

330
00:11:48,150 --> 00:11:52,620
I'll show you that next and then of

331
00:11:50,190 --> 00:11:53,820
course the last point um when you run

332
00:11:52,620 --> 00:11:55,560
the binaries Bob it's got all the

333
00:11:53,820 --> 00:11:57,630
packages or utilities that you need um

334
00:11:55,560 --> 00:11:59,160
if the schools aren't available that

335
00:11:57,630 --> 00:12:01,890
needs to do something you'll get an

336
00:11:59,160 --> 00:12:05,069
error I did leave a note to insert a

337
00:12:01,890 --> 00:12:06,480
Linux capabilities joke but it wasn't

338
00:12:05,070 --> 00:12:08,160
there without being really cheesy I

339
00:12:06,480 --> 00:12:08,990
think capsules make joke wasn't

340
00:12:08,160 --> 00:12:11,969
available

341
00:12:08,990 --> 00:12:15,120
awkward silence okay that's cool I had

342
00:12:11,970 --> 00:12:16,620
to do that at least once so how does

343
00:12:15,120 --> 00:12:21,630
this look like in an engineering

344
00:12:16,620 --> 00:12:24,150
environment so so we're going to do the

345
00:12:21,630 --> 00:12:27,960
same thing but here we're using um

346
00:12:24,150 --> 00:12:31,860
Heroku SIA so normal CR technology and

347
00:12:27,960 --> 00:12:33,840
we've now done a git push and the very

348
00:12:31,860 --> 00:12:36,540
informative aramid commit message and

349
00:12:33,840 --> 00:12:39,510
now in our CI environment we said R and

350
00:12:36,540 --> 00:12:40,770
Bob author PO but CSC D equals true so

351
00:12:39,510 --> 00:12:44,310
what that means is that we're not going

352
00:12:40,770 --> 00:12:48,420
to run into drop into a TTY we're gonna

353
00:12:44,310 --> 00:12:49,829
tell Bob to set a exit code now if

354
00:12:48,420 --> 00:12:52,290
you're familiar with CSEE technologies

355
00:12:49,830 --> 00:12:54,570
and testing frameworks if the exit codes

356
00:12:52,290 --> 00:12:56,459
are more than zero it means something

357
00:12:54,570 --> 00:13:00,170
has happened if it's zero you get the

358
00:12:56,460 --> 00:13:02,970
thumbs-up and while this is running so

359
00:13:00,170 --> 00:13:05,610
we'll get to the interesting stuff so

360
00:13:02,970 --> 00:13:07,950
you can see here bob has run in this

361
00:13:05,610 --> 00:13:09,900
environment now our staging environments

362
00:13:07,950 --> 00:13:11,730
and IC see our CD container environment

363
00:13:09,900 --> 00:13:14,130
is the same as production where you are

364
00:13:11,730 --> 00:13:16,200
using those assumptions so whatever

365
00:13:14,130 --> 00:13:18,840
we're testing in staging should be the

366
00:13:16,200 --> 00:13:21,000
same as production send as you can see

367
00:13:18,840 --> 00:13:22,350
over here Bob found some sockets but

368
00:13:21,000 --> 00:13:22,889
they were not able to exploit them

369
00:13:22,350 --> 00:13:25,549
because

370
00:13:22,889 --> 00:13:28,319
naca sockets so the test will pass

371
00:13:25,549 --> 00:13:31,350
because we're not mounting dr. dot sock

372
00:13:28,319 --> 00:13:32,878
within our containers and this is pretty

373
00:13:31,350 --> 00:13:35,449
much how Bob will work in the CI

374
00:13:32,879 --> 00:13:38,879
environments the X occurred was zero the

375
00:13:35,449 --> 00:13:40,649
test passed so in terms of dr. dot sock

376
00:13:38,879 --> 00:13:42,629
if you don't need dr. dot sock in a

377
00:13:40,649 --> 00:13:44,429
container don't man sense there are

378
00:13:42,629 --> 00:13:46,709
better ways to do it via Dan and a few

379
00:13:44,429 --> 00:13:48,480
other technologies but if you do need to

380
00:13:46,709 --> 00:13:50,819
authentication is your friend there are

381
00:13:48,480 --> 00:13:52,259
a few technologies that do this so there

382
00:13:50,819 --> 00:13:54,269
are certificates and of course if you

383
00:13:52,259 --> 00:13:55,309
are using UNIX domain sockets there is

384
00:13:54,269 --> 00:13:57,419
inter process communication

385
00:13:55,309 --> 00:13:59,608
authentication that can be done that is

386
00:13:57,419 --> 00:14:01,499
specific to UNIX domain sockets really

387
00:13:59,609 --> 00:14:02,910
cool and have a look at that but there's

388
00:14:01,499 --> 00:14:04,470
a whole bunch of hardening resources

389
00:14:02,910 --> 00:14:07,079
there to do that

390
00:14:04,470 --> 00:14:09,019
but there's more to containers and just

391
00:14:07,079 --> 00:14:12,059
burning dr. sock

392
00:14:09,019 --> 00:14:13,559
there's also environment variables so I

393
00:14:12,059 --> 00:14:15,868
think Linux post exploitation but

394
00:14:13,559 --> 00:14:18,719
especially in containers so you've got

395
00:14:15,869 --> 00:14:20,189
good old in VN path there you know

396
00:14:18,720 --> 00:14:22,679
environment variables just happens to be

397
00:14:20,189 --> 00:14:24,269
the secrets management approach for a

398
00:14:22,679 --> 00:14:27,269
lot of container technologies and

399
00:14:24,269 --> 00:14:30,509
there's also proc FS is definitely your

400
00:14:27,269 --> 00:14:32,639
friend why because just because you may

401
00:14:30,509 --> 00:14:34,049
have cleared your environment doesn't

402
00:14:32,639 --> 00:14:36,029
mean that the environment has been cared

403
00:14:34,049 --> 00:14:38,129
for specific processes on the system go

404
00:14:36,029 --> 00:14:40,649
ahead and do this look at proc whatever

405
00:14:38,129 --> 00:14:42,959
PID and environ you'll sometimes see

406
00:14:40,649 --> 00:14:45,419
that there's stuff there that is not in

407
00:14:42,959 --> 00:14:48,388
your standard shell environments so it's

408
00:14:45,419 --> 00:14:49,379
very good to look at that often some

409
00:14:48,389 --> 00:14:52,529
juicy stuff there

410
00:14:49,379 --> 00:14:53,999
I'm so yeah Bob accesses both so

411
00:14:52,529 --> 00:14:56,699
basically OS environment will give you

412
00:14:53,999 --> 00:14:59,189
the key value pair and then also to

413
00:14:56,699 --> 00:15:00,868
access proc and all the pids in the

414
00:14:59,189 --> 00:15:02,368
system now this can get a little bit

415
00:15:00,869 --> 00:15:05,879
tricky containers why well because

416
00:15:02,369 --> 00:15:07,829
ephemerality is that's a sigh

417
00:15:05,879 --> 00:15:10,619
frustration there so by the time you've

418
00:15:07,829 --> 00:15:12,809
list you've listed the contents of proc

419
00:15:10,619 --> 00:15:14,129
and then go ahead an attempted to read

420
00:15:12,809 --> 00:15:16,850
prop ID in barn

421
00:15:14,129 --> 00:15:18,809
that process might not exist anymore so

422
00:15:16,850 --> 00:15:20,669
there's a saying about when something

423
00:15:18,809 --> 00:15:22,499
hits the fan generally happens over

424
00:15:20,669 --> 00:15:24,749
there and then of course there's just

425
00:15:22,499 --> 00:15:26,189
proc FS which is just you know a virtual

426
00:15:24,749 --> 00:15:27,959
file systems just can make your life

427
00:15:26,189 --> 00:15:30,779
hell I definitely have some hair loss

428
00:15:27,959 --> 00:15:32,638
due to that so I'm wearing the hat and

429
00:15:30,779 --> 00:15:33,749
that's pretty much in go code you can

430
00:15:32,639 --> 00:15:35,819
see that there's very little shell

431
00:15:33,749 --> 00:15:36,579
commands Miami executing actually I

432
00:15:35,819 --> 00:15:38,019
shout c'mon is

433
00:15:36,579 --> 00:15:40,868
bit of a hack there too very far the

434
00:15:38,019 --> 00:15:42,970
contents of proc PID because it can get

435
00:15:40,869 --> 00:15:46,959
a bit tricky that the file exists there

436
00:15:42,970 --> 00:15:48,790
is actually a file descriptor for proc

437
00:15:46,959 --> 00:15:50,439
one environment there's actually no

438
00:15:48,790 --> 00:15:51,849
contents in it so that's where some of

439
00:15:50,439 --> 00:15:54,579
the weird magic comes in those proc ESS

440
00:15:51,850 --> 00:15:56,889
so but we can go ahead and actually

441
00:15:54,579 --> 00:16:01,029
analyze the stuff so how do we actually

442
00:15:56,889 --> 00:16:03,670
analyze it show controls make it

443
00:16:01,029 --> 00:16:05,290
fullscreen so we're going to run a

444
00:16:03,670 --> 00:16:07,660
docker container and we're gonna add an

445
00:16:05,290 --> 00:16:10,899
environment variable so touch of

446
00:16:07,660 --> 00:16:12,969
approval super secret password and we're

447
00:16:10,899 --> 00:16:15,569
gonna run Bob so Bob by default so if

448
00:16:12,970 --> 00:16:18,730
you use the Recon very hacker super cool

449
00:16:15,569 --> 00:16:21,248
option there it'll go look in proc and

450
00:16:18,730 --> 00:16:22,959
you'll see it's found a whole bunch of

451
00:16:21,249 --> 00:16:25,600
processes that have that environments

452
00:16:22,959 --> 00:16:27,549
attached to it um so it's your shell at

453
00:16:25,600 --> 00:16:29,259
hand that you actually know your bash

454
00:16:27,549 --> 00:16:31,089
environments and I'll go ahead and

455
00:16:29,259 --> 00:16:34,749
actually look at envy as well because

456
00:16:31,089 --> 00:16:36,759
stuff might be hiding in butts and by

457
00:16:34,749 --> 00:16:38,619
default Bob will look for secret and

458
00:16:36,759 --> 00:16:40,600
password you can also go ahead and

459
00:16:38,619 --> 00:16:42,699
specify a word list

460
00:16:40,600 --> 00:16:45,819
you know it's 2019 and word lists are

461
00:16:42,699 --> 00:16:49,929
super cool and in this case we're gonna

462
00:16:45,819 --> 00:16:50,618
tell Bob to look for once I've read Jack

463
00:16:49,929 --> 00:16:52,329
points cool

464
00:16:50,619 --> 00:16:54,489
yes we're looking for yellow secret find

465
00:16:52,329 --> 00:16:56,258
me and Bob and we're gonna remove that

466
00:16:54,489 --> 00:16:59,519
and we're gonna tell Bob you know just

467
00:16:56,259 --> 00:17:03,730
look for some word that will come up

468
00:16:59,519 --> 00:17:05,079
pass christos something what it has find

469
00:17:03,730 --> 00:17:08,049
me cool so yeah so we're gonna look for

470
00:17:05,079 --> 00:17:10,869
find me in environment variables and we

471
00:17:08,049 --> 00:17:12,309
should get nothing and there we go and

472
00:17:10,869 --> 00:17:14,198
if you look at the return code that will

473
00:17:12,309 --> 00:17:16,928
come out actually be 0 because Bob

474
00:17:14,199 --> 00:17:18,610
returned nothing in the previous test

475
00:17:16,929 --> 00:17:20,019
when we had all that output for super

476
00:17:18,609 --> 00:17:21,579
super password the return code would

477
00:17:20,019 --> 00:17:25,388
have been 1 which is what I'm going to

478
00:17:21,579 --> 00:17:27,819
show you now and there you go so that's

479
00:17:25,388 --> 00:17:29,678
super secret password being found and

480
00:17:27,819 --> 00:17:32,460
the return code is one that's been a bit

481
00:17:29,679 --> 00:17:34,389
cut off by that return code is 1 or 2 so

482
00:17:32,460 --> 00:17:36,130
there you can see from a pen test

483
00:17:34,389 --> 00:17:38,199
environment you're on on a host you want

484
00:17:36,130 --> 00:17:40,090
to scrape that information you can do it

485
00:17:38,200 --> 00:17:42,070
an engineer you can drop it in your CS

486
00:17:40,090 --> 00:17:45,459
CD environment which is what we're going

487
00:17:42,070 --> 00:17:48,309
to do over here so inside our CI CD test

488
00:17:45,460 --> 00:17:50,270
we've said run a script and I'll show

489
00:17:48,309 --> 00:17:53,420
you what that script looks like in a bit

490
00:17:50,270 --> 00:17:54,590
but we're going to run two tests so

491
00:17:53,420 --> 00:17:57,770
we're going to call a script and that

492
00:17:54,590 --> 00:18:00,439
script has a test for looking for owning

493
00:17:57,770 --> 00:18:02,960
UNIX sockets and then there's a second

494
00:18:00,440 --> 00:18:05,180
test that's going to use a word list and

495
00:18:02,960 --> 00:18:08,090
search for any of those key terms inside

496
00:18:05,180 --> 00:18:12,460
our OS and viral or in our proc envira

497
00:18:08,090 --> 00:18:15,379
and that's going to be run on every pool

498
00:18:12,460 --> 00:18:18,650
it or every pool request or every push

499
00:18:15,380 --> 00:18:20,600
on our repo so I'm gonna fast forward a

500
00:18:18,650 --> 00:18:22,850
bit because I have definitely made great

501
00:18:20,600 --> 00:18:24,740
too much content for today and I

502
00:18:22,850 --> 00:18:27,649
probably won't get it in 30 minutes

503
00:18:24,740 --> 00:18:30,940
but what we'll see now is one that once

504
00:18:27,650 --> 00:18:33,800
the test is running well we'll get and

505
00:18:30,940 --> 00:18:36,110
there we go so the test has run so the

506
00:18:33,800 --> 00:18:38,060
socket stuff that we ran previously that

507
00:18:36,110 --> 00:18:40,100
was the first test and our Bob has gone

508
00:18:38,060 --> 00:18:42,620
ahead of than any environmental variable

509
00:18:40,100 --> 00:18:45,590
test from the words that we used and

510
00:18:42,620 --> 00:18:49,580
nothing in protein bar or in OS that E&V

511
00:18:45,590 --> 00:18:53,990
contains those key words so we do we're

512
00:18:49,580 --> 00:18:56,990
getting green messages all across so in

513
00:18:53,990 --> 00:18:58,910
terms of environment variables you'll

514
00:18:56,990 --> 00:19:01,280
see there that Bob didn't need the C ICD

515
00:18:58,910 --> 00:19:02,900
flag because there's no TTY being

516
00:19:01,280 --> 00:19:04,460
returned so Bob by default will set

517
00:19:02,900 --> 00:19:06,230
return codes on the flag that you're

518
00:19:04,460 --> 00:19:08,990
setting so you don't have to say that

519
00:19:06,230 --> 00:19:10,940
CRC B equals two like I mentioned you

520
00:19:08,990 --> 00:19:14,060
can supply word list or by default or

521
00:19:10,940 --> 00:19:15,560
look for password and secrets and in

522
00:19:14,060 --> 00:19:17,690
terms of remediation well this is a

523
00:19:15,560 --> 00:19:20,570
tricky one sequence management is hard

524
00:19:17,690 --> 00:19:22,820
and it's mostly Turtles at the end of

525
00:19:20,570 --> 00:19:25,250
the day if you're going to use in v4

526
00:19:22,820 --> 00:19:26,270
secret stuff threat model maybe so you

527
00:19:25,250 --> 00:19:28,190
can know what you're dealing with and

528
00:19:26,270 --> 00:19:30,830
sometimes it is quite useful to actually

529
00:19:28,190 --> 00:19:31,760
nonce your data but be careful with it

530
00:19:30,830 --> 00:19:33,379
because if you actually threaten all

531
00:19:31,760 --> 00:19:35,960
that you'll find that you'll be creating

532
00:19:33,380 --> 00:19:38,060
race conditions for yourself so it's an

533
00:19:35,960 --> 00:19:41,390
interesting problem sequence management

534
00:19:38,060 --> 00:19:43,370
in the cloud but yeah there's more time

535
00:19:41,390 --> 00:19:46,010
to get matter um but it was a bit of a

536
00:19:43,370 --> 00:19:49,879
millennial reference but that's alright

537
00:19:46,010 --> 00:19:52,040
pads containers love living in class who

538
00:19:49,880 --> 00:19:53,630
would have known and because of this you

539
00:19:52,040 --> 00:19:56,000
can find your metadata services in

540
00:19:53,630 --> 00:19:56,660
containers so good old one six nine two

541
00:19:56,000 --> 00:19:59,150
five four

542
00:19:56,660 --> 00:20:00,860
it's in AWS it's in G CP as soon as you

543
00:19:59,150 --> 00:20:01,410
it's a whole bunch of other class and

544
00:20:00,860 --> 00:20:03,270
this is

545
00:20:01,410 --> 00:20:05,970
really cool because networking is hard

546
00:20:03,270 --> 00:20:07,920
in containers and when these endpoints

547
00:20:05,970 --> 00:20:09,960
and metadata services are exposed

548
00:20:07,920 --> 00:20:12,270
depending on the platform you can do a

549
00:20:09,960 --> 00:20:14,190
lot of cool so for example net

550
00:20:12,270 --> 00:20:15,990
instance say that kokum and if you are

551
00:20:14,190 --> 00:20:18,360
in a easy to instance and if that

552
00:20:15,990 --> 00:20:21,690
specific that specific instance has an R

553
00:20:18,360 --> 00:20:22,889
and I am policy or role associated to

554
00:20:21,690 --> 00:20:24,810
that instance you can access the

555
00:20:22,890 --> 00:20:26,070
credentials through the metadata service

556
00:20:24,810 --> 00:20:27,990
now there's a whole bunch of other stuff

557
00:20:26,070 --> 00:20:30,419
you can do depending on the platform for

558
00:20:27,990 --> 00:20:32,250
mounting volumes to creating hosts it

559
00:20:30,420 --> 00:20:33,600
depends on the platform but it's

560
00:20:32,250 --> 00:20:35,520
definitely something that you want to

561
00:20:33,600 --> 00:20:37,350
look out for but that's not the only

562
00:20:35,520 --> 00:20:39,600
kind of endpoint inside containers

563
00:20:37,350 --> 00:20:41,010
there's girl API so think control plane

564
00:20:39,600 --> 00:20:43,949
so you kubernetes control plane journey

565
00:20:41,010 --> 00:20:46,320
running on 10001 or whatnot or any other

566
00:20:43,950 --> 00:20:48,210
endpoints there's stuff to be had over

567
00:20:46,320 --> 00:20:51,060
there and you never really know what's

568
00:20:48,210 --> 00:20:52,620
lurking because a lot of time containers

569
00:20:51,060 --> 00:20:55,350
just get access to it because you know

570
00:20:52,620 --> 00:20:57,780
routing is hard and IP tables you know

571
00:20:55,350 --> 00:20:58,740
IP tables in a container hmm it depends

572
00:20:57,780 --> 00:21:00,570
how much you hate your life that you

573
00:20:58,740 --> 00:21:02,790
want to do that then of course there's

574
00:21:00,570 --> 00:21:06,000
got all easy to classic and if you take

575
00:21:02,790 --> 00:21:08,700
a quote out of the documentation in ec2

576
00:21:06,000 --> 00:21:10,410
classic ec2 instances run in a single

577
00:21:08,700 --> 00:21:13,530
flat network that you share with other

578
00:21:10,410 --> 00:21:15,990
customers should you not it is 2019 and

579
00:21:13,530 --> 00:21:18,629
that is still a thing so depending on

580
00:21:15,990 --> 00:21:20,250
what you're doing either what you're

581
00:21:18,630 --> 00:21:23,340
mounting on interfaces is exposed to

582
00:21:20,250 --> 00:21:24,960
everyone else and vice versa so you kind

583
00:21:23,340 --> 00:21:26,939
of want to check that and of course you

584
00:21:24,960 --> 00:21:28,260
could go back to container quirks the

585
00:21:26,940 --> 00:21:29,550
come on that you want to do so you know

586
00:21:28,260 --> 00:21:31,080
you're on the box so you want to in map

587
00:21:29,550 --> 00:21:32,669
you know what you want to do RP address

588
00:21:31,080 --> 00:21:34,290
show or I have config now tell me what

589
00:21:32,670 --> 00:21:36,120
I'm working with sometimes you don't

590
00:21:34,290 --> 00:21:38,520
have that inner container so it gets a

591
00:21:36,120 --> 00:21:41,510
little bit hot so of course let's have

592
00:21:38,520 --> 00:21:47,100
some schools that will do that for us so

593
00:21:41,510 --> 00:21:48,390
really simple example with Bob is this

594
00:21:47,100 --> 00:21:53,129
is a feature that I want to you know

595
00:21:48,390 --> 00:21:56,730
definitely build out a lot more but Bob

596
00:21:53,130 --> 00:21:59,040
by default will look for two to two

597
00:21:56,730 --> 00:22:01,530
metadata services and we just say

598
00:21:59,040 --> 00:22:03,750
metadata equals true so if you don't

599
00:22:01,530 --> 00:22:07,200
provide an endpoint list

600
00:22:03,750 --> 00:22:10,500
Bob will look for 16.25 for kubernetes

601
00:22:07,200 --> 00:22:11,940
not default at SVC and you see there we

602
00:22:10,500 --> 00:22:15,180
got nothing so now we're going to say

603
00:22:11,940 --> 00:22:17,190
you know what see if you can hit Heroku

604
00:22:15,180 --> 00:22:19,890
from the container and we're gonna

605
00:22:17,190 --> 00:22:21,930
provide an in-point list and what Bob

606
00:22:19,890 --> 00:22:23,970
does and if it gets a valid HTTP

607
00:22:21,930 --> 00:22:26,520
response from any of those endpoints it

608
00:22:23,970 --> 00:22:28,980
will change the return code and tell you

609
00:22:26,520 --> 00:22:32,940
that okay got a response from Heroku

610
00:22:28,980 --> 00:22:34,290
calm and the response was a 200 now if

611
00:22:32,940 --> 00:22:37,080
you see the response code has changed

612
00:22:34,290 --> 00:22:39,120
and that can be quite useful in

613
00:22:37,080 --> 00:22:40,409
environments where you want to actually

614
00:22:39,120 --> 00:22:43,530
go ahead and test with these kinds of

615
00:22:40,410 --> 00:22:45,510
things so like I mentioned these

616
00:22:43,530 --> 00:22:48,450
endpoints return codes too far for a

617
00:22:45,510 --> 00:22:50,370
default and in terms of remediation the

618
00:22:48,450 --> 00:22:52,740
stuff isn't that hard it's just you know

619
00:22:50,370 --> 00:22:54,479
your access controllers but understand

620
00:22:52,740 --> 00:22:57,360
what is their taste to environments for

621
00:22:54,480 --> 00:22:58,710
metadata services because it's I don't

622
00:22:57,360 --> 00:23:00,540
think it's that obvious that when you

623
00:22:58,710 --> 00:23:02,610
building stuff in the cloud that these

624
00:23:00,540 --> 00:23:03,840
things are available and then of course

625
00:23:02,610 --> 00:23:05,969
you know routing is a friend and

626
00:23:03,840 --> 00:23:08,189
authentication like we've been securing

627
00:23:05,970 --> 00:23:09,810
endpoints for quite a while but if you

628
00:23:08,190 --> 00:23:12,570
don't if your endpoints are there you

629
00:23:09,810 --> 00:23:14,220
don't know what you've got to secure so

630
00:23:12,570 --> 00:23:15,629
all of this we can't stuff is fun and

631
00:23:14,220 --> 00:23:17,340
there's a few other recon options are

632
00:23:15,630 --> 00:23:19,650
getting interfaces IP addresses port

633
00:23:17,340 --> 00:23:22,470
scanning all the fun post exploit stuff

634
00:23:19,650 --> 00:23:24,180
but fish with containers there's binary

635
00:23:22,470 --> 00:23:31,110
hijacking and this is if you really want

636
00:23:24,180 --> 00:23:33,060
to break some so so often there is

637
00:23:31,110 --> 00:23:36,419
the case that container binaries are

638
00:23:33,060 --> 00:23:38,100
executed by outside entities for example

639
00:23:36,420 --> 00:23:39,690
dock exec if a containers running and

640
00:23:38,100 --> 00:23:42,389
you want to enlist the contents in a

641
00:23:39,690 --> 00:23:44,700
container you say docket exec Baca IDE

642
00:23:42,390 --> 00:23:47,160
LS and you get the contents of that

643
00:23:44,700 --> 00:23:49,500
container cool all right trust the

644
00:23:47,160 --> 00:23:51,060
command at all like it does not check am

645
00:23:49,500 --> 00:23:52,830
I actually running LS in the container

646
00:23:51,060 --> 00:23:54,240
sure if it's your container you know

647
00:23:52,830 --> 00:23:56,070
you're pounding yourself but there are

648
00:23:54,240 --> 00:24:00,450
some weird edge cases that we'll look

649
00:23:56,070 --> 00:24:02,280
into but also cube city our copy really

650
00:24:00,450 --> 00:24:05,940
cool vulnerability I have five minutes

651
00:24:02,280 --> 00:24:08,250
cou that is I've probably hit halfway so

652
00:24:05,940 --> 00:24:09,990
I apologize for that but we'll get into

653
00:24:08,250 --> 00:24:13,050
the boundary hijacking quickly so

654
00:24:09,990 --> 00:24:16,200
executors containers tar binary and look

655
00:24:13,050 --> 00:24:19,290
at this link it's really really really

656
00:24:16,200 --> 00:24:21,780
cool basically owning kubernetes control

657
00:24:19,290 --> 00:24:25,020
planes so at some point a container

658
00:24:21,780 --> 00:24:28,809
might be executed so what do we do we

659
00:24:25,020 --> 00:24:31,210
just hijack all the binaries so yeah you

660
00:24:28,809 --> 00:24:33,970
break stuff in the container what I am

661
00:24:31,210 --> 00:24:36,159
gonna jump to is these all in the slides

662
00:24:33,970 --> 00:24:40,509
that's how you do it in this case we put

663
00:24:36,159 --> 00:24:43,269
in containers but so what can't what you

664
00:24:40,509 --> 00:24:45,309
can do with binary hijacking it might be

665
00:24:43,269 --> 00:24:47,289
immediate it might not be immediate it

666
00:24:45,309 --> 00:24:49,629
might happen in one minute might happen

667
00:24:47,289 --> 00:24:50,980
a month later I've seen a month later

668
00:24:49,629 --> 00:24:54,879
where containers of mine in certain

669
00:24:50,980 --> 00:24:56,980
systems have been archived and what's

670
00:24:54,879 --> 00:24:59,080
happened is then the orchestrator has

671
00:24:56,980 --> 00:25:01,509
executed Co commands in my container and

672
00:24:59,080 --> 00:25:02,740
provided a token and of course I haven't

673
00:25:01,509 --> 00:25:06,730
gotten that token of course you can

674
00:25:02,740 --> 00:25:09,519
break systems a command is expecting

675
00:25:06,730 --> 00:25:11,289
output a you provide B the system breaks

676
00:25:09,519 --> 00:25:13,960
itself and then general blockage and

677
00:25:11,289 --> 00:25:16,720
I've just gone the red flag thank you

678
00:25:13,960 --> 00:25:19,029
for your time the slides are available

679
00:25:16,720 --> 00:25:20,950
on the Reaper and I'm gonna stop talking

680
00:25:19,029 --> 00:25:23,309
before they throw me out so thank you

681
00:25:20,950 --> 00:25:23,309
very much

