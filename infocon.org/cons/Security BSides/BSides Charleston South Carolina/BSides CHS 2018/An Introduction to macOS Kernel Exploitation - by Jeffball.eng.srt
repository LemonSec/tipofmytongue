1
00:00:39,840 --> 00:00:50,370
we have any introduction to mac OS

2
00:00:43,260 --> 00:00:52,080
kernel exploitation by<font color="#CCCCCC"> jeff ball so my</font>

3
00:00:50,370 --> 00:00:53,820
name<font color="#CCCCCC"> is jeff ball I'm gonna</font><font color="#E5E5E5"> talk a</font>

4
00:00:52,080 --> 00:00:56,640
little bit<font color="#E5E5E5"> of about Mac OS kernel</font>

5
00:00:53,820 --> 00:01:00,600
exploitation<font color="#E5E5E5"> as he just mentioned first</font>

6
00:00:56,640 --> 00:01:03,870
<font color="#E5E5E5">off who am</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> I'm a researcher at grim</font>

7
00:01:00,600 --> 00:01:06,390
<font color="#E5E5E5">I'm also a member of the</font><font color="#CCCCCC"> DEF CON group</font>

8
00:01:03,870 --> 00:01:08,100
of Orange County<font color="#E5E5E5"> and my handle is Jeff</font>

9
00:01:06,390 --> 00:01:11,070
ball at<font color="#CCCCCC"> 55 on</font><font color="#E5E5E5"> Twitter if you</font><font color="#CCCCCC"> want to</font>

10
00:01:08,100 --> 00:01:13,140
look me up later so first we're<font color="#E5E5E5"> gonna</font>

11
00:01:11,070 --> 00:01:14,940
<font color="#E5E5E5">talk a little bit about why we will care</font>

12
00:01:13,140 --> 00:01:18,510
about<font color="#E5E5E5"> trying to exploit the</font><font color="#CCCCCC"> Mac OS</font>

13
00:01:14,940 --> 00:01:20,100
<font color="#E5E5E5">kernel</font><font color="#CCCCCC"> first reason</font><font color="#E5E5E5"> is obviously that it</font>

14
00:01:18,510 --> 00:01:22,830
controls all<font color="#CCCCCC"> of the authorization checks</font>

15
00:01:20,100 --> 00:01:24,330
<font color="#E5E5E5">and prevents any</font><font color="#CCCCCC"> type of system</font>

16
00:01:22,830 --> 00:01:26,369
modifications<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you might want to do</font>

17
00:01:24,330 --> 00:01:28,710
and so if you can exploit the kernel

18
00:01:26,369 --> 00:01:31,320
then you can obviously<font color="#E5E5E5"> bypass these and</font>

19
00:01:28,710 --> 00:01:32,789
so that's the the<font color="#E5E5E5"> most obvious reason</font>

20
00:01:31,320 --> 00:01:34,860
<font color="#E5E5E5">why you would want</font><font color="#CCCCCC"> to the second reason</font>

21
00:01:32,790 --> 00:01:37,979
is<font color="#CCCCCC"> that a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of software is started</font>

22
00:01:34,860 --> 00:01:40,440
sandboxing itself<font color="#E5E5E5"> so for</font><font color="#CCCCCC"> instance fari</font>

23
00:01:37,979 --> 00:01:42,600
<font color="#E5E5E5">will sandbox</font><font color="#CCCCCC"> any of the more complicated</font>

24
00:01:40,440 --> 00:01:43,860
processing and it's one way you can

25
00:01:42,600 --> 00:01:45,210
break<font color="#E5E5E5"> out of sandbox is because</font>

26
00:01:43,860 --> 00:01:47,399
<font color="#CCCCCC">oftentimes</font><font color="#E5E5E5"> when you're inside the</font>

27
00:01:45,210 --> 00:01:50,130
sandbox<font color="#CCCCCC"> you can still talk to</font><font color="#E5E5E5"> the kernel</font>

28
00:01:47,399 --> 00:01:52,080
<font color="#E5E5E5">and so you can exploit the kernel you</font>

29
00:01:50,130 --> 00:01:55,318
can<font color="#E5E5E5"> easily just by pious and get out of</font>

30
00:01:52,080 --> 00:01:57,030
the sandbox without having to go<font color="#CCCCCC"> through</font>

31
00:01:55,319 --> 00:01:59,460
and try<font color="#E5E5E5"> and exploit the other half of</font>

32
00:01:57,030 --> 00:02:01,800
the unseen box process and so it's just

33
00:01:59,460 --> 00:02:04,020
<font color="#CCCCCC">oftentimes seen as the easier of</font><font color="#E5E5E5"> the two</font>

34
00:02:01,800 --> 00:02:06,179
approaches<font color="#CCCCCC"> to just exploit the kernel</font>

35
00:02:04,020 --> 00:02:08,399
<font color="#CCCCCC">and get out</font><font color="#E5E5E5"> that way</font><font color="#CCCCCC"> rather</font><font color="#E5E5E5"> than trying</font>

36
00:02:06,179 --> 00:02:10,440
to go the other<font color="#CCCCCC"> way</font><font color="#E5E5E5"> and so those are</font>

37
00:02:08,399 --> 00:02:11,670
kind of<font color="#E5E5E5"> the two of the more main ones</font>

38
00:02:10,440 --> 00:02:14,850
the second one being a more recent

39
00:02:11,670 --> 00:02:17,369
concern next I'm just<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to talk a</font>

40
00:02:14,850 --> 00:02:21,510
little bit<font color="#E5E5E5"> about</font><font color="#CCCCCC"> an introduction to the</font>

41
00:02:17,370 --> 00:02:23,760
<font color="#CCCCCC">xnu</font><font color="#E5E5E5"> kernel which is the</font><font color="#CCCCCC"> Mac OS kernel so</font>

42
00:02:21,510 --> 00:02:25,319
the ex-new kernel is actually a

43
00:02:23,760 --> 00:02:29,519
combination of two kernels there's the

44
00:02:25,319 --> 00:02:31,890
<font color="#CCCCCC">MA calf and the</font><font color="#E5E5E5"> BSD half</font><font color="#CCCCCC"> mock was an</font>

45
00:02:29,520 --> 00:02:34,470
early research project out<font color="#CCCCCC"> of Carnegie</font>

46
00:02:31,890 --> 00:02:37,859
Mellon<font color="#CCCCCC"> it is actually a microkernel and</font>

47
00:02:34,470 --> 00:02:39,780
<font color="#CCCCCC">so what that is is it tries to only</font><font color="#E5E5E5"> have</font>

48
00:02:37,860 --> 00:02:42,270
the components that<font color="#CCCCCC"> are necessary</font><font color="#E5E5E5"> to be</font>

49
00:02:39,780 --> 00:02:44,340
<font color="#E5E5E5">running inside of</font><font color="#CCCCCC"> ring three as compared</font>

50
00:02:42,270 --> 00:02:48,360
<font color="#E5E5E5">to a monolithic one like the other half</font>

51
00:02:44,340 --> 00:02:50,489
over<font color="#CCCCCC"> the bsd half and so what that</font><font color="#E5E5E5"> means</font>

52
00:02:48,360 --> 00:02:52,380
is it will<font color="#E5E5E5"> do simple</font><font color="#CCCCCC"> things like message</font>

53
00:02:50,489 --> 00:02:54,090
passing<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> management's</font>

54
00:02:52,380 --> 00:02:56,340
scheduling<font color="#E5E5E5"> but the rest is run as</font>

55
00:02:54,090 --> 00:02:58,950
applications inside<font color="#E5E5E5"> of</font><font color="#CCCCCC"> userland and so</font>

56
00:02:56,340 --> 00:03:00,750
if my<font color="#CCCCCC"> application wants</font><font color="#E5E5E5"> to send a</font>

57
00:02:58,950 --> 00:03:02,369
network packet<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> actually talk to</font>

58
00:03:00,750 --> 00:03:04,470
the<font color="#E5E5E5"> kernel to send that Network packet I</font>

59
00:03:02,370 --> 00:03:06,450
pass a message<font color="#E5E5E5"> to the networking</font>

60
00:03:04,470 --> 00:03:09,060
application which then<font color="#E5E5E5"> sends the network</font>

61
00:03:06,450 --> 00:03:11,100
packet out<font color="#E5E5E5"> as compared to within</font>

62
00:03:09,060 --> 00:03:13,800
traditional<font color="#E5E5E5"> monolithic kernels like</font>

63
00:03:11,100 --> 00:03:15,600
Linux or Windows<font color="#CCCCCC"> I just talked to the</font>

64
00:03:13,800 --> 00:03:18,060
kernel directly and that code<font color="#CCCCCC"> that does</font>

65
00:03:15,600 --> 00:03:20,310
the network parsing and<font color="#E5E5E5"> network sending</font>

66
00:03:18,060 --> 00:03:22,590
of packets<font color="#E5E5E5"> is inside of the kernel and</font>

67
00:03:20,310 --> 00:03:25,230
<font color="#CCCCCC">so it can</font><font color="#E5E5E5"> be seen to be a much more</font>

68
00:03:22,590 --> 00:03:27,060
secure approach because if you were to

69
00:03:25,230 --> 00:03:29,220
exploit the networking<font color="#E5E5E5"> application you</font>

70
00:03:27,060 --> 00:03:33,330
only gain access<font color="#CCCCCC"> to that application and</font>

71
00:03:29,220 --> 00:03:35,220
not the<font color="#CCCCCC"> entire OS so Mac OS is actually</font>

72
00:03:33,330 --> 00:03:39,960
a combination of that and<font color="#CCCCCC"> the monolithic</font>

73
00:03:35,220 --> 00:03:43,170
<font color="#E5E5E5">kernel of BSD</font><font color="#CCCCCC"> so the</font><font color="#E5E5E5"> bsd half provides</font>

74
00:03:39,960 --> 00:03:46,020
things like the disk i/o and networking

75
00:03:43,170 --> 00:03:48,269
<font color="#CCCCCC">i/o</font><font color="#E5E5E5"> management of processes whereas the</font>

76
00:03:46,020 --> 00:03:50,090
<font color="#CCCCCC">mach half does things like</font><font color="#E5E5E5"> memory</font>

77
00:03:48,270 --> 00:03:53,310
management<font color="#CCCCCC"> inter process communication</font>

78
00:03:50,090 --> 00:03:56,250
messages and managing of<font color="#E5E5E5"> tasks</font><font color="#CCCCCC"> and</font>

79
00:03:53,310 --> 00:03:58,710
threads one other thing to<font color="#E5E5E5"> note is the</font><font color="#CCCCCC"> X</font>

80
00:03:56,250 --> 00:04:00,930
and<font color="#CCCCCC"> U kernel is open source Apple puts</font>

81
00:03:58,710 --> 00:04:02,910
it up on<font color="#E5E5E5"> open source Apple comm and</font><font color="#CCCCCC"> they</font>

82
00:04:00,930 --> 00:04:06,210
also have a github<font color="#CCCCCC"> that lags</font><font color="#E5E5E5"> slightly</font>

83
00:04:02,910 --> 00:04:08,370
behind<font color="#E5E5E5"> their website you can go and get</font>

84
00:04:06,210 --> 00:04:11,700
it compile it<font color="#E5E5E5"> and make</font><font color="#CCCCCC"> changes and</font>

85
00:04:08,370 --> 00:04:13,470
install it yourself<font color="#E5E5E5"> on your</font><font color="#CCCCCC"> macbook</font><font color="#E5E5E5"> they</font>

86
00:04:11,700 --> 00:04:16,409
don't always have<font color="#CCCCCC"> the</font><font color="#E5E5E5"> latest version up</font>

87
00:04:13,470 --> 00:04:19,019
so they will put up the<font color="#CCCCCC"> new versions of</font>

88
00:04:16,410 --> 00:04:21,180
<font color="#E5E5E5">the kernel open sourced slightly after</font>

89
00:04:19,019 --> 00:04:22,799
<font color="#E5E5E5">so for instance right</font><font color="#CCCCCC"> now the</font><font color="#E5E5E5"> latest</font>

90
00:04:21,180 --> 00:04:26,360
version<font color="#E5E5E5"> that's open</font><font color="#CCCCCC"> source is</font><font color="#E5E5E5"> ten</font>

91
00:04:22,800 --> 00:04:31,260
<font color="#E5E5E5">thirteen six and they're on to 1014 for</font>

92
00:04:26,360 --> 00:04:32,910
<font color="#E5E5E5">Mojave so a little bit about the maca</font>

93
00:04:31,260 --> 00:04:35,840
that's important<font color="#E5E5E5"> for to know for</font>

94
00:04:32,910 --> 00:04:38,940
exploitation<font color="#E5E5E5"> is</font><font color="#CCCCCC"> mock is heavily</font><font color="#E5E5E5"> based on</font>

95
00:04:35,840 --> 00:04:40,770
passages<font color="#E5E5E5"> and so if you want to talk to a</font>

96
00:04:38,940 --> 00:04:42,719
service you pass a message to<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and</font>

97
00:04:40,770 --> 00:04:44,969
those<font color="#CCCCCC"> are</font><font color="#E5E5E5"> called mock messages on the</font>

98
00:04:42,720 --> 00:04:47,040
other hand and when you pass a message

99
00:04:44,970 --> 00:04:49,910
<font color="#E5E5E5">you pass it to</font><font color="#CCCCCC"> a processes or a tasks</font>

100
00:04:47,040 --> 00:04:51,780
<font color="#E5E5E5">mock port which is basically just a</font>

101
00:04:49,910 --> 00:04:56,130
<font color="#CCCCCC">endpoint for</font><font color="#E5E5E5"> you to receive a one</font>

102
00:04:51,780 --> 00:04:58,260
<font color="#E5E5E5">directional mock message</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> ports</font>

103
00:04:56,130 --> 00:05:00,090
themselves have access restrictions

104
00:04:58,260 --> 00:05:02,729
which are<font color="#E5E5E5"> known as port rights in mock</font>

105
00:05:00,090 --> 00:05:05,020
terminology and those being send send

106
00:05:02,729 --> 00:05:06,909
once and receive<font color="#CCCCCC"> CIN</font>

107
00:05:05,020 --> 00:05:09,849
is obvious<font color="#E5E5E5"> you can send if you have the</font>

108
00:05:06,910 --> 00:05:12,039
send right on a port you<font color="#CCCCCC"> can send a</font><font color="#E5E5E5"> mock</font>

109
00:05:09,849 --> 00:05:13,628
message to it receive is also obvious if

110
00:05:12,039 --> 00:05:15,909
<font color="#CCCCCC">you have the receive right you are the</font>

111
00:05:13,629 --> 00:05:18,729
receiver for that mock port<font color="#CCCCCC"> you get all</font>

112
00:05:15,909 --> 00:05:21,039
messages<font color="#CCCCCC"> from</font><font color="#E5E5E5"> that are sent to that port</font>

113
00:05:18,729 --> 00:05:23,110
and<font color="#E5E5E5"> then send once means you're allowed</font>

114
00:05:21,039 --> 00:05:25,599
to send a mock message to a port once

115
00:05:23,110 --> 00:05:28,180
that's often<font color="#CCCCCC"> used for callback</font>

116
00:05:25,599 --> 00:05:31,120
functionality so if I have the<font color="#CCCCCC"> received</font>

117
00:05:28,180 --> 00:05:32,620
port<font color="#E5E5E5"> and someone sends me a message</font><font color="#CCCCCC"> and</font>

118
00:05:31,120 --> 00:05:34,750
they want me to be able<font color="#E5E5E5"> to talk back</font>

119
00:05:32,620 --> 00:05:36,699
they'll give me<font color="#CCCCCC"> a send once</font><font color="#E5E5E5"> right to one</font>

120
00:05:34,750 --> 00:05:38,409
of their<font color="#E5E5E5"> own ports and so through that</font>

121
00:05:36,699 --> 00:05:40,630
<font color="#E5E5E5">mechanism I can then use that send right</font>

122
00:05:38,409 --> 00:05:42,639
<font color="#E5E5E5">or send once right to send a message</font>

123
00:05:40,630 --> 00:05:45,669
back the other thing that's<font color="#E5E5E5"> important to</font>

124
00:05:42,639 --> 00:05:50,169
<font color="#E5E5E5">note is that these mock port rights can</font>

125
00:05:45,669 --> 00:05:51,789
<font color="#CCCCCC">be passed</font><font color="#E5E5E5"> through mock messages so you</font>

126
00:05:50,169 --> 00:05:53,318
can<font color="#E5E5E5"> send it to</font><font color="#CCCCCC"> another process or</font>

127
00:05:51,789 --> 00:05:55,180
another process can send it to<font color="#CCCCCC"> you and</font>

128
00:05:53,319 --> 00:05:58,810
that's<font color="#CCCCCC"> actually how</font><font color="#E5E5E5"> you get the port</font>

129
00:05:55,180 --> 00:06:01,090
rights for<font color="#E5E5E5"> other services these mock</font>

130
00:05:58,810 --> 00:06:04,000
ports and mock messages<font color="#E5E5E5"> are how a large</font>

131
00:06:01,090 --> 00:06:06,310
portion<font color="#E5E5E5"> of the services and</font><font color="#CCCCCC"> kernel API</font>

132
00:06:04,000 --> 00:06:08,740
is accessed<font color="#E5E5E5"> from user land so for</font>

133
00:06:06,310 --> 00:06:11,020
<font color="#E5E5E5">instance if I want to draw something</font><font color="#CCCCCC"> on</font>

134
00:06:08,740 --> 00:06:12,849
<font color="#CCCCCC">the screen I will get a port right to</font>

135
00:06:11,020 --> 00:06:15,099
the<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> server which is the process</font>

136
00:06:12,849 --> 00:06:16,479
on Mac OS that does all<font color="#CCCCCC"> of the drawing</font>

137
00:06:15,099 --> 00:06:18,370
<font color="#E5E5E5">and I will send a mock message</font>

138
00:06:16,479 --> 00:06:22,719
<font color="#E5E5E5">requesting that it draw something on the</font>

139
00:06:18,370 --> 00:06:24,490
<font color="#CCCCCC">screen and then it did an addition to</font>

140
00:06:22,719 --> 00:06:26,529
the processes like<font color="#CCCCCC"> windows the windows</font>

141
00:06:24,490 --> 00:06:28,330
<font color="#E5E5E5">service the kernel actually has a number</font>

142
00:06:26,529 --> 00:06:30,460
<font color="#CCCCCC">of ports as well</font><font color="#E5E5E5"> that it listens on that</font>

143
00:06:28,330 --> 00:06:32,380
you can send messages<font color="#CCCCCC"> to as well see on</font>

144
00:06:30,460 --> 00:06:34,750
<font color="#CCCCCC">the</font><font color="#E5E5E5"> next slide one other thing that's</font>

145
00:06:32,380 --> 00:06:36,550
useful to know<font color="#CCCCCC"> especially</font><font color="#E5E5E5"> when talking</font>

146
00:06:34,750 --> 00:06:38,849
about<font color="#E5E5E5"> exploiting through the use of mock</font>

147
00:06:36,550 --> 00:06:42,279
ports and messages<font color="#E5E5E5"> is task port task</font>

148
00:06:38,849 --> 00:06:44,500
port<font color="#CCCCCC"> Tsar like other ports</font><font color="#E5E5E5"> except as the</font>

149
00:06:42,279 --> 00:06:47,020
name implies they focus on managing a

150
00:06:44,500 --> 00:06:50,940
task<font color="#E5E5E5"> and so this allows if you have the</font>

151
00:06:47,020 --> 00:06:54,039
task<font color="#CCCCCC"> port</font><font color="#E5E5E5"> to a task or prop process the</font>

152
00:06:50,940 --> 00:06:56,169
one side note the processes are the<font color="#CCCCCC"> BSD</font>

153
00:06:54,039 --> 00:06:57,940
term and tasks are<font color="#E5E5E5"> the mock term they</font>

154
00:06:56,169 --> 00:07:00,729
<font color="#E5E5E5">are correlated in that each process</font><font color="#CCCCCC"> has</font>

155
00:06:57,940 --> 00:07:02,650
a corresponding task<font color="#E5E5E5"> but I'm going to</font>

156
00:07:00,729 --> 00:07:04,930
<font color="#E5E5E5">basically use them interchangeably</font><font color="#CCCCCC"> but</font>

157
00:07:02,650 --> 00:07:06,698
anyway<font color="#E5E5E5"> if you have the task port for a</font>

158
00:07:04,930 --> 00:07:09,610
task it lets you do things<font color="#E5E5E5"> like create a</font>

159
00:07:06,699 --> 00:07:11,259
thread<font color="#CCCCCC"> fork it terminate and very</font>

160
00:07:09,610 --> 00:07:14,440
usefully read and write the memory of

161
00:07:11,259 --> 00:07:17,680
<font color="#CCCCCC">that task that's useful</font><font color="#E5E5E5"> for the debugger</font>

162
00:07:14,440 --> 00:07:18,770
<font color="#CCCCCC">and so things like ll DB and gdb will</font>

163
00:07:17,680 --> 00:07:22,039
use task force

164
00:07:18,770 --> 00:07:24,099
to debug other processes we'll see a

165
00:07:22,039 --> 00:07:27,830
<font color="#E5E5E5">little bit later</font><font color="#CCCCCC"> how they're useful</font><font color="#E5E5E5"> for</font>

166
00:07:24,099 --> 00:07:30,590
<font color="#E5E5E5">exploitation the next component that I'm</font>

167
00:07:27,830 --> 00:07:32,719
going to<font color="#CCCCCC"> talk about is i/o kit</font><font color="#E5E5E5"> IO kit is</font>

168
00:07:30,590 --> 00:07:34,818
kind of another portion of<font color="#E5E5E5"> the kernel</font>

169
00:07:32,720 --> 00:07:37,099
that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the device driver framework it</font>

170
00:07:34,819 --> 00:07:39,050
allows you to<font color="#E5E5E5"> create device drivers</font>

171
00:07:37,099 --> 00:07:39,650
<font color="#E5E5E5">without having to code the</font><font color="#CCCCCC"> whole thing</font>

172
00:07:39,050 --> 00:07:42,139
yourself

173
00:07:39,650 --> 00:07:45,020
<font color="#E5E5E5">it's a</font><font color="#CCCCCC"> C++ wrapper that allows you to</font>

174
00:07:42,139 --> 00:07:48,440
<font color="#CCCCCC">just extend off of base classes most</font>

175
00:07:45,020 --> 00:07:50,448
related to<font color="#E5E5E5"> your driver and so there's a</font>

176
00:07:48,440 --> 00:07:52,340
number<font color="#E5E5E5"> of classes that you</font><font color="#CCCCCC"> can inherit</font>

177
00:07:50,449 --> 00:07:53,690
off of that will have most of the

178
00:07:52,340 --> 00:07:55,340
functionality you'll need with you just

179
00:07:53,690 --> 00:08:01,009
needing to implement the specific

180
00:07:55,340 --> 00:08:04,130
components<font color="#CCCCCC"> related</font><font color="#E5E5E5"> to your device when</font>

181
00:08:01,009 --> 00:08:05,780
you code a device driver and i/o<font color="#E5E5E5"> kit one</font>

182
00:08:04,130 --> 00:08:07,400
of<font color="#E5E5E5"> the things that you can do is you</font>

183
00:08:05,780 --> 00:08:10,400
register<font color="#E5E5E5"> that driver with the</font><font color="#CCCCCC"> i/o</font>

184
00:08:07,400 --> 00:08:11,750
registry through that the user<font color="#CCCCCC"> LAN</font>

185
00:08:10,400 --> 00:08:12,258
components<font color="#E5E5E5"> that want to talk to your</font>

186
00:08:11,750 --> 00:08:15,289
driver

187
00:08:12,259 --> 00:08:17,360
they will look it<font color="#E5E5E5"> up via the i/o</font>

188
00:08:15,289 --> 00:08:20,060
registry<font color="#E5E5E5"> and create an i/o user client</font>

189
00:08:17,360 --> 00:08:22,639
<font color="#E5E5E5">which is just the i/o frameworks class</font>

190
00:08:20,060 --> 00:08:25,719
for talking to that driver and then you

191
00:08:22,639 --> 00:08:28,159
can<font color="#E5E5E5"> define functions in the driver that</font>

192
00:08:25,719 --> 00:08:30,110
the user land can call with their own

193
00:08:28,159 --> 00:08:32,539
<font color="#E5E5E5">values and so if you want to provide a</font>

194
00:08:30,110 --> 00:08:34,279
way<font color="#CCCCCC"> for</font><font color="#E5E5E5"> users a user land process to</font>

195
00:08:32,539 --> 00:08:36,439
talk to your driver in<font color="#E5E5E5"> order to make it</font>

196
00:08:34,279 --> 00:08:39,020
work<font color="#E5E5E5"> you</font><font color="#CCCCCC"> just register it with the</font><font color="#E5E5E5"> i/o</font>

197
00:08:36,440 --> 00:08:40,789
registry<font color="#E5E5E5"> the user name process creates</font>

198
00:08:39,020 --> 00:08:43,010
an<font color="#E5E5E5"> i/o user client and then it just</font>

199
00:08:40,789 --> 00:08:46,339
calls the functions in your<font color="#E5E5E5"> driver that</font>

200
00:08:43,010 --> 00:08:49,160
you've defined<font color="#E5E5E5"> for that purpose one of</font>

201
00:08:46,339 --> 00:08:51,680
the internally this<font color="#E5E5E5"> is all based off of</font>

202
00:08:49,160 --> 00:08:53,209
<font color="#E5E5E5">mock messages the i/o kit framework and</font>

203
00:08:51,680 --> 00:08:55,160
use your land when you say please<font color="#E5E5E5"> call</font>

204
00:08:53,209 --> 00:08:57,170
<font color="#E5E5E5">this driver method or please give me a</font>

205
00:08:55,160 --> 00:08:59,630
user client<font color="#CCCCCC"> before this driver</font><font color="#E5E5E5"> will talk</font>

206
00:08:57,170 --> 00:09:02,449
to the i/o kit nasty report which is a

207
00:08:59,630 --> 00:09:04,100
mock port and it will say please<font color="#E5E5E5"> call</font>

208
00:09:02,450 --> 00:09:08,709
this method<font color="#E5E5E5"> on behalf of this user</font>

209
00:09:04,100 --> 00:09:12,920
client<font color="#CCCCCC"> one thing you can do is you can</font>

210
00:09:08,709 --> 00:09:17,449
sorry screen<font color="#E5E5E5"> size changed</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> look</font>

211
00:09:12,920 --> 00:09:19,219
and see<font color="#E5E5E5"> what what drive I awoke</font><font color="#CCCCCC"> it</font>

212
00:09:17,450 --> 00:09:22,100
<font color="#E5E5E5">drivers are available</font><font color="#CCCCCC"> via the i/o</font><font color="#E5E5E5"> edge</font>

213
00:09:19,220 --> 00:09:24,140
command<font color="#E5E5E5"> and so in this you can see that</font>

214
00:09:22,100 --> 00:09:26,959
<font color="#CCCCCC">I have the VirtualBox driver at the</font>

215
00:09:24,140 --> 00:09:30,970
bottom that's installed<font color="#E5E5E5"> and if I want to</font>

216
00:09:26,959 --> 00:09:32,150
<font color="#E5E5E5">talk to it I would make</font><font color="#CCCCCC"> a VirtualBox USB</font>

217
00:09:30,970 --> 00:09:33,590
<font color="#E5E5E5">user</font>

218
00:09:32,150 --> 00:09:36,260
client and then I would be able<font color="#E5E5E5"> to call</font>

219
00:09:33,590 --> 00:09:41,780
the various functions that<font color="#E5E5E5"> the</font>

220
00:09:36,260 --> 00:09:43,610
VirtualBox driver has oh shoot<font color="#CCCCCC"> sorry let</font>

221
00:09:41,780 --> 00:09:45,579
me<font color="#E5E5E5"> get out</font><font color="#CCCCCC"> of that yeah that's good he</font>

222
00:09:43,610 --> 00:09:50,570
told me now<font color="#CCCCCC"> cuz oh wow</font>

223
00:09:45,580 --> 00:09:51,980
<font color="#E5E5E5">this change size on me well</font><font color="#CCCCCC"> alright</font>

224
00:09:50,570 --> 00:09:55,580
there's<font color="#E5E5E5"> the VMware one</font><font color="#CCCCCC"> cuz I also have</font>

225
00:09:51,980 --> 00:09:57,740
that installed<font color="#E5E5E5"> but so if I wanted to I</font>

226
00:09:55,580 --> 00:10:01,490
could talk to<font color="#CCCCCC"> that</font><font color="#E5E5E5"> kernel extension by</font>

227
00:09:57,740 --> 00:10:02,930
making a VMware USB port USB client and

228
00:10:01,490 --> 00:10:07,000
then calling the functions that that

229
00:10:02,930 --> 00:10:09,739
driver has set up<font color="#E5E5E5"> for to me to call so</font>

230
00:10:07,000 --> 00:10:11,960
that's just one of the<font color="#CCCCCC"> areas of</font><font color="#E5E5E5"> text if</font>

231
00:10:09,740 --> 00:10:14,090
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is all of</font><font color="#E5E5E5"> these drivers here it's</font>

232
00:10:11,960 --> 00:10:16,450
<font color="#CCCCCC">very hard to see at</font><font color="#E5E5E5"> this huge screen</font>

233
00:10:14,090 --> 00:10:18,710
<font color="#E5E5E5">size but it's actually a hierarchy with</font>

234
00:10:16,450 --> 00:10:28,970
drivers having multiple<font color="#E5E5E5"> different</font>

235
00:10:18,710 --> 00:10:31,520
classes anywho anyway so moving on<font color="#E5E5E5"> they</font>

236
00:10:28,970 --> 00:10:33,050
just<font color="#CCCCCC"> talked a little bit about the</font>

237
00:10:31,520 --> 00:10:34,670
attack surface that's available<font color="#E5E5E5"> if</font>

238
00:10:33,050 --> 00:10:35,170
you're trying<font color="#E5E5E5"> to go after the X and you</font>

239
00:10:34,670 --> 00:10:37,670
colonel

240
00:10:35,170 --> 00:10:40,130
obviously like most OS is it's got sis

241
00:10:37,670 --> 00:10:43,790
calls<font color="#E5E5E5"> there's the</font><font color="#CCCCCC"> BSD</font><font color="#E5E5E5"> half which has</font>

242
00:10:40,130 --> 00:10:45,680
<font color="#E5E5E5">over 500 sis calls and</font><font color="#CCCCCC"> that Apple keeps</font>

243
00:10:43,790 --> 00:10:47,689
changing them with each kernel update

244
00:10:45,680 --> 00:10:49,699
and so they will introduce new

245
00:10:47,690 --> 00:10:51,800
functionality which means new bugs<font color="#E5E5E5"> as</font>

246
00:10:49,700 --> 00:10:53,570
well<font color="#CCCCCC"> as some of the old ones</font><font color="#E5E5E5"> also have</font>

247
00:10:51,800 --> 00:10:56,180
<font color="#E5E5E5">the still bugs and they continue to find</font>

248
00:10:53,570 --> 00:10:58,610
bugs in the large number of sis calls

249
00:10:56,180 --> 00:11:01,760
that BSD provides and then additionally

250
00:10:58,610 --> 00:11:03,350
because the<font color="#CCCCCC"> X new kernel is split in</font>

251
00:11:01,760 --> 00:11:05,380
half there's also the<font color="#CCCCCC"> mock half which</font>

252
00:11:03,350 --> 00:11:08,030
has their traps which is just another

253
00:11:05,380 --> 00:11:11,330
terminology<font color="#E5E5E5"> for how they talk about sis</font>

254
00:11:08,030 --> 00:11:13,819
<font color="#E5E5E5">calls those also have had bugs in recent</font>

255
00:11:11,330 --> 00:11:16,940
years<font color="#E5E5E5"> Ian beers found one and wrote a</font>

256
00:11:13,820 --> 00:11:17,680
<font color="#CCCCCC">jailbreak using it just I</font><font color="#E5E5E5"> think last</font>

257
00:11:16,940 --> 00:11:20,270
year

258
00:11:17,680 --> 00:11:22,099
additionally like Linux there's device

259
00:11:20,270 --> 00:11:24,590
files and those device files have<font color="#CCCCCC"> iocked</font>

260
00:11:22,100 --> 00:11:28,010
<font color="#CCCCCC">dolls</font><font color="#E5E5E5"> and so that is another part place</font>

261
00:11:24,590 --> 00:11:30,590
where user<font color="#E5E5E5"> values and user data can be</font>

262
00:11:28,010 --> 00:11:33,830
<font color="#E5E5E5">parsed which may lead to bugs networking</font>

263
00:11:30,590 --> 00:11:36,680
protocols<font color="#E5E5E5"> also</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> taken user input and</font>

264
00:11:33,830 --> 00:11:40,190
<font color="#E5E5E5">so just a week and a half ago or so</font>

265
00:11:36,680 --> 00:11:42,859
<font color="#E5E5E5">there was the ICMP error vulnerability</font>

266
00:11:40,190 --> 00:11:44,710
which the networking<font color="#CCCCCC"> code inside</font><font color="#E5E5E5"> of the</font>

267
00:11:42,860 --> 00:11:47,890
<font color="#E5E5E5">bsd half for ice</font>

268
00:11:44,710 --> 00:11:51,040
<font color="#CCCCCC">P error messages</font><font color="#E5E5E5"> incorrectly read</font>

269
00:11:47,890 --> 00:11:54,670
trusted<font color="#CCCCCC"> a.length</font><font color="#E5E5E5"> inside of the packet</font>

270
00:11:51,040 --> 00:11:56,079
which led to a heap overflow which can

271
00:11:54,670 --> 00:11:57,339
lead to<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> corrupt or which will</font>

272
00:11:56,080 --> 00:12:00,370
lead to<font color="#CCCCCC"> memory corruption and can</font>

273
00:11:57,340 --> 00:12:03,100
<font color="#CCCCCC">possibly be exploited so that code while</font>

274
00:12:00,370 --> 00:12:05,650
<font color="#E5E5E5">it has been there</font><font color="#CCCCCC"> for a while is still</font>

275
00:12:03,100 --> 00:12:08,230
<font color="#E5E5E5">having bugs as simple as not checking a</font>

276
00:12:05,650 --> 00:12:09,819
header length so that<font color="#CCCCCC"> it could also be</font>

277
00:12:08,230 --> 00:12:11,140
<font color="#E5E5E5">another area and then one of the areas</font>

278
00:12:09,820 --> 00:12:12,790
that I'm<font color="#E5E5E5"> gonna talk</font><font color="#CCCCCC"> a little bit more</font>

279
00:12:11,140 --> 00:12:15,449
about today and the vulnerability<font color="#CCCCCC"> we'll</font>

280
00:12:12,790 --> 00:12:18,219
<font color="#E5E5E5">focus on is inside of an i/o kit driver</font>

281
00:12:15,450 --> 00:12:20,650
<font color="#CCCCCC">device drivers are notorious for</font><font color="#E5E5E5"> having</font>

282
00:12:18,220 --> 00:12:21,970
bugs because they aren't<font color="#CCCCCC"> as widely</font><font color="#E5E5E5"> used</font>

283
00:12:20,650 --> 00:12:24,910
or as looked at as the rest of the

284
00:12:21,970 --> 00:12:28,450
kernel<font color="#CCCCCC"> and they also parse user data and</font>

285
00:12:24,910 --> 00:12:29,800
so if a device driver<font color="#E5E5E5"> author forgets to</font>

286
00:12:28,450 --> 00:12:31,810
check a value<font color="#E5E5E5"> that might lead to a</font>

287
00:12:29,800 --> 00:12:34,060
vulnerability<font color="#E5E5E5"> and we'll see how that</font><font color="#CCCCCC"> I</font>

288
00:12:31,810 --> 00:12:37,239
actually can<font color="#E5E5E5"> and how that vulnerability</font>

289
00:12:34,060 --> 00:12:38,489
<font color="#E5E5E5">can be exploited in a little bit next</font>

290
00:12:37,240 --> 00:12:41,740
<font color="#E5E5E5">I'm going to talk a little bit about</font>

291
00:12:38,490 --> 00:12:43,360
<font color="#E5E5E5">some of the methods</font><font color="#CCCCCC"> of debugging</font><font color="#E5E5E5"> or</font>

292
00:12:41,740 --> 00:12:45,520
testing while you're trying<font color="#E5E5E5"> to write an</font>

293
00:12:43,360 --> 00:12:47,530
exploit and so what can<font color="#E5E5E5"> you do to try</font>

294
00:12:45,520 --> 00:12:53,620
and<font color="#E5E5E5"> help yourself out</font><font color="#CCCCCC"> to make things a</font>

295
00:12:47,530 --> 00:12:56,980
little bit easier<font color="#CCCCCC"> so the first thing i</font>

296
00:12:53,620 --> 00:12:59,710
said<font color="#CCCCCC"> or i already mentioned is that xnu</font>

297
00:12:56,980 --> 00:13:02,380
<font color="#CCCCCC">is open source and</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can compile and</font>

298
00:12:59,710 --> 00:13:04,180
<font color="#CCCCCC">install it and make changes to it it's a</font>

299
00:13:02,380 --> 00:13:07,300
little<font color="#CCCCCC"> bit of a process there's</font>

300
00:13:04,180 --> 00:13:08,859
<font color="#CCCCCC">oftentimes slight changes to the build</font>

301
00:13:07,300 --> 00:13:10,000
<font color="#CCCCCC">system that their build mechanisms</font><font color="#E5E5E5"> that</font>

302
00:13:08,860 --> 00:13:12,160
you'll need<font color="#CCCCCC"> to make in order</font><font color="#E5E5E5"> to get it</font>

303
00:13:10,000 --> 00:13:14,230
compiled<font color="#E5E5E5"> but there are some handy guides</font>

304
00:13:12,160 --> 00:13:15,670
<font color="#CCCCCC">online you can</font><font color="#E5E5E5"> find</font><font color="#CCCCCC"> oftentimes you'll</font>

305
00:13:14,230 --> 00:13:18,070
have to make small<font color="#CCCCCC"> Corrections to the</font>

306
00:13:15,670 --> 00:13:21,910
source code such as<font color="#E5E5E5"> just commenting out</font>

307
00:13:18,070 --> 00:13:24,100
or casting a field that that<font color="#E5E5E5"> a compiler</font>

308
00:13:21,910 --> 00:13:27,219
<font color="#E5E5E5">option would cause a warning that will</font>

309
00:13:24,100 --> 00:13:28,240
make the build not work<font color="#E5E5E5"> so one of the</font>

310
00:13:27,220 --> 00:13:30,130
things you can<font color="#E5E5E5"> do while you're debugging</font>

311
00:13:28,240 --> 00:13:32,290
<font color="#CCCCCC">things is just add print statements and</font>

312
00:13:30,130 --> 00:13:33,970
look at D message<font color="#E5E5E5"> it can be a little bit</font>

313
00:13:32,290 --> 00:13:35,980
of a process<font color="#CCCCCC"> to recompile</font><font color="#E5E5E5"> it and</font>

314
00:13:33,970 --> 00:13:38,080
<font color="#E5E5E5">reinstall it every time but it is</font><font color="#CCCCCC"> a very</font>

315
00:13:35,980 --> 00:13:40,960
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> way to try and see what's going</font>

316
00:13:38,080 --> 00:13:43,090
on<font color="#E5E5E5"> in the kernel</font><font color="#CCCCCC"> the kernel also</font><font color="#E5E5E5"> does</font>

317
00:13:40,960 --> 00:13:44,920
have<font color="#E5E5E5"> some code to not print out pointers</font>

318
00:13:43,090 --> 00:13:46,420
so you'll have to get<font color="#E5E5E5"> rid of that as</font>

319
00:13:44,920 --> 00:13:48,520
<font color="#E5E5E5">well if you try and print out pointers</font>

320
00:13:46,420 --> 00:13:50,579
<font color="#CCCCCC">which bug things overall it's not the</font>

321
00:13:48,520 --> 00:13:53,949
most effective way<font color="#CCCCCC"> but it's</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> simple</font>

322
00:13:50,580 --> 00:13:56,560
the next one is if you<font color="#CCCCCC"> manage to crash</font>

323
00:13:53,950 --> 00:13:57,620
the kernel<font color="#CCCCCC"> you can see an</font><font color="#E5E5E5"> output of from</font>

324
00:13:56,560 --> 00:13:59,989
the panic log

325
00:13:57,620 --> 00:14:04,040
and so if you want to<font color="#E5E5E5"> know what happened</font>

326
00:13:59,990 --> 00:14:07,970
you can<font color="#CCCCCC"> look at that</font><font color="#E5E5E5"> example again which</font>

327
00:14:04,040 --> 00:14:09,800
will probably be<font color="#CCCCCC"> miss formatted</font><font color="#E5E5E5"> ah</font><font color="#CCCCCC"> so</font>

328
00:14:07,970 --> 00:14:11,570
it's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> that bad but</font><font color="#E5E5E5"> anyway</font><font color="#CCCCCC"> it looks a</font>

329
00:14:09,800 --> 00:14:13,069
little bit like this<font color="#E5E5E5"> if you crash the</font>

330
00:14:11,570 --> 00:14:15,140
<font color="#E5E5E5">kernel you can see it will dump all</font><font color="#CCCCCC"> of</font>

331
00:14:13,070 --> 00:14:17,570
the registers<font color="#E5E5E5"> and then give you a stack</font>

332
00:14:15,140 --> 00:14:19,040
trace as well and so if you're<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to</font>

333
00:14:17,570 --> 00:14:21,590
<font color="#E5E5E5">figure out what exactly</font><font color="#CCCCCC"> happened you can</font>

334
00:14:19,040 --> 00:14:23,180
come see and think oh this values in<font color="#E5E5E5"> are</font>

335
00:14:21,590 --> 00:14:25,610
the<font color="#E5E5E5"> RX register I thought it would be</font>

336
00:14:23,180 --> 00:14:27,560
<font color="#E5E5E5">this value so it's again</font><font color="#CCCCCC"> not the</font><font color="#E5E5E5"> most</font>

337
00:14:25,610 --> 00:14:28,850
helpful but<font color="#E5E5E5"> it is somewhat useful after</font>

338
00:14:27,560 --> 00:14:30,589
that you've crashed it and<font color="#E5E5E5"> you're trying</font>

339
00:14:28,850 --> 00:14:32,840
to<font color="#E5E5E5"> figure out what happened what went</font>

340
00:14:30,590 --> 00:14:33,710
<font color="#E5E5E5">wrong with my exploit in the stack trace</font>

341
00:14:32,840 --> 00:14:36,050
you<font color="#E5E5E5"> can see in this one</font>

342
00:14:33,710 --> 00:14:38,570
I was<font color="#E5E5E5"> overriding the stack with this</font>

343
00:14:36,050 --> 00:14:40,400
nonsense value so it failed to walk<font color="#CCCCCC"> its</font>

344
00:14:38,570 --> 00:14:42,200
full way back up<font color="#E5E5E5"> the stack so you can</font>

345
00:14:40,400 --> 00:14:46,689
see the frame pointer is just three

346
00:14:42,200 --> 00:14:49,040
three three<font color="#E5E5E5"> so again another useful</font>

347
00:14:46,690 --> 00:14:56,330
useful thing<font color="#E5E5E5"> you can do while debugging</font>

348
00:14:49,040 --> 00:14:59,930
<font color="#E5E5E5">but not the most useful z print z print</font>

349
00:14:56,330 --> 00:15:02,900
<font color="#E5E5E5">is a heap specific tool it prints out</font>

350
00:14:59,930 --> 00:15:05,120
the<font color="#E5E5E5"> heap allocations from the zone</font>

351
00:15:02,900 --> 00:15:08,480
<font color="#CCCCCC">allocator</font><font color="#E5E5E5"> it will tell you how many of</font>

352
00:15:05,120 --> 00:15:10,490
<font color="#CCCCCC">each zone is allocated</font><font color="#E5E5E5"> and you can use</font>

353
00:15:08,480 --> 00:15:12,830
that while<font color="#E5E5E5"> heaps praying or trying to</font>

354
00:15:10,490 --> 00:15:15,740
<font color="#E5E5E5">look at when memory allocations are made</font>

355
00:15:12,830 --> 00:15:20,060
<font color="#CCCCCC">it's very useful if you're trying to</font>

356
00:15:15,740 --> 00:15:24,910
<font color="#E5E5E5">exploit a heap based vulnerability so</font>

357
00:15:20,060 --> 00:15:24,910
this right sorry

358
00:15:34,800 --> 00:15:43,920
<font color="#E5E5E5">such a small to see yes</font><font color="#CCCCCC"> alright in</font><font color="#E5E5E5"> this</font>

359
00:15:42,269 --> 00:15:45,300
it's<font color="#E5E5E5"> just</font><font color="#CCCCCC"> Z print printing out the</font>

360
00:15:43,920 --> 00:15:47,370
<font color="#CCCCCC">kalloch which is one</font><font color="#E5E5E5"> of the main</font>

361
00:15:45,300 --> 00:15:48,959
<font color="#CCCCCC">allocators in the kernel</font><font color="#E5E5E5"> it's printing</font>

362
00:15:47,370 --> 00:15:50,880
<font color="#E5E5E5">out the number of elements in each zone</font>

363
00:15:48,959 --> 00:15:52,890
<font color="#CCCCCC">so for instance if we have a</font>

364
00:15:50,880 --> 00:15:55,740
vulnerability<font color="#E5E5E5"> that</font><font color="#CCCCCC"> affects a specific</font>

365
00:15:52,890 --> 00:15:57,779
<font color="#CCCCCC">zone such as the 256</font><font color="#E5E5E5"> one we can take</font><font color="#CCCCCC"> a</font>

366
00:15:55,740 --> 00:15:59,670
look at the number<font color="#CCCCCC"> of allocations</font><font color="#E5E5E5"> in</font>

367
00:15:57,779 --> 00:16:01,529
that and we can<font color="#E5E5E5"> whenever we're trying to</font>

368
00:15:59,670 --> 00:16:03,810
do<font color="#E5E5E5"> something like heap flood this will</font>

369
00:16:01,529 --> 00:16:05,040
tell<font color="#E5E5E5"> us when new ones are being made or</font>

370
00:16:03,810 --> 00:16:07,050
when they're being<font color="#CCCCCC"> released and</font><font color="#E5E5E5"> we kind</font>

371
00:16:05,040 --> 00:16:09,779
of contract the progress<font color="#E5E5E5"> of what's going</font>

372
00:16:07,050 --> 00:16:12,510
<font color="#E5E5E5">on with the Cal yeah in the calc 256</font>

373
00:16:09,779 --> 00:16:13,980
zone this<font color="#E5E5E5"> is kind of a specific</font><font color="#CCCCCC"> tool</font>

374
00:16:12,510 --> 00:16:15,779
<font color="#E5E5E5">that's really only useful if you're</font>

375
00:16:13,980 --> 00:16:24,630
trying<font color="#CCCCCC"> to exploit</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> heap based</font>

376
00:16:15,779 --> 00:16:26,399
vulnerability the next tool which is

377
00:16:24,630 --> 00:16:29,939
very<font color="#CCCCCC"> useful for a lot of</font><font color="#E5E5E5"> different</font>

378
00:16:26,399 --> 00:16:32,730
<font color="#CCCCCC">situations is 1 by Sigma it's called iOS</font>

379
00:16:29,940 --> 00:16:35,430
<font color="#CCCCCC">carney tools it's also available for mac</font>

380
00:16:32,730 --> 00:16:36,839
OS<font color="#E5E5E5"> so it's useful</font><font color="#CCCCCC"> for this as well and</font>

381
00:16:35,430 --> 00:16:38,250
<font color="#E5E5E5">what that does is it shows you the</font>

382
00:16:36,839 --> 00:16:39,750
kernel memory<font color="#E5E5E5"> map and then it also</font>

383
00:16:38,250 --> 00:16:43,440
allows you<font color="#CCCCCC"> to read and</font><font color="#E5E5E5"> write kernel</font>

384
00:16:39,750 --> 00:16:45,360
memory<font color="#E5E5E5"> and so if you're trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> figure</font>

385
00:16:43,440 --> 00:16:46,589
<font color="#CCCCCC">out what happened or</font><font color="#E5E5E5"> what's at a</font>

386
00:16:45,360 --> 00:16:49,260
<font color="#E5E5E5">specific address and the kernel memory</font>

387
00:16:46,589 --> 00:16:51,630
<font color="#E5E5E5">you can use these tools one downside is</font>

388
00:16:49,260 --> 00:16:54,600
it does require you to already<font color="#E5E5E5"> have</font>

389
00:16:51,630 --> 00:16:55,920
<font color="#E5E5E5">roots so obviously you can't use</font><font color="#CCCCCC"> it in</font>

390
00:16:54,600 --> 00:16:58,440
an exploit it also requires you to have

391
00:16:55,920 --> 00:16:59,939
<font color="#E5E5E5">already exported a kernel</font><font color="#CCCCCC"> task</font><font color="#E5E5E5"> port to</font>

392
00:16:58,440 --> 00:17:01,980
<font color="#CCCCCC">userland</font><font color="#E5E5E5"> and I'll get into what that</font>

393
00:16:59,940 --> 00:17:04,559
<font color="#E5E5E5">means</font><font color="#CCCCCC"> and in a</font><font color="#E5E5E5"> little bit when we look</font>

394
00:17:01,980 --> 00:17:06,209
at<font color="#E5E5E5"> our exploit the other thing that you</font>

395
00:17:04,559 --> 00:17:08,639
can<font color="#E5E5E5"> do instead</font><font color="#CCCCCC"> of already having it a</font>

396
00:17:06,209 --> 00:17:10,770
<font color="#E5E5E5">curl test board is you can recompile</font>

397
00:17:08,640 --> 00:17:13,350
your<font color="#E5E5E5"> kernel and patch it to allow for</font>

398
00:17:10,770 --> 00:17:15,359
this<font color="#E5E5E5"> I haven't in the repository</font><font color="#CCCCCC"> then</font>

399
00:17:13,349 --> 00:17:21,119
I'm going to push with<font color="#CCCCCC"> this talk I have</font>

400
00:17:15,359 --> 00:17:28,590
<font color="#E5E5E5">instructions on how to do that now</font><font color="#CCCCCC"> just</font>

401
00:17:21,119 --> 00:17:29,459
let's<font color="#CCCCCC"> take a quick</font><font color="#E5E5E5"> look at it all</font><font color="#CCCCCC"> right</font>

402
00:17:28,590 --> 00:17:36,780
good

403
00:17:29,460 --> 00:17:40,050
so in this kernel I have already like I

404
00:17:36,780 --> 00:17:41,370
said it requires<font color="#E5E5E5"> root and so as you</font><font color="#CCCCCC"> can</font>

405
00:17:40,050 --> 00:17:42,990
<font color="#CCCCCC">probably would have</font><font color="#E5E5E5"> been able to see</font>

406
00:17:41,370 --> 00:17:44,699
with<font color="#E5E5E5"> better formatting this is the</font>

407
00:17:42,990 --> 00:17:46,980
kernel<font color="#CCCCCC"> memory map it shows you what is</font>

408
00:17:44,700 --> 00:17:47,720
<font color="#CCCCCC">that each dress and so for instance on</font>

409
00:17:46,980 --> 00:17:50,190
<font color="#E5E5E5">this one</font>

410
00:17:47,720 --> 00:17:53,010
it shows you<font color="#E5E5E5"> that there</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> kernel</font>

411
00:17:50,190 --> 00:17:55,260
extension with<font color="#E5E5E5"> 16 K of memory read/write</font>

412
00:17:53,010 --> 00:17:57,210
permissions and so you can<font color="#E5E5E5"> just</font>

413
00:17:55,260 --> 00:17:58,950
basically see where everything is in<font color="#E5E5E5"> the</font>

414
00:17:57,210 --> 00:18:01,550
<font color="#E5E5E5">kernels memory</font><font color="#CCCCCC"> and so if you're trying</font>

415
00:17:58,950 --> 00:18:05,130
<font color="#CCCCCC">to figure out what is</font><font color="#E5E5E5"> that a specific</font>

416
00:18:01,550 --> 00:18:07,230
<font color="#E5E5E5">location or where it is in memory</font><font color="#CCCCCC"> you</font>

417
00:18:05,130 --> 00:18:10,650
can use these tools<font color="#CCCCCC"> one of the other</font>

418
00:18:07,230 --> 00:18:12,630
<font color="#E5E5E5">ones it's also useful it's called</font><font color="#CCCCCC"> kmm</font>

419
00:18:10,650 --> 00:18:13,860
that stands for kernel memory<font color="#E5E5E5"> and as you</font>

420
00:18:12,630 --> 00:18:15,300
can<font color="#E5E5E5"> probably guess from the name it</font>

421
00:18:13,860 --> 00:18:18,270
allows you to<font color="#E5E5E5"> read and write memory</font><font color="#CCCCCC"> and</font>

422
00:18:15,300 --> 00:18:23,700
so what<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> asking it there is to</font><font color="#E5E5E5"> print</font>

423
00:18:18,270 --> 00:18:25,680
out 40 bytes<font color="#E5E5E5"> at that address and so</font>

424
00:18:23,700 --> 00:18:27,540
that'll<font color="#E5E5E5"> just show us that that string is</font>

425
00:18:25,680 --> 00:18:29,100
at that address<font color="#E5E5E5"> in the kernel memory we</font>

426
00:18:27,540 --> 00:18:31,350
<font color="#E5E5E5">can also use this tool to write</font><font color="#CCCCCC"> to</font>

427
00:18:29,100 --> 00:18:34,980
kernel memory<font color="#CCCCCC"> if we want to</font><font color="#E5E5E5"> try out a</font>

428
00:18:31,350 --> 00:18:36,990
payload or<font color="#E5E5E5"> a post exploitation mechanism</font>

429
00:18:34,980 --> 00:18:40,860
<font color="#E5E5E5">without actually having to re exploit it</font>

430
00:18:36,990 --> 00:18:42,240
<font color="#E5E5E5">the kernel each time so you can use</font>

431
00:18:40,860 --> 00:18:44,189
these tools<font color="#E5E5E5"> for that purpose as well</font>

432
00:18:42,240 --> 00:18:53,430
<font color="#E5E5E5">they're very useful and I highly</font>

433
00:18:44,190 --> 00:18:54,990
<font color="#CCCCCC">recommend them and</font><font color="#E5E5E5"> then the last tool</font>

434
00:18:53,430 --> 00:18:58,230
which is probably<font color="#E5E5E5"> the most useful but</font>

435
00:18:54,990 --> 00:19:00,720
also<font color="#E5E5E5"> the most the most work to set up</font>

436
00:18:58,230 --> 00:19:02,970
and is also<font color="#E5E5E5"> a little buggy is just</font><font color="#CCCCCC"> the</font>

437
00:19:00,720 --> 00:19:05,550
kernel debugging<font color="#E5E5E5"> you can set</font><font color="#CCCCCC"> up the</font>

438
00:19:02,970 --> 00:19:07,740
debugger<font color="#E5E5E5"> for the kernel and then step</font>

439
00:19:05,550 --> 00:19:09,780
through it<font color="#E5E5E5"> or set breakpoints and read</font>

440
00:19:07,740 --> 00:19:12,810
memory<font color="#E5E5E5"> or if it crashes it'll come back</font>

441
00:19:09,780 --> 00:19:14,250
<font color="#CCCCCC">to</font><font color="#E5E5E5"> you and you can see what happened one</font>

442
00:19:12,810 --> 00:19:16,220
thing you do have<font color="#CCCCCC"> to do is run</font><font color="#E5E5E5"> that and</font>

443
00:19:14,250 --> 00:19:18,840
if you<font color="#E5E5E5"> change the env Rams to include</font>

444
00:19:16,220 --> 00:19:21,030
that command<font color="#E5E5E5"> however you can't do that</font>

445
00:19:18,840 --> 00:19:22,970
<font color="#CCCCCC">while</font><font color="#E5E5E5"> sip is on so it requires you to</font>

446
00:19:21,030 --> 00:19:27,050
<font color="#E5E5E5">reboot</font><font color="#CCCCCC"> into system recovery or</font><font color="#E5E5E5"> turn off</font>

447
00:19:22,970 --> 00:19:30,600
<font color="#E5E5E5">system integrity protection yourself</font><font color="#CCCCCC"> so</font>

448
00:19:27,050 --> 00:19:32,010
one thing that<font color="#E5E5E5"> to note is that Apple all</font>

449
00:19:30,600 --> 00:19:34,050
is in addition<font color="#CCCCCC"> to making</font><font color="#E5E5E5"> the source they</font>

450
00:19:32,010 --> 00:19:38,910
make the kernel debug symbols available

451
00:19:34,050 --> 00:19:40,800
<font color="#E5E5E5">for the official Apple</font><font color="#CCCCCC"> o kernels so if</font>

452
00:19:38,910 --> 00:19:43,020
you want<font color="#E5E5E5"> to debug an official kernel you</font>

453
00:19:40,800 --> 00:19:45,180
can just go download the symbols with an

454
00:19:43,020 --> 00:19:46,850
<font color="#E5E5E5">Apple Developer</font><font color="#CCCCCC"> account</font><font color="#E5E5E5"> and install them</font>

455
00:19:45,180 --> 00:19:50,870
<font color="#CCCCCC">and then use that</font><font color="#E5E5E5"> in the debunker so</font>

456
00:19:46,850 --> 00:19:50,870
just to show<font color="#CCCCCC"> that off a little bit</font>

457
00:19:54,160 --> 00:20:00,850
simply start<font color="#CCCCCC"> the debugger</font><font color="#E5E5E5"> then you just</font>

458
00:19:58,870 --> 00:20:02,679
tell<font color="#CCCCCC"> it to load the kernel debugger</font>

459
00:20:00,850 --> 00:20:05,620
symbols<font color="#E5E5E5"> yeah I compiled the kernel that</font>

460
00:20:02,680 --> 00:20:10,420
that<font color="#E5E5E5"> VM is running and so I have the</font>

461
00:20:05,620 --> 00:20:12,790
symbols there then you<font color="#E5E5E5"> can load</font><font color="#CCCCCC"> up that</font>

462
00:20:10,420 --> 00:20:14,950
command the KDP<font color="#E5E5E5"> remote command with the</font>

463
00:20:12,790 --> 00:20:16,540
IP address of the<font color="#E5E5E5"> VM or the other</font>

464
00:20:14,950 --> 00:20:18,730
computer that you're debugging<font color="#CCCCCC"> this</font><font color="#E5E5E5"> does</font>

465
00:20:16,540 --> 00:20:21,820
<font color="#E5E5E5">work over the network and then you hit</font>

466
00:20:18,730 --> 00:20:24,520
<font color="#E5E5E5">the magic key combination to tell the</font>

467
00:20:21,820 --> 00:20:29,110
debugger to start up in the kernel<font color="#CCCCCC"> this</font>

468
00:20:24,520 --> 00:20:34,150
for Apple is control option command

469
00:20:29,110 --> 00:20:36,010
shift escape<font color="#E5E5E5"> so right now</font><font color="#CCCCCC"> that VM is</font>

470
00:20:34,150 --> 00:20:39,100
frozen<font color="#CCCCCC"> and</font><font color="#E5E5E5"> if we go</font><font color="#CCCCCC"> back to the debugger</font>

471
00:20:36,010 --> 00:20:40,930
<font color="#E5E5E5">and try and connect to it</font><font color="#CCCCCC"> you'll see</font>

472
00:20:39,100 --> 00:20:42,699
that it loads it<font color="#E5E5E5"> up and we've now</font>

473
00:20:40,930 --> 00:20:44,650
stopped at that<font color="#E5E5E5"> address inside of the</font>

474
00:20:42,700 --> 00:20:46,120
debugger<font color="#CCCCCC"> and so what you</font><font color="#E5E5E5"> can do is you</font>

475
00:20:44,650 --> 00:20:48,250
can set breakpoints or read<font color="#E5E5E5"> and write</font>

476
00:20:46,120 --> 00:20:52,209
memory<font color="#CCCCCC"> or registers and then continue</font>

477
00:20:48,250 --> 00:20:53,950
the<font color="#E5E5E5"> I just hit enter hit can type</font>

478
00:20:52,210 --> 00:20:55,840
continue and hit enter and the the OS

479
00:20:53,950 --> 00:20:58,120
<font color="#E5E5E5">will start up and until it hits a break</font>

480
00:20:55,840 --> 00:21:01,409
point where you crash the kernel<font color="#E5E5E5"> you</font>

481
00:20:58,120 --> 00:21:03,580
won't be given<font color="#E5E5E5"> context back to it</font><font color="#CCCCCC"> so</font>

482
00:21:01,410 --> 00:21:05,230
this<font color="#E5E5E5"> is useful</font><font color="#CCCCCC"> that you could set</font>

483
00:21:03,580 --> 00:21:06,879
breakpoints on your op gadgets or at the

484
00:21:05,230 --> 00:21:09,160
vulnerability<font color="#E5E5E5"> and read the registers and</font>

485
00:21:06,880 --> 00:21:11,320
<font color="#CCCCCC">memory and see what all is happening</font><font color="#E5E5E5"> and</font>

486
00:21:09,160 --> 00:21:14,590
where<font color="#CCCCCC"> things are</font><font color="#E5E5E5"> going wrong or how you</font>

487
00:21:11,320 --> 00:21:16,990
can adjust<font color="#CCCCCC"> things accordingly</font><font color="#E5E5E5"> this is um</font>

488
00:21:14,590 --> 00:21:19,209
<font color="#CCCCCC">just a</font><font color="#E5E5E5"> super useful but it it also is a</font>

489
00:21:16,990 --> 00:21:21,880
little<font color="#CCCCCC"> buggy often</font><font color="#E5E5E5"> times it just</font><font color="#CCCCCC"> crashes</font>

490
00:21:19,210 --> 00:21:24,280
or you don't<font color="#E5E5E5"> your breakpoints might not</font>

491
00:21:21,880 --> 00:21:27,030
be hit so<font color="#CCCCCC"> it's does have its faults but</font>

492
00:21:24,280 --> 00:21:27,030
<font color="#E5E5E5">it's very useful</font>

493
00:21:33,590 --> 00:21:36,470
next I'm going to<font color="#E5E5E5"> talk a little bit</font>

494
00:21:34,880 --> 00:21:38,870
<font color="#CCCCCC">about some of the mitigations</font><font color="#E5E5E5"> for</font>

495
00:21:36,470 --> 00:21:41,890
criminal exploits that<font color="#E5E5E5"> are present in</font>

496
00:21:38,870 --> 00:21:43,489
the<font color="#CCCCCC"> xnu kernel so the first one is</font>

497
00:21:41,890 --> 00:21:46,820
kernel address space layout

498
00:21:43,490 --> 00:21:49,850
randomization<font color="#CCCCCC"> the Mac OS</font><font color="#E5E5E5"> kernel is</font>

499
00:21:46,820 --> 00:21:53,090
actually loaded at any one of<font color="#E5E5E5"> 256</font>

500
00:21:49,850 --> 00:21:55,699
different spots in memory<font color="#CCCCCC"> they randomly</font>

501
00:21:53,090 --> 00:21:58,100
<font color="#E5E5E5">pick a slide value and then that gets</font>

502
00:21:55,700 --> 00:22:02,150
added to the load address<font color="#E5E5E5"> of the kernel</font>

503
00:21:58,100 --> 00:22:04,429
<font color="#E5E5E5">and</font><font color="#CCCCCC"> so each each load address is two</font>

504
00:22:02,150 --> 00:22:08,620
mega bar<font color="#E5E5E5"> and two megabytes apart and so</font>

505
00:22:04,430 --> 00:22:12,460
there's 512<font color="#E5E5E5"> there</font><font color="#CCCCCC"> 510 different</font>

506
00:22:08,620 --> 00:22:14,689
megabytes that it could be changed so

507
00:22:12,460 --> 00:22:16,760
essentially if you're trying to<font color="#E5E5E5"> exploit</font>

508
00:22:14,690 --> 00:22:19,370
and you try to hard code in<font color="#CCCCCC"> address</font><font color="#E5E5E5"> that</font>

509
00:22:16,760 --> 00:22:21,260
will only work one out of 256<font color="#E5E5E5"> times and</font>

510
00:22:19,370 --> 00:22:23,600
so it's not<font color="#E5E5E5"> a very useful</font><font color="#CCCCCC"> thing you need</font>

511
00:22:21,260 --> 00:22:27,650
<font color="#E5E5E5">to find a way to leak that address and</font>

512
00:22:23,600 --> 00:22:29,750
calculate it<font color="#E5E5E5"> for development purposes</font>

513
00:22:27,650 --> 00:22:32,420
there's the<font color="#E5E5E5"> caste info which stands for</font>

514
00:22:29,750 --> 00:22:34,040
kernel address space info<font color="#CCCCCC"> assist call</font>

515
00:22:32,420 --> 00:22:36,560
that you can call<font color="#E5E5E5"> and that will</font><font color="#CCCCCC"> actually</font>

516
00:22:34,040 --> 00:22:38,740
just give you back the kernel slide and

517
00:22:36,560 --> 00:22:41,330
so it's<font color="#CCCCCC"> very useful to</font><font color="#E5E5E5"> start out with</font>

518
00:22:38,740 --> 00:22:42,920
using the<font color="#CCCCCC"> caste info syscall until</font>

519
00:22:41,330 --> 00:22:49,669
you've<font color="#E5E5E5"> worked up your exploit to be able</font>

520
00:22:42,920 --> 00:22:51,770
<font color="#CCCCCC">to leak</font><font color="#E5E5E5"> that address</font><font color="#CCCCCC"> one thing to notice</font>

521
00:22:49,670 --> 00:22:54,140
<font color="#E5E5E5">that does of course require</font><font color="#CCCCCC"> root because</font>

522
00:22:51,770 --> 00:22:57,110
they don't want to just<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a Kor</font>

523
00:22:54,140 --> 00:22:58,640
bypass<font color="#E5E5E5"> and it only works with system</font>

524
00:22:57,110 --> 00:23:02,389
<font color="#E5E5E5">integrity protection disabled or a</font>

525
00:22:58,640 --> 00:23:04,670
compiled kernel to remove that<font color="#CCCCCC"> and on</font>

526
00:23:02,390 --> 00:23:06,590
<font color="#E5E5E5">the left you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> just see we can see</font>

527
00:23:04,670 --> 00:23:08,750
that the kernel on the first with a slot

528
00:23:06,590 --> 00:23:11,300
of<font color="#CCCCCC"> 0 is loaded at that base address</font>

529
00:23:08,750 --> 00:23:13,460
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the default one and then with a</font>

530
00:23:11,300 --> 00:23:15,500
slide of<font color="#CCCCCC"> dthe with six zeros it gets</font>

531
00:23:13,460 --> 00:23:18,110
loaded<font color="#CCCCCC"> at</font><font color="#E5E5E5"> D with six</font><font color="#CCCCCC"> zeros higher than</font>

532
00:23:15,500 --> 00:23:20,510
the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> zero slide</font><font color="#E5E5E5"> it's not a very</font>

533
00:23:18,110 --> 00:23:23,600
<font color="#E5E5E5">complicated</font><font color="#CCCCCC"> randomization and</font><font color="#E5E5E5"> it's also</font>

534
00:23:20,510 --> 00:23:26,900
rather weak as we'll see the next

535
00:23:23,600 --> 00:23:29,870
<font color="#E5E5E5">mitigation that Mac OS has is supervisor</font>

536
00:23:26,900 --> 00:23:33,230
mode execution<font color="#E5E5E5"> protection so what that</font>

537
00:23:29,870 --> 00:23:36,350
<font color="#E5E5E5">does is</font><font color="#CCCCCC"> the kernel will refuse to run in</font>

538
00:23:33,230 --> 00:23:39,260
run in<font color="#CCCCCC"> user land memory and so if you</font>

539
00:23:36,350 --> 00:23:41,149
try to<font color="#E5E5E5"> tell it</font><font color="#CCCCCC"> to jump to a</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> to code</font>

540
00:23:39,260 --> 00:23:43,520
inside<font color="#CCCCCC"> the user land the processor will</font>

541
00:23:41,150 --> 00:23:44,610
actually throw<font color="#E5E5E5"> an exception and when</font>

542
00:23:43,520 --> 00:23:47,970
<font color="#E5E5E5">that happens the kernel</font>

543
00:23:44,610 --> 00:23:49,320
and your<font color="#E5E5E5"> ex point won't work</font><font color="#CCCCCC"> prior to</font>

544
00:23:47,970 --> 00:23:50,700
this you<font color="#E5E5E5"> could just</font><font color="#CCCCCC"> if you were</font>

545
00:23:49,320 --> 00:23:52,350
<font color="#E5E5E5">overriding a function pointer you could</font>

546
00:23:50,700 --> 00:23:54,450
just<font color="#E5E5E5"> override the</font><font color="#CCCCCC"> function pointer</font><font color="#E5E5E5"> with</font>

547
00:23:52,350 --> 00:23:55,918
<font color="#CCCCCC">the</font><font color="#E5E5E5"> hard-coded address that you put code</font>

548
00:23:54,450 --> 00:23:56,610
at<font color="#E5E5E5"> a New</font><font color="#CCCCCC"> Zealand and the</font><font color="#E5E5E5"> kernel would</font>

549
00:23:55,919 --> 00:23:57,960
<font color="#E5E5E5">jump to it</font>

550
00:23:56,610 --> 00:23:59,699
you could run a little<font color="#CCCCCC"> snippet of</font><font color="#E5E5E5"> code</font>

551
00:23:57,960 --> 00:24:03,330
<font color="#CCCCCC">that would do</font><font color="#E5E5E5"> whatever your desired</font>

552
00:23:59,700 --> 00:24:05,429
effect was and then you could just clean

553
00:24:03,330 --> 00:24:08,158
up<font color="#E5E5E5"> and it would that would be as</font>

554
00:24:05,429 --> 00:24:09,630
complicated as it<font color="#CCCCCC"> got</font><font color="#E5E5E5"> now now we can't</font>

555
00:24:08,159 --> 00:24:12,419
do<font color="#E5E5E5"> that anymore and we have to find some</font>

556
00:24:09,630 --> 00:24:17,880
<font color="#E5E5E5">other way to run code that's not from</font>

557
00:24:12,419 --> 00:24:20,309
user land pages<font color="#CCCCCC"> the next mitigation is</font>

558
00:24:17,880 --> 00:24:22,889
supervisor mode<font color="#CCCCCC"> access protection</font><font color="#E5E5E5"> or</font>

559
00:24:20,309 --> 00:24:25,168
<font color="#E5E5E5">SMAP it's another Intel processor</font>

560
00:24:22,889 --> 00:24:28,949
feature that is<font color="#E5E5E5"> only recent so only the</font>

561
00:24:25,169 --> 00:24:32,039
late later 2016 and<font color="#E5E5E5"> anon models of</font>

562
00:24:28,950 --> 00:24:33,809
<font color="#E5E5E5">MacBooks have them essentially it's very</font>

563
00:24:32,039 --> 00:24:37,110
<font color="#E5E5E5">similar to the exploit protection except</font>

564
00:24:33,809 --> 00:24:40,019
it is for<font color="#E5E5E5"> reading and writing memory</font>

565
00:24:37,110 --> 00:24:41,939
from<font color="#E5E5E5"> user land so the kernel will refuse</font>

566
00:24:40,019 --> 00:24:44,549
<font color="#CCCCCC">to read or write memory directly from</font>

567
00:24:41,940 --> 00:24:46,409
<font color="#E5E5E5">user</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> this can't be on all</font>

568
00:24:44,549 --> 00:24:48,870
the time<font color="#CCCCCC"> so the Mac OS</font><font color="#E5E5E5"> kernel just</font>

569
00:24:46,409 --> 00:24:51,360
selectively turns it on<font color="#CCCCCC"> and off when it</font>

570
00:24:48,870 --> 00:24:53,760
it's meant to<font color="#E5E5E5"> and so if you're not in</font>

571
00:24:51,360 --> 00:24:56,158
using one of<font color="#E5E5E5"> the specific functions to</font>

572
00:24:53,760 --> 00:24:58,049
copy data from<font color="#CCCCCC"> you use your land</font><font color="#E5E5E5"> the</font>

573
00:24:56,159 --> 00:24:59,760
snap will<font color="#E5E5E5"> be the snap protection will be</font>

574
00:24:58,049 --> 00:25:01,470
<font color="#E5E5E5">on if you</font><font color="#CCCCCC"> are inside one of those</font>

575
00:24:59,760 --> 00:25:03,779
<font color="#CCCCCC">specific functions that will</font><font color="#E5E5E5"> be off and</font>

576
00:25:01,470 --> 00:25:05,610
so what this does<font color="#CCCCCC"> is if the</font>

577
00:25:03,779 --> 00:25:08,250
vulnerability allows us to dereference

578
00:25:05,610 --> 00:25:10,110
an arbiter arbitrary address or read

579
00:25:08,250 --> 00:25:13,169
something<font color="#CCCCCC"> from an arbitrary</font><font color="#E5E5E5"> address</font><font color="#CCCCCC"> we</font>

580
00:25:10,110 --> 00:25:15,029
can't host our<font color="#E5E5E5"> that data inside</font><font color="#CCCCCC"> of a</font>

581
00:25:13,169 --> 00:25:18,510
<font color="#E5E5E5">user</font><font color="#CCCCCC"> Lane process</font><font color="#E5E5E5"> we need to get it into</font>

582
00:25:15,029 --> 00:25:19,679
the kernel<font color="#E5E5E5"> and memory somehow and so</font>

583
00:25:18,510 --> 00:25:22,019
this is just another<font color="#CCCCCC"> one</font><font color="#E5E5E5"> of those</font>

584
00:25:19,679 --> 00:25:24,019
protections<font color="#CCCCCC"> that makes our job as an</font>

585
00:25:22,019 --> 00:25:26,429
exploit writer<font color="#E5E5E5"> harder</font>

586
00:25:24,019 --> 00:25:27,480
and then the final mitigation<font color="#E5E5E5"> we'll talk</font>

587
00:25:26,429 --> 00:25:29,399
<font color="#CCCCCC">about is</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> really an exploit</font>

588
00:25:27,480 --> 00:25:33,450
mitigation more of just a defense

589
00:25:29,399 --> 00:25:35,820
against a successful exploit<font color="#CCCCCC"> well some</font>

590
00:25:33,450 --> 00:25:37,889
other<font color="#E5E5E5"> non kernel means and so it's</font>

591
00:25:35,820 --> 00:25:39,740
<font color="#E5E5E5">system</font><font color="#CCCCCC"> integrity protection</font><font color="#E5E5E5"> also known</font>

592
00:25:37,889 --> 00:25:41,879
as rootless<font color="#E5E5E5"> when it was first introduced</font>

593
00:25:39,740 --> 00:25:43,710
the name is actually<font color="#CCCCCC"> kind of a misnomer</font>

594
00:25:41,880 --> 00:25:45,510
which is why they changed it there's

595
00:25:43,710 --> 00:25:48,200
still a<font color="#E5E5E5"> root</font><font color="#CCCCCC"> account</font><font color="#E5E5E5"> it's just less</font>

596
00:25:45,510 --> 00:25:51,389
powerful system integrity protection

597
00:25:48,200 --> 00:25:55,440
<font color="#E5E5E5">prevents you from as the root</font><font color="#CCCCCC"> user doing</font>

598
00:25:51,389 --> 00:25:58,269
<font color="#CCCCCC">certain actions so if I want to</font><font color="#E5E5E5"> write to</font>

599
00:25:55,440 --> 00:26:00,999
the bin directory<font color="#E5E5E5"> to change some process</font>

600
00:25:58,269 --> 00:26:03,429
or debug<font color="#CCCCCC"> some one of Apple's processes</font>

601
00:26:00,999 --> 00:26:05,919
<font color="#E5E5E5">system</font><font color="#CCCCCC"> integrity protection won't let me</font>

602
00:26:03,429 --> 00:26:08,139
and so even<font color="#CCCCCC"> as the</font><font color="#E5E5E5"> root user</font><font color="#CCCCCC"> would where</font>

603
00:26:05,919 --> 00:26:10,389
I was<font color="#E5E5E5"> I'm supposed to have</font><font color="#CCCCCC"> ultimate</font>

604
00:26:08,139 --> 00:26:11,228
<font color="#CCCCCC">authority to do whatever I want on</font><font color="#E5E5E5"> Mac</font>

605
00:26:10,389 --> 00:26:13,238
<font color="#E5E5E5">OS I can't</font>

606
00:26:11,229 --> 00:26:17,159
<font color="#CCCCCC">whereas on something</font><font color="#E5E5E5"> like Linux the root</font>

607
00:26:13,239 --> 00:26:17,159
<font color="#CCCCCC">user is all-powerful</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> can do that</font>

608
00:26:18,450 --> 00:26:24,820
this is implemented<font color="#CCCCCC"> through</font><font color="#E5E5E5"> Mac OS is</font>

609
00:26:22,259 --> 00:26:27,249
mandatory<font color="#E5E5E5"> access control framework which</font>

610
00:26:24,820 --> 00:26:29,109
<font color="#CCCCCC">is based off of trusted BSD which is</font>

611
00:26:27,249 --> 00:26:30,849
essentially<font color="#CCCCCC"> just a large number of</font>

612
00:26:29,109 --> 00:26:33,849
kernel hooks<font color="#E5E5E5"> scattered throughout</font><font color="#CCCCCC"> the</font>

613
00:26:30,849 --> 00:26:36,718
kernel<font color="#E5E5E5"> that whenever</font><font color="#CCCCCC"> an actions such as</font>

614
00:26:33,849 --> 00:26:39,158
creating<font color="#E5E5E5"> a file or opening a socket are</font>

615
00:26:36,719 --> 00:26:40,959
happens<font color="#E5E5E5"> the kernel will call one</font><font color="#CCCCCC"> of</font>

616
00:26:39,159 --> 00:26:43,929
<font color="#E5E5E5">those hooks for the installed policies</font>

617
00:26:40,959 --> 00:26:46,959
and that function hook will decide is

618
00:26:43,929 --> 00:26:50,019
this user allowed to write to this file

619
00:26:46,959 --> 00:26:56,159
or open the<font color="#E5E5E5"> socket and so on we can</font><font color="#CCCCCC"> just</font>

620
00:26:50,019 --> 00:27:01,089
<font color="#E5E5E5">take a quick look at that</font><font color="#CCCCCC"> and so this is</font>

621
00:26:56,159 --> 00:27:03,729
sorry<font color="#E5E5E5"> it's gonna keep getting me</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> so</font>

622
00:27:01,089 --> 00:27:05,559
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the struct inside</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> kernel</font>

623
00:27:03,729 --> 00:27:09,399
that<font color="#E5E5E5"> has all of the function pointers</font>

624
00:27:05,559 --> 00:27:13,089
and so for<font color="#CCCCCC"> instance we</font><font color="#E5E5E5"> have the check</font>

625
00:27:09,399 --> 00:27:16,359
file<font color="#CCCCCC"> oh it's down</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> the file check</font>

626
00:27:13,089 --> 00:27:18,369
function<font color="#E5E5E5"> pointer when I go to create</font><font color="#CCCCCC"> a</font>

627
00:27:16,359 --> 00:27:19,899
file the kernel will iterate over each

628
00:27:18,369 --> 00:27:21,549
<font color="#E5E5E5">of the policies and</font><font color="#CCCCCC"> check if that</font>

629
00:27:19,899 --> 00:27:24,609
function<font color="#E5E5E5"> pointers define and it</font><font color="#CCCCCC"> will</font>

630
00:27:21,549 --> 00:27:26,739
call<font color="#E5E5E5"> that function if for each</font><font color="#CCCCCC"> policy</font>

631
00:27:24,609 --> 00:27:28,119
<font color="#E5E5E5">and the system integrity protection is</font>

632
00:27:26,739 --> 00:27:29,859
<font color="#CCCCCC">just one of the policies that are</font><font color="#E5E5E5"> in</font>

633
00:27:28,119 --> 00:27:31,958
them and we'll<font color="#E5E5E5"> see how we can</font><font color="#CCCCCC"> neuter</font>

634
00:27:29,859 --> 00:27:35,859
this by knocking out those function

635
00:27:31,959 --> 00:27:37,929
pointers later on just<font color="#CCCCCC"> a little demo of</font>

636
00:27:35,859 --> 00:27:42,509
system integrity<font color="#E5E5E5"> protection actually</font>

637
00:27:37,929 --> 00:27:42,509
first I have to change snapshots

638
00:27:54,670 --> 00:27:58,300
so that previous one<font color="#E5E5E5"> was after the</font>

639
00:27:56,920 --> 00:28:01,020
<font color="#E5E5E5">exploit so that I could show the</font><font color="#CCCCCC"> i/os</font>

640
00:27:58,300 --> 00:28:01,020
<font color="#CCCCCC">Kearney kills</font>

641
00:28:06,150 --> 00:28:12,900
<font color="#E5E5E5">all right so the</font><font color="#CCCCCC"> CSR util is a simple</font>

642
00:28:10,750 --> 00:28:15,160
utility<font color="#E5E5E5"> which lets you turn on and off</font>

643
00:28:12,900 --> 00:28:17,230
<font color="#CCCCCC">system integrity protection obviously</font>

644
00:28:15,160 --> 00:28:19,360
can only run recovery mode or if the<font color="#CCCCCC"> SIP</font>

645
00:28:17,230 --> 00:28:21,130
<font color="#CCCCCC">is already turned off and you can</font><font color="#E5E5E5"> use</font>

646
00:28:19,360 --> 00:28:23,500
the status command to just check<font color="#E5E5E5"> and so</font>

647
00:28:21,130 --> 00:28:25,780
we can see that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is enabled</font><font color="#E5E5E5"> and so if</font>

648
00:28:23,500 --> 00:28:28,929
<font color="#E5E5E5">I yeah I'm the root user right now but</font>

649
00:28:25,780 --> 00:28:31,059
if I try to write<font color="#E5E5E5"> to the bin</font><font color="#CCCCCC"> directory</font>

650
00:28:28,929 --> 00:28:32,950
I'm not allowed<font color="#CCCCCC"> so it just</font><font color="#E5E5E5"> tells me</font>

651
00:28:31,059 --> 00:28:36,160
<font color="#CCCCCC">operation not permitted because sips</font>

652
00:28:32,950 --> 00:28:38,110
Paul<font color="#E5E5E5"> C function for create files was</font>

653
00:28:36,160 --> 00:28:39,909
called and it said<font color="#E5E5E5"> oh you're trying to</font>

654
00:28:38,110 --> 00:28:41,199
<font color="#E5E5E5">write to the bin directory</font><font color="#CCCCCC"> I'm not going</font>

655
00:28:39,909 --> 00:28:43,900
to allow it<font color="#CCCCCC"> because that would be a</font>

656
00:28:41,200 --> 00:28:54,789
system modification and sips purpose is

657
00:28:43,900 --> 00:28:56,169
to not allow<font color="#CCCCCC"> that so that is a</font><font color="#E5E5E5"> system</font>

658
00:28:54,789 --> 00:28:58,780
<font color="#E5E5E5">integrity protection we'll see how to</font>

659
00:28:56,169 --> 00:29:00,130
turn<font color="#CCCCCC"> that off in a second so next we're</font>

660
00:28:58,780 --> 00:29:01,178
<font color="#E5E5E5">gonna I'm going to show off the specific</font>

661
00:29:00,130 --> 00:29:03,010
vulnerability and then we'll talk

662
00:29:01,179 --> 00:29:05,650
through how you go about<font color="#CCCCCC"> creating an</font>

663
00:29:03,010 --> 00:29:09,100
exploit for<font color="#CCCCCC"> it</font><font color="#E5E5E5"> the vulnerability that I</font>

664
00:29:05,650 --> 00:29:11,890
chose<font color="#E5E5E5"> for this case study is</font><font color="#CCCCCC"> that CV up</font>

665
00:29:09,100 --> 00:29:14,469
there which is a vulnerability<font color="#E5E5E5"> in the AV</font>

666
00:29:11,890 --> 00:29:17,350
<font color="#E5E5E5">bridge dry i/o kit driver it was</font>

667
00:29:14,470 --> 00:29:19,090
originally found<font color="#E5E5E5"> by Alex Plaskett the</font>

668
00:29:17,350 --> 00:29:25,719
URL<font color="#E5E5E5"> for that is down there when you go</font>

669
00:29:19,090 --> 00:29:28,209
to pull up the slides<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a IO kit</font>

670
00:29:25,720 --> 00:29:30,419
<font color="#CCCCCC">func driver function</font><font color="#E5E5E5"> you can call it</font>

671
00:29:28,210 --> 00:29:34,270
from<font color="#E5E5E5"> kernel with a user control value</font>

672
00:29:30,419 --> 00:29:36,490
<font color="#CCCCCC">and so what it is is this user control</font>

673
00:29:34,270 --> 00:29:43,030
value is passed into<font color="#E5E5E5"> the command gates</font>

674
00:29:36,490 --> 00:29:45,610
array<font color="#E5E5E5"> it has an index off it and then it</font>

675
00:29:43,030 --> 00:29:47,649
calls a C++ function of one of the

676
00:29:45,610 --> 00:29:51,070
objects<font color="#E5E5E5"> in that array however the array</font>

677
00:29:47,650 --> 00:29:53,789
is<font color="#CCCCCC"> not checked to make sure</font><font color="#E5E5E5"> that it is</font>

678
00:29:51,070 --> 00:29:56,559
within the<font color="#E5E5E5"> bounds of the</font><font color="#CCCCCC"> array</font>

679
00:29:53,789 --> 00:29:58,600
<font color="#E5E5E5">just a little visualization</font><font color="#CCCCCC"> of that</font><font color="#E5E5E5"> we</font>

680
00:29:56,559 --> 00:30:00,309
have our AV bridge<font color="#CCCCCC"> object up there and</font>

681
00:29:58,600 --> 00:30:02,830
there's a command gates array which has

682
00:30:00,309 --> 00:30:05,020
<font color="#CCCCCC">four objects</font><font color="#E5E5E5"> in it it's only for value</font>

683
00:30:02,830 --> 00:30:06,908
long however<font color="#E5E5E5"> they don't check the index</font>

684
00:30:05,020 --> 00:30:09,158
so we<font color="#E5E5E5"> can fill in any value</font><font color="#CCCCCC"> and it will</font>

685
00:30:06,909 --> 00:30:12,610
<font color="#E5E5E5">go to whatever that addresses in memory</font>

686
00:30:09,159 --> 00:30:16,390
<font color="#E5E5E5">and try and read out a pointer to</font><font color="#CCCCCC"> a C++</font>

687
00:30:12,610 --> 00:30:19,299
<font color="#E5E5E5">IO command gate object and then it will</font>

688
00:30:16,390 --> 00:30:19,840
read<font color="#CCCCCC"> the feed table out pointer from</font>

689
00:30:19,299 --> 00:30:22,150
<font color="#E5E5E5">that command</font>

690
00:30:19,840 --> 00:30:24,428
object and then do you reference it if

691
00:30:22,150 --> 00:30:26,169
you're not<font color="#E5E5E5"> familiar with C++ V tables</font>

692
00:30:24,429 --> 00:30:28,840
<font color="#CCCCCC">they're essentially just</font><font color="#E5E5E5"> arrays</font><font color="#CCCCCC"> of</font>

693
00:30:26,169 --> 00:30:33,220
function pointers<font color="#CCCCCC"> for a class and so</font>

694
00:30:28,840 --> 00:30:35,139
what<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> is when I say</font><font color="#CCCCCC"> zero</font>

695
00:30:33,220 --> 00:30:37,870
for that index it<font color="#CCCCCC"> called</font><font color="#E5E5E5"> it goes to the</font>

696
00:30:35,140 --> 00:30:39,909
<font color="#E5E5E5">zeroth item it reads the pointer</font><font color="#CCCCCC"> out</font>

697
00:30:37,870 --> 00:30:42,100
goes to the<font color="#E5E5E5"> V table pointer reads it out</font>

698
00:30:39,909 --> 00:30:44,380
again which goes to right here<font color="#CCCCCC"> it adds</font>

699
00:30:42,100 --> 00:30:45,969
an offset to it and in this case<font color="#CCCCCC"> it's</font>

700
00:30:44,380 --> 00:30:49,299
trying to call the run<font color="#E5E5E5"> action function</font>

701
00:30:45,970 --> 00:30:51,370
which is<font color="#CCCCCC"> 1c 8 down</font><font color="#E5E5E5"> from the top of</font><font color="#CCCCCC"> the V</font>

702
00:30:49,299 --> 00:30:55,210
table it will<font color="#E5E5E5"> read that pointer and then</font>

703
00:30:51,370 --> 00:30:57,250
<font color="#E5E5E5">it jumps</font><font color="#CCCCCC"> to it and so</font><font color="#E5E5E5"> however if we give</font>

704
00:30:55,210 --> 00:30:59,140
it a much larger<font color="#E5E5E5"> index it will try</font><font color="#CCCCCC"> and</font>

705
00:30:57,250 --> 00:31:00,970
read<font color="#E5E5E5"> something from memory up here which</font>

706
00:30:59,140 --> 00:31:03,659
<font color="#CCCCCC">clearly one point at one of these I'll</font>

707
00:31:00,970 --> 00:31:06,580
command<font color="#E5E5E5"> gates and things will go wrong</font>

708
00:31:03,659 --> 00:31:08,919
if I can't read if that isn't a<font color="#E5E5E5"> valid</font>

709
00:31:06,580 --> 00:31:10,510
pointer<font color="#E5E5E5"> it'll crash</font><font color="#CCCCCC"> if it is it will</font><font color="#E5E5E5"> try</font>

710
00:31:08,919 --> 00:31:12,640
<font color="#E5E5E5">and use</font><font color="#CCCCCC"> that as if it were an i/o</font>

711
00:31:10,510 --> 00:31:15,250
command gate and try and read a V table

712
00:31:12,640 --> 00:31:17,500
<font color="#CCCCCC">pointer out</font><font color="#E5E5E5"> and so we'll look at how we</font>

713
00:31:15,250 --> 00:31:20,620
<font color="#E5E5E5">can kind of fake that out and cause it</font>

714
00:31:17,500 --> 00:31:22,270
to jump<font color="#E5E5E5"> to</font><font color="#CCCCCC"> our code so now I'm</font><font color="#E5E5E5"> just</font>

715
00:31:20,620 --> 00:31:24,070
gonna talk a couple<font color="#CCCCCC"> about a couple</font>

716
00:31:22,270 --> 00:31:25,690
techniques<font color="#E5E5E5"> that we'll look at and for</font>

717
00:31:24,070 --> 00:31:31,379
bypassing some<font color="#CCCCCC"> the mitigations as well</font>

718
00:31:25,690 --> 00:31:34,210
as exporting the first one is one<font color="#E5E5E5"> of the</font>

719
00:31:31,380 --> 00:31:35,980
important things<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> is spray</font><font color="#CCCCCC"> the</font>

720
00:31:34,210 --> 00:31:39,159
memory<font color="#E5E5E5"> because we don't know where</font><font color="#CCCCCC"> that</font>

721
00:31:35,980 --> 00:31:41,559
object<font color="#CCCCCC"> is in memory specifically because</font>

722
00:31:39,159 --> 00:31:43,029
<font color="#CCCCCC">of the ksl our slide</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> will need to</font>

723
00:31:41,559 --> 00:31:44,980
spray the memory and<font color="#E5E5E5"> so we'll</font><font color="#CCCCCC"> have to</font>

724
00:31:43,029 --> 00:31:48,039
what that<font color="#E5E5E5"> we do with that</font><font color="#CCCCCC"> is we</font><font color="#E5E5E5"> allocate</font>

725
00:31:44,980 --> 00:31:49,840
a large number of blocks<font color="#E5E5E5"> and we fill</font>

726
00:31:48,039 --> 00:31:53,590
those blocks with our fake object

727
00:31:49,840 --> 00:31:55,270
pointers and then when the<font color="#CCCCCC"> kernel at we</font>

728
00:31:53,590 --> 00:31:56,799
give it an index larger than that it

729
00:31:55,270 --> 00:31:58,980
will reach around<font color="#CCCCCC"> past the top of the</font>

730
00:31:56,799 --> 00:32:02,020
memory back into our<font color="#E5E5E5"> userland memory and</font>

731
00:31:58,980 --> 00:32:03,640
somewhere within<font color="#E5E5E5"> the spray what we'll do</font>

732
00:32:02,020 --> 00:32:06,549
is we'll<font color="#E5E5E5"> actually spray</font><font color="#CCCCCC"> two gigabytes of</font>

733
00:32:03,640 --> 00:32:08,980
memory<font color="#CCCCCC"> so that</font><font color="#E5E5E5"> that 512 megabyte slide</font>

734
00:32:06,549 --> 00:32:10,929
that it could possibly<font color="#E5E5E5"> have is just</font>

735
00:32:08,980 --> 00:32:12,700
<font color="#E5E5E5">miniscule in comparison and it will</font>

736
00:32:10,929 --> 00:32:15,760
always land<font color="#CCCCCC"> within our</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> gigabytes</font>

737
00:32:12,700 --> 00:32:16,990
spread one thing to note about when

738
00:32:15,760 --> 00:32:18,669
you're<font color="#E5E5E5"> doing this in</font><font color="#CCCCCC"> userland</font>

739
00:32:16,990 --> 00:32:21,159
you don't actually need to<font color="#E5E5E5"> 'allah gate</font>

740
00:32:18,669 --> 00:32:23,049
allocate the two gigabytes of memory<font color="#CCCCCC"> you</font>

741
00:32:21,159 --> 00:32:25,390
can just use duplicated memory mappings

742
00:32:23,049 --> 00:32:27,370
<font color="#E5E5E5">to all it to set up</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> memory with</font>

743
00:32:25,390 --> 00:32:31,300
your spray without<font color="#E5E5E5"> actually adding more</font>

744
00:32:27,370 --> 00:32:33,010
because you the memory is<font color="#E5E5E5"> copy on right</font>

745
00:32:31,300 --> 00:32:34,960
it's only allocated<font color="#E5E5E5"> when you change it</font>

746
00:32:33,010 --> 00:32:37,120
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> make as many of those</font><font color="#CCCCCC"> as you</font>

747
00:32:34,960 --> 00:32:39,970
want<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can actually allocate more</font>

748
00:32:37,120 --> 00:32:42,070
in your spray than memory then you have

749
00:32:39,970 --> 00:32:44,530
in<font color="#E5E5E5"> your laptop so for instance this</font>

750
00:32:42,070 --> 00:32:46,270
<font color="#CCCCCC">MacBook has 16 gigabytes of memory but</font>

751
00:32:44,530 --> 00:32:48,190
using duplicated memory mappings I was

752
00:32:46,270 --> 00:32:49,870
able<font color="#E5E5E5"> to spray 32 gigabytes of memory</font><font color="#CCCCCC"> or</font>

753
00:32:48,190 --> 00:32:52,060
<font color="#CCCCCC">however much I want</font><font color="#E5E5E5"> because it's not</font>

754
00:32:49,870 --> 00:32:54,370
<font color="#E5E5E5">actually allocated and so as you can</font><font color="#CCCCCC"> see</font>

755
00:32:52,060 --> 00:32:56,889
<font color="#E5E5E5">I'm left without the spray if we use a</font>

756
00:32:54,370 --> 00:32:58,449
<font color="#E5E5E5">hard-coded index it'll point if the</font>

757
00:32:56,890 --> 00:33:00,430
slide is<font color="#CCCCCC"> 0 it might actually</font><font color="#E5E5E5"> point to</font>

758
00:32:58,450 --> 00:33:01,720
our user memory<font color="#E5E5E5"> if it's not then it</font>

759
00:33:00,430 --> 00:33:03,340
might not<font color="#CCCCCC"> point</font><font color="#E5E5E5"> to our user</font><font color="#CCCCCC"> land</font>

760
00:33:01,720 --> 00:33:05,140
remember<font color="#CCCCCC"> whereas if we</font><font color="#E5E5E5"> just have a</font><font color="#CCCCCC"> too</font>

761
00:33:03,340 --> 00:33:07,360
good good bite spray it will<font color="#E5E5E5"> always hit</font>

762
00:33:05,140 --> 00:33:10,780
somewhere<font color="#E5E5E5"> in our usual our user only in</font>

763
00:33:07,360 --> 00:33:13,179
memory<font color="#E5E5E5"> how we'll use that just looks a</font>

764
00:33:10,780 --> 00:33:16,030
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit like this what we'll do is we</font>

765
00:33:13,180 --> 00:33:19,540
<font color="#CCCCCC">will spray fake vtable pointers which</font>

766
00:33:16,030 --> 00:33:22,780
are essentially these pointers<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> right</font>

767
00:33:19,540 --> 00:33:25,180
here<font color="#E5E5E5"> sorry the pointers right here well</font>

768
00:33:22,780 --> 00:33:27,310
spray a bunch<font color="#E5E5E5"> of fake vtable pointers as</font>

769
00:33:25,180 --> 00:33:29,110
if that was the the i/o command gate

770
00:33:27,310 --> 00:33:31,419
objects then we'll use a hard-coded

771
00:33:29,110 --> 00:33:34,389
<font color="#E5E5E5">index it will wrap the memory</font><font color="#CCCCCC"> will wrap</font>

772
00:33:31,420 --> 00:33:35,770
back around<font color="#E5E5E5"> back to right here and then</font>

773
00:33:34,390 --> 00:33:38,080
these will all point to our payload

774
00:33:35,770 --> 00:33:39,610
pointer which would be essentially a

775
00:33:38,080 --> 00:33:42,699
<font color="#CCCCCC">normal point</font><font color="#E5E5E5"> at run action</font><font color="#CCCCCC"> but will</font>

776
00:33:39,610 --> 00:33:47,530
<font color="#E5E5E5">instead point to our payload and so and</font>

777
00:33:42,700 --> 00:33:48,910
that's how we'll<font color="#E5E5E5"> get code execution</font><font color="#CCCCCC"> one</font>

778
00:33:47,530 --> 00:33:51,040
of the things to note is if<font color="#CCCCCC"> we were</font><font color="#E5E5E5"> to</font>

779
00:33:48,910 --> 00:33:52,030
<font color="#E5E5E5">try that it wouldn't work</font><font color="#CCCCCC"> because of</font>

780
00:33:51,040 --> 00:33:54,430
smack

781
00:33:52,030 --> 00:33:57,160
if your computer is new enough<font color="#E5E5E5"> and you</font>

782
00:33:54,430 --> 00:33:58,480
have<font color="#E5E5E5"> snap that when you try</font><font color="#CCCCCC"> and point it</font>

783
00:33:57,160 --> 00:34:01,450
<font color="#CCCCCC">into</font><font color="#E5E5E5"> usually in memory it'll actually</font>

784
00:33:58,480 --> 00:34:03,280
just<font color="#E5E5E5"> crash because of the processor</font>

785
00:34:01,450 --> 00:34:05,290
exception so instead what you<font color="#CCCCCC"> can do is</font>

786
00:34:03,280 --> 00:34:08,739
you<font color="#E5E5E5"> can spray the kernel with that</font>

787
00:34:05,290 --> 00:34:11,620
memory<font color="#CCCCCC"> and so and then point</font><font color="#E5E5E5"> it into the</font>

788
00:34:08,739 --> 00:34:14,168
kernel instead<font color="#CCCCCC"> there's a number</font><font color="#E5E5E5"> of i/o</font>

789
00:34:11,620 --> 00:34:16,509
kit<font color="#E5E5E5"> classes which you can</font><font color="#CCCCCC"> allocate via</font>

790
00:34:14,168 --> 00:34:18,370
various<font color="#E5E5E5"> api's with the kernel in kernel</font>

791
00:34:16,510 --> 00:34:21,370
memory<font color="#E5E5E5"> one of the more useful ones is</font>

792
00:34:18,370 --> 00:34:25,089
<font color="#CCCCCC">called OS OS string</font><font color="#E5E5E5"> which is just simply</font>

793
00:34:21,370 --> 00:34:26,770
<font color="#CCCCCC">just an i/o kit string object they're</font>

794
00:34:25,090 --> 00:34:29,169
very useful<font color="#E5E5E5"> because you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> set that all</font>

795
00:34:26,770 --> 00:34:31,179
of the content<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> create them or</font>

796
00:34:29,168 --> 00:34:32,560
<font color="#E5E5E5">delete them or read them</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> whenever</font>

797
00:34:31,179 --> 00:34:34,630
you<font color="#CCCCCC"> want and you can make them of</font>

798
00:34:32,560 --> 00:34:37,270
arbitrary size<font color="#CCCCCC"> and so what you</font><font color="#E5E5E5"> can do is</font>

799
00:34:34,630 --> 00:34:39,429
you can<font color="#E5E5E5"> create many large string objects</font>

800
00:34:37,270 --> 00:34:41,590
in<font color="#E5E5E5"> it and it</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> actually allocate</font><font color="#CCCCCC"> that</font>

801
00:34:39,429 --> 00:34:43,149
in memory<font color="#CCCCCC"> and once you've</font><font color="#E5E5E5"> filled up the</font>

802
00:34:41,590 --> 00:34:44,740
<font color="#CCCCCC">available free slots they will all be</font>

803
00:34:43,149 --> 00:34:48,620
allocated in<font color="#E5E5E5"> a row</font>

804
00:34:44,739 --> 00:34:50,929
and so that lets you all okay

805
00:34:48,620 --> 00:34:53,179
use a<font color="#E5E5E5"> hard-coded memory address because</font>

806
00:34:50,929 --> 00:34:56,239
<font color="#CCCCCC">it's such a large</font><font color="#E5E5E5"> amount of</font><font color="#CCCCCC"> memory</font><font color="#E5E5E5"> and</font>

807
00:34:53,179 --> 00:34:58,520
<font color="#E5E5E5">so for this</font><font color="#CCCCCC"> macbook i was actually able</font>

808
00:34:56,239 --> 00:35:02,330
<font color="#E5E5E5">to spray</font><font color="#CCCCCC"> two gigabytes of memory and</font>

809
00:34:58,520 --> 00:35:04,940
find<font color="#E5E5E5"> that the address ffff nine</font><font color="#CCCCCC"> to five</font>

810
00:35:02,330 --> 00:35:06,920
<font color="#CCCCCC">eight with followed by six zeros is</font>

811
00:35:04,940 --> 00:35:09,320
always allocated and always set to<font color="#E5E5E5"> my</font>

812
00:35:06,920 --> 00:35:11,990
content<font color="#E5E5E5"> if</font><font color="#CCCCCC"> i've sprayed to your bytes of</font>

813
00:35:09,320 --> 00:35:15,860
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> so we can use that</font><font color="#E5E5E5"> to point</font>

814
00:35:11,990 --> 00:35:19,580
things<font color="#E5E5E5"> there and when we</font><font color="#CCCCCC"> need to bypass</font>

815
00:35:15,860 --> 00:35:25,490
<font color="#E5E5E5">man the specific laptop does not so we</font>

816
00:35:19,580 --> 00:35:28,100
<font color="#CCCCCC">don't have to bypass that this laptop</font>

817
00:35:25,490 --> 00:35:29,660
<font color="#CCCCCC">actually does have snap though</font><font color="#E5E5E5"> so we</font>

818
00:35:28,100 --> 00:35:31,100
will have to bypass<font color="#CCCCCC"> that and the way</font>

819
00:35:29,660 --> 00:35:33,080
<font color="#E5E5E5">that's done is simply through return</font>

820
00:35:31,100 --> 00:35:36,470
oriented programming or<font color="#E5E5E5"> Rob like you</font>

821
00:35:33,080 --> 00:35:39,350
would in a normal user land exploitation

822
00:35:36,470 --> 00:35:41,930
as well<font color="#CCCCCC"> what that</font><font color="#E5E5E5"> does essentially just</font>

823
00:35:39,350 --> 00:35:43,670
<font color="#E5E5E5">you set the stack to value that you</font>

824
00:35:41,930 --> 00:35:46,339
<font color="#E5E5E5">control and then you will set one</font>

825
00:35:43,670 --> 00:35:49,370
<font color="#CCCCCC">address you</font><font color="#E5E5E5"> want to run any values it</font>

826
00:35:46,340 --> 00:35:51,500
uses and then the read instruction will

827
00:35:49,370 --> 00:35:53,210
read that<font color="#E5E5E5"> address and execute this</font>

828
00:35:51,500 --> 00:35:55,490
little code snippets that<font color="#CCCCCC"> you can then</font>

829
00:35:53,210 --> 00:35:58,280
combine<font color="#E5E5E5"> to do something in this example</font>

830
00:35:55,490 --> 00:36:01,250
on<font color="#E5E5E5"> the right we</font><font color="#CCCCCC"> have a gadget</font><font color="#E5E5E5"> that's pop</font>

831
00:35:58,280 --> 00:36:03,320
<font color="#E5E5E5">RDI ret and so what</font><font color="#CCCCCC"> that will do is it</font>

832
00:36:01,250 --> 00:36:06,140
will<font color="#E5E5E5"> pop this RDI value into the RDI</font>

833
00:36:03,320 --> 00:36:08,240
register off the stack<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> the ret</font>

834
00:36:06,140 --> 00:36:10,190
will load the next<font color="#CCCCCC"> gadget which is a pop</font>

835
00:36:08,240 --> 00:36:12,049
RSI which<font color="#E5E5E5"> will do the same</font><font color="#CCCCCC"> with the RSI</font>

836
00:36:10,190 --> 00:36:13,670
value<font color="#E5E5E5"> and through that means you can set</font>

837
00:36:12,050 --> 00:36:15,170
the registers<font color="#CCCCCC"> and then if you put a</font>

838
00:36:13,670 --> 00:36:18,590
function<font color="#E5E5E5"> address on there it will call</font>

839
00:36:15,170 --> 00:36:20,900
that<font color="#CCCCCC"> function as</font><font color="#E5E5E5"> x86 is fast call or</font>

840
00:36:18,590 --> 00:36:23,360
takes<font color="#E5E5E5"> the arguments via that registers</font>

841
00:36:20,900 --> 00:36:27,620
<font color="#CCCCCC">that will call a function with our</font>

842
00:36:23,360 --> 00:36:29,360
arguments that we want<font color="#E5E5E5"> and so through</font>

843
00:36:27,620 --> 00:36:31,900
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> run our little bits of code</font>

844
00:36:29,360 --> 00:36:34,610
without actually having to get that code

845
00:36:31,900 --> 00:36:37,340
loaded up into kernel<font color="#CCCCCC"> memory in</font><font color="#E5E5E5"> in an</font>

846
00:36:34,610 --> 00:36:38,930
executable<font color="#E5E5E5"> memory region one of the</font>

847
00:36:37,340 --> 00:36:41,240
other things to note is the function

848
00:36:38,930 --> 00:36:44,419
thread exception return which is<font color="#CCCCCC"> very</font>

849
00:36:41,240 --> 00:36:46,490
<font color="#E5E5E5">useful function when doing Rob what that</font>

850
00:36:44,420 --> 00:36:48,380
function<font color="#E5E5E5"> does is it will just stop the</font>

851
00:36:46,490 --> 00:36:49,069
kernel context and return to user land

852
00:36:48,380 --> 00:36:53,000
wherever<font color="#E5E5E5"> you are</font>

853
00:36:49,070 --> 00:36:56,330
and so how that's useful is such that if

854
00:36:53,000 --> 00:36:56,600
you<font color="#E5E5E5"> don't safely end your</font><font color="#CCCCCC"> wrap chain the</font>

855
00:36:56,330 --> 00:36:58,190
current

856
00:36:56,600 --> 00:37:00,529
we'll crash<font color="#E5E5E5"> and when it crashes</font><font color="#CCCCCC"> you</font>

857
00:36:58,190 --> 00:37:02,890
obviously the OS goes down and you can't

858
00:37:00,530 --> 00:37:05,300
use anything that you<font color="#E5E5E5"> just did in your</font>

859
00:37:02,890 --> 00:37:07,040
<font color="#CCCCCC">rock chain and so you need to</font><font color="#E5E5E5"> safely</font>

860
00:37:05,300 --> 00:37:09,260
<font color="#E5E5E5">exit your rock chain or return</font><font color="#CCCCCC"> it back</font>

861
00:37:07,040 --> 00:37:10,730
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> normal context and there's two</font>

862
00:37:09,260 --> 00:37:12,830
ways<font color="#CCCCCC"> of doing that</font><font color="#E5E5E5"> one there's the</font>

863
00:37:10,730 --> 00:37:15,320
complicated way<font color="#E5E5E5"> of getting</font><font color="#CCCCCC"> back onto the</font>

864
00:37:12,830 --> 00:37:16,910
correct stack frame with the creative

865
00:37:15,320 --> 00:37:18,980
values on it in<font color="#E5E5E5"> order to continue</font>

866
00:37:16,910 --> 00:37:20,629
execution<font color="#CCCCCC"> the other way which is much</font>

867
00:37:18,980 --> 00:37:23,810
easier<font color="#CCCCCC"> is just to call the</font><font color="#E5E5E5"> function</font>

868
00:37:20,630 --> 00:37:25,190
thread exception return<font color="#CCCCCC"> a normal user</font>

869
00:37:23,810 --> 00:37:27,230
<font color="#E5E5E5">land exploitation this doesn't really</font>

870
00:37:25,190 --> 00:37:30,590
matter as much because you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> just let</font>

871
00:37:27,230 --> 00:37:32,540
your process crash and after<font color="#E5E5E5"> you've</font>

872
00:37:30,590 --> 00:37:34,640
achieved whatever<font color="#E5E5E5"> you were trying to in</font>

873
00:37:32,540 --> 00:37:36,140
kernel<font color="#CCCCCC"> land that would</font><font color="#E5E5E5"> cause the OS to</font>

874
00:37:34,640 --> 00:37:37,759
crash and so you just throwing<font color="#E5E5E5"> that</font>

875
00:37:36,140 --> 00:37:41,960
function<font color="#E5E5E5"> on there it will terminate your</font>

876
00:37:37,760 --> 00:37:43,610
<font color="#CCCCCC">Rob</font><font color="#E5E5E5"> chain how we'll use that is simply</font>

877
00:37:41,960 --> 00:37:45,620
<font color="#CCCCCC">we'll just rather than pointing</font><font color="#E5E5E5"> the</font>

878
00:37:43,610 --> 00:37:48,020
payload buffer into our payload will

879
00:37:45,620 --> 00:37:50,390
point it up into<font color="#CCCCCC"> a kernel Rob gadget the</font>

880
00:37:48,020 --> 00:37:52,520
first drop gadget is our stack pivot and

881
00:37:50,390 --> 00:37:55,460
so what<font color="#CCCCCC"> that does in this in this</font>

882
00:37:52,520 --> 00:37:57,530
vulnerability<font color="#CCCCCC"> re X points into content</font>

883
00:37:55,460 --> 00:38:00,020
week control<font color="#E5E5E5"> and so what we'll do is</font>

884
00:37:57,530 --> 00:38:02,360
<font color="#CCCCCC">we'll push the first gadget pushes our</font><font color="#E5E5E5"> X</font>

885
00:38:00,020 --> 00:38:04,310
<font color="#E5E5E5">onto the stack and then pops it into the</font>

886
00:38:02,360 --> 00:38:07,010
stack pointer<font color="#CCCCCC"> so what</font><font color="#E5E5E5"> that does is it</font>

887
00:38:04,310 --> 00:38:08,810
<font color="#E5E5E5">just allows</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to set</font><font color="#CCCCCC"> the stack to our</font>

888
00:38:07,010 --> 00:38:12,620
content<font color="#E5E5E5"> and lets us set up those gadgets</font>

889
00:38:08,810 --> 00:38:15,110
<font color="#E5E5E5">on the stack</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we'll run after that</font>

890
00:38:12,620 --> 00:38:18,190
we<font color="#CCCCCC"> just set up our Rob chain to call</font>

891
00:38:15,110 --> 00:38:20,690
whatever functions we want<font color="#CCCCCC"> so</font>

892
00:38:18,190 --> 00:38:23,510
specifically we want that those Rob

893
00:38:20,690 --> 00:38:25,550
gadgets to make us become<font color="#CCCCCC"> route and so</font>

894
00:38:23,510 --> 00:38:28,250
this<font color="#E5E5E5"> little snippet of code we will run</font>

895
00:38:25,550 --> 00:38:30,080
in Rob gadgets that<font color="#E5E5E5"> will grab the</font>

896
00:38:28,250 --> 00:38:32,960
current process struct<font color="#CCCCCC"> out of kernel</font>

897
00:38:30,080 --> 00:38:34,759
memory<font color="#CCCCCC"> it will take the credentials out</font>

898
00:38:32,960 --> 00:38:36,530
<font color="#E5E5E5">of that and then the POSIX credentials</font>

899
00:38:34,760 --> 00:38:38,480
which is just an inner wrapper inside of

900
00:38:36,530 --> 00:38:41,840
the credential<font color="#E5E5E5"> structs and we'll assign</font>

901
00:38:38,480 --> 00:38:44,420
0<font color="#CCCCCC"> or the ID for route to</font><font color="#E5E5E5"> the saved user</font>

902
00:38:41,840 --> 00:38:47,960
ID pointer and so that<font color="#E5E5E5"> little snippet</font><font color="#CCCCCC"> of</font>

903
00:38:44,420 --> 00:38:50,210
code<font color="#E5E5E5"> essentially makes our</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> have</font>

904
00:38:47,960 --> 00:38:52,610
root privileges<font color="#E5E5E5"> we'll just use the set</font>

905
00:38:50,210 --> 00:38:54,680
UID to take the saved you ID pointer<font color="#E5E5E5"> and</font>

906
00:38:52,610 --> 00:38:56,360
make it the effective one again and<font color="#E5E5E5"> then</font>

907
00:38:54,680 --> 00:38:58,609
we've become<font color="#CCCCCC"> route because we've</font>

908
00:38:56,360 --> 00:39:02,560
modified the structure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> holds what</font>

909
00:38:58,610 --> 00:39:02,560
user we are in kernel<font color="#CCCCCC"> memory</font>

910
00:39:06,260 --> 00:39:11,750
after we've become<font color="#CCCCCC"> Rupe the next thing</font>

911
00:39:09,140 --> 00:39:14,060
we're<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> want to do is get a kernel</font>

912
00:39:11,750 --> 00:39:15,830
task port exported to<font color="#CCCCCC"> user land I</font>

913
00:39:14,060 --> 00:39:18,320
mentioned<font color="#E5E5E5"> that was what you needed in</font>

914
00:39:15,830 --> 00:39:20,060
<font color="#CCCCCC">order to use the iOS Kern</font><font color="#E5E5E5"> utils to read</font>

915
00:39:18,320 --> 00:39:22,790
and write kernel memory<font color="#E5E5E5"> this is actually</font>

916
00:39:20,060 --> 00:39:25,549
how it's accomplished the kernel is a

917
00:39:22,790 --> 00:39:27,890
task just<font color="#E5E5E5"> like any other it's task is</font>

918
00:39:25,550 --> 00:39:31,609
<font color="#E5E5E5">given pit</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> it's the first task</font>

919
00:39:27,890 --> 00:39:35,170
obviously<font color="#CCCCCC"> and because it's a task</font><font color="#E5E5E5"> you</font>

920
00:39:31,609 --> 00:39:37,940
<font color="#E5E5E5">can use the normal read and write</font><font color="#CCCCCC"> mock</font>

921
00:39:35,170 --> 00:39:40,160
API<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to read and write kernel</font>

922
00:39:37,940 --> 00:39:42,770
memory<font color="#CCCCCC"> if you have the kernel task board</font>

923
00:39:40,160 --> 00:39:44,930
so the VM read and VM write functions

924
00:39:42,770 --> 00:39:46,700
<font color="#E5E5E5">they can be used to just read it like</font>

925
00:39:44,930 --> 00:39:48,919
you would<font color="#CCCCCC"> any other process with</font><font color="#E5E5E5"> that</font>

926
00:39:46,700 --> 00:39:51,379
<font color="#CCCCCC">kernel task</font><font color="#E5E5E5"> board and so what we'll do</font>

927
00:39:48,920 --> 00:39:53,900
is<font color="#CCCCCC"> we'll have our rock chain grab</font><font color="#E5E5E5"> that</font>

928
00:39:51,380 --> 00:39:56,710
kernel task<font color="#E5E5E5"> port and shove it</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> the</font>

929
00:39:53,900 --> 00:40:01,130
real<font color="#E5E5E5"> hosts array the real hosts array is</font>

930
00:39:56,710 --> 00:40:03,740
a functionality<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> the mac</font><font color="#E5E5E5"> OS kernel</font>

931
00:40:01,130 --> 00:40:06,260
which holds a number<font color="#CCCCCC"> of ports</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you</font>

932
00:40:03,740 --> 00:40:10,430
<font color="#E5E5E5">can query from user land and obtain and</font>

933
00:40:06,260 --> 00:40:12,380
so if you want<font color="#E5E5E5"> to grab a port to a</font>

934
00:40:10,430 --> 00:40:14,359
service like the auto mount<font color="#E5E5E5"> daemon tour</font>

935
00:40:12,380 --> 00:40:16,310
the audit daemon<font color="#E5E5E5"> you can ask the kernel</font>

936
00:40:14,359 --> 00:40:17,810
to retrieve one of<font color="#E5E5E5"> those for you and</font>

937
00:40:16,310 --> 00:40:20,450
give it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> you so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can talk</font><font color="#CCCCCC"> to</font>

938
00:40:17,810 --> 00:40:22,130
those various statements<font color="#CCCCCC"> however there</font>

939
00:40:20,450 --> 00:40:24,200
are<font color="#E5E5E5"> some empty slots in there and we'll</font>

940
00:40:22,130 --> 00:40:26,210
just<font color="#CCCCCC"> use our</font><font color="#E5E5E5"> rock chain to copy the</font>

941
00:40:24,200 --> 00:40:28,669
pointer to the<font color="#E5E5E5"> kernel task to one of</font>

942
00:40:26,210 --> 00:40:32,150
those<font color="#E5E5E5"> empty slots</font><font color="#CCCCCC"> and then whenever our</font>

943
00:40:28,670 --> 00:40:34,010
any user<font color="#E5E5E5"> land process wants to have to</font>

944
00:40:32,150 --> 00:40:36,080
<font color="#E5E5E5">modify criminal memory or recur memory</font>

945
00:40:34,010 --> 00:40:38,420
<font color="#E5E5E5">they can</font><font color="#CCCCCC"> ask the kernel for that</font>

946
00:40:36,080 --> 00:40:40,369
specific port out<font color="#E5E5E5"> of the real hosts</font>

947
00:40:38,420 --> 00:40:42,230
array and then use that<font color="#CCCCCC"> to call the</font><font color="#E5E5E5"> VM</font>

948
00:40:40,369 --> 00:40:43,550
read<font color="#CCCCCC"> in vm write functions that's</font>

949
00:40:42,230 --> 00:40:46,310
actually become one of the<font color="#E5E5E5"> more standard</font>

950
00:40:43,550 --> 00:40:49,609
techniques and so a lot<font color="#CCCCCC"> of tools such as</font>

951
00:40:46,310 --> 00:40:53,029
the iOS<font color="#CCCCCC"> Kern utils will try and retrieve</font>

952
00:40:49,609 --> 00:40:54,590
<font color="#CCCCCC">that port to grab the kernel task board</font>

953
00:40:53,030 --> 00:41:00,650
and then they can use<font color="#E5E5E5"> that</font><font color="#CCCCCC"> to read and</font>

954
00:40:54,590 --> 00:41:02,690
write<font color="#CCCCCC"> memory so then one</font><font color="#E5E5E5"> of the the next</font>

955
00:41:00,650 --> 00:41:04,670
<font color="#E5E5E5">thing we'll want to do now</font><font color="#CCCCCC"> that we have</font>

956
00:41:02,690 --> 00:41:06,950
the ability to read<font color="#E5E5E5"> and write</font><font color="#CCCCCC"> memory but</font>

957
00:41:04,670 --> 00:41:08,869
we don't have<font color="#CCCCCC"> to use complicated Rob to</font>

958
00:41:06,950 --> 00:41:11,359
do it we can just<font color="#CCCCCC"> ask for the task port</font>

959
00:41:08,869 --> 00:41:14,750
<font color="#E5E5E5">and call the normal function</font><font color="#CCCCCC"> Alice's</font>

960
00:41:11,359 --> 00:41:17,240
will want to neuter system integrity

961
00:41:14,750 --> 00:41:19,280
<font color="#CCCCCC">protection or just turn it off and</font><font color="#E5E5E5"> so</font>

962
00:41:17,240 --> 00:41:21,200
that's actually rather trivial once you

963
00:41:19,280 --> 00:41:23,660
obtained<font color="#E5E5E5"> kernel memory read/write</font>

964
00:41:21,200 --> 00:41:26,029
ability and so there's a symbol<font color="#CCCCCC"> called</font>

965
00:41:23,660 --> 00:41:28,670
<font color="#E5E5E5">Mac policy list which lists all of the</font>

966
00:41:26,030 --> 00:41:32,480
policies that are<font color="#E5E5E5"> currently enforced for</font>

967
00:41:28,670 --> 00:41:34,730
the for Mac OS and<font color="#E5E5E5"> so we'll just read</font>

968
00:41:32,480 --> 00:41:36,200
<font color="#E5E5E5">that area of memory out of</font><font color="#CCCCCC"> the kernel</font>

969
00:41:34,730 --> 00:41:40,190
<font color="#E5E5E5">and updated so all those function</font>

970
00:41:36,200 --> 00:41:48,799
pointers we saw where are<font color="#E5E5E5"> now</font><font color="#CCCCCC"> zero we</font>

971
00:41:40,190 --> 00:41:50,450
can<font color="#E5E5E5"> just take a look at what</font><font color="#CCCCCC"> that let's</font>

972
00:41:48,800 --> 00:41:53,840
<font color="#E5E5E5">take a look at what that how that's done</font>

973
00:41:50,450 --> 00:41:58,310
<font color="#E5E5E5">the macros here</font><font color="#CCCCCC"> K read and K</font><font color="#E5E5E5"> right just</font>

974
00:41:53,840 --> 00:42:00,320
to read from kernel memory yeah<font color="#E5E5E5"> maybe</font>

975
00:41:58,310 --> 00:42:02,180
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> better</font><font color="#E5E5E5"> so at the top you can</font><font color="#CCCCCC"> see</font>

976
00:42:00,320 --> 00:42:04,730
<font color="#CCCCCC">we're reading out the</font><font color="#E5E5E5"> Mac policy list</font>

977
00:42:02,180 --> 00:42:06,350
<font color="#E5E5E5">and then we go down</font><font color="#CCCCCC"> here to</font><font color="#E5E5E5"> the for loop</font>

978
00:42:04,730 --> 00:42:08,840
where we iterate over each entry in that

979
00:42:06,350 --> 00:42:12,170
<font color="#E5E5E5">list</font><font color="#CCCCCC"> we'll read the list out</font><font color="#E5E5E5"> of memory</font>

980
00:42:08,840 --> 00:42:14,930
<font color="#CCCCCC">if it's not null or that slot is an</font>

981
00:42:12,170 --> 00:42:16,910
empty will then read<font color="#CCCCCC"> the specific policy</font>

982
00:42:14,930 --> 00:42:18,890
out and the function pointers that<font color="#E5E5E5"> make</font>

983
00:42:16,910 --> 00:42:20,390
up that<font color="#E5E5E5"> policy and then we'll just</font>

984
00:42:18,890 --> 00:42:24,350
change them all to<font color="#CCCCCC"> be null</font>

985
00:42:20,390 --> 00:42:26,450
<font color="#E5E5E5">and so then next time the kernel goes to</font>

986
00:42:24,350 --> 00:42:28,130
call one of<font color="#E5E5E5"> these functions</font><font color="#CCCCCC"> that</font>

987
00:42:26,450 --> 00:42:31,040
function pointer will be<font color="#E5E5E5"> null</font><font color="#CCCCCC"> and the</font>

988
00:42:28,130 --> 00:42:32,630
kernel will think hey there that policy

989
00:42:31,040 --> 00:42:35,270
doesn't<font color="#E5E5E5"> define it it doesn't care</font><font color="#CCCCCC"> about</font>

990
00:42:32,630 --> 00:42:37,460
that specific action and so<font color="#E5E5E5"> it's the one</font>

991
00:42:35,270 --> 00:42:40,700
that as I showed before<font color="#CCCCCC"> in the file</font>

992
00:42:37,460 --> 00:42:43,370
check create<font color="#E5E5E5"> that function is called</font>

993
00:42:40,700 --> 00:42:45,680
when<font color="#E5E5E5"> we create a file but if that</font>

994
00:42:43,370 --> 00:42:47,900
pointer is<font color="#E5E5E5"> now null it won't actually be</font>

995
00:42:45,680 --> 00:42:51,500
<font color="#E5E5E5">called and so if we do</font><font color="#CCCCCC"> that to</font><font color="#E5E5E5"> the</font>

996
00:42:47,900 --> 00:42:54,020
system integrity and then down here we

997
00:42:51,500 --> 00:42:56,420
<font color="#E5E5E5">write it out if we do that to the system</font>

998
00:42:54,020 --> 00:42:59,240
<font color="#CCCCCC">integrity protection</font><font color="#E5E5E5"> policy that'll</font>

999
00:42:56,420 --> 00:43:00,590
essentially turn it off so we've written

1000
00:42:59,240 --> 00:43:02,270
it<font color="#E5E5E5"> back to kernel memory with all those</font>

1001
00:43:00,590 --> 00:43:05,050
modified function pointers and it's

1002
00:43:02,270 --> 00:43:05,050
essentially neutered

1003
00:43:08,150 --> 00:43:13,040
so now<font color="#E5E5E5"> just to show</font><font color="#CCCCCC"> off the exploit that</font>

1004
00:43:10,590 --> 00:43:13,040
we've<font color="#E5E5E5"> been building</font>

1005
00:43:23,000 --> 00:43:28,550
so once again<font color="#E5E5E5"> we can't we can't modify</font>

1006
00:43:26,540 --> 00:43:30,740
it even though we're<font color="#E5E5E5"> route let's go over</font>

1007
00:43:28,550 --> 00:43:33,430
here to<font color="#CCCCCC"> where</font><font color="#E5E5E5"> we're not route</font><font color="#CCCCCC"> we'll run</font>

1008
00:43:30,740 --> 00:43:35,180
our exploit and we get a root shell

1009
00:43:33,430 --> 00:43:37,069
<font color="#E5E5E5">essentially what happened to</font><font color="#CCCCCC"> us we</font>

1010
00:43:35,180 --> 00:43:41,450
sprayed our memory<font color="#E5E5E5"> set up the</font><font color="#CCCCCC"> rock</font>

1011
00:43:37,070 --> 00:43:43,430
gadgets<font color="#CCCCCC"> so that the spray memory points</font>

1012
00:43:41,450 --> 00:43:46,430
<font color="#E5E5E5">into the pointer to our rock gadgets</font>

1013
00:43:43,430 --> 00:43:48,140
well we triggered the vulnerability with

1014
00:43:46,430 --> 00:43:50,180
a<font color="#E5E5E5"> hard-coded index which caused it</font><font color="#CCCCCC"> to</font>

1015
00:43:48,140 --> 00:43:53,359
wrap around past the end of memory back

1016
00:43:50,180 --> 00:43:56,029
into our sprayed memory<font color="#CCCCCC"> then it would</font>

1017
00:43:53,360 --> 00:43:58,210
call it D references that D references

1018
00:43:56,030 --> 00:44:01,220
again to the pointer to our<font color="#E5E5E5"> op gadgets</font>

1019
00:43:58,210 --> 00:44:03,920
runs each of them then we<font color="#E5E5E5"> call</font><font color="#CCCCCC"> that</font>

1020
00:44:01,220 --> 00:44:06,020
thread exception return<font color="#E5E5E5"> function which</font>

1021
00:44:03,920 --> 00:44:07,760
returns back<font color="#E5E5E5"> to user land after</font><font color="#CCCCCC"> it our</font>

1022
00:44:06,020 --> 00:44:10,790
<font color="#CCCCCC">wrap chain</font><font color="#E5E5E5"> is copied the kernel</font><font color="#CCCCCC"> task</font>

1023
00:44:07,760 --> 00:44:13,100
pointer<font color="#E5E5E5"> into that real host array we use</font>

1024
00:44:10,790 --> 00:44:14,750
the set<font color="#CCCCCC"> UID to become</font><font color="#E5E5E5"> root after</font><font color="#CCCCCC"> our</font>

1025
00:44:13,100 --> 00:44:18,319
wrap chain fixed our<font color="#E5E5E5"> credentials to be</font>

1026
00:44:14,750 --> 00:44:20,240
<font color="#CCCCCC">zero and then we called the API to get</font>

1027
00:44:18,320 --> 00:44:21,950
that kernel task pointer back and we

1028
00:44:20,240 --> 00:44:25,040
used it to<font color="#E5E5E5"> modify the system integrity</font>

1029
00:44:21,950 --> 00:44:27,049
protections<font color="#CCCCCC"> function hooks so that</font>

1030
00:44:25,040 --> 00:44:29,330
they're all<font color="#CCCCCC"> zero and then we just</font><font color="#E5E5E5"> launch</font>

1031
00:44:27,050 --> 00:44:33,290
a root shell<font color="#CCCCCC"> and now you can see I'm</font>

1032
00:44:29,330 --> 00:44:37,150
<font color="#CCCCCC">root and if I want to change the bin</font>

1033
00:44:33,290 --> 00:44:39,140
directory<font color="#E5E5E5"> I can just however I want</font>

1034
00:44:37,150 --> 00:44:40,580
although<font color="#E5E5E5"> those function pointers are no</font>

1035
00:44:39,140 --> 00:44:42,500
longer<font color="#E5E5E5"> called so I'm essentially allowed</font>

1036
00:44:40,580 --> 00:44:45,970
to do whatever I want without system

1037
00:44:42,500 --> 00:44:45,970
<font color="#E5E5E5">integrity protection stopping me</font>

1038
00:44:52,900 --> 00:44:57,940
so and that's kind<font color="#CCCCCC"> of conclusion let's</font>

1039
00:44:55,869 --> 00:45:00,760
hope that was helpful if you go to try

1040
00:44:57,940 --> 00:45:03,040
and exploit the<font color="#CCCCCC"> Mac OS</font><font color="#E5E5E5"> kernel I'll be</font>

1041
00:45:00,760 --> 00:45:06,880
<font color="#E5E5E5">pushing all the materials for this talk</font>

1042
00:45:03,040 --> 00:45:08,650
to that URL<font color="#CCCCCC"> later today and that's</font><font color="#E5E5E5"> my</font>

1043
00:45:06,880 --> 00:45:14,500
contact info if you have any questions

1044
00:45:08,650 --> 00:45:21,510
<font color="#E5E5E5">afterwards there's any questions now I</font>

1045
00:45:14,500 --> 00:45:21,510
can take<font color="#E5E5E5"> them or we can go to</font><font color="#CCCCCC"> lunch yes</font>

1046
00:45:36,900 --> 00:45:44,849
it's real hard<font color="#CCCCCC"> to because essentially</font>

1047
00:45:43,230 --> 00:45:47,790
all<font color="#E5E5E5"> those tools are going to run at the</font>

1048
00:45:44,849 --> 00:45:48,780
kernel level<font color="#CCCCCC"> and you are also</font><font color="#E5E5E5"> running at</font>

1049
00:45:47,790 --> 00:45:51,990
the kernel<font color="#E5E5E5"> level after you've</font>

1050
00:45:48,780 --> 00:45:53,730
<font color="#CCCCCC">successfully exploited</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> one of</font>

1051
00:45:51,990 --> 00:45:56,368
<font color="#E5E5E5">the more effective things that</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> be</font>

1052
00:45:53,730 --> 00:45:59,190
<font color="#E5E5E5">done about this</font><font color="#CCCCCC"> is sandboxing and so</font><font color="#E5E5E5"> I</font>

1053
00:45:56,369 --> 00:46:01,200
<font color="#E5E5E5">mentioned how kernel exploits are kind</font>

1054
00:45:59,190 --> 00:46:02,640
of<font color="#E5E5E5"> a way around the sandbox but in some</font>

1055
00:46:01,200 --> 00:46:05,609
cases you're not<font color="#E5E5E5"> actually allowed</font><font color="#CCCCCC"> to</font>

1056
00:46:02,640 --> 00:46:08,279
call various api's to the kernel<font color="#CCCCCC"> and so</font>

1057
00:46:05,609 --> 00:46:10,259
that<font color="#E5E5E5"> actually can</font><font color="#CCCCCC"> be a way</font><font color="#E5E5E5"> to lower the</font>

1058
00:46:08,280 --> 00:46:13,619
attack<font color="#CCCCCC"> surface</font><font color="#E5E5E5"> if you want to stop these</font>

1059
00:46:10,260 --> 00:46:15,420
it's really<font color="#CCCCCC"> more useful to stop the to</font>

1060
00:46:13,619 --> 00:46:17,640
not expose that attack surface than it

1061
00:46:15,420 --> 00:46:18,930
is to try<font color="#E5E5E5"> and catch</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> after they're</font>

1062
00:46:17,640 --> 00:46:20,848
running their own<font color="#E5E5E5"> code at kernel level</font>

1063
00:46:18,930 --> 00:46:23,040
since if you're running<font color="#E5E5E5"> at the same</font>

1064
00:46:20,849 --> 00:46:25,440
<font color="#E5E5E5">protection levels what that Apple</font>

1065
00:46:23,040 --> 00:46:27,300
<font color="#CCCCCC">actually does with iOS</font><font color="#E5E5E5"> is they have</font>

1066
00:46:25,440 --> 00:46:30,630
higher levels of it<font color="#E5E5E5"> with the secure</font>

1067
00:46:27,300 --> 00:46:32,250
element<font color="#E5E5E5"> and so the secure element is one</font>

1068
00:46:30,630 --> 00:46:34,380
<font color="#CCCCCC">level above the kernel and so it can</font>

1069
00:46:32,250 --> 00:46:37,200
actually<font color="#CCCCCC"> look down and try and catch</font>

1070
00:46:34,380 --> 00:46:39,450
various things and<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that doesn't</font>

1071
00:46:37,200 --> 00:46:42,319
<font color="#E5E5E5">really exist</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> Mac OS which</font><font color="#CCCCCC"> is why it's</font>

1072
00:46:39,450 --> 00:46:42,319
kind<font color="#E5E5E5"> of an easier target</font>

1073
00:46:53,230 --> 00:46:58,930
so that specifically does not in fact<font color="#E5E5E5"> if</font>

1074
00:46:57,430 --> 00:47:03,370
I go<font color="#E5E5E5"> back there</font><font color="#CCCCCC"> you can actually</font><font color="#E5E5E5"> see it</font>

1075
00:46:58,930 --> 00:47:04,660
still it it actually<font color="#E5E5E5"> still thinks system</font>

1076
00:47:03,370 --> 00:47:06,190
integrity protections enabled<font color="#CCCCCC"> because</font>

1077
00:47:04,660 --> 00:47:09,190
all I did<font color="#E5E5E5"> was neuter it</font>

1078
00:47:06,190 --> 00:47:11,590
however the CSR utils will now actually

1079
00:47:09,190 --> 00:47:13,720
work to disable<font color="#E5E5E5"> it or are changing the</font>

1080
00:47:11,590 --> 00:47:17,620
way you<font color="#CCCCCC"> disable is by</font><font color="#E5E5E5"> changing the</font><font color="#CCCCCC"> NVRAM</font>

1081
00:47:13,720 --> 00:47:19,600
<font color="#E5E5E5">and i and i nuked the function pointers</font>

1082
00:47:17,620 --> 00:47:22,089
<font color="#CCCCCC">that prevented you from changing nvram</font>

1083
00:47:19,600 --> 00:47:24,670
<font color="#CCCCCC">so now I</font><font color="#E5E5E5"> can turn it off</font><font color="#CCCCCC"> if I wanted to</font>

1084
00:47:22,090 --> 00:47:25,840
but these this specific exploit doesn't

1085
00:47:24,670 --> 00:47:27,310
do that because<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> trying to</font>

1086
00:47:25,840 --> 00:47:29,710
<font color="#E5E5E5">show off how you can change kernel</font>

1087
00:47:27,310 --> 00:47:31,029
memory<font color="#CCCCCC"> but now</font><font color="#E5E5E5"> you're outside of sip and</font>

1088
00:47:29,710 --> 00:47:33,550
once you're<font color="#CCCCCC"> outside of</font><font color="#E5E5E5"> sip you can make</font>

1089
00:47:31,030 --> 00:47:35,710
any changes<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> nvram</font><font color="#E5E5E5"> it's</font>

1090
00:47:33,550 --> 00:47:37,900
essentially the way you turn it off<font color="#E5E5E5"> and</font>

1091
00:47:35,710 --> 00:47:39,900
<font color="#CCCCCC">without an exploit is you boot up into</font>

1092
00:47:37,900 --> 00:47:42,340
recovery<font color="#E5E5E5"> mode</font><font color="#CCCCCC"> where sip isn't enabled</font>

1093
00:47:39,900 --> 00:47:45,150
<font color="#E5E5E5">except now sip is just not enabled</font>

1094
00:47:42,340 --> 00:47:45,150
<font color="#CCCCCC">because of my exploit</font>

1095
00:47:52,970 --> 00:47:55,000
Oh

