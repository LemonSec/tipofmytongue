1
00:00:16,740 --> 00:00:20,340
<font color="#E5E5E5">giving hand for our next week</font>

2
00:00:24,890 --> 00:00:31,439
thank you<font color="#CCCCCC"> hello my name is max Harley</font>

3
00:00:29,189 --> 00:00:35,400
<font color="#E5E5E5">I'm gonna be talking about the</font><font color="#CCCCCC"> art of</font>

4
00:00:31,439 --> 00:00:40,440
<font color="#E5E5E5">shell coding</font><font color="#CCCCCC"> shell coding is truly a</font>

5
00:00:35,400 --> 00:00:43,110
dying art<font color="#E5E5E5"> people these days sort of tend</font>

6
00:00:40,440 --> 00:00:45,599
to<font color="#E5E5E5"> gravitate newer people that come to</font>

7
00:00:43,110 --> 00:00:47,670
security<font color="#E5E5E5"> kind of gravitate towards web</font>

8
00:00:45,600 --> 00:00:50,309
exploits<font color="#E5E5E5"> because it's much more</font>

9
00:00:47,670 --> 00:00:54,000
<font color="#E5E5E5">approachable than like running through</font>

10
00:00:50,309 --> 00:00:55,789
binaries<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of scary stuff so most</font>

11
00:00:54,000 --> 00:00:58,879
<font color="#CCCCCC">people</font><font color="#E5E5E5"> don't really get to experience</font>

12
00:00:55,789 --> 00:01:00,960
<font color="#CCCCCC">shell coding or binary exploitation so</font>

13
00:00:58,879 --> 00:01:03,539
in this talk I'm<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to try to prove</font>

14
00:01:00,960 --> 00:01:07,259
<font color="#CCCCCC">that shell coding</font><font color="#E5E5E5"> isn't as hard as</font>

15
00:01:03,539 --> 00:01:10,229
<font color="#E5E5E5">people make it make</font><font color="#CCCCCC"> it out to be</font><font color="#E5E5E5"> and</font>

16
00:01:07,259 --> 00:01:12,840
it's also still<font color="#E5E5E5"> extremely useful it's a</font>

17
00:01:10,229 --> 00:01:13,619
little bit about myself<font color="#CCCCCC"> I really enjoy</font>

18
00:01:12,840 --> 00:01:15,410
<font color="#E5E5E5">CTF</font>

19
00:01:13,619 --> 00:01:18,570
that's actually how I<font color="#CCCCCC"> got on this topic</font>

20
00:01:15,410 --> 00:01:20,640
<font color="#CCCCCC">that also means I don't</font><font color="#E5E5E5"> do this for a</font>

21
00:01:18,570 --> 00:01:23,369
<font color="#E5E5E5">living</font><font color="#CCCCCC"> so don't take anything I say</font><font color="#E5E5E5"> as</font>

22
00:01:20,640 --> 00:01:28,530
fact<font color="#E5E5E5"> but</font><font color="#CCCCCC"> sort of</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> it to formulate</font>

23
00:01:23,369 --> 00:01:31,380
your own strategies for shell coding so

24
00:01:28,530 --> 00:01:33,420
if you want to follow<font color="#CCCCCC"> along you can go</font>

25
00:01:31,380 --> 00:01:35,580
to a presentation<font color="#E5E5E5"> max</font><font color="#CCCCCC"> HIO</font>

26
00:01:33,420 --> 00:01:38,310
/l code you can bring it up it has<font color="#CCCCCC"> a</font>

27
00:01:35,580 --> 00:01:40,110
really good<font color="#E5E5E5"> mobile support this is</font>

28
00:01:38,310 --> 00:01:43,560
actually the<font color="#E5E5E5"> master presentation so if</font>

29
00:01:40,110 --> 00:01:45,869
<font color="#E5E5E5">you it'll like follow me throughout this</font>

30
00:01:43,560 --> 00:01:49,500
presentation<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of cool if you want to</font>

31
00:01:45,869 --> 00:01:53,310
do that so in this presentation we're

32
00:01:49,500 --> 00:01:56,310
gonna learn how<font color="#CCCCCC"> this string of</font><font color="#E5E5E5"> totally</font>

33
00:01:53,310 --> 00:01:59,909
random looking characters becomes this

34
00:01:56,310 --> 00:02:02,430
<font color="#E5E5E5">and as a security researcher we really</font>

35
00:01:59,909 --> 00:02:04,110
like this<font color="#E5E5E5"> because this is this means we</font>

36
00:02:02,430 --> 00:02:06,240
<font color="#CCCCCC">have a shell we get a root shell</font><font color="#E5E5E5"> we can</font>

37
00:02:04,110 --> 00:02:09,570
<font color="#E5E5E5">run whatever we want and that's pretty</font>

38
00:02:06,240 --> 00:02:11,670
<font color="#CCCCCC">awesome so a quick question is anyone</font>

39
00:02:09,570 --> 00:02:14,220
here a<font color="#CCCCCC"> C developer or like part-time C</font>

40
00:02:11,670 --> 00:02:17,910
developer so we have one<font color="#CCCCCC"> so</font><font color="#E5E5E5"> more than I</font>

41
00:02:14,220 --> 00:02:24,239
thought<font color="#E5E5E5"> there would be - and does anyone</font>

42
00:02:17,910 --> 00:02:25,880
<font color="#E5E5E5">like CTFs everyone yay</font><font color="#CCCCCC"> so these are the</font>

43
00:02:24,239 --> 00:02:30,180
groups<font color="#CCCCCC"> that this is</font><font color="#E5E5E5"> really going to be</font>

44
00:02:25,880 --> 00:02:31,859
extremely<font color="#E5E5E5"> applicable to so for</font>

45
00:02:30,180 --> 00:02:33,700
<font color="#E5E5E5">developers obviously teaching like</font>

46
00:02:31,859 --> 00:02:36,910
secure programming practices

47
00:02:33,700 --> 00:02:39,250
but<font color="#E5E5E5"> for CTFs if you look at all the</font>

48
00:02:36,910 --> 00:02:40,569
<font color="#E5E5E5">DEFCON qualifiers there's always at</font>

49
00:02:39,250 --> 00:02:43,989
least<font color="#E5E5E5"> a little bit of</font><font color="#CCCCCC"> shellcode that's</font>

50
00:02:40,569 --> 00:02:45,670
required in<font color="#E5E5E5"> every problem so kind of a</font>

51
00:02:43,989 --> 00:02:48,180
cool<font color="#CCCCCC"> thing I keep throwing this term</font>

52
00:02:45,670 --> 00:02:50,380
around<font color="#CCCCCC"> but what is shell coding really</font>

53
00:02:48,180 --> 00:02:52,690
very generally<font color="#CCCCCC"> and very typically</font>

54
00:02:50,380 --> 00:02:54,609
referred<font color="#CCCCCC"> to shell coding as</font><font color="#E5E5E5"> assembly</font>

55
00:02:52,690 --> 00:02:57,160
instructions that allow<font color="#CCCCCC"> us to run</font>

56
00:02:54,610 --> 00:03:02,769
arbitrary<font color="#E5E5E5"> code typically</font><font color="#CCCCCC"> in like a C or</font>

57
00:02:57,160 --> 00:03:06,250
C++ program so things built in C++<font color="#E5E5E5"> are</font>

58
00:03:02,769 --> 00:03:10,120
like<font color="#E5E5E5"> servers even games a lot</font><font color="#CCCCCC"> of time or</font>

59
00:03:06,250 --> 00:03:12,670
built in C or<font color="#CCCCCC"> C++ so that's really where</font>

60
00:03:10,120 --> 00:03:15,430
<font color="#E5E5E5">you're gonna be able to</font><font color="#CCCCCC"> use this</font><font color="#E5E5E5"> why is</font>

61
00:03:12,670 --> 00:03:18,010
shell coding relevant this is kind of a

62
00:03:15,430 --> 00:03:20,620
big one<font color="#E5E5E5"> because a lot of the times we</font>

63
00:03:18,010 --> 00:03:24,910
look at web exploits<font color="#CCCCCC"> and we kind of</font>

64
00:03:20,620 --> 00:03:26,950
disregard binaries<font color="#E5E5E5"> but dirty cow came</font>

65
00:03:24,910 --> 00:03:30,760
out recently<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> that was really</font>

66
00:03:26,950 --> 00:03:33,548
topical<font color="#E5E5E5"> and it actually</font><font color="#CCCCCC"> this specific</font>

67
00:03:30,760 --> 00:03:36,399
version that<font color="#E5E5E5"> I have linked here uses</font>

68
00:03:33,549 --> 00:03:39,810
shell coding to generate a root<font color="#CCCCCC"> shell on</font>

69
00:03:36,400 --> 00:03:43,959
whatever device<font color="#E5E5E5"> you run it on which is</font><font color="#CCCCCC"> a</font>

70
00:03:39,810 --> 00:03:45,730
really<font color="#CCCCCC"> bad so it</font><font color="#E5E5E5"> technically it uses</font>

71
00:03:43,959 --> 00:03:47,709
this tool<font color="#E5E5E5"> called MSF</font><font color="#CCCCCC"> venom to generate</font>

72
00:03:45,730 --> 00:03:50,980
the payload<font color="#E5E5E5"> but it's still shell code</font>

73
00:03:47,709 --> 00:03:53,769
and it's still cool<font color="#CCCCCC"> if you look at any</font>

74
00:03:50,980 --> 00:03:57,399
of<font color="#E5E5E5"> the Metasploit modules they all to</font>

75
00:03:53,769 --> 00:03:59,410
get<font color="#E5E5E5"> there she'll use shell coding</font><font color="#CCCCCC"> and</font>

76
00:03:57,400 --> 00:04:01,900
you also get like<font color="#E5E5E5"> hacker style points</font>

77
00:03:59,410 --> 00:04:04,810
because shell coding is kind of crazy

78
00:04:01,900 --> 00:04:10,030
kind of<font color="#E5E5E5"> cool so definitely hacker points</font>

79
00:04:04,810 --> 00:04:11,350
<font color="#E5E5E5">you get those so we need to learn a</font>

80
00:04:10,030 --> 00:04:13,959
couple<font color="#CCCCCC"> of things before we start</font>

81
00:04:11,350 --> 00:04:16,000
actually shell coding<font color="#E5E5E5"> I'm not going</font><font color="#CCCCCC"> to</font>

82
00:04:13,959 --> 00:04:20,410
spend too much time<font color="#E5E5E5"> on this but I'm kind</font>

83
00:04:16,000 --> 00:04:23,860
<font color="#E5E5E5">of gonna overview it the first thing</font>

84
00:04:20,410 --> 00:04:25,780
very seemingly<font color="#E5E5E5"> obvious but it gives a</font>

85
00:04:23,860 --> 00:04:28,419
<font color="#E5E5E5">good perspective on what we're gonna be</font>

86
00:04:25,780 --> 00:04:31,469
talking<font color="#CCCCCC"> about we have a couple</font>

87
00:04:28,419 --> 00:04:34,599
<font color="#CCCCCC">definitions vulnerability and exploit</font>

88
00:04:31,470 --> 00:04:36,310
vulnerability<font color="#E5E5E5"> I'm just going to</font><font color="#CCCCCC"> define a</font>

89
00:04:34,600 --> 00:04:39,370
<font color="#E5E5E5">flaw in</font><font color="#CCCCCC"> the system that</font><font color="#E5E5E5"> leaves it open</font>

90
00:04:36,310 --> 00:04:41,260
<font color="#E5E5E5">to attack and an exploit an attack on a</font>

91
00:04:39,370 --> 00:04:42,580
computer system<font color="#CCCCCC"> especially one that</font>

92
00:04:41,260 --> 00:04:46,479
takes advantage<font color="#E5E5E5"> of a particular</font>

93
00:04:42,580 --> 00:04:47,169
<font color="#CCCCCC">vulnerability so we see exploit</font><font color="#E5E5E5"> takes</font>

94
00:04:46,479 --> 00:04:50,199
advantage<font color="#E5E5E5"> of</font>

95
00:04:47,169 --> 00:04:52,258
ability<font color="#E5E5E5"> to do malicious stuff</font><font color="#CCCCCC"> so for</font>

96
00:04:50,199 --> 00:04:54,039
people<font color="#E5E5E5"> who</font><font color="#CCCCCC"> do web</font><font color="#E5E5E5"> app</font><font color="#CCCCCC"> pentesting</font>

97
00:04:52,259 --> 00:04:56,039
cross-site scripting is your

98
00:04:54,039 --> 00:05:00,639
vulnerability and then<font color="#E5E5E5"> session hijacking</font>

99
00:04:56,039 --> 00:05:03,610
<font color="#E5E5E5">is your exploit very similarly in binary</font>

100
00:05:00,639 --> 00:05:05,169
exploitation our buffer overflow<font color="#CCCCCC"> which</font>

101
00:05:03,610 --> 00:05:09,849
we'll talk about<font color="#E5E5E5"> in a second is our</font>

102
00:05:05,169 --> 00:05:12,520
vulnerability and getting a shell<font color="#CCCCCC"> some</font>

103
00:05:09,849 --> 00:05:16,330
sort of shell through shell coding is

104
00:05:12,520 --> 00:05:20,589
our exploit so buffer overflow<font color="#CCCCCC"> in ten</font>

105
00:05:16,330 --> 00:05:22,120
<font color="#CCCCCC">minutes this is a preface kind</font><font color="#E5E5E5"> of what</font>

106
00:05:20,589 --> 00:05:25,229
you have to know<font color="#E5E5E5"> beforehand</font><font color="#CCCCCC"> I want to</font>

107
00:05:22,120 --> 00:05:27,879
try to keep<font color="#E5E5E5"> it down</font><font color="#CCCCCC"> to ten</font><font color="#E5E5E5"> minutes</font>

108
00:05:25,229 --> 00:05:31,180
but buffer overflow is<font color="#E5E5E5"> extremely</font>

109
00:05:27,879 --> 00:05:33,999
practical<font color="#CCCCCC"> we see it's good for training</font>

110
00:05:31,180 --> 00:05:37,029
people<font color="#E5E5E5"> good for tutorials and stuff</font><font color="#CCCCCC"> and</font>

111
00:05:33,999 --> 00:05:39,460
it's also extremely<font color="#E5E5E5"> practical</font><font color="#CCCCCC"> so a lot</font>

112
00:05:37,029 --> 00:05:43,479
<font color="#E5E5E5">of newer developers especially</font><font color="#CCCCCC"> once your</font>

113
00:05:39,460 --> 00:05:47,979
programming and<font color="#CCCCCC"> see tend</font><font color="#E5E5E5"> to kind of fall</font>

114
00:05:43,479 --> 00:05:50,949
into<font color="#E5E5E5"> this trap of allowing buffer</font>

115
00:05:47,979 --> 00:05:53,229
overflow vulnerability to be used<font color="#E5E5E5"> so</font>

116
00:05:50,949 --> 00:05:56,229
here we go first thing<font color="#E5E5E5"> we need to know</font>

117
00:05:53,229 --> 00:05:57,699
<font color="#E5E5E5">assembly</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the lowest</font><font color="#CCCCCC"> level</font>

118
00:05:56,229 --> 00:06:02,349
language that can reasonably be

119
00:05:57,699 --> 00:06:04,960
<font color="#CCCCCC">programmed in</font><font color="#E5E5E5"> so actually C is converted</font>

120
00:06:02,349 --> 00:06:08,080
into assembly<font color="#E5E5E5"> so</font><font color="#CCCCCC"> IB program c code gets</font>

121
00:06:04,960 --> 00:06:10,539
converted<font color="#E5E5E5"> to assembly we have these</font>

122
00:06:08,080 --> 00:06:13,149
things called registers so these are the

123
00:06:10,539 --> 00:06:18,039
things that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> highlighted</font><font color="#E5E5E5"> in red EAX</font>

124
00:06:13,149 --> 00:06:21,610
EBX<font color="#E5E5E5"> there's an e CX</font><font color="#CCCCCC"> e SP there's a ton</font>

125
00:06:18,039 --> 00:06:24,580
of different<font color="#E5E5E5"> names for these and we have</font>

126
00:06:21,610 --> 00:06:27,669
a couple<font color="#CCCCCC"> simple commands MOV moves data</font>

127
00:06:24,580 --> 00:06:30,849
<font color="#E5E5E5">so on the first line we</font><font color="#CCCCCC"> move the number</font>

128
00:06:27,669 --> 00:06:35,198
<font color="#CCCCCC">five into EAX second line we move 10</font>

129
00:06:30,849 --> 00:06:38,020
into<font color="#CCCCCC"> eb x</font><font color="#E5E5E5"> the third line just like in</font>

130
00:06:35,199 --> 00:06:40,300
whatever language is your favorite the

131
00:06:38,020 --> 00:06:44,469
plus operator will add two<font color="#CCCCCC"> things in</font>

132
00:06:40,300 --> 00:06:47,439
this<font color="#E5E5E5"> case add adds EAX and EBX and</font>

133
00:06:44,469 --> 00:06:53,080
actually stores it into<font color="#E5E5E5"> a X so we get 15</font>

134
00:06:47,439 --> 00:06:55,750
<font color="#CCCCCC">so we add EAX EBX 5 plus 10 15 and then</font>

135
00:06:53,080 --> 00:06:57,490
we print

136
00:06:55,750 --> 00:07:02,470
one specific<font color="#CCCCCC"> register I want to talk</font>

137
00:06:57,490 --> 00:07:05,020
<font color="#CCCCCC">about is</font><font color="#E5E5E5"> a IP e IP is our instruction</font>

138
00:07:02,470 --> 00:07:07,120
pointer this one is really<font color="#CCCCCC"> necessary to</font>

139
00:07:05,020 --> 00:07:13,030
understand how the buffer<font color="#CCCCCC"> overflow</font>

140
00:07:07,120 --> 00:07:15,280
vulnerability works<font color="#CCCCCC"> VIP will holds</font>

141
00:07:13,030 --> 00:07:17,229
memory locations<font color="#E5E5E5"> and it also tells the</font>

142
00:07:15,280 --> 00:07:20,580
<font color="#E5E5E5">program where to go next</font><font color="#CCCCCC"> I'm going to</font>

143
00:07:17,230 --> 00:07:33,460
<font color="#CCCCCC">get</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> a kind of a demo to show</font><font color="#E5E5E5"> you</font>

144
00:07:20,580 --> 00:07:39,549
<font color="#E5E5E5">help you understand this so I have this</font>

145
00:07:33,460 --> 00:07:41,919
C program<font color="#E5E5E5"> it so we start off in main we</font>

146
00:07:39,550 --> 00:07:44,380
create an integer called<font color="#CCCCCC"> 5 or an integer</font>

147
00:07:41,920 --> 00:07:47,050
<font color="#E5E5E5">called a set it equal to 5 we have an</font>

148
00:07:44,380 --> 00:07:50,140
integer called<font color="#E5E5E5"> B 7 equal to 9 we say a</font>

149
00:07:47,050 --> 00:07:53,260
is<font color="#CCCCCC"> equal</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> a plus</font><font color="#E5E5E5"> B we call a function</font>

150
00:07:50,140 --> 00:07:57,250
and then we print so<font color="#CCCCCC"> we</font><font color="#E5E5E5"> print hello</font>

151
00:07:53,260 --> 00:08:01,570
world and then a new line and<font color="#E5E5E5"> then 14</font>

152
00:07:57,250 --> 00:08:06,550
because<font color="#E5E5E5"> a is equal to 5 plus</font><font color="#CCCCCC"> 9 and</font>

153
00:08:01,570 --> 00:08:08,860
<font color="#E5E5E5">that's it so we'll compile this run our</font>

154
00:08:06,550 --> 00:08:14,830
program and we see we<font color="#E5E5E5"> get hello world</font>

155
00:08:08,860 --> 00:08:21,280
<font color="#CCCCCC">and 14</font><font color="#E5E5E5"> I'm in at 14 so we're going</font><font color="#CCCCCC"> to</font>

156
00:08:14,830 --> 00:08:23,650
<font color="#E5E5E5">use a tool called</font><font color="#CCCCCC"> objdump what objdump</font>

157
00:08:21,280 --> 00:08:25,630
will do is take our<font color="#E5E5E5"> C program</font><font color="#CCCCCC"> and</font>

158
00:08:23,650 --> 00:08:28,539
convert it to assembly<font color="#E5E5E5"> this is going to</font>

159
00:08:25,630 --> 00:08:36,820
<font color="#E5E5E5">help us understand how</font><font color="#CCCCCC"> C kind of</font>

160
00:08:28,540 --> 00:08:38,920
converts to assembly so you<font color="#E5E5E5"> don't need</font>

161
00:08:36,820 --> 00:08:41,680
<font color="#E5E5E5">to understand</font><font color="#CCCCCC"> all of this</font><font color="#E5E5E5"> right now but</font>

162
00:08:38,919 --> 00:08:43,870
<font color="#E5E5E5">we can see some some things that</font><font color="#CCCCCC"> look</font>

163
00:08:41,679 --> 00:08:45,819
familiar<font color="#CCCCCC"> like</font><font color="#E5E5E5"> this emit these numbers</font>

164
00:08:43,870 --> 00:08:50,020
over<font color="#CCCCCC"> here</font><font color="#E5E5E5"> 5</font><font color="#CCCCCC"> and 9 actually</font><font color="#E5E5E5"> may be easier</font>

165
00:08:45,820 --> 00:08:53,110
with<font color="#CCCCCC"> some house you</font><font color="#E5E5E5"> can see</font><font color="#CCCCCC"> 5 and 9 over</font>

166
00:08:50,020 --> 00:08:57,040
here getting placed<font color="#CCCCCC"> into areas we see</font>

167
00:08:53,110 --> 00:09:01,390
<font color="#CCCCCC">add</font><font color="#E5E5E5"> we're adding two things we call new</font>

168
00:08:57,040 --> 00:09:04,270
function like we saw<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> C program so</font>

169
00:09:01,390 --> 00:09:05,699
it calls blah blah blah FB<font color="#E5E5E5"> if we scroll</font>

170
00:09:04,270 --> 00:09:10,598
up

171
00:09:05,699 --> 00:09:13,299
we can see this<font color="#E5E5E5"> function of blah blah</font>

172
00:09:10,599 --> 00:09:16,599
blah FB<font color="#E5E5E5"> and all this does</font><font color="#CCCCCC"> is print</font>

173
00:09:13,299 --> 00:09:19,259
<font color="#CCCCCC">something</font><font color="#E5E5E5"> the rest</font><font color="#CCCCCC"> of it is kind of you</font>

174
00:09:16,599 --> 00:09:22,139
<font color="#CCCCCC">know unnecessary so the first column</font>

175
00:09:19,259 --> 00:09:24,579
over<font color="#CCCCCC"> here on the side these are</font><font color="#E5E5E5"> the</font>

176
00:09:22,139 --> 00:09:29,369
locations<font color="#CCCCCC"> so these are the</font><font color="#E5E5E5"> locations of</font>

177
00:09:24,579 --> 00:09:32,498
<font color="#CCCCCC">where we are the second column is the</font>

178
00:09:29,369 --> 00:09:34,329
processor what's called<font color="#E5E5E5"> op codes</font><font color="#CCCCCC"> and</font>

179
00:09:32,499 --> 00:09:37,869
this<font color="#E5E5E5"> is what your processor</font><font color="#CCCCCC"> actually</font>

180
00:09:34,329 --> 00:09:40,508
reads<font color="#E5E5E5"> these are the values that your</font>

181
00:09:37,869 --> 00:09:43,089
processor<font color="#CCCCCC"> read and then this</font><font color="#E5E5E5"> last column</font>

182
00:09:40,509 --> 00:09:48,220
just converts the op codes<font color="#E5E5E5"> into sort of</font>

183
00:09:43,089 --> 00:09:51,089
a more human readable<font color="#E5E5E5"> something so that</font>

184
00:09:48,220 --> 00:09:51,089
<font color="#E5E5E5">we can understand it</font>

185
00:09:55,270 --> 00:10:01,449
so next<font color="#E5E5E5"> so how</font><font color="#CCCCCC"> is data stored in</font>

186
00:09:58,029 --> 00:10:04,899
assembly<font color="#CCCCCC"> so we need to</font><font color="#E5E5E5"> think about how</font>

187
00:10:01,450 --> 00:10:07,600
we can<font color="#E5E5E5"> interpret</font><font color="#CCCCCC"> this how sort of</font><font color="#E5E5E5"> some</font>

188
00:10:04,899 --> 00:10:11,080
sort of compiler will convert our C code

189
00:10:07,600 --> 00:10:13,209
into assembly<font color="#CCCCCC"> and it actually so we</font>

190
00:10:11,080 --> 00:10:14,800
start off<font color="#E5E5E5"> we arrive at main so we need</font>

191
00:10:13,209 --> 00:10:16,899
to do something<font color="#CCCCCC"> with main we create an</font>

192
00:10:14,800 --> 00:10:21,099
integer and<font color="#E5E5E5"> then we</font><font color="#CCCCCC"> create an</font><font color="#E5E5E5"> another</font>

193
00:10:16,899 --> 00:10:22,930
integer and then<font color="#E5E5E5"> we exit so in assembly</font>

194
00:10:21,100 --> 00:10:26,529
there's actually an internal stack

195
00:10:22,930 --> 00:10:29,140
that's that's used<font color="#E5E5E5"> and kind of created</font>

196
00:10:26,529 --> 00:10:32,110
<font color="#E5E5E5">and we push and pop things from the</font>

197
00:10:29,140 --> 00:10:36,880
stack to tell us where we<font color="#CCCCCC"> are what kind</font>

198
00:10:32,110 --> 00:10:41,649
of values are being inserted so in<font color="#E5E5E5"> this</font>

199
00:10:36,880 --> 00:10:48,130
piece of<font color="#E5E5E5"> code this is how the stack</font>

200
00:10:41,649 --> 00:10:50,830
<font color="#E5E5E5">would look so we first push the main</font>

201
00:10:48,130 --> 00:10:53,830
return address at the bottom<font color="#CCCCCC"> of the</font>

202
00:10:50,830 --> 00:10:58,980
stack and<font color="#E5E5E5"> then we push the variable a</font>

203
00:10:53,830 --> 00:11:02,920
then we push the variable B and that's

204
00:10:58,980 --> 00:11:05,620
kind of how it's built<font color="#E5E5E5"> if we see if we</font>

205
00:11:02,920 --> 00:11:07,810
lay the stack out<font color="#CCCCCC"> horizontally</font><font color="#E5E5E5"> we can</font>

206
00:11:05,620 --> 00:11:10,750
see that the start we start off with the

207
00:11:07,810 --> 00:11:12,790
topmost part<font color="#E5E5E5"> and we kind of go on from</font>

208
00:11:10,750 --> 00:11:18,010
there<font color="#E5E5E5"> over a equals four</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> the</font>

209
00:11:12,790 --> 00:11:21,339
<font color="#E5E5E5">return address for me</font><font color="#CCCCCC"> so functions on</font>

210
00:11:18,010 --> 00:11:22,750
the stack<font color="#CCCCCC"> it sort of</font><font color="#E5E5E5"> operates a little</font>

211
00:11:21,339 --> 00:11:27,070
bit differently kind of weird how

212
00:11:22,750 --> 00:11:30,579
functions work so we start off we're in

213
00:11:27,070 --> 00:11:36,339
main we create the return address<font color="#E5E5E5"> we</font>

214
00:11:30,579 --> 00:11:38,279
first pushed the return address<font color="#E5E5E5"> for</font><font color="#CCCCCC"> for</font>

215
00:11:36,339 --> 00:11:41,410
main and<font color="#CCCCCC"> then we create the</font><font color="#E5E5E5"> integer foo</font>

216
00:11:38,279 --> 00:11:46,060
set it equal to<font color="#CCCCCC"> two then we call new</font>

217
00:11:41,410 --> 00:11:47,890
function<font color="#E5E5E5"> when new function is called we</font>

218
00:11:46,060 --> 00:11:52,329
push the return address<font color="#CCCCCC"> on to</font><font color="#E5E5E5"> the stack</font>

219
00:11:47,890 --> 00:11:54,790
<font color="#CCCCCC">so</font><font color="#E5E5E5"> we know where</font><font color="#CCCCCC"> to come back to it</font>

220
00:11:52,329 --> 00:11:56,199
which is<font color="#E5E5E5"> kind of important because if</font><font color="#CCCCCC"> we</font>

221
00:11:54,790 --> 00:11:57,099
didn't know where to<font color="#E5E5E5"> come back to the</font>

222
00:11:56,200 --> 00:12:00,250
<font color="#CCCCCC">program would just kind of keep</font>

223
00:11:57,100 --> 00:12:03,040
executing and<font color="#E5E5E5"> nothing good happens from</font>

224
00:12:00,250 --> 00:12:03,790
<font color="#E5E5E5">that so next we push things</font><font color="#CCCCCC"> onto</font><font color="#E5E5E5"> the</font>

225
00:12:03,040 --> 00:12:07,209
stack

226
00:12:03,790 --> 00:12:10,120
bar and then<font color="#E5E5E5"> the variable name</font>

227
00:12:07,210 --> 00:12:14,230
and then this function<font color="#E5E5E5"> exits so we</font>

228
00:12:10,120 --> 00:12:16,930
<font color="#CCCCCC">return back to the</font><font color="#E5E5E5"> return pointer</font><font color="#CCCCCC"> return</font>

229
00:12:14,230 --> 00:12:20,590
<font color="#E5E5E5">come back and there's things</font><font color="#CCCCCC"> that were</font>

230
00:12:16,930 --> 00:12:26,439
<font color="#CCCCCC">on the stack got pushed off</font><font color="#E5E5E5"> because we</font>

231
00:12:20,590 --> 00:12:29,020
left<font color="#E5E5E5"> this function so that's kind of how</font>

232
00:12:26,440 --> 00:12:31,450
how functions<font color="#E5E5E5"> work on on the stack</font>

233
00:12:29,020 --> 00:12:34,960
that's<font color="#CCCCCC"> an internal</font><font color="#E5E5E5"> staff that assembly</font>

234
00:12:31,450 --> 00:12:38,290
uses so now that<font color="#E5E5E5"> we have sort of that</font>

235
00:12:34,960 --> 00:12:40,540
<font color="#E5E5E5">prerequisite knowledge how do we</font>

236
00:12:38,290 --> 00:12:43,209
actually how do we exploit<font color="#E5E5E5"> this buffer</font>

237
00:12:40,540 --> 00:12:46,150
overflow vulnerability<font color="#CCCCCC"> so if we can</font>

238
00:12:43,210 --> 00:12:51,700
<font color="#E5E5E5">figure out a way</font><font color="#CCCCCC"> to overwrite the return</font>

239
00:12:46,150 --> 00:12:53,920
address and store<font color="#E5E5E5"> figure out where a IP</font>

240
00:12:51,700 --> 00:12:56,530
is going to execute from from<font color="#E5E5E5"> that</font>

241
00:12:53,920 --> 00:13:02,319
return address<font color="#CCCCCC"> we can actually</font><font color="#E5E5E5"> control</font>

242
00:12:56,530 --> 00:13:05,230
the<font color="#CCCCCC"> execution process so for</font><font color="#E5E5E5"> example if</font>

243
00:13:02,320 --> 00:13:10,780
we write more characters into some sort

244
00:13:05,230 --> 00:13:11,470
<font color="#E5E5E5">of buffer so actually I'll get to that</font>

245
00:13:10,780 --> 00:13:16,569
<font color="#E5E5E5">in a second</font>

246
00:13:11,470 --> 00:13:19,690
<font color="#E5E5E5">so here we have source for some program</font>

247
00:13:16,570 --> 00:13:23,650
we made we first create a function

248
00:13:19,690 --> 00:13:30,580
called<font color="#CCCCCC"> a new func we create a buffer</font><font color="#E5E5E5"> and</font>

249
00:13:23,650 --> 00:13:33,040
then we use gets so gets is a function

250
00:13:30,580 --> 00:13:37,180
in<font color="#E5E5E5"> C that</font><font color="#CCCCCC"> allows us to get from</font><font color="#E5E5E5"> standard</font>

251
00:13:33,040 --> 00:13:40,900
input<font color="#CCCCCC"> and then store</font><font color="#E5E5E5"> whatever we get</font>

252
00:13:37,180 --> 00:13:43,510
into a buffer<font color="#CCCCCC"> the</font><font color="#E5E5E5"> only problem with gets</font>

253
00:13:40,900 --> 00:13:45,730
<font color="#E5E5E5">is that it allows</font><font color="#CCCCCC"> us to put in however</font>

254
00:13:43,510 --> 00:13:48,280
<font color="#CCCCCC">many characters we want so it doesn't</font>

255
00:13:45,730 --> 00:13:50,710
have this restriction<font color="#E5E5E5"> of our buffer</font>

256
00:13:48,280 --> 00:13:56,380
<font color="#E5E5E5">being only</font><font color="#CCCCCC"> five characters long</font><font color="#E5E5E5"> we can</font>

257
00:13:50,710 --> 00:14:00,100
put whatever<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> so in this stack we</font>

258
00:13:56,380 --> 00:14:01,230
see that if<font color="#E5E5E5"> we were to input hello into</font>

259
00:14:00,100 --> 00:14:03,700
a standard input

260
00:14:01,230 --> 00:14:06,520
we would have a stack that looks like

261
00:14:03,700 --> 00:14:12,330
this<font color="#CCCCCC"> we first pushed the return address</font>

262
00:14:06,520 --> 00:14:16,540
<font color="#E5E5E5">for main that's this one zero down here</font>

263
00:14:12,330 --> 00:14:18,610
<font color="#E5E5E5">that's this one and then we go</font><font color="#CCCCCC"> to the</font>

264
00:14:16,540 --> 00:14:21,939
new func<font color="#E5E5E5"> we see</font>

265
00:14:18,610 --> 00:14:24,089
<font color="#CCCCCC">to restore</font><font color="#E5E5E5"> the return address for new</font>

266
00:14:21,940 --> 00:14:27,970
funk<font color="#E5E5E5"> and then we create a variable a</font>

267
00:14:24,089 --> 00:14:31,060
called hello<font color="#E5E5E5"> or that has the value hello</font>

268
00:14:27,970 --> 00:14:38,470
<font color="#E5E5E5">five characters long</font><font color="#CCCCCC"> it works</font><font color="#E5E5E5"> out</font>

269
00:14:31,060 --> 00:14:40,869
perfectly<font color="#E5E5E5"> the only problem is if</font><font color="#CCCCCC"> we put</font>

270
00:14:38,470 --> 00:14:46,779
<font color="#CCCCCC">in some sort of</font><font color="#E5E5E5"> character</font><font color="#CCCCCC"> that is</font><font color="#E5E5E5"> longer</font>

271
00:14:40,870 --> 00:14:49,269
than<font color="#CCCCCC"> five</font><font color="#E5E5E5"> longer than five characters</font><font color="#CCCCCC"> we</font>

272
00:14:46,779 --> 00:14:52,540
completely overwrite that<font color="#E5E5E5"> value that</font><font color="#CCCCCC"> was</font>

273
00:14:49,269 --> 00:14:55,690
once there<font color="#E5E5E5"> in this example we're</font>

274
00:14:52,540 --> 00:14:58,769
overriding<font color="#E5E5E5"> zero eight zero</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> two B</font>

275
00:14:55,690 --> 00:15:06,160
which is the second<font color="#CCCCCC"> thing in the stack</font>

276
00:14:58,769 --> 00:15:09,490
<font color="#CCCCCC">with 0 8 0 4 8 4 because we push greater</font>

277
00:15:06,160 --> 00:15:12,250
<font color="#E5E5E5">than 5 characters to this</font><font color="#CCCCCC"> under this</font>

278
00:15:09,490 --> 00:15:16,000
<font color="#E5E5E5">buffer so that</font><font color="#CCCCCC"> means we're actually able</font>

279
00:15:12,250 --> 00:15:20,110
to control program<font color="#CCCCCC"> execution just by</font>

280
00:15:16,000 --> 00:15:23,949
writing more characters than<font color="#E5E5E5"> then what's</font>

281
00:15:20,110 --> 00:15:26,199
allowed so this is<font color="#E5E5E5"> really important</font><font color="#CCCCCC"> for</font>

282
00:15:23,949 --> 00:15:30,250
C developers<font color="#E5E5E5"> because they need to</font><font color="#CCCCCC"> make</font>

283
00:15:26,199 --> 00:15:32,829
<font color="#CCCCCC">sure</font><font color="#E5E5E5"> that no one is writing more</font>

284
00:15:30,250 --> 00:15:38,310
characters than<font color="#E5E5E5"> than what your buffer</font>

285
00:15:32,829 --> 00:15:38,310
size is so I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do a little demo</font>

286
00:15:39,360 --> 00:15:53,860
as I said I really<font color="#CCCCCC"> enjoy CTFs and this</font>

287
00:15:44,829 --> 00:15:56,180
was a really<font color="#E5E5E5"> good example</font><font color="#CCCCCC"> of let's see</font>

288
00:15:53,860 --> 00:16:00,190
so this was a really<font color="#E5E5E5"> good example</font><font color="#CCCCCC"> I</font>

289
00:15:56,180 --> 00:16:00,189
found on<font color="#E5E5E5"> one of the CT ups I did of a</font>

290
00:16:01,000 --> 00:16:04,480
<font color="#CCCCCC">make</font><font color="#E5E5E5"> that smaller</font>

291
00:16:06,460 --> 00:16:10,600
<font color="#CCCCCC">the other works there so this is a</font>

292
00:16:08,649 --> 00:16:12,970
<font color="#E5E5E5">really good visual</font><font color="#CCCCCC"> representation of</font>

293
00:16:10,600 --> 00:16:18,370
what we're gonna<font color="#E5E5E5"> be what I'm actually</font>

294
00:16:12,970 --> 00:16:22,120
talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> we have this source right</font>

295
00:16:18,370 --> 00:16:24,520
<font color="#E5E5E5">here</font><font color="#CCCCCC"> so you see we go</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> main</font><font color="#E5E5E5"> we take</font>

296
00:16:22,120 --> 00:16:27,520
one of<font color="#CCCCCC"> the arguments</font><font color="#E5E5E5"> and we pass it</font><font color="#CCCCCC"> into</font>

297
00:16:24,520 --> 00:16:31,149
<font color="#CCCCCC">the</font><font color="#E5E5E5"> Volm function we create a character</font>

298
00:16:27,520 --> 00:16:34,060
<font color="#E5E5E5">array called buff that's only 16</font>

299
00:16:31,149 --> 00:16:37,029
characters long<font color="#E5E5E5"> and then we use</font><font color="#CCCCCC"> STR copy</font>

300
00:16:34,060 --> 00:16:40,800
<font color="#E5E5E5">which just copies whatever we write to</font>

301
00:16:37,029 --> 00:16:44,700
it<font color="#CCCCCC"> or copies our input into that buffer</font>

302
00:16:40,800 --> 00:16:49,420
<font color="#E5E5E5">the only thing just like gets STR copy</font>

303
00:16:44,700 --> 00:16:51,339
will not check<font color="#E5E5E5"> for bounds so this means</font>

304
00:16:49,420 --> 00:16:54,459
we're allowed to<font color="#CCCCCC"> write</font><font color="#E5E5E5"> however many</font>

305
00:16:51,339 --> 00:17:01,570
characters we want into<font color="#CCCCCC"> this into this</font>

306
00:16:54,459 --> 00:17:05,079
<font color="#CCCCCC">function so</font><font color="#E5E5E5"> here's what our actual stack</font>

307
00:17:01,570 --> 00:17:08,500
looks like so<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have our buffer that's</font>

308
00:17:05,079 --> 00:17:12,339
a<font color="#CCCCCC"> 4x4</font><font color="#E5E5E5"> so with 16 characters we have</font><font color="#CCCCCC"> 8</font>

309
00:17:08,500 --> 00:17:15,280
characters right here of sort of null

310
00:17:12,339 --> 00:17:17,319
space<font color="#E5E5E5"> and then we have EVP which is</font>

311
00:17:15,280 --> 00:17:20,290
pushed don't really need to<font color="#E5E5E5"> know about</font>

312
00:17:17,319 --> 00:17:23,170
<font color="#E5E5E5">that but then we have e IP so</font><font color="#CCCCCC"> eventually</font>

313
00:17:20,290 --> 00:17:26,379
we<font color="#CCCCCC"> are actually able to rewrite enough</font>

314
00:17:23,170 --> 00:17:30,610
characters<font color="#E5E5E5"> in C won't fit into</font><font color="#CCCCCC"> ASCII</font>

315
00:17:26,380 --> 00:17:32,260
mode so we write enough characters we

316
00:17:30,610 --> 00:17:38,740
<font color="#E5E5E5">can actually start writing values</font><font color="#CCCCCC"> into e</font>

317
00:17:32,260 --> 00:17:40,120
<font color="#CCCCCC">IP so that's definitely</font><font color="#E5E5E5"> a problem but we</font>

318
00:17:38,740 --> 00:17:44,740
<font color="#CCCCCC">can see this really cool function</font><font color="#E5E5E5"> over</font>

319
00:17:40,120 --> 00:17:50,010
here<font color="#E5E5E5"> called give shell which actually</font>

320
00:17:44,740 --> 00:17:50,010
gives us a slash bin slash SH shell

321
00:17:50,070 --> 00:17:53,760
that's telling me<font color="#E5E5E5"> how to do it</font>

322
00:17:56,910 --> 00:18:02,890
so let's look at<font color="#E5E5E5"> what we have so we</font>

323
00:18:01,180 --> 00:18:05,350
check out the<font color="#CCCCCC"> makefile</font>

324
00:18:02,890 --> 00:18:07,720
so this is saying it's<font color="#E5E5E5"> gonna copy or</font>

325
00:18:05,350 --> 00:18:09,750
it's gonna<font color="#E5E5E5"> compile that overflow</font><font color="#CCCCCC"> Tutsi</font>

326
00:18:07,720 --> 00:18:15,520
file that<font color="#CCCCCC"> we're wait we just</font><font color="#E5E5E5"> looked out</font>

327
00:18:09,750 --> 00:18:16,960
<font color="#E5E5E5">name it overflow</font><font color="#CCCCCC"> too so we're going to</font>

328
00:18:15,520 --> 00:18:21,370
<font color="#E5E5E5">use the objdump</font><font color="#CCCCCC"> tool that we just talked</font>

329
00:18:16,960 --> 00:18:23,980
about<font color="#CCCCCC"> and find</font><font color="#E5E5E5"> out where the location</font>

330
00:18:21,370 --> 00:18:32,320
for<font color="#E5E5E5"> that gift shell function is so that</font>

331
00:18:23,980 --> 00:18:37,630
we can<font color="#CCCCCC"> hopefully call it</font><font color="#E5E5E5"> so we can see</font>

332
00:18:32,320 --> 00:18:44,169
we get a memory<font color="#E5E5E5"> address over here 0</font><font color="#CCCCCC"> 4 0</font>

333
00:18:37,630 --> 00:18:46,950
<font color="#E5E5E5">ad something</font><font color="#CCCCCC"> quickly gonna show you that</font>

334
00:18:44,170 --> 00:18:46,950
this<font color="#CCCCCC"> works really well</font>

335
00:18:51,170 --> 00:18:54,170
<font color="#CCCCCC">before</font>

336
00:18:56,200 --> 00:19:02,630
and we can see in this saved a I<font color="#CCCCCC"> P this</font>

337
00:19:00,170 --> 00:19:08,950
green space up<font color="#CCCCCC"> here I just have written</font>

338
00:19:02,630 --> 00:19:16,340
the 0<font color="#CCCCCC"> 4 0</font><font color="#E5E5E5"> 0 8 0 4</font><font color="#CCCCCC"> 8 4 ad address in this</font>

339
00:19:08,950 --> 00:19:28,610
<font color="#E5E5E5">so if we run it it runs it prints this</font>

340
00:19:16,340 --> 00:19:36,020
out ads<font color="#CCCCCC"> our our location</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then let me</font>

341
00:19:28,610 --> 00:19:37,879
get a flag<font color="#CCCCCC"> yeah see chips are fun</font><font color="#E5E5E5"> that's</font>

342
00:19:36,020 --> 00:19:41,150
<font color="#E5E5E5">pretty cool</font><font color="#CCCCCC"> so that's that's a</font><font color="#E5E5E5"> really</font>

343
00:19:37,880 --> 00:19:44,930
basic buffer overflow vulnerability<font color="#CCCCCC"> it</font>

344
00:19:41,150 --> 00:19:46,820
<font color="#E5E5E5">really takes advantage of overflowing</font>

345
00:19:44,930 --> 00:19:52,040
some sort of buffer<font color="#E5E5E5"> to allow us to</font>

346
00:19:46,820 --> 00:19:53,929
execute<font color="#CCCCCC"> wherever we want</font><font color="#E5E5E5"> to the last</font>

347
00:19:52,040 --> 00:19:56,389
<font color="#E5E5E5">thing I'm</font><font color="#CCCCCC"> gonna talk about is Linux</font>

348
00:19:53,930 --> 00:19:58,840
system calls<font color="#CCCCCC"> these are really important</font>

349
00:19:56,390 --> 00:20:02,420
for<font color="#E5E5E5"> learning how to your shell code</font>

350
00:19:58,840 --> 00:20:05,090
<font color="#E5E5E5">because a lot of</font><font color="#CCCCCC"> the time will</font><font color="#E5E5E5"> need to</font>

351
00:20:02,420 --> 00:20:08,840
call kernel functions or things in the

352
00:20:05,090 --> 00:20:16,040
kernel to allow us to<font color="#CCCCCC"> do cool stuff</font>

353
00:20:08,840 --> 00:20:21,770
so in assembly the<font color="#E5E5E5"> that's the int 0x80</font>

354
00:20:16,040 --> 00:20:25,780
<font color="#E5E5E5">is just means let's call something in</font>

355
00:20:21,770 --> 00:20:29,930
the kernel<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you you set up your</font>

356
00:20:25,780 --> 00:20:31,790
registers<font color="#E5E5E5"> you call in</font><font color="#CCCCCC"> 280 and</font><font color="#E5E5E5"> then it</font>

357
00:20:29,930 --> 00:20:35,000
executes whatever system call you tell

358
00:20:31,790 --> 00:20:37,310
it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> so specifically we're gonna be</font>

359
00:20:35,000 --> 00:20:40,490
talking about system call one and sis

360
00:20:37,310 --> 00:20:43,909
call one is the exit<font color="#E5E5E5"> siskel so anytime</font>

361
00:20:40,490 --> 00:20:45,770
<font color="#E5E5E5">of program exits</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> actually have to</font>

362
00:20:43,910 --> 00:20:50,270
call<font color="#E5E5E5"> something in the kernel to tell it</font>

363
00:20:45,770 --> 00:20:53,770
<font color="#E5E5E5">to exit the program cleanly so</font><font color="#CCCCCC"> I'm</font>

364
00:20:50,270 --> 00:20:53,770
actually<font color="#E5E5E5"> show an example of this</font>

365
00:21:00,140 --> 00:21:07,409
so we start off we this<font color="#E5E5E5"> is just a way</font>

366
00:21:04,980 --> 00:21:10,649
that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can program and assembly we move</font>

367
00:21:07,409 --> 00:21:13,529
one into EAX<font color="#CCCCCC"> so we are calling</font><font color="#E5E5E5"> cysts</font>

368
00:21:10,649 --> 00:21:16,320
using system call<font color="#E5E5E5"> one we move 0 into e</font>

369
00:21:13,529 --> 00:21:20,370
bx<font color="#CCCCCC"> this just means</font><font color="#E5E5E5"> that we're going to</font>

370
00:21:16,320 --> 00:21:22,908
be returning<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> and c this is a kind of a</font>

371
00:21:20,370 --> 00:21:32,418
way<font color="#CCCCCC"> to say this program</font><font color="#E5E5E5"> exited cleanly</font>

372
00:21:22,909 --> 00:21:37,590
<font color="#CCCCCC">and then we use this call</font><font color="#E5E5E5"> int 0x80 so</font>

373
00:21:32,419 --> 00:21:41,090
exits already<font color="#E5E5E5"> so we created a binary off</font>

374
00:21:37,590 --> 00:21:44,370
of that called exit and if we run exit

375
00:21:41,090 --> 00:21:48,418
it exits<font color="#E5E5E5"> so how cool is that</font><font color="#CCCCCC"> we were</font>

376
00:21:44,370 --> 00:21:52,590
able<font color="#E5E5E5"> to exit a program</font><font color="#CCCCCC"> so we can</font>

377
00:21:48,419 --> 00:21:57,120
actually use this<font color="#E5E5E5"> I don't know if you</font>

378
00:21:52,590 --> 00:22:00,120
guys can see that<font color="#CCCCCC"> but this is just</font>

379
00:21:57,120 --> 00:22:04,889
saying<font color="#CCCCCC"> it says</font><font color="#E5E5E5"> 0 over here</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> just</font>

380
00:22:00,120 --> 00:22:08,549
means that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> returns</font><font color="#E5E5E5"> 0 so we it did</font>

381
00:22:04,889 --> 00:22:13,500
<font color="#E5E5E5">exactly what we told it to we'll get</font><font color="#CCCCCC"> a</font>

382
00:22:08,549 --> 00:22:16,649
little<font color="#CCCCCC"> bit more complicated here and use</font>

383
00:22:13,500 --> 00:22:19,289
system call for system call for is right

384
00:22:16,649 --> 00:22:23,250
so this system call for will tell your

385
00:22:19,289 --> 00:22:27,990
Colonel<font color="#E5E5E5"> - right - whatever buffer you</font>

386
00:22:23,250 --> 00:22:32,549
want it<font color="#CCCCCC"> - right - so we'll start off up</font>

387
00:22:27,990 --> 00:22:38,309
here<font color="#E5E5E5"> say create a a string called</font>

388
00:22:32,549 --> 00:22:40,320
message<font color="#E5E5E5"> msg we allocate it we say we</font>

389
00:22:38,309 --> 00:22:45,210
<font color="#E5E5E5">want it to say hello world and then 10</font>

390
00:22:40,320 --> 00:22:47,490
which is<font color="#E5E5E5"> just a new line operator we get</font>

391
00:22:45,210 --> 00:22:51,510
down into the code<font color="#E5E5E5"> we use system call</font>

392
00:22:47,490 --> 00:22:54,750
for we move for into EAX<font color="#E5E5E5"> just to denote</font>

393
00:22:51,510 --> 00:22:57,929
<font color="#E5E5E5">we're using system call for we move 1</font>

394
00:22:54,750 --> 00:22:59,940
into e bx<font color="#E5E5E5"> that just means we were going</font>

395
00:22:57,929 --> 00:23:02,460
to write<font color="#E5E5E5"> to standard output</font><font color="#CCCCCC"> you can</font>

396
00:22:59,940 --> 00:23:06,020
specify buffers<font color="#CCCCCC"> so if you want to like</font>

397
00:23:02,460 --> 00:23:10,300
<font color="#CCCCCC">write into a buffer you can do</font><font color="#E5E5E5"> that</font>

398
00:23:06,020 --> 00:23:13,970
in ECX<font color="#E5E5E5"> we put the pointer to the message</font>

399
00:23:10,300 --> 00:23:17,178
<font color="#E5E5E5">which we declared above</font><font color="#CCCCCC"> EDX we put how</font>

400
00:23:13,970 --> 00:23:19,010
<font color="#E5E5E5">many characters we're gonna write we're</font>

401
00:23:17,179 --> 00:23:22,870
<font color="#E5E5E5">gonna write 12 characters and then we</font>

402
00:23:19,010 --> 00:23:26,780
call<font color="#CCCCCC"> and ad so that's gonna execute that</font>

403
00:23:22,870 --> 00:23:32,449
<font color="#E5E5E5">next we exit the program like you would</font>

404
00:23:26,780 --> 00:23:36,350
like our<font color="#CCCCCC"> previous example showed so I'll</font>

405
00:23:32,450 --> 00:23:40,760
make this and run<font color="#E5E5E5"> it and we see we get</font>

406
00:23:36,350 --> 00:23:43,639
ello world and if we<font color="#E5E5E5"> echo this</font><font color="#CCCCCC"> we'd</font>

407
00:23:40,760 --> 00:23:47,840
return<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> so again it did exactly what</font>

408
00:23:43,640 --> 00:23:58,490
<font color="#CCCCCC">we wanted it to</font><font color="#E5E5E5"> and everything but</font>

409
00:23:47,840 --> 00:24:00,530
perfectly<font color="#E5E5E5"> great good</font><font color="#CCCCCC"> so now for the</font>

410
00:23:58,490 --> 00:24:03,200
actual<font color="#E5E5E5"> shell coding how are we gonna</font>

411
00:24:00,530 --> 00:24:08,899
insert our code<font color="#E5E5E5"> this is a good question</font>

412
00:24:03,200 --> 00:24:12,309
<font color="#CCCCCC">so calling arbitrary functions is pretty</font>

413
00:24:08,900 --> 00:24:17,630
cool<font color="#E5E5E5"> but we really want to</font><font color="#CCCCCC"> get shell</font>

414
00:24:12,309 --> 00:24:20,840
that's kind of kind<font color="#CCCCCC"> of really what</font><font color="#E5E5E5"> we</font>

415
00:24:17,630 --> 00:24:23,020
want<font color="#E5E5E5"> so here what we're gonna do we're</font>

416
00:24:20,840 --> 00:24:27,980
gonna go<font color="#E5E5E5"> back to our previous</font><font color="#CCCCCC"> example so</font>

417
00:24:23,020 --> 00:24:31,970
<font color="#CCCCCC">instead of A's we have this kind of long</font>

418
00:24:27,980 --> 00:24:36,950
string of A's instead of A's what we can

419
00:24:31,970 --> 00:24:39,850
do is actually insert insert the<font color="#E5E5E5"> opcodes</font>

420
00:24:36,950 --> 00:24:43,309
that we saw when we<font color="#CCCCCC"> did the disassembly</font>

421
00:24:39,850 --> 00:24:48,050
<font color="#CCCCCC">so if we insert opcodes here and then we</font>

422
00:24:43,309 --> 00:24:50,710
set E I P so<font color="#CCCCCC"> we overflow into e IP</font><font color="#E5E5E5"> and</font>

423
00:24:48,050 --> 00:24:52,580
set e IP to<font color="#E5E5E5"> the beginning of our</font><font color="#CCCCCC"> buffer</font>

424
00:24:50,710 --> 00:24:56,720
our program won't<font color="#E5E5E5"> know the difference</font>

425
00:24:52,580 --> 00:24:58,879
<font color="#CCCCCC">between the stack or the</font><font color="#E5E5E5"> calls that it's</font>

426
00:24:56,720 --> 00:25:01,220
trying<font color="#E5E5E5"> to make and our buffer so it'll</font>

427
00:24:58,880 --> 00:25:04,910
actually start executing<font color="#E5E5E5"> what we say in</font>

428
00:25:01,220 --> 00:25:07,550
our buffer<font color="#E5E5E5"> so for this presentation</font>

429
00:25:04,910 --> 00:25:11,210
<font color="#CCCCCC">there</font><font color="#E5E5E5"> are actually tools to mitigate</font>

430
00:25:07,550 --> 00:25:14,240
<font color="#E5E5E5">this where the program will know if the</font>

431
00:25:11,210 --> 00:25:15,710
stack<font color="#E5E5E5"> or</font><font color="#CCCCCC"> it'll know the difference</font>

432
00:25:14,240 --> 00:25:20,020
<font color="#CCCCCC">between the stack and our shell code</font>

433
00:25:15,710 --> 00:25:20,020
body but<font color="#E5E5E5"> that</font>

434
00:25:22,730 --> 00:25:25,730
so

435
00:25:26,530 --> 00:25:31,500
<font color="#CCCCCC">I can get two here we go so</font>

436
00:25:34,910 --> 00:25:39,410
so if we were to insert instead of those

437
00:25:37,670 --> 00:25:41,600
<font color="#CCCCCC">ages if we were to insert that middle</font>

438
00:25:39,410 --> 00:25:44,720
column the<font color="#CCCCCC"> be eight zero one zero zero</font>

439
00:25:41,600 --> 00:25:46,939
zero<font color="#CCCCCC"> and then point</font><font color="#E5E5E5"> it to the beginning</font>

440
00:25:44,720 --> 00:25:49,030
<font color="#CCCCCC">of</font><font color="#E5E5E5"> that it'll actually execute execute</font>

441
00:25:46,940 --> 00:25:57,080
exactly

442
00:25:49,030 --> 00:25:59,000
so making shellcode typically<font color="#E5E5E5"> I say</font>

443
00:25:57,080 --> 00:26:02,449
typically<font color="#E5E5E5"> pretty much always</font><font color="#CCCCCC"> we'll write</font>

444
00:25:59,000 --> 00:26:05,900
our shellcode in assembly<font color="#CCCCCC"> we'll use</font>

445
00:26:02,450 --> 00:26:08,990
what's a tool called<font color="#E5E5E5"> NASM to compile</font><font color="#CCCCCC"> our</font>

446
00:26:05,900 --> 00:26:11,720
assembly<font color="#E5E5E5"> and then use objdump</font><font color="#CCCCCC"> which was</font>

447
00:26:08,990 --> 00:26:14,060
the tool we talked about to disassemble

448
00:26:11,720 --> 00:26:17,120
the<font color="#E5E5E5"> binary that we just wrote to</font><font color="#CCCCCC"> figure</font>

449
00:26:14,060 --> 00:26:19,040
out the<font color="#E5E5E5"> op codes that we want</font><font color="#CCCCCC"> the reason</font>

450
00:26:17,120 --> 00:26:23,479
<font color="#CCCCCC">why we don't use</font><font color="#E5E5E5"> something like GCC or</font>

451
00:26:19,040 --> 00:26:26,149
any sort of other compiler is because

452
00:26:23,480 --> 00:26:28,910
GCC does like spooky like really spooky

453
00:26:26,150 --> 00:26:31,460
stuff<font color="#CCCCCC"> because the code is so optimized</font>

454
00:26:28,910 --> 00:26:34,760
<font color="#E5E5E5">that typically</font><font color="#CCCCCC"> you won't</font><font color="#E5E5E5"> really know</font>

455
00:26:31,460 --> 00:26:40,840
what you're feeding<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the buffer or</font>

456
00:26:34,760 --> 00:26:45,070
<font color="#CCCCCC">feeding</font><font color="#E5E5E5"> into this shellcode stack its</font>

457
00:26:40,840 --> 00:26:47,750
GCC is optimized for<font color="#E5E5E5"> speed and not size</font>

458
00:26:45,070 --> 00:26:51,080
<font color="#E5E5E5">so we typically really just don't</font><font color="#CCCCCC"> want</font>

459
00:26:47,750 --> 00:26:53,060
<font color="#E5E5E5">to use that</font><font color="#CCCCCC"> this leads us into making</font>

460
00:26:51,080 --> 00:26:57,110
<font color="#E5E5E5">good shell code which is very different</font>

461
00:26:53,060 --> 00:26:59,690
<font color="#E5E5E5">from</font><font color="#CCCCCC"> hacking</font><font color="#E5E5E5"> shell code so a good shell</font>

462
00:26:57,110 --> 00:27:01,689
code is kind<font color="#CCCCCC"> of what makes</font><font color="#E5E5E5"> it denotes</font>

463
00:26:59,690 --> 00:27:05,680
<font color="#E5E5E5">the or shows the difference between like</font>

464
00:27:01,690 --> 00:27:08,330
like hackers<font color="#E5E5E5"> and security researchers</font>

465
00:27:05,680 --> 00:27:11,060
hackers will try to get the shell<font color="#E5E5E5"> code</font>

466
00:27:08,330 --> 00:27:13,179
<font color="#E5E5E5">as small as they can sort of</font><font color="#CCCCCC"> as a game I</font>

467
00:27:11,060 --> 00:27:16,419
mean if you've ever seen people<font color="#E5E5E5"> play</font>

468
00:27:13,180 --> 00:27:19,160
<font color="#CCCCCC">code golf</font><font color="#E5E5E5"> it's kind of the same thing</font>

469
00:27:16,420 --> 00:27:21,350
<font color="#E5E5E5">smaller is better and</font><font color="#CCCCCC"> the reason for</font>

470
00:27:19,160 --> 00:27:25,670
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> if we have smaller shell</font>

471
00:27:21,350 --> 00:27:28,129
code we can<font color="#E5E5E5"> fit that same the same code</font>

472
00:27:25,670 --> 00:27:30,440
into a smaller buffer<font color="#E5E5E5"> so if some</font>

473
00:27:28,130 --> 00:27:35,330
programmer gives us<font color="#E5E5E5"> a buffer size of</font>

474
00:27:30,440 --> 00:27:38,560
<font color="#E5E5E5">like thirty first like 525</font><font color="#CCCCCC"> we need to</font>

475
00:27:35,330 --> 00:27:42,860
make more efficient shell code<font color="#E5E5E5"> to</font>

476
00:27:38,560 --> 00:27:44,240
mitigate<font color="#E5E5E5"> their to use that buffer the</font>

477
00:27:42,860 --> 00:27:49,189
next thing

478
00:27:44,240 --> 00:27:50,930
<font color="#CCCCCC">shellcode cannot use</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> zeros next to</font>

479
00:27:49,190 --> 00:27:58,370
each other<font color="#E5E5E5"> and the reason for</font><font color="#CCCCCC"> this is</font>

480
00:27:50,930 --> 00:28:01,160
because strings in c are terminated by

481
00:27:58,370 --> 00:28:03,620
this character<font color="#CCCCCC"> so if we have a string</font>

482
00:28:01,160 --> 00:28:08,660
<font color="#E5E5E5">it'll kind of just shut the string off</font>

483
00:28:03,620 --> 00:28:10,750
and kind of cut it where it is<font color="#E5E5E5"> it's just</font>

484
00:28:08,660 --> 00:28:17,060
<font color="#CCCCCC">kind of a rule that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have to have</font>

485
00:28:10,750 --> 00:28:19,660
<font color="#E5E5E5">because</font><font color="#CCCCCC"> of because of C so I'm</font><font color="#E5E5E5"> actually</font>

486
00:28:17,060 --> 00:28:19,659
going<font color="#E5E5E5"> to do an example</font>

487
00:28:22,730 --> 00:28:25,300
so

488
00:28:26,950 --> 00:28:32,259
this is gonna look<font color="#CCCCCC"> really familiar</font><font color="#E5E5E5"> to</font>

489
00:28:29,539 --> 00:28:36,379
you we<font color="#E5E5E5"> just did this this</font><font color="#CCCCCC"> is our old</font>

490
00:28:32,259 --> 00:28:39,710
<font color="#E5E5E5">exit</font><font color="#CCCCCC"> shell code or</font><font color="#E5E5E5"> our old exit assembly</font>

491
00:28:36,379 --> 00:28:52,158
we move<font color="#E5E5E5"> one into EAX</font><font color="#CCCCCC"> we move 0 into e bx</font>

492
00:28:39,710 --> 00:28:55,190
<font color="#E5E5E5">and we call</font><font color="#CCCCCC"> anti D when we do objdump we</font>

493
00:28:52,159 --> 00:28:59,599
can see how many<font color="#E5E5E5"> characters is this we</font>

494
00:28:55,190 --> 00:29:01,989
have<font color="#E5E5E5"> 1</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> 3</font><font color="#CCCCCC"> 4 5</font><font color="#E5E5E5"> and we have 12</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is 12</font>

495
00:28:59,599 --> 00:29:01,989
characters long

496
00:29:02,590 --> 00:29:12,738
so I also wrote a<font color="#E5E5E5"> new one</font><font color="#CCCCCC"> that does a</font>

497
00:29:09,320 --> 00:29:15,739
little<font color="#CCCCCC"> bit of magic we start off by</font>

498
00:29:12,739 --> 00:29:16,249
exhorting<font color="#CCCCCC"> EAX with</font><font color="#E5E5E5"> itself what this will</font>

499
00:29:15,739 --> 00:29:20,149
do

500
00:29:16,249 --> 00:29:25,879
if you've<font color="#E5E5E5"> ever done</font><font color="#CCCCCC"> like binary</font>

501
00:29:20,149 --> 00:29:28,248
operations<font color="#E5E5E5"> XOR puts a 0 in something</font>

502
00:29:25,879 --> 00:29:30,939
that's<font color="#E5E5E5"> the same so if you XOR something</font>

503
00:29:28,249 --> 00:29:36,200
with itself<font color="#E5E5E5"> it's just</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> set it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> 0</font>

504
00:29:30,940 --> 00:29:37,669
and then we<font color="#CCCCCC"> increment EAX</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> 1 and I'll</font>

505
00:29:36,200 --> 00:29:42,679
<font color="#E5E5E5">show you why we do this</font><font color="#CCCCCC"> and then write</font>

506
00:29:37,669 --> 00:29:46,570
for<font color="#CCCCCC"> EBX we XOR evx with EBX</font><font color="#E5E5E5"> so that</font><font color="#CCCCCC"> EBX</font>

507
00:29:42,679 --> 00:29:50,320
is set to<font color="#E5E5E5"> 0 and then we call</font><font color="#CCCCCC"> it ad so</font>

508
00:29:46,570 --> 00:29:50,320
this<font color="#E5E5E5"> is extremely</font><font color="#CCCCCC"> helpful</font>

509
00:29:54,830 --> 00:29:58,370
because look at how<font color="#E5E5E5"> much smaller our</font>

510
00:29:56,660 --> 00:30:01,970
shellcode is<font color="#E5E5E5"> now we went from 12</font>

511
00:29:58,370 --> 00:30:04,159
<font color="#E5E5E5">characters to 1 2 3 4 5 6 7 from 12</font>

512
00:30:01,970 --> 00:30:07,370
characters to 7 characters<font color="#E5E5E5"> just because</font>

513
00:30:04,160 --> 00:30:12,530
we didn't have<font color="#E5E5E5"> these kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> crazy</font>

514
00:30:07,370 --> 00:30:16,790
amounts of these crazy amounts of<font color="#E5E5E5"> zeros</font>

515
00:30:12,530 --> 00:30:18,350
here so we can see that the easiest<font color="#E5E5E5"> way</font>

516
00:30:16,790 --> 00:30:21,399
is<font color="#CCCCCC"> not</font><font color="#E5E5E5"> always going to be the most</font>

517
00:30:18,350 --> 00:30:21,399
efficient way<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> this</font>

518
00:30:27,270 --> 00:30:31,760
so now we<font color="#E5E5E5"> want to insert our shellcode</font>

519
00:30:32,540 --> 00:30:37,740
<font color="#E5E5E5">so we insert</font><font color="#CCCCCC"> a shellcode</font><font color="#E5E5E5"> into the buffer</font>

520
00:30:35,220 --> 00:30:41,850
we point the EIP to the beginning of<font color="#E5E5E5"> our</font>

521
00:30:37,740 --> 00:30:45,200
<font color="#CCCCCC">buffer</font><font color="#E5E5E5"> we magic happens and then we get</font>

522
00:30:41,850 --> 00:30:50,129
a shell<font color="#CCCCCC"> so that's pretty sweet</font>

523
00:30:45,200 --> 00:30:54,780
<font color="#E5E5E5">so I did have</font><font color="#CCCCCC"> a demo of this but I left</font>

524
00:30:50,130 --> 00:30:55,679
my lab stuff on a USB for hours away<font color="#E5E5E5"> so</font>

525
00:30:54,780 --> 00:30:57,450
<font color="#E5E5E5">that sucks</font>

526
00:30:55,679 --> 00:31:04,230
but here's a really<font color="#E5E5E5"> good representation</font>

527
00:30:57,450 --> 00:31:07,770
<font color="#E5E5E5">of it so we</font><font color="#CCCCCC"> sure we have our</font><font color="#E5E5E5"> very this</font>

528
00:31:04,230 --> 00:31:11,100
<font color="#CCCCCC">very</font><font color="#E5E5E5"> familiar code now</font><font color="#CCCCCC"> we call get input</font>

529
00:31:07,770 --> 00:31:15,270
<font color="#E5E5E5">we create a character array and size 80</font>

530
00:31:11,100 --> 00:31:16,949
and then we call gets on that<font color="#E5E5E5"> buffer so</font>

531
00:31:15,270 --> 00:31:21,210
we have this kind<font color="#CCCCCC"> of 80 character long</font>

532
00:31:16,950 --> 00:31:25,410
place that we can throw stuff<font color="#E5E5E5"> into if we</font>

533
00:31:21,210 --> 00:31:28,440
<font color="#E5E5E5">assume that 0x be 7 7 6 is the beginning</font>

534
00:31:25,410 --> 00:31:31,380
of<font color="#CCCCCC"> our buffer we can insert the shell</font>

535
00:31:28,440 --> 00:31:34,890
<font color="#E5E5E5">code that we previously wrote that that</font>

536
00:31:31,380 --> 00:31:36,780
new the<font color="#CCCCCC"> new exit function to the</font>

537
00:31:34,890 --> 00:31:39,750
beginning of<font color="#E5E5E5"> that</font><font color="#CCCCCC"> buffer and then we</font>

538
00:31:36,780 --> 00:31:42,480
write<font color="#E5E5E5"> a ton</font><font color="#CCCCCC"> of a's or just whatever kind</font>

539
00:31:39,750 --> 00:31:45,809
<font color="#E5E5E5">of we have we run a ton of a's and then</font>

540
00:31:42,480 --> 00:31:48,750
we overwrite<font color="#E5E5E5"> a IP to set it to</font><font color="#CCCCCC"> the</font>

541
00:31:45,809 --> 00:31:53,070
<font color="#CCCCCC">beginning</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> that buffer in this case B</font>

542
00:31:48,750 --> 00:31:57,540
seven six seven six<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> what will</font>

543
00:31:53,070 --> 00:31:58,800
happen<font color="#E5E5E5"> is it gets obviously this would</font>

544
00:31:57,540 --> 00:32:04,370
be<font color="#E5E5E5"> cooler if I like could show you but</font>

545
00:31:58,800 --> 00:32:07,409
<font color="#CCCCCC">it would go to the</font><font color="#E5E5E5"> top it would do gets</font>

546
00:32:04,370 --> 00:32:12,050
we override it and then it<font color="#E5E5E5"> just exits</font>

547
00:32:07,410 --> 00:32:17,000
<font color="#E5E5E5">and exits cleanly and nothing happens</font>

548
00:32:12,050 --> 00:32:17,000
kind<font color="#CCCCCC"> of pretty pretty cool</font>

549
00:32:17,990 --> 00:32:23,750
so here's a few tricks<font color="#CCCCCC"> there's a lot of</font>

550
00:32:20,720 --> 00:32:27,110
tricks to<font color="#E5E5E5"> shell coding</font><font color="#CCCCCC"> again it's kind</font>

551
00:32:23,750 --> 00:32:29,360
of<font color="#E5E5E5"> it's kind of an art you</font><font color="#CCCCCC"> know you're</font>

552
00:32:27,110 --> 00:32:32,779
trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> make it as small and as</font><font color="#E5E5E5"> a kind</font>

553
00:32:29,360 --> 00:32:35,418
of cool as you can get it<font color="#CCCCCC"> so there's a</font>

554
00:32:32,779 --> 00:32:37,159
<font color="#E5E5E5">couple tricks actually for shell coding</font>

555
00:32:35,419 --> 00:32:38,990
and for kind of exploiting buffer

556
00:32:37,159 --> 00:32:43,340
overflows in general that are<font color="#E5E5E5"> really</font>

557
00:32:38,990 --> 00:32:48,529
really<font color="#E5E5E5"> extremely helpful our first one</font>

558
00:32:43,340 --> 00:32:50,918
is the<font color="#CCCCCC"> knob slid so knob is a really</font>

559
00:32:48,529 --> 00:32:52,880
cool command<font color="#E5E5E5"> a really cool assembly</font>

560
00:32:50,919 --> 00:32:58,100
thing

561
00:32:52,880 --> 00:33:02,179
it stands<font color="#CCCCCC"> for no op</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> X or it's a X</font>

562
00:32:58,100 --> 00:33:04,629
90<font color="#E5E5E5"> so at X 90</font><font color="#CCCCCC"> and all it</font><font color="#E5E5E5"> does</font><font color="#CCCCCC"> is nothing</font>

563
00:33:02,179 --> 00:33:08,299
which is<font color="#E5E5E5"> the beautiful thing about it</font>

564
00:33:04,630 --> 00:33:12,649
<font color="#CCCCCC">it'll</font><font color="#E5E5E5"> all it will do</font><font color="#CCCCCC"> is increment the IP</font>

565
00:33:08,299 --> 00:33:15,100
by<font color="#E5E5E5"> one and do literally nothing so why</font>

566
00:33:12,649 --> 00:33:15,100
is this<font color="#E5E5E5"> useful</font>

567
00:33:15,370 --> 00:33:23,809
<font color="#E5E5E5">the problem with with this is that when</font>

568
00:33:21,020 --> 00:33:26,389
we overwrite a IP we need to set it

569
00:33:23,809 --> 00:33:30,049
exactly<font color="#CCCCCC"> equal to the beginning of our</font>

570
00:33:26,390 --> 00:33:32,059
<font color="#CCCCCC">shellcode we</font><font color="#E5E5E5"> need to set it</font><font color="#CCCCCC"> to 0 XB</font><font color="#E5E5E5"> 776</font>

571
00:33:30,049 --> 00:33:33,158
and if we don't<font color="#E5E5E5"> set it to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> exact</font>

572
00:33:32,059 --> 00:33:35,840
address

573
00:33:33,159 --> 00:33:39,350
we like it'll it'll do whatever it wants

574
00:33:35,840 --> 00:33:43,879
<font color="#CCCCCC">it'll</font><font color="#E5E5E5"> just kind of flail around have no</font>

575
00:33:39,350 --> 00:33:48,889
idea what it's doing<font color="#CCCCCC"> but if we put no</font>

576
00:33:43,880 --> 00:33:52,850
ops before the shellcode<font color="#CCCCCC"> and then have</font>

577
00:33:48,890 --> 00:33:56,990
our shellcode at the very end<font color="#E5E5E5"> then this</font>

578
00:33:52,850 --> 00:33:59,899
<font color="#E5E5E5">gives us a much larger region</font><font color="#CCCCCC"> too to</font>

579
00:33:56,990 --> 00:34:04,190
kind<font color="#CCCCCC"> of find put our stuff in too so we</font>

580
00:33:59,899 --> 00:34:06,739
start off<font color="#E5E5E5"> our top sled</font><font color="#CCCCCC"> so here we start</font>

581
00:34:04,190 --> 00:34:10,310
<font color="#CCCCCC">off instead</font><font color="#E5E5E5"> of all these A's we replace</font>

582
00:34:06,740 --> 00:34:15,469
<font color="#CCCCCC">it with an OP slip so we can set our AIP</font>

583
00:34:10,310 --> 00:34:18,830
to anywhere<font color="#E5E5E5"> between be</font><font color="#CCCCCC"> 776</font><font color="#E5E5E5"> and the end</font>

584
00:34:15,469 --> 00:34:21,888
of our blank space before<font color="#E5E5E5"> E I P and it</font>

585
00:34:18,830 --> 00:34:24,020
will knock not not not not not<font color="#E5E5E5"> not find</font>

586
00:34:21,889 --> 00:34:25,820
our<font color="#E5E5E5"> shellcode and execute it that's</font>

587
00:34:24,020 --> 00:34:28,219
extremely useful<font color="#CCCCCC"> because it's a it's</font>

588
00:34:25,820 --> 00:34:30,560
<font color="#CCCCCC">really hard to figure</font><font color="#E5E5E5"> out where the</font>

589
00:34:28,219 --> 00:34:33,250
beginning<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our buffer is so this gives</font>

590
00:34:30,560 --> 00:34:33,250
us<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> room</font>

591
00:34:33,730 --> 00:34:40,819
there's also another not really a trick

592
00:34:39,319 --> 00:34:45,759
<font color="#E5E5E5">but another kind of tool we have</font>

593
00:34:40,819 --> 00:34:49,279
<font color="#CCCCCC">available to us is a msf</font><font color="#E5E5E5"> venom</font><font color="#CCCCCC"> msf venom</font>

594
00:34:45,760 --> 00:34:52,970
sort of in the same tools<font color="#E5E5E5"> packages as</font>

595
00:34:49,280 --> 00:34:58,400
<font color="#E5E5E5">Metasploit</font><font color="#CCCCCC"> and it'll generate shellcode</font>

596
00:34:52,969 --> 00:35:01,250
for<font color="#E5E5E5"> us it's not a trick or a tool really</font>

597
00:34:58,400 --> 00:35:02,780
<font color="#E5E5E5">in assembly but it'll help you do your</font>

598
00:35:01,250 --> 00:35:06,170
research<font color="#CCCCCC"> or whatever you</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font>

599
00:35:02,780 --> 00:35:07,640
whatever you're doing it for<font color="#E5E5E5"> because you</font>

600
00:35:06,170 --> 00:35:12,170
don't have to go through<font color="#E5E5E5"> the process of</font>

601
00:35:07,640 --> 00:35:16,160
writing an<font color="#CCCCCC"> exact</font><font color="#E5E5E5"> ve2</font><font color="#CCCCCC"> like slash bin</font>

602
00:35:12,170 --> 00:35:17,630
slash<font color="#CCCCCC"> sh</font><font color="#E5E5E5"> to generate your shell</font><font color="#CCCCCC"> well</font>

603
00:35:16,160 --> 00:35:20,799
it's a good<font color="#CCCCCC"> thing to know how to do that</font>

604
00:35:17,630 --> 00:35:23,750
we do have tools that<font color="#E5E5E5"> will do it for</font><font color="#CCCCCC"> us</font>

605
00:35:20,799 --> 00:35:27,589
and it'll even do things like<font color="#E5E5E5"> Knob</font><font color="#CCCCCC"> sled</font>

606
00:35:23,750 --> 00:35:29,270
for you so you just<font color="#CCCCCC"> tell it to</font><font color="#E5E5E5"> like the</font>

607
00:35:27,589 --> 00:35:31,430
shell code<font color="#E5E5E5"> that you want to generate how</font>

608
00:35:29,270 --> 00:35:32,990
big your buffer is and then if you want

609
00:35:31,430 --> 00:35:34,279
an<font color="#CCCCCC"> OPS</font><font color="#E5E5E5"> light or not and it'll generate</font>

610
00:35:32,990 --> 00:35:39,200
that whole string for you so you don't

611
00:35:34,280 --> 00:35:43,369
<font color="#E5E5E5">have to really do anything now the thing</font>

612
00:35:39,200 --> 00:35:48,558
yeah<font color="#E5E5E5"> so it's definitely definitely good</font>

613
00:35:43,369 --> 00:35:52,010
to<font color="#E5E5E5"> have so the last thing is recommended</font>

614
00:35:48,559 --> 00:35:54,099
reading so this is a very can get very

615
00:35:52,010 --> 00:35:55,670
<font color="#E5E5E5">uh you can get very deep into this</font>

616
00:35:54,099 --> 00:35:59,390
there's a lot<font color="#E5E5E5"> to it</font>

617
00:35:55,670 --> 00:36:01,549
so definitely<font color="#E5E5E5"> reading reading and</font>

618
00:35:59,390 --> 00:36:07,990
<font color="#E5E5E5">practicing are the easiest ways to get</font>

619
00:36:01,549 --> 00:36:10,670
<font color="#E5E5E5">better at it shell coders handbook is a</font>

620
00:36:07,990 --> 00:36:14,058
super great<font color="#CCCCCC"> book that sort of</font><font color="#E5E5E5"> steps you</font>

621
00:36:10,670 --> 00:36:17,630
<font color="#CCCCCC">through the</font><font color="#E5E5E5"> buffer overflow</font><font color="#CCCCCC"> shows you</font>

622
00:36:14,059 --> 00:36:21,829
how to<font color="#E5E5E5"> exploit it to get a shell sets</font>

623
00:36:17,630 --> 00:36:25,040
shows you how to set GUI d20<font color="#E5E5E5"> to get a</font>

624
00:36:21,829 --> 00:36:26,900
root shell<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is pretty awesome</font>

625
00:36:25,040 --> 00:36:30,799
talked about<font color="#CCCCCC"> other vulnerabilities other</font>

626
00:36:26,900 --> 00:36:36,470
than buffer overflow really just cool

627
00:36:30,799 --> 00:36:38,180
stuff<font color="#E5E5E5"> next</font><font color="#CCCCCC"> asm tutorial if you want to</font>

628
00:36:36,470 --> 00:36:43,779
<font color="#E5E5E5">generate your own shell code learning</font>

629
00:36:38,180 --> 00:36:43,779
ASM assembly is<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be how you do that</font>

630
00:36:45,190 --> 00:36:50,599
so if you can write<font color="#E5E5E5"> it really</font>

631
00:36:47,599 --> 00:36:52,640
efficiently<font color="#CCCCCC"> you'll get better shellcode</font>

632
00:36:50,599 --> 00:36:56,650
that's just how it's going to<font color="#E5E5E5"> work</font><font color="#CCCCCC"> and</font>

633
00:36:52,640 --> 00:36:56,650
then learning about binary exploitation

634
00:36:56,859 --> 00:37:06,549
<font color="#E5E5E5">honestly this link</font><font color="#CCCCCC"> isn't even about</font>

635
00:36:59,300 --> 00:37:13,030
binary exploitation it's more about<font color="#CCCCCC"> CTS</font>

636
00:37:06,550 --> 00:37:13,030
find<font color="#E5E5E5"> whatever all those technical</font>

637
00:37:17,730 --> 00:37:27,780
CTF time<font color="#CCCCCC"> gorg CTF time is has lists of</font>

638
00:37:24,650 --> 00:37:31,140
all CTF<font color="#E5E5E5"> that are coming up</font>

639
00:37:27,780 --> 00:37:33,720
honestly this<font color="#CCCCCC"> is going to be the best</font>

640
00:37:31,140 --> 00:37:36,629
way<font color="#CCCCCC"> to practice is by finding out</font>

641
00:37:33,720 --> 00:37:39,419
whatever CTF is<font color="#E5E5E5"> coming up next and</font><font color="#CCCCCC"> just</font>

642
00:37:36,630 --> 00:37:42,450
<font color="#CCCCCC">doing it because</font><font color="#E5E5E5"> doing it is gonna be</font>

643
00:37:39,420 --> 00:37:44,460
how you learn<font color="#CCCCCC"> you can read a</font><font color="#E5E5E5"> lot but</font>

644
00:37:42,450 --> 00:37:48,270
doing it<font color="#E5E5E5"> is</font><font color="#CCCCCC"> gonna what this is gonna be</font>

645
00:37:44,460 --> 00:37:49,610
how you get better<font color="#CCCCCC"> I would</font><font color="#E5E5E5"> definitely</font>

646
00:37:48,270 --> 00:37:52,650
recommend checking<font color="#E5E5E5"> out CTF time</font>

647
00:37:49,610 --> 00:37:58,680
recommend participating in as many as

648
00:37:52,650 --> 00:38:04,710
<font color="#CCCCCC">you can because</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> will benefit greatly</font>

649
00:37:58,680 --> 00:38:06,779
from<font color="#CCCCCC"> this so thank you for</font><font color="#E5E5E5"> listening</font><font color="#CCCCCC"> if</font>

650
00:38:04,710 --> 00:38:12,260
you need to contact<font color="#E5E5E5"> me here</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> some</font>

651
00:38:06,780 --> 00:38:12,260
avenues to do that and that's it

652
00:38:22,670 --> 00:38:37,890
does anyone<font color="#E5E5E5"> have any questions</font>

653
00:38:24,920 --> 00:38:45,630
Chris yes I have never<font color="#E5E5E5"> needed to</font>

654
00:38:37,890 --> 00:38:51,420
<font color="#E5E5E5">obfuscate shellcode okay yeah</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> a shell</font>

655
00:38:45,630 --> 00:38:56,150
code obfuscation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> it'd be useful</font><font color="#CCCCCC"> I</font>

656
00:38:51,420 --> 00:39:00,810
mean I guess for like yeah I mean yeah

657
00:38:56,150 --> 00:39:02,490
<font color="#CCCCCC">detecting like there's there's death</font>

658
00:39:00,810 --> 00:39:06,090
there's<font color="#E5E5E5"> programs that will check</font>

659
00:39:02,490 --> 00:39:08,279
like if malicious code is<font color="#CCCCCC"> being run</font><font color="#E5E5E5"> so</font>

660
00:39:06,090 --> 00:39:27,750
if you can actually obfuscate that then

661
00:39:08,280 --> 00:39:32,550
you'll bypass a lot<font color="#E5E5E5"> about so yeah so</font>

662
00:39:27,750 --> 00:39:34,710
that's<font color="#CCCCCC"> actually a very good point if you</font>

663
00:39:32,550 --> 00:39:36,600
want to just write shellcode<font color="#E5E5E5"> writing</font><font color="#CCCCCC"> as</font>

664
00:39:34,710 --> 00:39:37,890
smallest is going to be best if<font color="#E5E5E5"> you want</font>

665
00:39:36,600 --> 00:39:40,259
<font color="#CCCCCC">to write shellcode that will bypass a</font>

666
00:39:37,890 --> 00:39:43,790
fire<font color="#E5E5E5"> a firewall or whatever antivirus</font>

667
00:39:40,260 --> 00:39:43,790
you're gonna want to<font color="#CCCCCC"> Optus</font><font color="#E5E5E5"> gate it</font>

668
00:39:45,320 --> 00:39:57,710
pretty much<font color="#E5E5E5"> that yeah pros and</font><font color="#CCCCCC"> cons of</font>

669
00:39:48,690 --> 00:39:57,710
<font color="#CCCCCC">different things hey what's up yeah exam</font>

670
00:39:58,940 --> 00:40:03,559
yeah yeah so if<font color="#E5E5E5"> you were</font><font color="#CCCCCC"> to yeah you</font>

671
00:40:01,760 --> 00:40:05,750
need to<font color="#E5E5E5"> find some way to compile</font><font color="#CCCCCC"> your</font>

672
00:40:03,559 --> 00:40:09,079
arm<font color="#CCCCCC"> but yeah if you</font><font color="#E5E5E5"> were trying</font><font color="#CCCCCC"> to</font>

673
00:40:05,750 --> 00:40:12,380
exploit an arm system<font color="#E5E5E5"> exact same way you</font>

674
00:40:09,079 --> 00:40:15,289
write your<font color="#CCCCCC"> arm shellcode</font><font color="#E5E5E5"> do your objdump</font>

675
00:40:12,380 --> 00:40:18,559
<font color="#CCCCCC">or whatever your tool of preferences and</font>

676
00:40:15,289 --> 00:40:20,799
then throw<font color="#CCCCCC"> that shell cut up exit yeah</font>

677
00:40:18,559 --> 00:40:33,950
<font color="#E5E5E5">exactly the same way you just have to</font>

678
00:40:20,799 --> 00:40:37,450
use a<font color="#CCCCCC"> different compiler especially with</font>

679
00:40:33,950 --> 00:40:37,450
<font color="#CCCCCC">art yeah yeah yeah</font>

680
00:40:48,160 --> 00:40:50,819
yeah

681
00:40:51,290 --> 00:40:54,290
sänger

682
00:40:56,330 --> 00:41:02,640
yeah I mean it's<font color="#E5E5E5"> there's definitely some</font>

683
00:40:59,700 --> 00:41:04,560
<font color="#E5E5E5">stuff that's uh if you're gonna do the</font>

684
00:41:02,640 --> 00:41:07,980
labs on it you need to<font color="#CCCCCC"> actually download</font>

685
00:41:04,560 --> 00:41:10,259
an old version of<font color="#E5E5E5"> like like</font><font color="#CCCCCC"> Red Hat</font><font color="#E5E5E5"> or</font>

686
00:41:07,980 --> 00:41:14,450
<font color="#E5E5E5">something</font><font color="#CCCCCC"> because there's a lot</font><font color="#E5E5E5"> of a lot</font>

687
00:41:10,260 --> 00:41:18,960
<font color="#CCCCCC">of new like things like stack Canaries</font>

688
00:41:14,450 --> 00:41:22,290
<font color="#CCCCCC">things like aslr are newer ways of</font>

689
00:41:18,960 --> 00:41:25,620
<font color="#E5E5E5">evading like shell coding attempts</font>

690
00:41:22,290 --> 00:41:28,290
so there's definitely it dates it a bit

691
00:41:25,620 --> 00:41:32,190
but the shell coding handbook does

692
00:41:28,290 --> 00:41:34,920
explain<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of like these new at the</font>

693
00:41:32,190 --> 00:41:38,790
time newer technologies like bypassing

694
00:41:34,920 --> 00:41:42,840
<font color="#E5E5E5">ASL are bypassing stack Canaries</font><font color="#CCCCCC"> so that</font>

695
00:41:38,790 --> 00:41:44,790
you actually<font color="#CCCCCC"> do get it still works but</font>

696
00:41:42,840 --> 00:41:46,380
you know using<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of your resources</font><font color="#E5E5E5"> so</font>

697
00:41:44,790 --> 00:41:49,350
looking at that<font color="#E5E5E5"> book is going to be</font><font color="#CCCCCC"> good</font>

698
00:41:46,380 --> 00:41:51,870
<font color="#E5E5E5">but using like doing CTFs is going to</font>

699
00:41:49,350 --> 00:42:05,190
show you how sort of<font color="#E5E5E5"> modern-day or</font><font color="#CCCCCC"> how</font>

700
00:41:51,870 --> 00:42:08,759
we<font color="#CCCCCC"> how we do it</font><font color="#E5E5E5"> five years yeah so yeah</font>

701
00:42:05,190 --> 00:42:11,900
<font color="#CCCCCC">so my the lab that I had set up actually</font>

702
00:42:08,760 --> 00:42:15,240
<font color="#CCCCCC">I had disabled a SLR in the kernel</font>

703
00:42:11,900 --> 00:42:19,140
because you have to do some kind of more

704
00:42:15,240 --> 00:42:21,750
advanced techniques to bypass<font color="#CCCCCC"> a SLR</font><font color="#E5E5E5"> but</font>

705
00:42:19,140 --> 00:42:23,220
yeah yeah yeah<font color="#E5E5E5"> yeah you can bypass just</font>

706
00:42:21,750 --> 00:42:27,830
disable it if you don't want to have to

707
00:42:23,220 --> 00:42:27,830
deal with<font color="#CCCCCC"> it yeah hey</font>

708
00:42:31,880 --> 00:42:38,930
actually I really prefer radar<font color="#CCCCCC"> -</font><font color="#E5E5E5"> it's a</font>

709
00:42:36,259 --> 00:42:43,369
really<font color="#CCCCCC"> awesome tool and it can</font><font color="#E5E5E5"> do a lot</font>

710
00:42:38,930 --> 00:42:47,029
<font color="#CCCCCC">of it's</font><font color="#E5E5E5"> kind of meant for meant for this</font>

711
00:42:43,369 --> 00:42:49,329
kind of stuff<font color="#CCCCCC"> like binary exploitation</font>

712
00:42:47,029 --> 00:42:52,369
<font color="#E5E5E5">so I would</font><font color="#CCCCCC"> definitely</font><font color="#E5E5E5"> recommend radar to</font>

713
00:42:49,329 --> 00:42:55,009
recommend checking out that tool but

714
00:42:52,369 --> 00:42:56,779
objdump works<font color="#E5E5E5"> you know you can do some</font>

715
00:42:55,009 --> 00:42:58,819
like<font color="#CCCCCC"> awk stuff to</font><font color="#E5E5E5"> get it to actually</font>

716
00:42:56,779 --> 00:43:00,380
output the<font color="#E5E5E5"> shell code you want but radar</font>

717
00:42:58,819 --> 00:43:03,308
<font color="#E5E5E5">- is definitely a good good tool to</font>

718
00:43:00,380 --> 00:43:03,309
<font color="#E5E5E5">check out for debugging</font>

719
00:43:11,090 --> 00:43:16,490
I mean it's<font color="#E5E5E5"> like there's a process to</font>

720
00:43:14,270 --> 00:43:18,410
<font color="#CCCCCC">how you bypass one of each one</font><font color="#E5E5E5"> of them</font>

721
00:43:16,490 --> 00:43:20,990
so I mean<font color="#E5E5E5"> learning after</font><font color="#CCCCCC"> you learn the</font>

722
00:43:18,410 --> 00:43:31,399
process I<font color="#E5E5E5"> mean they're both as is just a</font>

723
00:43:20,990 --> 00:43:32,060
process<font color="#E5E5E5"> yeah to doing that</font><font color="#CCCCCC"> stress so</font>

724
00:43:31,400 --> 00:43:34,610
that's a lizard

725
00:43:32,060 --> 00:43:45,279
it's a gangster lizard<font color="#E5E5E5"> who's actually in</font>

726
00:43:34,610 --> 00:43:45,280
space yeah thank you<font color="#E5E5E5"> very much</font>

