1
00:00:00,000 --> 00:00:02,429
after lunch PowerShell is becoming one

2
00:00:02,429 --> 00:00:05,250
of the more important tools especially

3
00:00:05,250 --> 00:00:07,470
when you want to avoid as an attacker

4
00:00:07,470 --> 00:00:09,269
when you want to avoid carrying stuff

5
00:00:09,269 --> 00:00:11,550
with you living off the land now we're

6
00:00:11,550 --> 00:00:14,790
gonna have a nice talk by Yosi and that

7
00:00:14,790 --> 00:00:16,289
shows how to use the power shell as a

8
00:00:16,289 --> 00:00:18,359
hacking tool this is very very exciting

9
00:00:18,359 --> 00:00:20,820
so thank you for that round of applause

10
00:00:20,820 --> 00:00:39,360
for you say ok so hello everybody hi how

11
00:00:39,360 --> 00:00:43,399
are you I'm Yossi and this is what I do

12
00:01:12,240 --> 00:01:22,440
but this is so I I have a day job in a

13
00:01:22,440 --> 00:01:24,570
night job and today I'm going to talk to

14
00:01:24,570 --> 00:01:26,880
you about the maybe less exciting part

15
00:01:26,880 --> 00:01:29,310
of my life but the part I'm as

16
00:01:29,310 --> 00:01:31,409
passionate as I am about the music life

17
00:01:31,409 --> 00:01:33,360
so I've been with keyboards and code for

18
00:01:33,360 --> 00:01:35,460
a long time also with the guitar

19
00:01:35,460 --> 00:01:39,690
quite quite the same time working most

20
00:01:39,690 --> 00:01:40,770
of the time independently as a

21
00:01:40,770 --> 00:01:44,789
freelancer etc and doing some bigger

22
00:01:44,789 --> 00:01:46,440
whitehat basically working a lot with

23
00:01:46,440 --> 00:01:48,509
the government and finance around the

24
00:01:48,509 --> 00:01:49,860
world

25
00:01:49,860 --> 00:01:53,640
I'm co-founding the cyber out not Arc

26
00:01:53,640 --> 00:01:55,679
this is a product that we bypass when we

27
00:01:55,679 --> 00:01:58,259
have to go into a network but now there

28
00:01:58,259 --> 00:02:00,000
are great guys don't get me wrong the

29
00:02:00,000 --> 00:02:03,300
pimp impede us something but still and

30
00:02:03,300 --> 00:02:05,520
I'm also very honored to be a member of

31
00:02:05,520 --> 00:02:07,770
javelin at the board of javelin that got

32
00:02:07,770 --> 00:02:09,479
acquired by Symantec last year and we

33
00:02:09,479 --> 00:02:11,670
have people from the crowd there and

34
00:02:11,670 --> 00:02:14,819
javelin so you'd have to them so gonna

35
00:02:14,819 --> 00:02:17,370
talk about partial ten tips out of

36
00:02:17,370 --> 00:02:19,290
honestly a gazillion I can talk about

37
00:02:19,290 --> 00:02:21,470
partial and my trip with partial since

38
00:02:21,470 --> 00:02:24,299
2003 since the Monad days and then

39
00:02:24,299 --> 00:02:25,950
Microsoft shell and then they branded it

40
00:02:25,950 --> 00:02:27,870
PowerShell so really over a decade

41
00:02:27,870 --> 00:02:29,459
walking with PowerShell all the dog food

42
00:02:29,459 --> 00:02:32,519
debate the better stuff and training

43
00:02:32,519 --> 00:02:33,989
about that and also showing you some

44
00:02:33,989 --> 00:02:35,100
cool research so that with you so

45
00:02:35,100 --> 00:02:37,079
basically what this power show for

46
00:02:37,079 --> 00:02:38,400
people that are not totally aware about

47
00:02:38,400 --> 00:02:40,739
partial that's that blue shell think

48
00:02:40,739 --> 00:02:44,130
blue icon that's normally we caught the

49
00:02:44,130 --> 00:02:46,110
Microsoft shell for C's admins and that

50
00:02:46,110 --> 00:02:48,470
that helps hackers a lot because it's

51
00:02:48,470 --> 00:02:51,810
commonly missed misleadingly perceived

52
00:02:51,810 --> 00:02:53,610
as the shell for sis that means but for

53
00:02:53,610 --> 00:02:55,320
hackers this is really a totally

54
00:02:55,320 --> 00:02:57,150
different story PowerShell is just a

55
00:02:57,150 --> 00:02:58,859
spoon you know and we do whatever we

56
00:02:58,859 --> 00:03:00,780
want with that we Bend that spoon on a

57
00:03:00,780 --> 00:03:03,570
daily basis and I'll show you how it's

58
00:03:03,570 --> 00:03:06,030
basically CMD on steroids but it's much

59
00:03:06,030 --> 00:03:08,850
more than that it's a dotnet CMD it's

60
00:03:08,850 --> 00:03:11,790
really living off the land heaven for

61
00:03:11,790 --> 00:03:13,739
for Windows it's a wrapper around

62
00:03:13,739 --> 00:03:16,620
windows every API protocol system calls

63
00:03:16,620 --> 00:03:20,070
whatever every DLL everything that you

64
00:03:20,070 --> 00:03:23,220
ever imagined you can address with a lot

65
00:03:23,220 --> 00:03:25,349
of functionality and very little syntax

66
00:03:25,349 --> 00:03:27,829
and it's living off the land so it's pre

67
00:03:27,829 --> 00:03:29,700
pre-installed it's built in Windows

68
00:03:29,700 --> 00:03:32,359
seven and above and it runs even on XP

69
00:03:32,359 --> 00:03:35,790
etc it's probably the ideal tool of

70
00:03:35,790 --> 00:03:37,290
choice in many scenarios for post

71
00:03:37,290 --> 00:03:39,209
exploitation and other stuff and it's

72
00:03:39,209 --> 00:03:40,799
also open source for almost three years

73
00:03:40,799 --> 00:03:42,840
now people are not aware of it but

74
00:03:42,840 --> 00:03:44,340
PowerShell is totally open source on

75
00:03:44,340 --> 00:03:45,569
github

76
00:03:45,569 --> 00:03:47,879
before github belongs to Microsoft

77
00:03:47,879 --> 00:03:51,239
actually and it runs really nice on

78
00:03:51,239 --> 00:03:54,239
Linux and Mac OS X you can run docker

79
00:03:54,239 --> 00:03:56,489
etc so you can do really cool stuff

80
00:03:56,489 --> 00:03:57,599
about it but most important to think

81
00:03:57,599 --> 00:03:59,579
about partially it's based on dotnet

82
00:03:59,579 --> 00:04:01,169
framework and it works with objects when

83
00:04:01,169 --> 00:04:02,700
I say works with objects it means that

84
00:04:02,700 --> 00:04:04,680
everything you do in PowerShell you get

85
00:04:04,680 --> 00:04:07,260
back an object so think about you know

86
00:04:07,260 --> 00:04:11,760
the day-to-day productivity of bash and

87
00:04:11,760 --> 00:04:13,530
and stuff like that and very intuitive

88
00:04:13,530 --> 00:04:16,949
shells but with the power of Python so I

89
00:04:16,949 --> 00:04:19,199
like to call it if we take a bash ksh

90
00:04:19,199 --> 00:04:21,298
sea shell scape Python Perl and dotnet

91
00:04:21,298 --> 00:04:23,490
into a motel room and you're here funny

92
00:04:23,490 --> 00:04:26,550
noises her and in the morning there was

93
00:04:26,550 --> 00:04:28,860
a baby conceived that would be partial

94
00:04:28,860 --> 00:04:32,099
so here you seen like four four five

95
00:04:32,099 --> 00:04:34,650
words you know with two three pipes I

96
00:04:34,650 --> 00:04:38,159
took a bunch of IP addresses around the

97
00:04:38,159 --> 00:04:40,710
curl I pin for got the JSON converted

98
00:04:40,710 --> 00:04:42,870
the JSON in memory living off the land

99
00:04:42,870 --> 00:04:47,699
and got a grid on on the fly so that's

100
00:04:47,699 --> 00:04:49,530
the power of PowerShell that's why it's

101
00:04:49,530 --> 00:04:52,590
called power shell so you can have a lot

102
00:04:52,590 --> 00:04:53,610
of stuff with PowerShell let's start

103
00:04:53,610 --> 00:04:54,780
with the basic I'll run it through some

104
00:04:54,780 --> 00:04:56,729
basic and then we have some research and

105
00:04:56,729 --> 00:04:58,979
then we saw some fun stuff so you can

106
00:04:58,979 --> 00:05:00,389
invoke ax you could basically any text

107
00:05:00,389 --> 00:05:04,349
stream you think compressed memory files

108
00:05:04,349 --> 00:05:06,120
without touching the disk you can use

109
00:05:06,120 --> 00:05:09,479
com objects msxml ie but also from

110
00:05:09,479 --> 00:05:11,310
windows 7 and above you can use the net

111
00:05:11,310 --> 00:05:13,650
web client from dotnet and you can also

112
00:05:13,650 --> 00:05:15,539
invoke web request the curl W get of

113
00:05:15,539 --> 00:05:18,300
PowerShell so basically basically invoke

114
00:05:18,300 --> 00:05:20,759
expression or ie X that it's Elias you

115
00:05:20,759 --> 00:05:23,460
take any text and basically it executes

116
00:05:23,460 --> 00:05:26,580
it okay so if I take get W my win32 bios

117
00:05:26,580 --> 00:05:29,639
I pipe it into invoke expression it

118
00:05:29,639 --> 00:05:33,719
actually execute that code and this is

119
00:05:33,719 --> 00:05:36,000
very easy also to bypass script

120
00:05:36,000 --> 00:05:37,770
execution policy stuff like that but you

121
00:05:37,770 --> 00:05:39,009
can also use

122
00:05:39,009 --> 00:05:42,249
built-in dotnet web client class this

123
00:05:42,249 --> 00:05:43,689
allows you to download the strings

124
00:05:43,689 --> 00:05:45,610
download files etc you can download the

125
00:05:45,610 --> 00:05:48,460
string from anywhere in the land on the

126
00:05:48,460 --> 00:05:50,379
internet or form a shortcut and then you

127
00:05:50,379 --> 00:05:51,969
can pipe it to invoke installation and

128
00:05:51,969 --> 00:05:54,879
just runs it so it's very very easy very

129
00:05:54,879 --> 00:05:56,589
popular methods you see it in many

130
00:05:56,589 --> 00:05:58,779
malware cases in the analysis

131
00:05:58,779 --> 00:06:00,969
investigations and you can also curl

132
00:06:00,969 --> 00:06:03,189
that from your own server and that works

133
00:06:03,189 --> 00:06:03,849
beautifully

134
00:06:03,849 --> 00:06:05,770
you can also harness the power of dotnet

135
00:06:05,770 --> 00:06:07,990
to your own good and you can do that

136
00:06:07,990 --> 00:06:11,620
with very basically everything you can

137
00:06:11,620 --> 00:06:13,089
think about you know everything you need

138
00:06:13,089 --> 00:06:15,159
to do the dotnet framework is there for

139
00:06:15,159 --> 00:06:17,229
your help you can harness its power for

140
00:06:17,229 --> 00:06:20,039
everything whether it's mathematical

141
00:06:20,039 --> 00:06:22,479
algorithms or whatever if you want to do

142
00:06:22,479 --> 00:06:25,349
some calculations byte calculations

143
00:06:25,349 --> 00:06:28,029
there is a lot of work on done on the

144
00:06:28,029 --> 00:06:29,800
system reflection and reflection dll's

145
00:06:29,800 --> 00:06:31,930
so you can actually call any dll

146
00:06:31,930 --> 00:06:35,649
directly from the command line and check

147
00:06:35,649 --> 00:06:37,389
stuff whenever you want so if I want to

148
00:06:37,389 --> 00:06:38,770
know if the caps lock is on I just

149
00:06:38,770 --> 00:06:41,469
called the reflection console class and

150
00:06:41,469 --> 00:06:42,849
I can know if the cap song is on or off

151
00:06:42,849 --> 00:06:44,709
very basic stuff but sometimes you know

152
00:06:44,709 --> 00:06:46,120
when you're in the field and especially

153
00:06:46,120 --> 00:06:47,919
when you are doing red teaming and and

154
00:06:47,919 --> 00:06:49,959
you want to do stuff you know with

155
00:06:49,959 --> 00:06:51,759
keyboard access whether it's a seat or

156
00:06:51,759 --> 00:06:53,889
or physical like so you want to be able

157
00:06:53,889 --> 00:06:56,289
to do that stuff quickly so partial is

158
00:06:56,289 --> 00:06:57,969
about that it thinks about the person

159
00:06:57,969 --> 00:07:00,370
and it thinks about the person that has

160
00:07:00,370 --> 00:07:01,749
little time and needs to do a lot of

161
00:07:01,749 --> 00:07:03,959
stuff so in this case I'm just

162
00:07:03,959 --> 00:07:07,120
converting to travel a string and then

163
00:07:07,120 --> 00:07:08,550
for each string I'm checking if it's

164
00:07:08,550 --> 00:07:11,080
very simple but just to show you the

165
00:07:11,080 --> 00:07:13,569
power of the language third you can

166
00:07:13,569 --> 00:07:16,029
convert any to any whatever any you have

167
00:07:16,029 --> 00:07:17,860
in mind you can compare it digest it

168
00:07:17,860 --> 00:07:20,289
convert it XML JSON by its XML and you

169
00:07:20,289 --> 00:07:23,050
can also convert form convert to and you

170
00:07:23,050 --> 00:07:24,789
can also import an export for example

171
00:07:24,789 --> 00:07:27,009
you can convert anything to JSON so you

172
00:07:27,009 --> 00:07:29,319
can take a process all its threads

173
00:07:29,319 --> 00:07:31,779
everything you want and you can convert

174
00:07:31,779 --> 00:07:33,610
it to JSON on the fly this is living off

175
00:07:33,610 --> 00:07:36,039
the land I these functions until now

176
00:07:36,039 --> 00:07:38,979
there's no special code here yeah it

177
00:07:38,979 --> 00:07:41,199
exists in every Windows version that you

178
00:07:41,199 --> 00:07:43,419
can run it and execute it you can

179
00:07:43,419 --> 00:07:46,419
convert to HTML CSV quite easily this is

180
00:07:46,419 --> 00:07:47,740
stuff that it's nice for the system

181
00:07:47,740 --> 00:07:50,529
admins can convert to XML of course and

182
00:07:50,529 --> 00:07:52,620
you can also export export means convert

183
00:07:52,620 --> 00:07:55,740
and saving out file redirecting

184
00:07:55,740 --> 00:07:58,590
basically the output to to a file or to

185
00:07:58,590 --> 00:08:00,810
a printer or whatever we want and in

186
00:08:00,810 --> 00:08:03,000
this case of course we we got the the

187
00:08:03,000 --> 00:08:06,080
XML but we can also do some other

188
00:08:06,080 --> 00:08:08,790
conversions for example we can take any

189
00:08:08,790 --> 00:08:09,510
bytes

190
00:08:09,510 --> 00:08:12,419
I can read bytes of a file very easily

191
00:08:12,419 --> 00:08:14,669
with the IO file read all bytes so I can

192
00:08:14,669 --> 00:08:17,340
read the bytes of this file and I can

193
00:08:17,340 --> 00:08:19,919
convert them very easily to for example

194
00:08:19,919 --> 00:08:22,530
400 hex I can get to string and I can

195
00:08:22,530 --> 00:08:25,530
get the hex from that from that back

196
00:08:25,530 --> 00:08:28,949
from those bytes and if I want to dwell

197
00:08:28,949 --> 00:08:31,500
in it some more I can take those bytes

198
00:08:31,500 --> 00:08:35,370
and actually join them and I can get the

199
00:08:35,370 --> 00:08:35,909
o hex

200
00:08:35,909 --> 00:08:38,190
so all this one-liner is very powerful

201
00:08:38,190 --> 00:08:40,950
living of the land let's get into the

202
00:08:40,950 --> 00:08:43,679
juicy stuff as hackers okay so you can

203
00:08:43,679 --> 00:08:46,529
fish any credentials with a dialog box

204
00:08:46,529 --> 00:08:48,779
actually there is a one-liner to do it

205
00:08:48,779 --> 00:08:50,490
and you can customize in that wine

206
00:08:50,490 --> 00:08:54,810
one-liner the text that you want to have

207
00:08:54,810 --> 00:08:57,480
in the form header the text inside it

208
00:08:57,480 --> 00:08:59,250
cetera and you can also take it to the

209
00:08:59,250 --> 00:09:00,450
next level with a Windows security

210
00:09:00,450 --> 00:09:03,630
credential well you I with the stuff

211
00:09:03,630 --> 00:09:05,160
that Wheels did I think is here in the

212
00:09:05,160 --> 00:09:08,220
audience with red liquor so this is a

213
00:09:08,220 --> 00:09:10,410
single liner sometimes you don't have to

214
00:09:10,410 --> 00:09:12,209
go to Elsa's and dumping and mimikatz

215
00:09:12,209 --> 00:09:14,250
and all this stuff you just pop up this

216
00:09:14,250 --> 00:09:16,350
credential also remoting Lee and I can

217
00:09:16,350 --> 00:09:17,839
get the network credential in clear-text

218
00:09:17,839 --> 00:09:20,790
who speaks about dumps you know people

219
00:09:20,790 --> 00:09:22,440
come back to the old school stuff you

220
00:09:22,440 --> 00:09:24,510
know just credential phishing and you

221
00:09:24,510 --> 00:09:26,760
can also get this dialog box this baby

222
00:09:26,760 --> 00:09:29,910
actually sends an HTTP GET you know to

223
00:09:29,910 --> 00:09:32,520
Apache server or whatever and it leaks

224
00:09:32,520 --> 00:09:34,680
your credentials to somewhere else in

225
00:09:34,680 --> 00:09:36,570
the network or outside the network let's

226
00:09:36,570 --> 00:09:40,260
get serious PowerShell is an illusion

227
00:09:40,260 --> 00:09:42,240
under the dotnet framework partial X is

228
00:09:42,240 --> 00:09:44,130
just a variant you know it's like it's

229
00:09:44,130 --> 00:09:46,140
plague it's a disease it's just one

230
00:09:46,140 --> 00:09:48,390
variant out of the many and you can

231
00:09:48,390 --> 00:09:50,130
basically what you call PowerShell is

232
00:09:50,130 --> 00:09:51,750
system management automation inside the

233
00:09:51,750 --> 00:09:53,610
dotnet framework it's a built in into

234
00:09:53,610 --> 00:09:55,470
the framework hence windows in the last

235
00:09:55,470 --> 00:09:57,959
two decades and what you see is just the

236
00:09:57,959 --> 00:10:00,350
host interface so

237
00:10:00,350 --> 00:10:02,700
PowerShell essentially is just variant

238
00:10:02,700 --> 00:10:03,720
so if you're trying to protect

239
00:10:03,720 --> 00:10:06,630
PowerShell exit' you're maybe going

240
00:10:06,630 --> 00:10:09,300
statistically to an right place but

241
00:10:09,300 --> 00:10:11,990
you're living away the serious hackers

242
00:10:11,990 --> 00:10:14,790
so PowerShell for example can be in very

243
00:10:14,790 --> 00:10:16,320
interesting places for example did you

244
00:10:16,320 --> 00:10:18,240
know that the only one troubleshoot

245
00:10:18,240 --> 00:10:20,580
wizards it's just a powerful script as

246
00:10:20,580 --> 00:10:22,080
you see in the background there is a

247
00:10:22,080 --> 00:10:24,330
nice defense control technique that's

248
00:10:24,330 --> 00:10:26,460
called transcriptions so it transcripts

249
00:10:26,460 --> 00:10:28,500
every PowerShell script that you run you

250
00:10:28,500 --> 00:10:29,760
have this is not turned on by default

251
00:10:29,760 --> 00:10:31,590
you have to run it with go policy

252
00:10:31,590 --> 00:10:35,700
registry and basically it money its

253
00:10:35,700 --> 00:10:38,460
audits all the input outputs from a

254
00:10:38,460 --> 00:10:40,590
partial code even if the host of the

255
00:10:40,590 --> 00:10:43,110
partial code is not partial so what do

256
00:10:43,110 --> 00:10:45,150
you inject it run dll whatever or this

257
00:10:45,150 --> 00:10:47,700
exit that I built that just gets out the

258
00:10:47,700 --> 00:10:49,800
BIOS information so as you can see it

259
00:10:49,800 --> 00:10:52,230
got audited and you see the transcript

260
00:10:52,230 --> 00:10:53,700
so basically PowerShell can come from

261
00:10:53,700 --> 00:10:56,490
any executable that references system

262
00:10:56,490 --> 00:11:00,930
management automation we can go further

263
00:11:00,930 --> 00:11:04,400
than that for example I can use this

264
00:11:04,400 --> 00:11:08,910
base64 encoded string yes for getting

265
00:11:08,910 --> 00:11:11,910
the BIOS information and what I'm going

266
00:11:11,910 --> 00:11:13,710
to do now is I'm going to run it and I'm

267
00:11:13,710 --> 00:11:14,880
going to show you how we run PowerShell

268
00:11:14,880 --> 00:11:16,590
without partial X that we saw now I'm

269
00:11:16,590 --> 00:11:18,210
going to run PowerShell without a

270
00:11:18,210 --> 00:11:22,290
process so now I turned on process

271
00:11:22,290 --> 00:11:24,480
creation and termination inside the

272
00:11:24,480 --> 00:11:26,760
policy of this machine and as you can

273
00:11:26,760 --> 00:11:30,330
see I have we have some code that what

274
00:11:30,330 --> 00:11:31,920
it does basically it queries the event

275
00:11:31,920 --> 00:11:33,300
log of the machine skilled event log and

276
00:11:33,300 --> 00:11:35,700
shows us the last creation and

277
00:11:35,700 --> 00:11:37,680
termination events so you can see

278
00:11:37,680 --> 00:11:40,380
magnified that I just used in in this

279
00:11:40,380 --> 00:11:43,260
short video and now we're gonna run some

280
00:11:43,260 --> 00:11:45,180
other processes we're gonna run out but

281
00:11:45,180 --> 00:11:47,090
ok I'm gonna run notepad we're gonna

282
00:11:47,090 --> 00:11:49,410
maximize no wait a minute not but and

283
00:11:49,410 --> 00:11:51,630
then we're gonna run this again and as

284
00:11:51,630 --> 00:11:52,080
you can see

285
00:11:52,080 --> 00:11:55,050
voila so we saw notepad SVC host you can

286
00:11:55,050 --> 00:11:57,870
count on SVC O's to appear in every 10

287
00:11:57,870 --> 00:11:59,580
20 seconds or something like that in

288
00:11:59,580 --> 00:12:03,090
Windows and basically I have this MST SC

289
00:12:03,090 --> 00:12:04,740
you know the max of terminal source

290
00:12:04,740 --> 00:12:08,550
client the RDP but this is a slightly

291
00:12:08,550 --> 00:12:10,380
different variation of it's that runs

292
00:12:10,380 --> 00:12:12,390
and coded strings so if the customer is

293
00:12:12,390 --> 00:12:13,950
not checking for hashing

294
00:12:13,950 --> 00:12:18,030
put it as MSDS C and all the customer

295
00:12:18,030 --> 00:12:21,090
will see is MSDS cxz was launched so you

296
00:12:21,090 --> 00:12:22,740
see I have my mstc

297
00:12:22,740 --> 00:12:25,410
they I handle this executable what it

298
00:12:25,410 --> 00:12:27,660
has is basically a piece of code that

299
00:12:27,660 --> 00:12:29,670
runs a system of management automation

300
00:12:29,670 --> 00:12:31,860
around space but now I'm going to run a

301
00:12:31,860 --> 00:12:33,570
different function that I'm going to put

302
00:12:33,570 --> 00:12:36,240
on the github later and what this

303
00:12:36,240 --> 00:12:37,950
function does it takes a binary weather

304
00:12:37,950 --> 00:12:40,140
URL Oh a file and it invokes it in

305
00:12:40,140 --> 00:12:42,210
memory we use I use it the dotnet load

306
00:12:42,210 --> 00:12:44,670
binary function and this means that I'm

307
00:12:44,670 --> 00:12:46,740
loading the binary in memory to the

308
00:12:46,740 --> 00:12:49,500
c-sharp compiler and I'm running encoded

309
00:12:49,500 --> 00:12:53,640
bases in 64 without using the process

310
00:12:53,640 --> 00:12:57,180
good luck with that so there is no spoon

311
00:12:57,180 --> 00:12:58,830
marshalling this is a spoon guys you

312
00:12:58,830 --> 00:13:00,180
know don't get excited about spoons

313
00:13:00,180 --> 00:13:01,680
especially if they're plastic not like

314
00:13:01,680 --> 00:13:03,870
idiots it's very good spoon very good

315
00:13:03,870 --> 00:13:08,010
spoon you can have culture called the

316
00:13:08,010 --> 00:13:11,910
PowerShell PSW a power PWS age or pouch

317
00:13:11,910 --> 00:13:13,320
Alexa and you can actually run

318
00:13:13,320 --> 00:13:15,000
PowerShell as you just saw from binary

319
00:13:15,000 --> 00:13:17,040
without running the binary process next

320
00:13:17,040 --> 00:13:20,520
you can run a power language dotnet

321
00:13:20,520 --> 00:13:22,320
language directly in pouch it doesn't

322
00:13:22,320 --> 00:13:23,760
matter that you can run the syntax

323
00:13:23,760 --> 00:13:26,040
directly VB script JavaScript C shop and

324
00:13:26,040 --> 00:13:28,290
you can also utilize local variables and

325
00:13:28,290 --> 00:13:30,300
functions from your sessions to remote

326
00:13:30,300 --> 00:13:33,090
sessions so first thing we're gonna show

327
00:13:33,090 --> 00:13:35,180
I'm gonna put some C shout code just

328
00:13:35,180 --> 00:13:39,690
between this here yeah I don't know if

329
00:13:39,690 --> 00:13:40,980
you can see that but that's basically a

330
00:13:40,980 --> 00:13:43,500
c-sharp code and when I run it I add

331
00:13:43,500 --> 00:13:45,510
type so now I have this type inside my

332
00:13:45,510 --> 00:13:48,660
shell and I run this C sharp function

333
00:13:48,660 --> 00:13:50,640
that this is c-sharp function is running

334
00:13:50,640 --> 00:13:52,470
directly in PowerShell so I don't need

335
00:13:52,470 --> 00:13:54,060
to compile anything no DLL is

336
00:13:54,060 --> 00:13:56,420
executables I can run C shop directly

337
00:13:56,420 --> 00:13:59,310
I'm running on a hostname called 1 DC 1

338
00:13:59,310 --> 00:14:01,950
and I have a remote session saved into a

339
00:14:01,950 --> 00:14:04,770
variable on a client launch CL 1 I can

340
00:14:04,770 --> 00:14:06,120
get this partial session partial

341
00:14:06,120 --> 00:14:09,270
sessions the way the powershell it's

342
00:14:09,270 --> 00:14:11,280
like the built-in ssh for powershell PS

343
00:14:11,280 --> 00:14:13,020
remoting win RM works with the web

344
00:14:13,020 --> 00:14:14,700
services management protocol soap XML

345
00:14:14,700 --> 00:14:17,220
and you can see that when I run I invoke

346
00:14:17,220 --> 00:14:18,840
command into this remote session so I

347
00:14:18,840 --> 00:14:20,850
can see the host name of that remote

348
00:14:20,850 --> 00:14:22,890
machine machine is of course loan C l1

349
00:14:22,890 --> 00:14:25,379
and I can on I'd pick config whatever of

350
00:14:25,379 --> 00:14:26,970
this is the new RDP instead of

351
00:14:26,970 --> 00:14:29,479
ransomware deployment protocol you have

352
00:14:29,479 --> 00:14:34,379
PS remoting so this is my IP and now I

353
00:14:34,379 --> 00:14:36,539
can run whatever I want and I'll show

354
00:14:36,539 --> 00:14:38,519
you this dollar using so dollar using

355
00:14:38,519 --> 00:14:42,539
basically you can send it it's just HTTP

356
00:14:42,539 --> 00:14:45,269
and it's also encrypted with your TGS

357
00:14:45,269 --> 00:14:47,159
when you work in a domain so a couple

358
00:14:47,159 --> 00:14:48,959
stickers encrypts all the traffic so I

359
00:14:48,959 --> 00:14:51,419
can just send over local variables to

360
00:14:51,419 --> 00:14:53,729
one hundred one thousand ten thousands

361
00:14:53,729 --> 00:14:55,589
machines from my own machine I don't

362
00:14:55,589 --> 00:14:57,419
have to redistribute code or wave

363
00:14:57,419 --> 00:14:59,609
variables now I created the local

364
00:14:59,609 --> 00:15:02,039
function get hostname that what that's

365
00:15:02,039 --> 00:15:04,319
what this function does but I can run my

366
00:15:04,319 --> 00:15:06,209
local function directly on the remote

367
00:15:06,209 --> 00:15:08,819
host so if I run it locally of course

368
00:15:08,819 --> 00:15:10,259
this is the result this is the result

369
00:15:10,259 --> 00:15:11,849
and you don't have this function in the

370
00:15:11,849 --> 00:15:13,319
remote machine as you probably

371
00:15:13,319 --> 00:15:15,569
understood so that makes things

372
00:15:15,569 --> 00:15:16,289
interesting

373
00:15:16,289 --> 00:15:18,899
seven you can actually turn everything

374
00:15:18,899 --> 00:15:20,249
into an object when you walk with

375
00:15:20,249 --> 00:15:22,499
PowerShell literally no reg X very

376
00:15:22,499 --> 00:15:24,659
intuitive in memory on the fly there are

377
00:15:24,659 --> 00:15:26,669
a lot of living off the land tools that

378
00:15:26,669 --> 00:15:28,439
do a great job you know see a curls

379
00:15:28,439 --> 00:15:31,169
whatever a net start and but the problem

380
00:15:31,169 --> 00:15:32,729
with them is that they work with text

381
00:15:32,729 --> 00:15:35,129
you know and text is very nice for

382
00:15:35,129 --> 00:15:36,749
example one of those tools is K list

383
00:15:36,749 --> 00:15:39,449
Kerberos tickets in memory and K list of

384
00:15:39,449 --> 00:15:41,519
course I can wrap it selects playing I

385
00:15:41,519 --> 00:15:43,739
can take from its certain strings at UTP

386
00:15:43,739 --> 00:15:46,199
but I can do more with that maybe I want

387
00:15:46,199 --> 00:15:48,869
the entire ticket so I can how can I do

388
00:15:48,869 --> 00:15:50,999
that without going into a gux headache

389
00:15:50,999 --> 00:15:54,539
so I can basically just send out a

390
00:15:54,539 --> 00:15:57,689
sample output from any tool mimic its

391
00:15:57,689 --> 00:16:00,869
net that whatever and I can just tell

392
00:16:00,869 --> 00:16:03,509
PowerShell how it standout output of

393
00:16:03,509 --> 00:16:06,419
this application this tool looks like

394
00:16:06,419 --> 00:16:08,939
and I can just put it between between

395
00:16:08,939 --> 00:16:11,639
curly brackets and just name my own

396
00:16:11,639 --> 00:16:14,249
properties and basically it will convert

397
00:16:14,249 --> 00:16:16,259
it to objects according to the curly

398
00:16:16,259 --> 00:16:19,589
brackets and property or properties that

399
00:16:19,589 --> 00:16:22,049
I put so just go over a bit quickly here

400
00:16:22,049 --> 00:16:24,869
and as you can see I delete whatever I

401
00:16:24,869 --> 00:16:27,479
don't need and voila now I can pipe it

402
00:16:27,479 --> 00:16:28,979
into convert from string and use the

403
00:16:28,979 --> 00:16:31,139
template file I just created and watch

404
00:16:31,139 --> 00:16:34,019
this it literally turns everything into

405
00:16:34,019 --> 00:16:36,060
objects so you can use any two

406
00:16:36,060 --> 00:16:38,040
you want and convert it into objects in

407
00:16:38,040 --> 00:16:41,160
like two three minutes and turn it into

408
00:16:41,160 --> 00:16:44,520
whatever and just you know because you

409
00:16:44,520 --> 00:16:46,440
know it's something that it's really

410
00:16:46,440 --> 00:16:50,790
meaty bookish to do so you can net that

411
00:16:50,790 --> 00:16:52,620
convert from straying into a template I

412
00:16:52,620 --> 00:16:53,970
put in a memo it's just a string

413
00:16:53,970 --> 00:16:55,890
template content you don't need it on a

414
00:16:55,890 --> 00:16:59,040
file and then I get objects so you can

415
00:16:59,040 --> 00:17:00,990
just basically turn anything you want

416
00:17:00,990 --> 00:17:03,930
into objects of course pouch is a

417
00:17:03,930 --> 00:17:06,329
full-fledged blown shell you can do

418
00:17:06,329 --> 00:17:08,220
whatever you want on shellcodes buffers

419
00:17:08,220 --> 00:17:12,720
compressions etc let's look at a real

420
00:17:12,720 --> 00:17:15,000
malicious code sample I caught on a on a

421
00:17:15,000 --> 00:17:19,260
custom L so this has a base64 encoded

422
00:17:19,260 --> 00:17:20,790
think that were restarted but when I

423
00:17:20,790 --> 00:17:24,030
could decode it from base64 that's when

424
00:17:24,030 --> 00:17:26,579
we get the real PowerShell going on so

425
00:17:26,579 --> 00:17:29,790
as you can see it creates there is an

426
00:17:29,790 --> 00:17:31,680
invoke expression we saw this bad guy in

427
00:17:31,680 --> 00:17:33,390
the beginning and then there is a stream

428
00:17:33,390 --> 00:17:34,950
model and it decompresses it and

429
00:17:34,950 --> 00:17:36,390
enriched to end you have to be careful

430
00:17:36,390 --> 00:17:37,740
with the invoke expression even if

431
00:17:37,740 --> 00:17:40,170
you're running over on a VM you know

432
00:17:40,170 --> 00:17:43,110
just neutralize it and just run it

433
00:17:43,110 --> 00:17:46,370
through the end and then you'll get the

434
00:17:46,370 --> 00:17:48,840
decompressed string and here in the

435
00:17:48,840 --> 00:17:50,850
decompressed at the code so actually now

436
00:17:50,850 --> 00:17:52,860
we get the partial code as you can see

437
00:17:52,860 --> 00:17:54,900
it's doing via log stuff that we know

438
00:17:54,900 --> 00:17:58,020
some c-sharp code and it's doing of

439
00:17:58,020 --> 00:17:59,850
course allocating a buffer can anything

440
00:17:59,850 --> 00:18:01,470
and thread and one thing for a single

441
00:18:01,470 --> 00:18:04,380
object which is the thread okay so all

442
00:18:04,380 --> 00:18:05,850
we have to do is just to get the

443
00:18:05,850 --> 00:18:06,420
shellcode

444
00:18:06,420 --> 00:18:08,910
so now I can get the shellcode directly

445
00:18:08,910 --> 00:18:10,860
from that and this shellcode I can run

446
00:18:10,860 --> 00:18:12,690
in shellcode debugger or whatever D

447
00:18:12,690 --> 00:18:14,400
compile it see the actual CPU

448
00:18:14,400 --> 00:18:17,490
instructions etc or form PowerShell but

449
00:18:17,490 --> 00:18:19,200
there are partial defenses you know

450
00:18:19,200 --> 00:18:20,910
partial has great defenses we can talk

451
00:18:20,910 --> 00:18:23,220
about all of them protected event login

452
00:18:23,220 --> 00:18:24,900
is the interesting one that nobody talks

453
00:18:24,900 --> 00:18:27,960
a lot of basically it's the ability to

454
00:18:27,960 --> 00:18:30,810
because when you log partial events to

455
00:18:30,810 --> 00:18:32,790
the event log so basically you log

456
00:18:32,790 --> 00:18:35,280
everything also the IT systems on the

457
00:18:35,280 --> 00:18:37,950
day-to-day and basically it logs

458
00:18:37,950 --> 00:18:40,970
connection strings the database you know

459
00:18:40,970 --> 00:18:45,270
hosts in the network etc so Microsoft

460
00:18:45,270 --> 00:18:47,250
developed protected event logging

461
00:18:47,250 --> 00:18:48,580
basically register

462
00:18:48,580 --> 00:18:50,710
the HP local machine that you can

463
00:18:50,710 --> 00:18:53,320
actually encrypt with a public key

464
00:18:53,320 --> 00:18:54,730
certificate with cryptography it

465
00:18:54,730 --> 00:18:57,460
measures syntax CMS you can protect the

466
00:18:57,460 --> 00:19:00,250
messages and that's a very cool blue

467
00:19:00,250 --> 00:19:02,649
team technique but what if I thought

468
00:19:02,649 --> 00:19:04,409
about it I tried it in few customer

469
00:19:04,409 --> 00:19:07,059
engagements and it worked like magic

470
00:19:07,059 --> 00:19:08,919
what if you think ransomware for event

471
00:19:08,919 --> 00:19:10,960
logs what if you turn it around and you

472
00:19:10,960 --> 00:19:13,570
use it against Microsoft so that's

473
00:19:13,570 --> 00:19:14,710
exactly what I do

474
00:19:14,710 --> 00:19:19,059
the minute I have LPE so I take my own

475
00:19:19,059 --> 00:19:22,059
certificate so if you look today on the

476
00:19:22,059 --> 00:19:24,399
event log so that's what you see from

477
00:19:24,399 --> 00:19:27,399
the messages in the event log you can

478
00:19:27,399 --> 00:19:28,960
see the invocation and the warnings you

479
00:19:28,960 --> 00:19:31,269
can see the actual content in the

480
00:19:31,269 --> 00:19:33,580
message of the of the event but once I

481
00:19:33,580 --> 00:19:35,409
set this property to on to enable

482
00:19:35,409 --> 00:19:38,139
protected event login and I give it my

483
00:19:38,139 --> 00:19:41,080
own thumb print my own certificate now

484
00:19:41,080 --> 00:19:43,419
when I will run a different code or a

485
00:19:43,419 --> 00:19:45,549
different shell for example I will open

486
00:19:45,549 --> 00:19:47,980
up fire up a new shell and run some code

487
00:19:47,980 --> 00:19:51,309
in it so the next thing that will happen

488
00:19:51,309 --> 00:19:53,740
is now go back and query the the event

489
00:19:53,740 --> 00:19:56,740
viewer is basically me as an attacker

490
00:19:56,740 --> 00:19:59,289
everything I do is the syslog gets all

491
00:19:59,289 --> 00:20:00,940
the right information it gets the pan

492
00:20:00,940 --> 00:20:03,899
created ID level but everything is

493
00:20:03,899 --> 00:20:07,299
encrypted so good luck with your

494
00:20:07,299 --> 00:20:09,909
forensics afterwards to understand what

495
00:20:09,909 --> 00:20:14,980
we just did here so don't ask what the

496
00:20:14,980 --> 00:20:16,659
shell can do for you ask what you can do

497
00:20:16,659 --> 00:20:18,880
to the ship so you're sure I'll pass you

498
00:20:18,880 --> 00:20:21,220
say we thought about that we have all

499
00:20:21,220 --> 00:20:25,679
meld lue il-allah and the team in

500
00:20:25,679 --> 00:20:28,990
javelin and and really I was very happy

501
00:20:28,990 --> 00:20:31,929
to be part of this research basically

502
00:20:31,929 --> 00:20:34,899
almost led us into the beautiful ways of

503
00:20:34,899 --> 00:20:37,120
you know getting cheated code addresses

504
00:20:37,120 --> 00:20:38,830
working with the seal our profiler

505
00:20:38,830 --> 00:20:40,750
really a calm object that I don't know

506
00:20:40,750 --> 00:20:42,850
how many of you are aware or using but

507
00:20:42,850 --> 00:20:44,590
beautiful way to hook powershell and

508
00:20:44,590 --> 00:20:46,240
then hook the system called dll for the

509
00:20:46,240 --> 00:20:48,789
event log and then to hook the all the

510
00:20:48,789 --> 00:20:51,269
calls to him am site or the system calls

511
00:20:51,269 --> 00:20:53,289
basically would simply replace with that

512
00:20:53,289 --> 00:20:56,830
opcode and so i don't have time to show

513
00:20:56,830 --> 00:20:59,020
this and alma talked about it in depth

514
00:20:59,020 --> 00:20:59,920
but i will

515
00:20:59,920 --> 00:21:02,340
tell you that one way once we run this

516
00:21:02,340 --> 00:21:05,410
I'll let you see almost talking they'll

517
00:21:05,410 --> 00:21:07,900
be gone once you run this you have no

518
00:21:07,900 --> 00:21:09,670
visibility of the attacker in visi

519
00:21:09,670 --> 00:21:11,590
she'll literally no transcripts no

520
00:21:11,590 --> 00:21:14,230
logging no a MSI you can run whatever

521
00:21:14,230 --> 00:21:15,910
you want mimic heads and nothing gets

522
00:21:15,910 --> 00:21:17,830
logged or it powers he'll that's what it

523
00:21:17,830 --> 00:21:18,190
does

524
00:21:18,190 --> 00:21:21,040
key takeaways partial rocks for the red

525
00:21:21,040 --> 00:21:23,860
team try to use PowerShell to no blue

526
00:21:23,860 --> 00:21:25,900
team defenses there or using visi shell

527
00:21:25,900 --> 00:21:28,240
we have flagged as Melville but you can

528
00:21:28,240 --> 00:21:29,860
create variants because we are in github

529
00:21:29,860 --> 00:21:31,810
look it look for it

530
00:21:31,810 --> 00:21:33,340
don't lose your Python skills but for

531
00:21:33,340 --> 00:21:35,410
windows with automation this is your

532
00:21:35,410 --> 00:21:37,480
ultimate choice it's very fun and there

533
00:21:37,480 --> 00:21:39,790
are multiple offensive frameworks behind

534
00:21:39,790 --> 00:21:42,640
heavy good hacker there is a very good

535
00:21:42,640 --> 00:21:45,370
even greater developer it's always a

536
00:21:45,370 --> 00:21:46,780
team all the good things that we do

537
00:21:46,780 --> 00:21:49,060
though my partner at cyber out Omar

538
00:21:49,060 --> 00:21:50,560
Abdel lugar here and all the team from

539
00:21:50,560 --> 00:21:52,990
javelin and you should check home as a

540
00:21:52,990 --> 00:21:54,880
token they'll become but you should

541
00:21:54,880 --> 00:21:57,040
check about this upcoming DEFCON on the

542
00:21:57,040 --> 00:22:07,030
main stage yeah it's going to talk about

543
00:22:07,030 --> 00:22:09,940
some other stuff but definitely one of

544
00:22:09,940 --> 00:22:11,860
the more pure genius mines you'll see

545
00:22:11,860 --> 00:22:14,740
very humble only thing that is close to

546
00:22:14,740 --> 00:22:16,180
his coding technique is the sense of

547
00:22:16,180 --> 00:22:17,590
humor and you should really check that

548
00:22:17,590 --> 00:22:21,480
out so this everybody T

