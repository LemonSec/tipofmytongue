1
00:00:00,530 --> 00:00:05,520
hello hi welcome to our talk bone in

2
00:00:05,520 --> 00:00:08,970
translation from subtitles to remote

3
00:00:08,970 --> 00:00:12,750
code execution quick introduction we're

4
00:00:12,750 --> 00:00:16,230
a ml anomaly security researchers at

5
00:00:16,230 --> 00:00:21,869
checkpoint jumping so this research was

6
00:00:21,869 --> 00:00:24,600
conducted about a year ago with the

7
00:00:24,600 --> 00:00:26,789
intention of presenting a new a new

8
00:00:26,789 --> 00:00:29,699
concept a new attack vector and we call

9
00:00:29,699 --> 00:00:32,969
it subtitles drive-by attack and it's

10
00:00:32,969 --> 00:00:35,160
important to remember that this is not

11
00:00:35,160 --> 00:00:37,260
about the vulnerabilities even though

12
00:00:37,260 --> 00:00:39,989
there are plenty of those it's the

13
00:00:39,989 --> 00:00:43,050
notion that subtitles are now considered

14
00:00:43,050 --> 00:00:47,129
dangerous so let's back up a little bit

15
00:00:47,129 --> 00:00:50,219
this is how we use to watch movies at

16
00:00:50,219 --> 00:00:53,129
the local cinema but as technology

17
00:00:53,129 --> 00:00:55,289
evolved and the internet became faster

18
00:00:55,289 --> 00:00:57,930
and we got laser movies entered our

19
00:00:57,930 --> 00:01:00,719
living rooms and it could be a laptop a

20
00:01:00,719 --> 00:01:03,780
small TV a Raspberry Pi an actual MIDI

21
00:01:03,780 --> 00:01:06,710
Center the streaming options are endless

22
00:01:06,710 --> 00:01:10,170
and they're designed with ease of use in

23
00:01:10,170 --> 00:01:12,360
mind and to take care of everything for

24
00:01:12,360 --> 00:01:14,490
us they put all the metadata for us they

25
00:01:14,490 --> 00:01:16,920
pull the trailers thumbnails plotting

26
00:01:16,920 --> 00:01:21,750
form and subtitles ok so yeah subtitles

27
00:01:21,750 --> 00:01:24,750
the thing these were the statistics of

28
00:01:24,750 --> 00:01:26,670
daily downloads from one of the main

29
00:01:26,670 --> 00:01:29,850
repositories open subtitles ranging from

30
00:01:29,850 --> 00:01:33,750
7 million up to 10 million a day and

31
00:01:33,750 --> 00:01:36,299
obviously subtitles are used for

32
00:01:36,299 --> 00:01:38,759
translation for non-native English

33
00:01:38,759 --> 00:01:43,229
speakers like yourself but not only now

34
00:01:43,229 --> 00:01:45,450
to convey the necessity of subtitles

35
00:01:45,450 --> 00:01:50,100
we'll use the power of memes so they're

36
00:01:50,100 --> 00:01:52,560
used when you're watching a foreign film

37
00:01:52,560 --> 00:01:55,619
or a TV show like an anime or a

38
00:01:55,619 --> 00:01:57,590
pretentious French film

39
00:01:57,590 --> 00:02:00,600
they're used for convenience in case

40
00:02:00,600 --> 00:02:02,909
there are any sort of sound imitations

41
00:02:02,909 --> 00:02:08,780
and they're used in Guy Ritchie's movies

42
00:02:09,080 --> 00:02:11,700
sometimes they also provide a critical

43
00:02:11,700 --> 00:02:14,090
node for the

44
00:02:14,090 --> 00:02:16,980
but they usually have a lot more than

45
00:02:16,980 --> 00:02:21,269
just text display so let's explore the

46
00:02:21,269 --> 00:02:25,999
subtitles landscape we all know SOT and

47
00:02:25,999 --> 00:02:28,530
subtext the most basic subtitle file

48
00:02:28,530 --> 00:02:31,709
it's about a basic set of HTML tags like

49
00:02:31,709 --> 00:02:35,760
bold and italic and etc and there's also

50
00:02:35,760 --> 00:02:39,180
the sub format that stands for subviewer

51
00:02:39,180 --> 00:02:42,269
it supports basic formatting like colors

52
00:02:42,269 --> 00:02:49,200
and fonts but sometimes sub actually

53
00:02:49,200 --> 00:02:51,870
stands for MP sub that supports none of

54
00:02:51,870 --> 00:02:56,219
the above and at different occasions sub

55
00:02:56,219 --> 00:02:58,519
can also stands for micro DVD subtitles

56
00:02:58,519 --> 00:03:01,349
now this app supports formatting color

57
00:03:01,349 --> 00:03:03,389
schemes font configuration subtitles

58
00:03:03,389 --> 00:03:06,019
location and different character sets

59
00:03:06,019 --> 00:03:09,989
another common format is the substation

60
00:03:09,989 --> 00:03:12,659
alpha it's a bit more sophisticated it

61
00:03:12,659 --> 00:03:16,019
sports predefined stylings fonts complex

62
00:03:16,019 --> 00:03:17,759
color palettes outline shadow alignment

63
00:03:17,759 --> 00:03:22,889
marginl forever and encoding but it gets

64
00:03:22,889 --> 00:03:26,189
even more impressive as we move on to

65
00:03:26,189 --> 00:03:30,509
advanced substation alpha now the SS

66
00:03:30,509 --> 00:03:33,299
contains all the functionality of SSA

67
00:03:33,299 --> 00:03:41,280
with some interesting additions so the

68
00:03:41,280 --> 00:03:45,810
SS format supports scaling angle

69
00:03:45,810 --> 00:03:50,009
shifting binary image embedding binary

70
00:03:50,009 --> 00:03:54,720
font embedding drawing if we actually do

71
00:03:54,720 --> 00:03:59,479
a small dinosaur in the subtitles and

72
00:03:59,479 --> 00:04:02,939
the specification even mentions system

73
00:04:02,939 --> 00:04:06,419
comments functionality its allow

74
00:04:06,419 --> 00:04:08,790
executing a specified program as

75
00:04:08,790 --> 00:04:11,069
background tasks and we truly hope no

76
00:04:11,069 --> 00:04:12,659
one ever implemented these bizarre

77
00:04:12,659 --> 00:04:20,728
feature so vector subtitles there are

78
00:04:20,728 --> 00:04:24,029
actually loads of subtitles all in

79
00:04:24,029 --> 00:04:26,070
all during our research we encountered

80
00:04:26,070 --> 00:04:26,730
more than

81
00:04:26,730 --> 00:04:30,450
25 subtitle formats sam'l binary some

82
00:04:30,450 --> 00:04:35,220
textual none well documented so we asked

83
00:04:35,220 --> 00:04:38,460
ourselves can the unregulated nature of

84
00:04:38,460 --> 00:04:43,680
the subtitle Magnus be exploited okay so

85
00:04:43,680 --> 00:04:47,220
I will first target was the most

86
00:04:47,220 --> 00:04:48,690
notoriously I mean played for platform

87
00:04:48,690 --> 00:04:51,240
we know a pokkan time this

88
00:04:51,240 --> 00:04:53,420
multi-platform Netflix for pilots

89
00:04:53,420 --> 00:04:56,010
integrated a deadly combination of a

90
00:04:56,010 --> 00:04:58,320
BitTorrent client a video player and and

91
00:04:58,320 --> 00:05:01,710
less skyping capabilities it's all under

92
00:05:01,710 --> 00:05:04,050
a very friendly graphical user interface

93
00:05:04,050 --> 00:05:06,750
even my mother uses it which is a key

94
00:05:06,750 --> 00:05:09,930
lead in every research we conduct so

95
00:05:09,930 --> 00:05:12,840
this beautiful WebKit powered interface

96
00:05:12,840 --> 00:05:15,420
is packed with movie information and

97
00:05:15,420 --> 00:05:17,430
metadata it was Saints trailers plot

98
00:05:17,430 --> 00:05:19,650
summaries cast information couple photos

99
00:05:19,650 --> 00:05:23,250
IMDB rating in much more but the way it

100
00:05:23,250 --> 00:05:27,000
does it so elegantly beautiful is by

101
00:05:27,000 --> 00:05:29,400
using a platform that supports web

102
00:05:29,400 --> 00:05:33,150
technologies now the technologies as

103
00:05:33,150 --> 00:05:38,130
html5 css3 and JavaScript built on top

104
00:05:38,130 --> 00:05:43,230
of a no js' engine okay so the main the

105
00:05:43,230 --> 00:05:47,010
two main frameworks that allow this in

106
00:05:47,010 --> 00:05:50,940
wjs and electron both multi-platform

107
00:05:50,940 --> 00:05:53,430
util utilizing chromium and supports

108
00:05:53,430 --> 00:05:58,080
external plugins okay so we know they

109
00:05:58,080 --> 00:06:02,070
look good but available to anything well

110
00:06:02,070 --> 00:06:05,130
these underlying technologies are very

111
00:06:05,130 --> 00:06:07,320
interesting for me Atticus perspective

112
00:06:07,320 --> 00:06:11,160
because what might be considered a weak

113
00:06:11,160 --> 00:06:13,350
vulnerabilities in at least in a bad

114
00:06:13,350 --> 00:06:17,550
bounty programs like XSS can actually

115
00:06:17,550 --> 00:06:21,930
result in code execution because no js'

116
00:06:21,930 --> 00:06:24,650
is essentially a JavaScript engine with

117
00:06:24,650 --> 00:06:27,540
server-side capabilities and all you

118
00:06:27,540 --> 00:06:29,760
need to do in no js' in order to pop

119
00:06:29,760 --> 00:06:33,570
calculator is use this code which

120
00:06:33,570 --> 00:06:35,850
imports the child process library and

121
00:06:35,850 --> 00:06:39,000
uses its exact function with calc as the

122
00:06:39,000 --> 00:06:40,980
argument now we'll talk about

123
00:06:40,980 --> 00:06:44,570
this in a minute but back to Popkin time

124
00:06:44,570 --> 00:06:47,070
to make life even easier

125
00:06:47,070 --> 00:06:48,860
subtitles are being fetched

126
00:06:48,860 --> 00:06:51,420
automatically for both the viewer

127
00:06:51,420 --> 00:06:54,450
Vincent the attackers and the question

128
00:06:54,450 --> 00:06:57,240
remains can this behavior be exploited

129
00:06:57,240 --> 00:06:59,310
so behind the scenes

130
00:06:59,310 --> 00:07:02,430
Popkin time uses open subtitles as the

131
00:07:02,430 --> 00:07:06,570
sole subtitles provided with over a four

132
00:07:06,570 --> 00:07:08,640
million entries in a very convenient API

133
00:07:08,640 --> 00:07:12,210
it is an extremely popular depository so

134
00:07:12,210 --> 00:07:14,400
this API does not only allow for search

135
00:07:14,400 --> 00:07:17,100
and download of subtitles but it also

136
00:07:17,100 --> 00:07:19,830
has a commendation algorithm to help you

137
00:07:19,830 --> 00:07:23,280
find the right file for your a for your

138
00:07:23,280 --> 00:07:26,520
movie and release and we'll dive deeper

139
00:07:26,520 --> 00:07:30,450
into that process a bit later it turns

140
00:07:30,450 --> 00:07:35,610
out to be a key step so gaining some

141
00:07:35,610 --> 00:07:37,650
knowledge about pokken time

142
00:07:37,650 --> 00:07:39,960
infrastructure let's see how subtitles

143
00:07:39,960 --> 00:07:44,120
make the way from a download to scream

144
00:07:44,120 --> 00:07:47,820
so our journey begins as soon as the

145
00:07:47,820 --> 00:07:51,090
user starts playing a movie now open

146
00:07:51,090 --> 00:07:54,750
time downloads a subtitles and converts

147
00:07:54,750 --> 00:07:57,930
them convert whatever format it gets to

148
00:07:57,930 --> 00:08:00,990
an SRT timecode ok so after the

149
00:08:00,990 --> 00:08:03,150
conversion it's best to the update

150
00:08:03,150 --> 00:08:05,640
display function now this function will

151
00:08:05,640 --> 00:08:08,970
create an HTML span containing the

152
00:08:08,970 --> 00:08:13,590
subtitle text so since the SRT format

153
00:08:13,590 --> 00:08:18,170
supports HTML tags and this is a WebKit

154
00:08:18,170 --> 00:08:20,280
they didn't need to make any

155
00:08:20,280 --> 00:08:23,520
implementations for HTML it's obviously

156
00:08:23,520 --> 00:08:26,970
built with HTML to its core but perhaps

157
00:08:26,970 --> 00:08:30,050
we can write other things than HTML like

158
00:08:30,050 --> 00:08:33,240
JavaScript and sanitize JavaScript

159
00:08:33,240 --> 00:08:37,289
within a node WebKit application okay so

160
00:08:37,289 --> 00:08:40,289
let's write this simple one this is our

161
00:08:40,289 --> 00:08:42,720
standard SOT file looks like when you

162
00:08:42,720 --> 00:08:45,060
open it and as we already know it

163
00:08:45,060 --> 00:08:48,810
supports HTML tags but what if we try to

164
00:08:48,810 --> 00:08:53,270
load an image that doesn't exist and

165
00:08:53,270 --> 00:08:54,990
provide it with an

166
00:08:54,990 --> 00:08:58,050
we attribute well exercise 1 1 we know

167
00:08:58,050 --> 00:08:59,580
the on a little bit chemical and

168
00:08:59,580 --> 00:09:05,670
JavaScript so brace yourself yeah we got

169
00:09:05,670 --> 00:09:08,040
our first one ability for the research

170
00:09:08,040 --> 00:09:10,740
we managed to make subtitles pop a

171
00:09:10,740 --> 00:09:13,589
message box aim that's not good enough

172
00:09:13,589 --> 00:09:18,320
let's try something a bit more advanced

173
00:09:22,220 --> 00:09:26,310
okay so what if instead of the alert we

174
00:09:26,310 --> 00:09:28,529
write a code to clean things up

175
00:09:28,529 --> 00:09:30,690
remove the Rivini icon of the broken

176
00:09:30,690 --> 00:09:33,270
image and append our malicious payload

177
00:09:33,270 --> 00:09:35,220
to the page which will dynamically

178
00:09:35,220 --> 00:09:38,130
create a script loaded from a remote

179
00:09:38,130 --> 00:09:43,490
host I will host ok so needless to say

180
00:09:43,490 --> 00:09:47,640
just as we showed earlier evil j/s will

181
00:09:47,640 --> 00:09:50,040
utilize the nodejs capabilities of the

182
00:09:50,040 --> 00:09:53,370
framework tool and process let's take a

183
00:09:53,370 --> 00:10:06,360
look this is almost get Diego hey you

184
00:10:06,360 --> 00:10:08,160
can see the user opening Popkin time to

185
00:10:08,160 --> 00:10:12,290
disease favorite movie starts plain

186
00:10:14,839 --> 00:10:18,709
choose the subtitles

187
00:10:27,030 --> 00:10:30,060
this is here we get an attackers

188
00:10:30,060 --> 00:10:32,209
perspective

189
00:10:37,140 --> 00:10:41,799
[Applause]

190
00:10:43,100 --> 00:10:48,750
thank you okay so um we were able to

191
00:10:48,750 --> 00:10:51,960
make a malicious subtitles for Popkin

192
00:10:51,960 --> 00:10:54,600
time which is great but how would the

193
00:10:54,600 --> 00:10:59,490
user get our subtitles so let's talk a

194
00:10:59,490 --> 00:11:02,450
little about this subtitles supply chain

195
00:11:02,450 --> 00:11:05,310
with an average of 8 million daily

196
00:11:05,310 --> 00:11:08,430
downloads open subtitles is the world

197
00:11:08,430 --> 00:11:11,370
largest online community for subtitles

198
00:11:11,370 --> 00:11:14,640
the extensive API is widely integrated

199
00:11:14,640 --> 00:11:17,310
into many adult video players and among

200
00:11:17,310 --> 00:11:19,110
the basic functions you would expect to

201
00:11:19,110 --> 00:11:21,180
find in such API is the search and

202
00:11:21,180 --> 00:11:24,240
download the Smart Search capabilities

203
00:11:24,240 --> 00:11:27,710
is essentially a change function

204
00:11:27,710 --> 00:11:30,690
requesting all relevant subtitles from

205
00:11:30,690 --> 00:11:34,590
the server and its salts and ranks them

206
00:11:34,590 --> 00:11:36,900
returning the best matching subtitles

207
00:11:36,900 --> 00:11:40,020
for your movie and release let's take a

208
00:11:40,020 --> 00:11:44,970
look okay so the Smart Search now

209
00:11:44,970 --> 00:11:48,210
looking at the request of the Smart

210
00:11:48,210 --> 00:11:51,420
Search and being sent to the open

211
00:11:51,420 --> 00:11:53,970
subtitles API we can see the only

212
00:11:53,970 --> 00:11:58,890
argument passed is IMDB ID now along

213
00:11:58,890 --> 00:12:01,440
with the required languages in this case

214
00:12:01,440 --> 00:12:05,540
all languages while the response

215
00:12:05,540 --> 00:12:09,120
contains all matching subtitles to that

216
00:12:09,120 --> 00:12:11,940
I am the bidding okay so obviously

217
00:12:11,940 --> 00:12:14,130
Popkin time automatically automatically

218
00:12:14,130 --> 00:12:16,410
loads the subtitles with the highest

219
00:12:16,410 --> 00:12:22,280
rank but what determines the link so

220
00:12:22,280 --> 00:12:25,800
skimming through the documentation we

221
00:12:25,800 --> 00:12:29,160
bumped into this ranking scheme so we

222
00:12:29,160 --> 00:12:31,680
can say that the score is based on five

223
00:12:31,680 --> 00:12:35,310
criteria a movie hash tag which is fine

224
00:12:35,310 --> 00:12:35,700
name

225
00:12:35,700 --> 00:12:38,220
I am the B ID fps and something called

226
00:12:38,220 --> 00:12:42,030
others so also extra points are being

227
00:12:42,030 --> 00:12:45,270
credited for being an admin or a trusted

228
00:12:45,270 --> 00:12:48,390
partner but since the only argument sent

229
00:12:48,390 --> 00:12:52,770
by Popkin time is the IMDB ID if we

230
00:12:52,770 --> 00:12:54,600
would have wanted our malicious

231
00:12:54,600 --> 00:12:55,710
subtitles

232
00:12:55,710 --> 00:12:58,020
to be chosen by the API the maximum

233
00:12:58,020 --> 00:13:00,840
points we could get is 5 as been

234
00:13:00,840 --> 00:13:05,790
anonymous upload so a bit discouraged by

235
00:13:05,790 --> 00:13:09,810
the documentation and the skull we saw

236
00:13:09,810 --> 00:13:11,520
in other popular movies which were

237
00:13:11,520 --> 00:13:14,490
higher than 5 we turn to the source code

238
00:13:14,490 --> 00:13:18,150
of the open subtitles a P I am obviously

239
00:13:18,150 --> 00:13:20,550
learned a valuable lesson if you truly

240
00:13:20,550 --> 00:13:22,500
want to break something looking at the

241
00:13:22,500 --> 00:13:23,960
documentation is not the way to go

242
00:13:23,960 --> 00:13:26,880
because the source code revealed an

243
00:13:26,880 --> 00:13:31,020
undocumented behavior the match tags

244
00:13:31,020 --> 00:13:35,190
function is called either way okay but

245
00:13:35,190 --> 00:13:39,120
what is match tags so the match tag

246
00:13:39,120 --> 00:13:41,640
function will break the file name of the

247
00:13:41,640 --> 00:13:46,500
movie and the subtitles to tags now a

248
00:13:46,500 --> 00:13:48,960
tag is basically an isolated world or

249
00:13:48,960 --> 00:13:50,760
the number a found in the file name

250
00:13:50,760 --> 00:13:53,700
usually separated by dots and dashes and

251
00:13:53,700 --> 00:13:56,700
then a short loop checks how many

252
00:13:56,700 --> 00:14:00,000
shelled eggs does the subtitle file name

253
00:14:00,000 --> 00:14:02,720
and the movie filename have in common

254
00:14:02,720 --> 00:14:05,640
after that a wield formula is taking

255
00:14:05,640 --> 00:14:08,310
place the amount of shell text is

256
00:14:08,310 --> 00:14:11,550
divided by the number of movie text tags

257
00:14:11,550 --> 00:14:15,300
and multiplied by a max score of 7 which

258
00:14:15,300 --> 00:14:17,790
is the max code that can be signed in

259
00:14:17,790 --> 00:14:22,380
case of full compatibility so a bit

260
00:14:22,380 --> 00:14:24,090
complicated let's see a demonstration of

261
00:14:24,090 --> 00:14:27,570
these functions behavior let's assume

262
00:14:27,570 --> 00:14:30,720
assume that this is the movie file name

263
00:14:30,720 --> 00:14:33,330
streamed by Popkin time this is easily

264
00:14:33,330 --> 00:14:37,500
checked using a sniffer and this is a

265
00:14:37,500 --> 00:14:41,100
name of a candidate subtitle a file name

266
00:14:41,100 --> 00:14:45,660
offered to the ranking algorithm so the

267
00:14:45,660 --> 00:14:47,910
code the code fails splits the movie

268
00:14:47,910 --> 00:14:51,420
file name into tags it then splits the

269
00:14:51,420 --> 00:14:55,020
subtitle file name and the match tag the

270
00:14:55,020 --> 00:14:57,840
match tag functions a checks how many

271
00:14:57,840 --> 00:15:03,030
shelters they have three in this case so

272
00:15:03,030 --> 00:15:05,370
the API then goes to its formula which

273
00:15:05,370 --> 00:15:08,850
is a shell text 3

274
00:15:08,850 --> 00:15:11,550
and divided by the tags in the movie

275
00:15:11,550 --> 00:15:15,720
filename 8 we see that on the left x max

276
00:15:15,720 --> 00:15:18,540
co which is a constant number of 7 this

277
00:15:18,540 --> 00:15:23,190
gives us the final score of 2 okay well

278
00:15:23,190 --> 00:15:25,829
this behavior makes it trivial to for us

279
00:15:25,829 --> 00:15:28,170
to achieve full compatibility because

280
00:15:28,170 --> 00:15:31,470
all we have to do is name our malicious

281
00:15:31,470 --> 00:15:34,290
subtitle identical to me the movie file

282
00:15:34,290 --> 00:15:38,720
name and so this gets us a full computer

283
00:15:38,720 --> 00:15:41,790
compatibility 7 plus the IMDB ID 5

284
00:15:41,790 --> 00:15:44,970
points we already had and we get 12

285
00:15:44,970 --> 00:15:49,500
points but wait there's more because

286
00:15:49,500 --> 00:15:53,100
these are the recommended subtitles for

287
00:15:53,100 --> 00:15:55,740
some of the most popular a content

288
00:15:55,740 --> 00:15:57,959
available online a Deadpool falls and

289
00:15:57,959 --> 00:16:00,089
Inception snow then and westward season

290
00:16:00,089 --> 00:16:03,930
1 episode 1 these graphs show this call

291
00:16:03,930 --> 00:16:06,569
of the 7 most popular languages in the

292
00:16:06,569 --> 00:16:06,870
world

293
00:16:06,870 --> 00:16:09,540
displaying the average and the highest

294
00:16:09,540 --> 00:16:12,509
score so scanning automatically full a

295
00:16:12,509 --> 00:16:15,300
bunch of popular subtitles we notice

296
00:16:15,300 --> 00:16:18,029
that the highest call a subtitle got was

297
00:16:18,029 --> 00:16:24,300
14 while the average is around 10 so at

298
00:16:24,300 --> 00:16:25,649
this point we show that we can

299
00:16:25,649 --> 00:16:28,709
consistently achieve a solid score of 12

300
00:16:28,709 --> 00:16:32,310
a higher than the average but less than

301
00:16:32,310 --> 00:16:35,040
14 so we'll obviously still unsatisfied

302
00:16:35,040 --> 00:16:39,980
and as you recall extra points I'll be

303
00:16:39,980 --> 00:16:43,800
credited for being ranked user calling

304
00:16:43,800 --> 00:16:47,819
open subtitles website we found this

305
00:16:47,819 --> 00:16:51,660
table now apparently all it takes to

306
00:16:51,660 --> 00:16:55,079
become a gold member in an extra three

307
00:16:55,079 --> 00:17:00,540
points is a hundred and one uploads so

308
00:17:00,540 --> 00:17:03,810
we sign up to open subtitles and four

309
00:17:03,810 --> 00:17:07,199
minutes later and 40 lines of Python we

310
00:17:07,199 --> 00:17:12,809
will golden okay so we wrote a small

311
00:17:12,809 --> 00:17:15,059
script that gets the score of all

312
00:17:15,059 --> 00:17:19,049
subtitles available for a given movie as

313
00:17:19,049 --> 00:17:21,839
you can see our subtitle has the highest

314
00:17:21,839 --> 00:17:22,619
score

315
00:17:22,619 --> 00:17:28,500
of 15 so what this basically means that

316
00:17:28,500 --> 00:17:32,520
given any movie we can force your player

317
00:17:32,520 --> 00:17:35,970
to load our crafted malicious subtitles

318
00:17:35,970 --> 00:17:41,820
and exploit your machine okay so let's

319
00:17:41,820 --> 00:17:44,160
see what else we can do with it um we'll

320
00:17:44,160 --> 00:17:46,550
take it

321
00:17:47,450 --> 00:17:48,690
hi

322
00:17:48,690 --> 00:17:51,930
so Cody which is formerly known as XBMC

323
00:17:51,930 --> 00:17:54,030
is an award-winning open-source

324
00:17:54,030 --> 00:17:56,640
cross-platform media player it is

325
00:17:56,640 --> 00:17:59,910
available for all major platforms 72

326
00:17:59,910 --> 00:18:02,850
languages and it is used by over 40

327
00:18:02,850 --> 00:18:05,070
million users around the world so it

328
00:18:05,070 --> 00:18:07,230
makes it the most common media center

329
00:18:07,230 --> 00:18:10,290
software around and Cody is also a

330
00:18:10,290 --> 00:18:12,480
popular combination with raspberry PI's

331
00:18:12,480 --> 00:18:14,370
and Smart TV making it kind of

332
00:18:14,370 --> 00:18:17,420
interesting from attackers perspective

333
00:18:17,420 --> 00:18:19,950
so this is the screen that is displayed

334
00:18:19,950 --> 00:18:21,780
when a user want to download subtitles

335
00:18:21,780 --> 00:18:25,170
using Kodi and this is the request that

336
00:18:25,170 --> 00:18:27,600
is being sent by Cody we recognize it as

337
00:18:27,600 --> 00:18:28,980
we were already kind of familiar with

338
00:18:28,980 --> 00:18:33,600
open subtitles API structure and this is

339
00:18:33,600 --> 00:18:35,250
the code that is actually fetching the

340
00:18:35,250 --> 00:18:38,520
subtitles so let's go over it first the

341
00:18:38,520 --> 00:18:40,710
search subtitled function is called and

342
00:18:40,710 --> 00:18:42,480
the response is saved into a variable

343
00:18:42,480 --> 00:18:47,429
called search data then a for loop will

344
00:18:47,429 --> 00:18:50,700
iterate over these results extracting

345
00:18:50,700 --> 00:18:51,870
the information from them

346
00:18:51,870 --> 00:18:53,910
and formats them into a string called

347
00:18:53,910 --> 00:18:59,730
ull then each of these created URL is

348
00:18:59,730 --> 00:19:02,309
sent to the directory item function

349
00:19:02,309 --> 00:19:06,260
which in return results in this screen

350
00:19:06,260 --> 00:19:09,300
now the user can simply select his

351
00:19:09,300 --> 00:19:14,550
desired subtitles but let's focus on

352
00:19:14,550 --> 00:19:17,490
that URL string for a moment so since

353
00:19:17,490 --> 00:19:21,030
open subtitle is obviously open the

354
00:19:21,030 --> 00:19:23,010
attacker has complete control over the

355
00:19:23,010 --> 00:19:24,990
file name parameter which is received

356
00:19:24,990 --> 00:19:27,679
under the value of sub file name and

357
00:19:27,679 --> 00:19:31,110
here we see how each of these four keys

358
00:19:31,110 --> 00:19:34,560
in item data alpha mattered into that

359
00:19:34,560 --> 00:19:37,190
URL string

360
00:19:38,670 --> 00:19:42,280
so given the given the fact that the

361
00:19:42,280 --> 00:19:44,290
attacker completely controls the file

362
00:19:44,290 --> 00:19:48,400
name what can we do with it so usually

363
00:19:48,400 --> 00:19:50,290
the file name will be something like

364
00:19:50,290 --> 00:19:54,010
this subtitle file name dot SOT but what

365
00:19:54,010 --> 00:19:56,320
if afterwards we append the ampersand

366
00:19:56,320 --> 00:20:02,110
sign and then something like this so

367
00:20:02,110 --> 00:20:04,900
this would effectively overwrite the

368
00:20:04,900 --> 00:20:08,320
original link and IV parameter which we

369
00:20:08,320 --> 00:20:10,210
originally didn't have any control over

370
00:20:10,210 --> 00:20:12,760
it simply because this is a string and

371
00:20:12,760 --> 00:20:15,310
it is being passed by a very basic split

372
00:20:15,310 --> 00:20:19,150
function how does this help us well once

373
00:20:19,150 --> 00:20:24,400
the sorry once the user chooses his

374
00:20:24,400 --> 00:20:26,620
subtitle the download function would be

375
00:20:26,620 --> 00:20:31,480
called and the argument to that download

376
00:20:31,480 --> 00:20:33,580
function are derived from that URL and

377
00:20:33,580 --> 00:20:35,710
these are the arguments we can now

378
00:20:35,710 --> 00:20:41,680
control the ID and the link so how does

379
00:20:41,680 --> 00:20:45,400
this function behaves first it uses open

380
00:20:45,400 --> 00:20:47,980
subtitle API to download the subtitles

381
00:20:47,980 --> 00:20:52,240
based on the ID given to it but the

382
00:20:52,240 --> 00:20:54,430
interesting part is what happened if it

383
00:20:54,430 --> 00:20:58,270
fails if the ID does not exist then we

384
00:20:58,270 --> 00:21:01,570
go to the not result branch which

385
00:21:01,570 --> 00:21:04,960
download a zip file from the link given

386
00:21:04,960 --> 00:21:08,740
to it so by changing the ID to something

387
00:21:08,740 --> 00:21:14,560
that doesn't exist such as - 1 2 3 and

388
00:21:14,560 --> 00:21:18,910
overwriting the link to point to a zip

389
00:21:18,910 --> 00:21:21,850
file that is stored on our servers we

390
00:21:21,850 --> 00:21:24,160
for Scottie to download a remote zip

391
00:21:24,160 --> 00:21:27,130
file now after download the zip file is

392
00:21:27,130 --> 00:21:30,370
sent to a function called XBMC extract

393
00:21:30,370 --> 00:21:35,050
and here instead of using the standard

394
00:21:35,050 --> 00:21:37,300
library for any zip extraction Cody

395
00:21:37,300 --> 00:21:40,180
decided to implement their own which as

396
00:21:40,180 --> 00:21:41,830
we all know is usually a great idea

397
00:21:41,830 --> 00:21:46,179
right so downloading an arbitrary zip

398
00:21:46,179 --> 00:21:48,719
file from the internet is definitely

399
00:21:48,719 --> 00:21:50,999
but training this behavior with another

400
00:21:50,999 --> 00:21:53,489
vulnerability we found in Kody built-in

401
00:21:53,489 --> 00:21:56,599
extraction made it lethal so let's see

402
00:21:56,599 --> 00:21:59,249
what Kody built in extract archive

403
00:21:59,249 --> 00:22:01,679
function does is building a file path

404
00:22:01,679 --> 00:22:04,440
based on the folder names inside the zip

405
00:22:04,440 --> 00:22:07,440
but what Kody neglected to handle our

406
00:22:07,440 --> 00:22:10,679
folder names that contains two dots so I

407
00:22:10,679 --> 00:22:12,419
don't need to tell you guys we have

408
00:22:12,419 --> 00:22:15,570
directory traversal here so all we have

409
00:22:15,570 --> 00:22:17,789
to do is create a zip archive that

410
00:22:17,789 --> 00:22:21,119
contains dots as folder names and then

411
00:22:21,119 --> 00:22:23,159
we can make the extraction create a

412
00:22:23,159 --> 00:22:26,039
Python script instead of the add-on

413
00:22:26,039 --> 00:22:28,709
script itself which will be immediately

414
00:22:28,709 --> 00:22:32,399
called again thus executing our code so

415
00:22:32,399 --> 00:22:34,889
that would be the second vulnerability

416
00:22:34,889 --> 00:22:39,079
for today let's see that in action

417
00:22:42,669 --> 00:22:44,730
you

418
00:22:50,360 --> 00:22:53,549
so the users open up Cory look for his

419
00:22:53,549 --> 00:22:56,120
favorite film

420
00:23:29,830 --> 00:23:33,429
now this is the subtitles window we

421
00:23:33,429 --> 00:23:36,309
discussed earlier here it's loading

422
00:23:36,309 --> 00:23:39,249
everything so like we told you we

423
00:23:39,249 --> 00:23:41,529
completely control open subtitles so we

424
00:23:41,529 --> 00:23:43,269
don't have nothing to worry about

425
00:23:43,269 --> 00:23:46,299
first top three hits are our malicious

426
00:23:46,299 --> 00:23:47,980
subtitles so he can choose whatever you

427
00:23:47,980 --> 00:23:53,529
want again we get the attacker

428
00:23:53,529 --> 00:23:56,100
perspective

429
00:24:04,630 --> 00:24:07,860
and we get the reverse

430
00:24:13,120 --> 00:24:16,490
all right moving on to the next victim

431
00:24:16,490 --> 00:24:18,980
well popcorntime definitely marked the

432
00:24:18,980 --> 00:24:21,020
rise of string me ups but being

433
00:24:21,020 --> 00:24:23,570
temporarily shut down by the MPAA it

434
00:24:23,570 --> 00:24:26,450
left users looking for alternatives and

435
00:24:26,450 --> 00:24:29,690
stem io offer just that like popcorn

436
00:24:29,690 --> 00:24:32,270
time it is designed with ease of use in

437
00:24:32,270 --> 00:24:34,610
mind and has quite similar user

438
00:24:34,610 --> 00:24:37,310
interface by the way this is also the

439
00:24:37,310 --> 00:24:39,170
platform that both of us use at home so

440
00:24:39,170 --> 00:24:40,760
we thought it will be fun to give it a

441
00:24:40,760 --> 00:24:43,610
shot and interestingly enough

442
00:24:43,610 --> 00:24:45,980
EMI shares a few characteristics with

443
00:24:45,980 --> 00:24:47,930
Popkin time under the hood most

444
00:24:47,930 --> 00:24:51,380
importantly for us it is also a WebKit

445
00:24:51,380 --> 00:24:53,960
based application and you guessed it

446
00:24:53,960 --> 00:24:56,630
right it uses open subtitle as a

447
00:24:56,630 --> 00:24:59,300
subtitle provider so we just try the

448
00:24:59,300 --> 00:25:01,700
same trick we used on popcorn time you

449
00:25:01,700 --> 00:25:04,040
can actually see the broken image icon

450
00:25:04,040 --> 00:25:07,130
at the bottom but no message box was

451
00:25:07,130 --> 00:25:09,350
popped so that didn't work

452
00:25:09,350 --> 00:25:11,360
apparently our JavaScript has been

453
00:25:11,360 --> 00:25:13,280
sanitized and it was time to dig a

454
00:25:13,280 --> 00:25:16,640
little deeper so stem our code is

455
00:25:16,640 --> 00:25:19,100
archived as an ASL file which is a

456
00:25:19,100 --> 00:25:21,410
simple tar-like format that concatenates

457
00:25:21,410 --> 00:25:23,240
all file together just without the

458
00:25:23,240 --> 00:25:26,630
compression we use the node.js library

459
00:25:26,630 --> 00:25:28,280
to extract it and we got all the

460
00:25:28,280 --> 00:25:30,110
necessary files we needed in order to

461
00:25:30,110 --> 00:25:33,650
inspect the code extracting the source

462
00:25:33,650 --> 00:25:35,840
code and prettifying it we realized that

463
00:25:35,840 --> 00:25:38,630
any text editor screen is passed through

464
00:25:38,630 --> 00:25:42,260
angular sanitize this sanitize service

465
00:25:42,260 --> 00:25:44,810
will pass an HTML and only allow for

466
00:25:44,810 --> 00:25:46,850
safe and whitelisted markup and

467
00:25:46,850 --> 00:25:49,160
attributes to survive thus sterilizing

468
00:25:49,160 --> 00:25:51,140
all strings so it contains no scripting

469
00:25:51,140 --> 00:25:54,440
expressions or dangerous attributes now

470
00:25:54,440 --> 00:25:57,020
having to use only static HTML tags with

471
00:25:57,020 --> 00:25:59,150
no scripting capabilities really limited

472
00:25:59,150 --> 00:26:01,190
our option so this calls for quite a

473
00:26:01,190 --> 00:26:04,400
creative solution if you've ever used

474
00:26:04,400 --> 00:26:06,290
tremolo you must be familiar with their

475
00:26:06,290 --> 00:26:09,980
supporters pop-up banner now we know

476
00:26:09,980 --> 00:26:13,280
that we can use HTML tags right so what

477
00:26:13,280 --> 00:26:15,740
if we present the supporters image to

478
00:26:15,740 --> 00:26:18,740
the user using the image tag but we

479
00:26:18,740 --> 00:26:21,800
surrounded with an href tag this way

480
00:26:21,800 --> 00:26:24,410
there is no JavaScript to be sanitized

481
00:26:24,410 --> 00:26:25,350
and one

482
00:26:25,350 --> 00:26:28,890
the user would click the pop-up in order

483
00:26:28,890 --> 00:26:31,169
to close it he will be redirected once

484
00:26:31,169 --> 00:26:33,650
again to our a malicious JavaScript

485
00:26:33,650 --> 00:26:37,470
again popping a calque so let's take a

486
00:26:37,470 --> 00:26:39,150
look at our third vulnerability for

487
00:26:39,150 --> 00:26:41,390
today

488
00:27:14,850 --> 00:27:16,740
and there's a click it in order to close

489
00:27:16,740 --> 00:27:27,630
it and we get a call yeah so realizing

490
00:27:27,630 --> 00:27:30,240
the disastrous potential of subtitle as

491
00:27:30,240 --> 00:27:33,029
an attack vector we move on now I'm

492
00:27:33,029 --> 00:27:34,350
pretty sure that there is no need to

493
00:27:34,350 --> 00:27:36,059
introduce our next target

494
00:27:36,059 --> 00:27:40,380
with over 180 million users VLC is one

495
00:27:40,380 --> 00:27:42,509
of the most common media players out

496
00:27:42,509 --> 00:27:46,289
there it's open source portable and

497
00:27:46,289 --> 00:27:48,570
cross-platform framework it is available

498
00:27:48,570 --> 00:27:51,629
for almost any platform imaginable at

499
00:27:51,629 --> 00:27:54,509
this point yen I live now a former

500
00:27:54,509 --> 00:27:57,240
member of our team join us and much of

501
00:27:57,240 --> 00:28:00,389
is much of the work shown here is due to

502
00:28:00,389 --> 00:28:05,460
his contribution so we'll see we'll see

503
00:28:05,460 --> 00:28:07,110
is in fact a complete multimedia

504
00:28:07,110 --> 00:28:08,639
framework just like directshow or

505
00:28:08,639 --> 00:28:11,039
gstreamer if you're familiar where you

506
00:28:11,039 --> 00:28:13,169
can load and plug in many modules

507
00:28:13,169 --> 00:28:15,659
dynamically depending on the necessity

508
00:28:15,659 --> 00:28:17,909
and actually the co pham ngoc is just

509
00:28:17,909 --> 00:28:20,759
used to do the wiring and the media

510
00:28:20,759 --> 00:28:23,759
processing so from inputs whether it's

511
00:28:23,759 --> 00:28:26,730
files or network streams to outputs

512
00:28:26,730 --> 00:28:29,159
whether it's audio video on screen on a

513
00:28:29,159 --> 00:28:32,039
network it uses modules to do most of

514
00:28:32,039 --> 00:28:33,659
the work at every stage like various

515
00:28:33,659 --> 00:28:37,200
democ sir's decoders or filters and

516
00:28:37,200 --> 00:28:39,960
being described even by its own authors

517
00:28:39,960 --> 00:28:43,259
as very popular but quite large and

518
00:28:43,259 --> 00:28:45,600
complex piece of software we were

519
00:28:45,600 --> 00:28:47,549
confident that we can find subtitles

520
00:28:47,549 --> 00:28:50,129
related vulnerabilities so let's go over

521
00:28:50,129 --> 00:28:54,240
them textual subtitles are passed by VLC

522
00:28:54,240 --> 00:28:57,620
in a democracy called subtitles dot c

523
00:28:57,620 --> 00:29:00,240
these are all the supported formats and

524
00:29:00,240 --> 00:29:03,360
the respective parsing function and yes

525
00:29:03,360 --> 00:29:06,210
that's a lot and the de-mux l only job

526
00:29:06,210 --> 00:29:09,029
is to pass the different timing code of

527
00:29:09,029 --> 00:29:11,669
each format and send the subtitle to its

528
00:29:11,669 --> 00:29:15,240
decoder now other than ssa and a SS that

529
00:29:15,240 --> 00:29:17,429
are recorded by a dedicated library

530
00:29:17,429 --> 00:29:20,490
called li biases all other formats are

531
00:29:20,490 --> 00:29:24,620
decoded by VLC's own decoder subs Dec

532
00:29:24,620 --> 00:29:27,700
inevitably things are about to go wrong

533
00:29:27,700 --> 00:29:32,389
so subs Dec takes every subtitle let's

534
00:29:32,389 --> 00:29:35,570
take SOT for example and pass its text

535
00:29:35,570 --> 00:29:38,590
field it will create two versions of it

536
00:29:38,590 --> 00:29:41,600
the first is a plain text version with

537
00:29:41,600 --> 00:29:44,120
all tags attributes and styling stripped

538
00:29:44,120 --> 00:29:47,570
off this this version is used in case

539
00:29:47,570 --> 00:29:50,509
later rendering will fail the second

540
00:29:50,509 --> 00:29:52,610
more feature-rich version is referred to

541
00:29:52,610 --> 00:29:56,029
as the HTML subtitle HTML subtitle will

542
00:29:56,029 --> 00:29:57,950
contain all the fancy styling and

543
00:29:57,950 --> 00:30:00,940
attributes such as phones alignments etc

544
00:30:00,940 --> 00:30:04,220
after being decoded subtitles are sent

545
00:30:04,220 --> 00:30:09,200
to the final stage of rendering so going

546
00:30:09,200 --> 00:30:11,899
over the VLC subtitle related code we

547
00:30:11,899 --> 00:30:14,659
immediately notice that a lot of parsing

548
00:30:14,659 --> 00:30:16,549
is being done using raw pointers

549
00:30:16,549 --> 00:30:18,470
instead of built-in string function

550
00:30:18,470 --> 00:30:20,090
which is generally a bad idea

551
00:30:20,090 --> 00:30:23,090
now let's see an example of it again

552
00:30:23,090 --> 00:30:26,690
this is how the basic SRT subtitle

553
00:30:26,690 --> 00:30:30,769
this code use the PSD subtitle variable

554
00:30:30,769 --> 00:30:32,960
to parse the subtitle one byte at a time

555
00:30:32,960 --> 00:30:35,840
in this case the code just identified

556
00:30:35,840 --> 00:30:42,860
the HTML phone tag so it then moved on

557
00:30:42,860 --> 00:30:45,710
to consume it attributes the face

558
00:30:45,710 --> 00:30:49,460
attribute in this example the decoder

559
00:30:49,460 --> 00:30:51,080
will continue reading from the buffer

560
00:30:51,080 --> 00:30:57,740
until the closing bracket is met what

561
00:30:57,740 --> 00:31:00,259
this means is that in case the bracket

562
00:31:00,259 --> 00:31:03,860
is missing the puzzle will just keep on

563
00:31:03,860 --> 00:31:05,690
reading resulting in an out of bound

564
00:31:05,690 --> 00:31:06,679
read for nobility

565
00:31:06,679 --> 00:31:10,669
that's fourth for today and why loading

566
00:31:10,669 --> 00:31:12,409
the code manually we also started

567
00:31:12,409 --> 00:31:14,509
fuzzing VLC for subtitle related

568
00:31:14,509 --> 00:31:16,669
vulnerabilities obviously our weapon of

569
00:31:16,669 --> 00:31:19,580
choice was the brilliant AFL this

570
00:31:19,580 --> 00:31:21,519
security oriented father compiled

571
00:31:21,519 --> 00:31:23,870
employees compile time instrumentation

572
00:31:23,870 --> 00:31:26,480
and genetic algorithms to discover new

573
00:31:26,480 --> 00:31:28,490
internal states and trigger edge cases

574
00:31:28,490 --> 00:31:31,429
in the target binary so getting the

575
00:31:31,429 --> 00:31:33,529
first command was actually a bit tricky

576
00:31:33,529 --> 00:31:36,259
we created the copis and created the

577
00:31:36,259 --> 00:31:38,119
dictionary but our main obstacle was the

578
00:31:38,119 --> 00:31:39,910
fact that our fuzzing server

579
00:31:39,910 --> 00:31:42,610
had no GUI so we overcame this challenge

580
00:31:42,610 --> 00:31:45,420
by using that transcode functionality

581
00:31:45,420 --> 00:31:48,940
this option will make vs ik convert a

582
00:31:48,940 --> 00:31:51,100
movie from one codec to another while

583
00:31:51,100 --> 00:31:53,380
attaching the subtitles but presenting

584
00:31:53,380 --> 00:31:55,900
nothing which was perfect for us so

585
00:31:55,900 --> 00:31:59,410
moving on to the corpus corpus is a set

586
00:31:59,410 --> 00:32:01,960
of initial test cases comprised of valid

587
00:32:01,960 --> 00:32:04,210
files that represent the protocol or the

588
00:32:04,210 --> 00:32:07,120
functionality being fast now we plan to

589
00:32:07,120 --> 00:32:10,540
start with SOT an ESS simply as these

590
00:32:10,540 --> 00:32:12,370
were the format that we researched first

591
00:32:12,370 --> 00:32:15,730
so for a corpus which are picked some of

592
00:32:15,730 --> 00:32:17,410
the various files that incorporates some

593
00:32:17,410 --> 00:32:19,300
of the more exotic features that we

594
00:32:19,300 --> 00:32:23,560
discussed earlier and this is the basic

595
00:32:23,560 --> 00:32:26,980
time convention of the SOT format and we

596
00:32:26,980 --> 00:32:29,140
intended adding more formats to the

597
00:32:29,140 --> 00:32:31,930
copis as we go along but the amazing

598
00:32:31,930 --> 00:32:35,290
thing is we didn't have to because FL

599
00:32:35,290 --> 00:32:38,590
just blindly built valid subtitle files

600
00:32:38,590 --> 00:32:40,510
of different formats with zero knowledge

601
00:32:40,510 --> 00:32:43,480
in this case he created the jss format

602
00:32:43,480 --> 00:32:46,960
all by itself so this is a demonstration

603
00:32:46,960 --> 00:32:49,780
of one of AFL greatest strength assembly

604
00:32:49,780 --> 00:32:51,940
level instrumentation because the odds

605
00:32:51,940 --> 00:32:54,250
of a traditional father simply flipping

606
00:32:54,250 --> 00:32:58,180
bits to convert the time convention of

607
00:32:58,180 --> 00:33:01,060
SOT and turn them into JSS are extremely

608
00:33:01,060 --> 00:33:03,130
low however through assembly level

609
00:33:03,130 --> 00:33:06,010
instrumentation FL notices how minor

610
00:33:06,010 --> 00:33:08,110
mutation trigger slightly different code

611
00:33:08,110 --> 00:33:10,420
paths and uses those as a seed for

612
00:33:10,420 --> 00:33:14,190
further fuzzing grounds so great job FL

613
00:33:14,190 --> 00:33:17,470
and it didn't take it too long to look

614
00:33:17,470 --> 00:33:18,910
down on a vulnerable function called

615
00:33:18,910 --> 00:33:23,980
parse JSS now jss stands for Jayco

616
00:33:23,980 --> 00:33:28,450
subscript files and this format is a

617
00:33:28,450 --> 00:33:30,310
really flexible format allowing some

618
00:33:30,310 --> 00:33:32,200
really interesting for functionalities

619
00:33:32,200 --> 00:33:34,810
it relies heavily on something called

620
00:33:34,810 --> 00:33:37,750
directives a directive is a series of

621
00:33:37,750 --> 00:33:39,910
characters strung together and they can

622
00:33:39,910 --> 00:33:42,610
determine the subtitle position font

623
00:33:42,610 --> 00:33:46,390
color so forth and they come in two

624
00:33:46,390 --> 00:33:48,280
forms they come either as a global

625
00:33:48,280 --> 00:33:51,040
directive that affects all subtitles

626
00:33:51,040 --> 00:33:53,380
below it in the text file

627
00:33:53,380 --> 00:33:55,390
as an inline directive affecting only

628
00:33:55,390 --> 00:33:58,630
the current line so these are some of

629
00:33:58,630 --> 00:34:01,090
the more common cases directives out

630
00:34:01,090 --> 00:34:01,480
there

631
00:34:01,480 --> 00:34:04,539
this is T it stands for timer and it is

632
00:34:04,539 --> 00:34:07,090
used to set the time resolution one

633
00:34:07,090 --> 00:34:10,570
hundred units a second in this case s

634
00:34:10,570 --> 00:34:13,359
which stands for shift and it will cause

635
00:34:13,359 --> 00:34:15,399
all events to occur a twenty time units

636
00:34:15,399 --> 00:34:16,929
sooner than usual

637
00:34:16,929 --> 00:34:20,770
F will set font number three because you

638
00:34:20,770 --> 00:34:23,679
can predefined up to ten formats to

639
00:34:23,679 --> 00:34:27,100
Jacob font 18 which is a mono color

640
00:34:27,100 --> 00:34:31,000
fonts available in JSS for an inland

641
00:34:31,000 --> 00:34:33,520
directive here's an example CP two will

642
00:34:33,520 --> 00:34:35,290
display the following text using color

643
00:34:35,290 --> 00:34:37,389
palette number two that can also be

644
00:34:37,389 --> 00:34:40,030
predefined by the user so yes it's

645
00:34:40,030 --> 00:34:42,159
really weird and VLC doesn't do a great

646
00:34:42,159 --> 00:34:46,030
job in parsing those let's see looking

647
00:34:46,030 --> 00:34:48,460
at the basic pasta SS function we can

648
00:34:48,460 --> 00:34:50,649
see that VLC iterates over the lines

649
00:34:50,649 --> 00:34:52,840
with a while loop again one bite at a

650
00:34:52,840 --> 00:34:53,080
time

651
00:34:53,080 --> 00:34:55,600
it passes the time codes and a handful

652
00:34:55,600 --> 00:34:57,850
of supported directives and the text

653
00:34:57,850 --> 00:35:00,220
itself obviously and the crushed found

654
00:35:00,220 --> 00:35:02,200
by FL was due to an out of bounds read

655
00:35:02,200 --> 00:35:04,270
while trying to skip unsupported

656
00:35:04,270 --> 00:35:10,119
directives here and throughout PSD text

657
00:35:10,119 --> 00:35:12,040
is a pointer to null terminated string

658
00:35:12,040 --> 00:35:14,410
allocated on the heap and the code

659
00:35:14,410 --> 00:35:16,630
assume that that directive is always

660
00:35:16,630 --> 00:35:19,570
followed by a space therefore it will

661
00:35:19,570 --> 00:35:21,550
look for that space to indicate the end

662
00:35:21,550 --> 00:35:24,340
of a directive in case that directive is

663
00:35:24,340 --> 00:35:26,230
written without any following spaces

664
00:35:26,230 --> 00:35:28,660
this while loop will just skip the null

665
00:35:28,660 --> 00:35:33,670
by terminator and overrun the buffer so

666
00:35:33,670 --> 00:35:36,070
that's number 5 and this got our

667
00:35:36,070 --> 00:35:38,500
attention to the pasta SS function and

668
00:35:38,500 --> 00:35:40,810
we soon manually found another 2 out of

669
00:35:40,810 --> 00:35:42,910
boundary issues in the passing of

670
00:35:42,910 --> 00:35:46,600
directives that were supported so moving

671
00:35:46,600 --> 00:35:49,240
on with the jss format we stumbled upon

672
00:35:49,240 --> 00:35:53,890
the color and fonts directives as you

673
00:35:53,890 --> 00:35:56,230
can see the code includes a double

674
00:35:56,230 --> 00:35:58,150
increment to skip from the directive

675
00:35:58,150 --> 00:36:00,609
right to the argument but in case a

676
00:36:00,609 --> 00:36:02,920
directive didn't contain any argument to

677
00:36:02,920 --> 00:36:06,850
follow it meaning it

678
00:36:06,850 --> 00:36:08,680
ended with a null termination this

679
00:36:08,680 --> 00:36:10,630
double increment would just skip the

680
00:36:10,630 --> 00:36:13,030
null terminator but let's see how this

681
00:36:13,030 --> 00:36:14,920
code is combined within the bigger

682
00:36:14,920 --> 00:36:21,970
picture so this entire chunk of code is

683
00:36:21,970 --> 00:36:23,770
within a while loop here's our double

684
00:36:23,770 --> 00:36:26,110
increment right there and skipping the

685
00:36:26,110 --> 00:36:28,120
null byte we remain in that while loop

686
00:36:28,120 --> 00:36:32,100
copying from ps3 techs to ps3 text -

687
00:36:32,100 --> 00:36:35,860
however ps3 tax - is only the length of

688
00:36:35,860 --> 00:36:39,790
ps3 text plus 1 so while we are reading

689
00:36:39,790 --> 00:36:41,380
out of buffer at one point we are

690
00:36:41,380 --> 00:36:43,420
actually writing out of buffer at

691
00:36:43,420 --> 00:36:46,720
another point and this 6 vulnerability a

692
00:36:46,720 --> 00:36:48,820
he pasted overflow actually allowed us

693
00:36:48,820 --> 00:36:55,090
altum Utley to execute arbitrary code at

694
00:36:55,090 --> 00:36:56,860
another case you can see that when the

695
00:36:56,860 --> 00:36:58,630
passing loop reaches a null terminator

696
00:36:58,630 --> 00:37:01,720
in a very specific case it intentionally

697
00:37:01,720 --> 00:37:04,990
decides to skip it making this number 7

698
00:37:04,990 --> 00:37:06,760
and in my opinion the weirdest of them

699
00:37:06,760 --> 00:37:10,420
all so let's talk about exploitability

700
00:37:10,420 --> 00:37:13,000
for a second these bugs are definitely

701
00:37:13,000 --> 00:37:15,580
not trivial to exploit however it is

702
00:37:15,580 --> 00:37:17,860
interesting to note that the main binary

703
00:37:17,860 --> 00:37:22,450
of VLC is not a SLR of Pi in Linux by

704
00:37:22,450 --> 00:37:25,690
design the main binary is just do just

705
00:37:25,690 --> 00:37:27,700
do the wiring between liberal psycho and

706
00:37:27,700 --> 00:37:29,590
the plugins but it offers some quite

707
00:37:29,590 --> 00:37:31,960
useful gadgets for example these gadgets

708
00:37:31,960 --> 00:37:35,560
that will find whatever symbol is in

709
00:37:35,560 --> 00:37:38,470
other side and call it with Alby X as an

710
00:37:38,470 --> 00:37:41,290
argument which is quite useful right so

711
00:37:41,290 --> 00:37:43,810
for a quick PLC we had an eye to develop

712
00:37:43,810 --> 00:37:46,030
an expert for this vulnerability for the

713
00:37:46,030 --> 00:37:48,760
moment ignoring s allow let's see a demo

714
00:37:48,760 --> 00:37:51,030
of it

715
00:38:02,830 --> 00:38:13,000
and we get a couple so thank you let's

716
00:38:13,000 --> 00:38:14,950
sum up this research we discussed the

717
00:38:14,950 --> 00:38:17,230
complete madness that is the subtitle

718
00:38:17,230 --> 00:38:20,980
landscape we saw we had over 25 subtitle

719
00:38:20,980 --> 00:38:21,610
formats

720
00:38:21,610 --> 00:38:24,100
none of them well documented without any

721
00:38:24,100 --> 00:38:26,020
dedicated library and zero

722
00:38:26,020 --> 00:38:28,930
standardization between players we were

723
00:38:28,930 --> 00:38:30,760
able to gain full remote code execution

724
00:38:30,760 --> 00:38:34,000
on four major platforms now please note

725
00:38:34,000 --> 00:38:35,950
that these were the only platforms that

726
00:38:35,950 --> 00:38:38,350
we looked at it so it means that other

727
00:38:38,350 --> 00:38:40,780
platforms are there are probably four

728
00:38:40,780 --> 00:38:43,780
noble to subtitle drive-by attacks we

729
00:38:43,780 --> 00:38:45,610
were also able to manipulate the

730
00:38:45,610 --> 00:38:48,550
subtitle repository ranking scheme thus

731
00:38:48,550 --> 00:38:50,740
taking control completely over the

732
00:38:50,740 --> 00:38:53,370
entire sub subtitles supply chain and

733
00:38:53,370 --> 00:38:55,930
this means that what we just presented

734
00:38:55,930 --> 00:38:59,050
is a new malware delivery system

735
00:38:59,050 --> 00:39:01,360
completely transparent and requires no

736
00:39:01,360 --> 00:39:02,980
user interaction which in our case

737
00:39:02,980 --> 00:39:06,640
included over 220 million potential

738
00:39:06,640 --> 00:39:09,370
victims and the notion of attackers

739
00:39:09,370 --> 00:39:11,440
being able to upload malicious subtitle

740
00:39:11,440 --> 00:39:13,450
to a major repository and forcing

741
00:39:13,450 --> 00:39:14,680
different players to download them

742
00:39:14,680 --> 00:39:16,960
should now be taking into account as a

743
00:39:16,960 --> 00:39:19,150
new valid attack vector and prepare the

744
00:39:19,150 --> 00:39:21,190
security vendors and Industry to

745
00:39:21,190 --> 00:39:23,920
mitigate it now for the moment we've all

746
00:39:23,920 --> 00:39:25,930
been waiting on Lee and myself we made a

747
00:39:25,930 --> 00:39:29,050
little bonus for ru for you we curated

748
00:39:29,050 --> 00:39:31,420
our favorite color popping sins into a

749
00:39:31,420 --> 00:39:34,120
beautiful compilation actually on the

750
00:39:34,120 --> 00:39:35,890
first draft of this talk this bonus was

751
00:39:35,890 --> 00:39:39,660
titled two girls one cluck

752
00:39:39,870 --> 00:39:42,870
yeah but then we almost got fired so we

753
00:39:42,870 --> 00:39:45,570
had to tone it down a little bit here it

754
00:39:45,570 --> 00:40:23,690
is enjoy people sometimes make mistakes

755
00:40:23,690 --> 00:40:29,580
yes they do it's not a real hoist this

756
00:40:29,580 --> 00:40:31,020
box just interprets signals from the

757
00:40:31,020 --> 00:40:32,820
computer and turns them into sound shall

758
00:40:32,820 --> 00:40:45,760
we yeah what is it say what I think is

759
00:40:45,760 --> 00:40:48,969
[Music]

760
00:40:50,900 --> 00:40:53,250
my damn that would it

761
00:40:53,250 --> 00:40:56,420
[Music]

762
00:41:19,200 --> 00:41:21,880
and that's just a sample of the exciting

763
00:41:21,880 --> 00:41:24,400
exploits ahead in our first feature

764
00:41:24,400 --> 00:41:28,360
motion picture holy memoranda folks make

765
00:41:28,360 --> 00:41:29,740
a note not to miss it

766
00:41:29,740 --> 00:41:32,480
good thinking Robin

767
00:41:32,480 --> 00:41:39,190
[Music]

768
00:41:47,400 --> 00:41:50,550
thank you

