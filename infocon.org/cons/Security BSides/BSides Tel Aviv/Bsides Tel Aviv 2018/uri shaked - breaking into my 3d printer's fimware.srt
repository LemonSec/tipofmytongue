1
00:00:00,199 --> 00:00:02,850
it's a very promising I really looking

2
00:00:02,850 --> 00:00:04,049
forward to it thank you

3
00:00:04,049 --> 00:00:14,009
good luck Thanks Cheers so yes so good

4
00:00:14,009 --> 00:00:22,140
book everybody my name is URI yeah so

5
00:00:22,140 --> 00:00:25,260
I'm worried shaked I'm a front-end web

6
00:00:25,260 --> 00:00:29,070
developer I my day job is I worked part

7
00:00:29,070 --> 00:00:33,170
time for blackberry yes they still exist

8
00:00:33,170 --> 00:00:37,440
and in my free time I do a lot of fun

9
00:00:37,440 --> 00:00:39,690
stuff which I'm going to tell you about

10
00:00:39,690 --> 00:00:44,820
right now so these are the slides I also

11
00:00:44,820 --> 00:00:48,000
be quiet mister feedback I also share

12
00:00:48,000 --> 00:00:50,460
them on Twitter so you can find the link

13
00:00:50,460 --> 00:00:52,410
to the slides on my Twitter it's going

14
00:00:52,410 --> 00:00:55,289
to be up here if you can see the mouse

15
00:00:55,289 --> 00:00:57,510
it's going to be up here for the

16
00:00:57,510 --> 00:01:01,440
duration of the talk so let's start my

17
00:01:01,440 --> 00:01:04,709
story starts a few about a year ago or a

18
00:01:04,709 --> 00:01:08,280
little more when I found this 3d printer

19
00:01:08,280 --> 00:01:12,119
on Kickstarter and of course I begged

20
00:01:12,119 --> 00:01:13,920
this printer it came with a lot of

21
00:01:13,920 --> 00:01:19,259
promises and I decided I want it I want

22
00:01:19,259 --> 00:01:21,240
to have it how many people in the

23
00:01:21,240 --> 00:01:25,049
audience have 3d printers so it's fun

24
00:01:25,049 --> 00:01:28,080
when it works but unfortunately this

25
00:01:28,080 --> 00:01:30,780
Kickstarter process a problem progress

26
00:01:30,780 --> 00:01:34,020
project came with a lot of promises but

27
00:01:34,020 --> 00:01:39,420
failed to deliver the real thing behind

28
00:01:39,420 --> 00:01:42,150
the real story is that tourists earlier

29
00:01:42,150 --> 00:01:44,850
I ordered another printer from the same

30
00:01:44,850 --> 00:01:48,869
company on Kickstarter and it was pretty

31
00:01:48,869 --> 00:01:51,630
much a failure this software didn't work

32
00:01:51,630 --> 00:01:54,000
at all and the hardware was pretty good

33
00:01:54,000 --> 00:01:57,840
so in this new campaign they said we

34
00:01:57,840 --> 00:02:00,030
learned from the past mistakes and we

35
00:02:00,030 --> 00:02:01,829
are going to do it so much better and we

36
00:02:01,829 --> 00:02:04,710
are also going to open source the femur

37
00:02:04,710 --> 00:02:09,049
and everything and I believe them

38
00:02:09,508 --> 00:02:13,690
luckily for the older printer the micro

39
00:02:13,690 --> 00:02:16,330
printer the micro 3d printer they all

40
00:02:16,330 --> 00:02:19,000
the one there was some guy from the

41
00:02:19,000 --> 00:02:20,950
community who created an open-source

42
00:02:20,950 --> 00:02:23,380
framework and a better software which

43
00:02:23,380 --> 00:02:26,739
made the that printer work perfectly so

44
00:02:26,739 --> 00:02:30,370
when I got my new printer my M 3d Pro I

45
00:02:30,370 --> 00:02:33,940
was hoping for something similar to

46
00:02:33,940 --> 00:02:36,489
happen and then I saw this comment on

47
00:02:36,489 --> 00:02:40,300
github basically it's the same guy who

48
00:02:40,300 --> 00:02:43,300
built the alternate femur for the meat

49
00:02:43,300 --> 00:02:46,480
the micro D alder printer and he said

50
00:02:46,480 --> 00:02:48,940
getting our femur to run on the micro

51
00:02:48,940 --> 00:02:51,519
plus or the MPD Pro that was my new

52
00:02:51,519 --> 00:02:54,430
printer first requires figuring out how

53
00:02:54,430 --> 00:02:58,660
to decrypt an 3ds official femur he also

54
00:02:58,660 --> 00:03:01,000
included a lot of information about how

55
00:03:01,000 --> 00:03:05,080
he did it with the previous femur and at

56
00:03:05,080 --> 00:03:07,360
some point here we mentioned they used

57
00:03:07,360 --> 00:03:13,540
the substitution cipher so anything

58
00:03:13,540 --> 00:03:16,090
funny about substitution ciphers all

59
00:03:16,090 --> 00:03:18,269
right perfect

60
00:03:18,269 --> 00:03:20,410
everyone should use it and we're going

61
00:03:20,410 --> 00:03:25,110
to see why right now so I said okay

62
00:03:25,110 --> 00:03:29,070
decrypting em 3ds official fumer

63
00:03:29,070 --> 00:03:30,310
accepted

64
00:03:30,310 --> 00:03:35,560
challenge so I had his femur and I

65
00:03:35,560 --> 00:03:37,420
wanted to decrypt it how would I go

66
00:03:37,420 --> 00:03:40,720
about it I had two options first of all

67
00:03:40,720 --> 00:03:42,790
I needed to get to put my hands on that

68
00:03:42,790 --> 00:03:44,079
femur

69
00:03:44,079 --> 00:03:46,230
one option would be just to try to

70
00:03:46,230 --> 00:03:48,459
connect with the hardware with a

71
00:03:48,459 --> 00:03:50,530
microcontroller inside the femur and

72
00:03:50,530 --> 00:03:54,040
extract it somehow the problem is that

73
00:03:54,040 --> 00:03:56,590
it would void warranty and there is a

74
00:03:56,590 --> 00:04:00,790
good chance I will destroy my femur so I

75
00:04:00,790 --> 00:04:03,880
tried to see if I could somehow get

76
00:04:03,880 --> 00:04:06,510
through the femur update mechanism and

77
00:04:06,510 --> 00:04:09,579
extract the femur from there which was

78
00:04:09,579 --> 00:04:14,260
supposedly encrypted as the guy said on

79
00:04:14,260 --> 00:04:18,639
the github comment so I tried to

80
00:04:18,639 --> 00:04:21,108
download or I downloaded this

81
00:04:21,108 --> 00:04:25,719
where and how many of you know dot pic

82
00:04:25,719 --> 00:04:28,930
not too many am I in the right place

83
00:04:28,930 --> 00:04:31,729
anyway dot pick is a nice tool that

84
00:04:31,729 --> 00:04:35,150
allows you to take dotnet projects D

85
00:04:35,150 --> 00:04:38,659
compile them so I loaded their software

86
00:04:38,659 --> 00:04:41,449
which was written in dotnet into dot

87
00:04:41,449 --> 00:04:44,830
peak and I found in one of their file

88
00:04:44,830 --> 00:04:48,080
this resources section which included

89
00:04:48,080 --> 00:04:51,139
very promising files called M 3d

90
00:04:51,139 --> 00:04:55,639
embedded femur I found four of them they

91
00:04:55,639 --> 00:04:57,800
only had three printers I filled out

92
00:04:57,800 --> 00:05:03,259
later why they had four here so after I

93
00:05:03,259 --> 00:05:05,960
extracted the femur we had a fun part of

94
00:05:05,960 --> 00:05:07,610
trying to figure out what kind of

95
00:05:07,610 --> 00:05:10,629
encryption be used and whether we can

96
00:05:10,629 --> 00:05:13,909
defeat it somehow and this is what we

97
00:05:13,909 --> 00:05:15,529
are going to do now together we are

98
00:05:15,529 --> 00:05:17,300
going to walk through the journey of

99
00:05:17,300 --> 00:05:21,279
decrypting this femur so initial

100
00:05:21,279 --> 00:05:24,800
analysis you get a new femur you start

101
00:05:24,800 --> 00:05:28,310
looking at the file first of all it had

102
00:05:28,310 --> 00:05:30,529
no readable ASCII strings so obviously

103
00:05:30,529 --> 00:05:33,710
it was encrypted I hope maybe it would

104
00:05:33,710 --> 00:05:38,020
not be but it was the file size was

105
00:05:38,020 --> 00:05:42,139
forty fifty four kilobytes but when I

106
00:05:42,139 --> 00:05:45,319
try to compress it it was smaller so

107
00:05:45,319 --> 00:05:48,800
this means this was not some kind of a s

108
00:05:48,800 --> 00:05:52,729
encryption and that substitution cipher

109
00:05:52,729 --> 00:05:57,860
was very likely here I also find found

110
00:05:57,860 --> 00:06:00,529
another comment on get up saying that

111
00:06:00,529 --> 00:06:03,830
this was an SDN 32 CPU which is armed

112
00:06:03,830 --> 00:06:05,539
little india and i found the

113
00:06:05,539 --> 00:06:08,830
documentation for the cpu which will see

114
00:06:08,830 --> 00:06:13,039
how it turned useful in a bit and then i

115
00:06:13,039 --> 00:06:15,080
also found some mention that there are

116
00:06:15,080 --> 00:06:17,060
actually two female files which

117
00:06:17,060 --> 00:06:19,729
explained why they had four fumer files

118
00:06:19,729 --> 00:06:22,189
in the software for only three products

119
00:06:22,189 --> 00:06:25,069
so we are going to use both of this

120
00:06:25,069 --> 00:06:27,860
ephemeral file through our firmware

121
00:06:27,860 --> 00:06:31,459
defeating process so the first thing I

122
00:06:31,459 --> 00:06:34,610
did was taking the file and trying

123
00:06:34,610 --> 00:06:39,460
to analyze it basically I used Jupiter

124
00:06:39,460 --> 00:06:42,830
which is repple for Python how many

125
00:06:42,830 --> 00:06:45,289
Python reading people do we have in the

126
00:06:45,289 --> 00:06:47,659
audience all right so I am in the right

127
00:06:47,659 --> 00:06:51,889
place indeed and Jupiter is a very nice

128
00:06:51,889 --> 00:06:54,580
tool used in the data science community

129
00:06:54,580 --> 00:06:58,699
so let's open Jupiter and I hope can you

130
00:06:58,699 --> 00:07:00,319
see the code here is the font large

131
00:07:00,319 --> 00:07:04,310
enough please say yes yes I get likes if

132
00:07:04,310 --> 00:07:08,870
not please move to the second row so

133
00:07:08,870 --> 00:07:11,620
basically I have here a little code that

134
00:07:11,620 --> 00:07:14,029
these imports we are going to use later

135
00:07:14,029 --> 00:07:16,189
the tweets the fumer from the encrypted

136
00:07:16,189 --> 00:07:18,650
filmer from a file and the first thing I

137
00:07:18,650 --> 00:07:22,370
did was simply to create a histogram

138
00:07:22,370 --> 00:07:25,250
that shows for each of the byte values

139
00:07:25,250 --> 00:07:28,039
how common they are so we are not going

140
00:07:28,039 --> 00:07:30,650
to go over all the code I will just

141
00:07:30,650 --> 00:07:32,870
explain what each what each block of

142
00:07:32,870 --> 00:07:35,000
code does so we can get to the exciting

143
00:07:35,000 --> 00:07:38,949
parts faster so let's run this and we

144
00:07:38,949 --> 00:07:43,659
can see this histogram which has a very

145
00:07:43,659 --> 00:07:50,029
nice this spike in the middle so there

146
00:07:50,029 --> 00:07:53,750
was one byte which appeared much more

147
00:07:53,750 --> 00:07:55,310
than the other byte one value that

148
00:07:55,310 --> 00:07:58,129
appeared one more much more this is the

149
00:07:58,129 --> 00:08:02,360
value the zoom is too large so we can't

150
00:08:02,360 --> 00:08:07,099
see it here but this was 138 139 I still

151
00:08:07,099 --> 00:08:11,750
remember this so my guess that was that

152
00:08:11,750 --> 00:08:14,779
this was not this was 0 0 is a very

153
00:08:14,779 --> 00:08:17,779
common value in a few more files because

154
00:08:17,779 --> 00:08:20,659
it appears in memory address s a lot of

155
00:08:20,659 --> 00:08:23,719
pointers every now terminated string is

156
00:08:23,719 --> 00:08:26,629
obviously terminated by now so my first

157
00:08:26,629 --> 00:08:29,180
guess was that this spike that we see

158
00:08:29,180 --> 00:08:34,190
here the most common value 139 was

159
00:08:34,190 --> 00:08:36,919
actually 0 so with that in mind I

160
00:08:36,919 --> 00:08:39,740
started creating a small table let's do

161
00:08:39,740 --> 00:08:43,200
it together here that map's 130

162
00:08:43,200 --> 00:08:46,020
nine to zero that's our first guest for

163
00:08:46,020 --> 00:08:49,620
today then I went to the Fillmore file

164
00:08:49,620 --> 00:08:52,020
and I started just you know going over

165
00:08:52,020 --> 00:08:55,050
it and then nearly this is the Fillmore

166
00:08:55,050 --> 00:08:57,360
file the encrypted one and near the end

167
00:08:57,360 --> 00:09:00,510
of it I discovered is one F one F one F

168
00:09:00,510 --> 00:09:08,190
one F actually have a slide for it so so

169
00:09:08,190 --> 00:09:11,250
yes you can see those one F 1 F 1 F 1 F

170
00:09:11,250 --> 00:09:15,000
near the end of the thermal file and my

171
00:09:15,000 --> 00:09:17,970
guess was usually when you have few more

172
00:09:17,970 --> 00:09:20,670
files they are padded with f FS because

173
00:09:20,670 --> 00:09:23,160
of the way flash memories works that's

174
00:09:23,160 --> 00:09:25,740
the best value for padding because it

175
00:09:25,740 --> 00:09:29,340
can be overwritten later so my guess was

176
00:09:29,340 --> 00:09:33,630
that this sequence of 1 FS actually

177
00:09:33,630 --> 00:09:36,210
stood for F F at the end of the file

178
00:09:36,210 --> 00:09:38,520
so with that second guess let's update

179
00:09:38,520 --> 00:09:44,610
the table and say that one F maps to F F

180
00:09:44,610 --> 00:09:50,160
not F F F and I already guessed two

181
00:09:50,160 --> 00:09:53,760
characters 0 and F F which were the

182
00:09:53,760 --> 00:09:57,540
easiest and now I started like trying to

183
00:09:57,540 --> 00:10:00,450
explore a de fumer see if I can find any

184
00:10:00,450 --> 00:10:04,680
patterns and interestingly I don't know

185
00:10:04,680 --> 00:10:06,960
if you can see it here but I have a

186
00:10:06,960 --> 00:10:09,750
slide for this I found at the beginning

187
00:10:09,750 --> 00:10:14,190
of the femur so this 8 b is actually 138

188
00:10:14,190 --> 00:10:18,120
9 in hexa which is the zeros but then we

189
00:10:18,120 --> 00:10:21,720
have a lot of twenty fours and by

190
00:10:21,720 --> 00:10:24,270
reading the documentation for the CPU I

191
00:10:24,270 --> 00:10:26,460
found at the beginning of the femur

192
00:10:26,460 --> 00:10:30,210
actually contains interrupt vector which

193
00:10:30,210 --> 00:10:32,700
is just a list of pointers to functions

194
00:10:32,700 --> 00:10:35,910
that handle specific events that happen

195
00:10:35,910 --> 00:10:39,960
on the system and I also learned from

196
00:10:39,960 --> 00:10:43,040
the CPU documentation that everything

197
00:10:43,040 --> 00:10:46,440
all the flash memory all this femur is

198
00:10:46,440 --> 00:10:52,380
loaded to 0 0 0 8 so there is a lot of

199
00:10:52,380 --> 00:10:54,360
repetition here and I know these are

200
00:10:54,360 --> 00:10:55,990
this or should

201
00:10:55,990 --> 00:10:58,930
the addresses that are mapped into the

202
00:10:58,930 --> 00:11:03,070
femoral code so I and this is zero zero

203
00:11:03,070 --> 00:11:06,850
and this is a little endian cpu so my

204
00:11:06,850 --> 00:11:09,279
next guess would be that ninety four

205
00:11:09,279 --> 00:11:13,300
would be zero eight so this would be a

206
00:11:13,300 --> 00:11:18,730
legitimate memory address so let's add

207
00:11:18,730 --> 00:11:21,490
this guest to the table as well that

208
00:11:21,490 --> 00:11:27,040
would be nine ninety four would be zero

209
00:11:27,040 --> 00:11:31,870
eight and we have those we have those

210
00:11:31,870 --> 00:11:36,130
three bytes we guessed so let's check on

211
00:11:36,130 --> 00:11:39,880
our progress we have about 1% of the

212
00:11:39,880 --> 00:11:44,260
firmware and this was about two hours of

213
00:11:44,260 --> 00:11:48,010
work into guessing and at that point I

214
00:11:48,010 --> 00:11:50,290
was like okay there is this huge file

215
00:11:50,290 --> 00:11:54,160
with a lot of zeros and some other

216
00:11:54,160 --> 00:11:57,720
random bytes how do I continue from here

217
00:11:57,720 --> 00:12:03,100
and I had this idea what if I look for

218
00:12:03,100 --> 00:12:07,089
strings you know but the thing is you

219
00:12:07,089 --> 00:12:09,880
won't find the strings in the file but

220
00:12:09,880 --> 00:12:12,339
if I knew one of the strings that is

221
00:12:12,339 --> 00:12:14,620
likely to appear in the fumer and it was

222
00:12:14,620 --> 00:12:16,870
long enough perhaps I could find a

223
00:12:16,870 --> 00:12:18,820
pattern of repeating letters in that

224
00:12:18,820 --> 00:12:24,520
string so before we see that I went

225
00:12:24,520 --> 00:12:26,709
began to dot pick and looked at the

226
00:12:26,709 --> 00:12:29,220
software that runs on the computer and

227
00:12:29,220 --> 00:12:32,170
found a file called femur controller

228
00:12:32,170 --> 00:12:34,630
which sounded really promises promising

229
00:12:34,630 --> 00:12:37,839
where I found is unable to Hindi in it

230
00:12:37,839 --> 00:12:40,329
hardware check micro micro motion cable

231
00:12:40,329 --> 00:12:43,870
connection and I took this string and

232
00:12:43,870 --> 00:12:46,570
the first thing I wanted to know is how

233
00:12:46,570 --> 00:12:48,520
many repetitions are you having this

234
00:12:48,520 --> 00:12:52,390
string so hoping that this string would

235
00:12:52,390 --> 00:12:53,500
appear in the femur

236
00:12:53,500 --> 00:12:57,910
I wrote the following snippet it's a

237
00:12:57,910 --> 00:13:00,250
little bit long but basically let's run

238
00:13:00,250 --> 00:13:02,860
it what it does it creates this nice

239
00:13:02,860 --> 00:13:06,970
plot where you can see each star each

240
00:13:06,970 --> 00:13:09,350
different height represented the

241
00:13:09,350 --> 00:13:11,630
and character different letter so this

242
00:13:11,630 --> 00:13:14,180
one is above a so the green one

243
00:13:14,180 --> 00:13:16,790
represents all the a and we can see the

244
00:13:16,790 --> 00:13:19,430
eight characters repeats for time and

245
00:13:19,430 --> 00:13:24,050
basically this chart visualizes how many

246
00:13:24,050 --> 00:13:25,880
characters are being repeated the

247
00:13:25,880 --> 00:13:28,220
pattern of repetition of characters so

248
00:13:28,220 --> 00:13:30,560
we can see there are a lot of there are

249
00:13:30,560 --> 00:13:34,400
a lot of repetitions like these above

250
00:13:34,400 --> 00:13:37,790
the sea this purple one repeats 16 and

251
00:13:37,790 --> 00:13:41,930
then we have these Oh red one above the

252
00:13:41,930 --> 00:13:45,170
O which also repeats like six times so

253
00:13:45,170 --> 00:13:47,480
this string had a very distinct pattern

254
00:13:47,480 --> 00:13:50,030
of character repetition so we know the

255
00:13:50,030 --> 00:13:52,040
spacing and how many times they should

256
00:13:52,040 --> 00:13:56,590
repeat and with that in mind we can

257
00:13:56,590 --> 00:13:59,180
write some code that we look for a

258
00:13:59,180 --> 00:14:01,900
pattern of this repetition and try to

259
00:14:01,900 --> 00:14:07,370
find a match so I went ahead and let's

260
00:14:07,370 --> 00:14:10,040
add a new block yes and I crafted some

261
00:14:10,040 --> 00:14:14,240
code that would try to find this pattern

262
00:14:14,240 --> 00:14:16,910
so this is the string again and then I

263
00:14:16,910 --> 00:14:19,220
have this code that basically goes over

264
00:14:19,220 --> 00:14:22,010
the entire framework and goes over the

265
00:14:22,010 --> 00:14:24,500
search ring and tries to find a match to

266
00:14:24,500 --> 00:14:28,580
the pattern and if it does it's it's

267
00:14:28,580 --> 00:14:31,670
print hey I found it and updates our

268
00:14:31,670 --> 00:14:37,430
table with the corresponding keys so as

269
00:14:37,430 --> 00:14:42,080
you can imagine I debug the rotate debug

270
00:14:42,080 --> 00:14:46,250
date ran it and it ran no output nothing

271
00:14:46,250 --> 00:14:52,310
found but if you look at the string it

272
00:14:52,310 --> 00:14:55,070
says me micromotion caliber cable and

273
00:14:55,070 --> 00:14:57,350
micro was their older model so perhaps

274
00:14:57,350 --> 00:14:59,510
this string was just not relevant from

275
00:14:59,510 --> 00:15:01,430
my specific framer they had the same

276
00:15:01,430 --> 00:15:05,960
software for all the models of this

277
00:15:05,960 --> 00:15:08,240
printer so I went to look for other

278
00:15:08,240 --> 00:15:10,160
strings with a lot of repetition and

279
00:15:10,160 --> 00:15:14,110
luckily I could find another one that

280
00:15:14,110 --> 00:15:17,780
was repetier protocol and you can see

281
00:15:17,780 --> 00:15:21,260
how many E's and O's

282
00:15:21,260 --> 00:15:24,230
and ours we have repeating here so less

283
00:15:24,230 --> 00:15:28,270
repetitions but still unique enough so I

284
00:15:28,270 --> 00:15:32,300
said okay why won't I just copy paste

285
00:15:32,300 --> 00:15:36,800
this code and try to search for it and I

286
00:15:36,800 --> 00:15:40,540
copy paste of the code run it again and

287
00:15:40,540 --> 00:15:44,620
yet again no match

288
00:15:44,620 --> 00:15:49,580
so so far I spent like more more more

289
00:15:49,580 --> 00:15:51,710
than 10 hours trying to figure this out

290
00:15:51,710 --> 00:15:57,340
and I only figured out around 1% of the

291
00:15:57,340 --> 00:16:06,610
dictionary for decrypting this fumer but

292
00:16:06,610 --> 00:16:09,800
I decided it was not a time to give up

293
00:16:09,800 --> 00:16:13,340
yet and I tried to look at the code that

294
00:16:13,340 --> 00:16:16,970
I used for the micro Treaty so the guy

295
00:16:16,970 --> 00:16:19,070
on get up posted the exact process that

296
00:16:19,070 --> 00:16:21,230
he used for micro Treaty and he also

297
00:16:21,230 --> 00:16:23,480
open sourced the code that encrypts and

298
00:16:23,480 --> 00:16:26,720
decrypts their femur so looking into

299
00:16:26,720 --> 00:16:31,180
that code I actually found on github

300
00:16:31,180 --> 00:16:35,300
this is the code and nothing is

301
00:16:35,300 --> 00:16:38,030
important here I just want you to take

302
00:16:38,030 --> 00:16:42,430
my word for it if we find the right line

303
00:16:42,430 --> 00:16:44,960
so yeah this is the line that actually

304
00:16:44,960 --> 00:16:47,800
does the description from the table and

305
00:16:47,800 --> 00:16:51,250
what you can basically see here this

306
00:16:51,250 --> 00:16:54,320
little expression basically swaps any

307
00:16:54,320 --> 00:16:58,490
pair of adjacent bytes and take my word

308
00:16:58,490 --> 00:17:00,950
for that we are not going to spend time

309
00:17:00,950 --> 00:17:06,440
on that so in the micro femur they swept

310
00:17:06,440 --> 00:17:09,140
any pair of adjacent bytes and I wanted

311
00:17:09,140 --> 00:17:13,280
to see maybe that was the part I was

312
00:17:13,280 --> 00:17:18,369
missing so I went back to my Python and

313
00:17:18,369 --> 00:17:21,770
I added another method just before

314
00:17:21,770 --> 00:17:24,680
loading the femur that would just swap

315
00:17:24,680 --> 00:17:31,460
the pairs of bytes so let's go over this

316
00:17:31,460 --> 00:17:33,500
let's run this method

317
00:17:33,500 --> 00:17:35,450
and if you are really quick python

318
00:17:35,450 --> 00:17:37,850
reader you can identify this expression

319
00:17:37,850 --> 00:17:41,090
from the C code that we saw earlier just

320
00:17:41,090 --> 00:17:44,690
written in pythons way and let's run

321
00:17:44,690 --> 00:17:47,679
this and run this so now we have

322
00:17:47,679 --> 00:17:50,480
reloaded the fumer but with every pair

323
00:17:50,480 --> 00:17:53,030
of bytes swept just like they did with

324
00:17:53,030 --> 00:17:59,000
the micro and i prayed for the gods of

325
00:17:59,000 --> 00:18:01,460
the cryptid Froome encrypted humorous

326
00:18:01,460 --> 00:18:04,580
and run this code again searching from

327
00:18:04,580 --> 00:18:06,980
unable to he need the hardware bla bla

328
00:18:06,980 --> 00:18:07,669
bla bla bla

329
00:18:07,669 --> 00:18:13,250
ah no not that code the one below so I

330
00:18:13,250 --> 00:18:19,330
ran it again and it found it

331
00:18:23,090 --> 00:18:26,299
so well thank you first sign of progress

332
00:18:26,299 --> 00:18:29,029
and since I already copy pasted the code

333
00:18:29,029 --> 00:18:31,279
with the other string I also ran it and

334
00:18:31,279 --> 00:18:38,179
it found it as well so I wrote another

335
00:18:38,179 --> 00:18:40,730
method so I could easily measure my

336
00:18:40,730 --> 00:18:43,309
progress and I call it obviously call it

337
00:18:43,309 --> 00:18:49,940
progress so we have 8% of the femur

338
00:18:49,940 --> 00:18:56,659
figured out and oh another thing I want

339
00:18:56,659 --> 00:18:59,779
you to notice is that the offsets for to

340
00:18:59,779 --> 00:19:02,720
these two strings is 48 something and

341
00:19:02,720 --> 00:19:05,960
this is also 84 something and this is

342
00:19:05,960 --> 00:19:09,139
also 48 something they are both very

343
00:19:09,139 --> 00:19:12,080
close so I figured out this part who

344
00:19:12,080 --> 00:19:14,840
could probably be where they have the

345
00:19:14,840 --> 00:19:19,519
strings so the next step for me would be

346
00:19:19,519 --> 00:19:21,999
for us would be to try to look there and

347
00:19:21,999 --> 00:19:25,159
try to see if we can guess some of the

348
00:19:25,159 --> 00:19:28,639
letters there so I wrote a small hex

349
00:19:28,639 --> 00:19:33,080
damped method you can probably some of

350
00:19:33,080 --> 00:19:34,879
you can probably recognize these escape

351
00:19:34,879 --> 00:19:37,730
characters that will put colors in our

352
00:19:37,730 --> 00:19:40,700
exams and I will show you in a moment

353
00:19:40,700 --> 00:19:43,220
what this does let's run it first so

354
00:19:43,220 --> 00:19:46,190
this is our super-powerful hex dump and

355
00:19:46,190 --> 00:19:48,249
[Music]

356
00:19:48,249 --> 00:19:52,159
we are going to try to dump the area of

357
00:19:52,159 --> 00:19:57,200
the string and make some guesses so that

358
00:19:57,200 --> 00:20:00,769
would be first SK and now you can see

359
00:20:00,769 --> 00:20:03,740
their output of this hex dump and as you

360
00:20:03,740 --> 00:20:06,259
can see it prints the bytes that we

361
00:20:06,259 --> 00:20:09,080
already know and for those we still

362
00:20:09,080 --> 00:20:10,999
don't have the translation it prints

363
00:20:10,999 --> 00:20:13,850
them in purple so we can easily tell the

364
00:20:13,850 --> 00:20:15,950
difference between bytes that we already

365
00:20:15,950 --> 00:20:18,799
know and bytes that we do not know yet

366
00:20:18,799 --> 00:20:23,269
and by looking at these strings we can

367
00:20:23,269 --> 00:20:25,970
make a few wild guesses here like this

368
00:20:25,970 --> 00:20:29,720
ear more name you could probably guess

369
00:20:29,720 --> 00:20:31,899
what the first letter would be right

370
00:20:31,899 --> 00:20:34,710
yeah shout it out it

371
00:20:34,710 --> 00:20:39,430
you're right right right so let's update

372
00:20:39,430 --> 00:20:42,550
our table rerun the code and we can see

373
00:20:42,550 --> 00:20:48,940
it says formal name framer Ian Aryan any

374
00:20:48,940 --> 00:20:51,210
ideas

375
00:20:51,210 --> 00:20:55,390
yeah yeah yeah I just need to copy paste

376
00:20:55,390 --> 00:21:05,140
this correctly so we have this say it

377
00:21:05,140 --> 00:21:07,750
louder I couldn't hear the ass it sounds

378
00:21:07,750 --> 00:21:11,200
like F but it's an S right actually no

379
00:21:11,200 --> 00:21:13,540
this is V that's okay that one was

380
00:21:13,540 --> 00:21:18,280
incorrect and that would be the 23 I

381
00:21:18,280 --> 00:21:24,370
guess alright so we have this guesswork

382
00:21:24,370 --> 00:21:27,130
and now it reads three more version and

383
00:21:27,130 --> 00:21:32,440
we also have machine to pool why I also

384
00:21:32,440 --> 00:21:34,600
asked myself why why am I doing this to

385
00:21:34,600 --> 00:21:36,720
myself

386
00:21:36,720 --> 00:21:43,030
you know anyway so type and then I took

387
00:21:43,030 --> 00:21:46,030
the liberty so we can see serial number

388
00:21:46,030 --> 00:21:48,940
which is another string and this gave me

389
00:21:48,940 --> 00:21:52,000
the confidence we are going through the

390
00:21:52,000 --> 00:21:56,830
right path and we also have this M D

391
00:21:56,830 --> 00:21:59,500
yeah three that's right so let's put our

392
00:21:59,500 --> 00:22:06,070
tree that would be sixty something so

393
00:22:06,070 --> 00:22:14,080
that would be a tree and then table is

394
00:22:14,080 --> 00:22:16,930
not good you only want a table okay so

395
00:22:16,930 --> 00:22:21,220
we have M 3d underscore P something and

396
00:22:21,220 --> 00:22:24,670
since this name of the product is M to

397
00:22:24,670 --> 00:22:27,760
the pro I would guess that this to

398
00:22:27,760 --> 00:22:32,800
Carter's are our and O so let's try to

399
00:22:32,800 --> 00:22:41,820
add them as well so for T a and F 5

400
00:22:41,820 --> 00:22:45,880
would be for our and oh and by the way

401
00:22:45,880 --> 00:22:47,760
thank you for helping me

402
00:22:47,760 --> 00:22:50,910
love that we are doing this together so

403
00:22:50,910 --> 00:22:54,840
yeah so at this point I took a few

404
00:22:54,840 --> 00:22:57,860
guesses and I have most of the letters

405
00:22:57,860 --> 00:23:01,050
it starts to look promising like we are

406
00:23:01,050 --> 00:23:03,870
onto something so I went over both

407
00:23:03,870 --> 00:23:08,870
femurs and I was looking for even more

408
00:23:08,870 --> 00:23:11,700
ASCII originals with ASCII characters

409
00:23:11,700 --> 00:23:16,680
when I found this nice thing next to the

410
00:23:16,680 --> 00:23:19,110
end of the second femur and as you can

411
00:23:19,110 --> 00:23:21,330
see it figured me out a lot of

412
00:23:21,330 --> 00:23:23,580
characters we are going not going to do

413
00:23:23,580 --> 00:23:26,430
them by hand but basically this is what

414
00:23:26,430 --> 00:23:33,210
is so when I started h o bo d any

415
00:23:33,210 --> 00:23:40,380
guesses all right so I guess I started

416
00:23:40,380 --> 00:23:44,130
by guessing that this Bo AR D would be

417
00:23:44,130 --> 00:23:49,170
bored so I guess it's a guest a and D

418
00:23:49,170 --> 00:23:52,110
and made a lot of other gases which

419
00:23:52,110 --> 00:23:56,370
revealed this string said hello board hi

420
00:23:56,370 --> 00:23:59,430
nice to see you today try D and then it

421
00:23:59,430 --> 00:24:03,180
was cuz I really wanted to know what I

422
00:24:03,180 --> 00:24:05,220
needed to try so I tried to google it

423
00:24:05,220 --> 00:24:08,010
but no results if you know where these

424
00:24:08,010 --> 00:24:10,310
come from I would love to learn from you

425
00:24:10,310 --> 00:24:14,970
anyway with that in mind I went and

426
00:24:14,970 --> 00:24:17,370
looked for more ascii and i found a few

427
00:24:17,370 --> 00:24:22,470
more regions and fumer strengths that I

428
00:24:22,470 --> 00:24:25,890
added to my dictionary and at this point

429
00:24:25,890 --> 00:24:31,020
I even found % and at this point I was

430
00:24:31,020 --> 00:24:37,700
pretty happy I type I type progress and

431
00:24:37,700 --> 00:24:42,030
we are only almost 20% just by doing

432
00:24:42,030 --> 00:24:46,350
some guesses we got 10 more % so where

433
00:24:46,350 --> 00:24:50,280
can we take this next we are I scanned

434
00:24:50,280 --> 00:24:52,770
files a few more times we were out of

435
00:24:52,770 --> 00:24:56,070
ASCII strings so I started looking for

436
00:24:56,070 --> 00:24:58,559
other predators when I found this

437
00:24:58,559 --> 00:25:03,299
mysterious table I found in the smaller

438
00:25:03,299 --> 00:25:05,909
femoris some offset where I had an

439
00:25:05,909 --> 00:25:08,159
interesting pattern let me show you this

440
00:25:08,159 --> 00:25:13,340
so this would be the mastery table and

441
00:25:13,340 --> 00:25:16,409
you can see here this is a table and it

442
00:25:16,409 --> 00:25:22,409
has this see II ll be T WA WI and this

443
00:25:22,409 --> 00:25:25,110
is an ascending sequence of letters and

444
00:25:25,110 --> 00:25:26,789
then we also have an ascending sequence

445
00:25:26,789 --> 00:25:33,360
of lowercase letters and at this point I

446
00:25:33,360 --> 00:25:35,909
said okay I have most of the uppercase

447
00:25:35,909 --> 00:25:38,429
letters let's check which letters I'm

448
00:25:38,429 --> 00:25:40,980
still missing and try to figure out if I

449
00:25:40,980 --> 00:25:45,720
could just put them in missing spots so

450
00:25:45,720 --> 00:25:48,600
I wrote another small snippet that would

451
00:25:48,600 --> 00:25:51,929
go over the table that will be in so far

452
00:25:51,929 --> 00:25:54,990
and look for all the escalators and

453
00:25:54,990 --> 00:25:58,110
prints the ones that are missing and we

454
00:25:58,110 --> 00:26:00,480
have only a few missing letters we can

455
00:26:00,480 --> 00:26:05,909
see we have G and J Q X and Z so we have

456
00:26:05,909 --> 00:26:09,720
C e something something L and since the

457
00:26:09,720 --> 00:26:12,509
only letters we don't know are G and J

458
00:26:12,509 --> 00:26:15,360
and these are also the only letters from

459
00:26:15,360 --> 00:26:17,850
this list that happened to be between e

460
00:26:17,850 --> 00:26:21,149
and L and we assume that this is

461
00:26:21,149 --> 00:26:23,789
actually an ascending sequence we are

462
00:26:23,789 --> 00:26:27,110
going to make another guess and say that

463
00:26:27,110 --> 00:26:33,360
and say that these are G and J and let

464
00:26:33,360 --> 00:26:39,299
me say so this was G 95 and J would be

465
00:26:39,299 --> 00:26:44,429
just next to it 27 so that would be G

466
00:26:44,429 --> 00:26:47,700
and that would be J and I have a little

467
00:26:47,700 --> 00:26:50,940
OCD so excuse me for that and then we

468
00:26:50,940 --> 00:26:53,909
have L Oh something T and the only

469
00:26:53,909 --> 00:26:57,149
letter we are still missing our Q X and

470
00:26:57,149 --> 00:27:02,450
so that must be cute so again a table

471
00:27:02,450 --> 00:27:09,840
position what was that e 8 0 XE 8 equals

472
00:27:09,840 --> 00:27:11,110
to Q

473
00:27:11,110 --> 00:27:14,230
and then just to run it again we have

474
00:27:14,230 --> 00:27:17,200
this nice sequence I did a very same

475
00:27:17,200 --> 00:27:19,510
process with the lowercase letters just

476
00:27:19,510 --> 00:27:22,120
trying to deduce what letters we could

477
00:27:22,120 --> 00:27:25,899
have and we're not going to repeat it

478
00:27:25,899 --> 00:27:28,390
right now I'll just write a result and

479
00:27:28,390 --> 00:27:30,669
we had this nice sequence there was one

480
00:27:30,669 --> 00:27:32,169
letter here I couldn't figure out

481
00:27:32,169 --> 00:27:34,539
because we had both let's update the

482
00:27:34,539 --> 00:27:37,000
list of missing letters we had both P

483
00:27:37,000 --> 00:27:39,850
and Q which are next to each other so I

484
00:27:39,850 --> 00:27:42,429
couldn't guess which one would fit here

485
00:27:42,429 --> 00:27:46,990
between M and s and at this point I was

486
00:27:46,990 --> 00:27:49,389
looking at the beginning and I found

487
00:27:49,389 --> 00:27:51,190
this interesting pattern where you have

488
00:27:51,190 --> 00:27:54,279
0 0 0 a lot then something something

489
00:27:54,279 --> 00:27:55,630
something something something something

490
00:27:55,630 --> 00:27:59,470
a lot of repeated bites and then 8 8 8

491
00:27:59,470 --> 00:28:02,919
which we figured out at the beginning so

492
00:28:02,919 --> 00:28:05,080
I thought to myself perhaps this would

493
00:28:05,080 --> 00:28:09,220
be 1 1 1 2 2 2 3 3 3 etc perhaps this is

494
00:28:09,220 --> 00:28:14,289
again ascending sequence and I just

495
00:28:14,289 --> 00:28:16,630
tried to match and there was 7 different

496
00:28:16,630 --> 00:28:19,539
values between here and here so it seems

497
00:28:19,539 --> 00:28:23,139
like a good match so obviously I updated

498
00:28:23,139 --> 00:28:28,169
the table with these guesses as well and

499
00:28:28,169 --> 00:28:33,990
okay and let's print this again with the

500
00:28:33,990 --> 00:28:37,779
new guesses and it seems like a good

501
00:28:37,779 --> 00:28:40,240
match so we have the start of the

502
00:28:40,240 --> 00:28:42,279
beginning of the double table we have

503
00:28:42,279 --> 00:28:44,220
some D values at the beginning of the

504
00:28:44,220 --> 00:28:47,380
middle of the table and it seems like

505
00:28:47,380 --> 00:28:51,279
it's some sort of curve represented here

506
00:28:51,279 --> 00:28:54,970
because we had this value 0 repeating

507
00:28:54,970 --> 00:28:57,580
for a lot of times and then we had less

508
00:28:57,580 --> 00:29:00,460
number if you want less toothless tree

509
00:29:00,460 --> 00:29:03,070
like it seems to reduce the number of

510
00:29:03,070 --> 00:29:05,320
repetitions and then in the middle we

511
00:29:05,320 --> 00:29:08,649
have every other letter so approving in

512
00:29:08,649 --> 00:29:11,110
this table and near the end we can also

513
00:29:11,110 --> 00:29:13,809
see FF and a few more repeating

514
00:29:13,809 --> 00:29:18,279
characters I could try to do more

515
00:29:18,279 --> 00:29:21,010
guesswork and try to interpolate the

516
00:29:21,010 --> 00:29:23,919
values in the sequence but I decided to

517
00:29:23,919 --> 00:29:24,500
turn to

518
00:29:24,500 --> 00:29:27,230
Google at that point and to Google this

519
00:29:27,230 --> 00:29:33,200
string hoping hoping Google would open

520
00:29:33,200 --> 00:29:35,860
of course I do all my searches incognito

521
00:29:35,860 --> 00:29:38,930
hoping I would find something and I

522
00:29:38,930 --> 00:29:40,790
indeed found this string in a lot of the

523
00:29:40,790 --> 00:29:44,210
results results but if you if you look

524
00:29:44,210 --> 00:29:46,700
closely you will see it looks promising

525
00:29:46,700 --> 00:29:49,880
but then the lowercase letters are ACF

526
00:29:49,880 --> 00:29:54,500
or ADF and I had different lowercase

527
00:29:54,500 --> 00:29:56,960
letters so it looked promising but I

528
00:29:56,960 --> 00:29:58,940
couldn't find anything that matched the

529
00:29:58,940 --> 00:30:02,060
other letters I had in this table so I

530
00:30:02,060 --> 00:30:04,400
ran a few more searches I tried to

531
00:30:04,400 --> 00:30:06,410
search for the lowercase letters and

532
00:30:06,410 --> 00:30:09,560
then I try to search for you know the

533
00:30:09,560 --> 00:30:12,380
hex values maybe they are represented as

534
00:30:12,380 --> 00:30:15,980
X values so running this hex value

535
00:30:15,980 --> 00:30:19,310
search with quotes or will find exact

536
00:30:19,310 --> 00:30:23,450
matches and basically I found do you

537
00:30:23,450 --> 00:30:26,360
like riddles but it's not the riddle I

538
00:30:26,360 --> 00:30:29,540
was looking at when it occurred to me

539
00:30:29,540 --> 00:30:35,600
that if I just add 0x at it before each

540
00:30:35,600 --> 00:30:37,910
of the characters each of the X numbers

541
00:30:37,910 --> 00:30:42,470
I may have a better chance so I googled

542
00:30:42,470 --> 00:30:47,500
it correcting nonlinear brightness LEDs

543
00:30:47,500 --> 00:30:51,470
interesting the printer had an LED that

544
00:30:51,470 --> 00:30:54,080
was blinking like fading on and off and

545
00:30:54,080 --> 00:30:55,880
this seems like this could be something

546
00:30:55,880 --> 00:30:58,280
useful for the femur and it's from

547
00:30:58,280 --> 00:31:00,650
electronics s tacky J exchange so it

548
00:31:00,650 --> 00:31:06,740
must be legit trust me on this so I

549
00:31:06,740 --> 00:31:12,410
opened this answer and started blah blah

550
00:31:12,410 --> 00:31:15,530
blah blah and nice this is a curve and I

551
00:31:15,530 --> 00:31:17,570
was expecting to find some care of and

552
00:31:17,570 --> 00:31:20,620
here is a table here's the full set of

553
00:31:20,620 --> 00:31:23,600
256 levels that I used so somebody

554
00:31:23,600 --> 00:31:26,030
posted an answer how to control the

555
00:31:26,030 --> 00:31:28,460
brightness of the LED LED on Stack

556
00:31:28,460 --> 00:31:31,370
Overflow so I was really pumped I just

557
00:31:31,370 --> 00:31:34,220
could be pasted it into my jupiter

558
00:31:34,220 --> 00:31:36,530
notebook let's close this incognito

559
00:31:36,530 --> 00:31:37,270
thing

560
00:31:37,270 --> 00:31:41,080
and paste it so I just copy-paste the

561
00:31:41,080 --> 00:31:44,760
entire table and I wrote a little

562
00:31:44,760 --> 00:31:48,640
snippet of code that would just go over

563
00:31:48,640 --> 00:31:50,590
each of the bytes try to match them with

564
00:31:50,590 --> 00:31:53,470
the bytes on the table if this is a

565
00:31:53,470 --> 00:31:55,390
value that we already know we already

566
00:31:55,390 --> 00:31:57,250
have it in our table we compare it with

567
00:31:57,250 --> 00:31:59,980
what we expect to find there and if it

568
00:31:59,980 --> 00:32:02,290
fails we die miserably with an assert

569
00:32:02,290 --> 00:32:05,470
otherwise we just update our table and

570
00:32:05,470 --> 00:32:08,890
to my surprise I run it and we had a

571
00:32:08,890 --> 00:32:11,490
perfect match

572
00:32:15,690 --> 00:32:20,370
so time to check on our progress and we

573
00:32:20,370 --> 00:32:25,050
see we have 70% of the femur we are

574
00:32:25,050 --> 00:32:28,710
getting there this at this point I

575
00:32:28,710 --> 00:32:33,600
started to develop new hope so I found

576
00:32:33,600 --> 00:32:35,730
this mystery table which turned out to

577
00:32:35,730 --> 00:32:37,590
be the controller for the brightness of

578
00:32:37,590 --> 00:32:42,180
the LED and then I found I googled it I

579
00:32:42,180 --> 00:32:45,180
found a table and we saw some light at

580
00:32:45,180 --> 00:32:47,400
the end of the Fatimid tunnel and then I

581
00:32:47,400 --> 00:32:49,350
went to look for other patterns in the

582
00:32:49,350 --> 00:32:55,140
femur where I found another table so

583
00:32:55,140 --> 00:32:57,030
let's have a look there that would be

584
00:32:57,030 --> 00:33:02,280
the second table right so I found this

585
00:33:02,280 --> 00:33:04,890
table and you can see there is like this

586
00:33:04,890 --> 00:33:07,680
nice column here which read Chrissy

587
00:33:07,680 --> 00:33:09,660
something we don't know that repeats all

588
00:33:09,660 --> 00:33:13,050
of time 3e and then something we don't

589
00:33:13,050 --> 00:33:16,650
know again so a wild gas would say that

590
00:33:16,650 --> 00:33:18,990
if this is Christy and this is 3e this

591
00:33:18,990 --> 00:33:22,230
would probably be 3d like the printer

592
00:33:22,230 --> 00:33:26,190
and this one would be 3f and I also had

593
00:33:26,190 --> 00:33:28,980
another guess that since we had another

594
00:33:28,980 --> 00:33:31,620
column here that started with Christy

595
00:33:31,620 --> 00:33:34,560
but it had these 22 it could be 3 be the

596
00:33:34,560 --> 00:33:38,960
value before so I ran this guesses and

597
00:33:38,960 --> 00:33:41,640
now with this guesses the table looks

598
00:33:41,640 --> 00:33:45,930
like 3 B 3 C D looks legit and at this

599
00:33:45,930 --> 00:33:48,060
point I was started to wonder what the

600
00:33:48,060 --> 00:33:50,460
other values could be represent like its

601
00:33:50,460 --> 00:33:52,880
group of 4 bytes

602
00:33:52,880 --> 00:33:55,080
actually it's little India and so we

603
00:33:55,080 --> 00:33:57,360
read it this way these are groups of 4

604
00:33:57,360 --> 00:34:00,810
bytes and they they seem to be

605
00:34:00,810 --> 00:34:05,280
increasing that when I try to convert it

606
00:34:05,280 --> 00:34:08,460
to a D word it didn't mean a lot to me I

607
00:34:08,460 --> 00:34:10,199
would like seeing an increasing sequence

608
00:34:10,199 --> 00:34:12,989
with some difference between the numbers

609
00:34:12,989 --> 00:34:16,590
but they had no meaning and then could

610
00:34:16,590 --> 00:34:19,889
you guess what it could be if it's not D

611
00:34:19,889 --> 00:34:24,900
words so

612
00:34:24,900 --> 00:34:27,600
I had another guest this might be

613
00:34:27,600 --> 00:34:31,310
floating-point numbers so I wrote a

614
00:34:31,310 --> 00:34:35,100
little code I basically just copy pasted

615
00:34:35,100 --> 00:34:38,940
some of those some of those numbers like

616
00:34:38,940 --> 00:34:42,210
this one from the sequence and tried to

617
00:34:42,210 --> 00:34:44,760
ask Python to print them as little

618
00:34:44,760 --> 00:34:48,060
endian floats and I found out these were

619
00:34:48,060 --> 00:34:51,690
all floating numbers between 0 and 1 and

620
00:34:51,690 --> 00:34:54,210
they were increasing they were in a

621
00:34:54,210 --> 00:34:56,760
setting sequence so it seems to be like

622
00:34:56,760 --> 00:35:00,080
a function that goes between 0 and 1 and

623
00:35:00,080 --> 00:35:02,970
in order to know what his function looks

624
00:35:02,970 --> 00:35:08,280
like I decided to plot it so I wrote a

625
00:35:08,280 --> 00:35:12,300
little code snippet that would just go

626
00:35:12,300 --> 00:35:14,820
over this table from the float offset in

627
00:35:14,820 --> 00:35:19,020
jumps of 4 go over each set of 4 bytes

628
00:35:19,020 --> 00:35:21,870
see if we have all of them in the table

629
00:35:21,870 --> 00:35:24,300
if we could find translation for all of

630
00:35:24,300 --> 00:35:27,450
them we would just add them to an array

631
00:35:27,450 --> 00:35:30,660
otherwise would put none so we'll have a

632
00:35:30,660 --> 00:35:32,760
plot with all the points that we know

633
00:35:32,760 --> 00:35:35,130
and spaces where there are points we

634
00:35:35,130 --> 00:35:38,160
don't know so I found this table I

635
00:35:38,160 --> 00:35:40,710
figured out how this could be floats and

636
00:35:40,710 --> 00:35:43,290
now I'm going to try between 0 and 1 and

637
00:35:43,290 --> 00:35:45,990
now I'm going to try to plot them to see

638
00:35:45,990 --> 00:35:48,300
what it looks like oh I have 10 minutes

639
00:35:48,300 --> 00:35:51,510
I thought I have 7 thank you in bar so I

640
00:35:51,510 --> 00:35:55,820
can breathe and take a sip of water

641
00:35:56,840 --> 00:35:59,430
before we blow to these numbers

642
00:35:59,430 --> 00:36:05,550
I love title so this is the numbers that

643
00:36:05,550 --> 00:36:08,340
we found it's indeed an ascending

644
00:36:08,340 --> 00:36:11,070
sequence it seems like another kind of

645
00:36:11,070 --> 00:36:15,420
curve why am I wasting real estate on

646
00:36:15,420 --> 00:36:18,120
the address bar I don't know it seems

647
00:36:18,120 --> 00:36:21,630
like a real nice curve and at this point

648
00:36:21,630 --> 00:36:23,820
I was like okay I have those points I

649
00:36:23,820 --> 00:36:26,490
have the missing points it's Python it

650
00:36:26,490 --> 00:36:29,670
can help me find a missing points and I

651
00:36:29,670 --> 00:36:31,890
remember there was a way to interpolate

652
00:36:31,890 --> 00:36:34,140
if I have a function I could interpolate

653
00:36:34,140 --> 00:36:35,970
but to be honest

654
00:36:35,970 --> 00:36:38,640
not too much into data science so I

655
00:36:38,640 --> 00:36:41,790
turned into two of my friends I can't

656
00:36:41,790 --> 00:36:43,170
see if they are here in the audience

657
00:36:43,170 --> 00:36:47,280
avi I mean of and Yanni Rosen shine were

658
00:36:47,280 --> 00:36:49,740
more into math and data stands and they

659
00:36:49,740 --> 00:36:51,180
told me yeah there is this package

660
00:36:51,180 --> 00:36:53,550
called Syfy and it has this amazing

661
00:36:53,550 --> 00:36:56,640
function called interpolate which can

662
00:36:56,640 --> 00:36:58,560
take a list of numbers with some gaps

663
00:36:58,560 --> 00:37:02,030
and fill the gaps just what we need here

664
00:37:02,030 --> 00:37:06,210
so for another snippet called

665
00:37:06,210 --> 00:37:10,859
interpolate basically there is this

666
00:37:10,859 --> 00:37:13,470
interpolator that builds the list of the

667
00:37:13,470 --> 00:37:15,330
points that we already know there X

668
00:37:15,330 --> 00:37:19,890
values and Y values and we called Saipa

669
00:37:19,890 --> 00:37:24,270
interpolate in Terp 1d which should yes

670
00:37:24,270 --> 00:37:27,030
create a function that guesses the gaps

671
00:37:27,030 --> 00:37:30,210
and then we plot the original points and

672
00:37:30,210 --> 00:37:33,090
they interpolated points so the

673
00:37:33,090 --> 00:37:35,130
interpolated points will be yellow and

674
00:37:35,130 --> 00:37:37,830
the original ones will be green let's do

675
00:37:37,830 --> 00:37:42,480
this and just to see if yeah if it

676
00:37:42,480 --> 00:37:44,430
guesses well and these are the

677
00:37:44,430 --> 00:37:46,560
interpolated points the points that

678
00:37:46,560 --> 00:37:49,080
Python guessed for us all the can you

679
00:37:49,080 --> 00:37:51,060
see the difference between green and

680
00:37:51,060 --> 00:37:55,170
yellow yes yes like like like like okay

681
00:37:55,170 --> 00:38:00,089
let's actually make it even easier yeah

682
00:38:00,089 --> 00:38:05,400
let's change these ones to an X so yeah

683
00:38:05,400 --> 00:38:08,520
so we have all these guest numbers now

684
00:38:08,520 --> 00:38:11,420
since these are floating-point numbers

685
00:38:11,420 --> 00:38:15,240
and these are just guesses we could be

686
00:38:15,240 --> 00:38:19,200
off by one by by like one or two because

687
00:38:19,200 --> 00:38:21,270
these are just guesses and floating

688
00:38:21,270 --> 00:38:25,670
point is not super accurate but I try to

689
00:38:25,670 --> 00:38:29,580
so we know the most significant byte of

690
00:38:29,580 --> 00:38:31,470
each of those numbers these are like

691
00:38:31,470 --> 00:38:39,180
this like this 3 e 3 F 3 D and 3b that

692
00:38:39,180 --> 00:38:42,359
we guessed and we want to fill the gaps

693
00:38:42,359 --> 00:38:46,109
in the second most significant byte so

694
00:38:46,109 --> 00:38:47,940
even if there is an error

695
00:38:47,940 --> 00:38:50,550
there is a lower chance of an error in

696
00:38:50,550 --> 00:38:54,480
the more significant bytes so basically

697
00:38:54,480 --> 00:38:57,660
I wrote another snippet of code that we

698
00:38:57,660 --> 00:38:59,940
are going to run now and that snippet of

699
00:38:59,940 --> 00:39:05,660
code would know that we already run that

700
00:39:05,660 --> 00:39:08,910
we try to predict the missing values for

701
00:39:08,910 --> 00:39:10,830
the second most significant byte in

702
00:39:10,830 --> 00:39:14,569
places where it's still missing and

703
00:39:15,560 --> 00:39:19,560
basically it just takes it goes over the

704
00:39:19,560 --> 00:39:21,840
points we are only going from the tenth

705
00:39:21,840 --> 00:39:25,200
point since we can see that at the

706
00:39:25,200 --> 00:39:26,910
beginning we only have two data points

707
00:39:26,910 --> 00:39:29,580
and the curve is kind of high so there

708
00:39:29,580 --> 00:39:31,800
is a better chance of errors so we just

709
00:39:31,800 --> 00:39:34,740
try to interpolate the values between

710
00:39:34,740 --> 00:39:37,400
this point and the end of the curve and

711
00:39:37,400 --> 00:39:41,490
basically we're trying to see whether

712
00:39:41,490 --> 00:39:44,460
our predictions match the actual bytes

713
00:39:44,460 --> 00:39:46,980
there just to check how close we are

714
00:39:46,980 --> 00:39:49,800
I'll close our predictions for bytes we

715
00:39:49,800 --> 00:39:52,530
already know and then for bytes we don't

716
00:39:52,530 --> 00:39:54,870
know we just update our table with the

717
00:39:54,870 --> 00:39:57,540
prediction so let's run it and we are

718
00:39:57,540 --> 00:39:59,190
trying to predict the second most

719
00:39:59,190 --> 00:40:03,870
significant byte for each of the few

720
00:40:03,870 --> 00:40:07,260
Moabites and this had no errors which

721
00:40:07,260 --> 00:40:09,840
means that thank you in bar which means

722
00:40:09,840 --> 00:40:12,420
that we still have five minutes to do

723
00:40:12,420 --> 00:40:16,220
the next byte amazing which means that

724
00:40:16,220 --> 00:40:19,110
all the predicted values match the

725
00:40:19,110 --> 00:40:22,470
values that we already know and for some

726
00:40:22,470 --> 00:40:24,420
of those values these values that did

727
00:40:24,420 --> 00:40:26,820
not appear in our original points array

728
00:40:26,820 --> 00:40:29,610
because they had other bytes missing so

729
00:40:29,610 --> 00:40:31,020
this is a good signal that our

730
00:40:31,020 --> 00:40:33,660
prediction function works well and we

731
00:40:33,660 --> 00:40:35,850
also fill the table even more so now we

732
00:40:35,850 --> 00:40:39,510
are 85% it feels like we're all almost

733
00:40:39,510 --> 00:40:42,000
there I think we are also up 85 percent

734
00:40:42,000 --> 00:40:43,940
of the time so that's a perfect match so

735
00:40:43,940 --> 00:40:48,870
the next thing would obviously be to do

736
00:40:48,870 --> 00:40:51,840
the same let's update the plots let's

737
00:40:51,840 --> 00:40:53,360
plot them again

738
00:40:53,360 --> 00:40:56,660
so this is now with the new bytes that

739
00:40:56,660 --> 00:40:58,580
we predicted they are already in the

740
00:40:58,580 --> 00:41:01,190
table so we already see them on the plot

741
00:41:01,190 --> 00:41:03,860
and we can update our predictions as

742
00:41:03,860 --> 00:41:07,220
well and just a moment let's run this

743
00:41:07,220 --> 00:41:12,740
one again so yeah so we see a lot more

744
00:41:12,740 --> 00:41:16,040
green and less yellow and we are going

745
00:41:16,040 --> 00:41:19,070
to do the same now with a third most

746
00:41:19,070 --> 00:41:22,310
significant byte and hope we still get a

747
00:41:22,310 --> 00:41:24,410
good amount of matches even though the

748
00:41:24,410 --> 00:41:26,810
precision drops as we go to the least

749
00:41:26,810 --> 00:41:29,900
significant bytes so running the same

750
00:41:29,900 --> 00:41:32,510
snippet again and again and again and

751
00:41:32,510 --> 00:41:34,700
again predict missing bytes but this

752
00:41:34,700 --> 00:41:37,430
time we are going to go one byte back to

753
00:41:37,430 --> 00:41:40,310
the byte number the second byte

754
00:41:40,310 --> 00:41:42,080
it's little endian so the most

755
00:41:42,080 --> 00:41:45,590
significant is three next is two and now

756
00:41:45,590 --> 00:41:48,440
we're going over byte number one and

757
00:41:48,440 --> 00:41:51,650
here we see that there was one error

758
00:41:51,650 --> 00:41:55,220
that could be expected because the

759
00:41:55,220 --> 00:41:57,710
precision went less but we spotted that

760
00:41:57,710 --> 00:41:59,930
we already had read translation for the

761
00:41:59,930 --> 00:42:02,180
value that we guessed incorrectly so we

762
00:42:02,180 --> 00:42:04,790
just skip that one and we see that we

763
00:42:04,790 --> 00:42:07,220
have ninety-eight percent of the femur

764
00:42:07,220 --> 00:42:10,310
and no other errors so we are probably

765
00:42:10,310 --> 00:42:15,650
doing good at our guesswork and at this

766
00:42:15,650 --> 00:42:17,780
point I felt like we are still missing

767
00:42:17,780 --> 00:42:21,650
20 values and that would be a good time

768
00:42:21,650 --> 00:42:23,840
to stop doing data science and looked

769
00:42:23,840 --> 00:42:26,510
for patterns and actually try to look at

770
00:42:26,510 --> 00:42:32,840
the code so I opened I da and I wrote a

771
00:42:32,840 --> 00:42:34,820
little script that would go over the

772
00:42:34,820 --> 00:42:37,670
disassembly and whenever it found a line

773
00:42:37,670 --> 00:42:40,190
which had a missing bytes it would color

774
00:42:40,190 --> 00:42:42,890
it red and then I created a keyboard

775
00:42:42,890 --> 00:42:45,080
shortcut that would allow me to cycle

776
00:42:45,080 --> 00:42:47,360
through the possibilities because we

777
00:42:47,360 --> 00:42:50,950
only had 20 possibilities to fill in and

778
00:42:50,950 --> 00:42:54,650
after about three hours of finding small

779
00:42:54,650 --> 00:42:56,570
functions trying to figure out what they

780
00:42:56,570 --> 00:42:59,000
do I mean with this function you can see

781
00:42:59,000 --> 00:43:02,570
it touches it load something into r1 and

782
00:43:02,570 --> 00:43:06,609
then it compares r1 to zero

783
00:43:06,609 --> 00:43:08,859
and then it does something and then the

784
00:43:08,859 --> 00:43:10,599
missing byte obviously it doesn't make a

785
00:43:10,599 --> 00:43:14,980
lot of sense here where we compare our

786
00:43:14,980 --> 00:43:18,460
six with rst with where we load

787
00:43:18,460 --> 00:43:20,200
something into our six because we don't

788
00:43:20,200 --> 00:43:22,359
have our six mentioned here and the next

789
00:43:22,359 --> 00:43:26,440
thing we do is compare our one so we

790
00:43:26,440 --> 00:43:28,420
would there would be much more sense to

791
00:43:28,420 --> 00:43:30,430
have some opcode here that would do

792
00:43:30,430 --> 00:43:32,650
something with our one that would load a

793
00:43:32,650 --> 00:43:35,200
value into our one and going through all

794
00:43:35,200 --> 00:43:37,630
the twenty possibilities I found only

795
00:43:37,630 --> 00:43:40,480
one that loaded something into r1 which

796
00:43:40,480 --> 00:43:44,680
was that one so I did this until I

797
00:43:44,680 --> 00:43:47,739
figure out the rest of the missing 20

798
00:43:47,739 --> 00:43:50,980
bytes which finally revealed this secret

799
00:43:50,980 --> 00:43:57,180
of the femur and the end of the story

800
00:44:06,430 --> 00:44:09,800
so he takeaways before we when we wrap

801
00:44:09,800 --> 00:44:12,260
up when you are doing such a thing look

802
00:44:12,260 --> 00:44:14,450
for patterns everything was found I

803
00:44:14,450 --> 00:44:16,550
found here was just because I found some

804
00:44:16,550 --> 00:44:19,160
patterns that code my eyes and I decided

805
00:44:19,160 --> 00:44:22,730
to dig into them use data science tools

806
00:44:22,730 --> 00:44:26,060
Python rocks it helps it's hard and

807
00:44:26,060 --> 00:44:31,540
frustrating so don't give up thank you

808
00:44:34,910 --> 00:44:39,129
Wow thank you

