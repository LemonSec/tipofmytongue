1
00:00:00,380 --> 00:00:03,179
hi I'm Philip I do research at cyber

2
00:00:03,179 --> 00:00:06,930
reason and this is abusing WMI providers

3
00:00:06,930 --> 00:00:08,269
for persistence

4
00:00:08,269 --> 00:00:11,639
now what every attacker wants after

5
00:00:11,639 --> 00:00:14,429
doing all the cool stuff like code

6
00:00:14,429 --> 00:00:17,390
execution and privilege escalation is

7
00:00:17,390 --> 00:00:20,369
persistence or to be able to run to run

8
00:00:20,369 --> 00:00:22,109
your calculators after the machine which

9
00:00:22,109 --> 00:00:23,609
starts of course you can stop set your

10
00:00:23,609 --> 00:00:26,970
calculator with stuff with some useful

11
00:00:26,970 --> 00:00:29,609
payload but still you want to run after

12
00:00:29,609 --> 00:00:33,239
the machine restored one such common

13
00:00:33,239 --> 00:00:35,430
technique at least nowadays for

14
00:00:35,430 --> 00:00:40,110
persistent is comm hijacking now--come

15
00:00:40,110 --> 00:00:42,960
or the component object model is just

16
00:00:42,960 --> 00:00:45,690
another way to interact with external

17
00:00:45,690 --> 00:00:48,450
code you basically say I want to

18
00:00:48,450 --> 00:00:51,120
interact use this external piece of code

19
00:00:51,120 --> 00:00:53,879
identifiable by a class ID which is just

20
00:00:53,879 --> 00:00:56,399
a good like identifier and you say and

21
00:00:56,399 --> 00:00:59,190
you tell the OS oh I want that object

22
00:00:59,190 --> 00:01:01,890
and the OS knows how to retrieve it load

23
00:01:01,890 --> 00:01:04,140
it and then you can interact with this

24
00:01:04,140 --> 00:01:08,520
outside code now behind the scenes this

25
00:01:08,520 --> 00:01:11,130
is implemented by the registry each such

26
00:01:11,130 --> 00:01:14,189
class ID has its own separate registry

27
00:01:14,189 --> 00:01:16,650
key which contains a couple of sub keys

28
00:01:16,650 --> 00:01:20,430
that have the implementation of that com

29
00:01:20,430 --> 00:01:24,060
object so if it's a DLL it just gets

30
00:01:24,060 --> 00:01:26,759
loaded into your process if it's an

31
00:01:26,759 --> 00:01:30,329
executable it gets loaded as a separate

32
00:01:30,329 --> 00:01:31,829
process and then you can communicate

33
00:01:31,829 --> 00:01:36,329
with it but all in all you just ask the

34
00:01:36,329 --> 00:01:39,119
us course for a specific class ID it

35
00:01:39,119 --> 00:01:40,680
close it and you can interact with it

36
00:01:40,680 --> 00:01:43,770
now abusing this is pretty

37
00:01:43,770 --> 00:01:47,399
straightforward like pretty much every

38
00:01:47,399 --> 00:01:48,899
kind of persistence it's a combination

39
00:01:48,899 --> 00:01:52,380
of registration and demand if you try to

40
00:01:52,380 --> 00:01:55,860
find which comm objects are requested at

41
00:01:55,860 --> 00:02:01,200
boot by Windows and you just become that

42
00:02:01,200 --> 00:02:01,829
object

43
00:02:01,829 --> 00:02:04,920
you can simply modify the registry the

44
00:02:04,920 --> 00:02:08,940
class ID entry whatever object you want

45
00:02:08,940 --> 00:02:10,240
to hijack

46
00:02:10,240 --> 00:02:12,670
instead of original object itself

47
00:02:12,670 --> 00:02:15,130
original implementation executable you

48
00:02:15,130 --> 00:02:17,760
just write whatever you want basically

49
00:02:17,760 --> 00:02:22,630
whether it's your dll or it or it's some

50
00:02:22,630 --> 00:02:27,700
kind of command etc now this is pretty

51
00:02:27,700 --> 00:02:31,030
popular in recent times but there are a

52
00:02:31,030 --> 00:02:33,660
couple of problems with this technique

53
00:02:33,660 --> 00:02:37,480
first of all not every comma object is

54
00:02:37,480 --> 00:02:40,150
requested at boot so we have a limited

55
00:02:40,150 --> 00:02:42,720
number of objects you can hijack and

56
00:02:42,720 --> 00:02:46,510
also to do this you need to modify

57
00:02:46,510 --> 00:02:48,970
existing comm objects' which is a thing

58
00:02:48,970 --> 00:02:51,270
that doesn't really happen legitimately

59
00:02:51,270 --> 00:02:53,710
so it's a pretty rare occasion and

60
00:02:53,710 --> 00:02:56,140
registry could be monitored pretty

61
00:02:56,140 --> 00:03:00,340
easily now you could of course create a

62
00:03:00,340 --> 00:03:02,500
newcomer object but there's nothing to

63
00:03:02,500 --> 00:03:05,280
demand it so you just basically have a

64
00:03:05,280 --> 00:03:07,780
registry entry that does nothing unless

65
00:03:07,780 --> 00:03:09,580
you write some other piece of code that

66
00:03:09,580 --> 00:03:12,130
demanded at booth but then this kind of

67
00:03:12,130 --> 00:03:15,460
this kind of defeats the purpose because

68
00:03:15,460 --> 00:03:17,260
now you have to persist this new piece

69
00:03:17,260 --> 00:03:20,470
of code so the question I asked myself

70
00:03:20,470 --> 00:03:22,300
which was also the basis of this

71
00:03:22,300 --> 00:03:24,880
research is is there any feature of

72
00:03:24,880 --> 00:03:27,370
Windows I could just coerced into

73
00:03:27,370 --> 00:03:32,500
loading any arbitrary calm object and it

74
00:03:32,500 --> 00:03:37,990
turns out such a feature is WMI now

75
00:03:37,990 --> 00:03:39,670
WMI is the feature of Windows that

76
00:03:39,670 --> 00:03:41,580
provides an object-oriented

77
00:03:41,580 --> 00:03:43,900
representation of lots of unrelated

78
00:03:43,900 --> 00:03:47,380
elements on a machine this means there W

79
00:03:47,380 --> 00:03:50,050
my class representations of processes

80
00:03:50,050 --> 00:03:53,230
services but also hardware components

81
00:03:53,230 --> 00:03:55,390
such as monitors and network adapters

82
00:03:55,390 --> 00:03:59,830
and I can just ask Windows to enumerate

83
00:03:59,830 --> 00:04:03,310
some W my class such as win32 process

84
00:04:03,310 --> 00:04:05,290
which represents the process that we

85
00:04:05,290 --> 00:04:08,290
might enumerate whatever this object

86
00:04:08,290 --> 00:04:13,300
represents and gives me that all of the

87
00:04:13,300 --> 00:04:16,959
instances of this class here we can see

88
00:04:16,959 --> 00:04:19,720
it just gives you something pretty

89
00:04:19,720 --> 00:04:21,509
similar to a task list

90
00:04:21,509 --> 00:04:27,220
now behind-the-scenes WMI providers are

91
00:04:27,220 --> 00:04:30,009
what are pieces of code that provide

92
00:04:30,009 --> 00:04:32,470
this kind of magic there are a couple of

93
00:04:32,470 --> 00:04:36,460
common objects exist and dll's which

94
00:04:36,460 --> 00:04:39,699
implement the actual enumeration methods

95
00:04:39,699 --> 00:04:42,759
into instances and classes that comprise

96
00:04:42,759 --> 00:04:49,030
WMI now these WMI providers are only

97
00:04:49,030 --> 00:04:52,600
loaded when something requests are

98
00:04:52,600 --> 00:04:55,630
relevant w my class so if I have a

99
00:04:55,630 --> 00:04:59,500
provider that implements win32 process

100
00:04:59,500 --> 00:05:02,770
it isn't loaded until I ask for every

101
00:05:02,770 --> 00:05:06,580
due process now all of these providers

102
00:05:06,580 --> 00:05:10,060
and the classes themselves are are

103
00:05:10,060 --> 00:05:11,949
defined in what's called the WMI

104
00:05:11,949 --> 00:05:13,960
repository which is just a couple of

105
00:05:13,960 --> 00:05:16,840
files on disk the providers themselves

106
00:05:16,840 --> 00:05:21,120
are also defined as W my classes

107
00:05:21,120 --> 00:05:23,199
specifically as the double underscore

108
00:05:23,199 --> 00:05:26,050
went really do provider now this is a

109
00:05:26,050 --> 00:05:28,690
pretty big object but we actually have

110
00:05:28,690 --> 00:05:32,139
only two interesting fields for for our

111
00:05:32,139 --> 00:05:34,690
purposes first there's a name because we

112
00:05:34,690 --> 00:05:37,000
need to refer to it somehow and second

113
00:05:37,000 --> 00:05:39,130
as a class ID now the class ID is

114
00:05:39,130 --> 00:05:41,550
exactly the same class ID as an comb

115
00:05:41,550 --> 00:05:45,310
each WMI provider could be implemented

116
00:05:45,310 --> 00:05:49,000
as a comm object and we could just if we

117
00:05:49,000 --> 00:05:51,669
were an admin and I'm assuming I'm an

118
00:05:51,669 --> 00:05:55,599
admin because I play in easy mode I can

119
00:05:55,599 --> 00:05:57,520
just create my own W my provider and

120
00:05:57,520 --> 00:06:01,229
provide it with an arbitrary class ID

121
00:06:01,229 --> 00:06:05,409
now this means each time the provider

122
00:06:05,409 --> 00:06:08,650
loads my comm object loads but again

123
00:06:08,650 --> 00:06:10,780
nothing demands this W my provider

124
00:06:10,780 --> 00:06:13,900
nothing there are no classes that are

125
00:06:13,900 --> 00:06:17,409
requested at boot so let's look at what

126
00:06:17,409 --> 00:06:19,870
W my providers actually exist when the

127
00:06:19,870 --> 00:06:24,039
machine boots so actually there's quite

128
00:06:24,039 --> 00:06:27,159
a few such providers one of which is

129
00:06:27,159 --> 00:06:29,830
double my proof inst the other the

130
00:06:29,830 --> 00:06:31,960
others sometimes change between machines

131
00:06:31,960 --> 00:06:34,540
between laptops and desktops

132
00:06:34,540 --> 00:06:38,050
cetera but double my proof inst is one

133
00:06:38,050 --> 00:06:43,420
such provider now when something demands

134
00:06:43,420 --> 00:06:46,300
a W my provider it actually demands a W

135
00:06:46,300 --> 00:06:49,930
my class and it in turn demands the comm

136
00:06:49,930 --> 00:06:52,630
object this means we have two new levels

137
00:06:52,630 --> 00:06:56,070
of indirection with which we could play

138
00:06:56,070 --> 00:06:59,310
until we somehow achieve execution boot

139
00:06:59,310 --> 00:07:04,000
now let's look at how the association

140
00:07:04,000 --> 00:07:06,220
between W my class and a WMI provider

141
00:07:06,220 --> 00:07:13,750
works it turns out that if we look class

142
00:07:13,750 --> 00:07:17,890
that's implemented by this when per year

143
00:07:17,890 --> 00:07:22,870
by this double my birth into provider we

144
00:07:22,870 --> 00:07:25,990
can see that the provider is denoted as

145
00:07:25,990 --> 00:07:29,200
part of the class itself and it's

146
00:07:29,200 --> 00:07:31,480
identified by name only

147
00:07:31,480 --> 00:07:36,100
this means it's just a string so the way

148
00:07:36,100 --> 00:07:38,430
we could have used this is pretty simple

149
00:07:38,430 --> 00:07:42,070
we find an instance provider that's

150
00:07:42,070 --> 00:07:47,110
loaded at boot here it's WI perf inst we

151
00:07:47,110 --> 00:07:51,730
just delete it and we can register our

152
00:07:51,730 --> 00:07:54,460
own W my provider with an arbitrary

153
00:07:54,460 --> 00:07:57,270
comma object as an implementation and

154
00:07:57,270 --> 00:08:01,750
give it the same name so if a class is

155
00:08:01,750 --> 00:08:04,750
requested at boot W might looks for the

156
00:08:04,750 --> 00:08:08,560
provider with the name which corresponds

157
00:08:08,560 --> 00:08:13,030
to the implementation and loads that so

158
00:08:13,030 --> 00:08:17,140
this means we've achieved something that

159
00:08:17,140 --> 00:08:20,440
looks like comm hijacking but we didn't

160
00:08:20,440 --> 00:08:23,350
really hijack any comma X and if you're

161
00:08:23,350 --> 00:08:26,380
not looking at W mi at specific W my

162
00:08:26,380 --> 00:08:26,830
event

163
00:08:26,830 --> 00:08:30,010
you're gonna miss what's happening now

164
00:08:30,010 --> 00:08:32,650
it's pretty easy to implement and if you

165
00:08:32,650 --> 00:08:35,970
have a contact ready it's about six

166
00:08:35,970 --> 00:08:40,059
lines of PowerShell you simply delete an

167
00:08:40,059 --> 00:08:42,010
existing WMI provider create your own

168
00:08:42,010 --> 00:08:48,350
and that's it but still hijacking is

169
00:08:48,350 --> 00:08:52,370
invasive and when you hijack some kind

170
00:08:52,370 --> 00:08:54,470
of object that is used by the operating

171
00:08:54,470 --> 00:08:57,020
system you need to somehow proxy to the

172
00:08:57,020 --> 00:09:00,020
original object or we implement some of

173
00:09:00,020 --> 00:09:02,690
its functionality or just hope really

174
00:09:02,690 --> 00:09:04,280
hard that nobody notices that

175
00:09:04,280 --> 00:09:07,580
something's not working well in fact

176
00:09:07,580 --> 00:09:10,580
comm hijacking really sometimes depends

177
00:09:10,580 --> 00:09:13,460
on people not noticing stuff isn't

178
00:09:13,460 --> 00:09:15,470
working because there's oh there's a lot

179
00:09:15,470 --> 00:09:17,990
of common objects loaded boot which do

180
00:09:17,990 --> 00:09:21,110
pretty much nothing important but still

181
00:09:21,110 --> 00:09:23,630
can we avoid hijacking because that

182
00:09:23,630 --> 00:09:27,140
would be much much easier and it turns

183
00:09:27,140 --> 00:09:30,190
out that we might still have the answer

184
00:09:30,190 --> 00:09:36,320
and it's in W my event providers now WMI

185
00:09:36,320 --> 00:09:38,360
provides an invasion eventing

186
00:09:38,360 --> 00:09:40,820
functionality this means there are

187
00:09:40,820 --> 00:09:44,240
special W my classes which act as events

188
00:09:44,240 --> 00:09:47,150
you can subscribe to a type of event and

189
00:09:47,150 --> 00:09:49,880
each time this event happens you could

190
00:09:49,880 --> 00:09:52,490
have some kind of callback consume this

191
00:09:52,490 --> 00:09:55,460
event and run your own code now there is

192
00:09:55,460 --> 00:09:58,010
an infamous persistent technique which

193
00:09:58,010 --> 00:10:02,480
use which uses the consumption of WMA

194
00:10:02,480 --> 00:10:05,590
events this is something a bit different

195
00:10:05,590 --> 00:10:08,660
and we're gonna use the event providers

196
00:10:08,660 --> 00:10:13,010
themselves now it turns out the

197
00:10:13,010 --> 00:10:16,310
association between event classes and

198
00:10:16,310 --> 00:10:18,860
event providers is done a tiny bit

199
00:10:18,860 --> 00:10:21,400
differently which works in our favor

200
00:10:21,400 --> 00:10:24,380
instead of having a specific W my class

201
00:10:24,380 --> 00:10:26,810
that that tells you here's my

202
00:10:26,810 --> 00:10:30,140
implementation of the provider there's a

203
00:10:30,140 --> 00:10:32,120
separate class called double underscore

204
00:10:32,120 --> 00:10:35,150
event provider registration the way it

205
00:10:35,150 --> 00:10:37,640
looks is it creates an association

206
00:10:37,640 --> 00:10:40,790
between a WMI provider and some kind of

207
00:10:40,790 --> 00:10:44,720
W my query which describes the scope of

208
00:10:44,720 --> 00:10:47,270
events this provider could provide so

209
00:10:47,270 --> 00:10:51,140
let's say I wanna get all MSFT

210
00:10:51,140 --> 00:10:57,050
SDM event event I could this means the

211
00:10:57,050 --> 00:10:59,220
SDM event provider is gonna be low

212
00:10:59,220 --> 00:11:04,149
now the nice thing about that is W my

213
00:11:04,149 --> 00:11:05,980
event providers also allow for

214
00:11:05,980 --> 00:11:10,269
redundancy so multiple providers could

215
00:11:10,269 --> 00:11:13,230
allow you could provide the same events

216
00:11:13,230 --> 00:11:16,240
this means I can register an additional

217
00:11:16,240 --> 00:11:17,920
provider to provide an event that's

218
00:11:17,920 --> 00:11:24,220
already provided to W my now of course

219
00:11:24,220 --> 00:11:26,290
we need to check is there any demand for

220
00:11:26,290 --> 00:11:29,170
any W my events at boot because again no

221
00:11:29,170 --> 00:11:31,750
demand no execution and it turns out

222
00:11:31,750 --> 00:11:35,410
that on every machine I've checked at

223
00:11:35,410 --> 00:11:39,339
least one of the events demanded is the

224
00:11:39,339 --> 00:11:44,880
MSF tsdm event or SDM event log event

225
00:11:44,880 --> 00:11:47,769
which is provided by the SDM event

226
00:11:47,769 --> 00:11:51,550
provider so now we have a pretty simple

227
00:11:51,550 --> 00:11:54,490
way to piggyback on that same demand

228
00:11:54,490 --> 00:11:57,100
what we need to do is create again our

229
00:11:57,100 --> 00:12:00,250
own WMI provider provided with our own

230
00:12:00,250 --> 00:12:04,120
comm object again unrelated to any other

231
00:12:04,120 --> 00:12:06,490
common objects on the machine this means

232
00:12:06,490 --> 00:12:08,770
it will probably be overlooked because

233
00:12:08,770 --> 00:12:12,820
cob jects are created pretty much

234
00:12:12,820 --> 00:12:15,370
constantly because lots of installers

235
00:12:15,370 --> 00:12:17,170
and stuff like that create their own

236
00:12:17,170 --> 00:12:19,149
comm object-- so this really isn't

237
00:12:19,149 --> 00:12:22,120
uncommon and we could register it to

238
00:12:22,120 --> 00:12:25,209
provide MSFT SDM event and what happens

239
00:12:25,209 --> 00:12:29,260
next is at boot the Machine tries to

240
00:12:29,260 --> 00:12:32,680
consume SCM event it close the original

241
00:12:32,680 --> 00:12:34,930
provider it looks is there any provider

242
00:12:34,930 --> 00:12:37,510
that provides these is there any

243
00:12:37,510 --> 00:12:38,740
additional providers to provide this

244
00:12:38,740 --> 00:12:41,260
event the answer is yes our malicious

245
00:12:41,260 --> 00:12:43,740
provider and that's how we persist it

246
00:12:43,740 --> 00:12:47,230
and this is also really easy the only

247
00:12:47,230 --> 00:12:49,000
thing we need to do is create a new

248
00:12:49,000 --> 00:12:50,800
provider create this event revise

249
00:12:50,800 --> 00:12:52,510
registration we'd not delete anything

250
00:12:52,510 --> 00:12:56,260
we'd not override anything and we

251
00:12:56,260 --> 00:12:58,180
achieve persist persistence with an

252
00:12:58,180 --> 00:13:01,870
arbitrary comma object and if you're not

253
00:13:01,870 --> 00:13:05,079
looking at W my event and WI providers

254
00:13:05,079 --> 00:13:08,110
in there there's pretty much nothing you

255
00:13:08,110 --> 00:13:09,999
can do to detect

256
00:13:09,999 --> 00:13:12,329
unless you detect the payload itself and

257
00:13:12,329 --> 00:13:15,628
that's about it

258
00:13:20,890 --> 00:13:23,780
so one minute is enough for questions

259
00:13:23,780 --> 00:13:25,850
but you could ask me outside or

260
00:13:25,850 --> 00:13:29,320
something thank you

