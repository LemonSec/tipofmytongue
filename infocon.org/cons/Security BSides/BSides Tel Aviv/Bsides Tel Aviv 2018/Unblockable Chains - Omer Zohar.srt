1
00:00:02,029 --> 00:00:07,379
hi everyone and my name is Anwar and as

2
00:00:07,379 --> 00:00:09,150
I mentioned today I'm going to talk

3
00:00:09,150 --> 00:00:11,070
about a little bit of untraditional

4
00:00:11,070 --> 00:00:12,660
research that I've done which combines

5
00:00:12,660 --> 00:00:16,910
two of my best interesting things that I

6
00:00:16,910 --> 00:00:20,939
now encounter that is a Marvel research

7
00:00:20,939 --> 00:00:22,560
and especially Malraux infrastructure

8
00:00:22,560 --> 00:00:25,650
and blockchain technologies which i

9
00:00:25,650 --> 00:00:27,900
think is really cool and upcoming

10
00:00:27,900 --> 00:00:32,000
technology and so how did I come up

11
00:00:32,000 --> 00:00:35,370
about about on this project so a little

12
00:00:35,370 --> 00:00:39,170
bit about me sorry

13
00:00:39,170 --> 00:00:42,600
so I'm a security researcher for the

14
00:00:42,600 --> 00:00:46,170
past decade or something my main focus

15
00:00:46,170 --> 00:00:49,230
is is the infrastructure

16
00:00:49,230 --> 00:00:51,120
Cinci communication I've always been

17
00:00:51,120 --> 00:00:54,030
fascinated on the problem of how malwa

18
00:00:54,030 --> 00:00:58,980
communicate with the senders and how

19
00:00:58,980 --> 00:01:02,340
exactly and what is the challenges in

20
00:01:02,340 --> 00:01:04,319
building a malicious infrastructure I'm

21
00:01:04,319 --> 00:01:08,250
also a big fan of blocking technologies

22
00:01:08,250 --> 00:01:09,600
have been in the blockchain

23
00:01:09,600 --> 00:01:14,400
I think 2013 and then after I quit my

24
00:01:14,400 --> 00:01:16,409
mother's job on top and as a head of

25
00:01:16,409 --> 00:01:18,720
research for top security I had some

26
00:01:18,720 --> 00:01:20,400
time with my hands and I thought this is

27
00:01:20,400 --> 00:01:22,259
a good time to do something that

28
00:01:22,259 --> 00:01:24,630
combined these two together and I

29
00:01:24,630 --> 00:01:30,210
decided to to check to see how they

30
00:01:30,210 --> 00:01:34,670
combine together so yeah so also had

31
00:01:34,670 --> 00:01:38,220
some a little bit more a new member

32
00:01:38,220 --> 00:01:42,479
joined my team so we helped a lot so

33
00:01:42,479 --> 00:01:45,090
it's not all our ideas here I'm exactly

34
00:01:45,090 --> 00:01:49,110
mine and one last thing I want to thank

35
00:01:49,110 --> 00:01:53,549
a music ye who helped me do this POC the

36
00:01:53,549 --> 00:01:56,060
demo that you can see there is a lot of

37
00:01:56,060 --> 00:02:00,360
work on that so what is my office

38
00:02:00,360 --> 00:02:04,259
infrastructure so let's understand that

39
00:02:04,259 --> 00:02:06,180
something that we generally disregard

40
00:02:06,180 --> 00:02:08,068
when you think about Maori it had a lot

41
00:02:08,068 --> 00:02:10,590
of back-end behind it so malicious

42
00:02:10,590 --> 00:02:12,360
infrastructure supposed to

43
00:02:12,360 --> 00:02:15,450
help the the malicious attacker to

44
00:02:15,450 --> 00:02:20,180
general generate implants he has to

45
00:02:20,180 --> 00:02:22,680
allow him to help him to deliver that

46
00:02:22,680 --> 00:02:26,100
implants to two and unknown and very

47
00:02:26,100 --> 00:02:28,950
hostile environments then it will have

48
00:02:28,950 --> 00:02:31,860
to be able to let him contact back to

49
00:02:31,860 --> 00:02:34,260
the sender and making the first contact

50
00:02:34,260 --> 00:02:37,080
and then it has to provide facilities to

51
00:02:37,080 --> 00:02:40,650
receive execute and exfiltrate stuff

52
00:02:40,650 --> 00:02:42,090
whatever it

53
00:02:42,090 --> 00:02:44,850
it's a nefarious stuff that he needs to

54
00:02:44,850 --> 00:02:47,850
do it has to maintain control over time

55
00:02:47,850 --> 00:02:50,220
or over long periods and maybe

56
00:02:50,220 --> 00:02:53,490
disconnections and and rough a mmm

57
00:02:53,490 --> 00:02:58,070
communication method and provided the

58
00:02:58,070 --> 00:03:00,570
dependent and the use case it has to

59
00:03:00,570 --> 00:03:03,170
allow mass control of multiple instances

60
00:03:03,170 --> 00:03:07,410
and we think about it there is no one

61
00:03:07,410 --> 00:03:10,800
will a method of doing that there was a

62
00:03:10,800 --> 00:03:12,810
lot of trials over the years and I

63
00:03:12,810 --> 00:03:15,450
compiled the list of what is for me what

64
00:03:15,450 --> 00:03:19,560
is the the features of the ultimate

65
00:03:19,560 --> 00:03:21,930
infrastructure so first of all we have

66
00:03:21,930 --> 00:03:24,030
to have secure communication so it has

67
00:03:24,030 --> 00:03:25,830
to be immune to data modification you

68
00:03:25,830 --> 00:03:27,510
face to up in many in the Middle's and

69
00:03:27,510 --> 00:03:29,340
stuff like that it has to have high

70
00:03:29,340 --> 00:03:32,910
availability so the node always have to

71
00:03:32,910 --> 00:03:35,160
be have to find the command control and

72
00:03:35,160 --> 00:03:37,860
be able to communicate with it it has to

73
00:03:37,860 --> 00:03:39,510
be scalable kit so it can support any

74
00:03:39,510 --> 00:03:42,030
number of instances it has to have

75
00:03:42,030 --> 00:03:45,420
authentication so only a valid implants

76
00:03:45,420 --> 00:03:47,630
can can connect to the network and know

77
00:03:47,630 --> 00:03:51,690
some researchers or adversaries can mess

78
00:03:51,690 --> 00:03:53,840
up

79
00:04:05,170 --> 00:04:11,690
okay so it has to provide the anonymity

80
00:04:11,690 --> 00:04:16,579
so no info can be gained about network

81
00:04:16,579 --> 00:04:17,930
operators if there's someone with

82
00:04:17,930 --> 00:04:19,790
research in the network so he can't

83
00:04:19,790 --> 00:04:22,220
reach today today to its operators it

84
00:04:22,220 --> 00:04:25,250
has to provide it has to have no data

85
00:04:25,250 --> 00:04:27,890
leakage so which are the peers that are

86
00:04:27,890 --> 00:04:31,130
connected which are the what type of

87
00:04:31,130 --> 00:04:32,900
data is flowing over the network what a

88
00:04:32,900 --> 00:04:34,450
command what a dot has been infiltrated

89
00:04:34,450 --> 00:04:36,620
it has to be take down and take over

90
00:04:36,620 --> 00:04:39,680
resistance so no one can again take over

91
00:04:39,680 --> 00:04:42,790
the network and take over the botnet and

92
00:04:42,790 --> 00:04:47,060
or maybe take it down and of course the

93
00:04:47,060 --> 00:04:49,520
lastly it has to have low operational

94
00:04:49,520 --> 00:04:54,169
cost so that we eventually especially

95
00:04:54,169 --> 00:04:59,060
for mmm for criminal activities the cost

96
00:04:59,060 --> 00:05:01,250
is basically what what determines the

97
00:05:01,250 --> 00:05:03,740
way of the operation if they can make

98
00:05:03,740 --> 00:05:05,120
money out of it they probably won't

99
00:05:05,120 --> 00:05:10,280
gonna do it okay so almost all Maru

100
00:05:10,280 --> 00:05:11,830
infrastructure that I encountered so far

101
00:05:11,830 --> 00:05:17,660
fail in one or more of these of these

102
00:05:17,660 --> 00:05:21,590
features and I said okay let's see how

103
00:05:21,590 --> 00:05:24,169
blockchain as an infrastructure will

104
00:05:24,169 --> 00:05:27,140
we'll be able to deal with this Cup and

105
00:05:27,140 --> 00:05:29,960
I looked at all of these features where

106
00:05:29,960 --> 00:05:33,380
I developed my POC so let's see why I

107
00:05:33,380 --> 00:05:35,479
even bothered with doctrine in the first

108
00:05:35,479 --> 00:05:39,440
place so I compiled here a list of we

109
00:05:39,440 --> 00:05:41,390
have try to summarize what is blockchain

110
00:05:41,390 --> 00:05:43,580
in one sentence and it I think it's been

111
00:05:43,580 --> 00:05:46,550
a nice one but there is one guy that

112
00:05:46,550 --> 00:05:49,840
explains it much better than I do

113
00:05:50,800 --> 00:05:53,780
blockchain technology allows a record or

114
00:05:53,780 --> 00:05:56,870
a ledger of every Bitcoin transaction

115
00:05:56,870 --> 00:05:59,570
ever made to be stored not in one place

116
00:05:59,570 --> 00:06:02,630
but across vast numbers of computers

117
00:06:02,630 --> 00:06:04,190
that is part of what people mean when

118
00:06:04,190 --> 00:06:06,890
they say bitcoin is decentralized and

119
00:06:06,890 --> 00:06:08,810
decentralization has a lot of

120
00:06:08,810 --> 00:06:11,030
theoretical advantages from speed to

121
00:06:11,030 --> 00:06:12,190
security

122
00:06:12,190 --> 00:06:15,560
okay so I can I can't add it add

123
00:06:15,560 --> 00:06:17,180
anything more that there's nothing no

124
00:06:17,180 --> 00:06:18,530
one explains that better than John

125
00:06:18,530 --> 00:06:21,770
Oliver so basically what give us that

126
00:06:21,770 --> 00:06:24,350
what gave me the the head start to start

127
00:06:24,350 --> 00:06:25,850
talking objection is that the

128
00:06:25,850 --> 00:06:29,810
immutability and and decentralization

129
00:06:29,810 --> 00:06:32,420
which is exactly what you need and what

130
00:06:32,420 --> 00:06:35,450
you want when when you start this type

131
00:06:35,450 --> 00:06:38,530
of infrastructure I chose to implement

132
00:06:38,530 --> 00:06:40,240
my

133
00:06:40,240 --> 00:06:43,100
POC on top of ethereal and again I read

134
00:06:43,100 --> 00:06:46,130
from the atiim the main the main website

135
00:06:46,130 --> 00:06:49,100
from the etherium a web page if the rim

136
00:06:49,100 --> 00:06:50,990
is at the central platform the transmat

137
00:06:50,990 --> 00:06:54,230
contracts a application that run exactly

138
00:06:54,230 --> 00:06:56,060
his program without any possibility of

139
00:06:56,060 --> 00:06:59,150
done time censorship fraud or a third

140
00:06:59,150 --> 00:07:02,090
party into interference so right out of

141
00:07:02,090 --> 00:07:04,820
this sentence you can see that at least

142
00:07:04,820 --> 00:07:06,080
three of the features that I mentioned

143
00:07:06,080 --> 00:07:08,600
earlier holds here another cool features

144
00:07:08,600 --> 00:07:10,400
of aetherium is it allow it's very

145
00:07:10,400 --> 00:07:10,880
popular

146
00:07:10,880 --> 00:07:13,010
it's the largest blockchain out there

147
00:07:13,010 --> 00:07:15,740
yes even more than Bitcoin in the terms

148
00:07:15,740 --> 00:07:18,200
of a number of nodes it last time I

149
00:07:18,200 --> 00:07:21,140
checked it has more than 27,000 and

150
00:07:21,140 --> 00:07:24,290
knows that can run my code the code is

151
00:07:24,290 --> 00:07:27,770
run on smart contracts which is a which

152
00:07:27,770 --> 00:07:30,350
is a code EVM the atrium virtual machine

153
00:07:30,350 --> 00:07:32,060
which were basically allowed me to run

154
00:07:32,060 --> 00:07:34,760
code on top of blockchain and every one

155
00:07:34,760 --> 00:07:37,700
of those nodes will run my code it

156
00:07:37,700 --> 00:07:39,979
providing tricky encrypted communication

157
00:07:39,979 --> 00:07:42,860
it has a dev peer-to-peer / LP LP Alex

158
00:07:42,860 --> 00:07:44,690
this is the protocol that they use the

159
00:07:44,690 --> 00:07:46,970
same protocol that the chameleon Network

160
00:07:46,970 --> 00:07:48,680
used to use if you know emu from back at

161
00:07:48,680 --> 00:07:50,419
the back in the day it's the same base

162
00:07:50,419 --> 00:07:51,919
basically the same same peer-to-peer

163
00:07:51,919 --> 00:07:54,290
network and it has the ether that which

164
00:07:54,290 --> 00:07:55,729
is the crypto coin to drive their

165
00:07:55,729 --> 00:07:57,200
performance and basically give the

166
00:07:57,200 --> 00:07:59,750
incentive to to put this network

167
00:07:59,750 --> 00:08:04,310
together okay so let's connect the dot

168
00:08:04,310 --> 00:08:06,560
and see how this infrastructure would

169
00:08:06,560 --> 00:08:08,840
actually look like so we have the

170
00:08:08,840 --> 00:08:09,650
network operator

171
00:08:09,650 --> 00:08:13,340
he starts by running an etherium node

172
00:08:13,340 --> 00:08:17,210
this node is a foo node it's it runs and

173
00:08:17,210 --> 00:08:19,789
start to sync with the blockchain this

174
00:08:19,789 --> 00:08:22,070
is the heavy operation in text almost

175
00:08:22,070 --> 00:08:24,790
usually 24 hours it takes a lot of

176
00:08:24,790 --> 00:08:28,720
and the rest version it's very heavy on

177
00:08:28,720 --> 00:08:30,520
the on the computer it's very neat to

178
00:08:30,520 --> 00:08:33,280
have a really big system in order to run

179
00:08:33,280 --> 00:08:38,049
phone out nowadays I want it sinks the

180
00:08:38,049 --> 00:08:39,789
opera can generate its wallet that will

181
00:08:39,789 --> 00:08:42,700
control everything he unlocked this

182
00:08:42,700 --> 00:08:45,670
wallet and then once he has a history in

183
00:08:45,670 --> 00:08:47,830
it he can deploy the smart contract a

184
00:08:47,830 --> 00:08:50,230
smart contract is basically the code

185
00:08:50,230 --> 00:08:51,910
that will run on top of the box chain

186
00:08:51,910 --> 00:08:55,080
and we do all the logic of our

187
00:08:55,080 --> 00:08:58,870
infrastructure after all it deploys the

188
00:08:58,870 --> 00:09:01,660
control panel the control panel

189
00:09:01,660 --> 00:09:04,180
basically allows him to allow or revoke

190
00:09:04,180 --> 00:09:06,280
instance issue commands to the boards

191
00:09:06,280 --> 00:09:09,100
and fetch result and whatever so every

192
00:09:09,100 --> 00:09:11,020
type of command if you can think of that

193
00:09:11,020 --> 00:09:14,980
a CNC is doing and then it goes once

194
00:09:14,980 --> 00:09:16,420
this in place the infrastructure is

195
00:09:16,420 --> 00:09:18,490
ready and you can start generating the

196
00:09:18,490 --> 00:09:20,920
implants so what is a what it takes to

197
00:09:20,920 --> 00:09:22,540
generate the implant it needs to create

198
00:09:22,540 --> 00:09:25,270
a wallet it has to authorize the access

199
00:09:25,270 --> 00:09:26,770
in there in the contract here to

200
00:09:26,770 --> 00:09:29,050
transfer funds and health he has to pack

201
00:09:29,050 --> 00:09:33,220
it once once this is done so magic

202
00:09:33,220 --> 00:09:35,080
happens which we not be discussing here

203
00:09:35,080 --> 00:09:37,840
today and he delivers it into a remote

204
00:09:37,840 --> 00:09:39,730
machine in the remote machine the

205
00:09:39,730 --> 00:09:41,230
implement again it read its

206
00:09:41,230 --> 00:09:43,600
configuration it runs and any theorem

207
00:09:43,600 --> 00:09:46,240
note the feature name is once in in a

208
00:09:46,240 --> 00:09:49,330
light mode this light mode is basically

209
00:09:49,330 --> 00:09:52,000
it's not downloading the whole block

210
00:09:52,000 --> 00:09:53,770
change the journey down with the headers

211
00:09:53,770 --> 00:09:56,230
of the blockchain so it takes a lot less

212
00:09:56,230 --> 00:09:58,330
resources from the computer to around

213
00:09:58,330 --> 00:10:01,810
300 megabytes of disk and some a little

214
00:10:01,810 --> 00:10:05,620
bit of RAM and what it's a finished

215
00:10:05,620 --> 00:10:08,530
thinking takes about 20 minutes he can

216
00:10:08,530 --> 00:10:11,110
adjourn you can load it it's a wallet

217
00:10:11,110 --> 00:10:15,220
that it was pre implanted in the in the

218
00:10:15,220 --> 00:10:17,170
code and it connects to the smart

219
00:10:17,170 --> 00:10:19,180
contract it dude the registration he

220
00:10:19,180 --> 00:10:21,760
says to the contract hello I am this

221
00:10:21,760 --> 00:10:22,360
implant

222
00:10:22,360 --> 00:10:24,250
I was registered pre-registered the head

223
00:10:24,250 --> 00:10:27,250
and the smart contracts allows them to

224
00:10:27,250 --> 00:10:29,950
connect once it's done then we can start

225
00:10:29,950 --> 00:10:34,900
issue commands to the implants so this

226
00:10:34,900 --> 00:10:37,270
is the overall infrastructure now let's

227
00:10:37,270 --> 00:10:38,320
dive in into

228
00:10:38,320 --> 00:10:40,750
the smart code Rockets app and see how

229
00:10:40,750 --> 00:10:42,610
it's implemented hopefully you can see

230
00:10:42,610 --> 00:10:45,130
the code that I wrote here so this is

231
00:10:45,130 --> 00:10:47,529
basically my first attempt to run this

232
00:10:47,529 --> 00:10:53,019
contract so the smart codes are written

233
00:10:53,019 --> 00:10:55,180
in a link which code solidity it's a

234
00:10:55,180 --> 00:10:56,860
nice language but see it a strictly

235
00:10:56,860 --> 00:10:59,889
typed language which is similar in a

236
00:10:59,889 --> 00:11:01,810
syntax it's it looks a bit like a hybrid

237
00:11:01,810 --> 00:11:06,009
between JavaScript and C so this is my

238
00:11:06,009 --> 00:11:07,720
first attempt it was very

239
00:11:07,720 --> 00:11:09,730
straightforward the same way I called

240
00:11:09,730 --> 00:11:12,610
everything else so do you have a little

241
00:11:12,610 --> 00:11:16,089
bit of structures and and hash map that

242
00:11:16,089 --> 00:11:18,750
we do all the accounting and you have a

243
00:11:18,750 --> 00:11:21,040
constructor down at the bottom that

244
00:11:21,040 --> 00:11:24,490
basically sets the sender the owner of

245
00:11:24,490 --> 00:11:27,069
the contract in in smart contact every

246
00:11:27,069 --> 00:11:29,829
contract has an owner and this owner can

247
00:11:29,829 --> 00:11:32,889
do privileged operations that only and

248
00:11:32,889 --> 00:11:35,800
it gets determined on the the

249
00:11:35,800 --> 00:11:38,199
constructor of the of the smart contract

250
00:11:38,199 --> 00:11:41,410
that runs only once so for example a

251
00:11:41,410 --> 00:11:42,790
nice feature of the language is a

252
00:11:42,790 --> 00:11:45,040
modifier modifier is allows me to define

253
00:11:45,040 --> 00:11:47,889
some preconditions to a function that I

254
00:11:47,889 --> 00:11:50,290
can check before the actual code is

255
00:11:50,290 --> 00:11:53,560
being run so for example in the function

256
00:11:53,560 --> 00:11:57,310
allow instance I can say I'll only buy

257
00:11:57,310 --> 00:11:59,920
the owner that means I can only call

258
00:11:59,920 --> 00:12:02,350
this function if I am I

259
00:12:02,350 --> 00:12:06,100
I hold the owners account so this is

260
00:12:06,100 --> 00:12:08,079
very sexy very important security a

261
00:12:08,079 --> 00:12:10,510
measuring solidity and I can also say

262
00:12:10,510 --> 00:12:11,920
for example in a function called

263
00:12:11,920 --> 00:12:14,139
register in sense allow this around is

264
00:12:14,139 --> 00:12:16,600
registration to happen only if this

265
00:12:16,600 --> 00:12:21,189
instance was not already registered ok

266
00:12:21,189 --> 00:12:23,949
so this is basically the conduct is a

267
00:12:23,949 --> 00:12:25,510
few more function but this is basically

268
00:12:25,510 --> 00:12:28,750
it so it's very simple the problem is it

269
00:12:28,750 --> 00:12:32,949
doesn't work and the reason it doesn't

270
00:12:32,949 --> 00:12:36,240
work is this return function over there

271
00:12:36,240 --> 00:12:40,110
anyone has an idea why this doesn't work

272
00:12:40,110 --> 00:12:44,790
no how many of you ever wrote in sorry

273
00:12:44,790 --> 00:12:50,889
t1 - all right all right so ok so this

274
00:12:50,889 --> 00:12:51,680
is the call

275
00:12:51,680 --> 00:12:53,240
to the function register interest from

276
00:12:53,240 --> 00:12:57,260
the client okay so it's so the result

277
00:12:57,260 --> 00:13:02,930
there is not after Cody's function in

278
00:13:02,930 --> 00:13:04,970
the regular problem where do you expect

279
00:13:04,970 --> 00:13:07,580
the session ID here would be in the

280
00:13:07,580 --> 00:13:10,640
result over there but when you program

281
00:13:10,640 --> 00:13:15,279
to a contract this is not valid because

282
00:13:15,279 --> 00:13:17,959
when you call register instance you

283
00:13:17,959 --> 00:13:19,700
actually issue a transaction on the

284
00:13:19,700 --> 00:13:21,529
blockchain a transaction but the

285
00:13:21,529 --> 00:13:24,350
blockchain a it takes time and B it

286
00:13:24,350 --> 00:13:28,339
costs you ether and and the reason it

287
00:13:28,339 --> 00:13:32,899
takes time is because we when you change

288
00:13:32,899 --> 00:13:36,110
something on the blockchain and and in

289
00:13:36,110 --> 00:13:37,550
our case we change because we want to

290
00:13:37,550 --> 00:13:40,990
say this instance can be registered so

291
00:13:40,990 --> 00:13:43,339
we have to wait for some minor to

292
00:13:43,339 --> 00:13:45,260
include this transaction in a block this

293
00:13:45,260 --> 00:13:48,140
takes time and until that we cannot see

294
00:13:48,140 --> 00:13:51,800
our changes on the blockchain so what we

295
00:13:51,800 --> 00:13:53,510
get on this result is basically a

296
00:13:53,510 --> 00:13:56,150
transaction hash this transaction has

297
00:13:56,150 --> 00:13:59,510
can once it once it's confirmed we can

298
00:13:59,510 --> 00:14:03,160
see the details of this transaction so

299
00:14:03,160 --> 00:14:08,630
how can we put out data from the farmer

300
00:14:08,630 --> 00:14:10,910
smart contract every transaction has

301
00:14:10,910 --> 00:14:12,770
something called a lot a lot basically

302
00:14:12,770 --> 00:14:16,490
lets us to emit to have a stuff logs

303
00:14:16,490 --> 00:14:19,400
from the transaction and then by that we

304
00:14:19,400 --> 00:14:22,160
we can as you can see here in the

305
00:14:22,160 --> 00:14:26,029
transaction transaction log we can see

306
00:14:26,029 --> 00:14:28,070
the data that emitted from the

307
00:14:28,070 --> 00:14:31,010
transaction so what we what we can do in

308
00:14:31,010 --> 00:14:33,950
solidity is another party encode event

309
00:14:33,950 --> 00:14:36,100
event basically I was to define

310
00:14:36,100 --> 00:14:39,680
predefined events that in this case we

311
00:14:39,680 --> 00:14:42,020
trigger the instance and the session ID

312
00:14:42,020 --> 00:14:43,910
and then instead of the return function

313
00:14:43,910 --> 00:14:47,150
we just a trigger this event and then we

314
00:14:47,150 --> 00:14:50,779
we look for it up then we look for it on

315
00:14:50,779 --> 00:14:54,800
the and we look for it afterwards in the

316
00:14:54,800 --> 00:14:58,430
transaction hash so now we have a

317
00:14:58,430 --> 00:15:01,700
contract that works and this time we

318
00:15:01,700 --> 00:15:03,340
need to ask the question

319
00:15:03,340 --> 00:15:06,040
how much does it cost us so every

320
00:15:06,040 --> 00:15:08,890
operation on the blockchain cost ether

321
00:15:08,890 --> 00:15:13,480
and on when you write smart contract

322
00:15:13,480 --> 00:15:19,380
this time this is code gas every EVM

323
00:15:19,380 --> 00:15:23,950
assembly operation has its own price

324
00:15:23,950 --> 00:15:26,800
that is listed on the theorem you white

325
00:15:26,800 --> 00:15:29,500
yellow paper and they update it from

326
00:15:29,500 --> 00:15:31,570
time to time and the stuff that were

327
00:15:31,570 --> 00:15:33,940
interesting here is a function that is

328
00:15:33,940 --> 00:15:35,740
called as a store which is the function

329
00:15:35,740 --> 00:15:40,120
is the operation that stores data on the

330
00:15:40,120 --> 00:15:42,940
on the blockchain and this is one of the

331
00:15:42,940 --> 00:15:45,880
most expensive operation like you can do

332
00:15:45,880 --> 00:15:50,070
in blockchain which cost 20,000 gasps

333
00:15:50,160 --> 00:15:53,620
and then if you want to know how much it

334
00:15:53,620 --> 00:15:57,460
emoji it's costing ether well the

335
00:15:57,460 --> 00:15:59,710
calculation is the the transaction cost

336
00:15:59,710 --> 00:16:01,960
in ether is gas times the gas price gas

337
00:16:01,960 --> 00:16:05,110
price is the transaction fee that you

338
00:16:05,110 --> 00:16:08,560
pay to the miners so you pay a folk way

339
00:16:08,560 --> 00:16:12,610
per per one unit of gas so you multiply

340
00:16:12,610 --> 00:16:16,840
them together so and and it also

341
00:16:16,840 --> 00:16:20,230
determines how fast the how much

342
00:16:20,230 --> 00:16:22,210
incentive you give to the to the - so if

343
00:16:22,210 --> 00:16:24,880
you pay little gas price Twitter

344
00:16:24,880 --> 00:16:28,090
incentive so they will that the

345
00:16:28,090 --> 00:16:29,620
confirmation time takes two and a half

346
00:16:29,620 --> 00:16:31,480
minutes if you want to double that or

347
00:16:31,480 --> 00:16:33,790
ten times that it we can take around 20

348
00:16:33,790 --> 00:16:36,270
seconds this is roughly the times that

349
00:16:36,270 --> 00:16:41,320
these days so if we calculate the cost

350
00:16:41,320 --> 00:16:43,690
of writing one word 32 bytes it's

351
00:16:43,690 --> 00:16:45,610
roughly 2 cents and I took the

352
00:16:45,610 --> 00:16:48,790
measurement of $500 per meter that's the

353
00:16:48,790 --> 00:16:52,990
price yesterday so if I want to write 1

354
00:16:52,990 --> 00:16:55,450
megabyte according to this calculation

355
00:16:55,450 --> 00:16:57,270
it cost me

356
00:16:57,270 --> 00:17:00,520
$6,500 which is a lot of money to write

357
00:17:00,520 --> 00:17:03,910
to one of one only one megabyte so and

358
00:17:03,910 --> 00:17:07,300
if you think about it writing unbounding

359
00:17:07,300 --> 00:17:10,150
strings of data to the blockchain is not

360
00:17:10,150 --> 00:17:12,190
really good idea because it's very it

361
00:17:12,190 --> 00:17:14,920
cost a lot of money but in our case we

362
00:17:14,920 --> 00:17:16,569
don't really need we don't really even

363
00:17:16,569 --> 00:17:17,339
need to

364
00:17:17,339 --> 00:17:20,220
this this event these drinks to the

365
00:17:20,220 --> 00:17:21,780
blockchain we just need to move them

366
00:17:21,780 --> 00:17:24,030
from the CNC to the implants we don't

367
00:17:24,030 --> 00:17:27,960
really need to save them over on the on

368
00:17:27,960 --> 00:17:32,190
the on the blockchain so fortunately

369
00:17:32,190 --> 00:17:33,750
there is a cheaper way to do it and this

370
00:17:33,750 --> 00:17:36,750
is the exactly the event the event rocks

371
00:17:36,750 --> 00:17:39,540
that I showed you earlier so apparently

372
00:17:39,540 --> 00:17:44,040
this this cost writing an event of cost

373
00:17:44,040 --> 00:17:49,020
only 68 gasps for non zero bytes so in

374
00:17:49,020 --> 00:17:52,350
the calculation writing one megabyte

375
00:17:52,350 --> 00:17:55,830
using a log event cost me only one point

376
00:17:55,830 --> 00:17:58,560
for Easter which is ten times less than

377
00:17:58,560 --> 00:18:02,880
what the previous method used so we

378
00:18:02,880 --> 00:18:05,520
let's fix our contract to do just that

379
00:18:05,520 --> 00:18:08,460
so instead of all the accounting that

380
00:18:08,460 --> 00:18:11,100
the head before I just write four types

381
00:18:11,100 --> 00:18:13,080
of events and then I changed my

382
00:18:13,080 --> 00:18:16,260
functions to just basically do nothing

383
00:18:16,260 --> 00:18:19,020
right now that and now the all they do

384
00:18:19,020 --> 00:18:22,170
is check the precondition and omit the

385
00:18:22,170 --> 00:18:23,940
event check the precondition and omit

386
00:18:23,940 --> 00:18:25,770
even this it makes the the smart content

387
00:18:25,770 --> 00:18:27,390
very simple because all we are doing is

388
00:18:27,390 --> 00:18:29,640
take the data from one side and deliver

389
00:18:29,640 --> 00:18:32,010
it to the other side and it simplifies

390
00:18:32,010 --> 00:18:34,050
simplifies the contract a lot and it

391
00:18:34,050 --> 00:18:41,910
saves us a lot of money okay so now that

392
00:18:41,910 --> 00:18:43,680
we have a contract that is working let's

393
00:18:43,680 --> 00:18:46,770
talk about transparency as I mentioned

394
00:18:46,770 --> 00:18:51,060
earlier turns on the blockchain

395
00:18:51,060 --> 00:18:53,700
everything you do is public all the

396
00:18:53,700 --> 00:18:56,160
transactions are public all that order

397
00:18:56,160 --> 00:18:58,170
everybody can see everything that you do

398
00:18:58,170 --> 00:19:01,890
so how does this affect my my

399
00:19:01,890 --> 00:19:04,770
infrastructure so first of all the

400
00:19:04,770 --> 00:19:08,250
contract bytecode is available for once

401
00:19:08,250 --> 00:19:09,450
you deployed a contract to the

402
00:19:09,450 --> 00:19:11,010
blockchain everybody can see the

403
00:19:11,010 --> 00:19:12,900
bytecode of the contract it cannot be

404
00:19:12,900 --> 00:19:15,090
you can't get around it it has to be

405
00:19:15,090 --> 00:19:17,360
there so everybody can read and write it

406
00:19:17,360 --> 00:19:22,140
so the Assembly of the EVM is can be

407
00:19:22,140 --> 00:19:25,440
reversed and they're also reversed

408
00:19:25,440 --> 00:19:27,480
and the project on online that can

409
00:19:27,480 --> 00:19:29,250
actually turn it back into a solidity

410
00:19:29,250 --> 00:19:29,730
code

411
00:19:29,730 --> 00:19:31,890
so take take into consideration that

412
00:19:31,890 --> 00:19:33,780
every smartphone that you write can be

413
00:19:33,780 --> 00:19:38,670
easily read but by everyone so and what

414
00:19:38,670 --> 00:19:40,560
about the storage and this is also can

415
00:19:40,560 --> 00:19:44,910
be it can be easily read so this is an

416
00:19:44,910 --> 00:19:47,900
API called it's from the web tree

417
00:19:47,900 --> 00:19:50,730
anybody can see so for example if I

418
00:19:50,730 --> 00:19:52,710
taste I just put the smart contract and

419
00:19:52,710 --> 00:19:56,640
then some index and we give me the the

420
00:19:56,640 --> 00:19:59,370
value that is currently in the first

421
00:19:59,370 --> 00:20:05,270
determined first defined a variable so

422
00:20:05,270 --> 00:20:08,250
so in this case this data here is that

423
00:20:08,250 --> 00:20:10,230
they had the address of the owner of

424
00:20:10,230 --> 00:20:15,870
that of the contract so so this is the

425
00:20:15,870 --> 00:20:18,930
latest greatest value of the of the data

426
00:20:18,930 --> 00:20:22,530
what if I want to do to see a previous

427
00:20:22,530 --> 00:20:24,660
or a story data everything is written on

428
00:20:24,660 --> 00:20:25,620
the blockchain the auction is a

429
00:20:25,620 --> 00:20:28,560
blockchain you can all the history of

430
00:20:28,560 --> 00:20:30,210
all the transaction is written is

431
00:20:30,210 --> 00:20:33,570
written and available to for you always

432
00:20:33,570 --> 00:20:36,420
this is what it is the big promise of

433
00:20:36,420 --> 00:20:38,220
blockchain so all your if you want to

434
00:20:38,220 --> 00:20:40,310
see what it was the owner like maybe

435
00:20:40,310 --> 00:20:42,720
three months ago all you have to do is

436
00:20:42,720 --> 00:20:45,240
think I know any theorem node to this

437
00:20:45,240 --> 00:20:48,510
point well this value was in in this was

438
00:20:48,510 --> 00:20:50,790
correct and you can see also all the

439
00:20:50,790 --> 00:20:54,990
historic data that used to be in every

440
00:20:54,990 --> 00:20:57,480
variable so everything everything will

441
00:20:57,480 --> 00:21:00,150
you write into the blockchain can be

442
00:21:00,150 --> 00:21:03,000
easily in well maybe it's not that easy

443
00:21:03,000 --> 00:21:04,830
but it can be with a little bit of work

444
00:21:04,830 --> 00:21:09,090
can be done function calls function

445
00:21:09,090 --> 00:21:10,500
calls is also transparent in the

446
00:21:10,500 --> 00:21:14,190
transaction data over here this is the

447
00:21:14,190 --> 00:21:16,800
transaction identifier which is the

448
00:21:16,800 --> 00:21:20,490
prefix of the SHA of the signature

449
00:21:20,490 --> 00:21:22,350
function and then you have the argument

450
00:21:22,350 --> 00:21:24,930
which is the instance address instance

451
00:21:24,930 --> 00:21:28,380
and command at I issued this command is

452
00:21:28,380 --> 00:21:31,820
that the at work command so that this is

453
00:21:31,820 --> 00:21:34,830
give some command to one of the implants

454
00:21:34,830 --> 00:21:37,170
so everybody can read whatever commands

455
00:21:37,170 --> 00:21:39,740
you give to that

456
00:21:40,020 --> 00:21:41,610
and finally as I mentioned earlier the

457
00:21:41,610 --> 00:21:43,740
log events the data that you put out

458
00:21:43,740 --> 00:21:45,870
from the transaction can be also read

459
00:21:45,870 --> 00:21:53,070
from the from the transaction log okay

460
00:21:53,070 --> 00:21:55,770
so what is this what does it mean for me

461
00:21:55,770 --> 00:21:58,800
in my project so currently in the

462
00:21:58,800 --> 00:22:01,020
current implementation we are leaking

463
00:22:01,020 --> 00:22:03,150
all the other allowed implants what

464
00:22:03,150 --> 00:22:04,920
which implants can be allowed and which

465
00:22:04,920 --> 00:22:07,080
implants cannot all the activated ones

466
00:22:07,080 --> 00:22:10,110
and on the session IDs all the commands

467
00:22:10,110 --> 00:22:11,790
that I send auto-replies the skew all

468
00:22:11,790 --> 00:22:12,300
the data

469
00:22:12,300 --> 00:22:15,210
let's froze on the network and if you

470
00:22:15,210 --> 00:22:16,860
think about you can just you can take it

471
00:22:16,860 --> 00:22:18,870
a little bit further you can honeypot it

472
00:22:18,870 --> 00:22:22,500
you can take that take the machine ID

473
00:22:22,500 --> 00:22:25,560
that I used and put put the implants in

474
00:22:25,560 --> 00:22:28,500
another machine and you can do a replay

475
00:22:28,500 --> 00:22:29,810
attacks and a man-in-the-middle

476
00:22:29,810 --> 00:22:32,010
basically whatever you want because

477
00:22:32,010 --> 00:22:36,840
everything is is open so this is not

478
00:22:36,840 --> 00:22:38,970
good so let's fix that and this is my

479
00:22:38,970 --> 00:22:42,860
final revision of the smart contact

480
00:22:42,860 --> 00:22:44,970
instead of writing everything in clear

481
00:22:44,970 --> 00:22:48,180
text we're gonna encrypt it so all the

482
00:22:48,180 --> 00:22:50,550
addresses that are marked in red or the

483
00:22:50,550 --> 00:22:52,290
address variables or not instead of

484
00:22:52,290 --> 00:22:54,840
writing them onto the blockchain Azis we

485
00:22:54,840 --> 00:22:57,000
hash them and write the hashes to the

486
00:22:57,000 --> 00:22:59,070
blockchain and all the unbounding

487
00:22:59,070 --> 00:23:01,710
strings we just use public key

488
00:23:01,710 --> 00:23:05,580
encryption in order to to encrypt all

489
00:23:05,580 --> 00:23:07,380
the strings for the recipients so we use

490
00:23:07,380 --> 00:23:09,450
the address the public the address for

491
00:23:09,450 --> 00:23:13,110
the the instance that we want to send

492
00:23:13,110 --> 00:23:15,900
their data to we encrypt it and we know

493
00:23:15,900 --> 00:23:19,350
that only only with the the the private

494
00:23:19,350 --> 00:23:21,780
key you can later decrypt it and this

495
00:23:21,780 --> 00:23:24,560
basically solves all of the of the

496
00:23:24,560 --> 00:23:28,530
visibility prophets and finally I want

497
00:23:28,530 --> 00:23:32,810
to talk about take over and takedowns so

498
00:23:32,810 --> 00:23:35,130
as I mentioned earlier blockchain is

499
00:23:35,130 --> 00:23:37,440
immutable and this is the basic

500
00:23:37,440 --> 00:23:40,950
inherently reason why it's secure to

501
00:23:40,950 --> 00:23:42,770
write stuff into it he once you write it

502
00:23:42,770 --> 00:23:45,240
down to the blockchain it cannot be ever

503
00:23:45,240 --> 00:23:48,950
change and again I let this guy

504
00:23:48,950 --> 00:23:52,530
we'll share a really helpful really dumb

505
00:23:52,530 --> 00:23:55,650
metaphor for why it is safe the way I

506
00:23:55,650 --> 00:23:58,050
like to think of it is that a blockchain

507
00:23:58,050 --> 00:24:00,570
as a highly processed thing sort of like

508
00:24:00,570 --> 00:24:03,180
a Chicken McNugget and if you wanted to

509
00:24:03,180 --> 00:24:05,220
hack it it'd be like turning a Chicken

510
00:24:05,220 --> 00:24:09,390
McNugget back into a chicken this is the

511
00:24:09,390 --> 00:24:11,940
perfect metaphor for why blockchain well

512
00:24:11,940 --> 00:24:14,490
the proof of walk that the miners are

513
00:24:14,490 --> 00:24:16,830
doing are solving when they validate

514
00:24:16,830 --> 00:24:20,240
blocks is exactly the reason why a

515
00:24:20,240 --> 00:24:23,730
blockchain is safe because you need

516
00:24:23,730 --> 00:24:26,640
infinite or at least more than 50% of

517
00:24:26,640 --> 00:24:28,680
the entire networks computing power in

518
00:24:28,680 --> 00:24:31,530
order to reverse a transaction and this

519
00:24:31,530 --> 00:24:33,270
is exactly why I throw the theorem

520
00:24:33,270 --> 00:24:35,190
because it's a very big network for

521
00:24:35,190 --> 00:24:36,570
example if you do if you go to a small

522
00:24:36,570 --> 00:24:39,150
network like we seen in a Bitcoin gold a

523
00:24:39,150 --> 00:24:41,310
few weeks ago it can be done but for

524
00:24:41,310 --> 00:24:44,100
etherium probably in the near future it

525
00:24:44,100 --> 00:24:47,820
will be probably safe so if you write a

526
00:24:47,820 --> 00:24:50,340
smart contract our own smart coding to

527
00:24:50,340 --> 00:24:52,470
the blockchain we know that no one can

528
00:24:52,470 --> 00:24:55,830
take it down unless you do a hard fork

529
00:24:55,830 --> 00:25:00,450
and this was done a once when they if in

530
00:25:00,450 --> 00:25:03,930
code the DAO attack the etherium the

531
00:25:03,930 --> 00:25:06,630
network was very young and it was a very

532
00:25:06,630 --> 00:25:08,820
big high-profile attack and the etherium

533
00:25:08,820 --> 00:25:10,470
foundation thought it would be a good

534
00:25:10,470 --> 00:25:12,060
idea to do a hard fall can reverse all

535
00:25:12,060 --> 00:25:14,460
this transaction if they got a very big

536
00:25:14,460 --> 00:25:16,950
strong backlash from the community and

537
00:25:16,950 --> 00:25:19,650
it's unlikely it will ever happen again

538
00:25:19,650 --> 00:25:21,450
in the near future and less you your

539
00:25:21,450 --> 00:25:23,430
botnet we probably take down the whole

540
00:25:23,430 --> 00:25:27,150
if your network so takedowns are

541
00:25:27,150 --> 00:25:32,190
probably non feasible unless unless you

542
00:25:32,190 --> 00:25:34,830
shoot yourself in the foot so solidity

543
00:25:34,830 --> 00:25:36,930
is a nice very nice language but it

544
00:25:36,930 --> 00:25:40,770
allows you like every programming

545
00:25:40,770 --> 00:25:42,420
language allows you shoot to shoot

546
00:25:42,420 --> 00:25:45,660
yourself in the foot in various various

547
00:25:45,660 --> 00:25:50,370
ways so and almost all the breaches that

548
00:25:50,370 --> 00:25:53,190
you saw in the news that stole multiple

549
00:25:53,190 --> 00:25:54,660
millions of dollars from materials

550
00:25:54,660 --> 00:25:58,290
contract is due to not bugs in the in

551
00:25:58,290 --> 00:26:00,540
the in the theorem network but on the

552
00:26:00,540 --> 00:26:01,530
smart contact

553
00:26:01,530 --> 00:26:03,860
that thou the poverty multisig and

554
00:26:03,860 --> 00:26:06,210
actually there was a recent study

555
00:26:06,210 --> 00:26:10,410
conducted in February that do do this

556
00:26:10,410 --> 00:26:13,470
static analysis of all starts mud

557
00:26:13,470 --> 00:26:15,600
contracts a lot of smart contracts in

558
00:26:15,600 --> 00:26:17,850
the deployed in material network and

559
00:26:17,850 --> 00:26:20,040
they found that a lot of them are

560
00:26:20,040 --> 00:26:23,910
susceptible to either take down or take

561
00:26:23,910 --> 00:26:25,890
over or just stealing on the order

562
00:26:25,890 --> 00:26:28,890
called a theorem in them so I know it's

563
00:26:28,890 --> 00:26:32,340
all due to bugs and and and unsecured

564
00:26:32,340 --> 00:26:35,550
coding of the smart contract itself and

565
00:26:35,550 --> 00:26:37,130
I'll give you a real example from my own

566
00:26:37,130 --> 00:26:41,640
POC that I did for this project so and

567
00:26:41,640 --> 00:26:46,410
this is the true story so as I mentioned

568
00:26:46,410 --> 00:26:48,540
I want to implement some kind of filter

569
00:26:48,540 --> 00:26:51,570
on the on the blockchain to for the

570
00:26:51,570 --> 00:26:54,090
implants so for the for event that is

571
00:26:54,090 --> 00:26:56,130
called command pending basically the

572
00:26:56,130 --> 00:26:58,380
implant is waiting for commands from the

573
00:26:58,380 --> 00:27:01,560
CNC so he is his waiting on the a

574
00:27:01,560 --> 00:27:04,440
specific event hush okay so this this

575
00:27:04,440 --> 00:27:07,200
event and it's waiting on its own

576
00:27:07,200 --> 00:27:10,290
existence to events to its own implant

577
00:27:10,290 --> 00:27:14,280
address so anyway just sits there and

578
00:27:14,280 --> 00:27:15,780
waits for a blockchain to him to emit

579
00:27:15,780 --> 00:27:18,060
the event so what can possibly go wrong

580
00:27:18,060 --> 00:27:20,820
with that let's say that we have an

581
00:27:20,820 --> 00:27:28,230
adversary he deploys a contract because

582
00:27:28,230 --> 00:27:31,020
Eve in C&C and it has the exact same

583
00:27:31,020 --> 00:27:35,760
event signature as my own event and then

584
00:27:35,760 --> 00:27:38,280
he do a function that is basically

585
00:27:38,280 --> 00:27:41,040
calling this event then he selects the

586
00:27:41,040 --> 00:27:46,080
func call this this add work function

587
00:27:46,080 --> 00:27:50,250
with my implant address and he picks a

588
00:27:50,250 --> 00:27:53,310
command in this case I took the liberty

589
00:27:53,310 --> 00:27:55,230
of choosing a command it has a very long

590
00:27:55,230 --> 00:28:00,090
output and it triggers that sends its to

591
00:28:00,090 --> 00:28:00,660
abruption

592
00:28:00,660 --> 00:28:06,150
who can guess what will happen well I

593
00:28:06,150 --> 00:28:08,730
don't want keep you waiting well of

594
00:28:08,730 --> 00:28:11,220
course my my implant

595
00:28:11,220 --> 00:28:15,140
will happily execute this this in this

596
00:28:15,140 --> 00:28:20,130
transaction and not only that the

597
00:28:20,130 --> 00:28:23,159
implant will actually trigger a execute

598
00:28:23,159 --> 00:28:24,780
this function this is a function that

599
00:28:24,780 --> 00:28:28,289
will that has a long output and it will

600
00:28:28,289 --> 00:28:31,950
execute it and return the results not to

601
00:28:31,950 --> 00:28:34,110
the evil CNC because he doesn't know

602
00:28:34,110 --> 00:28:34,590
about it

603
00:28:34,590 --> 00:28:36,840
he returns it to the original smart

604
00:28:36,840 --> 00:28:39,210
contract address so not only we did

605
00:28:39,210 --> 00:28:44,669
because the implants to spend a lot of

606
00:28:44,669 --> 00:28:46,919
eater because the transaction size is

607
00:28:46,919 --> 00:28:50,610
very very big we also can shove a an

608
00:28:50,610 --> 00:28:54,990
arbitrary data to the scenes itself we

609
00:28:54,990 --> 00:28:56,880
can also use that with other commands to

610
00:28:56,880 --> 00:28:58,620
reveal what is the IP address and what

611
00:28:58,620 --> 00:29:00,210
is the location of their boards and the

612
00:29:00,210 --> 00:29:02,880
possibilities are endless if you for

613
00:29:02,880 --> 00:29:04,440
example you find some bug in the CMC

614
00:29:04,440 --> 00:29:09,059
itself so this is a very big problem and

615
00:29:09,059 --> 00:29:10,950
it's because we are in a security

616
00:29:10,950 --> 00:29:12,990
conference I had I have it's not gonna

617
00:29:12,990 --> 00:29:14,340
be a security conference talk and yes I

618
00:29:14,340 --> 00:29:17,850
can name a van ability so I call it the

619
00:29:17,850 --> 00:29:26,770
side contract attack and the fix

620
00:29:26,770 --> 00:29:33,040
the fix is yeah no I didn't go that far

621
00:29:33,040 --> 00:29:35,050
because the fix is very very easy all

622
00:29:35,050 --> 00:29:37,990
you have to do is on the on the filter

623
00:29:37,990 --> 00:29:41,950
that you did they imply that the implant

624
00:29:41,950 --> 00:29:44,920
is listening to you have to specify what

625
00:29:44,920 --> 00:29:46,840
is the contract address that you are

626
00:29:46,840 --> 00:29:50,290
listening on this is very simple but and

627
00:29:50,290 --> 00:29:53,370
very intuitive maybe but almost all the

628
00:29:53,370 --> 00:29:55,480
order code that I checked and all the

629
00:29:55,480 --> 00:29:56,740
example that I've seen in all different

630
00:29:56,740 --> 00:29:58,690
documents no one's talked about no one's

631
00:29:58,690 --> 00:30:01,240
talking about it so this is just an

632
00:30:01,240 --> 00:30:05,470
example of how a small mistake disregard

633
00:30:05,470 --> 00:30:07,930
from from the programmer can cause

634
00:30:07,930 --> 00:30:14,430
catastrophic catastrophic events okay

635
00:30:14,430 --> 00:30:18,430
let's move over to the final calculation

636
00:30:18,430 --> 00:30:24,310
of all the infrastructure so I did some

637
00:30:24,310 --> 00:30:25,930
calculation there not very interesting I

638
00:30:25,930 --> 00:30:28,870
think of the round-trip times of how

639
00:30:28,870 --> 00:30:30,520
much it cost to send this type of data

640
00:30:30,520 --> 00:30:31,600
and this type of data

641
00:30:31,600 --> 00:30:35,550
eventually the average cost is roughly

642
00:30:35,550 --> 00:30:39,340
per byte is roughly a crew quarters of a

643
00:30:39,340 --> 00:30:42,700
cent I did some estimation if you on

644
00:30:42,700 --> 00:30:45,850
average you send 256 bytes on each

645
00:30:45,850 --> 00:30:48,490
direction three times a day the annual

646
00:30:48,490 --> 00:30:53,230
cost of all of one bot is on the end and

647
00:30:53,230 --> 00:30:56,500
in today's prices is around 100 146

648
00:30:56,500 --> 00:31:00,310
dollars which accumulates to if you have

649
00:31:00,310 --> 00:31:03,160
multiple BOTS accumulates to a pretty

650
00:31:03,160 --> 00:31:05,950
hefty sum if you compare it to so for

651
00:31:05,950 --> 00:31:10,660
example just a regular CNC that sits on

652
00:31:10,660 --> 00:31:12,370
some kind of bulletproof servers of

653
00:31:12,370 --> 00:31:16,570
course this cost is outrageous and this

654
00:31:16,570 --> 00:31:17,980
is a very big problem we're going to

655
00:31:17,980 --> 00:31:21,310
talk about it later on so this basically

656
00:31:21,310 --> 00:31:25,630
covers all the all the stuff that I want

657
00:31:25,630 --> 00:31:27,520
to check and I think now it's time for a

658
00:31:27,520 --> 00:31:33,640
little demo the demo I did is is a movie

659
00:31:33,640 --> 00:31:35,230
because otherwise we'll be sitting here

660
00:31:35,230 --> 00:31:38,380
waiting photo reduction - to confirm for

661
00:31:38,380 --> 00:31:39,630
a lot of time so

662
00:31:39,630 --> 00:31:43,170
let's go through in it so first we start

663
00:31:43,170 --> 00:31:47,760
by running the node and we generating an

664
00:31:47,760 --> 00:31:51,750
owner account and then we start we start

665
00:31:51,750 --> 00:31:53,040
running the node and initialize the

666
00:31:53,040 --> 00:31:55,800
blockchain sinking of the blockchain and

667
00:31:55,800 --> 00:31:59,910
then once it's it's done we unlocking

668
00:31:59,910 --> 00:32:01,920
the account and deploying and the smart

669
00:32:01,920 --> 00:32:05,190
contracts onto the blockchain afterwards

670
00:32:05,190 --> 00:32:07,890
once it's deployed we're gonna start we

671
00:32:07,890 --> 00:32:14,280
gonna load our CNC server so we're

672
00:32:14,280 --> 00:32:16,080
loading the data with the wallet and

673
00:32:16,080 --> 00:32:19,380
everything else and afterwards some

674
00:32:19,380 --> 00:32:25,050
magic happens and we have our CNC okay

675
00:32:25,050 --> 00:32:28,170
so now that the infrastructure is up we

676
00:32:28,170 --> 00:32:35,490
can start generating the implants so now

677
00:32:35,490 --> 00:32:36,960
we generally thank the implants we

678
00:32:36,960 --> 00:32:39,560
generate in a wallet for the instance

679
00:32:39,560 --> 00:32:45,180
and we wrap it everything in one nice

680
00:32:45,180 --> 00:32:51,960
package so and you can see that we just

681
00:32:51,960 --> 00:32:54,960
registered the instance into the smart

682
00:32:54,960 --> 00:32:58,170
contract now we can move the contract to

683
00:32:58,170 --> 00:33:02,060
another machine and we're gonna run it

684
00:33:02,060 --> 00:33:06,480
we run a local get node and we waited

685
00:33:06,480 --> 00:33:10,170
for it to sync and we load in the the

686
00:33:10,170 --> 00:33:14,280
contract and the wallet from from the

687
00:33:14,280 --> 00:33:17,010
implant configuration you can see that

688
00:33:17,010 --> 00:33:18,510
we have an account balance of 1 this is

689
00:33:18,510 --> 00:33:20,040
the amount of ether that I gave this

690
00:33:20,040 --> 00:33:23,910
implant and you see that is ready and

691
00:33:23,910 --> 00:33:26,070
it's now waiting for work over here over

692
00:33:26,070 --> 00:33:28,140
on the left you can see that the CNC has

693
00:33:28,140 --> 00:33:30,120
been informed that it's he has one

694
00:33:30,120 --> 00:33:32,490
instance one now we're gonna issue some

695
00:33:32,490 --> 00:33:35,280
command a netstat command you can see it

696
00:33:35,280 --> 00:33:39,660
start running on the side on the on the

697
00:33:39,660 --> 00:33:41,820
implant side and over on the CNC side we

698
00:33:41,820 --> 00:33:46,470
have the day that our reach or the CNC

699
00:33:46,470 --> 00:33:48,510
now we're going to do something fancier

700
00:33:48,510 --> 00:33:50,220
which I'm going to generate another

701
00:33:50,220 --> 00:33:52,730
client

702
00:33:54,169 --> 00:33:57,629
it generated and once it's inked you see

703
00:33:57,629 --> 00:34:00,720
that it's already pending and then it

704
00:34:00,720 --> 00:34:04,619
will in a bit it will be registered and

705
00:34:04,619 --> 00:34:07,110
now we're gonna do just to show you that

706
00:34:07,110 --> 00:34:11,609
it's a it can have multiple instances we

707
00:34:11,609 --> 00:34:15,629
can issue another command this time

708
00:34:15,629 --> 00:34:17,819
we're gonna just tell it to say what

709
00:34:17,819 --> 00:34:21,569
what is your user and run it and you can

710
00:34:21,569 --> 00:34:23,099
see over the right that you between it's

711
00:34:23,099 --> 00:34:28,199
running on both ends and we got it and

712
00:34:28,199 --> 00:34:30,179
you can see that one says artist and

713
00:34:30,179 --> 00:34:42,690
another one says Bob okay okay so to sum

714
00:34:42,690 --> 00:34:46,409
is that to sum it up is blockchain the

715
00:34:46,409 --> 00:34:50,010
ultimate the ultimat is infrastructure

716
00:34:50,010 --> 00:34:53,699
for malicious activities so let's go one

717
00:34:53,699 --> 00:34:56,250
by one secure communication yeah we got

718
00:34:56,250 --> 00:34:57,900
it if we have a state-of-the-art p2p

719
00:34:57,900 --> 00:34:59,819
network with thousands of node fully

720
00:34:59,819 --> 00:35:03,210
encrypted web protocol so we it's it's

721
00:35:03,210 --> 00:35:07,049
right out of here it's a lot better than

722
00:35:07,049 --> 00:35:11,609
most senses in nowadays and high

723
00:35:11,609 --> 00:35:13,559
availability okay I just mentioned we

724
00:35:13,559 --> 00:35:15,059
had thousands of people on the globe so

725
00:35:15,059 --> 00:35:17,730
unless you block the whole interior

726
00:35:17,730 --> 00:35:20,010
network and the assumption here is that

727
00:35:20,010 --> 00:35:22,410
aetherium gonna have some useful

728
00:35:22,410 --> 00:35:25,230
applications that a lot of a lot of

729
00:35:25,230 --> 00:35:27,930
organization won't be gonna use so they

730
00:35:27,930 --> 00:35:30,059
they cannot really block the whole if

731
00:35:30,059 --> 00:35:34,040
you network because otherwise this this

732
00:35:34,040 --> 00:35:37,799
application won't work either so as I

733
00:35:37,799 --> 00:35:39,420
mentioned we have thousands of peers so

734
00:35:39,420 --> 00:35:42,210
and once you connect to one peer all the

735
00:35:42,210 --> 00:35:44,900
other nodes all the other nodes are

736
00:35:44,900 --> 00:35:46,650
talking with each other and getting

737
00:35:46,650 --> 00:35:48,240
getting you all the other nodes all you

738
00:35:48,240 --> 00:35:50,400
have to have is one unblocked peer in

739
00:35:50,400 --> 00:35:53,190
order to connect so this is very good

740
00:35:53,190 --> 00:35:56,700
you you are very your you can be sure

741
00:35:56,700 --> 00:35:58,349
that you're gonna find some no to

742
00:35:58,349 --> 00:36:01,829
connect to also baktun is the mention

743
00:36:01,829 --> 00:36:03,690
Bachman is immutable so the contract can

744
00:36:03,690 --> 00:36:06,500
be modified once it deployed so once you

745
00:36:06,500 --> 00:36:09,080
you deploy an implant with some contract

746
00:36:09,080 --> 00:36:11,120
other address written into it you can be

747
00:36:11,120 --> 00:36:13,670
sure that this contract will be there

748
00:36:13,670 --> 00:36:16,250
and it cannot be taken down so it will

749
00:36:16,250 --> 00:36:19,220
be there and you can contact the smart

750
00:36:19,220 --> 00:36:23,720
contract regarding scalability so this

751
00:36:23,720 --> 00:36:27,700
is a problems as I mentioned earlier a

752
00:36:27,700 --> 00:36:30,740
theorem today is the same as Bitcoin all

753
00:36:30,740 --> 00:36:33,860
the large Bitcoin networks have a very

754
00:36:33,860 --> 00:36:36,290
big scale bility issues as you saw a

755
00:36:36,290 --> 00:36:39,290
text are between 30 seconds into three

756
00:36:39,290 --> 00:36:42,080
and a half minutes for a transaction to

757
00:36:42,080 --> 00:36:44,870
to get mine so obviously this type of

758
00:36:44,870 --> 00:36:46,730
infrastructure is not suited for real

759
00:36:46,730 --> 00:36:49,550
time stuff if you go if you okay with

760
00:36:49,550 --> 00:36:51,290
sending command and you get the results

761
00:36:51,290 --> 00:36:56,750
after a few minutes then it's fine so so

762
00:36:56,750 --> 00:37:00,380
another another problem is that the

763
00:37:00,380 --> 00:37:02,990
implants are uniquely generated so you

764
00:37:02,990 --> 00:37:05,330
have to have a wallet and Easter in each

765
00:37:05,330 --> 00:37:11,120
one of this in each one so if you want

766
00:37:11,120 --> 00:37:14,300
to deliver in thousands you have to be

767
00:37:14,300 --> 00:37:15,800
each one of the samples have to be

768
00:37:15,800 --> 00:37:20,690
unique and the employed footprint itself

769
00:37:20,690 --> 00:37:22,940
they even though we use a light mode of

770
00:37:22,940 --> 00:37:26,120
off ATM node it still takes 300

771
00:37:26,120 --> 00:37:27,800
megabytes of memory it has a large

772
00:37:27,800 --> 00:37:30,200
footprint on the it used a little bit of

773
00:37:30,200 --> 00:37:33,950
CPU it has a relatively large footprint

774
00:37:33,950 --> 00:37:38,300
on the remote machine the there are

775
00:37:38,300 --> 00:37:39,830
still working on it and I mean this is

776
00:37:39,830 --> 00:37:41,570
also a big problem for example in mobile

777
00:37:41,570 --> 00:37:44,690
with aetherium and I hope this is going

778
00:37:44,690 --> 00:37:49,880
to be solved in the next year or so okay

779
00:37:49,880 --> 00:37:53,470
so I give this half half a credit

780
00:37:53,470 --> 00:37:56,260
returning regarding authentication

781
00:37:56,260 --> 00:37:58,490
blockchain guarantees the implants

782
00:37:58,490 --> 00:38:01,280
accounting to be correct so whatever

783
00:38:01,280 --> 00:38:03,020
what to the blockchain is which we are

784
00:38:03,020 --> 00:38:04,790
sure to be correct and the registration

785
00:38:04,790 --> 00:38:07,250
process dies the impact to a specific

786
00:38:07,250 --> 00:38:11,090
machine so hopefully we cannot be

787
00:38:11,090 --> 00:38:14,870
moved moved around or and mess around

788
00:38:14,870 --> 00:38:17,740
with the control over the wallet

789
00:38:17,740 --> 00:38:19,760
generated an accession I did that we

790
00:38:19,760 --> 00:38:24,020
give each implant a prevents give us a

791
00:38:24,020 --> 00:38:25,940
protection from forgery and replay

792
00:38:25,940 --> 00:38:28,370
attacks and all sorts of this this

793
00:38:28,370 --> 00:38:30,350
problem so we have we can make sure that

794
00:38:30,350 --> 00:38:32,300
only they write the inputs that we

795
00:38:32,300 --> 00:38:34,750
allowed can connect to the network

796
00:38:34,750 --> 00:38:37,700
regarding limited okay so there is no

797
00:38:37,700 --> 00:38:41,030
way to know the transaction a where the

798
00:38:41,030 --> 00:38:43,280
transaction was transmitted from so each

799
00:38:43,280 --> 00:38:47,510
and every transaction can be each and

800
00:38:47,510 --> 00:38:53,960
every transaction have to be there's no

801
00:38:53,960 --> 00:38:56,240
way to know which implant triggered

802
00:38:56,240 --> 00:38:58,460
which transaction so you cannot know

803
00:38:58,460 --> 00:39:01,040
from the location for example of an

804
00:39:01,040 --> 00:39:03,410
implant from of which term node it

805
00:39:03,410 --> 00:39:05,750
emitted from so our implants are really

806
00:39:05,750 --> 00:39:07,970
anonymized and regarding the owner of

807
00:39:07,970 --> 00:39:12,110
the of the smart contract so again

808
00:39:12,110 --> 00:39:14,480
because there is no way to know who is

809
00:39:14,480 --> 00:39:16,820
behind the ATM wallet unless he's doing

810
00:39:16,820 --> 00:39:19,160
all sorts of shenanigans with the

811
00:39:19,160 --> 00:39:21,140
changing cryptocurrencies and going to

812
00:39:21,140 --> 00:39:22,160
some cryptocurrencies

813
00:39:22,160 --> 00:39:25,880
you remain pretty anonymous so we good

814
00:39:25,880 --> 00:39:29,840
on this front regarding data leakage so

815
00:39:29,840 --> 00:39:32,780
as I mentioned blocking spray is is

816
00:39:32,780 --> 00:39:35,210
public but the encryption that we

817
00:39:35,210 --> 00:39:37,340
implemented prevent anyone from

818
00:39:37,340 --> 00:39:40,100
basically knowing what's going on on the

819
00:39:40,100 --> 00:39:45,440
on the smart contract what I can say is

820
00:39:45,440 --> 00:39:48,050
that we we take for granted that one

821
00:39:48,050 --> 00:39:50,420
implants can be caught somewhere and

822
00:39:50,420 --> 00:39:52,640
they get reversed but the way we

823
00:39:52,640 --> 00:39:55,880
designed the POC is that we the only

824
00:39:55,880 --> 00:39:58,250
thing that will get if they reverse the

825
00:39:58,250 --> 00:40:00,920
some in some implant is the wallet

826
00:40:00,920 --> 00:40:02,870
address of this this specific instance

827
00:40:02,870 --> 00:40:05,030
but it will not get more information

828
00:40:05,030 --> 00:40:07,700
about the network about an implants

829
00:40:07,700 --> 00:40:10,310
about all the other stuff that are going

830
00:40:10,310 --> 00:40:11,480
on in the network and this is exactly

831
00:40:11,480 --> 00:40:13,880
what we want we cannot do anything about

832
00:40:13,880 --> 00:40:15,860
reverse engineering but we at least we

833
00:40:15,860 --> 00:40:19,370
can prevent the data leakage with

834
00:40:19,370 --> 00:40:21,350
regarding takedowns okay as we said

835
00:40:21,350 --> 00:40:23,720
there is no governing authorities for

836
00:40:23,720 --> 00:40:27,770
cerium - is that officially so and it

837
00:40:27,770 --> 00:40:29,990
cannot be killed so we have takedown

838
00:40:29,990 --> 00:40:32,390
resistant thank you

839
00:40:32,390 --> 00:40:35,690
and unless we have a very ugly bug in

840
00:40:35,690 --> 00:40:38,840
the code we there is also a there is no

841
00:40:38,840 --> 00:40:43,940
problem with the with the with the

842
00:40:43,940 --> 00:40:47,390
takeover and regarding operational cost

843
00:40:47,390 --> 00:40:50,960
as I mentioned earlier if cerium is very

844
00:40:50,960 --> 00:40:53,660
expensive nowadays STI even though it

845
00:40:53,660 --> 00:40:56,000
almost been cut in half in the price

846
00:40:56,000 --> 00:41:00,230
it's still it's not very it's not very

847
00:41:00,230 --> 00:41:03,230
cheap and it's not gonna be any better

848
00:41:03,230 --> 00:41:06,619
in the next upcoming days if you believe

849
00:41:06,619 --> 00:41:10,580
in it so we can consider a tentative

850
00:41:10,580 --> 00:41:11,690
change I don't think there are viable

851
00:41:11,690 --> 00:41:14,450
yet there is a Cardinal now eros and it

852
00:41:14,450 --> 00:41:16,460
even classic and a lot more that also

853
00:41:16,460 --> 00:41:18,080
runs much contact and you can do the

854
00:41:18,080 --> 00:41:20,390
same thing over an other blockchain the

855
00:41:20,390 --> 00:41:22,550
problem is they are not yet a popular

856
00:41:22,550 --> 00:41:25,340
and and there are the level of security

857
00:41:25,340 --> 00:41:28,369
in this network is not as good as in the

858
00:41:28,369 --> 00:41:30,589
etherium another thing you consider

859
00:41:30,589 --> 00:41:32,839
there is no flat cost every byte you

860
00:41:32,839 --> 00:41:35,150
deliver from in in the network cost you

861
00:41:35,150 --> 00:41:39,140
if there so it's it's not like you set

862
00:41:39,140 --> 00:41:40,790
up as level somewhere and then all the

863
00:41:40,790 --> 00:41:44,030
traffic is free everybody you pay and of

864
00:41:44,030 --> 00:41:48,050
course you have to deliver some in some

865
00:41:48,050 --> 00:41:51,020
amount of ether in each and every one of

866
00:41:51,020 --> 00:41:54,680
the inputs that you generate so that if

867
00:41:54,680 --> 00:41:57,470
some implants get reversed or been cut

868
00:41:57,470 --> 00:41:59,180
or something like that you lost this

869
00:41:59,180 --> 00:42:03,349
ether so regarding and and I think this

870
00:42:03,349 --> 00:42:06,320
is the main problem with this type of

871
00:42:06,320 --> 00:42:07,700
fare in fact I think this is the main

872
00:42:07,700 --> 00:42:12,170
reason why we haven't seen this this

873
00:42:12,170 --> 00:42:14,720
gets very popular yet is the matter of

874
00:42:14,720 --> 00:42:18,349
the cost but I think that as we can have

875
00:42:18,349 --> 00:42:20,420
more and more platforms that gives you

876
00:42:20,420 --> 00:42:22,490
the ability to run smart contracts this

877
00:42:22,490 --> 00:42:25,490
this type of problem will probably be

878
00:42:25,490 --> 00:42:32,089
resolved so mitigation committee is even

879
00:42:32,089 --> 00:42:33,650
possible well as I mention other you can

880
00:42:33,650 --> 00:42:36,470
just block the entire ATM

881
00:42:36,470 --> 00:42:37,730
and network as I mention it's not very

882
00:42:37,730 --> 00:42:40,099
viable solution the other thing that we

883
00:42:40,099 --> 00:42:44,060
can pick up is some kind of a blacklist

884
00:42:44,060 --> 00:42:46,400
of of smart Condor this is something

885
00:42:46,400 --> 00:42:48,950
that is not yet exist in either in any

886
00:42:48,950 --> 00:42:50,869
any other node it will have to be

887
00:42:50,869 --> 00:42:52,640
specifically written it can be a nice

888
00:42:52,640 --> 00:42:54,800
project for someone if you want to take

889
00:42:54,800 --> 00:42:56,990
it it could be a nice project or even a

890
00:42:56,990 --> 00:42:59,510
startup so if you have more ideas about

891
00:42:59,510 --> 00:43:01,609
mitigation you can come come talk to me

892
00:43:01,609 --> 00:43:03,640
later

893
00:43:03,640 --> 00:43:09,260
finally all the code for the POC is is

894
00:43:09,260 --> 00:43:12,710
being released today to the public that

895
00:43:12,710 --> 00:43:15,470
the report gets part 3 is today it's

896
00:43:15,470 --> 00:43:19,760
been made available in this address the

897
00:43:19,760 --> 00:43:21,440
demo video is also there if you want to

898
00:43:21,440 --> 00:43:26,180
see it take a look at it and generally

899
00:43:26,180 --> 00:43:27,740
if you have any question you can find me

900
00:43:27,740 --> 00:43:30,500
on and Peter and I will shoot me an

901
00:43:30,500 --> 00:43:32,810
email that's it if you have any

902
00:43:32,810 --> 00:43:40,070
questions or something yeah the smart

903
00:43:40,070 --> 00:43:43,750
contract is here on test net but you can

904
00:43:43,750 --> 00:43:47,240
the POC supports private the test net or

905
00:43:47,240 --> 00:43:50,560
public whatever you want you can deploy

906
00:43:50,560 --> 00:43:53,810
yes but they took it but I'm not gonna

907
00:43:53,810 --> 00:44:00,320
release it here any other questions okay

908
00:44:00,320 --> 00:44:01,090
thank you very much

909
00:44:01,090 --> 00:44:06,379
[Applause]

