1
00:00:00,080 --> 00:00:02,399
i am ready to introduce our next

2
00:00:02,399 --> 00:00:03,919
fantastic speaker

3
00:00:03,919 --> 00:00:07,200
and she is a first-time speaker

4
00:00:07,200 --> 00:00:10,960
here at besides tel aviv 2021

5
00:00:10,960 --> 00:00:14,000
aluma thank you for joining us i'm going

6
00:00:14,000 --> 00:00:15,200
i'm going to tell you a little bit about

7
00:00:15,200 --> 00:00:16,400
the romani yes please give her an

8
00:00:16,400 --> 00:00:17,199
applause

9
00:00:17,199 --> 00:00:21,199
now we join her here cheers

10
00:00:21,199 --> 00:00:24,000
aluma and inbar are sharing a chaser

11
00:00:24,000 --> 00:00:25,039
which is a long

12
00:00:25,039 --> 00:00:28,080
time b-side tel aviv tradition followed

13
00:00:28,080 --> 00:00:30,320
the tradition of hacker conferences from

14
00:00:30,320 --> 00:00:31,439
around the world

15
00:00:31,439 --> 00:00:35,040
so aluma is a cyber security and malware

16
00:00:35,040 --> 00:00:37,920
researcher at cyber arc i think malware

17
00:00:37,920 --> 00:00:39,440
researchers are some of the coolest

18
00:00:39,440 --> 00:00:41,120
people i know because they can

19
00:00:41,120 --> 00:00:42,800
talk to malware and understand things

20
00:00:42,800 --> 00:00:44,559
that you know i went to a malware

21
00:00:44,559 --> 00:00:46,559
reverse engineering workshop once and i

22
00:00:46,559 --> 00:00:48,320
just have such a respect for the work

23
00:00:48,320 --> 00:00:48,960
that you do

24
00:00:48,960 --> 00:00:52,079
well done and actually she has a really

25
00:00:52,079 --> 00:00:54,320
cool fun fact you will never guess

26
00:00:54,320 --> 00:00:58,160
but aluma's life goal is actually

27
00:00:58,160 --> 00:01:01,120
to travel all around the world and take

28
00:01:01,120 --> 00:01:03,199
a picture of herself

29
00:01:03,199 --> 00:01:06,960
taking a handstand that's incredible i

30
00:01:06,960 --> 00:01:08,720
can't take a handstand even

31
00:01:08,720 --> 00:01:10,560
without traveling the world so i can't

32
00:01:10,560 --> 00:01:12,960
even imagine i should try it definitely

33
00:01:12,960 --> 00:01:14,560
i will maybe you can teach me

34
00:01:14,560 --> 00:01:17,200
so today aluma is going to talk to us

35
00:01:17,200 --> 00:01:17,920
about

36
00:01:17,920 --> 00:01:22,000
malware in go lang go lag malware

37
00:01:22,000 --> 00:01:25,040
aluma the stage is yours

38
00:01:25,040 --> 00:01:28,560
thank you very much thank you

39
00:01:28,960 --> 00:01:31,920
hi everyone good morning thank you very

40
00:01:31,920 --> 00:01:33,600
much for having me thank you for coming

41
00:01:33,600 --> 00:01:37,119
i'm very excited to be here today

42
00:01:37,119 --> 00:01:40,000
i'm aluma i've been working in

43
00:01:40,000 --> 00:01:41,439
information security

44
00:01:41,439 --> 00:01:43,360
world for the past seven years and i

45
00:01:43,360 --> 00:01:45,600
currently work at several clubs

46
00:01:45,600 --> 00:01:47,680
i like to say that by day i'm a malwa

47
00:01:47,680 --> 00:01:49,680
researcher and by night i'm

48
00:01:49,680 --> 00:01:51,840
also a malware researcher and i'm here

49
00:01:51,840 --> 00:01:53,439
today to talk to you about golang

50
00:01:53,439 --> 00:01:56,000
malwals

51
00:01:56,399 --> 00:02:00,000
to be or not to be that is the question

52
00:02:00,000 --> 00:02:02,079
whether the snobbler in the mind to

53
00:02:02,079 --> 00:02:03,920
suffer the slings and arrows of

54
00:02:03,920 --> 00:02:05,759
outrageous fortune

55
00:02:05,759 --> 00:02:07,680
or to take arms against a sea of

56
00:02:07,680 --> 00:02:09,758
troubles and by opposing

57
00:02:09,758 --> 00:02:12,319
end them

58
00:02:12,800 --> 00:02:14,959
these are only a few of the lines that i

59
00:02:14,959 --> 00:02:17,360
found inside a golan malware

60
00:02:17,360 --> 00:02:20,000
and i'm here today to tell you why do we

61
00:02:20,000 --> 00:02:21,120
care about that

62
00:02:21,120 --> 00:02:23,680
and how can we as defenders benefit from

63
00:02:23,680 --> 00:02:25,920
that

64
00:02:26,720 --> 00:02:30,000
go language aka golang has been released

65
00:02:30,000 --> 00:02:32,480
12 years ago and since then has become

66
00:02:32,480 --> 00:02:35,280
one of the most popular languages around

67
00:02:35,280 --> 00:02:37,519
many programmers say it is the new

68
00:02:37,519 --> 00:02:38,400
python

69
00:02:38,400 --> 00:02:40,239
and they prefer it because it's easy and

70
00:02:40,239 --> 00:02:41,519
simple to use

71
00:02:41,519 --> 00:02:44,160
and like the programmers so is the

72
00:02:44,160 --> 00:02:45,120
attackers

73
00:02:45,120 --> 00:02:47,040
which many of them are now transforming

74
00:02:47,040 --> 00:02:50,800
to writing their malwares using golang

75
00:02:50,800 --> 00:02:53,040
and now that i've confused you with some

76
00:02:53,040 --> 00:02:55,120
random color for malware names

77
00:02:55,120 --> 00:02:58,480
let's continue so what's so special

78
00:02:58,480 --> 00:02:59,840
about golden malware

79
00:02:59,840 --> 00:03:01,760
is there an actual difference between a

80
00:03:01,760 --> 00:03:03,360
malware written in golang

81
00:03:03,360 --> 00:03:05,360
and in malwa written in any other

82
00:03:05,360 --> 00:03:06,400
language

83
00:03:06,400 --> 00:03:09,760
well yes and very golang is statically

84
00:03:09,760 --> 00:03:11,040
linked which means

85
00:03:11,040 --> 00:03:13,040
that it has all of it its import

86
00:03:13,040 --> 00:03:15,120
functions inside of it

87
00:03:15,120 --> 00:03:17,200
instead of having an import table and

88
00:03:17,200 --> 00:03:19,200
call function that's in the system

89
00:03:19,200 --> 00:03:20,400
you're running on

90
00:03:20,400 --> 00:03:23,599
then if golang imports a package it also

91
00:03:23,599 --> 00:03:24,239
compiles

92
00:03:24,239 --> 00:03:26,959
with the package in its binary in

93
00:03:26,959 --> 00:03:27,519
addition

94
00:03:27,519 --> 00:03:29,440
the assembly that consists a golan

95
00:03:29,440 --> 00:03:31,599
program is much different than any other

96
00:03:31,599 --> 00:03:32,480
language

97
00:03:32,480 --> 00:03:34,799
because golem is supposed to be fast

98
00:03:34,799 --> 00:03:36,640
then it doesn't bother to push the

99
00:03:36,640 --> 00:03:38,159
arguments into the stack

100
00:03:38,159 --> 00:03:40,560
and to call this to clear the stack

101
00:03:40,560 --> 00:03:42,319
after the function returns

102
00:03:42,319 --> 00:03:44,959
so when you're opening a golem malware

103
00:03:44,959 --> 00:03:46,159
in ida and

104
00:03:46,159 --> 00:03:48,239
try to look at its assembly you won't

105
00:03:48,239 --> 00:03:49,760
see any push and pop

106
00:03:49,760 --> 00:03:52,400
commands which makes it kind of weird

107
00:03:52,400 --> 00:03:52,959
for a

108
00:03:52,959 --> 00:03:55,599
malware researcher who's used to analyze

109
00:03:55,599 --> 00:03:56,319
any other

110
00:03:56,319 --> 00:03:59,680
malware so until now i talk to you

111
00:03:59,680 --> 00:04:02,080
how much golem is good for the attackers

112
00:04:02,080 --> 00:04:03,840
and bad for the defenders but

113
00:04:03,840 --> 00:04:07,120
that's not sorry but

114
00:04:07,120 --> 00:04:10,319
that's not the subject of this talk

115
00:04:10,319 --> 00:04:12,239
at the rest of the this lecture i'm

116
00:04:12,239 --> 00:04:13,920
going to show you actually how golang

117
00:04:13,920 --> 00:04:16,399
is good for the defenders and how we as

118
00:04:16,399 --> 00:04:17,199
defenders

119
00:04:17,199 --> 00:04:21,759
can use its properties for our benefit

120
00:04:22,720 --> 00:04:25,040
today everything is open source right

121
00:04:25,040 --> 00:04:26,800
episode open source is fun

122
00:04:26,800 --> 00:04:28,800
it's cool it helps you to share your

123
00:04:28,800 --> 00:04:30,320
code with the rest of the world

124
00:04:30,320 --> 00:04:33,199
it's to help you to contribute to

125
00:04:33,199 --> 00:04:34,880
projects that were written by people you

126
00:04:34,880 --> 00:04:36,720
don't even know

127
00:04:36,720 --> 00:04:39,360
and golang as being the modern and

128
00:04:39,360 --> 00:04:40,720
updated language it is

129
00:04:40,720 --> 00:04:43,199
obviously has to use some open source

130
00:04:43,199 --> 00:04:45,280
and indeed golden uses a lot of open

131
00:04:45,280 --> 00:04:46,320
source packages

132
00:04:46,320 --> 00:04:48,560
now if you write a program in golang

133
00:04:48,560 --> 00:04:49,840
then you'll most probably

134
00:04:49,840 --> 00:04:52,479
want to use some open source packages

135
00:04:52,479 --> 00:04:52,960
because

136
00:04:52,960 --> 00:04:55,120
there are ton of tons of them and they

137
00:04:55,120 --> 00:04:56,320
are very easy to find

138
00:04:56,320 --> 00:04:58,320
actually there are some websites that

139
00:04:58,320 --> 00:04:59,440
are destined only

140
00:04:59,440 --> 00:05:02,000
for this purpose for helping you find

141
00:05:02,000 --> 00:05:03,280
the proper

142
00:05:03,280 --> 00:05:06,560
package for your code now not

143
00:05:06,560 --> 00:05:08,560
again not just you but also the

144
00:05:08,560 --> 00:05:10,320
attackers would use many

145
00:05:10,320 --> 00:05:12,560
packages for the code it saves them a

146
00:05:12,560 --> 00:05:14,240
lot of time and effort

147
00:05:14,240 --> 00:05:16,479
well there's a catch because whenever

148
00:05:16,479 --> 00:05:17,360
you're using

149
00:05:17,360 --> 00:05:20,000
a package in your golan code then the

150
00:05:20,000 --> 00:05:21,680
name of the package appears

151
00:05:21,680 --> 00:05:24,880
in clear text inside of your binary

152
00:05:24,880 --> 00:05:26,800
and whenever you're opening a golang

153
00:05:26,800 --> 00:05:28,400
malware or any golden

154
00:05:28,400 --> 00:05:31,280
binary you could see the entire list of

155
00:05:31,280 --> 00:05:32,639
names of the packages

156
00:05:32,639 --> 00:05:35,680
that were used by the malware well okay

157
00:05:35,680 --> 00:05:37,039
that's fine but

158
00:05:37,039 --> 00:05:39,840
what else

159
00:05:40,560 --> 00:05:44,000
so because golang has so many

160
00:05:44,000 --> 00:05:45,840
different packages because it's open

161
00:05:45,840 --> 00:05:47,759
source and anyone can write their own

162
00:05:47,759 --> 00:05:49,520
packages

163
00:05:49,520 --> 00:05:52,479
then the odds that two malwares or two

164
00:05:52,479 --> 00:05:53,440
any samples

165
00:05:53,440 --> 00:05:55,840
would have the exact same set of

166
00:05:55,840 --> 00:05:56,720
packages

167
00:05:56,720 --> 00:05:58,960
and they won't be related to each other

168
00:05:58,960 --> 00:06:00,240
are very very old

169
00:06:00,240 --> 00:06:03,120
very very small so what we can do with

170
00:06:03,120 --> 00:06:04,160
this information

171
00:06:04,160 --> 00:06:07,039
is we can take our malware get the list

172
00:06:07,039 --> 00:06:08,160
of the packages

173
00:06:08,160 --> 00:06:11,120
which is you know very easy to do and

174
00:06:11,120 --> 00:06:11,600
then

175
00:06:11,600 --> 00:06:14,319
combine a very simple yahoo and sign it

176
00:06:14,319 --> 00:06:16,080
to find some other samples that are

177
00:06:16,080 --> 00:06:16,720
related

178
00:06:16,720 --> 00:06:19,120
to the same attacker again the odds that

179
00:06:19,120 --> 00:06:20,319
we will find

180
00:06:20,319 --> 00:06:22,639
will have a false positive and have a

181
00:06:22,639 --> 00:06:24,319
different sample that's not related at

182
00:06:24,319 --> 00:06:24,720
all

183
00:06:24,720 --> 00:06:27,680
are very very small and this is only

184
00:06:27,680 --> 00:06:28,160
because

185
00:06:28,160 --> 00:06:30,560
golem used packages and it handed us a

186
00:06:30,560 --> 00:06:31,280
weapon

187
00:06:31,280 --> 00:06:35,600
to find some other like it

188
00:06:35,600 --> 00:06:38,400
let's talk about timing well if you are

189
00:06:38,400 --> 00:06:39,120
here

190
00:06:39,120 --> 00:06:42,000
then if you are a malware researcher or

191
00:06:42,000 --> 00:06:42,800
an

192
00:06:42,800 --> 00:06:46,960
ir investigator or maybe apt hunter

193
00:06:46,960 --> 00:06:48,880
then you know that you must have the

194
00:06:48,880 --> 00:06:50,479
timing of your attack which means the

195
00:06:50,479 --> 00:06:51,599
timestamps of

196
00:06:51,599 --> 00:06:54,639
the tools that were used in the attack

197
00:06:54,639 --> 00:06:56,400
timing is very important you need to you

198
00:06:56,400 --> 00:06:58,080
need it um

199
00:06:58,080 --> 00:07:00,080
to understand when did that the attack

200
00:07:00,080 --> 00:07:02,080
happened or to understand the difference

201
00:07:02,080 --> 00:07:03,280
between different tools

202
00:07:03,280 --> 00:07:05,840
or if you're researching a large attack

203
00:07:05,840 --> 00:07:07,520
group then you'll want to understand

204
00:07:07,520 --> 00:07:10,479
what tools came before what and what new

205
00:07:10,479 --> 00:07:12,560
functionality does the malware have

206
00:07:12,560 --> 00:07:15,280
and also the evolution of the group

207
00:07:15,280 --> 00:07:16,000
which results

208
00:07:16,000 --> 00:07:18,080
in the new functionality of the malware

209
00:07:18,080 --> 00:07:19,919
anyway timestamps are

210
00:07:19,919 --> 00:07:22,720
important well if we're dealing with

211
00:07:22,720 --> 00:07:24,160
windows pe files

212
00:07:24,160 --> 00:07:26,720
then this information is mostly easy to

213
00:07:26,720 --> 00:07:28,560
get

214
00:07:28,560 --> 00:07:30,400
we actually have this information inside

215
00:07:30,400 --> 00:07:32,319
of the p structure you just go

216
00:07:32,319 --> 00:07:34,000
as you can see this is one example

217
00:07:34,000 --> 00:07:35,840
obviously you can go to the empty

218
00:07:35,840 --> 00:07:37,039
headers and the

219
00:07:37,039 --> 00:07:39,280
image file header then there is a small

220
00:07:39,280 --> 00:07:40,720
field but useful

221
00:07:40,720 --> 00:07:43,759
which results in the timestamp it's very

222
00:07:43,759 --> 00:07:44,000
easy

223
00:07:44,000 --> 00:07:46,080
to just open yourself the file and get

224
00:07:46,080 --> 00:07:48,000
this information and also you can use

225
00:07:48,000 --> 00:07:51,039
one of the um any windows tool

226
00:07:51,039 --> 00:07:54,080
you like such as a pe explorer and

227
00:07:54,080 --> 00:07:57,120
cff explorer any other well that's fine

228
00:07:57,120 --> 00:08:00,560
but what about linux file

229
00:08:00,560 --> 00:08:02,240
as you all know with the increasing

230
00:08:02,240 --> 00:08:03,599
usage of

231
00:08:03,599 --> 00:08:06,400
cloud servers today so is increasing

232
00:08:06,400 --> 00:08:07,360
usage of

233
00:08:07,360 --> 00:08:10,319
linux malwares then we as defenders as

234
00:08:10,319 --> 00:08:11,599
malware researchers

235
00:08:11,599 --> 00:08:13,919
we need to have the same set of tools

236
00:08:13,919 --> 00:08:15,199
that we have for

237
00:08:15,199 --> 00:08:18,319
researching windows for linux well there

238
00:08:18,319 --> 00:08:19,520
is a small in

239
00:08:19,520 --> 00:08:22,960
problem that linux files elf files do

240
00:08:22,960 --> 00:08:23,759
not contain

241
00:08:23,759 --> 00:08:26,479
the compilation time stamps in them some

242
00:08:26,479 --> 00:08:28,400
of the compilers actually do but not all

243
00:08:28,400 --> 00:08:29,199
of them

244
00:08:29,199 --> 00:08:32,159
well we need that information that's

245
00:08:32,159 --> 00:08:35,599
where actually golan come in help

246
00:08:35,599 --> 00:08:37,760
so let's go back we said that golan

247
00:08:37,760 --> 00:08:39,839
contains some packages now if we take a

248
00:08:39,839 --> 00:08:41,360
good look at those packages and we'll

249
00:08:41,360 --> 00:08:42,640
search them in github

250
00:08:42,640 --> 00:08:45,040
then we can see that most packages have

251
00:08:45,040 --> 00:08:46,720
different releases

252
00:08:46,720 --> 00:08:48,560
well that makes sense because you know

253
00:08:48,560 --> 00:08:50,480
whenever you're uploading your code to

254
00:08:50,480 --> 00:08:51,760
github then you'll probably

255
00:08:51,760 --> 00:08:55,440
want to update it from now and then so

256
00:08:55,440 --> 00:08:57,600
every package almost have different

257
00:08:57,600 --> 00:08:59,760
releases and each of these releases

258
00:08:59,760 --> 00:09:02,560
has its own release date so this is a

259
00:09:02,560 --> 00:09:04,320
date we can use

260
00:09:04,320 --> 00:09:06,480
if we can understand what release of the

261
00:09:06,480 --> 00:09:08,240
package was used in our malware

262
00:09:08,240 --> 00:09:10,480
then we can get the release date which

263
00:09:10,480 --> 00:09:11,839
is a minimum date

264
00:09:11,839 --> 00:09:14,480
for our malware to be compiled because

265
00:09:14,480 --> 00:09:15,760
obviously we can't use a

266
00:09:15,760 --> 00:09:18,959
release version that wasn't released yet

267
00:09:18,959 --> 00:09:21,600
well that's great but we said that i can

268
00:09:21,600 --> 00:09:22,560
understand

269
00:09:22,560 --> 00:09:24,959
the package that was used how can i get

270
00:09:24,959 --> 00:09:26,800
the exact release

271
00:09:26,800 --> 00:09:29,120
let's think about it i can you know

272
00:09:29,120 --> 00:09:30,959
search for a string that tells me hi i'm

273
00:09:30,959 --> 00:09:32,080
release

274
00:09:32,080 --> 00:09:35,040
and the on but uh that's not a very good

275
00:09:35,040 --> 00:09:36,640
idea

276
00:09:36,640 --> 00:09:39,040
so what other differences are there

277
00:09:39,040 --> 00:09:40,720
between different releases of the same

278
00:09:40,720 --> 00:09:42,160
package

279
00:09:42,160 --> 00:09:44,959
that's right there are functions because

280
00:09:44,959 --> 00:09:46,399
obviously when you're up

281
00:09:46,399 --> 00:09:48,160
updating your code then you'll add some

282
00:09:48,160 --> 00:09:50,000
more functionality therefore some new

283
00:09:50,000 --> 00:09:53,120
functions so all we have to do now is

284
00:09:53,120 --> 00:09:53,440
get

285
00:09:53,440 --> 00:09:55,600
the list of the functions of the package

286
00:09:55,600 --> 00:09:57,760
from our malware

287
00:09:57,760 --> 00:09:59,600
and again because gorang is statically

288
00:09:59,600 --> 00:10:01,920
linked then we have this information

289
00:10:01,920 --> 00:10:04,640
and compare this list of functions

290
00:10:04,640 --> 00:10:06,480
against the different releases of the

291
00:10:06,480 --> 00:10:07,279
package

292
00:10:07,279 --> 00:10:10,079
and then we can see that some of the

293
00:10:10,079 --> 00:10:10,560
pack

294
00:10:10,560 --> 00:10:13,040
of the functions was were added in the

295
00:10:13,040 --> 00:10:14,160
second release

296
00:10:14,160 --> 00:10:16,959
so we understand that the release date

297
00:10:16,959 --> 00:10:18,000
of this release is

298
00:10:18,000 --> 00:10:21,200
a minimum date for our malware all we

299
00:10:21,200 --> 00:10:22,240
have to do now

300
00:10:22,240 --> 00:10:25,040
is do the same process for each of the

301
00:10:25,040 --> 00:10:27,760
packages that is used in our malware

302
00:10:27,760 --> 00:10:30,720
and then combine this beautiful table up

303
00:10:30,720 --> 00:10:31,519
here

304
00:10:31,519 --> 00:10:33,200
and then all we have to do is just get

305
00:10:33,200 --> 00:10:35,360
the latest of those dates

306
00:10:35,360 --> 00:10:38,480
and this is the possible earliest

307
00:10:38,480 --> 00:10:40,480
possible date for our malware

308
00:10:40,480 --> 00:10:42,240
and this is information that golang

309
00:10:42,240 --> 00:10:43,600
helped us to get

310
00:10:43,600 --> 00:10:46,000
because in other language we wouldn't be

311
00:10:46,000 --> 00:10:47,760
able to get this information for a linux

312
00:10:47,760 --> 00:10:50,480
elf file

313
00:10:50,720 --> 00:10:54,000
now let me tell you a story once upon a

314
00:10:54,000 --> 00:10:54,480
time

315
00:10:54,480 --> 00:10:57,519
in a one bright shiny day i came into my

316
00:10:57,519 --> 00:10:59,519
office i put my bag in my seat i went to

317
00:10:59,519 --> 00:11:00,000
the kitchen

318
00:11:00,000 --> 00:11:02,720
made some cup of coffee said hi to my

319
00:11:02,720 --> 00:11:03,680
friends

320
00:11:03,680 --> 00:11:07,920
then i sat down opened my pc opened the

321
00:11:07,920 --> 00:11:11,360
findings i have from yesterday uploaded

322
00:11:11,360 --> 00:11:11,760
the

323
00:11:11,760 --> 00:11:14,959
idb back then i was researching a golden

324
00:11:14,959 --> 00:11:15,760
malware named

325
00:11:15,760 --> 00:11:18,959
kim singh now

326
00:11:18,959 --> 00:11:21,040
back then i already had some good idea

327
00:11:21,040 --> 00:11:22,720
what's going on i had some

328
00:11:22,720 --> 00:11:25,440
pretty nice findings so i was kind of

329
00:11:25,440 --> 00:11:26,320
kind of cool

330
00:11:26,320 --> 00:11:27,839
but then i wanted to make sure that i

331
00:11:27,839 --> 00:11:29,600
didn't miss anything important

332
00:11:29,600 --> 00:11:32,640
so i opened this twins window in ida and

333
00:11:32,640 --> 00:11:33,279
then

334
00:11:33,279 --> 00:11:36,240
a strange and long string just popped up

335
00:11:36,240 --> 00:11:36,800
to me

336
00:11:36,800 --> 00:11:40,839
and caught up my eye and that was this

337
00:11:40,839 --> 00:11:43,360
string

338
00:11:43,360 --> 00:11:46,399
now for any of you who doesn't recognize

339
00:11:46,399 --> 00:11:49,360
this is a line from the hamlet play

340
00:11:49,360 --> 00:11:51,440
which was written by the great almighty

341
00:11:51,440 --> 00:11:53,279
shakespeare

342
00:11:53,279 --> 00:11:56,560
well this is kind of strange so i

343
00:11:56,560 --> 00:11:58,959
tracked the offset of this line and then

344
00:11:58,959 --> 00:11:59,920
i found

345
00:11:59,920 --> 00:12:04,560
this which is the entire text of hamlet

346
00:12:04,560 --> 00:12:07,680
play inside of kinsling malware

347
00:12:07,680 --> 00:12:09,680
and this is kind of how i looked when i

348
00:12:09,680 --> 00:12:11,680
saw it

349
00:12:11,680 --> 00:12:13,680
well after laughing about it and joking

350
00:12:13,680 --> 00:12:15,279
about it with my friends i started

351
00:12:15,279 --> 00:12:18,160
thinking okay why what does it do though

352
00:12:18,160 --> 00:12:18,560
and

353
00:12:18,560 --> 00:12:22,000
i started digging in and i saw some

354
00:12:22,000 --> 00:12:24,720
researchers from other companies who

355
00:12:24,720 --> 00:12:26,800
have already seen this evidence

356
00:12:26,800 --> 00:12:29,440
and most of them were like okay so it's

357
00:12:29,440 --> 00:12:31,600
probably um maybe to increase the size

358
00:12:31,600 --> 00:12:32,880
of the file or

359
00:12:32,880 --> 00:12:35,200
to make investigate all things it's i

360
00:12:35,200 --> 00:12:37,200
don't know a hamlet play inside an

361
00:12:37,200 --> 00:12:40,320
i i don't know anyway arden said

362
00:12:40,320 --> 00:12:42,480
that the purpose of hamlet being in

363
00:12:42,480 --> 00:12:44,560
kensington malware is to hide the

364
00:12:44,560 --> 00:12:46,480
malware the fact that it's the malware

365
00:12:46,480 --> 00:12:48,560
or the malware functionality

366
00:12:48,560 --> 00:12:50,720
well that didn't make so much sense to

367
00:12:50,720 --> 00:12:52,240
me because there are so

368
00:12:52,240 --> 00:12:55,040
many way better ways to hide your

369
00:12:55,040 --> 00:12:57,279
malware

370
00:12:57,279 --> 00:12:58,880
so i kept thinking and actually i came

371
00:12:58,880 --> 00:13:01,680
up with a different idea

372
00:13:01,680 --> 00:13:04,160
now let's take a quick break please

373
00:13:04,160 --> 00:13:05,360
raise up your hand

374
00:13:05,360 --> 00:13:08,399
any of you who's ever downloaded an open

375
00:13:08,399 --> 00:13:08,880
source

376
00:13:08,880 --> 00:13:11,440
tool and run it in your computer it can

377
00:13:11,440 --> 00:13:13,760
be any script it could be any python

378
00:13:13,760 --> 00:13:14,880
tool any whatever

379
00:13:14,880 --> 00:13:17,120
including me actually great thank you

380
00:13:17,120 --> 00:13:19,279
very much now please keep your hand

381
00:13:19,279 --> 00:13:22,480
up if whenever you're doing that

382
00:13:22,480 --> 00:13:24,160
you're checking the code that you're

383
00:13:24,160 --> 00:13:26,399
downloading and making sure that it does

384
00:13:26,399 --> 00:13:27,920
just what you think it does and only

385
00:13:27,920 --> 00:13:30,719
what you think it does

386
00:13:31,920 --> 00:13:34,560
really i would like to talk with you

387
00:13:34,560 --> 00:13:36,160
afterwards

388
00:13:36,160 --> 00:13:39,839
anyway most of us don't i

389
00:13:39,839 --> 00:13:42,800
specifically don't everyone i know

390
00:13:42,800 --> 00:13:43,839
doesn't

391
00:13:43,839 --> 00:13:47,199
so let me tell you something

392
00:13:47,199 --> 00:13:51,680
no one ever checks the source code

393
00:13:51,680 --> 00:13:54,240
no one i've never met anyone if i would

394
00:13:54,240 --> 00:13:55,360
like to speak with you and

395
00:13:55,360 --> 00:13:58,240
with everyone who does well it's not

396
00:13:58,240 --> 00:13:58,800
just

397
00:13:58,800 --> 00:14:01,760
you guys and me it's also the attackers

398
00:14:01,760 --> 00:14:02,240
who

399
00:14:02,240 --> 00:14:05,680
writes the malware so

400
00:14:05,680 --> 00:14:08,560
when i kept researching and digging in i

401
00:14:08,560 --> 00:14:10,560
saw that there is a code that's actually

402
00:14:10,560 --> 00:14:12,720
referencing this hamlet play

403
00:14:12,720 --> 00:14:14,720
so i went to this code and i tried to

404
00:14:14,720 --> 00:14:16,000
figure out okay what

405
00:14:16,000 --> 00:14:18,560
and you can see this the snippet from

406
00:14:18,560 --> 00:14:19,839
ida right here

407
00:14:19,839 --> 00:14:23,120
but that code isn't of the program

408
00:14:23,120 --> 00:14:24,880
itself it actually of one of the

409
00:14:24,880 --> 00:14:26,480
packages that is used

410
00:14:26,480 --> 00:14:29,199
in the malware and when i went on and i

411
00:14:29,199 --> 00:14:30,000
tried to

412
00:14:30,000 --> 00:14:32,079
understand the package and and like what

413
00:14:32,079 --> 00:14:33,839
the hell um

414
00:14:33,839 --> 00:14:36,000
i went to the packaging in github and

415
00:14:36,000 --> 00:14:37,760
then i saw this

416
00:14:37,760 --> 00:14:41,199
the package that is used in the malware

417
00:14:41,199 --> 00:14:44,959
is packager packet which is written

418
00:14:44,959 --> 00:14:48,000
by mark bates now look at its path we

419
00:14:48,000 --> 00:14:48,639
can see that

420
00:14:48,639 --> 00:14:50,639
inside of the mall of the packager

421
00:14:50,639 --> 00:14:52,399
package you can see that

422
00:14:52,399 --> 00:14:55,040
there is another github package which

423
00:14:55,040 --> 00:14:56,079
was written

424
00:14:56,079 --> 00:14:59,600
also by mark bates which is named hepa

425
00:14:59,600 --> 00:15:01,600
now this is not a normal path of a

426
00:15:01,600 --> 00:15:03,360
package in github

427
00:15:03,360 --> 00:15:05,040
now let's look at the code this is the

428
00:15:05,040 --> 00:15:06,959
code from the hepa package now you'll

429
00:15:06,959 --> 00:15:07,440
have to

430
00:15:07,440 --> 00:15:09,760
excuse me for not put in here um the

431
00:15:09,760 --> 00:15:12,320
entire code of it it's kind of long

432
00:15:12,320 --> 00:15:15,600
but come and trust me about that

433
00:15:15,600 --> 00:15:17,360
this is the code from hepa and what it

434
00:15:17,360 --> 00:15:19,279
does is simple

435
00:15:19,279 --> 00:15:22,399
let's say uh for a hypothetical scenario

436
00:15:22,399 --> 00:15:25,120
that you have written a very cool script

437
00:15:25,120 --> 00:15:25,440
for

438
00:15:25,440 --> 00:15:28,800
let's say maintenance your aws servers

439
00:15:28,800 --> 00:15:31,759
or azure resources well you have your

440
00:15:31,759 --> 00:15:33,120
script and it's cool

441
00:15:33,120 --> 00:15:34,800
and it's doing what it's supposed to do

442
00:15:34,800 --> 00:15:37,199
but you need to enter your credentials

443
00:15:37,199 --> 00:15:39,120
into it because when you want to access

444
00:15:39,120 --> 00:15:39,440
your

445
00:15:39,440 --> 00:15:41,759
remote resources you obviously need to

446
00:15:41,759 --> 00:15:42,800
authenticate

447
00:15:42,800 --> 00:15:44,800
now those credentials might be a

448
00:15:44,800 --> 00:15:46,160
password they can be

449
00:15:46,160 --> 00:15:49,519
a token anything you'd like but it

450
00:15:49,519 --> 00:15:51,839
it is probably hard coded in your script

451
00:15:51,839 --> 00:15:53,440
now let's say you want to share your

452
00:15:53,440 --> 00:15:54,959
awesome script with the rest of the

453
00:15:54,959 --> 00:15:56,480
world and you want to upload your script

454
00:15:56,480 --> 00:15:57,040
to

455
00:15:57,040 --> 00:15:59,360
github or any other website well then

456
00:15:59,360 --> 00:16:01,519
you'll have to go line by line and make

457
00:16:01,519 --> 00:16:03,199
sure that you didn't forget any of your

458
00:16:03,199 --> 00:16:03,920
passwords

459
00:16:03,920 --> 00:16:07,279
in it now what hepa package does it's

460
00:16:07,279 --> 00:16:09,040
kind of cool actually

461
00:16:09,040 --> 00:16:12,240
um it's look through your

462
00:16:12,240 --> 00:16:13,680
code and make sure that you didn't

463
00:16:13,680 --> 00:16:15,680
forget any password there it looks for

464
00:16:15,680 --> 00:16:16,240
strings

465
00:16:16,240 --> 00:16:19,040
that looks like uh password or

466
00:16:19,040 --> 00:16:21,519
credentials or token or username or any

467
00:16:21,519 --> 00:16:22,399
of that

468
00:16:22,399 --> 00:16:25,519
and then it replaces your password with

469
00:16:25,519 --> 00:16:26,800
a random phrase

470
00:16:26,800 --> 00:16:29,680
from hamlet think about how cool it is

471
00:16:29,680 --> 00:16:30,720
when you're downloading

472
00:16:30,720 --> 00:16:33,120
a square that's meant for aws servers

473
00:16:33,120 --> 00:16:35,040
and then you find like to be or not to

474
00:16:35,040 --> 00:16:36,560
be inside of the script

475
00:16:36,560 --> 00:16:39,040
kind of cool the next question you're

476
00:16:39,040 --> 00:16:40,079
going to ask me is

477
00:16:40,079 --> 00:16:42,560
okay cool but why would a malware use it

478
00:16:42,560 --> 00:16:43,759
that's a great question

479
00:16:43,759 --> 00:16:47,120
thank you but actually it doesn't

480
00:16:47,120 --> 00:16:49,360
well the kinseng malware as we said

481
00:16:49,360 --> 00:16:50,320
doesn't use

482
00:16:50,320 --> 00:16:52,639
this code this code is just a part of

483
00:16:52,639 --> 00:16:53,519
the package

484
00:16:53,519 --> 00:16:56,320
and let's go back we said that here we

485
00:16:56,320 --> 00:16:57,120
have the hep

486
00:16:57,120 --> 00:17:00,240
package inside of the packager package

487
00:17:00,240 --> 00:17:02,800
well this is a mistake and i know that

488
00:17:02,800 --> 00:17:03,360
because

489
00:17:03,360 --> 00:17:06,079
no other version of the packager package

490
00:17:06,079 --> 00:17:07,679
contains the helper package

491
00:17:07,679 --> 00:17:09,760
and only a few days after this release

492
00:17:09,760 --> 00:17:10,880
was released

493
00:17:10,880 --> 00:17:13,199
mark bates released a new release a new

494
00:17:13,199 --> 00:17:14,240
version of the code

495
00:17:14,240 --> 00:17:17,439
which does not include the hepa package

496
00:17:17,439 --> 00:17:19,919
so what happens i guess is that when

497
00:17:19,919 --> 00:17:21,919
mark bates programmed the packager

498
00:17:21,919 --> 00:17:22,720
package

499
00:17:22,720 --> 00:17:25,919
by mistake he had the also the helper

500
00:17:25,919 --> 00:17:26,480
package

501
00:17:26,480 --> 00:17:28,960
in of its inside of its repository and

502
00:17:28,960 --> 00:17:30,480
then he helped he uploaded them

503
00:17:30,480 --> 00:17:33,520
both and bad luck but

504
00:17:33,520 --> 00:17:36,720
when the kinsen malware also

505
00:17:36,720 --> 00:17:39,919
downloaded the packager package he also

506
00:17:39,919 --> 00:17:41,919
downloaded the heavy package and without

507
00:17:41,919 --> 00:17:42,799
knowing it

508
00:17:42,799 --> 00:17:46,000
inserted it into the malware so

509
00:17:46,000 --> 00:17:48,400
until now it's a it's a fun story right

510
00:17:48,400 --> 00:17:49,039
like

511
00:17:49,039 --> 00:17:52,240
the malware also by accident inserted

512
00:17:52,240 --> 00:17:55,840
some uh full play into its malware

513
00:17:55,840 --> 00:17:58,640
but what can we do with it with this

514
00:17:58,640 --> 00:18:00,240
except for making love

515
00:18:00,240 --> 00:18:03,679
and fun with friends let's think about

516
00:18:03,679 --> 00:18:03,919
it

517
00:18:03,919 --> 00:18:07,200
well that i now i know that um

518
00:18:07,200 --> 00:18:08,880
the model contains the harmless play

519
00:18:08,880 --> 00:18:11,280
right so i can get some yahoos and

520
00:18:11,280 --> 00:18:12,960
they're actually very simple yaraull i

521
00:18:12,960 --> 00:18:15,440
can get a yarrow that contains

522
00:18:15,440 --> 00:18:18,559
some of the hamlet text and then try to

523
00:18:18,559 --> 00:18:21,679
search for some other samples related

524
00:18:21,679 --> 00:18:23,919
well believe it or not it's working and

525
00:18:23,919 --> 00:18:25,039
i got like

526
00:18:25,039 --> 00:18:28,160
30 more samples of kinsing just with

527
00:18:28,160 --> 00:18:28,559
this

528
00:18:28,559 --> 00:18:30,320
uh signature but now you're going to

529
00:18:30,320 --> 00:18:32,480
tell me wait but in the beginning of

530
00:18:32,480 --> 00:18:34,320
this lecture you said let's use

531
00:18:34,320 --> 00:18:36,960
the packages for signing so why use also

532
00:18:36,960 --> 00:18:37,520
hamlet

533
00:18:37,520 --> 00:18:40,880
well you write again thanks so this is

534
00:18:40,880 --> 00:18:42,480
not very interesting because we have

535
00:18:42,480 --> 00:18:45,039
better urls what else

536
00:18:45,039 --> 00:18:47,360
let's think about it we know that the

537
00:18:47,360 --> 00:18:48,480
author of the malware

538
00:18:48,480 --> 00:18:51,600
doesn't check the code that they are

539
00:18:51,600 --> 00:18:54,880
using inside of the malware well it

540
00:18:54,880 --> 00:18:55,360
means

541
00:18:55,360 --> 00:18:58,400
that we can put there any code we'd like

542
00:18:58,400 --> 00:19:00,640
and it would run inside of the malware

543
00:19:00,640 --> 00:19:01,919
let's say we have a

544
00:19:01,919 --> 00:19:04,000
package that does something and the

545
00:19:04,000 --> 00:19:05,760
malware wants to use this package but

546
00:19:05,760 --> 00:19:06,799
then

547
00:19:06,799 --> 00:19:08,720
the code in the mail in the package

548
00:19:08,720 --> 00:19:10,000
actually does something

549
00:19:10,000 --> 00:19:13,280
else well i can't expose here what we

550
00:19:13,280 --> 00:19:14,960
did or didn't do with this information

551
00:19:14,960 --> 00:19:16,320
in cyber clubs

552
00:19:16,320 --> 00:19:18,160
but i think you can imagine it for

553
00:19:18,160 --> 00:19:19,360
yourself and

554
00:19:19,360 --> 00:19:21,440
you can think by yourself of the

555
00:19:21,440 --> 00:19:23,360
enormous world of possibilities that

556
00:19:23,360 --> 00:19:26,479
just opened up to us

557
00:19:26,960 --> 00:19:30,080
so we've talked about the packages

558
00:19:30,080 --> 00:19:32,880
in the golang malwa that helps us to

559
00:19:32,880 --> 00:19:33,520
sign it

560
00:19:33,520 --> 00:19:35,360
very quickly and very easily we've

561
00:19:35,360 --> 00:19:36,880
talked about the

562
00:19:36,880 --> 00:19:39,120
timestamps issues that go on actually

563
00:19:39,120 --> 00:19:40,799
helps us to get the timestamp of a

564
00:19:40,799 --> 00:19:41,520
malware

565
00:19:41,520 --> 00:19:44,480
even if the file itself doesn't contain

566
00:19:44,480 --> 00:19:44,960
it

567
00:19:44,960 --> 00:19:47,760
and we've also talked about the huge

568
00:19:47,760 --> 00:19:48,799
world of

569
00:19:48,799 --> 00:19:50,320
people who doesn't check the code that

570
00:19:50,320 --> 00:19:52,240
they're running including the malware

571
00:19:52,240 --> 00:19:53,919
authors

572
00:19:53,919 --> 00:19:55,600
so i'm not going to tell you if you

573
00:19:55,600 --> 00:19:57,840
should write your malware with golang or

574
00:19:57,840 --> 00:19:58,400
not

575
00:19:58,400 --> 00:20:01,919
that's all up to you but

576
00:20:01,919 --> 00:20:05,200
if you do make sure you're not making

577
00:20:05,200 --> 00:20:06,000
the life of

578
00:20:06,000 --> 00:20:09,039
who's ever hunting you much easier

579
00:20:09,039 --> 00:20:18,720
thank you very much

