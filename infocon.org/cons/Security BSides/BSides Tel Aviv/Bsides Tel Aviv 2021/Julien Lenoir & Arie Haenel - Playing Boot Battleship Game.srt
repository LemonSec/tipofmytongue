1
00:00:00,880 --> 00:00:04,319
arya yes okay i'd like to invite

2
00:00:04,319 --> 00:00:09,280
arya henner to the stage and

3
00:00:09,280 --> 00:00:11,599
arya is a fantastic security

4
00:00:11,599 --> 00:00:13,759
professional researcher at intel

5
00:00:13,759 --> 00:00:15,920
that's right by the way my sister also

6
00:00:15,920 --> 00:00:16,880
works at intel

7
00:00:16,880 --> 00:00:19,039
but that's not what i am why arya is

8
00:00:19,039 --> 00:00:20,720
here arya has been speaking and

9
00:00:20,720 --> 00:00:21,600
contributing

10
00:00:21,600 --> 00:00:23,840
to b-sides and other events a lot of the

11
00:00:23,840 --> 00:00:25,680
time i think last time i hung out with

12
00:00:25,680 --> 00:00:27,760
you it was the blue hat conference

13
00:00:27,760 --> 00:00:30,240
maybe two years ago so thank you so much

14
00:00:30,240 --> 00:00:32,479
for coming to the b-side tel aviv stage

15
00:00:32,479 --> 00:00:35,520
and arya is not alone he actually has a

16
00:00:35,520 --> 00:00:36,800
co-speaker

17
00:00:36,800 --> 00:00:40,399
so this is julienne bonjour julian

18
00:00:40,399 --> 00:00:43,280
bravo merci thank you so much for

19
00:00:43,280 --> 00:00:44,160
joining us

20
00:00:44,160 --> 00:00:46,160
and julian is also a researcher with

21
00:00:46,160 --> 00:00:47,840
intel he's with intel

22
00:00:47,840 --> 00:00:51,520
ipass did i get that right intel ipass

23
00:00:51,520 --> 00:00:53,600
and i enter ipas is intel product

24
00:00:53,600 --> 00:00:55,680
security team intel has been a long time

25
00:00:55,680 --> 00:00:58,320
sponsor of v6 so thank you but this is a

26
00:00:58,320 --> 00:01:00,239
talk that stands on its own

27
00:01:00,239 --> 00:01:02,879
and thank you we also have a clicker for

28
00:01:02,879 --> 00:01:03,280
arya

29
00:01:03,280 --> 00:01:04,640
i just want to tell you one more fact

30
00:01:04,640 --> 00:01:06,479
about julienne maybe you can guess it

31
00:01:06,479 --> 00:01:07,680
from his background

32
00:01:07,680 --> 00:01:11,040
he likes wine tasting ooh

33
00:01:11,040 --> 00:01:13,840
very fancy here in tel aviv we can offer

34
00:01:13,840 --> 00:01:14,479
you

35
00:01:14,479 --> 00:01:18,799
gin vodka beer whiskey we don't have

36
00:01:18,799 --> 00:01:22,400
what whatever he said

37
00:01:22,400 --> 00:01:25,840
and malbec okay and now

38
00:01:25,840 --> 00:01:28,960
let's give a nice warm giggly afternoon

39
00:01:28,960 --> 00:01:33,360
humoristic welcome to arya and julianne

40
00:01:33,360 --> 00:01:35,360
thank you so much uh you went to the

41
00:01:35,360 --> 00:01:36,960
last slide you have to go back

42
00:01:36,960 --> 00:01:41,360
the red one okay you're good

43
00:01:41,360 --> 00:01:44,000
very interesting our slides are reverse

44
00:01:44,000 --> 00:01:45,360
engineering themselves

45
00:01:45,360 --> 00:01:48,960
it's very interesting phenomena

46
00:01:48,960 --> 00:01:52,000
okay euler alert

47
00:01:52,320 --> 00:01:55,600
f5 please

48
00:01:55,600 --> 00:01:58,000
thank you

49
00:02:00,560 --> 00:02:04,799
hi julia hi

50
00:02:05,439 --> 00:02:08,800
so let's start

51
00:02:08,800 --> 00:02:12,560
well let's start it

52
00:02:14,400 --> 00:02:17,440
i like this little computer yes this

53
00:02:17,440 --> 00:02:19,360
badge is run by a microcontroller

54
00:02:19,360 --> 00:02:21,520
it's a small computer with a processor

55
00:02:21,520 --> 00:02:22,879
core memory

56
00:02:22,879 --> 00:02:26,000
timers i o flash well

57
00:02:26,000 --> 00:02:29,120
even a display what's happening when i

58
00:02:29,120 --> 00:02:30,080
turn it on

59
00:02:30,080 --> 00:02:33,519
how is it different from more evolved

60
00:02:33,519 --> 00:02:36,959
embedded systems how

61
00:02:36,959 --> 00:02:38,560
and where this understanding is

62
00:02:38,560 --> 00:02:40,319
essential for us

63
00:02:40,319 --> 00:02:42,800
for you to assure the security of such

64
00:02:42,800 --> 00:02:44,400
systems

65
00:02:44,400 --> 00:02:45,760
that's actually what we are going to

66
00:02:45,760 --> 00:02:47,680
discuss today but first let's present

67
00:02:47,680 --> 00:02:49,680
ourselves

68
00:02:49,680 --> 00:02:52,000
so my name is arianel i'm a principal

69
00:02:52,000 --> 00:02:54,560
engineer at intel and i'm leading

70
00:02:54,560 --> 00:02:56,959
an amazing offensive security research

71
00:02:56,959 --> 00:02:58,239
team

72
00:02:58,239 --> 00:03:00,959
i have little more than 23 years of

73
00:03:00,959 --> 00:03:02,879
professional experience in software and

74
00:03:02,879 --> 00:03:04,800
security engineering

75
00:03:04,800 --> 00:03:06,879
and on my free time i'm a lecturer at

76
00:03:06,879 --> 00:03:08,879
the jerusalem college of technology

77
00:03:08,879 --> 00:03:11,440
hi guys

78
00:03:14,239 --> 00:03:17,599
and hello i'm julian noir i'm also a

79
00:03:17,599 --> 00:03:20,480
security researcher at intel i have more

80
00:03:20,480 --> 00:03:21,519
than 10 years of

81
00:03:21,519 --> 00:03:25,360
experience in vulnerability research

82
00:03:25,360 --> 00:03:28,480
i do purchasing reverse engineering

83
00:03:28,480 --> 00:03:31,120
exploitation and

84
00:03:31,120 --> 00:03:34,080
all these kind of uh funny things and uh

85
00:03:34,080 --> 00:03:35,840
talking about funny things are you shall

86
00:03:35,840 --> 00:03:38,000
we play a game today

87
00:03:38,000 --> 00:03:40,799
yes of course julia yeah during our

88
00:03:40,799 --> 00:03:43,040
coffee breaks we sometimes

89
00:03:43,040 --> 00:03:46,400
play ctf's thank you hi jc

90
00:03:46,400 --> 00:03:49,040
jctf

91
00:03:50,400 --> 00:03:52,400
but the ctf is finished so we need a new

92
00:03:52,400 --> 00:03:53,840
game so

93
00:03:53,840 --> 00:03:56,720
for today julia i propose that we play a

94
00:03:56,720 --> 00:03:58,319
battleship war

95
00:03:58,319 --> 00:04:00,159
and we know that there's no better way

96
00:04:00,159 --> 00:04:03,360
to learn than playing a game

97
00:04:03,360 --> 00:04:05,680
so the agenda for today we'll discuss

98
00:04:05,680 --> 00:04:07,280
first boot sequences

99
00:04:07,280 --> 00:04:09,840
from the most basic to more evolved ones

100
00:04:09,840 --> 00:04:10,959
then we'll present

101
00:04:10,959 --> 00:04:13,519
you boot the hub bootloader and finally

102
00:04:13,519 --> 00:04:14,319
we present

103
00:04:14,319 --> 00:04:17,358
some new original attacks

104
00:04:17,358 --> 00:04:21,040
so back to our badge how does it start

105
00:04:21,040 --> 00:04:23,120
well at the beginning of the interrupt

106
00:04:23,120 --> 00:04:24,479
vector of the table

107
00:04:24,479 --> 00:04:26,800
is found the reset vector well it's a

108
00:04:26,800 --> 00:04:28,960
fancy name for just an address

109
00:04:28,960 --> 00:04:30,560
which will point to the first

110
00:04:30,560 --> 00:04:32,400
instruction to fetch and from there the

111
00:04:32,400 --> 00:04:34,000
processor will

112
00:04:34,000 --> 00:04:36,880
actually execute some code in the case

113
00:04:36,880 --> 00:04:38,320
of our little badge

114
00:04:38,320 --> 00:04:39,919
this will point to the beginning of the

115
00:04:39,919 --> 00:04:42,160
spy flash memory

116
00:04:42,160 --> 00:04:45,440
for our battleship game well i would say

117
00:04:45,440 --> 00:04:47,759
it's a raft there's no security there's

118
00:04:47,759 --> 00:04:50,479
nothing interesting to sing here

119
00:04:50,479 --> 00:04:53,520
so it's a really rudimentary game

120
00:04:53,520 --> 00:04:56,960
a good sequence but it's very very

121
00:04:56,960 --> 00:04:57,680
effective

122
00:04:57,680 --> 00:05:00,080
there absolutely no delay from the

123
00:05:00,080 --> 00:05:01,600
moment we start it

124
00:05:01,600 --> 00:05:04,800
well it runs this application but of

125
00:05:04,800 --> 00:05:06,320
course it has some limitations for

126
00:05:06,320 --> 00:05:07,759
example it can be difficult

127
00:05:07,759 --> 00:05:10,320
or sometimes even almost impossible to

128
00:05:10,320 --> 00:05:11,120
update

129
00:05:11,120 --> 00:05:13,759
the image and that brings us to our

130
00:05:13,759 --> 00:05:16,160
second model

131
00:05:16,160 --> 00:05:19,600
so here is our patrol boat

132
00:05:19,600 --> 00:05:21,120
now we added a stage in the boot

133
00:05:21,120 --> 00:05:23,919
sequence there is a bootloader

134
00:05:23,919 --> 00:05:25,840
that is running at the beginning of the

135
00:05:25,840 --> 00:05:27,680
execution flow

136
00:05:27,680 --> 00:05:29,280
it is used for example in the case of

137
00:05:29,280 --> 00:05:31,280
the arduino-like

138
00:05:31,280 --> 00:05:34,479
platform all the families or others like

139
00:05:34,479 --> 00:05:37,759
the tiva launchpad here on the slide

140
00:05:37,759 --> 00:05:40,800
update the main image easily so serial

141
00:05:40,800 --> 00:05:42,400
or usb

142
00:05:42,400 --> 00:05:44,880
in the case of in this case the

143
00:05:44,880 --> 00:05:45,680
bootloader

144
00:05:45,680 --> 00:05:48,240
is just a spill a small piece of

145
00:05:48,240 --> 00:05:49,199
software

146
00:05:49,199 --> 00:05:51,120
which resides in a part of the flash

147
00:05:51,120 --> 00:05:52,800
usually at the beginning but doesn't

148
00:05:52,800 --> 00:05:53,680
have to

149
00:05:53,680 --> 00:05:57,840
and the flash of the microcontroller

150
00:05:57,840 --> 00:05:59,680
it can write the application the rest of

151
00:05:59,680 --> 00:06:01,120
the application

152
00:06:01,120 --> 00:06:03,280
directly without using any other device

153
00:06:03,280 --> 00:06:05,280
like debugger programmer

154
00:06:05,280 --> 00:06:07,600
and this is really convenient since

155
00:06:07,600 --> 00:06:09,680
changing directly the flash memory

156
00:06:09,680 --> 00:06:12,000
would require extra interface and extra

157
00:06:12,000 --> 00:06:14,240
wiring

158
00:06:14,240 --> 00:06:16,080
but of course this says some bad

159
00:06:16,080 --> 00:06:17,440
influence on our

160
00:06:17,440 --> 00:06:21,199
boot time since we have some more code

161
00:06:21,199 --> 00:06:22,160
that is running

162
00:06:22,160 --> 00:06:24,560
before the main application sometimes it

163
00:06:24,560 --> 00:06:25,840
can be even

164
00:06:25,840 --> 00:06:28,080
a long time some device takes a few

165
00:06:28,080 --> 00:06:30,080
seconds to load

166
00:06:30,080 --> 00:06:34,080
and we still lack any kind of security

167
00:06:34,080 --> 00:06:35,919
because we want to assure that the code

168
00:06:35,919 --> 00:06:37,120
that is running

169
00:06:37,120 --> 00:06:40,479
in our platform is trusted but since we

170
00:06:40,479 --> 00:06:42,240
can't make sure that the content of the

171
00:06:42,240 --> 00:06:43,840
flash is the one that we put

172
00:06:43,840 --> 00:06:47,120
including our bootloader itself well we

173
00:06:47,120 --> 00:06:49,840
have a challenge here

174
00:06:51,199 --> 00:06:53,120
yeah and before we move to the next

175
00:06:53,120 --> 00:06:55,440
model the destroyer let's discuss the

176
00:06:55,440 --> 00:06:57,680
properties we would like to add

177
00:06:57,680 --> 00:06:59,680
so the most urgent one is some level of

178
00:06:59,680 --> 00:07:01,440
resilience

179
00:07:01,440 --> 00:07:03,680
yeah indeed the the fact that all the

180
00:07:03,680 --> 00:07:04,639
functional code

181
00:07:04,639 --> 00:07:06,400
is in the flash is a weak point because

182
00:07:06,400 --> 00:07:08,720
it can it can get corrupted or change on

183
00:07:08,720 --> 00:07:10,479
purpose

184
00:07:10,479 --> 00:07:12,160
we know we may also need for more

185
00:07:12,160 --> 00:07:15,039
complex systems that nicely preview

186
00:07:15,039 --> 00:07:17,520
to the nicely integrated microcontroller

187
00:07:17,520 --> 00:07:19,520
that aria showed you previous previously

188
00:07:19,520 --> 00:07:21,520
for example the boot sequence should

189
00:07:21,520 --> 00:07:23,840
handle some configurations of the sock

190
00:07:23,840 --> 00:07:25,680
or it may also be used to initialize

191
00:07:25,680 --> 00:07:27,280
peripherals that couldn't run the

192
00:07:27,280 --> 00:07:29,360
directly output without this

193
00:07:29,360 --> 00:07:32,479
this setup for example some i o clocks

194
00:07:32,479 --> 00:07:34,160
watch dogs sd card

195
00:07:34,160 --> 00:07:37,199
usb or even crypto accelerators and

196
00:07:37,199 --> 00:07:39,039
as i said of course we are here to speak

197
00:07:39,039 --> 00:07:41,919
about security

198
00:07:42,319 --> 00:07:43,919
in order to achieve these goals we need

199
00:07:43,919 --> 00:07:45,919
to add an element to our system

200
00:07:45,919 --> 00:07:48,400
the most common solution is to use a rom

201
00:07:48,400 --> 00:07:50,400
as an immutable first boot support

202
00:07:50,400 --> 00:07:52,319
it will provide us the root element to

203
00:07:52,319 --> 00:07:54,560
achieve our goals

204
00:07:54,560 --> 00:07:57,039
in this model the first piece of code is

205
00:07:57,039 --> 00:07:59,280
stored in and run from the rom

206
00:07:59,280 --> 00:08:01,360
its main role is to load the next edge

207
00:08:01,360 --> 00:08:02,879
you see on the on the

208
00:08:02,879 --> 00:08:04,800
on the scheme found in the flash the

209
00:08:04,800 --> 00:08:06,879
bootloader

210
00:08:06,879 --> 00:08:08,639
it can also be used to recover in case

211
00:08:08,639 --> 00:08:09,919
of flash corruption

212
00:08:09,919 --> 00:08:11,599
and in some cases it may include the

213
00:08:11,599 --> 00:08:13,520
minimal set of configuration needed

214
00:08:13,520 --> 00:08:15,280
for example if you want to boot from a

215
00:08:15,280 --> 00:08:16,960
peripheral

216
00:08:16,960 --> 00:08:18,639
and of course adding another component

217
00:08:18,639 --> 00:08:20,879
to our systems comes with the price

218
00:08:20,879 --> 00:08:22,960
in the total cost complexity and the

219
00:08:22,960 --> 00:08:24,000
performance but

220
00:08:24,000 --> 00:08:26,720
this should be worth it now let's see

221
00:08:26,720 --> 00:08:29,039
how we will use this scheme to create a

222
00:08:29,039 --> 00:08:32,318
validated boot sequence

223
00:08:34,799 --> 00:08:36,799
today boot systems are more features

224
00:08:36,799 --> 00:08:39,039
like recovery possibilities network

225
00:08:39,039 --> 00:08:41,279
capabilities and many other goodies

226
00:08:41,279 --> 00:08:43,839
some as i said are even more complicated

227
00:08:43,839 --> 00:08:46,320
that we you are seeing now on the screen

228
00:08:46,320 --> 00:08:49,040
we have moved for from a very simple

229
00:08:49,040 --> 00:08:49,839
patrol bow

230
00:08:49,839 --> 00:08:51,920
to something as complicated as as a

231
00:08:51,920 --> 00:08:55,839
nuclear carrier

232
00:08:56,080 --> 00:08:59,279
and higher complexity means more code

233
00:08:59,279 --> 00:09:02,000
so higher probability of bugs in this

234
00:09:02,000 --> 00:09:03,760
example the attack surface

235
00:09:03,760 --> 00:09:06,880
increases as code size inflates both

236
00:09:06,880 --> 00:09:08,800
the boot rom and the bootloader now

237
00:09:08,800 --> 00:09:10,720
comprises protocol stacks

238
00:09:10,720 --> 00:09:15,600
such as usb tcp or even even http or tls

239
00:09:15,600 --> 00:09:17,839
yeah yeah we jumped so far too far i

240
00:09:17,839 --> 00:09:20,080
think

241
00:09:20,839 --> 00:09:22,800
software

242
00:09:22,800 --> 00:09:25,920
what which slide number are you

243
00:09:25,920 --> 00:09:30,320
i'm 10 you're 10 how's that possible

244
00:09:30,320 --> 00:09:31,839
did you have a did you have a cut

245
00:09:31,839 --> 00:09:37,040
something i'm on the first secure boot

246
00:09:37,040 --> 00:09:40,160
well i'd like to present to you for the

247
00:09:40,160 --> 00:09:41,600
the first secure boot scheme that we

248
00:09:41,600 --> 00:09:43,680
have oh my god

249
00:09:43,680 --> 00:09:47,519
my bad so the main idea here

250
00:09:47,519 --> 00:09:49,480
is that for each stage we will

251
00:09:49,480 --> 00:09:50,800
cryptographically

252
00:09:50,800 --> 00:09:52,800
validate the next one before passing the

253
00:09:52,800 --> 00:09:53,920
control

254
00:09:53,920 --> 00:09:56,000
the flow will form what is called a

255
00:09:56,000 --> 00:09:57,920
chain of trust

256
00:09:57,920 --> 00:10:00,080
due to the immutability of the rom we

257
00:10:00,080 --> 00:10:01,600
will consider the bootrom

258
00:10:01,600 --> 00:10:04,640
as the root of trust of this chain if an

259
00:10:04,640 --> 00:10:06,320
attacker would want to disrupt this

260
00:10:06,320 --> 00:10:06,800
chain

261
00:10:06,800 --> 00:10:09,279
it would need to replace the rom which

262
00:10:09,279 --> 00:10:10,800
is a lot more difficulty

263
00:10:10,800 --> 00:10:13,279
difficult and costly than just

264
00:10:13,279 --> 00:10:14,800
refreshing the bootloader

265
00:10:14,800 --> 00:10:18,399
or the main image or there may be

266
00:10:18,399 --> 00:10:20,800
other ways like finding a vulnerability

267
00:10:20,800 --> 00:10:23,920
but more on that later

268
00:10:23,920 --> 00:10:27,600
so well if this is so secure what can an

269
00:10:27,600 --> 00:10:29,040
attacker do

270
00:10:29,040 --> 00:10:30,800
so one example is to intervene in the

271
00:10:30,800 --> 00:10:32,720
middle of the process without breaking

272
00:10:32,720 --> 00:10:34,399
the verification

273
00:10:34,399 --> 00:10:36,160
due to the linearity of some flow of

274
00:10:36,160 --> 00:10:37,839
operations it is

275
00:10:37,839 --> 00:10:40,160
sometimes possible to achieve what is

276
00:10:40,160 --> 00:10:42,160
called a talk to attack talk to standing

277
00:10:42,160 --> 00:10:42,720
for

278
00:10:42,720 --> 00:10:46,399
time of check time of use the attacker

279
00:10:46,399 --> 00:10:47,920
is switching at the right moment the

280
00:10:47,920 --> 00:10:49,200
original and valid image

281
00:10:49,200 --> 00:10:51,120
and just after the validated as a

282
00:10:51,120 --> 00:10:53,120
validator has finished checking the

283
00:10:53,120 --> 00:10:55,519
signature

284
00:10:55,519 --> 00:10:58,160
it replaces the access to the next stage

285
00:10:58,160 --> 00:11:00,160
with the log image

286
00:11:00,160 --> 00:11:01,600
this is for example what was

287
00:11:01,600 --> 00:11:03,200
accomplished two years ago by two

288
00:11:03,200 --> 00:11:04,000
researchers

289
00:11:04,000 --> 00:11:06,800
on intel would guard mechanism well of

290
00:11:06,800 --> 00:11:08,480
course

291
00:11:08,480 --> 00:11:10,079
the boot sequence or the boot flow of a

292
00:11:10,079 --> 00:11:11,600
modern pc is much

293
00:11:11,600 --> 00:11:13,600
more complicated than what we have seen

294
00:11:13,600 --> 00:11:14,959
more complex that

295
00:11:14,959 --> 00:11:16,959
what we have here but this id is

296
00:11:16,959 --> 00:11:18,800
actually valid everywhere

297
00:11:18,800 --> 00:11:20,880
in this case they show that an attacker

298
00:11:20,880 --> 00:11:22,560
with physical access

299
00:11:22,560 --> 00:11:25,519
to the spy flash could intercept the

300
00:11:25,519 --> 00:11:27,200
execution flow

301
00:11:27,200 --> 00:11:29,279
and actually achieve code execution

302
00:11:29,279 --> 00:11:31,279
after the boot guard validates

303
00:11:31,279 --> 00:11:34,480
the hash of the initial boot block by

304
00:11:34,480 --> 00:11:36,560
the way one of them is now working

305
00:11:36,560 --> 00:11:42,320
with us

306
00:11:42,320 --> 00:11:44,560
okay so my apologies for that so as i

307
00:11:44,560 --> 00:11:45,360
said before

308
00:11:45,360 --> 00:11:48,720
so that like like i said we have uh

309
00:11:48,720 --> 00:11:51,120
the the the boot sequences have have

310
00:11:51,120 --> 00:11:53,440
complexified a lot

311
00:11:53,440 --> 00:11:55,360
and like like what you are seeing now is

312
00:11:55,360 --> 00:11:57,279
that some some some have

313
00:11:57,279 --> 00:11:59,600
got now recovery possibilities network

314
00:11:59,600 --> 00:12:00,639
capabilities and

315
00:12:00,639 --> 00:12:03,839
many many other things and

316
00:12:03,839 --> 00:12:06,399
and as i said we have moved from a very

317
00:12:06,399 --> 00:12:08,240
simple boat the boat patrol to

318
00:12:08,240 --> 00:12:10,240
the most complex one of our game which

319
00:12:10,240 --> 00:12:13,440
is the nuclear carrier

320
00:12:14,399 --> 00:12:18,000
and as i said once again

321
00:12:18,000 --> 00:12:19,680
higher complexity means more code and

322
00:12:19,680 --> 00:12:21,200
higher probability of bugs

323
00:12:21,200 --> 00:12:24,160
so what i was trying to to to to say

324
00:12:24,160 --> 00:12:24,480
here

325
00:12:24,480 --> 00:12:27,120
is that we have we have increases the

326
00:12:27,120 --> 00:12:29,200
code size the the the attack surface

327
00:12:29,200 --> 00:12:31,360
because we have added a lot of boutique

328
00:12:31,360 --> 00:12:34,480
of goodies and and a significant amount

329
00:12:34,480 --> 00:12:35,200
of code

330
00:12:35,200 --> 00:12:38,320
to handle complex protocols such as http

331
00:12:38,320 --> 00:12:42,079
usb or tls

332
00:12:42,079 --> 00:12:45,360
and this can be a real problem if

333
00:12:45,360 --> 00:12:48,000
vrlab vulnerabilities are found in those

334
00:12:48,000 --> 00:12:50,320
pieces of code inside the rom

335
00:12:50,320 --> 00:12:52,320
because this would lead to unfixable

336
00:12:52,320 --> 00:12:55,200
security issues

337
00:12:55,519 --> 00:12:57,920
and one famous example of this is the

338
00:12:57,920 --> 00:13:00,480
nintendo switch fusion vulnerability

339
00:13:00,480 --> 00:13:03,680
which affects the built-in built-in usb

340
00:13:03,680 --> 00:13:05,760
stack of the rom used for recovery were

341
00:13:05,760 --> 00:13:07,680
a memory corruption allowed to execute

342
00:13:07,680 --> 00:13:10,399
unsigned code

343
00:13:11,680 --> 00:13:15,120
so we are displaying now

344
00:13:15,120 --> 00:13:20,000
a non-exhaustive list of boot attacks

345
00:13:20,000 --> 00:13:21,839
it's not for you to read them all it's

346
00:13:21,839 --> 00:13:23,680
just so you have in mind that there are

347
00:13:23,680 --> 00:13:24,560
many kinds

348
00:13:24,560 --> 00:13:28,079
more than we are discussing today

349
00:13:30,240 --> 00:13:33,839
well after this introduction tour of the

350
00:13:33,839 --> 00:13:35,440
possible secure boot design and

351
00:13:35,440 --> 00:13:36,320
weaknesses

352
00:13:36,320 --> 00:13:38,639
we are now moving to the result of our

353
00:13:38,639 --> 00:13:40,880
own vulnerability research we conducted

354
00:13:40,880 --> 00:13:42,320
within the team

355
00:13:42,320 --> 00:13:45,600
on youboot but what is yboot

356
00:13:45,600 --> 00:13:47,600
iii can you please tell us more about

357
00:13:47,600 --> 00:13:48,880
this

358
00:13:48,880 --> 00:13:51,920
with pleasure so you boot well uboot is

359
00:13:51,920 --> 00:13:54,079
a very popular open source bootloader

360
00:13:54,079 --> 00:13:56,800
used in a huge variety of devices from

361
00:13:56,800 --> 00:13:58,800
chromebook to game consoles

362
00:13:58,800 --> 00:14:02,000
setter box to ereaders network equipment

363
00:14:02,000 --> 00:14:05,440
and tons of iot devices

364
00:14:05,440 --> 00:14:08,800
even the spacex dragon cargo spacecraft

365
00:14:08,800 --> 00:14:10,880
and the falcon 9 orbital launch vehicle

366
00:14:10,880 --> 00:14:12,399
actually use it

367
00:14:12,399 --> 00:14:16,320
in space it can be used it is used as a

368
00:14:16,320 --> 00:14:18,320
first stage consisting of

369
00:14:18,320 --> 00:14:21,519
basic needs for the system like

370
00:14:21,519 --> 00:14:24,399
configuring the memory controllers and

371
00:14:24,399 --> 00:14:25,360
sdr

372
00:14:25,360 --> 00:14:27,680
but it also can be used as a secondary

373
00:14:27,680 --> 00:14:29,360
stage

374
00:14:29,360 --> 00:14:32,720
for example it is necessary

375
00:14:32,720 --> 00:14:34,480
for the multiple steps required to learn

376
00:14:34,480 --> 00:14:36,560
the modern operating systems from a

377
00:14:36,560 --> 00:14:37,839
variety of devices

378
00:14:37,839 --> 00:14:39,680
that must be configured in advance and

379
00:14:39,680 --> 00:14:42,240
many more things

380
00:14:42,240 --> 00:14:45,040
so for a moment we will switch to a

381
00:14:45,040 --> 00:14:46,320
whole game

382
00:14:46,320 --> 00:14:49,360
now let's assume that you have chosen

383
00:14:49,360 --> 00:14:52,880
this very solid architecture yeah

384
00:14:52,880 --> 00:14:55,279
you have a boot rom a bootloader and a

385
00:14:55,279 --> 00:14:56,160
main image

386
00:14:56,160 --> 00:14:58,160
you have extensively reviewed your boot

387
00:14:58,160 --> 00:15:00,240
rom so that it doesn't have any known

388
00:15:00,240 --> 00:15:01,040
bugs

389
00:15:01,040 --> 00:15:03,920
it is rock solid and uses crypto only

390
00:15:03,920 --> 00:15:06,639
approved by your crypto experts

391
00:15:06,639 --> 00:15:08,800
and well your security forks tell you

392
00:15:08,800 --> 00:15:11,760
all the time not to even the wheel

393
00:15:11,760 --> 00:15:15,279
so you decided to use a mainstream

394
00:15:15,279 --> 00:15:18,959
maintained and up-to-date third-party

395
00:15:18,959 --> 00:15:20,320
bootloader

396
00:15:20,320 --> 00:15:23,519
you boot well is it enough

397
00:15:23,519 --> 00:15:24,959
let's understand what is happening under

398
00:15:24,959 --> 00:15:27,040
the hood

399
00:15:27,040 --> 00:15:30,560
so you boot stores actually the images

400
00:15:30,560 --> 00:15:32,720
well most of the time it's on the flash

401
00:15:32,720 --> 00:15:33,680
into a so-called

402
00:15:33,680 --> 00:15:36,560
fit format which stands for flattened

403
00:15:36,560 --> 00:15:37,279
image

404
00:15:37,279 --> 00:15:40,240
tree remember the tree using this

405
00:15:40,240 --> 00:15:41,360
complex format

406
00:15:41,360 --> 00:15:43,199
we which we will describe into more

407
00:15:43,199 --> 00:15:44,959
details in a moment ubuntu first

408
00:15:44,959 --> 00:15:46,560
functionalities

409
00:15:46,560 --> 00:15:49,199
uh like loading multiple images well and

410
00:15:49,199 --> 00:15:49,920
of course

411
00:15:49,920 --> 00:15:52,839
what interests us a image signature

412
00:15:52,839 --> 00:15:54,000
verification

413
00:15:54,000 --> 00:15:56,880
for verified boot

414
00:15:57,040 --> 00:15:59,839
writing a feed parser is quite a hard

415
00:15:59,839 --> 00:16:00,880
task

416
00:16:00,880 --> 00:16:02,959
both from design and implementation

417
00:16:02,959 --> 00:16:04,480
perspective

418
00:16:04,480 --> 00:16:06,720
well indeed the ubud code needs to

419
00:16:06,720 --> 00:16:08,800
handle the passing complexity

420
00:16:08,800 --> 00:16:10,959
before being actually able to check the

421
00:16:10,959 --> 00:16:12,160
image signature and let's

422
00:16:12,160 --> 00:16:15,440
pass the control so let's be very clear

423
00:16:15,440 --> 00:16:18,800
this parsing of unauthenticated code or

424
00:16:18,800 --> 00:16:20,639
an authenticated data sorry

425
00:16:20,639 --> 00:16:23,759
is a weak point of this boot flow and an

426
00:16:23,759 --> 00:16:25,120
excellent playground for security

427
00:16:25,120 --> 00:16:26,399
researchers

428
00:16:26,399 --> 00:16:29,440
and now julia will guide us inside the

429
00:16:29,440 --> 00:16:32,560
internals of the feed passing

430
00:16:32,560 --> 00:16:35,519
of course i will so the fit is composed

431
00:16:35,519 --> 00:16:36,000
of

432
00:16:36,000 --> 00:16:38,639
two kinds of basic elements the nodes

433
00:16:38,639 --> 00:16:40,079
which are the containers

434
00:16:40,079 --> 00:16:42,079
and the properties of those nodes which

435
00:16:42,079 --> 00:16:43,360
contain data

436
00:16:43,360 --> 00:16:45,759
this is what we call the tree view on

437
00:16:45,759 --> 00:16:47,519
top of this tree view you would access

438
00:16:47,519 --> 00:16:48,880
the nodes properties

439
00:16:48,880 --> 00:16:51,120
the nodes and properties through a path

440
00:16:51,120 --> 00:16:53,120
built using the node hierarchies and

441
00:16:53,120 --> 00:16:54,240
property names

442
00:16:54,240 --> 00:16:56,320
property names just like an operating

443
00:16:56,320 --> 00:16:58,399
system would access directories and

444
00:16:58,399 --> 00:16:59,440
files

445
00:16:59,440 --> 00:17:01,759
making this analogy with a file system

446
00:17:01,759 --> 00:17:02,480
we call this

447
00:17:02,480 --> 00:17:05,760
the path view what you see here on the

448
00:17:05,760 --> 00:17:07,599
right is the minimal set of notes a fit

449
00:17:07,599 --> 00:17:08,720
must have

450
00:17:08,720 --> 00:17:11,119
to support verify output you will notice

451
00:17:11,119 --> 00:17:13,199
that the valid fit is fully contained

452
00:17:13,199 --> 00:17:15,280
within a root node which name must be

453
00:17:15,280 --> 00:17:16,400
empty

454
00:17:16,400 --> 00:17:18,959
it must also have a node called images

455
00:17:18,959 --> 00:17:21,679
to store the images the loadable images

456
00:17:21,679 --> 00:17:24,559
and the node called configurations to

457
00:17:24,559 --> 00:17:25,039
store

458
00:17:25,039 --> 00:17:27,359
among other things the metadata used by

459
00:17:27,359 --> 00:17:33,039
the signature verification process

460
00:17:33,039 --> 00:17:34,320
talking about various signature

461
00:17:34,320 --> 00:17:37,200
verification let's let's see now how

462
00:17:37,200 --> 00:17:40,799
the first step a month among three works

463
00:17:40,799 --> 00:17:42,640
in this step you boot fetches the

464
00:17:42,640 --> 00:17:44,400
signature value from the configuration

465
00:17:44,400 --> 00:17:46,720
metadata of the fig tree

466
00:17:46,720 --> 00:17:49,120
it decrypts the signature using the rsa

467
00:17:49,120 --> 00:17:50,080
algorithm

468
00:17:50,080 --> 00:17:51,760
and the public key which is assumed to

469
00:17:51,760 --> 00:17:54,960
be stored in a trusted location

470
00:17:54,960 --> 00:17:56,559
and the output is what we call the

471
00:17:56,559 --> 00:17:58,720
original hash which will be used in the

472
00:17:58,720 --> 00:18:01,840
next step

473
00:18:03,039 --> 00:18:05,679
in your boot only a subset of a fit file

474
00:18:05,679 --> 00:18:06,480
is signed

475
00:18:06,480 --> 00:18:08,640
when verified boot is enabled this is a

476
00:18:08,640 --> 00:18:10,720
design choice to allow for flexibility

477
00:18:10,720 --> 00:18:13,039
to add new images to an existing fit

478
00:18:13,039 --> 00:18:15,200
without breaking the signature

479
00:18:15,200 --> 00:18:17,200
so this means your boot has to first

480
00:18:17,200 --> 00:18:19,520
figure out which parts of the file are

481
00:18:19,520 --> 00:18:20,640
signed

482
00:18:20,640 --> 00:18:23,200
it does that by retrieving the list here

483
00:18:23,200 --> 00:18:24,240
in red

484
00:18:24,240 --> 00:18:27,440
of nodes to verify

485
00:18:27,679 --> 00:18:30,320
then it iterates all the nodes of the

486
00:18:30,320 --> 00:18:31,679
fit from the beginning

487
00:18:31,679 --> 00:18:34,160
to the end and whenever a node's path

488
00:18:34,160 --> 00:18:35,520
matches one in the list

489
00:18:35,520 --> 00:18:38,880
it is selected and as it is comparing

490
00:18:38,880 --> 00:18:40,799
node's path this step is working on the

491
00:18:40,799 --> 00:18:42,720
path view

492
00:18:42,720 --> 00:18:45,039
and once and and once all the nodes are

493
00:18:45,039 --> 00:18:46,960
selected their content is hashed to

494
00:18:46,960 --> 00:18:47,679
produce

495
00:18:47,679 --> 00:18:51,440
what we call the computed hash

496
00:18:51,760 --> 00:18:53,760
and finally this computed hash is

497
00:18:53,760 --> 00:18:55,200
compared against the

498
00:18:55,200 --> 00:18:57,520
original hash generated in the previous

499
00:18:57,520 --> 00:18:58,400
step

500
00:18:58,400 --> 00:19:00,320
and if both are equal the signature is

501
00:19:00,320 --> 00:19:02,160
considered valid and we can move on to

502
00:19:02,160 --> 00:19:02,400
the

503
00:19:02,400 --> 00:19:05,200
to the next step

504
00:19:06,480 --> 00:19:08,720
the final step number three is the

505
00:19:08,720 --> 00:19:10,000
loading step

506
00:19:10,000 --> 00:19:11,200
you boot retrieves from the

507
00:19:11,200 --> 00:19:13,360
configuration metadata data which

508
00:19:13,360 --> 00:19:14,320
signature has

509
00:19:14,320 --> 00:19:16,559
which which gesture has previously been

510
00:19:16,559 --> 00:19:17,919
verified as i said

511
00:19:17,919 --> 00:19:20,240
the name of the image it has to load

512
00:19:20,240 --> 00:19:21,760
then using the tree view

513
00:19:21,760 --> 00:19:23,520
it locates and loads this image from

514
00:19:23,520 --> 00:19:27,520
within the images node of the fit

515
00:19:30,320 --> 00:19:33,520
so before we move on let's take a break

516
00:19:33,520 --> 00:19:35,200
and remember a few key points about

517
00:19:35,200 --> 00:19:36,720
ubud's verified boot

518
00:19:36,720 --> 00:19:39,200
so we we've seen that the the you the

519
00:19:39,200 --> 00:19:40,720
the ubud signature

520
00:19:40,720 --> 00:19:42,320
verification process is composed of

521
00:19:42,320 --> 00:19:44,480
three steps the signature fetch and the

522
00:19:44,480 --> 00:19:45,840
logic image step

523
00:19:45,840 --> 00:19:48,240
number one and three which are using the

524
00:19:48,240 --> 00:19:49,280
tree view

525
00:19:49,280 --> 00:19:51,120
and the compute and compare step number

526
00:19:51,120 --> 00:19:53,440
two which is using the path view

527
00:19:53,440 --> 00:19:55,360
we've also seen that the fit format is

528
00:19:55,360 --> 00:19:56,720
flexible meaning any

529
00:19:56,720 --> 00:19:58,960
anyone can add images and configuration

530
00:19:58,960 --> 00:20:00,320
to an existing fit

531
00:20:00,320 --> 00:20:02,640
tree without altering the signature as

532
00:20:02,640 --> 00:20:04,000
long as the

533
00:20:04,000 --> 00:20:06,640
existing pieces of data are not altered

534
00:20:06,640 --> 00:20:09,120
and this is by design

535
00:20:09,120 --> 00:20:10,960
we've seen that youboot is working on

536
00:20:10,960 --> 00:20:12,480
different views or different

537
00:20:12,480 --> 00:20:14,400
somehow abstraction layers meaning

538
00:20:14,400 --> 00:20:16,080
treeview versus past view

539
00:20:16,080 --> 00:20:18,840
and we'll see later that this induces

540
00:20:18,840 --> 00:20:20,400
discrepancies and i

541
00:20:20,400 --> 00:20:23,280
will now dive into this in more details

542
00:20:23,280 --> 00:20:23,840
because

543
00:20:23,840 --> 00:20:25,760
we all know that the devil is in the

544
00:20:25,760 --> 00:20:28,240
details

545
00:20:28,960 --> 00:20:32,000
and now we are happy to public present

546
00:20:32,000 --> 00:20:33,440
for the first time

547
00:20:33,440 --> 00:20:37,360
our evil boot attacks the first one

548
00:20:37,360 --> 00:20:40,720
is called permissive name equality so

549
00:20:40,720 --> 00:20:42,799
in order to execute the signature

550
00:20:42,799 --> 00:20:44,000
verification

551
00:20:44,000 --> 00:20:46,400
u-boot searches for image names and

552
00:20:46,400 --> 00:20:48,240
corresponding configurations

553
00:20:48,240 --> 00:20:51,039
it is combining the names of the nodes

554
00:20:51,039 --> 00:20:52,799
in the different places

555
00:20:52,799 --> 00:20:55,520
but not in a consistent way the path

556
00:20:55,520 --> 00:20:57,679
view uses a string comparison

557
00:20:57,679 --> 00:21:00,320
well in fact this is just a mam compel

558
00:21:00,320 --> 00:21:02,240
the tree view on the other hand is using

559
00:21:02,240 --> 00:21:03,120
a model

560
00:21:03,120 --> 00:21:05,280
using the atsign commonly known in

561
00:21:05,280 --> 00:21:07,679
israel as

562
00:21:07,679 --> 00:21:12,799
strudel to support another model called

563
00:21:12,799 --> 00:21:17,840
a device 3 node unit address

564
00:21:17,919 --> 00:21:21,280
on the right you can see what happens

565
00:21:21,280 --> 00:21:21,760
when

566
00:21:21,760 --> 00:21:24,159
we use the treeview comparison function

567
00:21:24,159 --> 00:21:25,520
the interesting one

568
00:21:25,520 --> 00:21:29,039
is the last one if a node doesn't have

569
00:21:29,039 --> 00:21:32,799
the strudel sign it will be considered

570
00:21:32,799 --> 00:21:35,360
equal to the same name postfix with this

571
00:21:35,360 --> 00:21:36,080
with a

572
00:21:36,080 --> 00:21:39,840
string starting with a strudel

573
00:21:39,840 --> 00:21:41,919
this discrepancy between the two views

574
00:21:41,919 --> 00:21:45,840
is what lets us mount this attack

575
00:21:45,840 --> 00:21:49,200
so for this attack we add to the fit

576
00:21:49,200 --> 00:21:50,400
table an entry

577
00:21:50,400 --> 00:21:53,360
a node for a secondary image as julian

578
00:21:53,360 --> 00:21:54,400
explained earlier

579
00:21:54,400 --> 00:21:56,799
the format allows to add a new section

580
00:21:56,799 --> 00:21:58,559
so so far

581
00:21:58,559 --> 00:22:02,000
no damage down but our new image is

582
00:22:02,000 --> 00:22:04,000
called using the same name

583
00:22:04,000 --> 00:22:06,000
as the original one but we just

584
00:22:06,000 --> 00:22:07,200
concatenated

585
00:22:07,200 --> 00:22:10,080
a string starting with a strudel like

586
00:22:10,080 --> 00:22:10,799
this

587
00:22:10,799 --> 00:22:13,919
at something or at fake let's see how

588
00:22:13,919 --> 00:22:15,520
the u-boot code will behave when

589
00:22:15,520 --> 00:22:17,360
checking the signature

590
00:22:17,360 --> 00:22:20,880
of the valid er the valid partition so

591
00:22:20,880 --> 00:22:23,760
on step one the signature blob is

592
00:22:23,760 --> 00:22:25,760
fetched from the configurations entry

593
00:22:25,760 --> 00:22:29,200
this uses the treeview method

594
00:22:29,200 --> 00:22:31,120
but well this is not important because

595
00:22:31,120 --> 00:22:34,799
we have only one entry there

596
00:22:39,039 --> 00:22:42,640
sorry yes sorry

597
00:22:42,640 --> 00:22:45,120
on step two the hash of the image to be

598
00:22:45,120 --> 00:22:46,080
validated

599
00:22:46,080 --> 00:22:49,840
is calculated well this is done using

600
00:22:49,840 --> 00:22:52,720
the path view method which is strict and

601
00:22:52,720 --> 00:22:53,520
matching

602
00:22:53,520 --> 00:22:55,840
the valid image so of course the

603
00:22:55,840 --> 00:22:57,760
signature check will pass

604
00:22:57,760 --> 00:23:01,520
right but on step three

605
00:23:01,520 --> 00:23:04,400
the tree view method is used again and

606
00:23:04,400 --> 00:23:04,799
so

607
00:23:04,799 --> 00:23:07,440
our fake node using the same name with

608
00:23:07,440 --> 00:23:08,960
the channel add sign string

609
00:23:08,960 --> 00:23:11,280
at the end will be used in place of the

610
00:23:11,280 --> 00:23:13,200
valid one

611
00:23:13,200 --> 00:23:15,919
so what happened

612
00:23:16,559 --> 00:23:19,039
well we just bypass actually the secure

613
00:23:19,039 --> 00:23:21,120
code and u-boot will pass control to our

614
00:23:21,120 --> 00:23:22,000
arbitrary code

615
00:23:22,000 --> 00:23:25,120
he has a kernel one fake in this case

616
00:23:25,120 --> 00:23:28,000
and so we just hit pretty hard the

617
00:23:28,000 --> 00:23:30,960
u-boot submarine

618
00:23:32,080 --> 00:23:37,840
thank you

619
00:23:39,200 --> 00:23:42,000
that will be enough right but well since

620
00:23:42,000 --> 00:23:42,960
we are already here

621
00:23:42,960 --> 00:23:46,159
and julia made all the way to here

622
00:23:46,159 --> 00:23:49,520
so we have another one to show

623
00:23:49,600 --> 00:23:52,480
yes sorry actually it's never enough so

624
00:23:52,480 --> 00:23:54,640
yeah here we are again taking advantage

625
00:23:54,640 --> 00:23:57,600
of one of the discrepancies between the

626
00:23:57,600 --> 00:24:01,200
signature verification steps so the fit

627
00:24:01,200 --> 00:24:03,039
format specification describes the fit

628
00:24:03,039 --> 00:24:04,159
as being contained

629
00:24:04,159 --> 00:24:06,000
contained in one big node the root node

630
00:24:06,000 --> 00:24:08,559
which name must be empty

631
00:24:08,559 --> 00:24:10,480
the tree view in step one and three

632
00:24:10,480 --> 00:24:11,919
assumes this to be true

633
00:24:11,919 --> 00:24:14,080
regardless and thus uses the first node

634
00:24:14,080 --> 00:24:15,279
of defeat

635
00:24:15,279 --> 00:24:18,480
as a root regardless of its name on the

636
00:24:18,480 --> 00:24:20,000
other hand the second step

637
00:24:20,000 --> 00:24:21,679
of the verified boot check this

638
00:24:21,679 --> 00:24:24,320
explicitly as it works on the path view

639
00:24:24,320 --> 00:24:26,559
but what happens if we build a fit file

640
00:24:26,559 --> 00:24:28,320
as you see on the right with two root

641
00:24:28,320 --> 00:24:31,360
nodes instead of one

642
00:24:31,840 --> 00:24:34,640
well this is exactly the idea behind the

643
00:24:34,640 --> 00:24:35,760
fake hood node attack

644
00:24:35,760 --> 00:24:38,000
so here an attacker is altering a site

645
00:24:38,000 --> 00:24:39,279
signed firmware by

646
00:24:39,279 --> 00:24:41,440
inserting its own code in it the

647
00:24:41,440 --> 00:24:42,960
attacker is duplicating

648
00:24:42,960 --> 00:24:44,640
what we call the genuine root node

649
00:24:44,640 --> 00:24:46,080
meaning the node that contains the

650
00:24:46,080 --> 00:24:48,000
whole original firmware with valid

651
00:24:48,000 --> 00:24:51,279
signature but with slight modifications

652
00:24:51,279 --> 00:24:53,679
so the duplicated node we see here in

653
00:24:53,679 --> 00:24:55,279
orange and we call fake root

654
00:24:55,279 --> 00:24:57,919
is put in the fit file before the

655
00:24:57,919 --> 00:24:59,039
genuine root node

656
00:24:59,039 --> 00:25:02,159
here in grey the only differences

657
00:25:02,159 --> 00:25:02,880
between the two

658
00:25:02,880 --> 00:25:05,520
are the new the new node has a non-empty

659
00:25:05,520 --> 00:25:06,799
name in this example

660
00:25:06,799 --> 00:25:08,799
fake root and the loadable image it

661
00:25:08,799 --> 00:25:10,000
contains is

662
00:25:10,000 --> 00:25:12,400
is replaced by an arbitrary attacker

663
00:25:12,400 --> 00:25:13,679
controller

664
00:25:13,679 --> 00:25:15,679
and let us see now what is the impact on

665
00:25:15,679 --> 00:25:18,799
the verified boot process

666
00:25:19,200 --> 00:25:22,880
so during step two are you okay are you

667
00:25:22,880 --> 00:25:24,400
yes

668
00:25:24,400 --> 00:25:27,200
so okay during step two u-boot iterates

669
00:25:27,200 --> 00:25:28,640
on every node of the file

670
00:25:28,640 --> 00:25:31,360
trying to match each notepad with one in

671
00:25:31,360 --> 00:25:32,159
the list

672
00:25:32,159 --> 00:25:34,640
list of the notes to verify because the

673
00:25:34,640 --> 00:25:35,440
fake root node

674
00:25:35,440 --> 00:25:38,159
has a non-empty name none of its node

675
00:25:38,159 --> 00:25:39,200
will match

676
00:25:39,200 --> 00:25:40,720
since their password begins with the

677
00:25:40,720 --> 00:25:42,720
word fakers in other words it is

678
00:25:42,720 --> 00:25:44,159
completely ignored

679
00:25:44,159 --> 00:25:47,279
by the compute and compare step on the

680
00:25:47,279 --> 00:25:48,960
other hand the genuine non-controlled

681
00:25:48,960 --> 00:25:50,799
content will match but this is okay

682
00:25:50,799 --> 00:25:52,799
because its contents as it was left

683
00:25:52,799 --> 00:25:54,159
untouched so

684
00:25:54,159 --> 00:25:56,799
the computed signature is valid you

685
00:25:56,799 --> 00:25:57,679
would consider

686
00:25:57,679 --> 00:26:01,120
this natural as valid

687
00:26:01,360 --> 00:26:05,039
later step three

688
00:26:05,120 --> 00:26:08,080
okay later step three we will search for

689
00:26:08,080 --> 00:26:09,360
the image to load

690
00:26:09,360 --> 00:26:11,840
as it works on the tree view it fetches

691
00:26:11,840 --> 00:26:13,840
the image to load from the first node of

692
00:26:13,840 --> 00:26:15,760
the tree assumed to be the root node

693
00:26:15,760 --> 00:26:17,919
regardless of its name it loads the

694
00:26:17,919 --> 00:26:19,360
image from the fake root node thus

695
00:26:19,360 --> 00:26:21,440
loading attack or control data

696
00:26:21,440 --> 00:26:25,840
and our submarine is hit again

697
00:26:28,159 --> 00:26:30,960
and uh well now our submarine is hit and

698
00:26:30,960 --> 00:26:31,600
sunk

699
00:26:31,600 --> 00:26:33,760
indeed we showed two distinct ways of

700
00:26:33,760 --> 00:26:35,600
inserting arbitrary code to a signed

701
00:26:35,600 --> 00:26:36,720
image which gets

702
00:26:36,720 --> 00:26:40,080
executed even with verified boot enabled

703
00:26:40,080 --> 00:26:42,080
the impact can be significant you can

704
00:26:42,080 --> 00:26:44,000
imagine for example the game console for

705
00:26:44,000 --> 00:26:45,039
which the protection

706
00:26:45,039 --> 00:26:46,880
then would be broken an attacker would

707
00:26:46,880 --> 00:26:48,320
be able to run

708
00:26:48,320 --> 00:26:50,320
arbitrary code and run pirated games

709
00:26:50,320 --> 00:26:51,760
thus breaking van der's

710
00:26:51,760 --> 00:26:53,600
business model and that's that's just an

711
00:26:53,600 --> 00:26:56,000
example

712
00:26:56,080 --> 00:26:59,360
well uh yeah i'm afraid that our game is

713
00:26:59,360 --> 00:27:01,440
over now

714
00:27:01,440 --> 00:27:03,840
yes i think that we can say it's game

715
00:27:03,840 --> 00:27:05,360
over

716
00:27:05,360 --> 00:27:07,919
well let's draw some conclusions as we

717
00:27:07,919 --> 00:27:09,919
have seen security engineering well it's

718
00:27:09,919 --> 00:27:11,120
hard

719
00:27:11,120 --> 00:27:14,320
it is primordial to be safe on the first

720
00:27:14,320 --> 00:27:16,400
try on parts that can't be updated later

721
00:27:16,400 --> 00:27:18,159
like the bootrom

722
00:27:18,159 --> 00:27:20,880
and as any chain a chain of thrust is as

723
00:27:20,880 --> 00:27:21,840
strong as its

724
00:27:21,840 --> 00:27:24,320
weakest link and also we want to remove

725
00:27:24,320 --> 00:27:26,240
any energy attack surface

726
00:27:26,240 --> 00:27:28,080
well i didn't brought you for that

727
00:27:28,080 --> 00:27:31,520
because you knew all that before

728
00:27:32,320 --> 00:27:34,080
but even when you did everything right

729
00:27:34,080 --> 00:27:35,360
on your code

730
00:27:35,360 --> 00:27:37,039
you have a strong architecture you

731
00:27:37,039 --> 00:27:38,640
reviewed your code thoroughly

732
00:27:38,640 --> 00:27:42,080
you fasted it sometimes

733
00:27:42,080 --> 00:27:44,000
you may find it's not enough because the

734
00:27:44,000 --> 00:27:46,840
weakest link is coming from third-party

735
00:27:46,840 --> 00:27:50,240
code for some psychological reasons

736
00:27:50,240 --> 00:27:52,240
we tend to give more credit to

737
00:27:52,240 --> 00:27:54,640
third-party libraries that some deserve

738
00:27:54,640 --> 00:27:56,240
we have seen that again and again

739
00:27:56,240 --> 00:27:57,840
recently

740
00:27:57,840 --> 00:27:59,600
and not especially on this really great

741
00:27:59,600 --> 00:28:01,440
bootloader

742
00:28:01,440 --> 00:28:03,360
also pay attention that the

743
00:28:03,360 --> 00:28:06,000
vulnerabilities we have discovered here

744
00:28:06,000 --> 00:28:09,039
were based on logic bugs

745
00:28:09,039 --> 00:28:11,520
that means that they the way to exploit

746
00:28:11,520 --> 00:28:13,360
them doesn't lead to any sort of code or

747
00:28:13,360 --> 00:28:14,799
memory corruption

748
00:28:14,799 --> 00:28:16,320
so they are not usually discovered by

749
00:28:16,320 --> 00:28:18,640
automatic methods like static analyses

750
00:28:18,640 --> 00:28:20,480
or advanced fuzzing

751
00:28:20,480 --> 00:28:23,120
and furthermore they are not mitigated

752
00:28:23,120 --> 00:28:24,880
even by the most evolved mitigation

753
00:28:24,880 --> 00:28:26,720
techniques

754
00:28:26,720 --> 00:28:28,880
so there is good news here we will need

755
00:28:28,880 --> 00:28:30,240
you all of you

756
00:28:30,240 --> 00:28:33,600
to actually secure the world

757
00:28:35,120 --> 00:28:39,200
also um we would like to

758
00:28:39,200 --> 00:28:41,279
take this opportunity to thank the

759
00:28:41,279 --> 00:28:42,240
thanks team

760
00:28:42,240 --> 00:28:44,720
tom renee simon glass it was a pleasure

761
00:28:44,720 --> 00:28:45,919
to work with you guys

762
00:28:45,919 --> 00:28:50,130
on the disclosure and on the fixes

763
00:28:50,130 --> 00:28:52,480
[Applause]

764
00:28:52,480 --> 00:28:55,919
so well i have a quick legal note

765
00:28:55,919 --> 00:28:58,720
i think that it is related to karen's

766
00:28:58,720 --> 00:28:59,279
sister

767
00:28:59,279 --> 00:29:02,640
she's on legal at intel

768
00:29:02,720 --> 00:29:04,640
and the credits for the authors of the

769
00:29:04,640 --> 00:29:06,159
licensed picture that we have used in

770
00:29:06,159 --> 00:29:08,960
this presentation

771
00:29:09,360 --> 00:29:13,840
thank you all for your attention

772
00:29:14,720 --> 00:29:17,880
[Applause]

773
00:29:19,200 --> 00:29:22,080
thank you so much ariel thank you merci

774
00:29:22,080 --> 00:29:23,039
julien

775
00:29:23,039 --> 00:29:25,440
so this was awesome i learned a lot of

776
00:29:25,440 --> 00:29:26,880
things i also learned

777
00:29:26,880 --> 00:29:28,399
that you get a lot of applause in the

778
00:29:28,399 --> 00:29:30,159
middle of your presentation when you do

779
00:29:30,159 --> 00:29:31,120
cool things

780
00:29:31,120 --> 00:29:32,640
and the people of these sites surely

781
00:29:32,640 --> 00:29:34,159
appreciate it so

782
00:29:34,159 --> 00:29:35,679
let's give them one more round of

783
00:29:35,679 --> 00:29:37,039
applause thank you arya thank you

784
00:29:37,039 --> 00:29:38,399
julianne

785
00:29:38,399 --> 00:29:41,279
and now i have to announce some

786
00:29:41,279 --> 00:29:41,760
questions

787
00:29:41,760 --> 00:29:43,679
q a okay we're going to do a couple

788
00:29:43,679 --> 00:29:46,159
minutes q a do we have questions

789
00:29:46,159 --> 00:29:49,279
for julian and aliye

790
00:29:49,279 --> 00:29:52,000
and julian we have here hey hey i see

791
00:29:52,000 --> 00:29:53,360
your face

792
00:29:53,360 --> 00:29:56,399
put your mask on mask

793
00:29:56,399 --> 00:30:00,080
on okay questions

794
00:30:00,080 --> 00:30:02,639
all right

795
00:30:03,200 --> 00:30:05,039
control control please give us the

796
00:30:05,039 --> 00:30:06,880
handheld microphone

797
00:30:06,880 --> 00:30:10,000
one two check check one two on the mic

798
00:30:10,000 --> 00:30:12,320
i can do some wrapping in the meantime

799
00:30:12,320 --> 00:30:15,039
one two okay one two

800
00:30:15,039 --> 00:30:18,640
yes yeah i understand the logic bag of

801
00:30:18,640 --> 00:30:19,360
the

802
00:30:19,360 --> 00:30:21,600
three versus the past view but why did

803
00:30:21,600 --> 00:30:22,480
the past view

804
00:30:22,480 --> 00:30:25,600
choose the fake node and the fake

805
00:30:25,600 --> 00:30:29,840
argument with the strudel but not the

806
00:30:29,840 --> 00:30:31,679
not the other one first how did you make

807
00:30:31,679 --> 00:30:33,440
him choose the

808
00:30:33,440 --> 00:30:36,559
how did you make the review select the

809
00:30:36,559 --> 00:30:38,799
fake one instead of the real one okay so

810
00:30:38,799 --> 00:30:40,080
what is going on there

811
00:30:40,080 --> 00:30:43,039
is that if you have this format that is

812
00:30:43,039 --> 00:30:44,880
called the unit address like i said

813
00:30:44,880 --> 00:30:47,279
and it is using this total for example

814
00:30:47,279 --> 00:30:49,440
you have kernel strudel one

815
00:30:49,440 --> 00:30:52,480
now a kernel and care destroyer one

816
00:30:52,480 --> 00:30:53,520
actually the same

817
00:30:53,520 --> 00:30:56,000
so on the project the first project that

818
00:30:56,000 --> 00:30:57,039
we have seen this

819
00:30:57,039 --> 00:30:59,919
issue they were using just kernel if

820
00:30:59,919 --> 00:31:01,919
they would have used kernel strudel

821
00:31:01,919 --> 00:31:03,519
something so this side would not have

822
00:31:03,519 --> 00:31:04,640
been possible

823
00:31:04,640 --> 00:31:06,720
but since they were just ignoring the

824
00:31:06,720 --> 00:31:07,840
strudel part

825
00:31:07,840 --> 00:31:10,159
so it was just let's say kernel so we

826
00:31:10,159 --> 00:31:11,360
could make this attack

827
00:31:11,360 --> 00:31:13,200
because the code was written in a way

828
00:31:13,200 --> 00:31:15,120
that if you don't have anything or you

829
00:31:15,120 --> 00:31:16,320
have something you should

830
00:31:16,320 --> 00:31:18,159
it will be the same if they would have

831
00:31:18,159 --> 00:31:19,440
called it kernel

832
00:31:19,440 --> 00:31:22,720
one then the attack wouldn't have

833
00:31:22,720 --> 00:31:26,480
worked let's answer the questions

834
00:31:28,640 --> 00:31:33,840
i'm sorry i can't hear you

835
00:31:37,600 --> 00:31:40,880
yes yes so if you want just what happens

836
00:31:40,880 --> 00:31:42,159
on the second project

837
00:31:42,159 --> 00:31:44,480
that we have looked at is that we're

838
00:31:44,480 --> 00:31:48,080
using actually this kernel at one format

839
00:31:48,080 --> 00:31:51,120
so this attack didn't work but we said

840
00:31:51,120 --> 00:31:52,480
okay it's not possible that we can't

841
00:31:52,480 --> 00:31:53,840
find another one that will work

842
00:31:53,840 --> 00:31:55,039
everywhere

843
00:31:55,039 --> 00:31:57,200
so julian just dig a little more and

844
00:31:57,200 --> 00:32:01,840
found the second attack

845
00:32:11,760 --> 00:32:14,080
did you check the all the versions of

846
00:32:14,080 --> 00:32:15,760
uber till now

847
00:32:15,760 --> 00:32:19,600
okay so understand so the question is

848
00:32:19,600 --> 00:32:20,159
that

849
00:32:20,159 --> 00:32:22,480
if we have checked everything so we

850
00:32:22,480 --> 00:32:23,360
haven't checked

851
00:32:23,360 --> 00:32:25,600
every version but according actually to

852
00:32:25,600 --> 00:32:26,799
the authors

853
00:32:26,799 --> 00:32:28,559
when we discovered that i think it was

854
00:32:28,559 --> 00:32:30,080
in november or december something like

855
00:32:30,080 --> 00:32:31,519
that

856
00:32:31,519 --> 00:32:33,279
yeah i think it was in december so we

857
00:32:33,279 --> 00:32:35,519
did no no no november but the official

858
00:32:35,519 --> 00:32:37,440
communication was was in december which

859
00:32:37,440 --> 00:32:37,679
is

860
00:32:37,679 --> 00:32:39,679
maintained so we were in contact with

861
00:32:39,679 --> 00:32:41,840
the dance team

862
00:32:41,840 --> 00:32:43,840
they said that yes for very very very

863
00:32:43,840 --> 00:32:45,679
long time we still

864
00:32:45,679 --> 00:32:49,519
went back to 2013

865
00:32:49,519 --> 00:32:52,080
or 2015 and all the versions were

866
00:32:52,080 --> 00:32:53,200
actually vulnerable

867
00:32:53,200 --> 00:32:56,320
it has been fixed in a patch it's on

868
00:32:56,320 --> 00:32:58,399
where we publicly released it although i

869
00:32:58,399 --> 00:32:59,519
publicly released it

870
00:32:59,519 --> 00:33:01,760
in april in march i think it was in

871
00:33:01,760 --> 00:33:02,880
march it was on the

872
00:33:02,880 --> 00:33:05,760
april yeah it was in march but the

873
00:33:05,760 --> 00:33:06,320
version

874
00:33:06,320 --> 00:33:09,120
is the release candidate two of april if

875
00:33:09,120 --> 00:33:11,679
i'm not wrong right something like that

876
00:33:11,679 --> 00:33:13,760
okay i i might have missed it but uh

877
00:33:13,760 --> 00:33:15,120
excuse me uh okay

878
00:33:15,120 --> 00:33:17,760
so what made it when you said that uh

879
00:33:17,760 --> 00:33:19,039
the code with a

880
00:33:19,039 --> 00:33:20,880
kernel strudel run and not the one

881
00:33:20,880 --> 00:33:22,799
without the strudel what in the

882
00:33:22,799 --> 00:33:26,000
code of the bootloader made it

883
00:33:26,000 --> 00:33:29,919
uh run the one with the strudel is it

884
00:33:29,919 --> 00:33:32,080
what is it select based i don't know how

885
00:33:32,080 --> 00:33:34,480
to explain uh

886
00:33:34,480 --> 00:33:37,760
julia you want to take this question

887
00:33:38,480 --> 00:33:40,640
i can i'm not sure i fully understand

888
00:33:40,640 --> 00:33:42,559
the question but so the question is

889
00:33:42,559 --> 00:33:44,640
how makes this select this one so

890
00:33:44,640 --> 00:33:45,600
basically

891
00:33:45,600 --> 00:33:47,440
as we explained you can you can insert

892
00:33:47,440 --> 00:33:49,760
images okay or images

893
00:33:49,760 --> 00:33:53,120
images inside the images node without

894
00:33:53,120 --> 00:33:54,399
breaking the signature so

895
00:33:54,399 --> 00:33:57,360
if there is for example

896
00:33:58,080 --> 00:34:00,799
one is searching for kernel and then

897
00:34:00,799 --> 00:34:02,880
before this one you insert kernel add

898
00:34:02,880 --> 00:34:04,799
something as the comparison will match

899
00:34:04,799 --> 00:34:06,960
as the first one you will

900
00:34:06,960 --> 00:34:08,399
you will it will pick up the first one

901
00:34:08,399 --> 00:34:10,719
that matches basically okay first match

902
00:34:10,719 --> 00:34:11,760
okay

903
00:34:11,760 --> 00:34:20,879
yeah the first match does okay

904
00:34:20,879 --> 00:34:23,918
any other questions here on the first

905
00:34:23,918 --> 00:34:26,158
row

906
00:34:26,960 --> 00:34:28,719
so uh there is going to be some uh

907
00:34:28,719 --> 00:34:30,000
release or

908
00:34:30,000 --> 00:34:31,918
like some pocs that you are going to

909
00:34:31,918 --> 00:34:33,599
release or it's going to be staying

910
00:34:33,599 --> 00:34:35,520
like it's going i can find some

911
00:34:35,520 --> 00:34:37,520
additional notes somewhere

912
00:34:37,520 --> 00:34:40,800
yeah so so yeah yeah we

913
00:34:40,800 --> 00:34:44,000
we uh yeah basically we

914
00:34:44,000 --> 00:34:45,918
we send to the to the developer

915
00:34:45,918 --> 00:34:47,119
everything even

916
00:34:47,119 --> 00:34:50,719
a poc to reproduce the issues and the

917
00:34:50,719 --> 00:34:51,119
poc

918
00:34:51,119 --> 00:34:53,918
have been pushed to their repositories

919
00:34:53,918 --> 00:34:54,399
as

920
00:34:54,399 --> 00:34:56,639
you know non-regression tests so if you

921
00:34:56,639 --> 00:34:58,000
want to

922
00:34:58,000 --> 00:34:59,680
play with this there's a python script

923
00:34:59,680 --> 00:35:02,560
on the youboot repositories and normally

924
00:35:02,560 --> 00:35:05,040
in the git commits you can grab grip

925
00:35:05,040 --> 00:35:06,000
with the cvs

926
00:35:06,000 --> 00:35:08,560
because we asked them to put the cvs in

927
00:35:08,560 --> 00:35:10,480
the commit so it's easier for security

928
00:35:10,480 --> 00:35:11,359
researchers to

929
00:35:11,359 --> 00:35:14,839
look to search for that so everything is

930
00:35:14,839 --> 00:35:17,760
public

931
00:35:17,760 --> 00:35:20,160
thank you

932
00:35:21,760 --> 00:35:23,920
all right all right all right thank you

933
00:35:23,920 --> 00:35:27,760
so much arya thank you julian

