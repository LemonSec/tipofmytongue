1
00:00:00,290 --> 00:00:03,220
[Music]

2
00:00:03,220 --> 00:00:03,740
[Applause]

3
00:00:03,740 --> 00:00:10,400
[Music]

4
00:00:10,639 --> 00:00:12,639
thanks a lot for joining me for this

5
00:00:12,639 --> 00:00:14,080
talk about

6
00:00:14,080 --> 00:00:17,199
serverless application and application

7
00:00:17,199 --> 00:00:19,039
security testing

8
00:00:19,039 --> 00:00:20,320
we will see

9
00:00:20,320 --> 00:00:22,160
what are the challenges

10
00:00:22,160 --> 00:00:23,680
that

11
00:00:23,680 --> 00:00:26,160
we face when

12
00:00:26,160 --> 00:00:27,519
having a

13
00:00:27,519 --> 00:00:30,400
building a security testing tool for

14
00:00:30,400 --> 00:00:33,599
serverless application

15
00:00:34,880 --> 00:00:37,760
so a bit about myself if you don't know

16
00:00:37,760 --> 00:00:40,000
me yet

17
00:00:40,000 --> 00:00:41,200
i am a

18
00:00:41,200 --> 00:00:43,760
developer software engineer i started

19
00:00:43,760 --> 00:00:46,079
coding as a young kid

20
00:00:46,079 --> 00:00:48,879
30 years ago

21
00:00:48,879 --> 00:00:52,879
done my phd in critical software safety

22
00:00:52,879 --> 00:00:54,960
basically helping

23
00:00:54,960 --> 00:00:57,600
that code that is a nuclear plant and so

24
00:00:57,600 --> 00:00:59,920
on will not explode and

25
00:00:59,920 --> 00:01:01,600
kill people

26
00:01:01,600 --> 00:01:05,040
and then 15 years ago i moved from

27
00:01:05,040 --> 00:01:08,400
software safety to software security

28
00:01:08,400 --> 00:01:11,920
i worked a bit on interesting soft on

29
00:01:11,920 --> 00:01:13,840
making a

30
00:01:13,840 --> 00:01:16,960
ssl library more safe

31
00:01:16,960 --> 00:01:19,360
actually giving some mathematical proof

32
00:01:19,360 --> 00:01:23,119
that you can trust some ssl libraries

33
00:01:23,119 --> 00:01:26,400
and then continues

34
00:01:26,400 --> 00:01:28,000
working on

35
00:01:28,000 --> 00:01:30,960
application security tools static

36
00:01:30,960 --> 00:01:32,720
static analysis

37
00:01:32,720 --> 00:01:35,119
diaste sca

38
00:01:35,119 --> 00:01:36,320
and so on

39
00:01:36,320 --> 00:01:39,680
and now i am the technical leader

40
00:01:39,680 --> 00:01:42,000
of serverless engines at contrast

41
00:01:42,000 --> 00:01:43,840
security

42
00:01:43,840 --> 00:01:46,240
and this talk is about serverless so i

43
00:01:46,240 --> 00:01:49,439
will talk more about that

44
00:01:53,439 --> 00:01:56,240
okay cloud native application is gaining

45
00:01:56,240 --> 00:01:58,640
in popularity we see more and more

46
00:01:58,640 --> 00:02:00,079
customers

47
00:02:00,079 --> 00:02:01,759
that are

48
00:02:01,759 --> 00:02:04,000
moving to the cloud and not only moving

49
00:02:04,000 --> 00:02:06,560
to the cloud but moving to serverless

50
00:02:06,560 --> 00:02:08,878
architecture

51
00:02:08,878 --> 00:02:10,160
some of them

52
00:02:10,160 --> 00:02:11,680
are already

53
00:02:11,680 --> 00:02:12,720
full

54
00:02:12,720 --> 00:02:14,879
in the serverless world and some of them

55
00:02:14,879 --> 00:02:16,400
have some hybrid

56
00:02:16,400 --> 00:02:18,319
some existing

57
00:02:18,319 --> 00:02:20,160
application and some new application

58
00:02:20,160 --> 00:02:21,520
with serverless

59
00:02:21,520 --> 00:02:23,680
but we see always that

60
00:02:23,680 --> 00:02:25,920
now everyone is moving to the cloud and

61
00:02:25,920 --> 00:02:28,879
particular serverless

62
00:02:28,879 --> 00:02:31,760
this is a slide from aws this is the

63
00:02:31,760 --> 00:02:34,160
scale we are talking about

64
00:02:34,160 --> 00:02:37,760
and now aws has hundreds of thousands of

65
00:02:37,760 --> 00:02:40,000
customers that are using serverless

66
00:02:40,000 --> 00:02:41,519
applications

67
00:02:41,519 --> 00:02:42,560
uh

68
00:02:42,560 --> 00:02:43,760
and

69
00:02:43,760 --> 00:02:45,680
if you if you take a look at every month

70
00:02:45,680 --> 00:02:47,760
lambda execution you have trillions of

71
00:02:47,760 --> 00:02:49,280
them so

72
00:02:49,280 --> 00:02:52,720
it is already a major player in the

73
00:02:52,720 --> 00:02:55,840
software architecture and it is only the

74
00:02:55,840 --> 00:02:58,239
beginning

75
00:02:59,280 --> 00:03:02,640
and now we can see more and more attacks

76
00:03:02,640 --> 00:03:05,120
in serverless applications some of them

77
00:03:05,120 --> 00:03:07,519
are specifically tailored for serverless

78
00:03:07,519 --> 00:03:08,720
applications

79
00:03:08,720 --> 00:03:10,400
we have seen this

80
00:03:10,400 --> 00:03:13,040
denonya

81
00:03:13,120 --> 00:03:14,720
a few months ago

82
00:03:14,720 --> 00:03:15,760
where

83
00:03:15,760 --> 00:03:17,519
some malware was introduced in

84
00:03:17,519 --> 00:03:19,440
serverless applications

85
00:03:19,440 --> 00:03:21,760
and this is the first time that it is at

86
00:03:21,760 --> 00:03:23,120
this scale but

87
00:03:23,120 --> 00:03:25,360
again this is only the beginning

88
00:03:25,360 --> 00:03:27,280
and also all the

89
00:03:27,280 --> 00:03:29,680
well-known vulnerabilities

90
00:03:29,680 --> 00:03:32,640
like log fortune is one one example

91
00:03:32,640 --> 00:03:33,599
uh

92
00:03:33,599 --> 00:03:36,080
it is not specific to serverless but it

93
00:03:36,080 --> 00:03:37,519
is also relevant for serverless

94
00:03:37,519 --> 00:03:40,080
application

95
00:03:40,959 --> 00:03:42,799
serverless is not

96
00:03:42,799 --> 00:03:45,760
just a development pattern it is more

97
00:03:45,760 --> 00:03:48,400
than that we have seen a huge

98
00:03:48,400 --> 00:03:51,120
transformation in the software industry

99
00:03:51,120 --> 00:03:55,040
the way we are developing software

100
00:03:55,040 --> 00:03:57,680
starting from the decision making now

101
00:03:57,680 --> 00:03:59,920
we don't have managers that are deciding

102
00:03:59,920 --> 00:04:02,080
everything but we

103
00:04:02,080 --> 00:04:02,799
we

104
00:04:02,799 --> 00:04:05,680
developers have a lot more power

105
00:04:05,680 --> 00:04:07,840
developers have their say

106
00:04:07,840 --> 00:04:09,280
choosing the right

107
00:04:09,280 --> 00:04:11,439
architecture choosing the right

108
00:04:11,439 --> 00:04:14,720
technology for some patterns

109
00:04:14,720 --> 00:04:18,079
and this goes well with with serverless

110
00:04:18,079 --> 00:04:20,079
the process are different the life

111
00:04:20,079 --> 00:04:22,400
cycles of software

112
00:04:22,400 --> 00:04:24,560
is different we want everything to be

113
00:04:24,560 --> 00:04:26,880
automated we want to deliver value very

114
00:04:26,880 --> 00:04:28,800
fast to the customer

115
00:04:28,800 --> 00:04:32,000
and so we have the devops the devsecops

116
00:04:32,000 --> 00:04:35,040
trends and so on so

117
00:04:35,040 --> 00:04:36,400
this is uh

118
00:04:36,400 --> 00:04:38,560
the world of serverless

119
00:04:38,560 --> 00:04:40,639
and last but not least the architecture

120
00:04:40,639 --> 00:04:42,240
is really different if we are talking

121
00:04:42,240 --> 00:04:45,040
about serverless we are talking

122
00:04:45,040 --> 00:04:47,759
not only microservices but nanoservices

123
00:04:47,759 --> 00:04:50,800
we we have our application is no more a

124
00:04:50,800 --> 00:04:53,680
big monolith but it is splitted in many

125
00:04:53,680 --> 00:04:54,560
many

126
00:04:54,560 --> 00:04:57,440
a very small components very small

127
00:04:57,440 --> 00:04:59,840
services that are communicating

128
00:04:59,840 --> 00:05:02,719
to one another

129
00:05:03,759 --> 00:05:06,160
so this is an example of a serverless

130
00:05:06,160 --> 00:05:08,080
application you can see here the

131
00:05:08,080 --> 00:05:10,560
architecture this is a very small

132
00:05:10,560 --> 00:05:11,840
application

133
00:05:11,840 --> 00:05:15,199
a few dozens of lambda

134
00:05:15,199 --> 00:05:17,600
lambda functions here and other services

135
00:05:17,600 --> 00:05:20,560
you have api gateway and so on this is a

136
00:05:20,560 --> 00:05:22,639
very small application and you you need

137
00:05:22,639 --> 00:05:24,560
to understand that

138
00:05:24,560 --> 00:05:26,320
customers have

139
00:05:26,320 --> 00:05:28,400
hundreds of lambda functions thousands

140
00:05:28,400 --> 00:05:29,680
of lambda function in a single

141
00:05:29,680 --> 00:05:31,759
application

142
00:05:31,759 --> 00:05:33,680
so this is important to remember when we

143
00:05:33,680 --> 00:05:36,160
we will talk about security and how we

144
00:05:36,160 --> 00:05:37,280
can

145
00:05:37,280 --> 00:05:40,240
effectively give a security solution for

146
00:05:40,240 --> 00:05:42,720
others

147
00:05:42,720 --> 00:05:45,199
so if you if we zoom in

148
00:05:45,199 --> 00:05:47,360
in the lambda function

149
00:05:47,360 --> 00:05:50,560
what is the lambda function how it works

150
00:05:50,560 --> 00:05:52,479
you have a

151
00:05:52,479 --> 00:05:54,880
the lambda function

152
00:05:54,880 --> 00:05:56,479
you have your code

153
00:05:56,479 --> 00:05:58,240
in the middle the lambda function this

154
00:05:58,240 --> 00:06:00,080
is your code but your code is not

155
00:06:00,080 --> 00:06:02,639
running in a server you you don't have

156
00:06:02,639 --> 00:06:05,360
as in a traditional web application a

157
00:06:05,360 --> 00:06:08,240
server that is running listening for

158
00:06:08,240 --> 00:06:10,639
a request and so on you have your code

159
00:06:10,639 --> 00:06:12,479
somewhere in the cloud

160
00:06:12,479 --> 00:06:15,280
and when an event is coming in

161
00:06:15,280 --> 00:06:18,880
the cloud provider is creating

162
00:06:18,880 --> 00:06:21,840
a temporary ephemeral container that

163
00:06:21,840 --> 00:06:23,919
will run your code

164
00:06:23,919 --> 00:06:25,520
and this is really new

165
00:06:25,520 --> 00:06:27,360
this is a in the event driven

166
00:06:27,360 --> 00:06:30,160
architecture the events that are

167
00:06:30,160 --> 00:06:31,520
coming through

168
00:06:31,520 --> 00:06:33,919
can come from various places it can come

169
00:06:33,919 --> 00:06:38,000
from not only a rest api but also

170
00:06:38,000 --> 00:06:39,759
uploading a file to a three bucket

171
00:06:39,759 --> 00:06:40,800
changing

172
00:06:40,800 --> 00:06:43,840
some field in a database

173
00:06:43,840 --> 00:06:46,720
and so on and so forth iot and we have a

174
00:06:46,720 --> 00:06:49,680
lot a lot of possible events

175
00:06:49,680 --> 00:06:52,319
each event can trigger your code it will

176
00:06:52,319 --> 00:06:54,800
create a container and run your code and

177
00:06:54,800 --> 00:06:57,280
the container will die a few moments

178
00:06:57,280 --> 00:06:58,720
later

179
00:06:58,720 --> 00:07:00,400
when your code is running it will

180
00:07:00,400 --> 00:07:02,880
interact with many services that are

181
00:07:02,880 --> 00:07:05,039
running in the cloud and in order to

182
00:07:05,039 --> 00:07:06,560
interact with those

183
00:07:06,560 --> 00:07:07,520
uh

184
00:07:07,520 --> 00:07:09,120
services

185
00:07:09,120 --> 00:07:11,120
it requires some permissions and we will

186
00:07:11,120 --> 00:07:14,000
see in more details how the permissions

187
00:07:14,000 --> 00:07:15,759
are

188
00:07:15,759 --> 00:07:17,840
defined and what are the security

189
00:07:17,840 --> 00:07:20,479
implications

190
00:07:20,639 --> 00:07:22,319
with this kind of application we are

191
00:07:22,319 --> 00:07:26,240
losing the perimeter we we no more have

192
00:07:26,240 --> 00:07:28,080
one big monolith application with a

193
00:07:28,080 --> 00:07:30,000
single

194
00:07:30,000 --> 00:07:32,160
with a single place where you can put

195
00:07:32,160 --> 00:07:34,000
security at the entrance and listen

196
00:07:34,000 --> 00:07:35,759
everything and so on

197
00:07:35,759 --> 00:07:36,880
you need

198
00:07:36,880 --> 00:07:37,919
to

199
00:07:37,919 --> 00:07:40,639
secure each and every function in your

200
00:07:40,639 --> 00:07:43,599
application because the events from

201
00:07:43,599 --> 00:07:46,400
attackers can come from anywhere

202
00:07:46,400 --> 00:07:48,879
so you cannot rely on a service that is

203
00:07:48,879 --> 00:07:50,800
an internal service

204
00:07:50,800 --> 00:07:54,080
uh talking only with your code

205
00:07:54,080 --> 00:07:56,400
to be safe you need to secure everything

206
00:07:56,400 --> 00:07:59,840
also the inside

207
00:08:00,479 --> 00:08:02,960
okay so a few more details about lambda

208
00:08:02,960 --> 00:08:05,440
functions

209
00:08:06,240 --> 00:08:08,639
yolanda function as i said

210
00:08:08,639 --> 00:08:10,240
the cloud provider is creating a

211
00:08:10,240 --> 00:08:11,759
temporary

212
00:08:11,759 --> 00:08:13,440
container that will run your code this

213
00:08:13,440 --> 00:08:15,120
temporary container

214
00:08:15,120 --> 00:08:17,440
doesn't really

215
00:08:17,440 --> 00:08:20,319
contain interesting things for an actor

216
00:08:20,319 --> 00:08:22,560
for an attacker that wants to steal your

217
00:08:22,560 --> 00:08:24,639
data and so on

218
00:08:24,639 --> 00:08:27,199
almost all the data is temporary it will

219
00:08:27,199 --> 00:08:29,360
be removed very soon

220
00:08:29,360 --> 00:08:31,599
all the environment is read-only

221
00:08:31,599 --> 00:08:34,799
except for one folder for temporary data

222
00:08:34,799 --> 00:08:37,039
you cannot connect through ssh to the

223
00:08:37,039 --> 00:08:39,200
container

224
00:08:39,200 --> 00:08:42,640
so this is a very particular uh

225
00:08:42,640 --> 00:08:45,200
way and for security that's implication

226
00:08:45,200 --> 00:08:47,519
for instance if you have some

227
00:08:47,519 --> 00:08:49,920
very

228
00:08:50,399 --> 00:08:53,519
critical vulnerability like command

229
00:08:53,519 --> 00:08:55,680
injection code injection

230
00:08:55,680 --> 00:08:57,279
the impact on your serverless

231
00:08:57,279 --> 00:09:00,160
application will not be the same as

232
00:09:00,160 --> 00:09:02,320
for a traditional web application in a

233
00:09:02,320 --> 00:09:04,480
traditional way application you have a

234
00:09:04,480 --> 00:09:07,600
code injection this is game over the

235
00:09:07,600 --> 00:09:09,680
attacker can do everything on the server

236
00:09:09,680 --> 00:09:11,839
but here the attacker will be limited

237
00:09:11,839 --> 00:09:13,760
and we will be how

238
00:09:13,760 --> 00:09:16,240
but two things are interesting here

239
00:09:16,240 --> 00:09:18,640
in the lambda function in the container

240
00:09:18,640 --> 00:09:20,640
you have your code your code is running

241
00:09:20,640 --> 00:09:23,120
there and the source code is in the in

242
00:09:23,120 --> 00:09:24,800
the lambda function in the temporary

243
00:09:24,800 --> 00:09:25,920
container

244
00:09:25,920 --> 00:09:27,440
and not only that

245
00:09:27,440 --> 00:09:28,880
and also very

246
00:09:28,880 --> 00:09:30,959
more interesting thing is that you have

247
00:09:30,959 --> 00:09:34,399
the keys the aws keys we have said that

248
00:09:34,399 --> 00:09:38,000
the small container is

249
00:09:38,000 --> 00:09:40,640
discussing with other services in order

250
00:09:40,640 --> 00:09:41,760
to discuss

251
00:09:41,760 --> 00:09:44,000
it requires permissions and the

252
00:09:44,000 --> 00:09:46,480
permissions are given through the keys

253
00:09:46,480 --> 00:09:48,240
basically the lambda function is telling

254
00:09:48,240 --> 00:09:51,040
to the cloud provider i have the keys

255
00:09:51,040 --> 00:09:52,800
you can check that i have permission i

256
00:09:52,800 --> 00:09:54,560
want to talk with the database i want to

257
00:09:54,560 --> 00:09:58,080
talk with the s3 bucket and so on

258
00:09:58,080 --> 00:10:00,640
so as an attacker i want to see your

259
00:10:00,640 --> 00:10:01,680
card

260
00:10:01,680 --> 00:10:04,240
and i also want to get your keys and

261
00:10:04,240 --> 00:10:06,000
with your keys i will be able to move in

262
00:10:06,000 --> 00:10:08,560
your application to access your database

263
00:10:08,560 --> 00:10:11,040
to access your s3 bucket and so on to

264
00:10:11,040 --> 00:10:15,120
to to take everyone everything i want

265
00:10:15,120 --> 00:10:17,600
so let's take a look at the demo how an

266
00:10:17,600 --> 00:10:19,040
attack look like

267
00:10:19,040 --> 00:10:20,880
in this kind of application

268
00:10:20,880 --> 00:10:22,880
here we will see that we will upload the

269
00:10:22,880 --> 00:10:24,320
file and

270
00:10:24,320 --> 00:10:27,880
through gonna tie

271
00:10:35,920 --> 00:10:38,000
okay so this is a web application that

272
00:10:38,000 --> 00:10:38,959
is a

273
00:10:38,959 --> 00:10:41,760
a based on serverless architecture we

274
00:10:41,760 --> 00:10:42,800
log in

275
00:10:42,800 --> 00:10:45,040
we can see the application the web

276
00:10:45,040 --> 00:10:46,800
interface

277
00:10:46,800 --> 00:10:49,040
we have some form here we want to send a

278
00:10:49,040 --> 00:10:50,560
message to the

279
00:10:50,560 --> 00:10:52,399
to the website

280
00:10:52,399 --> 00:10:55,040
and okay so it works okay but what we

281
00:10:55,040 --> 00:10:57,519
can do here you can see the attach file

282
00:10:57,519 --> 00:10:59,440
we can also send the file

283
00:10:59,440 --> 00:11:02,720
okay so let's try to to send an image

284
00:11:02,720 --> 00:11:03,519
yeah

285
00:11:03,519 --> 00:11:06,160
working we can see the connection the

286
00:11:06,160 --> 00:11:08,480
request and so on

287
00:11:08,480 --> 00:11:10,720
and the the name of the of the file that

288
00:11:10,720 --> 00:11:11,600
is

289
00:11:11,600 --> 00:11:14,320
sent to the to the server it is just a

290
00:11:14,320 --> 00:11:15,519
post

291
00:11:15,519 --> 00:11:18,240
request an upload to s3 bucket but it

292
00:11:18,240 --> 00:11:20,399
triggers many things in the

293
00:11:20,399 --> 00:11:23,279
in the serverless application

294
00:11:23,279 --> 00:11:25,760
so now what we can do here we just we

295
00:11:25,760 --> 00:11:27,760
will just rename the file

296
00:11:27,760 --> 00:11:30,240
and in the file in the file name we will

297
00:11:30,240 --> 00:11:31,360
add some

298
00:11:31,360 --> 00:11:33,120
a curl

299
00:11:33,120 --> 00:11:37,040
request that will extract the data

300
00:11:37,040 --> 00:11:40,160
to our own server so that we will

301
00:11:40,160 --> 00:11:42,480
be able to

302
00:11:42,480 --> 00:11:45,839
to steal all the environment variables

303
00:11:45,839 --> 00:11:47,680
and as i said before in the environment

304
00:11:47,680 --> 00:11:50,160
variables you have the keys

305
00:11:50,160 --> 00:11:54,560
that give you access to other

306
00:11:54,959 --> 00:11:57,440
to other services in the cloud

307
00:11:57,440 --> 00:11:58,399
so

308
00:11:58,399 --> 00:12:01,279
we send the file

309
00:12:01,440 --> 00:12:04,480
and we will see that

310
00:12:05,680 --> 00:12:08,399
in the backend something is running

311
00:12:08,399 --> 00:12:09,760
and

312
00:12:09,760 --> 00:12:12,959
in where nbroc server we get the data we

313
00:12:12,959 --> 00:12:15,360
have received our data

314
00:12:15,360 --> 00:12:19,519
we just decode it it is a base64

315
00:12:19,519 --> 00:12:22,160
decoding the data

316
00:12:22,160 --> 00:12:24,000
and we can see all the environment

317
00:12:24,000 --> 00:12:26,000
variables

318
00:12:26,000 --> 00:12:27,519
we'll clean up

319
00:12:27,519 --> 00:12:30,160
the data in order to define a profile so

320
00:12:30,160 --> 00:12:33,040
that we will be able to use aws

321
00:12:33,040 --> 00:12:35,599
cli

322
00:12:36,320 --> 00:12:39,040
we can see the token the aws access key

323
00:12:39,040 --> 00:12:40,800
the secret access key

324
00:12:40,800 --> 00:12:44,399
we have a profile now that is already

325
00:12:44,399 --> 00:12:46,320
defined

326
00:12:46,320 --> 00:12:48,480
so now that we have the keys we can do

327
00:12:48,480 --> 00:12:50,000
anything we want

328
00:12:50,000 --> 00:12:51,200
with a

329
00:12:51,200 --> 00:12:54,000
standard aws cli

330
00:12:54,000 --> 00:12:56,880
we can do ls on the s3 bucket

331
00:12:56,880 --> 00:13:00,160
we can see that we have

332
00:13:00,639 --> 00:13:02,480
all the s3 buckets we can see the

333
00:13:02,480 --> 00:13:06,839
folders inside the three buckets

334
00:13:07,200 --> 00:13:09,760
we are using the profile yeah

335
00:13:09,760 --> 00:13:11,279
the profile

336
00:13:11,279 --> 00:13:15,279
with the stolen aws keys

337
00:13:15,360 --> 00:13:16,959
so now we can see

338
00:13:16,959 --> 00:13:18,320
all the

339
00:13:18,320 --> 00:13:20,639
the files that are in it

340
00:13:20,639 --> 00:13:22,560
and we will be able to

341
00:13:22,560 --> 00:13:24,480
download the file also

342
00:13:24,480 --> 00:13:25,760
that we are

343
00:13:25,760 --> 00:13:30,120
this is the downloading of the file

344
00:13:34,160 --> 00:13:36,639
yeah just a second

345
00:13:36,639 --> 00:13:37,920
we'll see

346
00:13:37,920 --> 00:13:40,800
name of the file

347
00:13:40,880 --> 00:13:44,639
downloading it putting the file in our

348
00:13:44,639 --> 00:13:45,760
local

349
00:13:45,760 --> 00:13:49,199
thump folder

350
00:13:49,199 --> 00:13:52,639
we can take a look of the file

351
00:13:53,040 --> 00:13:54,959
and we will see that not only that we

352
00:13:54,959 --> 00:13:57,360
can see and access the file but we can

353
00:13:57,360 --> 00:13:59,279
also

354
00:13:59,279 --> 00:14:00,800
modify it

355
00:14:00,800 --> 00:14:02,800
now we are modify it

356
00:14:02,800 --> 00:14:06,240
modifying the file locally

357
00:14:07,920 --> 00:14:10,240
okay so small edit

358
00:14:10,240 --> 00:14:11,920
and now that we have modified the file

359
00:14:11,920 --> 00:14:14,560
locally we can also upload a new file in

360
00:14:14,560 --> 00:14:17,839
the s3 buckets so we can

361
00:14:17,920 --> 00:14:21,120
basically edit anything we want in the

362
00:14:21,120 --> 00:14:24,480
street bucket of the customers

363
00:14:27,839 --> 00:14:30,959
okay this is done we can now

364
00:14:30,959 --> 00:14:32,720
ls again and we can see the files that

365
00:14:32,720 --> 00:14:34,399
we have just uploaded

366
00:14:34,399 --> 00:14:35,199
so

367
00:14:35,199 --> 00:14:37,600
this is to show you how we can

368
00:14:37,600 --> 00:14:40,880
perform an attack on a serverless

369
00:14:40,880 --> 00:14:43,880
application

370
00:14:44,959 --> 00:14:46,480
okay so now

371
00:14:46,480 --> 00:14:48,480
let's take a look at the small example

372
00:14:48,480 --> 00:14:50,720
we have here a small lambda function

373
00:14:50,720 --> 00:14:52,399
this is the chord

374
00:14:52,399 --> 00:14:55,360
small example just taking an event

375
00:14:55,360 --> 00:14:57,519
handling this event and you can see

376
00:14:57,519 --> 00:14:58,480
inside

377
00:14:58,480 --> 00:15:01,120
it is doing some access to a dynamodb

378
00:15:01,120 --> 00:15:03,680
database

379
00:15:03,680 --> 00:15:05,519
just patching

380
00:15:05,519 --> 00:15:07,279
an item putting a new item in the

381
00:15:07,279 --> 00:15:10,880
database you can see here in the red box

382
00:15:10,880 --> 00:15:13,920
we have the pet item in order to

383
00:15:13,920 --> 00:15:15,760
to make it work the developer will write

384
00:15:15,760 --> 00:15:18,240
the code try to run it will not work

385
00:15:18,240 --> 00:15:20,800
because the number function doesn't have

386
00:15:20,800 --> 00:15:22,880
access to the database in order to have

387
00:15:22,880 --> 00:15:24,880
access you need to change the

388
00:15:24,880 --> 00:15:27,760
configuration and give the lambda

389
00:15:27,760 --> 00:15:30,399
function access to the database

390
00:15:30,399 --> 00:15:33,199
now most developers are not security

391
00:15:33,199 --> 00:15:35,120
experts they are just looking stack

392
00:15:35,120 --> 00:15:37,680
overflow google it

393
00:15:37,680 --> 00:15:39,600
my function is not working i have no

394
00:15:39,600 --> 00:15:41,839
access to the database how can i make it

395
00:15:41,839 --> 00:15:42,720
work

396
00:15:42,720 --> 00:15:44,880
and so you will find easily in stack

397
00:15:44,880 --> 00:15:47,120
overflow many people

398
00:15:47,120 --> 00:15:49,839
many good people that will tell you

399
00:15:49,839 --> 00:15:51,600
to put this

400
00:15:51,600 --> 00:15:54,320
permission and great it will work but

401
00:15:54,320 --> 00:15:55,839
there is a big problem this is a big

402
00:15:55,839 --> 00:15:58,800
mistake here the big mistake is the star

403
00:15:58,800 --> 00:16:01,360
you are a wild card here and basically

404
00:16:01,360 --> 00:16:03,360
this function only need to put a new

405
00:16:03,360 --> 00:16:05,120
item in the database

406
00:16:05,120 --> 00:16:07,040
but you are you are giving

407
00:16:07,040 --> 00:16:08,800
permission full permission to the

408
00:16:08,800 --> 00:16:11,680
database and not only full permission to

409
00:16:11,680 --> 00:16:14,560
do any action to delete all the database

410
00:16:14,560 --> 00:16:17,440
to read the database and so on but also

411
00:16:17,440 --> 00:16:20,800
to all the tables in that database

412
00:16:20,800 --> 00:16:24,079
it means that this function only needs a

413
00:16:24,079 --> 00:16:26,639
very specific access to this database

414
00:16:26,639 --> 00:16:29,199
for one particular table but you get you

415
00:16:29,199 --> 00:16:30,959
give access to everything so yes it is

416
00:16:30,959 --> 00:16:32,079
working

417
00:16:32,079 --> 00:16:34,560
but as an attacker i am very happy if i

418
00:16:34,560 --> 00:16:37,279
get your keys now i can do anything i

419
00:16:37,279 --> 00:16:40,160
want in the s3 bucket

420
00:16:40,160 --> 00:16:43,040
so what you need to do in order to

421
00:16:43,040 --> 00:16:44,639
er

422
00:16:44,639 --> 00:16:47,199
to make more secure and to block the

423
00:16:47,199 --> 00:16:48,959
attacker to limit

424
00:16:48,959 --> 00:16:51,759
the blast radius of the of the attacker

425
00:16:51,759 --> 00:16:54,079
you need to give a very specific

426
00:16:54,079 --> 00:16:56,480
uh permission to your lambda function

427
00:16:56,480 --> 00:16:59,440
only the prototype action and only the

428
00:16:59,440 --> 00:17:01,839
relevant table so that even if some

429
00:17:01,839 --> 00:17:04,319
attacker get access to your keys to your

430
00:17:04,319 --> 00:17:05,839
lambda function

431
00:17:05,839 --> 00:17:07,839
you will not be able to do many things

432
00:17:07,839 --> 00:17:10,079
just add a new item in the database will

433
00:17:10,079 --> 00:17:12,559
not be able to delete will not be able

434
00:17:12,559 --> 00:17:14,720
to read sensitive information for the

435
00:17:14,720 --> 00:17:18,400
database and so on

436
00:17:18,400 --> 00:17:19,520
so now

437
00:17:19,520 --> 00:17:21,439
we can see how we can

438
00:17:21,439 --> 00:17:24,000
add more security in in the lambda

439
00:17:24,000 --> 00:17:25,679
function but

440
00:17:25,679 --> 00:17:27,199
remember

441
00:17:27,199 --> 00:17:29,360
we don't have only one lambda function

442
00:17:29,360 --> 00:17:32,080
we have a lot dozens hundreds thousands

443
00:17:32,080 --> 00:17:34,320
of lambda functions in one application

444
00:17:34,320 --> 00:17:36,320
we have seen customers with

445
00:17:36,320 --> 00:17:39,200
million uh more than a million of lambda

446
00:17:39,200 --> 00:17:42,400
functions so how can you do this process

447
00:17:42,400 --> 00:17:45,440
at scale how can you check for each and

448
00:17:45,440 --> 00:17:47,280
every lambda function

449
00:17:47,280 --> 00:17:49,600
that it has the correct condition it is

450
00:17:49,600 --> 00:17:52,719
not over permissioned

451
00:17:53,840 --> 00:17:55,840
so as we said we have a

452
00:17:55,840 --> 00:17:57,360
scale issue here

453
00:17:57,360 --> 00:17:59,440
we have a lot of services and not only

454
00:17:59,440 --> 00:18:02,880
that the code is constantly evolving

455
00:18:02,880 --> 00:18:04,960
we are very frequent deployment as we

456
00:18:04,960 --> 00:18:06,720
said at the beginning

457
00:18:06,720 --> 00:18:09,440
with a fast ci cd

458
00:18:09,440 --> 00:18:10,960
the devsecops and so on we have

459
00:18:10,960 --> 00:18:13,120
everything automated we have a lot of

460
00:18:13,120 --> 00:18:16,240
new deployments every every day and so

461
00:18:16,240 --> 00:18:18,400
anytime we change the code you need to

462
00:18:18,400 --> 00:18:20,080
check that it corresponds to the

463
00:18:20,080 --> 00:18:21,840
permission

464
00:18:21,840 --> 00:18:24,400
so it is a lot of work it cannot be done

465
00:18:24,400 --> 00:18:25,520
manually

466
00:18:25,520 --> 00:18:27,760
if it is not automated it will not

467
00:18:27,760 --> 00:18:28,960
happen

468
00:18:28,960 --> 00:18:31,840
so we need some automatic way

469
00:18:31,840 --> 00:18:33,520
to do that

470
00:18:33,520 --> 00:18:35,280
it's difficult to understand what is

471
00:18:35,280 --> 00:18:38,000
connected to what in those architecture

472
00:18:38,000 --> 00:18:40,000
also

473
00:18:40,000 --> 00:18:41,760
we have many developers who cannot

474
00:18:41,760 --> 00:18:43,760
really rely on the developers

475
00:18:43,760 --> 00:18:45,679
the developers are not security experts

476
00:18:45,679 --> 00:18:48,960
and it's hard for them uh to to ensure

477
00:18:48,960 --> 00:18:50,799
security for a large large scale

478
00:18:50,799 --> 00:18:52,240
application

479
00:18:52,240 --> 00:18:54,559
um

480
00:18:54,559 --> 00:18:57,200
so let's move on uh so now that we

481
00:18:57,200 --> 00:18:59,679
understand a bit more uh what are the

482
00:18:59,679 --> 00:19:03,120
challenges uh related to security of

483
00:19:03,120 --> 00:19:05,360
serverless application

484
00:19:05,360 --> 00:19:07,520
can we just use the

485
00:19:07,520 --> 00:19:10,720
existing security tools that

486
00:19:10,720 --> 00:19:12,880
we have used until now yes we have a lot

487
00:19:12,880 --> 00:19:16,320
of security testing tools uh how can we

488
00:19:16,320 --> 00:19:18,640
leverage those tools in order to get

489
00:19:18,640 --> 00:19:21,120
more security

490
00:19:21,120 --> 00:19:23,600
so let's take a small example this is a

491
00:19:23,600 --> 00:19:28,080
case study from aws a very very small

492
00:19:28,080 --> 00:19:30,240
serverless application you have three

493
00:19:30,240 --> 00:19:32,000
lambda functions here and a few other

494
00:19:32,000 --> 00:19:33,200
services

495
00:19:33,200 --> 00:19:34,320
and

496
00:19:34,320 --> 00:19:37,120
it is a irobot that is basically sending

497
00:19:37,120 --> 00:19:40,000
a registering request

498
00:19:40,000 --> 00:19:41,360
to the server

499
00:19:41,360 --> 00:19:42,880
not to the server to the serverless

500
00:19:42,880 --> 00:19:45,200
application to an api that will trigger

501
00:19:45,200 --> 00:19:47,360
a lot of events inside

502
00:19:47,360 --> 00:19:50,840
and okay so i want to secure this

503
00:19:50,840 --> 00:19:54,080
function uh i can use sca everybody

504
00:19:54,080 --> 00:19:56,320
knows sca sca

505
00:19:56,320 --> 00:19:58,480
will able to to give you security

506
00:19:58,480 --> 00:20:00,720
warnings to to tell you that you are

507
00:20:00,720 --> 00:20:06,960
using an outdated vulnerable uh

508
00:20:06,960 --> 00:20:08,480
dependency

509
00:20:08,480 --> 00:20:10,880
your third party code may be vulnerable

510
00:20:10,880 --> 00:20:14,080
unknown cvs and so on but if you do that

511
00:20:14,080 --> 00:20:15,679
that's it's great you need to do that

512
00:20:15,679 --> 00:20:19,120
right but it it will only address a very

513
00:20:19,120 --> 00:20:21,200
small part of the problem

514
00:20:21,200 --> 00:20:22,400
you

515
00:20:22,400 --> 00:20:23,600
you will

516
00:20:23,600 --> 00:20:26,640
only cover the security

517
00:20:26,640 --> 00:20:29,039
vulnerabilities that you are importing

518
00:20:29,039 --> 00:20:30,880
with your

519
00:20:30,880 --> 00:20:32,559
dependencies

520
00:20:32,559 --> 00:20:34,320
and

521
00:20:34,320 --> 00:20:36,960
recent research i've shown that it

522
00:20:36,960 --> 00:20:38,960
covers only about 10 percent of your

523
00:20:38,960 --> 00:20:41,440
code that is actually running even if

524
00:20:41,440 --> 00:20:44,080
you don't you import a lot

525
00:20:44,080 --> 00:20:45,679
of

526
00:20:45,679 --> 00:20:47,360
third-party a lot of open source

527
00:20:47,360 --> 00:20:48,400
libraries

528
00:20:48,400 --> 00:20:50,559
most of the library are not actually

529
00:20:50,559 --> 00:20:52,720
running with your application and if you

530
00:20:52,720 --> 00:20:55,600
take a look only as a running code it is

531
00:20:55,600 --> 00:20:58,400
only about 10 of the applications so

532
00:20:58,400 --> 00:21:00,400
this is great but this is not enough

533
00:21:00,400 --> 00:21:02,400
obviously

534
00:21:02,400 --> 00:21:06,240
what about iac infrastructure has code

535
00:21:06,240 --> 00:21:08,400
you have tools you have even free tools

536
00:21:08,400 --> 00:21:11,200
that are available on the market

537
00:21:11,200 --> 00:21:13,840
that are scanning your configuration

538
00:21:13,840 --> 00:21:17,120
your terraform your kubernetes and so on

539
00:21:17,120 --> 00:21:19,679
able to give security warnings

540
00:21:19,679 --> 00:21:22,799
but this will be able to tell you oh you

541
00:21:22,799 --> 00:21:24,960
are not using encryption on this

542
00:21:24,960 --> 00:21:27,440
particular service but it will not

543
00:21:27,440 --> 00:21:29,919
address the whole picture it will not be

544
00:21:29,919 --> 00:21:33,280
able to address for instance

545
00:21:33,280 --> 00:21:35,760
the list privilege violations that we

546
00:21:35,760 --> 00:21:38,240
have seen before

547
00:21:38,240 --> 00:21:40,640
and it has zero code coverage it is not

548
00:21:40,640 --> 00:21:42,880
scanning your code it is only scanning

549
00:21:42,880 --> 00:21:44,400
the configuration

550
00:21:44,400 --> 00:21:47,679
the configuration file of your

551
00:21:47,679 --> 00:21:49,840
iic

552
00:21:49,840 --> 00:21:51,760
so what about sas

553
00:21:51,760 --> 00:21:54,799
fast is static analysis it is actually

554
00:21:54,799 --> 00:21:56,799
looking at your code looking at your qr

555
00:21:56,799 --> 00:21:57,840
code

556
00:21:57,840 --> 00:22:00,480
looking for injection vulnerabilities

557
00:22:00,480 --> 00:22:02,240
and so on a lot of

558
00:22:02,240 --> 00:22:05,120
possible vulnerabilities in your code

559
00:22:05,120 --> 00:22:07,840
but there is a big problem

560
00:22:07,840 --> 00:22:10,000
when you are if you have already used

561
00:22:10,000 --> 00:22:11,600
some sas tools

562
00:22:11,600 --> 00:22:12,480
you

563
00:22:12,480 --> 00:22:14,320
probably already know that you have a

564
00:22:14,320 --> 00:22:16,480
lot of false positives a lot of false

565
00:22:16,480 --> 00:22:19,039
alarms and this is a big problem and

566
00:22:19,039 --> 00:22:21,440
even more in the serverless architecture

567
00:22:21,440 --> 00:22:23,200
because we have seen that not everything

568
00:22:23,200 --> 00:22:25,280
is in the code you don't have one big

569
00:22:25,280 --> 00:22:27,520
monolith with everything inside all the

570
00:22:27,520 --> 00:22:29,679
connections between the services are

571
00:22:29,679 --> 00:22:32,159
inside the configuration not in the code

572
00:22:32,159 --> 00:22:34,240
and the sas tool is completely blind to

573
00:22:34,240 --> 00:22:37,200
that this the software is only looking

574
00:22:37,200 --> 00:22:38,880
at your as the card of the virtual

575
00:22:38,880 --> 00:22:40,880
lambda function it doesn't know the

576
00:22:40,880 --> 00:22:42,559
connection between the

577
00:22:42,559 --> 00:22:43,919
the services

578
00:22:43,919 --> 00:22:46,640
so it will give even more false positive

579
00:22:46,640 --> 00:22:48,240
in this case

580
00:22:48,240 --> 00:22:50,159
so this is a big problem

581
00:22:50,159 --> 00:22:52,400
and also it doesn't address the least

582
00:22:52,400 --> 00:22:56,320
privilege violations that you can have

583
00:22:57,919 --> 00:23:01,360
so what about ios i asked interactive

584
00:23:01,360 --> 00:23:04,400
security testing

585
00:23:04,400 --> 00:23:07,039
we hear that it is much more accurate

586
00:23:07,039 --> 00:23:09,600
and reliable we have less false positive

587
00:23:09,600 --> 00:23:11,919
and so on but if you want to deploy some

588
00:23:11,919 --> 00:23:14,559
ios you need to instrument your server

589
00:23:14,559 --> 00:23:15,840
right

590
00:23:15,840 --> 00:23:16,799
and

591
00:23:16,799 --> 00:23:19,039
we are serverless here

592
00:23:19,039 --> 00:23:21,520
with a traditional application you

593
00:23:21,520 --> 00:23:24,480
instrument your server when you are

594
00:23:24,480 --> 00:23:26,240
making your server up

595
00:23:26,240 --> 00:23:27,280
once

596
00:23:27,280 --> 00:23:30,400
and after that it is instrumenting

597
00:23:30,400 --> 00:23:33,600
listening to the traffic and so on

598
00:23:33,600 --> 00:23:35,679
but with a serverless application when

599
00:23:35,679 --> 00:23:38,080
you create a new container every time

600
00:23:38,080 --> 00:23:41,279
you cannot really do efficiently as an

601
00:23:41,279 --> 00:23:42,880
instrumentation

602
00:23:42,880 --> 00:23:44,880
for each and every small container that

603
00:23:44,880 --> 00:23:46,880
is created every time

604
00:23:46,880 --> 00:23:48,480
containers are leaving for only for a

605
00:23:48,480 --> 00:23:50,960
very short period of time and time is

606
00:23:50,960 --> 00:23:53,440
critical instrumentation takes time this

607
00:23:53,440 --> 00:23:54,960
is the problem

608
00:23:54,960 --> 00:23:57,120
and there is no actual

609
00:23:57,120 --> 00:23:59,520
solution in the market for now

610
00:23:59,520 --> 00:24:02,559
doing some miast and serverless

611
00:24:02,559 --> 00:24:04,400
so what about dust

612
00:24:04,400 --> 00:24:05,600
dynamic

613
00:24:05,600 --> 00:24:08,559
security testing

614
00:24:08,559 --> 00:24:10,720
dynamics you can do some dynamic

615
00:24:10,720 --> 00:24:12,880
testing here with your application

616
00:24:12,880 --> 00:24:15,120
basically if you want to use dust you

617
00:24:15,120 --> 00:24:16,880
need to find an end point of your

618
00:24:16,880 --> 00:24:19,520
application send a request

619
00:24:19,520 --> 00:24:21,440
and the dust will

620
00:24:21,440 --> 00:24:22,559
craft

621
00:24:22,559 --> 00:24:25,360
the payload of

622
00:24:25,760 --> 00:24:27,679
the payload to your api

623
00:24:27,679 --> 00:24:30,400
try to inject some malicious data inside

624
00:24:30,400 --> 00:24:32,880
some malicious load and and see what is

625
00:24:32,880 --> 00:24:35,200
the behavior of your application

626
00:24:35,200 --> 00:24:37,440
but there is a big problem here

627
00:24:37,440 --> 00:24:39,520
this is a coverage problem

628
00:24:39,520 --> 00:24:41,840
because if you take a look at this kind

629
00:24:41,840 --> 00:24:43,279
of application

630
00:24:43,279 --> 00:24:46,480
the dust will send a request

631
00:24:46,480 --> 00:24:47,760
and

632
00:24:47,760 --> 00:24:50,640
most likely you will only get a response

633
00:24:50,640 --> 00:24:54,559
200 okay i have received the request i

634
00:24:54,559 --> 00:24:56,159
acknowledge that i have resized the

635
00:24:56,159 --> 00:24:57,440
request

636
00:24:57,440 --> 00:24:59,760
but most of the logic of the application

637
00:24:59,760 --> 00:25:02,159
is inside in other services because it

638
00:25:02,159 --> 00:25:05,120
is an even driven architecture

639
00:25:05,120 --> 00:25:07,600
so the dust will only only able to

640
00:25:07,600 --> 00:25:10,320
discover what is

641
00:25:10,320 --> 00:25:13,840
really very close to to your rest api

642
00:25:13,840 --> 00:25:16,559
and everything that is inside the dust

643
00:25:16,559 --> 00:25:18,799
will be completely blind to

644
00:25:18,799 --> 00:25:20,960
to what is occurring in the background

645
00:25:20,960 --> 00:25:23,120
of your application so this is only

646
00:25:23,120 --> 00:25:25,520
superficial and it will not give you

647
00:25:25,520 --> 00:25:28,640
satisfying coverage

648
00:25:28,640 --> 00:25:32,400
so we need something else right

649
00:25:32,400 --> 00:25:36,400
so let's try to imagine what we can

650
00:25:36,400 --> 00:25:39,440
get as a perfect security solution for

651
00:25:39,440 --> 00:25:42,440
serverless

652
00:25:43,200 --> 00:25:45,120
okay

653
00:25:45,120 --> 00:25:46,720
so we have here

654
00:25:46,720 --> 00:25:50,159
our traditional cicg

655
00:25:50,159 --> 00:25:52,080
for a modern application it's a

656
00:25:52,080 --> 00:25:54,000
serverless application

657
00:25:54,000 --> 00:25:55,840
and you have a developer you have an

658
00:25:55,840 --> 00:25:57,279
application

659
00:25:57,279 --> 00:26:00,640
and upset people here

660
00:26:01,039 --> 00:26:03,600
what kind of solution do you want to

661
00:26:03,600 --> 00:26:05,919
ensure security of your application

662
00:26:05,919 --> 00:26:08,000
you need something that will cover

663
00:26:08,000 --> 00:26:11,279
everything all the stages of your cicd

664
00:26:11,279 --> 00:26:12,320
pipeline

665
00:26:12,320 --> 00:26:14,640
you want your codes to be scanned you

666
00:26:14,640 --> 00:26:16,799
want to configuration to be scanned you

667
00:26:16,799 --> 00:26:18,880
want it to be accurate

668
00:26:18,880 --> 00:26:21,600
you want it to be

669
00:26:21,600 --> 00:26:23,919
friendly to the developers very easy to

670
00:26:23,919 --> 00:26:24,880
use

671
00:26:24,880 --> 00:26:27,200
not yet a lot of false positive and so

672
00:26:27,200 --> 00:26:28,000
on

673
00:26:28,000 --> 00:26:29,039
so

674
00:26:29,039 --> 00:26:31,279
this is the dream that

675
00:26:31,279 --> 00:26:33,600
the dream security testing tool that you

676
00:26:33,600 --> 00:26:36,559
that you can think of

677
00:26:37,279 --> 00:26:38,559
uh going

678
00:26:38,559 --> 00:26:40,400
into more details

679
00:26:40,400 --> 00:26:42,000
let's say that we want something that

680
00:26:42,000 --> 00:26:42,960
will

681
00:26:42,960 --> 00:26:45,440
install automatically maybe one line of

682
00:26:45,440 --> 00:26:48,080
code maybe one three clicks

683
00:26:48,080 --> 00:26:50,080
only in the in the ui

684
00:26:50,080 --> 00:26:53,039
something that will go inside your cloud

685
00:26:53,039 --> 00:26:55,279
and be able to do everything

686
00:26:55,279 --> 00:26:56,960
so what is everything

687
00:26:56,960 --> 00:26:59,200
the first thing is to discover

688
00:26:59,200 --> 00:27:01,360
what are the assets that you have in the

689
00:27:01,360 --> 00:27:02,960
cloud

690
00:27:02,960 --> 00:27:05,200
what are your resources what are your

691
00:27:05,200 --> 00:27:06,640
lambda functions

692
00:27:06,640 --> 00:27:09,600
your databases your s3 bucket all the

693
00:27:09,600 --> 00:27:11,840
services that are deployed in your cloud

694
00:27:11,840 --> 00:27:13,520
if you are talking to customers or

695
00:27:13,520 --> 00:27:16,720
people that are using serverless

696
00:27:16,720 --> 00:27:19,679
in a more general way cloud application

697
00:27:19,679 --> 00:27:22,799
it is very hard to get visibility on

698
00:27:22,799 --> 00:27:25,440
what you really have in your cloud

699
00:27:25,440 --> 00:27:28,640
many many times

700
00:27:28,640 --> 00:27:31,200
we just run this discovery

701
00:27:31,200 --> 00:27:33,919
and the customers are surprised to see

702
00:27:33,919 --> 00:27:36,320
oh i don't know this function

703
00:27:36,320 --> 00:27:38,640
from where it is it is coming

704
00:27:38,640 --> 00:27:40,640
maybe some developers

705
00:27:40,640 --> 00:27:42,720
that has done some experiments and a

706
00:27:42,720 --> 00:27:45,360
lambda function forget about it and now

707
00:27:45,360 --> 00:27:47,600
it is in the cloud any vulnerability

708
00:27:47,600 --> 00:27:48,480
here

709
00:27:48,480 --> 00:27:50,720
you can get access to an attacker that

710
00:27:50,720 --> 00:27:52,559
will be able to enter your application

711
00:27:52,559 --> 00:27:53,919
and so on

712
00:27:53,919 --> 00:27:57,679
so this visibility this discovery

713
00:27:57,679 --> 00:28:00,720
stage is very very important

714
00:28:00,720 --> 00:28:04,080
the second thing is that once

715
00:28:04,080 --> 00:28:04,880
uh

716
00:28:04,880 --> 00:28:07,440
you already have a map of everything

717
00:28:07,440 --> 00:28:09,279
that is inside your cloud

718
00:28:09,279 --> 00:28:12,399
you want it to be scanned and analyzed

719
00:28:12,399 --> 00:28:13,760
you want to discover all the

720
00:28:13,760 --> 00:28:15,760
vulnerabilities that are inside your

721
00:28:15,760 --> 00:28:16,640
code

722
00:28:16,640 --> 00:28:18,960
also the vulnerabilities that you are

723
00:28:18,960 --> 00:28:22,000
importing in the third-party libraries

724
00:28:22,000 --> 00:28:25,039
you want also to unders the tool you

725
00:28:25,039 --> 00:28:27,200
want the tool to understand the flow

726
00:28:27,200 --> 00:28:28,960
in this

727
00:28:28,960 --> 00:28:31,440
in this serverless application because

728
00:28:31,440 --> 00:28:33,440
remember you have a lot of micro

729
00:28:33,440 --> 00:28:36,000
services talking to one another

730
00:28:36,000 --> 00:28:36,720
so

731
00:28:36,720 --> 00:28:39,120
even if you know what is in your cloud

732
00:28:39,120 --> 00:28:41,360
it is not easy to understand what are

733
00:28:41,360 --> 00:28:43,600
the possible flow and who is talking to

734
00:28:43,600 --> 00:28:46,559
to who and what is connected to what so

735
00:28:46,559 --> 00:28:48,080
this is something that you want to be

736
00:28:48,080 --> 00:28:50,080
analyzed

737
00:28:50,080 --> 00:28:52,960
and then you will get some kind of

738
00:28:52,960 --> 00:28:54,960
list of vulnerabilities that you need to

739
00:28:54,960 --> 00:28:57,120
address

740
00:28:57,120 --> 00:28:58,799
and

741
00:28:58,799 --> 00:29:00,880
when we have talked about sas for

742
00:29:00,880 --> 00:29:02,480
example when you get a lot of pulse

743
00:29:02,480 --> 00:29:03,600
positive

744
00:29:03,600 --> 00:29:06,159
here you want to to have some more

745
00:29:06,159 --> 00:29:09,200
confidence that the results that you get

746
00:29:09,200 --> 00:29:12,080
from the tool are really real results

747
00:29:12,080 --> 00:29:13,039
and

748
00:29:13,039 --> 00:29:15,440
you don't want to lose your time

749
00:29:15,440 --> 00:29:18,320
investigating what is the problem with a

750
00:29:18,320 --> 00:29:20,799
result that is only a mistake of the

751
00:29:20,799 --> 00:29:22,159
tomb

752
00:29:22,159 --> 00:29:24,799
so one additional step that you would

753
00:29:24,799 --> 00:29:26,399
like to have here

754
00:29:26,399 --> 00:29:28,480
is some kind of simulation

755
00:29:28,480 --> 00:29:30,320
if you have something that is inside

756
00:29:30,320 --> 00:29:32,720
your cloud security solution inside your

757
00:29:32,720 --> 00:29:34,159
cloud

758
00:29:34,159 --> 00:29:35,919
would be able to

759
00:29:35,919 --> 00:29:37,760
when we have discovered some possible

760
00:29:37,760 --> 00:29:40,000
vulnerability

761
00:29:40,000 --> 00:29:41,440
we have

762
00:29:41,440 --> 00:29:43,840
discovered what are the possible payload

763
00:29:43,840 --> 00:29:46,559
that can trigger this visibility we want

764
00:29:46,559 --> 00:29:48,640
to test it we want to simulate it we

765
00:29:48,640 --> 00:29:50,799
want to send this payload

766
00:29:50,799 --> 00:29:53,200
we want to track what is the behavior of

767
00:29:53,200 --> 00:29:55,760
your application and to check if it is

768
00:29:55,760 --> 00:29:58,159
really vulnerable or not

769
00:29:58,159 --> 00:30:01,760
so because the solution is in the in the

770
00:30:01,760 --> 00:30:04,240
cloud inside your environment

771
00:30:04,240 --> 00:30:08,080
it is able to simulate and also to track

772
00:30:08,080 --> 00:30:11,360
the behavior of your application

773
00:30:11,360 --> 00:30:12,799
for instance

774
00:30:12,799 --> 00:30:14,399
if it is sending some payload in the

775
00:30:14,399 --> 00:30:17,200
lambda function and you expect a new

776
00:30:17,200 --> 00:30:20,399
file to be created on the s3 bucket

777
00:30:20,399 --> 00:30:22,080
after it is running you can check in the

778
00:30:22,080 --> 00:30:24,240
s3 bucket if the file exists

779
00:30:24,240 --> 00:30:27,360
and so you can check that uh the exploit

780
00:30:27,360 --> 00:30:31,200
of your vulnerability really works

781
00:30:31,200 --> 00:30:34,320
and so this reduced dramatically the

782
00:30:34,320 --> 00:30:37,840
number of false positives

783
00:30:39,039 --> 00:30:41,520
and then after that you need

784
00:30:41,520 --> 00:30:44,000
obviously some reporting

785
00:30:44,000 --> 00:30:46,960
in your uh

786
00:30:46,960 --> 00:30:48,640
in the environment that you are using as

787
00:30:48,640 --> 00:30:51,039
a developer you want to get a slack

788
00:30:51,039 --> 00:30:53,120
message you want to get a

789
00:30:53,120 --> 00:30:54,480
pr

790
00:30:54,480 --> 00:30:55,919
request in your

791
00:30:55,919 --> 00:30:58,240
in your github and so on maybe a mail

792
00:30:58,240 --> 00:31:00,640
maybe something else

793
00:31:00,640 --> 00:31:04,480
whatever you are using you want it to be

794
00:31:04,480 --> 00:31:08,640
as actionable as possible as easy to use

795
00:31:08,640 --> 00:31:10,799
so this is a let's say the dream

796
00:31:10,799 --> 00:31:13,440
solution and this is exactly what we are

797
00:31:13,440 --> 00:31:16,880
building at contrast security this is

798
00:31:16,880 --> 00:31:18,960
what my team are

799
00:31:18,960 --> 00:31:21,519
working on

800
00:31:23,760 --> 00:31:25,600
so that is to

801
00:31:25,600 --> 00:31:27,279
to get a

802
00:31:27,279 --> 00:31:31,039
some example of the kind of result that

803
00:31:31,039 --> 00:31:33,840
you can get from this tool

804
00:31:33,840 --> 00:31:36,080
for instance here we have said privacy

805
00:31:36,080 --> 00:31:39,279
that we have a problem giving too much

806
00:31:39,279 --> 00:31:40,559
permission

807
00:31:40,559 --> 00:31:42,320
to a lambda function

808
00:31:42,320 --> 00:31:44,799
so the kind of results we get from this

809
00:31:44,799 --> 00:31:45,919
tool

810
00:31:45,919 --> 00:31:47,679
is exactly

811
00:31:47,679 --> 00:31:49,840
a

812
00:31:50,559 --> 00:31:53,440
an updated policy that could you can

813
00:31:53,440 --> 00:31:55,840
just copy paste into your into your

814
00:31:55,840 --> 00:31:56,720
cloud

815
00:31:56,720 --> 00:31:58,559
that will

816
00:31:58,559 --> 00:32:00,799
replace the

817
00:32:00,799 --> 00:32:03,440
more the two general permission to a

818
00:32:03,440 --> 00:32:06,159
very specific one that will

819
00:32:06,159 --> 00:32:08,159
help you to

820
00:32:08,159 --> 00:32:11,679
reduce the severity of any attack in

821
00:32:11,679 --> 00:32:14,000
your application

822
00:32:14,000 --> 00:32:15,679
the second kind of things that you can

823
00:32:15,679 --> 00:32:17,200
get

824
00:32:17,200 --> 00:32:19,360
so let's say here you have a common

825
00:32:19,360 --> 00:32:21,840
injection detecting in your code this is

826
00:32:21,840 --> 00:32:24,080
not like a sas result

827
00:32:24,080 --> 00:32:25,679
here

828
00:32:25,679 --> 00:32:27,440
there is this result says that you have

829
00:32:27,440 --> 00:32:30,399
a common injection

830
00:32:30,640 --> 00:32:31,760
we give you

831
00:32:31,760 --> 00:32:34,399
the exact payload that will trigger this

832
00:32:34,399 --> 00:32:36,480
common injection

833
00:32:36,480 --> 00:32:40,640
we are verified that this vulnerability

834
00:32:40,640 --> 00:32:44,159
this exploit is really working and if

835
00:32:44,159 --> 00:32:46,559
you want to reproduce it by yourself you

836
00:32:46,559 --> 00:32:48,799
can just take copy paste the payload

837
00:32:48,799 --> 00:32:49,760
send

838
00:32:49,760 --> 00:32:51,760
an event by yourself and you will see

839
00:32:51,760 --> 00:32:54,399
that the exploit is really working so

840
00:32:54,399 --> 00:32:58,320
obviously this is not a false positive

841
00:32:59,039 --> 00:33:00,799
so if you are interested and want to

842
00:33:00,799 --> 00:33:03,760
know more about serverless security

843
00:33:03,760 --> 00:33:06,159
we have published

844
00:33:06,159 --> 00:33:08,960
os top 10

845
00:33:08,960 --> 00:33:11,840
similar to the

846
00:33:11,840 --> 00:33:13,760
general purpose of us top 10 but there

847
00:33:13,760 --> 00:33:14,960
is a no

848
00:33:14,960 --> 00:33:16,880
serverless top 10

849
00:33:16,880 --> 00:33:20,240
that is more focused on serverless

850
00:33:20,240 --> 00:33:23,039
security risk so you are invited to to

851
00:33:23,039 --> 00:33:24,799
take a look and if you are using

852
00:33:24,799 --> 00:33:26,559
serverless application and you have some

853
00:33:26,559 --> 00:33:28,320
data that you want to share

854
00:33:28,320 --> 00:33:31,440
you can send anonymous data so that

855
00:33:31,440 --> 00:33:33,679
the next versions of

856
00:33:33,679 --> 00:33:38,600
the top 10 will be even more accurate

857
00:33:39,440 --> 00:33:41,440
i will not enter into all the details

858
00:33:41,440 --> 00:33:42,720
here but

859
00:33:42,720 --> 00:33:45,200
this is the top 10 that you can check

860
00:33:45,200 --> 00:33:46,799
out online

861
00:33:46,799 --> 00:33:48,960
and as you can see this is not only

862
00:33:48,960 --> 00:33:52,159
about other privilege function but we

863
00:33:52,159 --> 00:33:54,000
have a lot of

864
00:33:54,000 --> 00:33:56,559
vulnerabilities that are existing in the

865
00:33:56,559 --> 00:33:58,720
serverless application

866
00:33:58,720 --> 00:33:59,440
and

867
00:33:59,440 --> 00:34:03,200
we need to address everything

868
00:34:03,919 --> 00:34:06,320
another open source that you may want to

869
00:34:06,320 --> 00:34:07,440
check out

870
00:34:07,440 --> 00:34:09,679
is a dvsa

871
00:34:09,679 --> 00:34:12,079
this is a

872
00:34:12,079 --> 00:34:14,800
this is a vulnerable application that we

873
00:34:14,800 --> 00:34:16,399
have developed

874
00:34:16,399 --> 00:34:18,480
intentionally vulnerable

875
00:34:18,480 --> 00:34:20,639
in order to to learn

876
00:34:20,639 --> 00:34:23,440
in order to test the security tools

877
00:34:23,440 --> 00:34:25,040
that are really discovering the

878
00:34:25,040 --> 00:34:27,359
vulnerabilities that are inside so you

879
00:34:27,359 --> 00:34:30,239
can take a look you can learn from it

880
00:34:30,239 --> 00:34:32,320
please don't put this in production this

881
00:34:32,320 --> 00:34:33,760
is vulnerable

882
00:34:33,760 --> 00:34:35,679
it will only give you risk in your

883
00:34:35,679 --> 00:34:38,000
environment

884
00:34:38,000 --> 00:34:39,679
and so that's it

885
00:34:39,679 --> 00:34:42,480
any questions

886
00:34:43,520 --> 00:34:46,079
first of all thanks this is very aws

887
00:34:46,079 --> 00:34:47,760
specific can you say how it's different

888
00:34:47,760 --> 00:34:51,280
in gcp or azure

889
00:34:53,918 --> 00:34:57,920
okay yeah sure a very good question yes

890
00:34:57,920 --> 00:35:00,640
around all this talk i'll talk about

891
00:35:00,640 --> 00:35:03,280
aws lambda functions

892
00:35:03,280 --> 00:35:06,320
this is the most popular serverless

893
00:35:06,320 --> 00:35:07,920
vendor for now but

894
00:35:07,920 --> 00:35:09,920
also you have azure you are gcp and you

895
00:35:09,920 --> 00:35:12,240
have other

896
00:35:12,240 --> 00:35:13,599
cloud provider

897
00:35:13,599 --> 00:35:15,119
and

898
00:35:15,119 --> 00:35:18,000
basically the same is

899
00:35:18,000 --> 00:35:21,119
applies also to other vendor and also in

900
00:35:21,119 --> 00:35:23,359
our solution we are

901
00:35:23,359 --> 00:35:25,040
starting to add the

902
00:35:25,040 --> 00:35:26,000
um

903
00:35:26,000 --> 00:35:28,320
support now we are adding support for

904
00:35:28,320 --> 00:35:30,880
azure and it will come also for other

905
00:35:30,880 --> 00:35:31,839
security

906
00:35:31,839 --> 00:35:34,880
cloud provider vandal

907
00:35:35,920 --> 00:35:39,440
any more questions raise a van

908
00:35:41,280 --> 00:35:42,160
no

909
00:35:42,160 --> 00:35:45,720
yeah okay

910
00:35:46,560 --> 00:35:47,680
hello

911
00:35:47,680 --> 00:35:50,560
if i understand correctly all of most of

912
00:35:50,560 --> 00:35:54,400
the exploits are based on rce

913
00:35:55,359 --> 00:35:57,760
with the other privileges

914
00:35:57,760 --> 00:36:00,640
it depends on rce that allows you to

915
00:36:00,640 --> 00:36:02,320
execute code or

916
00:36:02,320 --> 00:36:04,000
retrieve the environment variables to

917
00:36:04,000 --> 00:36:06,079
get their credentials

918
00:36:06,079 --> 00:36:09,200
and do you know of exploits where

919
00:36:09,200 --> 00:36:12,560
without rc you can access other

920
00:36:12,560 --> 00:36:15,200
resources for example sql injection

921
00:36:15,200 --> 00:36:18,079
stuff that but something that is common

922
00:36:18,079 --> 00:36:22,560
in lambda and a serverless

923
00:36:24,839 --> 00:36:27,200
environment yeah thank you for the

924
00:36:27,200 --> 00:36:30,560
question so yes as the demo i have seen

925
00:36:30,560 --> 00:36:32,240
i have shown here

926
00:36:32,240 --> 00:36:33,760
was mostly about

927
00:36:33,760 --> 00:36:36,480
some kind of common injection

928
00:36:36,480 --> 00:36:40,880
stealing the aws keys but obviously

929
00:36:40,880 --> 00:36:43,839
you can do many things without the keys

930
00:36:43,839 --> 00:36:46,480
the keys give you the abilities to to

931
00:36:46,480 --> 00:36:48,160
move from service to service in your

932
00:36:48,160 --> 00:36:50,400
serverless application but if you if

933
00:36:50,400 --> 00:36:51,280
your

934
00:36:51,280 --> 00:36:53,200
number function is talking with an sql

935
00:36:53,200 --> 00:36:54,880
database and you have an secure

936
00:36:54,880 --> 00:36:57,599
injection this is also relevant

937
00:36:57,599 --> 00:36:59,680
for serverless applications this is not

938
00:36:59,680 --> 00:37:01,440
specific to serverless application but

939
00:37:01,440 --> 00:37:04,480
yes also relevant

940
00:37:06,480 --> 00:37:09,520
thank you any more questions

941
00:37:09,520 --> 00:37:11,040
may you

942
00:37:11,040 --> 00:37:13,100
thank you very much

943
00:37:13,100 --> 00:37:16,440
[Music]

944
00:37:17,610 --> 00:37:20,800
[Applause]

