1
00:00:00,290 --> 00:00:03,220
[Music]

2
00:00:03,220 --> 00:00:03,740
[Applause]

3
00:00:03,740 --> 00:00:10,400
[Music]

4
00:00:11,840 --> 00:00:12,799
okay

5
00:00:12,799 --> 00:00:16,400
so who am i

6
00:00:16,400 --> 00:00:17,920
again

7
00:00:17,920 --> 00:00:20,080
okay talking here

8
00:00:20,080 --> 00:00:21,600
i'm an application security team lead at

9
00:00:21,600 --> 00:00:24,160
platika i shifted from software

10
00:00:24,160 --> 00:00:26,320
development and devops to application

11
00:00:26,320 --> 00:00:28,320
security a few years ago i'm also an

12
00:00:28,320 --> 00:00:30,080
open source fan i contribute to wear and

13
00:00:30,080 --> 00:00:32,000
when i can i contributed to some

14
00:00:32,000 --> 00:00:35,440
projects like graffana a metasploit or

15
00:00:35,440 --> 00:00:38,079
shoe shop and others like that i'm also

16
00:00:38,079 --> 00:00:40,160
a bug until my spare time i'm

17
00:00:40,160 --> 00:00:42,480
responsible for a few cvs

18
00:00:42,480 --> 00:00:45,440
mostly on grafana and elasticsearch i'm

19
00:00:45,440 --> 00:00:46,559
also

20
00:00:46,559 --> 00:00:48,800
help securing some well-known companies

21
00:00:48,800 --> 00:00:51,440
and products like microsoft amazon

22
00:00:51,440 --> 00:00:54,239
elasticsearch grafana and medium

23
00:00:54,239 --> 00:00:56,559
i also co-organized the first israeli

24
00:00:56,559 --> 00:00:58,480
bag mounting meetup

25
00:00:58,480 --> 00:01:00,480
and a few fan facts about me before we

26
00:01:00,480 --> 00:01:02,960
continue i can't refuse to a good bill

27
00:01:02,960 --> 00:01:07,600
mostly i prefer ipa or wheat

28
00:01:08,000 --> 00:01:10,560
i'm a parent of two humans and four cats

29
00:01:10,560 --> 00:01:12,640
yeah it's a lot

30
00:01:12,640 --> 00:01:14,720
and my gift selection might be confusing

31
00:01:14,720 --> 00:01:17,840
it's not you it's me

32
00:01:18,400 --> 00:01:20,000
okay so i want to start by telling you a

33
00:01:20,000 --> 00:01:23,439
short story so my wife loves to cook

34
00:01:23,439 --> 00:01:26,080
and she actually cooks pretty well and

35
00:01:26,080 --> 00:01:28,080
in order for her to cook she use recipes

36
00:01:28,080 --> 00:01:29,840
like most of us

37
00:01:29,840 --> 00:01:33,040
and when she uses the recipes she

38
00:01:33,040 --> 00:01:34,960
probably takes some recipes from her

39
00:01:34,960 --> 00:01:37,600
friends or also sends a recipe to her

40
00:01:37,600 --> 00:01:38,560
friends

41
00:01:38,560 --> 00:01:40,479
she also have some recipes that she got

42
00:01:40,479 --> 00:01:43,040
from her mother even her grandmother

43
00:01:43,040 --> 00:01:44,240
and

44
00:01:44,240 --> 00:01:46,399
in the past when someone wanted to

45
00:01:46,399 --> 00:01:48,240
share a recipe with another person they

46
00:01:48,240 --> 00:01:50,320
usually wrote it on a paper

47
00:01:50,320 --> 00:01:53,119
or they like got it on a magazine or

48
00:01:53,119 --> 00:01:55,600
bought a book in order to actually see

49
00:01:55,600 --> 00:01:58,320
the recipes nowadays it's much easier

50
00:01:58,320 --> 00:01:59,920
because you can find a lot of good

51
00:01:59,920 --> 00:02:01,759
recipes on facebook pinterest and other

52
00:02:01,759 --> 00:02:03,439
places like that

53
00:02:03,439 --> 00:02:06,000
so why am i even telling you all that

54
00:02:06,000 --> 00:02:08,639
because developers are pretty much the

55
00:02:08,639 --> 00:02:09,840
same

56
00:02:09,840 --> 00:02:11,840
as someone that wants to cook they have

57
00:02:11,840 --> 00:02:14,560
recipes and they share the recipes

58
00:02:14,560 --> 00:02:16,160
across the internet

59
00:02:16,160 --> 00:02:18,400
well they share the recipes

60
00:02:18,400 --> 00:02:20,959
they are sharing it on places like

61
00:02:20,959 --> 00:02:24,239
it could be on github it could be

62
00:02:24,239 --> 00:02:27,760
a geek lab bitbucket things like that

63
00:02:27,760 --> 00:02:30,239
and it could be on places like dockerhub

64
00:02:30,239 --> 00:02:33,519
mvm maven npm

65
00:02:33,519 --> 00:02:35,280
pipeline and others

66
00:02:35,280 --> 00:02:37,280
and well it's already artifacts or

67
00:02:37,280 --> 00:02:39,120
things like that and it could also be on

68
00:02:39,120 --> 00:02:41,599
places like github gist or basement

69
00:02:41,599 --> 00:02:44,640
where this is mostly snippets or scripts

70
00:02:44,640 --> 00:02:46,879
and things like that

71
00:02:46,879 --> 00:02:48,800
so when people usually talk about data

72
00:02:48,800 --> 00:02:51,360
breaches they're only talking about

73
00:02:51,360 --> 00:02:54,000
some leakage of informational or

74
00:02:54,000 --> 00:02:56,400
personal information like pii or credit

75
00:02:56,400 --> 00:02:57,920
cards but

76
00:02:57,920 --> 00:03:00,239
data breaches also includes other things

77
00:03:00,239 --> 00:03:01,680
like code leakage

78
00:03:01,680 --> 00:03:04,239
and what is the impact of code which is

79
00:03:04,239 --> 00:03:07,200
being leaked it could impact on three

80
00:03:07,200 --> 00:03:08,560
three different aspects one the

81
00:03:08,560 --> 00:03:11,040
intellectual property because

82
00:03:11,040 --> 00:03:13,360
some companies have very sensitive

83
00:03:13,360 --> 00:03:16,319
things in the code like for example the

84
00:03:16,319 --> 00:03:18,480
secret source of how they are doing what

85
00:03:18,480 --> 00:03:20,800
they are doing their product or even ai

86
00:03:20,800 --> 00:03:22,720
algorithms and things like that and if

87
00:03:22,720 --> 00:03:24,799
it falls into the wrong errands then it

88
00:03:24,799 --> 00:03:27,120
can be abused or even used as an

89
00:03:27,120 --> 00:03:30,080
advantage for the competitors to create

90
00:03:30,080 --> 00:03:32,560
a better product it could also be used

91
00:03:32,560 --> 00:03:34,560
for lateral movement let's imagine that

92
00:03:34,560 --> 00:03:36,640
you have secrets on your code like aws

93
00:03:36,640 --> 00:03:39,519
keys then someone can take the aws keys

94
00:03:39,519 --> 00:03:42,400
that he found and act into the aws

95
00:03:42,400 --> 00:03:45,440
account and from there the the way to

96
00:03:45,440 --> 00:03:47,040
actually stealing some personal

97
00:03:47,040 --> 00:03:48,480
information or credit cards is very

98
00:03:48,480 --> 00:03:49,760
small

99
00:03:49,760 --> 00:03:52,799
it could also be used for actually when

100
00:03:52,799 --> 00:03:54,640
when you are seeing the code so now you

101
00:03:54,640 --> 00:03:57,920
can do like a white white um

102
00:03:57,920 --> 00:04:00,560
like a test on the code itself and then

103
00:04:00,560 --> 00:04:02,319
you can find other vulnerabilities like

104
00:04:02,319 --> 00:04:04,319
sql injection or xss and other things

105
00:04:04,319 --> 00:04:05,280
that can

106
00:04:05,280 --> 00:04:06,480
give you some leverage when you're

107
00:04:06,480 --> 00:04:08,480
trying to hack a company it could also

108
00:04:08,480 --> 00:04:10,480
impact for the reputation let's imagine

109
00:04:10,480 --> 00:04:13,200
this is a public company so that means

110
00:04:13,200 --> 00:04:15,599
that the stock will go down and not even

111
00:04:15,599 --> 00:04:16,880
talk about

112
00:04:16,880 --> 00:04:20,399
fines that could be and things like that

113
00:04:20,399 --> 00:04:22,960
so let's see some cases where

114
00:04:22,960 --> 00:04:24,880
companies failed on protecting their

115
00:04:24,880 --> 00:04:28,199
source code

116
00:04:28,240 --> 00:04:30,479
one of the biggest examples is twitch on

117
00:04:30,479 --> 00:04:33,440
twitch case it wasn't only personal

118
00:04:33,440 --> 00:04:34,960
information and the earnings of the

119
00:04:34,960 --> 00:04:38,320
streamers that leaked but also

120
00:04:38,320 --> 00:04:40,320
their code and they had a lot of code

121
00:04:40,320 --> 00:04:42,479
repositories that were linked also

122
00:04:42,479 --> 00:04:45,440
another example is microsoft or intel

123
00:04:45,440 --> 00:04:47,680
in intel's case it was more than 20

124
00:04:47,680 --> 00:04:50,320
gigabytes of data of code that was

125
00:04:50,320 --> 00:04:52,720
dumped online

126
00:04:52,720 --> 00:04:55,199
so i understood that developers are

127
00:04:55,199 --> 00:04:56,960
sharing their code across all the

128
00:04:56,960 --> 00:05:00,160
internet and it sounds in theory that

129
00:05:00,160 --> 00:05:02,560
there is something to act here and to

130
00:05:02,560 --> 00:05:03,680
find

131
00:05:03,680 --> 00:05:07,039
so i wanted to take this theory and

132
00:05:07,039 --> 00:05:08,720
see what i can do so i wanted to break

133
00:05:08,720 --> 00:05:11,840
free from theory

134
00:05:12,160 --> 00:05:14,000
so what i did i conducted a research on

135
00:05:14,000 --> 00:05:17,440
three different big players in this area

136
00:05:17,440 --> 00:05:19,360
one is github the second one is npm and

137
00:05:19,360 --> 00:05:22,400
the third one is docker app

138
00:05:22,400 --> 00:05:24,160
so i'm going to tell you what i found in

139
00:05:24,160 --> 00:05:26,000
each of every one of those just a few

140
00:05:26,000 --> 00:05:27,680
examples not everything of course

141
00:05:27,680 --> 00:05:29,919
because we have only 25 minutes

142
00:05:29,919 --> 00:05:32,000
so on npm for example i found a lot of

143
00:05:32,000 --> 00:05:33,039
private

144
00:05:33,039 --> 00:05:35,280
packages that were supposed to stay

145
00:05:35,280 --> 00:05:37,360
internal but it wasn't internal it was

146
00:05:37,360 --> 00:05:40,320
published to npmjs

147
00:05:40,320 --> 00:05:42,160
in those packages i found for example

148
00:05:42,160 --> 00:05:44,800
user credentials in test files and i was

149
00:05:44,800 --> 00:05:46,479
able to log into production environments

150
00:05:46,479 --> 00:05:48,160
with those credentials

151
00:05:48,160 --> 00:05:50,960
on dockerhub i could find things like

152
00:05:50,960 --> 00:05:53,840
credentials ssh keys api keys the worst

153
00:05:53,840 --> 00:05:56,080
one was for pi pi they used it for

154
00:05:56,080 --> 00:05:58,160
actually publishing their packages to

155
00:05:58,160 --> 00:06:00,639
pipeline i also found license key where

156
00:06:00,639 --> 00:06:02,400
you can see here

157
00:06:02,400 --> 00:06:04,319
and this is a real example a screenshot

158
00:06:04,319 --> 00:06:06,479
of something that i found and of course

159
00:06:06,479 --> 00:06:08,319
some private code that wasn't supposed

160
00:06:08,319 --> 00:06:10,639
to be there i even got acknowledged by

161
00:06:10,639 --> 00:06:12,720
checkpoint for one of my findings in one

162
00:06:12,720 --> 00:06:15,759
of the docker images

163
00:06:15,759 --> 00:06:18,479
on github it was the most interesting

164
00:06:18,479 --> 00:06:20,319
part because i found a lot of things

165
00:06:20,319 --> 00:06:22,400
there and i keep finding things i even

166
00:06:22,400 --> 00:06:24,400
found one when working on my demo for

167
00:06:24,400 --> 00:06:26,560
this presentation

168
00:06:26,560 --> 00:06:28,960
and i'm going to show you it later so i

169
00:06:28,960 --> 00:06:31,199
found super user credentials to a cdn

170
00:06:31,199 --> 00:06:32,720
account of one of the largest israeli

171
00:06:32,720 --> 00:06:35,280
newspapers you can see here the the

172
00:06:35,280 --> 00:06:37,840
thing that i found it was again a fastly

173
00:06:37,840 --> 00:06:39,600
account i was able to log in as a super

174
00:06:39,600 --> 00:06:42,319
user i reported reported it to them and

175
00:06:42,319 --> 00:06:44,720
responsibly disclosed it to them and it

176
00:06:44,720 --> 00:06:47,520
was fixed within a few hours

177
00:06:47,520 --> 00:06:49,120
i found a lot of credit cards and

178
00:06:49,120 --> 00:06:50,639
credentials to a clearing company's

179
00:06:50,639 --> 00:06:52,400
customer account

180
00:06:52,400 --> 00:06:54,400
i haven't tested it the credit cards of

181
00:06:54,400 --> 00:06:56,319
course but we can assume either way that

182
00:06:56,319 --> 00:06:58,720
it worked or it doesn't but it doesn't

183
00:06:58,720 --> 00:07:00,720
matter

184
00:07:00,720 --> 00:07:03,440
i even found gmail credentials of an

185
00:07:03,440 --> 00:07:05,919
external vendor to the idf and if you

186
00:07:05,919 --> 00:07:07,280
wonder i was able to log into the

187
00:07:07,280 --> 00:07:08,560
account without any two-factor

188
00:07:08,560 --> 00:07:10,800
authentication or something it was again

189
00:07:10,800 --> 00:07:12,560
reported

190
00:07:12,560 --> 00:07:15,199
i also found a lot of api keys like

191
00:07:15,199 --> 00:07:18,479
sendgrid aws keys azure keys and other

192
00:07:18,479 --> 00:07:21,199
sms providers like twilio and all that

193
00:07:21,199 --> 00:07:22,880
and of course i found a lot of source

194
00:07:22,880 --> 00:07:25,199
code that wasn't meant to be public for

195
00:07:25,199 --> 00:07:26,880
like branding websites e-commerce

196
00:07:26,880 --> 00:07:28,960
websites and things that should have

197
00:07:28,960 --> 00:07:32,080
remained private so why why does it even

198
00:07:32,080 --> 00:07:33,039
happen

199
00:07:33,039 --> 00:07:35,199
so mostly it's lack of security

200
00:07:35,199 --> 00:07:36,560
education

201
00:07:36,560 --> 00:07:39,039
no one knows that they need to take the

202
00:07:39,039 --> 00:07:41,199
repository create a new repository and

203
00:07:41,199 --> 00:07:42,160
make it

204
00:07:42,160 --> 00:07:45,919
private and not public so it's mostly it

205
00:07:45,919 --> 00:07:48,000
i don't have a lot to to say about that

206
00:07:48,000 --> 00:07:49,599
it's usually some

207
00:07:49,599 --> 00:07:51,759
dumb misconfigurations nothing

208
00:07:51,759 --> 00:07:52,960
intentional

209
00:07:52,960 --> 00:07:55,039
so before we continue i want to put one

210
00:07:55,039 --> 00:07:56,400
core assumption

211
00:07:56,400 --> 00:07:58,720
your code was leaked is leaking or will

212
00:07:58,720 --> 00:07:59,520
leak

213
00:07:59,520 --> 00:08:01,759
on this talk we will only be focusing on

214
00:08:01,759 --> 00:08:04,160
finding it as soon as possible to reduce

215
00:08:04,160 --> 00:08:06,560
the mean time to detect i'm not going to

216
00:08:06,560 --> 00:08:10,000
talk about prevention at all

217
00:08:10,000 --> 00:08:11,120
i want to

218
00:08:11,120 --> 00:08:12,720
produce you

219
00:08:12,720 --> 00:08:15,360
to introduce you with codecade codecaine

220
00:08:15,360 --> 00:08:17,599
is acronym for canary tokens automated

221
00:08:17,599 --> 00:08:20,080
inspection and neutralization this is a

222
00:08:20,080 --> 00:08:21,840
framework that you can use and i will

223
00:08:21,840 --> 00:08:24,000
show you soon how

224
00:08:24,000 --> 00:08:25,599
what is canary talking can i talk is

225
00:08:25,599 --> 00:08:27,919
something that i can put on a word file

226
00:08:27,919 --> 00:08:31,680
for example or on code on our case and

227
00:08:31,680 --> 00:08:34,559
once it's touched for example aws key

228
00:08:34,559 --> 00:08:36,320
that i put in my code and once someone

229
00:08:36,320 --> 00:08:38,479
is using this aws keys i'm getting

230
00:08:38,479 --> 00:08:40,320
alerted on that and then i know that it

231
00:08:40,320 --> 00:08:42,958
was act

232
00:08:42,958 --> 00:08:44,959
so before we continue and we are talking

233
00:08:44,959 --> 00:08:45,760
about

234
00:08:45,760 --> 00:08:47,440
where to place them

235
00:08:47,440 --> 00:08:49,279
let's talk or what types of kind of

236
00:08:49,279 --> 00:08:50,800
tokens we have let's talk about the

237
00:08:50,800 --> 00:08:52,640
various levels where code could leak it

238
00:08:52,640 --> 00:08:54,320
could be on the source code management

239
00:08:54,320 --> 00:08:56,399
level one example of that is code curve

240
00:08:56,399 --> 00:08:58,959
that in codecov it was part of the ci

241
00:08:58,959 --> 00:09:01,279
that was infected and a lot of the

242
00:09:01,279 --> 00:09:03,360
repositories of the infected companies

243
00:09:03,360 --> 00:09:05,279
were breached

244
00:09:05,279 --> 00:09:07,200
and it could be on a single or multiple

245
00:09:07,200 --> 00:09:09,600
repositories level and it could also be

246
00:09:09,600 --> 00:09:12,399
on a file level for example on a script

247
00:09:12,399 --> 00:09:16,560
or a class or something like that

248
00:09:16,640 --> 00:09:18,080
so let's talk about the first type of

249
00:09:18,080 --> 00:09:20,240
canary tokens secrets we can place in

250
00:09:20,240 --> 00:09:22,320
code aws keys or active directory

251
00:09:22,320 --> 00:09:24,399
accounts and once those are attached we

252
00:09:24,399 --> 00:09:27,040
know for sure that our code has been

253
00:09:27,040 --> 00:09:28,080
leaked

254
00:09:28,080 --> 00:09:29,680
let's talk about the pros and cons the

255
00:09:29,680 --> 00:09:31,680
process that it looks authentic for as

256
00:09:31,680 --> 00:09:33,920
an attacker i will try the credentials

257
00:09:33,920 --> 00:09:35,519
most probably because i found something

258
00:09:35,519 --> 00:09:38,080
i want to test it but the cons are that

259
00:09:38,080 --> 00:09:39,680
it requires medium setup effort it

260
00:09:39,680 --> 00:09:42,000
requires me both to place it on code on

261
00:09:42,000 --> 00:09:43,920
multiple repositories and on the other

262
00:09:43,920 --> 00:09:45,680
end to monitor the usage of those

263
00:09:45,680 --> 00:09:47,920
credentials it could also be triggered

264
00:09:47,920 --> 00:09:49,839
by mistake like one of the developers

265
00:09:49,839 --> 00:09:52,240
could see the aws key and think ah what

266
00:09:52,240 --> 00:09:54,480
is it let's try that and by mistake

267
00:09:54,480 --> 00:09:57,120
trigger an alert and the biggest con

268
00:09:57,120 --> 00:09:59,120
that it has is that the code has already

269
00:09:59,120 --> 00:10:02,839
been found someone used the

270
00:10:02,839 --> 00:10:05,040
credentials the second option that we

271
00:10:05,040 --> 00:10:06,880
have and by the way you can combine all

272
00:10:06,880 --> 00:10:08,640
options okay i'm not limiting ourselves

273
00:10:08,640 --> 00:10:10,160
to one or

274
00:10:10,160 --> 00:10:12,640
another but we will focus on the third

275
00:10:12,640 --> 00:10:14,800
one which we will see in a sec so on

276
00:10:14,800 --> 00:10:17,279
application preps we can place fake api

277
00:10:17,279 --> 00:10:19,680
endpoints or even some files like

278
00:10:19,680 --> 00:10:21,680
error.log or something like that it was

279
00:10:21,680 --> 00:10:23,600
intentionally put there for someone to

280
00:10:23,600 --> 00:10:25,839
find it we need to use names that can't

281
00:10:25,839 --> 00:10:27,920
be fuzzed easily okay we don't want it

282
00:10:27,920 --> 00:10:28,959
to be

283
00:10:28,959 --> 00:10:31,040
triggering by some false positive or by

284
00:10:31,040 --> 00:10:34,000
fathers and once we did that we have

285
00:10:34,000 --> 00:10:36,399
again a few pros and cons one again it

286
00:10:36,399 --> 00:10:39,920
looks authentic someone would try to to

287
00:10:39,920 --> 00:10:42,560
access some routes like slash admin back

288
00:10:42,560 --> 00:10:44,079
office or something like that but the

289
00:10:44,079 --> 00:10:46,000
cons are that it requires ice setup

290
00:10:46,000 --> 00:10:47,600
effort even higher i think than the

291
00:10:47,600 --> 00:10:49,440
previous one because it should vary

292
00:10:49,440 --> 00:10:51,680
between languages and frameworks each

293
00:10:51,680 --> 00:10:53,519
language should have their own way to

294
00:10:53,519 --> 00:10:55,600
define the path

295
00:10:55,600 --> 00:10:57,440
and it requires multiple variations per

296
00:10:57,440 --> 00:10:59,200
code repository to identify from where

297
00:10:59,200 --> 00:11:01,200
the leakage happened and it could be

298
00:11:01,200 --> 00:11:03,200
again triggered by mistake and again the

299
00:11:03,200 --> 00:11:05,360
code has already been found which is not

300
00:11:05,360 --> 00:11:07,360
good so that leads me to the third

301
00:11:07,360 --> 00:11:08,640
option

302
00:11:08,640 --> 00:11:10,399
the unique strings in the unique strings

303
00:11:10,399 --> 00:11:12,320
what i can do is just to place a unique

304
00:11:12,320 --> 00:11:14,000
string something which is unguessable

305
00:11:14,000 --> 00:11:16,720
like uuid and i will show it to you

306
00:11:16,720 --> 00:11:18,079
later in the demo

307
00:11:18,079 --> 00:11:19,839
and then i can put it on all the code

308
00:11:19,839 --> 00:11:21,680
files that i have for example in a

309
00:11:21,680 --> 00:11:23,519
comment i'm not going to go into the

310
00:11:23,519 --> 00:11:26,640
details on how to actually do that

311
00:11:26,640 --> 00:11:28,640
um but

312
00:11:28,640 --> 00:11:30,240
let's see the pros and cons the process

313
00:11:30,240 --> 00:11:32,000
that it doesn't require the attacker to

314
00:11:32,000 --> 00:11:33,440
actually access it so we have the best

315
00:11:33,440 --> 00:11:35,600
mean time to detect we can just search

316
00:11:35,600 --> 00:11:38,240
for it and find it it requires low setup

317
00:11:38,240 --> 00:11:40,079
effort because placing commenting code

318
00:11:40,079 --> 00:11:42,240
is pretty much the same across all

319
00:11:42,240 --> 00:11:43,519
languages

320
00:11:43,519 --> 00:11:46,079
and it has again a better course

321
00:11:46,079 --> 00:11:48,959
languages in form of support and

322
00:11:48,959 --> 00:11:50,639
we can by the way i skipped the second

323
00:11:50,639 --> 00:11:52,160
one it will cost low setup effort

324
00:11:52,160 --> 00:11:53,920
because i can put it in a ci job for

325
00:11:53,920 --> 00:11:55,279
example it does it across all my

326
00:11:55,279 --> 00:11:56,399
repositories

327
00:11:56,399 --> 00:11:57,279
and

328
00:11:57,279 --> 00:11:59,440
the cons is that in we need we need a

329
00:11:59,440 --> 00:12:02,240
way to actually find it once it leaks

330
00:12:02,240 --> 00:12:04,320
but don't worry about it because we have

331
00:12:04,320 --> 00:12:05,760
the solution

332
00:12:05,760 --> 00:12:08,480
so a few highlights before we continue

333
00:12:08,480 --> 00:12:10,160
don't place it on publicly accessible

334
00:12:10,160 --> 00:12:11,839
code of course like things like open

335
00:12:11,839 --> 00:12:13,120
source or

336
00:12:13,120 --> 00:12:15,760
apks or mobile clients in general or

337
00:12:15,760 --> 00:12:17,519
client-side code because someone will

338
00:12:17,519 --> 00:12:19,200
notice it and we don't want it to be

339
00:12:19,200 --> 00:12:21,279
noticed unless it's actually been leaked

340
00:12:21,279 --> 00:12:22,880
don't be too obvious don't use something

341
00:12:22,880 --> 00:12:25,360
like unique security canary token that

342
00:12:25,360 --> 00:12:27,519
an attacker won't actually use and start

343
00:12:27,519 --> 00:12:29,360
with your most sensitive code repository

344
00:12:29,360 --> 00:12:31,120
first here is a

345
00:12:31,120 --> 00:12:35,200
here is an example of how not to do that

346
00:12:35,279 --> 00:12:36,560
let's continue to the second one

347
00:12:36,560 --> 00:12:38,240
automated inspection in the automated

348
00:12:38,240 --> 00:12:39,519
inspection it's a pretty easy

349
00:12:39,519 --> 00:12:42,399
methodology we want to first of all add

350
00:12:42,399 --> 00:12:44,560
four leaks on public sources

351
00:12:44,560 --> 00:12:46,240
second of all we want to filter the

352
00:12:46,240 --> 00:12:48,480
results but by some kind of heuristics

353
00:12:48,480 --> 00:12:50,240
engine or techniques and the third one

354
00:12:50,240 --> 00:12:51,680
is to enhance the results with what i

355
00:12:51,680 --> 00:12:56,239
call indicators of flick ios

356
00:12:56,880 --> 00:12:59,519
the last step is the neutralization in

357
00:12:59,519 --> 00:13:01,120
this case we want to eliminate the risk

358
00:13:01,120 --> 00:13:02,959
we want to have automated alerts like

359
00:13:02,959 --> 00:13:04,560
any other security tool for example the

360
00:13:04,560 --> 00:13:05,680
tools that we have on all the

361
00:13:05,680 --> 00:13:07,600
organizations for

362
00:13:07,600 --> 00:13:10,320
alerting on malware for example viruses

363
00:13:10,320 --> 00:13:12,320
we want to investigate it using the

364
00:13:12,320 --> 00:13:14,320
extracted indicators of flick and we

365
00:13:14,320 --> 00:13:16,320
want to automate the remediation process

366
00:13:16,320 --> 00:13:17,920
as much as possible for example if this

367
00:13:17,920 --> 00:13:19,440
is an active employee that leaked code

368
00:13:19,440 --> 00:13:21,600
we want to contact them through some

369
00:13:21,600 --> 00:13:23,440
chatbot or if this is an ex-employee we

370
00:13:23,440 --> 00:13:25,440
want our legal department to contact

371
00:13:25,440 --> 00:13:27,839
whatever it will be to actually request

372
00:13:27,839 --> 00:13:30,800
a takedown request

373
00:13:30,880 --> 00:13:33,440
that all led to the development of a

374
00:13:33,440 --> 00:13:35,600
tool called lictopus this is an open

375
00:13:35,600 --> 00:13:36,880
source solution based on the cane

376
00:13:36,880 --> 00:13:38,320
framework and you can find it in the

377
00:13:38,320 --> 00:13:40,800
link here

378
00:13:40,800 --> 00:13:44,079
so what leaktopus does it it works on it

379
00:13:44,079 --> 00:13:45,920
has a few key features the main one on

380
00:13:45,920 --> 00:13:48,160
the automated inspection part is to and

381
00:13:48,160 --> 00:13:52,399
after licks it also filter the results

382
00:13:52,399 --> 00:13:54,639
and then it enhanced the results with

383
00:13:54,639 --> 00:13:57,040
indicators of flick for example some

384
00:13:57,040 --> 00:13:59,519
company emails that it found the canary

385
00:13:59,519 --> 00:14:02,240
token that we planted earlier and

386
00:14:02,240 --> 00:14:04,720
secrets so it can give

387
00:14:04,720 --> 00:14:07,440
your investigation team the the right

388
00:14:07,440 --> 00:14:08,639
context to understand what is the

389
00:14:08,639 --> 00:14:10,079
severity and

390
00:14:10,079 --> 00:14:12,560
how to find a real leakage among all the

391
00:14:12,560 --> 00:14:14,720
junk and the fourth thing that it

392
00:14:14,720 --> 00:14:16,240
provides is to index the code to

393
00:14:16,240 --> 00:14:18,480
elasticsearch why is this useful let's

394
00:14:18,480 --> 00:14:20,240
imagine that your code has already been

395
00:14:20,240 --> 00:14:21,120
leaked

396
00:14:21,120 --> 00:14:22,079
and

397
00:14:22,079 --> 00:14:23,920
you you know that someone used one of

398
00:14:23,920 --> 00:14:26,240
your active directory or aws accounts to

399
00:14:26,240 --> 00:14:28,079
log into your company but you don't know

400
00:14:28,079 --> 00:14:29,199
how

401
00:14:29,199 --> 00:14:30,800
what you can do is to go into the

402
00:14:30,800 --> 00:14:32,480
elasticsearch where we're indexing the

403
00:14:32,480 --> 00:14:35,040
results and search for the leaked secret

404
00:14:35,040 --> 00:14:37,360
and then we will able to find it and you

405
00:14:37,360 --> 00:14:38,880
might be asking yourself why can't i

406
00:14:38,880 --> 00:14:41,920
just do it with github or whatsoever and

407
00:14:41,920 --> 00:14:43,680
the answer is that github only provides

408
00:14:43,680 --> 00:14:45,519
you with an api with the search code api

409
00:14:45,519 --> 00:14:48,000
to find things on the default branch

410
00:14:48,000 --> 00:14:50,320
like main or master so you won't be able

411
00:14:50,320 --> 00:14:52,800
to search in the history and in the

412
00:14:52,800 --> 00:14:56,320
commit and etc

413
00:14:56,320 --> 00:14:58,160
on the neutralization part what liquibus

414
00:14:58,160 --> 00:15:00,639
provides is microsoft teams web book

415
00:15:00,639 --> 00:15:03,040
and a notification on new leaks and also

416
00:15:03,040 --> 00:15:04,800
cortex exo

417
00:15:04,800 --> 00:15:07,519
integration

418
00:15:08,399 --> 00:15:10,880
and because we most of us are nerds here

419
00:15:10,880 --> 00:15:13,680
and we want to look under the hood so

420
00:15:13,680 --> 00:15:15,360
about the technology stack it's fully

421
00:15:15,360 --> 00:15:17,920
dockerized it's api first flask a

422
00:15:17,920 --> 00:15:20,639
backend it's decoupled view

423
00:15:20,639 --> 00:15:21,680
free

424
00:15:21,680 --> 00:15:25,680
front end it uses sqlite database

425
00:15:25,680 --> 00:15:28,399
tasks with salary and redis it has also

426
00:15:28,399 --> 00:15:30,480
automatic retry mechanism for overcoming

427
00:15:30,480 --> 00:15:33,120
github's rate limiting and it has some

428
00:15:33,120 --> 00:15:35,759
built-in heuristics as i said some of

429
00:15:35,759 --> 00:15:37,120
the things are

430
00:15:37,120 --> 00:15:39,839
by the number of forks or stars because

431
00:15:39,839 --> 00:15:42,160
we can assume that if a repository has

432
00:15:42,160 --> 00:15:44,240
like for example more than three stars

433
00:15:44,240 --> 00:15:46,720
then it's probably meant to be public

434
00:15:46,720 --> 00:15:49,199
and it's not it's not something that was

435
00:15:49,199 --> 00:15:51,920
leaked and it also ignores random emails

436
00:15:51,920 --> 00:15:54,639
or linux collection a lot of callers are

437
00:15:54,639 --> 00:15:56,480
using github to actually store some data

438
00:15:56,480 --> 00:15:58,959
sets like for example the top best 1 000

439
00:15:58,959 --> 00:16:00,560
companies in israel

440
00:16:00,560 --> 00:16:03,360
so it ignores such kind of things

441
00:16:03,360 --> 00:16:06,880
again by some kind of heuristics

442
00:16:06,880 --> 00:16:09,120
so demo time

443
00:16:09,120 --> 00:16:11,839
just kidding

444
00:16:13,839 --> 00:16:15,279
let's see that you actually can see my

445
00:16:15,279 --> 00:16:18,920
screen let's see

446
00:16:24,800 --> 00:16:27,120
okay

447
00:16:31,680 --> 00:16:33,040
okay

448
00:16:33,040 --> 00:16:35,600
so you can see here how league to puss

449
00:16:35,600 --> 00:16:36,880
looks

450
00:16:36,880 --> 00:16:38,800
and in general when i want to search for

451
00:16:38,800 --> 00:16:40,480
something i'm just putting the search

452
00:16:40,480 --> 00:16:42,079
query here i'm not going to sell

453
00:16:42,079 --> 00:16:44,079
something now i already prepared it in

454
00:16:44,079 --> 00:16:46,160
advance because it takes some time to

455
00:16:46,160 --> 00:16:47,759
actually scan it and do all the things

456
00:16:47,759 --> 00:16:50,079
that we that i said but you will search

457
00:16:50,079 --> 00:16:52,639
for something like besides tlv and in

458
00:16:52,639 --> 00:16:54,079
the organization domains you will put

459
00:16:54,079 --> 00:16:56,000
your organization domain this is used

460
00:16:56,000 --> 00:16:59,040
for the enrichment like besides tlv.com

461
00:16:59,040 --> 00:17:00,880
and there you will put your canary token

462
00:17:00,880 --> 00:17:03,279
for example the canary token that i used

463
00:17:03,279 --> 00:17:05,199
for actually leaking something for the

464
00:17:05,199 --> 00:17:08,000
demo was this one

465
00:17:08,000 --> 00:17:10,000
and then you can see here the scan

466
00:17:10,000 --> 00:17:13,039
status this one was done

467
00:17:13,039 --> 00:17:15,679
and then you will see the results here

468
00:17:15,679 --> 00:17:18,559
as a json let me scroll up and you can

469
00:17:18,559 --> 00:17:22,400
see that i have 57 results if you wonder

470
00:17:22,400 --> 00:17:24,799
how many results there were before all

471
00:17:24,799 --> 00:17:26,880
those heuristics that i mentioned you

472
00:17:26,880 --> 00:17:29,280
can see the results here on github it

473
00:17:29,280 --> 00:17:33,600
had more than 800 results

474
00:17:33,600 --> 00:17:35,440
so

475
00:17:35,440 --> 00:17:38,240
once you look on all the 57 results that

476
00:17:38,240 --> 00:17:41,120
you have here you can also wonder are

477
00:17:41,120 --> 00:17:44,400
those all real or i do i need all those

478
00:17:44,400 --> 00:17:46,320
so the answer is no if you will look on

479
00:17:46,320 --> 00:17:47,919
b sides for example because we have the

480
00:17:47,919 --> 00:17:50,320
ctf that happens once a year and we also

481
00:17:50,320 --> 00:17:52,080
have the organization on github that

482
00:17:52,080 --> 00:17:55,280
called besides the slash something then

483
00:17:55,280 --> 00:17:56,880
we know that we can filter those so

484
00:17:56,880 --> 00:17:58,720
lictopus provide also a solution for

485
00:17:58,720 --> 00:18:01,200
that so it comes out of the box with a

486
00:18:01,200 --> 00:18:03,679
few ignore repository patterns

487
00:18:03,679 --> 00:18:05,840
and you can also add your own custom red

488
00:18:05,840 --> 00:18:07,679
access and i prepare those in advance

489
00:18:07,679 --> 00:18:09,039
and you can see that i'm ignoring for

490
00:18:09,039 --> 00:18:10,559
example

491
00:18:10,559 --> 00:18:13,200
the besides tlv organization i'm also

492
00:18:13,200 --> 00:18:15,360
ignoring everything that has the c the

493
00:18:15,360 --> 00:18:18,080
word ctf in the organization name

494
00:18:18,080 --> 00:18:19,039
or

495
00:18:19,039 --> 00:18:21,440
in the repository name okay on both

496
00:18:21,440 --> 00:18:24,320
cases we want to ignore those

497
00:18:24,320 --> 00:18:26,559
and i'm also ignoring everything with g

498
00:18:26,559 --> 00:18:28,240
shop because i added a lot of results

499
00:18:28,240 --> 00:18:30,640
with geoshop let's see how many results

500
00:18:30,640 --> 00:18:32,720
we have now we can just refresh the page

501
00:18:32,720 --> 00:18:35,280
and we got 30 results with just basic

502
00:18:35,280 --> 00:18:37,039
filtering that i did

503
00:18:37,039 --> 00:18:39,200
without any crazy knowledge or something

504
00:18:39,200 --> 00:18:41,440
like that but i'm still i still need to

505
00:18:41,440 --> 00:18:43,440
go over all the 30 results so what

506
00:18:43,440 --> 00:18:45,280
should i do and how can i prioritize

507
00:18:45,280 --> 00:18:46,160
things

508
00:18:46,160 --> 00:18:47,200
so

509
00:18:47,200 --> 00:18:49,360
as i said there is the enhancement part

510
00:18:49,360 --> 00:18:51,760
so what i can do easily is to do just

511
00:18:51,760 --> 00:18:53,039
kill request

512
00:18:53,039 --> 00:18:54,960
and to filter by each organization

513
00:18:54,960 --> 00:18:57,440
domain equals one let's see what it does

514
00:18:57,440 --> 00:18:59,200
it mean and let's see if i have results

515
00:18:59,200 --> 00:19:01,440
so you can see that for example i'm

516
00:19:01,440 --> 00:19:03,200
extracting the authors of all the

517
00:19:03,200 --> 00:19:05,200
commits

518
00:19:05,200 --> 00:19:06,640
and in this case you can see the

519
00:19:06,640 --> 00:19:08,240
indicators of link is this file the

520
00:19:08,240 --> 00:19:10,080
readme file that contained the word

521
00:19:10,080 --> 00:19:11,600
besides tlv

522
00:19:11,600 --> 00:19:13,120
and you can see all the information

523
00:19:13,120 --> 00:19:14,720
about that a top secret besides

524
00:19:14,720 --> 00:19:16,799
application and you can see that the

525
00:19:16,799 --> 00:19:19,760
author was to arsec which is my nickname

526
00:19:19,760 --> 00:19:20,520
at

527
00:19:20,520 --> 00:19:23,440
bsidestlv.com and you can see here that

528
00:19:23,440 --> 00:19:25,440
it's marked is organization domain one

529
00:19:25,440 --> 00:19:27,039
because again it's

530
00:19:27,039 --> 00:19:30,160
besides tlv.com

531
00:19:30,160 --> 00:19:32,000
what you can also do is to search by the

532
00:19:32,000 --> 00:19:33,840
canary token this is called the

533
00:19:33,840 --> 00:19:35,679
sensitive words keywords by the way you

534
00:19:35,679 --> 00:19:37,360
can use a lot of sensitive keywords like

535
00:19:37,360 --> 00:19:39,280
internal domains that you might have

536
00:19:39,280 --> 00:19:41,600
like autumn ltd dot internal or

537
00:19:41,600 --> 00:19:43,120
something like that that you know that

538
00:19:43,120 --> 00:19:45,120
wasn't supposed to be outside and you

539
00:19:45,120 --> 00:19:46,480
can see here that i also found the

540
00:19:46,480 --> 00:19:48,799
result and you can see here where i

541
00:19:48,799 --> 00:19:50,559
found it so it was found of course on

542
00:19:50,559 --> 00:19:52,720
github and you can see i'm no one just

543
00:19:52,720 --> 00:19:54,799
ignore me with the canary token that i

544
00:19:54,799 --> 00:19:57,360
placed it doesn't look suspicious like

545
00:19:57,360 --> 00:20:00,640
some developers put some uuid here

546
00:20:00,640 --> 00:20:03,679
now you can also see

547
00:20:04,000 --> 00:20:05,919
the secrets so it's extracting the

548
00:20:05,919 --> 00:20:07,520
secrets from the code and you can see

549
00:20:07,520 --> 00:20:09,440
that there are two secrets here one is

550
00:20:09,440 --> 00:20:11,600
aws access key and the second one is

551
00:20:11,600 --> 00:20:14,400
username and password admin b sites one

552
00:20:14,400 --> 00:20:16,080
two three at pi pi

553
00:20:16,080 --> 00:20:21,000
but when i'm looking at the repository

554
00:20:21,360 --> 00:20:23,360
i don't see those credentials why is

555
00:20:23,360 --> 00:20:26,480
that and this is because it was on

556
00:20:26,480 --> 00:20:28,000
well it should be on previous commitment

557
00:20:28,000 --> 00:20:30,880
one sec i'm not on the right place okay

558
00:20:30,880 --> 00:20:32,159
now it will work

559
00:20:32,159 --> 00:20:34,080
so it's not here but you can see that

560
00:20:34,080 --> 00:20:36,640
it's one of the previous commits

561
00:20:36,640 --> 00:20:38,400
so you can see it i think here adding my

562
00:20:38,400 --> 00:20:39,679
deployment script and you can see the

563
00:20:39,679 --> 00:20:41,760
credentials by the way it also ignored

564
00:20:41,760 --> 00:20:44,320
the aws example one

565
00:20:44,320 --> 00:20:45,679
the last thing that i'm going to show

566
00:20:45,679 --> 00:20:47,520
you in the demo is how it looks on the

567
00:20:47,520 --> 00:20:49,520
elasticsearch for example i put here

568
00:20:49,520 --> 00:20:50,799
some nice

569
00:20:50,799 --> 00:20:53,120
dashboard for you to see but the

570
00:20:53,120 --> 00:20:55,360
interesting part is this one so it's all

571
00:20:55,360 --> 00:20:57,600
indexed all the commits data is indexed

572
00:20:57,600 --> 00:20:59,760
and i can just place

573
00:20:59,760 --> 00:21:02,320
no not this one the canary token that i

574
00:21:02,320 --> 00:21:04,240
want to find

575
00:21:04,240 --> 00:21:07,760
and see where it clicked from

576
00:21:08,240 --> 00:21:10,080
and you can see that it was linked here

577
00:21:10,080 --> 00:21:12,080
on this repository

578
00:21:12,080 --> 00:21:14,240
on this commit

579
00:21:14,240 --> 00:21:17,840
going back to my presentation

580
00:21:20,559 --> 00:21:22,720
so what are the next steps

581
00:21:22,720 --> 00:21:24,480
one to extend the octopus and your

582
00:21:24,480 --> 00:21:27,120
contributions are very welcome i

583
00:21:27,120 --> 00:21:29,280
appreciate any contribution

584
00:21:29,280 --> 00:21:31,520
to support some leak scoring and it's

585
00:21:31,520 --> 00:21:33,520
basically mostly supported but just to

586
00:21:33,520 --> 00:21:35,280
add like some kind of property of

587
00:21:35,280 --> 00:21:37,760
severity or something or score support

588
00:21:37,760 --> 00:21:39,280
more public sources at the moment i'm

589
00:21:39,280 --> 00:21:41,440
only supporting github

590
00:21:41,440 --> 00:21:42,320
but

591
00:21:42,320 --> 00:21:43,760
i can support easily it's very

592
00:21:43,760 --> 00:21:45,520
extensible paste bin and bit bucket and

593
00:21:45,520 --> 00:21:48,480
to improve the secrets detection

594
00:21:48,480 --> 00:21:51,200
any questions

595
00:21:52,559 --> 00:21:57,399
but i can see if you can okay right

596
00:21:58,950 --> 00:22:01,290
[Applause]

597
00:22:01,290 --> 00:22:07,310
[Music]

598
00:22:07,310 --> 00:22:09,440
[Applause]

599
00:22:09,440 --> 00:22:11,520
you

