1
00:00:00,290 --> 00:00:00,900
[Music]

2
00:00:00,900 --> 00:00:03,220
thank you

3
00:00:03,220 --> 00:00:03,740
[Applause]

4
00:00:03,740 --> 00:00:10,400
[Music]

5
00:00:13,920 --> 00:00:16,680
I'm very excited to be here today how

6
00:00:16,680 --> 00:00:17,660
are you

7
00:00:17,660 --> 00:00:21,480
so I'm Vera and in this short talk we

8
00:00:21,480 --> 00:00:23,840
will talk about hack and flow computers

9
00:00:23,840 --> 00:00:26,939
but before we will talk about what flow

10
00:00:26,939 --> 00:00:30,060
computers are let me introduce myself so

11
00:00:30,060 --> 00:00:31,560
I'm very meant to vulnerability

12
00:00:31,560 --> 00:00:34,860
researcher at Team 82 a tim82 is a

13
00:00:34,860 --> 00:00:36,600
vulnerability research team by Clarity

14
00:00:36,600 --> 00:00:39,239
we are targeting mostly

15
00:00:39,239 --> 00:00:41,820
OT iot and medical sectors from the

16
00:00:41,820 --> 00:00:44,700
field devices themselves to the scada

17
00:00:44,700 --> 00:00:48,899
system while I mostly focusing on the

18
00:00:48,899 --> 00:00:51,960
embedded devices because that's what I

19
00:00:51,960 --> 00:00:55,079
enjoy doing I have been in beside city

20
00:00:55,079 --> 00:00:57,899
of team for three years now and I hope

21
00:00:57,899 --> 00:00:59,820
that you have enjoyed the city of this

22
00:00:59,820 --> 00:01:04,319
week so let's start a

23
00:01:04,559 --> 00:01:08,760
let's hope it works uh so what are the

24
00:01:08,760 --> 00:01:12,060
flow computers so as the name suggests

25
00:01:12,060 --> 00:01:15,119
for computers performed from air flow

26
00:01:15,119 --> 00:01:18,659
measurements which is a calculates how

27
00:01:18,659 --> 00:01:21,900
much gas or liquid goes through the

28
00:01:21,900 --> 00:01:25,020
pipes in each moment and there is a lot

29
00:01:25,020 --> 00:01:28,259
of places that use this type of

30
00:01:28,259 --> 00:01:31,640
computers I'm sorry

31
00:01:31,820 --> 00:01:36,479
which is a Gaza and all a processing

32
00:01:36,479 --> 00:01:39,840
plants is one of the example or each

33
00:01:39,840 --> 00:01:42,420
other a plant water plant or something

34
00:01:42,420 --> 00:01:45,360
like that that takes substance from one

35
00:01:45,360 --> 00:01:49,380
point to another four pipes and the flow

36
00:01:49,380 --> 00:01:50,640
computers

37
00:01:50,640 --> 00:01:52,200
I'm sorry

38
00:01:52,200 --> 00:01:57,000
there's something wrong with this one

39
00:01:57,000 --> 00:01:59,700
and flow computers come in various

40
00:01:59,700 --> 00:02:03,780
shapes and sizes and they can be mounted

41
00:02:03,780 --> 00:02:07,500
on the wall and on the pipe as we can

42
00:02:07,500 --> 00:02:11,760
see here and a messing with those

43
00:02:11,760 --> 00:02:15,360
computers it is pretty big deal uh not

44
00:02:15,360 --> 00:02:17,580
mentioning is the stuff that Marina

45
00:02:17,580 --> 00:02:20,760
talked about about them at the keynote

46
00:02:20,760 --> 00:02:26,340
but a flow of oil the more flow flow

47
00:02:26,340 --> 00:02:30,120
makes a means more money and for some

48
00:02:30,120 --> 00:02:32,900
reason people do care about oil prices

49
00:02:32,900 --> 00:02:36,180
so we would like to save those computer

50
00:02:36,180 --> 00:02:41,459
safe from the attackers right and that's

51
00:02:41,459 --> 00:02:44,040
what we would like to remember along

52
00:02:44,040 --> 00:02:48,360
this lecture so we are ready to meet our

53
00:02:48,360 --> 00:02:52,220
device this is abb's micro flow computer

54
00:02:52,220 --> 00:02:56,940
maybe I need to stand right here

55
00:02:56,940 --> 00:03:00,840
right so this is a bare PCB there's a

56
00:03:00,840 --> 00:03:02,760
arm CPU attached to it it can be

57
00:03:02,760 --> 00:03:06,000
connected to the a tiny LCD and the

58
00:03:06,000 --> 00:03:08,760
battery it has a metal enclosure in case

59
00:03:08,760 --> 00:03:12,840
of rain and it it can be mounted

60
00:03:12,840 --> 00:03:15,360
directly on the pipe so we just need to

61
00:03:15,360 --> 00:03:18,120
put in mind so this is a computer that

62
00:03:18,120 --> 00:03:20,879
connected to the pipe and it will

63
00:03:20,879 --> 00:03:23,640
calculate the flow of any substance that

64
00:03:23,640 --> 00:03:26,280
come through that pipe especially gas

65
00:03:26,280 --> 00:03:29,360
and oil that is what it's made of right

66
00:03:29,360 --> 00:03:32,819
and let's look what is within the

67
00:03:32,819 --> 00:03:36,900
computer so we have our arm CPU 32 bits

68
00:03:36,900 --> 00:03:40,140
like any other similar device to it and

69
00:03:40,140 --> 00:03:43,379
we have ethernet and serial ports as I O

70
00:03:43,379 --> 00:03:46,620
ports we have an Linux operating system

71
00:03:46,620 --> 00:03:49,220
on that computer which is quite

72
00:03:49,220 --> 00:03:52,620
convenient for us and the main two

73
00:03:52,620 --> 00:03:55,739
protocols that implemented is modbus

74
00:03:55,739 --> 00:03:58,819
which is a fairly popular purple

75
00:03:58,819 --> 00:04:01,200
protocols that used in many

76
00:04:01,200 --> 00:04:04,260
OT devices as well as a total flow

77
00:04:04,260 --> 00:04:06,120
protocol we will talk about it a little

78
00:04:06,120 --> 00:04:08,519
bit later it is proprietary protocol

79
00:04:08,519 --> 00:04:12,840
developed by the ABB itself and it uses

80
00:04:12,840 --> 00:04:16,560
it for configuring the device view flow

81
00:04:16,560 --> 00:04:19,019
measurements and many other stuff and

82
00:04:19,019 --> 00:04:22,500
the main component of this device the

83
00:04:22,500 --> 00:04:25,680
one that we will talk about today is the

84
00:04:25,680 --> 00:04:27,600
main application this is the application

85
00:04:27,600 --> 00:04:30,360
that comes on when the device boots up

86
00:04:30,360 --> 00:04:33,180
the tiny device that we saw earlier and

87
00:04:33,180 --> 00:04:36,900
it stays on along the devices on and

88
00:04:36,900 --> 00:04:40,080
what it does it is the main application

89
00:04:40,080 --> 00:04:42,479
of the computer which means some

90
00:04:42,479 --> 00:04:44,900
calculation for the flow that can be

91
00:04:44,900 --> 00:04:48,540
quite complicated in mathematical point

92
00:04:48,540 --> 00:04:53,100
of view and it can be it can do some

93
00:04:53,100 --> 00:04:56,180
alarm management with a configuration

94
00:04:56,180 --> 00:04:59,400
interface and the configuration one is

95
00:04:59,400 --> 00:05:03,180
what we will care about and another

96
00:05:03,180 --> 00:05:06,660
important part of the system is the

97
00:05:06,660 --> 00:05:09,419
client the total flow client it is the

98
00:05:09,419 --> 00:05:11,460
client that can be downloaded from the

99
00:05:11,460 --> 00:05:14,220
website from a BBF website and the

100
00:05:14,220 --> 00:05:16,440
operator that um

101
00:05:16,440 --> 00:05:19,919
download the client can connect to any

102
00:05:19,919 --> 00:05:22,560
device that talks total flow protocol

103
00:05:22,560 --> 00:05:27,240
like our own to make a configuration to

104
00:05:27,240 --> 00:05:31,620
view flow measurement and so on

105
00:05:31,620 --> 00:05:34,860
and so there is two main features

106
00:05:34,860 --> 00:05:36,479
security features that are implemented

107
00:05:36,479 --> 00:05:39,419
within the device we have our security

108
00:05:39,419 --> 00:05:43,800
button security I'm sorry

109
00:05:43,800 --> 00:05:46,620
security switch that is mounted on the

110
00:05:46,620 --> 00:05:49,880
PCB itself it's a button that we can

111
00:05:49,880 --> 00:05:54,060
touch and what it does it enables or

112
00:05:54,060 --> 00:05:56,639
disables the security passcode security

113
00:05:56,639 --> 00:06:01,259
passcode is a four digit number that is

114
00:06:01,259 --> 00:06:04,440
sent with every total flow Proto is

115
00:06:04,440 --> 00:06:07,020
every total solo payload total flow is a

116
00:06:07,020 --> 00:06:09,840
protocol it has payload header and like

117
00:06:09,840 --> 00:06:13,380
any other protocol and each prod H

118
00:06:13,380 --> 00:06:17,400
payload has its passcode along it and if

119
00:06:17,400 --> 00:06:19,740
the passcode is correct the one the

120
00:06:19,740 --> 00:06:22,940
device is expected to get the payload is

121
00:06:22,940 --> 00:06:25,199
received and the response is sent

122
00:06:25,199 --> 00:06:28,380
otherwise we will get an error so this

123
00:06:28,380 --> 00:06:32,720
is our security mechanism and

124
00:06:32,720 --> 00:06:35,880
this is a pretty cool computer right not

125
00:06:35,880 --> 00:06:38,880
the one that we used to see in every in

126
00:06:38,880 --> 00:06:42,900
everyday in life and it can be pretty

127
00:06:42,900 --> 00:06:45,780
cool to hack it and we need to set a

128
00:06:45,780 --> 00:06:50,400
goal for uh for our research and as I

129
00:06:50,400 --> 00:06:53,580
said before the more flow means more

130
00:06:53,580 --> 00:06:56,280
money so it can be pretty cool if you

131
00:06:56,280 --> 00:06:59,340
could just to control the device and

132
00:06:59,340 --> 00:07:02,940
makes the device to report a little less

133
00:07:02,940 --> 00:07:07,380
flow or a part of the flow that release

134
00:07:07,380 --> 00:07:12,020
the within the pipe so we pay less

135
00:07:12,020 --> 00:07:13,699
and

136
00:07:13,699 --> 00:07:17,400
we send devices are located somewhere in

137
00:07:17,400 --> 00:07:20,699
the desert in the oil and gas plants we

138
00:07:20,699 --> 00:07:22,800
would like to do it remotely from our

139
00:07:22,800 --> 00:07:26,160
home no one wants to wait in the lion

140
00:07:26,160 --> 00:07:29,580
since then and debug so our goal here

141
00:07:29,580 --> 00:07:33,120
will be pre-authenticated remote code

142
00:07:33,120 --> 00:07:36,599
execution on the device and while this

143
00:07:36,599 --> 00:07:40,199
is a pretty common goal in those kind of

144
00:07:40,199 --> 00:07:44,039
devices it's not always possible but I'm

145
00:07:44,039 --> 00:07:46,440
here today talking to you so it went

146
00:07:46,440 --> 00:07:48,560
pretty well

147
00:07:48,560 --> 00:07:53,340
so first thing first we need to read the

148
00:07:53,340 --> 00:07:55,860
document the manuals right it is not the

149
00:07:55,860 --> 00:07:58,379
device that we used to maybe it's the

150
00:07:58,379 --> 00:08:01,560
one that we first heard of and there is

151
00:08:01,560 --> 00:08:04,680
a lot of information to get from it and

152
00:08:04,680 --> 00:08:06,539
we would like to get the more

153
00:08:06,539 --> 00:08:08,400
information as we can from the manuals

154
00:08:08,400 --> 00:08:10,560
before we start to reverse engineer it

155
00:08:10,560 --> 00:08:13,800
and as the most important thing that we

156
00:08:13,800 --> 00:08:16,860
would like to get is house operators

157
00:08:16,860 --> 00:08:19,560
just bought the device would configure

158
00:08:19,560 --> 00:08:22,560
it right if you well understand how the

159
00:08:22,560 --> 00:08:24,720
operator configures how it connects the

160
00:08:24,720 --> 00:08:26,819
device from the client we will

161
00:08:26,819 --> 00:08:29,759
understand our context of research and

162
00:08:29,759 --> 00:08:33,779
it will be a quite a good start and

163
00:08:33,779 --> 00:08:35,039
before

164
00:08:35,039 --> 00:08:37,740
before sorry

165
00:08:37,740 --> 00:08:40,399
I'll

166
00:08:40,679 --> 00:08:45,120
and before we will uh go to a building a

167
00:08:45,120 --> 00:08:47,700
setup and how could we need to get the

168
00:08:47,700 --> 00:08:52,140
femur uh so what is the femur femur is a

169
00:08:52,140 --> 00:08:55,260
merly package in our case that has

170
00:08:55,260 --> 00:08:58,560
everything that needs for the device to

171
00:08:58,560 --> 00:09:00,899
run for the magnification to run it

172
00:09:00,899 --> 00:09:03,420
means it has a bootloader the kernel the

173
00:09:03,420 --> 00:09:05,580
file system and any other files it

174
00:09:05,580 --> 00:09:08,880
needed and often those firmware packages

175
00:09:08,880 --> 00:09:12,240
are available online and the

176
00:09:12,240 --> 00:09:14,160
availability of the firmware is pretty

177
00:09:14,160 --> 00:09:17,700
critical if we don't have our firmware

178
00:09:17,700 --> 00:09:20,820
online and we don't have any other way

179
00:09:20,820 --> 00:09:24,000
to get it it pretty much can stop our

180
00:09:24,000 --> 00:09:26,040
project altogether nothing to do from

181
00:09:26,040 --> 00:09:28,380
here but we were lucky the viewer were

182
00:09:28,380 --> 00:09:32,100
online and the time that we have from

183
00:09:32,100 --> 00:09:34,560
getting the firmware until we start to

184
00:09:34,560 --> 00:09:37,080
reverse engineer it it depends on

185
00:09:37,080 --> 00:09:40,620
various of things one of them is a

186
00:09:40,620 --> 00:09:43,620
whether the firmware is encrypted signed

187
00:09:43,620 --> 00:09:47,040
whether it works with an architecture

188
00:09:47,040 --> 00:09:50,180
that are disassemblers understand right

189
00:09:50,180 --> 00:09:52,860
whether it runs on operating systems

190
00:09:52,860 --> 00:09:55,459
that very familiar for us as researchers

191
00:09:55,459 --> 00:09:58,680
and in this project it's went quite well

192
00:09:58,680 --> 00:10:01,560
as you can see and in a matter of couple

193
00:10:01,560 --> 00:10:04,560
of hours we had all the files needed to

194
00:10:04,560 --> 00:10:07,140
start to reverse engineer it but before

195
00:10:07,140 --> 00:10:09,120
we start into reverse engineer it and

196
00:10:09,120 --> 00:10:12,200
understand what it is we need a setup

197
00:10:12,200 --> 00:10:15,660
and the setup is pretty important we

198
00:10:15,660 --> 00:10:19,320
want to get a setup as soon as we like

199
00:10:19,320 --> 00:10:24,240
we want to know how the setup how our

200
00:10:24,240 --> 00:10:28,079
Target behaves on some payload and the

201
00:10:28,079 --> 00:10:30,839
first option and the obvious one is just

202
00:10:30,839 --> 00:10:33,720
to buy it right and it's a great option

203
00:10:33,720 --> 00:10:36,240
we will have all the peripherals we want

204
00:10:36,240 --> 00:10:39,779
we have the wall system emulation uh we

205
00:10:39,779 --> 00:10:41,839
want a need to worry

206
00:10:41,839 --> 00:10:46,079
is that interaction and also it's quite

207
00:10:46,079 --> 00:10:50,459
expensive in our team we sometimes it

208
00:10:50,459 --> 00:10:52,800
happens that we buy the toys that we are

209
00:10:52,800 --> 00:10:53,940
playing with

210
00:10:53,940 --> 00:10:56,519
like this one you have all the rocks

211
00:10:56,519 --> 00:11:01,440
each each advice here is a PLC or HMI is

212
00:11:01,440 --> 00:11:05,519
that we are happy to hack it every time

213
00:11:05,519 --> 00:11:08,279
we get but the unfortunate thing that

214
00:11:08,279 --> 00:11:09,860
it's not every

215
00:11:09,860 --> 00:11:14,160
always possible right and for computers

216
00:11:14,160 --> 00:11:17,160
for gas are not that popular on eBay as

217
00:11:17,160 --> 00:11:20,700
USB cables and in this case we

218
00:11:20,700 --> 00:11:24,180
understood that we had to hug the

219
00:11:24,180 --> 00:11:26,700
computer without an actual device and

220
00:11:26,700 --> 00:11:28,740
luckily for us there is a pretty good

221
00:11:28,740 --> 00:11:32,000
alternative to it we essentially do not

222
00:11:32,000 --> 00:11:34,560
interested in bootloader and kernel

223
00:11:34,560 --> 00:11:37,200
research instead in this target we can

224
00:11:37,200 --> 00:11:39,899
just take the file system itself and

225
00:11:39,899 --> 00:11:43,260
just copy it to ready to use Arm machine

226
00:11:43,260 --> 00:11:46,339
and your machine we took a Raspberry Pi

227
00:11:46,339 --> 00:11:49,920
any other arm machine will do and this

228
00:11:49,920 --> 00:11:52,920
is a great choice it's easy it's easy to

229
00:11:52,920 --> 00:11:56,339
set up we are just copying One Directory

230
00:11:56,339 --> 00:11:59,459
from one place to another but this is a

231
00:11:59,459 --> 00:12:02,519
really clear disadvantage our main

232
00:12:02,519 --> 00:12:04,740
binary will at some point we want to

233
00:12:04,740 --> 00:12:07,260
talk to visit peripherals and they just

234
00:12:07,260 --> 00:12:09,600
won't able to because our Raspberry Pi

235
00:12:09,600 --> 00:12:11,519
don't have the sensors and the pipes

236
00:12:11,519 --> 00:12:14,760
that the normal computer will be

237
00:12:14,760 --> 00:12:16,740
attached to and we will need to pack

238
00:12:16,740 --> 00:12:19,920
them and we will see how it's done so

239
00:12:19,920 --> 00:12:22,800
first and third first as I said we will

240
00:12:22,800 --> 00:12:25,920
just tag the file systems the

241
00:12:25,920 --> 00:12:29,339
a root file system within a leap and Bin

242
00:12:29,339 --> 00:12:31,620
directories that we are used to and we

243
00:12:31,620 --> 00:12:34,200
will copy them from the finger to the

244
00:12:34,200 --> 00:12:36,480
Raspberry Pi that's it that's the first

245
00:12:36,480 --> 00:12:42,860
step and the second step is to sorry

246
00:12:43,440 --> 00:12:45,899
that went out

247
00:12:45,899 --> 00:12:47,180
okay

248
00:12:47,180 --> 00:12:50,639
and the second step is the quiet is

249
00:12:50,639 --> 00:12:52,680
important one we need to find the main

250
00:12:52,680 --> 00:12:55,079
binary it's not that obvious it's a

251
00:12:55,079 --> 00:12:58,920
first look and as if you remember I said

252
00:12:58,920 --> 00:13:00,959
that main binary is the one that starts

253
00:13:00,959 --> 00:13:04,740
at boot so any D is a really good place

254
00:13:04,740 --> 00:13:07,560
to look for those and this is where we

255
00:13:07,560 --> 00:13:10,820
found ours it doesn't have

256
00:13:10,820 --> 00:13:14,519
the pretty clarified name as main binary

257
00:13:14,519 --> 00:13:19,019
main binary around me but it's this step

258
00:13:19,019 --> 00:13:23,760
is quite a easy the much harder step is

259
00:13:23,760 --> 00:13:26,399
the next one so we have our main binary

260
00:13:26,399 --> 00:13:30,300
we found one and now we can truth to our

261
00:13:30,300 --> 00:13:34,440
file system and make a the root make a

262
00:13:34,440 --> 00:13:37,620
root context be the new file system that

263
00:13:37,620 --> 00:13:41,040
we are just copied to Raspberry Pi and

264
00:13:41,040 --> 00:13:43,980
we are ready to run the device what will

265
00:13:43,980 --> 00:13:47,639
happen soon after we will it the main

266
00:13:47,639 --> 00:13:50,579
binary will crash why it's just trying

267
00:13:50,579 --> 00:13:52,560
to talk with its sensors visit

268
00:13:52,560 --> 00:13:55,920
peripherals and such our Raspberry Pi

269
00:13:55,920 --> 00:13:58,860
doesn't have some it will crush and in

270
00:13:58,860 --> 00:14:00,860
these cases we need to patch the binary

271
00:14:00,860 --> 00:14:04,800
okay so what do I mean by patching so

272
00:14:04,800 --> 00:14:07,940
our main binary is just an assembly code

273
00:14:07,940 --> 00:14:12,360
a it's a in an arm architecture so what

274
00:14:12,360 --> 00:14:15,000
we do in that case we will take the

275
00:14:15,000 --> 00:14:18,000
function that is responsible to a token

276
00:14:18,000 --> 00:14:20,880
with the peripherals and just remove the

277
00:14:20,880 --> 00:14:23,279
function from the binary remove the

278
00:14:23,279 --> 00:14:25,680
assembly code and put some no operation

279
00:14:25,680 --> 00:14:28,440
instead of it we will pack the binary

280
00:14:28,440 --> 00:14:32,279
back and we will run it again

281
00:14:32,279 --> 00:14:35,720
and we will do it uh as long as needed

282
00:14:35,720 --> 00:14:39,240
until the main binary is up and running

283
00:14:39,240 --> 00:14:41,279
and waiting for connection from the

284
00:14:41,279 --> 00:14:44,699
client and in our case it went pretty

285
00:14:44,699 --> 00:14:48,980
good we patched only seven functions and

286
00:14:48,980 --> 00:14:52,860
within a couple of hours we had our

287
00:14:52,860 --> 00:14:56,160
setup which is quite nice so this is our

288
00:14:56,160 --> 00:15:00,240
flow computer no pipes or anything fancy

289
00:15:00,240 --> 00:15:03,660
but it won't stop us from hacking it and

290
00:15:03,660 --> 00:15:06,300
that's what is important

291
00:15:06,300 --> 00:15:10,920
so we are now commented a step in our

292
00:15:10,920 --> 00:15:12,440
research that we can

293
00:15:12,440 --> 00:15:15,540
review our attack vectors remember that

294
00:15:15,540 --> 00:15:19,260
I said that our attack should be

295
00:15:19,260 --> 00:15:21,240
remotely remotely available we do not

296
00:15:21,240 --> 00:15:23,940
want to plug some USB within the device

297
00:15:23,940 --> 00:15:28,560
in some distant plant and only remotely

298
00:15:28,560 --> 00:15:30,540
available endpoints are relevant to us

299
00:15:30,540 --> 00:15:32,519
the first thing that we would like to

300
00:15:32,519 --> 00:15:35,279
look for is the web server right the

301
00:15:35,279 --> 00:15:37,519
ones that implemented within the device

302
00:15:37,519 --> 00:15:41,959
but unfortunately for for us non-exist

303
00:15:41,959 --> 00:15:45,000
SSH is a good option as well but it's

304
00:15:45,000 --> 00:15:48,240
disabled by default and we need a to

305
00:15:48,240 --> 00:15:52,500
call an operator support to obtain the

306
00:15:52,500 --> 00:15:55,740
key and now one likes them to make calls

307
00:15:55,740 --> 00:15:57,320
right now right

308
00:15:57,320 --> 00:16:00,240
modbus is pretty modbus protocol you

309
00:16:00,240 --> 00:16:02,759
remember we talked about it's a it's

310
00:16:02,759 --> 00:16:05,100
available option for us but this

311
00:16:05,100 --> 00:16:07,560
protocol is available people reviewed

312
00:16:07,560 --> 00:16:11,100
and it it has pretty narrow attack

313
00:16:11,100 --> 00:16:13,980
surface so it's not that perfect for us

314
00:16:13,980 --> 00:16:16,259
but fortunately for us we have another

315
00:16:16,259 --> 00:16:19,139
option we have the total flow protocol

316
00:16:19,139 --> 00:16:21,779
which is a proprietary and not

317
00:16:21,779 --> 00:16:24,540
documented protocol that is used to

318
00:16:24,540 --> 00:16:28,259
configure the device and this is sounded

319
00:16:28,259 --> 00:16:32,160
a good way to go and it was

320
00:16:32,160 --> 00:16:34,980
so just to recap what we have up until

321
00:16:34,980 --> 00:16:37,920
now we have our client a totals of

322
00:16:37,920 --> 00:16:42,300
client we downloaded it from the app web

323
00:16:42,300 --> 00:16:45,380
server and it can connect to any device

324
00:16:45,380 --> 00:16:48,839
that supports total total flow of

325
00:16:48,839 --> 00:16:51,720
protocol right and we have our main

326
00:16:51,720 --> 00:16:56,040
binary that runs on our Raspberry Pi and

327
00:16:56,040 --> 00:16:59,940
it emulates the flow computers the real

328
00:16:59,940 --> 00:17:02,699
phone computer and it waits for the

329
00:17:02,699 --> 00:17:06,119
connection from the client and it's a

330
00:17:06,119 --> 00:17:08,839
good time to

331
00:17:08,839 --> 00:17:12,299
just to

332
00:17:12,299 --> 00:17:14,880
connect them together and see what we

333
00:17:14,880 --> 00:17:15,839
got

334
00:17:15,839 --> 00:17:18,740
so this is what we got is this is a

335
00:17:18,740 --> 00:17:23,280
screenshot from uh from Wireshark and we

336
00:17:23,280 --> 00:17:25,799
see that the protocol is binary one it

337
00:17:25,799 --> 00:17:27,959
has some ASCII Adder which is good for

338
00:17:27,959 --> 00:17:30,360
us we know that we are reviewing the

339
00:17:30,360 --> 00:17:33,600
correct protocol that's nice but nothing

340
00:17:33,600 --> 00:17:37,860
else understood for us and our job is

341
00:17:37,860 --> 00:17:41,039
pretty clear we need to reverse engineer

342
00:17:41,039 --> 00:17:43,620
the protocol we need to understand it we

343
00:17:43,620 --> 00:17:46,440
need to find a bug within it and we need

344
00:17:46,440 --> 00:17:50,220
to exploit so that's fun fun and it is

345
00:17:50,220 --> 00:17:53,120
so let's start

346
00:17:54,860 --> 00:17:59,419
uh so right now we will look at

347
00:17:59,419 --> 00:18:02,700
two main approaches for reverse

348
00:18:02,700 --> 00:18:05,760
engineering the protocol the binary the

349
00:18:05,760 --> 00:18:07,380
main binary that we got within the

350
00:18:07,380 --> 00:18:10,200
firmware was very binary no symbols

351
00:18:10,200 --> 00:18:12,600
whatsoever we don't know what's going on

352
00:18:12,600 --> 00:18:16,500
and to find the code base that is

353
00:18:16,500 --> 00:18:19,140
relevant for us it's not that obvious so

354
00:18:19,140 --> 00:18:22,320
we need to find something that will that

355
00:18:22,320 --> 00:18:25,080
will have a pretty good close that we

356
00:18:25,080 --> 00:18:28,440
are on the right track and there is some

357
00:18:28,440 --> 00:18:31,919
some places that we can look at one of

358
00:18:31,919 --> 00:18:35,760
them is a CRC lookup tables and some

359
00:18:35,760 --> 00:18:39,120
socket operations port numbers and

360
00:18:39,120 --> 00:18:41,880
another thing is that we can match our

361
00:18:41,880 --> 00:18:44,820
strengths from the binary from the

362
00:18:44,820 --> 00:18:47,220
client to the binary and see if there is

363
00:18:47,220 --> 00:18:50,880
a some matching strengths in order in

364
00:18:50,880 --> 00:18:53,039
order to find some functionalities that

365
00:18:53,039 --> 00:18:55,919
will be relevant for us and once we

366
00:18:55,919 --> 00:18:58,080
found the functions that is relevant

367
00:18:58,080 --> 00:19:00,539
it's relevance for our protocol we can

368
00:19:00,539 --> 00:19:04,020
just run the main binary within a GDP we

369
00:19:04,020 --> 00:19:07,380
can break on this uh on those functions

370
00:19:07,380 --> 00:19:10,200
and look for uh investigative stock

371
00:19:10,200 --> 00:19:12,360
price back and forth until we understand

372
00:19:12,360 --> 00:19:15,059
the protocol so after many many hours

373
00:19:15,059 --> 00:19:18,799
that what we came up with and

374
00:19:18,799 --> 00:19:22,260
please note that not every beat and byte

375
00:19:22,260 --> 00:19:24,600
is tagged here we do not understand

376
00:19:24,600 --> 00:19:27,539
everything but we understand enough in

377
00:19:27,539 --> 00:19:30,360
order to construct the payload ourselves

378
00:19:30,360 --> 00:19:33,600
right now we can buy a we can write our

379
00:19:33,600 --> 00:19:37,140
own client in python or whatever just to

380
00:19:37,140 --> 00:19:39,780
be able to talk with a as a device

381
00:19:39,780 --> 00:19:43,559
without any client

382
00:19:43,559 --> 00:19:46,080
and there is only one thing that I want

383
00:19:46,080 --> 00:19:49,559
to put your attention to it and these

384
00:19:49,559 --> 00:19:53,220
two bytes okay so remember the a four

385
00:19:53,220 --> 00:19:55,260
digit pass passcode that I talked about

386
00:19:55,260 --> 00:20:01,140
this is two bytes that uh our crc16 of

387
00:20:01,140 --> 00:20:04,080
that passcode so it's also two buyers

388
00:20:04,080 --> 00:20:07,020
that are indicates whether the client is

389
00:20:07,020 --> 00:20:10,559
authorized to make the request or not so

390
00:20:10,559 --> 00:20:13,200
I hope that you're getting wheels me

391
00:20:13,200 --> 00:20:15,720
here that we have our first

392
00:20:15,720 --> 00:20:17,100
vulnerability

393
00:20:17,100 --> 00:20:19,919
so we have an authentication bypass and

394
00:20:19,919 --> 00:20:22,440
let's talk about how it works so we just

395
00:20:22,440 --> 00:20:25,919
pick some a passcode for the digit

396
00:20:25,919 --> 00:20:29,580
passcode and we will put it in some aim

397
00:20:29,580 --> 00:20:32,940
in our client the client will perform

398
00:20:32,940 --> 00:20:36,480
the crc16 and we'll send it to the

399
00:20:36,480 --> 00:20:39,720
server to our Raspberry Pi and the

400
00:20:39,720 --> 00:20:42,720
Raspberry Pi will check the CRC code if

401
00:20:42,720 --> 00:20:46,380
it's a ones that he expects the correct

402
00:20:46,380 --> 00:20:49,880
one he will receive the a payload and

403
00:20:49,880 --> 00:20:54,240
another case it will send an error so we

404
00:20:54,240 --> 00:20:56,700
have a pretty good indication if our

405
00:20:56,700 --> 00:20:58,919
passcode is the correct one and from

406
00:20:58,919 --> 00:21:00,179
here the attack is pretty

407
00:21:00,179 --> 00:21:04,039
straightforward with no rate limitation

408
00:21:04,039 --> 00:21:08,520
available we can just calculate all CRC

409
00:21:08,520 --> 00:21:13,140
16 of all four digit space and just send

410
00:21:13,140 --> 00:21:16,140
the code one after another until we get

411
00:21:16,140 --> 00:21:18,960
a correct one something like one minute

412
00:21:18,960 --> 00:21:22,159
that's cool

413
00:21:24,559 --> 00:21:28,320
so being authenticated it's cool we are

414
00:21:28,320 --> 00:21:31,440
now able to do from our python client

415
00:21:31,440 --> 00:21:33,360
the same thing that our authenticated

416
00:21:33,360 --> 00:21:36,720
user can do from Windows machine from

417
00:21:36,720 --> 00:21:39,179
Windows client and that's pretty cool

418
00:21:39,179 --> 00:21:42,720
but remember we want to execute

419
00:21:42,720 --> 00:21:45,360
arbitrary code on those devices and

420
00:21:45,360 --> 00:21:47,700
being authenticated is not enough we

421
00:21:47,700 --> 00:21:50,400
need it to find another bug and there is

422
00:21:50,400 --> 00:21:53,940
a good place to look for those and this

423
00:21:53,940 --> 00:21:57,120
is a file operations so unfortunately

424
00:21:57,120 --> 00:22:00,179
for us we have one an operator that

425
00:22:00,179 --> 00:22:03,059
maintains the device can download and

426
00:22:03,059 --> 00:22:05,880
upload the configuration files in case

427
00:22:05,880 --> 00:22:08,580
he wants to duplicate a configuration or

428
00:22:08,580 --> 00:22:12,559
maybe download some logs and let's just

429
00:22:12,559 --> 00:22:14,700
investigate how it looks like in

430
00:22:14,700 --> 00:22:18,780
Wireshark and as we see here we see that

431
00:22:18,780 --> 00:22:21,780
the wall path is forwarded within the

432
00:22:21,780 --> 00:22:25,440
payload of what a file wants to read so

433
00:22:25,440 --> 00:22:28,679
the question is pretty obvious can be a

434
00:22:28,679 --> 00:22:32,220
password can we just come back to the

435
00:22:32,220 --> 00:22:34,860
root directory and read any other file

436
00:22:34,860 --> 00:22:37,980
maybe do they mitigate again against

437
00:22:37,980 --> 00:22:41,460
past reversal so let's find out

438
00:22:41,460 --> 00:22:44,640
so what we do is we have our client we

439
00:22:44,640 --> 00:22:47,039
understand the protocol we can write any

440
00:22:47,039 --> 00:22:50,159
payload that we want and the other

441
00:22:50,159 --> 00:22:53,880
things the obvious file to look for is a

442
00:22:53,880 --> 00:22:57,539
latest Shadow file and that's what we do

443
00:22:57,539 --> 00:23:00,179
we just put a path that Traverse back to

444
00:23:00,179 --> 00:23:04,460
the root and as for it is shadow

445
00:23:04,460 --> 00:23:06,539
I'm sorry

446
00:23:06,539 --> 00:23:10,100
that click here is quite bad

447
00:23:10,440 --> 00:23:15,360
so uh there is a spoiler within the uh

448
00:23:15,360 --> 00:23:19,260
within the slides I hope they didn't see

449
00:23:19,260 --> 00:23:23,460
it so we saw this one this is compressed

450
00:23:23,460 --> 00:23:26,600
payload we see it's from those two bytes

451
00:23:26,600 --> 00:23:30,240
and the moment it's gone but I will show

452
00:23:30,240 --> 00:23:34,200
you again after we will decompress it in

453
00:23:34,200 --> 00:23:37,260
our current this is the file that we get

454
00:23:37,260 --> 00:23:40,020
and I hope that the file is familiar to

455
00:23:40,020 --> 00:23:42,240
you this is how it is a shadow looks

456
00:23:42,240 --> 00:23:44,820
like so it looks like we can read an

457
00:23:44,820 --> 00:23:48,000
arbitrary a file within the device this

458
00:23:48,000 --> 00:23:50,940
is a sensitive information a client and

459
00:23:50,940 --> 00:23:54,000
no one else should be able to get those

460
00:23:54,000 --> 00:23:58,620
files and the right right files a

461
00:23:58,620 --> 00:24:01,020
download to the device itself works

462
00:24:01,020 --> 00:24:03,799
pretty the same way and now we have

463
00:24:03,799 --> 00:24:07,740
arbitrary read and write primitive on

464
00:24:07,740 --> 00:24:10,860
the device in other words is it Target

465
00:24:10,860 --> 00:24:14,279
is ours it's now just a matter of how we

466
00:24:14,279 --> 00:24:17,520
exploit it and the easiest way to

467
00:24:17,520 --> 00:24:21,179
exploit it is just to turn on the SSH

468
00:24:21,179 --> 00:24:23,279
remember that I told you that it is

469
00:24:23,279 --> 00:24:27,179
disabled by default so and has an

470
00:24:27,179 --> 00:24:29,460
authentication key so it's pretty simple

471
00:24:29,460 --> 00:24:32,520
we will just enable the SSH we'll put

472
00:24:32,520 --> 00:24:37,080
our key to the authorized Keys files and

473
00:24:37,080 --> 00:24:40,520
let's see how we did it

474
00:24:40,520 --> 00:24:45,179
so we used we need first to authenticate

475
00:24:45,179 --> 00:24:47,820
we authenticate with the general attacks

476
00:24:47,820 --> 00:24:51,480
the same way that I described before and

477
00:24:51,480 --> 00:24:53,700
then we use our past reversal

478
00:24:53,700 --> 00:24:56,760
vulnerability to ask for authorized Keys

479
00:24:56,760 --> 00:24:59,820
files not the files that that should be

480
00:24:59,820 --> 00:25:02,340
available to the attacker and any other

481
00:25:02,340 --> 00:25:06,240
client this is a file that will save all

482
00:25:06,240 --> 00:25:09,559
the keys that SSH will agree to

483
00:25:09,559 --> 00:25:13,559
to authenticate with and we will just

484
00:25:13,559 --> 00:25:17,340
generate our own keeper and put as a

485
00:25:17,340 --> 00:25:19,699
file back

486
00:25:20,159 --> 00:25:22,400
and we will use the same password

487
00:25:22,400 --> 00:25:25,860
vulnerability in order to you know in

488
00:25:25,860 --> 00:25:29,039
order to put the file back and we will

489
00:25:29,039 --> 00:25:31,740
enable the SSH it just is the way the

490
00:25:31,740 --> 00:25:35,700
client would edit and we will have we

491
00:25:35,700 --> 00:25:39,179
have the SSH connection with root

492
00:25:39,179 --> 00:25:43,620
because what other user can do it right

493
00:25:43,620 --> 00:25:47,220
so this is a short demo

494
00:25:47,220 --> 00:25:50,340
is this is

495
00:25:50,340 --> 00:25:53,000
oh

496
00:25:55,980 --> 00:25:58,820
does it work

497
00:26:00,419 --> 00:26:03,200
yay

498
00:26:04,320 --> 00:26:07,380
so this one takes some other approach

499
00:26:07,380 --> 00:26:11,340
with SSH configuration files but this is

500
00:26:11,340 --> 00:26:15,000
the same thing basically and we just uh

501
00:26:15,000 --> 00:26:17,580
took the SSH config

502
00:26:17,580 --> 00:26:21,740
we do some our magic to it

503
00:26:26,520 --> 00:26:30,120
so now what we can do is to assess to

504
00:26:30,120 --> 00:26:32,479
our device

505
00:26:38,159 --> 00:26:43,340
and we have wrote on the device

506
00:26:46,980 --> 00:26:51,200
so that was quite quite cool right

507
00:26:51,200 --> 00:26:55,919
so there is a pretty large impact to it

508
00:26:55,919 --> 00:26:59,460
right morinda talked about it and let us

509
00:26:59,460 --> 00:27:04,080
think for it for a moment and for us I

510
00:27:04,080 --> 00:27:06,659
would like just just to go on the

511
00:27:06,659 --> 00:27:10,080
summary of what we saw we learned what

512
00:27:10,080 --> 00:27:13,620
flow computers are that we can hack them

513
00:27:13,620 --> 00:27:15,320
without the real device

514
00:27:15,320 --> 00:27:18,120
how to reverse engineer the proprietary

515
00:27:18,120 --> 00:27:20,700
protocol that we have not no knowledge

516
00:27:20,700 --> 00:27:26,279
about it and how to get a gas free free

517
00:27:26,279 --> 00:27:29,520
gas for life so that's it I hope that

518
00:27:29,520 --> 00:27:32,360
you enjoyed the talk

519
00:27:36,000 --> 00:27:39,059
feel free to talk to reach me out and

520
00:27:39,059 --> 00:27:39,800
ask questions

521
00:27:39,800 --> 00:27:41,710
[Applause]

522
00:27:41,710 --> 00:27:43,660
[Music]

523
00:27:43,660 --> 00:27:44,170
[Applause]

524
00:27:44,170 --> 00:27:50,320
[Music]

525
00:27:50,320 --> 00:27:53,500
[Applause]

