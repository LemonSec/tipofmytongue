1
00:00:00,290 --> 00:00:03,220
[Music]

2
00:00:03,220 --> 00:00:03,740
[Applause]

3
00:00:03,740 --> 00:00:10,400
[Music]

4
00:00:10,800 --> 00:00:12,799
hello everyone and thank you for joining

5
00:00:12,799 --> 00:00:14,559
us today

6
00:00:14,559 --> 00:00:16,320
we're really excited to be here in these

7
00:00:16,320 --> 00:00:18,560
sides uh for me it's the first time

8
00:00:18,560 --> 00:00:20,480
talking in a conference so i'm a little

9
00:00:20,480 --> 00:00:21,760
bit excited

10
00:00:21,760 --> 00:00:23,199
um

11
00:00:23,199 --> 00:00:24,360
thank you

12
00:00:24,360 --> 00:00:25,840
[Applause]

13
00:00:25,840 --> 00:00:27,680
and we'll talk today about the operation

14
00:00:27,680 --> 00:00:29,119
cuckoo bees

15
00:00:29,119 --> 00:00:30,960
that we investigated as part of incident

16
00:00:30,960 --> 00:00:32,159
response

17
00:00:32,159 --> 00:00:34,160
last year

18
00:00:34,160 --> 00:00:35,440
before we'll deep dive into the

19
00:00:35,440 --> 00:00:37,840
operation let us introduce ourselves so

20
00:00:37,840 --> 00:00:39,600
my name is niviona

21
00:00:39,600 --> 00:00:41,680
i'm working in cyberism for the past

22
00:00:41,680 --> 00:00:43,920
five years and i'm the research director

23
00:00:43,920 --> 00:00:45,680
right now before that i was in the

24
00:00:45,680 --> 00:00:48,640
incident response team with the fear and

25
00:00:48,640 --> 00:00:49,600
and

26
00:00:49,600 --> 00:00:51,520
five years ago we also spent time

27
00:00:51,520 --> 00:00:54,239
together in the israeli air force

28
00:00:54,239 --> 00:00:56,000
and i was the soccer instant response

29
00:00:56,000 --> 00:00:57,360
team lead

30
00:00:57,360 --> 00:00:59,600
ken forced me to add a fun fact about

31
00:00:59,600 --> 00:01:02,960
myself so let's say i love to surf

32
00:01:02,960 --> 00:01:06,879
and show off my adopted dog eric

33
00:01:08,479 --> 00:01:11,200
hi everyone so my name is khan erlich

34
00:01:11,200 --> 00:01:13,040
i'm doing insulin response at nocturnal

35
00:01:13,040 --> 00:01:14,720
cyber region

36
00:01:14,720 --> 00:01:16,400
and before that i was senior security

37
00:01:16,400 --> 00:01:18,320
researcher at symptom and senior threat

38
00:01:18,320 --> 00:01:20,400
intelligence researcher at insilo

39
00:01:20,400 --> 00:01:22,799
and besides that i like to practice muay

40
00:01:22,799 --> 00:01:24,400
thai and mma and i'm doing it for the

41
00:01:24,400 --> 00:01:25,200
last

42
00:01:25,200 --> 00:01:29,600
15 years and you can find me on twitter

43
00:01:30,640 --> 00:01:34,320
and lastly hi everyone i'm ophel and i'm

44
00:01:34,320 --> 00:01:36,479
also an incident response engineer at

45
00:01:36,479 --> 00:01:38,799
cyber reason beforehand there was a

46
00:01:38,799 --> 00:01:41,200
windows malware researcher at trusteer

47
00:01:41,200 --> 00:01:44,240
ibm i'm also a drummer and i really

48
00:01:44,240 --> 00:01:46,240
really like football the right kind of

49
00:01:46,240 --> 00:01:48,799
football the one with the round ball and

50
00:01:48,799 --> 00:01:52,320
yeah that's it let's begin

51
00:01:52,320 --> 00:01:55,280
thanks

52
00:01:55,280 --> 00:01:56,079
so

53
00:01:56,079 --> 00:01:57,680
last year we got an alert for a

54
00:01:57,680 --> 00:02:00,000
suspicious credential theft in one of

55
00:02:00,000 --> 00:02:01,840
our customers environments

56
00:02:01,840 --> 00:02:03,200
from theirs we kicked in the

57
00:02:03,200 --> 00:02:05,360
investigation of months uncovering the

58
00:02:05,360 --> 00:02:09,280
full operation of windy that span in

59
00:02:09,280 --> 00:02:11,520
three continents north america asia and

60
00:02:11,520 --> 00:02:12,560
the

61
00:02:12,560 --> 00:02:13,680
europe

62
00:02:13,680 --> 00:02:16,000
but before we dive into the operation

63
00:02:16,000 --> 00:02:18,239
let's zoom out for an overview of

64
00:02:18,239 --> 00:02:18,959
the

65
00:02:18,959 --> 00:02:21,599
operation uh with that without this

66
00:02:21,599 --> 00:02:24,879
operation cucumbers

67
00:02:26,000 --> 00:02:28,080
so operation cucumbers is a espionage

68
00:02:28,080 --> 00:02:30,800
campaign um doing this campaign the true

69
00:02:30,800 --> 00:02:34,720
apt um sold terabytes of sensitive data

70
00:02:34,720 --> 00:02:37,120
from the customers environments and in

71
00:02:37,120 --> 00:02:40,720
all of other companies around the world

72
00:02:40,720 --> 00:02:43,280
it was started from an erp exploit that

73
00:02:43,280 --> 00:02:44,560
they found

74
00:02:44,560 --> 00:02:45,760
in a public

75
00:02:45,760 --> 00:02:48,480
in an internet facing a server from

76
00:02:48,480 --> 00:02:50,959
there they deployed web shells in this

77
00:02:50,959 --> 00:02:53,519
patient zero um we found that they use

78
00:02:53,519 --> 00:02:56,239
novel espionage tools uh rootkey that we

79
00:02:56,239 --> 00:02:59,040
dubbed the zwin kit and a really cool

80
00:02:59,040 --> 00:03:02,720
abuse of windows clfs

81
00:03:02,720 --> 00:03:04,159
as i said it happened on three

82
00:03:04,159 --> 00:03:07,599
continents asia north america and europe

83
00:03:07,599 --> 00:03:10,640
and it was done by uh with the

84
00:03:10,640 --> 00:03:12,800
highly confidence as winty which is a

85
00:03:12,800 --> 00:03:13,920
chinese

86
00:03:13,920 --> 00:03:15,680
nation state apt

87
00:03:15,680 --> 00:03:18,640
that is also tracked as ap 41 blackfly

88
00:03:18,640 --> 00:03:20,640
and barium

89
00:03:20,640 --> 00:03:22,640
the motive behind this attack is

90
00:03:22,640 --> 00:03:26,480
geopolitics and economical

91
00:03:27,680 --> 00:03:30,000
but before

92
00:03:30,000 --> 00:03:32,560
okay and now let's get intimate with the

93
00:03:32,560 --> 00:03:34,400
winty the apt group who did this

94
00:03:34,400 --> 00:03:36,000
operation

95
00:03:36,000 --> 00:03:37,680
to understand the motives behind this

96
00:03:37,680 --> 00:03:40,640
attack uh we need to go back to 2015

97
00:03:40,640 --> 00:03:42,239
when china initiates the national

98
00:03:42,239 --> 00:03:44,840
strategic plan that coal made in china

99
00:03:44,840 --> 00:03:48,000
2025. the plan seeks to engineer china

100
00:03:48,000 --> 00:03:49,920
from being a low end manufacturer to

101
00:03:49,920 --> 00:03:52,640
becoming guy and producer of goods

102
00:03:52,640 --> 00:03:54,879
china goal was to gain global market

103
00:03:54,879 --> 00:03:56,879
domination by achieving independence

104
00:03:56,879 --> 00:03:58,400
from foreign suppliers and other

105
00:03:58,400 --> 00:04:00,640
countries

106
00:04:00,640 --> 00:04:03,680
to do so the government chose 10 key

107
00:04:03,680 --> 00:04:05,840
sectors that we can see over here that

108
00:04:05,840 --> 00:04:07,920
they want to do that

109
00:04:07,920 --> 00:04:10,000
for example new information technology

110
00:04:10,000 --> 00:04:12,480
energy saving new materials

111
00:04:12,480 --> 00:04:15,840
and so on

112
00:04:16,238 --> 00:04:18,880
four years later in 2019 the fbi

113
00:04:18,880 --> 00:04:21,120
published a research describing china's

114
00:04:21,120 --> 00:04:23,840
risk to cooperate america in this report

115
00:04:23,840 --> 00:04:26,479
the fbi summarized the risks the risk

116
00:04:26,479 --> 00:04:29,120
that china imposes to the u.s economy

117
00:04:29,120 --> 00:04:31,280
prove the lacking problem

118
00:04:31,280 --> 00:04:34,159
the acting program

119
00:04:36,320 --> 00:04:38,720
a few months ago an fbi director spoke

120
00:04:38,720 --> 00:04:41,880
in uh

121
00:04:42,160 --> 00:04:44,960
um sorry going back um in this report

122
00:04:44,960 --> 00:04:46,960
they they mentioned that the annual cost

123
00:04:46,960 --> 00:04:49,520
um to the us economy um for counterfeit

124
00:04:49,520 --> 00:04:51,759
goods piloted software and theft of

125
00:04:51,759 --> 00:04:54,240
trade secrets is between 225 to 600

126
00:04:54,240 --> 00:04:56,720
billion dollars a year and china is a

127
00:04:56,720 --> 00:04:58,560
big part of it

128
00:04:58,560 --> 00:05:00,560
also in the report they state that in

129
00:05:00,560 --> 00:05:02,479
order to get this impact the chinese

130
00:05:02,479 --> 00:05:04,800
government is using illegal ways

131
00:05:04,800 --> 00:05:06,960
such as trading secrets stealing

132
00:05:06,960 --> 00:05:09,199
proprietary data and from foreign

133
00:05:09,199 --> 00:05:11,840
countries

134
00:05:14,240 --> 00:05:16,880
and to achieve this goal went the acts

135
00:05:16,880 --> 00:05:18,320
and we believe that this operation is

136
00:05:18,320 --> 00:05:19,680
part of it

137
00:05:19,680 --> 00:05:21,199
over the years the winter group

138
00:05:21,199 --> 00:05:23,600
initiated thousands of successful

139
00:05:23,600 --> 00:05:25,520
attacks getting headlines all over the

140
00:05:25,520 --> 00:05:26,639
world

141
00:05:26,639 --> 00:05:28,880
and a few months ago an fbi director

142
00:05:28,880 --> 00:05:30,720
said in the 60-minute show that the

143
00:05:30,720 --> 00:05:32,160
biggest threat for the american law

144
00:05:32,160 --> 00:05:34,880
enforcement is from chinese actors

145
00:05:34,880 --> 00:05:36,880
stealing proprietary information

146
00:05:36,880 --> 00:05:39,039
according to him the view opens a new

147
00:05:39,039 --> 00:05:41,759
china counter intelligence investigation

148
00:05:41,759 --> 00:05:45,039
about every 12 hours

149
00:05:46,960 --> 00:05:48,240
and we can see

150
00:05:48,240 --> 00:05:50,160
his quotes from this show they are

151
00:05:50,160 --> 00:05:52,080
targeting our innovation our trade

152
00:05:52,080 --> 00:05:54,320
secrets our intelli intellectual

153
00:05:54,320 --> 00:05:56,400
property is at a scale that is

154
00:05:56,400 --> 00:05:58,720
unprecedented in history they have a

155
00:05:58,720 --> 00:06:00,160
bigger racking program than all other

156
00:06:00,160 --> 00:06:02,960
major nations

157
00:06:04,560 --> 00:06:06,000
so now that we understand the motives

158
00:06:06,000 --> 00:06:07,919
behind this attack let's go back to

159
00:06:07,919 --> 00:06:10,880
winter and get to get intimate with them

160
00:06:10,880 --> 00:06:14,240
um so as i said winty is a chinese apt

161
00:06:14,240 --> 00:06:15,919
nation state apt

162
00:06:15,919 --> 00:06:18,479
they are active from at least 2010 um

163
00:06:18,479 --> 00:06:20,639
until today and they have free focus

164
00:06:20,639 --> 00:06:22,720
areas and they are state aligned cyber

165
00:06:22,720 --> 00:06:24,080
espionage

166
00:06:24,080 --> 00:06:26,800
ip theft and cyber crime including

167
00:06:26,800 --> 00:06:30,000
ransomware cryptocurrency miners um and

168
00:06:30,000 --> 00:06:31,680
fraud

169
00:06:31,680 --> 00:06:35,400
and they're active worldwide

170
00:06:35,919 --> 00:06:38,319
so what is the progression cucumbers

171
00:06:38,319 --> 00:06:40,639
operation cucumbers is a multi-cyber

172
00:06:40,639 --> 00:06:42,720
espionage intrusion

173
00:06:42,720 --> 00:06:44,479
during the investigation

174
00:06:44,479 --> 00:06:46,800
we found that the intrusions are

175
00:06:46,800 --> 00:06:49,199
there from at least 2019 and they were

176
00:06:49,199 --> 00:06:50,560
undetected

177
00:06:50,560 --> 00:06:52,800
with the goal of stealing ip from tech

178
00:06:52,800 --> 00:06:54,800
and manufacturing companies

179
00:06:54,800 --> 00:06:57,520
around the world

180
00:06:58,720 --> 00:06:59,919
during the investigation we could

181
00:06:59,919 --> 00:07:01,840
attribute the operation to winty the

182
00:07:01,840 --> 00:07:03,680
chinese fret actor

183
00:07:03,680 --> 00:07:05,840
and we could uncover the latest

184
00:07:05,840 --> 00:07:07,919
techniques and their playbook that we

185
00:07:07,919 --> 00:07:10,639
will describe in the presentation

186
00:07:10,639 --> 00:07:12,160
we found some evasive and rare

187
00:07:12,160 --> 00:07:14,720
techniques and newly discovered malware

188
00:07:14,720 --> 00:07:16,960
and rootkey that we will talk about it

189
00:07:16,960 --> 00:07:19,120
later

190
00:07:19,120 --> 00:07:19,919
so

191
00:07:19,919 --> 00:07:22,400
let's go deep and understand

192
00:07:22,400 --> 00:07:24,400
how they did everything and now the what

193
00:07:24,400 --> 00:07:26,880
is the kill chain in the attack

194
00:07:26,880 --> 00:07:28,560
so it's all started from externally

195
00:07:28,560 --> 00:07:30,400
facing server exploitation

196
00:07:30,400 --> 00:07:32,560
after they got in they moved to install

197
00:07:32,560 --> 00:07:35,759
persistence um then they did two phases

198
00:07:35,759 --> 00:07:37,759
of reconnaissance that was split into

199
00:07:37,759 --> 00:07:40,319
initial and advanced um

200
00:07:40,319 --> 00:07:42,560
the next phase was credential dumping

201
00:07:42,560 --> 00:07:44,720
after they gather credentials they move

202
00:07:44,720 --> 00:07:46,560
laterally between the servers and

203
00:07:46,560 --> 00:07:48,879
machining the environment and the last

204
00:07:48,879 --> 00:07:50,000
phase was data collection and

205
00:07:50,000 --> 00:07:52,800
exfiltration

206
00:07:53,840 --> 00:07:55,919
so the entry point the entry point in

207
00:07:55,919 --> 00:07:59,520
this operation was scanning when t

208
00:07:59,520 --> 00:08:01,039
scanned the internet looking for

209
00:08:01,039 --> 00:08:02,639
certainly facing servers that test

210
00:08:02,639 --> 00:08:04,879
vulnerabilities in this case they found

211
00:08:04,879 --> 00:08:07,680
their famous erp server

212
00:08:07,680 --> 00:08:09,599
and they found multiple rc

213
00:08:09,599 --> 00:08:12,160
vulnerabilities that they exploited

214
00:08:12,160 --> 00:08:14,720
after they exploited it

215
00:08:14,720 --> 00:08:16,160
they look for

216
00:08:16,160 --> 00:08:19,599
the specific dll that was on the

217
00:08:19,599 --> 00:08:21,520
vmware tools folder

218
00:08:21,520 --> 00:08:24,400
that it was loaded by the dropper and

219
00:08:24,400 --> 00:08:27,520
was supposed to inject to svc host this

220
00:08:27,520 --> 00:08:29,199
dll

221
00:08:29,199 --> 00:08:31,360
this is also might be an indication of

222
00:08:31,360 --> 00:08:32,880
an older attack that already been there

223
00:08:32,880 --> 00:08:34,799
and wanted to check if the dll is

224
00:08:34,799 --> 00:08:37,440
already there

225
00:08:37,440 --> 00:08:40,320
from there they move to persistence we

226
00:08:40,320 --> 00:08:42,559
can see the web shells we found dozens

227
00:08:42,559 --> 00:08:44,959
of web shells installed

228
00:08:44,959 --> 00:08:47,120
in the in patient zero

229
00:08:47,120 --> 00:08:48,000
um

230
00:08:48,000 --> 00:08:50,880
and they put a jsp code in the web

231
00:08:50,880 --> 00:08:53,360
shells by looking this web shells online

232
00:08:53,360 --> 00:08:56,240
we could find in chinese forum acoust

233
00:08:56,240 --> 00:08:59,040
forum and in github the existence of the

234
00:08:59,040 --> 00:09:01,920
web shelf from 2006 and this is also one

235
00:09:01,920 --> 00:09:05,199
of the ttps of wintey

236
00:09:06,000 --> 00:09:07,839
after we started to block them they

237
00:09:07,839 --> 00:09:10,399
tried to to try to gain additional

238
00:09:10,399 --> 00:09:13,920
persistence mechanism and they moved uh

239
00:09:13,920 --> 00:09:16,000
to use the winner m winner am is the

240
00:09:16,000 --> 00:09:19,600
windows capability um that's by

241
00:09:19,600 --> 00:09:22,000
by enabling that they got remote access

242
00:09:22,000 --> 00:09:24,320
over http and https

243
00:09:24,320 --> 00:09:26,560
we can see here the command line that

244
00:09:26,560 --> 00:09:30,320
they used to enable winram

245
00:09:30,320 --> 00:09:32,160
and the last

246
00:09:32,160 --> 00:09:34,800
way of persistence was dll side loading

247
00:09:34,800 --> 00:09:36,560
they perform the ll side loading to

248
00:09:36,560 --> 00:09:37,600
persist

249
00:09:37,600 --> 00:09:39,600
through legitimate windows service in

250
00:09:39,600 --> 00:09:42,720
this case it's a print notifier service

251
00:09:42,720 --> 00:09:43,920
they

252
00:09:43,920 --> 00:09:46,880
siloed into it at dbg help

253
00:09:46,880 --> 00:09:49,120
that hen will talk about it later with

254
00:09:49,120 --> 00:09:52,560
we called it a deploy log

255
00:09:52,880 --> 00:09:54,640
from there they moved to a

256
00:09:54,640 --> 00:09:57,519
reconnaissance um as i said with speed

257
00:09:57,519 --> 00:09:59,680
reconnaissance into two phases initially

258
00:09:59,680 --> 00:10:01,760
coincidence and advanced reconnaissance

259
00:10:01,760 --> 00:10:03,200
here the first commands that they use

260
00:10:03,200 --> 00:10:06,240
well carry these cos and root print

261
00:10:06,240 --> 00:10:08,480
which gave us the lead that they use

262
00:10:08,480 --> 00:10:09,839
automated the

263
00:10:09,839 --> 00:10:12,000
scanning tools um

264
00:10:12,000 --> 00:10:13,920
since this is a windows server and cadit

265
00:10:13,920 --> 00:10:16,320
cos is a unix command after they

266
00:10:16,320 --> 00:10:17,680
understand they're running on windows

267
00:10:17,680 --> 00:10:19,600
they started to run a command such as

268
00:10:19,600 --> 00:10:21,920
system in for netstar net user to gain

269
00:10:21,920 --> 00:10:25,680
more information about patient zero

270
00:10:26,800 --> 00:10:28,640
the next phase of reconnaissance was

271
00:10:28,640 --> 00:10:30,800
using a scheduled task the deploy batch

272
00:10:30,800 --> 00:10:33,360
file in this scheduled task that the

273
00:10:33,360 --> 00:10:35,440
content changed from face to face and

274
00:10:35,440 --> 00:10:37,440
for machine to machine

275
00:10:37,440 --> 00:10:39,760
the content contained lol bins living of

276
00:10:39,760 --> 00:10:42,320
the land binaries which are windows

277
00:10:42,320 --> 00:10:45,760
built-in executables to evade detection

278
00:10:45,760 --> 00:10:47,600
and we can see some of the used commands

279
00:10:47,600 --> 00:10:50,160
fst like the config netstat

280
00:10:50,160 --> 00:10:52,719
and so on

281
00:10:55,519 --> 00:10:57,279
now really understand

282
00:10:57,279 --> 00:10:59,120
where well what is the network that

283
00:10:59,120 --> 00:11:01,279
they're working on and they wanted to

284
00:11:01,279 --> 00:11:03,440
gain a credential so they can move

285
00:11:03,440 --> 00:11:06,399
laterally um and we found this first

286
00:11:06,399 --> 00:11:08,240
technique they used undocumented

287
00:11:08,240 --> 00:11:10,160
executable at the time of the

288
00:11:10,160 --> 00:11:12,800
investigation that called mfs dll and in

289
00:11:12,800 --> 00:11:15,360
one of this command in the same command

290
00:11:15,360 --> 00:11:16,959
we observed

291
00:11:16,959 --> 00:11:19,200
loading of mimikaze module which is a

292
00:11:19,200 --> 00:11:22,560
well-known tool for credential theft

293
00:11:22,560 --> 00:11:24,240
the second way of

294
00:11:24,240 --> 00:11:26,240
credential theft was dumping the

295
00:11:26,240 --> 00:11:28,079
registry so they dumped the system and

296
00:11:28,079 --> 00:11:30,480
some security hives and using that they

297
00:11:30,480 --> 00:11:34,640
got more credentials on patient zero

298
00:11:35,760 --> 00:11:38,000
the next phase was the lateral movement

299
00:11:38,000 --> 00:11:40,160
using schedule tasks so this is the same

300
00:11:40,160 --> 00:11:41,680
schedule task with the batch file that

301
00:11:41,680 --> 00:11:43,279
we saw in the reconnaissance phase and

302
00:11:43,279 --> 00:11:44,959
now the content change

303
00:11:44,959 --> 00:11:48,000
for lateral movement

304
00:11:48,000 --> 00:11:49,839
their goal was to find a machine that

305
00:11:49,839 --> 00:11:51,839
has domain admin credentials and after

306
00:11:51,839 --> 00:11:53,040
they got it

307
00:11:53,040 --> 00:11:55,040
they started to move laterally between

308
00:11:55,040 --> 00:11:57,440
different regions different continents

309
00:11:57,440 --> 00:11:58,959
and different domains within the

310
00:11:58,959 --> 00:12:00,720
customer environments

311
00:12:00,720 --> 00:12:02,880
we can see the command that they use so

312
00:12:02,880 --> 00:12:04,720
they use scheduled tasks with the ip

313
00:12:04,720 --> 00:12:06,959
address and username and password that

314
00:12:06,959 --> 00:12:08,800
they install of the domain admin they

315
00:12:08,800 --> 00:12:11,120
run it only once on each machine

316
00:12:11,120 --> 00:12:13,920
they call it test to blend and to sim

317
00:12:13,920 --> 00:12:17,279
legitimate schedule tasks then they

318
00:12:17,279 --> 00:12:19,440
gave the path to the batch file and run

319
00:12:19,440 --> 00:12:22,480
it as a system user

320
00:12:23,120 --> 00:12:24,959
the last phase of the attack was data

321
00:12:24,959 --> 00:12:27,519
collection and exfiltration um we find

322
00:12:27,519 --> 00:12:30,240
that they use a renamed winrar an

323
00:12:30,240 --> 00:12:31,680
archive tool

324
00:12:31,680 --> 00:12:33,440
in this case it was a chinese winner

325
00:12:33,440 --> 00:12:35,920
that we can see here in from virustotal

326
00:12:35,920 --> 00:12:38,800
they enable it to run dll32 to evade the

327
00:12:38,800 --> 00:12:41,200
detection and here this is what's the

328
00:12:41,200 --> 00:12:43,360
our aha moment when we understand that

329
00:12:43,360 --> 00:12:45,360
they are staging the most sensitive data

330
00:12:45,360 --> 00:12:47,279
of the customer formulas

331
00:12:47,279 --> 00:12:52,480
blueprints manufacturing data and so on

332
00:12:52,480 --> 00:12:54,079
now i will learn into a fear that we'll

333
00:12:54,079 --> 00:12:55,680
talk about the malwa arsenal that we

334
00:12:55,680 --> 00:12:58,560
found in the operation

335
00:12:59,600 --> 00:13:01,680
thank you nim

336
00:13:01,680 --> 00:13:03,440
hi everyone

337
00:13:03,440 --> 00:13:06,480
glad to get this reception so i'm going

338
00:13:06,480 --> 00:13:09,360
to talk to you about the the the many

339
00:13:09,360 --> 00:13:11,519
different samples that we need to use in

340
00:13:11,519 --> 00:13:14,800
order to infect a single machine okay we

341
00:13:14,800 --> 00:13:18,160
will use this uh map this diagram in

342
00:13:18,160 --> 00:13:21,200
order to get over the full flow of uh

343
00:13:21,200 --> 00:13:22,639
wendy's in

344
00:13:22,639 --> 00:13:25,120
infection using this technique uh they

345
00:13:25,120 --> 00:13:27,920
were managed to infect many different

346
00:13:27,920 --> 00:13:30,480
machines in the different organizations

347
00:13:30,480 --> 00:13:33,920
that they were into uh when we go over

348
00:13:33,920 --> 00:13:35,600
the different stages we will also talk

349
00:13:35,600 --> 00:13:37,279
about the very cool techniques that

350
00:13:37,279 --> 00:13:39,920
they've used in order to be more evasive

351
00:13:39,920 --> 00:13:42,800
uh and be more stealthy let's go over

352
00:13:42,800 --> 00:13:44,560
like this diagram really really really

353
00:13:44,560 --> 00:13:47,199
quickly so you have all the first steps

354
00:13:47,199 --> 00:13:49,440
that nev talks about talked about during

355
00:13:49,440 --> 00:13:52,880
the kill chain explanation uh and as niv

356
00:13:52,880 --> 00:13:54,320
said it all started with a batch

357
00:13:54,320 --> 00:13:56,959
execution it has the ability to run some

358
00:13:56,959 --> 00:13:58,639
reconnaissance but

359
00:13:58,639 --> 00:14:00,320
we've seen that the first thing that's

360
00:14:00,320 --> 00:14:02,160
running in the infection chain is the

361
00:14:02,160 --> 00:14:04,079
spider loader which brought the first

362
00:14:04,079 --> 00:14:07,680
files to uh the machine then stashlog

363
00:14:07,680 --> 00:14:10,240
was used in order to stash a lot of

364
00:14:10,240 --> 00:14:13,120
encrypted payloads to the clfs log and

365
00:14:13,120 --> 00:14:16,079
we will discuss the clfs log in a bit

366
00:14:16,079 --> 00:14:18,320
then spark log was the first

367
00:14:18,320 --> 00:14:20,639
sample that really extracted information

368
00:14:20,639 --> 00:14:23,760
from the clfs log and deployed the

369
00:14:23,760 --> 00:14:26,079
persistent part private log

370
00:14:26,079 --> 00:14:28,320
to the infected machine private logged

371
00:14:28,320 --> 00:14:31,600
in deployed the user mode agent which is

372
00:14:31,600 --> 00:14:33,040
deploy log

373
00:14:33,040 --> 00:14:35,040
and then deploy log also

374
00:14:35,040 --> 00:14:38,800
deployed the kernel mode agent which is

375
00:14:38,800 --> 00:14:41,519
winkit now i know it's a lot let's take

376
00:14:41,519 --> 00:14:44,000
it step by step and we will start at the

377
00:14:44,000 --> 00:14:46,880
beginning with the spider loader

378
00:14:46,880 --> 00:14:49,600
so spider loader as i said before is the

379
00:14:49,600 --> 00:14:52,480
first binary that got executed on every

380
00:14:52,480 --> 00:14:55,519
machine it got executed by a bad scripts

381
00:14:55,519 --> 00:14:56,880
that were dropped

382
00:14:56,880 --> 00:14:59,199
using that was executed using the

383
00:14:59,199 --> 00:15:00,959
schedule task and we've seen it

384
00:15:00,959 --> 00:15:03,519
delivered in two different flavors uh

385
00:15:03,519 --> 00:15:05,680
the first one was an exe file the second

386
00:15:05,680 --> 00:15:08,880
one was a dll file in both cases what

387
00:15:08,880 --> 00:15:11,360
they wanted to do is masquerade as an

388
00:15:11,360 --> 00:15:13,680
sqlite three component in the case of

389
00:15:13,680 --> 00:15:15,360
dxfi it was very simple very

390
00:15:15,360 --> 00:15:18,639
straightforward just sqli3 dot xe

391
00:15:18,639 --> 00:15:20,880
nothing really special but in the case

392
00:15:20,880 --> 00:15:23,040
of the dll they did something very uh

393
00:15:23,040 --> 00:15:26,639
interesting they just kept the dll added

394
00:15:26,639 --> 00:15:29,920
it as it is but change the function in

395
00:15:29,920 --> 00:15:32,800
the ordinal number of 138 to carry on

396
00:15:32,800 --> 00:15:35,440
their malicious operations uh what it

397
00:15:35,440 --> 00:15:39,360
did is loaded uh a file

398
00:15:39,360 --> 00:15:42,000
a file that was given in an argument as

399
00:15:42,000 --> 00:15:44,639
you can see here if you can see it uh a

400
00:15:44,639 --> 00:15:47,440
tlb file which of course is not a normal

401
00:15:47,440 --> 00:15:50,320
tlb file but an encrypted file uh

402
00:15:50,320 --> 00:15:53,440
decrypted it and dropped the next files

403
00:15:53,440 --> 00:15:57,199
that it needed uh to the attack we also

404
00:15:57,199 --> 00:16:00,160
seen that it had some rat capabilities

405
00:16:00,160 --> 00:16:01,759
we based it on older spider

406
00:16:01,759 --> 00:16:03,680
investigations and across different

407
00:16:03,680 --> 00:16:05,440
machines we found it in different

408
00:16:05,440 --> 00:16:07,360
locations and with different names

409
00:16:07,360 --> 00:16:10,480
because you want to be diverse

410
00:16:10,480 --> 00:16:12,000
so

411
00:16:12,000 --> 00:16:15,040
while we were investigating uh this part

412
00:16:15,040 --> 00:16:17,360
we found a very cool uh

413
00:16:17,360 --> 00:16:19,120
anti-hooking technique so first of all

414
00:16:19,120 --> 00:16:22,399
let's talk about a hook what is it a

415
00:16:22,399 --> 00:16:24,560
hook basically is an augmentation of

416
00:16:24,560 --> 00:16:27,680
behavior of any software component by

417
00:16:27,680 --> 00:16:31,040
intercepting a function an event or

418
00:16:31,040 --> 00:16:33,040
something like that and augmenting its

419
00:16:33,040 --> 00:16:36,079
behavior in some way well it's a nice

420
00:16:36,079 --> 00:16:37,839
explanation but let's like see it

421
00:16:37,839 --> 00:16:40,000
graphically and i did it with animations

422
00:16:40,000 --> 00:16:42,720
so it's way better uh so let's say that

423
00:16:42,720 --> 00:16:46,800
you want to hook the ldr load dll

424
00:16:46,800 --> 00:16:49,360
function for example all right so we

425
00:16:49,360 --> 00:16:51,680
have like the first assembly lines you

426
00:16:51,680 --> 00:16:53,680
know like setting the stack for further

427
00:16:53,680 --> 00:16:55,839
execution everything is fine if we want

428
00:16:55,839 --> 00:16:58,160
to hook it and i'll give like an inline

429
00:16:58,160 --> 00:17:01,040
hooking example what i can do is just

430
00:17:01,040 --> 00:17:04,079
patch the a targeted function to jump to

431
00:17:04,079 --> 00:17:06,400
a proxy function

432
00:17:06,400 --> 00:17:08,160
and this proxy function will carry on

433
00:17:08,160 --> 00:17:10,480
the different activities that i want it

434
00:17:10,480 --> 00:17:12,959
to do in most cases

435
00:17:12,959 --> 00:17:15,439
almost every cases in if we're talking

436
00:17:15,439 --> 00:17:16,319
about

437
00:17:16,319 --> 00:17:19,679
security uh systems uh the proxy

438
00:17:19,679 --> 00:17:22,079
function will jump back to the targeted

439
00:17:22,079 --> 00:17:24,240
functions and also carry on the first

440
00:17:24,240 --> 00:17:26,400
instructions that were supposed to carry

441
00:17:26,400 --> 00:17:29,120
on in the overwritten uh

442
00:17:29,120 --> 00:17:31,280
the function itself

443
00:17:31,280 --> 00:17:34,320
we we know that a lot of edr solutions a

444
00:17:34,320 --> 00:17:36,480
lot of security solutions use this kind

445
00:17:36,480 --> 00:17:39,280
of mechanism in order to monitor api

446
00:17:39,280 --> 00:17:42,080
tools uh api calls so you can see where

447
00:17:42,080 --> 00:17:44,559
i'm going with it uh when they wanted to

448
00:17:44,559 --> 00:17:47,200
get over those mechanisms so they

449
00:17:47,200 --> 00:17:50,960
targeted those function that are usually

450
00:17:50,960 --> 00:17:52,480
targeted by

451
00:17:52,480 --> 00:17:55,039
edr solutions and they wanted to unhook

452
00:17:55,039 --> 00:17:57,679
him and hook them so how did they manage

453
00:17:57,679 --> 00:17:59,520
to do it

454
00:17:59,520 --> 00:18:02,400
this is our ntdl that is loaded to

455
00:18:02,400 --> 00:18:05,679
memory uh what they have done is they

456
00:18:05,679 --> 00:18:07,240
copied

457
00:18:07,240 --> 00:18:10,720
ntdl.dll from disk to a different file a

458
00:18:10,720 --> 00:18:13,280
different file name that called like tn

459
00:18:13,280 --> 00:18:16,320
a bunch of random characters dot dll and

460
00:18:16,320 --> 00:18:18,400
load it to memory

461
00:18:18,400 --> 00:18:21,919
then it just compared uh the first bytes

462
00:18:21,919 --> 00:18:25,120
of the already loaded ntdl to the one

463
00:18:25,120 --> 00:18:27,919
that was copied from disk in case of a

464
00:18:27,919 --> 00:18:30,160
mismatch what they do what they did is

465
00:18:30,160 --> 00:18:33,760
just overwrite the ntdl one that was

466
00:18:33,760 --> 00:18:37,440
already loaded and by this way just went

467
00:18:37,440 --> 00:18:40,160
over the installed hook in case that it

468
00:18:40,160 --> 00:18:42,480
was there

469
00:18:42,480 --> 00:18:44,240
so now that we talk about the spider

470
00:18:44,240 --> 00:18:46,720
loader we brought the tools everything

471
00:18:46,720 --> 00:18:48,799
is in there let's go on to the next

472
00:18:48,799 --> 00:18:50,880
stage which we dubbed as the

473
00:18:50,880 --> 00:18:55,120
multi-phased arsenal deployment

474
00:18:55,120 --> 00:18:58,400
so this deployment stage heavily relies

475
00:18:58,400 --> 00:19:00,880
on the windows clfs mechanism in order

476
00:19:00,880 --> 00:19:04,080
to store and extract different uh

477
00:19:04,080 --> 00:19:06,480
samples and different payloads in order

478
00:19:06,480 --> 00:19:10,000
to stay stealthy and what's not and

479
00:19:10,000 --> 00:19:12,240
we'll discuss like the other uh goals

480
00:19:12,240 --> 00:19:15,520
later so first of all

481
00:19:15,520 --> 00:19:17,919
what is the clfs

482
00:19:17,919 --> 00:19:20,960
so the windows clfs is a windows logging

483
00:19:20,960 --> 00:19:22,880
mechanism that provides high performance

484
00:19:22,880 --> 00:19:26,720
logging for various different goals uh

485
00:19:26,720 --> 00:19:29,200
it heavily used in the windows kernel

486
00:19:29,200 --> 00:19:31,919
transaction manager both for

487
00:19:31,919 --> 00:19:34,320
transactional registry operations and

488
00:19:34,320 --> 00:19:37,760
transactional file systems both both

489
00:19:37,760 --> 00:19:39,679
transactional subsystems allow the

490
00:19:39,679 --> 00:19:42,640
ability to log different changes uh

491
00:19:42,640 --> 00:19:45,200
commit them and even roll back in case

492
00:19:45,200 --> 00:19:49,120
of an error or any reason that will be

493
00:19:49,120 --> 00:19:51,039
in order to use it

494
00:19:51,039 --> 00:19:53,280
windows employs a proprietary file

495
00:19:53,280 --> 00:19:55,679
format that calls blf

496
00:19:55,679 --> 00:19:58,240
that is not really documented and we

497
00:19:58,240 --> 00:20:00,480
haven't found any

498
00:20:00,480 --> 00:20:03,520
ready every any usable parsers online in

499
00:20:03,520 --> 00:20:06,799
order to decrypt this blf files and it

500
00:20:06,799 --> 00:20:09,919
can only be accessed by the clfs api

501
00:20:09,919 --> 00:20:13,120
function calls now on this the clfs log

502
00:20:13,120 --> 00:20:15,440
is consist of two file types the first

503
00:20:15,440 --> 00:20:18,480
one is the blf itself which is the log

504
00:20:18,480 --> 00:20:22,080
metadata and one or more container files

505
00:20:22,080 --> 00:20:24,720
which contains the different log data if

506
00:20:24,720 --> 00:20:26,640
we look at this example you have like

507
00:20:26,640 --> 00:20:30,320
the a blf file of the end user.hive

508
00:20:30,320 --> 00:20:32,720
which attends as i said the metadata and

509
00:20:32,720 --> 00:20:34,559
we have two container files which

510
00:20:34,559 --> 00:20:38,080
contains the information itself so now

511
00:20:38,080 --> 00:20:41,280
that we know what the clfs is on a high

512
00:20:41,280 --> 00:20:42,960
level let's talk about the first

513
00:20:42,960 --> 00:20:45,520
component that really uses it which is

514
00:20:45,520 --> 00:20:46,799
stash log

515
00:20:46,799 --> 00:20:51,120
stash log basically just stashing

516
00:20:51,120 --> 00:20:54,000
old stashing different payloads to a

517
00:20:54,000 --> 00:20:55,520
clfs log

518
00:20:55,520 --> 00:20:57,919
and in this way just prepares the victim

519
00:20:57,919 --> 00:21:00,840
for the next phases of the

520
00:21:00,840 --> 00:21:04,159
infection stashlog has two different

521
00:21:04,159 --> 00:21:06,960
modes of execution the first one without

522
00:21:06,960 --> 00:21:09,039
any different arguments

523
00:21:09,039 --> 00:21:11,280
it just create an atom from a random

524
00:21:11,280 --> 00:21:14,320
generated guid and store it into the

525
00:21:14,320 --> 00:21:17,440
global atom table the global item table

526
00:21:17,440 --> 00:21:19,440
is a table in windows that allows the

527
00:21:19,440 --> 00:21:22,080
ability to share different strings using

528
00:21:22,080 --> 00:21:24,880
different uh int identifier between

529
00:21:24,880 --> 00:21:27,280
different processes and

530
00:21:27,280 --> 00:21:29,039
even the same processes but on different

531
00:21:29,039 --> 00:21:30,640
times

532
00:21:30,640 --> 00:21:33,039
this was like without any argument

533
00:21:33,039 --> 00:21:35,360
with one argument it's used to really

534
00:21:35,360 --> 00:21:38,880
stores all the encrypted payloads uh but

535
00:21:38,880 --> 00:21:42,240
in order to do it uh it depends on the

536
00:21:42,240 --> 00:21:45,840
stored atom from before

537
00:21:45,919 --> 00:21:49,600
so how is it able to do it first of all

538
00:21:49,600 --> 00:21:52,159
the argument given to stashlog is an

539
00:21:52,159 --> 00:21:54,000
encrypted buffer

540
00:21:54,000 --> 00:21:56,640
that first of all gets decrypted using

541
00:21:56,640 --> 00:21:59,200
the guid from the atom

542
00:21:59,200 --> 00:22:01,919
then it after decrypting it it checks

543
00:22:01,919 --> 00:22:03,600
like the file validity because you need

544
00:22:03,600 --> 00:22:05,600
to know that you're doing something in a

545
00:22:05,600 --> 00:22:07,280
good way or not

546
00:22:07,280 --> 00:22:09,840
then it looks for the destination blf

547
00:22:09,840 --> 00:22:12,159
file in order to store everything which

548
00:22:12,159 --> 00:22:16,400
is the uh default user into user dot

549
00:22:16,400 --> 00:22:19,440
hive blf file you know if it's not

550
00:22:19,440 --> 00:22:21,600
created for some reason it creates it

551
00:22:21,600 --> 00:22:24,480
but in both ways it clears it

552
00:22:24,480 --> 00:22:26,799
then it encrypt the malicious data it

553
00:22:26,799 --> 00:22:28,720
decrypted from before but this time

554
00:22:28,720 --> 00:22:30,880
using different machine characteristics

555
00:22:30,880 --> 00:22:34,080
and storing everything to the blf

556
00:22:34,080 --> 00:22:37,200
container file itself

557
00:22:37,200 --> 00:22:39,840
now when we first started uh

558
00:22:39,840 --> 00:22:42,000
investigating uh

559
00:22:42,000 --> 00:22:44,799
investigating stashlog this was what

560
00:22:44,799 --> 00:22:47,840
greeted us on ida pro and as you can

561
00:22:47,840 --> 00:22:51,520
imagine like this was our reaction uh

562
00:22:51,520 --> 00:22:53,760
yeah what can you do so

563
00:22:53,760 --> 00:22:56,159
how did they manage to do it

564
00:22:56,159 --> 00:22:58,159
well it was a very cool trick that

565
00:22:58,159 --> 00:23:00,080
basically what they've done is tricking

566
00:23:00,080 --> 00:23:02,799
these assemblers into uh parsing if

567
00:23:02,799 --> 00:23:05,679
statements as switch case statements

568
00:23:05,679 --> 00:23:08,799
with a lot of different potential cases

569
00:23:08,799 --> 00:23:11,600
if we look at this example this is a

570
00:23:11,600 --> 00:23:15,200
very normal uh if statement on assembly

571
00:23:15,200 --> 00:23:16,880
you have like your check and then you

572
00:23:16,880 --> 00:23:19,360
have a jump with two different objects

573
00:23:19,360 --> 00:23:20,960
straightforward everything is working

574
00:23:20,960 --> 00:23:24,480
right well cool uh wendy wanted to be

575
00:23:24,480 --> 00:23:27,520
like smarter than this and what they did

576
00:23:27,520 --> 00:23:30,880
is uh return the check uh

577
00:23:30,880 --> 00:23:34,159
the check result to a different jump

578
00:23:34,159 --> 00:23:36,880
list which contained different nodes in

579
00:23:36,880 --> 00:23:39,919
the function this way

580
00:23:39,919 --> 00:23:42,480
any any disassembler that we try to work

581
00:23:42,480 --> 00:23:46,640
with just parse it as a switch case

582
00:23:46,640 --> 00:23:49,520
a switch case check with a lot of

583
00:23:49,520 --> 00:23:52,159
different options in this

584
00:23:52,159 --> 00:23:54,000
example in particular

585
00:23:54,000 --> 00:23:55,159
we had

586
00:23:55,159 --> 00:24:00,000
332 different objects yikes

587
00:24:00,000 --> 00:24:02,000
so we talked about stash log we talked

588
00:24:02,000 --> 00:24:04,960
about how everything was stored in there

589
00:24:04,960 --> 00:24:07,360
let's talk about the first extractor

590
00:24:07,360 --> 00:24:08,159
from

591
00:24:08,159 --> 00:24:11,200
the clfs log which is spark log spark

592
00:24:11,200 --> 00:24:13,200
log very very very simple and

593
00:24:13,200 --> 00:24:15,200
straightforward what it does is

594
00:24:15,200 --> 00:24:18,799
extracting a payload from the clfs log

595
00:24:18,799 --> 00:24:21,200
and set it up to be

596
00:24:21,200 --> 00:24:25,279
launched by a legitimate windows service

597
00:24:25,279 --> 00:24:28,480
this dll is private log and we will talk

598
00:24:28,480 --> 00:24:31,440
about private log in a bit

599
00:24:31,440 --> 00:24:33,600
and it's go it's it's set it up to be

600
00:24:33,600 --> 00:24:38,000
loaded by either the ikea xt service in

601
00:24:38,000 --> 00:24:40,880
windows vista to windows 7. the ikea

602
00:24:40,880 --> 00:24:42,080
services the

603
00:24:42,080 --> 00:24:44,400
service that in charge of the internet

604
00:24:44,400 --> 00:24:46,799
key exchange and the authentication

605
00:24:46,799 --> 00:24:50,080
ip protocol in windows and in windows 8

606
00:24:50,080 --> 00:24:52,799
going forward it was siloed to the print

607
00:24:52,799 --> 00:24:55,039
notify service

608
00:24:55,039 --> 00:24:57,440
which is in charge of all the

609
00:24:57,440 --> 00:24:59,279
interactive

610
00:24:59,279 --> 00:25:02,640
printing operations in windows

611
00:25:02,640 --> 00:25:03,440
so

612
00:25:03,440 --> 00:25:05,679
now that we talked about it all i will

613
00:25:05,679 --> 00:25:08,240
give my mic to hen

614
00:25:08,240 --> 00:25:11,039
thank you fair

615
00:25:12,240 --> 00:25:13,679
okay so

616
00:25:13,679 --> 00:25:15,760
let's do a quick recap so what we see on

617
00:25:15,760 --> 00:25:17,520
the left is the kill chain

618
00:25:17,520 --> 00:25:20,240
uh the batch file that is being executed

619
00:25:20,240 --> 00:25:24,240
uh can be used for reconnaissance uh but

620
00:25:24,240 --> 00:25:26,400
on infected machines it's being used

621
00:25:26,400 --> 00:25:28,480
mostly not mostly but all the time for

622
00:25:28,480 --> 00:25:30,080
this infection change so it starts with

623
00:25:30,080 --> 00:25:33,039
a spider loader some kind of a rat

624
00:25:33,039 --> 00:25:35,840
then a stash log is being executed to

625
00:25:35,840 --> 00:25:38,000
stash all the encrypted payloads within

626
00:25:38,000 --> 00:25:40,080
the cfs log file

627
00:25:40,080 --> 00:25:42,960
then spark log kicks in it's backlog

628
00:25:42,960 --> 00:25:45,200
extract private log and then we get into

629
00:25:45,200 --> 00:25:46,799
private log

630
00:25:46,799 --> 00:25:48,799
so what is this private log

631
00:25:48,799 --> 00:25:50,320
so private log is the persistence and

632
00:25:50,320 --> 00:25:52,159
privilege escalation component in the

633
00:25:52,159 --> 00:25:53,600
infection chain

634
00:25:53,600 --> 00:25:55,760
it deploys and then executes deploy log

635
00:25:55,760 --> 00:25:58,159
the next link

636
00:25:58,159 --> 00:26:00,720
so the first phase is drop in deploy log

637
00:26:00,720 --> 00:26:02,559
so it extracting the crypt's deploy lock

638
00:26:02,559 --> 00:26:04,720
from the clfs log file and copies a

639
00:26:04,720 --> 00:26:06,520
legitimate

640
00:26:06,520 --> 00:26:10,000
dbgo.dll from system32 to its newest

641
00:26:10,000 --> 00:26:12,000
location under the windows powershell

642
00:26:12,000 --> 00:26:13,360
directory

643
00:26:13,360 --> 00:26:15,840
then it uses a pretty unique dll loading

644
00:26:15,840 --> 00:26:19,760
technique to load and execute deploy log

645
00:26:19,760 --> 00:26:22,559
so before we go over the technique let's

646
00:26:22,559 --> 00:26:25,120
remind ourselves a bit about

647
00:26:25,120 --> 00:26:27,120
ndfs transactions

648
00:26:27,120 --> 00:26:30,240
so ntfs transactions are based on clfs

649
00:26:30,240 --> 00:26:33,279
and they enable basically to record a

650
00:26:33,279 --> 00:26:36,559
set of actions on the ntfs file system

651
00:26:36,559 --> 00:26:38,880
such as edit remove or create files or

652
00:26:38,880 --> 00:26:41,679
directories and then commit them at once

653
00:26:41,679 --> 00:26:43,520
or roll them back at once

654
00:26:43,520 --> 00:26:46,000
the attacker is used in deploy log

655
00:26:46,000 --> 00:26:49,200
the the transactional api calls

656
00:26:49,200 --> 00:26:51,120
transaction api calls

657
00:26:51,120 --> 00:26:54,159
to move on and to deploy deploy log and

658
00:26:54,159 --> 00:26:56,159
again stealthiness

659
00:26:56,159 --> 00:26:58,159
so it first starts using the create

660
00:26:58,159 --> 00:27:00,799
transaction and create file transacted a

661
00:27:00,799 --> 00:27:02,799
api calls which create a transaction

662
00:27:02,799 --> 00:27:05,679
handle to the new dbgo

663
00:27:05,679 --> 00:27:07,480
then they over at the transacted

664
00:27:07,480 --> 00:27:10,400
dbgap.dll with a decrypted payload then

665
00:27:10,400 --> 00:27:13,039
they create a memory section and load

666
00:27:13,039 --> 00:27:15,200
the transacted file to this section in

667
00:27:15,200 --> 00:27:17,200
memory

668
00:27:17,200 --> 00:27:20,480
and the next step is fixing the section

669
00:27:20,480 --> 00:27:22,080
permissions and resolving the dll

670
00:27:22,080 --> 00:27:25,120
imports and then executing deploy logs

671
00:27:25,120 --> 00:27:26,320
entry point

672
00:27:26,320 --> 00:27:28,640
this loading scheme is pretty similar to

673
00:27:28,640 --> 00:27:31,039
the phantom dll hollowing but it's a bit

674
00:27:31,039 --> 00:27:33,440
different

675
00:27:33,440 --> 00:27:36,240
so after a deploy log has been executed

676
00:27:36,240 --> 00:27:38,480
let's move on and discuss deploy log so

677
00:27:38,480 --> 00:27:41,600
deploy log was discovered as dbgap.dll

678
00:27:41,600 --> 00:27:44,240
and it has two purposes the first one

679
00:27:44,240 --> 00:27:46,399
uh is the rootkey deployment it deploys

680
00:27:46,399 --> 00:27:48,720
the rootkit and communicates with it

681
00:27:48,720 --> 00:27:52,080
the second hat is the user mode agent so

682
00:27:52,080 --> 00:27:54,159
it acts as a user mode agent it

683
00:27:54,159 --> 00:27:56,559
communicates with the remote c2 and

684
00:27:56,559 --> 00:28:00,320
contains holds some red capabilities

685
00:28:00,320 --> 00:28:01,919
before we dive into rootkit

686
00:28:01,919 --> 00:28:04,480
communication let's discuss a bit uh

687
00:28:04,480 --> 00:28:06,799
background on rootkit communication

688
00:28:06,799 --> 00:28:09,120
so basically there are a few ways to

689
00:28:09,120 --> 00:28:11,200
communicate from user mode to kernel

690
00:28:11,200 --> 00:28:14,399
level uh from a

691
00:28:14,399 --> 00:28:16,559
among the ways is using device object

692
00:28:16,559 --> 00:28:19,919
and ioctls in windows uh you can use the

693
00:28:19,919 --> 00:28:22,320
device i o control ipi code as an

694
00:28:22,320 --> 00:28:24,799
interface for ioctl

695
00:28:24,799 --> 00:28:27,360
which is an input and output control

696
00:28:27,360 --> 00:28:29,679
to basically send control codes to the

697
00:28:29,679 --> 00:28:33,360
kernel level the kernel level um

698
00:28:33,360 --> 00:28:35,919
gets these control codes acts upon this

699
00:28:35,919 --> 00:28:40,159
control code and returns data if needed

700
00:28:40,159 --> 00:28:42,080
so the plot log initiated communication

701
00:28:42,080 --> 00:28:44,960
channel by acquiring a handle to the bib

702
00:28:44,960 --> 00:28:47,360
device if it failed it acquired a handle

703
00:28:47,360 --> 00:28:48,799
to the null device

704
00:28:48,799 --> 00:28:51,279
both of these devices are

705
00:28:51,279 --> 00:28:53,120
used a lot of times

706
00:28:53,120 --> 00:28:56,000
in operations that involve rootkits

707
00:28:56,000 --> 00:28:58,799
mainly the null device then it sends an

708
00:28:58,799 --> 00:29:01,360
ioctl request to test if the rootkit was

709
00:29:01,360 --> 00:29:04,320
already deployed if it wasn't deployed

710
00:29:04,320 --> 00:29:06,000
then it starts deploying it so it

711
00:29:06,000 --> 00:29:07,120
extracts

712
00:29:07,120 --> 00:29:09,200
the decrypted wing kit

713
00:29:09,200 --> 00:29:11,360
which is the rootkit from the cfs log

714
00:29:11,360 --> 00:29:12,399
file

715
00:29:12,399 --> 00:29:15,120
it stops the amd k8 service which is the

716
00:29:15,120 --> 00:29:16,399
amd

717
00:29:16,399 --> 00:29:19,279
processor a qna driver service this is

718
00:29:19,279 --> 00:29:21,919
pretty interesting because um

719
00:29:21,919 --> 00:29:23,520
aiming for this service might tell

720
00:29:23,520 --> 00:29:25,120
something about the attackers and about

721
00:29:25,120 --> 00:29:27,279
the victims it might tell that basically

722
00:29:27,279 --> 00:29:29,679
they had some prior intelligence on the

723
00:29:29,679 --> 00:29:32,399
victims on the processors and

724
00:29:32,399 --> 00:29:34,320
based on this intelligence they decided

725
00:29:34,320 --> 00:29:36,559
what to aim for so they

726
00:29:36,559 --> 00:29:39,440
aimed for this mdk8

727
00:29:39,440 --> 00:29:40,559
service

728
00:29:40,559 --> 00:29:43,360
they changed the mdk8 service execution

729
00:29:43,360 --> 00:29:46,399
path to the following path and wrote a

730
00:29:46,399 --> 00:29:49,600
winkit driver to this path exactly then

731
00:29:49,600 --> 00:29:52,799
they started the service which

732
00:29:52,799 --> 00:29:55,440
executed the driver and restore the

733
00:29:55,440 --> 00:29:57,600
service to its default state to enable

734
00:29:57,600 --> 00:30:00,399
successful reboot

735
00:30:00,399 --> 00:30:02,799
the second hat of deploy log is the user

736
00:30:02,799 --> 00:30:04,000
mode agent

737
00:30:04,000 --> 00:30:05,120
so

738
00:30:05,120 --> 00:30:06,880
as a user mode agent it communicates

739
00:30:06,880 --> 00:30:09,600
with the c2 and the receive data from

740
00:30:09,600 --> 00:30:11,679
the c2 is intercepted by the driver

741
00:30:11,679 --> 00:30:14,000
we'll discuss it later and it holds some

742
00:30:14,000 --> 00:30:16,320
red capabilities so it

743
00:30:16,320 --> 00:30:19,600
it can execute some cmd commands and

744
00:30:19,600 --> 00:30:21,760
download and execute a payload such as

745
00:30:21,760 --> 00:30:23,600
the mfs.dll

746
00:30:23,600 --> 00:30:25,840
credential grabber that nif talked about

747
00:30:25,840 --> 00:30:28,000
before

748
00:30:28,000 --> 00:30:31,120
and this gets us to our last step

749
00:30:31,120 --> 00:30:33,120
the cream of the crap

750
00:30:33,120 --> 00:30:34,240
the king

751
00:30:34,240 --> 00:30:38,799
win kit so winky is there a is wendy's

752
00:30:38,799 --> 00:30:40,640
rootkit in this operation it was

753
00:30:40,640 --> 00:30:43,919
discovered as bqdsp.sys

754
00:30:43,919 --> 00:30:45,520
and it's the kernel level component of

755
00:30:45,520 --> 00:30:48,720
the agent receives commands from deploy

756
00:30:48,720 --> 00:30:51,440
log and from the c2 and hooks this pip

757
00:30:51,440 --> 00:30:52,720
communication

758
00:30:52,720 --> 00:30:54,240
by directly talking with the network

759
00:30:54,240 --> 00:30:55,919
card

760
00:30:55,919 --> 00:30:56,880
so

761
00:30:56,880 --> 00:30:59,120
and an interesting thing about winkit is

762
00:30:59,120 --> 00:31:01,600
that the compilation timestamp

763
00:31:01,600 --> 00:31:03,440
is from 2019

764
00:31:03,440 --> 00:31:04,399
but

765
00:31:04,399 --> 00:31:06,640
until we publish the blog post which was

766
00:31:06,640 --> 00:31:09,840
in 2022 it had almost a zero detection

767
00:31:09,840 --> 00:31:11,440
rate zero percent detection rate on

768
00:31:11,440 --> 00:31:15,039
virus total only one vendor alerted

769
00:31:15,039 --> 00:31:16,960
the win kit as malicious while others

770
00:31:16,960 --> 00:31:19,440
said it's it's an okay it's a it's a

771
00:31:19,440 --> 00:31:21,279
good file

772
00:31:21,279 --> 00:31:24,320
so it has also an interesting signature

773
00:31:24,320 --> 00:31:26,720
so it contains an expired bank u

774
00:31:26,720 --> 00:31:29,200
digital signature which was stolen

775
00:31:29,200 --> 00:31:31,919
it was expired in 2015 bank you

776
00:31:31,919 --> 00:31:34,880
generally is a taiwanese a

777
00:31:34,880 --> 00:31:36,799
manufacturer of electro electronic

778
00:31:36,799 --> 00:31:39,120
devices many many displays

779
00:31:39,120 --> 00:31:41,120
and it leveraged this digital signature

780
00:31:41,120 --> 00:31:43,039
which you can see a bit information

781
00:31:43,039 --> 00:31:45,200
about how they try to disguise

782
00:31:45,200 --> 00:31:46,880
to bypass the driver's signature

783
00:31:46,880 --> 00:31:48,960
enforcement mechanism which

784
00:31:48,960 --> 00:31:51,440
has a windows a contains which is

785
00:31:51,440 --> 00:31:53,600
basically enforces

786
00:31:53,600 --> 00:31:56,240
call dsc basically enforces only a

787
00:31:56,240 --> 00:31:58,399
verified

788
00:31:58,399 --> 00:32:00,480
signa digitally signature

789
00:32:00,480 --> 00:32:02,080
drivers to load

790
00:32:02,080 --> 00:32:04,480
in windows and kicked in

791
00:32:04,480 --> 00:32:07,360
starting from windows vista

792
00:32:07,360 --> 00:32:09,360
so we talked about study characteristics

793
00:32:09,360 --> 00:32:11,919
let's talk about execution a bit so it

794
00:32:11,919 --> 00:32:13,600
looks after successfully loading it

795
00:32:13,600 --> 00:32:15,600
hooks the network communication

796
00:32:15,600 --> 00:32:19,039
to do so uh it uses the nd the windows

797
00:32:19,039 --> 00:32:20,640
and this api

798
00:32:20,640 --> 00:32:22,000
to communicate directly with the

799
00:32:22,000 --> 00:32:24,320
networker it it enables

800
00:32:24,320 --> 00:32:26,240
the threat actor to hide

801
00:32:26,240 --> 00:32:28,480
their network communications so during

802
00:32:28,480 --> 00:32:31,039
investigation if winkit executes

803
00:32:31,039 --> 00:32:33,039
if you write netstat for example you

804
00:32:33,039 --> 00:32:34,480
wouldn't see the communication it will

805
00:32:34,480 --> 00:32:36,960
be hidden

806
00:32:36,960 --> 00:32:39,679
and it it can uh receives the following

807
00:32:39,679 --> 00:32:42,799
commands from deploy log so the commands

808
00:32:42,799 --> 00:32:44,880
are the first command that can be

809
00:32:44,880 --> 00:32:46,240
triggered is to hide the driver in

810
00:32:46,240 --> 00:32:48,720
memory uh when this command is triggered

811
00:32:48,720 --> 00:32:50,720
then winky deletes its headers from

812
00:32:50,720 --> 00:32:53,360
memory and removes the driver from the

813
00:32:53,360 --> 00:32:55,600
driver's linked list

814
00:32:55,600 --> 00:32:57,200
the second ability is to communicate

815
00:32:57,200 --> 00:32:59,360
with the c2 directly

816
00:32:59,360 --> 00:33:00,880
without going through the process of

817
00:33:00,880 --> 00:33:02,880
user mode knl

818
00:33:02,880 --> 00:33:05,039
it has also the ability to return the

819
00:33:05,039 --> 00:33:07,360
rootkits version to deploy log or any

820
00:33:07,360 --> 00:33:09,600
other user mode agent that winkit will

821
00:33:09,600 --> 00:33:10,720
deploy

822
00:33:10,720 --> 00:33:13,440
and also to clean up

823
00:33:13,440 --> 00:33:15,919
so let's wrap up everything

824
00:33:15,919 --> 00:33:18,480
it starts with a batch execution spider

825
00:33:18,480 --> 00:33:20,559
loader goes next

826
00:33:20,559 --> 00:33:23,840
stash log right afterwards stashes all

827
00:33:23,840 --> 00:33:26,480
encrypted payload to the clfs log in a

828
00:33:26,480 --> 00:33:28,480
very stealthy way

829
00:33:28,480 --> 00:33:29,679
spark log

830
00:33:29,679 --> 00:33:32,000
executes it extracts private lock to

831
00:33:32,000 --> 00:33:33,679
gain persistence in privileges

832
00:33:33,679 --> 00:33:36,960
escalation private log extracts deploy

833
00:33:36,960 --> 00:33:40,559
log um in a very cool way

834
00:33:40,559 --> 00:33:43,360
deploy log has two hats the first set is

835
00:33:43,360 --> 00:33:45,600
deploying wind kit and the second ad is

836
00:33:45,600 --> 00:33:47,840
acting as the user mode agent and with

837
00:33:47,840 --> 00:33:50,240
winkit being winkit

838
00:33:50,240 --> 00:33:52,080
working as a root kit in the kernel

839
00:33:52,080 --> 00:33:54,240
level

840
00:33:54,240 --> 00:33:56,320
so some detection ideas because we are

841
00:33:56,320 --> 00:33:58,000
here for the blue teams

842
00:33:58,000 --> 00:33:59,519
so first of all you can use the io

843
00:33:59,519 --> 00:34:01,360
season the common lines the from this

844
00:34:01,360 --> 00:34:03,679
presentation from the blog post

845
00:34:03,679 --> 00:34:05,760
you can use some vr rules

846
00:34:05,760 --> 00:34:07,760
some of them are publicly available to

847
00:34:07,760 --> 00:34:09,040
hunt for this operation or you can

848
00:34:09,040 --> 00:34:10,719
create them by yourself

849
00:34:10,719 --> 00:34:12,719
you can hunt for cmds executed from the

850
00:34:12,719 --> 00:34:14,800
jlounch.exe

851
00:34:14,800 --> 00:34:17,119
which is the executable that was used in

852
00:34:17,119 --> 00:34:20,960
the erp solution and also from svcos

853
00:34:20,960 --> 00:34:22,399
you can look for

854
00:34:22,399 --> 00:34:25,359
api calls from unusual processes to the

855
00:34:25,359 --> 00:34:29,199
blf file and its container files

856
00:34:29,199 --> 00:34:30,960
and lastly we can use our old friend

857
00:34:30,960 --> 00:34:32,320
volatility

858
00:34:32,320 --> 00:34:34,320
using the unloaded modules command you

859
00:34:34,320 --> 00:34:36,719
can see if the driver was unloaded in

860
00:34:36,719 --> 00:34:39,280
the past uh using this name uh

861
00:34:39,280 --> 00:34:43,359
disguising as a benq related driver

862
00:34:43,359 --> 00:34:46,239
so the key cater key taker was to wrap

863
00:34:46,239 --> 00:34:47,040
up

864
00:34:47,040 --> 00:34:49,280
the operation so first of all we managed

865
00:34:49,280 --> 00:34:53,359
to discover a worldwide truly global and

866
00:34:53,359 --> 00:34:56,079
impactful um

867
00:34:56,079 --> 00:34:59,440
apt-ip theft in alignment with china's

868
00:34:59,440 --> 00:35:03,280
notorious made in china 2025 plan

869
00:35:03,280 --> 00:35:05,359
and this operation emphasizes the

870
00:35:05,359 --> 00:35:07,839
importance of network hygiene so

871
00:35:07,839 --> 00:35:09,760
the affected

872
00:35:09,760 --> 00:35:12,880
effective victims haven't had any good

873
00:35:12,880 --> 00:35:15,359
network hygiene so that's what managed

874
00:35:15,359 --> 00:35:17,200
them to literally move to dump

875
00:35:17,200 --> 00:35:19,680
credentials to move between continents

876
00:35:19,680 --> 00:35:21,280
so they had and patch systems

877
00:35:21,280 --> 00:35:23,359
insufficient network segmentation no

878
00:35:23,359 --> 00:35:26,400
multi-factor authentication and so on

879
00:35:26,400 --> 00:35:28,079
we managed to get

880
00:35:28,079 --> 00:35:30,000
also a really a rare glimpse into

881
00:35:30,000 --> 00:35:32,320
winter's hacking playbook to understand

882
00:35:32,320 --> 00:35:34,160
how they infiltrate how they act how

883
00:35:34,160 --> 00:35:36,400
they move what they think and how how

884
00:35:36,400 --> 00:35:37,680
they react

885
00:35:37,680 --> 00:35:39,440
and we managed to get a deep dive into

886
00:35:39,440 --> 00:35:42,160
winter's arsenal so we discovered new

887
00:35:42,160 --> 00:35:45,760
malware and new versions of non-malwares

888
00:35:45,760 --> 00:35:49,040
and we got a big sneak peek into their

889
00:35:49,040 --> 00:35:51,760
enhanced stealth house of card approach

890
00:35:51,760 --> 00:35:54,079
which is pretty interesting i think

891
00:35:54,079 --> 00:35:56,079
in clfs

892
00:35:56,079 --> 00:35:58,079
so we would like to also acknowledge our

893
00:35:58,079 --> 00:36:00,560
teammates that did an awesome work with

894
00:36:00,560 --> 00:36:01,440
us

895
00:36:01,440 --> 00:36:02,800
on this research

896
00:36:02,800 --> 00:36:04,560
and that's it you can follow us on

897
00:36:04,560 --> 00:36:06,960
twitter and further in our blog post

898
00:36:06,960 --> 00:36:09,030
thank you

899
00:36:09,030 --> 00:36:13,350
[Music]

900
00:36:13,350 --> 00:36:16,540
[Applause]

901
00:36:17,599 --> 00:36:19,680
you

