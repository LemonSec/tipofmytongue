1
00:00:00,290 --> 00:00:00,719
[Music]

2
00:00:00,719 --> 00:00:03,220
uh

3
00:00:03,220 --> 00:00:03,740
[Applause]

4
00:00:03,740 --> 00:00:09,880
[Music]

5
00:00:09,880 --> 00:00:16,720
[Applause]

6
00:00:16,720 --> 00:00:18,320
okay uh thank you for the introduction

7
00:00:18,320 --> 00:00:20,160
by the way

8
00:00:20,160 --> 00:00:22,160
okay i'll just test the clicker because

9
00:00:22,160 --> 00:00:24,960
i have luck okay i have luck today i

10
00:00:24,960 --> 00:00:26,080
hope

11
00:00:26,080 --> 00:00:27,279
hi everyone

12
00:00:27,279 --> 00:00:29,439
my name is noe and i'm super excited to

13
00:00:29,439 --> 00:00:31,439
be right here first of all i want to

14
00:00:31,439 --> 00:00:33,280
thank everyone who actually stayed up

15
00:00:33,280 --> 00:00:35,520
until now i really appreciate it i know

16
00:00:35,520 --> 00:00:37,760
that's like a difficult challenge

17
00:00:37,760 --> 00:00:38,719
um

18
00:00:38,719 --> 00:00:40,239
today i'm going to talk about cipher

19
00:00:40,239 --> 00:00:43,360
injection so my name is noe and

20
00:00:43,360 --> 00:00:45,680
basically i started this research like

21
00:00:45,680 --> 00:00:47,840
one year ago and i just googled for

22
00:00:47,840 --> 00:00:50,239
cipher injections and i find found like

23
00:00:50,239 --> 00:00:52,719
one and a half articles about it

24
00:00:52,719 --> 00:00:55,680
and i was like what but we can't have an

25
00:00:55,680 --> 00:00:56,960
injection

26
00:00:56,960 --> 00:01:01,039
so my whole goal today is that like half

27
00:01:01,039 --> 00:01:03,440
a year from now everyone in this

28
00:01:03,440 --> 00:01:05,840
audience will be able to just publish a

29
00:01:05,840 --> 00:01:07,760
write-up of bad bounty of cypher

30
00:01:07,760 --> 00:01:08,799
injection

31
00:01:08,799 --> 00:01:10,400
that's it

32
00:01:10,400 --> 00:01:12,479
so basically we're going to talk about

33
00:01:12,479 --> 00:01:14,799
what is exactly uh you don't really have

34
00:01:14,799 --> 00:01:17,200
to know what sql injection is but just

35
00:01:17,200 --> 00:01:18,960
to make sure this is not about sql

36
00:01:18,960 --> 00:01:21,439
injection there is one slide about it

37
00:01:21,439 --> 00:01:23,920
this is about safer injection

38
00:01:23,920 --> 00:01:24,840
so let's

39
00:01:24,840 --> 00:01:26,640
start

40
00:01:26,640 --> 00:01:29,119
so i'm working as a security researcher

41
00:01:29,119 --> 00:01:31,119
i was one of the members in the group of

42
00:01:31,119 --> 00:01:33,360
tom rezait who created capture deflect

43
00:01:33,360 --> 00:01:34,560
challenges

44
00:01:34,560 --> 00:01:36,560
and i really like to research stuff and

45
00:01:36,560 --> 00:01:38,400
to learn about new stuff and i also

46
00:01:38,400 --> 00:01:40,479
really like to dance especially after i

47
00:01:40,479 --> 00:01:42,240
find the vulnerability

48
00:01:42,240 --> 00:01:44,799
and i have like the best dog ever in my

49
00:01:44,799 --> 00:01:47,040
opinion but it's more accurate to say

50
00:01:47,040 --> 00:01:50,240
that he actually owns me

51
00:01:52,000 --> 00:01:54,399
okay so i want you to actually have five

52
00:01:54,399 --> 00:01:56,719
takeaways out of this stock today i

53
00:01:56,719 --> 00:01:59,439
really want each one of one of you to

54
00:01:59,439 --> 00:02:01,280
know what is cipher and what are graph

55
00:02:01,280 --> 00:02:02,880
databases

56
00:02:02,880 --> 00:02:05,680
i want you to actually be able to inject

57
00:02:05,680 --> 00:02:07,680
into those graph databases and to be

58
00:02:07,680 --> 00:02:09,440
able to escalate your attack even

59
00:02:09,440 --> 00:02:11,520
further than that to cause as many

60
00:02:11,520 --> 00:02:13,599
damage as you can or as many damage as i

61
00:02:13,599 --> 00:02:16,239
possibly could during my research

62
00:02:16,239 --> 00:02:18,160
i really want you to understand how to

63
00:02:18,160 --> 00:02:20,640
protect from these kind of injections

64
00:02:20,640 --> 00:02:22,720
and also how to minimize the attack

65
00:02:22,720 --> 00:02:24,560
surface in case you have an injection

66
00:02:24,560 --> 00:02:25,920
like that

67
00:02:25,920 --> 00:02:28,239
and eventually not only the talk i also

68
00:02:28,239 --> 00:02:29,520
want to give you some tools to

69
00:02:29,520 --> 00:02:31,760
understand what you do right now i wrote

70
00:02:31,760 --> 00:02:33,920
some cool playground

71
00:02:33,920 --> 00:02:35,920
which i really want you to use it but we

72
00:02:35,920 --> 00:02:39,840
have a lot to talk about so let's start

73
00:02:39,840 --> 00:02:41,280
cypher

74
00:02:41,280 --> 00:02:42,080
so

75
00:02:42,080 --> 00:02:44,560
forget for 40 minutes about everything

76
00:02:44,560 --> 00:02:46,800
you know about the word cipher

77
00:02:46,800 --> 00:02:49,040
we're not talking about scissor cipher

78
00:02:49,040 --> 00:02:51,840
or any cipher of crypto we're talking

79
00:02:51,840 --> 00:02:53,840
about something different we're talking

80
00:02:53,840 --> 00:02:56,560
about opencipher now this is just a

81
00:02:56,560 --> 00:02:58,800
query language that you use so you write

82
00:02:58,800 --> 00:03:01,040
queries in cipher language

83
00:03:01,040 --> 00:03:03,280
and those queries are written to graph

84
00:03:03,280 --> 00:03:06,159
databases so they perform some actions

85
00:03:06,159 --> 00:03:07,920
on graph databases

86
00:03:07,920 --> 00:03:10,319
and this is basically how you use it

87
00:03:10,319 --> 00:03:11,200
so

88
00:03:11,200 --> 00:03:14,159
no sql again only cipher right here and

89
00:03:14,159 --> 00:03:15,599
whenever i say

90
00:03:15,599 --> 00:03:18,000
cipher query injection i'm saying

91
00:03:18,000 --> 00:03:20,480
whenever i say cipher i actually mean

92
00:03:20,480 --> 00:03:24,640
open cipher um so let's proceed

93
00:03:24,640 --> 00:03:26,239
i really wanted to understand what is

94
00:03:26,239 --> 00:03:29,040
graph database because i said these two

95
00:03:29,040 --> 00:03:30,159
words

96
00:03:30,159 --> 00:03:32,640
too many times up until now so let's

97
00:03:32,640 --> 00:03:35,360
take for example relational database we

98
00:03:35,360 --> 00:03:38,080
have those tables and rows and columns

99
00:03:38,080 --> 00:03:40,159
that you're already familiar with

100
00:03:40,159 --> 00:03:43,040
and we have graph database now there is

101
00:03:43,040 --> 00:03:45,760
a circle you can call it a node and

102
00:03:45,760 --> 00:03:48,239
there is an arrow between two nodes you

103
00:03:48,239 --> 00:03:50,640
can call it a relationship so there is

104
00:03:50,640 --> 00:03:52,959
actually you can release that spongebob

105
00:03:52,959 --> 00:03:55,360
lives at pineapple house

106
00:03:55,360 --> 00:03:57,360
um and this is just how the database

107
00:03:57,360 --> 00:04:00,879
looks like no rows no tables and if you

108
00:04:00,879 --> 00:04:02,480
look at the bottom right you can see

109
00:04:02,480 --> 00:04:05,040
that there is neo4j this is one of the

110
00:04:05,040 --> 00:04:06,720
biggest companies that use graph

111
00:04:06,720 --> 00:04:08,480
database nowadays

112
00:04:08,480 --> 00:04:09,439
there is

113
00:04:09,439 --> 00:04:11,599
reduced graph which is just an extension

114
00:04:11,599 --> 00:04:14,159
of cipher you can actually write cypher

115
00:04:14,159 --> 00:04:16,720
queries that perform actions on radius

116
00:04:16,720 --> 00:04:18,720
database and there is also amazon

117
00:04:18,720 --> 00:04:21,918
neptune which also supports cipher query

118
00:04:21,918 --> 00:04:23,680
so it's pretty cool and there are much

119
00:04:23,680 --> 00:04:26,320
more databases that nowadays starting to

120
00:04:26,320 --> 00:04:29,120
support cypher and neo4j actually open

121
00:04:29,120 --> 00:04:31,600
sourced cipher and they actually made

122
00:04:31,600 --> 00:04:33,520
this open cipher so whenever i say

123
00:04:33,520 --> 00:04:37,280
opencipher i actually mean cypher query

124
00:04:37,280 --> 00:04:40,240
okay so we talked about graph databases

125
00:04:40,240 --> 00:04:42,639
and basically what is safer but we want

126
00:04:42,639 --> 00:04:44,560
to know much more about cipher and again

127
00:04:44,560 --> 00:04:46,320
this is not sql this is cypher this is

128
00:04:46,320 --> 00:04:48,960
something that is pretty new to most of

129
00:04:48,960 --> 00:04:50,639
us

130
00:04:50,639 --> 00:04:54,800
so in order to um do this i just created

131
00:04:54,800 --> 00:04:57,759
the word of spongebob in a database

132
00:04:57,759 --> 00:04:59,600
and you can see right here that there

133
00:04:59,600 --> 00:05:02,240
are notes of characters such as mr crab

134
00:05:02,240 --> 00:05:04,320
and spongebob and there are notes of

135
00:05:04,320 --> 00:05:07,360
places such as krustykrab senis freedom

136
00:05:07,360 --> 00:05:10,240
chum bucket and this is how a graph

137
00:05:10,240 --> 00:05:12,320
database actually looks like so you can

138
00:05:12,320 --> 00:05:14,400
see that for example

139
00:05:14,400 --> 00:05:16,560
if we take spongebob who is a friend of

140
00:05:16,560 --> 00:05:19,120
sandy who lives at sunny stream this is

141
00:05:19,120 --> 00:05:21,600
just a relationship between those nodes

142
00:05:21,600 --> 00:05:24,000
and basically this is how we actually

143
00:05:24,000 --> 00:05:27,199
see those graph databases

144
00:05:27,199 --> 00:05:29,360
so we talked about how it looks like

145
00:05:29,360 --> 00:05:31,840
about that it's not like table but let's

146
00:05:31,840 --> 00:05:33,680
understand and dig into the actual

147
00:05:33,680 --> 00:05:36,080
interest in terms of cipher or even of

148
00:05:36,080 --> 00:05:37,520
graph databases

149
00:05:37,520 --> 00:05:39,120
so we talked about nodes and

150
00:05:39,120 --> 00:05:41,440
relationship already we can have an

151
00:05:41,440 --> 00:05:42,960
arrow between two nodes and the

152
00:05:42,960 --> 00:05:44,800
direction doesn't really matter in our

153
00:05:44,800 --> 00:05:47,280
case in all of this talk

154
00:05:47,280 --> 00:05:49,919
and at the bottom you can see

155
00:05:49,919 --> 00:05:52,240
some query dismiss match and return for

156
00:05:52,240 --> 00:05:54,160
a second there is a variable that you

157
00:05:54,160 --> 00:05:56,080
can actually defined in your cipher

158
00:05:56,080 --> 00:05:58,880
query you can call it c right here there

159
00:05:58,880 --> 00:06:01,360
are labels that you can use so there is

160
00:06:01,360 --> 00:06:02,800
character label

161
00:06:02,800 --> 00:06:05,199
some like a type of a node

162
00:06:05,199 --> 00:06:06,400
and there are properties you can

163
00:06:06,400 --> 00:06:08,479
actually assign to nodes so you can

164
00:06:08,479 --> 00:06:10,960
assign name and age and birthday to

165
00:06:10,960 --> 00:06:12,639
spongebob's node

166
00:06:12,639 --> 00:06:14,720
and basically that's it those are the

167
00:06:14,720 --> 00:06:16,479
basic terms of cipher

168
00:06:16,479 --> 00:06:19,039
now if we look at a query example of

169
00:06:19,039 --> 00:06:21,919
cypher then instead of the select from

170
00:06:21,919 --> 00:06:24,080
we have match and return

171
00:06:24,080 --> 00:06:26,080
so for example if you want in cypher

172
00:06:26,080 --> 00:06:28,560
query to get all the characters

173
00:06:28,560 --> 00:06:30,960
then we will write a query to match c

174
00:06:30,960 --> 00:06:33,680
variable that will bring back all the

175
00:06:33,680 --> 00:06:36,720
notes with the type character and return

176
00:06:36,720 --> 00:06:39,520
c we have to use return after mesh so

177
00:06:39,520 --> 00:06:41,600
that safer we know what we want to get

178
00:06:41,600 --> 00:06:44,560
back from the result of the query

179
00:06:44,560 --> 00:06:46,960
and if you want for example to get a

180
00:06:46,960 --> 00:06:49,360
character by a specific name we use the

181
00:06:49,360 --> 00:06:51,680
same match and then where clause so for

182
00:06:51,680 --> 00:06:54,080
example word see that name equals to

183
00:06:54,080 --> 00:06:55,919
spongebob return c

184
00:06:55,919 --> 00:06:58,080
so this is like the basic example of how

185
00:06:58,080 --> 00:07:00,880
use cipher

186
00:07:00,880 --> 00:07:02,720
okay so we talked

187
00:07:02,720 --> 00:07:04,960
pretty too much about safer we just want

188
00:07:04,960 --> 00:07:06,720
to dig into the actually interesting

189
00:07:06,720 --> 00:07:09,199
stuff that most of us came here for the

190
00:07:09,199 --> 00:07:11,840
actual attack the actual exploitation

191
00:07:11,840 --> 00:07:12,800
um

192
00:07:12,800 --> 00:07:14,880
and the leverage of the functionalities

193
00:07:14,880 --> 00:07:17,840
let's just start with sql i promise this

194
00:07:17,840 --> 00:07:20,720
will be the only slide about sql this is

195
00:07:20,720 --> 00:07:22,880
not a sql

196
00:07:22,880 --> 00:07:23,919
talk

197
00:07:23,919 --> 00:07:26,319
but let's just do a very quick brief

198
00:07:26,319 --> 00:07:28,639
about what is sql injection we have an

199
00:07:28,639 --> 00:07:31,199
example right here of a query in sql

200
00:07:31,199 --> 00:07:33,199
where we just get all the characters

201
00:07:33,199 --> 00:07:34,800
from a database

202
00:07:34,800 --> 00:07:36,880
where the name equals to some value

203
00:07:36,880 --> 00:07:38,720
imagine that this spongebob value

204
00:07:38,720 --> 00:07:40,960
actually comes from the user so that's

205
00:07:40,960 --> 00:07:42,319
the user input

206
00:07:42,319 --> 00:07:44,080
in this case we'll bring back to the

207
00:07:44,080 --> 00:07:46,960
user only the data of spongebob but in

208
00:07:46,960 --> 00:07:48,720
the case that the user is actually an

209
00:07:48,720 --> 00:07:51,120
attacker instead of spongebob they will

210
00:07:51,120 --> 00:07:52,800
insert something like spongebob and

211
00:07:52,800 --> 00:07:55,199
double quote and then we'll insert a

212
00:07:55,199 --> 00:07:57,840
term that will return true always and

213
00:07:57,840 --> 00:07:59,440
two dashes to comment out the rest of

214
00:07:59,440 --> 00:08:00,479
the query

215
00:08:00,479 --> 00:08:03,120
so what will actually happen right here

216
00:08:03,120 --> 00:08:04,800
is that for each one of the rows in the

217
00:08:04,800 --> 00:08:07,360
table it will be checked whether the

218
00:08:07,360 --> 00:08:10,240
name is spongebob or whether one equals

219
00:08:10,240 --> 00:08:12,800
one and since one equals one we return

220
00:08:12,800 --> 00:08:15,199
true regardless of the name we will have

221
00:08:15,199 --> 00:08:17,520
this injection we will have this exploit

222
00:08:17,520 --> 00:08:19,120
and we'll be able to get other

223
00:08:19,120 --> 00:08:21,759
information we shouldn't have gotten

224
00:08:21,759 --> 00:08:24,560
so basically this is um just sql

225
00:08:24,560 --> 00:08:26,479
injection in nutshell and we're gonna

226
00:08:26,479 --> 00:08:28,720
use this knowledge from this slide

227
00:08:28,720 --> 00:08:32,080
to actually inject into cypher

228
00:08:32,080 --> 00:08:33,919
okay so let's get back into cipher

229
00:08:33,919 --> 00:08:36,000
injection

230
00:08:36,000 --> 00:08:37,839
we have pretty much similar

231
00:08:37,839 --> 00:08:40,240
query but in cipher so we want to get

232
00:08:40,240 --> 00:08:42,559
all the characters that have some

233
00:08:42,559 --> 00:08:44,800
specific name that we get from the user

234
00:08:44,800 --> 00:08:47,519
so the name equals to some user input

235
00:08:47,519 --> 00:08:49,920
and in this case there is legitimate

236
00:08:49,920 --> 00:08:52,800
user just inputs the spongebob value so

237
00:08:52,800 --> 00:08:55,120
we bring back the node that has the name

238
00:08:55,120 --> 00:08:58,160
spongebob pretty much boring

239
00:08:58,160 --> 00:08:59,680
let's go into the really interesting

240
00:08:59,680 --> 00:09:00,640
part

241
00:09:00,640 --> 00:09:03,120
now in cypher instead of spongebob the

242
00:09:03,120 --> 00:09:04,800
attacker will insert something like

243
00:09:04,800 --> 00:09:07,200
spongebob with single quote and then

244
00:09:07,200 --> 00:09:09,440
again we'll insert a term that will

245
00:09:09,440 --> 00:09:12,399
return true always and return c

246
00:09:12,399 --> 00:09:14,480
with two slashes to comment out the rest

247
00:09:14,480 --> 00:09:16,000
of the query

248
00:09:16,000 --> 00:09:18,240
so what will happen right here is that

249
00:09:18,240 --> 00:09:20,640
we will get not only spongebob node but

250
00:09:20,640 --> 00:09:22,480
other nodes as well

251
00:09:22,480 --> 00:09:23,360
and

252
00:09:23,360 --> 00:09:25,760
we just inserted the injections so

253
00:09:25,760 --> 00:09:28,240
notice that all the red background text

254
00:09:28,240 --> 00:09:30,320
will be actually the injection and this

255
00:09:30,320 --> 00:09:32,080
is what an attacker should probably

256
00:09:32,080 --> 00:09:33,920
insert

257
00:09:33,920 --> 00:09:34,880
but

258
00:09:34,880 --> 00:09:37,040
you can just stop me right now and say

259
00:09:37,040 --> 00:09:40,399
okay we have to know to inject return c

260
00:09:40,399 --> 00:09:42,720
we're an attacker from outside we have

261
00:09:42,720 --> 00:09:45,120
no idea that there is a variable defined

262
00:09:45,120 --> 00:09:47,839
that's called c so how would we know to

263
00:09:47,839 --> 00:09:51,040
insert return c as the injection

264
00:09:51,040 --> 00:09:52,800
and i will tell you that you're totally

265
00:09:52,800 --> 00:09:53,680
right

266
00:09:53,680 --> 00:09:55,839
this is an issue that we are going to

267
00:09:55,839 --> 00:09:58,399
overcome in a few slides so keep that in

268
00:09:58,399 --> 00:10:00,080
mind and let's keep with the injections

269
00:10:00,080 --> 00:10:01,680
for now but we're going to solve this

270
00:10:01,680 --> 00:10:02,880
issue

271
00:10:02,880 --> 00:10:04,560
okay the next thing that an attacker can

272
00:10:04,560 --> 00:10:07,120
actually do is to use this injection not

273
00:10:07,120 --> 00:10:09,440
only to get other data but to actually

274
00:10:09,440 --> 00:10:13,040
be able to tamper with our other data so

275
00:10:13,040 --> 00:10:15,279
he or she will insert delete c

276
00:10:15,279 --> 00:10:16,800
and then what will happen is that the

277
00:10:16,800 --> 00:10:19,279
actual node will be deleted

278
00:10:19,279 --> 00:10:21,200
and this is like pretty similar

279
00:10:21,200 --> 00:10:23,600
injection

280
00:10:23,600 --> 00:10:26,000
but we don't want to do more damage

281
00:10:26,000 --> 00:10:27,760
through all these stock so let's see how

282
00:10:27,760 --> 00:10:29,519
we can just delete everything and not

283
00:10:29,519 --> 00:10:30,720
only our own

284
00:10:30,720 --> 00:10:32,399
poor node

285
00:10:32,399 --> 00:10:33,920
what we will insert this is the same

286
00:10:33,920 --> 00:10:35,200
example

287
00:10:35,200 --> 00:10:37,279
as before but this time we will insert

288
00:10:37,279 --> 00:10:39,600
something like this now of this red

289
00:10:39,600 --> 00:10:41,440
background text will be the actual

290
00:10:41,440 --> 00:10:44,000
injection we will insert again spongebob

291
00:10:44,000 --> 00:10:46,240
with scenic guild quotes to end the

292
00:10:46,240 --> 00:10:48,959
string and then we'll insert two clauses

293
00:10:48,959 --> 00:10:50,959
the first one will be match with all

294
00:10:50,959 --> 00:10:52,959
character so we will create a variable

295
00:10:52,959 --> 00:10:56,240
called all to get all the labels that

296
00:10:56,240 --> 00:10:58,399
has the character and then we'll insert

297
00:10:58,399 --> 00:11:00,480
the little so we will be able to delete

298
00:11:00,480 --> 00:11:02,560
all the characters so again we will do

299
00:11:02,560 --> 00:11:04,880
two actions right here first of all we

300
00:11:04,880 --> 00:11:06,959
will get all the characters and then we

301
00:11:06,959 --> 00:11:08,720
will delete all the characters

302
00:11:08,720 --> 00:11:12,160
and this will be our injection

303
00:11:12,880 --> 00:11:14,959
but we don't see the query

304
00:11:14,959 --> 00:11:17,120
i mean i'm returning to the previous

305
00:11:17,120 --> 00:11:20,240
question that i avoided

306
00:11:20,240 --> 00:11:21,920
we don't actually know that there is a

307
00:11:21,920 --> 00:11:23,440
return c

308
00:11:23,440 --> 00:11:25,680
i mean we don't know to inject return c

309
00:11:25,680 --> 00:11:27,279
we don't know that there is a label

310
00:11:27,279 --> 00:11:29,360
called character in the database because

311
00:11:29,360 --> 00:11:31,600
we are an attacker from outside we have

312
00:11:31,600 --> 00:11:33,680
no idea how the database actually looks

313
00:11:33,680 --> 00:11:34,480
like

314
00:11:34,480 --> 00:11:36,399
so how can we still be able to inject

315
00:11:36,399 --> 00:11:38,320
something because obviously we have to

316
00:11:38,320 --> 00:11:40,079
use this return

317
00:11:40,079 --> 00:11:42,399
but still not break the query let's see

318
00:11:42,399 --> 00:11:44,399
how we're gonna do it

319
00:11:44,399 --> 00:11:46,000
we're gonna exploit three data

320
00:11:46,000 --> 00:11:48,880
eventually we're gonna just

321
00:11:48,880 --> 00:11:51,519
link data to outside and we're gonna do

322
00:11:51,519 --> 00:11:54,160
this by leveraging a very legitimate

323
00:11:54,160 --> 00:11:57,760
functionality in neo4j code load csv now

324
00:11:57,760 --> 00:12:00,000
again neo4j is just one of the biggest

325
00:12:00,000 --> 00:12:03,040
database like graph databases today

326
00:12:03,040 --> 00:12:04,880
and if you search for graph databases

327
00:12:04,880 --> 00:12:07,200
most changes they will come up like top

328
00:12:07,200 --> 00:12:09,200
three or top one

329
00:12:09,200 --> 00:12:11,040
so we're gonna use load csv

330
00:12:11,040 --> 00:12:14,160
functionality neo4j in order to deal

331
00:12:14,160 --> 00:12:16,079
with the issue that we had previously

332
00:12:16,079 --> 00:12:18,800
that we're not able to see the query

333
00:12:18,800 --> 00:12:20,480
we're gonna use this so let's see how

334
00:12:20,480 --> 00:12:22,639
we're gonna use it we have this

335
00:12:22,639 --> 00:12:24,639
functionality and all it does is just

336
00:12:24,639 --> 00:12:27,680
importing data from other external csv

337
00:12:27,680 --> 00:12:28,959
file

338
00:12:28,959 --> 00:12:29,920
so

339
00:12:29,920 --> 00:12:32,959
you just want to for example to insert

340
00:12:32,959 --> 00:12:35,600
data of 20 000

341
00:12:35,600 --> 00:12:38,079
records you don't type it manually you

342
00:12:38,079 --> 00:12:40,720
just use the csv so you will load

343
00:12:40,720 --> 00:12:44,000
from this csv manually um and by that

344
00:12:44,000 --> 00:12:45,760
you'll be able to use the data like this

345
00:12:45,760 --> 00:12:47,360
is very legitimate

346
00:12:47,360 --> 00:12:50,160
but what it does is that it enables you

347
00:12:50,160 --> 00:12:53,040
to use in the query

348
00:12:53,040 --> 00:12:55,920
a method that enables us to actually

349
00:12:55,920 --> 00:12:59,519
send a get request to external service

350
00:12:59,519 --> 00:13:02,000
and that is huge it means that we can

351
00:13:02,000 --> 00:13:05,360
define any service we want and a get

352
00:13:05,360 --> 00:13:08,800
request will be sent using our injection

353
00:13:08,800 --> 00:13:10,720
now let's see actually how we can use it

354
00:13:10,720 --> 00:13:13,440
but basically we have a case of blind

355
00:13:13,440 --> 00:13:15,920
injection right here where we actually

356
00:13:15,920 --> 00:13:18,480
able to inject into a query but we're

357
00:13:18,480 --> 00:13:20,639
not able to see the actual

358
00:13:20,639 --> 00:13:23,600
response that is returned so for that we

359
00:13:23,600 --> 00:13:25,760
get help from low tsv

360
00:13:25,760 --> 00:13:28,240
so we we use it as a kind of a pipe

361
00:13:28,240 --> 00:13:31,440
between the actual database and between

362
00:13:31,440 --> 00:13:34,320
our own controlled server so we'll be

363
00:13:34,320 --> 00:13:36,399
able to leak data from the injection to

364
00:13:36,399 --> 00:13:38,720
outside to us but let's see how we can

365
00:13:38,720 --> 00:13:41,120
actually do it

366
00:13:41,120 --> 00:13:43,920
so i know this is a lot of text but we

367
00:13:43,920 --> 00:13:46,079
actually insert those four lines as the

368
00:13:46,079 --> 00:13:49,120
injection dismiss the last line what we

369
00:13:49,120 --> 00:13:51,519
actually do here will be to

370
00:13:51,519 --> 00:13:54,320
run procedure called db.labels it

371
00:13:54,320 --> 00:13:56,639
actually returns back all the labels in

372
00:13:56,639 --> 00:13:58,240
a database to us

373
00:13:58,240 --> 00:14:01,040
then we use law csv from and we put our

374
00:14:01,040 --> 00:14:03,600
own url to our own server and we will

375
00:14:03,600 --> 00:14:06,160
append the label at the end of the url

376
00:14:06,160 --> 00:14:08,560
so what will actually be is

377
00:14:08,560 --> 00:14:10,480
there will be a get request to our own

378
00:14:10,480 --> 00:14:13,360
server with the leaked labels

379
00:14:13,360 --> 00:14:15,199
and the two slashes of course at the end

380
00:14:15,199 --> 00:14:16,720
of the injection to comment out the rest

381
00:14:16,720 --> 00:14:18,000
of the query

382
00:14:18,000 --> 00:14:20,800
but this will what we will see if we

383
00:14:20,800 --> 00:14:22,639
just use for example burpsuit's

384
00:14:22,639 --> 00:14:24,399
collaborator to see

385
00:14:24,399 --> 00:14:27,279
the request we will get a request to our

386
00:14:27,279 --> 00:14:29,680
own server with the leaked label from

387
00:14:29,680 --> 00:14:32,240
the injection from the database and as

388
00:14:32,240 --> 00:14:34,560
you can see in the second line the user

389
00:14:34,560 --> 00:14:37,440
agent is actually in neolud csv java

390
00:14:37,440 --> 00:14:39,360
which means that the get request was

391
00:14:39,360 --> 00:14:41,519
sent directly from the injection that we

392
00:14:41,519 --> 00:14:42,320
made

393
00:14:42,320 --> 00:14:44,880
with the help of the nice load csv in

394
00:14:44,880 --> 00:14:46,480
neo4j

395
00:14:46,480 --> 00:14:47,360
so

396
00:14:47,360 --> 00:14:49,440
using this technique we can just lick

397
00:14:49,440 --> 00:14:51,760
more and more parts of the database

398
00:14:51,760 --> 00:14:53,760
now we know that there is a label called

399
00:14:53,760 --> 00:14:56,480
character we insert match c character

400
00:14:56,480 --> 00:14:57,760
and again all of this will be in the

401
00:14:57,760 --> 00:15:00,480
injection and then we'll use load csv

402
00:15:00,480 --> 00:15:03,199
from with your own to our own server

403
00:15:03,199 --> 00:15:05,120
epoch deck joints will dismiss this for

404
00:15:05,120 --> 00:15:08,959
a second but keys will see so keys

405
00:15:08,959 --> 00:15:11,199
will actually return all the properties

406
00:15:11,199 --> 00:15:12,560
of the character

407
00:15:12,560 --> 00:15:15,120
and epoch text joins just to turn

408
00:15:15,120 --> 00:15:17,040
transform the list

409
00:15:17,040 --> 00:15:19,040
to a string so we can append it at the

410
00:15:19,040 --> 00:15:21,040
end of the url

411
00:15:21,040 --> 00:15:22,399
and this is basically what we will

412
00:15:22,399 --> 00:15:25,680
return to get back all the properties

413
00:15:25,680 --> 00:15:28,560
so we'll be able to link also the name

414
00:15:28,560 --> 00:15:30,480
properties outside and for each one of

415
00:15:30,480 --> 00:15:32,399
the properties in the database we will

416
00:15:32,399 --> 00:15:35,360
get another get request and again it was

417
00:15:35,360 --> 00:15:38,639
from low csv neo4j so pretty cool

418
00:15:38,639 --> 00:15:40,160
the last thing that we want to link will

419
00:15:40,160 --> 00:15:42,480
be actually the values the fun values of

420
00:15:42,480 --> 00:15:44,160
spongebob and patrick

421
00:15:44,160 --> 00:15:46,560
so we know that there is a label called

422
00:15:46,560 --> 00:15:49,040
character we know that there is a

423
00:15:49,040 --> 00:15:50,880
property called name we want to link

424
00:15:50,880 --> 00:15:53,120
right now c dot name that you see at the

425
00:15:53,120 --> 00:15:55,040
end of the second line

426
00:15:55,040 --> 00:15:57,920
we will leak patrick and mr krab with a

427
00:15:57,920 --> 00:16:00,240
simple typo i made but basically we will

428
00:16:00,240 --> 00:16:02,399
be able to link the values of the actual

429
00:16:02,399 --> 00:16:05,279
names and by that even delete what we

430
00:16:05,279 --> 00:16:06,959
want because right now we linked

431
00:16:06,959 --> 00:16:09,199
anything we wanted from the database and

432
00:16:09,199 --> 00:16:10,880
we'd be able to tamper and just

433
00:16:10,880 --> 00:16:13,519
exploratory data as we wish

434
00:16:13,519 --> 00:16:15,920
so we were able to bypass this issue of

435
00:16:15,920 --> 00:16:18,320
not being able to see

436
00:16:18,320 --> 00:16:20,560
what we inject

437
00:16:20,560 --> 00:16:22,480
but as i said in the beginning we want

438
00:16:22,480 --> 00:16:24,720
to cause as many damage as we can

439
00:16:24,720 --> 00:16:26,480
during all this stock

440
00:16:26,480 --> 00:16:28,639
and it's not enough for us to just

441
00:16:28,639 --> 00:16:31,440
destroy the database to delete data we

442
00:16:31,440 --> 00:16:32,959
want to do much more

443
00:16:32,959 --> 00:16:35,360
so let's see what else we can do we're

444
00:16:35,360 --> 00:16:37,279
going to ask a letter attack and cause

445
00:16:37,279 --> 00:16:39,519
dinar of service we're going to prevent

446
00:16:39,519 --> 00:16:42,320
access to the database we're going to

447
00:16:42,320 --> 00:16:44,800
perform ssrf in rfi and i'm going to

448
00:16:44,800 --> 00:16:47,040
explain why it is when we reach to those

449
00:16:47,040 --> 00:16:48,880
sites but basically we're going to

450
00:16:48,880 --> 00:16:51,440
access sensitive informations files and

451
00:16:51,440 --> 00:16:54,639
leak data outside and even access hidden

452
00:16:54,639 --> 00:16:56,240
endpoints

453
00:16:56,240 --> 00:16:58,079
we're gonna eventually cause lateral

454
00:16:58,079 --> 00:16:59,839
movement in such a way that we'll be

455
00:16:59,839 --> 00:17:02,240
able to leak other data from other

456
00:17:02,240 --> 00:17:05,039
services not only the service that is

457
00:17:05,039 --> 00:17:07,520
vulnerable to the injection itself

458
00:17:07,520 --> 00:17:10,079
and we're gonna also talk about aws dcp

459
00:17:10,079 --> 00:17:12,160
and what else we can leak when we have

460
00:17:12,160 --> 00:17:14,959
access to a machine in the cloud itself

461
00:17:14,959 --> 00:17:17,359
so we're gonna show how it can do all

462
00:17:17,359 --> 00:17:18,480
those things

463
00:17:18,480 --> 00:17:20,240
and eventually we're gonna talk about

464
00:17:20,240 --> 00:17:22,720
alternatives to low csv

465
00:17:22,720 --> 00:17:24,880
and what we can do in other databases as

466
00:17:24,880 --> 00:17:29,039
well and not only in load csv even neo4j

467
00:17:29,039 --> 00:17:30,559
okay so the first thing that we can

468
00:17:30,559 --> 00:17:32,559
actually do in the injection itself we

469
00:17:32,559 --> 00:17:35,200
can call dbms.list connections which

470
00:17:35,200 --> 00:17:37,039
will actually return back all the

471
00:17:37,039 --> 00:17:39,760
connection ids to us we will put this in

472
00:17:39,760 --> 00:17:42,160
the injection itself and we will use

473
00:17:42,160 --> 00:17:44,400
loadcsv to leak all the connection ids

474
00:17:44,400 --> 00:17:46,960
to us and the next thing will be to

475
00:17:46,960 --> 00:17:49,840
either kill a connection or kill a list

476
00:17:49,840 --> 00:17:51,440
of connections

477
00:17:51,440 --> 00:17:53,520
now the connections are not the simple

478
00:17:53,520 --> 00:17:55,600
connections between the user and

479
00:17:55,600 --> 00:17:57,760
applications those are actually the

480
00:17:57,760 --> 00:17:59,840
powerful connections between the server

481
00:17:59,840 --> 00:18:01,760
and the database itself

482
00:18:01,760 --> 00:18:04,000
and if we do so in an automated script

483
00:18:04,000 --> 00:18:05,919
imagine that it can just cause enough

484
00:18:05,919 --> 00:18:08,559
service on the database and prevent from

485
00:18:08,559 --> 00:18:10,799
a lot of queries of legitimate users to

486
00:18:10,799 --> 00:18:12,240
be executed

487
00:18:12,240 --> 00:18:14,400
now i will say that it really depends on

488
00:18:14,400 --> 00:18:15,679
the rows and permissions that you

489
00:18:15,679 --> 00:18:17,039
actually have

490
00:18:17,039 --> 00:18:19,360
if you have the default role of admin

491
00:18:19,360 --> 00:18:21,600
you will be able to do so with a simple

492
00:18:21,600 --> 00:18:24,000
injection with low tsv

493
00:18:24,000 --> 00:18:25,600
but we're going to talk much more about

494
00:18:25,600 --> 00:18:26,840
the rows and

495
00:18:26,840 --> 00:18:29,760
permissions basically we can just drop

496
00:18:29,760 --> 00:18:32,559
databases so we can link the names of

497
00:18:32,559 --> 00:18:35,440
the databases with the load csv trig

498
00:18:35,440 --> 00:18:39,840
and then we can just drop a database

499
00:18:39,840 --> 00:18:42,320
so we were able to close in our service

500
00:18:42,320 --> 00:18:45,280
on the database we're able to delete

501
00:18:45,280 --> 00:18:48,080
data and change data and maybe annoy

502
00:18:48,080 --> 00:18:49,360
some users

503
00:18:49,360 --> 00:18:51,200
but still it's not enough for us so

504
00:18:51,200 --> 00:18:53,760
let's see what else we can do

505
00:18:53,760 --> 00:18:56,400
we're gonna perform ssrf right now now

506
00:18:56,400 --> 00:18:59,840
ssrf is a web based vulnerability where

507
00:18:59,840 --> 00:19:02,240
an attacker actually creates an http

508
00:19:02,240 --> 00:19:04,880
request in such a way that is malicious

509
00:19:04,880 --> 00:19:07,039
it reaches to through the firewall to

510
00:19:07,039 --> 00:19:09,679
the server itself and because of how the

511
00:19:09,679 --> 00:19:12,559
request is constructed then either the

512
00:19:12,559 --> 00:19:14,880
server sends a request to himself or to

513
00:19:14,880 --> 00:19:16,960
another internal server gets the

514
00:19:16,960 --> 00:19:18,799
response from it and then returns the

515
00:19:18,799 --> 00:19:21,280
response to the attacker so it looks

516
00:19:21,280 --> 00:19:22,960
just as if the attacker is actually

517
00:19:22,960 --> 00:19:25,200
sitting after the firewall and not

518
00:19:25,200 --> 00:19:27,679
behind it and is able to just manipulate

519
00:19:27,679 --> 00:19:30,240
the server into sending a lot of

520
00:19:30,240 --> 00:19:32,320
internal requests and access a lot of

521
00:19:32,320 --> 00:19:35,120
sensitive files keys and endpoints and

522
00:19:35,120 --> 00:19:37,440
we're gonna see how we're gonna do this

523
00:19:37,440 --> 00:19:40,080
with load csv this is a pretty simple

524
00:19:40,080 --> 00:19:42,960
trick but you can achieve a lot with it

525
00:19:42,960 --> 00:19:45,919
so we can actually cause ssrf with low

526
00:19:45,919 --> 00:19:47,120
csv

527
00:19:47,120 --> 00:19:49,440
and this is an example so

528
00:19:49,440 --> 00:19:52,640
what we will actually do we have this

529
00:19:52,640 --> 00:19:54,799
same case that we talked about when we

530
00:19:54,799 --> 00:19:56,640
actually have an injection in a

531
00:19:56,640 --> 00:19:59,679
vulnerable server in neo4j we can just

532
00:19:59,679 --> 00:20:02,400
use those csv from but this time we

533
00:20:02,400 --> 00:20:05,520
won't use our own server we use the url

534
00:20:05,520 --> 00:20:08,320
of another internal server and what we

535
00:20:08,320 --> 00:20:10,400
actually happen right here is that the

536
00:20:10,400 --> 00:20:12,720
vulnerable server will send a get

537
00:20:12,720 --> 00:20:15,440
request to one of the internal servers

538
00:20:15,440 --> 00:20:17,919
that we will define from the load csv

539
00:20:17,919 --> 00:20:18,960
from

540
00:20:18,960 --> 00:20:20,720
and it's pretty powerful we can access

541
00:20:20,720 --> 00:20:22,559
hidden endpoints we can enumerate

542
00:20:22,559 --> 00:20:25,440
directories we can use command

543
00:20:25,440 --> 00:20:27,760
improved force directories and files

544
00:20:27,760 --> 00:20:28,960
that we

545
00:20:28,960 --> 00:20:31,039
usually you use in

546
00:20:31,039 --> 00:20:32,559
bounty

547
00:20:32,559 --> 00:20:33,919
and basically if you want to do

548
00:20:33,919 --> 00:20:35,840
something more focused

549
00:20:35,840 --> 00:20:38,400
whether we talk about cloud environments

550
00:20:38,400 --> 00:20:42,159
or gcp or aws for example in aws there

551
00:20:42,159 --> 00:20:44,880
is a service called metadata service

552
00:20:44,880 --> 00:20:47,120
which is a service that sits in a static

553
00:20:47,120 --> 00:20:50,000
iep and it holds a lot of metadata

554
00:20:50,000 --> 00:20:52,080
information about your roles and

555
00:20:52,080 --> 00:20:54,320
permissions and with which other

556
00:20:54,320 --> 00:20:55,919
machines you can actually communicate

557
00:20:55,919 --> 00:20:58,480
with so what you can actually do here is

558
00:20:58,480 --> 00:21:01,200
you can use those csv from to create the

559
00:21:01,200 --> 00:21:04,000
metadata service to get a response back

560
00:21:04,000 --> 00:21:06,159
and to be able to know to each other

561
00:21:06,159 --> 00:21:08,960
machines you can escalate your attack

562
00:21:08,960 --> 00:21:10,240
so

563
00:21:10,240 --> 00:21:12,320
it's pretty much a lot for example if

564
00:21:12,320 --> 00:21:14,799
you see that you have access to query

565
00:21:14,799 --> 00:21:17,280
the secret manager of aws then you're

566
00:21:17,280 --> 00:21:19,679
able to get a lot of sensitive files and

567
00:21:19,679 --> 00:21:21,679
passwords from there and also you can

568
00:21:21,679 --> 00:21:23,039
just escalate

569
00:21:23,039 --> 00:21:24,880
through one machine and another if you

570
00:21:24,880 --> 00:21:26,880
just know that you can communicate with

571
00:21:26,880 --> 00:21:29,200
this other machine in the cloud

572
00:21:29,200 --> 00:21:31,280
so it's pretty much a lot

573
00:21:31,280 --> 00:21:33,840
one fine point to know that in v1 you

574
00:21:33,840 --> 00:21:36,480
can do this but in v2 you cannot because

575
00:21:36,480 --> 00:21:38,480
in v2 there is a session that you have

576
00:21:38,480 --> 00:21:40,880
to establish between the user that wants

577
00:21:40,880 --> 00:21:42,799
to the permission and between the

578
00:21:42,799 --> 00:21:45,440
metadata service so you actually have to

579
00:21:45,440 --> 00:21:48,080
attach your own token in the header of

580
00:21:48,080 --> 00:21:50,720
the request and since we use load csv

581
00:21:50,720 --> 00:21:52,240
from right here

582
00:21:52,240 --> 00:21:54,240
and we cause a get request we need to

583
00:21:54,240 --> 00:21:56,880
actually find a way to attach this token

584
00:21:56,880 --> 00:21:58,880
in the header when we send this request

585
00:21:58,880 --> 00:22:01,280
to the media service and it's like funny

586
00:22:01,280 --> 00:22:03,679
to think you will have a potential

587
00:22:03,679 --> 00:22:05,760
ability to decide on the header that

588
00:22:05,760 --> 00:22:07,760
will be sent in the request

589
00:22:07,760 --> 00:22:10,000
using low csv so i didn't find a way to

590
00:22:10,000 --> 00:22:12,480
do so and it's a nice thing to know

591
00:22:12,480 --> 00:22:14,960
why else you should operate upgrade to

592
00:22:14,960 --> 00:22:18,159
media service version 2.

593
00:22:18,159 --> 00:22:20,960
so we saw basically the concept but

594
00:22:20,960 --> 00:22:24,000
let's talk about actually ciphertext

595
00:22:24,000 --> 00:22:26,880
what we can do right here is i have a

596
00:22:26,880 --> 00:22:30,320
very cringy version of server that holds

597
00:22:30,320 --> 00:22:32,960
in some endpoint you should never

598
00:22:32,960 --> 00:22:36,000
be able to access externally and hold

599
00:22:36,000 --> 00:22:39,440
some very secret um and in this point

600
00:22:39,440 --> 00:22:41,679
i'm i'm going to say that this imagine

601
00:22:41,679 --> 00:22:44,000
these endpoints actually sits in another

602
00:22:44,000 --> 00:22:46,080
server not in the server that actually

603
00:22:46,080 --> 00:22:49,360
runs new 4g in the database

604
00:22:49,360 --> 00:22:51,600
what we do right here will be

605
00:22:51,600 --> 00:22:53,679
all this will be the injection itself

606
00:22:53,679 --> 00:22:56,400
again dismiss the last line um but we

607
00:22:56,400 --> 00:22:59,120
will use to load csv from right here the

608
00:22:59,120 --> 00:23:01,200
first one will be to get the actual

609
00:23:01,200 --> 00:23:04,080
secret value from the other server

610
00:23:04,080 --> 00:23:06,799
and as you can see there is a keys.txt

611
00:23:06,799 --> 00:23:09,039
at the end we will save this value as

612
00:23:09,039 --> 00:23:12,000
secret and then we'll use dot csv from

613
00:23:12,000 --> 00:23:14,240
we will use the url to our own server

614
00:23:14,240 --> 00:23:16,799
this time with the secret appended at

615
00:23:16,799 --> 00:23:18,240
the end

616
00:23:18,240 --> 00:23:21,280
so what will actually happen right here

617
00:23:21,280 --> 00:23:22,880
is that we will get eventually the

618
00:23:22,880 --> 00:23:25,440
secret leaked outside to us and this is

619
00:23:25,440 --> 00:23:28,080
a secret that was sitting inside a

620
00:23:28,080 --> 00:23:30,400
different server not in the server that

621
00:23:30,400 --> 00:23:32,799
we had the injection of so this is kind

622
00:23:32,799 --> 00:23:34,320
of an example how we can actually

623
00:23:34,320 --> 00:23:37,600
escalate to other machines as well

624
00:23:37,600 --> 00:23:40,080
and notice just one thing the secret

625
00:23:40,080 --> 00:23:41,760
with the index zero is because we use

626
00:23:41,760 --> 00:23:44,880
load csv so it actually returns as csv

627
00:23:44,880 --> 00:23:47,039
file but not really

628
00:23:47,039 --> 00:23:49,200
and it doesn't really matter what your

629
00:23:49,200 --> 00:23:51,440
type of the file is it will work

630
00:23:51,440 --> 00:23:54,880
regardless if it's csv or not

631
00:23:55,840 --> 00:23:58,480
okay so we talked about a lot here we

632
00:23:58,480 --> 00:24:00,799
talked about cipher injection and graph

633
00:24:00,799 --> 00:24:03,760
databases dna of service and other fun

634
00:24:03,760 --> 00:24:06,799
stuff with ssrf and escalation in the

635
00:24:06,799 --> 00:24:07,760
cloud

636
00:24:07,760 --> 00:24:09,600
but i really want to talk for a second

637
00:24:09,600 --> 00:24:11,279
about what we actually did after we

638
00:24:11,279 --> 00:24:13,679
discovered all those things so we did

639
00:24:13,679 --> 00:24:15,520
responsible disclosure we actually

640
00:24:15,520 --> 00:24:18,559
contacted neo4j company and told them

641
00:24:18,559 --> 00:24:19,840
about all the risks that you can

642
00:24:19,840 --> 00:24:21,919
actually have when you have low csv

643
00:24:21,919 --> 00:24:23,039
enabled

644
00:24:23,039 --> 00:24:25,039
because we didn't find any way to

645
00:24:25,039 --> 00:24:27,919
disable load csv and we really wanted

646
00:24:27,919 --> 00:24:30,159
away from them to disable csv if we

647
00:24:30,159 --> 00:24:32,159
don't use it so that an attacker won't

648
00:24:32,159 --> 00:24:34,480
be able to escalate like that in the

649
00:24:34,480 --> 00:24:35,600
cloud

650
00:24:35,600 --> 00:24:37,679
they didn't understand

651
00:24:37,679 --> 00:24:39,440
the risk and they're working currently

652
00:24:39,440 --> 00:24:42,080
to provide a solution but unfortunately

653
00:24:42,080 --> 00:24:45,200
since load csv is defined in new 4j as a

654
00:24:45,200 --> 00:24:47,279
clause and not as a function

655
00:24:47,279 --> 00:24:49,919
currently this is not simple to develop

656
00:24:49,919 --> 00:24:53,120
a fix that will be able to

657
00:24:53,120 --> 00:24:56,080
to have you disable csv because imagine

658
00:24:56,080 --> 00:24:58,159
that you cannot obviously disable match

659
00:24:58,159 --> 00:25:00,720
clause so it is actually defined as

660
00:25:00,720 --> 00:25:02,960
clause this law csv you can actually

661
00:25:02,960 --> 00:25:05,440
disable all the functions in csv but

662
00:25:05,440 --> 00:25:08,240
again since slow csv is not a function

663
00:25:08,240 --> 00:25:09,440
as it is

664
00:25:09,440 --> 00:25:11,440
as it is defined in neo4j then you

665
00:25:11,440 --> 00:25:13,919
cannot actually use it right now

666
00:25:13,919 --> 00:25:15,120
but since they're working on

667
00:25:15,120 --> 00:25:18,080
installation i was like okay they will

668
00:25:18,080 --> 00:25:20,880
fix it some at some point in the future

669
00:25:20,880 --> 00:25:22,960
people will be able to disable it i

670
00:25:22,960 --> 00:25:25,600
still want to find a way to be able to

671
00:25:25,600 --> 00:25:27,840
leak the same information but not with

672
00:25:27,840 --> 00:25:29,279
low csv

673
00:25:29,279 --> 00:25:32,240
this time and this is where epoch plugin

674
00:25:32,240 --> 00:25:34,720
comes into the the picture

675
00:25:34,720 --> 00:25:37,279
so i did a little research about what it

676
00:25:37,279 --> 00:25:39,919
is exactly this is just a plugin you can

677
00:25:39,919 --> 00:25:42,720
install in new 4g and i think it is like

678
00:25:42,720 --> 00:25:46,080
the most common plugin in neo4j

679
00:25:46,080 --> 00:25:48,960
um and you can obviously use much more

680
00:25:48,960 --> 00:25:51,360
features when you install the

681
00:25:51,360 --> 00:25:53,760
when you install a plugin so basically

682
00:25:53,760 --> 00:25:55,440
it's just an extension to the language

683
00:25:55,440 --> 00:25:58,480
of cipher in neo4j you can just load

684
00:25:58,480 --> 00:26:00,400
import and import

685
00:26:00,400 --> 00:26:03,600
export other data and what i thought was

686
00:26:03,600 --> 00:26:04,559
okay

687
00:26:04,559 --> 00:26:08,400
we can actually use apocloud json in a

688
00:26:08,400 --> 00:26:11,200
similar way of how we use vote csv

689
00:26:11,200 --> 00:26:14,240
so even if low cc will be blocked at

690
00:26:14,240 --> 00:26:16,559
some point or another we still have it

691
00:26:16,559 --> 00:26:17,919
another way

692
00:26:17,919 --> 00:26:19,919
we can use match for example with c

693
00:26:19,919 --> 00:26:22,720
corrector and then to call apocaly.json

694
00:26:22,720 --> 00:26:25,039
and at the end of this third line in the

695
00:26:25,039 --> 00:26:27,440
leaked we will still be able to append

696
00:26:27,440 --> 00:26:29,520
the liquid information that we want to

697
00:26:29,520 --> 00:26:32,640
to use actually so the same injection we

698
00:26:32,640 --> 00:26:34,720
can actually achieve with a different

699
00:26:34,720 --> 00:26:37,120
thing with epoch library it has to be

700
00:26:37,120 --> 00:26:39,679
installed in your actual database so an

701
00:26:39,679 --> 00:26:42,000
attacker will be able to use it but it's

702
00:26:42,000 --> 00:26:44,240
very familiar to a lot of developers

703
00:26:44,240 --> 00:26:46,559
that actually use neo4j and it's just as

704
00:26:46,559 --> 00:26:48,000
you talk about

705
00:26:48,000 --> 00:26:50,240
loadash in javascript for example a lot

706
00:26:50,240 --> 00:26:51,360
of people

707
00:26:51,360 --> 00:26:53,200
in javascript actually use it and

708
00:26:53,200 --> 00:26:55,840
install it so it's pretty common to to

709
00:26:55,840 --> 00:26:58,799
assume that they probably install it

710
00:26:58,799 --> 00:27:00,080
um

711
00:27:00,080 --> 00:27:02,240
and this is just how it looks like when

712
00:27:02,240 --> 00:27:04,480
you have your own server and use this

713
00:27:04,480 --> 00:27:07,120
injection and you get a request so you

714
00:27:07,120 --> 00:27:08,799
get a request with data json with the

715
00:27:08,799 --> 00:27:11,200
leaked value and it will send directly

716
00:27:11,200 --> 00:27:15,679
from epoch procedures for neo4j

717
00:27:16,480 --> 00:27:18,559
okay so we talked a lot about the

718
00:27:18,559 --> 00:27:21,200
injections a lot about the risk and

719
00:27:21,200 --> 00:27:22,960
pretty much a lot about what we actually

720
00:27:22,960 --> 00:27:25,279
try to do with neo4j

721
00:27:25,279 --> 00:27:27,679
but let's really try to make a value out

722
00:27:27,679 --> 00:27:29,520
of this stock today and understand how

723
00:27:29,520 --> 00:27:31,520
we can be protected from those kind of

724
00:27:31,520 --> 00:27:32,960
injections

725
00:27:32,960 --> 00:27:35,039
first of all in order to be able to

726
00:27:35,039 --> 00:27:37,600
write as a developer

727
00:27:37,600 --> 00:27:39,760
query we have to use parameterized

728
00:27:39,760 --> 00:27:42,480
queries and this is a good example like

729
00:27:42,480 --> 00:27:44,640
we have to use match and

730
00:27:44,640 --> 00:27:46,880
every kind of clause but with a

731
00:27:46,880 --> 00:27:47,919
parameter

732
00:27:47,919 --> 00:27:50,080
inside so you can see the dollar sign of

733
00:27:50,080 --> 00:27:52,399
name and we can see that we put the name

734
00:27:52,399 --> 00:27:54,799
value in a separate parameter of the

735
00:27:54,799 --> 00:27:56,399
function that we run

736
00:27:56,399 --> 00:27:58,240
and it actually means that we take the

737
00:27:58,240 --> 00:28:00,559
name that we get from the user and use

738
00:28:00,559 --> 00:28:03,679
it in a parameter in cipher so

739
00:28:03,679 --> 00:28:05,279
it doesn't matter if the user tries to

740
00:28:05,279 --> 00:28:08,000
insert single quote or double quote it

741
00:28:08,000 --> 00:28:10,720
will be treated as a parameter in query

742
00:28:10,720 --> 00:28:13,200
and it will be mostly escaped so double

743
00:28:13,200 --> 00:28:15,520
quote will be treated as if the double

744
00:28:15,520 --> 00:28:18,159
quote yeah the double quote character

745
00:28:18,159 --> 00:28:20,559
and notice the character that terminates

746
00:28:20,559 --> 00:28:21,760
the string

747
00:28:21,760 --> 00:28:23,440
so this is what we should do if we

748
00:28:23,440 --> 00:28:26,559
develop in graph database and want to

749
00:28:26,559 --> 00:28:28,320
avoid injections

750
00:28:28,320 --> 00:28:31,120
and this is not so good and you should

751
00:28:31,120 --> 00:28:33,039
never do this example

752
00:28:33,039 --> 00:28:36,320
of how we actually able to write a query

753
00:28:36,320 --> 00:28:38,640
in such a way that is prone to injection

754
00:28:38,640 --> 00:28:40,880
we have here a second line string

755
00:28:40,880 --> 00:28:43,600
aggregation of the name we just insert

756
00:28:43,600 --> 00:28:45,520
it like that and don't really do any

757
00:28:45,520 --> 00:28:48,080
validation so the second crime spongebob

758
00:28:48,080 --> 00:28:50,080
will be what he shouldn't do i hope

759
00:28:50,080 --> 00:28:52,559
that's clear enough um

760
00:28:52,559 --> 00:28:54,480
so okay we talked about

761
00:28:54,480 --> 00:28:56,159
remediation but

762
00:28:56,159 --> 00:28:58,559
we are pretty realistic today and we

763
00:28:58,559 --> 00:29:01,039
know that there can come a time when a

764
00:29:01,039 --> 00:29:03,440
new developer will arrive and we will

765
00:29:03,440 --> 00:29:05,919
write some vulnerable query

766
00:29:05,919 --> 00:29:08,000
that will be injectable so we still want

767
00:29:08,000 --> 00:29:10,000
to be able to mitigate our attack

768
00:29:10,000 --> 00:29:11,520
surface

769
00:29:11,520 --> 00:29:13,360
what we can actually do right here if we

770
00:29:13,360 --> 00:29:15,840
talk about neo4j we have role-based

771
00:29:15,840 --> 00:29:19,760
access control we have a very large way

772
00:29:19,760 --> 00:29:22,320
to actually define different users roles

773
00:29:22,320 --> 00:29:24,960
and privileges we can just for example

774
00:29:24,960 --> 00:29:27,200
if we have a sensitive database that we

775
00:29:27,200 --> 00:29:29,520
want to read data from and we have other

776
00:29:29,520 --> 00:29:31,440
less sensitive database that we want to

777
00:29:31,440 --> 00:29:33,760
write to we can use two different users

778
00:29:33,760 --> 00:29:36,080
with two different roles one will have

779
00:29:36,080 --> 00:29:38,000
only right permissions on the sensitive

780
00:29:38,000 --> 00:29:40,799
database and second will be read read

781
00:29:40,799 --> 00:29:42,000
and write permissions on the less

782
00:29:42,000 --> 00:29:43,440
sensitive

783
00:29:43,440 --> 00:29:45,840
so that if there will be an injection in

784
00:29:45,840 --> 00:29:47,679
this sensitive database an attacker will

785
00:29:47,679 --> 00:29:49,360
be able only to read and not to write to

786
00:29:49,360 --> 00:29:51,760
it or to update

787
00:29:51,760 --> 00:29:54,240
and you have kind of really nice granola

788
00:29:54,240 --> 00:29:56,880
rolls in neo4j so every row is built on

789
00:29:56,880 --> 00:29:58,960
the top of the previous row with a few

790
00:29:58,960 --> 00:30:01,200
more rows with with a few more

791
00:30:01,200 --> 00:30:02,640
permissions

792
00:30:02,640 --> 00:30:04,640
and you can actually if you want to be

793
00:30:04,640 --> 00:30:06,799
more protected revoke some privileges

794
00:30:06,799 --> 00:30:09,520
from rows for example you can use some

795
00:30:09,520 --> 00:30:12,320
role such as editor and then revoke all

796
00:30:12,320 --> 00:30:14,640
the permissions to execute functions and

797
00:30:14,640 --> 00:30:17,200
procedures on this specific role so just

798
00:30:17,200 --> 00:30:19,279
to harden it

799
00:30:19,279 --> 00:30:21,440
and eventually i really had to add a

800
00:30:21,440 --> 00:30:23,919
point about it because i think it's cool

801
00:30:23,919 --> 00:30:26,320
uh we actually got a suggestion from

802
00:30:26,320 --> 00:30:27,600
neo4j

803
00:30:27,600 --> 00:30:29,760
regarding epoch procedures

804
00:30:29,760 --> 00:30:33,360
from version 4.3 yeah 4.3 we can

805
00:30:33,360 --> 00:30:36,559
actually have a block list of any apoc

806
00:30:36,559 --> 00:30:38,240
procedures we want so we can actually

807
00:30:38,240 --> 00:30:41,360
define in the configuration of neo4j a

808
00:30:41,360 --> 00:30:43,200
block list of

809
00:30:43,200 --> 00:30:46,080
apple cloud and epoc import for example

810
00:30:46,080 --> 00:30:48,159
and if we actually don't use

811
00:30:48,159 --> 00:30:50,720
epoch we can just uninstall it and by

812
00:30:50,720 --> 00:30:54,640
that prevent this kind of scenario

813
00:30:55,120 --> 00:30:57,039
okay so i really want to say something

814
00:30:57,039 --> 00:30:59,279
about reduced graph

815
00:30:59,279 --> 00:31:01,279
so where this graph is an extension to

816
00:31:01,279 --> 00:31:03,679
redis that enables you to write cipher

817
00:31:03,679 --> 00:31:04,960
queries

818
00:31:04,960 --> 00:31:07,039
and i really try to dig into the

819
00:31:07,039 --> 00:31:09,279
documentation to understand what you can

820
00:31:09,279 --> 00:31:11,200
actually do with it if you have an

821
00:31:11,200 --> 00:31:14,320
equivalent of load csv with it i found

822
00:31:14,320 --> 00:31:16,559
out that there are parameterized queries

823
00:31:16,559 --> 00:31:18,320
there is a support in parameters queries

824
00:31:18,320 --> 00:31:20,000
so that's great

825
00:31:20,000 --> 00:31:22,080
and i found that there is support in

826
00:31:22,080 --> 00:31:24,559
some procedures db dot labels it can

827
00:31:24,559 --> 00:31:26,559
help you if you also want to achieve an

828
00:31:26,559 --> 00:31:28,799
injection in this graph

829
00:31:28,799 --> 00:31:31,919
and regarding low csv i didn't find load

830
00:31:31,919 --> 00:31:34,480
csv in redis graph but i didn't find

831
00:31:34,480 --> 00:31:36,880
case when you can use it as a kind of an

832
00:31:36,880 --> 00:31:39,440
if based with substring so you can for

833
00:31:39,440 --> 00:31:42,000
example get the labels using dividend

834
00:31:42,000 --> 00:31:43,919
labels and check whether the first

835
00:31:43,919 --> 00:31:46,960
letter of the first label equals a and

836
00:31:46,960 --> 00:31:48,559
combine this with

837
00:31:48,559 --> 00:31:51,600
or one equals two and see the result or

838
00:31:51,600 --> 00:31:54,399
see an arrow or c and decide whether

839
00:31:54,399 --> 00:31:57,440
regarding the actual response value of

840
00:31:57,440 --> 00:31:58,799
the query

841
00:31:58,799 --> 00:32:01,120
so you can actually achieve this with

842
00:32:01,120 --> 00:32:04,080
redux graph and when i try to dig into

843
00:32:04,080 --> 00:32:06,320
redis graph more deeply and try to

844
00:32:06,320 --> 00:32:08,799
really understand if we have any way to

845
00:32:08,799 --> 00:32:09,600
have

846
00:32:09,600 --> 00:32:12,000
rows and permissions in a similar way of

847
00:32:12,000 --> 00:32:15,279
neo4j i came across this

848
00:32:15,279 --> 00:32:16,880
question

849
00:32:16,880 --> 00:32:19,919
i have no idea who this person is but

850
00:32:19,919 --> 00:32:23,360
from it's from 2021 a person just begged

851
00:32:23,360 --> 00:32:25,679
to have some kind of arbuck like we have

852
00:32:25,679 --> 00:32:26,960
in neo4j

853
00:32:26,960 --> 00:32:28,640
and i really tried to understand whether

854
00:32:28,640 --> 00:32:30,480
or not this was answered because i

855
00:32:30,480 --> 00:32:32,880
didn't find any reference of

856
00:32:32,880 --> 00:32:34,799
having row-based access control in

857
00:32:34,799 --> 00:32:37,279
radius graph so i didn't find any maybe

858
00:32:37,279 --> 00:32:39,519
there is but i really didn't find any

859
00:32:39,519 --> 00:32:41,519
access control that you have in

860
00:32:41,519 --> 00:32:44,399
in this graph

861
00:32:45,039 --> 00:32:47,440
okay so we talked a lot about

862
00:32:47,440 --> 00:32:50,960
injections cipher graph databases dna of

863
00:32:50,960 --> 00:32:54,000
service ssrf reduced graph also and

864
00:32:54,000 --> 00:32:56,399
mitigation and remediation

865
00:32:56,399 --> 00:32:58,960
but i really want you to have value out

866
00:32:58,960 --> 00:33:01,840
of this talk as i said and not only see

867
00:33:01,840 --> 00:33:04,880
those i hope nice slides

868
00:33:04,880 --> 00:33:07,200
i really want you to understand how the

869
00:33:07,200 --> 00:33:09,600
injections work so what i did i created

870
00:33:09,600 --> 00:33:12,480
a playground in cypher i will put also i

871
00:33:12,480 --> 00:33:15,279
yeah i put a qr code at the end so you

872
00:33:15,279 --> 00:33:17,519
don't really need to um to type it right

873
00:33:17,519 --> 00:33:19,760
now but i really want you to actually

874
00:33:19,760 --> 00:33:22,640
clone it it is all docker composerized

875
00:33:22,640 --> 00:33:25,760
and it just starts up a neo4j database

876
00:33:25,760 --> 00:33:28,320
with data and redis graph and has a nice

877
00:33:28,320 --> 00:33:31,039
swagger and postman collections

878
00:33:31,039 --> 00:33:33,600
and just play it try to understand how

879
00:33:33,600 --> 00:33:34,640
it works

880
00:33:34,640 --> 00:33:37,679
and then either fix existing injections

881
00:33:37,679 --> 00:33:40,320
if you're some security engineer or

882
00:33:40,320 --> 00:33:41,360
research

883
00:33:41,360 --> 00:33:43,919
or just start bug bounty

884
00:33:43,919 --> 00:33:45,919
so you can actually hunt for bugs in

885
00:33:45,919 --> 00:33:49,039
cypher i didn't find any bug bounty

886
00:33:49,039 --> 00:33:51,679
write-up about cipher and i hope that

887
00:33:51,679 --> 00:33:53,760
like half a month from now it will be

888
00:33:53,760 --> 00:33:55,360
much different it would be really

889
00:33:55,360 --> 00:33:58,320
awesome it if it would be that different

890
00:33:58,320 --> 00:34:00,320
and eventually you can just use the

891
00:34:00,320 --> 00:34:02,240
remediation some mitigation that we

892
00:34:02,240 --> 00:34:04,080
talked about if you just some security

893
00:34:04,080 --> 00:34:06,480
engineer or you can just profit from

894
00:34:06,480 --> 00:34:08,399
learning and understanding about another

895
00:34:08,399 --> 00:34:11,199
thing that maybe you didn't know before

896
00:34:11,199 --> 00:34:13,199
also if you're just security enthusiasts

897
00:34:13,199 --> 00:34:15,520
and wants to do this um safer playground

898
00:34:15,520 --> 00:34:18,639
though also go ahead

899
00:34:18,639 --> 00:34:20,960
i want to to give credit to a person

900
00:34:20,960 --> 00:34:23,040
that i i found this blog like one year

901
00:34:23,040 --> 00:34:26,079
ago and this is the part of the low csv

902
00:34:26,079 --> 00:34:28,320
the cool trick and this person also

903
00:34:28,320 --> 00:34:31,040
wrote um kind of like the basic

904
00:34:31,040 --> 00:34:33,440
um github project that i based my

905
00:34:33,440 --> 00:34:37,599
playground on so thank you for that

906
00:34:37,839 --> 00:34:40,560
and that's all so

907
00:34:40,560 --> 00:34:43,879
thank you everyone

908
00:34:45,900 --> 00:34:49,030
[Applause]

909
00:34:49,359 --> 00:34:51,199
thank you so much i would like to say

910
00:34:51,199 --> 00:34:52,879
that yeah this qr code it's obvious but

911
00:34:52,879 --> 00:34:54,800
i still want to say it this qr code

912
00:34:54,800 --> 00:34:57,599
actually is the yeah cypher playground

913
00:34:57,599 --> 00:35:00,160
at the bottom please feel free to talk

914
00:35:00,160 --> 00:35:01,839
with me to tell me what you think tell

915
00:35:01,839 --> 00:35:03,359
me about it you tell me about the

916
00:35:03,359 --> 00:35:05,599
playground and it would be awesome if we

917
00:35:05,599 --> 00:35:08,400
just find more articles and write-ups up

918
00:35:08,400 --> 00:35:10,400
from now about cipher so thank you

919
00:35:10,400 --> 00:35:11,370
everyone

920
00:35:11,370 --> 00:35:14,000
[Applause]

921
00:35:14,000 --> 00:35:15,320
thank you

922
00:35:15,320 --> 00:35:15,840
[Applause]

923
00:35:15,840 --> 00:35:21,980
[Music]

924
00:35:21,980 --> 00:35:25,170
[Applause]

