1
00:00:00,000 --> 00:00:04,799
<font color="#CCCCCC">all right hey guys thanks for my talk</font>

2
00:00:02,240 --> 00:00:06,629
prefixing this with this<font color="#E5E5E5"> my first talk</font>

3
00:00:04,799 --> 00:00:12,990
ever a security conference and my first

4
00:00:06,629 --> 00:00:15,480
time<font color="#E5E5E5"> at</font><font color="#CCCCCC"> be slots Las Vegas</font><font color="#E5E5E5"> cool</font><font color="#CCCCCC"> alright</font>

5
00:00:12,990 --> 00:00:17,130
so<font color="#E5E5E5"> welcome to who made this a beginner's</font>

6
00:00:15,480 --> 00:00:19,949
guide to malware provenance based on

7
00:00:17,130 --> 00:00:21,720
compiler type<font color="#E5E5E5"> yeah so personal anecdote</font>

8
00:00:19,949 --> 00:00:23,910
when I first started as an intern<font color="#CCCCCC"> end</font>

9
00:00:21,720 --> 00:00:26,490
<font color="#E5E5E5">game</font><font color="#CCCCCC"> we had a lot of false positives and</font>

10
00:00:23,910 --> 00:00:27,570
<font color="#E5E5E5">false negatives for essentially malware</font>

11
00:00:26,490 --> 00:00:28,799
<font color="#E5E5E5">that we had to look at way to look at a</font>

12
00:00:27,570 --> 00:00:30,480
lot<font color="#CCCCCC"> of them and I got a lot of</font>

13
00:00:28,800 --> 00:00:31,679
<font color="#E5E5E5">experience looking at</font><font color="#CCCCCC"> these things</font><font color="#E5E5E5"> and</font>

14
00:00:30,480 --> 00:00:34,800
<font color="#CCCCCC">this</font><font color="#E5E5E5"> kind of some knowledge</font><font color="#CCCCCC"> that I</font>

15
00:00:31,679 --> 00:00:36,449
gained while doing<font color="#CCCCCC"> that and I really</font>

16
00:00:34,800 --> 00:00:39,149
wanted to<font color="#E5E5E5"> do it faster let's have this</font>

17
00:00:36,450 --> 00:00:41,340
<font color="#E5E5E5">thing click</font><font color="#CCCCCC"> boom ok cool</font><font color="#E5E5E5"> so first off</font>

18
00:00:39,149 --> 00:00:43,140
Who<font color="#CCCCCC"> am I</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> why</font><font color="#E5E5E5"> am I</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> to you</font><font color="#CCCCCC"> I'm</font>

19
00:00:41,340 --> 00:00:45,000
<font color="#CCCCCC">Lucian Brule I really like computers</font><font color="#E5E5E5"> and</font>

20
00:00:43,140 --> 00:00:47,910
stuff<font color="#CCCCCC"> and I obviously</font><font color="#E5E5E5"> have no idea how</font>

21
00:00:45,000 --> 00:00:51,180
to<font color="#E5E5E5"> talk to people right but more</font>

22
00:00:47,910 --> 00:00:54,898
<font color="#E5E5E5">importantly I'm a senior RPI up in</font>

23
00:00:51,180 --> 00:00:57,300
<font color="#CCCCCC">upstate New York</font><font color="#E5E5E5"> click there we go</font><font color="#CCCCCC"> I</font>

24
00:00:54,899 --> 00:00:59,760
<font color="#E5E5E5">look</font><font color="#CCCCCC"> like that</font><font color="#E5E5E5"> I'm our research</font><font color="#CCCCCC"> Internet</font>

25
00:00:57,300 --> 00:01:01,949
end<font color="#E5E5E5"> game I play CTF and go to hackathons</font>

26
00:00:59,760 --> 00:01:03,180
<font color="#CCCCCC">I mean I'm interested in durability</font>

27
00:01:01,949 --> 00:01:05,429
research<font color="#CCCCCC"> malware analysis especially</font>

28
00:01:03,180 --> 00:01:06,630
<font color="#E5E5E5">reverse engineering and I like</font>

29
00:01:05,430 --> 00:01:09,570
entrepreneurship that's<font color="#E5E5E5"> kind of my side</font>

30
00:01:06,630 --> 00:01:11,908
thing now also<font color="#CCCCCC"> whoo but not me</font><font color="#E5E5E5"> is just</font>

31
00:01:09,570 --> 00:01:13,320
sensually my affiliations<font color="#CCCCCC"> oh so we have</font>

32
00:01:11,909 --> 00:01:14,610
<font color="#E5E5E5">n game which is hiring and</font><font color="#CCCCCC"> they're</font>

33
00:01:13,320 --> 00:01:16,229
outside<font color="#CCCCCC"> like literally right outside</font>

34
00:01:14,610 --> 00:01:18,119
<font color="#E5E5E5">this room so if you want a job and you</font>

35
00:01:16,229 --> 00:01:21,900
think this<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> is cool I'd go talk to</font>

36
00:01:18,119 --> 00:01:23,549
them outside also RPI SEC is

37
00:01:21,900 --> 00:01:25,140
Rensselaer's<font color="#E5E5E5"> capture the flag team</font>

38
00:01:23,549 --> 00:01:27,390
<font color="#E5E5E5">they're actually playing at DEFCON which</font>

39
00:01:25,140 --> 00:01:29,509
is really cool<font color="#E5E5E5"> so if you're DEFCON go</font>

40
00:01:27,390 --> 00:01:32,189
cheer them on on the floor<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> awesome</font>

41
00:01:29,509 --> 00:01:33,720
<font color="#CCCCCC">alright so motivation like why are we</font>

42
00:01:32,189 --> 00:01:34,979
gonna<font color="#E5E5E5"> learn about my lower</font><font color="#CCCCCC"> provenance</font>

43
00:01:33,720 --> 00:01:38,759
right why is that important like why are

44
00:01:34,979 --> 00:01:40,619
we<font color="#CCCCCC"> here</font><font color="#E5E5E5"> click there we go</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> I'm</font>

45
00:01:38,759 --> 00:01:43,200
gonna<font color="#E5E5E5"> read this through so we typically</font>

46
00:01:40,619 --> 00:01:45,000
classify malware by behavior<font color="#E5E5E5"> but we need</font>

47
00:01:43,200 --> 00:01:47,250
static<font color="#E5E5E5"> analysis</font><font color="#CCCCCC"> and instrumentation to</font>

48
00:01:45,000 --> 00:01:48,990
understand samples and if we know a

49
00:01:47,250 --> 00:01:50,490
malware his composure<font color="#E5E5E5"> and its origins we</font>

50
00:01:48,990 --> 00:01:52,289
can reverse it faster<font color="#E5E5E5"> and if we can</font>

51
00:01:50,490 --> 00:01:53,939
<font color="#E5E5E5">reverse it faster</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> process more</font>

52
00:01:52,290 --> 00:01:56,700
samples<font color="#E5E5E5"> and if we can process more</font>

53
00:01:53,939 --> 00:01:58,289
samples<font color="#E5E5E5"> we learn more we get better and</font>

54
00:01:56,700 --> 00:01:59,759
then we go home earlier<font color="#CCCCCC"> Sophie a lot of</font>

55
00:01:58,290 --> 00:02:01,020
samples we<font color="#CCCCCC"> can like get through all of</font>

56
00:01:59,759 --> 00:02:02,180
them<font color="#CCCCCC"> really quick if we're really</font><font color="#E5E5E5"> good</font>

57
00:02:01,020 --> 00:02:04,079
right

58
00:02:02,180 --> 00:02:05,430
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> it's gonna</font><font color="#CCCCCC"> preface this with</font>

59
00:02:04,079 --> 00:02:07,020
<font color="#CCCCCC">some lingo</font>

60
00:02:05,430 --> 00:02:08,220
when I say<font color="#E5E5E5"> sample that essentially means</font>

61
00:02:07,020 --> 00:02:09,929
like an executable like a Windows

62
00:02:08,220 --> 00:02:11,270
executable right that's analogous to

63
00:02:09,929 --> 00:02:13,340
like a program that's<font color="#CCCCCC"> the thing</font>

64
00:02:11,270 --> 00:02:14,660
under test that<font color="#CCCCCC"> we're looking</font><font color="#E5E5E5"> at an FP</font>

65
00:02:13,340 --> 00:02:16,010
or an FN if I<font color="#CCCCCC"> talked about</font><font color="#E5E5E5"> that during</font>

66
00:02:14,660 --> 00:02:17,750
<font color="#E5E5E5">the talk that's a false positive or</font>

67
00:02:16,010 --> 00:02:19,429
negative so essentially we're gonna test

68
00:02:17,750 --> 00:02:21,560
<font color="#CCCCCC">something</font><font color="#E5E5E5"> and see</font><font color="#CCCCCC"> if it comes</font><font color="#E5E5E5"> out to</font><font color="#CCCCCC"> be</font>

69
00:02:19,430 --> 00:02:23,570
our concluded thing so if it's a malware

70
00:02:21,560 --> 00:02:26,210
<font color="#E5E5E5">and we say it's</font><font color="#CCCCCC"> not malware that's</font>

71
00:02:23,570 --> 00:02:29,510
that's bad<font color="#CCCCCC"> that'd</font><font color="#E5E5E5"> be that's a false</font>

72
00:02:26,210 --> 00:02:32,560
negative<font color="#E5E5E5"> right so it's not</font><font color="#CCCCCC"> mount</font><font color="#E5E5E5"> false</font>

73
00:02:29,510 --> 00:02:35,840
positive yeah there we go<font color="#E5E5E5"> okay nerves</font>

74
00:02:32,560 --> 00:02:38,450
<font color="#CCCCCC">TLS thread-local storage that</font><font color="#E5E5E5"> is this</font>

75
00:02:35,840 --> 00:02:39,950
thing that<font color="#E5E5E5"> Windows and Linux do and</font>

76
00:02:38,450 --> 00:02:41,750
<font color="#E5E5E5">actually it's a cross-platform thing</font>

77
00:02:39,950 --> 00:02:43,579
<font color="#E5E5E5">implement the different ways that</font>

78
00:02:41,750 --> 00:02:45,230
essentially let you run some kind<font color="#E5E5E5"> of</font>

79
00:02:43,580 --> 00:02:47,840
code at a given point in<font color="#E5E5E5"> a programs</font>

80
00:02:45,230 --> 00:02:50,420
lifetime compilers<font color="#E5E5E5"> are what translates</font>

81
00:02:47,840 --> 00:02:52,910
source code into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> actual binary</font><font color="#E5E5E5"> or</font>

82
00:02:50,420 --> 00:02:55,179
the sample<font color="#CCCCCC"> shellcode is an independent</font>

83
00:02:52,910 --> 00:02:57,980
program<font color="#E5E5E5"> that can live inside of another</font>

84
00:02:55,180 --> 00:02:59,600
sample so it lives<font color="#E5E5E5"> off the land so to</font>

85
00:02:57,980 --> 00:03:01,579
speak and<font color="#E5E5E5"> then bootstrap or</font>

86
00:02:59,600 --> 00:03:04,700
initialization is essentially the

87
00:03:01,580 --> 00:03:06,650
startup routine<font color="#E5E5E5"> of any program it's not</font>

88
00:03:04,700 --> 00:03:07,910
like the web CSS framework<font color="#E5E5E5"> it's it's</font>

89
00:03:06,650 --> 00:03:10,760
like<font color="#E5E5E5"> the thing that starts up for your</font>

90
00:03:07,910 --> 00:03:12,620
program<font color="#CCCCCC"> cool all right</font><font color="#E5E5E5"> so our goal is</font>

91
00:03:10,760 --> 00:03:15,140
we're<font color="#E5E5E5"> gonna cover key parts of a Windows</font>

92
00:03:12,620 --> 00:03:17,630
binary and we're to<font color="#E5E5E5"> know how compiler</font>

93
00:03:15,140 --> 00:03:19,940
provenance<font color="#E5E5E5"> can give us expectations that</font>

94
00:03:17,630 --> 00:03:21,200
we can use<font color="#E5E5E5"> to reverse it and how to roll</font>

95
00:03:19,940 --> 00:03:23,720
<font color="#CCCCCC">others those expectations</font><font color="#E5E5E5"> to actually</font>

96
00:03:21,200 --> 00:03:26,570
reverse it faster<font color="#E5E5E5"> and better hopefully</font>

97
00:03:23,720 --> 00:03:28,370
if you're<font color="#E5E5E5"> in your kind so what a</font>

98
00:03:26,570 --> 00:03:29,930
compiler is like I just<font color="#CCCCCC"> said</font><font color="#E5E5E5"> a program</font>

99
00:03:28,370 --> 00:03:32,060
that converts<font color="#E5E5E5"> instructions into machine</font>

100
00:03:29,930 --> 00:03:33,200
code or<font color="#CCCCCC"> a little lower level form so</font>

101
00:03:32,060 --> 00:03:35,000
they can be read<font color="#E5E5E5"> and executed by a</font>

102
00:03:33,200 --> 00:03:36,679
computer<font color="#E5E5E5"> and then provenance is</font>

103
00:03:35,000 --> 00:03:41,120
<font color="#E5E5E5">something's origin</font><font color="#CCCCCC"> essentially where it</font>

104
00:03:36,680 --> 00:03:44,660
came from<font color="#E5E5E5"> and what made it</font><font color="#CCCCCC"> alright yeah</font>

105
00:03:41,120 --> 00:03:47,450
so problem<font color="#CCCCCC"> an existing research this is</font>

106
00:03:44,660 --> 00:03:48,770
a pretty big problem<font color="#E5E5E5"> space so we're</font>

107
00:03:47,450 --> 00:03:52,790
gonna<font color="#E5E5E5"> talk about like classification of</font>

108
00:03:48,770 --> 00:03:56,630
malware<font color="#CCCCCC"> in traditional some origins</font><font color="#E5E5E5"> so a</font>

109
00:03:52,790 --> 00:03:58,700
<font color="#E5E5E5">quote is</font><font color="#CCCCCC"> by this professor Upchurch at</font>

110
00:03:56,630 --> 00:04:00,799
the universe the Air<font color="#E5E5E5"> Force Academy</font><font color="#CCCCCC"> in</font>

111
00:03:58,700 --> 00:04:02,450
<font color="#CCCCCC">Colorado Springs</font><font color="#E5E5E5"> he said an</font><font color="#CCCCCC"> anteater and</font>

112
00:04:00,800 --> 00:04:04,040
<font color="#CCCCCC">many birds insects reptiles and</font>

113
00:04:02,450 --> 00:04:05,780
amphibians are related<font color="#CCCCCC"> because they all</font>

114
00:04:04,040 --> 00:04:07,340
<font color="#CCCCCC">consume ants now that's essentially how</font>

115
00:04:05,780 --> 00:04:08,510
<font color="#CCCCCC">we would classify</font><font color="#E5E5E5"> malware today it's</font>

116
00:04:07,340 --> 00:04:11,360
they behave in a certain way

117
00:04:08,510 --> 00:04:12,500
ergo they all are the<font color="#CCCCCC"> same thing</font><font color="#E5E5E5"> but we</font>

118
00:04:11,360 --> 00:04:15,290
know they have some kind<font color="#CCCCCC"> of deeper</font>

119
00:04:12,500 --> 00:04:17,120
composure just<font color="#CCCCCC"> like animals right I'm</font>

120
00:04:15,290 --> 00:04:19,370
actually sad my chip isn't<font color="#E5E5E5"> playing but</font>

121
00:04:17,120 --> 00:04:20,630
that's<font color="#E5E5E5"> essentially a would</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> be Donald</font>

122
00:04:19,370 --> 00:04:22,040
<font color="#E5E5E5">Duck with some other ducks and they all</font>

123
00:04:20,630 --> 00:04:23,210
look<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> therefore</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> this</font>

124
00:04:22,040 --> 00:04:23,639
they're all<font color="#E5E5E5"> ducks right because they</font>

125
00:04:23,210 --> 00:04:28,049
look the<font color="#E5E5E5"> same</font>

126
00:04:23,639 --> 00:04:29,610
false<font color="#CCCCCC"> so that's I just said and</font><font color="#E5E5E5"> if you</font>

127
00:04:28,050 --> 00:04:31,229
go<font color="#CCCCCC"> over the</font><font color="#E5E5E5"> duct test that's essentially</font>

128
00:04:29,610 --> 00:04:32,639
something looks like<font color="#CCCCCC"> a duck it walks</font>

129
00:04:31,229 --> 00:04:35,068
<font color="#E5E5E5">like a duck it talks like a</font><font color="#CCCCCC"> duck it must</font>

130
00:04:32,639 --> 00:04:36,270
be a duck<font color="#CCCCCC"> and in biology we know that</font>

131
00:04:35,069 --> 00:04:38,310
<font color="#E5E5E5">things have bones right we know that</font>

132
00:04:36,270 --> 00:04:40,710
like wolves are related to whales

133
00:04:38,310 --> 00:04:42,990
because<font color="#E5E5E5"> they have some kind of like</font>

134
00:04:40,710 --> 00:04:44,188
common<font color="#E5E5E5"> ancestor way back when</font><font color="#CCCCCC"> but whales</font>

135
00:04:42,990 --> 00:04:45,870
<font color="#E5E5E5">but in the water but they still have</font>

136
00:04:44,189 --> 00:04:49,289
like flippers and little toes that like

137
00:04:45,870 --> 00:04:51,419
wolves have right now and<font color="#CCCCCC"> Malware if we</font>

138
00:04:49,289 --> 00:04:52,620
were to look<font color="#E5E5E5"> at its composure and</font>

139
00:04:51,419 --> 00:04:54,750
certain internal composure<font color="#E5E5E5"> but look at</font>

140
00:04:52,620 --> 00:04:56,099
things like the<font color="#E5E5E5"> libraries it used</font><font color="#CCCCCC"> or</font>

141
00:04:54,750 --> 00:04:57,090
maybe even the compiler<font color="#CCCCCC"> that generated</font>

142
00:04:56,099 --> 00:04:59,400
the malware<font color="#E5E5E5"> and that's essentially</font><font color="#CCCCCC"> like</font>

143
00:04:57,090 --> 00:05:03,299
<font color="#E5E5E5">it's it's actual composure not just how</font>

144
00:04:59,400 --> 00:05:04,948
<font color="#E5E5E5">it behaves</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> in terms of in industry</font>

145
00:05:03,300 --> 00:05:07,529
and<font color="#E5E5E5"> how we classify malware we use terms</font>

146
00:05:04,949 --> 00:05:10,169
like spyware like a virus a worm or

147
00:05:07,529 --> 00:05:13,080
trojan and<font color="#CCCCCC"> that's those are</font><font color="#E5E5E5"> all behavior</font>

148
00:05:10,169 --> 00:05:15,448
based things for example<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> open up</font>

149
00:05:13,080 --> 00:05:18,090
a virus<font color="#CCCCCC"> total</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> like a gigantic</font>

150
00:05:15,449 --> 00:05:19,919
database<font color="#E5E5E5"> of like a bunch of viruses</font><font color="#CCCCCC"> and</font>

151
00:05:18,090 --> 00:05:22,919
malware and<font color="#E5E5E5"> benign</font><font color="#CCCCCC"> where like</font><font color="#E5E5E5"> like</font>

152
00:05:19,919 --> 00:05:24,330
<font color="#E5E5E5">normal software</font><font color="#CCCCCC"> you can see how all of</font>

153
00:05:22,919 --> 00:05:26,849
the antivirus companies<font color="#E5E5E5"> actually</font>

154
00:05:24,330 --> 00:05:28,080
classify the malware<font color="#E5E5E5"> and they actually</font>

155
00:05:26,849 --> 00:05:29,400
kind<font color="#E5E5E5"> of differ some of them actually do</font>

156
00:05:28,080 --> 00:05:31,289
<font color="#E5E5E5">look at composure and some of them look</font>

157
00:05:29,400 --> 00:05:32,638
at behavior so for example you'll<font color="#CCCCCC"> see on</font>

158
00:05:31,289 --> 00:05:35,250
the<font color="#E5E5E5"> right</font><font color="#CCCCCC"> hand column</font>

159
00:05:32,639 --> 00:05:37,650
you've got heuristic<font color="#E5E5E5"> agent malware but</font>

160
00:05:35,250 --> 00:05:39,180
<font color="#E5E5E5">then some of them are actually saying</font>

161
00:05:37,650 --> 00:05:41,789
that oh hey it's it's a<font color="#E5E5E5"> trojan it's</font>

162
00:05:39,180 --> 00:05:42,659
ransomware and<font color="#E5E5E5"> it's petia right and then</font>

163
00:05:41,789 --> 00:05:44,159
if you want to<font color="#E5E5E5"> go look at this file</font>

164
00:05:42,659 --> 00:05:45,960
<font color="#CCCCCC">yourself we could probably go check</font><font color="#E5E5E5"> that</font>

165
00:05:44,159 --> 00:05:49,349
<font color="#E5E5E5">out the hash below after</font><font color="#CCCCCC"> the talk the</font>

166
00:05:45,960 --> 00:05:52,080
slides will be online<font color="#E5E5E5"> all right so</font>

167
00:05:49,349 --> 00:05:54,330
existing<font color="#E5E5E5"> methods to determine</font><font color="#CCCCCC"> malware's</font>

168
00:05:52,080 --> 00:05:57,029
behavior and<font color="#CCCCCC"> it's composure right</font>

169
00:05:54,330 --> 00:05:59,008
<font color="#E5E5E5">especially</font><font color="#CCCCCC"> composure so we can dig into</font>

170
00:05:57,029 --> 00:06:00,389
the actual<font color="#E5E5E5"> binary and look at the the</font>

171
00:05:59,009 --> 00:06:02,129
hex<font color="#E5E5E5"> and we can manually reverse it and</font>

172
00:06:00,389 --> 00:06:05,009
that's manual verification<font color="#E5E5E5"> we can use</font>

173
00:06:02,129 --> 00:06:07,139
some kind<font color="#CCCCCC"> of a little</font><font color="#E5E5E5"> bit more advanced</font>

174
00:06:05,009 --> 00:06:09,270
methods<font color="#E5E5E5"> like hashing which we'll get</font>

175
00:06:07,139 --> 00:06:11,339
<font color="#CCCCCC">into and</font><font color="#E5E5E5"> then we can also use like</font>

176
00:06:09,270 --> 00:06:14,128
machine learning<font color="#CCCCCC"> ai and</font><font color="#E5E5E5"> statistics to</font>

177
00:06:11,339 --> 00:06:15,779
kind of immediately tell us like what

178
00:06:14,129 --> 00:06:18,930
malware is composed of<font color="#E5E5E5"> or whatever and</font>

179
00:06:15,779 --> 00:06:21,210
what it does<font color="#E5E5E5"> for two different</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> so</font>

180
00:06:18,930 --> 00:06:22,889
hashing<font color="#E5E5E5"> we have a couple types we have</font>

181
00:06:21,210 --> 00:06:24,659
cryptographic hashing right which is

182
00:06:22,889 --> 00:06:27,259
like you see<font color="#CCCCCC"> like md5 sum or like a</font>

183
00:06:24,659 --> 00:06:30,330
sha-512 or a sha-1<font color="#E5E5E5"> that's kind of like</font>

184
00:06:27,259 --> 00:06:31,589
verifying<font color="#CCCCCC"> that if you hash one file it's</font>

185
00:06:30,330 --> 00:06:33,289
<font color="#CCCCCC">going to be exactly similar to another</font>

186
00:06:31,589 --> 00:06:35,180
<font color="#E5E5E5">file of</font><font color="#CCCCCC"> its hash</font>

187
00:06:33,289 --> 00:06:36,710
<font color="#CCCCCC">but then you have things</font><font color="#E5E5E5"> like what if I</font>

188
00:06:35,180 --> 00:06:38,059
<font color="#CCCCCC">don't want</font><font color="#E5E5E5"> to test similarity between</font>

189
00:06:36,710 --> 00:06:39,799
two files right I<font color="#CCCCCC"> don't want it</font><font color="#E5E5E5"> like a</font>

190
00:06:38,059 --> 00:06:41,869
true or<font color="#E5E5E5"> false is this the exact same</font>

191
00:06:39,800 --> 00:06:44,210
file<font color="#CCCCCC"> then you get</font><font color="#E5E5E5"> into something called</font>

192
00:06:41,869 --> 00:06:47,689
fuzzy hashing which the current

193
00:06:44,210 --> 00:06:49,489
<font color="#CCCCCC">implementation as SS deep</font><font color="#E5E5E5"> and that's</font>

194
00:06:47,689 --> 00:06:51,589
essentially like<font color="#E5E5E5"> a hash that's within a</font>

195
00:06:49,490 --> 00:06:53,149
<font color="#CCCCCC">given distance from another</font><font color="#E5E5E5"> hash will be</font>

196
00:06:51,589 --> 00:06:55,219
similar and you can infer some degree of

197
00:06:53,149 --> 00:06:58,039
<font color="#E5E5E5">similarity from the hash and then you</font>

198
00:06:55,219 --> 00:07:00,740
have import hashing which tells you<font color="#CCCCCC"> it's</font>

199
00:06:58,039 --> 00:07:02,899
pretty<font color="#E5E5E5"> much just a hash of everything a</font>

200
00:07:00,740 --> 00:07:04,399
program or a piece<font color="#E5E5E5"> of malware it uses</font>

201
00:07:02,899 --> 00:07:06,379
<font color="#CCCCCC">its import table like what it what</font>

202
00:07:04,399 --> 00:07:07,789
libraries it uses and that<font color="#E5E5E5"> tells you</font>

203
00:07:06,379 --> 00:07:09,139
<font color="#CCCCCC">what it does</font><font color="#E5E5E5"> because if you know that</font>

204
00:07:07,789 --> 00:07:10,580
it's importing<font color="#E5E5E5"> things for like</font>

205
00:07:09,139 --> 00:07:13,899
cryptography<font color="#CCCCCC"> or</font><font color="#E5E5E5"> it's importing things</font>

206
00:07:10,580 --> 00:07:15,938
<font color="#CCCCCC">for network requests or file access or</font>

207
00:07:13,899 --> 00:07:22,580
anything like<font color="#E5E5E5"> that</font>

208
00:07:15,939 --> 00:07:24,349
<font color="#E5E5E5">malware with or oh gee we're spoiled it</font>

209
00:07:22,580 --> 00:07:27,219
we spelled<font color="#E5E5E5"> the whole talk</font><font color="#CCCCCC"> whoo guys you</font>

210
00:07:24,349 --> 00:07:29,959
can go home<font color="#E5E5E5"> now it's cool it's done</font><font color="#CCCCCC"> I</font>

211
00:07:27,219 --> 00:07:31,069
was like<font color="#CCCCCC"> okay import hashing</font><font color="#E5E5E5"> things with</font>

212
00:07:29,959 --> 00:07:33,740
similar imports things that use the

213
00:07:31,069 --> 00:07:36,469
similar libraries<font color="#CCCCCC"> will all essentially</font>

214
00:07:33,740 --> 00:07:38,180
have the same<font color="#CCCCCC"> impact and that was</font>

215
00:07:36,469 --> 00:07:41,360
<font color="#CCCCCC">actually a</font><font color="#E5E5E5"> jiff it was really great it</font>

216
00:07:38,180 --> 00:07:43,129
was a hash<font color="#E5E5E5"> brown with like the the math</font>

217
00:07:41,360 --> 00:07:44,269
lady meme over it because<font color="#E5E5E5"> it's hashing</font>

218
00:07:43,129 --> 00:07:52,059
right so it<font color="#E5E5E5"> took a lot of math and it's</font>

219
00:07:44,269 --> 00:07:56,389
crazy<font color="#CCCCCC"> oh this thing is not doing too hot</font>

220
00:07:52,059 --> 00:07:58,430
<font color="#E5E5E5">or maybe I'm</font><font color="#CCCCCC"> just nervous</font><font color="#E5E5E5"> all right</font>

221
00:07:56,389 --> 00:08:00,349
<font color="#E5E5E5">so current research in AI ml in</font>

222
00:07:58,430 --> 00:08:02,719
statistics to actually get you the

223
00:08:00,349 --> 00:08:06,529
<font color="#E5E5E5">behavior</font><font color="#CCCCCC"> of malware it's a lot of</font><font color="#E5E5E5"> what</font>

224
00:08:02,719 --> 00:08:08,539
<font color="#E5E5E5">the current AI companies do essentially</font>

225
00:08:06,529 --> 00:08:10,099
<font color="#E5E5E5">use some there's</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> research into</font>

226
00:08:08,539 --> 00:08:12,318
natural language processing techniques

227
00:08:10,099 --> 00:08:14,869
to infer<font color="#E5E5E5"> the composure of malware and</font>

228
00:08:12,319 --> 00:08:16,459
<font color="#CCCCCC">there's also</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> like looking</font>

229
00:08:14,869 --> 00:08:17,889
<font color="#E5E5E5">at by entropy and just using general</font>

230
00:08:16,459 --> 00:08:20,300
<font color="#E5E5E5">statistical statistical methods to</font>

231
00:08:17,889 --> 00:08:21,979
<font color="#E5E5E5">determine what a given piece of malware</font>

232
00:08:20,300 --> 00:08:23,089
does and<font color="#E5E5E5"> that's a whole</font><font color="#CCCCCC"> lot of math that</font>

233
00:08:21,979 --> 00:08:24,139
I<font color="#E5E5E5"> haven't gotten</font><font color="#CCCCCC"> into yet but I've read</font>

234
00:08:23,089 --> 00:08:26,119
a lot<font color="#E5E5E5"> of papers on I think it's</font>

235
00:08:24,139 --> 00:08:27,889
interesting but<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> necessarily</font><font color="#CCCCCC"> for</font>

236
00:08:26,119 --> 00:08:29,629
a beginner<font color="#CCCCCC"> to look at know if</font><font color="#E5E5E5"> they could</font>

237
00:08:27,889 --> 00:08:30,709
<font color="#E5E5E5">necessarily would be useful to</font><font color="#CCCCCC"> look</font><font color="#E5E5E5"> at</font>

238
00:08:29,629 --> 00:08:32,750
that so we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> start in like a</font>

239
00:08:30,709 --> 00:08:34,759
happy middle ground<font color="#CCCCCC"> I think and then we</font>

240
00:08:32,750 --> 00:08:38,240
got the brain meme<font color="#E5E5E5"> because this is</font><font color="#CCCCCC"> high</font>

241
00:08:34,759 --> 00:08:40,579
<font color="#CCCCCC">level</font><font color="#E5E5E5"> stuff right all right</font><font color="#CCCCCC"> fun facts</font>

242
00:08:38,240 --> 00:08:41,719
<font color="#CCCCCC">and figures aka the threat landscape and</font>

243
00:08:40,578 --> 00:08:43,429
what compilers are<font color="#E5E5E5"> going to be looking</font>

244
00:08:41,719 --> 00:08:44,930
at<font color="#E5E5E5"> to determine where samples are coming</font>

245
00:08:43,429 --> 00:08:46,640
from

246
00:08:44,930 --> 00:08:48,770
the majority of<font color="#CCCCCC"> windows compiler market</font>

247
00:08:46,640 --> 00:08:52,370
share<font color="#E5E5E5"> it's a vast majority</font><font color="#CCCCCC"> as visual</font><font color="#E5E5E5"> CDA</font>

248
00:08:48,770 --> 00:08:53,960
like any new like<font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> binary has</font>

249
00:08:52,370 --> 00:08:55,790
compiled like in the last couple<font color="#CCCCCC"> years</font>

250
00:08:53,960 --> 00:08:58,370
<font color="#E5E5E5">it's going to be Visual Studio</font><font color="#CCCCCC"> you see a</font>

251
00:08:55,790 --> 00:09:00,740
lot of<font color="#CCCCCC"> Delfy</font><font color="#E5E5E5"> and Borland after that and</font>

252
00:08:58,370 --> 00:09:02,960
then the the<font color="#E5E5E5"> niche but still significant</font>

253
00:09:00,740 --> 00:09:05,570
market is mingw which is the<font color="#CCCCCC"> windows</font>

254
00:09:02,960 --> 00:09:08,900
implementation of GCC like the gnu

255
00:09:05,570 --> 00:09:11,240
compiler suite<font color="#CCCCCC"> also of interest that we</font>

256
00:09:08,900 --> 00:09:12,170
see samples in would<font color="#CCCCCC"> be like the intel c</font>

257
00:09:11,240 --> 00:09:14,570
compiler which is more<font color="#E5E5E5"> of</font><font color="#CCCCCC"> like a</font>

258
00:09:12,170 --> 00:09:16,040
scientific<font color="#E5E5E5"> compiler for optimization and</font>

259
00:09:14,570 --> 00:09:18,170
<font color="#E5E5E5">the tiny c compiler which is actually</font>

260
00:09:16,040 --> 00:09:20,360
really cool<font color="#CCCCCC"> if you want to go and</font>

261
00:09:18,170 --> 00:09:22,250
compile some samples<font color="#E5E5E5"> and really dig into</font>

262
00:09:20,360 --> 00:09:23,839
<font color="#CCCCCC">out compiler</font><font color="#E5E5E5"> works it's open source and</font>

263
00:09:22,250 --> 00:09:25,550
<font color="#CCCCCC">you can build your your own samples and</font>

264
00:09:23,839 --> 00:09:27,529
tweak the compiler<font color="#E5E5E5"> really easily that</font>

265
00:09:25,550 --> 00:09:29,449
<font color="#CCCCCC">way and they also see</font><font color="#E5E5E5"> things like all</font>

266
00:09:27,529 --> 00:09:32,120
the assemblers<font color="#E5E5E5"> you got</font><font color="#CCCCCC"> yasm azzam Nazem</font>

267
00:09:29,450 --> 00:09:34,310
and<font color="#CCCCCC"> gas the new</font><font color="#E5E5E5"> assembler and then some</font>

268
00:09:32,120 --> 00:09:35,420
very nice things<font color="#CCCCCC"> like a vb6 from way</font>

269
00:09:34,310 --> 00:09:37,670
<font color="#E5E5E5">back</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the day generates</font><font color="#CCCCCC"> different</font>

270
00:09:35,420 --> 00:09:40,189
kinds<font color="#E5E5E5"> of binaries the.net framework</font>

271
00:09:37,670 --> 00:09:42,079
<font color="#CCCCCC">generates a bytecode that then gets run</font>

272
00:09:40,190 --> 00:09:44,060
then<font color="#E5E5E5"> you have the</font><font color="#CCCCCC"> rest compiler</font><font color="#E5E5E5"> and the</font>

273
00:09:42,080 --> 00:09:47,089
go compiler<font color="#CCCCCC"> which will not</font><font color="#E5E5E5"> be covered</font>

274
00:09:44,060 --> 00:09:49,969
but those are also of<font color="#CCCCCC"> interest if you're</font>

275
00:09:47,089 --> 00:09:51,740
interested in<font color="#E5E5E5"> them</font><font color="#CCCCCC"> now we have</font>

276
00:09:49,970 --> 00:09:54,080
<font color="#CCCCCC">sub-segments all these things</font><font color="#E5E5E5"> so if you</font>

277
00:09:51,740 --> 00:09:55,700
look<font color="#E5E5E5"> at Visual Studio</font><font color="#CCCCCC"> Delfy</font><font color="#E5E5E5"> and mingw</font>

278
00:09:54,080 --> 00:09:57,350
we have all<font color="#E5E5E5"> these</font><font color="#CCCCCC"> different things there</font>

279
00:09:55,700 --> 00:09:58,580
could be different versions because<font color="#E5E5E5"> the</font>

280
00:09:57,350 --> 00:10:00,920
compiler versions will actually change

281
00:09:58,580 --> 00:10:02,990
how<font color="#E5E5E5"> the output program is generated and</font>

282
00:10:00,920 --> 00:10:04,430
what it actually<font color="#E5E5E5"> contains we have the</font>

283
00:10:02,990 --> 00:10:06,800
<font color="#E5E5E5">target platform which is essentially</font>

284
00:10:04,430 --> 00:10:08,239
<font color="#E5E5E5">like if it's windows 32-bit</font><font color="#CCCCCC"> versus</font>

285
00:10:06,800 --> 00:10:09,859
<font color="#E5E5E5">64-bit it might do something different</font>

286
00:10:08,240 --> 00:10:11,990
<font color="#E5E5E5">we have additional options</font>

287
00:10:09,860 --> 00:10:14,750
<font color="#E5E5E5">it could be inserting stack checks or</font>

288
00:10:11,990 --> 00:10:16,910
like cookies<font color="#E5E5E5"> in the stack instead</font><font color="#CCCCCC"> of</font>

289
00:10:14,750 --> 00:10:18,410
<font color="#E5E5E5">combination or including other libraries</font>

290
00:10:16,910 --> 00:10:20,420
inside<font color="#E5E5E5"> of the file and it could be</font>

291
00:10:18,410 --> 00:10:22,430
packed with there are so many<font color="#CCCCCC"> packers</font>

292
00:10:20,420 --> 00:10:25,099
and<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> essentially</font><font color="#CCCCCC"> just a program</font>

293
00:10:22,430 --> 00:10:27,380
that wraps<font color="#E5E5E5"> your program</font><font color="#CCCCCC"> it makes it</font>

294
00:10:25,100 --> 00:10:29,570
somewhat harder to<font color="#CCCCCC"> reverse-engineer and</font>

295
00:10:27,380 --> 00:10:31,459
then<font color="#E5E5E5"> so these are all sub segments there</font>

296
00:10:29,570 --> 00:10:33,080
are a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> tools to undo all these</font>

297
00:10:31,459 --> 00:10:34,489
things and come to something<font color="#E5E5E5"> that's</font>

298
00:10:33,080 --> 00:10:37,970
<font color="#E5E5E5">called</font><font color="#CCCCCC"> normalization which essentially</font>

299
00:10:34,490 --> 00:10:38,959
if you have<font color="#E5E5E5"> different if you have all</font>

300
00:10:37,970 --> 00:10:40,520
these different sub segments it makes

301
00:10:38,959 --> 00:10:41,689
them back into<font color="#E5E5E5"> the bigger sub segments</font>

302
00:10:40,520 --> 00:10:43,880
<font color="#CCCCCC">so let's say you</font><font color="#E5E5E5"> were compiling</font>

303
00:10:41,690 --> 00:10:46,640
something and it was optimized<font color="#E5E5E5"> so that's</font>

304
00:10:43,880 --> 00:10:48,110
essentially<font color="#CCCCCC"> like maybe it finds some</font>

305
00:10:46,640 --> 00:10:49,839
kind of generic<font color="#E5E5E5"> optimization</font><font color="#CCCCCC"> in your</font>

306
00:10:48,110 --> 00:10:52,490
code like<font color="#E5E5E5"> it unrolls a loop or something</font>

307
00:10:49,839 --> 00:10:54,230
then it<font color="#CCCCCC"> will put all of</font><font color="#E5E5E5"> these things</font>

308
00:10:52,490 --> 00:10:55,880
back<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the original like unoptimized</font>

309
00:10:54,230 --> 00:10:57,110
version so you<font color="#CCCCCC"> can actually look at</font><font color="#E5E5E5"> it</font>

310
00:10:55,880 --> 00:10:59,300
and<font color="#CCCCCC"> check differences amongst different</font>

311
00:10:57,110 --> 00:11:02,370
<font color="#CCCCCC">for</font>

312
00:10:59,300 --> 00:11:07,410
<font color="#E5E5E5">area</font><font color="#CCCCCC"> all right so one thing we have</font><font color="#E5E5E5"> to</font>

313
00:11:02,370 --> 00:11:11,130
<font color="#E5E5E5">know is to</font><font color="#CCCCCC"> actually infer the composure</font>

314
00:11:07,410 --> 00:11:12,089
<font color="#CCCCCC">the differences of malware is the like I</font>

315
00:11:11,130 --> 00:11:13,710
said<font color="#CCCCCC"> right</font><font color="#E5E5E5"> there guarantees and</font>

316
00:11:12,090 --> 00:11:15,480
expectations<font color="#E5E5E5"> so what guarantees</font>

317
00:11:13,710 --> 00:11:17,160
expectations are made at the<font color="#E5E5E5"> program run</font>

318
00:11:15,480 --> 00:11:18,600
time<font color="#CCCCCC"> and how are they satisfied by</font><font color="#E5E5E5"> give</font>

319
00:11:17,160 --> 00:11:24,839
compilers<font color="#E5E5E5"> and how</font><font color="#CCCCCC"> does</font><font color="#E5E5E5"> their</font>

320
00:11:18,600 --> 00:11:27,300
satisfication<font color="#E5E5E5"> actually matter</font>

321
00:11:24,840 --> 00:11:30,090
so we're guaranteed at run time we know

322
00:11:27,300 --> 00:11:31,349
that<font color="#E5E5E5"> when a Windows executable is loaded</font>

323
00:11:30,090 --> 00:11:32,670
we have some operating<font color="#CCCCCC"> system</font><font color="#E5E5E5"> level</font>

324
00:11:31,350 --> 00:11:34,350
<font color="#E5E5E5">things that happen like you have to</font>

325
00:11:32,670 --> 00:11:36,180
schedule<font color="#CCCCCC"> your process right</font><font color="#E5E5E5"> and then we</font>

326
00:11:34,350 --> 00:11:37,500
know that<font color="#CCCCCC"> at some point Windows is going</font>

327
00:11:36,180 --> 00:11:39,180
to hand<font color="#CCCCCC"> our Linux whatever you looking</font>

328
00:11:37,500 --> 00:11:41,580
at specifically Windows is gonna hand

329
00:11:39,180 --> 00:11:43,979
<font color="#CCCCCC">over control</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> program</font><font color="#E5E5E5"> to your</font>

330
00:11:41,580 --> 00:11:47,480
program right<font color="#CCCCCC"> so in this case I'll run</font>

331
00:11:43,980 --> 00:11:50,280
through it<font color="#E5E5E5"> the</font><font color="#CCCCCC"> windows does things like</font>

332
00:11:47,480 --> 00:11:51,600
map all<font color="#CCCCCC"> of the executable map the fql</font>

333
00:11:50,280 --> 00:11:53,699
and all of its imports in a memory it

334
00:11:51,600 --> 00:11:54,720
schedules the process and then windows

335
00:11:53,700 --> 00:11:57,090
<font color="#CCCCCC">will jump in your program your program</font>

336
00:11:54,720 --> 00:11:58,680
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> starts at the</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> beginning</font>

337
00:11:57,090 --> 00:11:59,940
when<font color="#CCCCCC"> a TLS callback is registered and</font>

338
00:11:58,680 --> 00:12:02,189
you<font color="#E5E5E5"> guys probably</font><font color="#CCCCCC"> what steals callback</font>

339
00:11:59,940 --> 00:12:03,450
we<font color="#E5E5E5"> get to that the C runtime has to be</font>

340
00:12:02,190 --> 00:12:05,790
set<font color="#CCCCCC"> up if using C right because there's</font>

341
00:12:03,450 --> 00:12:06,750
a lot<font color="#E5E5E5"> of library calls and</font><font color="#CCCCCC"> C that</font><font color="#E5E5E5"> you</font>

342
00:12:05,790 --> 00:12:09,750
might want to use but that's<font color="#E5E5E5"> like an</font>

343
00:12:06,750 --> 00:12:11,190
internal<font color="#E5E5E5"> thing to see we know that</font><font color="#CCCCCC"> we</font>

344
00:12:09,750 --> 00:12:13,200
have<font color="#E5E5E5"> to registry exception handlers for</font>

345
00:12:11,190 --> 00:12:14,840
<font color="#E5E5E5">in C++ we</font><font color="#CCCCCC"> have to construct all of your</font>

346
00:12:13,200 --> 00:12:17,550
<font color="#E5E5E5">classes at the beginning of the program</font>

347
00:12:14,840 --> 00:12:18,870
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then after that this C runtime will</font>

348
00:12:17,550 --> 00:12:20,699
actually call your main after it gets

349
00:12:18,870 --> 00:12:23,130
things like like<font color="#CCCCCC"> arc ve arc C and</font>

350
00:12:20,700 --> 00:12:25,050
actually gives it to<font color="#CCCCCC"> Main</font><font color="#E5E5E5"> now this</font><font color="#CCCCCC"> Jif</font>

351
00:12:23,130 --> 00:12:26,220
<font color="#CCCCCC">was</font><font color="#E5E5E5"> pretty cool this was Bill Gates</font><font color="#CCCCCC"> I</font>

352
00:12:25,050 --> 00:12:27,479
with the tablet<font color="#E5E5E5"> and it was like</font>

353
00:12:26,220 --> 00:12:29,700
recursion<font color="#CCCCCC"> because it's like the image is</font>

354
00:12:27,480 --> 00:12:33,180
loading always<font color="#E5E5E5"> that was cool and missing</font>

355
00:12:29,700 --> 00:12:34,500
out<font color="#CCCCCC"> on</font><font color="#E5E5E5"> that one all right</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> have</font>

356
00:12:33,180 --> 00:12:36,660
four things<font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> for each</font><font color="#E5E5E5"> of these</font>

357
00:12:34,500 --> 00:12:38,160
compilers<font color="#CCCCCC"> and like as a new person</font><font color="#E5E5E5"> this</font>

358
00:12:36,660 --> 00:12:40,199
<font color="#CCCCCC">is what I</font><font color="#E5E5E5"> found most</font><font color="#CCCCCC"> interesting in</font>

359
00:12:38,160 --> 00:12:41,790
terms of provenance<font color="#E5E5E5"> and why the compiler</font>

360
00:12:40,200 --> 00:12:43,830
matters for different binaries<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we</font>

361
00:12:41,790 --> 00:12:46,170
have process initialization<font color="#E5E5E5"> we have</font>

362
00:12:43,830 --> 00:12:48,630
module loading TLS callbacks<font color="#E5E5E5"> and the</font>

363
00:12:46,170 --> 00:12:49,860
calling convention<font color="#CCCCCC"> and those are all</font>

364
00:12:48,630 --> 00:12:52,350
really<font color="#E5E5E5"> important</font><font color="#CCCCCC"> and we'll</font><font color="#E5E5E5"> get into</font>

365
00:12:49,860 --> 00:12:54,510
<font color="#E5E5E5">those</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> Visual Studio cool</font>

366
00:12:52,350 --> 00:12:58,080
so on the right we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> Clippy he should</font>

367
00:12:54,510 --> 00:13:00,450
be<font color="#E5E5E5"> blinking at you he's not and Visual</font>

368
00:12:58,080 --> 00:13:03,150
Studio<font color="#E5E5E5"> has a very interesting thing in</font>

369
00:13:00,450 --> 00:13:05,640
that<font color="#E5E5E5"> it adds an actual XML assembly at</font>

370
00:13:03,150 --> 00:13:07,020
<font color="#CCCCCC">the end of a programs resources so I'd</font>

371
00:13:05,640 --> 00:13:08,819
like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> turn</font><font color="#E5E5E5"> a little able to state</font>

372
00:13:07,020 --> 00:13:11,339
things<font color="#E5E5E5"> that it's done in the</font><font color="#CCCCCC"> binary</font>

373
00:13:08,820 --> 00:13:13,649
which other<font color="#CCCCCC"> compilers do not have</font>

374
00:13:11,339 --> 00:13:15,120
so if you happen<font color="#CCCCCC"> upon a program</font><font color="#E5E5E5"> and you</font>

375
00:13:13,649 --> 00:13:17,459
see like<font color="#E5E5E5"> oh where does this XML manifest</font>

376
00:13:15,120 --> 00:13:18,449
thing that's probably<font color="#CCCCCC"> Visual</font><font color="#E5E5E5"> Studio and</font>

377
00:13:17,459 --> 00:13:20,008
then you can go<font color="#E5E5E5"> look at that and that's</font>

378
00:13:18,449 --> 00:13:21,839
interesting<font color="#CCCCCC"> to look at</font><font color="#E5E5E5"> it'll tell you</font>

379
00:13:20,009 --> 00:13:23,759
<font color="#E5E5E5">some key things which you can read about</font>

380
00:13:21,839 --> 00:13:25,649
<font color="#E5E5E5">on</font><font color="#CCCCCC"> MSDN</font><font color="#E5E5E5"> and it's not always the same</font>

381
00:13:23,759 --> 00:13:27,209
<font color="#E5E5E5">things so sometimes it get like a really</font>

382
00:13:25,649 --> 00:13:29,490
<font color="#E5E5E5">interesting tidbit so it's actually</font>

383
00:13:27,209 --> 00:13:33,119
useful to<font color="#E5E5E5"> look at</font><font color="#CCCCCC"> that and then it also</font>

384
00:13:29,490 --> 00:13:35,189
has some<font color="#E5E5E5"> typical imports which it</font>

385
00:13:33,120 --> 00:13:36,029
imports a<font color="#CCCCCC"> lot</font><font color="#E5E5E5"> of things but by default</font>

386
00:13:35,189 --> 00:13:38,069
<font color="#E5E5E5">it includes</font>

387
00:13:36,029 --> 00:13:40,319
one thing which is<font color="#E5E5E5"> important we'll get</font>

388
00:13:38,069 --> 00:13:41,790
to that so calling convention<font color="#E5E5E5"> it uses</font>

389
00:13:40,319 --> 00:13:42,809
<font color="#CCCCCC">seat deckle by a default which</font>

390
00:13:41,790 --> 00:13:45,329
essentially when you're<font color="#E5E5E5"> looking at the</font>

391
00:13:42,809 --> 00:13:46,709
disassembly<font color="#CCCCCC"> right you have push push</font>

392
00:13:45,329 --> 00:13:49,319
<font color="#CCCCCC">call and then you'll see some stack</font>

393
00:13:46,709 --> 00:13:50,550
<font color="#E5E5E5">cleanup and then I'm also covering</font>

394
00:13:49,319 --> 00:13:53,550
<font color="#E5E5E5">windows right here</font><font color="#CCCCCC"> some whenever</font><font color="#E5E5E5"> you see</font>

395
00:13:50,550 --> 00:13:56,639
a Windows<font color="#E5E5E5"> system call it uses standard</font>

396
00:13:53,550 --> 00:13:57,809
call which is the caller<font color="#E5E5E5"> doesn't</font>

397
00:13:56,639 --> 00:14:00,329
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> to do any of the cleanup the</font>

398
00:13:57,809 --> 00:14:00,629
<font color="#E5E5E5">operating system as that for you all</font>

399
00:14:00,329 --> 00:14:02,758
right

400
00:14:00,629 --> 00:14:04,740
so if we're looking<font color="#E5E5E5"> at a Windows</font><font color="#CCCCCC"> program</font>

401
00:14:02,759 --> 00:14:05,910
and we see some<font color="#CCCCCC"> pair of we look if we're</font>

402
00:14:04,740 --> 00:14:07,199
looking<font color="#CCCCCC"> a</font><font color="#E5E5E5"> visual studio</font><font color="#CCCCCC"> program we see</font>

403
00:14:05,910 --> 00:14:08,069
<font color="#E5E5E5">something it isn't using</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> deco we're</font>

404
00:14:07,199 --> 00:14:09,839
like oh<font color="#E5E5E5"> that's where that's another</font>

405
00:14:08,069 --> 00:14:11,459
option they specified or maybe this<font color="#E5E5E5"> is</font>

406
00:14:09,839 --> 00:14:12,809
<font color="#E5E5E5">something that isn't</font><font color="#CCCCCC"> visual studio even</font>

407
00:14:11,459 --> 00:14:13,888
<font color="#CCCCCC">though I already inferred</font><font color="#E5E5E5"> that maybe it</font>

408
00:14:12,809 --> 00:14:15,059
was right based<font color="#CCCCCC"> on our initial guess</font>

409
00:14:13,889 --> 00:14:17,809
that's kind<font color="#CCCCCC"> of work out where</font><font color="#E5E5E5"> to build a</font>

410
00:14:15,059 --> 00:14:21,660
bunch<font color="#E5E5E5"> of guesses and try to just back</font>

411
00:14:17,809 --> 00:14:22,920
<font color="#E5E5E5">justify our guesses right so</font><font color="#CCCCCC"> MSV see</font><font color="#E5E5E5"> run</font>

412
00:14:21,660 --> 00:14:24,629
<font color="#E5E5E5">time initialization is what it does</font>

413
00:14:22,920 --> 00:14:27,420
which<font color="#E5E5E5"> is actually</font><font color="#CCCCCC"> very different from</font>

414
00:14:24,629 --> 00:14:30,300
the other two<font color="#E5E5E5"> it uses windows built-in</font>

415
00:14:27,420 --> 00:14:31,979
<font color="#E5E5E5">things this is from reversing some</font>

416
00:14:30,300 --> 00:14:33,809
<font color="#E5E5E5">window stuff so at the very</font><font color="#CCCCCC"> beginning of</font>

417
00:14:31,980 --> 00:14:36,329
our programs lifetime it goes to ntdll

418
00:14:33,809 --> 00:14:38,339
<font color="#E5E5E5">it does something</font><font color="#CCCCCC"> which just starts your</font>

419
00:14:36,329 --> 00:14:40,920
program like think about<font color="#E5E5E5"> the operating</font>

420
00:14:38,339 --> 00:14:43,110
system level of things right<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then it</font>

421
00:14:40,920 --> 00:14:44,610
goes to kernel DLL which<font color="#E5E5E5"> calls</font><font color="#CCCCCC"> base</font>

422
00:14:43,110 --> 00:14:47,040
thread and<font color="#E5E5E5"> it thunk and this is as a</font>

423
00:14:44,610 --> 00:14:48,870
visual<font color="#E5E5E5"> studio like 2016-2017 samples</font>

424
00:14:47,040 --> 00:14:51,209
that<font color="#E5E5E5"> I was looking at and then</font><font color="#CCCCCC"> your</font>

425
00:14:48,870 --> 00:14:53,670
program<font color="#CCCCCC"> is</font><font color="#E5E5E5"> called an</font><font color="#CCCCCC"> AM SVC program</font><font color="#E5E5E5"> will</font>

426
00:14:51,209 --> 00:14:56,638
have an entry point once then jumps into

427
00:14:53,670 --> 00:14:58,500
like a stack check routine and then

428
00:14:56,639 --> 00:15:00,959
after a<font color="#CCCCCC"> couple more stack frames down</font>

429
00:14:58,500 --> 00:15:03,000
it'll<font color="#CCCCCC"> actually call</font><font color="#E5E5E5"> your mate and that's</font>

430
00:15:00,959 --> 00:15:05,069
somewhat interesting because like<font color="#CCCCCC"> the</font>

431
00:15:03,000 --> 00:15:07,220
others like note<font color="#E5E5E5"> I don't know laser on</font>

432
00:15:05,069 --> 00:15:10,139
<font color="#E5E5E5">this whole thing but note like the</font>

433
00:15:07,220 --> 00:15:14,059
<font color="#E5E5E5">additional kernel32.dll is different the</font>

434
00:15:10,139 --> 00:15:14,059
other<font color="#CCCCCC"> couple</font><font color="#E5E5E5"> compilers are looking at</font>

435
00:15:14,120 --> 00:15:17,879
all right so<font color="#CCCCCC"> MSB CTLs callbacks</font><font color="#E5E5E5"> we're</font>

436
00:15:16,920 --> 00:15:19,349
gonna get<font color="#E5E5E5"> to what a TLS callback</font>

437
00:15:17,879 --> 00:15:21,240
<font color="#CCCCCC">actually is essentially</font><font color="#E5E5E5"> lets you</font>

438
00:15:19,350 --> 00:15:23,160
register your<font color="#E5E5E5"> code at the very beginning</font>

439
00:15:21,240 --> 00:15:24,600
of<font color="#E5E5E5"> a process so like before</font><font color="#CCCCCC"> main is even</font>

440
00:15:23,160 --> 00:15:25,110
called<font color="#CCCCCC"> before like literally anything in</font>

441
00:15:24,600 --> 00:15:27,690
your program

442
00:15:25,110 --> 00:15:28,890
runs you can actually<font color="#E5E5E5"> run code</font><font color="#CCCCCC"> before</font>

443
00:15:27,690 --> 00:15:30,810
your program<font color="#E5E5E5"> which is odd right you're</font>

444
00:15:28,890 --> 00:15:32,250
<font color="#E5E5E5">like well I</font><font color="#CCCCCC"> broke code that should be in</font>

445
00:15:30,810 --> 00:15:34,469
<font color="#E5E5E5">my program right but it actually</font><font color="#CCCCCC"> runs</font>

446
00:15:32,250 --> 00:15:36,810
before<font color="#CCCCCC"> mains so you can run code before</font>

447
00:15:34,470 --> 00:15:38,490
main and as a beginning reverse or I

448
00:15:36,810 --> 00:15:41,310
thought<font color="#E5E5E5"> that was of interest</font><font color="#CCCCCC"> so these</font>

449
00:15:38,490 --> 00:15:42,990
<font color="#E5E5E5">are things that we want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at</font><font color="#CCCCCC"> so</font>

450
00:15:41,310 --> 00:15:44,819
<font color="#E5E5E5">essentially</font><font color="#CCCCCC"> just makes a</font><font color="#E5E5E5"> bunch of stack</font>

451
00:15:42,990 --> 00:15:45,960
frames and<font color="#E5E5E5"> then this happens</font><font color="#CCCCCC"> like kind</font>

452
00:15:44,820 --> 00:15:47,340
of asynchronously over the lifetime<font color="#E5E5E5"> of</font>

453
00:15:45,960 --> 00:15:48,720
your<font color="#E5E5E5"> program so it'll just interrupt</font>

454
00:15:47,340 --> 00:15:50,880
your program run that<font color="#CCCCCC"> function that</font>

455
00:15:48,720 --> 00:15:52,710
<font color="#E5E5E5">you've registered or do whatever you the</font>

456
00:15:50,880 --> 00:15:56,820
programmer told the computer<font color="#CCCCCC"> to do</font>

457
00:15:52,710 --> 00:15:57,810
<font color="#E5E5E5">without actually messing with any of the</font>

458
00:15:56,820 --> 00:15:59,370
things<font color="#E5E5E5"> you've set up so if you're in the</font>

459
00:15:57,810 --> 00:16:00,510
<font color="#E5E5E5">middle</font><font color="#CCCCCC"> of a function and another process</font>

460
00:15:59,370 --> 00:16:01,860
is created your<font color="#E5E5E5"> key let's</font><font color="#CCCCCC"> call backs</font>

461
00:16:00,510 --> 00:16:03,030
like BAM I'm right there I'm<font color="#E5E5E5"> gonna do</font>

462
00:16:01,860 --> 00:16:08,460
this<font color="#E5E5E5"> thing even</font><font color="#CCCCCC"> though you were already</font>

463
00:16:03,030 --> 00:16:12,120
doing<font color="#E5E5E5"> this thing so then we have</font><font color="#CCCCCC"> module</font>

464
00:16:08,460 --> 00:16:14,310
loading is different right so every<font color="#CCCCCC"> MS</font>

465
00:16:12,120 --> 00:16:17,010
<font color="#CCCCCC">PC program will have VC runtime</font><font color="#E5E5E5"> and then</font>

466
00:16:14,310 --> 00:16:20,489
like a<font color="#E5E5E5"> 160 dot DLL and then you'll also</font>

467
00:16:17,010 --> 00:16:22,050
see kernel32.dll loaded statically<font color="#CCCCCC"> and</font>

468
00:16:20,490 --> 00:16:24,180
the static imports are important because

469
00:16:22,050 --> 00:16:26,579
MSP<font color="#E5E5E5"> C will statically import things and</font>

470
00:16:24,180 --> 00:16:28,410
that'll be if you open up a<font color="#CCCCCC"> program in</font><font color="#E5E5E5"> c</font>

471
00:16:26,580 --> 00:16:29,490
<font color="#E5E5E5">FF explorer which essentially tells you</font>

472
00:16:28,410 --> 00:16:31,560
the different<font color="#CCCCCC"> sections of the program</font>

473
00:16:29,490 --> 00:16:32,820
<font color="#E5E5E5">and all of its attributes</font><font color="#CCCCCC"> it'll say like</font>

474
00:16:31,560 --> 00:16:36,930
<font color="#CCCCCC">these are</font><font color="#E5E5E5"> the things</font><font color="#CCCCCC"> that this program</font>

475
00:16:32,820 --> 00:16:38,250
<font color="#CCCCCC">does and we know</font><font color="#E5E5E5"> that M s</font><font color="#CCCCCC"> BC by default</font>

476
00:16:36,930 --> 00:16:41,689
doesn't dynamically load<font color="#E5E5E5"> things so it</font>

477
00:16:38,250 --> 00:16:44,880
won't go look for<font color="#CCCCCC"> a</font><font color="#E5E5E5"> library for example</font>

478
00:16:41,690 --> 00:16:47,550
<font color="#CCCCCC">because if we saw</font><font color="#E5E5E5"> dynamic module load in</font>

479
00:16:44,880 --> 00:16:49,110
<font color="#CCCCCC">m/s BC we would know that like that's</font>

480
00:16:47,550 --> 00:16:52,500
something<font color="#E5E5E5"> fishy right and we want</font><font color="#CCCCCC"> to go</font>

481
00:16:49,110 --> 00:16:56,220
look at that<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> alright so next</font>

482
00:16:52,500 --> 00:17:00,360
<font color="#CCCCCC">Impaler is mingw</font><font color="#E5E5E5"> so mingw depends on the</font>

483
00:16:56,220 --> 00:17:02,520
new library<font color="#CCCCCC"> DLLs describe the jiff right</font>

484
00:17:00,360 --> 00:17:05,130
so that's a bison running<font color="#CCCCCC"> like very</font>

485
00:17:02,520 --> 00:17:08,550
majestic<font color="#CCCCCC"> aliy and then the GNU logo on</font>

486
00:17:05,130 --> 00:17:09,660
the<font color="#CCCCCC"> 4 gram cool so the GNU library dll</font>

487
00:17:08,550 --> 00:17:11,010
actually usually like if you see a

488
00:17:09,660 --> 00:17:12,839
packaged program<font color="#E5E5E5"> there's</font><font color="#CCCCCC"> they're shipped</font>

489
00:17:11,010 --> 00:17:14,400
with the<font color="#E5E5E5"> program that</font><font color="#CCCCCC"> you get so you'll</font>

490
00:17:12,839 --> 00:17:16,169
have like an executable<font color="#E5E5E5"> and then some</font>

491
00:17:14,400 --> 00:17:17,459
dll's that it's<font color="#CCCCCC"> gonna come</font><font color="#E5E5E5"> with that are</font>

492
00:17:16,170 --> 00:17:21,600
hopefully<font color="#CCCCCC"> in a folder that it knows</font>

493
00:17:17,459 --> 00:17:24,930
about<font color="#CCCCCC"> there we go</font>

494
00:17:21,599 --> 00:17:27,599
so it uses<font color="#CCCCCC"> c</font><font color="#E5E5E5"> deckle just like</font><font color="#CCCCCC"> MSV c</font>

495
00:17:24,930 --> 00:17:30,450
which is push push call and then some

496
00:17:27,599 --> 00:17:32,550
<font color="#CCCCCC">cleanup right and that's that's</font><font color="#E5E5E5"> pretty</font>

497
00:17:30,450 --> 00:17:34,780
<font color="#E5E5E5">standard</font><font color="#CCCCCC"> you can also change that</font><font color="#E5E5E5"> just</font>

498
00:17:32,550 --> 00:17:36,908
<font color="#CCCCCC">as the other compiler was</font>

499
00:17:34,780 --> 00:17:38,230
and<font color="#CCCCCC"> it's version of TLS callbacks are</font>

500
00:17:36,909 --> 00:17:40,659
actually dynamic<font color="#E5E5E5"> so you can record on a</font>

501
00:17:38,230 --> 00:17:41,230
Mac TLS callbacks and and let's say you

502
00:17:40,659 --> 00:17:43,419
were used to

503
00:17:41,230 --> 00:17:46,240
you were we're used to reversing a<font color="#E5E5E5"> lot</font>

504
00:17:43,419 --> 00:17:48,970
of mingw binaries<font color="#E5E5E5"> or sorry you're used</font>

505
00:17:46,240 --> 00:17:50,890
to reversing a lot of<font color="#E5E5E5"> MS vc binaries and</font>

506
00:17:48,970 --> 00:17:51,909
you see like<font color="#E5E5E5"> oh like I thought</font><font color="#CCCCCC"> that</font>

507
00:17:50,890 --> 00:17:53,740
<font color="#CCCCCC">mighty let's call back should be</font>

508
00:17:51,909 --> 00:17:55,530
<font color="#E5E5E5">statically defined in the file and then</font>

509
00:17:53,740 --> 00:17:58,360
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> like what is this dynamic thing</font>

510
00:17:55,530 --> 00:18:01,450
mingw<font color="#CCCCCC"> and you might think is fishy right</font>

511
00:17:58,360 --> 00:18:02,830
mingw will actually dynamically load all

512
00:18:01,450 --> 00:18:05,500
<font color="#CCCCCC">of its TLS callbacks when the program</font>

513
00:18:02,830 --> 00:18:07,299
<font color="#E5E5E5">started so the process initialization</font>

514
00:18:05,500 --> 00:18:09,429
and<font color="#E5E5E5"> the TLS callbacks are all lumped in</font>

515
00:18:07,299 --> 00:18:11,080
this gigantic stack frame which<font color="#E5E5E5"> is when</font>

516
00:18:09,429 --> 00:18:13,630
main CRT<font color="#E5E5E5"> start just does literally</font>

517
00:18:11,080 --> 00:18:14,949
everything<font color="#CCCCCC"> a cool</font><font color="#E5E5E5"> thing about mingw is</font>

518
00:18:13,630 --> 00:18:16,210
it's all open source<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can go</font><font color="#E5E5E5"> look</font>

519
00:18:14,950 --> 00:18:18,850
at how it does this so if you<font color="#E5E5E5"> wanted to</font>

520
00:18:16,210 --> 00:18:20,380
go modify your<font color="#E5E5E5"> own compiler or modify</font>

521
00:18:18,850 --> 00:18:22,830
<font color="#E5E5E5">its</font><font color="#CCCCCC"> and its compilation you could do</font>

522
00:18:20,380 --> 00:18:24,580
that so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a really</font><font color="#E5E5E5"> big</font>

523
00:18:22,830 --> 00:18:26,049
<font color="#E5E5E5">false-positive slash</font><font color="#CCCCCC"> false negative</font>

524
00:18:24,580 --> 00:18:28,449
opportunity let's say you're an<font color="#CCCCCC"> AV</font>

525
00:18:26,049 --> 00:18:29,918
company and you're like oh dynamic TLS

526
00:18:28,450 --> 00:18:32,049
callbacks like no that's<font color="#E5E5E5"> bad we should</font>

527
00:18:29,919 --> 00:18:34,240
<font color="#E5E5E5">not do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> there's a thread</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> Twitter</font>

528
00:18:32,049 --> 00:18:36,668
<font color="#E5E5E5">three months</font><font color="#CCCCCC"> ago</font><font color="#E5E5E5"> that was like compiled</font>

529
00:18:34,240 --> 00:18:39,220
the smallest<font color="#CCCCCC"> hello world binary</font><font color="#E5E5E5"> and then</font>

530
00:18:36,669 --> 00:18:41,650
uploaded to<font color="#CCCCCC"> a V or virustotal</font>

531
00:18:39,220 --> 00:18:42,669
and see which<font color="#CCCCCC"> AV will actually hit on it</font>

532
00:18:41,650 --> 00:18:45,130
right there<font color="#CCCCCC"> like you're</font><font color="#E5E5E5"> like a detection</font>

533
00:18:42,669 --> 00:18:47,740
on it<font color="#E5E5E5"> and if you just compile a</font><font color="#CCCCCC"> binary</font>

534
00:18:45,130 --> 00:18:49,750
with<font color="#CCCCCC"> Minji doors and then GW uploaded</font>

535
00:18:47,740 --> 00:18:51,640
you<font color="#CCCCCC"> can get a program</font><font color="#E5E5E5"> that has does</font>

536
00:18:49,750 --> 00:18:53,140
absolutely nothing<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be a false</font>

537
00:18:51,640 --> 00:18:54,700
positive<font color="#CCCCCC"> cuts a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of av we'll look</font><font color="#E5E5E5"> at</font>

538
00:18:53,140 --> 00:18:56,740
the compiler bootstrap and<font color="#E5E5E5"> go like oh I</font>

539
00:18:54,700 --> 00:18:57,970
<font color="#E5E5E5">know T let's call back definitely</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> or</font>

540
00:18:56,740 --> 00:18:59,500
like this even though it's probably<font color="#E5E5E5"> just</font>

541
00:18:57,970 --> 00:19:03,640
literally<font color="#CCCCCC"> nothing like</font><font color="#E5E5E5"> that's bad this</font>

542
00:18:59,500 --> 00:19:05,710
is bad we shouldn't do this<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> cool</font>

543
00:19:03,640 --> 00:19:08,320
and as an analyst maybe you can start to

544
00:19:05,710 --> 00:19:10,120
infer<font color="#E5E5E5"> that like oh it's mingw</font>

545
00:19:08,320 --> 00:19:12,340
<font color="#E5E5E5">compiled application from the things I</font>

546
00:19:10,120 --> 00:19:13,360
just<font color="#E5E5E5"> learned and hey like there's an</font>

547
00:19:12,340 --> 00:19:14,649
amateur let's call back<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> very</font>

548
00:19:13,360 --> 00:19:16,418
<font color="#CCCCCC">beginning</font><font color="#E5E5E5"> of the program</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'm</font>

549
00:19:14,650 --> 00:19:17,919
<font color="#CCCCCC">inventing</font><font color="#E5E5E5"> on that so maybe I can</font><font color="#CCCCCC"> just</font>

550
00:19:16,419 --> 00:19:20,590
skip it<font color="#CCCCCC"> it's probably fine right so we</font>

551
00:19:17,919 --> 00:19:22,840
just<font color="#CCCCCC"> learn that</font><font color="#E5E5E5"> that's cool</font><font color="#CCCCCC"> so it's</font>

552
00:19:20,590 --> 00:19:27,220
<font color="#CCCCCC">runtime an initialization it just does</font>

553
00:19:22,840 --> 00:19:29,709
the<font color="#CCCCCC"> like we talked</font><font color="#E5E5E5"> about that</font><font color="#CCCCCC"> out there</font>

554
00:19:27,220 --> 00:19:32,230
you<font color="#E5E5E5"> it does exactly what we talked about</font>

555
00:19:29,710 --> 00:19:33,400
in in the window slide<font color="#E5E5E5"> like the the</font>

556
00:19:32,230 --> 00:19:35,980
program loading<font color="#E5E5E5"> part the process</font>

557
00:19:33,400 --> 00:19:38,049
bootstrap part<font color="#E5E5E5"> just in order but your</font>

558
00:19:35,980 --> 00:19:40,090
program does that instead all in one

559
00:19:38,049 --> 00:19:42,429
gigantic sample room so<font color="#E5E5E5"> register</font><font color="#CCCCCC"> CLS</font>

560
00:19:40,090 --> 00:19:44,559
callbacks<font color="#CCCCCC"> are extra steps and exception</font>

561
00:19:42,429 --> 00:19:45,929
handlers it grabs art<font color="#CCCCCC"> V and</font><font color="#E5E5E5"> arc C and</font>

562
00:19:44,559 --> 00:19:47,928
then calls main<font color="#E5E5E5"> all in this gigantic</font>

563
00:19:45,929 --> 00:19:49,730
<font color="#CCCCCC">run-on function and then</font><font color="#E5E5E5"> your</font>

564
00:19:47,929 --> 00:19:53,659
is<font color="#E5E5E5"> actually called and passed</font><font color="#CCCCCC"> RV narc</font>

565
00:19:49,730 --> 00:19:55,580
<font color="#E5E5E5">see that's pretty</font><font color="#CCCCCC"> straightforward and</font>

566
00:19:53,659 --> 00:20:00,259
then you'll also see a dynamic<font color="#E5E5E5"> load of</font>

567
00:19:55,580 --> 00:20:03,019
the<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> DLLs</font><font color="#E5E5E5"> so the very beginning</font>

568
00:20:00,259 --> 00:20:04,970
<font color="#E5E5E5">of when main CRT start up you'll see</font>

569
00:20:03,019 --> 00:20:06,769
<font color="#CCCCCC">like oh it</font><font color="#E5E5E5"> needs to depend on all these</font>

570
00:20:04,970 --> 00:20:08,210
<font color="#CCCCCC">C runtimes so it'll just</font><font color="#E5E5E5"> go look for</font>

571
00:20:06,769 --> 00:20:10,220
<font color="#CCCCCC">those</font><font color="#E5E5E5"> TLS dynamically load them and</font>

572
00:20:08,210 --> 00:20:12,230
<font color="#CCCCCC">they're not pathetically included in the</font>

573
00:20:10,220 --> 00:20:13,429
<font color="#E5E5E5">actual</font><font color="#CCCCCC"> binary so if you open it</font><font color="#E5E5E5"> up in</font>

574
00:20:12,230 --> 00:20:15,440
like<font color="#CCCCCC"> cff</font><font color="#E5E5E5"> explorer you might not</font>

575
00:20:13,429 --> 00:20:20,899
necessarily<font color="#CCCCCC"> you're not guaranteed to see</font>

576
00:20:15,440 --> 00:20:22,999
those in<font color="#E5E5E5"> the delisting right</font><font color="#CCCCCC"> and then</font>

577
00:20:20,899 --> 00:20:26,748
these are the<font color="#E5E5E5"> things it imports so it's</font>

578
00:20:22,999 --> 00:20:29,210
<font color="#E5E5E5">kernel32 and ms</font><font color="#CCCCCC"> v CRT so that's the C</font>

579
00:20:26,749 --> 00:20:31,549
runtime<font color="#E5E5E5"> DLL and then it also dynamically</font>

580
00:20:29,210 --> 00:20:33,919
loads<font color="#E5E5E5"> Lib GCC and then it's a version</font>

581
00:20:31,549 --> 00:20:34,999
number so the extra<font color="#CCCCCC"> dodge dash</font><font color="#E5E5E5"> X DLL and</font>

582
00:20:33,919 --> 00:20:38,419
<font color="#E5E5E5">then live</font>

583
00:20:34,999 --> 00:20:40,700
GC<font color="#E5E5E5"> J - or whatever version it's on</font><font color="#CCCCCC"> DLL</font>

584
00:20:38,419 --> 00:20:41,690
and if you don't have those then<font color="#E5E5E5"> it your</font>

585
00:20:40,700 --> 00:20:43,970
program won't work<font color="#CCCCCC"> so if you're running</font>

586
00:20:41,690 --> 00:20:45,919
<font color="#E5E5E5">if you're ever wondering like why an</font>

587
00:20:43,970 --> 00:20:47,119
executable you<font color="#E5E5E5"> have isn't running on</font>

588
00:20:45,919 --> 00:20:48,409
your system or you can't get it to

589
00:20:47,119 --> 00:20:50,389
<font color="#CCCCCC">actually run</font><font color="#E5E5E5"> in a VM or something like</font>

590
00:20:48,409 --> 00:20:52,519
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> actually need</font><font color="#CCCCCC"> to go find</font><font color="#E5E5E5"> the</font>

591
00:20:50,389 --> 00:20:54,110
<font color="#E5E5E5">appropriate DLL drop that in for it</font><font color="#CCCCCC"> and</font>

592
00:20:52,519 --> 00:20:56,539
<font color="#E5E5E5">those you can</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> grab off on</font>

593
00:20:54,110 --> 00:21:00,949
<font color="#CCCCCC">SourceForge</font><font color="#E5E5E5"> I think is where mingw</font><font color="#CCCCCC"> hosts</font>

594
00:20:56,539 --> 00:21:02,330
its releases and yeah so some of the

595
00:21:00,950 --> 00:21:04,999
used imports<font color="#CCCCCC"> are placed</font><font color="#E5E5E5"> in the import</font>

596
00:21:02,330 --> 00:21:08,149
directory<font color="#CCCCCC"> but also</font><font color="#E5E5E5"> you're guaranteed</font><font color="#CCCCCC"> to</font>

597
00:21:04,999 --> 00:21:12,409
<font color="#E5E5E5">see dynamic loads cool and our last one</font>

598
00:21:08,149 --> 00:21:14,178
is<font color="#CCCCCC"> Delfy so its logo is</font><font color="#E5E5E5"> the DX logo</font>

599
00:21:12,409 --> 00:21:16,460
we're<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> logo</font><font color="#CCCCCC"> it's look as the</font>

600
00:21:14,179 --> 00:21:19,429
DX logo<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> oracle of delphi</font>

601
00:21:16,460 --> 00:21:22,309
as painting<font color="#CCCCCC"> so that's the</font><font color="#E5E5E5"> shift with</font>

602
00:21:19,429 --> 00:21:23,990
smoke on the right<font color="#E5E5E5"> hand side so</font><font color="#CCCCCC"> this</font>

603
00:21:22,309 --> 00:21:25,908
<font color="#E5E5E5">method</font><font color="#CCCCCC"> of module loading is somewhat</font>

604
00:21:23,990 --> 00:21:27,289
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> it's complan ation time it's</font>

605
00:21:25,909 --> 00:21:30,169
very<font color="#E5E5E5"> interesting you'll see like a tag</font>

606
00:21:27,289 --> 00:21:32,480
like compiled at<font color="#E5E5E5"> x time in older</font><font color="#CCCCCC"> Delfy</font>

607
00:21:30,169 --> 00:21:34,639
binaries that's interesting<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> calling</font>

608
00:21:32,480 --> 00:21:36,499
convention is very weird and<font color="#CCCCCC"> it has a</font>

609
00:21:34,639 --> 00:21:38,840
lot<font color="#CCCCCC"> of artifacts in the files like all</font>

610
00:21:36,499 --> 00:21:40,490
the days of the week and months<font color="#E5E5E5"> and</font>

611
00:21:38,840 --> 00:21:41,928
things like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> even if you tell</font><font color="#CCCCCC"> it not</font>

612
00:21:40,490 --> 00:21:43,850
to include those<font color="#CCCCCC"> it sometimes will</font>

613
00:21:41,929 --> 00:21:45,379
include these<font color="#E5E5E5"> things and you might be</font>

614
00:21:43,850 --> 00:21:47,269
reversing a program and see<font color="#E5E5E5"> these things</font>

615
00:21:45,379 --> 00:21:48,678
<font color="#E5E5E5">and</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> be like why and then you know</font>

616
00:21:47,269 --> 00:21:50,090
it's<font color="#E5E5E5"> like oh it's</font><font color="#CCCCCC"> Delfy and I should</font>

617
00:21:48,679 --> 00:21:53,389
expect<font color="#E5E5E5"> that these things are in</font><font color="#CCCCCC"> there</font>

618
00:21:50,090 --> 00:21:55,309
<font color="#E5E5E5">even it doesn't use them cool so it's</font>

619
00:21:53,389 --> 00:21:56,869
calling convention is a variant of fast

620
00:21:55,309 --> 00:21:58,158
call calling<font color="#CCCCCC"> Convention which is like</font>

621
00:21:56,869 --> 00:22:01,080
this unique<font color="#CCCCCC"> thing to Delfy called</font>

622
00:21:58,159 --> 00:22:03,090
<font color="#CCCCCC">Borland register where it passes the FIR</font>

623
00:22:01,080 --> 00:22:05,220
three arguments through<font color="#CCCCCC"> eax</font><font color="#E5E5E5"> ECX and EDX</font>

624
00:22:03,090 --> 00:22:07,679
<font color="#E5E5E5">and then it pushes any of the last</font>

625
00:22:05,220 --> 00:22:09,120
arguments<font color="#CCCCCC"> onto the stack and</font><font color="#E5E5E5"> then calls</font>

626
00:22:07,680 --> 00:22:11,280
the<font color="#CCCCCC"> function so you're guaranteed to</font>

627
00:22:09,120 --> 00:22:13,260
<font color="#E5E5E5">have your first couple arguments and</font><font color="#CCCCCC"> Exe</font>

628
00:22:11,280 --> 00:22:16,320
<font color="#E5E5E5">txt DX and then everything else on the</font>

629
00:22:13,260 --> 00:22:17,610
stack<font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of interesting so</font>

630
00:22:16,320 --> 00:22:18,960
we know<font color="#E5E5E5"> that like</font><font color="#CCCCCC"> EC X can be</font><font color="#E5E5E5"> used for</font>

631
00:22:17,610 --> 00:22:21,479
like<font color="#CCCCCC"> system string operations and</font><font color="#E5E5E5"> things</font>

632
00:22:18,960 --> 00:22:23,160
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> as a new guy I kind of got</font>

633
00:22:21,480 --> 00:22:24,390
thrown<font color="#CCCCCC"> off I was</font><font color="#E5E5E5"> like why is it doing</font>

634
00:22:23,160 --> 00:22:26,130
<font color="#CCCCCC">this</font><font color="#E5E5E5"> but then I had</font><font color="#CCCCCC"> to read up on</font><font color="#E5E5E5"> the</font>

635
00:22:24,390 --> 00:22:28,820
calling convention<font color="#CCCCCC"> and know that this is</font>

636
00:22:26,130 --> 00:22:32,340
a<font color="#E5E5E5"> standard thing for</font><font color="#CCCCCC"> Delfy binaries</font>

637
00:22:28,820 --> 00:22:34,770
<font color="#CCCCCC">about the tippet the runtime</font>

638
00:22:32,340 --> 00:22:39,090
initialization is pretty much<font color="#E5E5E5"> the same</font>

639
00:22:34,770 --> 00:22:40,860
as like as GCC was<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> just two calls</font>

640
00:22:39,090 --> 00:22:43,649
and then it just jumped straight<font color="#E5E5E5"> into</font>

641
00:22:40,860 --> 00:22:45,949
your to<font color="#E5E5E5"> your main but there's like a</font>

642
00:22:43,650 --> 00:22:47,880
before main before it jumps so that's

643
00:22:45,950 --> 00:22:51,750
setting up the<font color="#E5E5E5"> run times things like</font>

644
00:22:47,880 --> 00:22:54,210
<font color="#E5E5E5">this</font><font color="#CCCCCC"> it's TLS callbacks are both static</font>

645
00:22:51,750 --> 00:22:56,550
<font color="#E5E5E5">and dynamic</font><font color="#CCCCCC"> it's actually interesting</font>

646
00:22:54,210 --> 00:22:58,860
<font color="#CCCCCC">because</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> Delfy forms applications</font>

647
00:22:56,550 --> 00:23:00,450
<font color="#E5E5E5">registered dynamic she</font><font color="#CCCCCC"> loves callbacks</font>

648
00:22:58,860 --> 00:23:02,280
<font color="#E5E5E5">that are used for things that you don't</font>

649
00:23:00,450 --> 00:23:05,610
<font color="#E5E5E5">even</font><font color="#CCCCCC"> write or you</font><font color="#E5E5E5"> don't even define so</font>

650
00:23:02,280 --> 00:23:07,830
like we said<font color="#CCCCCC"> I</font><font color="#E5E5E5"> saw one that</font><font color="#CCCCCC"> was a</font><font color="#E5E5E5"> button</font>

651
00:23:05,610 --> 00:23:08,939
<font color="#E5E5E5">clicks</font><font color="#CCCCCC"> were actually associated with a</font>

652
00:23:07,830 --> 00:23:10,290
TLS callback which is very interesting

653
00:23:08,940 --> 00:23:12,960
<font color="#CCCCCC">you like spawn off</font><font color="#E5E5E5"> different windows and</font>

654
00:23:10,290 --> 00:23:14,460
things<font color="#CCCCCC"> like that</font><font color="#E5E5E5"> so it's module loading</font>

655
00:23:12,960 --> 00:23:16,710
is really cool if you get a<font color="#CCCCCC"> Delfy binary</font>

656
00:23:14,460 --> 00:23:18,780
<font color="#E5E5E5">like a little like</font><font color="#CCCCCC"> sheet</font><font color="#E5E5E5"> to go really</font>

657
00:23:16,710 --> 00:23:20,100
<font color="#E5E5E5">fast it's just scroll down like an ID or</font>

658
00:23:18,780 --> 00:23:22,170
<font color="#E5E5E5">whatever reversing program you</font><font color="#CCCCCC"> use to</font>

659
00:23:20,100 --> 00:23:24,389
the very<font color="#E5E5E5"> bottom of the code or</font><font color="#CCCCCC"> the text</font>

660
00:23:22,170 --> 00:23:25,710
<font color="#E5E5E5">section they're both the</font><font color="#CCCCCC"> same thing</font><font color="#E5E5E5"> and</font>

661
00:23:24,390 --> 00:23:27,000
you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> actually like</font><font color="#E5E5E5"> just see a listing</font>

662
00:23:25,710 --> 00:23:28,950
of everything<font color="#E5E5E5"> it uses and if you have</font>

663
00:23:27,000 --> 00:23:30,870
all the names resolved you can get the

664
00:23:28,950 --> 00:23:32,310
functions and<font color="#E5E5E5"> you can even like start to</font>

665
00:23:30,870 --> 00:23:34,080
get if you're looking at like<font color="#CCCCCC"> a window</font>

666
00:23:32,310 --> 00:23:35,850
<font color="#CCCCCC">to application you can get like</font><font color="#E5E5E5"> all of</font>

667
00:23:34,080 --> 00:23:36,689
the the button click<font color="#E5E5E5"> callbacks and</font>

668
00:23:35,850 --> 00:23:38,699
things<font color="#E5E5E5"> like that and you can immediately</font>

669
00:23:36,690 --> 00:23:39,990
start<font color="#E5E5E5"> to see what is happening in the</font>

670
00:23:38,700 --> 00:23:41,940
file without<font color="#E5E5E5"> even really having to look</font>

671
00:23:39,990 --> 00:23:44,600
<font color="#E5E5E5">at any of</font><font color="#CCCCCC"> the functions</font><font color="#E5E5E5"> or delve down</font>

672
00:23:41,940 --> 00:23:49,920
into<font color="#E5E5E5"> any of like the basic block stuff</font>

673
00:23:44,600 --> 00:23:52,290
<font color="#E5E5E5">all</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so takeaway we have all these</font>

674
00:23:49,920 --> 00:23:53,730
expectations for different compilers<font color="#CCCCCC"> and</font>

675
00:23:52,290 --> 00:23:55,440
I<font color="#E5E5E5"> recommend</font><font color="#CCCCCC"> that like</font><font color="#E5E5E5"> you guys probably</font>

676
00:23:53,730 --> 00:23:59,670
<font color="#E5E5E5">have like complete view after this talk</font>

677
00:23:55,440 --> 00:24:01,290
<font color="#CCCCCC">because it's so concise but we know that</font>

678
00:23:59,670 --> 00:24:03,210
we can expect<font color="#E5E5E5"> things from a given binary</font>

679
00:24:01,290 --> 00:24:04,860
<font color="#E5E5E5">and we should build up our expectations</font>

680
00:24:03,210 --> 00:24:06,270
<font color="#CCCCCC">until our expectations are broken</font><font color="#E5E5E5"> or we</font>

681
00:24:04,860 --> 00:24:07,729
see something<font color="#E5E5E5"> is really fishy</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we</font>

682
00:24:06,270 --> 00:24:10,470
want to go look at the<font color="#E5E5E5"> fishies thing</font>

683
00:24:07,730 --> 00:24:12,330
first<font color="#E5E5E5"> and that's always like Michael my</font>

684
00:24:10,470 --> 00:24:16,269
reverse things

685
00:24:12,330 --> 00:24:19,120
we know that<font color="#E5E5E5"> for faster triage we can do</font>

686
00:24:16,269 --> 00:24:23,110
but<font color="#E5E5E5"> we can leverage our assumptions of</font>

687
00:24:19,120 --> 00:24:24,100
the program under<font color="#CCCCCC"> test</font><font color="#E5E5E5"> to reverse it</font>

688
00:24:23,110 --> 00:24:26,100
faster<font color="#E5E5E5"> because if it breaks our</font>

689
00:24:24,100 --> 00:24:27,820
expectations and jumps say to another

690
00:24:26,100 --> 00:24:29,289
<font color="#CCCCCC">calling convention</font><font color="#E5E5E5"> something like that</font>

691
00:24:27,820 --> 00:24:30,399
we know that maybe that shellcode maybe

692
00:24:29,289 --> 00:24:32,470
that's something<font color="#E5E5E5"> that I should</font><font color="#CCCCCC"> really be</font>

693
00:24:30,399 --> 00:24:35,739
<font color="#E5E5E5">digging</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> further and forgetting</font>

694
00:24:32,470 --> 00:24:37,870
everything else<font color="#CCCCCC"> we know that if we're</font>

695
00:24:35,740 --> 00:24:41,320
<font color="#CCCCCC">losing dynamic analysis on a program</font><font color="#E5E5E5"> and</font>

696
00:24:37,870 --> 00:24:42,518
<font color="#E5E5E5">we see something</font><font color="#CCCCCC"> like m/s VC doing a lot</font>

697
00:24:41,320 --> 00:24:43,809
<font color="#E5E5E5">of dynamic loading we know that's</font>

698
00:24:42,519 --> 00:24:45,820
<font color="#E5E5E5">probably officially summer</font><font color="#CCCCCC"> look at that</font>

699
00:24:43,809 --> 00:24:48,789
<font color="#E5E5E5">whereas we know that if we see some</font>

700
00:24:45,820 --> 00:24:49,928
events from say mingw and that's dynamic

701
00:24:48,789 --> 00:24:51,460
<font color="#E5E5E5">loading and they're just loading the</font>

702
00:24:49,929 --> 00:24:53,710
<font color="#E5E5E5">dll's like that's probably okay we</font><font color="#CCCCCC"> don't</font>

703
00:24:51,460 --> 00:24:56,289
<font color="#CCCCCC">have to look</font><font color="#E5E5E5"> at that and other things</font>

704
00:24:53,710 --> 00:24:57,539
like<font color="#CCCCCC"> that or GLS callbacks even could be</font>

705
00:24:56,289 --> 00:25:00,639
dynamic or<font color="#E5E5E5"> static based on the compiler</font>

706
00:24:57,539 --> 00:25:03,700
<font color="#E5E5E5">as a data scientist there's like I</font>

707
00:25:00,639 --> 00:25:06,490
mentioned the<font color="#E5E5E5"> FP or FN opportunity</font><font color="#CCCCCC"> and</font>

708
00:25:03,700 --> 00:25:08,559
mingw of forgetting the dynamic loading

709
00:25:06,490 --> 00:25:11,409
in the<font color="#E5E5E5"> beginning and the dynamic</font><font color="#CCCCCC"> TLS</font>

710
00:25:08,559 --> 00:25:13,690
<font color="#E5E5E5">callback registry</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> actually can start</font>

711
00:25:11,409 --> 00:25:15,249
to forget some<font color="#CCCCCC"> things in certain</font>

712
00:25:13,690 --> 00:25:18,850
<font color="#E5E5E5">sections and the placement of certain</font>

713
00:25:15,249 --> 00:25:20,440
calls matters so this is an output<font color="#CCCCCC"> from</font>

714
00:25:18,850 --> 00:25:24,389
the tool that<font color="#E5E5E5"> I'm releasing after this</font>

715
00:25:20,440 --> 00:25:27,940
talk essentially on the right this is a

716
00:25:24,389 --> 00:25:30,158
hello<font color="#CCCCCC"> world</font><font color="#E5E5E5"> program compared to a</font>

717
00:25:27,940 --> 00:25:32,080
program<font color="#CCCCCC"> that does a lot more so it just</font>

718
00:25:30,159 --> 00:25:34,299
writes a file it makes<font color="#CCCCCC"> net</font><font color="#E5E5E5"> request</font>

719
00:25:32,080 --> 00:25:35,980
you'll see that the<font color="#E5E5E5"> compiler and all the</font>

720
00:25:34,299 --> 00:25:39,539
code related to<font color="#E5E5E5"> the compilers places the</font>

721
00:25:35,980 --> 00:25:42,519
very like the top<font color="#E5E5E5"> like twenty by sixteen</font>

722
00:25:39,539 --> 00:25:44,350
bytes of<font color="#E5E5E5"> the the program so that's the</font>

723
00:25:42,519 --> 00:25:45,700
very top<font color="#CCCCCC"> and they're essentially the</font>

724
00:25:44,350 --> 00:25:46,928
<font color="#CCCCCC">same we know that we're</font><font color="#E5E5E5"> looking at two</font>

725
00:25:45,700 --> 00:25:48,940
programs<font color="#E5E5E5"> that are compiled the same</font>

726
00:25:46,929 --> 00:25:50,769
compiler the top part of the program

727
00:25:48,940 --> 00:25:52,629
should essentially be<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same unless</font>

728
00:25:50,769 --> 00:25:53,320
they're doing<font color="#E5E5E5"> something interesting if</font>

729
00:25:52,629 --> 00:25:55,658
you know there's<font color="#CCCCCC"> something</font><font color="#E5E5E5"> interesting</font>

730
00:25:53,320 --> 00:25:56,799
<font color="#E5E5E5">we</font><font color="#CCCCCC"> should go</font><font color="#E5E5E5"> look at it</font><font color="#CCCCCC"> so we see that</font>

731
00:25:55,659 --> 00:25:59,169
it's generally<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same at the</font><font color="#CCCCCC"> top and</font>

732
00:25:56,799 --> 00:26:02,019
then very different<font color="#E5E5E5"> at the bottom</font><font color="#CCCCCC"> if we</font>

733
00:25:59,169 --> 00:26:04,629
saw for instance<font color="#CCCCCC"> a large black segment</font>

734
00:26:02,019 --> 00:26:06,850
in the like a larger<font color="#E5E5E5"> than these smaller</font>

735
00:26:04,629 --> 00:26:09,248
black segments in that image<font color="#CCCCCC"> we saw a</font>

736
00:26:06,850 --> 00:26:10,600
very<font color="#CCCCCC"> large chunk</font><font color="#E5E5E5"> of of black that</font><font color="#CCCCCC"> means</font>

737
00:26:09,249 --> 00:26:11,980
<font color="#CCCCCC">those</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> programs are</font><font color="#E5E5E5"> very different</font>

738
00:26:10,600 --> 00:26:13,418
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we should go look at that because</font>

739
00:26:11,980 --> 00:26:15,639
maybe<font color="#E5E5E5"> somebody is hiding something in</font>

740
00:26:13,419 --> 00:26:17,169
<font color="#E5E5E5">the compiler or the compiler bootstrap</font>

741
00:26:15,639 --> 00:26:20,990
and<font color="#E5E5E5"> it's like a crafted binary or maybe</font>

742
00:26:17,169 --> 00:26:23,360
they have some kind<font color="#E5E5E5"> of modified compiler</font>

743
00:26:20,990 --> 00:26:28,490
and so I learn through<font color="#CCCCCC"> that so you can</font>

744
00:26:23,360 --> 00:26:30,199
reduce the you<font color="#E5E5E5"> you can read yeah you can</font>

745
00:26:28,490 --> 00:26:32,420
increase accuracy<font color="#E5E5E5"> by accounting</font><font color="#CCCCCC"> for the</font>

746
00:26:30,200 --> 00:26:35,540
<font color="#E5E5E5">fundamental properties of binaries given</font>

747
00:26:32,420 --> 00:26:37,250
<font color="#E5E5E5">their compiler so many references</font><font color="#CCCCCC"> to</font>

748
00:26:35,540 --> 00:26:39,110
function offsets and<font color="#CCCCCC"> Delfy binary is</font>

749
00:26:37,250 --> 00:26:40,970
more benign<font color="#E5E5E5"> whereas the presence of pls</font>

750
00:26:39,110 --> 00:26:44,060
<font color="#E5E5E5">callback orchestration code image</font><font color="#CCCCCC"> UW is</font>

751
00:26:40,970 --> 00:26:47,630
fine<font color="#E5E5E5"> again</font><font color="#CCCCCC"> that's just different</font><font color="#E5E5E5"> sis</font>

752
00:26:44,060 --> 00:26:50,929
compilers<font color="#E5E5E5"> and</font><font color="#CCCCCC"> why they matter so my tool</font>

753
00:26:47,630 --> 00:26:54,230
<font color="#E5E5E5">is open sourced</font><font color="#CCCCCC"> not now but as soon</font><font color="#E5E5E5"> as I</font>

754
00:26:50,930 --> 00:26:56,480
get<font color="#E5E5E5"> to</font><font color="#CCCCCC"> my laptop</font><font color="#E5E5E5"> and click the make</font>

755
00:26:54,230 --> 00:26:58,850
public option on github it'll be

756
00:26:56,480 --> 00:27:01,130
released<font color="#CCCCCC"> it generates these different</font>

757
00:26:58,850 --> 00:27:03,230
charts<font color="#CCCCCC"> it also gives you the</font>

758
00:27:01,130 --> 00:27:04,970
<font color="#E5E5E5">similarities so essentially how similar</font>

759
00:27:03,230 --> 00:27:07,280
<font color="#E5E5E5">a given program is throughout the file</font>

760
00:27:04,970 --> 00:27:08,420
all<font color="#E5E5E5"> the visual readout and then I also</font>

761
00:27:07,280 --> 00:27:10,190
specify some additional<font color="#CCCCCC"> reading</font>

762
00:27:08,420 --> 00:27:11,570
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> this stuff is</font><font color="#E5E5E5"> cool there's a</font>

763
00:27:10,190 --> 00:27:13,310
lot of research<font color="#E5E5E5"> papers to read on it you</font>

764
00:27:11,570 --> 00:27:16,580
can get into the<font color="#E5E5E5"> more higher level stuff</font>

765
00:27:13,310 --> 00:27:18,649
that's being researched<font color="#E5E5E5"> currently that</font>

766
00:27:16,580 --> 00:27:20,780
<font color="#E5E5E5">is the end of my talk thank you guys for</font>

767
00:27:18,650 --> 00:27:22,330
<font color="#E5E5E5">coming out first</font><font color="#CCCCCC"> time speaking</font><font color="#E5E5E5"> so I</font>

768
00:27:20,780 --> 00:27:25,540
appreciate it

769
00:27:22,330 --> 00:27:25,540
[Applause]

770
00:27:27,890 --> 00:27:32,230
[Applause]

771
00:27:29,340 --> 00:27:35,530
and I'll take questions on anything<font color="#E5E5E5"> cuz</font>

772
00:27:32,230 --> 00:27:37,480
I'm sure that I<font color="#CCCCCC"> missed things that</font>

773
00:27:35,530 --> 00:27:42,160
questions<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right oh we got one</font>

774
00:27:37,480 --> 00:27:44,530
sure<font color="#E5E5E5"> yeah is there a way to make one of</font>

775
00:27:42,160 --> 00:27:46,090
the any of the compilers<font color="#E5E5E5"> appear to</font>

776
00:27:44,530 --> 00:27:49,899
<font color="#E5E5E5">behave like one of the others</font><font color="#CCCCCC"> so you</font>

777
00:27:46,090 --> 00:27:53,470
could sort of spoof<font color="#CCCCCC"> the visual studio</font>

778
00:27:49,900 --> 00:27:55,480
one versus the mingw<font color="#E5E5E5"> yeah definitely so</font>

779
00:27:53,470 --> 00:27:57,340
I mentioned<font color="#CCCCCC"> like making a crafted binary</font>

780
00:27:55,480 --> 00:27:58,809
so you could actually start<font color="#E5E5E5"> to if you</font>

781
00:27:57,340 --> 00:28:00,850
wanted<font color="#E5E5E5"> to just get around some kind of</font>

782
00:27:58,809 --> 00:28:03,520
<font color="#E5E5E5">automated analysis you could probably</font>

783
00:28:00,850 --> 00:28:05,918
start<font color="#CCCCCC"> to put certain strings</font><font color="#E5E5E5"> from a</font>

784
00:28:03,520 --> 00:28:07,510
<font color="#E5E5E5">visual studio compiler into say like a</font>

785
00:28:05,919 --> 00:28:10,380
<font color="#CCCCCC">Delta compiler and just build up it's</font>

786
00:28:07,510 --> 00:28:12,490
<font color="#CCCCCC">kind of</font><font color="#E5E5E5"> like a it's analogous to a spam</font>

787
00:28:10,380 --> 00:28:13,780
<font color="#CCCCCC">evasion so you could start to</font><font color="#E5E5E5"> like put a</font>

788
00:28:12,490 --> 00:28:16,179
lot of<font color="#E5E5E5"> good words and things like</font><font color="#CCCCCC"> that</font>

789
00:28:13,780 --> 00:28:17,830
in a<font color="#E5E5E5"> a binary if they're bytes like good</font>

790
00:28:16,179 --> 00:28:19,870
<font color="#E5E5E5">bytes and things of that good sections</font>

791
00:28:17,830 --> 00:28:21,580
<font color="#CCCCCC">or you could statically defined imports</font>

792
00:28:19,870 --> 00:28:22,750
<font color="#E5E5E5">in things that</font><font color="#CCCCCC"> don't exactly define</font>

793
00:28:21,580 --> 00:28:25,120
imports you could identically load

794
00:28:22,750 --> 00:28:28,960
<font color="#E5E5E5">things like let's say someone order</font>

795
00:28:25,120 --> 00:28:33,520
<font color="#E5E5E5">detection to call something a mingw</font>

796
00:28:28,960 --> 00:28:35,290
binary right<font color="#CCCCCC"> based on it loading the GCC</font>

797
00:28:33,520 --> 00:28:36,760
runtime or<font color="#E5E5E5"> something that all those</font><font color="#CCCCCC"> DLL</font>

798
00:28:35,290 --> 00:28:38,290
so you could then<font color="#E5E5E5"> dynamically load those</font>

799
00:28:36,760 --> 00:28:40,330
<font color="#E5E5E5">in</font><font color="#CCCCCC"> Visual Studio</font><font color="#E5E5E5"> and maybe you'd get</font>

800
00:28:38,290 --> 00:28:41,889
some kind of evasion<font color="#E5E5E5"> like that that'd be</font>

801
00:28:40,330 --> 00:28:43,780
<font color="#E5E5E5">something to look at you definitely can</font>

802
00:28:41,890 --> 00:28:47,260
and I<font color="#E5E5E5"> think that's doable</font>

803
00:28:43,780 --> 00:28:48,580
<font color="#E5E5E5">there actually</font><font color="#CCCCCC"> some some rules online</font>

804
00:28:47,260 --> 00:28:52,480
like<font color="#CCCCCC"> euro rules online</font><font color="#E5E5E5"> that will look</font>

805
00:28:48,580 --> 00:28:54,760
for a<font color="#E5E5E5"> complan ation date of like 1970</font>

806
00:28:52,480 --> 00:28:56,710
like<font color="#CCCCCC"> epoch time in to actually detect</font>

807
00:28:54,760 --> 00:28:58,750
<font color="#CCCCCC">Delfy binaries so</font><font color="#E5E5E5"> maybe if you put that</font>

808
00:28:56,710 --> 00:28:59,860
actual tag<font color="#CCCCCC"> in your</font><font color="#E5E5E5"> header you could get</font>

809
00:28:58,750 --> 00:29:01,809
<font color="#E5E5E5">something like that definitely</font><font color="#CCCCCC"> possible</font>

810
00:28:59,860 --> 00:29:03,520
<font color="#CCCCCC">I</font><font color="#E5E5E5"> think it's possible it's if you think</font>

811
00:29:01,809 --> 00:29:07,620
it's cool maybe research it<font color="#E5E5E5"> and I</font><font color="#CCCCCC"> give</font>

812
00:29:03,520 --> 00:29:11,799
<font color="#E5E5E5">talk for sure</font><font color="#CCCCCC"> any other questions</font>

813
00:29:07,620 --> 00:29:14,229
<font color="#CCCCCC">no going</font><font color="#E5E5E5"> once going twice</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right cool</font>

814
00:29:11,799 --> 00:29:19,820
thank you guys I really<font color="#CCCCCC"> appreciate it</font>

815
00:29:14,230 --> 00:29:19,820
[Applause]

