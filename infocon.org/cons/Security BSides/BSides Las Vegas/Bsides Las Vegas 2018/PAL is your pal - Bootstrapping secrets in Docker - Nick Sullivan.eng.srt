1
00:00:00,000 --> 00:00:05,759
I am strongly encouraging women to

2
00:00:03,090 --> 00:00:08,309
participate our passwords come to get

3
00:00:05,759 --> 00:00:11,250
into information<font color="#E5E5E5"> security I have been</font>

4
00:00:08,309 --> 00:00:13,349
supervising master students that did a

5
00:00:11,250 --> 00:00:16,500
talk here last year<font color="#E5E5E5"> and she also spoke</font>

6
00:00:13,349 --> 00:00:19,320
at dot-com with a room completely full

7
00:00:16,500 --> 00:00:21,480
did a great auk and I really<font color="#E5E5E5"> really</font>

8
00:00:19,320 --> 00:00:25,560
appreciate to see<font color="#E5E5E5"> more women getting to</font>

9
00:00:21,480 --> 00:00:27,480
<font color="#CCCCCC">this</font><font color="#E5E5E5"> stuff so if any women have anything</font>

10
00:00:25,560 --> 00:00:32,189
to talk about related to passwords in

11
00:00:27,480 --> 00:00:34,680
any way<font color="#CCCCCC"> let me know okay Lucy okay so</font>

12
00:00:32,189 --> 00:00:37,680
this is nick<font color="#E5E5E5"> sullivan his head of</font>

13
00:00:34,680 --> 00:00:41,489
cryptography at<font color="#CCCCCC"> CloudFlare and last year</font>

14
00:00:37,680 --> 00:00:44,760
at McCarran Airport I was seriously

15
00:00:41,489 --> 00:00:47,459
freaking tired of Las Vegas<font color="#CCCCCC"> I was going</font>

16
00:00:44,760 --> 00:00:49,230
<font color="#CCCCCC">home and I'm just walking there like a</font>

17
00:00:47,460 --> 00:00:51,059
zombie<font color="#E5E5E5"> and suddenly there's this barely</font>

18
00:00:49,230 --> 00:00:53,578
guy appearing me coming<font color="#E5E5E5"> up to me like</font>

19
00:00:51,059 --> 00:00:55,769
hey you are your pet awesome right

20
00:00:53,579 --> 00:00:59,879
running password secure yeah that's me I

21
00:00:55,770 --> 00:01:01,649
want to<font color="#E5E5E5"> go home I was Nick and he said</font>

22
00:00:59,879 --> 00:01:03,870
yeah<font color="#CCCCCC"> you know dude I'm kind of working</font>

23
00:01:01,649 --> 00:01:06,180
on something and I might have something

24
00:01:03,870 --> 00:01:10,560
for you at a later point in time and

25
00:01:06,180 --> 00:01:13,560
look curious so next Sullivan and pal is

26
00:01:10,560 --> 00:01:19,710
your pal go ahead<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> thank you</font>

27
00:01:13,560 --> 00:01:22,680
thank you everybody and yes raucous

28
00:01:19,710 --> 00:01:24,658
audience thanks for coming it's 5pm for

29
00:01:22,680 --> 00:01:26,970
this talk and also everyone<font color="#E5E5E5"> online</font>

30
00:01:24,659 --> 00:01:31,380
thanks for<font color="#E5E5E5"> watching so I'm</font><font color="#CCCCCC"> going to talk</font>

31
00:01:26,970 --> 00:01:33,990
to<font color="#E5E5E5"> you guys about a tool a tool that we</font>

32
00:01:31,380 --> 00:01:36,240
built at<font color="#CCCCCC"> cloudflare to help manage</font>

33
00:01:33,990 --> 00:01:38,640
secrets and specifically secrets

34
00:01:36,240 --> 00:01:40,890
relating to orchestrated containerized

35
00:01:38,640 --> 00:01:44,040
environments and that thats sounds a

36
00:01:40,890 --> 00:01:46,350
little complex but<font color="#CCCCCC"> i'll get</font><font color="#E5E5E5"> into it it's</font>

37
00:01:44,040 --> 00:01:50,220
it's very simple so we we have<font color="#E5E5E5"> a problem</font>

38
00:01:46,350 --> 00:01:53,339
a very basic problem which is our can we

39
00:01:50,220 --> 00:01:55,770
have a container that's<font color="#E5E5E5"> running in in a</font>

40
00:01:53,340 --> 00:01:57,149
server that needs an API key and our

41
00:01:55,770 --> 00:01:59,939
docker container is built from source

42
00:01:57,149 --> 00:02:01,560
and we don't<font color="#E5E5E5"> want the API to be in</font>

43
00:01:59,939 --> 00:02:04,169
source of the API key to be in source

44
00:02:01,560 --> 00:02:09,449
control and the solution we came up with

45
00:02:04,170 --> 00:02:10,739
was excuse me basically encrypt the

46
00:02:09,449 --> 00:02:13,750
secret before putting in the container

47
00:02:10,739 --> 00:02:15,880
and run a trusted agent on the ho

48
00:02:13,750 --> 00:02:17,590
that's underneath the layer where the

49
00:02:15,880 --> 00:02:20,460
docker container runs that has access to

50
00:02:17,590 --> 00:02:22,780
the decryption key for the secret and

51
00:02:20,460 --> 00:02:24,910
when you run your docker container have

52
00:02:22,780 --> 00:02:26,440
a special entry point that talks<font color="#E5E5E5"> to the</font>

53
00:02:24,910 --> 00:02:29,049
<font color="#CCCCCC">hosts to</font><font color="#E5E5E5"> get the secrets decrypted</font>

54
00:02:26,440 --> 00:02:31,660
before it runs and that's the essence of

55
00:02:29,050 --> 00:02:35,110
what pal is so if you need something

56
00:02:31,660 --> 00:02:37,150
that does that this is your tool so

57
00:02:35,110 --> 00:02:41,500
<font color="#E5E5E5">where passwords gone right so what does</font>

58
00:02:37,150 --> 00:02:43,000
this have to do with passwords well I it

59
00:02:41,500 --> 00:02:44,620
it doesn't directly have to do with

60
00:02:43,000 --> 00:02:46,959
passwords but it sort of has to<font color="#E5E5E5"> do with</font>

61
00:02:44,620 --> 00:02:50,440
the broader concept of secrets and

62
00:02:46,959 --> 00:02:52,930
secret management and typically secrets

63
00:02:50,440 --> 00:02:55,420
used for authentication come in in three

64
00:02:52,930 --> 00:02:57,610
major flavors there are sort of sub

65
00:02:55,420 --> 00:03:00,458
flavors and subtypes but you have

66
00:02:57,610 --> 00:03:03,250
passwords<font color="#E5E5E5"> you have bearer tokens which</font>

67
00:03:00,459 --> 00:03:05,650
are strings or objects that represent an

68
00:03:03,250 --> 00:03:08,950
authentication and you have private keys

69
00:03:05,650 --> 00:03:10,630
or secret keys now passwords as you

70
00:03:08,950 --> 00:03:13,660
probably heard hundred times<font color="#E5E5E5"> over the</font>

71
00:03:10,630 --> 00:03:15,640
last two days these are these are stored

72
00:03:13,660 --> 00:03:17,350
by human memory these are things that

73
00:03:15,640 --> 00:03:20,679
people are supposed<font color="#CCCCCC"> to remember</font><font color="#E5E5E5"> and</font>

74
00:03:17,350 --> 00:03:22,060
manually enter into computers and if

75
00:03:20,680 --> 00:03:23,260
you're sending<font color="#E5E5E5"> them from a client to a</font>

76
00:03:22,060 --> 00:03:25,540
server should be over an encrypted

77
00:03:23,260 --> 00:03:29,730
transport or someone can can copy it and

78
00:03:25,540 --> 00:03:31,959
replay it by contrast bearer tokens are

79
00:03:29,730 --> 00:03:33,340
high entropy strings there are things

80
00:03:31,959 --> 00:03:35,260
that a human being is not going<font color="#E5E5E5"> to</font>

81
00:03:33,340 --> 00:03:38,080
<font color="#CCCCCC">remember</font><font color="#E5E5E5"> it's something that you store</font>

82
00:03:35,260 --> 00:03:41,019
in your computer's memory and typically

83
00:03:38,080 --> 00:03:45,090
you can get them<font color="#E5E5E5"> in exchange for a human</font>

84
00:03:41,019 --> 00:03:48,730
oriented password authentication and

85
00:03:45,090 --> 00:03:51,700
there's examples<font color="#E5E5E5"> of this abound right</font>

86
00:03:48,730 --> 00:03:54,790
cookies are an example API keys are an

87
00:03:51,700 --> 00:03:57,820
<font color="#CCCCCC">example and these again are</font><font color="#E5E5E5"> needed an</font>

88
00:03:54,790 --> 00:03:59,260
encrypted transport there's also an

89
00:03:57,820 --> 00:04:01,720
expectation of these of that they have a

90
00:03:59,260 --> 00:04:03,940
certain<font color="#E5E5E5"> lifetime which is may not be the</font>

91
00:04:01,720 --> 00:04:06,370
case with passwords the third type of

92
00:04:03,940 --> 00:04:10,540
<font color="#E5E5E5">authentication we can think of as</font>

93
00:04:06,370 --> 00:04:12,430
private keys so when these are kept on

94
00:04:10,540 --> 00:04:14,590
your on your<font color="#E5E5E5"> client</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> they're they're</font>

95
00:04:12,430 --> 00:04:17,590
out there<font color="#CCCCCC"> often times</font><font color="#E5E5E5"> passphrase but</font>

96
00:04:14,590 --> 00:04:19,780
protected so they are encrypted on disk

97
00:04:17,589 --> 00:04:21,668
and unlocked with a human memorable

98
00:04:19,779 --> 00:04:25,299
phrase that's that's a lot like like a

99
00:04:21,668 --> 00:04:27,609
pass password and win<font color="#CCCCCC"> unlock you keep</font>

100
00:04:25,300 --> 00:04:30,909
them in<font color="#E5E5E5"> this sort of persistent memory</font>

101
00:04:27,610 --> 00:04:32,530
on the system and they allow you to do

102
00:04:30,909 --> 00:04:35,500
some really nice things such as

103
00:04:32,530 --> 00:04:37,599
digitally<font color="#CCCCCC"> sign requests so that that</font>

104
00:04:35,500 --> 00:04:39,310
your authentication doesn't have to

105
00:04:37,599 --> 00:04:43,210
necessarily go over an encrypted

106
00:04:39,310 --> 00:04:45,400
transport but this complicated nature of

107
00:04:43,210 --> 00:04:47,229
its it's a key sort of a random long

108
00:04:45,400 --> 00:04:49,989
string makes it very difficult to<font color="#E5E5E5"> be</font>

109
00:04:47,229 --> 00:04:52,479
portable another<font color="#E5E5E5"> example of this would</font>

110
00:04:49,990 --> 00:04:54,340
be your is two-factor authentication so

111
00:04:52,479 --> 00:04:55,688
the codes that<font color="#E5E5E5"> you generate from</font>

112
00:04:54,340 --> 00:04:58,239
two-factor authentication these are

113
00:04:55,689 --> 00:05:02,129
derived<font color="#E5E5E5"> from a key that belongs</font><font color="#CCCCCC"> to a</font>

114
00:04:58,240 --> 00:05:05,199
secret<font color="#CCCCCC"> key that belongs</font><font color="#E5E5E5"> to the client so</font>

115
00:05:02,129 --> 00:05:06,610
passwords as sort of human memorable

116
00:05:05,199 --> 00:05:08,789
things they have these requirements of

117
00:05:06,610 --> 00:05:12,759
being strong sort of unpredictable and

118
00:05:08,789 --> 00:05:15,729
different per site this is<font color="#E5E5E5"> oftentimes</font>

119
00:05:12,759 --> 00:05:18,909
very hard for human beings to handle

120
00:05:15,729 --> 00:05:23,199
because<font color="#E5E5E5"> now this is a this is from dash</font>

121
00:05:18,909 --> 00:05:24,699
lanes blog people have on the order of<font color="#E5E5E5"> a</font>

122
00:05:23,199 --> 00:05:26,349
<font color="#E5E5E5">hundred or so different login so</font>

123
00:05:24,699 --> 00:05:29,139
remembering a different password for

124
00:05:26,349 --> 00:05:33,520
each one of these is is is a serious

125
00:05:29,139 --> 00:05:34,629
mental challenge so for remembering

126
00:05:33,520 --> 00:05:38,289
passwords and for dealing with

127
00:05:34,629 --> 00:05:40,270
<font color="#E5E5E5">authentication we've derived some of</font>

128
00:05:38,289 --> 00:05:42,339
these tools that sort<font color="#E5E5E5"> of enhance our</font>

129
00:05:40,270 --> 00:05:45,159
capabilities to make us kind of

130
00:05:42,339 --> 00:05:47,139
superhuman password remembering folks

131
00:05:45,159 --> 00:05:49,810
and and password managers are one

132
00:05:47,139 --> 00:05:52,539
<font color="#CCCCCC">example so they support things like</font>

133
00:05:49,810 --> 00:05:55,060
sinking across devices having a

134
00:05:52,539 --> 00:05:58,169
passphrase that kind<font color="#E5E5E5"> of turns your</font>

135
00:05:55,060 --> 00:06:00,610
password into the same security style as

136
00:05:58,169 --> 00:06:03,669
as a private key would so you<font color="#E5E5E5"> have a</font>

137
00:06:00,610 --> 00:06:05,740
passphrase to unlock it<font color="#E5E5E5"> and you can</font>

138
00:06:03,669 --> 00:06:07,508
configure permissions as to which

139
00:06:05,740 --> 00:06:10,180
applications have access to these

140
00:06:07,509 --> 00:06:11,680
passwords at one time and they have

141
00:06:10,180 --> 00:06:13,960
<font color="#E5E5E5">another feature called strong password</font>

142
00:06:11,680 --> 00:06:16,990
generation which some people use some

143
00:06:13,960 --> 00:06:18,729
<font color="#E5E5E5">don't but it allows you to have turn a</font>

144
00:06:16,990 --> 00:06:21,580
password into essentially<font color="#E5E5E5"> what a bearer</font>

145
00:06:18,729 --> 00:06:23,349
token is like a long entropy ridden

146
00:06:21,580 --> 00:06:25,990
string that makes it a lot harder to

147
00:06:23,349 --> 00:06:27,938
crack but<font color="#CCCCCC"> then it also makes it so that</font>

148
00:06:25,990 --> 00:06:29,770
it's not something that it is human

149
00:06:27,939 --> 00:06:33,699
memorable you still have to remember<font color="#E5E5E5"> the</font>

150
00:06:29,770 --> 00:06:35,080
passphrase to unlock the passwords but

151
00:06:33,699 --> 00:06:38,529
<font color="#E5E5E5">this is this is one example of a tool</font>

152
00:06:35,080 --> 00:06:40,120
people use and when you're it when

153
00:06:38,529 --> 00:06:41,380
you're at in an enterprise or an

154
00:06:40,120 --> 00:06:44,650
organization there's

155
00:06:41,380 --> 00:06:46,600
oftentimes shared passwords and these

156
00:06:44,650 --> 00:06:48,400
are sometimes passed around with sticky

157
00:06:46,600 --> 00:06:49,750
notes or you know email the

158
00:06:48,400 --> 00:06:53,140
administrator and these sort of things

159
00:06:49,750 --> 00:06:55,630
very<font color="#CCCCCC"> very bad practices but</font><font color="#E5E5E5"> um another</font>

160
00:06:53,140 --> 00:06:57,430
tool was built for this and this is<font color="#E5E5E5"> the</font>

161
00:06:55,630 --> 00:07:00,330
set of enterprise password managers and

162
00:06:57,430 --> 00:07:03,340
this is kind<font color="#CCCCCC"> of as like</font><font color="#E5E5E5"> a centralized</font>

163
00:07:00,330 --> 00:07:06,550
police officer<font color="#E5E5E5"> with a with a case right</font>

164
00:07:03,340 --> 00:07:08,409
<font color="#CCCCCC">there that that has a list of policies</font>

165
00:07:06,550 --> 00:07:11,470
that<font color="#CCCCCC"> it says who is allowed to have</font>

166
00:07:08,410 --> 00:07:14,560
access<font color="#CCCCCC"> to these passwords and in</font><font color="#E5E5E5"> this</font>

167
00:07:11,470 --> 00:07:17,710
example someone wants access to the visa

168
00:07:14,560 --> 00:07:20,980
account and they had the bootstrap this

169
00:07:17,710 --> 00:07:23,620
based on regular authentication so the

170
00:07:20,980 --> 00:07:25,780
user says hey I'm this person<font color="#E5E5E5"> here's</font><font color="#CCCCCC"> my</font>

171
00:07:23,620 --> 00:07:28,780
credentials and the server will<font color="#E5E5E5"> say okay</font>

172
00:07:25,780 --> 00:07:31,900
well here's a temporary use for for this

173
00:07:28,780 --> 00:07:34,270
<font color="#E5E5E5">sort of shared password so password</font>

174
00:07:31,900 --> 00:07:37,270
managers and enterprise password

175
00:07:34,270 --> 00:07:39,099
managers are really human centric

176
00:07:37,270 --> 00:07:41,740
they're they're built with people in

177
00:07:39,100 --> 00:07:44,320
mind they're built so that you have

178
00:07:41,740 --> 00:07:47,110
manual interaction<font color="#E5E5E5"> there they're built</font>

179
00:07:44,320 --> 00:07:52,480
so that individuals can manage secrets

180
00:07:47,110 --> 00:07:54,550
and and these tools are are very useful

181
00:07:52,480 --> 00:07:56,380
<font color="#CCCCCC">and</font><font color="#E5E5E5"> very helpful so but but this is not</font>

182
00:07:54,550 --> 00:07:59,650
what what my talk is about my talk is

183
00:07:56,380 --> 00:08:02,830
about the other side<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the story not</font>

184
00:07:59,650 --> 00:08:04,120
clients as as sort of computers or

185
00:08:02,830 --> 00:08:06,669
phones or something<font color="#E5E5E5"> like this or</font>

186
00:08:04,120 --> 00:08:11,490
individuals but it's more as as as

187
00:08:06,670 --> 00:08:14,130
server so servers need secrets<font color="#CCCCCC"> too and</font>

188
00:08:11,490 --> 00:08:16,510
the way<font color="#E5E5E5"> that people manage secrets</font>

189
00:08:14,130 --> 00:08:19,900
passwords and these sort of credentials

190
00:08:16,510 --> 00:08:22,620
for servers are very<font color="#CCCCCC"> different than then</font>

191
00:08:19,900 --> 00:08:25,359
the human centric password-based

192
00:08:22,620 --> 00:08:28,240
mechanisms because<font color="#E5E5E5"> computers are not</font>

193
00:08:25,360 --> 00:08:30,490
people right so servers need secrets and

194
00:08:28,240 --> 00:08:34,120
just as an example<font color="#E5E5E5"> if you're building a</font>

195
00:08:30,490 --> 00:08:36,640
web service or you have some sort<font color="#E5E5E5"> of</font>

196
00:08:34,120 --> 00:08:39,520
server up in the cloud that does some

197
00:08:36,640 --> 00:08:42,098
<font color="#CCCCCC">things for</font><font color="#E5E5E5"> for customers or for people</font>

198
00:08:39,520 --> 00:08:44,020
you may need API keys you might want<font color="#E5E5E5"> to</font>

199
00:08:42,099 --> 00:08:46,330
talk to<font color="#E5E5E5"> other servers doing so you might</font>

200
00:08:44,020 --> 00:08:49,900
need credentials to access dedicated

201
00:08:46,330 --> 00:08:52,810
databases or you might<font color="#E5E5E5"> want to be the</font>

202
00:08:49,900 --> 00:08:53,600
terminating layer for HTTPS or TLS and

203
00:08:52,810 --> 00:08:56,420
and keep the

204
00:08:53,600 --> 00:08:57,829
<font color="#CCCCCC">driving keys so this is these are things</font>

205
00:08:56,420 --> 00:09:02,599
I don't recommend but what some people

206
00:08:57,829 --> 00:09:04,069
do in this case is they have well the

207
00:09:02,600 --> 00:09:06,470
very the very first thing<font color="#CCCCCC"> that you can</font>

208
00:09:04,069 --> 00:09:09,110
do is if<font color="#E5E5E5"> you manually manage your server</font>

209
00:09:06,470 --> 00:09:11,839
you can just log in<font color="#CCCCCC"> and write the secret</font>

210
00:09:09,110 --> 00:09:13,850
into the server but if you're<font color="#CCCCCC"> working at</font>

211
00:09:11,839 --> 00:09:16,579
any<font color="#E5E5E5"> sort of scale this this sort of</font>

212
00:09:13,850 --> 00:09:20,000
<font color="#CCCCCC">manual work is is automated by a</font>

213
00:09:16,579 --> 00:09:21,769
configuration management system and what

214
00:09:20,000 --> 00:09:23,149
<font color="#CCCCCC">people can do is put the secrets into</font>

215
00:09:21,769 --> 00:09:25,220
the configuration management system

216
00:09:23,149 --> 00:09:28,279
these are these<font color="#E5E5E5"> are things like ansible</font>

217
00:09:25,220 --> 00:09:30,769
or salt or chef or these these tools

218
00:09:28,279 --> 00:09:33,439
that make it simple to configure your

219
00:09:30,769 --> 00:09:35,449
servers and then they take<font color="#CCCCCC"> the secrets</font>

220
00:09:33,440 --> 00:09:37,670
and they put them on disk or in

221
00:09:35,449 --> 00:09:39,170
environment variables and then they<font color="#CCCCCC"> just</font>

222
00:09:37,670 --> 00:09:41,719
trust whatever applications<font color="#E5E5E5"> around the</font>

223
00:09:39,170 --> 00:09:45,469
machine to access the right variables

224
00:09:41,720 --> 00:09:46,730
using system level controls so when

225
00:09:45,470 --> 00:09:48,860
you're<font color="#CCCCCC"> talking about environment</font>

226
00:09:46,730 --> 00:09:51,500
variables you you can<font color="#E5E5E5"> define an</font>

227
00:09:48,860 --> 00:09:55,430
environment variable ahead of running a

228
00:09:51,500 --> 00:09:57,560
command in UNIX and other other services

229
00:09:55,430 --> 00:09:59,930
can can find out what that is<font color="#E5E5E5"> by looking</font>

230
00:09:57,560 --> 00:10:02,209
<font color="#E5E5E5">to see what the command was to operate</font>

231
00:09:59,930 --> 00:10:04,069
these these these functions so you're

232
00:10:02,209 --> 00:10:07,339
really trusting a lot of system

233
00:10:04,069 --> 00:10:10,099
processes to keep these secrets isolated

234
00:10:07,339 --> 00:10:12,560
from one service to another as I

235
00:10:10,100 --> 00:10:13,759
mentioned<font color="#CCCCCC"> system ACLs so you can have</font>

236
00:10:12,560 --> 00:10:19,040
services running under different

237
00:10:13,759 --> 00:10:21,740
accounts and and this this is really you

238
00:10:19,040 --> 00:10:24,230
know hard<font color="#E5E5E5"> to manage and easy to break I</font>

239
00:10:21,740 --> 00:10:26,360
privilege escalation is one of these one

240
00:10:24,230 --> 00:10:29,420
<font color="#E5E5E5">of these bugs that these bugs that we</font>

241
00:10:26,360 --> 00:10:31,819
see all<font color="#CCCCCC"> the time and relying on</font><font color="#E5E5E5"> this is</font>

242
00:10:29,420 --> 00:10:34,550
is potentially not the safest thing to

243
00:10:31,819 --> 00:10:36,560
do if you're working<font color="#E5E5E5"> at with a bunch of</font>

244
00:10:34,550 --> 00:10:38,000
developers you may have a development

245
00:10:36,560 --> 00:10:41,750
environment and a production environment

246
00:10:38,000 --> 00:10:44,060
and if you<font color="#E5E5E5"> just keep your secrets in</font>

247
00:10:41,750 --> 00:10:45,800
configuration management then all your

248
00:10:44,060 --> 00:10:47,599
developers have access to it as<font color="#CCCCCC"> well if</font>

249
00:10:45,800 --> 00:10:49,310
they want to<font color="#E5E5E5"> build a coherent</font>

250
00:10:47,600 --> 00:10:51,889
development environment and be able to

251
00:10:49,310 --> 00:10:54,290
test these things and that means that

252
00:10:51,889 --> 00:10:56,899
<font color="#CCCCCC">your configuration management is in a</font>

253
00:10:54,290 --> 00:11:00,019
source control that's accessible by non

254
00:10:56,899 --> 00:11:01,790
operators and that extends your trust to

255
00:11:00,019 --> 00:11:03,889
everybody at your<font color="#E5E5E5"> company who's</font>

256
00:11:01,790 --> 00:11:06,079
potentially a developer and this this is

257
00:11:03,889 --> 00:11:07,130
not really the<font color="#E5E5E5"> this is this is the way</font>

258
00:11:06,079 --> 00:11:08,750
that some startups do

259
00:11:07,130 --> 00:11:11,840
but<font color="#E5E5E5"> this is this is not</font><font color="#CCCCCC"> really a safe</font>

260
00:11:08,750 --> 00:11:13,550
long-term approach and and<font color="#E5E5E5"> furthermore</font>

261
00:11:11,840 --> 00:11:17,390
applications are developed by different

262
00:11:13,550 --> 00:11:18,979
teams so if you have someone<font color="#E5E5E5"> on some</font>

263
00:11:17,390 --> 00:11:22,100
team runs an application<font color="#E5E5E5"> on your server</font>

264
00:11:18,980 --> 00:11:23,720
that is malicious lead or or not<font color="#E5E5E5"> trying</font>

265
00:11:22,100 --> 00:11:25,430
to access secrets that are only used for

266
00:11:23,720 --> 00:11:31,130
other<font color="#CCCCCC"> services you don't really have</font>

267
00:11:25,430 --> 00:11:33,079
this strong boundary level here now this

268
00:11:31,130 --> 00:11:36,020
this<font color="#CCCCCC"> is obviously sort of a straw man</font>

269
00:11:33,080 --> 00:11:37,580
but but people do implement their

270
00:11:36,020 --> 00:11:40,370
servers and protect them in<font color="#E5E5E5"> these ways</font>

271
00:11:37,580 --> 00:11:45,140
so what<font color="#CCCCCC"> are some potential solutions for</font>

272
00:11:40,370 --> 00:11:46,700
<font color="#E5E5E5">this well more</font><font color="#CCCCCC"> commonly people do this</font>

273
00:11:45,140 --> 00:11:49,730
thing where they encrypt the secrets in

274
00:11:46,700 --> 00:11:51,290
source control and then they take their

275
00:11:49,730 --> 00:11:53,450
set of<font color="#E5E5E5"> secrets they make a parallel set</font>

276
00:11:51,290 --> 00:11:55,699
for development to talk to development

277
00:11:53,450 --> 00:11:57,650
servers and a set for production that's

278
00:11:55,700 --> 00:12:00,110
encrypted that can<font color="#E5E5E5"> only talk to other</font>

279
00:11:57,650 --> 00:12:03,829
production servers and the secrets and

280
00:12:00,110 --> 00:12:06,470
the configuration management they are

281
00:12:03,830 --> 00:12:08,480
encrypted with a key that's only held by

282
00:12:06,470 --> 00:12:11,840
one secure box and this is this is sort

283
00:12:08,480 --> 00:12:14,270
of one<font color="#E5E5E5"> one node that is deploying the</font>

284
00:12:11,840 --> 00:12:17,030
configuration outwards and this is this

285
00:12:14,270 --> 00:12:18,560
you reduce<font color="#CCCCCC"> your trust space from source</font>

286
00:12:17,030 --> 00:12:20,360
control management which is accessible

287
00:12:18,560 --> 00:12:22,400
to<font color="#E5E5E5"> everybody to some one dedicated</font>

288
00:12:20,360 --> 00:12:26,390
machine that you can lock down the

289
00:12:22,400 --> 00:12:28,160
access to and and when you enter<font color="#E5E5E5"> new add</font>

290
00:12:26,390 --> 00:12:29,390
new machines into your system they<font color="#CCCCCC"> have</font>

291
00:12:28,160 --> 00:12:32,329
to authenticate with this configuration

292
00:12:29,390 --> 00:12:35,180
management master node and it will be

293
00:12:32,330 --> 00:12:37,400
able<font color="#E5E5E5"> to distribute the secrets so this</font>

294
00:12:35,180 --> 00:12:39,620
is<font color="#CCCCCC"> this is not something new there are</font>

295
00:12:37,400 --> 00:12:41,449
secret management tools and this is this

296
00:12:39,620 --> 00:12:44,420
is something<font color="#CCCCCC"> that has a bounded over the</font>

297
00:12:41,450 --> 00:12:46,460
last couple years in terms<font color="#E5E5E5"> of open</font>

298
00:12:44,420 --> 00:12:50,000
source solutions so you may have<font color="#E5E5E5"> heard</font>

299
00:12:46,460 --> 00:12:52,070
of vault or knocks<font color="#E5E5E5"> from Pinterest or key</font>

300
00:12:50,000 --> 00:12:55,100
Wiz from square there's a bunch of<font color="#E5E5E5"> other</font>

301
00:12:52,070 --> 00:12:57,340
ones lift built their own but<font color="#CCCCCC"> they all</font>

302
00:12:55,100 --> 00:13:02,510
have sort of the similar architecture

303
00:12:57,340 --> 00:13:05,360
and that is essentially you trust your

304
00:13:02,510 --> 00:13:08,060
machines on first use so whenever<font color="#CCCCCC"> you</font>

305
00:13:05,360 --> 00:13:10,190
provision<font color="#CCCCCC"> your machine</font><font color="#E5E5E5"> you give it an</font>

306
00:13:08,060 --> 00:13:14,030
identity and then this identity is

307
00:13:10,190 --> 00:13:16,880
what's used to you sort<font color="#E5E5E5"> of manually</font>

308
00:13:14,030 --> 00:13:18,800
accept these machines as part of your

309
00:13:16,880 --> 00:13:20,550
system and<font color="#E5E5E5"> trust it on the first time</font>

310
00:13:18,800 --> 00:13:22,019
you see it so

311
00:13:20,550 --> 00:13:23,550
you create a machine identity at

312
00:13:22,019 --> 00:13:25,850
provisioning time and then you can

313
00:13:23,550 --> 00:13:29,729
create this identity keep air and and

314
00:13:25,850 --> 00:13:33,720
register it and this<font color="#E5E5E5"> is this is a very</font>

315
00:13:29,730 --> 00:13:36,540
<font color="#E5E5E5">common pattern and as I</font><font color="#CCCCCC"> mentioned balt</font>

316
00:13:33,720 --> 00:13:39,540
kiwis knocks these sort of take this to

317
00:13:36,540 --> 00:13:43,680
the next level but um the basic<font color="#E5E5E5"> idea is</font>

318
00:13:39,540 --> 00:13:45,360
trust on first use and this identity

319
00:13:43,680 --> 00:13:47,339
that's provision to the machines is used

320
00:13:45,360 --> 00:13:51,860
to bootstrap a secret management tool

321
00:13:47,339 --> 00:13:53,579
and so so I mentioned<font color="#CCCCCC"> a few</font>

322
00:13:51,860 --> 00:13:55,620
configuration management tools before

323
00:13:53,579 --> 00:13:58,229
they have these plugins that do this so

324
00:13:55,620 --> 00:14:00,959
salt has a gpg plug-in where you give a

325
00:13:58,230 --> 00:14:03,420
GP g master<font color="#E5E5E5"> key to the salt master chef</font>

326
00:14:00,959 --> 00:14:08,750
has something called encrypted<font color="#E5E5E5"> d-bags</font>

327
00:14:03,420 --> 00:14:11,130
which is just really funny to say and

328
00:14:08,750 --> 00:14:12,870
it's involved keywords and<font color="#CCCCCC"> knox are a</font>

329
00:14:11,130 --> 00:14:14,820
little more a little more complex but

330
00:14:12,870 --> 00:14:17,310
they have really sort of interesting

331
00:14:14,820 --> 00:14:19,230
password rotation and an<font color="#E5E5E5"> account</font>

332
00:14:17,310 --> 00:14:21,540
rotation features<font color="#CCCCCC"> built in so once you</font>

333
00:14:19,230 --> 00:14:23,360
once you log into vault you kind of can

334
00:14:21,540 --> 00:14:25,560
it can deliver all the secrets to you

335
00:14:23,360 --> 00:14:27,690
kiwis has this nice thing where it

336
00:14:25,560 --> 00:14:29,399
mounts a fuse file system like that

337
00:14:27,690 --> 00:14:31,170
looks<font color="#E5E5E5"> like a file system that holds the</font>

338
00:14:29,399 --> 00:14:33,570
secrets and whenever you access them it

339
00:14:31,170 --> 00:14:37,020
does a secure tunnel back to a central

340
00:14:33,570 --> 00:14:38,850
secret management server but as I

341
00:14:37,020 --> 00:14:41,100
mentioned<font color="#CCCCCC"> the downsides here are that</font>

342
00:14:38,850 --> 00:14:44,100
you have to have a secure secret server

343
00:14:41,100 --> 00:14:48,000
already running so this kind<font color="#E5E5E5"> of makes</font>

344
00:14:44,100 --> 00:14:50,399
makes a<font color="#E5E5E5"> 22 class system really where you</font>

345
00:14:48,000 --> 00:14:52,920
have some small trusted machines and

346
00:14:50,399 --> 00:14:57,180
then<font color="#E5E5E5"> this lets you bootstrap and send</font>

347
00:14:52,920 --> 00:14:58,290
secrets to all the rest of<font color="#E5E5E5"> them so for</font>

348
00:14:57,180 --> 00:15:00,510
<font color="#CCCCCC">people who don't do a lot of server</font>

349
00:14:58,290 --> 00:15:02,339
development there you<font color="#E5E5E5"> can you can think</font>

350
00:15:00,510 --> 00:15:05,459
<font color="#E5E5E5">of this here's an analogy for this which</font>

351
00:15:02,339 --> 00:15:08,699
is kind<font color="#E5E5E5"> of a permission system like iOS</font>

352
00:15:05,459 --> 00:15:10,410
or<font color="#CCCCCC"> Android has and you can think of your</font>

353
00:15:08,699 --> 00:15:11,880
<font color="#CCCCCC">machine as an application</font><font color="#E5E5E5"> your</font>

354
00:15:10,410 --> 00:15:13,740
permission settings as this

355
00:15:11,880 --> 00:15:15,750
configuration management system so if

356
00:15:13,740 --> 00:15:17,970
you approve and disapprove different

357
00:15:15,750 --> 00:15:19,709
accounts too sorry different

358
00:15:17,970 --> 00:15:21,779
applications to do different things this

359
00:15:19,709 --> 00:15:23,640
is this is like configuration management

360
00:15:21,779 --> 00:15:26,550
and your secrets would be system

361
00:15:23,640 --> 00:15:28,680
resources so if you get a<font color="#CCCCCC"> new</font>

362
00:15:26,550 --> 00:15:31,020
application it can try to access these

363
00:15:28,680 --> 00:15:32,939
secrets if it is in the proper

364
00:15:31,020 --> 00:15:34,390
configuration management system and and

365
00:15:32,940 --> 00:15:36,010
that's<font color="#CCCCCC"> that's</font>

366
00:15:34,390 --> 00:15:41,550
one way<font color="#E5E5E5"> of thinking thinking about it</font>

367
00:15:36,010 --> 00:15:44,439
and this is this is great but we're in

368
00:15:41,550 --> 00:15:46,810
2016 so a lot of these<font color="#E5E5E5"> things don't</font>

369
00:15:44,440 --> 00:15:48,670
don't often apply so if it's great if

370
00:15:46,810 --> 00:15:50,380
you have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> single team if you have a</font>

371
00:15:48,670 --> 00:15:52,660
shared configuration management system

372
00:15:50,380 --> 00:15:55,090
for<font color="#E5E5E5"> your entire company or your number</font>

373
00:15:52,660 --> 00:15:58,329
of servers it scales to the point where

374
00:15:55,090 --> 00:16:00,960
you can manually approve them all this

375
00:15:58,330 --> 00:16:04,000
is the third<font color="#CCCCCC"> ones typically the case but</font>

376
00:16:00,960 --> 00:16:06,190
this is not how modern server

377
00:16:04,000 --> 00:16:10,140
deployments are going in<font color="#E5E5E5"> the future</font>

378
00:16:06,190 --> 00:16:12,190
we've got this<font color="#E5E5E5"> there's this trend docker</font>

379
00:16:10,140 --> 00:16:13,210
doctor doctor doctor everywhere you've

380
00:16:12,190 --> 00:16:15,880
heard you've heard<font color="#CCCCCC"> about this a lot</font>

381
00:16:13,210 --> 00:16:18,520
doctor is not<font color="#CCCCCC"> the only technology in the</font>

382
00:16:15,880 --> 00:16:21,900
space but generally<font color="#E5E5E5"> containerized</font>

383
00:16:18,520 --> 00:16:24,850
deployments are becoming very<font color="#CCCCCC"> popular so</font>

384
00:16:21,900 --> 00:16:26,290
in the last<font color="#CCCCCC"> ten years</font><font color="#E5E5E5"> or so it was more</font>

385
00:16:24,850 --> 00:16:28,990
more typically you<font color="#CCCCCC"> have a virtual</font>

386
00:16:26,290 --> 00:16:32,110
machine that has a full machine image

387
00:16:28,990 --> 00:16:34,180
and in in docker is sort of a more

388
00:16:32,110 --> 00:16:37,980
compressed version of<font color="#CCCCCC"> that and if</font><font color="#E5E5E5"> if you</font>

389
00:16:34,180 --> 00:16:41,530
look at this diagram it sort of explains

390
00:16:37,980 --> 00:16:43,450
how the in the old case which is you

391
00:16:41,530 --> 00:16:45,579
have an entire guest OS and this sits on

392
00:16:43,450 --> 00:16:48,100
a hypervisor and you can have entire

393
00:16:45,580 --> 00:16:50,410
systems going one two three and you can

394
00:16:48,100 --> 00:16:52,810
use trust on first use to bootstrap the

395
00:16:50,410 --> 00:16:55,390
secrets for those but in docker it's a

396
00:16:52,810 --> 00:16:57,130
little more compressed you you have not

397
00:16:55,390 --> 00:17:00,310
<font color="#E5E5E5">an entire operating system but you just</font>

398
00:16:57,130 --> 00:17:02,800
have a small amount<font color="#CCCCCC"> of just</font><font color="#E5E5E5"> the code you</font>

399
00:17:00,310 --> 00:17:06,730
need and sort of<font color="#E5E5E5"> a shared substrate of</font>

400
00:17:02,800 --> 00:17:09,190
<font color="#E5E5E5">the system and this changes things quite</font>

401
00:17:06,730 --> 00:17:12,819
a<font color="#CCCCCC"> bit if you if you consider your data</font>

402
00:17:09,190 --> 00:17:14,470
center because there have been<font color="#CCCCCC"> a lot of</font>

403
00:17:12,819 --> 00:17:15,929
tools built on top of it<font color="#CCCCCC"> to make an</font>

404
00:17:14,470 --> 00:17:20,050
entire data center and<font color="#CCCCCC"> a lot of machines</font>

405
00:17:15,930 --> 00:17:24,370
look more more like more like one

406
00:17:20,050 --> 00:17:27,459
computer than like individual servers so

407
00:17:24,369 --> 00:17:29,889
may so sand and COO<font color="#CCCCCC"> burnetii is darker</font>

408
00:17:27,459 --> 00:17:33,100
swarm these are these orchestration

409
00:17:29,890 --> 00:17:34,990
frameworks that that<font color="#E5E5E5"> really make it so</font>

410
00:17:33,100 --> 00:17:38,770
that when you deliver when you when you

411
00:17:34,990 --> 00:17:40,300
deploy services on to your servers you

412
00:17:38,770 --> 00:17:42,340
don't know how many servers there are

413
00:17:40,300 --> 00:17:45,639
and you don't<font color="#E5E5E5"> really care you're just</font>

414
00:17:42,340 --> 00:17:47,770
treating<font color="#E5E5E5"> the entire set of servers as an</font>

415
00:17:45,640 --> 00:17:48,380
operating system and you use<font color="#CCCCCC"> may sauce</font>

416
00:17:47,770 --> 00:17:50,720
or something

417
00:17:48,380 --> 00:17:54,410
this to distribute resources for<font color="#CCCCCC"> it just</font>

418
00:17:50,720 --> 00:17:57,260
like an operating system would so if you

419
00:17:54,410 --> 00:17:59,210
can if you compare your applications

420
00:17:57,260 --> 00:18:00,500
inside a virtual machine to your

421
00:17:59,210 --> 00:18:03,080
applications inside of a docker

422
00:18:00,500 --> 00:18:06,290
container there are some very stark

423
00:18:03,080 --> 00:18:07,850
important differences and in the docker

424
00:18:06,290 --> 00:18:11,090
world your applications are ephemeral

425
00:18:07,850 --> 00:18:13,040
you can they can<font color="#CCCCCC"> go</font><font color="#E5E5E5"> away they're</font>

426
00:18:11,090 --> 00:18:16,820
designed to to be able<font color="#E5E5E5"> to shut down and</font>

427
00:18:13,040 --> 00:18:21,590
spin up<font color="#E5E5E5"> all all the time so for example</font>

428
00:18:16,820 --> 00:18:23,419
in<font color="#E5E5E5"> Marathon which is the in may so sits</font>

429
00:18:21,590 --> 00:18:24,860
it's sort<font color="#CCCCCC"> of the equivalent of system d</font>

430
00:18:23,420 --> 00:18:26,660
they have another<font color="#E5E5E5"> thing called Chronos</font>

431
00:18:24,860 --> 00:18:29,179
which is this is the equivalent of chron

432
00:18:26,660 --> 00:18:31,550
but for marathon there's a button in the

433
00:18:29,180 --> 00:18:33,050
UI that says scale you say scale and

434
00:18:31,550 --> 00:18:34,820
then<font color="#E5E5E5"> you say how many versions of these</font>

435
00:18:33,050 --> 00:18:37,010
do you<font color="#E5E5E5"> want and then it just goes out</font>

436
00:18:34,820 --> 00:18:38,600
there and deploys them all this this is

437
00:18:37,010 --> 00:18:40,730
not something that's really<font color="#E5E5E5"> going to</font>

438
00:18:38,600 --> 00:18:44,659
work well with trust on first use you're

439
00:18:40,730 --> 00:18:46,520
not going to scale 90 or 2,000 copies of

440
00:18:44,660 --> 00:18:48,200
an<font color="#CCCCCC"> application and then</font><font color="#E5E5E5"> sort of approve</font>

441
00:18:46,520 --> 00:18:50,260
them all because they could be<font color="#E5E5E5"> deployed</font>

442
00:18:48,200 --> 00:18:53,450
anywhere in your in your infrastructure

443
00:18:50,260 --> 00:18:55,220
so in the doctor world you have one

444
00:18:53,450 --> 00:18:57,080
application for a container<font color="#CCCCCC"> and a vm you</font>

445
00:18:55,220 --> 00:19:00,680
have this court a world of applications

446
00:18:57,080 --> 00:19:03,500
inside each container and the other

447
00:19:00,680 --> 00:19:05,840
important difference is is this docker

448
00:19:03,500 --> 00:19:07,580
world lets you have<font color="#CCCCCC"> different teams</font>

449
00:19:05,840 --> 00:19:08,780
deploy things independently you don't

450
00:19:07,580 --> 00:19:10,340
have to go through a centralized

451
00:19:08,780 --> 00:19:12,770
configuration management system you can

452
00:19:10,340 --> 00:19:15,560
say you know<font color="#CCCCCC"> this is a shared operating</font>

453
00:19:12,770 --> 00:19:17,060
system space or shared server you can

454
00:19:15,560 --> 00:19:18,550
deploy stuff here you<font color="#E5E5E5"> can place up there</font>

455
00:19:17,060 --> 00:19:22,940
different teams can manage these

456
00:19:18,550 --> 00:19:27,800
independently so you may<font color="#CCCCCC"> have read this</font>

457
00:19:22,940 --> 00:19:30,740
this is just last week vine had this

458
00:19:27,800 --> 00:19:32,930
docker registry issue I can sort<font color="#E5E5E5"> of walk</font>

459
00:19:30,740 --> 00:19:36,350
this if you guys<font color="#E5E5E5"> haven't read the news</font>

460
00:19:32,930 --> 00:19:38,390
but but basically Dochart<font color="#CCCCCC"> viacom which</font>

461
00:19:36,350 --> 00:19:40,550
was there docker registry that had all

462
00:19:38,390 --> 00:19:42,920
their their docker containers was

463
00:19:40,550 --> 00:19:45,590
publicly routable and somebody found it

464
00:19:42,920 --> 00:19:49,510
and was able<font color="#E5E5E5"> to download their live</font>

465
00:19:45,590 --> 00:19:52,669
production copies of their<font color="#CCCCCC"> backend and</font>

466
00:19:49,510 --> 00:19:54,230
they were<font color="#E5E5E5"> using i believe it was python</font>

467
00:19:52,670 --> 00:19:56,060
so they could<font color="#CCCCCC"> just read the entire code</font>

468
00:19:54,230 --> 00:19:59,300
so they had the entire code base of all

469
00:19:56,060 --> 00:20:02,269
vines<font color="#CCCCCC"> backend and more than that they</font>

470
00:19:59,300 --> 00:20:04,369
had API keys they had secrets

471
00:20:02,269 --> 00:20:07,070
embedded inside the containers and these

472
00:20:04,369 --> 00:20:08,839
were just<font color="#E5E5E5"> all fully revealed from just</font>

473
00:20:07,070 --> 00:20:11,509
just<font color="#E5E5E5"> the fact that</font><font color="#CCCCCC"> they're dr. registry</font>

474
00:20:08,839 --> 00:20:14,178
was open to the internet and not

475
00:20:11,509 --> 00:20:16,999
requiring authentication so this<font color="#E5E5E5"> is the</font>

476
00:20:14,179 --> 00:20:19,309
worst case for deploying secrets and

477
00:20:16,999 --> 00:20:21,950
docker<font color="#CCCCCC"> it's and there are a couple</font>

478
00:20:19,309 --> 00:20:24,019
lessons we can learn from this and these

479
00:20:21,950 --> 00:20:25,999
are<font color="#E5E5E5"> just basic very basic things</font><font color="#CCCCCC"> it's</font>

480
00:20:24,019 --> 00:20:28,759
use access control for your doctor

481
00:20:25,999 --> 00:20:31,609
registry don't register containers that

482
00:20:28,759 --> 00:20:33,709
have secrets inside and you know

483
00:20:31,609 --> 00:20:36,499
<font color="#E5E5E5">sensitive code in containers is</font>

484
00:20:33,709 --> 00:20:38,179
dangerous this third one is is kind of

485
00:20:36,499 --> 00:20:41,209
hard to get<font color="#CCCCCC"> around in</font><font color="#E5E5E5"> a lot of cases but</font>

486
00:20:38,179 --> 00:20:45,079
the first two are really<font color="#CCCCCC"> kind of obvious</font>

487
00:20:41,209 --> 00:20:47,899
lessons that you learn so if you<font color="#CCCCCC"> think</font>

488
00:20:45,079 --> 00:20:49,749
about it we can go into<font color="#E5E5E5"> the sensitive</font>

489
00:20:47,899 --> 00:20:52,579
code i have an example<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that later but</font>

490
00:20:49,749 --> 00:20:54,859
when<font color="#E5E5E5"> you have docker containers the the</font>

491
00:20:52,579 --> 00:20:57,950
application model in for tofu doesn't

492
00:20:54,859 --> 00:21:01,070
really work you<font color="#E5E5E5"> don't have you know I</font>

493
00:20:57,950 --> 00:21:03,139
understand these are I've deployed these

494
00:21:01,070 --> 00:21:05,029
my 60 servers and I know where they are

495
00:21:03,139 --> 00:21:08,199
<font color="#E5E5E5">and I</font><font color="#CCCCCC"> know how they're configured you</font>

496
00:21:05,029 --> 00:21:13,459
have applications in the<font color="#CCCCCC"> thousands so</font>

497
00:21:08,200 --> 00:21:17,269
docker containers how to secret how do

498
00:21:13,459 --> 00:21:20,239
<font color="#E5E5E5">we how do we how do we do it so an</font>

499
00:21:17,269 --> 00:21:22,749
interesting way to to think<font color="#E5E5E5"> about this</font>

500
00:21:20,239 --> 00:21:26,809
is<font color="#CCCCCC"> to</font><font color="#E5E5E5"> take another permission system</font>

501
00:21:22,749 --> 00:21:29,419
analogy<font color="#E5E5E5"> and if you</font><font color="#CCCCCC"> think of how iOS or</font>

502
00:21:26,809 --> 00:21:32,539
<font color="#E5E5E5">Android constructs things they have</font>

503
00:21:29,419 --> 00:21:34,789
these sandbox applications and they all

504
00:21:32,539 --> 00:21:37,489
kind of live in<font color="#E5E5E5"> harmony on on the</font>

505
00:21:34,789 --> 00:21:42,679
machine and talk to the host to get to

506
00:21:37,489 --> 00:21:44,419
get access<font color="#CCCCCC"> to system resources so this</font>

507
00:21:42,679 --> 00:21:46,190
is<font color="#E5E5E5"> this actually maps up pretty nicely</font>

508
00:21:44,419 --> 00:21:49,009
with the data center operating system

509
00:21:46,190 --> 00:21:51,679
model where every container is like a

510
00:21:49,009 --> 00:21:53,839
signed application and if you have a

511
00:21:51,679 --> 00:21:56,479
container and you want to release it you

512
00:21:53,839 --> 00:21:58,549
code sign it and you do code signatures

513
00:21:56,479 --> 00:22:00,709
and you do that at the mastering release

514
00:21:58,549 --> 00:22:02,959
time and your applications our sandbox

515
00:22:00,709 --> 00:22:07,309
your containers are basically sandboxed

516
00:22:02,959 --> 00:22:10,849
<font color="#E5E5E5">I have yeah it it's basically sandboxed</font>

517
00:22:07,309 --> 00:22:12,668
and if your application wants access to

518
00:22:10,849 --> 00:22:14,869
secrets it talks to<font color="#E5E5E5"> the host and the</font>

519
00:22:12,669 --> 00:22:16,220
<font color="#E5E5E5">host can sort of check these</font>

520
00:22:14,869 --> 00:22:18,649
entitlements and denied

521
00:22:16,220 --> 00:22:20,929
by default just like your application

522
00:22:18,650 --> 00:22:22,429
can ask for<font color="#E5E5E5"> access to</font><font color="#CCCCCC"> your camera and it</font>

523
00:22:20,929 --> 00:22:27,049
would<font color="#CCCCCC"> be denied by default you'd have</font>

524
00:22:22,429 --> 00:22:30,320
two men sort of manually approve this

525
00:22:27,049 --> 00:22:32,918
has practical differences between sort

526
00:22:30,320 --> 00:22:35,510
of an iOS kind of single application

527
00:22:32,919 --> 00:22:37,400
holding phone to an entire data center

528
00:22:35,510 --> 00:22:38,720
because it's fully multi-tenant you have

529
00:22:37,400 --> 00:22:42,799
multiple teams developing different

530
00:22:38,720 --> 00:22:44,630
things in parallel<font color="#E5E5E5"> so sometimes</font><font color="#CCCCCC"> your</font>

531
00:22:42,799 --> 00:22:46,340
secrets are unique / app<font color="#CCCCCC"> too it's not</font>

532
00:22:44,630 --> 00:22:49,750
like every application wants<font color="#E5E5E5"> access to</font>

533
00:22:46,340 --> 00:22:54,740
the camera secret<font color="#E5E5E5"> it's you can have</font>

534
00:22:49,750 --> 00:22:56,210
application specific secrets so this

535
00:22:54,740 --> 00:23:00,350
leaves us in kind<font color="#E5E5E5"> of an interesting</font>

536
00:22:56,210 --> 00:23:02,840
question<font color="#CCCCCC"> and in place is is is what's</font>

537
00:23:00,350 --> 00:23:06,139
missing what's the missing link to make

538
00:23:02,840 --> 00:23:10,189
this model model work and that's really

539
00:23:06,140 --> 00:23:12,169
container identity and this is this<font color="#E5E5E5"> is</font>

540
00:23:10,190 --> 00:23:15,730
your whale passport this is what docker

541
00:23:12,169 --> 00:23:18,049
containers use to prove who they are but

542
00:23:15,730 --> 00:23:19,460
essentially you have containers<font color="#E5E5E5"> and they</font>

543
00:23:18,049 --> 00:23:21,679
have to<font color="#E5E5E5"> have identities that you assert</font>

544
00:23:19,460 --> 00:23:24,080
and luckily Dockers built this tool for

545
00:23:21,679 --> 00:23:28,130
this called docker notary which is just

546
00:23:24,080 --> 00:23:29,480
<font color="#CCCCCC">like a code signing tool so docker</font>

547
00:23:28,130 --> 00:23:31,760
container is built in a bunch<font color="#E5E5E5"> of layers</font>

548
00:23:29,480 --> 00:23:34,039
this is a digital signature over those

549
00:23:31,760 --> 00:23:36,140
layers and you can build a<font color="#CCCCCC"> pki on that</font>

550
00:23:34,039 --> 00:23:39,320
and you can sign<font color="#E5E5E5"> it at mastering time</font>

551
00:23:36,140 --> 00:23:42,770
<font color="#E5E5E5">you can do key delegation all these sort</font>

552
00:23:39,320 --> 00:23:45,200
of nice things around that so given<font color="#CCCCCC"> that</font>

553
00:23:42,770 --> 00:23:47,450
you have identity for your doctor

554
00:23:45,200 --> 00:23:50,150
application let's<font color="#E5E5E5"> let's put this into a</font>

555
00:23:47,450 --> 00:23:53,650
visual I've been talking a lot in bullet

556
00:23:50,150 --> 00:23:56,419
points and and sort of generalities but

557
00:23:53,650 --> 00:23:58,390
let's look at it so we have a host we

558
00:23:56,419 --> 00:24:00,860
have a container running on the host and

559
00:23:58,390 --> 00:24:02,900
say you have a secret manager this<font color="#E5E5E5"> is</font>

560
00:24:00,860 --> 00:24:05,090
just<font color="#CCCCCC"> something</font><font color="#E5E5E5"> running on the host that</font>

561
00:24:02,900 --> 00:24:08,179
has access to a database<font color="#E5E5E5"> of all these</font>

562
00:24:05,090 --> 00:24:10,100
secrets the container<font color="#E5E5E5"> will say hello the</font>

563
00:24:08,179 --> 00:24:12,380
secret manager will ask dr. notary is

564
00:24:10,100 --> 00:24:15,918
this a real legitimate signed container

565
00:24:12,380 --> 00:24:18,169
and does it have<font color="#E5E5E5"> accent basically is</font>

566
00:24:15,919 --> 00:24:20,539
<font color="#E5E5E5">this a legitimate container and if so it</font>

567
00:24:18,169 --> 00:24:23,240
will give the container its<font color="#E5E5E5"> identity</font>

568
00:24:20,539 --> 00:24:26,210
secret and<font color="#E5E5E5"> it identity secret is is like</font>

569
00:24:23,240 --> 00:24:28,250
<font color="#CCCCCC">a key that says this sort of very</font>

570
00:24:26,210 --> 00:24:29,720
similar to<font color="#E5E5E5"> how we described earlier with</font>

571
00:24:28,250 --> 00:24:32,030
the host when

572
00:24:29,720 --> 00:24:34,130
you securely provision a host you given

573
00:24:32,030 --> 00:24:36,020
an identity secret which is a key that

574
00:24:34,130 --> 00:24:37,820
says<font color="#E5E5E5"> yes this is this is really Who I am</font>

575
00:24:36,020 --> 00:24:39,530
this is this machine it's been

576
00:24:37,820 --> 00:24:41,330
provisioned and then that is used to

577
00:24:39,530 --> 00:24:43,430
bootstrap secret management's in this

578
00:24:41,330 --> 00:24:45,260
<font color="#E5E5E5">case each container gets an identity</font>

579
00:24:43,430 --> 00:24:48,590
secret that's tied<font color="#CCCCCC"> to what the</font>

580
00:24:45,260 --> 00:24:51,860
application is now this<font color="#E5E5E5"> is a little bit</font>

581
00:24:48,590 --> 00:24:54,800
heavy weight because this secrets

582
00:24:51,860 --> 00:24:56,870
database deploying this to every<font color="#E5E5E5"> single</font>

583
00:24:54,800 --> 00:24:58,760
one of your hosts is is kind of

584
00:24:56,870 --> 00:25:00,679
dangerous I mean you want to limit

585
00:24:58,760 --> 00:25:03,170
access to<font color="#E5E5E5"> this this is</font><font color="#CCCCCC"> this is</font>

586
00:25:00,680 --> 00:25:05,300
potentially you<font color="#CCCCCC"> know how do you protect</font>

587
00:25:03,170 --> 00:25:09,260
this this is<font color="#CCCCCC"> this is something that</font><font color="#E5E5E5"> has</font>

588
00:25:05,300 --> 00:25:13,129
all your<font color="#E5E5E5"> secrets so another way to</font>

589
00:25:09,260 --> 00:25:14,960
organize things is to rather than having

590
00:25:13,130 --> 00:25:18,620
your entire secret database live

591
00:25:14,960 --> 00:25:20,410
everywhere you would have a key that<font color="#CCCCCC"> is</font>

592
00:25:18,620 --> 00:25:23,600
a lot that can decrypt your secret

593
00:25:20,410 --> 00:25:25,640
living<font color="#E5E5E5"> on the host so the container</font>

594
00:25:23,600 --> 00:25:28,699
would spin up send the encrypted secret

595
00:25:25,640 --> 00:25:30,940
to the secret manager it would check the

596
00:25:28,700 --> 00:25:33,860
policy to say hey is this container

597
00:25:30,940 --> 00:25:36,350
which we validated<font color="#E5E5E5"> the signature for and</font>

598
00:25:33,860 --> 00:25:38,240
the identity<font color="#CCCCCC"> of is this allowed to use</font>

599
00:25:36,350 --> 00:25:39,860
this key if it is then it'll decrypt the

600
00:25:38,240 --> 00:25:42,560
secret and sort of<font color="#E5E5E5"> inject it back in the</font>

601
00:25:39,860 --> 00:25:46,909
container and this is<font color="#E5E5E5"> kind of flipping</font>

602
00:25:42,560 --> 00:25:49,460
<font color="#E5E5E5">this model on its head in</font><font color="#CCCCCC"> that it's</font><font color="#E5E5E5"> it's</font>

603
00:25:46,910 --> 00:25:51,530
becomes not a not a question of database

604
00:25:49,460 --> 00:25:54,860
management but a question of key

605
00:25:51,530 --> 00:25:56,870
management now you can<font color="#E5E5E5"> split this up</font>

606
00:25:54,860 --> 00:25:58,969
really nicely so each<font color="#E5E5E5"> team has its own</font>

607
00:25:56,870 --> 00:26:01,280
key and each team can manage its own

608
00:25:58,970 --> 00:26:03,340
<font color="#CCCCCC">policy and</font><font color="#E5E5E5"> you can have multiple</font>

609
00:26:01,280 --> 00:26:06,020
containers running on the same host and

610
00:26:03,340 --> 00:26:10,820
<font color="#CCCCCC">it sort of everybody manages their</font>

611
00:26:06,020 --> 00:26:12,410
policy separately it's also potentially

612
00:26:10,820 --> 00:26:14,780
worthwhile to just have a separate

613
00:26:12,410 --> 00:26:16,700
server that has access to these keys and

614
00:26:14,780 --> 00:26:18,200
and rather than<font color="#E5E5E5"> having the secret</font>

615
00:26:16,700 --> 00:26:21,050
manager talk locally can talk to

616
00:26:18,200 --> 00:26:24,590
something remotely and this is what pal

617
00:26:21,050 --> 00:26:26,899
is so we're introduced introducing the

618
00:26:24,590 --> 00:26:30,379
project which is a pal permissive active

619
00:26:26,900 --> 00:26:32,840
link access length which is this is a

620
00:26:30,380 --> 00:26:35,240
term of art<font color="#E5E5E5"> I guess from nuclear weapons</font>

621
00:26:32,840 --> 00:26:39,560
it was it allows you to connect<font color="#E5E5E5"> the</font>

622
00:26:35,240 --> 00:26:41,540
arming data to the<font color="#E5E5E5"> bomb and it's it's a</font>

623
00:26:39,560 --> 00:26:43,490
it<font color="#E5E5E5"> goes along</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> theme</font><font color="#CCCCCC"> of some of the</font>

624
00:26:41,540 --> 00:26:46,820
other<font color="#E5E5E5"> open source projects and all</font>

625
00:26:43,490 --> 00:26:48,500
oh<font color="#CCCCCC"> I'll show you those further along the</font>

626
00:26:46,820 --> 00:26:49,850
line but yeah it connects the bomb with

627
00:26:48,500 --> 00:26:51,620
the arming data and that's that's

628
00:26:49,850 --> 00:26:56,559
essentially what this secret manager

629
00:26:51,620 --> 00:26:56,559
tool does so the basic workflows this

630
00:26:57,130 --> 00:27:06,470
you encrypt secrets before<font color="#E5E5E5"> you master</font>

631
00:27:00,050 --> 00:27:08,540
the<font color="#E5E5E5"> the container</font><font color="#CCCCCC"> Pal is the entry point</font>

632
00:27:06,470 --> 00:27:10,220
for your docker container so rather<font color="#E5E5E5"> than</font>

633
00:27:08,540 --> 00:27:12,350
running<font color="#E5E5E5"> the application directly you run</font>

634
00:27:10,220 --> 00:27:15,050
this wrapper around the application that

635
00:27:12,350 --> 00:27:16,909
does secret unwrapping first and so it

636
00:27:15,050 --> 00:27:21,860
takes your secret sends it down through

637
00:27:16,910 --> 00:27:24,380
<font color="#E5E5E5">unix socket down to pal d which is which</font>

638
00:27:21,860 --> 00:27:28,669
<font color="#CCCCCC">is the component that's sitting on the</font>

639
00:27:24,380 --> 00:27:30,559
host and actually more let's<font color="#E5E5E5"> let's look</font>

640
00:27:28,670 --> 00:27:33,200
this more visually so so pal is your

641
00:27:30,559 --> 00:27:35,300
entry point and what what happens is

642
00:27:33,200 --> 00:27:37,010
when your container spins up pal will

643
00:27:35,300 --> 00:27:38,720
talk down to pal d which would talk<font color="#CCCCCC"> to</font>

644
00:27:37,010 --> 00:27:41,360
<font color="#E5E5E5">dr. docker notary and verify the</font>

645
00:27:38,720 --> 00:27:43,880
container<font color="#E5E5E5"> is who it says it is and then</font>

646
00:27:41,360 --> 00:27:46,040
pal d has a bunch of plugins or

647
00:27:43,880 --> 00:27:47,990
different ways that<font color="#CCCCCC"> it can decrypt the</font>

648
00:27:46,040 --> 00:27:49,820
secret and this is this<font color="#E5E5E5"> is really up to</font>

649
00:27:47,990 --> 00:27:51,800
what secret management or what key

650
00:27:49,820 --> 00:27:54,559
management tool you want to use so for

651
00:27:51,800 --> 00:27:57,139
<font color="#E5E5E5">example PGP is one option so pal d can</font>

652
00:27:54,559 --> 00:27:59,690
talk to PGP to a<font color="#CCCCCC"> keychain</font><font color="#E5E5E5"> and say okay</font>

653
00:27:57,140 --> 00:28:03,020
well decrypt the secret for me and send

654
00:27:59,690 --> 00:28:05,900
it back<font color="#E5E5E5"> up so we talked about vault and</font>

655
00:28:03,020 --> 00:28:08,240
and Knox and all these<font color="#CCCCCC"> things before pal</font>

656
00:28:05,900 --> 00:28:10,760
d is not<font color="#CCCCCC"> a secret management tool it's a</font>

657
00:28:08,240 --> 00:28:13,550
container identity bootstrapping tool

658
00:28:10,760 --> 00:28:15,170
and this is this is<font color="#CCCCCC"> very important to</font>

659
00:28:13,550 --> 00:28:17,928
say<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we have a</font><font color="#E5E5E5"> million secret</font>

660
00:28:15,170 --> 00:28:20,679
management tools and every single<font color="#CCCCCC"> one of</font>

661
00:28:17,929 --> 00:28:23,150
them relies on a secret to get

662
00:28:20,679 --> 00:28:25,429
bootstraps to the point where it can

663
00:28:23,150 --> 00:28:28,220
deliver secrets so secret management it

664
00:28:25,429 --> 00:28:31,220
is<font color="#E5E5E5"> really more of a more of a term of</font>

665
00:28:28,220 --> 00:28:33,110
going from one secret to many and what

666
00:28:31,220 --> 00:28:38,300
pal gives you is<font color="#E5E5E5"> that very first secret</font>

667
00:28:33,110 --> 00:28:40,610
the<font color="#E5E5E5"> identity secret of of the of the</font>

668
00:28:38,300 --> 00:28:42,830
container itself or the docker container

669
00:28:40,610 --> 00:28:47,570
that wants to get<font color="#E5E5E5"> access to your secret</font>

670
00:28:42,830 --> 00:28:48,740
management tools now applications I'm

671
00:28:47,570 --> 00:28:50,389
<font color="#E5E5E5">going to walk</font><font color="#CCCCCC"> you through a few</font><font color="#E5E5E5"> ways</font>

672
00:28:48,740 --> 00:28:51,830
this is so pal is something that we've

673
00:28:50,390 --> 00:28:53,840
deployed at<font color="#CCCCCC"> CloudFlare and we're</font><font color="#E5E5E5"> using</font>

674
00:28:51,830 --> 00:28:57,080
for<font color="#CCCCCC"> a lot of our internal systems we</font>

675
00:28:53,840 --> 00:28:59,480
have a data processor

676
00:28:57,080 --> 00:29:02,300
pipeline that is all built on docker and

677
00:28:59,480 --> 00:29:05,480
may<font color="#E5E5E5"> soz and the reason</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this came</font>

678
00:29:02,300 --> 00:29:07,909
about was we had secrets had it needed a

679
00:29:05,480 --> 00:29:10,550
way to manage them<font color="#E5E5E5"> and we did have a</font>

680
00:29:07,910 --> 00:29:13,580
secure way to identify hosts and enroll

681
00:29:10,550 --> 00:29:15,379
them but just not a secure way to inject

682
00:29:13,580 --> 00:29:16,520
the secrets into these containers so

683
00:29:15,380 --> 00:29:19,730
let's let's talk<font color="#E5E5E5"> about a few</font>

684
00:29:16,520 --> 00:29:22,280
applications service the service

685
00:29:19,730 --> 00:29:25,790
authentication now if you're running a

686
00:29:22,280 --> 00:29:27,740
distributed system it's sort of popular

687
00:29:25,790 --> 00:29:30,440
nowadays to call it a micro service

688
00:29:27,740 --> 00:29:32,450
architecture where you'll have multiple

689
00:29:30,440 --> 00:29:34,700
little tiny projects little tiny

690
00:29:32,450 --> 00:29:38,270
applications that that handle pieces of

691
00:29:34,700 --> 00:29:40,280
the puzzle and whenever you take a large

692
00:29:38,270 --> 00:29:42,530
monolithic project and split<font color="#CCCCCC"> it into</font>

693
00:29:40,280 --> 00:29:45,350
tiny pieces you need<font color="#CCCCCC"> to they need to be</font>

694
00:29:42,530 --> 00:29:47,690
<font color="#E5E5E5">able to trust</font><font color="#CCCCCC"> each other to do the right</font>

695
00:29:45,350 --> 00:29:50,719
thing and just<font color="#E5E5E5"> being in the same data</font>

696
00:29:47,690 --> 00:29:54,110
<font color="#E5E5E5">center is not enough especially</font><font color="#CCCCCC"> if</font>

697
00:29:50,720 --> 00:29:55,670
people can that can sort of take any

698
00:29:54,110 --> 00:29:57,919
application they want and deploy it and

699
00:29:55,670 --> 00:29:59,780
and spoof other applications this<font color="#CCCCCC"> is</font>

700
00:29:57,920 --> 00:30:01,850
with well within the threat model but um

701
00:29:59,780 --> 00:30:04,190
if you're<font color="#CCCCCC"> taking your you're servicing</font>

702
00:30:01,850 --> 00:30:05,810
you're splitting it up into tiny

703
00:30:04,190 --> 00:30:09,020
services they need to be able<font color="#E5E5E5"> to trust</font>

704
00:30:05,810 --> 00:30:11,149
each other and this is<font color="#E5E5E5"> this is what pal</font>

705
00:30:09,020 --> 00:30:13,400
can do with if you<font color="#E5E5E5"> have a service to</font>

706
00:30:11,150 --> 00:30:15,200
service authentication framework so the

707
00:30:13,400 --> 00:30:17,930
<font color="#E5E5E5">way</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> works is every service gets an</font>

708
00:30:15,200 --> 00:30:20,540
account a service account with an

709
00:30:17,930 --> 00:30:23,990
identity key pair and the private<font color="#E5E5E5"> keys</font>

710
00:30:20,540 --> 00:30:25,909
encrypted with pal and on launch the

711
00:30:23,990 --> 00:30:29,150
container spins up decrypts this private

712
00:30:25,910 --> 00:30:31,250
key and<font color="#E5E5E5"> talks to the service the service</font>

713
00:30:29,150 --> 00:30:35,060
authentication<font color="#E5E5E5"> serve and service and</font>

714
00:30:31,250 --> 00:30:37,490
gets what's basically a bearer token a a

715
00:30:35,060 --> 00:30:40,340
token that<font color="#E5E5E5"> allows it to talk to other</font>

716
00:30:37,490 --> 00:30:44,270
services<font color="#CCCCCC"> and sort</font><font color="#E5E5E5"> of assert claims and</font>

717
00:30:40,340 --> 00:30:47,510
say for<font color="#E5E5E5"> example if you</font><font color="#CCCCCC"> have one</font>

718
00:30:44,270 --> 00:30:50,090
container that<font color="#E5E5E5"> is your API and ones that</font>

719
00:30:47,510 --> 00:30:51,710
<font color="#E5E5E5">your one is your database the API thing</font>

720
00:30:50,090 --> 00:30:54,790
can come up<font color="#E5E5E5"> and then it will get</font>

721
00:30:51,710 --> 00:30:57,800
<font color="#E5E5E5">credentials to talk to the database and</font>

722
00:30:54,790 --> 00:30:58,970
there there's a tool that that we've

723
00:30:57,800 --> 00:31:01,190
started using in other people<font color="#CCCCCC"> with</font>

724
00:30:58,970 --> 00:31:05,510
experimenting with it's a standard from

725
00:31:01,190 --> 00:31:07,730
the w3c called Jose and JWT's adjacent

726
00:31:05,510 --> 00:31:09,470
web token it's it's<font color="#CCCCCC"> just a simple way to</font>

727
00:31:07,730 --> 00:31:10,980
encapsulate a bearer token it's it's

728
00:31:09,470 --> 00:31:14,040
it's you have

729
00:31:10,980 --> 00:31:17,130
claims and they're signed that's

730
00:31:14,040 --> 00:31:19,470
<font color="#CCCCCC">basically what it is so when your</font>

731
00:31:17,130 --> 00:31:21,059
service spins up it can talk to the

732
00:31:19,470 --> 00:31:23,100
identity service the service

733
00:31:21,059 --> 00:31:24,780
authentication service get a bearer

734
00:31:23,100 --> 00:31:27,120
token and then talk with any other

735
00:31:24,780 --> 00:31:30,168
<font color="#E5E5E5">service and those services will know</font>

736
00:31:27,120 --> 00:31:34,168
that this is who they said they are

737
00:31:30,169 --> 00:31:35,880
that's one application this this kind of

738
00:31:34,169 --> 00:31:39,330
<font color="#E5E5E5">has an enterprise password password</font>

739
00:31:35,880 --> 00:31:41,549
manager analogy rather than a person

740
00:31:39,330 --> 00:31:43,350
trying<font color="#E5E5E5"> to log into their get an access</font>

741
00:31:41,549 --> 00:31:45,900
to the visa account<font color="#E5E5E5"> it's you have this</font>

742
00:31:43,350 --> 00:31:48,659
robot this sort<font color="#E5E5E5"> of automated machine and</font>

743
00:31:45,900 --> 00:31:50,340
he says<font color="#CCCCCC"> okay here's a job that says can</font>

744
00:31:48,660 --> 00:31:53,250
I get<font color="#E5E5E5"> one that has permissions to the</font>

745
00:31:50,340 --> 00:31:56,159
corporate<font color="#E5E5E5"> Visa account here's my self</font>

746
00:31:53,250 --> 00:31:58,260
signed identity jot and this guy says no

747
00:31:56,160 --> 00:32:02,900
way Jose Your Honor the list that's my

748
00:31:58,260 --> 00:32:06,030
that's my<font color="#E5E5E5"> hose a joke for</font><font color="#CCCCCC"> the day yes</font>

749
00:32:02,900 --> 00:32:08,040
perfect groaning I appreciate that

750
00:32:06,030 --> 00:32:10,110
anyways okay so this is<font color="#E5E5E5"> this is a sense</font>

751
00:32:08,040 --> 00:32:12,480
this<font color="#CCCCCC"> is one application another one that</font>

752
00:32:10,110 --> 00:32:15,990
a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> people</font><font color="#CCCCCC"> have been using is</font><font color="#E5E5E5"> pki</font>

753
00:32:12,480 --> 00:32:18,390
authentication rather than using<font color="#E5E5E5"> bearer</font>

754
00:32:15,990 --> 00:32:20,580
tokens to talk to<font color="#E5E5E5"> each other</font><font color="#CCCCCC"> I mentioned</font>

755
00:32:18,390 --> 00:32:23,730
there's passwords bearer tokens and

756
00:32:20,580 --> 00:32:25,530
private<font color="#CCCCCC"> keys</font><font color="#E5E5E5"> you pki based private keys</font>

757
00:32:23,730 --> 00:32:26,910
way that applications can can

758
00:32:25,530 --> 00:32:31,168
authenticate themselves to each other

759
00:32:26,910 --> 00:32:33,990
and if you have a service spin up it can

760
00:32:31,169 --> 00:32:35,610
you can encrypt this identity credential

761
00:32:33,990 --> 00:32:39,059
in<font color="#E5E5E5"> Powell and then it can talk to a CA</font>

762
00:32:35,610 --> 00:32:40,979
and get a certificate and then then it's

763
00:32:39,059 --> 00:32:43,678
it's absolutely<font color="#E5E5E5"> clear that the service</font>

764
00:32:40,980 --> 00:32:46,200
is who it is and who it says it is and

765
00:32:43,679 --> 00:32:48,630
then you can do mutual auth TLS between

766
00:32:46,200 --> 00:32:52,500
different services and be able to to

767
00:32:48,630 --> 00:32:55,140
spin things up a third application that

768
00:32:52,500 --> 00:32:59,309
<font color="#E5E5E5">I had hinted that before was this secret</font>

769
00:32:55,140 --> 00:33:02,490
manager integration so if you're running

770
00:32:59,309 --> 00:33:04,350
vault or one of<font color="#E5E5E5"> these other tools I</font>

771
00:33:02,490 --> 00:33:06,270
mentioned they need an identity secret

772
00:33:04,350 --> 00:33:09,418
to spin up so that's that's what pal can

773
00:33:06,270 --> 00:33:11,520
give you<font color="#CCCCCC"> is it can you can embed this</font>

774
00:33:09,419 --> 00:33:13,890
identity secret into your application

775
00:33:11,520 --> 00:33:16,080
and then it can talk to your secret

776
00:33:13,890 --> 00:33:18,419
manager tool and get all your API keys

777
00:33:16,080 --> 00:33:21,870
your your passwords and all these sort

778
00:33:18,419 --> 00:33:23,700
of things hooked up which is nice then

779
00:33:21,870 --> 00:33:26,158
you<font color="#E5E5E5"> don't have to use tofu too</font>

780
00:33:23,700 --> 00:33:28,260
to trust every one of your containers

781
00:33:26,159 --> 00:33:31,710
you really you're moving the the trust

782
00:33:28,260 --> 00:33:33,269
from<font color="#E5E5E5"> the container down to the host this</font>

783
00:33:31,710 --> 00:33:37,070
third application this fourth

784
00:33:33,269 --> 00:33:39,720
application is is something that is is

785
00:33:37,070 --> 00:33:42,330
is interesting and<font color="#CCCCCC"> this would maybe have</font>

786
00:33:39,720 --> 00:33:44,760
helped the vine case which is you can

787
00:33:42,330 --> 00:33:46,350
encrypt your code with pal and when your

788
00:33:44,760 --> 00:33:48,480
container launches then you can decrypt

789
00:33:46,350 --> 00:33:50,850
your code so if you have a docker

790
00:33:48,480 --> 00:33:52,380
registry and someone has access to it

791
00:33:50,850 --> 00:33:55,469
then they<font color="#E5E5E5"> don't get anything all they</font>

792
00:33:52,380 --> 00:33:57,389
get is this encrypted code which makes

793
00:33:55,470 --> 00:33:59,669
it a lot more resilient to if you screw

794
00:33:57,389 --> 00:34:01,320
up your authentication or someone gets

795
00:33:59,669 --> 00:34:04,980
access to it it kind of protects your

796
00:34:01,320 --> 00:34:06,658
intellectual property now with all these

797
00:34:04,980 --> 00:34:09,240
applications of Powell there are a

798
00:34:06,659 --> 00:34:11,909
couple sticky parts<font color="#CCCCCC"> one's revocation</font>

799
00:34:09,239 --> 00:34:13,290
which is you know if your secrets in

800
00:34:11,909 --> 00:34:16,020
your container you have to<font color="#E5E5E5"> roll a new</font>

801
00:34:13,290 --> 00:34:18,029
<font color="#E5E5E5">container to build your secret</font><font color="#CCCCCC"> to build</font>

802
00:34:16,020 --> 00:34:20,969
a new seeker that's sort of a downside

803
00:34:18,030 --> 00:34:22,379
<font color="#CCCCCC">to this and building the policy for who</font>

804
00:34:20,969 --> 00:34:26,250
can decrypt what in terms<font color="#E5E5E5"> of</font>

805
00:34:22,379 --> 00:34:28,078
applications is difficult but luckily we

806
00:34:26,250 --> 00:34:30,510
<font color="#E5E5E5">have another open source project and</font>

807
00:34:28,079 --> 00:34:33,419
this has been<font color="#E5E5E5"> open for I guess two and a</font>

808
00:34:30,510 --> 00:34:35,609
half years or so<font color="#E5E5E5"> that is is really cool</font>

809
00:34:33,418 --> 00:34:38,190
that allows you<font color="#CCCCCC"> to do this and Powell is</font>

810
00:34:35,609 --> 00:34:41,219
integrated with it it's called Red

811
00:34:38,190 --> 00:34:43,619
October so I don't know has anybody

812
00:34:41,219 --> 00:34:46,888
heard of this tool it was on<font color="#CCCCCC"> our blog a</font>

813
00:34:43,619 --> 00:34:48,480
few people but it's it's basically an

814
00:34:46,889 --> 00:34:52,589
encryption and decryption<font color="#E5E5E5"> Oracle this</font>

815
00:34:48,480 --> 00:34:54,629
<font color="#E5E5E5">ask acts as your key decryption service</font>

816
00:34:52,589 --> 00:34:58,560
and it does<font color="#CCCCCC"> have cryptographically</font>

817
00:34:54,629 --> 00:35:00,900
enforced policies and by that I<font color="#CCCCCC"> mean you</font>

818
00:34:58,560 --> 00:35:05,099
can encrypt a secret such that two out

819
00:35:00,900 --> 00:35:07,020
of n people need to<font color="#CCCCCC"> approve it to allow</font>

820
00:35:05,099 --> 00:35:09,390
<font color="#CCCCCC">it to decrypt and this is enforced</font>

821
00:35:07,020 --> 00:35:11,460
cryptographically so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> oftentimes</font>

822
00:35:09,390 --> 00:35:14,848
called the two-man rule the two-person

823
00:35:11,460 --> 00:35:16,500
rule and Red October allows you to do

824
00:35:14,849 --> 00:35:19,650
that it takes you can take a secret<font color="#E5E5E5"> and</font>

825
00:35:16,500 --> 00:35:22,069
encrypt it such that you have basically

826
00:35:19,650 --> 00:35:26,119
two people that can can decrypt it and

827
00:35:22,069 --> 00:35:28,619
we've recently expanded it to include

828
00:35:26,119 --> 00:35:30,569
what what<font color="#E5E5E5"> are called arbitrary boolean</font>

829
00:35:28,619 --> 00:35:33,630
<font color="#CCCCCC">predicates switch you can just think of</font>

830
00:35:30,569 --> 00:35:35,460
just any combination of people need to

831
00:35:33,630 --> 00:35:37,590
<font color="#E5E5E5">approve you can you can define so in</font>

832
00:35:35,460 --> 00:35:40,140
this case you<font color="#CCCCCC"> can have a</font>

833
00:35:37,590 --> 00:35:44,070
be like a super admin you can have you

834
00:35:40,140 --> 00:35:46,529
need what a and one of a group of BCD to

835
00:35:44,070 --> 00:35:48,810
approve it so this allows you to to have

836
00:35:46,530 --> 00:35:51,570
much tighter controls as to you know a

837
00:35:48,810 --> 00:35:55,650
<font color="#E5E5E5">person manually approving how to decrypt</font>

838
00:35:51,570 --> 00:35:59,730
something this has it has it has a UI

839
00:35:55,650 --> 00:36:01,140
and the features are I guess<font color="#CCCCCC"> the</font>

840
00:35:59,730 --> 00:36:04,080
workflow is that when you encrypt

841
00:36:01,140 --> 00:36:06,180
something the owners of<font color="#E5E5E5"> that you can</font>

842
00:36:04,080 --> 00:36:09,270
encrypt it to a set of owners of the

843
00:36:06,180 --> 00:36:13,589
secret and<font color="#E5E5E5"> also you can give it labels</font>

844
00:36:09,270 --> 00:36:16,170
so when you want to decrypt it the

845
00:36:13,590 --> 00:36:17,990
owners need to delegate their passwords

846
00:36:16,170 --> 00:36:21,450
to this<font color="#E5E5E5"> service or delegate their</font>

847
00:36:17,990 --> 00:36:23,729
credentials to this<font color="#E5E5E5"> service and they can</font>

848
00:36:21,450 --> 00:36:26,819
do so for<font color="#E5E5E5"> a limited</font><font color="#CCCCCC"> number of uses a</font>

849
00:36:23,730 --> 00:36:29,400
limited number of times and for a

850
00:36:26,820 --> 00:36:32,010
limited number of limited set of users

851
00:36:29,400 --> 00:36:35,130
to decrypt it as well as a limited set

852
00:36:32,010 --> 00:36:39,930
of labels so if you have a secret<font color="#E5E5E5"> you</font>

853
00:36:35,130 --> 00:36:41,820
that you encrypt you can say<font color="#CCCCCC"> i want to</font>

854
00:36:39,930 --> 00:36:43,470
out<font color="#CCCCCC"> of all of the managers and the</font>

855
00:36:41,820 --> 00:36:45,450
company to have to approve this to

856
00:36:43,470 --> 00:36:47,520
decrypt it and my cert my secret is

857
00:36:45,450 --> 00:36:50,069
going to be<font color="#E5E5E5"> called Postgres database</font>

858
00:36:47,520 --> 00:36:53,580
secret or two Postgres database password

859
00:36:50,070 --> 00:36:55,260
and then two of those people can

860
00:36:53,580 --> 00:36:57,960
delegate to Red October for one

861
00:36:55,260 --> 00:37:05,180
decryption within a<font color="#E5E5E5"> five-minute window</font>

862
00:36:57,960 --> 00:37:07,800
and and then and to the pal d container

863
00:37:05,180 --> 00:37:10,830
not the container sorry the pal d host

864
00:37:07,800 --> 00:37:13,200
<font color="#E5E5E5">to</font><font color="#CCCCCC"> two as a user to decrypt it so they</font>

865
00:37:10,830 --> 00:37:14,910
can say okay I want this secret<font color="#CCCCCC"> to be</font>

866
00:37:13,200 --> 00:37:17,069
deployed on<font color="#E5E5E5"> this host I'm going to allow</font>

867
00:37:14,910 --> 00:37:18,120
<font color="#CCCCCC">it to happen once and I'm going</font><font color="#E5E5E5"> to allow</font>

868
00:37:17,070 --> 00:37:20,010
it<font color="#CCCCCC"> to happen in the</font><font color="#E5E5E5"> next five minutes</font>

869
00:37:18,120 --> 00:37:22,440
and<font color="#E5E5E5"> i'm only going to allow this person</font>

870
00:37:20,010 --> 00:37:25,380
to do it<font color="#CCCCCC"> and it allows you to have some</font>

871
00:37:22,440 --> 00:37:27,660
pretty fine grained controls over how

872
00:37:25,380 --> 00:37:29,490
these secrets can be decrypted but it

873
00:37:27,660 --> 00:37:32,460
also allows you to set things up so that

874
00:37:29,490 --> 00:37:34,140
<font color="#E5E5E5">they're completely automated or two or</font>

875
00:37:32,460 --> 00:37:37,640
you<font color="#E5E5E5"> can reduce the amount of user</font>

876
00:37:34,140 --> 00:37:40,920
interactions so you can say if you<font color="#E5E5E5"> want</font>

877
00:37:37,640 --> 00:37:43,319
you can delegate for say a week you<font color="#E5E5E5"> can</font>

878
00:37:40,920 --> 00:37:47,040
say okay well hundred this can happen a

879
00:37:43,320 --> 00:37:49,620
hundred times in the next<font color="#E5E5E5"> week and and</font>

880
00:37:47,040 --> 00:37:51,000
any one<font color="#E5E5E5"> of the machines in my production</font>

881
00:37:49,620 --> 00:37:53,490
infrastructure can<font color="#E5E5E5"> decrypt it</font>

882
00:37:51,000 --> 00:37:56,400
and so then if you have dr.<font color="#E5E5E5"> machines go</font>

883
00:37:53,490 --> 00:37:58,049
up and down spinning up or spinning down

884
00:37:56,400 --> 00:37:59,790
you can have it happen a hundred times

885
00:37:58,050 --> 00:38:02,040
<font color="#E5E5E5">within the next week and you don't</font><font color="#CCCCCC"> need</font>

886
00:37:59,790 --> 00:38:05,310
any manual interaction but you do have

887
00:38:02,040 --> 00:38:09,180
the<font color="#CCCCCC"> full logging and auditing of every</font>

888
00:38:05,310 --> 00:38:11,279
time someone goes to decrypt this so I

889
00:38:09,180 --> 00:38:14,160
sort of alluded to that in that<font color="#CCCCCC"> in that</font>

890
00:38:11,280 --> 00:38:17,760
tangent but back to secrets is the idea

891
00:38:14,160 --> 00:38:19,529
is you provision hosts a purse a per

892
00:38:17,760 --> 00:38:21,690
machine user and username and password

893
00:38:19,530 --> 00:38:23,430
with red october and then you encrypt

894
00:38:21,690 --> 00:38:25,650
your secret with the label blinding

895
00:38:23,430 --> 00:38:28,020
blinding to your container and a set<font color="#E5E5E5"> of</font>

896
00:38:25,650 --> 00:38:30,360
owners and then before you deploy two

897
00:38:28,020 --> 00:38:32,700
out of the<font color="#E5E5E5"> end owners or whatever the</font>

898
00:38:30,360 --> 00:38:34,860
bully and predicate is decide to

899
00:38:32,700 --> 00:38:36,930
delegate their password to<font color="#CCCCCC"> red october</font>

900
00:38:34,860 --> 00:38:38,850
and then the user accounts in the

901
00:38:36,930 --> 00:38:40,859
machines who are expected to<font color="#E5E5E5"> run this</font>

902
00:38:38,850 --> 00:38:44,220
container and every decryption is logged

903
00:38:40,860 --> 00:38:46,530
and if you look at this in a visual way

904
00:38:44,220 --> 00:38:49,169
it's it<font color="#CCCCCC"> looks a lot like one of</font><font color="#E5E5E5"> the</font>

905
00:38:46,530 --> 00:38:51,360
previous models except in this case<font color="#E5E5E5"> you</font>

906
00:38:49,170 --> 00:38:55,320
<font color="#CCCCCC">have owner one and over own or two who</font>

907
00:38:51,360 --> 00:38:57,900
delegate password user label time and at

908
00:38:55,320 --> 00:38:59,460
any time<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is delegated you can you</font>

909
00:38:57,900 --> 00:39:01,170
can kind of restrict it to a subset<font color="#E5E5E5"> of</font>

910
00:38:59,460 --> 00:39:03,780
your infrastructure if you want you can

911
00:39:01,170 --> 00:39:05,580
restrict it to to one place or another

912
00:39:03,780 --> 00:39:11,130
and<font color="#E5E5E5"> this is this is the main use case</font>

913
00:39:05,580 --> 00:39:14,069
that we have 44 pal now<font color="#E5E5E5"> i mentioned</font>

914
00:39:11,130 --> 00:39:18,000
<font color="#E5E5E5">powell is a tool we are planning to open</font>

915
00:39:14,070 --> 00:39:19,890
source the tool very soon and in the

916
00:39:18,000 --> 00:39:23,850
meantime if anybody wants to come up to

917
00:39:19,890 --> 00:39:25,940
me after or talk to me on twitter i can

918
00:39:23,850 --> 00:39:28,620
get<font color="#E5E5E5"> you early access to this tool but</font>

919
00:39:25,940 --> 00:39:30,930
before i do so i'm going<font color="#E5E5E5"> to show you a</font>

920
00:39:28,620 --> 00:39:35,150
quick demo this is it's pretty text

921
00:39:30,930 --> 00:39:42,259
heavy but it will at least show you the

922
00:39:35,150 --> 00:39:42,260
how pal d actually works so

923
00:39:43,890 --> 00:39:52,890
<font color="#E5E5E5">alright so i have met this nice pal d</font>

924
00:39:47,279 --> 00:39:55,440
demo so first step is to start red

925
00:39:52,890 --> 00:39:58,710
october this is going<font color="#E5E5E5"> to be fun for</font>

926
00:39:55,440 --> 00:40:01,349
everybody to read but um basically<font color="#E5E5E5"> can</font>

927
00:39:58,710 --> 00:40:02,940
you start up the service and it gives

928
00:40:01,349 --> 00:40:05,190
you that web UI that<font color="#E5E5E5"> you want or you</font><font color="#CCCCCC"> can</font>

929
00:40:02,940 --> 00:40:09,920
sort of manually connect to it with with

930
00:40:05,190 --> 00:40:14,640
a<font color="#E5E5E5"> command-line tool or with curl but</font>

931
00:40:09,920 --> 00:40:18,839
start red october let me show you part

932
00:40:14,640 --> 00:40:21,450
step one is encrypt the secret so we

933
00:40:18,839 --> 00:40:26,058
have two secrets here one is defect at

934
00:40:21,450 --> 00:40:28,230
dawn secret to is one ping only and

935
00:40:26,059 --> 00:40:31,980
essentially you can encrypt it by<font color="#CCCCCC"> just</font>

936
00:40:28,230 --> 00:40:34,819
curling or sending the secret to<font color="#E5E5E5"> red</font>

937
00:40:31,980 --> 00:40:37,859
<font color="#E5E5E5">october and giving it a list of owners</font>

938
00:40:34,819 --> 00:40:39,750
<font color="#CCCCCC">jack ryan Marko Ramius these are these</font>

939
00:40:37,859 --> 00:40:42,390
are the accounts of<font color="#E5E5E5"> the of the owners</font>

940
00:40:39,750 --> 00:40:44,339
that<font color="#E5E5E5"> we had created and it spits out</font>

941
00:40:42,390 --> 00:40:46,319
this<font color="#E5E5E5"> yeah mol file down there that says</font>

942
00:40:44,339 --> 00:40:50,460
demo it has an environment variable and

943
00:40:46,319 --> 00:40:52,680
a file and so the way that<font color="#E5E5E5"> you write</font>

944
00:40:50,460 --> 00:40:55,079
secrets down in Red October is you just

945
00:40:52,680 --> 00:40:57,000
have it basically a configuration file

946
00:40:55,079 --> 00:40:59,609
that says secret and then you have ro

947
00:40:57,000 --> 00:41:01,319
and then a bunch of<font color="#E5E5E5"> ciphertext and if</font>

948
00:40:59,609 --> 00:41:04,619
you have a have a file<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have a file</font>

949
00:41:01,319 --> 00:41:10,140
name colon<font color="#CCCCCC"> r 0 colon a bunch of</font>

950
00:41:04,619 --> 00:41:12,119
ciphertext so<font color="#CCCCCC"> alright this is this</font><font color="#E5E5E5"> is</font>

951
00:41:10,140 --> 00:41:13,769
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> our secret</font><font color="#E5E5E5"> as encrypted it does</font>

952
00:41:12,119 --> 00:41:20,339
get inflated quite a bit because you're

953
00:41:13,769 --> 00:41:24,959
encrypting to multiple people so pal d

954
00:41:20,339 --> 00:41:27,569
is as<font color="#CCCCCC"> i mentioned it's something that</font>

955
00:41:24,960 --> 00:41:31,579
runs on the<font color="#E5E5E5"> host and it gets a eunuch</font>

956
00:41:27,569 --> 00:41:33,630
socket and a small configuration and

957
00:41:31,579 --> 00:41:35,339
basically just sits there waiting for

958
00:41:33,630 --> 00:41:39,950
docker containers to try to connect to

959
00:41:35,339 --> 00:41:39,950
it let's see

960
00:41:41,410 --> 00:41:49,730
so pal DS running and listening which is

961
00:41:45,380 --> 00:41:53,630
good delegate authorization this is

962
00:41:49,730 --> 00:41:56,300
where Marko Ramius and Jack Ryan give

963
00:41:53,630 --> 00:42:00,590
their passwords to Red October for one

964
00:41:56,300 --> 00:42:03,950
hour 10 uses and you can sort<font color="#E5E5E5"> of see</font>

965
00:42:00,590 --> 00:42:06,050
right here and the<font color="#E5E5E5"> label of</font><font color="#CCCCCC"> the account</font>

966
00:42:03,950 --> 00:42:13,910
of the demo machine and the<font color="#E5E5E5"> label of</font>

967
00:42:06,050 --> 00:42:16,130
demo so delegate authorization all right

968
00:42:13,910 --> 00:42:22,370
so it's talked to Red October and that's

969
00:42:16,130 --> 00:42:24,440
good run pal so as I mentioned<font color="#CCCCCC"> Pal is</font>

970
00:42:22,370 --> 00:42:26,120
<font color="#CCCCCC">your entry point to a docker container</font>

971
00:42:24,440 --> 00:42:28,520
and if you don't know how a docker

972
00:42:26,120 --> 00:42:31,520
containers work<font color="#E5E5E5"> essentially they just</font>

973
00:42:28,520 --> 00:42:33,560
run 11 command and then that command is

974
00:42:31,520 --> 00:42:37,310
usually your application in this case

975
00:42:33,560 --> 00:42:39,799
Pal is your command and it wraps another

976
00:42:37,310 --> 00:42:42,080
command so if you<font color="#E5E5E5"> look right on the line</font>

977
00:42:39,800 --> 00:42:43,490
right<font color="#E5E5E5"> there it says</font><font color="#CCCCCC"> route bin pal socket</font>

978
00:42:42,080 --> 00:42:46,670
it says the<font color="#E5E5E5"> socket that it's trying to</font>

979
00:42:43,490 --> 00:42:48,709
connect to and<font color="#CCCCCC"> route bin demo is our</font>

980
00:42:46,670 --> 00:42:51,080
demo application and this demo

981
00:42:48,710 --> 00:42:52,970
application is really<font color="#E5E5E5"> just reads the</font>

982
00:42:51,080 --> 00:42:56,720
secret from file or secret from disk and

983
00:42:52,970 --> 00:43:01,939
it contains this encrypted<font color="#E5E5E5"> y</font><font color="#CCCCCC"> amal of the</font>

984
00:42:56,720 --> 00:43:08,359
secret and and prints it out it's so let

985
00:43:01,940 --> 00:43:11,810
me let me run<font color="#CCCCCC"> this so run pal all right</font>

986
00:43:08,360 --> 00:43:14,750
so it says it has connected<font color="#CCCCCC"> to pal d</font>

987
00:43:11,810 --> 00:43:16,279
sent it the secrets and pal<font color="#CCCCCC"> d has can it</font>

988
00:43:14,750 --> 00:43:18,590
has sent it to Red October to get it

989
00:43:16,280 --> 00:43:23,540
decrypted<font color="#E5E5E5"> and then embedded it into the</font>

990
00:43:18,590 --> 00:43:26,890
docker container itself and then the

991
00:43:23,540 --> 00:43:30,259
<font color="#E5E5E5">last step is query demo where we just</font>

992
00:43:26,890 --> 00:43:32,390
curl this docker container the secrets

993
00:43:30,260 --> 00:43:34,490
<font color="#CCCCCC">endpoint that is basically just going to</font>

994
00:43:32,390 --> 00:43:35,990
print out your secrets you don't want to

995
00:43:34,490 --> 00:43:39,259
build a service that just prints out

996
00:43:35,990 --> 00:43:40,640
your secrets it's sort<font color="#E5E5E5"> of a that's</font>

997
00:43:39,260 --> 00:43:41,900
that's<font color="#CCCCCC"> sort of the other via the</font>

998
00:43:40,640 --> 00:43:46,390
opposite<font color="#E5E5E5"> of what you want to do here but</font>

999
00:43:41,900 --> 00:43:48,890
um for a demo it's quite nice so

1000
00:43:46,390 --> 00:43:51,529
<font color="#E5E5E5">environment secret defected on file</font>

1001
00:43:48,890 --> 00:43:53,779
secret one ping only and if you see here

1002
00:43:51,530 --> 00:43:57,590
this is<font color="#CCCCCC"> the secret file</font>

1003
00:43:53,780 --> 00:44:01,930
and<font color="#CCCCCC"> the secret environment and fall off</font>

1004
00:43:57,590 --> 00:44:17,600
that's that's that's pally in action

1005
00:44:01,930 --> 00:44:19,490
thank you<font color="#E5E5E5"> alright so we've got a little</font>

1006
00:44:17,600 --> 00:44:21,440
bit<font color="#CCCCCC"> of time</font><font color="#E5E5E5"> left to talk about to answer</font>

1007
00:44:19,490 --> 00:44:23,779
questions but we're basically at the end

1008
00:44:21,440 --> 00:44:25,580
of so in conclusion<font color="#E5E5E5"> Powell this is this</font>

1009
00:44:23,780 --> 00:44:28,240
is a tool for bootstrapping your

1010
00:44:25,580 --> 00:44:30,680
containers identity it allows you to

1011
00:44:28,240 --> 00:44:32,200
securely have secrets and if you're

1012
00:44:30,680 --> 00:44:34,250
<font color="#E5E5E5">building a production infrastructure</font>

1013
00:44:32,200 --> 00:44:35,540
don't leave your secrets sitting around

1014
00:44:34,250 --> 00:44:39,290
in source control don't leave your

1015
00:44:35,540 --> 00:44:42,160
secrets your passwords anything in in a

1016
00:44:39,290 --> 00:44:45,200
place that it's not unencrypted and and

1017
00:44:42,160 --> 00:44:48,170
if it is encrypted don't just leave that

1018
00:44:45,200 --> 00:44:49,580
key lying around anywhere either what

1019
00:44:48,170 --> 00:44:52,220
Red October gives you is<font color="#E5E5E5"> this nice</font>

1020
00:44:49,580 --> 00:44:53,420
abstraction where you don't<font color="#CCCCCC"> have any key</font>

1021
00:44:52,220 --> 00:44:55,430
sitting around<font color="#E5E5E5"> you have a decryption</font>

1022
00:44:53,420 --> 00:44:57,650
service and that decryption service can

1023
00:44:55,430 --> 00:45:00,620
be<font color="#CCCCCC"> time-limited</font><font color="#E5E5E5"> which is really nice so</font>

1024
00:44:57,650 --> 00:45:02,000
pal is complementary to vault in all

1025
00:45:00,620 --> 00:45:04,600
these other password these sort of

1026
00:45:02,000 --> 00:45:07,190
secret management tools it it<font color="#E5E5E5"> helps</font>

1027
00:45:04,600 --> 00:45:11,900
bootstrap the identity<font color="#CCCCCC"> that makes that</font>

1028
00:45:07,190 --> 00:45:14,600
secret management world possible so

1029
00:45:11,900 --> 00:45:16,490
where to<font color="#E5E5E5"> get it pal d just as a</font><font color="#CCCCCC"> shout</font>

1030
00:45:14,600 --> 00:45:19,250
<font color="#CCCCCC">out Joshua Crow</font><font color="#E5E5E5"> is the main developer</font>

1031
00:45:16,490 --> 00:45:22,490
for this and a bunch of other people at

1032
00:45:19,250 --> 00:45:24,920
cloth are contributed as<font color="#E5E5E5"> well as myself</font>

1033
00:45:22,490 --> 00:45:28,160
and it will be soon on github with a

1034
00:45:24,920 --> 00:45:31,580
very permissive license right now it's

1035
00:45:28,160 --> 00:45:32,960
linux only and it does<font color="#CCCCCC"> have built in May</font>

1036
00:45:31,580 --> 00:45:35,509
<font color="#CCCCCC">sauce marathon integration because</font>

1037
00:45:32,960 --> 00:45:37,730
that's that's<font color="#E5E5E5"> that our orchestration</font>

1038
00:45:35,510 --> 00:45:40,280
framework that we use and if<font color="#CCCCCC"> you want</font>

1039
00:45:37,730 --> 00:45:43,400
early access you<font color="#E5E5E5"> can email me Nick at</font>

1040
00:45:40,280 --> 00:45:45,520
<font color="#CCCCCC">cloudflare com that's it thank</font><font color="#E5E5E5"> you very</font>

1041
00:45:43,400 --> 00:45:45,520
much

1042
00:45:49,150 --> 00:46:00,650
questions when you're speaking<font color="#E5E5E5"> about the</font>

1043
00:45:58,850 --> 00:46:03,980
<font color="#E5E5E5">interaction between the container and</font>

1044
00:46:00,650 --> 00:46:06,050
palsy and the party<font color="#E5E5E5"> is supposed to boot</font>

1045
00:46:03,980 --> 00:46:07,580
straps<font color="#E5E5E5"> the identity of the container yes</font>

1046
00:46:06,050 --> 00:46:10,490
but the connection<font color="#CCCCCC"> that you have 0 was a</font>

1047
00:46:07,580 --> 00:46:13,390
socket leaves icing the question of who

1048
00:46:10,490 --> 00:46:15,740
in fact execute the call somewhat open

1049
00:46:13,390 --> 00:46:18,230
right so how do you identify the actual

1050
00:46:15,740 --> 00:46:20,930
color on the other side of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> obstacle</font>

1051
00:46:18,230 --> 00:46:23,150
right<font color="#E5E5E5"> so when the connection from the</font>

1052
00:46:20,930 --> 00:46:26,500
<font color="#E5E5E5">container to the host happens over this</font>

1053
00:46:23,150 --> 00:46:32,000
over the socket you can actually inspect

1054
00:46:26,500 --> 00:46:34,490
the<font color="#E5E5E5"> UID of the of the the program that's</font>

1055
00:46:32,000 --> 00:46:36,590
that's making that connection so having

1056
00:46:34,490 --> 00:46:38,569
<font color="#CCCCCC">that you ID as an inspection point</font>

1057
00:46:36,590 --> 00:46:41,390
allows you to measure<font color="#E5E5E5"> it and then you</font>

1058
00:46:38,570 --> 00:46:44,060
can use docker notary to validate that

1059
00:46:41,390 --> 00:46:46,490
that container well then you match to

1060
00:46:44,060 --> 00:46:49,310
see whether that is the right you ID

1061
00:46:46,490 --> 00:46:52,490
that's been sent there this is the mesas

1062
00:46:49,310 --> 00:46:54,620
marathon orchestration part you<font color="#CCCCCC"> just can</font>

1063
00:46:52,490 --> 00:46:56,839
<font color="#CCCCCC">you compare it with this</font><font color="#E5E5E5"> is all the</font>

1064
00:46:54,620 --> 00:46:58,430
innards of pal d but it you compare the

1065
00:46:56,840 --> 00:47:00,620
UID with what it's supposed to be and

1066
00:46:58,430 --> 00:47:03,859
then you validate the signature on the

1067
00:47:00,620 --> 00:47:07,160
container on top of that so there's<font color="#E5E5E5"> more</font>

1068
00:47:03,860 --> 00:47:08,510
details<font color="#CCCCCC"> we can talk about</font><font color="#E5E5E5"> it after sorry</font>

1069
00:47:07,160 --> 00:47:12,080
so everything<font color="#E5E5E5"> I know about dr. I just</font>

1070
00:47:08,510 --> 00:47:14,210
learned right now so I'm curious<font color="#E5E5E5"> as</font>

1071
00:47:12,080 --> 00:47:16,549
running<font color="#E5E5E5"> services on a host is it</font>

1072
00:47:14,210 --> 00:47:18,860
possible<font color="#CCCCCC"> to still use this like Red</font>

1073
00:47:16,550 --> 00:47:21,890
October to manage secrets yeah

1074
00:47:18,860 --> 00:47:24,560
<font color="#E5E5E5">absolutely um Red October itself came</font>

1075
00:47:21,890 --> 00:47:27,830
about well well well ahead of using pal

1076
00:47:24,560 --> 00:47:31,340
and the main use case for it was sort of

1077
00:47:27,830 --> 00:47:32,810
long-lived sensitive secrets maybe not

1078
00:47:31,340 --> 00:47:34,640
ones that are deployed on servers but

1079
00:47:32,810 --> 00:47:36,410
ones that are used inside of build

1080
00:47:34,640 --> 00:47:38,750
systems or for code signing or for

1081
00:47:36,410 --> 00:47:41,600
things like this so if you wanted to use

1082
00:47:38,750 --> 00:47:43,070
red october to manage your secrets in a

1083
00:47:41,600 --> 00:47:46,549
in a sort of traditional host

1084
00:47:43,070 --> 00:47:50,270
environment go nuts that's<font color="#CCCCCC"> i mean</font><font color="#E5E5E5"> it's</font>

1085
00:47:46,550 --> 00:47:54,410
it's great for that that use case so<font color="#CCCCCC"> i'm</font>

1086
00:47:50,270 --> 00:47:56,330
curious I guess so why why why did<font color="#E5E5E5"> you</font>

1087
00:47:54,410 --> 00:47:57,730
write a new tool versus using something

1088
00:47:56,330 --> 00:48:01,140
like consoles

1089
00:47:57,730 --> 00:48:04,030
<font color="#E5E5E5">volt or I guess chef fault or</font><font color="#CCCCCC"> whatnot</font>

1090
00:48:01,140 --> 00:48:05,379
<font color="#E5E5E5">yeah I think that the main the main</font>

1091
00:48:04,030 --> 00:48:08,710
point I was trying to<font color="#E5E5E5"> emphasize in this</font>

1092
00:48:05,380 --> 00:48:12,430
talk is that these tools work but they

1093
00:48:08,710 --> 00:48:16,420
need an addition initial identity

1094
00:48:12,430 --> 00:48:20,319
credential to to work and so how do you

1095
00:48:16,420 --> 00:48:23,020
deploy that and you can you<font color="#E5E5E5"> could you</font>

1096
00:48:20,320 --> 00:48:24,850
<font color="#E5E5E5">can do that</font><font color="#CCCCCC"> very well on a system where</font>

1097
00:48:23,020 --> 00:48:27,130
you have a bunch of hosts and you have

1098
00:48:24,850 --> 00:48:29,799
configured them manually and you can

1099
00:48:27,130 --> 00:48:32,290
deploy secrets to those hosts but when

1100
00:48:29,800 --> 00:48:34,600
it comes to secrets coming directly from

1101
00:48:32,290 --> 00:48:36,550
the docker container itself there's no

1102
00:48:34,600 --> 00:48:39,430
way to bootstrap vault I mean that this

1103
00:48:36,550 --> 00:48:40,660
is this is the way that we found<font color="#E5E5E5"> to</font>

1104
00:48:39,430 --> 00:48:42,220
bootstrap vault there was nothing<font color="#E5E5E5"> else</font>

1105
00:48:40,660 --> 00:48:44,230
out<font color="#CCCCCC"> there that</font><font color="#E5E5E5"> would that would do</font><font color="#CCCCCC"> it</font>

1106
00:48:42,220 --> 00:48:48,040
for<font color="#CCCCCC"> us so that's why we built this new</font>

1107
00:48:44,230 --> 00:48:51,369
tool<font color="#CCCCCC"> um if I'm the chief technology</font>

1108
00:48:48,040 --> 00:48:55,240
officer or on a security auditor how

1109
00:48:51,369 --> 00:48:57,400
easy is<font color="#CCCCCC"> it to look at a system that's</font>

1110
00:48:55,240 --> 00:49:00,069
been set up this way and understand what

1111
00:48:57,400 --> 00:49:04,780
the policies are and exactly what's

1112
00:49:00,070 --> 00:49:07,720
going on that's a good<font color="#E5E5E5"> question um yeah</font>

1113
00:49:04,780 --> 00:49:09,220
as as occurred to me when<font color="#E5E5E5"> I was just</font>

1114
00:49:07,720 --> 00:49:11,140
explaining all the different points of

1115
00:49:09,220 --> 00:49:14,830
configurability for Red October it is

1116
00:49:11,140 --> 00:49:17,680
quite complex but if you do have an

1117
00:49:14,830 --> 00:49:21,100
environment where<font color="#CCCCCC"> you can use just</font><font color="#E5E5E5"> a</font>

1118
00:49:17,680 --> 00:49:25,359
simple subset of these it's it's it's

1119
00:49:21,100 --> 00:49:28,630
simple to write<font color="#CCCCCC"> down the policy but yeah</font>

1120
00:49:25,359 --> 00:49:32,369
I guess this along<font color="#CCCCCC"> with</font><font color="#E5E5E5"> a bunch of all</font>

1121
00:49:28,630 --> 00:49:32,369
these other new tools are new and

1122
00:49:32,850 --> 00:49:37,960
explaining them to an auditor is

1123
00:49:35,770 --> 00:49:40,359
potentially difficult but I would say

1124
00:49:37,960 --> 00:49:42,010
that<font color="#E5E5E5"> explaining how you manage secrets</font>

1125
00:49:40,359 --> 00:49:46,509
without something like this is

1126
00:49:42,010 --> 00:49:48,130
potentially more troublesome you

1127
00:49:46,510 --> 00:49:49,660
mentioned earlier but the the trade-off

1128
00:49:48,130 --> 00:49:51,400
between storing secrets locally that are

1129
00:49:49,660 --> 00:49:53,080
encrypted and pass them into a central

1130
00:49:51,400 --> 00:49:54,970
secret<font color="#CCCCCC"> Authority or key management</font>

1131
00:49:53,080 --> 00:49:56,259
solution dresses<font color="#E5E5E5"> just storing the</font>

1132
00:49:54,970 --> 00:49:58,180
secrets and having them manage all of

1133
00:49:56,260 --> 00:49:59,950
those there and<font color="#E5E5E5"> then I feel like that</font>

1134
00:49:58,180 --> 00:50:01,810
<font color="#E5E5E5">wasn't addressed in when you talk about</font>

1135
00:49:59,950 --> 00:50:04,890
specifically pal what are you guys

1136
00:50:01,810 --> 00:50:09,070
recommending yours do in that situation

1137
00:50:04,890 --> 00:50:10,960
right um so at first when<font color="#CCCCCC"> we when we</font>

1138
00:50:09,070 --> 00:50:11,530
first we built pal we we sort of thought

1139
00:50:10,960 --> 00:50:13,660
we could

1140
00:50:11,530 --> 00:50:15,760
just stuff a bunch of different<font color="#CCCCCC"> secrets</font>

1141
00:50:13,660 --> 00:50:17,140
in here and and you you can just<font color="#E5E5E5"> put all</font>

1142
00:50:15,760 --> 00:50:19,030
your secrets that you want for your

1143
00:50:17,140 --> 00:50:21,790
container inside a pal and when it

1144
00:50:19,030 --> 00:50:24,640
starts up they'll all get decrypted but

1145
00:50:21,790 --> 00:50:27,220
as we as we went further along it made a

1146
00:50:24,640 --> 00:50:28,720
lot more sense to just make<font color="#E5E5E5"> make the</font>

1147
00:50:27,220 --> 00:50:31,810
amount of<font color="#E5E5E5"> things that</font><font color="#CCCCCC"> you do with pal as</font>

1148
00:50:28,720 --> 00:50:34,600
small as possible<font color="#E5E5E5"> just limit it to the</font>

1149
00:50:31,810 --> 00:50:38,950
identity<font color="#E5E5E5"> of the container and and that's</font>

1150
00:50:34,600 --> 00:50:42,190
it and and I<font color="#CCCCCC"> think having a large secret</font>

1151
00:50:38,950 --> 00:50:43,509
management system is valuable and and

1152
00:50:42,190 --> 00:50:45,250
and that's<font color="#E5E5E5"> why you still want to use</font>

1153
00:50:43,510 --> 00:50:47,020
vault or knocks or something like or

1154
00:50:45,250 --> 00:50:49,120
keywords with with with something like

1155
00:50:47,020 --> 00:50:52,300
this<font color="#E5E5E5"> but but restrict pal to just the</font>

1156
00:50:49,120 --> 00:50:55,420
identity of the container itself<font color="#CCCCCC"> okay</font>

1157
00:50:52,300 --> 00:50:57,190
I'll we need to stop there to move on to

1158
00:50:55,420 --> 00:51:00,240
next talk so once again<font color="#CCCCCC"> thank you Nick</font>

1159
00:50:57,190 --> 00:51:00,240
<font color="#CCCCCC">all right thanks</font>

