1
00:00:00,060 --> 00:00:04,350
well good afternoon<font color="#E5E5E5"> to heroin thanks a</font>

2
00:00:02,159 --> 00:00:07,170
<font color="#E5E5E5">lot for having me here it's a very great</font>

3
00:00:04,350 --> 00:00:09,719
<font color="#E5E5E5">pleasure to be here</font><font color="#CCCCCC"> so my name is Alomar</font>

4
00:00:07,170 --> 00:00:11,910
<font color="#CCCCCC">Charlie</font><font color="#E5E5E5"> I'm from Italy</font><font color="#CCCCCC"> and I'm a PhD</font>

5
00:00:09,719 --> 00:00:14,459
<font color="#E5E5E5">student at Polytechnic University</font><font color="#CCCCCC"> of</font>

6
00:00:11,910 --> 00:00:16,529
Turin<font color="#CCCCCC"> and I'm also a security researcher</font>

7
00:00:14,460 --> 00:00:19,560
had a specific<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> less pain based</font>

8
00:00:16,529 --> 00:00:22,470
company<font color="#E5E5E5"> and I study machine learning</font>

9
00:00:19,560 --> 00:00:24,060
semi-supervised<font color="#CCCCCC"> modeling and at</font><font color="#E5E5E5"> least</font>

10
00:00:22,470 --> 00:00:27,419
physical work on the Kudus project

11
00:00:24,060 --> 00:00:31,259
<font color="#E5E5E5">working</font><font color="#CCCCCC"> on new algorithms to catch</font>

12
00:00:27,420 --> 00:00:33,239
malware mostly Android malware<font color="#E5E5E5"> so today</font>

13
00:00:31,260 --> 00:00:36,000
we<font color="#E5E5E5"> will talk</font><font color="#CCCCCC"> about the</font><font color="#E5E5E5"> signature</font>

14
00:00:33,239 --> 00:00:38,339
generation problem<font color="#E5E5E5"> the algorithm that I</font>

15
00:00:36,000 --> 00:00:40,379
have developed<font color="#E5E5E5"> and the tool that</font><font color="#CCCCCC"> I have</font>

16
00:00:38,340 --> 00:00:43,379
developed<font color="#E5E5E5"> which is called yaojin</font><font color="#CCCCCC"> and</font>

17
00:00:40,379 --> 00:00:46,980
then I will show you a fast<font color="#E5E5E5"> demo a quick</font>

18
00:00:43,379 --> 00:00:48,660
demo<font color="#E5E5E5"> and some results so let's start</font>

19
00:00:46,980 --> 00:00:51,419
talking<font color="#E5E5E5"> about the signature generation</font>

20
00:00:48,660 --> 00:00:54,000
problem<font color="#E5E5E5"> and what is a</font><font color="#CCCCCC"> model</font><font color="#E5E5E5"> signature</font>

21
00:00:51,420 --> 00:00:57,090
it's a just unique pattern that

22
00:00:54,000 --> 00:01:01,800
identifies a set of malicious samples

23
00:00:57,090 --> 00:01:04,049
and the<font color="#E5E5E5"> big issue between</font><font color="#CCCCCC"> B with the</font>

24
00:01:01,800 --> 00:01:05,850
malware signatures<font color="#E5E5E5"> is that has malware</font>

25
00:01:04,049 --> 00:01:09,090
evolves new signatures needs to be

26
00:01:05,850 --> 00:01:11,130
generated<font color="#E5E5E5"> frequently and there are two</font>

27
00:01:09,090 --> 00:01:12,930
types<font color="#CCCCCC"> of</font><font color="#E5E5E5"> Metal Mulisha type of</font>

28
00:01:11,130 --> 00:01:15,449
signatures they are syntactic signatures

29
00:01:12,930 --> 00:01:18,150
and semantic signatures the<font color="#E5E5E5"> syntactic</font>

30
00:01:15,450 --> 00:01:21,180
signatures are based on text inks and

31
00:01:18,150 --> 00:01:23,820
binary<font color="#E5E5E5"> sequences that are</font><font color="#CCCCCC"> extracted from</font>

32
00:01:21,180 --> 00:01:25,890
<font color="#E5E5E5">the binary</font><font color="#CCCCCC"> inside semantic signatures</font>

33
00:01:23,820 --> 00:01:29,460
provide an abstraction of the<font color="#E5E5E5"> of the</font>

34
00:01:25,890 --> 00:01:31,920
program behavior<font color="#E5E5E5"> and from the industry</font>

35
00:01:29,460 --> 00:01:33,539
<font color="#E5E5E5">point of view the de facto standard type</font>

36
00:01:31,920 --> 00:01:37,140
of<font color="#E5E5E5"> signatures that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> used are the</font>

37
00:01:33,540 --> 00:01:39,360
<font color="#E5E5E5">syntactic types is the syntactic type of</font>

38
00:01:37,140 --> 00:01:41,610
signature and it's also where most<font color="#E5E5E5"> of</font>

39
00:01:39,360 --> 00:01:44,789
the research<font color="#CCCCCC"> brought</font><font color="#E5E5E5"> from industry and</font>

40
00:01:41,610 --> 00:01:46,619
academia focus on instead of<font color="#E5E5E5"> the in this</font>

41
00:01:44,790 --> 00:01:48,450
<font color="#E5E5E5">talk we</font><font color="#CCCCCC"> talk about semantic signatures</font>

42
00:01:46,619 --> 00:01:51,149
<font color="#E5E5E5">because we believe that could lead this</font>

43
00:01:48,450 --> 00:01:54,030
way<font color="#E5E5E5"> back to detection system and this</font>

44
00:01:51,149 --> 00:01:58,530
<font color="#E5E5E5">today's talk is a focus on Android</font>

45
00:01:54,030 --> 00:02:01,369
malware and<font color="#CCCCCC"> yarra rule rules but it's</font>

46
00:01:58,530 --> 00:02:04,740
not to be seen as a limitation because

47
00:02:01,369 --> 00:02:06,570
it's the approach is very<font color="#E5E5E5"> generic and</font>

48
00:02:04,740 --> 00:02:08,940
<font color="#E5E5E5">can</font><font color="#CCCCCC"> be applied to other operating</font>

49
00:02:06,570 --> 00:02:10,810
<font color="#E5E5E5">systems and languages</font><font color="#CCCCCC"> too and just to</font>

50
00:02:08,940 --> 00:02:13,210
not go in

51
00:02:10,810 --> 00:02:14,680
in<font color="#CCCCCC"> the siq we cannot it's</font><font color="#E5E5E5"> not a machine</font>

52
00:02:13,210 --> 00:02:16,540
<font color="#CCCCCC">learning classifier</font><font color="#E5E5E5"> we're not talking</font>

53
00:02:14,680 --> 00:02:18,580
<font color="#E5E5E5">about these I love machine learning I</font>

54
00:02:16,540 --> 00:02:21,910
study heat but we're not<font color="#E5E5E5"> talking about</font>

55
00:02:18,580 --> 00:02:24,070
machine learning<font color="#E5E5E5"> today so</font><font color="#CCCCCC"> why do we need</font>

56
00:02:21,910 --> 00:02:26,710
<font color="#CCCCCC">an algorithm to automatically generate</font>

57
00:02:24,070 --> 00:02:28,540
signature<font color="#E5E5E5"> well the first</font><font color="#CCCCCC"> reason is that</font>

58
00:02:26,710 --> 00:02:32,230
we want<font color="#E5E5E5"> to reduce the malware exposure</font>

59
00:02:28,540 --> 00:02:35,079
time because we want<font color="#E5E5E5"> to detect a sample</font>

60
00:02:32,230 --> 00:02:37,269
<font color="#E5E5E5">Emily to sample as soon as possible then</font>

61
00:02:35,080 --> 00:02:40,540
we want to<font color="#E5E5E5"> automate a very repetitive</font>

62
00:02:37,270 --> 00:02:43,780
task and keep in<font color="#CCCCCC"> mind that</font><font color="#E5E5E5"> from that</font>

63
00:02:40,540 --> 00:02:46,600
today<font color="#E5E5E5"> every day</font><font color="#CCCCCC"> accompany antivirus</font>

64
00:02:43,780 --> 00:02:50,709
companies received from 20,000<font color="#CCCCCC"> to 50,000</font>

65
00:02:46,600 --> 00:02:53,260
new Android applications<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> a very</font>

66
00:02:50,709 --> 00:02:57,970
large<font color="#E5E5E5"> number</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> analysis is not an</font>

67
00:02:53,260 --> 00:03:01,450
option then<font color="#E5E5E5"> we have a goal which is 1%</font>

68
00:02:57,970 --> 00:03:03,700
<font color="#CCCCCC">recall a very</font><font color="#E5E5E5"> high</font><font color="#CCCCCC"> precision which means</font>

69
00:03:01,450 --> 00:03:07,089
we want<font color="#E5E5E5"> to both lower the false negative</font>

70
00:03:03,700 --> 00:03:09,399
and<font color="#E5E5E5"> false positives</font><font color="#CCCCCC"> and finally we want</font>

71
00:03:07,090 --> 00:03:11,820
<font color="#E5E5E5">to save a lot</font><font color="#CCCCCC"> of resources and</font><font color="#E5E5E5"> both</font>

72
00:03:09,400 --> 00:03:14,470
point in time and money because

73
00:03:11,820 --> 00:03:18,100
generating<font color="#E5E5E5"> signatory is quite expensive</font>

74
00:03:14,470 --> 00:03:20,769
and<font color="#E5E5E5"> very</font><font color="#CCCCCC"> time-consuming</font><font color="#E5E5E5"> so today we will</font>

75
00:03:18,100 --> 00:03:23,109
<font color="#E5E5E5">talk about the era the era is a pattern</font>

76
00:03:20,769 --> 00:03:25,750
<font color="#E5E5E5">matching languages used to write model</font>

77
00:03:23,110 --> 00:03:28,600
signatures<font color="#E5E5E5"> and it has been defined by</font>

78
00:03:25,750 --> 00:03:30,720
Victor Alvarez his creator as<font color="#E5E5E5"> Yara is to</font>

79
00:03:28,600 --> 00:03:33,160
file what snort is to network<font color="#E5E5E5"> traffic</font>

80
00:03:30,720 --> 00:03:36,549
<font color="#E5E5E5">one of the main advantages we are is</font>

81
00:03:33,160 --> 00:03:38,560
that<font color="#E5E5E5"> it's fast and it is</font><font color="#CCCCCC"> the de facto</font>

82
00:03:36,549 --> 00:03:41,709
<font color="#CCCCCC">standard LED type of languages that is</font>

83
00:03:38,560 --> 00:03:44,380
used by<font color="#E5E5E5"> the industry</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> antivirus</font>

84
00:03:41,709 --> 00:03:49,630
industry<font color="#CCCCCC"> to write</font><font color="#E5E5E5"> symmetry so it's very</font>

85
00:03:44,380 --> 00:03:52,329
widespread<font color="#CCCCCC"> and so</font><font color="#E5E5E5"> the symmetry that you</font>

86
00:03:49,630 --> 00:03:54,459
can write<font color="#CCCCCC"> Yara</font><font color="#E5E5E5"> hard most of the</font>

87
00:03:52,329 --> 00:03:56,920
syntactic types<font color="#E5E5E5"> so you can write</font>

88
00:03:54,459 --> 00:04:00,400
<font color="#E5E5E5">signature using textual strings and</font>

89
00:03:56,920 --> 00:04:02,170
binary<font color="#E5E5E5"> in sequences although Yara also</font>

90
00:04:00,400 --> 00:04:06,310
supports the semantic signatures if

91
00:04:02,170 --> 00:04:10,298
custom models are used and<font color="#E5E5E5"> this is an</font>

92
00:04:06,310 --> 00:04:11,890
example<font color="#E5E5E5"> of year-over-year rule in</font><font color="#CCCCCC"> Yahoo</font>

93
00:04:10,299 --> 00:04:13,780
there are three main<font color="#CCCCCC"> sections and</font><font color="#E5E5E5"> the</font>

94
00:04:11,890 --> 00:04:15,488
most important one are the<font color="#E5E5E5"> strings and</font>

95
00:04:13,780 --> 00:04:17,709
<font color="#E5E5E5">the condition in the strings you can</font>

96
00:04:15,489 --> 00:04:19,810
<font color="#E5E5E5">place the binary sequences and textual</font>

97
00:04:17,709 --> 00:04:22,030
strings inside the condition is where

98
00:04:19,810 --> 00:04:24,400
the<font color="#E5E5E5"> binary logic the</font>

99
00:04:22,029 --> 00:04:26,500
logic of the rule is placed the<font color="#CCCCCC"> angle</font>

100
00:04:24,400 --> 00:04:29,159
<font color="#E5E5E5">and also</font><font color="#CCCCCC"> some semantic attributes</font><font color="#E5E5E5"> today</font>

101
00:04:26,500 --> 00:04:33,040
we will focus on the condition section

102
00:04:29,160 --> 00:04:35,830
<font color="#E5E5E5">now let's switch to the algorithm well</font>

103
00:04:33,040 --> 00:04:37,870
the algorithm<font color="#E5E5E5"> that I</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> developed is</font>

104
00:04:35,830 --> 00:04:40,300
placed within a pipeline that<font color="#CCCCCC"> is very</font>

105
00:04:37,870 --> 00:04:44,620
common to many antivirus antivirus

106
00:04:40,300 --> 00:04:47,080
companies<font color="#CCCCCC"> in this pipeline the first</font>

107
00:04:44,620 --> 00:04:50,500
step is the<font color="#E5E5E5"> IP k submission every day</font>

108
00:04:47,080 --> 00:04:53,139
the antivirus company receives thousands

109
00:04:50,500 --> 00:04:56,440
of<font color="#E5E5E5"> new applications</font><font color="#CCCCCC"> those applications</font>

110
00:04:53,139 --> 00:04:59,560
are<font color="#E5E5E5"> then clustered using several and</font>

111
00:04:56,440 --> 00:05:01,990
supervised techniques<font color="#CCCCCC"> i</font><font color="#E5E5E5"> will not focus</font>

112
00:04:59,560 --> 00:05:03,790
my talk on those techniques but there

113
00:05:01,990 --> 00:05:06,100
are many it's a very<font color="#CCCCCC"> well known problem</font>

114
00:05:03,790 --> 00:05:08,470
<font color="#E5E5E5">rough from academia</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the industry</font>

115
00:05:06,100 --> 00:05:10,750
there<font color="#E5E5E5"> are tons of different sources and</font>

116
00:05:08,470 --> 00:05:13,030
solutions<font color="#E5E5E5"> so let's say</font><font color="#CCCCCC"> that someone at</font>

117
00:05:10,750 --> 00:05:15,310
some point says<font color="#E5E5E5"> ok it's a Marvel family</font>

118
00:05:13,030 --> 00:05:18,609
<font color="#E5E5E5">and we want to generate a signature for</font>

119
00:05:15,310 --> 00:05:20,770
them<font color="#E5E5E5"> so the input of the algorithm is</font>

120
00:05:18,610 --> 00:05:23,590
such<font color="#E5E5E5"> a Marvel family and we don't really</font>

121
00:05:20,770 --> 00:05:27,090
care<font color="#E5E5E5"> how such family has been found</font>

122
00:05:23,590 --> 00:05:29,739
<font color="#CCCCCC">maybe manually maybe automatically</font><font color="#E5E5E5"> and</font>

123
00:05:27,090 --> 00:05:31,270
in order to automatically<font color="#CCCCCC"> generate a</font>

124
00:05:29,740 --> 00:05:34,479
signature<font color="#CCCCCC"> you need to</font><font color="#E5E5E5"> start some</font>

125
00:05:31,270 --> 00:05:37,780
attributes so it's<font color="#E5E5E5"> very important that</font>

126
00:05:34,479 --> 00:05:40,990
an application<font color="#E5E5E5"> is</font><font color="#CCCCCC"> analyzed using static</font>

127
00:05:37,780 --> 00:05:43,239
and dynamic<font color="#E5E5E5"> approaches and in the end of</font>

128
00:05:40,990 --> 00:05:45,340
<font color="#E5E5E5">the analysis there will be a bunch of</font>

129
00:05:43,240 --> 00:05:46,840
<font color="#CCCCCC">attributes</font><font color="#E5E5E5"> that is feature extracted</font>

130
00:05:45,340 --> 00:05:49,570
from the applications and each<font color="#E5E5E5"> attribute</font>

131
00:05:46,840 --> 00:05:52,659
<font color="#E5E5E5">is a Time Square in that Gregory that</font>

132
00:05:49,570 --> 00:05:55,570
<font color="#E5E5E5">you can see on the screen an attribute</font>

133
00:05:52,660 --> 00:05:57,460
can<font color="#CCCCCC"> be a new</font><font color="#E5E5E5"> handler</font><font color="#CCCCCC"> he'll that that the</font>

134
00:05:55,570 --> 00:05:59,349
application contact<font color="#E5E5E5"> during the dynamic</font>

135
00:05:57,460 --> 00:06:00,789
analysis or can be a<font color="#E5E5E5"> permission and in</font>

136
00:05:59,350 --> 00:06:02,830
<font color="#E5E5E5">turn filter everything else</font>

137
00:06:00,789 --> 00:06:04,300
there are several<font color="#E5E5E5"> software that can be</font>

138
00:06:02,830 --> 00:06:06,849
<font color="#CCCCCC">used for example Android it's</font><font color="#E5E5E5"> very</font>

139
00:06:04,300 --> 00:06:08,979
common<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use an</font><font color="#E5E5E5"> and regard drug</font><font color="#CCCCCC"> box and</font>

140
00:06:06,850 --> 00:06:12,010
cuckoo<font color="#E5E5E5"> which is very famous software</font>

141
00:06:08,979 --> 00:06:14,349
<font color="#E5E5E5">frameworks and I would like to remark</font>

142
00:06:12,010 --> 00:06:17,110
<font color="#CCCCCC">that it's very important that</font><font color="#E5E5E5"> if this</font>

143
00:06:14,350 --> 00:06:20,830
<font color="#CCCCCC">phaser</font><font color="#E5E5E5"> is accurate because as many</font>

144
00:06:17,110 --> 00:06:24,190
attributes as you can find<font color="#E5E5E5"> as much as</font>

145
00:06:20,830 --> 00:06:26,650
your rule will be<font color="#E5E5E5"> better</font><font color="#CCCCCC"> so if in order</font>

146
00:06:24,190 --> 00:06:30,490
<font color="#E5E5E5">to have</font><font color="#CCCCCC"> better</font><font color="#E5E5E5"> a good quality rule we</font>

147
00:06:26,650 --> 00:06:32,500
need<font color="#CCCCCC"> a very</font><font color="#E5E5E5"> high quality analysis the</font>

148
00:06:30,490 --> 00:06:33,190
idea behind the<font color="#CCCCCC"> marvel signature</font>

149
00:06:32,500 --> 00:06:36,820
generation

150
00:06:33,190 --> 00:06:39,430
process is<font color="#E5E5E5"> very simple we have</font><font color="#CCCCCC"> two</font>

151
00:06:36,820 --> 00:06:42,340
samples<font color="#CCCCCC"> those samples have a number of</font>

152
00:06:39,430 --> 00:06:44,290
attributes<font color="#CCCCCC"> and some of them are of the</font>

153
00:06:42,340 --> 00:06:46,479
same type in the inbox of<font color="#E5E5E5"> the samples</font>

154
00:06:44,290 --> 00:06:49,120
<font color="#E5E5E5">for example</font><font color="#CCCCCC"> there are some yellow and</font>

155
00:06:46,480 --> 00:06:51,430
<font color="#CCCCCC">some green attributes</font><font color="#E5E5E5"> and let's say</font><font color="#CCCCCC"> that</font>

156
00:06:49,120 --> 00:06:53,080
some of<font color="#E5E5E5"> them are really in common so we</font>

157
00:06:51,430 --> 00:06:55,930
can<font color="#E5E5E5"> generate a signature just finding</font>

158
00:06:53,080 --> 00:07:00,010
which attributes are in common although

159
00:06:55,930 --> 00:07:02,170
<font color="#CCCCCC">the</font><font color="#E5E5E5"> real world scenario is much more</font>

160
00:07:00,010 --> 00:07:04,810
complex<font color="#E5E5E5"> there is no unique pattern</font>

161
00:07:02,170 --> 00:07:07,510
<font color="#CCCCCC">within</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> within</font><font color="#E5E5E5"> all the samples in</font>

162
00:07:04,810 --> 00:07:10,090
<font color="#E5E5E5">the same</font><font color="#CCCCCC"> malware family so it's it's</font>

163
00:07:07,510 --> 00:07:14,020
very<font color="#CCCCCC"> difficult to find a pattern</font><font color="#E5E5E5"> and</font>

164
00:07:10,090 --> 00:07:17,200
<font color="#E5E5E5">actually a single pattern</font><font color="#CCCCCC"> doesn't exist</font>

165
00:07:14,020 --> 00:07:22,390
<font color="#CCCCCC">so the goal</font><font color="#E5E5E5"> of the signature generation</font>

166
00:07:17,200 --> 00:07:26,170
problem<font color="#E5E5E5"> is to find the set the subset of</font>

167
00:07:22,390 --> 00:07:30,250
attributes<font color="#E5E5E5"> that cover the entire Marvel</font>

168
00:07:26,170 --> 00:07:31,840
<font color="#CCCCCC">family and this</font><font color="#E5E5E5"> problem if you think</font><font color="#CCCCCC"> a</font>

169
00:07:30,250 --> 00:07:33,670
little<font color="#E5E5E5"> this problem is very simple</font><font color="#CCCCCC"> - a</font>

170
00:07:31,840 --> 00:07:35,440
very<font color="#CCCCCC"> well known problem</font><font color="#E5E5E5"> from the</font>

171
00:07:33,670 --> 00:07:37,660
literature<font color="#CCCCCC"> which is the</font><font color="#E5E5E5"> set coverage</font>

172
00:07:35,440 --> 00:07:38,919
problem and actually<font color="#CCCCCC"> this is a</font><font color="#E5E5E5"> variant</font>

173
00:07:37,660 --> 00:07:41,280
<font color="#E5E5E5">the creating</font><font color="#CCCCCC"> viral signature is a</font>

174
00:07:38,919 --> 00:07:43,419
variant of<font color="#E5E5E5"> the set coverage problem and</font>

175
00:07:41,280 --> 00:07:45,729
unfortunately<font color="#CCCCCC"> this problem is</font>

176
00:07:43,419 --> 00:07:49,150
np-complete<font color="#CCCCCC"> which means it's very very</font>

177
00:07:45,730 --> 00:07:51,820
difficult to to solve it<font color="#E5E5E5"> but for in</font><font color="#CCCCCC"> our</font>

178
00:07:49,150 --> 00:07:54,489
<font color="#E5E5E5">case</font><font color="#CCCCCC"> either unequivocal commitment is</font>

179
00:07:51,820 --> 00:07:57,010
enough to solve this this<font color="#CCCCCC"> problem so we</font>

180
00:07:54,490 --> 00:08:01,290
<font color="#CCCCCC">can actually</font><font color="#E5E5E5"> find the the middle</font>

181
00:07:57,010 --> 00:08:04,650
signature using such a greedy algorithm

182
00:08:01,290 --> 00:08:06,760
although<font color="#E5E5E5"> one of the main issue in</font>

183
00:08:04,650 --> 00:08:09,120
automatically generating a<font color="#E5E5E5"> signature is</font>

184
00:08:06,760 --> 00:08:12,130
not actually generating heat but it's

185
00:08:09,120 --> 00:08:14,790
understanding if it's a<font color="#CCCCCC"> high-quality</font>

186
00:08:12,130 --> 00:08:18,400
signature so the problem<font color="#E5E5E5"> is to</font>

187
00:08:14,790 --> 00:08:20,560
understand<font color="#E5E5E5"> evaluate the result of the</font>

188
00:08:18,400 --> 00:08:22,870
automatic<font color="#CCCCCC"> generation</font><font color="#E5E5E5"> and so in order to</font>

189
00:08:20,560 --> 00:08:25,720
<font color="#E5E5E5">better understand it</font><font color="#CCCCCC"> I will introduce</font>

190
00:08:22,870 --> 00:08:29,140
<font color="#E5E5E5">some formula the first one is the</font><font color="#CCCCCC"> normal</font>

191
00:08:25,720 --> 00:08:32,250
form<font color="#E5E5E5"> so if we reduce its signature to</font><font color="#CCCCCC"> a</font>

192
00:08:29,140 --> 00:08:34,929
<font color="#CCCCCC">DNF which</font><font color="#E5E5E5"> means disjunctive normal form</font>

193
00:08:32,250 --> 00:08:38,409
it's much but it's much simpler to

194
00:08:34,929 --> 00:08:41,530
<font color="#E5E5E5">evaluate a rule in such normal form</font>

195
00:08:38,409 --> 00:08:43,838
<font color="#E5E5E5">there are</font><font color="#CCCCCC"> a few clauses which are</font><font color="#E5E5E5"> on in</font>

196
00:08:41,530 --> 00:08:45,030
<font color="#E5E5E5">our and each</font><font color="#CCCCCC"> clause is made by the</font>

197
00:08:43,839 --> 00:08:47,880
conjunction<font color="#CCCCCC"> of</font>

198
00:08:45,030 --> 00:08:49,380
literals and literally simply one of<font color="#E5E5E5"> the</font>

199
00:08:47,880 --> 00:08:53,790
hatch abuse that we have extracted

200
00:08:49,380 --> 00:08:56,910
before<font color="#E5E5E5"> and so if we express</font><font color="#CCCCCC"> acts in</font><font color="#E5E5E5"> a</font>

201
00:08:53,790 --> 00:09:01,650
<font color="#E5E5E5">scimitar into DN a-- f we can</font><font color="#CCCCCC"> actually</font>

202
00:08:56,910 --> 00:09:04,410
<font color="#CCCCCC">weighed the values each single clause so</font>

203
00:09:01,650 --> 00:09:07,290
if you can attribute<font color="#E5E5E5"> way to each symbol</font>

204
00:09:04,410 --> 00:09:10,380
<font color="#E5E5E5">flowers we can say that a signature as a</font>

205
00:09:07,290 --> 00:09:13,020
weight which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the lowest among the</font>

206
00:09:10,380 --> 00:09:14,730
weights of its clauses so we are able<font color="#E5E5E5"> to</font>

207
00:09:13,020 --> 00:09:16,890
<font color="#E5E5E5">understand to give a</font><font color="#CCCCCC"> score to a</font>

208
00:09:14,730 --> 00:09:19,770
signature<font color="#E5E5E5"> starting from the scholar of</font>

209
00:09:16,890 --> 00:09:26,670
<font color="#E5E5E5">the single clauses it is made of and</font>

210
00:09:19,770 --> 00:09:30,110
<font color="#E5E5E5">this process sorry this waiting process</font>

211
00:09:26,670 --> 00:09:35,339
<font color="#E5E5E5">isn't the</font><font color="#CCCCCC"> base of the evaluation system</font>

212
00:09:30,110 --> 00:09:38,640
<font color="#E5E5E5">because</font><font color="#CCCCCC"> a rule that as a very as a high</font>

213
00:09:35,340 --> 00:09:40,440
score will be<font color="#E5E5E5"> too specific</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> too</font>

214
00:09:38,640 --> 00:09:42,870
specific means will produce a<font color="#E5E5E5"> lot of</font>

215
00:09:40,440 --> 00:09:44,700
<font color="#E5E5E5">false negative because</font><font color="#CCCCCC"> we not being</font><font color="#E5E5E5"> able</font>

216
00:09:42,870 --> 00:09:48,030
to generalize<font color="#E5E5E5"> the detection to other</font>

217
00:09:44,700 --> 00:09:51,120
malware<font color="#E5E5E5"> samples and other hand centers</font>

218
00:09:48,030 --> 00:09:53,520
with which has a very<font color="#CCCCCC"> low weight will be</font>

219
00:09:51,120 --> 00:09:55,770
<font color="#CCCCCC">too generic and will mean this means</font>

220
00:09:53,520 --> 00:09:59,460
<font color="#E5E5E5">that there will be a lot of false</font>

221
00:09:55,770 --> 00:10:02,910
<font color="#E5E5E5">positive detections</font><font color="#CCCCCC"> instead what we</font><font color="#E5E5E5"> want</font>

222
00:09:59,460 --> 00:10:05,580
is to generate<font color="#E5E5E5"> a signature between two</font>

223
00:10:02,910 --> 00:10:07,620
<font color="#CCCCCC">trap shots timmy 90 marks and we say</font>

224
00:10:05,580 --> 00:10:10,110
that the<font color="#E5E5E5"> signature that has a weight</font>

225
00:10:07,620 --> 00:10:15,120
with between these two thresholds is an

226
00:10:10,110 --> 00:10:18,000
optimal signature so you can easily

227
00:10:15,120 --> 00:10:20,310
understand that in<font color="#CCCCCC"> order to have a very</font>

228
00:10:18,000 --> 00:10:22,590
<font color="#E5E5E5">effective waiting process so in order to</font>

229
00:10:20,310 --> 00:10:25,250
<font color="#E5E5E5">be able</font><font color="#CCCCCC"> to effectively</font><font color="#E5E5E5"> effectively</font>

230
00:10:22,590 --> 00:10:27,780
evaluate<font color="#E5E5E5"> a rule we need to assign</font>

231
00:10:25,250 --> 00:10:32,000
correctly those weights<font color="#E5E5E5"> and that's the</font>

232
00:10:27,780 --> 00:10:35,069
hard part<font color="#E5E5E5"> and also the</font><font color="#CCCCCC"> the way in which</font>

233
00:10:32,000 --> 00:10:37,080
the attributes are weighed is very<font color="#E5E5E5"> tight</font>

234
00:10:35,070 --> 00:10:40,200
to the way in<font color="#CCCCCC"> which teaming antimacassar</font>

235
00:10:37,080 --> 00:10:42,150
<font color="#E5E5E5">set actually</font><font color="#CCCCCC"> i want</font><font color="#E5E5E5"> to the process to</font><font color="#CCCCCC"> be</font>

236
00:10:40,200 --> 00:10:46,620
<font color="#E5E5E5">automatically because this is a very</font>

237
00:10:42,150 --> 00:10:49,800
crucial part<font color="#CCCCCC"> i</font><font color="#E5E5E5"> don't want</font><font color="#CCCCCC"> to this part</font>

238
00:10:46,620 --> 00:10:54,120
relies<font color="#E5E5E5"> on the knowledge</font><font color="#CCCCCC"> of the expert</font>

239
00:10:49,800 --> 00:10:56,459
<font color="#CCCCCC">analyst so one of</font><font color="#E5E5E5"> the possible</font><font color="#CCCCCC"> solution</font>

240
00:10:54,120 --> 00:10:58,740
that<font color="#CCCCCC"> we adopted the type</font>

241
00:10:56,459 --> 00:11:01,219
is to start from existing<font color="#E5E5E5"> yards there</font>

242
00:10:58,740 --> 00:11:04,440
are a lot<font color="#CCCCCC"> entire repositories of</font><font color="#E5E5E5"> yards</font>

243
00:11:01,220 --> 00:11:07,019
<font color="#E5E5E5">then if you start from then you can pass</font>

244
00:11:04,440 --> 00:11:11,220
<font color="#E5E5E5">them you can process them and</font><font color="#CCCCCC"> twist them</font>

245
00:11:07,019 --> 00:11:14,639
to into the<font color="#CCCCCC"> NRF then it becomes a simple</font>

246
00:11:11,220 --> 00:11:15,870
<font color="#E5E5E5">linear problem I can't that can be</font>

247
00:11:14,639 --> 00:11:18,480
solved through<font color="#E5E5E5"> linear programming</font>

248
00:11:15,870 --> 00:11:23,310
techniques like the simplex algorithm

249
00:11:18,480 --> 00:11:26,490
<font color="#CCCCCC">and in that we</font><font color="#E5E5E5"> will have an assignment</font>

250
00:11:23,310 --> 00:11:29,099
<font color="#CCCCCC">of weights for each attribute so that</font>

251
00:11:26,490 --> 00:11:33,000
the<font color="#CCCCCC"> 95% Oh existing rules that are</font>

252
00:11:29,100 --> 00:11:35,160
satisfied and 95%<font color="#E5E5E5"> of those rules</font><font color="#CCCCCC"> that</font>

253
00:11:33,000 --> 00:11:37,800
will have a weight that<font color="#E5E5E5"> is between the</font>

254
00:11:35,160 --> 00:11:40,410
truth I shall team in and<font color="#CCCCCC"> T max</font><font color="#E5E5E5"> because</font>

255
00:11:37,800 --> 00:11:43,170
<font color="#E5E5E5">why 95 because some rules</font><font color="#CCCCCC"> that are so</font>

256
00:11:40,410 --> 00:11:45,540
specific for a<font color="#CCCCCC"> manual</font><font color="#E5E5E5"> family that cannot</font>

257
00:11:43,170 --> 00:11:50,009
be really<font color="#E5E5E5"> used in the way team process</font>

258
00:11:45,540 --> 00:11:51,930
so we<font color="#E5E5E5"> will discard them okay actually</font>

259
00:11:50,009 --> 00:11:54,509
<font color="#E5E5E5">when when we implemented such a</font>

260
00:11:51,930 --> 00:11:57,029
procedure<font color="#E5E5E5"> we were really able to</font>

261
00:11:54,509 --> 00:12:02,010
<font color="#CCCCCC">generate</font><font color="#E5E5E5"> signature but a new problems</font>

262
00:11:57,029 --> 00:12:05,250
arise<font color="#E5E5E5"> that is when we generate some</font>

263
00:12:02,010 --> 00:12:08,399
<font color="#E5E5E5">signature there were two specific the</font>

264
00:12:05,250 --> 00:12:09,899
<font color="#CCCCCC">way it was so high that actually they</font>

265
00:12:08,399 --> 00:12:14,040
were not able to attack the<font color="#CCCCCC"> other</font>

266
00:12:09,899 --> 00:12:16,560
applications rather than the the the

267
00:12:14,040 --> 00:12:19,439
family<font color="#E5E5E5"> that was used to</font><font color="#CCCCCC"> create them so</font>

268
00:12:16,560 --> 00:12:22,250
we need<font color="#CCCCCC"> another</font><font color="#E5E5E5"> face that reduce</font><font color="#CCCCCC"> the</font>

269
00:12:19,440 --> 00:12:25,019
number<font color="#CCCCCC"> of attributes of a signature</font><font color="#E5E5E5"> and</font>

270
00:12:22,250 --> 00:12:27,690
we call this phase optimization phase

271
00:12:25,019 --> 00:12:29,550
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> the goal is it's</font><font color="#E5E5E5"> quite simple</font>

272
00:12:27,690 --> 00:12:32,490
we need just<font color="#E5E5E5"> to throw how some</font>

273
00:12:29,550 --> 00:12:35,010
attributes and we have two different

274
00:12:32,490 --> 00:12:35,850
solution<font color="#CCCCCC"> the basic optimizer and the</font>

275
00:12:35,010 --> 00:12:38,130
<font color="#E5E5E5">heave optimizer</font>

276
00:12:35,850 --> 00:12:40,560
<font color="#E5E5E5">well actually the basic optimizer is</font>

277
00:12:38,130 --> 00:12:44,370
simple greedy approach to try out some

278
00:12:40,560 --> 00:12:47,550
some<font color="#CCCCCC"> achieve</font><font color="#E5E5E5"> it in a random way instead</font>

279
00:12:44,370 --> 00:12:50,750
<font color="#E5E5E5">the team optimizer</font><font color="#CCCCCC"> he's done is a much</font>

280
00:12:47,550 --> 00:12:54,269
more complex optimizer<font color="#CCCCCC"> that uses</font>

281
00:12:50,750 --> 00:12:56,310
evolutionary algorithms<font color="#E5E5E5"> and this is very</font>

282
00:12:54,269 --> 00:12:58,709
<font color="#CCCCCC">useful because</font><font color="#E5E5E5"> there are no written</font>

283
00:12:56,310 --> 00:13:01,018
rules but some we<font color="#CCCCCC"> our rule says</font><font color="#E5E5E5"> some</font>

284
00:12:58,709 --> 00:13:02,880
signature are much<font color="#E5E5E5"> better</font><font color="#CCCCCC"> than other and</font>

285
00:13:01,019 --> 00:13:06,630
if you look at them you<font color="#CCCCCC"> can really spot</font>

286
00:13:02,880 --> 00:13:09,750
them actually so we try<font color="#E5E5E5"> to encode</font>

287
00:13:06,630 --> 00:13:12,930
so the<font color="#E5E5E5"> knowledge of such a better rule</font>

288
00:13:09,750 --> 00:13:14,820
set<font color="#E5E5E5"> into some eristic</font><font color="#CCCCCC"> s--</font><font color="#E5E5E5"> and then these</font>

289
00:13:12,930 --> 00:13:16,949
risks are used within an evolutionary

290
00:13:14,820 --> 00:13:19,230
algorithm<font color="#E5E5E5"> to pick up the best</font>

291
00:13:16,950 --> 00:13:21,240
optimization possible<font color="#CCCCCC"> and since</font><font color="#E5E5E5"> it's a</font>

292
00:13:19,230 --> 00:13:23,190
broad optimization<font color="#E5E5E5"> so it's not a very</font>

293
00:13:21,240 --> 00:13:25,410
extreme optimization<font color="#E5E5E5"> evolutionary</font>

294
00:13:23,190 --> 00:13:30,750
algorithms can be<font color="#E5E5E5"> applied and</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> found</font>

295
00:13:25,410 --> 00:13:33,120
a solution<font color="#E5E5E5"> in few minutes so the entire</font>

296
00:13:30,750 --> 00:13:34,830
<font color="#E5E5E5">process that</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> have described have been</font>

297
00:13:33,120 --> 00:13:37,560
implemented into<font color="#E5E5E5"> a tool that is</font><font color="#CCCCCC"> called</font>

298
00:13:34,830 --> 00:13:39,510
<font color="#CCCCCC">Gaia john</font><font color="#E5E5E5"> elgin is an acronym has stands</font>

299
00:13:37,560 --> 00:13:42,900
for yet another<font color="#CCCCCC"> we are a rule generator</font>

300
00:13:39,510 --> 00:13:44,939
and the<font color="#CCCCCC"> AIA</font><font color="#E5E5E5"> in spanish means grandmother</font>

301
00:13:42,900 --> 00:13:49,439
and that's why there<font color="#E5E5E5"> is and</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> see a nice</font>

302
00:13:44,940 --> 00:13:52,290
grandmother in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> lab</font><font color="#E5E5E5"> and the ideal the</font>

303
00:13:49,440 --> 00:13:54,930
tool is<font color="#CCCCCC"> that the input</font><font color="#E5E5E5"> will be a set of</font>

304
00:13:52,290 --> 00:13:57,599
<font color="#CCCCCC">reports</font><font color="#E5E5E5"> or reports that are generated</font><font color="#CCCCCC"> by</font>

305
00:13:54,930 --> 00:13:59,760
the analysis<font color="#E5E5E5"> process of the application</font>

306
00:13:57,600 --> 00:14:01,590
of statically and dynamically and the

307
00:13:59,760 --> 00:14:04,620
output is a set of your rules that will

308
00:14:01,590 --> 00:14:07,320
cover the malware family so if the model

309
00:14:04,620 --> 00:14:09,930
<font color="#CCCCCC">family is composed</font><font color="#E5E5E5"> by samples which are</font>

310
00:14:07,320 --> 00:14:12,030
all similar<font color="#E5E5E5"> between each other there</font>

311
00:14:09,930 --> 00:14:13,319
<font color="#E5E5E5">will be just one rule but if they are</font>

312
00:14:12,030 --> 00:14:16,230
very<font color="#E5E5E5"> different there will be multiple</font>

313
00:14:13,320 --> 00:14:19,290
rules<font color="#E5E5E5"> so actually the quality of the</font>

314
00:14:16,230 --> 00:14:25,770
family is<font color="#E5E5E5"> not very important what is</font>

315
00:14:19,290 --> 00:14:27,329
important is the analysis it's the

316
00:14:25,770 --> 00:14:29,579
important<font color="#E5E5E5"> part is just the analysis</font>

317
00:14:27,330 --> 00:14:33,900
process so<font color="#CCCCCC"> extract as many attributes as</font>

318
00:14:29,580 --> 00:14:36,350
possible so what does<font color="#CCCCCC"> the agent includes</font>

319
00:14:33,900 --> 00:14:38,939
the agent includes two algorithms<font color="#E5E5E5"> the</font>

320
00:14:36,350 --> 00:14:41,130
<font color="#CCCCCC">breeding the basic read</font><font color="#E5E5E5"> implementation</font>

321
00:14:38,940 --> 00:14:42,750
and<font color="#E5E5E5"> and an announced at grid</font>

322
00:14:41,130 --> 00:14:45,030
<font color="#CCCCCC">implementation which is called plot</font>

323
00:14:42,750 --> 00:14:46,680
which is<font color="#CCCCCC"> the dynamically the</font><font color="#E5E5E5"> algorithm</font>

324
00:14:45,030 --> 00:14:49,350
and<font color="#CCCCCC"> to optimizers</font>

325
00:14:46,680 --> 00:14:53,520
the basic and<font color="#CCCCCC"> eve optimizers and</font><font color="#E5E5E5"> some</font>

326
00:14:49,350 --> 00:14:56,850
heuristics it includes a also<font color="#E5E5E5"> your rule</font>

327
00:14:53,520 --> 00:14:59,130
parser so that if you have your<font color="#E5E5E5"> own site</font>

328
00:14:56,850 --> 00:15:01,610
of<font color="#E5E5E5"> your goals you can parse them you can</font>

329
00:14:59,130 --> 00:15:04,710
assign the weights according<font color="#CCCCCC"> to them</font><font color="#E5E5E5"> and</font>

330
00:15:01,610 --> 00:15:06,450
we also have an<font color="#E5E5E5"> option to exclude false</font>

331
00:15:04,710 --> 00:15:08,490
<font color="#E5E5E5">positive during the rule generation</font>

332
00:15:06,450 --> 00:15:10,680
because there are some cases<font color="#E5E5E5"> in</font><font color="#CCCCCC"> which</font>

333
00:15:08,490 --> 00:15:13,230
may be the generator rules will generate

334
00:15:10,680 --> 00:15:16,199
<font color="#CCCCCC">some false positive and even</font><font color="#E5E5E5"> even if</font>

335
00:15:13,230 --> 00:15:18,790
those are very rare<font color="#CCCCCC"> are</font><font color="#E5E5E5"> very annoying so</font>

336
00:15:16,200 --> 00:15:20,520
<font color="#CCCCCC">you can actually say do</font><font color="#E5E5E5"> not</font>

337
00:15:18,790 --> 00:15:23,290
generator will that match those

338
00:15:20,520 --> 00:15:26,560
applications<font color="#CCCCCC"> and</font><font color="#E5E5E5"> everything has</font><font color="#CCCCCC"> been</font>

339
00:15:23,290 --> 00:15:28,810
written in Python 3 in order<font color="#CCCCCC"> to</font>

340
00:15:26,560 --> 00:15:30,790
understand better how engine works

341
00:15:28,810 --> 00:15:32,829
internally and why<font color="#CCCCCC"> aside</font><font color="#E5E5E5"> that the</font>

342
00:15:30,790 --> 00:15:37,180
<font color="#E5E5E5">approach is general let's look at this</font>

343
00:15:32,830 --> 00:15:40,060
picture<font color="#CCCCCC"> so the input of</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> Jana</font><font color="#E5E5E5"> is a</font>

344
00:15:37,180 --> 00:15:42,069
bunch of application<font color="#E5E5E5"> and each</font>

345
00:15:40,060 --> 00:15:46,599
<font color="#E5E5E5">application is represented as a set</font><font color="#CCCCCC"> of</font>

346
00:15:42,070 --> 00:15:48,640
tuples<font color="#E5E5E5"> in Python so the actual input</font><font color="#CCCCCC"> is</font>

347
00:15:46,600 --> 00:15:50,320
a set of set of<font color="#CCCCCC"> tuples</font><font color="#E5E5E5"> and you can</font>

348
00:15:48,640 --> 00:15:52,300
actually understand<font color="#CCCCCC"> that it's very</font>

349
00:15:50,320 --> 00:15:55,150
<font color="#E5E5E5">generated so it's not very specific on</font>

350
00:15:52,300 --> 00:15:58,959
<font color="#E5E5E5">though it can</font><font color="#CCCCCC"> be anything just a set of</font>

351
00:15:55,150 --> 00:16:01,660
<font color="#E5E5E5">set of something and so there are two</font>

352
00:15:58,960 --> 00:16:04,360
main flow the<font color="#E5E5E5"> drive flow that simply</font>

353
00:16:01,660 --> 00:16:08,140
generates one rule<font color="#CCCCCC"> for</font><font color="#E5E5E5"> each sample</font><font color="#CCCCCC"> and</font>

354
00:16:04,360 --> 00:16:12,370
<font color="#E5E5E5">input which is the most basic</font><font color="#CCCCCC"> thing that</font>

355
00:16:08,140 --> 00:16:16,060
can be<font color="#E5E5E5"> done and the</font><font color="#CCCCCC"> other flow instead</font>

356
00:16:12,370 --> 00:16:21,370
covers the<font color="#E5E5E5"> route generation so starting</font>

357
00:16:16,060 --> 00:16:24,250
from this<font color="#CCCCCC"> set of set of</font><font color="#E5E5E5"> tuples a an</font>

358
00:16:21,370 --> 00:16:26,620
optimal attribute subset<font color="#E5E5E5"> that covers the</font>

359
00:16:24,250 --> 00:16:28,540
<font color="#CCCCCC">entire family is generated</font><font color="#E5E5E5"> and then</font>

360
00:16:26,620 --> 00:16:31,780
there will be an optimization phase and

361
00:16:28,540 --> 00:16:34,510
<font color="#CCCCCC">finally</font><font color="#E5E5E5"> the last phase is</font><font color="#CCCCCC"> the conversion</font>

362
00:16:31,780 --> 00:16:37,120
<font color="#CCCCCC">into the specific language</font><font color="#E5E5E5"> so what I</font>

363
00:16:34,510 --> 00:16:38,710
want<font color="#E5E5E5"> to hold mark is</font><font color="#CCCCCC"> that if you change</font>

364
00:16:37,120 --> 00:16:40,720
the<font color="#E5E5E5"> first and the last phase to</font>

365
00:16:38,710 --> 00:16:43,330
something<font color="#CCCCCC"> has</font><font color="#E5E5E5"> everything still continues</font>

366
00:16:40,720 --> 00:16:46,090
to work<font color="#E5E5E5"> you just</font><font color="#CCCCCC"> need some way to</font>

367
00:16:43,330 --> 00:16:47,740
evaluate the rule and do it and change

368
00:16:46,090 --> 00:16:49,690
the ristic because of course those are

369
00:16:47,740 --> 00:16:51,580
<font color="#E5E5E5">very</font><font color="#CCCCCC"> specific to</font><font color="#E5E5E5"> the platform because</font>

370
00:16:49,690 --> 00:16:54,820
the eristic that works for<font color="#CCCCCC"> android</font><font color="#E5E5E5"> maybe</font>

371
00:16:51,580 --> 00:16:56,980
will not work<font color="#CCCCCC"> for windows</font><font color="#E5E5E5"> and actually</font>

372
00:16:54,820 --> 00:16:59,110
since<font color="#E5E5E5"> I work on the</font><font color="#CCCCCC"> Kudus project and</font>

373
00:16:56,980 --> 00:17:00,940
kudos isn't<font color="#CCCCCC"> you know an open device</font>

374
00:16:59,110 --> 00:17:03,130
<font color="#E5E5E5">which means you can actually use it</font>

375
00:17:00,940 --> 00:17:07,510
without paying<font color="#E5E5E5"> anything if everything is</font>

376
00:17:03,130 --> 00:17:10,510
open<font color="#E5E5E5"> it's ready</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> CUDA so you can use</font>

377
00:17:07,510 --> 00:17:13,710
the<font color="#E5E5E5"> dual reports of kudos</font><font color="#CCCCCC"> and use the</font>

378
00:17:10,510 --> 00:17:13,710
yard rules in kudos

379
00:17:14,980 --> 00:17:20,260
so the great news<font color="#CCCCCC"> is that everything is</font>

380
00:17:18,160 --> 00:17:23,320
freely available on<font color="#E5E5E5"> github actually</font>

381
00:17:20,260 --> 00:17:28,180
still private but I will make<font color="#E5E5E5"> it public</font>

382
00:17:23,319 --> 00:17:29,899
in a few minutes after the<font color="#E5E5E5"> talk and now</font>

383
00:17:28,180 --> 00:17:33,559
let's see

384
00:17:29,900 --> 00:17:36,620
short demo<font color="#E5E5E5"> about how everything works so</font>

385
00:17:33,559 --> 00:17:40,789
I will show<font color="#CCCCCC"> through two case cases the</font>

386
00:17:36,620 --> 00:17:43,580
first<font color="#E5E5E5"> one is a very</font><font color="#CCCCCC"> simple case where I</font>

387
00:17:40,789 --> 00:17:47,120
just<font color="#CCCCCC"> say use the</font><font color="#E5E5E5"> claw algorithm to</font>

388
00:17:43,580 --> 00:17:49,399
generate a rule set foreign all<font color="#E5E5E5"> the all</font>

389
00:17:47,120 --> 00:17:52,668
the samples<font color="#CCCCCC"> that are within a directory</font>

390
00:17:49,400 --> 00:17:56,990
<font color="#CCCCCC">and as you can see gr</font><font color="#E5E5E5"> degeneration is</font>

391
00:17:52,669 --> 00:18:00,679
actually immediate<font color="#E5E5E5"> it's very fast it's</font><font color="#CCCCCC"> a</font>

392
00:17:56,990 --> 00:18:03,309
it's<font color="#E5E5E5"> extremely fast and in this process</font>

393
00:18:00,679 --> 00:18:06,320
<font color="#CCCCCC">the first</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> that you can see is that</font>

394
00:18:03,309 --> 00:18:08,090
the algorithm process the inputs that<font color="#CCCCCC"> is</font>

395
00:18:06,320 --> 00:18:10,279
<font color="#CCCCCC">extracting attributes from from the</font>

396
00:18:08,090 --> 00:18:13,639
report there is<font color="#E5E5E5"> a simple part simple</font>

397
00:18:10,279 --> 00:18:16,460
JSON parsing model and there is also

398
00:18:13,640 --> 00:18:18,950
some filtering so some attributes are

399
00:18:16,460 --> 00:18:26,840
filtered out because are very generic

400
00:18:18,950 --> 00:18:29,450
<font color="#CCCCCC">and then there are there is the</font><font color="#E5E5E5"> quatrain</font>

401
00:18:26,840 --> 00:18:33,559
and at the end the<font color="#E5E5E5"> proton generate one</font>

402
00:18:29,450 --> 00:18:35,929
rules with the<font color="#CCCCCC"> 13 literals with 13</font>

403
00:18:33,559 --> 00:18:41,000
attributes<font color="#E5E5E5"> now with this weight which</font>

404
00:18:35,929 --> 00:18:42,679
cover<font color="#E5E5E5"> all the samples and since we want</font>

405
00:18:41,000 --> 00:18:45,320
also the optimized version the optimized

406
00:18:42,679 --> 00:18:47,960
version<font color="#CCCCCC"> his printed the below</font><font color="#E5E5E5"> so</font>

407
00:18:45,320 --> 00:18:50,360
automatically<font color="#E5E5E5"> you have both the raw</font>

408
00:18:47,960 --> 00:18:52,549
version of the rule<font color="#E5E5E5"> and the optimized</font>

409
00:18:50,360 --> 00:18:59,779
<font color="#E5E5E5">version of the rule and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> second use</font>

410
00:18:52,549 --> 00:19:02,270
case instead exploiting<font color="#CCCCCC"> it kudos</font><font color="#E5E5E5"> so for</font>

411
00:18:59,779 --> 00:19:04,610
<font color="#E5E5E5">example I</font><font color="#CCCCCC"> used this search query in</font>

412
00:19:02,270 --> 00:19:07,340
<font color="#CCCCCC">kudos I look for all the bank</font><font color="#E5E5E5"> bought</font>

413
00:19:04,610 --> 00:19:10,490
applications<font color="#E5E5E5"> from this June that have</font>

414
00:19:07,340 --> 00:19:13,668
been<font color="#E5E5E5"> received from this duel</font><font color="#CCCCCC"> and all</font>

415
00:19:10,490 --> 00:19:17,299
<font color="#E5E5E5">these</font><font color="#CCCCCC"> applications are then you</font><font color="#E5E5E5"> can just</font>

416
00:19:13,669 --> 00:19:20,480
<font color="#E5E5E5">copy the URL</font><font color="#CCCCCC"> from kudos</font><font color="#E5E5E5"> and then the era</font>

417
00:19:17,299 --> 00:19:22,668
generation<font color="#CCCCCC"> process downloads these</font>

418
00:19:20,480 --> 00:19:25,669
reports and generate a<font color="#E5E5E5"> new rule and</font>

419
00:19:22,669 --> 00:19:28,970
again we have the<font color="#E5E5E5"> raw rule and the</font>

420
00:19:25,669 --> 00:19:31,960
optimized version<font color="#CCCCCC"> of the world in this</font>

421
00:19:28,970 --> 00:19:35,299
case the number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> literals</font>

422
00:19:31,960 --> 00:19:40,039
start from 18 in the raw version and

423
00:19:35,299 --> 00:19:42,230
goes to 6 in the optimized version so as

424
00:19:40,039 --> 00:19:44,870
you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see it's extremely fast</font><font color="#E5E5E5"> I didn't</font>

425
00:19:42,230 --> 00:19:46,820
speed up anything<font color="#E5E5E5"> the only thing that I</font>

426
00:19:44,870 --> 00:19:50,989
did was<font color="#E5E5E5"> to catch the the</font><font color="#CCCCCC"> reaper's</font>

427
00:19:46,820 --> 00:19:52,600
download<font color="#E5E5E5"> so it's it's</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> useful and</font>

428
00:19:50,990 --> 00:19:55,340
<font color="#E5E5E5">ready</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> used</font>

429
00:19:52,600 --> 00:19:57,530
<font color="#E5E5E5">now let's have</font><font color="#CCCCCC"> a very brief is</font><font color="#E5E5E5"> the</font>

430
00:19:55,340 --> 00:19:59,330
result<font color="#E5E5E5"> so I wanted to compare human</font>

431
00:19:57,530 --> 00:20:02,450
<font color="#CCCCCC">generated rules without multivariate</font>

432
00:19:59,330 --> 00:20:02,990
rules and what<font color="#E5E5E5"> I found out using 1.5</font>

433
00:20:02,450 --> 00:20:05,390
million

434
00:20:02,990 --> 00:20:07,820
<font color="#CCCCCC">I</font><font color="#E5E5E5"> got a set</font><font color="#CCCCCC"> of 1.5 million application</font>

435
00:20:05,390 --> 00:20:09,559
is<font color="#CCCCCC"> that there was a huge</font><font color="#E5E5E5"> improvement in</font>

436
00:20:07,820 --> 00:20:12,200
the detection ranging from the<font color="#CCCCCC"> hight</font>

437
00:20:09,559 --> 00:20:14,990
percent to the<font color="#E5E5E5"> 131 percent with an</font>

438
00:20:12,200 --> 00:20:17,750
average of 65 percent<font color="#CCCCCC"> without even</font>

439
00:20:14,990 --> 00:20:20,169
generating a false<font color="#CCCCCC"> possibility</font><font color="#E5E5E5"> result</font>

440
00:20:17,750 --> 00:20:24,770
<font color="#E5E5E5">and we're very happy about it</font>

441
00:20:20,169 --> 00:20:26,330
so few takeaways just to conclude<font color="#E5E5E5"> we</font>

442
00:20:24,770 --> 00:20:28,370
have an<font color="#E5E5E5"> algorithm to automatically</font>

443
00:20:26,330 --> 00:20:28,730
generate your<font color="#CCCCCC"> rules and it works</font><font color="#E5E5E5"> quite</font>

444
00:20:28,370 --> 00:20:30,889
<font color="#E5E5E5">well</font>

445
00:20:28,730 --> 00:20:34,429
much better than human generated<font color="#E5E5E5"> ones</font>

446
00:20:30,890 --> 00:20:37,820
<font color="#CCCCCC">but of course it's a baseline so there</font>

447
00:20:34,429 --> 00:20:40,159
is<font color="#E5E5E5"> still room for improvement</font><font color="#CCCCCC"> then we</font>

448
00:20:37,820 --> 00:20:42,740
have some several ways to<font color="#CCCCCC"> include the</font>

449
00:20:40,159 --> 00:20:44,600
expertise the expert knowledge into the

450
00:20:42,740 --> 00:20:47,659
algorithm<font color="#CCCCCC"> using heuristics</font><font color="#E5E5E5"> or using</font>

451
00:20:44,600 --> 00:20:49,309
existing rules<font color="#CCCCCC"> and it's</font><font color="#E5E5E5"> very fast</font>

452
00:20:47,659 --> 00:20:52,070
<font color="#CCCCCC">because the time required to generate</font><font color="#E5E5E5"> a</font>

453
00:20:49,309 --> 00:20:53,210
rule for<font color="#CCCCCC"> grabs is always less than 5</font>

454
00:20:52,070 --> 00:20:59,030
<font color="#E5E5E5">minutes</font><font color="#CCCCCC"> of course</font>

455
00:20:53,210 --> 00:21:01,789
it grows to<font color="#CCCCCC"> up to 2030</font><font color="#E5E5E5"> even one hour if</font>

456
00:20:59,030 --> 00:21:03,860
you<font color="#CCCCCC"> given input to thousands</font><font color="#E5E5E5"> and</font>

457
00:21:01,789 --> 00:21:05,840
thousands of samples but it's it's

458
00:21:03,860 --> 00:21:09,408
normal and if you would<font color="#E5E5E5"> have done it</font>

459
00:21:05,840 --> 00:21:11,149
manually<font color="#E5E5E5"> would have taken years so we</font>

460
00:21:09,409 --> 00:21:12,980
are working actually<font color="#CCCCCC"> on a new</font><font color="#E5E5E5"> version of</font>

461
00:21:11,149 --> 00:21:15,889
viadon which is called<font color="#E5E5E5"> hydrogen</font><font color="#CCCCCC"> piggy</font>

462
00:21:12,980 --> 00:21:19,669
<font color="#E5E5E5">which actually targets windows binary</font><font color="#CCCCCC"> I</font>

463
00:21:15,889 --> 00:21:24,168
I just<font color="#E5E5E5"> I</font><font color="#CCCCCC"> can so I can just</font><font color="#E5E5E5"> say</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it</font>

464
00:21:19,669 --> 00:21:27,470
works well so you will soon have some

465
00:21:24,169 --> 00:21:29,600
news<font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> all thanks a lot for</font>

466
00:21:27,470 --> 00:21:32,860
your<font color="#CCCCCC"> attention</font><font color="#E5E5E5"> and if</font><font color="#CCCCCC"> you have any</font>

467
00:21:29,600 --> 00:21:32,860
question please ask me

468
00:21:34,550 --> 00:21:39,079
[Applause]

