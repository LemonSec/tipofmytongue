1
00:00:00,030 --> 00:00:07,140
hi<font color="#E5E5E5"> everyone I am with the CTO and the</font>

2
00:00:03,629 --> 00:00:09,809
father of insular<font color="#E5E5E5"> with me is</font><font color="#CCCCCC"> Omri</font><font color="#E5E5E5"> inside</font>

3
00:00:07,140 --> 00:00:12,570
of<font color="#CCCCCC"> the research team leader</font><font color="#E5E5E5"> and security</font>

4
00:00:09,809 --> 00:00:16,259
researcher<font color="#CCCCCC"> what we'll talk about today</font>

5
00:00:12,570 --> 00:00:20,189
is basically<font color="#E5E5E5"> how to bypass</font><font color="#CCCCCC"> the current</font>

6
00:00:16,260 --> 00:00:21,570
<font color="#CCCCCC">mitigations in Windows 10 pretty</font><font color="#E5E5E5"> much</font>

7
00:00:20,189 --> 00:00:25,430
all the mitigations that are currently

8
00:00:21,570 --> 00:00:29,039
there<font color="#E5E5E5"> so we'll start with a bit about</font>

9
00:00:25,430 --> 00:00:32,700
<font color="#E5E5E5">current</font><font color="#CCCCCC"> mitigations and state</font><font color="#E5E5E5"> of</font>

10
00:00:29,039 --> 00:00:35,399
exploitation around them<font color="#CCCCCC"> and then we'll</font>

11
00:00:32,700 --> 00:00:38,790
cover<font color="#E5E5E5"> a bit how memory management works</font>

12
00:00:35,399 --> 00:00:43,230
and how it relates on virtualization

13
00:00:38,790 --> 00:00:45,930
<font color="#E5E5E5">comes in with VPS and</font><font color="#CCCCCC"> km</font><font color="#E5E5E5"> ci is it</font>

14
00:00:43,230 --> 00:00:48,000
required<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> rest of the talk</font><font color="#CCCCCC"> move</font>

15
00:00:45,930 --> 00:00:50,430
on to the technique itself that we call

16
00:00:48,000 --> 00:00:54,390
<font color="#E5E5E5">interning</font><font color="#CCCCCC"> tables</font><font color="#E5E5E5"> show demo and</font>

17
00:00:50,430 --> 00:00:56,940
mitigations so over the past years

18
00:00:54,390 --> 00:00:59,340
Microsoft is spending<font color="#E5E5E5"> a lot of effort</font>

19
00:00:56,940 --> 00:01:03,089
<font color="#E5E5E5">improving its kernel mitigations and</font>

20
00:00:59,340 --> 00:01:05,460
doing<font color="#E5E5E5"> quite a</font><font color="#CCCCCC"> good job</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> that so as</font>

21
00:01:03,090 --> 00:01:06,960
you can see<font color="#CCCCCC"> in the table quite a few</font>

22
00:01:05,459 --> 00:01:11,360
mitigations that<font color="#E5E5E5"> were added and</font>

23
00:01:06,960 --> 00:01:18,658
constantly being added<font color="#E5E5E5"> as Windows</font><font color="#CCCCCC"> then</font>

24
00:01:11,360 --> 00:01:21,810
progress<font color="#CCCCCC"> also they improve some of</font><font color="#E5E5E5"> the</font>

25
00:01:18,659 --> 00:01:23,340
features<font color="#CCCCCC"> the mitigations on the one for</font>

26
00:01:21,810 --> 00:01:27,930
example<font color="#CCCCCC"> case allow it proved</font>

27
00:01:23,340 --> 00:01:30,630
significantly since<font color="#E5E5E5"> Windows 8 and by now</font>

28
00:01:27,930 --> 00:01:34,560
pretty<font color="#E5E5E5"> much everything in</font><font color="#CCCCCC"> the kernel is</font>

29
00:01:30,630 --> 00:01:39,000
under<font color="#E5E5E5"> mice to one point</font><font color="#CCCCCC"> or another</font>

30
00:01:34,560 --> 00:01:42,450
now also<font color="#E5E5E5"> features that depend on</font><font color="#CCCCCC"> VBS for</font>

31
00:01:39,000 --> 00:01:46,079
example<font color="#E5E5E5"> AFCI which</font><font color="#CCCCCC"> we'll cover more in</font>

32
00:01:42,450 --> 00:01:50,700
depth later and<font color="#CCCCCC"> case efg can control</font>

33
00:01:46,079 --> 00:01:53,460
flow integrity<font color="#CCCCCC"> the bottom line is</font><font color="#E5E5E5"> that a</font>

34
00:01:50,700 --> 00:01:56,549
lot<font color="#E5E5E5"> of efforts on</font><font color="#CCCCCC"> that and that led to</font>

35
00:01:53,460 --> 00:01:59,119
many<font color="#E5E5E5"> new exploitation techniques and a</font>

36
00:01:56,549 --> 00:02:03,049
lot<font color="#E5E5E5"> of talk over the past years</font><font color="#CCCCCC"> that</font>

37
00:01:59,119 --> 00:02:07,439
cover how to bypass<font color="#E5E5E5"> these</font><font color="#CCCCCC"> mitigations</font>

38
00:02:03,049 --> 00:02:09,660
last year in blackhat there was a very

39
00:02:07,439 --> 00:02:10,530
good<font color="#E5E5E5"> talk about</font><font color="#CCCCCC"> how to bypass</font><font color="#E5E5E5"> colon</font>

40
00:02:09,660 --> 00:02:12,010
mitigations

41
00:02:10,530 --> 00:02:14,049
however<font color="#CCCCCC"> this</font>

42
00:02:12,010 --> 00:02:16,420
as far as<font color="#E5E5E5"> we've seen none of</font><font color="#CCCCCC"> the</font>

43
00:02:14,049 --> 00:02:19,890
mitigation<font color="#E5E5E5"> the bypass techniques that</font>

44
00:02:16,420 --> 00:02:23,950
were<font color="#E5E5E5"> presented so far</font><font color="#CCCCCC"> also deal with</font>

45
00:02:19,890 --> 00:02:29,018
mitigation such as<font color="#CCCCCC"> key MCI and other</font>

46
00:02:23,950 --> 00:02:32,379
various types of mitigations<font color="#E5E5E5"> so now a</font>

47
00:02:29,019 --> 00:02:34,180
bit<font color="#CCCCCC"> about memory management</font><font color="#E5E5E5"> so pretty</font>

48
00:02:32,379 --> 00:02:37,530
much every modern operating<font color="#E5E5E5"> system</font>

49
00:02:34,180 --> 00:02:40,090
<font color="#CCCCCC">nowadays</font><font color="#E5E5E5"> you should use a virtual memory</font>

50
00:02:37,530 --> 00:02:43,599
basically virtual memory is just<font color="#E5E5E5"> a</font>

51
00:02:40,090 --> 00:02:46,540
translation form<font color="#E5E5E5"> and others to the</font>

52
00:02:43,599 --> 00:02:51,810
<font color="#E5E5E5">actual physical address in memory which</font>

53
00:02:46,540 --> 00:02:55,000
is<font color="#E5E5E5"> done by the MMU the idea behind it is</font>

54
00:02:51,810 --> 00:02:58,540
<font color="#E5E5E5">well there are a lot</font><font color="#CCCCCC"> of uses one of</font><font color="#E5E5E5"> them</font>

55
00:02:55,000 --> 00:03:00,879
is if you enable very large other space

56
00:02:58,540 --> 00:03:04,720
when the physical<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> is actually</font>

57
00:03:00,879 --> 00:03:06,819
much smaller poster<font color="#E5E5E5"> size</font><font color="#CCCCCC"> solution and a</font>

58
00:03:04,720 --> 00:03:11,829
lot<font color="#CCCCCC"> of other things we'll cover</font><font color="#E5E5E5"> some of</font>

59
00:03:06,819 --> 00:03:14,619
<font color="#E5E5E5">them in this presentation</font><font color="#CCCCCC"> so how does</font>

60
00:03:11,829 --> 00:03:18,489
<font color="#E5E5E5">the translation</font><font color="#CCCCCC"> actually works</font><font color="#E5E5E5"> so if we</font>

61
00:03:14,620 --> 00:03:22,030
take this<font color="#E5E5E5"> 64 bit others for example</font><font color="#CCCCCC"> and</font>

62
00:03:18,489 --> 00:03:24,940
we'll break it down we will<font color="#CCCCCC"> see the</font>

63
00:03:22,030 --> 00:03:29,620
translation<font color="#E5E5E5"> works pretty much like</font><font color="#CCCCCC"> that</font>

64
00:03:24,940 --> 00:03:32,500
so first you take<font color="#CCCCCC"> the</font><font color="#E5E5E5"> caco3 register</font>

65
00:03:29,620 --> 00:03:37,629
control register<font color="#CCCCCC"> 3 which points the base</font>

66
00:03:32,500 --> 00:03:41,049
of the page<font color="#E5E5E5"> table and</font><font color="#CCCCCC"> add the 9th bit</font>

67
00:03:37,629 --> 00:03:47,560
the<font color="#E5E5E5"> 9 bit from the night</font><font color="#CCCCCC"> thirty-ninth</font>

68
00:03:41,049 --> 00:03:50,349
bit<font color="#E5E5E5"> in the others pay others to the the</font>

69
00:03:47,560 --> 00:03:53,879
base of the page<font color="#E5E5E5"> table and this is</font>

70
00:03:50,349 --> 00:03:58,149
actually a pointer within the<font color="#CCCCCC"> PML</font><font color="#E5E5E5"> for</font>

71
00:03:53,879 --> 00:04:01,448
<font color="#E5E5E5">which points to a page directory</font><font color="#CCCCCC"> what's</font>

72
00:03:58,150 --> 00:04:03,909
called the page directory<font color="#E5E5E5"> point opt</font><font color="#CCCCCC"> P</font><font color="#E5E5E5"> so</font>

73
00:04:01,449 --> 00:04:07,329
then you take<font color="#E5E5E5"> the next</font><font color="#CCCCCC"> 9 bit and use it</font>

74
00:04:03,909 --> 00:04:10,019
as an offset<font color="#E5E5E5"> within that</font><font color="#CCCCCC"> table and from</font>

75
00:04:07,329 --> 00:04:15,000
there it points to<font color="#CCCCCC"> the page directories</font>

76
00:04:10,019 --> 00:04:19,329
<font color="#E5E5E5">again</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> the next 9 bit use it is</font>

77
00:04:15,000 --> 00:04:21,820
<font color="#E5E5E5">offset in that directory and again in</font>

78
00:04:19,329 --> 00:04:24,350
the page table<font color="#E5E5E5"> where we finally get to</font>

79
00:04:21,820 --> 00:04:27,890
<font color="#E5E5E5">what's called the PT which is</font><font color="#CCCCCC"> page table</font>

80
00:04:24,350 --> 00:04:30,500
entry which points to<font color="#CCCCCC"> the actual</font>

81
00:04:27,890 --> 00:04:33,190
<font color="#E5E5E5">physical address</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> can also be</font>

82
00:04:30,500 --> 00:04:39,020
<font color="#E5E5E5">referred to as a</font><font color="#CCCCCC"> PFN which is a physical</font>

83
00:04:33,190 --> 00:04:41,210
page frame number now<font color="#CCCCCC"> so as you can</font><font color="#E5E5E5"> see</font>

84
00:04:39,020 --> 00:04:43,760
<font color="#E5E5E5">the lower</font><font color="#CCCCCC"> 12-bit are not being</font><font color="#E5E5E5"> used in</font>

85
00:04:41,210 --> 00:04:48,940
the translation<font color="#E5E5E5"> and this is actually the</font>

86
00:04:43,760 --> 00:04:48,940
page size the offset between<font color="#E5E5E5"> the page</font>

87
00:04:50,080 --> 00:04:56,840
<font color="#CCCCCC">which means that the page side is in</font>

88
00:04:54,050 --> 00:04:59,930
this case for<font color="#CCCCCC"> K</font><font color="#E5E5E5"> actually there are also</font>

89
00:04:56,840 --> 00:05:01,669
large pages but it's not really critical

90
00:04:59,930 --> 00:05:06,860
to understand<font color="#E5E5E5"> the rest of the talk so I</font>

91
00:05:01,670 --> 00:05:09,530
won't go<font color="#E5E5E5"> into that so</font><font color="#CCCCCC"> we have pity's PT</font>

92
00:05:06,860 --> 00:05:10,940
is not<font color="#E5E5E5"> content not contained only the</font>

93
00:05:09,530 --> 00:05:12,890
physical<font color="#CCCCCC"> address</font><font color="#E5E5E5"> they actually contain</font>

94
00:05:10,940 --> 00:05:18,110
<font color="#E5E5E5">other bits that are used by</font><font color="#CCCCCC"> the</font>

95
00:05:12,890 --> 00:05:20,650
operating<font color="#CCCCCC"> system to control</font><font color="#E5E5E5"> permissions</font>

96
00:05:18,110 --> 00:05:23,450
on<font color="#CCCCCC"> the page and</font><font color="#E5E5E5"> other things for example</font>

97
00:05:20,650 --> 00:05:26,780
<font color="#E5E5E5">the lowest bit it's a bit hard to see</font>

98
00:05:23,450 --> 00:05:31,610
but it's a valid<font color="#E5E5E5"> bit so if it's not</font>

99
00:05:26,780 --> 00:05:33,229
<font color="#E5E5E5">valid its points to</font><font color="#CCCCCC"> nothing</font><font color="#E5E5E5"> there is a</font>

100
00:05:31,610 --> 00:05:38,270
<font color="#E5E5E5">right bit which means that the page is</font>

101
00:05:33,230 --> 00:05:40,310
writable<font color="#E5E5E5"> not executed and all that</font><font color="#CCCCCC"> they</font>

102
00:05:38,270 --> 00:05:43,789
also built<font color="#CCCCCC"> the</font><font color="#E5E5E5"> result for the operating</font>

103
00:05:40,310 --> 00:05:51,190
<font color="#E5E5E5">system</font><font color="#CCCCCC"> memory</font><font color="#E5E5E5"> management</font><font color="#CCCCCC"> as you can see</font>

104
00:05:43,790 --> 00:05:54,040
from the<font color="#E5E5E5"> 40s bit from the 52 bit the</font>

105
00:05:51,190 --> 00:06:00,469
<font color="#CCCCCC">width being</font><font color="#E5E5E5"> used by the operating system</font>

106
00:05:54,040 --> 00:06:02,750
<font color="#CCCCCC">to manage memory now because</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> pity's</font>

107
00:06:00,470 --> 00:06:04,640
can have the same<font color="#CCCCCC"> pfn</font><font color="#E5E5E5"> which means that</font>

108
00:06:02,750 --> 00:06:06,830
they point<font color="#E5E5E5"> to the same physical address</font>

109
00:06:04,640 --> 00:06:09,349
it also means that the same physical

110
00:06:06,830 --> 00:06:13,520
page can have different permissions<font color="#CCCCCC"> in</font>

111
00:06:09,350 --> 00:06:17,060
different memory<font color="#E5E5E5"> others as of different</font>

112
00:06:13,520 --> 00:06:18,770
processes<font color="#CCCCCC"> so this is essentially how</font>

113
00:06:17,060 --> 00:06:20,800
<font color="#E5E5E5">shared memory works and why it's</font>

114
00:06:18,770 --> 00:06:22,909
<font color="#CCCCCC">possible to</font><font color="#E5E5E5"> make the same page</font>

115
00:06:20,800 --> 00:06:26,690
executable in one<font color="#E5E5E5"> process while it's</font>

116
00:06:22,910 --> 00:06:29,630
writable in another process which<font color="#CCCCCC"> is</font>

117
00:06:26,690 --> 00:06:32,919
important<font color="#E5E5E5"> to understand because it's</font>

118
00:06:29,630 --> 00:06:37,730
<font color="#CCCCCC">we're gonna talk about</font><font color="#E5E5E5"> it a lot later on</font>

119
00:06:32,919 --> 00:06:38,210
so just<font color="#E5E5E5"> a few words about prototype</font><font color="#CCCCCC"> PT</font>

120
00:06:37,730 --> 00:06:40,699
is

121
00:06:38,210 --> 00:06:45,530
<font color="#CCCCCC">although pretty is pretty much specific</font>

122
00:06:40,699 --> 00:06:46,970
to<font color="#CCCCCC"> Windows in a sense and well the only</font>

123
00:06:45,530 --> 00:06:50,900
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> that's really important to</font>

124
00:06:46,970 --> 00:06:56,169
understand<font color="#CCCCCC"> about them is</font><font color="#E5E5E5"> that they what</font>

125
00:06:50,900 --> 00:07:00,830
<font color="#E5E5E5">Windows uses for shared memory</font><font color="#CCCCCC"> basically</font>

126
00:06:56,169 --> 00:07:03,620
each shared PT is a prototype PT which

127
00:07:00,830 --> 00:07:08,830
for example contains the number of time

128
00:07:03,620 --> 00:07:12,550
it<font color="#E5E5E5"> is being shared</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> can be used for</font>

129
00:07:08,830 --> 00:07:16,780
for the operations to know when it can

130
00:07:12,550 --> 00:07:22,280
remove the page and generally control it

131
00:07:16,780 --> 00:07:23,630
<font color="#E5E5E5">and I'll talk about it</font><font color="#CCCCCC"> more later on</font><font color="#E5E5E5"> now</font>

132
00:07:22,280 --> 00:07:26,270
the next<font color="#E5E5E5"> thing I'm</font><font color="#CCCCCC"> going to talk about</font>

133
00:07:23,630 --> 00:07:31,699
is copy-on-write and<font color="#E5E5E5"> pretty much how it</font>

134
00:07:26,270 --> 00:07:34,969
works<font color="#E5E5E5"> so in Windows for</font><font color="#CCCCCC"> example every</font>

135
00:07:31,699 --> 00:07:39,740
<font color="#E5E5E5">DLL that's being mapped is by default so</font>

136
00:07:34,970 --> 00:07:41,990
if you took it<font color="#E5E5E5"> kernel32.dll which are</font>

137
00:07:39,740 --> 00:07:45,470
mapped in pretty much all memory in all

138
00:07:41,990 --> 00:07:50,599
processes<font color="#E5E5E5"> the the code for example</font>

139
00:07:45,470 --> 00:07:54,099
<font color="#E5E5E5">starters</font><font color="#CCCCCC"> share so</font><font color="#E5E5E5"> they point to the same</font>

140
00:07:50,599 --> 00:07:56,270
<font color="#CCCCCC">physical page</font><font color="#E5E5E5"> which makes sense for</font>

141
00:07:54,099 --> 00:07:58,460
efficiency point of<font color="#E5E5E5"> view</font><font color="#CCCCCC"> because then</font>

142
00:07:56,270 --> 00:08:00,859
you don't need<font color="#E5E5E5"> to waste much physical</font>

143
00:07:58,460 --> 00:08:04,159
memory for the<font color="#CCCCCC"> DLL for the others that</font>

144
00:08:00,860 --> 00:08:07,909
are marked in many processes<font color="#E5E5E5"> however a</font>

145
00:08:04,159 --> 00:08:11,030
<font color="#CCCCCC">poses can change the code or read only</font>

146
00:08:07,909 --> 00:08:13,759
<font color="#E5E5E5">data in its own address space and in</font>

147
00:08:11,030 --> 00:08:15,739
these cases<font color="#E5E5E5"> the operating system</font><font color="#CCCCCC"> needs</font>

148
00:08:13,759 --> 00:08:18,560
<font color="#E5E5E5">to make sure</font><font color="#CCCCCC"> that it</font><font color="#E5E5E5"> doesn't change the</font>

149
00:08:15,740 --> 00:08:22,490
<font color="#CCCCCC">cost possesses because well that can</font>

150
00:08:18,560 --> 00:08:23,990
<font color="#CCCCCC">definitely cause a problem</font><font color="#E5E5E5"> because if</font>

151
00:08:22,490 --> 00:08:28,930
you change<font color="#CCCCCC"> the code in one process in</font>

152
00:08:23,990 --> 00:08:32,599
<font color="#E5E5E5">the facts</font><font color="#CCCCCC"> the code</font><font color="#E5E5E5"> in another process</font><font color="#CCCCCC"> it</font>

153
00:08:28,930 --> 00:08:34,610
can be the<font color="#E5E5E5"> source of bad things so what</font>

154
00:08:32,599 --> 00:08:37,700
the operating actually does<font color="#E5E5E5"> when the</font>

155
00:08:34,610 --> 00:08:39,979
process asks to change permission on

156
00:08:37,700 --> 00:08:43,880
such page is to for example<font color="#E5E5E5"> to make it</font>

157
00:08:39,979 --> 00:08:45,829
writable is not to actually<font color="#CCCCCC"> make it</font>

158
00:08:43,880 --> 00:08:47,520
<font color="#E5E5E5">writable but to use one</font><font color="#CCCCCC"> of the software</font>

159
00:08:45,829 --> 00:08:49,079
which<font color="#E5E5E5"> I mentioned earlier</font>

160
00:08:47,520 --> 00:08:51,930
in order<font color="#E5E5E5"> to mark it as</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> copy-on-write</font>

161
00:08:49,080 --> 00:08:54,990
page now when the<font color="#E5E5E5"> right actually happens</font>

162
00:08:51,930 --> 00:08:57,540
<font color="#E5E5E5">the operating system handles the fault</font>

163
00:08:54,990 --> 00:09:00,090
<font color="#E5E5E5">that happens because the page was</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> I</font>

164
00:08:57,540 --> 00:09:01,920
<font color="#CCCCCC">type also</font><font color="#E5E5E5"> there was a fault it sees that</font>

165
00:09:00,090 --> 00:09:03,870
it's a<font color="#CCCCCC"> copy-on-write</font><font color="#E5E5E5"> page and then what</font>

166
00:09:01,920 --> 00:09:07,890
happens is that<font color="#E5E5E5"> the page is</font><font color="#CCCCCC"> being copied</font>

167
00:09:03,870 --> 00:09:11,400
<font color="#E5E5E5">and the PT now points to the copy of the</font>

168
00:09:07,890 --> 00:09:13,920
page and the<font color="#E5E5E5"> right happens</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> so the</font>

169
00:09:11,400 --> 00:09:16,730
change only<font color="#E5E5E5"> happens in the specific</font>

170
00:09:13,920 --> 00:09:20,870
process in its private memory and not

171
00:09:16,730 --> 00:09:23,490
globally across<font color="#E5E5E5"> the operating system now</font>

172
00:09:20,870 --> 00:09:25,080
when we also have your<font color="#CCCCCC"> Chua's asian</font>

173
00:09:23,490 --> 00:09:27,390
involved there is<font color="#E5E5E5"> another</font><font color="#CCCCCC"> level of</font>

174
00:09:25,080 --> 00:09:30,630
translation<font color="#CCCCCC"> of the second level</font><font color="#E5E5E5"> address</font>

175
00:09:27,390 --> 00:09:32,910
translation and the goal<font color="#CCCCCC"> is basically</font><font color="#E5E5E5"> to</font>

176
00:09:30,630 --> 00:09:36,270
make<font color="#CCCCCC"> sure that virtual machine cannot</font>

177
00:09:32,910 --> 00:09:39,050
temper with each other memory<font color="#CCCCCC"> I guess</font>

178
00:09:36,270 --> 00:09:41,699
it's<font color="#CCCCCC"> obvious why we</font><font color="#E5E5E5"> want to</font><font color="#CCCCCC"> keep</font><font color="#E5E5E5"> operate</font>

179
00:09:39,050 --> 00:09:45,060
virtual machines isolated from each

180
00:09:41,700 --> 00:09:48,900
other so there is<font color="#E5E5E5"> a what's</font><font color="#CCCCCC"> called a</font>

181
00:09:45,060 --> 00:09:52,380
<font color="#E5E5E5">guest physical address which later</font>

182
00:09:48,900 --> 00:09:54,360
translates by the what's called<font color="#CCCCCC"> an apt</font>

183
00:09:52,380 --> 00:09:56,970
to a machine physical address it's like

184
00:09:54,360 --> 00:09:59,540
another level of<font color="#CCCCCC"> translation so we</font>

185
00:09:56,970 --> 00:10:04,050
<font color="#CCCCCC">petits how it's called in intelli</font>

186
00:09:59,540 --> 00:10:06,089
processors or<font color="#CCCCCC"> npt in</font><font color="#E5E5E5"> AMD processors and</font>

187
00:10:04,050 --> 00:10:09,390
it also adds<font color="#E5E5E5"> potentially another level</font>

188
00:10:06,090 --> 00:10:12,180
of<font color="#CCCCCC"> optimization because if the</font>

189
00:10:09,390 --> 00:10:14,880
hypervisor<font color="#E5E5E5"> control those virtual</font>

190
00:10:12,180 --> 00:10:17,219
machines<font color="#CCCCCC"> know</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> pages are actually</font>

191
00:10:14,880 --> 00:10:21,380
<font color="#E5E5E5">the</font><font color="#CCCCCC"> same it can point them to the same</font>

192
00:10:17,220 --> 00:10:24,330
<font color="#E5E5E5">physical memory so the optimization can</font>

193
00:10:21,380 --> 00:10:28,890
exist in even<font color="#E5E5E5"> across virtual machines</font>

194
00:10:24,330 --> 00:10:33,150
<font color="#E5E5E5">and still keep the isolation intact</font>

195
00:10:28,890 --> 00:10:37,319
now<font color="#CCCCCC"> as you can also</font><font color="#E5E5E5"> see they also have</font>

196
00:10:33,150 --> 00:10:42,300
permission of those pages<font color="#CCCCCC"> so when if</font><font color="#E5E5E5"> it</font>

197
00:10:37,320 --> 00:10:44,850
<font color="#E5E5E5">is if it is being used</font><font color="#CCCCCC"> the actual page</font>

198
00:10:42,300 --> 00:10:48,630
permission is determined on<font color="#E5E5E5"> that level</font>

199
00:10:44,850 --> 00:10:54,810
so if a page<font color="#E5E5E5"> is not executable</font><font color="#CCCCCC"> on the PT</font>

200
00:10:48,630 --> 00:10:58,210
level it is not executable at all now

201
00:10:54,810 --> 00:11:03,760
Microsoft<font color="#E5E5E5"> uses that</font>

202
00:10:58,210 --> 00:11:07,779
with many other things<font color="#CCCCCC"> to</font><font color="#E5E5E5"> create the VPS</font>

203
00:11:03,760 --> 00:11:10,529
of virtualization based security<font color="#E5E5E5"> so what</font>

204
00:11:07,779 --> 00:11:13,930
they basically<font color="#E5E5E5"> did so the hypervisor</font>

205
00:11:10,529 --> 00:11:16,240
<font color="#E5E5E5">manages the virtual the other kernels</font>

206
00:11:13,930 --> 00:11:20,109
<font color="#E5E5E5">virtual machines and each kernel lives</font>

207
00:11:16,240 --> 00:11:22,570
in its own<font color="#CCCCCC"> VTL VTL is a virtual</font><font color="#E5E5E5"> trust</font>

208
00:11:20,110 --> 00:11:26,890
level now the least<font color="#CCCCCC"> privileged trust</font>

209
00:11:22,570 --> 00:11:31,810
level is the lowest<font color="#CCCCCC"> level</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> VTL 0</font><font color="#E5E5E5"> is</font>

210
00:11:26,890 --> 00:11:32,980
less<font color="#E5E5E5"> privileged in</font><font color="#CCCCCC"> VTL</font><font color="#E5E5E5"> 1</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> basically</font>

211
00:11:31,810 --> 00:11:35,469
what you see<font color="#E5E5E5"> when you walk</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font>

212
00:11:32,980 --> 00:11:36,370
computer is the the right<font color="#E5E5E5"> end of this</font>

213
00:11:35,470 --> 00:11:40,000
diagram

214
00:11:36,370 --> 00:11:42,790
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> where the regular kernel runs and</font>

215
00:11:40,000 --> 00:11:46,750
all<font color="#E5E5E5"> your applications and that's</font><font color="#CCCCCC"> VTL 0</font>

216
00:11:42,790 --> 00:11:49,899
now the secure kernel the<font color="#CCCCCC"> skm on the</font>

217
00:11:46,750 --> 00:11:52,420
left hand side is what actually<font color="#E5E5E5"> holds</font>

218
00:11:49,899 --> 00:11:55,380
the<font color="#E5E5E5"> power and what manager can manage</font>

219
00:11:52,420 --> 00:12:02,650
the apts and the real permissions<font color="#E5E5E5"> in the</font>

220
00:11:55,380 --> 00:12:08,470
other side of the less secure world and

221
00:12:02,650 --> 00:12:11,709
<font color="#E5E5E5">that's enables medications like</font><font color="#CCCCCC"> hvc i hv</font>

222
00:12:08,470 --> 00:12:15,130
<font color="#CCCCCC">c i is</font><font color="#E5E5E5"> i provides</font><font color="#CCCCCC"> our code</font><font color="#E5E5E5"> integrity</font>

223
00:12:11,709 --> 00:12:18,579
which is actually split<font color="#E5E5E5"> into kind of two</font>

224
00:12:15,130 --> 00:12:20,560
policies one is camp CI which is kernel

225
00:12:18,580 --> 00:12:22,540
mode<font color="#CCCCCC"> code</font><font color="#E5E5E5"> integrity the other is um CI</font>

226
00:12:20,560 --> 00:12:25,689
<font color="#E5E5E5">which is the same thing</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> user mode</font>

227
00:12:22,540 --> 00:12:29,319
and<font color="#CCCCCC"> the idea is to ensure that the code</font>

228
00:12:25,690 --> 00:12:34,360
in<font color="#CCCCCC"> india with Kensie enabled</font><font color="#E5E5E5"> the code in</font>

229
00:12:29,320 --> 00:12:37,779
the kernel cannot be modified<font color="#E5E5E5"> or even</font>

230
00:12:34,360 --> 00:12:39,459
<font color="#CCCCCC">executes unless it was authorized and</font>

231
00:12:37,779 --> 00:12:44,140
authorized actually means<font color="#E5E5E5"> that it was</font>

232
00:12:39,459 --> 00:12:47,829
signed properly based on the policy that

233
00:12:44,140 --> 00:12:49,209
<font color="#E5E5E5">is defined so the</font><font color="#CCCCCC"> DLL that does this is</font>

234
00:12:47,829 --> 00:12:52,120
a<font color="#CCCCCC"> SK CI it</font>

235
00:12:49,209 --> 00:12:55,239
<font color="#E5E5E5">it's what verifies the integrity and</font>

236
00:12:52,120 --> 00:12:57,370
whenever<font color="#CCCCCC"> a</font><font color="#E5E5E5"> new driver or any types of</font>

237
00:12:55,240 --> 00:13:00,700
code is being<font color="#E5E5E5"> loaded into the kernel it</font>

238
00:12:57,370 --> 00:13:03,279
must be<font color="#E5E5E5"> first validate otherwise it</font>

239
00:13:00,700 --> 00:13:08,589
cannot run it will not get the execute

240
00:13:03,279 --> 00:13:10,300
bit on the apt<font color="#E5E5E5"> and once it got</font><font color="#CCCCCC"> the</font>

241
00:13:08,589 --> 00:13:11,930
<font color="#CCCCCC">executed bit it cannot be modified</font>

242
00:13:10,300 --> 00:13:13,969
because<font color="#E5E5E5"> as I</font>

243
00:13:11,930 --> 00:13:15,649
and earlier<font color="#E5E5E5"> the page would not be</font>

244
00:13:13,970 --> 00:13:18,380
actually writable even if the operating

245
00:13:15,649 --> 00:13:21,440
<font color="#CCCCCC">system marks it as</font><font color="#E5E5E5"> shot as such unless</font>

246
00:13:18,380 --> 00:13:23,960
it is<font color="#CCCCCC"> marked to be writable</font><font color="#E5E5E5"> on the apt</font>

247
00:13:21,440 --> 00:13:28,720
as well<font color="#CCCCCC"> okay</font>

248
00:13:23,960 --> 00:13:33,610
<font color="#E5E5E5">so to quickly recap all that basically</font>

249
00:13:28,720 --> 00:13:36,440
<font color="#E5E5E5">virtual virtual memory management is</font>

250
00:13:33,610 --> 00:13:39,140
done by both hardware<font color="#E5E5E5"> and software I</font>

251
00:13:36,440 --> 00:13:40,880
mean everything that<font color="#E5E5E5"> Windows is doing</font>

252
00:13:39,140 --> 00:13:43,550
<font color="#E5E5E5">must be supported by the hardware to</font>

253
00:13:40,880 --> 00:13:46,520
walk<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> if virtualization is</font>

254
00:13:43,550 --> 00:13:50,839
not a numbered clearly VPS cannot be

255
00:13:46,520 --> 00:13:54,770
enabled<font color="#CCCCCC"> and it's also the basis for</font><font color="#E5E5E5"> many</font>

256
00:13:50,839 --> 00:13:58,190
things<font color="#E5E5E5"> like shared memory or the</font><font color="#CCCCCC"> ability</font>

257
00:13:54,770 --> 00:14:03,640
to do flexible physical memory

258
00:13:58,190 --> 00:14:07,040
management<font color="#E5E5E5"> but also the way that</font><font color="#CCCCCC"> the</font>

259
00:14:03,640 --> 00:14:08,750
<font color="#CCCCCC">advanced mitigations work such as</font><font color="#E5E5E5"> HV CI</font>

260
00:14:07,040 --> 00:14:15,130
credential guard is based on the same

261
00:14:08,750 --> 00:14:15,130
things<font color="#E5E5E5"> and secure memory enclave's and</font>

262
00:14:15,520 --> 00:14:26,470
many other<font color="#CCCCCC"> things that microsoft is keep</font>

263
00:14:18,470 --> 00:14:30,500
lending to the operating<font color="#CCCCCC"> system ok ok so</font>

264
00:14:26,470 --> 00:14:33,339
now that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> covered our basics</font><font color="#E5E5E5"> we need</font>

265
00:14:30,500 --> 00:14:36,620
to understand what we want to achieve

266
00:14:33,339 --> 00:14:40,870
<font color="#E5E5E5">what is our general motivation here so</font>

267
00:14:36,620 --> 00:14:44,450
if<font color="#E5E5E5"> we look at every privilege escalation</font>

268
00:14:40,870 --> 00:14:47,660
<font color="#E5E5E5">exploit that is out there</font><font color="#CCCCCC"> right now</font><font color="#E5E5E5"> or</font>

269
00:14:44,450 --> 00:14:50,270
at<font color="#E5E5E5"> least most of them at some</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> in</font>

270
00:14:47,660 --> 00:14:53,240
<font color="#E5E5E5">their execution</font><font color="#CCCCCC"> in their operation they</font>

271
00:14:50,270 --> 00:14:55,930
run a payload in kernel mode which now

272
00:14:53,240 --> 00:14:59,120
becomes a problem<font color="#CCCCCC"> because key mci</font>

273
00:14:55,930 --> 00:15:02,689
effectively prevents it as we said we

274
00:14:59,120 --> 00:15:07,820
cannot create new code in the kernel<font color="#E5E5E5"> and</font>

275
00:15:02,690 --> 00:15:10,760
<font color="#CCCCCC">know we can modify existing one</font><font color="#E5E5E5"> so we</font>

276
00:15:07,820 --> 00:15:14,029
kind of have a problem<font color="#E5E5E5"> here</font>

277
00:15:10,760 --> 00:15:17,300
most of previous publications<font color="#CCCCCC"> kind of</font>

278
00:15:14,029 --> 00:15:18,320
<font color="#CCCCCC">assume it wasn't enabled this</font><font color="#E5E5E5"> is because</font>

279
00:15:17,300 --> 00:15:22,370
it wasn't relevant

280
00:15:18,320 --> 00:15:24,890
up until<font color="#E5E5E5"> now mostly and proud and</font>

281
00:15:22,370 --> 00:15:25,970
basically<font color="#CCCCCC"> our</font><font color="#E5E5E5"> the real goal here</font><font color="#CCCCCC"> is to</font>

282
00:15:24,890 --> 00:15:29,120
able<font color="#CCCCCC"> to</font>

283
00:15:25,970 --> 00:15:33,110
to be able<font color="#CCCCCC"> to achieve</font><font color="#E5E5E5"> code execution we</font>

284
00:15:29,120 --> 00:15:35,990
<font color="#E5E5E5">test possible privileges usually a</font>

285
00:15:33,110 --> 00:15:41,660
kernel mode but for our for our

286
00:15:35,990 --> 00:15:46,009
intensive purposes<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can be good enough</font>

287
00:15:41,660 --> 00:15:49,550
<font color="#E5E5E5">and we</font><font color="#CCCCCC"> can use we can get to a</font><font color="#E5E5E5"> state</font>

288
00:15:46,009 --> 00:15:52,730
that<font color="#E5E5E5"> we run as a system user the reason</font>

289
00:15:49,550 --> 00:15:54,769
<font color="#E5E5E5">for</font><font color="#CCCCCC"> that is that</font><font color="#E5E5E5"> at this point Microsoft</font>

290
00:15:52,730 --> 00:15:58,129
does not<font color="#E5E5E5"> consider it as a defensible</font>

291
00:15:54,769 --> 00:16:01,839
boundary<font color="#CCCCCC"> the</font><font color="#E5E5E5"> quality</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> taken from a</font>

292
00:15:58,129 --> 00:16:04,160
tool that was released<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think yesterday</font>

293
00:16:01,839 --> 00:16:08,029
don't quote me on that maybe the day

294
00:16:04,160 --> 00:16:13,879
<font color="#E5E5E5">before that by Alex UNESCO and that the</font>

295
00:16:08,029 --> 00:16:18,319
released tool<font color="#CCCCCC"> utility for whoever wishes</font>

296
00:16:13,879 --> 00:16:21,680
to execute<font color="#CCCCCC"> kernel-mode</font><font color="#E5E5E5"> code from a user</font>

297
00:16:18,319 --> 00:16:25,279
mode<font color="#E5E5E5"> without any driver being involved</font>

298
00:16:21,680 --> 00:16:27,979
in the<font color="#CCCCCC"> process and the only thing you</font>

299
00:16:25,279 --> 00:16:33,290
<font color="#E5E5E5">need is basically an administrator</font>

300
00:16:27,980 --> 00:16:35,449
account or a system account so we're

301
00:16:33,290 --> 00:16:37,639
going<font color="#E5E5E5"> to cover our technique which we</font>

302
00:16:35,449 --> 00:16:43,430
named<font color="#E5E5E5"> is which we named as Turning</font>

303
00:16:37,639 --> 00:16:44,980
Tables<font color="#E5E5E5"> basically we need to understand</font>

304
00:16:43,430 --> 00:16:48,469
what we actually<font color="#E5E5E5"> need in order to</font>

305
00:16:44,980 --> 00:16:52,910
execute it<font color="#CCCCCC"> so once we found a</font>

306
00:16:48,470 --> 00:16:56,389
<font color="#CCCCCC">vulnerability that</font><font color="#E5E5E5"> allows us to be able</font>

307
00:16:52,910 --> 00:16:57,649
to<font color="#E5E5E5"> achieve read and write primitives if</font>

308
00:16:56,389 --> 00:16:59,920
you look at it from a developer

309
00:16:57,649 --> 00:17:03,100
perspective<font color="#E5E5E5"> it means that we have</font>

310
00:16:59,920 --> 00:17:07,549
functions<font color="#E5E5E5"> that we can supply them with</font>

311
00:17:03,100 --> 00:17:11,030
virtual address and data<font color="#E5E5E5"> either to read</font>

312
00:17:07,549 --> 00:17:14,839
or write<font color="#E5E5E5"> from kernel mode and do that</font>

313
00:17:11,030 --> 00:17:18,230
from the user space this is very common

314
00:17:14,839 --> 00:17:23,809
in pretty pretty much every<font color="#CCCCCC"> mod</font><font color="#E5E5E5"> and</font>

315
00:17:18,230 --> 00:17:26,209
exploit<font color="#E5E5E5"> and that's all we need so to</font>

316
00:17:23,809 --> 00:17:28,339
understand the concept<font color="#E5E5E5"> and basically</font>

317
00:17:26,209 --> 00:17:31,940
<font color="#E5E5E5">what we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to do is utilize these</font>

318
00:17:28,339 --> 00:17:35,090
primitives and make a shirt code page<font color="#E5E5E5"> in</font>

319
00:17:31,940 --> 00:17:38,419
user mode we're<font color="#CCCCCC"> going to flip a bit in</font>

320
00:17:35,090 --> 00:17:39,379
<font color="#CCCCCC">its PT</font><font color="#E5E5E5"> and make it right to go it's a</font>

321
00:17:38,419 --> 00:17:42,320
very

322
00:17:39,380 --> 00:17:46,009
simple operation<font color="#CCCCCC"> just flipping one bit</font>

323
00:17:42,320 --> 00:17:49,820
and in that way we<font color="#E5E5E5"> will be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to avoid</font>

324
00:17:46,009 --> 00:17:52,610
the copy-on-write mechanism now<font color="#E5E5E5"> the</font>

325
00:17:49,820 --> 00:17:55,639
<font color="#E5E5E5">short code page need to be a one that</font>

326
00:17:52,610 --> 00:17:59,750
actually<font color="#CCCCCC"> runs in other</font><font color="#E5E5E5"> processes because</font>

327
00:17:55,639 --> 00:18:02,229
it is shared<font color="#CCCCCC"> so we want</font><font color="#E5E5E5"> to target a code</font>

328
00:17:59,750 --> 00:18:05,120
<font color="#E5E5E5">that also been used in system processes</font>

329
00:18:02,230 --> 00:18:07,279
next up<font color="#E5E5E5"> after we made the code writable</font>

330
00:18:05,120 --> 00:18:09,379
in our own in our own process in the

331
00:18:07,279 --> 00:18:12,799
origin process and we're going to change

332
00:18:09,380 --> 00:18:15,500
<font color="#E5E5E5">the code however</font><font color="#CCCCCC"> we like next we just</font>

333
00:18:12,799 --> 00:18:18,740
<font color="#CCCCCC">need to wait</font><font color="#E5E5E5"> and then we're gonna run a</font>

334
00:18:15,500 --> 00:18:22,009
system it's<font color="#E5E5E5"> very it's</font><font color="#CCCCCC"> very simple</font><font color="#E5E5E5"> a</font>

335
00:18:18,740 --> 00:18:25,490
simple concept<font color="#CCCCCC"> and nevertheless we still</font>

336
00:18:22,009 --> 00:18:28,580
have some hurdles<font color="#E5E5E5"> to overcome</font><font color="#CCCCCC"> the first</font>

337
00:18:25,490 --> 00:18:31,009
<font color="#CCCCCC">one as we mentioned earlier</font><font color="#E5E5E5"> page table</font>

338
00:18:28,580 --> 00:18:33,649
are now randomized and<font color="#E5E5E5"> we some someone</font>

339
00:18:31,009 --> 00:18:35,870
need to be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> get their addresses</font>

340
00:18:33,649 --> 00:18:39,320
in order to go<font color="#CCCCCC"> through the</font><font color="#E5E5E5"> pts</font>

341
00:18:35,870 --> 00:18:42,080
themselves<font color="#CCCCCC"> and we assume you can already</font>

342
00:18:39,320 --> 00:18:44,269
<font color="#CCCCCC">leak the base address for the</font><font color="#E5E5E5"> kernel and</font>

343
00:18:42,080 --> 00:18:48,039
<font color="#E5E5E5">with your right primitive and there's a</font>

344
00:18:44,269 --> 00:18:50,899
lot<font color="#E5E5E5"> of material on on on this topic</font>

345
00:18:48,039 --> 00:18:55,190
<font color="#E5E5E5">online so you could just find</font><font color="#CCCCCC"> out about</font>

346
00:18:50,899 --> 00:18:58,518
it<font color="#E5E5E5"> and there is a very convenient way</font><font color="#CCCCCC"> to</font>

347
00:18:55,190 --> 00:19:00,769
find the<font color="#E5E5E5"> PT base address using an</font>

348
00:18:58,519 --> 00:19:05,600
<font color="#E5E5E5">exported function in the kernel and</font>

349
00:19:00,769 --> 00:19:07,940
Microsoft was very kind to<font color="#E5E5E5"> us you can</font>

350
00:19:05,600 --> 00:19:11,600
see that<font color="#CCCCCC"> mmm get</font><font color="#E5E5E5"> virtual for physical is</font>

351
00:19:07,940 --> 00:19:17,379
exported<font color="#E5E5E5"> though it's undocumented and we</font>

352
00:19:11,600 --> 00:19:20,418
can still use it<font color="#CCCCCC"> and the PT base is</font>

353
00:19:17,379 --> 00:19:22,639
<font color="#E5E5E5">marked there it's a bit hard to see the</font>

354
00:19:20,419 --> 00:19:25,399
value but it's a<font color="#E5E5E5"> constant value and</font>

355
00:19:22,639 --> 00:19:27,439
which is which changes the every boot so

356
00:19:25,399 --> 00:19:29,120
we can<font color="#CCCCCC"> easily walk through the</font><font color="#E5E5E5"> export</font>

357
00:19:27,440 --> 00:19:31,970
table once we have a<font color="#E5E5E5"> real primitive and</font>

358
00:19:29,120 --> 00:19:36,168
the<font color="#CCCCCC"> end of service</font><font color="#E5E5E5"> address find the</font>

359
00:19:31,970 --> 00:19:39,879
function address and read this<font color="#E5E5E5"> random</font>

360
00:19:36,169 --> 00:19:42,830
value now an<font color="#CCCCCC"> additional method</font><font color="#E5E5E5"> it can</font><font color="#CCCCCC"> be</font>

361
00:19:39,879 --> 00:19:46,039
can be<font color="#E5E5E5"> also growth we</font><font color="#CCCCCC"> can also go</font>

362
00:19:42,830 --> 00:19:49,820
through<font color="#E5E5E5"> em I get PT address this</font>

363
00:19:46,039 --> 00:19:52,110
function is an internal function and it

364
00:19:49,820 --> 00:19:55,590
was<font color="#CCCCCC"> presented this method</font>

365
00:19:52,110 --> 00:19:59,040
was presented in<font color="#CCCCCC"> blackhat last year so</font>

366
00:19:55,590 --> 00:20:01,740
<font color="#E5E5E5">now that we managed to find the</font><font color="#CCCCCC"> pities</font>

367
00:19:59,040 --> 00:20:03,950
for the a code we want<font color="#E5E5E5"> to change in user</font>

368
00:20:01,740 --> 00:20:07,200
mode<font color="#CCCCCC"> and we need to understand</font><font color="#E5E5E5"> exactly</font>

369
00:20:03,950 --> 00:20:09,630
which code we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> change so first</font>

370
00:20:07,200 --> 00:20:11,750
up we<font color="#CCCCCC"> need to understand which</font><font color="#E5E5E5"> target</font>

371
00:20:09,630 --> 00:20:15,240
<font color="#E5E5E5">which process</font><font color="#CCCCCC"> is going to</font><font color="#E5E5E5"> be our target</font>

372
00:20:11,750 --> 00:20:17,940
<font color="#E5E5E5">meaning in the end of the process of the</font>

373
00:20:15,240 --> 00:20:21,270
exploit<font color="#E5E5E5"> where we want to execute our</font>

374
00:20:17,940 --> 00:20:24,270
code so there<font color="#E5E5E5"> are many processes</font><font color="#CCCCCC"> that</font>

375
00:20:21,270 --> 00:20:26,940
run<font color="#CCCCCC"> in system for example s be ciosed</font>

376
00:20:24,270 --> 00:20:30,918
<font color="#CCCCCC">which is a generic host for services in</font>

377
00:20:26,940 --> 00:20:34,830
<font color="#CCCCCC">windows win logon and else's which are</font>

378
00:20:30,919 --> 00:20:37,380
always<font color="#E5E5E5"> processes that handle login in</font>

379
00:20:34,830 --> 00:20:39,449
<font color="#E5E5E5">authentication</font><font color="#CCCCCC"> and of course pretty much</font>

380
00:20:37,380 --> 00:20:42,330
a<font color="#CCCCCC"> v out there and out of the box</font><font color="#E5E5E5"> on</font>

381
00:20:39,450 --> 00:20:45,750
<font color="#E5E5E5">Windows 10 we get a V different Windows</font>

382
00:20:42,330 --> 00:20:48,299
<font color="#E5E5E5">Defender now we don't necessarily have</font>

383
00:20:45,750 --> 00:20:52,220
to<font color="#CCCCCC"> target system process on the start</font>

384
00:20:48,299 --> 00:20:57,240
but<font color="#E5E5E5"> it will only</font><font color="#CCCCCC"> make our road to a</font>

385
00:20:52,220 --> 00:20:59,940
complete escalation much longer<font color="#E5E5E5"> now</font>

386
00:20:57,240 --> 00:21:02,100
another side effect<font color="#E5E5E5"> that we might be</font>

387
00:20:59,940 --> 00:21:04,770
able<font color="#E5E5E5"> to benefit from is that the fact</font>

388
00:21:02,100 --> 00:21:08,490
that<font color="#E5E5E5"> sometimes system processes are</font>

389
00:21:04,770 --> 00:21:12,799
<font color="#E5E5E5">being excluded from</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> monitoring and</font>

390
00:21:08,490 --> 00:21:15,650
protection of some<font color="#E5E5E5"> security products so</font>

391
00:21:12,799 --> 00:21:19,530
we might be<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> avoid detection</font>

392
00:21:15,650 --> 00:21:21,809
<font color="#E5E5E5">afterwards so after we understand which</font>

393
00:21:19,530 --> 00:21:24,360
process we're<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to target for</font>

394
00:21:21,809 --> 00:21:26,940
instance<font color="#CCCCCC"> SVC</font><font color="#E5E5E5"> host you need to understand</font>

395
00:21:24,360 --> 00:21:31,110
which specific<font color="#E5E5E5"> DLL we're gonna we're</font>

396
00:21:26,940 --> 00:21:33,990
gonna need to change so<font color="#CCCCCC"> target the</font>

397
00:21:31,110 --> 00:21:36,649
target<font color="#E5E5E5"> that</font><font color="#CCCCCC"> DLL cannot be a one that is</font>

398
00:21:33,990 --> 00:21:39,630
<font color="#CCCCCC">shared with VTL a 1 because VTL 1</font>

399
00:21:36,650 --> 00:21:43,140
protects every code that is being<font color="#CCCCCC"> used</font>

400
00:21:39,630 --> 00:21:45,540
within that so for instance<font color="#CCCCCC"> Keanu 32 is</font>

401
00:21:43,140 --> 00:21:49,799
not<font color="#CCCCCC"> a very</font><font color="#E5E5E5"> good candidate for that</font>

402
00:21:45,540 --> 00:21:53,610
purpose<font color="#E5E5E5"> but because</font><font color="#CCCCCC"> VTL</font><font color="#E5E5E5"> 1 is a very</font>

403
00:21:49,799 --> 00:21:55,860
redacted zone because it has to<font color="#E5E5E5"> be more</font>

404
00:21:53,610 --> 00:22:00,330
secure<font color="#E5E5E5"> and this attack surface should be</font>

405
00:21:55,860 --> 00:22:03,030
<font color="#E5E5E5">more narrow it doesn't use any UI nor</font>

406
00:22:00,330 --> 00:22:05,070
<font color="#E5E5E5">that it does complex parsing and all</font>

407
00:22:03,030 --> 00:22:08,399
that you or it doesn't<font color="#E5E5E5"> use</font>

408
00:22:05,070 --> 00:22:11,700
network capabilities<font color="#E5E5E5"> so all of the</font>

409
00:22:08,400 --> 00:22:14,190
relevant dealers for that for those

410
00:22:11,700 --> 00:22:17,280
systems<font color="#E5E5E5"> subsystems can be very helpful</font>

411
00:22:14,190 --> 00:22:19,350
<font color="#CCCCCC">for us and preferably</font><font color="#E5E5E5"> and we want the</font>

412
00:22:17,280 --> 00:22:22,260
dealer to or will already be loaded<font color="#E5E5E5"> in</font>

413
00:22:19,350 --> 00:22:25,709
<font color="#E5E5E5">our origin process we just</font><font color="#CCCCCC"> save us some</font>

414
00:22:22,260 --> 00:22:28,470
<font color="#E5E5E5">hassle from a quick search we</font><font color="#CCCCCC"> did the</font>

415
00:22:25,710 --> 00:22:30,990
following<font color="#CCCCCC"> for the others appear pretty</font>

416
00:22:28,470 --> 00:22:33,660
much in in most<font color="#E5E5E5"> processes and our nut</font>

417
00:22:30,990 --> 00:22:35,280
shell with<font color="#CCCCCC"> VTL</font><font color="#E5E5E5"> zero and keep in</font><font color="#CCCCCC"> mind the</font>

418
00:22:33,660 --> 00:22:38,010
first one it's very<font color="#CCCCCC"> interesting for</font><font color="#E5E5E5"> us</font>

419
00:22:35,280 --> 00:22:42,060
and we're<font color="#E5E5E5"> going to continue talking</font>

420
00:22:38,010 --> 00:22:44,340
about<font color="#E5E5E5"> it in the next</font><font color="#CCCCCC"> slide</font><font color="#E5E5E5"> so after we</font>

421
00:22:42,060 --> 00:22:46,020
decided<font color="#CCCCCC"> which specific DL are we going</font>

422
00:22:44,340 --> 00:22:48,659
to change<font color="#E5E5E5"> we</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to understand exactly</font>

423
00:22:46,020 --> 00:22:50,820
<font color="#E5E5E5">how we can change it we need to find a</font>

424
00:22:48,660 --> 00:22:53,250
<font color="#E5E5E5">place</font><font color="#CCCCCC"> that is shared but it's not used</font>

425
00:22:50,820 --> 00:22:55,500
<font color="#CCCCCC">obviously because if we make some</font>

426
00:22:53,250 --> 00:22:58,050
changes<font color="#CCCCCC"> to it</font><font color="#E5E5E5"> before were really</font>

427
00:22:55,500 --> 00:23:02,060
prepared it will make us a<font color="#E5E5E5"> crash which</font>

428
00:22:58,050 --> 00:23:04,889
is ideally not<font color="#E5E5E5"> a good thing to</font><font color="#CCCCCC"> do once</font>

429
00:23:02,060 --> 00:23:11,100
<font color="#CCCCCC">one-for-one tries to run in kernel</font>

430
00:23:04,890 --> 00:23:17,370
exploit so for that instance<font color="#E5E5E5"> we have</font>

431
00:23:11,100 --> 00:23:21,000
code caves caves in executable files<font color="#E5E5E5"> are</font>

432
00:23:17,370 --> 00:23:24,629
quite common<font color="#E5E5E5"> basically at the end</font><font color="#CCCCCC"> of</font>

433
00:23:21,000 --> 00:23:27,090
each section<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the executable there is</font>

434
00:23:24,630 --> 00:23:29,400
<font color="#E5E5E5">the unused space it's usually because</font>

435
00:23:27,090 --> 00:23:31,980
there are differences<font color="#CCCCCC"> in page alignments</font>

436
00:23:29,400 --> 00:23:34,800
between<font color="#E5E5E5"> virtual between the file page</font>

437
00:23:31,980 --> 00:23:39,390
size in virtual memory<font color="#E5E5E5"> and</font><font color="#CCCCCC"> sector size</font>

438
00:23:34,800 --> 00:23:41,220
on disk<font color="#E5E5E5"> so using that these places are</font>

439
00:23:39,390 --> 00:23:43,350
very<font color="#E5E5E5"> good so if we look at the code</font>

440
00:23:41,220 --> 00:23:45,870
section and we got<font color="#E5E5E5"> a place that is</font>

441
00:23:43,350 --> 00:23:48,120
already shared<font color="#E5E5E5"> it's unused</font>

442
00:23:45,870 --> 00:23:51,600
<font color="#E5E5E5">and it's executable so it's great for</font><font color="#CCCCCC"> us</font>

443
00:23:48,120 --> 00:23:55,169
<font color="#E5E5E5">and makes it quite a straight fold</font><font color="#CCCCCC"> well</font>

444
00:23:51,600 --> 00:23:57,830
we're gonna put our first payload so if

445
00:23:55,170 --> 00:24:02,190
we continue<font color="#CCCCCC"> on looking on our or a</font>

446
00:23:57,830 --> 00:24:04,679
targeted<font color="#E5E5E5"> DLL only 32 DLL as I mentioned</font>

447
00:24:02,190 --> 00:24:07,710
earlier is quite a good candidate it has

448
00:24:04,680 --> 00:24:09,930
over<font color="#CCCCCC"> a half a page of code cave which is</font>

449
00:24:07,710 --> 00:24:15,840
quite a lot of<font color="#E5E5E5"> space for an initial</font>

450
00:24:09,930 --> 00:24:18,330
shell code so after we decided<font color="#E5E5E5"> to write</font>

451
00:24:15,840 --> 00:24:20,879
our shell code<font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to understand how</font>

452
00:24:18,330 --> 00:24:23,399
can trigger it<font color="#CCCCCC"> because as we</font><font color="#E5E5E5"> said it's</font>

453
00:24:20,880 --> 00:24:26,940
in a place<font color="#CCCCCC"> that it's not used so</font><font color="#E5E5E5"> just</font>

454
00:24:23,399 --> 00:24:29,760
<font color="#CCCCCC">try</font><font color="#E5E5E5"> thing it won't be enough so the</font>

455
00:24:26,940 --> 00:24:32,190
target module needs to be used quite

456
00:24:29,760 --> 00:24:35,070
often in the<font color="#E5E5E5"> tab in the target</font><font color="#CCCCCC"> process</font>

457
00:24:32,190 --> 00:24:38,190
<font color="#E5E5E5">so our code that we write on we</font><font color="#CCCCCC"> write</font>

458
00:24:35,070 --> 00:24:40,649
there would<font color="#CCCCCC"> be eventually</font><font color="#E5E5E5"> executed</font><font color="#CCCCCC"> we</font>

459
00:24:38,190 --> 00:24:43,830
don't want it to be obvious<font color="#E5E5E5"> too much</font>

460
00:24:40,649 --> 00:24:48,029
often because then overhead<font color="#E5E5E5"> will be an</font>

461
00:24:43,830 --> 00:24:52,260
issue<font color="#CCCCCC"> for us and we can also consider</font>

462
00:24:48,029 --> 00:24:54,240
<font color="#E5E5E5">places that may be triggered by the</font>

463
00:24:52,260 --> 00:24:58,679
origin process for instance<font color="#E5E5E5"> we are</font><font color="#CCCCCC"> in</font>

464
00:24:54,240 --> 00:25:00,389
<font color="#CCCCCC">RPC some operations from one process</font>

465
00:24:58,679 --> 00:25:02,519
requires communicating with<font color="#E5E5E5"> a different</font>

466
00:25:00,389 --> 00:25:05,969
process which eventually<font color="#E5E5E5"> may lead to a</font>

467
00:25:02,519 --> 00:25:09,570
path to a code path that<font color="#E5E5E5"> will eventually</font>

468
00:25:05,970 --> 00:25:11,250
execute our own code<font color="#CCCCCC"> and if we look</font><font color="#E5E5E5"> at</font>

469
00:25:09,570 --> 00:25:15,029
the<font color="#CCCCCC"> Alerus</font><font color="#E5E5E5"> as we said we targeted the</font>

470
00:25:11,250 --> 00:25:16,500
<font color="#CCCCCC">DLL entry points for this kind of files</font>

471
00:25:15,029 --> 00:25:23,279
are very<font color="#CCCCCC"> appealing</font>

472
00:25:16,500 --> 00:25:27,029
now<font color="#E5E5E5"> the invoked on certain events such</font>

473
00:25:23,279 --> 00:25:30,480
<font color="#E5E5E5">as every</font><font color="#CCCCCC"> thread start</font><font color="#E5E5E5"> of thread creation</font>

474
00:25:27,029 --> 00:25:34,049
and<font color="#CCCCCC"> haverford</font><font color="#E5E5E5"> exit unless the</font><font color="#CCCCCC"> DLS</font>

475
00:25:30,480 --> 00:25:37,260
specifically opted out from it now on

476
00:25:34,049 --> 00:25:39,179
Windows 10<font color="#E5E5E5"> if you open Rockman for a</font>

477
00:25:37,260 --> 00:25:41,100
couple<font color="#E5E5E5"> of seconds you can see</font><font color="#CCCCCC"> that</font>

478
00:25:39,179 --> 00:25:44,460
services constantly create many threads

479
00:25:41,100 --> 00:25:47,969
so it's great for<font color="#CCCCCC"> us and specifically</font>

480
00:25:44,460 --> 00:25:51,769
<font color="#E5E5E5">because we target a</font><font color="#CCCCCC"> DLL that</font><font color="#E5E5E5"> Microsoft</font>

481
00:25:47,970 --> 00:25:55,260
built their own version of the C runtime

482
00:25:51,769 --> 00:25:58,289
<font color="#CCCCCC">it's very easy to be to alter in order</font>

483
00:25:55,260 --> 00:26:01,470
to<font color="#CCCCCC"> make to make</font><font color="#E5E5E5"> the code reach our code</font>

484
00:25:58,289 --> 00:26:03,809
cave<font color="#E5E5E5"> and there is a small jump at the</font>

485
00:26:01,470 --> 00:26:07,950
<font color="#CCCCCC">end of the main block</font><font color="#E5E5E5"> between simply</font>

486
00:26:03,809 --> 00:26:09,750
need<font color="#CCCCCC"> to write and change the</font><font color="#E5E5E5"> add the</font>

487
00:26:07,950 --> 00:26:13,980
<font color="#E5E5E5">target address to get our own code in</font>

488
00:26:09,750 --> 00:26:16,620
<font color="#E5E5E5">the code cave so we are at the point</font>

489
00:26:13,980 --> 00:26:18,299
that our<font color="#E5E5E5"> code can run but we need to</font>

490
00:26:16,620 --> 00:26:21,959
understand exactly how to build it

491
00:26:18,299 --> 00:26:25,080
now<font color="#E5E5E5"> because we write to a shared a page</font>

492
00:26:21,960 --> 00:26:27,000
<font color="#CCCCCC">that code</font><font color="#E5E5E5"> can populate</font><font color="#CCCCCC"> too many</font>

493
00:26:25,080 --> 00:26:29,039
different<font color="#CCCCCC"> processes that we don't</font>

494
00:26:27,000 --> 00:26:32,160
<font color="#E5E5E5">necessarily know which</font><font color="#CCCCCC"> which ones they</font>

495
00:26:29,039 --> 00:26:34,650
are<font color="#E5E5E5"> and we don't</font><font color="#CCCCCC"> control it so</font>

496
00:26:32,160 --> 00:26:37,980
because we<font color="#CCCCCC"> assume that we run in a</font>

497
00:26:34,650 --> 00:26:40,760
limited sandbox process and we don't

498
00:26:37,980 --> 00:26:43,740
specifically know the<font color="#E5E5E5"> target process ID</font>

499
00:26:40,760 --> 00:26:46,650
but since we<font color="#CCCCCC"> already run code inside the</font>

500
00:26:43,740 --> 00:26:50,360
target<font color="#CCCCCC"> process</font><font color="#E5E5E5"> it's very</font><font color="#CCCCCC"> easy to check</font>

501
00:26:46,650 --> 00:26:53,160
the process name and to a<font color="#E5E5E5"> very verified</font>

502
00:26:50,360 --> 00:27:00,179
<font color="#CCCCCC">username in which in under which account</font>

503
00:26:53,160 --> 00:27:02,670
it runs and then if<font color="#CCCCCC"> it's if it it's if</font>

504
00:27:00,180 --> 00:27:06,270
it's good<font color="#CCCCCC"> for us we can simply continue</font>

505
00:27:02,670 --> 00:27:08,460
on running now<font color="#CCCCCC"> since we also run in</font>

506
00:27:06,270 --> 00:27:11,790
multiple processes and we don't run our

507
00:27:08,460 --> 00:27:17,220
payload<font color="#E5E5E5"> to run only once more than one</font>

508
00:27:11,790 --> 00:27:20,850
<font color="#CCCCCC">section we can simply synchronize all of</font>

509
00:27:17,220 --> 00:27:23,790
the different instances<font color="#E5E5E5"> by trying to</font>

510
00:27:20,850 --> 00:27:26,040
obtain<font color="#E5E5E5"> a named mutex once we start the</font>

511
00:27:23,790 --> 00:27:28,230
<font color="#E5E5E5">first</font><font color="#CCCCCC"> one with that we'll be able to do</font>

512
00:27:26,040 --> 00:27:31,290
<font color="#E5E5E5">that we'll</font><font color="#CCCCCC"> just continue</font><font color="#E5E5E5"> on to the main</font>

513
00:27:28,230 --> 00:27:33,780
payload now because the code cave is

514
00:27:31,290 --> 00:27:37,230
quite small in size<font color="#E5E5E5"> and we need to be</font>

515
00:27:33,780 --> 00:27:40,560
able<font color="#CCCCCC"> to do some more</font><font color="#E5E5E5"> complex</font><font color="#CCCCCC"> operations</font>

516
00:27:37,230 --> 00:27:42,990
so we<font color="#E5E5E5"> want more code which is usually</font>

517
00:27:40,560 --> 00:27:45,720
larger than<font color="#E5E5E5"> the code cave size and we</font>

518
00:27:42,990 --> 00:27:49,110
<font color="#E5E5E5">can either map it and get it from the</font>

519
00:27:45,720 --> 00:27:51,810
origin process or directly<font color="#E5E5E5"> read it from</font>

520
00:27:49,110 --> 00:27:53,760
its memory<font color="#E5E5E5"> or we can just fetch it from</font>

521
00:27:51,810 --> 00:27:58,590
a remote<font color="#E5E5E5"> machine</font><font color="#CCCCCC"> and now that we run</font>

522
00:27:53,760 --> 00:28:01,290
<font color="#E5E5E5">into</font><font color="#CCCCCC"> bleach process</font><font color="#E5E5E5"> it's much easier so</font>

523
00:27:58,590 --> 00:28:03,419
if I need<font color="#E5E5E5"> to quickly recap and walk</font>

524
00:28:01,290 --> 00:28:06,720
through<font color="#E5E5E5"> the technique with a concrete</font>

525
00:28:03,420 --> 00:28:08,580
concrete example<font color="#CCCCCC"> and we have the</font>

526
00:28:06,720 --> 00:28:10,830
hypervisor that<font color="#E5E5E5"> protects the kernel we</font>

527
00:28:08,580 --> 00:28:13,740
have hyper-v<font color="#CCCCCC"> particular on the</font><font color="#E5E5E5"> right we</font>

528
00:28:10,830 --> 00:28:17,840
have<font color="#E5E5E5"> an instance of an SVC SVC host</font>

529
00:28:13,740 --> 00:28:21,260
process that is using oily 32<font color="#CCCCCC"> DLL and</font>

530
00:28:17,840 --> 00:28:26,100
<font color="#E5E5E5">for example and we get a sandbox process</font>

531
00:28:21,260 --> 00:28:30,030
with an instance of edge browser<font color="#E5E5E5"> next up</font>

532
00:28:26,100 --> 00:28:34,709
after<font color="#E5E5E5"> we leverage the vulnerability that</font>

533
00:28:30,030 --> 00:28:36,149
we found<font color="#E5E5E5"> hopefully we're gonna use a</font>

534
00:28:34,710 --> 00:28:39,750
read and write primitives that<font color="#CCCCCC"> we</font>

535
00:28:36,150 --> 00:28:43,410
established and make the short code page

536
00:28:39,750 --> 00:28:45,030
is writable<font color="#E5E5E5"> in the origin process then</font>

537
00:28:43,410 --> 00:28:45,480
we can write the<font color="#CCCCCC"> initial payload to the</font>

538
00:28:45,030 --> 00:28:48,120
<font color="#E5E5E5">code</font>

539
00:28:45,480 --> 00:28:50,730
Jeff which will populate<font color="#E5E5E5"> to the rest of</font>

540
00:28:48,120 --> 00:28:53,070
the processes<font color="#CCCCCC"> and we're</font><font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> continue</font>

541
00:28:50,730 --> 00:28:58,260
and<font color="#E5E5E5"> manipulate the</font><font color="#CCCCCC"> DLL and main entry</font>

542
00:28:53,070 --> 00:29:00,899
point in order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> make the code</font><font color="#E5E5E5"> execute</font>

543
00:28:58,260 --> 00:29:04,440
at<font color="#CCCCCC"> a certain</font><font color="#E5E5E5"> point then and then we only</font>

544
00:29:00,900 --> 00:29:07,470
need<font color="#E5E5E5"> to wait</font><font color="#CCCCCC"> the code is already</font><font color="#E5E5E5"> all the</font>

545
00:29:04,440 --> 00:29:09,390
changes are<font color="#CCCCCC"> already done</font><font color="#E5E5E5"> we simply need</font>

546
00:29:07,470 --> 00:29:11,280
<font color="#CCCCCC">to wait for a thread to be created</font><font color="#E5E5E5"> in</font>

547
00:29:09,390 --> 00:29:14,100
<font color="#E5E5E5">the target process</font><font color="#CCCCCC"> and the code will</font>

548
00:29:11,280 --> 00:29:16,740
start running<font color="#E5E5E5"> then it will load up the</font>

549
00:29:14,100 --> 00:29:20,309
rest of<font color="#E5E5E5"> the payload and do whatever we</font>

550
00:29:16,740 --> 00:29:29,250
like<font color="#E5E5E5"> and now for a very nice demo</font>

551
00:29:20,309 --> 00:29:30,649
hopefully so we got here<font color="#E5E5E5"> a virtual</font>

552
00:29:29,250 --> 00:29:36,240
<font color="#E5E5E5">machine</font>

553
00:29:30,650 --> 00:29:40,530
it's the latest Windows<font color="#CCCCCC"> RS for version</font>

554
00:29:36,240 --> 00:29:43,740
<font color="#CCCCCC">it's updated I think</font><font color="#E5E5E5"> last week</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> last</font>

555
00:29:40,530 --> 00:29:47,250
week which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the most up most current</font>

556
00:29:43,740 --> 00:29:48,049
and<font color="#CCCCCC"> up-to-date</font><font color="#E5E5E5"> and so unfortunately for</font>

557
00:29:47,250 --> 00:29:50,100
<font color="#CCCCCC">us</font>

558
00:29:48,049 --> 00:29:52,230
fortunately<font color="#E5E5E5"> kind of depends</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> how you</font>

559
00:29:50,100 --> 00:29:54,299
look at<font color="#E5E5E5"> it and we don't have an actual</font>

560
00:29:52,230 --> 00:29:57,150
working exploit here and there is no

561
00:29:54,299 --> 00:30:01,080
actual<font color="#CCCCCC"> volume</font><font color="#E5E5E5"> ability that we can use so</font>

562
00:29:57,150 --> 00:30:02,250
we have to use<font color="#CCCCCC"> our own driver</font><font color="#E5E5E5"> in order</font>

563
00:30:01,080 --> 00:30:04,260
<font color="#CCCCCC">to</font><font color="#E5E5E5"> simulate the read</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> write</font>

564
00:30:02,250 --> 00:30:06,240
primitives that's why we entered the

565
00:30:04,260 --> 00:30:12,049
<font color="#CCCCCC">system into test mode</font><font color="#E5E5E5"> you can see it on</font>

566
00:30:06,240 --> 00:30:18,480
the side<font color="#CCCCCC"> here</font><font color="#E5E5E5"> and now if</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> look</font><font color="#CCCCCC"> at the</font>

567
00:30:12,049 --> 00:30:19,950
at the secure the VBS<font color="#E5E5E5"> features that are</font>

568
00:30:18,480 --> 00:30:23,400
enabled we can see that we have the idea

569
00:30:19,950 --> 00:30:31,340
<font color="#CCCCCC">visor and forced code integrity on and</font>

570
00:30:23,400 --> 00:30:34,340
running now<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> gonna start our our</font>

571
00:30:31,340 --> 00:30:34,340
simulation

572
00:30:40,519 --> 00:30:51,600
<font color="#E5E5E5">okay it's gonna take up a second okay so</font>

573
00:30:48,960 --> 00:30:54,720
basically<font color="#E5E5E5"> we</font><font color="#CCCCCC"> load it</font><font color="#E5E5E5"> only loaded oily</font>

574
00:30:51,600 --> 00:30:58,049
and<font color="#E5E5E5"> 32</font><font color="#CCCCCC"> DLL up until this</font><font color="#E5E5E5"> point we didn't</font>

575
00:30:54,720 --> 00:31:01,080
really<font color="#E5E5E5"> actually do anything now if we</font>

576
00:30:58,049 --> 00:31:02,820
take a look<font color="#E5E5E5"> at the address on</font><font color="#CCCCCC"> the system</font>

577
00:31:01,080 --> 00:31:09,689
information<font color="#E5E5E5"> process that I'm already</font>

578
00:31:02,820 --> 00:31:16,039
<font color="#CCCCCC">touch to we can see it's empty</font><font color="#E5E5E5"> you're</font>

579
00:31:09,690 --> 00:31:18,210
<font color="#CCCCCC">gonna continue on</font><font color="#E5E5E5"> and at this point the</font>

580
00:31:16,039 --> 00:31:20,940
<font color="#CCCCCC">shellcode the initial shellcode was</font>

581
00:31:18,210 --> 00:31:25,249
supposed<font color="#E5E5E5"> to be loaded and populated</font><font color="#CCCCCC"> into</font>

582
00:31:20,940 --> 00:31:29,999
the entire into every<font color="#E5E5E5"> passes that also</font>

583
00:31:25,249 --> 00:31:32,940
loads up only<font color="#E5E5E5"> 32 DLL and</font><font color="#CCCCCC"> we can see that</font>

584
00:31:29,999 --> 00:31:35,039
<font color="#E5E5E5">it's actually happened and the code</font>

585
00:31:32,940 --> 00:31:39,480
actually changed<font color="#E5E5E5"> in a process that it's</font>

586
00:31:35,039 --> 00:31:40,830
different<font color="#CCCCCC"> from</font><font color="#E5E5E5"> our own so basically what</font>

587
00:31:39,480 --> 00:31:45,509
we're going<font color="#E5E5E5"> to look for now at our shell</font>

588
00:31:40,830 --> 00:31:52,049
<font color="#E5E5E5">code does its load up a payload DLL from</font>

589
00:31:45,509 --> 00:31:54,499
<font color="#E5E5E5">C Drive</font><font color="#CCCCCC"> so we're gonna open process</font>

590
00:31:52,049 --> 00:31:54,499
Explorer

591
00:32:00,400 --> 00:32:13,440
it's a bit sluggish<font color="#CCCCCC"> the the nested VM on</font>

592
00:32:03,640 --> 00:32:13,440
<font color="#E5E5E5">the</font><font color="#CCCCCC"> VMware doesn't work that</font><font color="#E5E5E5"> fast okay</font>

593
00:32:35,200 --> 00:32:44,010
still no success<font color="#E5E5E5"> means that the code</font>

594
00:32:38,290 --> 00:32:44,010
still didn't run in the SVC host process

595
00:32:47,370 --> 00:32:54,040
try and help it a bit with<font color="#E5E5E5"> user</font>

596
00:32:49,690 --> 00:33:05,800
interaction that<font color="#E5E5E5"> may may cause a service</font>

597
00:32:54,040 --> 00:33:12,670
to actually run and we can see<font color="#E5E5E5"> our code</font>

598
00:33:05,800 --> 00:33:15,909
started if we look at the<font color="#CCCCCC"> specific</font>

599
00:33:12,670 --> 00:33:19,480
process you can<font color="#E5E5E5"> see that</font><font color="#CCCCCC"> SBC</font><font color="#E5E5E5"> host</font><font color="#CCCCCC"> which</font>

600
00:33:15,910 --> 00:33:22,080
runs under<font color="#CCCCCC"> system actually loaded up</font>

601
00:33:19,480 --> 00:33:22,080
around<font color="#CCCCCC"> DLL</font>

602
00:33:30,040 --> 00:33:38,440
<font color="#E5E5E5">okay so if we just compare</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> to how</font><font color="#CCCCCC"> it</font>

603
00:33:36,170 --> 00:33:41,809
works<font color="#E5E5E5"> versus mitigation so basically</font>

604
00:33:38,440 --> 00:33:43,309
we've shown that by<font color="#CCCCCC"> passing page table</font>

605
00:33:41,809 --> 00:33:44,960
and organization is not really an issue

606
00:33:43,309 --> 00:33:50,090
when you<font color="#E5E5E5"> once you have a</font><font color="#CCCCCC"> rate</font><font color="#E5E5E5"> relative</font>

607
00:33:44,960 --> 00:33:54,860
<font color="#E5E5E5">so this is maybe a bit of extra</font><font color="#CCCCCC"> walk</font><font color="#E5E5E5"> but</font>

608
00:33:50,090 --> 00:33:56,750
<font color="#E5E5E5">not really hard to</font><font color="#CCCCCC"> do and the other kind</font>

609
00:33:54,860 --> 00:34:02,299
of more advanced mitigations like<font color="#CCCCCC"> kernel</font>

610
00:33:56,750 --> 00:34:04,850
control<font color="#E5E5E5"> flow and CFG control for garden</font>

611
00:34:02,299 --> 00:34:07,309
is<font color="#E5E5E5"> just not relevant because we don't</font>

612
00:34:04,850 --> 00:34:10,009
really need<font color="#E5E5E5"> to execute system code we</font>

613
00:34:07,309 --> 00:34:12,859
just<font color="#E5E5E5"> wanna run a system in some other</font>

614
00:34:10,010 --> 00:34:15,470
process and the same goes<font color="#CCCCCC"> for chem CI we</font>

615
00:34:12,859 --> 00:34:20,840
<font color="#E5E5E5">just don't need to</font><font color="#CCCCCC"> mess with</font><font color="#E5E5E5"> it we just</font>

616
00:34:15,469 --> 00:34:23,089
<font color="#E5E5E5">keep on to the</font><font color="#CCCCCC"> to running a</font><font color="#E5E5E5"> system and</font>

617
00:34:20,840 --> 00:34:25,669
if<font color="#E5E5E5"> you compare it</font><font color="#CCCCCC"> to other kind of</font>

618
00:34:23,090 --> 00:34:27,859
<font color="#E5E5E5">techniques that</font><font color="#CCCCCC"> Fork is that don't</font>

619
00:34:25,668 --> 00:34:30,888
require<font color="#CCCCCC"> code execution for example like</font>

620
00:34:27,859 --> 00:34:35,569
<font color="#CCCCCC">tokens stealing so there</font><font color="#E5E5E5"> are several</font>

621
00:34:30,889 --> 00:34:38,389
downsides<font color="#E5E5E5"> of tokens stealing one to one</font>

622
00:34:35,570 --> 00:34:42,320
a lot of<font color="#E5E5E5"> security</font><font color="#CCCCCC"> products so they try</font>

623
00:34:38,389 --> 00:34:44,119
to monitor it on<font color="#CCCCCC"> rs.5</font><font color="#E5E5E5"> windows defender</font>

624
00:34:42,320 --> 00:34:47,470
system<font color="#CCCCCC"> guard</font><font color="#E5E5E5"> is also gonna try</font><font color="#CCCCCC"> to</font>

625
00:34:44,119 --> 00:34:49,730
monitor it<font color="#CCCCCC"> it also requires a lot</font>

626
00:34:47,469 --> 00:34:53,509
<font color="#E5E5E5">relatively a lot of operation</font><font color="#CCCCCC"> you need</font>

627
00:34:49,730 --> 00:34:55,879
to traverse<font color="#E5E5E5"> the processes in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> system</font>

628
00:34:53,510 --> 00:34:59,590
in<font color="#CCCCCC"> order to do it and</font><font color="#E5E5E5"> in to do it</font>

629
00:34:55,879 --> 00:35:02,118
<font color="#E5E5E5">without a kernel shell code is also</font>

630
00:34:59,590 --> 00:35:07,130
quite<font color="#E5E5E5"> dangerous in the sense</font><font color="#CCCCCC"> that it may</font>

631
00:35:02,119 --> 00:35:09,800
lead to<font color="#E5E5E5"> a crash and as we've shown the</font>

632
00:35:07,130 --> 00:35:13,340
concept here<font color="#E5E5E5"> is relatively simple we</font>

633
00:35:09,800 --> 00:35:14,869
don't do any complex<font color="#E5E5E5"> operation to me</font><font color="#CCCCCC"> in</font>

634
00:35:13,340 --> 00:35:18,140
order<font color="#CCCCCC"> to make it work</font>

635
00:35:14,869 --> 00:35:22,070
it's just<font color="#E5E5E5"> relatively a few simple</font><font color="#CCCCCC"> steps</font>

636
00:35:18,140 --> 00:35:24,560
<font color="#CCCCCC">and it's running</font><font color="#E5E5E5"> another thing is that</font>

637
00:35:22,070 --> 00:35:26,480
<font color="#E5E5E5">usually</font><font color="#CCCCCC"> when you do some kind</font><font color="#E5E5E5"> of remote</font>

638
00:35:24,560 --> 00:35:29,240
exploitation you start off<font color="#E5E5E5"> in some kind</font>

639
00:35:26,480 --> 00:35:32,000
of sandbox<font color="#CCCCCC"> either at</font><font color="#E5E5E5"> Chrome or whatever</font>

640
00:35:29,240 --> 00:35:34,819
<font color="#CCCCCC">and then you</font><font color="#E5E5E5"> usually want</font><font color="#CCCCCC"> to migrate to</font>

641
00:35:32,000 --> 00:35:36,440
<font color="#E5E5E5">some other process because the browser</font>

642
00:35:34,820 --> 00:35:39,140
process is probably<font color="#CCCCCC"> not going to live</font>

643
00:35:36,440 --> 00:35:41,690
<font color="#CCCCCC">very long and it's</font><font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> suspicious</font>

644
00:35:39,140 --> 00:35:43,359
driver telling<font color="#CCCCCC"> its system and all kinds</font>

645
00:35:41,690 --> 00:35:45,490
of other<font color="#E5E5E5"> reasons so</font>

646
00:35:43,360 --> 00:35:49,210
usually<font color="#CCCCCC"> a next step will be to migrate</font>

647
00:35:45,490 --> 00:35:50,410
to<font color="#E5E5E5"> some somewhere else and using this</font>

648
00:35:49,210 --> 00:35:54,160
technique<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> need to migrate</font>

649
00:35:50,410 --> 00:35:58,390
because<font color="#CCCCCC"> you're already running in</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> a</font>

650
00:35:54,160 --> 00:36:04,299
process and<font color="#CCCCCC"> from our test you can also</font>

651
00:35:58,390 --> 00:36:06,940
target<font color="#E5E5E5"> protected processes</font><font color="#CCCCCC"> possible</font>

652
00:36:04,300 --> 00:36:08,980
mitigation is to use um CI<font color="#E5E5E5"> which</font>

653
00:36:06,940 --> 00:36:12,340
effectively means<font color="#E5E5E5"> that the prototype</font>

654
00:36:08,980 --> 00:36:16,030
<font color="#E5E5E5">pages of</font><font color="#CCCCCC"> usermod processes cannot be</font>

655
00:36:12,340 --> 00:36:18,130
changed<font color="#E5E5E5"> because actually generally code</font>

656
00:36:16,030 --> 00:36:20,860
cannot be changed because it's like<font color="#CCCCCC"> km</font>

657
00:36:18,130 --> 00:36:23,860
<font color="#CCCCCC">CI just in user mode but this</font><font color="#E5E5E5"> is not</font>

658
00:36:20,860 --> 00:36:25,660
really a good<font color="#E5E5E5"> solution</font><font color="#CCCCCC"> because at least</font>

659
00:36:23,860 --> 00:36:27,490
<font color="#E5E5E5">to our knowledge there is not a single</font>

660
00:36:25,660 --> 00:36:29,950
<font color="#E5E5E5">organization that can actually work</font><font color="#CCCCCC"> with</font>

661
00:36:27,490 --> 00:36:35,770
this<font color="#E5E5E5"> because it requires pretty much</font>

662
00:36:29,950 --> 00:36:44,230
every code running<font color="#E5E5E5"> to be signed so we</font>

663
00:36:35,770 --> 00:36:48,040
don't see<font color="#CCCCCC"> that</font><font color="#E5E5E5"> actual solution and other</font>

664
00:36:44,230 --> 00:36:53,110
possibilities to prevent modification to

665
00:36:48,040 --> 00:36:56,860
prototype pages this should be<font color="#E5E5E5"> not that</font>

666
00:36:53,110 --> 00:37:00,850
<font color="#E5E5E5">hard to do because</font><font color="#CCCCCC"> VBA so it does that</font>

667
00:36:56,860 --> 00:37:03,400
<font color="#CCCCCC">for</font><font color="#E5E5E5"> code that is shared with</font><font color="#CCCCCC"> video 1 so</font>

668
00:37:00,850 --> 00:37:05,650
at<font color="#CCCCCC"> least for the way we implant</font>

669
00:37:03,400 --> 00:37:13,660
implemented the technique in this case

670
00:37:05,650 --> 00:37:17,650
it<font color="#E5E5E5"> should be a good solution so even</font>

671
00:37:13,660 --> 00:37:21,759
with all mitigations walking<font color="#E5E5E5"> it's still</font>

672
00:37:17,650 --> 00:37:26,730
possible to<font color="#CCCCCC"> write a little really simple</font>

673
00:37:21,760 --> 00:37:29,620
<font color="#CCCCCC">I persist to current mitigations</font>

674
00:37:26,730 --> 00:37:35,800
<font color="#CCCCCC">we checked in</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> also works on</font><font color="#E5E5E5"> RS 5</font>

675
00:37:29,620 --> 00:37:37,870
and latest<font color="#CCCCCC"> insider build</font><font color="#E5E5E5"> and that said</font>

676
00:37:35,800 --> 00:37:40,450
we think Microsoft<font color="#E5E5E5"> is doing</font><font color="#CCCCCC"> a job in</font>

677
00:37:37,870 --> 00:37:43,859
<font color="#CCCCCC">developing new mitigations</font><font color="#E5E5E5"> it definitely</font>

678
00:37:40,450 --> 00:37:46,990
makes exploitation harder but still

679
00:37:43,860 --> 00:37:49,650
<font color="#CCCCCC">holds there we suggested some of the</font>

680
00:37:46,990 --> 00:37:54,279
mitigations to<font color="#E5E5E5"> Microsoft we didn't get</font>

681
00:37:49,650 --> 00:37:56,120
expunged yet<font color="#CCCCCC"> we also think that it can</font>

682
00:37:54,280 --> 00:37:59,810
<font color="#E5E5E5">be useful to even when</font>

683
00:37:56,120 --> 00:38:03,200
<font color="#CCCCCC">mci is not</font><font color="#E5E5E5"> enabled because you don't</font>

684
00:37:59,810 --> 00:38:05,570
need<font color="#E5E5E5"> to find useful candle pointers or</font>

685
00:38:03,200 --> 00:38:10,189
function pointers to finish exploitation

686
00:38:05,570 --> 00:38:13,040
<font color="#CCCCCC">or anything like</font><font color="#E5E5E5"> that and it makes it</font>

687
00:38:10,190 --> 00:38:17,870
makes things easier<font color="#CCCCCC"> and even if</font>

688
00:38:13,040 --> 00:38:21,350
mitigations like set which is in tells

689
00:38:17,870 --> 00:38:24,049
how the<font color="#E5E5E5"> enforced control flow integrity</font>

690
00:38:21,350 --> 00:38:25,940
was<font color="#E5E5E5"> working it would still</font><font color="#CCCCCC"> work because</font>

691
00:38:24,050 --> 00:38:28,940
you don't<font color="#CCCCCC"> really need to mess with the</font>

692
00:38:25,940 --> 00:38:34,550
control flow<font color="#E5E5E5"> you just write your code</font>

693
00:38:28,940 --> 00:38:36,470
and it will<font color="#E5E5E5"> work and</font><font color="#CCCCCC"> you can also use</font>

694
00:38:34,550 --> 00:38:39,200
those<font color="#E5E5E5"> tricks and other operating systems</font>

695
00:38:36,470 --> 00:38:41,810
it's not really limited to<font color="#CCCCCC"> Windows we</font>

696
00:38:39,200 --> 00:38:43,580
just used it<font color="#E5E5E5"> on</font><font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> because it was</font>

697
00:38:41,810 --> 00:38:47,150
the<font color="#E5E5E5"> most challenging in order to</font>

698
00:38:43,580 --> 00:38:50,240
probably<font color="#CCCCCC"> bypassed</font><font color="#E5E5E5"> dis mitigations</font><font color="#CCCCCC"> the</font>

699
00:38:47,150 --> 00:38:55,850
same should walk in<font color="#CCCCCC"> linux and</font><font color="#E5E5E5"> our six as</font>

700
00:38:50,240 --> 00:39:01,479
<font color="#CCCCCC">well for example and that's pretty</font><font color="#E5E5E5"> much</font>

701
00:38:55,850 --> 00:39:01,480
<font color="#E5E5E5">it</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> if there are any</font><font color="#CCCCCC"> questions</font>

702
00:39:08,180 --> 00:39:11,940
[Applause]

703
00:39:15,619 --> 00:39:22,279
first thanks for<font color="#E5E5E5"> your talk I enjoyed it</font>

704
00:39:18,779 --> 00:39:25,680
a lot<font color="#CCCCCC"> regarding the need</font><font color="#E5E5E5"> for the</font>

705
00:39:22,279 --> 00:39:29,819
synchronization among instances<font color="#CCCCCC"> this</font>

706
00:39:25,680 --> 00:39:32,819
isn't a<font color="#E5E5E5"> mitigation or but wouldn't the</font>

707
00:39:29,819 --> 00:39:35,369
use of<font color="#CCCCCC"> OS level synchronization</font>

708
00:39:32,819 --> 00:39:38,009
primitives<font color="#E5E5E5"> IPC things make</font><font color="#CCCCCC"> it an easy</font>

709
00:39:35,369 --> 00:39:42,420
target<font color="#E5E5E5"> for an adaptive IDs to detect</font>

710
00:39:38,009 --> 00:39:44,009
that<font color="#E5E5E5"> the exploit was going on unexpected</font>

711
00:39:42,420 --> 00:39:46,380
semaphore is being created<font color="#CCCCCC"> that weren't</font>

712
00:39:44,009 --> 00:39:52,140
part of<font color="#E5E5E5"> the pattern</font><font color="#CCCCCC"> that that was</font>

713
00:39:46,380 --> 00:39:53,999
expected<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> seen no just just to</font>

714
00:39:52,140 --> 00:39:58,170
detect that the system is being

715
00:39:53,999 --> 00:40:04,399
exploited and isolated intrusion

716
00:39:58,170 --> 00:40:24,930
detection<font color="#E5E5E5"> not not mitigation yeah not</font>

717
00:40:04,400 --> 00:40:27,079
prevention<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> there questions there's</font>

718
00:40:24,930 --> 00:40:27,078
one

719
00:40:30,200 --> 00:40:36,868
why<font color="#E5E5E5"> can the process</font><font color="#CCCCCC"> running in user mode</font>

720
00:40:33,710 --> 00:40:42,030
<font color="#CCCCCC">right to the table</font><font color="#E5E5E5"> entries and actually</font>

721
00:40:36,869 --> 00:40:44,700
set it to to do the<font color="#E5E5E5"> copyrights should</font>

722
00:40:42,030 --> 00:40:48,510
<font color="#CCCCCC">that</font><font color="#E5E5E5"> be protected and only the</font><font color="#CCCCCC"> colonel</font>

723
00:40:44,700 --> 00:41:00,890
during the memory management be able to

724
00:40:48,510 --> 00:41:05,339
modify<font color="#E5E5E5"> that yeah just because otherwise</font>

725
00:41:00,890 --> 00:41:09,839
things like this<font color="#CCCCCC"> would cause</font><font color="#E5E5E5"> security</font>

726
00:41:05,339 --> 00:41:13,288
<font color="#CCCCCC">boundaries so the</font><font color="#E5E5E5"> operating system uses</font>

727
00:41:09,839 --> 00:41:16,349
it to prevent such things<font color="#E5E5E5"> I mean the</font>

728
00:41:13,289 --> 00:41:20,539
copy-on-write is just done to<font color="#E5E5E5"> preserve</font>

729
00:41:16,349 --> 00:41:20,539
the optimization<font color="#E5E5E5"> of memory</font>

730
00:41:27,910 --> 00:41:30,928
[Music]

731
00:41:35,420 --> 00:41:42,750
now I'm<font color="#CCCCCC"> wondering if a viable detection</font>

732
00:41:38,400 --> 00:41:46,830
from<font color="#E5E5E5"> user space would</font><font color="#CCCCCC"> be if you could</font><font color="#E5E5E5"> if</font>

733
00:41:42,750 --> 00:41:50,670
you<font color="#CCCCCC"> could detect that the page table was</font>

734
00:41:46,830 --> 00:41:54,060
being shared<font color="#E5E5E5"> it was not write copy by</font>

735
00:41:50,670 --> 00:41:56,580
may be doing<font color="#E5E5E5"> dummy writes in two places</font>

736
00:41:54,060 --> 00:41:59,220
<font color="#E5E5E5">where you know you know you should</font>

737
00:41:56,580 --> 00:42:00,840
receive a write copy<font color="#CCCCCC"> your own private</font>

738
00:41:59,220 --> 00:42:02,129
copy in your process<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> wondering if</font>

739
00:42:00,840 --> 00:42:07,970
there's a<font color="#CCCCCC"> way to detect</font><font color="#E5E5E5"> this somewhere</font>

740
00:42:02,130 --> 00:42:11,910
there from user mode<font color="#CCCCCC"> well we don't have</font>

741
00:42:07,970 --> 00:42:14,009
we didn't have any<font color="#E5E5E5"> idea how to detect it</font>

742
00:42:11,910 --> 00:42:18,480
solely from user mode<font color="#E5E5E5"> you you can detect</font>

743
00:42:14,010 --> 00:42:22,230
<font color="#E5E5E5">that code most modified if you but the</font>

744
00:42:18,480 --> 00:42:25,620
problem is to know when to<font color="#CCCCCC"> check it well</font>

745
00:42:22,230 --> 00:42:27,600
to check it exactly<font color="#CCCCCC"> I mean we use the</font>

746
00:42:25,620 --> 00:42:30,450
specific<font color="#E5E5E5"> DLL but it can be any</font><font color="#CCCCCC"> other</font>

747
00:42:27,600 --> 00:42:34,710
dealer and you also need to<font color="#CCCCCC"> know when to</font>

748
00:42:30,450 --> 00:42:37,830
<font color="#E5E5E5">check it this is not there is no some</font>

749
00:42:34,710 --> 00:42:40,490
kind<font color="#CCCCCC"> of notification that you can use to</font>

750
00:42:37,830 --> 00:42:40,490
know when<font color="#CCCCCC"> to do it</font>

751
00:42:45,710 --> 00:42:51,070
<font color="#E5E5E5">okay thank you</font><font color="#CCCCCC"> very much</font><font color="#E5E5E5"> for your guys</font>

752
00:42:47,840 --> 00:42:51,070
talk<font color="#E5E5E5"> appreciate</font><font color="#CCCCCC"> it</font>

