1
00:00:00,030 --> 00:00:03,210
so just to<font color="#CCCCCC"> start off</font><font color="#E5E5E5"> a little bit about</font>

2
00:00:02,070 --> 00:00:05,670
myself

3
00:00:03,210 --> 00:00:07,200
my name is<font color="#CCCCCC"> michael jenna raucous if you</font>

4
00:00:05,670 --> 00:00:10,879
can't tell from<font color="#CCCCCC"> my accent I'm from</font>

5
00:00:07,200 --> 00:00:13,559
Australia<font color="#CCCCCC"> I started a</font><font color="#E5E5E5"> company recently</font>

6
00:00:10,880 --> 00:00:15,240
<font color="#CCCCCC">asset known not gonna</font><font color="#E5E5E5"> talk about</font><font color="#CCCCCC"> it cuz</font>

7
00:00:13,559 --> 00:00:16,830
it's not<font color="#E5E5E5"> this kind of not that kind of</font>

8
00:00:15,240 --> 00:00:19,439
con but if you want to chat to me<font color="#E5E5E5"> about</font>

9
00:00:16,830 --> 00:00:21,419
it afterwards that's<font color="#E5E5E5"> cool before</font><font color="#CCCCCC"> that I</font>

10
00:00:19,439 --> 00:00:24,810
was the<font color="#CCCCCC"> director of</font><font color="#E5E5E5"> spider labs in Asia</font>

11
00:00:21,420 --> 00:00:28,590
<font color="#E5E5E5">PAC spoken a bunch of conferences before</font>

12
00:00:24,810 --> 00:00:32,460
mostly on mobile stuff around<font color="#E5E5E5"> the way</font><font color="#CCCCCC"> I</font>

13
00:00:28,590 --> 00:00:34,350
also<font color="#CCCCCC"> organized a much more disorganized</font>

14
00:00:32,460 --> 00:00:38,280
conference than this in<font color="#CCCCCC"> Australia called</font>

15
00:00:34,350 --> 00:00:41,579
<font color="#CCCCCC">Tuscon and</font><font color="#E5E5E5"> also local meetup in Brisbane</font>

16
00:00:38,280 --> 00:00:45,390
<font color="#CCCCCC">and</font><font color="#E5E5E5"> for anybody who's part of duck sec i</font>

17
00:00:41,579 --> 00:00:47,460
am a flat<font color="#E5E5E5"> tuck enthusiast i have a few</font>

18
00:00:45,390 --> 00:00:49,320
beers and<font color="#CCCCCC"> i'll tell</font><font color="#E5E5E5"> you about that cool</font>

19
00:00:47,460 --> 00:00:50,850
<font color="#E5E5E5">so just a bit of an overview of what</font>

20
00:00:49,320 --> 00:00:53,699
we're<font color="#CCCCCC"> going to talk about today and and</font>

21
00:00:50,850 --> 00:00:55,980
really where this talk is coming from<font color="#CCCCCC"> so</font>

22
00:00:53,699 --> 00:00:57,570
it's just a bit<font color="#E5E5E5"> of a crash course</font><font color="#CCCCCC"> into</font>

23
00:00:55,980 --> 00:01:00,629
messing with the<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> of iOS</font>

24
00:00:57,570 --> 00:01:02,969
applications<font color="#CCCCCC"> mostly</font><font color="#E5E5E5"> for like pen testing</font>

25
00:01:00,629 --> 00:01:05,369
and bug bounty purposes right<font color="#CCCCCC"> I did a</font>

26
00:01:02,969 --> 00:01:07,490
similar presentation<font color="#E5E5E5"> at a local</font>

27
00:01:05,369 --> 00:01:10,049
conference in Brisbane<font color="#CCCCCC"> a few years ago</font>

28
00:01:07,490 --> 00:01:11,699
<font color="#CCCCCC">but what has really</font><font color="#E5E5E5"> changed</font><font color="#CCCCCC"> in sense</font><font color="#E5E5E5"> so</font>

29
00:01:10,049 --> 00:01:14,549
you know the big one<font color="#E5E5E5"> obviously is Swift</font>

30
00:01:11,700 --> 00:01:15,930
was introduced<font color="#CCCCCC"> and you know that's</font>

31
00:01:14,549 --> 00:01:20,100
changed a lot<font color="#E5E5E5"> of things</font>

32
00:01:15,930 --> 00:01:23,280
<font color="#CCCCCC">Apple</font><font color="#E5E5E5"> has pushed 64-bit only as well so</font>

33
00:01:20,100 --> 00:01:27,059
I forget which<font color="#E5E5E5"> exact iOS version they</font>

34
00:01:23,280 --> 00:01:28,590
stop supporting<font color="#E5E5E5"> 32-bit apps but you know</font>

35
00:01:27,060 --> 00:01:30,750
they<font color="#E5E5E5"> don't anymore</font>

36
00:01:28,590 --> 00:01:33,060
there's also been<font color="#E5E5E5"> a rise in sort of</font>

37
00:01:30,750 --> 00:01:35,189
cross-platform frameworks<font color="#CCCCCC"> so-so</font>

38
00:01:33,060 --> 00:01:37,740
frameworks that allow you to<font color="#E5E5E5"> develop in</font>

39
00:01:35,189 --> 00:01:39,210
a particular<font color="#CCCCCC"> language and then access</font>

40
00:01:37,740 --> 00:01:40,829
<font color="#E5E5E5">native functionality across multiple</font>

41
00:01:39,210 --> 00:01:43,500
platforms<font color="#CCCCCC"> without</font><font color="#E5E5E5"> having to write</font>

42
00:01:40,829 --> 00:01:45,179
separate native apps<font color="#CCCCCC"> and the tooling has</font>

43
00:01:43,500 --> 00:01:47,640
evolved<font color="#E5E5E5"> and we'll discuss in the</font>

44
00:01:45,180 --> 00:01:50,729
presentation it's also in<font color="#E5E5E5"> some areas not</font>

45
00:01:47,640 --> 00:01:52,350
really kept up<font color="#E5E5E5"> so it's really</font><font color="#CCCCCC"> just an</font>

46
00:01:50,729 --> 00:01:54,420
updated presentation if you've seen that

47
00:01:52,350 --> 00:01:56,669
<font color="#CCCCCC">one</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> online or</font><font color="#E5E5E5"> whatever it is</font><font color="#CCCCCC"> an</font>

48
00:01:54,420 --> 00:01:59,189
<font color="#CCCCCC">updated presentation to cover cover this</font>

49
00:01:56,670 --> 00:02:03,299
<font color="#CCCCCC">it's focused on iOS app testing so like</font>

50
00:01:59,189 --> 00:02:05,398
<font color="#CCCCCC">Nomad iOS con holiday sorry I wouldn't</font>

51
00:02:03,299 --> 00:02:06,820
<font color="#CCCCCC">be presenting it to you</font><font color="#E5E5E5"> probably if I</font>

52
00:02:05,399 --> 00:02:10,869
had<font color="#E5E5E5"> that</font>

53
00:02:06,820 --> 00:02:13,239
cool<font color="#E5E5E5"> so setting up your environment</font><font color="#CCCCCC"> so I</font>

54
00:02:10,869 --> 00:02:14,380
<font color="#E5E5E5">go into too much detail about this but</font>

55
00:02:13,240 --> 00:02:15,520
<font color="#CCCCCC">there are putting of guides on</font><font color="#E5E5E5"> the</font>

56
00:02:14,380 --> 00:02:17,410
<font color="#E5E5E5">Internet</font>

57
00:02:15,520 --> 00:02:19,570
and because we've got<font color="#CCCCCC"> limited time</font><font color="#E5E5E5"> I</font>

58
00:02:17,410 --> 00:02:22,660
honestly<font color="#CCCCCC"> haven't signed</font><font color="#E5E5E5"> this talk I was</font>

59
00:02:19,570 --> 00:02:25,150
working all night on<font color="#CCCCCC"> it so we'll see</font><font color="#E5E5E5"> how</font>

60
00:02:22,660 --> 00:02:27,040
we go<font color="#CCCCCC"> but the main tools that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> will</font>

61
00:02:25,150 --> 00:02:29,290
<font color="#CCCCCC">need and</font><font color="#E5E5E5"> we'll cover it in the</font>

62
00:02:27,040 --> 00:02:32,980
<font color="#E5E5E5">presentation</font><font color="#CCCCCC"> it's obviously a jailbroken</font>

63
00:02:29,290 --> 00:02:35,650
device<font color="#E5E5E5"> currently up to iOS 11.3</font><font color="#CCCCCC"> I</font>

64
00:02:32,980 --> 00:02:37,899
believe can be jailbroken<font color="#CCCCCC"> you know some</font>

65
00:02:35,650 --> 00:02:38,860
<font color="#CCCCCC">things</font><font color="#E5E5E5"> you can do on a gel device it's</font>

66
00:02:37,900 --> 00:02:39,510
<font color="#E5E5E5">not as easy</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is not</font>

67
00:02:38,860 --> 00:02:43,959
<font color="#E5E5E5">straightforward</font>

68
00:02:39,510 --> 00:02:44,950
<font color="#CCCCCC">and you can't do it many</font><font color="#E5E5E5"> things but but</font>

69
00:02:43,959 --> 00:02:46,480
yeah<font color="#E5E5E5"> for the purpose of this</font>

70
00:02:44,950 --> 00:02:49,179
presentation we'll be using a<font color="#E5E5E5"> jailbroken</font>

71
00:02:46,480 --> 00:02:50,019
device<font color="#CCCCCC"> terms of some</font><font color="#E5E5E5"> of the tools that</font>

72
00:02:49,180 --> 00:02:54,160
<font color="#CCCCCC">we'll be using</font>

73
00:02:50,020 --> 00:02:57,430
<font color="#CCCCCC">freida script mobile substrate</font><font color="#E5E5E5"> class</font>

74
00:02:54,160 --> 00:03:00,100
<font color="#CCCCCC">time ssh disassembler of some kind</font>

75
00:02:57,430 --> 00:03:02,590
<font color="#E5E5E5">essentially all you need there's a bunch</font>

76
00:03:00,100 --> 00:03:05,140
of recent tools that are<font color="#E5E5E5"> really good so</font>

77
00:03:02,590 --> 00:03:07,750
like objection<font color="#E5E5E5"> by</font><font color="#CCCCCC"> by sense post and</font>

78
00:03:05,140 --> 00:03:10,570
needle by<font color="#CCCCCC"> MWR</font><font color="#E5E5E5"> they're really nice and</font>

79
00:03:07,750 --> 00:03:13,090
<font color="#CCCCCC">they are abstract away</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of what I'm</font>

80
00:03:10,570 --> 00:03:15,760
<font color="#E5E5E5">talking about here and make it you know</font>

81
00:03:13,090 --> 00:03:16,959
<font color="#E5E5E5">easier</font><font color="#CCCCCC"> to use but you know I'm gonna</font>

82
00:03:15,760 --> 00:03:19,179
discuss a<font color="#CCCCCC"> little bit</font><font color="#E5E5E5"> more of the</font>

83
00:03:16,959 --> 00:03:20,920
techniques and<font color="#E5E5E5"> at a lower level</font><font color="#CCCCCC"> so you</font>

84
00:03:19,180 --> 00:03:22,810
guys can<font color="#E5E5E5"> get a feel for you know how you</font>

85
00:03:20,920 --> 00:03:24,820
could do<font color="#E5E5E5"> it</font><font color="#CCCCCC"> yourself but also how those</font>

86
00:03:22,810 --> 00:03:29,590
sort of tools work if you if you do use

87
00:03:24,820 --> 00:03:32,380
those cool<font color="#CCCCCC"> so start with objective-c</font>

88
00:03:29,590 --> 00:03:34,870
apps<font color="#E5E5E5"> so most I Oh s apps are still</font>

89
00:03:32,380 --> 00:03:37,329
written<font color="#E5E5E5"> in</font><font color="#CCCCCC"> objective-c</font><font color="#E5E5E5"> or how at least</font>

90
00:03:34,870 --> 00:03:38,950
<font color="#CCCCCC">have some</font><font color="#E5E5E5"> objective-c component the</font>

91
00:03:37,329 --> 00:03:39,930
trend is definitely<font color="#E5E5E5"> moving away from</font>

92
00:03:38,950 --> 00:03:42,720
<font color="#E5E5E5">objective-c</font>

93
00:03:39,930 --> 00:03:45,160
<font color="#CCCCCC">you know particularly for consumer apps</font>

94
00:03:42,720 --> 00:03:46,510
<font color="#E5E5E5">but object to see frameworks will still</font>

95
00:03:45,160 --> 00:03:48,459
be<font color="#CCCCCC"> around for a</font><font color="#E5E5E5"> while</font>

96
00:03:46,510 --> 00:03:50,920
apples<font color="#E5E5E5"> got a bunch of internal</font>

97
00:03:48,459 --> 00:03:53,440
frameworks that<font color="#E5E5E5"> they you know</font><font color="#CCCCCC"> supplies</font>

98
00:03:50,920 --> 00:03:55,690
<font color="#E5E5E5">part of iOS that aren't likely to be</font>

99
00:03:53,440 --> 00:03:57,579
updated<font color="#CCCCCC"> to</font><font color="#E5E5E5"> Swift anytime soon</font>

100
00:03:55,690 --> 00:04:01,810
<font color="#E5E5E5">so it's still something</font><font color="#CCCCCC"> that you should</font>

101
00:03:57,579 --> 00:04:03,610
know<font color="#E5E5E5"> when you are doing I Oh s packing</font>

102
00:04:01,810 --> 00:04:05,920
right that's not that<font color="#CCCCCC"> bad a lot</font><font color="#E5E5E5"> of</font>

103
00:04:03,610 --> 00:04:07,060
people<font color="#E5E5E5"> don't like objective-c but you</font>

104
00:04:05,920 --> 00:04:11,048
know it's<font color="#E5E5E5"> not it's not too bad</font><font color="#CCCCCC"> once you</font>

105
00:04:07,060 --> 00:04:13,170
get<font color="#CCCCCC"> used to</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> so that's a bit blurry so</font>

106
00:04:11,049 --> 00:04:15,220
sorry about<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we're using VGA but</font>

107
00:04:13,170 --> 00:04:17,168
here's just<font color="#E5E5E5"> like a little bit of</font><font color="#CCCCCC"> a</font>

108
00:04:15,220 --> 00:04:20,250
primer on the objective-c thing<font color="#CCCCCC"> it's</font>

109
00:04:17,168 --> 00:04:21,779
<font color="#CCCCCC">syntax so on the left here</font><font color="#E5E5E5"> you've got</font>

110
00:04:20,250 --> 00:04:24,900
you've got your header file with<font color="#CCCCCC"> the</font>

111
00:04:21,779 --> 00:04:28,289
<font color="#CCCCCC">interface</font><font color="#E5E5E5"> you can see there there's the</font>

112
00:04:24,900 --> 00:04:30,270
<font color="#E5E5E5">@interface keyword</font><font color="#CCCCCC"> you've got the the</font>

113
00:04:28,290 --> 00:04:32,250
class name<font color="#E5E5E5"> and after the colon you've</font>

114
00:04:30,270 --> 00:04:35,000
got the<font color="#CCCCCC"> superclass</font><font color="#E5E5E5"> so so what are</font>

115
00:04:32,250 --> 00:04:37,560
inherent from<font color="#CCCCCC"> you've got your properties</font>

116
00:04:35,000 --> 00:04:38,970
<font color="#CCCCCC">so it's just you know property some</font>

117
00:04:37,560 --> 00:04:41,820
characteristics you don't really need to

118
00:04:38,970 --> 00:04:44,490
<font color="#E5E5E5">bother with those</font><font color="#CCCCCC"> the type and</font><font color="#E5E5E5"> then the</font>

119
00:04:41,820 --> 00:04:46,620
<font color="#CCCCCC">property</font><font color="#E5E5E5"> name and then you've got your</font>

120
00:04:44,490 --> 00:04:48,510
your class methods and your instance

121
00:04:46,620 --> 00:04:52,080
methods<font color="#E5E5E5"> so the class methods are denoted</font>

122
00:04:48,510 --> 00:04:55,099
by the plus and the the instance methods

123
00:04:52,080 --> 00:04:57,479
<font color="#E5E5E5">are notice denoted by the</font><font color="#CCCCCC"> dash and</font>

124
00:04:55,100 --> 00:04:59,820
you've got in the brackets you've got

125
00:04:57,480 --> 00:05:02,490
the return<font color="#E5E5E5"> type and then you've got the</font>

126
00:04:59,820 --> 00:05:05,159
you've got the function name<font color="#CCCCCC"> you can see</font>

127
00:05:02,490 --> 00:05:08,160
here for the for the instance method

128
00:05:05,160 --> 00:05:10,620
<font color="#CCCCCC">with parameter there's the that's the</font>

129
00:05:08,160 --> 00:05:12,690
syntax<font color="#CCCCCC"> if you've got parameters an</font>

130
00:05:10,620 --> 00:05:14,460
interesting<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> to know and it will</font>

131
00:05:12,690 --> 00:05:17,490
come into play a<font color="#E5E5E5"> little bit later on</font>

132
00:05:14,460 --> 00:05:20,640
<font color="#E5E5E5">it's pretty common</font><font color="#CCCCCC"> as a design pattern</font>

133
00:05:17,490 --> 00:05:23,600
<font color="#E5E5E5">in</font><font color="#CCCCCC"> Objective C apps and or iOS</font><font color="#E5E5E5"> apps in</font>

134
00:05:20,640 --> 00:05:26,849
<font color="#CCCCCC">general to</font><font color="#E5E5E5"> have the sort of the</font><font color="#CCCCCC"> first</font>

135
00:05:23,600 --> 00:05:28,740
that's the function name<font color="#E5E5E5"> indicate what</font>

136
00:05:26,850 --> 00:05:30,540
the first parameter is so this is just<font color="#CCCCCC"> a</font>

137
00:05:28,740 --> 00:05:34,890
really contrived example but<font color="#E5E5E5"> it might be</font>

138
00:05:30,540 --> 00:05:37,710
I don't<font color="#CCCCCC"> know login with user and then</font>

139
00:05:34,890 --> 00:05:39,120
the parameter will be<font color="#E5E5E5"> like a user you</font>

140
00:05:37,710 --> 00:05:40,919
know something related to<font color="#E5E5E5"> the user or</font>

141
00:05:39,120 --> 00:05:42,990
<font color="#E5E5E5">whatever</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> pretty common</font>

142
00:05:40,919 --> 00:05:44,430
and then you've got<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> right-hand</font>

143
00:05:42,990 --> 00:05:47,430
side<font color="#E5E5E5"> you just got the implementation so</font>

144
00:05:44,430 --> 00:05:48,720
it looks pretty<font color="#CCCCCC"> much the</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> you with</font>

145
00:05:47,430 --> 00:05:51,090
the properties you synthesize<font color="#E5E5E5"> the</font>

146
00:05:48,720 --> 00:05:52,740
properties so<font color="#CCCCCC"> that all that does is at</font>

147
00:05:51,090 --> 00:05:54,780
compile time it just generates<font color="#E5E5E5"> the</font>

148
00:05:52,740 --> 00:05:57,060
getter and setter<font color="#CCCCCC"> methods for</font><font color="#E5E5E5"> that</font>

149
00:05:54,780 --> 00:06:01,530
property<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you don't have to write it</font>

150
00:05:57,060 --> 00:06:02,850
<font color="#E5E5E5">out yourself</font><font color="#CCCCCC"> then you've</font><font color="#E5E5E5"> got you know</font>

151
00:06:01,530 --> 00:06:05,010
your your class methods and your

152
00:06:02,850 --> 00:06:07,200
instance methods pretty straightforward

153
00:06:05,010 --> 00:06:09,599
it doesn't look too too different right

154
00:06:07,200 --> 00:06:12,320
<font color="#E5E5E5">that's that's sort of the basic syntax</font>

155
00:06:09,600 --> 00:06:14,850
<font color="#CCCCCC">of objective-c</font>

156
00:06:12,320 --> 00:06:20,040
<font color="#E5E5E5">you really don't need to</font><font color="#CCCCCC"> know all that</font>

157
00:06:14,850 --> 00:06:21,900
<font color="#E5E5E5">much about testing tasks right so just</font>

158
00:06:20,040 --> 00:06:23,850
<font color="#E5E5E5">like basic object-oriented principles</font>

159
00:06:21,900 --> 00:06:25,380
<font color="#E5E5E5">like the difference between a class and</font>

160
00:06:23,850 --> 00:06:28,440
object difference between<font color="#E5E5E5"> a like a class</font>

161
00:06:25,380 --> 00:06:30,820
method and an instance method<font color="#E5E5E5"> a very</font>

162
00:06:28,440 --> 00:06:35,260
like rudimentary understanding of

163
00:06:30,820 --> 00:06:37,390
the<font color="#CCCCCC"> MVC design</font><font color="#E5E5E5"> pattern iOS apps</font><font color="#CCCCCC"> adopt</font>

164
00:06:35,260 --> 00:06:39,340
this pattern<font color="#E5E5E5"> not all of them there</font><font color="#CCCCCC"> are</font>

165
00:06:37,390 --> 00:06:42,280
you know<font color="#E5E5E5"> some hipsters who like to do</font>

166
00:06:39,340 --> 00:06:44,380
like<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know reactive kind of stuff but</font>

167
00:06:42,280 --> 00:06:46,000
<font color="#CCCCCC">you</font><font color="#E5E5E5"> know for the most part</font><font color="#CCCCCC"> your Apple</font>

168
00:06:44,380 --> 00:06:47,469
pushes as a standard you know<font color="#E5E5E5"> an MVC</font>

169
00:06:46,000 --> 00:06:49,120
design<font color="#E5E5E5"> pattern</font><font color="#CCCCCC"> and when I say</font>

170
00:06:47,470 --> 00:06:50,980
rudimentary I really mean rudimentary

171
00:06:49,120 --> 00:06:54,280
like if you just think of you know<font color="#E5E5E5"> the M</font>

172
00:06:50,980 --> 00:06:57,310
being<font color="#E5E5E5"> the model right which is data</font><font color="#CCCCCC"> and</font>

173
00:06:54,280 --> 00:06:59,590
you know V being the view which is like

174
00:06:57,310 --> 00:07:01,300
the presentation UI and C being the

175
00:06:59,590 --> 00:07:03,940
<font color="#E5E5E5">control which is kind of logic like</font>

176
00:07:01,300 --> 00:07:05,380
that's if you're gonna get<font color="#E5E5E5"> that then you</font>

177
00:07:03,940 --> 00:07:07,060
<font color="#CCCCCC">know you can</font><font color="#E5E5E5"> kind of understand what's</font>

178
00:07:05,380 --> 00:07:09,550
going on from from you<font color="#E5E5E5"> know what we're</font>

179
00:07:07,060 --> 00:07:11,260
going to discuss<font color="#E5E5E5"> you know how to call</font>

180
00:07:09,550 --> 00:07:12,910
<font color="#CCCCCC">methods the syntax to call methods we'll</font>

181
00:07:11,260 --> 00:07:15,400
go over<font color="#CCCCCC"> that and how</font><font color="#E5E5E5"> to sort</font><font color="#CCCCCC"> of read and</font>

182
00:07:12,910 --> 00:07:18,250
<font color="#CCCCCC">write variables</font><font color="#E5E5E5"> and then just that basic</font>

183
00:07:15,400 --> 00:07:19,870
<font color="#E5E5E5">syntax you know class</font><font color="#CCCCCC"> syntax that</font><font color="#E5E5E5"> we saw</font>

184
00:07:18,250 --> 00:07:20,830
in the previous slide<font color="#E5E5E5"> so you don't</font>

185
00:07:19,870 --> 00:07:23,050
really need to<font color="#CCCCCC"> know that</font><font color="#E5E5E5"> much you don't</font>

186
00:07:20,830 --> 00:07:26,109
<font color="#CCCCCC">need to be an expert programmer to be</font>

187
00:07:23,050 --> 00:07:28,540
able<font color="#E5E5E5"> to be dangerous for for this sort</font>

188
00:07:26,110 --> 00:07:31,630
of<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> so let's get into reverse</font>

189
00:07:28,540 --> 00:07:34,180
engineering<font color="#CCCCCC"> objective-c apps so</font>

190
00:07:31,630 --> 00:07:36,670
<font color="#E5E5E5">objective-c executables</font><font color="#CCCCCC"> need to have a</font>

191
00:07:34,180 --> 00:07:39,160
bunch of class<font color="#CCCCCC"> information in order</font><font color="#E5E5E5"> to</font>

192
00:07:36,670 --> 00:07:41,830
<font color="#CCCCCC">run and to support the dynamic features</font>

193
00:07:39,160 --> 00:07:44,440
of the<font color="#CCCCCC"> language and it's great for us as</font>

194
00:07:41,830 --> 00:07:45,969
you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> pen testers because</font><font color="#CCCCCC"> we can</font>

195
00:07:44,440 --> 00:07:48,070
extract this<font color="#CCCCCC"> information and it gives us</font>

196
00:07:45,970 --> 00:07:50,110
<font color="#E5E5E5">insight</font><font color="#CCCCCC"> into how the application is</font>

197
00:07:48,070 --> 00:07:53,409
architected<font color="#E5E5E5"> and and how it runs in how</font>

198
00:07:50,110 --> 00:07:56,140
it functions<font color="#CCCCCC"> you know for a</font><font color="#E5E5E5"> pen test or</font>

199
00:07:53,410 --> 00:07:58,150
a bug hunter<font color="#E5E5E5"> this gives you a map</font><font color="#CCCCCC"> of the</font>

200
00:07:56,140 --> 00:07:59,770
application to<font color="#E5E5E5"> help you you know with</font>

201
00:07:58,150 --> 00:08:04,299
finding<font color="#CCCCCC"> potential vulnerabilities and</font>

202
00:07:59,770 --> 00:08:06,640
you know attacking the runtime so back

203
00:08:04,300 --> 00:08:09,310
in the day class<font color="#CCCCCC"> tom said was the go-to</font>

204
00:08:06,640 --> 00:08:11,770
for this as<font color="#E5E5E5"> it had better I</font><font color="#CCCCCC"> Oh s support</font>

205
00:08:09,310 --> 00:08:13,480
than some of the alternatives<font color="#E5E5E5"> but it's</font>

206
00:08:11,770 --> 00:08:16,599
not actively develops you<font color="#CCCCCC"> can see there</font>

207
00:08:13,480 --> 00:08:19,510
like copyright 2009<font color="#E5E5E5"> so it doesn't really</font>

208
00:08:16,600 --> 00:08:23,170
work on 64-bit<font color="#E5E5E5"> apps or any kind of Swift</font>

209
00:08:19,510 --> 00:08:25,480
<font color="#E5E5E5">or mixed mixed apps so that's a bummer</font>

210
00:08:23,170 --> 00:08:27,880
<font color="#E5E5E5">hasn't really kept up but for</font>

211
00:08:25,480 --> 00:08:30,490
<font color="#CCCCCC">objective-c apps</font><font color="#E5E5E5"> the original class</font><font color="#CCCCCC"> term</font>

212
00:08:27,880 --> 00:08:32,799
<font color="#E5E5E5">utility by Steve Nygaard</font><font color="#CCCCCC"> is still</font>

213
00:08:30,490 --> 00:08:35,770
<font color="#CCCCCC">probably the best</font><font color="#E5E5E5"> it's also not really</font>

214
00:08:32,799 --> 00:08:37,750
actively<font color="#E5E5E5"> developed but</font><font color="#CCCCCC"> it still works</font>

215
00:08:35,770 --> 00:08:40,059
for<font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of pure objective-c apps it</font>

216
00:08:37,750 --> 00:08:42,990
works fine you can of course<font color="#CCCCCC"> use</font>

217
00:08:40,059 --> 00:08:45,989
something like<font color="#CCCCCC"> O'Tool which is a</font>

218
00:08:42,990 --> 00:08:49,380
you know comes with the<font color="#CCCCCC"> Mac gives you a</font>

219
00:08:45,990 --> 00:08:51,839
lot of different ways to<font color="#E5E5E5"> sort of mess</font>

220
00:08:49,380 --> 00:08:53,339
<font color="#CCCCCC">with the binary</font><font color="#E5E5E5"> and get extract</font>

221
00:08:51,839 --> 00:08:55,110
information out the binary but it's not

222
00:08:53,339 --> 00:08:57,839
<font color="#CCCCCC">presented in</font><font color="#E5E5E5"> a really like easy to</font>

223
00:08:55,110 --> 00:09:00,029
digest way<font color="#E5E5E5"> in the same</font><font color="#CCCCCC"> way that class</font>

224
00:08:57,839 --> 00:09:02,250
dump is<font color="#E5E5E5"> you could also get this</font>

225
00:09:00,029 --> 00:09:03,689
<font color="#CCCCCC">information out of a disassembler but</font>

226
00:09:02,250 --> 00:09:05,610
you know for the<font color="#E5E5E5"> first pass when you're</font>

227
00:09:03,690 --> 00:09:07,800
<font color="#E5E5E5">looking at this definitely</font><font color="#CCCCCC"> you know</font>

228
00:09:05,610 --> 00:09:09,930
class dump from from the class on

229
00:09:07,800 --> 00:09:13,140
utility<font color="#E5E5E5"> is it's really</font><font color="#CCCCCC"> the way to go</font>

230
00:09:09,930 --> 00:09:14,819
<font color="#E5E5E5">that's the command</font><font color="#CCCCCC"> that I use I'll go</font>

231
00:09:13,140 --> 00:09:17,250
<font color="#E5E5E5">through in the demo</font>

232
00:09:14,820 --> 00:09:19,560
you know what those what those sort of

233
00:09:17,250 --> 00:09:21,450
options do they're<font color="#CCCCCC"> just like</font><font color="#E5E5E5"> formatting</font>

234
00:09:19,560 --> 00:09:25,079
right<font color="#E5E5E5"> and usually I just pipe it out to</font>

235
00:09:21,450 --> 00:09:27,270
a<font color="#E5E5E5"> out put it to a a file you can see</font>

236
00:09:25,080 --> 00:09:28,709
what the dot<font color="#E5E5E5"> H extension on</font><font color="#CCCCCC"> that the</font>

237
00:09:27,270 --> 00:09:31,110
reason I do that is because when<font color="#E5E5E5"> you</font>

238
00:09:28,709 --> 00:09:33,149
load it up into a text editor<font color="#CCCCCC"> which</font>

239
00:09:31,110 --> 00:09:35,220
you'll see<font color="#E5E5E5"> it just automatically does</font>

240
00:09:33,149 --> 00:09:38,370
the syntax highlighting so that's the

241
00:09:35,220 --> 00:09:39,360
<font color="#CCCCCC">only reason I do</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> and you're</font><font color="#E5E5E5"> not</font>

242
00:09:38,370 --> 00:09:41,010
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> be able to see this but that's</font>

243
00:09:39,360 --> 00:09:42,690
<font color="#E5E5E5">fine I do have it in</font><font color="#CCCCCC"> do you have</font>

244
00:09:41,010 --> 00:09:44,250
something<font color="#E5E5E5"> in demo that's a class sample</font>

245
00:09:42,690 --> 00:09:48,360
of Instagram I was doing for<font color="#E5E5E5"> like</font><font color="#CCCCCC"> about</font>

246
00:09:44,250 --> 00:09:50,670
anything<font color="#CCCCCC"> not too long ago yeah I'll</font>

247
00:09:48,360 --> 00:09:52,410
probably<font color="#E5E5E5"> just skip that and go in in the</font>

248
00:09:50,670 --> 00:09:55,860
detail of<font color="#CCCCCC"> that and go to you know wait</font>

249
00:09:52,410 --> 00:09:57,240
<font color="#CCCCCC">for the demo and</font><font color="#E5E5E5"> I'll go through the</font>

250
00:09:55,860 --> 00:09:58,770
class<font color="#E5E5E5"> stamp and</font><font color="#CCCCCC"> you know some</font><font color="#E5E5E5"> of the</font>

251
00:09:57,240 --> 00:10:02,640
stuff that you'd look<font color="#CCCCCC"> for when you're</font>

252
00:09:58,770 --> 00:10:04,199
analyzing analyzing this stuff<font color="#CCCCCC"> so before</font>

253
00:10:02,640 --> 00:10:06,510
<font color="#E5E5E5">you can actually do any of these tasks</font>

254
00:10:04,200 --> 00:10:08,880
you need<font color="#CCCCCC"> to decrypt</font><font color="#E5E5E5"> the binary so iOS</font>

255
00:10:06,510 --> 00:10:11,520
apps that are downloaded from the App

256
00:10:08,880 --> 00:10:13,500
Store<font color="#CCCCCC"> are protected by</font><font color="#E5E5E5"> Apple's DRM and</font>

257
00:10:11,520 --> 00:10:15,600
the<font color="#E5E5E5"> binary is encrypted so</font><font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to</font>

258
00:10:13,500 --> 00:10:17,430
<font color="#E5E5E5">analyze the binary whether it's for</font>

259
00:10:15,600 --> 00:10:19,470
<font color="#CCCCCC">getting a class stamp or a disassembly</font>

260
00:10:17,430 --> 00:10:22,620
or whatever you need<font color="#E5E5E5"> to decrypt it first</font>

261
00:10:19,470 --> 00:10:24,870
<font color="#E5E5E5">right</font><font color="#CCCCCC"> the the way that you do it or</font><font color="#E5E5E5"> the</font>

262
00:10:22,620 --> 00:10:26,700
kind of methodology<font color="#CCCCCC"> it's pretty simple</font>

263
00:10:24,870 --> 00:10:28,800
<font color="#CCCCCC">you sort of work out</font><font color="#E5E5E5"> the correct offsets</font>

264
00:10:26,700 --> 00:10:32,610
for<font color="#E5E5E5"> the encrypted portion of the binary</font>

265
00:10:28,800 --> 00:10:35,219
<font color="#E5E5E5">you extract that and encrypted portion</font>

266
00:10:32,610 --> 00:10:36,660
<font color="#E5E5E5">after it's loaded at runtime</font><font color="#CCCCCC"> because</font>

267
00:10:35,220 --> 00:10:40,620
<font color="#E5E5E5">obviously it needs to be decrypted to</font>

268
00:10:36,660 --> 00:10:43,680
run<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> you take that</font><font color="#E5E5E5"> now decrypted</font>

269
00:10:40,620 --> 00:10:45,839
portion and<font color="#E5E5E5"> you shove it</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> in to the</font>

270
00:10:43,680 --> 00:10:48,300
binary<font color="#CCCCCC"> you patch it back in and you're</font>

271
00:10:45,839 --> 00:10:49,410
good<font color="#CCCCCC"> to go you can do this manually and</font>

272
00:10:48,300 --> 00:10:51,300
there's<font color="#CCCCCC"> plenty of sort of</font><font color="#E5E5E5"> guides on the</font>

273
00:10:49,410 --> 00:10:53,459
<font color="#CCCCCC">Internet to how to you know</font><font color="#E5E5E5"> how to do</font>

274
00:10:51,300 --> 00:10:55,620
this but<font color="#E5E5E5"> there's heaps of tools out</font>

275
00:10:53,459 --> 00:10:56,130
<font color="#CCCCCC">there to automate it so I</font><font color="#E5E5E5"> wouldn't</font>

276
00:10:55,620 --> 00:10:58,880
bother

277
00:10:56,130 --> 00:11:01,740
doing it manually<font color="#CCCCCC"> I prefer</font><font color="#E5E5E5"> to use clutch</font>

278
00:10:58,880 --> 00:11:03,540
for decrypting<font color="#CCCCCC"> Flannery's I guess this</font>

279
00:11:01,740 --> 00:11:05,310
is probably<font color="#E5E5E5"> the point where I</font><font color="#CCCCCC"> should say</font>

280
00:11:03,540 --> 00:11:07,890
be responsible and<font color="#E5E5E5"> say don't use this</font>

281
00:11:05,310 --> 00:11:09,630
like pirating apps there's a big warning

282
00:11:07,890 --> 00:11:12,660
<font color="#E5E5E5">when you when you go to their github</font>

283
00:11:09,630 --> 00:11:16,050
<font color="#E5E5E5">page you know not cool but it's really</font>

284
00:11:12,660 --> 00:11:17,699
<font color="#E5E5E5">useful for security analysis right so</font>

285
00:11:16,050 --> 00:11:22,109
those are the options<font color="#E5E5E5"> but really what</font>

286
00:11:17,700 --> 00:11:24,930
you want to do is the<font color="#CCCCCC"> - D option which</font>

287
00:11:22,110 --> 00:11:28,920
<font color="#E5E5E5">dumps the the bundle ID into an IPA file</font>

288
00:11:24,930 --> 00:11:31,170
<font color="#CCCCCC">you could also do</font><font color="#E5E5E5"> - B which just dumps</font>

289
00:11:28,920 --> 00:11:33,329
the binary portion so you could do<font color="#CCCCCC"> just</font>

290
00:11:31,170 --> 00:11:34,949
do the<font color="#E5E5E5"> binary for you know your your</font>

291
00:11:33,330 --> 00:11:36,660
class dump and you<font color="#CCCCCC"> know disassembly and</font>

292
00:11:34,950 --> 00:11:39,450
<font color="#E5E5E5">stuff like that but I like to get the</font>

293
00:11:36,660 --> 00:11:41,310
<font color="#E5E5E5">the whole IPA file because it also has a</font>

294
00:11:39,450 --> 00:11:42,930
bunch<font color="#E5E5E5"> of other interesting files so if</font>

295
00:11:41,310 --> 00:11:44,760
it's a<font color="#E5E5E5"> cross-platform app often they'll</font>

296
00:11:42,930 --> 00:11:46,439
have<font color="#CCCCCC"> all of those say the JavaScript</font>

297
00:11:44,760 --> 00:11:49,620
files<font color="#CCCCCC"> or you know even some of the</font>

298
00:11:46,440 --> 00:11:51,870
<font color="#E5E5E5">compiled dll's for xamarin apps and</font>

299
00:11:49,620 --> 00:11:53,280
things<font color="#CCCCCC"> like that it also has like some</font>

300
00:11:51,870 --> 00:11:55,650
interesting sort of settings<font color="#E5E5E5"> and</font>

301
00:11:53,280 --> 00:11:58,800
whatever so<font color="#E5E5E5"> it's useful in a broader</font>

302
00:11:55,650 --> 00:11:59,819
context but specifically<font color="#CCCCCC"> for what we're</font>

303
00:11:58,800 --> 00:12:01,229
going<font color="#E5E5E5"> to talk about today it's not</font>

304
00:11:59,820 --> 00:12:04,830
necessary but<font color="#E5E5E5"> that's you know it's what</font>

305
00:12:01,230 --> 00:12:06,810
I do<font color="#E5E5E5"> normally</font><font color="#CCCCCC"> on a pen test so once you</font>

306
00:12:04,830 --> 00:12:07,830
<font color="#E5E5E5">got the class done</font><font color="#CCCCCC"> the next step is</font>

307
00:12:06,810 --> 00:12:09,689
really<font color="#E5E5E5"> just to go through</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> start</font>

308
00:12:07,830 --> 00:12:12,300
analyzing the class<font color="#CCCCCC"> down</font><font color="#E5E5E5"> and seeing what</font>

309
00:12:09,690 --> 00:12:15,000
<font color="#E5E5E5">you can get out</font><font color="#CCCCCC"> of it so essentially</font>

310
00:12:12,300 --> 00:12:16,800
<font color="#E5E5E5">once you have that application</font><font color="#CCCCCC"> that the</font>

311
00:12:15,000 --> 00:12:18,300
class<font color="#CCCCCC"> dumped it becomes like a map of</font>

312
00:12:16,800 --> 00:12:20,849
<font color="#CCCCCC">the application you can</font><font color="#E5E5E5"> sort of see</font>

313
00:12:18,300 --> 00:12:22,020
<font color="#E5E5E5">where everything fits together</font><font color="#CCCCCC"> so the</font>

314
00:12:20,850 --> 00:12:24,780
first thing you want to do is sort of

315
00:12:22,020 --> 00:12:27,140
<font color="#E5E5E5">look for interesting functionality so</font>

316
00:12:24,780 --> 00:12:29,550
authentication in particular local

317
00:12:27,140 --> 00:12:30,960
authentication and<font color="#E5E5E5"> other sort of local</font>

318
00:12:29,550 --> 00:12:32,370
checks<font color="#E5E5E5"> are definitely something</font><font color="#CCCCCC"> that</font>

319
00:12:30,960 --> 00:12:34,650
though it's<font color="#E5E5E5"> interesting from a security</font>

320
00:12:32,370 --> 00:12:36,930
perspective<font color="#E5E5E5"> how the app is doing data</font>

321
00:12:34,650 --> 00:12:40,380
storage in particular key management

322
00:12:36,930 --> 00:12:43,439
<font color="#CCCCCC">right that's usually pretty poor on</font><font color="#E5E5E5"> on</font>

323
00:12:40,380 --> 00:12:45,270
<font color="#E5E5E5">mobile apps you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> storing the keys</font>

324
00:12:43,440 --> 00:12:47,630
with the<font color="#CCCCCC"> lock is you know not</font><font color="#E5E5E5"> really</font>

325
00:12:45,270 --> 00:12:49,920
great<font color="#E5E5E5"> people don't do a good job</font>

326
00:12:47,630 --> 00:12:52,140
<font color="#E5E5E5">security checks and controls things like</font>

327
00:12:49,920 --> 00:12:53,550
jailbreak detection or prevention<font color="#E5E5E5"> anti</font>

328
00:12:52,140 --> 00:12:56,189
debugging and other sort of<font color="#CCCCCC"> more</font>

329
00:12:53,550 --> 00:12:58,380
advanced runtime security measures you

330
00:12:56,190 --> 00:13:00,570
<font color="#CCCCCC">know you you want to often</font><font color="#E5E5E5"> deal with</font>

331
00:12:58,380 --> 00:13:02,189
<font color="#CCCCCC">these simply because if you're doing it</font>

332
00:13:00,570 --> 00:13:04,830
<font color="#E5E5E5">in the broader context of say a pen test</font>

333
00:13:02,190 --> 00:13:06,300
often<font color="#CCCCCC"> these can stop you from</font><font color="#E5E5E5"> from</font>

334
00:13:04,830 --> 00:13:07,170
completing<font color="#E5E5E5"> that and doing</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> tasks</font>

335
00:13:06,300 --> 00:13:09,240
<font color="#CCCCCC">that you might want to do</font>

336
00:13:07,170 --> 00:13:10,949
and so so you'll<font color="#E5E5E5"> need to look for that</font>

337
00:13:09,240 --> 00:13:13,260
<font color="#E5E5E5">and potentially you</font><font color="#CCCCCC"> know break that</font>

338
00:13:10,950 --> 00:13:15,180
which<font color="#E5E5E5"> we'll go</font><font color="#CCCCCC"> into in the presentation</font>

339
00:13:13,260 --> 00:13:16,500
<font color="#CCCCCC">you know how it handles transport</font>

340
00:13:15,180 --> 00:13:19,260
security<font color="#E5E5E5"> so it doesn't implement sir</font>

341
00:13:16,500 --> 00:13:22,050
pinning<font color="#CCCCCC"> you know how it doesn't interact</font>

342
00:13:19,260 --> 00:13:24,060
with<font color="#E5E5E5"> the backend</font><font color="#CCCCCC"> API is</font><font color="#E5E5E5"> is it you know</font>

343
00:13:22,050 --> 00:13:26,189
if it's using<font color="#E5E5E5"> you know if there's no</font>

344
00:13:24,060 --> 00:13:29,609
sort of<font color="#CCCCCC"> sir pinning issues and</font><font color="#E5E5E5"> it's</font>

345
00:13:26,190 --> 00:13:31,050
using<font color="#E5E5E5"> HTTP</font><font color="#CCCCCC"> HTTPS</font><font color="#E5E5E5"> it's not too bad but</font>

346
00:13:29,610 --> 00:13:33,630
often you'll find<font color="#CCCCCC"> in mobile apps they</font>

347
00:13:31,050 --> 00:13:36,389
use you know different kind<font color="#CCCCCC"> of protocols</font>

348
00:13:33,630 --> 00:13:40,350
or custom protocols<font color="#E5E5E5"> or unusual protocols</font>

349
00:13:36,389 --> 00:13:42,180
<font color="#E5E5E5">that aren't easily</font><font color="#CCCCCC"> easily intercepted so</font>

350
00:13:40,350 --> 00:13:43,860
you know you might want to have a look

351
00:13:42,180 --> 00:13:45,630
<font color="#E5E5E5">at you know if it's got some kind of</font>

352
00:13:43,860 --> 00:13:46,620
custom<font color="#CCCCCC"> network stack that's implementing</font>

353
00:13:45,630 --> 00:13:48,000
it<font color="#E5E5E5"> you might want to hook those</font>

354
00:13:46,620 --> 00:13:50,160
functions and sort<font color="#E5E5E5"> of see what's going</font>

355
00:13:48,000 --> 00:13:51,570
<font color="#CCCCCC">on</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can also sort of see</font>

356
00:13:50,160 --> 00:13:53,459
what frameworks and<font color="#E5E5E5"> third-party</font>

357
00:13:51,570 --> 00:13:55,110
libraries are new so there's<font color="#CCCCCC"> anything</font>

358
00:13:53,459 --> 00:13:58,050
<font color="#CCCCCC">that has known vulnerabilities you can</font>

359
00:13:55,110 --> 00:13:59,610
kind of get an idea<font color="#E5E5E5"> for that as well so</font>

360
00:13:58,050 --> 00:14:02,189
once you've identified the<font color="#E5E5E5"> interesting</font>

361
00:13:59,610 --> 00:14:04,050
functionality<font color="#CCCCCC"> and you have a broader</font>

362
00:14:02,190 --> 00:14:06,449
<font color="#CCCCCC">understanding of how the application is</font>

363
00:14:04,050 --> 00:14:09,240
<font color="#E5E5E5">architected you can start to look for</font>

364
00:14:06,449 --> 00:14:11,279
<font color="#E5E5E5">potential security</font><font color="#CCCCCC"> issues so some of the</font>

365
00:14:09,240 --> 00:14:12,930
the key things<font color="#E5E5E5"> and really the the</font><font color="#CCCCCC"> three</font>

366
00:14:11,279 --> 00:14:14,459
sort of<font color="#E5E5E5"> broad categories that</font><font color="#CCCCCC"> you would</font>

367
00:14:12,930 --> 00:14:17,519
look for<font color="#E5E5E5"> from a runtime security</font>

368
00:14:14,459 --> 00:14:20,250
perspective is simple application logic

369
00:14:17,519 --> 00:14:22,290
<font color="#E5E5E5">that can be exploited so bypassing</font>

370
00:14:20,250 --> 00:14:23,610
security<font color="#CCCCCC"> checks access</font><font color="#E5E5E5"> control and off</font>

371
00:14:22,290 --> 00:14:26,069
<font color="#CCCCCC">bypass and</font><font color="#E5E5E5"> we'll go through a few of</font>

372
00:14:23,610 --> 00:14:27,660
those<font color="#CCCCCC"> in the demo sense of information</font>

373
00:14:26,070 --> 00:14:29,190
<font color="#CCCCCC">that you can extract</font><font color="#E5E5E5"> from memory so</font>

374
00:14:27,660 --> 00:14:32,310
things like<font color="#CCCCCC"> earth</font><font color="#E5E5E5"> Keys password</font>

375
00:14:29,190 --> 00:14:34,500
encryption keys whatever<font color="#CCCCCC"> and then</font>

376
00:14:32,310 --> 00:14:36,390
explaining the way<font color="#E5E5E5"> data at rest and</font>

377
00:14:34,500 --> 00:14:38,760
transit is<font color="#E5E5E5"> secured right so</font>

378
00:14:36,390 --> 00:14:40,589
bypass insert pinning<font color="#E5E5E5"> and validation you</font>

379
00:14:38,760 --> 00:14:45,089
know how<font color="#E5E5E5"> they doing encryption of any</font>

380
00:14:40,589 --> 00:14:47,459
client-side data storage cool<font color="#E5E5E5"> so we'll</font>

381
00:14:45,089 --> 00:14:50,399
go into a demo which<font color="#CCCCCC"> I have</font><font color="#E5E5E5"> pre-recorded</font>

382
00:14:47,459 --> 00:14:54,569
<font color="#CCCCCC">cuz I'm a</font><font color="#E5E5E5"> good boy</font><font color="#CCCCCC"> so this is just</font><font color="#E5E5E5"> this</font>

383
00:14:50,399 --> 00:14:55,860
<font color="#E5E5E5">really simple app so objective-c app</font><font color="#CCCCCC"> so</font>

384
00:14:54,569 --> 00:14:59,699
it's got a<font color="#E5E5E5"> couple of</font><font color="#CCCCCC"> jailbreak checks</font>

385
00:14:55,860 --> 00:15:01,440
now that's terrible<font color="#CCCCCC"> but that's cool so</font>

386
00:14:59,699 --> 00:15:03,060
it's<font color="#E5E5E5"> just checking they're both failing</font>

387
00:15:01,440 --> 00:15:05,040
and saying that you've you know<font color="#CCCCCC"> your</font>

388
00:15:03,060 --> 00:15:06,268
jailbroken<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is a little password</font>

389
00:15:05,040 --> 00:15:07,769
like<font color="#E5E5E5"> a log in films just</font><font color="#CCCCCC"> saying the</font>

390
00:15:06,269 --> 00:15:10,970
<font color="#E5E5E5">password that</font><font color="#CCCCCC"> i typed</font><font color="#E5E5E5"> in is incorrect</font>

391
00:15:07,769 --> 00:15:13,800
<font color="#E5E5E5">right</font><font color="#CCCCCC"> so you know pretty pretty basic</font>

392
00:15:10,970 --> 00:15:16,440
<font color="#CCCCCC">I'll make these available as well online</font>

393
00:15:13,800 --> 00:15:18,300
<font color="#E5E5E5">if you you know</font><font color="#CCCCCC"> want to see them</font>

394
00:15:16,440 --> 00:15:22,380
because yeah the<font color="#E5E5E5"> projectors not so great</font>

395
00:15:18,300 --> 00:15:25,979
<font color="#CCCCCC">but yeah so let's run through this demo</font>

396
00:15:22,380 --> 00:15:29,810
so<font color="#CCCCCC"> jeez that is</font><font color="#E5E5E5"> terrible</font><font color="#CCCCCC"> I can't even</font>

397
00:15:25,980 --> 00:15:31,920
see<font color="#E5E5E5"> it on my screen</font><font color="#CCCCCC"> that's great</font>

398
00:15:29,810 --> 00:15:33,510
so that<font color="#CCCCCC"> basically what i'm doing here is</font>

399
00:15:31,920 --> 00:15:34,800
i'm<font color="#E5E5E5"> just running class</font><font color="#CCCCCC"> tom said showing</font>

400
00:15:33,510 --> 00:15:36,540
<font color="#E5E5E5">that it doesn't work right</font><font color="#CCCCCC"> i have the</font>

401
00:15:34,800 --> 00:15:40,469
<font color="#CCCCCC">screen shot in there i'm now I'm getting</font>

402
00:15:36,540 --> 00:15:41,939
classed up<font color="#CCCCCC"> and so</font><font color="#E5E5E5"> this is just some of</font>

403
00:15:40,470 --> 00:15:44,220
<font color="#E5E5E5">the options</font><font color="#CCCCCC"> which you</font><font color="#E5E5E5"> can't make out</font>

404
00:15:41,940 --> 00:15:46,680
<font color="#E5E5E5">obviously especially formatting options</font>

405
00:15:44,220 --> 00:15:50,280
I like<font color="#CCCCCC"> to sort it by inheritance and</font>

406
00:15:46,680 --> 00:15:52,229
<font color="#E5E5E5">also the methods alphabetically</font><font color="#CCCCCC"> and so</font>

407
00:15:50,280 --> 00:15:54,300
yeah<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then I'm</font><font color="#CCCCCC"> just actually running</font>

408
00:15:52,230 --> 00:15:57,590
<font color="#E5E5E5">the command on that</font><font color="#CCCCCC"> on the binary</font><font color="#E5E5E5"> of</font>

409
00:15:54,300 --> 00:15:57,589
<font color="#E5E5E5">that</font><font color="#CCCCCC"> application that I showed you</font>

410
00:16:03,700 --> 00:16:08,320
and I'm just<font color="#E5E5E5"> as I did in</font><font color="#CCCCCC"> the</font>

411
00:16:06,220 --> 00:16:13,210
presentation<font color="#CCCCCC"> I'm now putting it to a</font>

412
00:16:08,320 --> 00:16:18,130
file<font color="#E5E5E5"> on my desktop</font><font color="#CCCCCC"> and I'm opening</font><font color="#E5E5E5"> that</font>

413
00:16:13,210 --> 00:16:19,660
in a text<font color="#CCCCCC"> editor which is</font><font color="#E5E5E5"> written</font><font color="#CCCCCC"> an</font>

414
00:16:18,130 --> 00:16:25,510
electron because you know I'm a hipster

415
00:16:19,660 --> 00:16:28,089
<font color="#E5E5E5">or whatever</font><font color="#CCCCCC"> and it's not gonna</font><font color="#E5E5E5"> work</font>

416
00:16:25,510 --> 00:16:31,420
but yeah so we've got our<font color="#E5E5E5"> class</font><font color="#CCCCCC"> stuff</font>

417
00:16:28,090 --> 00:16:33,610
right<font color="#CCCCCC"> you have to trust me on this rayon</font>

418
00:16:31,420 --> 00:16:36,339
um so I just<font color="#CCCCCC"> did</font><font color="#E5E5E5"> the syntax highlighting</font>

419
00:16:33,610 --> 00:16:39,310
so it shows how close the the<font color="#E5E5E5"> formatting</font>

420
00:16:36,340 --> 00:16:41,410
is to like a standard<font color="#E5E5E5"> objective-c header</font>

421
00:16:39,310 --> 00:16:43,239
file because<font color="#E5E5E5"> I've sorted by</font><font color="#CCCCCC"> inheritance</font>

422
00:16:41,410 --> 00:16:45,459
you got all the protocols first<font color="#E5E5E5"> and you</font>

423
00:16:43,240 --> 00:16:49,180
got your app delegate<font color="#E5E5E5"> and a couple of</font>

424
00:16:45,460 --> 00:16:51,100
<font color="#CCCCCC">classes that</font><font color="#E5E5E5"> we've got in there</font><font color="#CCCCCC"> and so</font>

425
00:16:49,180 --> 00:16:53,770
you know pretty<font color="#CCCCCC"> pretty small</font><font color="#E5E5E5"> app pretty</font>

426
00:16:51,100 --> 00:16:56,620
pretty<font color="#CCCCCC"> simple so what I would typically</font>

427
00:16:53,770 --> 00:16:59,110
do is just start searching right so it's

428
00:16:56,620 --> 00:17:00,940
just you know grep<font color="#E5E5E5"> or you know command F</font>

429
00:16:59,110 --> 00:17:03,520
right<font color="#E5E5E5"> what I usually start is the app</font>

430
00:17:00,940 --> 00:17:05,920
delegate<font color="#E5E5E5"> that's kind of essentially main</font>

431
00:17:03,520 --> 00:17:07,720
for iOS apps right it's<font color="#E5E5E5"> really the the</font>

432
00:17:05,920 --> 00:17:10,810
point where the developer gets<font color="#E5E5E5"> control</font>

433
00:17:07,720 --> 00:17:12,100
<font color="#E5E5E5">and usually this is just a small app so</font>

434
00:17:10,810 --> 00:17:14,109
it's got really nothing<font color="#E5E5E5"> in it</font><font color="#CCCCCC"> but</font>

435
00:17:12,099 --> 00:17:15,790
usually<font color="#E5E5E5"> there's a bunch of</font><font color="#CCCCCC"> interesting</font>

436
00:17:14,109 --> 00:17:17,319
stuff that<font color="#E5E5E5"> the developers kind of just</font>

437
00:17:15,790 --> 00:17:19,930
chucked in the app delegate<font color="#CCCCCC"> because it</font>

438
00:17:17,319 --> 00:17:21,540
you<font color="#E5E5E5"> know that's where it goes you</font><font color="#CCCCCC"> can</font>

439
00:17:19,930 --> 00:17:24,070
see here so you've got the class name

440
00:17:21,540 --> 00:17:25,540
you've got the<font color="#E5E5E5"> superclass and in the</font>

441
00:17:24,069 --> 00:17:26,859
angled brackets<font color="#CCCCCC"> that I didn't go through</font>

442
00:17:25,540 --> 00:17:29,440
<font color="#CCCCCC">that</font><font color="#E5E5E5"> in the syntax but that's just the</font>

443
00:17:26,859 --> 00:17:30,639
protocols that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> conforms to then</font>

444
00:17:29,440 --> 00:17:31,990
you've<font color="#E5E5E5"> got the different you know your</font>

445
00:17:30,640 --> 00:17:33,190
class<font color="#E5E5E5"> and instance</font><font color="#CCCCCC"> methods</font><font color="#E5E5E5"> then I</font>

446
00:17:31,990 --> 00:17:35,080
started looking<font color="#CCCCCC"> for interesting</font><font color="#E5E5E5"> stuff</font>

447
00:17:33,190 --> 00:17:36,640
like<font color="#CCCCCC"> I start searching</font><font color="#E5E5E5"> jailbreak I start</font>

448
00:17:35,080 --> 00:17:37,960
searching<font color="#CCCCCC"> password and things like</font><font color="#E5E5E5"> that</font>

449
00:17:36,640 --> 00:17:39,220
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> see there's some interesting</font>

450
00:17:37,960 --> 00:17:41,380
<font color="#E5E5E5">looking classes here you've got this</font>

451
00:17:39,220 --> 00:17:43,510
jailbreak<font color="#E5E5E5"> manager class which you know</font>

452
00:17:41,380 --> 00:17:46,210
<font color="#E5E5E5">seems like it would</font><font color="#CCCCCC"> probably</font><font color="#E5E5E5"> be handling</font>

453
00:17:43,510 --> 00:17:47,620
<font color="#E5E5E5">those jailbreak checks right</font><font color="#CCCCCC"> you've got</font>

454
00:17:46,210 --> 00:17:51,100
this one<font color="#E5E5E5"> you can't read it but it says</font>

455
00:17:47,620 --> 00:17:53,050
<font color="#E5E5E5">totally interesting information here</font><font color="#CCCCCC"> so</font>

456
00:17:51,100 --> 00:17:54,370
it's a bit<font color="#E5E5E5"> obvious right and then you've</font>

457
00:17:53,050 --> 00:17:56,830
got a<font color="#E5E5E5"> couple of variables which is a</font>

458
00:17:54,370 --> 00:18:01,419
<font color="#E5E5E5">password username and then there's a</font>

459
00:17:56,830 --> 00:18:03,610
<font color="#E5E5E5">couple of a</font><font color="#CCCCCC"> couple of methods</font><font color="#E5E5E5"> so a class</font>

460
00:18:01,420 --> 00:18:06,160
method that's<font color="#CCCCCC"> called get encryption key</font>

461
00:18:03,610 --> 00:18:08,110
<font color="#E5E5E5">and then two instance methods that get</font>

462
00:18:06,160 --> 00:18:10,150
password and get<font color="#CCCCCC"> username then we're</font>

463
00:18:08,110 --> 00:18:11,469
looking<font color="#E5E5E5"> at the view controller so when</font>

464
00:18:10,150 --> 00:18:14,620
you think about it from our rudimentary

465
00:18:11,470 --> 00:18:16,030
<font color="#E5E5E5">I'm saying of MVC right you've got this</font>

466
00:18:14,620 --> 00:18:16,969
is where the logic is so you can see

467
00:18:16,030 --> 00:18:18,889
some you know

468
00:18:16,970 --> 00:18:21,530
like the login<font color="#E5E5E5"> button pressed and you</font>

469
00:18:18,890 --> 00:18:24,740
know jailbreak check<font color="#CCCCCC"> one and two there</font>

470
00:18:21,530 --> 00:18:26,809
<font color="#E5E5E5">is an interesting one</font><font color="#CCCCCC"> there called user</font>

471
00:18:24,740 --> 00:18:28,880
is authenticated<font color="#CCCCCC"> you'll have to take my</font>

472
00:18:26,809 --> 00:18:34,039
<font color="#E5E5E5">word for it but yeah it's definitely</font>

473
00:18:28,880 --> 00:18:35,419
definitely<font color="#CCCCCC"> there cool</font><font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> move on</font>

474
00:18:34,039 --> 00:18:38,270
to<font color="#E5E5E5"> like actually manipulating the</font>

475
00:18:35,419 --> 00:18:39,740
runtime<font color="#CCCCCC"> of the app right so you know</font>

476
00:18:38,270 --> 00:18:41,299
once<font color="#E5E5E5"> you have an idea</font><font color="#CCCCCC"> of what you want</font>

477
00:18:39,740 --> 00:18:43,940
<font color="#E5E5E5">to target</font><font color="#CCCCCC"> the next</font><font color="#E5E5E5"> step is to actually</font>

478
00:18:41,299 --> 00:18:46,250
<font color="#E5E5E5">then manipulate the runtime and exploit</font>

479
00:18:43,940 --> 00:18:48,620
the issue to achieve your objective<font color="#E5E5E5"> so</font>

480
00:18:46,250 --> 00:18:50,630
commonly the it falls into<font color="#CCCCCC"> a confused</font>

481
00:18:48,620 --> 00:18:52,760
sort of simple buckets<font color="#E5E5E5"> right reading</font>

482
00:18:50,630 --> 00:18:55,520
variables<font color="#E5E5E5"> the values of variables out of</font>

483
00:18:52,760 --> 00:18:58,010
<font color="#E5E5E5">memory or modifying them</font><font color="#CCCCCC"> calling</font><font color="#E5E5E5"> methods</font>

484
00:18:55,520 --> 00:18:59,750
directly<font color="#CCCCCC"> so</font><font color="#E5E5E5"> typically to sort of exploit</font>

485
00:18:58,010 --> 00:19:02,419
<font color="#E5E5E5">poor logic in the application flow and</font>

486
00:18:59,750 --> 00:19:04,309
then rewriting<font color="#E5E5E5"> the implementation</font><font color="#CCCCCC"> of a</font>

487
00:19:02,419 --> 00:19:05,600
particular function<font color="#CCCCCC"> to</font><font color="#E5E5E5"> change the way</font>

488
00:19:04,309 --> 00:19:08,570
the app functions and we'll go through

489
00:19:05,600 --> 00:19:09,678
<font color="#CCCCCC">all of those in various ways</font><font color="#E5E5E5"> there are</font><font color="#CCCCCC"> a</font>

490
00:19:08,570 --> 00:19:11,178
<font color="#CCCCCC">number of</font><font color="#E5E5E5"> tools and techniques you can</font>

491
00:19:09,679 --> 00:19:12,919
use to<font color="#CCCCCC"> complete these tasks so</font>

492
00:19:11,179 --> 00:19:17,270
frameworks and tools such<font color="#E5E5E5"> as script and</font>

493
00:19:12,919 --> 00:19:20,059
and<font color="#CCCCCC"> freida</font><font color="#E5E5E5"> using a debugger like</font><font color="#CCCCCC"> ll to</font>

494
00:19:17,270 --> 00:19:22,668
be writing your own dynamic<font color="#E5E5E5"> libraries</font>

495
00:19:20,059 --> 00:19:24,379
and linking them<font color="#E5E5E5"> in or</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> just</font>

496
00:19:22,669 --> 00:19:27,200
patching<font color="#CCCCCC"> the binary can can often</font>

497
00:19:24,380 --> 00:19:29,750
achieve some of<font color="#E5E5E5"> the same objectives</font>

498
00:19:27,200 --> 00:19:32,360
I'm glad the photo of<font color="#E5E5E5"> Christian came out</font>

499
00:19:29,750 --> 00:19:35,360
that's<font color="#E5E5E5"> great so scripts so scripts is</font>

500
00:19:32,360 --> 00:19:37,850
kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> old tool</font><font color="#E5E5E5"> written by the same guy</font>

501
00:19:35,360 --> 00:19:39,949
who does<font color="#CCCCCC"> Cydia who writes Cydia</font>

502
00:19:37,850 --> 00:19:42,260
it's a ridiculous<font color="#CCCCCC"> name because it's</font>

503
00:19:39,950 --> 00:19:44,539
pronounced script<font color="#E5E5E5"> it's not written</font><font color="#CCCCCC"> like</font>

504
00:19:42,260 --> 00:19:46,400
<font color="#CCCCCC">that at</font><font color="#E5E5E5"> least in my</font><font color="#CCCCCC"> mind but it has an</font>

505
00:19:44,539 --> 00:19:48,379
<font color="#E5E5E5">even more ridiculous premise which is a</font>

506
00:19:46,400 --> 00:19:49,760
programming<font color="#CCCCCC"> language designed to blend</font>

507
00:19:48,380 --> 00:19:50,630
<font color="#E5E5E5">the barrier between objective-c and</font>

508
00:19:49,760 --> 00:19:52,280
JavaScript

509
00:19:50,630 --> 00:19:54,919
I don't know about you guys but<font color="#CCCCCC"> like</font>

510
00:19:52,280 --> 00:19:56,240
<font color="#E5E5E5">that just seems ridiculous</font><font color="#CCCCCC"> to me uhm but</font>

511
00:19:54,919 --> 00:19:57,679
<font color="#CCCCCC">it is a really great tool</font><font color="#E5E5E5"> for</font>

512
00:19:56,240 --> 00:20:01,270
interrogating<font color="#E5E5E5"> and manipulating the</font>

513
00:19:57,679 --> 00:20:04,730
runtime<font color="#CCCCCC"> yeah so yeah</font>

514
00:20:01,270 --> 00:20:08,090
<font color="#E5E5E5">Christian is a hipster so using script</font>

515
00:20:04,730 --> 00:20:10,580
<font color="#E5E5E5">so you can use it to load script scripts</font>

516
00:20:08,090 --> 00:20:12,470
which is why I hate that<font color="#CCCCCC"> name</font><font color="#E5E5E5"> or use it</font>

517
00:20:10,580 --> 00:20:14,120
interactively<font color="#E5E5E5"> which is usually when how</font>

518
00:20:12,470 --> 00:20:15,440
you how you<font color="#CCCCCC"> use it</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> most of</font><font color="#E5E5E5"> the time</font>

519
00:20:14,120 --> 00:20:17,418
you want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> hook into the running app to</font>

520
00:20:15,440 --> 00:20:18,890
use<font color="#E5E5E5"> it interactively</font><font color="#CCCCCC"> and it's just the</font>

521
00:20:17,419 --> 00:20:22,190
<font color="#CCCCCC">dash P and then you provided the</font>

522
00:20:18,890 --> 00:20:24,350
application name<font color="#E5E5E5"> or the process ID</font><font color="#CCCCCC"> and</font>

523
00:20:22,190 --> 00:20:26,090
then you know there are a<font color="#E5E5E5"> lot of people</font>

524
00:20:24,350 --> 00:20:28,158
moving to<font color="#CCCCCC"> frida these days for</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot of</font>

525
00:20:26,090 --> 00:20:29,639
the same<font color="#E5E5E5"> tasks but you know you can use</font>

526
00:20:28,159 --> 00:20:32,800
script

527
00:20:29,640 --> 00:20:34,690
<font color="#CCCCCC">but I like I use script and it's still a</font>

528
00:20:32,800 --> 00:20:36,790
<font color="#E5E5E5">very handy</font><font color="#CCCCCC"> tool it's kind of</font><font color="#E5E5E5"> like got a</font>

529
00:20:34,690 --> 00:20:38,140
different focus<font color="#E5E5E5"> to</font><font color="#CCCCCC"> Frieda and</font><font color="#E5E5E5"> there was</font>

530
00:20:36,790 --> 00:20:40,690
a bit of<font color="#CCCCCC"> a spat between like the</font>

531
00:20:38,140 --> 00:20:42,070
developers<font color="#E5E5E5"> of both of those around you</font>

532
00:20:40,690 --> 00:20:44,440
know what what the sort<font color="#E5E5E5"> of purpose of</font>

533
00:20:42,070 --> 00:20:46,389
each one<font color="#E5E5E5"> is script was really more</font>

534
00:20:44,440 --> 00:20:48,250
designed for<font color="#E5E5E5"> like tweak developers to</font>

535
00:20:46,390 --> 00:20:49,330
sort<font color="#E5E5E5"> of you know play around</font><font color="#CCCCCC"> see how</font>

536
00:20:48,250 --> 00:20:51,190
<font color="#E5E5E5">things are</font><font color="#CCCCCC"> working</font>

537
00:20:49,330 --> 00:20:53,020
whereas fruit is definitely more<font color="#CCCCCC"> of a</font>

538
00:20:51,190 --> 00:20:55,180
<font color="#CCCCCC">security research tool but you know</font>

539
00:20:53,020 --> 00:20:56,950
<font color="#E5E5E5">we'll go into both here's some little</font>

540
00:20:55,180 --> 00:20:59,200
<font color="#E5E5E5">tips and tricks that you know you might</font>

541
00:20:56,950 --> 00:21:01,060
want to commonly do so you know you

542
00:20:59,200 --> 00:21:03,160
might<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> get the bundle ID so just</font>

543
00:21:01,060 --> 00:21:06,340
<font color="#E5E5E5">a nice bundle main bundle bundle</font>

544
00:21:03,160 --> 00:21:08,230
identifier<font color="#E5E5E5"> dumping instance variables</font>

545
00:21:06,340 --> 00:21:09,550
<font color="#E5E5E5">just the little asterisks in front of</font>

546
00:21:08,230 --> 00:21:12,550
the object<font color="#E5E5E5"> you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to dump the</font>

547
00:21:09,550 --> 00:21:14,020
variables out of getting<font color="#CCCCCC"> all the objects</font>

548
00:21:12,550 --> 00:21:16,840
of<font color="#E5E5E5"> a class it's also something that's</font>

549
00:21:14,020 --> 00:21:18,220
that's useful<font color="#CCCCCC"> and I'll explain why in my</font>

550
00:21:16,840 --> 00:21:19,780
demos that you<font color="#CCCCCC"> probably can't</font><font color="#E5E5E5"> see but</font>

551
00:21:18,220 --> 00:21:22,630
<font color="#CCCCCC">it's got this</font><font color="#E5E5E5"> really cool function</font>

552
00:21:19,780 --> 00:21:24,160
<font color="#E5E5E5">called choose which basically takes a</font>

553
00:21:22,630 --> 00:21:26,290
<font color="#CCCCCC">parameter of</font><font color="#E5E5E5"> a class name and then it</font>

554
00:21:24,160 --> 00:21:30,790
goes through<font color="#E5E5E5"> and tries to find all the</font>

555
00:21:26,290 --> 00:21:34,780
instances<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that for Swift apps the the</font>

556
00:21:30,790 --> 00:21:37,540
sort<font color="#E5E5E5"> of syntax kind of breaks with with</font>

557
00:21:34,780 --> 00:21:39,580
Swift<font color="#CCCCCC"> so instead of</font><font color="#E5E5E5"> just putting in you</font>

558
00:21:37,540 --> 00:21:42,550
know module class and you have to use

559
00:21:39,580 --> 00:21:44,679
this<font color="#E5E5E5"> other method called</font><font color="#CCCCCC"> Objective</font><font color="#E5E5E5"> C get</font>

560
00:21:42,550 --> 00:21:46,780
class right<font color="#E5E5E5"> because it just breaks the</font>

561
00:21:44,680 --> 00:21:48,210
<font color="#E5E5E5">JavaScript stuff didn't get like you</font>

562
00:21:46,780 --> 00:21:51,820
<font color="#CCCCCC">know things</font><font color="#E5E5E5"> aren't defined and whatever</font>

563
00:21:48,210 --> 00:21:54,430
<font color="#CCCCCC">and then to</font><font color="#E5E5E5"> replace the implementation</font>

564
00:21:51,820 --> 00:21:57,550
of an existing method it's just the name

565
00:21:54,430 --> 00:21:59,590
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> class dot prototype dot you know</font>

566
00:21:57,550 --> 00:22:02,649
<font color="#E5E5E5">the function that you</font><font color="#CCCCCC"> want to replace</font>

567
00:21:59,590 --> 00:22:03,909
<font color="#E5E5E5">and then you just basically replacing it</font>

568
00:22:02,650 --> 00:22:06,190
with a JavaScript function<font color="#CCCCCC"> that does</font>

569
00:22:03,910 --> 00:22:09,640
whatever<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> usually if it's like</font>

570
00:22:06,190 --> 00:22:11,740
<font color="#E5E5E5">simple logic you know that the the new</font>

571
00:22:09,640 --> 00:22:16,030
implementations usually<font color="#E5E5E5"> not</font><font color="#CCCCCC"> that complex</font>

572
00:22:11,740 --> 00:22:17,590
<font color="#E5E5E5">right but yeah we're going to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so</font>

573
00:22:16,030 --> 00:22:19,690
<font color="#E5E5E5">yeah you</font><font color="#CCCCCC"> can load up scripts so this</font>

574
00:22:17,590 --> 00:22:21,310
little script<font color="#E5E5E5"> here just prints the</font>

575
00:22:19,690 --> 00:22:24,190
methods or attempts to prints them<font color="#E5E5E5"> the</font>

576
00:22:21,310 --> 00:22:26,470
methods of a particular class so you

577
00:22:24,190 --> 00:22:30,430
could type that<font color="#CCCCCC"> into the script</font><font color="#E5E5E5"> sort of</font>

578
00:22:26,470 --> 00:22:32,980
<font color="#E5E5E5">wrap or I suppose or you can just create</font>

579
00:22:30,430 --> 00:22:36,490
<font color="#E5E5E5">a dot C Y script and like load it in</font>

580
00:22:32,980 --> 00:22:38,650
when you<font color="#E5E5E5"> load like your inject script</font>

581
00:22:36,490 --> 00:22:41,470
into<font color="#E5E5E5"> the process and so you don't have</font>

582
00:22:38,650 --> 00:22:42,850
to keep typing it<font color="#E5E5E5"> out right so yeah if</font>

583
00:22:41,470 --> 00:22:44,769
you do use<font color="#CCCCCC"> that</font>

584
00:22:42,850 --> 00:22:46,449
<font color="#E5E5E5">pretty methods the class</font><font color="#CCCCCC"> that gets</font><font color="#E5E5E5"> all</font>

585
00:22:44,769 --> 00:22:49,029
<font color="#E5E5E5">the instance methods and if you add the</font>

586
00:22:46,450 --> 00:22:51,429
second parameter<font color="#E5E5E5"> for true</font><font color="#CCCCCC"> it also</font><font color="#E5E5E5"> gets</font>

587
00:22:49,029 --> 00:22:52,899
their class methods<font color="#CCCCCC"> alright let's get</font>

588
00:22:51,429 --> 00:22:56,649
into<font color="#CCCCCC"> a demo that</font><font color="#E5E5E5"> you probably won't</font><font color="#CCCCCC"> be</font>

589
00:22:52,899 --> 00:23:00,029
<font color="#E5E5E5">able to see alright so all I'm doing</font>

590
00:22:56,649 --> 00:23:03,370
here<font color="#E5E5E5"> the right hand side I'm just</font>

591
00:23:00,029 --> 00:23:06,429
setting up a tunnel<font color="#CCCCCC"> over</font><font color="#E5E5E5"> USB to my</font>

592
00:23:03,370 --> 00:23:10,739
device<font color="#CCCCCC"> so I can connect</font><font color="#E5E5E5"> to it which is</font>

593
00:23:06,429 --> 00:23:10,740
now what I'm<font color="#E5E5E5"> doing here with SSH</font>

594
00:23:20,010 --> 00:23:25,379
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> logging in</font><font color="#CCCCCC"> all right</font><font color="#E5E5E5"> so now I'm</font>

595
00:23:22,980 --> 00:23:27,419
connected to<font color="#CCCCCC"> my iOS device</font><font color="#E5E5E5"> which is</font>

596
00:23:25,380 --> 00:23:29,520
running<font color="#E5E5E5"> the app on the other side there</font>

597
00:23:27,419 --> 00:23:32,340
and so I'm just now loading up script

598
00:23:29,520 --> 00:23:36,418
and injecting into<font color="#E5E5E5"> that objective-c app</font>

599
00:23:32,340 --> 00:23:38,668
that's<font color="#E5E5E5"> running on the side and you can</font>

600
00:23:36,419 --> 00:23:40,740
<font color="#CCCCCC">see that I'm just getting the the bundle</font>

601
00:23:38,669 --> 00:23:48,990
identifier so you can see that it is

602
00:23:40,740 --> 00:23:51,740
<font color="#E5E5E5">that app and there's a few cool sort of</font>

603
00:23:48,990 --> 00:23:54,090
features so here I'm<font color="#CCCCCC"> just calling a</font>

604
00:23:51,740 --> 00:23:56,220
<font color="#E5E5E5">method and the exact same sort of</font>

605
00:23:54,090 --> 00:23:58,199
objective-c syntax that<font color="#E5E5E5"> you would do so</font>

606
00:23:56,220 --> 00:24:00,419
it definitely<font color="#CCCCCC"> does bridge Objective C</font>

607
00:23:58,200 --> 00:24:02,429
<font color="#E5E5E5">and JavaScript so you can see I'm just</font>

608
00:24:00,419 --> 00:24:05,160
<font color="#CCCCCC">getting the the application instance</font>

609
00:24:02,429 --> 00:24:07,860
there<font color="#CCCCCC"> and you know you then you can you</font>

610
00:24:05,160 --> 00:24:11,179
<font color="#E5E5E5">know get the the delegate which gives</font>

611
00:24:07,860 --> 00:24:13,620
you the the app delegate and since and

612
00:24:11,179 --> 00:24:15,179
but then script also<font color="#E5E5E5"> has a bunch of</font>

613
00:24:13,620 --> 00:24:16,830
shortcuts<font color="#E5E5E5"> so for the application</font>

614
00:24:15,179 --> 00:24:18,059
instance you can use UI app and then

615
00:24:16,830 --> 00:24:20,159
then<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> do things like UI app</font>

616
00:24:18,059 --> 00:24:22,350
delegate<font color="#E5E5E5"> you get those same instances</font>

617
00:24:20,160 --> 00:24:26,160
<font color="#E5E5E5">trust me those things are the same</font>

618
00:24:22,350 --> 00:24:28,439
<font color="#CCCCCC">there's also history</font><font color="#E5E5E5"> and like tab</font>

619
00:24:26,160 --> 00:24:31,049
<font color="#E5E5E5">completion as well which</font><font color="#CCCCCC"> is what I was</font>

620
00:24:28,440 --> 00:24:34,100
<font color="#E5E5E5">just demonstrating there</font><font color="#CCCCCC"> which is yeah I</font>

621
00:24:31,049 --> 00:24:42,770
kind of<font color="#E5E5E5"> kind of handy and kind of nice</font>

622
00:24:34,100 --> 00:24:42,770
<font color="#CCCCCC">so me that hey</font>

623
00:24:46,670 --> 00:24:52,880
<font color="#E5E5E5">all right so this</font><font color="#CCCCCC"> is just demonstrating</font>

624
00:24:50,000 --> 00:24:56,120
getting the instance methods using the

625
00:24:52,880 --> 00:25:03,230
asterisk<font color="#E5E5E5"> little shortcut that's for the</font>

626
00:24:56,120 --> 00:25:04,969
<font color="#E5E5E5">app delegate so now we're going</font><font color="#CCCCCC"> back to</font>

627
00:25:03,230 --> 00:25:08,900
the class dump<font color="#E5E5E5"> and you'll start to see</font>

628
00:25:04,970 --> 00:25:10,670
<font color="#E5E5E5">why this is</font><font color="#CCCCCC"> a useful</font><font color="#E5E5E5"> document</font><font color="#CCCCCC"> so here</font>

629
00:25:08,900 --> 00:25:12,980
we're<font color="#CCCCCC"> going in this totally interesting</font>

630
00:25:10,670 --> 00:25:15,980
information here<font color="#E5E5E5"> class and we're using</font>

631
00:25:12,980 --> 00:25:18,110
<font color="#E5E5E5">it as a map to sort of help us you know</font>

632
00:25:15,980 --> 00:25:20,120
navigate<font color="#CCCCCC"> through the through the runtime</font>

633
00:25:18,110 --> 00:25:22,639
<font color="#E5E5E5">and so here I'm highlighting this</font><font color="#CCCCCC"> gate</font>

634
00:25:20,120 --> 00:25:23,780
encryption key<font color="#E5E5E5"> method which you know it</font>

635
00:25:22,640 --> 00:25:25,970
seems like something we<font color="#E5E5E5"> might</font><font color="#CCCCCC"> want to</font>

636
00:25:23,780 --> 00:25:27,260
see<font color="#E5E5E5"> what it returns and because it's a</font>

637
00:25:25,970 --> 00:25:29,570
class method<font color="#CCCCCC"> you</font><font color="#E5E5E5"> could just call it</font>

638
00:25:27,260 --> 00:25:31,340
<font color="#E5E5E5">using the class name</font><font color="#CCCCCC"> so I've got the</font>

639
00:25:29,570 --> 00:25:32,810
open square square brackets you're

640
00:25:31,340 --> 00:25:34,730
putting the totally interesting

641
00:25:32,810 --> 00:25:37,399
information here<font color="#E5E5E5"> class and then type it</font>

642
00:25:34,730 --> 00:25:39,470
<font color="#E5E5E5">and this comes back with a string saying</font>

643
00:25:37,400 --> 00:25:40,580
this is an encryption key<font color="#CCCCCC"> right</font><font color="#E5E5E5"> this is</font>

644
00:25:39,470 --> 00:25:44,750
common you'll see this all<font color="#CCCCCC"> the time</font><font color="#E5E5E5"> in</font>

645
00:25:40,580 --> 00:25:47,780
iOS apps right but I'm trying now to to

646
00:25:44,750 --> 00:25:49,280
call<font color="#E5E5E5"> the get instance</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> past an</font>

647
00:25:47,780 --> 00:25:50,899
instance method<font color="#CCCCCC"> and throws an error</font>

648
00:25:49,280 --> 00:25:53,030
<font color="#E5E5E5">because I'm calling on the class right</font>

649
00:25:50,900 --> 00:25:54,920
<font color="#E5E5E5">so going back to</font><font color="#CCCCCC"> these auto principles</font>

650
00:25:53,030 --> 00:25:56,120
right<font color="#E5E5E5"> you don't you can't call it on the</font>

651
00:25:54,920 --> 00:25:59,840
<font color="#E5E5E5">class you have to call it on the</font>

652
00:25:56,120 --> 00:26:01,790
instance<font color="#E5E5E5"> like the actual object right so</font>

653
00:25:59,840 --> 00:26:03,679
one of the ways that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> sort of find out</font>

654
00:26:01,790 --> 00:26:05,420
you know where these instances<font color="#E5E5E5"> are</font>

655
00:26:03,680 --> 00:26:07,490
references to<font color="#E5E5E5"> it as I search for the</font>

656
00:26:05,420 --> 00:26:09,650
<font color="#E5E5E5">class name now this is a very small app</font>

657
00:26:07,490 --> 00:26:12,080
so there's this instance here so in the

658
00:26:09,650 --> 00:26:15,530
view controller<font color="#CCCCCC"> there's an instance of</font>

659
00:26:12,080 --> 00:26:17,300
that particular class<font color="#CCCCCC"> so now what I want</font>

660
00:26:15,530 --> 00:26:18,830
<font color="#CCCCCC">to do and you can see why we call</font><font color="#E5E5E5"> this a</font>

661
00:26:17,300 --> 00:26:21,590
bit<font color="#E5E5E5"> of a map right</font><font color="#CCCCCC"> now what I want</font><font color="#E5E5E5"> to do</font>

662
00:26:18,830 --> 00:26:23,480
is go to<font color="#E5E5E5"> that view controller instance</font>

663
00:26:21,590 --> 00:26:28,060
<font color="#E5E5E5">and then get that very read that</font>

664
00:26:23,480 --> 00:26:30,830
variable<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get an instance so for iOS</font>

665
00:26:28,060 --> 00:26:33,139
the app has a key window property which

666
00:26:30,830 --> 00:26:35,750
always has a root view controller<font color="#CCCCCC"> so in</font>

667
00:26:33,140 --> 00:26:36,890
this particular<font color="#E5E5E5"> case it's</font><font color="#CCCCCC"> just the view</font>

668
00:26:35,750 --> 00:26:39,740
controller because it's a very simple

669
00:26:36,890 --> 00:26:41,600
<font color="#E5E5E5">app so what I'm what I'm</font><font color="#CCCCCC"> typing there is</font>

670
00:26:39,740 --> 00:26:42,080
UI app key window<font color="#CCCCCC"> dot</font><font color="#E5E5E5"> root view</font>

671
00:26:41,600 --> 00:26:43,399
controller

672
00:26:42,080 --> 00:26:47,030
<font color="#E5E5E5">it's just return the instance of</font><font color="#CCCCCC"> that</font>

673
00:26:43,400 --> 00:26:54,570
view<font color="#CCCCCC"> controller</font><font color="#E5E5E5"> class so one of the</font>

674
00:26:47,030 --> 00:26:59,460
things you can do here<font color="#CCCCCC"> so going</font><font color="#E5E5E5"> back now</font>

675
00:26:54,570 --> 00:27:01,259
<font color="#CCCCCC">I want to read this instance out to get</font>

676
00:26:59,460 --> 00:27:02,880
the instance<font color="#CCCCCC"> of that totally you know</font>

677
00:27:01,259 --> 00:27:06,440
<font color="#E5E5E5">interesting information</font><font color="#CCCCCC"> here class</font>

678
00:27:02,880 --> 00:27:08,970
<font color="#E5E5E5">should</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> made that</font><font color="#CCCCCC"> a shorter name and</font>

679
00:27:06,440 --> 00:27:11,279
that's<font color="#E5E5E5"> returning an instance of that</font>

680
00:27:08,970 --> 00:27:14,340
class<font color="#CCCCCC"> so</font><font color="#E5E5E5"> to just read that variable and</font>

681
00:27:11,279 --> 00:27:16,440
so now we<font color="#E5E5E5"> can use that</font><font color="#CCCCCC"> now we could type</font>

682
00:27:14,340 --> 00:27:19,158
out<font color="#E5E5E5"> you know all of</font><font color="#CCCCCC"> that string right</font>

683
00:27:16,440 --> 00:27:22,200
<font color="#CCCCCC">you know there start</font><font color="#E5E5E5"> there start this or</font>

684
00:27:19,159 --> 00:27:24,809
you can create a reference<font color="#E5E5E5"> like so this</font>

685
00:27:22,200 --> 00:27:27,509
<font color="#E5E5E5">is</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> a JavaScript variable</font><font color="#CCCCCC"> and I'm</font>

686
00:27:24,809 --> 00:27:29,580
calling an info and I'm just<font color="#E5E5E5"> using the</font>

687
00:27:27,509 --> 00:27:32,070
instance function and script and then

688
00:27:29,580 --> 00:27:34,259
giving it the the pointer to that

689
00:27:32,070 --> 00:27:35,610
<font color="#E5E5E5">instance and then now I've got a</font>

690
00:27:34,259 --> 00:27:38,250
reference<font color="#CCCCCC"> to that that I can use without</font>

691
00:27:35,610 --> 00:27:40,949
<font color="#E5E5E5">having</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> type it all out right so I can</font>

692
00:27:38,250 --> 00:27:43,710
just<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you just</font><font color="#CCCCCC"> see I typed in info and</font>

693
00:27:40,950 --> 00:27:45,000
it<font color="#E5E5E5"> came</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> with that that instance so</font>

694
00:27:43,710 --> 00:27:46,200
now that we've got that<font color="#CCCCCC"> we go back to</font>

695
00:27:45,000 --> 00:27:47,190
the class stuff when we<font color="#E5E5E5"> say okay well</font>

696
00:27:46,200 --> 00:27:49,110
<font color="#E5E5E5">let's try and call these instance</font>

697
00:27:47,190 --> 00:27:50,909
methods now so we could<font color="#CCCCCC"> just</font><font color="#E5E5E5"> reference</font>

698
00:27:49,110 --> 00:27:53,580
it using the<font color="#E5E5E5"> the info variable that we</font>

699
00:27:50,909 --> 00:27:56,820
<font color="#CCCCCC">created</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> we're typing</font><font color="#E5E5E5"> get</font>

700
00:27:53,580 --> 00:27:58,949
<font color="#CCCCCC">username which comes back with username</font>

701
00:27:56,820 --> 00:28:01,350
and get password<font color="#E5E5E5"> to come back with</font>

702
00:27:58,950 --> 00:28:03,990
password and then we can also read the

703
00:28:01,350 --> 00:28:06,059
<font color="#E5E5E5">variables as well with just you know the</font>

704
00:28:03,990 --> 00:28:09,320
<font color="#E5E5E5">reference that we created info dot</font>

705
00:28:06,059 --> 00:28:09,320
password which<font color="#CCCCCC"> is what we're doing</font>

706
00:28:18,720 --> 00:28:27,100
<font color="#E5E5E5">all right so yeah password there you go</font>

707
00:28:22,120 --> 00:28:29,080
<font color="#CCCCCC">I made that different to the actual</font>

708
00:28:27,100 --> 00:28:31,060
password<font color="#E5E5E5"> for the login just so you</font><font color="#CCCCCC"> know</font>

709
00:28:29,080 --> 00:28:32,260
<font color="#E5E5E5">we do some different things right so now</font>

710
00:28:31,060 --> 00:28:33,429
what we're<font color="#E5E5E5"> going to do is have a look at</font>

711
00:28:32,260 --> 00:28:35,590
this<font color="#E5E5E5"> jailbreak check so the first</font>

712
00:28:33,430 --> 00:28:36,910
jailbreak check we<font color="#E5E5E5"> hit it and it says</font>

713
00:28:35,590 --> 00:28:40,120
Jabra check failed because<font color="#E5E5E5"> obviously</font>

714
00:28:36,910 --> 00:28:42,370
we're<font color="#CCCCCC"> on a jailbroken device</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so</font>

715
00:28:40,120 --> 00:28:43,750
again<font color="#CCCCCC"> let's go back I</font><font color="#E5E5E5"> mean normally we</font>

716
00:28:42,370 --> 00:28:45,040
<font color="#CCCCCC">just search around</font><font color="#E5E5E5"> for jailbreak but</font>

717
00:28:43,750 --> 00:28:47,080
it's right there because it's a tiny app

718
00:28:45,040 --> 00:28:48,879
and you can<font color="#E5E5E5"> see here we've</font><font color="#CCCCCC"> got an</font>

719
00:28:47,080 --> 00:28:50,830
instance method<font color="#CCCCCC"> that says check</font>

720
00:28:48,880 --> 00:28:52,840
jailbreak that returns a boolean value

721
00:28:50,830 --> 00:28:54,490
<font color="#E5E5E5">so likely what's doing the check</font><font color="#CCCCCC"> it's</font>

722
00:28:52,840 --> 00:28:58,080
<font color="#E5E5E5">returning you know true or false</font>

723
00:28:54,490 --> 00:29:01,900
<font color="#CCCCCC">depending whether it's whether it's</font>

724
00:28:58,080 --> 00:29:03,370
jailbroken or<font color="#E5E5E5"> not we can see here you</font>

725
00:29:01,900 --> 00:29:04,750
<font color="#E5E5E5">know trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do what we did with the</font>

726
00:29:03,370 --> 00:29:08,620
<font color="#E5E5E5">last one where we go</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> and we're</font>

727
00:29:04,750 --> 00:29:10,480
like<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> here's the different you know</font>

728
00:29:08,620 --> 00:29:12,520
instances of<font color="#E5E5E5"> that we're not finding it</font>

729
00:29:10,480 --> 00:29:14,470
right<font color="#E5E5E5"> but we see here is this class</font>

730
00:29:12,520 --> 00:29:17,680
method called shared jailbreak manager

731
00:29:14,470 --> 00:29:19,810
and that's<font color="#CCCCCC"> a common pattern</font><font color="#E5E5E5"> in iOS apps</font>

732
00:29:17,680 --> 00:29:22,360
it's called singleton pattern<font color="#CCCCCC"> basically</font>

733
00:29:19,810 --> 00:29:26,379
that returns the<font color="#CCCCCC"> any instance of that</font>

734
00:29:22,360 --> 00:29:27,850
class<font color="#E5E5E5"> typically so so basically you know</font>

735
00:29:26,380 --> 00:29:29,380
when you're going through a much larger

736
00:29:27,850 --> 00:29:31,149
more complex app<font color="#E5E5E5"> you know you do a</font>

737
00:29:29,380 --> 00:29:32,620
search<font color="#E5E5E5"> for shared you</font><font color="#CCCCCC"> can see you know</font>

738
00:29:31,150 --> 00:29:35,890
all<font color="#CCCCCC"> that</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of stuff so here I'm just</font>

739
00:29:32,620 --> 00:29:37,840
<font color="#E5E5E5">calling that that class method and it's</font>

740
00:29:35,890 --> 00:29:41,500
<font color="#E5E5E5">returning the an instance of jailbreak</font>

741
00:29:37,840 --> 00:29:44,980
<font color="#E5E5E5">manager which I can</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> use I'm</font>

742
00:29:41,500 --> 00:29:47,910
creating a<font color="#CCCCCC"> reference called JBM</font><font color="#E5E5E5"> to to</font>

743
00:29:44,980 --> 00:29:47,910
that<font color="#E5E5E5"> particular instance</font>

744
00:29:51,179 --> 00:29:58,980
and then I'm now going to call<font color="#E5E5E5"> that</font>

745
00:29:54,300 --> 00:30:01,690
instance method called<font color="#CCCCCC"> check jailbroken</font>

746
00:29:58,980 --> 00:30:06,429
using that reference that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> created and</font>

747
00:30:01,690 --> 00:30:09,040
that's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to return true right</font>

748
00:30:06,429 --> 00:30:11,290
because it is<font color="#E5E5E5"> jailbroken right</font><font color="#CCCCCC"> so what</font>

749
00:30:09,040 --> 00:30:12,850
we want<font color="#E5E5E5"> to do now</font><font color="#CCCCCC"> is change that to</font>

750
00:30:11,290 --> 00:30:15,250
return<font color="#E5E5E5"> false and see if that defeats the</font>

751
00:30:12,850 --> 00:30:16,480
check<font color="#E5E5E5"> right so this is where you know</font>

752
00:30:15,250 --> 00:30:17,950
you could you look for<font color="#E5E5E5"> things like</font>

753
00:30:16,480 --> 00:30:19,540
<font color="#E5E5E5">simple logic that can</font><font color="#CCCCCC"> be you know</font><font color="#E5E5E5"> like</font>

754
00:30:17,950 --> 00:30:21,429
<font color="#CCCCCC">flags that can</font><font color="#E5E5E5"> we switched over and</font>

755
00:30:19,540 --> 00:30:23,500
<font color="#E5E5E5">whatever so here we're</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> using the</font>

756
00:30:21,429 --> 00:30:25,530
syntax<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I spoke about</font><font color="#CCCCCC"> before where</font>

757
00:30:23,500 --> 00:30:31,690
you've got the class name dot prototype

758
00:30:25,530 --> 00:30:35,800
<font color="#E5E5E5">dot the method name and then</font><font color="#CCCCCC"> just equals</font>

759
00:30:31,690 --> 00:30:37,900
and<font color="#E5E5E5"> then we're</font><font color="#CCCCCC"> just you know changing</font><font color="#E5E5E5"> it</font>

760
00:30:35,800 --> 00:30:41,409
with an<font color="#E5E5E5"> honest</font><font color="#CCCCCC"> function that simply</font>

761
00:30:37,900 --> 00:30:44,470
returns false<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that will return false</font>

762
00:30:41,410 --> 00:30:46,330
<font color="#E5E5E5">all the time and now you can see</font>

763
00:30:44,470 --> 00:30:48,250
jailbreak check<font color="#E5E5E5"> pass right so we've now</font>

764
00:30:46,330 --> 00:30:52,800
defeated<font color="#E5E5E5"> that logic and now we're</font>

765
00:30:48,250 --> 00:30:52,800
<font color="#CCCCCC">Nelligan moving on</font>

766
00:30:56,950 --> 00:31:01,910
so yeah<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is just demonstrating the</font>

767
00:30:59,420 --> 00:31:03,920
choose functionality<font color="#E5E5E5"> right and why it's</font>

768
00:31:01,910 --> 00:31:05,870
<font color="#E5E5E5">useful so you saw how we could kind</font><font color="#CCCCCC"> of</font>

769
00:31:03,920 --> 00:31:08,120
navigate through<font color="#E5E5E5"> throughout the app to</font>

770
00:31:05,870 --> 00:31:11,989
get those instances<font color="#E5E5E5"> or choose just</font>

771
00:31:08,120 --> 00:31:14,510
returns all<font color="#CCCCCC"> the all the instances of a</font>

772
00:31:11,990 --> 00:31:16,940
particular class<font color="#E5E5E5"> in you know as an array</font>

773
00:31:14,510 --> 00:31:23,600
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can then just use which is</font>

774
00:31:16,940 --> 00:31:27,220
kinda<font color="#E5E5E5"> cool all right so you have more</font>

775
00:31:23,600 --> 00:31:29,659
<font color="#CCCCCC">Ness</font><font color="#E5E5E5"> so now we're going to look at the</font>

776
00:31:27,220 --> 00:31:31,520
authentication right<font color="#E5E5E5"> and see if we can</font>

777
00:31:29,660 --> 00:31:35,090
bypass that<font color="#CCCCCC"> because it's</font><font color="#E5E5E5"> just local auth</font>

778
00:31:31,520 --> 00:31:36,560
right<font color="#CCCCCC"> so here you know just to show what</font>

779
00:31:35,090 --> 00:31:38,689
it does again<font color="#CCCCCC"> you know you're typing in</font>

780
00:31:36,560 --> 00:31:40,490
a<font color="#E5E5E5"> password which</font><font color="#CCCCCC"> is incorrect you hit</font>

781
00:31:38,690 --> 00:31:42,470
<font color="#E5E5E5">login and says password incorrect</font><font color="#CCCCCC"> right</font>

782
00:31:40,490 --> 00:31:46,190
<font color="#E5E5E5">so we want to we want to see what we can</font>

783
00:31:42,470 --> 00:31:55,250
<font color="#E5E5E5">do so again going back to</font><font color="#CCCCCC"> the class</font>

784
00:31:46,190 --> 00:31:57,980
<font color="#CCCCCC">stamp so again simple understanding of</font>

785
00:31:55,250 --> 00:32:02,000
MVC right<font color="#CCCCCC"> where with the logic for this</font>

786
00:31:57,980 --> 00:32:04,220
<font color="#CCCCCC">beer I'd be in the control so so we've</font>

787
00:32:02,000 --> 00:32:07,790
got the<font color="#E5E5E5"> view control here you can see</font>

788
00:32:04,220 --> 00:32:09,440
here<font color="#E5E5E5"> you've got some buttons</font><font color="#CCCCCC"> and you</font>

789
00:32:07,790 --> 00:32:12,800
know some some different actions so

790
00:32:09,440 --> 00:32:14,780
likely<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be where this</font><font color="#E5E5E5"> is so you can</font>

791
00:32:12,800 --> 00:32:16,370
see<font color="#CCCCCC"> like login button pressed</font><font color="#E5E5E5"> so that's</font>

792
00:32:14,780 --> 00:32:18,410
obviously<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> something when</font><font color="#E5E5E5"> you press</font>

793
00:32:16,370 --> 00:32:20,570
the login<font color="#E5E5E5"> button</font><font color="#CCCCCC"> but then there's also</font>

794
00:32:18,410 --> 00:32:25,610
this other interesting one here<font color="#E5E5E5"> called</font>

795
00:32:20,570 --> 00:32:28,220
<font color="#E5E5E5">user is authenticated so we're going to</font>

796
00:32:25,610 --> 00:32:32,689
see is like<font color="#E5E5E5"> what happens if we call user</font>

797
00:32:28,220 --> 00:32:33,920
is authenticated directly so again we

798
00:32:32,690 --> 00:32:35,090
need<font color="#E5E5E5"> to get the instance of the view</font>

799
00:32:33,920 --> 00:32:37,820
controller<font color="#CCCCCC"> because it's an instance</font>

800
00:32:35,090 --> 00:32:39,169
method<font color="#E5E5E5"> which we're just using the same</font>

801
00:32:37,820 --> 00:32:43,389
<font color="#E5E5E5">technique</font><font color="#CCCCCC"> that we used before you're a</font>

802
00:32:39,170 --> 00:32:43,390
UI app<font color="#E5E5E5"> key window dot review controller</font>

803
00:32:45,280 --> 00:32:55,408
see that's the instance there and then

804
00:32:50,980 --> 00:32:55,409
we're just using<font color="#E5E5E5"> that and calling it</font>

805
00:33:03,390 --> 00:33:07,549
and it's<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> minimize</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> just so</font>

806
00:33:08,120 --> 00:33:11,939
yeah<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> just checking what it's</font>

807
00:33:09,990 --> 00:33:15,210
called<font color="#E5E5E5"> although you got tab-completion</font>

808
00:33:11,940 --> 00:33:17,010
<font color="#CCCCCC">scripts</font><font color="#E5E5E5"> so it doesn't really matter</font><font color="#CCCCCC"> so</font>

809
00:33:15,210 --> 00:33:19,350
minimize that so you can see that<font color="#E5E5E5"> it</font>

810
00:33:17,010 --> 00:33:22,950
works<font color="#CCCCCC"> and there you</font><font color="#E5E5E5"> go pass by correct</font>

811
00:33:19,350 --> 00:33:25,290
<font color="#E5E5E5">now this is</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> quite common in iOS</font>

812
00:33:22,950 --> 00:33:28,049
<font color="#E5E5E5">apps where you'll find this kind of</font>

813
00:33:25,290 --> 00:33:29,730
process where developers will kind<font color="#E5E5E5"> of</font>

814
00:33:28,049 --> 00:33:32,040
abstract everything away<font color="#E5E5E5"> so what they'll</font>

815
00:33:29,730 --> 00:33:33,540
do<font color="#E5E5E5"> is they'll do like the button was</font>

816
00:33:32,040 --> 00:33:35,790
pressed and then they'll call like it

817
00:33:33,540 --> 00:33:38,129
<font color="#E5E5E5">may be a check function to check you</font>

818
00:33:35,790 --> 00:33:40,350
know<font color="#E5E5E5"> check the creds or whatever then</font>

819
00:33:38,130 --> 00:33:42,210
after that it<font color="#E5E5E5"> will it will call like you</font>

820
00:33:40,350 --> 00:33:45,090
know now go and display<font color="#E5E5E5"> this view</font>

821
00:33:42,210 --> 00:33:47,520
<font color="#CCCCCC">controller right so what you can do with</font>

822
00:33:45,090 --> 00:33:49,860
that is<font color="#E5E5E5"> particularly its local off is if</font>

823
00:33:47,520 --> 00:33:51,270
you can you<font color="#E5E5E5"> know basically short-circuit</font>

824
00:33:49,860 --> 00:33:52,889
it and jump around the check<font color="#E5E5E5"> either you</font>

825
00:33:51,270 --> 00:33:55,379
could change the check<font color="#E5E5E5"> to return</font>

826
00:33:52,890 --> 00:33:57,000
whatever<font color="#E5E5E5"> you want it to be often it</font>

827
00:33:55,380 --> 00:33:59,970
<font color="#E5E5E5">won't work because it'll it'll require a</font>

828
00:33:57,000 --> 00:34:01,799
password input<font color="#CCCCCC"> that you don't know</font><font color="#E5E5E5"> but</font>

829
00:33:59,970 --> 00:34:03,540
you could<font color="#E5E5E5"> prove force it</font><font color="#CCCCCC"> maybe writing</font><font color="#E5E5E5"> a</font>

830
00:34:01,799 --> 00:34:05,100
little script or<font color="#CCCCCC"> you know you</font><font color="#E5E5E5"> just sort</font>

831
00:34:03,540 --> 00:34:06,960
<font color="#E5E5E5">of short-circuit it and go to hey you</font>

832
00:34:05,100 --> 00:34:09,179
know present this view controller<font color="#CCCCCC"> and if</font>

833
00:34:06,960 --> 00:34:10,379
it's local<font color="#CCCCCC"> or and it's sort of been</font>

834
00:34:09,179 --> 00:34:13,470
authenticated before<font color="#E5E5E5"> on this data</font>

835
00:34:10,379 --> 00:34:17,100
<font color="#CCCCCC">populating it it'll work for</font><font color="#E5E5E5"> apps that</font>

836
00:34:13,469 --> 00:34:19,138
use so like a<font color="#CCCCCC"> back-end</font><font color="#E5E5E5"> API to populate</font>

837
00:34:17,100 --> 00:34:21,029
<font color="#CCCCCC">it and it uses</font><font color="#E5E5E5"> sort of say typical</font>

838
00:34:19,139 --> 00:34:22,560
session<font color="#CCCCCC"> authentication that kind of</font>

839
00:34:21,030 --> 00:34:24,300
technique<font color="#E5E5E5"> doesn't really work</font><font color="#CCCCCC"> so even if</font>

840
00:34:22,560 --> 00:34:26,940
it<font color="#E5E5E5"> even if it is</font><font color="#CCCCCC"> possible to do that in</font>

841
00:34:24,300 --> 00:34:28,440
the app you know you'll jump<font color="#E5E5E5"> to that you</font>

842
00:34:26,940 --> 00:34:30,869
know view control but there'll be no no

843
00:34:28,440 --> 00:34:32,760
data right because it's not not able<font color="#CCCCCC"> to</font>

844
00:34:30,869 --> 00:34:36,450
you know<font color="#E5E5E5"> actually get it down from the</font>

845
00:34:32,760 --> 00:34:38,429
<font color="#E5E5E5">API</font><font color="#CCCCCC"> but you know there's a lot of</font><font color="#E5E5E5"> apps</font>

846
00:34:36,449 --> 00:34:40,888
that<font color="#E5E5E5"> do that are interesting that do use</font>

847
00:34:38,429 --> 00:34:42,840
<font color="#E5E5E5">local or the one that I didn't do here</font>

848
00:34:40,889 --> 00:34:44,669
but I usually<font color="#E5E5E5"> demo it is Evernote like</font>

849
00:34:42,840 --> 00:34:46,200
the<font color="#E5E5E5"> pinko controller</font><font color="#CCCCCC"> you know you can</font>

850
00:34:44,668 --> 00:34:49,368
<font color="#CCCCCC">easily bypass</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> and other things like</font>

851
00:34:46,199 --> 00:34:53,040
<font color="#CCCCCC">that</font><font color="#E5E5E5"> so cool</font>

852
00:34:49,369 --> 00:34:55,470
so next

853
00:34:53,040 --> 00:34:57,270
oh yeah that all I'm<font color="#E5E5E5"> showing here is</font>

854
00:34:55,469 --> 00:35:00,060
that that change that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> made to the</font>

855
00:34:57,270 --> 00:35:02,070
<font color="#E5E5E5">jailbreak check</font><font color="#CCCCCC"> that's at</font><font color="#E5E5E5"> run time so</font>

856
00:35:00,060 --> 00:35:05,310
when we<font color="#CCCCCC"> closed that app and we fire it</font>

857
00:35:02,070 --> 00:35:06,840
<font color="#E5E5E5">up again</font><font color="#CCCCCC"> it's not persistent</font><font color="#E5E5E5"> right so</font>

858
00:35:05,310 --> 00:35:08,279
<font color="#E5E5E5">it's saying now it's failed again</font><font color="#CCCCCC"> all</font>

859
00:35:06,840 --> 00:35:09,870
<font color="#E5E5E5">right so there are ways to make</font><font color="#CCCCCC"> it</font>

860
00:35:08,280 --> 00:35:12,120
persistent<font color="#E5E5E5"> and I'll go through some</font><font color="#CCCCCC"> of</font>

861
00:35:09,870 --> 00:35:14,490
them but<font color="#E5E5E5"> but yeah that's that's what</font>

862
00:35:12,120 --> 00:35:16,560
<font color="#E5E5E5">I'll show</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> let's move on to Freda</font>

863
00:35:14,490 --> 00:35:18,259
<font color="#E5E5E5">so</font><font color="#CCCCCC"> Frida's kind of the new hotness</font><font color="#E5E5E5"> when</font>

864
00:35:16,560 --> 00:35:21,150
it comes to<font color="#E5E5E5"> messing with mobile apps</font>

865
00:35:18,260 --> 00:35:22,770
<font color="#CCCCCC">it's from</font><font color="#E5E5E5"> their website a dynamic</font>

866
00:35:21,150 --> 00:35:24,180
instrumentation toolkit<font color="#E5E5E5"> for developers</font>

867
00:35:22,770 --> 00:35:26,310
reverse engineers and security

868
00:35:24,180 --> 00:35:28,710
researchers essentially<font color="#E5E5E5"> just inject</font>

869
00:35:26,310 --> 00:35:30,720
<font color="#CCCCCC">school's v8 engine into a process so you</font>

870
00:35:28,710 --> 00:35:32,310
can execute<font color="#CCCCCC"> Java in that the context of</font>

871
00:35:30,720 --> 00:35:35,040
that process access memory and<font color="#CCCCCC"> lack of</font>

872
00:35:32,310 --> 00:35:37,170
stuff<font color="#CCCCCC"> freely can be used in many ways</font>

873
00:35:35,040 --> 00:35:39,150
and<font color="#CCCCCC"> it's really great</font><font color="#E5E5E5"> sort of framework</font>

874
00:35:37,170 --> 00:35:41,880
toolkit and<font color="#E5E5E5"> I recommend looking</font><font color="#CCCCCC"> into it</font>

875
00:35:39,150 --> 00:35:43,410
<font color="#CCCCCC">it has many</font><font color="#E5E5E5"> different bindings all</font>

876
00:35:41,880 --> 00:35:44,700
different kinds of languages<font color="#E5E5E5"> that you're</font>

877
00:35:43,410 --> 00:35:46,490
familiar with<font color="#E5E5E5"> so if you don't like</font>

878
00:35:44,700 --> 00:35:48,810
JavaScript there's Python and<font color="#CCCCCC"> whatever</font>

879
00:35:46,490 --> 00:35:51,060
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> mainly</font><font color="#CCCCCC"> used to write scripts</font><font color="#E5E5E5"> and</font>

880
00:35:48,810 --> 00:35:52,350
<font color="#E5E5E5">pools but it cannot also it also comes</font>

881
00:35:51,060 --> 00:35:53,610
bundled with a bunch of<font color="#E5E5E5"> tools</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

882
00:35:52,350 --> 00:35:55,440
can use to get an idea<font color="#CCCCCC"> of what it's</font>

883
00:35:53,610 --> 00:35:57,450
capable of<font color="#E5E5E5"> help you with your scripts</font>

884
00:35:55,440 --> 00:35:59,070
and stuff<font color="#E5E5E5"> like that those new tools</font><font color="#CCCCCC"> that</font>

885
00:35:57,450 --> 00:36:01,500
I mentioned<font color="#CCCCCC"> earlier the style of</font>

886
00:35:59,070 --> 00:36:03,990
<font color="#E5E5E5">presentation utilized</font><font color="#CCCCCC"> Frida</font><font color="#E5E5E5"> and rely on</font>

887
00:36:01,500 --> 00:36:06,420
<font color="#CCCCCC">it and often quite heavily so it's good</font>

888
00:36:03,990 --> 00:36:07,589
to understand how<font color="#CCCCCC"> food works</font><font color="#E5E5E5"> so freely</font>

889
00:36:06,420 --> 00:36:09,270
comes bundled with some tools that<font color="#E5E5E5"> you</font>

890
00:36:07,590 --> 00:36:11,040
<font color="#E5E5E5">can use right</font><font color="#CCCCCC"> off the bat</font><font color="#E5E5E5"> so forgetting</font>

891
00:36:09,270 --> 00:36:14,509
about<font color="#E5E5E5"> writing scripts</font><font color="#CCCCCC"> you've got free to</font>

892
00:36:11,040 --> 00:36:16,950
<font color="#CCCCCC">CLA free to PS</font><font color="#E5E5E5"> for your trace etc etc</font>

893
00:36:14,510 --> 00:36:18,510
<font color="#CCCCCC">free to CLI and free to Trey</font><font color="#E5E5E5"> so probably</font>

894
00:36:16,950 --> 00:36:21,629
the<font color="#E5E5E5"> ones you that are most immediately</font>

895
00:36:18,510 --> 00:36:24,180
useful<font color="#E5E5E5"> for pen testing I'm going to go</font>

896
00:36:21,630 --> 00:36:27,090
<font color="#E5E5E5">into that</font><font color="#CCCCCC"> a second</font><font color="#E5E5E5"> so now</font><font color="#CCCCCC"> we're looking</font>

897
00:36:24,180 --> 00:36:29,640
<font color="#E5E5E5">at the second jailbreak check right</font><font color="#CCCCCC"> so</font>

898
00:36:27,090 --> 00:36:31,800
you<font color="#E5E5E5"> won't be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to read it but it</font><font color="#CCCCCC"> says</font>

899
00:36:29,640 --> 00:36:34,770
jailbreak check fails<font color="#E5E5E5"> look harder for</font>

900
00:36:31,800 --> 00:36:37,800
the check<font color="#E5E5E5"> right so the text is kind of</font>

901
00:36:34,770 --> 00:36:41,550
<font color="#E5E5E5">different</font><font color="#CCCCCC"> and I'll explain</font><font color="#E5E5E5"> why that</font><font color="#CCCCCC"> is</font>

902
00:36:37,800 --> 00:36:43,350
in second so<font color="#CCCCCC"> okay</font>

903
00:36:41,550 --> 00:36:45,330
following the<font color="#CCCCCC"> process</font><font color="#E5E5E5"> that we've we've</font>

904
00:36:43,350 --> 00:36:46,589
become<font color="#CCCCCC"> used to we go back to the class</font>

905
00:36:45,330 --> 00:36:48,450
<font color="#CCCCCC">done we start looking for</font><font color="#E5E5E5"> jailbreak</font>

906
00:36:46,590 --> 00:36:50,190
right<font color="#E5E5E5"> come up</font><font color="#CCCCCC"> with the jailbreak</font><font color="#E5E5E5"> manager</font>

907
00:36:48,450 --> 00:36:51,950
but that was for<font color="#E5E5E5"> the last one right it's</font>

908
00:36:50,190 --> 00:36:54,210
obviously not controlling this other one

909
00:36:51,950 --> 00:36:55,560
<font color="#E5E5E5">so you</font><font color="#CCCCCC"> know and then it's just</font><font color="#E5E5E5"> going</font>

910
00:36:54,210 --> 00:36:56,910
<font color="#E5E5E5">through like the buttons and</font><font color="#CCCCCC"> the other</font>

911
00:36:55,560 --> 00:36:59,350
references to<font color="#CCCCCC"> the jailbreak check</font>

912
00:36:56,910 --> 00:37:02,229
buttons<font color="#E5E5E5"> and all that</font>

913
00:36:59,350 --> 00:37:05,509
[Music]

914
00:37:02,229 --> 00:37:07,999
and<font color="#CCCCCC"> just so you might start looking for</font>

915
00:37:05,509 --> 00:37:09,439
<font color="#E5E5E5">like</font><font color="#CCCCCC"> route or like check or whatever in</font>

916
00:37:07,999 --> 00:37:11,569
it and it you know it's<font color="#E5E5E5"> not really</font>

917
00:37:09,439 --> 00:37:14,719
working<font color="#CCCCCC"> because</font><font color="#E5E5E5"> it's not there</font><font color="#CCCCCC"> alright</font>

918
00:37:11,569 --> 00:37:18,140
<font color="#E5E5E5">so what can</font><font color="#CCCCCC"> you do this is common like</font>

919
00:37:14,719 --> 00:37:20,959
developers will kind of try<font color="#CCCCCC"> and hide you</font>

920
00:37:18,140 --> 00:37:22,759
know<font color="#E5E5E5"> these sorts of checks</font><font color="#CCCCCC"> like ones</font>

921
00:37:20,959 --> 00:37:25,069
<font color="#E5E5E5">that come</font><font color="#CCCCCC"> across like you know for a</font>

922
00:37:22,759 --> 00:37:27,589
banking app it's like<font color="#E5E5E5"> you know get store</font>

923
00:37:25,069 --> 00:37:29,479
location or<font color="#E5E5E5"> whatever right and they try</font>

924
00:37:27,589 --> 00:37:31,729
<font color="#E5E5E5">to hide it</font><font color="#CCCCCC"> I have one where like they</font>

925
00:37:29,479 --> 00:37:34,189
just<font color="#E5E5E5"> made all the security stuff like</font>

926
00:37:31,729 --> 00:37:36,288
random strings<font color="#E5E5E5"> which just made us stand</font>

927
00:37:34,189 --> 00:37:37,999
out<font color="#E5E5E5"> in the class dump I'm like well I'm</font>

928
00:37:36,289 --> 00:37:39,739
<font color="#CCCCCC">gonna look at those right and amazed</font>

929
00:37:37,999 --> 00:37:42,019
must have been like<font color="#CCCCCC"> really difficult to</font>

930
00:37:39,739 --> 00:37:43,549
<font color="#E5E5E5">UM to code</font><font color="#CCCCCC"> it's about a little trick</font>

931
00:37:42,019 --> 00:37:45,019
<font color="#CCCCCC">could I do in those</font><font color="#E5E5E5"> sort of instances as</font>

932
00:37:43,549 --> 00:37:46,519
I look at the text right<font color="#E5E5E5"> so usually</font>

933
00:37:45,019 --> 00:37:47,959
there'll be a<font color="#E5E5E5"> pop up you can see that</font>

934
00:37:46,519 --> 00:37:49,819
the text<font color="#E5E5E5"> is</font><font color="#CCCCCC"> different well</font><font color="#E5E5E5"> you can't see</font>

935
00:37:47,959 --> 00:37:51,739
<font color="#E5E5E5">it but I'll you know I'll vouch for it</font>

936
00:37:49,819 --> 00:37:54,619
<font color="#CCCCCC">it's differences look harder for the</font>

937
00:37:51,739 --> 00:37:59,150
check<font color="#E5E5E5"> right so</font><font color="#CCCCCC"> a cool technique to use</font>

938
00:37:54,619 --> 00:38:01,189
is you fire up a disassembler<font color="#CCCCCC"> and you</font>

939
00:37:59,150 --> 00:38:03,670
look for that<font color="#CCCCCC"> you look</font><font color="#E5E5E5"> for that string</font>

940
00:38:01,189 --> 00:38:07,959
<font color="#E5E5E5">right and see where it's been being</font><font color="#CCCCCC"> used</font>

941
00:38:03,670 --> 00:38:10,279
so<font color="#E5E5E5"> just firing up</font><font color="#CCCCCC"> I to here</font><font color="#E5E5E5"> and</font>

942
00:38:07,959 --> 00:38:13,249
basically going<font color="#E5E5E5"> and</font><font color="#CCCCCC"> doing a search for</font>

943
00:38:10,279 --> 00:38:15,650
that<font color="#E5E5E5"> string I've used this multiple</font>

944
00:38:13,249 --> 00:38:18,259
times<font color="#E5E5E5"> on on tests to sort of see where</font>

945
00:38:15,650 --> 00:38:20,719
<font color="#E5E5E5">these hidden jailbreak texts are checks</font>

946
00:38:18,259 --> 00:38:22,969
are or other kind of sensitive stuff and

947
00:38:20,719 --> 00:38:24,949
so<font color="#E5E5E5"> you can see here well you know you</font>

948
00:38:22,969 --> 00:38:28,219
can't<font color="#E5E5E5"> it's in the view controller</font><font color="#CCCCCC"> this</font>

949
00:38:24,949 --> 00:38:29,630
jailbreak check<font color="#E5E5E5"> to button is kind</font><font color="#CCCCCC"> of</font>

950
00:38:28,219 --> 00:38:31,459
being referenced here<font color="#CCCCCC"> you can see</font>

951
00:38:29,630 --> 00:38:32,959
there's sort<font color="#E5E5E5"> of two branches on that</font>

952
00:38:31,459 --> 00:38:34,359
right<font color="#CCCCCC"> right-hand side where my</font><font color="#E5E5E5"> mouse</font><font color="#CCCCCC"> is</font>

953
00:38:32,959 --> 00:38:36,828
that the positive brands<font color="#E5E5E5"> where it says</font>

954
00:38:34,359 --> 00:38:38,239
<font color="#E5E5E5">you know you're not jailbroken and this</font>

955
00:38:36,829 --> 00:38:40,130
is the one that<font color="#E5E5E5"> has the text that says</font>

956
00:38:38,239 --> 00:38:42,049
you know look harder for the check so

957
00:38:40,130 --> 00:38:43,699
this is<font color="#CCCCCC"> obviously what's happening so if</font>

958
00:38:42,049 --> 00:38:46,849
you scroll<font color="#CCCCCC"> up to before that</font><font color="#E5E5E5"> kind of</font>

959
00:38:43,699 --> 00:38:47,989
branch<font color="#CCCCCC"> you can't see the text here but</font>

960
00:38:46,849 --> 00:38:49,759
what I was<font color="#E5E5E5"> trying to point out here is</font>

961
00:38:47,989 --> 00:38:52,099
<font color="#CCCCCC">like</font><font color="#E5E5E5"> you don't even need</font><font color="#CCCCCC"> to really</font>

962
00:38:49,759 --> 00:38:53,630
<font color="#E5E5E5">understand any of this assembly to kind</font>

963
00:38:52,099 --> 00:38:55,579
<font color="#E5E5E5">of understand what's going on that's</font>

964
00:38:53,630 --> 00:38:57,829
saying shared application<font color="#E5E5E5"> the next</font>

965
00:38:55,579 --> 00:39:00,140
string<font color="#E5E5E5"> down is delegate the next string</font>

966
00:38:57,829 --> 00:39:02,359
down is a function name<font color="#E5E5E5"> so basically</font>

967
00:39:00,140 --> 00:39:04,219
what<font color="#E5E5E5"> that's saying is that there's this</font>

968
00:39:02,359 --> 00:39:06,979
<font color="#CCCCCC">function that's being</font><font color="#E5E5E5"> called that's</font>

969
00:39:04,219 --> 00:39:10,489
named that which you can't read<font color="#E5E5E5"> um and</font>

970
00:39:06,979 --> 00:39:11,899
it's in the it's in the app delegate<font color="#E5E5E5"> so</font>

971
00:39:10,489 --> 00:39:13,130
let's go back<font color="#CCCCCC"> to our class</font><font color="#E5E5E5"> staff and go</font>

972
00:39:11,900 --> 00:39:15,219
back to the app delegate<font color="#E5E5E5"> and have a look</font>

973
00:39:13,130 --> 00:39:15,219
at

974
00:39:16,539 --> 00:39:20,779
<font color="#E5E5E5">to have a look at the app delegate</font>

975
00:39:18,410 --> 00:39:22,399
there's that method and it kind of looks

976
00:39:20,779 --> 00:39:23,660
very similar<font color="#CCCCCC"> to the other</font><font color="#E5E5E5"> methods but if</font>

977
00:39:22,400 --> 00:39:25,400
you've<font color="#E5E5E5"> done a lot of iOS testing you'll</font>

978
00:39:23,660 --> 00:39:26,779
see all those other methods<font color="#E5E5E5"> of</font>

979
00:39:25,400 --> 00:39:28,339
<font color="#E5E5E5">boilerplate methods for like state</font>

980
00:39:26,779 --> 00:39:31,369
transition stuff that<font color="#E5E5E5"> automatically get</font>

981
00:39:28,339 --> 00:39:33,619
<font color="#E5E5E5">generated for you</font><font color="#CCCCCC"> and this one was</font><font color="#E5E5E5"> kind</font>

982
00:39:31,369 --> 00:39:35,599
of designed<font color="#CCCCCC"> to be a bit sneaky and and</font>

983
00:39:33,619 --> 00:39:38,150
kind of blend<font color="#E5E5E5"> in with that</font>

984
00:39:35,599 --> 00:39:40,099
it's called<font color="#E5E5E5"> application terminates after</font>

985
00:39:38,150 --> 00:39:43,940
background and it and it returns a

986
00:39:40,099 --> 00:39:47,599
boolean value<font color="#E5E5E5"> so basically written a</font>

987
00:39:43,940 --> 00:39:49,279
script in<font color="#CCCCCC"> frida to modify that right so</font>

988
00:39:47,599 --> 00:39:52,009
the first<font color="#CCCCCC"> variable there is</font><font color="#E5E5E5"> just the</font>

989
00:39:49,279 --> 00:39:54,680
class name then the function that<font color="#E5E5E5"> we're</font>

990
00:39:52,009 --> 00:39:56,390
hooking so that was what we<font color="#E5E5E5"> found then</font>

991
00:39:54,680 --> 00:39:58,279
<font color="#E5E5E5">the next is just building a hook string</font>

992
00:39:56,390 --> 00:40:02,440
and then<font color="#E5E5E5"> this is really what it's doing</font>

993
00:39:58,279 --> 00:40:07,059
<font color="#E5E5E5">so this is the Interceptor is basically</font>

994
00:40:02,440 --> 00:40:09,319
<font color="#E5E5E5">attaching and using the hook and then</font>

995
00:40:07,059 --> 00:40:12,259
and basically<font color="#E5E5E5"> saying change the</font>

996
00:40:09,319 --> 00:40:15,140
implementation<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> it's calling</font>

997
00:40:12,259 --> 00:40:16,999
this<font color="#CCCCCC"> javascript function here which is</font>

998
00:40:15,140 --> 00:40:19,460
all it's<font color="#E5E5E5"> doing like the rest is</font><font color="#CCCCCC"> just</font>

999
00:40:16,999 --> 00:40:22,779
sort of<font color="#E5E5E5"> a console output but all that's</font>

1000
00:40:19,460 --> 00:40:26,119
doing is taking the<font color="#E5E5E5"> the return value and</font>

1001
00:40:22,779 --> 00:40:28,430
changing it to<font color="#CCCCCC"> 0 from 1 so changing it</font>

1002
00:40:26,119 --> 00:40:30,979
from from true to false and so it<font color="#E5E5E5"> will</font>

1003
00:40:28,430 --> 00:40:35,598
<font color="#CCCCCC">always return 0 which</font><font color="#E5E5E5"> will be false so</font>

1004
00:40:30,979 --> 00:40:37,609
<font color="#CCCCCC">if we go back to</font><font color="#E5E5E5"> freedom</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that all I'm</font>

1005
00:40:35,599 --> 00:40:44,469
doing here is free<font color="#E5E5E5"> to - you which is</font>

1006
00:40:37,609 --> 00:40:48,259
connecting to<font color="#E5E5E5"> my my USB device then I'm</font>

1007
00:40:44,469 --> 00:40:50,479
referencing<font color="#E5E5E5"> the script injecting into</font>

1008
00:40:48,259 --> 00:40:53,779
<font color="#E5E5E5">that so just</font><font color="#CCCCCC"> checking</font><font color="#E5E5E5"> that it was still</font>

1009
00:40:50,479 --> 00:40:57,769
failing<font color="#E5E5E5"> at that point</font><font color="#CCCCCC"> just so</font><font color="#E5E5E5"> you could</font>

1010
00:40:53,779 --> 00:40:59,900
see<font color="#E5E5E5"> that and now I you know it's now</font>

1011
00:40:57,769 --> 00:41:01,249
<font color="#CCCCCC">Frieda's running and</font><font color="#E5E5E5"> I hit that</font><font color="#CCCCCC"> button</font>

1012
00:40:59,900 --> 00:41:05,089
you can see now it says<font color="#CCCCCC"> jar a check</font>

1013
00:41:01,249 --> 00:41:06,319
<font color="#CCCCCC">passed right so so that's now and every</font>

1014
00:41:05,089 --> 00:41:08,779
<font color="#E5E5E5">time you press it it's running that</font>

1015
00:41:06,319 --> 00:41:10,880
function<font color="#E5E5E5"> and you know it's it's changing</font>

1016
00:41:08,779 --> 00:41:13,849
the return value so<font color="#E5E5E5"> I'll bypass that</font>

1017
00:41:10,880 --> 00:41:16,190
check<font color="#CCCCCC"> and that's a</font><font color="#E5E5E5"> that's often a more</font>

1018
00:41:13,849 --> 00:41:17,059
<font color="#E5E5E5">persistent way to do it on a pen test if</font>

1019
00:41:16,190 --> 00:41:18,670
<font color="#E5E5E5">you like things a little bit more</font>

1020
00:41:17,059 --> 00:41:22,400
persistent

1021
00:41:18,670 --> 00:41:24,890
<font color="#CCCCCC">all right let's race through Swift apps</font>

1022
00:41:22,400 --> 00:41:27,200
because I don't have<font color="#CCCCCC"> a lot of time but</font>

1023
00:41:24,890 --> 00:41:29,420
<font color="#E5E5E5">yeah so as I said increasingly</font>

1024
00:41:27,200 --> 00:41:31,430
developers using<font color="#CCCCCC"> Swift apps right</font><font color="#E5E5E5"> iOS</font>

1025
00:41:29,420 --> 00:41:33,020
code<font color="#CCCCCC"> it's impacting some of the</font>

1026
00:41:31,430 --> 00:41:34,368
techniques and tools that<font color="#E5E5E5"> you know you</font>

1027
00:41:33,020 --> 00:41:36,500
would usually use<font color="#CCCCCC"> for objective-c</font>

1028
00:41:34,369 --> 00:41:38,930
applications<font color="#E5E5E5"> that we discussed</font><font color="#CCCCCC"> in</font>

1029
00:41:36,500 --> 00:41:40,579
general mobile<font color="#E5E5E5"> app security sense like</font>

1030
00:41:38,930 --> 00:41:42,230
testing Swift apps isn't actually<font color="#CCCCCC"> all</font>

1031
00:41:40,579 --> 00:41:44,240
that different except<font color="#E5E5E5"> for some of the</font>

1032
00:41:42,230 --> 00:41:46,849
stuff that we'll be talking<font color="#E5E5E5"> about most</font>

1033
00:41:44,240 --> 00:41:48,399
issues<font color="#E5E5E5"> in iOS apps</font><font color="#CCCCCC"> like any</font><font color="#E5E5E5"> other app</font>

1034
00:41:46,849 --> 00:41:50,750
<font color="#E5E5E5">rights due to poor</font><font color="#CCCCCC"> design decisions</font>

1035
00:41:48,400 --> 00:41:52,940
<font color="#CCCCCC">misconfigurations</font><font color="#E5E5E5"> or like incorrect</font>

1036
00:41:50,750 --> 00:41:54,320
implementation of like system frameworks

1037
00:41:52,940 --> 00:41:55,910
their party<font color="#CCCCCC"> frameworks stuff like that</font>

1038
00:41:54,320 --> 00:41:56,930
but<font color="#E5E5E5"> yeah what's really changed is how</font>

1039
00:41:55,910 --> 00:42:00,290
you sort<font color="#CCCCCC"> of</font><font color="#E5E5E5"> reverse engineer the</font>

1040
00:41:56,930 --> 00:42:02,089
application<font color="#CCCCCC"> so Swift everybody</font><font color="#E5E5E5"> kind of</font>

1041
00:42:00,290 --> 00:42:04,359
knows about Swift like I'm rushing

1042
00:42:02,089 --> 00:42:07,190
<font color="#E5E5E5">through some of these less relevant bits</font>

1043
00:42:04,359 --> 00:42:08,930
<font color="#E5E5E5">it's created by Apple eventually it's</font>

1044
00:42:07,190 --> 00:42:11,060
going<font color="#E5E5E5"> to you know the</font><font color="#CCCCCC"> idea is that it</font>

1045
00:42:08,930 --> 00:42:12,379
<font color="#E5E5E5">replaces objective-c</font><font color="#CCCCCC"> um here's the basic</font>

1046
00:42:11,060 --> 00:42:15,349
syntax<font color="#CCCCCC"> it's a lot cleaner than</font>

1047
00:42:12,380 --> 00:42:16,940
<font color="#CCCCCC">objective-c</font><font color="#E5E5E5"> you've got mutable values</font>

1048
00:42:15,349 --> 00:42:20,000
and<font color="#CCCCCC"> immutable values</font><font color="#E5E5E5"> letting var and</font>

1049
00:42:16,940 --> 00:42:21,560
then you it<font color="#CCCCCC"> swift in first</font><font color="#E5E5E5"> type but you</font>

1050
00:42:20,000 --> 00:42:23,510
can be explicit<font color="#CCCCCC"> with your type as well</font>

1051
00:42:21,560 --> 00:42:27,109
which<font color="#CCCCCC"> is with the</font><font color="#E5E5E5"> call and in the type</font>

1052
00:42:23,510 --> 00:42:28,160
this is a class declaration<font color="#E5E5E5"> so you know</font>

1053
00:42:27,109 --> 00:42:29,720
class and then you've got your

1054
00:42:28,160 --> 00:42:32,810
properties<font color="#E5E5E5"> get</font><font color="#CCCCCC"> a property with the</font>

1055
00:42:29,720 --> 00:42:35,089
default value yeah cool<font color="#E5E5E5"> ten minutes</font>

1056
00:42:32,810 --> 00:42:37,759
<font color="#CCCCCC">probably with value then you've got your</font>

1057
00:42:35,089 --> 00:42:39,259
initializer<font color="#E5E5E5"> which basically you know</font>

1058
00:42:37,760 --> 00:42:40,550
initializes any of the properties that

1059
00:42:39,260 --> 00:42:42,200
don't<font color="#E5E5E5"> have a default because obviously</font>

1060
00:42:40,550 --> 00:42:44,990
you<font color="#E5E5E5"> know when it gets initialized it</font>

1061
00:42:42,200 --> 00:42:48,710
just uses a<font color="#E5E5E5"> default value the class</font>

1062
00:42:44,990 --> 00:42:51,500
functions class methods<font color="#E5E5E5"> are denoted by</font>

1063
00:42:48,710 --> 00:42:54,140
the class keyword and then functions to

1064
00:42:51,500 --> 00:42:55,869
dinner by<font color="#CCCCCC"> the func keyword and so your</font>

1065
00:42:54,140 --> 00:42:58,009
class methods instance methods

1066
00:42:55,869 --> 00:43:01,579
parameters<font color="#E5E5E5"> the only thing that's really</font>

1067
00:42:58,010 --> 00:43:03,619
<font color="#E5E5E5">kind of interesting here is here with</font>

1068
00:43:01,579 --> 00:43:05,480
<font color="#E5E5E5">this one where it's like instance method</font>

1069
00:43:03,619 --> 00:43:06,950
with an exported parameter name<font color="#E5E5E5"> so you</font>

1070
00:43:05,480 --> 00:43:08,810
look here you've just got the parameter

1071
00:43:06,950 --> 00:43:10,609
name and the type here you've got an

1072
00:43:08,810 --> 00:43:12,470
<font color="#E5E5E5">exported parameter name and then the</font>

1073
00:43:10,609 --> 00:43:14,299
parameter name and the type<font color="#E5E5E5"> and that'll</font>

1074
00:43:12,470 --> 00:43:16,069
that'll I'll explain why that's relevant

1075
00:43:14,300 --> 00:43:18,050
<font color="#CCCCCC">and then you've got the little dash and</font>

1076
00:43:16,069 --> 00:43:19,369
the return<font color="#E5E5E5"> type and which is boolean and</font>

1077
00:43:18,050 --> 00:43:22,819
then you've got you know you do you

1078
00:43:19,369 --> 00:43:24,859
implementations cool<font color="#CCCCCC"> and then so yeah</font><font color="#E5E5E5"> to</font>

1079
00:43:22,819 --> 00:43:27,339
initialize a class it's just class and

1080
00:43:24,859 --> 00:43:29,598
then you pass<font color="#E5E5E5"> it the</font>

1081
00:43:27,339 --> 00:43:31,940
the various sort of property values<font color="#E5E5E5"> that</font>

1082
00:43:29,599 --> 00:43:33,349
you need to initialize it<font color="#E5E5E5"> and then</font>

1083
00:43:31,940 --> 00:43:34,700
<font color="#CCCCCC">calling class method right like</font>

1084
00:43:33,349 --> 00:43:36,800
Objective C is<font color="#E5E5E5"> just calling</font><font color="#CCCCCC"> on the</font>

1085
00:43:34,700 --> 00:43:38,480
actual class and then instance methods

1086
00:43:36,800 --> 00:43:41,150
you get called on the

1087
00:43:38,480 --> 00:43:42,920
on the actual<font color="#E5E5E5"> object and then with an</font>

1088
00:43:41,150 --> 00:43:45,710
exported parameter name you need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> put</font>

1089
00:43:42,920 --> 00:43:47,450
in that<font color="#E5E5E5"> exported name whereas in the</font>

1090
00:43:45,710 --> 00:43:49,520
<font color="#E5E5E5">previous in the middle example you don't</font>

1091
00:43:47,450 --> 00:43:50,779
<font color="#CCCCCC">actually need to</font><font color="#E5E5E5"> put</font><font color="#CCCCCC"> in the parameter</font>

1092
00:43:49,520 --> 00:43:54,020
name right just put in the<font color="#E5E5E5"> actual</font>

1093
00:43:50,780 --> 00:43:56,290
argument so<font color="#E5E5E5"> you know all the useful sort</font>

1094
00:43:54,020 --> 00:43:58,430
of types are there<font color="#CCCCCC"> I'll skip that</font>

1095
00:43:56,290 --> 00:44:01,160
<font color="#CCCCCC">subject to</font><font color="#E5E5E5"> see compatibility and</font>

1096
00:43:58,430 --> 00:44:04,160
interrupt<font color="#CCCCCC"> so it uses the</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> runtime</font>

1097
00:44:01,160 --> 00:44:06,440
environment<font color="#E5E5E5"> still supports C and C++ in</font>

1098
00:44:04,160 --> 00:44:08,629
the same map<font color="#E5E5E5"> but you can't call C and</font>

1099
00:44:06,440 --> 00:44:10,730
C++<font color="#E5E5E5"> app unless has changed in the same</font>

1100
00:44:08,630 --> 00:44:12,619
app from Swift<font color="#E5E5E5"> like you can with</font>

1101
00:44:10,730 --> 00:44:13,700
<font color="#E5E5E5">Objective C you kind of have</font><font color="#CCCCCC"> to go</font>

1102
00:44:12,619 --> 00:44:15,890
through a bridge or just have<font color="#E5E5E5"> it a</font>

1103
00:44:13,700 --> 00:44:17,509
self-contained<font color="#E5E5E5"> code</font><font color="#CCCCCC"> it can</font><font color="#E5E5E5"> allow for</font>

1104
00:44:15,890 --> 00:44:18,440
<font color="#E5E5E5">some dynamic features and runtime</font><font color="#CCCCCC"> an</font>

1105
00:44:17,510 --> 00:44:20,240
<font color="#CCCCCC">emulation when you've got</font><font color="#E5E5E5"> that</font>

1106
00:44:18,440 --> 00:44:23,210
<font color="#E5E5E5">interrupts which is most applications</font>

1107
00:44:20,240 --> 00:44:25,490
<font color="#E5E5E5">these</font><font color="#CCCCCC"> days still</font><font color="#E5E5E5"> other Swift features</font>

1108
00:44:23,210 --> 00:44:30,829
barely scratch the<font color="#E5E5E5"> surface</font><font color="#CCCCCC"> unicode so</font>

1109
00:44:25,490 --> 00:44:33,109
that's like valid<font color="#E5E5E5"> Swift yeah cool so</font>

1110
00:44:30,829 --> 00:44:34,880
reverse engineering Swift applications

1111
00:44:33,109 --> 00:44:37,098
<font color="#CCCCCC">so there</font><font color="#E5E5E5"> are some</font><font color="#CCCCCC"> challenges in</font>

1112
00:44:34,880 --> 00:44:39,079
<font color="#E5E5E5">reversing Swift applications it's less</font>

1113
00:44:37,099 --> 00:44:41,960
<font color="#CCCCCC">dynamic than</font><font color="#E5E5E5"> objective-c and less</font>

1114
00:44:39,079 --> 00:44:43,460
flexible<font color="#CCCCCC"> so it can</font><font color="#E5E5E5"> make it harder to get</font>

1115
00:44:41,960 --> 00:44:45,740
<font color="#E5E5E5">some of the</font><font color="#CCCCCC"> information that you get out</font>

1116
00:44:43,460 --> 00:44:48,980
<font color="#E5E5E5">of like the objective-c like the class</font>

1117
00:44:45,740 --> 00:44:51,129
dump and stuff like that<font color="#E5E5E5"> it's less of an</font>

1118
00:44:48,980 --> 00:44:54,349
<font color="#E5E5E5">issue</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> when you've got a mixed</font>

1119
00:44:51,130 --> 00:44:57,319
application<font color="#E5E5E5"> and but you know it's still</font>

1120
00:44:54,349 --> 00:44:58,880
<font color="#E5E5E5">still harder it's limited tooling much</font>

1121
00:44:57,319 --> 00:45:01,490
the tooling isn't<font color="#E5E5E5"> being updated for</font>

1122
00:44:58,880 --> 00:45:06,170
<font color="#E5E5E5">Swift and</font><font color="#CCCCCC"> we'll yeah we'll go</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> that</font>

1123
00:45:01,490 --> 00:45:07,609
<font color="#CCCCCC">in more detail so you know as we went</font>

1124
00:45:06,170 --> 00:45:09,260
<font color="#CCCCCC">through</font><font color="#E5E5E5"> right the moment the</font><font color="#CCCCCC"> co most</font>

1125
00:45:07,609 --> 00:45:11,000
common easiest way to retrieve<font color="#CCCCCC"> classes</font>

1126
00:45:09,260 --> 00:45:12,290
that<font color="#E5E5E5"> are from</font><font color="#CCCCCC"> gypsy</font><font color="#E5E5E5"> binary</font><font color="#CCCCCC"> its class</font>

1127
00:45:11,000 --> 00:45:14,030
type utility<font color="#CCCCCC"> it's one of the</font><font color="#E5E5E5"> first</font>

1128
00:45:12,290 --> 00:45:17,089
things you do<font color="#E5E5E5"> you've seen how useful it</font>

1129
00:45:14,030 --> 00:45:19,040
is this is well this<font color="#CCCCCC"> is what happens</font>

1130
00:45:17,089 --> 00:45:21,049
when<font color="#E5E5E5"> we run class dump</font><font color="#CCCCCC"> Z up the top and</font>

1131
00:45:19,040 --> 00:45:24,470
<font color="#CCCCCC">just end the regular</font><font color="#E5E5E5"> class style utility</font>

1132
00:45:21,050 --> 00:45:27,130
on our pure<font color="#E5E5E5"> Swift app yet nothing back</font>

1133
00:45:24,470 --> 00:45:30,290
right it doesn't<font color="#E5E5E5"> work</font><font color="#CCCCCC"> alright sad face</font>

1134
00:45:27,130 --> 00:45:32,780
<font color="#E5E5E5">so what's next so class</font><font color="#CCCCCC"> x there</font><font color="#E5E5E5"> in class</font>

1135
00:45:30,290 --> 00:45:34,759
<font color="#E5E5E5">time don't work with</font><font color="#CCCCCC"> swift binaries now</font>

1136
00:45:32,780 --> 00:45:36,740
what let's<font color="#CCCCCC"> start diving into</font><font color="#E5E5E5"> the binary</font>

1137
00:45:34,760 --> 00:45:37,970
<font color="#E5E5E5">so what happens if we dump the symbol</font>

1138
00:45:36,740 --> 00:45:39,919
table well we<font color="#E5E5E5"> get some</font><font color="#CCCCCC"> interesting</font>

1139
00:45:37,970 --> 00:45:42,020
information<font color="#CCCCCC"> that</font><font color="#E5E5E5"> looks kind of</font>

1140
00:45:39,920 --> 00:45:44,569
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of looks</font><font color="#CCCCCC"> like some</font>

1141
00:45:42,020 --> 00:45:46,250
class information<font color="#E5E5E5"> there so</font><font color="#CCCCCC"> what happens</font>

1142
00:45:44,569 --> 00:45:48,490
if<font color="#CCCCCC"> we look at something that we already</font>

1143
00:45:46,250 --> 00:45:51,500
know is in the app<font color="#E5E5E5"> like the app delegate</font>

1144
00:45:48,490 --> 00:45:53,810
<font color="#CCCCCC">you can't see that because this</font><font color="#E5E5E5"> project</font>

1145
00:45:51,500 --> 00:45:56,060
is not great<font color="#E5E5E5"> but</font><font color="#CCCCCC"> it's coming</font><font color="#E5E5E5"> back with a</font>

1146
00:45:53,810 --> 00:45:58,970
bunch of symbols<font color="#E5E5E5"> and a lot of this stuff</font>

1147
00:45:56,060 --> 00:46:00,170
in the<font color="#CCCCCC"> middle</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> is some of those you</font>

1148
00:45:58,970 --> 00:46:03,259
know<font color="#CCCCCC"> memory I was mentioning those</font>

1149
00:46:00,170 --> 00:46:04,880
<font color="#E5E5E5">boilerplate methods right</font><font color="#CCCCCC"> a lot of those</font>

1150
00:46:03,260 --> 00:46:09,140
are<font color="#E5E5E5"> there so like this looks promising</font>

1151
00:46:04,880 --> 00:46:10,970
right<font color="#CCCCCC"> but it's</font><font color="#E5E5E5"> really like a far cry</font>

1152
00:46:09,140 --> 00:46:13,279
from<font color="#E5E5E5"> the output of class time and it's</font>

1153
00:46:10,970 --> 00:46:14,810
<font color="#E5E5E5">kind of hard</font><font color="#CCCCCC"> to make out</font><font color="#E5E5E5"> so but the</font>

1154
00:46:13,280 --> 00:46:17,660
<font color="#CCCCCC">reason for that is</font><font color="#E5E5E5"> Swift source metadata</font>

1155
00:46:14,810 --> 00:46:20,750
<font color="#E5E5E5">but a function in its symbols and in the</font>

1156
00:46:17,660 --> 00:46:23,420
process<font color="#CCCCCC"> it mangles the name</font><font color="#E5E5E5"> so this is a</font>

1157
00:46:20,750 --> 00:46:25,400
rough sort<font color="#E5E5E5"> of translation of one of them</font>

1158
00:46:23,420 --> 00:46:27,710
right<font color="#E5E5E5"> this is this is a class and a</font>

1159
00:46:25,400 --> 00:46:29,120
function<font color="#E5E5E5"> that's in the app so</font><font color="#CCCCCC"> I'm</font>

1160
00:46:27,710 --> 00:46:30,890
<font color="#E5E5E5">squanders got T denotes the</font><font color="#CCCCCC"> Swift</font>

1161
00:46:29,120 --> 00:46:32,029
function<font color="#E5E5E5"> then you've got the module name</font>

1162
00:46:30,890 --> 00:46:34,100
prefix by the length

1163
00:46:32,030 --> 00:46:37,430
you've got the class name also<font color="#CCCCCC"> prefix</font>

1164
00:46:34,100 --> 00:46:39,110
<font color="#E5E5E5">like the length</font><font color="#CCCCCC"> class method the C sorry</font>

1165
00:46:37,430 --> 00:46:41,089
denotes class method<font color="#E5E5E5"> then you've got the</font>

1166
00:46:39,110 --> 00:46:42,770
function name<font color="#E5E5E5"> prefix by the length then</font>

1167
00:46:41,090 --> 00:46:45,230
you've got the return<font color="#E5E5E5"> type which is</font><font color="#CCCCCC"> SB</font>

1168
00:46:42,770 --> 00:46:47,080
<font color="#E5E5E5">which is returning a boolean and like</font>

1169
00:46:45,230 --> 00:46:49,520
the Y and<font color="#CCCCCC"> F and the</font><font color="#E5E5E5"> zared of things like</font>

1170
00:46:47,080 --> 00:46:51,500
string protocol stuff<font color="#E5E5E5"> I don't know why</font>

1171
00:46:49,520 --> 00:46:53,570
that's<font color="#E5E5E5"> on there</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> this particular</font>

1172
00:46:51,500 --> 00:46:56,360
function but it is like whatever<font color="#CCCCCC"> that</font>

1173
00:46:53,570 --> 00:46:58,190
<font color="#CCCCCC">link down there has a really detailed</font>

1174
00:46:56,360 --> 00:47:01,340
explanation<font color="#E5E5E5"> on this open source sort of</font>

1175
00:46:58,190 --> 00:47:03,350
<font color="#CCCCCC">Swift's</font><font color="#E5E5E5"> github page around</font><font color="#CCCCCC"> you know what</font>

1176
00:47:01,340 --> 00:47:05,780
all<font color="#E5E5E5"> these</font><font color="#CCCCCC"> things represent</font><font color="#E5E5E5"> you can do</font>

1177
00:47:03,350 --> 00:47:09,049
that<font color="#E5E5E5"> if you you know don't want to go</font>

1178
00:47:05,780 --> 00:47:11,270
drinking<font color="#E5E5E5"> or something instead so</font><font color="#CCCCCC"> apple</font>

1179
00:47:09,050 --> 00:47:12,770
includes<font color="#E5E5E5"> a utility called</font><font color="#CCCCCC"> swift mangle</font>

1180
00:47:11,270 --> 00:47:15,650
<font color="#E5E5E5">that you can use to demand on the names</font>

1181
00:47:12,770 --> 00:47:17,870
<font color="#CCCCCC">that's just showing like that that same</font>

1182
00:47:15,650 --> 00:47:19,580
mangled symbol but was<font color="#E5E5E5"> just some of the</font>

1183
00:47:17,870 --> 00:47:21,259
<font color="#E5E5E5">different</font><font color="#CCCCCC"> options so that by default</font><font color="#E5E5E5"> it</font>

1184
00:47:19,580 --> 00:47:23,720
spits the mangled symbol back out at you

1185
00:47:21,260 --> 00:47:26,360
and then the other<font color="#CCCCCC"> one is Adam angle</font>

1186
00:47:23,720 --> 00:47:28,129
<font color="#E5E5E5">sort of</font><font color="#CCCCCC"> version of</font><font color="#E5E5E5"> that and then it goes</font>

1187
00:47:26,360 --> 00:47:29,660
<font color="#E5E5E5">you know you can simplify it or you can</font>

1188
00:47:28,130 --> 00:47:32,090
<font color="#E5E5E5">make it more complex and get more</font>

1189
00:47:29,660 --> 00:47:34,930
information<font color="#CCCCCC"> so with</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you can</font>

1190
00:47:32,090 --> 00:47:38,330
basically you know create some kind<font color="#E5E5E5"> of</font>

1191
00:47:34,930 --> 00:47:40,490
equivalent sort of class dump which is

1192
00:47:38,330 --> 00:47:43,130
what I've<font color="#CCCCCC"> done right I'm so like a</font>

1193
00:47:40,490 --> 00:47:45,229
simple<font color="#E5E5E5"> little script to dump classes and</font>

1194
00:47:43,130 --> 00:47:46,670
function signatures from a swift binary

1195
00:47:45,230 --> 00:47:48,800
<font color="#E5E5E5">I put it together last night I didn't</font>

1196
00:47:46,670 --> 00:47:52,550
really sleep<font color="#E5E5E5"> I'll put it up eventually</font>

1197
00:47:48,800 --> 00:47:55,610
<font color="#CCCCCC">when I fix</font><font color="#E5E5E5"> it all up on lab so it asked</font>

1198
00:47:52,550 --> 00:47:58,040
<font color="#CCCCCC">an entire it's pretty happy but</font><font color="#E5E5E5"> it does</font>

1199
00:47:55,610 --> 00:47:59,060
the job<font color="#CCCCCC"> eventually getting</font><font color="#E5E5E5"> around I'll</font>

1200
00:47:58,040 --> 00:48:01,279
get around to adding some<font color="#E5E5E5"> more features</font>

1201
00:47:59,060 --> 00:48:02,840
<font color="#E5E5E5">and stuff like that but I'm in Vegas I'm</font>

1202
00:48:01,280 --> 00:48:04,480
<font color="#E5E5E5">gonna be partying so</font><font color="#CCCCCC"> will be</font><font color="#E5E5E5"> next week</font>

1203
00:48:02,840 --> 00:48:07,810
<font color="#CCCCCC">sometime</font>

1204
00:48:04,480 --> 00:48:09,580
so here's what<font color="#CCCCCC"> it does</font><font color="#E5E5E5"> and you're not</font>

1205
00:48:07,810 --> 00:48:12,460
gonna be able to<font color="#E5E5E5"> see that but basically</font>

1206
00:48:09,580 --> 00:48:20,049
<font color="#E5E5E5">I'm just calling it and I'm passing</font><font color="#CCCCCC"> it</font>

1207
00:48:12,460 --> 00:48:22,330
<font color="#CCCCCC">the binary and then it comes up</font><font color="#E5E5E5"> you can</font>

1208
00:48:20,050 --> 00:48:24,460
see here you<font color="#E5E5E5"> got the classes down the</font>

1209
00:48:22,330 --> 00:48:26,620
side and then<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Associated</font><font color="#E5E5E5"> functions</font>

1210
00:48:24,460 --> 00:48:28,030
on those classes<font color="#E5E5E5"> so you know there's</font>

1211
00:48:26,620 --> 00:48:29,950
<font color="#E5E5E5">like app delegate the view controller</font>

1212
00:48:28,030 --> 00:48:31,410
and<font color="#E5E5E5"> this jailbreak manager right then</font>

1213
00:48:29,950 --> 00:48:34,960
you can see the<font color="#E5E5E5"> function signatures</font>

1214
00:48:31,410 --> 00:48:39,129
<font color="#CCCCCC">which show you know the</font><font color="#E5E5E5"> the function</font>

1215
00:48:34,960 --> 00:48:40,660
name<font color="#CCCCCC"> return type any parameters that why</font>

1216
00:48:39,130 --> 00:48:42,610
the exported parameter names became

1217
00:48:40,660 --> 00:48:44,950
useful<font color="#E5E5E5"> is the exported parameter names</font>

1218
00:48:42,610 --> 00:48:46,420
will actually show up<font color="#E5E5E5"> in here but if</font>

1219
00:48:44,950 --> 00:48:48,819
there's<font color="#E5E5E5"> no exported parameter names it</font>

1220
00:48:46,420 --> 00:48:50,770
won't so you kind of have to<font color="#CCCCCC"> guess what</font>

1221
00:48:48,820 --> 00:48:53,740
<font color="#E5E5E5">those arguments are usually it's not too</font>

1222
00:48:50,770 --> 00:48:55,030
bad<font color="#CCCCCC"> in in iOS apps because of that</font>

1223
00:48:53,740 --> 00:48:56,979
design pattern that<font color="#CCCCCC"> I sort of mentioned</font>

1224
00:48:55,030 --> 00:48:59,440
<font color="#CCCCCC">that naming</font><font color="#E5E5E5"> convention where it kind of</font>

1225
00:48:56,980 --> 00:49:01,390
calls out what the what<font color="#CCCCCC"> the sort of</font>

1226
00:48:59,440 --> 00:49:04,180
<font color="#CCCCCC">first parameter</font><font color="#E5E5E5"> is so you can kind of</font>

1227
00:49:01,390 --> 00:49:05,650
get a feel for<font color="#E5E5E5"> it other options you can</font>

1228
00:49:04,180 --> 00:49:08,109
use<font color="#CCCCCC"> Frida</font><font color="#E5E5E5"> or tools that are based on</font>

1229
00:49:05,650 --> 00:49:09,580
Frida<font color="#E5E5E5"> to get some other way there so</font><font color="#CCCCCC"> all</font>

1230
00:49:08,110 --> 00:49:11,350
<font color="#E5E5E5">the way at least with my limited</font>

1231
00:49:09,580 --> 00:49:13,120
<font color="#CCCCCC">knowledge of Frida but it's also useful</font>

1232
00:49:11,350 --> 00:49:15,339
option which I'll<font color="#E5E5E5"> demonstrate now and</font>

1233
00:49:13,120 --> 00:49:19,029
basically<font color="#E5E5E5"> this is just using the the</font>

1234
00:49:15,340 --> 00:49:21,070
Frida CLI tool so I'm just injecting

1235
00:49:19,030 --> 00:49:23,500
<font color="#CCCCCC">into really</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> process of</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> Swift</font>

1236
00:49:21,070 --> 00:49:26,470
app that I'm using some of the inbuilt

1237
00:49:23,500 --> 00:49:29,020
<font color="#E5E5E5">functions right so this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> obj see</font>

1238
00:49:26,470 --> 00:49:31,359
<font color="#CCCCCC">doc classes and you can</font><font color="#E5E5E5"> see it's coming</font>

1239
00:49:29,020 --> 00:49:33,430
<font color="#E5E5E5">up there or you can't see that's just</font>

1240
00:49:31,360 --> 00:49:36,310
got<font color="#CCCCCC"> Swift</font><font color="#E5E5E5"> demo mode you know jailbreak</font>

1241
00:49:33,430 --> 00:49:40,149
manager and<font color="#CCCCCC"> it's basically showing all</font>

1242
00:49:36,310 --> 00:49:41,799
the classes right<font color="#CCCCCC"> you the</font><font color="#E5E5E5"> syntax if</font>

1243
00:49:40,150 --> 00:49:42,940
you're interested it's kind<font color="#E5E5E5"> of different</font>

1244
00:49:41,800 --> 00:49:46,540
to what you'd<font color="#CCCCCC"> use for</font><font color="#E5E5E5"> objective-c</font>

1245
00:49:42,940 --> 00:49:49,540
classes<font color="#CCCCCC"> if you want to reference</font><font color="#E5E5E5"> that</font>

1246
00:49:46,540 --> 00:49:53,200
specifically you<font color="#CCCCCC"> have to</font><font color="#E5E5E5"> basically do</font>

1247
00:49:49,540 --> 00:49:55,360
obj obj see doc classes<font color="#CCCCCC"> then put</font><font color="#E5E5E5"> it in</font>

1248
00:49:53,200 --> 00:49:59,529
square brackets with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> module name and</font>

1249
00:49:55,360 --> 00:50:00,970
<font color="#E5E5E5">the the function</font><font color="#CCCCCC"> one of the things that</font>

1250
00:49:59,530 --> 00:50:03,100
doesn't<font color="#E5E5E5"> work with</font><font color="#CCCCCC"> Frieda which it was</font>

1251
00:50:00,970 --> 00:50:05,799
demonstrating here is you can't<font color="#E5E5E5"> get the</font>

1252
00:50:03,100 --> 00:50:08,200
the methods<font color="#E5E5E5"> of that class</font><font color="#CCCCCC"> I'm using the</font>

1253
00:50:05,800 --> 00:50:10,870
standard way that<font color="#E5E5E5"> you get methods</font><font color="#CCCCCC"> you</font>

1254
00:50:08,200 --> 00:50:12,609
can<font color="#E5E5E5"> get inherited methods but not like</font>

1255
00:50:10,870 --> 00:50:14,830
the<font color="#E5E5E5"> the methods</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> are implements in</font>

1256
00:50:12,610 --> 00:50:16,330
that class<font color="#E5E5E5"> so so things like the</font>

1257
00:50:14,830 --> 00:50:17,060
jailbreak check method<font color="#E5E5E5"> that's in that</font>

1258
00:50:16,330 --> 00:50:19,549
<font color="#E5E5E5">class</font>

1259
00:50:17,060 --> 00:50:22,250
<font color="#CCCCCC">I'm not showing</font><font color="#E5E5E5"> up in</font><font color="#CCCCCC"> that list so one</font>

1260
00:50:19,550 --> 00:50:24,440
of<font color="#E5E5E5"> the things you can do and</font><font color="#CCCCCC"> you know</font>

1261
00:50:22,250 --> 00:50:28,160
<font color="#E5E5E5">thinking</font><font color="#CCCCCC"> about maybe</font><font color="#E5E5E5"> doing that is you</font>

1262
00:50:24,440 --> 00:50:32,900
can<font color="#E5E5E5"> use the module the module class and</font>

1263
00:50:28,160 --> 00:50:34,250
the enumerate<font color="#E5E5E5"> symbols function and</font>

1264
00:50:32,900 --> 00:50:35,960
basically<font color="#CCCCCC"> get a list</font><font color="#E5E5E5"> of symbols and you</font>

1265
00:50:34,250 --> 00:50:37,580
can kind of do what we're doing<font color="#CCCCCC"> before</font>

1266
00:50:35,960 --> 00:50:40,100
<font color="#E5E5E5">with de mangling the symbol</font><font color="#CCCCCC"> name so you</font>

1267
00:50:37,580 --> 00:50:41,870
could<font color="#E5E5E5"> build in that demanding logic</font><font color="#CCCCCC"> and</font>

1268
00:50:40,100 --> 00:50:43,700
you know have<font color="#CCCCCC"> that in so basically</font><font color="#E5E5E5"> all</font>

1269
00:50:41,870 --> 00:50:46,339
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> doing it's getting all the</font>

1270
00:50:43,700 --> 00:50:48,109
symbols<font color="#E5E5E5"> for that module cool</font><font color="#CCCCCC"> so I'll</font>

1271
00:50:46,340 --> 00:50:50,840
skip that other options you<font color="#E5E5E5"> can use</font><font color="#CCCCCC"> a</font>

1272
00:50:48,110 --> 00:50:52,130
<font color="#E5E5E5">disassembler there's a link to some</font>

1273
00:50:50,840 --> 00:50:53,930
stuff that you<font color="#CCCCCC"> know some plugins that</font>

1274
00:50:52,130 --> 00:50:56,360
automatically dissimilar dissemble it

1275
00:50:53,930 --> 00:50:57,770
function hooking<font color="#E5E5E5"> less slack smash with</font>

1276
00:50:56,360 --> 00:50:59,750
<font color="#CCCCCC">it</font><font color="#E5E5E5"> still got a few</font><font color="#CCCCCC"> minutes still</font>

1277
00:50:57,770 --> 00:51:01,820
possible<font color="#E5E5E5"> it's much easier with Swift</font>

1278
00:50:59,750 --> 00:51:03,800
<font color="#CCCCCC">mixed</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> objective-c</font><font color="#E5E5E5"> binaries</font><font color="#CCCCCC"> consol</font>

1279
00:51:01,820 --> 00:51:05,420
<font color="#E5E5E5">right tweaks</font><font color="#CCCCCC"> level substrate</font><font color="#E5E5E5"> and this is</font>

1280
00:51:03,800 --> 00:51:06,380
super simple class and<font color="#E5E5E5"> basically we're</font>

1281
00:51:05,420 --> 00:51:08,870
going<font color="#E5E5E5"> to do is we</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> want to change</font>

1282
00:51:06,380 --> 00:51:10,970
that variable<font color="#E5E5E5"> right it's</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> variable</font>

1283
00:51:08,870 --> 00:51:13,400
<font color="#CCCCCC">an int and it's got the initializer</font>

1284
00:51:10,970 --> 00:51:15,980
which sets that right<font color="#E5E5E5"> so you can hook to</font>

1285
00:51:13,400 --> 00:51:17,690
<font color="#E5E5E5">get a method and that works right so so</font>

1286
00:51:15,980 --> 00:51:20,510
<font color="#CCCCCC">the getter method you're changing it to</font>

1287
00:51:17,690 --> 00:51:21,950
<font color="#E5E5E5">return</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> hook</font><font color="#E5E5E5"> the setter</font>

1288
00:51:20,510 --> 00:51:23,930
method and<font color="#CCCCCC"> it kind of works</font>

1289
00:51:21,950 --> 00:51:27,259
so you can hook the setter to<font color="#E5E5E5"> to set it</font>

1290
00:51:23,930 --> 00:51:29,390
<font color="#E5E5E5">to ten but certain functions in Swift</font>

1291
00:51:27,260 --> 00:51:31,970
are in line and the cost constructor is

1292
00:51:29,390 --> 00:51:33,440
one of them so the initializer<font color="#CCCCCC"> so and</font>

1293
00:51:31,970 --> 00:51:36,020
it's that's what's setting<font color="#E5E5E5"> the instance</font>

1294
00:51:33,440 --> 00:51:37,730
variable in this<font color="#E5E5E5"> case so the set is</font><font color="#CCCCCC"> only</font>

1295
00:51:36,020 --> 00:51:38,990
called again by the<font color="#CCCCCC"> top-level code so if</font>

1296
00:51:37,730 --> 00:51:40,790
you call<font color="#CCCCCC"> from</font><font color="#E5E5E5"> network so that's why I</font>

1297
00:51:38,990 --> 00:51:43,129
<font color="#E5E5E5">say it kind of works and then changing</font>

1298
00:51:40,790 --> 00:51:44,270
instance variable<font color="#CCCCCC"> directly it works was</font>

1299
00:51:43,130 --> 00:51:47,090
probably<font color="#E5E5E5"> not</font><font color="#CCCCCC"> a good idea because you</font><font color="#E5E5E5"> can</font>

1300
00:51:44,270 --> 00:51:51,050
<font color="#E5E5E5">mess up how the app functions the end I</font>

1301
00:51:47,090 --> 00:51:55,490
did it oh I don't know if I have time

1302
00:51:51,050 --> 00:51:59,210
<font color="#E5E5E5">for questions there's some do I have</font>

1303
00:51:55,490 --> 00:52:01,390
time<font color="#E5E5E5"> okay there's one</font><font color="#CCCCCC"> down here front</font>

1304
00:51:59,210 --> 00:52:01,390
here

1305
00:52:03,920 --> 00:52:09,289
I was just wondering<font color="#CCCCCC"> for</font><font color="#E5E5E5"> iOS I have done</font>

1306
00:52:06,740 --> 00:52:11,118
some<font color="#CCCCCC"> work in on</font><font color="#E5E5E5"> the Android side</font><font color="#CCCCCC"> but I</font>

1307
00:52:09,289 --> 00:52:12,950
haven't<font color="#E5E5E5"> really looked into iOS but I was</font>

1308
00:52:11,119 --> 00:52:15,769
<font color="#CCCCCC">just</font><font color="#E5E5E5"> wondering if you see much of office</font>

1309
00:52:12,950 --> 00:52:17,450
keishon in like method names or function

1310
00:52:15,769 --> 00:52:19,609
names or not and I always start<font color="#CCCCCC"> like you</font>

1311
00:52:17,450 --> 00:52:21,529
do commonly in Android no it's

1312
00:52:19,609 --> 00:52:23,089
definitely not common<font color="#CCCCCC"> I've</font><font color="#E5E5E5"> seen it after</font>

1313
00:52:21,529 --> 00:52:25,160
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> done pen tests where they're like</font>

1314
00:52:23,089 --> 00:52:26,538
you know we've we've exploited some

1315
00:52:25,160 --> 00:52:28,069
functions and then they<font color="#E5E5E5"> just change it</font>

1316
00:52:26,539 --> 00:52:30,769
to<font color="#E5E5E5"> like random strings but it's like the</font>

1317
00:52:28,069 --> 00:52:31,880
same<font color="#CCCCCC"> functions but no it's definitely</font>

1318
00:52:30,769 --> 00:52:34,490
nowhere<font color="#E5E5E5"> near as common as it is on</font>

1319
00:52:31,880 --> 00:52:40,250
Android<font color="#CCCCCC"> cool thank you</font><font color="#E5E5E5"> it's not a</font>

1320
00:52:34,490 --> 00:52:41,750
question<font color="#E5E5E5"> no hey</font><font color="#CCCCCC"> hey great talk</font><font color="#E5E5E5"> I just</font>

1321
00:52:40,250 --> 00:52:45,260
wanted to ask<font color="#E5E5E5"> you what's your approach</font>

1322
00:52:41,750 --> 00:52:49,900
when when trying<font color="#CCCCCC"> to search dynamically</font>

1323
00:52:45,260 --> 00:52:51,950
<font color="#E5E5E5">for keys or passwords or all these</font>

1324
00:52:49,900 --> 00:52:53,990
information that you can get dynamically

1325
00:52:51,950 --> 00:52:55,730
<font color="#E5E5E5">so it's it's not interesting it's</font>

1326
00:52:53,990 --> 00:52:58,038
literally I'll go through the class dump

1327
00:52:55,730 --> 00:53:00,410
and I will literally<font color="#CCCCCC"> just you know grep</font>

1328
00:52:58,039 --> 00:53:03,019
search whatever<font color="#E5E5E5"> it is and like look for</font>

1329
00:53:00,410 --> 00:53:04,578
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> stuff right and then sort of</font>

1330
00:53:03,019 --> 00:53:06,348
<font color="#CCCCCC">just scroll around from there so look</font>

1331
00:53:04,579 --> 00:53:09,049
for interesting<font color="#CCCCCC"> classes look for null</font>

1332
00:53:06,349 --> 00:53:11,119
search like pin password<font color="#E5E5E5"> key whatever</font>

1333
00:53:09,049 --> 00:53:13,160
and just<font color="#E5E5E5"> go through</font><font color="#CCCCCC"> the whole thing</font><font color="#E5E5E5"> so</font>

1334
00:53:11,119 --> 00:53:15,970
nothing nothing crazy<font color="#CCCCCC"> nothing super</font>

1335
00:53:13,160 --> 00:53:18,558
sophisticated<font color="#CCCCCC"> yep</font>

1336
00:53:15,970 --> 00:53:20,328
rest of the questions<font color="#E5E5E5"> please go outside</font>

1337
00:53:18,559 --> 00:53:21,760
<font color="#E5E5E5">and one more round of applause for</font>

1338
00:53:20,329 --> 00:53:25,589
<font color="#E5E5E5">Michael thank you</font>

1339
00:53:21,760 --> 00:53:25,589
[Applause]

