1
00:00:00,060 --> 00:00:06,508
our speaker is<font color="#E5E5E5"> Ryan</font><font color="#CCCCCC"> Costello gee</font><font color="#E5E5E5"> thanks</font>

2
00:00:03,629 --> 00:00:08,880
so these<font color="#E5E5E5"> slides are</font><font color="#CCCCCC"> live now if anybody</font>

3
00:00:06,509 --> 00:00:11,460
wants to<font color="#E5E5E5"> follow along and the video will</font>

4
00:00:08,880 --> 00:00:12,900
go up whenever<font color="#E5E5E5"> b-sides releases it</font>

5
00:00:11,460 --> 00:00:17,490
<font color="#E5E5E5">that's probably gonna</font><font color="#CCCCCC"> be three or four</font>

6
00:00:12,900 --> 00:00:19,230
weeks so<font color="#E5E5E5"> at</font><font color="#CCCCCC"> Def Con 23 two years ago</font><font color="#E5E5E5"> I</font>

7
00:00:17,490 --> 00:00:21,509
gave<font color="#E5E5E5"> a talk called cracking</font>

8
00:00:19,230 --> 00:00:23,130
<font color="#E5E5E5">cryptocurrency brain wallets</font><font color="#CCCCCC"> as part of</font>

9
00:00:21,510 --> 00:00:27,090
this talk<font color="#E5E5E5"> I released a tool called brain</font>

10
00:00:23,130 --> 00:00:30,869
flare which cracks<font color="#CCCCCC"> Bitcoin private</font><font color="#E5E5E5"> keys</font>

11
00:00:27,090 --> 00:00:33,930
that were<font color="#E5E5E5"> generated by using sha-256 of</font>

12
00:00:30,869 --> 00:00:37,110
a password<font color="#CCCCCC"> or</font><font color="#E5E5E5"> passphrase</font><font color="#CCCCCC"> this this found</font>

13
00:00:33,930 --> 00:00:38,730
a rather shocking amount of stuff<font color="#CCCCCC"> but</font>

14
00:00:37,110 --> 00:00:41,969
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> not really what this talks about</font>

15
00:00:38,730 --> 00:00:44,099
directly<font color="#E5E5E5"> what I want to talk to you</font>

16
00:00:41,969 --> 00:00:47,760
<font color="#E5E5E5">today about is how to make this really</font>

17
00:00:44,100 --> 00:00:52,070
<font color="#CCCCCC">fast and how to</font><font color="#E5E5E5"> make it even faster for</font>

18
00:00:47,760 --> 00:00:55,468
<font color="#E5E5E5">some</font><font color="#CCCCCC"> other types of weak keys so since</font>

19
00:00:52,070 --> 00:00:57,449
since Def Con 23<font color="#E5E5E5"> I have added a bunch of</font>

20
00:00:55,469 --> 00:01:00,059
new modes to brain flare special case

21
00:00:57,449 --> 00:01:02,070
optimizations<font color="#CCCCCC"> I added support for a</font>

22
00:01:00,059 --> 00:01:05,099
bunch of hardened algorithms<font color="#CCCCCC"> it has a</font>

23
00:01:02,070 --> 00:01:07,799
theory<font color="#CCCCCC"> M support now beta</font><font color="#E5E5E5"> script</font><font color="#CCCCCC"> hash</font>

24
00:01:05,099 --> 00:01:09,720
supports<font color="#E5E5E5"> raw private key input so</font><font color="#CCCCCC"> that</font>

25
00:01:07,799 --> 00:01:13,020
you can write external tools that

26
00:01:09,720 --> 00:01:15,630
generate keys and feed<font color="#CCCCCC"> that in</font><font color="#E5E5E5"> you can</font>

27
00:01:13,020 --> 00:01:19,890
feed raw<font color="#E5E5E5"> beta script hash scripts in</font>

28
00:01:15,630 --> 00:01:22,259
there and bitcoins<font color="#CCCCCC"> gotten a little</font>

29
00:01:19,890 --> 00:01:26,460
<font color="#E5E5E5">bigger so the bloom filter</font><font color="#CCCCCC"> has actual</font>

30
00:01:22,259 --> 00:01:28,530
false positives now so there's a feature

31
00:01:26,460 --> 00:01:31,530
for making sure<font color="#E5E5E5"> that those false</font>

32
00:01:28,530 --> 00:01:32,930
<font color="#CCCCCC">positives are caught in ignored so let's</font>

33
00:01:31,530 --> 00:01:36,390
talk a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> Bitcoin keys</font>

34
00:01:32,930 --> 00:01:39,210
<font color="#CCCCCC">Bitcoin uses of the elliptic curve</font>

35
00:01:36,390 --> 00:01:43,409
digital signature algorithm with<font color="#CCCCCC"> curve</font>

36
00:01:39,210 --> 00:01:46,169
parameters called<font color="#CCCCCC"> SEC</font><font color="#E5E5E5"> P 256</font><font color="#CCCCCC"> K</font><font color="#E5E5E5"> 1 this is</font>

37
00:01:43,409 --> 00:01:47,520
from standards from standards for

38
00:01:46,170 --> 00:01:48,810
efficient cryptography which is a

39
00:01:47,520 --> 00:01:52,140
document<font color="#CCCCCC"> that</font><font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> come put out a</font>

40
00:01:48,810 --> 00:01:54,630
while ago<font color="#CCCCCC"> that standardized</font><font color="#E5E5E5"> a bunch of</font>

41
00:01:52,140 --> 00:01:58,560
elliptic curve parameters<font color="#CCCCCC"> the P stands</font>

42
00:01:54,630 --> 00:02:00,390
for prime fields<font color="#E5E5E5"> 256 it's a 256 bit</font>

43
00:01:58,560 --> 00:02:03,360
field<font color="#E5E5E5"> and K is</font>

44
00:02:00,390 --> 00:02:06,710
<font color="#CCCCCC">Colpitts type of curve and I don't</font>

45
00:02:03,360 --> 00:02:10,110
<font color="#E5E5E5">actually know how that is special but</font>

46
00:02:06,710 --> 00:02:13,620
<font color="#E5E5E5">bitcoin is the</font><font color="#CCCCCC"> only application that</font>

47
00:02:10,110 --> 00:02:17,600
widely<font color="#E5E5E5"> uses one of these curves</font>

48
00:02:13,620 --> 00:02:20,700
with this curve<font color="#E5E5E5"> you have points</font>

49
00:02:17,600 --> 00:02:23,220
represented on a curve that<font color="#CCCCCC"> satisfy</font><font color="#E5E5E5"> the</font>

50
00:02:20,700 --> 00:02:26,970
<font color="#CCCCCC">equation y squared equals</font><font color="#E5E5E5"> x cubed plus</font>

51
00:02:23,220 --> 00:02:30,750
<font color="#CCCCCC">seven in a finite field over a large</font>

52
00:02:26,970 --> 00:02:33,750
prime<font color="#E5E5E5"> it's slightly larger</font><font color="#CCCCCC"> than to the</font>

53
00:02:30,750 --> 00:02:36,750
256<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> private keys are integers</font>

54
00:02:33,750 --> 00:02:40,020
in a different finite field<font color="#CCCCCC"> you don't</font>

55
00:02:36,750 --> 00:02:41,730
<font color="#CCCCCC">need to know that number</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> and then</font>

56
00:02:40,020 --> 00:02:43,320
public keys are formed by multiplying<font color="#E5E5E5"> a</font>

57
00:02:41,730 --> 00:02:47,190
private key with what's known<font color="#E5E5E5"> as the</font>

58
00:02:43,320 --> 00:02:49,109
base point this is the<font color="#E5E5E5"> also the point</font>

59
00:02:47,190 --> 00:02:52,560
<font color="#E5E5E5">that you get for a private key with</font>

60
00:02:49,110 --> 00:02:54,720
integer value<font color="#CCCCCC"> 1 and if</font><font color="#E5E5E5"> you want to go</font>

61
00:02:52,560 --> 00:02:57,239
from public key<font color="#E5E5E5"> to private key you</font><font color="#CCCCCC"> need</font>

62
00:02:54,720 --> 00:02:58,820
<font color="#E5E5E5">to have an</font><font color="#CCCCCC"> algorithm that</font><font color="#E5E5E5"> can</font>

63
00:02:57,239 --> 00:03:01,320
efficiently<font color="#E5E5E5"> find the discrete logarithm</font>

64
00:02:58,820 --> 00:03:02,970
this is supposed to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> very hard without</font>

65
00:03:01,320 --> 00:03:06,030
a quantum computer<font color="#CCCCCC"> to run Shor's</font>

66
00:03:02,970 --> 00:03:08,790
algorithm on<font color="#CCCCCC"> there's some stuff in</font>

67
00:03:06,030 --> 00:03:10,709
<font color="#E5E5E5">Bitcoin that makes it so that this is a</font>

68
00:03:08,790 --> 00:03:13,260
<font color="#E5E5E5">limited risk even if somebody does have</font>

69
00:03:10,709 --> 00:03:16,230
<font color="#CCCCCC">a big quantum computer and</font><font color="#E5E5E5"> wants to</font>

70
00:03:13,260 --> 00:03:17,730
crack Bitcoin<font color="#CCCCCC"> I don't have time</font><font color="#E5E5E5"> to go</font>

71
00:03:16,230 --> 00:03:19,200
super into detail on<font color="#E5E5E5"> how</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> looked at</font>

72
00:03:17,730 --> 00:03:20,609
carefully<font color="#E5E5E5"> cover</font><font color="#CCCCCC"> key works</font><font color="#E5E5E5"> there's a</font>

73
00:03:19,200 --> 00:03:24,089
paper linked at the bottom of this slide

74
00:03:20,610 --> 00:03:26,310
<font color="#CCCCCC">that you can read</font><font color="#E5E5E5"> this is what bitcoins</font>

75
00:03:24,090 --> 00:03:29,220
curve looks like<font color="#E5E5E5"> plotted</font><font color="#CCCCCC"> over real</font>

76
00:03:26,310 --> 00:03:33,780
numbers<font color="#CCCCCC"> it's actually run over a finite</font>

77
00:03:29,220 --> 00:03:36,090
field so it looks like noise<font color="#E5E5E5"> but this</font>

78
00:03:33,780 --> 00:03:39,150
will<font color="#E5E5E5"> be important in a</font><font color="#CCCCCC"> minute for</font><font color="#E5E5E5"> key</font>

79
00:03:36,090 --> 00:03:41,670
<font color="#E5E5E5">generation</font><font color="#CCCCCC"> you can basically just</font>

80
00:03:39,150 --> 00:03:44,360
generate an arbitrary 256 doubt without

81
00:03:41,670 --> 00:03:47,880
<font color="#E5E5E5">value and it'll</font><font color="#CCCCCC"> work</font>

82
00:03:44,360 --> 00:03:50,579
<font color="#E5E5E5">32 random bytes it works fine unless</font>

83
00:03:47,880 --> 00:03:53,579
<font color="#E5E5E5">with most software unless you choose 0</font>

84
00:03:50,579 --> 00:03:57,420
or n which is that long number that ends

85
00:03:53,579 --> 00:04:00,079
in<font color="#CCCCCC"> 4141 hacks</font><font color="#E5E5E5"> this makes it really easy</font>

86
00:03:57,420 --> 00:04:03,570
for<font color="#CCCCCC"> people to</font><font color="#E5E5E5"> write applications that</font>

87
00:04:00,079 --> 00:04:09,019
generate keys with weak randomness or do

88
00:04:03,570 --> 00:04:12,500
clever<font color="#CCCCCC"> things like brain wallets</font><font color="#E5E5E5"> Bitcoin</font>

89
00:04:09,019 --> 00:04:14,880
uses something called Bitcoin<font color="#CCCCCC"> script</font>

90
00:04:12,500 --> 00:04:19,108
when you send a payment<font color="#E5E5E5"> in Bitcoin you</font>

91
00:04:14,880 --> 00:04:22,860
were sending<font color="#E5E5E5"> a payment to whoever can</font>

92
00:04:19,108 --> 00:04:24,299
redeem a program whoever can provide

93
00:04:22,860 --> 00:04:25,740
inputs to a program written<font color="#E5E5E5"> in the</font>

94
00:04:24,300 --> 00:04:26,490
Bitcoin scripting language<font color="#CCCCCC"> that</font><font color="#E5E5E5"> makes it</font>

95
00:04:25,740 --> 00:04:28,349
return true

96
00:04:26,490 --> 00:04:31,020
there's a couple<font color="#E5E5E5"> of really common</font>

97
00:04:28,349 --> 00:04:33,120
scripts that<font color="#E5E5E5"> are used Bitcoin has</font>

98
00:04:31,020 --> 00:04:34,979
addresses to represent these you<font color="#CCCCCC"> have</font>

99
00:04:33,120 --> 00:04:39,630
the<font color="#E5E5E5"> addresses starting with one that</font>

100
00:04:34,979 --> 00:04:42,690
just represent<font color="#E5E5E5"> payment to a hash of a</font>

101
00:04:39,630 --> 00:04:45,060
public key<font color="#E5E5E5"> this ripe AMD 160 of</font><font color="#CCCCCC"> a sha</font>

102
00:04:42,690 --> 00:04:48,479
256 of some value<font color="#CCCCCC"> it's what Bitcoin</font>

103
00:04:45,060 --> 00:04:51,780
calls hash 160<font color="#CCCCCC"> this is interesting</font>

104
00:04:48,479 --> 00:04:54,630
<font color="#E5E5E5">because if you pay to one of these</font>

105
00:04:51,780 --> 00:04:57,210
<font color="#E5E5E5">addresses and the recipient never reuses</font>

106
00:04:54,630 --> 00:05:00,000
<font color="#CCCCCC">it even if quantum computers</font><font color="#E5E5E5"> are around</font>

107
00:04:57,210 --> 00:05:02,758
the public<font color="#CCCCCC"> key isn't revealed</font><font color="#E5E5E5"> until it's</font>

108
00:05:00,000 --> 00:05:06,270
spent<font color="#E5E5E5"> so unless the quantum computer</font><font color="#CCCCCC"> can</font>

109
00:05:02,759 --> 00:05:09,150
crack<font color="#CCCCCC"> it in about an hour</font><font color="#E5E5E5"> it'll still</font><font color="#CCCCCC"> be</font>

110
00:05:06,270 --> 00:05:12,780
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> this is also paid a script hash</font>

111
00:05:09,150 --> 00:05:16,349
where you are sending<font color="#E5E5E5"> to a hash of a</font>

112
00:05:12,780 --> 00:05:20,580
script<font color="#CCCCCC"> don't worry too much about that</font>

113
00:05:16,349 --> 00:05:23,699
if there<font color="#E5E5E5"> am uses the least significant</font>

114
00:05:20,580 --> 00:05:27,500
bits<font color="#CCCCCC"> of the output</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> KISS</font><font color="#E5E5E5"> check which</font>

115
00:05:23,699 --> 00:05:30,120
<font color="#E5E5E5">is the hash algorithm that became sha-3</font>

116
00:05:27,500 --> 00:05:34,289
<font color="#E5E5E5">with slightly different initialization</font>

117
00:05:30,120 --> 00:05:36,900
parameters because if<font color="#E5E5E5"> there</font><font color="#CCCCCC"> iam was</font>

118
00:05:34,289 --> 00:05:39,690
released a<font color="#E5E5E5"> little bit just as that was</font>

119
00:05:36,900 --> 00:05:41,159
<font color="#CCCCCC">being standardized</font><font color="#E5E5E5"> and Bitcoin actually</font>

120
00:05:39,690 --> 00:05:44,479
has two<font color="#CCCCCC"> different representations</font><font color="#E5E5E5"> of</font>

121
00:05:41,159 --> 00:05:47,099
public keys there's uncompressed which

122
00:05:44,479 --> 00:05:49,680
has both the<font color="#CCCCCC"> X&Y</font><font color="#E5E5E5"> coordinate and</font>

123
00:05:47,099 --> 00:05:51,750
compressed which has the x coordinate

124
00:05:49,680 --> 00:05:55,229
and a header byte<font color="#E5E5E5"> that indicates whether</font>

125
00:05:51,750 --> 00:05:57,569
it was<font color="#E5E5E5"> even or odd which is equivalent</font>

126
00:05:55,229 --> 00:06:01,560
<font color="#CCCCCC">to indicating</font><font color="#E5E5E5"> whether it was positive or</font>

127
00:05:57,569 --> 00:06:05,460
negative if you recall the<font color="#E5E5E5"> graph you saw</font>

128
00:06:01,560 --> 00:06:11,849
that it had two<font color="#E5E5E5"> points at each</font><font color="#CCCCCC"> x-value</font>

129
00:06:05,460 --> 00:06:15,299
<font color="#CCCCCC">so you need</font><font color="#E5E5E5"> to yeah you need</font><font color="#CCCCCC"> to know</font>

130
00:06:11,849 --> 00:06:18,389
whether it's the top or bottom<font color="#E5E5E5"> point on</font>

131
00:06:15,300 --> 00:06:22,380
the curve<font color="#CCCCCC"> but once you know that you can</font>

132
00:06:18,389 --> 00:06:24,270
compute the Y value<font color="#CCCCCC"> I have a lot of</font>

133
00:06:22,380 --> 00:06:26,130
general optimizations<font color="#E5E5E5"> in brain flare</font>

134
00:06:24,270 --> 00:06:28,549
most of it is pretty<font color="#CCCCCC"> boring standard C</font>

135
00:06:26,130 --> 00:06:31,560
optimization<font color="#E5E5E5"> minimize memory copies</font>

136
00:06:28,550 --> 00:06:34,760
<font color="#E5E5E5">inline functions allocate all of the</font>

137
00:06:31,560 --> 00:06:37,110
memory at startup<font color="#CCCCCC"> because now it is slow</font>

138
00:06:34,760 --> 00:06:39,089
statically initialized buffers for

139
00:06:37,110 --> 00:06:40,200
values<font color="#CCCCCC"> that</font><font color="#E5E5E5"> don't change much or that</font>

140
00:06:39,089 --> 00:06:42,630
<font color="#CCCCCC">are</font><font color="#E5E5E5"> partially</font>

141
00:06:40,200 --> 00:06:44,520
used<font color="#CCCCCC"> I decided I wouldn't</font><font color="#E5E5E5"> bother</font>

142
00:06:42,630 --> 00:06:46,770
<font color="#CCCCCC">implementing any sort of</font><font color="#E5E5E5"> threatening</font>

143
00:06:44,520 --> 00:06:47,630
because<font color="#E5E5E5"> message passing is a pain in the</font>

144
00:06:46,770 --> 00:06:52,109
<font color="#E5E5E5">ass</font>

145
00:06:47,630 --> 00:06:54,570
so to make sure<font color="#E5E5E5"> it was still efficient</font>

146
00:06:52,110 --> 00:06:59,010
<font color="#E5E5E5">there's external data files you load in</font>

147
00:06:54,570 --> 00:07:01,740
<font color="#E5E5E5">that have for</font><font color="#CCCCCC"> various purposes and those</font>

148
00:06:59,010 --> 00:07:04,710
<font color="#E5E5E5">get mapped with shared memory</font><font color="#CCCCCC"> which if</font>

149
00:07:01,740 --> 00:07:06,720
you run this<font color="#E5E5E5"> on Linux will ensure all</font>

150
00:07:04,710 --> 00:07:08,760
processes trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> access</font><font color="#E5E5E5"> that file</font>

151
00:07:06,720 --> 00:07:11,310
<font color="#E5E5E5">just get pointed at the same chunk of</font>

152
00:07:08,760 --> 00:07:13,920
memory<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can run however many</font>

153
00:07:11,310 --> 00:07:16,830
copies<font color="#E5E5E5"> they're all loading 20 gigs of</font>

154
00:07:13,920 --> 00:07:20,030
files<font color="#E5E5E5"> into</font><font color="#CCCCCC"> RAM but</font><font color="#E5E5E5"> it takes 20 gigs</font>

155
00:07:16,830 --> 00:07:24,169
regardless of how many<font color="#CCCCCC"> copies you run</font>

156
00:07:20,030 --> 00:07:27,599
shot 256<font color="#E5E5E5"> for brain wallets is important</font>

157
00:07:24,170 --> 00:07:30,810
<font color="#CCCCCC">it's also</font><font color="#E5E5E5"> used in anything that's</font>

158
00:07:27,600 --> 00:07:32,910
looking at<font color="#E5E5E5"> Bitcoin addresses so Intel</font>

159
00:07:30,810 --> 00:07:37,700
put out a bunch of assembly

160
00:07:32,910 --> 00:07:40,350
implementations of<font color="#E5E5E5"> sha-256 using</font>

161
00:07:37,700 --> 00:07:44,789
instruction set extensions<font color="#E5E5E5"> on Intel</font>

162
00:07:40,350 --> 00:07:46,410
processors there's actual<font color="#E5E5E5"> sha-256</font>

163
00:07:44,790 --> 00:07:49,410
instructions on some of the newer

164
00:07:46,410 --> 00:07:54,000
processors and<font color="#E5E5E5"> then there's the avx2 AVX</font>

165
00:07:49,410 --> 00:07:55,830
<font color="#E5E5E5">and ssse3 instruction sets which are</font>

166
00:07:54,000 --> 00:07:58,020
also faster and there's fallback to<font color="#CCCCCC"> see</font>

167
00:07:55,830 --> 00:08:01,409
<font color="#E5E5E5">implementation only</font><font color="#CCCCCC"> the transform</font>

168
00:07:58,020 --> 00:08:03,690
<font color="#CCCCCC">function is implemented</font><font color="#E5E5E5"> and you can't</font>

169
00:08:01,410 --> 00:08:05,670
incrementally<font color="#E5E5E5"> fill in the hash because</font>

170
00:08:03,690 --> 00:08:08,850
<font color="#E5E5E5">none of the stuff the brain player</font>

171
00:08:05,670 --> 00:08:11,580
doesn't<font color="#E5E5E5"> need to do that</font><font color="#CCCCCC"> I would love</font><font color="#E5E5E5"> to</font>

172
00:08:08,850 --> 00:08:16,350
find optimized versions of<font color="#CCCCCC"> ripe</font><font color="#E5E5E5"> NP</font><font color="#CCCCCC"> 160</font>

173
00:08:11,580 --> 00:08:21,150
and sha 3 check that I have not yet

174
00:08:16,350 --> 00:08:25,290
so hash padding hopefully some of<font color="#E5E5E5"> you</font>

175
00:08:21,150 --> 00:08:27,929
<font color="#E5E5E5">know how hash padding works but in short</font>

176
00:08:25,290 --> 00:08:30,960
<font color="#E5E5E5">you</font><font color="#CCCCCC"> have your data</font><font color="#E5E5E5"> you follow it with a</font>

177
00:08:27,930 --> 00:08:34,620
<font color="#CCCCCC">1 bit and</font><font color="#E5E5E5"> a bunch of</font><font color="#CCCCCC"> 0 bits and then the</font>

178
00:08:30,960 --> 00:08:37,289
length<font color="#E5E5E5"> of the input of the hash this is</font>

179
00:08:34,620 --> 00:08:40,260
so that<font color="#E5E5E5"> if you have two similar values</font>

180
00:08:37,289 --> 00:08:41,549
that differ<font color="#E5E5E5"> only in that they have a</font>

181
00:08:40,260 --> 00:08:45,540
<font color="#E5E5E5">bunch of nulls at the end of them you</font>

182
00:08:41,549 --> 00:08:47,490
get<font color="#CCCCCC"> different hash values so there's a</font>

183
00:08:45,540 --> 00:08:51,680
bunch<font color="#E5E5E5"> of static buffers in brain flavor</font>

184
00:08:47,490 --> 00:08:54,060
that have that all computed<font color="#CCCCCC"> already</font><font color="#E5E5E5"> and</font>

185
00:08:51,680 --> 00:08:56,939
then to speed things

186
00:08:54,060 --> 00:08:59,250
a little more<font color="#E5E5E5"> sha-256 output is written</font>

187
00:08:56,940 --> 00:09:02,130
directly into the<font color="#CCCCCC"> precomputed buffers</font>

188
00:08:59,250 --> 00:09:04,740
for right<font color="#CCCCCC"> Humpty 160 so</font><font color="#E5E5E5"> no copying is</font>

189
00:09:02,130 --> 00:09:06,840
required there<font color="#CCCCCC"> here's what one of</font><font color="#E5E5E5"> those</font>

190
00:09:04,740 --> 00:09:10,440
<font color="#E5E5E5">buffers looks like</font><font color="#CCCCCC"> for write MD 160</font>

191
00:09:06,840 --> 00:09:12,300
which is<font color="#CCCCCC"> little-endian</font><font color="#E5E5E5"> whereas</font><font color="#CCCCCC"> Schatzi</font>

192
00:09:10,440 --> 00:09:15,750
<font color="#CCCCCC">56 is big</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> which is</font><font color="#E5E5E5"> kind of annoying</font>

193
00:09:12,300 --> 00:09:22,459
and<font color="#CCCCCC"> then</font><font color="#E5E5E5"> here's what this</font><font color="#CCCCCC"> looks like in</font>

194
00:09:15,750 --> 00:09:27,690
use<font color="#E5E5E5"> and then here's one where it's doing</font>

195
00:09:22,460 --> 00:09:29,730
<font color="#E5E5E5">hash 160 supporting and arbitrary length</font>

196
00:09:27,690 --> 00:09:32,460
<font color="#E5E5E5">but the caller has to take care of all</font>

197
00:09:29,730 --> 00:09:37,370
<font color="#CCCCCC">of the padding</font><font color="#E5E5E5"> and then here's what that</font>

198
00:09:32,460 --> 00:09:41,190
<font color="#CCCCCC">looks like with a compressed public key</font>

199
00:09:37,370 --> 00:09:43,589
you get the you have padding and you put

200
00:09:41,190 --> 00:09:46,670
the<font color="#CCCCCC"> hat the public key in there and you</font>

201
00:09:43,589 --> 00:09:50,040
feed it<font color="#E5E5E5"> into this and it works great</font>

202
00:09:46,670 --> 00:09:54,630
<font color="#CCCCCC">other fun things you can attack multiple</font>

203
00:09:50,040 --> 00:09:58,800
<font color="#CCCCCC">cryptocurrencies at once if you if you</font>

204
00:09:54,630 --> 00:10:01,410
want<font color="#E5E5E5"> to do that you need</font><font color="#CCCCCC"> to post process</font>

205
00:09:58,800 --> 00:10:03,420
them because there's nothing<font color="#E5E5E5"> in the data</font>

206
00:10:01,410 --> 00:10:06,360
<font color="#E5E5E5">structure that will indicate which</font>

207
00:10:03,420 --> 00:10:08,579
cryptocurrency it came from<font color="#E5E5E5"> but I've</font>

208
00:10:06,360 --> 00:10:11,250
<font color="#E5E5E5">played around with getting addressed</font>

209
00:10:08,580 --> 00:10:12,690
dumps for a hundred random all coins and

210
00:10:11,250 --> 00:10:17,640
feeding them all and together<font color="#E5E5E5"> it works</font>

211
00:10:12,690 --> 00:10:19,950
perfectly fine if you have ones<font color="#E5E5E5"> that use</font>

212
00:10:17,640 --> 00:10:21,060
<font color="#CCCCCC">different public or different address</font>

213
00:10:19,950 --> 00:10:23,430
formats like aetherium

214
00:10:21,060 --> 00:10:26,699
you can still do<font color="#E5E5E5"> that you can reuse the</font>

215
00:10:23,430 --> 00:10:28,500
public key computations<font color="#CCCCCC"> but if you</font>

216
00:10:26,700 --> 00:10:30,300
wanted<font color="#E5E5E5"> to do say brain wallets on</font>

217
00:10:28,500 --> 00:10:32,490
<font color="#CCCCCC">aetherium</font><font color="#E5E5E5"> aetherium</font><font color="#CCCCCC"> nobody really used</font>

218
00:10:30,300 --> 00:10:35,069
<font color="#CCCCCC">shot 256 they used to kiss check instead</font>

219
00:10:32,490 --> 00:10:37,640
<font color="#E5E5E5">so the public keys you calculate aren't</font>

220
00:10:35,070 --> 00:10:39,900
going to be helpful<font color="#E5E5E5"> but if you wanted to</font>

221
00:10:37,640 --> 00:10:41,580
say search for keys matching a bad

222
00:10:39,900 --> 00:10:42,990
random number generator you could do

223
00:10:41,580 --> 00:10:45,900
that if you wanted to incremental<font color="#E5E5E5"> e</font>

224
00:10:42,990 --> 00:10:53,250
search for all the<font color="#CCCCCC"> keys starting with 1</font>

225
00:10:45,900 --> 00:10:56,189
you could<font color="#E5E5E5"> do that too</font><font color="#CCCCCC"> and so as far</font><font color="#E5E5E5"> as</font>

226
00:10:53,250 --> 00:10:57,959
public keys go<font color="#E5E5E5"> brain</font><font color="#CCCCCC"> flares</font><font color="#E5E5E5"> got a flag</font>

227
00:10:56,190 --> 00:11:00,810
that lets you specify which<font color="#E5E5E5"> transforms</font>

228
00:10:57,959 --> 00:11:03,439
you want<font color="#E5E5E5"> these are</font><font color="#CCCCCC"> storage function</font>

229
00:11:00,810 --> 00:11:07,229
pointers with<font color="#CCCCCC"> the type identifier</font>

230
00:11:03,440 --> 00:11:07,980
uncompressed<font color="#CCCCCC"> here's an example this</font><font color="#E5E5E5"> is</font>

231
00:11:07,230 --> 00:11:11,490
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> compare</font>

232
00:11:07,980 --> 00:11:14,100
<font color="#E5E5E5">key it's just hashing the public key for</font>

233
00:11:11,490 --> 00:11:16,410
compressed public key<font color="#CCCCCC"> there's a little</font>

234
00:11:14,100 --> 00:11:19,889
bit<font color="#E5E5E5"> of bit twiddling to extract out</font>

235
00:11:16,410 --> 00:11:22,079
whether<font color="#CCCCCC"> why was caught where why</font><font color="#E5E5E5"> whether</font>

236
00:11:19,889 --> 00:11:24,230
why was even or odd

237
00:11:22,079 --> 00:11:28,319
and again just<font color="#E5E5E5"> gets fed into</font><font color="#CCCCCC"> the hash</font>

238
00:11:24,230 --> 00:11:31,949
<font color="#E5E5E5">Assyrian uses Scheck instead we take the</font>

239
00:11:28,320 --> 00:11:34,860
last<font color="#E5E5E5"> 160 digits that's the address</font>

240
00:11:31,949 --> 00:11:36,719
the other one is<font color="#E5E5E5"> truncated x coordinates</font>

241
00:11:34,860 --> 00:11:42,510
which are interesting if you want to

242
00:11:36,720 --> 00:11:47,070
look at the signature<font color="#CCCCCC"> nonces a bitcoin</font>

243
00:11:42,510 --> 00:11:49,260
signature has as inputs<font color="#E5E5E5"> a nonce value</font>

244
00:11:47,070 --> 00:11:53,240
which must not be reused otherwise bad

245
00:11:49,260 --> 00:11:57,180
stuff and the private key<font color="#E5E5E5"> the</font>

246
00:11:53,240 --> 00:11:59,250
essentially the<font color="#CCCCCC"> x-coordinate</font><font color="#E5E5E5"> of a public</font>

247
00:11:57,180 --> 00:12:01,500
key created using the nonce as the

248
00:11:59,250 --> 00:12:02,790
private key is one component of the

249
00:12:01,500 --> 00:12:05,100
signature and<font color="#E5E5E5"> then there's another</font>

250
00:12:02,790 --> 00:12:09,959
component and don't worry<font color="#CCCCCC"> about it too</font>

251
00:12:05,100 --> 00:12:13,730
much<font color="#CCCCCC"> then if you want</font><font color="#E5E5E5"> to look for</font><font color="#CCCCCC"> pay</font>

252
00:12:09,959 --> 00:12:13,729
<font color="#CCCCCC">descript hash stuff you can do that</font>

253
00:12:14,899 --> 00:12:21,020
really<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that a driller we're</font>

254
00:12:19,920 --> 00:12:23,750
getting out<font color="#E5E5E5"> okay</font>

255
00:12:21,020 --> 00:12:29,309
[Music]

256
00:12:23,750 --> 00:12:29,309
[Applause]

257
00:12:33,140 --> 00:12:42,510
great<font color="#E5E5E5"> carry on here all</font><font color="#CCCCCC"> right before we</font>

258
00:12:40,350 --> 00:12:47,279
<font color="#CCCCCC">get into some of the nastier bits here</font>

259
00:12:42,510 --> 00:12:48,439
<font color="#E5E5E5">let's I wanted to briefly mention</font><font color="#CCCCCC"> that</font>

260
00:12:47,279 --> 00:12:50,519
there are<font color="#E5E5E5"> some</font><font color="#CCCCCC"> pretty serious</font>

261
00:12:48,440 --> 00:12:52,440
differences<font color="#E5E5E5"> in speed between the</font>

262
00:12:50,519 --> 00:12:57,720
<font color="#E5E5E5">different operations</font><font color="#CCCCCC"> you can do on on an</font>

263
00:12:52,440 --> 00:12:59,790
elliptic curve adding<font color="#CCCCCC"> two field elements</font>

264
00:12:57,720 --> 00:13:02,040
<font color="#CCCCCC">super</font><font color="#E5E5E5"> fast multiplying two field</font>

265
00:12:59,790 --> 00:13:04,709
elements pretty fast<font color="#E5E5E5"> doubling a point</font>

266
00:13:02,040 --> 00:13:05,550
fast<font color="#CCCCCC"> adding two points together it's</font>

267
00:13:04,709 --> 00:13:07,589
<font color="#CCCCCC">alright</font>

268
00:13:05,550 --> 00:13:09,569
inverting a field element<font color="#E5E5E5"> kind of slow</font>

269
00:13:07,589 --> 00:13:11,910
multiplying an integer by a point which

270
00:13:09,569 --> 00:13:15,899
is deriving a public key

271
00:13:11,910 --> 00:13:17,819
that's about<font color="#E5E5E5"> the slowest part so let's</font>

272
00:13:15,899 --> 00:13:21,360
talk<font color="#CCCCCC"> about point multiplication the</font>

273
00:13:17,819 --> 00:13:25,140
naive method<font color="#E5E5E5"> is just</font><font color="#CCCCCC"> too</font>

274
00:13:21,360 --> 00:13:30,810
with its this<font color="#E5E5E5"> is if you can read that</font>

275
00:13:25,140 --> 00:13:37,500
great<font color="#E5E5E5"> but otherwise I just want to make</font>

276
00:13:30,810 --> 00:13:42,810
<font color="#CCCCCC">sure it is</font><font color="#E5E5E5"> yeah we</font><font color="#CCCCCC"> I yeah screens gonna</font>

277
00:13:37,500 --> 00:13:48,180
<font color="#CCCCCC">flicker I guess</font><font color="#E5E5E5"> sorry</font><font color="#CCCCCC"> right so you start</font>

278
00:13:42,810 --> 00:13:50,849
<font color="#E5E5E5">out</font><font color="#CCCCCC"> with the base point</font><font color="#E5E5E5"> you add it to an</font>

279
00:13:48,180 --> 00:13:52,650
accumulator<font color="#E5E5E5"> if your bit</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> one double</font>

280
00:13:50,850 --> 00:13:55,410
<font color="#CCCCCC">its its the</font><font color="#E5E5E5"> next bit is one you add</font>

281
00:13:52,650 --> 00:13:59,699
again and so forth<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is pretty</font>

282
00:13:55,410 --> 00:14:03,319
standard<font color="#CCCCCC"> but this can</font><font color="#E5E5E5"> be made a lot</font>

283
00:13:59,700 --> 00:14:06,270
faster with a partial pre-computation

284
00:14:03,320 --> 00:14:12,600
<font color="#CCCCCC">again here's here's what that looks like</font>

285
00:14:06,270 --> 00:14:15,030
<font color="#E5E5E5">in in a academic paper</font><font color="#CCCCCC"> and here's what I</font>

286
00:14:12,600 --> 00:14:16,710
came up with<font color="#CCCCCC"> after staring at the</font>

287
00:14:15,030 --> 00:14:19,140
<font color="#E5E5E5">explanation in the paper and the code</font>

288
00:14:16,710 --> 00:14:21,840
for<font color="#CCCCCC"> a while</font>

289
00:14:19,140 --> 00:14:27,720
you<font color="#CCCCCC"> set up a 2d array of points you fill</font>

290
00:14:21,840 --> 00:14:32,070
the 0th column with<font color="#E5E5E5"> the points for 0</font>

291
00:14:27,720 --> 00:14:33,690
through<font color="#CCCCCC"> 2 to the n minus</font><font color="#E5E5E5"> 1 the</font><font color="#CCCCCC"> 0 point</font>

292
00:14:32,070 --> 00:14:36,360
is<font color="#E5E5E5"> not actually</font><font color="#CCCCCC"> the 0 point it's the</font>

293
00:14:33,690 --> 00:14:38,940
infinity points but when you add it<font color="#CCCCCC"> to</font>

294
00:14:36,360 --> 00:14:42,120
<font color="#CCCCCC">something</font><font color="#E5E5E5"> you don't change the value</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> I</font>

295
00:14:38,940 --> 00:14:45,140
don't<font color="#CCCCCC"> know why this is but it works and</font>

296
00:14:42,120 --> 00:14:49,260
then<font color="#CCCCCC"> you fill out the rest</font><font color="#E5E5E5"> of the row by</font>

297
00:14:45,140 --> 00:14:54,060
multiplying<font color="#E5E5E5"> it out as necessary</font><font color="#CCCCCC"> so this</font>

298
00:14:49,260 --> 00:14:56,569
turns your your point<font color="#E5E5E5"> multiplied into</font>

299
00:14:54,060 --> 00:15:00,780
<font color="#E5E5E5">basically a bunch of lookups and</font><font color="#CCCCCC"> adds</font>

300
00:14:56,570 --> 00:15:03,930
<font color="#E5E5E5">memory usage is about as you would</font>

301
00:15:00,780 --> 00:15:10,939
expect<font color="#CCCCCC"> the code I've currently got takes</font>

302
00:15:03,930 --> 00:15:16,349
88 bytes per entry<font color="#E5E5E5"> so that's that's that</font>

303
00:15:10,940 --> 00:15:18,390
<font color="#CCCCCC">and this</font><font color="#E5E5E5"> is limited in large part by Ram</font>

304
00:15:16,350 --> 00:15:20,480
speed rather than CPU speed because

305
00:15:18,390 --> 00:15:22,560
you're gonna be missing every cache

306
00:15:20,480 --> 00:15:29,930
<font color="#E5E5E5">you're gonna be missing the cache every</font>

307
00:15:22,560 --> 00:15:32,640
time<font color="#E5E5E5"> lib SEC</font><font color="#CCCCCC"> P 256 K 1 which is the</font>

308
00:15:29,930 --> 00:15:34,079
elliptic curve library for this curve

309
00:15:32,640 --> 00:15:34,889
that<font color="#CCCCCC"> was</font><font color="#E5E5E5"> written by</font><font color="#CCCCCC"> a bunch</font><font color="#E5E5E5"> of the</font>

310
00:15:34,080 --> 00:15:38,029
<font color="#E5E5E5">Bitcoin people</font>

311
00:15:34,889 --> 00:15:41,220
does this<font color="#E5E5E5"> already with a four bit window</font>

312
00:15:38,029 --> 00:15:44,160
<font color="#E5E5E5">which which</font><font color="#CCCCCC"> is fine it only takes</font><font color="#E5E5E5"> up a</font>

313
00:15:41,220 --> 00:15:46,290
<font color="#E5E5E5">little bit of memory</font><font color="#CCCCCC"> brain flare when it</font>

314
00:15:44,160 --> 00:15:49,679
starts up does a<font color="#CCCCCC"> 16-bit window which is</font>

315
00:15:46,290 --> 00:15:53,849
<font color="#E5E5E5">significantly faster</font><font color="#CCCCCC"> most</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> my actual</font>

316
00:15:49,679 --> 00:15:57,149
testing I do with a<font color="#E5E5E5"> 24-bit window which</font>

317
00:15:53,850 --> 00:16:03,839
takes about<font color="#CCCCCC"> 6 16 gigs of RAM</font><font color="#E5E5E5"> and yields</font>

318
00:15:57,149 --> 00:16:06,679
a 2.5<font color="#E5E5E5"> X feet up</font><font color="#CCCCCC"> bigger windows use more</font>

319
00:16:03,839 --> 00:16:10,730
<font color="#CCCCCC">ram you quickly</font><font color="#E5E5E5"> hit diminishing returns</font>

320
00:16:06,679 --> 00:16:13,470
<font color="#CCCCCC">there's a paper - about how this works</font>

321
00:16:10,730 --> 00:16:15,449
<font color="#CCCCCC">and a grad student named</font><font color="#E5E5E5"> song at</font>

322
00:16:13,470 --> 00:16:17,129
University College London wrote this

323
00:16:15,449 --> 00:16:18,839
code for me and I integrated<font color="#E5E5E5"> in</font><font color="#CCCCCC"> this</font>

324
00:16:17,129 --> 00:16:23,040
<font color="#E5E5E5">brain flare and you can read the paper</font>

325
00:16:18,839 --> 00:16:26,369
there<font color="#CCCCCC"> ok so next thing</font><font color="#E5E5E5"> is a fine</font><font color="#CCCCCC"> versus</font>

326
00:16:23,040 --> 00:16:29,189
<font color="#E5E5E5">Jacobian coordinates a fine is the</font>

327
00:16:26,369 --> 00:16:33,839
simple XY representation of a point

328
00:16:29,189 --> 00:16:35,669
<font color="#E5E5E5">Jacobian adds the Z value and uses this</font>

329
00:16:33,839 --> 00:16:38,459
Z value to do tricky things that make

330
00:16:35,669 --> 00:16:42,079
the<font color="#CCCCCC"> math</font><font color="#E5E5E5"> faster</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is all well</font><font color="#CCCCCC"> and</font>

331
00:16:38,459 --> 00:16:45,529
good<font color="#E5E5E5"> but the Z value does not stay</font><font color="#CCCCCC"> 1 and</font>

332
00:16:42,079 --> 00:16:49,559
so when you want<font color="#E5E5E5"> to convert you have to</font>

333
00:16:45,529 --> 00:16:52,169
divide and<font color="#E5E5E5"> well dividing in finite</font>

334
00:16:49,559 --> 00:16:54,749
fields is actually kind<font color="#CCCCCC"> of tricky</font>

335
00:16:52,169 --> 00:16:56,339
let's I'm gonna go<font color="#E5E5E5"> very quickly through</font>

336
00:16:54,749 --> 00:17:03,059
<font color="#CCCCCC">these</font><font color="#E5E5E5"> slides because we were interrupted</font>

337
00:16:56,339 --> 00:17:06,839
<font color="#CCCCCC">and it's not super important</font><font color="#E5E5E5"> so 1 plus 1</font>

338
00:17:03,059 --> 00:17:12,599
is 2 2<font color="#CCCCCC"> plus 2 is 4 3</font><font color="#E5E5E5"> plus 3 is 1 because</font>

339
00:17:06,839 --> 00:17:14,938
modular arithmetic<font color="#CCCCCC"> if you want to look</font>

340
00:17:12,599 --> 00:17:17,579
up finite field arithmetic or modular

341
00:17:14,939 --> 00:17:21,569
arithmetic please do so<font color="#CCCCCC"> I don't have</font>

342
00:17:17,579 --> 00:17:25,019
time<font color="#E5E5E5"> to explain</font><font color="#CCCCCC"> it the tricky</font><font color="#E5E5E5"> part is</font>

343
00:17:21,569 --> 00:17:28,500
division<font color="#CCCCCC"> so</font><font color="#E5E5E5"> the way we do envision</font>

344
00:17:25,019 --> 00:17:31,470
division is instead<font color="#E5E5E5"> we multiply it by</font>

345
00:17:28,500 --> 00:17:35,070
<font color="#CCCCCC">the reciprocal</font><font color="#E5E5E5"> or as it's generally</font>

346
00:17:31,470 --> 00:17:39,539
called<font color="#E5E5E5"> when doing this sort of math the</font>

347
00:17:35,070 --> 00:17:46,408
inverse<font color="#E5E5E5"> the multiplicative inverse so</font>

348
00:17:39,539 --> 00:17:48,658
given<font color="#E5E5E5"> if you want to divide you don't if</font>

349
00:17:46,409 --> 00:17:52,320
you want to divide or

350
00:17:48,659 --> 00:17:59,340
if you want the inverse of X given<font color="#E5E5E5"> X you</font>

351
00:17:52,320 --> 00:18:03,869
find<font color="#CCCCCC"> Y so that X times y equals 1 so in</font>

352
00:17:59,340 --> 00:18:06,809
our<font color="#E5E5E5"> five by in our five elements toy</font>

353
00:18:03,869 --> 00:18:09,418
<font color="#E5E5E5">field</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the table and don't divide</font>

354
00:18:06,809 --> 00:18:12,899
by<font color="#E5E5E5"> zero because that's bad here's some</font>

355
00:18:09,419 --> 00:18:14,789
<font color="#E5E5E5">examples so to convert our Jacobian</font>

356
00:18:12,899 --> 00:18:16,590
coordinates back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a fine we need</font><font color="#E5E5E5"> to do</font>

357
00:18:14,789 --> 00:18:19,139
division<font color="#CCCCCC"> to do division we need</font><font color="#E5E5E5"> to find</font>

358
00:18:16,590 --> 00:18:23,970
<font color="#E5E5E5">the</font><font color="#CCCCCC"> inverse of the</font><font color="#E5E5E5"> Z value finding the</font>

359
00:18:19,139 --> 00:18:28,408
inverse<font color="#E5E5E5"> is very slow</font><font color="#CCCCCC"> but we can cheat</font>

360
00:18:23,970 --> 00:18:31,279
<font color="#E5E5E5">with algebra</font><font color="#CCCCCC"> so instead we</font><font color="#E5E5E5"> take a bunch</font>

361
00:18:28,409 --> 00:18:34,409
<font color="#CCCCCC">of</font><font color="#E5E5E5"> Z values we batch them together and</font>

362
00:18:31,279 --> 00:18:37,470
we do one<font color="#E5E5E5"> inversion for the entire group</font>

363
00:18:34,409 --> 00:18:39,330
<font color="#E5E5E5">plus three multiplications per Z this is</font>

364
00:18:37,470 --> 00:18:41,669
a lot<font color="#E5E5E5"> faster</font><font color="#CCCCCC"> in brainwallet mode it's a</font>

365
00:18:39,330 --> 00:18:43,649
1.7 X feet up if you're doing

366
00:18:41,669 --> 00:18:49,080
incremental<font color="#CCCCCC"> mode it's actually</font><font color="#E5E5E5"> 16</font><font color="#CCCCCC"> X</font>

367
00:18:43,649 --> 00:18:50,488
<font color="#E5E5E5">speed-up so very much worth doing</font><font color="#CCCCCC"> it</font>

368
00:18:49,080 --> 00:18:54,178
took me a while<font color="#CCCCCC"> to understand this</font><font color="#E5E5E5"> very</font>

369
00:18:50,489 --> 00:18:57,029
<font color="#CCCCCC">well but some here's here's a quick</font>

370
00:18:54,179 --> 00:19:01,759
example<font color="#E5E5E5"> so we have four values we're</font>

371
00:18:57,029 --> 00:19:01,759
batching we multiply them together

372
00:19:02,239 --> 00:19:08,279
<font color="#CCCCCC">keeping keeping each progressive one</font>

373
00:19:06,539 --> 00:19:12,690
<font color="#E5E5E5">because we'll need them in a moment</font>

374
00:19:08,279 --> 00:19:19,619
then we<font color="#E5E5E5"> calculates one inverse of our</font>

375
00:19:12,690 --> 00:19:20,789
<font color="#E5E5E5">last value</font><font color="#CCCCCC"> then we know that's like</font><font color="#E5E5E5"> that</font>

376
00:19:19,619 --> 00:19:21,959
<font color="#E5E5E5">slightly messed up that three is</font>

377
00:19:20,789 --> 00:19:24,779
supposed to be at the<font color="#E5E5E5"> end of the first</font>

378
00:19:21,960 --> 00:19:27,659
line<font color="#E5E5E5"> I don't know how that happened so</font>

379
00:19:24,779 --> 00:19:31,979
now we cancel some stuff out<font color="#CCCCCC"> so we want</font>

380
00:19:27,659 --> 00:19:34,139
the inverse<font color="#E5E5E5"> of Z</font><font color="#CCCCCC"> 3 so we take Z zero</font>

381
00:19:31,979 --> 00:19:40,999
times Z 1 times<font color="#E5E5E5"> the zoo and divide it</font><font color="#CCCCCC"> by</font>

382
00:19:34,139 --> 00:19:40,998
<font color="#E5E5E5">the inverse</font><font color="#CCCCCC"> of Z zero Z 1 Z 2 Z 3 and</font>

383
00:19:41,090 --> 00:19:49,199
everything except for the<font color="#CCCCCC"> 1 over Z 3</font>

384
00:19:43,769 --> 00:19:53,129
cancels out then we cancel out the<font color="#E5E5E5"> Z 3</font>

385
00:19:49,200 --> 00:19:57,450
term in<font color="#E5E5E5"> our temporary variable and then</font>

386
00:19:53,129 --> 00:20:00,228
we repeat this to get<font color="#E5E5E5"> all of the</font>

387
00:19:57,450 --> 00:20:00,229
inverses

388
00:20:01,600 --> 00:20:07,730
right<font color="#E5E5E5"> helpful other thing that we can do</font>

389
00:20:05,899 --> 00:20:10,279
to make<font color="#CCCCCC"> things faster is just not give a</font>

390
00:20:07,730 --> 00:20:15,019
<font color="#CCCCCC"> about side channels older versions</font>

391
00:20:10,279 --> 00:20:17,929
of the library didn't put much<font color="#E5E5E5"> effort</font>

392
00:20:15,019 --> 00:20:19,100
into avoiding side channels<font color="#E5E5E5"> because</font>

393
00:20:17,929 --> 00:20:21,380
nobody<font color="#E5E5E5"> was supposed to use it for</font>

394
00:20:19,100 --> 00:20:23,240
anything<font color="#E5E5E5"> real and then they went back</font>

395
00:20:21,380 --> 00:20:25,130
<font color="#E5E5E5">later and fixed all</font><font color="#CCCCCC"> of this stuff up so</font>

396
00:20:23,240 --> 00:20:27,799
<font color="#E5E5E5">I just</font><font color="#CCCCCC"> use the old version that is</font>

397
00:20:25,130 --> 00:20:33,230
faster<font color="#E5E5E5"> but completely unsafe to use for</font>

398
00:20:27,799 --> 00:20:37,580
any real work<font color="#E5E5E5"> so on my to-do list is</font><font color="#CCCCCC"> to</font>

399
00:20:33,230 --> 00:20:41,240
<font color="#E5E5E5">actually implement all of the all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

400
00:20:37,580 --> 00:20:43,428
algorithms<font color="#CCCCCC"> that I can't</font><font color="#E5E5E5"> implement in</font>

401
00:20:41,240 --> 00:20:48,230
<font color="#E5E5E5">timings unsafe ways to make things</font>

402
00:20:43,429 --> 00:20:50,389
faster<font color="#CCCCCC"> can also do some</font><font color="#E5E5E5"> special cases</font>

403
00:20:48,230 --> 00:20:52,519
<font color="#CCCCCC">brain flares got an incremental mode</font>

404
00:20:50,389 --> 00:20:53,928
which takes<font color="#E5E5E5"> advantage</font><font color="#CCCCCC"> of the fact that</font>

405
00:20:52,519 --> 00:20:57,409
key pairs are hormone<font color="#CCCCCC"> Norfolk for</font>

406
00:20:53,929 --> 00:21:01,309
addition<font color="#CCCCCC"> but what</font><font color="#E5E5E5"> that means is if we</font>

407
00:20:57,409 --> 00:21:02,840
<font color="#E5E5E5">take the pub key of if we take the pub</font>

408
00:21:01,309 --> 00:21:08,210
key of the sum of<font color="#CCCCCC"> two private keys</font>

409
00:21:02,840 --> 00:21:11,570
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> the same as the sum of the public</font>

410
00:21:08,210 --> 00:21:13,789
keys of those two private keys and

411
00:21:11,570 --> 00:21:15,080
adding public points<font color="#CCCCCC"> together is much</font>

412
00:21:13,789 --> 00:21:17,240
<font color="#CCCCCC">faster so if we want to</font><font color="#E5E5E5"> go through one</font>

413
00:21:15,080 --> 00:21:18,918
of<font color="#E5E5E5"> them instead of incrementing the</font>

414
00:21:17,240 --> 00:21:21,740
private key computing a new public key

415
00:21:18,919 --> 00:21:24,679
we compute a starting private key and

416
00:21:21,740 --> 00:21:26,870
then<font color="#CCCCCC"> we take the equivalent public key</font>

417
00:21:24,679 --> 00:21:32,299
<font color="#E5E5E5">for one and just add it</font><font color="#CCCCCC"> over and over</font>

418
00:21:26,870 --> 00:21:34,250
<font color="#E5E5E5">again really</font><font color="#CCCCCC"> fast and then the most</font>

419
00:21:32,299 --> 00:21:37,940
recent fun thing that<font color="#CCCCCC"> I did was keys</font>

420
00:21:34,250 --> 00:21:41,539
from a byte stream so if you've<font color="#E5E5E5"> got a</font>

421
00:21:37,940 --> 00:21:43,820
shitty random number generator say say

422
00:21:41,539 --> 00:21:45,889
somebody decided that a good<font color="#E5E5E5"> way to</font>

423
00:21:43,820 --> 00:21:48,139
generate<font color="#E5E5E5"> random</font><font color="#CCCCCC"> Keys was to use the</font>

424
00:21:45,889 --> 00:21:52,279
<font color="#E5E5E5">JavaScript math dot random function and</font>

425
00:21:48,139 --> 00:21:55,129
turn it into a byte and<font color="#E5E5E5"> call that 32</font>

426
00:21:52,279 --> 00:21:57,409
times well if you wrote something<font color="#E5E5E5"> to</font>

427
00:21:55,129 --> 00:21:59,480
generate that key stream you could feed

428
00:21:57,409 --> 00:22:02,809
it in this way<font color="#CCCCCC"> it's about</font><font color="#E5E5E5"> twice as fast</font>

429
00:21:59,480 --> 00:22:04,490
as<font color="#E5E5E5"> feeding in raw raw private keys</font><font color="#CCCCCC"> the</font>

430
00:22:02,809 --> 00:22:08,299
way this works is<font color="#E5E5E5"> we built two tables</font>

431
00:22:04,490 --> 00:22:12,129
one<font color="#E5E5E5"> for subtracting the most significant</font>

432
00:22:08,299 --> 00:22:15,830
<font color="#CCCCCC">bytes and</font><font color="#E5E5E5"> then another for adding the</font>

433
00:22:12,129 --> 00:22:20,030
least significant

434
00:22:15,830 --> 00:22:23,559
and we go<font color="#CCCCCC"> through subtract</font><font color="#E5E5E5"> and subtract</font>

435
00:22:20,030 --> 00:22:28,250
<font color="#E5E5E5">the most significant byte</font><font color="#CCCCCC"> multiplied by</font>

436
00:22:23,559 --> 00:22:30,230
<font color="#E5E5E5">256</font><font color="#CCCCCC"> by doubling</font><font color="#E5E5E5"> eight times there's a</font>

437
00:22:28,250 --> 00:22:32,840
morph is slightly more efficient way<font color="#CCCCCC"> to</font>

438
00:22:30,230 --> 00:22:35,059
do this where I can<font color="#CCCCCC"> just multiply</font><font color="#E5E5E5"> by 256</font>

439
00:22:32,840 --> 00:22:40,820
but it's a pretty<font color="#E5E5E5"> marginal improvement</font>

440
00:22:35,059 --> 00:22:42,230
and I haven't had time<font color="#CCCCCC"> and then we once</font>

441
00:22:40,820 --> 00:22:45,590
we've done that we can<font color="#CCCCCC"> add in the new</font>

442
00:22:42,230 --> 00:22:47,860
<font color="#E5E5E5">byte there is a bunch of tricky special</font>

443
00:22:45,590 --> 00:22:51,709
cases<font color="#CCCCCC"> that have to be</font><font color="#E5E5E5"> done for this</font>

444
00:22:47,860 --> 00:22:55,100
<font color="#E5E5E5">there's some invalid private keys that</font>

445
00:22:51,710 --> 00:22:57,590
<font color="#E5E5E5">if you're say doing a forensic search</font><font color="#CCCCCC"> of</font>

446
00:22:55,100 --> 00:22:59,840
Bitcoin<font color="#E5E5E5"> keys from a</font><font color="#CCCCCC"> ram dump</font><font color="#E5E5E5"> or a</font>

447
00:22:57,590 --> 00:23:01,909
<font color="#E5E5E5">harddrive dump you'll get lots of</font>

448
00:22:59,840 --> 00:23:05,480
strings<font color="#E5E5E5"> of zeros which are invalid keys</font>

449
00:23:01,910 --> 00:23:08,300
<font color="#CCCCCC">so</font><font color="#E5E5E5"> that has to be detected and fix-ups</font>

450
00:23:05,480 --> 00:23:11,330
must be done or if you get all<font color="#CCCCCC"> one bits</font>

451
00:23:08,300 --> 00:23:16,399
that's it's a little weird<font color="#E5E5E5"> and you can't</font>

452
00:23:11,330 --> 00:23:18,860
keep adding like this but it's not

453
00:23:16,400 --> 00:23:21,590
<font color="#E5E5E5">really a big deal</font><font color="#CCCCCC"> I actually found some</font>

454
00:23:18,860 --> 00:23:27,709
<font color="#E5E5E5">really weird</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> dumping my hard</font>

455
00:23:21,590 --> 00:23:31,280
drive into<font color="#E5E5E5"> this there's a lot a lot of</font>

456
00:23:27,710 --> 00:23:33,559
<font color="#CCCCCC">random</font><font color="#E5E5E5"> Linux binaries that have</font><font color="#CCCCCC"> sha-256</font>

457
00:23:31,280 --> 00:23:38,620
is of random strings<font color="#E5E5E5"> embedded in them</font>

458
00:23:33,559 --> 00:23:42,170
for some<font color="#CCCCCC"> reason also for</font><font color="#E5E5E5"> some reason a</font>

459
00:23:38,620 --> 00:23:44,059
<font color="#E5E5E5">sha-256 of some default picture that</font>

460
00:23:42,170 --> 00:23:47,570
<font color="#E5E5E5">comes with Windows</font><font color="#CCCCCC"> 7</font><font color="#E5E5E5"> was in there I have</font>

461
00:23:44,059 --> 00:23:50,450
no<font color="#E5E5E5"> idea why that was there either I have</font>

462
00:23:47,570 --> 00:23:52,610
I have<font color="#E5E5E5"> some more examples that I will go</font>

463
00:23:50,450 --> 00:23:59,090
through<font color="#E5E5E5"> at the talk I'm giving with</font>

464
00:23:52,610 --> 00:24:01,399
Murray<font color="#CCCCCC"> later</font><font color="#E5E5E5"> where we</font><font color="#CCCCCC"> analyze</font><font color="#E5E5E5"> terrible</font>

465
00:23:59,090 --> 00:24:05,178
brain wallets<font color="#E5E5E5"> and the people who steal</font>

466
00:24:01,400 --> 00:24:07,309
<font color="#CCCCCC">from them anyway so this is a little</font>

467
00:24:05,179 --> 00:24:10,700
<font color="#CCCCCC">easier</font><font color="#E5E5E5"> to understand with an example</font>

468
00:24:07,309 --> 00:24:12,800
perhaps<font color="#E5E5E5"> so here's a starting key just</font>

469
00:24:10,700 --> 00:24:15,200
ignore the fact<font color="#CCCCCC"> that this is</font><font color="#E5E5E5"> not the</font>

470
00:24:12,800 --> 00:24:18,050
<font color="#E5E5E5">right size and is only one value just</font>

471
00:24:15,200 --> 00:24:22,400
pretend<font color="#E5E5E5"> that this pretend that this has</font>

472
00:24:18,050 --> 00:24:25,070
a corresponding the public point<font color="#CCCCCC"> okay so</font>

473
00:24:22,400 --> 00:24:29,290
we have the value<font color="#E5E5E5"> we subtract off the</font>

474
00:24:25,070 --> 00:24:33,649
<font color="#E5E5E5">top byte we multiply by 250</font>

475
00:24:29,290 --> 00:24:36,590
<font color="#E5E5E5">add in the new bottom bite and then do</font>

476
00:24:33,650 --> 00:24:40,570
this<font color="#E5E5E5"> again over and over</font><font color="#CCCCCC"> again speaking</font>

477
00:24:36,590 --> 00:24:40,570
<font color="#E5E5E5">through whatever it is you're looking at</font>

478
00:24:41,080 --> 00:24:50,689
<font color="#CCCCCC">so in order to do searching</font><font color="#E5E5E5"> brain flare</font>

479
00:24:45,920 --> 00:24:52,850
uses a bloom<font color="#CCCCCC"> filter there's there's a</font>

480
00:24:50,690 --> 00:24:54,260
<font color="#E5E5E5">couple hundred million addresses that</font>

481
00:24:52,850 --> 00:24:58,129
<font color="#CCCCCC">have been used in Bitcoin since the</font>

482
00:24:54,260 --> 00:25:00,860
beginning of time<font color="#CCCCCC"> bloom filter is the</font>

483
00:24:58,130 --> 00:25:03,920
data structure<font color="#CCCCCC"> that allows you to check</font>

484
00:25:00,860 --> 00:25:05,959
<font color="#CCCCCC">for set membership</font><font color="#E5E5E5"> efficiency our set</font>

485
00:25:03,920 --> 00:25:08,890
membership efficiently as long as you're

486
00:25:05,960 --> 00:25:13,160
<font color="#CCCCCC">okay with the occasional false positive</font>

487
00:25:08,890 --> 00:25:16,820
<font color="#CCCCCC">it's pretty quick the way this</font><font color="#E5E5E5"> works is</font>

488
00:25:13,160 --> 00:25:21,200
<font color="#E5E5E5">you</font><font color="#CCCCCC"> have you have hashes</font><font color="#E5E5E5"> of some input</font>

489
00:25:16,820 --> 00:25:24,860
value that are used to turn on a bit in

490
00:25:21,200 --> 00:25:26,300
a large bitmap and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> to check</font><font color="#E5E5E5"> you</font>

491
00:25:24,860 --> 00:25:27,530
just<font color="#E5E5E5"> check and</font><font color="#CCCCCC"> see if all</font><font color="#E5E5E5"> of the bits</font>

492
00:25:26,300 --> 00:25:30,110
<font color="#CCCCCC">that correspond to your</font><font color="#E5E5E5"> input are</font>

493
00:25:27,530 --> 00:25:31,820
already said and<font color="#E5E5E5"> if so you</font><font color="#CCCCCC"> have a hit or</font>

494
00:25:30,110 --> 00:25:33,229
<font color="#CCCCCC">maybe a false positive and you can</font>

495
00:25:31,820 --> 00:25:38,409
calculate<font color="#E5E5E5"> the odds of</font><font color="#CCCCCC"> a false</font><font color="#E5E5E5"> positive</font>

496
00:25:33,230 --> 00:25:42,680
<font color="#CCCCCC">for a given data set the thing</font><font color="#E5E5E5"> is though</font>

497
00:25:38,410 --> 00:25:43,940
we're<font color="#E5E5E5"> looking at hashes of Bitcoin</font>

498
00:25:42,680 --> 00:25:45,170
public keys and public keys themselves

499
00:25:43,940 --> 00:25:48,230
<font color="#CCCCCC">and</font><font color="#E5E5E5"> these are pretty randomly</font>

500
00:25:45,170 --> 00:25:51,050
distributed<font color="#E5E5E5"> so we can just take</font>

501
00:25:48,230 --> 00:25:53,720
<font color="#E5E5E5">different combinations of that and</font>

502
00:25:51,050 --> 00:25:57,740
splice<font color="#CCCCCC"> it together and call</font><font color="#E5E5E5"> that a hash</font>

503
00:25:53,720 --> 00:26:01,490
and that actually works fine<font color="#CCCCCC"> so here's</font>

504
00:25:57,740 --> 00:26:06,350
here's<font color="#E5E5E5"> some ugly macros</font><font color="#CCCCCC"> that do the</font>

505
00:26:01,490 --> 00:26:08,810
whole thing<font color="#CCCCCC"> in this particular the way</font>

506
00:26:06,350 --> 00:26:13,360
this particular<font color="#E5E5E5"> algorithm works is it</font>

507
00:26:08,810 --> 00:26:18,800
takes<font color="#CCCCCC"> the public key as an array of five</font>

508
00:26:13,360 --> 00:26:20,270
32-bit values<font color="#CCCCCC"> there's a</font><font color="#E5E5E5"> couple of hashes</font>

509
00:26:18,800 --> 00:26:25,340
<font color="#CCCCCC">that are just</font><font color="#E5E5E5"> taking</font><font color="#CCCCCC"> page take one of</font>

510
00:26:20,270 --> 00:26:27,830
the values<font color="#CCCCCC"> and others that take certain</font>

511
00:26:25,340 --> 00:26:30,169
<font color="#E5E5E5">parts of one of the values that shift</font>

512
00:26:27,830 --> 00:26:35,030
them<font color="#CCCCCC"> around and</font><font color="#E5E5E5"> or them</font><font color="#CCCCCC"> together and</font>

513
00:26:30,170 --> 00:26:38,210
again<font color="#E5E5E5"> this works perfectly fine except</font>

514
00:26:35,030 --> 00:26:40,430
for<font color="#CCCCCC"> that now</font><font color="#E5E5E5"> Bitcoin now the Bitcoin has</font>

515
00:26:38,210 --> 00:26:42,530
<font color="#E5E5E5">about</font><font color="#CCCCCC"> I think last</font><font color="#E5E5E5"> time I checked it was</font>

516
00:26:40,430 --> 00:26:46,690
getting close to<font color="#CCCCCC"> 300 million</font>

517
00:26:42,530 --> 00:26:52,450
dresses since<font color="#E5E5E5"> the beginning of time the</font>

518
00:26:46,690 --> 00:26:56,030
the 32-bit bloom filter with<font color="#CCCCCC"> twenty</font>

519
00:26:52,450 --> 00:26:59,630
hashes<font color="#CCCCCC"> it starts to have a lot of false</font>

520
00:26:56,030 --> 00:27:02,480
positives<font color="#CCCCCC"> so I am writing some new code</font>

521
00:26:59,630 --> 00:27:05,330
<font color="#E5E5E5">that works around this problem which</font>

522
00:27:02,480 --> 00:27:07,280
looks like<font color="#E5E5E5"> this I wrote a</font><font color="#CCCCCC"> Python script</font>

523
00:27:05,330 --> 00:27:11,449
that<font color="#CCCCCC"> actually generated</font><font color="#E5E5E5"> this I didn't</font>

524
00:27:07,280 --> 00:27:18,430
type all of<font color="#CCCCCC"> this out by hand but I went</font>

525
00:27:11,450 --> 00:27:22,040
<font color="#CCCCCC">through and found combinations</font><font color="#E5E5E5"> of shorts</font>

526
00:27:18,430 --> 00:27:25,250
16-bit values out<font color="#CCCCCC"> of the hash value</font><font color="#E5E5E5"> that</font>

527
00:27:22,040 --> 00:27:28,639
I could combine together<font color="#E5E5E5"> into a 48-bit</font>

528
00:27:25,250 --> 00:27:30,200
value<font color="#E5E5E5"> and the 48 bit value is nice</font>

529
00:27:28,640 --> 00:27:32,450
because now I can use<font color="#E5E5E5"> a bigger bloom</font>

530
00:27:30,200 --> 00:27:34,250
filter and as long as<font color="#E5E5E5"> the bloom filter</font>

531
00:27:32,450 --> 00:27:36,650
<font color="#CCCCCC">is still</font><font color="#E5E5E5"> a power of two all I have to do</font>

532
00:27:34,250 --> 00:27:40,880
is and and ask out the extra bits that<font color="#E5E5E5"> I</font>

533
00:27:36,650 --> 00:27:43,790
don't want<font color="#E5E5E5"> and as far as false positives</font>

534
00:27:40,880 --> 00:27:45,110
go<font color="#E5E5E5"> here's what it looks like today</font><font color="#CCCCCC"> this</font>

535
00:27:43,790 --> 00:27:48,500
is about<font color="#E5E5E5"> a one in a thousand false</font>

536
00:27:45,110 --> 00:27:50,990
positive rates so that<font color="#E5E5E5"> if we're</font>

537
00:27:48,500 --> 00:27:52,640
searching<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> I think the current</font>

538
00:27:50,990 --> 00:27:56,810
<font color="#E5E5E5">performance if I'm doing brain</font><font color="#CCCCCC"> wallets</font>

539
00:27:52,640 --> 00:28:00,170
is about on my PC<font color="#CCCCCC"> is about 550,000 per</font>

540
00:27:56,810 --> 00:28:02,540
second so there's<font color="#CCCCCC"> 550 false positives</font>

541
00:28:00,170 --> 00:28:05,810
per second<font color="#E5E5E5"> so we need an efficient way</font>

542
00:28:02,540 --> 00:28:10,970
to<font color="#E5E5E5"> find those and</font><font color="#CCCCCC"> nots</font><font color="#E5E5E5"> not spam with</font>

543
00:28:05,810 --> 00:28:13,250
them<font color="#E5E5E5"> so normally if you want to if</font>

544
00:28:10,970 --> 00:28:15,650
you've got an array that's ordered you

545
00:28:13,250 --> 00:28:18,620
use a binary search right because the

546
00:28:15,650 --> 00:28:20,690
binary<font color="#E5E5E5"> search is log in and that's</font>

547
00:28:18,620 --> 00:28:23,330
<font color="#E5E5E5">pretty efficient</font><font color="#CCCCCC"> if you don't know what</font>

548
00:28:20,690 --> 00:28:25,370
a binary search is here's here's a quick

549
00:28:23,330 --> 00:28:28,669
<font color="#E5E5E5">walkthrough of one you seek to the</font>

550
00:28:25,370 --> 00:28:32,060
middle that<font color="#E5E5E5"> was too high so</font><font color="#CCCCCC"> we'll seek</font>

551
00:28:28,670 --> 00:28:34,580
<font color="#CCCCCC">to the middle of the first half that's</font>

552
00:28:32,060 --> 00:28:38,210
too low so<font color="#E5E5E5"> we seek to the middle of the</font>

553
00:28:34,580 --> 00:28:45,800
second<font color="#E5E5E5"> quarter and that's too high and</font>

554
00:28:38,210 --> 00:28:50,330
then<font color="#E5E5E5"> we seek to the beginning of the</font>

555
00:28:45,800 --> 00:28:52,010
third<font color="#E5E5E5"> eight we said this and we get a</font>

556
00:28:50,330 --> 00:28:54,439
hit that's that's<font color="#CCCCCC"> for operations that's</font>

557
00:28:52,010 --> 00:29:00,320
pretty good<font color="#E5E5E5"> right</font>

558
00:28:54,440 --> 00:29:04,580
but if you get huge huge<font color="#CCCCCC"> lists</font><font color="#E5E5E5"> of these</font>

559
00:29:00,320 --> 00:29:07,879
that's that's still kind of<font color="#CCCCCC"> at it at</font>

560
00:29:04,580 --> 00:29:15,949
almost 300<font color="#CCCCCC"> million that's gonna give you</font>

561
00:29:07,880 --> 00:29:18,560
what<font color="#E5E5E5"> 18 yeah about 18 heads so instead</font>

562
00:29:15,950 --> 00:29:21,460
<font color="#E5E5E5">there's another algorithm algorithm</font>

563
00:29:18,560 --> 00:29:24,800
called<font color="#E5E5E5"> inter and interpolation search</font>

564
00:29:21,460 --> 00:29:27,260
which works<font color="#E5E5E5"> really well if you have a</font>

565
00:29:24,800 --> 00:29:29,659
unified distribution<font color="#E5E5E5"> within your search</font>

566
00:29:27,260 --> 00:29:35,480
range which tends<font color="#E5E5E5"> to happen when you</font>

567
00:29:29,660 --> 00:29:37,820
<font color="#CCCCCC">have a bunch of hashes so this does have</font>

568
00:29:35,480 --> 00:29:39,890
the<font color="#E5E5E5"> disadvantage</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> if somebody</font><font color="#CCCCCC"> is able</font>

569
00:29:37,820 --> 00:29:41,830
<font color="#E5E5E5">to pass you crafted inputs that are</font>

570
00:29:39,890 --> 00:29:45,500
<font color="#E5E5E5">specifically designed to ruin your day</font>

571
00:29:41,830 --> 00:29:47,870
<font color="#E5E5E5">you will be very very slow but as long</font>

572
00:29:45,500 --> 00:29:51,920
<font color="#CCCCCC">as</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> doesn't happen</font><font color="#E5E5E5"> it's log log in</font>

573
00:29:47,870 --> 00:29:56,659
which instead of 18 operations would<font color="#E5E5E5"> be</font>

574
00:29:51,920 --> 00:30:01,010
<font color="#CCCCCC">four or five</font><font color="#E5E5E5"> to search all nearly 300</font>

575
00:29:56,660 --> 00:30:03,050
million<font color="#CCCCCC"> addresses in practice it's a</font>

576
00:30:01,010 --> 00:30:06,110
little bit worse<font color="#CCCCCC"> than that</font><font color="#E5E5E5"> because there</font>

577
00:30:03,050 --> 00:30:13,580
<font color="#CCCCCC">tend to be</font><font color="#E5E5E5"> it tends to be front weighted</font>

578
00:30:06,110 --> 00:30:14,810
but overall it<font color="#CCCCCC"> works pretty good and so</font>

579
00:30:13,580 --> 00:30:17,810
here's what<font color="#CCCCCC"> that looks like</font>

580
00:30:14,810 --> 00:30:20,200
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> another good way to explain it</font>

581
00:30:17,810 --> 00:30:22,159
interpolation search is say<font color="#CCCCCC"> you're</font>

582
00:30:20,200 --> 00:30:23,870
you've<font color="#CCCCCC"> got a phone</font><font color="#E5E5E5"> book and</font><font color="#CCCCCC"> you're</font>

583
00:30:22,160 --> 00:30:26,690
looking for someone whose last name is

584
00:30:23,870 --> 00:30:28,669
Williams<font color="#CCCCCC"> you're not gonna just look</font>

585
00:30:26,690 --> 00:30:30,500
right in the<font color="#E5E5E5"> middle because you know</font>

586
00:30:28,670 --> 00:30:32,090
they're closer to<font color="#E5E5E5"> the end so you enter</font>

587
00:30:30,500 --> 00:30:34,670
<font color="#E5E5E5">that you</font><font color="#CCCCCC"> you open</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> phonebook towards</font>

588
00:30:32,090 --> 00:30:37,010
the end<font color="#E5E5E5"> and refined from there and</font>

589
00:30:34,670 --> 00:30:40,880
that's<font color="#CCCCCC"> how an interpolation search works</font>

590
00:30:37,010 --> 00:30:43,280
<font color="#E5E5E5">so here it's gonna estimate based on the</font>

591
00:30:40,880 --> 00:30:48,110
<font color="#CCCCCC">list if we're looking for 5-1</font><font color="#E5E5E5"> it should</font>

592
00:30:43,280 --> 00:30:49,790
maybe be it out there<font color="#CCCCCC"> and the algorithm</font>

593
00:30:48,110 --> 00:30:52,580
will say<font color="#E5E5E5"> oh well that's slightly</font><font color="#CCCCCC"> too</font>

594
00:30:49,790 --> 00:30:58,670
high let's try jumping back a little bit

595
00:30:52,580 --> 00:31:03,889
and and it<font color="#E5E5E5"> gets it on to hit</font><font color="#CCCCCC"> two two</font>

596
00:30:58,670 --> 00:31:07,570
guesses instead of four<font color="#CCCCCC"> okay I have a</font>

597
00:31:03,890 --> 00:31:07,570
<font color="#E5E5E5">little more time</font><font color="#CCCCCC"> than I</font><font color="#E5E5E5"> thought so</font>

598
00:31:08,020 --> 00:31:13,600
does anybody<font color="#E5E5E5"> want me to revisit the</font>

599
00:31:10,840 --> 00:31:22,870
finite field arithmetic<font color="#E5E5E5"> and actually</font>

600
00:31:13,600 --> 00:31:24,129
<font color="#E5E5E5">explain the head yeah</font><font color="#CCCCCC"> alright that's a</font>

601
00:31:22,870 --> 00:31:27,610
<font color="#E5E5E5">little quicker than I thought I was</font>

602
00:31:24,130 --> 00:31:30,130
gonna<font color="#E5E5E5"> get through this but um any</font>

603
00:31:27,610 --> 00:31:35,560
questions I can<font color="#CCCCCC"> go into detail on other</font>

604
00:31:30,130 --> 00:31:41,820
stuff if people are curious<font color="#E5E5E5"> get a</font>

605
00:31:35,560 --> 00:31:45,970
question<font color="#CCCCCC"> over there oh I also wanted to</font>

606
00:31:41,820 --> 00:31:49,149
<font color="#CCCCCC">I really hope this is obvious to most</font>

607
00:31:45,970 --> 00:31:51,880
people but cracking Bitcoin addresses

608
00:31:49,150 --> 00:31:55,390
and taking the<font color="#E5E5E5"> money if it's not yours</font>

609
00:31:51,880 --> 00:31:57,190
is kind<font color="#E5E5E5"> of a dick</font><font color="#CCCCCC"> move</font><font color="#E5E5E5"> and probably</font>

610
00:31:55,390 --> 00:32:00,040
illegal<font color="#E5E5E5"> although I talked to a bunch of</font>

611
00:31:57,190 --> 00:32:01,660
<font color="#E5E5E5">lawyers about this and all</font><font color="#CCCCCC"> of them had a</font>

612
00:32:00,040 --> 00:32:10,139
different opinion on which law it broke

613
00:32:01,660 --> 00:32:10,140
<font color="#E5E5E5">so</font><font color="#CCCCCC"> yeah let's see I had conversion</font>

614
00:32:10,590 --> 00:32:16,949
<font color="#E5E5E5">trespass to chattels Computer Fraud and</font>

615
00:32:13,930 --> 00:32:19,720
<font color="#E5E5E5">Abuse Act and a couple of other things</font>

616
00:32:16,950 --> 00:32:22,360
<font color="#E5E5E5">but yeah if you do something and it's</font>

617
00:32:19,720 --> 00:32:23,770
obviously<font color="#E5E5E5"> it should be bad and you get</font>

618
00:32:22,360 --> 00:32:26,020
caught<font color="#E5E5E5"> you'll probably have a bad time</font>

619
00:32:23,770 --> 00:32:28,470
<font color="#E5E5E5">anyway question have you</font><font color="#CCCCCC"> thought of</font>

620
00:32:26,020 --> 00:32:33,550
using minimal perfect hash functions

621
00:32:28,470 --> 00:32:36,610
<font color="#E5E5E5">excuse is</font><font color="#CCCCCC"> that you yeah yeah</font><font color="#E5E5E5"> for instead</font>

622
00:32:33,550 --> 00:32:37,930
<font color="#CCCCCC">of the bloom filter it requires a lot of</font>

623
00:32:36,610 --> 00:32:40,810
work<font color="#E5E5E5"> yeah</font>

624
00:32:37,930 --> 00:32:49,840
<font color="#CCCCCC">you should</font><font color="#E5E5E5"> submit a patch scoob's the</font>

625
00:32:40,810 --> 00:32:52,149
exact yeah<font color="#E5E5E5"> I I the bloom</font><font color="#CCCCCC"> filter works</font>

626
00:32:49,840 --> 00:32:53,560
<font color="#E5E5E5">it's reasonably fast if somebody wants</font>

627
00:32:52,150 --> 00:32:55,440
<font color="#CCCCCC">to give me some other code that is</font>

628
00:32:53,560 --> 00:32:59,700
faster I would<font color="#E5E5E5"> be happy to accept it</font>

629
00:32:55,440 --> 00:33:01,900
yes<font color="#E5E5E5"> I was just</font><font color="#CCCCCC"> curious</font><font color="#E5E5E5"> if you had any I</font>

630
00:32:59,700 --> 00:33:03,820
thought you'd have graphs showing how

631
00:33:01,900 --> 00:33:05,590
much you've actually sped up I

632
00:33:03,820 --> 00:33:07,240
understand you know the<font color="#E5E5E5"> basic stuff</font>

633
00:33:05,590 --> 00:33:10,179
<font color="#CCCCCC">you're describing</font><font color="#E5E5E5"> but I was</font><font color="#CCCCCC"> just curious</font>

634
00:33:07,240 --> 00:33:13,270
<font color="#CCCCCC">what did</font><font color="#E5E5E5"> it actually</font><font color="#CCCCCC"> work out to</font><font color="#E5E5E5"> be if</font>

635
00:33:10,180 --> 00:33:15,580
you had you<font color="#E5E5E5"> know test data yeah so I've</font>

636
00:33:13,270 --> 00:33:18,820
done<font color="#E5E5E5"> some benchmarks</font><font color="#CCCCCC"> but the problem is</font>

637
00:33:15,580 --> 00:33:24,370
a lot<font color="#E5E5E5"> of these</font><font color="#CCCCCC"> are mode dependent</font>

638
00:33:18,820 --> 00:33:27,970
and<font color="#E5E5E5"> it's and a lot of times the</font>

639
00:33:24,370 --> 00:33:29,919
optimizations will<font color="#CCCCCC"> you're you'll get a</font>

640
00:33:27,970 --> 00:33:32,680
speed increase from the optimization but

641
00:33:29,920 --> 00:33:34,660
the thing you<font color="#E5E5E5"> optimized may be sped up</font>

642
00:33:32,680 --> 00:33:37,510
<font color="#CCCCCC">50 times</font><font color="#E5E5E5"> but your overall</font><font color="#CCCCCC"> performance</font>

643
00:33:34,660 --> 00:33:40,270
<font color="#E5E5E5">only went up only increased by 10</font><font color="#CCCCCC"> or 20%</font>

644
00:33:37,510 --> 00:33:43,690
because<font color="#E5E5E5"> of all this other stuff you're</font>

645
00:33:40,270 --> 00:33:46,920
<font color="#CCCCCC">doing</font><font color="#E5E5E5"> like week that's why it's for</font>

646
00:33:43,690 --> 00:33:51,850
example<font color="#CCCCCC"> when I put in the assembly</font>

647
00:33:46,920 --> 00:33:54,910
implementations of sha-256<font color="#E5E5E5"> and tweaked</font>

648
00:33:51,850 --> 00:33:56,050
that stuff to use<font color="#E5E5E5"> pre</font><font color="#CCCCCC"> pathing and</font><font color="#E5E5E5"> all</font>

649
00:33:54,910 --> 00:33:59,110
that<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> I only got another two or</font>

650
00:33:56,050 --> 00:34:01,120
<font color="#CCCCCC">three percent</font><font color="#E5E5E5"> because the calculation</font>

651
00:33:59,110 --> 00:34:09,600
time was dominated by generating<font color="#E5E5E5"> the</font>

652
00:34:01,120 --> 00:34:09,600
<font color="#E5E5E5">public keys so and the other thing</font><font color="#CCCCCC"> is</font>

653
00:34:09,780 --> 00:34:18,580
the<font color="#CCCCCC"> the speed ups are not in isolation</font>

654
00:34:15,190 --> 00:34:23,200
<font color="#CCCCCC">so like the pre computed multiplication</font>

655
00:34:18,580 --> 00:34:27,549
<font color="#E5E5E5">plus the batched the batch defined</font>

656
00:34:23,199 --> 00:34:32,949
conversions<font color="#E5E5E5"> don't necessarily when used</font>

657
00:34:27,550 --> 00:34:34,690
together<font color="#E5E5E5"> have the same effect as as as</font>

658
00:34:32,949 --> 00:34:38,460
you would compute from<font color="#E5E5E5"> both of them in</font>

659
00:34:34,690 --> 00:34:38,460
<font color="#E5E5E5">isolation if that makes any sense</font><font color="#CCCCCC"> so</font>

660
00:34:38,940 --> 00:34:44,130
<font color="#CCCCCC">yeah I don't</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have great graphs</font>

661
00:34:42,070 --> 00:34:48,429
<font color="#CCCCCC">I'm sorry</font>

662
00:34:44,130 --> 00:34:50,220
so the as far as performance<font color="#CCCCCC"> goes the</font>

663
00:34:48,429 --> 00:34:53,940
original cracker I wrote<font color="#E5E5E5"> back in 2013</font>

664
00:34:50,219 --> 00:34:57,399
<font color="#CCCCCC">using</font><font color="#E5E5E5"> open SSL</font><font color="#CCCCCC"> and no tricks whatsoever</font>

665
00:34:53,940 --> 00:35:00,790
did about<font color="#E5E5E5"> 10,000 per second</font><font color="#CCCCCC"> on my</font>

666
00:34:57,400 --> 00:35:04,810
computer then the first version of brain

667
00:35:00,790 --> 00:35:08,950
flavor I wrote did<font color="#E5E5E5"> 130,000 and my</font>

668
00:35:04,810 --> 00:35:10,840
current code does<font color="#E5E5E5"> 550,000</font><font color="#CCCCCC"> keys per</font>

669
00:35:08,950 --> 00:35:13,240
second and this<font color="#E5E5E5"> is all this is</font><font color="#CCCCCC"> all</font>

670
00:35:10,840 --> 00:35:14,920
Bitcoin with<font color="#E5E5E5"> sha-256 brain while it's</font>

671
00:35:13,240 --> 00:35:18,430
checking both<font color="#E5E5E5"> the compressed and</font>

672
00:35:14,920 --> 00:35:24,600
uncompressed version cool that<font color="#CCCCCC"> would</font>

673
00:35:18,430 --> 00:35:24,600
have been a real pretty graph sorry

674
00:35:24,630 --> 00:35:27,930
questions<font color="#E5E5E5"> anyone</font>

675
00:35:30,570 --> 00:35:38,070
what's your opinion on what based<font color="#CCCCCC"> Wallet</font>

676
00:35:35,470 --> 00:35:42,299
generators my<font color="#E5E5E5"> bid address that would</font>

677
00:35:38,070 --> 00:35:42,300
tire fire yeah

678
00:35:43,650 --> 00:35:49,350
what's the<font color="#E5E5E5"> most secure way to generate a</font>

679
00:35:45,880 --> 00:35:53,740
wallet then offline or otherwise<font color="#CCCCCC"> I it</font>

680
00:35:49,350 --> 00:35:57,190
depends<font color="#CCCCCC"> I mean it's it's</font><font color="#E5E5E5"> the key</font>

681
00:35:53,740 --> 00:36:00,310
<font color="#E5E5E5">generation is</font><font color="#CCCCCC"> very simple you</font><font color="#E5E5E5"> can there</font>

682
00:35:57,190 --> 00:36:04,030
are tools where<font color="#CCCCCC"> you roll a bunch</font><font color="#E5E5E5"> of dice</font>

683
00:36:00,310 --> 00:36:06,610
and<font color="#E5E5E5"> hash the dice output</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that gives</font>

684
00:36:04,030 --> 00:36:12,940
you a<font color="#E5E5E5"> private key that is probably</font>

685
00:36:06,610 --> 00:36:16,390
reasonably<font color="#E5E5E5"> safe</font><font color="#CCCCCC"> but really random</font><font color="#E5E5E5"> number</font>

686
00:36:12,940 --> 00:36:18,090
generators are actually pretty secure

687
00:36:16,390 --> 00:36:20,950
you can<font color="#CCCCCC"> trust them</font>

688
00:36:18,090 --> 00:36:25,300
there's offline wallet tools like

689
00:36:20,950 --> 00:36:27,939
electrum which will give you a<font color="#CCCCCC"> 128</font><font color="#E5E5E5"> bits</font>

690
00:36:25,300 --> 00:36:31,750
<font color="#E5E5E5">seed represented as 12 words you can</font>

691
00:36:27,940 --> 00:36:34,330
memorize that<font color="#CCCCCC"> nobody's gonna crack that</font>

692
00:36:31,750 --> 00:36:41,310
although<font color="#CCCCCC"> if somebody wanted to</font><font color="#E5E5E5"> they</font>

693
00:36:34,330 --> 00:36:45,700
could certainly try<font color="#CCCCCC"> it is deterministic</font>

694
00:36:41,310 --> 00:36:49,680
but yeah and<font color="#E5E5E5"> and</font><font color="#CCCCCC"> bid address which you</font>

695
00:36:45,700 --> 00:36:52,240
<font color="#E5E5E5">specifically mentioned like they use</font>

696
00:36:49,680 --> 00:36:57,220
decent crypto libraries to power that

697
00:36:52,240 --> 00:36:59,500
thing<font color="#E5E5E5"> it uses browsers</font><font color="#CCCCCC"> now have</font><font color="#E5E5E5"> actual</font>

698
00:36:57,220 --> 00:37:03,879
cryptographic number generation built

699
00:36:59,500 --> 00:37:06,670
into them via the get random values API

700
00:37:03,880 --> 00:37:08,410
<font color="#E5E5E5">that's pretty secure it also mixes it</font>

701
00:37:06,670 --> 00:37:10,180
like it has you we wiggle your mouse

702
00:37:08,410 --> 00:37:17,859
around on the<font color="#E5E5E5"> screen before generating</font>

703
00:37:10,180 --> 00:37:23,379
anything and that helps<font color="#CCCCCC"> to but I don't</font>

704
00:37:17,860 --> 00:37:26,400
know<font color="#E5E5E5"> major web browsers probably okay</font>

705
00:37:23,380 --> 00:37:29,080
don't recommend<font color="#E5E5E5"> but probably okay and</font>

706
00:37:26,400 --> 00:37:33,070
then there's a lot of weird web browsers

707
00:37:29,080 --> 00:37:35,590
<font color="#E5E5E5">and I've actually even seen I think it</font>

708
00:37:33,070 --> 00:37:37,810
was like it was it was some some<font color="#E5E5E5"> video</font>

709
00:37:35,590 --> 00:37:40,120
game console<font color="#E5E5E5"> web browser I was playing</font>

710
00:37:37,810 --> 00:37:41,980
around with<font color="#E5E5E5"> I got two</font><font color="#CCCCCC"> different ones to</font>

711
00:37:40,120 --> 00:37:45,180
generate the<font color="#E5E5E5"> same value</font>

712
00:37:41,980 --> 00:37:47,950
with the cryptographic<font color="#E5E5E5"> random API so</font>

713
00:37:45,180 --> 00:37:56,589
don't generate the<font color="#CCCCCC"> cling keys on a game</font>

714
00:37:47,950 --> 00:37:58,649
console<font color="#CCCCCC"> thank you questions questions</font>

715
00:37:56,590 --> 00:37:58,650
questions

716
00:38:01,200 --> 00:38:07,149
hi I was just wondering um<font color="#CCCCCC"> does brain</font>

717
00:38:05,109 --> 00:38:10,630
flare get impacted<font color="#CCCCCC"> in any weight with a</font>

718
00:38:07,150 --> 00:38:15,010
bit 148 that's coming out the which bit

719
00:38:10,630 --> 00:38:16,590
148<font color="#E5E5E5"> no so there's no</font><font color="#CCCCCC"> sig</font><font color="#E5E5E5"> would support</font>

720
00:38:15,010 --> 00:38:19,710
if that's what you're asking<font color="#E5E5E5"> about yeah</font>

721
00:38:16,590 --> 00:38:22,300
<font color="#E5E5E5">I honestly haven't really looked into</font>

722
00:38:19,710 --> 00:38:27,040
segregated with witness and cracking

723
00:38:22,300 --> 00:38:30,010
<font color="#E5E5E5">that</font><font color="#CCCCCC"> I haven't</font><font color="#E5E5E5"> seen any</font><font color="#CCCCCC"> software that</font>

724
00:38:27,040 --> 00:38:32,950
generates keys that work with segregated

725
00:38:30,010 --> 00:38:34,390
<font color="#CCCCCC">witness in a stupid way but I'm</font><font color="#E5E5E5"> sure</font>

726
00:38:32,950 --> 00:38:35,080
somebody<font color="#CCCCCC"> will eventually</font><font color="#E5E5E5"> figure out how</font>

727
00:38:34,390 --> 00:38:38,650
to do that

728
00:38:35,080 --> 00:38:40,660
I tend to add stupid key generation

729
00:38:38,650 --> 00:38:44,350
schemes to brain flare as I find them

730
00:38:40,660 --> 00:38:45,549
actually when I was checking<font color="#E5E5E5"> into some</font>

731
00:38:44,350 --> 00:38:48,460
<font color="#CCCCCC">things to</font><font color="#E5E5E5"> make this slide I found</font>

732
00:38:45,550 --> 00:38:54,359
another one from a cerium that<font color="#CCCCCC"> they</font><font color="#E5E5E5"> did</font>

733
00:38:48,460 --> 00:38:58,630
<font color="#E5E5E5">something dumb which I'm gonna implement</font>

734
00:38:54,359 --> 00:39:01,210
probably<font color="#CCCCCC"> next week</font><font color="#E5E5E5"> not all by the way</font>

735
00:38:58,630 --> 00:39:03,220
<font color="#E5E5E5">not all of the not</font><font color="#CCCCCC"> all of the stuff I've</font>

736
00:39:01,210 --> 00:39:05,560
mentioned in<font color="#E5E5E5"> these slides is in the</font>

737
00:39:03,220 --> 00:39:08,410
version<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is currently on github</font><font color="#CCCCCC"> but</font>

738
00:39:05,560 --> 00:39:13,750
<font color="#CCCCCC">I will have that out</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> next week</font>

739
00:39:08,410 --> 00:39:17,350
<font color="#CCCCCC">there's there was an attack Iran that</font>

740
00:39:13,750 --> 00:39:20,410
found a wallet<font color="#CCCCCC"> that had a balance that's</font>

741
00:39:17,350 --> 00:39:23,319
currently worth about<font color="#E5E5E5"> $1,500 in it and I</font>

742
00:39:20,410 --> 00:39:26,049
was advised not<font color="#CCCCCC"> to include details</font><font color="#E5E5E5"> on</font>

743
00:39:23,320 --> 00:39:33,119
how I<font color="#E5E5E5"> did that in the</font><font color="#CCCCCC"> talk</font><font color="#E5E5E5"> and so I am</font>

744
00:39:26,050 --> 00:39:37,030
ripping<font color="#E5E5E5"> that code out</font><font color="#CCCCCC"> yeah if if anybody</font>

745
00:39:33,119 --> 00:39:39,460
has a wallet<font color="#CCCCCC"> with 0.64</font><font color="#E5E5E5"> Bitcoin in it</font>

746
00:39:37,030 --> 00:39:42,160
that they generated<font color="#CCCCCC"> awhile back</font><font color="#E5E5E5"> and has</font>

747
00:39:39,460 --> 00:39:46,240
my<font color="#CCCCCC"> weird-ass Bitcoin address with no</font>

748
00:39:42,160 --> 00:39:49,149
uppercase letters or numbers other<font color="#E5E5E5"> than</font>

749
00:39:46,240 --> 00:39:55,979
the<font color="#E5E5E5"> leading one</font><font color="#CCCCCC"> in there yeah you should</font>

750
00:39:49,150 --> 00:39:55,980
move<font color="#E5E5E5"> your bitcoins because I'm yeah</font>

751
00:39:56,579 --> 00:40:05,710
yes that that that will work

752
00:39:59,319 --> 00:40:11,009
wait now thank you<font color="#CCCCCC"> it's a lot</font><font color="#E5E5E5"> no sleep</font>

753
00:40:05,710 --> 00:40:11,010
for<font color="#CCCCCC"> either huh</font><font color="#E5E5E5"> I get some sleep</font>

754
00:40:16,640 --> 00:40:27,089
<font color="#CCCCCC">I remember you talking a different</font><font color="#E5E5E5"> talk</font>

755
00:40:20,450 --> 00:40:31,799
about repeat<font color="#CCCCCC"> k and other things</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> so</font>

756
00:40:27,090 --> 00:40:36,840
brain flare can crack can crack<font color="#CCCCCC"> bad</font><font color="#E5E5E5"> nan</font>

757
00:40:31,800 --> 00:40:41,190
<font color="#E5E5E5">says the K is the nonce value</font><font color="#CCCCCC"> I briefly</font>

758
00:40:36,840 --> 00:40:44,400
mentioned<font color="#CCCCCC"> this but</font><font color="#E5E5E5"> you have 256</font><font color="#CCCCCC"> bits</font>

759
00:40:41,190 --> 00:40:47,790
value that if you<font color="#E5E5E5"> reuse it</font><font color="#CCCCCC"> you can</font>

760
00:40:44,400 --> 00:40:51,110
compute the private key<font color="#CCCCCC"> there were some</font>

761
00:40:47,790 --> 00:40:56,250
bad wallets<font color="#E5E5E5"> out there for a while that</font>

762
00:40:51,110 --> 00:40:59,180
poorly generated K values<font color="#E5E5E5"> which led to</font>

763
00:40:56,250 --> 00:41:04,170
reuse but it's clear that<font color="#E5E5E5"> there's</font>

764
00:40:59,180 --> 00:41:06,120
probably other issues that<font color="#CCCCCC"> could</font><font color="#E5E5E5"> be</font>

765
00:41:04,170 --> 00:41:12,540
<font color="#CCCCCC">replicated with it that could</font><font color="#E5E5E5"> perhaps be</font>

766
00:41:06,120 --> 00:41:15,630
used to break<font color="#E5E5E5"> some keys but some 99% of</font>

767
00:41:12,540 --> 00:41:17,820
the<font color="#E5E5E5"> stuff I</font><font color="#CCCCCC"> try to</font><font color="#E5E5E5"> to find</font><font color="#CCCCCC"> queues I will</font>

768
00:41:15,630 --> 00:41:20,700
crack keys and then find<font color="#E5E5E5"> that</font><font color="#CCCCCC"> somebody</font>

769
00:41:17,820 --> 00:41:22,740
else already<font color="#E5E5E5"> ran that attack because I</font>

770
00:41:20,700 --> 00:41:24,540
think<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> a bunch of dudes out</font>

771
00:41:22,740 --> 00:41:27,479
<font color="#CCCCCC">there who have</font><font color="#E5E5E5"> just decided that their</font>

772
00:41:24,540 --> 00:41:30,990
job will be stealing Bitcoin from people

773
00:41:27,480 --> 00:41:36,750
with bad keys<font color="#E5E5E5"> again</font><font color="#CCCCCC"> I think those people</font>

774
00:41:30,990 --> 00:41:39,990
are assholes<font color="#E5E5E5"> but they're they're very</font>

775
00:41:36,750 --> 00:41:42,330
<font color="#E5E5E5">busy I guess and I'm sure some</font><font color="#CCCCCC"> of them</font>

776
00:41:39,990 --> 00:41:43,979
<font color="#E5E5E5">have</font><font color="#CCCCCC"> gpu-accelerated</font><font color="#E5E5E5"> tools that are way</font>

777
00:41:42,330 --> 00:41:54,360
<font color="#CCCCCC">faster than mine that they will</font><font color="#E5E5E5"> not</font>

778
00:41:43,980 --> 00:41:58,320
release anyone else<font color="#E5E5E5"> but what are your</font>

779
00:41:54,360 --> 00:42:00,120
plans<font color="#E5E5E5"> for</font><font color="#CCCCCC"> future improvements</font><font color="#E5E5E5"> so I would</font>

780
00:41:58,320 --> 00:42:03,240
<font color="#E5E5E5">really like</font><font color="#CCCCCC"> to learn how to do GPU</font>

781
00:42:00,120 --> 00:42:10,890
coding and get<font color="#E5E5E5"> that nice acceleration</font>

782
00:42:03,240 --> 00:42:15,029
done<font color="#E5E5E5"> that's the</font><font color="#CCCCCC"> main one right now</font>

783
00:42:10,890 --> 00:42:19,049
there's also as I mentioned<font color="#E5E5E5"> like the</font>

784
00:42:15,030 --> 00:42:21,870
incremental node is not<font color="#E5E5E5"> or not</font>

785
00:42:19,050 --> 00:42:24,690
<font color="#E5E5E5">incremental the key stream search mode</font>

786
00:42:21,870 --> 00:42:27,720
is not completely<font color="#E5E5E5"> done</font><font color="#CCCCCC"> I want to try</font>

787
00:42:24,690 --> 00:42:28,510
some silly stuff like what if I feed it

788
00:42:27,720 --> 00:42:32,890
<font color="#CCCCCC">are</font>

789
00:42:28,510 --> 00:42:36,160
<font color="#E5E5E5">see</font><font color="#CCCCCC"> for with a</font><font color="#E5E5E5"> blank key okay that</font>

790
00:42:32,890 --> 00:42:39,339
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> came back up on the screen</font><font color="#CCCCCC"> it's</font>

791
00:42:36,160 --> 00:42:41,259
<font color="#CCCCCC">silly stuff like that</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> the bloom</font>

792
00:42:39,340 --> 00:42:44,620
filter<font color="#CCCCCC"> implementation</font><font color="#E5E5E5"> needs to be</font>

793
00:42:41,260 --> 00:42:46,630
replaced<font color="#CCCCCC"> there's maybe something</font><font color="#E5E5E5"> more</font>

794
00:42:44,620 --> 00:42:54,089
efficient that<font color="#E5E5E5"> I can do besides</font><font color="#CCCCCC"> a bloom</font>

795
00:42:46,630 --> 00:42:54,090
filter no no

796
00:43:01,180 --> 00:43:07,719
how much money do you<font color="#E5E5E5"> estimate you've</font>

797
00:43:03,249 --> 00:43:11,948
saved from hackers<font color="#E5E5E5"> that's that's really</font>

798
00:43:07,719 --> 00:43:15,130
hard to to say<font color="#CCCCCC"> and that's mostly the</font>

799
00:43:11,949 --> 00:43:21,759
<font color="#E5E5E5">subject of the talk that Marie and I are</font>

800
00:43:15,130 --> 00:43:25,239
<font color="#E5E5E5">giving I think 2 p.m. today 2 p.m. is</font>

801
00:43:21,759 --> 00:43:26,469
<font color="#CCCCCC">that the one in 14 minutes that's the</font>

802
00:43:25,239 --> 00:43:27,069
one at<font color="#CCCCCC"> 2:00 p.m. according</font><font color="#E5E5E5"> to the</font>

803
00:43:26,469 --> 00:43:29,349
<font color="#E5E5E5">schedule</font>

804
00:43:27,069 --> 00:43:32,380
how many talks are you<font color="#E5E5E5"> getting just I</font>

805
00:43:29,349 --> 00:43:33,999
mean it's mostly<font color="#E5E5E5"> her talk I I just</font>

806
00:43:32,380 --> 00:43:40,630
cracked a bunch<font color="#E5E5E5"> of passwords</font><font color="#CCCCCC"> and</font>

807
00:43:33,999 --> 00:43:42,578
provided data or will there be charts in

808
00:43:40,630 --> 00:43:44,949
that talk yes there will be charts in

809
00:43:42,579 --> 00:43:49,690
that<font color="#CCCCCC"> pod so everyone go to the</font><font color="#E5E5E5"> 2 p.m.</font>

810
00:43:44,949 --> 00:43:53,079
<font color="#CCCCCC">one yeah I don't know so the talk I gave</font>

811
00:43:49,690 --> 00:43:56,739
<font color="#CCCCCC">at</font><font color="#E5E5E5"> Def Con</font><font color="#CCCCCC"> got this</font><font color="#E5E5E5"> site brainwallet org</font>

812
00:43:53,079 --> 00:43:59,140
which was kind of infamous<font color="#E5E5E5"> also because</font>

813
00:43:56,739 --> 00:44:01,569
there have<font color="#E5E5E5"> been allegations that the guy</font>

814
00:43:59,140 --> 00:44:03,549
who ran<font color="#CCCCCC"> that site was actually</font><font color="#E5E5E5"> cracking</font>

815
00:44:01,569 --> 00:44:05,709
brain wallets himself and he refused

816
00:44:03,549 --> 00:44:10,390
patches to improve the<font color="#E5E5E5"> security of this</font>

817
00:44:05,709 --> 00:44:11,859
system and really like and<font color="#E5E5E5"> that was that</font>

818
00:44:10,390 --> 00:44:15,009
was<font color="#CCCCCC"> the site that used math dot random</font>

819
00:44:11,859 --> 00:44:17,589
<font color="#E5E5E5">as key generation for a while so there</font>

820
00:44:15,009 --> 00:44:20,229
were all sorts of sketchy things about

821
00:44:17,589 --> 00:44:22,269
that<font color="#CCCCCC"> and did</font><font color="#E5E5E5"> that got shut down for my</font>

822
00:44:20,229 --> 00:44:23,499
talk and that has probably<font color="#E5E5E5"> saved some</font>

823
00:44:22,269 --> 00:44:25,808
people

824
00:44:23,499 --> 00:44:28,180
I've I've seen a<font color="#E5E5E5"> few posts on</font><font color="#CCCCCC"> reddit</font>

825
00:44:25,809 --> 00:44:33,249
<font color="#E5E5E5">like oh I saw this talk I moved my</font><font color="#CCCCCC"> knee</font>

826
00:44:28,180 --> 00:44:37,239
out<font color="#E5E5E5"> of brainwallet the there's also the</font>

827
00:44:33,249 --> 00:44:44,499
guy<font color="#E5E5E5"> I found brain wallets that clearly</font>

828
00:44:37,239 --> 00:44:46,059
<font color="#E5E5E5">weren't pilfered and that's that's</font>

829
00:44:44,499 --> 00:44:49,930
<font color="#CCCCCC">always interesting but some of those</font>

830
00:44:46,059 --> 00:44:51,969
were from before my talk<font color="#CCCCCC"> because I</font><font color="#E5E5E5"> was</font>

831
00:44:49,930 --> 00:44:53,649
definitely not<font color="#CCCCCC"> the first person in the</font>

832
00:44:51,969 --> 00:44:58,930
security industry to say this was a

833
00:44:53,650 --> 00:45:00,759
terrible terrible<font color="#E5E5E5"> idea</font><font color="#CCCCCC"> and I'm I'm</font>

834
00:44:58,930 --> 00:45:02,859
disappointed that some<font color="#E5E5E5"> of those mistakes</font>

835
00:45:00,759 --> 00:45:06,430
<font color="#E5E5E5">got repeated it</font><font color="#CCCCCC"> aetherium I had a</font>

836
00:45:02,859 --> 00:45:08,199
<font color="#E5E5E5">conversation with somebody</font><font color="#CCCCCC"> I think</font>

837
00:45:06,430 --> 00:45:13,629
<font color="#CCCCCC">sometime last year</font><font color="#E5E5E5"> he had an ethereal</font>

838
00:45:08,199 --> 00:45:16,120
wallet that had 46,000 ether in it

839
00:45:13,630 --> 00:45:18,690
which at the<font color="#CCCCCC"> time that</font><font color="#E5E5E5"> I talked to him</font>

840
00:45:16,120 --> 00:45:22,509
<font color="#E5E5E5">was worth half a million dollars</font><font color="#CCCCCC"> and</font>

841
00:45:18,690 --> 00:45:26,530
currently I think<font color="#CCCCCC"> if theorems about $200</font>

842
00:45:22,510 --> 00:45:33,690
a piece so as<font color="#E5E5E5"> that is that eight million</font>

843
00:45:26,530 --> 00:45:37,000
<font color="#E5E5E5">dollars</font><font color="#CCCCCC"> yeah is yeah</font><font color="#E5E5E5"> that the key was a</font>

844
00:45:33,690 --> 00:45:45,990
guy brush from<font color="#E5E5E5"> Monkey Island</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> was</font>

845
00:45:37,000 --> 00:45:52,420
that was<font color="#E5E5E5"> the password all lowercase i</font><font color="#CCCCCC"> I</font>

846
00:45:45,990 --> 00:46:02,229
don't<font color="#CCCCCC"> even know like</font><font color="#E5E5E5"> I feel</font><font color="#CCCCCC"> really bad</font>

847
00:45:52,420 --> 00:46:04,320
for that guy probably<font color="#CCCCCC"> what are some</font><font color="#E5E5E5"> of</font>

848
00:46:02,230 --> 00:46:08,170
<font color="#E5E5E5">your favorite passwords that you found</font>

849
00:46:04,320 --> 00:46:11,410
well so there's a<font color="#CCCCCC"> woodchuck on my shirt</font>

850
00:46:08,170 --> 00:46:13,090
<font color="#E5E5E5">because one of the passwords I found was</font>

851
00:46:11,410 --> 00:46:14,529
one of the<font color="#E5E5E5"> first things I found was how</font>

852
00:46:13,090 --> 00:46:16,690
much wood could<font color="#CCCCCC"> a woodchuck chuck if a</font>

853
00:46:14,530 --> 00:46:20,350
woodchuck could<font color="#CCCCCC"> chuck wood which</font><font color="#E5E5E5"> when I</font>

854
00:46:16,690 --> 00:46:21,520
found it<font color="#CCCCCC"> had 250 Bitcoin in it and I</font>

855
00:46:20,350 --> 00:46:24,190
actually managed to<font color="#E5E5E5"> find the owner of</font>

856
00:46:21,520 --> 00:46:29,790
<font color="#E5E5E5">that and explained to him why</font><font color="#CCCCCC"> this was a</font>

857
00:46:24,190 --> 00:46:29,790
terrible idea<font color="#CCCCCC"> and he was very grateful</font>

858
00:46:30,630 --> 00:46:38,980
any questions yeah I was yeah we<font color="#E5E5E5"> have</font>

859
00:46:37,450 --> 00:46:40,450
another talk in<font color="#CCCCCC"> ten minutes</font><font color="#E5E5E5"> in this room</font>

860
00:46:38,980 --> 00:46:40,840
sorry<font color="#E5E5E5"> not in</font><font color="#CCCCCC"> ten minutes okay it's at</font>

861
00:46:40,450 --> 00:46:44,200
<font color="#CCCCCC">2:00</font>

862
00:46:40,840 --> 00:46:45,880
okay<font color="#E5E5E5"> so is there anybody</font><font color="#CCCCCC"> that gave you a</font>

863
00:46:44,200 --> 00:46:47,799
bounty you told them<font color="#E5E5E5"> that</font><font color="#CCCCCC"> their wallet</font>

864
00:46:45,880 --> 00:46:49,690
was insecure<font color="#CCCCCC"> gave him a pointer and</font><font color="#E5E5E5"> then</font>

865
00:46:47,800 --> 00:46:52,780
<font color="#E5E5E5">they gave you a tip yes the the</font>

866
00:46:49,690 --> 00:46:55,420
<font color="#E5E5E5">woodchuck guy gave me</font><font color="#CCCCCC"> two bitcoins and I</font>

867
00:46:52,780 --> 00:46:59,020
gave them to<font color="#CCCCCC"> a</font><font color="#E5E5E5"> friend as a wedding gift</font>

868
00:46:55,420 --> 00:47:02,890
<font color="#E5E5E5">and I if I recall correctly he said he</font>

869
00:46:59,020 --> 00:47:11,009
eventually sold them<font color="#CCCCCC"> for $1,700 very</font>

870
00:47:02,890 --> 00:47:11,009
nice anyone else<font color="#E5E5E5"> last chance</font>

871
00:47:12,220 --> 00:47:22,779
<font color="#CCCCCC">all right best practices to</font><font color="#E5E5E5"> protect</font>

872
00:47:18,820 --> 00:47:25,420
<font color="#E5E5E5">yourself from this sort of attack use</font>

873
00:47:22,780 --> 00:47:27,430
the standard<font color="#CCCCCC"> software and not some</font>

874
00:47:25,420 --> 00:47:32,410
random<font color="#E5E5E5"> dudes website that says it's</font>

875
00:47:27,430 --> 00:47:36,279
totally secure because<font color="#CCCCCC"> it's probably a</font>

876
00:47:32,410 --> 00:47:40,240
trap<font color="#CCCCCC"> I think that's pretty good general</font>

877
00:47:36,280 --> 00:47:40,599
advice<font color="#E5E5E5"> - yeah all right well thank you</font>

878
00:47:40,240 --> 00:47:41,819
everyone

879
00:47:40,599 --> 00:47:45,030
yeah thank you

880
00:47:41,820 --> 00:47:45,030
[Applause]

