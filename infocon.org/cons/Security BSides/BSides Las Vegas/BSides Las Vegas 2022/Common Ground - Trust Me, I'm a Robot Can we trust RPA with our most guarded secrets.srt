1
00:00:00,240 --> 00:00:02,720
all right so

2
00:00:02,720 --> 00:00:04,640
hello everybody

3
00:00:04,640 --> 00:00:07,359
um thank you very much for joining us uh

4
00:00:07,359 --> 00:00:10,800
here we are extremely excited to be here

5
00:00:10,800 --> 00:00:12,960
with you today

6
00:00:12,960 --> 00:00:15,679
with me here is nathaniel copenhagen and

7
00:00:15,679 --> 00:00:17,199
my name is nimrod stoller and we are

8
00:00:17,199 --> 00:00:18,560
both

9
00:00:18,560 --> 00:00:21,920
security researchers from cyber art labs

10
00:00:21,920 --> 00:00:24,800
which is located in israel

11
00:00:24,800 --> 00:00:26,880
this session today is about the research

12
00:00:26,880 --> 00:00:30,240
we conducted on the blue prism robotic

13
00:00:30,240 --> 00:00:33,520
process automation platform

14
00:00:33,520 --> 00:00:35,040
this research

15
00:00:35,040 --> 00:00:36,480
yielded

16
00:00:36,480 --> 00:00:39,840
eight cves in different severities

17
00:00:39,840 --> 00:00:41,520
ranging from medium

18
00:00:41,520 --> 00:00:42,840
to

19
00:00:42,840 --> 00:00:45,360
critical and

20
00:00:45,360 --> 00:00:47,120
today we will be

21
00:00:47,120 --> 00:00:50,239
publicly disclosing for the first time

22
00:00:50,239 --> 00:00:51,920
three of these attack vectors the full

23
00:00:51,920 --> 00:00:54,879
attack vectors which yielded three of

24
00:00:54,879 --> 00:00:55,920
those

25
00:00:55,920 --> 00:00:58,559
cves so today in this session we'll be

26
00:00:58,559 --> 00:00:59,760
talking about

27
00:00:59,760 --> 00:01:01,680
what rpa is

28
00:01:01,680 --> 00:01:06,240
how blue prism is going into the picture

29
00:01:06,240 --> 00:01:08,240
where all the secrets are

30
00:01:08,240 --> 00:01:09,760
but first

31
00:01:09,760 --> 00:01:11,119
we want to

32
00:01:11,119 --> 00:01:13,040
answer the question here on this first

33
00:01:13,040 --> 00:01:14,320
slide

34
00:01:14,320 --> 00:01:16,159
and the question is

35
00:01:16,159 --> 00:01:18,560
how do we know we can trust

36
00:01:18,560 --> 00:01:21,200
robots without secrets how do we know if

37
00:01:21,200 --> 00:01:23,920
we see a robot how do we know if the

38
00:01:23,920 --> 00:01:26,880
robot is trustworthy enough that we can

39
00:01:26,880 --> 00:01:28,000
trust it

40
00:01:28,000 --> 00:01:31,600
with our most guarded secrets

41
00:01:31,600 --> 00:01:32,960
so

42
00:01:32,960 --> 00:01:35,119
in

43
00:01:36,079 --> 00:01:37,360
in public

44
00:01:37,360 --> 00:01:38,640
we can say

45
00:01:38,640 --> 00:01:39,600
that

46
00:01:39,600 --> 00:01:42,079
robots are either

47
00:01:42,079 --> 00:01:43,360
faultlessly

48
00:01:43,360 --> 00:01:46,000
or either faultlessly loyal victorian

49
00:01:46,000 --> 00:01:47,200
butlers

50
00:01:47,200 --> 00:01:51,119
or psychopathological killers

51
00:01:51,280 --> 00:01:53,439
so we can take for example

52
00:01:53,439 --> 00:01:55,280
isaac asimov's

53
00:01:55,280 --> 00:01:58,079
positronic brain robots with their three

54
00:01:58,079 --> 00:02:01,119
laws of robotics

55
00:02:01,360 --> 00:02:03,759
you have the three law well a short very

56
00:02:03,759 --> 00:02:06,000
short version of the three laws here on

57
00:02:06,000 --> 00:02:07,280
this slide

58
00:02:07,280 --> 00:02:10,318
so these three laws of robotics

59
00:02:10,318 --> 00:02:12,160
are simply carefully engineered

60
00:02:12,160 --> 00:02:16,080
safeguards put in place by asimov

61
00:02:16,080 --> 00:02:18,640
in order to prevent robots from harming

62
00:02:18,640 --> 00:02:19,680
humans

63
00:02:19,680 --> 00:02:23,120
it was asimov's way of creating

64
00:02:23,120 --> 00:02:24,720
ethical robots

65
00:02:24,720 --> 00:02:26,959
robots that would not only protect human

66
00:02:26,959 --> 00:02:27,920
lives

67
00:02:27,920 --> 00:02:29,200
but also

68
00:02:29,200 --> 00:02:31,519
human interests

69
00:02:31,519 --> 00:02:33,840
so if we look into our two types

70
00:02:33,840 --> 00:02:35,040
the

71
00:02:35,040 --> 00:02:36,879
loyal battle type and the

72
00:02:36,879 --> 00:02:38,879
psychopathological type

73
00:02:38,879 --> 00:02:42,480
which one would be isaac asimov's robot

74
00:02:42,480 --> 00:02:44,400
can you help me here

75
00:02:44,400 --> 00:02:47,599
or your problem yeah

76
00:02:47,840 --> 00:02:49,599
yeah it probably will be the first time

77
00:02:49,599 --> 00:02:50,560
the

78
00:02:50,560 --> 00:02:54,000
loyal battle type and we might

79
00:02:54,000 --> 00:02:54,959
just

80
00:02:54,959 --> 00:02:57,280
consider

81
00:02:57,280 --> 00:02:59,360
letting the letting guys the customers

82
00:02:59,360 --> 00:03:03,120
robots in on our secrets

83
00:03:03,200 --> 00:03:05,599
and what about hal 9000

84
00:03:05,599 --> 00:03:08,080
was highly trusted robot would we trust

85
00:03:08,080 --> 00:03:08,959
hal

86
00:03:08,959 --> 00:03:10,560
without secrets

87
00:03:10,560 --> 00:03:13,760
so han 9000 is a sentient artificial

88
00:03:13,760 --> 00:03:15,680
intelligence computer

89
00:03:15,680 --> 00:03:18,400
that controls every aspect of the

90
00:03:18,400 --> 00:03:21,360
discovery one which is on a mission to

91
00:03:21,360 --> 00:03:23,120
explore jupiter

92
00:03:23,120 --> 00:03:26,640
and interact with the human onboard crew

93
00:03:26,640 --> 00:03:30,480
astral crew so in the space odyssey

94
00:03:30,480 --> 00:03:33,440
bad instructions given to her directly

95
00:03:33,440 --> 00:03:36,159
from the white house believe it or not

96
00:03:36,159 --> 00:03:40,879
caused hal to kill the entire human crew

97
00:03:40,879 --> 00:03:43,440
for the conservation of the mission

98
00:03:43,440 --> 00:03:44,959
so in this case

99
00:03:44,959 --> 00:03:48,959
uh which type of robot would hal be or

100
00:03:48,959 --> 00:03:50,480
would have fit

101
00:03:50,480 --> 00:03:52,959
so it would be the second type sahal is

102
00:03:52,959 --> 00:03:54,879
probably the psycho pathological killer

103
00:03:54,879 --> 00:03:56,319
type

104
00:03:56,319 --> 00:03:58,840
and no secret for

105
00:03:58,840 --> 00:04:03,840
hull anyone here recognizes these robots

106
00:04:04,799 --> 00:04:06,080
okay maybe

107
00:04:06,080 --> 00:04:07,920
maybe three or four great

108
00:04:07,920 --> 00:04:10,720
so these are the daleks or the

109
00:04:10,720 --> 00:04:15,280
formidable daleks from doctor who

110
00:04:15,280 --> 00:04:16,000
the

111
00:04:16,000 --> 00:04:17,120
british

112
00:04:17,120 --> 00:04:19,519
science fiction television program

113
00:04:19,519 --> 00:04:20,918
broadcasted since

114
00:04:20,918 --> 00:04:24,240
1963 with over 800 episodes today and

115
00:04:24,240 --> 00:04:26,960
still broadcasting today

116
00:04:26,960 --> 00:04:29,280
so as soon as the dalek robots were

117
00:04:29,280 --> 00:04:30,639
created

118
00:04:30,639 --> 00:04:33,680
they exterminated as they like to say

119
00:04:33,680 --> 00:04:36,320
their scientist created and it was due

120
00:04:36,320 --> 00:04:38,720
to his specific command to them that

121
00:04:38,720 --> 00:04:40,800
they should become the strongest most

122
00:04:40,800 --> 00:04:42,720
powerful in the universe

123
00:04:42,720 --> 00:04:46,080
well according to the daleks logic in

124
00:04:46,080 --> 00:04:48,639
order to become the most powerful in the

125
00:04:48,639 --> 00:04:51,120
universe they must kill

126
00:04:51,120 --> 00:04:53,120
all those who are stronger

127
00:04:53,120 --> 00:04:54,639
and of course their creators by

128
00:04:54,639 --> 00:04:56,960
definition stronger

129
00:04:56,960 --> 00:04:58,960
so again

130
00:04:58,960 --> 00:05:01,039
the dialects are probably the second

131
00:05:01,039 --> 00:05:04,320
title the psychopathological killer type

132
00:05:04,320 --> 00:05:05,280
and

133
00:05:05,280 --> 00:05:07,280
no secrets

134
00:05:07,280 --> 00:05:09,360
to the dialects

135
00:05:09,360 --> 00:05:12,560
so if we try to answer the question

136
00:05:12,560 --> 00:05:14,240
can we

137
00:05:14,240 --> 00:05:17,280
share our secrets with

138
00:05:17,280 --> 00:05:19,759
the robots

139
00:05:19,759 --> 00:05:22,080
we can answer it by looking at their

140
00:05:22,080 --> 00:05:25,360
programming after all every robot is a

141
00:05:25,360 --> 00:05:28,160
computer and computers use some kind of

142
00:05:28,160 --> 00:05:30,400
logical programming so

143
00:05:30,400 --> 00:05:33,840
if we can somehow get a good

144
00:05:33,840 --> 00:05:35,919
deep thorough understanding

145
00:05:35,919 --> 00:05:36,880
of

146
00:05:36,880 --> 00:05:39,600
their software we may be able to tell if

147
00:05:39,600 --> 00:05:42,240
we can trust robots if robots are

148
00:05:42,240 --> 00:05:44,639
trustworthy enough

149
00:05:44,639 --> 00:05:47,280
that we can share our most guarded

150
00:05:47,280 --> 00:05:49,199
secrets with

151
00:05:49,199 --> 00:05:52,320
in cyber security we call this process

152
00:05:52,320 --> 00:05:54,960
reverse engineering or software reverse

153
00:05:54,960 --> 00:05:56,160
engineering

154
00:05:56,160 --> 00:05:57,039
and

155
00:05:57,039 --> 00:05:58,880
this is what we did in our research and

156
00:05:58,880 --> 00:06:00,319
this is what we're going to show you

157
00:06:00,319 --> 00:06:02,560
here

158
00:06:03,600 --> 00:06:05,919
so we talked a little bit about robots

159
00:06:05,919 --> 00:06:08,160
but we said that our research was on

160
00:06:08,160 --> 00:06:10,160
robotic process automation

161
00:06:10,160 --> 00:06:13,280
so what's robotic process automation

162
00:06:13,280 --> 00:06:15,759
well first things first

163
00:06:15,759 --> 00:06:18,880
unfortunately there are no real

164
00:06:18,880 --> 00:06:21,759
mechanical or electromechanical robots

165
00:06:21,759 --> 00:06:24,880
involved in robotic process automation

166
00:06:24,880 --> 00:06:28,960
rpa is not about physical robots

167
00:06:28,960 --> 00:06:31,520
it is a software technology that makes

168
00:06:31,520 --> 00:06:35,120
it easy to build deploy and manage

169
00:06:35,120 --> 00:06:36,720
software robots

170
00:06:36,720 --> 00:06:39,680
robots that emulate human actions

171
00:06:39,680 --> 00:06:42,080
while interacting with existing

172
00:06:42,080 --> 00:06:44,800
digital systems and software

173
00:06:44,800 --> 00:06:46,080
most of which

174
00:06:46,080 --> 00:06:48,479
are windows applications

175
00:06:48,479 --> 00:06:50,800
now these interactions

176
00:06:50,800 --> 00:06:52,000
usually

177
00:06:52,000 --> 00:06:54,639
uh have some kind of

178
00:06:54,639 --> 00:06:55,919
a

179
00:06:55,919 --> 00:06:58,880
keyboard injections key injections or

180
00:06:58,880 --> 00:07:00,400
mouse clicks

181
00:07:00,400 --> 00:07:03,199
and this is how the uh

182
00:07:03,199 --> 00:07:04,720
the robots

183
00:07:04,720 --> 00:07:07,199
actually emulate

184
00:07:07,199 --> 00:07:08,800
how humans

185
00:07:08,800 --> 00:07:12,000
interact with those existing

186
00:07:12,000 --> 00:07:13,280
um

187
00:07:13,280 --> 00:07:15,520
enterprise applications

188
00:07:15,520 --> 00:07:17,199
so

189
00:07:17,199 --> 00:07:18,639
many

190
00:07:18,639 --> 00:07:21,280
many industries are currently benefiting

191
00:07:21,280 --> 00:07:22,720
from rpa

192
00:07:22,720 --> 00:07:25,039
from

193
00:07:25,039 --> 00:07:27,199
banking and finance

194
00:07:27,199 --> 00:07:29,199
through

195
00:07:29,199 --> 00:07:31,360
healthcare and medical applications

196
00:07:31,360 --> 00:07:33,520
human resource management

197
00:07:33,520 --> 00:07:36,479
manufacturing customer service all with

198
00:07:36,479 --> 00:07:38,880
one common denominator

199
00:07:38,880 --> 00:07:41,520
which is the extensive use

200
00:07:41,520 --> 00:07:43,759
of enterprise credentials

201
00:07:43,759 --> 00:07:46,319
if we want robots

202
00:07:46,319 --> 00:07:47,599
to log in

203
00:07:47,599 --> 00:07:50,639
access and control

204
00:07:50,639 --> 00:07:51,599
those

205
00:07:51,599 --> 00:07:54,720
existing enterprise applications

206
00:07:54,720 --> 00:07:57,360
we must place those credentials

207
00:07:57,360 --> 00:07:59,120
secret passwords

208
00:07:59,120 --> 00:08:02,879
in the hands of the robot

209
00:08:03,599 --> 00:08:05,039
so we

210
00:08:05,039 --> 00:08:07,599
we talked a little bit about what rpa is

211
00:08:07,599 --> 00:08:10,080
and now we had to choose

212
00:08:10,080 --> 00:08:12,080
in our research we had to choose a

213
00:08:12,080 --> 00:08:13,520
target

214
00:08:13,520 --> 00:08:15,280
so we looked a little bit about the

215
00:08:15,280 --> 00:08:16,479
market

216
00:08:16,479 --> 00:08:18,319
and we found that there are

217
00:08:18,319 --> 00:08:21,919
three large vendors in the market

218
00:08:21,919 --> 00:08:23,199
one of these

219
00:08:23,199 --> 00:08:26,160
was blue prism which eventually we

220
00:08:26,160 --> 00:08:30,000
picked and also blue prism was also

221
00:08:30,000 --> 00:08:32,880
named a leader in that market by both

222
00:08:32,880 --> 00:08:35,279
forester and gartner

223
00:08:35,279 --> 00:08:38,240
so it was an easy peak for us and we

224
00:08:38,240 --> 00:08:40,799
just went online and download their

225
00:08:40,799 --> 00:08:44,080
trial software from their website

226
00:08:44,080 --> 00:08:46,240
which was just the full

227
00:08:46,240 --> 00:08:48,800
software the full-fledged software with

228
00:08:48,800 --> 00:08:50,560
a trial

229
00:08:50,560 --> 00:08:52,560
license

230
00:08:52,560 --> 00:08:55,760
so looking into the blue prism platform

231
00:08:55,760 --> 00:08:57,480
we could see that it was based on the

232
00:08:57,480 --> 00:09:00,240
microsoft.net framework and written

233
00:09:00,240 --> 00:09:02,959
mainly in c sharp

234
00:09:02,959 --> 00:09:05,200
and here we have the architecture so the

235
00:09:05,200 --> 00:09:08,800
architecture of the blue prism platform

236
00:09:08,800 --> 00:09:11,680
is based on four components

237
00:09:11,680 --> 00:09:14,560
first and foremost in our prime target

238
00:09:14,560 --> 00:09:15,839
is

239
00:09:15,839 --> 00:09:16,640
the

240
00:09:16,640 --> 00:09:18,080
application server the blue prism

241
00:09:18,080 --> 00:09:20,399
application server this is where all the

242
00:09:20,399 --> 00:09:23,680
magic occurs and where the logic

243
00:09:23,680 --> 00:09:27,360
behind the blue prism platform is stored

244
00:09:27,360 --> 00:09:30,080
and implemented

245
00:09:30,080 --> 00:09:31,839
the application server is heavily

246
00:09:31,839 --> 00:09:34,800
relying on an mssql database server

247
00:09:34,800 --> 00:09:37,680
this is where all the users the

248
00:09:37,680 --> 00:09:40,800
configurations the business processes

249
00:09:40,800 --> 00:09:44,000
business processes are the code that

250
00:09:44,000 --> 00:09:47,120
eventually runs on the robots

251
00:09:47,120 --> 00:09:48,640
and of course

252
00:09:48,640 --> 00:09:50,560
all enterprise credentials

253
00:09:50,560 --> 00:09:53,839
are all stored in the database server

254
00:09:53,839 --> 00:09:56,399
now the application server

255
00:09:56,399 --> 00:10:00,160
may be actively accessed by

256
00:10:00,160 --> 00:10:01,760
two components

257
00:10:01,760 --> 00:10:02,560
so

258
00:10:02,560 --> 00:10:04,800
we have the interactive clients

259
00:10:04,800 --> 00:10:07,040
and the blue prism runtime

260
00:10:07,040 --> 00:10:08,320
resources

261
00:10:08,320 --> 00:10:10,959
so interactive clients

262
00:10:10,959 --> 00:10:14,399
are the users machines the machines that

263
00:10:14,399 --> 00:10:17,440
are used by human users in order to set

264
00:10:17,440 --> 00:10:19,839
up control configure

265
00:10:19,839 --> 00:10:22,560
the entire platform

266
00:10:22,560 --> 00:10:24,800
you may look at it as the graphic user

267
00:10:24,800 --> 00:10:27,839
interface or maybe the terminal the

268
00:10:27,839 --> 00:10:30,160
terminals that are used to access the

269
00:10:30,160 --> 00:10:32,560
application server and the application

270
00:10:32,560 --> 00:10:34,079
server itself

271
00:10:34,079 --> 00:10:37,680
is off limits to all users

272
00:10:37,839 --> 00:10:40,640
the second the second here is the

273
00:10:40,640 --> 00:10:43,360
runtime resources well these are the

274
00:10:43,360 --> 00:10:44,800
robots

275
00:10:44,800 --> 00:10:46,959
these machines

276
00:10:46,959 --> 00:10:48,640
receive their

277
00:10:48,640 --> 00:10:50,560
commands or code

278
00:10:50,560 --> 00:10:53,120
directly from the application server

279
00:10:53,120 --> 00:10:56,320
they would run that code again in order

280
00:10:56,320 --> 00:10:58,839
to log in access and control those

281
00:10:58,839 --> 00:11:01,920
external existing enterprise

282
00:11:01,920 --> 00:11:04,399
applications and of course at one point

283
00:11:04,399 --> 00:11:06,480
or another

284
00:11:06,480 --> 00:11:09,760
we should have clear text credentials

285
00:11:09,760 --> 00:11:12,480
in those robots in that

286
00:11:12,480 --> 00:11:15,680
in those runtime resources and those

287
00:11:15,680 --> 00:11:17,760
credentials will be again transferred

288
00:11:17,760 --> 00:11:20,959
from the application server

289
00:11:21,120 --> 00:11:22,160
so

290
00:11:22,160 --> 00:11:24,320
we are always interested in secrets and

291
00:11:24,320 --> 00:11:26,560
credentials so how are these handled in

292
00:11:26,560 --> 00:11:29,920
the blue in the blue prism platform

293
00:11:29,920 --> 00:11:32,399
so blue prism is using

294
00:11:32,399 --> 00:11:34,720
asymmetric encryption in order to

295
00:11:34,720 --> 00:11:36,640
encrypt and decrypt

296
00:11:36,640 --> 00:11:38,880
critical data on their platform that

297
00:11:38,880 --> 00:11:41,360
means that there is only a single key

298
00:11:41,360 --> 00:11:42,720
one key

299
00:11:42,720 --> 00:11:45,040
well one master key

300
00:11:45,040 --> 00:11:47,519
that is used both to encrypt and decrypt

301
00:11:47,519 --> 00:11:50,240
that information so

302
00:11:50,240 --> 00:11:51,519
this key

303
00:11:51,519 --> 00:11:52,480
will be

304
00:11:52,480 --> 00:11:55,120
stored on the application servers file

305
00:11:55,120 --> 00:11:58,320
system inside an object that we'll see

306
00:11:58,320 --> 00:12:00,800
in a minute that is called encryption

307
00:12:00,800 --> 00:12:02,399
scheme

308
00:12:02,399 --> 00:12:04,320
so in the encryption schemes

309
00:12:04,320 --> 00:12:05,680
we may have

310
00:12:05,680 --> 00:12:07,760
the name of the encryption scheme the

311
00:12:07,760 --> 00:12:10,639
algorithm used and of course

312
00:12:10,639 --> 00:12:12,880
the key or the master key used

313
00:12:12,880 --> 00:12:14,399
so this will be on the application

314
00:12:14,399 --> 00:12:16,639
server

315
00:12:16,639 --> 00:12:18,079
the password and credentials on the

316
00:12:18,079 --> 00:12:19,440
other hand and all other critical

317
00:12:19,440 --> 00:12:22,720
information will be encrypted and stored

318
00:12:22,720 --> 00:12:24,720
on the database server

319
00:12:24,720 --> 00:12:27,200
this makes sense because

320
00:12:27,200 --> 00:12:29,519
if somebody gets their hands on the

321
00:12:29,519 --> 00:12:32,320
database they will only have encrypted

322
00:12:32,320 --> 00:12:34,639
information that they cannot use

323
00:12:34,639 --> 00:12:35,519
and

324
00:12:35,519 --> 00:12:37,279
such an attacker would have to find a

325
00:12:37,279 --> 00:12:38,399
way

326
00:12:38,399 --> 00:12:40,240
to

327
00:12:40,240 --> 00:12:42,800
get those encryption scheme keys from

328
00:12:42,800 --> 00:12:44,399
the application server and that's not

329
00:12:44,399 --> 00:12:46,720
easy

330
00:12:49,040 --> 00:12:51,279
so

331
00:12:51,279 --> 00:12:53,600
afternoon road talk about the component

332
00:12:53,600 --> 00:12:56,240
in blue prism uh platform

333
00:12:56,240 --> 00:12:59,519
we need to talk a little bit about how

334
00:12:59,519 --> 00:13:03,120
those components communicate each other

335
00:13:03,120 --> 00:13:04,720
the blue prism architecture is

336
00:13:04,720 --> 00:13:06,959
implemented using microsoft

337
00:13:06,959 --> 00:13:10,480
windows communication foundation

338
00:13:10,480 --> 00:13:11,920
wcf

339
00:13:11,920 --> 00:13:13,839
it is part of

340
00:13:13,839 --> 00:13:14,839
a

341
00:13:14,839 --> 00:13:17,519
microsoft.net framework and it makes the

342
00:13:17,519 --> 00:13:20,560
development of an endpoint easier

343
00:13:20,560 --> 00:13:23,760
and less time consuming

344
00:13:24,639 --> 00:13:27,760
let's see how it's done in our case

345
00:13:27,760 --> 00:13:30,880
so as in what said we have

346
00:13:30,880 --> 00:13:33,040
the interactive clients

347
00:13:33,040 --> 00:13:34,720
and the

348
00:13:34,720 --> 00:13:39,519
runtime resources which are wcf clients

349
00:13:39,519 --> 00:13:41,600
we also have the application server

350
00:13:41,600 --> 00:13:44,639
which called wcf service

351
00:13:44,639 --> 00:13:46,000
between them

352
00:13:46,000 --> 00:13:46,959
we have

353
00:13:46,959 --> 00:13:49,360
a service contract that contains

354
00:13:49,360 --> 00:13:51,440
operation contract the operation

355
00:13:51,440 --> 00:13:54,000
contracts define the parameters and the

356
00:13:54,000 --> 00:13:57,680
return type of the operation

357
00:13:58,480 --> 00:13:59,839
in our case

358
00:13:59,839 --> 00:14:03,199
the service contract is a

359
00:14:03,199 --> 00:14:05,279
c-sharp

360
00:14:05,279 --> 00:14:06,800
interface

361
00:14:06,800 --> 00:14:10,959
and it and its implementation

362
00:14:10,959 --> 00:14:14,000
is a class on the application server

363
00:14:14,000 --> 00:14:15,279
itself

364
00:14:15,279 --> 00:14:16,639
that implement

365
00:14:16,639 --> 00:14:19,680
all the methods the operations

366
00:14:19,680 --> 00:14:22,320
so when when the wcf client

367
00:14:22,320 --> 00:14:25,040
calls the operation wc framework takes

368
00:14:25,040 --> 00:14:26,399
the parameters

369
00:14:26,399 --> 00:14:28,320
and transform it

370
00:14:28,320 --> 00:14:30,720
into a transmittable format and send it

371
00:14:30,720 --> 00:14:32,079
over the network

372
00:14:32,079 --> 00:14:35,199
to the wcf servers

373
00:14:35,199 --> 00:14:38,079
then the wcf framework on the wcf

374
00:14:38,079 --> 00:14:40,399
service the application server

375
00:14:40,399 --> 00:14:43,760
transforming back to the parameters

376
00:14:43,760 --> 00:14:47,079
like a dataobject.net

377
00:14:47,199 --> 00:14:48,240
object

378
00:14:48,240 --> 00:14:50,240
and calls operation

379
00:14:50,240 --> 00:14:52,959
and after it runs the result

380
00:14:52,959 --> 00:14:54,959
transform again to a transmittable

381
00:14:54,959 --> 00:14:59,160
format and sent to the client

382
00:15:00,320 --> 00:15:01,120
so

383
00:15:01,120 --> 00:15:04,000
as involved said we managed to download

384
00:15:04,000 --> 00:15:05,360
the blueprism

385
00:15:05,360 --> 00:15:06,800
platform

386
00:15:06,800 --> 00:15:08,560
and we looked inside

387
00:15:08,560 --> 00:15:11,519
in our case the wcf

388
00:15:11,519 --> 00:15:13,120
service contract

389
00:15:13,120 --> 00:15:15,839
is an iserver interface

390
00:15:15,839 --> 00:15:18,800
and those all the operations there are

391
00:15:18,800 --> 00:15:20,880
many more

392
00:15:20,880 --> 00:15:23,519
and the implementation

393
00:15:23,519 --> 00:15:24,720
of it

394
00:15:24,720 --> 00:15:26,720
is a cls server

395
00:15:26,720 --> 00:15:28,560
it's a class

396
00:15:28,560 --> 00:15:31,519
that implements the iserver

397
00:15:31,519 --> 00:15:34,399
so when the when the client

398
00:15:34,399 --> 00:15:36,399
calls an operation

399
00:15:36,399 --> 00:15:39,199
it basically use it as a normal object

400
00:15:39,199 --> 00:15:40,720
instance of

401
00:15:40,720 --> 00:15:43,600
the iserver itself

402
00:15:43,600 --> 00:15:46,959
and it calls it like a regular

403
00:15:46,959 --> 00:15:49,839
object and use its methods and the wcf

404
00:15:49,839 --> 00:15:53,720
framework handle everything

405
00:15:54,800 --> 00:15:57,440
so before we continue and dive in into

406
00:15:57,440 --> 00:15:59,360
our attacks

407
00:15:59,360 --> 00:16:00,720
we need to talk a little bit about

408
00:16:00,720 --> 00:16:02,560
dotnet executables

409
00:16:02,560 --> 00:16:05,920
donald executables aren't like any other

410
00:16:05,920 --> 00:16:07,519
executable

411
00:16:07,519 --> 00:16:09,839
they don't contain ins

412
00:16:09,839 --> 00:16:11,680
they don't tell

413
00:16:11,680 --> 00:16:13,120
a

414
00:16:13,120 --> 00:16:15,680
native binary code they contain

415
00:16:15,680 --> 00:16:17,680
intermediate language called msil

416
00:16:17,680 --> 00:16:19,759
microsoft intermediate language

417
00:16:19,759 --> 00:16:22,399
and when it is executed there is a just

418
00:16:22,399 --> 00:16:24,560
in time compiler in the dotnet framework

419
00:16:24,560 --> 00:16:26,880
that translated into binary code just

420
00:16:26,880 --> 00:16:31,279
executed by the by the cpu

421
00:16:32,480 --> 00:16:33,839
and now

422
00:16:33,839 --> 00:16:35,519
we can talk

423
00:16:35,519 --> 00:16:39,199
about oh sorry and and this is

424
00:16:39,199 --> 00:16:40,000
uh

425
00:16:40,000 --> 00:16:43,680
one of the features of the msil it can

426
00:16:43,680 --> 00:16:46,079
be transformed back into source code

427
00:16:46,079 --> 00:16:47,759
very easily using a reflection tool

428
00:16:47,759 --> 00:16:48,880
called

429
00:16:48,880 --> 00:16:51,279
dns files or any other tools and it can

430
00:16:51,279 --> 00:16:54,880
be debugged like step by step

431
00:16:55,680 --> 00:16:58,800
okay great thank you nintendo so

432
00:16:58,800 --> 00:17:01,440
finally we've reached our first attack

433
00:17:01,440 --> 00:17:03,120
and here

434
00:17:03,120 --> 00:17:07,039
we will try to define our attack surface

435
00:17:07,039 --> 00:17:10,000
and from there see if we can

436
00:17:10,000 --> 00:17:12,160
try and steal those encryption master

437
00:17:12,160 --> 00:17:14,559
keys that we discussed

438
00:17:14,559 --> 00:17:15,760
before

439
00:17:15,760 --> 00:17:16,720
so

440
00:17:16,720 --> 00:17:17,679
first thing

441
00:17:17,679 --> 00:17:20,079
first we started looking into the dot

442
00:17:20,079 --> 00:17:22,640
net uh application using dnspy which

443
00:17:22,640 --> 00:17:25,760
shows us this the actual source code

444
00:17:25,760 --> 00:17:26,799
that blue

445
00:17:26,799 --> 00:17:28,799
blue prism developers

446
00:17:28,799 --> 00:17:29,760
see

447
00:17:29,760 --> 00:17:31,039
and

448
00:17:31,039 --> 00:17:32,559
we soon found out

449
00:17:32,559 --> 00:17:35,600
that the application server which is our

450
00:17:35,600 --> 00:17:37,440
prime target

451
00:17:37,440 --> 00:17:39,360
was pretty well

452
00:17:39,360 --> 00:17:40,720
protected

453
00:17:40,720 --> 00:17:42,000
however

454
00:17:42,000 --> 00:17:44,320
it seems to us that

455
00:17:44,320 --> 00:17:47,039
the application server to some extent

456
00:17:47,039 --> 00:17:51,280
is willing to communicate with any wcf

457
00:17:51,280 --> 00:17:52,400
client

458
00:17:52,400 --> 00:17:55,039
on the domain so that means

459
00:17:55,039 --> 00:17:59,600
that even unauthenticated wcf clients

460
00:17:59,600 --> 00:18:03,200
are able to call each and every one of

461
00:18:03,200 --> 00:18:05,760
the server the wcf server the

462
00:18:05,760 --> 00:18:07,760
application servers

463
00:18:07,760 --> 00:18:09,120
methods

464
00:18:09,120 --> 00:18:10,000
and

465
00:18:10,000 --> 00:18:12,640
this now became strategically

466
00:18:12,640 --> 00:18:13,760
our

467
00:18:13,760 --> 00:18:15,200
attack surface

468
00:18:15,200 --> 00:18:18,480
so our goal was now to

469
00:18:18,480 --> 00:18:22,640
somehow disguise ourselves as a wcf

470
00:18:22,640 --> 00:18:25,520
client on the network on the domain

471
00:18:25,520 --> 00:18:26,480
and

472
00:18:26,480 --> 00:18:27,440
try

473
00:18:27,440 --> 00:18:29,840
whatever

474
00:18:30,000 --> 00:18:33,039
method whatever server methods we could

475
00:18:33,039 --> 00:18:35,039
in order to somehow make the application

476
00:18:35,039 --> 00:18:38,240
server misbehave

477
00:18:38,240 --> 00:18:39,760
so

478
00:18:39,760 --> 00:18:42,799
let's first look at an example of such a

479
00:18:42,799 --> 00:18:45,200
method so as i said

480
00:18:45,200 --> 00:18:48,160
every unauthenticated client wcf client

481
00:18:48,160 --> 00:18:50,000
on the domain can call create

482
00:18:50,000 --> 00:18:51,280
credentials

483
00:18:51,280 --> 00:18:53,760
if it knows the correct parameters it

484
00:18:53,760 --> 00:18:55,679
should provide

485
00:18:55,679 --> 00:18:56,400
now

486
00:18:56,400 --> 00:18:58,160
this is the server side so what the

487
00:18:58,160 --> 00:19:00,160
server is going to do

488
00:19:00,160 --> 00:19:02,960
if if the wcf client calls create

489
00:19:02,960 --> 00:19:05,520
credential it will first

490
00:19:05,520 --> 00:19:09,919
execute check permissions here in red

491
00:19:09,919 --> 00:19:12,720
check permissions would check if the w

492
00:19:12,720 --> 00:19:15,360
the calling wcf client is indeed

493
00:19:15,360 --> 00:19:18,320
authenticated with blue prism

494
00:19:18,320 --> 00:19:21,840
and if it is it will load the secure

495
00:19:21,840 --> 00:19:25,280
method in yellow secure method preamble

496
00:19:25,280 --> 00:19:27,760
and compare the permissions of the

497
00:19:27,760 --> 00:19:30,000
client with whatever is written in the

498
00:19:30,000 --> 00:19:34,400
secure method so if i'm a wcf client and

499
00:19:34,400 --> 00:19:37,280
i'm authenticated then if only if i have

500
00:19:37,280 --> 00:19:39,039
the permission security managed

501
00:19:39,039 --> 00:19:40,320
credentials

502
00:19:40,320 --> 00:19:41,440
then

503
00:19:41,440 --> 00:19:42,799
check permissions would allow the

504
00:19:42,799 --> 00:19:44,160
continuation

505
00:19:44,160 --> 00:19:46,160
of the methods

506
00:19:46,160 --> 00:19:48,240
in any other case check permissions

507
00:19:48,240 --> 00:19:50,880
would return an exception and the

508
00:19:50,880 --> 00:19:54,720
execution will be stopped

509
00:19:55,200 --> 00:19:58,240
another example of the cls server class

510
00:19:58,240 --> 00:20:00,400
server

511
00:20:00,400 --> 00:20:01,440
method

512
00:20:01,440 --> 00:20:03,840
is this unsecured method

513
00:20:03,840 --> 00:20:05,280
so

514
00:20:05,280 --> 00:20:06,400
we can

515
00:20:06,400 --> 00:20:09,360
we can find a number of cases where

516
00:20:09,360 --> 00:20:11,760
the server the application server should

517
00:20:11,760 --> 00:20:12,760
allow

518
00:20:12,760 --> 00:20:16,320
unauthenticated wcf clients to actually

519
00:20:16,320 --> 00:20:18,559
run code on the server

520
00:20:18,559 --> 00:20:21,919
an example is of course the login method

521
00:20:21,919 --> 00:20:24,400
so as you can see the logging method

522
00:20:24,400 --> 00:20:26,159
does not have

523
00:20:26,159 --> 00:20:28,240
a check permissions call

524
00:20:28,240 --> 00:20:32,400
and the preamble is unsecured method

525
00:20:32,400 --> 00:20:34,480
so this is another example

526
00:20:34,480 --> 00:20:36,320
so we had to go over

527
00:20:36,320 --> 00:20:37,840
all of those

528
00:20:37,840 --> 00:20:38,880
um

529
00:20:38,880 --> 00:20:42,720
dozens and dozens and dozens of methods

530
00:20:42,720 --> 00:20:44,799
server-side methods

531
00:20:44,799 --> 00:20:46,480
and trying to find the one that would

532
00:20:46,480 --> 00:20:49,440
make the application server misbehave

533
00:20:49,440 --> 00:20:50,320
well

534
00:20:50,320 --> 00:20:53,600
after maybe three or four passes

535
00:20:53,600 --> 00:20:55,919
we found this

536
00:20:55,919 --> 00:20:58,159
okay let's zoom in

537
00:20:58,159 --> 00:21:00,559
so as you can see this is

538
00:21:00,559 --> 00:21:04,320
this method is get encryption schemes

539
00:21:04,320 --> 00:21:05,760
that's interesting because this is what

540
00:21:05,760 --> 00:21:07,039
we wanted

541
00:21:07,039 --> 00:21:09,440
we can also see that

542
00:21:09,440 --> 00:21:11,200
it is in the wrong place

543
00:21:11,200 --> 00:21:13,919
it is physically inside cls server

544
00:21:13,919 --> 00:21:16,720
but we can see that it belongs to

545
00:21:16,720 --> 00:21:18,240
iserver

546
00:21:18,240 --> 00:21:21,600
so that's an anomaly that's weird

547
00:21:21,600 --> 00:21:22,720
now

548
00:21:22,720 --> 00:21:24,880
what get encryption scheme does is

549
00:21:24,880 --> 00:21:25,760
it

550
00:21:25,760 --> 00:21:28,000
gets the database connection

551
00:21:28,000 --> 00:21:29,600
and it calls the local get encryption

552
00:21:29,600 --> 00:21:32,320
schemes with the connection and true

553
00:21:32,320 --> 00:21:33,679
so we wanted to know what that true

554
00:21:33,679 --> 00:21:35,200
means

555
00:21:35,200 --> 00:21:37,600
so if we dig into get encryption schemes

556
00:21:37,600 --> 00:21:39,520
here

557
00:21:39,520 --> 00:21:40,880
we will see

558
00:21:40,880 --> 00:21:43,679
that the true is include key

559
00:21:43,679 --> 00:21:46,000
and this true value will be transferred

560
00:21:46,000 --> 00:21:46,880
on

561
00:21:46,880 --> 00:21:49,360
and eventually

562
00:21:49,360 --> 00:21:51,200
get encryption schemes would not only

563
00:21:51,200 --> 00:21:54,000
return all the encryption schemes of the

564
00:21:54,000 --> 00:21:56,159
blue prism platform

565
00:21:56,159 --> 00:21:58,960
but also include those master keys that

566
00:21:58,960 --> 00:22:01,520
we discussed earlier

567
00:22:01,520 --> 00:22:02,240
in

568
00:22:02,240 --> 00:22:04,640
in that collection that is returned

569
00:22:04,640 --> 00:22:05,760
this one

570
00:22:05,760 --> 00:22:08,320
so the only question we have left is

571
00:22:08,320 --> 00:22:11,200
can an unauthenticated client

572
00:22:11,200 --> 00:22:12,880
actually call

573
00:22:12,880 --> 00:22:15,360
this server-side function or method

574
00:22:15,360 --> 00:22:18,240
so let's see a demo

575
00:22:18,240 --> 00:22:19,360
so here

576
00:22:19,360 --> 00:22:22,080
we at the attacker we are using one and

577
00:22:22,080 --> 00:22:24,720
we are not a user

578
00:22:24,720 --> 00:22:26,720
in blue prism so there's no way we can

579
00:22:26,720 --> 00:22:28,799
authenticate ourselves

580
00:22:28,799 --> 00:22:31,200
the we are using one so this is the code

581
00:22:31,200 --> 00:22:33,520
that we downloaded the cl the client

582
00:22:33,520 --> 00:22:36,799
code that we downloaded from blue prism

583
00:22:36,799 --> 00:22:39,120
and we run it as it is we just added a

584
00:22:39,120 --> 00:22:41,440
line there you'll see that in a minute

585
00:22:41,440 --> 00:22:43,600
now you can see that we are pre-logging

586
00:22:43,600 --> 00:22:45,919
so we are pre-authenticated

587
00:22:45,919 --> 00:22:49,200
login is only after us

588
00:22:49,200 --> 00:22:50,960
we added this line the

589
00:22:50,960 --> 00:22:52,000
server

590
00:22:52,000 --> 00:22:54,640
get encryption schemes and try to call

591
00:22:54,640 --> 00:22:55,600
it

592
00:22:55,600 --> 00:22:58,080
so again we we may

593
00:22:58,080 --> 00:23:00,720
get an exception

594
00:23:00,720 --> 00:23:03,039
but of course

595
00:23:03,039 --> 00:23:05,280
no we received two encryption schemes

596
00:23:05,280 --> 00:23:07,520
again we are an unauthenticated wcf

597
00:23:07,520 --> 00:23:09,200
client

598
00:23:09,200 --> 00:23:10,720
let's look into the first encryption

599
00:23:10,720 --> 00:23:13,280
scheme here

600
00:23:13,760 --> 00:23:15,200
so this is

601
00:23:15,200 --> 00:23:16,880
the default encryption scheme the one

602
00:23:16,880 --> 00:23:19,280
that is used to encrypt and decrypt all

603
00:23:19,280 --> 00:23:21,120
credentials on the system and we're

604
00:23:21,120 --> 00:23:23,120
going to test

605
00:23:23,120 --> 00:23:24,559
the key here

606
00:23:24,559 --> 00:23:27,039
if it actually decrypts credentials from

607
00:23:27,039 --> 00:23:28,480
the database

608
00:23:28,480 --> 00:23:30,559
so we're going to copy the key that we

609
00:23:30,559 --> 00:23:32,400
received

610
00:23:32,400 --> 00:23:33,600
that's the key

611
00:23:33,600 --> 00:23:35,520
we're just going to copy it

612
00:23:35,520 --> 00:23:39,520
and we've written a small application

613
00:23:39,520 --> 00:23:42,960
that attempts to decrypt using the key

614
00:23:42,960 --> 00:23:44,640
it's an aes key

615
00:23:44,640 --> 00:23:46,080
and the credential we copied from the

616
00:23:46,080 --> 00:23:47,840
database

617
00:23:47,840 --> 00:23:49,200
and

618
00:23:49,200 --> 00:23:51,840
wow

619
00:23:51,919 --> 00:23:53,760
this is a secret so

620
00:23:53,760 --> 00:23:55,760
our attack was successful

621
00:23:55,760 --> 00:23:59,600
and we got the correct mastery

622
00:23:59,600 --> 00:24:02,600
so

623
00:24:04,880 --> 00:24:06,640
that's great so we have the master keys

624
00:24:06,640 --> 00:24:09,440
in our hand but coming to think of it

625
00:24:09,440 --> 00:24:12,159
it's like having half of a treasure map

626
00:24:12,159 --> 00:24:13,919
and we probably won't be able to find

627
00:24:13,919 --> 00:24:16,240
the treasure without the other half the

628
00:24:16,240 --> 00:24:18,640
other half being the encrypted the

629
00:24:18,640 --> 00:24:21,039
encrypted credentials

630
00:24:21,039 --> 00:24:23,200
so we started thinking about

631
00:24:23,200 --> 00:24:25,600
how we can chain other attacks

632
00:24:25,600 --> 00:24:27,919
with this attack that steals the master

633
00:24:27,919 --> 00:24:28,960
keys

634
00:24:28,960 --> 00:24:30,559
and then we thought well where are those

635
00:24:30,559 --> 00:24:32,799
encrypted credentials stored

636
00:24:32,799 --> 00:24:35,919
they're stored in the mssql database

637
00:24:35,919 --> 00:24:37,360
so why not

638
00:24:37,360 --> 00:24:41,039
run an sql injection on it

639
00:24:41,919 --> 00:24:44,159
so

640
00:24:44,960 --> 00:24:46,640
sql injections

641
00:24:46,640 --> 00:24:49,919
seo injections are one of the most known

642
00:24:49,919 --> 00:24:51,120
oldest

643
00:24:51,120 --> 00:24:54,320
and dangerous attack known

644
00:24:54,320 --> 00:24:57,360
um sql injection is an attack where a

645
00:24:57,360 --> 00:25:00,240
malicious code inserted into a string

646
00:25:00,240 --> 00:25:02,320
and then

647
00:25:02,320 --> 00:25:06,639
passed to a database for execution

648
00:25:06,960 --> 00:25:09,120
there are no way

649
00:25:09,120 --> 00:25:10,000
to

650
00:25:10,000 --> 00:25:12,640
prevent sql injection is to use

651
00:25:12,640 --> 00:25:15,440
very strict input validation

652
00:25:15,440 --> 00:25:16,640
and also

653
00:25:16,640 --> 00:25:18,880
use parameterized queries

654
00:25:18,880 --> 00:25:23,039
the blue prism platform used those rules

655
00:25:23,039 --> 00:25:24,480
religiously

656
00:25:24,480 --> 00:25:27,120
and we went through the code

657
00:25:27,120 --> 00:25:29,440
several times all of it and we didn't

658
00:25:29,440 --> 00:25:31,279
find any point

659
00:25:31,279 --> 00:25:33,679
where we can actually

660
00:25:33,679 --> 00:25:34,720
inject

661
00:25:34,720 --> 00:25:37,279
sql

662
00:25:37,360 --> 00:25:38,159
so

663
00:25:38,159 --> 00:25:40,240
this is why we went to the stored

664
00:25:40,240 --> 00:25:42,320
procedures

665
00:25:42,320 --> 00:25:44,080
stored procedures

666
00:25:44,080 --> 00:25:48,080
are set of sql statement that are stored

667
00:25:48,080 --> 00:25:50,080
in in the database

668
00:25:50,080 --> 00:25:52,320
and then can be reused and shared

669
00:25:52,320 --> 00:25:54,159
between application

670
00:25:54,159 --> 00:25:56,240
it also allows the developers use

671
00:25:56,240 --> 00:25:57,679
pre-written

672
00:25:57,679 --> 00:26:00,000
queries

673
00:26:00,000 --> 00:26:03,360
that already approve

674
00:26:03,360 --> 00:26:06,080
there is another security aspect here

675
00:26:06,080 --> 00:26:08,480
it allows accessing

676
00:26:08,480 --> 00:26:11,360
part of a table without

677
00:26:11,360 --> 00:26:13,360
direct access

678
00:26:13,360 --> 00:26:16,559
to the table itself

679
00:26:17,520 --> 00:26:21,039
this is a partial list of the blue prism

680
00:26:21,039 --> 00:26:22,799
stored procedures

681
00:26:22,799 --> 00:26:25,440
we went through all of them

682
00:26:25,440 --> 00:26:27,840
and we didn't find even there any point

683
00:26:27,840 --> 00:26:30,240
we can actually inject

684
00:26:30,240 --> 00:26:32,559
code

685
00:26:33,760 --> 00:26:34,799
but then

686
00:26:34,799 --> 00:26:36,480
we found

687
00:26:36,480 --> 00:26:38,960
the system sold procedure

688
00:26:38,960 --> 00:26:41,840
in the in red

689
00:26:42,080 --> 00:26:44,960
this folder contains default stored

690
00:26:44,960 --> 00:26:47,200
procedures that come with the mssql

691
00:26:47,200 --> 00:26:48,960
installation

692
00:26:48,960 --> 00:26:50,559
by default

693
00:26:50,559 --> 00:26:53,120
so we went in there and we found

694
00:26:53,120 --> 00:26:54,960
this thought procedure

695
00:26:54,960 --> 00:26:56,799
spsql exec

696
00:26:56,799 --> 00:26:59,039
it received a string

697
00:26:59,039 --> 00:27:01,120
through the parameter p1

698
00:27:01,120 --> 00:27:03,120
and then executed

699
00:27:03,120 --> 00:27:05,679
the only question now can we

700
00:27:05,679 --> 00:27:06,559
run

701
00:27:06,559 --> 00:27:10,000
can we call this stored procedure

702
00:27:10,000 --> 00:27:13,600
through the blueprism application

703
00:27:13,600 --> 00:27:15,679
so we went through the code

704
00:27:15,679 --> 00:27:17,200
again

705
00:27:17,200 --> 00:27:19,360
and we found

706
00:27:19,360 --> 00:27:22,320
this method get chart data

707
00:27:22,320 --> 00:27:25,120
it's a secured method

708
00:27:25,120 --> 00:27:27,200
so we need to be

709
00:27:27,200 --> 00:27:29,120
a user in the blue prism

710
00:27:29,120 --> 00:27:31,679
in the blue prism platform

711
00:27:31,679 --> 00:27:33,200
but we don't need any special

712
00:27:33,200 --> 00:27:35,279
permissions we can be any user in the

713
00:27:35,279 --> 00:27:36,960
system

714
00:27:36,960 --> 00:27:38,640
inside

715
00:27:38,640 --> 00:27:41,279
it receive

716
00:27:41,279 --> 00:27:43,600
data source name which is a

717
00:27:43,600 --> 00:27:47,120
which is the stored procedure name

718
00:27:47,120 --> 00:27:49,679
and the dictionary param

719
00:27:49,679 --> 00:27:52,000
then it connects to the database and

720
00:27:52,000 --> 00:27:54,480
calls the local the local method

721
00:27:54,480 --> 00:27:56,480
this getchart data

722
00:27:56,480 --> 00:27:57,840
and inside

723
00:27:57,840 --> 00:27:58,960
it calls

724
00:27:58,960 --> 00:28:01,200
the stored procedure

725
00:28:01,200 --> 00:28:02,720
using

726
00:28:02,720 --> 00:28:06,240
the params dictionary

727
00:28:06,240 --> 00:28:09,200
let's see how we can use it

728
00:28:09,200 --> 00:28:10,240
so

729
00:28:10,240 --> 00:28:12,080
we are in the blue prism interactive

730
00:28:12,080 --> 00:28:14,240
plant and as you will see in a few

731
00:28:14,240 --> 00:28:15,600
seconds

732
00:28:15,600 --> 00:28:16,640
we are

733
00:28:16,640 --> 00:28:19,279
a user in the system

734
00:28:19,279 --> 00:28:21,279
but without any roles or permission so

735
00:28:21,279 --> 00:28:23,200
we can be any user

736
00:28:23,200 --> 00:28:26,000
in the platform

737
00:28:27,600 --> 00:28:29,760
on our attacking server

738
00:28:29,760 --> 00:28:32,000
we have http server that will send

739
00:28:32,000 --> 00:28:33,440
powershell code

740
00:28:33,440 --> 00:28:35,360
and we have reverse shell net cutting

741
00:28:35,360 --> 00:28:38,000
listening mode

742
00:28:39,919 --> 00:28:42,880
this is ms sql server

743
00:28:42,880 --> 00:28:45,520
as you can see the ip address ends with

744
00:28:45,520 --> 00:28:48,158
148

745
00:28:49,039 --> 00:28:50,320
and

746
00:28:50,320 --> 00:28:53,760
yeah so this is our patched client

747
00:28:53,760 --> 00:28:54,799
we

748
00:28:54,799 --> 00:28:57,120
run it and we call the get chart data

749
00:28:57,120 --> 00:28:58,880
method

750
00:28:58,880 --> 00:29:03,039
and we call the spsql exec and

751
00:29:03,039 --> 00:29:06,320
use the p1 parameter with our payload

752
00:29:06,320 --> 00:29:07,679
our payload

753
00:29:07,679 --> 00:29:10,840
will request in http the

754
00:29:10,840 --> 00:29:12,399
powershell

755
00:29:12,399 --> 00:29:15,039
right here

756
00:29:15,360 --> 00:29:17,440
it will request the partial script the

757
00:29:17,440 --> 00:29:19,600
power cut it's an implementation of

758
00:29:19,600 --> 00:29:21,919
netcat in powershell

759
00:29:21,919 --> 00:29:25,039
and then it will execute it

760
00:29:25,039 --> 00:29:28,080
and connect to our reverse shell

761
00:29:28,080 --> 00:29:30,480
and here we have basically a reverse

762
00:29:30,480 --> 00:29:33,520
shell with anti-authority system

763
00:29:33,520 --> 00:29:35,520
on the sql

764
00:29:35,520 --> 00:29:36,799
server

765
00:29:36,799 --> 00:29:39,799
itself

766
00:29:40,250 --> 00:29:41,679
[Applause]

767
00:29:41,679 --> 00:29:44,240
thank you

768
00:29:44,880 --> 00:29:47,679
thank you so some conclusion for this

769
00:29:47,679 --> 00:29:50,000
attack

770
00:29:50,159 --> 00:29:51,279
first of all

771
00:29:51,279 --> 00:29:53,279
as you can see sql injections are very

772
00:29:53,279 --> 00:29:54,559
impactful

773
00:29:54,559 --> 00:29:55,919
in our case

774
00:29:55,919 --> 00:29:57,840
we have access to all

775
00:29:57,840 --> 00:30:00,320
encrypted credentials

776
00:30:00,320 --> 00:30:02,880
and with the attack that nimrod just

777
00:30:02,880 --> 00:30:04,159
showed us

778
00:30:04,159 --> 00:30:06,480
we can basically decrypt them

779
00:30:06,480 --> 00:30:09,120
so great we have credentials

780
00:30:09,120 --> 00:30:12,559
we also have code execution on the robot

781
00:30:12,559 --> 00:30:14,720
the runtime resources

782
00:30:14,720 --> 00:30:16,159
because

783
00:30:16,159 --> 00:30:18,880
their code the process codes are stored

784
00:30:18,880 --> 00:30:21,200
in the database

785
00:30:21,200 --> 00:30:23,600
and also we have elevated remote code

786
00:30:23,600 --> 00:30:27,918
execution on the mssql server

787
00:30:28,720 --> 00:30:29,679
now

788
00:30:29,679 --> 00:30:31,600
we are going to our

789
00:30:31,600 --> 00:30:33,039
third attack

790
00:30:33,039 --> 00:30:35,279
our last attack

791
00:30:35,279 --> 00:30:36,960
this

792
00:30:36,960 --> 00:30:39,760
in this attack our target is

793
00:30:39,760 --> 00:30:42,720
to access the heart of the blue prism

794
00:30:42,720 --> 00:30:44,320
platform

795
00:30:44,320 --> 00:30:46,399
the application server itself and we're

796
00:30:46,399 --> 00:30:47,679
going to use

797
00:30:47,679 --> 00:30:50,799
insecure deserialization

798
00:30:50,799 --> 00:30:53,919
for those of you who never heard about

799
00:30:53,919 --> 00:30:56,000
insecure desertization we can take for

800
00:30:56,000 --> 00:30:57,679
example

801
00:30:57,679 --> 00:31:01,279
equifax that at 2017

802
00:31:01,279 --> 00:31:02,960
they announced that

803
00:31:02,960 --> 00:31:03,720
over

804
00:31:03,720 --> 00:31:06,480
143 million

805
00:31:06,480 --> 00:31:10,000
personal data of their customers

806
00:31:10,000 --> 00:31:11,919
have has been compromised

807
00:31:11,919 --> 00:31:14,320
this was due to an insecure java

808
00:31:14,320 --> 00:31:15,760
desertization

809
00:31:15,760 --> 00:31:17,919
that allowed to run code on their

810
00:31:17,919 --> 00:31:20,399
servers

811
00:31:20,960 --> 00:31:23,760
let's see how it's done in our case

812
00:31:23,760 --> 00:31:24,559
so

813
00:31:24,559 --> 00:31:27,840
as we said before we have our clients

814
00:31:27,840 --> 00:31:29,679
our interactive plans and

815
00:31:29,679 --> 00:31:31,600
random resources

816
00:31:31,600 --> 00:31:32,799
and we have

817
00:31:32,799 --> 00:31:35,760
the application server

818
00:31:35,760 --> 00:31:39,120
the client the wtf client

819
00:31:39,120 --> 00:31:41,760
is calling an operation in that wcf

820
00:31:41,760 --> 00:31:44,080
framework transform it into a

821
00:31:44,080 --> 00:31:45,279
transmittable

822
00:31:45,279 --> 00:31:49,600
format in our case a soft xml

823
00:31:50,080 --> 00:31:52,320
this transformation called

824
00:31:52,320 --> 00:31:53,919
serialization

825
00:31:53,919 --> 00:31:56,799
then it send over the network network

826
00:31:56,799 --> 00:32:00,640
and on the application server itself

827
00:32:00,640 --> 00:32:02,240
the wcf

828
00:32:02,240 --> 00:32:03,840
framework there

829
00:32:03,840 --> 00:32:05,760
transforming back

830
00:32:05,760 --> 00:32:10,960
into data object this is deserialization

831
00:32:13,039 --> 00:32:14,399
in our case

832
00:32:14,399 --> 00:32:17,519
we have those clients but we have a

833
00:32:17,519 --> 00:32:21,120
compromised client

834
00:32:21,360 --> 00:32:23,919
and when the client calls the operation

835
00:32:23,919 --> 00:32:25,279
the wcf

836
00:32:25,279 --> 00:32:27,120
framework

837
00:32:27,120 --> 00:32:28,559
transform it

838
00:32:28,559 --> 00:32:31,519
serialize it into soft xml

839
00:32:31,519 --> 00:32:34,399
but then the attacker injects his own

840
00:32:34,399 --> 00:32:37,039
payload to this xml

841
00:32:37,039 --> 00:32:39,600
then it's sent over the network

842
00:32:39,600 --> 00:32:43,519
and the wcf framework deserialize

843
00:32:43,519 --> 00:32:46,320
the malicious payload

844
00:32:46,320 --> 00:32:47,360
to

845
00:32:47,360 --> 00:32:50,000
and pass it to the application server

846
00:32:50,000 --> 00:32:52,399
but this deserialization happens before

847
00:32:52,399 --> 00:32:54,000
we even run

848
00:32:54,000 --> 00:32:57,279
the application server code itself

849
00:32:57,279 --> 00:32:58,480
so

850
00:32:58,480 --> 00:33:03,200
we don't need any permissions to do this

851
00:33:03,360 --> 00:33:04,799
now when we are talking about

852
00:33:04,799 --> 00:33:06,320
civilization we need to talk about

853
00:33:06,320 --> 00:33:08,840
serialization engines

854
00:33:08,840 --> 00:33:12,559
serializers in wcf there are two majors

855
00:33:12,559 --> 00:33:13,360
one

856
00:33:13,360 --> 00:33:15,440
data contract serializer and net data

857
00:33:15,440 --> 00:33:17,360
contract sterilizer

858
00:33:17,360 --> 00:33:19,600
the net data contract serializer include

859
00:33:19,600 --> 00:33:23,120
object type information in its op xml

860
00:33:23,120 --> 00:33:27,679
and this is why it's more permissive

861
00:33:27,679 --> 00:33:28,399
so

862
00:33:28,399 --> 00:33:30,960
we went through the code

863
00:33:30,960 --> 00:33:33,919
and we found several methods that use

864
00:33:33,919 --> 00:33:37,200
net data contract serializer

865
00:33:37,200 --> 00:33:40,240
this will be our attack surface

866
00:33:40,240 --> 00:33:42,000
next we need to find a point where we

867
00:33:42,000 --> 00:33:45,760
can actually inject our payload

868
00:33:45,760 --> 00:33:48,000
and

869
00:33:48,399 --> 00:33:50,840
it will be sterilized without any

870
00:33:50,840 --> 00:33:52,399
errors

871
00:33:52,399 --> 00:33:53,360
so

872
00:33:53,360 --> 00:33:55,679
we scanned those methods that used net

873
00:33:55,679 --> 00:33:58,480
data contract serializers and we found

874
00:33:58,480 --> 00:34:00,320
that some of them use

875
00:34:00,320 --> 00:34:04,640
the type session runner schedule

876
00:34:04,640 --> 00:34:06,799
this type is very interesting

877
00:34:06,799 --> 00:34:09,199
because inside it it has an attribute

878
00:34:09,199 --> 00:34:11,040
m-abort lock

879
00:34:11,040 --> 00:34:12,320
that

880
00:34:12,320 --> 00:34:14,639
is an object type which means it's act

881
00:34:14,639 --> 00:34:16,960
like a wild card and can be any object

882
00:34:16,960 --> 00:34:20,119
we want

883
00:34:20,320 --> 00:34:21,839
so

884
00:34:21,839 --> 00:34:23,918
when a client

885
00:34:23,918 --> 00:34:25,520
called

886
00:34:25,520 --> 00:34:26,399
those

887
00:34:26,399 --> 00:34:29,119
one of those methods using runner a

888
00:34:29,119 --> 00:34:32,240
session runner schedule

889
00:34:32,639 --> 00:34:34,960
it looked like this basically on the

890
00:34:34,960 --> 00:34:38,079
wire on the this is how the soft xml

891
00:34:38,079 --> 00:34:41,040
look like it's it's very big so those

892
00:34:41,040 --> 00:34:43,599
are fragments we have the header and we

893
00:34:43,599 --> 00:34:46,159
have the body of the soft xml and inside

894
00:34:46,159 --> 00:34:48,719
we have the data for the operations

895
00:34:48,719 --> 00:34:50,320
and inside we have

896
00:34:50,320 --> 00:34:51,199
the

897
00:34:51,199 --> 00:34:53,440
session runner schedule

898
00:34:53,440 --> 00:34:54,320
and

899
00:34:54,320 --> 00:34:56,960
the emma board lock and here we want to

900
00:34:56,960 --> 00:34:58,090
inject our payload

901
00:34:58,090 --> 00:35:00,079
[Music]

902
00:35:00,079 --> 00:35:02,640
let's see how it's done okay

903
00:35:02,640 --> 00:35:03,520
okay

904
00:35:03,520 --> 00:35:04,400
so

905
00:35:04,400 --> 00:35:06,480
this is our demo

906
00:35:06,480 --> 00:35:07,440
for

907
00:35:07,440 --> 00:35:09,920
the serialization attack now again we

908
00:35:09,920 --> 00:35:12,400
are completely unauthenticated

909
00:35:12,400 --> 00:35:15,119
in this case as the danelle explained

910
00:35:15,119 --> 00:35:16,720
everything happens

911
00:35:16,720 --> 00:35:19,040
a lot a lot of time before

912
00:35:19,040 --> 00:35:21,359
the blue prism application server even

913
00:35:21,359 --> 00:35:22,640
gets control

914
00:35:22,640 --> 00:35:24,400
this is our application server at user

915
00:35:24,400 --> 00:35:26,400
six

916
00:35:26,400 --> 00:35:28,000
and

917
00:35:28,000 --> 00:35:30,400
we're going to show that we are

918
00:35:30,400 --> 00:35:32,240
we cannot be authenticated we are not a

919
00:35:32,240 --> 00:35:34,720
user again user one is not a user on the

920
00:35:34,720 --> 00:35:36,480
blue prism

921
00:35:36,480 --> 00:35:38,960
platform

922
00:35:38,960 --> 00:35:42,800
this is the scheduler create schedule

923
00:35:42,800 --> 00:35:45,280
method that we're about to use and as

924
00:35:45,280 --> 00:35:48,560
nintendo explained we will be injecting

925
00:35:48,560 --> 00:35:52,320
uh our malicious payload inside

926
00:35:52,320 --> 00:35:54,160
this class here

927
00:35:54,160 --> 00:35:56,720
the session one schedule and we're going

928
00:35:56,720 --> 00:36:00,000
to use the object emma bortlock

929
00:36:00,000 --> 00:36:01,280
so

930
00:36:01,280 --> 00:36:03,920
this is the code that we're injecting

931
00:36:03,920 --> 00:36:07,680
and again we're unauthenticated

932
00:36:07,839 --> 00:36:09,760
we're just creating the session runner

933
00:36:09,760 --> 00:36:11,920
schedule and calling scheduler create

934
00:36:11,920 --> 00:36:13,040
schedule

935
00:36:13,040 --> 00:36:16,320
and after it will be serialized by the

936
00:36:16,320 --> 00:36:18,640
wcf client

937
00:36:18,640 --> 00:36:20,000
okay this is the

938
00:36:20,000 --> 00:36:21,440
again we've seen this this is the

939
00:36:21,440 --> 00:36:23,839
attacker command and control

940
00:36:23,839 --> 00:36:26,079
both sides

941
00:36:26,079 --> 00:36:26,800
so

942
00:36:26,800 --> 00:36:29,119
once the wcf client serializes that

943
00:36:29,119 --> 00:36:31,520
information this small application of

944
00:36:31,520 --> 00:36:34,480
ours is going to intercept

945
00:36:34,480 --> 00:36:37,520
that sopxml

946
00:36:37,520 --> 00:36:41,280
byte data and replace emma bortlock

947
00:36:41,280 --> 00:36:44,960
with our malicious payload

948
00:36:44,960 --> 00:36:47,119
this is the sopxml data

949
00:36:47,119 --> 00:36:50,480
we have the header and

950
00:36:50,480 --> 00:36:53,200
the header whatever and

951
00:36:53,200 --> 00:36:56,000
here the application server at 145

952
00:36:56,000 --> 00:36:57,920
requested the power cat

953
00:36:57,920 --> 00:36:59,119
script

954
00:36:59,119 --> 00:37:01,839
and we have a reverse shell

955
00:37:01,839 --> 00:37:04,079
on user 6 and

956
00:37:04,079 --> 00:37:05,119
over the

957
00:37:05,119 --> 00:37:07,119
application server and since the

958
00:37:07,119 --> 00:37:09,440
application server is running elevated

959
00:37:09,440 --> 00:37:11,359
we are also

960
00:37:11,359 --> 00:37:13,119
admin

961
00:37:13,119 --> 00:37:14,800
we are running in the context of an

962
00:37:14,800 --> 00:37:16,160
admin

963
00:37:16,160 --> 00:37:17,520
inside

964
00:37:17,520 --> 00:37:19,680
the application server and again we are

965
00:37:19,680 --> 00:37:21,040
completely

966
00:37:21,040 --> 00:37:22,480
unauthenticated

967
00:37:22,480 --> 00:37:26,160
wcf client on the domain

968
00:37:31,200 --> 00:37:36,000
so final conclusions and mitigations

969
00:37:36,000 --> 00:37:38,400
about four months ago

970
00:37:38,400 --> 00:37:41,599
cyber clubs did a full disclosure of 15

971
00:37:41,599 --> 00:37:44,720
attack vectors that's it

972
00:37:44,720 --> 00:37:47,280
that we discovered and

973
00:37:47,280 --> 00:37:49,599
communicated to blue prism

974
00:37:49,599 --> 00:37:51,440
since then we have been in continuous

975
00:37:51,440 --> 00:37:54,640
contact with the blue prism security and

976
00:37:54,640 --> 00:37:56,079
technical teams

977
00:37:56,079 --> 00:37:58,079
and in in collaboration to fix the

978
00:37:58,079 --> 00:37:59,520
reported attacks

979
00:37:59,520 --> 00:38:00,720
and release

980
00:38:00,720 --> 00:38:04,480
software patches to customers

981
00:38:04,480 --> 00:38:06,079
as we've seen

982
00:38:06,079 --> 00:38:09,599
rpa is indeed very sensitive

983
00:38:09,599 --> 00:38:12,400
human operators have mfa multi-factor

984
00:38:12,400 --> 00:38:14,240
authentication

985
00:38:14,240 --> 00:38:16,079
they can change their own password when

986
00:38:16,079 --> 00:38:19,040
they are instructed to and they are less

987
00:38:19,040 --> 00:38:23,119
predictable than softer robots

988
00:38:23,119 --> 00:38:25,200
robots on the other hand

989
00:38:25,200 --> 00:38:28,240
are one-dimensional as far as their

990
00:38:28,240 --> 00:38:30,240
identities are concerned

991
00:38:30,240 --> 00:38:32,560
with no real possibility for

992
00:38:32,560 --> 00:38:34,720
multi-factor authentication

993
00:38:34,720 --> 00:38:37,040
this makes them more susceptible a lot

994
00:38:37,040 --> 00:38:39,520
more susceptible to attacks such as the

995
00:38:39,520 --> 00:38:42,400
ones we've shown here

996
00:38:42,400 --> 00:38:43,839
another point

997
00:38:43,839 --> 00:38:46,880
here that we would like to mention here

998
00:38:46,880 --> 00:38:48,400
and nathaniel talked about it a little

999
00:38:48,400 --> 00:38:51,359
bit is that rpa application rpx

1000
00:38:51,359 --> 00:38:55,280
application server practically runs code

1001
00:38:55,280 --> 00:38:57,440
on the robots

1002
00:38:57,440 --> 00:38:59,599
by taking over the database or the

1003
00:38:59,599 --> 00:39:01,839
application server

1004
00:39:01,839 --> 00:39:04,320
an attacker gains complete control

1005
00:39:04,320 --> 00:39:05,920
over the robots

1006
00:39:05,920 --> 00:39:08,560
and all credentials used by the robots

1007
00:39:08,560 --> 00:39:10,880
credentials are downloaded downloaded in

1008
00:39:10,880 --> 00:39:13,680
clear text to the robots

1009
00:39:13,680 --> 00:39:16,640
so if robots are the puppets

1010
00:39:16,640 --> 00:39:20,720
the application server is the puppeteer

1011
00:39:20,720 --> 00:39:24,480
so due to all we said above

1012
00:39:24,480 --> 00:39:27,599
enterprises should take recommended

1013
00:39:27,599 --> 00:39:30,400
vendor practices as a must

1014
00:39:30,400 --> 00:39:31,760
and be sure

1015
00:39:31,760 --> 00:39:33,520
to deeply and thoroughly understand the

1016
00:39:33,520 --> 00:39:35,359
security implications

1017
00:39:35,359 --> 00:39:37,680
if recommended practices are not

1018
00:39:37,680 --> 00:39:40,160
followed

1019
00:39:40,320 --> 00:39:43,440
because of the sensitivity

1020
00:39:43,440 --> 00:39:45,760
we should always use defense

1021
00:39:45,760 --> 00:39:47,520
defenses in depth

1022
00:39:47,520 --> 00:39:50,000
this may be the difference between a

1023
00:39:50,000 --> 00:39:52,880
successful attack and a failed one

1024
00:39:52,880 --> 00:39:53,760
so

1025
00:39:53,760 --> 00:39:55,359
for example we should use network

1026
00:39:55,359 --> 00:39:57,839
monitors wherever possible

1027
00:39:57,839 --> 00:39:59,920
we should use and port endpoint

1028
00:39:59,920 --> 00:40:03,280
protections such as vdrs xdrs and of

1029
00:40:03,280 --> 00:40:04,640
course

1030
00:40:04,640 --> 00:40:07,440
protect credentials by placing them as

1031
00:40:07,440 --> 00:40:09,359
much as possible in external credentials

1032
00:40:09,359 --> 00:40:11,839
works

1033
00:40:12,480 --> 00:40:14,960
questions

1034
00:40:24,880 --> 00:40:27,119
uh do you think moving to certificates

1035
00:40:27,119 --> 00:40:29,760
would be at least one step forward so

1036
00:40:29,760 --> 00:40:30,960
then we can cryptographically

1037
00:40:30,960 --> 00:40:32,640
authenticate both the client and the

1038
00:40:32,640 --> 00:40:34,880
server versus passive credentials around

1039
00:40:34,880 --> 00:40:36,319
it

1040
00:40:36,319 --> 00:40:39,599
can you repeat the question

1041
00:40:39,599 --> 00:40:41,920
when moving to uh certificate-based

1042
00:40:41,920 --> 00:40:43,680
authentication so we cryptographically

1043
00:40:43,680 --> 00:40:45,680
authenticate both clients and servers do

1044
00:40:45,680 --> 00:40:46,800
you think that would move something

1045
00:40:46,800 --> 00:40:49,200
forward versus passing credentials

1046
00:40:49,200 --> 00:40:51,280
around

1047
00:40:51,280 --> 00:40:53,040
i think i think these are two different

1048
00:40:53,040 --> 00:40:55,599
issues blue prism is already authentic

1049
00:40:55,599 --> 00:40:57,200
and using uh

1050
00:40:57,200 --> 00:40:59,920
certificate based authentication with

1051
00:40:59,920 --> 00:41:01,040
tls

1052
00:41:01,040 --> 00:41:02,400
on both

1053
00:41:02,400 --> 00:41:04,720
uh client and server

1054
00:41:04,720 --> 00:41:06,240
but it didn't stop us here because the

1055
00:41:06,240 --> 00:41:08,000
application server was willing to accept

1056
00:41:08,000 --> 00:41:08,880
our

1057
00:41:08,880 --> 00:41:09,680
uh

1058
00:41:09,680 --> 00:41:13,280
us as a wcf client anyway

1059
00:41:13,280 --> 00:41:16,800
the the only issue here was with

1060
00:41:16,800 --> 00:41:17,680
the

1061
00:41:17,680 --> 00:41:19,920
encryption schemes used to encrypt

1062
00:41:19,920 --> 00:41:21,680
critical data

1063
00:41:21,680 --> 00:41:23,760
on the application

1064
00:41:23,760 --> 00:41:25,200
so

1065
00:41:25,200 --> 00:41:27,599
i think i think these are two different

1066
00:41:27,599 --> 00:41:29,920
things

1067
00:41:30,480 --> 00:41:33,800
it may be

1068
00:41:47,440 --> 00:41:48,960
uh can you pull up that server code

1069
00:41:48,960 --> 00:41:50,720
block where it runs the d serialized

1070
00:41:50,720 --> 00:41:52,240
payload again

1071
00:41:52,240 --> 00:41:55,599
you'll have that pretty briefly

1072
00:41:55,599 --> 00:41:58,560
sorry come again where pull up the the

1073
00:41:58,560 --> 00:42:00,160
block of server code that was running

1074
00:42:00,160 --> 00:42:03,839
the d serialized payload

1075
00:42:04,160 --> 00:42:07,760
the block of the this one

1076
00:42:07,760 --> 00:42:09,839
no the server the server-side code that

1077
00:42:09,839 --> 00:42:12,160
runs the uh the serialized payload

1078
00:42:12,160 --> 00:42:13,760
the server side

1079
00:42:13,760 --> 00:42:18,240
you mean this is this the this interface

1080
00:42:18,240 --> 00:42:19,040
yes

1081
00:42:19,040 --> 00:42:20,720
the actual listener the receiver the

1082
00:42:20,720 --> 00:42:22,400
method

1083
00:42:22,400 --> 00:42:24,400
so the listener receiving it

1084
00:42:24,400 --> 00:42:26,960
is in the wcf framework it's not part of

1085
00:42:26,960 --> 00:42:28,240
the code

1086
00:42:28,240 --> 00:42:30,720
of the application server itself

1087
00:42:30,720 --> 00:42:31,680
it's

1088
00:42:31,680 --> 00:42:33,440
before this with

1089
00:42:33,440 --> 00:42:34,400
net

1090
00:42:34,400 --> 00:42:36,319
dlls

1091
00:42:36,319 --> 00:42:38,880
this is where the serialization happened

1092
00:42:38,880 --> 00:42:41,599
and the deserialization

1093
00:42:41,599 --> 00:42:43,520
let me try to to make it a little bit

1094
00:42:43,520 --> 00:42:46,480
clearer here the thing is

1095
00:42:46,480 --> 00:42:49,760
the the blue prism application server is

1096
00:42:49,760 --> 00:42:53,040
expecting to receive parameters

1097
00:42:53,040 --> 00:42:55,760
it's expecting to receive string name

1098
00:42:55,760 --> 00:42:56,839
or

1099
00:42:56,839 --> 00:42:59,839
the session runner schedule

1100
00:42:59,839 --> 00:43:02,000
right as a parameter

1101
00:43:02,000 --> 00:43:04,960
now the entity that is in charge of

1102
00:43:04,960 --> 00:43:07,200
providing this parameter is the d

1103
00:43:07,200 --> 00:43:08,800
serializer

1104
00:43:08,800 --> 00:43:12,480
so this serialization happens before

1105
00:43:12,480 --> 00:43:15,200
even the blue prism code

1106
00:43:15,200 --> 00:43:17,920
starts running

1107
00:43:17,920 --> 00:43:20,240
okay thank you

1108
00:43:20,240 --> 00:43:21,680
okay great

1109
00:43:21,680 --> 00:43:23,839
is there a specific requirement

1110
00:43:23,839 --> 00:43:24,640
where

1111
00:43:24,640 --> 00:43:25,359
the

1112
00:43:25,359 --> 00:43:27,760
blue prism application server and the

1113
00:43:27,760 --> 00:43:30,240
database server was running as system

1114
00:43:30,240 --> 00:43:32,319
because that seems to be an issue as

1115
00:43:32,319 --> 00:43:33,200
well

1116
00:43:33,200 --> 00:43:36,000
it may be

1117
00:43:36,079 --> 00:43:38,560
the the database server was indeed

1118
00:43:38,560 --> 00:43:39,440
running

1119
00:43:39,440 --> 00:43:41,599
as a system

1120
00:43:41,599 --> 00:43:42,400
but uh

1121
00:43:42,400 --> 00:43:44,400
[Music]

1122
00:43:44,400 --> 00:43:46,319
it may be an issue but in any case the

1123
00:43:46,319 --> 00:43:48,880
fact that we managed to get sql

1124
00:43:48,880 --> 00:43:51,119
injection and remote code execution

1125
00:43:51,119 --> 00:43:52,960
on the sql

1126
00:43:52,960 --> 00:43:55,680
mssql server means

1127
00:43:55,680 --> 00:43:57,920
at least that we have access to all the

1128
00:43:57,920 --> 00:43:59,760
credentials because with the sql

1129
00:43:59,760 --> 00:44:01,680
injection we can do other things rather

1130
00:44:01,680 --> 00:44:03,760
than remote code execution we just

1131
00:44:03,760 --> 00:44:05,520
thought vocal execution was the nicest

1132
00:44:05,520 --> 00:44:07,920
thing you can do but the idea is that if

1133
00:44:07,920 --> 00:44:10,480
we have a sql injection we can extract

1134
00:44:10,480 --> 00:44:13,040
all the encrypted credentials and then

1135
00:44:13,040 --> 00:44:15,200
decrypt them using the master keys that

1136
00:44:15,200 --> 00:44:17,680
we store in attack one so that was the

1137
00:44:17,680 --> 00:44:19,599
idea

1138
00:44:19,599 --> 00:44:21,200
we've got about 10 minutes left are

1139
00:44:21,200 --> 00:44:24,160
there any other questions

1140
00:44:26,400 --> 00:44:30,800
have you guys looked at other rpa tools

1141
00:44:31,359 --> 00:44:33,359
blue prism obviously it's one of the big

1142
00:44:33,359 --> 00:44:34,880
ones but

1143
00:44:34,880 --> 00:44:37,119
have you looked at any of the other ones

1144
00:44:37,119 --> 00:44:38,000
or

1145
00:44:38,000 --> 00:44:40,560
um no no we had uh

1146
00:44:40,560 --> 00:44:42,720
we had a mandate for uh

1147
00:44:42,720 --> 00:44:43,839
for one

1148
00:44:43,839 --> 00:44:48,599
but we maybe in the future i'm not sure

1149
00:44:55,920 --> 00:44:58,000
hello nimrod um i've probably thrown

1150
00:44:58,000 --> 00:45:00,240
myself under a bus here but uh there is

1151
00:45:00,240 --> 00:45:02,240
representation from blueprism here so if

1152
00:45:02,240 --> 00:45:03,680
any guys want to have a chat with us

1153
00:45:03,680 --> 00:45:06,000
afterwards uh we're here and we're more

1154
00:45:06,000 --> 00:45:08,400
than happy to have a chat with you

1155
00:45:08,400 --> 00:45:10,480
uh and just a quick note of nathaniel

1156
00:45:10,480 --> 00:45:12,960
and nimrod it's been a pleasure um you

1157
00:45:12,960 --> 00:45:14,560
know there was some some stuff that came

1158
00:45:14,560 --> 00:45:15,760
out of it but we've worked together and

1159
00:45:15,760 --> 00:45:17,680
it's been great same here thank you very

1160
00:45:17,680 --> 00:45:18,720
much

1161
00:45:18,720 --> 00:45:20,959
great

1162
00:45:26,560 --> 00:45:28,560
hi here um

1163
00:45:28,560 --> 00:45:30,480
i was just interested in the

1164
00:45:30,480 --> 00:45:32,400
in the uh

1165
00:45:32,400 --> 00:45:35,040
i was just interested in the payload

1166
00:45:35,040 --> 00:45:38,800
uh that was used uh

1167
00:45:38,880 --> 00:45:40,400
to

1168
00:45:40,400 --> 00:45:41,359
uh

1169
00:45:41,359 --> 00:45:42,640
get through the

1170
00:45:42,640 --> 00:45:44,880
serializer yeah yeah that's a good

1171
00:45:44,880 --> 00:45:45,760
question

1172
00:45:45,760 --> 00:45:48,240
so the payload uh

1173
00:45:48,240 --> 00:45:49,280
is

1174
00:45:49,280 --> 00:45:51,280
uh basically a

1175
00:45:51,280 --> 00:45:54,079
a payload in data of net data contract

1176
00:45:54,079 --> 00:45:56,640
serializer you can use it for

1177
00:45:56,640 --> 00:45:58,319
uh with like a

1178
00:45:58,319 --> 00:46:00,800
a yso serial.net but you need to

1179
00:46:00,800 --> 00:46:03,200
customize it a little bit because it's

1180
00:46:03,200 --> 00:46:06,079
not a complete soft xml

1181
00:46:06,079 --> 00:46:08,240
uh like the white so serial for example

1182
00:46:08,240 --> 00:46:09,760
give you you need to

1183
00:46:09,760 --> 00:46:12,079
play with it to build it but it's a

1184
00:46:12,079 --> 00:46:13,680
basic payload

1185
00:46:13,680 --> 00:46:15,280
it's not like a

1186
00:46:15,280 --> 00:46:19,400
any complicated one

1187
00:46:29,119 --> 00:46:30,880
thank you very much jeff thank you very

1188
00:46:30,880 --> 00:46:34,440
much thank you

