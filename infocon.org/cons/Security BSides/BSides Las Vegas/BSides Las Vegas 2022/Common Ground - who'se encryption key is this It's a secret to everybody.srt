1
00:00:00,399 --> 00:00:02,879
i am kelly i'm one of the staff here but

2
00:00:02,879 --> 00:00:04,720
i'm not as important as david and matt

3
00:00:04,720 --> 00:00:06,720
behind me who are about to give a talk

4
00:00:06,720 --> 00:00:09,120
uh on encryption keys it's a secret to

5
00:00:09,120 --> 00:00:10,320
everybody

6
00:00:10,320 --> 00:00:12,240
i hope you all get that reference and

7
00:00:12,240 --> 00:00:13,440
aren't too

8
00:00:13,440 --> 00:00:16,239
uh young for it anyhow we are going we

9
00:00:16,239 --> 00:00:18,880
are recording this there is an av stream

10
00:00:18,880 --> 00:00:19,920
so

11
00:00:19,920 --> 00:00:21,920
if you miss anything or if you want to

12
00:00:21,920 --> 00:00:24,480
see the slides later we're recording it

13
00:00:24,480 --> 00:00:26,480
and there's a stream so don't worry too

14
00:00:26,480 --> 00:00:29,119
much about it we'd also like to thank

15
00:00:29,119 --> 00:00:31,359
our sponsors all of our sponsors but

16
00:00:31,359 --> 00:00:34,160
especially our diamond sponsors lastpass

17
00:00:34,160 --> 00:00:36,960
um and paulo today and some of our gold

18
00:00:36,960 --> 00:00:40,000
sponsors including google intel and blue

19
00:00:40,000 --> 00:00:42,000
cat you know you we're all important

20
00:00:42,000 --> 00:00:43,520
you're all important but sponsors

21
00:00:43,520 --> 00:00:45,920
definitely help us out here one more

22
00:00:45,920 --> 00:00:47,680
thing is of course we all have cell

23
00:00:47,680 --> 00:00:49,760
phones we don't want to hear each

24
00:00:49,760 --> 00:00:51,520
other's cell phones for the next hour so

25
00:00:51,520 --> 00:00:53,360
just take a moment make sure they're on

26
00:00:53,360 --> 00:00:56,960
vibrate silent etc and uh of course we

27
00:00:56,960 --> 00:00:59,039
are recording we'd prefer you not to be

28
00:00:59,039 --> 00:01:02,399
recording and obviously besides we don't

29
00:01:02,399 --> 00:01:04,720
allow recording or pictures unless

30
00:01:04,720 --> 00:01:06,479
everybody in those pictures or

31
00:01:06,479 --> 00:01:08,560
recordings gives consent

32
00:01:08,560 --> 00:01:10,720
i've done my job and now the guys are

33
00:01:10,720 --> 00:01:14,240
going to do theirs enjoy

34
00:01:19,119 --> 00:01:20,159
all right ready

35
00:01:20,159 --> 00:01:21,759
yeah

36
00:01:21,759 --> 00:01:23,920
uh hey everyone uh thank you very much

37
00:01:23,920 --> 00:01:25,680
for taking the time to come out to our

38
00:01:25,680 --> 00:01:26,640
talk

39
00:01:26,640 --> 00:01:28,240
we're really excited to be here at

40
00:01:28,240 --> 00:01:30,400
b-sides and we're even more excited to

41
00:01:30,400 --> 00:01:32,799
share our presentation with you today

42
00:01:32,799 --> 00:01:35,119
um if for some reason you can't hear in

43
00:01:35,119 --> 00:01:36,720
the back please let me know this is

44
00:01:36,720 --> 00:01:37,840
actually my first time using a

45
00:01:37,840 --> 00:01:40,079
microphone so uh my posture might be a

46
00:01:40,079 --> 00:01:41,520
little off so just give me give me a

47
00:01:41,520 --> 00:01:43,439
hand up or something if if it's not good

48
00:01:43,439 --> 00:01:45,520
um as we continue to go

49
00:01:45,520 --> 00:01:46,799
um so

50
00:01:46,799 --> 00:01:48,479
the title of our talk is actually driven

51
00:01:48,479 --> 00:01:50,960
by a single question which is whose

52
00:01:50,960 --> 00:01:52,799
encryption key is this

53
00:01:52,799 --> 00:01:54,720
we admit this is a terrifying question

54
00:01:54,720 --> 00:01:57,600
to be asking as a security professional

55
00:01:57,600 --> 00:01:59,200
but today we're going to share a story

56
00:01:59,200 --> 00:02:00,560
with you

57
00:02:00,560 --> 00:02:03,040
about how log services and encryption

58
00:02:03,040 --> 00:02:05,200
configurations interact together with

59
00:02:05,200 --> 00:02:06,240
each other

60
00:02:06,240 --> 00:02:07,759
by the end of this talk we hope you have

61
00:02:07,759 --> 00:02:09,360
a better understanding of some of the

62
00:02:09,360 --> 00:02:12,239
nuances of how aws log services and

63
00:02:12,239 --> 00:02:14,000
encryption configurations interact with

64
00:02:14,000 --> 00:02:16,000
each other we'll also show you some

65
00:02:16,000 --> 00:02:17,760
tangible action items that you can take

66
00:02:17,760 --> 00:02:19,760
inside of your own environment as well

67
00:02:19,760 --> 00:02:22,319
as remediation paths if you do if you

68
00:02:22,319 --> 00:02:25,679
are facing any of these issues

69
00:02:25,920 --> 00:02:27,840
before we get started into the story we

70
00:02:27,840 --> 00:02:30,000
wanted to quickly introduce ourselves my

71
00:02:30,000 --> 00:02:32,160
name is david i'm currently a security

72
00:02:32,160 --> 00:02:33,840
engineer at benchling focusing on

73
00:02:33,840 --> 00:02:35,599
detection response

74
00:02:35,599 --> 00:02:37,440
prior to this i was at apple doing

75
00:02:37,440 --> 00:02:39,440
security for three years and i've been

76
00:02:39,440 --> 00:02:41,360
heavily involved in the aws security

77
00:02:41,360 --> 00:02:43,599
space for about the last five

78
00:02:43,599 --> 00:02:45,760
this is a shameless self-promotion but i

79
00:02:45,760 --> 00:02:47,360
recently started a blog on cloud

80
00:02:47,360 --> 00:02:49,040
security if

81
00:02:49,040 --> 00:02:51,040
if that's your cup of tea would love for

82
00:02:51,040 --> 00:02:52,560
you to check it out it's called simply

83
00:02:52,560 --> 00:02:55,280
cloud sec it's just on medium um yeah if

84
00:02:55,280 --> 00:02:56,400
you have any feedback we'd love to hear

85
00:02:56,400 --> 00:02:58,480
it

86
00:02:58,720 --> 00:03:01,840
hi my name is matt i am on a sibling

87
00:03:01,840 --> 00:03:03,599
team to david's on cloud security team

88
00:03:03,599 --> 00:03:05,519
at benchling prior to that i was at

89
00:03:05,519 --> 00:03:07,200
workkiva for

90
00:03:07,200 --> 00:03:08,560
nine-ish years i think and i've been

91
00:03:08,560 --> 00:03:10,879
around aws and security in aws for

92
00:03:10,879 --> 00:03:13,920
around the past decade

93
00:03:15,120 --> 00:03:16,879
to give you an idea of what today's talk

94
00:03:16,879 --> 00:03:18,480
is going to look like matt and i are

95
00:03:18,480 --> 00:03:20,080
going to set the stage for the problem

96
00:03:20,080 --> 00:03:21,760
we were trying to solve

97
00:03:21,760 --> 00:03:23,920
before our adventure started we're then

98
00:03:23,920 --> 00:03:25,280
going to walk you through exactly what

99
00:03:25,280 --> 00:03:26,959
our story was what we found what the

100
00:03:26,959 --> 00:03:29,040
problems were how we fixed it

101
00:03:29,040 --> 00:03:30,560
we're going to share some remediation

102
00:03:30,560 --> 00:03:32,400
paths for you as well in case you run

103
00:03:32,400 --> 00:03:33,920
into these same issues inside of your

104
00:03:33,920 --> 00:03:35,760
environment and at the very end we'll

105
00:03:35,760 --> 00:03:37,680
share some kind of closing thoughts and

106
00:03:37,680 --> 00:03:40,879
have some time for q a

107
00:03:42,720 --> 00:03:43,680
so

108
00:03:43,680 --> 00:03:45,599
first i want you to put yourself in my

109
00:03:45,599 --> 00:03:47,200
position as a cloud security engineer at

110
00:03:47,200 --> 00:03:49,280
benchling you're doing whatever tenured

111
00:03:49,280 --> 00:03:50,799
cloud security engineers do it's

112
00:03:50,799 --> 00:03:52,480
probably like reading hacker news

113
00:03:52,480 --> 00:03:54,080
finding who's wrong on the internet and

114
00:03:54,080 --> 00:03:55,519
correcting them

115
00:03:55,519 --> 00:03:57,439
and david comes along and sends you a

116
00:03:57,439 --> 00:03:58,720
message

117
00:03:58,720 --> 00:04:00,720
and says can you sanity check me on this

118
00:04:00,720 --> 00:04:02,000
and what you're hoping you get from

119
00:04:02,000 --> 00:04:05,280
david is something simple like one plus

120
00:04:05,280 --> 00:04:07,200
three equals four that's still true

121
00:04:07,200 --> 00:04:08,319
right

122
00:04:08,319 --> 00:04:11,200
but what you actually get from david is

123
00:04:11,200 --> 00:04:13,200
do you know if it's possible for objects

124
00:04:13,200 --> 00:04:15,280
to still be encrypted with a key that no

125
00:04:15,280 --> 00:04:16,959
longer exists

126
00:04:16,959 --> 00:04:19,120
and now you're like ah like i'm not

127
00:04:19,120 --> 00:04:20,238
going to do what i said i was going to

128
00:04:20,238 --> 00:04:22,160
do at stand up and this is going to be a

129
00:04:22,160 --> 00:04:23,199
whole day

130
00:04:23,199 --> 00:04:25,120
and you start to feel a little bit like

131
00:04:25,120 --> 00:04:26,800
our favorite guy here

132
00:04:26,800 --> 00:04:28,800
world's starting to burn down

133
00:04:28,800 --> 00:04:31,120
and we found ourselves in an interesting

134
00:04:31,120 --> 00:04:33,919
situation where we were unable to access

135
00:04:33,919 --> 00:04:35,600
network logs in an account that we

136
00:04:35,600 --> 00:04:36,800
needed to

137
00:04:36,800 --> 00:04:39,199
but before we get into that we need to

138
00:04:39,199 --> 00:04:40,400
give you a little bit of background on

139
00:04:40,400 --> 00:04:44,239
how some of these aws services interact

140
00:04:45,360 --> 00:04:46,560
so we're going to do a real quick

141
00:04:46,560 --> 00:04:48,800
refresher on how logging works inside of

142
00:04:48,800 --> 00:04:50,080
aws

143
00:04:50,080 --> 00:04:51,759
so there's a lot of different places

144
00:04:51,759 --> 00:04:53,440
where you can get visibility inside of

145
00:04:53,440 --> 00:04:56,080
your operations in aws so you can get

146
00:04:56,080 --> 00:04:57,840
things like network traffic through your

147
00:04:57,840 --> 00:05:00,400
vpc flow logs s3 server access logs

148
00:05:00,400 --> 00:05:02,160
control plane logs audit logs pretty

149
00:05:02,160 --> 00:05:03,759
much anything you need

150
00:05:03,759 --> 00:05:05,680
this is really awesome and one more

151
00:05:05,680 --> 00:05:07,919
benefit of this usability for customers

152
00:05:07,919 --> 00:05:09,840
is it's all managed by the vendor it's

153
00:05:09,840 --> 00:05:12,080
all managed by aws you don't need to run

154
00:05:12,080 --> 00:05:13,600
your own logging services you just kind

155
00:05:13,600 --> 00:05:14,560
of

156
00:05:14,560 --> 00:05:16,639
specify configuration which involves a

157
00:05:16,639 --> 00:05:18,479
destination where your logs should go

158
00:05:18,479 --> 00:05:20,000
and then things just kind of magically

159
00:05:20,000 --> 00:05:21,520
work on the back end for you so this is

160
00:05:21,520 --> 00:05:22,880
really really nice especially coming

161
00:05:22,880 --> 00:05:24,560
from a blue team side of things where

162
00:05:24,560 --> 00:05:25,520
you want to make sure you have the

163
00:05:25,520 --> 00:05:27,520
appropriate telemetry

164
00:05:27,520 --> 00:05:29,600
a common workflow for shipping these

165
00:05:29,600 --> 00:05:31,759
logs away is to put them in an s3 for

166
00:05:31,759 --> 00:05:34,000
long-term start storage from there you

167
00:05:34,000 --> 00:05:35,680
can ingest them in your sim of choice or

168
00:05:35,680 --> 00:05:36,880
just kind of keep them around for

169
00:05:36,880 --> 00:05:38,479
compliance reasons

170
00:05:38,479 --> 00:05:40,800
a very common workflow for these logs

171
00:05:40,800 --> 00:05:42,240
when you store them is to ensure that

172
00:05:42,240 --> 00:05:44,479
they're encrypted at rest some of these

173
00:05:44,479 --> 00:05:45,600
logs might be a little bit more

174
00:05:45,600 --> 00:05:47,199
sensitive such as your network traffic

175
00:05:47,199 --> 00:05:49,520
logs you may also have

176
00:05:49,520 --> 00:05:51,199
company requirements or compliance

177
00:05:51,199 --> 00:05:52,560
requirements to ensure that all of your

178
00:05:52,560 --> 00:05:54,800
data is securely stored at rest so very

179
00:05:54,800 --> 00:05:56,560
common workflow is to encrypt data when

180
00:05:56,560 --> 00:05:58,479
it lands in s3 especially for these

181
00:05:58,479 --> 00:06:01,280
logging services

182
00:06:01,680 --> 00:06:03,120
there's a couple of different ways you

183
00:06:03,120 --> 00:06:04,800
can encrypt your data when it gets into

184
00:06:04,800 --> 00:06:07,360
s3 of course you can probably do it on

185
00:06:07,360 --> 00:06:08,639
the client side inside of your

186
00:06:08,639 --> 00:06:10,720
application but this can be very time

187
00:06:10,720 --> 00:06:12,160
consuming and a little bit hard to

188
00:06:12,160 --> 00:06:13,120
manage

189
00:06:13,120 --> 00:06:14,800
so the common workflows and patterns

190
00:06:14,800 --> 00:06:16,400
we've seen actually involve just

191
00:06:16,400 --> 00:06:18,319
leveraging amazon services to do

192
00:06:18,319 --> 00:06:20,479
server-side encryption in s3

193
00:06:20,479 --> 00:06:21,360
and there's three different

194
00:06:21,360 --> 00:06:22,720
configurations that we're going to look

195
00:06:22,720 --> 00:06:23,840
at today

196
00:06:23,840 --> 00:06:26,560
the first is sse s3

197
00:06:26,560 --> 00:06:28,880
sse stands for server-side encryption

198
00:06:28,880 --> 00:06:30,800
and this is essentially kind of like

199
00:06:30,800 --> 00:06:33,520
your most basic setup you have a key

200
00:06:33,520 --> 00:06:36,400
that is lev that is managed by aws and

201
00:06:36,400 --> 00:06:38,880
managed by the aws s3 service you can't

202
00:06:38,880 --> 00:06:40,479
really do much in terms of controlling

203
00:06:40,479 --> 00:06:42,400
this key just kind of a lot of magic on

204
00:06:42,400 --> 00:06:43,840
the back end which is great if you want

205
00:06:43,840 --> 00:06:46,000
to get up and running and get started

206
00:06:46,000 --> 00:06:48,240
the second mode of operation is kms

207
00:06:48,240 --> 00:06:50,720
which is amazon's key management service

208
00:06:50,720 --> 00:06:52,400
in this scenario it's pretty similar to

209
00:06:52,400 --> 00:06:53,919
the first one but you do get a couple of

210
00:06:53,919 --> 00:06:56,639
benefits notably you can specify key

211
00:06:56,639 --> 00:06:58,479
rotation so you can set up automatic key

212
00:06:58,479 --> 00:07:01,280
rotation and you can also

213
00:07:01,280 --> 00:07:03,840
address your access policies so for

214
00:07:03,840 --> 00:07:06,160
instance if i create a custom kms key i

215
00:07:06,160 --> 00:07:07,759
can control who can access it whether

216
00:07:07,759 --> 00:07:09,520
it's inside of my account outside of my

217
00:07:09,520 --> 00:07:11,120
account whatever i want to do with it

218
00:07:11,120 --> 00:07:14,479
it's my to-do the last one is ssc that's

219
00:07:14,479 --> 00:07:16,160
kind of a mouthful we're not going to go

220
00:07:16,160 --> 00:07:18,319
into the details on this one in fact for

221
00:07:18,319 --> 00:07:20,080
this talk the only one we really need to

222
00:07:20,080 --> 00:07:22,319
focus on is the second configuration

223
00:07:22,319 --> 00:07:25,680
which is sse kms

224
00:07:26,319 --> 00:07:27,520
taking a closer look at this

225
00:07:27,520 --> 00:07:30,479
configuration you can specify which key

226
00:07:30,479 --> 00:07:31,759
you would like to use when you're

227
00:07:31,759 --> 00:07:33,520
configuring your bucket and there's

228
00:07:33,520 --> 00:07:35,840
really two paths forward here the first

229
00:07:35,840 --> 00:07:38,160
one is using a special key that aws

230
00:07:38,160 --> 00:07:40,080
provides for you inside of a customer's

231
00:07:40,080 --> 00:07:43,520
account this is amazon's aws slash s3

232
00:07:43,520 --> 00:07:45,360
key that's the alias that is used for

233
00:07:45,360 --> 00:07:47,440
the key and what it's literally called

234
00:07:47,440 --> 00:07:49,919
the thing about this key is it's fully

235
00:07:49,919 --> 00:07:52,720
managed by aws so there's an access

236
00:07:52,720 --> 00:07:54,639
policy that allows anything inside of

237
00:07:54,639 --> 00:07:57,039
your account to access this key

238
00:07:57,039 --> 00:07:59,360
you cannot modify this access policy so

239
00:07:59,360 --> 00:08:01,680
that means you cannot really scope it to

240
00:08:01,680 --> 00:08:03,199
certain applications inside of your

241
00:08:03,199 --> 00:08:04,960
account more importantly for the

242
00:08:04,960 --> 00:08:07,039
purposes of this talk you also can't

243
00:08:07,039 --> 00:08:08,800
share this key externally outside of

244
00:08:08,800 --> 00:08:10,080
your account

245
00:08:10,080 --> 00:08:12,560
the second option is to specify custom

246
00:08:12,560 --> 00:08:15,360
key inside of kms so as we just alluded

247
00:08:15,360 --> 00:08:17,360
to on the previous slide this is where

248
00:08:17,360 --> 00:08:19,520
both your key and your access policy are

249
00:08:19,520 --> 00:08:21,440
controllable by the customer

250
00:08:21,440 --> 00:08:23,599
we showed a screenshot there for exactly

251
00:08:23,599 --> 00:08:25,360
what it looks like if you were to try to

252
00:08:25,360 --> 00:08:27,440
configure this inside of the console you

253
00:08:27,440 --> 00:08:29,120
can see there's literally a key called

254
00:08:29,120 --> 00:08:31,680
aws managed key or you can provide your

255
00:08:31,680 --> 00:08:35,279
own and specify your configuration

256
00:08:35,919 --> 00:08:37,919
putting it all together we just wanted

257
00:08:37,919 --> 00:08:39,440
to show a visualization for what a

258
00:08:39,440 --> 00:08:41,599
reference architecture would look like

259
00:08:41,599 --> 00:08:44,320
i'm very sorry

260
00:08:48,160 --> 00:08:52,240
as a security practitioner to be happy

261
00:08:52,240 --> 00:08:55,760
just once there you go you can be happy

262
00:08:55,760 --> 00:08:57,440
okay thank you thank you very much i

263
00:08:57,440 --> 00:08:59,279
really appreciate it thank you i uh

264
00:08:59,279 --> 00:09:02,399
really appreciate you guys coming out

265
00:09:02,399 --> 00:09:03,440
thanks

266
00:09:03,440 --> 00:09:06,000
appreciate it

267
00:09:06,480 --> 00:09:09,279
what just happened

268
00:09:09,279 --> 00:09:11,680
and the show will go on um

269
00:09:11,680 --> 00:09:13,839
we have two different sides that we look

270
00:09:13,839 --> 00:09:16,399
at for these logging services so as with

271
00:09:16,399 --> 00:09:18,080
a shared responsibility model and

272
00:09:18,080 --> 00:09:20,240
leveraging cloud providers there's the

273
00:09:20,240 --> 00:09:21,760
cloud provider side of things and the

274
00:09:21,760 --> 00:09:24,080
customer side of things so with these

275
00:09:24,080 --> 00:09:26,560
logging services which are run by third

276
00:09:26,560 --> 00:09:27,920
party amazon

277
00:09:27,920 --> 00:09:29,360
they run in their own account and they

278
00:09:29,360 --> 00:09:30,720
have their own workflows and on the

279
00:09:30,720 --> 00:09:32,399
customer side on our right side we

280
00:09:32,399 --> 00:09:34,399
simply have the s3 bucket containing the

281
00:09:34,399 --> 00:09:36,399
destination and the encryption key that

282
00:09:36,399 --> 00:09:38,160
we want to specify

283
00:09:38,160 --> 00:09:39,600
so i've spent some time telling you

284
00:09:39,600 --> 00:09:41,600
about logs and i can tell abort someone

285
00:09:41,600 --> 00:09:42,959
because they literally came up and gave

286
00:09:42,959 --> 00:09:44,560
me a mask to tell me to stop talking

287
00:09:44,560 --> 00:09:45,519
about it

288
00:09:45,519 --> 00:09:47,040
so let's get back to the actual story of

289
00:09:47,040 --> 00:09:51,399
what we're here to listen to today

290
00:09:52,160 --> 00:09:53,839
so the problem that matt and i were

291
00:09:53,839 --> 00:09:56,480
originally tasked with is the joy of any

292
00:09:56,480 --> 00:09:58,720
security professional or in fact anyone

293
00:09:58,720 --> 00:10:01,200
who interacts with tech which is an

294
00:10:01,200 --> 00:10:02,640
integration plan

295
00:10:02,640 --> 00:10:04,959
so we ran into a situation where we were

296
00:10:04,959 --> 00:10:06,959
now the new custodians of a brand new

297
00:10:06,959 --> 00:10:09,200
aws organization which came with some

298
00:10:09,200 --> 00:10:10,480
child accounts

299
00:10:10,480 --> 00:10:12,160
and our job was to integrate this new

300
00:10:12,160 --> 00:10:13,760
infrastructure into our existing

301
00:10:13,760 --> 00:10:15,680
infrastructure of course nothing could

302
00:10:15,680 --> 00:10:17,440
ever go wrong in the situation so matt

303
00:10:17,440 --> 00:10:20,000
and i were really excited to get started

304
00:10:20,000 --> 00:10:22,079
as with most companies and security

305
00:10:22,079 --> 00:10:24,000
organizations out there you have a set

306
00:10:24,000 --> 00:10:25,120
of standards that you want your

307
00:10:25,120 --> 00:10:27,200
infrastructure to adhere to so something

308
00:10:27,200 --> 00:10:28,959
that was really important to us was to

309
00:10:28,959 --> 00:10:30,560
ensure that this new infrastructure we

310
00:10:30,560 --> 00:10:32,640
were now responsible for was meeting the

311
00:10:32,640 --> 00:10:34,480
bar for what we considered to be a high

312
00:10:34,480 --> 00:10:37,040
security posture for us internally

313
00:10:37,040 --> 00:10:38,959
we came up with a pretty straightforward

314
00:10:38,959 --> 00:10:40,480
integration plan

315
00:10:40,480 --> 00:10:42,160
the first thing that we wanted to do was

316
00:10:42,160 --> 00:10:44,000
ensure we could immediately understand

317
00:10:44,000 --> 00:10:45,279
what was happening inside of that

318
00:10:45,279 --> 00:10:47,279
account and for that we wanted to start

319
00:10:47,279 --> 00:10:49,120
collecting security telemetry and

320
00:10:49,120 --> 00:10:50,480
shipping it to our threat detection

321
00:10:50,480 --> 00:10:51,600
pipeline

322
00:10:51,600 --> 00:10:53,360
the second thing we wanted to do is just

323
00:10:53,360 --> 00:10:55,760
some gap analysis let's understand the

324
00:10:55,760 --> 00:10:57,600
new infrastructure that we're looking at

325
00:10:57,600 --> 00:10:59,120
and figure out the gaps for where we'd

326
00:10:59,120 --> 00:11:01,040
like that new infrastructure to be

327
00:11:01,040 --> 00:11:02,640
and the last step would just be working

328
00:11:02,640 --> 00:11:05,120
and coming together with a plan to

329
00:11:05,120 --> 00:11:06,880
resolve any findings and close the gaps

330
00:11:06,880 --> 00:11:08,880
over time

331
00:11:08,880 --> 00:11:10,880
as with any multi-step plan that you

332
00:11:10,880 --> 00:11:12,720
confidently present to your manager or

333
00:11:12,720 --> 00:11:15,279
to your teammates we got stuck on step

334
00:11:15,279 --> 00:11:17,040
one which was finding and adjusting the

335
00:11:17,040 --> 00:11:19,439
logs

336
00:11:19,839 --> 00:11:21,760
so the first log source that i went

337
00:11:21,760 --> 00:11:23,760
after was the network telemetry

338
00:11:23,760 --> 00:11:26,560
specifically this was the vpc flow logs

339
00:11:26,560 --> 00:11:28,079
and i acquired a role with all the

340
00:11:28,079 --> 00:11:30,240
appropriate permissions i had s3 read

341
00:11:30,240 --> 00:11:32,640
access to the scope bucket i could do

342
00:11:32,640 --> 00:11:34,160
pretty much whatever i needed to in that

343
00:11:34,160 --> 00:11:36,079
account there were really no

344
00:11:36,079 --> 00:11:38,000
restrictions and so i poked around i

345
00:11:38,000 --> 00:11:39,519
found where the data was being stored in

346
00:11:39,519 --> 00:11:41,680
s3 and i was like all right let's let's

347
00:11:41,680 --> 00:11:43,120
carve some network logs and figure out

348
00:11:43,120 --> 00:11:44,959
what's going on inside

349
00:11:44,959 --> 00:11:47,040
what happened at that point was

350
00:11:47,040 --> 00:11:48,959
the least favorite error message for me

351
00:11:48,959 --> 00:11:51,519
of all time which is in access denied

352
00:11:51,519 --> 00:11:53,440
and i was pretty confused but access

353
00:11:53,440 --> 00:11:55,839
denies are fairly common inside of aws

354
00:11:55,839 --> 00:11:57,519
usually you're missing a permission

355
00:11:57,519 --> 00:11:58,800
there's something you're not seeing it's

356
00:11:58,800 --> 00:12:00,000
totally fine

357
00:12:00,000 --> 00:12:02,240
but i double and i triple checked and i

358
00:12:02,240 --> 00:12:03,920
couldn't really figure out what was

359
00:12:03,920 --> 00:12:06,079
going wrong i had the permissions there

360
00:12:06,079 --> 00:12:08,079
were no explicit denies on the bucket

361
00:12:08,079 --> 00:12:10,240
resource policy i should be able to read

362
00:12:10,240 --> 00:12:12,480
the data that's inside of this bucket so

363
00:12:12,480 --> 00:12:14,560
i started kind of poking around because

364
00:12:14,560 --> 00:12:16,639
what else was suspicious is that i had

365
00:12:16,639 --> 00:12:19,040
access to list all of the objects and

366
00:12:19,040 --> 00:12:21,120
view all of their metadata i just

367
00:12:21,120 --> 00:12:24,079
couldn't fetch the actual objects myself

368
00:12:24,079 --> 00:12:25,600
so i noticed that the objects were all

369
00:12:25,600 --> 00:12:27,600
encrypted which when i initially saw

370
00:12:27,600 --> 00:12:30,320
this i thought was fantastic hey we are

371
00:12:30,320 --> 00:12:32,160
inheriting this new infrastructure

372
00:12:32,160 --> 00:12:33,760
clearly there's some pretty good access

373
00:12:33,760 --> 00:12:35,360
policies that are in place there's some

374
00:12:35,360 --> 00:12:37,040
good security practices that are being

375
00:12:37,040 --> 00:12:39,200
followed this is awesome

376
00:12:39,200 --> 00:12:41,279
um again it was a new account for me so

377
00:12:41,279 --> 00:12:43,279
i wasn't really familiar with the aws

378
00:12:43,279 --> 00:12:45,519
account ids at that point

379
00:12:45,519 --> 00:12:47,760
so when i tried clicking on that key

380
00:12:47,760 --> 00:12:49,839
i got another error message and it's

381
00:12:49,839 --> 00:12:51,120
kind of when i knew i was going to have

382
00:12:51,120 --> 00:12:53,519
a bad day so what's happening here is

383
00:12:53,519 --> 00:12:55,279
that if you click on that blue link

384
00:12:55,279 --> 00:12:56,560
that's hyperlinked in the second

385
00:12:56,560 --> 00:12:58,800
screenshot it will take you to the kms

386
00:12:58,800 --> 00:13:00,880
console and show you all the details for

387
00:13:00,880 --> 00:13:02,399
that relevant key

388
00:13:02,399 --> 00:13:04,639
however what was actually happening is

389
00:13:04,639 --> 00:13:06,800
that in the console it was taking the

390
00:13:06,800 --> 00:13:09,760
uuid from the key in the blue hyperlink

391
00:13:09,760 --> 00:13:11,680
appending that to the account that i was

392
00:13:11,680 --> 00:13:14,560
currently operating in and then issuing

393
00:13:14,560 --> 00:13:17,440
a described key operation

394
00:13:17,440 --> 00:13:19,120
but when this error popped up and

395
00:13:19,120 --> 00:13:20,399
actually took some time to read the

396
00:13:20,399 --> 00:13:22,560
error message i noticed that the account

397
00:13:22,560 --> 00:13:24,720
id which was specified on the object in

398
00:13:24,720 --> 00:13:26,880
the blue hyperlink was different from

399
00:13:26,880 --> 00:13:28,880
the account id that was specified in the

400
00:13:28,880 --> 00:13:30,480
red error message

401
00:13:30,480 --> 00:13:31,839
and this is when i started to get a

402
00:13:31,839 --> 00:13:34,480
little bit concerned

403
00:13:34,480 --> 00:13:36,480
rather than confidently moving on to my

404
00:13:36,480 --> 00:13:38,639
second step which i in writing put would

405
00:13:38,639 --> 00:13:41,440
be gap analysis i pivoted pretty quickly

406
00:13:41,440 --> 00:13:43,680
and went over into mild panic

407
00:13:43,680 --> 00:13:45,440
so the stage that i found myself at this

408
00:13:45,440 --> 00:13:48,240
time was objects are encrypted and for

409
00:13:48,240 --> 00:13:50,320
some reason i cannot access the key to

410
00:13:50,320 --> 00:13:51,839
decrypt them

411
00:13:51,839 --> 00:13:54,320
also the key arn and the account id

412
00:13:54,320 --> 00:13:56,560
inside of the arn was for an account

413
00:13:56,560 --> 00:13:59,360
that i had no idea you know where it was

414
00:13:59,360 --> 00:14:01,360
or who owned it

415
00:14:01,360 --> 00:14:02,800
so i started thinking of worst case

416
00:14:02,800 --> 00:14:04,320
scenarios and what could be happening

417
00:14:04,320 --> 00:14:05,279
here

418
00:14:05,279 --> 00:14:06,959
first i started off pretty rationally

419
00:14:06,959 --> 00:14:09,279
and i said hey this is an integration

420
00:14:09,279 --> 00:14:10,800
there is some leftover infrastructure

421
00:14:10,800 --> 00:14:12,720
somebody forgot to mention there's a

422
00:14:12,720 --> 00:14:14,079
really good reason for this we just have

423
00:14:14,079 --> 00:14:16,480
to do some more digging and find it then

424
00:14:16,480 --> 00:14:18,079
i went to the other side of the spectrum

425
00:14:18,079 --> 00:14:19,279
and said wait

426
00:14:19,279 --> 00:14:20,880
what if this is some brand new

427
00:14:20,880 --> 00:14:23,680
half-baked cloud-based ransomware where

428
00:14:23,680 --> 00:14:25,440
someone had compromised this account and

429
00:14:25,440 --> 00:14:27,279
decided to just start encrypting all of

430
00:14:27,279 --> 00:14:29,120
the data inside of it whatever it was

431
00:14:29,120 --> 00:14:31,760
audit logs network logs etc

432
00:14:31,760 --> 00:14:33,279
and then i also worry that maybe the

433
00:14:33,279 --> 00:14:35,120
bucket apples were just misconfigured so

434
00:14:35,120 --> 00:14:37,440
someone was having a joke or

435
00:14:37,440 --> 00:14:39,279
writing into the wrong bucket and just

436
00:14:39,279 --> 00:14:41,199
use encrypting with their key instead of

437
00:14:41,199 --> 00:14:43,760
anything that we had owned

438
00:14:43,760 --> 00:14:45,279
it was at this point in time where i

439
00:14:45,279 --> 00:14:47,120
decided it was time to ruin matt's day

440
00:14:47,120 --> 00:14:49,120
as well and i sent the slack message

441
00:14:49,120 --> 00:14:52,639
which kicked off our investigation

442
00:14:52,720 --> 00:14:54,480
so matt and i spent some time going back

443
00:14:54,480 --> 00:14:56,880
and forth i really wanted him to sanity

444
00:14:56,880 --> 00:14:58,480
check me and make sure we were all on

445
00:14:58,480 --> 00:15:00,480
the same page of what's going on so we

446
00:15:00,480 --> 00:15:01,839
came up with a couple of questions to

447
00:15:01,839 --> 00:15:03,839
kind of drive our investigation

448
00:15:03,839 --> 00:15:06,079
the first obviously whose key is being

449
00:15:06,079 --> 00:15:07,839
used to encrypt our logs

450
00:15:07,839 --> 00:15:09,760
we also wanted to know whose account

451
00:15:09,760 --> 00:15:11,680
this key was present in

452
00:15:11,680 --> 00:15:13,360
we wanted really wanted to figure out

453
00:15:13,360 --> 00:15:14,880
how these logs are being encrypted

454
00:15:14,880 --> 00:15:16,320
because clearly there's some sort of

455
00:15:16,320 --> 00:15:18,639
process which consistently over time has

456
00:15:18,639 --> 00:15:20,480
purposefully been writing these logs

457
00:15:20,480 --> 00:15:22,800
into this s3 bucket and also taking the

458
00:15:22,800 --> 00:15:24,320
time to encrypt them

459
00:15:24,320 --> 00:15:26,880
and last but definitely not least we

460
00:15:26,880 --> 00:15:28,639
really need this network telemetry to

461
00:15:28,639 --> 00:15:30,000
figure out what's going on inside of

462
00:15:30,000 --> 00:15:34,480
this account how do we decrypt this data

463
00:15:35,199 --> 00:15:37,279
our plan of attack uh consists of a

464
00:15:37,279 --> 00:15:39,680
couple of steps first pretty basic what

465
00:15:39,680 --> 00:15:41,279
are these account ids

466
00:15:41,279 --> 00:15:42,639
the second thing we really wanted to

467
00:15:42,639 --> 00:15:44,560
understand was tearing apart the bucket

468
00:15:44,560 --> 00:15:46,560
configuration how is the bucket

469
00:15:46,560 --> 00:15:48,480
configured let's double and triple check

470
00:15:48,480 --> 00:15:50,399
the encryption settings let's double and

471
00:15:50,399 --> 00:15:52,240
triple check the bucket hackles we

472
00:15:52,240 --> 00:15:53,759
really wanted to get an idea for what

473
00:15:53,759 --> 00:15:55,440
this bucket was being used for and how

474
00:15:55,440 --> 00:15:57,519
it could be getting into the state

475
00:15:57,519 --> 00:15:59,360
we wanted to be able to reproduce this

476
00:15:59,360 --> 00:16:01,279
behavior so we could confidently state

477
00:16:01,279 --> 00:16:02,800
hey this is what's happening and this is

478
00:16:02,800 --> 00:16:04,399
how we can prevent it from happening any

479
00:16:04,399 --> 00:16:05,600
longer

480
00:16:05,600 --> 00:16:07,360
if these kind of three initial first

481
00:16:07,360 --> 00:16:08,959
steps didn't get us to where we wanted

482
00:16:08,959 --> 00:16:10,800
to go we were going to open a formal

483
00:16:10,800 --> 00:16:12,800
security investigation and start tearing

484
00:16:12,800 --> 00:16:14,560
apart the cloudtrail logs for evidence

485
00:16:14,560 --> 00:16:17,839
of any suspicious activity

486
00:16:20,320 --> 00:16:22,399
so as part of step one

487
00:16:22,399 --> 00:16:24,560
whose key is this

488
00:16:24,560 --> 00:16:26,000
you know you do what you

489
00:16:26,000 --> 00:16:27,519
can with any string you've never seen

490
00:16:27,519 --> 00:16:29,040
before like david already talked about

491
00:16:29,040 --> 00:16:30,880
we'd already seen or we'd already

492
00:16:30,880 --> 00:16:33,759
checked all the places that we expect uh

493
00:16:33,759 --> 00:16:36,079
aws account numbers to be this wasn't in

494
00:16:36,079 --> 00:16:38,160
any of them so i googled the thing and i

495
00:16:38,160 --> 00:16:39,680
got the best result you ever get out of

496
00:16:39,680 --> 00:16:41,920
google which is zero results so this

497
00:16:41,920 --> 00:16:44,079
only pushed us further down the well if

498
00:16:44,079 --> 00:16:46,079
it's unknown you know maybe it's still

499
00:16:46,079 --> 00:16:48,480
kind of our thing maybe it's something

500
00:16:48,480 --> 00:16:50,079
that's not really well known which you

501
00:16:50,079 --> 00:16:50,800
know

502
00:16:50,800 --> 00:16:52,240
it doesn't give me a good feeling so you

503
00:16:52,240 --> 00:16:54,639
feel like oh no guy there

504
00:16:54,639 --> 00:16:56,240
um because i didn't get anything good

505
00:16:56,240 --> 00:16:57,519
out of this

506
00:16:57,519 --> 00:17:00,399
i moved on to all right well let's just

507
00:17:00,399 --> 00:17:02,399
click on it let's just check the bucket

508
00:17:02,399 --> 00:17:04,880
in the console and see what it says

509
00:17:04,880 --> 00:17:06,559
and it looked like this and if anybody

510
00:17:06,559 --> 00:17:08,720
has ever spent time in the aws console

511
00:17:08,720 --> 00:17:11,119
looking at encryption configurations for

512
00:17:11,119 --> 00:17:12,880
buckets this is what they look like and

513
00:17:12,880 --> 00:17:16,240
the thing to see is that there is not

514
00:17:16,240 --> 00:17:19,599
a string present in the aws kms key arn

515
00:17:19,599 --> 00:17:20,559
space

516
00:17:20,559 --> 00:17:21,439
if

517
00:17:21,439 --> 00:17:24,079
things are configured on the bucket and

518
00:17:24,079 --> 00:17:26,079
it's quote unquote proper

519
00:17:26,079 --> 00:17:27,839
you will see a key populated there

520
00:17:27,839 --> 00:17:29,360
saying what it's going to encrypt things

521
00:17:29,360 --> 00:17:30,160
with

522
00:17:30,160 --> 00:17:31,919
there's some nuance in that but that's

523
00:17:31,919 --> 00:17:34,080
the gist of it um

524
00:17:34,080 --> 00:17:35,039
so

525
00:17:35,039 --> 00:17:36,720
we found this and we're like oh the

526
00:17:36,720 --> 00:17:38,640
console's showing something weird like

527
00:17:38,640 --> 00:17:40,799
is it buggy is there is there something

528
00:17:40,799 --> 00:17:42,799
wrong like this puts us more on the side

529
00:17:42,799 --> 00:17:43,840
of like what

530
00:17:43,840 --> 00:17:45,760
what do we do okay so we go to the cli

531
00:17:45,760 --> 00:17:46,960
let's pull that

532
00:17:46,960 --> 00:17:48,320
so we hit

533
00:17:48,320 --> 00:17:50,640
the cli with a get bucket encryption and

534
00:17:50,640 --> 00:17:52,720
it kicks back this json which might be a

535
00:17:52,720 --> 00:17:54,480
little hard to read in the back but the

536
00:17:54,480 --> 00:17:56,320
thing to point out here is that you can

537
00:17:56,320 --> 00:17:58,960
see that aws kms is the algorithm that's

538
00:17:58,960 --> 00:18:02,240
set but there is no line for what the

539
00:18:02,240 --> 00:18:05,200
key arn should be to encrypt things with

540
00:18:05,200 --> 00:18:07,520
and this is a completely valid bucket

541
00:18:07,520 --> 00:18:09,520
configuration it just implicitly means

542
00:18:09,520 --> 00:18:12,400
what david said which is the um the uh

543
00:18:12,400 --> 00:18:16,000
the alias aws s3 key

544
00:18:16,000 --> 00:18:17,840
and we actually flipped this and said

545
00:18:17,840 --> 00:18:20,080
okay maybe we can morph this

546
00:18:20,080 --> 00:18:22,640
data that we just got into

547
00:18:22,640 --> 00:18:24,960
getting into that replication mode so we

548
00:18:24,960 --> 00:18:27,039
just took this changed it to a put

549
00:18:27,039 --> 00:18:29,679
bucket encryption and gave it this json

550
00:18:29,679 --> 00:18:31,600
and it applied just fine which confirmed

551
00:18:31,600 --> 00:18:33,280
what we already thought which was this

552
00:18:33,280 --> 00:18:35,760
is a valid bucket configuration to be in

553
00:18:35,760 --> 00:18:38,880
so then i moved on to

554
00:18:38,880 --> 00:18:40,720
let's see if i can fully reproduce this

555
00:18:40,720 --> 00:18:43,120
so this is just a screenshot showing my

556
00:18:43,120 --> 00:18:44,960
madness at david because i was up until

557
00:18:44,960 --> 00:18:46,480
like three in the morning waiting for

558
00:18:46,480 --> 00:18:50,000
claude cloudtrail logs to write

559
00:18:50,000 --> 00:18:51,840
twisting you know all the knobs and

560
00:18:51,840 --> 00:18:53,360
pushing all the buttons that you have

561
00:18:53,360 --> 00:18:54,880
between those two services just to see

562
00:18:54,880 --> 00:18:57,360
what would happen

563
00:18:57,360 --> 00:18:58,960
and

564
00:18:58,960 --> 00:19:01,039
as part of that

565
00:19:01,039 --> 00:19:04,400
it the aws service spit out or we got in

566
00:19:04,400 --> 00:19:06,080
a log somewhere

567
00:19:06,080 --> 00:19:09,200
a new arn that we had never found before

568
00:19:09,200 --> 00:19:10,960
and i just hoped that this one would

569
00:19:10,960 --> 00:19:14,160
show up somewhere so i googled this one

570
00:19:14,160 --> 00:19:16,960
and it did in one result which is

571
00:19:16,960 --> 00:19:19,280
infinitely or however that maths out

572
00:19:19,280 --> 00:19:21,520
from zero

573
00:19:21,520 --> 00:19:24,080
and it was somebody on reddit asking a

574
00:19:24,080 --> 00:19:26,240
question completely unrelated to

575
00:19:26,240 --> 00:19:29,280
encryption keys but what shook out

576
00:19:29,280 --> 00:19:32,799
was is that this account id

577
00:19:32,799 --> 00:19:36,080
is owned by amazon and used to run

578
00:19:36,080 --> 00:19:37,520
their

579
00:19:37,520 --> 00:19:39,679
logging services out of so that's what

580
00:19:39,679 --> 00:19:41,760
we were seeing so this is the first

581
00:19:41,760 --> 00:19:43,120
point for us

582
00:19:43,120 --> 00:19:45,280
where we were like able to dump the did

583
00:19:45,280 --> 00:19:47,120
we screw something bad up like do we

584
00:19:47,120 --> 00:19:48,799
have shadow infrastructure and started

585
00:19:48,799 --> 00:19:51,120
to move on to

586
00:19:51,120 --> 00:19:53,200
all right maybe this is amazon's service

587
00:19:53,200 --> 00:19:56,640
is interacting in a weird way

588
00:20:01,039 --> 00:20:03,120
so thanks to matt's

589
00:20:03,120 --> 00:20:05,520
3am adventure which i felt really really

590
00:20:05,520 --> 00:20:08,000
bad about because i was fast asleep but

591
00:20:08,000 --> 00:20:09,520
also he didn't quite tell me he was

592
00:20:09,520 --> 00:20:10,720
going to do that so i didn't feel too

593
00:20:10,720 --> 00:20:11,600
bad

594
00:20:11,600 --> 00:20:13,120
but more than anything i felt really

595
00:20:13,120 --> 00:20:14,720
really excited because now we had a

596
00:20:14,720 --> 00:20:17,039
working path forward we were able to

597
00:20:17,039 --> 00:20:19,280
figure out that hey this a can id that

598
00:20:19,280 --> 00:20:21,200
was being used probably belongs to

599
00:20:21,200 --> 00:20:24,000
amazon but most importantly matt through

600
00:20:24,000 --> 00:20:26,240
his hard work was able to reproduce the

601
00:20:26,240 --> 00:20:28,320
exact conditions in order to trigger

602
00:20:28,320 --> 00:20:30,640
this behavior where you have data inside

603
00:20:30,640 --> 00:20:32,960
of your bucket encrypted with a key that

604
00:20:32,960 --> 00:20:34,799
you did not configure and that you don't

605
00:20:34,799 --> 00:20:36,159
have access to

606
00:20:36,159 --> 00:20:38,159
so the conditions are three-fold the

607
00:20:38,159 --> 00:20:41,200
first is leveraging ssc kms encryption

608
00:20:41,200 --> 00:20:43,280
again this is the second encryption

609
00:20:43,280 --> 00:20:44,880
mechanism that we outlined at the start

610
00:20:44,880 --> 00:20:46,559
of this presentation and the one that we

611
00:20:46,559 --> 00:20:48,720
focused on a little bit more

612
00:20:48,720 --> 00:20:51,120
the second correlates to the output of

613
00:20:51,120 --> 00:20:52,799
the get bucket encryption calls that

614
00:20:52,799 --> 00:20:54,960
matt showed you where the kms key was

615
00:20:54,960 --> 00:20:57,120
missing so the second condition is the

616
00:20:57,120 --> 00:20:59,840
kms key is not specified

617
00:20:59,840 --> 00:21:02,240
this means that it implicitly defaults

618
00:21:02,240 --> 00:21:05,360
to leveraging that special aws s3 key

619
00:21:05,360 --> 00:21:06,799
which we outlined at the beginning of

620
00:21:06,799 --> 00:21:09,600
this presentation if you recall this is

621
00:21:09,600 --> 00:21:12,080
a key that is fully owned by amazon and

622
00:21:12,080 --> 00:21:14,480
it comes with a trust policy that you

623
00:21:14,480 --> 00:21:16,400
cannot control as a customer

624
00:21:16,400 --> 00:21:18,720
again this trust policy does not let you

625
00:21:18,720 --> 00:21:20,640
access this key from outside of your own

626
00:21:20,640 --> 00:21:22,400
account

627
00:21:22,400 --> 00:21:24,480
on its own so far these first two steps

628
00:21:24,480 --> 00:21:26,880
are still okay in fact if you're running

629
00:21:26,880 --> 00:21:28,880
services inside of your account things

630
00:21:28,880 --> 00:21:30,720
will just kind of work as is because if

631
00:21:30,720 --> 00:21:32,240
you have a log writer inside of your

632
00:21:32,240 --> 00:21:34,480
account it's able to access this key

633
00:21:34,480 --> 00:21:36,159
everything looks okay

634
00:21:36,159 --> 00:21:37,760
the thing that tips the scales is when

635
00:21:37,760 --> 00:21:40,480
you consider when you configure an aws

636
00:21:40,480 --> 00:21:43,280
logging service or an external writer to

637
00:21:43,280 --> 00:21:46,159
start writing to your bucket

638
00:21:46,159 --> 00:21:48,159
so really highlighting the fact that the

639
00:21:48,159 --> 00:21:50,240
first two conditions are completely

640
00:21:50,240 --> 00:21:53,200
valid now granted it's probably a weird

641
00:21:53,200 --> 00:21:55,360
scenario where you're specifying a kms

642
00:21:55,360 --> 00:21:57,200
encryption configuration and not

643
00:21:57,200 --> 00:21:59,600
specifying a kms key but it's still

644
00:21:59,600 --> 00:22:02,000
accepted and there's no api errors so

645
00:22:02,000 --> 00:22:03,280
these two things on their own are

646
00:22:03,280 --> 00:22:04,960
completely fine

647
00:22:04,960 --> 00:22:06,559
but you start to have a bad day like

648
00:22:06,559 --> 00:22:08,080
matt and i did when you combine that

649
00:22:08,080 --> 00:22:11,280
third facet which is the log rider

650
00:22:11,280 --> 00:22:13,280
so we've kind of understood how these

651
00:22:13,280 --> 00:22:15,440
conditions come into place but let's

652
00:22:15,440 --> 00:22:17,200
walk through a step-by-step example so

653
00:22:17,200 --> 00:22:19,679
we can see how this works

654
00:22:19,679 --> 00:22:20,559
so

655
00:22:20,559 --> 00:22:22,960
one precursor we want to say is matt and

656
00:22:22,960 --> 00:22:25,280
i do not work for aws

657
00:22:25,280 --> 00:22:26,960
we don't actually know how these things

658
00:22:26,960 --> 00:22:29,440
work on the back end we know the s3

659
00:22:29,440 --> 00:22:31,280
encryption and decryption operations are

660
00:22:31,280 --> 00:22:32,880
a lot more complicated than what's on

661
00:22:32,880 --> 00:22:34,080
this diagram

662
00:22:34,080 --> 00:22:35,600
however for the purposes of this

663
00:22:35,600 --> 00:22:37,280
presentation to kind of illustrate what

664
00:22:37,280 --> 00:22:39,200
was happening we're really simplifying

665
00:22:39,200 --> 00:22:41,200
things and showing you this diagram so

666
00:22:41,200 --> 00:22:43,039
the flow is the same but this is not you

667
00:22:43,039 --> 00:22:46,320
know a accurate technical diagram

668
00:22:46,320 --> 00:22:48,240
so the first thing that happens is again

669
00:22:48,240 --> 00:22:50,400
we go back to our original diagram for

670
00:22:50,400 --> 00:22:53,440
the aws log writer on the left side you

671
00:22:53,440 --> 00:22:55,840
have the aws managed service and on the

672
00:22:55,840 --> 00:22:57,440
right side you have the customer

673
00:22:57,440 --> 00:22:59,440
configuration where you have a log

674
00:22:59,440 --> 00:23:01,679
bucket to store your locks you have an

675
00:23:01,679 --> 00:23:03,919
encryption configuration and you have an

676
00:23:03,919 --> 00:23:05,520
encryption key

677
00:23:05,520 --> 00:23:07,360
the first thing that happens is your log

678
00:23:07,360 --> 00:23:09,600
writer generates a log maybe you have

679
00:23:09,600 --> 00:23:11,760
some network traffic that came in it

680
00:23:11,760 --> 00:23:13,919
dutifully does its job and decides that

681
00:23:13,919 --> 00:23:16,080
it's going to write it to your bucket

682
00:23:16,080 --> 00:23:17,760
so the first thing is that the writer

683
00:23:17,760 --> 00:23:19,840
reads the encryption configuration to

684
00:23:19,840 --> 00:23:21,280
figure out how this data should be

685
00:23:21,280 --> 00:23:23,600
encrypted

686
00:23:23,600 --> 00:23:26,640
now recall that with this ssc kms

687
00:23:26,640 --> 00:23:29,520
configuration that is missing a key

688
00:23:29,520 --> 00:23:32,080
this defaults to using that a special

689
00:23:32,080 --> 00:23:35,360
aws s3 key which is not accessible

690
00:23:35,360 --> 00:23:38,400
outside of the customer managed account

691
00:23:38,400 --> 00:23:40,080
at this point in time is when we start

692
00:23:40,080 --> 00:23:41,840
to get in a scenario that's a little bit

693
00:23:41,840 --> 00:23:43,120
unexpected

694
00:23:43,120 --> 00:23:45,600
in my experience and matt's experience

695
00:23:45,600 --> 00:23:48,240
inside of aws usually when you have you

696
00:23:48,240 --> 00:23:50,400
know log riders or operations that

697
00:23:50,400 --> 00:23:52,799
interact with encryption or decryption

698
00:23:52,799 --> 00:23:54,320
or even if there's just an issue with

699
00:23:54,320 --> 00:23:56,880
permissions the failure mode is that the

700
00:23:56,880 --> 00:23:58,640
operation aborts

701
00:23:58,640 --> 00:24:01,039
so what we expected to see here was that

702
00:24:01,039 --> 00:24:03,360
this call would error out because the

703
00:24:03,360 --> 00:24:05,200
encryption configuration was a little

704
00:24:05,200 --> 00:24:07,279
off and that no logs would end up being

705
00:24:07,279 --> 00:24:09,120
in the bucket

706
00:24:09,120 --> 00:24:11,840
however at this point in time the log

707
00:24:11,840 --> 00:24:13,919
writer actually ends up fetching its own

708
00:24:13,919 --> 00:24:17,200
encryption key inside of its own account

709
00:24:17,200 --> 00:24:19,360
and note that this key as illustrated in

710
00:24:19,360 --> 00:24:21,840
the diagram is not owned by the customer

711
00:24:21,840 --> 00:24:23,919
is not specified by the customer and is

712
00:24:23,919 --> 00:24:25,919
not accessible by the customer account

713
00:24:25,919 --> 00:24:26,960
either

714
00:24:26,960 --> 00:24:29,840
after this happens this key is used to

715
00:24:29,840 --> 00:24:32,480
encrypt the object and it ends up

716
00:24:32,480 --> 00:24:34,799
getting written to the bucket so at this

717
00:24:34,799 --> 00:24:36,559
point in time after these four steps

718
00:24:36,559 --> 00:24:38,640
again you're left in a scenario where

719
00:24:38,640 --> 00:24:41,039
your log data is encrypted with a key

720
00:24:41,039 --> 00:24:43,200
that you can control and you do not have

721
00:24:43,200 --> 00:24:46,520
access to

722
00:24:47,039 --> 00:24:49,120
so let's take a couple steps back and go

723
00:24:49,120 --> 00:24:50,799
back to the initial questions we had at

724
00:24:50,799 --> 00:24:52,799
the start of our investigation we've

725
00:24:52,799 --> 00:24:54,240
learned a little bit more as we've gone

726
00:24:54,240 --> 00:24:56,400
along so we now are able to answer whose

727
00:24:56,400 --> 00:24:58,640
key was being used to encrypt our logs

728
00:24:58,640 --> 00:25:00,480
as well as whose account it was it was

729
00:25:00,480 --> 00:25:02,799
an aws thing that was happening we were

730
00:25:02,799 --> 00:25:04,640
able to figure out how these logs were

731
00:25:04,640 --> 00:25:06,480
being encrypted through the four-step

732
00:25:06,480 --> 00:25:08,799
diagram we just went through together

733
00:25:08,799 --> 00:25:10,960
but we're still faced with that last but

734
00:25:10,960 --> 00:25:12,640
not least question

735
00:25:12,640 --> 00:25:16,240
of how do we decrypt our logs

736
00:25:16,559 --> 00:25:19,279
so at this point in time we became fully

737
00:25:19,279 --> 00:25:22,320
dependent on our provider so again the

738
00:25:22,320 --> 00:25:24,799
key doesn't live in our account we don't

739
00:25:24,799 --> 00:25:26,720
know how to get access to this key the

740
00:25:26,720 --> 00:25:28,240
only thing we could do was engage our

741
00:25:28,240 --> 00:25:30,240
appropriate channels through support and

742
00:25:30,240 --> 00:25:31,840
work with aws to try to find a

743
00:25:31,840 --> 00:25:33,039
resolution

744
00:25:33,039 --> 00:25:35,520
we were able to succeed with aws's help

745
00:25:35,520 --> 00:25:37,120
and they were very responsive in helping

746
00:25:37,120 --> 00:25:39,600
us get our data back which was great

747
00:25:39,600 --> 00:25:41,279
but a question that matt and i wanted to

748
00:25:41,279 --> 00:25:43,360
kind of ask is what if we were in the

749
00:25:43,360 --> 00:25:45,200
middle of an incident or a critical

750
00:25:45,200 --> 00:25:47,279
security investigation

751
00:25:47,279 --> 00:25:48,880
usually when you're running some sort of

752
00:25:48,880 --> 00:25:50,320
security investigation you have

753
00:25:50,320 --> 00:25:52,080
questions that you need answers to as

754
00:25:52,080 --> 00:25:54,320
soon as you can possibly get them

755
00:25:54,320 --> 00:25:56,320
but in this scenario if you're dependent

756
00:25:56,320 --> 00:25:58,799
on someone else to get your data for you

757
00:25:58,799 --> 00:26:00,559
you put yourself in a situation where

758
00:26:00,559 --> 00:26:01,840
you can't really control your own

759
00:26:01,840 --> 00:26:03,919
destiny anymore and you're subject to

760
00:26:03,919 --> 00:26:05,919
the slas of whatever hosting provider

761
00:26:05,919 --> 00:26:08,480
you're using

762
00:26:08,559 --> 00:26:10,240
so matt and i spent a lot of time on

763
00:26:10,240 --> 00:26:12,240
this more than we probably care to admit

764
00:26:12,240 --> 00:26:14,080
and we decided that we didn't really

765
00:26:14,080 --> 00:26:15,919
want to deal with this anymore

766
00:26:15,919 --> 00:26:18,400
so we put together some things on how

767
00:26:18,400 --> 00:26:19,679
you can look for this inside of your

768
00:26:19,679 --> 00:26:21,360
environment and how you can prevent it

769
00:26:21,360 --> 00:26:22,799
from happening so it doesn't happen to

770
00:26:22,799 --> 00:26:25,840
us or you again

771
00:26:27,679 --> 00:26:29,600
all right so as part of like how do we

772
00:26:29,600 --> 00:26:31,360
find this in our environment one of the

773
00:26:31,360 --> 00:26:32,880
first things that we wanted to do was

774
00:26:32,880 --> 00:26:36,159
just like inventory like how

775
00:26:36,159 --> 00:26:38,640
the other like the cli the aws api how

776
00:26:38,640 --> 00:26:40,320
does terraform treat this how does cloud

777
00:26:40,320 --> 00:26:41,919
formation treat this

778
00:26:41,919 --> 00:26:43,360
the big takeaway from this is that

779
00:26:43,360 --> 00:26:46,080
everything is this the the uh the aws

780
00:26:46,080 --> 00:26:49,039
key arn is optional it it's not required

781
00:26:49,039 --> 00:26:51,440
on anything if that for the first bullet

782
00:26:51,440 --> 00:26:53,919
shows you or just tells you that it will

783
00:26:53,919 --> 00:26:56,400
use an implicit aws s3 if you don't

784
00:26:56,400 --> 00:26:58,480
configure anything point is

785
00:26:58,480 --> 00:26:59,600
optional

786
00:26:59,600 --> 00:27:00,480
so

787
00:27:00,480 --> 00:27:02,640
i want to show you how like easy this is

788
00:27:02,640 --> 00:27:04,720
to miss in prs that might be coming

789
00:27:04,720 --> 00:27:06,240
through if you're a possible security

790
00:27:06,240 --> 00:27:08,159
reviewer like here's an example of

791
00:27:08,159 --> 00:27:10,480
terraform this is configuring a bucket

792
00:27:10,480 --> 00:27:12,159
for kms encryption

793
00:27:12,159 --> 00:27:15,600
and the thing to point out is right here

794
00:27:15,600 --> 00:27:18,720
kms encryption is configured there's no

795
00:27:18,720 --> 00:27:21,600
um key arn specified

796
00:27:21,600 --> 00:27:23,440
but if you're just like you know you how

797
00:27:23,440 --> 00:27:25,120
many pr's do you look at possibly in a

798
00:27:25,120 --> 00:27:26,640
day if you're just glossing through

799
00:27:26,640 --> 00:27:27,919
stuff

800
00:27:27,919 --> 00:27:28,640
as

801
00:27:28,640 --> 00:27:30,559
a general security like

802
00:27:30,559 --> 00:27:32,640
yeah anyway you're you come to this and

803
00:27:32,640 --> 00:27:34,720
you go that looks great they used

804
00:27:34,720 --> 00:27:36,720
encryption that's better than like we

805
00:27:36,720 --> 00:27:39,120
could often hope for right like pass it

806
00:27:39,120 --> 00:27:42,880
on and it looks the same in cloud

807
00:27:42,880 --> 00:27:45,039
formation it's very very similar

808
00:27:45,039 --> 00:27:48,640
and if you end up looking at the cdk

809
00:27:48,640 --> 00:27:50,559
it's even more abstracted so it would be

810
00:27:50,559 --> 00:27:52,240
even harder to find unless you're

811
00:27:52,240 --> 00:27:54,480
specifically looking for this scenario

812
00:27:54,480 --> 00:27:56,320
or you have like policies on the books

813
00:27:56,320 --> 00:27:57,600
that say

814
00:27:57,600 --> 00:27:59,679
kms keys must be custom and like they

815
00:27:59,679 --> 00:28:01,120
must be specified and you do some

816
00:28:01,120 --> 00:28:02,480
advanced checks which we're going to get

817
00:28:02,480 --> 00:28:04,240
into

818
00:28:04,240 --> 00:28:06,399
point being this is all very easy to

819
00:28:06,399 --> 00:28:07,279
miss

820
00:28:07,279 --> 00:28:08,720
so

821
00:28:08,720 --> 00:28:10,399
if you can't trust your eyes to look at

822
00:28:10,399 --> 00:28:13,039
it how do you actually find this stuff

823
00:28:13,039 --> 00:28:14,399
and

824
00:28:14,399 --> 00:28:15,919
it depends on the state of your aws

825
00:28:15,919 --> 00:28:18,000
inventory so when we were in that panic

826
00:28:18,000 --> 00:28:20,559
mode of like let's find everything we

827
00:28:20,559 --> 00:28:22,880
have that looks this way

828
00:28:22,880 --> 00:28:24,320
what we ended up doing was just i think

829
00:28:24,320 --> 00:28:26,000
because i had a github window open i

830
00:28:26,000 --> 00:28:27,520
just searched for the syntax i know that

831
00:28:27,520 --> 00:28:30,000
i was looking for and found all the

832
00:28:30,000 --> 00:28:31,679
buckets that were configured that way

833
00:28:31,679 --> 00:28:33,520
listed them out that way but you could

834
00:28:33,520 --> 00:28:36,480
do stuff like aws config data cloud

835
00:28:36,480 --> 00:28:38,799
trail you could even brute force it with

836
00:28:38,799 --> 00:28:40,960
get bucket encryption calls but if your

837
00:28:40,960 --> 00:28:42,320
environment's large it's not going to

838
00:28:42,320 --> 00:28:45,360
scale very well

839
00:28:45,360 --> 00:28:47,279
but that's a bunch of ad hoc stuff let's

840
00:28:47,279 --> 00:28:49,440
do something more advanced with

841
00:28:49,440 --> 00:28:51,760
some more tooling so you could do

842
00:28:51,760 --> 00:28:53,760
something with your static analysis

843
00:28:53,760 --> 00:28:56,640
infrastructure's code tool of choice

844
00:28:56,640 --> 00:28:58,799
and this is actually an example of that

845
00:28:58,799 --> 00:29:01,600
down there it's this is uh rigo

846
00:29:01,600 --> 00:29:03,120
opa if you've ever written this language

847
00:29:03,120 --> 00:29:06,399
it's both fun and terrible um

848
00:29:06,399 --> 00:29:09,360
this will search for a bucket that is

849
00:29:09,360 --> 00:29:11,440
configured this way um and then you have

850
00:29:11,440 --> 00:29:13,039
to go do your own investigation on like

851
00:29:13,039 --> 00:29:14,559
do i have a logging service interacted

852
00:29:14,559 --> 00:29:15,679
with it you could probably hydrate it

853
00:29:15,679 --> 00:29:17,279
some other way

854
00:29:17,279 --> 00:29:18,960
some other way that could have prevented

855
00:29:18,960 --> 00:29:21,360
this or you discover it is you could

856
00:29:21,360 --> 00:29:22,799
actually

857
00:29:22,799 --> 00:29:24,840
put a bucket policy on your bucket that

858
00:29:24,840 --> 00:29:27,360
restricts where

859
00:29:27,360 --> 00:29:28,320
keys

860
00:29:28,320 --> 00:29:30,559
are coming from you can do i'm not going

861
00:29:30,559 --> 00:29:32,480
to try to say that entire header that's

862
00:29:32,480 --> 00:29:34,559
ridiculous but you can do a condition

863
00:29:34,559 --> 00:29:36,640
key on that header and you can check

864
00:29:36,640 --> 00:29:39,200
things like did it come from my account

865
00:29:39,200 --> 00:29:40,799
like i want all encryption keys to come

866
00:29:40,799 --> 00:29:43,039
from this account which technically if

867
00:29:43,039 --> 00:29:44,480
you're enforcing server-side encryption

868
00:29:44,480 --> 00:29:46,480
on an s3 bucket you should be doing a

869
00:29:46,480 --> 00:29:48,240
policy like that anyway because anyone

870
00:29:48,240 --> 00:29:49,840
can put whatever configuration they want

871
00:29:49,840 --> 00:29:52,640
on a put object request so that that's a

872
00:29:52,640 --> 00:29:55,360
good thing to do anyway

873
00:29:55,360 --> 00:29:57,919
so as part of preventing this uh

874
00:29:57,919 --> 00:30:00,640
something reactive you could do is an

875
00:30:00,640 --> 00:30:02,720
aws config rule if you're at a place if

876
00:30:02,720 --> 00:30:04,399
your organization lives in a state that

877
00:30:04,399 --> 00:30:05,200
it's

878
00:30:05,200 --> 00:30:07,520
able to make mandates like if i see

879
00:30:07,520 --> 00:30:08,960
something that i don't like configured

880
00:30:08,960 --> 00:30:11,679
aws can come along and abs config can

881
00:30:11,679 --> 00:30:13,760
come along and actually change the state

882
00:30:13,760 --> 00:30:15,039
of things for you

883
00:30:15,039 --> 00:30:16,240
that's a pretty advanced thing to be

884
00:30:16,240 --> 00:30:18,960
doing other tools can do it too

885
00:30:18,960 --> 00:30:20,799
you could use cloudtrail to try to find

886
00:30:20,799 --> 00:30:23,039
things and then react or a lot of people

887
00:30:23,039 --> 00:30:24,880
will build custom pipelines for this

888
00:30:24,880 --> 00:30:26,640
kind of thing we obviously can't speak

889
00:30:26,640 --> 00:30:29,039
to those

890
00:30:32,000 --> 00:30:34,000
so to bring it all back together we kind

891
00:30:34,000 --> 00:30:35,840
of gathered you here to share a story

892
00:30:35,840 --> 00:30:38,159
and let's look over what we've covered

893
00:30:38,159 --> 00:30:40,399
so we had an integration exercise which

894
00:30:40,399 --> 00:30:41,919
turned into a quote unquote fun

895
00:30:41,919 --> 00:30:43,840
adventure and i'm sure everyone in this

896
00:30:43,840 --> 00:30:45,919
room has a story about how integration

897
00:30:45,919 --> 00:30:47,679
has gone wrong in the past

898
00:30:47,679 --> 00:30:49,600
what caught us a little off guard was

899
00:30:49,600 --> 00:30:51,760
how the folks who configured the

900
00:30:51,760 --> 00:30:53,600
infrastructure were trying to do the

901
00:30:53,600 --> 00:30:55,039
right thing they were trying to

902
00:30:55,039 --> 00:30:56,559
configure encryption

903
00:30:56,559 --> 00:30:58,240
uh things were seemingly working inside

904
00:30:58,240 --> 00:31:00,480
of their account but unfortunately it

905
00:31:00,480 --> 00:31:02,399
had major unintended downstream

906
00:31:02,399 --> 00:31:04,320
consequences which resolved involving

907
00:31:04,320 --> 00:31:07,120
aws support to get our data decrypted

908
00:31:07,120 --> 00:31:08,640
lastly matt just walked you through a

909
00:31:08,640 --> 00:31:09,919
couple of different ways how you can

910
00:31:09,919 --> 00:31:11,360
look for this statically either through

911
00:31:11,360 --> 00:31:13,919
an ad hoc fashion leveraging an iac tool

912
00:31:13,919 --> 00:31:15,760
of choice or just parsing cloudtrail and

913
00:31:15,760 --> 00:31:17,840
config data to keep track of resources

914
00:31:17,840 --> 00:31:20,640
that are inside of your environment

915
00:31:20,640 --> 00:31:22,240
but we also had a couple of takeaways

916
00:31:22,240 --> 00:31:23,360
that we want to discuss with the

917
00:31:23,360 --> 00:31:25,039
audience and kind of show some food for

918
00:31:25,039 --> 00:31:26,159
thought

919
00:31:26,159 --> 00:31:27,679
so i alluded to the shared

920
00:31:27,679 --> 00:31:30,320
responsibility model earlier and the

921
00:31:30,320 --> 00:31:31,679
concept of the customer being

922
00:31:31,679 --> 00:31:33,200
accountable for their side and the

923
00:31:33,200 --> 00:31:35,360
vendor being accountable for their side

924
00:31:35,360 --> 00:31:37,600
so in matt and i's experience

925
00:31:37,600 --> 00:31:40,320
cloud services work pretty darn well if

926
00:31:40,320 --> 00:31:41,919
something is going wrong inside of your

927
00:31:41,919 --> 00:31:45,440
aws account it's usually your fault 99

928
00:31:45,440 --> 00:31:47,760
of the time so the mentality that we

929
00:31:47,760 --> 00:31:50,000
were operating with in this scenario is

930
00:31:50,000 --> 00:31:52,320
what did we do wrong how can we figure

931
00:31:52,320 --> 00:31:54,159
out how things were broken and putting

932
00:31:54,159 --> 00:31:55,519
us in the state

933
00:31:55,519 --> 00:31:57,760
however this was almost a very rare

934
00:31:57,760 --> 00:31:59,440
instance which still won't change our

935
00:31:59,440 --> 00:32:02,080
mentality on dealing with aws issues but

936
00:32:02,080 --> 00:32:04,320
how involving aws support and putting

937
00:32:04,320 --> 00:32:05,760
the blame on the vendor could have

938
00:32:05,760 --> 00:32:08,399
resulted in a faster resolution here

939
00:32:08,399 --> 00:32:09,919
the second thing we wanted to note on

940
00:32:09,919 --> 00:32:12,559
that initial first point is you know was

941
00:32:12,559 --> 00:32:14,720
was this behavior expected

942
00:32:14,720 --> 00:32:17,039
again we were in a situation where the

943
00:32:17,039 --> 00:32:19,039
cloud provider we were using

944
00:32:19,039 --> 00:32:20,320
uh

945
00:32:20,320 --> 00:32:22,640
chose a key of its own accord that we

946
00:32:22,640 --> 00:32:24,240
did not have access to we did not

947
00:32:24,240 --> 00:32:26,640
configure and we did not request to

948
00:32:26,640 --> 00:32:28,559
encrypt our log data

949
00:32:28,559 --> 00:32:30,080
that we were unable to access without

950
00:32:30,080 --> 00:32:31,600
their help

951
00:32:31,600 --> 00:32:33,440
the second bullet point will read like

952
00:32:33,440 --> 00:32:35,039
common sense but we wanted to put it

953
00:32:35,039 --> 00:32:36,880
here anyways similar to testing your

954
00:32:36,880 --> 00:32:39,360
backups which is ensuring your logs are

955
00:32:39,360 --> 00:32:41,279
actually accessible before you need them

956
00:32:41,279 --> 00:32:42,720
and it's too late

957
00:32:42,720 --> 00:32:44,640
a common definition of done when

958
00:32:44,640 --> 00:32:47,279
configuring logging services is you turn

959
00:32:47,279 --> 00:32:49,440
on your logging service you check the

960
00:32:49,440 --> 00:32:52,000
bucket where the logs are supposed to go

961
00:32:52,000 --> 00:32:54,080
and if you see the logs you're you're

962
00:32:54,080 --> 00:32:56,720
probably you're probably good um however

963
00:32:56,720 --> 00:32:58,240
this this was not the case in this

964
00:32:58,240 --> 00:33:00,559
scenario and this could be a common use

965
00:33:00,559 --> 00:33:02,399
case because again if you're turning on

966
00:33:02,399 --> 00:33:04,000
logging and you're just keeping it for

967
00:33:04,000 --> 00:33:06,399
compliance reasons or you plan to ingest

968
00:33:06,399 --> 00:33:09,120
the data into a sim at a later date you

969
00:33:09,120 --> 00:33:10,399
could find yourself in a pretty bad

970
00:33:10,399 --> 00:33:11,679
scenario where you need to answer

971
00:33:11,679 --> 00:33:13,600
questions on these logs but you've never

972
00:33:13,600 --> 00:33:15,120
actually tested whether you can access

973
00:33:15,120 --> 00:33:17,120
these logs which which is the scenario

974
00:33:17,120 --> 00:33:19,360
we found ourselves in so ensure your

975
00:33:19,360 --> 00:33:20,640
logs are accessible and make sure your

976
00:33:20,640 --> 00:33:22,159
definition of done includes kind of

977
00:33:22,159 --> 00:33:25,200
every step of that workflow lastly matt

978
00:33:25,200 --> 00:33:27,360
and i combined have over 15 years of

979
00:33:27,360 --> 00:33:29,519
experience working with aws and we feel

980
00:33:29,519 --> 00:33:31,760
very confident about our abilities

981
00:33:31,760 --> 00:33:33,600
however due to the speed of features

982
00:33:33,600 --> 00:33:36,320
that aws gcp azure all the major cloud

983
00:33:36,320 --> 00:33:38,320
providers roll out you can never really

984
00:33:38,320 --> 00:33:40,480
be 100 confident on how these services

985
00:33:40,480 --> 00:33:41,840
are going to interact with each other

986
00:33:41,840 --> 00:33:43,279
there's just too many awesome features

987
00:33:43,279 --> 00:33:44,960
that get rolled out if you look at re

988
00:33:44,960 --> 00:33:46,720
invent for example i'm pretty sure half

989
00:33:46,720 --> 00:33:48,320
of my workflows get deprecated every

990
00:33:48,320 --> 00:33:49,679
single december

991
00:33:49,679 --> 00:33:51,279
so no matter how well you know how these

992
00:33:51,279 --> 00:33:53,279
services interact with each other really

993
00:33:53,279 --> 00:33:54,960
make sure you go through all the extra

994
00:33:54,960 --> 00:33:57,360
extra steps um to make sure that your

995
00:33:57,360 --> 00:34:00,159
flow works exactly how you expected

996
00:34:00,159 --> 00:34:01,279
especially when you're using managed

997
00:34:01,279 --> 00:34:02,640
services

998
00:34:02,640 --> 00:34:03,919
and with that being said we would like

999
00:34:03,919 --> 00:34:05,360
to thank you very much for coming to our

1000
00:34:05,360 --> 00:34:06,720
talk and open up the floor to any

1001
00:34:06,720 --> 00:34:08,969
questions

1002
00:34:08,969 --> 00:34:15,029
[Applause]

1003
00:34:23,679 --> 00:34:26,159
uh i believe the question was did amazon

1004
00:34:26,159 --> 00:34:28,159
decrypt our logs and then transfer them

1005
00:34:28,159 --> 00:34:32,200
in plain text is that right

1006
00:34:34,159 --> 00:34:35,679
i think the question was on the details

1007
00:34:35,679 --> 00:34:38,399
of how amazon decrypted our data um it

1008
00:34:38,399 --> 00:34:40,480
was not decrypted via plain text and

1009
00:34:40,480 --> 00:34:41,918
everything was up to kind of the

1010
00:34:41,918 --> 00:34:44,079
standards we would like um the data

1011
00:34:44,079 --> 00:34:47,879
never left our account

1012
00:34:56,639 --> 00:34:57,760
sorry you might have to come up and

1013
00:34:57,760 --> 00:35:01,720
speak into the mic sorry

1014
00:35:03,200 --> 00:35:05,359
sorry my question was that like usually

1015
00:35:05,359 --> 00:35:08,320
uh for encrypting data at rest the way

1016
00:35:08,320 --> 00:35:11,760
that gcp or aws work is that they use a

1017
00:35:11,760 --> 00:35:14,800
method called envelope encryption so the

1018
00:35:14,800 --> 00:35:16,640
key and the information around the key

1019
00:35:16,640 --> 00:35:18,880
is the sort along with the object i'm

1020
00:35:18,880 --> 00:35:20,480
wondering whether those information

1021
00:35:20,480 --> 00:35:21,920
could help you to

1022
00:35:21,920 --> 00:35:24,000
see what was the actual keypad and stuff

1023
00:35:24,000 --> 00:35:26,880
like that

1024
00:35:26,880 --> 00:35:28,320
can you repeat the question i didn't

1025
00:35:28,320 --> 00:35:31,720
catch all of this

1026
00:35:40,160 --> 00:35:42,000
um so the question was about envelope

1027
00:35:42,000 --> 00:35:44,400
encryption and how aws and gcp and you

1028
00:35:44,400 --> 00:35:46,320
know these services do that under the

1029
00:35:46,320 --> 00:35:48,000
hood and

1030
00:35:48,000 --> 00:35:49,680
like as david and i said we're not

1031
00:35:49,680 --> 00:35:51,760
employees of aws or privy to exactly how

1032
00:35:51,760 --> 00:35:54,079
that works and whether or not it's a

1033
00:35:54,079 --> 00:35:55,760
enveloped encryption i mean i don't know

1034
00:35:55,760 --> 00:35:56,960
off the top of my head right now what

1035
00:35:56,960 --> 00:35:58,560
they're doing on the back end

1036
00:35:58,560 --> 00:36:00,480
um but i don't think any sort of

1037
00:36:00,480 --> 00:36:02,160
enveloping would have helped in this

1038
00:36:02,160 --> 00:36:04,320
case especially because the crux of the

1039
00:36:04,320 --> 00:36:05,839
problem was that we couldn't access the

1040
00:36:05,839 --> 00:36:07,599
key anyway so

1041
00:36:07,599 --> 00:36:10,000
um it that might have been easy like it

1042
00:36:10,000 --> 00:36:11,359
might have been easier for them and not

1043
00:36:11,359 --> 00:36:13,040
us like if they were needed to do

1044
00:36:13,040 --> 00:36:14,240
something like

1045
00:36:14,240 --> 00:36:15,760
rotation but this didn't involve any

1046
00:36:15,760 --> 00:36:17,359
rotation what they what they needed to

1047
00:36:17,359 --> 00:36:20,000
do was get the data encrypted with a key

1048
00:36:20,000 --> 00:36:22,079
that we own not one that they own so

1049
00:36:22,079 --> 00:36:24,000
their stuff on the back end of whether

1050
00:36:24,000 --> 00:36:25,680
they're doing any enveloping or anything

1051
00:36:25,680 --> 00:36:26,720
on that

1052
00:36:26,720 --> 00:36:28,800
i don't think would have impacted us at

1053
00:36:28,800 --> 00:36:31,800
all

1054
00:36:41,839 --> 00:36:44,320
so the object showed what the key was so

1055
00:36:44,320 --> 00:36:46,400
like we knew what the key was we just

1056
00:36:46,400 --> 00:36:49,119
couldn't access it because if you know

1057
00:36:49,119 --> 00:36:51,839
if we're right we're guessing that

1058
00:36:51,839 --> 00:36:52,880
you can go

1059
00:36:52,880 --> 00:36:54,480
if we're right we're guessing that this

1060
00:36:54,480 --> 00:36:59,119
key is the actual aws slash s3 alias key

1061
00:36:59,119 --> 00:37:02,079
in the amazon account so

1062
00:37:02,079 --> 00:37:04,160
we think that the log writer and s3

1063
00:37:04,160 --> 00:37:05,920
interact in a weird way it goes and

1064
00:37:05,920 --> 00:37:08,320
pulls that key which as david said you

1065
00:37:08,320 --> 00:37:09,920
know a bunch of times now we're gonna

1066
00:37:09,920 --> 00:37:11,839
talk to her blue in the face would have

1067
00:37:11,839 --> 00:37:13,920
a policy that does not allow outside

1068
00:37:13,920 --> 00:37:16,720
account access so any of the nuances of

1069
00:37:16,720 --> 00:37:18,079
how they're doing any envelope

1070
00:37:18,079 --> 00:37:20,160
encryption at all just don't matter

1071
00:37:20,160 --> 00:37:21,839
because we can't access the key anyway

1072
00:37:21,839 --> 00:37:23,440
and they're rightfully not going to

1073
00:37:23,440 --> 00:37:25,920
change a key policy to let us access

1074
00:37:25,920 --> 00:37:27,760
that right

1075
00:37:27,760 --> 00:37:32,040
so does that answer your question

1076
00:37:43,310 --> 00:37:46,779
[Music]

1077
00:37:49,119 --> 00:37:50,880
uh so the question is does this happen

1078
00:37:50,880 --> 00:37:53,119
only if you use the default key

1079
00:37:53,119 --> 00:37:56,800
and it happens if you specifically

1080
00:37:56,800 --> 00:38:00,400
specify ssc kms encryption and you do

1081
00:38:00,400 --> 00:38:03,599
not specify a kms key so i guess to put

1082
00:38:03,599 --> 00:38:04,480
it

1083
00:38:04,480 --> 00:38:07,839
more explicitly if you specify sse kms

1084
00:38:07,839 --> 00:38:09,839
but the key that you ask for is that

1085
00:38:09,839 --> 00:38:13,760
special aws slash s3 key um you will be

1086
00:38:13,760 --> 00:38:17,200
put in this condition with a log writer

1087
00:38:17,520 --> 00:38:19,839
yeah yes

1088
00:38:19,839 --> 00:38:22,320
yes it's the default key um that amazon

1089
00:38:22,320 --> 00:38:24,720
provides

1090
00:38:25,119 --> 00:38:27,119
that works

1091
00:38:27,119 --> 00:38:29,359
that works fine he asks that's the key

1092
00:38:29,359 --> 00:38:31,520
amazon provides um that works fine as

1093
00:38:31,520 --> 00:38:33,599
long as all of the

1094
00:38:33,599 --> 00:38:35,040
requests are coming from inside your own

1095
00:38:35,040 --> 00:38:36,480
account because it's interacting with a

1096
00:38:36,480 --> 00:38:39,440
key um that you can actually go see like

1097
00:38:39,440 --> 00:38:41,440
you can find go click on that key see

1098
00:38:41,440 --> 00:38:43,520
the key policy for it in the console ui

1099
00:38:43,520 --> 00:38:45,040
it'll be grayed out because you can't

1100
00:38:45,040 --> 00:38:47,599
edit it it's a completely managed policy

1101
00:38:47,599 --> 00:38:48,560
um

1102
00:38:48,560 --> 00:38:50,720
so when things from the outside come in

1103
00:38:50,720 --> 00:38:52,079
that it fails and it failed in this

1104
00:38:52,079 --> 00:38:55,200
weird way we saw um

1105
00:38:55,200 --> 00:38:57,119
but

1106
00:38:57,119 --> 00:38:58,800
i kind of glossed over this in a slide i

1107
00:38:58,800 --> 00:39:01,280
don't think i actually said it um

1108
00:39:01,280 --> 00:39:02,960
you can actually not get yourself into

1109
00:39:02,960 --> 00:39:05,040
this configuration via the console it

1110
00:39:05,040 --> 00:39:06,480
holds your hand like the console does

1111
00:39:06,480 --> 00:39:08,640
weird stuff sometimes it's not a

1112
00:39:08,640 --> 00:39:11,760
one-to-one with api calls or cli calls

1113
00:39:11,760 --> 00:39:13,760
so it would actually be easier to enter

1114
00:39:13,760 --> 00:39:16,240
this scenario if you are using iac like

1115
00:39:16,240 --> 00:39:18,320
terraform and cloud formation

1116
00:39:18,320 --> 00:39:20,160
so i don't does that answer your

1117
00:39:20,160 --> 00:39:21,680
question at all

1118
00:39:21,680 --> 00:39:24,240
yeah okay

1119
00:39:24,640 --> 00:39:25,760
i think you have to come on you're going

1120
00:39:25,760 --> 00:39:28,720
to have to it's

1121
00:39:38,160 --> 00:39:39,920
so the question is could you leverage

1122
00:39:39,920 --> 00:39:42,320
something like organizational scps or

1123
00:39:42,320 --> 00:39:44,800
service control policies to

1124
00:39:44,800 --> 00:39:47,200
kind of prevent a situation like this so

1125
00:39:47,200 --> 00:39:49,040
pretty much using a centralized set of

1126
00:39:49,040 --> 00:39:51,200
rules that if you are using aws

1127
00:39:51,200 --> 00:39:53,359
organizations these policies will apply

1128
00:39:53,359 --> 00:39:55,200
to all api calls inside of your child

1129
00:39:55,200 --> 00:39:57,440
accounts um matt i think we looked at

1130
00:39:57,440 --> 00:40:00,800
this and i don't remember yeah we that's

1131
00:40:00,800 --> 00:40:03,440
something that we explored um but due to

1132
00:40:03,440 --> 00:40:05,680
how specific that header was we weren't

1133
00:40:05,680 --> 00:40:07,599
100 positive on whether we would be able

1134
00:40:07,599 --> 00:40:09,520
to write an scp to specifically block

1135
00:40:09,520 --> 00:40:12,079
that kind of behavior

1136
00:40:12,079 --> 00:40:14,240
we also were worried about the general

1137
00:40:14,240 --> 00:40:16,079
ramifications of something like that

1138
00:40:16,079 --> 00:40:18,319
happening to the entirety of every child

1139
00:40:18,319 --> 00:40:19,680
account in the org

1140
00:40:19,680 --> 00:40:21,040
because this use case is a little bit

1141
00:40:21,040 --> 00:40:22,880
specific right you have this

1142
00:40:22,880 --> 00:40:24,400
configuration which could technically be

1143
00:40:24,400 --> 00:40:25,359
valid

1144
00:40:25,359 --> 00:40:26,880
but it only starts to fall apart when

1145
00:40:26,880 --> 00:40:29,040
you have that third party log rider

1146
00:40:29,040 --> 00:40:31,280
outside of your own account so i think

1147
00:40:31,280 --> 00:40:32,880
something that we would push for instead

1148
00:40:32,880 --> 00:40:34,400
would be leveraging those kind of static

1149
00:40:34,400 --> 00:40:36,640
controls at pr time and detective

1150
00:40:36,640 --> 00:40:38,720
controls upon deployment time because it

1151
00:40:38,720 --> 00:40:40,079
could be perfectly acceptable for

1152
00:40:40,079 --> 00:40:41,839
someone to configure a bucket like this

1153
00:40:41,839 --> 00:40:44,160
but if it's just operations inside of my

1154
00:40:44,160 --> 00:40:46,079
account the data will still be encrypted

1155
00:40:46,079 --> 00:40:49,359
at rest and everything will be okay

1156
00:40:51,280 --> 00:40:54,720
i i can't hear you i'm really sorry

1157
00:40:58,319 --> 00:41:00,000
i'm sorry

1158
00:41:00,000 --> 00:41:01,599
you never have access to the data again

1159
00:41:01,599 --> 00:41:03,520
without talking to support right yeah

1160
00:41:03,520 --> 00:41:04,640
yeah correct

1161
00:41:04,640 --> 00:41:06,560
so the question was would you would you

1162
00:41:06,560 --> 00:41:08,160
ever be able to access the data again

1163
00:41:08,160 --> 00:41:10,240
without talking to support and

1164
00:41:10,240 --> 00:41:12,720
we needed to involve support in order to

1165
00:41:12,720 --> 00:41:14,319
get this data decrypted because again

1166
00:41:14,319 --> 00:41:15,760
that encryption key that was being used

1167
00:41:15,760 --> 00:41:17,839
was outside of any of the accounts that

1168
00:41:17,839 --> 00:41:19,280
we owned

1169
00:41:19,280 --> 00:41:22,449
[Music]

1170
00:41:23,040 --> 00:41:25,359
yeah so like we did everything like i

1171
00:41:25,359 --> 00:41:27,359
mean we tried to access the key we did

1172
00:41:27,359 --> 00:41:30,079
uh get objects specifying that exact key

1173
00:41:30,079 --> 00:41:31,839
but it was all the same access to night

1174
00:41:31,839 --> 00:41:33,920
error because when you get down to it

1175
00:41:33,920 --> 00:41:35,520
it's a key in their account the key

1176
00:41:35,520 --> 00:41:40,440
policy says no so you can't right

1177
00:41:48,400 --> 00:41:50,319
the question was because it was

1178
00:41:50,319 --> 00:41:52,880
reproducible did amazon treat this as a

1179
00:41:52,880 --> 00:41:54,000
bug

1180
00:41:54,000 --> 00:41:55,119
um

1181
00:41:55,119 --> 00:41:57,359
technically we actually ourselves matt

1182
00:41:57,359 --> 00:41:59,520
and i don't consider it a bug we think

1183
00:41:59,520 --> 00:42:01,760
it's just unexpected behavior if you

1184
00:42:01,760 --> 00:42:03,440
dive really really deep into the

1185
00:42:03,440 --> 00:42:05,520
documentation you'll notice references

1186
00:42:05,520 --> 00:42:07,280
saying that hey this kind of

1187
00:42:07,280 --> 00:42:09,440
configuration for the log riders isn't

1188
00:42:09,440 --> 00:42:11,200
really supported

1189
00:42:11,200 --> 00:42:12,640
the key point we wanted to call out in

1190
00:42:12,640 --> 00:42:14,960
this presentation is how the operation

1191
00:42:14,960 --> 00:42:17,119
fails it's a silent failure where your

1192
00:42:17,119 --> 00:42:19,599
data is encrypted versus the operation

1193
00:42:19,599 --> 00:42:22,160
just stopping um and using that there's

1194
00:42:22,160 --> 00:42:25,440
no logs in there so

1195
00:42:26,000 --> 00:42:27,760
correct you you would never know until

1196
00:42:27,760 --> 00:42:29,599
until you go back which which is why you

1197
00:42:29,599 --> 00:42:30,880
know it's

1198
00:42:30,880 --> 00:42:32,640
really important to make sure the logs

1199
00:42:32,640 --> 00:42:34,880
that you are ingesting um you know you

1200
00:42:34,880 --> 00:42:37,040
can access which which sounds silly but

1201
00:42:37,040 --> 00:42:39,200
is a step we fail to miss here uh but to

1202
00:42:39,200 --> 00:42:40,560
answer your original question uh we

1203
00:42:40,560 --> 00:42:42,480
don't even think it's a bug um we

1204
00:42:42,480 --> 00:42:44,079
obviously work with aws support to kind

1205
00:42:44,079 --> 00:42:47,119
of resolve the data but um not not sure

1206
00:42:47,119 --> 00:42:48,800
we're not we're not privy to yeah we're

1207
00:42:48,800 --> 00:42:53,640
not privy to aws's thinking yeah

1208
00:43:05,710 --> 00:43:08,400
[Music]

1209
00:43:08,400 --> 00:43:10,839
oh can it happen with rds is that the

1210
00:43:10,839 --> 00:43:13,520
question um the question is can it

1211
00:43:13,520 --> 00:43:15,520
happen with other services that support

1212
00:43:15,520 --> 00:43:17,599
using kms for backing their encryption

1213
00:43:17,599 --> 00:43:20,800
like rds or i think ec like all lots of

1214
00:43:20,800 --> 00:43:23,119
things do right um

1215
00:43:23,119 --> 00:43:26,240
and in our experience

1216
00:43:26,240 --> 00:43:27,520
we saw it

1217
00:43:27,520 --> 00:43:29,440
only on the

1218
00:43:29,440 --> 00:43:32,000
log writer services so vpc flow is not

1219
00:43:32,000 --> 00:43:34,000
the only thing we saw it for i tested it

1220
00:43:34,000 --> 00:43:34,880
for

1221
00:43:34,880 --> 00:43:36,800
s3 server access logs i tested it for

1222
00:43:36,800 --> 00:43:39,119
firewall logging which means it appears

1223
00:43:39,119 --> 00:43:40,560
to be although i didn't test it with

1224
00:43:40,560 --> 00:43:41,680
everything it appears to be a

1225
00:43:41,680 --> 00:43:43,200
generalized problem with the logging

1226
00:43:43,200 --> 00:43:45,040
service services themselves anything

1227
00:43:45,040 --> 00:43:47,200
that uses that abstracted service to log

1228
00:43:47,200 --> 00:43:49,760
stuff to your s3 buckets will have this

1229
00:43:49,760 --> 00:43:51,760
problem so

1230
00:43:51,760 --> 00:43:54,240
i can't be sure but i don't think it

1231
00:43:54,240 --> 00:43:56,560
would have that issue because typically

1232
00:43:56,560 --> 00:43:59,280
anything rds is going to be you're using

1233
00:43:59,280 --> 00:44:01,359
something from your account like rds

1234
00:44:01,359 --> 00:44:03,520
using the default aliased

1235
00:44:03,520 --> 00:44:06,079
aws s3 key that's going to work fine

1236
00:44:06,079 --> 00:44:07,599
unless in the documentation it says it

1237
00:44:07,599 --> 00:44:08,960
doesn't

1238
00:44:08,960 --> 00:44:12,079
yeah i know i hedge everything um

1239
00:44:12,079 --> 00:44:13,359
but it's definitely going to work with

1240
00:44:13,359 --> 00:44:15,280
custom kms keys right like i would

1241
00:44:15,280 --> 00:44:17,680
expect rds to interact fine we i

1242
00:44:17,680 --> 00:44:20,560
actually tested uh setting that json

1243
00:44:20,560 --> 00:44:22,240
configuration to the bucket encryption

1244
00:44:22,240 --> 00:44:24,400
where there was no arn specified we

1245
00:44:24,400 --> 00:44:27,040
never saw it fail on any other service

1246
00:44:27,040 --> 00:44:29,280
interactions except for the log writers

1247
00:44:29,280 --> 00:44:30,800
that doesn't mean that's something out

1248
00:44:30,800 --> 00:44:32,720
there but i didn't comprehensively test

1249
00:44:32,720 --> 00:44:35,520
you know 300 amazon services that might

1250
00:44:35,520 --> 00:44:38,240
go do something with kms right like

1251
00:44:38,240 --> 00:44:40,880
so i would expect it to work fine

1252
00:44:40,880 --> 00:44:42,400
it's just

1253
00:44:42,400 --> 00:44:44,000
like if the one takeaway of what you

1254
00:44:44,000 --> 00:44:45,440
should go look for in your environment

1255
00:44:45,440 --> 00:44:47,760
on what might be broken right now it's

1256
00:44:47,760 --> 00:44:49,440
that configuration of

1257
00:44:49,440 --> 00:44:51,760
doesn't have a key arn present

1258
00:44:51,760 --> 00:44:54,480
and are any of the logging services

1259
00:44:54,480 --> 00:44:57,119
utilizing it so there might i guess

1260
00:44:57,119 --> 00:44:58,960
there might be some nuance there in how

1261
00:44:58,960 --> 00:45:01,440
rds does some of its logging like you

1262
00:45:01,440 --> 00:45:03,200
can configure postgre and like all that

1263
00:45:03,200 --> 00:45:04,880
stuff to go to certain places i don't

1264
00:45:04,880 --> 00:45:07,280
know if you can configure s3 for that

1265
00:45:07,280 --> 00:45:10,000
it's definitely something to look at but

1266
00:45:10,000 --> 00:45:12,560
i'm not sure

1267
00:45:13,280 --> 00:45:17,240
sorry it's kind of a weak answer

1268
00:45:22,079 --> 00:45:23,280
would you be able to audit for the

1269
00:45:23,280 --> 00:45:24,800
config rather than like setting the

1270
00:45:24,800 --> 00:45:27,040
config policy to stop it from going

1271
00:45:27,040 --> 00:45:28,720
forward is there an easy way to audit

1272
00:45:28,720 --> 00:45:32,598
that config going backwards

1273
00:45:37,839 --> 00:45:38,720
so

1274
00:45:38,720 --> 00:45:40,079
that would come down to the slide that

1275
00:45:40,079 --> 00:45:42,079
said depends on your aws inventory like

1276
00:45:42,079 --> 00:45:43,359
if it like if you just want to check

1277
00:45:43,359 --> 00:45:45,359
things that are configured that way it's

1278
00:45:45,359 --> 00:45:46,960
wherever is convenient for you where

1279
00:45:46,960 --> 00:45:49,839
that that information is um if you

1280
00:45:49,839 --> 00:45:51,440
continuously collect something like

1281
00:45:51,440 --> 00:45:53,119
cloudtrail though like i'm almost

1282
00:45:53,119 --> 00:45:54,640
certain that's going to be in there and

1283
00:45:54,640 --> 00:45:56,720
like the the thing that's put in or the

1284
00:45:56,720 --> 00:45:58,400
the policy that gets set is likely going

1285
00:45:58,400 --> 00:46:00,319
to be in there so if you've got that

1286
00:46:00,319 --> 00:46:02,000
collected somewhere that's probably

1287
00:46:02,000 --> 00:46:03,359
going to work

1288
00:46:03,359 --> 00:46:04,160
but

1289
00:46:04,160 --> 00:46:05,680
again it comes down to tooling what do

1290
00:46:05,680 --> 00:46:09,040
you have what data can you look at

1291
00:46:11,520 --> 00:46:12,800
thank you very much again to everyone

1292
00:46:12,800 --> 00:46:14,560
who stayed and asked questions we really

1293
00:46:14,560 --> 00:46:16,400
appreciate it uh we'll actually have a

1294
00:46:16,400 --> 00:46:18,560
question we'll we'll be around for the

1295
00:46:18,560 --> 00:46:20,000
rest of the conference and if you have

1296
00:46:20,000 --> 00:46:21,359
additional follow-ups please feel free

1297
00:46:21,359 --> 00:46:24,030
to reach out on linkedin thank you

1298
00:46:24,030 --> 00:46:27,089
[Music]

