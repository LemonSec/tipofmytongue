1
00:00:00,120 --> 00:00:02,700
good morning everybody Welcome to

2
00:00:02,700 --> 00:00:06,420
besides uh very happy to be uh back in

3
00:00:06,420 --> 00:00:08,700
person have a few uh little things to

4
00:00:08,700 --> 00:00:10,559
announce first of all I want to say

5
00:00:10,559 --> 00:00:12,660
thank you to our sponsors uh

6
00:00:12,660 --> 00:00:15,540
specifically uh Diamond sponsor LastPass

7
00:00:15,540 --> 00:00:18,119
in Palo Alto networks uh also the goal

8
00:00:18,119 --> 00:00:20,220
sponsor just to name a few Amazon and

9
00:00:20,220 --> 00:00:21,720
visual and blue cat

10
00:00:21,720 --> 00:00:24,480
uh second a couple of housekeeping

11
00:00:24,480 --> 00:00:27,180
things uh please silence your cell

12
00:00:27,180 --> 00:00:30,119
phones the talk is being recorded and

13
00:00:30,119 --> 00:00:32,399
streamed so we want this to be uh to be

14
00:00:32,399 --> 00:00:34,559
clean and also as a respect for our

15
00:00:34,559 --> 00:00:36,420
presenters

16
00:00:36,420 --> 00:00:39,180
um if you have questions uh when we have

17
00:00:39,180 --> 00:00:42,120
the the Q a at the end please come back

18
00:00:42,120 --> 00:00:44,160
to the front so the presenter can hear

19
00:00:44,160 --> 00:00:45,660
and repeat for the people we're

20
00:00:45,660 --> 00:00:47,700
streaming to

21
00:00:47,700 --> 00:00:49,800
um B-side has a very strict picture

22
00:00:49,800 --> 00:00:51,660
taking policy you're probably aware of

23
00:00:51,660 --> 00:00:53,760
that so don't take any picture without

24
00:00:53,760 --> 00:00:56,039
the explicit consent of anybody in the

25
00:00:56,039 --> 00:00:59,520
frame and I think I'm probably done with

26
00:00:59,520 --> 00:01:01,500
the housekeeping except keep your mask

27
00:01:01,500 --> 00:01:06,479
all time now let me uh introduce uh Matt

28
00:01:06,479 --> 00:01:09,299
Matt is going to talk about uh malware

29
00:01:09,299 --> 00:01:12,240
families anti-forensic and some botnets

30
00:01:12,240 --> 00:01:15,900
I guess so Matt you have the floor

31
00:01:15,900 --> 00:01:18,080
foreign

32
00:01:20,000 --> 00:01:23,100
thank you very much Evan hey so hello

33
00:01:23,100 --> 00:01:25,500
and welcome to my top A Tale of Two

34
00:01:25,500 --> 00:01:27,299
malware families overcoming

35
00:01:27,299 --> 00:01:29,700
anti-forensics and foiling botnets in

36
00:01:29,700 --> 00:01:30,840
the cloud

37
00:01:30,840 --> 00:01:33,119
so let's kick off with some formalities

38
00:01:33,119 --> 00:01:35,400
before we get started on the content for

39
00:01:35,400 --> 00:01:37,579
today

40
00:01:38,460 --> 00:01:41,220
so first of all I'm Matt Muir and I'm a

41
00:01:41,220 --> 00:01:43,500
threat intelligence researcher at Cato

42
00:01:43,500 --> 00:01:44,880
security

43
00:01:44,880 --> 00:01:47,640
prior to working at Kato I was a Mac OS

44
00:01:47,640 --> 00:01:49,680
malware researcher and I've got a

45
00:01:49,680 --> 00:01:51,840
background in devops digital forensics

46
00:01:51,840 --> 00:01:54,899
and operational cyber security

47
00:01:54,899 --> 00:01:56,880
so you can follow me on Twitter at the

48
00:01:56,880 --> 00:01:58,979
handle on screen and I'll share the

49
00:01:58,979 --> 00:02:01,439
slides after the talk unless besides do

50
00:02:01,439 --> 00:02:03,899
that for me of course

51
00:02:03,899 --> 00:02:06,719
so as part of Cato Labs Cato straight

52
00:02:06,719 --> 00:02:09,119
research team I'm regularly involved in

53
00:02:09,119 --> 00:02:11,340
conducting Research into new software

54
00:02:11,340 --> 00:02:15,000
threats affecting Cloud infrastructure

55
00:02:15,000 --> 00:02:17,400
as the name of the talk suggests I'm

56
00:02:17,400 --> 00:02:19,860
here today to talk to you about two

57
00:02:19,860 --> 00:02:21,599
recent malware families we've been

58
00:02:21,599 --> 00:02:22,620
tracking

59
00:02:22,620 --> 00:02:25,040
both of which exhibit some interesting

60
00:02:25,040 --> 00:02:27,660
anti-forensics or detection evasion

61
00:02:27,660 --> 00:02:30,000
techniques foreign

62
00:02:30,000 --> 00:02:31,980
so without further ado

63
00:02:31,980 --> 00:02:33,840
I'll first go over the agenda of the

64
00:02:33,840 --> 00:02:35,940
talk before diving into some real life

65
00:02:35,940 --> 00:02:38,459
examples of cloud malware we've seen in

66
00:02:38,459 --> 00:02:40,700
the wild

67
00:02:42,959 --> 00:02:45,239
so kick off this presentation by

68
00:02:45,239 --> 00:02:47,459
introducing you to what we call the

69
00:02:47,459 --> 00:02:49,500
cloud challenge

70
00:02:49,500 --> 00:02:52,200
next I'll move on to the first malware

71
00:02:52,200 --> 00:02:54,420
family coin stump

72
00:02:54,420 --> 00:02:57,239
as we'll see coinstomp is a cloud native

73
00:02:57,239 --> 00:02:59,400
malware campaign that exhibits some

74
00:02:59,400 --> 00:03:00,959
interesting detection of Aging

75
00:03:00,959 --> 00:03:02,640
techniques

76
00:03:02,640 --> 00:03:06,360
following that I'll discuss ABC bot a

77
00:03:06,360 --> 00:03:08,580
botnet initially discovered by netlab

78
00:03:08,580 --> 00:03:12,300
360 that we've been tracking since 2021

79
00:03:12,300 --> 00:03:14,459
and has a longer history than we first

80
00:03:14,459 --> 00:03:16,440
realized

81
00:03:16,440 --> 00:03:18,840
finally we'll wrap up with some

82
00:03:18,840 --> 00:03:21,180
highlights of a more recent Cloud native

83
00:03:21,180 --> 00:03:22,620
campaign

84
00:03:22,620 --> 00:03:24,900
give you some tips for detecting this

85
00:03:24,900 --> 00:03:27,239
type of behavior in your environment

86
00:03:27,239 --> 00:03:29,459
and finish off with some further reading

87
00:03:29,459 --> 00:03:32,659
before the Q a session

88
00:03:34,500 --> 00:03:36,540
so I'd like to begin by giving a brief

89
00:03:36,540 --> 00:03:38,700
overview of something we call the cloud

90
00:03:38,700 --> 00:03:40,500
challenge

91
00:03:40,500 --> 00:03:42,840
despite a sustained migration to the

92
00:03:42,840 --> 00:03:45,319
cloud from companies across the globe

93
00:03:45,319 --> 00:03:47,340
organizations are increasingly

94
00:03:47,340 --> 00:03:49,620
susceptible to attacks which are

95
00:03:49,620 --> 00:03:51,780
advancing in both severity and in

96
00:03:51,780 --> 00:03:54,120
sophistication

97
00:03:54,120 --> 00:03:57,360
recent cloud-focused malware campaigns

98
00:03:57,360 --> 00:03:59,519
have demonstrated that adversity groups

99
00:03:59,519 --> 00:04:01,920
possess an intimate knowledge of cloud

100
00:04:01,920 --> 00:04:03,599
Technologies and their security

101
00:04:03,599 --> 00:04:05,159
mechanisms

102
00:04:05,159 --> 00:04:07,019
and not only that but they're using this

103
00:04:07,019 --> 00:04:09,659
to their advantage

104
00:04:09,659 --> 00:04:12,180
Cloud compute environments remain an

105
00:04:12,180 --> 00:04:14,459
obvious Target for such groups

106
00:04:14,459 --> 00:04:17,160
however we're now also beginning to see

107
00:04:17,160 --> 00:04:19,259
a shifted Focus towards serverless

108
00:04:19,259 --> 00:04:22,079
Computing in containers

109
00:04:22,079 --> 00:04:24,000
on top of this

110
00:04:24,000 --> 00:04:26,759
the ease of which Cloud resources can be

111
00:04:26,759 --> 00:04:27,960
compromised

112
00:04:27,960 --> 00:04:30,300
has led to adversity groups competing

113
00:04:30,300 --> 00:04:33,060
over potential targets

114
00:04:33,060 --> 00:04:35,460
so unfortunately Defenders haven't

115
00:04:35,460 --> 00:04:38,100
adapted at the same pace

116
00:04:38,100 --> 00:04:39,780
there are a number of reasons for this

117
00:04:39,780 --> 00:04:41,880
with visibility into Cloud

118
00:04:41,880 --> 00:04:44,100
infrastructure being a commonly cited

119
00:04:44,100 --> 00:04:45,660
one

120
00:04:45,660 --> 00:04:47,940
but it's an unavoidable fact that the

121
00:04:47,940 --> 00:04:50,100
campaigns I'm going to cover are both

122
00:04:50,100 --> 00:04:52,280
successful in achieving their objectives

123
00:04:52,280 --> 00:04:55,380
and are widespread

124
00:04:55,380 --> 00:04:56,759
clearly

125
00:04:56,759 --> 00:04:59,040
attackers in the cloud space are

126
00:04:59,040 --> 00:05:01,680
utilizing this to their advantage by

127
00:05:01,680 --> 00:05:04,020
employing ttps aimed at evading

128
00:05:04,020 --> 00:05:06,600
detection foiling attribution and

129
00:05:06,600 --> 00:05:09,620
covering their tracks

130
00:05:09,840 --> 00:05:12,539
so this leads me to this slide which I

131
00:05:12,539 --> 00:05:14,699
stole from a colleague Chris who did a

132
00:05:14,699 --> 00:05:16,500
similar talk recently at forward Cloud

133
00:05:16,500 --> 00:05:18,120
Tech

134
00:05:18,120 --> 00:05:21,300
most Cloud threat actors see themselves

135
00:05:21,300 --> 00:05:23,280
as the GIF on the left

136
00:05:23,280 --> 00:05:25,380
or is Chris Hemsworth in the movie Black

137
00:05:25,380 --> 00:05:26,280
Cat

138
00:05:26,280 --> 00:05:29,220
which is a great movie of course

139
00:05:29,220 --> 00:05:31,919
however despite the cloud being a

140
00:05:31,919 --> 00:05:34,259
lucrative and easily exploitable Target

141
00:05:34,259 --> 00:05:37,020
for many threat groups

142
00:05:37,020 --> 00:05:40,199
the reality is that most cyber attacks

143
00:05:40,199 --> 00:05:42,780
on cloud infrastructure are not hugely

144
00:05:42,780 --> 00:05:44,940
technical

145
00:05:44,940 --> 00:05:47,220
ultimately when it comes to technical

146
00:05:47,220 --> 00:05:49,860
resource this means that most Cloud

147
00:05:49,860 --> 00:05:52,020
threat actors actually have more in

148
00:05:52,020 --> 00:05:53,940
common with Homer on the gift to the

149
00:05:53,940 --> 00:05:56,039
right

150
00:05:56,039 --> 00:05:58,199
so what we'll see throughout this talk

151
00:05:58,199 --> 00:06:00,120
is that although the tools are

152
00:06:00,120 --> 00:06:01,319
rudimentary

153
00:06:01,319 --> 00:06:03,479
so most payloads are shell scripts for

154
00:06:03,479 --> 00:06:04,560
example

155
00:06:04,560 --> 00:06:06,600
the developers make use of some Nifty

156
00:06:06,600 --> 00:06:09,000
tricks and Linux specific knowledge

157
00:06:09,000 --> 00:06:12,020
debate detection

158
00:06:13,860 --> 00:06:16,380
so the first of two malware families I'm

159
00:06:16,380 --> 00:06:18,600
going to discuss today is what we refer

160
00:06:18,600 --> 00:06:21,180
to as coin Stomp

161
00:06:21,180 --> 00:06:24,120
coin stump is a cloud native malware

162
00:06:24,120 --> 00:06:26,460
campaign that we've been tracking since

163
00:06:26,460 --> 00:06:28,380
early 2022

164
00:06:28,380 --> 00:06:30,740
and it was notable for its Antony

165
00:06:30,740 --> 00:06:33,060
anti-hardening sorry and detection of

166
00:06:33,060 --> 00:06:35,960
Asian techniques

167
00:06:36,419 --> 00:06:38,460
so to give everyone a quick overview of

168
00:06:38,460 --> 00:06:39,840
this family

169
00:06:39,840 --> 00:06:42,240
coin stomp is a cryptojacking malware

170
00:06:42,240 --> 00:06:45,360
Campaign which exploits resources hosted

171
00:06:45,360 --> 00:06:47,220
primarily by Asian cloud service

172
00:06:47,220 --> 00:06:50,460
providers so for example tencent and

173
00:06:50,460 --> 00:06:53,220
Alibaba cloud

174
00:06:53,220 --> 00:06:54,599
there have been a couple of theories

175
00:06:54,599 --> 00:06:57,419
about why these csps are specifically

176
00:06:57,419 --> 00:07:00,060
targeted by this campaign

177
00:07:00,060 --> 00:07:02,819
it could be the case that is simply due

178
00:07:02,819 --> 00:07:05,160
to the location of the attackers and

179
00:07:05,160 --> 00:07:07,680
familiarity with the csps in their

180
00:07:07,680 --> 00:07:09,360
region

181
00:07:09,360 --> 00:07:12,060
I suspect that since many of these csvs

182
00:07:12,060 --> 00:07:15,720
are newer than for example AWS Google

183
00:07:15,720 --> 00:07:17,580
cloud and azure

184
00:07:17,580 --> 00:07:21,120
the security controls that are in place

185
00:07:21,120 --> 00:07:23,759
are perhaps not as mature as other cloud

186
00:07:23,759 --> 00:07:25,620
service providers

187
00:07:25,620 --> 00:07:28,500
making it more likely that instances and

188
00:07:28,500 --> 00:07:30,539
resources will be deployed in an

189
00:07:30,539 --> 00:07:33,380
insecure fashion

190
00:07:33,479 --> 00:07:35,580
if anyone has done research on this

191
00:07:35,580 --> 00:07:37,319
specifically then please get in touch

192
00:07:37,319 --> 00:07:38,699
with me as I'd like to know more about

193
00:07:38,699 --> 00:07:40,919
it

194
00:07:40,919 --> 00:07:42,960
so if you're someone that follows Cloud

195
00:07:42,960 --> 00:07:45,419
security research you're probably bored

196
00:07:45,419 --> 00:07:47,520
to death at this point by a family of

197
00:07:47,520 --> 00:07:49,740
cryptojacking show Scripts

198
00:07:49,740 --> 00:07:51,539
but with coin stump

199
00:07:51,539 --> 00:07:53,699
we noticed some interesting techniques

200
00:07:53,699 --> 00:07:56,340
which hinted the attacker's awareness of

201
00:07:56,340 --> 00:07:58,740
cloud security measures and the incident

202
00:07:58,740 --> 00:08:01,639
response process

203
00:08:01,860 --> 00:08:04,319
so these included the use of time stamp

204
00:08:04,319 --> 00:08:06,720
manipulation otherwise known as time

205
00:08:06,720 --> 00:08:07,979
stomping

206
00:08:07,979 --> 00:08:09,900
an attempt to remove system

207
00:08:09,900 --> 00:08:12,539
cryptographic policies in order to

208
00:08:12,539 --> 00:08:14,699
weaken the target system

209
00:08:14,699 --> 00:08:18,000
C2 communication via a reverse show

210
00:08:18,000 --> 00:08:20,699
and a reference to a prior cryptojacking

211
00:08:20,699 --> 00:08:22,020
campaign

212
00:08:22,020 --> 00:08:23,819
potentially in an attempt to foil

213
00:08:23,819 --> 00:08:26,240
attribution

214
00:08:27,479 --> 00:08:30,000
so now with the overview of the way

215
00:08:30,000 --> 00:08:31,800
let's have a deeper look at the malware

216
00:08:31,800 --> 00:08:33,659
itself and the payloads that are

217
00:08:33,659 --> 00:08:35,339
utilized

218
00:08:35,339 --> 00:08:37,320
so the first thing that caught our eye

219
00:08:37,320 --> 00:08:40,080
when analyzing a Coinstar payload was

220
00:08:40,080 --> 00:08:42,839
the presence of this date time string

221
00:08:42,839 --> 00:08:45,000
which you can see passed in as a

222
00:08:45,000 --> 00:08:47,100
parameter to the touch command Dash T

223
00:08:47,100 --> 00:08:48,360
auction

224
00:08:48,360 --> 00:08:50,459
hopefully you all actually can see that

225
00:08:50,459 --> 00:08:52,380
okay but I've highlighted the relevant

226
00:08:52,380 --> 00:08:55,339
section in the screenshot

227
00:08:55,740 --> 00:08:58,380
so the function on screen begins with an

228
00:08:58,380 --> 00:09:02,339
existence check for user bin mod user

229
00:09:02,339 --> 00:09:04,320
if this isn't found

230
00:09:04,320 --> 00:09:06,899
the script then grips for a sequence of

231
00:09:06,899 --> 00:09:10,019
strings found in the true mods binary in

232
00:09:10,019 --> 00:09:13,019
a subshell and uses grips Dash L option

233
00:09:13,019 --> 00:09:15,600
to return the file name only

234
00:09:15,600 --> 00:09:19,380
less can be seen on line 16 here

235
00:09:19,380 --> 00:09:22,200
it then renames the chamod binary to mod

236
00:09:22,200 --> 00:09:24,839
user and runs the touch command with

237
00:09:24,839 --> 00:09:28,920
Dash t and a date time string of 22-23

238
00:09:28,920 --> 00:09:32,040
on the 20th of May 2019.

239
00:09:32,040 --> 00:09:34,140
in hindsight that's a lot of consecutive

240
00:09:34,140 --> 00:09:37,519
twenties for a live talk

241
00:09:37,620 --> 00:09:39,959
um so this may be common knowledge to

242
00:09:39,959 --> 00:09:41,700
most people in the room

243
00:09:41,700 --> 00:09:44,040
but after Consulting the touch commands

244
00:09:44,040 --> 00:09:46,260
man page we realized that this is of

245
00:09:46,260 --> 00:09:48,540
course a pretty neat way to perform time

246
00:09:48,540 --> 00:09:50,880
stomping with a command that's virtually

247
00:09:50,880 --> 00:09:55,200
ubiquitous across unix-like systems

248
00:09:55,200 --> 00:09:57,060
on Lane 21

249
00:09:57,060 --> 00:10:00,180
we see the exact same technique employed

250
00:10:00,180 --> 00:10:02,399
for the chatter or change attributes

251
00:10:02,399 --> 00:10:03,540
command

252
00:10:03,540 --> 00:10:05,459
except this time with a slightly

253
00:10:05,459 --> 00:10:08,660
different date time string

254
00:10:08,700 --> 00:10:11,399
so why are the three actors in this case

255
00:10:11,399 --> 00:10:14,579
obfuscating usage of chatter into mod in

256
00:10:14,579 --> 00:10:16,200
the first place

257
00:10:16,200 --> 00:10:18,300
of course both of these commands are

258
00:10:18,300 --> 00:10:21,240
specific to file Access Control

259
00:10:21,240 --> 00:10:23,519
most Cloud native malware campaigns

260
00:10:23,519 --> 00:10:25,680
assume that certain files of interest

261
00:10:25,680 --> 00:10:28,560
will be restricted for editing

262
00:10:28,560 --> 00:10:30,600
either via fail attributes or

263
00:10:30,600 --> 00:10:32,040
permissions

264
00:10:32,040 --> 00:10:34,560
so using the Gmod and chapter commands

265
00:10:34,560 --> 00:10:36,300
to modify these permissions or

266
00:10:36,300 --> 00:10:38,279
attributes is of course the most obvious

267
00:10:38,279 --> 00:10:40,620
way to overcome this

268
00:10:40,620 --> 00:10:43,200
this is why we see this in virtually all

269
00:10:43,200 --> 00:10:45,060
malicious shell scripts that we analyze

270
00:10:45,060 --> 00:10:47,719
at Kindle

271
00:10:48,000 --> 00:10:51,000
so clearly this is a creative example of

272
00:10:51,000 --> 00:10:53,579
living off the land to obfuscate system

273
00:10:53,579 --> 00:10:56,100
utilities typically leveraged include

274
00:10:56,100 --> 00:10:57,959
malware campaigns

275
00:10:57,959 --> 00:11:01,620
but how successful actually is it

276
00:11:01,620 --> 00:11:05,160
well out of interest and since my

277
00:11:05,160 --> 00:11:07,260
employer happens to develop an incident

278
00:11:07,260 --> 00:11:09,000
response platform

279
00:11:09,000 --> 00:11:11,160
we decided to run these commands in a

280
00:11:11,160 --> 00:11:13,380
text machine and import an image of it

281
00:11:13,380 --> 00:11:15,779
into Kato to see how this would look to

282
00:11:15,779 --> 00:11:18,540
an instant responder

283
00:11:18,540 --> 00:11:20,519
so as you can see on the highlighted

284
00:11:20,519 --> 00:11:22,320
portion of the slide

285
00:11:22,320 --> 00:11:25,440
Cato identified a disparity between the

286
00:11:25,440 --> 00:11:27,959
timestamps of both the mod user and

287
00:11:27,959 --> 00:11:30,240
chair user files

288
00:11:30,240 --> 00:11:32,820
it seems like the touch command updated

289
00:11:32,820 --> 00:11:35,760
both the modified and access timestamps

290
00:11:35,760 --> 00:11:38,399
to the date time hard-coded in the shell

291
00:11:38,399 --> 00:11:39,899
script

292
00:11:39,899 --> 00:11:43,320
however most importantly for us as

293
00:11:43,320 --> 00:11:46,200
Defenders or response responders

294
00:11:46,200 --> 00:11:50,420
the created time was still correct

295
00:11:50,880 --> 00:11:53,339
it seemed likely that this was an

296
00:11:53,339 --> 00:11:55,620
attempt to obfuscate usage of the

297
00:11:55,620 --> 00:11:59,700
chatter into mod command line tools

298
00:11:59,700 --> 00:12:02,100
as some forensic stones may prioritize

299
00:12:02,100 --> 00:12:05,339
files recently accessed or executed when

300
00:12:05,339 --> 00:12:08,579
building a timeline of events

301
00:12:08,579 --> 00:12:11,279
using a copy of these system binaries

302
00:12:11,279 --> 00:12:14,459
also avoids alerting admins who may have

303
00:12:14,459 --> 00:12:16,620
set up monitoring for execution of these

304
00:12:16,620 --> 00:12:19,040
utilities

305
00:12:20,279 --> 00:12:22,620
so you may be thinking that using touch

306
00:12:22,620 --> 00:12:25,019
for time stomping is not particularly

307
00:12:25,019 --> 00:12:27,600
novel or technically advanced

308
00:12:27,600 --> 00:12:30,120
however this following technique we've

309
00:12:30,120 --> 00:12:33,480
yet to see in other campaigns

310
00:12:33,480 --> 00:12:35,940
so this seemingly innocuous one-liner

311
00:12:35,940 --> 00:12:37,700
that we can see on the slide here

312
00:12:37,700 --> 00:12:41,040
residing at line 23 of the same script

313
00:12:41,040 --> 00:12:43,079
we saw the time stomping Behavior

314
00:12:43,079 --> 00:12:44,880
actually is some pretty interesting

315
00:12:44,880 --> 00:12:46,800
stuff going on

316
00:12:46,800 --> 00:12:48,300
first of all

317
00:12:48,300 --> 00:12:51,300
RM is used to remove all files or

318
00:12:51,300 --> 00:12:54,480
subdirectories within user share which

319
00:12:54,480 --> 00:12:57,300
of the string crypto in the name

320
00:12:57,300 --> 00:12:59,160
so this of course sounded quite

321
00:12:59,160 --> 00:13:01,800
interesting to us as malware analysts

322
00:13:01,800 --> 00:13:04,079
so we had a look at what might be stored

323
00:13:04,079 --> 00:13:06,540
under such a directory in various Linux

324
00:13:06,540 --> 00:13:08,760
distributions

325
00:13:08,760 --> 00:13:11,700
this led us to discover that in real and

326
00:13:11,700 --> 00:13:14,160
rail light distributions it's possible

327
00:13:14,160 --> 00:13:16,320
to define a system-wide cryptographic

328
00:13:16,320 --> 00:13:18,899
policy which is stored in config files

329
00:13:18,899 --> 00:13:22,680
under user share crypto hyphen policies

330
00:13:22,680 --> 00:13:26,459
these policies allow or deny application

331
00:13:26,459 --> 00:13:29,279
Level usage of certain cryptographic

332
00:13:29,279 --> 00:13:32,040
protocols depending on the user's risk

333
00:13:32,040 --> 00:13:34,019
posture

334
00:13:34,019 --> 00:13:35,880
so for example

335
00:13:35,880 --> 00:13:38,160
American Federal institutions are

336
00:13:38,160 --> 00:13:40,139
required to deploy Computing systems

337
00:13:40,139 --> 00:13:43,800
which conform to fips 140-2

338
00:13:43,800 --> 00:13:45,720
and there's a FIP specific policy

339
00:13:45,720 --> 00:13:49,680
bundled with rail to help enforce this

340
00:13:49,680 --> 00:13:51,060
clearly

341
00:13:51,060 --> 00:13:52,800
this is an attempt by the malware

342
00:13:52,800 --> 00:13:55,260
developer to weaken the system by

343
00:13:55,260 --> 00:13:57,839
removing such policies

344
00:13:57,839 --> 00:14:00,060
in order to enforce the cryptographic

345
00:14:00,060 --> 00:14:01,740
policies in the first place

346
00:14:01,740 --> 00:14:04,680
a process named crypto is used which

347
00:14:04,680 --> 00:14:06,779
interfaces with the Linux kernel crypto

348
00:14:06,779 --> 00:14:08,699
API

349
00:14:08,699 --> 00:14:10,860
to ensure that the policies are indeed

350
00:14:10,860 --> 00:14:12,839
removed from the system and no longer

351
00:14:12,839 --> 00:14:13,980
enforced

352
00:14:13,980 --> 00:14:16,380
the malware then goes ahead and kills

353
00:14:16,380 --> 00:14:18,300
the crypto process after removing the

354
00:14:18,300 --> 00:14:20,160
config files

355
00:14:20,160 --> 00:14:21,839
so this is something that wasn't really

356
00:14:21,839 --> 00:14:23,699
picked up on when we first published

357
00:14:23,699 --> 00:14:25,740
about this threat but I think that it's

358
00:14:25,740 --> 00:14:27,899
particularly interesting

359
00:14:27,899 --> 00:14:29,820
so if anyone else has seen this then

360
00:14:29,820 --> 00:14:31,019
please let me know as if you're

361
00:14:31,019 --> 00:14:33,920
interested to discuss it

362
00:14:34,560 --> 00:14:36,959
this was another interesting and very

363
00:14:36,959 --> 00:14:39,720
linuxy technique employed by Coinstar

364
00:14:39,720 --> 00:14:43,440
for the purposes of evading detection

365
00:14:43,440 --> 00:14:45,959
so as I'm sure you'll know most Linux

366
00:14:45,959 --> 00:14:47,820
distributions support read write

367
00:14:47,820 --> 00:14:50,880
operations to a remote host via the dev

368
00:14:50,880 --> 00:14:53,579
TCP device file

369
00:14:53,579 --> 00:14:56,339
naturally this is an easy and natively

370
00:14:56,339 --> 00:14:58,620
supported way of creating a reverse

371
00:14:58,620 --> 00:15:02,600
shell or C2 Communications Channel

372
00:15:02,880 --> 00:15:05,279
so as we can see on screen here

373
00:15:05,279 --> 00:15:07,860
the function cuddle is used to retrieve

374
00:15:07,860 --> 00:15:09,540
payloads and communicate information

375
00:15:09,540 --> 00:15:11,880
about the state of the system back to a

376
00:15:11,880 --> 00:15:13,980
C2 server

377
00:15:13,980 --> 00:15:16,560
line 4 establishes communication with

378
00:15:16,560 --> 00:15:19,260
this server over Port 443

379
00:15:19,260 --> 00:15:21,660
the port typically associated with https

380
00:15:21,660 --> 00:15:24,079
traffic

381
00:15:24,779 --> 00:15:27,120
we looked the IP of the remote server up

382
00:15:27,120 --> 00:15:28,380
in Showdown

383
00:15:28,380 --> 00:15:30,000
and saw that the server was running

384
00:15:30,000 --> 00:15:34,680
Python's simple HTTP server module

385
00:15:34,680 --> 00:15:36,600
so this suggests that although the

386
00:15:36,600 --> 00:15:39,300
traffic was going over Port 443 the

387
00:15:39,300 --> 00:15:42,959
traffic itself wasn't actually encrypted

388
00:15:42,959 --> 00:15:44,880
so clearly this wouldn't fill anyone

389
00:15:44,880 --> 00:15:48,120
with robust traffic monitoring in place

390
00:15:48,120 --> 00:15:50,519
but we suspect that it was an attempt to

391
00:15:50,519 --> 00:15:52,560
ensure that C2 Communications passed

392
00:15:52,560 --> 00:15:53,459
freely

393
00:15:53,459 --> 00:15:56,639
as it's unlikely that 443 outbound would

394
00:15:56,639 --> 00:15:59,100
be blocked by firewalls in the Target

395
00:15:59,100 --> 00:16:01,639
environment

396
00:16:01,759 --> 00:16:04,320
so we observed this function being

397
00:16:04,320 --> 00:16:06,300
invoked on a regular basis throughout

398
00:16:06,300 --> 00:16:08,759
the coinstop payloads

399
00:16:08,759 --> 00:16:11,579
usually in vacation would occur after

400
00:16:11,579 --> 00:16:14,220
file existence checks used to determine

401
00:16:14,220 --> 00:16:17,160
whether it was necessary to retrieve

402
00:16:17,160 --> 00:16:19,860
additional payloads

403
00:16:19,860 --> 00:16:22,079
this makes us a stealthy way for the

404
00:16:22,079 --> 00:16:23,699
attackers to register additional

405
00:16:23,699 --> 00:16:26,060
implants

406
00:16:27,899 --> 00:16:29,639
so this was an interesting and

407
00:16:29,639 --> 00:16:32,220
unexpected finding when analyzing some

408
00:16:32,220 --> 00:16:35,459
more of the coin stop payloads

409
00:16:35,459 --> 00:16:37,920
coin stamp made use of KRON as a

410
00:16:37,920 --> 00:16:40,259
persistence mechanism and registered a

411
00:16:40,259 --> 00:16:42,660
Cron job under the root user

412
00:16:42,660 --> 00:16:44,040
whoever

413
00:16:44,040 --> 00:16:46,620
rather than using this persistence to

414
00:16:46,620 --> 00:16:50,040
launch or relaunch malicious payloads as

415
00:16:50,040 --> 00:16:51,899
most malware would

416
00:16:51,899 --> 00:16:54,420
coinstomp in States use the crown job to

417
00:16:54,420 --> 00:16:57,480
kill the tail and mask and utilities

418
00:16:57,480 --> 00:16:59,579
the latter of which is often used in

419
00:16:59,579 --> 00:17:01,199
these types of campaigns to find

420
00:17:01,199 --> 00:17:04,519
vulnerable servers to Target

421
00:17:06,119 --> 00:17:08,880
noticed an interested commented line in

422
00:17:08,880 --> 00:17:10,799
the Cron job which you may be able to

423
00:17:10,799 --> 00:17:14,339
make out on line 24th reader

424
00:17:14,339 --> 00:17:16,919
at one point it seems as if the code

425
00:17:16,919 --> 00:17:20,459
hosting service and on pasta was used to

426
00:17:20,459 --> 00:17:22,439
host an additional payload for the coin

427
00:17:22,439 --> 00:17:24,959
stomp campaign

428
00:17:24,959 --> 00:17:28,260
we can see on Lane 243 that the URL for

429
00:17:28,260 --> 00:17:30,419
this provider is still added to the

430
00:17:30,419 --> 00:17:33,059
crown job but it's commented out

431
00:17:33,059 --> 00:17:35,700
resulting in it having no effect on the

432
00:17:35,700 --> 00:17:38,160
job itself

433
00:17:38,160 --> 00:17:40,679
when we visited the URL we found another

434
00:17:40,679 --> 00:17:41,940
URL

435
00:17:41,940 --> 00:17:45,059
pointing to the Anon DNS Anonymous DNS

436
00:17:45,059 --> 00:17:46,860
provider

437
00:17:46,860 --> 00:17:49,500
so this URL contains the number of

438
00:17:49,500 --> 00:17:51,600
strings that we recognize from a prior

439
00:17:51,600 --> 00:17:52,980
campaign

440
00:17:52,980 --> 00:17:56,039
the first of which was Xanthi a crypto

441
00:17:56,039 --> 00:17:58,440
mining campaign discovered by Cisco

442
00:17:58,440 --> 00:18:00,840
Talos that we'll come back to later in

443
00:18:00,840 --> 00:18:03,139
the talk

444
00:18:06,480 --> 00:18:07,980
furthermore

445
00:18:07,980 --> 00:18:09,900
one of the payloads in the Zante

446
00:18:09,900 --> 00:18:12,299
campaign that we'd analyzed

447
00:18:12,299 --> 00:18:16,200
was called fcyzo same as the resource in

448
00:18:16,200 --> 00:18:18,440
the URL here

449
00:18:18,440 --> 00:18:22,020
unfortunately the URL was down when we

450
00:18:22,020 --> 00:18:24,059
attempted to retrieve this payload

451
00:18:24,059 --> 00:18:25,980
so we couldn't determine whether it was

452
00:18:25,980 --> 00:18:27,960
the exact same installation script as

453
00:18:27,960 --> 00:18:30,600
we'd seen in this anti-campaign

454
00:18:30,600 --> 00:18:32,880
we also didn't notice any overlap of

455
00:18:32,880 --> 00:18:35,100
infrastructure between these campaigns

456
00:18:35,100 --> 00:18:37,200
or anything else that would suggest they

457
00:18:37,200 --> 00:18:39,240
were linked

458
00:18:39,240 --> 00:18:41,580
so this led us to conclude that the URL

459
00:18:41,580 --> 00:18:43,440
likely contained those names in an

460
00:18:43,440 --> 00:18:46,640
attempt to foil attribution

461
00:18:48,120 --> 00:18:50,880
so finally to round off our overview of

462
00:18:50,880 --> 00:18:53,100
coin stump we noticed this rather

463
00:18:53,100 --> 00:18:56,460
amusing spelling mistake when stat when

464
00:18:56,460 --> 00:18:58,380
statically analyzing the custom version

465
00:18:58,380 --> 00:19:00,840
of XM rig that the coin stop scripts

466
00:19:00,840 --> 00:19:02,460
drop

467
00:19:02,460 --> 00:19:04,260
so we're not sure if this is deliberate

468
00:19:04,260 --> 00:19:06,539
or not but it was jokingly suggested

469
00:19:06,539 --> 00:19:08,580
that it could be a reference to British

470
00:19:08,580 --> 00:19:10,980
crime actor Jason Statham

471
00:19:10,980 --> 00:19:12,840
who may well have had some involvement

472
00:19:12,840 --> 00:19:15,299
in this campaign

473
00:19:15,299 --> 00:19:17,039
so I'm not sure if everyone here will

474
00:19:17,039 --> 00:19:19,140
know him or not but I've included a

475
00:19:19,140 --> 00:19:20,820
photo of them on the next slide for

476
00:19:20,820 --> 00:19:23,600
visual reference

477
00:19:27,780 --> 00:19:29,580
so now we've covered our first malware

478
00:19:29,580 --> 00:19:31,679
family I'm going to move on to another

479
00:19:31,679 --> 00:19:35,039
Cloud native campaign named ABC bot that

480
00:19:35,039 --> 00:19:39,080
we've been tracking since late 2021

481
00:19:40,260 --> 00:19:42,780
to give a quick overview of this family

482
00:19:42,780 --> 00:19:45,780
similar to coin stomp ABC bot is a

483
00:19:45,780 --> 00:19:47,460
botnet which is spread via

484
00:19:47,460 --> 00:19:50,160
initialization shell scripts and targets

485
00:19:50,160 --> 00:19:53,940
Asian csps such as tencent vaidu and

486
00:19:53,940 --> 00:19:56,580
Alibaba cloud

487
00:19:56,580 --> 00:19:58,559
so the malware includes payloads

488
00:19:58,559 --> 00:20:01,080
consisting of shell scripts and elf

489
00:20:01,080 --> 00:20:03,539
executables with the shell scripts in

490
00:20:03,539 --> 00:20:05,340
particular displaying some notable

491
00:20:05,340 --> 00:20:07,860
capabilities

492
00:20:07,860 --> 00:20:11,179
these capabilities include insertion of

493
00:20:11,179 --> 00:20:13,919
attacker-controlled SSH keys to main

494
00:20:13,919 --> 00:20:17,480
maintain access to the Target system

495
00:20:17,480 --> 00:20:20,700
self-propagation in a worm-like fashion

496
00:20:20,700 --> 00:20:23,039
using information about Cloud Security

497
00:20:23,039 --> 00:20:25,980
Services and competing malware campaigns

498
00:20:25,980 --> 00:20:28,440
to disable competitors

499
00:20:28,440 --> 00:20:31,380
and registration of persistence via

500
00:20:31,380 --> 00:20:35,240
common Linux persistence techniques

501
00:20:36,360 --> 00:20:38,580
so the campaign was originally reported

502
00:20:38,580 --> 00:20:43,980
on in November 2021 by netlab 360.

503
00:20:43,980 --> 00:20:47,520
netlab 362 Focus their analysis on the

504
00:20:47,520 --> 00:20:49,740
elf payloads used to connect the

505
00:20:49,740 --> 00:20:52,260
infected machine to the botnet

506
00:20:52,260 --> 00:20:54,120
I've included a reference to their

507
00:20:54,120 --> 00:20:55,860
research at the end of the talk if you'd

508
00:20:55,860 --> 00:20:58,140
like to know more about this

509
00:20:58,140 --> 00:21:00,419
so for this reason we won't cover the

510
00:21:00,419 --> 00:21:02,580
botnet related payloads today

511
00:21:02,580 --> 00:21:04,200
instead we'll cover one of the

512
00:21:04,200 --> 00:21:06,240
installation shell scripts used to

513
00:21:06,240 --> 00:21:07,740
propagate the malware and download

514
00:21:07,740 --> 00:21:10,260
additional payloads

515
00:21:10,260 --> 00:21:12,240
we believe this script reveals more

516
00:21:12,240 --> 00:21:14,159
about the attacker's capabilities and

517
00:21:14,159 --> 00:21:16,740
objectives since the botnet payloads was

518
00:21:16,740 --> 00:21:19,940
based on open source code

519
00:21:20,039 --> 00:21:22,559
in fitting with the theme of this talk

520
00:21:22,559 --> 00:21:24,419
the attacker's knowledge of the cloud

521
00:21:24,419 --> 00:21:26,400
environments which their campaign

522
00:21:26,400 --> 00:21:29,100
targets was also evident in this shell

523
00:21:29,100 --> 00:21:31,399
script

524
00:21:32,640 --> 00:21:34,500
so let's begin by taking a look at an

525
00:21:34,500 --> 00:21:36,840
interesting capability displayed by the

526
00:21:36,840 --> 00:21:38,940
ABC bot malware family

527
00:21:38,940 --> 00:21:41,400
the killing of competitors although

528
00:21:41,400 --> 00:21:44,400
fortunately not in a literal sense

529
00:21:44,400 --> 00:21:46,740
so one thing that is immediately clear

530
00:21:46,740 --> 00:21:48,780
from analyzing this initialization

531
00:21:48,780 --> 00:21:51,780
script is that the developers behind ABC

532
00:21:51,780 --> 00:21:54,360
bot are really invested in killing off

533
00:21:54,360 --> 00:21:56,580
competing miners in cryptojacking

534
00:21:56,580 --> 00:21:58,440
campaigns

535
00:21:58,440 --> 00:22:00,360
the function that you can see on screen

536
00:22:00,360 --> 00:22:02,880
here which is several hundred lines long

537
00:22:02,880 --> 00:22:06,120
is dedicated to removing artifacts of

538
00:22:06,120 --> 00:22:08,580
competing malware campaigns and Mining

539
00:22:08,580 --> 00:22:11,520
software such as xmrig

540
00:22:11,520 --> 00:22:13,320
so we also observed the malware

541
00:22:13,320 --> 00:22:16,380
searching for processes associated with

542
00:22:16,380 --> 00:22:19,140
other prominent Linux malware campaigns

543
00:22:19,140 --> 00:22:21,840
so for example things like Watchdog and

544
00:22:21,840 --> 00:22:24,360
kinsing

545
00:22:24,360 --> 00:22:27,059
this suggests that those behind ABC bot

546
00:22:27,059 --> 00:22:30,120
actively maintain a working knowledge of

547
00:22:30,120 --> 00:22:34,039
the cloud security threat landscape

548
00:22:34,140 --> 00:22:37,200
in a similar vein the malware also

549
00:22:37,200 --> 00:22:38,940
searches for malicious stalker images

550
00:22:38,940 --> 00:22:41,460
and removes or can or kills the

551
00:22:41,460 --> 00:22:44,520
containers as appropriate

552
00:22:44,520 --> 00:22:47,159
so this strongly suggests the ABC bot

553
00:22:47,159 --> 00:22:49,860
relies on exploitation of misconfigured

554
00:22:49,860 --> 00:22:53,100
Docker API endpoints for propagation

555
00:22:53,100 --> 00:22:55,200
which is of course a common infection

556
00:22:55,200 --> 00:22:58,020
Vector in Cloud environments and used

557
00:22:58,020 --> 00:23:02,539
utilized by many Cloud native campaigns

558
00:23:04,620 --> 00:23:07,799
so clearly the ABC Board developers had

559
00:23:07,799 --> 00:23:10,200
invested significant time into

560
00:23:10,200 --> 00:23:12,720
researching Cloud security threats given

561
00:23:12,720 --> 00:23:14,700
the previous slide

562
00:23:14,700 --> 00:23:18,360
however not only that but the developers

563
00:23:18,360 --> 00:23:20,940
also demonstrated a knowledge of cloud

564
00:23:20,940 --> 00:23:24,059
security mechanisms as disabling of

565
00:23:24,059 --> 00:23:26,520
Security Services native to the csps

566
00:23:26,520 --> 00:23:29,520
targeted was performed

567
00:23:29,520 --> 00:23:31,320
so this of course allowed their malware

568
00:23:31,320 --> 00:23:33,960
to execute unimpeded

569
00:23:33,960 --> 00:23:36,600
and also allows us as analysts to

570
00:23:36,600 --> 00:23:40,020
determine the targets of the campaign

571
00:23:40,020 --> 00:23:43,080
for example several lines were dedicated

572
00:23:43,080 --> 00:23:45,600
to killing processes associated with the

573
00:23:45,600 --> 00:23:48,059
Alibaba and tencent Cloud security

574
00:23:48,059 --> 00:23:52,140
agents as we can see on screen here

575
00:23:52,140 --> 00:23:55,140
similarly the uninstallation scripts

576
00:23:55,140 --> 00:23:57,659
often baked into instances hosted by

577
00:23:57,659 --> 00:24:00,299
these csps were used to completely

578
00:24:00,299 --> 00:24:02,520
uninstall monitoring software in some

579
00:24:02,520 --> 00:24:04,919
instances

580
00:24:04,919 --> 00:24:07,200
the ease of which these monitoring tools

581
00:24:07,200 --> 00:24:10,080
can be removed could well be another

582
00:24:10,080 --> 00:24:12,720
reason as to why these csps in

583
00:24:12,720 --> 00:24:16,100
particular were targeted

584
00:24:18,240 --> 00:24:20,100
so we'll move on now to look at some

585
00:24:20,100 --> 00:24:22,679
methods of maintaining access employed

586
00:24:22,679 --> 00:24:25,140
by ABC book

587
00:24:25,140 --> 00:24:27,419
a key objective of most malware

588
00:24:27,419 --> 00:24:29,520
campaigns is to establish network

589
00:24:29,520 --> 00:24:31,980
connectivity to allow biodirectional

590
00:24:31,980 --> 00:24:34,260
communication with the attacker this is

591
00:24:34,260 --> 00:24:37,140
of course known as command and control

592
00:24:37,140 --> 00:24:39,779
we saw this in our coverage of coin

593
00:24:39,779 --> 00:24:43,020
Stomp and its use of a Dev TCP reverse

594
00:24:43,020 --> 00:24:44,940
shell

595
00:24:44,940 --> 00:24:48,120
in a function named iptables Checker the

596
00:24:48,120 --> 00:24:51,059
developer behind ABC bot configures the

597
00:24:51,059 --> 00:24:54,000
Linux IP tables firewall to drop or

598
00:24:54,000 --> 00:24:56,700
accept traffic based on port numbers and

599
00:24:56,700 --> 00:24:59,340
Source IP addresses

600
00:24:59,340 --> 00:25:01,980
this particular function gave us some

601
00:25:01,980 --> 00:25:04,020
insights into the state of this campaign

602
00:25:04,020 --> 00:25:07,380
at the time of analysis

603
00:25:07,380 --> 00:25:10,020
so for example it's clear from the

604
00:25:10,020 --> 00:25:11,640
function that the malware is under

605
00:25:11,640 --> 00:25:13,799
active development as the author has

606
00:25:13,799 --> 00:25:17,120
left plenty of commented code

607
00:25:17,279 --> 00:25:19,740
and one of the commented rules it

608
00:25:19,740 --> 00:25:21,720
appears as if the developer configured

609
00:25:21,720 --> 00:25:24,480
IP tables to accept all Ingress traffic

610
00:25:24,480 --> 00:25:27,240
from a remote IP

611
00:25:27,240 --> 00:25:29,820
this was likely a C2 server under the

612
00:25:29,820 --> 00:25:32,418
attacker's control

613
00:25:32,460 --> 00:25:35,340
so another comment to drill drops

614
00:25:35,340 --> 00:25:38,460
English traffic from ports 2375 and

615
00:25:38,460 --> 00:25:40,320
2376.

616
00:25:40,320 --> 00:25:42,960
of course as we all know these ports are

617
00:25:42,960 --> 00:25:44,700
typically associated with the docker

618
00:25:44,700 --> 00:25:47,100
engine API

619
00:25:47,100 --> 00:25:49,080
we suspect that this was added at one

620
00:25:49,080 --> 00:25:51,840
point to prevent halt attempts to Halt

621
00:25:51,840 --> 00:25:54,179
execution of any malicious Docker

622
00:25:54,179 --> 00:25:57,679
containers the malware creates

623
00:25:57,960 --> 00:26:00,179
a check is also done to see whether

624
00:26:00,179 --> 00:26:03,059
these rules are already in place but if

625
00:26:03,059 --> 00:26:06,559
they aren't they're no longer added

626
00:26:06,559 --> 00:26:10,260
instead a more genetic rule is added to

627
00:26:10,260 --> 00:26:12,360
allow all Ingress traffic to a

628
00:26:12,360 --> 00:26:17,120
non-standard port number of 26 800.

629
00:26:17,120 --> 00:26:19,860
interestingly URLs embedded in the

630
00:26:19,860 --> 00:26:23,600
malware also made use of the sport

631
00:26:25,260 --> 00:26:28,740
so another notable technique of ABC bot

632
00:26:28,740 --> 00:26:31,440
was the ability to infect related hosts

633
00:26:31,440 --> 00:26:34,140
with a copy of itself

634
00:26:34,140 --> 00:26:37,559
firstly the malware removes SSH Keys

635
00:26:37,559 --> 00:26:40,260
found on the host which appear to be

636
00:26:40,260 --> 00:26:42,659
from similar attacks

637
00:26:42,659 --> 00:26:45,240
it then goes ahead and inserts its own

638
00:26:45,240 --> 00:26:48,240
SSH key to guarantee ongoing access to

639
00:26:48,240 --> 00:26:50,520
the host

640
00:26:50,520 --> 00:26:52,620
after this as we can see on the slide

641
00:26:52,620 --> 00:26:54,659
here the malware checks for the

642
00:26:54,659 --> 00:26:57,720
existence of roots SSH known host file

643
00:26:57,720 --> 00:27:01,140
and a corresponding public key

644
00:27:01,140 --> 00:27:03,720
if these files are found in Roots SSH

645
00:27:03,720 --> 00:27:06,960
directory non-hosts are enumerated in a

646
00:27:06,960 --> 00:27:09,000
loop and a copy of the installation

647
00:27:09,000 --> 00:27:10,980
script is run on each of the remote

648
00:27:10,980 --> 00:27:13,320
hosts found

649
00:27:13,320 --> 00:27:15,659
this ensures propagation of the malware

650
00:27:15,659 --> 00:27:18,240
in a warm-like fashion and could result

651
00:27:18,240 --> 00:27:20,580
in an organization's entire Cloud estate

652
00:27:20,580 --> 00:27:24,260
being rapidly compromised

653
00:27:25,260 --> 00:27:27,059
so now that we've covered some of the

654
00:27:27,059 --> 00:27:30,059
notable capabilities of ABC bot let's

655
00:27:30,059 --> 00:27:32,220
discuss an unexpected finding that

656
00:27:32,220 --> 00:27:36,500
emerged during analysis of the campaign

657
00:27:36,539 --> 00:27:39,360
when analyzing ABC bot we were initially

658
00:27:39,360 --> 00:27:40,980
under the impression that we were

659
00:27:40,980 --> 00:27:43,260
analyzing a relatively new malware

660
00:27:43,260 --> 00:27:45,059
family

661
00:27:45,059 --> 00:27:47,399
continued analysis revealed that this

662
00:27:47,399 --> 00:27:49,380
malware had a longer history than we

663
00:27:49,380 --> 00:27:51,360
initially thought

664
00:27:51,360 --> 00:27:53,539
so back in late 2020

665
00:27:53,539 --> 00:27:56,100
Cisco's Tyler security research team

666
00:27:56,100 --> 00:27:58,020
reported on an emerging Cloud

667
00:27:58,020 --> 00:28:00,120
cryptojacking malware campaign the

668
00:28:00,120 --> 00:28:02,640
name's Anthony

669
00:28:02,640 --> 00:28:05,279
was originally discovered after an

670
00:28:05,279 --> 00:28:07,200
intrusion was found on one of Talos

671
00:28:07,200 --> 00:28:09,960
docker honeypots

672
00:28:09,960 --> 00:28:12,240
so we discovered a link between ABC but

673
00:28:12,240 --> 00:28:15,000
and Zante when conducting analysis on

674
00:28:15,000 --> 00:28:16,919
the infrastructure behind the ABC bot

675
00:28:16,919 --> 00:28:18,960
campaign

676
00:28:18,960 --> 00:28:21,419
once we began comparing samples from

677
00:28:21,419 --> 00:28:22,940
both campaigns

678
00:28:22,940 --> 00:28:25,320
similarities and features and

679
00:28:25,320 --> 00:28:28,320
capabilities began to emerge

680
00:28:28,320 --> 00:28:30,539
additional comparison of the codes used

681
00:28:30,539 --> 00:28:32,580
in samples in both campaigns further

682
00:28:32,580 --> 00:28:35,658
confirmed their suspicions

683
00:28:36,240 --> 00:28:38,100
so before discussing the similarities

684
00:28:38,100 --> 00:28:40,260
between these families let's have an

685
00:28:40,260 --> 00:28:42,899
overview of xanthe itself

686
00:28:42,899 --> 00:28:45,000
xantha is a family of cryptojacking

687
00:28:45,000 --> 00:28:47,159
malware with the primary objective of

688
00:28:47,159 --> 00:28:49,380
hijacking system resources to mine the

689
00:28:49,380 --> 00:28:51,899
Monero cryptocurrency

690
00:28:51,899 --> 00:28:54,000
in order to main Monero On Target

691
00:28:54,000 --> 00:28:57,779
systems the common open source minor XM

692
00:28:57,779 --> 00:29:01,320
rig is is deployed

693
00:29:01,320 --> 00:29:03,480
so similar to ABC bot

694
00:29:03,480 --> 00:29:06,240
Zante also spreads via exposed Docker

695
00:29:06,240 --> 00:29:08,760
API endpoints with an initialization

696
00:29:08,760 --> 00:29:11,159
shell script responsible for propagation

697
00:29:11,159 --> 00:29:14,100
Network scanning and downloading of

698
00:29:14,100 --> 00:29:16,460
additional payloads

699
00:29:16,460 --> 00:29:19,500
xanthi's additional payloads included an

700
00:29:19,500 --> 00:29:22,860
open source library for hiding processes

701
00:29:22,860 --> 00:29:25,980
script to disable Security Services and

702
00:29:25,980 --> 00:29:28,620
kill competing Miners and the XM reg

703
00:29:28,620 --> 00:29:30,840
binary itself

704
00:29:30,840 --> 00:29:32,520
so if you're paying attention to the

705
00:29:32,520 --> 00:29:34,140
previous section of this talk then this

706
00:29:34,140 --> 00:29:37,320
will probably sound familiar too

707
00:29:37,320 --> 00:29:38,760
so let's take a look at some of the

708
00:29:38,760 --> 00:29:40,380
signs that demonstrated these campaigns

709
00:29:40,380 --> 00:29:42,860
were linked

710
00:29:43,260 --> 00:29:45,559
in the report published in late 2020

711
00:29:45,559 --> 00:29:48,179
Talos researchers commented on the

712
00:29:48,179 --> 00:29:49,620
coding style present in this

713
00:29:49,620 --> 00:29:51,659
anti-scripts they analyzed

714
00:29:51,659 --> 00:29:53,760
they highlighted that in the samples

715
00:29:53,760 --> 00:29:56,220
analyzed function declarations were

716
00:29:56,220 --> 00:29:58,260
located at the top of the script and

717
00:29:58,260 --> 00:30:00,120
function invocation was conducted at the

718
00:30:00,120 --> 00:30:01,440
bottom

719
00:30:01,440 --> 00:30:04,020
Tyler suggested that this likely aided

720
00:30:04,020 --> 00:30:06,240
testing of new iterations with function

721
00:30:06,240 --> 00:30:08,159
calls commented or uncommented as

722
00:30:08,159 --> 00:30:09,419
necessary

723
00:30:09,419 --> 00:30:12,000
so although this is of course a fairly

724
00:30:12,000 --> 00:30:14,220
tenuous link it's interesting to note

725
00:30:14,220 --> 00:30:16,500
that samples from the ABC bot and Santa

726
00:30:16,500 --> 00:30:20,480
campaigns both followed this convention

727
00:30:21,600 --> 00:30:23,279
so diving deeper into the samples

728
00:30:23,279 --> 00:30:24,960
themselves

729
00:30:24,960 --> 00:30:27,539
we see several of the functions in Zante

730
00:30:27,539 --> 00:30:30,120
have an identical name to those in ABC

731
00:30:30,120 --> 00:30:31,860
but

732
00:30:31,860 --> 00:30:34,320
some of the functions also have the

733
00:30:34,320 --> 00:30:36,360
string go appended to the end of their

734
00:30:36,360 --> 00:30:37,500
names

735
00:30:37,500 --> 00:30:39,299
and this is another convention that we

736
00:30:39,299 --> 00:30:41,820
observed in both campaigns

737
00:30:41,820 --> 00:30:44,159
so we identified five functions with

738
00:30:44,159 --> 00:30:45,840
identical naming that you can see on the

739
00:30:45,840 --> 00:30:47,340
slide here

740
00:30:47,340 --> 00:30:49,559
subsequent analysis of each of the above

741
00:30:49,559 --> 00:30:51,779
functions was performed and they were

742
00:30:51,779 --> 00:30:54,480
determined to be semantically equivalent

743
00:30:54,480 --> 00:30:56,279
so these functions were mainly

744
00:30:56,279 --> 00:30:58,980
responsible for adding public DNS

745
00:30:58,980 --> 00:31:01,440
servers to resolve.com to ensure

746
00:31:01,440 --> 00:31:04,399
outbound DNS requests could be made

747
00:31:04,399 --> 00:31:07,860
registering persistence via cron and RC

748
00:31:07,860 --> 00:31:09,059
Scripts

749
00:31:09,059 --> 00:31:12,120
creating and modifying iptables rules as

750
00:31:12,120 --> 00:31:14,220
we saw earlier in our analysis of ABC

751
00:31:14,220 --> 00:31:15,179
bot

752
00:31:15,179 --> 00:31:17,279
and downloading of additional payloads

753
00:31:17,279 --> 00:31:19,260
such as those used to connect the

754
00:31:19,260 --> 00:31:21,559
machine to the botnet in ABC Bots case

755
00:31:21,559 --> 00:31:24,240
and the downloading of the XM rig in

756
00:31:24,240 --> 00:31:26,960
xanti's case

757
00:31:29,159 --> 00:31:31,320
so we mentioned earlier the propagation

758
00:31:31,320 --> 00:31:33,779
via numeration of known hosts was a

759
00:31:33,779 --> 00:31:36,419
notable capability of ABC bot

760
00:31:36,419 --> 00:31:38,940
this exact same technique was used in

761
00:31:38,940 --> 00:31:41,760
the samples of xantha we analyzed albeit

762
00:31:41,760 --> 00:31:45,360
with a slightly different implementation

763
00:31:45,360 --> 00:31:47,640
examples of the codes responsible from

764
00:31:47,640 --> 00:31:51,059
both campaigns can be seen on the slide

765
00:31:51,059 --> 00:31:54,240
similarly in ABC but a number of

766
00:31:54,240 --> 00:31:56,460
malicious users were added to the system

767
00:31:56,460 --> 00:31:59,279
to facilitate a back door

768
00:31:59,279 --> 00:32:01,500
the users added to the system were

769
00:32:01,500 --> 00:32:04,260
identical in samples from both campaigns

770
00:32:04,260 --> 00:32:07,220
and included usernames such as logger

771
00:32:07,220 --> 00:32:12,019
Cecil system and Auto updater

772
00:32:12,059 --> 00:32:15,419
both ABC book and xanthe searched for

773
00:32:15,419 --> 00:32:18,179
and removed hard-coded users

774
00:32:18,179 --> 00:32:20,940
when analyzing ABC but we originally

775
00:32:20,940 --> 00:32:22,860
believed that the usernames been

776
00:32:22,860 --> 00:32:24,539
searched for were from competing

777
00:32:24,539 --> 00:32:26,100
campaigns

778
00:32:26,100 --> 00:32:27,360
however

779
00:32:27,360 --> 00:32:29,580
we now believe that at least one of the

780
00:32:29,580 --> 00:32:32,279
usernames search for by ABC bot was from

781
00:32:32,279 --> 00:32:34,019
a historical campaign from yesterday

782
00:32:34,019 --> 00:32:35,880
actor

783
00:32:35,880 --> 00:32:38,820
the username in question was opsec

784
00:32:38,820 --> 00:32:42,779
underscore X12 and both at ABC bot and

785
00:32:42,779 --> 00:32:46,860
Zante included code to remove this user

786
00:32:46,860 --> 00:32:48,840
when we first analyze samples from

787
00:32:48,840 --> 00:32:51,419
xanthe we realized that this username

788
00:32:51,419 --> 00:32:54,240
was being displayed as ASCII art at the

789
00:32:54,240 --> 00:32:56,940
top of one of the payloads

790
00:32:56,940 --> 00:32:58,740
so while this could of course be an

791
00:32:58,740 --> 00:33:00,600
attempt by one threat actor to copy

792
00:33:00,600 --> 00:33:03,000
another we believed our prior findings

793
00:33:03,000 --> 00:33:04,500
indicated that this was more than

794
00:33:04,500 --> 00:33:07,159
coincidental

795
00:33:07,500 --> 00:33:09,419
so now on to our final and most

796
00:33:09,419 --> 00:33:11,220
interesting finding

797
00:33:11,220 --> 00:33:13,260
although each of the similarities we've

798
00:33:13,260 --> 00:33:14,880
discussed were enough to give us

799
00:33:14,880 --> 00:33:16,440
reasonable suspicion that these

800
00:33:16,440 --> 00:33:18,779
campaigns were linked we still had some

801
00:33:18,779 --> 00:33:20,100
doubts

802
00:33:20,100 --> 00:33:22,799
so code readers is of course common

803
00:33:22,799 --> 00:33:25,380
amongst malware developers with payloads

804
00:33:25,380 --> 00:33:27,059
such as shell scripts where everything

805
00:33:27,059 --> 00:33:29,820
is in plain text copying is even more

806
00:33:29,820 --> 00:33:31,440
likely

807
00:33:31,440 --> 00:33:33,539
so in light of this

808
00:33:33,539 --> 00:33:36,120
we needed one final piece of evidence to

809
00:33:36,120 --> 00:33:39,179
conclusively link the campaigns

810
00:33:39,179 --> 00:33:42,000
we already discussed a function from ABC

811
00:33:42,000 --> 00:33:44,940
bot named iptables Checker which was

812
00:33:44,940 --> 00:33:47,340
responsible for configuring iptables to

813
00:33:47,340 --> 00:33:48,899
allow Ingress traffic from a

814
00:33:48,899 --> 00:33:50,940
non-standard port

815
00:33:50,940 --> 00:33:53,159
an incredibly similar version of this

816
00:33:53,159 --> 00:33:54,899
function was also found in the

817
00:33:54,899 --> 00:33:57,299
xanthosample we analyzed

818
00:33:57,299 --> 00:33:58,860
not only that

819
00:33:58,860 --> 00:34:01,440
but rules used within this function to

820
00:34:01,440 --> 00:34:03,179
allow traffic from the C2 server

821
00:34:03,179 --> 00:34:05,820
included the exact same IP address in

822
00:34:05,820 --> 00:34:08,520
both Sante and an ABC bot

823
00:34:08,520 --> 00:34:10,440
so the lanes from payloads in both

824
00:34:10,440 --> 00:34:12,599
campaigns that demonstrate this are

825
00:34:12,599 --> 00:34:15,379
viewable on screen

826
00:34:16,079 --> 00:34:19,199
so to us this constituted an overlap of

827
00:34:19,199 --> 00:34:21,300
infrastructure which was fairly strong

828
00:34:21,300 --> 00:34:24,119
proof that the campaigns were linked

829
00:34:24,119 --> 00:34:26,159
the server at the hard-coded IP address

830
00:34:26,159 --> 00:34:28,260
would have to be under the control of

831
00:34:28,260 --> 00:34:31,619
the developer behind both ABC bot and

832
00:34:31,619 --> 00:34:34,020
xanthe for it to be usefully included in

833
00:34:34,020 --> 00:34:36,179
the script

834
00:34:36,179 --> 00:34:38,399
of course there would be little reason

835
00:34:38,399 --> 00:34:40,500
for the developer to include this if it

836
00:34:40,500 --> 00:34:41,460
wasn't a part of their own

837
00:34:41,460 --> 00:34:43,260
infrastructure

838
00:34:43,260 --> 00:34:45,300
so we believe that this is the strongest

839
00:34:45,300 --> 00:34:47,820
indicator yet that these campaigns are

840
00:34:47,820 --> 00:34:49,918
linked and at the same today actor is

841
00:34:49,918 --> 00:34:52,339
responsible

842
00:34:53,339 --> 00:34:56,460
so in summary the ABC bot and scientific

843
00:34:56,460 --> 00:34:58,020
campaigns demonstrated this

844
00:34:58,020 --> 00:35:00,180
sophistication of malware developers in

845
00:35:00,180 --> 00:35:02,700
the cloud security space

846
00:35:02,700 --> 00:35:05,099
although code reuse is common in malware

847
00:35:05,099 --> 00:35:06,900
particularly malware involving shell

848
00:35:06,900 --> 00:35:09,420
Scripts we've highlighted an overlapping

849
00:35:09,420 --> 00:35:12,660
infrastructure an identified reuse of

850
00:35:12,660 --> 00:35:15,000
unique strings which would be difficult

851
00:35:15,000 --> 00:35:18,960
and or pointless for someone to copy

852
00:35:18,960 --> 00:35:21,780
if the same threat actor is behind these

853
00:35:21,780 --> 00:35:24,359
campaigns we believe that this indicates

854
00:35:24,359 --> 00:35:26,579
a shift away from cryptocurrency mining

855
00:35:26,579 --> 00:35:28,859
which is of course a common objective of

856
00:35:28,859 --> 00:35:31,020
cloud malware and the main objective of

857
00:35:31,020 --> 00:35:32,220
xanthe

858
00:35:32,220 --> 00:35:35,099
onto potentially more destructive botnet

859
00:35:35,099 --> 00:35:37,380
activities as we highlighted with ABC

860
00:35:37,380 --> 00:35:39,680
bot

861
00:35:39,839 --> 00:35:42,240
so this should give you some idea of the

862
00:35:42,240 --> 00:35:45,119
destructive potential of cloud3 actors

863
00:35:45,119 --> 00:35:47,160
if they decide to broaden their Horizons

864
00:35:47,160 --> 00:35:50,598
from cryptojacking that is

865
00:35:52,260 --> 00:35:54,480
so I know that the title of this talk is

866
00:35:54,480 --> 00:35:56,520
a tale of two malware families

867
00:35:56,520 --> 00:35:58,560
but since the two families discussed in

868
00:35:58,560 --> 00:36:01,260
the talk are relatively old now I wanted

869
00:36:01,260 --> 00:36:03,119
to include an example of something

870
00:36:03,119 --> 00:36:05,220
recent which fits with the theme of the

871
00:36:05,220 --> 00:36:06,660
top

872
00:36:06,660 --> 00:36:08,400
I also thought it would be a good idea

873
00:36:08,400 --> 00:36:11,339
to give some tips to Defenders who may

874
00:36:11,339 --> 00:36:13,500
be concerned about preventing or

875
00:36:13,500 --> 00:36:15,240
detecting this type of threat in their

876
00:36:15,240 --> 00:36:17,660
environment

877
00:36:18,720 --> 00:36:20,760
so this snippet is from a recent

878
00:36:20,760 --> 00:36:23,099
campaign from the threat actor Watchdog

879
00:36:23,099 --> 00:36:26,760
who targeted our honeybot infrastructure

880
00:36:26,760 --> 00:36:29,220
it utilizes a similar time stomping

881
00:36:29,220 --> 00:36:31,079
technique as we saw in the overview of

882
00:36:31,079 --> 00:36:32,220
Coinstar

883
00:36:32,220 --> 00:36:35,760
but and perhaps more interestingly we

884
00:36:35,760 --> 00:36:37,920
can see the attackers implementing a

885
00:36:37,920 --> 00:36:39,960
very rudimentary albeit effective

886
00:36:39,960 --> 00:36:42,359
process either

887
00:36:42,359 --> 00:36:45,540
first the binary for PS is copied to

888
00:36:45,540 --> 00:36:49,079
another file named P.S lanigiro

889
00:36:49,079 --> 00:36:51,240
a very simple shell script is then

890
00:36:51,240 --> 00:36:53,040
written to bnps

891
00:36:53,040 --> 00:36:55,260
the sole purpose of which is to call the

892
00:36:55,260 --> 00:36:58,079
renamed PS binary and pipe the output

893
00:36:58,079 --> 00:37:00,780
through an inverse grip to filter out

894
00:37:00,780 --> 00:37:02,640
processes with the names with the

895
00:37:02,640 --> 00:37:07,380
strings ddns and scan in the name

896
00:37:07,380 --> 00:37:11,160
so as you may expect from this ddns and

897
00:37:11,160 --> 00:37:14,160
scan are two malicious processes run by

898
00:37:14,160 --> 00:37:15,540
the malware

899
00:37:15,540 --> 00:37:18,960
amazingly this actually works and it's

900
00:37:18,960 --> 00:37:20,940
perhaps the most unixy process I don't

901
00:37:20,940 --> 00:37:22,980
have ever seen in my life

902
00:37:22,980 --> 00:37:24,780
so more importantly

903
00:37:24,780 --> 00:37:26,579
this demonstrates that you don't need

904
00:37:26,579 --> 00:37:28,680
fancy root kits to have effective

905
00:37:28,680 --> 00:37:31,578
detection evasion

906
00:37:32,460 --> 00:37:34,619
so this was another simple but very

907
00:37:34,619 --> 00:37:36,900
effective but effective technique Sorry

908
00:37:36,900 --> 00:37:39,420
by employed by Watchdog for hiding

909
00:37:39,420 --> 00:37:42,000
artifacts on the target system

910
00:37:42,000 --> 00:37:44,940
so when analyzing their payloads we saw

911
00:37:44,940 --> 00:37:47,220
multiple references to paths containing

912
00:37:47,220 --> 00:37:49,440
directories that were named with three

913
00:37:49,440 --> 00:37:53,160
full stops or an ellipsis

914
00:37:53,160 --> 00:37:55,079
so it turns out that this name is

915
00:37:55,079 --> 00:37:56,760
perfectly valid for files and

916
00:37:56,760 --> 00:37:59,520
directories on Linux systems and has the

917
00:37:59,520 --> 00:38:01,680
added benefit of looking similar to the

918
00:38:01,680 --> 00:38:03,960
two dot Alias for The Parent Directory

919
00:38:03,960 --> 00:38:06,119
and long listings

920
00:38:06,119 --> 00:38:08,520
so as you can see on the screen here

921
00:38:08,520 --> 00:38:10,859
the Ellipsis directory is hidden and

922
00:38:10,859 --> 00:38:12,540
could easily be mistaken for The Parent

923
00:38:12,540 --> 00:38:15,540
Directory by an unsuspecting admin

924
00:38:15,540 --> 00:38:19,020
obviously this wouldn't feel proper EDR

925
00:38:19,020 --> 00:38:20,280
Solutions

926
00:38:20,280 --> 00:38:22,320
but include computer instances or

927
00:38:22,320 --> 00:38:24,540
containers where you may be manually

928
00:38:24,540 --> 00:38:26,339
investigating a breach

929
00:38:26,339 --> 00:38:27,839
this is the kind of thing that could be

930
00:38:27,839 --> 00:38:30,740
easily overlooked

931
00:38:31,500 --> 00:38:33,359
so we briefly touched on this technique

932
00:38:33,359 --> 00:38:35,700
when we discussed Coinstar

933
00:38:35,700 --> 00:38:37,200
but it's one that seems to be a favorite

934
00:38:37,200 --> 00:38:40,020
amongst Cloud 3 actors

935
00:38:40,020 --> 00:38:42,359
in this screenshot we can see existence

936
00:38:42,359 --> 00:38:45,960
checks for a file named cd1

937
00:38:45,960 --> 00:38:47,940
this is actually a version of Karo

938
00:38:47,940 --> 00:38:49,920
that's been renamed in order to obvious

939
00:38:49,920 --> 00:38:51,599
get its usage

940
00:38:51,599 --> 00:38:54,660
the malware then sets an envir with the

941
00:38:54,660 --> 00:38:57,000
path to the renamed version of Karo so

942
00:38:57,000 --> 00:38:59,040
that any attempts to retrieve additional

943
00:38:59,040 --> 00:39:01,859
payloads make use of cd1 and not the

944
00:39:01,859 --> 00:39:04,260
current winner itself

945
00:39:04,260 --> 00:39:06,300
it's difficult to see just how effective

946
00:39:06,300 --> 00:39:08,220
this would be but suppose if you're

947
00:39:08,220 --> 00:39:11,160
monitoring for invocations of Karo then

948
00:39:11,160 --> 00:39:12,900
it's a way for the attacker to avoid

949
00:39:12,900 --> 00:39:15,660
generating an alert

950
00:39:15,660 --> 00:39:18,180
this technique has also been observed

951
00:39:18,180 --> 00:39:20,520
when obfuscating usage of other data

952
00:39:20,520 --> 00:39:24,480
transfer utilities so for example W get

953
00:39:24,480 --> 00:39:27,300
not only that but we've observed it

954
00:39:27,300 --> 00:39:29,040
being utilized in campaigns from

955
00:39:29,040 --> 00:39:34,160
Watchdog rock group team TNT and so on

956
00:39:35,220 --> 00:39:37,500
so moving on now to some tips for anyone

957
00:39:37,500 --> 00:39:39,000
fortunate enough to have to defend

958
00:39:39,000 --> 00:39:41,640
against these types of attacks

959
00:39:41,640 --> 00:39:43,680
so first things first make sure you have

960
00:39:43,680 --> 00:39:46,500
the basics covered remember Cloud today

961
00:39:46,500 --> 00:39:48,540
actors don't typically make use of

962
00:39:48,540 --> 00:39:50,579
advanced zero days or nation-state level

963
00:39:50,579 --> 00:39:52,260
tooling

964
00:39:52,260 --> 00:39:54,480
although their attacks are increasing in

965
00:39:54,480 --> 00:39:57,240
sophistication they still have more in

966
00:39:57,240 --> 00:39:59,160
common with Homer than they do with

967
00:39:59,160 --> 00:40:02,040
Chris Hemsworth in Black Cat

968
00:40:02,040 --> 00:40:04,619
so in terms of Basics ensure that you've

969
00:40:04,619 --> 00:40:06,420
got proper auditing in place in your

970
00:40:06,420 --> 00:40:08,460
hosts or containers and you're not

971
00:40:08,460 --> 00:40:10,260
exposing services to internet on this

972
00:40:10,260 --> 00:40:11,460
Saturday

973
00:40:11,460 --> 00:40:14,099
of course Docker and redis are still

974
00:40:14,099 --> 00:40:15,599
some of the most common infection

975
00:40:15,599 --> 00:40:18,540
vectors in Cloud attacks

976
00:40:18,540 --> 00:40:20,700
we actually got an idea of how common it

977
00:40:20,700 --> 00:40:22,859
is to exploit these Services when we

978
00:40:22,859 --> 00:40:25,319
deploy to hadaka Honeypot that was first

979
00:40:25,319 --> 00:40:27,540
compromised only 12 minutes after we put

980
00:40:27,540 --> 00:40:29,460
it up

981
00:40:29,460 --> 00:40:32,040
so watch for new additions to user bin

982
00:40:32,040 --> 00:40:33,900
or bin directories

983
00:40:33,900 --> 00:40:36,300
both campaigns described today relied

984
00:40:36,300 --> 00:40:38,460
upon the renaming of binaries under

985
00:40:38,460 --> 00:40:41,339
these directories survey detection

986
00:40:41,339 --> 00:40:43,560
if you monitor for rights to use urban

987
00:40:43,560 --> 00:40:46,260
or bin you'll easily be able to identify

988
00:40:46,260 --> 00:40:48,900
when this occurs and Trace the usage of

989
00:40:48,900 --> 00:40:51,300
the renamed utilities

990
00:40:51,300 --> 00:40:54,420
so thirdly Implement a vaccine host most

991
00:40:54,420 --> 00:40:57,240
people probably know to do this already

992
00:40:57,240 --> 00:41:00,060
but Cloud today actors rely heavily on

993
00:41:00,060 --> 00:41:02,339
SSH propagation

994
00:41:02,339 --> 00:41:04,740
so if you have a known host file on your

995
00:41:04,740 --> 00:41:06,900
host with IPS of all the other hosts in

996
00:41:06,900 --> 00:41:09,180
your organization this ensures rapid

997
00:41:09,180 --> 00:41:11,220
compromise of your Cloud estate if

998
00:41:11,220 --> 00:41:12,420
you're targeted by some of these

999
00:41:12,420 --> 00:41:14,900
campaigns

1000
00:41:15,000 --> 00:41:18,420
so ensure adequate CSP logins in place

1001
00:41:18,420 --> 00:41:20,520
this is of course an obvious one but it

1002
00:41:20,520 --> 00:41:22,260
comes up all the time

1003
00:41:22,260 --> 00:41:24,540
Cloud malware campaigns are successful

1004
00:41:24,540 --> 00:41:27,060
partly due to misconfigurations in Cloud

1005
00:41:27,060 --> 00:41:30,000
environments but also largely due to the

1006
00:41:30,000 --> 00:41:32,099
lack of visibility The Defenders have

1007
00:41:32,099 --> 00:41:35,339
into resources in their estate

1008
00:41:35,339 --> 00:41:38,339
a comprehensive csb logging strategy can

1009
00:41:38,339 --> 00:41:40,500
help with this

1010
00:41:40,500 --> 00:41:43,200
so finally monitor for execution of the

1011
00:41:43,200 --> 00:41:44,579
touch binary

1012
00:41:44,579 --> 00:41:47,280
using touch to modify timestamps on a

1013
00:41:47,280 --> 00:41:48,780
file isn't of course an everyday

1014
00:41:48,780 --> 00:41:50,220
occurrence

1015
00:41:50,220 --> 00:41:51,980
if you see execution of touch

1016
00:41:51,980 --> 00:41:54,060
particularly when combined with the dash

1017
00:41:54,060 --> 00:41:56,220
t or d options

1018
00:41:56,220 --> 00:41:57,780
then it's a good indication that

1019
00:41:57,780 --> 00:42:00,859
something strange is going on

1020
00:42:03,119 --> 00:42:05,040
so I'd like to wrap up now with a note

1021
00:42:05,040 --> 00:42:06,780
the incident response in the cloud is

1022
00:42:06,780 --> 00:42:09,060
hard and hopefully this is giving you

1023
00:42:09,060 --> 00:42:11,040
some knowledge of techniques currently

1024
00:42:11,040 --> 00:42:15,079
in use by Cloud native three actors

1025
00:42:15,180 --> 00:42:16,920
if you're interested in this type of

1026
00:42:16,920 --> 00:42:19,500
thing here are a list of references that

1027
00:42:19,500 --> 00:42:22,260
we used when conducting This research

1028
00:42:22,260 --> 00:42:25,079
so as you can see here there are blogs

1029
00:42:25,079 --> 00:42:29,819
from netlab 360 Talos unit 42 Etc

1030
00:42:29,819 --> 00:42:31,800
these organizations are all well worth

1031
00:42:31,800 --> 00:42:33,420
following if you're a fan of cloud

1032
00:42:33,420 --> 00:42:35,400
security research or you work in this

1033
00:42:35,400 --> 00:42:37,579
area

1034
00:42:37,800 --> 00:42:39,540
I've also included the blogs that we

1035
00:42:39,540 --> 00:42:42,180
published which detail This research and

1036
00:42:42,180 --> 00:42:43,859
you can find many more on the blog

1037
00:42:43,859 --> 00:42:45,500
section of our website at

1038
00:42:45,500 --> 00:42:49,500
catoscurity.com blogs

1039
00:42:50,220 --> 00:42:51,960
so I hope that you all enjoyed the talk

1040
00:42:51,960 --> 00:42:54,359
and of some idea of the techniques

1041
00:42:54,359 --> 00:42:57,119
currently used by cloud3 actors

1042
00:42:57,119 --> 00:42:59,099
as I mentioned in the beginning I'll

1043
00:42:59,099 --> 00:43:01,740
post the slides afterwards if b-sides

1044
00:43:01,740 --> 00:43:02,819
don't do it first

1045
00:43:02,819 --> 00:43:04,800
then please feel free to reach out to me

1046
00:43:04,800 --> 00:43:06,300
if you want to discuss any of this

1047
00:43:06,300 --> 00:43:07,500
further

1048
00:43:07,500 --> 00:43:09,800
so I can be reached I am your

1049
00:43:09,800 --> 00:43:14,160
kadoscurity.com or Matt Muir on Twitter

1050
00:43:14,160 --> 00:43:16,020
so I think we've got some time for a q a

1051
00:43:16,020 --> 00:43:18,300
session now so if you have any questions

1052
00:43:18,300 --> 00:43:20,520
about Cloud security or the content in

1053
00:43:20,520 --> 00:43:22,920
the talk then please let me know

1054
00:43:22,920 --> 00:43:24,960
otherwise I look forward to seeing you

1055
00:43:24,960 --> 00:43:26,819
all around Vegas for the rest of black

1056
00:43:26,819 --> 00:43:29,040
cat and Defcon

1057
00:43:29,040 --> 00:43:32,040
foreign

1058
00:43:44,960 --> 00:43:48,060
so they won't be on the blog but I can

1059
00:43:48,060 --> 00:43:49,740
post them publicly I'll post them on

1060
00:43:49,740 --> 00:43:51,800
Twitter after after the talk

1061
00:43:51,800 --> 00:43:54,119
most of the screenshots that were used

1062
00:43:54,119 --> 00:43:56,760
in the slides come from the blogs so if

1063
00:43:56,760 --> 00:43:58,140
you're interested in that then check

1064
00:43:58,140 --> 00:43:59,880
those out

1065
00:43:59,880 --> 00:44:02,540
yes

1066
00:44:08,640 --> 00:44:10,500
yes so you're not actually the first

1067
00:44:10,500 --> 00:44:12,300
person to ask me this

1068
00:44:12,300 --> 00:44:14,520
um we didn't actually do that but it's

1069
00:44:14,520 --> 00:44:16,920
something that we probably will look

1070
00:44:16,920 --> 00:44:19,640
into in future

1071
00:44:20,579 --> 00:44:23,720
does that answer your question

1072
00:44:32,040 --> 00:44:35,700
yeah yeah I mean my background's in

1073
00:44:35,700 --> 00:44:38,339
malware analysis so my focus really is

1074
00:44:38,339 --> 00:44:40,200
on the payloads itself quite often but

1075
00:44:40,200 --> 00:44:41,579
yeah I would agree that it's definitely

1076
00:44:41,579 --> 00:44:45,260
a key part of of the puzzle

1077
00:44:47,280 --> 00:44:51,079
any any more questions at all

1078
00:44:57,000 --> 00:44:58,859
cool

1079
00:44:58,859 --> 00:45:01,880
thank you

