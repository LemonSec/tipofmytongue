1
00:00:00,240 --> 00:00:03,659
I'd like to introduce it is Gotti and

2
00:00:03,659 --> 00:00:04,920
Alan

3
00:00:04,920 --> 00:00:08,010
so give them a round of applause

4
00:00:08,010 --> 00:00:11,170
[Applause]

5
00:00:12,000 --> 00:00:14,400
thank you very much

6
00:00:14,400 --> 00:00:16,680
thank you all for being here with us

7
00:00:16,680 --> 00:00:18,480
today

8
00:00:18,480 --> 00:00:21,359
um this talk is about persistency or

9
00:00:21,359 --> 00:00:24,600
research of persistent Technologies or

10
00:00:24,600 --> 00:00:25,760
techniques

11
00:00:25,760 --> 00:00:29,640
used in OS apps and keeping inside

12
00:00:29,640 --> 00:00:33,000
organization even though the OS app

13
00:00:33,000 --> 00:00:35,300
itself is is

14
00:00:35,300 --> 00:00:39,420
disabled and will release a piece of

15
00:00:39,420 --> 00:00:40,280
code

16
00:00:40,280 --> 00:00:43,860
on GitHub that is the attack work

17
00:00:43,860 --> 00:00:46,800
through that we're doing

18
00:00:46,800 --> 00:00:48,360
um

19
00:00:48,360 --> 00:00:53,219
uh and we'll this code is uh shows a new

20
00:00:53,219 --> 00:00:55,199
technique we developed a watchdog

21
00:00:55,199 --> 00:00:58,320
technique to keep an app uh enabled even

22
00:00:58,320 --> 00:01:00,780
after an administrator disables it and

23
00:01:00,780 --> 00:01:03,960
will show the workflow so

24
00:01:03,960 --> 00:01:07,740
um first of all I'd like to introduce my

25
00:01:07,740 --> 00:01:10,740
scenery research and teammate Xeno or

26
00:01:10,740 --> 00:01:12,360
Alone

27
00:01:12,360 --> 00:01:13,439
um

28
00:01:13,439 --> 00:01:16,140
I'm really happy to be here with him in

29
00:01:16,140 --> 00:01:18,720
the first talk in a security conference

30
00:01:18,720 --> 00:01:22,280
uh needs Steinberg

31
00:01:22,280 --> 00:01:25,979
CTO for unfortunate reasons he couldn't

32
00:01:25,979 --> 00:01:28,439
be here himself but he definitely

33
00:01:28,439 --> 00:01:31,100
pointed us into the right direction

34
00:01:31,100 --> 00:01:34,439
for This research and to put on a new

35
00:01:34,439 --> 00:01:37,380
finding that's even post-infection you

36
00:01:37,380 --> 00:01:41,040
can still persistent using OS apps

37
00:01:41,040 --> 00:01:44,759
um I'm Gadi uh it's my 42nd birthday

38
00:01:44,759 --> 00:01:48,500
today so I'm really

39
00:01:50,159 --> 00:01:53,040
looking this morning for the question of

40
00:01:53,040 --> 00:01:55,500
life the universe and everything I can

41
00:01:55,500 --> 00:01:57,180
share it later

42
00:01:57,180 --> 00:01:57,960
um

43
00:01:57,960 --> 00:02:01,320
I'm really excited to be here and I hope

44
00:02:01,320 --> 00:02:03,600
this session will gift you with some new

45
00:02:03,600 --> 00:02:06,140
proving points into a less minded field

46
00:02:06,140 --> 00:02:08,699
which is always a good place to look for

47
00:02:08,699 --> 00:02:10,800
new vulnerabilities as the researchers

48
00:02:10,800 --> 00:02:15,239
and with that I'll give Zeno the stage

49
00:02:15,239 --> 00:02:18,120
to introduce the research

50
00:02:18,120 --> 00:02:20,819
hey everyone my name is Alon but you can

51
00:02:20,819 --> 00:02:23,340
call me Xeno most of my friends do

52
00:02:23,340 --> 00:02:27,480
um when you see me around here okay so

53
00:02:27,480 --> 00:02:28,800
I'm going to talk to you a little bit

54
00:02:28,800 --> 00:02:31,260
about oauth2 and why we're using it

55
00:02:31,260 --> 00:02:32,940
what's the challenging what's the

56
00:02:32,940 --> 00:02:34,860
challenges that we can face when we use

57
00:02:34,860 --> 00:02:36,900
it and then afterwards we're going to

58
00:02:36,900 --> 00:02:38,700
give the stage to Gadi that he'll

59
00:02:38,700 --> 00:02:40,860
explain more details about the actual

60
00:02:40,860 --> 00:02:44,180
work that we did and some of the um

61
00:02:44,180 --> 00:02:48,660
bypasses that we found on oauth right so

62
00:02:48,660 --> 00:02:52,500
why do we even use oauth 2 right so as

63
00:02:52,500 --> 00:02:54,300
we all know all the cool kids are moving

64
00:02:54,300 --> 00:02:55,920
to the cloud right all the data

65
00:02:55,920 --> 00:02:57,959
everything is going over there so it may

66
00:02:57,959 --> 00:03:00,120
it makes sense that we need to go and

67
00:03:00,120 --> 00:03:02,040
find a standard that helps us work with

68
00:03:02,040 --> 00:03:04,560
the resources online all right follow us

69
00:03:04,560 --> 00:03:06,659
through provide this exactly that it

70
00:03:06,659 --> 00:03:08,640
provides us a way for applications to

71
00:03:08,640 --> 00:03:11,220
work with resources on behalf of users

72
00:03:11,220 --> 00:03:12,599
all right

73
00:03:12,599 --> 00:03:14,040
so

74
00:03:14,040 --> 00:03:16,200
why are we actually using it

75
00:03:16,200 --> 00:03:19,200
the actual reason it's already there

76
00:03:19,200 --> 00:03:21,900
most of the providers classification

77
00:03:21,900 --> 00:03:24,239
providers already use that and give that

78
00:03:24,239 --> 00:03:26,519
for customers so that's why most of us

79
00:03:26,519 --> 00:03:29,040
use it right

80
00:03:29,040 --> 00:03:30,900
so let's talk a little bit about how the

81
00:03:30,900 --> 00:03:34,379
basic flow of oauth works all right and

82
00:03:34,379 --> 00:03:36,180
I'm sure that once we go over it you'll

83
00:03:36,180 --> 00:03:37,500
see that it's something that you're all

84
00:03:37,500 --> 00:03:38,640
familiar with

85
00:03:38,640 --> 00:03:40,560
so the first stage that we have here is

86
00:03:40,560 --> 00:03:42,900
actual the actual request for consent

87
00:03:42,900 --> 00:03:44,459
the application that we the application

88
00:03:44,459 --> 00:03:46,560
wants to connect to the environment has

89
00:03:46,560 --> 00:03:48,840
for consent for the user you might have

90
00:03:48,840 --> 00:03:49,680
seen

91
00:03:49,680 --> 00:03:51,720
this pop-up before that happens to the

92
00:03:51,720 --> 00:03:53,760
user it just asks you for consent easy

93
00:03:53,760 --> 00:03:56,159
enough you just press OK and you get the

94
00:03:56,159 --> 00:03:58,560
consent what happens actually be after

95
00:03:58,560 --> 00:04:01,560
that is that the user gives the consent

96
00:04:01,560 --> 00:04:03,780
the app text that consent that Grant

97
00:04:03,780 --> 00:04:05,819
authorization Grant to the authorization

98
00:04:05,819 --> 00:04:09,599
server and receives a token back

99
00:04:09,599 --> 00:04:11,700
this is the Holy Grail the token

100
00:04:11,700 --> 00:04:13,439
basically gives you the permission to

101
00:04:13,439 --> 00:04:15,659
access those resources as the user

102
00:04:15,659 --> 00:04:18,000
repeatedly without asking any more

103
00:04:18,000 --> 00:04:21,120
consent without any other prompts for

104
00:04:21,120 --> 00:04:23,580
the user you just keep on using it all

105
00:04:23,580 --> 00:04:25,440
right so once you get the token I can

106
00:04:25,440 --> 00:04:27,540
just go and access everything

107
00:04:27,540 --> 00:04:29,880
so once you talk a little bit about why

108
00:04:29,880 --> 00:04:32,280
we use oauth and how it works let's talk

109
00:04:32,280 --> 00:04:33,960
a little bit about the challenges it

110
00:04:33,960 --> 00:04:35,820
presents

111
00:04:35,820 --> 00:04:38,040
we'll start with a quote that we have

112
00:04:38,040 --> 00:04:40,440
from Iran Hammer that made a decade ago

113
00:04:40,440 --> 00:04:42,840
right when it started working

114
00:04:42,840 --> 00:04:45,780
um as he says you can read there but

115
00:04:45,780 --> 00:04:48,060
basically what it means is

116
00:04:48,060 --> 00:04:50,639
it started as a good idea but even a run

117
00:04:50,639 --> 00:04:52,800
Hammer which was the chief editor of

118
00:04:52,800 --> 00:04:55,139
that standard decided to withdraw his

119
00:04:55,139 --> 00:04:57,479
name from it because he felt it became a

120
00:04:57,479 --> 00:04:58,979
bit too complex and it doesn't deliver

121
00:04:58,979 --> 00:05:01,440
exactly what we need from it all right

122
00:05:01,440 --> 00:05:05,160
so it is widely adopted by most SAS

123
00:05:05,160 --> 00:05:07,139
platforms a lot of people use it there

124
00:05:07,139 --> 00:05:09,960
it allows us to use all kinds of really

125
00:05:09,960 --> 00:05:12,720
sensitive material sensitive resources

126
00:05:12,720 --> 00:05:16,199
but even the Creator felt they kind of

127
00:05:16,199 --> 00:05:17,699
missed something there right so this is

128
00:05:17,699 --> 00:05:19,199
the main challenge that we have working

129
00:05:19,199 --> 00:05:21,180
with it

130
00:05:21,180 --> 00:05:23,280
so once you have those challenges let's

131
00:05:23,280 --> 00:05:25,740
talk about why we decided to actually

132
00:05:25,740 --> 00:05:28,020
pick on all of two why we wanted to see

133
00:05:28,020 --> 00:05:29,880
if there's something weird there the

134
00:05:29,880 --> 00:05:32,160
first part is all the data is there the

135
00:05:32,160 --> 00:05:34,320
data up in the cloud most of the places

136
00:05:34,320 --> 00:05:36,360
can allow you to use all to to access

137
00:05:36,360 --> 00:05:39,600
this data right and the second part

138
00:05:39,600 --> 00:05:42,419
which is kind of interesting to me is

139
00:05:42,419 --> 00:05:44,460
the whole idea behind it is you get

140
00:05:44,460 --> 00:05:46,860
consent once and then you stop bothering

141
00:05:46,860 --> 00:05:49,979
the user again right so this is like the

142
00:05:49,979 --> 00:05:52,500
main feature of oauth but it's also kind

143
00:05:52,500 --> 00:05:54,240
of the main vulnerability it has because

144
00:05:54,240 --> 00:05:57,360
if I got once the token I get one

145
00:05:57,360 --> 00:05:59,520
consent I can keep on working with it

146
00:05:59,520 --> 00:06:01,560
there's no way the user can't see it it

147
00:06:01,560 --> 00:06:03,479
doesn't it doesn't bother him as we say

148
00:06:03,479 --> 00:06:06,600
right so this is the worst part for this

149
00:06:06,600 --> 00:06:08,520
is the worst part for a Defender and the

150
00:06:08,520 --> 00:06:10,860
best part for an attacker

151
00:06:10,860 --> 00:06:13,139
so now what we're going to do is I'm

152
00:06:13,139 --> 00:06:15,240
going to give Daddy backstage he's going

153
00:06:15,240 --> 00:06:16,500
to talk a little bit about some

154
00:06:16,500 --> 00:06:18,120
mitigations that we saw on platforms

155
00:06:18,120 --> 00:06:19,259
that they did already because they

156
00:06:19,259 --> 00:06:20,759
wanted to fix a little bit and then

157
00:06:20,759 --> 00:06:22,919
we'll talk to you about what we managed

158
00:06:22,919 --> 00:06:24,780
to research further and find some

159
00:06:24,780 --> 00:06:27,660
bypasses around those mitigations right

160
00:06:27,660 --> 00:06:30,080
so ready

161
00:06:31,500 --> 00:06:33,479
thank you Xeno

162
00:06:33,479 --> 00:06:35,940
was excellent introduction

163
00:06:35,940 --> 00:06:38,699
always glad to work with you

164
00:06:38,699 --> 00:06:43,319
um so about OSS Xeno said it's a kind of

165
00:06:43,319 --> 00:06:47,160
a young uh well it's used for a lot of

166
00:06:47,160 --> 00:06:49,080
security Wise It's kind of young and

167
00:06:49,080 --> 00:06:53,039
immature and in 2018 there was actually

168
00:06:53,039 --> 00:06:56,220
a worm using Google apps script

169
00:06:56,220 --> 00:06:59,300
called the Google Doc swarm

170
00:06:59,300 --> 00:07:02,940
so even Google sometimes method mess

171
00:07:02,940 --> 00:07:05,699
with the OS you can see here in the

172
00:07:05,699 --> 00:07:09,300
slide that the app script was sending

173
00:07:09,300 --> 00:07:12,620
phishing emails from an infected user

174
00:07:12,620 --> 00:07:16,020
asking him to that his friend wants to

175
00:07:16,020 --> 00:07:19,319
share a file with him using Google Docs

176
00:07:19,319 --> 00:07:21,720
the logo is Google Docs the naming is

177
00:07:21,720 --> 00:07:23,580
Google Docs so it's in in a way

178
00:07:23,580 --> 00:07:25,699
impersonate the apps

179
00:07:25,699 --> 00:07:28,800
and it go goes over it gets permission

180
00:07:28,800 --> 00:07:31,380
to go over all your contact list and

181
00:07:31,380 --> 00:07:34,280
read your emails and send emails on your

182
00:07:34,280 --> 00:07:37,620
on behalf of you to all of your contact

183
00:07:37,620 --> 00:07:39,599
lists with the same phishing message

184
00:07:39,599 --> 00:07:42,780
this is a file I want to share with you

185
00:07:42,780 --> 00:07:45,539
and and it got over in a couple of hours

186
00:07:45,539 --> 00:07:48,120
got over a million years of in fact

187
00:07:48,120 --> 00:07:52,500
infected and until Google stopped it

188
00:07:52,500 --> 00:07:54,240
um

189
00:07:54,240 --> 00:07:57,419
so uh about the after this case in

190
00:07:57,419 --> 00:08:00,780
similar cases with Microsoft Azure and

191
00:08:00,780 --> 00:08:02,520
Google implemented the different

192
00:08:02,520 --> 00:08:06,720
mitigations uh one of them is that the

193
00:08:06,720 --> 00:08:08,639
publisher needs to be verified so

194
00:08:08,639 --> 00:08:11,819
instead of just giving every developer

195
00:08:11,819 --> 00:08:15,060
to put his name and if published a

196
00:08:15,060 --> 00:08:17,460
credential there is a process to be

197
00:08:17,460 --> 00:08:20,400
verified by the by the platform by Azure

198
00:08:20,400 --> 00:08:22,080
by uh

199
00:08:22,080 --> 00:08:25,259
Microsoft and then to to have better

200
00:08:25,259 --> 00:08:27,599
permissions or allow higher permissions

201
00:08:27,599 --> 00:08:30,240
to be installed or even actually be

202
00:08:30,240 --> 00:08:33,419
installed and as you can see here in uh

203
00:08:33,419 --> 00:08:36,000
new up new application registered after

204
00:08:36,000 --> 00:08:38,700
2000 are not allowed to be installed

205
00:08:38,700 --> 00:08:42,899
without an admin consent and and you can

206
00:08:42,899 --> 00:08:46,500
ask the admin for the relevant uh for

207
00:08:46,500 --> 00:08:48,660
for consenting to you to install the app

208
00:08:48,660 --> 00:08:51,959
in addition the name the name is missing

209
00:08:51,959 --> 00:08:53,580
and the logo is missing so there won't

210
00:08:53,580 --> 00:08:56,760
be any way to copycare or mimic the

211
00:08:56,760 --> 00:08:58,800
application and look alike like the

212
00:08:58,800 --> 00:09:00,779
application make a user fall for the

213
00:09:00,779 --> 00:09:01,700
phishing

214
00:09:01,700 --> 00:09:04,620
additionally uh post infections

215
00:09:04,620 --> 00:09:07,080
mitigations were in place for example

216
00:09:07,080 --> 00:09:09,959
you can't send forward emails outside of

217
00:09:09,959 --> 00:09:13,940
the organization with uh in

218
00:09:13,940 --> 00:09:17,880
email box rules automatically

219
00:09:17,880 --> 00:09:18,600
um

220
00:09:18,600 --> 00:09:21,300
and now actually there's a process for

221
00:09:21,300 --> 00:09:24,240
with Microsoft they're saying they try

222
00:09:24,240 --> 00:09:27,600
to raise the awareness that MFA has to

223
00:09:27,600 --> 00:09:30,540
be uh enabled in all organizations they

224
00:09:30,540 --> 00:09:32,700
fail to do it and now they're trying to

225
00:09:32,700 --> 00:09:34,620
do some sort of uh default security

226
00:09:34,620 --> 00:09:37,740
rules and and make sure that at least

227
00:09:37,740 --> 00:09:40,440
administrator has to have a multi-factor

228
00:09:40,440 --> 00:09:43,500
authentication and and definitely if if

229
00:09:43,500 --> 00:09:46,380
you look back on uh exploit mitigation

230
00:09:46,380 --> 00:09:49,080
techniques on on the PC I think it's a

231
00:09:49,080 --> 00:09:50,820
similar process we're seeing now new

232
00:09:50,820 --> 00:09:53,459
attacks cause uh the platform to develop

233
00:09:53,459 --> 00:09:55,380
new mitigations

234
00:09:55,380 --> 00:09:57,720
um is this our relevant mitigations

235
00:09:57,720 --> 00:10:00,740
we'll touch in our research how how

236
00:10:00,740 --> 00:10:03,060
first of all

237
00:10:03,060 --> 00:10:04,920
um still though the publisher

238
00:10:04,920 --> 00:10:07,640
verification process is in place most

239
00:10:07,640 --> 00:10:11,940
applications even ones that have email

240
00:10:11,940 --> 00:10:13,860
read permissions and email write

241
00:10:13,860 --> 00:10:16,440
permissions don't have this public

242
00:10:16,440 --> 00:10:19,680
publisher verification in place we see

243
00:10:19,680 --> 00:10:21,980
60 of

244
00:10:21,980 --> 00:10:25,560
applications that are actually having

245
00:10:25,560 --> 00:10:28,860
this uh being verified for uh

246
00:10:28,860 --> 00:10:30,899
applications with the read permissions

247
00:10:30,899 --> 00:10:33,420
and and for sending permissions there is

248
00:10:33,420 --> 00:10:35,220
actually only seven percent of

249
00:10:35,220 --> 00:10:37,079
application

250
00:10:37,079 --> 00:10:39,300
um so it's it's a it's a good start but

251
00:10:39,300 --> 00:10:40,920
it still needs to be advocated and

252
00:10:40,920 --> 00:10:43,380
awareness should be reasoned to this uh

253
00:10:43,380 --> 00:10:46,140
vulnerability

254
00:10:46,140 --> 00:10:47,820
um we'll touch now on different attack

255
00:10:47,820 --> 00:10:50,640
vectors okay and a very common one is

256
00:10:50,640 --> 00:10:54,120
the device uh also code flow this is

257
00:10:54,120 --> 00:10:57,660
used for devices with lacking input

258
00:10:57,660 --> 00:11:02,360
devices and no keyboard so a user can

259
00:11:02,360 --> 00:11:06,240
use his own cell phone to authenticate

260
00:11:06,240 --> 00:11:09,000
to the identity access management system

261
00:11:09,000 --> 00:11:13,200
by Azure for example or any any yam or

262
00:11:13,200 --> 00:11:15,480
Google slack whatever and then the

263
00:11:15,480 --> 00:11:18,899
application asynchronically gets it can

264
00:11:18,899 --> 00:11:19,700
can

265
00:11:19,700 --> 00:11:23,459
request the token from the server

266
00:11:23,459 --> 00:11:26,279
this is how it actually looks like

267
00:11:26,279 --> 00:11:29,519
um first of all a user

268
00:11:29,519 --> 00:11:32,459
or in this case we put it as an attacker

269
00:11:32,459 --> 00:11:36,480
that's actually because it's a device or

270
00:11:36,480 --> 00:11:39,060
for example a monitor and it's its code

271
00:11:39,060 --> 00:11:41,160
is available publicly because anyone can

272
00:11:41,160 --> 00:11:43,500
reverse engineer the code though there's

273
00:11:43,500 --> 00:11:46,019
no client Secret inside this process so

274
00:11:46,019 --> 00:11:48,600
there's no verification that the client

275
00:11:48,600 --> 00:11:50,760
that's asking the code or getting the

276
00:11:50,760 --> 00:11:53,279
token is actually the client

277
00:11:53,279 --> 00:11:56,459
so the attacker or the client asks for

278
00:11:56,459 --> 00:11:59,700
device code it then presents this code

279
00:11:59,700 --> 00:12:04,079
it gets the code from the yam and this

280
00:12:04,079 --> 00:12:06,019
allows the yam to

281
00:12:06,019 --> 00:12:09,360
connect the user authenticating and the

282
00:12:09,360 --> 00:12:12,000
application so it sends the code to the

283
00:12:12,000 --> 00:12:14,160
user in our case might be a phishing

284
00:12:14,160 --> 00:12:16,820
email we send please log into

285
00:12:16,820 --> 00:12:20,160
microsoft.com device code

286
00:12:20,160 --> 00:12:22,560
the user entered this the the code there

287
00:12:22,560 --> 00:12:24,540
and authenticates through the server

288
00:12:24,540 --> 00:12:26,760
with this multi-factor authentication in

289
00:12:26,760 --> 00:12:29,700
in place so there's no need to buy to uh

290
00:12:29,700 --> 00:12:34,740
to uh to hack the uh cell phone Etc only

291
00:12:34,740 --> 00:12:37,620
only the the user need to be fixed and

292
00:12:37,620 --> 00:12:39,120
the multifacts of identification doesn't

293
00:12:39,120 --> 00:12:40,800
stop the attack

294
00:12:40,800 --> 00:12:42,120
sorry

295
00:12:42,120 --> 00:12:44,760
um then the attacker gets the access

296
00:12:44,760 --> 00:12:48,720
token from the yam and send the token to

297
00:12:48,720 --> 00:12:53,600
the resource server and gets the users

298
00:12:53,600 --> 00:12:57,360
own the documents or data or can do any

299
00:12:57,360 --> 00:12:59,820
functions in the name of the user this

300
00:12:59,820 --> 00:13:02,639
attack uh which starts as I said with

301
00:13:02,639 --> 00:13:04,740
this device code the user needs to go to

302
00:13:04,740 --> 00:13:07,920
a legitimate login page

303
00:13:07,920 --> 00:13:11,040
and just recently William overweight

304
00:13:11,040 --> 00:13:13,260
also noted that in addition to

305
00:13:13,260 --> 00:13:15,660
impersonating the app there's there's no

306
00:13:15,660 --> 00:13:18,180
consent needed so in cases the user the

307
00:13:18,180 --> 00:13:19,740
first thing the user will see this is

308
00:13:19,740 --> 00:13:23,700
this uh login page on Microsoft it will

309
00:13:23,700 --> 00:13:26,760
enter the code and then in case that the

310
00:13:26,760 --> 00:13:29,040
attacker is impersonating Microsoft

311
00:13:29,040 --> 00:13:31,200
Office which allows this flow

312
00:13:31,200 --> 00:13:35,760
for a certain reasons and then all the

313
00:13:35,760 --> 00:13:37,680
permissions that Microsoft Office has

314
00:13:37,680 --> 00:13:39,779
which is a first party app by Microsoft

315
00:13:39,779 --> 00:13:43,380
so it's defaultly user has consented to

316
00:13:43,380 --> 00:13:46,380
the permissions there will be no uh

317
00:13:46,380 --> 00:13:48,959
permission or consent screen as as is

318
00:13:48,959 --> 00:13:53,459
the usual uh flow that there's in oaf so

319
00:13:53,459 --> 00:13:55,440
the user doesn't suspect it gets the

320
00:13:55,440 --> 00:13:57,720
same permissions that he granted the

321
00:13:57,720 --> 00:13:59,699
Microsoft Office so it's called the

322
00:13:59,699 --> 00:14:02,040
fishing without consent

323
00:14:02,040 --> 00:14:05,160
and we'll use it in our code the the

324
00:14:05,160 --> 00:14:08,760
attack methods that we're uh we want to

325
00:14:08,760 --> 00:14:10,680
discuss here

326
00:14:10,680 --> 00:14:12,600
um

327
00:14:12,600 --> 00:14:15,779
is first is is persistence okay so if

328
00:14:15,779 --> 00:14:18,120
again we're moving from PC World to

329
00:14:18,120 --> 00:14:20,699
Cloud SAS same techniques okay so we

330
00:14:20,699 --> 00:14:23,760
want uh you've got the user to be

331
00:14:23,760 --> 00:14:27,000
infected or install your OS app now you

332
00:14:27,000 --> 00:14:28,620
want to be persistent meaning you can

333
00:14:28,620 --> 00:14:31,980
you want to have the access to the data

334
00:14:31,980 --> 00:14:34,940
without needing to

335
00:14:34,940 --> 00:14:37,199
re-authenticate the user or get any

336
00:14:37,199 --> 00:14:39,480
permissions delegated permissions by the

337
00:14:39,480 --> 00:14:41,820
user having him to do a multi-factor

338
00:14:41,820 --> 00:14:44,399
authentication again so first of all you

339
00:14:44,399 --> 00:14:46,620
can you can create a user or create an

340
00:14:46,620 --> 00:14:49,440
application you can update the user

341
00:14:49,440 --> 00:14:52,860
password or a password recovery email so

342
00:14:52,860 --> 00:14:54,959
you can actually have the user password

343
00:14:54,959 --> 00:14:56,760
and change the multi-factor

344
00:14:56,760 --> 00:14:59,940
authentication number or device and then

345
00:14:59,940 --> 00:15:02,839
you can have access in any time you wish

346
00:15:02,839 --> 00:15:06,360
and there's also now was a reported a

347
00:15:06,360 --> 00:15:09,000
known attack with that allowed the

348
00:15:09,000 --> 00:15:11,880
Legacy protocol so Legacy protocols like

349
00:15:11,880 --> 00:15:14,519
IMAP do not support a multi-factor

350
00:15:14,519 --> 00:15:16,519
authentication you can

351
00:15:16,519 --> 00:15:19,620
enlist a user for such an application

352
00:15:19,620 --> 00:15:21,720
and then if you have these credentials

353
00:15:21,720 --> 00:15:23,279
you can use it without the need to

354
00:15:23,279 --> 00:15:25,320
multifact Authentication

355
00:15:25,320 --> 00:15:28,519
also our passwords is a legacy

356
00:15:28,519 --> 00:15:33,740
method to allow apps that do not support

357
00:15:33,740 --> 00:15:35,540
us

358
00:15:35,540 --> 00:15:39,180
to to have to use the app passwords and

359
00:15:39,180 --> 00:15:41,100
then allow this flow and have the user

360
00:15:41,100 --> 00:15:43,920
connected with a a username and password

361
00:15:43,920 --> 00:15:45,560
and you can

362
00:15:45,560 --> 00:15:49,139
add the username password to this app uh

363
00:15:49,139 --> 00:15:52,380
what we're adding to this post exploit

364
00:15:52,380 --> 00:15:56,120
techniques is a watchdog a watchdog

365
00:15:56,120 --> 00:15:58,320
essentially means that there's a process

366
00:15:58,320 --> 00:16:01,019
that looks over other processes and make

367
00:16:01,019 --> 00:16:03,540
sure they are enabled even if an

368
00:16:03,540 --> 00:16:07,040
administrator tries to disable them

369
00:16:07,040 --> 00:16:09,740
again for the same terminology

370
00:16:09,740 --> 00:16:12,480
terminology of incident responders

371
00:16:12,480 --> 00:16:15,180
there's a lateral movement or pivoting

372
00:16:15,180 --> 00:16:19,860
from one user to another so one way is

373
00:16:19,860 --> 00:16:24,060
uh to uh to to get the read access and

374
00:16:24,060 --> 00:16:27,440
and put mailbox rules to delete

375
00:16:27,440 --> 00:16:30,779
certain messages by that you can read

376
00:16:30,779 --> 00:16:33,540
reset emails and for for example to

377
00:16:33,540 --> 00:16:37,620
monday.com or or other SAS platforms

378
00:16:37,620 --> 00:16:40,560
after you you reset the emails you get

379
00:16:40,560 --> 00:16:42,420
access and move laterally to the other

380
00:16:42,420 --> 00:16:44,699
cloud services

381
00:16:44,699 --> 00:16:47,660
you can also infect files with macros

382
00:16:47,660 --> 00:16:50,940
and and app scripts and then make sure a

383
00:16:50,940 --> 00:16:53,040
user or other user in the same

384
00:16:53,040 --> 00:16:57,620
organization are are infected again

385
00:16:57,620 --> 00:17:01,019
and there's a very dangerous supply

386
00:17:01,019 --> 00:17:04,799
chain attack or if you if you are able

387
00:17:04,799 --> 00:17:07,619
to infect a user who is a developer and

388
00:17:07,619 --> 00:17:09,660
he creates applications and actually

389
00:17:09,660 --> 00:17:11,819
sells them and exports them to his

390
00:17:11,819 --> 00:17:14,459
customers if you'll add

391
00:17:14,459 --> 00:17:18,059
a certificate to this application which

392
00:17:18,059 --> 00:17:21,119
means the many times applications have

393
00:17:21,119 --> 00:17:22,679
application Level permissions meaning

394
00:17:22,679 --> 00:17:24,359
that they don't need the user to

395
00:17:24,359 --> 00:17:26,699
authenticate they can just log in with a

396
00:17:26,699 --> 00:17:29,460
certificate if you add a certificate to

397
00:17:29,460 --> 00:17:31,620
such an application you can buy that

398
00:17:31,620 --> 00:17:36,059
move uh to all the users of the

399
00:17:36,059 --> 00:17:39,299
applications that this developer created

400
00:17:39,299 --> 00:17:41,640
this was also used by nation state and

401
00:17:41,640 --> 00:17:44,280
and now but of course it becomes more

402
00:17:44,280 --> 00:17:45,480
common

403
00:17:45,480 --> 00:17:48,299
so about the code that we have

404
00:17:48,299 --> 00:17:49,980
um and if there will be interest we'll

405
00:17:49,980 --> 00:17:51,960
have another session this afternoon and

406
00:17:51,960 --> 00:17:55,080
and we'll we'll show a live demo uh but

407
00:17:55,080 --> 00:17:58,380
I'll for now I'll I'll do an attack uh

408
00:17:58,380 --> 00:18:02,580
walkthrough with that code so first what

409
00:18:02,580 --> 00:18:04,380
we're looking for in order to allow our

410
00:18:04,380 --> 00:18:07,460
Watchdog is if we're looking for a

411
00:18:07,460 --> 00:18:11,700
application read write all permissions

412
00:18:11,700 --> 00:18:13,320
um which allows us to create

413
00:18:13,320 --> 00:18:16,200
applications so what we're trying to do

414
00:18:16,200 --> 00:18:19,640
is imitate or impersonate a security

415
00:18:19,640 --> 00:18:22,620
software in this case because security

416
00:18:22,620 --> 00:18:26,100
software for the cloud which lists

417
00:18:26,100 --> 00:18:28,260
applications needs to has this

418
00:18:28,260 --> 00:18:30,960
permissions in order to view

419
00:18:30,960 --> 00:18:31,700
um

420
00:18:31,700 --> 00:18:33,900
applications installed on in the

421
00:18:33,900 --> 00:18:37,200
organization so you usually need to uh

422
00:18:37,200 --> 00:18:40,380
to to find a high privileged user that

423
00:18:40,380 --> 00:18:42,419
have them you'll be surprised that

424
00:18:42,419 --> 00:18:44,400
actually security software do enable

425
00:18:44,400 --> 00:18:46,799
some of them enable a device code flow

426
00:18:46,799 --> 00:18:50,280
and and as I said this is very good

427
00:18:50,280 --> 00:18:53,039
pointers for researchers and Pen testers

428
00:18:53,039 --> 00:18:55,820
to taste inside organization

429
00:18:55,820 --> 00:18:58,200
what the user can do what the

430
00:18:58,200 --> 00:19:00,840
administrator will get either he can

431
00:19:00,840 --> 00:19:04,140
consent on behalf of himself and and or

432
00:19:04,140 --> 00:19:07,140
be uh or or

433
00:19:07,140 --> 00:19:09,660
um behalf of all the users in in

434
00:19:09,660 --> 00:19:13,380
organization once he once he allows the

435
00:19:13,380 --> 00:19:15,240
permissions to all users in the

436
00:19:15,240 --> 00:19:17,760
organization then you can fish actually

437
00:19:17,760 --> 00:19:20,400
any any user in the organization and get

438
00:19:20,400 --> 00:19:22,500
the application read write accesses that

439
00:19:22,500 --> 00:19:24,960
he this user had which actually means

440
00:19:24,960 --> 00:19:27,780
you can create applications on on his

441
00:19:27,780 --> 00:19:30,600
behalf and also control all the

442
00:19:30,600 --> 00:19:33,480
applications that user control

443
00:19:33,480 --> 00:19:38,400
add the certificates Etc as I I noted

444
00:19:38,400 --> 00:19:41,700
so in our case I'm I'm attacking with

445
00:19:41,700 --> 00:19:44,100
the device code flow

446
00:19:44,100 --> 00:19:45,059
um

447
00:19:45,059 --> 00:19:47,880
the attacker from you need to create a

448
00:19:47,880 --> 00:19:49,940
phishing email that will

449
00:19:49,940 --> 00:19:53,039
make him install this application

450
00:19:53,039 --> 00:19:55,880
security or impersonate a good

451
00:19:55,880 --> 00:19:59,280
application security platform and then

452
00:19:59,280 --> 00:20:02,100
as we said with the flow

453
00:20:02,100 --> 00:20:05,280
uh the uh we we create we started this

454
00:20:05,280 --> 00:20:07,380
flow so we'll we'll be we'll have the

455
00:20:07,380 --> 00:20:09,120
device code we'll send the administrator

456
00:20:09,120 --> 00:20:11,880
and then we'll get the token

457
00:20:11,880 --> 00:20:14,220
um Now using this token what we will do

458
00:20:14,220 --> 00:20:16,980
is create an internal app

459
00:20:16,980 --> 00:20:20,700
and we'll give it our own redirect URLs

460
00:20:20,700 --> 00:20:23,580
if you remember in the normal flow if uh

461
00:20:23,580 --> 00:20:26,760
after user authenticate he is redirected

462
00:20:26,760 --> 00:20:30,000
to the actual app and and then the flow

463
00:20:30,000 --> 00:20:32,220
continues if we created the application

464
00:20:32,220 --> 00:20:35,100
we can create the redirect URL and then

465
00:20:35,100 --> 00:20:38,580
move it get any token to us we also

466
00:20:38,580 --> 00:20:41,520
create the secret and and

467
00:20:41,520 --> 00:20:44,940
and if you'll notice uh

468
00:20:44,940 --> 00:20:47,760
uh here is internal and if you remember

469
00:20:47,760 --> 00:20:51,000
what we touched before is that internal

470
00:20:51,000 --> 00:20:52,220
apps

471
00:20:52,220 --> 00:20:54,440
has different

472
00:20:54,440 --> 00:20:57,480
different bypass the mitigation

473
00:20:57,480 --> 00:21:00,659
techniques put by Microsoft there's no

474
00:21:00,659 --> 00:21:03,179
vetting process or a verifying process

475
00:21:03,179 --> 00:21:05,640
for internal apps by Microsoft so

476
00:21:05,640 --> 00:21:08,520
there's no no stating that this app

477
00:21:08,520 --> 00:21:12,240
might be risky and that sorry and that

478
00:21:12,240 --> 00:21:13,500
uh

479
00:21:13,500 --> 00:21:18,000
uh the name is given and any user in the

480
00:21:18,000 --> 00:21:21,260
organization can install the app

481
00:21:21,260 --> 00:21:23,760
by himself it doesn't need an admin

482
00:21:23,760 --> 00:21:25,260
consent even though it's a newly

483
00:21:25,260 --> 00:21:27,179
registered app

484
00:21:27,179 --> 00:21:29,880
and this is just the the sample from our

485
00:21:29,880 --> 00:21:33,539
code once you get uh we we have infected

486
00:21:33,539 --> 00:21:36,419
admin uh we got a token for that mean

487
00:21:36,419 --> 00:21:39,000
and then infected the user what we'll do

488
00:21:39,000 --> 00:21:40,320
is

489
00:21:40,320 --> 00:21:43,080
is to keep that

490
00:21:43,080 --> 00:21:46,200
um that uh phishing application that the

491
00:21:46,200 --> 00:21:50,340
user was infected with live okay so this

492
00:21:50,340 --> 00:21:52,860
this code shows how we using the python

493
00:21:52,860 --> 00:21:55,620
interface for the Microsoft guide graph

494
00:21:55,620 --> 00:21:59,760
API to basically just keep an account

495
00:21:59,760 --> 00:22:02,880
enabled even if it was disabled for that

496
00:22:02,880 --> 00:22:04,020
mean

497
00:22:04,020 --> 00:22:07,559
uh this is the admin portal for Azure uh

498
00:22:07,559 --> 00:22:10,559
he if if not win atwin wants to stop an

499
00:22:10,559 --> 00:22:13,020
app what he should do is not delete an

500
00:22:13,020 --> 00:22:16,020
app which will might even uh Delete all

501
00:22:16,020 --> 00:22:18,480
users using this app and might cause

502
00:22:18,480 --> 00:22:22,740
errors if it's a false positive but it

503
00:22:22,740 --> 00:22:25,679
also if a deleted app can be reinstalled

504
00:22:25,679 --> 00:22:29,159
so the best practice would be to disable

505
00:22:29,159 --> 00:22:30,299
an app

506
00:22:30,299 --> 00:22:33,120
which means that no user can log into it

507
00:22:33,120 --> 00:22:36,659
and no user can install it so that's

508
00:22:36,659 --> 00:22:40,140
that's the uh why this method is good

509
00:22:40,140 --> 00:22:44,159
and then we can restore using our the

510
00:22:44,159 --> 00:22:47,280
code we can restore the app to be

511
00:22:47,280 --> 00:22:48,600
enabled

512
00:22:48,600 --> 00:22:53,880
and um other other than uh so the app

513
00:22:53,880 --> 00:22:57,900
was disabled the token was not uh

514
00:22:57,900 --> 00:23:00,840
um the token was not revoked and we have

515
00:23:00,840 --> 00:23:03,480
infected user we had we can still get

516
00:23:03,480 --> 00:23:07,020
get access into it we can also then

517
00:23:07,020 --> 00:23:09,179
disable the app and keep it persistent

518
00:23:09,179 --> 00:23:10,640
and keep it

519
00:23:10,640 --> 00:23:13,740
quiet and make the using the refresh

520
00:23:13,740 --> 00:23:16,140
token every interval we can keep alive

521
00:23:16,140 --> 00:23:18,360
and keep our app inside organization

522
00:23:18,360 --> 00:23:23,580
even though the admin side is that

523
00:23:23,580 --> 00:23:24,120
um

524
00:23:24,120 --> 00:23:27,539
I'll touch quickly on Solutions now if

525
00:23:27,539 --> 00:23:30,480
you have any question that touch or not

526
00:23:30,480 --> 00:23:34,500
I'll touch on Solutions and I I'd take

527
00:23:34,500 --> 00:23:37,679
like to thank you very much for uh for

528
00:23:37,679 --> 00:23:42,260
being with us and paying attention

