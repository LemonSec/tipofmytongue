1
00:00:00,640 --> 00:00:02,480
all right everybody thank you for coming

2
00:00:02,480 --> 00:00:05,600
out tonight uh we have two first-time

3
00:00:05,600 --> 00:00:08,160
speakers they've got 12 years in the

4
00:00:08,160 --> 00:00:11,280
opsec territory uh and they're super

5
00:00:11,280 --> 00:00:12,960
excited to be out here uh one's from

6
00:00:12,960 --> 00:00:14,639
arizona one's from minnesota so

7
00:00:14,639 --> 00:00:16,640
obviously it's ice and fire

8
00:00:16,640 --> 00:00:17,680
um

9
00:00:17,680 --> 00:00:19,760
so we've got jonathan fisher from

10
00:00:19,760 --> 00:00:21,520
minnesota and we've got jeremy miller

11
00:00:21,520 --> 00:00:23,279
from arizona he's the local boy over

12
00:00:23,279 --> 00:00:25,439
here um and they're excited to talk to

13
00:00:25,439 --> 00:00:27,279
you about injectal and hyde which is

14
00:00:27,279 --> 00:00:29,920
very heavy metal so i kind of love it

15
00:00:29,920 --> 00:00:32,238
but without any further ado these are

16
00:00:32,238 --> 00:00:35,919
your speakers thank you for coming

17
00:00:39,680 --> 00:00:42,000
all right before we begin can i get a

18
00:00:42,000 --> 00:00:43,520
show of hands of how many people

19
00:00:43,520 --> 00:00:45,760
actively use hardware implants today in

20
00:00:45,760 --> 00:00:48,320
their engagements or their testing

21
00:00:48,320 --> 00:00:49,760
we got one

22
00:00:49,760 --> 00:00:51,360
do we have two

23
00:00:51,360 --> 00:00:54,000
no just one all right well hopefully by

24
00:00:54,000 --> 00:00:56,559
the end there will be more than just one

25
00:00:56,559 --> 00:00:58,399
so with that i'd like to introduce our

26
00:00:58,399 --> 00:01:00,399
talk inject on the hide pushing the

27
00:01:00,399 --> 00:01:02,239
future of hardware implants to the next

28
00:01:02,239 --> 00:01:03,680
level

29
00:01:03,680 --> 00:01:05,920
who are we my name is jonathan fisher i

30
00:01:05,920 --> 00:01:07,760
have over six years in the infosec

31
00:01:07,760 --> 00:01:09,520
community all that's been on the

32
00:01:09,520 --> 00:01:11,200
offensive side of things

33
00:01:11,200 --> 00:01:13,040
prior to that i had over a decade of

34
00:01:13,040 --> 00:01:15,119
experience designing implementing and

35
00:01:15,119 --> 00:01:16,400
programming

36
00:01:16,400 --> 00:01:18,240
industrial control systems and off

37
00:01:18,240 --> 00:01:19,360
highway

38
00:01:19,360 --> 00:01:20,960
control systems

39
00:01:20,960 --> 00:01:22,000
for

40
00:01:22,000 --> 00:01:24,479
machines such as bulldozers cranes

41
00:01:24,479 --> 00:01:26,560
things of that nature and in my spare

42
00:01:26,560 --> 00:01:29,040
time i like researching hardware rf and

43
00:01:29,040 --> 00:01:31,250
iot security

44
00:01:31,250 --> 00:01:33,119
[Music]

45
00:01:33,119 --> 00:01:36,000
and hello my name is jeremy miller

46
00:01:36,000 --> 00:01:37,920
i have over 12 years of information

47
00:01:37,920 --> 00:01:40,240
security experience i've worked on red

48
00:01:40,240 --> 00:01:42,560
and blue teams done a bit of security

49
00:01:42,560 --> 00:01:44,479
research and engineering

50
00:01:44,479 --> 00:01:46,320
and work in different industries such as

51
00:01:46,320 --> 00:01:50,960
retail finance hosting and life sciences

52
00:01:50,960 --> 00:01:52,720
so a bit of a work disclaimer this

53
00:01:52,720 --> 00:01:54,720
security project is based on our own

54
00:01:54,720 --> 00:01:56,399
research and not on behalf of our

55
00:01:56,399 --> 00:01:58,880
employers

56
00:02:00,079 --> 00:02:02,719
okay so what is this talk about

57
00:02:02,719 --> 00:02:04,880
we're going to go over why we decided to

58
00:02:04,880 --> 00:02:06,640
build our own usb implants and there's

59
00:02:06,640 --> 00:02:08,720
already great commercial and open source

60
00:02:08,720 --> 00:02:10,479
tools out there

61
00:02:10,479 --> 00:02:12,480
the journey of building the implant so

62
00:02:12,480 --> 00:02:14,319
we're going to go from the c2 that we

63
00:02:14,319 --> 00:02:16,800
built to the hardware we designed and

64
00:02:16,800 --> 00:02:19,760
the software itself

65
00:02:19,840 --> 00:02:21,520
and the biggest one we're going to go

66
00:02:21,520 --> 00:02:23,360
over what does the implant do what makes

67
00:02:23,360 --> 00:02:25,200
it so unique compared to everything else

68
00:02:25,200 --> 00:02:27,519
out there

69
00:02:28,000 --> 00:02:30,080
start off we'll begin

70
00:02:30,080 --> 00:02:31,760
why are hardware attacks so prevalent

71
00:02:31,760 --> 00:02:32,959
today when there's plenty of other

72
00:02:32,959 --> 00:02:35,360
attack vectors

73
00:02:35,360 --> 00:02:38,000
so the biggest one is they're great for

74
00:02:38,000 --> 00:02:39,840
man middling a device

75
00:02:39,840 --> 00:02:41,519
so if you need to

76
00:02:41,519 --> 00:02:43,120
get in the middle like a keyboard or a

77
00:02:43,120 --> 00:02:44,959
mouse or a monitor

78
00:02:44,959 --> 00:02:46,560
it's still a pretty great covert way to

79
00:02:46,560 --> 00:02:48,560
do that

80
00:02:48,560 --> 00:02:50,959
also it's amazing to gain access to

81
00:02:50,959 --> 00:02:53,360
infrastructure or even just data so you

82
00:02:53,360 --> 00:02:55,120
could have a hardware hardware implant

83
00:02:55,120 --> 00:02:56,720
that actually allows you to pivot around

84
00:02:56,720 --> 00:02:59,200
the network um secretly or maybe you

85
00:02:59,200 --> 00:03:00,400
just want to interface with like a

86
00:03:00,400 --> 00:03:02,319
storage device and exfiltrate data

87
00:03:02,319 --> 00:03:04,720
through there

88
00:03:04,720 --> 00:03:05,920
lastly

89
00:03:05,920 --> 00:03:07,599
hardware attacks are amazing for

90
00:03:07,599 --> 00:03:10,080
bypassing security controls

91
00:03:10,080 --> 00:03:11,680
so if you're trying to download a

92
00:03:11,680 --> 00:03:13,760
payload and it's getting caught like a

93
00:03:13,760 --> 00:03:16,080
firewall or a waf or something you know

94
00:03:16,080 --> 00:03:17,680
if you're pulling it locally through

95
00:03:17,680 --> 00:03:19,760
like a serial line or something

96
00:03:19,760 --> 00:03:21,760
a lot of vdr tools and network tools are

97
00:03:21,760 --> 00:03:23,680
not going to catch that so it's a great

98
00:03:23,680 --> 00:03:26,400
way to do this

99
00:03:26,799 --> 00:03:29,360
there are plenty of implants out there

100
00:03:29,360 --> 00:03:31,120
now both commercial and open source

101
00:03:31,120 --> 00:03:34,000
we'll kind of run through some of them

102
00:03:34,000 --> 00:03:34,799
so

103
00:03:34,799 --> 00:03:36,720
looking at this image

104
00:03:36,720 --> 00:03:38,239
a lot of these should be pretty familiar

105
00:03:38,239 --> 00:03:40,640
especially like the key croc mac5

106
00:03:40,640 --> 00:03:43,680
the omg cable by mg and even the usb

107
00:03:43,680 --> 00:03:47,120
ninja these are great for um just like

108
00:03:47,120 --> 00:03:49,120
education security or maybe using on an

109
00:03:49,120 --> 00:03:50,159
engagement

110
00:03:50,159 --> 00:03:51,840
there are other implants like the key

111
00:03:51,840 --> 00:03:53,680
log those are usually used for a little

112
00:03:53,680 --> 00:03:55,680
more nefarious reasons maybe a tech

113
00:03:55,680 --> 00:03:57,280
non-technical person wants to actually

114
00:03:57,280 --> 00:03:59,280
like spy on someone

115
00:03:59,280 --> 00:04:00,480
so

116
00:04:00,480 --> 00:04:02,319
a lot of good commercial ones a couple

117
00:04:02,319 --> 00:04:03,760
points about these

118
00:04:03,760 --> 00:04:05,599
so because they're commercial they're

119
00:04:05,599 --> 00:04:07,519
going to be pretty unique or innovative

120
00:04:07,519 --> 00:04:08,640
and features

121
00:04:08,640 --> 00:04:09,760
you know they're they're selling a

122
00:04:09,760 --> 00:04:11,040
product so they need something kind of

123
00:04:11,040 --> 00:04:14,159
special about them to grab you

124
00:04:14,159 --> 00:04:16,238
also as long as people are buying these

125
00:04:16,238 --> 00:04:17,918
devices

126
00:04:17,918 --> 00:04:19,040
they're going to continue to support

127
00:04:19,040 --> 00:04:19,839
them

128
00:04:19,839 --> 00:04:20,880
and usually the hardware and the

129
00:04:20,880 --> 00:04:24,159
software is be pretty stable

130
00:04:25,440 --> 00:04:26,960
a downside of the commercial device

131
00:04:26,960 --> 00:04:29,120
though is they are closed source

132
00:04:29,120 --> 00:04:31,680
so if you're using these on like a

133
00:04:31,680 --> 00:04:33,040
critical infrastructure some kind of

134
00:04:33,040 --> 00:04:35,759
engagement where you have sensitive data

135
00:04:35,759 --> 00:04:37,120
you may not want to because you're not

136
00:04:37,120 --> 00:04:38,880
able to fully audit

137
00:04:38,880 --> 00:04:41,120
the software or even the c2 if it's not

138
00:04:41,120 --> 00:04:44,240
something that you're running yourself

139
00:04:45,040 --> 00:04:47,600
the other aspect of these is the open

140
00:04:47,600 --> 00:04:50,639
source implants so some of these are

141
00:04:50,639 --> 00:04:52,400
they're definitely not new to the

142
00:04:52,400 --> 00:04:54,400
security industry i'd say last like 20

143
00:04:54,400 --> 00:04:55,840
years

144
00:04:55,840 --> 00:04:57,280
these are pretty familiar they've been

145
00:04:57,280 --> 00:05:00,320
released at defcon or maybe a certain

146
00:05:00,320 --> 00:05:03,039
government leak has like involved the

147
00:05:03,039 --> 00:05:04,320
creation of them

148
00:05:04,320 --> 00:05:07,360
but these are some of them for sure

149
00:05:07,360 --> 00:05:09,840
open source ones are amazing because

150
00:05:09,840 --> 00:05:11,759
they allow us to audit and learn from

151
00:05:11,759 --> 00:05:12,720
them

152
00:05:12,720 --> 00:05:15,039
so we feel comfortable we're confident

153
00:05:15,039 --> 00:05:17,919
in using them in engagements

154
00:05:17,919 --> 00:05:19,680
secondly

155
00:05:19,680 --> 00:05:21,600
such as our project

156
00:05:21,600 --> 00:05:24,320
they pivot with innovation so there's

157
00:05:24,320 --> 00:05:26,000
been things like a lot of the bad usb or

158
00:05:26,000 --> 00:05:27,680
the nsa playset were actually

159
00:05:27,680 --> 00:05:31,680
inspiration to us to make this implant

160
00:05:32,160 --> 00:05:33,919
and kind of a downside

161
00:05:33,919 --> 00:05:35,440
if people are not actively using these

162
00:05:35,440 --> 00:05:37,440
tools and engagements support kind of

163
00:05:37,440 --> 00:05:40,000
fizzles out so

164
00:05:40,000 --> 00:05:42,000
kind of one of the minor downsides i'd

165
00:05:42,000 --> 00:05:44,000
say

166
00:05:44,000 --> 00:05:45,919
so with these commercial and open source

167
00:05:45,919 --> 00:05:47,759
ones why would we still want to create

168
00:05:47,759 --> 00:05:49,680
our own

169
00:05:49,680 --> 00:05:51,120
a big one is

170
00:05:51,120 --> 00:05:52,479
we actually want to learn how to create

171
00:05:52,479 --> 00:05:54,639
the hardware itself the pcb because we

172
00:05:54,639 --> 00:05:58,000
had special devices we wanted to implant

173
00:05:58,000 --> 00:05:59,759
so we had these keyboards and we want to

174
00:05:59,759 --> 00:06:01,280
have a custom pcb that would fit in the

175
00:06:01,280 --> 00:06:03,600
encasing

176
00:06:03,600 --> 00:06:05,600
also we did not want to rely on the

177
00:06:05,600 --> 00:06:07,440
victim's infrastructure

178
00:06:07,440 --> 00:06:09,520
so some of these implants

179
00:06:09,520 --> 00:06:11,759
are mounted middle devices rely on the

180
00:06:11,759 --> 00:06:13,919
victim's 802.11 network

181
00:06:13,919 --> 00:06:15,600
or maybe they actually use another

182
00:06:15,600 --> 00:06:18,400
protocol that's commonly sniffed for

183
00:06:18,400 --> 00:06:20,400
that brings us to a next point

184
00:06:20,400 --> 00:06:22,240
we wanted to use an entirely different

185
00:06:22,240 --> 00:06:24,560
osi physical layer that was not common

186
00:06:24,560 --> 00:06:26,960
to this

187
00:06:28,080 --> 00:06:29,680
another big one is if we did create

188
00:06:29,680 --> 00:06:31,039
something like this we wanted to make it

189
00:06:31,039 --> 00:06:33,039
open source so

190
00:06:33,039 --> 00:06:34,720
as we felt comfortable using it maybe

191
00:06:34,720 --> 00:06:36,479
other people would as well so when they

192
00:06:36,479 --> 00:06:38,319
improve upon it and they can audit it

193
00:06:38,319 --> 00:06:40,160
you know it's kind of a back and forth

194
00:06:40,160 --> 00:06:43,039
security check in that sense

195
00:06:43,039 --> 00:06:45,039
and lastly we didn't just want to

196
00:06:45,039 --> 00:06:48,080
implant or compromise a few devices you

197
00:06:48,080 --> 00:06:51,759
know we want to implant 10 20 50 devices

198
00:06:51,759 --> 00:06:53,599
and we wanted a c2 that would support

199
00:06:53,599 --> 00:06:56,080
all of that

200
00:06:58,800 --> 00:07:00,560
all right so now that we know why we

201
00:07:00,560 --> 00:07:02,080
built it let's talk about the one we

202
00:07:02,080 --> 00:07:04,000
actually built we

203
00:07:04,000 --> 00:07:05,759
affectionately dubbed this injectal and

204
00:07:05,759 --> 00:07:07,440
hide

205
00:07:07,440 --> 00:07:09,840
at the core of our implant is the same

206
00:07:09,840 --> 00:07:11,599
d21 chip

207
00:07:11,599 --> 00:07:14,000
in fact we use two of these chips one

208
00:07:14,000 --> 00:07:16,639
reads in the head packets from the head

209
00:07:16,639 --> 00:07:18,319
device and the other one relays them

210
00:07:18,319 --> 00:07:20,639
back out to the

211
00:07:20,639 --> 00:07:22,479
target

212
00:07:22,479 --> 00:07:24,160
and the nice thing about these chips are

213
00:07:24,160 --> 00:07:26,240
we can flash them with the arduino boot

214
00:07:26,240 --> 00:07:28,960
loader which allows us to then program

215
00:07:28,960 --> 00:07:30,960
program them with the arduino ide and

216
00:07:30,960 --> 00:07:33,199
you leverage the standard libraries in

217
00:07:33,199 --> 00:07:34,400
arduino

218
00:07:34,400 --> 00:07:37,360
and use the forms too if we need any

219
00:07:37,360 --> 00:07:38,560
help

220
00:07:38,560 --> 00:07:41,360
and these chips are unique in that they

221
00:07:41,360 --> 00:07:43,840
have extra serial communication lines

222
00:07:43,840 --> 00:07:45,680
that are software enabled they refer to

223
00:07:45,680 --> 00:07:47,599
them as circom in the

224
00:07:47,599 --> 00:07:50,000
documentation but this allows us to add

225
00:07:50,000 --> 00:07:52,800
extra features as we need like audio

226
00:07:52,800 --> 00:07:56,080
visual sensors and extra radios memory

227
00:07:56,080 --> 00:07:59,039
things of that nature so the next most

228
00:07:59,039 --> 00:08:01,840
important part on this device is the xb3

229
00:08:01,840 --> 00:08:03,680
radio now

230
00:08:03,680 --> 00:08:05,680
this is made by digi international and

231
00:08:05,680 --> 00:08:07,199
the reason we chose to go with this

232
00:08:07,199 --> 00:08:09,759
radio is because it allows us to do mesh

233
00:08:09,759 --> 00:08:12,479
networking or rf so this is how we

234
00:08:12,479 --> 00:08:14,800
really achieve that scalability

235
00:08:14,800 --> 00:08:18,479
through the um through the mesh network

236
00:08:18,479 --> 00:08:20,000
and with the mesh network the more

237
00:08:20,000 --> 00:08:22,319
devices we add the larger our attack

238
00:08:22,319 --> 00:08:24,639
network gets and we can even shape it to

239
00:08:24,639 --> 00:08:26,479
go around obstacles as needed something

240
00:08:26,479 --> 00:08:31,120
you can't do with uh 802.11 ap

241
00:08:31,120 --> 00:08:33,440
and the mesh networking allows us to

242
00:08:33,440 --> 00:08:36,000
send broadcast messages to all the

243
00:08:36,000 --> 00:08:37,839
excuse me all the implants at once or

244
00:08:37,839 --> 00:08:40,559
even just one at a time if we want

245
00:08:40,559 --> 00:08:42,719
and digi incorporates the authentication

246
00:08:42,719 --> 00:08:44,880
and encryption in their setup software

247
00:08:44,880 --> 00:08:46,160
for the radio so we don't have to worry

248
00:08:46,160 --> 00:08:47,519
about adding that

249
00:08:47,519 --> 00:08:50,160
on our own

250
00:08:50,160 --> 00:08:52,399
all right besides the radio we also

251
00:08:52,399 --> 00:08:54,399
implemented some storage features for

252
00:08:54,399 --> 00:08:56,560
our first run of implants we decided to

253
00:08:56,560 --> 00:08:58,480
go with the microsd card

254
00:08:58,480 --> 00:09:00,640
the reason we did this was it's cheap

255
00:09:00,640 --> 00:09:04,080
it's easy to replace if we fry it and

256
00:09:04,080 --> 00:09:06,080
readily available but we know in the

257
00:09:06,080 --> 00:09:07,279
future

258
00:09:07,279 --> 00:09:08,959
it's got limited right cycles we want to

259
00:09:08,959 --> 00:09:10,480
expand on that we want to shrink our

260
00:09:10,480 --> 00:09:12,640
footprint so we're looking at nand flash

261
00:09:12,640 --> 00:09:16,800
memory for uh future development

262
00:09:17,120 --> 00:09:18,959
all right so now that we know what's on

263
00:09:18,959 --> 00:09:20,240
the board let's talk about how it's

264
00:09:20,240 --> 00:09:22,399
evolved over time

265
00:09:22,399 --> 00:09:25,200
we started with the proof of concept

266
00:09:25,200 --> 00:09:27,040
we knew we wanted to build an implant we

267
00:09:27,040 --> 00:09:28,480
knew we wanted to use off-the-shelf

268
00:09:28,480 --> 00:09:30,000
components to

269
00:09:30,000 --> 00:09:31,839
try it out ourselves so

270
00:09:31,839 --> 00:09:33,279
what you see here

271
00:09:33,279 --> 00:09:34,800
on the bottom

272
00:09:34,800 --> 00:09:36,800
are two boards

273
00:09:36,800 --> 00:09:39,279
both running the same d21 chips the

274
00:09:39,279 --> 00:09:40,880
first board is on the left is the

275
00:09:40,880 --> 00:09:43,519
trinket m0 now at the time this was the

276
00:09:43,519 --> 00:09:46,080
smallest um off the shelf commercial

277
00:09:46,080 --> 00:09:48,640
board that we could get for footprint

278
00:09:48,640 --> 00:09:51,519
and on the right is the arduino nano 33

279
00:09:51,519 --> 00:09:53,760
iot board and this was a brand new

280
00:09:53,760 --> 00:09:55,279
release when we started this and the

281
00:09:55,279 --> 00:09:57,440
nice thing about this is it came wired

282
00:09:57,440 --> 00:09:59,680
with extra serial ports on it

283
00:09:59,680 --> 00:10:01,839
and it also had built-in ble

284
00:10:01,839 --> 00:10:04,320
functionality so those two components

285
00:10:04,320 --> 00:10:06,160
were what we would implant in the

286
00:10:06,160 --> 00:10:08,720
keyboard keeping our device small and

287
00:10:08,720 --> 00:10:10,720
allowing us a wireless x-fil path out of

288
00:10:10,720 --> 00:10:12,560
the keyboard but this still didn't

289
00:10:12,560 --> 00:10:15,920
achieve our desired goal in

290
00:10:15,920 --> 00:10:17,120
doing the

291
00:10:17,120 --> 00:10:19,200
expandable or scalable

292
00:10:19,200 --> 00:10:21,440
networking so we had to find something

293
00:10:21,440 --> 00:10:23,440
to bridge that gap and that board was

294
00:10:23,440 --> 00:10:26,800
the sparkfun xb3 thing plus board

295
00:10:26,800 --> 00:10:29,200
and this board allowed us to bridge the

296
00:10:29,200 --> 00:10:32,560
ble to the digimesh network and we could

297
00:10:32,560 --> 00:10:35,360
program this with micropython and so

298
00:10:35,360 --> 00:10:37,519
it's fairly simple to operate and then

299
00:10:37,519 --> 00:10:40,240
we just doubled up for the c2 board

300
00:10:40,240 --> 00:10:41,519
and that worked

301
00:10:41,519 --> 00:10:43,120
we got a working prototype out of it it

302
00:10:43,120 --> 00:10:45,120
was great except

303
00:10:45,120 --> 00:10:47,760
that there was a noticeable lag and the

304
00:10:47,760 --> 00:10:50,399
time the victim would press on the key

305
00:10:50,399 --> 00:10:51,839
to when they would see the keystroke

306
00:10:51,839 --> 00:10:53,519
we're talking half a second three

307
00:10:53,519 --> 00:10:55,360
quarter second we figured that was

308
00:10:55,360 --> 00:10:57,279
enough for us to start looking at our

309
00:10:57,279 --> 00:10:58,880
keyboard and figure out what was going

310
00:10:58,880 --> 00:11:01,360
on so we figured the victim would too

311
00:11:01,360 --> 00:11:03,360
so after some troubleshooting we figured

312
00:11:03,360 --> 00:11:04,959
out that the problem lied in what we

313
00:11:04,959 --> 00:11:06,240
called the extender the thing that

314
00:11:06,240 --> 00:11:08,399
bridged between the two

315
00:11:08,399 --> 00:11:10,959
wireless communication protocols

316
00:11:10,959 --> 00:11:13,279
so to solve that we added a second board

317
00:11:13,279 --> 00:11:15,600
we added a second nano board and did all

318
00:11:15,600 --> 00:11:18,399
the translation of the ble on that

319
00:11:18,399 --> 00:11:21,360
and then just communicated over uart to

320
00:11:21,360 --> 00:11:22,160
the

321
00:11:22,160 --> 00:11:24,399
sparkfun things board and that worked we

322
00:11:24,399 --> 00:11:27,760
got rid of the delay by doing that

323
00:11:27,760 --> 00:11:29,279
and here you can see

324
00:11:29,279 --> 00:11:30,640
this is what the extender would look

325
00:11:30,640 --> 00:11:32,640
like on a breadboard it's got the

326
00:11:32,640 --> 00:11:35,519
arduino nano 33 board on the left and

327
00:11:35,519 --> 00:11:37,200
it's got the sparkfun thing board on the

328
00:11:37,200 --> 00:11:38,240
right

329
00:11:38,240 --> 00:11:39,680
and it's kind of hard to see in the

330
00:11:39,680 --> 00:11:42,320
wires but on the top there there is a

331
00:11:42,320 --> 00:11:44,079
blue and a white wire now those are the

332
00:11:44,079 --> 00:11:46,160
uart lines and the reason that's

333
00:11:46,160 --> 00:11:47,519
significant

334
00:11:47,519 --> 00:11:49,760
is because this did not work right out

335
00:11:49,760 --> 00:11:51,200
of the box

336
00:11:51,200 --> 00:11:52,000
the

337
00:11:52,000 --> 00:11:54,800
documentation from sparkfun says

338
00:11:54,800 --> 00:11:57,680
that the uart should work but it doesn't

339
00:11:57,680 --> 00:11:59,440
if you go into the arduino forms they

340
00:11:59,440 --> 00:12:01,839
refer you to a special library for the

341
00:12:01,839 --> 00:12:03,040
arduino

342
00:12:03,040 --> 00:12:04,399
chip to interface with it but it's got

343
00:12:04,399 --> 00:12:06,399
to be over spi

344
00:12:06,399 --> 00:12:08,000
now we figured it out and i'd love to

345
00:12:08,000 --> 00:12:10,000
say we did it on purpose in fact we even

346
00:12:10,000 --> 00:12:12,399
claimed we did but the solution to this

347
00:12:12,399 --> 00:12:15,200
problem was to short out the i2c bus to

348
00:12:15,200 --> 00:12:17,279
allow the uart bus to take over we

349
00:12:17,279 --> 00:12:19,360
reached out to digi and they told us it

350
00:12:19,360 --> 00:12:20,880
shouldn't work

351
00:12:20,880 --> 00:12:23,920
but it does we just felt like it wasn't

352
00:12:23,920 --> 00:12:26,560
the proper solution for a long-term

353
00:12:26,560 --> 00:12:28,639
uh prototype so

354
00:12:28,639 --> 00:12:30,959
we decided to strip the board down to

355
00:12:30,959 --> 00:12:32,320
what we really needed and that was the

356
00:12:32,320 --> 00:12:34,639
digi radio and so that brought us to the

357
00:12:34,639 --> 00:12:37,040
next prototype we just used a digi radio

358
00:12:37,040 --> 00:12:39,040
straight to the c2 and we already had

359
00:12:39,040 --> 00:12:40,959
the processing and the logic in the

360
00:12:40,959 --> 00:12:42,880
nanoboard so we could just stick with

361
00:12:42,880 --> 00:12:45,279
the arduino and the extender

362
00:12:45,279 --> 00:12:47,200
and that worked

363
00:12:47,200 --> 00:12:49,200
worked just fine it did everything we

364
00:12:49,200 --> 00:12:50,160
wanted

365
00:12:50,160 --> 00:12:52,160
but

366
00:12:52,160 --> 00:12:53,760
there's a few things we didn't like

367
00:12:53,760 --> 00:12:55,600
about it i'll get to those in a second

368
00:12:55,600 --> 00:12:58,079
here you can see what it would look like

369
00:12:58,079 --> 00:13:00,160
with the extender and the radio and the

370
00:13:00,160 --> 00:13:02,079
thought process here is that it wouldn't

371
00:13:02,079 --> 00:13:03,760
be so bad if you stuck it behind like a

372
00:13:03,760 --> 00:13:05,200
monitor and you had the implant in the

373
00:13:05,200 --> 00:13:07,440
keyboard but it's still extra devices

374
00:13:07,440 --> 00:13:09,279
you have to implant and it still

375
00:13:09,279 --> 00:13:11,040
increases your chance of getting caught

376
00:13:11,040 --> 00:13:13,839
especially with the ble because the ble

377
00:13:13,839 --> 00:13:15,279
is noticeable with anybody with a

378
00:13:15,279 --> 00:13:18,160
smartphone and a free app so

379
00:13:18,160 --> 00:13:21,200
we opted to drop that all together

380
00:13:21,200 --> 00:13:24,320
and just go straight xp from the implant

381
00:13:24,320 --> 00:13:26,160
itself now this increases the size of

382
00:13:26,160 --> 00:13:27,440
the footprint

383
00:13:27,440 --> 00:13:29,279
but we felt that uh

384
00:13:29,279 --> 00:13:31,120
it created less complexity in the

385
00:13:31,120 --> 00:13:33,279
overall design and allowed for a much

386
00:13:33,279 --> 00:13:35,600
stealthier implant itself

387
00:13:35,600 --> 00:13:37,760
so now what you see here is the trinket

388
00:13:37,760 --> 00:13:40,639
m0 the arduino nano 33

389
00:13:40,639 --> 00:13:41,519
the

390
00:13:41,519 --> 00:13:44,480
xp radio and then another xp radio for

391
00:13:44,480 --> 00:13:46,240
the c2 and this is also the phase at

392
00:13:46,240 --> 00:13:48,320
which we dropped in the microsd card for

393
00:13:48,320 --> 00:13:49,760
our storage

394
00:13:49,760 --> 00:13:51,760
and this is what you'll see today on the

395
00:13:51,760 --> 00:13:55,120
pcb itself um only with commercial

396
00:13:55,120 --> 00:13:56,399
products

397
00:13:56,399 --> 00:13:58,480
but obviously this is a lot to criminate

398
00:13:58,480 --> 00:14:01,040
a keyboard most people notice a bulge at

399
00:14:01,040 --> 00:14:03,600
the keyboard at this point so we decided

400
00:14:03,600 --> 00:14:06,560
to keep going with it

401
00:14:07,279 --> 00:14:09,199
and show you a little bit about what it

402
00:14:09,199 --> 00:14:10,480
does look like with the commercial

403
00:14:10,480 --> 00:14:12,000
products here

404
00:14:12,000 --> 00:14:14,000
might be a little hard to see but down

405
00:14:14,000 --> 00:14:17,680
here is the xb radio this is the

406
00:14:17,680 --> 00:14:19,279
keyboard controller

407
00:14:19,279 --> 00:14:23,040
to an arduino or sorry a trinket m0 and

408
00:14:23,040 --> 00:14:24,399
then it's a little harder to see but

409
00:14:24,399 --> 00:14:25,920
there's another trinket m0 up here

410
00:14:25,920 --> 00:14:27,199
somewhere

411
00:14:27,199 --> 00:14:28,160
and

412
00:14:28,160 --> 00:14:29,839
that was before we had the micro sd card

413
00:14:29,839 --> 00:14:31,600
and didn't need the extra lines but this

414
00:14:31,600 --> 00:14:33,680
was a proof of concept for

415
00:14:33,680 --> 00:14:35,600
getting it inside as an implant into a

416
00:14:35,600 --> 00:14:37,519
keyboard

417
00:14:37,519 --> 00:14:39,199
and here with this beautiful wiring job

418
00:14:39,199 --> 00:14:40,959
that i'll take credit for

419
00:14:40,959 --> 00:14:42,639
is the breadboard with the actual

420
00:14:42,639 --> 00:14:44,720
components on so you can see it's a

421
00:14:44,720 --> 00:14:47,519
little bit of a mess to try and cram in

422
00:14:47,519 --> 00:14:50,320
but again we have the arduino board we

423
00:14:50,320 --> 00:14:53,120
have the sd card we have the trinket and

424
00:14:53,120 --> 00:14:56,079
then we have the radio down there

425
00:14:56,079 --> 00:14:58,240
so the next logical phase for us was to

426
00:14:58,240 --> 00:14:59,839
do what we did with the sparkfun board

427
00:14:59,839 --> 00:15:01,600
and strip it down to just the components

428
00:15:01,600 --> 00:15:04,240
we needed which were just the same d21

429
00:15:04,240 --> 00:15:05,199
chips

430
00:15:05,199 --> 00:15:07,680
and we did that it worked well uh the

431
00:15:07,680 --> 00:15:08,959
only thing we had to do different at

432
00:15:08,959 --> 00:15:11,839
this point was we had to flash the dev

433
00:15:11,839 --> 00:15:14,079
boards with the

434
00:15:14,079 --> 00:15:16,399
arduino boot loader itself so we could

435
00:15:16,399 --> 00:15:18,079
then just program the chips just like

436
00:15:18,079 --> 00:15:19,760
any other board

437
00:15:19,760 --> 00:15:21,279
and that worked

438
00:15:21,279 --> 00:15:22,720
we had no issues

439
00:15:22,720 --> 00:15:24,560
but again we're not going to fit that

440
00:15:24,560 --> 00:15:27,199
into the keyboard you

441
00:15:27,199 --> 00:15:28,560
would definitely notice that and we're

442
00:15:28,560 --> 00:15:30,000
going the wrong direction if you didn't

443
00:15:30,000 --> 00:15:32,160
notice it would just shoulder surf and

444
00:15:32,160 --> 00:15:33,680
take your password that way if we wanted

445
00:15:33,680 --> 00:15:34,560
it

446
00:15:34,560 --> 00:15:37,759
so again this works we got stripped down

447
00:15:37,759 --> 00:15:39,440
there's extra components on these boards

448
00:15:39,440 --> 00:15:40,800
to allow for

449
00:15:40,800 --> 00:15:42,880
noise reduction voltage regulation and

450
00:15:42,880 --> 00:15:44,560
things of that nature

451
00:15:44,560 --> 00:15:46,480
so the next step for us was to break

452
00:15:46,480 --> 00:15:47,519
this down

453
00:15:47,519 --> 00:15:49,680
to just the chip level and so we brought

454
00:15:49,680 --> 00:15:51,759
this down to a prototyping board where

455
00:15:51,759 --> 00:15:54,480
we hard wired everything so on the left

456
00:15:54,480 --> 00:15:57,040
is the sd card breakout we have the two

457
00:15:57,040 --> 00:16:00,000
usb in and out we have test sockets here

458
00:16:00,000 --> 00:16:02,720
for the two same d21 chips so we can

459
00:16:02,720 --> 00:16:05,279
just drop raw chips in and wire straight

460
00:16:05,279 --> 00:16:06,639
to the pins

461
00:16:06,639 --> 00:16:08,560
here we have serial wire debugging ports

462
00:16:08,560 --> 00:16:10,800
so we could flash the chips on the fly

463
00:16:10,800 --> 00:16:12,720
and debug them and then we got the radio

464
00:16:12,720 --> 00:16:14,320
right there

465
00:16:14,320 --> 00:16:16,160
and that's the top of the board we had

466
00:16:16,160 --> 00:16:17,839
all the extra stuff on the bottom so

467
00:16:17,839 --> 00:16:20,720
this is where the capacitors the

468
00:16:20,720 --> 00:16:22,880
crystals the resistors and stuff lie

469
00:16:22,880 --> 00:16:25,600
it's all underneath and this gave us

470
00:16:25,600 --> 00:16:27,120
enough confidence that we could then

471
00:16:27,120 --> 00:16:30,000
proceed with our pcb design since we got

472
00:16:30,000 --> 00:16:32,639
it ironed out which components we needed

473
00:16:32,639 --> 00:16:33,519
to

474
00:16:33,519 --> 00:16:36,399
give us a stable connection

475
00:16:36,399 --> 00:16:38,560
and that gives you the layout that you

476
00:16:38,560 --> 00:16:41,199
have today on the pcb this is the

477
00:16:41,199 --> 00:16:43,839
production model of the inject on high

478
00:16:43,839 --> 00:16:45,040
board

479
00:16:45,040 --> 00:16:47,759
so all you have to do is add the radio

480
00:16:47,759 --> 00:16:50,079
sd card and you can drop that into a

481
00:16:50,079 --> 00:16:52,240
keyboard or any device and relay out to

482
00:16:52,240 --> 00:16:56,240
the c2 running just the xb radio

483
00:16:56,560 --> 00:16:57,920
now that you know what we put on the

484
00:16:57,920 --> 00:16:59,519
board let's talk about what the board

485
00:16:59,519 --> 00:17:01,519
does we've covered a little bit about

486
00:17:01,519 --> 00:17:03,839
the mesh

487
00:17:03,839 --> 00:17:05,919
but this board can also do keystroke

488
00:17:05,919 --> 00:17:07,679
injection through standard arduino

489
00:17:07,679 --> 00:17:09,679
libraries and because we're handling the

490
00:17:09,679 --> 00:17:11,839
keystrokes as they come in we can also

491
00:17:11,839 --> 00:17:13,599
sniff them as well

492
00:17:13,599 --> 00:17:16,000
but with the sd card we can also add the

493
00:17:16,000 --> 00:17:18,480
ability to record the keystrokes as they

494
00:17:18,480 --> 00:17:20,559
come through

495
00:17:20,559 --> 00:17:23,839
and we offer the reverse shell over the

496
00:17:23,839 --> 00:17:25,679
mesh network which we'll talk about a

497
00:17:25,679 --> 00:17:28,640
little bit it's a unique concept and we

498
00:17:28,640 --> 00:17:30,559
exfil data over the mesh network the

499
00:17:30,559 --> 00:17:34,400
same way we also offer a key press timer

500
00:17:34,400 --> 00:17:37,120
this gives you an idea of when we last

501
00:17:37,120 --> 00:17:38,799
detected a key press

502
00:17:38,799 --> 00:17:39,919
to better

503
00:17:39,919 --> 00:17:42,480
let you know how live this implant might

504
00:17:42,480 --> 00:17:44,720
be if a keyboard is actually connected

505
00:17:44,720 --> 00:17:45,600
to it

506
00:17:45,600 --> 00:17:47,440
and we implemented some other features

507
00:17:47,440 --> 00:17:48,960
as well that we thought were useful from

508
00:17:48,960 --> 00:17:50,880
other implants

509
00:17:50,880 --> 00:17:52,720
now you're asking yourself how do we

510
00:17:52,720 --> 00:17:55,039
interface with this well it's pretty

511
00:17:55,039 --> 00:17:58,640
simple we wrote a custom c2 with python

512
00:17:58,640 --> 00:18:00,880
and all you need to do is import the

513
00:18:00,880 --> 00:18:04,080
digi library the bless library and then

514
00:18:04,080 --> 00:18:06,480
connect a xp radio over usb to it and

515
00:18:06,480 --> 00:18:09,280
you're off and running

516
00:18:09,280 --> 00:18:11,520
all right

517
00:18:13,360 --> 00:18:17,799
all right i've got a demo to show you

518
00:18:28,320 --> 00:18:29,440
okay

519
00:18:29,440 --> 00:18:31,600
so i'm going to pause a few times during

520
00:18:31,600 --> 00:18:34,960
the demo or just not show it up no

521
00:18:34,960 --> 00:18:38,919
all right technical difficulties

522
00:18:45,919 --> 00:18:48,880
there we go okay

523
00:18:48,880 --> 00:18:49,919
so

524
00:18:49,919 --> 00:18:51,440
in this demo we're going to go over

525
00:18:51,440 --> 00:18:53,760
actually starting the c2 the python

526
00:18:53,760 --> 00:18:57,600
script and connecting to the c2 radio

527
00:18:57,600 --> 00:19:01,360
um and this one we're actually going to

528
00:19:01,360 --> 00:19:02,960
pick the com port and then the baud rate

529
00:19:02,960 --> 00:19:05,840
the radio itself

530
00:19:05,919 --> 00:19:09,120
kind of hard to see but it's a terminal

531
00:19:09,120 --> 00:19:11,200
starting a python script it's going to

532
00:19:11,200 --> 00:19:13,600
ask what the com port is for the radio

533
00:19:13,600 --> 00:19:15,840
and then we pick the baud rate

534
00:19:15,840 --> 00:19:17,360
so this is

535
00:19:17,360 --> 00:19:19,520
you can see it the menu for the c2

536
00:19:19,520 --> 00:19:22,799
itself and all the functions we

537
00:19:22,840 --> 00:19:25,039
have so the next thing we're going to do

538
00:19:25,039 --> 00:19:26,880
is the important part

539
00:19:26,880 --> 00:19:29,440
and that's having the c2 actually look

540
00:19:29,440 --> 00:19:33,280
for all the implants in the network

541
00:19:33,280 --> 00:19:35,280
this is done through the digi rf mesh

542
00:19:35,280 --> 00:19:38,280
network

543
00:19:41,440 --> 00:19:43,760
so what we're going to do is

544
00:19:43,760 --> 00:19:45,919
we're going to select the option

545
00:19:45,919 --> 00:19:49,799
for scanning for implants

546
00:19:53,679 --> 00:19:57,039
so it's a 10 second timer

547
00:19:57,200 --> 00:20:00,880
and then if you can kind of see

548
00:20:01,200 --> 00:20:02,720
right here

549
00:20:02,720 --> 00:20:04,640
that's the mac address

550
00:20:04,640 --> 00:20:06,640
or the address of the implant itself so

551
00:20:06,640 --> 00:20:08,400
if it was able to find more it would

552
00:20:08,400 --> 00:20:09,919
show up on this list

553
00:20:09,919 --> 00:20:11,200
and then we have a different way of

554
00:20:11,200 --> 00:20:12,880
formatting that as well so you can

555
00:20:12,880 --> 00:20:15,440
actually name it like hr keyboard or

556
00:20:15,440 --> 00:20:17,840
finance keyboard something like that

557
00:20:17,840 --> 00:20:19,840
so once we identified what implants are

558
00:20:19,840 --> 00:20:21,679
in our vicinity

559
00:20:21,679 --> 00:20:23,840
we can activate it so that's option four

560
00:20:23,840 --> 00:20:26,240
i believe so i'm gonna pick the implant

561
00:20:26,240 --> 00:20:28,640
that i found activate it

562
00:20:28,640 --> 00:20:30,400
and then to actually see if it's a

563
00:20:30,400 --> 00:20:32,880
running implant i'm gonna get the status

564
00:20:32,880 --> 00:20:34,799
of it which we'll talk about later

565
00:20:34,799 --> 00:20:36,240
but it'll return the status of the

566
00:20:36,240 --> 00:20:37,760
implant itself

567
00:20:37,760 --> 00:20:39,679
and then a pretty common feature of

568
00:20:39,679 --> 00:20:41,280
these type of devices is the actual

569
00:20:41,280 --> 00:20:43,039
keystroke recording

570
00:20:43,039 --> 00:20:44,640
so on the left side it's going to be the

571
00:20:44,640 --> 00:20:47,440
victim the bottom right is the victim

572
00:20:47,440 --> 00:20:49,360
typing and you'll see in the top right

573
00:20:49,360 --> 00:20:51,280
as they're typing they can in real time

574
00:20:51,280 --> 00:20:52,480
they'll see the

575
00:20:52,480 --> 00:20:55,480
keystrokes

576
00:21:02,640 --> 00:21:03,679
and then

577
00:21:03,679 --> 00:21:05,840
with the live recording mostly recording

578
00:21:05,840 --> 00:21:08,080
to the actual sd card itself

579
00:21:08,080 --> 00:21:10,159
so in this case you can tell the implant

580
00:21:10,159 --> 00:21:13,200
to continuously record the keystrokes

581
00:21:13,200 --> 00:21:14,840
and write it to the sd

582
00:21:14,840 --> 00:21:17,039
card so again the left side is going to

583
00:21:17,039 --> 00:21:18,799
be the victim and the right to the c2

584
00:21:18,799 --> 00:21:21,120
itself

585
00:21:29,200 --> 00:21:31,440
okay so the c2 is going to

586
00:21:31,440 --> 00:21:35,200
list the files on the sd card remotely

587
00:21:35,200 --> 00:21:38,240
we'll see it in a second

588
00:21:38,559 --> 00:21:39,840
here to see but you can see those two

589
00:21:39,840 --> 00:21:41,760
files on there so i'll grab the actual

590
00:21:41,760 --> 00:21:43,760
keystroke file

591
00:21:43,760 --> 00:21:46,320
number one

592
00:21:46,559 --> 00:21:48,080
and it's downloading over the mesh

593
00:21:48,080 --> 00:21:50,720
network now

594
00:21:50,799 --> 00:21:52,559
and then locally on the right side is

595
00:21:52,559 --> 00:21:53,840
going to be the

596
00:21:53,840 --> 00:21:55,679
c2 the attacker and you can see the

597
00:21:55,679 --> 00:21:57,840
keystrokes the

598
00:21:57,840 --> 00:21:59,200
spaced out you can see those return

599
00:21:59,200 --> 00:22:01,120
lines for all that so we are working on

600
00:22:01,120 --> 00:22:02,559
that

601
00:22:02,559 --> 00:22:05,840
we also save the head scan codes

602
00:22:05,840 --> 00:22:06,640
so

603
00:22:06,640 --> 00:22:08,559
if you you know weren't translating them

604
00:22:08,559 --> 00:22:09,919
correctly if it was a different language

605
00:22:09,919 --> 00:22:11,760
you have the raw codes to decipher from

606
00:22:11,760 --> 00:22:13,600
there

607
00:22:13,600 --> 00:22:15,679
and yeah that's the keystroke recording

608
00:22:15,679 --> 00:22:19,720
live and setting up the implants

609
00:22:27,760 --> 00:22:31,520
all right i gotta find the x help me

610
00:22:31,679 --> 00:22:33,200
there okay yeah

611
00:22:33,200 --> 00:22:36,200
cool

612
00:22:42,320 --> 00:22:43,760
all right so now that we know a little

613
00:22:43,760 --> 00:22:45,440
bit about what it does

614
00:22:45,440 --> 00:22:47,919
let's get into some more depth here

615
00:22:47,919 --> 00:22:50,480
so our design goal was

616
00:22:50,480 --> 00:22:52,960
covert and scale one network

617
00:22:52,960 --> 00:22:55,039
and by doing this um we have some

618
00:22:55,039 --> 00:22:56,799
authentication encryption now this is

619
00:22:56,799 --> 00:22:59,919
done by digi uh the authentication is

620
00:22:59,919 --> 00:23:02,159
like zigbee you have to have a network

621
00:23:02,159 --> 00:23:04,400
id you have to have

622
00:23:04,400 --> 00:23:07,280
a sleep mode timeout and or a setting

623
00:23:07,280 --> 00:23:11,039
and then you also have to have

624
00:23:11,039 --> 00:23:12,640
the channel right

625
00:23:12,640 --> 00:23:14,480
unlike zigbee there's no pan id you can

626
00:23:14,480 --> 00:23:17,440
set the zero with this one but

627
00:23:17,440 --> 00:23:20,000
they also offer encryption now depending

628
00:23:20,000 --> 00:23:21,600
on the radio model you have you can do

629
00:23:21,600 --> 00:23:25,280
aes 128 or aes 256 encryption you just

630
00:23:25,280 --> 00:23:26,559
enter the key

631
00:23:26,559 --> 00:23:29,120
and so that's one way we were able to

632
00:23:29,120 --> 00:23:30,320
scale or

633
00:23:30,320 --> 00:23:31,919
secure our network

634
00:23:31,919 --> 00:23:33,360
then we have the mesh networking part

635
00:23:33,360 --> 00:23:35,840
which lets us scale it up to an

636
00:23:35,840 --> 00:23:37,280
enterprise level

637
00:23:37,280 --> 00:23:38,960
compromise

638
00:23:38,960 --> 00:23:41,600
instead of just one offs and then the

639
00:23:41,600 --> 00:23:43,679
other benefit to the mesh networking is

640
00:23:43,679 --> 00:23:45,679
that we are able to extend the range

641
00:23:45,679 --> 00:23:47,200
like we talked about

642
00:23:47,200 --> 00:23:48,960
but this radio actually doesn't use

643
00:23:48,960 --> 00:23:51,679
zigbee it uses digimesh this is a

644
00:23:51,679 --> 00:23:54,720
proprietary protocol with digi and it's

645
00:23:54,720 --> 00:23:56,480
a little different than zigbee in the

646
00:23:56,480 --> 00:23:58,880
fact that you don't have a controller

647
00:23:58,880 --> 00:24:01,039
every device that gets put down with

648
00:24:01,039 --> 00:24:04,159
digimesh is its own router so makes

649
00:24:04,159 --> 00:24:06,320
provisioning really easy every device

650
00:24:06,320 --> 00:24:08,480
can be identical when you drop it in

651
00:24:08,480 --> 00:24:10,159
just with a different name

652
00:24:10,159 --> 00:24:11,520
and then

653
00:24:11,520 --> 00:24:14,080
digimesh allows you to get up to a

654
00:24:14,080 --> 00:24:17,520
thousand nodes at one time without any

655
00:24:17,520 --> 00:24:21,039
alteration to the network itself

656
00:24:21,039 --> 00:24:22,640
and like we mentioned before we can

657
00:24:22,640 --> 00:24:24,240
control them all from one c2 with the

658
00:24:24,240 --> 00:24:26,400
global broadcast if we want or we can

659
00:24:26,400 --> 00:24:28,720
just do individual commands

660
00:24:28,720 --> 00:24:31,840
and these radios so the xb3 pro that

661
00:24:31,840 --> 00:24:33,679
we're using right here can get up to two

662
00:24:33,679 --> 00:24:35,760
miles line of sight

663
00:24:35,760 --> 00:24:37,919
indoors it can get up to 300 feet with

664
00:24:37,919 --> 00:24:39,440
obstructions

665
00:24:39,440 --> 00:24:41,919
and if you go sub gigahertz with another

666
00:24:41,919 --> 00:24:43,360
model line from them

667
00:24:43,360 --> 00:24:44,480
with the right power and the right

668
00:24:44,480 --> 00:24:46,880
antennas these radios are designed for

669
00:24:46,880 --> 00:24:48,320
things like oil rigs and they can

670
00:24:48,320 --> 00:24:52,240
actually reach out to 65 miles

671
00:24:52,720 --> 00:24:54,640
so for those that don't know what a mesh

672
00:24:54,640 --> 00:24:56,080
network is this kind of gives you an

673
00:24:56,080 --> 00:24:59,120
idea the c2 is in the middle and every

674
00:24:59,120 --> 00:25:01,840
node is a router so if we want to send a

675
00:25:01,840 --> 00:25:03,679
message all the way to the farthest end

676
00:25:03,679 --> 00:25:05,520
point it will go through the other nodes

677
00:25:05,520 --> 00:25:07,760
and this allows us to self-heal if a

678
00:25:07,760 --> 00:25:09,520
device goes down they'll find another

679
00:25:09,520 --> 00:25:11,600
path and this is how we can also shape

680
00:25:11,600 --> 00:25:13,279
it around obstructions like concrete

681
00:25:13,279 --> 00:25:16,080
barriers or walls

682
00:25:16,080 --> 00:25:18,000
so we talked about joining the network

683
00:25:18,000 --> 00:25:20,000
we've talked about encrypting it but we

684
00:25:20,000 --> 00:25:22,880
also implemented an enable feature so

685
00:25:22,880 --> 00:25:24,720
let's say somebody discovers that we're

686
00:25:24,720 --> 00:25:26,480
there and they want to interact with us

687
00:25:26,480 --> 00:25:29,279
by replaying a message our device needs

688
00:25:29,279 --> 00:25:31,039
to have an enable message first before

689
00:25:31,039 --> 00:25:33,200
it will respond to anything without that

690
00:25:33,200 --> 00:25:34,960
it'll just be passive and send

691
00:25:34,960 --> 00:25:36,559
keystrokes through

692
00:25:36,559 --> 00:25:38,960
and once it's enabled then it looks for

693
00:25:38,960 --> 00:25:41,919
very specific commands user definable

694
00:25:41,919 --> 00:25:43,840
and that will trigger the modes that you

695
00:25:43,840 --> 00:25:46,720
wanted to go through

696
00:25:47,160 --> 00:25:48,960
[Music]

697
00:25:48,960 --> 00:25:50,400
so the

698
00:25:50,400 --> 00:25:52,720
with any kind of manual device

699
00:25:52,720 --> 00:25:54,559
this is how we achieve the keystroke

700
00:25:54,559 --> 00:25:56,880
injection sniffing and recording

701
00:25:56,880 --> 00:25:58,640
so right now

702
00:25:58,640 --> 00:26:00,720
john mentioned we have the two cmd 21

703
00:26:00,720 --> 00:26:02,480
chips so

704
00:26:02,480 --> 00:26:05,120
how it works is one acts as the usb host

705
00:26:05,120 --> 00:26:06,799
and this is what the actual hit device

706
00:26:06,799 --> 00:26:09,760
itself interfaces with first

707
00:26:09,760 --> 00:26:12,240
and we use a project called usb

708
00:26:12,240 --> 00:26:14,240
metamorph and this project was actually

709
00:26:14,240 --> 00:26:15,279
made for

710
00:26:15,279 --> 00:26:16,559
people that want to develop like

711
00:26:16,559 --> 00:26:18,880
joysticks or really cool keyboards with

712
00:26:18,880 --> 00:26:21,440
you know special buttons

713
00:26:21,440 --> 00:26:23,760
it's a great project is able to take hit

714
00:26:23,760 --> 00:26:27,039
codes very fast and translate them to

715
00:26:27,039 --> 00:26:28,400
an actual character that we're looking

716
00:26:28,400 --> 00:26:29,440
for

717
00:26:29,440 --> 00:26:32,240
so what happens is that first sam-d-chip

718
00:26:32,240 --> 00:26:34,400
will send over that charcoal

719
00:26:34,400 --> 00:26:36,960
to the usb client chip that's kind of

720
00:26:36,960 --> 00:26:38,480
the brains of the implant

721
00:26:38,480 --> 00:26:42,159
so not only will just pass over the um

722
00:26:42,159 --> 00:26:44,960
actual hid code to the victim's computer

723
00:26:44,960 --> 00:26:46,880
you know so it's achieved pass-through

724
00:26:46,880 --> 00:26:48,000
on that sense

725
00:26:48,000 --> 00:26:50,159
it sniffs it so this interfaces with the

726
00:26:50,159 --> 00:26:53,360
sd card as well so it's saving data

727
00:26:53,360 --> 00:26:55,760
it also interfaces with the radio itself

728
00:26:55,760 --> 00:26:56,880
so that's where it's getting its

729
00:26:56,880 --> 00:26:58,400
commands and sending everything back to

730
00:26:58,400 --> 00:27:00,960
the c2

731
00:27:04,480 --> 00:27:05,360
okay

732
00:27:05,360 --> 00:27:07,840
so we talked about some of the modes

733
00:27:07,840 --> 00:27:09,200
this can be in i don't know if you saw

734
00:27:09,200 --> 00:27:11,840
in the demo we actually got the status

735
00:27:11,840 --> 00:27:13,120
of an implant and returned three

736
00:27:13,120 --> 00:27:14,880
different things this is one of the

737
00:27:14,880 --> 00:27:17,360
modes it returns so insomnia mode at a

738
00:27:17,360 --> 00:27:18,559
high level

739
00:27:18,559 --> 00:27:20,720
is a mouse jiggler so

740
00:27:20,720 --> 00:27:23,279
what happens is it moves back and forth

741
00:27:23,279 --> 00:27:24,960
this one's pretty cool

742
00:27:24,960 --> 00:27:26,720
the way we developed it because

743
00:27:26,720 --> 00:27:28,000
if you're staring at the screen you're

744
00:27:28,000 --> 00:27:29,919
not going to recognize that it's doing

745
00:27:29,919 --> 00:27:31,919
this it also doesn't give you that drunk

746
00:27:31,919 --> 00:27:33,600
and mouse feeling of you know you move

747
00:27:33,600 --> 00:27:35,760
to the right and it slides over there

748
00:27:35,760 --> 00:27:38,640
that does not exist so it's pretty cool

749
00:27:38,640 --> 00:27:40,799
and the purpose of this is to keep the

750
00:27:40,799 --> 00:27:43,919
computer from going to sleep

751
00:27:43,919 --> 00:27:46,080
and by default this mode is turned off

752
00:27:46,080 --> 00:27:47,919
by default so you can do a mass turn on

753
00:27:47,919 --> 00:27:49,679
insomnia mode you can spit

754
00:27:49,679 --> 00:27:53,760
pick specific implants it just depends

755
00:27:53,760 --> 00:27:56,320
as mentioned we have a status update so

756
00:27:56,320 --> 00:27:57,600
this is kind of how we see if the

757
00:27:57,600 --> 00:27:59,840
implant is working if it responds back

758
00:27:59,840 --> 00:28:01,279
with these statuses

759
00:28:01,279 --> 00:28:03,919
so the important ones are currently

760
00:28:03,919 --> 00:28:06,240
recording keystrokes and

761
00:28:06,240 --> 00:28:09,360
do you have insomnia mode turned on

762
00:28:09,360 --> 00:28:10,720
the other important feature and we use

763
00:28:10,720 --> 00:28:12,240
this for injection

764
00:28:12,240 --> 00:28:14,000
to give us confidence in when to throw a

765
00:28:14,000 --> 00:28:15,520
powershell script in

766
00:28:15,520 --> 00:28:17,279
is we can see when the last time they

767
00:28:17,279 --> 00:28:19,840
pressed a key on the keyboard which is

768
00:28:19,840 --> 00:28:22,399
pretty useful

769
00:28:22,399 --> 00:28:24,960
and since we have an sd card we do story

770
00:28:24,960 --> 00:28:27,440
memory management

771
00:28:27,440 --> 00:28:28,159
so

772
00:28:28,159 --> 00:28:30,320
from the c2 over the mesh network we can

773
00:28:30,320 --> 00:28:32,720
actually push new injection scripts so

774
00:28:32,720 --> 00:28:34,880
we don't need access to the sd card to

775
00:28:34,880 --> 00:28:36,159
load things locally we can do that

776
00:28:36,159 --> 00:28:37,840
remotely

777
00:28:37,840 --> 00:28:40,080
we can also enumerate the sd card

778
00:28:40,080 --> 00:28:42,080
this is important because we like to

779
00:28:42,080 --> 00:28:43,919
know if we're recording keystrokes what

780
00:28:43,919 --> 00:28:45,679
kind of artifacts are on there

781
00:28:45,679 --> 00:28:46,720
and we want to see what kind of

782
00:28:46,720 --> 00:28:48,080
injection scripts already have on there

783
00:28:48,080 --> 00:28:50,159
as well

784
00:28:50,159 --> 00:28:52,240
and a typical memory management we can

785
00:28:52,240 --> 00:28:54,240
erase data if needed that's important

786
00:28:54,240 --> 00:28:56,480
for the next feature

787
00:28:56,480 --> 00:28:57,200
so

788
00:28:57,200 --> 00:28:59,279
if we feel that the device has been

789
00:28:59,279 --> 00:29:01,679
compromised in any way we can send a

790
00:29:01,679 --> 00:29:04,559
command to go into the go dark mode

791
00:29:04,559 --> 00:29:06,159
so what that does is it actually

792
00:29:06,159 --> 00:29:08,320
disables all functionality on the

793
00:29:08,320 --> 00:29:10,159
implant itself so it'll turn off the

794
00:29:10,159 --> 00:29:13,520
keystroke recording a sounding mode

795
00:29:13,520 --> 00:29:15,360
and it'll wipe whatever storage is on

796
00:29:15,360 --> 00:29:17,200
there so in this case it wipes the sd

797
00:29:17,200 --> 00:29:19,039
card itself

798
00:29:19,039 --> 00:29:21,279
and it goes into like a sleep mode so

799
00:29:21,279 --> 00:29:22,640
it'll wait for

800
00:29:22,640 --> 00:29:24,480
us to re-enable it with a specific

801
00:29:24,480 --> 00:29:27,279
command

802
00:29:27,279 --> 00:29:29,039
one of the features that we mentioned

803
00:29:29,039 --> 00:29:30,960
before is we actually do our reverse

804
00:29:30,960 --> 00:29:32,080
shell

805
00:29:32,080 --> 00:29:32,960
through

806
00:29:32,960 --> 00:29:35,520
the digi rf network itself so we don't

807
00:29:35,520 --> 00:29:38,640
rely on the victim we don't rely on

808
00:29:38,640 --> 00:29:41,760
any other network infrastructure at all

809
00:29:41,760 --> 00:29:44,080
so what happens when you plug in the

810
00:29:44,080 --> 00:29:46,159
implant itself not only does it create

811
00:29:46,159 --> 00:29:48,559
the hid device it will open up a general

812
00:29:48,559 --> 00:29:50,399
com port as well

813
00:29:50,399 --> 00:29:52,720
and you can actually name

814
00:29:52,720 --> 00:29:54,240
let alone the hit and the com port you

815
00:29:54,240 --> 00:29:56,399
can change the vip pit for this so if

816
00:29:56,399 --> 00:29:58,240
you have a specific one you want to mask

817
00:29:58,240 --> 00:30:00,799
yourself as you can

818
00:30:00,799 --> 00:30:02,240
what happens is

819
00:30:02,240 --> 00:30:03,679
and this is where the other functions

820
00:30:03,679 --> 00:30:05,520
like the last key press insomnia mode

821
00:30:05,520 --> 00:30:06,320
help

822
00:30:06,320 --> 00:30:09,120
we like a rubber ducky style we push the

823
00:30:09,120 --> 00:30:11,360
powershell payload to the victim so

824
00:30:11,360 --> 00:30:13,200
emulates the keystrokes

825
00:30:13,200 --> 00:30:15,360
and what the powershell script does is

826
00:30:15,360 --> 00:30:17,840
it attaches itself to that con port

827
00:30:17,840 --> 00:30:21,200
opens it up and it kind of listens

828
00:30:21,200 --> 00:30:23,440
so from the c2

829
00:30:23,440 --> 00:30:25,760
you can attach yourself to that com port

830
00:30:25,760 --> 00:30:28,559
over the digi uh mesh network

831
00:30:28,559 --> 00:30:30,399
and do like a who am i or something that

832
00:30:30,399 --> 00:30:31,919
relates it to the powershell process

833
00:30:31,919 --> 00:30:33,760
that's hiding in the background and when

834
00:30:33,760 --> 00:30:35,840
it executes it'll send it back through

835
00:30:35,840 --> 00:30:37,919
the mesh network to your c2 so it

836
00:30:37,919 --> 00:30:38,960
doesn't rely on the victim's

837
00:30:38,960 --> 00:30:41,120
infrastructure at all

838
00:30:41,120 --> 00:30:43,760
using that same idea as we we actually

839
00:30:43,760 --> 00:30:45,200
steal data

840
00:30:45,200 --> 00:30:46,559
through that com port as well we have a

841
00:30:46,559 --> 00:30:48,399
data expo script

842
00:30:48,399 --> 00:30:49,120
so

843
00:30:49,120 --> 00:30:50,960
it utilizes the exact same com port that

844
00:30:50,960 --> 00:30:55,039
we open along with the uh hit device

845
00:30:55,039 --> 00:30:58,240
it will run a powershell script so

846
00:30:58,240 --> 00:31:00,000
from the c2 kind of like how you would

847
00:31:00,000 --> 00:31:02,080
scp your ftp of file you give it the

848
00:31:02,080 --> 00:31:04,080
full remote path on the victim's machine

849
00:31:04,080 --> 00:31:05,760
that you want to steal a file with

850
00:31:05,760 --> 00:31:06,640
this is done like through your

851
00:31:06,640 --> 00:31:07,760
reconnaissance you did through the

852
00:31:07,760 --> 00:31:09,039
reverse shell

853
00:31:09,039 --> 00:31:10,640
it will grab the contents of the file

854
00:31:10,640 --> 00:31:12,960
base64 g zip it

855
00:31:12,960 --> 00:31:15,360
and then it'll pass in chunks

856
00:31:15,360 --> 00:31:16,399
the

857
00:31:16,399 --> 00:31:18,480
limitation of the actual packet size of

858
00:31:18,480 --> 00:31:22,000
the the radio itself which is 256 bytes

859
00:31:22,000 --> 00:31:24,320
and you can set this within the script

860
00:31:24,320 --> 00:31:26,640
and it'll pass it over the back to the

861
00:31:26,640 --> 00:31:29,840
digi mesh network to the c2 itself

862
00:31:29,840 --> 00:31:33,039
and because it's base64 and gzips the

863
00:31:33,039 --> 00:31:34,480
integrity of the you know those

864
00:31:34,480 --> 00:31:36,080
characters is very important if you're

865
00:31:36,080 --> 00:31:37,279
missing a character your file is

866
00:31:37,279 --> 00:31:38,559
destroyed

867
00:31:38,559 --> 00:31:39,519
so

868
00:31:39,519 --> 00:31:41,360
error handling is done not only on the

869
00:31:41,360 --> 00:31:43,120
radio side or if it's missing a packet

870
00:31:43,120 --> 00:31:44,720
or it's out of order it'll ask to resend

871
00:31:44,720 --> 00:31:46,720
it but powershell kind of has like a

872
00:31:46,720 --> 00:31:49,120
cynic method that we use to verify that

873
00:31:49,120 --> 00:31:52,399
we sent the correct amount of bytes

874
00:31:53,440 --> 00:31:55,039
and you don't necessarily have to run

875
00:31:55,039 --> 00:31:56,399
this as a brand new script you can

876
00:31:56,399 --> 00:31:57,919
utilize the reverse shell that you

877
00:31:57,919 --> 00:32:01,480
previously opened

878
00:32:02,000 --> 00:32:04,320
all right

879
00:32:10,799 --> 00:32:14,640
all right so here's the c2 video

880
00:32:14,640 --> 00:32:15,840
with the uh we're going to start with

881
00:32:15,840 --> 00:32:17,840
the reverse shell

882
00:32:17,840 --> 00:32:20,399
it's kind of hard to see but here we're

883
00:32:20,399 --> 00:32:22,240
selecting to launch a script and we're

884
00:32:22,240 --> 00:32:24,000
going to push the

885
00:32:24,000 --> 00:32:26,240
reverse shell script

886
00:32:26,240 --> 00:32:27,760
and as we do that

887
00:32:27,760 --> 00:32:30,000
we go in we select our target we select

888
00:32:30,000 --> 00:32:32,240
our script

889
00:32:32,240 --> 00:32:33,440
and then here you're going to see the

890
00:32:33,440 --> 00:32:36,799
keystroke injection pop up

891
00:32:37,039 --> 00:32:38,799
and then hide in the background as a

892
00:32:38,799 --> 00:32:41,519
process now that it's created the

893
00:32:41,519 --> 00:32:43,039
reverse shell over the com port we're

894
00:32:43,039 --> 00:32:45,760
going to go back and connect to the com

895
00:32:45,760 --> 00:32:48,879
port through a different option

896
00:32:49,200 --> 00:32:51,919
and then we're going to

897
00:32:51,919 --> 00:32:53,519
once connected we're going to enumerate

898
00:32:53,519 --> 00:32:56,000
the file system and look for a target

899
00:32:56,000 --> 00:32:59,799
file that we want to exfil

900
00:33:12,480 --> 00:33:14,159
there we can see we're listing the file

901
00:33:14,159 --> 00:33:14,620
system

902
00:33:14,620 --> 00:33:17,699
[Music]

903
00:33:17,760 --> 00:33:21,960
we find a file called loot.txt

904
00:33:23,279 --> 00:33:24,880
and so now we're going to go

905
00:33:24,880 --> 00:33:26,080
and

906
00:33:26,080 --> 00:33:29,760
attempt to data x fill that file

907
00:33:32,320 --> 00:33:33,679
so here we're going to launch our data

908
00:33:33,679 --> 00:33:35,360
excel script again we're going to choose

909
00:33:35,360 --> 00:33:38,000
our target

910
00:33:38,000 --> 00:33:39,440
and then we're going to give it the file

911
00:33:39,440 --> 00:33:40,640
path

912
00:33:40,640 --> 00:33:44,240
to the file that we want x fill

913
00:33:44,240 --> 00:33:46,159
and then we're going to name it what we

914
00:33:46,159 --> 00:33:49,840
want it to be saved as locally

915
00:33:50,080 --> 00:33:53,840
and it's going to launch the script here

916
00:34:04,720 --> 00:34:07,120
and then you're going to see some

917
00:34:07,120 --> 00:34:09,280
messages as the data comes back

918
00:34:09,280 --> 00:34:10,879
verifying the

919
00:34:10,879 --> 00:34:14,879
base64 encoding of the file that we

920
00:34:18,839 --> 00:34:21,199
received now we're going to open it up

921
00:34:21,199 --> 00:34:23,359
and look for the file ourselves

922
00:34:23,359 --> 00:34:26,560
and check the text

923
00:34:29,119 --> 00:34:31,280
and that proves out our successful data

924
00:34:31,280 --> 00:34:35,839
excel path over the mesh c2

925
00:34:48,639 --> 00:34:50,560
okay so now you've seen the high

926
00:34:50,560 --> 00:34:52,719
functionality of the implant itself

927
00:34:52,719 --> 00:34:54,960
how does it meet our needs

928
00:34:54,960 --> 00:34:57,440
so like most implants and types these

929
00:34:57,440 --> 00:34:59,839
types of devices um this is a great way

930
00:34:59,839 --> 00:35:02,560
to have persistence to a victim so

931
00:35:02,560 --> 00:35:04,160
hopefully if the they restart their

932
00:35:04,160 --> 00:35:06,960
computer or the powershell process dies

933
00:35:06,960 --> 00:35:08,400
we can just redeploy it through that

934
00:35:08,400 --> 00:35:11,280
implant a keyboard

935
00:35:11,359 --> 00:35:14,240
the c2 activity itself is not using

936
00:35:14,240 --> 00:35:15,839
their network or the victim's

937
00:35:15,839 --> 00:35:17,440
infrastructure at all we're using our

938
00:35:17,440 --> 00:35:19,599
own

939
00:35:20,800 --> 00:35:22,720
for injecting powershell scripts it's

940
00:35:22,720 --> 00:35:24,160
kind of the worst thing is you're trying

941
00:35:24,160 --> 00:35:25,359
to push a powershell script while

942
00:35:25,359 --> 00:35:26,640
they're looking at their computer it's

943
00:35:26,640 --> 00:35:28,480
going to freak out most people here

944
00:35:28,480 --> 00:35:31,040
so with the two different functions of

945
00:35:31,040 --> 00:35:32,480
insomnia mode

946
00:35:32,480 --> 00:35:34,240
which helps prevent their computer from

947
00:35:34,240 --> 00:35:35,520
going to sleep

948
00:35:35,520 --> 00:35:37,280
and the last key press we have pretty

949
00:35:37,280 --> 00:35:39,280
high confidence that we can time a a

950
00:35:39,280 --> 00:35:41,839
good attack

951
00:35:42,240 --> 00:35:44,240
and with this type of implant if we need

952
00:35:44,240 --> 00:35:46,240
to extend the range then we just throw

953
00:35:46,240 --> 00:35:47,760
in more implants and they don't

954
00:35:47,760 --> 00:35:49,200
necessarily necessarily need to be

955
00:35:49,200 --> 00:35:51,280
implanted devices

956
00:35:51,280 --> 00:35:53,839
the radio itself can interface with like

957
00:35:53,839 --> 00:35:56,079
a usb charger or something it only needs

958
00:35:56,079 --> 00:35:58,720
3.3 volts so we could plant repeaters

959
00:35:58,720 --> 00:36:01,598
around if we needed to

960
00:36:02,560 --> 00:36:04,880
all right does anyone here i don't know

961
00:36:04,880 --> 00:36:06,240
if we ask this in the beginning actually

962
00:36:06,240 --> 00:36:08,240
do any war walking or look for rogue

963
00:36:08,240 --> 00:36:11,119
networks in their organization

964
00:36:11,119 --> 00:36:13,520
no oh one person or curious do you look

965
00:36:13,520 --> 00:36:15,680
for like rogue iot networks or just like

966
00:36:15,680 --> 00:36:18,480
802.11.

967
00:36:19,280 --> 00:36:20,960
okay

968
00:36:20,960 --> 00:36:22,400
we're curious it's

969
00:36:22,400 --> 00:36:24,320
we hope you know this this kind of

970
00:36:24,320 --> 00:36:26,400
brings discussion that it should be

971
00:36:26,400 --> 00:36:28,480
beyond looking at you know ssids and

972
00:36:28,480 --> 00:36:30,320
hidden ssid networks we should be

973
00:36:30,320 --> 00:36:32,320
looking at all rogue networks and

974
00:36:32,320 --> 00:36:34,800
especially iot type networks like this

975
00:36:34,800 --> 00:36:36,560
so one of the biggest defenses obviously

976
00:36:36,560 --> 00:36:38,320
is war walking looking around your

977
00:36:38,320 --> 00:36:39,280
network

978
00:36:39,280 --> 00:36:41,280
for stuff like that or your location

979
00:36:41,280 --> 00:36:42,960
if you're in a really isolated area

980
00:36:42,960 --> 00:36:44,240
that's pretty easy to do like a

981
00:36:44,240 --> 00:36:45,760
distribution center or maybe a data

982
00:36:45,760 --> 00:36:47,680
center but if you work like in a retail

983
00:36:47,680 --> 00:36:48,880
store that's going to be pretty

984
00:36:48,880 --> 00:36:50,800
difficult to do

985
00:36:50,800 --> 00:36:52,400
obviously the next one is you can tamper

986
00:36:52,400 --> 00:36:54,240
tape your devices that's it may be a

987
00:36:54,240 --> 00:36:55,599
little extreme depending on your

988
00:36:55,599 --> 00:36:57,520
location but if you're working a pretty

989
00:36:57,520 --> 00:36:59,599
critical infrastructure it's definitely

990
00:36:59,599 --> 00:37:01,359
a good idea

991
00:37:01,359 --> 00:37:03,520
and the biggest one

992
00:37:03,520 --> 00:37:05,200
that we believe is you should buy your

993
00:37:05,200 --> 00:37:07,760
devices from trusted vendors so there's

994
00:37:07,760 --> 00:37:09,200
actually been stuff in the news the last

995
00:37:09,200 --> 00:37:10,640
few years where people are buying stuff

996
00:37:10,640 --> 00:37:12,320
from like third-party bidding websites

997
00:37:12,320 --> 00:37:13,920
or marketplaces

998
00:37:13,920 --> 00:37:15,680
and they're noticing that like maybe

999
00:37:15,680 --> 00:37:17,200
this keyboard seems built a little

1000
00:37:17,200 --> 00:37:18,320
differently than ones they bought

1001
00:37:18,320 --> 00:37:19,520
originally

1002
00:37:19,520 --> 00:37:21,440
so if you're able to buy you know

1003
00:37:21,440 --> 00:37:23,760
especially like your peripherals maybe

1004
00:37:23,760 --> 00:37:27,680
cameras monitors mouses keyboards

1005
00:37:27,680 --> 00:37:31,279
buy them from the source that you trust

1006
00:37:31,760 --> 00:37:33,119
so we've shown you at a high level the

1007
00:37:33,119 --> 00:37:35,119
version one that we have

1008
00:37:35,119 --> 00:37:36,800
this is already spinning up ideas of how

1009
00:37:36,800 --> 00:37:39,920
we can do things differently soon

1010
00:37:39,920 --> 00:37:41,839
so we want to add another device to the

1011
00:37:41,839 --> 00:37:43,680
implant kind of like a microphone mostly

1012
00:37:43,680 --> 00:37:45,760
an audio sensor we think this will be

1013
00:37:45,760 --> 00:37:48,320
like the trifecta of timing a good time

1014
00:37:48,320 --> 00:37:50,880
for throwing in a powershell script so

1015
00:37:50,880 --> 00:37:52,640
the idea is if you know you're keeping

1016
00:37:52,640 --> 00:37:54,640
the computer from going to sleep if you

1017
00:37:54,640 --> 00:37:55,520
know the last time you hit their

1018
00:37:55,520 --> 00:37:58,000
keyboard if you're able to monitor sound

1019
00:37:58,000 --> 00:38:00,720
and find like a static level a baseline

1020
00:38:00,720 --> 00:38:02,079
you might know if someone's talking near

1021
00:38:02,079 --> 00:38:04,400
them or you know you want to make sure

1022
00:38:04,400 --> 00:38:05,599
no one's looking at the computer screen

1023
00:38:05,599 --> 00:38:07,520
pretty much

1024
00:38:07,520 --> 00:38:10,720
solar monitors okay

1025
00:38:13,359 --> 00:38:15,200
oh okay that's a good point because we

1026
00:38:15,200 --> 00:38:17,359
thought about if they're at their desk

1027
00:38:17,359 --> 00:38:19,280
just texting on their phone and moving

1028
00:38:19,280 --> 00:38:21,040
around we wanted we wanted to detect

1029
00:38:21,040 --> 00:38:25,119
that as well so okay good to know

1030
00:38:25,119 --> 00:38:27,200
we also need a smaller footprint so this

1031
00:38:27,200 --> 00:38:29,599
works with the kiwi keyboards we want to

1032
00:38:29,599 --> 00:38:32,160
implant right now but we have plenty of

1033
00:38:32,160 --> 00:38:33,680
ways we can reduce the footprint so the

1034
00:38:33,680 --> 00:38:36,880
first one is the radio itself um due to

1035
00:38:36,880 --> 00:38:38,560
availability we're using one of the

1036
00:38:38,560 --> 00:38:40,400
pretty big antenna as you saw in one of

1037
00:38:40,400 --> 00:38:41,599
the screenshots

1038
00:38:41,599 --> 00:38:43,200
and we can actually move to a micro

1039
00:38:43,200 --> 00:38:44,240
which is about

1040
00:38:44,240 --> 00:38:46,480
60 smaller in size

1041
00:38:46,480 --> 00:38:49,440
storage we use an sd card uh breakout

1042
00:38:49,440 --> 00:38:51,359
which is pretty big we can move to nand

1043
00:38:51,359 --> 00:38:53,040
flash which would reduce that by like

1044
00:38:53,040 --> 00:38:54,480
eighty percent

1045
00:38:54,480 --> 00:38:56,400
and the next spot is

1046
00:38:56,400 --> 00:38:58,960
um the debug pins are nice like the j

1047
00:38:58,960 --> 00:39:00,480
tag pins and our

1048
00:39:00,480 --> 00:39:03,760
swd for reflashing it but if we remove

1049
00:39:03,760 --> 00:39:05,280
those that's going to reduce the

1050
00:39:05,280 --> 00:39:08,000
footprint as well

1051
00:39:08,400 --> 00:39:10,480
also as you saw the windows exfol script

1052
00:39:10,480 --> 00:39:12,240
and the data exfil

1053
00:39:12,240 --> 00:39:13,520
right now we're working on porting those

1054
00:39:13,520 --> 00:39:14,960
to linux

1055
00:39:14,960 --> 00:39:17,839
and mac as well

1056
00:39:18,000 --> 00:39:20,000
and you know we're not totally tied down

1057
00:39:20,000 --> 00:39:23,359
to the the digi mesh rf um radios are

1058
00:39:23,359 --> 00:39:26,320
amazing but they're very expensive when

1059
00:39:26,320 --> 00:39:28,320
we started doing this two years ago i

1060
00:39:28,320 --> 00:39:29,520
think they've doubled in price since

1061
00:39:29,520 --> 00:39:30,800
then and you can't even really get them

1062
00:39:30,800 --> 00:39:32,480
anymore unfortunately

1063
00:39:32,480 --> 00:39:34,079
um so we're looking at using other

1064
00:39:34,079 --> 00:39:37,760
radios such as like laura or something

1065
00:39:38,480 --> 00:39:39,760
and

1066
00:39:39,760 --> 00:39:40,800
that's not the only hardware we're

1067
00:39:40,800 --> 00:39:42,720
looking at replacing we also have the

1068
00:39:42,720 --> 00:39:45,520
rpi 2040. so right now we're using two

1069
00:39:45,520 --> 00:39:49,040
samd21 chips as the host and the client

1070
00:39:49,040 --> 00:39:50,079
chipset

1071
00:39:50,079 --> 00:39:52,240
we can actually use the arpai 2040 and

1072
00:39:52,240 --> 00:39:53,680
that'll take care of that can actually

1073
00:39:53,680 --> 00:39:56,400
act as host and client at the same time

1074
00:39:56,400 --> 00:39:58,800
it contains 48 pins so we'll have enough

1075
00:39:58,800 --> 00:40:00,320
space to talk to our other peripherals

1076
00:40:00,320 --> 00:40:01,440
too so

1077
00:40:01,440 --> 00:40:03,760
looking at doing that

1078
00:40:03,760 --> 00:40:05,839
and yeah so i want to give a special

1079
00:40:05,839 --> 00:40:07,920
thank you to the eff they kind of helped

1080
00:40:07,920 --> 00:40:08,640
us

1081
00:40:08,640 --> 00:40:10,880
um give guidance on how to release this

1082
00:40:10,880 --> 00:40:12,960
safely without getting in trouble i also

1083
00:40:12,960 --> 00:40:13,839
want to

1084
00:40:13,839 --> 00:40:15,920
thank soldier fortran and redfish for

1085
00:40:15,920 --> 00:40:18,319
mentoring us on this this is our first

1086
00:40:18,319 --> 00:40:20,240
talk so we didn't really know a good way

1087
00:40:20,240 --> 00:40:22,160
to organize this and present it so they

1088
00:40:22,160 --> 00:40:24,400
helped a ton thank you

1089
00:40:24,400 --> 00:40:27,040
we also have our contact information up

1090
00:40:27,040 --> 00:40:29,200
here so this presentation we're going to

1091
00:40:29,200 --> 00:40:30,319
release

1092
00:40:30,319 --> 00:40:32,000
i'm sure it'll be on the b sides media

1093
00:40:32,000 --> 00:40:33,359
server hopefully

1094
00:40:33,359 --> 00:40:34,800
so on the left side our personal

1095
00:40:34,800 --> 00:40:37,200
information on the right is the actual

1096
00:40:37,200 --> 00:40:39,680
injectal and hyde

1097
00:40:39,680 --> 00:40:41,599
account as well

1098
00:40:41,599 --> 00:40:43,920
we set up a discord so we're hoping

1099
00:40:43,920 --> 00:40:45,599
people want to use this

1100
00:40:45,599 --> 00:40:47,040
um

1101
00:40:47,040 --> 00:40:48,880
and yeah we set up a discord at chat

1102
00:40:48,880 --> 00:40:50,640
live

1103
00:40:50,640 --> 00:40:52,640
and the most important source i would

1104
00:40:52,640 --> 00:40:55,040
say is our github so this contains

1105
00:40:55,040 --> 00:40:58,160
everything from the c2 source

1106
00:40:58,160 --> 00:41:00,960
to the schematics for the pcb

1107
00:41:00,960 --> 00:41:03,359
we have schematics for enclosures now

1108
00:41:03,359 --> 00:41:04,319
if you don't want to put it inside a

1109
00:41:04,319 --> 00:41:07,280
keyboard and the actual arduino code as

1110
00:41:07,280 --> 00:41:10,880
well so it contains everything

1111
00:41:12,480 --> 00:41:13,200
so

1112
00:41:13,200 --> 00:41:14,560
this isn't our last talk we're actually

1113
00:41:14,560 --> 00:41:16,160
going to be in hardware hacking village

1114
00:41:16,160 --> 00:41:18,400
on friday at three o'clock

1115
00:41:18,400 --> 00:41:20,000
this is going to be a deeper technical

1116
00:41:20,000 --> 00:41:21,520
it's going to kind of go into more of

1117
00:41:21,520 --> 00:41:23,520
the prototypes that we built and uh

1118
00:41:23,520 --> 00:41:24,880
issues that we had

1119
00:41:24,880 --> 00:41:26,480
we're also going to be at defcon demo

1120
00:41:26,480 --> 00:41:27,680
labs where

1121
00:41:27,680 --> 00:41:28,960
you can actually play around with this

1122
00:41:28,960 --> 00:41:30,880
so we'll have a c2 setup and a couple

1123
00:41:30,880 --> 00:41:32,640
implants and we're hoping we can kind of

1124
00:41:32,640 --> 00:41:34,079
mess with the range and show people what

1125
00:41:34,079 --> 00:41:35,359
it can do

1126
00:41:35,359 --> 00:41:36,480
and yeah

1127
00:41:36,480 --> 00:41:38,640
and we do actually have you want to talk

1128
00:41:38,640 --> 00:41:40,079
about the twitter and

1129
00:41:40,079 --> 00:41:41,760
releasing the pcds

1130
00:41:41,760 --> 00:41:43,680
yeah sure

1131
00:41:43,680 --> 00:41:46,880
so we do have a few

1132
00:41:46,880 --> 00:41:48,800
pcbs that have everything but the radio

1133
00:41:48,800 --> 00:41:50,480
on them right now so they got the same

1134
00:41:50,480 --> 00:41:52,560
d21 chips everything's

1135
00:41:52,560 --> 00:41:54,400
like capacitors and everything's on the

1136
00:41:54,400 --> 00:41:57,760
board themselves and we will give away

1137
00:41:57,760 --> 00:41:59,680
a few of them if you guys want to

1138
00:41:59,680 --> 00:42:01,280
interact with us on twitter ask

1139
00:42:01,280 --> 00:42:03,920
questions or retweet whatever well

1140
00:42:03,920 --> 00:42:05,680
come find us at hardware hacking village

1141
00:42:05,680 --> 00:42:09,520
and we'll hand them out to you guys

1142
00:42:09,920 --> 00:42:11,920
all right

1143
00:42:11,920 --> 00:42:13,920
is there any questions

1144
00:42:13,920 --> 00:42:16,920
concerns

1145
00:42:27,520 --> 00:42:29,839
2.4 yards but also can do sub gears as

1146
00:42:29,839 --> 00:42:32,000
well

1147
00:42:32,000 --> 00:42:35,040
so she asked what um frequency this was

1148
00:42:35,040 --> 00:42:36,400
on

1149
00:42:36,400 --> 00:42:39,200
for the radio so 2.4 but as jonathan

1150
00:42:39,200 --> 00:42:41,200
mentioned it can go to sub gigahertz as

1151
00:42:41,200 --> 00:42:42,960
well

1152
00:42:42,960 --> 00:42:46,319
presumably the the range is related to

1153
00:42:46,319 --> 00:42:49,040
power it's really impossible to you know

1154
00:42:49,040 --> 00:42:50,079
what's the

1155
00:42:50,079 --> 00:42:52,319
easiest on the 3.3 volt but what's the

1156
00:42:52,319 --> 00:42:54,480
approach that you're going to pull

1157
00:42:54,480 --> 00:42:57,280
right now we're using the usb 2.0 line

1158
00:42:57,280 --> 00:42:59,760
so you're looking at 500 milliamps which

1159
00:42:59,760 --> 00:43:02,640
is enough to get it out

1160
00:43:02,640 --> 00:43:04,880
of the keyboard and

1161
00:43:04,880 --> 00:43:07,200
i have actually went half a block with

1162
00:43:07,200 --> 00:43:09,280
mine through a basement and been able to

1163
00:43:09,280 --> 00:43:12,480
relay out and then your real limitation

1164
00:43:12,480 --> 00:43:14,640
is your initial

1165
00:43:14,640 --> 00:43:16,400
exit vector out of your keyboard or your

1166
00:43:16,400 --> 00:43:18,079
implant after that you can drop a

1167
00:43:18,079 --> 00:43:21,200
repeater in and give it extra power give

1168
00:43:21,200 --> 00:43:22,960
it a better antenna if you can hide it

1169
00:43:22,960 --> 00:43:24,079
well and then you can really start

1170
00:43:24,079 --> 00:43:26,880
covering some range that way

1171
00:43:26,880 --> 00:43:27,680
yes

1172
00:43:27,680 --> 00:43:29,680
yeah i've had very good luck with laura

1173
00:43:29,680 --> 00:43:34,079
at 900 megahertz using the sx 1276 chips

1174
00:43:34,079 --> 00:43:36,079
i've actually gotten some miles up

1175
00:43:36,079 --> 00:43:38,319
okay as far as i was doing it across the

1176
00:43:38,319 --> 00:43:40,480
head screw one side the other medium

1177
00:43:40,480 --> 00:43:41,920
they kind of come to power and you

1178
00:43:41,920 --> 00:43:44,160
actually get two pieces of input

1179
00:43:44,160 --> 00:43:46,800
from the text so and sure the one i was

1180
00:43:46,800 --> 00:43:48,640
using was i was actually using on the

1181
00:43:48,640 --> 00:43:52,200
health side of the esp32s

1182
00:44:02,319 --> 00:44:03,839
okay yeah and that's nice part about

1183
00:44:03,839 --> 00:44:06,160
this design is that we just use the

1184
00:44:06,160 --> 00:44:08,560
serial connection so we can pivot

1185
00:44:08,560 --> 00:44:10,400
through radios as we see fit or as we

1186
00:44:10,400 --> 00:44:12,000
want to adapt to whatever environment we

1187
00:44:12,000 --> 00:44:13,520
want to be in

1188
00:44:13,520 --> 00:44:15,759
yes

1189
00:44:17,599 --> 00:44:18,720
how long

1190
00:44:18,720 --> 00:44:22,319
it's pretty it's pretty quick

1191
00:44:22,319 --> 00:44:24,560
so how easy and how fast can you

1192
00:44:24,560 --> 00:44:26,400
actually implant a device

1193
00:44:26,400 --> 00:44:28,400
so

1194
00:44:28,400 --> 00:44:30,240
if you have good soldering skills it's

1195
00:44:30,240 --> 00:44:31,520
not very difficult

1196
00:44:31,520 --> 00:44:33,520
on the what you need is access to the

1197
00:44:33,520 --> 00:44:35,200
actual keyboard

1198
00:44:35,200 --> 00:44:38,560
controller so it's just usb pretty much

1199
00:44:38,560 --> 00:44:41,119
ground power and d plus d minus

1200
00:44:41,119 --> 00:44:41,920
so

1201
00:44:41,920 --> 00:44:43,040
what we showed you some of those

1202
00:44:43,040 --> 00:44:45,040
pictures we actually had usb headers on

1203
00:44:45,040 --> 00:44:46,720
there but we implanted those headers

1204
00:44:46,720 --> 00:44:48,640
don't exist so we just kind of route

1205
00:44:48,640 --> 00:44:50,640
them through the board itself

1206
00:44:50,640 --> 00:44:52,800
so it depends if you've never soldered

1207
00:44:52,800 --> 00:44:54,160
before you're probably going to break a

1208
00:44:54,160 --> 00:44:56,960
few keyboards with controllers but

1209
00:44:56,960 --> 00:44:59,440
it's not too difficult

1210
00:44:59,440 --> 00:45:01,280
and then to add on that too

1211
00:45:01,280 --> 00:45:03,839
we're working on a design where some

1212
00:45:03,839 --> 00:45:05,680
keyboards have the header pins already

1213
00:45:05,680 --> 00:45:08,000
on so the nice thing about releasing the

1214
00:45:08,000 --> 00:45:12,000
full pcb design through like easy eda or

1215
00:45:12,000 --> 00:45:13,359
things of that nature is that you can go

1216
00:45:13,359 --> 00:45:15,359
in and design your own so you can

1217
00:45:15,359 --> 00:45:17,599
actually drop header pins on where you

1218
00:45:17,599 --> 00:45:20,160
can just disconnect the controller

1219
00:45:20,160 --> 00:45:22,000
you know put your own header pins on so

1220
00:45:22,000 --> 00:45:23,599
then it's just plug and play at that

1221
00:45:23,599 --> 00:45:25,920
point

1222
00:45:27,119 --> 00:45:29,839
any other questions

1223
00:45:31,040 --> 00:45:33,680
keystroke yesterday and logging can you

1224
00:45:33,680 --> 00:45:36,319
do both simultaneously

1225
00:45:36,319 --> 00:45:37,119
yes

1226
00:45:37,119 --> 00:45:38,640
yep

1227
00:45:38,640 --> 00:45:40,960
um the question was can you do live

1228
00:45:40,960 --> 00:45:42,640
keystroke recording

1229
00:45:42,640 --> 00:45:44,560
and uh snipping and recording at the

1230
00:45:44,560 --> 00:45:46,800
same time you can in fact

1231
00:45:46,800 --> 00:45:49,440
when we do the live sniffing it records

1232
00:45:49,440 --> 00:45:51,599
it on the c2 for us so you don't have to

1233
00:45:51,599 --> 00:45:54,160
enable that individually and then when

1234
00:45:54,160 --> 00:45:56,160
you go look at your loot files or

1235
00:45:56,160 --> 00:45:57,920
whatever it will tell you live keystroke

1236
00:45:57,920 --> 00:46:00,640
and it will label it with the mac or the

1237
00:46:00,640 --> 00:46:02,000
appropriate name that was assigned to

1238
00:46:02,000 --> 00:46:05,359
the implant at that time

1239
00:46:06,640 --> 00:46:08,160
what's the cost

1240
00:46:08,160 --> 00:46:09,520
the cost

1241
00:46:09,520 --> 00:46:12,480
what are your connections

1242
00:46:12,960 --> 00:46:15,359
uh the chips themselves run about four

1243
00:46:15,359 --> 00:46:17,040
bucks so you're looking at two chips the

1244
00:46:17,040 --> 00:46:19,920
pcbs if you get them made were they like

1245
00:46:19,920 --> 00:46:21,520
two three bucks

1246
00:46:21,520 --> 00:46:24,960
four ten it was uh for 100 pcbs or like

1247
00:46:24,960 --> 00:46:27,680
30 bucks so it's not horrible the the

1248
00:46:27,680 --> 00:46:29,760
most expensive part is the radio itself

1249
00:46:29,760 --> 00:46:31,040
so that's why we're exploring other

1250
00:46:31,040 --> 00:46:33,599
options the radio used to be

1251
00:46:33,599 --> 00:46:36,160
20 bucks 25 bucks now it's like

1252
00:46:36,160 --> 00:46:38,160
60 so

1253
00:46:38,160 --> 00:46:39,760
it's just that's just the chip shortage

1254
00:46:39,760 --> 00:46:41,520
show so we're just trying to

1255
00:46:41,520 --> 00:46:43,440
migrate around it and find alternatives

1256
00:46:43,440 --> 00:46:45,920
at this point

1257
00:46:46,960 --> 00:46:49,359
yes do you have any of the boards here

1258
00:46:49,359 --> 00:46:50,880
we do yes

1259
00:46:50,880 --> 00:46:52,560
we can hand them out if you guys would

1260
00:46:52,560 --> 00:46:54,160
like to take a look at them

1261
00:46:54,160 --> 00:46:55,760
or

1262
00:46:55,760 --> 00:46:57,760
come find us after we can pass them off

1263
00:46:57,760 --> 00:46:58,960
quickly i think we've got enough time

1264
00:46:58,960 --> 00:47:01,200
right

1265
00:47:03,839 --> 00:47:06,880
cool any other questions

1266
00:47:06,880 --> 00:47:09,520
does it matter where in the uh does it

1267
00:47:09,520 --> 00:47:11,440
need to be closer to the actual keyboard

1268
00:47:11,440 --> 00:47:13,920
matrix or the surgery i'm thinking about

1269
00:47:13,920 --> 00:47:14,960
the little uh

1270
00:47:14,960 --> 00:47:16,480
what they're made of the metal colors

1271
00:47:16,480 --> 00:47:18,160
that they go on the ends

1272
00:47:18,160 --> 00:47:19,760
oh yeah so it's the controller we're

1273
00:47:19,760 --> 00:47:21,599
worried about the most and the ones that

1274
00:47:21,599 --> 00:47:23,200
we're implanting there's actually a few

1275
00:47:23,200 --> 00:47:25,839
models we implanted um

1276
00:47:25,839 --> 00:47:27,280
where the mic where the

1277
00:47:27,280 --> 00:47:29,680
the keyboard controller sits is pretty

1278
00:47:29,680 --> 00:47:31,200
big in most keyboards

1279
00:47:31,200 --> 00:47:32,960
so it sits flush with that and that's

1280
00:47:32,960 --> 00:47:36,599
all we really care about

1281
00:47:38,240 --> 00:47:40,079
cool yeah we hope to see you guys this

1282
00:47:40,079 --> 00:47:41,920
week uh hardware hacking village and

1283
00:47:41,920 --> 00:47:43,760
defcon labs and like i said we have pcbs

1284
00:47:43,760 --> 00:47:45,599
to hand out if you're interested in if

1285
00:47:45,599 --> 00:47:47,119
you really think you'll actually use use

1286
00:47:47,119 --> 00:47:49,440
these on engagements um you know we'll

1287
00:47:49,440 --> 00:47:50,400
talk to you we have some that are

1288
00:47:50,400 --> 00:47:54,000
pre-built so love to talk to you guys

1289
00:47:54,000 --> 00:47:57,400
all right thank you

