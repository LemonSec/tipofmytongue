1
00:00:00,320 --> 00:00:03,439
unsupervised or really

2
00:00:03,439 --> 00:00:06,240
less monetary that the classic windows

3
00:00:06,240 --> 00:00:07,120
world

4
00:00:07,120 --> 00:00:07,919
and

5
00:00:07,919 --> 00:00:11,599
did we found this target xavier

6
00:00:11,599 --> 00:00:15,040
so yeah so we feel that cicd pipeline

7
00:00:15,040 --> 00:00:18,400
will actually check most of those boxes

8
00:00:18,400 --> 00:00:20,000
the first thing we can talk about is

9
00:00:20,000 --> 00:00:20,960
that

10
00:00:20,960 --> 00:00:23,680
devops teams usually come with a agility

11
00:00:23,680 --> 00:00:25,199
mindset

12
00:00:25,199 --> 00:00:28,320
meaning that in well at least sometimes

13
00:00:28,320 --> 00:00:30,800
translates within devops teams

14
00:00:30,800 --> 00:00:33,760
as less security policy less monitoring

15
00:00:33,760 --> 00:00:36,320
and more freedom to set up whatever they

16
00:00:36,320 --> 00:00:37,600
want

17
00:00:37,600 --> 00:00:39,280
what we've seen in some of our previous

18
00:00:39,280 --> 00:00:40,239
audits

19
00:00:40,239 --> 00:00:43,440
went as far as devops teams becoming

20
00:00:43,440 --> 00:00:46,160
actually another i.t teams within the

21
00:00:46,160 --> 00:00:48,160
information systems with their own

22
00:00:48,160 --> 00:00:51,280
budget their own systems and overall

23
00:00:51,280 --> 00:00:53,680
they were doing whatever they wanted

24
00:00:53,680 --> 00:00:55,840
so i wouldn't call that shadow i.t at

25
00:00:55,840 --> 00:00:58,320
this point but rather actually shadow

26
00:00:58,320 --> 00:00:59,680
information systems within the

27
00:00:59,680 --> 00:01:02,079
information systems which as you can

28
00:01:02,079 --> 00:01:04,720
guess will come with tons of

29
00:01:04,720 --> 00:01:06,640
security issues that are very very

30
00:01:06,640 --> 00:01:10,000
interesting for attackers and pen tester

31
00:01:10,000 --> 00:01:12,159
another thing which is not always

32
00:01:12,159 --> 00:01:14,159
necessarily the case but we feel that

33
00:01:14,159 --> 00:01:16,479
devops teams will usually

34
00:01:16,479 --> 00:01:18,400
take advantage of new type of

35
00:01:18,400 --> 00:01:20,960
infrastructure such as kubernetes such

36
00:01:20,960 --> 00:01:24,080
as cloud provider and things like that

37
00:01:24,080 --> 00:01:25,280
which are

38
00:01:25,280 --> 00:01:28,799
in our experience less supervised less

39
00:01:28,799 --> 00:01:33,280
monitored than on premise infrastructure

40
00:01:33,280 --> 00:01:35,600
another thing to keep in mind is that

41
00:01:35,600 --> 00:01:38,159
you cannot manage cannot administrate

42
00:01:38,159 --> 00:01:40,560
cloud infrastructure as you would do on

43
00:01:40,560 --> 00:01:42,640
on-premise infrastructure

44
00:01:42,640 --> 00:01:45,360
and what we've seen in the past is that

45
00:01:45,360 --> 00:01:47,920
there is a lack for example of cloud

46
00:01:47,920 --> 00:01:50,880
expertise within the devops teams

47
00:01:50,880 --> 00:01:53,360
meaning that they made a transition from

48
00:01:53,360 --> 00:01:55,200
on-premise infrastructure towards cloud

49
00:01:55,200 --> 00:01:56,960
infrastructure but they don't really

50
00:01:56,960 --> 00:01:59,280
know how that works and what are the

51
00:01:59,280 --> 00:02:02,000
risk security risk that comes with it so

52
00:02:02,000 --> 00:02:03,520
what we've seen is that

53
00:02:03,520 --> 00:02:05,040
within the devops teams there will

54
00:02:05,040 --> 00:02:07,520
usually tons of security issues and

55
00:02:07,520 --> 00:02:10,000
security misconfiguration that will be

56
00:02:10,000 --> 00:02:13,520
obviously very interesting for us

57
00:02:13,520 --> 00:02:15,120
and the last thing quite interesting

58
00:02:15,120 --> 00:02:17,440
when we talk about cicd pipeline is that

59
00:02:17,440 --> 00:02:18,400
well

60
00:02:18,400 --> 00:02:20,959
there is to the cd means at some point

61
00:02:20,959 --> 00:02:23,040
there is deployment so at some point

62
00:02:23,040 --> 00:02:25,280
within your pipeline you will need to

63
00:02:25,280 --> 00:02:27,360
have credentials you will need to after

64
00:02:27,360 --> 00:02:30,000
some type of access that will allow the

65
00:02:30,000 --> 00:02:32,400
pipeline to deploy in production

66
00:02:32,400 --> 00:02:33,920
meaning that if you successfully

67
00:02:33,920 --> 00:02:36,319
compromise the pipeline you now have

68
00:02:36,319 --> 00:02:38,800
access to production environments and as

69
00:02:38,800 --> 00:02:41,200
we will try to show you today sometimes

70
00:02:41,200 --> 00:02:42,800
you can have access to even more than

71
00:02:42,800 --> 00:02:46,560
that and the whole information system

72
00:02:46,879 --> 00:02:48,560
so what we wanted to share with you

73
00:02:48,560 --> 00:02:52,319
today is actually a real life scenario

74
00:02:52,319 --> 00:02:55,599
that we've performed on cicd pipelines

75
00:02:55,599 --> 00:02:57,920
um just a quick disclaimer before we

76
00:02:57,920 --> 00:03:00,720
start cicd pipeline will come with tons

77
00:03:00,720 --> 00:03:02,400
of different flavors

78
00:03:02,400 --> 00:03:04,239
depending on the technical stack that

79
00:03:04,239 --> 00:03:07,440
you might be using obviously uh you

80
00:03:07,440 --> 00:03:09,040
might not completely reflect what we

81
00:03:09,040 --> 00:03:11,200
will be talking about today

82
00:03:11,200 --> 00:03:13,280
please keep in mind that while the very

83
00:03:13,280 --> 00:03:15,599
technical steps to compromise different

84
00:03:15,599 --> 00:03:17,680
technology might vary

85
00:03:17,680 --> 00:03:20,480
the overall methodology will honestly

86
00:03:20,480 --> 00:03:22,879
roughly be the same and the problematics

87
00:03:22,879 --> 00:03:25,200
will be quite similar

88
00:03:25,200 --> 00:03:27,280
and lasting we don't have that much time

89
00:03:27,280 --> 00:03:29,440
we have 45 minutes something like that

90
00:03:29,440 --> 00:03:31,120
so we will have to go quickly over some

91
00:03:31,120 --> 00:03:32,799
of the subjects

92
00:03:32,799 --> 00:03:34,560
but if you're really interested in it

93
00:03:34,560 --> 00:03:36,000
feel free to come talk with us at the

94
00:03:36,000 --> 00:03:38,319
end of the talk or i think we have a

95
00:03:38,319 --> 00:03:40,560
workshop tomorrow morning if i'm not

96
00:03:40,560 --> 00:03:42,480
wrong so for those of you who will

97
00:03:42,480 --> 00:03:45,120
participate in it we'll be able to talk

98
00:03:45,120 --> 00:03:46,640
a little bit more in depth of those

99
00:03:46,640 --> 00:03:49,279
different steps

100
00:03:49,360 --> 00:03:51,680
so the first thing that you might do

101
00:03:51,680 --> 00:03:53,120
when you want to pen test the security

102
00:03:53,120 --> 00:03:55,680
pipeline is how do i get in

103
00:03:55,680 --> 00:03:57,920
i'm an external attacker how can i

104
00:03:57,920 --> 00:04:00,159
successfully obtain initial access

105
00:04:00,159 --> 00:04:01,680
within the pipeline

106
00:04:01,680 --> 00:04:03,680
so the first thing we might want to we

107
00:04:03,680 --> 00:04:05,840
want to talk about is the dependency

108
00:04:05,840 --> 00:04:08,640
confusion or dependency hijacking

109
00:04:08,640 --> 00:04:10,000
we will talk about this later on but

110
00:04:10,000 --> 00:04:11,519
it's a type of vulnerability where you

111
00:04:11,519 --> 00:04:13,840
are able to trick the pipeline to

112
00:04:13,840 --> 00:04:15,840
download a malicious package from the

113
00:04:15,840 --> 00:04:17,279
internet

114
00:04:17,279 --> 00:04:19,680
and you will be able to execute this

115
00:04:19,680 --> 00:04:22,560
package within the pipeline

116
00:04:22,560 --> 00:04:25,199
another type of vulnerability is

117
00:04:25,199 --> 00:04:28,320
well weak passwords it applied to cic

118
00:04:28,320 --> 00:04:29,919
pipeline but it's pretty much applied to

119
00:04:29,919 --> 00:04:31,759
everything all over the world but

120
00:04:31,759 --> 00:04:34,960
if you have exposed assets cloud

121
00:04:34,960 --> 00:04:37,280
solution used within your pipeline on

122
00:04:37,280 --> 00:04:38,880
which you have weak security

123
00:04:38,880 --> 00:04:40,960
configuration weak password policy and

124
00:04:40,960 --> 00:04:43,520
no multi-factor authentication it can be

125
00:04:43,520 --> 00:04:46,160
used by an attacker obviously to obtain

126
00:04:46,160 --> 00:04:47,520
access within the pipeline to find

127
00:04:47,520 --> 00:04:49,280
secret and some time to pivot within the

128
00:04:49,280 --> 00:04:50,639
pipeline

129
00:04:50,639 --> 00:04:52,400
the last one which might be interesting

130
00:04:52,400 --> 00:04:53,440
and we've

131
00:04:53,440 --> 00:04:55,600
used it actually quite a few times is

132
00:04:55,600 --> 00:04:57,840
you might have s3 bucket for example

133
00:04:57,840 --> 00:05:00,320
containing artifacts that might still

134
00:05:00,320 --> 00:05:02,639
have secrets within it and again it

135
00:05:02,639 --> 00:05:04,320
might be a way to get within the

136
00:05:04,320 --> 00:05:06,560
pipeline

137
00:05:06,560 --> 00:05:09,199
however after that said what we feel and

138
00:05:09,199 --> 00:05:10,639
what we want to share with you based on

139
00:05:10,639 --> 00:05:14,479
our experience is that cic pipelines are

140
00:05:14,479 --> 00:05:16,320
very interesting if you want to escalate

141
00:05:16,320 --> 00:05:17,840
your privilege within the information

142
00:05:17,840 --> 00:05:21,039
systems but we however do not feel that

143
00:05:21,039 --> 00:05:24,240
they are a very efficient way to obtain

144
00:05:24,240 --> 00:05:26,000
initial access within information

145
00:05:26,000 --> 00:05:26,960
systems

146
00:05:26,960 --> 00:05:29,440
we feel that there are classical way i

147
00:05:29,440 --> 00:05:31,840
would say that are more efficient and

148
00:05:31,840 --> 00:05:33,600
quicker to obtain

149
00:05:33,600 --> 00:05:35,840
we can talk about phishing

150
00:05:35,840 --> 00:05:37,919
even physical intrusion or exposed

151
00:05:37,919 --> 00:05:40,400
assets with vulnerability honestly we

152
00:05:40,400 --> 00:05:42,240
feel that it's sometimes easier to use

153
00:05:42,240 --> 00:05:44,320
those than to try to really focus on the

154
00:05:44,320 --> 00:05:47,120
pipeline itself

155
00:05:47,280 --> 00:05:48,800
just a quick word

156
00:05:48,800 --> 00:05:50,800
after saying that actually last week

157
00:05:50,800 --> 00:05:53,199
there was something that came to light

158
00:05:53,199 --> 00:05:54,479
which is

159
00:05:54,479 --> 00:05:55,880
um

160
00:05:55,880 --> 00:05:57,520
35k

161
00:05:57,520 --> 00:06:01,120
repository of 35k it's on github on

162
00:06:01,120 --> 00:06:04,160
basically a bad guy that fork known

163
00:06:04,160 --> 00:06:06,800
project and add malicious code within it

164
00:06:06,800 --> 00:06:08,960
hoping that somebody would download them

165
00:06:08,960 --> 00:06:10,240
and run them

166
00:06:10,240 --> 00:06:11,199
so

167
00:06:11,199 --> 00:06:13,280
these type this type of thing thing is

168
00:06:13,280 --> 00:06:14,639
still happens

169
00:06:14,639 --> 00:06:16,720
as far as i know there has no really

170
00:06:16,720 --> 00:06:19,360
known impacts for now

171
00:06:19,360 --> 00:06:21,199
but as you can see

172
00:06:21,199 --> 00:06:23,440
people still try to exploit this type of

173
00:06:23,440 --> 00:06:25,840
pipeline to get inside the network but

174
00:06:25,840 --> 00:06:27,919
we do not feel that's the most efficient

175
00:06:27,919 --> 00:06:29,280
way

176
00:06:29,280 --> 00:06:31,919
so if we go back to a scenario well i

177
00:06:31,919 --> 00:06:34,319
called remy and i told him okay give me

178
00:06:34,319 --> 00:06:36,080
an access within the information system

179
00:06:36,080 --> 00:06:38,639
so he did his magic it did some kind of

180
00:06:38,639 --> 00:06:41,360
fishing or whatever and we were inside

181
00:06:41,360 --> 00:06:42,720
the pipeline

182
00:06:42,720 --> 00:06:44,720
so the first thing we were interested in

183
00:06:44,720 --> 00:06:47,440
interested in is how can we obtain

184
00:06:47,440 --> 00:06:49,840
source code we know from experience that

185
00:06:49,840 --> 00:06:51,120
source code

186
00:06:51,120 --> 00:06:53,520
are very interesting assets because it

187
00:06:53,520 --> 00:06:55,520
usually contains secrets and it's a

188
00:06:55,520 --> 00:06:57,360
great way to escalate privilege within

189
00:06:57,360 --> 00:06:59,120
the information systems

190
00:06:59,120 --> 00:07:00,800
so

191
00:07:00,800 --> 00:07:03,120
obvious targets would be source code

192
00:07:03,120 --> 00:07:06,000
management solution for example gitlab

193
00:07:06,000 --> 00:07:08,319
or github or something like that might

194
00:07:08,319 --> 00:07:10,560
be very interesting so you might be able

195
00:07:10,560 --> 00:07:12,560
to obtain access and you might be able

196
00:07:12,560 --> 00:07:15,199
with anonymous access to find code but

197
00:07:15,199 --> 00:07:16,880
if that's not the case

198
00:07:16,880 --> 00:07:18,800
well there are other way to find code

199
00:07:18,800 --> 00:07:20,560
you might be able to find the same

200
00:07:20,560 --> 00:07:22,400
source code in other parts of the

201
00:07:22,400 --> 00:07:24,400
pipeline the source code actually flows

202
00:07:24,400 --> 00:07:26,560
in basically all the parts of your

203
00:07:26,560 --> 00:07:28,160
pipeline so you might be able to find it

204
00:07:28,160 --> 00:07:29,039
within

205
00:07:29,039 --> 00:07:30,479
a scan

206
00:07:30,479 --> 00:07:33,039
source code scanning solution such as

207
00:07:33,039 --> 00:07:36,000
check marks sonar cube on others and you

208
00:07:36,000 --> 00:07:38,479
might be able to also find source code

209
00:07:38,479 --> 00:07:41,759
indirectly within the artifacts built by

210
00:07:41,759 --> 00:07:43,280
your pipeline

211
00:07:43,280 --> 00:07:45,680
so even if you do not have success on

212
00:07:45,680 --> 00:07:47,680
the gitlab or github or whatever

213
00:07:47,680 --> 00:07:48,800
directly

214
00:07:48,800 --> 00:07:50,080
please

215
00:07:50,080 --> 00:07:51,599
try other thing and you'll find that

216
00:07:51,599 --> 00:07:54,240
it's almost all the time easy to find

217
00:07:54,240 --> 00:07:56,000
one way or the other source code within

218
00:07:56,000 --> 00:07:57,840
the pipeline

219
00:07:57,840 --> 00:07:59,280
when that's done what you will be

220
00:07:59,280 --> 00:08:01,440
looking for is secrets within the

221
00:08:01,440 --> 00:08:03,280
pipeline so there are multiple ways to

222
00:08:03,280 --> 00:08:05,120
do this but two of the the most

223
00:08:05,120 --> 00:08:06,879
efficient way we have is automated

224
00:08:06,879 --> 00:08:08,879
review there are known tools we can talk

225
00:08:08,879 --> 00:08:12,000
about such as geep leak or truffle args

226
00:08:12,000 --> 00:08:14,479
so these type of tools will have a

227
00:08:14,479 --> 00:08:17,199
detection mechanism based either and are

228
00:08:17,199 --> 00:08:20,639
on entropy or regular expression

229
00:08:20,639 --> 00:08:22,400
meaning that they will be able to go

230
00:08:22,400 --> 00:08:24,240
over the whole repositories and tons of

231
00:08:24,240 --> 00:08:26,240
repositories in quite a short amount of

232
00:08:26,240 --> 00:08:27,280
time

233
00:08:27,280 --> 00:08:30,319
um but to be really efficient they need

234
00:08:30,319 --> 00:08:32,320
usually need some kind of customization

235
00:08:32,320 --> 00:08:34,399
depending on the context something that

236
00:08:34,399 --> 00:08:37,120
an attacker and a pen tester will not be

237
00:08:37,120 --> 00:08:39,440
able to set up in a short amount of time

238
00:08:39,440 --> 00:08:41,039
and just to give you a quick example

239
00:08:41,039 --> 00:08:43,599
what you can see here on the bottom left

240
00:08:43,599 --> 00:08:47,279
is a dot f file containing a secret the

241
00:08:47,279 --> 00:08:49,279
password the password being secure

242
00:08:49,279 --> 00:08:51,519
password 2021.

243
00:08:51,519 --> 00:08:54,320
in that example actually all automated

244
00:08:54,320 --> 00:08:57,279
tools will not be able to detect it why

245
00:08:57,279 --> 00:08:59,200
so because this is a low enthropy

246
00:08:59,200 --> 00:09:02,160
password and this actually does not

247
00:09:02,160 --> 00:09:05,120
match any known and any obvious regular

248
00:09:05,120 --> 00:09:06,240
expression

249
00:09:06,240 --> 00:09:08,480
so automated tools are great

250
00:09:08,480 --> 00:09:10,560
but they are blind sites and if you only

251
00:09:10,560 --> 00:09:12,800
use them you will miss some type of

252
00:09:12,800 --> 00:09:13,839
secrets

253
00:09:13,839 --> 00:09:15,680
the other thing you can do is manual

254
00:09:15,680 --> 00:09:19,279
review obviously it's much more slower

255
00:09:19,279 --> 00:09:21,680
it's harder for the mine but

256
00:09:21,680 --> 00:09:23,839
you can by searching for very specific

257
00:09:23,839 --> 00:09:26,720
keywords within the comments secrets

258
00:09:26,720 --> 00:09:28,320
password or things like that you can

259
00:09:28,320 --> 00:09:30,800
actually quite often find secrets that

260
00:09:30,800 --> 00:09:34,160
were not detected by the automated tools

261
00:09:34,160 --> 00:09:36,240
and just to give you a few feedbacks on

262
00:09:36,240 --> 00:09:38,800
credentials credential hygiene in our

263
00:09:38,800 --> 00:09:41,200
previous pen test what we found is

264
00:09:41,200 --> 00:09:43,920
it team uh an id team with one hour

265
00:09:43,920 --> 00:09:46,480
client that was using git leak to detect

266
00:09:46,480 --> 00:09:48,560
secrets within the source code so

267
00:09:48,560 --> 00:09:51,040
basically they add get git leak setup

268
00:09:51,040 --> 00:09:53,600
and every time a secret was pushed on a

269
00:09:53,600 --> 00:09:55,120
repository what they would do is they

270
00:09:55,120 --> 00:09:57,519
would remove the file push a new comment

271
00:09:57,519 --> 00:10:00,000
with a remove tile and that's it

272
00:10:00,000 --> 00:10:02,160
they were not revoking the password so

273
00:10:02,160 --> 00:10:03,839
obviously they were not very familiar

274
00:10:03,839 --> 00:10:05,040
with yet

275
00:10:05,040 --> 00:10:06,640
because the only thing we had to do at

276
00:10:06,640 --> 00:10:08,880
that point was to search for all the

277
00:10:08,880 --> 00:10:11,519
comments made by the it teams and we

278
00:10:11,519 --> 00:10:13,440
added a list of all the passwords that

279
00:10:13,440 --> 00:10:14,959
were still working

280
00:10:14,959 --> 00:10:17,440
within the cicd pipeline

281
00:10:17,440 --> 00:10:20,480
another thing is that a user pushing

282
00:10:20,480 --> 00:10:22,800
bash history file within their

283
00:10:22,800 --> 00:10:24,880
repository i don't know how that can

284
00:10:24,880 --> 00:10:27,200
happen but they did and within the bash

285
00:10:27,200 --> 00:10:29,200
story file we'd add all the comments

286
00:10:29,200 --> 00:10:30,959
that had been typed by the user which

287
00:10:30,959 --> 00:10:33,120
was very interesting to understand how

288
00:10:33,120 --> 00:10:34,800
developers were interacting with our

289
00:10:34,800 --> 00:10:37,200
application including obviously clear

290
00:10:37,200 --> 00:10:39,120
text passwords within the bash story

291
00:10:39,120 --> 00:10:40,480
file

292
00:10:40,480 --> 00:10:41,839
and the last one

293
00:10:41,839 --> 00:10:44,640
is actually one of the shortest

294
00:10:44,640 --> 00:10:46,880
ci cd penta that we could perform

295
00:10:46,880 --> 00:10:49,200
because we arrived they were there was

296
00:10:49,200 --> 00:10:50,880
anonymous access on all the git

297
00:10:50,880 --> 00:10:53,600
repository and they were a repository

298
00:10:53,600 --> 00:10:56,079
dedicated to ansible and they were using

299
00:10:56,079 --> 00:10:58,240
ansible to manage

300
00:10:58,240 --> 00:11:00,079
service accounts within the active

301
00:11:00,079 --> 00:11:02,880
directory and they add in clear text a

302
00:11:02,880 --> 00:11:05,519
text file containing all the passwords

303
00:11:05,519 --> 00:11:09,040
of all those uh service accounts

304
00:11:09,040 --> 00:11:10,800
with adeliemus access on their git

305
00:11:10,800 --> 00:11:13,040
repository so at that point maybe like

306
00:11:13,040 --> 00:11:14,880
20 minutes after the beginning of the

307
00:11:14,880 --> 00:11:17,200
pen test we were pretty much two men

308
00:11:17,200 --> 00:11:19,279
admin on the active directory

309
00:11:19,279 --> 00:11:21,040
so as you can guess this type of

310
00:11:21,040 --> 00:11:23,440
vulnerability and credential hygiene is

311
00:11:23,440 --> 00:11:24,959
going nowhere and it's something that

312
00:11:24,959 --> 00:11:27,440
will be still exploitable in our opinion

313
00:11:27,440 --> 00:11:29,760
in the years to come

314
00:11:29,760 --> 00:11:31,600
and yes and last thing i would say is

315
00:11:31,600 --> 00:11:33,440
that on all the source code management

316
00:11:33,440 --> 00:11:35,360
painters that we perform that contain

317
00:11:35,360 --> 00:11:37,600
tens of or more repositories we've

318
00:11:37,600 --> 00:11:40,000
always and always hundred percent of the

319
00:11:40,000 --> 00:11:42,800
time found at least one functioning and

320
00:11:42,800 --> 00:11:45,680
valid passwords

321
00:11:46,959 --> 00:11:49,120
so what are the prevention measures that

322
00:11:49,120 --> 00:11:50,959
you could set up and that clients could

323
00:11:50,959 --> 00:11:52,560
set up within their environment the

324
00:11:52,560 --> 00:11:54,560
first one is ensure that there is

325
00:11:54,560 --> 00:11:56,800
available secret management tooling and

326
00:11:56,800 --> 00:11:59,040
that developers are aware of them are

327
00:11:59,040 --> 00:12:00,959
trained to use them and know how to use

328
00:12:00,959 --> 00:12:01,839
them

329
00:12:01,839 --> 00:12:04,000
another thing that could be used is scan

330
00:12:04,000 --> 00:12:05,839
repository with automated tool that we

331
00:12:05,839 --> 00:12:07,200
talked about

332
00:12:07,200 --> 00:12:09,360
limit access to technical teams and from

333
00:12:09,360 --> 00:12:10,399
time to time

334
00:12:10,399 --> 00:12:12,480
maybe perform a manual scan and manual

335
00:12:12,480 --> 00:12:14,240
review of the source code to ensure that

336
00:12:14,240 --> 00:12:16,560
you've not missed some kind of secret

337
00:12:16,560 --> 00:12:17,920
there are tons of other things that you

338
00:12:17,920 --> 00:12:20,240
could set up and just to cite a few what

339
00:12:20,240 --> 00:12:22,000
we've seen and that we feel are very

340
00:12:22,000 --> 00:12:24,160
interesting in some of our client that's

341
00:12:24,160 --> 00:12:26,880
actually pushed fake secrets within

342
00:12:26,880 --> 00:12:29,839
their repository as a form of onipot so

343
00:12:29,839 --> 00:12:31,760
they were pushing false secrets within

344
00:12:31,760 --> 00:12:33,839
the repository and they had alert if

345
00:12:33,839 --> 00:12:36,160
somebody was trying to use them to know

346
00:12:36,160 --> 00:12:37,519
that they had an attacker within the

347
00:12:37,519 --> 00:12:38,560
network

348
00:12:38,560 --> 00:12:40,160
so there is tons of things that you

349
00:12:40,160 --> 00:12:43,439
could set up to protect against that

350
00:12:43,519 --> 00:12:45,760
so at that point you know found secrets

351
00:12:45,760 --> 00:12:48,240
within the gitlab and more especially

352
00:12:48,240 --> 00:12:50,560
we've found secret allowing us to access

353
00:12:50,560 --> 00:12:52,880
the gitlab and push source code to the

354
00:12:52,880 --> 00:12:53,920
gitlab

355
00:12:53,920 --> 00:12:55,920
the next obvious target will be

356
00:12:55,920 --> 00:12:58,079
something called the orchestrator i

357
00:12:58,079 --> 00:12:59,600
think most of you are already familiar

358
00:12:59,600 --> 00:13:01,120
with it but just to remind you very

359
00:13:01,120 --> 00:13:03,839
quickly the orchestrator is

360
00:13:03,839 --> 00:13:06,000
the main solution within the city

361
00:13:06,000 --> 00:13:07,519
pipeline it's the

362
00:13:07,519 --> 00:13:09,600
the the solution that will be in charge

363
00:13:09,600 --> 00:13:12,240
of pulling the source code of building

364
00:13:12,240 --> 00:13:14,639
at the project of performing the test of

365
00:13:14,639 --> 00:13:17,120
deploying sometimes a project and so on

366
00:13:17,120 --> 00:13:18,560
so to do so

367
00:13:18,560 --> 00:13:21,680
obviously the orchestrator needs access

368
00:13:21,680 --> 00:13:24,720
to a vault or two secrets to perform all

369
00:13:24,720 --> 00:13:26,240
these actions

370
00:13:26,240 --> 00:13:27,600
in other words

371
00:13:27,600 --> 00:13:29,920
if you successfully compromise the

372
00:13:29,920 --> 00:13:33,040
orchestrator you've obtained all the

373
00:13:33,040 --> 00:13:36,000
secrets available within the cicd

374
00:13:36,000 --> 00:13:38,639
pipeline so for attacker and pentester

375
00:13:38,639 --> 00:13:40,480
it's an obvious target and a very

376
00:13:40,480 --> 00:13:42,240
valuable one

377
00:13:42,240 --> 00:13:44,000
so to do so there's a type of

378
00:13:44,000 --> 00:13:46,000
vulnerability called poison pipeline

379
00:13:46,000 --> 00:13:47,120
execution

380
00:13:47,120 --> 00:13:48,800
some of you may already be familiar with

381
00:13:48,800 --> 00:13:49,440
it

382
00:13:49,440 --> 00:13:51,600
just to explain it in a few words what

383
00:13:51,600 --> 00:13:54,480
is poison pipeline execution is that

384
00:13:54,480 --> 00:13:57,360
the orchestrator will build projects by

385
00:13:57,360 --> 00:14:00,000
pulling the source code from let's say

386
00:14:00,000 --> 00:14:01,279
the gitlab

387
00:14:01,279 --> 00:14:03,680
in other words if you're able to change

388
00:14:03,680 --> 00:14:06,160
the source code stored within the gitlab

389
00:14:06,160 --> 00:14:08,800
you might be able to change what will be

390
00:14:08,800 --> 00:14:11,440
built and you might be able to change

391
00:14:11,440 --> 00:14:13,199
the different steps that will be

392
00:14:13,199 --> 00:14:15,600
performed to build a project

393
00:14:15,600 --> 00:14:17,760
so this can be done in two way either

394
00:14:17,760 --> 00:14:21,680
directly like you might have um

395
00:14:21,680 --> 00:14:24,160
build configuration file stored within

396
00:14:24,160 --> 00:14:26,320
the git repository itself

397
00:14:26,320 --> 00:14:27,920
what you can see here on the bottom left

398
00:14:27,920 --> 00:14:30,560
is a jenkins file so it's a file that we

399
00:14:30,560 --> 00:14:32,399
detailed all the different steps that

400
00:14:32,399 --> 00:14:34,639
will be performed to builder projects so

401
00:14:34,639 --> 00:14:36,560
if the jenkins file is stored within the

402
00:14:36,560 --> 00:14:39,120
repository and you can modify it well

403
00:14:39,120 --> 00:14:41,199
you can change the steps used to build a

404
00:14:41,199 --> 00:14:43,360
project and as such you can add

405
00:14:43,360 --> 00:14:46,079
malicious steps within it

406
00:14:46,079 --> 00:14:47,839
you can also do this

407
00:14:47,839 --> 00:14:49,920
in a more indirect way for example by

408
00:14:49,920 --> 00:14:52,720
modifying make file file

409
00:14:52,720 --> 00:14:54,880
adding malicious command within it and

410
00:14:54,880 --> 00:14:56,959
when the build will when the build will

411
00:14:56,959 --> 00:14:59,199
be performed obviously the make file

412
00:14:59,199 --> 00:15:00,880
will be called at some point and your

413
00:15:00,880 --> 00:15:05,040
malicious code will be executed

414
00:15:05,519 --> 00:15:07,680
so if we take back uh we go back to a

415
00:15:07,680 --> 00:15:09,360
scenario you push the malicious code to

416
00:15:09,360 --> 00:15:11,680
the repository a web hook is sent to the

417
00:15:11,680 --> 00:15:14,800
orchestrator the orchestrator will pull

418
00:15:14,800 --> 00:15:16,639
the source code

419
00:15:16,639 --> 00:15:20,399
and it will send the jobs to be built on

420
00:15:20,399 --> 00:15:22,560
one of the build nodes

421
00:15:22,560 --> 00:15:24,959
just in a few words the build node is

422
00:15:24,959 --> 00:15:28,079
usually in at least his best practice is

423
00:15:28,079 --> 00:15:30,399
another server that will be in charge of

424
00:15:30,399 --> 00:15:32,000
building the project

425
00:15:32,000 --> 00:15:33,839
you usually don't want to build a

426
00:15:33,839 --> 00:15:35,600
project directly within the master

427
00:15:35,600 --> 00:15:37,759
server because if the master server gets

428
00:15:37,759 --> 00:15:40,000
compromised as i said earlier all the

429
00:15:40,000 --> 00:15:41,839
secrets are compromised

430
00:15:41,839 --> 00:15:44,240
what we've seen however is that these

431
00:15:44,240 --> 00:15:46,560
best practices is pretty much

432
00:15:46,560 --> 00:15:48,560
never followed

433
00:15:48,560 --> 00:15:49,360
and

434
00:15:49,360 --> 00:15:51,360
i would say almost 100 percent of the

435
00:15:51,360 --> 00:15:54,720
time we asked we were successful

436
00:15:54,720 --> 00:15:57,360
from pivoting out of the build agent

437
00:15:57,360 --> 00:15:59,680
back to the master server

438
00:15:59,680 --> 00:16:02,000
either by having secrets within the

439
00:16:02,000 --> 00:16:05,040
built agents such as ssh keys that were

440
00:16:05,040 --> 00:16:07,519
the same used for the master server

441
00:16:07,519 --> 00:16:10,000
sometimes by having secrets within the

442
00:16:10,000 --> 00:16:12,240
bash history file there's tons of way

443
00:16:12,240 --> 00:16:14,000
that could allow us to pivot back to the

444
00:16:14,000 --> 00:16:16,240
master server and well

445
00:16:16,240 --> 00:16:19,680
hopefully for us but bad news for devops

446
00:16:19,680 --> 00:16:21,920
100 of the time we were able to

447
00:16:21,920 --> 00:16:24,720
compromise the master server

448
00:16:24,720 --> 00:16:26,399
so the question is once you've

449
00:16:26,399 --> 00:16:29,279
compromised the orchestrator what can

450
00:16:29,279 --> 00:16:31,680
you do at that point

451
00:16:31,680 --> 00:16:33,199
the first obvious thing that you could

452
00:16:33,199 --> 00:16:34,240
do is

453
00:16:34,240 --> 00:16:36,240
pivot out of the pipeline get out of the

454
00:16:36,240 --> 00:16:38,240
pipeline you know have access to tons of

455
00:16:38,240 --> 00:16:40,320
different secrets and i'll let goche

456
00:16:40,320 --> 00:16:42,160
talked about that in a few seconds but

457
00:16:42,160 --> 00:16:44,000
you can now access other systems you can

458
00:16:44,000 --> 00:16:46,399
now compromise other systems and well

459
00:16:46,399 --> 00:16:48,560
the pipeline is not very useful at that

460
00:16:48,560 --> 00:16:49,440
point

461
00:16:49,440 --> 00:16:51,680
what you can also do is

462
00:16:51,680 --> 00:16:53,839
inject backdoors within project in the

463
00:16:53,839 --> 00:16:55,199
stealthy way

464
00:16:55,199 --> 00:16:57,680
meaning that nothing would appear within

465
00:16:57,680 --> 00:17:00,800
the user interface of the jenkins but

466
00:17:00,800 --> 00:17:02,079
you could

467
00:17:02,079 --> 00:17:04,559
very subtly at

468
00:17:04,559 --> 00:17:06,959
malicious comment or malicious code on

469
00:17:06,959 --> 00:17:09,199
all the projects that will go through

470
00:17:09,199 --> 00:17:11,919
the orchestrator

471
00:17:11,919 --> 00:17:14,480
and the last one is poison the well i

472
00:17:14,480 --> 00:17:16,480
talked about

473
00:17:16,480 --> 00:17:18,480
dependency confusion and dependency

474
00:17:18,480 --> 00:17:21,119
hijacking earlier you could also try to

475
00:17:21,119 --> 00:17:22,720
obtain persistence within the

476
00:17:22,720 --> 00:17:25,919
information systems by compromising or

477
00:17:25,919 --> 00:17:28,400
by pushing malicious packets

478
00:17:28,400 --> 00:17:30,480
within the packet repositories in order

479
00:17:30,480 --> 00:17:32,720
to keep access within the information

480
00:17:32,720 --> 00:17:34,080
systems

481
00:17:34,080 --> 00:17:36,320
so i will very quickly provide a few

482
00:17:36,320 --> 00:17:37,840
feedback also of what we find on

483
00:17:37,840 --> 00:17:39,280
orchestrators

484
00:17:39,280 --> 00:17:41,600
quite often we found

485
00:17:41,600 --> 00:17:44,000
poor access management as i said the

486
00:17:44,000 --> 00:17:46,960
orchestrator is the most important part

487
00:17:46,960 --> 00:17:49,520
of your cicd pipelines however most of

488
00:17:49,520 --> 00:17:52,000
our clients don't really harden it well

489
00:17:52,000 --> 00:17:55,120
and what we found again is sometimes a

490
00:17:55,120 --> 00:17:57,280
jenkins with sign up enabled meaning

491
00:17:57,280 --> 00:17:59,520
that everybody could create an iphone on

492
00:17:59,520 --> 00:18:02,160
the jenkins server and another option

493
00:18:02,160 --> 00:18:05,200
which was all the sign up user all the

494
00:18:05,200 --> 00:18:06,720
logging user

495
00:18:06,720 --> 00:18:08,880
administrator of the jenkins

496
00:18:08,880 --> 00:18:10,799
so you arrive you create an account and

497
00:18:10,799 --> 00:18:12,960
you've not successfully compromised the

498
00:18:12,960 --> 00:18:15,760
jenkins server what we've also found is

499
00:18:15,760 --> 00:18:17,200
logging too much

500
00:18:17,200 --> 00:18:19,360
within the jenkins server or any type of

501
00:18:19,360 --> 00:18:22,240
orchestrator you usually have build logs

502
00:18:22,240 --> 00:18:24,799
and within those build logs we very very

503
00:18:24,799 --> 00:18:26,720
often find secrets that are stored

504
00:18:26,720 --> 00:18:29,919
within it allowing us again to escalate

505
00:18:29,919 --> 00:18:31,840
privilege within the jenkins

506
00:18:31,840 --> 00:18:34,400
and the last one is sometimes people

507
00:18:34,400 --> 00:18:37,200
still think that containers that dockers

508
00:18:37,200 --> 00:18:40,240
are a security solution and that it will

509
00:18:40,240 --> 00:18:42,080
help them to secure their pipeline so

510
00:18:42,080 --> 00:18:43,919
what we found quite often is that the

511
00:18:43,919 --> 00:18:46,720
master server will have agent and those

512
00:18:46,720 --> 00:18:49,360
agents are only containers run on the

513
00:18:49,360 --> 00:18:52,000
master server itself and they think that

514
00:18:52,000 --> 00:18:54,720
since the agent are within containers

515
00:18:54,720 --> 00:18:57,280
attacker will not be able to do anything

516
00:18:57,280 --> 00:18:58,080
but

517
00:18:58,080 --> 00:19:00,160
i think you all know here that

518
00:19:00,160 --> 00:19:02,640
containers are not a security solution

519
00:19:02,640 --> 00:19:04,480
and it's i wouldn't say easy but it's

520
00:19:04,480 --> 00:19:06,559
quite frequent that we are able to

521
00:19:06,559 --> 00:19:09,120
escape the containers and compromise the

522
00:19:09,120 --> 00:19:11,840
host system

523
00:19:12,480 --> 00:19:14,320
so i just want to go very quickly over

524
00:19:14,320 --> 00:19:16,080
dependency poisoning and dependency

525
00:19:16,080 --> 00:19:18,880
confusion so as i said earlier you might

526
00:19:18,880 --> 00:19:20,720
want to poison the well to keep

527
00:19:20,720 --> 00:19:22,559
persistence within the information

528
00:19:22,559 --> 00:19:24,799
system so what it might look like is

529
00:19:24,799 --> 00:19:26,480
here on the left

530
00:19:26,480 --> 00:19:29,039
a developer wants to download for

531
00:19:29,039 --> 00:19:30,080
projects

532
00:19:30,080 --> 00:19:33,039
it will need to install a very public

533
00:19:33,039 --> 00:19:35,679
public package okay so you say i want to

534
00:19:35,679 --> 00:19:37,679
download the latest version of the

535
00:19:37,679 --> 00:19:40,799
package called public package

536
00:19:40,799 --> 00:19:42,720
at that point what i've done as an

537
00:19:42,720 --> 00:19:44,160
attacker since i've compromised the

538
00:19:44,160 --> 00:19:47,039
orchestrator i've pushed a malicious

539
00:19:47,039 --> 00:19:50,160
version of the public package within the

540
00:19:50,160 --> 00:19:52,559
internal repository

541
00:19:52,559 --> 00:19:54,559
meaning that when the user will try to

542
00:19:54,559 --> 00:19:56,720
download the public package it will ask

543
00:19:56,720 --> 00:19:58,720
the internal repository hey internal

544
00:19:58,720 --> 00:20:01,120
repository do you have the latest

545
00:20:01,120 --> 00:20:03,120
version of the public package

546
00:20:03,120 --> 00:20:04,799
and the internal repository will say oh

547
00:20:04,799 --> 00:20:07,360
i have yeah i have a version locally but

548
00:20:07,360 --> 00:20:09,440
i can check i can check on the internet

549
00:20:09,440 --> 00:20:11,919
i can check on the public repository

550
00:20:11,919 --> 00:20:14,159
well the same version is well the same

551
00:20:14,159 --> 00:20:15,679
number version is available on the

552
00:20:15,679 --> 00:20:17,840
internet but well since i have it

553
00:20:17,840 --> 00:20:20,480
locally it's always the local version

554
00:20:20,480 --> 00:20:22,559
that will be prioritized

555
00:20:22,559 --> 00:20:24,640
so it's a great way to build persistence

556
00:20:24,640 --> 00:20:26,400
because it's very stealthy it's low

557
00:20:26,400 --> 00:20:27,600
visibility

558
00:20:27,600 --> 00:20:30,320
because the package the attacker pushed

559
00:20:30,320 --> 00:20:32,559
on the internal repository is a working

560
00:20:32,559 --> 00:20:34,400
version of the package it will not break

561
00:20:34,400 --> 00:20:36,159
anything it will not come with any bug

562
00:20:36,159 --> 00:20:38,320
it's just a compromise version of the

563
00:20:38,320 --> 00:20:39,360
package

564
00:20:39,360 --> 00:20:41,039
another thing you might have heard about

565
00:20:41,039 --> 00:20:42,880
is dependency conversion which is a

566
00:20:42,880 --> 00:20:44,159
little bit different

567
00:20:44,159 --> 00:20:45,360
which is

568
00:20:45,360 --> 00:20:47,280
a user wants to download an internal

569
00:20:47,280 --> 00:20:49,600
package the package is available

570
00:20:49,600 --> 00:20:52,000
internally but the attacker has

571
00:20:52,000 --> 00:20:54,640
for some reason no knowledge because

572
00:20:54,640 --> 00:20:56,240
they found it in the documentation or

573
00:20:56,240 --> 00:20:57,840
something like that that there is an

574
00:20:57,840 --> 00:20:59,360
internal package

575
00:20:59,360 --> 00:21:01,280
it will push a malicious version of the

576
00:21:01,280 --> 00:21:03,840
intel package to the public repository

577
00:21:03,840 --> 00:21:06,080
and the internal repository will be

578
00:21:06,080 --> 00:21:08,320
tricked into providing the malicious

579
00:21:08,320 --> 00:21:10,720
package coming from the internet to the

580
00:21:10,720 --> 00:21:11,919
internal user

581
00:21:11,919 --> 00:21:13,840
so dependency poisoning is a great way

582
00:21:13,840 --> 00:21:15,679
to build persistence and it's very

583
00:21:15,679 --> 00:21:18,640
stealthy dependency confusion is a great

584
00:21:18,640 --> 00:21:21,840
way to obtain initial access but it's

585
00:21:21,840 --> 00:21:24,640
very high visibility and high impact

586
00:21:24,640 --> 00:21:27,039
because the malicious package downloaded

587
00:21:27,039 --> 00:21:29,120
from the internet is not a working

588
00:21:29,120 --> 00:21:31,200
version of the internal package so the

589
00:21:31,200 --> 00:21:33,200
user might realize very quickly that

590
00:21:33,200 --> 00:21:35,120
something has gone wrong and say okay

591
00:21:35,120 --> 00:21:37,120
there is a problem and i need to find

592
00:21:37,120 --> 00:21:39,600
what's going on

593
00:21:39,600 --> 00:21:41,679
okay so i just want to talk about this

594
00:21:41,679 --> 00:21:43,200
very quickly and we can we can go back

595
00:21:43,200 --> 00:21:45,360
to what i was saying earlier about pivot

596
00:21:45,360 --> 00:21:47,440
out of the pipeline and maybe try to

597
00:21:47,440 --> 00:21:50,240
compromise other parts of

598
00:21:50,240 --> 00:21:52,480
the information system such as

599
00:21:52,480 --> 00:21:54,799
kubernetes cluster and our let's go to

600
00:21:54,799 --> 00:21:58,200
talk about that

601
00:21:59,600 --> 00:22:01,919
so from the jankage we could retrieve

602
00:22:01,919 --> 00:22:03,840
credential to deploy application within

603
00:22:03,840 --> 00:22:05,760
a kubernetes

604
00:22:05,760 --> 00:22:08,080
but what is kubernetes

605
00:22:08,080 --> 00:22:09,360
firstly

606
00:22:09,360 --> 00:22:12,240
actually kubernetes is a solution used

607
00:22:12,240 --> 00:22:14,559
mainly to deploy container applications

608
00:22:14,559 --> 00:22:16,880
such as docker application

609
00:22:16,880 --> 00:22:18,640
and to manage them throughout their

610
00:22:18,640 --> 00:22:21,280
lifecycle for instance communities will

611
00:22:21,280 --> 00:22:22,320
handle

612
00:22:22,320 --> 00:22:24,720
restarting your application whenever it

613
00:22:24,720 --> 00:22:27,440
crashed or if you lose one of your

614
00:22:27,440 --> 00:22:29,600
cluster node

615
00:22:29,600 --> 00:22:31,919
it also has some features to manage

616
00:22:31,919 --> 00:22:34,799
secret for instance and

617
00:22:34,799 --> 00:22:37,360
networking

618
00:22:37,360 --> 00:22:39,200
kubernetes is actually highly

619
00:22:39,200 --> 00:22:42,480
configurable and has many protection to

620
00:22:42,480 --> 00:22:46,000
be secure however on a bear installation

621
00:22:46,000 --> 00:22:48,159
it comes with none of this protection

622
00:22:48,159 --> 00:22:50,559
installed so it is up to the cluster

623
00:22:50,559 --> 00:22:52,799
administrators to be aware of them and

624
00:22:52,799 --> 00:22:54,799
to properly configure them

625
00:22:54,799 --> 00:22:57,120
and what we often see that it's not all

626
00:22:57,120 --> 00:23:00,320
well the case during our pen tests so

627
00:23:00,320 --> 00:23:03,120
we'll go through some of the common and

628
00:23:03,120 --> 00:23:06,559
critical issue we often see during a

629
00:23:06,559 --> 00:23:09,520
cuban span test

630
00:23:09,520 --> 00:23:11,919
for this uh scenario we are also

631
00:23:11,919 --> 00:23:14,640
considering uh kubernetes running within

632
00:23:14,640 --> 00:23:17,919
a cloud environment as it provides

633
00:23:17,919 --> 00:23:20,400
additional interaction with the cloud

634
00:23:20,400 --> 00:23:24,480
and so it increases the attack surface

635
00:23:26,240 --> 00:23:29,280
the first common issue we see comes from

636
00:23:29,280 --> 00:23:32,000
the networking actually by default the

637
00:23:32,000 --> 00:23:34,960
inner network of the cluster is

638
00:23:34,960 --> 00:23:38,000
completely unfiltered that means that

639
00:23:38,000 --> 00:23:40,159
one application may communicate with any

640
00:23:40,159 --> 00:23:42,480
other application within the cluster

641
00:23:42,480 --> 00:23:44,880
so during a pen test we can easily use

642
00:23:44,880 --> 00:23:47,679
that to scan the internal network and to

643
00:23:47,679 --> 00:23:51,120
get access to services and exploitable

644
00:23:51,120 --> 00:23:54,080
vulnerabilities on them to get a photo

645
00:23:54,080 --> 00:23:56,400
on the other application

646
00:23:56,400 --> 00:23:59,440
and this is interesting also because not

647
00:23:59,440 --> 00:24:02,159
only can we access services exports to

648
00:24:02,159 --> 00:24:05,120
the outside of the cluster but also

649
00:24:05,120 --> 00:24:07,760
the services which are not

650
00:24:07,760 --> 00:24:10,400
so it is very important to continue to

651
00:24:10,400 --> 00:24:13,200
harden your container

652
00:24:13,200 --> 00:24:15,440
such like you would do also with your

653
00:24:15,440 --> 00:24:18,960
application server

654
00:24:18,960 --> 00:24:20,880
it is also interesting when

655
00:24:20,880 --> 00:24:25,120
communicating to outside of the cluster

656
00:24:25,120 --> 00:24:27,200
when one application try to communicate

657
00:24:27,200 --> 00:24:30,400
with an external component there are net

658
00:24:30,400 --> 00:24:31,679
mechanism

659
00:24:31,679 --> 00:24:34,640
which occurs on the cluster node

660
00:24:34,640 --> 00:24:37,039
and on the clone environment this can be

661
00:24:37,039 --> 00:24:38,480
exploited

662
00:24:38,480 --> 00:24:42,000
on the instance metadata api

663
00:24:42,000 --> 00:24:46,000
on cloud environment this api is used to

664
00:24:46,000 --> 00:24:48,080
for resources to retrieve information

665
00:24:48,080 --> 00:24:50,159
about themselves

666
00:24:50,159 --> 00:24:53,520
including cloud credentials

667
00:24:53,520 --> 00:24:54,559
and

668
00:24:54,559 --> 00:24:57,600
to know who is requesting the

669
00:24:57,600 --> 00:25:00,960
information the api based its choice on

670
00:25:00,960 --> 00:25:02,559
the source ap

671
00:25:02,559 --> 00:25:05,360
so when one application try to request

672
00:25:05,360 --> 00:25:08,960
this api and thanks to the nut it also

673
00:25:08,960 --> 00:25:11,520
looks like the the requests come from

674
00:25:11,520 --> 00:25:13,840
one of the cluster node and so one

675
00:25:13,840 --> 00:25:16,799
application may retrieve credential

676
00:25:16,799 --> 00:25:18,640
the credential of one of the cluster

677
00:25:18,640 --> 00:25:22,480
node and pivot them to to aws with its

678
00:25:22,480 --> 00:25:23,919
privileges

679
00:25:23,919 --> 00:25:27,039
so it is important to enforce uh

680
00:25:27,039 --> 00:25:29,120
filtering within the cluster thanks to

681
00:25:29,120 --> 00:25:32,000
the network policies which exist within

682
00:25:32,000 --> 00:25:35,279
the kubernetes

683
00:25:36,720 --> 00:25:39,520
the second common issue comes from the i

684
00:25:39,520 --> 00:25:40,159
am

685
00:25:40,159 --> 00:25:44,000
like often with with policy management

686
00:25:44,000 --> 00:25:45,120
whenever

687
00:25:45,120 --> 00:25:49,039
permissive rights are given we may

688
00:25:49,039 --> 00:25:52,000
move and escalate quite easily

689
00:25:52,000 --> 00:25:55,120
i won't dive deep in it because others

690
00:25:55,120 --> 00:25:57,520
has already done that

691
00:25:57,520 --> 00:25:59,840
such as cyberark

692
00:25:59,840 --> 00:26:01,760
but i will only

693
00:26:01,760 --> 00:26:04,320
tell you few of the issue we commonly

694
00:26:04,320 --> 00:26:05,919
found

695
00:26:05,919 --> 00:26:10,000
so the first issue we sometimes find fun

696
00:26:10,000 --> 00:26:12,400
is that

697
00:26:12,400 --> 00:26:15,600
one application may require to

698
00:26:15,600 --> 00:26:17,760
commun to interact with another

699
00:26:17,760 --> 00:26:20,400
application resources and usually this

700
00:26:20,400 --> 00:26:24,080
is done through a highly permissive set

701
00:26:24,080 --> 00:26:26,400
of right and so we can easily exploit

702
00:26:26,400 --> 00:26:28,480
them to move laterally to this

703
00:26:28,480 --> 00:26:30,720
application

704
00:26:30,720 --> 00:26:33,840
another issue also comes with the

705
00:26:33,840 --> 00:26:35,840
jenkins itself actually

706
00:26:35,840 --> 00:26:37,600
for sake of simplicity and because

707
00:26:37,600 --> 00:26:40,000
jenkins is used to deploy several

708
00:26:40,000 --> 00:26:41,840
applications in several different

709
00:26:41,840 --> 00:26:43,520
contexts

710
00:26:43,520 --> 00:26:45,279
it is given

711
00:26:45,279 --> 00:26:46,880
often

712
00:26:46,880 --> 00:26:49,679
a wide set of rights on the whole

713
00:26:49,679 --> 00:26:52,320
cluster and so just the credential of

714
00:26:52,320 --> 00:26:55,919
the jenkins usually is usually enough to

715
00:26:55,919 --> 00:26:59,440
compromise the whole classic

716
00:27:00,000 --> 00:27:03,120
in a cloud environment also you may

717
00:27:03,120 --> 00:27:06,320
give your application a set up right on

718
00:27:06,320 --> 00:27:10,000
the cloud environment itself so if you

719
00:27:10,000 --> 00:27:12,480
get access to one of this application

720
00:27:12,480 --> 00:27:14,640
you may retrieve the service accounts

721
00:27:14,640 --> 00:27:16,000
used

722
00:27:16,000 --> 00:27:18,559
used by the application and private once

723
00:27:18,559 --> 00:27:21,760
again to aws and sometime with high

724
00:27:21,760 --> 00:27:22,960
privileges

725
00:27:22,960 --> 00:27:25,039
so it is important to review your

726
00:27:25,039 --> 00:27:27,679
policies and like always to unfold the

727
00:27:27,679 --> 00:27:30,080
least principle prove the least

728
00:27:30,080 --> 00:27:32,240
privilege principle

729
00:27:32,240 --> 00:27:35,360
and for that there are some tools which

730
00:27:35,360 --> 00:27:38,240
may be used on the kubernetes clusters

731
00:27:38,240 --> 00:27:42,080
such as cubiscan ukraine

732
00:27:44,080 --> 00:27:46,399
last but not least is the lack of

733
00:27:46,399 --> 00:27:49,440
restriction of your in your deployments

734
00:27:49,440 --> 00:27:50,559
actually

735
00:27:50,559 --> 00:27:53,120
when you deploy you start an application

736
00:27:53,120 --> 00:27:55,919
within the kubernetes cluster you decide

737
00:27:55,919 --> 00:27:58,240
how this application should be running

738
00:27:58,240 --> 00:28:01,520
and so you may decide which user will

739
00:28:01,520 --> 00:28:04,480
run your application but also which set

740
00:28:04,480 --> 00:28:07,120
of capabilities you should give to your

741
00:28:07,120 --> 00:28:09,840
application and even which

742
00:28:09,840 --> 00:28:13,120
container isolation to enable or disable

743
00:28:13,120 --> 00:28:14,080
so

744
00:28:14,080 --> 00:28:17,600
when one user is capable to

745
00:28:17,600 --> 00:28:20,240
start a new process a new application

746
00:28:20,240 --> 00:28:23,600
with no container isolation it's quite

747
00:28:23,600 --> 00:28:27,440
easy to to escape it to compromise the

748
00:28:27,440 --> 00:28:30,720
cluster node itself

749
00:28:30,720 --> 00:28:32,720
and once you have compromised the

750
00:28:32,720 --> 00:28:34,240
cluster node

751
00:28:34,240 --> 00:28:36,880
it's easy also to get access to any

752
00:28:36,880 --> 00:28:39,840
resources within your kubernetes cluster

753
00:28:39,840 --> 00:28:42,399
such as the the secrets

754
00:28:42,399 --> 00:28:45,200
you may also as you are capable to run

755
00:28:45,200 --> 00:28:48,000
code on the cluster editor you may once

756
00:28:48,000 --> 00:28:50,159
get private to aws

757
00:28:50,159 --> 00:28:51,039
uh

758
00:28:51,039 --> 00:28:55,120
by requesting the instance metadata api

759
00:28:55,120 --> 00:28:58,480
so it is important to enforce a strict

760
00:28:58,480 --> 00:29:01,520
restriction in what your developers

761
00:29:01,520 --> 00:29:04,559
develops are allowed to start on your

762
00:29:04,559 --> 00:29:06,000
kubernetes

763
00:29:06,000 --> 00:29:09,039
and this is even more true because

764
00:29:09,039 --> 00:29:11,520
only a partial

765
00:29:11,520 --> 00:29:14,320
isolation is sufficient to uh to

766
00:29:14,320 --> 00:29:16,399
compromise the whole cluster

767
00:29:16,399 --> 00:29:19,600
and on that bishop force already

768
00:29:19,600 --> 00:29:22,159
did a thorough work and described

769
00:29:22,159 --> 00:29:24,640
several attacks which can be done based

770
00:29:24,640 --> 00:29:28,000
on different set of enabled and disabled

771
00:29:28,000 --> 00:29:30,720
isolation

772
00:29:32,880 --> 00:29:33,960
so we

773
00:29:33,960 --> 00:29:36,640
see here uh

774
00:29:36,640 --> 00:29:39,600
three of the way to private to aws but

775
00:29:39,600 --> 00:29:41,919
there is one last thing i'd like to

776
00:29:41,919 --> 00:29:46,000
share on kubernetes is that kubernetes

777
00:29:46,000 --> 00:29:49,120
has all the capacities to

778
00:29:49,120 --> 00:29:52,080
be monitored and properly monitored it

779
00:29:52,080 --> 00:29:54,399
has a complete audit policy

780
00:29:54,399 --> 00:29:57,360
and it also has several compliant

781
00:29:57,360 --> 00:30:00,640
software which exists like falco to at

782
00:30:00,640 --> 00:30:03,919
every moment ensure only secure

783
00:30:03,919 --> 00:30:07,120
application are running within your your

784
00:30:07,120 --> 00:30:11,679
cluster so it is important to also

785
00:30:11,679 --> 00:30:16,559
set up a monitoring of your clusters

786
00:30:16,559 --> 00:30:18,960
so i will leave

787
00:30:18,960 --> 00:30:23,840
remy continue on the aws port

788
00:30:25,120 --> 00:30:25,919
okay

789
00:30:25,919 --> 00:30:26,880
so

790
00:30:26,880 --> 00:30:30,320
inside the kubernetes cluster we found

791
00:30:30,320 --> 00:30:34,960
an awbs account what could we do with it

792
00:30:34,960 --> 00:30:37,360
to quickly understand a privileged

793
00:30:37,360 --> 00:30:40,159
escalation in awvs and then lateral

794
00:30:40,159 --> 00:30:42,720
movement i need to quickly introduce

795
00:30:42,720 --> 00:30:44,000
how

796
00:30:44,000 --> 00:30:46,720
the identity access management works in

797
00:30:46,720 --> 00:30:50,640
aws it's quite simple there is two major

798
00:30:50,640 --> 00:30:54,399
ways to delegate privilege in aws

799
00:30:54,399 --> 00:30:58,399
the first one is called direct attach

800
00:30:58,399 --> 00:31:01,360
as this name you define an i am policy

801
00:31:01,360 --> 00:31:04,399
with the privilege and you attach these

802
00:31:04,399 --> 00:31:06,000
policies to

803
00:31:06,000 --> 00:31:09,760
an awbs identity that could be a user

804
00:31:09,760 --> 00:31:11,919
that could be a group

805
00:31:11,919 --> 00:31:15,360
a virtual machine services as you want

806
00:31:15,360 --> 00:31:17,760
and then this identity

807
00:31:17,760 --> 00:31:21,519
uses security token to pair from action

808
00:31:21,519 --> 00:31:24,559
inside the awvs

809
00:31:24,559 --> 00:31:29,679
the second part is known as role based

810
00:31:29,679 --> 00:31:30,559
it's

811
00:31:30,559 --> 00:31:32,399
quite the same you define

812
00:31:32,399 --> 00:31:35,840
that iron policies you attach it to a

813
00:31:35,840 --> 00:31:37,919
wall and then

814
00:31:37,919 --> 00:31:40,960
an identity could assume this fall to

815
00:31:40,960 --> 00:31:43,360
retrieve the period

816
00:31:43,360 --> 00:31:45,360
you must know that

817
00:31:45,360 --> 00:31:48,640
the world delegation need be defined in

818
00:31:48,640 --> 00:31:50,000
both way

819
00:31:50,000 --> 00:31:52,240
first of all the war

820
00:31:52,240 --> 00:31:55,279
have an assumed policies that will

821
00:31:55,279 --> 00:31:58,640
define who could assume it

822
00:31:58,640 --> 00:32:01,200
and the

823
00:32:01,200 --> 00:32:02,640
identity

824
00:32:02,640 --> 00:32:05,200
need to have the privilege to assume the

825
00:32:05,200 --> 00:32:10,159
role so the delegation works in two

826
00:32:10,159 --> 00:32:12,399
paths

827
00:32:12,399 --> 00:32:13,760
so once

828
00:32:13,760 --> 00:32:16,960
we have an account in aws

829
00:32:16,960 --> 00:32:21,360
we could try to perform some enumeration

830
00:32:21,360 --> 00:32:24,480
we were really lucky in that environment

831
00:32:24,480 --> 00:32:27,279
we directly found a really high

832
00:32:27,279 --> 00:32:30,000
privilege that is pass four

833
00:32:30,000 --> 00:32:31,200
this four

834
00:32:31,200 --> 00:32:33,600
is really interesting because it will

835
00:32:33,600 --> 00:32:37,120
allow you to pass and to share

836
00:32:37,120 --> 00:32:39,919
any role of the awbs account to a

837
00:32:39,919 --> 00:32:40,960
service

838
00:32:40,960 --> 00:32:44,000
what is really interesting on that point

839
00:32:44,000 --> 00:32:47,600
is you could pass a role that have more

840
00:32:47,600 --> 00:32:50,640
privilege that your current accounts

841
00:32:50,640 --> 00:32:52,960
it's always used to perform local

842
00:32:52,960 --> 00:32:56,480
private scholar education inside an aws

843
00:32:56,480 --> 00:32:58,159
account

844
00:32:58,159 --> 00:33:02,320
so we exploit it with a ram the creation

845
00:33:02,320 --> 00:33:05,039
function we pass so another really

846
00:33:05,039 --> 00:33:08,480
privileged role attached user policies

847
00:33:08,480 --> 00:33:09,519
in the

848
00:33:09,519 --> 00:33:10,799
i am

849
00:33:10,799 --> 00:33:14,080
uh private scalidation and then we grab

850
00:33:14,080 --> 00:33:16,960
the administrator access privilege it's

851
00:33:16,960 --> 00:33:19,519
like domain admins in uh

852
00:33:19,519 --> 00:33:22,640
active directory world and we take over

853
00:33:22,640 --> 00:33:25,679
this first account

854
00:33:25,679 --> 00:33:28,159
you should know that there is actually

855
00:33:28,159 --> 00:33:30,240
around 25

856
00:33:30,240 --> 00:33:32,960
different ways to perform a previous

857
00:33:32,960 --> 00:33:35,840
validation and to abuse some

858
00:33:35,840 --> 00:33:39,760
privilege in aws i should recommend the

859
00:33:39,760 --> 00:33:42,080
really great blog post from renault

860
00:33:42,080 --> 00:33:44,720
security labs we will find the reference

861
00:33:44,720 --> 00:33:47,360
at the end

862
00:33:48,080 --> 00:33:51,279
once we have compromised this first

863
00:33:51,279 --> 00:33:53,840
aws account that

864
00:33:53,840 --> 00:33:57,039
was used in the environment from the

865
00:33:57,039 --> 00:34:01,519
devops team we should know that in aws

866
00:34:01,519 --> 00:34:04,399
there is not always only one account

867
00:34:04,399 --> 00:34:08,719
there are several accounts into a

868
00:34:08,719 --> 00:34:12,079
company to handle different criticality

869
00:34:12,079 --> 00:34:14,079
and different assets

870
00:34:14,079 --> 00:34:15,040
this

871
00:34:15,040 --> 00:34:18,159
all these accounts are put together into

872
00:34:18,159 --> 00:34:20,960
an aws organization

873
00:34:20,960 --> 00:34:23,199
and at the top at this of this

874
00:34:23,199 --> 00:34:26,560
organization you have a root account

875
00:34:26,560 --> 00:34:29,679
this will have all the privilege over

876
00:34:29,679 --> 00:34:32,399
the world organization and could go back

877
00:34:32,399 --> 00:34:34,800
on it

878
00:34:34,800 --> 00:34:37,679
so repair from the enumeration again

879
00:34:37,679 --> 00:34:40,719
with your newly acquired privilege to

880
00:34:40,719 --> 00:34:44,000
find a way to bounce back on the root

881
00:34:44,000 --> 00:34:46,480
account

882
00:34:46,560 --> 00:34:49,440
we found that a role a custom

883
00:34:49,440 --> 00:34:51,359
administrator wall defined by the

884
00:34:51,359 --> 00:34:53,040
divorce team

885
00:34:53,040 --> 00:34:56,399
culled assumed another role into the

886
00:34:56,399 --> 00:34:57,760
root account

887
00:34:57,760 --> 00:35:00,960
the name of a scroll was pretty easy to

888
00:35:00,960 --> 00:35:03,520
understand it was like read only i am

889
00:35:03,520 --> 00:35:06,320
policy in master accounts

890
00:35:06,320 --> 00:35:09,599
so we assume this for and then we assume

891
00:35:09,599 --> 00:35:13,760
the other role into the root account

892
00:35:13,760 --> 00:35:14,560
as

893
00:35:14,560 --> 00:35:18,079
his name we had a lot of privilege but

894
00:35:18,079 --> 00:35:20,560
only read-only privilege

895
00:35:20,560 --> 00:35:23,040
we start again the animation all the

896
00:35:23,040 --> 00:35:26,560
users of war the im policies

897
00:35:26,560 --> 00:35:29,440
and we identified what we should

898
00:35:29,440 --> 00:35:32,320
compromise in it

899
00:35:32,320 --> 00:35:33,359
like

900
00:35:33,359 --> 00:35:36,880
who is administrator access in the root

901
00:35:36,880 --> 00:35:38,640
account

902
00:35:38,640 --> 00:35:42,160
we found several roles but one bring our

903
00:35:42,160 --> 00:35:44,560
attention on it

904
00:35:44,560 --> 00:35:47,839
why it's because inside these asian

905
00:35:47,839 --> 00:35:51,839
policies we found that an account from

906
00:35:51,839 --> 00:35:54,480
the devops account and user from the

907
00:35:54,480 --> 00:35:58,480
devops account could assume this war in

908
00:35:58,480 --> 00:36:01,920
the root account

909
00:36:02,320 --> 00:36:05,760
so we bring back in the devops account

910
00:36:05,760 --> 00:36:09,760
enumerate again and check what is the

911
00:36:09,760 --> 00:36:11,440
monitoring war

912
00:36:11,440 --> 00:36:14,880
that could be used potentially to access

913
00:36:14,880 --> 00:36:17,599
the most privilege in the awbs

914
00:36:17,599 --> 00:36:20,320
organization

915
00:36:20,320 --> 00:36:24,480
at that point we find a little issue is

916
00:36:24,480 --> 00:36:27,359
the asian policy of the monitoring world

917
00:36:27,359 --> 00:36:30,960
is quite restrictive it allows only a

918
00:36:30,960 --> 00:36:34,560
really specific services of awvs to

919
00:36:34,560 --> 00:36:36,560
assume this fall

920
00:36:36,560 --> 00:36:40,000
it was the first problem but actually we

921
00:36:40,000 --> 00:36:43,920
don't care because we are administrator

922
00:36:43,920 --> 00:36:47,280
of the devops account so we could just

923
00:36:47,280 --> 00:36:50,640
update the assumed policy put

924
00:36:50,640 --> 00:36:54,720
our compromise a role inside it and

925
00:36:54,720 --> 00:36:57,520
steal the monitoring credential

926
00:36:57,520 --> 00:37:00,960
and then we bounce into the root account

927
00:37:00,960 --> 00:37:04,079
and compromise it

928
00:37:04,320 --> 00:37:06,240
once we are

929
00:37:06,240 --> 00:37:09,119
administrator access in the awvs

930
00:37:09,119 --> 00:37:10,400
organization

931
00:37:10,400 --> 00:37:14,400
we could access every account defined in

932
00:37:14,400 --> 00:37:17,440
the organization

933
00:37:17,440 --> 00:37:20,079
in order to demonstrate the impact to

934
00:37:20,079 --> 00:37:22,880
our clients we decided to find a way to

935
00:37:22,880 --> 00:37:26,960
pivot into the impromise network

936
00:37:26,960 --> 00:37:30,160
so we start our enumeration again and we

937
00:37:30,160 --> 00:37:33,359
found an aws account with all the

938
00:37:33,359 --> 00:37:36,400
terraform and ansible configuration

939
00:37:36,400 --> 00:37:40,480
and all the password defined inside

940
00:37:40,480 --> 00:37:43,760
we grab them and we bounce back into the

941
00:37:43,760 --> 00:37:46,560
active directory world and compromise

942
00:37:46,560 --> 00:37:49,040
the active directory we like to show

943
00:37:49,040 --> 00:37:51,599
with that kind of scenario that we could

944
00:37:51,599 --> 00:37:54,400
for example deploy run somewhere set up

945
00:37:54,400 --> 00:37:57,680
some backdoor to extract sensitive data

946
00:37:57,680 --> 00:38:00,319
etc

947
00:38:01,680 --> 00:38:04,000
there are three interesting mutual to

948
00:38:04,000 --> 00:38:08,160
put in place inside awbs to harden it

949
00:38:08,160 --> 00:38:11,760
the first one is not really easy

950
00:38:11,760 --> 00:38:15,119
the im policies in aws could be really

951
00:38:15,119 --> 00:38:16,560
complex

952
00:38:16,560 --> 00:38:19,280
actually you could define a policy with

953
00:38:19,280 --> 00:38:20,400
really

954
00:38:20,400 --> 00:38:23,599
restrictive access such as ap location

955
00:38:23,599 --> 00:38:25,760
multi-factor authentication

956
00:38:25,760 --> 00:38:29,839
uh rexxar regex on the name of the user

957
00:38:29,839 --> 00:38:31,040
etc

958
00:38:31,040 --> 00:38:35,359
so i really miss a tool like bloudon in

959
00:38:35,359 --> 00:38:39,599
awks to create a big graph with all the

960
00:38:39,599 --> 00:38:41,359
configuration and see the

961
00:38:41,359 --> 00:38:43,440
interconnection between the wall

962
00:38:43,440 --> 00:38:46,400
different aws account

963
00:38:46,400 --> 00:38:49,680
a few tools on aid

964
00:38:49,680 --> 00:38:53,440
on the open source uh could try to do

965
00:38:53,440 --> 00:38:54,720
some stuff

966
00:38:54,720 --> 00:38:57,520
such as cloud splitting from salesforce

967
00:38:57,520 --> 00:39:01,040
or scoot suites from ncc group

968
00:39:01,040 --> 00:39:04,880
the second point is to use an abuse from

969
00:39:04,880 --> 00:39:07,040
service control policies this

970
00:39:07,040 --> 00:39:10,240
configuration will allow to define a

971
00:39:10,240 --> 00:39:13,200
master rules at the organization level

972
00:39:13,200 --> 00:39:16,000
that nobody could modify from the local

973
00:39:16,000 --> 00:39:18,320
account and to block

974
00:39:18,320 --> 00:39:21,920
for example some privilege or to avoid

975
00:39:21,920 --> 00:39:24,640
that someone could perform an action on

976
00:39:24,640 --> 00:39:27,520
sensitive assets that will could define

977
00:39:27,520 --> 00:39:30,640
thanks to really simple tag

978
00:39:30,640 --> 00:39:33,920
this uh service control policy are not

979
00:39:33,920 --> 00:39:37,280
readable by anyone outside the root

980
00:39:37,280 --> 00:39:39,520
access in the organization so it's

981
00:39:39,520 --> 00:39:41,760
pretty hard to export an aws

982
00:39:41,760 --> 00:39:44,400
configuration when you don't know what

983
00:39:44,400 --> 00:39:47,520
are the policy defined

984
00:39:47,520 --> 00:39:51,040
and the last one is to define

985
00:39:51,040 --> 00:39:54,320
everything log everywhere export them

986
00:39:54,320 --> 00:39:55,760
because

987
00:39:55,760 --> 00:39:58,400
it's quite often like the local expire

988
00:39:58,400 --> 00:40:02,000
in cloud providers such as azure or awvs

989
00:40:02,000 --> 00:40:04,079
and after a third day you lost

990
00:40:04,079 --> 00:40:06,480
everything and try to perform some

991
00:40:06,480 --> 00:40:09,359
dedicated collaboration on it

992
00:40:09,359 --> 00:40:11,440
there is really interesting rules in

993
00:40:11,440 --> 00:40:14,960
great duty for example

994
00:40:21,920 --> 00:40:24,079
okay so let's just take a step back i'll

995
00:40:24,079 --> 00:40:25,920
go quickly because apparently i talk too

996
00:40:25,920 --> 00:40:27,599
much so we're already a little bit late

997
00:40:27,599 --> 00:40:28,800
on schedule but

998
00:40:28,800 --> 00:40:30,880
um we wanted to take a take a step back

999
00:40:30,880 --> 00:40:32,880
very quickly and look at the overall

1000
00:40:32,880 --> 00:40:35,040
scenario what i wanted to share with you

1001
00:40:35,040 --> 00:40:38,480
is that we went very quickly from an

1002
00:40:38,480 --> 00:40:40,880
authenticated user within the

1003
00:40:40,880 --> 00:40:42,800
information systems

1004
00:40:42,800 --> 00:40:43,599
to

1005
00:40:43,599 --> 00:40:46,000
well access to the repository then

1006
00:40:46,000 --> 00:40:48,079
poison pipeline execution compromise of

1007
00:40:48,079 --> 00:40:50,800
the orchestrator and at that point we

1008
00:40:50,800 --> 00:40:53,760
had already access to production

1009
00:40:53,760 --> 00:40:57,440
environment which means that after steps

1010
00:40:57,440 --> 00:40:58,240
four

1011
00:40:58,240 --> 00:41:00,640
from step five at that point we could

1012
00:41:00,640 --> 00:41:03,920
add real life impact on business

1013
00:41:03,920 --> 00:41:06,800
application and basically compromise all

1014
00:41:06,800 --> 00:41:09,200
the application within the company

1015
00:41:09,200 --> 00:41:12,000
um we didn't stop there and as as

1016
00:41:12,000 --> 00:41:14,800
gautier and remy showed you we were able

1017
00:41:14,800 --> 00:41:17,599
to go from the application deployment

1018
00:41:17,599 --> 00:41:20,800
environment back to the office

1019
00:41:20,800 --> 00:41:22,640
environment and the active directory

1020
00:41:22,640 --> 00:41:24,560
meaning that it was quite easy at that

1021
00:41:24,560 --> 00:41:26,640
point to really compromise the whole

1022
00:41:26,640 --> 00:41:28,800
information system but even if that was

1023
00:41:28,800 --> 00:41:31,520
not the case we went very very quickly

1024
00:41:31,520 --> 00:41:34,000
from unauthenticated to access to

1025
00:41:34,000 --> 00:41:36,960
production environment

1026
00:41:37,119 --> 00:41:39,040
last word i wanted to talk about that as

1027
00:41:39,040 --> 00:41:41,280
i said at the beginning we had to focus

1028
00:41:41,280 --> 00:41:43,920
on a very small set of tools

1029
00:41:43,920 --> 00:41:45,760
we think it really provides a picture of

1030
00:41:45,760 --> 00:41:47,839
what is usually deployed in in our

1031
00:41:47,839 --> 00:41:50,160
clients environment but obviously there

1032
00:41:50,160 --> 00:41:51,520
might be tons of different tools

1033
00:41:51,520 --> 00:41:53,359
depending on your technical stack and so

1034
00:41:53,359 --> 00:41:55,760
on all those tools are great and usually

1035
00:41:55,760 --> 00:41:57,520
have tons of functionalities and

1036
00:41:57,520 --> 00:41:59,599
provides useful functionalities for the

1037
00:41:59,599 --> 00:42:01,760
devops teams i just want you to keep in

1038
00:42:01,760 --> 00:42:04,000
mind that all those functionalities

1039
00:42:04,000 --> 00:42:07,040
can't be also used by attackers

1040
00:42:07,040 --> 00:42:10,079
and the message behind behind this slide

1041
00:42:10,079 --> 00:42:12,240
is to say that we feel that sometimes

1042
00:42:12,240 --> 00:42:14,800
devops teams want to deploy new

1043
00:42:14,800 --> 00:42:18,640
solutions a new type of solution before

1044
00:42:18,640 --> 00:42:20,400
really hardening and before really

1045
00:42:20,400 --> 00:42:22,400
understanding and managing existing

1046
00:42:22,400 --> 00:42:24,960
solution so our advice there would be

1047
00:42:24,960 --> 00:42:27,920
maybe focus more on quality and

1048
00:42:27,920 --> 00:42:29,520
security level of your application

1049
00:42:29,520 --> 00:42:31,520
before trying to deploy a new one

1050
00:42:31,520 --> 00:42:34,160
and i'll just let me finish on the few

1051
00:42:34,160 --> 00:42:35,920
recommendations and that will have a few

1052
00:42:35,920 --> 00:42:38,800
minutes for questions

1053
00:42:39,040 --> 00:42:42,000
if you sure only remember five points

1054
00:42:42,000 --> 00:42:43,440
about this

1055
00:42:43,440 --> 00:42:47,520
talk the first one is to ensure less

1056
00:42:47,520 --> 00:42:51,040
privilege and to review your am policy

1057
00:42:51,040 --> 00:42:53,599
to be honest actually we should never

1058
00:42:53,599 --> 00:42:56,560
found animals access on jenkins for

1059
00:42:56,560 --> 00:42:58,240
example are

1060
00:42:58,240 --> 00:43:01,359
really critical privilege in aws and all

1061
00:43:01,359 --> 00:43:04,880
power some random services

1062
00:43:04,880 --> 00:43:07,839
the second point is to focus in secret

1063
00:43:07,839 --> 00:43:11,119
management password and careertechs

1064
00:43:11,119 --> 00:43:12,720
are

1065
00:43:12,720 --> 00:43:14,560
really such things but

1066
00:43:14,560 --> 00:43:17,520
please it's pretty easy to remove them

1067
00:43:17,520 --> 00:43:19,599
you could propose to use some vault on

1068
00:43:19,599 --> 00:43:21,119
that point

1069
00:43:21,119 --> 00:43:24,000
i'm sorry for all the developers but

1070
00:43:24,000 --> 00:43:28,240
agility is great is awesome but

1071
00:43:28,240 --> 00:43:31,119
agility could also be done with some

1072
00:43:31,119 --> 00:43:34,240
procedure and some restriction to avoid

1073
00:43:34,240 --> 00:43:38,319
to impact the world companies

1074
00:43:38,560 --> 00:43:42,000
the monitoring of the pipeline is always

1075
00:43:42,000 --> 00:43:44,880
done in order to validate the

1076
00:43:44,880 --> 00:43:48,000
availability of the pipeline and

1077
00:43:48,000 --> 00:43:49,920
never to

1078
00:43:49,920 --> 00:43:53,760
identify some bad behavior or

1079
00:43:53,760 --> 00:43:56,480
exploitation current exploitation inside

1080
00:43:56,480 --> 00:43:59,040
it you should really understand that

1081
00:43:59,040 --> 00:44:01,920
code review is interesting for what is

1082
00:44:01,920 --> 00:44:04,560
inside your pipeline but you should

1083
00:44:04,560 --> 00:44:07,680
also monitor the world infrastructure

1084
00:44:07,680 --> 00:44:10,160
that under the pipeline and all this

1085
00:44:10,160 --> 00:44:12,480
process

1086
00:44:12,480 --> 00:44:14,880
the last point is more about the

1087
00:44:14,880 --> 00:44:17,680
architecture of this pipeline you should

1088
00:44:17,680 --> 00:44:20,640
segregate different environments inside

1089
00:44:20,640 --> 00:44:23,200
it to avoid a

1090
00:44:23,200 --> 00:44:25,920
basic marketing application could

1091
00:44:25,920 --> 00:44:29,040
compromise some really sensitive assets

1092
00:44:29,040 --> 00:44:31,839
on your network it's the same in the

1093
00:44:31,839 --> 00:44:34,640
kubernetes world network celebration is

1094
00:44:34,640 --> 00:44:38,880
the key and in aws you could set up so

1095
00:44:38,880 --> 00:44:42,160
many features to segregate the rights

1096
00:44:42,160 --> 00:44:45,599
and the accounts to ensure that even if

1097
00:44:45,599 --> 00:44:46,880
an attacker

1098
00:44:46,880 --> 00:44:49,520
put a foot inside it will not be able to

1099
00:44:49,520 --> 00:44:52,720
escalate his privilege

1100
00:44:52,720 --> 00:44:55,040
what i'd like to say in the last point

1101
00:44:55,040 --> 00:44:58,640
is the cicd pipeline is not only a stuff

1102
00:44:58,640 --> 00:45:02,560
for developers or application it's it

1103
00:45:02,560 --> 00:45:04,640
could impact the world network and the

1104
00:45:04,640 --> 00:45:08,319
world infrastructure behind

1105
00:45:09,440 --> 00:45:12,000
a few reference before starting some

1106
00:45:12,000 --> 00:45:14,720
question we will find some orienting

1107
00:45:14,720 --> 00:45:15,680
stuff

1108
00:45:15,680 --> 00:45:18,240
in the middle talk at black hat long

1109
00:45:18,240 --> 00:45:19,920
years ago

1110
00:45:19,920 --> 00:45:22,400
i already speak about the renal security

1111
00:45:22,400 --> 00:45:26,000
labs around aws privilege escalations

1112
00:45:26,000 --> 00:45:28,800
they also provide some terraform code to

1113
00:45:28,800 --> 00:45:31,520
tape load this misconfiguration and see

1114
00:45:31,520 --> 00:45:33,440
what is done

1115
00:45:33,440 --> 00:45:36,560
the ncc group published

1116
00:45:36,560 --> 00:45:38,560
at the beginning of the year a really

1117
00:45:38,560 --> 00:45:41,839
interesting blog post on cacd2

1118
00:45:41,839 --> 00:45:44,319
right after we'll have the chance to

1119
00:45:44,319 --> 00:45:48,480
list an omer that also speak about the

1120
00:45:48,480 --> 00:45:52,640
most risk present in cicd pipeline

1121
00:45:52,640 --> 00:45:55,119
and i think what at the blog post i

1122
00:45:55,119 --> 00:45:58,079
prefer it's from a free chat

1123
00:45:58,079 --> 00:45:59,680
definitely

1124
00:45:59,680 --> 00:46:02,720
take a look about hiking the cloud there

1125
00:46:02,720 --> 00:46:06,079
is also some really good reference from

1126
00:46:06,079 --> 00:46:09,040
bishop and cyber arch around

1127
00:46:09,040 --> 00:46:12,079
kubernetes world

1128
00:46:13,119 --> 00:46:14,960
thank you so much

1129
00:46:14,960 --> 00:46:17,280
and if you have a few minutes

1130
00:46:17,280 --> 00:46:18,480
only two

1131
00:46:18,480 --> 00:46:22,520
if someone has a question

1132
00:46:23,140 --> 00:46:28,009
[Applause]

1133
00:46:30,640 --> 00:46:32,800
thank you everyone now

1134
00:46:32,800 --> 00:46:35,599
have a nice day

1135
00:46:36,319 --> 00:46:38,400
oh sorry sorry is there a question

1136
00:46:38,400 --> 00:46:40,079
yeah uh

1137
00:46:40,079 --> 00:46:42,319
is there anything you can do to harden

1138
00:46:42,319 --> 00:46:45,599
your pipeline so they can't be poisoned

1139
00:46:45,599 --> 00:46:48,319
like are there security settings that

1140
00:46:48,319 --> 00:46:52,640
github actions or git lab pipelines has

1141
00:46:52,640 --> 00:46:54,800
that you could do to like

1142
00:46:54,800 --> 00:46:56,480
of you know

1143
00:46:56,480 --> 00:46:59,839
avoid that from happening or is it

1144
00:46:59,839 --> 00:47:02,720
so so yeah the problem with uh poison

1145
00:47:02,720 --> 00:47:05,200
pipeline execution is that it's not

1146
00:47:05,200 --> 00:47:07,680
invulnerability itself it's the whole

1147
00:47:07,680 --> 00:47:09,839
goal of the pipeline is to build the

1148
00:47:09,839 --> 00:47:12,640
code into artifacts so what you can do

1149
00:47:12,640 --> 00:47:15,280
to try to prevent those things is

1150
00:47:15,280 --> 00:47:17,680
take advantage of

1151
00:47:17,680 --> 00:47:19,280
branch protection

1152
00:47:19,280 --> 00:47:21,440
take advantage of for example what you

1153
00:47:21,440 --> 00:47:23,440
could do is ensure that your build

1154
00:47:23,440 --> 00:47:25,280
configuration file i talked about the

1155
00:47:25,280 --> 00:47:26,880
jenks file earlier

1156
00:47:26,880 --> 00:47:29,200
you could put those build configuration

1157
00:47:29,200 --> 00:47:30,960
file on another branch on which

1158
00:47:30,960 --> 00:47:33,520
basically nobody can push and retrieve

1159
00:47:33,520 --> 00:47:35,839
those files from that specific branch

1160
00:47:35,839 --> 00:47:38,000
meaning that you know that the build

1161
00:47:38,000 --> 00:47:40,160
configuration file will never change and

1162
00:47:40,160 --> 00:47:41,760
even if an attacker were able to

1163
00:47:41,760 --> 00:47:43,839
compromise an account it would be able

1164
00:47:43,839 --> 00:47:45,520
to compromise the code of the

1165
00:47:45,520 --> 00:47:47,280
application but not the build

1166
00:47:47,280 --> 00:47:49,040
configuration file so there are a few

1167
00:47:49,040 --> 00:47:50,960
things that you can you can set up

1168
00:47:50,960 --> 00:47:52,960
honestly they are not that easy to set

1169
00:47:52,960 --> 00:47:54,319
up and it

1170
00:47:54,319 --> 00:47:56,960
decrease the risk but no there is no way

1171
00:47:56,960 --> 00:47:59,040
to magically prevent all poison pipeline

1172
00:47:59,040 --> 00:48:01,359
execution sadly i would love to

1173
00:48:01,359 --> 00:48:03,599
so you're suggesting that you could move

1174
00:48:03,599 --> 00:48:06,319
the pipeline file all the all like the

1175
00:48:06,319 --> 00:48:08,160
actions and stuff into its own

1176
00:48:08,160 --> 00:48:10,559
repository or something like that just

1177
00:48:10,559 --> 00:48:13,359
separating the exactly basically the

1178
00:48:13,359 --> 00:48:15,040
thing that will contain the steps for

1179
00:48:15,040 --> 00:48:15,839
your

1180
00:48:15,839 --> 00:48:18,160
builds you could put them in another it

1181
00:48:18,160 --> 00:48:20,079
can be another branch or another place

1182
00:48:20,079 --> 00:48:21,599
okay on which you know that you can

1183
00:48:21,599 --> 00:48:23,520
trust it and it will be less likely to

1184
00:48:23,520 --> 00:48:25,520
be compromised so there are a way to

1185
00:48:25,520 --> 00:48:28,240
limit the impact of poison pipeline yes

1186
00:48:28,240 --> 00:48:32,319
thank you no problem any other question

1187
00:48:33,599 --> 00:48:35,839
okay

