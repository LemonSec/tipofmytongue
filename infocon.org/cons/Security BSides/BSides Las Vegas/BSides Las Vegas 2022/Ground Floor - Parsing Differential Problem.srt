1
00:00:00,160 --> 00:00:01,920
all right good afternoon everyone thank

2
00:00:01,920 --> 00:00:05,200
you for attending our presentation uh if

3
00:00:05,200 --> 00:00:06,399
you're

4
00:00:06,399 --> 00:00:07,839
looking for the right room you are

5
00:00:07,839 --> 00:00:09,440
looking at parsing the differential

6
00:00:09,440 --> 00:00:11,599
problem uh boon sim will be presenting

7
00:00:11,599 --> 00:00:15,200
today so uh thank you for attending i

8
00:00:15,200 --> 00:00:16,560
have a couple quick announcements before

9
00:00:16,560 --> 00:00:17,600
we start

10
00:00:17,600 --> 00:00:19,920
one is of course we'd like to thank our

11
00:00:19,920 --> 00:00:22,800
sponsors who make this possible

12
00:00:22,800 --> 00:00:25,439
without the help from sponsors such as

13
00:00:25,439 --> 00:00:27,840
lastpass and palo alto networks

14
00:00:27,840 --> 00:00:29,840
we wouldn't be able to do these

15
00:00:29,840 --> 00:00:31,760
along with other sponsors

16
00:00:31,760 --> 00:00:32,960
such as

17
00:00:32,960 --> 00:00:37,120
and vincent flextrack and even blue cat

18
00:00:37,120 --> 00:00:40,000
it's their support along with others

19
00:00:40,000 --> 00:00:41,920
who support and donate

20
00:00:41,920 --> 00:00:44,399
including the donors and volunteers who

21
00:00:44,399 --> 00:00:46,640
make this event possible with even their

22
00:00:46,640 --> 00:00:48,719
time so thank you for being here and for

23
00:00:48,719 --> 00:00:50,079
supporting that

24
00:00:50,079 --> 00:00:52,719
uh just remember as a courtesy

25
00:00:52,719 --> 00:00:54,559
please keep your cell phones off or in

26
00:00:54,559 --> 00:00:56,000
like a buzz mode

27
00:00:56,000 --> 00:00:56,800
the

28
00:00:56,800 --> 00:00:58,800
entire presentation is being recorded

29
00:00:58,800 --> 00:01:01,440
there is no need and no reason to

30
00:01:01,440 --> 00:01:03,600
uh take pictures of the screen or take

31
00:01:03,600 --> 00:01:05,920
video it's all going to be online so

32
00:01:05,920 --> 00:01:07,920
there's no problem there it's all being

33
00:01:07,920 --> 00:01:09,600
broadcast up to youtube

34
00:01:09,600 --> 00:01:11,040
and we'll be there for future purposes

35
00:01:11,040 --> 00:01:12,479
so there's no reason for you to have to

36
00:01:12,479 --> 00:01:14,400
worry about that

37
00:01:14,400 --> 00:01:16,159
also remember please do keep your masks

38
00:01:16,159 --> 00:01:18,000
on and above your nose

39
00:01:18,000 --> 00:01:19,920
it helps keep everybody safe

40
00:01:19,920 --> 00:01:21,040
and

41
00:01:21,040 --> 00:01:23,119
one thing we would ask is if you do have

42
00:01:23,119 --> 00:01:25,520
questions towards the end of the talk

43
00:01:25,520 --> 00:01:27,200
please use the microphone in the center

44
00:01:27,200 --> 00:01:29,360
of the room it's not so much for us we

45
00:01:29,360 --> 00:01:31,200
can hear you here it's because it is

46
00:01:31,200 --> 00:01:33,600
being recorded that helps us capture

47
00:01:33,600 --> 00:01:35,840
that question in the recording so that

48
00:01:35,840 --> 00:01:37,439
whoever watches the recording will be

49
00:01:37,439 --> 00:01:39,360
able to hear that question as well so

50
00:01:39,360 --> 00:01:40,560
please if you have a question towards

51
00:01:40,560 --> 00:01:42,560
the end come up and use the microphone

52
00:01:42,560 --> 00:01:44,159
in the middle of the room

53
00:01:44,159 --> 00:01:45,840
um

54
00:01:45,840 --> 00:01:48,240
also as a reminder if for any reason you

55
00:01:48,240 --> 00:01:50,880
do take a picture before or afterwards

56
00:01:50,880 --> 00:01:53,280
we do have a policy here at b-sides that

57
00:01:53,280 --> 00:01:55,759
says you explicitly need permission for

58
00:01:55,759 --> 00:01:57,520
anybody who might be in that photo right

59
00:01:57,520 --> 00:01:59,680
we're a little sensitive towards uh

60
00:01:59,680 --> 00:02:02,640
capturing the uh photos or images of

61
00:02:02,640 --> 00:02:04,640
certain people who would choose to

62
00:02:04,640 --> 00:02:07,200
remain more anonymous so and we do try

63
00:02:07,200 --> 00:02:09,199
to respect that so please try not to

64
00:02:09,199 --> 00:02:10,720
take any photos where you don't have

65
00:02:10,720 --> 00:02:13,520
explicit permission of anybody who might

66
00:02:13,520 --> 00:02:15,360
be captured within that

67
00:02:15,360 --> 00:02:16,879
so

68
00:02:16,879 --> 00:02:18,400
all right with that i'd like to go ahead

69
00:02:18,400 --> 00:02:21,120
and give a round warm welcome to boone

70
00:02:21,120 --> 00:02:22,720
boone go ahead and

71
00:02:22,720 --> 00:02:25,280
take her away

72
00:02:29,120 --> 00:02:30,400
hi

73
00:02:30,400 --> 00:02:32,239
so good afternoon everyone

74
00:02:32,239 --> 00:02:34,400
today i'll be talking about passing

75
00:02:34,400 --> 00:02:37,280
differential problem so

76
00:02:37,280 --> 00:02:40,080
if you have heard about this

77
00:02:40,080 --> 00:02:42,800
good if you have not then let me take

78
00:02:42,800 --> 00:02:45,599
you down some memory lane and a bit of

79
00:02:45,599 --> 00:02:48,000
storytelling on why we should care about

80
00:02:48,000 --> 00:02:49,599
this and how

81
00:02:49,599 --> 00:02:52,160
it not just affects what we do in cyber

82
00:02:52,160 --> 00:02:54,640
security but software engineers as well

83
00:02:54,640 --> 00:02:56,800
because i myself am currently a software

84
00:02:56,800 --> 00:02:58,000
engineer

85
00:02:58,000 --> 00:02:59,040
so

86
00:02:59,040 --> 00:03:01,680
i'm from singapore and in a day i'm a

87
00:03:01,680 --> 00:03:03,280
software engineer

88
00:03:03,280 --> 00:03:05,760
and at night i teach at a local

89
00:03:05,760 --> 00:03:07,519
university so i'm a part-time lecturer

90
00:03:07,519 --> 00:03:10,200
teaching cloud systems and i play for

91
00:03:10,200 --> 00:03:11,920
ctfsg

92
00:03:11,920 --> 00:03:15,599
ctf team and that's my handle

93
00:03:15,599 --> 00:03:18,720
so key takeaways for today

94
00:03:18,720 --> 00:03:20,640
which i'll be delivering is

95
00:03:20,640 --> 00:03:22,319
what is passing differential problem

96
00:03:22,319 --> 00:03:23,840
some of you might not know what it is

97
00:03:23,840 --> 00:03:26,640
right and how does this affect us like

98
00:03:26,640 --> 00:03:28,959
why should we care and how can we

99
00:03:28,959 --> 00:03:30,400
address it

100
00:03:30,400 --> 00:03:33,840
throughout the entire ecosystem

101
00:03:34,319 --> 00:03:35,120
so

102
00:03:35,120 --> 00:03:37,440
just imagine this that we have a single

103
00:03:37,440 --> 00:03:40,159
system that we built freshly like hey i

104
00:03:40,159 --> 00:03:41,920
have a super app idea let's build

105
00:03:41,920 --> 00:03:43,440
something right

106
00:03:43,440 --> 00:03:46,159
and we also always start with this

107
00:03:46,159 --> 00:03:48,879
monolithic architecture everything is

108
00:03:48,879 --> 00:03:51,040
locked into one giant

109
00:03:51,040 --> 00:03:53,439
service and then we expose different

110
00:03:53,439 --> 00:03:55,760
paths and resources right

111
00:03:55,760 --> 00:03:56,560
so

112
00:03:56,560 --> 00:03:59,360
but as we progress we would think hey

113
00:03:59,360 --> 00:04:01,439
the system is getting larger and let's

114
00:04:01,439 --> 00:04:03,280
try to implement different subsystems

115
00:04:03,280 --> 00:04:04,720
into the ecosystem

116
00:04:04,720 --> 00:04:07,200
and that's how we grow right we don't

117
00:04:07,200 --> 00:04:08,480
recreate the thing and

118
00:04:08,480 --> 00:04:09,680
[Music]

119
00:04:09,680 --> 00:04:12,159
break it eventually we try to add new

120
00:04:12,159 --> 00:04:14,879
new features or new subsystems into the

121
00:04:14,879 --> 00:04:17,680
entire ecosystem

122
00:04:17,759 --> 00:04:19,279
as we grow

123
00:04:19,279 --> 00:04:21,600
we might introduce different systems

124
00:04:21,600 --> 00:04:24,320
with different languages

125
00:04:24,320 --> 00:04:26,560
so it could be at the very beginning i'm

126
00:04:26,560 --> 00:04:29,600
using django as my primary language or

127
00:04:29,600 --> 00:04:31,440
system or

128
00:04:31,440 --> 00:04:34,000
framework and then i decide hey i'm i'm

129
00:04:34,000 --> 00:04:36,800
i want to be like fang i want to use go

130
00:04:36,800 --> 00:04:38,960
and then i'm like i want to go dangerous

131
00:04:38,960 --> 00:04:41,280
let's use node.js so these are some of

132
00:04:41,280 --> 00:04:42,400
the different

133
00:04:42,400 --> 00:04:45,680
ways of creating things and

134
00:04:45,680 --> 00:04:48,400
part of it is also the motivation

135
00:04:48,400 --> 00:04:50,880
to explore the path of least resistance

136
00:04:50,880 --> 00:04:52,880
to go systems

137
00:04:52,880 --> 00:04:55,680
i work in a super app company

138
00:04:55,680 --> 00:04:58,400
right um it's a ride-hailing app similar

139
00:04:58,400 --> 00:05:00,400
to uber in southeast asia

140
00:05:00,400 --> 00:05:03,199
and what we do is we have a large system

141
00:05:03,199 --> 00:05:06,080
that's built in a single language but

142
00:05:06,080 --> 00:05:08,880
new businesses and new technologies also

143
00:05:08,880 --> 00:05:10,960
new features are built in using

144
00:05:10,960 --> 00:05:12,320
different technologies because the

145
00:05:12,320 --> 00:05:15,360
people they hire to do all this um are

146
00:05:15,360 --> 00:05:17,440
comfortable and something else like hey

147
00:05:17,440 --> 00:05:18,400
um

148
00:05:18,400 --> 00:05:20,880
i'm going to build a note you build a

149
00:05:20,880 --> 00:05:23,280
car rental system in node.js

150
00:05:23,280 --> 00:05:27,039
and once that proof of concept is done

151
00:05:27,039 --> 00:05:29,360
you realize that hey we have gotten knee

152
00:05:29,360 --> 00:05:31,600
deep into node.js we shouldn't be

153
00:05:31,600 --> 00:05:34,960
refactoring these things right but the

154
00:05:34,960 --> 00:05:36,400
main

155
00:05:36,400 --> 00:05:37,440
set of

156
00:05:37,440 --> 00:05:39,520
features and services they are written

157
00:05:39,520 --> 00:05:41,280
in an entirely different language with

158
00:05:41,280 --> 00:05:43,360
an entirely different pipeline

159
00:05:43,360 --> 00:05:44,080
so

160
00:05:44,080 --> 00:05:45,440
one of the

161
00:05:45,440 --> 00:05:47,600
motivations to expand with different

162
00:05:47,600 --> 00:05:48,880
languages

163
00:05:48,880 --> 00:05:49,600
is

164
00:05:49,600 --> 00:05:51,600
to explore the path of least resistance

165
00:05:51,600 --> 00:05:54,479
not just in a scope of technical

166
00:05:54,479 --> 00:05:58,479
work but also business decisions as well

167
00:05:58,479 --> 00:06:00,560
so what could go wrong if

168
00:06:00,560 --> 00:06:02,960
different systems have recurring

169
00:06:02,960 --> 00:06:04,400
variables right

170
00:06:04,400 --> 00:06:06,800
so for instance and system one is

171
00:06:06,800 --> 00:06:09,280
written in go and system two is written

172
00:06:09,280 --> 00:06:10,880
in django

173
00:06:10,880 --> 00:06:12,880
what could go wrong right so let's take

174
00:06:12,880 --> 00:06:16,159
a look at some sample code

175
00:06:16,240 --> 00:06:17,039
so

176
00:06:17,039 --> 00:06:20,400
this is something that could be written

177
00:06:20,400 --> 00:06:23,120
right for the top part it's go

178
00:06:23,120 --> 00:06:25,520
so you have a param there's

179
00:06:25,520 --> 00:06:26,880
you got it from

180
00:06:26,880 --> 00:06:29,440
this url.url.query.get

181
00:06:29,440 --> 00:06:30,960
so this is the reading directory from

182
00:06:30,960 --> 00:06:33,120
the http package

183
00:06:33,120 --> 00:06:36,000
and then this gets the value that's

184
00:06:36,000 --> 00:06:37,520
tagged to foo

185
00:06:37,520 --> 00:06:39,520
and in django you do the same thing as

186
00:06:39,520 --> 00:06:42,479
well in django's

187
00:06:42,479 --> 00:06:44,120
way of doing it is to use

188
00:06:44,120 --> 00:06:47,120
request.get.get and you get that

189
00:06:47,120 --> 00:06:49,840
value of that variable

190
00:06:49,840 --> 00:06:51,759
it looks the same right if let's say i

191
00:06:51,759 --> 00:06:53,680
pass it from the first lesson to the

192
00:06:53,680 --> 00:06:55,120
second system

193
00:06:55,120 --> 00:06:56,400
it should be reading the same thing

194
00:06:56,400 --> 00:06:57,360
correct

195
00:06:57,360 --> 00:06:59,199
when in fact it's not

196
00:06:59,199 --> 00:07:02,720
so the first one we read as john

197
00:07:02,720 --> 00:07:06,639
and the second one we read as mayor

198
00:07:06,639 --> 00:07:08,800
now

199
00:07:08,800 --> 00:07:11,120
with this in mind what if

200
00:07:11,120 --> 00:07:14,240
my first layer of system is a check or

201
00:07:14,240 --> 00:07:16,560
security check or some sort of a

202
00:07:16,560 --> 00:07:18,880
firewall right and that got through my

203
00:07:18,880 --> 00:07:20,160
firewall

204
00:07:20,160 --> 00:07:20,960
and

205
00:07:20,960 --> 00:07:23,759
the back end downstream systems that is

206
00:07:23,759 --> 00:07:26,720
reading the value of the variable

207
00:07:26,720 --> 00:07:28,880
is a totally entirely different

208
00:07:28,880 --> 00:07:32,160
framework and it's reading the for

209
00:07:32,160 --> 00:07:35,280
example an sql injection payload so that

210
00:07:35,280 --> 00:07:36,800
bypasses

211
00:07:36,800 --> 00:07:39,680
the first layer of check and

212
00:07:39,680 --> 00:07:40,720
breaks

213
00:07:40,720 --> 00:07:43,199
universal logic within the system so why

214
00:07:43,199 --> 00:07:45,280
does this happen

215
00:07:45,280 --> 00:07:47,520
so these two images they are from the

216
00:07:47,520 --> 00:07:49,919
official

217
00:07:49,919 --> 00:07:53,680
packages and library documentations

218
00:07:53,680 --> 00:07:55,520
so as you can see in the first

219
00:07:55,520 --> 00:07:57,280
top part of this slide

220
00:07:57,280 --> 00:07:59,199
the goal http package

221
00:07:59,199 --> 00:08:02,720
defines that using the get function

222
00:08:02,720 --> 00:08:04,720
it will return you

223
00:08:04,720 --> 00:08:07,039
the very first

224
00:08:07,039 --> 00:08:09,599
the very first variable

225
00:08:09,599 --> 00:08:10,879
even though you have multiple questions

226
00:08:10,879 --> 00:08:12,879
it will return the first one

227
00:08:12,879 --> 00:08:14,400
but in django

228
00:08:14,400 --> 00:08:16,400
it will return the second one it's a bit

229
00:08:16,400 --> 00:08:18,080
funny because i when reading a source

230
00:08:18,080 --> 00:08:20,800
code it it kind of feels like it's quite

231
00:08:20,800 --> 00:08:24,560
messy but if you take these two together

232
00:08:24,560 --> 00:08:25,759
it makes sense

233
00:08:25,759 --> 00:08:28,879
so the get item the get function

234
00:08:28,879 --> 00:08:30,479
from django

235
00:08:30,479 --> 00:08:32,240
implements the get underscore underscore

236
00:08:32,240 --> 00:08:33,519
get item

237
00:08:33,519 --> 00:08:35,839
which takes the last occurring

238
00:08:35,839 --> 00:08:38,719
variable in the request parameter

239
00:08:38,719 --> 00:08:42,719
so that is why when we have this

240
00:08:42,719 --> 00:08:45,279
goal we'll see it as john

241
00:08:45,279 --> 00:08:47,600
and django will see it as the second

242
00:08:47,600 --> 00:08:49,120
variable which is the sql injection

243
00:08:49,120 --> 00:08:51,040
payload

244
00:08:51,040 --> 00:08:52,320
so this

245
00:08:52,320 --> 00:08:54,320
is what we call the passing differential

246
00:08:54,320 --> 00:08:56,640
problem this was first this term was

247
00:08:56,640 --> 00:09:00,080
first used in the langsec

248
00:09:00,080 --> 00:09:02,320
language security langsat approach where

249
00:09:02,320 --> 00:09:04,720
they described this as the different

250
00:09:04,720 --> 00:09:06,880
interpretation of messages or data

251
00:09:06,880 --> 00:09:09,040
streams by com components breaks any

252
00:09:09,040 --> 00:09:11,839
assumptions that components adhere to a

253
00:09:11,839 --> 00:09:13,519
specification

254
00:09:13,519 --> 00:09:15,519
so this is nothing new and i'll tell you

255
00:09:15,519 --> 00:09:16,399
why

256
00:09:16,399 --> 00:09:17,839
ten years ago

257
00:09:17,839 --> 00:09:19,360
in the tangled web

258
00:09:19,360 --> 00:09:20,320
when

259
00:09:20,320 --> 00:09:23,200
macau published the book in 2011.

260
00:09:23,200 --> 00:09:24,640
it was mentioned in

261
00:09:24,640 --> 00:09:28,480
briefly in the second or third

262
00:09:28,800 --> 00:09:30,720
the third chapter about passing

263
00:09:30,720 --> 00:09:32,320
differentials

264
00:09:32,320 --> 00:09:35,360
and also orange as mentioned this but in

265
00:09:35,360 --> 00:09:38,080
a different form of passing the

266
00:09:38,080 --> 00:09:40,080
passing between dns

267
00:09:40,080 --> 00:09:42,160
and also phone function where he made a

268
00:09:42,160 --> 00:09:44,640
variable about http parameter pollution

269
00:09:44,640 --> 00:09:46,480
which stems towards the

270
00:09:46,480 --> 00:09:48,240
which stems from the passing

271
00:09:48,240 --> 00:09:51,040
differential problem and also read more

272
00:09:51,040 --> 00:09:54,880
recently a gitlab blog talking about how

273
00:09:54,880 --> 00:09:56,800
passing differential can be used to

274
00:09:56,800 --> 00:09:57,839
exploit

275
00:09:57,839 --> 00:09:59,040
a

276
00:09:59,040 --> 00:10:00,959
file write or file read from

277
00:10:00,959 --> 00:10:03,959
drcv20206833

278
00:10:04,720 --> 00:10:06,800
so this is nothing new and it's been

279
00:10:06,800 --> 00:10:09,839
mentioned briefly in many cases

280
00:10:09,839 --> 00:10:13,839
and in fact there is whatever

281
00:10:15,519 --> 00:10:17,279
and in fact

282
00:10:17,279 --> 00:10:18,959
there is

283
00:10:18,959 --> 00:10:21,760
available resources online so this is

284
00:10:21,760 --> 00:10:22,640
from

285
00:10:22,640 --> 00:10:24,640
this table is some payload of all things

286
00:10:24,640 --> 00:10:26,240
if some of you know that we bought

287
00:10:26,240 --> 00:10:27,279
street

288
00:10:27,279 --> 00:10:29,920
i thought that it should be there so i

289
00:10:29,920 --> 00:10:32,640
compiled different sources from

290
00:10:32,640 --> 00:10:34,720
the information from different sources

291
00:10:34,720 --> 00:10:37,839
and i made a commit to it and it's there

292
00:10:37,839 --> 00:10:38,959
already and

293
00:10:38,959 --> 00:10:41,120
people have been contributing to it and

294
00:10:41,120 --> 00:10:42,480
it's good that we know what are we

295
00:10:42,480 --> 00:10:45,200
dealing with because

296
00:10:45,200 --> 00:10:47,200
as a software engineer it's

297
00:10:47,200 --> 00:10:49,839
it's quite scary to know that my peers

298
00:10:49,839 --> 00:10:51,040
do not know

299
00:10:51,040 --> 00:10:54,880
that different systems handle different

300
00:10:54,880 --> 00:10:56,880
different languages sorry different

301
00:10:56,880 --> 00:10:58,720
variables differently

302
00:10:58,720 --> 00:11:02,959
so if let's say you look net and

303
00:11:02,959 --> 00:11:04,720
apache and

304
00:11:04,720 --> 00:11:07,040
php juice they handle it way differently

305
00:11:07,040 --> 00:11:08,320
from say

306
00:11:08,320 --> 00:11:10,720
node.js or even go

307
00:11:10,720 --> 00:11:13,200
or python flask and django

308
00:11:13,200 --> 00:11:16,079
so if you have this type of architecture

309
00:11:16,079 --> 00:11:17,600
you should look at this as well so that

310
00:11:17,600 --> 00:11:19,920
you can make sure that your system

311
00:11:19,920 --> 00:11:24,920
conforms to what you require to do

312
00:11:29,760 --> 00:11:32,480
so unlike url uri

313
00:11:32,480 --> 00:11:33,360
right

314
00:11:33,360 --> 00:11:38,000
we have i if ietf ifc39862

315
00:11:38,000 --> 00:11:40,640
tell us how we should

316
00:11:40,640 --> 00:11:42,880
pass dns

317
00:11:42,880 --> 00:11:44,240
as it is

318
00:11:44,240 --> 00:11:45,519
there isn't

319
00:11:45,519 --> 00:11:46,800
to this day

320
00:11:46,800 --> 00:11:49,279
any i ifc is telling us how we should

321
00:11:49,279 --> 00:11:50,720
handle

322
00:11:50,720 --> 00:11:53,519
url variables and especially in multiple

323
00:11:53,519 --> 00:11:54,639
occurrences

324
00:11:54,639 --> 00:11:56,480
and this makes it confusing for

325
00:11:56,480 --> 00:11:58,639
different frameworks because let's say

326
00:11:58,639 --> 00:12:00,079
you are you're a full stack developer

327
00:12:00,079 --> 00:12:01,920
working with different languages you'll

328
00:12:01,920 --> 00:12:04,160
be like hey what's happening you know

329
00:12:04,160 --> 00:12:06,079
and so most of the times it could be

330
00:12:06,079 --> 00:12:08,639
this right

331
00:12:08,639 --> 00:12:12,160
and this is just the tip of the iceberg

332
00:12:12,160 --> 00:12:14,800
it can also be observed in the entire

333
00:12:14,800 --> 00:12:16,000
body

334
00:12:16,000 --> 00:12:17,200
for example

335
00:12:17,200 --> 00:12:20,000
if you see the hdp post body

336
00:12:20,000 --> 00:12:21,600
it can happen

337
00:12:21,600 --> 00:12:24,320
be haters it can happen and let's not

338
00:12:24,320 --> 00:12:27,040
forget that http haters

339
00:12:27,040 --> 00:12:29,519
can be criticalized or uncounter

340
00:12:29,519 --> 00:12:30,800
clinicalized

341
00:12:30,800 --> 00:12:32,160
and

342
00:12:32,160 --> 00:12:34,000
moreover

343
00:12:34,000 --> 00:12:36,079
i was reading some django documentation

344
00:12:36,079 --> 00:12:38,720
yesterday because i was making dislikes

345
00:12:38,720 --> 00:12:41,040
django would

346
00:12:41,040 --> 00:12:43,839
replace your hyphens in your headers

347
00:12:43,839 --> 00:12:45,279
with underscores

348
00:12:45,279 --> 00:12:46,800
to

349
00:12:46,800 --> 00:12:48,959
to match their haters and do a

350
00:12:48,959 --> 00:12:50,079
dictionary

351
00:12:50,079 --> 00:12:51,440
so

352
00:12:51,440 --> 00:12:53,519
i'm not i'm not saying that there's a

353
00:12:53,519 --> 00:12:56,480
security impact but it is a interesting

354
00:12:56,480 --> 00:12:58,480
implementation that they are doing this

355
00:12:58,480 --> 00:13:01,120
because if you see in diff other web

356
00:13:01,120 --> 00:13:03,120
packages they could be just matching

357
00:13:03,120 --> 00:13:06,160
those by just making it lower case so

358
00:13:06,160 --> 00:13:08,639
that is one example of why we should pay

359
00:13:08,639 --> 00:13:10,000
attention to what kind of frameworks we

360
00:13:10,000 --> 00:13:11,600
are using

361
00:13:11,600 --> 00:13:12,560
so

362
00:13:12,560 --> 00:13:14,000
i've been saying

363
00:13:14,000 --> 00:13:16,000
about all these problems and how it

364
00:13:16,000 --> 00:13:18,560
affects us but what can we do

365
00:13:18,560 --> 00:13:20,079
right of course number one is to be

366
00:13:20,079 --> 00:13:21,519
aware what we're using

367
00:13:21,519 --> 00:13:23,920
and uh not to assume uniformity across

368
00:13:23,920 --> 00:13:26,719
the entire stack

369
00:13:29,120 --> 00:13:31,600
and if we are

370
00:13:31,600 --> 00:13:33,839
if we have the time and we are committed

371
00:13:33,839 --> 00:13:36,800
enough we can create test coverages

372
00:13:36,800 --> 00:13:40,160
to include such cases to see that you

373
00:13:40,160 --> 00:13:42,320
know if there is any

374
00:13:42,320 --> 00:13:44,959
breakage of logic

375
00:13:44,959 --> 00:13:47,519
or we can just do it at the api gateway

376
00:13:47,519 --> 00:13:50,000
level and just normalize the normalize

377
00:13:50,000 --> 00:13:51,440
the variables and pass it down to the

378
00:13:51,440 --> 00:13:53,360
downstream services

379
00:13:53,360 --> 00:13:54,160
now

380
00:13:54,160 --> 00:13:57,920
today i've talked about web itself right

381
00:13:57,920 --> 00:14:00,160
so

382
00:14:00,480 --> 00:14:01,760
passing differential problem with

383
00:14:01,760 --> 00:14:04,240
technologies is something that has been

384
00:14:04,240 --> 00:14:06,480
mentioned and spoken in small little

385
00:14:06,480 --> 00:14:09,199
places for the past decade

386
00:14:09,199 --> 00:14:10,800
what about the cloud

387
00:14:10,800 --> 00:14:12,160
so i think this is something that i

388
00:14:12,160 --> 00:14:15,680
would like to leave you guys with as a

389
00:14:15,680 --> 00:14:18,240
pondering thing to think about because

390
00:14:18,240 --> 00:14:20,160
this is something i'm still working on

391
00:14:20,160 --> 00:14:22,639
the differentials within cloud systems

392
00:14:22,639 --> 00:14:25,440
and how multi-cloud affects us and how

393
00:14:25,440 --> 00:14:27,440
we should be using it correctly

394
00:14:27,440 --> 00:14:28,560
so yeah

395
00:14:28,560 --> 00:14:30,560
um

396
00:14:30,560 --> 00:14:34,439
thank you any questions

