1
00:00:00,480 --> 00:00:02,159
all right good morning welcome to

2
00:00:02,159 --> 00:00:04,640
b-sides las vegas

3
00:00:04,640 --> 00:00:06,640
this track climbing production mountain

4
00:00:06,640 --> 00:00:10,719
practical ci cd attacks using cicd goat

5
00:00:10,719 --> 00:00:14,320
presented by assaf greenhouse and omar

6
00:00:14,320 --> 00:00:17,279
gill

7
00:00:17,279 --> 00:00:20,160
a few announcements before we begin

8
00:00:20,160 --> 00:00:22,400
for sponsors we'd like to thank sponsors

9
00:00:22,400 --> 00:00:24,880
especially inner circle sponsors

10
00:00:24,880 --> 00:00:27,199
critical stack and valley mail

11
00:00:27,199 --> 00:00:31,039
and some stellar sponsors such as amazon

12
00:00:31,039 --> 00:00:32,479
paranoids

13
00:00:32,479 --> 00:00:33,920
microsoft

14
00:00:33,920 --> 00:00:35,200
etc

15
00:00:35,200 --> 00:00:39,120
even the national security agency

16
00:00:39,680 --> 00:00:42,079
these talks are being live streamed

17
00:00:42,079 --> 00:00:44,480
so as a courtesy to both the speakers

18
00:00:44,480 --> 00:00:47,200
and our remote audience

19
00:00:47,200 --> 00:00:51,039
please silence your cell phones

20
00:00:51,680 --> 00:00:53,760
if you if there are questions at the end

21
00:00:53,760 --> 00:00:55,600
of the talk there's a microphone in the

22
00:00:55,600 --> 00:00:56,840
middle of the room

23
00:00:56,840 --> 00:01:00,000
so please ask your question in the

24
00:01:00,000 --> 00:01:01,199
microphone

25
00:01:01,199 --> 00:01:03,600
so that our streaming folks can can hear

26
00:01:03,600 --> 00:01:06,760
the question

27
00:01:12,960 --> 00:01:16,080
and without further ado

28
00:01:19,040 --> 00:01:22,000
okay yeah i think you can hear me um hi

29
00:01:22,000 --> 00:01:24,080
everyone good morning welcome to besides

30
00:01:24,080 --> 00:01:25,600
welcome to vegas

31
00:01:25,600 --> 00:01:27,520
and welcome to our talk uh climbing the

32
00:01:27,520 --> 00:01:29,680
production mountain practical ccd

33
00:01:29,680 --> 00:01:33,360
attacks uh using cacd goats um before we

34
00:01:33,360 --> 00:01:35,680
dive uh before we deep dive into all

35
00:01:35,680 --> 00:01:37,600
these attacks let's uh introduce

36
00:01:37,600 --> 00:01:39,840
ourselves quickly

37
00:01:39,840 --> 00:01:41,759
so my name is omer gill

38
00:01:41,759 --> 00:01:44,399
i have an experience of around 14 years

39
00:01:44,399 --> 00:01:46,720
in hacking web applications

40
00:01:46,720 --> 00:01:49,119
cloud security enterprise security uh

41
00:01:49,119 --> 00:01:50,799
released some research materials in the

42
00:01:50,799 --> 00:01:53,439
past like the webcast deception attack

43
00:01:53,439 --> 00:01:56,479
back in 2017 and a few months ago the

44
00:01:56,479 --> 00:01:58,399
top 10 city security risks initiative

45
00:01:58,399 --> 00:02:00,399
which we'll mention in a moment

46
00:02:00,399 --> 00:02:01,680
um

47
00:02:01,680 --> 00:02:04,560
besides that uh today i lead research at

48
00:02:04,560 --> 00:02:05,920
cyber security

49
00:02:05,920 --> 00:02:08,560
we are a young startup that exists for

50
00:02:08,560 --> 00:02:11,440
nearly two years focused on optimizing

51
00:02:11,440 --> 00:02:14,400
ccd security uh solution provides

52
00:02:14,400 --> 00:02:16,319
visibility and

53
00:02:16,319 --> 00:02:17,920
detection and prevention capabilities

54
00:02:17,920 --> 00:02:20,080
for possible flaws and attack vectors in

55
00:02:20,080 --> 00:02:22,480
your ccd ecosystem are similar to what

56
00:02:22,480 --> 00:02:26,000
we're going to showcase today

57
00:02:26,000 --> 00:02:28,720
hi everyone my name is asi i have about

58
00:02:28,720 --> 00:02:30,560
seven years of experience in cyber

59
00:02:30,560 --> 00:02:32,800
security i've been doing stock incident

60
00:02:32,800 --> 00:02:35,360
response security architecture and for

61
00:02:35,360 --> 00:02:36,879
the last two years i've been doing

62
00:02:36,879 --> 00:02:41,760
application security and ccd security

63
00:02:44,319 --> 00:02:45,280
okay

64
00:02:45,280 --> 00:02:46,080
so

65
00:02:46,080 --> 00:02:48,000
daniel which stands by here right here

66
00:02:48,000 --> 00:02:50,160
by the way his uh uh cyrus's co-founder

67
00:02:50,160 --> 00:02:52,720
and ceo and myself uh we we have been

68
00:02:52,720 --> 00:02:54,480
working for several years with many

69
00:02:54,480 --> 00:02:55,920
organizations on improving their

70
00:02:55,920 --> 00:02:58,560
security posture and uh something that

71
00:02:58,560 --> 00:02:59,760
we found was common to all of these

72
00:02:59,760 --> 00:03:01,040
organizations

73
00:03:01,040 --> 00:03:03,680
uh we um like in most of these

74
00:03:03,680 --> 00:03:06,319
organizations we we found many

75
00:03:06,319 --> 00:03:08,480
flaws and possible attack vectors in

76
00:03:08,480 --> 00:03:10,879
their engineering uh environments and uh

77
00:03:10,879 --> 00:03:12,319
something that we found common to all of

78
00:03:12,319 --> 00:03:14,959
these organizations was the lack of

79
00:03:14,959 --> 00:03:16,879
knowledge and methodologies of how to

80
00:03:16,879 --> 00:03:19,440
protect the ccd ecosystem and this huge

81
00:03:19,440 --> 00:03:21,280
gap of knowledge for defenders in the

82
00:03:21,280 --> 00:03:22,879
areas of ccd

83
00:03:22,879 --> 00:03:24,319
led us to uh

84
00:03:24,319 --> 00:03:27,280
to releasing the top 10 ccd security

85
00:03:27,280 --> 00:03:28,799
risks project

86
00:03:28,799 --> 00:03:29,760
it's

87
00:03:29,760 --> 00:03:32,640
a big document a 40-page document

88
00:03:32,640 --> 00:03:34,560
based on extensive research that you've

89
00:03:34,560 --> 00:03:36,799
done and discussions that we've made

90
00:03:36,799 --> 00:03:39,120
with some of the industries top experts

91
00:03:39,120 --> 00:03:40,959
are listing and detailing the top 10

92
00:03:40,959 --> 00:03:45,120
security risks in ccd environments

93
00:03:45,120 --> 00:03:46,720
and and this uh project after we

94
00:03:46,720 --> 00:03:48,080
released it it got some really good

95
00:03:48,080 --> 00:03:49,920
traction from security fellas from

96
00:03:49,920 --> 00:03:52,000
around the world and really helped our

97
00:03:52,000 --> 00:03:54,000
organizations to start protecting their

98
00:03:54,000 --> 00:03:56,799
ccd environments but as you all as you

99
00:03:56,799 --> 00:03:58,879
all know there's nothing like hacking on

100
00:03:58,879 --> 00:04:01,040
your own to actually understand how to

101
00:04:01,040 --> 00:04:03,840
defense against uh against uh attack

102
00:04:03,840 --> 00:04:04,799
path

103
00:04:04,799 --> 00:04:06,480
so this is why we created another

104
00:04:06,480 --> 00:04:12,119
project which is the csd go

105
00:04:18,880 --> 00:04:21,759
so as omar said the cicd gold project

106
00:04:21,759 --> 00:04:24,560
was created uh as a learning platform

107
00:04:24,560 --> 00:04:26,479
basically it's a ctf it's open source

108
00:04:26,479 --> 00:04:28,639
you can see the link right here

109
00:04:28,639 --> 00:04:30,160
to help people

110
00:04:30,160 --> 00:04:32,000
learn about cicd attacks try it

111
00:04:32,000 --> 00:04:33,680
themselves we have

112
00:04:33,680 --> 00:04:36,960
10 challenges currently in the ccd go

113
00:04:36,960 --> 00:04:39,280
they cover 8 of the top 10

114
00:04:39,280 --> 00:04:42,560
ccd security risks and we got really

115
00:04:42,560 --> 00:04:44,560
really good feedback from the community

116
00:04:44,560 --> 00:04:46,560
a lot of people have sold it solved it

117
00:04:46,560 --> 00:04:49,520
by now and we hope uh you will also try

118
00:04:49,520 --> 00:04:52,880
to solve it um as you can see rothenbaum

119
00:04:52,880 --> 00:04:55,759
and iron avital also help us in writing

120
00:04:55,759 --> 00:04:58,320
the project so let's see

121
00:04:58,320 --> 00:05:01,040
how it looks

122
00:05:04,560 --> 00:05:06,320
so this is the environment the whole

123
00:05:06,320 --> 00:05:08,880
project is based on docker containers

124
00:05:08,880 --> 00:05:10,800
we have these containers

125
00:05:10,800 --> 00:05:12,960
first one is a ctfd which is an open

126
00:05:12,960 --> 00:05:15,520
source used to manage ctf

127
00:05:15,520 --> 00:05:16,880
challenges

128
00:05:16,880 --> 00:05:19,199
you'll see it shortly we have gt which

129
00:05:19,199 --> 00:05:21,120
is a source code management system also

130
00:05:21,120 --> 00:05:22,240
open source

131
00:05:22,240 --> 00:05:24,639
looks similar to github it's very

132
00:05:24,639 --> 00:05:25,759
lightweight

133
00:05:25,759 --> 00:05:28,880
uh the repositories on gt are connected

134
00:05:28,880 --> 00:05:30,720
to jenkins pipelines

135
00:05:30,720 --> 00:05:34,000
jenkins also has a linux agent and the

136
00:05:34,000 --> 00:05:35,840
production environment is simulated by

137
00:05:35,840 --> 00:05:38,880
local stack which is an emulator to aws

138
00:05:38,880 --> 00:05:39,840
it

139
00:05:39,840 --> 00:05:42,240
it allows you to test stuff on aws

140
00:05:42,240 --> 00:05:45,039
locally and we have light httpd a small

141
00:05:45,039 --> 00:05:47,360
http server

142
00:05:47,360 --> 00:05:49,520
and one thing worth mentioning is that

143
00:05:49,520 --> 00:05:52,639
the whole project is configured as code

144
00:05:52,639 --> 00:05:55,199
this also helps people to contribute the

145
00:05:55,199 --> 00:05:57,120
project to the project easily you can

146
00:05:57,120 --> 00:05:59,520
easily make changes and we have tests

147
00:05:59,520 --> 00:06:00,880
for everything in the project to make

148
00:06:00,880 --> 00:06:03,680
sure everything is works as expected

149
00:06:03,680 --> 00:06:05,120
and last thing

150
00:06:05,120 --> 00:06:07,039
the project is inspired by alice in

151
00:06:07,039 --> 00:06:09,600
wonderland so you'll see some familiar

152
00:06:09,600 --> 00:06:11,919
names

153
00:06:15,039 --> 00:06:17,600
and what we are about to do today is to

154
00:06:17,600 --> 00:06:20,639
present our three attacks uh that

155
00:06:20,639 --> 00:06:23,280
attackers can uh can execute in a cdd

156
00:06:23,280 --> 00:06:26,400
environment um all of them are based on

157
00:06:26,400 --> 00:06:27,759
uh the research that we've done in the

158
00:06:27,759 --> 00:06:30,639
past on a use case that that we've seen

159
00:06:30,639 --> 00:06:32,479
in actual environments of customers that

160
00:06:32,479 --> 00:06:34,880
we've worked with and on wheel attacks

161
00:06:34,880 --> 00:06:36,400
that were published

162
00:06:36,400 --> 00:06:37,680
to the world

163
00:06:37,680 --> 00:06:39,280
and all of these challenges we're going

164
00:06:39,280 --> 00:06:42,720
to present them through the ccd goat

165
00:06:42,720 --> 00:06:44,080
project

166
00:06:44,080 --> 00:06:46,479
don't be afraid of spoilers it's just 3

167
00:06:46,479 --> 00:06:48,560
out of ten and soon we're gonna be soon

168
00:06:48,560 --> 00:06:50,240
we're gonna release additional uh

169
00:06:50,240 --> 00:06:52,000
challenges and in addition i'm pretty

170
00:06:52,000 --> 00:06:53,440
sure that it's gonna be fun enough for

171
00:06:53,440 --> 00:06:55,360
you to solve it even after you uh you'll

172
00:06:55,360 --> 00:06:58,639
see the the solutions today um and this

173
00:06:58,639 --> 00:06:59,919
is our

174
00:06:59,919 --> 00:07:02,080
this is our starting point uh we are

175
00:07:02,080 --> 00:07:04,800
attackers that obtained access to a user

176
00:07:04,800 --> 00:07:06,880
account in the organization

177
00:07:06,880 --> 00:07:09,840
that granted us a user account to the

178
00:07:09,840 --> 00:07:11,919
sem to the source code management system

179
00:07:11,919 --> 00:07:14,240
which is gt in this case we have access

180
00:07:14,240 --> 00:07:16,080
now to some of the repositories some

181
00:07:16,080 --> 00:07:17,520
with read permissions some we do i

182
00:07:17,520 --> 00:07:19,520
permissions and you also have basic read

183
00:07:19,520 --> 00:07:20,639
permissions

184
00:07:20,639 --> 00:07:22,400
to gen case

185
00:07:22,400 --> 00:07:24,560
now we do have some three challenging

186
00:07:24,560 --> 00:07:27,680
demos today so i need you all um

187
00:07:27,680 --> 00:07:29,440
to

188
00:07:29,440 --> 00:07:30,960
sorry it doesn't work i need you all to

189
00:07:30,960 --> 00:07:32,960
hold hands and pray with us for the

190
00:07:32,960 --> 00:07:35,199
democrats uh we even created an

191
00:07:35,199 --> 00:07:37,520
illustration of three goats on bentleys

192
00:07:37,520 --> 00:07:38,960
with folded hands praying to the

193
00:07:38,960 --> 00:07:41,199
demogods facing a big bronze left of

194
00:07:41,199 --> 00:07:43,039
statue in a mysterious temple

195
00:07:43,039 --> 00:07:44,800
thanks to the recent delhi invitation

196
00:07:44,800 --> 00:07:46,639
that i just received

197
00:07:46,639 --> 00:07:48,720
and let's start with our first attack

198
00:07:48,720 --> 00:07:50,479
for today

199
00:07:50,479 --> 00:07:53,280
okay guys can you hear me yeah okay so

200
00:07:53,280 --> 00:07:55,280
the first attack

201
00:07:55,280 --> 00:07:56,639
let's

202
00:07:56,639 --> 00:07:59,520
log into ctfd as you can see this is the

203
00:07:59,520 --> 00:08:01,120
the platform

204
00:08:01,120 --> 00:08:02,240
we have

205
00:08:02,240 --> 00:08:04,080
three categories of challenges according

206
00:08:04,080 --> 00:08:06,560
to difficulty and today we'll start with

207
00:08:06,560 --> 00:08:08,800
the caterpillar

208
00:08:08,800 --> 00:08:10,720
so as you can see you just have read

209
00:08:10,720 --> 00:08:12,479
permissions is that enough

210
00:08:12,479 --> 00:08:13,919
use your access to the wonderland

211
00:08:13,919 --> 00:08:16,319
caterpillar repository to steal the flag

212
00:08:16,319 --> 00:08:18,400
2 secret which is stored in the jenkins

213
00:08:18,400 --> 00:08:21,039
credential store

214
00:08:21,039 --> 00:08:23,599
let's make it bigger a bit okay

215
00:08:23,599 --> 00:08:25,360
so basically what we see here that we

216
00:08:25,360 --> 00:08:27,680
only have read permissions to this

217
00:08:27,680 --> 00:08:29,440
caterpillar repository and we need to

218
00:08:29,440 --> 00:08:30,720
steal

219
00:08:30,720 --> 00:08:33,120
the flag 2 secret that is stored on

220
00:08:33,120 --> 00:08:34,240
jenkins

221
00:08:34,240 --> 00:08:36,799
so let's go to

222
00:08:36,799 --> 00:08:38,320
the one dollar and organization we see

223
00:08:38,320 --> 00:08:39,679
that we have a

224
00:08:39,679 --> 00:08:41,519
public caterpillar project here we can

225
00:08:41,519 --> 00:08:42,880
see that the other ones are private this

226
00:08:42,880 --> 00:08:44,560
one is public

227
00:08:44,560 --> 00:08:47,040
and we can see that we have uh

228
00:08:47,040 --> 00:08:49,040
some code in the project

229
00:08:49,040 --> 00:08:51,600
but let's let's look at the jenkins file

230
00:08:51,600 --> 00:08:53,200
which is interesting for us so we can

231
00:08:53,200 --> 00:08:57,279
see here again you can see from the back

232
00:08:59,360 --> 00:09:00,720
so we can see here a very simple

233
00:09:00,720 --> 00:09:02,480
pipeline

234
00:09:02,480 --> 00:09:03,920
with some linting installing

235
00:09:03,920 --> 00:09:05,519
requirements and a very interesting

236
00:09:05,519 --> 00:09:06,640
stage

237
00:09:06,640 --> 00:09:08,880
the deploy stage which as you can as you

238
00:09:08,880 --> 00:09:12,000
can see can only run on the main branch

239
00:09:12,000 --> 00:09:13,839
so we have this stage that runs on the

240
00:09:13,839 --> 00:09:16,560
main branch and it uses credentials the

241
00:09:16,560 --> 00:09:19,279
flag 2 credentials that we want to steal

242
00:09:19,279 --> 00:09:21,920
and it uses them to authenticate

243
00:09:21,920 --> 00:09:24,959
to some remote server

244
00:09:24,959 --> 00:09:26,959
so just to remind you this is a public

245
00:09:26,959 --> 00:09:28,080
project

246
00:09:28,080 --> 00:09:29,600
we don't have any right permissions on

247
00:09:29,600 --> 00:09:31,600
it only read permissions and we want to

248
00:09:31,600 --> 00:09:34,399
influence it somehow to execute code of

249
00:09:34,399 --> 00:09:36,399
our choosing so the only possible thing

250
00:09:36,399 --> 00:09:38,560
for us to do is to try to fork the

251
00:09:38,560 --> 00:09:39,600
project

252
00:09:39,600 --> 00:09:41,440
and uh try to try to create a pull

253
00:09:41,440 --> 00:09:44,640
request hoping that as similar to other

254
00:09:44,640 --> 00:09:46,080
open source projects some kind of

255
00:09:46,080 --> 00:09:48,880
pipeline will will run on our new pull

256
00:09:48,880 --> 00:09:51,120
request and maybe we'll try to execute

257
00:09:51,120 --> 00:09:54,160
it execute code

258
00:09:54,160 --> 00:09:56,480
by doing that somehow

259
00:09:56,480 --> 00:09:58,080
so we created the pull request we can

260
00:09:58,080 --> 00:09:59,839
see it's on our user

261
00:09:59,839 --> 00:10:02,959
and let's try to modify

262
00:10:03,440 --> 00:10:06,399
the jenkins file

263
00:10:06,640 --> 00:10:11,560
with a malicious payload

264
00:10:19,760 --> 00:10:23,760
so what i'm doing here basically i'll uh

265
00:10:23,920 --> 00:10:26,480
i'll remove some unnecessary stages just

266
00:10:26,480 --> 00:10:31,000
to make the pipeline itself quicker

267
00:10:32,959 --> 00:10:33,839
and

268
00:10:33,839 --> 00:10:35,920
we'll run some initial reconnaissance

269
00:10:35,920 --> 00:10:37,920
basically we'll try to print the

270
00:10:37,920 --> 00:10:40,399
environment variables inside the

271
00:10:40,399 --> 00:10:43,040
job itself we'll also try to access the

272
00:10:43,040 --> 00:10:46,240
flag 2 secret and print it as a base64

273
00:10:46,240 --> 00:10:48,240
maybe we'll have access to it maybe no

274
00:10:48,240 --> 00:10:50,000
but maybe maybe not

275
00:10:50,000 --> 00:10:53,279
um and we'll encode the flag itself

276
00:10:53,279 --> 00:10:55,760
sorry postcode everything is okay had it

277
00:10:55,760 --> 00:10:56,959
a month ago

278
00:10:56,959 --> 00:10:58,079
um

279
00:10:58,079 --> 00:11:00,720
i'll try to print it as the base 64. uh

280
00:11:00,720 --> 00:11:03,279
to circumvent jenkins has a default

281
00:11:03,279 --> 00:11:05,600
mechanism that masks credentials that

282
00:11:05,600 --> 00:11:07,920
are accidentally printed in the console

283
00:11:07,920 --> 00:11:10,480
output log so we will just print it as

284
00:11:10,480 --> 00:11:13,360
basics to 64 so we can get the value

285
00:11:13,360 --> 00:11:15,839
itself

286
00:11:19,120 --> 00:11:21,279
so i'm committing the changes and i'm

287
00:11:21,279 --> 00:11:23,120
creating a new pull request to the

288
00:11:23,120 --> 00:11:26,760
original repository

289
00:11:30,959 --> 00:11:34,560
and if we go back to jenkins

290
00:11:37,920 --> 00:11:39,839
we can see here that we have many

291
00:11:39,839 --> 00:11:41,519
pipelines on jenkins

292
00:11:41,519 --> 00:11:43,519
two seem relevant to caterpillar we have

293
00:11:43,519 --> 00:11:45,040
the test

294
00:11:45,040 --> 00:11:47,519
and the prod

295
00:11:47,519 --> 00:11:49,760
pipelines

296
00:11:49,760 --> 00:11:51,600
we can't see much on those pipelines we

297
00:11:51,600 --> 00:11:53,600
have because we have really

298
00:11:53,600 --> 00:11:55,600
basic read permissions

299
00:11:55,600 --> 00:11:59,120
but we can try to scan for changes

300
00:11:59,120 --> 00:12:01,680
and we see that

301
00:12:01,680 --> 00:12:04,920
once again

302
00:12:14,959 --> 00:12:17,120
we can see that it did detect our pull

303
00:12:17,120 --> 00:12:18,959
request and it ran a pipeline we can see

304
00:12:18,959 --> 00:12:20,079
that the

305
00:12:20,079 --> 00:12:21,680
pipeline failed

306
00:12:21,680 --> 00:12:23,839
which doesn't look good but if we look

307
00:12:23,839 --> 00:12:25,600
at the pipeline itself

308
00:12:25,600 --> 00:12:27,440
we can see that it did print all the

309
00:12:27,440 --> 00:12:29,680
environment variables that we've wanted

310
00:12:29,680 --> 00:12:31,279
and we can see that the pipeline itself

311
00:12:31,279 --> 00:12:32,639
failed

312
00:12:32,639 --> 00:12:34,480
because it didn't have access to the

313
00:12:34,480 --> 00:12:37,120
flag to secret that we tried to access

314
00:12:37,120 --> 00:12:39,760
but the step before that did run we have

315
00:12:39,760 --> 00:12:42,000
the environment variables and if we look

316
00:12:42,000 --> 00:12:43,760
at the environment variables

317
00:12:43,760 --> 00:12:45,040
we have

318
00:12:45,040 --> 00:12:47,760
one interesting variable

319
00:12:47,760 --> 00:12:50,560
make it bigger for

320
00:12:50,839 --> 00:12:54,240
you uh we have the gt token so we can

321
00:12:54,240 --> 00:12:56,320
assume this token is an access token to

322
00:12:56,320 --> 00:12:58,399
the kitty server to the source code

323
00:12:58,399 --> 00:13:00,959
which jackies uses in order to clone the

324
00:13:00,959 --> 00:13:04,000
repository to the jenkins agent and run

325
00:13:04,000 --> 00:13:06,959
the old pipeline using that repository

326
00:13:06,959 --> 00:13:09,120
so we'll try to take this token and see

327
00:13:09,120 --> 00:13:11,519
what permissions any special permissions

328
00:13:11,519 --> 00:13:13,360
that it has

329
00:13:13,360 --> 00:13:17,240
so we'll clone the repository

330
00:13:32,560 --> 00:13:34,720
ok so uh so we have the repository we

331
00:13:34,720 --> 00:13:37,519
cloned it we cd into it and what we'll

332
00:13:37,519 --> 00:13:39,760
try to do now is we'll try to commit

333
00:13:39,760 --> 00:13:41,279
something to the main branch maybe this

334
00:13:41,279 --> 00:13:44,639
token has permissions on the main branch

335
00:13:44,639 --> 00:13:46,880
um so what we'll try to do same thing as

336
00:13:46,880 --> 00:13:48,560
before we'll just delete some stages to

337
00:13:48,560 --> 00:13:49,839
make things

338
00:13:49,839 --> 00:13:52,480
uh run quicker

339
00:13:52,480 --> 00:13:54,320
so we'll delete all the unnecessary

340
00:13:54,320 --> 00:13:56,320
stages

341
00:13:56,320 --> 00:13:58,959
we leave only the deploy stage

342
00:13:58,959 --> 00:13:59,839
and

343
00:13:59,839 --> 00:14:02,959
same as before we'll try to run this in

344
00:14:02,959 --> 00:14:05,040
order to access the

345
00:14:05,040 --> 00:14:07,920
the flag itself

346
00:14:13,839 --> 00:14:16,560
and let's commit the changes get all is

347
00:14:16,560 --> 00:14:19,518
an alias that

348
00:14:24,880 --> 00:14:27,199
okay guitar is an alias that we made

349
00:14:27,199 --> 00:14:29,519
just to do a git add git commit and git

350
00:14:29,519 --> 00:14:31,519
push and we see that we successfully

351
00:14:31,519 --> 00:14:34,320
pushed our new code as you can see here

352
00:14:34,320 --> 00:14:36,399
to the main branch so that means that

353
00:14:36,399 --> 00:14:38,639
the token that we've used did have write

354
00:14:38,639 --> 00:14:40,639
permissions on the main branch on the

355
00:14:40,639 --> 00:14:42,560
repository and we successfully pushed

356
00:14:42,560 --> 00:14:46,480
our changes if you go back to jenkins

357
00:14:46,480 --> 00:14:48,720
i'll make it shorter for you the

358
00:14:48,720 --> 00:14:51,040
caterpillar test project won't run on it

359
00:14:51,040 --> 00:14:52,160
because the

360
00:14:52,160 --> 00:14:54,720
the other one the pod is the one that's

361
00:14:54,720 --> 00:14:56,639
running on the main branch and not on

362
00:14:56,639 --> 00:15:00,079
pull requests and we'll scan for changes

363
00:15:00,079 --> 00:15:01,760
and we see

364
00:15:01,760 --> 00:15:03,440
that the main branch here trigger the

365
00:15:03,440 --> 00:15:04,959
pipeline

366
00:15:04,959 --> 00:15:06,720
and if we look at the

367
00:15:06,720 --> 00:15:09,120
output

368
00:15:09,120 --> 00:15:12,160
we can see here the flag that we try to

369
00:15:12,160 --> 00:15:14,560
print

370
00:15:14,800 --> 00:15:19,120
and let's put it inside ctfd

371
00:15:21,120 --> 00:15:24,000
oh sorry yeah it's a basic c4 let's

372
00:15:24,000 --> 00:15:27,399
decode it

373
00:15:31,519 --> 00:15:34,560
yeah so this is the flag

374
00:15:37,920 --> 00:15:39,759
and we're correct we solved the first

375
00:15:39,759 --> 00:15:41,759
challenge

376
00:15:41,759 --> 00:15:43,279
yeah let's go

377
00:15:43,279 --> 00:15:44,959
first challenge

378
00:15:44,959 --> 00:15:46,560
so let's talk a bit let's talk a bit

379
00:15:46,560 --> 00:15:49,600
about what we've seen here

380
00:15:49,600 --> 00:15:52,560
so in this challenge

381
00:15:53,519 --> 00:15:55,440
in this challenge we performed an attack

382
00:15:55,440 --> 00:15:57,279
that's called ppe poison pipeline

383
00:15:57,279 --> 00:15:59,360
execution this attack has three

384
00:15:59,360 --> 00:16:02,160
variations direct indirect and public

385
00:16:02,160 --> 00:16:04,079
today we perform the public one and

386
00:16:04,079 --> 00:16:06,399
we'll only talk about it

387
00:16:06,399 --> 00:16:07,519
so

388
00:16:07,519 --> 00:16:10,000
to explain 3pe attack we'll see an

389
00:16:10,000 --> 00:16:11,279
environment similar to the one that

390
00:16:11,279 --> 00:16:14,880
we've seen on the our project itself

391
00:16:14,880 --> 00:16:16,560
and you can see that we have a public

392
00:16:16,560 --> 00:16:19,199
repository that that is connected to a

393
00:16:19,199 --> 00:16:22,160
jenkins pipeline which deploys some

394
00:16:22,160 --> 00:16:24,720
artifacts to aws which of course holds

395
00:16:24,720 --> 00:16:27,120
our organization's crown jewels

396
00:16:27,120 --> 00:16:29,440
so because we only have read permissions

397
00:16:29,440 --> 00:16:30,959
the only thing we can do to influence

398
00:16:30,959 --> 00:16:33,120
the project and to poison it is to form

399
00:16:33,120 --> 00:16:34,720
the repository

400
00:16:34,720 --> 00:16:36,800
and try to modify the jenkins file

401
00:16:36,800 --> 00:16:39,519
hoping that the project is configured in

402
00:16:39,519 --> 00:16:41,920
a way that runs our malicious jenkins

403
00:16:41,920 --> 00:16:42,800
file

404
00:16:42,800 --> 00:16:44,880
from the fork and not the jenkins file

405
00:16:44,880 --> 00:16:46,800
on the repository itself a good

406
00:16:46,800 --> 00:16:48,959
configuration

407
00:16:48,959 --> 00:16:50,560
would have been to run the jackets file

408
00:16:50,560 --> 00:16:52,639
for the let's say the main branch of the

409
00:16:52,639 --> 00:16:54,639
original repository and not run our

410
00:16:54,639 --> 00:16:57,120
jenkins file our malicious jenkins file

411
00:16:57,120 --> 00:16:59,920
that comes from the pull request

412
00:16:59,920 --> 00:17:02,000
so what we try to do is to create a pull

413
00:17:02,000 --> 00:17:03,360
request

414
00:17:03,360 --> 00:17:05,039
and let's see an example for a different

415
00:17:05,039 --> 00:17:07,199
junkies file so we can see here we have

416
00:17:07,199 --> 00:17:09,439
two stages and we can see that the build

417
00:17:09,439 --> 00:17:12,799
stage uses aws credentials to run make

418
00:17:12,799 --> 00:17:14,480
build and make clean

419
00:17:14,480 --> 00:17:17,119
and to perform an attack we'll

420
00:17:17,119 --> 00:17:19,119
try to get the environment variables

421
00:17:19,119 --> 00:17:22,079
from the pipeline itself and in this

422
00:17:22,079 --> 00:17:23,599
attack we'll send them to a server

423
00:17:23,599 --> 00:17:25,280
controlled by us let's say if we don't

424
00:17:25,280 --> 00:17:27,599
have access to the jenkins console or

425
00:17:27,599 --> 00:17:30,080
this is some kind of a private project

426
00:17:30,080 --> 00:17:34,320
we'll try to send it over the internet

427
00:17:34,480 --> 00:17:35,360
so

428
00:17:35,360 --> 00:17:37,520
so what what what what we've done here

429
00:17:37,520 --> 00:17:39,039
basically we poisoned the junkies you

430
00:17:39,039 --> 00:17:41,039
can see it by the evil jenkins that you

431
00:17:41,039 --> 00:17:43,360
see on the right side

432
00:17:43,360 --> 00:17:44,960
and jenkins

433
00:17:44,960 --> 00:17:46,480
executed the code

434
00:17:46,480 --> 00:17:48,160
that we gave it

435
00:17:48,160 --> 00:17:50,960
and it sent us it sent us our credential

436
00:17:50,960 --> 00:17:53,919
that we wanted to steal

437
00:17:53,919 --> 00:17:55,840
so what we what can we learn from this

438
00:17:55,840 --> 00:17:57,039
scenario

439
00:17:57,039 --> 00:17:59,039
the the first issue was that secrets

440
00:17:59,039 --> 00:18:01,520
were exposed to prs from forks this is

441
00:18:01,520 --> 00:18:03,360
generally a better idea and it's

442
00:18:03,360 --> 00:18:05,360
recommended to never do it

443
00:18:05,360 --> 00:18:07,679
in most modern ci systems it's disabled

444
00:18:07,679 --> 00:18:09,039
by default

445
00:18:09,039 --> 00:18:10,880
but it's some not maybe someone changed

446
00:18:10,880 --> 00:18:13,600
the configuration so the solution here

447
00:18:13,600 --> 00:18:16,080
is to prevent access to uh secrets from

448
00:18:16,080 --> 00:18:17,919
forks

449
00:18:17,919 --> 00:18:19,840
next one is that the access token the

450
00:18:19,840 --> 00:18:21,679
gtx token that we've seen in the

451
00:18:21,679 --> 00:18:23,200
environment variables

452
00:18:23,200 --> 00:18:25,919
uh was configured on the agent itself i

453
00:18:25,919 --> 00:18:27,280
can tell you this because i know the

454
00:18:27,280 --> 00:18:30,480
configuration behind the scene

455
00:18:30,480 --> 00:18:32,720
but this is a common misconfiguration

456
00:18:32,720 --> 00:18:34,240
that we've seen

457
00:18:34,240 --> 00:18:36,559
people configure a secret on the agent

458
00:18:36,559 --> 00:18:38,799
itself as environment variable and not

459
00:18:38,799 --> 00:18:41,200
for the job for the specific job to make

460
00:18:41,200 --> 00:18:44,080
life easier but this allows any jobs any

461
00:18:44,080 --> 00:18:46,880
job that runs on that agent to access

462
00:18:46,880 --> 00:18:49,919
that secret environment variable and the

463
00:18:49,919 --> 00:18:51,440
solution here is to limit access to

464
00:18:51,440 --> 00:18:53,919
secrets as much as much as possible

465
00:18:53,919 --> 00:18:55,760
there are many ways to limit access for

466
00:18:55,760 --> 00:18:57,760
secrets

467
00:18:57,760 --> 00:18:59,919
and the third issue was that the access

468
00:18:59,919 --> 00:19:01,600
token had the right permissions the

469
00:19:01,600 --> 00:19:03,760
project itself didn't need right

470
00:19:03,760 --> 00:19:06,320
permissions on the repository and it was

471
00:19:06,320 --> 00:19:08,799
unnecessary so solution here is to limit

472
00:19:08,799 --> 00:19:11,360
the permissions uh to only

473
00:19:11,360 --> 00:19:13,679
the permissions that are needed

474
00:19:13,679 --> 00:19:14,559
and

475
00:19:14,559 --> 00:19:15,360
if

476
00:19:15,360 --> 00:19:17,919
in if in any scenario you do need right

477
00:19:17,919 --> 00:19:20,160
permissions maybe think you through and

478
00:19:20,160 --> 00:19:21,679
think if you really need

479
00:19:21,679 --> 00:19:24,559
those permissions try to avoid it last

480
00:19:24,559 --> 00:19:26,640
issue was that no reviews were required

481
00:19:26,640 --> 00:19:28,160
before pushing to the main branch

482
00:19:28,160 --> 00:19:30,320
basically the main branch wasn't

483
00:19:30,320 --> 00:19:32,480
protected by any branch protection rules

484
00:19:32,480 --> 00:19:35,440
and we can push to it directly maybe the

485
00:19:35,440 --> 00:19:37,520
maintainers of the project thought that

486
00:19:37,520 --> 00:19:39,120
only are they are the only ones that

487
00:19:39,120 --> 00:19:41,280
have right permissions on the project so

488
00:19:41,280 --> 00:19:43,679
they don't need any protections but as

489
00:19:43,679 --> 00:19:46,080
you as you see we did get access right

490
00:19:46,080 --> 00:19:48,559
access to that project and we could push

491
00:19:48,559 --> 00:19:50,320
any code we wanted without any pull

492
00:19:50,320 --> 00:19:52,720
request reviews so the solution for this

493
00:19:52,720 --> 00:19:53,600
one

494
00:19:53,600 --> 00:19:55,919
is configure branch protection rules on

495
00:19:55,919 --> 00:19:58,160
all imported branches they require at

496
00:19:58,160 --> 00:20:02,799
least one reviewer two is the best

497
00:20:02,799 --> 00:20:04,640
and that's it for the first

498
00:20:04,640 --> 00:20:07,640
scenario

499
00:20:08,720 --> 00:20:13,520
okay uh moving on to the second attack

500
00:20:13,520 --> 00:20:15,919
let's see let's see what it is

501
00:20:15,919 --> 00:20:18,080
it's called the mock title challenge uh

502
00:20:18,080 --> 00:20:20,080
in this one we need to our objective is

503
00:20:20,080 --> 00:20:22,400
to push code to the main branch of the

504
00:20:22,400 --> 00:20:24,559
mock of the mocktail teleport and we

505
00:20:24,559 --> 00:20:26,159
need to do what's needed uh to steal

506
00:20:26,159 --> 00:20:28,960
deflect and credentials uh uh which is

507
00:20:28,960 --> 00:20:31,280
stored in the jenkins credential store

508
00:20:31,280 --> 00:20:33,200
uh so let's let's have a look at this

509
00:20:33,200 --> 00:20:36,320
smok telltale repository

510
00:20:36,320 --> 00:20:37,760
it's right here you can see that it's a

511
00:20:37,760 --> 00:20:40,480
private repository uh where is attackers

512
00:20:40,480 --> 00:20:42,960
that uh reach out uh to you know to an

513
00:20:42,960 --> 00:20:45,120
scm organization for the first time uh

514
00:20:45,120 --> 00:20:46,880
or to a specific repository we'll try

515
00:20:46,880 --> 00:20:49,360
you probably want to check out uh what

516
00:20:49,360 --> 00:20:50,240
our

517
00:20:50,240 --> 00:20:52,559
what permissions we have in our hands uh

518
00:20:52,559 --> 00:20:54,000
i can save you some times letting you

519
00:20:54,000 --> 00:20:55,280
know that this time we have right

520
00:20:55,280 --> 00:20:56,400
permission

521
00:20:56,400 --> 00:20:59,919
on this private repository um and our

522
00:20:59,919 --> 00:21:01,679
objective again is to push code to the

523
00:21:01,679 --> 00:21:03,840
main branch i can save you some time and

524
00:21:03,840 --> 00:21:05,440
letting you know that there are branch

525
00:21:05,440 --> 00:21:07,200
protection rules in place on the main

526
00:21:07,200 --> 00:21:09,120
branch otherwise this challenge would be

527
00:21:09,120 --> 00:21:11,600
uh too obvious and boring uh so we can't

528
00:21:11,600 --> 00:21:13,360
directly push code to the main branch i

529
00:21:13,360 --> 00:21:16,000
don't even want to try it uh what we can

530
00:21:16,000 --> 00:21:18,640
try and do is uh something similar to

531
00:21:18,640 --> 00:21:21,360
what asi just uh presented and this is

532
00:21:21,360 --> 00:21:24,480
um to uh create a pull request maybe uh

533
00:21:24,480 --> 00:21:26,240
to that with our own malicious jenkins

534
00:21:26,240 --> 00:21:28,720
file try to uh execute malicious code in

535
00:21:28,720 --> 00:21:31,039
the pipeline uh we can see that there is

536
00:21:31,039 --> 00:21:33,440
a jenkins file here indicating that it's

537
00:21:33,440 --> 00:21:35,760
probably linked with jenkins uh we can

538
00:21:35,760 --> 00:21:38,080
see that there's one stage here

539
00:21:38,080 --> 00:21:40,080
called pr checks

540
00:21:40,080 --> 00:21:42,720
uh only one stage in the entire pipeline

541
00:21:42,720 --> 00:21:45,360
uh there's lots of logic here

542
00:21:45,360 --> 00:21:47,679
um we can see for example that there's a

543
00:21:47,679 --> 00:21:50,640
viable called prid being populated uh

544
00:21:50,640 --> 00:21:52,559
with the pull request

545
00:21:52,559 --> 00:21:55,520
that the trigger the pipeline um what i

546
00:21:55,520 --> 00:21:58,960
can see here on jenkins is indeed a

547
00:21:58,960 --> 00:22:01,280
pipeline for mock telltale

548
00:22:01,280 --> 00:22:02,799
i can see that it runs on the main

549
00:22:02,799 --> 00:22:05,840
branch and on pull request so it is

550
00:22:05,840 --> 00:22:07,919
possible theoretically that i can create

551
00:22:07,919 --> 00:22:09,840
a pull request modify the jenkins file

552
00:22:09,840 --> 00:22:12,720
and execute malicious code in the ci

553
00:22:12,720 --> 00:22:15,039
let's check if it works or not

554
00:22:15,039 --> 00:22:16,799
so we'll head back to the repository and

555
00:22:16,799 --> 00:22:19,039
we modify it quickly

556
00:22:19,039 --> 00:22:21,440
the jenkins file

557
00:22:21,440 --> 00:22:22,960
i prepared

558
00:22:22,960 --> 00:22:24,640
i prepared it here

559
00:22:24,640 --> 00:22:28,559
it's a simple command that loads

560
00:22:28,559 --> 00:22:30,720
flag and tries to print it maybe this

561
00:22:30,720 --> 00:22:32,480
will solve the challenge

562
00:22:32,480 --> 00:22:35,280
let's have a look

563
00:22:37,200 --> 00:22:39,360
okay so i'll quickly quickly push this

564
00:22:39,360 --> 00:22:41,600
code to a new branch and create a pull

565
00:22:41,600 --> 00:22:43,600
request out of it

566
00:22:43,600 --> 00:22:45,039
this should trigger a pipeline because

567
00:22:45,039 --> 00:22:47,039
we saw that the pipeline trigger is

568
00:22:47,039 --> 00:22:49,600
triggered by pull requests

569
00:22:49,600 --> 00:22:51,600
i'll scan it

570
00:22:51,600 --> 00:22:54,000
and let's see we can see that it indeed

571
00:22:54,000 --> 00:22:55,600
it was indeed triggered

572
00:22:55,600 --> 00:22:58,879
let's see what happens inside

573
00:23:00,799 --> 00:23:02,640
okay so there it is uh there's the

574
00:23:02,640 --> 00:23:04,960
console output of the pipeline that uh

575
00:23:04,960 --> 00:23:08,559
that was that just uh finished one i

576
00:23:08,559 --> 00:23:11,440
can't find my flag here

577
00:23:11,440 --> 00:23:14,559
and also i can find lots of logic here

578
00:23:14,559 --> 00:23:16,640
but my jenkins file was pretty simple

579
00:23:16,640 --> 00:23:19,039
white it just loaded the credentials and

580
00:23:19,039 --> 00:23:21,440
printed it to the console output but

581
00:23:21,440 --> 00:23:24,159
what i see here is i if you remember we

582
00:23:24,159 --> 00:23:26,159
saw that there's a variable called pr id

583
00:23:26,159 --> 00:23:28,159
being populated that seems like the

584
00:23:28,159 --> 00:23:30,559
logic of the jenkins file that we just

585
00:23:30,559 --> 00:23:32,799
modified right not our own malicious

586
00:23:32,799 --> 00:23:35,280
jenkins file meaning that this pipeline

587
00:23:35,280 --> 00:23:37,200
when running on pull requests it doesn't

588
00:23:37,200 --> 00:23:38,799
take the modified jenkins file out of

589
00:23:38,799 --> 00:23:41,520
the pull quest but it always uses the uh

590
00:23:41,520 --> 00:23:43,679
jenkins file from the main branch which

591
00:23:43,679 --> 00:23:46,799
is protected meaning i can't execute a

592
00:23:46,799 --> 00:23:50,080
pp attack as as he just just explained

593
00:23:50,080 --> 00:23:52,000
and i need to look for another path uh

594
00:23:52,000 --> 00:23:54,240
to push my code to the main branch and

595
00:23:54,240 --> 00:23:57,600
um and to access deflect and secret uh

596
00:23:57,600 --> 00:23:59,120
so let's have a look again at the

597
00:23:59,120 --> 00:24:01,360
jenkins file and find this another path

598
00:24:01,360 --> 00:24:03,520
that we need um

599
00:24:03,520 --> 00:24:05,360
okay uh so this is the jenkins file

600
00:24:05,360 --> 00:24:06,240
again

601
00:24:06,240 --> 00:24:08,400
i'll make it a bit bigger uh we can see

602
00:24:08,400 --> 00:24:10,799
that it loads our credentials named mock

603
00:24:10,799 --> 00:24:13,120
turtle token sounds interesting but we

604
00:24:13,120 --> 00:24:15,120
don't really know what this is yet and

605
00:24:15,120 --> 00:24:18,559
inside it's a bit messy now it's better

606
00:24:18,559 --> 00:24:20,400
three small but only only this way

607
00:24:20,400 --> 00:24:21,760
you'll see it uh

608
00:24:21,760 --> 00:24:24,080
properly like the flow we can see lots

609
00:24:24,080 --> 00:24:26,400
of logic here but what we mainly see is

610
00:24:26,400 --> 00:24:28,640
uh four if conditions

611
00:24:28,640 --> 00:24:30,799
uh the first three of them

612
00:24:30,799 --> 00:24:32,559
check for some conditions and then they

613
00:24:32,559 --> 00:24:36,000
populate a variables named check one uh

614
00:24:36,000 --> 00:24:39,200
check two and check three with boolean

615
00:24:39,200 --> 00:24:42,400
of uh boolean values uh if they are if

616
00:24:42,400 --> 00:24:44,400
these conditions are met then there is

617
00:24:44,400 --> 00:24:47,440
the last condition checking if all these

618
00:24:47,440 --> 00:24:50,000
three first conditions are met uh this

619
00:24:50,000 --> 00:24:52,559
command would run let's check it let's

620
00:24:52,559 --> 00:24:54,480
check what it what it does so it's

621
00:24:54,480 --> 00:24:57,200
basically a kerala require a cal command

622
00:24:57,200 --> 00:25:00,080
sending a post request to the gt api

623
00:25:00,080 --> 00:25:01,760
back to the source control and it

624
00:25:01,760 --> 00:25:04,080
reaches the pull request

625
00:25:04,080 --> 00:25:05,760
merge endpoints

626
00:25:05,760 --> 00:25:08,000
uh it sends also the pull request id

627
00:25:08,000 --> 00:25:09,279
it's the pull request that triggered

628
00:25:09,279 --> 00:25:11,120
this this pipeline that sends this

629
00:25:11,120 --> 00:25:12,640
request

630
00:25:12,640 --> 00:25:16,000
and this action is what sent uh do merge

631
00:25:16,000 --> 00:25:18,159
now i'm not an expert in the gidi api

632
00:25:18,159 --> 00:25:19,679
i'm sure that you're not as well but i'm

633
00:25:19,679 --> 00:25:21,120
pretty sure that if it reaches the pull

634
00:25:21,120 --> 00:25:23,200
quest merge api endpoint with a post

635
00:25:23,200 --> 00:25:26,159
request taxing um asking to merge to

636
00:25:26,159 --> 00:25:28,640
merge it it's probably uh an automotive

637
00:25:28,640 --> 00:25:31,360
feature white asking to uh automatically

638
00:25:31,360 --> 00:25:33,039
merge the pull request that triggered

639
00:25:33,039 --> 00:25:36,559
the pipeline um so to summarize it all

640
00:25:36,559 --> 00:25:38,640
we have three conditions in the pipeline

641
00:25:38,640 --> 00:25:40,480
triggered by pull request and if they

642
00:25:40,480 --> 00:25:43,440
are all they are all met um these pull

643
00:25:43,440 --> 00:25:46,080
quests uh merge this uh pipeline merges

644
00:25:46,080 --> 00:25:48,000
this bullet quest automatically into the

645
00:25:48,000 --> 00:25:50,559
main branch now this sounds exactly like

646
00:25:50,559 --> 00:25:53,039
what we need uh but we do need to find a

647
00:25:53,039 --> 00:25:55,520
way to meet all these three conditions

648
00:25:55,520 --> 00:25:57,840
so our pull request would uh would be

649
00:25:57,840 --> 00:25:59,440
merged automatically so let's have a

650
00:25:59,440 --> 00:26:02,080
look at its contents i will start from

651
00:26:02,080 --> 00:26:04,400
the from this third uh if condition

652
00:26:04,400 --> 00:26:05,600
because it's the easiest one to

653
00:26:05,600 --> 00:26:07,200
understand uh it's pretty

654
00:26:07,200 --> 00:26:08,559
straightforward

655
00:26:08,559 --> 00:26:10,960
this is it uh it runs the git div

656
00:26:10,960 --> 00:26:12,960
command which uh

657
00:26:12,960 --> 00:26:14,320
checks the differences between the pull

658
00:26:14,320 --> 00:26:17,039
request and the target branch uh in this

659
00:26:17,039 --> 00:26:19,279
case the main branch

660
00:26:19,279 --> 00:26:22,000
and it only uh presents the the names uh

661
00:26:22,000 --> 00:26:24,799
of the files that were changed

662
00:26:24,799 --> 00:26:27,120
and it looks for a file named version uh

663
00:26:27,120 --> 00:26:29,039
so if i'll head back uh to the

664
00:26:29,039 --> 00:26:33,919
repository files uh i will see

665
00:26:34,640 --> 00:26:36,400
i will see a file i will see a file

666
00:26:36,400 --> 00:26:39,200
named version which is right here it's

667
00:26:39,200 --> 00:26:41,440
pretty simple pretty straightforward a

668
00:26:41,440 --> 00:26:44,320
simple version all i need to do is to

669
00:26:44,320 --> 00:26:46,159
modify this file in order to meet the

670
00:26:46,159 --> 00:26:47,520
third conditions

671
00:26:47,520 --> 00:26:49,440
out of the three conditions that i need

672
00:26:49,440 --> 00:26:51,760
to meet okay pretty straightforward

673
00:26:51,760 --> 00:26:53,600
let's head back and see the second

674
00:26:53,600 --> 00:26:54,960
condition

675
00:26:54,960 --> 00:26:57,120
so the second condition

676
00:26:57,120 --> 00:26:59,600
this is it sorry for zooming out uh only

677
00:26:59,600 --> 00:27:02,080
this way it looks uh properly

678
00:27:02,080 --> 00:27:04,080
okay so this second condition is

679
00:27:04,080 --> 00:27:06,080
actually built out of two conditions uh

680
00:27:06,080 --> 00:27:08,720
two conditions first one uh counts the

681
00:27:08,720 --> 00:27:11,120
number of new line characters in the

682
00:27:11,120 --> 00:27:13,039
version file and checks that there are

683
00:27:13,039 --> 00:27:15,279
zero characters meaning there's only one

684
00:27:15,279 --> 00:27:17,279
line in the version file as we've just

685
00:27:17,279 --> 00:27:18,880
seen it make sure that we didn't add any

686
00:27:18,880 --> 00:27:20,960
new lines so we moved the existing light

687
00:27:20,960 --> 00:27:23,039
out of the version and the second part

688
00:27:23,039 --> 00:27:24,960
uh make sure it verifies that the

689
00:27:24,960 --> 00:27:27,279
structure of the version stays the same

690
00:27:27,279 --> 00:27:28,960
three octets with one or two numbers

691
00:27:28,960 --> 00:27:31,039
each we can easily meet this condition

692
00:27:31,039 --> 00:27:32,640
right all we need to do is to modify the

693
00:27:32,640 --> 00:27:34,799
version file and to keep its structure

694
00:27:34,799 --> 00:27:36,799
pretty straightforward okay moving on to

695
00:27:36,799 --> 00:27:38,559
the first condition

696
00:27:38,559 --> 00:27:40,080
uh this one

697
00:27:40,080 --> 00:27:43,200
checks that uh these two variables qtp

698
00:27:43,200 --> 00:27:46,080
and git m are equal let's see how they

699
00:27:46,080 --> 00:27:49,039
are evaluated

700
00:27:49,039 --> 00:27:50,880
make it uh bigger yeah okay i'll try

701
00:27:50,880 --> 00:27:52,320
even though it will uh

702
00:27:52,320 --> 00:27:55,600
look pretty crappy like that but uh

703
00:27:55,600 --> 00:27:58,559
it's better than nothing okay

704
00:27:58,559 --> 00:28:00,000
okay

705
00:28:00,000 --> 00:28:02,720
so what you can see here is that uh we

706
00:28:02,720 --> 00:28:05,120
have a variable called kit p

707
00:28:05,120 --> 00:28:07,279
uh which runs git diff again checking

708
00:28:07,279 --> 00:28:08,720
the differences between the pulley quest

709
00:28:08,720 --> 00:28:11,279
and the main branch um and it takes all

710
00:28:11,279 --> 00:28:13,840
of the rows that were added as part of

711
00:28:13,840 --> 00:28:16,080
the pull request from that it it takes

712
00:28:16,080 --> 00:28:18,399
only the all the lines that were editory

713
00:28:18,399 --> 00:28:20,240
from there it takes only the words that

714
00:28:20,240 --> 00:28:23,279
were added and removing uh uh redundant

715
00:28:23,279 --> 00:28:24,320
spaces

716
00:28:24,320 --> 00:28:26,960
uh the next variable git m which would

717
00:28:26,960 --> 00:28:30,640
be uh uh equal to git p uh does the same

718
00:28:30,640 --> 00:28:33,120
but for removed words so basically what

719
00:28:33,120 --> 00:28:35,760
this condition does is to counts or to

720
00:28:35,760 --> 00:28:37,120
count all of the words that were added

721
00:28:37,120 --> 00:28:38,399
the ones that were removed and to make

722
00:28:38,399 --> 00:28:41,279
sure that uh we didn't add uh or removed

723
00:28:41,279 --> 00:28:43,039
any new words as part of our pull

724
00:28:43,039 --> 00:28:44,399
request now

725
00:28:44,399 --> 00:28:45,840
as the second third conditions are

726
00:28:45,840 --> 00:28:47,440
really easy to meet this one is a bit

727
00:28:47,440 --> 00:28:49,679
more challenging right uh if we add our

728
00:28:49,679 --> 00:28:52,240
payload uh it will add some new code

729
00:28:52,240 --> 00:28:54,159
into the pull request and it won't

730
00:28:54,159 --> 00:28:55,919
automatically merge our pull request so

731
00:28:55,919 --> 00:28:58,320
we need some way to bypass this

732
00:28:58,320 --> 00:29:00,000
condition but

733
00:29:00,000 --> 00:29:01,919
if you think of it this condition is

734
00:29:01,919 --> 00:29:03,840
pretty naive right it just checks the

735
00:29:03,840 --> 00:29:05,520
words that were added and the ones that

736
00:29:05,520 --> 00:29:07,600
were removed and make sure that they are

737
00:29:07,600 --> 00:29:10,080
balanced but what we can do if we add

738
00:29:10,080 --> 00:29:12,399
around i don't know 14 words in our

739
00:29:12,399 --> 00:29:13,520
payload

740
00:29:13,520 --> 00:29:16,000
maybe we can simply remove 14 other

741
00:29:16,000 --> 00:29:17,840
words from and other files you know in a

742
00:29:17,840 --> 00:29:20,320
pull quest right maybe this will work so

743
00:29:20,320 --> 00:29:22,720
let's try it out uh by the way i know it

744
00:29:22,720 --> 00:29:25,120
sounds naive but we didn't invent this

745
00:29:25,120 --> 00:29:27,279
logic we found it on stack overflow and

746
00:29:27,279 --> 00:29:29,039
it's a pretty pretty popular answer so

747
00:29:29,039 --> 00:29:30,480
uh

748
00:29:30,480 --> 00:29:32,399
okay so let's see how we can take

749
00:29:32,399 --> 00:29:34,320
advantage of it

750
00:29:34,320 --> 00:29:39,120
so we have a mock detail repo here

751
00:29:39,279 --> 00:29:40,960
what we can do

752
00:29:40,960 --> 00:29:43,039
again we need to modify the version file

753
00:29:43,039 --> 00:29:44,880
and keep the structure as is that's

754
00:29:44,880 --> 00:29:47,120
pretty straightforward and and we need

755
00:29:47,120 --> 00:29:49,520
to add our payload to the jenkins file

756
00:29:49,520 --> 00:29:52,080
uh that will uh load flag 10. this is

757
00:29:52,080 --> 00:29:54,720
our objective again i remind you uh and

758
00:29:54,720 --> 00:29:57,200
print it to the console output

759
00:29:57,200 --> 00:29:58,320
so that's

760
00:29:58,320 --> 00:29:59,840
that's here right now

761
00:29:59,840 --> 00:30:02,399
right it's loads plugged in uh encode it

762
00:30:02,399 --> 00:30:04,880
and print it but now we edit new words

763
00:30:04,880 --> 00:30:07,039
as part of our pull request around 14

764
00:30:07,039 --> 00:30:09,200
words again so we can just head to

765
00:30:09,200 --> 00:30:11,520
another file like readme which we don't

766
00:30:11,520 --> 00:30:14,240
care about uh and just remove

767
00:30:14,240 --> 00:30:16,480
some words from here

768
00:30:16,480 --> 00:30:19,039
like that

769
00:30:19,120 --> 00:30:20,880
i can tell you that uh tell your secret

770
00:30:20,880 --> 00:30:22,799
that i counted the number of votes

771
00:30:22,799 --> 00:30:23,600
before

772
00:30:23,600 --> 00:30:25,840
i reached out to this talk today but

773
00:30:25,840 --> 00:30:27,279
don't tell anyone

774
00:30:27,279 --> 00:30:29,440
okay so i have everything saved i

775
00:30:29,440 --> 00:30:30,399
believe

776
00:30:30,399 --> 00:30:33,678
so let's commit it

777
00:30:34,000 --> 00:30:38,240
yeah saved uh guitar again is just uh

778
00:30:38,240 --> 00:30:40,880
a shortcut to push everything uh to the

779
00:30:40,880 --> 00:30:44,559
remote branch um let's head to the

780
00:30:44,559 --> 00:30:46,399
branch that we just created

781
00:30:46,399 --> 00:30:47,919
called hack

782
00:30:47,919 --> 00:30:52,159
uh and create a pull request out of it

783
00:30:55,760 --> 00:30:58,159
okay there it is you can see uh pull

784
00:30:58,159 --> 00:30:59,840
request exists

785
00:30:59,840 --> 00:31:02,320
what we can do now is to head to the

786
00:31:02,320 --> 00:31:05,519
mock hotel uh jenkins pipeline scan it

787
00:31:05,519 --> 00:31:08,240
uh the pull request should run again

788
00:31:08,240 --> 00:31:10,799
there it is uh we still expect it to run

789
00:31:10,799 --> 00:31:11,600
the

790
00:31:11,600 --> 00:31:13,440
the protected jenkins file from the main

791
00:31:13,440 --> 00:31:15,519
bench right not our own melissa jenkins

792
00:31:15,519 --> 00:31:17,360
file because it's still a pull request

793
00:31:17,360 --> 00:31:20,159
but what we do expect to see is that it

794
00:31:20,159 --> 00:31:22,000
automatically merges this pull request

795
00:31:22,000 --> 00:31:24,240
let's see if it works

796
00:31:24,240 --> 00:31:26,480
so we can see that all conditions here

797
00:31:26,480 --> 00:31:28,080
resulted as true

798
00:31:28,080 --> 00:31:31,279
and the post request using curl was sent

799
00:31:31,279 --> 00:31:33,440
using the mock turtle token uh

800
00:31:33,440 --> 00:31:36,080
credential to the giddy api so we'll

801
00:31:36,080 --> 00:31:38,240
head back again to the mock turtle

802
00:31:38,240 --> 00:31:40,559
repository to the main branch and we can

803
00:31:40,559 --> 00:31:42,240
see in the jenkins file that we

804
00:31:42,240 --> 00:31:44,159
successfully bypassed the branch

805
00:31:44,159 --> 00:31:46,720
protection rules and pushed code

806
00:31:46,720 --> 00:31:48,640
through the pipeline with our own

807
00:31:48,640 --> 00:31:50,960
malicious payload that takes the flag

808
00:31:50,960 --> 00:31:53,120
down and prints it

809
00:31:53,120 --> 00:31:56,240
now we expect the pipeline to run again

810
00:31:56,240 --> 00:31:59,799
on the main branch

811
00:32:01,840 --> 00:32:03,279
there it is because we push new code to

812
00:32:03,279 --> 00:32:04,480
the main branch

813
00:32:04,480 --> 00:32:06,720
and now it should run our own malicious

814
00:32:06,720 --> 00:32:10,320
jenkins file uh with flex and printed

815
00:32:10,320 --> 00:32:13,760
and there it is we've got it let's copy

816
00:32:13,760 --> 00:32:16,240
it quickly

817
00:32:16,240 --> 00:32:18,960
decode it

818
00:32:19,440 --> 00:32:22,399
and we've got our secret

819
00:32:22,399 --> 00:32:25,039
which we have to validate

820
00:32:25,039 --> 00:32:27,200
because we have formal and that's it i

821
00:32:27,200 --> 00:32:29,360
see yeah thanks

822
00:32:29,360 --> 00:32:31,600
uh

823
00:32:32,320 --> 00:32:34,720
okay cool

824
00:32:34,720 --> 00:32:38,080
so what we've done in attack number two

825
00:32:38,080 --> 00:32:40,559
is to abuse automotives okay auto

826
00:32:40,559 --> 00:32:43,679
modules uh abusing auto modules is where

827
00:32:43,679 --> 00:32:45,760
uh there is automation to automatically

828
00:32:45,760 --> 00:32:47,840
merge our code our pull request

829
00:32:47,840 --> 00:32:49,840
according to pull requests uh that we

830
00:32:49,840 --> 00:32:52,640
push and trigger pipeline in order to uh

831
00:32:52,640 --> 00:32:55,360
uh use abuse the pipeline to bypass the

832
00:32:55,360 --> 00:32:56,960
branch protection rules on the

833
00:32:56,960 --> 00:32:58,480
repository side

834
00:32:58,480 --> 00:33:00,320
and from there maybe we can introduce

835
00:33:00,320 --> 00:33:02,159
our malicious code to these protected

836
00:33:02,159 --> 00:33:04,559
branches uh a little bit about

837
00:33:04,559 --> 00:33:07,360
automotive rules in general without the

838
00:33:07,360 --> 00:33:09,440
offensive side

839
00:33:09,440 --> 00:33:11,919
engineers use auto modules sometimes in

840
00:33:11,919 --> 00:33:14,240
order to save some time sometimes uh

841
00:33:14,240 --> 00:33:16,240
they they create pull requests very

842
00:33:16,240 --> 00:33:18,799
simple puddle quests with minor changes

843
00:33:18,799 --> 00:33:21,120
and they want to us keep the need of

844
00:33:21,120 --> 00:33:23,279
getting another engineers uh approving

845
00:33:23,279 --> 00:33:26,320
it uh and just automatically merge it

846
00:33:26,320 --> 00:33:28,960
using the ci pipeline our examples are

847
00:33:28,960 --> 00:33:31,760
simple ui changes for example or version

848
00:33:31,760 --> 00:33:34,080
bump as we've just seen in the example

849
00:33:34,080 --> 00:33:36,559
uh and there are simple ways to

850
00:33:36,559 --> 00:33:39,200
implement auto modules uh one of them is

851
00:33:39,200 --> 00:33:41,120
to simply uh like manually

852
00:33:41,120 --> 00:33:43,360
implementation implement uh in the

853
00:33:43,360 --> 00:33:46,159
implemented in the ci uh and approach

854
00:33:46,159 --> 00:33:48,320
the scm api like we've seen in the

855
00:33:48,320 --> 00:33:50,799
challenge another way is to use a github

856
00:33:50,799 --> 00:33:52,799
action uh github actions out of the

857
00:33:52,799 --> 00:33:54,720
marketplace there are many of them to

858
00:33:54,720 --> 00:33:56,799
approve and merge pull requests uh some

859
00:33:56,799 --> 00:33:59,360
of them use the github action spot user

860
00:33:59,360 --> 00:34:01,279
in order to uh which is just a user in

861
00:34:01,279 --> 00:34:03,840
the in your github organization uh to

862
00:34:03,840 --> 00:34:06,159
approve and merge the pull quest you can

863
00:34:06,159 --> 00:34:08,239
some of them request for your personal

864
00:34:08,239 --> 00:34:09,839
access token to approve and launch the

865
00:34:09,839 --> 00:34:12,239
pull request and similar methods exist

866
00:34:12,239 --> 00:34:14,399
in other vendors like circle ci as you

867
00:34:14,399 --> 00:34:15,918
can see the screenshots

868
00:34:15,918 --> 00:34:18,879
and and in other vendors as well

869
00:34:18,879 --> 00:34:21,119
these are examples of uh

870
00:34:21,119 --> 00:34:23,599
real uh open source projects that

871
00:34:23,599 --> 00:34:26,480
automatically uh merge uh pull requests

872
00:34:26,480 --> 00:34:29,119
uh using ci cd pipelines upper one is in

873
00:34:29,119 --> 00:34:30,639
a jenkins file in a real open source

874
00:34:30,639 --> 00:34:32,839
project are reaching out to the github

875
00:34:32,839 --> 00:34:35,359
api uh pull request merge endpoint

876
00:34:35,359 --> 00:34:38,800
second one is a github actions workflow

877
00:34:38,800 --> 00:34:40,560
and the problem starts when there is a

878
00:34:40,560 --> 00:34:43,280
logic uh that checks for in which

879
00:34:43,280 --> 00:34:45,520
conditions you should uh

880
00:34:45,520 --> 00:34:47,199
you should merge the pull request in

881
00:34:47,199 --> 00:34:49,199
some cases there's no logic at all that

882
00:34:49,199 --> 00:34:51,520
you even need to bypass

883
00:34:51,520 --> 00:34:54,399
and and again this example of the naive

884
00:34:54,399 --> 00:34:55,760
check of words that were added and

885
00:34:55,760 --> 00:34:57,520
removed this is a real example from

886
00:34:57,520 --> 00:34:59,040
stack overflow we didn't invent it and

887
00:34:59,040 --> 00:35:00,720
there are many examples like that you've

888
00:35:00,720 --> 00:35:02,079
seen many examples like that in

889
00:35:02,079 --> 00:35:04,240
organizations that we worked with

890
00:35:04,240 --> 00:35:06,480
and there's a really cool use case uh

891
00:35:06,480 --> 00:35:08,560
released by uh in the blog post of rio

892
00:35:08,560 --> 00:35:11,760
decay which is uh um one of the top uh

893
00:35:11,760 --> 00:35:13,680
hackers today uh

894
00:35:13,680 --> 00:35:16,160
for ccd and in general

895
00:35:16,160 --> 00:35:18,320
they released a blog post around how

896
00:35:18,320 --> 00:35:20,560
they can bypass abuse the automotive

897
00:35:20,560 --> 00:35:22,400
rules used in the homebrew project that

898
00:35:22,400 --> 00:35:24,880
you probably all know maybe even use

899
00:35:24,880 --> 00:35:27,760
to push code to the brew

900
00:35:27,760 --> 00:35:29,200
executable

901
00:35:29,200 --> 00:35:31,839
that the entire world uses right are

902
00:35:31,839 --> 00:35:32,640
pretty

903
00:35:32,640 --> 00:35:34,400
pretty uh harmful

904
00:35:34,400 --> 00:35:36,480
so our solution or recommendation is

905
00:35:36,480 --> 00:35:38,720
pretty straightforward and

906
00:35:38,720 --> 00:35:40,079
just

907
00:35:40,079 --> 00:35:42,079
don't auto merge

908
00:35:42,079 --> 00:35:44,320
i mean you can auto merge if you can

909
00:35:44,320 --> 00:35:46,800
make sure that your entire logic is safe

910
00:35:46,800 --> 00:35:49,040
um but it's really hard to know it

911
00:35:49,040 --> 00:35:50,800
sometimes sometimes you use third-party

912
00:35:50,800 --> 00:35:52,480
tools that you don't know if they have

913
00:35:52,480 --> 00:35:54,400
any vulnerabilities uh inside that's

914
00:35:54,400 --> 00:35:56,400
what happened in homebrew for example uh

915
00:35:56,400 --> 00:35:59,440
so if you can avoid it um please do and

916
00:35:59,440 --> 00:36:01,359
if not uh cross your fingers that no one

917
00:36:01,359 --> 00:36:03,760
will abuse it uh that's it for the

918
00:36:03,760 --> 00:36:05,839
second attack moving on to the third and

919
00:36:05,839 --> 00:36:08,320
last one

920
00:36:08,880 --> 00:36:10,480
okay guys i hope you're excited this is

921
00:36:10,480 --> 00:36:13,200
the last attack

922
00:36:13,200 --> 00:36:15,680
so same as before

923
00:36:15,680 --> 00:36:17,520
let's go

924
00:36:17,520 --> 00:36:18,880
to the domos

925
00:36:18,880 --> 00:36:21,040
challenge

926
00:36:21,040 --> 00:36:23,599
let's make it a bit bigger

927
00:36:23,599 --> 00:36:25,599
basically in the end here it says hack

928
00:36:25,599 --> 00:36:27,839
the door house pipeline stick still flag

929
00:36:27,839 --> 00:36:28,800
9.

930
00:36:28,800 --> 00:36:30,640
good luck so we don't have much

931
00:36:30,640 --> 00:36:32,400
information about it

932
00:36:32,400 --> 00:36:33,760
you can go again to the wonderland

933
00:36:33,760 --> 00:36:36,160
project and we see that we have here at

934
00:36:36,160 --> 00:36:39,119
almost repository which is also

935
00:36:39,119 --> 00:36:41,040
public

936
00:36:41,040 --> 00:36:43,760
let's say it's pipeline

937
00:36:43,760 --> 00:36:46,320
so we can see here very simple pipeline

938
00:36:46,320 --> 00:36:48,079
as before and we can see here one

939
00:36:48,079 --> 00:36:50,400
interesting

940
00:36:50,400 --> 00:36:52,000
interesting stage

941
00:36:52,000 --> 00:36:54,560
called unit tests basically it

942
00:36:54,560 --> 00:36:57,839
runs some tests and then uses the flag 9

943
00:36:57,839 --> 00:37:00,000
credential that we want to steal inside

944
00:37:00,000 --> 00:37:02,720
this code block somewhere i guess it's

945
00:37:02,720 --> 00:37:05,839
somewhere here inside the shell script

946
00:37:05,839 --> 00:37:07,359
and before that we can see that it

947
00:37:07,359 --> 00:37:10,000
fetches this specific shell script from

948
00:37:10,000 --> 00:37:12,000
a remote location somewhere

949
00:37:12,000 --> 00:37:14,560
and it executes it so

950
00:37:14,560 --> 00:37:16,720
we want to somehow influence this

951
00:37:16,720 --> 00:37:18,400
pipeline we want to

952
00:37:18,400 --> 00:37:20,480
steal this secret

953
00:37:20,480 --> 00:37:22,079
let me tell you a secret we don't have

954
00:37:22,079 --> 00:37:23,680
any right permissions on it we can't

955
00:37:23,680 --> 00:37:25,599
influence the repository itself in any

956
00:37:25,599 --> 00:37:26,480
way

957
00:37:26,480 --> 00:37:28,560
so what we'll try to do is we'll try to

958
00:37:28,560 --> 00:37:30,800
uh maybe see if we can influence its

959
00:37:30,800 --> 00:37:32,960
supply chain the report called shell

960
00:37:32,960 --> 00:37:37,599
maybe we can somehow attack attack it

961
00:37:37,599 --> 00:37:38,720
so

962
00:37:38,720 --> 00:37:41,279
let's go to

963
00:37:43,359 --> 00:37:46,640
let's go look for the project

964
00:37:46,720 --> 00:37:48,880
and we can see here we do have a project

965
00:37:48,880 --> 00:37:51,119
in a different organization also a

966
00:37:51,119 --> 00:37:54,320
public open source called report code

967
00:37:54,320 --> 00:37:55,280
and

968
00:37:55,280 --> 00:37:57,119
it has many files here we can also see

969
00:37:57,119 --> 00:38:00,640
that it has the report called data sage

970
00:38:00,640 --> 00:38:02,000
file

971
00:38:02,000 --> 00:38:04,880
so let's look at its jenkins file

972
00:38:04,880 --> 00:38:07,680
we can see here two stages pull request

973
00:38:07,680 --> 00:38:09,680
and uh release let's start from

974
00:38:09,680 --> 00:38:12,000
explaining the release stage so we can

975
00:38:12,000 --> 00:38:14,320
see here that it runs

976
00:38:14,320 --> 00:38:17,520
only on pushes to the repository itself

977
00:38:17,520 --> 00:38:20,000
and it runs some

978
00:38:20,000 --> 00:38:22,800
sorry it runs some installation

979
00:38:22,800 --> 00:38:24,320
stages and then

980
00:38:24,320 --> 00:38:26,960
it uses this environment variables which

981
00:38:26,960 --> 00:38:29,040
we don't see it's declared anywhere in

982
00:38:29,040 --> 00:38:31,280
the jenkins file so we can assume this

983
00:38:31,280 --> 00:38:33,520
var this environment variable is

984
00:38:33,520 --> 00:38:35,920
accessible from anywhere inside the job

985
00:38:35,920 --> 00:38:36,960
itself

986
00:38:36,960 --> 00:38:39,520
uh it's not the same as last uh

987
00:38:39,520 --> 00:38:42,000
is the first challenge it's sort of the

988
00:38:42,000 --> 00:38:44,320
agent itself it's accessible by the job

989
00:38:44,320 --> 00:38:47,440
that specific job um

990
00:38:47,440 --> 00:38:50,079
so what the pipeline here does it writes

991
00:38:50,079 --> 00:38:52,480
this environment variable to a file and

992
00:38:52,480 --> 00:38:56,400
uses this key to authenticate um to the

993
00:38:56,400 --> 00:38:59,040
http server we've seen earlier in order

994
00:38:59,040 --> 00:39:01,760
to upload a new version of the

995
00:39:01,760 --> 00:39:03,920
report code

996
00:39:03,920 --> 00:39:06,960
dot sage file so it's really interesting

997
00:39:06,960 --> 00:39:08,480
jenkins file for us if you want to

998
00:39:08,480 --> 00:39:10,560
attack it maybe we can influence it

999
00:39:10,560 --> 00:39:11,839
somehow

1000
00:39:11,839 --> 00:39:13,680
and if we go back to the

1001
00:39:13,680 --> 00:39:15,359
pull request stage you can see that this

1002
00:39:15,359 --> 00:39:19,200
runs on opened pull requests on events

1003
00:39:19,200 --> 00:39:22,720
that the gt sends to jenkins on any open

1004
00:39:22,720 --> 00:39:24,000
pull request

1005
00:39:24,000 --> 00:39:26,160
and it has two stages

1006
00:39:26,160 --> 00:39:28,880
it runs echo which prints the title of

1007
00:39:28,880 --> 00:39:31,280
the uh pull request

1008
00:39:31,280 --> 00:39:33,680
and it sends the mail to the maintainers

1009
00:39:33,680 --> 00:39:36,320
about the new uh pull request

1010
00:39:36,320 --> 00:39:38,160
so we can see here something very

1011
00:39:38,160 --> 00:39:39,839
interesting we see here that it uses the

1012
00:39:39,839 --> 00:39:42,240
title from a pull request the title and

1013
00:39:42,240 --> 00:39:44,400
the pull request can be controlled by us

1014
00:39:44,400 --> 00:39:46,720
it's a user input and it uses it inside

1015
00:39:46,720 --> 00:39:49,359
the bash command so maybe we can try to

1016
00:39:49,359 --> 00:39:52,240
do a command ejection and run our code

1017
00:39:52,240 --> 00:39:54,480
inside the pipeline

1018
00:39:54,480 --> 00:39:57,359
so what we'll do is same as the first

1019
00:39:57,359 --> 00:40:00,799
one we'll focus the repository

1020
00:40:03,359 --> 00:40:04,640
we'll make some

1021
00:40:04,640 --> 00:40:06,160
change anywhere

1022
00:40:06,160 --> 00:40:10,040
it doesn't really matter where

1023
00:40:13,520 --> 00:40:15,040
and we'll create a pull request to the

1024
00:40:15,040 --> 00:40:17,680
original repository

1025
00:40:17,680 --> 00:40:19,920
but it will contain

1026
00:40:19,920 --> 00:40:23,560
an interesting title

1027
00:40:42,400 --> 00:40:45,359
so we're using this title

1028
00:40:45,359 --> 00:40:47,280
let's see so you can see it clear

1029
00:40:47,280 --> 00:40:48,720
what we're doing here you can see the

1030
00:40:48,720 --> 00:40:49,520
two

1031
00:40:49,520 --> 00:40:51,599
the tick that starts the line it's a

1032
00:40:51,599 --> 00:40:54,480
command substitution syntax in bash

1033
00:40:54,480 --> 00:40:56,400
basically it allows you to evaluate a

1034
00:40:56,400 --> 00:40:58,640
command inside the bash command and we

1035
00:40:58,640 --> 00:41:00,240
can see here that we're trying to write

1036
00:41:00,240 --> 00:41:02,000
the same key

1037
00:41:02,000 --> 00:41:04,240
into a file and to send it to a server

1038
00:41:04,240 --> 00:41:05,599
in our control

1039
00:41:05,599 --> 00:41:06,880
so

1040
00:41:06,880 --> 00:41:10,720
let's run the server quickly

1041
00:41:13,760 --> 00:41:16,240
i have a simple http server that can

1042
00:41:16,240 --> 00:41:19,280
receive uploads

1043
00:41:19,280 --> 00:41:21,760
um so we run the server let's create a

1044
00:41:21,760 --> 00:41:23,760
pull request and now we're doing the

1045
00:41:23,760 --> 00:41:25,599
most important thing in hacking is

1046
00:41:25,599 --> 00:41:29,680
waiting three two one

1047
00:41:29,680 --> 00:41:32,000
one

1048
00:41:32,000 --> 00:41:33,520
and

1049
00:41:33,520 --> 00:41:35,839
one okay yeah i got it right right in

1050
00:41:35,839 --> 00:41:38,240
time we can see here that the upload was

1051
00:41:38,240 --> 00:41:40,720
successful

1052
00:41:40,720 --> 00:41:43,760
and we have a new file that's called key

1053
00:41:43,760 --> 00:41:46,079
it wasn't here before i promise you

1054
00:41:46,079 --> 00:41:49,119
um we can see it's an open ssh private

1055
00:41:49,119 --> 00:41:50,560
key so

1056
00:41:50,560 --> 00:41:53,040
what we can try to do

1057
00:41:53,040 --> 00:41:55,920
is take that key

1058
00:41:56,640 --> 00:41:59,359
which mod is because the sh like likes

1059
00:41:59,359 --> 00:42:00,800
to mod

1060
00:42:00,800 --> 00:42:02,640
and we can

1061
00:42:02,640 --> 00:42:05,440
try to use that key to upload our

1062
00:42:05,440 --> 00:42:08,400
malicious reporter file which i prepared

1063
00:42:08,400 --> 00:42:10,000
here earlier

1064
00:42:10,000 --> 00:42:12,400
um to the http server that we've seen

1065
00:42:12,400 --> 00:42:13,680
before so

1066
00:42:13,680 --> 00:42:15,680
this is a very simple

1067
00:42:15,680 --> 00:42:17,520
line as we've seen before we're trying

1068
00:42:17,520 --> 00:42:20,160
to echo the flag that's what that's what

1069
00:42:20,160 --> 00:42:21,359
we're putting inside a report

1070
00:42:21,359 --> 00:42:26,800
called.sage and to encode it as base64

1071
00:42:26,800 --> 00:42:29,440
so we can see the upload was successful

1072
00:42:29,440 --> 00:42:32,319
and the next thing we have to do

1073
00:42:32,319 --> 00:42:34,480
is let's go to the

1074
00:42:34,480 --> 00:42:36,880
doormouse pipeline

1075
00:42:36,880 --> 00:42:38,400
so now we're looking at the pipeline of

1076
00:42:38,400 --> 00:42:40,560
the original repository the the open

1077
00:42:40,560 --> 00:42:42,880
source that uses report code

1078
00:42:42,880 --> 00:42:45,440
we'll scan will uh

1079
00:42:45,440 --> 00:42:47,440
we see the main branch here

1080
00:42:47,440 --> 00:42:51,440
let's run the main branch again

1081
00:42:53,359 --> 00:42:55,520
so i'm just running the same thing again

1082
00:42:55,520 --> 00:42:57,200
it's like a rerun i don't have any real

1083
00:42:57,200 --> 00:42:58,640
permissions i didn't change anything on

1084
00:42:58,640 --> 00:43:01,598
the project itself

1085
00:43:04,000 --> 00:43:05,920
and while while it runs it will take

1086
00:43:05,920 --> 00:43:06,960
some time

1087
00:43:06,960 --> 00:43:09,119
oh no never mind didn't take time so we

1088
00:43:09,119 --> 00:43:13,839
have the challenge here the base64 here

1089
00:43:20,000 --> 00:43:21,520
and we have the key

1090
00:43:21,520 --> 00:43:25,880
i hope everyone's ends already

1091
00:43:29,920 --> 00:43:32,319
and we've got it

1092
00:43:32,319 --> 00:43:35,040
thank you last challenge let's challenge

1093
00:43:35,040 --> 00:43:37,040
okay so let's talk about what we've seen

1094
00:43:37,040 --> 00:43:40,680
here so

1095
00:43:40,720 --> 00:43:43,040
so what we've seen here is we compromise

1096
00:43:43,040 --> 00:43:45,920
the third party basically you compromise

1097
00:43:45,920 --> 00:43:47,760
part of the supply chain of the dormant

1098
00:43:47,760 --> 00:43:50,079
repository in order to influence that

1099
00:43:50,079 --> 00:43:52,319
repository and steal its secrets by

1100
00:43:52,319 --> 00:43:53,839
attacking a different

1101
00:43:53,839 --> 00:43:55,280
target

1102
00:43:55,280 --> 00:43:57,760
so what we've seen in this scenario is

1103
00:43:57,760 --> 00:43:59,200
similar to what happened not too long

1104
00:43:59,200 --> 00:44:01,839
ago to a company called codcov codcov is

1105
00:44:01,839 --> 00:44:03,680
a company that allows you to manage code

1106
00:44:03,680 --> 00:44:06,560
coverage reports and do analysis on them

1107
00:44:06,560 --> 00:44:07,520
and

1108
00:44:07,520 --> 00:44:10,800
attackers attacked it not too long ago

1109
00:44:10,800 --> 00:44:12,560
using the similar scenario so let's

1110
00:44:12,560 --> 00:44:14,960
imagine you're a company that uses uh

1111
00:44:14,960 --> 00:44:17,760
cod cove so you run their

1112
00:44:17,760 --> 00:44:20,319
shell script inside your pipeline what

1113
00:44:20,319 --> 00:44:22,640
you do is you fetch the

1114
00:44:22,640 --> 00:44:24,480
the shell script that they give you from

1115
00:44:24,480 --> 00:44:26,480
their google bucket

1116
00:44:26,480 --> 00:44:29,200
and you run it to upload

1117
00:44:29,200 --> 00:44:32,319
to upload your report coverage uh your

1118
00:44:32,319 --> 00:44:35,040
coverage your testing reports

1119
00:44:35,040 --> 00:44:36,720
to a quartco

1120
00:44:36,720 --> 00:44:38,240
so what happened in the attack an

1121
00:44:38,240 --> 00:44:40,560
attacker got access specifically to the

1122
00:44:40,560 --> 00:44:43,680
google bucket and added a malicious line

1123
00:44:43,680 --> 00:44:45,040
i can tell you what this line does

1124
00:44:45,040 --> 00:44:46,720
basically takes the environment

1125
00:44:46,720 --> 00:44:48,960
environment variables and sends them to

1126
00:44:48,960 --> 00:44:51,440
a server that's controlled by by the

1127
00:44:51,440 --> 00:44:52,720
attacker so

1128
00:44:52,720 --> 00:44:54,880
what happened uh customers that uh run

1129
00:44:54,880 --> 00:44:57,119
those pipelines that always every in

1130
00:44:57,119 --> 00:44:59,359
each rerun of the pipeline it fetches

1131
00:44:59,359 --> 00:45:01,119
the same version of the report called

1132
00:45:01,119 --> 00:45:04,240
file the same file not the same version

1133
00:45:04,240 --> 00:45:05,920
so what happened they fetched the

1134
00:45:05,920 --> 00:45:07,760
malicious new

1135
00:45:07,760 --> 00:45:09,440
file that was uploaded by the attacker

1136
00:45:09,440 --> 00:45:11,760
that got access to the bucket and it

1137
00:45:11,760 --> 00:45:12,800
sent

1138
00:45:12,800 --> 00:45:14,720
those customers credentials to the

1139
00:45:14,720 --> 00:45:16,079
attacker

1140
00:45:16,079 --> 00:45:16,960
so

1141
00:45:16,960 --> 00:45:19,359
what we can learn from this scenario

1142
00:45:19,359 --> 00:45:20,240
uh

1143
00:45:20,240 --> 00:45:21,599
first thing first issue was that the

1144
00:45:21,599 --> 00:45:23,119
pipeline was vulnerable to command

1145
00:45:23,119 --> 00:45:24,160
ejection

1146
00:45:24,160 --> 00:45:25,280
uh

1147
00:45:25,280 --> 00:45:27,040
the suggestion is to abstain from using

1148
00:45:27,040 --> 00:45:29,760
any user control input in your pipelines

1149
00:45:29,760 --> 00:45:31,599
uh in shell commands and generally in

1150
00:45:31,599 --> 00:45:34,480
any in any other thing because it can be

1151
00:45:34,480 --> 00:45:36,319
really vulnerable and can allow people

1152
00:45:36,319 --> 00:45:38,079
to influence your pipelines

1153
00:45:38,079 --> 00:45:40,400
second issue was that the pipeline could

1154
00:45:40,400 --> 00:45:42,800
initiate album connection to any address

1155
00:45:42,800 --> 00:45:43,839
basically

1156
00:45:43,839 --> 00:45:46,880
when we send the key from the jenkins

1157
00:45:46,880 --> 00:45:49,200
itself to our server it did an outboard

1158
00:45:49,200 --> 00:45:52,079
connection so if it's possible

1159
00:45:52,079 --> 00:45:54,079
block outbound connections

1160
00:45:54,079 --> 00:45:57,760
using an allow list if it's possible

1161
00:45:57,760 --> 00:45:59,760
last issue was no integrity check or

1162
00:45:59,760 --> 00:46:01,839
validity was performed on the executable

1163
00:46:01,839 --> 00:46:04,640
that was fetched during the pipeline so

1164
00:46:04,640 --> 00:46:06,240
the recommendation is to check the

1165
00:46:06,240 --> 00:46:08,400
integrity and validity using a digital

1166
00:46:08,400 --> 00:46:10,400
digital signature and the hash every

1167
00:46:10,400 --> 00:46:12,560
time you fetch remote resources and run

1168
00:46:12,560 --> 00:46:15,200
them inside your pipelines

1169
00:46:15,200 --> 00:46:17,680
there are also some other issues in the

1170
00:46:17,680 --> 00:46:21,200
scenario but those are the main ones

1171
00:46:24,160 --> 00:46:25,359
okay

1172
00:46:25,359 --> 00:46:27,119
there are a few messages that we can

1173
00:46:27,119 --> 00:46:29,520
pick out from uh for our summary but we

1174
00:46:29,520 --> 00:46:31,440
picked a pretty similar one

1175
00:46:31,440 --> 00:46:33,359
which is that it only takes one flow in

1176
00:46:33,359 --> 00:46:36,240
your cacd ecosystem uh to compromise

1177
00:46:36,240 --> 00:46:38,720
your production now the ccd

1178
00:46:38,720 --> 00:46:41,200
ecosystem and environments are great

1179
00:46:41,200 --> 00:46:43,280
attack surface and a great attack and a

1180
00:46:43,280 --> 00:46:45,680
great opportunity for attackers then we

1181
00:46:45,680 --> 00:46:48,079
already see them using it and taking

1182
00:46:48,079 --> 00:46:50,480
advantage of it in the recent uh in the

1183
00:46:50,480 --> 00:46:52,319
in the recent years

1184
00:46:52,319 --> 00:46:55,200
so if you're defenders cacd uh needs

1185
00:46:55,200 --> 00:46:57,599
your attention and please don't lie i

1186
00:46:57,599 --> 00:46:59,680
know that uh i know that this is what

1187
00:46:59,680 --> 00:47:01,359
you think right now

1188
00:47:01,359 --> 00:47:03,200
thank you for attending uh we do have

1189
00:47:03,200 --> 00:47:05,119
some stickers here if you want as you

1190
00:47:05,119 --> 00:47:06,560
can reach out later and we are here for

1191
00:47:06,560 --> 00:47:09,040
questions uh that you can ask now or

1192
00:47:09,040 --> 00:47:10,560
later on

1193
00:47:10,560 --> 00:47:12,610
thank you and enjoy the conference

1194
00:47:12,610 --> 00:47:17,329
[Applause]

