1
00:00:00,080 --> 00:00:02,000
good evening everyone welcome to b-sides

2
00:00:02,000 --> 00:00:05,120
las vegas common grounds this track is

3
00:00:05,120 --> 00:00:07,440
software build materials challenges and

4
00:00:07,440 --> 00:00:09,120
how to fix them

5
00:00:09,120 --> 00:00:11,360
a few announcements before we begin

6
00:00:11,360 --> 00:00:13,280
sponsors we'd like to thank our sponsors

7
00:00:13,280 --> 00:00:15,599
especially our diamond sponsors lastpass

8
00:00:15,599 --> 00:00:18,320
and palo alto networks and our golds

9
00:00:18,320 --> 00:00:19,119
yeah

10
00:00:19,119 --> 00:00:22,480
very excited for the sponsors

11
00:00:22,960 --> 00:00:25,519
and our gold sponsors amazon invisium

12
00:00:25,519 --> 00:00:27,920
plex track intel google and blue cat

13
00:00:27,920 --> 00:00:29,599
it's their support along with our other

14
00:00:29,599 --> 00:00:31,679
sponsors donors and volunteers to make

15
00:00:31,679 --> 00:00:33,520
this event possible

16
00:00:33,520 --> 00:00:35,760
these talks are being streamed live

17
00:00:35,760 --> 00:00:38,160
and as a courtesy to our speakers and

18
00:00:38,160 --> 00:00:40,000
audience we ask that you check to make

19
00:00:40,000 --> 00:00:42,320
sure your cell phones are set to silent

20
00:00:42,320 --> 00:00:44,320
if you have a question um you can use

21
00:00:44,320 --> 00:00:46,399
this microphone up here um just make

22
00:00:46,399 --> 00:00:47,600
sure they know if they're generous

23
00:00:47,600 --> 00:00:49,840
enough to let you ask um that way people

24
00:00:49,840 --> 00:00:51,840
can hear you on the stream and get the

25
00:00:51,840 --> 00:00:54,079
recording on youtube

26
00:00:54,079 --> 00:00:56,320
um as a reminder the besides photo

27
00:00:56,320 --> 00:00:58,960
policy prohibits taking pictures without

28
00:00:58,960 --> 00:01:00,800
the explicit permission of the people in

29
00:01:00,800 --> 00:01:02,800
the frame these talks are all being

30
00:01:02,800 --> 00:01:04,799
recorded and will be available in

31
00:01:04,799 --> 00:01:07,280
youtube in the future

32
00:01:07,280 --> 00:01:08,880
we would like you to keep your masks on

33
00:01:08,880 --> 00:01:10,720
at all times if you would

34
00:01:10,720 --> 00:01:12,720
and um looks like there's enough room

35
00:01:12,720 --> 00:01:14,880
for everyone so let's get it started

36
00:01:14,880 --> 00:01:18,320
here so all right guys

37
00:01:20,560 --> 00:01:23,799
thank you

38
00:01:26,159 --> 00:01:28,320
everyone good evening

39
00:01:28,320 --> 00:01:30,320
i can't believe all of you showed up for

40
00:01:30,320 --> 00:01:32,880
a 6 p.m talk

41
00:01:32,880 --> 00:01:35,759
that's quite some commitment

42
00:01:35,759 --> 00:01:37,920
we will try to answer your questions as

43
00:01:37,920 --> 00:01:40,159
much as possible but our information

44
00:01:40,159 --> 00:01:43,040
will be displayed here and hussein and i

45
00:01:43,040 --> 00:01:45,040
will be available after the talk as well

46
00:01:45,040 --> 00:01:47,920
if you guys have any questions

47
00:01:47,920 --> 00:01:50,079
with that let's get started

48
00:01:50,079 --> 00:01:53,200
today we will be talking about

49
00:01:53,200 --> 00:01:55,439
what are software glove materials what

50
00:01:55,439 --> 00:01:58,399
kind of problems s-bomb can solve

51
00:01:58,399 --> 00:02:01,520
what are the uh challenges we have face

52
00:02:01,520 --> 00:02:03,840
uh while generating s-bombs and how to

53
00:02:03,840 --> 00:02:06,320
fix them

54
00:02:06,640 --> 00:02:09,440
so as all of you know

55
00:02:09,440 --> 00:02:12,560
open source software is eating the world

56
00:02:12,560 --> 00:02:13,920
right

57
00:02:13,920 --> 00:02:15,520
uh obviously there are a lot of

58
00:02:15,520 --> 00:02:19,520
advantages uh the cost less cost as well

59
00:02:19,520 --> 00:02:21,599
as speed of execution

60
00:02:21,599 --> 00:02:24,560
when we use open source software

61
00:02:24,560 --> 00:02:27,440
to uh you know design build ships new

62
00:02:27,440 --> 00:02:29,680
services or tool

63
00:02:29,680 --> 00:02:32,480
now considering uh you know these

64
00:02:32,480 --> 00:02:35,200
statistics we have here

65
00:02:35,200 --> 00:02:38,000
if there is a critical vulnerability

66
00:02:38,000 --> 00:02:39,760
you can imagine

67
00:02:39,760 --> 00:02:42,959
the gravity and the impact

68
00:02:42,959 --> 00:02:44,640
at scale

69
00:02:44,640 --> 00:02:47,599
let's take a look at couple of them

70
00:02:47,599 --> 00:02:50,040
raise your hand if you remember

71
00:02:50,040 --> 00:02:53,280
2017's equifax breach

72
00:02:53,280 --> 00:02:56,319
oh wow almost 60 percent

73
00:02:56,319 --> 00:02:58,480
so in 2017

74
00:02:58,480 --> 00:03:01,360
open source uh component apache strut

75
00:03:01,360 --> 00:03:04,159
server suffered a file upload

76
00:03:04,159 --> 00:03:06,879
vulnerability uh through which remote

77
00:03:06,879 --> 00:03:09,440
code execution was possible and as a

78
00:03:09,440 --> 00:03:10,480
result

79
00:03:10,480 --> 00:03:12,920
during this breach almost

80
00:03:12,920 --> 00:03:15,280
147 million

81
00:03:15,280 --> 00:03:17,440
users personal data was

82
00:03:17,440 --> 00:03:20,800
in america as well as in the us

83
00:03:20,800 --> 00:03:23,840
and according to ftc the settlement was

84
00:03:23,840 --> 00:03:25,319
around

85
00:03:25,319 --> 00:03:27,760
425 million

86
00:03:27,760 --> 00:03:29,280
now let's take a look at our next

87
00:03:29,280 --> 00:03:31,840
example heartbleed raise your hand if

88
00:03:31,840 --> 00:03:34,000
you remember this one this is little old

89
00:03:34,000 --> 00:03:36,480
almost 10 years old okay

90
00:03:36,480 --> 00:03:39,440
approximately 50 percent

91
00:03:39,440 --> 00:03:43,680
so in 2012 on a new year eve a german

92
00:03:43,680 --> 00:03:45,760
developer introduced

93
00:03:45,760 --> 00:03:48,319
a buffer over for vulnerability in

94
00:03:48,319 --> 00:03:51,519
heartbeat extension of openssl it was

95
00:03:51,519 --> 00:03:53,920
discovered almost after two years in

96
00:03:53,920 --> 00:03:57,439
april 2014 by google researchers

97
00:03:57,439 --> 00:04:00,080
and as we all know almost 60 percent

98
00:04:00,080 --> 00:04:02,640
sites and services were affected by that

99
00:04:02,640 --> 00:04:05,439
and it took all of us quite few weeks

100
00:04:05,439 --> 00:04:08,000
and months to clean up the mess

101
00:04:08,000 --> 00:04:11,760
who remembers lock 4g the most recent

102
00:04:11,760 --> 00:04:14,879
awesome almost 75 80 percent

103
00:04:14,879 --> 00:04:16,560
yeah

104
00:04:16,560 --> 00:04:18,560
so in lock 4j vulnerability which

105
00:04:18,560 --> 00:04:21,040
allowed remote code execution

106
00:04:21,040 --> 00:04:23,440
millions and millions of java based

107
00:04:23,440 --> 00:04:24,720
applications

108
00:04:24,720 --> 00:04:27,360
uh data store and devices they were

109
00:04:27,360 --> 00:04:29,440
vulnerable right

110
00:04:29,440 --> 00:04:30,960
now

111
00:04:30,960 --> 00:04:33,520
those were the prime three examples but

112
00:04:33,520 --> 00:04:36,000
if you look at this cve data

113
00:04:36,000 --> 00:04:37,360
what you see

114
00:04:37,360 --> 00:04:38,199
in

115
00:04:38,199 --> 00:04:42,400
2011 cvs score 9 and 10

116
00:04:42,400 --> 00:04:44,639
these many vulnerabilities will where

117
00:04:44,639 --> 00:04:48,160
produce 832

118
00:04:48,160 --> 00:04:50,120
and we are in

119
00:04:50,120 --> 00:04:52,560
2022 right

120
00:04:52,560 --> 00:04:55,360
and take a look at the number

121
00:04:55,360 --> 00:04:56,720
wow

122
00:04:56,720 --> 00:04:59,360
now from this scary situation

123
00:04:59,360 --> 00:05:02,400
can s-bomb really save us to create

124
00:05:02,400 --> 00:05:04,479
remediation at scale

125
00:05:04,479 --> 00:05:05,919
that's the question we are going to

126
00:05:05,919 --> 00:05:08,840
answer in today's

127
00:05:08,840 --> 00:05:10,720
presentation so

128
00:05:10,720 --> 00:05:14,560
hi this is tripty um i am engineering

129
00:05:14,560 --> 00:05:16,720
manager for

130
00:05:16,720 --> 00:05:18,639
software security

131
00:05:18,639 --> 00:05:21,520
at datadog i'm a mobile game developer

132
00:05:21,520 --> 00:05:24,160
turned security professional so as a

133
00:05:24,160 --> 00:05:27,680
developer i truly can resonate with all

134
00:05:27,680 --> 00:05:29,600
the pain points a typical developer

135
00:05:29,600 --> 00:05:32,160
faces with respect to security

136
00:05:32,160 --> 00:05:34,400
and i'm always open for mentoring

137
00:05:34,400 --> 00:05:36,880
coaching or interesting security and

138
00:05:36,880 --> 00:05:39,199
privacy conversation over

139
00:05:39,199 --> 00:05:41,840
virtual coffee or in-person coffee

140
00:05:41,840 --> 00:05:44,639
when i'm not doing security i like to

141
00:05:44,639 --> 00:05:46,000
exercise

142
00:05:46,000 --> 00:05:48,400
and that's me upside down doing aerial

143
00:05:48,400 --> 00:05:50,160
yoga

144
00:05:50,160 --> 00:05:52,880
hike i also like to conduct a meditation

145
00:05:52,880 --> 00:05:55,360
workshop because i believe in work-life

146
00:05:55,360 --> 00:05:57,520
balance i'm a certified meditation

147
00:05:57,520 --> 00:05:59,600
instructor as well

148
00:05:59,600 --> 00:06:02,080
this is my contact information

149
00:06:02,080 --> 00:06:04,880
feel free to add me in your linkedin or

150
00:06:04,880 --> 00:06:07,280
send me a email with your questions or

151
00:06:07,280 --> 00:06:08,720
inquiries

152
00:06:08,720 --> 00:06:10,800
with this i would like to introduce my

153
00:06:10,800 --> 00:06:14,160
esteemed colleague hussein

154
00:06:14,720 --> 00:06:16,240
hello everybody

155
00:06:16,240 --> 00:06:18,319
this is hossain si adati i'm a senior

156
00:06:18,319 --> 00:06:21,039
security engineer at datadog

157
00:06:21,039 --> 00:06:23,039
i have a phd in computer science from

158
00:06:23,039 --> 00:06:25,199
nyu i have a

159
00:06:25,199 --> 00:06:26,639
zugler

160
00:06:26,639 --> 00:06:27,840
i worked on

161
00:06:27,840 --> 00:06:29,919
software supply chain security at google

162
00:06:29,919 --> 00:06:32,720
as well when i'm not doing security i'm

163
00:06:32,720 --> 00:06:35,199
i do hiking swimming and

164
00:06:35,199 --> 00:06:37,600
started surfing this is photoshop

165
00:06:37,600 --> 00:06:40,319
obviously but i aspire to be a good

166
00:06:40,319 --> 00:06:42,720
surfer

167
00:06:43,440 --> 00:06:46,240
thank you hussein

168
00:06:47,120 --> 00:06:49,680
so today's agenda is going to be we are

169
00:06:49,680 --> 00:06:51,759
going to talk about open source software

170
00:06:51,759 --> 00:06:54,400
security gaps and then hussein will

171
00:06:54,400 --> 00:06:57,440
introduce us the concept of s-bomb i'm

172
00:06:57,440 --> 00:07:00,080
sure many of you are already familiar

173
00:07:00,080 --> 00:07:02,560
but he will introduce in a very creative

174
00:07:02,560 --> 00:07:05,759
way uh for those uh for whom it's a new

175
00:07:05,759 --> 00:07:08,080
concept and then he's gonna talk about

176
00:07:08,080 --> 00:07:10,880
some of the toolings uh s-bomb uh use

177
00:07:10,880 --> 00:07:12,960
cases beyond improving open source

178
00:07:12,960 --> 00:07:15,680
software security and then he will focus

179
00:07:15,680 --> 00:07:16,400
on

180
00:07:16,400 --> 00:07:18,800
s-bomb challenges and what are some of

181
00:07:18,800 --> 00:07:20,880
the solution approaches we can use to

182
00:07:20,880 --> 00:07:22,400
fix them

183
00:07:22,400 --> 00:07:25,599
i will also uh speak about some of the

184
00:07:25,599 --> 00:07:27,440
strategic initiative

185
00:07:27,440 --> 00:07:30,080
uh we as you know security professional

186
00:07:30,080 --> 00:07:33,919
can take in our respective organization

187
00:07:33,919 --> 00:07:35,759
to improve the state of open source

188
00:07:35,759 --> 00:07:38,720
software security

189
00:07:40,000 --> 00:07:42,160
now let's talk about what are the common

190
00:07:42,160 --> 00:07:44,879
open source software security gaps we

191
00:07:44,879 --> 00:07:46,879
see and why we see

192
00:07:46,879 --> 00:07:49,840
the number one gap i see is

193
00:07:49,840 --> 00:07:52,080
open source software developers don't

194
00:07:52,080 --> 00:07:55,039
necessarily have security education

195
00:07:55,039 --> 00:07:56,800
when they are at university if at all

196
00:07:56,800 --> 00:07:59,360
they opted for university education they

197
00:07:59,360 --> 00:08:00,560
either take

198
00:08:00,560 --> 00:08:02,479
one security class or they do not take

199
00:08:02,479 --> 00:08:04,000
security class

200
00:08:04,000 --> 00:08:06,960
that knowledge is not sufficient for

201
00:08:06,960 --> 00:08:07,759
them

202
00:08:07,759 --> 00:08:11,199
preventing introducing security flaws

203
00:08:11,199 --> 00:08:13,680
in our open source code

204
00:08:13,680 --> 00:08:15,039
second

205
00:08:15,039 --> 00:08:19,039
gap i have seen most commonly is

206
00:08:19,199 --> 00:08:22,240
since last 10-15 years we kind of relied

207
00:08:22,240 --> 00:08:23,120
on

208
00:08:23,120 --> 00:08:25,840
software composition analysis tools and

209
00:08:25,840 --> 00:08:28,479
not necessarily s-bomb tools

210
00:08:28,479 --> 00:08:30,879
to fix our vulnerabilities

211
00:08:30,879 --> 00:08:33,360
and mostly these vulnerabilities kind of

212
00:08:33,360 --> 00:08:34,719
lack

213
00:08:34,719 --> 00:08:36,240
more detailed information on

214
00:08:36,240 --> 00:08:38,479
exploitability and whatnot when we just

215
00:08:38,479 --> 00:08:40,799
purely relied on sca tool

216
00:08:40,799 --> 00:08:44,000
the third gap i have seen is almost 50

217
00:08:44,000 --> 00:08:46,160
percent of the organization

218
00:08:46,160 --> 00:08:47,839
do not have

219
00:08:47,839 --> 00:08:50,560
open source software security policy or

220
00:08:50,560 --> 00:08:52,640
standard rolled out

221
00:08:52,640 --> 00:08:54,800
what that does is every time there is a

222
00:08:54,800 --> 00:08:56,880
severe vulnerability like lock 4g or

223
00:08:56,880 --> 00:08:58,080
hard blade

224
00:08:58,080 --> 00:09:00,399
everybody loses sleep and they go start

225
00:09:00,399 --> 00:09:02,080
hunting what's the blast radius what's

226
00:09:02,080 --> 00:09:04,480
the impact let's go for upgrade if you

227
00:09:04,480 --> 00:09:06,880
are affected but we do not necessarily

228
00:09:06,880 --> 00:09:09,519
have a policy that can educate our

229
00:09:09,519 --> 00:09:12,160
developer or create a culture of

230
00:09:12,160 --> 00:09:14,480
automatic software updates

231
00:09:14,480 --> 00:09:16,800
regardless of vulnerability and we are

232
00:09:16,800 --> 00:09:19,040
going to talk how sbom can helps to

233
00:09:19,040 --> 00:09:21,040
achieve that state as well

234
00:09:21,040 --> 00:09:23,519
last thing as a result of lack of

235
00:09:23,519 --> 00:09:26,640
education lack of adequate tooling lack

236
00:09:26,640 --> 00:09:30,080
of standard and policy we see immature

237
00:09:30,080 --> 00:09:33,040
processes to upgrade oss

238
00:09:33,040 --> 00:09:35,440
many times if os upgrades are already

239
00:09:35,440 --> 00:09:37,920
integrated in repository there is a

240
00:09:37,920 --> 00:09:40,320
chance that they can break

241
00:09:40,320 --> 00:09:41,680
the service

242
00:09:41,680 --> 00:09:44,240
and cause regression to avoid all these

243
00:09:44,240 --> 00:09:46,959
problems let's see

244
00:09:46,959 --> 00:09:49,519
our main motivation is

245
00:09:49,519 --> 00:09:51,760
to improve the state of open source

246
00:09:51,760 --> 00:09:53,519
software security

247
00:09:53,519 --> 00:09:56,080
and to do that it is extremely important

248
00:09:56,080 --> 00:09:57,519
to understand

249
00:09:57,519 --> 00:09:59,680
how we can leverage software bill of

250
00:09:59,680 --> 00:10:02,160
material and what are the use cases

251
00:10:02,160 --> 00:10:05,519
traditionally we are quite familiar with

252
00:10:05,519 --> 00:10:08,240
s-bombs generated from source code but

253
00:10:08,240 --> 00:10:10,399
in today's talk hussein will be putting

254
00:10:10,399 --> 00:10:13,760
emphasis how we can generate s-bombs

255
00:10:13,760 --> 00:10:15,600
from different sources such as source

256
00:10:15,600 --> 00:10:18,160
code build time and run time and what

257
00:10:18,160 --> 00:10:20,079
are the unique advantages it can offer

258
00:10:20,079 --> 00:10:21,120
us

259
00:10:21,120 --> 00:10:23,680
to foster open source software security

260
00:10:23,680 --> 00:10:26,240
and lastly uh we would like to discuss

261
00:10:26,240 --> 00:10:28,640
some strategic initiative with that i

262
00:10:28,640 --> 00:10:32,560
would like to hand it over to usain

263
00:10:32,560 --> 00:10:34,000
thank you turkey

264
00:10:34,000 --> 00:10:36,720
so a warning before i go to the

265
00:10:36,720 --> 00:10:39,760
middle part section of the presentation

266
00:10:39,760 --> 00:10:41,839
and that would be a spam fatigue you

267
00:10:41,839 --> 00:10:44,160
have heard a lot of spam spam in the

268
00:10:44,160 --> 00:10:45,519
industry so

269
00:10:45,519 --> 00:10:47,279
but bear with me

270
00:10:47,279 --> 00:10:49,760
hopefully when we link spam concepts

271
00:10:49,760 --> 00:10:50,959
together

272
00:10:50,959 --> 00:10:55,360
hopefully we can get something out of it

273
00:10:55,360 --> 00:10:58,720
so what is a spam swami stands for

274
00:10:58,720 --> 00:11:00,880
software below materials

275
00:11:00,880 --> 00:11:04,480
and i'm very happy that alex friedman

276
00:11:04,480 --> 00:11:06,800
he's in this meeting

277
00:11:06,800 --> 00:11:08,320
and

278
00:11:08,320 --> 00:11:11,600
he's the swarm guy who basically drives

279
00:11:11,600 --> 00:11:14,320
a lot of initiatives around this bomb

280
00:11:14,320 --> 00:11:16,160
and next week they're going to have a

281
00:11:16,160 --> 00:11:18,079
big group of people getting together to

282
00:11:18,079 --> 00:11:21,440
talk about what is next step on spam

283
00:11:21,440 --> 00:11:23,200
where we can take it

284
00:11:23,200 --> 00:11:24,560
uh but

285
00:11:24,560 --> 00:11:26,240
thank you so much for all the great work

286
00:11:26,240 --> 00:11:28,880
that you have done in the domain and

287
00:11:28,880 --> 00:11:30,880
this definition comes from the various

288
00:11:30,880 --> 00:11:33,120
through documentations that ntia has

289
00:11:33,120 --> 00:11:34,880
provided around this bomb and the

290
00:11:34,880 --> 00:11:37,279
definition goes as

291
00:11:37,279 --> 00:11:39,760
spam is a nested inventory for software

292
00:11:39,760 --> 00:11:41,920
a list of ingredients that make up

293
00:11:41,920 --> 00:11:44,640
software components and if i want to

294
00:11:44,640 --> 00:11:46,000
draw some

295
00:11:46,000 --> 00:11:49,760
basically analogy in the domain of

296
00:11:49,760 --> 00:11:51,839
mechanical engineering

297
00:11:51,839 --> 00:11:55,200
this is not a new concept it's like 70

298
00:11:55,200 --> 00:11:58,240
years like 1960 industrial engineering

299
00:11:58,240 --> 00:12:00,160
and mechanical engineering they have

300
00:12:00,160 --> 00:12:00,959
been

301
00:12:00,959 --> 00:12:04,079
having this sort of diagrams that they

302
00:12:04,079 --> 00:12:06,240
basically specify what are the

303
00:12:06,240 --> 00:12:07,839
components that are being used in an

304
00:12:07,839 --> 00:12:10,160
engine for example what is the shape

305
00:12:10,160 --> 00:12:11,440
what are the

306
00:12:11,440 --> 00:12:13,839
you know lengths what different aspect

307
00:12:13,839 --> 00:12:15,040
of that

308
00:12:15,040 --> 00:12:17,680
to be able to for example diagnose if

309
00:12:17,680 --> 00:12:19,360
there is any problem in an engine they

310
00:12:19,360 --> 00:12:21,760
go back and see you know which part was

311
00:12:21,760 --> 00:12:24,240
this what was the producer and to be

312
00:12:24,240 --> 00:12:26,000
able to you know fix the problem

313
00:12:26,000 --> 00:12:28,079
identify and fix the problem

314
00:12:28,079 --> 00:12:30,320
the same goes for the food industry and

315
00:12:30,320 --> 00:12:32,399
chemical engineering

316
00:12:32,399 --> 00:12:34,320
for example there are you know customer

317
00:12:34,320 --> 00:12:38,959
phasing facing labels on any almost any

318
00:12:38,959 --> 00:12:39,839
uh

319
00:12:39,839 --> 00:12:42,639
thing that we used uh recently

320
00:12:42,639 --> 00:12:44,639
uh that says you know

321
00:12:44,639 --> 00:12:46,959
how much calorie this one has what are

322
00:12:46,959 --> 00:12:47,839
the

323
00:12:47,839 --> 00:12:50,560
most important you know

324
00:12:50,560 --> 00:12:53,200
materials that customers specifically

325
00:12:53,200 --> 00:12:54,480
want to know about

326
00:12:54,480 --> 00:12:55,440
um

327
00:12:55,440 --> 00:12:58,000
to be able to satisfy some of the use

328
00:12:58,000 --> 00:13:00,320
cases around for example if somebody has

329
00:13:00,320 --> 00:13:02,160
allergy they should know if there is

330
00:13:02,160 --> 00:13:06,760
something that they are allergic to

331
00:13:07,519 --> 00:13:11,120
but that definition of this bomb as

332
00:13:11,120 --> 00:13:12,399
it appears

333
00:13:12,399 --> 00:13:15,600
it sound that this bomb is only the list

334
00:13:15,600 --> 00:13:18,160
of dependencies or nested dependencies

335
00:13:18,160 --> 00:13:20,079
but i want to just put some emphasis

336
00:13:20,079 --> 00:13:23,279
here that s bomb is not only the list of

337
00:13:23,279 --> 00:13:26,720
dependency its dependency plus some

338
00:13:26,720 --> 00:13:28,000
context

339
00:13:28,000 --> 00:13:31,440
so in addition to the list of dependent

340
00:13:31,440 --> 00:13:34,240
dependency the suggested list of you

341
00:13:34,240 --> 00:13:36,320
know baseline information would be

342
00:13:36,320 --> 00:13:38,560
author name for example supplier name

343
00:13:38,560 --> 00:13:39,920
component name

344
00:13:39,920 --> 00:13:43,040
version string component hash a unique

345
00:13:43,040 --> 00:13:45,519
identifier and relation of an object to

346
00:13:45,519 --> 00:13:48,160
other objects in most of the cases it

347
00:13:48,160 --> 00:13:52,000
would be you know including relation one

348
00:13:52,000 --> 00:13:54,639
component could include other component

349
00:13:54,639 --> 00:13:56,959
but the relation could be

350
00:13:56,959 --> 00:13:59,680
um something else

351
00:13:59,680 --> 00:14:02,639
also you can add as many

352
00:14:02,639 --> 00:14:04,320
um other

353
00:14:04,320 --> 00:14:05,920
contextual information around

354
00:14:05,920 --> 00:14:08,639
dependencies like licensing

355
00:14:08,639 --> 00:14:11,920
um you know time sam end of life or

356
00:14:11,920 --> 00:14:13,600
grouping

357
00:14:13,600 --> 00:14:16,639
whatever you you can add as much context

358
00:14:16,639 --> 00:14:18,720
and these information are very powerful

359
00:14:18,720 --> 00:14:19,680
for you

360
00:14:19,680 --> 00:14:23,360
to satisfy the use cases uh that

361
00:14:23,360 --> 00:14:25,120
i will talk about

362
00:14:25,120 --> 00:14:27,760
so there are so many different use cases

363
00:14:27,760 --> 00:14:30,320
that we can imagine around this bomb so

364
00:14:30,320 --> 00:14:32,320
it's not only give me the list of

365
00:14:32,320 --> 00:14:35,440
dependencies it's gonna

366
00:14:35,440 --> 00:14:37,920
serve the company with different use

367
00:14:37,920 --> 00:14:39,839
cases there are tons of them this is

368
00:14:39,839 --> 00:14:41,920
based on the research that we have done

369
00:14:41,920 --> 00:14:44,079
within the company

370
00:14:44,079 --> 00:14:45,360
um

371
00:14:45,360 --> 00:14:48,000
but i'm gonna emphasize on two of them

372
00:14:48,000 --> 00:14:49,760
only one of them would be vulnerability

373
00:14:49,760 --> 00:14:51,680
management for discovering the

374
00:14:51,680 --> 00:14:53,360
vulnerabilities for example if you know

375
00:14:53,360 --> 00:14:56,000
that you have certain dependency to one

376
00:14:56,000 --> 00:14:58,480
specific open source project for short

377
00:14:58,480 --> 00:15:01,120
if that dependency is impacted by the

378
00:15:01,120 --> 00:15:04,399
recent cbe then you know that probably

379
00:15:04,399 --> 00:15:06,880
probably you are impacted but by that

380
00:15:06,880 --> 00:15:09,519
but not necessarily

381
00:15:09,519 --> 00:15:12,320
the other one is something that is

382
00:15:12,320 --> 00:15:13,680
becoming big

383
00:15:13,680 --> 00:15:16,480
more and more important is the software

384
00:15:16,480 --> 00:15:19,279
supply chain security as i will describe

385
00:15:19,279 --> 00:15:23,279
s-bomb is not only one point of view of

386
00:15:23,279 --> 00:15:25,600
your software but it could serve you to

387
00:15:25,600 --> 00:15:27,600
show the chain of the

388
00:15:27,600 --> 00:15:29,680
uh and the workflow

389
00:15:29,680 --> 00:15:33,199
of uh your software

390
00:15:33,199 --> 00:15:34,000
so

391
00:15:34,000 --> 00:15:36,000
to give you a bit more context of you

392
00:15:36,000 --> 00:15:38,959
know how this spam is gonna surface from

393
00:15:38,959 --> 00:15:41,440
the technical point of view is that when

394
00:15:41,440 --> 00:15:44,880
you describe a piece of software um

395
00:15:44,880 --> 00:15:46,320
you're gonna have

396
00:15:46,320 --> 00:15:48,880
a form of description of that

397
00:15:48,880 --> 00:15:49,839
um

398
00:15:49,839 --> 00:15:51,920
it could be free form you can you know

399
00:15:51,920 --> 00:15:55,040
choose how you want to present those

400
00:15:55,040 --> 00:15:57,440
data but fortunately there are two major

401
00:15:57,440 --> 00:16:00,240
standards one of them is pdx and the

402
00:16:00,240 --> 00:16:03,120
other one is psychologics spdics was

403
00:16:03,120 --> 00:16:05,120
created 2010

404
00:16:05,120 --> 00:16:08,560
the most recent one is 2017.

405
00:16:08,560 --> 00:16:09,360
the

406
00:16:09,360 --> 00:16:13,199
the major use case of svdx was around

407
00:16:13,199 --> 00:16:15,040
you know compliance

408
00:16:15,040 --> 00:16:16,880
to just show what are the components

409
00:16:16,880 --> 00:16:18,720
that i'm providing for this software

410
00:16:18,720 --> 00:16:20,639
specifically if there was a piece of

411
00:16:20,639 --> 00:16:23,279
software that was used by an external

412
00:16:23,279 --> 00:16:26,079
company a third party company you had to

413
00:16:26,079 --> 00:16:27,920
provide the list of ingredients of your

414
00:16:27,920 --> 00:16:30,880
software but the cycle on dx is more of

415
00:16:30,880 --> 00:16:32,560
you know more recent

416
00:16:32,560 --> 00:16:34,639
use cases

417
00:16:34,639 --> 00:16:37,600
this one is a specific example of you

418
00:16:37,600 --> 00:16:38,560
know

419
00:16:38,560 --> 00:16:41,839
um a software with its dependency with

420
00:16:41,839 --> 00:16:43,680
different levels and these are the

421
00:16:43,680 --> 00:16:46,480
descriptions of you know sbdx and

422
00:16:46,480 --> 00:16:48,800
psychologics of that

423
00:16:48,800 --> 00:16:50,480
but as i will describe

424
00:16:50,480 --> 00:16:52,880
um we shouldn't be worried about the

425
00:16:52,880 --> 00:16:56,000
formats because they are interchangeable

426
00:16:56,000 --> 00:16:58,399
uh and and there are tools to convert

427
00:16:58,399 --> 00:17:02,079
from one format to other format

428
00:17:02,320 --> 00:17:04,480
as truthy mentioned in the beginning of

429
00:17:04,480 --> 00:17:06,000
the talk

430
00:17:06,000 --> 00:17:07,119
you can

431
00:17:07,119 --> 00:17:08,559
create the

432
00:17:08,559 --> 00:17:11,520
spam or software bill of material

433
00:17:11,520 --> 00:17:14,319
in different stages of you know software

434
00:17:14,319 --> 00:17:17,119
creation basically software development

435
00:17:17,119 --> 00:17:18,480
lifecycle

436
00:17:18,480 --> 00:17:20,240
they could come from source code this is

437
00:17:20,240 --> 00:17:21,760
the most common

438
00:17:21,760 --> 00:17:23,119
case

439
00:17:23,119 --> 00:17:24,959
there are tools that they get the source

440
00:17:24,959 --> 00:17:26,400
code

441
00:17:26,400 --> 00:17:28,400
you run the command

442
00:17:28,400 --> 00:17:31,760
including 3v or other tools

443
00:17:31,760 --> 00:17:32,960
and they

444
00:17:32,960 --> 00:17:35,840
i have linked a basically when you have

445
00:17:35,840 --> 00:17:37,520
access to the

446
00:17:37,520 --> 00:17:39,440
slides you're going to see a big

447
00:17:39,440 --> 00:17:42,000
document including all the tooling that

448
00:17:42,000 --> 00:17:45,600
you can use mostly on the source code

449
00:17:45,600 --> 00:17:47,919
there are also integration with for

450
00:17:47,919 --> 00:17:50,960
example ci cd so you can

451
00:17:50,960 --> 00:17:53,679
add github actions to your source code

452
00:17:53,679 --> 00:17:56,160
so as you push new source code to your

453
00:17:56,160 --> 00:17:58,640
repository these spam are gonna get

454
00:17:58,640 --> 00:18:01,120
generated automatically you can you know

455
00:18:01,120 --> 00:18:05,280
push them reuse them and generate them

456
00:18:05,360 --> 00:18:07,600
and there are build time tools

457
00:18:07,600 --> 00:18:09,760
for example microsoft spam generation

458
00:18:09,760 --> 00:18:12,080
tool that you can use to give you the

459
00:18:12,080 --> 00:18:13,360
build time

460
00:18:13,360 --> 00:18:15,280
software bill of material which is you

461
00:18:15,280 --> 00:18:17,120
know something different so

462
00:18:17,120 --> 00:18:20,000
for example in addition to the context

463
00:18:20,000 --> 00:18:22,880
concept of the context that i mentioned

464
00:18:22,880 --> 00:18:25,760
so not only the actual software that you

465
00:18:25,760 --> 00:18:28,240
have has dependencies but the build tool

466
00:18:28,240 --> 00:18:30,720
that you are using has dependencies so

467
00:18:30,720 --> 00:18:33,039
for example if that build tool is also

468
00:18:33,039 --> 00:18:36,080
impacted by one specific vulnerability

469
00:18:36,080 --> 00:18:39,120
it might influence the

470
00:18:39,120 --> 00:18:41,600
final artifact that you generate so all

471
00:18:41,600 --> 00:18:43,280
of these are related and should be

472
00:18:43,280 --> 00:18:44,640
considered

473
00:18:44,640 --> 00:18:47,360
and the runtime dependency at the moment

474
00:18:47,360 --> 00:18:49,600
most of the full tools that provide

475
00:18:49,600 --> 00:18:51,760
application performance monitoring they

476
00:18:51,760 --> 00:18:53,760
have visibility to the components that

477
00:18:53,760 --> 00:18:56,240
your software is using and they will be

478
00:18:56,240 --> 00:18:57,919
able to

479
00:18:57,919 --> 00:18:59,200
generate

480
00:18:59,200 --> 00:19:01,280
sort of software bill of material for

481
00:19:01,280 --> 00:19:03,440
you

482
00:19:04,559 --> 00:19:06,240
but as i said like there are lots of

483
00:19:06,240 --> 00:19:09,039
hypes in industry around spam

484
00:19:09,039 --> 00:19:10,880
and people

485
00:19:10,880 --> 00:19:13,520
truly and genuinely started generating a

486
00:19:13,520 --> 00:19:16,880
spam from whatever software

487
00:19:16,880 --> 00:19:18,720
that they are using but there are

488
00:19:18,720 --> 00:19:20,400
challenges

489
00:19:20,400 --> 00:19:22,840
the first challenge is around

490
00:19:22,840 --> 00:19:24,880
tooling um

491
00:19:24,880 --> 00:19:26,720
so if you run two different tools for

492
00:19:26,720 --> 00:19:29,280
example on a one repository they're

493
00:19:29,280 --> 00:19:30,640
gonna give you different results

494
00:19:30,640 --> 00:19:32,240
different number of dependencies and

495
00:19:32,240 --> 00:19:34,640
different you know

496
00:19:34,640 --> 00:19:36,640
number of them for example

497
00:19:36,640 --> 00:19:40,559
i ran um two tools 3b and cyclone digs

498
00:19:40,559 --> 00:19:43,600
format on gotof and there are different

499
00:19:43,600 --> 00:19:45,280
number of dependencies of course i mean

500
00:19:45,280 --> 00:19:47,440
part of it could be because some of

501
00:19:47,440 --> 00:19:50,400
these tools include test time

502
00:19:50,400 --> 00:19:53,360
test dependencies or whatnot

503
00:19:53,360 --> 00:19:55,120
uh but also

504
00:19:55,120 --> 00:19:57,520
if you exclude them

505
00:19:57,520 --> 00:19:59,280
you still see differences between the

506
00:19:59,280 --> 00:20:00,480
number and

507
00:20:00,480 --> 00:20:03,360
you know dependencies that they report

508
00:20:03,360 --> 00:20:04,960
so this is

509
00:20:04,960 --> 00:20:08,000
one of the main challenges and

510
00:20:08,000 --> 00:20:09,760
one aspect of it is that some of the

511
00:20:09,760 --> 00:20:12,720
tooling are noisy basically to generate

512
00:20:12,720 --> 00:20:14,400
too much dependencies that you are not

513
00:20:14,400 --> 00:20:16,559
actually using

514
00:20:16,559 --> 00:20:18,799
them

515
00:20:19,360 --> 00:20:21,280
um

516
00:20:21,280 --> 00:20:23,520
the other challenge

517
00:20:23,520 --> 00:20:26,559
uh so so for the first uh

518
00:20:26,559 --> 00:20:28,080
uh basically

519
00:20:28,080 --> 00:20:30,000
item for the first challenge the

520
00:20:30,000 --> 00:20:32,240
recommendation is to go after something

521
00:20:32,240 --> 00:20:34,159
we call

522
00:20:34,159 --> 00:20:36,159
a basically

523
00:20:36,159 --> 00:20:37,120
correct

524
00:20:37,120 --> 00:20:39,919
tool for a specific language so for one

525
00:20:39,919 --> 00:20:42,240
specific ecosystem there could be some

526
00:20:42,240 --> 00:20:43,840
tooling

527
00:20:43,840 --> 00:20:45,919
that focus mostly on that specific

528
00:20:45,919 --> 00:20:49,360
language and they provide better quality

529
00:20:49,360 --> 00:20:51,679
swamp compared to some more general

530
00:20:51,679 --> 00:20:54,640
tooling for example from our experience

531
00:20:54,640 --> 00:20:57,600
cyclone dx gomod is providing better

532
00:20:57,600 --> 00:20:58,720
quality

533
00:20:58,720 --> 00:21:02,480
golang dependencies but eventually what

534
00:21:02,480 --> 00:21:04,400
industry is going to diverge is that

535
00:21:04,400 --> 00:21:07,360
each of these tooling like

536
00:21:07,360 --> 00:21:10,159
language specific tooling

537
00:21:10,159 --> 00:21:12,400
provide

538
00:21:12,400 --> 00:21:14,320
would be the base and then all the other

539
00:21:14,320 --> 00:21:16,320
tooling basically run a command for that

540
00:21:16,320 --> 00:21:17,280
specific

541
00:21:17,280 --> 00:21:21,039
language and they generate the spam

542
00:21:21,039 --> 00:21:23,520
so eventually the industry i believe

543
00:21:23,520 --> 00:21:25,679
that gonna converge to that point that

544
00:21:25,679 --> 00:21:29,679
we don't see these discrepancies anymore

545
00:21:29,679 --> 00:21:32,000
the other challenge is unsupported build

546
00:21:32,000 --> 00:21:34,640
systems like for example we don't have

547
00:21:34,640 --> 00:21:37,200
any tooling for generating a spawn for

548
00:21:37,200 --> 00:21:38,320
bazel

549
00:21:38,320 --> 00:21:41,120
uh build projects

550
00:21:41,120 --> 00:21:43,520
bono repo is one of the common

551
00:21:43,520 --> 00:21:45,760
challenges that industries have because

552
00:21:45,760 --> 00:21:47,600
you know everybody follows google google

553
00:21:47,600 --> 00:21:48,480
have

554
00:21:48,480 --> 00:21:51,280
has this monorepo

555
00:21:51,280 --> 00:21:54,080
system so in many companies uh there are

556
00:21:54,080 --> 00:21:56,240
mono repos but the thing that happens in

557
00:21:56,240 --> 00:21:59,360
monorepos there is no specified boundary

558
00:21:59,360 --> 00:22:01,039
between the projects from the

559
00:22:01,039 --> 00:22:03,360
perspective of you know these tools that

560
00:22:03,360 --> 00:22:06,240
they generate as bomb so you end up

561
00:22:06,240 --> 00:22:09,039
running a spam in the root project which

562
00:22:09,039 --> 00:22:11,039
is a collection of projects and you get

563
00:22:11,039 --> 00:22:12,720
a big spawn

564
00:22:12,720 --> 00:22:14,880
and those tools they don't understand

565
00:22:14,880 --> 00:22:16,799
this aesthetic folder is a separate

566
00:22:16,799 --> 00:22:18,960
server project

567
00:22:18,960 --> 00:22:21,840
um so they cannot provide a quality tool

568
00:22:21,840 --> 00:22:23,760
of course you can annotate your tooling

569
00:22:23,760 --> 00:22:26,640
and have a you know higher level tooling

570
00:22:26,640 --> 00:22:28,240
that

571
00:22:28,240 --> 00:22:31,039
uh help with that but at the moment uh

572
00:22:31,039 --> 00:22:35,120
it's not embedded in this bomb tooling

573
00:22:35,440 --> 00:22:37,440
uh the other challenge is limited

574
00:22:37,440 --> 00:22:41,840
supports for build time spam

575
00:22:41,919 --> 00:22:43,520
and

576
00:22:43,520 --> 00:22:45,600
i guess we have to wait and see

577
00:22:45,600 --> 00:22:47,520
how the industry goes in this direction

578
00:22:47,520 --> 00:22:50,480
to provide better support for

579
00:22:50,480 --> 00:22:53,600
build time spam supports

580
00:22:53,600 --> 00:22:55,760
and the last one which is not actually a

581
00:22:55,760 --> 00:22:56,880
challenge

582
00:22:56,880 --> 00:22:58,480
is most of the people are concerned

583
00:22:58,480 --> 00:23:00,000
about the formatting

584
00:23:00,000 --> 00:23:01,919
and i would say we shouldn't worry about

585
00:23:01,919 --> 00:23:03,840
the format because i mean they can be

586
00:23:03,840 --> 00:23:05,679
easily converted

587
00:23:05,679 --> 00:23:09,840
using the existing tools

588
00:23:10,960 --> 00:23:13,440
the other challenge in the domain of

589
00:23:13,440 --> 00:23:14,960
spom is that

590
00:23:14,960 --> 00:23:17,919
you know understanding of you know we

591
00:23:17,919 --> 00:23:20,559
have generated all these response

592
00:23:20,559 --> 00:23:23,600
but how can we use it why how should we

593
00:23:23,600 --> 00:23:26,320
use it right because when we generate

594
00:23:26,320 --> 00:23:29,120
lots of data it adds to the com

595
00:23:29,120 --> 00:23:31,919
confusion unless we know how should we

596
00:23:31,919 --> 00:23:33,520
use it

597
00:23:33,520 --> 00:23:35,440
and

598
00:23:35,440 --> 00:23:38,000
one of the directions that the industry

599
00:23:38,000 --> 00:23:41,279
is going towards is to basically utilize

600
00:23:41,279 --> 00:23:43,840
a spam for example for the vulnerability

601
00:23:43,840 --> 00:23:45,200
management

602
00:23:45,200 --> 00:23:46,080
um

603
00:23:46,080 --> 00:23:48,960
and that is inclusion of you know some

604
00:23:48,960 --> 00:23:51,360
more context

605
00:23:51,360 --> 00:23:53,679
to a spam for example if you are

606
00:23:53,679 --> 00:23:55,520
familiar with there is a concept of

607
00:23:55,520 --> 00:23:57,760
vulnerability exchange

608
00:23:57,760 --> 00:24:00,799
uh that is an extra piece of information

609
00:24:00,799 --> 00:24:02,559
which leads to one the list of

610
00:24:02,559 --> 00:24:04,159
vulnerabilities that your software is

611
00:24:04,159 --> 00:24:06,400
actually impacted by

612
00:24:06,400 --> 00:24:07,840
and if you

613
00:24:07,840 --> 00:24:09,520
basically

614
00:24:09,520 --> 00:24:11,840
uh couple that with the spam information

615
00:24:11,840 --> 00:24:13,919
or use a spam information to generate

616
00:24:13,919 --> 00:24:16,320
the x it's going to be a very

617
00:24:16,320 --> 00:24:19,679
powerful tooling

618
00:24:19,679 --> 00:24:21,840
so as tripty mentioned

619
00:24:21,840 --> 00:24:23,039
uh

620
00:24:23,039 --> 00:24:26,159
basically we have to think about

621
00:24:26,159 --> 00:24:29,840
how we want to use spam information

622
00:24:29,840 --> 00:24:31,360
in the context of

623
00:24:31,360 --> 00:24:34,240
open source software security and one

624
00:24:34,240 --> 00:24:37,679
aspect is automated software upgrade so

625
00:24:37,679 --> 00:24:39,600
when we generate sperm information

626
00:24:39,600 --> 00:24:41,919
automatically when we identify which

627
00:24:41,919 --> 00:24:43,360
specific

628
00:24:43,360 --> 00:24:45,919
vulnerability we are impacted with using

629
00:24:45,919 --> 00:24:49,120
the vex information we will be able to

630
00:24:49,120 --> 00:24:51,440
automatically use some tooling to

631
00:24:51,440 --> 00:24:53,840
automatically upgrade for example that

632
00:24:53,840 --> 00:24:55,279
dependency

633
00:24:55,279 --> 00:24:58,480
that we have if there is a new version

634
00:24:58,480 --> 00:25:02,159
that we want to fix um so

635
00:25:02,159 --> 00:25:04,480
what i'm trying to say here is that a

636
00:25:04,480 --> 00:25:06,799
spam by itself is a collection a

637
00:25:06,799 --> 00:25:08,480
database of you know lists of

638
00:25:08,480 --> 00:25:10,480
dependencies but we have to put it in

639
00:25:10,480 --> 00:25:11,760
the context

640
00:25:11,760 --> 00:25:13,600
and and and

641
00:25:13,600 --> 00:25:16,240
copy it with different

642
00:25:16,240 --> 00:25:19,679
useful information including vx

643
00:25:19,679 --> 00:25:21,520
to be able to

644
00:25:21,520 --> 00:25:24,799
take a proper action

645
00:25:26,640 --> 00:25:28,880
um

646
00:25:28,880 --> 00:25:30,240
in uh

647
00:25:30,240 --> 00:25:32,320
in this slide that i mentioned about the

648
00:25:32,320 --> 00:25:33,440
um

649
00:25:33,440 --> 00:25:35,440
shortcoming of this bomb

650
00:25:35,440 --> 00:25:36,880
one was that

651
00:25:36,880 --> 00:25:39,679
one was accuracy of the information that

652
00:25:39,679 --> 00:25:41,600
they get from this bomb for example

653
00:25:41,600 --> 00:25:44,559
there were dependencies in the

654
00:25:44,559 --> 00:25:47,039
from the source that they weren't

655
00:25:47,039 --> 00:25:49,200
accurate enough

656
00:25:49,200 --> 00:25:51,919
so one approach to

657
00:25:51,919 --> 00:25:53,120
overcome

658
00:25:53,120 --> 00:25:55,360
the noisy information is to put

659
00:25:55,360 --> 00:25:58,320
information of a spawn from different

660
00:25:58,320 --> 00:26:01,279
stages of software for example if we

661
00:26:01,279 --> 00:26:02,720
have

662
00:26:02,720 --> 00:26:04,880
a collection of spam generated from

663
00:26:04,880 --> 00:26:07,760
source code from build time and from

664
00:26:07,760 --> 00:26:09,120
runtime

665
00:26:09,120 --> 00:26:10,720
it's going to help us to reduce some of

666
00:26:10,720 --> 00:26:12,400
the noises for example from the source

667
00:26:12,400 --> 00:26:15,360
time we would see 10 dependency in the

668
00:26:15,360 --> 00:26:17,760
run time with vc for example 3

669
00:26:17,760 --> 00:26:19,520
dependency

670
00:26:19,520 --> 00:26:22,320
so at least this means that those 7

671
00:26:22,320 --> 00:26:24,240
extra dependencies that we see from the

672
00:26:24,240 --> 00:26:27,520
source time shouldn't be the focus or

673
00:26:27,520 --> 00:26:29,520
the highest priority

674
00:26:29,520 --> 00:26:32,240
uh if not they are false positive

675
00:26:32,240 --> 00:26:34,559
otherwise but the collection of these

676
00:26:34,559 --> 00:26:36,880
two pieces of information shows us like

677
00:26:36,880 --> 00:26:38,720
what should be the focus and what is the

678
00:26:38,720 --> 00:26:40,240
priority

679
00:26:40,240 --> 00:26:42,480
and also some piece of information that

680
00:26:42,480 --> 00:26:45,919
we get from the build time dependency

681
00:26:45,919 --> 00:26:48,720
is something that we don't get from

682
00:26:48,720 --> 00:26:50,960
source and runtime because we don't know

683
00:26:50,960 --> 00:26:53,200
how this piece of software was built

684
00:26:53,200 --> 00:26:55,679
what was included in the build system to

685
00:26:55,679 --> 00:26:57,919
be able to find some of the

686
00:26:57,919 --> 00:27:00,799
vulnerabilities that the system has

687
00:27:00,799 --> 00:27:01,840
so

688
00:27:01,840 --> 00:27:03,760
um putting this piece of information

689
00:27:03,760 --> 00:27:05,679
together is going to help us to know

690
00:27:05,679 --> 00:27:08,000
which vulnerability is important

691
00:27:08,000 --> 00:27:09,919
when we see them in runtime they're the

692
00:27:09,919 --> 00:27:12,320
most important

693
00:27:12,320 --> 00:27:13,279
to know

694
00:27:13,279 --> 00:27:15,279
how should we fix them for example if

695
00:27:15,279 --> 00:27:18,559
you only have the runtime

696
00:27:18,559 --> 00:27:20,080
dependencies

697
00:27:20,080 --> 00:27:21,600
when you want to fix them you don't know

698
00:27:21,600 --> 00:27:23,760
what is the source code you can trace

699
00:27:23,760 --> 00:27:26,080
them back and see you know

700
00:27:26,080 --> 00:27:28,880
what happened during the sdlc that we

701
00:27:28,880 --> 00:27:31,440
ended up in this situation

702
00:27:31,440 --> 00:27:34,159
so the conclusion here in this slide is

703
00:27:34,159 --> 00:27:36,320
that you know we need all these three

704
00:27:36,320 --> 00:27:38,960
pieces of information together

705
00:27:38,960 --> 00:27:42,000
uh to put them together to be able to

706
00:27:42,000 --> 00:27:43,600
have a usable

707
00:27:43,600 --> 00:27:46,240
uh basically a spam that is gonna be

708
00:27:46,240 --> 00:27:50,720
less noisy and can serve us in the

709
00:27:50,720 --> 00:27:53,200
use cases that we mentioned

710
00:27:53,200 --> 00:27:55,840
as an illustration of the last point

711
00:27:55,840 --> 00:27:59,039
um as you know datadog has an agent the

712
00:27:59,039 --> 00:28:01,200
agent is open source because

713
00:28:01,200 --> 00:28:03,520
customers have to install this piece of

714
00:28:03,520 --> 00:28:05,120
software on their

715
00:28:05,120 --> 00:28:09,439
infrastructure we have to provide that

716
00:28:09,600 --> 00:28:11,919
but at the time that you see that for

717
00:28:11,919 --> 00:28:14,159
example this bomb from the source code

718
00:28:14,159 --> 00:28:16,159
you see a bunch of dependencies dd

719
00:28:16,159 --> 00:28:19,039
tracer go proto buff with this version

720
00:28:19,039 --> 00:28:21,840
with this package url

721
00:28:21,840 --> 00:28:24,880
but what you don't see from the

722
00:28:24,880 --> 00:28:27,520
from the source time is

723
00:28:27,520 --> 00:28:29,200
build time is spawn which is like the

724
00:28:29,200 --> 00:28:31,600
version of pythons that we are using

725
00:28:31,600 --> 00:28:35,279
pylint and of course there is a link

726
00:28:35,279 --> 00:28:37,679
in the build time that is gonna be

727
00:28:37,679 --> 00:28:39,520
referring to this

728
00:28:39,520 --> 00:28:41,679
s bomb

729
00:28:41,679 --> 00:28:43,600
but there are tons of other information

730
00:28:43,600 --> 00:28:46,080
that is not included in the source code

731
00:28:46,080 --> 00:28:47,039
and

732
00:28:47,039 --> 00:28:48,880
basically when you put these two pieces

733
00:28:48,880 --> 00:28:50,000
together

734
00:28:50,000 --> 00:28:51,840
um you're gonna see the

735
00:28:51,840 --> 00:28:54,399
basically 2d picture

736
00:28:54,399 --> 00:28:56,960
of this bomb if you add runtime you're

737
00:28:56,960 --> 00:28:58,399
going to see the 3d

738
00:28:58,399 --> 00:29:02,080
which are you know helping you

739
00:29:02,559 --> 00:29:03,840
to

740
00:29:03,840 --> 00:29:05,679
basically go through the use cases that

741
00:29:05,679 --> 00:29:07,120
i mentioned

742
00:29:07,120 --> 00:29:08,559
with that i'm going to hand it over to

743
00:29:08,559 --> 00:29:10,880
troop t

744
00:29:10,880 --> 00:29:13,039
thank you hussain uh just to put things

745
00:29:13,039 --> 00:29:15,760
into perspective datadog agent has more

746
00:29:15,760 --> 00:29:18,559
than 1600 dependencies

747
00:29:18,559 --> 00:29:21,279
and for the sake of simplicity we only

748
00:29:21,279 --> 00:29:24,559
showed a snapshot the major difference

749
00:29:24,559 --> 00:29:25,440
between

750
00:29:25,440 --> 00:29:27,919
s-bomb generated from source code as

751
00:29:27,919 --> 00:29:32,080
well as from you know build time

752
00:29:32,080 --> 00:29:34,240
now let's talk about some of the other

753
00:29:34,240 --> 00:29:36,399
strategic initiative let's say

754
00:29:36,399 --> 00:29:37,360
using

755
00:29:37,360 --> 00:29:39,760
s-bomb generated from source build

756
00:29:39,760 --> 00:29:41,840
runtime we are getting accurate

757
00:29:41,840 --> 00:29:44,240
information is that sufficient to drive

758
00:29:44,240 --> 00:29:46,480
remediation at scale

759
00:29:46,480 --> 00:29:47,840
probably not

760
00:29:47,840 --> 00:29:50,559
so in order to do that in order to you

761
00:29:50,559 --> 00:29:53,679
know our s bombs to be really effective

762
00:29:53,679 --> 00:29:55,840
what other initiatives we can

763
00:29:55,840 --> 00:29:56,960
take

764
00:29:56,960 --> 00:29:59,440
to help with the situation of open

765
00:29:59,440 --> 00:30:02,240
source software security so the number

766
00:30:02,240 --> 00:30:04,080
one suggestion is

767
00:30:04,080 --> 00:30:08,678
start training your developers

768
00:30:09,760 --> 00:30:12,080
if you guys have programs like security

769
00:30:12,080 --> 00:30:15,039
champions security ambassador program

770
00:30:15,039 --> 00:30:19,440
teach your developers about secure sdlc

771
00:30:19,440 --> 00:30:20,480
how to

772
00:30:20,480 --> 00:30:23,039
design features architecture from

773
00:30:23,039 --> 00:30:24,880
security point of view

774
00:30:24,880 --> 00:30:27,760
put special emphasis on secure coding

775
00:30:27,760 --> 00:30:31,120
guidelines secure ci cd

776
00:30:31,120 --> 00:30:33,840
teach them how to use basic security

777
00:30:33,840 --> 00:30:36,960
tools like static code analyzer

778
00:30:36,960 --> 00:30:39,360
when we publish articles don't we all

779
00:30:39,360 --> 00:30:41,840
use spell check

780
00:30:41,840 --> 00:30:44,080
why can't we do with the source code

781
00:30:44,080 --> 00:30:45,120
right

782
00:30:45,120 --> 00:30:48,480
let's make sure our developers use high

783
00:30:48,480 --> 00:30:50,799
quality static code analysis tools just

784
00:30:50,799 --> 00:30:53,120
like a spell check

785
00:30:53,120 --> 00:30:55,279
for whatever reason let's say you guys

786
00:30:55,279 --> 00:30:57,600
don't have your very own security

787
00:30:57,600 --> 00:30:59,919
champions program or developer education

788
00:30:59,919 --> 00:31:02,480
program then you can rely on some of the

789
00:31:02,480 --> 00:31:04,720
open source

790
00:31:04,720 --> 00:31:07,399
foundations that i have listed here

791
00:31:07,399 --> 00:31:11,840
first.org has excellent two hours long

792
00:31:11,840 --> 00:31:14,799
training on how to prioritize technical

793
00:31:14,799 --> 00:31:18,080
vulnerabilities and severity open ssf

794
00:31:18,080 --> 00:31:20,799
has all these programs freely available

795
00:31:20,799 --> 00:31:23,600
for our open source software developers

796
00:31:23,600 --> 00:31:24,640
so that

797
00:31:24,640 --> 00:31:26,000
they can

798
00:31:26,000 --> 00:31:27,919
learn about these vulnerabilities and

799
00:31:27,919 --> 00:31:30,159
start preventing introducing these

800
00:31:30,159 --> 00:31:33,279
security flaws in our code

801
00:31:33,279 --> 00:31:36,799
last i would say that

802
00:31:36,799 --> 00:31:38,000
generate

803
00:31:38,000 --> 00:31:39,600
or create

804
00:31:39,600 --> 00:31:42,640
a culture of security so that developers

805
00:31:42,640 --> 00:31:45,279
feel empowered to own security from end

806
00:31:45,279 --> 00:31:46,399
to end

807
00:31:46,399 --> 00:31:48,960
when it comes to usability when it comes

808
00:31:48,960 --> 00:31:51,679
to scalability performance developers do

809
00:31:51,679 --> 00:31:53,919
care about these things right so when it

810
00:31:53,919 --> 00:31:56,000
comes to security it's not only security

811
00:31:56,000 --> 00:31:58,159
teams responsibility they should own it

812
00:31:58,159 --> 00:32:00,240
end to end and we should act like

813
00:32:00,240 --> 00:32:03,760
trusted security advisors

814
00:32:04,480 --> 00:32:07,200
that was about education now let's focus

815
00:32:07,200 --> 00:32:10,159
on what other things we can do

816
00:32:10,159 --> 00:32:11,360
so

817
00:32:11,360 --> 00:32:14,320
using s-bomb accurate detection is

818
00:32:14,320 --> 00:32:16,640
awesome it reduces noise

819
00:32:16,640 --> 00:32:19,120
it gives us exact list of

820
00:32:19,120 --> 00:32:21,120
uh you know software upgrades that are

821
00:32:21,120 --> 00:32:22,720
necessary

822
00:32:22,720 --> 00:32:25,200
but that's a very reactive approach and

823
00:32:25,200 --> 00:32:28,320
when things like lock 4g or hard blade

824
00:32:28,320 --> 00:32:29,279
you know

825
00:32:29,279 --> 00:32:31,519
comes we want to use that reactive

826
00:32:31,519 --> 00:32:34,159
approach but as such that's not the

827
00:32:34,159 --> 00:32:36,159
approach which is scalable

828
00:32:36,159 --> 00:32:38,559
so we need to create an engineering

829
00:32:38,559 --> 00:32:42,559
culture where we can teach our engineers

830
00:32:42,559 --> 00:32:45,360
to get into the habit of doing automated

831
00:32:45,360 --> 00:32:47,919
software upgrades even if there are no

832
00:32:47,919 --> 00:32:50,240
uh vulnerabilities right

833
00:32:50,240 --> 00:32:52,559
we shouldn't wait for vulnerabilities to

834
00:32:52,559 --> 00:32:54,240
start doing upgrades

835
00:32:54,240 --> 00:32:57,200
and as i mentioned earlier almost 40 to

836
00:32:57,200 --> 00:33:00,000
50 percent of organization do not have

837
00:33:00,000 --> 00:33:02,159
such policy that will enforce

838
00:33:02,159 --> 00:33:05,039
engineering to get into that habit

839
00:33:05,039 --> 00:33:07,200
so we literally need to sit down with

840
00:33:07,200 --> 00:33:09,279
each and every engineering team

841
00:33:09,279 --> 00:33:11,679
understand their s bomb software

842
00:33:11,679 --> 00:33:14,159
composition analysis which components

843
00:33:14,159 --> 00:33:16,159
are high impact and that can cause

844
00:33:16,159 --> 00:33:18,640
regression versus which components are

845
00:33:18,640 --> 00:33:20,880
low impact that we can upgrade on the

846
00:33:20,880 --> 00:33:22,960
fly few times a week or few times a

847
00:33:22,960 --> 00:33:26,480
month get an agreement with them

848
00:33:26,480 --> 00:33:28,240
to you know

849
00:33:28,240 --> 00:33:30,960
frequency of upgrades and whatnot

850
00:33:30,960 --> 00:33:33,360
something that is high impact for one

851
00:33:33,360 --> 00:33:35,519
team may not be high impact for another

852
00:33:35,519 --> 00:33:37,120
team depending on the design and

853
00:33:37,120 --> 00:33:39,840
architecture we can find all this

854
00:33:39,840 --> 00:33:43,120
information only after having an honest

855
00:33:43,120 --> 00:33:44,960
talk with them

856
00:33:44,960 --> 00:33:47,360
so definitely uh beside besides

857
00:33:47,360 --> 00:33:50,320
generating s-bombs or rolling out fancy

858
00:33:50,320 --> 00:33:51,279
tool

859
00:33:51,279 --> 00:33:52,559
sit down with your engineering

860
00:33:52,559 --> 00:33:55,039
leadership and establish an automated

861
00:33:55,039 --> 00:33:57,679
software upgrade program get that policy

862
00:33:57,679 --> 00:34:00,240
into place

863
00:34:00,399 --> 00:34:03,200
now let's talk about how we can go about

864
00:34:03,200 --> 00:34:05,360
building such policy

865
00:34:05,360 --> 00:34:08,719
so start with the licensing file

866
00:34:08,719 --> 00:34:12,000
or the s-bomb output of different

867
00:34:12,000 --> 00:34:12,960
products

868
00:34:12,960 --> 00:34:14,960
i understand this may not be a perfect

869
00:34:14,960 --> 00:34:17,199
list but that's a good starting point

870
00:34:17,199 --> 00:34:19,199
and as i mentioned earlier

871
00:34:19,199 --> 00:34:21,839
for each team for each product or major

872
00:34:21,839 --> 00:34:24,480
component create a list of high impact

873
00:34:24,480 --> 00:34:26,560
components that we cannot afford to

874
00:34:26,560 --> 00:34:28,639
upgrade every now and then

875
00:34:28,639 --> 00:34:30,719
maybe you know postgres is the high

876
00:34:30,719 --> 00:34:32,079
impact

877
00:34:32,079 --> 00:34:34,000
component that we can afford to upgrade

878
00:34:34,000 --> 00:34:36,800
only twice a year

879
00:34:36,800 --> 00:34:38,639
whereas some other libraries such as

880
00:34:38,639 --> 00:34:41,119
rubygem we can upgrade now and then and

881
00:34:41,119 --> 00:34:42,719
it's going to be different for each team

882
00:34:42,719 --> 00:34:46,879
so get that agreement uh establish sla

883
00:34:46,879 --> 00:34:48,960
communicate that schedule as part of

884
00:34:48,960 --> 00:34:50,800
their sprint planning and quarterly

885
00:34:50,800 --> 00:34:53,119
planning so that they are well aware

886
00:34:53,119 --> 00:34:54,719
that this is coming and it's not a

887
00:34:54,719 --> 00:34:57,359
surprise you know the way vulnerability

888
00:34:57,359 --> 00:34:59,520
a severe vulnerability randomizes all of

889
00:34:59,520 --> 00:35:02,400
us we we all hate that right

890
00:35:02,400 --> 00:35:05,440
ha developing the habit of you know

891
00:35:05,440 --> 00:35:08,079
regular upgrades will make that

892
00:35:08,079 --> 00:35:11,440
randomization as minimum as possible

893
00:35:11,440 --> 00:35:13,359
and eventually create the culture of

894
00:35:13,359 --> 00:35:15,680
staying on top of your upgrades

895
00:35:15,680 --> 00:35:17,520
including end of life

896
00:35:17,520 --> 00:35:19,599
because end of life component

897
00:35:19,599 --> 00:35:21,520
they introduce operational risk when

898
00:35:21,520 --> 00:35:23,920
certain components are not supported

899
00:35:23,920 --> 00:35:27,359
we cannot rely on those that code

900
00:35:27,359 --> 00:35:30,720
anything can be a weakest link

901
00:35:30,720 --> 00:35:32,960
with that uh let me discuss some of the

902
00:35:32,960 --> 00:35:35,040
key takeaways

903
00:35:35,040 --> 00:35:37,280
so open source software

904
00:35:37,280 --> 00:35:39,680
supply chain related security issues

905
00:35:39,680 --> 00:35:42,560
they are unavoidable they are not going

906
00:35:42,560 --> 00:35:44,560
anywhere

907
00:35:44,560 --> 00:35:46,880
but there is a ray of hope

908
00:35:46,880 --> 00:35:49,839
s-bomb generated from source code

909
00:35:49,839 --> 00:35:52,480
plus build plus runtime as hussein

910
00:35:52,480 --> 00:35:55,599
explain can definitely help to reduce

911
00:35:55,599 --> 00:35:56,960
that noise

912
00:35:56,960 --> 00:36:00,079
and improve the overall accuracy

913
00:36:00,079 --> 00:36:03,200
depending on the use case of s-bomb

914
00:36:03,200 --> 00:36:04,240
we can

915
00:36:04,240 --> 00:36:06,240
add context for example in case of

916
00:36:06,240 --> 00:36:09,040
vulnerability we can add vulnerability

917
00:36:09,040 --> 00:36:11,760
exploitability information

918
00:36:11,760 --> 00:36:13,839
to drive prioritization

919
00:36:13,839 --> 00:36:15,839
and other strategic initiatives such as

920
00:36:15,839 --> 00:36:17,760
building open source software security

921
00:36:17,760 --> 00:36:18,880
policy

922
00:36:18,880 --> 00:36:20,880
plus building developer security

923
00:36:20,880 --> 00:36:24,800
education program these are priceless

924
00:36:24,800 --> 00:36:27,520
now call for action

925
00:36:27,520 --> 00:36:29,599
if you don't remember anything from this

926
00:36:29,599 --> 00:36:31,839
talk i want you to remember these three

927
00:36:31,839 --> 00:36:33,520
things

928
00:36:33,520 --> 00:36:37,040
first do not rely on sbom generated just

929
00:36:37,040 --> 00:36:38,880
from source code

930
00:36:38,880 --> 00:36:41,680
find tools and mechanisms

931
00:36:41,680 --> 00:36:43,440
that can help you

932
00:36:43,440 --> 00:36:45,839
combine the result of s-bomb generated

933
00:36:45,839 --> 00:36:49,599
from build source and run time

934
00:36:49,599 --> 00:36:50,640
second

935
00:36:50,640 --> 00:36:52,320
always think about

936
00:36:52,320 --> 00:36:54,480
the context

937
00:36:54,480 --> 00:36:55,520
such as

938
00:36:55,520 --> 00:36:57,440
vulnerability exchange information when

939
00:36:57,440 --> 00:37:00,560
the context is added to s-bomb it

940
00:37:00,560 --> 00:37:03,040
creates really valuable information and

941
00:37:03,040 --> 00:37:05,040
with the help of open source software

942
00:37:05,040 --> 00:37:07,280
policy you can improve the

943
00:37:07,280 --> 00:37:09,440
prioritization problem that most of the

944
00:37:09,440 --> 00:37:12,640
organization face with software upgrades

945
00:37:12,640 --> 00:37:15,280
and last call for action

946
00:37:15,280 --> 00:37:17,839
please please consider rolling out a

947
00:37:17,839 --> 00:37:20,560
developer security education to elevate

948
00:37:20,560 --> 00:37:22,880
the overall software open source

949
00:37:22,880 --> 00:37:24,960
software security state

950
00:37:24,960 --> 00:37:27,359
more our developers are empowered less

951
00:37:27,359 --> 00:37:28,880
security flaws they are going to

952
00:37:28,880 --> 00:37:31,920
introduce in code

953
00:37:32,880 --> 00:37:35,839
with that uh thank you so much besides

954
00:37:35,839 --> 00:37:38,240
for having us here and we are open for

955
00:37:38,240 --> 00:37:41,240
questions

956
00:37:43,270 --> 00:37:46,389
[Applause]

957
00:37:51,599 --> 00:37:52,800
so i just wonder if you have any

958
00:37:52,800 --> 00:37:55,119
examples of people that are using

959
00:37:55,119 --> 00:37:56,400
s-bombs

960
00:37:56,400 --> 00:37:57,920
consuming them

961
00:37:57,920 --> 00:37:59,680
and doing stuff with them because i know

962
00:37:59,680 --> 00:38:01,440
i've been asked for them

963
00:38:01,440 --> 00:38:04,640
and i asked to record format and i get

964
00:38:04,640 --> 00:38:06,880
answers like excel

965
00:38:06,880 --> 00:38:08,720
they've been told they need an s-bomb

966
00:38:08,720 --> 00:38:10,400
but they have no capability of actually

967
00:38:10,400 --> 00:38:13,520
using or understanding an s-prompt so

968
00:38:13,520 --> 00:38:15,440
we have good tools to generate them they

969
00:38:15,440 --> 00:38:17,040
may not be accurate yet

970
00:38:17,040 --> 00:38:18,960
but what are the tools to consume them

971
00:38:18,960 --> 00:38:20,960
and generate actionable you know

972
00:38:20,960 --> 00:38:24,640
intelligence and actions off of them

973
00:38:26,480 --> 00:38:29,119
so i i can't really

974
00:38:29,119 --> 00:38:30,880
think about the tooling that they

975
00:38:30,880 --> 00:38:32,720
provide this service

976
00:38:32,720 --> 00:38:35,040
uh but i guess there are platforms you

977
00:38:35,040 --> 00:38:36,720
can i mean eventually when you have this

978
00:38:36,720 --> 00:38:38,640
bomb information you can yourself put

979
00:38:38,640 --> 00:38:41,280
them in the form of a database and make

980
00:38:41,280 --> 00:38:43,520
them queryable that would be the closest

981
00:38:43,520 --> 00:38:45,520
suggestion that i would make

982
00:38:45,520 --> 00:38:48,240
but but there are already um

983
00:38:48,240 --> 00:38:50,400
commercial tools that they try to you

984
00:38:50,400 --> 00:38:52,720
know make them searchable linkable

985
00:38:52,720 --> 00:38:54,960
and you know also when you have that in

986
00:38:54,960 --> 00:38:56,720
your database if you have

987
00:38:56,720 --> 00:38:58,640
extra information about you know

988
00:38:58,640 --> 00:39:00,480
anything like contextual information you

989
00:39:00,480 --> 00:39:02,160
can link them join them together to make

990
00:39:02,160 --> 00:39:04,720
them usable so i would say you know

991
00:39:04,720 --> 00:39:06,720
the first step would be to put them in

992
00:39:06,720 --> 00:39:11,959
form of a searchable database yeah

993
00:39:15,200 --> 00:39:18,078
any other question

994
00:39:18,160 --> 00:39:21,520
please keep your mask down when you uh

995
00:39:21,520 --> 00:39:25,200
otherwise it becomes difficult to hear

996
00:39:25,520 --> 00:39:28,800
sure so uh let's say for example that

997
00:39:28,800 --> 00:39:31,599
we manage the problem of having everyone

998
00:39:31,599 --> 00:39:34,320
generate the s bond in a specific format

999
00:39:34,320 --> 00:39:36,960
now let's add that we work in an

1000
00:39:36,960 --> 00:39:38,560
organization

1001
00:39:38,560 --> 00:39:41,760
not with one product but with

1002
00:39:41,760 --> 00:39:44,320
millions of products okay so that will

1003
00:39:44,320 --> 00:39:46,960
generate a fatigue in the alerts a

1004
00:39:46,960 --> 00:39:48,320
fatigue in the amount of risk to

1005
00:39:48,320 --> 00:39:51,119
prioritize do you have any learnings on

1006
00:39:51,119 --> 00:39:53,040
how to manage that

1007
00:39:53,040 --> 00:39:54,960
increasing risk

1008
00:39:54,960 --> 00:39:57,119
like taken into account in application

1009
00:39:57,119 --> 00:39:59,040
security we're always going to be out

1010
00:39:59,040 --> 00:40:00,720
proportioned by the amount of things to

1011
00:40:00,720 --> 00:40:02,879
do

1012
00:40:04,560 --> 00:40:07,200
that's again a good great question so

1013
00:40:07,200 --> 00:40:09,839
when we have this collection of

1014
00:40:09,839 --> 00:40:12,160
spam from different software that our

1015
00:40:12,160 --> 00:40:14,720
system is using how we want to basically

1016
00:40:14,720 --> 00:40:16,640
prioritize the vulnerabilities that we

1017
00:40:16,640 --> 00:40:18,560
see for example

1018
00:40:18,560 --> 00:40:20,480
from the list of them and i would say

1019
00:40:20,480 --> 00:40:23,040
like the same approach we have to

1020
00:40:23,040 --> 00:40:25,839
i mean this is a great question to think

1021
00:40:25,839 --> 00:40:28,240
of like a priority perspective of these

1022
00:40:28,240 --> 00:40:30,720
dependencies i would say start from the

1023
00:40:30,720 --> 00:40:32,160
runtime

1024
00:40:32,160 --> 00:40:33,839
so they see the thing that you see in

1025
00:40:33,839 --> 00:40:36,560
the runtime are dependencies that are

1026
00:40:36,560 --> 00:40:38,640
you are actually using them

1027
00:40:38,640 --> 00:40:40,720
so the list that initially the list that

1028
00:40:40,720 --> 00:40:43,200
you get mostly are from the source time

1029
00:40:43,200 --> 00:40:45,520
as well right that's usually what

1030
00:40:45,520 --> 00:40:47,920
happens so if you have some tooling like

1031
00:40:47,920 --> 00:40:50,319
application performance monitoring tools

1032
00:40:50,319 --> 00:40:52,319
that they have visibility to actual

1033
00:40:52,319 --> 00:40:53,920
dependencies that you are using based

1034
00:40:53,920 --> 00:40:55,040
off of this

1035
00:40:55,040 --> 00:40:56,480
software

1036
00:40:56,480 --> 00:40:59,520
uh that is a great starting point to see

1037
00:40:59,520 --> 00:41:00,560
you know

1038
00:41:00,560 --> 00:41:02,960
uh the source code it announces that

1039
00:41:02,960 --> 00:41:06,160
there are you know 2000 dependencies and

1040
00:41:06,160 --> 00:41:08,319
then in the runtime you only see 10 of

1041
00:41:08,319 --> 00:41:11,200
them so those 10 dependencies are

1042
00:41:11,200 --> 00:41:13,599
basically the greatest sr but then you

1043
00:41:13,599 --> 00:41:16,240
have enough time to go over

1044
00:41:16,240 --> 00:41:17,920
the list of you know vulnerabilities of

1045
00:41:17,920 --> 00:41:20,720
the source code base that's the

1046
00:41:20,720 --> 00:41:23,040
lowest hanging fruit but you can define

1047
00:41:23,040 --> 00:41:25,119
different measures like for example

1048
00:41:25,119 --> 00:41:27,040
recently google and some other

1049
00:41:27,040 --> 00:41:29,520
developers they have provided the

1050
00:41:29,520 --> 00:41:32,720
ranking and rating of the open source

1051
00:41:32,720 --> 00:41:34,560
project with respect to software supply

1052
00:41:34,560 --> 00:41:37,200
chain security so you can include those

1053
00:41:37,200 --> 00:41:38,640
scores

1054
00:41:38,640 --> 00:41:40,960
into the risk of each of these projects

1055
00:41:40,960 --> 00:41:43,920
and measure that into you know

1056
00:41:43,920 --> 00:41:46,960
which one you want to start first

1057
00:41:46,960 --> 00:41:50,480
uh to address yes

1058
00:41:50,720 --> 00:41:53,040
but that's not a easy problem to solve

1059
00:41:53,040 --> 00:41:55,599
overall yeah

1060
00:41:55,599 --> 00:41:58,240
um and i would like to also add to what

1061
00:41:58,240 --> 00:42:00,319
hussein mentioned um

1062
00:42:00,319 --> 00:42:02,960
personally what has helped me is uh

1063
00:42:02,960 --> 00:42:05,119
vulnerability exploitability exchange

1064
00:42:05,119 --> 00:42:06,400
information

1065
00:42:06,400 --> 00:42:09,200
so over period building a database of

1066
00:42:09,200 --> 00:42:10,240
vex

1067
00:42:10,240 --> 00:42:14,000
and only fixing those uh components

1068
00:42:14,000 --> 00:42:16,400
which are severely impacted that's

1069
00:42:16,400 --> 00:42:18,960
another good strategy to reduce uh you

1070
00:42:18,960 --> 00:42:21,359
know the prioritization problem third

1071
00:42:21,359 --> 00:42:23,920
thing i have done is we have to start

1072
00:42:23,920 --> 00:42:27,440
somewhere right so if we can find top 20

1073
00:42:27,440 --> 00:42:29,920
open source components or libraries use

1074
00:42:29,920 --> 00:42:32,400
across all the products

1075
00:42:32,400 --> 00:42:34,560
and then provide

1076
00:42:34,560 --> 00:42:36,880
you know guidance on

1077
00:42:36,880 --> 00:42:39,520
how to securely consume those

1078
00:42:39,520 --> 00:42:41,440
libraries that's another great approach

1079
00:42:41,440 --> 00:42:44,720
for example open ssl library it is used

1080
00:42:44,720 --> 00:42:46,800
in pretty much every security product

1081
00:42:46,800 --> 00:42:50,880
right or it is used for every um

1082
00:42:50,880 --> 00:42:53,119
security feature such as encryption data

1083
00:42:53,119 --> 00:42:54,240
address

1084
00:42:54,240 --> 00:42:57,200
or encryption in transit tls

1085
00:42:57,200 --> 00:43:00,480
then making sure our developers knows

1086
00:43:00,480 --> 00:43:04,319
how to consume open ssl securely

1087
00:43:04,319 --> 00:43:06,560
and teaching them how to make sure they

1088
00:43:06,560 --> 00:43:08,400
don't use

1089
00:43:08,400 --> 00:43:09,200
a

1090
00:43:09,200 --> 00:43:11,119
open ssl

1091
00:43:11,119 --> 00:43:13,359
version that is already susceptible to

1092
00:43:13,359 --> 00:43:17,680
known cvs that's a huge win

1093
00:43:17,680 --> 00:43:19,920
so yeah those are some of uh techniques

1094
00:43:19,920 --> 00:43:22,560
i would use uh to drive prioritization

1095
00:43:22,560 --> 00:43:26,680
when you have millions of products

1096
00:43:30,560 --> 00:43:33,359
all right any more questions comments

1097
00:43:33,359 --> 00:43:36,078
insults

1098
00:43:36,720 --> 00:43:39,200
going once

1099
00:43:39,200 --> 00:43:40,640
twice

1100
00:43:40,640 --> 00:43:42,240
price

1101
00:43:42,240 --> 00:43:44,480
all right thank you everybody this means

1102
00:43:44,480 --> 00:43:45,839
a lot to us

1103
00:43:45,839 --> 00:43:49,960
thank you besides las vegas

