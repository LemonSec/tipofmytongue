1
00:00:05,279 --> 00:00:07,040
this next talk is being presented by

2
00:00:07,040 --> 00:00:08,080
breaking grounds

3
00:00:08,080 --> 00:00:10,400
it's the power of guardrails by colleen

4
00:00:10,400 --> 00:00:13,920
dye and grayson hardaway

5
00:00:14,160 --> 00:00:15,920
hello today we'll be talking about how

6
00:00:15,920 --> 00:00:17,600
using secured guardrails that encourage

7
00:00:17,600 --> 00:00:19,439
developers to write secure code

8
00:00:19,439 --> 00:00:21,119
can actually decrease your risk of

9
00:00:21,119 --> 00:00:22,320
cross-site scripting pretty

10
00:00:22,320 --> 00:00:23,600
significantly

11
00:00:23,600 --> 00:00:25,920
so i'm colleen and today with grayson

12
00:00:25,920 --> 00:00:27,039
i'll be talking about

13
00:00:27,039 --> 00:00:28,720
how to slash the risk of crosstalk

14
00:00:28,720 --> 00:00:31,119
scripting in half

15
00:00:31,119 --> 00:00:32,479
so i sort of want to start off with the

16
00:00:32,479 --> 00:00:34,559
question what type of vulnerabilities

17
00:00:34,559 --> 00:00:35,440
are you seeing

18
00:00:35,440 --> 00:00:38,239
most often in your code so oftentimes

19
00:00:38,239 --> 00:00:39,840
these are the same vulnerabilities you

20
00:00:39,840 --> 00:00:40,640
see pop up

21
00:00:40,640 --> 00:00:42,879
popping up over and over again and this

22
00:00:42,879 --> 00:00:44,879
can be a bit demoralizing if you keep

23
00:00:44,879 --> 00:00:45,840
finding the same types of

24
00:00:45,840 --> 00:00:47,280
vulnerabilities

25
00:00:47,280 --> 00:00:50,079
um furthermore with a lot of companies

26
00:00:50,079 --> 00:00:50,559
having

27
00:00:50,559 --> 00:00:52,719
a ratio of 100 or more developers to

28
00:00:52,719 --> 00:00:54,079
every security engineer

29
00:00:54,079 --> 00:00:55,680
it's sometimes easy to feel pretty

30
00:00:55,680 --> 00:00:57,680
buried and like you can't actually keep

31
00:00:57,680 --> 00:00:59,600
up

32
00:00:59,600 --> 00:01:01,199
but we want to talk about how some

33
00:01:01,199 --> 00:01:02,879
companies have actually been changing

34
00:01:02,879 --> 00:01:04,959
how they run their security programs

35
00:01:04,959 --> 00:01:06,799
and it actually seems to be working for

36
00:01:06,799 --> 00:01:09,200
them so they're higher leveraged and

37
00:01:09,200 --> 00:01:10,720
more effective at actually keeping their

38
00:01:10,720 --> 00:01:12,720
company secure even while keeping the

39
00:01:12,720 --> 00:01:14,560
same ratio of developers to secure the

40
00:01:14,560 --> 00:01:16,080
engineers

41
00:01:16,080 --> 00:01:17,600
so today we're going to be talking about

42
00:01:17,600 --> 00:01:20,000
secured guardrails which are essentially

43
00:01:20,000 --> 00:01:21,759
safeguards put into place to make it

44
00:01:21,759 --> 00:01:23,520
easier for developers to do the secure

45
00:01:23,520 --> 00:01:23,920
thing

46
00:01:23,920 --> 00:01:25,680
and a lot harder to do the insecure

47
00:01:25,680 --> 00:01:28,240
thing so we'll talk about how guardrails

48
00:01:28,240 --> 00:01:30,079
can actually drastically reduce the

49
00:01:30,079 --> 00:01:31,439
number of vulnerabilities you have to

50
00:01:31,439 --> 00:01:32,720
track down and fix

51
00:01:32,720 --> 00:01:34,640
um and essentially talk about some

52
00:01:34,640 --> 00:01:36,079
original research we've done

53
00:01:36,079 --> 00:01:38,000
that examines real crosstalk scripting

54
00:01:38,000 --> 00:01:41,840
vulnerabilities in open source software

55
00:01:42,479 --> 00:01:44,320
so here's a brief tldr of what we'll be

56
00:01:44,320 --> 00:01:45,840
talking about today

57
00:01:45,840 --> 00:01:48,880
so we used to do we used to think about

58
00:01:48,880 --> 00:01:51,119
eliminating individual bugs through pen

59
00:01:51,119 --> 00:01:52,560
testing bug bounties

60
00:01:52,560 --> 00:01:55,119
etc but now we'll be talking about

61
00:01:55,119 --> 00:01:57,040
secured guardrails which actually give

62
00:01:57,040 --> 00:01:57,759
you some

63
00:01:57,759 --> 00:02:00,079
more scalable systematic and long-term

64
00:02:00,079 --> 00:02:01,439
wins

65
00:02:01,439 --> 00:02:03,200
so you might ask how do we know this is

66
00:02:03,200 --> 00:02:04,479
effective

67
00:02:04,479 --> 00:02:06,079
well we'll be talking about what other

68
00:02:06,079 --> 00:02:07,520
companies do along with

69
00:02:07,520 --> 00:02:09,360
some research showing that secure

70
00:02:09,360 --> 00:02:10,959
guardrails could have prevented greater

71
00:02:10,959 --> 00:02:12,239
than 50

72
00:02:12,239 --> 00:02:13,920
of crosstalk scripting vulnerabilities

73
00:02:13,920 --> 00:02:16,879
in open source repositories

74
00:02:16,879 --> 00:02:18,720
we'll also be talking briefly at the end

75
00:02:18,720 --> 00:02:20,840
how to implement this at your

76
00:02:20,840 --> 00:02:23,840
corporation

77
00:02:23,920 --> 00:02:26,080
cool so who are we i'll pass this offer

78
00:02:26,080 --> 00:02:28,160
to grayson um who's going to be

79
00:02:28,160 --> 00:02:30,800
talking with me today thanks colleen

80
00:02:30,800 --> 00:02:32,080
yeah my name is grayson

81
00:02:32,080 --> 00:02:34,560
hardaway i'm a security engineer at r2c

82
00:02:34,560 --> 00:02:35,920
this is a picture of me and my lovely

83
00:02:35,920 --> 00:02:37,440
wife over here

84
00:02:37,440 --> 00:02:38,800
in a past life i used to work for the us

85
00:02:38,800 --> 00:02:40,160
department of defense doing all manner

86
00:02:40,160 --> 00:02:41,040
of things

87
00:02:41,040 --> 00:02:43,200
but now i work for rgc which is a

88
00:02:43,200 --> 00:02:44,720
startup in san francisco doing static

89
00:02:44,720 --> 00:02:45,519
analysis

90
00:02:45,519 --> 00:02:48,640
along with colleen awesome i'm also a

91
00:02:48,640 --> 00:02:50,400
security engineer at rtc

92
00:02:50,400 --> 00:02:52,160
and i recently graduated stanford with

93
00:02:52,160 --> 00:02:54,160
my bachelor's of cs and my master's

94
00:02:54,160 --> 00:02:57,760
of statistics and what's rtc you might

95
00:02:57,760 --> 00:02:58,080
ask

96
00:02:58,080 --> 00:03:00,640
so we're a sfa static analysis startup

97
00:03:00,640 --> 00:03:02,640
that grayson grayson already mentioned

98
00:03:02,640 --> 00:03:04,319
and our mission is to essentially

99
00:03:04,319 --> 00:03:05,680
improve software security and

100
00:03:05,680 --> 00:03:06,959
reliability

101
00:03:06,959 --> 00:03:08,560
so all of this work couldn't have been

102
00:03:08,560 --> 00:03:10,560
done without this whole the whole rtc

103
00:03:10,560 --> 00:03:11,440
team so we're

104
00:03:11,440 --> 00:03:14,400
really grateful for them

105
00:03:17,040 --> 00:03:18,560
so here's a brief outline of what we'll

106
00:03:18,560 --> 00:03:20,159
be talking about today

107
00:03:20,159 --> 00:03:22,400
so we'll first talk about why we want to

108
00:03:22,400 --> 00:03:24,000
move towards secure guardrails

109
00:03:24,000 --> 00:03:25,920
and then we'll we'll talk about how do

110
00:03:25,920 --> 00:03:27,599
we test that secure guardrails are

111
00:03:27,599 --> 00:03:28,879
actually effective

112
00:03:28,879 --> 00:03:30,239
and then we'll talk a little bit about

113
00:03:30,239 --> 00:03:32,000
what we found through our research what

114
00:03:32,000 --> 00:03:33,519
we wanted to to do next

115
00:03:33,519 --> 00:03:35,599
and also how to eradicate vulnerability

116
00:03:35,599 --> 00:03:38,480
classes in general

117
00:03:39,519 --> 00:03:41,519
cool so let's start off with talking

118
00:03:41,519 --> 00:03:43,280
about the oauth top 10.

119
00:03:43,280 --> 00:03:45,840
so on the left we see this diagram

120
00:03:45,840 --> 00:03:48,400
that's the oauth top 10 2013

121
00:03:48,400 --> 00:03:50,640
and on the right we see the os top 10

122
00:03:50,640 --> 00:03:51,840
2017

123
00:03:51,840 --> 00:03:54,239
and actually the os top 10 hasn't

124
00:03:54,239 --> 00:03:55,360
changed since

125
00:03:55,360 --> 00:03:58,319
2017 so this is essentially technically

126
00:03:58,319 --> 00:04:00,720
what we have currently

127
00:04:00,720 --> 00:04:02,879
so it might seem a little bit similar

128
00:04:02,879 --> 00:04:04,000
and um

129
00:04:04,000 --> 00:04:06,480
if we look closely we can see that a1

130
00:04:06,480 --> 00:04:07,439
injection

131
00:04:07,439 --> 00:04:09,760
um sensitive data exposure crosstalk

132
00:04:09,760 --> 00:04:10,560
scripting

133
00:04:10,560 --> 00:04:14,080
are all still on the oauth 2017. in fact

134
00:04:14,080 --> 00:04:17,120
six out of the ten um os top ten

135
00:04:17,120 --> 00:04:20,320
hasn't changed in these four years so in

136
00:04:20,320 --> 00:04:21,680
case you're not familiar oops

137
00:04:21,680 --> 00:04:23,600
essentially is a non-profit foundation

138
00:04:23,600 --> 00:04:24,240
project

139
00:04:24,240 --> 00:04:26,479
and their aim is to educate the security

140
00:04:26,479 --> 00:04:28,160
community and developer community

141
00:04:28,160 --> 00:04:30,479
about building secure software so every

142
00:04:30,479 --> 00:04:31,759
few years they'll release

143
00:04:31,759 --> 00:04:33,680
the new os top 10 which actually

144
00:04:33,680 --> 00:04:35,600
prevents represents the most prevalent

145
00:04:35,600 --> 00:04:38,240
and security and critical security risks

146
00:04:38,240 --> 00:04:40,400
to web apps

147
00:04:40,400 --> 00:04:43,120
so essentially we see that a lot of

148
00:04:43,120 --> 00:04:43,759
these have

149
00:04:43,759 --> 00:04:46,400
remained the same over the past years

150
00:04:46,400 --> 00:04:48,000
and given that a lot of these

151
00:04:48,000 --> 00:04:50,000
vulnerability classes are occurring over

152
00:04:50,000 --> 00:04:52,000
and over again we need to take a really

153
00:04:52,000 --> 00:04:53,600
hard look at what we're doing

154
00:04:53,600 --> 00:04:57,840
and how we can measurably raise the bar

155
00:04:58,400 --> 00:05:00,000
so let's take a closer look of what the

156
00:05:00,000 --> 00:05:01,440
security industry is

157
00:05:01,440 --> 00:05:04,080
mostly currently doing so the security

158
00:05:04,080 --> 00:05:05,759
industry has currently focused

159
00:05:05,759 --> 00:05:07,600
a lot on playing whack-a-mole with

160
00:05:07,600 --> 00:05:09,280
individual vulnerabilities

161
00:05:09,280 --> 00:05:11,039
so we've been doing a lot of pen testing

162
00:05:11,039 --> 00:05:12,639
bug bouncies and

163
00:05:12,639 --> 00:05:16,400
essentially finding individual bugs

164
00:05:17,280 --> 00:05:19,120
but we what we want to move towards and

165
00:05:19,120 --> 00:05:20,880
what the industry is actually currently

166
00:05:20,880 --> 00:05:21,840
moving towards

167
00:05:21,840 --> 00:05:24,960
is what we call secure guardrails so

168
00:05:24,960 --> 00:05:26,160
essentially this is

169
00:05:26,160 --> 00:05:28,000
this involves continuous code scanning

170
00:05:28,000 --> 00:05:29,600
enforcing safe patterns

171
00:05:29,600 --> 00:05:32,479
and eliminating bug classes in general

172
00:05:32,479 --> 00:05:33,919
instead of trying to eliminate

173
00:05:33,919 --> 00:05:39,039
individual bugs

174
00:05:39,039 --> 00:05:40,800
so why should you actually trust us

175
00:05:40,800 --> 00:05:42,160
you're probably thinking

176
00:05:42,160 --> 00:05:44,000
where's the actual evidence that secured

177
00:05:44,000 --> 00:05:46,080
guardrails work and also the security

178
00:05:46,080 --> 00:05:47,919
industry has actually been finding bugs

179
00:05:47,919 --> 00:05:48,800
for ages

180
00:05:48,800 --> 00:05:52,000
so why should we change at all well

181
00:05:52,000 --> 00:05:53,919
we'll provide you with a few sources

182
00:05:53,919 --> 00:05:55,600
including what some forward-thinking

183
00:05:55,600 --> 00:05:57,520
mature security programs are doing

184
00:05:57,520 --> 00:06:00,160
and also add in our research which

185
00:06:00,160 --> 00:06:02,240
involves preventing crosstalk scripting

186
00:06:02,240 --> 00:06:05,280
in the wild so let's take a quick look

187
00:06:05,280 --> 00:06:06,000
at what a few

188
00:06:06,000 --> 00:06:09,280
companies are doing so

189
00:06:09,280 --> 00:06:13,199
essentially in um absent cali of 2018

190
00:06:13,199 --> 00:06:15,360
a few people from netflix gave this talk

191
00:06:15,360 --> 00:06:16,479
and we see that they're trying to

192
00:06:16,479 --> 00:06:18,560
de-emphasize in their security program

193
00:06:18,560 --> 00:06:20,000
manual testing and traditional

194
00:06:20,000 --> 00:06:22,160
vulnerability scanning and they're also

195
00:06:22,160 --> 00:06:23,759
trying to heavily emphasize

196
00:06:23,759 --> 00:06:25,600
paved road and killing bug classes in

197
00:06:25,600 --> 00:06:26,880
general which is

198
00:06:26,880 --> 00:06:30,479
what secure guardrails is all about

199
00:06:33,039 --> 00:06:35,840
and we see from this talk from microsoft

200
00:06:35,840 --> 00:06:36,240
that

201
00:06:36,240 --> 00:06:38,080
essentially banning functions can be

202
00:06:38,080 --> 00:06:39,360
very valuable

203
00:06:39,360 --> 00:06:41,600
we see that they actually got 41 percent

204
00:06:41,600 --> 00:06:43,680
of vulnerabilities reduced

205
00:06:43,680 --> 00:06:46,000
from their transition from xp to vista

206
00:06:46,000 --> 00:06:48,400
just from banning string copy and other

207
00:06:48,400 --> 00:06:50,560
functions like this so we know that a

208
00:06:50,560 --> 00:06:52,400
lot of vulnerabilities can be removed

209
00:06:52,400 --> 00:06:55,919
just from banning unsafe functions

210
00:06:57,919 --> 00:07:00,160
and also google has written a book

211
00:07:00,160 --> 00:07:01,919
called building secure and reliable

212
00:07:01,919 --> 00:07:02,639
systems

213
00:07:02,639 --> 00:07:04,639
and in this book they say that it's

214
00:07:04,639 --> 00:07:06,319
pretty unreasonable to expect

215
00:07:06,319 --> 00:07:08,599
any developer to be an expert in

216
00:07:08,599 --> 00:07:11,120
reliability security and coding

217
00:07:11,120 --> 00:07:12,960
and to constantly constantly maintain

218
00:07:12,960 --> 00:07:15,360
vigilance when writing or reviewing code

219
00:07:15,360 --> 00:07:17,039
so a better approach is to handle

220
00:07:17,039 --> 00:07:18,400
security and reliable

221
00:07:18,400 --> 00:07:20,400
reliability in common frameworks

222
00:07:20,400 --> 00:07:21,520
languages and

223
00:07:21,520 --> 00:07:24,000
libraries so ideally libraries only

224
00:07:24,000 --> 00:07:25,599
expose an interface that makes

225
00:07:25,599 --> 00:07:27,440
writing code with common classes of

226
00:07:27,440 --> 00:07:29,599
security vulnerabilities impossible

227
00:07:29,599 --> 00:07:31,199
so what google is really trying to say

228
00:07:31,199 --> 00:07:33,520
is that security is hard reliability is

229
00:07:33,520 --> 00:07:35,120
hard and coding is hard

230
00:07:35,120 --> 00:07:37,039
so it's actually pretty unreasonable for

231
00:07:37,039 --> 00:07:38,319
us to expect

232
00:07:38,319 --> 00:07:41,440
our developers to write secure reliable

233
00:07:41,440 --> 00:07:44,160
code quickly so what we want to do is we

234
00:07:44,160 --> 00:07:45,360
want to make

235
00:07:45,360 --> 00:07:47,199
our developers lives easier and our job

236
00:07:47,199 --> 00:07:49,120
is to sort of make it easier for them to

237
00:07:49,120 --> 00:07:49,599
write

238
00:07:49,599 --> 00:07:51,520
secure code and make it harder for them

239
00:07:51,520 --> 00:07:54,719
to write insecure code

240
00:07:57,360 --> 00:07:59,680
cool and we can take another look at

241
00:07:59,680 --> 00:08:00,639
facebook too

242
00:08:00,639 --> 00:08:02,479
so what facebook is saying is that they

243
00:08:02,479 --> 00:08:04,240
invest heavily in building frameworks

244
00:08:04,240 --> 00:08:04,720
that help

245
00:08:04,720 --> 00:08:06,639
engineers prevent and remove entire

246
00:08:06,639 --> 00:08:08,639
classes of bugs when writing code

247
00:08:08,639 --> 00:08:10,080
and this is essentially what secure

248
00:08:10,080 --> 00:08:12,160
guardrails is trying to do we also see

249
00:08:12,160 --> 00:08:13,599
that in their defense

250
00:08:13,599 --> 00:08:15,759
in depth sort of layering we see that

251
00:08:15,759 --> 00:08:17,280
secure frameworks is actually their

252
00:08:17,280 --> 00:08:18,240
bottom layer

253
00:08:18,240 --> 00:08:20,560
so secure frameworks is actually the

254
00:08:20,560 --> 00:08:22,319
groundwork that underpins all their

255
00:08:22,319 --> 00:08:27,039
other defense efforts

256
00:08:27,039 --> 00:08:30,800
and in in addition to netflix microsoft

257
00:08:30,800 --> 00:08:32,880
facebook and google we can add on top of

258
00:08:32,880 --> 00:08:34,080
that our research

259
00:08:34,080 --> 00:08:35,919
which finds that using secure guardrails

260
00:08:35,919 --> 00:08:38,000
could have prevented 59

261
00:08:38,000 --> 00:08:40,240
of the 140 instances of cross-site

262
00:08:40,240 --> 00:08:44,080
scripting in their open source data sets

263
00:08:45,440 --> 00:08:47,040
cool now that we've talked a little bit

264
00:08:47,040 --> 00:08:48,560
about secured guardrails

265
00:08:48,560 --> 00:08:50,560
let's talk about how we tested that

266
00:08:50,560 --> 00:08:51,760
secure guardrails

267
00:08:51,760 --> 00:08:55,680
are pretty effective

268
00:08:55,680 --> 00:08:57,839
so we begin with a question are secure

269
00:08:57,839 --> 00:08:59,279
guardrails actually effective in

270
00:08:59,279 --> 00:09:00,399
practice

271
00:09:00,399 --> 00:09:02,399
and we realized that this question is a

272
00:09:02,399 --> 00:09:04,720
little bit open-ended so we translated

273
00:09:04,720 --> 00:09:06,640
this into a methodology that we wanted

274
00:09:06,640 --> 00:09:07,519
to follow

275
00:09:07,519 --> 00:09:09,760
so this became how many instances of

276
00:09:09,760 --> 00:09:11,279
crosstalk scripting and open source

277
00:09:11,279 --> 00:09:12,320
repositories

278
00:09:12,320 --> 00:09:13,920
could have been prevented with the use

279
00:09:13,920 --> 00:09:17,279
of secure guardrails

280
00:09:19,040 --> 00:09:20,800
so the first thing that we did was to

281
00:09:20,800 --> 00:09:23,279
determine scope so we wanted to find a

282
00:09:23,279 --> 00:09:25,440
vulnerability that was pretty high

283
00:09:25,440 --> 00:09:27,680
high impact and we decided on crosstalk

284
00:09:27,680 --> 00:09:28,959
scripting because

285
00:09:28,959 --> 00:09:30,640
first of all it is indeed very high

286
00:09:30,640 --> 00:09:32,720
impact it's quite common

287
00:09:32,720 --> 00:09:35,120
um and web frameworks actually have

288
00:09:35,120 --> 00:09:36,240
standard cross-site scripting

289
00:09:36,240 --> 00:09:37,120
mitigations

290
00:09:37,120 --> 00:09:38,480
this means that there's concrete code

291
00:09:38,480 --> 00:09:40,160
patterns we can look for and

292
00:09:40,160 --> 00:09:41,839
it'll be easy for us to write patterns

293
00:09:41,839 --> 00:09:44,000
for we also wanted to prevent crosstalk

294
00:09:44,000 --> 00:09:44,880
scripting in our

295
00:09:44,880 --> 00:09:47,920
own code of course and if we look

296
00:09:47,920 --> 00:09:49,760
at the bottom of the slide we see that

297
00:09:49,760 --> 00:09:50,959
the hacker won

298
00:09:50,959 --> 00:09:52,720
top 10 most impactful and rewarded

299
00:09:52,720 --> 00:09:54,560
vulnerability types includes cross-site

300
00:09:54,560 --> 00:09:55,279
scripting

301
00:09:55,279 --> 00:09:56,959
so crosstalk scripting continues to be

302
00:09:56,959 --> 00:09:59,040
the most awarded vulnerability type

303
00:09:59,040 --> 00:10:03,440
and it was awarded 4.2 million dollars

304
00:10:03,440 --> 00:10:06,320
in 2020

305
00:10:07,760 --> 00:10:09,760
so the next step after we decided that

306
00:10:09,760 --> 00:10:11,440
we wanted to aim for crosstalk scripting

307
00:10:11,440 --> 00:10:12,560
vulnerabilities

308
00:10:12,560 --> 00:10:14,800
was to determine what languages and

309
00:10:14,800 --> 00:10:17,040
frameworks we wanted to support

310
00:10:17,040 --> 00:10:20,399
so we chose javas java javascript

311
00:10:20,399 --> 00:10:22,959
python golang and ruby because these

312
00:10:22,959 --> 00:10:24,880
languages are widely used

313
00:10:24,880 --> 00:10:28,640
and very popular and for the frameworks

314
00:10:28,640 --> 00:10:31,680
essentially we chose java.jsp flask

315
00:10:31,680 --> 00:10:32,240
django

316
00:10:32,240 --> 00:10:34,959
express reacts go http client and ruby

317
00:10:34,959 --> 00:10:35,600
on rails

318
00:10:35,600 --> 00:10:37,920
because these are the most popular and

319
00:10:37,920 --> 00:10:39,680
because we believe that

320
00:10:39,680 --> 00:10:41,120
most people were using it and we could

321
00:10:41,120 --> 00:10:44,399
have a larger data set

322
00:10:45,760 --> 00:10:48,160
so after this the next question we asked

323
00:10:48,160 --> 00:10:50,480
is which tool should we use in order to

324
00:10:50,480 --> 00:10:50,880
write

325
00:10:50,880 --> 00:10:53,839
code patterns and capture these um these

326
00:10:53,839 --> 00:10:55,920
patterns that we want to look for

327
00:10:55,920 --> 00:10:58,399
we essentially came up with some grep

328
00:10:58,399 --> 00:10:58,959
because

329
00:10:58,959 --> 00:11:01,680
it's open source multilingual it's

330
00:11:01,680 --> 00:11:03,279
pretty easy to write rules and more

331
00:11:03,279 --> 00:11:04,320
precise and grab

332
00:11:04,320 --> 00:11:07,120
we're also quite familiar with semgra

333
00:11:07,120 --> 00:11:09,760
because rtc maintains some grip

334
00:11:09,760 --> 00:11:15,839
so we found it really easy to work with

335
00:11:16,320 --> 00:11:18,079
cool so here's a slide about the

336
00:11:18,079 --> 00:11:19,519
architecture of

337
00:11:19,519 --> 00:11:22,320
our research so what we did is we

338
00:11:22,320 --> 00:11:23,200
essentially

339
00:11:23,200 --> 00:11:24,720
wrote some crosstalk scripting checks

340
00:11:24,720 --> 00:11:26,480
with some grubs so that we could find

341
00:11:26,480 --> 00:11:28,320
some code patterns in

342
00:11:28,320 --> 00:11:31,680
ruby java javascript type scripts

343
00:11:31,680 --> 00:11:33,680
et cetera code in order to find

344
00:11:33,680 --> 00:11:35,839
cross-site scripting

345
00:11:35,839 --> 00:11:38,160
we then in order to find some open

346
00:11:38,160 --> 00:11:40,399
source repositories in open source code

347
00:11:40,399 --> 00:11:43,440
we queried bigquery and github

348
00:11:43,440 --> 00:11:46,399
advanced search api we use these two

349
00:11:46,399 --> 00:11:48,399
sources to collect a pretty large data

350
00:11:48,399 --> 00:11:48,959
set

351
00:11:48,959 --> 00:11:50,639
and then filter this data set based on

352
00:11:50,639 --> 00:11:52,800
relevancy so this includes relevant

353
00:11:52,800 --> 00:11:56,240
frameworks languages and also whether

354
00:11:56,240 --> 00:11:57,839
it represented a true crosstalk

355
00:11:57,839 --> 00:12:00,079
scripting vulnerability

356
00:12:00,079 --> 00:12:02,880
so after that we wrote a script in order

357
00:12:02,880 --> 00:12:03,519
to get

358
00:12:03,519 --> 00:12:05,680
the get diffs and run the same group

359
00:12:05,680 --> 00:12:06,800
checks that we wrote

360
00:12:06,800 --> 00:12:09,200
on this data set and the fourth step

361
00:12:09,200 --> 00:12:10,000
that we performed

362
00:12:10,000 --> 00:12:12,399
was triaging we manually looked through

363
00:12:12,399 --> 00:12:14,000
all of this data and

364
00:12:14,000 --> 00:12:16,079
and looked whether some group should

365
00:12:16,079 --> 00:12:19,839
have caught a vulnerability or not

366
00:12:22,240 --> 00:12:24,320
cool so our first step in this process

367
00:12:24,320 --> 00:12:25,920
was to write text to detect

368
00:12:25,920 --> 00:12:27,360
violations of cross-site scripting

369
00:12:27,360 --> 00:12:29,839
guardrails so the first question that we

370
00:12:29,839 --> 00:12:30,800
asked ourselves

371
00:12:30,800 --> 00:12:33,200
was what rules should we actually create

372
00:12:33,200 --> 00:12:35,360
and how can we actually define patterns

373
00:12:35,360 --> 00:12:36,480
for all the ways that cross-site

374
00:12:36,480 --> 00:12:38,480
scripting can occur

375
00:12:38,480 --> 00:12:39,920
this is actually a pretty difficult

376
00:12:39,920 --> 00:12:42,160
question so we relied on a few sources

377
00:12:42,160 --> 00:12:43,600
in order to answer this

378
00:12:43,600 --> 00:12:46,399
so we looked at popular security guides

379
00:12:46,399 --> 00:12:47,519
including the oauth

380
00:12:47,519 --> 00:12:49,440
cheat sheets documentation for

381
00:12:49,440 --> 00:12:50,800
frameworks and

382
00:12:50,800 --> 00:12:53,920
also purposely vulnerable apps we also

383
00:12:53,920 --> 00:12:56,480
looked into our own security expertise

384
00:12:56,480 --> 00:12:58,399
and used all these sources in order to

385
00:12:58,399 --> 00:13:01,360
define patterns

386
00:13:03,200 --> 00:13:05,360
and here's an example of a rule that we

387
00:13:05,360 --> 00:13:06,480
wrote so

388
00:13:06,480 --> 00:13:08,959
essentially the raw function actually

389
00:13:08,959 --> 00:13:09,760
bypasses

390
00:13:09,760 --> 00:13:13,200
ruby html escaping and this can actually

391
00:13:13,200 --> 00:13:15,279
lead to cross-site scripting attacks so

392
00:13:15,279 --> 00:13:16,240
it's better to

393
00:13:16,240 --> 00:13:19,120
not use this function at all so if we

394
00:13:19,120 --> 00:13:20,320
look at this pattern

395
00:13:20,320 --> 00:13:22,880
it's actually raw with ellipses in

396
00:13:22,880 --> 00:13:24,000
parentheses

397
00:13:24,000 --> 00:13:26,240
and this actually captures all uses and

398
00:13:26,240 --> 00:13:28,079
calls to raw

399
00:13:28,079 --> 00:13:31,760
and essentially if we look at the code

400
00:13:31,760 --> 00:13:33,680
on the right we see that it will

401
00:13:33,680 --> 00:13:35,279
actually catch

402
00:13:35,279 --> 00:13:39,439
the result equals raw at string call

403
00:13:42,639 --> 00:13:45,279
cool so essentially after we wrote a few

404
00:13:45,279 --> 00:13:47,279
rules and we looked into our sources to

405
00:13:47,279 --> 00:13:48,399
research cross-like scripting

406
00:13:48,399 --> 00:13:50,000
vulnerabilities and patterns

407
00:13:50,000 --> 00:13:53,199
we came up with a few policies depending

408
00:13:53,199 --> 00:13:55,120
on the framework so this is actually our

409
00:13:55,120 --> 00:13:57,279
crosstalk scripting policy for flask

410
00:13:57,279 --> 00:14:00,079
and we actually run it on our own code

411
00:14:00,079 --> 00:14:02,000
so the goal of a policy like this is to

412
00:14:02,000 --> 00:14:02,480
say

413
00:14:02,480 --> 00:14:03,920
if you follow these recommendations

414
00:14:03,920 --> 00:14:05,519
you're pretty unlikely to have crosstalk

415
00:14:05,519 --> 00:14:06,240
scripting

416
00:14:06,240 --> 00:14:08,720
in your code base so feel free to check

417
00:14:08,720 --> 00:14:10,720
out um the crosstalk scripting policies

418
00:14:10,720 --> 00:14:11,120
for

419
00:14:11,120 --> 00:14:13,279
multiple frameworks that we've released

420
00:14:13,279 --> 00:14:14,880
if you um

421
00:14:14,880 --> 00:14:17,120
if you would like to see this it's all

422
00:14:17,120 --> 00:14:18,560
open source and you don't need to do

423
00:14:18,560 --> 00:14:21,839
anything in order to see this

424
00:14:22,959 --> 00:14:24,800
awesome so after we wrote crosstalk

425
00:14:24,800 --> 00:14:26,399
scripting checks with some grub

426
00:14:26,399 --> 00:14:28,240
our next step was to collect some open

427
00:14:28,240 --> 00:14:31,839
source data

428
00:14:33,440 --> 00:14:36,160
so we went on to ask the question how do

429
00:14:36,160 --> 00:14:37,839
we actually find samples of cross-site

430
00:14:37,839 --> 00:14:39,519
scripting in the wild

431
00:14:39,519 --> 00:14:43,199
and we decided upon google bigquery

432
00:14:43,199 --> 00:14:45,199
first of all it's a huge data set but

433
00:14:45,199 --> 00:14:46,480
it's also quick to mine

434
00:14:46,480 --> 00:14:49,199
so um this was one of its pros and it's

435
00:14:49,199 --> 00:14:50,399
also easy to obtain

436
00:14:50,399 --> 00:14:52,320
a parent commits and the reason why we

437
00:14:52,320 --> 00:14:54,160
want to obtain the parent commit is

438
00:14:54,160 --> 00:14:55,760
because we want to run some group on the

439
00:14:55,760 --> 00:14:57,279
parent commit to see whether we would

440
00:14:57,279 --> 00:14:57,600
have

441
00:14:57,600 --> 00:14:59,040
actually caught the crosstalk scripting

442
00:14:59,040 --> 00:15:00,639
vulnerability

443
00:15:00,639 --> 00:15:02,560
um but as we were scrolling through this

444
00:15:02,560 --> 00:15:04,240
large table of

445
00:15:04,240 --> 00:15:06,320
data we actually saw that bigquery was

446
00:15:06,320 --> 00:15:08,560
last updated in 2019

447
00:15:08,560 --> 00:15:11,760
um yeah 2019. so the question then

448
00:15:11,760 --> 00:15:12,880
became for us

449
00:15:12,880 --> 00:15:14,800
how do we retrieve up-to-date cross-site

450
00:15:14,800 --> 00:15:17,839
scripting information

451
00:15:19,279 --> 00:15:21,199
we then turned to the github advanced

452
00:15:21,199 --> 00:15:22,320
search api

453
00:15:22,320 --> 00:15:24,480
and with this we ultimately obtained

454
00:15:24,480 --> 00:15:26,079
around 000 commits

455
00:15:26,079 --> 00:15:28,320
um so the pros of course is that the

456
00:15:28,320 --> 00:15:30,160
github advanced search api is a huge

457
00:15:30,160 --> 00:15:31,600
data set with a lot of

458
00:15:31,600 --> 00:15:34,880
up-to-date data um but the cons were

459
00:15:34,880 --> 00:15:36,480
that it was a little bit difficult to

460
00:15:36,480 --> 00:15:38,000
obtain parent commits

461
00:15:38,000 --> 00:15:41,279
and also that the github api provides

462
00:15:41,279 --> 00:15:43,199
only up to a thousand results for each

463
00:15:43,199 --> 00:15:44,480
search um

464
00:15:44,480 --> 00:15:49,199
this became sort of a pain for us later

465
00:15:49,600 --> 00:15:52,639
so if we see this we've searched for um

466
00:15:52,639 --> 00:15:56,240
in the messages fix xss as our query

467
00:15:56,240 --> 00:15:58,720
and we see that it's showing actually

468
00:15:58,720 --> 00:16:00,000
it's showing

469
00:16:00,000 --> 00:16:02,880
200 000 available commit results but

470
00:16:02,880 --> 00:16:03,680
actually

471
00:16:03,680 --> 00:16:05,759
there is around 100 pages with 10

472
00:16:05,759 --> 00:16:06,959
results on each page

473
00:16:06,959 --> 00:16:09,120
so it's only showing us a thousand

474
00:16:09,120 --> 00:16:10,639
results even though there's technically

475
00:16:10,639 --> 00:16:12,000
two hundred thousand

476
00:16:12,000 --> 00:16:13,839
so all of these results are just in the

477
00:16:13,839 --> 00:16:16,240
wild um crosstalk scripting results

478
00:16:16,240 --> 00:16:18,959
and we just never were able to see all

479
00:16:18,959 --> 00:16:21,279
of them

480
00:16:21,440 --> 00:16:23,600
so we were sad because all of this

481
00:16:23,600 --> 00:16:24,959
crosstalk scripting data

482
00:16:24,959 --> 00:16:28,079
will never be able to use

483
00:16:31,279 --> 00:16:34,160
awesome so after we grab some open

484
00:16:34,160 --> 00:16:35,199
source data from

485
00:16:35,199 --> 00:16:38,320
github advanced search and bigquery we

486
00:16:38,320 --> 00:16:40,800
looked at our duplicates and discarded

487
00:16:40,800 --> 00:16:41,839
for unrelated

488
00:16:41,839 --> 00:16:44,880
commits and this ended up

489
00:16:44,880 --> 00:16:46,959
leading to us having under 10 commits

490
00:16:46,959 --> 00:16:48,720
for some frameworks

491
00:16:48,720 --> 00:16:51,120
so we decided to expand the data sets we

492
00:16:51,120 --> 00:16:53,920
needed more data

493
00:16:53,920 --> 00:16:55,920
so in order to collect more data we used

494
00:16:55,920 --> 00:16:57,519
some new search terms with the github

495
00:16:57,519 --> 00:16:58,880
advanced search api

496
00:16:58,880 --> 00:17:00,560
so we use things like cross-site

497
00:17:00,560 --> 00:17:02,480
scripting goaling

498
00:17:02,480 --> 00:17:04,000
fixed cross-site scripting crosstalk

499
00:17:04,000 --> 00:17:05,520
scripting ruby on rails

500
00:17:05,520 --> 00:17:07,439
and this led to around 15 or more

501
00:17:07,439 --> 00:17:09,199
commits for each framework

502
00:17:09,199 --> 00:17:11,039
and we were pretty happy with this

503
00:17:11,039 --> 00:17:13,039
because it was a reasonable starting

504
00:17:13,039 --> 00:17:14,400
point given our time frame

505
00:17:14,400 --> 00:17:17,119
and also um it would be difficult to

506
00:17:17,119 --> 00:17:20,719
collect more data for each framework

507
00:17:22,480 --> 00:17:24,319
cool so now that we gathered all our

508
00:17:24,319 --> 00:17:26,640
data our third step was to actually run

509
00:17:26,640 --> 00:17:28,000
the rules that we wrote

510
00:17:28,000 --> 00:17:32,240
on crosstalk scripting

511
00:17:32,240 --> 00:17:34,640
so we spun up at ec2 instance gave it

512
00:17:34,640 --> 00:17:36,320
ample memory because we knew that there

513
00:17:36,320 --> 00:17:37,760
would be a lot of things downloaded in

514
00:17:37,760 --> 00:17:38,720
this process

515
00:17:38,720 --> 00:17:41,760
and we went right to scripting so

516
00:17:41,760 --> 00:17:43,760
essentially this is the sort of process

517
00:17:43,760 --> 00:17:45,039
that our scripts followed

518
00:17:45,039 --> 00:17:47,039
so with the first and just some json it

519
00:17:47,039 --> 00:17:48,799
would take the json output from bigquery

520
00:17:48,799 --> 00:17:49,600
or github

521
00:17:49,600 --> 00:17:51,520
that included the parent commit the

522
00:17:51,520 --> 00:17:53,120
commit that said um

523
00:17:53,120 --> 00:17:55,280
fixed cross-site scripting in it and

524
00:17:55,280 --> 00:17:57,520
also the repository name

525
00:17:57,520 --> 00:17:59,760
we then downloaded the repository on our

526
00:17:59,760 --> 00:18:00,720
ec2 instant

527
00:18:00,720 --> 00:18:03,760
and essentially got those

528
00:18:03,760 --> 00:18:06,799
got that data after that we got the get

529
00:18:06,799 --> 00:18:07,360
disks

530
00:18:07,360 --> 00:18:09,840
and essentially this retrieved the

531
00:18:09,840 --> 00:18:11,360
differences between the parent commit

532
00:18:11,360 --> 00:18:12,480
and the commit with

533
00:18:12,480 --> 00:18:14,960
fixed cross-site scripting on it so

534
00:18:14,960 --> 00:18:15,840
after we got

535
00:18:15,840 --> 00:18:18,320
the differences we ran some grip on the

536
00:18:18,320 --> 00:18:20,000
parent commit so that we could

537
00:18:20,000 --> 00:18:21,919
be sure whether we would have caught the

538
00:18:21,919 --> 00:18:23,120
cross-site scripting

539
00:18:23,120 --> 00:18:27,120
fixed finally we saved the get tips and

540
00:18:27,120 --> 00:18:29,200
some group results in the local database

541
00:18:29,200 --> 00:18:32,720
so that we could access it for later

542
00:18:35,280 --> 00:18:37,679
cool so after we got our get this and

543
00:18:37,679 --> 00:18:39,360
ran some grub on

544
00:18:39,360 --> 00:18:43,840
the data the fourth step was to triage

545
00:18:44,880 --> 00:18:46,480
so we actually built a triangular that

546
00:18:46,480 --> 00:18:48,400
displays the triage status

547
00:18:48,400 --> 00:18:50,480
up on top and you can click whether it's

548
00:18:50,480 --> 00:18:52,880
a true positive or false negative or

549
00:18:52,880 --> 00:18:54,720
you're not super sure about what this

550
00:18:54,720 --> 00:18:56,000
actually is

551
00:18:56,000 --> 00:18:58,240
and we can see that the parent commits

552
00:18:58,240 --> 00:18:59,760
and the fixed commits are actually side

553
00:18:59,760 --> 00:19:00,559
by side

554
00:19:00,559 --> 00:19:02,000
and it's very easy to spot the

555
00:19:02,000 --> 00:19:03,760
differences and also the same group

556
00:19:03,760 --> 00:19:04,880
results

557
00:19:04,880 --> 00:19:08,240
are displayed at the bottom

558
00:19:09,679 --> 00:19:12,240
so with the help of our triager we

559
00:19:12,240 --> 00:19:14,080
actually managed to classify some group

560
00:19:14,080 --> 00:19:14,640
results

561
00:19:14,640 --> 00:19:16,799
for each commit and we classified the

562
00:19:16,799 --> 00:19:18,640
results for each commit as either true

563
00:19:18,640 --> 00:19:19,280
positive

564
00:19:19,280 --> 00:19:21,760
or false negative and a true positive

565
00:19:21,760 --> 00:19:22,720
means that

566
00:19:22,720 --> 00:19:24,480
some group detects the fixed crosstalk

567
00:19:24,480 --> 00:19:25,760
scripting vulnerability

568
00:19:25,760 --> 00:19:27,600
or some group detects a cause that led

569
00:19:27,600 --> 00:19:28,960
to cross-site scripting

570
00:19:28,960 --> 00:19:30,559
and a false negative just means that

571
00:19:30,559 --> 00:19:32,400
it's not a true positive so i'll show

572
00:19:32,400 --> 00:19:33,600
you what i mean by these

573
00:19:33,600 --> 00:19:38,080
two cases later

574
00:19:38,080 --> 00:19:40,720
here's an example of the first case of

575
00:19:40,720 --> 00:19:43,280
true positive which is detect the fix

576
00:19:43,280 --> 00:19:45,280
and essentially um this is the rails

577
00:19:45,280 --> 00:19:47,200
example and we see that

578
00:19:47,200 --> 00:19:50,160
erb template renders with if a erb

579
00:19:50,160 --> 00:19:52,240
template renders with html safe it tells

580
00:19:52,240 --> 00:19:53,120
the engine

581
00:19:53,120 --> 00:19:55,039
i'm super certain that this is actually

582
00:19:55,039 --> 00:19:56,480
safe so please render

583
00:19:56,480 --> 00:19:58,559
this without escaping and this can be

584
00:19:58,559 --> 00:20:00,080
very dangerous and can lead to

585
00:20:00,080 --> 00:20:01,200
cross-site scripting

586
00:20:01,200 --> 00:20:03,919
if user based input gets passed into

587
00:20:03,919 --> 00:20:07,840
html safe

588
00:20:07,919 --> 00:20:11,679
cool so we look and see if our stem grip

589
00:20:11,679 --> 00:20:13,600
rules have actually detected this fix

590
00:20:13,600 --> 00:20:15,280
and then it has it has detected the

591
00:20:15,280 --> 00:20:16,720
exact line

592
00:20:16,720 --> 00:20:18,840
so this is an example of detecting the

593
00:20:18,840 --> 00:20:21,760
fix

594
00:20:21,760 --> 00:20:24,400
and the second example of a true

595
00:20:24,400 --> 00:20:26,080
positive which is detecting a cause can

596
00:20:26,080 --> 00:20:28,080
be shown by this django example

597
00:20:28,080 --> 00:20:31,039
so this essentially we see that this fix

598
00:20:31,039 --> 00:20:31,919
actually

599
00:20:31,919 --> 00:20:34,080
forces escaping on every email subject

600
00:20:34,080 --> 00:20:35,360
and body however this

601
00:20:35,360 --> 00:20:37,200
actually isn't the true cause of the

602
00:20:37,200 --> 00:20:39,600
problem

603
00:20:39,919 --> 00:20:42,240
the true issue is that escaping has been

604
00:20:42,240 --> 00:20:44,000
actually turned off globally for email

605
00:20:44,000 --> 00:20:44,799
templates

606
00:20:44,799 --> 00:20:47,640
so if you look into these lines on line

607
00:20:47,640 --> 00:20:48,960
185

608
00:20:48,960 --> 00:20:51,120
there's other escape equals false for

609
00:20:51,120 --> 00:20:52,320
these email templates

610
00:20:52,320 --> 00:20:54,559
and this is very dangerous and can lead

611
00:20:54,559 --> 00:20:56,480
to crosstalk scripting vulnerabilities

612
00:20:56,480 --> 00:20:58,640
and we see that some grump has actually

613
00:20:58,640 --> 00:20:59,760
caught this exact

614
00:20:59,760 --> 00:21:01,919
example so this is the example of

615
00:21:01,919 --> 00:21:04,960
detecting a cause

616
00:21:06,000 --> 00:21:09,120
awesome and now i'll pass um i'll pass

617
00:21:09,120 --> 00:21:11,039
this talk on to grayson who will

618
00:21:11,039 --> 00:21:13,440
guide you to the end of it thanks

619
00:21:13,440 --> 00:21:14,320
colleen

620
00:21:14,320 --> 00:21:15,760
uh colleague you've done a wonderful job

621
00:21:15,760 --> 00:21:17,440
explaining everything up till now and so

622
00:21:17,440 --> 00:21:18,480
what i will do

623
00:21:18,480 --> 00:21:21,600
is carry us to the end by talking about

624
00:21:21,600 --> 00:21:22,320
what we

625
00:21:22,320 --> 00:21:24,559
found in a little bit more detail some

626
00:21:24,559 --> 00:21:26,000
research next steps

627
00:21:26,000 --> 00:21:28,000
and then going over how you might apply

628
00:21:28,000 --> 00:21:29,760
this research back

629
00:21:29,760 --> 00:21:31,600
in your home organizations or on your

630
00:21:31,600 --> 00:21:33,760
projects

631
00:21:33,760 --> 00:21:36,080
so with all of the steps that colleen

632
00:21:36,080 --> 00:21:37,440
outlined

633
00:21:37,440 --> 00:21:40,240
by the end of all the gathering and

634
00:21:40,240 --> 00:21:41,440
filtering

635
00:21:41,440 --> 00:21:45,520
and triaging we were left with 125

636
00:21:45,520 --> 00:21:47,679
distinct repositories with cross-site

637
00:21:47,679 --> 00:21:49,360
scripting vulnerabilities in it

638
00:21:49,360 --> 00:21:52,000
and in those repositories we had 140

639
00:21:52,000 --> 00:21:53,679
distinct commits and so those distinct

640
00:21:53,679 --> 00:21:54,480
commits

641
00:21:54,480 --> 00:21:58,080
uh made up the final data set that we

642
00:21:58,080 --> 00:22:00,960
analyzed and so as you can see there are

643
00:22:00,960 --> 00:22:02,480
a couple of times where cross-site

644
00:22:02,480 --> 00:22:03,360
scripting was fixed

645
00:22:03,360 --> 00:22:05,200
multiple times in the same repository as

646
00:22:05,200 --> 00:22:07,120
a result

647
00:22:07,120 --> 00:22:10,480
of those 140 commits the

648
00:22:10,480 --> 00:22:13,520
semgrep rules that we applied trying to

649
00:22:13,520 --> 00:22:15,200
detect cross-site scripting

650
00:22:15,200 --> 00:22:18,240
had a positive hit 82 times

651
00:22:18,240 --> 00:22:22,000
for a detection rate of about 59

652
00:22:22,000 --> 00:22:24,880
and so here's a chart that summarizes

653
00:22:24,880 --> 00:22:25,600
the data

654
00:22:25,600 --> 00:22:29,360
so the um the actual magnitude of the

655
00:22:29,360 --> 00:22:30,159
bar

656
00:22:30,159 --> 00:22:33,120
is the number of commits that we had for

657
00:22:33,120 --> 00:22:33,840
that

658
00:22:33,840 --> 00:22:37,360
language plus framework uh the blue is a

659
00:22:37,360 --> 00:22:40,000
true positive uh for that commit and if

660
00:22:40,000 --> 00:22:41,520
red is the false negative for that

661
00:22:41,520 --> 00:22:42,720
commit and so a couple things that i

662
00:22:42,720 --> 00:22:43,840
want to highlight here

663
00:22:43,840 --> 00:22:45,760
are on the far left you can see that we

664
00:22:45,760 --> 00:22:47,360
only had a very small number of go

665
00:22:47,360 --> 00:22:48,320
repositories

666
00:22:48,320 --> 00:22:49,760
turns out it was really hard for us to

667
00:22:49,760 --> 00:22:51,760
find cross-site scripting instances and

668
00:22:51,760 --> 00:22:53,039
go and i'll talk a little bit

669
00:22:53,039 --> 00:22:54,880
about our hypotheses of why that is

670
00:22:54,880 --> 00:22:56,080
later

671
00:22:56,080 --> 00:22:57,520
and then of course on the far right side

672
00:22:57,520 --> 00:22:59,520
we see that client-side javascript

673
00:22:59,520 --> 00:23:00,799
which is javascript that runs in the

674
00:23:00,799 --> 00:23:02,320
browser this is in contrast to regular

675
00:23:02,320 --> 00:23:04,240
java or not regular javascript but like

676
00:23:04,240 --> 00:23:06,000
javascript that's in node.js like a

677
00:23:06,000 --> 00:23:07,360
server and or some other kind of

678
00:23:07,360 --> 00:23:08,400
environment

679
00:23:08,400 --> 00:23:10,400
anyway client-side javascript had the

680
00:23:10,400 --> 00:23:12,240
most cross-site scripting instances

681
00:23:12,240 --> 00:23:15,200
by a long shot and then you can see that

682
00:23:15,200 --> 00:23:17,200
java and jsp had the highest detection

683
00:23:17,200 --> 00:23:19,280
rate it's the largest blue bar inside of

684
00:23:19,280 --> 00:23:20,720
it and you can see that express.js

685
00:23:20,720 --> 00:23:22,320
our express.js rules have the lowest

686
00:23:22,320 --> 00:23:23,760
detection rate which is the largest red

687
00:23:23,760 --> 00:23:25,280
bar

688
00:23:25,280 --> 00:23:27,600
and so this is a tabular view for those

689
00:23:27,600 --> 00:23:29,360
who prefer the tables

690
00:23:29,360 --> 00:23:31,360
it's sorted by detection rate and so

691
00:23:31,360 --> 00:23:32,720
once again you can see that

692
00:23:32,720 --> 00:23:35,039
java and jsp is at the top express.js is

693
00:23:35,039 --> 00:23:36,640
at the bottom and everything else is in

694
00:23:36,640 --> 00:23:39,039
between

695
00:23:40,000 --> 00:23:42,480
so i want to highlight a couple of more

696
00:23:42,480 --> 00:23:44,240
examples of things that we found colleen

697
00:23:44,240 --> 00:23:45,440
already demonstrated a couple when we

698
00:23:45,440 --> 00:23:46,799
were talking about our definitions of

699
00:23:46,799 --> 00:23:48,559
true positives so i'll just highlight a

700
00:23:48,559 --> 00:23:49,520
couple more because they're very

701
00:23:49,520 --> 00:23:50,960
interesting

702
00:23:50,960 --> 00:23:53,200
um so this is one of our go examples one

703
00:23:53,200 --> 00:23:54,480
of our three

704
00:23:54,480 --> 00:23:56,880
and so what's happening in this one is

705
00:23:56,880 --> 00:23:58,240
you can see that the committer

706
00:23:58,240 --> 00:24:01,440
has removed this line that writes a

707
00:24:01,440 --> 00:24:03,600
string or a stream of bytes directly to

708
00:24:03,600 --> 00:24:05,360
the response writer

709
00:24:05,360 --> 00:24:06,559
and instead what they have done is

710
00:24:06,559 --> 00:24:08,240
they've replaced it with this error

711
00:24:08,240 --> 00:24:09,919
template

712
00:24:09,919 --> 00:24:13,520
that is then rendered into the response

713
00:24:13,520 --> 00:24:14,159
writer's

714
00:24:14,159 --> 00:24:17,520
stream instead and so the reason this

715
00:24:17,520 --> 00:24:18,559
fixes the cross-site scripting

716
00:24:18,559 --> 00:24:20,159
vulnerability is because

717
00:24:20,159 --> 00:24:21,919
writing data directly to the response

718
00:24:21,919 --> 00:24:23,279
writer doesn't provide any

719
00:24:23,279 --> 00:24:25,600
escaping whatsoever it has no context it

720
00:24:25,600 --> 00:24:27,679
doesn't know anything about html it just

721
00:24:27,679 --> 00:24:29,840
it just writes what you write to it and

722
00:24:29,840 --> 00:24:32,000
so instead by switching over to the html

723
00:24:32,000 --> 00:24:35,279
template package and calling execute on

724
00:24:35,279 --> 00:24:37,520
a template that you define

725
00:24:37,520 --> 00:24:39,120
this package is designed to be safe as

726
00:24:39,120 --> 00:24:40,640
safe as it can be at least

727
00:24:40,640 --> 00:24:44,400
and will provide escaping for the html

728
00:24:44,400 --> 00:24:45,919
input that gets rendered in that

729
00:24:45,919 --> 00:24:46,640
template

730
00:24:46,640 --> 00:24:49,840
and so this is safe it fixes the

731
00:24:49,840 --> 00:24:51,760
cross-site scripting vulnerability but

732
00:24:51,760 --> 00:24:53,760
in any case this is one of the examples

733
00:24:53,760 --> 00:24:55,600
of detecting the exact line because our

734
00:24:55,600 --> 00:24:57,039
semgrep rule detected

735
00:24:57,039 --> 00:25:00,159
the direct write to the response writer

736
00:25:00,159 --> 00:25:02,000
it picked that up and then flagged it

737
00:25:02,000 --> 00:25:04,240
here

738
00:25:04,240 --> 00:25:06,320
so this is another example this is a

739
00:25:06,320 --> 00:25:07,919
java and jsp

740
00:25:07,919 --> 00:25:10,799
template example so the committer here

741
00:25:10,799 --> 00:25:11,919
has removed

742
00:25:11,919 --> 00:25:16,000
or has added this special tag

743
00:25:16,000 --> 00:25:18,640
that starts with c colon out and has a

744
00:25:18,640 --> 00:25:20,240
value contained within it

745
00:25:20,240 --> 00:25:23,440
and so in jsp templates c colon out

746
00:25:23,440 --> 00:25:25,520
will automatically escape whatever

747
00:25:25,520 --> 00:25:27,039
contain whatever is contained within

748
00:25:27,039 --> 00:25:27,760
that tag

749
00:25:27,760 --> 00:25:30,559
and so this is one of the few uh correct

750
00:25:30,559 --> 00:25:31,360
ways of

751
00:25:31,360 --> 00:25:33,840
of making sure that your data is escaped

752
00:25:33,840 --> 00:25:35,440
in jsp templates

753
00:25:35,440 --> 00:25:36,880
jsp templates are particularly

754
00:25:36,880 --> 00:25:38,559
interesting because in so far as we can

755
00:25:38,559 --> 00:25:38,960
tell

756
00:25:38,960 --> 00:25:41,840
there's no actual automatic escaping uh

757
00:25:41,840 --> 00:25:44,000
enabled in the default ecosystem

758
00:25:44,000 --> 00:25:45,600
and so by default nothing is really

759
00:25:45,600 --> 00:25:47,120
rendered safely and so you have to

760
00:25:47,120 --> 00:25:48,640
remember to do c dot out or

761
00:25:48,640 --> 00:25:50,720
or see colon out in one of the other or

762
00:25:50,720 --> 00:25:52,400
one of the other alternatives that

763
00:25:52,400 --> 00:25:54,320
do escaping for your data in jsp

764
00:25:54,320 --> 00:25:55,600
templates

765
00:25:55,600 --> 00:25:57,440
so we can see the same grip results here

766
00:25:57,440 --> 00:25:59,039
where it happily picked this up

767
00:25:59,039 --> 00:26:00,480
it noticed that these values were being

768
00:26:00,480 --> 00:26:02,159
rendered directly and

769
00:26:02,159 --> 00:26:07,520
were not being rendered in a safe way

770
00:26:08,000 --> 00:26:10,559
and so of course we had a handful of

771
00:26:10,559 --> 00:26:12,000
instances that we did not detect

772
00:26:12,000 --> 00:26:13,760
as well and so i just want to show you

773
00:26:13,760 --> 00:26:15,360
one of those here

774
00:26:15,360 --> 00:26:16,960
so this is one of our express js

775
00:26:16,960 --> 00:26:19,600
examples and what this express.js app

776
00:26:19,600 --> 00:26:20,400
does

777
00:26:20,400 --> 00:26:23,120
is have a special function for rendering

778
00:26:23,120 --> 00:26:25,039
errors in a fancy little svg that

779
00:26:25,039 --> 00:26:26,080
they've put together

780
00:26:26,080 --> 00:26:27,279
and so the way that they construct this

781
00:26:27,279 --> 00:26:30,240
svg is by manually

782
00:26:30,240 --> 00:26:32,640
constructing html using a javascript

783
00:26:32,640 --> 00:26:33,679
template string

784
00:26:33,679 --> 00:26:36,720
and so you can see that the line that is

785
00:26:36,720 --> 00:26:39,520
updated has a message template variable

786
00:26:39,520 --> 00:26:40,480
within it

787
00:26:40,480 --> 00:26:42,640
and this render error function gets

788
00:26:42,640 --> 00:26:44,159
called in several places in the

789
00:26:44,159 --> 00:26:45,039
application

790
00:26:45,039 --> 00:26:46,880
and in a few of those places those

791
00:26:46,880 --> 00:26:50,159
messages are

792
00:26:50,159 --> 00:26:51,760
susceptible to user input which means

793
00:26:51,760 --> 00:26:53,279
you could technically inject

794
00:26:53,279 --> 00:26:55,120
something into this and and do

795
00:26:55,120 --> 00:26:56,320
cross-site scripting

796
00:26:56,320 --> 00:26:58,559
so of course the fix is here that the

797
00:26:58,559 --> 00:26:59,760
committer does is

798
00:26:59,760 --> 00:27:03,520
encoding html the reason that some grip

799
00:27:03,520 --> 00:27:04,880
wasn't able to detect this

800
00:27:04,880 --> 00:27:06,640
in particular is because we didn't have

801
00:27:06,640 --> 00:27:07,919
a way of

802
00:27:07,919 --> 00:27:10,080
inferring that html was being manually

803
00:27:10,080 --> 00:27:11,679
constructed in a template string

804
00:27:11,679 --> 00:27:13,279
and so if you detected every javascript

805
00:27:13,279 --> 00:27:14,720
template string uh

806
00:27:14,720 --> 00:27:16,240
in the data set obviously that would be

807
00:27:16,240 --> 00:27:17,840
too much and it wouldn't be very precise

808
00:27:17,840 --> 00:27:19,200
and not very useful

809
00:27:19,200 --> 00:27:21,919
and so since we weren't able to do that

810
00:27:21,919 --> 00:27:25,279
we weren't able to detect this

811
00:27:26,240 --> 00:27:28,240
so we learned a lot through this

812
00:27:28,240 --> 00:27:30,000
research and it was very interesting to

813
00:27:30,000 --> 00:27:32,080
sort of take a slice of the open source

814
00:27:32,080 --> 00:27:33,919
ecosystem for cross-site scripting and

815
00:27:33,919 --> 00:27:35,360
to take a look at it so i want to talk

816
00:27:35,360 --> 00:27:37,760
about some key takeaways

817
00:27:37,760 --> 00:27:40,799
um our first one is that we believe that

818
00:27:40,799 --> 00:27:42,640
secure guardrails would work and so the

819
00:27:42,640 --> 00:27:44,399
idea of course is that if you

820
00:27:44,399 --> 00:27:46,640
if these committers were running secure

821
00:27:46,640 --> 00:27:48,399
guardrails with these policies that said

822
00:27:48,399 --> 00:27:51,600
don't do this do this instead

823
00:27:51,600 --> 00:27:53,919
that a lot of these instances would have

824
00:27:53,919 --> 00:27:54,880
been

825
00:27:54,880 --> 00:27:58,240
protected against so overall we had a 59

826
00:27:58,240 --> 00:27:59,919
detection rate with the policies that we

827
00:27:59,919 --> 00:28:02,000
developed and one anecdote

828
00:28:02,000 --> 00:28:04,159
that i want to draw special attention to

829
00:28:04,159 --> 00:28:05,600
is that our

830
00:28:05,600 --> 00:28:08,480
react data the data that we ended up

831
00:28:08,480 --> 00:28:09,039
getting

832
00:28:09,039 --> 00:28:10,320
as a result of running all these rules

833
00:28:10,320 --> 00:28:13,120
on react ended up being 41

834
00:28:13,120 --> 00:28:14,640
but the only rule that we were running

835
00:28:14,640 --> 00:28:16,399
on our react data was just looking for

836
00:28:16,399 --> 00:28:17,039
dangerously

837
00:28:17,039 --> 00:28:19,520
inner html so that means out of the 12

838
00:28:19,520 --> 00:28:21,760
or 13 instances that are there

839
00:28:21,760 --> 00:28:25,360
um nearly half of them were just caused

840
00:28:25,360 --> 00:28:25,760
by

841
00:28:25,760 --> 00:28:27,120
improper use of dangerously set

842
00:28:27,120 --> 00:28:30,240
interhtml which of course by the name uh

843
00:28:30,240 --> 00:28:33,120
dangerously bypasses your uh cross-site

844
00:28:33,120 --> 00:28:34,320
scripting protections

845
00:28:34,320 --> 00:28:36,399
and so this is actually uh almost an

846
00:28:36,399 --> 00:28:38,159
identical percentage to what microsoft

847
00:28:38,159 --> 00:28:40,480
got with banning stir copy

848
00:28:40,480 --> 00:28:43,200
and so uh you know seeing these results

849
00:28:43,200 --> 00:28:44,960
is really interesting and and leads us

850
00:28:44,960 --> 00:28:45,679
to believe that

851
00:28:45,679 --> 00:28:48,720
you can go really far just by uh

852
00:28:48,720 --> 00:28:50,320
enabling these guard like these really

853
00:28:50,320 --> 00:28:52,000
simple guard rails such as

854
00:28:52,000 --> 00:28:54,399
disabling or preventing use of dangerous

855
00:28:54,399 --> 00:28:56,320
lisa and our html

856
00:28:56,320 --> 00:28:59,760
so the um the other 59

857
00:28:59,760 --> 00:29:02,960
of that data set uh was frequently a

858
00:29:02,960 --> 00:29:04,399
third-party library that eventually

859
00:29:04,399 --> 00:29:05,840
rendered a component with dangerously

860
00:29:05,840 --> 00:29:08,559
inner html and so we didn't write rules

861
00:29:08,559 --> 00:29:08,960
to

862
00:29:08,960 --> 00:29:10,840
cover every third party library in

863
00:29:10,840 --> 00:29:12,159
existence

864
00:29:12,159 --> 00:29:13,440
because that would have taken forever

865
00:29:13,440 --> 00:29:16,480
and so but the culprit was still

866
00:29:16,480 --> 00:29:18,960
usually dangerously set in html it just

867
00:29:18,960 --> 00:29:22,320
traveled through a couple of code paths

868
00:29:22,480 --> 00:29:24,399
another takeaway is that having no guard

869
00:29:24,399 --> 00:29:26,720
rails is a recipe for disaster

870
00:29:26,720 --> 00:29:28,720
this is particularly highlighted in the

871
00:29:28,720 --> 00:29:30,559
results for java and jsp

872
00:29:30,559 --> 00:29:34,880
because to our knowledge jsp provides no

873
00:29:34,880 --> 00:29:37,120
escaping by default aside from some

874
00:29:37,120 --> 00:29:38,720
plugins that you can use

875
00:29:38,720 --> 00:29:40,559
so if you are responsible for this

876
00:29:40,559 --> 00:29:41,840
technology i highly recommend you go

877
00:29:41,840 --> 00:29:43,840
look at these plugins

878
00:29:43,840 --> 00:29:46,399
anyway by default jsps do not safely

879
00:29:46,399 --> 00:29:47,360
render anything

880
00:29:47,360 --> 00:29:49,279
which means it's totally on you or your

881
00:29:49,279 --> 00:29:50,960
developers to remember to escape things

882
00:29:50,960 --> 00:29:52,000
properly

883
00:29:52,000 --> 00:29:55,200
so java and jsp is not secure by default

884
00:29:55,200 --> 00:29:56,799
nor does it make the safe path very

885
00:29:56,799 --> 00:29:58,559
obvious and this was reflected in our

886
00:29:58,559 --> 00:30:00,080
results where we were able to get a

887
00:30:00,080 --> 00:30:01,360
really high detection rate

888
00:30:01,360 --> 00:30:04,880
in java and jsp and then

889
00:30:04,880 --> 00:30:06,399
colleen talked about this way back at

890
00:30:06,399 --> 00:30:08,640
the beginning of the talk but

891
00:30:08,640 --> 00:30:11,760
as we developed these sets of rules

892
00:30:11,760 --> 00:30:14,720
to to use for this research we wanted to

893
00:30:14,720 --> 00:30:15,200
use

894
00:30:15,200 --> 00:30:17,440
our these checks on our own code of

895
00:30:17,440 --> 00:30:18,559
course and so

896
00:30:18,559 --> 00:30:20,159
we have a flask back end for one of our

897
00:30:20,159 --> 00:30:22,240
projects we deployed our fastball flask

898
00:30:22,240 --> 00:30:23,360
policy on that

899
00:30:23,360 --> 00:30:26,159
and to date um as of uh you know it's

900
00:30:26,159 --> 00:30:27,360
been running for about three months

901
00:30:27,360 --> 00:30:30,880
it has detected uh and prevented two uh

902
00:30:30,880 --> 00:30:32,399
cross-site scripting instances that i

903
00:30:32,399 --> 00:30:34,240
know about from going out into

904
00:30:34,240 --> 00:30:34,880
production

905
00:30:34,880 --> 00:30:36,399
so we've got been able to get mileage

906
00:30:36,399 --> 00:30:37,520
out of it ourselves which has been

907
00:30:37,520 --> 00:30:40,000
really awesome

908
00:30:40,080 --> 00:30:43,440
other takeaways that are less

909
00:30:43,440 --> 00:30:47,360
related to the actual results of course

910
00:30:47,360 --> 00:30:49,120
there were only three instances of

911
00:30:49,120 --> 00:30:50,720
cross-site scripting that we found

912
00:30:50,720 --> 00:30:51,279
across

913
00:30:51,279 --> 00:30:53,679
all of our searching in github and

914
00:30:53,679 --> 00:30:55,440
bigquery

915
00:30:55,440 --> 00:30:58,000
only three samples were where were we

916
00:30:58,000 --> 00:30:59,120
able to find

917
00:30:59,120 --> 00:31:02,159
which leads us to think that either like

918
00:31:02,159 --> 00:31:04,480
nobody writes web apps using the

919
00:31:04,480 --> 00:31:05,840
frameworks that we

920
00:31:05,840 --> 00:31:08,159
uh search for or cross-site scripting is

921
00:31:08,159 --> 00:31:10,320
just really hard to do and go

922
00:31:10,320 --> 00:31:11,840
we've looked at go a number of times for

923
00:31:11,840 --> 00:31:13,120
a number of different other things and

924
00:31:13,120 --> 00:31:14,240
it typically has

925
00:31:14,240 --> 00:31:17,679
the safest track record and so

926
00:31:17,679 --> 00:31:19,279
that it could be that it's just harder

927
00:31:19,279 --> 00:31:21,279
to do vulnerabilities and go than than

928
00:31:21,279 --> 00:31:22,640
other things

929
00:31:22,640 --> 00:31:24,000
of course on the flip side of that uh

930
00:31:24,000 --> 00:31:25,440
cross-site scripting occurs most often

931
00:31:25,440 --> 00:31:27,120
in client-side javascript

932
00:31:27,120 --> 00:31:29,039
um there were a total of 44 commits

933
00:31:29,039 --> 00:31:30,720
fixing cross-site scripting

934
00:31:30,720 --> 00:31:33,039
which was nearly a third 31 percent of

935
00:31:33,039 --> 00:31:35,840
the entire corpus that we had collected

936
00:31:35,840 --> 00:31:39,039
of note uh in these 44 commits

937
00:31:39,039 --> 00:31:41,679
17 of them were strictly due to

938
00:31:41,679 --> 00:31:43,840
assignment to enter html

939
00:31:43,840 --> 00:31:46,080
and so that was 40 of all of the client

940
00:31:46,080 --> 00:31:47,519
side javascript findings

941
00:31:47,519 --> 00:31:49,679
so you can get a lot of mileage uh out

942
00:31:49,679 --> 00:31:50,799
of just like

943
00:31:50,799 --> 00:31:52,559
checking to make sure that people aren't

944
00:31:52,559 --> 00:31:54,000
assigning things to dangerously center

945
00:31:54,000 --> 00:31:55,919
html or innerhtml

946
00:31:55,919 --> 00:31:58,559
and that will go really far so this is

947
00:31:58,559 --> 00:32:00,240
an example of one of those inner html

948
00:32:00,240 --> 00:32:01,600
assignments you can see that they're

949
00:32:01,600 --> 00:32:04,320
manually constructing a html and then

950
00:32:04,320 --> 00:32:06,240
directly assigning it to innerhtml which

951
00:32:06,240 --> 00:32:07,440
creates a cross-site scripting

952
00:32:07,440 --> 00:32:09,919
vulnerability

953
00:32:09,919 --> 00:32:11,360
some considerations here of course are

954
00:32:11,360 --> 00:32:12,559
that we didn't have any measure

955
00:32:12,559 --> 00:32:13,200
measurements

956
00:32:13,200 --> 00:32:16,000
for false positives um we wrote our

957
00:32:16,000 --> 00:32:18,159
checks as sanely as possible so like we

958
00:32:18,159 --> 00:32:19,200
didn't try to detect

959
00:32:19,200 --> 00:32:20,960
100 of java for instance because that

960
00:32:20,960 --> 00:32:22,640
would have given us 100 detection rate

961
00:32:22,640 --> 00:32:23,039
right

962
00:32:23,039 --> 00:32:24,399
so we were saying in how we approached

963
00:32:24,399 --> 00:32:26,399
this we didn't like try to cast a white

964
00:32:26,399 --> 00:32:27,279
that we weren't

965
00:32:27,279 --> 00:32:28,880
trying to like fudge the numbers or

966
00:32:28,880 --> 00:32:31,039
anything like that

967
00:32:31,039 --> 00:32:33,200
but one of the other reasons that we

968
00:32:33,200 --> 00:32:34,640
didn't really focus on false positives

969
00:32:34,640 --> 00:32:35,919
for this research is because we think

970
00:32:35,919 --> 00:32:37,279
that false positive reduction would

971
00:32:37,279 --> 00:32:37,760
yield

972
00:32:37,760 --> 00:32:40,880
similar results because the

973
00:32:40,880 --> 00:32:42,399
iteration process on reducing false

974
00:32:42,399 --> 00:32:44,480
positives for a check strictly takes

975
00:32:44,480 --> 00:32:46,000
your

976
00:32:46,000 --> 00:32:48,480
total result set and tries to weed out

977
00:32:48,480 --> 00:32:49,919
things that were not true positives

978
00:32:49,919 --> 00:32:50,720
initially

979
00:32:50,720 --> 00:32:53,120
so we think that the true positive

980
00:32:53,120 --> 00:32:55,120
results would be approximately the same

981
00:32:55,120 --> 00:32:57,039
and the results the detection results

982
00:32:57,039 --> 00:32:59,760
would be pretty much the same as well

983
00:32:59,760 --> 00:33:02,320
so what do we want to do with this next

984
00:33:02,320 --> 00:33:03,519
obviously we want to apply this to more

985
00:33:03,519 --> 00:33:04,880
languages and frameworks we found it

986
00:33:04,880 --> 00:33:05,760
useful for us

987
00:33:05,760 --> 00:33:09,120
just on our flask back end and we want

988
00:33:09,120 --> 00:33:10,559
to apply that to other things as

989
00:33:10,559 --> 00:33:12,480
as we become aware of them or interested

990
00:33:12,480 --> 00:33:14,080
in them and then of course we also

991
00:33:14,080 --> 00:33:15,440
as i just mentioned want to spend some

992
00:33:15,440 --> 00:33:16,880
time reducing the false positive rate

993
00:33:16,880 --> 00:33:18,080
for some of the checks

994
00:33:18,080 --> 00:33:20,559
um we have uh methods of doing this at

995
00:33:20,559 --> 00:33:21,279
r2c

996
00:33:21,279 --> 00:33:22,720
uh we have like a massive code scanner

997
00:33:22,720 --> 00:33:24,320
that goes out and finds much stuff so

998
00:33:24,320 --> 00:33:26,159
we can we're pretty confident our

999
00:33:26,159 --> 00:33:27,440
ability to do

1000
00:33:27,440 --> 00:33:30,559
false positive reduction we also want to

1001
00:33:30,559 --> 00:33:32,240
cover additional vulnerability classes

1002
00:33:32,240 --> 00:33:36,240
obviously the os top 10 is a very easy

1003
00:33:36,240 --> 00:33:38,159
list for us to target and a couple of

1004
00:33:38,159 --> 00:33:39,440
the ones that we've done so far in

1005
00:33:39,440 --> 00:33:40,880
addition to the cross-site scripting

1006
00:33:40,880 --> 00:33:42,480
ones are command injection

1007
00:33:42,480 --> 00:33:44,080
sql injection and unencrypted

1008
00:33:44,080 --> 00:33:45,840
transmissions um and so if you're

1009
00:33:45,840 --> 00:33:46,960
interested in actually running any of

1010
00:33:46,960 --> 00:33:48,559
these rules some graph is open source

1011
00:33:48,559 --> 00:33:49,679
and you can download them

1012
00:33:49,679 --> 00:33:50,799
you can download some graph and you can

1013
00:33:50,799 --> 00:33:52,960
download these rules for free

1014
00:33:52,960 --> 00:33:54,159
if you want to scan your own code for

1015
00:33:54,159 --> 00:33:56,559
these things

1016
00:33:57,360 --> 00:33:58,559
one other thing we want to do is prove

1017
00:33:58,559 --> 00:34:00,640
this approach on private code so

1018
00:34:00,640 --> 00:34:02,080
obviously this research focused

1019
00:34:02,080 --> 00:34:04,159
exclusively on open source research

1020
00:34:04,159 --> 00:34:05,600
but we really want to make it applicable

1021
00:34:05,600 --> 00:34:06,880
to people who are trying to run security

1022
00:34:06,880 --> 00:34:08,000
organizations

1023
00:34:08,000 --> 00:34:11,280
um and so we want to see how this test

1024
00:34:11,280 --> 00:34:12,320
holds or this

1025
00:34:12,320 --> 00:34:14,480
process holds up on private or internal

1026
00:34:14,480 --> 00:34:16,239
code so some things some questions that

1027
00:34:16,239 --> 00:34:17,280
we would need to answer for that are

1028
00:34:17,280 --> 00:34:18,719
like do companies use internal

1029
00:34:18,719 --> 00:34:20,000
frameworks rather than open source

1030
00:34:20,000 --> 00:34:21,839
ones so since everything we did was open

1031
00:34:21,839 --> 00:34:23,839
source if there are

1032
00:34:23,839 --> 00:34:25,280
internal frameworks that need custom

1033
00:34:25,280 --> 00:34:26,719
rules written for them like how would

1034
00:34:26,719 --> 00:34:28,560
this apply to that

1035
00:34:28,560 --> 00:34:29,760
and then another question is like are

1036
00:34:29,760 --> 00:34:31,119
there organizational challenges to

1037
00:34:31,119 --> 00:34:32,639
adopting secure defaults

1038
00:34:32,639 --> 00:34:34,879
secured guardrails excuse me at scale

1039
00:34:34,879 --> 00:34:36,239
and so

1040
00:34:36,239 --> 00:34:38,960
you know sometimes it's hard to roll out

1041
00:34:38,960 --> 00:34:39,599
new checks

1042
00:34:39,599 --> 00:34:42,239
it's hard to roll out checking programs

1043
00:34:42,239 --> 00:34:42,960
and so

1044
00:34:42,960 --> 00:34:45,918
what sort of political barriers or

1045
00:34:45,918 --> 00:34:47,280
technical barriers are there inside of

1046
00:34:47,280 --> 00:34:49,839
an organization

1047
00:34:50,000 --> 00:34:52,239
so i want to conclude this talk by

1048
00:34:52,239 --> 00:34:53,679
talking very briefly about how you can

1049
00:34:53,679 --> 00:34:54,639
take this back

1050
00:34:54,639 --> 00:34:58,320
to your own organizations and so

1051
00:34:58,320 --> 00:35:01,119
how you might do this we propose this

1052
00:35:01,119 --> 00:35:01,839
four

1053
00:35:01,839 --> 00:35:06,480
step process for how you might take this

1054
00:35:06,560 --> 00:35:08,320
eradicating vulnerability classes back

1055
00:35:08,320 --> 00:35:09,599
to your own

1056
00:35:09,599 --> 00:35:11,440
organization so the first step is to

1057
00:35:11,440 --> 00:35:12,800
select vulnerability class of course you

1058
00:35:12,800 --> 00:35:14,160
have to pick one there's a lot to choose

1059
00:35:14,160 --> 00:35:14,640
from

1060
00:35:14,640 --> 00:35:15,680
and there are a lot of different ways of

1061
00:35:15,680 --> 00:35:17,839
choosing which ones you want to focus on

1062
00:35:17,839 --> 00:35:19,599
and so if you have vulnerability data

1063
00:35:19,599 --> 00:35:21,440
like a vulnerability management program

1064
00:35:21,440 --> 00:35:24,000
you can rely on that to tell you which

1065
00:35:24,000 --> 00:35:25,680
vulnerabilities you experience most

1066
00:35:25,680 --> 00:35:26,400
frequently

1067
00:35:26,400 --> 00:35:27,920
or perhaps which ones have the highest

1068
00:35:27,920 --> 00:35:31,119
impact and then you can select one and

1069
00:35:31,119 --> 00:35:33,200
start to move down this process and so

1070
00:35:33,200 --> 00:35:34,240
the second step

1071
00:35:34,240 --> 00:35:35,839
is to select safe patterns and make it

1072
00:35:35,839 --> 00:35:38,800
the default and so this is that

1073
00:35:38,800 --> 00:35:40,400
policy that we showed you earlier it

1074
00:35:40,400 --> 00:35:42,560
looks kind of like this so you have to

1075
00:35:42,560 --> 00:35:44,079
identify what are your secure guard

1076
00:35:44,079 --> 00:35:45,040
rails what don't you want your

1077
00:35:45,040 --> 00:35:46,320
developers to do that would result in

1078
00:35:46,320 --> 00:35:47,440
the vulnerability

1079
00:35:47,440 --> 00:35:48,880
and then identifying what the

1080
00:35:48,880 --> 00:35:50,560
alternatives are the recommendations for

1081
00:35:50,560 --> 00:35:51,839
them

1082
00:35:51,839 --> 00:35:52,960
and then you have to make that the

1083
00:35:52,960 --> 00:35:55,440
default pattern in some way and so

1084
00:35:55,440 --> 00:35:56,960
some ways to do that are steps three and

1085
00:35:56,960 --> 00:35:58,480
four step three is to train developers

1086
00:35:58,480 --> 00:36:00,320
to use the safe pattern

1087
00:36:00,320 --> 00:36:03,200
get the word out uh use your cicd

1088
00:36:03,200 --> 00:36:04,480
pipelines if you have the ability to

1089
00:36:04,480 --> 00:36:06,079
inject messages into that while you scan

1090
00:36:06,079 --> 00:36:08,240
for code patterns do that

1091
00:36:08,240 --> 00:36:10,839
otherwise hold like brown bags with your

1092
00:36:10,839 --> 00:36:12,079
developers

1093
00:36:12,079 --> 00:36:13,680
or if you have any security training or

1094
00:36:13,680 --> 00:36:16,480
onboarding mention it there

1095
00:36:16,480 --> 00:36:18,160
any coding guidelines that you have as

1096
00:36:18,160 --> 00:36:20,240
well can be updated with this

1097
00:36:20,240 --> 00:36:23,359
those are great places and then we

1098
00:36:23,359 --> 00:36:25,440
humans are fallible so even if we've

1099
00:36:25,440 --> 00:36:27,200
had this beaten into us we still forget

1100
00:36:27,200 --> 00:36:28,960
things and so you have to use

1101
00:36:28,960 --> 00:36:31,359
uh technology to enforce the safe

1102
00:36:31,359 --> 00:36:32,240
pattern and so

1103
00:36:32,240 --> 00:36:34,079
this would be using some sort of uh

1104
00:36:34,079 --> 00:36:36,079
linter or like text scanner

1105
00:36:36,079 --> 00:36:38,880
to regularly enforce that these patterns

1106
00:36:38,880 --> 00:36:40,079
don't get into your code

1107
00:36:40,079 --> 00:36:42,880
so usually this happens at like a ci cd

1108
00:36:42,880 --> 00:36:44,160
level or build time

1109
00:36:44,160 --> 00:36:46,800
something like that once again this is

1110
00:36:46,800 --> 00:36:48,880
an example of that policy

1111
00:36:48,880 --> 00:36:50,000
so this is kind of what it looks like

1112
00:36:50,000 --> 00:36:52,000
when you're finished all these things

1113
00:36:52,000 --> 00:36:53,280
have corresponding like

1114
00:36:53,280 --> 00:36:55,520
uh linter rules that get run and check

1115
00:36:55,520 --> 00:36:58,320
your code on a regular basis

1116
00:36:58,320 --> 00:37:00,400
if you're interested in um the

1117
00:37:00,400 --> 00:37:01,680
cross-site scripting checks that we

1118
00:37:01,680 --> 00:37:02,640
wrote for every

1119
00:37:02,640 --> 00:37:04,079
uh each one of the frameworks that we

1120
00:37:04,079 --> 00:37:05,760
mentioned we've publicized them all for

1121
00:37:05,760 --> 00:37:06,640
free because

1122
00:37:06,640 --> 00:37:08,640
we did a lot of the work and if you want

1123
00:37:08,640 --> 00:37:10,160
to benefit from that work we figured why

1124
00:37:10,160 --> 00:37:11,920
not so here you go

1125
00:37:11,920 --> 00:37:15,200
you can check out the

1126
00:37:15,200 --> 00:37:17,599
policies like i was just showing you at

1127
00:37:17,599 --> 00:37:18,640
some grip dot dev

1128
00:37:18,640 --> 00:37:21,680
slash docs slash cheat dash sheets

1129
00:37:21,680 --> 00:37:24,960
and they will all be there and if you're

1130
00:37:24,960 --> 00:37:26,800
interested in more details about how you

1131
00:37:26,800 --> 00:37:28,400
can take this back to your organization

1132
00:37:28,400 --> 00:37:30,640
i'll refer you to a talk by two of our

1133
00:37:30,640 --> 00:37:31,440
colleagues

1134
00:37:31,440 --> 00:37:33,920
clint gibler and isaac evans at global

1135
00:37:33,920 --> 00:37:34,480
appsec

1136
00:37:34,480 --> 00:37:36,720
san francisco 2020 about eradicating

1137
00:37:36,720 --> 00:37:38,160
vulnerability classes and so this was a

1138
00:37:38,160 --> 00:37:39,680
very high level overview of that

1139
00:37:39,680 --> 00:37:40,960
they go into way more detail here at

1140
00:37:40,960 --> 00:37:42,480
this talk so if you're interested please

1141
00:37:42,480 --> 00:37:44,480
check it out

1142
00:37:44,480 --> 00:37:46,240
and so with that we will conclude our

1143
00:37:46,240 --> 00:37:49,280
talk please join us in the

1144
00:37:49,280 --> 00:37:52,000
discord channel for questions and we

1145
00:37:52,000 --> 00:37:54,880
hope to see you there

1146
00:37:56,320 --> 00:37:57,920
great great presentation thank you so

1147
00:37:57,920 --> 00:38:00,400
much for for participating in b-sides

1148
00:38:00,400 --> 00:38:02,000
las vegas this year

1149
00:38:02,000 --> 00:38:03,119
and some of this talk i was really

1150
00:38:03,119 --> 00:38:04,880
excited when i saw this this talk on the

1151
00:38:04,880 --> 00:38:06,720
cfp so thank you so much

1152
00:38:06,720 --> 00:38:08,720
um thanks for those of you yeah for

1153
00:38:08,720 --> 00:38:10,000
those of you uh

1154
00:38:10,000 --> 00:38:12,960
watching uh this in the discord if you

1155
00:38:12,960 --> 00:38:14,079
have questions

1156
00:38:14,079 --> 00:38:16,000
uh for the speakers now is the time to

1157
00:38:16,000 --> 00:38:18,400
speak up i am monitoring the discord

1158
00:38:18,400 --> 00:38:21,359
i will ask the questions as you ask them

1159
00:38:21,359 --> 00:38:22,640
i also have some questions that i want

1160
00:38:22,640 --> 00:38:24,240
to ask since i watch the talk

1161
00:38:24,240 --> 00:38:25,920
so um just throw your questions on the

1162
00:38:25,920 --> 00:38:27,520
discord and i'll ask i'll ask the

1163
00:38:27,520 --> 00:38:28,480
speakers

1164
00:38:28,480 --> 00:38:30,839
um one of the questions i'd like to ask

1165
00:38:30,839 --> 00:38:32,000
speakers

1166
00:38:32,000 --> 00:38:35,119
is uh is what was the hardest part of

1167
00:38:35,119 --> 00:38:36,640
this research

1168
00:38:36,640 --> 00:38:39,599
for for the both of you yeah um i'll

1169
00:38:39,599 --> 00:38:40,880
start that colleen do you want to

1170
00:38:40,880 --> 00:38:44,079
want to add your thoughts after um

1171
00:38:44,079 --> 00:38:46,880
and the hardest part for this it was

1172
00:38:46,880 --> 00:38:48,079
probably triaging

1173
00:38:48,079 --> 00:38:50,800
all of the results so we downloaded a

1174
00:38:50,800 --> 00:38:51,920
ton of data

1175
00:38:51,920 --> 00:38:54,640
and we got the diffs between the parent

1176
00:38:54,640 --> 00:38:55,280
and the fix

1177
00:38:55,280 --> 00:38:58,079
and had to look at each one and compare

1178
00:38:58,079 --> 00:38:59,599
that with the results of our scanner in

1179
00:38:59,599 --> 00:39:00,880
order to make sure that it was like

1180
00:39:00,880 --> 00:39:02,160
accurate

1181
00:39:02,160 --> 00:39:04,720
that took a long time and uh

1182
00:39:04,720 --> 00:39:06,240
occasionally there was debate about what

1183
00:39:06,240 --> 00:39:07,359
it meant to be like

1184
00:39:07,359 --> 00:39:10,000
a true positive versus a false negative

1185
00:39:10,000 --> 00:39:10,720
or

1186
00:39:10,720 --> 00:39:13,760
something similar so uh it was a

1187
00:39:13,760 --> 00:39:15,680
herculated effort and there was a team

1188
00:39:15,680 --> 00:39:16,400
of people

1189
00:39:16,400 --> 00:39:18,560
uh involved with it not just the two of

1190
00:39:18,560 --> 00:39:19,920
us um

1191
00:39:19,920 --> 00:39:21,280
but that was that was definitely the

1192
00:39:21,280 --> 00:39:23,359
most challenging part i think and

1193
00:39:23,359 --> 00:39:25,440
even now even now i'm not certain that

1194
00:39:25,440 --> 00:39:26,800
we got every little bit

1195
00:39:26,800 --> 00:39:30,000
right when we triaged everything

1196
00:39:30,000 --> 00:39:43,839
but we did our best

1197
00:40:07,359 --> 00:40:09,760
yeah um how many how many dips we

1198
00:40:09,760 --> 00:40:11,119
talking about i'm just curious

1199
00:40:11,119 --> 00:40:13,119
that the number you mentioned lots of

1200
00:40:13,119 --> 00:40:15,119
diffs just curious

1201
00:40:15,119 --> 00:40:20,000
yeah uh so we ended up with like 140

1202
00:40:20,000 --> 00:40:22,319
distinct commits and that was after

1203
00:40:22,319 --> 00:40:26,160
manual review of about 700 commits

1204
00:40:26,160 --> 00:40:28,000
but we started out with we started out

1205
00:40:28,000 --> 00:40:30,160
with a bunch i think there was like

1206
00:40:30,160 --> 00:40:31,359
somewhere between three and five

1207
00:40:31,359 --> 00:40:34,319
thousand but we were we ran some uh

1208
00:40:34,319 --> 00:40:37,520
we ran some uh um like deduplication

1209
00:40:37,520 --> 00:40:40,079
and heuristics on that first in order to

1210
00:40:40,079 --> 00:40:41,920
get us to the original 700

1211
00:40:41,920 --> 00:40:43,839
but like manually like our team looked

1212
00:40:43,839 --> 00:40:45,839
at probably 700 different diffs

1213
00:40:45,839 --> 00:40:48,799
throughout the entire thing

1214
00:40:49,599 --> 00:40:53,680
um uh all right

1215
00:40:53,680 --> 00:40:57,119
what surprised you both the most

1216
00:40:57,119 --> 00:41:00,880
uh when you started doing this research

1217
00:41:02,079 --> 00:41:06,720
um what surprised when we started

1218
00:41:06,720 --> 00:41:09,839
uh i think the most surprising thing was

1219
00:41:09,839 --> 00:41:10,560
probably the

1220
00:41:10,560 --> 00:41:12,079
the difficulty of getting the data

1221
00:41:12,079 --> 00:41:13,359
because it seemed like it was such a

1222
00:41:13,359 --> 00:41:14,240
easy thing to get

1223
00:41:14,240 --> 00:41:15,599
and we talked about it in the talk

1224
00:41:15,599 --> 00:41:16,960
obviously with this limitation with the

1225
00:41:16,960 --> 00:41:18,160
github api

1226
00:41:18,160 --> 00:41:20,640
we didn't show this in the slides but uh

1227
00:41:20,640 --> 00:41:22,240
we actually talked with like a github

1228
00:41:22,240 --> 00:41:22,960
engineer and we

1229
00:41:22,960 --> 00:41:24,400
were like hey could you like give us

1230
00:41:24,400 --> 00:41:26,800
like your insider access to this api and

1231
00:41:26,800 --> 00:41:28,079
they were like oh no we can't do it

1232
00:41:28,079 --> 00:41:29,520
either we can only access a thousand

1233
00:41:29,520 --> 00:41:30,240
results

1234
00:41:30,240 --> 00:41:33,280
we're like oh so like it's it's limited

1235
00:41:33,280 --> 00:41:35,440
you cannot do any more than a thousand

1236
00:41:35,440 --> 00:41:37,680
results from a query

1237
00:41:37,680 --> 00:41:49,839
oh interesting

1238
00:41:55,520 --> 00:42:03,839
thank you

1239
00:42:14,839 --> 00:42:18,560
um you know you mentioned in your talk

1240
00:42:18,560 --> 00:42:20,880
uh you know looking at the parent

1241
00:42:20,880 --> 00:42:21,680
commits

1242
00:42:21,680 --> 00:42:23,200
what would you say the purpose of

1243
00:42:23,200 --> 00:42:25,359
scanning the parent commit is versus the

1244
00:42:25,359 --> 00:42:27,280
fix commit

1245
00:42:27,280 --> 00:42:31,119
yeah um so the

1246
00:42:31,119 --> 00:42:32,480
if you think about it the fix commit

1247
00:42:32,480 --> 00:42:34,160
doesn't actually have

1248
00:42:34,160 --> 00:42:36,800
the vulnerability in it um and so we

1249
00:42:36,800 --> 00:42:38,079
needed to be able to scan the parent

1250
00:42:38,079 --> 00:42:39,200
commit which

1251
00:42:39,200 --> 00:42:41,359
is any commit prior to the vulnerability

1252
00:42:41,359 --> 00:42:42,720
being fixed in order

1253
00:42:42,720 --> 00:42:44,960
for the scanner to pick up the actual

1254
00:42:44,960 --> 00:42:46,319
code pattern that would have indicated

1255
00:42:46,319 --> 00:42:47,599
the vulnerability

1256
00:42:47,599 --> 00:42:50,640
so sometimes depending on how the

1257
00:42:50,640 --> 00:42:52,160
how the vulnerability was fixed the

1258
00:42:52,160 --> 00:42:53,359
fixed commit would have been sufficient

1259
00:42:53,359 --> 00:42:55,040
but in order to get 100 of the time

1260
00:42:55,040 --> 00:42:56,560
we wanted to make we scan the parent

1261
00:42:56,560 --> 00:42:58,880
commits

1262
00:42:59,520 --> 00:43:03,280
okay um

1263
00:43:03,280 --> 00:43:05,440
if if a corporation so at the end of the

1264
00:43:05,440 --> 00:43:06,880
talk you mentioned you mentioned a slew

1265
00:43:06,880 --> 00:43:08,480
of recommendations

1266
00:43:08,480 --> 00:43:10,160
um you know i work for a large

1267
00:43:10,160 --> 00:43:12,160
enterprise who's also cheap

1268
00:43:12,160 --> 00:43:14,560
so you know if we could only implement

1269
00:43:14,560 --> 00:43:16,160
you know one or a handful of your

1270
00:43:16,160 --> 00:43:17,839
recommendations which ones

1271
00:43:17,839 --> 00:43:19,599
you know would you say would be the the

1272
00:43:19,599 --> 00:43:22,720
most important ones to implement and why

1273
00:43:22,720 --> 00:43:25,920
yeah if you have the

1274
00:43:25,920 --> 00:43:28,480
capability to get a scanner up and

1275
00:43:28,480 --> 00:43:28,960
running

1276
00:43:28,960 --> 00:43:32,079
in a continuous fashion um it doesn't

1277
00:43:32,079 --> 00:43:33,200
necessarily have to be a

1278
00:43:33,200 --> 00:43:35,040
ci cd pipeline you could also do it with

1279
00:43:35,040 --> 00:43:37,359
like if you use git get pre-commit hooks

1280
00:43:37,359 --> 00:43:39,119
out to all of your developers but as

1281
00:43:39,119 --> 00:43:41,520
long as you're getting some scanning

1282
00:43:41,520 --> 00:43:45,040
done with a policy

1283
00:43:45,040 --> 00:43:47,599
that you've either developed or has been

1284
00:43:47,599 --> 00:43:49,040
developed for you

1285
00:43:49,040 --> 00:43:50,960
because we made all of these rules for

1286
00:43:50,960 --> 00:43:53,040
you for instance

1287
00:43:53,040 --> 00:43:54,720
that's probably the number one

1288
00:43:54,720 --> 00:43:56,720
recommendation is like use technology

1289
00:43:56,720 --> 00:43:57,680
leverage it

1290
00:43:57,680 --> 00:44:01,599
um and uh

1291
00:44:01,599 --> 00:44:05,119
hopefully that will help the most

1292
00:44:05,599 --> 00:44:09,839
calling me out you have anything to add

1293
00:44:23,200 --> 00:44:26,160
yeah yeah it's a little bit like having

1294
00:44:26,160 --> 00:44:28,319
a security reviewer constantly checking

1295
00:44:28,319 --> 00:44:30,720
like that's the whole idea of it is like

1296
00:44:30,720 --> 00:44:31,839
making sure that

1297
00:44:31,839 --> 00:44:33,599
something or someone is reviewing

1298
00:44:33,599 --> 00:44:35,280
something all the time

1299
00:44:35,280 --> 00:44:38,400
right nice uh it

1300
00:44:38,400 --> 00:44:40,319
i work for if i work i'm just like i do

1301
00:44:40,319 --> 00:44:41,599
but if i worked

1302
00:44:41,599 --> 00:44:43,839
for a company that's never done you know

1303
00:44:43,839 --> 00:44:45,200
lots of industries are

1304
00:44:45,200 --> 00:44:46,560
are finding out cyber security is

1305
00:44:46,560 --> 00:44:48,240
important now so

1306
00:44:48,240 --> 00:44:49,760
you know if i work for a company that's

1307
00:44:49,760 --> 00:44:51,280
never done this type of thing before and

1308
00:44:51,280 --> 00:44:53,119
i have a

1309
00:44:53,119 --> 00:44:55,599
10 year old code base that's never been

1310
00:44:55,599 --> 00:44:56,720
reviewed

1311
00:44:56,720 --> 00:44:58,160
um you know what what do you each

1312
00:44:58,160 --> 00:45:00,480
recommend

1313
00:45:00,480 --> 00:45:04,160
yeah um i don't know if this is true

1314
00:45:04,160 --> 00:45:06,319
i imagine for situations where

1315
00:45:06,319 --> 00:45:07,839
somebody's responsible for

1316
00:45:07,839 --> 00:45:09,520
a java stack similar to the one that we

1317
00:45:09,520 --> 00:45:11,760
talked about in the research

1318
00:45:11,760 --> 00:45:13,520
this could be the case and one of the

1319
00:45:13,520 --> 00:45:15,119
things that stuck out to me is that

1320
00:45:15,119 --> 00:45:18,560
it's difficult to use the technology to

1321
00:45:18,560 --> 00:45:20,560
your advantage there's no way of like

1322
00:45:20,560 --> 00:45:23,040
you know automatically escaping stuff in

1323
00:45:23,040 --> 00:45:24,560
that tech stack or at least that that

1324
00:45:24,560 --> 00:45:25,599
we're aware of

1325
00:45:25,599 --> 00:45:27,599
however there was a there was a really

1326
00:45:27,599 --> 00:45:29,520
cool plug-in that we had found

1327
00:45:29,520 --> 00:45:32,720
that will automatically escape the jsp

1328
00:45:32,720 --> 00:45:34,000
templates for you

1329
00:45:34,000 --> 00:45:36,400
as long as you set up your java code

1330
00:45:36,400 --> 00:45:38,480
base in order to use that plugin

1331
00:45:38,480 --> 00:45:40,640
and so my recommendation would be to

1332
00:45:40,640 --> 00:45:41,520
look for

1333
00:45:41,520 --> 00:45:44,000
something like that if you have the

1334
00:45:44,000 --> 00:45:45,520
ability to use a plugin

1335
00:45:45,520 --> 00:45:49,200
or a library of some kind

1336
00:45:49,200 --> 00:45:52,079
that automatically makes your stuffs

1337
00:45:52,079 --> 00:45:52,720
stuff

1338
00:45:52,720 --> 00:45:55,440
safer makes it harder to do the insecure

1339
00:45:55,440 --> 00:45:56,079
thing

1340
00:45:56,079 --> 00:45:59,040
i would definitely recommend that and so

1341
00:45:59,040 --> 00:46:00,720
if that's not possible for some reason

1342
00:46:00,720 --> 00:46:02,319
if you don't have a library

1343
00:46:02,319 --> 00:46:04,319
um scanning is like the second best

1344
00:46:04,319 --> 00:46:06,160
thing and so if you can scan

1345
00:46:06,160 --> 00:46:10,000
for common gotchas um do that

1346
00:46:10,000 --> 00:46:12,240
and uh you know then you won't have to

1347
00:46:12,240 --> 00:46:13,760
worry about whatever gotchas you're

1348
00:46:13,760 --> 00:46:29,839
scanning for anymore

1349
00:47:05,119 --> 00:47:08,880
nice uh all right i'm gonna switch gears

1350
00:47:08,880 --> 00:47:10,240
a little bit here uh

1351
00:47:10,240 --> 00:47:12,800
what excites you the most about this

1352
00:47:12,800 --> 00:47:15,599
type of research

1353
00:47:16,079 --> 00:47:19,520
yeah at the end uh we talked briefly

1354
00:47:19,520 --> 00:47:20,319
about

1355
00:47:20,319 --> 00:47:24,079
um false positives and i in particular

1356
00:47:24,079 --> 00:47:26,559
uh am typically excited about reducing

1357
00:47:26,559 --> 00:47:27,440
false positives

1358
00:47:27,440 --> 00:47:30,800
and so um you know we at r2c are the

1359
00:47:30,800 --> 00:47:32,000
maintainers of sungrip which is the

1360
00:47:32,000 --> 00:47:33,680
scanning tool that we used

1361
00:47:33,680 --> 00:47:36,960
and so from this we

1362
00:47:36,960 --> 00:47:38,720
now have the ability to like build in

1363
00:47:38,720 --> 00:47:40,720
some features to our own tool

1364
00:47:40,720 --> 00:47:42,960
to help us with false positive reduction

1365
00:47:42,960 --> 00:47:44,480
and so in particular

1366
00:47:44,480 --> 00:47:48,240
um one of the uh examples that we talked

1367
00:47:48,240 --> 00:47:49,440
about that we couldn't find

1368
00:47:49,440 --> 00:47:52,400
typically was html being constructed in

1369
00:47:52,400 --> 00:47:54,400
a javascript template string

1370
00:47:54,400 --> 00:47:56,960
and so our program analysis team

1371
00:47:56,960 --> 00:47:58,160
recently added

1372
00:47:58,160 --> 00:47:59,599
or is adding i don't think it's added

1373
00:47:59,599 --> 00:48:02,559
yet is adding html as a language to our

1374
00:48:02,559 --> 00:48:04,480
scanner

1375
00:48:04,480 --> 00:48:06,319
and we also have this neat ability where

1376
00:48:06,319 --> 00:48:07,680
we can like um

1377
00:48:07,680 --> 00:48:10,160
extract pieces of code and feed it into

1378
00:48:10,160 --> 00:48:11,359
a different parser

1379
00:48:11,359 --> 00:48:12,800
so we in this case we would be able to

1380
00:48:12,800 --> 00:48:14,400
like extract the template string

1381
00:48:14,400 --> 00:48:16,319
feed it into the html parser and if it

1382
00:48:16,319 --> 00:48:18,400
like parses then we can scan for the

1383
00:48:18,400 --> 00:48:20,640
template variables and if we find that

1384
00:48:20,640 --> 00:48:23,440
uh then we can reliably report that as a

1385
00:48:23,440 --> 00:48:25,440
true positive much more

1386
00:48:25,440 --> 00:48:27,599
much more so than not being able to find

1387
00:48:27,599 --> 00:48:28,559
it at all which is our current

1388
00:48:28,559 --> 00:48:29,440
capability

1389
00:48:29,440 --> 00:48:30,880
but like this is in the works and i'm

1390
00:48:30,880 --> 00:48:32,240
really excited about being able to like

1391
00:48:32,240 --> 00:48:33,599
deploy this cool tech

1392
00:48:33,599 --> 00:48:38,559
in order to find this stuff nice

1393
00:48:46,839 --> 00:48:49,839
calling

1394
00:49:14,240 --> 00:49:17,680
nice okay uh so you know last question

1395
00:49:17,680 --> 00:49:18,319
here

1396
00:49:18,319 --> 00:49:20,319
where can people find the tooling and

1397
00:49:20,319 --> 00:49:21,680
your research that you were talking

1398
00:49:21,680 --> 00:49:23,040
about

1399
00:49:23,040 --> 00:49:26,640
yeah for sure um so we have uh

1400
00:49:26,640 --> 00:49:30,319
the uh we have the data set on

1401
00:49:30,319 --> 00:49:32,400
github or a link to the data set data

1402
00:49:32,400 --> 00:49:33,920
set on github as

1403
00:49:33,920 --> 00:49:35,599
in addition to all the code that we used

1404
00:49:35,599 --> 00:49:37,280
to um

1405
00:49:37,280 --> 00:49:39,280
process this stuff um so i'm going to

1406
00:49:39,280 --> 00:49:41,200
post that in discord now

1407
00:49:41,200 --> 00:49:42,640
um there's a couple of things that we're

1408
00:49:42,640 --> 00:49:44,800
still working on in order to like

1409
00:49:44,800 --> 00:49:46,720
make this a little bit more accessible

1410
00:49:46,720 --> 00:49:47,839
we wrote an article

1411
00:49:47,839 --> 00:49:50,559
about this research uh a couple months

1412
00:49:50,559 --> 00:49:51,680
ago

1413
00:49:51,680 --> 00:49:54,079
but it's it honestly just didn't turn

1414
00:49:54,079 --> 00:49:55,200
out very well like it didn't mean our

1415
00:49:55,200 --> 00:49:56,319
quality part

1416
00:49:56,319 --> 00:49:59,040
um and so we actually found that doing

1417
00:49:59,040 --> 00:50:00,319
the slides and the presentation was a

1418
00:50:00,319 --> 00:50:01,760
lot easier than doing the article

1419
00:50:01,760 --> 00:50:02,960
so there will be an article that will be

1420
00:50:02,960 --> 00:50:04,960
coming out soon it will be linked to the

1421
00:50:04,960 --> 00:50:05,520
readme

1422
00:50:05,520 --> 00:50:09,200
in the repository that i just linked

1423
00:50:09,200 --> 00:50:12,640
um but for now um most of the

1424
00:50:12,640 --> 00:50:14,240
relevant information is in that github

1425
00:50:14,240 --> 00:50:17,040
repository

1426
00:50:17,440 --> 00:50:20,800
great well thank you so much thank you

1427
00:50:20,800 --> 00:50:21,200
for

1428
00:50:21,200 --> 00:50:24,400
being a part of the b-sides las vegas

1429
00:50:24,400 --> 00:50:27,440
campfire and uh

1430
00:50:27,440 --> 00:50:28,640
you know if people have questions they

1431
00:50:28,640 --> 00:50:31,359
can still reach out to you on discord

1432
00:50:31,359 --> 00:50:38,240
and uh thank you so much cool thank you

