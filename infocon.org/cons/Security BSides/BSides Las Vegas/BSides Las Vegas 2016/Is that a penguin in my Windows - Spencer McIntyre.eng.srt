1
00:00:00,000 --> 00:00:03,689
our<font color="#E5E5E5"> speaker today is Spencer McIntyre he</font>

2
00:00:02,070 --> 00:00:06,660
works for secure state he's a

3
00:00:03,689 --> 00:00:09,599
vulnerability researcher and I will let

4
00:00:06,660 --> 00:00:11,550
him take it<font color="#E5E5E5"> away from here all right</font>

5
00:00:09,599 --> 00:00:20,460
thanks everyone can you all hear me in

6
00:00:11,550 --> 00:00:32,790
the back no<font color="#E5E5E5"> you cannot how about now sup</font>

7
00:00:20,460 --> 00:00:35,880
better ok Bob bad yeah I don't<font color="#E5E5E5"> want</font>

8
00:00:32,790 --> 00:00:37,019
<font color="#CCCCCC">listen</font><font color="#E5E5E5"> to that all</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so my name</font><font color="#CCCCCC"> is</font>

9
00:00:35,880 --> 00:00:41,489
Spencer McIntyre and we're going<font color="#E5E5E5"> to talk</font>

10
00:00:37,020 --> 00:00:44,280
about<font color="#E5E5E5"> the window subsystem for linux all</font>

11
00:00:41,489 --> 00:00:45,780
right so real quick<font color="#E5E5E5"> here's the agenda of</font>

12
00:00:44,280 --> 00:00:48,059
what we can go over and talk real

13
00:00:45,780 --> 00:00:50,100
briefly about Who I am but<font color="#E5E5E5"> then when we</font>

14
00:00:48,059 --> 00:00:52,110
go right over into the windows subsystem

15
00:00:50,100 --> 00:00:54,270
for linux overview so if you haven't

16
00:00:52,110 --> 00:00:55,860
been<font color="#E5E5E5"> keeping up on it we're going to do</font>

17
00:00:54,270 --> 00:00:58,280
a real quick overview basically what

18
00:00:55,860 --> 00:01:01,199
Microsoft has said<font color="#CCCCCC"> but then after</font><font color="#E5E5E5"> that</font>

19
00:00:58,280 --> 00:01:03,239
we're going to go over my wanting to

20
00:01:01,199 --> 00:01:05,188
take two approaches to this talk I want

21
00:01:03,239 --> 00:01:07,380
<font color="#E5E5E5">to talk about the real gritty details</font>

22
00:01:05,188 --> 00:01:10,139
the technical details of how the sub

23
00:01:07,380 --> 00:01:12,060
system actually works what it is what it

24
00:01:10,140 --> 00:01:13,350
might mean if you're looking for bugs if

25
00:01:12,060 --> 00:01:14,790
you're a vulnerability researcher the

26
00:01:13,350 --> 00:01:17,250
<font color="#E5E5E5">kind of things do you be looking for</font><font color="#CCCCCC"> on</font>

27
00:01:14,790 --> 00:01:19,950
<font color="#CCCCCC">that on the flip side I kind of wanted</font>

28
00:01:17,250 --> 00:01:22,229
to take a another sort<font color="#E5E5E5"> of higher level</font>

29
00:01:19,950 --> 00:01:23,549
approach and kind<font color="#E5E5E5"> of apply these to what</font>

30
00:01:22,229 --> 00:01:25,619
<font color="#E5E5E5">this might mean as your job</font><font color="#CCCCCC"> for a</font>

31
00:01:23,549 --> 00:01:27,869
penetration tester so just so I can kind

32
00:01:25,619 --> 00:01:29,310
of get a feel for the<font color="#E5E5E5"> audience how many</font>

33
00:01:27,869 --> 00:01:32,040
of you here are actually<font color="#CCCCCC"> in the business</font>

34
00:01:29,310 --> 00:01:34,560
of penetration testing<font color="#CCCCCC"> okay so a good</font>

35
00:01:32,040 --> 00:01:36,299
number of you<font color="#E5E5E5"> okay on anybody like bug</font>

36
00:01:34,560 --> 00:01:39,450
hunting vulnerability researchers like

37
00:01:36,299 --> 00:01:40,439
real technical okay so yeah so there's a

38
00:01:39,450 --> 00:01:42,960
<font color="#E5E5E5">couple of you so hopefully there will be</font>

39
00:01:40,439 --> 00:01:44,699
enough for anybody but you ever talk

40
00:01:42,960 --> 00:01:45,990
about the implementation details and how

41
00:01:44,700 --> 00:01:47,130
this might affect you and then in the

42
00:01:45,990 --> 00:01:48,570
second half we<font color="#CCCCCC"> talked about what this</font>

43
00:01:47,130 --> 00:01:50,460
actually means types of things you might

44
00:01:48,570 --> 00:01:51,809
<font color="#CCCCCC">want to look for things like that</font><font color="#E5E5E5"> so</font>

45
00:01:50,460 --> 00:01:54,780
<font color="#E5E5E5">that's going to be in those those</font>

46
00:01:51,810 --> 00:01:57,719
attacker notes so real quick about me

47
00:01:54,780 --> 00:01:59,159
like she said I to McIntyre I work for

48
00:01:57,719 --> 00:02:01,320
secure say I've been there for a little

49
00:01:59,159 --> 00:02:03,570
bit over<font color="#E5E5E5"> five years now I was on</font>

50
00:02:01,320 --> 00:02:05,039
penetration testing team I am now head

51
00:02:03,570 --> 00:02:06,360
of the research and development team so

52
00:02:05,040 --> 00:02:08,670
we do vulnerability research on

53
00:02:06,360 --> 00:02:12,270
primarily a lot of tool development as

54
00:02:08,669 --> 00:02:13,420
well I do a lot<font color="#CCCCCC"> of Windows kernel stuff</font>

55
00:02:12,270 --> 00:02:16,720
I like windows in

56
00:02:13,420 --> 00:02:18,880
<font color="#CCCCCC">Colonels so I I induce a lot of bsods</font>

57
00:02:16,720 --> 00:02:20,530
there's a<font color="#E5E5E5"> lot of that I'm an avid open</font>

58
00:02:18,880 --> 00:02:22,329
<font color="#E5E5E5">source contributor I really believe in</font>

59
00:02:20,530 --> 00:02:23,920
open source and one of<font color="#CCCCCC"> the things</font><font color="#E5E5E5"> I am</font>

60
00:02:22,330 --> 00:02:25,569
most proud of is I'm actually one of<font color="#E5E5E5"> the</font>

61
00:02:23,920 --> 00:02:27,519
members of the<font color="#CCCCCC"> metasploit came so really</font>

62
00:02:25,569 --> 00:02:30,069
proud of that but I'm also<font color="#E5E5E5"> a Python</font>

63
00:02:27,520 --> 00:02:32,770
enthusiast and so that's enough<font color="#E5E5E5"> about me</font>

64
00:02:30,069 --> 00:02:34,480
alright so the overview of<font color="#E5E5E5"> what is this</font>

65
00:02:32,770 --> 00:02:37,450
<font color="#CCCCCC">windows subsystem for Linux or what</font>

66
00:02:34,480 --> 00:02:39,579
we're going to be referring to as wsl so

67
00:02:37,450 --> 00:02:41,290
the objective of this project of what

68
00:02:39,580 --> 00:02:44,140
<font color="#E5E5E5">Microsoft wanted to introduce was the</font>

69
00:02:41,290 --> 00:02:46,269
ability<font color="#CCCCCC"> to be able to run 64-bit elf</font>

70
00:02:44,140 --> 00:02:48,429
executables that are built and intended

71
00:02:46,269 --> 00:02:51,610
for linux on<font color="#CCCCCC"> Windows as a native</font>

72
00:02:48,430 --> 00:02:52,660
solution this is not virtualization<font color="#CCCCCC"> a</font>

73
00:02:51,610 --> 00:02:54,310
lot of<font color="#E5E5E5"> people might be getting this</font>

74
00:02:52,660 --> 00:02:55,840
confused with virtualization and one of

75
00:02:54,310 --> 00:02:58,180
the key points<font color="#CCCCCC"> about this is that</font><font color="#E5E5E5"> there</font>

76
00:02:55,840 --> 00:03:00,970
is<font color="#E5E5E5"> no virtualization level in between</font>

77
00:02:58,180 --> 00:03:02,950
what there is instead is there is

78
00:03:00,970 --> 00:03:05,049
actually a<font color="#CCCCCC"> couple of drivers which can</font>

79
00:03:02,950 --> 00:03:07,359
go<font color="#E5E5E5"> over and some details that allow</font>

80
00:03:05,049 --> 00:03:10,390
executables to be run on the native

81
00:03:07,360 --> 00:03:12,069
hardware of windows so<font color="#CCCCCC"> because it's not</font>

82
00:03:10,390 --> 00:03:14,319
virtualization and this is a key point

83
00:03:12,069 --> 00:03:16,869
these executables are going to be

84
00:03:14,319 --> 00:03:18,310
running<font color="#E5E5E5"> at native speeds of about as</font>

85
00:03:16,870 --> 00:03:20,530
fast as<font color="#CCCCCC"> you would expect them to</font><font color="#E5E5E5"> run on</font>

86
00:03:18,310 --> 00:03:22,180
a<font color="#CCCCCC"> full-blown Linux system because you're</font>

87
00:03:20,530 --> 00:03:24,040
not going through all those other all

88
00:03:22,180 --> 00:03:26,320
those<font color="#E5E5E5"> other levels of the virtualization</font>

89
00:03:24,040 --> 00:03:28,090
and that scheduler that ultimately gets

90
00:03:26,320 --> 00:03:30,480
down to the host there's none of that

91
00:03:28,090 --> 00:03:33,700
it's on the windows hardware so it's not

92
00:03:30,480 --> 00:03:37,108
sation it's a bit<font color="#E5E5E5"> more akin to like a</font>

93
00:03:33,700 --> 00:03:39,339
container type of a type<font color="#CCCCCC"> of architecture</font>

94
00:03:37,109 --> 00:03:41,470
so one of the big<font color="#CCCCCC"> things is</font><font color="#E5E5E5"> like all the</font>

95
00:03:39,340 --> 00:03:43,810
Linux processes that are<font color="#E5E5E5"> running in the</font>

96
00:03:41,470 --> 00:03:45,970
wsl environment are referred to as<font color="#E5E5E5"> pico</font>

97
00:03:43,810 --> 00:03:47,980
processes which is kind<font color="#E5E5E5"> of a newer term</font>

98
00:03:45,970 --> 00:03:48,970
it's kind of a newer concept for<font color="#CCCCCC"> windows</font>

99
00:03:47,980 --> 00:03:50,350
but it's<font color="#CCCCCC"> actually been around</font><font color="#E5E5E5"> for a</font>

100
00:03:48,970 --> 00:03:53,530
little bit<font color="#CCCCCC"> I'm going to talk about pico</font>

101
00:03:50,350 --> 00:03:55,120
processes pretty extensively now the

102
00:03:53,530 --> 00:03:57,540
functionality that's actually leverage

103
00:03:55,120 --> 00:04:00,910
by<font color="#E5E5E5"> windows is provided in two particular</font>

104
00:03:57,540 --> 00:04:02,679
drivers<font color="#E5E5E5"> there's the LX core driver which</font>

105
00:04:00,910 --> 00:04:04,930
implements the functionality that<font color="#E5E5E5"> you're</font>

106
00:04:02,680 --> 00:04:07,269
actually using it implements the drive

107
00:04:04,930 --> 00:04:10,000
file system so the ability to read and

108
00:04:07,269 --> 00:04:12,040
<font color="#E5E5E5">write files as well as interact with the</font>

109
00:04:10,000 --> 00:04:13,150
with<font color="#CCCCCC"> the colonel and I do air quotes</font>

110
00:04:12,040 --> 00:04:15,670
around that<font color="#E5E5E5"> because there's not actually</font>

111
00:04:13,150 --> 00:04:18,010
a kernel but it emulates the ability to

112
00:04:15,670 --> 00:04:19,450
get Colonel settings in some cases

113
00:04:18,010 --> 00:04:22,599
change those settings and things of that

114
00:04:19,450 --> 00:04:25,080
nature as<font color="#E5E5E5"> well as others the LX SS now</font>

115
00:04:22,599 --> 00:04:27,219
the LX SS driver is actually very very

116
00:04:25,080 --> 00:04:29,409
<font color="#E5E5E5">interesting sort of on this are</font>

117
00:04:27,220 --> 00:04:30,520
protector of these two drivers is most

118
00:04:29,410 --> 00:04:33,250
of the functionalities actually

119
00:04:30,520 --> 00:04:35,020
providing the LX core driver the LX SS

120
00:04:33,250 --> 00:04:37,120
driver is very very<font color="#E5E5E5"> small it's about</font>

121
00:04:35,020 --> 00:04:39,010
one-twentieth of the size of<font color="#E5E5E5"> the LX core</font>

122
00:04:37,120 --> 00:04:41,980
driver but it's actually<font color="#CCCCCC"> the primary</font>

123
00:04:39,010 --> 00:04:43,560
namespace and so it's going to be what

124
00:04:41,980 --> 00:04:45,700
is actually<font color="#E5E5E5"> managing and sort of</font>

125
00:04:43,560 --> 00:04:47,680
providing all this functionality to

126
00:04:45,700 --> 00:04:52,150
windows at a higher level but underneath

127
00:04:47,680 --> 00:04:54,220
it hood LX SS is utilizing LX core so

128
00:04:52,150 --> 00:04:55,960
this is diagram first and foremost<font color="#CCCCCC"> I did</font>

129
00:04:54,220 --> 00:04:57,760
not make<font color="#E5E5E5"> this diagram this is the only</font>

130
00:04:55,960 --> 00:04:59,859
sort of image I kind of stole from

131
00:04:57,760 --> 00:05:02,010
Microsoft but this is how<font color="#CCCCCC"> all the</font>

132
00:04:59,860 --> 00:05:04,390
processes are actually

133
00:05:02,010 --> 00:05:06,340
intercommunicating so when you're on

134
00:05:04,390 --> 00:05:08,080
your<font color="#E5E5E5"> Windows system and you utilize bash</font>

135
00:05:06,340 --> 00:05:10,599
<font color="#E5E5E5">dxd you're going to communicate with</font><font color="#CCCCCC"> the</font>

136
00:05:08,080 --> 00:05:13,060
LX this session manager and this can be

137
00:05:10,600 --> 00:05:15,910
over the comm communications that's then

138
00:05:13,060 --> 00:05:18,400
in turn<font color="#E5E5E5"> going to issue an</font><font color="#CCCCCC"> IO CTL routine</font>

139
00:05:15,910 --> 00:05:20,320
and that is going<font color="#E5E5E5"> to call</font><font color="#CCCCCC"> that LX sis</font>

140
00:05:18,400 --> 00:05:21,969
driver those drivers that I'd refer<font color="#CCCCCC"> to</font>

141
00:05:20,320 --> 00:05:24,849
before which are then in turn going<font color="#E5E5E5"> to</font>

142
00:05:21,970 --> 00:05:27,340
<font color="#CCCCCC">initialize the subsystem and start to</font>

143
00:05:24,850 --> 00:05:30,220
provide the functionality<font color="#E5E5E5"> that you would</font>

144
00:05:27,340 --> 00:05:34,000
expect<font color="#E5E5E5"> now the subsystem is initialized</font>

145
00:05:30,220 --> 00:05:37,210
exactly once per user so if you run open

146
00:05:34,000 --> 00:05:38,950
up cmd.exe and you run ash in two or

147
00:05:37,210 --> 00:05:40,450
three windows at<font color="#E5E5E5"> the same time it's only</font>

148
00:05:38,950 --> 00:05:42,520
<font color="#E5E5E5">going to initialize</font><font color="#CCCCCC"> it for</font><font color="#E5E5E5"> that first</font>

149
00:05:40,450 --> 00:05:44,890
one and the remaining windows are all

150
00:05:42,520 --> 00:05:46,960
going to share what is going to<font color="#E5E5E5"> be the</font>

151
00:05:44,890 --> 00:05:49,630
kind<font color="#E5E5E5"> of the pseudo</font><font color="#CCCCCC"> Linux container so</font>

152
00:05:46,960 --> 00:05:50,919
those are all going<font color="#E5E5E5"> to be together so</font>

153
00:05:49,630 --> 00:05:52,450
the<font color="#E5E5E5"> first time that actually runs is</font>

154
00:05:50,919 --> 00:05:53,590
going to<font color="#CCCCCC"> initialize all the information</font>

155
00:05:52,450 --> 00:05:55,780
<font color="#E5E5E5">that's necessary it's going to start</font>

156
00:05:53,590 --> 00:05:59,049
that<font color="#E5E5E5"> init process and ultimately the</font>

157
00:05:55,780 --> 00:06:00,250
native 64-bit bash elf executable is

158
00:05:59,050 --> 00:06:03,910
going to run this is going to allow<font color="#CCCCCC"> you</font>

159
00:06:00,250 --> 00:06:06,160
to<font color="#E5E5E5"> run things like apt-get a Python said</font>

160
00:06:03,910 --> 00:06:09,669
ah crap<font color="#CCCCCC"> all your favorite of Linux</font>

161
00:06:06,160 --> 00:06:11,860
command line utilities<font color="#E5E5E5"> okay so</font>

162
00:06:09,669 --> 00:06:14,169
implementation details like<font color="#E5E5E5"> I</font><font color="#CCCCCC"> mentioned</font>

163
00:06:11,860 --> 00:06:16,210
the LX SS driver does<font color="#CCCCCC"> not actually have</font>

164
00:06:14,169 --> 00:06:19,570
a whole lot<font color="#CCCCCC"> of functionality within it</font>

165
00:06:16,210 --> 00:06:23,020
is a very small driver when the LX SS

166
00:06:19,570 --> 00:06:26,140
driver is actually loaded on its entry

167
00:06:23,020 --> 00:06:28,359
point simply<font color="#E5E5E5"> calls the LX initialized</font>

168
00:06:26,140 --> 00:06:30,880
routine<font color="#E5E5E5"> that's provided by the LX core</font>

169
00:06:28,360 --> 00:06:33,760
driver so we have this sort<font color="#E5E5E5"> of laid out</font>

170
00:06:30,880 --> 00:06:35,469
<font color="#E5E5E5">right here on moving down a sort of time</font>

171
00:06:33,760 --> 00:06:38,110
of how these drivers are actually loaded

172
00:06:35,470 --> 00:06:41,120
so the service as<font color="#CCCCCC"> the system</font><font color="#E5E5E5"> boots up</font>

173
00:06:38,110 --> 00:06:43,010
<font color="#E5E5E5">it's going to load the LX SS driver</font>

174
00:06:41,120 --> 00:06:45,410
is going to<font color="#E5E5E5"> call an exported function</font>

175
00:06:43,010 --> 00:06:48,979
within LX core and it's going<font color="#E5E5E5"> to pass it</font>

176
00:06:45,410 --> 00:06:50,479
<font color="#E5E5E5">its driver object now when LX courgettes</font>

177
00:06:48,979 --> 00:06:51,979
that driver object it's actually going

178
00:06:50,479 --> 00:06:54,380
to initialize<font color="#CCCCCC"> all the internal</font>

179
00:06:51,979 --> 00:06:55,909
structures that<font color="#CCCCCC"> Windows expects a normal</font>

180
00:06:54,380 --> 00:06:57,020
driver to register so it's going to

181
00:06:55,910 --> 00:07:00,410
register all<font color="#E5E5E5"> those functions in</font><font color="#CCCCCC"> the</font>

182
00:06:57,020 --> 00:07:02,120
major functions array the driver entry

183
00:07:00,410 --> 00:07:03,590
point how to unload the driver and<font color="#E5E5E5"> all</font>

184
00:07:02,120 --> 00:07:05,690
of those things those are actually all

185
00:07:03,590 --> 00:07:07,489
done in LX core but<font color="#E5E5E5"> it's kind of sort of</font>

186
00:07:05,690 --> 00:07:09,229
interesting about this is<font color="#E5E5E5"> that LX core</font>

187
00:07:07,490 --> 00:07:13,430
is registering all these under the<font color="#E5E5E5"> name</font>

188
00:07:09,229 --> 00:07:15,590
of LX SS so the LX core driver when<font color="#E5E5E5"> that</font>

189
00:07:13,430 --> 00:07:17,479
one is actually initialized<font color="#CCCCCC"> its driver</font>

190
00:07:15,590 --> 00:07:20,510
entry point doesn't doesn't do anything

191
00:07:17,479 --> 00:07:22,280
at all there is no LX core driver from

192
00:07:20,510 --> 00:07:24,680
an object perspective in the<font color="#CCCCCC"> Windows</font>

193
00:07:22,280 --> 00:07:26,750
kernel because while it exists there and

194
00:07:24,680 --> 00:07:28,970
<font color="#E5E5E5">assist file and the PE executable is</font>

195
00:07:26,750 --> 00:07:33,050
loaded there is no driver object as

196
00:07:28,970 --> 00:07:35,449
initialized specifically for it<font color="#CCCCCC"> alright</font>

197
00:07:33,050 --> 00:07:37,190
so<font color="#CCCCCC"> pico processes what are these what</font>

198
00:07:35,449 --> 00:07:39,710
<font color="#CCCCCC">are these tico processes so these pico</font>

199
00:07:37,190 --> 00:07:41,900
processes are a lot different than the

200
00:07:39,710 --> 00:07:43,520
native windows processes that were used

201
00:07:41,900 --> 00:07:44,929
<font color="#E5E5E5">to using on a daily basis you know</font>

202
00:07:43,520 --> 00:07:47,510
whenever<font color="#E5E5E5"> you run like Internet Explorer</font>

203
00:07:44,930 --> 00:07:50,060
kalkaji exe anything like that<font color="#E5E5E5"> these are</font>

204
00:07:47,510 --> 00:07:53,479
<font color="#CCCCCC">full-blown windows processes that are</font>

205
00:07:50,060 --> 00:07:56,750
using the win32 like API and subsystem

206
00:07:53,479 --> 00:08:00,020
and all of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> pico processes are more</font>

207
00:07:56,750 --> 00:08:02,660
similar to<font color="#E5E5E5"> to hollow container it is a</font>

208
00:08:00,020 --> 00:08:04,520
process level<font color="#E5E5E5"> structure in in the</font>

209
00:08:02,660 --> 00:08:06,950
colonel but as far as<font color="#E5E5E5"> windows is</font>

210
00:08:04,520 --> 00:08:09,260
concerned that's running but not a<font color="#E5E5E5"> whole</font>

211
00:08:06,950 --> 00:08:11,570
lot<font color="#CCCCCC"> as well as those processes have a</font>

212
00:08:09,260 --> 00:08:13,699
limited access<font color="#E5E5E5"> to the outside</font>

213
00:08:11,570 --> 00:08:14,630
environment outside of it which we're

214
00:08:13,699 --> 00:08:17,840
going to talk about a little<font color="#E5E5E5"> bit in the</font>

215
00:08:14,630 --> 00:08:22,190
attacker section so pico processes are

216
00:08:17,840 --> 00:08:24,859
not specific to the wsl system at all

217
00:08:22,190 --> 00:08:27,500
<font color="#CCCCCC">Pico processive actually</font><font color="#E5E5E5"> they came out</font>

218
00:08:24,860 --> 00:08:29,000
of<font color="#CCCCCC"> Microsoft's drawbridge research and</font>

219
00:08:27,500 --> 00:08:32,958
they've actually been around<font color="#E5E5E5"> since</font>

220
00:08:29,000 --> 00:08:35,059
Windows 8.1 and server 2012 that's when

221
00:08:32,958 --> 00:08:37,640
the<font color="#E5E5E5"> function value was actually included</font>

222
00:08:35,059 --> 00:08:40,458
inside of<font color="#E5E5E5"> Windows now to my knowledge</font>

223
00:08:37,640 --> 00:08:42,140
there's actually no other major uses of

224
00:08:40,458 --> 00:08:44,029
<font color="#CCCCCC">Pico processes so while these have been</font>

225
00:08:42,140 --> 00:08:46,730
actually around for quite a while the

226
00:08:44,029 --> 00:08:49,250
functionality all existed in<font color="#E5E5E5"> Windows it</font>

227
00:08:46,730 --> 00:08:51,350
hasn't<font color="#E5E5E5"> been until recently that this</font>

228
00:08:49,250 --> 00:08:53,390
functionality is actually exposed in a

229
00:08:51,350 --> 00:08:54,769
way that's actually usable from beyond

230
00:08:53,390 --> 00:08:56,209
sort of like a research

231
00:08:54,769 --> 00:08:59,809
computer science perspective but now

232
00:08:56,209 --> 00:09:01,248
it's actually<font color="#E5E5E5"> usable by using the wsl</font>

233
00:08:59,809 --> 00:09:02,749
system for for an end users they're

234
00:09:01,249 --> 00:09:06,230
going to leverage this pico process

235
00:09:02,749 --> 00:09:08,269
functionality um originally<font color="#E5E5E5"> the pico</font>

236
00:09:06,230 --> 00:09:11,689
processes were introduced by<font color="#CCCCCC"> Microsoft</font>

237
00:09:08,269 --> 00:09:14,629
as as a new form of sandboxing so these

238
00:09:11,689 --> 00:09:16,730
hollow processes don't actually contain

239
00:09:14,629 --> 00:09:19,670
the structures<font color="#CCCCCC"> that a standard</font><font color="#E5E5E5"> windows</font>

240
00:09:16,730 --> 00:09:21,769
process has so when<font color="#E5E5E5"> you run and start a</font>

241
00:09:19,670 --> 00:09:23,809
new typical process on Windows you start

242
00:09:21,769 --> 00:09:25,100
calc idx a year notepad.exe or anything

243
00:09:23,809 --> 00:09:27,649
like that you're<font color="#E5E5E5"> going to get a copy of</font>

244
00:09:25,100 --> 00:09:29,660
NT dll you're going to<font color="#E5E5E5"> get a shared</font>

245
00:09:27,649 --> 00:09:32,679
memory region<font color="#E5E5E5"> up by the pointer of</font>

246
00:09:29,660 --> 00:09:35,600
user32 in memory that facilitates

247
00:09:32,679 --> 00:09:37,059
reading objects<font color="#E5E5E5"> out of memory and shared</font>

248
00:09:35,600 --> 00:09:38,839
with the colonel and stare for

249
00:09:37,059 --> 00:09:40,549
performance reason so you don't<font color="#E5E5E5"> have to</font>

250
00:09:38,839 --> 00:09:44,809
switch the context all the time none of

251
00:09:40,549 --> 00:09:47,899
this<font color="#E5E5E5"> actually exists in a pico process</font>

252
00:09:44,809 --> 00:09:50,238
it<font color="#E5E5E5"> is a hollow process structure and so</font>

253
00:09:47,899 --> 00:09:52,220
the access<font color="#CCCCCC"> that it has outside</font><font color="#E5E5E5"> of that</font>

254
00:09:50,239 --> 00:09:55,399
is very limited because it does not<font color="#E5E5E5"> have</font>

255
00:09:52,220 --> 00:09:57,110
any of these<font color="#CCCCCC"> ap is one of the more one</font>

256
00:09:55,399 --> 00:09:59,869
<font color="#E5E5E5">of the other changes</font><font color="#CCCCCC"> that it has is it</font>

257
00:09:57,110 --> 00:10:01,999
actually<font color="#E5E5E5"> has a separate syscall</font>

258
00:09:59,869 --> 00:10:04,399
interface so that when it<font color="#E5E5E5"> makes a system</font>

259
00:10:01,999 --> 00:10:07,100
calling it transitions its context into

260
00:10:04,399 --> 00:10:09,499
the kernel it's not executing the same

261
00:10:07,100 --> 00:10:12,559
code that a standard<font color="#CCCCCC"> windows assist call</font>

262
00:10:09,499 --> 00:10:15,170
would utilize<font color="#CCCCCC"> but the key point about</font>

263
00:10:12,559 --> 00:10:17,118
about the<font color="#E5E5E5"> pico processes is</font><font color="#CCCCCC"> the windows</font>

264
00:10:15,170 --> 00:10:18,559
kernel is still going<font color="#E5E5E5"> to provide the</font>

265
00:10:17,119 --> 00:10:21,160
functionality that's leveraged by

266
00:10:18,559 --> 00:10:23,990
threading as well as memory management

267
00:10:21,160 --> 00:10:25,219
some of the real basic low-level stuff

268
00:10:23,990 --> 00:10:28,730
is still going to be handled by the

269
00:10:25,220 --> 00:10:30,709
windows kernel<font color="#E5E5E5"> all right so like I</font>

270
00:10:28,730 --> 00:10:32,749
mentioned<font color="#E5E5E5"> pico processes get a separate</font>

271
00:10:30,709 --> 00:10:34,508
system called disp now this<font color="#E5E5E5"> is very</font>

272
00:10:32,749 --> 00:10:36,769
important because this is how those

273
00:10:34,509 --> 00:10:38,509
64-bit linux binaries are going to

274
00:10:36,769 --> 00:10:40,879
expect<font color="#E5E5E5"> to communicate with the</font>

275
00:10:38,509 --> 00:10:42,919
underlying system the system call

276
00:10:40,879 --> 00:10:45,860
interface and the file system interfaces

277
00:10:42,919 --> 00:10:48,649
are kind of<font color="#E5E5E5"> the two largest interfaces</font>

278
00:10:45,860 --> 00:10:50,569
that that the<font color="#CCCCCC"> Linux binaries are going</font>

279
00:10:48,649 --> 00:10:52,819
to expect<font color="#E5E5E5"> to be present in order to be</font>

280
00:10:50,569 --> 00:10:55,669
able to execute on a system thinking

281
00:10:52,819 --> 00:10:58,429
that they're actually<font color="#CCCCCC"> on Linux so when</font>

282
00:10:55,669 --> 00:11:00,919
the<font color="#CCCCCC"> pico when the LX core driver is</font>

283
00:10:58,429 --> 00:11:03,769
loaded and it initializes that<font color="#E5E5E5"> L</font><font color="#CCCCCC"> xs/s</font>

284
00:11:00,919 --> 00:11:06,499
driver object it registers itself as a

285
00:11:03,769 --> 00:11:08,570
<font color="#CCCCCC">pico process provider and as part of</font>

286
00:11:06,499 --> 00:11:10,550
this it is stating to the windows

287
00:11:08,570 --> 00:11:13,430
Colonel that<font color="#E5E5E5"> pico processes that are</font>

288
00:11:10,550 --> 00:11:15,680
associated with<font color="#E5E5E5"> it have its own system</font>

289
00:11:13,430 --> 00:11:18,229
call interface and that is how system

290
00:11:15,680 --> 00:11:19,819
calls that would<font color="#E5E5E5"> normally expect to go</font>

291
00:11:18,230 --> 00:11:21,740
through linux are actually being routed

292
00:11:19,820 --> 00:11:24,560
through the LX core driver which

293
00:11:21,740 --> 00:11:27,260
actually ultimately provides the

294
00:11:24,560 --> 00:11:28,849
functionality um so now this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> very</font>

295
00:11:27,260 --> 00:11:30,920
<font color="#E5E5E5">important so now all the system calls</font>

296
00:11:28,850 --> 00:11:32,600
are actually implemented in LX core

297
00:11:30,920 --> 00:11:34,280
excuse me I shouldn't<font color="#E5E5E5"> say all of</font><font color="#CCCCCC"> the</font>

298
00:11:32,600 --> 00:11:36,770
system calls but all of the system calls

299
00:11:34,280 --> 00:11:38,810
that are implemented are implemented in

300
00:11:36,770 --> 00:11:39,920
LX core so one of the first<font color="#CCCCCC"> things</font><font color="#E5E5E5"> I</font>

301
00:11:38,810 --> 00:11:41,510
wanted<font color="#E5E5E5"> to actually look at when I</font>

302
00:11:39,920 --> 00:11:43,870
started this research as I wanted<font color="#E5E5E5"> to</font>

303
00:11:41,510 --> 00:11:45,710
look at what system calls are actually

304
00:11:43,870 --> 00:11:47,930
implemented so now this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

305
00:11:45,710 --> 00:11:49,850
directly affect what binaries are going

306
00:11:47,930 --> 00:11:52,459
to be able to successfully run on<font color="#E5E5E5"> linux</font>

307
00:11:49,850 --> 00:11:55,310
<font color="#CCCCCC">versus which ones are not quite going to</font>

308
00:11:52,460 --> 00:11:57,830
be supported yet so the wsl system

309
00:11:55,310 --> 00:12:00,650
reports that it is a linux kernel three

310
00:11:57,830 --> 00:12:02,330
point 4.0 so when<font color="#E5E5E5"> i pull down the source</font>

311
00:12:00,650 --> 00:12:04,100
<font color="#E5E5E5">code to that and</font><font color="#CCCCCC"> i looked at</font><font color="#E5E5E5"> all the</font>

312
00:12:02,330 --> 00:12:05,690
exported system calls and<font color="#E5E5E5"> i compared</font>

313
00:12:04,100 --> 00:12:08,480
those to those ones<font color="#E5E5E5"> that are actually</font>

314
00:12:05,690 --> 00:12:10,690
provided in the driver about 62<font color="#E5E5E5"> points</font>

315
00:12:08,480 --> 00:12:13,190
six percent of system calls actually<font color="#E5E5E5"> are</font>

316
00:12:10,690 --> 00:12:15,380
implemented the remaining system calls

317
00:12:13,190 --> 00:12:17,180
are<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to error out and binaries</font>

318
00:12:15,380 --> 00:12:18,920
which leverage those system calls are

319
00:12:17,180 --> 00:12:19,910
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to they're not going to be able to</font>

320
00:12:18,920 --> 00:12:21,079
<font color="#E5E5E5">run they're gonna have segmentation</font>

321
00:12:19,910 --> 00:12:23,089
faults they're not going<font color="#E5E5E5"> to be able to</font>

322
00:12:21,080 --> 00:12:26,780
utilize the functionality<font color="#E5E5E5"> that they</font>

323
00:12:23,090 --> 00:12:28,730
would expect<font color="#E5E5E5"> to be available some of the</font>

324
00:12:26,780 --> 00:12:31,370
notable missing system calls are

325
00:12:28,730 --> 00:12:34,240
actually 32-bit equivalents now the

326
00:12:31,370 --> 00:12:37,100
standard<font color="#E5E5E5"> ones that the</font><font color="#CCCCCC"> Linux kernel</font>

327
00:12:34,240 --> 00:12:39,050
provides that don't have the suffix<font color="#E5E5E5"> of</font>

328
00:12:37,100 --> 00:12:41,870
32-bit are typically you designing a

329
00:12:39,050 --> 00:12:43,160
16-bit structure so the 32-bit

330
00:12:41,870 --> 00:12:45,110
equivalent which are some of<font color="#CCCCCC"> the newer</font>

331
00:12:43,160 --> 00:12:50,630
ones or some of<font color="#E5E5E5"> the system calls that</font>

332
00:12:45,110 --> 00:12:55,430
are missing<font color="#E5E5E5"> in the wsl iron mint</font><font color="#CCCCCC"> okay so</font>

333
00:12:50,630 --> 00:12:57,230
when a 64-bit linux binary runs it's

334
00:12:55,430 --> 00:12:58,849
going to start to<font color="#CCCCCC"> make a bunch of system</font>

335
00:12:57,230 --> 00:13:00,200
calls there's going to be memory map

336
00:12:58,850 --> 00:13:02,360
regions it's going to need<font color="#CCCCCC"> to open</font>

337
00:13:00,200 --> 00:13:04,130
processes all these kinds of<font color="#CCCCCC"> things and</font>

338
00:13:02,360 --> 00:13:05,420
<font color="#E5E5E5">it's going to expect that the colonel</font>

339
00:13:04,130 --> 00:13:07,040
that's running on in<font color="#E5E5E5"> this case the</font>

340
00:13:05,420 --> 00:13:10,069
windows kernel is going to be<font color="#CCCCCC"> able to</font>

341
00:13:07,040 --> 00:13:12,770
handle<font color="#CCCCCC"> those so when a call</font><font color="#E5E5E5"> is actually</font>

342
00:13:10,070 --> 00:13:14,990
made it goes<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the system called</font>

343
00:13:12,770 --> 00:13:16,850
dispatcher<font color="#E5E5E5"> that's provided by windows</font>

344
00:13:14,990 --> 00:13:18,530
which notices that the process is the

345
00:13:16,850 --> 00:13:20,030
<font color="#E5E5E5">pico process and it's registered to the</font>

346
00:13:18,530 --> 00:13:21,579
<font color="#E5E5E5">Alex poor driver so it ultimately gets</font>

347
00:13:20,030 --> 00:13:23,829
routed to that

348
00:13:21,580 --> 00:13:27,670
on from there the LX core driver is

349
00:13:23,830 --> 00:13:30,520
going<font color="#E5E5E5"> to either on its</font><font color="#CCCCCC"> going to modify</font>

350
00:13:27,670 --> 00:13:33,400
the arguments and forward it to an

351
00:13:30,520 --> 00:13:37,120
equivalent<font color="#E5E5E5"> windows system call if one is</font>

352
00:13:33,400 --> 00:13:38,470
available such as NT<font color="#E5E5E5"> create file</font><font color="#CCCCCC"> NT all</font>

353
00:13:37,120 --> 00:13:39,730
those all those system calls that

354
00:13:38,470 --> 00:13:41,590
<font color="#E5E5E5">Windows provides to be able to file</font>

355
00:13:39,730 --> 00:13:43,480
operations memory management things like

356
00:13:41,590 --> 00:13:44,710
that those of<font color="#CCCCCC"> course</font><font color="#E5E5E5"> all exist so the LX</font>

357
00:13:43,480 --> 00:13:47,350
core driver is<font color="#E5E5E5"> going to modify the</font>

358
00:13:44,710 --> 00:13:50,170
arguments so that they can<font color="#CCCCCC"> be forwarded</font>

359
00:13:47,350 --> 00:13:52,950
and provided and fulfilled by<font color="#CCCCCC"> the</font>

360
00:13:50,170 --> 00:13:55,150
windows kernel now in certain conditions

361
00:13:52,950 --> 00:13:58,720
the windows kernel does not actually

362
00:13:55,150 --> 00:14:00,850
have an equivalent system call and in

363
00:13:58,720 --> 00:14:03,700
those cases LX core is<font color="#CCCCCC"> going to fulfill</font>

364
00:14:00,850 --> 00:14:05,440
it itself so the<font color="#E5E5E5"> point of this is that</font>

365
00:14:03,700 --> 00:14:07,330
it's either going to translate<font color="#CCCCCC"> the</font>

366
00:14:05,440 --> 00:14:09,100
system call or it's going to<font color="#CCCCCC"> fulfill it</font>

367
00:14:07,330 --> 00:14:10,230
itself for all those six to two point

368
00:14:09,100 --> 00:14:13,690
six percent<font color="#E5E5E5"> that are actually</font>

369
00:14:10,230 --> 00:14:15,280
implemented now when the calls are

370
00:14:13,690 --> 00:14:17,200
actually made because these are<font color="#E5E5E5"> being</font>

371
00:14:15,280 --> 00:14:19,839
made by Linux binaries these are not

372
00:14:17,200 --> 00:14:22,740
using the standard<font color="#E5E5E5"> windows calling</font>

373
00:14:19,840 --> 00:14:25,600
convention um it's both<font color="#E5E5E5"> them through</font>

374
00:14:22,740 --> 00:14:27,700
both of<font color="#E5E5E5"> them utilize the</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> ax register</font>

375
00:14:25,600 --> 00:14:29,910
to implement the pass in the system call

376
00:14:27,700 --> 00:14:33,250
number but all the parameters are

377
00:14:29,910 --> 00:14:35,380
different in<font color="#CCCCCC"> windows vs</font><font color="#E5E5E5"> linux so it's</font>

378
00:14:33,250 --> 00:14:36,970
going to<font color="#E5E5E5"> utilize this alternative</font>

379
00:14:35,380 --> 00:14:38,860
calling convention and windows<font color="#E5E5E5"> just</font>

380
00:14:36,970 --> 00:14:43,780
simply forwards that on to the provider

381
00:14:38,860 --> 00:14:45,280
and<font color="#CCCCCC"> the provider handles that itself so</font>

382
00:14:43,780 --> 00:14:47,470
this might be<font color="#E5E5E5"> a little bit difficult to</font>

383
00:14:45,280 --> 00:14:49,540
<font color="#E5E5E5">see but this is actually</font><font color="#CCCCCC"> a the call</font>

384
00:14:47,470 --> 00:14:52,840
stack for when a<font color="#CCCCCC"> system call is made to</font>

385
00:14:49,540 --> 00:14:53,949
and map so depending on<font color="#CCCCCC"> if you are going</font>

386
00:14:52,840 --> 00:14:56,980
to be bug hunting or if you're<font color="#E5E5E5"> gonna be</font>

387
00:14:53,950 --> 00:15:00,490
reverse engineering this bottom entry

388
00:14:56,980 --> 00:15:02,080
down here is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be the initial the</font>

389
00:15:00,490 --> 00:15:04,120
initial dispatcher when the<font color="#CCCCCC"> in the</font>

390
00:15:02,080 --> 00:15:06,190
context to switch over<font color="#E5E5E5"> from user mode</font>

391
00:15:04,120 --> 00:15:08,170
into kernel mode that's going<font color="#E5E5E5"> to be the</font>

392
00:15:06,190 --> 00:15:10,000
first one<font color="#CCCCCC"> that gets it and it's going</font><font color="#E5E5E5"> to</font>

393
00:15:08,170 --> 00:15:11,920
realize that<font color="#CCCCCC"> it's a</font><font color="#E5E5E5"> pico process and</font>

394
00:15:10,000 --> 00:15:15,400
it's going to dispatch it to the<font color="#E5E5E5"> PSP co</font>

395
00:15:11,920 --> 00:15:18,189
system processor dispatcher and then

396
00:15:15,400 --> 00:15:20,439
<font color="#E5E5E5">from</font><font color="#CCCCCC"> there it goes into LX core which is</font>

397
00:15:18,190 --> 00:15:21,940
this<font color="#CCCCCC"> elack piece is called dispatch so</font>

398
00:15:20,440 --> 00:15:23,740
it's going<font color="#E5E5E5"> to pass it over to the</font><font color="#CCCCCC"> Alex</font>

399
00:15:21,940 --> 00:15:26,350
core driver to dispatch it however it

400
00:15:23,740 --> 00:15:29,890
sees fit and then LX core ultimately

401
00:15:26,350 --> 00:15:31,630
maps it into an<font color="#E5E5E5"> L XP underscore and map</font>

402
00:15:29,890 --> 00:15:34,780
which is going<font color="#E5E5E5"> to fulfill the M map</font>

403
00:15:31,630 --> 00:15:35,410
system call so why this is useful is

404
00:15:34,780 --> 00:15:37,269
that<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you're</font>

405
00:15:35,410 --> 00:15:38,889
reverse engineer the implementation of<font color="#E5E5E5"> a</font>

406
00:15:37,269 --> 00:15:40,360
specific system<font color="#CCCCCC"> khalix you want to</font><font color="#E5E5E5"> look</font>

407
00:15:38,889 --> 00:15:42,310
at it<font color="#E5E5E5"> for vulnerabilities or anything</font>

408
00:15:40,360 --> 00:15:45,100
along those lines it's very important to

409
00:15:42,310 --> 00:15:46,359
know where<font color="#E5E5E5"> exactly you can set your</font>

410
00:15:45,100 --> 00:15:47,920
break points so that you you can

411
00:15:46,360 --> 00:15:51,490
actually<font color="#E5E5E5"> start</font><font color="#CCCCCC"> to look so if you wanted</font>

412
00:15:47,920 --> 00:15:53,469
to catch all system calls that are from

413
00:15:51,490 --> 00:15:56,050
kiko processes you<font color="#CCCCCC"> can do</font><font color="#E5E5E5"> that third one</font>

414
00:15:53,470 --> 00:15:57,819
<font color="#E5E5E5">on that that middle one as well</font><font color="#CCCCCC"> as if</font>

415
00:15:56,050 --> 00:15:59,258
you only want to pico processes for LX

416
00:15:57,819 --> 00:16:01,089
core that's second from the top

417
00:15:59,259 --> 00:16:02,500
ultimately if you just want to<font color="#CCCCCC"> em map</font>

418
00:16:01,089 --> 00:16:04,410
can do that that top once you can

419
00:16:02,500 --> 00:16:06,819
actually<font color="#CCCCCC"> go in and</font><font color="#E5E5E5"> register that</font>

420
00:16:04,410 --> 00:16:09,040
something else to keep in mind<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font>

421
00:16:06,819 --> 00:16:11,979
if you actually did want to look at<font color="#CCCCCC"> em</font>

422
00:16:09,040 --> 00:16:13,300
map there are a ton of em map calls it's

423
00:16:11,980 --> 00:16:14,949
going to be very<font color="#E5E5E5"> difficult because every</font>

424
00:16:13,300 --> 00:16:17,829
process is constantly like allocating

425
00:16:14,949 --> 00:16:19,899
memory if you just do like dot slash and

426
00:16:17,829 --> 00:16:22,239
one basically any binary you can get

427
00:16:19,899 --> 00:16:23,829
hammered with all these calls so in

428
00:16:22,240 --> 00:16:25,569
order to filter them you need to

429
00:16:23,829 --> 00:16:27,489
<font color="#E5E5E5">remember that this is going to use the</font>

430
00:16:25,569 --> 00:16:29,500
calling convention that is<font color="#CCCCCC"> utilized by</font>

431
00:16:27,490 --> 00:16:33,850
<font color="#E5E5E5">Linux and not by windows so it's going</font>

432
00:16:29,500 --> 00:16:34,899
to use<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are dirs</font><font color="#CCCCCC"> i calling</font>

433
00:16:33,850 --> 00:16:39,610
convention<font color="#E5E5E5"> that's actually also</font>

434
00:16:34,899 --> 00:16:42,310
specified by<font color="#E5E5E5"> the system</font><font color="#CCCCCC"> ba</font><font color="#E5E5E5"> bi alright so</font>

435
00:16:39,610 --> 00:16:44,680
next up is<font color="#E5E5E5"> the file system so this is</font>

436
00:16:42,310 --> 00:16:48,638
the<font color="#E5E5E5"> other major way in which linux</font>

437
00:16:44,680 --> 00:16:50,739
communicates whereas on<font color="#E5E5E5"> Windows almost</font>

438
00:16:48,639 --> 00:16:53,139
everything is represented as an object

439
00:16:50,740 --> 00:16:55,810
you have objects processors excuse me

440
00:16:53,139 --> 00:16:57,870
processes objects for threads objects

441
00:16:55,810 --> 00:16:59,768
for drivers everything is an object on

442
00:16:57,870 --> 00:17:01,360
linux linux does things a bit

443
00:16:59,769 --> 00:17:02,380
differently and a lot<font color="#CCCCCC"> of interactions</font>

444
00:17:01,360 --> 00:17:04,510
are actually done through<font color="#CCCCCC"> the file</font>

445
00:17:02,380 --> 00:17:06,339
system on windows if you want to get

446
00:17:04,510 --> 00:17:08,140
<font color="#CCCCCC">information about a process you open a</font>

447
00:17:06,339 --> 00:17:10,000
handle to<font color="#E5E5E5"> the process object then you</font>

448
00:17:08,140 --> 00:17:11,679
can use the win32<font color="#E5E5E5"> api to query</font>

449
00:17:10,000 --> 00:17:14,049
information change<font color="#E5E5E5"> information things</font>

450
00:17:11,679 --> 00:17:15,579
like that on linux linux actually

451
00:17:14,049 --> 00:17:17,980
exposes<font color="#E5E5E5"> this information through a</font>

452
00:17:15,579 --> 00:17:20,559
special<font color="#E5E5E5"> file system and then you can</font>

453
00:17:17,980 --> 00:17:22,240
read the files on that system<font color="#CCCCCC"> video</font><font color="#E5E5E5"> to</font>

454
00:17:20,559 --> 00:17:24,059
process out on the information so it's

455
00:17:22,240 --> 00:17:27,669
exposed actually through the file system

456
00:17:24,059 --> 00:17:29,139
but there<font color="#E5E5E5"> are actually two major file</font>

457
00:17:27,669 --> 00:17:31,210
systems that are provided by Linux so

458
00:17:29,140 --> 00:17:33,429
there's the the voi FS which is the

459
00:17:31,210 --> 00:17:35,289
virtual file<font color="#E5E5E5"> system so now this is going</font>

460
00:17:33,429 --> 00:17:39,309
<font color="#E5E5E5">to have the Linux root directory this is</font>

461
00:17:35,289 --> 00:17:41,020
going to have<font color="#E5E5E5"> et Cie lib VAR opt all</font>

462
00:17:39,309 --> 00:17:43,690
those directories that typical files

463
00:17:41,020 --> 00:17:45,879
exist in one of<font color="#E5E5E5"> the important</font><font color="#CCCCCC"> things to</font>

464
00:17:43,690 --> 00:17:47,500
<font color="#E5E5E5">note about this file system as opposed</font>

465
00:17:45,880 --> 00:17:49,000
to the other is that it is not

466
00:17:47,500 --> 00:17:50,820
accessible through

467
00:17:49,000 --> 00:17:52,930
windows one of the<font color="#E5E5E5"> interesting</font>

468
00:17:50,820 --> 00:17:54,909
implications of this is<font color="#CCCCCC"> that if you were</font>

469
00:17:52,930 --> 00:17:56,830
to store a malicious file that would

470
00:17:54,910 --> 00:17:59,620
typically trigger like an<font color="#CCCCCC"> anti-virus</font>

471
00:17:56,830 --> 00:18:01,240
exception on this file system you could

472
00:17:59,620 --> 00:18:03,189
store without worrying<font color="#E5E5E5"> about it getting</font>

473
00:18:01,240 --> 00:18:04,990
picked off because it<font color="#E5E5E5"> is not actually</font>

474
00:18:03,190 --> 00:18:06,250
accessible through the windows

475
00:18:04,990 --> 00:18:08,680
environment there are no api is

476
00:18:06,250 --> 00:18:13,170
currently documented and exposed by

477
00:18:08,680 --> 00:18:16,360
<font color="#CCCCCC">microsoft for reading this file system</font>

478
00:18:13,170 --> 00:18:20,140
yes the other one is<font color="#CCCCCC"> the dr f essence oh</font>

479
00:18:16,360 --> 00:18:22,419
the<font color="#E5E5E5"> other way yes using the</font><font color="#CCCCCC"> dr FS you</font>

480
00:18:20,140 --> 00:18:24,820
can access all the file systems on the

481
00:18:22,420 --> 00:18:25,750
windows root drive barring barring

482
00:18:24,820 --> 00:18:27,790
permissions which are<font color="#E5E5E5"> going to talk</font>

483
00:18:25,750 --> 00:18:29,980
about so his question was what about

484
00:18:27,790 --> 00:18:33,430
what about<font color="#CCCCCC"> the other way so the other</font>

485
00:18:29,980 --> 00:18:36,160
file system is the drive FS which allows

486
00:18:33,430 --> 00:18:38,950
access to<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> the windows drives so</font>

487
00:18:36,160 --> 00:18:43,320
when you<font color="#CCCCCC"> are in your bash see if you</font>

488
00:18:38,950 --> 00:18:45,970
want to access<font color="#CCCCCC"> a file in your see users</font>

489
00:18:43,320 --> 00:18:48,639
Spencer desktop directory you can do

490
00:18:45,970 --> 00:18:52,000
that and windows kindly mounts the c

491
00:18:48,640 --> 00:18:53,170
drive under /<font color="#CCCCCC"> MNT /c so all of your</font>

492
00:18:52,000 --> 00:18:56,260
drives are going to<font color="#E5E5E5"> mountain there</font>

493
00:18:53,170 --> 00:18:58,240
<font color="#CCCCCC">underseat on and then you can access all</font>

494
00:18:56,260 --> 00:18:59,980
of those files<font color="#E5E5E5"> on and there's there's</font>

495
00:18:58,240 --> 00:19:03,190
some nuances that we're going<font color="#E5E5E5"> to talk</font>

496
00:18:59,980 --> 00:19:04,810
about so this is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> major file systems</font>

497
00:19:03,190 --> 00:19:07,450
for reading and<font color="#E5E5E5"> writing your standard</font>

498
00:19:04,810 --> 00:19:09,159
typical files now the other file systems

499
00:19:07,450 --> 00:19:11,710
are actually implemented for proc and

500
00:19:09,160 --> 00:19:13,210
cysts which allow a basic communication

501
00:19:11,710 --> 00:19:15,970
with with<font color="#CCCCCC"> the colonel that's what</font>

502
00:19:13,210 --> 00:19:17,080
they're used on a full native<font color="#E5E5E5"> colonel</font>

503
00:19:15,970 --> 00:19:19,030
implementation you can read out

504
00:19:17,080 --> 00:19:21,370
information<font color="#E5E5E5"> about the the networking</font>

505
00:19:19,030 --> 00:19:23,440
configuration you<font color="#E5E5E5"> can read out processes</font>

506
00:19:21,370 --> 00:19:27,489
you<font color="#CCCCCC"> can get Colonel options at runtime</font>

507
00:19:23,440 --> 00:19:29,170
things like that these are very these

508
00:19:27,490 --> 00:19:31,920
are implemented in very limited fashion

509
00:19:29,170 --> 00:19:35,950
on the wsl so you don't have<font color="#E5E5E5"> access to</font>

510
00:19:31,920 --> 00:19:37,360
nearly even close to<font color="#E5E5E5"> all of all of</font><font color="#CCCCCC"> that</font>

511
00:19:35,950 --> 00:19:40,480
that you would expect to have on a

512
00:19:37,360 --> 00:19:41,590
normal Linux system um specifically one

513
00:19:40,480 --> 00:19:45,700
of<font color="#E5E5E5"> the things I wanted to call</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> is</font>

514
00:19:41,590 --> 00:19:48,040
the proc net is not<font color="#E5E5E5"> implemented enough</font>

515
00:19:45,700 --> 00:19:50,710
for ifconfig to be able<font color="#E5E5E5"> to run at this</font>

516
00:19:48,040 --> 00:19:52,570
time<font color="#CCCCCC"> on it's something I should</font><font color="#E5E5E5"> have</font>

517
00:19:50,710 --> 00:19:56,110
mentioned at the beginning of<font color="#E5E5E5"> my talk is</font>

518
00:19:52,570 --> 00:19:59,020
that the wsl is actually in the windows

519
00:19:56,110 --> 00:20:00,699
tech insider program so<font color="#E5E5E5"> you have to opt</font>

520
00:19:59,020 --> 00:20:02,110
into it to be<font color="#CCCCCC"> able to get this</font>

521
00:20:00,700 --> 00:20:04,360
functionality it is

522
00:20:02,110 --> 00:20:06,580
publicly available but you have to

523
00:20:04,360 --> 00:20:08,320
<font color="#E5E5E5">register you provide your email address</font>

524
00:20:06,580 --> 00:20:10,960
you don't have to pay anything and then

525
00:20:08,320 --> 00:20:12,250
it takes a long time to download it took

526
00:20:10,960 --> 00:20:13,750
me probably about like six hours<font color="#E5E5E5"> like</font>

527
00:20:12,250 --> 00:20:15,700
download all the updates i'm running in

528
00:20:13,750 --> 00:20:18,070
a vm but it takes a long<font color="#E5E5E5"> time to</font>

529
00:20:15,700 --> 00:20:20,830
download it so they are still updating

530
00:20:18,070 --> 00:20:22,510
it so<font color="#E5E5E5"> i would be willing to bet a large</font>

531
00:20:20,830 --> 00:20:23,889
amount of<font color="#E5E5E5"> money that it is</font><font color="#CCCCCC"> going that</font>

532
00:20:22,510 --> 00:20:25,660
Microsoft is going to continue to

533
00:20:23,890 --> 00:20:27,429
implement the missing sis costs that

534
00:20:25,660 --> 00:20:30,220
62.6 percent number<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to</font>

535
00:20:27,429 --> 00:20:32,290
hopefully go up as well<font color="#E5E5E5"> as some of the</font>

536
00:20:30,220 --> 00:20:33,760
the basic file system controls like the

537
00:20:32,290 --> 00:20:35,260
proc<font color="#CCCCCC"> Nets probably one of the ones</font>

538
00:20:33,760 --> 00:20:37,120
that's gonna be a high priority for them

539
00:20:35,260 --> 00:20:39,870
to implement<font color="#E5E5E5"> because right now it's</font>

540
00:20:37,120 --> 00:20:42,370
breaking ifconfig you cannot list

541
00:20:39,870 --> 00:20:44,559
interfaces on your system you can still

542
00:20:42,370 --> 00:20:46,418
utilize socket you can bind you can

543
00:20:44,559 --> 00:20:48,610
connect things like that all work we've

544
00:20:46,419 --> 00:20:53,049
try to run ifconfig you're going to have

545
00:20:48,610 --> 00:20:54,280
bad time<font color="#CCCCCC"> alright so drive FS specific</font>

546
00:20:53,049 --> 00:20:56,590
<font color="#CCCCCC">notes so this is very</font><font color="#E5E5E5"> interesting this</font>

547
00:20:54,280 --> 00:20:58,690
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the file system that allows the wsl</font>

548
00:20:56,590 --> 00:21:00,340
environment to be able to access<font color="#CCCCCC"> all the</font>

549
00:20:58,690 --> 00:21:05,790
<font color="#E5E5E5">files under under the windows</font>

550
00:21:00,340 --> 00:21:08,559
environment um so when a process is

551
00:21:05,790 --> 00:21:11,168
created when one of these<font color="#CCCCCC"> pico processes</font>

552
00:21:08,559 --> 00:21:13,690
is created it's<font color="#CCCCCC"> always going</font><font color="#E5E5E5"> to have the</font>

553
00:21:11,169 --> 00:21:15,910
permissions<font color="#CCCCCC"> of the windows process that</font>

554
00:21:13,690 --> 00:21:18,940
created it so if i run bash it's always

555
00:21:15,910 --> 00:21:20,590
going to run as me Spencer even<font color="#CCCCCC"> when I</font>

556
00:21:18,940 --> 00:21:22,510
elevator<font color="#CCCCCC"> ooh when I do like pseudo die</font>

557
00:21:20,590 --> 00:21:24,189
or something like that it's still going

558
00:21:22,510 --> 00:21:25,690
<font color="#E5E5E5">to run as me which</font><font color="#CCCCCC"> is something I</font>

559
00:21:24,190 --> 00:21:27,549
haven't actually read anything about

560
00:21:25,690 --> 00:21:28,660
<font color="#E5E5E5">Microsoft addressing specifically and</font>

561
00:21:27,549 --> 00:21:29,918
this is kind<font color="#E5E5E5"> of going to be a common</font>

562
00:21:28,660 --> 00:21:32,620
motif throughout the rest<font color="#E5E5E5"> of my</font>

563
00:21:29,919 --> 00:21:36,010
presentation is that route really

564
00:21:32,620 --> 00:21:39,010
doesn't mean<font color="#CCCCCC"> anything um so when your</font>

565
00:21:36,010 --> 00:21:41,740
route and you create a file in the drive

566
00:21:39,010 --> 00:21:43,929
FS it's going to<font color="#E5E5E5"> have all the all the</font>

567
00:21:41,740 --> 00:21:45,010
file permission it's going to have 777

568
00:21:43,929 --> 00:21:46,299
and you're not<font color="#E5E5E5"> gonna be able to change</font>

569
00:21:45,010 --> 00:21:49,570
those<font color="#E5E5E5"> you're not</font><font color="#CCCCCC"> going to change the</font>

570
00:21:46,299 --> 00:21:51,850
user and if you try to write a file with

571
00:21:49,570 --> 00:21:52,928
like 600 permissions because you don't

572
00:21:51,850 --> 00:21:55,629
<font color="#CCCCCC">want your user to be able to read it</font>

573
00:21:52,929 --> 00:21:57,400
<font color="#E5E5E5">you're doing that as root all the user</font>

574
00:21:55,630 --> 00:21:58,900
has<font color="#E5E5E5"> to do is exit out a bash and they</font>

575
00:21:57,400 --> 00:22:00,309
can go<font color="#E5E5E5"> over and from their windows user</font>

576
00:21:58,900 --> 00:22:03,160
they can<font color="#E5E5E5"> access that file and they have</font>

577
00:22:00,309 --> 00:22:05,020
they have full permissions to it in

578
00:22:03,160 --> 00:22:06,940
addition if they drop out<font color="#E5E5E5"> of root</font>

579
00:22:05,020 --> 00:22:09,160
permissions because you actually can't

580
00:22:06,940 --> 00:22:11,140
change the 777 you can still access the

581
00:22:09,160 --> 00:22:13,750
file so it's kind of interesting is that

582
00:22:11,140 --> 00:22:15,820
within the drive FS the the permissions

583
00:22:13,750 --> 00:22:18,520
aren't are not honored the way

584
00:22:15,820 --> 00:22:20,200
you would<font color="#E5E5E5"> expect them to be all</font><font color="#CCCCCC"> right so</font>

585
00:22:18,520 --> 00:22:21,670
here's<font color="#E5E5E5"> kind of a kind of an example</font><font color="#CCCCCC"> of</font>

586
00:22:20,200 --> 00:22:23,800
this so I understand this<font color="#E5E5E5"> is a little</font>

587
00:22:21,670 --> 00:22:27,490
bit hard to read but up here I'm<font color="#CCCCCC"> in the</font>

588
00:22:23,800 --> 00:22:29,889
mntc directory um so I'm in my windows

589
00:22:27,490 --> 00:22:32,440
users home directory and I just echo out

590
00:22:29,890 --> 00:22:35,190
super secret into a file and below that

591
00:22:32,440 --> 00:22:38,140
we can tell that the the permissions are

592
00:22:35,190 --> 00:22:40,240
777 and the file is owned by root what<font color="#E5E5E5"> I</font>

593
00:22:38,140 --> 00:22:41,740
<font color="#E5E5E5">think is kind of problematic and one</font><font color="#CCCCCC"> of</font>

594
00:22:40,240 --> 00:22:43,990
the things<font color="#CCCCCC"> that I</font><font color="#E5E5E5"> am predicting is going</font>

595
00:22:41,740 --> 00:22:46,630
to be a problem in the<font color="#E5E5E5"> future is this</font>

596
00:22:43,990 --> 00:22:49,930
<font color="#E5E5E5">next command where we do cho mod 600 on</font>

597
00:22:46,630 --> 00:22:51,790
that file and we actually check the the

598
00:22:49,930 --> 00:22:54,280
exit code of<font color="#E5E5E5"> cho mod and it comes back</font>

599
00:22:51,790 --> 00:22:56,350
an exit of<font color="#CCCCCC"> zero so</font><font color="#E5E5E5"> cho mod says like hey</font>

600
00:22:54,280 --> 00:22:58,480
there was no problem we would expect

601
00:22:56,350 --> 00:23:00,189
<font color="#E5E5E5">that the permissions on that file would</font>

602
00:22:58,480 --> 00:23:01,510
have been<font color="#CCCCCC"> updated accordingly and that</font>

603
00:23:00,190 --> 00:23:03,430
file would now be protecting<font color="#CCCCCC"> you know</font>

604
00:23:01,510 --> 00:23:04,930
it's owned by root nobody<font color="#E5E5E5"> else you'd be</font>

605
00:23:03,430 --> 00:23:08,260
able to read<font color="#CCCCCC"> it but right after that</font>

606
00:23:04,930 --> 00:23:12,430
we're able to see<font color="#E5E5E5"> that it is still 777</font>

607
00:23:08,260 --> 00:23:14,170
and we exit out the my user not<font color="#E5E5E5"> root can</font>

608
00:23:12,430 --> 00:23:16,570
still access that file with those

609
00:23:14,170 --> 00:23:18,610
permissions so in my opinion this is

610
00:23:16,570 --> 00:23:20,200
kind of problematic because users that

611
00:23:18,610 --> 00:23:22,449
are used to running in a<font color="#E5E5E5"> Linux</font>

612
00:23:20,200 --> 00:23:24,190
<font color="#E5E5E5">environment they're going to expect that</font>

613
00:23:22,450 --> 00:23:27,130
things would work in the way that they

614
00:23:24,190 --> 00:23:30,520
would intend now this is only the case

615
00:23:27,130 --> 00:23:32,230
on the drive file system on the virtual

616
00:23:30,520 --> 00:23:34,990
file system and those Linux files if you

617
00:23:32,230 --> 00:23:37,240
go into like et Cie they the permissions

618
00:23:34,990 --> 00:23:39,340
do work the way you would expect them to

619
00:23:37,240 --> 00:23:41,950
work so if your route and you go<font color="#CCCCCC"> into ET</font>

620
00:23:39,340 --> 00:23:43,570
c and you know hopefully your shadow

621
00:23:41,950 --> 00:23:45,460
file permissions are<font color="#CCCCCC"> six hundred and</font>

622
00:23:43,570 --> 00:23:47,200
somebody compromises your root user

623
00:23:45,460 --> 00:23:49,630
they're not going to<font color="#E5E5E5"> be able to get your</font>

624
00:23:47,200 --> 00:23:52,180
shadow file they're not gonna<font color="#E5E5E5"> be able to</font>

625
00:23:49,630 --> 00:23:53,230
read that which when you start up w SL

626
00:23:52,180 --> 00:23:54,460
for the first time it<font color="#E5E5E5"> prompts you to</font>

627
00:23:53,230 --> 00:23:55,830
make a password so it's<font color="#E5E5E5"> not even</font>

628
00:23:54,460 --> 00:23:59,740
<font color="#E5E5E5">associated with your windows password</font>

629
00:23:55,830 --> 00:24:01,540
anyways also kind<font color="#E5E5E5"> of interesting</font><font color="#CCCCCC"> okay so</font>

630
00:23:59,740 --> 00:24:03,010
those are<font color="#CCCCCC"> all the the actual the</font>

631
00:24:01,540 --> 00:24:04,090
technical details of how<font color="#CCCCCC"> it's</font>

632
00:24:03,010 --> 00:24:05,830
implemented so we're<font color="#CCCCCC"> going</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font>

633
00:24:04,090 --> 00:24:07,120
what are the implications of this for an

634
00:24:05,830 --> 00:24:09,699
attacker hopefully you're kind<font color="#E5E5E5"> of</font>

635
00:24:07,120 --> 00:24:11,500
already starting to see this with the

636
00:24:09,700 --> 00:24:13,720
problems of how root permissions are

637
00:24:11,500 --> 00:24:16,960
being handled so one of the<font color="#CCCCCC"> first things</font>

638
00:24:13,720 --> 00:24:18,700
I wanted this section<font color="#CCCCCC"> to be you know if</font>

639
00:24:16,960 --> 00:24:21,100
you were a pen tester and you

640
00:24:18,700 --> 00:24:23,440
compromised a system that was<font color="#E5E5E5"> wsl where</font>

641
00:24:21,100 --> 00:24:25,330
some of<font color="#E5E5E5"> the basic things</font><font color="#CCCCCC"> you would need</font>

642
00:24:23,440 --> 00:24:26,740
so that way we can<font color="#E5E5E5"> sort of answer answer</font>

643
00:24:25,330 --> 00:24:29,629
these questions of the low-hanging fruit

644
00:24:26,740 --> 00:24:30,710
so identifying wsl so on the first

645
00:24:29,630 --> 00:24:33,590
things you want<font color="#E5E5E5"> to if your honor system</font>

646
00:24:30,710 --> 00:24:35,450
you suspect that<font color="#CCCCCC"> it's windows on</font><font color="#E5E5E5"> Linux</font>

647
00:24:33,590 --> 00:24:37,010
how would you identify this this is

648
00:24:35,450 --> 00:24:39,260
actually ridiculously easy there are

649
00:24:37,010 --> 00:24:41,150
quite a few<font color="#E5E5E5"> different ways so</font><font color="#CCCCCC"> I have</font>

650
00:24:39,260 --> 00:24:43,250
them<font color="#E5E5E5"> and one of the obvious ways is that</font>

651
00:24:41,150 --> 00:24:45,230
Microsoft the actual word microsoft is

652
00:24:43,250 --> 00:24:48,560
in a<font color="#E5E5E5"> couple of locations in relation to</font>

653
00:24:45,230 --> 00:24:50,810
the<font color="#E5E5E5"> colonel despite the colonel being</font>

654
00:24:48,560 --> 00:24:53,690
from canonical and being from ubuntu it

655
00:24:50,810 --> 00:24:55,190
does say Microsoft in them so you can

656
00:24:53,690 --> 00:24:57,710
you can search from Microsoft in those

657
00:24:55,190 --> 00:24:59,900
in those titles you can<font color="#CCCCCC"> also look at the</font>

658
00:24:57,710 --> 00:25:01,820
MNT directory you can look to see what

659
00:24:59,900 --> 00:25:04,910
exactly is mounted you should see the

660
00:25:01,820 --> 00:25:06,530
the drives being mounted in there so

661
00:25:04,910 --> 00:25:08,780
these are things that may in the future

662
00:25:06,530 --> 00:25:10,820
be changeable so Microsoft might update

663
00:25:08,780 --> 00:25:12,379
you know drop the Microsoft string or

664
00:25:10,820 --> 00:25:14,210
whatever if it starts to<font color="#E5E5E5"> get abused by</font>

665
00:25:12,380 --> 00:25:15,860
attackers so there's a couple of

666
00:25:14,210 --> 00:25:17,780
behavioral clues that I want to<font color="#E5E5E5"> point</font>

667
00:25:15,860 --> 00:25:19,550
out because these<font color="#E5E5E5"> ones are probably</font><font color="#CCCCCC"> less</font>

668
00:25:17,780 --> 00:25:21,320
likely to be changed<font color="#E5E5E5"> because it's not</font>

669
00:25:19,550 --> 00:25:23,720
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to be as easy as just dropping the</font>

670
00:25:21,320 --> 00:25:25,820
word microsoft out of the titles so

671
00:25:23,720 --> 00:25:27,980
there's exactly one module in the<font color="#CCCCCC"> cysts</font>

672
00:25:25,820 --> 00:25:29,870
modules interface I find this<font color="#CCCCCC"> very</font>

673
00:25:27,980 --> 00:25:31,430
unlikely on a standard Linux system

674
00:25:29,870 --> 00:25:32,929
because you're going<font color="#E5E5E5"> to have drivers</font>

675
00:25:31,430 --> 00:25:34,880
that are going to be<font color="#CCCCCC"> loaded it's not a</font>

676
00:25:32,930 --> 00:25:36,470
sure thing but<font color="#E5E5E5"> chances are pretty good</font>

677
00:25:34,880 --> 00:25:40,850
you're<font color="#E5E5E5"> going to have a couple of drivers</font>

678
00:25:36,470 --> 00:25:43,430
loaded on<font color="#CCCCCC"> your on your linux system proc</font>

679
00:25:40,850 --> 00:25:44,689
is missing modules module entries

680
00:25:43,430 --> 00:25:46,760
because there's<font color="#E5E5E5"> not a whole lot of files</font>

681
00:25:44,690 --> 00:25:50,000
that<font color="#E5E5E5"> are excuse me processes that are</font>

682
00:25:46,760 --> 00:25:52,400
running additionally there is no there

683
00:25:50,000 --> 00:25:54,500
<font color="#E5E5E5">is no init system there is no upstart</font>

684
00:25:52,400 --> 00:25:57,440
system d or anything like that is very

685
00:25:54,500 --> 00:25:59,180
<font color="#E5E5E5">bare-bones so there's no uh as of this</font>

686
00:25:57,440 --> 00:26:01,640
time there is no ability to be able to

687
00:25:59,180 --> 00:26:04,280
like register a service in the wsl

688
00:26:01,640 --> 00:26:06,410
environment and probably my favorite

689
00:26:04,280 --> 00:26:09,590
which is<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> very interesting is um</font>

690
00:26:06,410 --> 00:26:11,720
the strictness of how the flags are

691
00:26:09,590 --> 00:26:13,459
passed into the<font color="#E5E5E5"> M map system call on</font>

692
00:26:11,720 --> 00:26:14,840
this<font color="#CCCCCC"> one I find very interesting because</font>

693
00:26:13,460 --> 00:26:18,110
<font color="#E5E5E5">this is definitely a good behavioral</font>

694
00:26:14,840 --> 00:26:21,560
clue and now the<font color="#CCCCCC"> standard the standard</font>

695
00:26:18,110 --> 00:26:24,050
Linux systems are less restrictive and

696
00:26:21,560 --> 00:26:26,450
don't check the for the adherence of the

697
00:26:24,050 --> 00:26:27,560
flags to the standards quite as much so

698
00:26:26,450 --> 00:26:29,330
what we can<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> see right here is</font>

699
00:26:27,560 --> 00:26:31,190
in my example call and I left off the

700
00:26:29,330 --> 00:26:33,199
<font color="#E5E5E5">back so that you could have a font that</font>

701
00:26:31,190 --> 00:26:36,410
was big enough to<font color="#E5E5E5"> read it but this third</font>

702
00:26:33,200 --> 00:26:38,420
parameter right<font color="#E5E5E5"> over there where the</font>

703
00:26:36,410 --> 00:26:40,340
permissions for the region<font color="#E5E5E5"> of memory</font>

704
00:26:38,420 --> 00:26:43,170
<font color="#E5E5E5">that you're trying to map are specified</font>

705
00:26:40,340 --> 00:26:45,870
<font color="#CCCCCC">um if you specify a one thing</font>

706
00:26:43,170 --> 00:26:48,810
in hex which is not a standard flag

707
00:26:45,870 --> 00:26:50,699
<font color="#CCCCCC">Linux will will ignore it just won't</font>

708
00:26:48,810 --> 00:26:52,830
change anything the the region<font color="#E5E5E5"> of memory</font>

709
00:26:50,700 --> 00:26:55,260
will be mapped and you can go along your

710
00:26:52,830 --> 00:26:58,260
way however in Windows if you specify a

711
00:26:55,260 --> 00:26:59,879
flag that's not defined it's going to

712
00:26:58,260 --> 00:27:02,250
throw an error code so if you try to run

713
00:26:59,880 --> 00:27:05,130
the same exact function on linux versus

714
00:27:02,250 --> 00:27:07,080
on w SL w SL will cause it to fail

715
00:27:05,130 --> 00:27:10,530
whereas<font color="#E5E5E5"> linux will have it run</font>

716
00:27:07,080 --> 00:27:11,909
successfully and this is that that<font color="#E5E5E5"> i was</font>

717
00:27:10,530 --> 00:27:15,379
mentioning a three point four point oh

718
00:27:11,910 --> 00:27:17,670
dash microsoft very very subtle but

719
00:27:15,380 --> 00:27:19,890
pretty pretty easy way to be<font color="#CCCCCC"> able to</font>

720
00:27:17,670 --> 00:27:21,890
identify that that this is probably<font color="#CCCCCC"> not</font>

721
00:27:19,890 --> 00:27:24,030
the<font color="#CCCCCC"> linux system that you're looking for</font>

722
00:27:21,890 --> 00:27:26,460
so one of<font color="#E5E5E5"> the other</font><font color="#CCCCCC"> things like i said i</font>

723
00:27:24,030 --> 00:27:27,720
once hit on what what penetration

724
00:27:26,460 --> 00:27:29,700
testers would really want to know when

725
00:27:27,720 --> 00:27:32,010
working in<font color="#E5E5E5"> this environment so the</font>

726
00:27:29,700 --> 00:27:34,320
<font color="#CCCCCC">metasploit framework what payloads are</font>

727
00:27:32,010 --> 00:27:36,720
going to actually<font color="#E5E5E5"> work in this</font>

728
00:27:34,320 --> 00:27:38,730
environment so<font color="#CCCCCC"> i went</font><font color="#E5E5E5"> through the list</font>

729
00:27:36,720 --> 00:27:41,730
and i tested these now each<font color="#E5E5E5"> one of these</font>

730
00:27:38,730 --> 00:27:43,530
<font color="#E5E5E5">i tested as a 64-bit on elf executables</font>

731
00:27:41,730 --> 00:27:47,580
using MSF venom to put the shell code

732
00:27:43,530 --> 00:27:49,410
into the your standard elf file and

733
00:27:47,580 --> 00:27:53,550
random from there<font color="#E5E5E5"> something interesting</font>

734
00:27:49,410 --> 00:27:56,280
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the wsl system strictly supports 64</font>

735
00:27:53,550 --> 00:27:57,870
bit binaries whereas on i'm<font color="#E5E5E5"> using fedora</font>

736
00:27:56,280 --> 00:28:01,260
<font color="#E5E5E5">i don't know if anybody</font><font color="#CCCCCC"> noticed the i</font>

737
00:27:57,870 --> 00:28:04,409
run linux on my hardware<font color="#E5E5E5"> i can run a 32</font>

738
00:28:01,260 --> 00:28:07,890
bit binary<font color="#CCCCCC"> 32-bit</font><font color="#E5E5E5"> l file on my fedora</font>

739
00:28:04,410 --> 00:28:11,010
host and and it works just fine on<font color="#E5E5E5"> wsl</font>

740
00:28:07,890 --> 00:28:13,590
though it only supports 64 bit off

741
00:28:11,010 --> 00:28:17,430
executables so that's why these ones

742
00:28:13,590 --> 00:28:19,379
going<font color="#E5E5E5"> down so the</font><font color="#CCCCCC"> metal of payloads like</font>

743
00:28:17,430 --> 00:28:22,410
<font color="#CCCCCC">brand-new it came out</font><font color="#E5E5E5"> i think was like</font>

744
00:28:19,380 --> 00:28:24,150
three or four weeks<font color="#E5E5E5"> ago once one of the</font>

745
00:28:22,410 --> 00:28:26,250
great works by brent cook and there's

746
00:28:24,150 --> 00:28:29,520
like I'm noticeably log about<font color="#E5E5E5"> it that</font>

747
00:28:26,250 --> 00:28:31,680
one will not<font color="#E5E5E5"> work the reason why that</font>

748
00:28:29,520 --> 00:28:34,110
will not work was actually that exact<font color="#CCCCCC"> M</font>

749
00:28:31,680 --> 00:28:35,820
map call that i had just pointed<font color="#CCCCCC"> out and</font>

750
00:28:34,110 --> 00:28:38,189
that's<font color="#E5E5E5"> what we noticed as</font><font color="#CCCCCC"> we are doing</font>

751
00:28:35,820 --> 00:28:42,330
the testing of this is<font color="#CCCCCC"> that because</font><font color="#E5E5E5"> the</font>

752
00:28:38,190 --> 00:28:44,460
metal stager needs to be very small it's

753
00:28:42,330 --> 00:28:47,879
a standard exploit<font color="#E5E5E5"> stage or size is</font><font color="#CCCCCC"> very</font>

754
00:28:44,460 --> 00:28:50,040
key on it leveraged that<font color="#E5E5E5"> nuance in the</font>

755
00:28:47,880 --> 00:28:51,630
<font color="#E5E5E5">linux system that wasn't as strict about</font>

756
00:28:50,040 --> 00:28:53,850
checking those flags in order to work

757
00:28:51,630 --> 00:28:55,740
but windows is being much more strict

758
00:28:53,850 --> 00:28:56,820
about those flags and so in this

759
00:28:55,740 --> 00:28:59,639
particular case<font color="#E5E5E5"> than</font>

760
00:28:56,820 --> 00:29:01,769
metal payload was failing with our verse

761
00:28:59,639 --> 00:29:05,689
<font color="#CCCCCC">TCP stager</font><font color="#E5E5E5"> and was not actually running</font>

762
00:29:01,769 --> 00:29:10,649
because<font color="#E5E5E5"> of that next up the unstaged</font>

763
00:29:05,690 --> 00:29:13,350
<font color="#E5E5E5">64-bit shell worked just fine on the so</font>

764
00:29:10,649 --> 00:29:15,600
it was a<font color="#E5E5E5"> typical reverse shell you can</font>

765
00:29:13,350 --> 00:29:17,939
use it<font color="#E5E5E5"> not meterpreter so not quite as</font>

766
00:29:15,600 --> 00:29:19,889
good<font color="#CCCCCC"> as you would hope on the</font><font color="#E5E5E5"> 32-bit</font>

767
00:29:17,940 --> 00:29:22,769
<font color="#E5E5E5">version of Linux there isn't a 64-bit</font>

768
00:29:19,889 --> 00:29:25,139
version of Linux meterpreter and like I

769
00:29:22,769 --> 00:29:27,899
said when the wsl system only supports

770
00:29:25,139 --> 00:29:30,240
64 bit<font color="#E5E5E5"> elf executables so the 32-bit one</font>

771
00:29:27,899 --> 00:29:32,189
is of course not<font color="#E5E5E5"> going to work and then</font>

772
00:29:30,240 --> 00:29:33,929
last but not least and not just<font color="#CCCCCC"> because</font>

773
00:29:32,190 --> 00:29:36,450
I helped<font color="#E5E5E5"> out with it was the Python</font>

774
00:29:33,929 --> 00:29:39,000
interpreter on this one was<font color="#E5E5E5"> the only</font>

775
00:29:36,450 --> 00:29:43,440
working meterpreter instance that worked

776
00:29:39,000 --> 00:29:45,809
<font color="#CCCCCC">on</font><font color="#E5E5E5"> wsl now I say that it worked but on</font>

777
00:29:43,440 --> 00:29:47,519
there were still some problems in the

778
00:29:45,809 --> 00:29:48,779
functionality<font color="#CCCCCC"> that it was expecting to</font>

779
00:29:47,519 --> 00:29:51,000
leverage and one of<font color="#E5E5E5"> those things was</font>

780
00:29:48,779 --> 00:29:52,559
like the ifconfig so right here we can

781
00:29:51,000 --> 00:29:54,000
<font color="#CCCCCC">actually see the output of what</font><font color="#E5E5E5"> I was</font>

782
00:29:52,559 --> 00:29:55,980
<font color="#E5E5E5">able to get from the Python interpreter</font>

783
00:29:54,000 --> 00:29:57,629
running on this the only mature / to

784
00:29:55,980 --> 00:30:00,149
that ran on it and so we can<font color="#E5E5E5"> see the</font>

785
00:29:57,629 --> 00:30:02,519
Linux three point four point oh now this

786
00:30:00,149 --> 00:30:04,709
information<font color="#CCCCCC"> does not include Microsoft's</font>

787
00:30:02,519 --> 00:30:06,360
because the kernel version is actually

788
00:30:04,710 --> 00:30:08,190
stored in multiple locations the

789
00:30:06,360 --> 00:30:09,689
<font color="#E5E5E5">particular location where sis info</font>

790
00:30:08,190 --> 00:30:11,309
actually<font color="#E5E5E5"> pulls it from doesn't say</font>

791
00:30:09,690 --> 00:30:14,850
Microsoft so it might not<font color="#E5E5E5"> be as as</font>

792
00:30:11,309 --> 00:30:17,389
obvious but down here ifconfig failing

793
00:30:14,850 --> 00:30:20,340
this is because<font color="#E5E5E5"> even the native ifconfig</font>

794
00:30:17,389 --> 00:30:23,129
object on on<font color="#CCCCCC"> Linux doesn't work the</font>

795
00:30:20,340 --> 00:30:24,689
actual native binary does not function

796
00:30:23,129 --> 00:30:27,539
so meterpreter is not be able to<font color="#E5E5E5"> work it</font>

797
00:30:24,690 --> 00:30:30,570
out either alright so the<font color="#E5E5E5"> Linux kernel</font>

798
00:30:27,539 --> 00:30:33,029
protection so<font color="#E5E5E5"> because the Linux kernel</font>

799
00:30:30,570 --> 00:30:35,370
doesn't actually exist in<font color="#E5E5E5"> this</font>

800
00:30:33,029 --> 00:30:37,139
environment it's not there microsoft

801
00:30:35,370 --> 00:30:39,508
claims to have done<font color="#E5E5E5"> a</font><font color="#CCCCCC"> clean room</font>

802
00:30:37,139 --> 00:30:40,740
implementation of all the system calls

803
00:30:39,509 --> 00:30:44,129
and all the functionality that's

804
00:30:40,740 --> 00:30:45,750
provided there is no linux kernel so

805
00:30:44,129 --> 00:30:47,820
what I want to<font color="#E5E5E5"> do is I want to look at</font>

806
00:30:45,750 --> 00:30:49,440
some<font color="#CCCCCC"> of the protections that a binary</font>

807
00:30:47,820 --> 00:30:51,240
that's running on the Linux environment

808
00:30:49,440 --> 00:30:54,750
would expect to<font color="#E5E5E5"> be provided by the</font>

809
00:30:51,240 --> 00:30:56,700
kernel and unfortunately<font color="#E5E5E5"> all the basic</font>

810
00:30:54,750 --> 00:31:00,059
ones that I checked<font color="#E5E5E5"> for are all actually</font>

811
00:30:56,700 --> 00:31:02,629
<font color="#E5E5E5">provided now the reason why all of these</font>

812
00:31:00,059 --> 00:31:05,639
<font color="#CCCCCC">are provided on between user mode aslr</font>

813
00:31:02,629 --> 00:31:08,610
<font color="#E5E5E5">depth and no page prevention is all of</font>

814
00:31:05,639 --> 00:31:10,649
these are our memory protections and

815
00:31:08,610 --> 00:31:12,090
those memory<font color="#E5E5E5"> AP is our</font>

816
00:31:10,650 --> 00:31:16,050
<font color="#CCCCCC">is going</font><font color="#E5E5E5"> to be</font><font color="#CCCCCC"> very common and when a</font>

817
00:31:12,090 --> 00:31:17,820
map call is actually made it is

818
00:31:16,050 --> 00:31:19,770
fulfilled by the windows kernel it's not

819
00:31:17,820 --> 00:31:22,620
actually implement implemented by LX

820
00:31:19,770 --> 00:31:24,270
core so in being fulfilled by<font color="#CCCCCC"> windows</font>

821
00:31:22,620 --> 00:31:26,459
you get all<font color="#CCCCCC"> of those protections that</font>

822
00:31:24,270 --> 00:31:29,550
windows already offers so data execution

823
00:31:26,460 --> 00:31:31,940
prevention<font color="#CCCCCC"> ASLR no page mapping all</font>

824
00:31:29,550 --> 00:31:34,919
those things work as<font color="#E5E5E5"> would be expected</font>

825
00:31:31,940 --> 00:31:36,360
something I did notice however I mean

826
00:31:34,920 --> 00:31:38,820
that I did want to point out<font color="#CCCCCC"> is that the</font>

827
00:31:36,360 --> 00:31:41,340
randomized VA space that option that

828
00:31:38,820 --> 00:31:42,960
allows you<font color="#E5E5E5"> to modify how aslr it's</font>

829
00:31:41,340 --> 00:31:46,110
implemented on a Linux system at runtime

830
00:31:42,960 --> 00:31:50,040
you<font color="#CCCCCC"> actually can control that so if you</font>

831
00:31:46,110 --> 00:31:54,510
echo out 0<font color="#E5E5E5"> and wsl into that control</font>

832
00:31:50,040 --> 00:31:57,180
file you can disable a SLR yes<font color="#E5E5E5"> SOR for</font>

833
00:31:54,510 --> 00:31:58,680
your session on the flip side the null

834
00:31:57,180 --> 00:32:01,110
page mapping that's typically controlled

835
00:31:58,680 --> 00:32:02,520
through the em Mad Men address that is

836
00:32:01,110 --> 00:32:04,260
not available and that's<font color="#E5E5E5"> one of those</font>

837
00:32:02,520 --> 00:32:06,360
control files that you can't read that

838
00:32:04,260 --> 00:32:10,530
<font color="#E5E5E5">you can't modify or anything like that</font>

839
00:32:06,360 --> 00:32:13,139
it's just not implemented<font color="#CCCCCC"> ok so cross</font>

840
00:32:10,530 --> 00:32:14,879
process access so let's say we're going

841
00:32:13,140 --> 00:32:17,190
to go over the scenarios of if you're if

842
00:32:14,880 --> 00:32:18,840
you have a compromised<font color="#E5E5E5"> system in a wsl</font>

843
00:32:17,190 --> 00:32:22,740
process what type of access can you<font color="#E5E5E5"> get</font>

844
00:32:18,840 --> 00:32:24,419
out<font color="#E5E5E5"> into windows and vice versa</font><font color="#CCCCCC"> ok so</font>

845
00:32:22,740 --> 00:32:25,620
this would<font color="#CCCCCC"> be a desirable of course if</font>

846
00:32:24,420 --> 00:32:27,630
you're<font color="#E5E5E5"> if you're on a pen test if you</font>

847
00:32:25,620 --> 00:32:31,500
compromise you know an ssh server which

848
00:32:27,630 --> 00:32:32,820
doesn't work yet tomcat or if you if you

849
00:32:31,500 --> 00:32:34,620
compromise the<font color="#E5E5E5"> windows host via some</font>

850
00:32:32,820 --> 00:32:37,080
sort<font color="#E5E5E5"> of like a SMB vulnerability things</font>

851
00:32:34,620 --> 00:32:39,239
like that so the bottom line is<font color="#CCCCCC"> linux</font>

852
00:32:37,080 --> 00:32:40,770
can't really list windows processes and

853
00:32:39,240 --> 00:32:43,590
that's because like<font color="#E5E5E5"> i said windows</font>

854
00:32:40,770 --> 00:32:45,930
processes are stored as objects<font color="#E5E5E5"> in the</font>

855
00:32:43,590 --> 00:32:47,850
kernel and their accessed by AP eyes

856
00:32:45,930 --> 00:32:49,800
which are windows system calls which

857
00:32:47,850 --> 00:32:52,980
aren't available because none of that is

858
00:32:49,800 --> 00:32:55,950
exposed to<font color="#E5E5E5"> the Linux processes windows</font>

859
00:32:52,980 --> 00:32:57,360
however can enumerate out Linux can tell

860
00:32:55,950 --> 00:32:59,790
that it exists and it can tell that the

861
00:32:57,360 --> 00:33:02,879
processes are there but the pits don't

862
00:32:59,790 --> 00:33:05,490
match so Linux into<font color="#CCCCCC"> windows access</font>

863
00:33:02,880 --> 00:33:06,810
there's not really any functionality for

864
00:33:05,490 --> 00:33:09,090
that reason that I'd mentioned is that

865
00:33:06,810 --> 00:33:11,250
<font color="#E5E5E5">you can't actually call the necessary</font>

866
00:33:09,090 --> 00:33:13,260
api's to get the information<font color="#CCCCCC"> out of it</font>

867
00:33:11,250 --> 00:33:15,690
I'm you can access other Linux processes

868
00:33:13,260 --> 00:33:17,730
through the proc interface that

869
00:33:15,690 --> 00:33:19,860
functionality is available which<font color="#CCCCCC"> is</font>

870
00:33:17,730 --> 00:33:21,570
important to know if you need to debug a

871
00:33:19,860 --> 00:33:22,490
Linux process using like gdb or

872
00:33:21,570 --> 00:33:24,269
something like that<font color="#E5E5E5"> it will work</font>

873
00:33:22,490 --> 00:33:26,009
correctly

874
00:33:24,269 --> 00:33:29,309
because you<font color="#E5E5E5"> don't have access to the</font>

875
00:33:26,009 --> 00:33:32,940
win32 native system calls in the API you

876
00:33:29,309 --> 00:33:35,099
can't get into into<font color="#CCCCCC"> Windows processes if</font>

877
00:33:32,940 --> 00:33:37,409
you wanted<font color="#E5E5E5"> to infect the</font><font color="#CCCCCC"> Windows host</font>

878
00:33:35,099 --> 00:33:39,539
what I would recommend<font color="#E5E5E5"> doing is going up</font>

879
00:33:37,409 --> 00:33:41,399
through the file system and trying to

880
00:33:39,539 --> 00:33:43,529
infect some kind of a file from that

881
00:33:41,399 --> 00:33:45,089
perspective unfortunately like<font color="#E5E5E5"> I</font>

882
00:33:43,529 --> 00:33:46,979
mentioned even if you elevate to root

883
00:33:45,089 --> 00:33:49,678
your still effectively running as your

884
00:33:46,979 --> 00:33:51,570
Windows user you certainly cannot just

885
00:33:49,679 --> 00:33:55,080
go into the C Drive and start overriding

886
00:33:51,570 --> 00:33:57,599
<font color="#CCCCCC">dll's or use like the mof method by</font>

887
00:33:55,080 --> 00:33:59,458
writing a file into<font color="#CCCCCC"> the wbem directory</font>

888
00:33:57,599 --> 00:34:01,289
you can't do that because from windows

889
00:33:59,459 --> 00:34:02,759
perspective<font color="#CCCCCC"> even though your route it</font>

890
00:34:01,289 --> 00:34:05,908
doesn't care you're still actually

891
00:34:02,759 --> 00:34:07,889
<font color="#CCCCCC">running as that user and all those those</font>

892
00:34:05,909 --> 00:34:10,289
<font color="#E5E5E5">file AP eyes are all still checking the</font>

893
00:34:07,889 --> 00:34:12,058
windows permissions which are which are

894
00:34:10,289 --> 00:34:16,919
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be as the user that you start</font>

895
00:34:12,059 --> 00:34:18,869
<font color="#E5E5E5">at bash as windows access into linux</font>

896
00:34:16,918 --> 00:34:20,279
though is a little bit different so

897
00:34:18,869 --> 00:34:22,470
while you can't<font color="#CCCCCC"> access the root</font>

898
00:34:20,279 --> 00:34:24,569
filesystem you can get a little<font color="#CCCCCC"> bit of</font>

899
00:34:22,469 --> 00:34:27,629
information available from from the

900
00:34:24,569 --> 00:34:29,909
processes you cannot debug any of the

901
00:34:27,629 --> 00:34:31,679
Linux<font color="#E5E5E5"> processes open process fails and</font>

902
00:34:29,909 --> 00:34:33,299
that's because a lot of debuggers all

903
00:34:31,679 --> 00:34:34,710
need to be<font color="#E5E5E5"> able to have extensive access</font>

904
00:34:33,299 --> 00:34:36,359
to the processing to be able<font color="#E5E5E5"> to open</font><font color="#CCCCCC"> it</font>

905
00:34:34,710 --> 00:34:37,679
with like process with all the

906
00:34:36,359 --> 00:34:39,690
permissions to be able<font color="#E5E5E5"> to read virtual</font>

907
00:34:37,679 --> 00:34:41,510
memory right virtual memory create<font color="#E5E5E5"> beds</font>

908
00:34:39,690 --> 00:34:44,190
they need to be<font color="#CCCCCC"> able to do all of that</font>

909
00:34:41,510 --> 00:34:46,529
if you're familiar with the open process

910
00:34:44,190 --> 00:34:48,960
<font color="#CCCCCC">API all the permissions are broken out</font>

911
00:34:46,529 --> 00:34:50,849
and I checked every single one of them

912
00:34:48,960 --> 00:34:54,210
and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> only two that you're able</font><font color="#E5E5E5"> to</font>

913
00:34:50,849 --> 00:34:56,399
open a<font color="#CCCCCC"> Pico process with is the query</font>

914
00:34:54,210 --> 00:34:59,309
limited information and the synchronized

915
00:34:56,399 --> 00:35:00,960
function and so another<font color="#E5E5E5"> thing to point</font>

916
00:34:59,309 --> 00:35:03,990
is like you you're<font color="#E5E5E5"> not going</font><font color="#CCCCCC"> to migrate</font>

917
00:35:00,960 --> 00:35:05,220
into these processes<font color="#E5E5E5"> from from</font>

918
00:35:03,990 --> 00:35:07,950
interpreter meterpreter need to be able

919
00:35:05,220 --> 00:35:10,109
<font color="#E5E5E5">to leverage these api calls in order to</font>

920
00:35:07,950 --> 00:35:12,899
be able to inject itself over it into it

921
00:35:10,109 --> 00:35:15,538
on with the query limited information

922
00:35:12,900 --> 00:35:17,640
and synchronize permissions though you

923
00:35:15,539 --> 00:35:19,230
can do a little<font color="#E5E5E5"> bit of work you can</font>

924
00:35:17,640 --> 00:35:20,788
check to see<font color="#CCCCCC"> that of course the process</font>

925
00:35:19,230 --> 00:35:23,789
is running probably the most useful

926
00:35:20,789 --> 00:35:25,859
thing that you can do however is you can

927
00:35:23,789 --> 00:35:27,900
wait<font color="#CCCCCC"> for the process to</font><font color="#E5E5E5"> exit and you can</font>

928
00:35:25,859 --> 00:35:31,078
<font color="#E5E5E5">immediately get the status code out of</font>

929
00:35:27,900 --> 00:35:34,349
the process<font color="#CCCCCC"> now in</font><font color="#E5E5E5"> Linux when a process</font>

930
00:35:31,079 --> 00:35:37,490
exits the status code is is significant

931
00:35:34,349 --> 00:35:39,440
<font color="#E5E5E5">zero is success and there's a few other</font>

932
00:35:37,490 --> 00:35:41,600
a bunch of<font color="#E5E5E5"> other status codes that mean</font>

933
00:35:39,440 --> 00:35:43,940
different things from resources not

934
00:35:41,600 --> 00:35:45,740
available permission denied user

935
00:35:43,940 --> 00:35:48,230
configuration error things like that<font color="#E5E5E5"> you</font>

936
00:35:45,740 --> 00:35:50,689
can<font color="#CCCCCC"> actually get this exit code out of</font>

937
00:35:48,230 --> 00:35:52,520
the Linux process from the<font color="#CCCCCC"> windows host</font>

938
00:35:50,690 --> 00:35:55,280
by waiting for<font color="#E5E5E5"> the process to exit and</font>

939
00:35:52,520 --> 00:35:58,280
then querying it with that process query

940
00:35:55,280 --> 00:36:00,500
limited information you can<font color="#E5E5E5"> actually get</font>

941
00:35:58,280 --> 00:36:03,160
the<font color="#E5E5E5"> low</font><font color="#CCCCCC"> 8 bits and get the status that</font>

942
00:36:00,500 --> 00:36:06,740
that that process had exited out with

943
00:36:03,160 --> 00:36:08,480
and so<font color="#E5E5E5"> because once again the root</font>

944
00:36:06,740 --> 00:36:10,399
process is still running as the same

945
00:36:08,480 --> 00:36:12,830
<font color="#CCCCCC">windows user you can still do the same</font>

946
00:36:10,400 --> 00:36:14,390
exact stuff for<font color="#E5E5E5"> a process</font><font color="#CCCCCC"> that is</font>

947
00:36:12,830 --> 00:36:16,520
<font color="#E5E5E5">running in the context of Rousseau if</font>

948
00:36:14,390 --> 00:36:20,089
I'm on bash and i start a new instance

949
00:36:16,520 --> 00:36:21,950
of bash as root if my if my account has

950
00:36:20,090 --> 00:36:24,320
<font color="#E5E5E5">been compromised somebody can with my</font>

951
00:36:21,950 --> 00:36:26,390
permissions check and wait for that root

952
00:36:24,320 --> 00:36:28,040
process to exit and get the status<font color="#E5E5E5"> codes</font>

953
00:36:26,390 --> 00:36:29,868
they can tell if it had a segmentation

954
00:36:28,040 --> 00:36:31,490
fault if it wasn't run correctly and

955
00:36:29,869 --> 00:36:33,170
there's a configuration problem anything

956
00:36:31,490 --> 00:36:34,970
along those lines that information is

957
00:36:33,170 --> 00:36:38,840
still exposed to the other windows

958
00:36:34,970 --> 00:36:42,230
processes<font color="#E5E5E5"> okay so on the</font><font color="#CCCCCC"> cross user</font>

959
00:36:38,840 --> 00:36:46,220
access environments of wsl so we're

960
00:36:42,230 --> 00:36:48,230
talking across<font color="#E5E5E5"> windows user access so in</font>

961
00:36:46,220 --> 00:36:49,970
the case of like<font color="#E5E5E5"> server 2012 when</font>

962
00:36:48,230 --> 00:36:54,260
multiple users we<font color="#CCCCCC"> login</font><font color="#E5E5E5"> and things along</font>

963
00:36:49,970 --> 00:36:55,850
those lines if you install wsl as one

964
00:36:54,260 --> 00:36:57,980
user and login as another the

965
00:36:55,850 --> 00:36:59,960
environment is not<font color="#E5E5E5"> there it doesn't</font>

966
00:36:57,980 --> 00:37:01,340
exist you have to<font color="#E5E5E5"> install</font><font color="#CCCCCC"> it again</font><font color="#E5E5E5"> so</font>

967
00:36:59,960 --> 00:37:03,109
it's<font color="#E5E5E5"> going to download all those files</font>

968
00:37:01,340 --> 00:37:06,290
and it's going<font color="#E5E5E5"> to start it up so because</font>

969
00:37:03,109 --> 00:37:07,940
<font color="#CCCCCC">of that you can't if both users</font><font color="#E5E5E5"> are</font>

970
00:37:06,290 --> 00:37:09,950
running<font color="#E5E5E5"> bash at the same time they</font>

971
00:37:07,940 --> 00:37:11,900
cannot communicate to each other the

972
00:37:09,950 --> 00:37:15,069
file systems are isolated it's

973
00:37:11,900 --> 00:37:17,900
effectively a separate user process on

974
00:37:15,070 --> 00:37:20,630
for all intents and purposes there isn't

975
00:37:17,900 --> 00:37:21,920
really<font color="#CCCCCC"> cross contamination there now in</font>

976
00:37:20,630 --> 00:37:23,990
theory<font color="#E5E5E5"> if you were to elevate yourself</font>

977
00:37:21,920 --> 00:37:26,150
up into into system or<font color="#E5E5E5"> something like</font>

978
00:37:23,990 --> 00:37:27,890
that<font color="#CCCCCC"> you could of course migrated over</font>

979
00:37:26,150 --> 00:37:31,280
to that other user and you'd be able<font color="#E5E5E5"> to</font>

980
00:37:27,890 --> 00:37:34,160
do<font color="#CCCCCC"> it</font><font color="#E5E5E5"> from there but from two separate</font>

981
00:37:31,280 --> 00:37:39,020
user levels on the wsl environment is

982
00:37:34,160 --> 00:37:40,339
<font color="#CCCCCC">not is not</font><font color="#E5E5E5"> shared</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> I'm so closing</font>

983
00:37:39,020 --> 00:37:42,380
thoughts when<font color="#E5E5E5"> the last things root</font>

984
00:37:40,340 --> 00:37:44,030
really doesn't mean anything and I'm

985
00:37:42,380 --> 00:37:45,920
definitely guessing that that's going<font color="#CCCCCC"> to</font>

986
00:37:44,030 --> 00:37:47,590
cause problems by users that are

987
00:37:45,920 --> 00:37:50,330
expecting to be able<font color="#E5E5E5"> to leverage the</font>

988
00:37:47,590 --> 00:37:52,550
permissions and the security that

989
00:37:50,330 --> 00:37:54,560
you know<font color="#CCCCCC"> sending</font><font color="#E5E5E5"> a file to use the ER as</font>

990
00:37:52,550 --> 00:37:56,480
owner as rude or anything like that is

991
00:37:54,560 --> 00:37:57,560
expected to provide and I'm going to be

992
00:37:56,480 --> 00:38:00,710
guessing that that's going<font color="#E5E5E5"> to be causing</font>

993
00:37:57,560 --> 00:38:02,360
<font color="#CCCCCC">a problem one of the things that</font><font color="#E5E5E5"> I</font>

994
00:38:00,710 --> 00:38:05,690
forgot<font color="#E5E5E5"> to mention</font><font color="#CCCCCC"> I don't have a slide</font>

995
00:38:02,360 --> 00:38:08,720
on is<font color="#E5E5E5"> actually in that i found</font>

996
00:38:05,690 --> 00:38:10,970
interesting was that the repositories

997
00:38:08,720 --> 00:38:14,480
that are set up so when you run like apt

998
00:38:10,970 --> 00:38:17,120
kid there is no evidence<font color="#E5E5E5"> that Microsoft</font>

999
00:38:14,480 --> 00:38:20,440
has either a certificate installed in

1000
00:38:17,120 --> 00:38:22,160
there and there are no microsoft apt

1001
00:38:20,440 --> 00:38:23,570
repositories in there so when you run

1002
00:38:22,160 --> 00:38:25,490
apt-get update or you're<font color="#CCCCCC"> trying to</font>

1003
00:38:23,570 --> 00:38:27,170
install anything none of<font color="#E5E5E5"> that is</font>

1004
00:38:25,490 --> 00:38:28,700
actually coming<font color="#E5E5E5"> from</font><font color="#CCCCCC"> Microsoft all of</font>

1005
00:38:27,170 --> 00:38:31,400
that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> still coming from canonical like</font>

1006
00:38:28,700 --> 00:38:34,790
you would expect<font color="#E5E5E5"> from a typical ubuntu</font>

1007
00:38:31,400 --> 00:38:36,020
installation one of the last<font color="#E5E5E5"> thing so I</font>

1008
00:38:34,790 --> 00:38:39,080
was doing all this I was looking through

1009
00:38:36,020 --> 00:38:40,310
all of the the windows internals I was

1010
00:38:39,080 --> 00:38:42,620
trying to<font color="#E5E5E5"> find vulnerabilities in the</font>

1011
00:38:40,310 --> 00:38:44,450
wsl and<font color="#E5E5E5"> Microsoft was enough to send me</font>

1012
00:38:42,620 --> 00:38:46,069
this desktop for being in the insider

1013
00:38:44,450 --> 00:38:49,730
program<font color="#E5E5E5"> it has this like sweet ninja cat</font>

1014
00:38:46,070 --> 00:38:51,770
on it so that's pretty cool all of these

1015
00:38:49,730 --> 00:38:53,900
<font color="#E5E5E5">references right here I started this a</font>

1016
00:38:51,770 --> 00:38:56,090
couple<font color="#E5E5E5"> of</font><font color="#CCCCCC"> months ago</font><font color="#E5E5E5"> and I spent a</font><font color="#CCCCCC"> lot</font>

1017
00:38:53,900 --> 00:38:57,560
of time looking<font color="#E5E5E5"> into specifically like</font>

1018
00:38:56,090 --> 00:38:59,570
the system called dispatching

1019
00:38:57,560 --> 00:39:01,610
functionality only for like three weeks

1020
00:38:59,570 --> 00:39:03,290
ago<font color="#E5E5E5"> for Microsoft to implement an entire</font>

1021
00:39:01,610 --> 00:39:05,620
blog that laid it all out and<font color="#E5E5E5"> was</font>

1022
00:39:03,290 --> 00:39:08,029
basically<font color="#E5E5E5"> actually like telling me so</font>

1023
00:39:05,620 --> 00:39:10,220
that was kind of interesting<font color="#CCCCCC"> but at</font>

1024
00:39:08,030 --> 00:39:11,390
least I was I'd already figured all that

1025
00:39:10,220 --> 00:39:13,129
out and there<font color="#CCCCCC"> was no way to really know</font>

1026
00:39:11,390 --> 00:39:14,600
<font color="#E5E5E5">that they would cover all of that those</font>

1027
00:39:13,130 --> 00:39:16,490
are<font color="#E5E5E5"> all my references just about all of</font>

1028
00:39:14,600 --> 00:39:18,500
them are are actually from the<font color="#E5E5E5"> Microsoft</font>

1029
00:39:16,490 --> 00:39:21,080
blog series that they had been been

1030
00:39:18,500 --> 00:39:23,270
doing on this so with that thank you

1031
00:39:21,080 --> 00:39:24,890
<font color="#E5E5E5">very much for</font><font color="#CCCCCC"> your time</font><font color="#E5E5E5"> I'm this topic I</font>

1032
00:39:23,270 --> 00:39:27,820
was really excited to present on and

1033
00:39:24,890 --> 00:39:27,819
thank

1034
00:39:31,900 --> 00:39:44,599
we have plenty of time if anybody has

1035
00:39:35,000 --> 00:39:46,960
<font color="#CCCCCC">any questions anybody nope okay thank</font>

1036
00:39:44,599 --> 00:39:46,960
you everybody

