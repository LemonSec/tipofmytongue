1
00:00:00,170 --> 00:00:09,000
let's let's jump<font color="#CCCCCC"> either talk</font><font color="#E5E5E5"> directly so</font>

2
00:00:03,840 --> 00:00:10,740
who are we I'm routine<font color="#E5E5E5"> Jerry is Alex we</font>

3
00:00:09,000 --> 00:00:15,570
work with the product security team in

4
00:00:10,740 --> 00:00:17,609
citrix and we do not have you no

5
00:00:15,570 --> 00:00:19,859
interest in very high level stuff we<font color="#E5E5E5"> are</font>

6
00:00:17,609 --> 00:00:21,390
pretty<font color="#E5E5E5"> much down to the ground at the</font>

7
00:00:19,859 --> 00:00:23,760
<font color="#E5E5E5">grass root level so we like breaking</font>

8
00:00:21,390 --> 00:00:26,010
into network protocols we like playing

9
00:00:23,760 --> 00:00:28,170
with systems we like playing with

10
00:00:26,010 --> 00:00:31,050
<font color="#E5E5E5">applied crypto that's pretty much all</font>

11
00:00:28,170 --> 00:00:33,950
what<font color="#CCCCCC"> we do right one critical disclaimer</font>

12
00:00:31,050 --> 00:00:36,300
<font color="#E5E5E5">I would like to put any comments or</font>

13
00:00:33,950 --> 00:00:39,000
anything that<font color="#CCCCCC"> I have to say or alex has</font>

14
00:00:36,300 --> 00:00:40,769
to say is all our personal comments

15
00:00:39,000 --> 00:00:43,110
nothing to do with citrix so please

16
00:00:40,770 --> 00:00:45,180
don't blame them for that and I

17
00:00:43,110 --> 00:00:46,980
sometimes<font color="#E5E5E5"> wonder why do organizations do</font>

18
00:00:45,180 --> 00:00:48,629
that because it also<font color="#E5E5E5"> means that the</font>

19
00:00:46,980 --> 00:00:53,640
research is not<font color="#E5E5E5"> even on citrix right</font>

20
00:00:48,629 --> 00:00:55,739
that's kind of when anywhere so today

21
00:00:53,640 --> 00:00:59,219
the agenda is going to be roughly like

22
00:00:55,739 --> 00:01:02,280
this we are<font color="#E5E5E5"> going to start</font><font color="#CCCCCC"> with where</font>

23
00:00:59,219 --> 00:01:05,210
the fuzzing technology and its state is

24
00:01:02,280 --> 00:01:07,590
right we will move on to talking about

25
00:01:05,209 --> 00:01:09,899
<font color="#E5E5E5">some of the modern code coverage based</font>

26
00:01:07,590 --> 00:01:13,290
buzzers AFL being like the top<font color="#CCCCCC"> of the</font>

27
00:01:09,900 --> 00:01:15,689
list so roughly touch AFL<font color="#CCCCCC"> we'll talk</font>

28
00:01:13,290 --> 00:01:17,540
about where what are the what are some

29
00:01:15,689 --> 00:01:19,740
of the<font color="#E5E5E5"> issues we see in AFL and</font>

30
00:01:17,540 --> 00:01:23,880
specifically when you<font color="#CCCCCC"> try and</font><font color="#E5E5E5"> apply that</font>

31
00:01:19,740 --> 00:01:26,280
on the network fuzzing domain and how do

32
00:01:23,880 --> 00:01:28,439
<font color="#E5E5E5">we handle this problem in in this</font>

33
00:01:26,280 --> 00:01:30,450
research so one of the things we will be

34
00:01:28,439 --> 00:01:33,089
talking<font color="#CCCCCC"> about is the definition of gate</font>

35
00:01:30,450 --> 00:01:37,079
functions will come to that when we will

36
00:01:33,090 --> 00:01:39,090
talk about it how can a tracing be done

37
00:01:37,079 --> 00:01:42,779
at a<font color="#CCCCCC"> runtime and that can</font><font color="#E5E5E5"> feed directly</font>

38
00:01:39,090 --> 00:01:44,250
to the fuzzer and we could use that for

39
00:01:42,780 --> 00:01:46,140
optimization so this creation of a

40
00:01:44,250 --> 00:01:49,229
feedback loop we should talk about we

41
00:01:46,140 --> 00:01:51,240
will try and demo you guys a small POC

42
00:01:49,229 --> 00:01:54,149
with<font color="#E5E5E5"> a toy example and then we will try</font>

43
00:01:51,240 --> 00:01:56,880
and<font color="#E5E5E5"> move into a real world example let's</font>

44
00:01:54,149 --> 00:02:02,700
keep that as a surprise you know when

45
00:01:56,880 --> 00:02:05,969
that comes so first thing as we knew it

46
00:02:02,700 --> 00:02:09,069
right so this<font color="#E5E5E5"> is where the whole world</font>

47
00:02:05,969 --> 00:02:11,620
<font color="#E5E5E5">of fuzzing started so</font>

48
00:02:09,068 --> 00:02:14,200
a lot of<font color="#E5E5E5"> people when we started fussing</font>

49
00:02:11,620 --> 00:02:16,930
you know I started fussing something

50
00:02:14,200 --> 00:02:19,749
like a decade back when I used to<font color="#E5E5E5"> be the</font>

51
00:02:16,930 --> 00:02:21,280
semantics and it seemed always like you

52
00:02:19,749 --> 00:02:23,530
know this was<font color="#E5E5E5"> the easy thing to do all</font>

53
00:02:21,280 --> 00:02:25,989
you have to do is to generate a bunch of

54
00:02:23,530 --> 00:02:27,819
random packets send it across to the

55
00:02:25,989 --> 00:02:30,250
demon hopefully it will crash and

56
00:02:27,819 --> 00:02:31,510
something will happen magically and you

57
00:02:30,250 --> 00:02:34,450
will not believe it but that time used

58
00:02:31,510 --> 00:02:36,340
to<font color="#CCCCCC"> happen things have changed a lot so</font>

59
00:02:34,450 --> 00:02:38,738
<font color="#CCCCCC">fussing used to be easy it's not</font><font color="#E5E5E5"> that</font>

60
00:02:36,340 --> 00:02:42,669
easy now specifically if you are

61
00:02:38,739 --> 00:02:44,650
targeting to do a more targeted attacks

62
00:02:42,669 --> 00:02:46,959
you know you want to explore certain

63
00:02:44,650 --> 00:02:48,549
code paths which is not guaranteed<font color="#CCCCCC"> to be</font>

64
00:02:46,959 --> 00:02:51,609
covered by just a randomly generated

65
00:02:48,549 --> 00:02:53,859
string or just adding like thousand 24

66
00:02:51,609 --> 00:02:57,430
is that's why I'm<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to happen now so</font>

67
00:02:53,859 --> 00:03:00,790
as and when we<font color="#E5E5E5"> are trying to target</font>

68
00:02:57,430 --> 00:03:02,739
specific functions like these days we

69
00:03:00,790 --> 00:03:04,120
have seen there are a lot of modular

70
00:03:02,739 --> 00:03:07,840
programming people who are doing

71
00:03:04,120 --> 00:03:09,969
generated code so this already there's

72
00:03:07,840 --> 00:03:11,530
already a framework in place and I need

73
00:03:09,969 --> 00:03:14,739
to add a<font color="#E5E5E5"> new functionality I would just</font>

74
00:03:11,530 --> 00:03:16,090
go ahead and you know use that framework

75
00:03:14,739 --> 00:03:17,799
and generate some additional code and

76
00:03:16,090 --> 00:03:19,180
add it there now if I want to<font color="#E5E5E5"> do a</font>

77
00:03:17,799 --> 00:03:22,359
targeted fuzzing for this thing it's

78
00:03:19,180 --> 00:03:25,509
kind of difficult for me to do<font color="#E5E5E5"> that just</font>

79
00:03:22,359 --> 00:03:28,889
by you know<font color="#E5E5E5"> random packet generation so</font>

80
00:03:25,509 --> 00:03:31,328
another challenge which we face is that

81
00:03:28,889 --> 00:03:33,400
during random pattern generation of by

82
00:03:31,329 --> 00:03:35,849
using generation or mutation or whatever

83
00:03:33,400 --> 00:03:38,829
you end<font color="#E5E5E5"> up having</font><font color="#CCCCCC"> a lot of test cases</font>

84
00:03:35,849 --> 00:03:40,089
lot of packets we just get dropped you

85
00:03:38,829 --> 00:03:44,769
know it really doesn't cross the busy

86
00:03:40,090 --> 00:03:49,229
threshold so doing effective fuzzing

87
00:03:44,769 --> 00:03:51,579
which could actually test the product or

88
00:03:49,229 --> 00:03:53,919
target the vulnerabilities which we

89
00:03:51,579 --> 00:03:59,290
actually want<font color="#E5E5E5"> to be target it is not</font>

90
00:03:53,919 --> 00:04:00,459
trivial it's it's a well in the<font color="#E5E5E5"> world of</font>

91
00:03:59,290 --> 00:04:03,790
fuzzing I think one of the first things

92
00:04:00,459 --> 00:04:05,500
that started happening was when we when

93
00:04:03,790 --> 00:04:07,659
people started researching was look into

94
00:04:05,500 --> 00:04:10,199
file fussing and there is a<font color="#E5E5E5"> lot of focus</font>

95
00:04:07,659 --> 00:04:12,909
which actually went into it so FL

96
00:04:10,199 --> 00:04:14,769
honkers from google some of these are

97
00:04:12,909 --> 00:04:16,750
<font color="#E5E5E5">like pretty strong examples of this area</font>

98
00:04:14,769 --> 00:04:20,590
<font color="#E5E5E5">and I think FL I think I'm personally</font>

99
00:04:16,750 --> 00:04:22,600
very very<font color="#E5E5E5"> impressed with now the ideas</font>

100
00:04:20,589 --> 00:04:26,080
which these guys used

101
00:04:22,600 --> 00:04:28,420
was pretty good unfortunately using them

102
00:04:26,080 --> 00:04:30,219
on network world is getting a little

103
00:04:28,420 --> 00:04:31,540
tricky which<font color="#E5E5E5"> I doing that were not very</font>

104
00:04:30,220 --> 00:04:34,690
successful there was there are some

105
00:04:31,540 --> 00:04:36,280
hacks you could try<font color="#CCCCCC"> not so</font><font color="#E5E5E5"> I think I'll</font>

106
00:04:34,690 --> 00:04:40,750
let Alex talk<font color="#CCCCCC"> about some of</font><font color="#E5E5E5"> those acts</font>

107
00:04:36,280 --> 00:04:44,369
but it's it's tricky in the<font color="#E5E5E5"> network</font>

108
00:04:40,750 --> 00:04:47,410
fuzzing world we were still stuck with

109
00:04:44,370 --> 00:04:49,390
modeling of protocols you know so if I

110
00:04:47,410 --> 00:04:51,730
really want<font color="#E5E5E5"> to write a very exhaustive</font>

111
00:04:49,390 --> 00:04:53,890
good<font color="#CCCCCC"> quality in-depth buzzer first thing</font>

112
00:04:51,730 --> 00:04:55,510
I have<font color="#CCCCCC"> to do is I need to go</font><font color="#E5E5E5"> through a</font>

113
00:04:53,890 --> 00:04:57,510
documentation of the<font color="#E5E5E5"> protocol if it's</font>

114
00:04:55,510 --> 00:05:00,730
available if at all<font color="#E5E5E5"> it's available and</font>

115
00:04:57,510 --> 00:05:05,440
the documentation would be like some 200

116
00:05:00,730 --> 00:05:06,700
pages of PDF file right and<font color="#CCCCCC"> at bunch</font><font color="#E5E5E5"> of</font>

117
00:05:05,440 --> 00:05:07,990
places they will refer to<font color="#E5E5E5"> another</font>

118
00:05:06,700 --> 00:05:11,770
document which is another 200 pages

119
00:05:07,990 --> 00:05:12,730
right frankly I am an engineer<font color="#CCCCCC"> and I</font>

120
00:05:11,770 --> 00:05:14,680
don't have the patience to read through

121
00:05:12,730 --> 00:05:16,330
documents<font color="#CCCCCC"> okay it's a weakness</font><font color="#E5E5E5"> i have</font>

122
00:05:14,680 --> 00:05:19,030
sorry<font color="#E5E5E5"> i am sure many of you</font><font color="#CCCCCC"> share my</font>

123
00:05:16,330 --> 00:05:21,640
weaknesses so it's really difficult for

124
00:05:19,030 --> 00:05:24,640
<font color="#CCCCCC">me</font><font color="#E5E5E5"> to go through and analyze all these</font>

125
00:05:21,640 --> 00:05:26,169
documents right the fuzzer accordingly

126
00:05:24,640 --> 00:05:27,940
and even if<font color="#CCCCCC"> i do that you know I don't</font>

127
00:05:26,170 --> 00:05:30,130
<font color="#E5E5E5">have the guarantee that I am really</font>

128
00:05:27,940 --> 00:05:32,250
covering what I am<font color="#E5E5E5"> expecting to cover am</font>

129
00:05:30,130 --> 00:05:34,719
I really<font color="#E5E5E5"> unearthing the vulnerabilities</font>

130
00:05:32,250 --> 00:05:37,030
so modeling of the protocols this is

131
00:05:34,720 --> 00:05:40,180
still and the network fuzzing in itself

132
00:05:37,030 --> 00:05:41,830
is quite slow because we tend to face

133
00:05:40,180 --> 00:05:44,200
some very practical problems like

134
00:05:41,830 --> 00:05:45,820
synchronization right how do we<font color="#CCCCCC"> know</font>

135
00:05:44,200 --> 00:05:48,310
<font color="#CCCCCC">that when we sent a packet to the server</font>

136
00:05:45,820 --> 00:05:49,930
should<font color="#CCCCCC"> we</font><font color="#E5E5E5"> be except expecting a packet</font>

137
00:05:48,310 --> 00:05:51,970
back should we not be expecting a packet

138
00:05:49,930 --> 00:05:54,070
back not getting a packet does it mean

139
00:05:51,970 --> 00:05:57,730
the server<font color="#CCCCCC"> has crashed you know there's</font>

140
00:05:54,070 --> 00:05:59,950
a lot<font color="#E5E5E5"> of uncertainty so inherently</font>

141
00:05:57,730 --> 00:06:03,310
<font color="#E5E5E5">network fuzzing doesn't go as fast as</font>

142
00:05:59,950 --> 00:06:04,840
file fussing another thing<font color="#CCCCCC"> is that we</font>

143
00:06:03,310 --> 00:06:07,000
have all we always have a need for

144
00:06:04,840 --> 00:06:09,010
setting up an agent which sits on the

145
00:06:07,000 --> 00:06:11,020
server side which can keep detecting the

146
00:06:09,010 --> 00:06:12,909
crashes do some sort of logging to

147
00:06:11,020 --> 00:06:15,039
identify what crashed where what

148
00:06:12,910 --> 00:06:19,270
happened it's so<font color="#E5E5E5"> that is also another</font>

149
00:06:15,040 --> 00:06:20,920
<font color="#CCCCCC">shallow G always face bottom line when</font>

150
00:06:19,270 --> 00:06:23,260
it comes to a<font color="#CCCCCC"> 600-page of documentation</font>

151
00:06:20,920 --> 00:06:26,560
of the protocol we always<font color="#CCCCCC"> end up doing a</font>

152
00:06:23,260 --> 00:06:28,150
blind fuzzing add best we will take

153
00:06:26,560 --> 00:06:29,530
stuff from the Wireshark we will take

154
00:06:28,150 --> 00:06:31,450
the packet we will do some mutation and

155
00:06:29,530 --> 00:06:34,059
we'll send<font color="#CCCCCC"> it across little</font><font color="#E5E5E5"> less line</font>

156
00:06:31,450 --> 00:06:35,900
all right but<font color="#E5E5E5"> not not very great so</font><font color="#CCCCCC"> it's</font>

157
00:06:34,060 --> 00:06:39,530
<font color="#CCCCCC">like with some some specs</font>

158
00:06:35,900 --> 00:06:45,049
I don't know what is interesting to know

159
00:06:39,530 --> 00:06:46,549
to see is that<font color="#CCCCCC"> network stack still</font>

160
00:06:45,050 --> 00:06:48,169
happens to be the<font color="#E5E5E5"> target of choice there</font>

161
00:06:46,550 --> 00:06:50,270
are still so many network protocols out

162
00:06:48,169 --> 00:06:52,250
there so many ports opened on so many

163
00:06:50,270 --> 00:06:54,560
places and we still want to break<font color="#CCCCCC"> that</font>

164
00:06:52,250 --> 00:06:55,940
right so what we are<font color="#E5E5E5"> looking for</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a</font>

165
00:06:54,560 --> 00:07:01,160
little<font color="#CCCCCC"> more balance on the network side</font>

166
00:06:55,940 --> 00:07:03,740
and not just on the file side so just

167
00:07:01,160 --> 00:07:05,930
<font color="#CCCCCC">trying to sum up things so historically</font>

168
00:07:03,740 --> 00:07:08,120
what<font color="#E5E5E5"> we have seen is there have been</font>

169
00:07:05,930 --> 00:07:09,680
high usually<font color="#CCCCCC"> too kind of approaches</font>

170
00:07:08,120 --> 00:07:11,240
which have been most successful you

171
00:07:09,680 --> 00:07:14,360
either do random white flight about bite

172
00:07:11,240 --> 00:07:15,949
flips with some sort<font color="#E5E5E5"> of mutation like</font>

173
00:07:14,360 --> 00:07:19,639
what peach turns or you could do some

174
00:07:15,949 --> 00:07:21,380
modeling of the actual protocol again

175
00:07:19,639 --> 00:07:25,030
what you can use any other frameworks to

176
00:07:21,380 --> 00:07:28,340
do bottom line you end up running

177
00:07:25,030 --> 00:07:33,289
millions of packets and all you feel is

178
00:07:28,340 --> 00:07:35,690
that<font color="#CCCCCC"> yes I have run like say 100,000</font>

179
00:07:33,289 --> 00:07:37,639
test cases and I could go<font color="#CCCCCC"> and tell my VP</font>

180
00:07:35,690 --> 00:07:39,830
that you know what I did this<font color="#E5E5E5"> maybe my</font>

181
00:07:37,639 --> 00:07:42,139
vb feels good about it that yes you have

182
00:07:39,830 --> 00:07:44,840
you have withstood 24 hours of forcing

183
00:07:42,139 --> 00:07:51,530
without crashing and yes the product is

184
00:07:44,840 --> 00:07:54,198
secure is it really well we'll see so I

185
00:07:51,530 --> 00:07:56,780
let Alex take over from here and talk

186
00:07:54,199 --> 00:08:01,460
about some of the recent advances and

187
00:07:56,780 --> 00:08:04,010
what we are<font color="#E5E5E5"> doing something so yeah i'll</font>

188
00:08:01,460 --> 00:08:08,750
be<font color="#E5E5E5"> talking a bit about how we do fuzzing</font>

189
00:08:04,010 --> 00:08:11,440
today mostly you guys hear me yeah<font color="#CCCCCC"> i</font>

190
00:08:08,750 --> 00:08:11,440
think just turn on

191
00:08:14,680 --> 00:08:31,280
sure so yeah<font color="#E5E5E5"> so I'll talk</font><font color="#CCCCCC"> about how we</font>

192
00:08:29,240 --> 00:08:32,419
do you know fuzzing today and then you

193
00:08:31,280 --> 00:08:34,010
know the improvements which have been

194
00:08:32,419 --> 00:08:35,809
made over you know what MJ was talking

195
00:08:34,010 --> 00:08:38,750
about you know the blind protocol

196
00:08:35,809 --> 00:08:41,809
fuzzing just flipping bits so you know

197
00:08:38,750 --> 00:08:43,610
today you know there's been<font color="#E5E5E5"> some</font>

198
00:08:41,809 --> 00:08:45,709
concepts introduced in fuzzing you know

199
00:08:43,610 --> 00:08:49,130
through genetic algorithms basically

200
00:08:45,710 --> 00:08:50,930
where you know the idea<font color="#CCCCCC"> is you want</font><font color="#E5E5E5"> to</font>

201
00:08:49,130 --> 00:08:54,110
retain only the best input and you want

202
00:08:50,930 --> 00:08:57,530
to be able to measure how much impact an

203
00:08:54,110 --> 00:08:59,900
input has on your<font color="#E5E5E5"> target right so today</font>

204
00:08:57,530 --> 00:09:01,670
we're capable of knowing<font color="#CCCCCC"> that when you</font>

205
00:08:59,900 --> 00:09:03,980
send a particular input you're going to

206
00:09:01,670 --> 00:09:05,479
know the effect it has on your target

207
00:09:03,980 --> 00:09:08,540
binary right you're<font color="#E5E5E5"> going to know if</font>

208
00:09:05,480 --> 00:09:10,310
it's valuable or not and you know

209
00:09:08,540 --> 00:09:11,839
through these genetic algorithms

210
00:09:10,310 --> 00:09:13,849
basically you're going to elect

211
00:09:11,840 --> 00:09:17,300
basically a bunch of species of inputs

212
00:09:13,850 --> 00:09:19,460
which are you know the best portions of

213
00:09:17,300 --> 00:09:22,040
inputs that you have to play against

214
00:09:19,460 --> 00:09:24,800
your targets so you know<font color="#E5E5E5"> the general</font>

215
00:09:22,040 --> 00:09:27,410
idea is that you mutate your best set of

216
00:09:24,800 --> 00:09:29,060
inputs you send them to the target<font color="#E5E5E5"> and</font>

217
00:09:27,410 --> 00:09:30,890
then you measure you know what's called

218
00:09:29,060 --> 00:09:32,689
fitness based on some heuristic i'll

219
00:09:30,890 --> 00:09:34,790
talk about soon which<font color="#E5E5E5"> basically gives</font>

220
00:09:32,690 --> 00:09:36,950
you feedback is<font color="#CCCCCC"> this simple valuable yes</font>

221
00:09:34,790 --> 00:09:39,650
no and basically you take a decision

222
00:09:36,950 --> 00:09:42,560
further based on this<font color="#E5E5E5"> right and then you</font>

223
00:09:39,650 --> 00:09:44,870
discard or prioritize the input so now

224
00:09:42,560 --> 00:09:47,329
we live in a<font color="#CCCCCC"> world for you know file</font>

225
00:09:44,870 --> 00:09:49,160
format fuzzing and and you<font color="#CCCCCC"> know to some</font>

226
00:09:47,330 --> 00:09:51,710
extent<font color="#E5E5E5"> network simple</font><font color="#CCCCCC"> network fuzzing</font>

227
00:09:49,160 --> 00:09:53,689
where you know basically<font color="#E5E5E5"> how valuable</font>

228
00:09:51,710 --> 00:09:55,760
your input<font color="#CCCCCC"> is to the target</font><font color="#E5E5E5"> right which</font>

229
00:09:53,690 --> 00:09:59,690
is<font color="#E5E5E5"> fantastic basically because you're</font>

230
00:09:55,760 --> 00:10:02,600
<font color="#E5E5E5">not blind fuzzing anymore so generally</font>

231
00:09:59,690 --> 00:10:04,070
<font color="#E5E5E5">what what fitness function can use you</font>

232
00:10:02,600 --> 00:10:07,490
know the<font color="#E5E5E5"> general use one is code</font>

233
00:10:04,070 --> 00:10:09,290
coverage right so why why because

234
00:10:07,490 --> 00:10:11,480
basically you<font color="#CCCCCC"> know code coverage tells</font>

235
00:10:09,290 --> 00:10:13,219
you exactly you know what are the extra

236
00:10:11,480 --> 00:10:15,380
pass that you've triggered based on your

237
00:10:13,220 --> 00:10:18,590
input right so<font color="#CCCCCC"> basically it tells you</font>

238
00:10:15,380 --> 00:10:20,150
how good it is all bad it is for for

239
00:10:18,590 --> 00:10:21,939
<font color="#E5E5E5">your target how much code it has</font>

240
00:10:20,150 --> 00:10:24,489
executed based on that input

241
00:10:21,939 --> 00:10:26,829
right and so most of the<font color="#E5E5E5"> tools out there</font>

242
00:10:24,489 --> 00:10:29,619
are able to measure code coverage right

243
00:10:26,829 --> 00:10:32,649
and that heuristic allows us<font color="#CCCCCC"> Calise take</font>

244
00:10:29,619 --> 00:10:34,989
a good or bad<font color="#E5E5E5"> decision you know based on</font>

245
00:10:32,649 --> 00:10:38,439
historical data so<font color="#E5E5E5"> you know you can</font>

246
00:10:34,989 --> 00:10:40,419
achieve this you know by doing by binary

247
00:10:38,439 --> 00:10:42,759
instrumentation through pain or dynamic

248
00:10:40,419 --> 00:10:44,319
REO we took the option of using<font color="#CCCCCC"> pen for</font>

249
00:10:42,759 --> 00:10:46,689
this you<font color="#E5E5E5"> can do a bunch of static</font>

250
00:10:44,319 --> 00:10:48,009
rewriting<font color="#E5E5E5"> Colonel probing or to some</font>

251
00:10:46,689 --> 00:10:54,069
extent even the hardware can<font color="#E5E5E5"> do it now</font>

252
00:10:48,009 --> 00:10:55,749
today so how does this<font color="#CCCCCC"> work so the mayor</font>

253
00:10:54,069 --> 00:10:57,969
of the general idea is that you're<font color="#E5E5E5"> gonna</font>

254
00:10:55,749 --> 00:10:59,319
model control flow using basic blocks

255
00:10:57,970 --> 00:11:01,599
right so if you<font color="#E5E5E5"> guys have open either</font>

256
00:10:59,319 --> 00:11:03,819
<font color="#CCCCCC">Pro wider you know you're going</font><font color="#E5E5E5"> to have</font>

257
00:11:01,599 --> 00:11:05,589
a graph with a bunch of blocks right so

258
00:11:03,819 --> 00:11:07,539
the idea<font color="#E5E5E5"> is you do exactly the same</font>

259
00:11:05,589 --> 00:11:10,109
thing at runtime<font color="#E5E5E5"> all right so</font><font color="#CCCCCC"> you're</font>

260
00:11:07,539 --> 00:11:13,359
going to disassemble and no and

261
00:11:10,109 --> 00:11:16,439
basically you know how all blocks of

262
00:11:13,359 --> 00:11:21,249
code which do not modify control flow

263
00:11:16,439 --> 00:11:25,449
segregated right so this tells you and

264
00:11:21,249 --> 00:11:26,889
then what<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to do is count the</font>

265
00:11:25,449 --> 00:11:29,409
number of edges<font color="#CCCCCC"> you have between those</font>

266
00:11:26,889 --> 00:11:31,299
basic blocks right so if you see the

267
00:11:29,409 --> 00:11:32,889
orange arrow I put there that's a

268
00:11:31,299 --> 00:11:34,149
transition from one basic block to

269
00:11:32,889 --> 00:11:35,769
another meaning there was a change in

270
00:11:34,149 --> 00:11:36,970
control flow which means that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font>

271
00:11:35,769 --> 00:11:38,559
in a programming language and if

272
00:11:36,970 --> 00:11:41,949
statement has been<font color="#E5E5E5"> taken or something</font>

273
00:11:38,559 --> 00:11:43,929
<font color="#E5E5E5">like this right and so the thing is when</font>

274
00:11:41,949 --> 00:11:47,159
you retain the edge count between basic

275
00:11:43,929 --> 00:11:49,539
blocks it gives you a big set of

276
00:11:47,159 --> 00:11:51,669
unordered code coverage map right and

277
00:11:49,539 --> 00:11:54,249
the thing is with sets it's that they

278
00:11:51,669 --> 00:11:57,029
can easily be compared so you've got

279
00:11:54,249 --> 00:11:59,289
this gigantic set based on your input of

280
00:11:57,029 --> 00:12:01,089
what code coverage has been achieved<font color="#E5E5E5"> and</font>

281
00:11:59,289 --> 00:12:04,019
that's in the set which you can<font color="#E5E5E5"> easily</font>

282
00:12:01,089 --> 00:12:04,019
compare right

283
00:12:04,639 --> 00:12:08,459
so most of these evolutions come from

284
00:12:07,079 --> 00:12:11,130
way back but all this was kind of

285
00:12:08,459 --> 00:12:16,410
industrialized through through AFL right

286
00:12:11,130 --> 00:12:18,389
so again AFL is amazing<font color="#E5E5E5"> right an amazing</font>

287
00:12:16,410 --> 00:12:20,880
tool you know it's a battery included

288
00:12:18,389 --> 00:12:23,730
fuzzer so takes care of all the building

289
00:12:20,880 --> 00:12:25,350
all the you know instrumentation the

290
00:12:23,730 --> 00:12:27,089
minimization of the corpus and all this

291
00:12:25,350 --> 00:12:29,040
kind of stuff<font color="#E5E5E5"> so it's just brilliant</font>

292
00:12:27,089 --> 00:12:31,050
right because<font color="#E5E5E5"> it's got this perfect</font>

293
00:12:29,040 --> 00:12:32,399
balance between you know using<font color="#E5E5E5"> the power</font>

294
00:12:31,050 --> 00:12:34,079
of<font color="#CCCCCC"> the build system you know through</font>

295
00:12:32,399 --> 00:12:36,420
make or<font color="#E5E5E5"> see make or whatever you want</font>

296
00:12:34,079 --> 00:12:37,589
you know speed you know through the<font color="#E5E5E5"> fork</font>

297
00:12:36,420 --> 00:12:40,019
server and all this stuff and through

298
00:12:37,589 --> 00:12:42,569
functionality the only caveat it has is

299
00:12:40,019 --> 00:12:44,970
that<font color="#CCCCCC"> basically AFL by design is meant to</font>

300
00:12:42,569 --> 00:12:46,920
compare traces across runs right so it

301
00:12:44,970 --> 00:12:49,889
means that<font color="#E5E5E5"> you run your target once</font>

302
00:12:46,920 --> 00:12:52,319
twice you know until end times<font color="#E5E5E5"> and the</font>

303
00:12:49,889 --> 00:12:55,319
map comparison happens when the target

304
00:12:52,319 --> 00:12:59,939
exits right so the comparison happens

305
00:12:55,319 --> 00:13:01,349
across eggs<font color="#E5E5E5"> X so this means that for</font>

306
00:12:59,940 --> 00:13:03,000
<font color="#CCCCCC">Network demons it's a bit more</font>

307
00:13:01,350 --> 00:13:06,089
complicated right and<font color="#E5E5E5"> I'll talk about it</font>

308
00:13:03,000 --> 00:13:08,550
a bit later<font color="#E5E5E5"> also FL has to get its data</font>

309
00:13:06,089 --> 00:13:10,589
off<font color="#E5E5E5"> STD in or for file descriptor right</font>

310
00:13:08,550 --> 00:13:16,889
which is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> directly passed into the</font>

311
00:13:10,589 --> 00:13:18,389
<font color="#CCCCCC">target so again</font><font color="#E5E5E5"> I'll talk</font><font color="#CCCCCC"> about the</font>

312
00:13:16,889 --> 00:13:20,040
limitations we try to address but you

313
00:13:18,389 --> 00:13:22,019
know if you understand what<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> just</font>

314
00:13:20,040 --> 00:13:24,029
<font color="#CCCCCC">talking about</font><font color="#E5E5E5"> a second ago you</font><font color="#CCCCCC"> know the</font>

315
00:13:22,019 --> 00:13:25,769
requirement<font color="#CCCCCC"> that your target has to exit</font>

316
00:13:24,029 --> 00:13:28,829
<font color="#E5E5E5">can be complicated basically for Network</font>

317
00:13:25,769 --> 00:13:30,630
demons so again if you've got source

318
00:13:28,829 --> 00:13:32,550
codes you know again we're not trying to

319
00:13:30,630 --> 00:13:33,689
replace what effort has done because

320
00:13:32,550 --> 00:13:35,639
it's still the best option out there

321
00:13:33,689 --> 00:13:37,110
right if you have source code just<font color="#E5E5E5"> get</font>

322
00:13:35,639 --> 00:13:38,519
it to work on packets right you can do

323
00:13:37,110 --> 00:13:40,500
it it's a lot of<font color="#CCCCCC"> work</font><font color="#E5E5E5"> you basically have</font>

324
00:13:38,519 --> 00:13:43,620
to write some code<font color="#CCCCCC"> write some rappers</font>

325
00:13:40,500 --> 00:13:45,480
right handle most of the state you know

326
00:13:43,620 --> 00:13:46,649
make it make<font color="#CCCCCC"> sure it exits after its</font>

327
00:13:45,480 --> 00:13:49,259
main event loop and all this kind of

328
00:13:46,649 --> 00:13:51,839
stuff it's not<font color="#E5E5E5"> pretty but but it can</font>

329
00:13:49,259 --> 00:13:54,630
work right the problem is if you've got

330
00:13:51,839 --> 00:13:56,639
very tight coupling between the codes

331
00:13:54,630 --> 00:13:58,589
basically which handles<font color="#CCCCCC"> network</font><font color="#E5E5E5"> packets</font>

332
00:13:56,639 --> 00:14:00,360
and pausing you're going to have to stub

333
00:13:58,589 --> 00:14:03,209
out a whole bunch of stuff right<font color="#E5E5E5"> by</font>

334
00:14:00,360 --> 00:14:05,250
stubbing out<font color="#E5E5E5"> I mean that all the network</font>

335
00:14:03,209 --> 00:14:07,229
cause you're<font color="#E5E5E5"> going to have to mock in a</font>

336
00:14:05,250 --> 00:14:08,819
sense right meaning<font color="#CCCCCC"> that you have you're</font>

337
00:14:07,230 --> 00:14:11,430
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have to LD preload stuff which</font>

338
00:14:08,819 --> 00:14:13,139
means redefine the way that wreck<font color="#E5E5E5"> V for</font>

339
00:14:11,430 --> 00:14:14,459
example works read and write and accept

340
00:14:13,139 --> 00:14:16,590
and all this kind of stuff and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

341
00:14:14,459 --> 00:14:18,209
you know<font color="#E5E5E5"> pre-need</font><font color="#CCCCCC"> Uzza if you guys have</font>

342
00:14:16,590 --> 00:14:25,530
with it or you can use a bunch of

343
00:14:18,210 --> 00:14:27,750
linkage of a linker trips tricks so all

344
00:14:25,530 --> 00:14:29,910
this basically to say that<font color="#CCCCCC"> like you know</font>

345
00:14:27,750 --> 00:14:32,760
for<font color="#CCCCCC"> network demons what we'd like is you</font>

346
00:14:29,910 --> 00:14:35,339
know to<font color="#E5E5E5"> keep the successful AFL concepts</font>

347
00:14:32,760 --> 00:14:36,780
or the genetic algorithm concepts you

348
00:14:35,340 --> 00:14:39,960
know as well<font color="#CCCCCC"> as the code coverage</font>

349
00:14:36,780 --> 00:14:42,089
feedback but avoid restarting the target

350
00:14:39,960 --> 00:14:46,020
right because this<font color="#E5E5E5"> would allow to get</font>

351
00:14:42,090 --> 00:14:48,440
these maps at runtime right the thing is

352
00:14:46,020 --> 00:14:51,810
it breaks the deterministic nature of FL

353
00:14:48,440 --> 00:14:53,820
so again you know we<font color="#E5E5E5"> want to improve</font>

354
00:14:51,810 --> 00:14:55,439
upon<font color="#CCCCCC"> the traditional</font><font color="#E5E5E5"> fuzzy you know so</font>

355
00:14:53,820 --> 00:14:56,790
break<font color="#CCCCCC"> the cycle of like I'm going</font><font color="#E5E5E5"> to</font>

356
00:14:55,440 --> 00:14:58,380
send a packet and I'm going<font color="#E5E5E5"> to then</font>

357
00:14:56,790 --> 00:14:59,880
probe to know if my target has crashed

358
00:14:58,380 --> 00:15:02,430
or I'm going to<font color="#E5E5E5"> ask my agent no it's</font>

359
00:14:59,880 --> 00:15:03,870
crashed which is quite slow and you know

360
00:15:02,430 --> 00:15:07,890
by borrowing all the advanced<font color="#CCCCCC"> features</font>

361
00:15:03,870 --> 00:15:09,330
from from feedback driven buzzers again

362
00:15:07,890 --> 00:15:11,220
you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to do this during</font><font color="#CCCCCC"> runtime and</font>

363
00:15:09,330 --> 00:15:18,060
<font color="#E5E5E5">without the sport responding the target</font>

364
00:15:11,220 --> 00:15:19,410
between inputs right so<font color="#E5E5E5"> our approach we</font>

365
00:15:18,060 --> 00:15:21,209
did a bit of work<font color="#E5E5E5"> around this and we</font>

366
00:15:19,410 --> 00:15:25,530
tried to at least start working on this

367
00:15:21,210 --> 00:15:27,660
problem so it comes basically we we you

368
00:15:25,530 --> 00:15:29,579
know we observed and just thought about

369
00:15:27,660 --> 00:15:32,730
<font color="#E5E5E5">how you know network demons work right</font>

370
00:15:29,580 --> 00:15:34,950
so generally they're going to do a whole

371
00:15:32,730 --> 00:15:36,240
<font color="#CCCCCC">bunch of startup stuff which you don't</font>

372
00:15:34,950 --> 00:15:38,220
really<font color="#E5E5E5"> care about right it's going to</font>

373
00:15:36,240 --> 00:15:39,690
read a config file to initialize a bunch

374
00:15:38,220 --> 00:15:42,690
<font color="#E5E5E5">of</font><font color="#CCCCCC"> stuff and</font><font color="#E5E5E5"> all these things right and</font>

375
00:15:39,690 --> 00:15:45,090
then it's<font color="#E5E5E5"> just going to wait for corn</font>

376
00:15:42,690 --> 00:15:47,490
right so it's going to hang on an accept

377
00:15:45,090 --> 00:15:50,010
call or you know something different for

378
00:15:47,490 --> 00:15:53,100
UDP and then it's going<font color="#E5E5E5"> to basically</font>

379
00:15:50,010 --> 00:15:54,420
read read and input and from there it's

380
00:15:53,100 --> 00:15:56,190
going<font color="#E5E5E5"> to get a buffer</font><font color="#CCCCCC"> of bytes is going</font>

381
00:15:54,420 --> 00:15:57,449
to want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> work on and pass it to make</font>

382
00:15:56,190 --> 00:16:00,000
sense<font color="#E5E5E5"> of the protocol and what's</font>

383
00:15:57,450 --> 00:16:01,740
happening<font color="#E5E5E5"> right and based on that</font>

384
00:16:00,000 --> 00:16:03,450
<font color="#CCCCCC">parsing is going to take a decision</font><font color="#E5E5E5"> you</font>

385
00:16:01,740 --> 00:16:06,210
know right back something out to the

386
00:16:03,450 --> 00:16:10,710
socket you know an error or some some

387
00:16:06,210 --> 00:16:12,480
validation so in this context basically

388
00:16:10,710 --> 00:16:15,930
you know what code coverage you exactly

389
00:16:12,480 --> 00:16:17,940
care about well you can kind of simplify

390
00:16:15,930 --> 00:16:19,439
this and discard everything all the

391
00:16:17,940 --> 00:16:22,140
initialisation stuff just chuck it out

392
00:16:19,440 --> 00:16:24,360
the door<font color="#CCCCCC"> i doesn't matter but the</font>

393
00:16:22,140 --> 00:16:26,010
interesting stuff general you happens

394
00:16:24,360 --> 00:16:27,560
between the first read on the network

395
00:16:26,010 --> 00:16:32,120
and

396
00:16:27,560 --> 00:16:33,770
right right so the whole idea here we're

397
00:16:32,120 --> 00:16:35,660
going<font color="#E5E5E5"> to talk about is can you get those</font>

398
00:16:33,770 --> 00:16:39,949
code coverage maps triggered<font color="#CCCCCC"> during</font>

399
00:16:35,660 --> 00:16:41,689
their specific<font color="#CCCCCC"> sis course so to</font>

400
00:16:39,950 --> 00:16:43,460
generalize this you can call you know

401
00:16:41,690 --> 00:16:47,150
you can call these read and write

402
00:16:43,460 --> 00:16:50,300
syscalls you know gates right when when

403
00:16:47,150 --> 00:16:52,819
<font color="#CCCCCC">you enter a gate siskel you'll start the</font>

404
00:16:50,300 --> 00:16:55,400
tracing right and when you exit the gate

405
00:16:52,820 --> 00:16:57,200
you stop the trace so the idea<font color="#E5E5E5"> is that</font>

406
00:16:55,400 --> 00:16:59,420
you're going to<font color="#E5E5E5"> monitor a bunch of</font>

407
00:16:57,200 --> 00:17:01,279
syscalls at<font color="#E5E5E5"> runtime and when you hit one</font>

408
00:16:59,420 --> 00:17:03,800
you<font color="#E5E5E5"> start the trace when you exit one</font>

409
00:17:01,279 --> 00:17:05,150
you stop the trace and the<font color="#CCCCCC"> idea is</font>

410
00:17:03,800 --> 00:17:06,800
you're going<font color="#E5E5E5"> to dump that trace and give</font>

411
00:17:05,150 --> 00:17:08,480
it back to whoever consumes it you know

412
00:17:06,800 --> 00:17:10,339
fuzzy reverse engineering stuff or

413
00:17:08,480 --> 00:17:12,319
whatever it<font color="#CCCCCC"> doesn't matter right and you</font>

414
00:17:10,339 --> 00:17:14,389
transfer that code coverage back to the

415
00:17:12,319 --> 00:17:16,280
decision maker right which can take then

416
00:17:14,390 --> 00:17:21,380
an intelligent decision based on this

417
00:17:16,280 --> 00:17:22,910
code coverage data so again you can you

418
00:17:21,380 --> 00:17:27,410
can generalize this a bit<font color="#E5E5E5"> further right</font>

419
00:17:22,910 --> 00:17:28,760
you can so the<font color="#E5E5E5"> idea again is all</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

420
00:17:27,410 --> 00:17:30,020
only about code coverage what we don't

421
00:17:28,760 --> 00:17:33,890
bother about all the fuzzing stuff

422
00:17:30,020 --> 00:17:37,129
because the the mutation can be done by

423
00:17:33,890 --> 00:17:39,050
anyone at any time<font color="#E5E5E5"> and so so based on</font>

424
00:17:37,130 --> 00:17:41,630
the defined gate<font color="#E5E5E5"> siskel you know say X</font>

425
00:17:39,050 --> 00:17:43,550
or Y you can again when you hit X

426
00:17:41,630 --> 00:17:45,620
trigger code coverage when<font color="#CCCCCC"> you when you</font>

427
00:17:43,550 --> 00:17:47,810
<font color="#E5E5E5">hit why stop it and then dump the trace</font>

428
00:17:45,620 --> 00:17:49,669
so this can<font color="#CCCCCC"> be achieved pretty much for</font>

429
00:17:47,810 --> 00:17:56,300
any siskel out there which has a

430
00:17:49,670 --> 00:17:58,670
relation right so this thousand feet

431
00:17:56,300 --> 00:18:02,419
view of this is you want<font color="#E5E5E5"> to only track</font>

432
00:17:58,670 --> 00:18:04,970
file descriptors right<font color="#E5E5E5"> because they're</font>

433
00:18:02,420 --> 00:18:07,100
<font color="#CCCCCC">the ones who tell you when the data is</font>

434
00:18:04,970 --> 00:18:08,570
valuable you want to ignore<font color="#E5E5E5"> right all</font>

435
00:18:07,100 --> 00:18:10,219
the i/o happening so you don't want to

436
00:18:08,570 --> 00:18:11,899
care you<font color="#E5E5E5"> don't want to start tracing</font>

437
00:18:10,220 --> 00:18:14,030
when something reads a file or in some

438
00:18:11,900 --> 00:18:15,650
<font color="#E5E5E5">things like</font><font color="#CCCCCC"> that you want to generate</font>

439
00:18:14,030 --> 00:18:19,040
the<font color="#E5E5E5"> hit map at runtime only when the</font>

440
00:18:15,650 --> 00:18:21,100
gate<font color="#CCCCCC"> syscall at our hits right and again</font>

441
00:18:19,040 --> 00:18:24,678
as I said<font color="#E5E5E5"> dump it to the fuzzer further</font>

442
00:18:21,100 --> 00:18:26,780
so<font color="#E5E5E5"> I'll take the example of TCP here and</font>

443
00:18:24,679 --> 00:18:30,230
how you can filter<font color="#E5E5E5"> file descriptors for</font>

444
00:18:26,780 --> 00:18:32,629
<font color="#E5E5E5">TCP right so you know the except sis</font>

445
00:18:30,230 --> 00:18:34,220
call it basically returns a file

446
00:18:32,630 --> 00:18:35,890
descriptor right that is then going to

447
00:18:34,220 --> 00:18:38,179
<font color="#E5E5E5">be used further for read and rights etc</font>

448
00:18:35,890 --> 00:18:40,460
this<font color="#E5E5E5"> is called layer so</font>

449
00:18:38,179 --> 00:18:42,379
if you hook into the<font color="#CCCCCC"> syscalls and just</font>

450
00:18:40,460 --> 00:18:44,779
look for anything for the accept and

451
00:18:42,379 --> 00:18:46,459
instrument it and get the<font color="#CCCCCC"> return value</font>

452
00:18:44,779 --> 00:18:47,960
of<font color="#CCCCCC"> except basically you can build a list</font>

453
00:18:46,460 --> 00:18:50,259
of file descriptors you're interested in

454
00:18:47,960 --> 00:18:54,649
without polluting that list with stuff

455
00:18:50,259 --> 00:18:56,029
from IO the<font color="#E5E5E5"> IO layer right and so then</font>

456
00:18:54,649 --> 00:18:57,889
you've got that list of file descriptors

457
00:18:56,029 --> 00:18:59,090
which you know<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> network and</font>

458
00:18:57,889 --> 00:19:01,639
which you're probably going to<font color="#E5E5E5"> be</font>

459
00:18:59,090 --> 00:19:04,369
interested in and then<font color="#E5E5E5"> you also</font>

460
00:19:01,639 --> 00:19:06,199
instrument read and write and you<font color="#CCCCCC"> figure</font>

461
00:19:04,369 --> 00:19:07,549
<font color="#CCCCCC">out when</font><font color="#E5E5E5"> read you know</font><font color="#CCCCCC"> receives the</font>

462
00:19:06,200 --> 00:19:09,080
argument of the<font color="#E5E5E5"> file descriptor which is</font>

463
00:19:07,549 --> 00:19:11,269
in your list then start the trace and

464
00:19:09,080 --> 00:19:12,678
when you hit right just ditch the<font color="#E5E5E5"> trace</font>

465
00:19:11,269 --> 00:19:14,539
right so here I've<font color="#CCCCCC"> got a silly example</font>

466
00:19:12,679 --> 00:19:16,129
right where file descriptor six is good

467
00:19:14,539 --> 00:19:18,679
for tracing and nine probably comes from

468
00:19:16,129 --> 00:19:23,389
though you know the<font color="#CCCCCC"> IO layer and we just</font>

469
00:19:18,679 --> 00:19:25,940
junk it right so another interesting

470
00:19:23,389 --> 00:19:28,668
point about this kind of gated<font color="#CCCCCC"> siskel</font>

471
00:19:25,940 --> 00:19:31,399
analysis is that you're covered<font color="#E5E5E5"> maps</font>

472
00:19:28,669 --> 00:19:33,830
<font color="#E5E5E5">upper read/write gate</font><font color="#CCCCCC"> all right so if</font>

473
00:19:31,399 --> 00:19:35,178
you've got<font color="#CCCCCC"> a connection which has you</font>

474
00:19:33,830 --> 00:19:36,559
know many gates which is generally the

475
00:19:35,179 --> 00:19:38,539
<font color="#E5E5E5">case where you have a bunch of exchange</font>

476
00:19:36,559 --> 00:19:40,039
<font color="#E5E5E5">and you can have a reader and then right</font>

477
00:19:38,539 --> 00:19:42,249
back and then a<font color="#CCCCCC"> ping pong kind of you</font>

478
00:19:40,039 --> 00:19:45,230
know<font color="#CCCCCC"> exchange for the protocol to happen</font>

479
00:19:42,249 --> 00:19:47,480
well you can get the coverage map for

480
00:19:45,230 --> 00:19:50,029
each gate meaning<font color="#E5E5E5"> that you can enter the</font>

481
00:19:47,480 --> 00:19:52,220
protocol at different layers at

482
00:19:50,029 --> 00:19:55,330
different points in time and get the

483
00:19:52,220 --> 00:19:57,889
coverage map for<font color="#CCCCCC"> that specific packet</font>

484
00:19:55,330 --> 00:19:59,178
but it also has if you remember what<font color="#E5E5E5"> I</font>

485
00:19:57,889 --> 00:20:01,008
said is that you know those code

486
00:19:59,179 --> 00:20:02,840
coverage maps their sets basically right

487
00:20:01,009 --> 00:20:04,220
so you<font color="#E5E5E5"> can also aggregate them if you</font>

488
00:20:02,840 --> 00:20:06,939
<font color="#E5E5E5">want to have a macro view across</font>

489
00:20:04,220 --> 00:20:06,940
multiple gates

490
00:20:10,650 --> 00:20:16,810
so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the one thousand you know</font>

491
00:20:13,900 --> 00:20:19,480
feat view how the how the pintle works

492
00:20:16,810 --> 00:20:22,899
so as I said you know hooks a bunch of

493
00:20:19,480 --> 00:20:24,970
<font color="#CCCCCC">six calls right basically all</font><font color="#E5E5E5"> the</font>

494
00:20:22,900 --> 00:20:27,130
networking syscalls so you know except

495
00:20:24,970 --> 00:20:30,510
<font color="#E5E5E5">read right clothes receive from send</font>

496
00:20:27,130 --> 00:20:33,730
from send to all this stuff send message

497
00:20:30,510 --> 00:20:35,230
and so on except<font color="#CCCCCC"> at the file descriptor</font>

498
00:20:33,730 --> 00:20:36,490
to some list of stuff you interested in

499
00:20:35,230 --> 00:20:38,200
<font color="#CCCCCC">how wireless</font><font color="#E5E5E5"> to file descriptors and</font>

500
00:20:36,490 --> 00:20:41,050
track it across the further<font color="#E5E5E5"> Cisco's</font>

501
00:20:38,200 --> 00:20:43,450
right<font color="#E5E5E5"> and then you can see my little</font>

502
00:20:41,050 --> 00:20:45,129
heat map there which is<font color="#E5E5E5"> basically what</font><font color="#CCCCCC"> I</font>

503
00:20:43,450 --> 00:20:48,880
was talking about<font color="#E5E5E5"> before which is the</font>

504
00:20:45,130 --> 00:20:50,470
edge count per basic block and you can

505
00:20:48,880 --> 00:20:51,790
see<font color="#CCCCCC"> that on the final right or the final</font>

506
00:20:50,470 --> 00:20:59,950
clothes basically that heat map is

507
00:20:51,790 --> 00:21:01,510
flushed out to something so for UDP you

508
00:20:59,950 --> 00:21:04,000
can do basically exactly the same thing

509
00:21:01,510 --> 00:21:05,650
<font color="#E5E5E5">but track receive from track different</font>

510
00:21:04,000 --> 00:21:08,470
Cisco's right this worked exactly the

511
00:21:05,650 --> 00:21:10,150
same and again<font color="#E5E5E5"> I just want to say this</font>

512
00:21:08,470 --> 00:21:12,400
this generalized you know you can

513
00:21:10,150 --> 00:21:14,800
generalize this to any possible sequence

514
00:21:12,400 --> 00:21:16,750
of<font color="#E5E5E5"> sis calls and you could come up you</font>

515
00:21:14,800 --> 00:21:19,720
know something you know a grammar

516
00:21:16,750 --> 00:21:22,170
basically to describe this and have run

517
00:21:19,720 --> 00:21:25,030
time code coverage information based on

518
00:21:22,170 --> 00:21:32,470
some whatever<font color="#E5E5E5"> runtime criteria you</font>

519
00:21:25,030 --> 00:21:36,160
believe in so so we wrote a simple a

520
00:21:32,470 --> 00:21:37,690
simple pin tool called net<font color="#CCCCCC"> Cove so it's</font>

521
00:21:36,160 --> 00:21:40,450
only job in the world is to do exactly

522
00:21:37,690 --> 00:21:42,760
what I said it's basically to generate

523
00:21:40,450 --> 00:21:46,030
the code coverage map based on the run

524
00:21:42,760 --> 00:21:48,040
time data right and all it does is that

525
00:21:46,030 --> 00:21:51,250
it wastes you know it does exactly what

526
00:21:48,040 --> 00:21:54,340
I<font color="#CCCCCC"> said and it will write the output to a</font>

527
00:21:51,250 --> 00:21:56,380
<font color="#E5E5E5">pipe right so we'll flush out the code</font>

528
00:21:54,340 --> 00:21:59,409
coverage map to a pipe<font color="#CCCCCC"> weight</font><font color="#E5E5E5"> can be</font>

529
00:21:56,380 --> 00:22:01,240
consumed by<font color="#E5E5E5"> something else and so</font>

530
00:21:59,410 --> 00:22:03,250
basically<font color="#E5E5E5"> you know it's the reverse kind</font>

531
00:22:01,240 --> 00:22:04,900
of the the fuzzing talks why right where

532
00:22:03,250 --> 00:22:06,280
you know<font color="#E5E5E5"> before people used to say</font>

533
00:22:04,900 --> 00:22:07,960
instrumentation is up to you you write

534
00:22:06,280 --> 00:22:09,970
<font color="#CCCCCC">all this stuff well here basically the</font>

535
00:22:07,960 --> 00:22:11,860
fuzzing is up to you all you get is<font color="#CCCCCC"> that</font>

536
00:22:09,970 --> 00:22:14,860
when you send an input you know the code

537
00:22:11,860 --> 00:22:17,439
coverage which happened I'm it's got a

538
00:22:14,860 --> 00:22:20,469
sidekick called net call graph basically

539
00:22:17,440 --> 00:22:23,010
which just generates a runtime call

540
00:22:20,470 --> 00:22:24,600
graph so on the<font color="#E5E5E5"> same principle of this</font>

541
00:22:23,010 --> 00:22:26,850
you know those gated syscalls you can

542
00:22:24,600 --> 00:22:28,469
generate a<font color="#E5E5E5"> runtime call growth of what's</font>

543
00:22:26,850 --> 00:22:30,060
happening so it can<font color="#E5E5E5"> give you some</font>

544
00:22:28,470 --> 00:22:32,700
<font color="#E5E5E5">interesting insight for reversing all</font>

545
00:22:30,060 --> 00:22:34,470
this kind of stuff<font color="#CCCCCC"> and I've got a really</font>

546
00:22:32,700 --> 00:22:35,970
<font color="#E5E5E5">simple dummy you know fuzzing example</font>

547
00:22:34,470 --> 00:22:40,800
that I'll go through a bit later which

548
00:22:35,970 --> 00:22:43,710
which shows this so again you know<font color="#E5E5E5"> the</font>

549
00:22:40,800 --> 00:22:45,330
point of all this is is just to get

550
00:22:43,710 --> 00:22:47,100
people you know trying to<font color="#E5E5E5"> think about</font>

551
00:22:45,330 --> 00:22:49,520
<font color="#E5E5E5">network fuzzing and get interest</font>

552
00:22:47,100 --> 00:22:52,350
basically in it so<font color="#E5E5E5"> you know it's a POC</font>

553
00:22:49,520 --> 00:22:54,180
it works relatively well but<font color="#E5E5E5"> again it's</font>

554
00:22:52,350 --> 00:22:57,540
got a bunch of limitations right so it

555
00:22:54,180 --> 00:22:59,700
doesn't work<font color="#E5E5E5"> for select</font><font color="#CCCCCC"> poles</font><font color="#E5E5E5"> even</font>

556
00:22:57,540 --> 00:23:01,470
though<font color="#E5E5E5"> it could be adaptable there's no</font>

557
00:22:59,700 --> 00:23:03,300
crashed attack detection but I mean that

558
00:23:01,470 --> 00:23:05,330
again is a salt problem in the pin world

559
00:23:03,300 --> 00:23:08,430
so it wouldn't<font color="#E5E5E5"> be</font><font color="#CCCCCC"> very hard to achieve</font>

560
00:23:05,330 --> 00:23:11,460
the the more complicated<font color="#E5E5E5"> one is there's</font>

561
00:23:08,430 --> 00:23:13,680
no address sanitizer right to catch out

562
00:23:11,460 --> 00:23:14,880
of bound reads or writes so that's a bit

563
00:23:13,680 --> 00:23:17,070
more<font color="#E5E5E5"> of</font><font color="#CCCCCC"> a problem there's some work you</font>

564
00:23:14,880 --> 00:23:18,990
<font color="#CCCCCC">know in</font><font color="#E5E5E5"> the pin community to get a dress</font>

565
00:23:17,070 --> 00:23:20,870
and<font color="#CCCCCC"> as I like tools within within pin</font>

566
00:23:18,990 --> 00:23:23,480
tools which could be adapted here and

567
00:23:20,870 --> 00:23:25,590
right now the heat map or the hit map

568
00:23:23,480 --> 00:23:27,540
format is basically<font color="#E5E5E5"> text-based it's</font>

569
00:23:25,590 --> 00:23:29,699
completely not optimal at all but it's

570
00:23:27,540 --> 00:23:31,530
it kind of works what it works very well

571
00:23:29,700 --> 00:23:35,310
with is multi-threaded demons right

572
00:23:31,530 --> 00:23:36,899
because it will<font color="#CCCCCC"> work across a forks it</font>

573
00:23:35,310 --> 00:23:38,970
will works with<font color="#E5E5E5"> P threads and all this</font>

574
00:23:36,900 --> 00:23:40,230
stuff<font color="#E5E5E5"> you know because</font><font color="#CCCCCC"> you know file</font>

575
00:23:38,970 --> 00:23:42,150
descriptors happily a shared between

576
00:23:40,230 --> 00:23:45,510
parent and child so all this stuff works

577
00:23:42,150 --> 00:23:47,130
<font color="#E5E5E5">for multi-threaded applications the</font>

578
00:23:45,510 --> 00:23:49,710
interesting thing also is that heat map

579
00:23:47,130 --> 00:23:51,600
is per file descriptor right so it

580
00:23:49,710 --> 00:23:54,000
allows a form of concurrent fuzzing

581
00:23:51,600 --> 00:23:55,620
meaning that you can track you can<font color="#E5E5E5"> have</font>

582
00:23:54,000 --> 00:23:58,020
multiple instances of those guys and

583
00:23:55,620 --> 00:24:02,010
<font color="#E5E5E5">just do selection based on the file</font>

584
00:23:58,020 --> 00:24:03,600
<font color="#E5E5E5">descriptor that it happened and well you</font>

585
00:24:02,010 --> 00:24:05,040
know by design<font color="#E5E5E5"> its mutation independent</font>

586
00:24:03,600 --> 00:24:07,129
since it doesn't<font color="#CCCCCC"> it doesn't do any and</font>

587
00:24:05,040 --> 00:24:09,330
since it's a pin tool its source code

588
00:24:07,130 --> 00:24:11,250
independent right you don't need<font color="#CCCCCC"> to</font>

589
00:24:09,330 --> 00:24:12,899
build anything it just you just<font color="#E5E5E5"> dump a</font>

590
00:24:11,250 --> 00:24:14,580
binary in it and it just runs it and

591
00:24:12,900 --> 00:24:19,500
does some stuff and it's slow because

592
00:24:14,580 --> 00:24:20,879
<font color="#CCCCCC">it's pin so again the netcode flow so</font>

593
00:24:19,500 --> 00:24:23,640
you've<font color="#CCCCCC"> got a client which is a fuzzer</font>

594
00:24:20,880 --> 00:24:25,590
and you can see that<font color="#E5E5E5"> the orange lines</font>

595
00:24:23,640 --> 00:24:28,080
basically show you know the protocol

596
00:24:25,590 --> 00:24:29,909
exchange with a demon<font color="#E5E5E5"> and then the red</font>

597
00:24:28,080 --> 00:24:32,490
stuff is the coverage map<font color="#CCCCCC"> returned by</font>

598
00:24:29,910 --> 00:24:35,289
net cough back to your client

599
00:24:32,490 --> 00:24:37,649
so<font color="#E5E5E5"> I'll do a super quick demo here so i</font>

600
00:24:35,289 --> 00:24:40,899
wrote a super you know silly<font color="#E5E5E5"> easily a</font>

601
00:24:37,649 --> 00:24:44,229
demon basically which if you can see the

602
00:24:40,899 --> 00:24:46,689
code it just<font color="#CCCCCC"> looks up for magic you know</font>

603
00:24:44,230 --> 00:24:48,460
characters inside a buffer right so it's

604
00:24:46,690 --> 00:24:51,100
<font color="#E5E5E5">a bunch of nested branches just</font><font color="#CCCCCC"> to show</font>

605
00:24:48,460 --> 00:24:53,499
my point that code coverage increases

606
00:24:51,100 --> 00:24:58,149
right when you send the right the right

607
00:24:53,499 --> 00:25:00,720
value at the<font color="#E5E5E5"> right spot</font><font color="#CCCCCC"> i'll try</font><font color="#E5E5E5"> and put</font>

608
00:24:58,149 --> 00:25:00,719
this here soon

609
00:25:08,710 --> 00:25:14,490
sorry oh yeah

610
00:25:11,140 --> 00:25:14,490
I don't see it right

611
00:25:22,419 --> 00:25:30,269
alright so here I just<font color="#E5E5E5"> started it on you</font>

612
00:25:26,710 --> 00:25:30,269
know<font color="#CCCCCC"> the dummy pro and was talking about</font>

613
00:25:35,680 --> 00:25:44,530
and here I'm<font color="#CCCCCC"> just going to listen</font><font color="#E5E5E5"> out on</font>

614
00:25:37,660 --> 00:25:46,450
the pipe right and see what happens so

615
00:25:44,530 --> 00:25:53,200
if you just echo something<font color="#E5E5E5"> back into it</font>

616
00:25:46,450 --> 00:25:55,660
right right if you just echo something

617
00:25:53,200 --> 00:25:57,430
<font color="#E5E5E5">back</font><font color="#CCCCCC"> in you'll see</font><font color="#E5E5E5"> that here</font><font color="#CCCCCC"> it spit out</font>

618
00:25:55,660 --> 00:25:59,920
some stuff<font color="#E5E5E5"> right so this is the code</font>

619
00:25:57,430 --> 00:26:02,880
coverage information when<font color="#E5E5E5"> you send this</font>

620
00:25:59,920 --> 00:26:02,880
particular packet

621
00:26:10,060 --> 00:26:13,200
no I need that

622
00:26:13,760 --> 00:26:16,660
no I need it

623
00:26:17,180 --> 00:26:19,240
you

624
00:26:39,410 --> 00:26:42,370
alright so again

625
00:26:44,500 --> 00:26:47,830
if you<font color="#CCCCCC"> just send the same thing here you</font>

626
00:26:46,450 --> 00:26:48,850
<font color="#E5E5E5">can visually see basic via the code</font>

627
00:26:47,830 --> 00:26:51,600
coverage doesn't change right the

628
00:26:48,850 --> 00:26:53,860
<font color="#CCCCCC">Edcouch edge</font><font color="#E5E5E5"> count is constant right so</font>

629
00:26:51,600 --> 00:26:55,810
if<font color="#E5E5E5"> this was a father</font><font color="#CCCCCC"> basically I'm a</font>

630
00:26:53,860 --> 00:27:00,100
manual fuzzer here just doing some stuff

631
00:26:55,810 --> 00:27:01,750
<font color="#CCCCCC">you know if I if I add an a you know</font>

632
00:27:00,100 --> 00:27:03,459
randomly by having lack of byte flipping

633
00:27:01,750 --> 00:27:04,840
stuff you know here I should take an

634
00:27:03,460 --> 00:27:06,400
extra branch as I was saying and

635
00:27:04,840 --> 00:27:09,159
basically see the code coverage

636
00:27:06,400 --> 00:27:10,900
increases right so the whole point of

637
00:27:09,160 --> 00:27:13,450
this is just<font color="#CCCCCC"> to show that</font><font color="#E5E5E5"> here you get</font>

638
00:27:10,900 --> 00:27:18,010
feedback at runtime for this kind of

639
00:27:13,450 --> 00:27:19,870
stuff based<font color="#E5E5E5"> on network connections so</font>

640
00:27:18,010 --> 00:27:21,640
again if I put<font color="#E5E5E5"> a bee I'm going to take a</font>

641
00:27:19,870 --> 00:27:23,439
new branch etc and all this stuff right

642
00:27:21,640 --> 00:27:25,030
so here's just you know to give an

643
00:27:23,440 --> 00:27:29,140
example to visualize what's happening

644
00:27:25,030 --> 00:27:31,750
and to see the to see the code coverage

645
00:27:29,140 --> 00:27:35,410
map increasing one other interesting

646
00:27:31,750 --> 00:27:40,240
thing I want to show you is that<font color="#E5E5E5"> I added</font>

647
00:27:35,410 --> 00:27:42,990
<font color="#CCCCCC">one</font><font color="#E5E5E5"> parameter which basically is used as</font>

648
00:27:40,240 --> 00:27:42,990
a loop boundary

649
00:27:48,029 --> 00:27:51,539
so here the last parameter<font color="#CCCCCC"> 3 basically</font>

650
00:27:50,309 --> 00:27:53,940
is used as a loop and upper loop

651
00:27:51,539 --> 00:27:55,320
boundary right and what happens is that

652
00:27:53,940 --> 00:27:56,460
you're going<font color="#E5E5E5"> to see</font><font color="#CCCCCC"> that inside the</font>

653
00:27:55,320 --> 00:27:58,168
coverage map you're going to see that

654
00:27:56,460 --> 00:28:00,419
that edge count increases so you can

655
00:27:58,169 --> 00:28:01,649
know also when you're covering when

656
00:28:00,419 --> 00:28:04,409
you're controlling the upper bound of a

657
00:28:01,649 --> 00:28:06,869
loop boundary<font color="#CCCCCC"> all right so if you look</font>

658
00:28:04,409 --> 00:28:08,159
<font color="#E5E5E5">at this I know this is a bit abstract</font>

659
00:28:06,869 --> 00:28:09,718
but basically here you're going to<font color="#CCCCCC"> see</font>

660
00:28:08,159 --> 00:28:14,690
this<font color="#E5E5E5"> number</font><font color="#CCCCCC"> 3 which</font><font color="#E5E5E5"> will probably change</font>

661
00:28:09,719 --> 00:28:14,690
meaning that you're controlling<font color="#E5E5E5"> a loop</font>

662
00:28:18,360 --> 00:28:29,340
so if<font color="#CCCCCC"> I</font><font color="#E5E5E5"> change this to 15 for example it</font>

663
00:28:21,090 --> 00:28:31,139
should do more iterations on edge so

664
00:28:29,340 --> 00:28:33,090
again you can see<font color="#E5E5E5"> here that that hit</font>

665
00:28:31,140 --> 00:28:35,580
count increased right so it's just to

666
00:28:33,090 --> 00:28:38,280
show that<font color="#E5E5E5"> you can also have fine-grained</font>

667
00:28:35,580 --> 00:28:40,020
<font color="#E5E5E5">control and and view actually that edge</font>

668
00:28:38,280 --> 00:28:45,450
can't increase and when you control at

669
00:28:40,020 --> 00:28:47,900
the top of a loop boundary you go<font color="#E5E5E5"> back</font>

670
00:28:45,450 --> 00:28:47,900
to<font color="#CCCCCC"> the slice</font>

671
00:28:55,440 --> 00:29:00,929
I just<font color="#E5E5E5"> wanted to show a quick example of</font>

672
00:28:57,990 --> 00:29:03,389
of the net call graph stuff was talking

673
00:29:00,929 --> 00:29:07,259
about so this again is something which

674
00:29:03,389 --> 00:29:10,110
was drawn at runtime so if you saw if

675
00:29:07,259 --> 00:29:13,559
you look basically this is a view of

676
00:29:10,110 --> 00:29:14,879
that dummy demon between a<font color="#E5E5E5"> read and the</font>

677
00:29:13,559 --> 00:29:17,070
right right so these are the operations

678
00:29:14,879 --> 00:29:19,230
it does so<font color="#E5E5E5"> you can actually visualize</font>

679
00:29:17,070 --> 00:29:26,189
this stuff and dump it up if you're

680
00:29:19,230 --> 00:29:27,809
interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> doing this so i want to</font>

681
00:29:26,190 --> 00:29:30,330
<font color="#CCCCCC">show the process basically no</font><font color="#E5E5E5"> i showed</font>

682
00:29:27,809 --> 00:29:31,918
you the manual you know manual fuzzing

683
00:29:30,330 --> 00:29:33,899
stuff so<font color="#E5E5E5"> i wrote a very very simple</font>

684
00:29:31,919 --> 00:29:35,190
<font color="#E5E5E5">puzzle based on this where you know it's</font>

685
00:29:33,899 --> 00:29:36,570
just<font color="#CCCCCC"> the Charlie Miller algorithm where</font>

686
00:29:35,190 --> 00:29:39,179
you just basically by to flip random

687
00:29:36,570 --> 00:29:40,379
stuff and you want to see it increase<font color="#CCCCCC"> in</font>

688
00:29:39,179 --> 00:29:42,419
the code coverage right and start

689
00:29:40,379 --> 00:29:45,439
<font color="#E5E5E5">finding the correct inputs so i'll just</font>

690
00:29:42,419 --> 00:29:45,440
show this very<font color="#E5E5E5"> quickly</font>

691
00:30:11,700 --> 00:30:15,990
so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> very simple fuzzer which</font>

692
00:30:14,760 --> 00:30:22,500
is basically which<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to get some</font>

693
00:30:15,990 --> 00:30:25,169
<font color="#E5E5E5">feedback right so what's happening here</font>

694
00:30:22,500 --> 00:30:34,049
is that the fuzzer is just trying a

695
00:30:25,169 --> 00:30:35,669
bunch of random mutations right and it

696
00:30:34,049 --> 00:30:37,110
will take its time but eventually it

697
00:30:35,669 --> 00:30:38,730
should be able to bite flip the<font color="#E5E5E5"> bite</font>

698
00:30:37,110 --> 00:30:40,678
we're interested in<font color="#E5E5E5"> and start finding</font>

699
00:30:38,730 --> 00:30:42,269
code coverage entries if this takes too

700
00:30:40,679 --> 00:30:44,299
much time<font color="#CCCCCC"> I'll just</font><font color="#E5E5E5"> skip it but</font>

701
00:30:42,269 --> 00:30:46,409
basically<font color="#E5E5E5"> you should see this guy</font>

702
00:30:44,299 --> 00:30:50,039
suddenly when it finds<font color="#E5E5E5"> the right input</font>

703
00:30:46,409 --> 00:30:53,659
that will start basically finding out

704
00:30:50,039 --> 00:30:53,658
the hit<font color="#E5E5E5"> Cal has changed and increased</font>

705
00:30:56,630 --> 00:31:02,240
<font color="#E5E5E5">all right so since we're</font><font color="#CCCCCC"> running a bit</font>

706
00:30:58,649 --> 00:31:02,239
out of time i'll just skip this

707
00:31:14,730 --> 00:31:21,630
okay so all<font color="#CCCCCC"> this to show that like we</font>

708
00:31:19,410 --> 00:31:22,950
can have probably better tools for code

709
00:31:21,630 --> 00:31:24,600
coverage and you know for fuzzing

710
00:31:22,950 --> 00:31:26,309
network protocols there's<font color="#CCCCCC"> probably some</font>

711
00:31:24,600 --> 00:31:28,230
evolution we can work on here to get

712
00:31:26,309 --> 00:31:30,030
similar technologies that are used for

713
00:31:28,230 --> 00:31:32,190
file parsing can be applied in the

714
00:31:30,030 --> 00:31:35,580
networking world and you know hopefully

715
00:31:32,190 --> 00:31:37,590
that can help us find bugs quicker and

716
00:31:35,580 --> 00:31:41,460
mostly be more efficient at fuzzing this

717
00:31:37,590 --> 00:31:43,320
kind of stuff<font color="#E5E5E5"> so now I'll I'll pass it</font>

718
00:31:41,460 --> 00:31:45,750
over to MJ who'll talk about a real

719
00:31:43,320 --> 00:31:48,178
world example basically based on the on

720
00:31:45,750 --> 00:31:49,950
the RDP protocol and heal quickly

721
00:31:48,179 --> 00:31:51,720
discuss you<font color="#CCCCCC"> know how you know reverse</font>

722
00:31:49,950 --> 00:31:54,090
engineering and the fuzzing portion of

723
00:31:51,720 --> 00:31:57,450
this you know tightly integrated and and

724
00:31:54,090 --> 00:32:04,409
can work together thanks a lot<font color="#E5E5E5"> thanks</font>

725
00:31:57,450 --> 00:32:06,690
<font color="#E5E5E5">Alex alright guys so referring to</font>

726
00:32:04,410 --> 00:32:09,150
something I mentioned earlier if I<font color="#CCCCCC"> could</font>

727
00:32:06,690 --> 00:32:12,330
just kill kill the whole<font color="#CCCCCC"> idea of reading</font>

728
00:32:09,150 --> 00:32:14,520
my documentation to assess what the

729
00:32:12,330 --> 00:32:17,129
package structure looks like and I could

730
00:32:14,520 --> 00:32:18,450
get a fuzzing ready information<font color="#E5E5E5"> about</font>

731
00:32:17,130 --> 00:32:20,880
the packet I think that's good enough

732
00:32:18,450 --> 00:32:22,890
<font color="#CCCCCC">for me</font><font color="#E5E5E5"> to write a buzzer so what what</font>

733
00:32:20,880 --> 00:32:25,650
<font color="#CCCCCC">you were</font><font color="#E5E5E5"> trying to do was to see that</font>

734
00:32:22,890 --> 00:32:28,380
for the RDP<font color="#E5E5E5"> protocol and rdp I think</font>

735
00:32:25,650 --> 00:32:31,080
everybody<font color="#E5E5E5"> knows about</font><font color="#CCCCCC"> it right so for</font>

736
00:32:28,380 --> 00:32:34,290
the RDP protocol is it possible for<font color="#E5E5E5"> me</font>

737
00:32:31,080 --> 00:32:39,000
to extract the packet structure using

738
00:32:34,290 --> 00:32:41,639
the feedback loop and come to a level

739
00:32:39,000 --> 00:32:43,559
where I may not know what each byte

740
00:32:41,640 --> 00:32:47,610
represents what I should have<font color="#CCCCCC"> a fair</font>

741
00:32:43,559 --> 00:32:49,260
idea how to<font color="#E5E5E5"> first that bite right so</font>

742
00:32:47,610 --> 00:32:51,629
that's<font color="#E5E5E5"> the kind of demo I'm going to try</font>

743
00:32:49,260 --> 00:32:57,980
and do here hopefully hopefully this

744
00:32:51,630 --> 00:33:01,049
will<font color="#CCCCCC"> work so all right so our DB is the</font>

745
00:32:57,980 --> 00:33:08,010
is our regular windows remote desktop

746
00:33:01,049 --> 00:33:10,139
protocol and the<font color="#CCCCCC"> runs on 3389 it has a</font>

747
00:33:08,010 --> 00:33:12,240
lot of variants on the<font color="#E5E5E5"> Linux world now</font>

748
00:33:10,140 --> 00:33:14,640
there's a<font color="#CCCCCC"> xrdp</font><font color="#E5E5E5"> which you can find on the</font>

749
00:33:12,240 --> 00:33:16,590
mixed unix<font color="#E5E5E5"> environment and RTP clients</font>

750
00:33:14,640 --> 00:33:18,540
are available practically everywhere so

751
00:33:16,590 --> 00:33:21,928
it's kind of a<font color="#E5E5E5"> nice protocol and frankly</font>

752
00:33:18,540 --> 00:33:24,059
you know some point<font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to hit a CV</font>

753
00:33:21,929 --> 00:33:25,560
on this one but let's wait on that one

754
00:33:24,059 --> 00:33:30,780
<font color="#CCCCCC">for a moment</font>

755
00:33:25,560 --> 00:33:34,560
so this<font color="#E5E5E5"> is what I did from since this is</font>

756
00:33:30,780 --> 00:33:37,770
<font color="#CCCCCC">a small POC around net cava how it can</font>

757
00:33:34,560 --> 00:33:40,560
be used<font color="#E5E5E5"> so at a high level what Alex was</font>

758
00:33:37,770 --> 00:33:42,660
selling was how the net curve winery

759
00:33:40,560 --> 00:33:46,200
tracing works on the server<font color="#E5E5E5"> and it puts</font>

760
00:33:42,660 --> 00:33:50,400
<font color="#E5E5E5">all the data</font><font color="#CCCCCC"> in the pipe the pipe name</font>

761
00:33:46,200 --> 00:33:52,890
over here is<font color="#CCCCCC"> Tim</font><font color="#E5E5E5"> Metcalf and from there</font>

762
00:33:50,400 --> 00:33:54,720
the binary trees which is basically

763
00:33:52,890 --> 00:33:56,940
between the receive and descend system

764
00:33:54,720 --> 00:33:59,160
calls this<font color="#E5E5E5"> is given to a fitness</font>

765
00:33:56,940 --> 00:34:01,590
function like any genetic algorithm you

766
00:33:59,160 --> 00:34:03,810
will have some heuristics around it so

767
00:34:01,590 --> 00:34:07,800
the heuristics that right now is being

768
00:34:03,810 --> 00:34:09,989
used is just the count of the number of

769
00:34:07,800 --> 00:34:11,489
<font color="#E5E5E5">edges which is being covered so yeah</font>

770
00:34:09,989 --> 00:34:13,469
it's not the<font color="#E5E5E5"> perfect one but then it</font>

771
00:34:11,489 --> 00:34:16,290
just<font color="#E5E5E5"> gives an idea of how many</font><font color="#CCCCCC"> edges</font>

772
00:34:13,469 --> 00:34:18,750
have you been able to<font color="#E5E5E5"> cover now that is</font>

773
00:34:16,290 --> 00:34:21,300
a fitness function which kind<font color="#E5E5E5"> of sends</font>

774
00:34:18,750 --> 00:34:23,040
back the feedback to my client side so

775
00:34:21,300 --> 00:34:24,420
this this dotted line basically divides

776
00:34:23,040 --> 00:34:27,480
<font color="#CCCCCC">what's on the server and</font><font color="#E5E5E5"> what's on the</font>

777
00:34:24,420 --> 00:34:29,639
client on the client side I get this

778
00:34:27,480 --> 00:34:32,580
information based on that we modify the

779
00:34:29,639 --> 00:34:36,299
mutation strategy and the packets will

780
00:34:32,580 --> 00:34:38,040
<font color="#CCCCCC">lumiere accordingly so everything which</font>

781
00:34:36,300 --> 00:34:40,440
you see here the rest of it is pretty

782
00:34:38,040 --> 00:34:43,590
<font color="#E5E5E5">obvious except the input is something</font>

783
00:34:40,440 --> 00:34:46,260
which which is<font color="#E5E5E5"> read from a wire shower</font>

784
00:34:43,590 --> 00:34:48,330
trays<font color="#E5E5E5"> so just to make life simpler you</font>

785
00:34:46,260 --> 00:34:50,400
can put a wire sharp somewhere take our

786
00:34:48,330 --> 00:34:52,380
DB connection down put<font color="#E5E5E5"> it in this stool</font>

787
00:34:50,400 --> 00:34:54,560
and it will automatically generate the

788
00:34:52,380 --> 00:34:58,680
packet structure and give it<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to you</font>

789
00:34:54,560 --> 00:35:00,840
so if<font color="#E5E5E5"> I have to use this whole tool a</font>

790
00:34:58,680 --> 00:35:03,960
<font color="#E5E5E5">little differently you know maybe to do</font>

791
00:35:00,840 --> 00:35:05,610
fuzzing to improve on some heuristics

792
00:35:03,960 --> 00:35:07,620
it's the green boxes which I<font color="#E5E5E5"> need to</font>

793
00:35:05,610 --> 00:35:08,730
play with you know a better fitness

794
00:35:07,620 --> 00:35:11,190
function will typically give you a

795
00:35:08,730 --> 00:35:12,900
<font color="#E5E5E5">better result or something similarly</font>

796
00:35:11,190 --> 00:35:14,940
based on that dimension strategy will

797
00:35:12,900 --> 00:35:16,320
have to change right now<font color="#E5E5E5"> all I</font><font color="#CCCCCC"> want to</font>

798
00:35:14,940 --> 00:35:17,940
do<font color="#E5E5E5"> is to understand the structure of the</font>

799
00:35:16,320 --> 00:35:20,400
packet so it's basically reverse

800
00:35:17,940 --> 00:35:23,250
engineering the protocol the packet

801
00:35:20,400 --> 00:35:27,180
structure if I wanted to<font color="#E5E5E5"> fuzzing the</font>

802
00:35:23,250 --> 00:35:29,430
strategy has to change a little bit one

803
00:35:27,180 --> 00:35:31,410
of the biggest challenge that usually

804
00:35:29,430 --> 00:35:33,720
you know I faced with this whole

805
00:35:31,410 --> 00:35:35,250
automation and you know we were we were

806
00:35:33,720 --> 00:35:36,890
struggling with that little bit was a

807
00:35:35,250 --> 00:35:38,960
synchronization problem because

808
00:35:36,890 --> 00:35:40,549
you know you send some packet you don't

809
00:35:38,960 --> 00:35:42,470
know what what<font color="#E5E5E5"> Packers to receive</font>

810
00:35:40,549 --> 00:35:44,869
sometimes it just goes out of sync

811
00:35:42,470 --> 00:35:45,980
packet drops all kind of things so I'm

812
00:35:44,869 --> 00:35:47,690
<font color="#E5E5E5">not going to go in details on how</font><font color="#CCCCCC"> to</font>

813
00:35:45,980 --> 00:35:50,539
solve that that's more<font color="#E5E5E5"> trivial</font>

814
00:35:47,690 --> 00:35:53,690
engineering so let<font color="#CCCCCC"> me just quickly do a</font>

815
00:35:50,539 --> 00:35:57,190
small demo and let's try and see what we

816
00:35:53,690 --> 00:35:57,190
<font color="#CCCCCC">are looking at</font>

817
00:36:33,130 --> 00:36:44,750
alright so<font color="#E5E5E5"> I have a set up a small shell</font>

818
00:36:36,080 --> 00:36:48,290
script which basically so all<font color="#E5E5E5"> that this</font>

819
00:36:44,750 --> 00:36:50,300
guy does is that it kills off any rdp

820
00:36:48,290 --> 00:36:54,050
which is running and then just attaches

821
00:36:50,300 --> 00:36:56,120
the the net<font color="#CCCCCC"> the net</font><font color="#E5E5E5"> cough flying that we</font>

822
00:36:54,050 --> 00:37:00,260
were talking<font color="#CCCCCC"> about here this tune it</font>

823
00:36:56,120 --> 00:37:03,440
attaches this thing to our xrdp binary

824
00:37:00,260 --> 00:37:05,600
and there is a<font color="#E5E5E5"> flag to it with</font><font color="#CCCCCC"> the minus</font>

825
00:37:03,440 --> 00:37:07,280
<font color="#CCCCCC">M here which basically marks out which</font>

826
00:37:05,600 --> 00:37:09,140
is the module you want to trace for

827
00:37:07,280 --> 00:37:13,130
fuzzy so usually<font color="#CCCCCC"> in the real world</font>

828
00:37:09,140 --> 00:37:14,690
they're<font color="#E5E5E5"> going to be like you know 10 20</font>

829
00:37:13,130 --> 00:37:16,460
modules which are dynamically linked and

830
00:37:14,690 --> 00:37:17,930
if you start tracking each one of them

831
00:37:16,460 --> 00:37:20,060
you could actually end up with a lot of

832
00:37:17,930 --> 00:37:21,799
grass which you really<font color="#E5E5E5"> do Model analyze</font>

833
00:37:20,060 --> 00:37:23,690
that may not<font color="#E5E5E5"> even be the code which you</font>

834
00:37:21,800 --> 00:37:25,160
are looking into<font color="#E5E5E5"> right so you can</font>

835
00:37:23,690 --> 00:37:27,500
<font color="#E5E5E5">actually choose which is the binary you</font>

836
00:37:25,160 --> 00:37:29,390
want to look<font color="#E5E5E5"> into the trays for over</font>

837
00:37:27,500 --> 00:37:34,240
here it<font color="#E5E5E5"> is live xrdp which is the</font><font color="#CCCCCC"> one I</font>

838
00:37:29,390 --> 00:37:34,240
looking at and that's what's going<font color="#E5E5E5"> to do</font>

839
00:37:37,240 --> 00:37:46,910
alright so the dash has been done that's

840
00:37:41,900 --> 00:37:49,010
good no all<font color="#E5E5E5"> right the server program</font>

841
00:37:46,910 --> 00:37:52,940
basically over here collects the data

842
00:37:49,010 --> 00:37:54,680
from the from this pipe where the<font color="#CCCCCC"> output</font>

843
00:37:52,940 --> 00:37:55,970
will be<font color="#E5E5E5"> written from the trace and it's</font>

844
00:37:54,680 --> 00:37:57,500
<font color="#E5E5E5">going to analyze with the fitness</font>

845
00:37:55,970 --> 00:38:00,850
function and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a guy who's gonna</font>

846
00:37:57,500 --> 00:38:08,240
<font color="#E5E5E5">send the trace back so that is fine and</font>

847
00:38:00,850 --> 00:38:10,160
the final<font color="#CCCCCC"> part of it is or so this is</font>

848
00:38:08,240 --> 00:38:11,779
the analyzer so what we have<font color="#CCCCCC"> done is</font>

849
00:38:10,160 --> 00:38:13,850
that this<font color="#E5E5E5"> is the pcap file which it</font>

850
00:38:11,780 --> 00:38:16,000
takes<font color="#E5E5E5"> as input and typically you know</font>

851
00:38:13,850 --> 00:38:18,529
the pcap file can be taken anywhere

852
00:38:16,000 --> 00:38:20,150
between any client and server and you

853
00:38:18,530 --> 00:38:23,360
might<font color="#E5E5E5"> want to target something else so a</font>

854
00:38:20,150 --> 00:38:26,030
small thing<font color="#E5E5E5"> I read was to just have</font>

855
00:38:23,360 --> 00:38:27,680
tomorrow which is<font color="#E5E5E5"> the IP address</font><font color="#CCCCCC"> which</font>

856
00:38:26,030 --> 00:38:31,400
<font color="#CCCCCC">is acting</font><font color="#E5E5E5"> as a server in the pcap file</font>

857
00:38:27,680 --> 00:38:33,890
and what's the target right so they can

858
00:38:31,400 --> 00:38:38,180
<font color="#E5E5E5">potentially</font><font color="#CCCCCC"> be two different</font><font color="#E5E5E5"> IDs so</font><font color="#CCCCCC"> what</font>

859
00:38:33,890 --> 00:38:40,279
this basically does is the<font color="#E5E5E5"> small thing</font>

860
00:38:38,180 --> 00:38:42,290
which we are doing here<font color="#E5E5E5"> is that for each</font>

861
00:38:40,280 --> 00:38:44,770
bite so this is<font color="#E5E5E5"> a first packet which you</font>

862
00:38:42,290 --> 00:38:47,270
are seeing here<font color="#E5E5E5"> and if you see</font>

863
00:38:44,770 --> 00:38:51,200
the bite which is being flipped right

864
00:38:47,270 --> 00:38:54,320
now you just see<font color="#E5E5E5"> really goes from one by</font>

865
00:38:51,200 --> 00:38:57,200
to another and what it does is<font color="#E5E5E5"> that for</font>

866
00:38:54,320 --> 00:39:00,640
each bite it takes<font color="#E5E5E5"> the value as 0 X 0 1</font>

867
00:38:57,200 --> 00:39:03,230
<font color="#E5E5E5">and in the next iteration it takes 0xff</font>

868
00:39:00,640 --> 00:39:06,470
so what we want<font color="#E5E5E5"> to do is to enable all</font>

869
00:39:03,230 --> 00:39:09,700
the bits or disable the bits and see if

870
00:39:06,470 --> 00:39:12,709
that changes a control flow somewhere

871
00:39:09,700 --> 00:39:18,049
what also<font color="#E5E5E5"> if you see a little bit here</font>

872
00:39:12,710 --> 00:39:19,640
is that at offset you know over here the

873
00:39:18,050 --> 00:39:23,480
control flow<font color="#E5E5E5"> changed we were able to go</font>

874
00:39:19,640 --> 00:39:27,049
deeper into the cord and see after all

875
00:39:23,480 --> 00:39:28,460
so let's if<font color="#E5E5E5"> you have a 30 bite payload</font>

876
00:39:27,050 --> 00:39:30,530
what you are talking about is 60

877
00:39:28,460 --> 00:39:33,020
iterations of that packet so two

878
00:39:30,530 --> 00:39:34,820
<font color="#E5E5E5">additions for right and we get our idea</font>

879
00:39:33,020 --> 00:39:36,800
for it looks like and then it's all

880
00:39:34,820 --> 00:39:40,550
about a little<font color="#E5E5E5"> bit of massaging but the</font>

881
00:39:36,800 --> 00:39:42,260
final result that it that's what so the

882
00:39:40,550 --> 00:39:44,720
package structure that it looks<font color="#E5E5E5"> like is</font>

883
00:39:42,260 --> 00:39:46,070
<font color="#E5E5E5">something like</font><font color="#CCCCCC"> this what does</font><font color="#E5E5E5"> this</font>

884
00:39:44,720 --> 00:39:58,660
<font color="#E5E5E5">really mean let's just try and look at</font>

885
00:39:46,070 --> 00:39:58,660
<font color="#E5E5E5">that for a moment so coming back to the</font>

886
00:39:58,690 --> 00:40:03,770
so yeah so when<font color="#E5E5E5"> I send this base packet</font>

887
00:40:01,370 --> 00:40:06,200
this is roughly what our baseline looks

888
00:40:03,770 --> 00:40:11,000
like and this<font color="#CCCCCC"> is something I forgot to</font>

889
00:40:06,200 --> 00:40:13,129
show you guys so if you see in the in

890
00:40:11,000 --> 00:40:15,560
the trace here you know for each packet

891
00:40:13,130 --> 00:40:18,320
this is the trace which is<font color="#E5E5E5"> coming in so</font>

892
00:40:15,560 --> 00:40:23,690
if<font color="#E5E5E5"> we go right at the top we will as use</font>

893
00:40:18,320 --> 00:40:26,000
let me just show you that one trace so

894
00:40:23,690 --> 00:40:28,010
if you see<font color="#CCCCCC"> here the first byte byte 0 is</font>

895
00:40:26,000 --> 00:40:29,840
a control white a control bite basically

896
00:40:28,010 --> 00:40:31,970
implies that this is something which is

897
00:40:29,840 --> 00:40:33,200
changing the<font color="#E5E5E5"> control flow somewhere and</font>

898
00:40:31,970 --> 00:40:35,350
we are probably expecting a different

899
00:40:33,200 --> 00:40:38,120
code coverage and what was there earlier

900
00:40:35,350 --> 00:40:40,220
so and that's<font color="#E5E5E5"> pretty obvious based on</font>

901
00:40:38,120 --> 00:40:41,990
the coverage length here this is the

902
00:40:40,220 --> 00:40:44,180
coverage length and very usually the

903
00:40:41,990 --> 00:40:45,830
next byte which is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> data byte so you</font>

904
00:40:44,180 --> 00:40:48,500
can<font color="#CCCCCC"> just see the size of it right how</font>

905
00:40:45,830 --> 00:40:49,880
different is this just basically just

906
00:40:48,500 --> 00:40:52,960
you know visual instruction can tell you

907
00:40:49,880 --> 00:40:56,710
there is a code cold flow difference so

908
00:40:52,960 --> 00:40:56,710
coming<font color="#E5E5E5"> back to the slides</font>

909
00:40:57,980 --> 00:41:03,510
yeah so at a high level this<font color="#CCCCCC"> is</font>

910
00:41:01,289 --> 00:41:05,099
<font color="#E5E5E5">something you know we are using the same</font>

911
00:41:03,510 --> 00:41:08,609
text-based format on identifying the

912
00:41:05,099 --> 00:41:10,349
code coverage there is no actually we

913
00:41:08,609 --> 00:41:11,819
got is something like<font color="#E5E5E5"> this so what I</font>

914
00:41:10,349 --> 00:41:14,039
wanted to do was<font color="#CCCCCC"> to</font><font color="#E5E5E5"> take a look</font><font color="#CCCCCC"> at the X</font>

915
00:41:11,819 --> 00:41:15,210
RDP protocol<font color="#E5E5E5"> specification I didn't go</font>

916
00:41:14,039 --> 00:41:19,430
through<font color="#E5E5E5"> the whole tour at which document</font>

917
00:41:15,210 --> 00:41:21,839
but yeah a few pages is<font color="#CCCCCC"> okay right</font><font color="#E5E5E5"> so</font>

918
00:41:19,430 --> 00:41:23,549
what's<font color="#E5E5E5"> interesting is that if I have to</font>

919
00:41:21,839 --> 00:41:26,130
understand if I am<font color="#CCCCCC"> getting the results</font>

920
00:41:23,549 --> 00:41:29,279
properly or not I wanted to verify that

921
00:41:26,130 --> 00:41:31,619
with the first you know first<font color="#CCCCCC"> five six</font>

922
00:41:29,279 --> 00:41:32,970
for<font color="#CCCCCC"> the first six</font><font color="#E5E5E5"> to seven bites that</font>

923
00:41:31,619 --> 00:41:34,619
<font color="#E5E5E5">should give me a fair idea with the real</font>

924
00:41:32,970 --> 00:41:38,220
<font color="#CCCCCC">one</font><font color="#E5E5E5"> in the right direction right the</font>

925
00:41:34,619 --> 00:41:41,160
<font color="#E5E5E5">rest of it is data so the this is the</font>

926
00:41:38,220 --> 00:41:43,919
<font color="#E5E5E5">excerpt the rdp specification so what I</font>

927
00:41:41,160 --> 00:41:45,270
am primarily interested in is in the<font color="#CCCCCC"> tea</font>

928
00:41:43,920 --> 00:41:47,819
packet header which is a 4-byte thing

929
00:41:45,270 --> 00:41:49,380
and then there<font color="#CCCCCC"> is the x 24 CR q which is</font>

930
00:41:47,819 --> 00:41:51,720
seven bite after which there is a lot of

931
00:41:49,380 --> 00:41:53,609
variable field so that all goes in data

932
00:41:51,720 --> 00:41:55,109
and not too worried about that but

933
00:41:53,609 --> 00:41:59,130
primarily is the first 11<font color="#E5E5E5"> bytes which I</font>

934
00:41:55,109 --> 00:42:01,650
want to look at so<font color="#CCCCCC"> let us take</font><font color="#E5E5E5"> a look</font><font color="#CCCCCC"> at</font>

935
00:41:59,130 --> 00:42:06,270
the first<font color="#E5E5E5"> four whites are bound so this</font>

936
00:42:01,650 --> 00:42:08,039
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the tea packet header the first octet</font>

937
00:42:06,270 --> 00:42:10,890
which is the<font color="#E5E5E5"> first bite it basically</font>

938
00:42:08,039 --> 00:42:12,990
talks about the version number and the

939
00:42:10,890 --> 00:42:15,299
protocol is different based on<font color="#E5E5E5"> this</font>

940
00:42:12,990 --> 00:42:17,250
binary value which makes sense because

941
00:42:15,299 --> 00:42:18,538
our first<font color="#E5E5E5"> by did actually turn out as a</font>

942
00:42:17,250 --> 00:42:20,640
<font color="#E5E5E5">controlled bite and it was actually</font>

943
00:42:18,539 --> 00:42:22,559
<font color="#E5E5E5">changing the direction of the flow based</font>

944
00:42:20,640 --> 00:42:26,368
on what<font color="#E5E5E5"> this value was right logically</font>

945
00:42:22,559 --> 00:42:28,859
makes sense the second update is

946
00:42:26,369 --> 00:42:30,839
basically a resort bite nobody really

947
00:42:28,859 --> 00:42:32,460
<font color="#CCCCCC">uses it today so it kind of just goes</font>

948
00:42:30,839 --> 00:42:35,038
off as data it doesn't<font color="#CCCCCC"> change the</font>

949
00:42:32,460 --> 00:42:39,510
control flow which is exactly what we

950
00:42:35,039 --> 00:42:43,710
found the<font color="#E5E5E5"> next two bites turns out as</font>

951
00:42:39,510 --> 00:42:46,049
the<font color="#E5E5E5"> packet length it's interesting</font>

952
00:42:43,710 --> 00:42:48,089
<font color="#E5E5E5">because what we are doing right now is</font>

953
00:42:46,049 --> 00:42:50,009
just a simple mutation of<font color="#E5E5E5"> the packet and</font>

954
00:42:48,089 --> 00:42:52,558
therefore the length of the packet radio

955
00:42:50,010 --> 00:42:55,230
doesn't change and<font color="#E5E5E5"> also it's interesting</font>

956
00:42:52,559 --> 00:42:57,329
to see<font color="#CCCCCC"> that this these two bytes is</font>

957
00:42:55,230 --> 00:42:59,010
turned out as a magic here so when I say

958
00:42:57,329 --> 00:43:01,799
something<font color="#E5E5E5"> is a magic bite you just</font>

959
00:42:59,010 --> 00:43:05,099
implies that if you flip this bite the

960
00:43:01,799 --> 00:43:07,079
packet will be dropped right so

961
00:43:05,099 --> 00:43:08,810
<font color="#CCCCCC">basically if I have to make a rough</font>

962
00:43:07,079 --> 00:43:11,990
assessment of what

963
00:43:08,810 --> 00:43:13,850
I have learnt till here is that there is

964
00:43:11,990 --> 00:43:15,890
a very strict verification of these two

965
00:43:13,850 --> 00:43:17,660
bites and they verify whether the packet

966
00:43:15,890 --> 00:43:19,759
length is exactly matching this value an

967
00:43:17,660 --> 00:43:23,980
art right something that I could<font color="#E5E5E5"> learn</font>

968
00:43:19,760 --> 00:43:28,490
just from this<font color="#CCCCCC"> watch let's move ahead</font>

969
00:43:23,980 --> 00:43:31,430
the next set the next set is the first

970
00:43:28,490 --> 00:43:34,669
bite which is the white number<font color="#CCCCCC"> four here</font>

971
00:43:31,430 --> 00:43:37,220
I should've I it<font color="#E5E5E5"> five offset for that's</font>

972
00:43:34,670 --> 00:43:38,930
the<font color="#E5E5E5"> length</font><font color="#CCCCCC"> indicated field that's</font>

973
00:43:37,220 --> 00:43:42,049
another one<font color="#E5E5E5"> bite lengthy but</font>

974
00:43:38,930 --> 00:43:43,580
interestingly this is the length for

975
00:43:42,050 --> 00:43:45,950
this header only and it will protein

976
00:43:43,580 --> 00:43:47,870
change because there's a there are<font color="#CCCCCC"> a lot</font>

977
00:43:45,950 --> 00:43:49,069
of data after that so this still acts as

978
00:43:47,870 --> 00:43:52,880
the data it doesn't change the control

979
00:43:49,070 --> 00:43:56,210
flow anywhere the next bite<font color="#CCCCCC"> too is</font>

980
00:43:52,880 --> 00:43:57,470
basically broken into two you know so

981
00:43:56,210 --> 00:44:00,080
the bite is broken into four bits each

982
00:43:57,470 --> 00:44:02,450
it has two different control structures

983
00:44:00,080 --> 00:44:04,340
in it so that specific white is still a

984
00:44:02,450 --> 00:44:06,950
control bite and the rest of<font color="#E5E5E5"> the thing</font>

985
00:44:04,340 --> 00:44:08,750
is set to 0 or it is referenced in

986
00:44:06,950 --> 00:44:10,100
something but eventually<font color="#E5E5E5"> that is not</font>

987
00:44:08,750 --> 00:44:14,780
something<font color="#E5E5E5"> which is changing the control</font>

988
00:44:10,100 --> 00:44:18,049
flow well I feel<font color="#E5E5E5"> good about it after</font>

989
00:44:14,780 --> 00:44:19,790
doing this analysis so because now at

990
00:44:18,050 --> 00:44:22,850
this stage I know that from<font color="#CCCCCC"> the first</font>

991
00:44:19,790 --> 00:44:24,710
packet the mutation of<font color="#E5E5E5"> the first bite is</font>

992
00:44:22,850 --> 00:44:26,779
going to lead to a change of control

993
00:44:24,710 --> 00:44:29,000
flow three and four are going to be a

994
00:44:26,780 --> 00:44:31,730
length field which should not be played

995
00:44:29,000 --> 00:44:33,200
with unless you know you were<font color="#E5E5E5"> actually</font>

996
00:44:31,730 --> 00:44:34,940
going to change the length and it is

997
00:44:33,200 --> 00:44:38,419
also sure that they are verifying this

998
00:44:34,940 --> 00:44:41,330
length now bite<font color="#CCCCCC"> five is something which</font>

999
00:44:38,420 --> 00:44:44,660
is also length but they are not really

1000
00:44:41,330 --> 00:44:45,590
<font color="#E5E5E5">you know enforcing it somehow so this</font><font color="#CCCCCC"> is</font>

1001
00:44:44,660 --> 00:44:47,839
<font color="#E5E5E5">the place which could actually</font>

1002
00:44:45,590 --> 00:44:50,180
potentially to some<font color="#E5E5E5"> kind of over read or</font>

1003
00:44:47,840 --> 00:44:54,710
under eat or something I would like<font color="#CCCCCC"> to</font>

1004
00:44:50,180 --> 00:44:56,299
<font color="#E5E5E5">play with</font><font color="#CCCCCC"> this one frankly and white six</font>

1005
00:44:54,710 --> 00:44:58,730
is another control flow and white<font color="#E5E5E5"> seven</font>

1006
00:44:56,300 --> 00:45:01,910
<font color="#E5E5E5">to thirty eight is all data what this</font>

1007
00:44:58,730 --> 00:45:03,740
implies for me is that now I don't have

1008
00:45:01,910 --> 00:45:05,540
to<font color="#CCCCCC"> first</font><font color="#E5E5E5"> this in a linear</font><font color="#CCCCCC"> array where I</font>

1009
00:45:03,740 --> 00:45:06,740
could first one bite at a time but<font color="#CCCCCC"> I</font>

1010
00:45:05,540 --> 00:45:08,300
could differentiate all the control

1011
00:45:06,740 --> 00:45:10,129
whites together and all the data bytes

1012
00:45:08,300 --> 00:45:11,840
together and this<font color="#E5E5E5"> is basically the</font>

1013
00:45:10,130 --> 00:45:13,910
<font color="#E5E5E5">product of the number of</font><font color="#CCCCCC"> fuse</font><font color="#E5E5E5"> cases</font>

1014
00:45:11,840 --> 00:45:16,100
which I want to file so for each control

1015
00:45:13,910 --> 00:45:17,420
bite mutation I could choose all the

1016
00:45:16,100 --> 00:45:18,410
meditations of the data byte and I could

1017
00:45:17,420 --> 00:45:21,209
<font color="#E5E5E5">potentially reach to a different</font>

1018
00:45:18,410 --> 00:45:23,950
location make<font color="#E5E5E5"> sense</font>

1019
00:45:21,209 --> 00:45:26,799
so with this<font color="#E5E5E5"> kind of information who in</font>

1020
00:45:23,950 --> 00:45:31,479
the room cannot write a fuzzer right so

1021
00:45:26,799 --> 00:45:34,930
<font color="#E5E5E5">I'm not going to do that so just for a</font>

1022
00:45:31,479 --> 00:45:36,279
conclusion let's take a look there's a

1023
00:45:34,930 --> 00:45:38,200
lot<font color="#CCCCCC"> to do in the network buzzing world</font>

1024
00:45:36,279 --> 00:45:40,269
and what we have just talked about<font color="#E5E5E5"> is</font>

1025
00:45:38,200 --> 00:45:43,269
<font color="#E5E5E5">just a glimpse of what can potentially</font>

1026
00:45:40,269 --> 00:45:44,618
be achieved by this technique this is

1027
00:45:43,269 --> 00:45:49,269
<font color="#E5E5E5">just to invite the community to start</font>

1028
00:45:44,619 --> 00:45:58,950
playing<font color="#E5E5E5"> with this and yeah that's that's</font>

1029
00:45:49,269 --> 00:46:01,390
<font color="#CCCCCC">pretty much it thank you what questions</font>

1030
00:45:58,950 --> 00:46:05,348
does anybody have any questions for our

1031
00:46:01,390 --> 00:46:10,930
speakers if you do come on up and<font color="#E5E5E5"> get</font>

1032
00:46:05,349 --> 00:46:13,719
the mic not having questions is never a

1033
00:46:10,930 --> 00:46:18,788
good sign so I was<font color="#CCCCCC"> really in a bad</font>

1034
00:46:13,719 --> 00:46:21,749
accent<font color="#CCCCCC"> today alright thank you gentlemen</font>

1035
00:46:18,789 --> 00:46:21,749
thank<font color="#E5E5E5"> you thanks</font>

