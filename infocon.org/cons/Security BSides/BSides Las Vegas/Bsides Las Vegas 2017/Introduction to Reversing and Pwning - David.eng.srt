1
00:00:00,030 --> 00:00:04,200
<font color="#CCCCCC">have you got everybody my name is David</font>

2
00:00:02,429 --> 00:00:07,529
I'm<font color="#E5E5E5"> here to speak about reverse</font>

3
00:00:04,200 --> 00:00:11,670
<font color="#CCCCCC">engineering and pony I'm a security</font>

4
00:00:07,529 --> 00:00:13,879
<font color="#E5E5E5">researcher at cynic</font><font color="#CCCCCC"> I love listening to</font>

5
00:00:11,670 --> 00:00:17,430
<font color="#E5E5E5">metal playing capture the flag</font>

6
00:00:13,880 --> 00:00:21,539
<font color="#E5E5E5">snowboarding skateboarding your average</font>

7
00:00:17,430 --> 00:00:23,900
millennial I love the<font color="#CCCCCC"> Pacific Northwest</font>

8
00:00:21,539 --> 00:00:25,800
<font color="#E5E5E5">that's my home I live in San</font><font color="#CCCCCC"> Francisco I</font>

9
00:00:23,900 --> 00:00:27,779
graduated from the Evergreen<font color="#CCCCCC"> State</font>

10
00:00:25,800 --> 00:00:30,420
College there where my interest in

11
00:00:27,779 --> 00:00:33,920
ponying was sparked<font color="#E5E5E5"> I used to play with</font>

12
00:00:30,420 --> 00:00:33,920
<font color="#E5E5E5">the CTF team called the</font><font color="#CCCCCC"> canoe adducts</font>

13
00:00:33,980 --> 00:00:39,989
and I'm still learning<font color="#E5E5E5"> but seriously if</font>

14
00:00:38,100 --> 00:00:43,920
you guys have any sort of<font color="#CCCCCC"> feedback or</font>

15
00:00:39,989 --> 00:00:46,589
questions like like my host said please

16
00:00:43,920 --> 00:00:48,450
feel free to share<font color="#CCCCCC"> with me and you</font><font color="#E5E5E5"> know</font>

17
00:00:46,590 --> 00:00:52,829
we can improve the end result<font color="#E5E5E5"> of this</font>

18
00:00:48,450 --> 00:00:55,710
talk together<font color="#CCCCCC"> in general the motivation</font>

19
00:00:52,829 --> 00:00:59,309
for<font color="#E5E5E5"> reversing and ponying is cash</font>

20
00:00:55,710 --> 00:01:00,840
there's a lot of money to be made<font color="#CCCCCC"> when</font>

21
00:00:59,309 --> 00:01:02,550
something<font color="#E5E5E5"> is difficult it can feel</font>

22
00:01:00,840 --> 00:01:04,260
rewarding to overcome<font color="#CCCCCC"> obstacles and</font>

23
00:01:02,550 --> 00:01:06,600
defeat challenges so for a lot<font color="#CCCCCC"> of people</font>

24
00:01:04,260 --> 00:01:11,220
it's just<font color="#E5E5E5"> the pure challenge of it that</font>

25
00:01:06,600 --> 00:01:13,289
makes<font color="#E5E5E5"> all of this worth it</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> lift some I</font>

26
00:01:11,220 --> 00:01:15,060
listed a lot<font color="#E5E5E5"> of the more beginner</font>

27
00:01:13,290 --> 00:01:17,700
oriented bug bounties<font color="#CCCCCC"> and associated</font>

28
00:01:15,060 --> 00:01:19,229
average payouts<font color="#E5E5E5"> and I work at</font><font color="#CCCCCC"> sin acts</font>

29
00:01:17,700 --> 00:01:22,439
<font color="#CCCCCC">in that friends a</font><font color="#E5E5E5"> great bug</font><font color="#CCCCCC"> Bonnie</font><font color="#E5E5E5"> where</font>

30
00:01:19,229 --> 00:01:24,600
people like yourselves<font color="#CCCCCC"> can make money</font>

31
00:01:22,439 --> 00:01:25,770
and use skills related to<font color="#E5E5E5"> the ones that</font>

32
00:01:24,600 --> 00:01:29,640
you'll learn<font color="#E5E5E5"> in this talk in our mobile</font>

33
00:01:25,770 --> 00:01:31,500
<font color="#E5E5E5">application</font><font color="#CCCCCC"> county assembly</font><font color="#E5E5E5"> may be a</font>

34
00:01:29,640 --> 00:01:33,060
review<font color="#CCCCCC"> for some</font><font color="#E5E5E5"> of you but will briefly</font>

35
00:01:31,500 --> 00:01:34,909
introduce it to<font color="#E5E5E5"> ensure</font><font color="#CCCCCC"> that all of us</font>

36
00:01:33,060 --> 00:01:37,530
<font color="#E5E5E5">are</font><font color="#CCCCCC"> on the same page my hope is that</font>

37
00:01:34,909 --> 00:01:39,900
practical examples will keep<font color="#E5E5E5"> interest</font>

38
00:01:37,530 --> 00:01:42,990
fresh throughout<font color="#E5E5E5"> the talk for everyone</font>

39
00:01:39,900 --> 00:01:44,939
no matter<font color="#E5E5E5"> what your skill level is so</font>

40
00:01:42,990 --> 00:01:46,140
let's get let's have a round<font color="#E5E5E5"> of</font>

41
00:01:44,939 --> 00:01:48,389
<font color="#CCCCCC">questions you guys can respond with</font>

42
00:01:46,140 --> 00:01:54,000
thumbs up or thumbs down<font color="#CCCCCC"> who's seen a</font>

43
00:01:48,390 --> 00:01:59,399
debugger before<font color="#E5E5E5"> sweet</font><font color="#CCCCCC"> who's written</font><font color="#E5E5E5"> a</font>

44
00:01:54,000 --> 00:02:00,990
line<font color="#E5E5E5"> of assembly</font><font color="#CCCCCC"> also alright nice</font><font color="#E5E5E5"> so</font>

45
00:01:59,399 --> 00:02:03,420
we're going to talk about<font color="#E5E5E5"> bugs and</font>

46
00:02:00,990 --> 00:02:05,908
techniques for studying programs in on

47
00:02:03,420 --> 00:02:07,469
<font color="#E5E5E5">disk and in memory</font><font color="#CCCCCC"> and hopefully I'll</font>

48
00:02:05,909 --> 00:02:10,080
<font color="#E5E5E5">have time to</font><font color="#CCCCCC"> show you</font><font color="#E5E5E5"> guys</font><font color="#CCCCCC"> Poe</font><font color="#E5E5E5"> and</font>

49
00:02:07,469 --> 00:02:12,500
challenge at the<font color="#E5E5E5"> end so</font><font color="#CCCCCC"> let's start off</font>

50
00:02:10,080 --> 00:02:12,500
<font color="#E5E5E5">with</font><font color="#CCCCCC"> a demo</font>

51
00:02:19,460 --> 00:02:24,800
<font color="#E5E5E5">okay got</font>

52
00:02:24,900 --> 00:02:32,280
<font color="#E5E5E5">it's this program it's got</font><font color="#CCCCCC"> to strux</font>

53
00:02:29,030 --> 00:02:34,680
<font color="#CCCCCC">there's they just represent</font><font color="#E5E5E5"> various</font>

54
00:02:32,280 --> 00:02:36,239
kinds<font color="#E5E5E5"> of bears</font><font color="#CCCCCC"> so we've got a polar bear</font>

55
00:02:34,680 --> 00:02:38,459
<font color="#E5E5E5">and a grizzly</font><font color="#CCCCCC"> bear</font>

56
00:02:36,239 --> 00:02:43,250
notice that the polar bear has this

57
00:02:38,459 --> 00:02:47,489
field<font color="#CCCCCC"> that's a it's a function pointer</font>

58
00:02:43,250 --> 00:02:50,190
we've got a<font color="#E5E5E5"> secret admin shell and edit</font>

59
00:02:47,489 --> 00:02:51,750
polar bear function<font color="#E5E5E5"> to printing</font>

60
00:02:50,190 --> 00:02:53,790
functions for each kind<font color="#E5E5E5"> of bear and</font>

61
00:02:51,750 --> 00:02:56,579
here's<font color="#E5E5E5"> our menu this is</font><font color="#CCCCCC"> a simple</font><font color="#E5E5E5"> menu</font>

62
00:02:53,790 --> 00:02:58,920
driven<font color="#E5E5E5"> program you can make a grizzly</font><font color="#CCCCCC"> or</font>

63
00:02:56,579 --> 00:02:59,519
a polar bear delete your bear<font color="#E5E5E5"> print your</font>

64
00:02:58,920 --> 00:03:01,200
bear

65
00:02:59,519 --> 00:03:04,319
you can edit polar bears and<font color="#CCCCCC"> you can</font>

66
00:03:01,200 --> 00:03:07,530
exit and then we've<font color="#E5E5E5"> got</font><font color="#CCCCCC"> our main loop</font>

67
00:03:04,319 --> 00:03:11,849
here which<font color="#E5E5E5"> accepts whichever option you</font>

68
00:03:07,530 --> 00:03:15,750
<font color="#E5E5E5">want and then acts on it</font><font color="#CCCCCC"> the bear</font>

69
00:03:11,849 --> 00:03:17,358
creation<font color="#E5E5E5"> option allows you to rename</font>

70
00:03:15,750 --> 00:03:22,370
<font color="#CCCCCC">your bear if you already have</font><font color="#E5E5E5"> one that</font>

71
00:03:17,359 --> 00:03:26,010
exists<font color="#E5E5E5"> and allows you to create bears it</font>

72
00:03:22,370 --> 00:03:27,540
uses malloc<font color="#E5E5E5"> over here to allocate space</font>

73
00:03:26,010 --> 00:03:29,940
for<font color="#E5E5E5"> the bear and then prints the address</font>

74
00:03:27,540 --> 00:03:33,358
of it and then it<font color="#E5E5E5"> just accepts the</font>

75
00:03:29,940 --> 00:03:36,599
various fields<font color="#E5E5E5"> and you've got the same</font>

76
00:03:33,359 --> 00:03:38,880
<font color="#CCCCCC">thing for</font><font color="#E5E5E5"> grizzly and we've got our</font>

77
00:03:36,599 --> 00:03:43,250
deletion options here which just free

78
00:03:38,880 --> 00:03:46,769
<font color="#E5E5E5">the memory for each for either bear and</font>

79
00:03:43,250 --> 00:03:49,379
you can print your bear notice that the

80
00:03:46,769 --> 00:03:51,930
print option for the polar<font color="#CCCCCC"> bear uses the</font>

81
00:03:49,379 --> 00:03:57,298
<font color="#E5E5E5">function pointer that we saw earlier</font><font color="#CCCCCC"> and</font>

82
00:03:51,930 --> 00:03:59,579
then you can edit an exit so I've got a

83
00:03:57,299 --> 00:04:04,250
<font color="#E5E5E5">few questions for you</font><font color="#CCCCCC"> guys</font><font color="#E5E5E5"> again you can</font>

84
00:03:59,579 --> 00:04:07,410
respond<font color="#CCCCCC"> with</font><font color="#E5E5E5"> thumbs up or</font><font color="#CCCCCC"> thumbs down so</font>

85
00:04:04,250 --> 00:04:09,599
if a function<font color="#E5E5E5"> isn't called in the main</font>

86
00:04:07,410 --> 00:04:12,030
program like we saw that the that<font color="#E5E5E5"> this</font>

87
00:04:09,599 --> 00:04:13,470
the secret admin shell function is never

88
00:04:12,030 --> 00:04:15,209
<font color="#CCCCCC">referenced in the program does it get</font>

89
00:04:13,470 --> 00:04:18,139
compiled into<font color="#E5E5E5"> the binary or not</font>

90
00:04:15,209 --> 00:04:20,820
thumbs up<font color="#CCCCCC"> for yes</font><font color="#E5E5E5"> tums up down for now</font>

91
00:04:18,139 --> 00:04:22,560
<font color="#CCCCCC">alright cool</font><font color="#E5E5E5"> it looks like we have</font>

92
00:04:20,820 --> 00:04:23,810
people<font color="#CCCCCC"> here have</font><font color="#E5E5E5"> seen this kind of thing</font>

93
00:04:22,560 --> 00:04:26,729
before

94
00:04:23,810 --> 00:04:30,380
are<font color="#E5E5E5"> they grizzly and polar bears trucks</font>

95
00:04:26,729 --> 00:04:30,380
allocated next to each<font color="#CCCCCC"> other in</font><font color="#E5E5E5"> memory</font>

96
00:04:32,479 --> 00:04:39,139
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> and can the grizzly if you delete a</font>

97
00:04:36,680 --> 00:04:46,789
grizzly bear after<font color="#E5E5E5"> making</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> can you</font>

98
00:04:39,139 --> 00:04:48,580
print it afterwards it's<font color="#E5E5E5"> really credibly</font>

99
00:04:46,789 --> 00:04:52,248
written isn't it

100
00:04:48,580 --> 00:04:57,198
so<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> answer these questions formally</font>

101
00:04:52,249 --> 00:04:58,669
<font color="#E5E5E5">through throughout the talk so let's</font>

102
00:04:57,199 --> 00:05:02,659
take a look<font color="#E5E5E5"> at low level</font><font color="#CCCCCC"> programming</font>

103
00:04:58,669 --> 00:05:04,460
fundamentals<font color="#E5E5E5"> for the 32-bit</font><font color="#CCCCCC"> x86</font><font color="#E5E5E5"> CPU so a</font>

104
00:05:02,659 --> 00:05:06,889
<font color="#E5E5E5">CPU is composed of a collection of</font>

105
00:05:04,460 --> 00:05:08,748
registers<font color="#E5E5E5"> you can imagine a collection</font>

106
00:05:06,889 --> 00:05:11,569
of registers as a reusable<font color="#E5E5E5"> theater sign</font>

107
00:05:08,749 --> 00:05:13,009
<font color="#E5E5E5">notice that over here we've got the list</font>

108
00:05:11,569 --> 00:05:15,409
<font color="#E5E5E5">of movies</font><font color="#CCCCCC"> and over here we've got</font><font color="#E5E5E5"> this</font>

109
00:05:13,009 --> 00:05:18,159
running<font color="#E5E5E5"> message that just talks about</font>

110
00:05:15,409 --> 00:05:20,419
small business<font color="#E5E5E5"> in the same way</font><font color="#CCCCCC"> our</font>

111
00:05:18,159 --> 00:05:22,279
register illustration points out that

112
00:05:20,419 --> 00:05:23,990
<font color="#E5E5E5">these registers over here our</font>

113
00:05:22,279 --> 00:05:28,219
general-purpose registers and<font color="#E5E5E5"> then down</font>

114
00:05:23,990 --> 00:05:30,009
here<font color="#CCCCCC"> we've got pointers the other thing</font>

115
00:05:28,219 --> 00:05:32,719
<font color="#E5E5E5">of note is that you can reference</font>

116
00:05:30,009 --> 00:05:35,270
<font color="#CCCCCC">subsections of</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> CPU by different</font>

117
00:05:32,719 --> 00:05:38,300
aliases so like<font color="#CCCCCC"> a X registers the lower</font>

118
00:05:35,270 --> 00:05:41,029
or<font color="#CCCCCC"> talked or references the lower</font><font color="#E5E5E5"> 16</font>

119
00:05:38,300 --> 00:05:45,589
bits and then so<font color="#E5E5E5"> on</font><font color="#CCCCCC"> and so forth for the</font>

120
00:05:41,029 --> 00:05:47,300
other<font color="#E5E5E5"> labels so assembly is about as low</font>

121
00:05:45,589 --> 00:05:49,759
level<font color="#E5E5E5"> as programming can get technically</font>

122
00:05:47,300 --> 00:05:52,360
you can program in machine<font color="#E5E5E5"> code but that</font>

123
00:05:49,759 --> 00:05:55,069
<font color="#E5E5E5">wouldn't</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> be any fun for</font><font color="#CCCCCC"> anyone</font><font color="#E5E5E5"> in</font>

124
00:05:52,360 --> 00:05:57,110
<font color="#CCCCCC">assembly languages</font><font color="#E5E5E5"> are sets of</font>

125
00:05:55,069 --> 00:05:58,909
instructions<font color="#E5E5E5"> that can take up that take</font>

126
00:05:57,110 --> 00:06:00,789
operands which register which can<font color="#E5E5E5"> be</font>

127
00:05:58,909 --> 00:06:02,779
registers or constant values

128
00:06:00,789 --> 00:06:05,139
instructions are simple<font color="#E5E5E5"> logical</font>

129
00:06:02,779 --> 00:06:07,399
arithmetic or state modifying operations

130
00:06:05,139 --> 00:06:09,680
<font color="#E5E5E5">notice below we have this move</font>

131
00:06:07,399 --> 00:06:13,129
instruction which is<font color="#E5E5E5"> which just moves</font>

132
00:06:09,680 --> 00:06:15,620
the constant<font color="#CCCCCC"> 5</font><font color="#E5E5E5"> into the</font><font color="#CCCCCC"> a X register and</font>

133
00:06:13,129 --> 00:06:19,159
let's take a closer look<font color="#E5E5E5"> at illustration</font>

134
00:06:15,620 --> 00:06:20,719
of the compiled<font color="#E5E5E5"> square</font><font color="#CCCCCC"> function so it's</font>

135
00:06:19,159 --> 00:06:27,319
<font color="#E5E5E5">color coordinated which is really nice</font>

136
00:06:20,719 --> 00:06:30,680
this declaration relates to the function

137
00:06:27,319 --> 00:06:34,779
<font color="#CCCCCC">Prolog</font><font color="#E5E5E5"> which just saves the stack frame</font>

138
00:06:30,680 --> 00:06:38,779
<font color="#E5E5E5">for the collar and then allocates area</font>

139
00:06:34,779 --> 00:06:41,810
creates a new stack frame<font color="#CCCCCC"> for the body</font>

140
00:06:38,779 --> 00:06:44,180
of<font color="#E5E5E5"> this square function then we've we've</font>

141
00:06:41,810 --> 00:06:46,340
<font color="#CCCCCC">got the</font><font color="#E5E5E5"> the meat of the function which</font>

142
00:06:44,180 --> 00:06:49,040
just<font color="#E5E5E5"> multiplies</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> argument by</font>

143
00:06:46,340 --> 00:06:51,320
self<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> instruction takes the</font>

144
00:06:49,040 --> 00:06:53,570
argument<font color="#E5E5E5"> and puts it into</font><font color="#CCCCCC"> e^x and then</font>

145
00:06:51,320 --> 00:06:55,880
this<font color="#CCCCCC"> instruction takes EAX and</font>

146
00:06:53,570 --> 00:06:59,389
multiplies<font color="#CCCCCC"> it by the argument again and</font>

147
00:06:55,880 --> 00:07:01,250
stores the result<font color="#E5E5E5"> into EAX and then we</font>

148
00:06:59,389 --> 00:07:02,810
<font color="#E5E5E5">restored the</font><font color="#CCCCCC"> caller stack frame and</font>

149
00:07:01,250 --> 00:07:07,699
<font color="#CCCCCC">returned</font><font color="#E5E5E5"> control of the</font><font color="#CCCCCC"> CPU to the</font>

150
00:07:02,810 --> 00:07:09,680
<font color="#E5E5E5">caller so we've seen in general how code</font>

151
00:07:07,699 --> 00:07:11,810
is represented at a low level<font color="#CCCCCC"> but what</font>

152
00:07:09,680 --> 00:07:14,389
does a process<font color="#E5E5E5"> look like at</font><font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> in</font>

153
00:07:11,810 --> 00:07:15,740
memory I'm sure most of you<font color="#CCCCCC"> have heard</font>

154
00:07:14,389 --> 00:07:18,620
others<font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> the heap and</font><font color="#CCCCCC"> the stack</font>

155
00:07:15,740 --> 00:07:22,010
<font color="#E5E5E5">these are two regions that most variable</font>

156
00:07:18,620 --> 00:07:24,410
data is stored<font color="#CCCCCC"> in heap is</font><font color="#E5E5E5"> for variable</font>

157
00:07:22,010 --> 00:07:25,940
sized<font color="#E5E5E5"> data and the stack is primarily</font>

158
00:07:24,410 --> 00:07:27,889
for local<font color="#CCCCCC"> variables and function</font>

159
00:07:25,940 --> 00:07:32,479
arguments whose size is<font color="#E5E5E5"> known at compile</font>

160
00:07:27,889 --> 00:07:34,250
time<font color="#E5E5E5"> the the this memory layout</font>

161
00:07:32,479 --> 00:07:35,870
illustration is extremely simplified

162
00:07:34,250 --> 00:07:39,289
there are segments<font color="#E5E5E5"> of memory</font><font color="#CCCCCC"> that aren't</font>

163
00:07:35,870 --> 00:07:40,729
shown here for brevity<font color="#E5E5E5"> row data is known</font>

164
00:07:39,289 --> 00:07:42,080
as read-only data<font color="#E5E5E5"> it's used for</font>

165
00:07:40,729 --> 00:07:45,139
immutable values

166
00:07:42,080 --> 00:07:51,859
<font color="#CCCCCC">thus read-only the data segment</font><font color="#E5E5E5"> is used</font>

167
00:07:45,139 --> 00:07:54,320
for<font color="#E5E5E5"> initialized global variables so the</font>

168
00:07:51,860 --> 00:07:58,250
stack frame<font color="#E5E5E5"> holds the function metadata</font>

169
00:07:54,320 --> 00:08:00,349
and local variables when a function is

170
00:07:58,250 --> 00:08:02,840
<font color="#CCCCCC">called the</font><font color="#E5E5E5"> color has</font><font color="#CCCCCC"> to pass along</font>

171
00:08:00,350 --> 00:08:04,400
arguments<font color="#CCCCCC"> to and a pointer to</font><font color="#E5E5E5"> the</font>

172
00:08:02,840 --> 00:08:06,109
instruction<font color="#E5E5E5"> following the function call</font>

173
00:08:04,400 --> 00:08:08,359
<font color="#CCCCCC">so that control can be returned back to</font>

174
00:08:06,110 --> 00:08:10,280
the caller the<font color="#E5E5E5"> Cawley has to save the</font>

175
00:08:08,360 --> 00:08:12,530
color stack frame and then allocate

176
00:08:10,280 --> 00:08:15,888
space on the stack<font color="#E5E5E5"> for local</font><font color="#CCCCCC"> variables</font>

177
00:08:12,530 --> 00:08:19,849
notice that arguments get pushed on

178
00:08:15,889 --> 00:08:21,620
right to left<font color="#CCCCCC"> so argument two gets</font>

179
00:08:19,849 --> 00:08:25,460
pushed on first and then<font color="#E5E5E5"> argument</font><font color="#CCCCCC"> one</font>

180
00:08:21,620 --> 00:08:27,530
gets pushed on then the caller can save

181
00:08:25,460 --> 00:08:29,239
its return address and<font color="#E5E5E5"> the colleague can</font>

182
00:08:27,530 --> 00:08:31,700
save the stack frame<font color="#E5E5E5"> for the caller and</font>

183
00:08:29,240 --> 00:08:34,430
then local variables<font color="#CCCCCC"> are pushed on</font><font color="#E5E5E5"> top</font>

184
00:08:31,700 --> 00:08:37,789
down<font color="#E5E5E5"> so</font><font color="#CCCCCC"> var one gets pushed on first and</font>

185
00:08:34,429 --> 00:08:39,679
<font color="#E5E5E5">then var two gets pushed on so now that</font>

186
00:08:37,789 --> 00:08:41,390
we<font color="#E5E5E5"> have the basics</font><font color="#CCCCCC"> down for looking at</font>

187
00:08:39,679 --> 00:08:43,750
assembly<font color="#E5E5E5"> let's try our hand at a simple</font>

188
00:08:41,390 --> 00:08:43,750
cracking

189
00:08:52,810 --> 00:08:57,878
so on the left here<font color="#CCCCCC"> I I'm interacting</font>

190
00:08:55,810 --> 00:09:00,310
<font color="#E5E5E5">with this reverse</font><font color="#CCCCCC"> me binary and</font><font color="#E5E5E5"> then on</font>

191
00:08:57,879 --> 00:09:03,370
the right<font color="#CCCCCC"> and I've got a disassembler</font>

192
00:09:00,310 --> 00:09:05,439
open this is called<font color="#CCCCCC"> radar II</font><font color="#E5E5E5"> and all it</font>

193
00:09:03,370 --> 00:09:06,970
will look a<font color="#E5E5E5"> little unfamiliar at first</font>

194
00:09:05,439 --> 00:09:08,800
and all<font color="#CCCCCC"> introduce pieces of it and</font>

195
00:09:06,970 --> 00:09:12,220
<font color="#CCCCCC">you'll start to</font><font color="#E5E5E5"> become a little</font><font color="#CCCCCC"> more</font>

196
00:09:08,800 --> 00:09:14,139
<font color="#CCCCCC">familiar as I move along</font><font color="#E5E5E5"> so let's just</font>

197
00:09:12,220 --> 00:09:17,079
try entering some garbage<font color="#E5E5E5"> data into this</font>

198
00:09:14,139 --> 00:09:20,680
<font color="#E5E5E5">binary and we see that obviously</font><font color="#CCCCCC"> that</font>

199
00:09:17,079 --> 00:09:24,638
<font color="#E5E5E5">failed</font><font color="#CCCCCC"> but what we can do with this is</font>

200
00:09:20,680 --> 00:09:26,649
we can take this<font color="#E5E5E5"> failure string and see</font>

201
00:09:24,639 --> 00:09:29,439
in the<font color="#CCCCCC"> binary where it's referenced</font><font color="#E5E5E5"> in</font>

202
00:09:26,649 --> 00:09:31,149
the code and start to figure<font color="#E5E5E5"> out how</font>

203
00:09:29,439 --> 00:09:35,230
it's working internally<font color="#E5E5E5"> and see what is</font>

204
00:09:31,149 --> 00:09:38,439
the correct data<font color="#E5E5E5"> so I'll just pay</font><font color="#CCCCCC"> it</font>

205
00:09:35,230 --> 00:09:42,459
I'll<font color="#E5E5E5"> just search through the strings in</font>

206
00:09:38,439 --> 00:09:45,009
<font color="#E5E5E5">the binary for fail is this beautiful</font>

207
00:09:42,459 --> 00:09:47,699
<font color="#E5E5E5">for everyone probably not huh you guys</font>

208
00:09:45,009 --> 00:09:47,699
<font color="#E5E5E5">want me to make</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> bigger</font>

209
00:09:54,010 --> 00:10:02,650
is that a little<font color="#E5E5E5"> better cool</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

210
00:09:57,820 --> 00:10:06,820
<font color="#E5E5E5">so we see that the failure the failure</font>

211
00:10:02,650 --> 00:10:09,220
<font color="#CCCCCC">straining has this has an address</font><font color="#E5E5E5"> right</font>

212
00:10:06,820 --> 00:10:10,990
here<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the address of the</font><font color="#E5E5E5"> failure</font>

213
00:10:09,220 --> 00:10:12,700
string<font color="#E5E5E5"> so we can take</font><font color="#CCCCCC"> that address and</font>

214
00:10:10,990 --> 00:10:16,300
<font color="#E5E5E5">we can cross-reference it with the code</font>

215
00:10:12,700 --> 00:10:19,510
<font color="#CCCCCC">and we see that it's used in the main</font>

216
00:10:16,300 --> 00:10:21,969
function<font color="#CCCCCC"> and in this Sim dot is a winner</font>

217
00:10:19,510 --> 00:10:23,260
<font color="#E5E5E5">function so first let's take a look</font><font color="#CCCCCC"> at</font>

218
00:10:21,970 --> 00:10:26,680
where it's<font color="#E5E5E5"> used in main so we'll seek</font>

219
00:10:23,260 --> 00:10:30,610
this<font color="#E5E5E5"> to main and then we'll print out</font>

220
00:10:26,680 --> 00:10:32,920
the disassembly<font color="#CCCCCC"> and it's a little much</font>

221
00:10:30,610 --> 00:10:36,040
but we<font color="#E5E5E5"> can scroll up to the top and see</font>

222
00:10:32,920 --> 00:10:37,990
what's going on<font color="#E5E5E5"> so we start to see</font>

223
00:10:36,040 --> 00:10:40,839
things of interest look this is<font color="#E5E5E5"> f gets</font>

224
00:10:37,990 --> 00:10:43,540
which is<font color="#E5E5E5"> receiving our input and</font><font color="#CCCCCC"> print F</font>

225
00:10:40,840 --> 00:10:45,490
over here<font color="#E5E5E5"> unfortunately it's going off</font>

226
00:10:43,540 --> 00:10:50,680
the end<font color="#E5E5E5"> of the screen but you</font><font color="#CCCCCC"> can see</font>

227
00:10:45,490 --> 00:10:55,570
here it says<font color="#E5E5E5"> enter an input so that's</font>

228
00:10:50,680 --> 00:10:57,310
our first input prompt and as we learned

229
00:10:55,570 --> 00:11:00,280
that arguments are pushed on

230
00:10:57,310 --> 00:11:02,079
<font color="#CCCCCC">right-to-left</font><font color="#E5E5E5"> unfortunately it's going</font>

231
00:11:00,280 --> 00:11:04,480
off this<font color="#E5E5E5"> screen but radar gives us this</font>

232
00:11:02,080 --> 00:11:06,880
<font color="#E5E5E5">really nice function prototype for F</font>

233
00:11:04,480 --> 00:11:09,190
gets and it shows us<font color="#E5E5E5"> the prototype so on</font>

234
00:11:06,880 --> 00:11:10,600
the<font color="#E5E5E5"> rightmost we have the file pointer</font>

235
00:11:09,190 --> 00:11:13,090
for<font color="#E5E5E5"> the stream that we're getting input</font>

236
00:11:10,600 --> 00:11:14,770
from<font color="#E5E5E5"> and then we've got the size of the</font>

237
00:11:13,090 --> 00:11:17,980
input<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> s which is</font><font color="#E5E5E5"> the</font>

238
00:11:14,770 --> 00:11:20,650
<font color="#E5E5E5">destination the destination buffer so</font>

239
00:11:17,980 --> 00:11:23,320
this<font color="#CCCCCC"> EAX at the top</font><font color="#E5E5E5"> pushed on</font><font color="#CCCCCC"> it s</font><font color="#E5E5E5"> this</font>

240
00:11:20,650 --> 00:11:26,470
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the file</font><font color="#E5E5E5"> pointer and then</font><font color="#CCCCCC"> hex</font><font color="#E5E5E5"> a</font>

241
00:11:23,320 --> 00:11:29,220
that's the size and then local<font color="#CCCCCC"> 20 hex</font>

242
00:11:26,470 --> 00:11:32,230
<font color="#E5E5E5">that's that's where our first input is</font>

243
00:11:29,220 --> 00:11:37,030
so we can take that<font color="#CCCCCC"> out</font><font color="#E5E5E5"> remember</font><font color="#CCCCCC"> that as</font>

244
00:11:32,230 --> 00:11:40,450
<font color="#CCCCCC">we reverse</font><font color="#E5E5E5"> continue to reverse here's</font>

245
00:11:37,030 --> 00:11:46,030
our second input<font color="#E5E5E5"> which is stored in</font>

246
00:11:40,450 --> 00:11:49,770
local 16 hex<font color="#E5E5E5"> and then we've got this</font>

247
00:11:46,030 --> 00:11:52,780
call to stir it along which just<font color="#E5E5E5"> takes</font>

248
00:11:49,770 --> 00:11:55,060
local 20 hex<font color="#E5E5E5"> and converts it</font><font color="#CCCCCC"> to an</font>

249
00:11:52,780 --> 00:11:58,660
integer<font color="#E5E5E5"> we can tell</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's an integer</font>

250
00:11:55,060 --> 00:12:01,270
<font color="#E5E5E5">or decimal rather because hex a is 10</font>

251
00:11:58,660 --> 00:12:04,810
and so that's the base that start along

252
00:12:01,270 --> 00:12:07,449
<font color="#CCCCCC">as using anyway the output is taken and</font>

253
00:12:04,810 --> 00:12:09,040
compared against this<font color="#E5E5E5"> hex</font><font color="#CCCCCC"> 5:39</font>

254
00:12:07,450 --> 00:12:11,710
<font color="#E5E5E5">return value</font><font color="#CCCCCC"> for every function can be</font>

255
00:12:09,040 --> 00:12:14,160
expected<font color="#E5E5E5"> to be in the eix register for</font>

256
00:12:11,710 --> 00:12:17,620
<font color="#E5E5E5">those of you that can't see this is that</font>

257
00:12:14,160 --> 00:12:21,760
the<font color="#CCCCCC"> EAX register it's compared with hex</font>

258
00:12:17,620 --> 00:12:23,860
539 which is in decimal<font color="#CCCCCC"> is</font><font color="#E5E5E5"> 1</font><font color="#CCCCCC"> 337 so</font>

259
00:12:21,760 --> 00:12:26,170
that's our first<font color="#E5E5E5"> correct input we know</font>

260
00:12:23,860 --> 00:12:28,780
that<font color="#E5E5E5"> then sim dot is a winner is called</font>

261
00:12:26,170 --> 00:12:31,689
if that comparison passes so we<font color="#E5E5E5"> can seek</font>

262
00:12:28,780 --> 00:12:37,660
<font color="#CCCCCC">two</font><font color="#E5E5E5"> sim dot is a winner and</font><font color="#CCCCCC"> see what's</font>

263
00:12:31,690 --> 00:12:41,070
going on<font color="#E5E5E5"> there so all that happens here</font>

264
00:12:37,660 --> 00:12:43,180
<font color="#CCCCCC">is that stir comp compares two strings</font>

265
00:12:41,070 --> 00:12:44,950
<font color="#CCCCCC">word R is being nice to us again</font><font color="#E5E5E5"> and</font>

266
00:12:43,180 --> 00:12:48,280
<font color="#E5E5E5">showing us the string that's referenced</font>

267
00:12:44,950 --> 00:12:51,010
to<font color="#CCCCCC"> 3 ei 5 is our second correct input</font><font color="#E5E5E5"> so</font>

268
00:12:48,280 --> 00:12:53,140
I can go<font color="#CCCCCC"> back over to where</font><font color="#E5E5E5"> we're</font>

269
00:12:51,010 --> 00:12:56,110
interacting<font color="#CCCCCC"> with the binary</font><font color="#E5E5E5"> and then run</font>

270
00:12:53,140 --> 00:12:59,199
it again<font color="#E5E5E5"> for our first input</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> 1</font><font color="#CCCCCC"> 337</font>

271
00:12:56,110 --> 00:13:08,410
and<font color="#CCCCCC"> our second input is 2</font><font color="#E5E5E5"> 3 ei 5 and we</font>

272
00:12:59,200 --> 00:13:10,240
get<font color="#E5E5E5"> you win instead of fail awesome so</font>

273
00:13:08,410 --> 00:13:11,740
what did we<font color="#E5E5E5"> learn we learned that string</font>

274
00:13:10,240 --> 00:13:16,780
<font color="#CCCCCC">cross-references are incredibly</font><font color="#E5E5E5"> useful</font>

275
00:13:11,740 --> 00:13:20,740
<font color="#E5E5E5">for finding related code to whatever</font>

276
00:13:16,780 --> 00:13:23,949
<font color="#E5E5E5">prompted is that we're seeing return</font>

277
00:13:20,740 --> 00:13:25,120
values are always<font color="#E5E5E5"> in EAX and the order</font>

278
00:13:23,950 --> 00:13:28,780
the arguments are pushed onto the stack

279
00:13:25,120 --> 00:13:30,490
from right to left<font color="#E5E5E5"> having</font><font color="#CCCCCC"> done some</font>

280
00:13:28,780 --> 00:13:32,650
simple reversing let's try our hand at

281
00:13:30,490 --> 00:13:34,120
<font color="#E5E5E5">somepony I'll introduce some examples</font>

282
00:13:32,650 --> 00:13:38,110
<font color="#E5E5E5">here all</font><font color="#CCCCCC"> of these will be available as</font>

283
00:13:34,120 --> 00:13:39,460
examples<font color="#CCCCCC"> to you guys afterwards</font><font color="#E5E5E5"> so stack</font>

284
00:13:38,110 --> 00:13:40,660
overflows are mostly dead<font color="#E5E5E5"> now but</font>

285
00:13:39,460 --> 00:13:42,640
<font color="#E5E5E5">they're still worth mentioning in this</font>

286
00:13:40,660 --> 00:13:44,439
<font color="#E5E5E5">example an</font><font color="#CCCCCC"> out-of-bounds write</font><font color="#E5E5E5"> allows</font>

287
00:13:42,640 --> 00:13:47,319
<font color="#E5E5E5">the user to write to a local variable</font>

288
00:13:44,440 --> 00:13:49,990
<font color="#CCCCCC">what you should</font><font color="#E5E5E5"> see here</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> hex 10</font>

289
00:13:47,320 --> 00:13:52,150
is<font color="#E5E5E5"> the amount of input</font><font color="#CCCCCC"> that's allowed</font>

290
00:13:49,990 --> 00:13:54,330
from F gets and then we've only

291
00:13:52,150 --> 00:13:57,660
<font color="#E5E5E5">allocated 10 bytes in</font><font color="#CCCCCC"> the buffer so</font>

292
00:13:54,330 --> 00:14:03,370
because arguments are pushed on top down

293
00:13:57,660 --> 00:14:04,839
we're allowed<font color="#CCCCCC"> to write to</font><font color="#E5E5E5"> I format</font>

294
00:14:03,370 --> 00:14:06,640
string bugs<font color="#E5E5E5"> exist</font><font color="#CCCCCC"> where programmers</font>

295
00:14:04,840 --> 00:14:09,100
allow the user to<font color="#CCCCCC"> specify the format</font>

296
00:14:06,640 --> 00:14:11,710
<font color="#CCCCCC">string that printf or</font><font color="#E5E5E5"> one of its sibling</font>

297
00:14:09,100 --> 00:14:13,660
functions take they allow one to<font color="#E5E5E5"> read</font>

298
00:14:11,710 --> 00:14:16,960
<font color="#E5E5E5">information from</font><font color="#CCCCCC"> the stack</font><font color="#E5E5E5"> or write to</font>

299
00:14:13,660 --> 00:14:19,329
it with a<font color="#CCCCCC"> %</font><font color="#E5E5E5"> end modifier in this example</font>

300
00:14:16,960 --> 00:14:21,610
shown here<font color="#CCCCCC"> notice that I'm reading data</font>

301
00:14:19,330 --> 00:14:24,490
off the<font color="#E5E5E5"> stack</font>

302
00:14:21,610 --> 00:14:27,130
hex encoding with the<font color="#CCCCCC"> % ex modifier</font><font color="#E5E5E5"> so</font>

303
00:14:24,490 --> 00:14:29,650
as my buffer<font color="#E5E5E5"> I just enter in the format</font>

304
00:14:27,130 --> 00:14:32,380
string<font color="#CCCCCC"> because my inputs pass</font><font color="#E5E5E5"> directly</font>

305
00:14:29,650 --> 00:14:36,490
<font color="#E5E5E5">to printf and i get raw data off the</font>

306
00:14:32,380 --> 00:14:38,860
<font color="#E5E5E5">stack in this example I'm showing a</font>

307
00:14:36,490 --> 00:14:42,880
trick called<font color="#E5E5E5"> a direct parameter access</font>

308
00:14:38,860 --> 00:14:44,290
so I noticed that<font color="#E5E5E5"> the third piece of</font>

309
00:14:42,880 --> 00:14:47,710
data<font color="#E5E5E5"> that I got off the stack started in</font>

310
00:14:44,290 --> 00:14:49,030
804<font color="#E5E5E5"> 8 which is in the code segment as</font>

311
00:14:47,710 --> 00:14:52,150
you<font color="#CCCCCC"> practice you'll start to see that</font>

312
00:14:49,030 --> 00:14:55,319
and so I can access<font color="#CCCCCC"> that directly since</font>

313
00:14:52,150 --> 00:14:57,520
it's the first<font color="#E5E5E5"> since</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> the third</font>

314
00:14:55,320 --> 00:14:58,990
piece<font color="#CCCCCC"> of</font><font color="#E5E5E5"> data that I got off the stack I</font>

315
00:14:57,520 --> 00:15:01,780
can just provide<font color="#E5E5E5"> 3 as the direct</font>

316
00:14:58,990 --> 00:15:03,340
parameter wild<font color="#E5E5E5"> puppies are an</font>

317
00:15:01,780 --> 00:15:05,560
increasingly common bug class now they

318
00:15:03,340 --> 00:15:08,320
exist when a programmer<font color="#E5E5E5"> doesn't account</font>

319
00:15:05,560 --> 00:15:10,959
for cases allowing<font color="#E5E5E5"> an attacker limited</font>

320
00:15:08,320 --> 00:15:12,490
control<font color="#E5E5E5"> over</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> size of a copy or when</font>

321
00:15:10,960 --> 00:15:19,420
the programmer simply allows a complete

322
00:15:12,490 --> 00:15:21,490
<font color="#E5E5E5">copy large enough to cause</font><font color="#CCCCCC"> a fault yet</font>

323
00:15:19,420 --> 00:15:26,439
this example will<font color="#CCCCCC"> be available to you</font>

324
00:15:21,490 --> 00:15:28,180
<font color="#E5E5E5">guys afterwards</font><font color="#CCCCCC"> use after freeze</font><font color="#E5E5E5"> exists</font>

325
00:15:26,440 --> 00:15:30,550
where programmers it forget to set

326
00:15:28,180 --> 00:15:32,650
references to allocated<font color="#E5E5E5"> data to null as</font>

327
00:15:30,550 --> 00:15:34,510
you guys pointed out<font color="#CCCCCC"> earlier after</font>

328
00:15:32,650 --> 00:15:37,300
freeing them allowing references to be

329
00:15:34,510 --> 00:15:39,069
reused<font color="#CCCCCC"> in conjunction with</font><font color="#E5E5E5"> this it's</font>

330
00:15:37,300 --> 00:15:41,229
worth mentioning<font color="#CCCCCC"> how malloc organizes</font>

331
00:15:39,070 --> 00:15:44,560
allocations on the heap the malloc

332
00:15:41,230 --> 00:15:47,170
algorithm used in this particular brand

333
00:15:44,560 --> 00:15:50,619
<font color="#E5E5E5">of Linux shows shown here illustrates</font>

334
00:15:47,170 --> 00:15:53,020
<font color="#E5E5E5">this so allocations are organized</font>

335
00:15:50,620 --> 00:15:54,760
<font color="#E5E5E5">according to size there's like you can</font>

336
00:15:53,020 --> 00:16:00,010
<font color="#E5E5E5">imagine bins like there's very</font><font color="#CCCCCC"> small</font>

337
00:15:54,760 --> 00:16:03,160
small medium<font color="#CCCCCC"> large</font><font color="#E5E5E5"> huge so in this</font>

338
00:16:00,010 --> 00:16:05,410
example<font color="#E5E5E5"> I allocate 20 bytes and then I</font>

339
00:16:03,160 --> 00:16:07,750
free it and allocate 15 bytes<font color="#CCCCCC"> in free</font>

340
00:16:05,410 --> 00:16:09,969
and over here you see<font color="#E5E5E5"> that the same</font>

341
00:16:07,750 --> 00:16:19,030
address is reused<font color="#E5E5E5"> to allocate those two</font>

342
00:16:09,970 --> 00:16:22,060
<font color="#CCCCCC">pieces of information alysus there's a</font>

343
00:16:19,030 --> 00:16:27,069
lot of tools but showing<font color="#E5E5E5"> here some of</font>

344
00:16:22,060 --> 00:16:29,650
<font color="#E5E5E5">the most popular ones</font><font color="#CCCCCC"> on the left is</font><font color="#E5E5E5"> Ida</font>

345
00:16:27,070 --> 00:16:30,910
<font color="#E5E5E5">this is like a premier static analysis</font>

346
00:16:29,650 --> 00:16:32,860
tool it's awesome because<font color="#E5E5E5"> it's got a</font>

347
00:16:30,910 --> 00:16:34,969
<font color="#CCCCCC">really</font><font color="#E5E5E5"> great decompilers the industry</font>

348
00:16:32,860 --> 00:16:38,149
standard for analyzing disassembly

349
00:16:34,970 --> 00:16:41,810
on the right<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is Voltron</font><font color="#CCCCCC"> which is a</font>

350
00:16:38,149 --> 00:16:43,459
it's<font color="#E5E5E5"> a</font><font color="#CCCCCC"> gdb in it you can think of</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> as</font>

351
00:16:41,810 --> 00:16:47,119
like<font color="#CCCCCC"> kind of a visual front-end to gdb</font>

352
00:16:43,459 --> 00:16:48,709
you can<font color="#E5E5E5"> organize</font><font color="#CCCCCC"> panes</font><font color="#E5E5E5"> so there's a</font>

353
00:16:47,120 --> 00:16:54,050
<font color="#E5E5E5">break</font><font color="#CCCCCC"> points pain there's a back-trace</font>

354
00:16:48,709 --> 00:16:55,849
pain and registers<font color="#CCCCCC"> pone tools is</font>

355
00:16:54,050 --> 00:16:57,439
generally used for<font color="#E5E5E5"> connecting to and</font>

356
00:16:55,850 --> 00:16:59,600
interacting with remote services but

357
00:16:57,439 --> 00:17:01,519
it's<font color="#E5E5E5"> useful for so many purposes</font>

358
00:16:59,600 --> 00:17:03,649
surrounding the process of exploit

359
00:17:01,519 --> 00:17:05,030
development<font color="#E5E5E5"> in the screenshot the user</font>

360
00:17:03,649 --> 00:17:06,859
is testing some shell code and

361
00:17:05,030 --> 00:17:08,839
interacting<font color="#CCCCCC"> with it notice at the bottom</font>

362
00:17:06,859 --> 00:17:11,990
<font color="#E5E5E5">there's the result</font><font color="#CCCCCC"> of ID which shows</font>

363
00:17:08,839 --> 00:17:16,639
that<font color="#E5E5E5"> we're the zero cool user and here's</font>

364
00:17:11,990 --> 00:17:19,939
the command ID<font color="#E5E5E5"> check</font><font color="#CCCCCC"> suck is a</font><font color="#E5E5E5"> helpful</font>

365
00:17:16,640 --> 00:17:21,949
<font color="#E5E5E5">tool for showing which exploitation</font>

366
00:17:19,939 --> 00:17:25,280
mitigations<font color="#CCCCCC"> are explore enabled in a</font>

367
00:17:21,949 --> 00:17:29,270
given binary<font color="#E5E5E5"> so notice that the NX is</font>

368
00:17:25,280 --> 00:17:31,309
enabled<font color="#E5E5E5"> on this binary so basically all</font>

369
00:17:29,270 --> 00:17:38,990
the data segments are marked not

370
00:17:31,309 --> 00:17:41,840
executable so<font color="#E5E5E5"> stack heap</font><font color="#CCCCCC"> data segment so</font>

371
00:17:38,990 --> 00:17:43,850
what what now<font color="#CCCCCC"> well I provided some</font>

372
00:17:41,840 --> 00:17:45,289
<font color="#E5E5E5">challenges and a bigger inbox for you</font>

373
00:17:43,850 --> 00:17:48,020
guys to play<font color="#E5E5E5"> with take a picture of</font><font color="#CCCCCC"> this</font>

374
00:17:45,289 --> 00:17:51,100
slide if you<font color="#CCCCCC"> guys want</font><font color="#E5E5E5"> to play around</font>

375
00:17:48,020 --> 00:17:54,110
<font color="#E5E5E5">with some</font><font color="#CCCCCC"> of the examples that</font><font color="#E5E5E5"> I showed</font>

376
00:17:51,100 --> 00:17:56,418
<font color="#E5E5E5">and in return for write-ups on these</font>

377
00:17:54,110 --> 00:17:59,270
<font color="#E5E5E5">challenges and a few extras that I've</font>

378
00:17:56,419 --> 00:18:01,880
thrown<font color="#E5E5E5"> in there I'm giving out books</font><font color="#CCCCCC"> you</font>

379
00:17:59,270 --> 00:18:03,260
guys send<font color="#CCCCCC"> me a good write-up that I can</font>

380
00:18:01,880 --> 00:18:06,370
tell wasn't just copied off the<font color="#E5E5E5"> internet</font>

381
00:18:03,260 --> 00:18:08,960
I'll gladly reward you guys with a book

382
00:18:06,370 --> 00:18:12,530
yeah there's extra<font color="#CCCCCC"> poni</font><font color="#E5E5E5"> bowls</font><font color="#CCCCCC"> too that I</font>

383
00:18:08,960 --> 00:18:15,190
haven't<font color="#E5E5E5"> shown in my slides you guys want</font>

384
00:18:12,530 --> 00:18:15,190
me<font color="#CCCCCC"> to</font><font color="#E5E5E5"> go back</font><font color="#CCCCCC"> sorry</font>

385
00:18:20,060 --> 00:18:24,720
<font color="#CCCCCC">alright and I'll make the slides</font>

386
00:18:21,750 --> 00:18:27,390
<font color="#E5E5E5">available afterwards do so how about</font>

387
00:18:24,720 --> 00:18:33,060
bypassing mitigations want to be there

388
00:18:27,390 --> 00:18:37,560
right<font color="#CCCCCC"> so let's try up own challenge so</font>

389
00:18:33,060 --> 00:18:47,159
we're gonna go<font color="#CCCCCC"> back to</font><font color="#E5E5E5"> this bears</font>

390
00:18:37,560 --> 00:18:48,540
example<font color="#E5E5E5"> get control of my mouse okay so</font>

391
00:18:47,160 --> 00:18:51,810
I'm interacting<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> binary in this</font>

392
00:18:48,540 --> 00:18:54,690
<font color="#E5E5E5">pain basically I made a binary and it</font>

393
00:18:51,810 --> 00:18:57,780
printed out its address just remember it

394
00:18:54,690 --> 00:18:58,890
<font color="#E5E5E5">ends in 0</font><font color="#CCCCCC"> or e zero zero eight</font><font color="#E5E5E5"> here I'll</font>

395
00:18:57,780 --> 00:19:05,300
make<font color="#E5E5E5"> it bigger for you guys in the back</font>

396
00:18:58,890 --> 00:19:13,170
<font color="#CCCCCC">oh wow this</font><font color="#E5E5E5"> is not it's on my screen</font>

397
00:19:05,300 --> 00:19:15,210
<font color="#CCCCCC">geez so sorry y'all better</font><font color="#E5E5E5"> okay alright</font>

398
00:19:13,170 --> 00:19:17,520
so<font color="#CCCCCC"> we</font><font color="#E5E5E5"> made a we made a grizzly</font><font color="#CCCCCC"> bear and</font>

399
00:19:15,210 --> 00:19:20,090
then now it's<font color="#E5E5E5"> waiting for</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to do</font>

400
00:19:17,520 --> 00:19:22,710
something<font color="#E5E5E5"> else so how about let's try</font>

401
00:19:20,090 --> 00:19:24,510
one<font color="#CCCCCC"> of one of the</font><font color="#E5E5E5"> questions I asked you</font>

402
00:19:22,710 --> 00:19:27,120
guys<font color="#E5E5E5"> was can we delete it and then</font>

403
00:19:24,510 --> 00:19:29,430
<font color="#E5E5E5">reference it again just for those of you</font>

404
00:19:27,120 --> 00:19:34,919
who don't<font color="#E5E5E5"> believe me let's delete our</font>

405
00:19:29,430 --> 00:19:38,880
<font color="#CCCCCC">grizzly and then print it so printing</font>

406
00:19:34,920 --> 00:19:42,150
still worked<font color="#CCCCCC"> we got five months or one</font>

407
00:19:38,880 --> 00:19:44,520
<font color="#CCCCCC">one-month hibernated rather so what</font>

408
00:19:42,150 --> 00:19:47,640
happens if<font color="#E5E5E5"> we create a polar bear in its</font>

409
00:19:44,520 --> 00:19:50,100
place so<font color="#CCCCCC"> that same address</font><font color="#E5E5E5"> ending in</font>

410
00:19:47,640 --> 00:19:53,520
<font color="#E5E5E5">zero zero eight was assigned to</font><font color="#CCCCCC"> our</font>

411
00:19:50,100 --> 00:20:00,540
polar bear that<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> just made now if</font>

412
00:19:53,520 --> 00:20:04,139
we fill in the<font color="#CCCCCC"> fields and then do our</font>

413
00:20:00,540 --> 00:20:06,300
grizzly print again what happens well we

414
00:20:04,140 --> 00:20:09,360
got this really<font color="#E5E5E5"> crazy big number</font><font color="#CCCCCC"> of</font>

415
00:20:06,300 --> 00:20:14,090
months hibernated so what do you<font color="#CCCCCC"> guys</font>

416
00:20:09,360 --> 00:20:14,090
<font color="#CCCCCC">think that</font><font color="#E5E5E5"> is here's a hint</font>

417
00:20:15,890 --> 00:20:22,529
so the<font color="#E5E5E5"> months hibernated is 20 bytes</font>

418
00:20:19,470 --> 00:20:27,270
<font color="#E5E5E5">into the struct</font><font color="#CCCCCC"> see that sixteen and</font>

419
00:20:22,529 --> 00:20:29,490
<font color="#CCCCCC">four and see what's at that same</font>

420
00:20:27,270 --> 00:20:33,150
<font color="#E5E5E5">location</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the polar</font><font color="#CCCCCC"> bear it's the</font>

421
00:20:29,490 --> 00:20:35,610
function pointer<font color="#E5E5E5"> so we just leaked</font>

422
00:20:33,150 --> 00:20:41,039
memory<font color="#E5E5E5"> we now know where</font><font color="#CCCCCC"> the function is</font>

423
00:20:35,610 --> 00:20:45,149
<font color="#E5E5E5">in memory so how can we use</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> well</font>

424
00:20:41,039 --> 00:20:47,129
the offset<font color="#E5E5E5"> between the print polar bear</font>

425
00:20:45,150 --> 00:20:49,529
function and our<font color="#CCCCCC"> secret admin shell</font>

426
00:20:47,130 --> 00:20:50,820
function<font color="#E5E5E5"> always stays the</font><font color="#CCCCCC"> same so if we</font>

427
00:20:49,529 --> 00:20:53,659
<font color="#E5E5E5">just know the difference in those two</font>

428
00:20:50,820 --> 00:20:57,029
<font color="#CCCCCC">locations</font><font color="#E5E5E5"> in memory then we can</font>

429
00:20:53,659 --> 00:20:59,840
<font color="#E5E5E5">calculate the location of the secret</font>

430
00:20:57,029 --> 00:21:04,230
<font color="#E5E5E5">admin shell in memory as well and then</font>

431
00:20:59,840 --> 00:21:07,379
we<font color="#CCCCCC"> can create a new grizzly with</font><font color="#E5E5E5"> a with</font>

432
00:21:04,230 --> 00:21:09,270
that with that<font color="#CCCCCC"> address</font><font color="#E5E5E5"> of the secret</font>

433
00:21:07,380 --> 00:21:11,340
admin shell function as its hibernation

434
00:21:09,270 --> 00:21:13,529
<font color="#CCCCCC">as a number of</font><font color="#E5E5E5"> months hibernated and</font>

435
00:21:11,340 --> 00:21:15,840
then we can refer to<font color="#CCCCCC"> that grizzly</font><font color="#E5E5E5"> as a</font>

436
00:21:13,529 --> 00:21:17,820
polar bear<font color="#E5E5E5"> since those references can</font>

437
00:21:15,840 --> 00:21:18,209
get<font color="#CCCCCC"> mixed right if we delete a polar</font>

438
00:21:17,820 --> 00:21:20,279
bear

439
00:21:18,210 --> 00:21:22,860
<font color="#E5E5E5">and then allocate a grizzly and it's in</font>

440
00:21:20,279 --> 00:21:24,779
its place then that<font color="#E5E5E5"> reference to the</font>

441
00:21:22,860 --> 00:21:27,270
polar<font color="#CCCCCC"> bear</font><font color="#E5E5E5"> still exists if we print our</font>

442
00:21:24,779 --> 00:21:30,270
polar bear<font color="#CCCCCC"> after that it'll use the</font>

443
00:21:27,270 --> 00:21:36,299
<font color="#E5E5E5">address that</font><font color="#CCCCCC"> we've provided</font><font color="#E5E5E5"> it so let me</font>

444
00:21:30,270 --> 00:21:42,450
try this out<font color="#CCCCCC"> so</font><font color="#E5E5E5"> if I make a new polar</font>

445
00:21:36,299 --> 00:21:48,408
bear and then fill in<font color="#E5E5E5"> the fields really</font>

446
00:21:42,450 --> 00:21:48,409
<font color="#E5E5E5">quick delete</font><font color="#CCCCCC"> it</font>

447
00:21:49,190 --> 00:22:02,340
make a grizzly in its place<font color="#E5E5E5"> and then</font>

448
00:21:57,679 --> 00:22:03,780
fill in the<font color="#CCCCCC"> fields</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it's asking</font><font color="#E5E5E5"> for</font>

449
00:22:02,340 --> 00:22:06,090
<font color="#E5E5E5">the number of</font><font color="#CCCCCC"> months</font><font color="#E5E5E5"> hibernated we just</font>

450
00:22:03,780 --> 00:22:10,500
need to take<font color="#E5E5E5"> that number that we leaked</font>

451
00:22:06,090 --> 00:22:21,209
out calculate<font color="#E5E5E5"> the difference which I'll</font>

452
00:22:10,500 --> 00:22:25,140
do over here that is the address<font color="#CCCCCC"> of our</font>

453
00:22:21,210 --> 00:22:30,049
secret admin shell so now if I print

454
00:22:25,140 --> 00:22:30,049
that polar bear<font color="#CCCCCC"> I should get a shell</font>

455
00:22:32,580 --> 00:22:46,620
[Applause]

456
00:22:37,910 --> 00:22:48,059
thanks all right<font color="#E5E5E5"> so we pwned it by the</font>

457
00:22:46,620 --> 00:22:51,860
way there's<font color="#CCCCCC"> another bug in that binary</font>

458
00:22:48,059 --> 00:22:51,860
<font color="#E5E5E5">so there's something left for</font><font color="#CCCCCC"> you guys</font>

459
00:22:52,820 --> 00:22:57,860
so here's some super helpful resources

460
00:22:56,130 --> 00:23:00,809
that help have helped me in learning

461
00:22:57,860 --> 00:23:03,860
<font color="#E5E5E5">Gonville is dragon sector team member</font>

462
00:23:00,809 --> 00:23:08,129
one of<font color="#CCCCCC"> the best CTF teams in the world</font>

463
00:23:03,860 --> 00:23:10,500
<font color="#CCCCCC">he does like write-ups</font><font color="#E5E5E5"> and you know for</font>

464
00:23:08,130 --> 00:23:13,250
like CTF sub all skill levels<font color="#E5E5E5"> super</font>

465
00:23:10,500 --> 00:23:15,210
helpful<font color="#CCCCCC"> live</font><font color="#E5E5E5"> overflow is pretty similar</font>

466
00:23:13,250 --> 00:23:17,400
<font color="#CCCCCC">something I thought it was really cool</font>

467
00:23:15,210 --> 00:23:20,309
is<font color="#E5E5E5"> I were like the guy who does live</font>

468
00:23:17,400 --> 00:23:23,429
overflow<font color="#E5E5E5"> went over the the new Nintendo</font>

469
00:23:20,309 --> 00:23:27,600
switch bug<font color="#E5E5E5"> the arbitrary code exec so</font>

470
00:23:23,429 --> 00:23:29,370
that was<font color="#E5E5E5"> like really fun to watch rpi</font>

471
00:23:27,600 --> 00:23:32,100
<font color="#CCCCCC">sec MBE is where i learned</font><font color="#E5E5E5"> most of this</font>

472
00:23:29,370 --> 00:23:33,689
stuff<font color="#E5E5E5"> it's a free</font><font color="#CCCCCC"> online class that</font>

473
00:23:32,100 --> 00:23:36,928
<font color="#CCCCCC">teaches binary exploitation it's</font>

474
00:23:33,690 --> 00:23:38,580
incredibly awesome<font color="#CCCCCC"> challenges dari and</font>

475
00:23:36,929 --> 00:23:41,580
potable<font color="#CCCCCC"> tw if you</font><font color="#E5E5E5"> just want more</font>

476
00:23:38,580 --> 00:23:43,020
reversing and pointing challenges a bug

477
00:23:41,580 --> 00:23:45,629
hunters diary if you<font color="#E5E5E5"> guys are interested</font>

478
00:23:43,020 --> 00:23:47,190
in actually<font color="#E5E5E5"> like making a bug hunting</font>

479
00:23:45,630 --> 00:23:49,049
career<font color="#E5E5E5"> out of binary exploitation I</font>

480
00:23:47,190 --> 00:23:51,780
highly recommend this<font color="#CCCCCC"> book walks through</font>

481
00:23:49,049 --> 00:23:54,179
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> all the time</font><font color="#CCCCCC"> I</font>

482
00:23:51,780 --> 00:23:56,428
have thanks to<font color="#E5E5E5"> everyone</font><font color="#CCCCCC"> whose</font><font color="#E5E5E5"> work I</font>

483
00:23:54,179 --> 00:23:59,070
ripped off just kidding<font color="#E5E5E5"> it's the only</font>

484
00:23:56,429 --> 00:24:02,040
inspiration<font color="#CCCCCC"> thanks</font><font color="#E5E5E5"> especially to Richard</font>

485
00:23:59,070 --> 00:24:03,059
<font color="#E5E5E5">Weiss and</font><font color="#CCCCCC"> Mike Pizza</font><font color="#E5E5E5"> cynic Rico butts my</font>

486
00:24:02,040 --> 00:24:06,530
mentor who

487
00:24:03,059 --> 00:24:12,609
is<font color="#E5E5E5"> definitely bored with my talk by now</font>

488
00:24:06,530 --> 00:24:12,609
[Applause]

