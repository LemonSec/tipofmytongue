1
00:00:00,000 --> 00:00:08,700
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> like she said my talks on</font><font color="#E5E5E5"> TMT</font><font color="#CCCCCC"> oh</font>

2
00:00:03,319 --> 00:00:11,940
and why<font color="#CCCCCC"> so this is time memory</font>

3
00:00:08,700 --> 00:00:16,009
<font color="#E5E5E5">trade-offs</font><font color="#CCCCCC"> you know you have chain</font>

4
00:00:11,940 --> 00:00:19,650
<font color="#E5E5E5">tables the original ones the classical</font>

5
00:00:16,010 --> 00:00:26,210
<font color="#CCCCCC">Hellman tables</font><font color="#E5E5E5"> then there were</font>

6
00:00:19,650 --> 00:00:31,229
distinguished points then in 2003 2003

7
00:00:26,210 --> 00:00:37,110
there was rainbow tables<font color="#CCCCCC"> this made the</font>

8
00:00:31,230 --> 00:00:38,910
time up<font color="#E5E5E5"> time memory trade-off</font><font color="#CCCCCC"> better so</font>

9
00:00:37,110 --> 00:00:45,320
when we're talking<font color="#E5E5E5"> about time memory</font>

10
00:00:38,910 --> 00:00:49,860
trade-offs<font color="#E5E5E5"> there is no faster or smaller</font>

11
00:00:45,320 --> 00:00:52,079
<font color="#CCCCCC">because</font><font color="#E5E5E5"> each one of</font><font color="#CCCCCC"> these are adjustable</font>

12
00:00:49,860 --> 00:00:55,739
<font color="#CCCCCC">so if you say oh this time memory</font>

13
00:00:52,079 --> 00:00:59,699
trade-off is faster well you could<font color="#E5E5E5"> make</font>

14
00:00:55,739 --> 00:01:01,828
a rainbow<font color="#E5E5E5"> table you know larger so then</font>

15
00:00:59,699 --> 00:01:06,030
it<font color="#E5E5E5"> would be faster or you know this</font>

16
00:01:01,829 --> 00:01:10,740
one's smaller<font color="#E5E5E5"> because in the history</font>

17
00:01:06,030 --> 00:01:14,820
<font color="#E5E5E5">there's</font><font color="#CCCCCC"> been you know like the ones</font>

18
00:01:10,740 --> 00:01:16,439
below<font color="#E5E5E5"> of rainbow DP chain distinguish</font>

19
00:01:14,820 --> 00:01:19,710
point of<font color="#CCCCCC"> EDP</font>

20
00:01:16,439 --> 00:01:24,889
rainbow VDP these were all made after

21
00:01:19,710 --> 00:01:29,758
rainbow tables<font color="#E5E5E5"> but they didn't</font><font color="#CCCCCC"> focus</font>

22
00:01:24,890 --> 00:01:32,670
<font color="#CCCCCC">basically you</font><font color="#E5E5E5"> could make an optimal</font>

23
00:01:29,759 --> 00:01:38,820
rainbow table<font color="#E5E5E5"> either smaller or faster</font>

24
00:01:32,670 --> 00:01:41,280
well and both so anyways<font color="#CCCCCC"> so</font><font color="#E5E5E5"> the problem</font>

25
00:01:38,820 --> 00:01:45,508
with rainbow tables is they take<font color="#E5E5E5"> a while</font>

26
00:01:41,280 --> 00:01:48,659
<font color="#CCCCCC">so</font><font color="#E5E5E5"> if what you need</font><font color="#CCCCCC"> to do is extremely</font>

27
00:01:45,509 --> 00:01:51,899
<font color="#CCCCCC">time sensitive you would</font><font color="#E5E5E5"> want something</font>

28
00:01:48,659 --> 00:01:54,210
that does it instantly<font color="#CCCCCC"> this is like</font><font color="#E5E5E5"> a</font>

29
00:01:51,899 --> 00:01:58,159
<font color="#E5E5E5">hundred milliseconds or something so if</font>

30
00:01:54,210 --> 00:01:58,158
you're cracking<font color="#E5E5E5"> brain wallets yeah</font>

31
00:01:58,640 --> 00:02:04,740
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> you want to guess crack the</font>

32
00:02:02,070 --> 00:02:07,320
password<font color="#CCCCCC"> before anyone else does so that</font>

33
00:02:04,740 --> 00:02:10,348
you can transfer the money<font color="#E5E5E5"> to you know</font>

34
00:02:07,320 --> 00:02:13,349
if your asshole<font color="#E5E5E5"> now I have not actually</font>

35
00:02:10,348 --> 00:02:16,079
done<font color="#E5E5E5"> this I should probably</font>

36
00:02:13,349 --> 00:02:19,200
so there's hash tables<font color="#E5E5E5"> that do this and</font>

37
00:02:16,080 --> 00:02:23,550
then there was a talk at<font color="#E5E5E5"> bloom</font><font color="#CCCCCC"> con</font><font color="#E5E5E5"> bloom</font>

38
00:02:19,200 --> 00:02:28,109
<font color="#CCCCCC">reverse so these all our constant time</font>

39
00:02:23,550 --> 00:02:31,200
it's<font color="#CCCCCC"> nice and so for every password you</font>

40
00:02:28,110 --> 00:02:36,360
have in your table<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to store</font>

41
00:02:31,200 --> 00:02:39,268
some amount of data<font color="#E5E5E5"> so I should probably</font>

42
00:02:36,360 --> 00:02:41,819
<font color="#E5E5E5">go over what Big O notation is does</font>

43
00:02:39,269 --> 00:02:43,830
<font color="#E5E5E5">anyone as everyone familiar with Big O</font>

44
00:02:41,819 --> 00:02:51,209
notation<font color="#E5E5E5"> no probably not</font>

45
00:02:43,830 --> 00:03:01,830
yeah so<font color="#E5E5E5"> Big O notation one that means</font>

46
00:02:51,209 --> 00:03:05,160
constant time<font color="#E5E5E5"> so anyways so</font><font color="#CCCCCC"> with rainbow</font>

47
00:03:01,830 --> 00:03:07,290
tables for every<font color="#E5E5E5"> password that you store</font>

48
00:03:05,160 --> 00:03:11,489
in a rainbow<font color="#CCCCCC"> table you only need a store</font>

49
00:03:07,290 --> 00:03:16,079
<font color="#CCCCCC">roughly n to the 2/3</font><font color="#E5E5E5"> amount of data so</font>

50
00:03:11,489 --> 00:03:19,680
if you have a<font color="#E5E5E5"> billion passwords</font><font color="#CCCCCC"> you only</font>

51
00:03:16,080 --> 00:03:22,109
have to store a million<font color="#E5E5E5"> amounts of</font>

52
00:03:19,680 --> 00:03:24,209
memory<font color="#E5E5E5"> and then when you</font><font color="#CCCCCC"> actually only</font>

53
00:03:22,109 --> 00:03:29,359
<font color="#CCCCCC">need to use</font><font color="#E5E5E5"> it it costs you know a</font>

54
00:03:24,209 --> 00:03:32,880
<font color="#E5E5E5">million</font><font color="#CCCCCC"> then there was another</font><font color="#E5E5E5"> thing</font>

55
00:03:29,359 --> 00:03:38,549
<font color="#E5E5E5">someone just like the name</font><font color="#CCCCCC"> of rainbow</font>

56
00:03:32,880 --> 00:03:41,549
tables<font color="#E5E5E5"> so what so even though it</font>

57
00:03:38,549 --> 00:03:41,760
<font color="#CCCCCC">actually takes an amount of</font><font color="#E5E5E5"> time to use</font>

58
00:03:41,549 --> 00:03:45,320
it

59
00:03:41,760 --> 00:03:49,048
what they did was you had to<font color="#CCCCCC"> do pbkdf2</font>

60
00:03:45,320 --> 00:03:52,380
<font color="#E5E5E5">and then you got a network key and then</font>

61
00:03:49,049 --> 00:03:57,660
you had to<font color="#E5E5E5"> use that</font><font color="#CCCCCC"> to check to see if</font>

62
00:03:52,380 --> 00:04:01,019
the handshake was actually valid<font color="#E5E5E5"> and so</font>

63
00:03:57,660 --> 00:04:02,489
the pbkdf2<font color="#CCCCCC"> takes a lot of</font><font color="#E5E5E5"> time so you</font>

64
00:04:01,019 --> 00:04:05,510
<font color="#E5E5E5">just do that and</font><font color="#CCCCCC"> then you</font><font color="#E5E5E5"> have the</font>

65
00:04:02,489 --> 00:04:08,730
<font color="#E5E5E5">network key so then you can do a couple</font>

66
00:04:05,510 --> 00:04:11,880
hash functions<font color="#E5E5E5"> and then you get to check</font>

67
00:04:08,730 --> 00:04:15,358
it<font color="#E5E5E5"> so it increases</font><font color="#CCCCCC"> the speed by a factor</font>

68
00:04:11,880 --> 00:04:20,608
of<font color="#E5E5E5"> like thousand there's something so</font>

69
00:04:15,359 --> 00:04:23,669
optimal rainbow tables<font color="#CCCCCC"> this assumes that</font>

70
00:04:20,608 --> 00:04:27,740
you<font color="#CCCCCC"> have as much time as you want</font><font color="#E5E5E5"> to</font>

71
00:04:23,669 --> 00:04:27,740
actually<font color="#E5E5E5"> build these so</font>

72
00:04:27,949 --> 00:04:34,139
when so a perfect<font color="#CCCCCC"> rainbow table is where</font>

73
00:04:31,230 --> 00:04:39,930
there's so you have a start<font color="#E5E5E5"> point and</font>

74
00:04:34,139 --> 00:04:42,139
end point<font color="#CCCCCC"> the start</font><font color="#E5E5E5"> point is just like a</font>

75
00:04:39,930 --> 00:04:45,630
starting password and then<font color="#E5E5E5"> you do this</font>

76
00:04:42,139 --> 00:04:49,430
<font color="#CCCCCC">you hash it and then you basically a</font>

77
00:04:45,630 --> 00:04:52,530
reduction function<font color="#CCCCCC"> what this is is a</font>

78
00:04:49,430 --> 00:04:57,300
deterministic random password generator

79
00:04:52,530 --> 00:04:59,489
from the key space<font color="#E5E5E5"> so you do password</font>

80
00:04:57,300 --> 00:05:01,200
then you hash it and then the hash<font color="#E5E5E5"> gets</font>

81
00:04:59,490 --> 00:05:03,870
turned into another password<font color="#E5E5E5"> from the</font>

82
00:05:01,200 --> 00:05:05,460
<font color="#CCCCCC">key</font><font color="#E5E5E5"> space and then you hash that and</font>

83
00:05:03,870 --> 00:05:08,760
continue then you have an<font color="#E5E5E5"> end point the</font>

84
00:05:05,460 --> 00:05:11,190
<font color="#CCCCCC">end points will actually collide</font><font color="#E5E5E5"> you'll</font>

85
00:05:08,760 --> 00:05:13,770
have<font color="#E5E5E5"> different start points but the end</font>

86
00:05:11,190 --> 00:05:15,479
point will be the same for multiple when

87
00:05:13,770 --> 00:05:19,200
you perfect<font color="#CCCCCC"> a rainbow table you remove</font>

88
00:05:15,479 --> 00:05:23,130
all<font color="#E5E5E5"> the</font><font color="#CCCCCC"> duplicates so you want</font>

89
00:05:19,200 --> 00:05:25,650
sequential start points because if you

90
00:05:23,130 --> 00:05:29,610
were to do random<font color="#CCCCCC"> let's say the key</font>

91
00:05:25,650 --> 00:05:31,560
<font color="#CCCCCC">space is 2 to</font><font color="#E5E5E5"> the 50 if you</font><font color="#CCCCCC"> did random</font>

92
00:05:29,610 --> 00:05:34,680
<font color="#E5E5E5">you would need a store 50 bits but if</font>

93
00:05:31,560 --> 00:05:44,490
you did sequentially<font color="#E5E5E5"> you would need well</font>

94
00:05:34,680 --> 00:05:49,020
<font color="#CCCCCC">2/3 of</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I think so</font><font color="#E5E5E5"> then no more</font>

95
00:05:44,490 --> 00:05:53,220
perfect<font color="#E5E5E5"> hash functions it's a it's a way</font>

96
00:05:49,020 --> 00:05:57,630
<font color="#CCCCCC">to basically</font><font color="#E5E5E5"> cost a couple bits and that</font>

97
00:05:53,220 --> 00:06:00,270
gives you an exact end point so well<font color="#E5E5E5"> it</font>

98
00:05:57,630 --> 00:06:01,590
gives you the exact row that you need<font color="#E5E5E5"> so</font>

99
00:06:00,270 --> 00:06:03,870
you<font color="#CCCCCC"> have your</font><font color="#E5E5E5"> start point and then you</font>

100
00:06:01,590 --> 00:06:12,239
add a<font color="#E5E5E5"> couple bits for the collisions to</font>

101
00:06:03,870 --> 00:06:15,389
check for it anyways<font color="#E5E5E5"> so then there's you</font>

102
00:06:12,240 --> 00:06:19,560
know<font color="#E5E5E5"> floating</font><font color="#CCCCCC"> point modulo what you do</font>

103
00:06:15,389 --> 00:06:21,479
is you basically pre compute the inverse

104
00:06:19,560 --> 00:06:24,690
of what<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> trying and multiply</font>

105
00:06:21,479 --> 00:06:31,940
anyway so then stuff generation

106
00:06:24,690 --> 00:06:35,150
<font color="#E5E5E5">checkpoints so cat photo so key space</font>

107
00:06:31,940 --> 00:06:35,150
anyways<font color="#E5E5E5"> um</font>

108
00:06:36,170 --> 00:06:41,660
so this is you have to<font color="#CCCCCC"> have a fixed</font><font color="#E5E5E5"> key</font>

109
00:06:39,470 --> 00:06:44,210
space<font color="#CCCCCC"> before you even start any of these</font>

110
00:06:41,660 --> 00:06:50,930
whether it's rainbow tables or hash

111
00:06:44,210 --> 00:06:53,150
tables<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> if you're doing</font><font color="#CCCCCC"> if you're</font>

112
00:06:50,930 --> 00:06:55,970
<font color="#E5E5E5">trying to crack encryption like does</font>

113
00:06:53,150 --> 00:07:00,590
<font color="#E5E5E5">your key space would</font><font color="#CCCCCC"> be all the keys</font>

114
00:06:55,970 --> 00:07:03,740
that<font color="#CCCCCC"> are possible so</font><font color="#E5E5E5"> to 256</font><font color="#CCCCCC"> or if you're</font>

115
00:07:00,590 --> 00:07:08,060
<font color="#CCCCCC">doing passwords you know you can</font><font color="#E5E5E5"> have a</font>

116
00:07:03,740 --> 00:07:10,700
dictionary<font color="#CCCCCC"> and then mangling rules</font><font color="#E5E5E5"> so</font>

117
00:07:08,060 --> 00:07:14,720
you<font color="#CCCCCC"> just your key space would be how</font>

118
00:07:10,700 --> 00:07:18,830
many dictionary words you have times how

119
00:07:14,720 --> 00:07:32,960
many mangling<font color="#CCCCCC"> rules you have</font><font color="#E5E5E5"> and you can</font>

120
00:07:18,830 --> 00:07:37,039
also do like like mask attacks<font color="#E5E5E5"> like</font>

121
00:07:32,960 --> 00:07:41,000
brute force and stuff like that<font color="#E5E5E5"> so when</font>

122
00:07:37,040 --> 00:07:43,580
you're<font color="#E5E5E5"> doing a yeah</font><font color="#CCCCCC"> so this is really</font>

123
00:07:41,000 --> 00:07:50,630
<font color="#CCCCCC">just</font><font color="#E5E5E5"> for reference the formulas they're</font>

124
00:07:43,580 --> 00:07:54,590
very simple<font color="#CCCCCC"> Wow it's you</font><font color="#E5E5E5"> just so when</font>

125
00:07:50,630 --> 00:07:58,690
you're doing<font color="#CCCCCC"> a lossy hash table</font><font color="#E5E5E5"> you</font>

126
00:07:54,590 --> 00:08:01,940
don't want to store the actual<font color="#E5E5E5"> password</font>

127
00:07:58,690 --> 00:08:08,900
<font color="#E5E5E5">because that</font><font color="#CCCCCC"> takes a lot of space</font><font color="#E5E5E5"> what</font>

128
00:08:01,940 --> 00:08:12,440
you<font color="#E5E5E5"> want to do is you so each password</font>

129
00:08:08,900 --> 00:08:15,919
has a number associated with<font color="#CCCCCC"> it so like</font>

130
00:08:12,440 --> 00:08:19,160
if<font color="#CCCCCC"> your brute forcing four letters a a a</font>

131
00:08:15,920 --> 00:08:23,240
through<font color="#E5E5E5"> Z Z Z the first one would be a a</font>

132
00:08:19,160 --> 00:08:29,630
so<font color="#E5E5E5"> zero and then a B would be</font><font color="#CCCCCC"> 1 all the</font>

133
00:08:23,240 --> 00:08:31,730
way<font color="#CCCCCC"> to its like</font><font color="#E5E5E5"> 600,000</font><font color="#CCCCCC"> so this is how</font>

134
00:08:29,630 --> 00:08:36,130
you would convert<font color="#E5E5E5"> from the password ID</font>

135
00:08:31,730 --> 00:08:41,810
to a range ID<font color="#E5E5E5"> and then a range ID to the</font>

136
00:08:36,130 --> 00:08:45,910
specific password<font color="#E5E5E5"> IDs for the range then</font>

137
00:08:41,809 --> 00:08:45,910
<font color="#E5E5E5">you just brute force those so</font>

138
00:08:48,260 --> 00:08:56,899
basically<font color="#CCCCCC"> the obvious way to do this is</font>

139
00:08:53,600 --> 00:09:02,770
just<font color="#E5E5E5"> store a key value pair in a</font>

140
00:08:56,899 --> 00:09:09,880
database<font color="#CCCCCC"> then there's basically ways to</font>

141
00:09:02,770 --> 00:09:14,649
index it<font color="#CCCCCC"> so you have prefix index</font><font color="#E5E5E5"> where</font>

142
00:09:09,880 --> 00:09:18,200
so there's like<font color="#E5E5E5"> a very simple one index</font>

143
00:09:14,649 --> 00:09:21,200
<font color="#E5E5E5">integer prefix next basically you just</font>

144
00:09:18,200 --> 00:09:24,430
<font color="#E5E5E5">have</font><font color="#CCCCCC"> a fixed number and that tells you</font>

145
00:09:21,200 --> 00:09:27,310
how many so you<font color="#E5E5E5"> take a prefix of it</font>

146
00:09:24,430 --> 00:09:29,779
actually<font color="#CCCCCC"> my next slide is this</font><font color="#E5E5E5"> sorry</font>

147
00:09:27,310 --> 00:09:31,699
<font color="#E5E5E5">Agnes</font><font color="#CCCCCC"> and then there's no imperfect hash</font>

148
00:09:29,779 --> 00:09:36,470
functions and then there's this bloom

149
00:09:31,700 --> 00:09:38,690
reverse bloom reverse was like I<font color="#E5E5E5"> said it</font>

150
00:09:36,470 --> 00:09:45,790
was<font color="#CCCCCC"> Act bloom</font><font color="#E5E5E5"> con which has nothing to</font>

151
00:09:38,690 --> 00:09:49,730
do<font color="#E5E5E5"> with bloom filters but the</font>

152
00:09:45,790 --> 00:09:52,490
<font color="#E5E5E5">optimization for that was so for every</font>

153
00:09:49,730 --> 00:09:55,100
password<font color="#CCCCCC"> that you have</font><font color="#E5E5E5"> in there</font><font color="#CCCCCC"> the</font>

154
00:09:52,490 --> 00:09:59,260
optimal setting would<font color="#CCCCCC"> be to use</font><font color="#E5E5E5"> you had</font>

155
00:09:55,100 --> 00:10:03,650
to use one point<font color="#CCCCCC"> for four bits per entry</font>

156
00:09:59,260 --> 00:10:06,890
well for password times how<font color="#CCCCCC"> many</font><font color="#E5E5E5"> times</font>

157
00:10:03,650 --> 00:10:08,779
you<font color="#CCCCCC"> actually do lookups into it so every</font>

158
00:10:06,890 --> 00:10:13,520
<font color="#CCCCCC">lock up that you did it into it would</font>

159
00:10:08,779 --> 00:10:15,100
cut the key space<font color="#E5E5E5"> in half but so to cut</font>

160
00:10:13,520 --> 00:10:18,589
the key space<font color="#E5E5E5"> in half you had to use</font>

161
00:10:15,100 --> 00:10:22,430
store<font color="#CCCCCC"> 1.4 four bits for every</font><font color="#E5E5E5"> password</font>

162
00:10:18,589 --> 00:10:24,320
<font color="#E5E5E5">but if you were do a key value pair you</font>

163
00:10:22,430 --> 00:10:30,290
<font color="#E5E5E5">have an index which</font><font color="#CCCCCC"> costs some amount of</font>

164
00:10:24,320 --> 00:10:32,770
space<font color="#E5E5E5"> plus you</font><font color="#CCCCCC"> have the the password</font>

165
00:10:30,290 --> 00:10:37,719
range<font color="#E5E5E5"> every bit you add to that</font>

166
00:10:32,770 --> 00:10:37,720
<font color="#E5E5E5">decreases the key space</font><font color="#CCCCCC"> by half so</font>

167
00:10:38,440 --> 00:10:47,870
Blumer verse would be less efficient<font color="#E5E5E5"> if</font>

168
00:10:41,750 --> 00:10:53,410
you were trying<font color="#E5E5E5"> to do this yes so</font><font color="#CCCCCC"> very</font>

169
00:10:47,870 --> 00:10:58,150
simple just<font color="#E5E5E5"> md5 password and then a</font>

170
00:10:53,410 --> 00:11:00,259
prefix index would just take the first

171
00:10:58,150 --> 00:11:05,829
<font color="#E5E5E5">16 bits</font>

172
00:11:00,259 --> 00:11:05,829
and then you'd have the passwords so

173
00:11:06,639 --> 00:11:12,379
then<font color="#E5E5E5"> so with velocity hash table you</font>

174
00:11:09,739 --> 00:11:13,759
just<font color="#CCCCCC"> actually get rid of the rest</font><font color="#E5E5E5"> of the</font>

175
00:11:12,379 --> 00:11:15,259
hash<font color="#E5E5E5"> you don't actually have to store</font>

176
00:11:13,759 --> 00:11:18,379
that because you're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to brute force</font>

177
00:11:15,259 --> 00:11:22,549
password range<font color="#CCCCCC"> well in this case you</font>

178
00:11:18,379 --> 00:11:24,529
just<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> password</font><font color="#CCCCCC"> and then you would</font>

179
00:11:22,549 --> 00:11:27,769
<font color="#E5E5E5">be able to</font><font color="#CCCCCC"> know whether</font><font color="#E5E5E5"> or not you</font>

180
00:11:24,529 --> 00:11:33,379
actually correct<font color="#E5E5E5"> the password so you</font>

181
00:11:27,769 --> 00:11:37,519
would group it by the same<font color="#E5E5E5"> prefixes so</font>

182
00:11:33,379 --> 00:11:40,249
you would store<font color="#E5E5E5"> so you basically just</font>

183
00:11:37,519 --> 00:11:42,470
have<font color="#CCCCCC"> a pointer into a list</font><font color="#E5E5E5"> at these</font>

184
00:11:40,249 --> 00:11:47,539
<font color="#E5E5E5">positions</font><font color="#CCCCCC"> too so that</font><font color="#E5E5E5"> you would know</font>

185
00:11:42,470 --> 00:11:52,489
where you know how many passwords<font color="#E5E5E5"> were</font>

186
00:11:47,539 --> 00:11:57,139
in each bucket<font color="#E5E5E5"> so with if you were to do</font>

187
00:11:52,489 --> 00:12:02,239
integer<font color="#E5E5E5"> prefix index you just take the</font>

188
00:11:57,139 --> 00:12:07,459
prefix<font color="#E5E5E5"> and then you would so in this</font>

189
00:12:02,239 --> 00:12:11,089
case what you<font color="#E5E5E5"> want to do is store 16</font>

190
00:12:07,459 --> 00:12:16,579
bytes of data<font color="#E5E5E5"> well each chunk is</font><font color="#CCCCCC"> 16</font>

191
00:12:11,089 --> 00:12:25,959
<font color="#E5E5E5">bytes the first</font><font color="#CCCCCC"> 8-bit 8 bytes are a</font>

192
00:12:16,579 --> 00:12:25,959
exact offset<font color="#CCCCCC"> into your prefix and the</font>

193
00:12:32,649 --> 00:12:47,859
<font color="#CCCCCC">okay so</font><font color="#E5E5E5"> so the 16 64 bit number that is</font>

194
00:12:42,379 --> 00:12:53,470
basically a pointer<font color="#CCCCCC"> into your array of</font>

195
00:12:47,859 --> 00:12:53,470
<font color="#CCCCCC">passwords you know like this</font><font color="#E5E5E5"> the</font>

196
00:12:53,499 --> 00:13:07,509
password range<font color="#E5E5E5"> ID</font><font color="#CCCCCC"> so each one of these</font>

197
00:13:00,289 --> 00:13:11,179
things<font color="#CCCCCC"> represents for actual buckets</font><font color="#E5E5E5"> so</font>

198
00:13:07,509 --> 00:13:13,190
the so you have an exact offset into<font color="#E5E5E5"> it</font>

199
00:13:11,179 --> 00:13:17,120
and then<font color="#E5E5E5"> you have</font>

200
00:13:13,190 --> 00:13:21,830
<font color="#CCCCCC">for counters of how big each bucket is</font>

201
00:13:17,120 --> 00:13:25,160
so that the first<font color="#E5E5E5"> bucket would be hex a</font>

202
00:13:21,830 --> 00:13:33,410
so there would be<font color="#E5E5E5"> eight values in there</font>

203
00:13:25,160 --> 00:13:35,930
<font color="#E5E5E5">that word like</font><font color="#CCCCCC"> that yeah then the second</font>

204
00:13:33,410 --> 00:13:39,170
<font color="#E5E5E5">bucket has six and the third one has</font><font color="#CCCCCC"> ten</font>

205
00:13:35,930 --> 00:13:41,959
<font color="#E5E5E5">and fourth one is four five ten so if</font>

206
00:13:39,170 --> 00:13:49,969
you were going<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the second bucket you</font>

207
00:13:41,960 --> 00:13:52,400
would just add<font color="#E5E5E5"> eight yeah so</font><font color="#CCCCCC"> so if</font>

208
00:13:49,970 --> 00:13:54,320
you're looking<font color="#CCCCCC"> for the second</font><font color="#E5E5E5"> bucket you</font>

209
00:13:52,400 --> 00:13:57,260
would go to address<font color="#CCCCCC"> zero which is here</font>

210
00:13:54,320 --> 00:14:00,980
then you add eight which then you would

211
00:13:57,260 --> 00:14:05,240
start<font color="#E5E5E5"> here and then you go for six to</font>

212
00:14:00,980 --> 00:14:06,890
there<font color="#CCCCCC"> so that would</font><font color="#E5E5E5"> be your range that</font>

213
00:14:05,240 --> 00:14:09,530
you would need you would have to go

214
00:14:06,890 --> 00:14:11,330
through<font color="#E5E5E5"> you can actually since they're</font>

215
00:14:09,530 --> 00:14:16,610
completely sorted you can do a binary

216
00:14:11,330 --> 00:14:19,550
search within<font color="#E5E5E5"> that data set</font><font color="#CCCCCC"> so instead</font>

217
00:14:16,610 --> 00:14:23,060
of brute forcing all those ranges all

218
00:14:19,550 --> 00:14:34,069
<font color="#E5E5E5">six you would only have to do</font><font color="#CCCCCC"> log base 2</font>

219
00:14:23,060 --> 00:14:38,239
of 6 so<font color="#E5E5E5"> 3</font><font color="#CCCCCC"> anyways</font><font color="#E5E5E5"> so I had technical</font>

220
00:14:34,070 --> 00:14:39,980
slides<font color="#E5E5E5"> more technical sense yes sir</font>

221
00:14:38,240 --> 00:14:44,990
then I was going through<font color="#CCCCCC"> it and</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> was</font>

222
00:14:39,980 --> 00:14:47,870
like wow this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> really not useful</font><font color="#CCCCCC"> so</font>

223
00:14:44,990 --> 00:14:50,870
you<font color="#CCCCCC"> know like it would only be useful</font>

224
00:14:47,870 --> 00:14:54,800
for you know if you were gonna be you

225
00:14:50,870 --> 00:14:57,890
know implementing this<font color="#E5E5E5"> exactly</font><font color="#CCCCCC"> but so</font>

226
00:14:54,800 --> 00:15:02,270
I'm just gonna go over<font color="#E5E5E5"> what Elias</font><font color="#CCCCCC"> Nano</font>

227
00:14:57,890 --> 00:15:05,150
is it's you would so Elias<font color="#CCCCCC"> Fano is</font>

228
00:15:02,270 --> 00:15:10,210
actually used to<font color="#E5E5E5"> represent a sorted list</font>

229
00:15:05,150 --> 00:15:12,770
of numbers what I'm<font color="#E5E5E5"> doing is so</font>

230
00:15:10,210 --> 00:15:15,290
basically the pointers to each bucket

231
00:15:12,770 --> 00:15:19,160
<font color="#CCCCCC">those are the sorted list of numbers so</font>

232
00:15:15,290 --> 00:15:19,579
I'm just representing those in Elias

233
00:15:19,160 --> 00:15:24,860
<font color="#CCCCCC">Fano</font>

234
00:15:19,580 --> 00:15:26,270
which is just a encoding<font color="#CCCCCC"> it's more</font>

235
00:15:24,860 --> 00:15:38,810
efficient than

236
00:15:26,270 --> 00:15:42,230
doing integer<font color="#E5E5E5"> prefix index so one more</font>

237
00:15:38,810 --> 00:15:47,660
note<font color="#E5E5E5"> on this so this</font><font color="#CCCCCC"> is if you were</font>

238
00:15:42,230 --> 00:15:51,020
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to do</font><font color="#CCCCCC"> 32 bits per</font><font color="#E5E5E5"> prefix index on</font>

239
00:15:47,660 --> 00:15:54,709
average<font color="#E5E5E5"> it's 16 so each one of these is</font>

240
00:15:51,020 --> 00:15:55,939
16<font color="#E5E5E5"> bytes divided by 4 that gives you 4</font>

241
00:15:54,710 --> 00:15:59,180
bytes

242
00:15:55,940 --> 00:16:04,190
what you can do is if you<font color="#E5E5E5"> shrink the</font>

243
00:15:59,180 --> 00:16:08,630
pointer to 48 bits then you have room

244
00:16:04,190 --> 00:16:13,370
for 16<font color="#E5E5E5"> 5 bit numbers to</font><font color="#CCCCCC"> represent</font><font color="#E5E5E5"> the</font>

245
00:16:08,630 --> 00:16:14,750
bucket size<font color="#CCCCCC"> when</font><font color="#E5E5E5"> you do that you you</font>

246
00:16:13,370 --> 00:16:19,190
have to make<font color="#E5E5E5"> sure that each bucket is</font>

247
00:16:14,750 --> 00:16:21,320
obviously smaller than 32 but you know

248
00:16:19,190 --> 00:16:25,970
each bucket has less<font color="#CCCCCC"> than 32 but when</font>

249
00:16:21,320 --> 00:16:30,310
your index<font color="#E5E5E5"> is that small</font><font color="#CCCCCC"> you can make</font>

250
00:16:25,970 --> 00:16:35,570
the buckets<font color="#E5E5E5"> really small it's just yeah</font>

251
00:16:30,310 --> 00:16:38,209
so minimal perfect hash function<font color="#CCCCCC"> so it's</font>

252
00:16:35,570 --> 00:16:41,480
like a hash function<font color="#CCCCCC"> so minimal means</font>

253
00:16:38,210 --> 00:16:43,640
that your array is<font color="#E5E5E5"> the exact same size</font>

254
00:16:41,480 --> 00:16:46,790
as the amount of<font color="#E5E5E5"> data that you're</font>

255
00:16:43,640 --> 00:16:51,260
<font color="#E5E5E5">storing perfect means that there's no</font>

256
00:16:46,790 --> 00:16:53,360
collisions in it<font color="#E5E5E5"> so there's this</font>

257
00:16:51,260 --> 00:16:57,470
algorithm called press hash and displace

258
00:16:53,360 --> 00:17:01,610
so it costs<font color="#E5E5E5"> well you can adjust the</font>

259
00:16:57,470 --> 00:17:07,310
amount<font color="#E5E5E5"> of cost but for</font><font color="#CCCCCC"> 2.3 bits per</font>

260
00:17:01,610 --> 00:17:11,810
password<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> it gives you an exact</font>

261
00:17:07,310 --> 00:17:14,000
range so exactly one password range ID

262
00:17:11,810 --> 00:17:18,530
that<font color="#CCCCCC"> you so you only have to brute-force</font>

263
00:17:14,000 --> 00:17:23,690
<font color="#E5E5E5">that one range but it's a little slow to</font>

264
00:17:18,530 --> 00:17:27,740
generate these<font color="#E5E5E5"> it's so it's 400,000 per</font>

265
00:17:23,690 --> 00:17:32,170
second that to build the minimal perfect

266
00:17:27,740 --> 00:17:35,890
hash function<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> quad core</font>

267
00:17:32,170 --> 00:17:35,890
<font color="#CCCCCC">anyways so</font>

268
00:17:36,410 --> 00:17:42,980
<font color="#CCCCCC">Hoffman encoding</font><font color="#E5E5E5"> with this</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> you</font>

269
00:17:41,510 --> 00:17:45,650
do the same exact<font color="#CCCCCC"> thing as</font><font color="#E5E5E5"> the prefix</font>

270
00:17:42,980 --> 00:17:50,990
index and what you do is you actually

271
00:17:45,650 --> 00:17:55,520
encode the bucket sizes with Hoffman

272
00:17:50,990 --> 00:17:58,460
encoding<font color="#CCCCCC"> basically the</font><font color="#E5E5E5"> more with Hoffman</font>

273
00:17:55,520 --> 00:18:02,059
it's the more buckets that are<font color="#E5E5E5"> the same</font>

274
00:17:58,460 --> 00:18:04,669
size the<font color="#E5E5E5"> smaller the code word for it is</font>

275
00:18:02,059 --> 00:18:08,629
so if you have a lot of<font color="#E5E5E5"> buckets that are</font>

276
00:18:04,669 --> 00:18:12,110
<font color="#E5E5E5">all have five things in it it's going to</font>

277
00:18:08,630 --> 00:18:14,929
be you<font color="#E5E5E5"> know like a</font><font color="#CCCCCC"> bit or two to</font>

278
00:18:12,110 --> 00:18:18,939
represent that one bucket but less

279
00:18:14,929 --> 00:18:27,140
common bucket sizes those would be

280
00:18:18,940 --> 00:18:32,690
larger<font color="#CCCCCC"> so this is funny</font>

281
00:18:27,140 --> 00:18:43,280
<font color="#CCCCCC">I was trying to</font><font color="#E5E5E5"> log in to two so I have</font>

282
00:18:32,690 --> 00:18:45,770
this<font color="#CCCCCC"> oh so I made a a</font><font color="#E5E5E5"> lossy hash</font>

283
00:18:43,280 --> 00:18:48,678
calculator<font color="#CCCCCC"> basically it does all the</font>

284
00:18:45,770 --> 00:18:51,799
math for you and<font color="#E5E5E5"> whatnot</font>

285
00:18:48,679 --> 00:18:53,450
<font color="#CCCCCC">I finished it a while ago but</font><font color="#E5E5E5"> I was like</font>

286
00:18:51,799 --> 00:18:56,570
I changed all<font color="#E5E5E5"> the style sheets on my</font>

287
00:18:53,450 --> 00:18:59,809
website<font color="#E5E5E5"> and I needed to do diff and I</font>

288
00:18:56,570 --> 00:19:01,820
was gonna do it before I left<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I was</font>

289
00:18:59,809 --> 00:19:05,928
like oh well I<font color="#CCCCCC"> should do it at</font><font color="#E5E5E5"> least now</font>

290
00:19:01,820 --> 00:19:10,970
and<font color="#E5E5E5"> Google doesn't think I'm me so I</font>

291
00:19:05,929 --> 00:19:19,940
will<font color="#CCCCCC"> get</font><font color="#E5E5E5"> that up</font><font color="#CCCCCC"> well I guess</font><font color="#E5E5E5"> when I go</font>

292
00:19:10,970 --> 00:19:24,919
<font color="#E5E5E5">home anyways so examples of</font><font color="#CCCCCC"> this in the</font>

293
00:19:19,940 --> 00:19:31,039
real world<font color="#CCCCCC"> so brainwallet</font><font color="#E5E5E5"> cracking</font><font color="#CCCCCC"> Ryan</font>

294
00:19:24,919 --> 00:19:33,940
<font color="#CCCCCC">C he did a talk earlier</font><font color="#E5E5E5"> he he actually</font>

295
00:19:31,039 --> 00:19:36,710
<font color="#E5E5E5">observed people he would put bitcoins</font>

296
00:19:33,940 --> 00:19:40,030
<font color="#CCCCCC">not money bitcoins into a wallet and</font>

297
00:19:36,710 --> 00:19:44,990
they would<font color="#E5E5E5"> notice that it would be</font>

298
00:19:40,030 --> 00:19:49,178
removed<font color="#CCCCCC"> really fast</font><font color="#E5E5E5"> so someone either</font>

299
00:19:44,990 --> 00:19:51,729
would need you know a lot<font color="#CCCCCC"> of GPUs or</font>

300
00:19:49,179 --> 00:19:54,460
you know<font color="#E5E5E5"> computing power to go through</font>

301
00:19:51,729 --> 00:20:00,719
the key space<font color="#E5E5E5"> continually on everyone</font>

302
00:19:54,460 --> 00:20:05,139
<font color="#CCCCCC">every new</font><font color="#E5E5E5"> brainwallet</font><font color="#CCCCCC"> know every new</font>

303
00:20:00,719 --> 00:20:08,979
<font color="#E5E5E5">Bitcoin address and then crack it that</font>

304
00:20:05,139 --> 00:20:10,629
way<font color="#E5E5E5"> or they needed to do some sort of</font>

305
00:20:08,979 --> 00:20:13,570
time memory<font color="#CCCCCC"> trade-off</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that they could</font>

306
00:20:10,629 --> 00:20:25,599
do a<font color="#E5E5E5"> bunch of work beforehand and then</font>

307
00:20:13,570 --> 00:20:30,789
crack them really<font color="#E5E5E5"> fast so nitrix</font><font color="#CCCCCC"> gen</font><font color="#E5E5E5"> so</font>

308
00:20:25,599 --> 00:20:36,309
he he has a<font color="#E5E5E5"> I don't have his website on</font>

309
00:20:30,789 --> 00:20:40,769
<font color="#E5E5E5">here</font><font color="#CCCCCC"> anyways so what</font><font color="#E5E5E5"> he did</font><font color="#CCCCCC"> was he used</font>

310
00:20:36,309 --> 00:20:46,839
a prefect<font color="#E5E5E5"> integer prefix index to</font>

311
00:20:40,769 --> 00:20:50,109
generate one<font color="#E5E5E5"> of these tables for md5</font><font color="#CCCCCC"> he</font>

312
00:20:46,839 --> 00:20:55,089
has one<font color="#E5E5E5"> point one trillion passwords in</font>

313
00:20:50,109 --> 00:20:58,599
it so he went<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> less</font>

314
00:20:55,089 --> 00:21:03,249
efficient method<font color="#E5E5E5"> just so that</font><font color="#CCCCCC"> it would</font>

315
00:20:58,599 --> 00:21:07,539
<font color="#E5E5E5">be really</font><font color="#CCCCCC"> easy to write so he got around</font>

316
00:21:03,249 --> 00:21:10,529
<font color="#E5E5E5">five bytes per password and then there</font>

317
00:21:07,539 --> 00:21:10,529
<font color="#E5E5E5">is this</font><font color="#CCCCCC"> website</font>

318
00:21:11,109 --> 00:21:18,968
<font color="#E5E5E5">see md5 they say so they have a Chinese</font>

319
00:21:15,909 --> 00:21:21,509
version<font color="#E5E5E5"> an English version and a Russian</font>

320
00:21:18,969 --> 00:21:24,969
<font color="#E5E5E5">version and all the numbers when you</font>

321
00:21:21,509 --> 00:21:31,179
<font color="#E5E5E5">translate</font><font color="#CCCCCC"> what they say</font><font color="#E5E5E5"> they're all</font>

322
00:21:24,969 --> 00:21:34,059
different<font color="#E5E5E5"> so but the largest one</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> 24</font>

323
00:21:31,179 --> 00:21:40,539
trillion and they say they have 160

324
00:21:34,059 --> 00:21:45,039
terabytes of debt<font color="#E5E5E5"> disk so that's you</font>

325
00:21:40,539 --> 00:21:49,899
know 6.67<font color="#E5E5E5"> passer</font><font color="#CCCCCC"> ab bytes per password</font>

326
00:21:45,039 --> 00:21:55,389
which is less efficient<font color="#CCCCCC"> so optimal</font>

327
00:21:49,899 --> 00:21:58,389
settings for this so this<font color="#CCCCCC"> is a</font>

328
00:21:55,389 --> 00:22:02,649
screenshot of<font color="#CCCCCC"> the lossy hash calculator</font>

329
00:21:58,389 --> 00:22:06,040
<font color="#CCCCCC">that I wrote so</font>

330
00:22:02,650 --> 00:22:08,050
basically<font color="#CCCCCC"> you</font><font color="#E5E5E5"> put in all the settings</font>

331
00:22:06,040 --> 00:22:15,970
there's actually<font color="#E5E5E5"> full auto so it just</font>

332
00:22:08,050 --> 00:22:19,090
does everything<font color="#E5E5E5"> for you</font><font color="#CCCCCC"> so the most</font>

333
00:22:15,970 --> 00:22:23,890
efficient one<font color="#E5E5E5"> so I standardized them all</font>

334
00:22:19,090 --> 00:22:27,909
to the<font color="#E5E5E5"> same size and so the one that's</font>

335
00:22:23,890 --> 00:22:30,430
the fastest is<font color="#CCCCCC"> Hoffman encoded and then</font>

336
00:22:27,910 --> 00:22:34,270
it's minimal perfect hash functions and

337
00:22:30,430 --> 00:22:38,260
then you know<font color="#E5E5E5"> Elias piano and then 8-bit</font>

338
00:22:34,270 --> 00:22:41,200
prefix indexes that's the you know<font color="#E5E5E5"> 48</font>

339
00:22:38,260 --> 00:22:44,890
<font color="#E5E5E5">bits for the pointer and</font><font color="#CCCCCC"> then sixteen</font>

340
00:22:41,200 --> 00:22:54,850
<font color="#CCCCCC">five</font><font color="#E5E5E5"> bit pointers</font><font color="#CCCCCC"> and then Bloomfield</font>

341
00:22:44,890 --> 00:22:59,710
Bloomfield and then bloom<font color="#E5E5E5"> reverse is if</font>

342
00:22:54,850 --> 00:23:14,370
it<font color="#E5E5E5"> is the same exact size so it would be</font>

343
00:22:59,710 --> 00:23:20,620
like<font color="#E5E5E5"> two to</font><font color="#CCCCCC"> three seconds so another</font>

344
00:23:14,370 --> 00:23:21,070
<font color="#E5E5E5">thing for time memory trade-offs when</font>

345
00:23:20,620 --> 00:23:23,678
<font color="#E5E5E5">you</font>

346
00:23:21,070 --> 00:23:29,490
so most password crackers don't actually

347
00:23:23,679 --> 00:23:29,490
you well none really use rainbow tables

348
00:23:29,580 --> 00:23:40,149
the only real uses for them now are for

349
00:23:35,050 --> 00:23:45,639
like<font color="#E5E5E5"> encryption so a few uh several</font>

350
00:23:40,150 --> 00:23:50,050
years<font color="#E5E5E5"> back there was the a 5/1 rainbow</font>

351
00:23:45,640 --> 00:23:54,340
tables and then actually there was a

352
00:23:50,050 --> 00:23:58,389
talk yesterday<font color="#CCCCCC"> think complex passwords</font>

353
00:23:54,340 --> 00:24:01,139
will save you<font color="#CCCCCC"> which they actually</font><font color="#E5E5E5"> built</font>

354
00:23:58,390 --> 00:24:07,840
a rainbow table<font color="#E5E5E5"> to crack does</font>

355
00:24:01,140 --> 00:24:11,230
specifically for mschap<font color="#E5E5E5"> v1 because you</font>

356
00:24:07,840 --> 00:24:13,689
can set the salt to a specific value and

357
00:24:11,230 --> 00:24:16,179
then because<font color="#E5E5E5"> all these time memory</font>

358
00:24:13,690 --> 00:24:21,850
trade-offs<font color="#E5E5E5"> fail</font><font color="#CCCCCC"> if</font>

359
00:24:16,179 --> 00:24:30,070
there's any salt<font color="#CCCCCC"> so</font><font color="#E5E5E5"> unless the salt is</font>

360
00:24:21,850 --> 00:24:33,100
fixed like admin or administrator<font color="#E5E5E5"> or in</font>

361
00:24:30,070 --> 00:24:40,408
the case<font color="#CCCCCC"> of I must chap v1 where you can</font>

362
00:24:33,100 --> 00:24:46,029
<font color="#E5E5E5">just set</font><font color="#CCCCCC"> it to something so oh yeah so</font>

363
00:24:40,409 --> 00:24:52,570
if<font color="#CCCCCC"> B so for the efficiency of Hoffmann</font>

364
00:24:46,029 --> 00:24:59,440
<font color="#CCCCCC">encoding is</font><font color="#E5E5E5"> so the index</font><font color="#CCCCCC"> itself is 1</font>

365
00:24:52,570 --> 00:25:01,570
point 8 bits per<font color="#E5E5E5"> password and so the</font>

366
00:24:59,440 --> 00:25:06,100
best that you<font color="#E5E5E5"> could ever hope for would</font>

367
00:25:01,570 --> 00:25:11,110
<font color="#CCCCCC">be</font><font color="#E5E5E5"> zero so basically</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> need less than</font>

368
00:25:06,100 --> 00:25:16,559
<font color="#E5E5E5">two bits</font><font color="#CCCCCC"> and then for every bit that</font><font color="#E5E5E5"> you</font>

369
00:25:11,110 --> 00:25:16,559
add<font color="#E5E5E5"> divides the key space in half</font>

370
00:25:20,970 --> 00:25:23,970
questions

371
00:25:24,620 --> 00:25:27,750
[Music]

372
00:25:28,299 --> 00:25:46,839
I think that would be all my technical

373
00:25:35,109 --> 00:25:48,039
slides made it longer<font color="#E5E5E5"> yeah so you</font>

374
00:25:46,839 --> 00:25:50,769
mentioned<font color="#CCCCCC"> you were locked</font><font color="#E5E5E5"> out of your</font>

375
00:25:48,039 --> 00:25:54,369
account<font color="#CCCCCC"> I'd be interested</font><font color="#E5E5E5"> in looking at</font>

376
00:25:50,769 --> 00:25:55,869
this<font color="#CCCCCC"> and a passive thing</font><font color="#E5E5E5"> record</font><font color="#CCCCCC"> oh look</font>

377
00:25:54,369 --> 00:25:57,879
at<font color="#CCCCCC"> it does that mean if you were gonna</font>

378
00:25:55,869 --> 00:25:59,708
post it<font color="#CCCCCC"> later and if so could you give</font>

379
00:25:57,879 --> 00:26:01,718
the URL<font color="#E5E5E5"> because I think over</font><font color="#CCCCCC"> here doing</font>

380
00:25:59,709 --> 00:26:02,950
<font color="#E5E5E5">was very interesting but a little</font>

381
00:26:01,719 --> 00:26:06,869
trouble following<font color="#E5E5E5"> your talk</font><font color="#CCCCCC"> so it'd be</font>

382
00:26:02,950 --> 00:26:12,729
great to<font color="#E5E5E5"> have</font><font color="#CCCCCC"> some follow-up material so</font>

383
00:26:06,869 --> 00:26:18,639
<font color="#CCCCCC">tab to</font><font color="#E5E5E5"> comm flash so it's</font><font color="#CCCCCC"> tio being tu</font>

384
00:26:12,729 --> 00:26:20,879
calm that's<font color="#E5E5E5"> my website and then /lh</font><font color="#CCCCCC"> tea</font>

385
00:26:18,639 --> 00:26:24,508
<font color="#E5E5E5">only</font><font color="#CCCCCC"> and I gotta get</font><font color="#E5E5E5"> thing did you get</font>

386
00:26:20,879 --> 00:26:30,820
<font color="#CCCCCC">hey i'll edit my slides live</font><font color="#E5E5E5"> thanks I</font>

387
00:26:24,509 --> 00:26:32,200
<font color="#E5E5E5">will you know what's funny in the</font>

388
00:26:30,820 --> 00:26:39,579
speaker room we were actually talking

389
00:26:32,200 --> 00:26:42,789
about<font color="#E5E5E5"> this so that's the lossy hash</font>

390
00:26:39,579 --> 00:26:45,570
table calculator<font color="#CCCCCC"> there's also a rainbow</font>

391
00:26:42,789 --> 00:26:45,570
table calculator

392
00:26:57,489 --> 00:27:07,819
<font color="#CCCCCC">Paris</font><font color="#E5E5E5"> lighting nice</font>

393
00:27:00,469 --> 00:27:15,019
Oh actually um so I didn't actually

394
00:27:07,819 --> 00:27:18,438
mention this so I<font color="#E5E5E5"> did this like five</font>

395
00:27:15,019 --> 00:27:22,369
years<font color="#CCCCCC"> ago and I was like I'll finish it</font>

396
00:27:18,439 --> 00:27:25,719
<font color="#E5E5E5">you know next week and so I never</font>

397
00:27:22,369 --> 00:27:30,678
actually<font color="#E5E5E5"> got around to finishing it has</font>

398
00:27:25,719 --> 00:27:33,769
it's actually it has like formulas<font color="#E5E5E5"> info</font>

399
00:27:30,679 --> 00:27:40,069
on<font color="#E5E5E5"> rainbow tables the different types of</font>

400
00:27:33,769 --> 00:27:43,239
rainbow tables<font color="#E5E5E5"> stuff like that last</font>

401
00:27:40,069 --> 00:27:43,239
<font color="#CCCCCC">lossy hash tables</font>

402
00:27:49,349 --> 00:27:52,349
<font color="#CCCCCC">Hey</font>

403
00:27:57,410 --> 00:28:02,160
<font color="#E5E5E5">okay thank you very</font><font color="#CCCCCC"> much that was</font><font color="#E5E5E5"> really</font>

404
00:28:00,030 --> 00:28:02,360
really<font color="#CCCCCC"> interesting for a technical thank</font>

405
00:28:02,160 --> 00:28:04,590
you

406
00:28:02,360 --> 00:28:07,659
[Applause]

407
00:28:04,590 --> 00:28:07,659
[Music]

