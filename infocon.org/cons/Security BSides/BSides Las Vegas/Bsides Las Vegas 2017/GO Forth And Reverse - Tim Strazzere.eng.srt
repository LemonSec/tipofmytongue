1
00:00:00,210 --> 00:00:07,560
we're gonna have Tim Jazeera presenting

2
00:00:03,990 --> 00:00:09,480
go forth<font color="#E5E5E5"> and reverse</font><font color="#CCCCCC"> first though a</font>

3
00:00:07,560 --> 00:00:13,620
couple<font color="#CCCCCC"> of quick announcements we are</font>

4
00:00:09,480 --> 00:00:16,350
<font color="#E5E5E5">streaming this</font><font color="#CCCCCC"> live via the interwebs</font><font color="#E5E5E5"> so</font>

5
00:00:13,620 --> 00:00:18,960
please take<font color="#E5E5E5"> out your infernal devices</font>

6
00:00:16,350 --> 00:00:21,840
make sure they're<font color="#CCCCCC"> in silent mode as a</font>

7
00:00:18,960 --> 00:00:27,660
<font color="#E5E5E5">courtesy</font><font color="#CCCCCC"> to our speaker and</font><font color="#E5E5E5"> our at-home</font>

8
00:00:21,840 --> 00:00:29,310
<font color="#E5E5E5">audience</font><font color="#CCCCCC"> I also have a microphone so if</font>

9
00:00:27,660 --> 00:00:31,619
you have<font color="#E5E5E5"> questions raise</font><font color="#CCCCCC"> your hand</font><font color="#E5E5E5"> I'll</font>

10
00:00:29,310 --> 00:00:35,610
give you the microphone<font color="#CCCCCC"> again for the</font>

11
00:00:31,619 --> 00:00:38,239
folks<font color="#E5E5E5"> watching from home</font><font color="#CCCCCC"> quick</font>

12
00:00:35,610 --> 00:00:40,230
announcements about<font color="#CCCCCC"> our sponsors</font>

13
00:00:38,239 --> 00:00:42,449
besides Las Vegas wouldn't happen

14
00:00:40,230 --> 00:00:45,779
without the<font color="#E5E5E5"> generous support of our</font>

15
00:00:42,450 --> 00:00:49,160
sponsors<font color="#CCCCCC"> first bright</font><font color="#E5E5E5"> Pro tippity</font>

16
00:00:45,780 --> 00:00:52,949
tenable<font color="#CCCCCC"> Amazon and source of knowledge</font>

17
00:00:49,160 --> 00:00:56,578
<font color="#E5E5E5">also this is a volunteer run</font>

18
00:00:52,949 --> 00:00:59,190
organization and<font color="#CCCCCC"> conference</font><font color="#E5E5E5"> so big</font>

19
00:00:56,579 --> 00:01:00,600
<font color="#E5E5E5">thanks to</font><font color="#CCCCCC"> the staff</font><font color="#E5E5E5"> and volunteers who</font>

20
00:00:59,190 --> 00:01:01,890
<font color="#CCCCCC">are donating their time</font><font color="#E5E5E5"> to make this</font>

21
00:01:00,600 --> 00:01:05,790
<font color="#CCCCCC">wonderful conference</font><font color="#E5E5E5"> happen and</font>

22
00:01:01,890 --> 00:01:08,700
supporting<font color="#E5E5E5"> our community</font><font color="#CCCCCC"> also if you</font>

23
00:01:05,790 --> 00:01:13,470
have<font color="#E5E5E5"> any feedback for</font><font color="#CCCCCC"> Tim on that can be</font>

24
00:01:08,700 --> 00:01:21,350
<font color="#CCCCCC">given</font><font color="#E5E5E5"> via the sked schedule work</font><font color="#CCCCCC"> website</font>

25
00:01:13,470 --> 00:01:21,350
<font color="#CCCCCC">s c h e d org and with that here's Tim</font>

26
00:01:21,530 --> 00:01:28,920
thank you<font color="#E5E5E5"> so welcome thank you besides</font>

27
00:01:27,299 --> 00:01:31,890
for having me<font color="#CCCCCC"> here</font><font color="#E5E5E5"> and thank</font><font color="#CCCCCC"> you guys</font>

28
00:01:28,920 --> 00:01:34,939
<font color="#CCCCCC">for coming we're gonna do a talk on Go</font>

29
00:01:31,890 --> 00:01:37,590
<font color="#CCCCCC">Go Lane that</font><font color="#E5E5E5"> goofy little gopher and</font>

30
00:01:34,939 --> 00:01:40,619
<font color="#E5E5E5">just a little quick who's</font><font color="#CCCCCC"> read nagas</font>

31
00:01:37,590 --> 00:01:42,000
since it was<font color="#CCCCCC"> i'm with</font><font color="#E5E5E5"> red naga we just</font>

32
00:01:40,619 --> 00:01:46,380
kind of been together<font color="#E5E5E5"> it's a couple</font>

33
00:01:42,000 --> 00:01:48,570
<font color="#E5E5E5">people we mainly do routing of Android</font>

34
00:01:46,380 --> 00:01:50,460
devices<font color="#E5E5E5"> IOT devices that kind of thing</font>

35
00:01:48,570 --> 00:01:52,408
<font color="#E5E5E5">it's open to anyone</font>

36
00:01:50,460 --> 00:01:54,710
we<font color="#E5E5E5"> accept blog posts</font><font color="#CCCCCC"> from anyone it's</font>

37
00:01:52,409 --> 00:01:57,240
kind<font color="#CCCCCC"> of like that old</font>

38
00:01:54,710 --> 00:01:59,039
hacking<font color="#E5E5E5"> and like csgo kind of thing</font>

39
00:01:57,240 --> 00:02:00,420
where all<font color="#E5E5E5"> you need to do is take</font><font color="#CCCCCC"> a</font>

40
00:01:59,040 --> 00:02:02,640
<font color="#CCCCCC">picture of</font><font color="#E5E5E5"> yourself</font><font color="#CCCCCC"> eating</font><font color="#E5E5E5"> the hottest</font>

41
00:02:00,420 --> 00:02:04,680
pepper you can<font color="#E5E5E5"> stand and you're welcome</font>

42
00:02:02,640 --> 00:02:06,210
<font color="#CCCCCC">to join the club everyone else has done</font>

43
00:02:04,680 --> 00:02:08,580
<font color="#E5E5E5">different varying levels some people</font>

44
00:02:06,210 --> 00:02:10,919
<font color="#E5E5E5">jalapeno some people red Nagas which are</font>

45
00:02:08,580 --> 00:02:12,270
the ghost peppers<font color="#CCCCCC"> if you check</font><font color="#E5E5E5"> out our</font>

46
00:02:10,919 --> 00:02:13,859
<font color="#CCCCCC">website we</font><font color="#E5E5E5"> have lots of different</font>

47
00:02:12,270 --> 00:02:15,660
<font color="#E5E5E5">training materials that we put</font>

48
00:02:13,860 --> 00:02:18,660
gather the<font color="#E5E5E5"> whole thought process</font><font color="#CCCCCC"> behind</font>

49
00:02:15,660 --> 00:02:20,040
<font color="#E5E5E5">this and I think</font><font color="#CCCCCC"> b-sides as well is</font><font color="#E5E5E5"> we</font>

50
00:02:18,660 --> 00:02:21,630
want everyone<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> community</font><font color="#E5E5E5"> to get a</font>

51
00:02:20,040 --> 00:02:23,700
lot better<font color="#E5E5E5"> because we don't want anyone</font>

52
00:02:21,630 --> 00:02:25,799
<font color="#E5E5E5">doing boring work so hopefully everyone</font>

53
00:02:23,700 --> 00:02:27,690
gets an awesome set of tools<font color="#E5E5E5"> an awesome</font>

54
00:02:25,800 --> 00:02:29,910
skill set and then starts releasing

55
00:02:27,690 --> 00:02:32,520
<font color="#E5E5E5">things open source so</font><font color="#CCCCCC"> that essentially</font>

56
00:02:29,910 --> 00:02:35,280
<font color="#E5E5E5">you know no one has to do that really</font>

57
00:02:32,520 --> 00:02:36,420
bad and boring<font color="#E5E5E5"> work anymore</font><font color="#CCCCCC"> that also</font>

58
00:02:35,280 --> 00:02:38,370
<font color="#E5E5E5">means that we</font><font color="#CCCCCC"> can concentrate all</font><font color="#E5E5E5"> our</font>

59
00:02:36,420 --> 00:02:40,559
time<font color="#CCCCCC"> on really fun tasks like you know</font>

60
00:02:38,370 --> 00:02:43,170
hitting<font color="#E5E5E5"> new devices and you know maybe</font>

61
00:02:40,560 --> 00:02:46,170
developers won't<font color="#E5E5E5"> be doing these</font><font color="#CCCCCC"> really</font>

62
00:02:43,170 --> 00:02:48,208
silly things<font color="#CCCCCC"> anymore specifically who am</font>

63
00:02:46,170 --> 00:02:50,549
I<font color="#CCCCCC"> currently I'm</font><font color="#E5E5E5"> a security engineer at</font>

64
00:02:48,209 --> 00:02:52,410
<font color="#E5E5E5">CloudFlare previously I worked at</font>

65
00:02:50,550 --> 00:02:54,600
<font color="#CCCCCC">lookout</font><font color="#E5E5E5"> and Sentinel</font><font color="#CCCCCC"> one which are</font><font color="#E5E5E5"> both</font>

66
00:02:52,410 --> 00:02:56,880
<font color="#E5E5E5">endpoint detection clients one for</font>

67
00:02:54,600 --> 00:02:58,950
mobile<font color="#E5E5E5"> one for basically desktops and</font>

68
00:02:56,880 --> 00:03:01,590
servers<font color="#CCCCCC"> so a lot of the things I've</font>

69
00:02:58,950 --> 00:03:03,720
learned<font color="#CCCCCC"> over the years</font><font color="#E5E5E5"> are trying to</font>

70
00:03:01,590 --> 00:03:05,190
figure out<font color="#E5E5E5"> how to unpack things really</font>

71
00:03:03,720 --> 00:03:06,959
<font color="#E5E5E5">fast in an automated way</font>

72
00:03:05,190 --> 00:03:08,670
do you office<font color="#CCCCCC"> Kate them and try and</font>

73
00:03:06,959 --> 00:03:10,230
basically<font color="#E5E5E5"> reverse things as fast as</font>

74
00:03:08,670 --> 00:03:12,510
possible<font color="#CCCCCC"> so that</font><font color="#E5E5E5"> we can confirm whether</font>

75
00:03:10,230 --> 00:03:14,130
it's benign<font color="#CCCCCC"> or it's malicious and if</font>

76
00:03:12,510 --> 00:03:16,679
it's malicious what's it doing and what

77
00:03:14,130 --> 00:03:18,930
do we need<font color="#E5E5E5"> to protect our our endpoints</font>

78
00:03:16,680 --> 00:03:20,610
or customers from and<font color="#E5E5E5"> that's sort of</font>

79
00:03:18,930 --> 00:03:23,580
where this talk<font color="#E5E5E5"> came from we started</font>

80
00:03:20,610 --> 00:03:25,410
seeing<font color="#E5E5E5"> a big outburst in</font><font color="#CCCCCC"> go malware and</font>

81
00:03:23,580 --> 00:03:27,209
we<font color="#E5E5E5"> would just see these binaries getting</font>

82
00:03:25,410 --> 00:03:28,590
dropped and they were really<font color="#E5E5E5"> weird and</font>

83
00:03:27,209 --> 00:03:31,650
we'll<font color="#E5E5E5"> get</font><font color="#CCCCCC"> into that a little bit later</font>

84
00:03:28,590 --> 00:03:33,450
<font color="#E5E5E5">but essentially go is a lot different</font>

85
00:03:31,650 --> 00:03:36,390
than let's<font color="#E5E5E5"> just say</font><font color="#CCCCCC"> C and then if you</font>

86
00:03:33,450 --> 00:03:37,859
were<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to detect malicious binaries</font>

87
00:03:36,390 --> 00:03:40,950
or<font color="#CCCCCC"> if you were actually</font><font color="#E5E5E5"> gonna be</font><font color="#CCCCCC"> doing</font>

88
00:03:37,860 --> 00:03:42,269
penetration penetration testing on<font color="#E5E5E5"> you</font>

89
00:03:40,950 --> 00:03:45,000
know some<font color="#E5E5E5"> kind of binary that someone</font>

90
00:03:42,269 --> 00:03:47,549
has on a server<font color="#E5E5E5"> or something that that's</font>

91
00:03:45,000 --> 00:03:49,440
getting<font color="#E5E5E5"> dropped on a desktop</font><font color="#CCCCCC"> you might</font>

92
00:03:47,549 --> 00:03:51,090
want<font color="#E5E5E5"> to find out where the quirks are</font>

93
00:03:49,440 --> 00:03:52,709
and where things<font color="#CCCCCC"> actually are</font><font color="#E5E5E5"> my github</font>

94
00:03:51,090 --> 00:03:54,600
<font color="#CCCCCC">is</font><font color="#E5E5E5"> up there my twitter</font><font color="#CCCCCC"> is up there and</font>

95
00:03:52,709 --> 00:03:56,640
if you like hot<font color="#E5E5E5"> sauces I'll send you</font>

96
00:03:54,600 --> 00:03:58,260
something that I made myself<font color="#E5E5E5"> you might</font>

97
00:03:56,640 --> 00:04:02,130
have to sign<font color="#E5E5E5"> a waiver and if you have</font>

98
00:03:58,260 --> 00:04:05,130
really<font color="#E5E5E5"> hot sauces let's drink them</font><font color="#CCCCCC"> so</font>

99
00:04:02,130 --> 00:04:07,970
again<font color="#E5E5E5"> why am I here</font><font color="#CCCCCC"> go isn't necessarily</font>

100
00:04:05,130 --> 00:04:11,400
new<font color="#E5E5E5"> it's it came out and I believe</font>

101
00:04:07,970 --> 00:04:13,140
thousand twelve<font color="#E5E5E5"> but it got a little bit</font>

102
00:04:11,400 --> 00:04:15,239
of<font color="#E5E5E5"> pickup people are you know go</font>

103
00:04:13,140 --> 00:04:17,010
aficionados already you see it<font color="#E5E5E5"> sometimes</font>

104
00:04:15,239 --> 00:04:18,959
on job descriptions where you know you

105
00:04:17,010 --> 00:04:20,418
have to have 20<font color="#CCCCCC"> years</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> experience and</font>

106
00:04:18,959 --> 00:04:23,520
go even<font color="#CCCCCC"> though</font><font color="#E5E5E5"> it didn't exist that long</font>

107
00:04:20,418 --> 00:04:24,719
<font color="#E5E5E5">but you know for reversing</font><font color="#CCCCCC"> I haven't</font>

108
00:04:23,520 --> 00:04:27,000
personally<font color="#E5E5E5"> seen many</font><font color="#CCCCCC"> people talking</font>

109
00:04:24,720 --> 00:04:28,050
<font color="#E5E5E5">about reversing</font><font color="#CCCCCC"> go binaries and what are</font>

110
00:04:27,000 --> 00:04:29,490
the nuances of it and

111
00:04:28,050 --> 00:04:31,349
how do<font color="#E5E5E5"> we get into the good bits of it</font>

112
00:04:29,490 --> 00:04:34,710
<font color="#CCCCCC">there's been lots of different</font><font color="#E5E5E5"> malware</font>

113
00:04:31,349 --> 00:04:36,060
it's an interesting<font color="#E5E5E5"> platform it's</font><font color="#CCCCCC"> in if</font>

114
00:04:34,710 --> 00:04:38,099
you're a go developer don't<font color="#E5E5E5"> throw</font>

115
00:04:36,060 --> 00:04:40,259
anything at me<font color="#CCCCCC"> it's sort of like</font><font color="#E5E5E5"> Java or</font>

116
00:04:38,099 --> 00:04:42,469
at least the concept<font color="#CCCCCC"> of</font><font color="#E5E5E5"> Java</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> I can</font>

117
00:04:40,259 --> 00:04:45,210
write code<font color="#E5E5E5"> once and</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> will run anywhere</font>

118
00:04:42,470 --> 00:04:47,280
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> different from Java for many</font>

119
00:04:45,210 --> 00:04:49,650
<font color="#E5E5E5">reasons because it's actually fast</font><font color="#CCCCCC"> it's</font>

120
00:04:47,280 --> 00:04:52,020
actually<font color="#CCCCCC"> pretty memory safe and it</font>

121
00:04:49,650 --> 00:04:54,388
actually<font color="#E5E5E5"> is nice to write the code</font><font color="#CCCCCC"> so</font>

122
00:04:52,020 --> 00:04:56,430
this<font color="#E5E5E5"> is sort of a thing</font><font color="#CCCCCC"> that I grabbed</font>

123
00:04:54,389 --> 00:04:57,870
from<font color="#CCCCCC"> the web one website but basically</font>

124
00:04:56,430 --> 00:04:59,550
things are gonna<font color="#E5E5E5"> be more efficient you</font>

125
00:04:57,870 --> 00:05:01,530
can write really fast servers and

126
00:04:59,550 --> 00:05:03,690
probably like three<font color="#CCCCCC"> lines</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> code and</font>

127
00:05:01,530 --> 00:05:05,909
there's a huge open source community

128
00:05:03,690 --> 00:05:08,190
<font color="#E5E5E5">around it so it's it's a</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> great</font>

129
00:05:05,909 --> 00:05:09,479
tool and<font color="#E5E5E5"> you should check it out and see</font>

130
00:05:08,190 --> 00:05:11,340
if<font color="#E5E5E5"> like you want to actually use</font><font color="#CCCCCC"> this</font>

131
00:05:09,479 --> 00:05:12,750
<font color="#E5E5E5">just in your day to</font><font color="#CCCCCC"> day</font><font color="#E5E5E5"> development</font><font color="#CCCCCC"> I've</font>

132
00:05:11,340 --> 00:05:15,810
basically been switching<font color="#E5E5E5"> over all my</font>

133
00:05:12,750 --> 00:05:18,120
personal reversing tools to start<font color="#CCCCCC"> being</font>

134
00:05:15,810 --> 00:05:19,830
written and<font color="#E5E5E5"> go</font><font color="#CCCCCC"> so I guess I'm a</font><font color="#E5E5E5"> hipster</font>

135
00:05:18,120 --> 00:05:22,650
<font color="#E5E5E5">I do live</font><font color="#CCCCCC"> in the Bay Area it's kind of</font>

136
00:05:19,830 --> 00:05:24,479
like that but let's dig<font color="#E5E5E5"> it in from the</font>

137
00:05:22,650 --> 00:05:26,580
reversing side and what it<font color="#E5E5E5"> actually</font>

138
00:05:24,479 --> 00:05:28,500
looks<font color="#CCCCCC"> like</font><font color="#E5E5E5"> differently then let's just</font>

139
00:05:26,580 --> 00:05:31,289
say<font color="#CCCCCC"> see because you know</font><font color="#E5E5E5"> she's still</font>

140
00:05:28,500 --> 00:05:32,580
that master language<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> just that</font>

141
00:05:31,289 --> 00:05:34,800
simple hello world that you've probably

142
00:05:32,580 --> 00:05:37,469
seen a billion times<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is what I</font>

143
00:05:34,800 --> 00:05:40,979
<font color="#CCCCCC">get decompose excuse me disassembled too</font>

144
00:05:37,469 --> 00:05:41,940
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> really like a small tiny binary and</font>

145
00:05:40,979 --> 00:05:44,099
you're basically<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to have one</font>

146
00:05:41,940 --> 00:05:48,000
function<font color="#E5E5E5"> to</font><font color="#CCCCCC"> look at this is a screenshot</font>

147
00:05:44,099 --> 00:05:49,979
of<font color="#E5E5E5"> binary ninja but so basically if you</font>

148
00:05:48,000 --> 00:05:51,599
took something out and you<font color="#CCCCCC"> just reverse</font>

149
00:05:49,979 --> 00:05:52,919
<font color="#E5E5E5">it it's pretty straightforward you're</font>

150
00:05:51,599 --> 00:05:54,509
only gonna have<font color="#CCCCCC"> a couple functions</font><font color="#E5E5E5"> maybe</font>

151
00:05:52,919 --> 00:05:56,250
a couple imports but there's really

152
00:05:54,509 --> 00:05:57,629
nothing<font color="#CCCCCC"> there so if you had a really</font>

153
00:05:56,250 --> 00:05:59,099
<font color="#E5E5E5">simple piece</font><font color="#CCCCCC"> of malware you're gonna</font>

154
00:05:57,629 --> 00:06:01,349
know exactly<font color="#CCCCCC"> where you want to look into</font>

155
00:05:59,099 --> 00:06:04,710
<font color="#E5E5E5">the binary so it's low level minimal and</font>

156
00:06:01,349 --> 00:06:06,690
it's fast<font color="#E5E5E5"> wise go different though so</font>

157
00:06:04,710 --> 00:06:08,789
that same<font color="#E5E5E5"> example we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> end up</font>

158
00:06:06,690 --> 00:06:11,789
seeing<font color="#E5E5E5"> this it gets a little crazy</font>

159
00:06:08,789 --> 00:06:13,949
essentially that<font color="#E5E5E5"> one little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> can be</font>

160
00:06:11,789 --> 00:06:16,469
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> it can be compiled on any</font>

161
00:06:13,949 --> 00:06:18,419
machine<font color="#CCCCCC"> to either</font><font color="#E5E5E5"> a PE so that's gonna</font>

162
00:06:16,469 --> 00:06:20,520
be a Windows executable<font color="#CCCCCC"> an elf</font>

163
00:06:18,419 --> 00:06:22,289
so<font color="#E5E5E5"> Linux executable</font><font color="#CCCCCC"> or a Mac o file</font>

164
00:06:20,520 --> 00:06:24,930
which is<font color="#E5E5E5"> going to be the Darwin and Mac</font>

165
00:06:22,289 --> 00:06:26,818
<font color="#CCCCCC">OS stuff</font><font color="#E5E5E5"> and then inside</font><font color="#CCCCCC"> that executable</font>

166
00:06:24,930 --> 00:06:29,190
it's gonna<font color="#E5E5E5"> inject its entire framework</font>

167
00:06:26,819 --> 00:06:34,139
and a runtime in there<font color="#E5E5E5"> and then your</font>

168
00:06:29,190 --> 00:06:35,490
code<font color="#E5E5E5"> is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be inside there so if</font>

169
00:06:34,139 --> 00:06:37,349
we were to look at<font color="#E5E5E5"> this from a reversing</font>

170
00:06:35,490 --> 00:06:38,789
standpoint what we're gonna see is we're

171
00:06:37,349 --> 00:06:40,320
gonna see<font color="#CCCCCC"> okay there's a start function</font>

172
00:06:38,789 --> 00:06:41,340
<font color="#CCCCCC">all right let's go to start because</font>

173
00:06:40,320 --> 00:06:42,930
that's<font color="#E5E5E5"> what the</font>

174
00:06:41,340 --> 00:06:44,760
actual operating systems calling<font color="#E5E5E5"> first</font>

175
00:06:42,930 --> 00:06:46,139
<font color="#CCCCCC">and we see that it's like okay well</font>

176
00:06:44,760 --> 00:06:48,930
there's some start<font color="#E5E5E5"> there's a call to</font>

177
00:06:46,139 --> 00:06:51,449
<font color="#CCCCCC">main there's</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> runtime jump and that</font>

178
00:06:48,930 --> 00:06:54,030
leads us over - there's that<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> rt0</font>

179
00:06:51,449 --> 00:06:56,040
<font color="#E5E5E5">go and this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> ends up being a</font>

180
00:06:54,030 --> 00:06:57,809
relatively large function and then we

181
00:06:56,040 --> 00:06:59,250
see this<font color="#E5E5E5"> really</font><font color="#CCCCCC"> awesome</font><font color="#E5E5E5"> thing down there</font>

182
00:06:57,810 --> 00:07:00,750
that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> just a pointer that the</font>

183
00:06:59,250 --> 00:07:02,639
disassembler didn't understand what

184
00:07:00,750 --> 00:07:05,370
<font color="#E5E5E5">that's a pointer to or why that is</font>

185
00:07:02,639 --> 00:07:08,010
that's actually<font color="#CCCCCC"> being passed in there as</font>

186
00:07:05,370 --> 00:07:10,889
a here's the<font color="#E5E5E5"> address of my</font><font color="#CCCCCC"> process and</font><font color="#E5E5E5"> I</font>

187
00:07:08,010 --> 00:07:13,650
want<font color="#CCCCCC"> to start</font><font color="#E5E5E5"> up a new process that</font><font color="#CCCCCC"> goes</font>

188
00:07:10,889 --> 00:07:15,360
to<font color="#CCCCCC"> runtime main and so in</font><font color="#E5E5E5"> runtime main</font>

189
00:07:13,650 --> 00:07:17,429
you're<font color="#E5E5E5"> gonna dig in here and we're</font><font color="#CCCCCC"> gonna</font>

190
00:07:15,360 --> 00:07:20,790
see that<font color="#E5E5E5"> it actually has a call to</font><font color="#CCCCCC"> main</font>

191
00:07:17,430 --> 00:07:22,979
main so that was really<font color="#CCCCCC"> easy right like</font>

192
00:07:20,790 --> 00:07:24,540
just that<font color="#E5E5E5"> one line ends up exploding</font>

193
00:07:22,979 --> 00:07:25,680
into these things<font color="#E5E5E5"> that if you've never</font>

194
00:07:24,540 --> 00:07:27,540
seen it you're just<font color="#E5E5E5"> looking around</font>

195
00:07:25,680 --> 00:07:29,280
where's my main function where's my main

196
00:07:27,540 --> 00:07:30,660
function<font color="#CCCCCC"> this is how you would try</font><font color="#E5E5E5"> and</font>

197
00:07:29,280 --> 00:07:31,169
get it<font color="#E5E5E5"> from the entry point which is</font>

198
00:07:30,660 --> 00:07:33,960
start

199
00:07:31,169 --> 00:07:38,219
so start main<font color="#CCCCCC"> runtime runtime new proc</font>

200
00:07:33,960 --> 00:07:39,419
main main that's super<font color="#CCCCCC"> easy right it's</font>

201
00:07:38,220 --> 00:07:41,940
not<font color="#E5E5E5"> super easy</font><font color="#CCCCCC"> and it's a pain</font><font color="#E5E5E5"> when</font>

202
00:07:39,419 --> 00:07:43,500
people start<font color="#E5E5E5"> hardening it</font><font color="#CCCCCC"> and then again</font>

203
00:07:41,940 --> 00:07:44,669
this<font color="#E5E5E5"> is binary ninja this is what it</font>

204
00:07:43,500 --> 00:07:47,460
looks like<font color="#E5E5E5"> when you start digging into</font>

205
00:07:44,669 --> 00:07:49,950
<font color="#CCCCCC">it a little bit deeper we have over 2000</font>

206
00:07:47,460 --> 00:07:52,590
or<font color="#CCCCCC"> so methods in just a hollow</font><font color="#E5E5E5"> worlds</font>

207
00:07:49,950 --> 00:07:54,330
binary<font color="#E5E5E5"> and this is all the runtime this</font>

208
00:07:52,590 --> 00:07:55,500
is all the things<font color="#E5E5E5"> that go is injecting</font>

209
00:07:54,330 --> 00:07:59,099
in there so<font color="#E5E5E5"> that it can try and run</font>

210
00:07:55,500 --> 00:08:01,139
efficiently<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is what the normal main</font>

211
00:07:59,099 --> 00:08:02,760
main function looks<font color="#CCCCCC"> like</font><font color="#E5E5E5"> we can see that</font>

212
00:08:01,139 --> 00:08:04,500
we have a hello world<font color="#E5E5E5"> being</font><font color="#CCCCCC"> loaded in</font>

213
00:08:02,760 --> 00:08:05,909
there and there's all these other magic

214
00:08:04,500 --> 00:08:09,120
things and there's this weird little

215
00:08:05,910 --> 00:08:11,669
<font color="#E5E5E5">runtime stack more context or runtime</font>

216
00:08:09,120 --> 00:08:13,500
stack<font color="#E5E5E5"> no context and then a jump back</font><font color="#CCCCCC"> up</font>

217
00:08:11,669 --> 00:08:15,450
to the<font color="#E5E5E5"> front so none of this code was</font>

218
00:08:13,500 --> 00:08:17,550
anything<font color="#E5E5E5"> I wrote all I did was</font><font color="#CCCCCC"> AC say</font>

219
00:08:15,450 --> 00:08:19,469
print line hello world<font color="#E5E5E5"> we got this whole</font>

220
00:08:17,550 --> 00:08:20,460
<font color="#CCCCCC">thing in</font><font color="#E5E5E5"> here now and then if we</font>

221
00:08:19,470 --> 00:08:22,770
<font color="#E5E5E5">scrolled down to the bottom of that</font>

222
00:08:20,460 --> 00:08:25,650
function that's that one<font color="#E5E5E5"> function that I</font>

223
00:08:22,770 --> 00:08:27,419
wrote<font color="#E5E5E5"> and what I wanted</font><font color="#CCCCCC"> so there's a lot</font>

224
00:08:25,650 --> 00:08:29,039
<font color="#E5E5E5">of things that are getting compiled in</font>

225
00:08:27,419 --> 00:08:30,750
here<font color="#E5E5E5"> so you could see how it might get</font>

226
00:08:29,039 --> 00:08:33,240
<font color="#E5E5E5">kind of confusing</font><font color="#CCCCCC"> if someone was</font>

227
00:08:30,750 --> 00:08:34,979
potentially trying<font color="#E5E5E5"> to hide things or if</font>

228
00:08:33,240 --> 00:08:36,330
someone was<font color="#E5E5E5"> you know actually writing</font>

229
00:08:34,979 --> 00:08:40,650
something<font color="#E5E5E5"> that's more than one line of</font>

230
00:08:36,330 --> 00:08:42,690
code so here's an example<font color="#E5E5E5"> of when</font>

231
00:08:40,650 --> 00:08:44,579
<font color="#E5E5E5">someone tries</font><font color="#CCCCCC"> to make</font><font color="#E5E5E5"> it hard to</font><font color="#CCCCCC"> reverse</font>

232
00:08:42,690 --> 00:08:46,380
all they're doing is<font color="#E5E5E5"> adding a strip flag</font>

233
00:08:44,580 --> 00:08:48,240
so maybe you've seen<font color="#E5E5E5"> this when someone</font>

234
00:08:46,380 --> 00:08:50,970
<font color="#E5E5E5">writes a C code they strip it out this</font>

235
00:08:48,240 --> 00:08:52,440
usually drops the the symbols table so

236
00:08:50,970 --> 00:08:54,400
then the compiler<font color="#CCCCCC"> is like I</font><font color="#E5E5E5"> don't really</font>

237
00:08:52,440 --> 00:08:55,960
<font color="#E5E5E5">know the</font><font color="#CCCCCC"> name of</font><font color="#E5E5E5"> anything</font>

238
00:08:54,400 --> 00:08:57,370
<font color="#CCCCCC">I don't really</font><font color="#E5E5E5"> know what's going on but</font>

239
00:08:55,960 --> 00:08:59,260
I know there's a function<font color="#CCCCCC"> I don't know</font>

240
00:08:57,370 --> 00:09:01,660
what it was<font color="#E5E5E5"> called</font><font color="#CCCCCC"> and essentially what</font>

241
00:08:59,260 --> 00:09:04,300
we see is now all those<font color="#CCCCCC"> 2,000 methods on</font>

242
00:09:01,660 --> 00:09:07,120
the<font color="#E5E5E5"> left-hand side don't have names so</font>

243
00:09:04,300 --> 00:09:09,160
if you didn't already<font color="#E5E5E5"> know how to get</font>

244
00:09:07,120 --> 00:09:10,510
there directly<font color="#E5E5E5"> from the start stub which</font>

245
00:09:09,160 --> 00:09:13,360
is you know going<font color="#E5E5E5"> through</font><font color="#CCCCCC"> all those</font>

246
00:09:10,510 --> 00:09:15,880
runtime execs<font color="#CCCCCC"> all that stuff</font><font color="#E5E5E5"> we don't</font>

247
00:09:13,360 --> 00:09:18,460
<font color="#CCCCCC">really know where any of</font><font color="#E5E5E5"> these functions</font>

248
00:09:15,880 --> 00:09:19,480
are what their names might be which is

249
00:09:18,460 --> 00:09:21,220
pretty<font color="#E5E5E5"> common when you're trying to</font>

250
00:09:19,480 --> 00:09:23,140
reverse<font color="#CCCCCC"> you know a malicious payload</font><font color="#E5E5E5"> or</font>

251
00:09:21,220 --> 00:09:25,150
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that we also see that at</font>

252
00:09:23,140 --> 00:09:28,480
least binary ninja<font color="#E5E5E5"> looks at this and it</font>

253
00:09:25,150 --> 00:09:29,439
goes okay well it's<font color="#E5E5E5"> some bytes</font><font color="#CCCCCC"> I don't</font>

254
00:09:28,480 --> 00:09:31,510
really know what's up<font color="#CCCCCC"> with that</font>

255
00:09:29,440 --> 00:09:33,490
<font color="#E5E5E5">so you'd</font><font color="#CCCCCC"> actually have to go all the way</font>

256
00:09:31,510 --> 00:09:34,780
find the main function<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then tell it</font>

257
00:09:33,490 --> 00:09:37,900
<font color="#CCCCCC">it's a function because it couldn't</font>

258
00:09:34,780 --> 00:09:39,640
figure<font color="#CCCCCC"> that out</font><font color="#E5E5E5"> on itself</font><font color="#CCCCCC"> so when we</font>

259
00:09:37,900 --> 00:09:41,680
force change it we now have<font color="#CCCCCC"> that same</font>

260
00:09:39,640 --> 00:09:43,240
exact method<font color="#E5E5E5"> so we basically said this</font>

261
00:09:41,680 --> 00:09:44,949
<font color="#E5E5E5">is a function I want you to display it</font>

262
00:09:43,240 --> 00:09:47,230
<font color="#E5E5E5">as a function and start disassembling it</font>

263
00:09:44,950 --> 00:09:50,440
and this<font color="#E5E5E5"> is the same exact one</font><font color="#CCCCCC"> we still</font>

264
00:09:47,230 --> 00:09:53,080
<font color="#E5E5E5">don't see any cross references to any of</font>

265
00:09:50,440 --> 00:09:54,640
the previous functions and so that's

266
00:09:53,080 --> 00:09:55,870
kind of worrisome so we're you know<font color="#CCCCCC"> if</font>

267
00:09:54,640 --> 00:09:57,460
we want<font color="#E5E5E5"> to try and backtrack to</font><font color="#CCCCCC"> the</font>

268
00:09:55,870 --> 00:10:00,430
entry point or see if this code<font color="#E5E5E5"> has ever</font>

269
00:09:57,460 --> 00:10:02,650
used it might be a little<font color="#E5E5E5"> difficult</font><font color="#CCCCCC"> what</font>

270
00:10:00,430 --> 00:10:04,329
we also<font color="#E5E5E5"> see is the functions on the Left</font>

271
00:10:02,650 --> 00:10:07,120
where before<font color="#CCCCCC"> had</font><font color="#E5E5E5"> all those names you</font>

272
00:10:04,330 --> 00:10:11,080
know<font color="#E5E5E5"> run time no context it doesn't know</font>

273
00:10:07,120 --> 00:10:13,300
what those are<font color="#CCCCCC"> called so why should you</font>

274
00:10:11,080 --> 00:10:15,460
<font color="#E5E5E5">care</font><font color="#CCCCCC"> this is a friend over</font><font color="#E5E5E5"> at ESET he</font>

275
00:10:13,300 --> 00:10:18,099
basically spends his entire<font color="#E5E5E5"> life looking</font>

276
00:10:15,460 --> 00:10:19,780
<font color="#CCCCCC">at Linux binaries</font><font color="#E5E5E5"> and you should follow</font>

277
00:10:18,100 --> 00:10:21,640
him on<font color="#E5E5E5"> Twitter and you</font><font color="#CCCCCC"> can see lots</font><font color="#E5E5E5"> of</font>

278
00:10:19,780 --> 00:10:24,520
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> things that he starts</font>

279
00:10:21,640 --> 00:10:26,920
talking<font color="#E5E5E5"> about and it's a pain yes he's</font>

280
00:10:24,520 --> 00:10:28,120
been<font color="#E5E5E5"> rebuilding these by hand a lot we</font>

281
00:10:26,920 --> 00:10:29,530
did some work to automate<font color="#CCCCCC"> some of</font><font color="#E5E5E5"> that</font>

282
00:10:28,120 --> 00:10:32,350
that's<font color="#E5E5E5"> basically what this talk is</font><font color="#CCCCCC"> about</font>

283
00:10:29,530 --> 00:10:33,939
<font color="#E5E5E5">but basically he hates it and it's</font>

284
00:10:32,350 --> 00:10:36,100
<font color="#E5E5E5">really annoying because people are just</font>

285
00:10:33,940 --> 00:10:37,960
<font color="#CCCCCC">basically saying</font><font color="#E5E5E5"> oh go has this awesome</font>

286
00:10:36,100 --> 00:10:40,000
<font color="#CCCCCC">open-source</font><font color="#E5E5E5"> community where</font><font color="#CCCCCC"> people have</font>

287
00:10:37,960 --> 00:10:42,400
done<font color="#E5E5E5"> crypto miners</font><font color="#CCCCCC"> that are efficient</font>

288
00:10:40,000 --> 00:10:43,900
people<font color="#E5E5E5"> have done you know SSH scanners</font>

289
00:10:42,400 --> 00:10:46,030
that<font color="#E5E5E5"> are efficient so all you need to do</font>

290
00:10:43,900 --> 00:10:47,650
is say get<font color="#E5E5E5"> that package get that package</font>

291
00:10:46,030 --> 00:10:52,810
<font color="#CCCCCC">and then we all run out of</font><font color="#E5E5E5"> the building</font>

292
00:10:47,650 --> 00:10:53,480
<font color="#CCCCCC">because there's a fire I'll try</font><font color="#E5E5E5"> and keep</font>

293
00:10:52,810 --> 00:10:55,790
<font color="#CCCCCC">going</font>

294
00:10:53,480 --> 00:11:00,310
[Music]

295
00:10:55,790 --> 00:11:06,490
[Applause]

296
00:11:00,310 --> 00:11:11,510
[Music]

297
00:11:06,490 --> 00:11:13,520
<font color="#CCCCCC">it sounds like</font><font color="#E5E5E5"> we got to evacuate</font><font color="#CCCCCC"> so</font>

298
00:11:11,510 --> 00:11:16,430
yeah essentially<font color="#CCCCCC"> you know like I was</font>

299
00:11:13,520 --> 00:11:26,480
saying I think<font color="#E5E5E5"> I said it I'm not</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> go</font>

300
00:11:16,430 --> 00:11:28,609
ahead<font color="#E5E5E5"> okay anyway it's really easy with</font>

301
00:11:26,480 --> 00:11:30,920
only like maybe let's say<font color="#E5E5E5"> 200 lines of</font>

302
00:11:28,610 --> 00:11:33,140
code to<font color="#E5E5E5"> throw something together which</font>

303
00:11:30,920 --> 00:11:35,209
is<font color="#E5E5E5"> going to be malicious it's going to</font>

304
00:11:33,140 --> 00:11:36,410
start<font color="#E5E5E5"> Auto scanning things and again</font>

305
00:11:35,210 --> 00:11:38,180
<font color="#E5E5E5">it's platform-independent</font>

306
00:11:36,410 --> 00:11:39,469
and<font color="#E5E5E5"> you're efficient so not</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> can you</font>

307
00:11:38,180 --> 00:11:40,819
infect someone's<font color="#E5E5E5"> computer but you can be</font>

308
00:11:39,470 --> 00:11:42,560
nice<font color="#E5E5E5"> about it and</font><font color="#CCCCCC"> have a low memory</font>

309
00:11:40,820 --> 00:11:46,280
profile and<font color="#CCCCCC"> everything is just going to</font>

310
00:11:42,560 --> 00:11:47,750
<font color="#E5E5E5">work so like I said go straight forward</font>

311
00:11:46,280 --> 00:11:49,640
it's easy to use so that<font color="#E5E5E5"> means it's easy</font>

312
00:11:47,750 --> 00:11:53,090
for good guys and it's easy<font color="#E5E5E5"> for bad guys</font>

313
00:11:49,640 --> 00:11:54,680
to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> over the past year and a half</font><font color="#E5E5E5"> or</font>

314
00:11:53,090 --> 00:11:57,290
so<font color="#E5E5E5"> we've seen lots of</font><font color="#CCCCCC"> different things</font>

315
00:11:54,680 --> 00:11:59,449
pop up<font color="#CCCCCC"> in the Linux arena where it was</font>

316
00:11:57,290 --> 00:12:02,150
like Linux lady<font color="#E5E5E5"> Rex</font>

317
00:11:59,450 --> 00:12:04,130
agent DT because you know we don't<font color="#E5E5E5"> like</font>

318
00:12:02,150 --> 00:12:06,470
naming<font color="#E5E5E5"> things interesting things anymore</font>

319
00:12:04,130 --> 00:12:08,360
<font color="#CCCCCC">or we</font><font color="#E5E5E5"> just see them too much</font><font color="#CCCCCC"> there's</font>

320
00:12:06,470 --> 00:12:10,280
also lots of proof of concepts out<font color="#E5E5E5"> there</font>

321
00:12:08,360 --> 00:12:12,290
<font color="#CCCCCC">on github so it's essentially lots of</font>

322
00:12:10,280 --> 00:12:14,360
things saying like hey I thought it

323
00:12:12,290 --> 00:12:16,880
would be a great idea<font color="#CCCCCC"> to basically</font><font color="#E5E5E5"> write</font>

324
00:12:14,360 --> 00:12:18,500
<font color="#CCCCCC">a DOS and then I'm open</font><font color="#E5E5E5"> sourcing it</font>

325
00:12:16,880 --> 00:12:20,840
because I'll get<font color="#CCCCCC"> a better</font><font color="#E5E5E5"> job offer I</font>

326
00:12:18,500 --> 00:12:22,730
don't<font color="#E5E5E5"> recognize that as like a good idea</font>

327
00:12:20,840 --> 00:12:24,350
<font color="#CCCCCC">but there are plenty of</font><font color="#E5E5E5"> people who are</font>

328
00:12:22,730 --> 00:12:26,480
<font color="#CCCCCC">doing it and you</font><font color="#E5E5E5"> do you see this bundled</font>

329
00:12:24,350 --> 00:12:29,780
into<font color="#E5E5E5"> actual</font><font color="#CCCCCC"> tack code</font>

330
00:12:26,480 --> 00:12:32,390
there's also<font color="#E5E5E5"> go mem cats</font><font color="#CCCCCC"> so a lot of pen</font>

331
00:12:29,780 --> 00:12:35,569
testers<font color="#E5E5E5"> tend to be using go</font><font color="#CCCCCC"> lang</font><font color="#E5E5E5"> is what</font>

332
00:12:32,390 --> 00:12:37,550
I've<font color="#E5E5E5"> seen I don't personally work with</font>

333
00:12:35,570 --> 00:12:39,170
pen testers<font color="#CCCCCC"> but there was this</font>

334
00:12:37,550 --> 00:12:40,969
<font color="#CCCCCC">interesting comment on reddit that I saw</font>

335
00:12:39,170 --> 00:12:42,979
someone<font color="#E5E5E5"> say it's basically he can write</font>

336
00:12:40,970 --> 00:12:44,839
<font color="#E5E5E5">a quick little binary that drops down</font>

337
00:12:42,980 --> 00:12:48,800
<font color="#E5E5E5">and since it's wrapped in</font><font color="#CCCCCC"> all this</font>

338
00:12:44,839 --> 00:12:51,170
runtime type stuff<font color="#CCCCCC"> it gives it a virus</font>

339
00:12:48,800 --> 00:12:53,060
vendors<font color="#E5E5E5"> a hard time to</font><font color="#CCCCCC"> actually figure</font>

340
00:12:51,170 --> 00:12:54,410
<font color="#CCCCCC">out what's going on</font><font color="#E5E5E5"> and then what this</font>

341
00:12:53,060 --> 00:12:55,849
<font color="#E5E5E5">person was doing is they're basically</font>

342
00:12:54,410 --> 00:12:57,829
<font color="#E5E5E5">like I'm just</font><font color="#CCCCCC"> gonna make</font><font color="#E5E5E5"> a call out</font><font color="#CCCCCC"> to</font>

343
00:12:55,850 --> 00:12:59,600
my server which is generic I just spun

344
00:12:57,830 --> 00:13:01,940
it up and maybe digitalocean it's a new

345
00:12:59,600 --> 00:13:04,070
droplet<font color="#CCCCCC"> there's no IP reputation around</font>

346
00:13:01,940 --> 00:13:05,750
<font color="#E5E5E5">this and then they were just saying okay</font>

347
00:13:04,070 --> 00:13:07,310
give<font color="#CCCCCC"> me the code and then it executed</font>

348
00:13:05,750 --> 00:13:08,500
<font color="#E5E5E5">the payload and they basically said</font><font color="#CCCCCC"> no</font>

349
00:13:07,310 --> 00:13:10,689
<font color="#CCCCCC">AV usually over</font>

350
00:13:08,500 --> 00:13:14,830
<font color="#CCCCCC">I believe it because</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> hard</font><font color="#E5E5E5"> to pick</font>

351
00:13:10,690 --> 00:13:16,450
up in a in the<font color="#E5E5E5"> a/v world what normally</font>

352
00:13:14,830 --> 00:13:17,260
happens is unless you're just<font color="#E5E5E5"> doing</font>

353
00:13:16,450 --> 00:13:19,420
<font color="#E5E5E5">straight white list</font>

354
00:13:17,260 --> 00:13:21,010
<font color="#E5E5E5">or straight blacklist</font><font color="#CCCCCC"> and doing hashes</font>

355
00:13:19,420 --> 00:13:23,319
of<font color="#E5E5E5"> every single thing which a white list</font>

356
00:13:21,010 --> 00:13:25,270
can<font color="#CCCCCC"> be protective it's interesting</font><font color="#E5E5E5"> it</font>

357
00:13:23,320 --> 00:13:27,910
means you have to verify every single

358
00:13:25,270 --> 00:13:29,620
thing and if it doesn't<font color="#E5E5E5"> match a hash on</font>

359
00:13:27,910 --> 00:13:31,510
my white list<font color="#E5E5E5"> I'm not gonna let</font><font color="#CCCCCC"> it run</font>

360
00:13:29,620 --> 00:13:33,460
<font color="#E5E5E5">black list is a little different and it</font>

361
00:13:31,510 --> 00:13:35,860
<font color="#CCCCCC">has it's good sides but</font><font color="#E5E5E5"> the bad</font><font color="#CCCCCC"> thing is</font>

362
00:13:33,460 --> 00:13:37,510
<font color="#E5E5E5">if</font><font color="#CCCCCC"> I reconstruct something right now</font>

363
00:13:35,860 --> 00:13:38,230
<font color="#CCCCCC">it's gonna have a new hash</font><font color="#E5E5E5"> so if they</font>

364
00:13:37,510 --> 00:13:40,330
haven't<font color="#E5E5E5"> seen it</font>

365
00:13:38,230 --> 00:13:42,370
they can't flag it right away<font color="#CCCCCC"> the other</font>

366
00:13:40,330 --> 00:13:43,720
way people do detections is you know

367
00:13:42,370 --> 00:13:45,460
with heuristics basically saying I'm

368
00:13:43,720 --> 00:13:48,340
looking<font color="#E5E5E5"> for this sequence of bytes and</font>

369
00:13:45,460 --> 00:13:50,890
this makes it hard for<font color="#E5E5E5"> them so again</font><font color="#CCCCCC"> we</font>

370
00:13:48,340 --> 00:13:53,110
<font color="#CCCCCC">run</font><font color="#E5E5E5"> go time has maybe you know two and</font><font color="#CCCCCC"> a</font>

371
00:13:50,890 --> 00:13:55,750
half thousand functions of code these

372
00:13:53,110 --> 00:13:57,610
change every once in a<font color="#E5E5E5"> while through you</font>

373
00:13:55,750 --> 00:13:58,990
know go revisions and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> the malicious</font>

374
00:13:57,610 --> 00:14:02,110
code<font color="#CCCCCC"> again</font><font color="#E5E5E5"> this might be like three</font>

375
00:13:58,990 --> 00:14:04,180
lines<font color="#E5E5E5"> of code</font><font color="#CCCCCC"> and it's surrounded by go</font>

376
00:14:02,110 --> 00:14:05,350
instrumentation<font color="#E5E5E5"> and so if you're going</font>

377
00:14:04,180 --> 00:14:08,890
<font color="#E5E5E5">to look for you're gonna be like okay</font>

378
00:14:05,350 --> 00:14:10,270
<font color="#CCCCCC">well maybe I'll choose a string because</font>

379
00:14:08,890 --> 00:14:12,430
a string<font color="#E5E5E5"> would never change it a piece</font>

380
00:14:10,270 --> 00:14:13,600
of<font color="#CCCCCC"> malware right and so you</font><font color="#E5E5E5"> know if</font>

381
00:14:12,430 --> 00:14:15,520
they're importing libraries you can't

382
00:14:13,600 --> 00:14:17,590
just say oh<font color="#E5E5E5"> that</font><font color="#CCCCCC"> thing someone pulled</font>

383
00:14:15,520 --> 00:14:20,290
<font color="#CCCCCC">off github</font><font color="#E5E5E5"> that is</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> used by good</font>

384
00:14:17,590 --> 00:14:22,360
people<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's used by a bad person in</font>

385
00:14:20,290 --> 00:14:24,610
<font color="#E5E5E5">this one instance</font><font color="#CCCCCC"> I'm gonna label that</font>

386
00:14:22,360 --> 00:14:26,770
<font color="#CCCCCC">as bad and this</font><font color="#E5E5E5"> is exactly what we see</font>

387
00:14:24,610 --> 00:14:29,890
if you search for<font color="#CCCCCC"> a go malware</font><font color="#E5E5E5"> here's a</font>

388
00:14:26,770 --> 00:14:30,460
post from 2012 where someone's<font color="#CCCCCC"> like what</font>

389
00:14:29,890 --> 00:14:33,310
the hell

390
00:14:30,460 --> 00:14:35,290
<font color="#E5E5E5">semantics is flagging this and I love</font>

391
00:14:33,310 --> 00:14:37,719
<font color="#E5E5E5">the status unfortunate is what it was</font>

392
00:14:35,290 --> 00:14:39,849
changed to is that<font color="#CCCCCC"> Sachs</font><font color="#E5E5E5"> like wow and</font>

393
00:14:37,720 --> 00:14:41,470
then we have you know<font color="#E5E5E5"> one last year</font>

394
00:14:39,850 --> 00:14:43,570
where Kaspersky started flagging things

395
00:14:41,470 --> 00:14:46,690
<font color="#E5E5E5">and this happens a</font><font color="#CCCCCC"> lot because</font><font color="#E5E5E5"> if the</font>

396
00:14:43,570 --> 00:14:48,400
analysts who<font color="#CCCCCC"> are making</font><font color="#E5E5E5"> these changes in</font>

397
00:14:46,690 --> 00:14:49,540
the engine are basically<font color="#E5E5E5"> like well I've</font>

398
00:14:48,400 --> 00:14:50,860
never<font color="#E5E5E5"> seen anything like this this is</font>

399
00:14:49,540 --> 00:14:52,990
super advanced<font color="#E5E5E5"> they're usually just</font>

400
00:14:50,860 --> 00:14:54,730
<font color="#E5E5E5">looking at the go runtime and then when</font>

401
00:14:52,990 --> 00:14:56,590
they dig into the code<font color="#CCCCCC"> they're like oh</font>

402
00:14:54,730 --> 00:14:58,000
man it has like it can do<font color="#CCCCCC"> ask to stage</font>

403
00:14:56,590 --> 00:14:59,770
<font color="#E5E5E5">brute-forcing it can do this you can do</font>

404
00:14:58,000 --> 00:15:04,090
that again<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was code pulled off</font><font color="#CCCCCC"> from</font>

405
00:14:59,770 --> 00:15:05,829
github<font color="#CCCCCC"> so we got it wrong again</font><font color="#E5E5E5"> so what</font>

406
00:15:04,090 --> 00:15:07,900
we end<font color="#CCCCCC"> up seeing is when someone strips</font>

407
00:15:05,830 --> 00:15:09,670
the binary<font color="#E5E5E5"> and if someone hasn't already</font>

408
00:15:07,900 --> 00:15:11,980
figured out like<font color="#CCCCCC"> how does the go runtime</font>

409
00:15:09,670 --> 00:15:14,439
look what am I doing<font color="#CCCCCC"> here</font><font color="#E5E5E5"> you could use</font>

410
00:15:11,980 --> 00:15:17,200
<font color="#CCCCCC">things like Bend if they provide some</font>

411
00:15:14,440 --> 00:15:18,970
<font color="#E5E5E5">interesting stuff</font><font color="#CCCCCC"> but once they strip it</font>

412
00:15:17,200 --> 00:15:21,130
you're basically<font color="#E5E5E5"> hunting for that little</font>

413
00:15:18,970 --> 00:15:24,610
<font color="#E5E5E5">tiny segment in that huge</font>

414
00:15:21,130 --> 00:15:26,710
<font color="#E5E5E5">loaded binary so a lot of server side</font>

415
00:15:24,610 --> 00:15:28,900
apps are also<font color="#E5E5E5"> moving to go</font><font color="#CCCCCC"> its memory</font>

416
00:15:26,710 --> 00:15:30,790
safe like I said supposedly there have

417
00:15:28,900 --> 00:15:32,620
been memory issues<font color="#E5E5E5"> that's an interesting</font>

418
00:15:30,790 --> 00:15:34,089
thing that<font color="#E5E5E5"> you might want to know for</font>

419
00:15:32,620 --> 00:15:38,050
both looking<font color="#E5E5E5"> at the source code</font><font color="#CCCCCC"> and</font>

420
00:15:34,090 --> 00:15:40,300
analyzing it<font color="#CCCCCC"> with a disassembler I found</font>

421
00:15:38,050 --> 00:15:42,459
like<font color="#E5E5E5"> a lot of expensive bugs when I've</font>

422
00:15:40,300 --> 00:15:43,719
been<font color="#CCCCCC"> doing some contract work</font><font color="#E5E5E5"> where</font>

423
00:15:42,460 --> 00:15:45,070
<font color="#E5E5E5">people are like you can look at our</font>

424
00:15:43,720 --> 00:15:46,570
<font color="#E5E5E5">source if you want some of them don't</font>

425
00:15:45,070 --> 00:15:48,610
<font color="#E5E5E5">want you to</font><font color="#CCCCCC"> look</font><font color="#E5E5E5"> at the source but then</font>

426
00:15:46,570 --> 00:15:51,700
that's shipping you this go binary and a

427
00:15:48,610 --> 00:15:54,130
lot of licensing stuff licensing code

428
00:15:51,700 --> 00:15:55,510
uses this<font color="#E5E5E5"> and so when you're digging</font>

429
00:15:54,130 --> 00:15:57,220
into<font color="#E5E5E5"> it you end up seeing like there's</font>

430
00:15:55,510 --> 00:15:58,990
logic flaws<font color="#E5E5E5"> that you wouldn't actually</font>

431
00:15:57,220 --> 00:16:01,090
see when you're looking<font color="#CCCCCC"> at the source</font>

432
00:15:58,990 --> 00:16:03,250
<font color="#E5E5E5">code level but it's basically</font><font color="#CCCCCC"> because</font>

433
00:16:01,090 --> 00:16:06,640
the runtime might function<font color="#E5E5E5"> in a certain</font>

434
00:16:03,250 --> 00:16:09,010
<font color="#CCCCCC">manner</font><font color="#E5E5E5"> but when it's compiled it's</font>

435
00:16:06,640 --> 00:16:10,240
actually trying<font color="#CCCCCC"> to do a</font><font color="#E5E5E5"> little bit</font>

436
00:16:09,010 --> 00:16:11,950
different of things so I think it's

437
00:16:10,240 --> 00:16:13,180
important<font color="#CCCCCC"> for developers</font><font color="#E5E5E5"> to understand</font>

438
00:16:11,950 --> 00:16:15,400
what's<font color="#CCCCCC"> going on under the hood</font><font color="#E5E5E5"> and</font>

439
00:16:13,180 --> 00:16:17,949
especially reverses<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> this is</font>

440
00:16:15,400 --> 00:16:19,300
back<font color="#E5E5E5"> to Michael over at ISA basically I</font>

441
00:16:17,950 --> 00:16:21,670
was tweeting<font color="#E5E5E5"> I was like hey has anyone</font>

442
00:16:19,300 --> 00:16:23,109
seen<font color="#E5E5E5"> any more malware</font><font color="#CCCCCC"> and he he was</font>

443
00:16:21,670 --> 00:16:25,599
talking to<font color="#E5E5E5"> me privately and basically</font>

444
00:16:23,110 --> 00:16:28,600
said go<font color="#CCCCCC"> looking virustotal you search</font>

445
00:16:25,600 --> 00:16:30,790
<font color="#E5E5E5">for a golang string and everything's</font>

446
00:16:28,600 --> 00:16:32,050
gonna be malicious<font color="#E5E5E5"> and it's pretty true</font>

447
00:16:30,790 --> 00:16:34,930
if you go through<font color="#CCCCCC"> virustotal</font><font color="#E5E5E5"> there's</font>

448
00:16:32,050 --> 00:16:36,880
probably like<font color="#CCCCCC"> 10 gigs of going malware</font>

449
00:16:34,930 --> 00:16:38,979
<font color="#CCCCCC">you know they're all</font><font color="#E5E5E5"> similar strains</font>

450
00:16:36,880 --> 00:16:40,600
they'll use their own little<font color="#E5E5E5"> things a</font>

451
00:16:38,980 --> 00:16:42,730
lot of spreaders are<font color="#E5E5E5"> being used and</font>

452
00:16:40,600 --> 00:16:44,740
there's some IOT malware out<font color="#E5E5E5"> there but</font>

453
00:16:42,730 --> 00:16:46,750
basically<font color="#CCCCCC"> really easy</font><font color="#E5E5E5"> to write</font><font color="#CCCCCC"> it's</font>

454
00:16:44,740 --> 00:16:49,540
<font color="#E5E5E5">really easy to cross compile and it just</font>

455
00:16:46,750 --> 00:16:53,050
works<font color="#CCCCCC"> so why wouldn't</font><font color="#E5E5E5"> a malware author</font>

456
00:16:49,540 --> 00:16:56,740
use it so this<font color="#CCCCCC"> is a screenshot of Ida</font>

457
00:16:53,050 --> 00:16:58,420
Pro and Ida Pro and<font color="#E5E5E5"> binary ninja don't</font>

458
00:16:56,740 --> 00:17:00,790
have the<font color="#E5E5E5"> greatest support for go</font><font color="#CCCCCC"> I</font>

459
00:16:58,420 --> 00:17:02,050
understand why they're<font color="#E5E5E5"> not like bad</font>

460
00:17:00,790 --> 00:17:03,459
tools because they don't<font color="#CCCCCC"> have the</font>

461
00:17:02,050 --> 00:17:05,500
support<font color="#CCCCCC"> but nobody's really</font><font color="#E5E5E5"> been</font>

462
00:17:03,460 --> 00:17:07,270
<font color="#E5E5E5">expressing interest in these</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> so I</font>

463
00:17:05,500 --> 00:17:08,949
was<font color="#E5E5E5"> looking at some malware and doing</font>

464
00:17:07,270 --> 00:17:10,869
some auditing<font color="#E5E5E5"> of some binaries and</font>

465
00:17:08,949 --> 00:17:14,199
<font color="#E5E5E5">essentially I ran into a lot of issues</font>

466
00:17:10,869 --> 00:17:15,760
<font color="#E5E5E5">up at the top this</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> colored version</font>

467
00:17:14,199 --> 00:17:18,189
<font color="#CCCCCC">basically of saying</font><font color="#E5E5E5"> like what does the</font>

468
00:17:15,760 --> 00:17:19,869
binary look like<font color="#CCCCCC"> orange</font><font color="#E5E5E5"> basically means</font>

469
00:17:18,189 --> 00:17:21,730
it's a defined function a red means it's

470
00:17:19,869 --> 00:17:23,649
<font color="#E5E5E5">an undefined function</font><font color="#CCCCCC"> so it</font><font color="#E5E5E5"> might</font><font color="#CCCCCC"> be</font>

471
00:17:21,730 --> 00:17:25,569
code it might not be code<font color="#CCCCCC"> Ida couldn't</font>

472
00:17:23,650 --> 00:17:28,060
figure it out<font color="#E5E5E5"> and as we look on the</font>

473
00:17:25,569 --> 00:17:29,950
<font color="#CCCCCC">left-hand side left bottom side we</font><font color="#E5E5E5"> see</font>

474
00:17:28,060 --> 00:17:31,899
that<font color="#E5E5E5"> it only has about you</font><font color="#CCCCCC"> know a</font>

475
00:17:29,950 --> 00:17:33,910
thousand three hundred<font color="#CCCCCC"> or so functions</font>

476
00:17:31,900 --> 00:17:34,820
<font color="#E5E5E5">and we automatically know that that has</font>

477
00:17:33,910 --> 00:17:37,970
<font color="#CCCCCC">to be wrong</font>

478
00:17:34,820 --> 00:17:40,129
the go runtime has at least<font color="#CCCCCC"> 2,000 2,500</font>

479
00:17:37,970 --> 00:17:42,320
<font color="#CCCCCC">so nobody's important to anything in</font>

480
00:17:40,130 --> 00:17:43,789
here<font color="#E5E5E5"> well you know you might not</font><font color="#CCCCCC"> have</font>

481
00:17:42,320 --> 00:17:45,168
<font color="#CCCCCC">all the functions but</font><font color="#E5E5E5"> you have some of</font>

482
00:17:43,789 --> 00:17:48,200
them but<font color="#E5E5E5"> probably ones you don't</font><font color="#CCCCCC"> want to</font>

483
00:17:45,169 --> 00:17:50,419
<font color="#E5E5E5">look at we also see that this</font><font color="#CCCCCC"> is</font>

484
00:17:48,200 --> 00:17:53,179
essentially what loading strings and go

485
00:17:50,419 --> 00:17:56,179
looks like<font color="#E5E5E5"> and Ida Pro is like I don't</font>

486
00:17:53,179 --> 00:17:57,980
<font color="#E5E5E5">know there's some values and</font><font color="#CCCCCC"> some stuff</font>

487
00:17:56,179 --> 00:17:59,269
<font color="#E5E5E5">but if you want to really quickly assess</font>

488
00:17:57,980 --> 00:18:01,100
this and<font color="#CCCCCC"> be like what's what's this</font>

489
00:17:59,269 --> 00:18:04,220
doing I see flag in I see flag boo I see

490
00:18:01,100 --> 00:18:07,519
flag string<font color="#E5E5E5"> why there are no</font><font color="#CCCCCC"> strings</font><font color="#E5E5E5"> and</font>

491
00:18:04,220 --> 00:18:09,620
it sucks<font color="#E5E5E5"> so basically we've we've</font>

492
00:18:07,519 --> 00:18:11,840
identified a few things that we really

493
00:18:09,620 --> 00:18:13,879
want to<font color="#E5E5E5"> actually start reversing</font><font color="#CCCCCC"> we want</font>

494
00:18:11,840 --> 00:18:15,080
to be able<font color="#E5E5E5"> to say what are the functions</font>

495
00:18:13,879 --> 00:18:16,580
I want to be able<font color="#E5E5E5"> to define all the</font>

496
00:18:15,080 --> 00:18:19,009
functions<font color="#E5E5E5"> really fast because</font><font color="#CCCCCC"> I want to</font>

497
00:18:16,580 --> 00:18:20,689
<font color="#CCCCCC">look for bad ones functions don't</font><font color="#E5E5E5"> retain</font>

498
00:18:19,009 --> 00:18:22,519
their name when they're stripped<font color="#E5E5E5"> so is</font>

499
00:18:20,690 --> 00:18:24,799
there any<font color="#E5E5E5"> way that we can rebuild at</font>

500
00:18:22,519 --> 00:18:26,600
least like<font color="#CCCCCC"> the runtime and again I I</font>

501
00:18:24,799 --> 00:18:28,070
tried<font color="#E5E5E5"> this multiple ways because there's</font>

502
00:18:26,600 --> 00:18:30,168
lots of weird strings in those binaries

503
00:18:28,070 --> 00:18:32,509
<font color="#CCCCCC">I was like alright what if I build</font>

504
00:18:30,169 --> 00:18:34,970
<font color="#E5E5E5">something in that go version and then</font>

505
00:18:32,509 --> 00:18:36,320
<font color="#CCCCCC">used AI foria or bin diff and then I'll</font>

506
00:18:34,970 --> 00:18:38,389
just do a match would<font color="#E5E5E5"> be like okay</font><font color="#CCCCCC"> that</font>

507
00:18:36,320 --> 00:18:40,220
match like this<font color="#E5E5E5"> is the runtime match</font>

508
00:18:38,389 --> 00:18:41,539
that's the runtime match and then you

509
00:18:40,220 --> 00:18:44,570
can kind of cobble it together like that

510
00:18:41,539 --> 00:18:47,360
<font color="#E5E5E5">it works but it was super slow string</font>

511
00:18:44,570 --> 00:18:50,029
loads<font color="#CCCCCC"> could</font><font color="#E5E5E5"> be funky and the holy grail</font>

512
00:18:47,360 --> 00:18:52,250
<font color="#CCCCCC">and</font><font color="#E5E5E5"> AV industry sadly is if the binary</font>

513
00:18:50,029 --> 00:18:54,110
<font color="#E5E5E5">has strings that look malicious I'm</font>

514
00:18:52,250 --> 00:18:55,700
usually<font color="#E5E5E5"> going to say it's malicious and</font>

515
00:18:54,110 --> 00:18:57,649
that's that's<font color="#E5E5E5"> kind of like this the</font>

516
00:18:55,700 --> 00:18:59,419
sniff test<font color="#CCCCCC"> if it looks like it's a</font>

517
00:18:57,649 --> 00:19:00,768
licensing server<font color="#E5E5E5"> people</font><font color="#CCCCCC"> will be like</font>

518
00:18:59,419 --> 00:19:02,899
cool whatever<font color="#CCCCCC"> so if you want to</font><font color="#E5E5E5"> make</font>

519
00:19:00,769 --> 00:19:05,659
good malware<font color="#E5E5E5"> make it look good and don't</font>

520
00:19:02,899 --> 00:19:07,250
put words in it like swears or<font color="#E5E5E5"> cussing</font>

521
00:19:05,659 --> 00:19:10,070
out AV people because people<font color="#CCCCCC"> are always</font>

522
00:19:07,250 --> 00:19:11,179
<font color="#E5E5E5">like</font><font color="#CCCCCC"> oh yep that's malicious let's</font>

523
00:19:10,070 --> 00:19:14,990
detect it I don't<font color="#CCCCCC"> even</font><font color="#E5E5E5"> know what it</font><font color="#CCCCCC"> does</font>

524
00:19:11,179 --> 00:19:17,120
<font color="#E5E5E5">and then again so the go version might</font>

525
00:19:14,990 --> 00:19:19,039
be interesting<font color="#CCCCCC"> for if we can actually</font>

526
00:19:17,120 --> 00:19:20,809
<font color="#CCCCCC">identify which version</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> runtime</font>

527
00:19:19,039 --> 00:19:22,100
this was compiled with maybe we'll do

528
00:19:20,809 --> 00:19:23,960
<font color="#CCCCCC">that with different heuristics</font><font color="#E5E5E5"> or</font>

529
00:19:22,100 --> 00:19:25,789
something like<font color="#E5E5E5"> that but if we can tell</font>

530
00:19:23,960 --> 00:19:27,919
what<font color="#E5E5E5"> version of go was we can tell what</font>

531
00:19:25,789 --> 00:19:29,750
<font color="#E5E5E5">runtime we might be looking at so we're</font>

532
00:19:27,919 --> 00:19:31,669
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> dig into this and essentially you</font>

533
00:19:29,750 --> 00:19:33,080
know we want to<font color="#E5E5E5"> automate all</font><font color="#CCCCCC"> this work</font>

534
00:19:31,669 --> 00:19:34,610
because<font color="#E5E5E5"> we don't want to be sifting</font>

535
00:19:33,080 --> 00:19:36,289
through it every single time<font color="#CCCCCC"> a file</font>

536
00:19:34,610 --> 00:19:37,939
comes in<font color="#E5E5E5"> especially in the AV industry</font>

537
00:19:36,289 --> 00:19:40,490
or the pen testing usually<font color="#E5E5E5"> you're</font>

538
00:19:37,940 --> 00:19:43,039
getting paid potentially hourly or<font color="#E5E5E5"> by</font>

539
00:19:40,490 --> 00:19:45,590
you know you must verify this<font color="#E5E5E5"> many</font>

540
00:19:43,039 --> 00:19:46,908
binary<font color="#E5E5E5"> is at</font><font color="#CCCCCC"> an AV place or if</font><font color="#E5E5E5"> your pen</font>

541
00:19:45,590 --> 00:19:47,899
testing you know if you<font color="#E5E5E5"> don't get</font>

542
00:19:46,909 --> 00:19:49,340
anything<font color="#E5E5E5"> done in the first</font>

543
00:19:47,900 --> 00:19:53,270
<font color="#CCCCCC">ten hours you kind of look bad to a</font>

544
00:19:49,340 --> 00:19:55,070
client sometimes so tackling functions

545
00:19:53,270 --> 00:19:58,370
<font color="#E5E5E5">this is again that hello world example</font>

546
00:19:55,070 --> 00:20:00,230
<font color="#CCCCCC">and what we're seeing right here is we</font>

547
00:19:58,370 --> 00:20:04,879
got the function start<font color="#E5E5E5"> and I</font><font color="#CCCCCC"> don't</font>

548
00:20:00,230 --> 00:20:06,140
actually have<font color="#E5E5E5"> all the the locations next</font>

549
00:20:04,880 --> 00:20:07,880
to it<font color="#E5E5E5"> because I want to show it in the</font>

550
00:20:06,140 --> 00:20:10,490
<font color="#E5E5E5">pretty graph view but essentially what</font>

551
00:20:07,880 --> 00:20:12,080
we're seeing is the main is<font color="#E5E5E5"> the top the</font>

552
00:20:10,490 --> 00:20:14,330
main main is the<font color="#E5E5E5"> top with</font><font color="#CCCCCC"> that first</font>

553
00:20:12,080 --> 00:20:15,889
move<font color="#E5E5E5"> and then actually at the bottom all</font>

554
00:20:14,330 --> 00:20:18,199
<font color="#CCCCCC">the</font><font color="#E5E5E5"> way at the bottom at the function we</font>

555
00:20:15,890 --> 00:20:21,020
have that<font color="#CCCCCC"> runtime more stack no context</font>

556
00:20:18,200 --> 00:20:23,570
and a jump to main main so this is

557
00:20:21,020 --> 00:20:25,550
consistent<font color="#CCCCCC"> to pretty much every single</font>

558
00:20:23,570 --> 00:20:28,610
<font color="#CCCCCC">function</font><font color="#E5E5E5"> that will ever be created and</font>

559
00:20:25,550 --> 00:20:30,590
go and this<font color="#E5E5E5"> is how they do the caching</font>

560
00:20:28,610 --> 00:20:32,300
of the panics<font color="#E5E5E5"> so if there's any errors</font>

561
00:20:30,590 --> 00:20:33,679
<font color="#CCCCCC">in here or something happens that</font><font color="#E5E5E5"> we're</font>

562
00:20:32,300 --> 00:20:35,840
not<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> about it's</font><font color="#E5E5E5"> gonna basically</font>

563
00:20:33,680 --> 00:20:38,060
<font color="#E5E5E5">gonna catch into there and be</font><font color="#CCCCCC"> like what</font>

564
00:20:35,840 --> 00:20:39,560
was<font color="#CCCCCC"> the context of this and if it was</font>

565
00:20:38,060 --> 00:20:41,179
still<font color="#CCCCCC"> okay or something bad didn't</font>

566
00:20:39,560 --> 00:20:42,980
happen loop back up<font color="#CCCCCC"> to the top of the</font>

567
00:20:41,180 --> 00:20:44,840
<font color="#CCCCCC">function so this</font><font color="#E5E5E5"> is kind of like a</font>

568
00:20:42,980 --> 00:20:47,300
template for<font color="#CCCCCC"> every single function that</font>

569
00:20:44,840 --> 00:20:48,860
we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> reverse this is that same</font>

570
00:20:47,300 --> 00:20:51,440
function<font color="#E5E5E5"> and this is actually</font><font color="#CCCCCC"> really</font>

571
00:20:48,860 --> 00:20:53,000
<font color="#CCCCCC">interesting because go the the design of</font>

572
00:20:51,440 --> 00:20:55,400
go<font color="#CCCCCC"> was meant so that we can</font><font color="#E5E5E5"> reproduce</font>

573
00:20:53,000 --> 00:20:56,870
binaries<font color="#CCCCCC"> bite for bite</font><font color="#E5E5E5"> so that if you</font>

574
00:20:55,400 --> 00:20:58,550
compile<font color="#E5E5E5"> something on your machine</font><font color="#CCCCCC"> and I</font>

575
00:20:56,870 --> 00:21:00,469
give<font color="#E5E5E5"> you a hash of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> or you give me a</font>

576
00:20:58,550 --> 00:21:01,940
hash of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I can then compile it over</font>

577
00:21:00,470 --> 00:21:04,280
here and if I was using<font color="#E5E5E5"> the same</font>

578
00:21:01,940 --> 00:21:06,410
framework<font color="#E5E5E5"> the binary should</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> identical</font>

579
00:21:04,280 --> 00:21:07,879
<font color="#CCCCCC">so</font><font color="#E5E5E5"> this this provides us a really</font>

580
00:21:06,410 --> 00:21:10,460
interesting<font color="#E5E5E5"> way to basically say like</font>

581
00:21:07,880 --> 00:21:12,890
okay if<font color="#E5E5E5"> I mangle this binary in one way</font>

582
00:21:10,460 --> 00:21:14,420
and<font color="#E5E5E5"> I strip it and then I go over</font><font color="#CCCCCC"> here</font>

583
00:21:12,890 --> 00:21:16,700
<font color="#CCCCCC">and I have the one</font><font color="#E5E5E5"> that has all my</font>

584
00:21:14,420 --> 00:21:17,960
<font color="#E5E5E5">symbol still in it I can compare the two</font>

585
00:21:16,700 --> 00:21:20,390
<font color="#CCCCCC">and be like okay so where that</font>

586
00:21:17,960 --> 00:21:22,760
<font color="#E5E5E5">information</font><font color="#CCCCCC"> go did it go here or here so</font>

587
00:21:20,390 --> 00:21:25,220
<font color="#E5E5E5">this is the exact same binary it's just</font>

588
00:21:22,760 --> 00:21:26,780
been stripped<font color="#E5E5E5"> so we still</font><font color="#CCCCCC"> see that you</font>

589
00:21:25,220 --> 00:21:28,730
know there's the top of the<font color="#CCCCCC"> function and</font>

590
00:21:26,780 --> 00:21:29,960
the bottom of the function has that call

591
00:21:28,730 --> 00:21:32,350
we don't<font color="#E5E5E5"> know the name of</font><font color="#CCCCCC"> that function</font>

592
00:21:29,960 --> 00:21:35,840
<font color="#E5E5E5">anymore but it's exactly the same</font>

593
00:21:32,350 --> 00:21:38,209
context wrapping style<font color="#E5E5E5"> and if we</font>

594
00:21:35,840 --> 00:21:42,830
actually<font color="#E5E5E5"> look</font><font color="#CCCCCC"> at that</font><font color="#E5E5E5"> function</font><font color="#CCCCCC"> that was</font>

595
00:21:38,210 --> 00:21:44,990
I<font color="#CCCCCC"> believe it was the</font><font color="#E5E5E5"> run time no context</font>

596
00:21:42,830 --> 00:21:46,970
if we look at that we see that that

597
00:21:44,990 --> 00:21:49,040
<font color="#E5E5E5">cross reference is every single function</font>

598
00:21:46,970 --> 00:21:50,900
<font color="#E5E5E5">that we've seen so again this is how</font>

599
00:21:49,040 --> 00:21:52,340
<font color="#E5E5E5">every function is going to look</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> so</font>

600
00:21:50,900 --> 00:21:54,620
we know that<font color="#CCCCCC"> if we could find that</font>

601
00:21:52,340 --> 00:21:57,020
<font color="#E5E5E5">function we might actually be able</font><font color="#CCCCCC"> to</font>

602
00:21:54,620 --> 00:21:58,370
<font color="#E5E5E5">work</font><font color="#CCCCCC"> backwards</font><font color="#E5E5E5"> and basically say okay I</font>

603
00:21:57,020 --> 00:21:59,810
know what<font color="#CCCCCC"> this function will always</font><font color="#E5E5E5"> look</font>

604
00:21:58,370 --> 00:22:00,330
<font color="#E5E5E5">like because it's always compiled that</font>

605
00:21:59,810 --> 00:22:01,918
way

606
00:22:00,330 --> 00:22:03,510
and then<font color="#E5E5E5"> I can cross-reference back and</font>

607
00:22:01,919 --> 00:22:04,950
start recursing and saying okay now I

608
00:22:03,510 --> 00:22:06,929
know all<font color="#E5E5E5"> the other functions</font><font color="#CCCCCC"> and I know</font>

609
00:22:04,950 --> 00:22:08,820
all their sizes<font color="#E5E5E5"> because that's the last</font>

610
00:22:06,929 --> 00:22:10,500
function<font color="#E5E5E5"> call and it has a loop up to</font>

611
00:22:08,820 --> 00:22:13,500
the top<font color="#E5E5E5"> so now</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> I need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do is</font>

612
00:22:10,500 --> 00:22:15,029
identify one function<font color="#E5E5E5"> and if we dig into</font>

613
00:22:13,500 --> 00:22:17,429
<font color="#E5E5E5">that we see that that one function</font>

614
00:22:15,029 --> 00:22:20,070
<font color="#E5E5E5">branches into run time more stack and</font>

615
00:22:17,429 --> 00:22:21,360
this is the entire function<font color="#E5E5E5"> it is always</font>

616
00:22:20,070 --> 00:22:23,580
<font color="#E5E5E5">like this</font>

617
00:22:21,360 --> 00:22:27,779
you<font color="#CCCCCC"> basically kind of</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to profile so</font>

618
00:22:23,580 --> 00:22:29,250
like there's go<font color="#E5E5E5"> 1 6</font><font color="#CCCCCC"> 7</font><font color="#E5E5E5"> 8</font><font color="#CCCCCC"> 8.3</font><font color="#E5E5E5"> sometimes</font>

619
00:22:27,779 --> 00:22:32,039
<font color="#CCCCCC">this changes but essentially there's</font>

620
00:22:29,250 --> 00:22:34,230
this one<font color="#E5E5E5"> little call at the end the move</font>

621
00:22:32,039 --> 00:22:36,720
D word<font color="#E5E5E5"> that's the only time you</font><font color="#CCCCCC"> will</font>

622
00:22:34,230 --> 00:22:38,669
ever see<font color="#CCCCCC"> this</font><font color="#E5E5E5"> in a go binary is in this</font>

623
00:22:36,720 --> 00:22:41,490
one function<font color="#CCCCCC"> so it makes</font><font color="#E5E5E5"> it really easy</font>

624
00:22:38,669 --> 00:22:43,830
<font color="#CCCCCC">for us</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> identify this</font><font color="#E5E5E5"> so essentially</font>

625
00:22:41,490 --> 00:22:45,750
<font color="#E5E5E5">we find that as our hook and now we know</font>

626
00:22:43,830 --> 00:22:47,399
like a<font color="#E5E5E5"> pseudo solution</font><font color="#CCCCCC"> where basically</font>

627
00:22:45,750 --> 00:22:48,809
<font color="#E5E5E5">were going to find this we're gonna go</font>

628
00:22:47,399 --> 00:22:50,699
to the collection<font color="#CCCCCC"> that called it and</font>

629
00:22:48,809 --> 00:22:52,529
then we're gonna<font color="#E5E5E5"> cross-reference</font><font color="#CCCCCC"> every</font>

630
00:22:50,700 --> 00:22:53,909
single<font color="#E5E5E5"> function that calls that and we</font>

631
00:22:52,529 --> 00:22:55,889
know that<font color="#E5E5E5"> that's the second to last line</font>

632
00:22:53,909 --> 00:22:56,940
<font color="#CCCCCC">of the function</font><font color="#E5E5E5"> so we now know the end</font>

633
00:22:55,889 --> 00:22:58,889
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> function in the beginning of the</font>

634
00:22:56,940 --> 00:23:00,750
<font color="#CCCCCC">function so you can</font><font color="#E5E5E5"> tell binary ninja or</font>

635
00:22:58,889 --> 00:23:02,549
you can tell<font color="#E5E5E5"> ayah pro or you know</font>

636
00:23:00,750 --> 00:23:04,200
whatever kind<font color="#E5E5E5"> of assemble disassembler</font>

637
00:23:02,549 --> 00:23:05,070
you're using say like that's<font color="#E5E5E5"> a function</font>

638
00:23:04,200 --> 00:23:06,899
<font color="#CCCCCC">that's a function</font><font color="#E5E5E5"> that's a function</font>

639
00:23:05,070 --> 00:23:10,168
<font color="#E5E5E5">anything that references that type of</font>

640
00:23:06,899 --> 00:23:12,928
<font color="#E5E5E5">code so what we end up</font><font color="#CCCCCC"> seeing</font><font color="#E5E5E5"> is again</font>

641
00:23:10,169 --> 00:23:15,120
this goes<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to you know it up at the</font>

642
00:23:12,929 --> 00:23:17,279
top<font color="#CCCCCC"> orange means it's defined</font><font color="#E5E5E5"> red means</font>

643
00:23:15,120 --> 00:23:19,350
<font color="#E5E5E5">it's not defined</font><font color="#CCCCCC"> so if we write some</font>

644
00:23:17,279 --> 00:23:21,269
code we already have a<font color="#CCCCCC"> Python module</font>

645
00:23:19,350 --> 00:23:23,820
that<font color="#E5E5E5"> I wrote that did this all we see is</font>

646
00:23:21,269 --> 00:23:25,139
<font color="#CCCCCC">it's pretty nice</font><font color="#E5E5E5"> so now there's only a</font>

647
00:23:23,820 --> 00:23:27,029
couple<font color="#CCCCCC"> things that</font><font color="#E5E5E5"> are undefined that we</font>

648
00:23:25,139 --> 00:23:28,649
probably don't<font color="#CCCCCC"> care about</font><font color="#E5E5E5"> maybe we do</font>

649
00:23:27,029 --> 00:23:30,090
<font color="#CCCCCC">but</font><font color="#E5E5E5"> at least there's only a few things</font>

650
00:23:28,649 --> 00:23:32,158
in<font color="#E5E5E5"> that stack that you need to look at</font>

651
00:23:30,090 --> 00:23:32,970
<font color="#E5E5E5">say wait that thing that's undefined</font><font color="#CCCCCC"> is</font>

652
00:23:32,159 --> 00:23:34,950
that good or<font color="#CCCCCC"> bad</font>

653
00:23:32,970 --> 00:23:37,649
and then we also see the script<font color="#CCCCCC"> output</font>

654
00:23:34,950 --> 00:23:39,779
at the bottom we now have<font color="#CCCCCC"> 200 2000 and</font>

655
00:23:37,649 --> 00:23:42,149
almost 500<font color="#E5E5E5"> functions that we just found</font>

656
00:23:39,779 --> 00:23:44,100
from that that were not<font color="#CCCCCC"> known to be</font>

657
00:23:42,149 --> 00:23:46,168
functions<font color="#CCCCCC"> previously so that's</font><font color="#E5E5E5"> pretty</font>

658
00:23:44,100 --> 00:23:47,459
cool<font color="#CCCCCC"> so that means that we</font><font color="#E5E5E5"> don't have to</font>

659
00:23:46,169 --> 00:23:48,679
dig in<font color="#E5E5E5"> here and be</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> okay where</font><font color="#CCCCCC"> are</font>

660
00:23:47,460 --> 00:23:51,510
those functions<font color="#CCCCCC"> where those data</font>

661
00:23:48,679 --> 00:23:54,120
structures what is this we automatically

662
00:23:51,510 --> 00:23:56,129
now know where every function exists so

663
00:23:54,120 --> 00:23:59,760
that was the first step<font color="#CCCCCC"> so the next one</font>

664
00:23:56,130 --> 00:24:02,880
we're going to<font color="#E5E5E5"> do is can we rebuild the</font>

665
00:23:59,760 --> 00:24:05,220
actual names of<font color="#E5E5E5"> the functions so if you</font>

666
00:24:02,880 --> 00:24:06,570
start digging<font color="#E5E5E5"> into the binary and you</font>

667
00:24:05,220 --> 00:24:08,370
did<font color="#E5E5E5"> like maybe just</font><font color="#CCCCCC"> the strings on the</font>

668
00:24:06,570 --> 00:24:09,840
final this<font color="#E5E5E5"> is actually what a lot</font><font color="#CCCCCC"> of</font>

669
00:24:08,370 --> 00:24:11,668
<font color="#E5E5E5">people had been reporting I was like hey</font>

670
00:24:09,840 --> 00:24:13,470
this this<font color="#E5E5E5"> binary is malicious because</font>

671
00:24:11,669 --> 00:24:16,830
when I ran strings<font color="#E5E5E5"> I saw</font>

672
00:24:13,470 --> 00:24:18,090
it's a main run<font color="#E5E5E5"> DDoS and so I was like</font>

673
00:24:16,830 --> 00:24:19,350
<font color="#E5E5E5">okay it's probably</font><font color="#CCCCCC"> gonna do with DDoS</font>

674
00:24:18,090 --> 00:24:21,270
even though I didn't figure out<font color="#E5E5E5"> where</font>

675
00:24:19,350 --> 00:24:22,020
<font color="#E5E5E5">that function is or how it</font><font color="#CCCCCC"> does it so a</font>

676
00:24:21,270 --> 00:24:23,850
lot of<font color="#E5E5E5"> people</font><font color="#CCCCCC"> were just posting</font>

677
00:24:22,020 --> 00:24:26,158
<font color="#E5E5E5">screenshots of look at this new malware</font>

678
00:24:23,850 --> 00:24:27,870
<font color="#E5E5E5">here's a string table and I saw this</font>

679
00:24:26,159 --> 00:24:29,610
string<font color="#CCCCCC"> and you know that doesn't</font><font color="#E5E5E5"> really</font>

680
00:24:27,870 --> 00:24:30,120
<font color="#CCCCCC">pass my sniff test so you're probably</font>

681
00:24:29,610 --> 00:24:32,250
right

682
00:24:30,120 --> 00:24:34,469
<font color="#E5E5E5">but that that just</font><font color="#CCCCCC"> doesn't sit right</font>

683
00:24:32,250 --> 00:24:36,210
with<font color="#E5E5E5"> me</font><font color="#CCCCCC"> so we see the strip binder on</font>

684
00:24:34,470 --> 00:24:38,340
the left<font color="#E5E5E5"> and we see the normal binary on</font>

685
00:24:36,210 --> 00:24:41,280
the right<font color="#E5E5E5"> so basically we do see that</font>

686
00:24:38,340 --> 00:24:42,840
<font color="#E5E5E5">the the function names are very</font><font color="#CCCCCC"> nice</font>

687
00:24:41,280 --> 00:24:45,240
when we have<font color="#CCCCCC"> a normal binary</font><font color="#E5E5E5"> but the</font>

688
00:24:42,840 --> 00:24:48,000
stripped<font color="#E5E5E5"> one's a pain so we want to be</font>

689
00:24:45,240 --> 00:24:50,340
able to start seeing if we can migrate

690
00:24:48,000 --> 00:24:52,440
<font color="#E5E5E5">from a strip binary into a normal</font><font color="#CCCCCC"> one</font>

691
00:24:50,340 --> 00:24:54,240
maybe rebuild the<font color="#CCCCCC"> strip the symbol table</font>

692
00:24:52,440 --> 00:24:56,730
or<font color="#E5E5E5"> something not</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> sure an</font>

693
00:24:54,240 --> 00:24:58,559
interesting bit in the strings table or

694
00:24:56,730 --> 00:25:00,030
excuse<font color="#CCCCCC"> me</font><font color="#E5E5E5"> for the string load right I</font>

695
00:24:58,559 --> 00:25:02,070
did pick<font color="#CCCCCC"> up that there was a string</font><font color="#E5E5E5"> load</font>

696
00:25:00,030 --> 00:25:04,500
<font color="#E5E5E5">but it also thinks of that string is</font>

697
00:25:02,070 --> 00:25:06,090
huge and<font color="#E5E5E5"> so if you went into that part</font>

698
00:25:04,500 --> 00:25:08,159
in memory you<font color="#E5E5E5"> go okay what is this</font>

699
00:25:06,090 --> 00:25:09,928
<font color="#E5E5E5">there's a huge blob of strings with no</font>

700
00:25:08,159 --> 00:25:12,210
null blights in there so it's<font color="#E5E5E5"> not a</font>

701
00:25:09,929 --> 00:25:15,929
normal<font color="#CCCCCC"> C type</font><font color="#E5E5E5"> string where it's a null</font>

702
00:25:12,210 --> 00:25:17,640
terminated<font color="#E5E5E5"> string so when we start</font>

703
00:25:15,929 --> 00:25:20,669
digging<font color="#CCCCCC"> we find that there was</font><font color="#E5E5E5"> this</font>

704
00:25:17,640 --> 00:25:23,940
weird<font color="#E5E5E5"> segment in the actual binary and</font>

705
00:25:20,669 --> 00:25:26,190
it says go<font color="#CCCCCC"> PC Ln tab</font><font color="#E5E5E5"> and so if you dig</font>

706
00:25:23,940 --> 00:25:27,870
<font color="#CCCCCC">into the source it's pretty interesting</font>

707
00:25:26,190 --> 00:25:28,919
<font color="#E5E5E5">this is something that doesn't</font><font color="#CCCCCC"> get</font>

708
00:25:27,870 --> 00:25:30,629
stripped out when you say you want to

709
00:25:28,919 --> 00:25:33,419
<font color="#E5E5E5">strip the binary and it's actually used</font>

710
00:25:30,630 --> 00:25:35,190
<font color="#E5E5E5">by the go to the go runtime so it uses</font>

711
00:25:33,419 --> 00:25:38,880
this<font color="#E5E5E5"> so that can</font><font color="#CCCCCC"> use some reflection and</font>

712
00:25:35,190 --> 00:25:40,530
essentially what happens is they keep

713
00:25:38,880 --> 00:25:42,150
this so that the go framework

714
00:25:40,530 --> 00:25:43,678
understands what's<font color="#CCCCCC"> going on so if you</font>

715
00:25:42,150 --> 00:25:45,659
<font color="#E5E5E5">hit a panic and you had that stack trace</font>

716
00:25:43,679 --> 00:25:47,429
sort of like Java<font color="#CCCCCC"> you</font><font color="#E5E5E5"> basically go</font><font color="#CCCCCC"> oh</font>

717
00:25:45,659 --> 00:25:49,350
okay I know what function that<font color="#E5E5E5"> was from</font>

718
00:25:47,429 --> 00:25:50,909
and<font color="#CCCCCC"> what around</font><font color="#E5E5E5"> what line it was and so</font>

719
00:25:49,350 --> 00:25:52,918
this is some extra data<font color="#E5E5E5"> that's in every</font>

720
00:25:50,909 --> 00:25:54,990
single stripped binary and essentially

721
00:25:52,919 --> 00:25:57,030
<font color="#E5E5E5">there's a header there's a function</font>

722
00:25:54,990 --> 00:25:59,280
<font color="#E5E5E5">count and then each function is</font>

723
00:25:57,030 --> 00:26:01,530
essentially<font color="#E5E5E5"> it's an address to the</font>

724
00:25:59,280 --> 00:26:03,870
function and then it's an offset to<font color="#CCCCCC"> the</font>

725
00:26:01,530 --> 00:26:05,309
function name in a string table<font color="#E5E5E5"> so this</font>

726
00:26:03,870 --> 00:26:07,350
is awesome<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us because this means we</font>

727
00:26:05,309 --> 00:26:09,720
<font color="#CCCCCC">can basically rebuild those binaries</font>

728
00:26:07,350 --> 00:26:13,020
really fast and<font color="#CCCCCC"> hopefully in an</font>

729
00:26:09,720 --> 00:26:14,820
automated fashion<font color="#CCCCCC"> and so we're</font><font color="#E5E5E5"> hoping we</font>

730
00:26:13,020 --> 00:26:16,830
can<font color="#CCCCCC"> do is we</font><font color="#E5E5E5"> take all these unknown</font>

731
00:26:14,820 --> 00:26:19,530
functions and we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> actually be</font>

732
00:26:16,830 --> 00:26:21,870
able<font color="#E5E5E5"> to rename it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> what the the binary</font>

733
00:26:19,530 --> 00:26:23,820
actually knows they are<font color="#E5E5E5"> and this is what</font>

734
00:26:21,870 --> 00:26:26,039
happens when we<font color="#E5E5E5"> run our little script it</font>

735
00:26:23,820 --> 00:26:26,970
really easy<font color="#CCCCCC"> essentially all you do is</font>

736
00:26:26,039 --> 00:26:28,650
you look<font color="#E5E5E5"> into</font>

737
00:26:26,970 --> 00:26:30,480
the source of go and<font color="#E5E5E5"> you're like</font><font color="#CCCCCC"> oh</font>

738
00:26:28,650 --> 00:26:31,980
that's<font color="#E5E5E5"> the structure now let me just</font>

739
00:26:30,480 --> 00:26:33,390
<font color="#E5E5E5">write a little code</font><font color="#CCCCCC"> that goes in there</font>

740
00:26:31,980 --> 00:26:35,460
<font color="#CCCCCC">and says how many functions my supposed</font>

741
00:26:33,390 --> 00:26:37,080
<font color="#E5E5E5">to look at par is each structure in</font>

742
00:26:35,460 --> 00:26:38,880
there and then you can basically say oh

743
00:26:37,080 --> 00:26:41,070
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> the start of the function let me</font>

744
00:26:38,880 --> 00:26:42,870
rename it<font color="#E5E5E5"> and this is good for</font><font color="#CCCCCC"> pretty</font>

745
00:26:41,070 --> 00:26:44,970
much any binary I've never seen anyone

746
00:26:42,870 --> 00:26:46,860
<font color="#E5E5E5">strip out that section</font><font color="#CCCCCC"> because again go</font>

747
00:26:44,970 --> 00:26:49,200
does rely on it for<font color="#E5E5E5"> some functionality</font>

748
00:26:46,860 --> 00:26:51,959
<font color="#E5E5E5">so people are still chatting on like can</font>

749
00:26:49,200 --> 00:26:53,940
<font color="#CCCCCC">we can we mutate it</font><font color="#E5E5E5"> some way can</font><font color="#CCCCCC"> we</font>

750
00:26:51,960 --> 00:26:56,070
remove it<font color="#CCCCCC"> will that mean that the binary</font>

751
00:26:53,940 --> 00:26:58,380
might crash more no one's really<font color="#E5E5E5"> solved</font>

752
00:26:56,070 --> 00:27:01,110
it<font color="#CCCCCC"> and clearly the go developers are not</font>

753
00:26:58,380 --> 00:27:04,110
trying to<font color="#E5E5E5"> help people</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> create</font>

754
00:27:01,110 --> 00:27:06,810
really hard<font color="#E5E5E5"> destructive binaries so</font>

755
00:27:04,110 --> 00:27:08,760
basically we're able<font color="#E5E5E5"> to rebuild the</font>

756
00:27:06,810 --> 00:27:11,340
binary so far<font color="#E5E5E5"> so this was a stripped</font>

757
00:27:08,760 --> 00:27:13,590
binary<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to now have easy</font>

758
00:27:11,340 --> 00:27:15,179
to read<font color="#CCCCCC"> function names and we also found</font>

759
00:27:13,590 --> 00:27:18,990
more functions than<font color="#E5E5E5"> we previously</font>

760
00:27:15,180 --> 00:27:22,260
<font color="#E5E5E5">already saw and we have about</font><font color="#CCCCCC"> 7,000 and</font>

761
00:27:18,990 --> 00:27:24,480
<font color="#CCCCCC">500 functions</font><font color="#E5E5E5"> and this was for a really</font>

762
00:27:22,260 --> 00:27:25,950
simple DDoS spreader<font color="#CCCCCC"> so it's basically</font>

763
00:27:24,480 --> 00:27:27,540
something that was looking for<font color="#E5E5E5"> weak</font>

764
00:27:25,950 --> 00:27:29,190
passwords and it was<font color="#E5E5E5"> getting into</font>

765
00:27:27,540 --> 00:27:31,950
<font color="#E5E5E5">different</font><font color="#CCCCCC"> devices and then it was just</font>

766
00:27:29,190 --> 00:27:33,810
<font color="#E5E5E5">ddossing on commands</font><font color="#CCCCCC"> and this had this</font>

767
00:27:31,950 --> 00:27:35,220
someone had stripped this and now we're

768
00:27:33,810 --> 00:27:37,260
able to rename<font color="#E5E5E5"> it so it's really easy</font><font color="#CCCCCC"> to</font>

769
00:27:35,220 --> 00:27:39,330
figure<font color="#CCCCCC"> out what we're doing and this</font><font color="#E5E5E5"> is</font>

770
00:27:37,260 --> 00:27:41,160
important<font color="#CCCCCC"> again because there's so many</font>

771
00:27:39,330 --> 00:27:43,500
<font color="#E5E5E5">functions of this binary we see that</font>

772
00:27:41,160 --> 00:27:45,780
there is<font color="#E5E5E5"> over 11,000 and none</font><font color="#CCCCCC"> of them</font>

773
00:27:43,500 --> 00:27:47,460
had names before<font color="#E5E5E5"> and now we look at it</font>

774
00:27:45,780 --> 00:27:50,700
and we<font color="#CCCCCC"> can see</font><font color="#E5E5E5"> that there is</font><font color="#CCCCCC"> a main in</font>

775
00:27:47,460 --> 00:27:54,120
it func<font color="#CCCCCC"> 1 func 2 and then there's a main</font>

776
00:27:50,700 --> 00:27:55,980
main function<font color="#E5E5E5"> and there's the slave</font>

777
00:27:54,120 --> 00:27:57,570
server and<font color="#E5E5E5"> the get external IP that's</font>

778
00:27:55,980 --> 00:28:01,560
the only code that the malicious author

779
00:27:57,570 --> 00:28:03,840
wrote all other<font color="#E5E5E5"> 11,000 and 500 functions</font>

780
00:28:01,560 --> 00:28:05,490
are completely useless to<font color="#CCCCCC"> us</font><font color="#E5E5E5"> when we're</font>

781
00:28:03,840 --> 00:28:06,629
looking<font color="#E5E5E5"> at this so if you weren't able</font>

782
00:28:05,490 --> 00:28:08,520
<font color="#E5E5E5">to rebuild</font><font color="#CCCCCC"> that you're going to</font><font color="#E5E5E5"> be like</font>

783
00:28:06,630 --> 00:28:10,230
oh<font color="#E5E5E5"> gosh where am</font><font color="#CCCCCC"> I looking at this is</font>

784
00:28:08,520 --> 00:28:11,400
<font color="#E5E5E5">going to take so long and then you're</font>

785
00:28:10,230 --> 00:28:13,380
probably<font color="#E5E5E5"> gonna quit your job and go do</font>

786
00:28:11,400 --> 00:28:16,950
<font color="#CCCCCC">something maybe a</font><font color="#E5E5E5"> little easier</font><font color="#CCCCCC"> or I</font>

787
00:28:13,380 --> 00:28:18,660
would cool so essentially we've now

788
00:28:16,950 --> 00:28:21,420
figured out that we can rename every

789
00:28:18,660 --> 00:28:23,100
single<font color="#E5E5E5"> function and we've actually</font><font color="#CCCCCC"> been</font>

790
00:28:21,420 --> 00:28:26,160
<font color="#E5E5E5">able to map out where all the functions</font>

791
00:28:23,100 --> 00:28:28,139
are so for string loads<font color="#CCCCCC"> it got a little</font>

792
00:28:26,160 --> 00:28:29,820
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> because honestly I had no</font>

793
00:28:28,140 --> 00:28:31,290
<font color="#CCCCCC">idea how</font><font color="#E5E5E5"> any this was working and</font><font color="#CCCCCC"> I</font>

794
00:28:29,820 --> 00:28:35,100
<font color="#E5E5E5">actually did this before I'd ever</font>

795
00:28:31,290 --> 00:28:36,659
<font color="#E5E5E5">written any go code so this is this</font>

796
00:28:35,100 --> 00:28:38,520
tends to<font color="#CCCCCC"> happen</font><font color="#E5E5E5"> when when someone's</font>

797
00:28:36,660 --> 00:28:40,169
<font color="#E5E5E5">pulling in vendor code from a different</font>

798
00:28:38,520 --> 00:28:42,149
<font color="#CCCCCC">package you end up seeing the funk</font>

799
00:28:40,169 --> 00:28:43,919
<font color="#CCCCCC">name's looking similar</font><font color="#E5E5E5"> to this where</font>

800
00:28:42,149 --> 00:28:45,658
it's someone on github had posted<font color="#E5E5E5"> this</font>

801
00:28:43,919 --> 00:28:49,080
<font color="#E5E5E5">and the function name ends up being</font>

802
00:28:45,659 --> 00:28:50,399
github.com<font color="#E5E5E5"> slash this slash that and</font>

803
00:28:49,080 --> 00:28:52,049
then it's<font color="#CCCCCC"> actually the file that it's</font>

804
00:28:50,399 --> 00:28:53,549
referencing<font color="#E5E5E5"> so this helps a lot when</font>

805
00:28:52,049 --> 00:28:54,570
you're<font color="#CCCCCC"> reversing because you don't</font>

806
00:28:53,549 --> 00:28:56,609
<font color="#E5E5E5">actually have to reverse any of those</font>

807
00:28:54,570 --> 00:28:58,739
functions<font color="#CCCCCC"> unless you assume someone's</font>

808
00:28:56,609 --> 00:29:00,418
trying to<font color="#E5E5E5"> give you a false flag so you</font>

809
00:28:58,739 --> 00:29:01,799
can<font color="#E5E5E5"> just go to the github page and you</font>

810
00:29:00,419 --> 00:29:03,809
just<font color="#CCCCCC"> look and</font><font color="#E5E5E5"> see what the code</font><font color="#CCCCCC"> is doing</font>

811
00:29:01,799 --> 00:29:05,700
<font color="#E5E5E5">and so if we looked at this one very</font>

812
00:29:03,809 --> 00:29:09,090
specifically<font color="#E5E5E5"> this was just something</font><font color="#CCCCCC"> to</font>

813
00:29:05,700 --> 00:29:10,739
<font color="#CCCCCC">help someone do some blogging</font><font color="#E5E5E5"> and so the</font>

814
00:29:09,090 --> 00:29:12,899
<font color="#CCCCCC">login would be easier for</font><font color="#E5E5E5"> them and we</font>

815
00:29:10,739 --> 00:29:16,320
see what the<font color="#CCCCCC"> actual</font><font color="#E5E5E5"> arguments are for</font>

816
00:29:12,899 --> 00:29:18,359
<font color="#E5E5E5">this and what's being passed in so I</font>

817
00:29:16,320 --> 00:29:19,769
gave you this example<font color="#CCCCCC"> because we know</font>

818
00:29:18,359 --> 00:29:22,320
it's<font color="#E5E5E5"> going to be taking a string because</font>

819
00:29:19,769 --> 00:29:23,759
it's a logging<font color="#CCCCCC"> statement</font><font color="#E5E5E5"> but this is the</font>

820
00:29:22,320 --> 00:29:25,220
function<font color="#CCCCCC"> and I don't see a string</font>

821
00:29:23,759 --> 00:29:28,440
because nothing's identified a string

822
00:29:25,220 --> 00:29:31,470
but<font color="#E5E5E5"> we do see that weird little pointer</font>

823
00:29:28,440 --> 00:29:33,419
that's<font color="#E5E5E5"> getting loaded into EAX</font><font color="#CCCCCC"> and if</font>

824
00:29:31,470 --> 00:29:35,429
you were to look into<font color="#CCCCCC"> the binary we</font>

825
00:29:33,419 --> 00:29:37,409
<font color="#E5E5E5">notice that okay</font><font color="#CCCCCC"> it found</font><font color="#E5E5E5"> that there's a</font>

826
00:29:35,429 --> 00:29:41,549
reference<font color="#CCCCCC"> here and then there's</font><font color="#E5E5E5"> this</font>

827
00:29:37,409 --> 00:29:43,710
string<font color="#E5E5E5"> and if you look there's no null</font>

828
00:29:41,549 --> 00:29:46,168
bytes<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we do notice that there's a</font>

829
00:29:43,710 --> 00:29:50,070
weird thing where<font color="#CCCCCC"> - two lines</font><font color="#E5E5E5"> below the</font>

830
00:29:46,169 --> 00:29:52,619
<font color="#CCCCCC">load</font><font color="#E5E5E5"> we see hex one zero and then we</font>

831
00:29:50,070 --> 00:29:54,570
notice that it<font color="#CCCCCC"> looks like</font><font color="#E5E5E5"> maybe a string</font>

832
00:29:52,619 --> 00:29:56,789
that's that long<font color="#E5E5E5"> we're not really sure</font>

833
00:29:54,570 --> 00:29:58,889
<font color="#CCCCCC">and then if we dig into</font><font color="#E5E5E5"> an a hex editor</font>

834
00:29:56,789 --> 00:30:00,090
<font color="#E5E5E5">we do</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> okay yeah that that looks a</font>

835
00:29:58,889 --> 00:30:02,219
little<font color="#E5E5E5"> easier it's easier to read it's</font>

836
00:30:00,090 --> 00:30:04,918
not vertical and this<font color="#E5E5E5"> is just a blob of</font>

837
00:30:02,220 --> 00:30:06,720
strings and this is essentially how<font color="#E5E5E5"> go</font>

838
00:30:04,919 --> 00:30:08,940
has a string table so if you've<font color="#E5E5E5"> ever</font>

839
00:30:06,720 --> 00:30:10,859
done reversing in<font color="#E5E5E5"> Android type things</font>

840
00:30:08,940 --> 00:30:12,299
it's it's<font color="#E5E5E5"> interesting because I'm not</font>

841
00:30:10,859 --> 00:30:14,850
sure if they like talk<font color="#CCCCCC"> to each other or</font>

842
00:30:12,299 --> 00:30:17,279
<font color="#E5E5E5">this is just</font><font color="#CCCCCC"> a good</font><font color="#E5E5E5"> programming language</font>

843
00:30:14,850 --> 00:30:18,719
way to like group things but essentially

844
00:30:17,279 --> 00:30:20,999
they<font color="#CCCCCC"> have a string table</font><font color="#E5E5E5"> and they're</font>

845
00:30:18,720 --> 00:30:22,859
grouped<font color="#E5E5E5"> the strings by the length so all</font>

846
00:30:20,999 --> 00:30:24,629
the strings<font color="#E5E5E5"> that are one character are</font>

847
00:30:22,859 --> 00:30:26,489
<font color="#CCCCCC">together all the ones at two three</font><font color="#E5E5E5"> four</font>

848
00:30:24,629 --> 00:30:28,590
all the<font color="#E5E5E5"> way up and it's</font><font color="#CCCCCC"> just this huge</font>

849
00:30:26,489 --> 00:30:30,029
blob<font color="#CCCCCC"> so what often happens is</font><font color="#E5E5E5"> this</font>

850
00:30:28,590 --> 00:30:31,259
assembler see this and they're like<font color="#E5E5E5"> cool</font>

851
00:30:30,029 --> 00:30:33,840
that's<font color="#E5E5E5"> a string and all strings are</font>

852
00:30:31,259 --> 00:30:35,609
terminated by null except they're not so

853
00:30:33,840 --> 00:30:36,840
you end up<font color="#E5E5E5"> having this huge huge huge</font>

854
00:30:35,609 --> 00:30:39,509
<font color="#E5E5E5">huge string and it's like yeah it's</font>

855
00:30:36,840 --> 00:30:41,820
<font color="#E5E5E5">loading this string and you're like no</font>

856
00:30:39,509 --> 00:30:43,889
it's it's not loading like a<font color="#CCCCCC"> 9,000</font>

857
00:30:41,820 --> 00:30:46,080
character string it's much<font color="#CCCCCC"> shorter than</font>

858
00:30:43,889 --> 00:30:48,418
<font color="#E5E5E5">that but now we're able to</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> say</font>

859
00:30:46,080 --> 00:30:50,489
okay so we see something loading a

860
00:30:48,419 --> 00:30:52,619
pointer and then we also saw that it

861
00:30:50,489 --> 00:30:53,530
gave its length<font color="#E5E5E5"> and that's because the</font>

862
00:30:52,619 --> 00:30:55,990
strings are

863
00:30:53,530 --> 00:30:58,780
<font color="#E5E5E5">sure of the data and the length of that</font>

864
00:30:55,990 --> 00:31:00,820
data that<font color="#CCCCCC"> it represents and so if we</font>

865
00:30:58,780 --> 00:31:02,560
look<font color="#CCCCCC"> at</font><font color="#E5E5E5"> that example what we see is if</font>

866
00:31:00,820 --> 00:31:06,879
we<font color="#E5E5E5"> went to that offset and then we</font>

867
00:31:02,560 --> 00:31:09,070
create a string of exactly<font color="#CCCCCC"> o x10 bytes</font>

868
00:31:06,880 --> 00:31:10,660
<font color="#E5E5E5">we get a good string that's actually</font>

869
00:31:09,070 --> 00:31:12,159
there you could verify this by<font color="#E5E5E5"> actually</font>

870
00:31:10,660 --> 00:31:14,560
dynamically stepping through<font color="#E5E5E5"> this and</font>

871
00:31:12,160 --> 00:31:16,330
then here's<font color="#CCCCCC"> another malware that</font><font color="#E5E5E5"> we saw</font>

872
00:31:14,560 --> 00:31:17,710
<font color="#E5E5E5">and basically</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> stepping through</font>

873
00:31:16,330 --> 00:31:19,540
and you see<font color="#E5E5E5"> the strings loading because</font>

874
00:31:17,710 --> 00:31:20,320
<font color="#E5E5E5">we're doing</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> dynamically and we're</font>

875
00:31:19,540 --> 00:31:22,690
like<font color="#E5E5E5"> oh</font><font color="#CCCCCC"> okay</font>

876
00:31:20,320 --> 00:31:25,389
it can use different<font color="#E5E5E5"> registers it kind</font>

877
00:31:22,690 --> 00:31:27,670
of looks different sometimes<font color="#E5E5E5"> but all</font><font color="#CCCCCC"> the</font>

878
00:31:25,390 --> 00:31:29,650
all the string loads<font color="#E5E5E5"> it always has a</font>

879
00:31:27,670 --> 00:31:31,390
pointer to<font color="#E5E5E5"> the location and</font><font color="#CCCCCC"> then it also</font>

880
00:31:29,650 --> 00:31:33,730
knows what the size of<font color="#E5E5E5"> the string it</font>

881
00:31:31,390 --> 00:31:35,500
wanted was so we're able<font color="#E5E5E5"> to automate</font>

882
00:31:33,730 --> 00:31:37,900
this and basically<font color="#E5E5E5"> look through</font>

883
00:31:35,500 --> 00:31:40,750
heuristic<font color="#CCCCCC"> alee and we're basically</font><font color="#E5E5E5"> going</font>

884
00:31:37,900 --> 00:31:42,790
<font color="#CCCCCC">to go okay I want to</font><font color="#E5E5E5"> find where there's</font>

885
00:31:40,750 --> 00:31:45,220
a pointer being loaded into a couple

886
00:31:42,790 --> 00:31:47,080
<font color="#CCCCCC">different registers you know for</font>

887
00:31:45,220 --> 00:31:49,660
different<font color="#CCCCCC"> platforms you might like if</font>

888
00:31:47,080 --> 00:31:51,159
it's<font color="#CCCCCC"> 64-bit verse</font><font color="#E5E5E5"> 32 bit you might have</font>

889
00:31:49,660 --> 00:31:53,200
to whitelist certain registers<font color="#CCCCCC"> and</font>

890
00:31:51,160 --> 00:31:55,030
certain<font color="#E5E5E5"> patterns but you end up making</font>

891
00:31:53,200 --> 00:31:58,360
these<font color="#E5E5E5"> sets of heuristics to go through</font>

892
00:31:55,030 --> 00:32:00,070
and you<font color="#CCCCCC"> look for both the pointer and</font>

893
00:31:58,360 --> 00:32:01,929
what's getting<font color="#E5E5E5"> put in there</font><font color="#CCCCCC"> and then</font>

894
00:32:00,070 --> 00:32:03,820
also<font color="#E5E5E5"> looking for like a length check</font><font color="#CCCCCC"> and</font>

895
00:32:01,930 --> 00:32:05,500
what we're able to do is we can<font color="#CCCCCC"> just</font>

896
00:32:03,820 --> 00:32:07,480
automate all this work<font color="#E5E5E5"> which just makes</font>

897
00:32:05,500 --> 00:32:09,280
our<font color="#E5E5E5"> life a lot easier</font><font color="#CCCCCC"> because now we're</font>

898
00:32:07,480 --> 00:32:10,480
<font color="#CCCCCC">not trying to</font><font color="#E5E5E5"> go through and look at you</font>

899
00:32:09,280 --> 00:32:12,490
know just<font color="#CCCCCC"> do a strings command to be</font>

900
00:32:10,480 --> 00:32:14,050
<font color="#E5E5E5">like</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> maybe that's used</font><font color="#CCCCCC"> here or</font><font color="#E5E5E5"> I</font>

901
00:32:12,490 --> 00:32:16,660
don't<font color="#CCCCCC"> really know you don't have</font><font color="#E5E5E5"> to do</font>

902
00:32:14,050 --> 00:32:20,320
<font color="#E5E5E5">this manually with again 11,000</font>

903
00:32:16,660 --> 00:32:21,610
functions potentially so this this ends

904
00:32:20,320 --> 00:32:23,710
up<font color="#CCCCCC"> bringing us the last point that</font><font color="#E5E5E5"> we</font>

905
00:32:21,610 --> 00:32:25,270
were<font color="#CCCCCC"> looking for was these heuristics</font>

906
00:32:23,710 --> 00:32:27,340
<font color="#E5E5E5">changed based on the version</font><font color="#CCCCCC"> of the</font>

907
00:32:25,270 --> 00:32:29,500
<font color="#E5E5E5">runtime</font><font color="#CCCCCC"> you know there's still binaries</font>

908
00:32:27,340 --> 00:32:31,810
out there that gets<font color="#E5E5E5"> submitted to</font>

909
00:32:29,500 --> 00:32:35,140
virustotal<font color="#CCCCCC"> or getting</font><font color="#E5E5E5"> dropped and there</font>

910
00:32:31,810 --> 00:32:37,210
go one point two so the heuristics that

911
00:32:35,140 --> 00:32:38,740
<font color="#E5E5E5">you might want for</font><font color="#CCCCCC"> 1.2</font><font color="#E5E5E5"> to try and load</font>

912
00:32:37,210 --> 00:32:39,610
<font color="#E5E5E5">all the strings end up being different</font>

913
00:32:38,740 --> 00:32:42,090
<font color="#E5E5E5">than the ones from</font>

914
00:32:39,610 --> 00:32:45,040
<font color="#CCCCCC">1.83 they're getting a lot more</font>

915
00:32:42,090 --> 00:32:46,929
<font color="#E5E5E5">efficient in their usages of loading so</font>

916
00:32:45,040 --> 00:32:49,000
<font color="#CCCCCC">sometimes now you might see actual</font>

917
00:32:46,930 --> 00:32:50,440
strings being<font color="#CCCCCC"> loaded in a branch where</font>

918
00:32:49,000 --> 00:32:52,720
it's you<font color="#E5E5E5"> know to switch statement it's</font>

919
00:32:50,440 --> 00:32:54,340
like<font color="#E5E5E5"> okay load this offset and then</font>

920
00:32:52,720 --> 00:32:56,080
<font color="#E5E5E5">everything all comes down</font><font color="#CCCCCC"> to this one</font>

921
00:32:54,340 --> 00:32:57,820
<font color="#CCCCCC">little bundle and then there's</font><font color="#E5E5E5"> about</font>

922
00:32:56,080 --> 00:32:59,439
like<font color="#CCCCCC"> forty other switches that</font><font color="#E5E5E5"> are doing</font>

923
00:32:57,820 --> 00:33:01,300
<font color="#E5E5E5">the same exact</font><font color="#CCCCCC"> thing so you can't look</font>

924
00:32:59,440 --> 00:33:02,950
<font color="#E5E5E5">for</font><font color="#CCCCCC"> these simple heuristics</font><font color="#E5E5E5"> so we want</font>

925
00:33:01,300 --> 00:33:05,710
to be able to fingerprint<font color="#E5E5E5"> the actual</font>

926
00:33:02,950 --> 00:33:07,240
<font color="#CCCCCC">binary and see what version it is and</font>

927
00:33:05,710 --> 00:33:08,980
what heuristics I should apply<font color="#CCCCCC"> to that</font>

928
00:33:07,240 --> 00:33:11,920
and this also helps<font color="#E5E5E5"> when you're trying</font>

929
00:33:08,980 --> 00:33:18,520
<font color="#E5E5E5">to do let's just say a Windows PE file</font>

930
00:33:11,920 --> 00:33:20,380
<font color="#E5E5E5">verse a Mac OS Mac o file and so like I</font>

931
00:33:18,520 --> 00:33:21,610
<font color="#E5E5E5">said here</font><font color="#CCCCCC"> a6 can break so we want to</font>

932
00:33:20,380 --> 00:33:23,550
look<font color="#CCCCCC"> for</font><font color="#E5E5E5"> different ways that they're</font>

933
00:33:21,610 --> 00:33:26,199
actually<font color="#CCCCCC"> doing so we want to have good</font>

934
00:33:23,550 --> 00:33:28,659
<font color="#CCCCCC">heuristics that they can be a little</font>

935
00:33:26,200 --> 00:33:32,230
brittle inside the version but we want

936
00:33:28,660 --> 00:33:33,670
to actually<font color="#E5E5E5"> be basically typing what</font>

937
00:33:32,230 --> 00:33:35,320
version<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> runtime we're going to be</font>

938
00:33:33,670 --> 00:33:37,450
<font color="#E5E5E5">looking at and there was this one</font>

939
00:33:35,320 --> 00:33:40,919
function<font color="#CCCCCC"> that we noticed</font><font color="#E5E5E5"> was doing this</font>

940
00:33:37,450 --> 00:33:42,730
and<font color="#CCCCCC"> it's runtime</font><font color="#E5E5E5"> sched</font><font color="#CCCCCC"> in it</font><font color="#E5E5E5"> and</font>

941
00:33:40,920 --> 00:33:44,320
<font color="#CCCCCC">honestly</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't know what any of this</font>

942
00:33:42,730 --> 00:33:45,370
code does<font color="#E5E5E5"> but I do know</font><font color="#CCCCCC"> that when you</font>

943
00:33:44,320 --> 00:33:47,710
looked in the source it was saying

944
00:33:45,370 --> 00:33:49,809
<font color="#E5E5E5">what's my build version and if we look</font>

945
00:33:47,710 --> 00:33:51,700
towards the<font color="#CCCCCC"> bottom of this</font><font color="#E5E5E5"> we do see</font>

946
00:33:49,809 --> 00:33:54,190
that<font color="#CCCCCC"> there is runtime underscore build</font>

947
00:33:51,700 --> 00:33:56,410
version<font color="#E5E5E5"> string and dot length</font>

948
00:33:54,190 --> 00:33:59,200
essentially<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> actually look at the</font>

949
00:33:56,410 --> 00:34:01,510
code for<font color="#E5E5E5"> the go runtime</font><font color="#CCCCCC"> there's a bunch</font>

950
00:33:59,200 --> 00:34:04,179
of<font color="#E5E5E5"> comments that</font><font color="#CCCCCC"> say we should</font><font color="#E5E5E5"> never not</font>

951
00:34:01,510 --> 00:34:06,760
know our own runtime so this code will

952
00:34:04,179 --> 00:34:09,010
never be used but<font color="#E5E5E5"> this is a check to see</font>

953
00:34:06,760 --> 00:34:11,440
was it actually set<font color="#E5E5E5"> and if it wasn't set</font>

954
00:34:09,010 --> 00:34:13,330
they'll drop in unknown but what we end

955
00:34:11,440 --> 00:34:15,700
up<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> follow that structure of</font>

956
00:34:13,330 --> 00:34:17,409
a string again<font color="#CCCCCC"> and we end</font><font color="#E5E5E5"> up seeing this</font>

957
00:34:15,699 --> 00:34:19,118
<font color="#E5E5E5">is the structure</font><font color="#CCCCCC"> of a string and it's</font>

958
00:34:17,409 --> 00:34:21,070
saying<font color="#CCCCCC"> I've already</font><font color="#E5E5E5"> loaded this in at a</font>

959
00:34:19,119 --> 00:34:23,139
runtime for a runtime build version

960
00:34:21,070 --> 00:34:25,060
<font color="#E5E5E5">string there's an offset and there's a</font>

961
00:34:23,139 --> 00:34:27,460
number<font color="#E5E5E5"> which is actually the length of</font>

962
00:34:25,060 --> 00:34:29,918
that string<font color="#E5E5E5"> so if we were to go to where</font>

963
00:34:27,460 --> 00:34:32,168
that offset is pointing to<font color="#E5E5E5"> again this is</font>

964
00:34:29,918 --> 00:34:35,469
one of those strings that's dropped in a

965
00:34:32,168 --> 00:34:37,509
huge vat of<font color="#E5E5E5"> strings basically with no no</font>

966
00:34:35,469 --> 00:34:39,730
<font color="#E5E5E5">bytes in between and now what we're able</font>

967
00:34:37,510 --> 00:34:40,810
to see is that<font color="#CCCCCC"> okay that says go</font><font color="#E5E5E5"> one dot</font>

968
00:34:39,730 --> 00:34:43,510
<font color="#E5E5E5">one dot</font>

969
00:34:40,810 --> 00:34:45,040
excuse me 1.8 dot<font color="#CCCCCC"> 1 so now we can</font>

970
00:34:43,510 --> 00:34:46,840
programmatically figure out which

971
00:34:45,040 --> 00:34:49,449
version<font color="#CCCCCC"> of this and then we</font><font color="#E5E5E5"> can run</font>

972
00:34:46,840 --> 00:34:51,490
<font color="#E5E5E5">different heuristics based on that so</font>

973
00:34:49,449 --> 00:34:54,668
this ends up being interesting for<font color="#CCCCCC"> us</font><font color="#E5E5E5"> in</font>

974
00:34:51,489 --> 00:34:57,040
multiple ways so<font color="#CCCCCC"> now we've fixed all our</font>

975
00:34:54,668 --> 00:34:58,930
tools<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> basically drop in a</font>

976
00:34:57,040 --> 00:35:00,279
go binary where<font color="#E5E5E5"> you run these and we</font>

977
00:34:58,930 --> 00:35:02,049
<font color="#E5E5E5">basically know every single function</font>

978
00:35:00,280 --> 00:35:03,790
name we already know every function<font color="#CCCCCC"> that</font>

979
00:35:02,050 --> 00:35:05,170
we might<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to step into</font><font color="#E5E5E5"> and we have</font>

980
00:35:03,790 --> 00:35:08,080
all the string loads<font color="#E5E5E5"> and we know the</font>

981
00:35:05,170 --> 00:35:10,180
version<font color="#CCCCCC"> of go that was used</font><font color="#E5E5E5"> and going</font>

982
00:35:08,080 --> 00:35:13,060
back<font color="#E5E5E5"> to the AV industry often you want</font>

983
00:35:10,180 --> 00:35:14,770
to<font color="#E5E5E5"> try and profile your attackers so</font>

984
00:35:13,060 --> 00:35:17,440
<font color="#E5E5E5">even if maybe they changed all the</font>

985
00:35:14,770 --> 00:35:20,140
strings<font color="#E5E5E5"> you might see a certain you know</font>

986
00:35:17,440 --> 00:35:21,180
<font color="#CCCCCC">region always pushes binaries with a</font>

987
00:35:20,140 --> 00:35:22,500
specific<font color="#CCCCCC"> runtime</font>

988
00:35:21,180 --> 00:35:25,470
this is a way<font color="#CCCCCC"> you can start profiling</font>

989
00:35:22,500 --> 00:35:27,900
<font color="#E5E5E5">actors</font><font color="#CCCCCC"> so you know this</font><font color="#E5E5E5"> is a little</font>

990
00:35:25,470 --> 00:35:29,459
flimsy but this is kind of along those

991
00:35:27,900 --> 00:35:31,109
lines of what you<font color="#E5E5E5"> might be thinking if</font>

992
00:35:29,460 --> 00:35:33,089
you want to say<font color="#E5E5E5"> like</font><font color="#CCCCCC"> Oh like who's an</font>

993
00:35:31,109 --> 00:35:36,900
apt who's not if you want<font color="#E5E5E5"> to use that</font>

994
00:35:33,089 --> 00:35:39,328
dumb word so<font color="#E5E5E5"> issues are all handled the</font>

995
00:35:36,900 --> 00:35:43,349
codes up there I need<font color="#E5E5E5"> to push some</font>

996
00:35:39,329 --> 00:35:45,240
actual new jurist extort us talk but

997
00:35:43,349 --> 00:35:48,420
this<font color="#CCCCCC"> is up</font><font color="#E5E5E5"> there and this is essentially</font>

998
00:35:45,240 --> 00:35:50,430
a this is a loader for Ida<font color="#CCCCCC"> so once you</font>

999
00:35:48,420 --> 00:35:51,900
open<font color="#CCCCCC"> up a binary</font><font color="#E5E5E5"> in Ida</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> going to</font>

1000
00:35:50,430 --> 00:35:53,848
go through<font color="#E5E5E5"> and it basically implements</font>

1001
00:35:51,900 --> 00:35:57,140
<font color="#E5E5E5">all those</font><font color="#CCCCCC"> pseudo code</font><font color="#E5E5E5"> that we're just</font>

1002
00:35:53,849 --> 00:35:59,579
talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> I also have one for</font><font color="#E5E5E5"> Benja</font>

1003
00:35:57,140 --> 00:36:02,578
<font color="#E5E5E5">binary ninja and I'll be releasing that</font>

1004
00:35:59,579 --> 00:36:04,230
<font color="#E5E5E5">shortly</font><font color="#CCCCCC"> if you don't already have a</font>

1005
00:36:02,579 --> 00:36:07,109
license<font color="#CCCCCC"> for Ida</font><font color="#E5E5E5"> and you don't want to</font>

1006
00:36:04,230 --> 00:36:10,079
steal<font color="#CCCCCC"> it from all</font><font color="#E5E5E5"> the AV vendors who</font>

1007
00:36:07,109 --> 00:36:11,460
leaked it<font color="#E5E5E5"> out to people</font><font color="#CCCCCC"> which thank you</font>

1008
00:36:10,079 --> 00:36:13,730
for them that's<font color="#E5E5E5"> how I learned when I was</font>

1009
00:36:11,460 --> 00:36:16,230
a kid<font color="#CCCCCC"> but</font>

1010
00:36:13,730 --> 00:36:18,119
Benja is really cheap and it's a great

1011
00:36:16,230 --> 00:36:19,349
tool<font color="#CCCCCC"> and if you're just</font><font color="#E5E5E5"> trying to tool</font>

1012
00:36:18,119 --> 00:36:21,150
<font color="#CCCCCC">around and figure out what's</font><font color="#E5E5E5"> going on</font>

1013
00:36:19,349 --> 00:36:23,010
<font color="#CCCCCC">you should pay for</font><font color="#E5E5E5"> that it's like</font><font color="#CCCCCC"> fifty</font>

1014
00:36:21,150 --> 00:36:25,020
bucks<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> message the guys they're</font>

1015
00:36:23,010 --> 00:36:27,809
<font color="#E5E5E5">really nice they're actually around</font><font color="#CCCCCC"> Def</font>

1016
00:36:25,020 --> 00:36:29,220
<font color="#CCCCCC">Con probably</font><font color="#E5E5E5"> they'll give you a</font><font color="#CCCCCC"> free</font>

1017
00:36:27,809 --> 00:36:31,770
license if you're like hey I'm a student

1018
00:36:29,220 --> 00:36:33,089
<font color="#E5E5E5">and I can't afford fifty dollars</font><font color="#CCCCCC"> if they</font>

1019
00:36:31,770 --> 00:36:35,670
don't wanna give it to<font color="#E5E5E5"> you</font><font color="#CCCCCC"> message me</font>

1020
00:36:33,089 --> 00:36:37,859
<font color="#CCCCCC">I'll buy</font><font color="#E5E5E5"> one for</font><font color="#CCCCCC"> you people should be</font>

1021
00:36:35,670 --> 00:36:40,170
able<font color="#E5E5E5"> to you know use these tools and I</font>

1022
00:36:37,859 --> 00:36:42,058
know<font color="#CCCCCC"> it is very expensive so</font><font color="#E5E5E5"> that's why</font>

1023
00:36:40,170 --> 00:36:45,540
we're<font color="#CCCCCC"> really seeing the tool for</font><font color="#E5E5E5"> Benja</font>

1024
00:36:42,059 --> 00:36:48,329
as well so now that we've fix all<font color="#CCCCCC"> our</font>

1025
00:36:45,540 --> 00:36:49,980
tooling<font color="#E5E5E5"> this is my most favorite part is</font>

1026
00:36:48,329 --> 00:36:53,280
often<font color="#E5E5E5"> that we get to just break</font>

1027
00:36:49,980 --> 00:36:55,049
<font color="#E5E5E5">everything again so you know when we</font>

1028
00:36:53,280 --> 00:36:57,150
were working<font color="#E5E5E5"> with malicious binaries a</font>

1029
00:36:55,049 --> 00:36:59,430
lot<font color="#E5E5E5"> you know people are like why are you</font>

1030
00:36:57,150 --> 00:37:01,440
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to invent bad ways and to you</font><font color="#CCCCCC"> know</font>

1031
00:36:59,430 --> 00:37:03,058
break your own<font color="#CCCCCC"> toolset and honestly I</font>

1032
00:37:01,440 --> 00:37:04,920
<font color="#E5E5E5">always tell</font><font color="#CCCCCC"> people this is kind of</font><font color="#E5E5E5"> like</font>

1033
00:37:03,059 --> 00:37:07,290
doing recon and also trying<font color="#E5E5E5"> to force</font>

1034
00:37:04,920 --> 00:37:09,420
final bad people<font color="#E5E5E5"> or even good</font><font color="#CCCCCC"> people in</font>

1035
00:37:07,290 --> 00:37:12,270
a<font color="#E5E5E5"> certain direction</font><font color="#CCCCCC"> if there's no way to</font>

1036
00:37:09,420 --> 00:37:14,609
break<font color="#E5E5E5"> a tool today someone will pay</font>

1037
00:37:12,270 --> 00:37:16,950
someone to do it but if we say<font color="#E5E5E5"> oh you</font>

1038
00:37:14,609 --> 00:37:19,230
can break things this way and you know

1039
00:37:16,950 --> 00:37:20,939
you do these<font color="#E5E5E5"> things you can develop your</font>

1040
00:37:19,230 --> 00:37:22,950
tooling to actually look for<font color="#E5E5E5"> those</font>

1041
00:37:20,940 --> 00:37:24,569
signals<font color="#E5E5E5"> so you'll end up seeing like</font><font color="#CCCCCC"> oh</font>

1042
00:37:22,950 --> 00:37:26,189
<font color="#CCCCCC">kiddies</font><font color="#E5E5E5"> you're using that toolkit we</font>

1043
00:37:24,569 --> 00:37:27,480
dropped but you know there was a more

1044
00:37:26,190 --> 00:37:29,700
advanced way to do it we just<font color="#E5E5E5"> didn't</font>

1045
00:37:27,480 --> 00:37:31,349
figure<font color="#CCCCCC"> that out yet so you'll see more</font>

1046
00:37:29,700 --> 00:37:33,390
<font color="#E5E5E5">advanced actors are like oh yeah okay</font>

1047
00:37:31,349 --> 00:37:33,750
<font color="#CCCCCC">that's how you</font><font color="#E5E5E5"> break stuff</font><font color="#CCCCCC"> I'll go a</font>

1048
00:37:33,390 --> 00:37:35,310
<font color="#CCCCCC">step</font>

1049
00:37:33,750 --> 00:37:36,870
further and if you have your tooling

1050
00:37:35,310 --> 00:37:38,279
looking for that<font color="#E5E5E5"> kind of stuff</font><font color="#CCCCCC"> you DEP</font>

1051
00:37:36,870 --> 00:37:40,259
seeing<font color="#E5E5E5"> oh that's a really advanced</font>

1052
00:37:38,280 --> 00:37:41,970
person<font color="#E5E5E5"> who's doing a method that I was</font>

1053
00:37:40,260 --> 00:37:43,590
hinting<font color="#E5E5E5"> towards but I never released</font>

1054
00:37:41,970 --> 00:37:45,299
code<font color="#CCCCCC"> for</font><font color="#E5E5E5"> so you end up seeing these</font>

1055
00:37:43,590 --> 00:37:46,800
things trip in your environments<font color="#E5E5E5"> a lot</font>

1056
00:37:45,300 --> 00:37:49,140
earlier<font color="#E5E5E5"> and it ends</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> being</font><font color="#CCCCCC"> for</font>

1057
00:37:46,800 --> 00:37:51,090
interesting stuff<font color="#CCCCCC"> and you know you never</font>

1058
00:37:49,140 --> 00:37:54,060
<font color="#E5E5E5">know maybe you'll call them fancy bear</font>

1059
00:37:51,090 --> 00:37:54,510
or<font color="#CCCCCC"> polish bear or</font><font color="#E5E5E5"> something or judo chop</font>

1060
00:37:54,060 --> 00:37:57,509
<font color="#CCCCCC">bear</font>

1061
00:37:54,510 --> 00:38:00,660
so there's a friend of mine who wrote

1062
00:37:57,510 --> 00:38:02,130
it's<font color="#E5E5E5"> called</font><font color="#CCCCCC"> OG OGG I don't even know how</font>

1063
00:38:00,660 --> 00:38:04,080
you<font color="#E5E5E5"> would pronounce it it's under the</font>

1064
00:38:02,130 --> 00:38:06,210
MIT license and essentially it pre

1065
00:38:04,080 --> 00:38:08,069
processes your go code<font color="#E5E5E5"> prior</font><font color="#CCCCCC"> to you</font>

1066
00:38:06,210 --> 00:38:10,140
compiling it so if you know a lot<font color="#CCCCCC"> about</font>

1067
00:38:08,070 --> 00:38:12,180
let's just<font color="#CCCCCC"> say the</font><font color="#E5E5E5"> Java environment</font><font color="#CCCCCC"> this</font>

1068
00:38:10,140 --> 00:38:13,950
<font color="#E5E5E5">is where ProGuard would come in</font><font color="#CCCCCC"> to so</font>

1069
00:38:12,180 --> 00:38:16,410
you have your source program changes

1070
00:38:13,950 --> 00:38:17,910
<font color="#CCCCCC">things and then you compile it</font><font color="#E5E5E5"> and as a</font>

1071
00:38:16,410 --> 00:38:19,830
<font color="#CCCCCC">developer what</font><font color="#E5E5E5"> you end</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> having is</font>

1072
00:38:17,910 --> 00:38:21,180
you'll have<font color="#CCCCCC"> like</font><font color="#E5E5E5"> this mapping file where</font>

1073
00:38:19,830 --> 00:38:23,220
<font color="#E5E5E5">it</font><font color="#CCCCCC"> basically says you know</font><font color="#E5E5E5"> that was my</font>

1074
00:38:21,180 --> 00:38:25,529
main function<font color="#E5E5E5"> but now it's transformed</font>

1075
00:38:23,220 --> 00:38:28,290
to this and you<font color="#E5E5E5"> know if it crashes on my</font>

1076
00:38:25,530 --> 00:38:30,480
customers<font color="#CCCCCC"> device</font><font color="#E5E5E5"> you can get a stack</font>

1077
00:38:28,290 --> 00:38:31,980
trace back and that stack trace is

1078
00:38:30,480 --> 00:38:34,530
meaningless<font color="#CCCCCC"> to anyone</font><font color="#E5E5E5"> else because it's</font>

1079
00:38:31,980 --> 00:38:36,810
like a dot<font color="#CCCCCC"> b</font><font color="#E5E5E5"> who did this</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then</font>

1080
00:38:34,530 --> 00:38:38,970
<font color="#CCCCCC">Chinese symbol</font><font color="#E5E5E5"> plus that did that and</font>

1081
00:38:36,810 --> 00:38:40,290
<font color="#CCCCCC">you know if you were tacker and you got</font>

1082
00:38:38,970 --> 00:38:41,580
that sack trace you'd be like I<font color="#E5E5E5"> don't</font>

1083
00:38:40,290 --> 00:38:43,080
know what's going<font color="#E5E5E5"> on I know the chain of</font>

1084
00:38:41,580 --> 00:38:45,210
events<font color="#E5E5E5"> that occurred I don't know what</font>

1085
00:38:43,080 --> 00:38:46,799
any of them are but<font color="#E5E5E5"> you was a developer</font>

1086
00:38:45,210 --> 00:38:48,330
end up having this little mapping<font color="#CCCCCC"> that</font>

1087
00:38:46,800 --> 00:38:49,890
you're like<font color="#E5E5E5"> okay I know exactly what</font>

1088
00:38:48,330 --> 00:38:51,810
method that was because you<font color="#CCCCCC"> know this</font>

1089
00:38:49,890 --> 00:38:53,790
<font color="#E5E5E5">Chinese symbol was main this one did</font>

1090
00:38:51,810 --> 00:38:55,350
that<font color="#E5E5E5"> this one did that so this guy</font><font color="#CCCCCC"> I</font>

1091
00:38:53,790 --> 00:38:59,580
wrote the preprocessor<font color="#CCCCCC"> which basically</font>

1092
00:38:55,350 --> 00:39:00,810
is just<font color="#E5E5E5"> a set of</font><font color="#CCCCCC"> AST parsers and</font><font color="#E5E5E5"> it goes</font>

1093
00:38:59,580 --> 00:39:02,610
through and<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can basically do</font>

1094
00:39:00,810 --> 00:39:04,470
anything<font color="#CCCCCC"> for it</font><font color="#E5E5E5"> he developed it</font><font color="#CCCCCC"> so that</font>

1095
00:39:02,610 --> 00:39:07,200
he could write<font color="#E5E5E5"> like</font><font color="#CCCCCC"> Oh instead</font><font color="#E5E5E5"> of</font>

1096
00:39:04,470 --> 00:39:09,000
wrapping<font color="#E5E5E5"> the code like this I just want</font>

1097
00:39:07,200 --> 00:39:10,830
to write the<font color="#CCCCCC"> word try and the brackets</font>

1098
00:39:09,000 --> 00:39:13,590
<font color="#CCCCCC">and so then trying brackets</font><font color="#E5E5E5"> would always</font>

1099
00:39:10,830 --> 00:39:15,270
be mutated out to the<font color="#E5E5E5"> actual go code</font>

1100
00:39:13,590 --> 00:39:17,700
that was necessary<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> that was trying</font>

1101
00:39:15,270 --> 00:39:19,380
we<font color="#E5E5E5"> rewrote it so it's</font><font color="#CCCCCC"> at basically an</font>

1102
00:39:17,700 --> 00:39:21,870
obfuscator much like<font color="#CCCCCC"> ProGuard or</font>

1103
00:39:19,380 --> 00:39:24,750
dexguard<font color="#E5E5E5"> so this is a sample and</font>

1104
00:39:21,870 --> 00:39:26,850
essentially this was a back door<font color="#CCCCCC"> that I</font>

1105
00:39:24,750 --> 00:39:29,880
had found in a binary that someone was

1106
00:39:26,850 --> 00:39:31,230
distributing as a poker server<font color="#CCCCCC"> I don't</font>

1107
00:39:29,880 --> 00:39:33,450
know why like<font color="#CCCCCC"> they were basically saying</font>

1108
00:39:31,230 --> 00:39:36,180
<font color="#CCCCCC">hey you guys should run your poker</font>

1109
00:39:33,450 --> 00:39:38,370
server on a production<font color="#E5E5E5"> server in the</font>

1110
00:39:36,180 --> 00:39:40,500
cloud because<font color="#E5E5E5"> I don't know they don't</font>

1111
00:39:38,370 --> 00:39:42,120
<font color="#E5E5E5">like</font><font color="#CCCCCC"> GUI and</font><font color="#E5E5E5"> they want to play poker a</font>

1112
00:39:40,500 --> 00:39:42,750
lot I<font color="#E5E5E5"> guess I don't know</font><font color="#CCCCCC"> it was</font><font color="#E5E5E5"> really</font>

1113
00:39:42,120 --> 00:39:44,160
<font color="#CCCCCC">strange</font>

1114
00:39:42,750 --> 00:39:45,570
but they did have<font color="#CCCCCC"> some infections we</font>

1115
00:39:44,160 --> 00:39:47,220
actually were able<font color="#CCCCCC"> to take over the</font><font color="#E5E5E5"> situ</font>

1116
00:39:45,570 --> 00:39:47,460
but this is essentially what<font color="#CCCCCC"> the code</font>

1117
00:39:47,220 --> 00:39:49,589
look

1118
00:39:47,460 --> 00:39:51,120
like when you reversed it so we

1119
00:39:49,590 --> 00:39:52,710
<font color="#CCCCCC">basically see it's just you know it has</font>

1120
00:39:51,120 --> 00:39:54,900
a<font color="#CCCCCC"> backdoor port everything and then it</font>

1121
00:39:52,710 --> 00:39:57,270
branches<font color="#CCCCCC"> out to a handle connection to</font>

1122
00:39:54,900 --> 00:39:58,950
actually do any work<font color="#E5E5E5"> so now if we ran</font>

1123
00:39:57,270 --> 00:40:02,130
this<font color="#E5E5E5"> through the obfuscator or go guard</font>

1124
00:39:58,950 --> 00:40:04,740
is which what we are releasing is<font color="#E5E5E5"> it</font>

1125
00:40:02,130 --> 00:40:06,870
just gets changed<font color="#CCCCCC"> down</font><font color="#E5E5E5"> to this you still</font>

1126
00:40:04,740 --> 00:40:08,669
understand what's going on<font color="#CCCCCC"> you still see</font>

1127
00:40:06,870 --> 00:40:12,089
what it<font color="#E5E5E5"> is but essentially from a</font>

1128
00:40:08,670 --> 00:40:13,380
reversing standpoint<font color="#E5E5E5"> what we see is you</font>

1129
00:40:12,090 --> 00:40:15,780
know<font color="#E5E5E5"> this is what it looked like before</font>

1130
00:40:13,380 --> 00:40:17,550
we obfuscated it<font color="#E5E5E5"> before</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> ran it</font>

1131
00:40:15,780 --> 00:40:19,200
through<font color="#CCCCCC"> go guard</font><font color="#E5E5E5"> we see all the function</font>

1132
00:40:17,550 --> 00:40:21,510
names on the left<font color="#E5E5E5"> yes we could have</font>

1133
00:40:19,200 --> 00:40:23,870
stripped it but as<font color="#E5E5E5"> we just shoot showed</font>

1134
00:40:21,510 --> 00:40:26,730
we're able<font color="#E5E5E5"> to rebuild all that stuff so</font>

1135
00:40:23,870 --> 00:40:28,650
<font color="#CCCCCC">when you run it through</font><font color="#E5E5E5"> the go guard</font>

1136
00:40:26,730 --> 00:40:30,540
<font color="#CCCCCC">what essentially</font><font color="#E5E5E5"> does you lose the</font>

1137
00:40:28,650 --> 00:40:32,040
ability to<font color="#E5E5E5"> rebuild</font><font color="#CCCCCC"> everything to a nice</font>

1138
00:40:30,540 --> 00:40:34,830
name<font color="#CCCCCC"> because you've changed all the nice</font>

1139
00:40:32,040 --> 00:40:36,420
names<font color="#CCCCCC"> -</font><font color="#E5E5E5"> annoying names and there's</font>

1140
00:40:34,830 --> 00:40:38,220
countless<font color="#E5E5E5"> ways you could change the</font>

1141
00:40:36,420 --> 00:40:39,990
mapping where there's known bugs where

1142
00:40:38,220 --> 00:40:41,730
Chinese<font color="#E5E5E5"> characters are not fully</font>

1143
00:40:39,990 --> 00:40:43,770
accepted<font color="#CCCCCC"> and lots of versions of IDA</font>

1144
00:40:41,730 --> 00:40:46,350
<font color="#E5E5E5">so that breaks all the free ones that</font>

1145
00:40:43,770 --> 00:40:49,230
people<font color="#E5E5E5"> are the free versions of</font><font color="#CCCCCC"> IDA</font><font color="#E5E5E5"> that</font>

1146
00:40:46,350 --> 00:40:52,200
people have downloaded<font color="#E5E5E5"> to try out with</font>

1147
00:40:49,230 --> 00:40:53,580
<font color="#E5E5E5">someone else's license so you know this</font>

1148
00:40:52,200 --> 00:40:55,740
<font color="#E5E5E5">is a great way that we can actually just</font>

1149
00:40:53,580 --> 00:40:57,660
<font color="#E5E5E5">break all the binaries and we can break</font>

1150
00:40:55,740 --> 00:41:01,529
all the tools<font color="#E5E5E5"> that people are currently</font>

1151
00:40:57,660 --> 00:41:03,029
using<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> just had fixed so there's</font>

1152
00:41:01,530 --> 00:41:04,260
an easy<font color="#E5E5E5"> way</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> solve this and there's an</font>

1153
00:41:03,030 --> 00:41:06,330
easy way<font color="#CCCCCC"> to map back and people have</font>

1154
00:41:04,260 --> 00:41:08,010
done that for Android countless ways

1155
00:41:06,330 --> 00:41:10,590
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> really interesting</font><font color="#CCCCCC"> academic</font>

1156
00:41:08,010 --> 00:41:12,240
papers are out about<font color="#E5E5E5"> this</font><font color="#CCCCCC"> but we're</font><font color="#E5E5E5"> not</font>

1157
00:41:10,590 --> 00:41:13,830
going<font color="#CCCCCC"> to touch that in</font><font color="#E5E5E5"> this one</font><font color="#CCCCCC"> I leave</font>

1158
00:41:12,240 --> 00:41:15,899
it as<font color="#CCCCCC"> an exercise to you guys to write</font>

1159
00:41:13,830 --> 00:41:19,110
<font color="#E5E5E5">the next post</font><font color="#CCCCCC"> come up here do a talk</font>

1160
00:41:15,900 --> 00:41:21,420
that<font color="#CCCCCC"> kind of stuff but so again there's</font>

1161
00:41:19,110 --> 00:41:24,270
the go reversing primer<font color="#CCCCCC"> that we've</font>

1162
00:41:21,420 --> 00:41:26,940
already posted<font color="#CCCCCC"> it will help you doing</font>

1163
00:41:24,270 --> 00:41:29,640
some reversing just both generically and

1164
00:41:26,940 --> 00:41:32,910
go specifically the go laying loader

1165
00:41:29,640 --> 00:41:35,310
<font color="#E5E5E5">assist is open</font><font color="#CCCCCC"> sourced already and I do</font>

1166
00:41:32,910 --> 00:41:39,600
have<font color="#CCCCCC"> to push some more heuristics for</font>

1167
00:41:35,310 --> 00:41:41,490
<font color="#E5E5E5">that for go</font><font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> 1.8 and above</font>

1168
00:41:39,600 --> 00:41:44,190
because<font color="#E5E5E5"> they did change some different</font>

1169
00:41:41,490 --> 00:41:47,160
<font color="#E5E5E5">things but I would say please go to that</font>

1170
00:41:44,190 --> 00:41:48,810
and<font color="#E5E5E5"> you know help commit to that I leave</font>

1171
00:41:47,160 --> 00:41:49,859
a lot<font color="#CCCCCC"> of the easy bugs to people because</font>

1172
00:41:48,810 --> 00:41:52,200
<font color="#CCCCCC">I</font><font color="#E5E5E5"> think it's a great way to start</font>

1173
00:41:49,860 --> 00:41:54,150
<font color="#CCCCCC">getting</font><font color="#E5E5E5"> into you know the open source</font>

1174
00:41:52,200 --> 00:41:55,200
community<font color="#CCCCCC"> and</font><font color="#E5E5E5"> start giving back</font><font color="#CCCCCC"> and then</font>

1175
00:41:54,150 --> 00:41:56,430
also you<font color="#E5E5E5"> know you can build</font><font color="#CCCCCC"> a little bit</font>

1176
00:41:55,200 --> 00:41:58,710
<font color="#E5E5E5">of reputation if you'd like to do that</font>

1177
00:41:56,430 --> 00:42:00,069
<font color="#CCCCCC">and then the</font><font color="#E5E5E5"> binary ninja version of</font>

1178
00:41:58,710 --> 00:42:03,039
that script is<font color="#CCCCCC"> also going to</font><font color="#E5E5E5"> be</font>

1179
00:42:00,069 --> 00:42:05,529
released<font color="#CCCCCC"> when</font><font color="#E5E5E5"> I get internet access</font><font color="#CCCCCC"> this</font>

1180
00:42:03,039 --> 00:42:07,630
week<font color="#CCCCCC"> Gill guard</font><font color="#E5E5E5"> is also going to be</font>

1181
00:42:05,529 --> 00:42:09,369
<font color="#E5E5E5">released and that again should</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> able</font>

1182
00:42:07,630 --> 00:42:11,049
<font color="#CCCCCC">to help</font><font color="#E5E5E5"> people in hardening their</font>

1183
00:42:09,369 --> 00:42:13,059
binaries<font color="#E5E5E5"> nobody's really doing</font><font color="#CCCCCC"> any</font>

1184
00:42:11,049 --> 00:42:15,489
hardening<font color="#E5E5E5"> other than the stripping which</font>

1185
00:42:13,059 --> 00:42:18,430
we<font color="#E5E5E5"> just</font><font color="#CCCCCC"> showed is pretty</font><font color="#E5E5E5"> much useless</font>

1186
00:42:15,489 --> 00:42:20,380
so good luck hunting<font color="#CCCCCC"> thank you for</font>

1187
00:42:18,430 --> 00:42:21,609
coming to the talk<font color="#CCCCCC"> thank you for staying</font>

1188
00:42:20,380 --> 00:42:22,839
<font color="#CCCCCC">for the talk you've been through a fire</font>

1189
00:42:21,609 --> 00:42:25,900
alarm that's commitment

1190
00:42:22,839 --> 00:42:27,519
thank you<font color="#E5E5E5"> I'll buy you all a drink</font><font color="#CCCCCC"> these</font>

1191
00:42:25,900 --> 00:42:29,289
are some good<font color="#CCCCCC"> people you</font><font color="#E5E5E5"> can actually</font>

1192
00:42:27,519 --> 00:42:31,538
<font color="#E5E5E5">follow they have really interesting</font>

1193
00:42:29,289 --> 00:42:34,089
stuff and a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> them work at</font><font color="#CCCCCC"> AVS or</font>

1194
00:42:31,539 --> 00:42:36,339
you know bounty programs and there's

1195
00:42:34,089 --> 00:42:37,839
there's really<font color="#CCCCCC"> interesting stuff so if</font>

1196
00:42:36,339 --> 00:42:40,089
you guys have any questions<font color="#CCCCCC"> I can</font><font color="#E5E5E5"> take</font>

1197
00:42:37,839 --> 00:42:41,049
those now or we<font color="#E5E5E5"> can chat later or</font>

1198
00:42:40,089 --> 00:42:44,650
<font color="#E5E5E5">something like that but thank you for</font>

1199
00:42:41,049 --> 00:42:45,819
<font color="#CCCCCC">coming and</font><font color="#E5E5E5"> also please donate to some of</font>

1200
00:42:44,650 --> 00:42:48,400
the<font color="#CCCCCC"> NPOs that are out there</font>

1201
00:42:45,819 --> 00:42:50,349
<font color="#CCCCCC">BFF is very important to</font><font color="#E5E5E5"> everyone in</font>

1202
00:42:48,400 --> 00:42:51,819
this<font color="#E5E5E5"> room and especially in this</font><font color="#CCCCCC"> country</font>

1203
00:42:50,349 --> 00:42:53,650
<font color="#CCCCCC">and interesting</font><font color="#E5E5E5"> times that we're at</font>

1204
00:42:51,819 --> 00:42:56,769
<font color="#E5E5E5">there's also a really</font><font color="#CCCCCC"> cool booth out</font>

1205
00:42:53,650 --> 00:42:57,789
there<font color="#CCCCCC"> hack</font><font color="#E5E5E5"> for kids go donate the fact</font>

1206
00:42:56,769 --> 00:43:00,788
<font color="#CCCCCC">that you can come to this conference</font>

1207
00:42:57,789 --> 00:43:02,920
<font color="#CCCCCC">means we are all very privileged donate</font>

1208
00:43:00,789 --> 00:43:05,410
5 bucks donate<font color="#E5E5E5"> 10 bucks donate 20 bucks</font>

1209
00:43:02,920 --> 00:43:06,459
<font color="#E5E5E5">it's a tax write-off</font><font color="#CCCCCC"> you can you can</font><font color="#E5E5E5"> get</font>

1210
00:43:05,410 --> 00:43:08,769
all the<font color="#CCCCCC"> write offs that the president</font>

1211
00:43:06,459 --> 00:43:10,808
<font color="#E5E5E5">gets to so like just go donate and you</font>

1212
00:43:08,769 --> 00:43:12,308
know donate to an<font color="#CCCCCC"> organization and like</font>

1213
00:43:10,809 --> 00:43:13,550
let's all just do some<font color="#E5E5E5"> good things today</font>

1214
00:43:12,309 --> 00:43:20,339
<font color="#CCCCCC">so</font><font color="#E5E5E5"> thank you</font>

1215
00:43:13,550 --> 00:43:20,339
[Applause]

