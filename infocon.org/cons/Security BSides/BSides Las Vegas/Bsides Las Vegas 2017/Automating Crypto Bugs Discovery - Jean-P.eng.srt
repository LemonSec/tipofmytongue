1
00:00:00,000 --> 00:00:04,140
<font color="#CCCCCC">um and with no further ado I'm gonna</font>

2
00:00:01,979 --> 00:00:07,049
<font color="#E5E5E5">turn it over to these gentlemen hello</font>

3
00:00:04,140 --> 00:00:09,120
good<font color="#E5E5E5"> afternoon</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> it will be hard to</font>

4
00:00:07,049 --> 00:00:10,469
<font color="#CCCCCC">give because we just back from from</font>

5
00:00:09,120 --> 00:00:12,780
<font color="#CCCCCC">blackhat where we</font><font color="#E5E5E5"> gave the same talk we</font>

6
00:00:10,469 --> 00:00:14,849
had 50<font color="#E5E5E5"> minute slot and now</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> just</font>

7
00:00:12,780 --> 00:00:17,460
25<font color="#E5E5E5"> minutes</font><font color="#CCCCCC"> so I'll try</font><font color="#E5E5E5"> to speak</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> bit</font>

8
00:00:14,849 --> 00:00:20,340
faster not too fast we just<font color="#CCCCCC"> remember</font><font color="#E5E5E5"> the</font>

9
00:00:17,460 --> 00:00:23,550
few slides but up it should<font color="#CCCCCC"> be useful</font><font color="#E5E5E5"> to</font>

10
00:00:20,340 --> 00:00:25,230
you so let's talk<font color="#E5E5E5"> about testing crypto</font>

11
00:00:23,550 --> 00:00:26,310
stuff<font color="#CCCCCC"> you know - crypto bit under the</font>

12
00:00:25,230 --> 00:00:29,279
<font color="#E5E5E5">blackhat people so you need less</font>

13
00:00:26,310 --> 00:00:31,140
introduction to this<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to test</font>

14
00:00:29,279 --> 00:00:32,579
crypto you test<font color="#E5E5E5"> functionally does it</font>

15
00:00:31,140 --> 00:00:34,170
work<font color="#CCCCCC"> correctly just what correctly on</font>

16
00:00:32,579 --> 00:00:36,780
valid<font color="#CCCCCC"> input</font><font color="#E5E5E5"> so you get the right output</font>

17
00:00:34,170 --> 00:00:40,500
<font color="#CCCCCC">and when you</font><font color="#E5E5E5"> send an invalid input what</font>

18
00:00:36,780 --> 00:00:43,350
do you get<font color="#E5E5E5"> you</font><font color="#CCCCCC"> get some</font><font color="#E5E5E5"> output that you</font>

19
00:00:40,500 --> 00:00:44,969
know what's computed in what but or do

20
00:00:43,350 --> 00:00:46,829
you get<font color="#E5E5E5"> an exception or</font><font color="#CCCCCC"> in error or</font>

21
00:00:44,969 --> 00:00:49,079
something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> tells the color the user</font>

22
00:00:46,829 --> 00:00:51,180
that<font color="#CCCCCC"> something's</font><font color="#E5E5E5"> wrong</font><font color="#CCCCCC"> you also want to</font>

23
00:00:49,079 --> 00:00:53,010
<font color="#CCCCCC">take</font><font color="#E5E5E5"> the security off the software so</font>

24
00:00:51,180 --> 00:00:54,420
crypto software is<font color="#CCCCCC"> software's you want</font>

25
00:00:53,010 --> 00:00:57,390
to<font color="#E5E5E5"> test the</font><font color="#CCCCCC"> euro stuff like memory</font>

26
00:00:54,420 --> 00:00:58,980
corruption<font color="#E5E5E5"> normal logic bugs</font><font color="#CCCCCC"> you also</font>

27
00:00:57,390 --> 00:01:01,379
want to test things are more specific to

28
00:00:58,980 --> 00:01:02,640
crypto you want to make sure that the

29
00:01:01,379 --> 00:01:05,220
<font color="#E5E5E5">cryptographic secrets they may be the</font>

30
00:01:02,640 --> 00:01:08,430
<font color="#E5E5E5">keys the</font><font color="#CCCCCC"> Pentax will not leak</font><font color="#E5E5E5"> lick in</font>

31
00:01:05,220 --> 00:01:11,189
<font color="#E5E5E5">several</font><font color="#CCCCCC"> cents it can leak in termsof</font><font color="#E5E5E5"> if</font>

32
00:01:08,430 --> 00:01:12,990
you<font color="#E5E5E5"> get a memory</font><font color="#CCCCCC"> dump you can have a</font><font color="#E5E5E5"> so</font>

33
00:01:11,189 --> 00:01:14,990
leakage<font color="#E5E5E5"> in terms of side channel attacks</font>

34
00:01:12,990 --> 00:01:18,179
for<font color="#CCCCCC"> example in software</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font>

35
00:01:14,990 --> 00:01:20,429
techniques timing attacks so<font color="#E5E5E5"> you want to</font>

36
00:01:18,180 --> 00:01:21,570
<font color="#E5E5E5">test all this with a single tool and no</font>

37
00:01:20,430 --> 00:01:25,290
such tool exists so that's why we

38
00:01:21,570 --> 00:01:26,610
started<font color="#CCCCCC"> a quite ambitious</font><font color="#E5E5E5"> project</font><font color="#CCCCCC"> the</font>

39
00:01:25,290 --> 00:01:28,979
things that<font color="#E5E5E5"> exist today you have for</font>

40
00:01:26,610 --> 00:01:32,280
example static analyzers<font color="#E5E5E5"> things that the</font>

41
00:01:28,979 --> 00:01:33,658
like<font color="#E5E5E5"> Genesis</font><font color="#CCCCCC"> and clone they will tell</font>

42
00:01:32,280 --> 00:01:36,299
you<font color="#E5E5E5"> what or not they will tell you well</font>

43
00:01:33,659 --> 00:01:39,060
how secure is your<font color="#E5E5E5"> code for</font><font color="#CCCCCC"> example in</font>

44
00:01:36,299 --> 00:01:41,009
terms<font color="#E5E5E5"> of memory corruption in terms of</font>

45
00:01:39,060 --> 00:01:42,689
undefined<font color="#E5E5E5"> behavior but it will tell you</font>

46
00:01:41,009 --> 00:01:46,320
nothing obviously<font color="#E5E5E5"> about the correctness</font>

47
00:01:42,689 --> 00:01:47,610
of the crypto if you implement RSA it

48
00:01:46,320 --> 00:01:50,309
will tell you that your<font color="#E5E5E5"> code is not</font>

49
00:01:47,610 --> 00:01:51,119
buggy but each one check obviously that

50
00:01:50,310 --> 00:01:53,610
RSA

51
00:01:51,119 --> 00:01:55,530
was<font color="#E5E5E5"> correctly is the opposite for test</font>

52
00:01:53,610 --> 00:01:57,930
vectors<font color="#E5E5E5"> so test vectors usually it's a</font>

53
00:01:55,530 --> 00:01:59,670
bunch of input<font color="#CCCCCC"> output values that you</font>

54
00:01:57,930 --> 00:02:01,920
use to<font color="#E5E5E5"> test that your implementation is</font>

55
00:01:59,670 --> 00:02:03,509
doing what it's supposed to do<font color="#E5E5E5"> but</font><font color="#CCCCCC"> it</font>

56
00:02:01,920 --> 00:02:05,700
will<font color="#E5E5E5"> not tell you anything about the</font>

57
00:02:03,509 --> 00:02:08,550
<font color="#E5E5E5">security the</font><font color="#CCCCCC"> safety of your code so you</font>

58
00:02:05,700 --> 00:02:09,869
<font color="#E5E5E5">want to combine these two</font><font color="#CCCCCC"> features you</font>

59
00:02:08,550 --> 00:02:11,670
have<font color="#E5E5E5"> some more advanced tool to find</font>

60
00:02:09,869 --> 00:02:13,480
Feinberg's you probably know things like

61
00:02:11,670 --> 00:02:15,309
<font color="#E5E5E5">a file which is kind of</font>

62
00:02:13,480 --> 00:02:17,260
<font color="#CCCCCC">preserved because</font><font color="#E5E5E5"> it doesn't know what</font>

63
00:02:15,310 --> 00:02:19,420
it's testing is trying to be as small as

64
00:02:17,260 --> 00:02:20,920
<font color="#CCCCCC">possible</font><font color="#E5E5E5"> to learn</font><font color="#CCCCCC"> what input will</font>

65
00:02:19,420 --> 00:02:23,649
<font color="#E5E5E5">maximize the cut curve</font><font color="#CCCCCC"> read but it has</font>

66
00:02:20,920 --> 00:02:25,869
to<font color="#E5E5E5"> learn by itself</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not designed for</font>

67
00:02:23,650 --> 00:02:28,599
example to test<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> know pkcs 11</font>

68
00:02:25,870 --> 00:02:31,000
<font color="#CCCCCC">passer</font><font color="#E5E5E5"> that's where you have things for</font>

69
00:02:28,599 --> 00:02:32,619
<font color="#E5E5E5">example</font><font color="#CCCCCC"> called smart furthers now smart</font>

70
00:02:31,000 --> 00:02:34,900
<font color="#E5E5E5">roads are it's dedicated</font><font color="#CCCCCC"> to a specific</font>

71
00:02:32,620 --> 00:02:37,000
<font color="#CCCCCC">crypto functionality you might have a</font>

72
00:02:34,900 --> 00:02:38,799
smart<font color="#E5E5E5"> further if I don't know elliptic</font>

73
00:02:37,000 --> 00:02:41,290
curve diffie-hellman<font color="#E5E5E5"> and the first I</font>

74
00:02:38,799 --> 00:02:43,209
will<font color="#E5E5E5"> try to send values that maximize</font>

75
00:02:41,290 --> 00:02:45,459
<font color="#E5E5E5">the code coverage like 10 different</font>

76
00:02:43,209 --> 00:02:48,549
<font color="#CCCCCC">values that</font><font color="#E5E5E5"> take</font><font color="#CCCCCC"> ten different code path</font>

77
00:02:45,459 --> 00:02:52,329
in<font color="#E5E5E5"> order in order to test all these all</font>

78
00:02:48,549 --> 00:02:55,030
<font color="#CCCCCC">is code okay</font><font color="#E5E5E5"> but it's pretty hard to</font>

79
00:02:52,329 --> 00:02:56,440
design and there's not many such tools

80
00:02:55,030 --> 00:02:59,109
available there's a few commercial ones

81
00:02:56,440 --> 00:03:00,670
but again there's very specific<font color="#CCCCCC"> may be</font>

82
00:02:59,109 --> 00:03:02,739
the<font color="#E5E5E5"> best the most powerful solution is</font>

83
00:03:00,670 --> 00:03:05,140
formal verification<font color="#CCCCCC"> so it's like</font><font color="#E5E5E5"> getting</font>

84
00:03:02,739 --> 00:03:07,989
a mathematical proof<font color="#E5E5E5"> theorem saying</font><font color="#CCCCCC"> oh</font>

85
00:03:05,140 --> 00:03:10,238
your function your library is correct

86
00:03:07,989 --> 00:03:11,890
<font color="#E5E5E5">and free of bugs</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> different</font>

87
00:03:10,239 --> 00:03:13,450
different<font color="#CCCCCC"> types of verification the one</font>

88
00:03:11,890 --> 00:03:16,569
that will tell you<font color="#E5E5E5"> that your code is</font>

89
00:03:13,450 --> 00:03:18,518
equivalent to this code and you have the

90
00:03:16,569 --> 00:03:21,429
other type<font color="#CCCCCC"> which is about proving</font>

91
00:03:18,519 --> 00:03:23,730
security properties for example<font color="#E5E5E5"> recently</font>

92
00:03:21,430 --> 00:03:25,840
<font color="#E5E5E5">it was proved</font><font color="#CCCCCC"> that we're at VPN</font>

93
00:03:23,730 --> 00:03:29,138
<font color="#E5E5E5">satisfied it forward security property</font>

94
00:03:25,840 --> 00:03:31,389
<font color="#E5E5E5">just by looking at the</font><font color="#CCCCCC"> graph code</font><font color="#E5E5E5"> okay</font>

95
00:03:29,139 --> 00:03:33,010
<font color="#E5E5E5">now what we want to do is to maximize</font>

96
00:03:31,389 --> 00:03:36,040
efficiency in terms of you<font color="#CCCCCC"> know like</font>

97
00:03:33,010 --> 00:03:38,138
<font color="#CCCCCC">parity efficiency you might be</font><font color="#E5E5E5"> very</font>

98
00:03:36,040 --> 00:03:40,090
powerful<font color="#CCCCCC"> like formal verification but it</font>

99
00:03:38,139 --> 00:03:42,760
takes a lot<font color="#CCCCCC"> of efforts is very expensive</font>

100
00:03:40,090 --> 00:03:44,680
<font color="#CCCCCC">in degree excuse my people to</font><font color="#E5E5E5"> get it</font>

101
00:03:42,760 --> 00:03:46,540
working<font color="#E5E5E5"> the test vectors</font>

102
00:03:44,680 --> 00:03:49,030
anyone<font color="#E5E5E5"> can do it but as I said it's</font>

103
00:03:46,540 --> 00:03:51,099
pretty damn it will have race mode code

104
00:03:49,030 --> 00:03:52,930
coverage<font color="#E5E5E5"> so you want to like be in the</font>

105
00:03:51,099 --> 00:03:55,798
middle<font color="#E5E5E5"> maybe on the top of the green</font>

106
00:03:52,930 --> 00:03:58,930
<font color="#CCCCCC">rectangle</font><font color="#E5E5E5"> where we put the</font><font color="#CCCCCC"> question mark</font>

107
00:03:55,799 --> 00:04:01,000
so our<font color="#CCCCCC"> project was to create something</font>

108
00:03:58,930 --> 00:04:03,370
that<font color="#E5E5E5"> sits between the</font><font color="#CCCCCC"> dam pressing the</font>

109
00:04:01,000 --> 00:04:07,690
dam techniques and the smartest ones and

110
00:04:03,370 --> 00:04:08,950
that is as easy to<font color="#CCCCCC"> run as possible</font><font color="#E5E5E5"> so I</font>

111
00:04:07,690 --> 00:04:10,329
came up<font color="#CCCCCC"> with this name differential</font>

112
00:04:08,950 --> 00:04:12,548
fuzzing a year ago because<font color="#E5E5E5"> it sounded</font>

113
00:04:10,329 --> 00:04:14,859
cool<font color="#E5E5E5"> if fuzzing but differential you</font>

114
00:04:12,549 --> 00:04:17,108
know<font color="#CCCCCC"> it's actually pretty rare stupid</font>

115
00:04:14,859 --> 00:04:19,900
it's like<font color="#E5E5E5"> just comparing two</font><font color="#CCCCCC"> different</font>

116
00:04:17,108 --> 00:04:22,930
<font color="#E5E5E5">implementations</font><font color="#CCCCCC"> of the same</font><font color="#E5E5E5"> stuff but</font><font color="#CCCCCC"> in</font>

117
00:04:19,899 --> 00:04:24,460
a not so stupid<font color="#CCCCCC"> way</font><font color="#E5E5E5"> it's been done</font>

118
00:04:22,930 --> 00:04:25,960
<font color="#E5E5E5">before by a bunch of people you have two</font>

119
00:04:24,460 --> 00:04:27,789
examples<font color="#E5E5E5"> there</font>

120
00:04:25,960 --> 00:04:30,489
more concretely what what we're going to

121
00:04:27,790 --> 00:04:32,710
<font color="#E5E5E5">do if you test the hash function or PRNG</font>

122
00:04:30,490 --> 00:04:35,530
<font color="#E5E5E5">it's something that is deterministic so</font>

123
00:04:32,710 --> 00:04:37,330
same input twice<font color="#CCCCCC"> am I put twice so let's</font>

124
00:04:35,530 --> 00:04:39,520
say you have two implementations<font color="#CCCCCC"> I don't</font>

125
00:04:37,330 --> 00:04:41,289
know<font color="#CCCCCC"> shastri of the</font><font color="#E5E5E5"> Chaucerian function</font>

126
00:04:39,520 --> 00:04:42,400
you have<font color="#E5E5E5"> the information you want you</font>

127
00:04:41,289 --> 00:04:44,259
<font color="#E5E5E5">have</font><font color="#CCCCCC"> the pleasant</font><font color="#E5E5E5"> b2</font>

128
00:04:42,400 --> 00:04:46,539
so the<font color="#E5E5E5"> implemented in our quiver</font><font color="#CCCCCC"> I'll</font>

129
00:04:44,259 --> 00:04:49,539
give a equivalent<font color="#CCCCCC"> sorry for any input</font>

130
00:04:46,539 --> 00:04:50,770
<font color="#E5E5E5">you</font><font color="#CCCCCC"> should get twice</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> output so</font>

131
00:04:49,539 --> 00:04:53,050
that's<font color="#E5E5E5"> basically what we're going</font><font color="#CCCCCC"> to do</font>

132
00:04:50,770 --> 00:04:55,060
we going to choose input<font color="#E5E5E5"> values</font><font color="#CCCCCC"> X</font>

133
00:04:53,050 --> 00:04:56,440
different values and<font color="#E5E5E5"> maximize the code</font>

134
00:04:55,060 --> 00:04:58,180
<font color="#E5E5E5">coverage because we know that we're</font>

135
00:04:56,440 --> 00:05:00,370
<font color="#CCCCCC">testing</font><font color="#E5E5E5"> a hash</font><font color="#CCCCCC"> function</font><font color="#E5E5E5"> so we know that</font>

136
00:04:58,180 --> 00:05:03,190
<font color="#E5E5E5">we want to send values a different size</font>

137
00:05:00,370 --> 00:05:04,330
or<font color="#E5E5E5"> different alignments and for each of</font>

138
00:05:03,190 --> 00:05:07,139
these values we'll make sure<font color="#E5E5E5"> that you</font>

139
00:05:04,330 --> 00:05:10,030
wanted me to give us the<font color="#E5E5E5"> same output</font>

140
00:05:07,139 --> 00:05:12,130
<font color="#CCCCCC">slightly less</font><font color="#E5E5E5"> trivial cases for public</font>

141
00:05:10,030 --> 00:05:14,979
<font color="#CCCCCC">encryption</font><font color="#E5E5E5"> so in this case the input</font>

142
00:05:12,130 --> 00:05:17,760
generation<font color="#E5E5E5"> was give you a message</font><font color="#CCCCCC"> X a</font>

143
00:05:14,979 --> 00:05:19,570
public key and<font color="#CCCCCC"> yesterday's</font><font color="#E5E5E5"> a private key</font>

144
00:05:17,760 --> 00:05:21,340
difference with<font color="#E5E5E5"> the previous case</font><font color="#CCCCCC"> that</font>

145
00:05:19,570 --> 00:05:24,190
here p1<font color="#CCCCCC"> and p2 don't do the same thing</font>

146
00:05:21,340 --> 00:05:26,590
they do the opposite functionality<font color="#E5E5E5"> P 1</font>

147
00:05:24,190 --> 00:05:29,889
will be encrypting X so you will<font color="#CCCCCC"> get P 1</font>

148
00:05:26,590 --> 00:05:32,049
<font color="#CCCCCC">of X and P 2 will be decrypting so if</font>

149
00:05:29,889 --> 00:05:36,190
<font color="#E5E5E5">everything goes well</font><font color="#CCCCCC"> after computing</font><font color="#E5E5E5"> P 2</font>

150
00:05:32,050 --> 00:05:39,820
on you wanna<font color="#E5E5E5"> X what you will you get X</font>

151
00:05:36,190 --> 00:05:40,979
again so if something wrong in if the

152
00:05:39,820 --> 00:05:44,110
two implementations<font color="#E5E5E5"> are not</font>

153
00:05:40,979 --> 00:05:46,090
<font color="#E5E5E5">interoperable then P 2 might reject some</font>

154
00:05:44,110 --> 00:05:49,990
inputs or P 2 might compute any

155
00:05:46,090 --> 00:05:53,320
incorrect plaintext okay so now speak

156
00:05:49,990 --> 00:05:55,659
about<font color="#CCCCCC"> on YouTube alright so we</font><font color="#E5E5E5"> decided</font>

157
00:05:53,320 --> 00:05:57,789
<font color="#CCCCCC">to actually implement</font><font color="#E5E5E5"> that approach of</font>

158
00:05:55,659 --> 00:06:00,449
<font color="#E5E5E5">testing so</font><font color="#CCCCCC"> we developed a tool called</font>

159
00:05:57,789 --> 00:06:05,560
CDF as an trip to differential<font color="#CCCCCC"> fessing</font>

160
00:06:00,449 --> 00:06:08,740
which we basically<font color="#E5E5E5"> do not only the</font>

161
00:06:05,560 --> 00:06:11,740
functional<font color="#E5E5E5"> test GP just described but</font>

162
00:06:08,740 --> 00:06:15,849
<font color="#CCCCCC">also do more stuff I'll come to that</font>

163
00:06:11,740 --> 00:06:17,710
<font color="#E5E5E5">later so city if CDF is coded in go no</font>

164
00:06:15,849 --> 00:06:20,740
it's not in rest<font color="#E5E5E5"> it's not in say</font><font color="#CCCCCC"> it's</font>

165
00:06:17,710 --> 00:06:23,948
and go because<font color="#CCCCCC"> yeah it was easy to code</font>

166
00:06:20,740 --> 00:06:25,960
<font color="#E5E5E5">easy to read and it really is easy to</font>

167
00:06:23,949 --> 00:06:28,930
support<font color="#E5E5E5"> concurrent execution of the test</font>

168
00:06:25,960 --> 00:06:33,520
<font color="#E5E5E5">at the same time if you</font><font color="#CCCCCC"> got 16 cores</font><font color="#E5E5E5"> why</font>

169
00:06:28,930 --> 00:06:38,130
wouldn't you<font color="#CCCCCC"> use</font><font color="#E5E5E5"> 16 at once so yeah the</font>

170
00:06:33,520 --> 00:06:46,389
<font color="#E5E5E5">CDF tool is actually made of</font><font color="#CCCCCC"> three ports</font>

171
00:06:38,130 --> 00:06:47,680
so the<font color="#E5E5E5"> executable CDF itself yeah now I</font>

172
00:06:46,389 --> 00:06:52,450
will come to that later

173
00:06:47,680 --> 00:06:53,409
so yeah why will you<font color="#E5E5E5"> use CF CDF will</font>

174
00:06:52,450 --> 00:06:55,180
test the correctness

175
00:06:53,409 --> 00:06:56,830
so the functionality<font color="#CCCCCC"> of your</font>

176
00:06:55,180 --> 00:06:58,300
implementation<font color="#CCCCCC"> through differential</font>

177
00:06:56,830 --> 00:07:00,310
<font color="#CCCCCC">filling but it will also</font><font color="#E5E5E5"> test the</font>

178
00:06:58,300 --> 00:07:03,159
<font color="#CCCCCC">security of</font><font color="#E5E5E5"> the implementation against</font>

179
00:07:00,310 --> 00:07:06,340
known edge cases because CDF will be

180
00:07:03,159 --> 00:07:09,460
aware of<font color="#E5E5E5"> the test algorithm so if you</font>

181
00:07:06,340 --> 00:07:12,969
are testing ECDSA<font color="#CCCCCC"> or errors say it has</font>

182
00:07:09,460 --> 00:07:15,370
special unit<font color="#E5E5E5"> tests for those so it's not</font>

183
00:07:12,969 --> 00:07:20,529
<font color="#CCCCCC">just about them fizzing it's also about</font>

184
00:07:15,370 --> 00:07:23,500
hedge cases and<font color="#CCCCCC"> strangle</font><font color="#E5E5E5"> behaviors so we</font>

185
00:07:20,529 --> 00:07:27,090
will check<font color="#E5E5E5"> weak parameters and stuff</font>

186
00:07:23,500 --> 00:07:29,620
<font color="#E5E5E5">like that so CDF is really not about</font>

187
00:07:27,090 --> 00:07:32,138
replacing formal verification it's

188
00:07:29,620 --> 00:07:36,039
really about going<font color="#E5E5E5"> further than</font><font color="#CCCCCC"> just</font>

189
00:07:32,139 --> 00:07:38,469
<font color="#E5E5E5">plain text vector test vectors so you</font>

190
00:07:36,039 --> 00:07:40,300
heard about which proof I guess it's

191
00:07:38,469 --> 00:07:44,159
<font color="#E5E5E5">another project which is</font><font color="#CCCCCC"> about unit</font>

192
00:07:40,300 --> 00:07:47,469
testing<font color="#E5E5E5"> they've got really a nice lot</font>

193
00:07:44,159 --> 00:07:50,320
they<font color="#CCCCCC"> really got a nice set of</font><font color="#E5E5E5"> unit tests</font>

194
00:07:47,469 --> 00:07:53,860
<font color="#E5E5E5">and it's a totally</font><font color="#CCCCCC"> complimentary</font>

195
00:07:50,320 --> 00:07:58,990
approach<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we could</font><font color="#E5E5E5"> reduce your unit</font>

196
00:07:53,860 --> 00:08:00,909
tests in<font color="#E5E5E5"> our tool to do the tests</font><font color="#CCCCCC"> and on</font>

197
00:07:58,990 --> 00:08:02,529
both<font color="#E5E5E5"> tests in the</font><font color="#CCCCCC"> implementation that</font>

198
00:08:00,909 --> 00:08:04,000
they don't do anything differential

199
00:08:02,529 --> 00:08:05,949
there are not about<font color="#E5E5E5"> comparing</font>

200
00:08:04,000 --> 00:08:07,990
implementation there are<font color="#CCCCCC"> really about</font>

201
00:08:05,949 --> 00:08:10,659
<font color="#E5E5E5">testing just one and</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> currently</font>

202
00:08:07,990 --> 00:08:14,169
only support Java<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> not our</font><font color="#E5E5E5"> case</font>

203
00:08:10,659 --> 00:08:16,659
<font color="#E5E5E5">but yeah so all that it works so you</font>

204
00:08:14,169 --> 00:08:18,580
want<font color="#E5E5E5"> to test easier this ECDSA you've</font>

205
00:08:16,659 --> 00:08:22,089
got<font color="#E5E5E5"> plenty of libraries implementing it</font>

206
00:08:18,580 --> 00:08:24,580
but they all got their very own API so

207
00:08:22,089 --> 00:08:28,529
you are kind<font color="#CCCCCC"> of you</font><font color="#E5E5E5"> know you got a</font>

208
00:08:24,580 --> 00:08:33,400
problem sir so our approach<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> design</font>

209
00:08:28,529 --> 00:08:36,390
interfaces<font color="#E5E5E5"> so CDF will interact with</font>

210
00:08:33,400 --> 00:08:39,549
<font color="#CCCCCC">your library through</font>

211
00:08:36,390 --> 00:08:42,218
interface program which will translate

212
00:08:39,549 --> 00:08:45,130
your API into ours

213
00:08:42,219 --> 00:08:46,860
so our API is pretty<font color="#CCCCCC"> damn it's just</font>

214
00:08:45,130 --> 00:08:51,730
playing

215
00:08:46,860 --> 00:08:55,660
<font color="#CCCCCC">come on line arguments so</font><font color="#E5E5E5"> CDF can do as</font>

216
00:08:51,730 --> 00:08:57,940
<font color="#E5E5E5">his</font><font color="#CCCCCC"> coal on your proxy program and call</font>

217
00:08:55,660 --> 00:09:00,730
your library<font color="#E5E5E5"> afterwards so for example</font>

218
00:08:57,940 --> 00:09:03,010
for<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> just say you've got you want to</font>

219
00:09:00,730 --> 00:09:05,980
sign a message<font color="#E5E5E5"> so you will</font><font color="#CCCCCC"> simply</font>

220
00:09:03,010 --> 00:09:08,800
provide<font color="#CCCCCC"> the</font><font color="#E5E5E5"> public key coordinate X on Y</font>

221
00:09:05,980 --> 00:09:11,410
<font color="#E5E5E5">the private key coordinate D and the</font>

222
00:09:08,800 --> 00:09:14,920
message and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> you get the</font><font color="#E5E5E5"> output</font>

223
00:09:11,410 --> 00:09:17,649
which is<font color="#E5E5E5"> R and s so why do we</font><font color="#CCCCCC"> need the</font>

224
00:09:14,920 --> 00:09:19,750
public key<font color="#E5E5E5"> - well simply because</font><font color="#CCCCCC"> of</font>

225
00:09:17,649 --> 00:09:24,399
compatibility<font color="#E5E5E5"> reason with certain</font>

226
00:09:19,750 --> 00:09:27,300
<font color="#CCCCCC">libraries</font><font color="#E5E5E5"> so yeah that's really dumb we</font>

227
00:09:24,399 --> 00:09:29,649
plan<font color="#CCCCCC"> to use</font><font color="#E5E5E5"> a FL like file based</font>

228
00:09:27,300 --> 00:09:32,829
interface later but it's not the case

229
00:09:29,649 --> 00:09:36,990
<font color="#E5E5E5">yet so the interfaces are really</font><font color="#CCCCCC"> generic</font>

230
00:09:32,829 --> 00:09:39,459
<font color="#E5E5E5">and</font><font color="#CCCCCC"> it's really man means</font><font color="#E5E5E5"> to use</font>

231
00:09:36,990 --> 00:09:42,100
everything<font color="#E5E5E5"> in black box so we won't be</font>

232
00:09:39,459 --> 00:09:47,018
<font color="#E5E5E5">instrumenting anything so you can bring</font>

233
00:09:42,100 --> 00:09:49,360
us a script<font color="#CCCCCC"> C executable anything you</font>

234
00:09:47,019 --> 00:09:55,750
want<font color="#E5E5E5"> and we can test it directly if it's</font>

235
00:09:49,360 --> 00:10:00,520
exact<font color="#E5E5E5"> table so yeah all those it works</font>

236
00:09:55,750 --> 00:10:02,890
<font color="#E5E5E5">CDF is made to actually use the proxy</font>

237
00:10:00,520 --> 00:10:05,170
interface which are in the middle<font color="#E5E5E5"> there</font>

238
00:10:02,890 --> 00:10:08,199
so<font color="#CCCCCC"> CDF will</font><font color="#E5E5E5"> be calling the proxy</font>

239
00:10:05,170 --> 00:10:11,770
interface which in turn must be calling

240
00:10:08,200 --> 00:10:15,310
the<font color="#E5E5E5"> libraries tested so it's really done</font>

241
00:10:11,770 --> 00:10:17,439
but it works<font color="#E5E5E5"> on</font><font color="#CCCCCC"> it's really well easy to</font>

242
00:10:15,310 --> 00:10:19,300
I want to<font color="#E5E5E5"> say here is</font><font color="#CCCCCC"> that CDF is</font><font color="#E5E5E5"> the</font>

243
00:10:17,440 --> 00:10:21,430
tough stuff we did<font color="#E5E5E5"> yeah exactly</font><font color="#CCCCCC"> the</font>

244
00:10:19,300 --> 00:10:23,649
stuff<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> bottom is what some people</font>

245
00:10:21,430 --> 00:10:25,239
did<font color="#E5E5E5"> yeah in the middle</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> where you</font>

246
00:10:23,649 --> 00:10:27,880
<font color="#E5E5E5">have to walk your - right yeah exactly</font>

247
00:10:25,240 --> 00:10:31,089
<font color="#CCCCCC">so what if you want to test</font><font color="#E5E5E5"> anything you</font>

248
00:10:27,880 --> 00:10:33,699
have to<font color="#E5E5E5"> create the interface proxy</font>

249
00:10:31,089 --> 00:10:36,699
programs in the middle it's pretty easy

250
00:10:33,699 --> 00:10:39,670
<font color="#CCCCCC">it's really easy</font><font color="#E5E5E5"> to do in</font><font color="#CCCCCC"> Python it's 35</font>

251
00:10:36,699 --> 00:10:43,140
line of code<font color="#E5E5E5"> to test cryptography at i/o</font>

252
00:10:39,670 --> 00:10:46,870
it's easy<font color="#E5E5E5"> yes enter</font><font color="#CCCCCC"> in implementation</font><font color="#E5E5E5"> so</font>

253
00:10:43,140 --> 00:10:49,240
fairly quick<font color="#CCCCCC"> open SSL you've got to</font>

254
00:10:46,870 --> 00:10:55,170
clean the pointers<font color="#E5E5E5"> there is a bit more</font>

255
00:10:49,240 --> 00:10:58,280
work<font color="#E5E5E5"> but still it's not too much work</font><font color="#CCCCCC"> so</font>

256
00:10:55,170 --> 00:11:01,280
<font color="#CCCCCC">give you</font><font color="#E5E5E5"> specific tests</font>

257
00:10:58,280 --> 00:11:04,490
which is very very<font color="#E5E5E5"> simple stuff again so</font>

258
00:11:01,280 --> 00:11:06,890
<font color="#CCCCCC">ECDSA</font><font color="#E5E5E5"> so it</font><font color="#CCCCCC"> ticker</font><font color="#E5E5E5"> dangers like said</font>

259
00:11:04,490 --> 00:11:09,380
<font color="#CCCCCC">before the first program from let's say</font>

260
00:11:06,890 --> 00:11:11,900
<font color="#E5E5E5">a</font><font color="#CCCCCC"> pencil will issue signature and a</font>

261
00:11:09,380 --> 00:11:13,640
second one<font color="#E5E5E5"> let's say from cryptography</font>

262
00:11:11,900 --> 00:11:17,030
that<font color="#CCCCCC"> io</font><font color="#E5E5E5"> will verify the signature</font>

263
00:11:13,640 --> 00:11:20,230
created by open<font color="#CCCCCC"> ssl so you can test a</font>

264
00:11:17,030 --> 00:11:22,670
few things<font color="#E5E5E5"> you can test for example</font>

265
00:11:20,230 --> 00:11:25,880
<font color="#CCCCCC">squid bullet point here cuz there's two</font>

266
00:11:22,670 --> 00:11:28,040
kinds<font color="#CCCCCC"> of SDS AP is the one that receives</font>

267
00:11:25,880 --> 00:11:30,740
a<font color="#CCCCCC"> message that hash is the message for</font>

268
00:11:28,040 --> 00:11:32,839
<font color="#E5E5E5">you and that signs the hash value the</font>

269
00:11:30,740 --> 00:11:35,450
other<font color="#E5E5E5"> kind actually receives a hash and</font>

270
00:11:32,840 --> 00:11:38,390
signs<font color="#E5E5E5"> the hash directly now what happens</font>

271
00:11:35,450 --> 00:11:41,210
if<font color="#E5E5E5"> you send a hash value that is bigger</font>

272
00:11:38,390 --> 00:11:43,430
or<font color="#E5E5E5"> shorter</font><font color="#CCCCCC"> than the expected</font><font color="#E5E5E5"> value some</font>

273
00:11:41,210 --> 00:11:45,950
<font color="#CCCCCC">api some libraries will complain with</font>

274
00:11:43,430 --> 00:11:47,930
<font color="#CCCCCC">the UI that's</font><font color="#E5E5E5"> not the right size other</font>

275
00:11:45,950 --> 00:11:50,900
ones will just<font color="#E5E5E5"> send the ignore this and</font>

276
00:11:47,930 --> 00:11:52,849
<font color="#E5E5E5">do whatever they can so when you send</font>

277
00:11:50,900 --> 00:11:56,390
<font color="#E5E5E5">you would send</font><font color="#CCCCCC"> the longer ash a message</font>

278
00:11:52,850 --> 00:11:57,680
and it will<font color="#E5E5E5"> just strip it till the</font><font color="#CCCCCC"> less</font>

279
00:11:56,390 --> 00:12:00,890
<font color="#CCCCCC">decided thing that they need</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> they</font>

280
00:11:57,680 --> 00:12:03,500
will ignore<font color="#E5E5E5"> some bytes of the</font><font color="#CCCCCC"> message to</font>

281
00:12:00,890 --> 00:12:06,800
<font color="#CCCCCC">be silent you also want to test</font><font color="#E5E5E5"> the</font>

282
00:12:03,500 --> 00:12:09,620
degenerate cases the obvious invalid not

283
00:12:06,800 --> 00:12:11,270
mathematically invalid but<font color="#CCCCCC"> in secure</font>

284
00:12:09,620 --> 00:12:13,940
parameters for example<font color="#E5E5E5"> was the if the</font>

285
00:12:11,270 --> 00:12:17,660
public key<font color="#E5E5E5"> is the point to infinity so</font>

286
00:12:13,940 --> 00:12:19,160
<font color="#E5E5E5">is 0 0 what if the private key is 0 what</font>

287
00:12:17,660 --> 00:12:22,250
<font color="#CCCCCC">is you why don't you send a hash value</font>

288
00:12:19,160 --> 00:12:24,170
equal to<font color="#E5E5E5"> 0 so as you can</font><font color="#CCCCCC"> guess a lot</font><font color="#E5E5E5"> of</font>

289
00:12:22,250 --> 00:12:24,530
<font color="#E5E5E5">things can go wrong in</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> case so some</font>

290
00:12:24,170 --> 00:12:26,540
<font color="#CCCCCC">applet</font>

291
00:12:24,530 --> 00:12:30,709
some implementations reject is kind<font color="#E5E5E5"> of</font>

292
00:12:26,540 --> 00:12:32,300
parameters<font color="#CCCCCC"> but many accept them just can</font>

293
00:12:30,710 --> 00:12:34,520
you show example you don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to look</font>

294
00:12:32,300 --> 00:12:37,370
<font color="#E5E5E5">at the code but that's</font><font color="#CCCCCC"> an example of</font>

295
00:12:34,520 --> 00:12:39,290
<font color="#E5E5E5">test that</font><font color="#CCCCCC"> we do on</font><font color="#E5E5E5"> ECDSA to check that</font>

296
00:12:37,370 --> 00:12:42,820
it does not run<font color="#E5E5E5"> into an infinite loop</font>

297
00:12:39,290 --> 00:12:45,170
<font color="#E5E5E5">when you send seven kinds of parameters</font>

298
00:12:42,820 --> 00:12:47,630
<font color="#CCCCCC">now let's</font><font color="#E5E5E5"> switch</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> encryption</font><font color="#CCCCCC"> RS</font>

299
00:12:45,170 --> 00:12:49,189
encryption specificity so like I

300
00:12:47,630 --> 00:12:51,320
mentioned<font color="#E5E5E5"> the first program will encrypt</font>

301
00:12:49,190 --> 00:12:53,300
the second<font color="#E5E5E5"> one will decrypt and you can</font>

302
00:12:51,320 --> 00:12:55,490
test<font color="#E5E5E5"> different things there again you</font>

303
00:12:53,300 --> 00:12:57,079
can test for<font color="#E5E5E5"> example what kind</font><font color="#CCCCCC"> of</font>

304
00:12:55,490 --> 00:12:59,810
exponents are supported what kind of

305
00:12:57,080 --> 00:13:01,820
<font color="#E5E5E5">modulus not supported let's look at like</font>

306
00:12:59,810 --> 00:13:06,349
<font color="#E5E5E5">open</font><font color="#CCCCCC"> SSL for instance</font><font color="#E5E5E5"> so you know that a</font>

307
00:13:01,820 --> 00:13:09,800
secure module size<font color="#E5E5E5"> for I say is 2048 but</font>

308
00:13:06,350 --> 00:13:12,110
if you ask open SSL to use RSA with 33

309
00:13:09,800 --> 00:13:14,990
bits<font color="#E5E5E5"> then it will accept it</font><font color="#CCCCCC"> and generate</font>

310
00:13:12,110 --> 00:13:17,930
<font color="#E5E5E5">to distribute</font><font color="#CCCCCC"> what it</font><font color="#E5E5E5"> was for legacy</font>

311
00:13:14,990 --> 00:13:20,420
reasons<font color="#CCCCCC"> promptly in the hours</font><font color="#E5E5E5"> I use a</font>

312
00:13:17,930 --> 00:13:23,149
public<font color="#E5E5E5"> exponent</font><font color="#CCCCCC"> usually you noted II and</font>

313
00:13:20,420 --> 00:13:26,599
a private exponent to decrypt usually<font color="#CCCCCC"> D</font>

314
00:13:23,149 --> 00:13:28,910
so this<font color="#CCCCCC"> should be largely</font><font color="#E5E5E5"> huge look like</font>

315
00:13:26,600 --> 00:13:30,920
a<font color="#E5E5E5"> random value now what happens if you</font>

316
00:13:28,910 --> 00:13:33,410
send<font color="#CCCCCC"> a very small D or</font><font color="#E5E5E5"> D equal to</font><font color="#CCCCCC"> 1 or 0</font>

317
00:13:30,920 --> 00:13:37,219
<font color="#CCCCCC">- that</font><font color="#E5E5E5"> should not happen</font><font color="#CCCCCC"> so is your</font>

318
00:13:33,410 --> 00:13:39,709
library testing<font color="#CCCCCC"> this</font><font color="#E5E5E5"> the opposite</font><font color="#CCCCCC"> it</font>

319
00:13:37,220 --> 00:13:41,329
should be<font color="#E5E5E5"> small</font><font color="#CCCCCC"> usually but for some</font>

320
00:13:39,709 --> 00:13:43,579
reason you<font color="#E5E5E5"> might</font><font color="#CCCCCC"> want to use a theory</font>

321
00:13:41,329 --> 00:13:47,079
now many implementations<font color="#E5E5E5"> only allow you</font>

322
00:13:43,579 --> 00:13:51,469
to use a small e sometimes it's fixed<font color="#CCCCCC"> to</font>

323
00:13:47,079 --> 00:13:53,329
<font color="#E5E5E5">16,000 whatever so that's kind of stuff</font>

324
00:13:51,470 --> 00:13:54,470
that we're testing and we also detect

325
00:13:53,329 --> 00:13:54,829
timing leaks but we'll<font color="#E5E5E5"> talk about this</font>

326
00:13:54,470 --> 00:13:59,120
<font color="#E5E5E5">later</font>

327
00:13:54,829 --> 00:14:00,890
<font color="#CCCCCC">how did we win this we</font><font color="#E5E5E5"> don't okay we can</font>

328
00:13:59,120 --> 00:14:02,690
detect<font color="#E5E5E5"> timing legs up to a nanosecond</font>

329
00:14:00,890 --> 00:14:05,149
level<font color="#E5E5E5"> but sometimes what we find is that</font>

330
00:14:02,690 --> 00:14:06,980
<font color="#E5E5E5">oh yes there was diamond lake but when</font>

331
00:14:05,149 --> 00:14:09,170
we try to<font color="#E5E5E5"> explain</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> it's impossible the</font>

332
00:14:06,980 --> 00:14:14,450
leak was too too hard to detect<font color="#E5E5E5"> too hard</font>

333
00:14:09,170 --> 00:14:16,250
<font color="#E5E5E5">to exploit okay so that's</font><font color="#CCCCCC"> yeah okay</font><font color="#E5E5E5"> so</font>

334
00:14:14,450 --> 00:14:19,699
we<font color="#E5E5E5"> do not reinvent the wheel we took</font>

335
00:14:16,250 --> 00:14:22,220
this nice<font color="#E5E5E5"> substitute created by</font><font color="#CCCCCC"> Oscar</font>

336
00:14:19,699 --> 00:14:24,079
<font color="#E5E5E5">happen and other people we just ported</font>

337
00:14:22,220 --> 00:14:27,589
it from C<font color="#CCCCCC"> to go to integrate it into</font>

338
00:14:24,079 --> 00:14:30,739
into CDF<font color="#E5E5E5"> okay then what kind of so did</font>

339
00:14:27,589 --> 00:14:32,899
we find<font color="#CCCCCC"> all right so we we try to test a</font>

340
00:14:30,740 --> 00:14:36,170
lot of<font color="#CCCCCC"> well-known Libra is like your</font>

341
00:14:32,899 --> 00:14:39,260
crypto open SSL and TLS<font color="#CCCCCC"> typically we</font>

342
00:14:36,170 --> 00:14:39,979
tried it again<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> DSA it's just</font>

343
00:14:39,260 --> 00:14:44,600
<font color="#E5E5E5">sayin</font>

344
00:14:39,980 --> 00:14:47,660
<font color="#CCCCCC">OAP</font><font color="#E5E5E5"> irritated or</font><font color="#CCCCCC"> AP encryption and what</font>

345
00:14:44,600 --> 00:14:50,990
we found is that often they don't<font color="#E5E5E5"> do</font>

346
00:14:47,660 --> 00:14:54,319
<font color="#CCCCCC">everything as they should or maybe they</font>

347
00:14:50,990 --> 00:14:56,089
fall<font color="#CCCCCC"> into some traps</font><font color="#E5E5E5"> accepted for</font><font color="#CCCCCC"> to</font>

348
00:14:54,320 --> 00:14:59,060
<font color="#CCCCCC">poppy which was quite</font><font color="#E5E5E5"> impressive but</font>

349
00:14:56,089 --> 00:15:01,640
<font color="#E5E5E5">he's known to</font><font color="#CCCCCC"> be a quite paranoid about</font>

350
00:14:59,060 --> 00:15:03,949
security so<font color="#E5E5E5"> it's good thing that we</font>

351
00:15:01,640 --> 00:15:05,120
<font color="#E5E5E5">couldn't find</font><font color="#CCCCCC"> anything there I</font><font color="#E5E5E5"> think</font>

352
00:15:03,949 --> 00:15:09,410
<font color="#E5E5E5">they might wonder why did we choose this</font>

353
00:15:05,120 --> 00:15:12,199
<font color="#CCCCCC">five libraries and not other ones yes so</font>

354
00:15:09,410 --> 00:15:15,199
we choose them<font color="#CCCCCC"> because it's well known</font>

355
00:15:12,199 --> 00:15:18,380
<font color="#CCCCCC">liberties which are basically secular</font>

356
00:15:15,199 --> 00:15:20,329
and which are really<font color="#E5E5E5"> yes you died by a</font>

357
00:15:18,380 --> 00:15:23,300
lot of<font color="#CCCCCC"> people we didn't we didn't go for</font>

358
00:15:20,329 --> 00:15:25,279
<font color="#CCCCCC">the low hanging fruits we try to do like</font>

359
00:15:23,300 --> 00:15:25,760
deal the most popular<font color="#CCCCCC"> the most</font><font color="#E5E5E5"> critical</font>

360
00:15:25,279 --> 00:15:28,280
piece<font color="#E5E5E5"> of</font>

361
00:15:25,760 --> 00:15:30,170
<font color="#CCCCCC">we're and these are maybe some of the</font>

362
00:15:28,280 --> 00:15:32,060
most<font color="#CCCCCC"> secure libraries you can</font><font color="#E5E5E5"> find me</font>

363
00:15:30,170 --> 00:15:34,130
maybe should in your<font color="#E5E5E5"> PI crypto because</font>

364
00:15:32,060 --> 00:15:36,650
it's<font color="#CCCCCC"> obsolete and not supported</font><font color="#E5E5E5"> yeah</font>

365
00:15:34,130 --> 00:15:39,410
what we written<font color="#E5E5E5"> there's a number of</font>

366
00:15:36,650 --> 00:15:42,470
<font color="#E5E5E5">issues it's actually really issue it's</font>

367
00:15:39,410 --> 00:15:44,780
not security<font color="#E5E5E5"> issue it's more</font><font color="#CCCCCC"> like small</font>

368
00:15:42,470 --> 00:15:48,020
problems I could correct so for example

369
00:15:44,780 --> 00:15:52,280
for DSA<font color="#E5E5E5"> we found that many libraries</font>

370
00:15:48,020 --> 00:15:54,920
were actually accepting invalid<font color="#E5E5E5"> weak</font>

371
00:15:52,280 --> 00:15:57,530
parameters or even parameters which

372
00:15:54,920 --> 00:16:01,880
could lead to Daniel of services which

373
00:15:57,530 --> 00:16:03,589
are quite bad<font color="#E5E5E5"> I mean and other inputs</font>

374
00:16:01,880 --> 00:16:06,560
could also lead to always valid

375
00:16:03,590 --> 00:16:08,420
signatures which will discard the hash

376
00:16:06,560 --> 00:16:10,130
value<font color="#CCCCCC"> of the message through</font><font color="#E5E5E5"> zero</font>

377
00:16:08,420 --> 00:16:13,670
multiplication<font color="#E5E5E5"> for you</font><font color="#CCCCCC"> so it's really</font>

378
00:16:10,130 --> 00:16:17,060
bad the the<font color="#E5E5E5"> library should should assume</font>

379
00:16:13,670 --> 00:16:20,030
an error or something<font color="#E5E5E5"> there so if you</font>

380
00:16:17,060 --> 00:16:22,160
look at<font color="#E5E5E5"> this standard the standard</font>

381
00:16:20,030 --> 00:16:25,250
really really saying<font color="#E5E5E5"> okay you should</font>

382
00:16:22,160 --> 00:16:29,300
gain assurance<font color="#CCCCCC"> of the domain parameter</font>

383
00:16:25,250 --> 00:16:32,060
<font color="#CCCCCC">identity pre rup to signing and when we</font>

384
00:16:29,300 --> 00:16:34,520
checked if libraries were doing it we

385
00:16:32,060 --> 00:16:37,819
found<font color="#E5E5E5"> that most of them</font><font color="#CCCCCC"> wouldn't so for</font>

386
00:16:34,520 --> 00:16:41,030
example<font color="#E5E5E5"> if you take the DSA signing</font>

387
00:16:37,820 --> 00:16:44,810
<font color="#CCCCCC">process</font><font color="#E5E5E5"> you generate a random</font><font color="#CCCCCC"> k you</font>

388
00:16:41,030 --> 00:16:48,140
compute the generator G<font color="#CCCCCC"> to Z K mod p m--</font>

389
00:16:44,810 --> 00:16:50,270
<font color="#CCCCCC">at Q and if that value</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> then you</font>

390
00:16:48,140 --> 00:16:53,810
just<font color="#E5E5E5"> take another</font><font color="#CCCCCC"> random</font><font color="#E5E5E5"> K and hopefully</font>

391
00:16:50,270 --> 00:16:56,030
it shouldn't get you shouldn't get 0

392
00:16:53,810 --> 00:16:57,979
again<font color="#CCCCCC"> if you do you're really unlucky</font><font color="#E5E5E5"> on</font>

393
00:16:56,030 --> 00:16:59,959
on the<font color="#E5E5E5"> third time it's a probability</font><font color="#CCCCCC"> of</font>

394
00:16:57,980 --> 00:17:02,690
<font color="#E5E5E5">getting zero again it's so low that it's</font>

395
00:16:59,960 --> 00:17:05,660
not possible<font color="#CCCCCC"> but some liberals are not</font>

396
00:17:02,690 --> 00:17:09,199
<font color="#E5E5E5">checking whether G is zero or not but if</font>

397
00:17:05,660 --> 00:17:11,600
G<font color="#CCCCCC"> is</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> zero two two zero two</font><font color="#E5E5E5"> whatever</font>

398
00:17:09,199 --> 00:17:14,900
will give you a zero value and they<font color="#CCCCCC"> are</font>

399
00:17:11,599 --> 00:17:17,569
falling<font color="#E5E5E5"> into infinite loops so if the</font>

400
00:17:14,900 --> 00:17:20,240
<font color="#CCCCCC">adversary is able to provide</font><font color="#E5E5E5"> the domain</font>

401
00:17:17,569 --> 00:17:22,579
parameters which is<font color="#CCCCCC"> a case which could</font>

402
00:17:20,240 --> 00:17:27,260
<font color="#E5E5E5">supposedly happen according</font><font color="#CCCCCC"> to the</font>

403
00:17:22,579 --> 00:17:29,300
standard then those are<font color="#E5E5E5"> quiet screwed so</font>

404
00:17:27,260 --> 00:17:32,650
yeah this is what<font color="#E5E5E5"> go did when we</font>

405
00:17:29,300 --> 00:17:36,030
<font color="#E5E5E5">reported the problem they had a for loop</font>

406
00:17:32,650 --> 00:17:39,390
doing the random<font color="#E5E5E5"> key generation</font><font color="#CCCCCC"> again</font>

407
00:17:36,030 --> 00:17:42,300
again and again<font color="#CCCCCC"> at first</font><font color="#E5E5E5"> and when we</font>

408
00:17:39,390 --> 00:17:44,700
reported it they<font color="#E5E5E5"> actually fixed it by</font>

409
00:17:42,300 --> 00:17:46,669
limiting the number of<font color="#E5E5E5"> Adam Adam so they</font>

410
00:17:44,700 --> 00:17:49,320
<font color="#CCCCCC">are not checking</font><font color="#E5E5E5"> the domain parameters</font>

411
00:17:46,670 --> 00:17:51,240
<font color="#E5E5E5">they are just checking</font><font color="#CCCCCC"> or not doing too</font>

412
00:17:49,320 --> 00:17:53,429
many loops because<font color="#E5E5E5"> that's the</font>

413
00:17:51,240 --> 00:17:58,260
<font color="#CCCCCC">probability of</font><font color="#E5E5E5"> doing easy it is so low</font>

414
00:17:53,430 --> 00:18:01,410
that<font color="#E5E5E5"> it should so remember that we</font><font color="#CCCCCC"> had</font>

415
00:17:58,260 --> 00:18:04,830
<font color="#E5E5E5">pretty much some nice lives</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> five</font>

416
00:18:01,410 --> 00:18:07,200
<font color="#CCCCCC">minutes okay</font><font color="#E5E5E5"> so one commonly you saw the</font>

417
00:18:04,830 --> 00:18:09,179
<font color="#CCCCCC">table before</font><font color="#E5E5E5"> and when you look at this</font>

418
00:18:07,200 --> 00:18:11,490
sorry<font color="#E5E5E5"> it</font><font color="#CCCCCC"> looks like go crypto really</font>

419
00:18:09,180 --> 00:18:15,060
sucks because there's four<font color="#E5E5E5"> five six</font><font color="#CCCCCC"> to</font>

420
00:18:11,490 --> 00:18:18,390
<font color="#E5E5E5">seven issues but this should</font><font color="#CCCCCC"> not be</font>

421
00:18:15,060 --> 00:18:21,570
<font color="#E5E5E5">understood like this</font><font color="#CCCCCC"> we found some like</font>

422
00:18:18,390 --> 00:18:23,970
non-compliance<font color="#CCCCCC"> and some issue there but</font>

423
00:18:21,570 --> 00:18:26,280
<font color="#E5E5E5">go crypto is really well</font><font color="#CCCCCC"> returned is</font>

424
00:18:23,970 --> 00:18:28,140
free<font color="#E5E5E5"> safe generally it just means they</font>

425
00:18:26,280 --> 00:18:29,670
had<font color="#E5E5E5"> their bit maybe less conservative or</font>

426
00:18:28,140 --> 00:18:32,400
less paranoid<font color="#E5E5E5"> than other libraries</font>

427
00:18:29,670 --> 00:18:35,070
crypto<font color="#CCCCCC"> PP</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> paranoid and they</font>

428
00:18:32,400 --> 00:18:36,930
try to do everything<font color="#E5E5E5"> right</font><font color="#CCCCCC"> but maybe on</font>

429
00:18:35,070 --> 00:18:38,939
other aspects they're not as good<font color="#E5E5E5"> as as</font>

430
00:18:36,930 --> 00:18:41,100
a go in terms<font color="#E5E5E5"> of clarity</font><font color="#CCCCCC"> in terms of</font>

431
00:18:38,940 --> 00:18:42,750
productivity it's really easy to<font color="#E5E5E5"> use the</font>

432
00:18:41,100 --> 00:18:44,879
crypto I encourage you<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use the to</font>

433
00:18:42,750 --> 00:18:47,760
<font color="#E5E5E5">look at the the code for</font><font color="#CCCCCC"> example of OAP</font>

434
00:18:44,880 --> 00:18:50,390
<font color="#E5E5E5">it's ready it's really</font><font color="#CCCCCC"> beautiful and</font>

435
00:18:47,760 --> 00:18:53,700
<font color="#E5E5E5">copper pipe is usually a message to you</font>

436
00:18:50,390 --> 00:18:55,380
it's<font color="#CCCCCC"> some plate</font><font color="#E5E5E5"> don't answer your</font>

437
00:18:53,700 --> 00:19:00,420
friends<font color="#E5E5E5"> or don't use go crypto because</font>

438
00:18:55,380 --> 00:19:04,440
and open it<font color="#E5E5E5"> cell is open SSL</font><font color="#CCCCCC"> okay we had</font>

439
00:19:00,420 --> 00:19:06,690
the conclusion<font color="#E5E5E5"> okay yeah so if you're</font>

440
00:19:04,440 --> 00:19:09,630
interested<font color="#E5E5E5"> in these two there's still</font>

441
00:19:06,690 --> 00:19:11,250
lot to do<font color="#CCCCCC"> for example we need some new</font>

442
00:19:09,630 --> 00:19:14,190
<font color="#E5E5E5">interfaces in other words we need</font><font color="#CCCCCC"> new</font>

443
00:19:11,250 --> 00:19:16,140
the<font color="#E5E5E5"> ability to test it more stuff like</font>

444
00:19:14,190 --> 00:19:19,740
we don't even<font color="#E5E5E5"> support a different</font><font color="#CCCCCC"> man or</font>

445
00:19:16,140 --> 00:19:22,320
<font color="#CCCCCC">CDH which researched so we want to do</font><font color="#E5E5E5"> at</font>

446
00:19:19,740 --> 00:19:25,500
this we want more<font color="#CCCCCC"> test go if you look at</font>

447
00:19:22,320 --> 00:19:28,470
Google's<font color="#CCCCCC"> two they do many more tests and</font>

448
00:19:25,500 --> 00:19:30,780
<font color="#E5E5E5">then we do so maybe we can try to find</font><font color="#CCCCCC"> a</font>

449
00:19:28,470 --> 00:19:34,260
<font color="#E5E5E5">way to include their tests into our</font>

450
00:19:30,780 --> 00:19:37,290
software<font color="#CCCCCC"> we just added</font><font color="#E5E5E5"> tested a handful</font>

451
00:19:34,260 --> 00:19:39,150
<font color="#CCCCCC">of libraries</font><font color="#E5E5E5"> some of them may be</font><font color="#CCCCCC"> more</font>

452
00:19:37,290 --> 00:19:41,310
secure ones maybe we want<font color="#E5E5E5"> to use up to</font>

453
00:19:39,150 --> 00:19:44,370
on other libraries which<font color="#E5E5E5"> might not be as</font>

454
00:19:41,310 --> 00:19:48,000
secure<font color="#CCCCCC"> as this</font><font color="#E5E5E5"> and finally we need to</font>

455
00:19:44,370 --> 00:19:49,500
<font color="#E5E5E5">test on software which it would be it's</font>

456
00:19:48,000 --> 00:19:52,080
<font color="#CCCCCC">quite embarrassing but we don't</font>

457
00:19:49,500 --> 00:19:54,600
<font color="#CCCCCC">test our testing software very well so</font>

458
00:19:52,080 --> 00:19:56,789
it was<font color="#E5E5E5"> like unit tests</font><font color="#CCCCCC"> yeah we got like</font>

459
00:19:54,600 --> 00:19:58,049
four key portions of coverage yeah

460
00:19:56,789 --> 00:20:01,649
<font color="#E5E5E5">that's ridiculous</font>

461
00:19:58,049 --> 00:20:03,210
okay so thank you time to take some

462
00:20:01,649 --> 00:20:06,840
<font color="#CCCCCC">questions and</font><font color="#E5E5E5"> small commercial talk I've</font>

463
00:20:03,210 --> 00:20:08,730
been writing a book<font color="#E5E5E5"> with</font><font color="#CCCCCC"> no stars</font><font color="#E5E5E5"> you</font>

464
00:20:06,840 --> 00:20:09,269
can order the<font color="#E5E5E5"> early access version if</font>

465
00:20:08,730 --> 00:20:22,980
you<font color="#E5E5E5"> like</font>

466
00:20:09,269 --> 00:20:24,330
thank you have we have time for there's

467
00:20:22,980 --> 00:20:33,090
like four<font color="#CCCCCC"> minutes or like one or two</font>

468
00:20:24,330 --> 00:20:36,240
<font color="#CCCCCC">questions anybody you again so as I told</font>

469
00:20:33,090 --> 00:20:36,750
you<font color="#E5E5E5"> that the other</font><font color="#CCCCCC"> conference</font><font color="#E5E5E5"> yeah this</font>

470
00:20:36,240 --> 00:20:40,259
is great

471
00:20:36,750 --> 00:20:44,490
I needed this yesterday but now<font color="#E5E5E5"> just</font>

472
00:20:40,259 --> 00:20:46,710
playing with<font color="#CCCCCC"> it I've got a problem</font><font color="#E5E5E5"> just</font>

473
00:20:44,490 --> 00:20:50,700
I mean really specific<font color="#CCCCCC"> question no one</font>

474
00:20:46,710 --> 00:20:52,500
else is<font color="#CCCCCC"> interested in the specification</font>

475
00:20:50,700 --> 00:20:54,750
of<font color="#E5E5E5"> the paths for the files on the</font>

476
00:20:52,500 --> 00:20:58,889
command<font color="#CCCCCC"> line argument I'm getting no</font>

477
00:20:54,750 --> 00:21:02,929
such file and<font color="#E5E5E5"> ah</font><font color="#CCCCCC"> but we</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> fixed this</font>

478
00:20:58,889 --> 00:21:06,209
<font color="#CCCCCC">oh yeah I emerge</font><font color="#E5E5E5"> a PR</font><font color="#CCCCCC"> ten minutes</font><font color="#E5E5E5"> ago</font>

479
00:21:02,929 --> 00:21:09,000
<font color="#CCCCCC">and so again we had a</font><font color="#E5E5E5"> problem because we</font>

480
00:21:06,210 --> 00:21:13,049
challenged the github<font color="#E5E5E5"> pass through the</font>

481
00:21:09,000 --> 00:21:15,529
library<font color="#CCCCCC"> egos or</font><font color="#E5E5E5"> bounties we still face</font>

482
00:21:13,049 --> 00:21:18,179
<font color="#E5E5E5">posting issue tracker and</font><font color="#CCCCCC"> we fixed it</font>

483
00:21:15,529 --> 00:21:23,549
thank you<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> time</font>

484
00:21:18,179 --> 00:21:26,190
I was just wondering in your tables

485
00:21:23,549 --> 00:21:27,360
<font color="#E5E5E5">there were a couple of na s in your</font>

486
00:21:26,190 --> 00:21:29,309
results<font color="#CCCCCC"> and I was</font><font color="#E5E5E5"> just wondering what</font>

487
00:21:27,360 --> 00:21:31,590
<font color="#CCCCCC">that was maybe</font><font color="#E5E5E5"> I dismiss the library is</font>

488
00:21:29,309 --> 00:21:35,690
<font color="#CCCCCC">just not implementing the algorithm so</font>

489
00:21:31,590 --> 00:21:41,129
<font color="#CCCCCC">we can test it I mean if you don't</font><font color="#E5E5E5"> know</font>

490
00:21:35,690 --> 00:21:45,210
last question<font color="#E5E5E5"> thanks for your words have</font>

491
00:21:41,129 --> 00:21:48,629
<font color="#CCCCCC">you tested by crypt atom or not</font><font color="#E5E5E5"> Paquito</font>

492
00:21:45,210 --> 00:21:56,549
<font color="#E5E5E5">I created on the maintain invention of</font>

493
00:21:48,629 --> 00:22:01,049
<font color="#E5E5E5">Bengal diode</font><font color="#CCCCCC"> to pick hip</font><font color="#E5E5E5"> to do this is</font>

494
00:21:56,549 --> 00:22:01,830
the official not the<font color="#E5E5E5"> fork of</font><font color="#CCCCCC"> pipe it</font>

495
00:22:01,049 --> 00:22:04,440
<font color="#CCCCCC">frito</font>

496
00:22:01,830 --> 00:22:06,389
<font color="#CCCCCC">ardan</font><font color="#E5E5E5"> so I was really eager to see the</font>

497
00:22:04,440 --> 00:22:08,429
result but I know that yeah<font color="#E5E5E5"> the crypto</font>

498
00:22:06,389 --> 00:22:11,639
is not<font color="#CCCCCC"> maintaining you know so it's</font><font color="#E5E5E5"> not</font>

499
00:22:08,429 --> 00:22:13,379
<font color="#CCCCCC">even a good try laughter yeah we could</font>

500
00:22:11,639 --> 00:22:20,908
try<font color="#E5E5E5"> it easily I guess if it's the same</font>

501
00:22:13,379 --> 00:22:23,178
<font color="#CCCCCC">API as</font><font color="#E5E5E5"> yeah less than a new track we</font>

502
00:22:20,909 --> 00:22:26,460
actually have a<font color="#E5E5E5"> couple more minutes</font>

503
00:22:23,179 --> 00:22:28,679
so yeah<font color="#CCCCCC"> just if you wonder it's really</font>

504
00:22:26,460 --> 00:22:30,679
easy to<font color="#E5E5E5"> add</font><font color="#CCCCCC"> new</font><font color="#E5E5E5"> interfaces for other</font>

505
00:22:28,679 --> 00:22:33,450
algorithm<font color="#E5E5E5"> it's really easy to add</font><font color="#CCCCCC"> new</font>

506
00:22:30,679 --> 00:22:35,960
examples<font color="#CCCCCC"> we were</font><font color="#E5E5E5"> providing all the</font>

507
00:22:33,450 --> 00:22:39,059
examples<font color="#CCCCCC"> programs so if you want to</font>

508
00:22:35,960 --> 00:22:43,080
compare<font color="#CCCCCC"> your own implementation</font><font color="#E5E5E5"> don't do</font>

509
00:22:39,059 --> 00:22:46,080
it<font color="#CCCCCC"> every say oep against open ssl then</font>

510
00:22:43,080 --> 00:22:48,090
you can just<font color="#E5E5E5"> take our open ssl example</font>

511
00:22:46,080 --> 00:22:50,309
<font color="#CCCCCC">I'm a busy at the</font><font color="#E5E5E5"> previous confront</font>

512
00:22:48,090 --> 00:22:52,408
someone<font color="#CCCCCC"> arrays do a different objection</font>

513
00:22:50,309 --> 00:22:54,269
he said oh yeah but<font color="#E5E5E5"> you know we're not</font>

514
00:22:52,409 --> 00:22:57,509
supposed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> write our own crypto should</font>

515
00:22:54,269 --> 00:22:59,399
use something<font color="#E5E5E5"> or available makes total</font>

516
00:22:57,509 --> 00:23:01,200
sense<font color="#E5E5E5"> but you might want</font><font color="#CCCCCC"> to use or</font><font color="#E5E5E5"> two</font>

517
00:22:59,399 --> 00:23:02,969
on libraries that you may want to use

518
00:23:01,200 --> 00:23:05,820
<font color="#CCCCCC">may be to compare their inter</font>

519
00:23:02,970 --> 00:23:08,369
probability and just to understand how

520
00:23:05,820 --> 00:23:10,590
secure the arrogance or tests<font color="#E5E5E5"> yeah and</font>

521
00:23:08,369 --> 00:23:12,869
one<font color="#E5E5E5"> of the big problem with crypto is</font>

522
00:23:10,590 --> 00:23:16,289
that you get a lot<font color="#E5E5E5"> of random my stuff</font>

523
00:23:12,869 --> 00:23:19,080
like ECDSA<font color="#CCCCCC"> era CoAP</font><font color="#E5E5E5"> a lot of stuff is</font>

524
00:23:16,289 --> 00:23:21,960
randomized so you can just<font color="#CCCCCC"> even test</font>

525
00:23:19,080 --> 00:23:24,539
vectors for those it's harder so yeah

526
00:23:21,960 --> 00:23:31,980
<font color="#E5E5E5">that's why you might want</font><font color="#CCCCCC"> to use it too</font>

527
00:23:24,539 --> 00:23:34,889
<font color="#E5E5E5">yeah hey um</font>

528
00:23:31,980 --> 00:23:37,679
dear plans to fork<font color="#CCCCCC"> the</font><font color="#E5E5E5"> like open SSL or</font>

529
00:23:34,889 --> 00:23:40,789
the main kind of popular libraries and

530
00:23:37,679 --> 00:23:43,679
remove all<font color="#E5E5E5"> of the actual checks</font>

531
00:23:40,789 --> 00:23:47,039
sorry for generating<font color="#E5E5E5"> um stuff you're</font>

532
00:23:43,679 --> 00:23:48,480
passing<font color="#CCCCCC"> for verification moment you're</font>

533
00:23:47,039 --> 00:23:49,889
saying<font color="#CCCCCC"> an alert generates</font><font color="#E5E5E5"> I'm not</font>

534
00:23:48,480 --> 00:23:57,299
maintaining<font color="#E5E5E5"> you off upon itself</font>

535
00:23:49,889 --> 00:23:59,369
yeah I don't<font color="#E5E5E5"> know if it's not but we</font>

536
00:23:57,299 --> 00:24:01,139
reported some stuff to open<font color="#E5E5E5"> SSL and from</font>

537
00:23:59,369 --> 00:24:01,590
their point of view it was<font color="#E5E5E5"> not worth</font>

538
00:24:01,139 --> 00:24:03,449
<font color="#E5E5E5">fixing</font>

539
00:24:01,590 --> 00:24:05,070
because it from the point<font color="#E5E5E5"> to be</font>

540
00:24:03,450 --> 00:24:08,249
something that<font color="#E5E5E5"> okay that will not happen</font>

541
00:24:05,070 --> 00:24:10,740
in<font color="#CCCCCC"> practice</font><font color="#E5E5E5"> in yeah maybe I went too</font>

542
00:24:08,249 --> 00:24:12,690
fast<font color="#E5E5E5"> on</font><font color="#CCCCCC"> that but actually</font><font color="#E5E5E5"> when the</font>

543
00:24:10,740 --> 00:24:15,149
<font color="#E5E5E5">Thunder is saying something the</font>

544
00:24:12,690 --> 00:24:17,129
libraries are not<font color="#CCCCCC"> always really keen on</font>

545
00:24:15,149 --> 00:24:19,678
<font color="#E5E5E5">implementing it because it has no</font>

546
00:24:17,129 --> 00:24:21,509
practical<font color="#E5E5E5"> incidents in their opinion</font><font color="#CCCCCC"> so</font>

547
00:24:19,679 --> 00:24:24,749
if you don't come and<font color="#E5E5E5"> come up with a</font>

548
00:24:21,509 --> 00:24:26,159
<font color="#CCCCCC">pack</font><font color="#E5E5E5"> they won't they would say hey if</font>

549
00:24:24,749 --> 00:24:27,989
the attacker can provide the domain

550
00:24:26,159 --> 00:24:30,269
parameter then he can provide<font color="#E5E5E5"> the</font>

551
00:24:27,989 --> 00:24:31,859
private key why would I care when it's

552
00:24:30,269 --> 00:24:38,909
not exploitable until it becomes

553
00:24:31,859 --> 00:24:41,040
exploitable<font color="#E5E5E5"> yes I can have a big round</font>

554
00:24:38,909 --> 00:24:44,890
<font color="#E5E5E5">of applause for these guys great job</font>

555
00:24:41,040 --> 00:24:44,889
[Applause]

